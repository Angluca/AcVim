# main()
snippet main
	public fn i32 main(i32 argc, const char** argv) {
		${1}
		return 0;
	}
# main2()
snippet main2
	public fn i32 main() {
		${1}
		return 0;
	}
# mod
snippet mod
	module ${1:/* module name */};
	${2}
# import
snippet im
	import ${1:stdio}${2: local};
	$3
# if/else
snippet if
	if (${1:/* condition */}) {
		${2:/* code */}
	}
snippet el
	else {
		${1}
	}
# Do While Loop
snippet do
	do {
		${2:/* code */}
	} while (${1:/* condition */});
# While Loop
snippet wh
	while (${1:/* condition */}) {
		${2:/* code */}
	}
# For Loop
snippet for
	for (u32 i=0; i<${1:count}; ++i) {
		${2:/* code */}
	}
# Custom For Loop
# Function
snippet fn
	fn ${1:void} ${2:function_name}(${3})
	{
		${4:/* code */}
	}

# Struct
snippet st
	type ${1:/* typename */} struct {
		${2:/* fields */}
	}
# Opaque Struct
snippet os
	public type ${1:/* typename */} struct @(opaque) {
		${2:/* fields */}
	}
# Enum
snippet en
	type ${1:/* typename */} enum ${2:/* type */} {
		${3:/* fields */}
	}
# printf
# unfortunately version this isn't as nice as TextMates's, given the lack of a
# dynamic `...`
snippet pr
	printf("${1:%s}\n"${2});${3}
# fprintf (again, this isn't as nice as TextMate's version, but it works)
snippet fpr
	fprintf(${1:stderr}, "${2:%s}\n"${3});${4}
snippet ccp
	const char* ${1}
