IMG_Animation	$HARESDL/image/v2c/image.ha	/^export type IMG_Animation = struct {$/;"	t
IMG_InitFlags	$HARESDL/image/v2c/image.ha	/^export type IMG_InitFlags = enum {$/;"	t
MIX_InitFlags	$HARESDL/mixer/v2c/mixer.ha	/^export type MIX_InitFlags = enum {$/;"	t
Mix_Chunk	$HARESDL/mixer/v2c/mixer.ha	/^export type Mix_Chunk = struct {$/;"	t
Mix_EffectDone_t	$HARESDL/mixer/v2c/mixer.ha	/^export type Mix_EffectDone_t = *fn(chan: int, udata: nullable *opaque) void;$/;"	t
Mix_EffectFunc_t	$HARESDL/mixer/v2c/mixer.ha	/^export type Mix_EffectFunc_t = *fn(chan: int, stream: *opaque, len_: int, udata: nullable *opaqu/;"	t
Mix_Fading	$HARESDL/mixer/v2c/mixer.ha	/^export type Mix_Fading = enum {$/;"	t
Mix_Music	$HARESDL/mixer/v2c/mixer.ha	/^export type Mix_Music = opaque;$/;"	t
Mix_MusicType	$HARESDL/mixer/v2c/mixer.ha	/^export type Mix_MusicType = enum {$/;"	t
SDL_ArrayOrder	$HARESDL/v2c/pixels.ha	/^export type SDL_ArrayOrder = enum {$/;"	t
SDL_AudioCVT	$HARESDL/v2c/audio.ha	/^export type SDL_AudioCVT = struct @packed {$/;"	t
SDL_AudioCallback	$HARESDL/v2c/audio.ha	/^export type SDL_AudioCallback = fn(userdata: nullable *opaque, stream: *u8, len_: int) void;$/;"	t
SDL_AudioDeviceEvent	$HARESDL/v2c/events.ha	/^export type SDL_AudioDeviceEvent = struct {$/;"	t
SDL_AudioDeviceID	$HARESDL/v2c/audio.ha	/^export type SDL_AudioDeviceID = u32;$/;"	t
SDL_AudioFilter	$HARESDL/v2c/audio.ha	/^export type SDL_AudioFilter = *fn(cvt: *SDL_AudioCVT, format: SDL_AudioFormat) void;$/;"	t
SDL_AudioFormat	$HARESDL/v2c/audio.ha	/^export type SDL_AudioFormat = u16;$/;"	t
SDL_AudioSpec	$HARESDL/v2c/audio.ha	/^export type SDL_AudioSpec = struct {$/;"	t
SDL_AudioStatus	$HARESDL/v2c/audio.ha	/^export type SDL_AudioStatus = enum {$/;"	t
SDL_AudioStream	$HARESDL/v2c/audio.ha	/^export type SDL_AudioStream = opaque;$/;"	t
SDL_BitmapOrder	$HARESDL/v2c/pixels.ha	/^export type SDL_BitmapOrder = enum {$/;"	t
SDL_BlendFactor	$HARESDL/v2c/blendmode.ha	/^export type SDL_BlendFactor = enum {$/;"	t
SDL_BlendMode	$HARESDL/v2c/blendmode.ha	/^export type SDL_BlendMode = enum {$/;"	t
SDL_BlendOperation	$HARESDL/v2c/blendmode.ha	/^export type SDL_BlendOperation = enum {$/;"	t
SDL_BlitMap	$HARESDL/v2c/surface.ha	/^export type SDL_BlitMap = opaque;$/;"	t
SDL_Color	$HARESDL/v2c/pixels.ha	/^export type SDL_Color = struct {$/;"	t
SDL_CommonEvent	$HARESDL/v2c/events.ha	/^export type SDL_CommonEvent = struct {$/;"	t
SDL_ControllerAxisEvent	$HARESDL/v2c/events.ha	/^export type SDL_ControllerAxisEvent = struct {$/;"	t
SDL_ControllerButtonEvent	$HARESDL/v2c/events.ha	/^export type SDL_ControllerButtonEvent = struct {$/;"	t
SDL_ControllerDeviceEvent	$HARESDL/v2c/events.ha	/^export type SDL_ControllerDeviceEvent = struct {$/;"	t
SDL_ControllerSensorEvent	$HARESDL/v2c/events.ha	/^export type SDL_ControllerSensorEvent = struct {$/;"	t
SDL_ControllerTouchpadEvent	$HARESDL/v2c/events.ha	/^export type SDL_ControllerTouchpadEvent = struct {$/;"	t
SDL_Cursor	$HARESDL/v2c/mouse.ha	/^export type SDL_Cursor = opaque;$/;"	t
SDL_DisplayEvent	$HARESDL/v2c/events.ha	/^export type SDL_DisplayEvent = struct {$/;"	t
SDL_DisplayEventID	$HARESDL/v2c/video.ha	/^export type SDL_DisplayEventID = enum u8 {$/;"	t
SDL_DisplayMode	$HARESDL/v2c/video.ha	/^export type SDL_DisplayMode = struct {$/;"	t
SDL_DisplayOrientation	$HARESDL/v2c/video.ha	/^export type SDL_DisplayOrientation = enum {$/;"	t
SDL_DollarGestureEvent	$HARESDL/v2c/events.ha	/^export type SDL_DollarGestureEvent = struct {$/;"	t
SDL_DropEvent	$HARESDL/v2c/events.ha	/^export type SDL_DropEvent = struct {$/;"	t
SDL_Event	$HARESDL/v2c/events.ha	/^export type SDL_Event = union {$/;"	t
SDL_EventFilter	$HARESDL/v2c/events.ha	/^export type SDL_EventFilter = *fn(userdata: *opaque, event: *SDL_Event) int;$/;"	t
SDL_EventType	$HARESDL/v2c/events.ha	/^export type SDL_EventType = enum u32 {$/;"	t
SDL_FPoint	$HARESDL/v2c/rect.ha	/^export type SDL_FPoint = struct {$/;"	t
SDL_FRect	$HARESDL/v2c/rect.ha	/^export type SDL_FRect = struct {$/;"	t
SDL_Finger	$HARESDL/v2c/touch.ha	/^export type SDL_Finger = struct {$/;"	t
SDL_FingerID	$HARESDL/v2c/touch.ha	/^export type SDL_FingerID = i64;$/;"	t
SDL_FlashOperation	$HARESDL/v2c/video.ha	/^export type SDL_FlashOperation = enum {$/;"	t
SDL_GLContext	$HARESDL/v2c/video.ha	/^export type SDL_GLContext = opaque;$/;"	t
SDL_GLContextResetNotification	$HARESDL/v2c/video.ha	/^export type SDL_GLContextResetNotification = enum {$/;"	t
SDL_GLattr	$HARESDL/v2c/video.ha	/^export type SDL_GLattr = enum {$/;"	t
SDL_GLcontextFlag	$HARESDL/v2c/video.ha	/^export type SDL_GLcontextFlag = enum {$/;"	t
SDL_GLcontextReleaseFlag	$HARESDL/v2c/video.ha	/^export type SDL_GLcontextReleaseFlag = enum {$/;"	t
SDL_GLprofile	$HARESDL/v2c/video.ha	/^export type SDL_GLprofile = enum {$/;"	t
SDL_GUID	$HARESDL/v2c/guid.ha	/^export type SDL_GUID = struct {$/;"	t
SDL_GameController	$HARESDL/v2c/gamecontroller.ha	/^export type SDL_GameController = opaque;$/;"	t
SDL_GameControllerAxis	$HARESDL/v2c/gamecontroller.ha	/^export type SDL_GameControllerAxis = enum {$/;"	t
SDL_GameControllerBindType	$HARESDL/v2c/gamecontroller.ha	/^export type SDL_GameControllerBindType = enum {$/;"	t
SDL_GameControllerButton	$HARESDL/v2c/gamecontroller.ha	/^export type SDL_GameControllerButton = enum {$/;"	t
SDL_GameControllerButtonBind	$HARESDL/v2c/gamecontroller.ha	/^export type SDL_GameControllerButtonBind = struct {$/;"	t
SDL_GameControllerType	$HARESDL/v2c/gamecontroller.ha	/^export type SDL_GameControllerType = enum {$/;"	t
SDL_GestureID	$HARESDL/v2c/gesture.ha	/^export type SDL_GestureID = i64;$/;"	t
SDL_Haptic	$HARESDL/v2c/haptic.ha	/^export type SDL_Haptic = opaque;$/;"	t
SDL_HapticCondition	$HARESDL/v2c/haptic.ha	/^export type SDL_HapticCondition = struct {$/;"	t
SDL_HapticConstant	$HARESDL/v2c/haptic.ha	/^export type SDL_HapticConstant = struct {$/;"	t
SDL_HapticCustom	$HARESDL/v2c/haptic.ha	/^export type SDL_HapticCustom = struct {$/;"	t
SDL_HapticDirection	$HARESDL/v2c/haptic.ha	/^export type SDL_HapticDirection = struct {$/;"	t
SDL_HapticEffect	$HARESDL/v2c/haptic.ha	/^export type SDL_HapticEffect = union {$/;"	t
SDL_HapticLeftRight	$HARESDL/v2c/haptic.ha	/^export type SDL_HapticLeftRight = struct {$/;"	t
SDL_HapticPeriodic	$HARESDL/v2c/haptic.ha	/^export type SDL_HapticPeriodic = struct {$/;"	t
SDL_HapticRamp	$HARESDL/v2c/haptic.ha	/^export type SDL_HapticRamp = struct {$/;"	t
SDL_HintCallback	$HARESDL/v2c/hints.ha	/^export type SDL_HintCallback = *fn(userdata: nullable *opaque, name: *c::char, oldValue: *c::cha/;"	t
SDL_HintPriority	$HARESDL/v2c/hints.ha	/^export type SDL_HintPriority = enum {$/;"	t
SDL_HitTest	$HARESDL/v2c/video.ha	/^export type SDL_HitTest = nullable *fn(win: *SDL_Window, area: *SDL_Point, data: *opaque) SDL_Hi/;"	t
SDL_HitTestResult	$HARESDL/v2c/video.ha	/^export type SDL_HitTestResult = enum {$/;"	t
SDL_JoyAxisEvent	$HARESDL/v2c/events.ha	/^export type SDL_JoyAxisEvent = struct {$/;"	t
SDL_JoyBallEvent	$HARESDL/v2c/events.ha	/^export type SDL_JoyBallEvent = struct {$/;"	t
SDL_JoyBatteryEvent	$HARESDL/v2c/events.ha	/^export type SDL_JoyBatteryEvent = struct {$/;"	t
SDL_JoyButtonEvent	$HARESDL/v2c/events.ha	/^export type SDL_JoyButtonEvent = struct {$/;"	t
SDL_JoyDeviceEvent	$HARESDL/v2c/events.ha	/^export type SDL_JoyDeviceEvent = struct {$/;"	t
SDL_JoyHatEvent	$HARESDL/v2c/events.ha	/^export type SDL_JoyHatEvent = struct {$/;"	t
SDL_Joystick	$HARESDL/v2c/joystick.ha	/^export type SDL_Joystick = opaque;$/;"	t
SDL_JoystickGUID	$HARESDL/v2c/joystick.ha	/^export type SDL_JoystickGUID = SDL_GUID;$/;"	t
SDL_JoystickID	$HARESDL/v2c/joystick.ha	/^export type SDL_JoystickID = i32;$/;"	t
SDL_JoystickPowerLevel	$HARESDL/v2c/joystick.ha	/^export type SDL_JoystickPowerLevel = enum i32 {$/;"	t
SDL_JoystickType	$HARESDL/v2c/joystick.ha	/^export type SDL_JoystickType = enum {$/;"	t
SDL_KeyCode	$HARESDL/v2c/keycode.ha	/^export type SDL_KeyCode = enum uint {$/;"	t
SDL_KeyboardEvent	$HARESDL/v2c/events.ha	/^export type SDL_KeyboardEvent = struct {$/;"	t
SDL_Keycode	$HARESDL/v2c/keycode.ha	/^export type SDL_Keycode = i32;$/;"	t
SDL_Keymod	$HARESDL/v2c/keycode.ha	/^export type SDL_Keymod = enum {$/;"	t
SDL_Keysym	$HARESDL/v2c/keyboard.ha	/^export type SDL_Keysym = struct {$/;"	t
SDL_Locale	$HARESDL/v2c/locale.ha	/^export type SDL_Locale = struct {$/;"	t
SDL_MessageBoxButtonData	$HARESDL/v2c/messagebox.ha	/^export type SDL_MessageBoxButtonData = struct {$/;"	t
SDL_MessageBoxButtonFlags	$HARESDL/v2c/messagebox.ha	/^export type SDL_MessageBoxButtonFlags = enum {$/;"	t
SDL_MessageBoxColor	$HARESDL/v2c/messagebox.ha	/^export type SDL_MessageBoxColor = struct {$/;"	t
SDL_MessageBoxColorScheme	$HARESDL/v2c/messagebox.ha	/^export type SDL_MessageBoxColorScheme = struct {$/;"	t
SDL_MessageBoxColorType	$HARESDL/v2c/messagebox.ha	/^export type SDL_MessageBoxColorType = enum {$/;"	t
SDL_MessageBoxData	$HARESDL/v2c/messagebox.ha	/^export type SDL_MessageBoxData = struct {$/;"	t
SDL_MessageBoxFlags	$HARESDL/v2c/messagebox.ha	/^export type SDL_MessageBoxFlags = enum {$/;"	t
SDL_MouseButtonEvent	$HARESDL/v2c/events.ha	/^export type SDL_MouseButtonEvent = struct {$/;"	t
SDL_MouseMotionEvent	$HARESDL/v2c/events.ha	/^export type SDL_MouseMotionEvent = struct {$/;"	t
SDL_MouseWheelDirection	$HARESDL/v2c/mouse.ha	/^export type SDL_MouseWheelDirection = enum u32 {$/;"	t
SDL_MouseWheelEvent	$HARESDL/v2c/events.ha	/^export type SDL_MouseWheelEvent = struct {$/;"	t
SDL_MultiGestureEvent	$HARESDL/v2c/events.ha	/^export type SDL_MultiGestureEvent = struct {$/;"	t
SDL_PackedLayout	$HARESDL/v2c/pixels.ha	/^export type SDL_PackedLayout = enum {$/;"	t
SDL_PackedOrder	$HARESDL/v2c/pixels.ha	/^export type SDL_PackedOrder = enum {$/;"	t
SDL_Palette	$HARESDL/v2c/pixels.ha	/^export type SDL_Palette = struct {$/;"	t
SDL_PixelFormat	$HARESDL/v2c/pixels.ha	/^export type SDL_PixelFormat = struct {$/;"	t
SDL_PixelType	$HARESDL/v2c/pixels.ha	/^export type SDL_PixelType = enum {$/;"	t
SDL_Point	$HARESDL/v2c/rect.ha	/^export type SDL_Point = struct {$/;"	t
SDL_PowerState	$HARESDL/v2c/power.ha	/^export type SDL_PowerState = enum {$/;"	t
SDL_QuitEvent	$HARESDL/v2c/events.ha	/^export type SDL_QuitEvent = struct {$/;"	t
SDL_RWops	$HARESDL/v2c/rwops.ha	/^export type SDL_RWops = struct {$/;"	t
SDL_Rect	$HARESDL/v2c/rect.ha	/^export type SDL_Rect = struct {$/;"	t
SDL_Renderer	$HARESDL/v2c/render.ha	/^export type SDL_Renderer = opaque;$/;"	t
SDL_RendererFlags	$HARESDL/v2c/render.ha	/^export type SDL_RendererFlags = enum u32 {$/;"	t
SDL_RendererFlip	$HARESDL/v2c/render.ha	/^export type SDL_RendererFlip = enum u32 {$/;"	t
SDL_RendererInfo	$HARESDL/v2c/render.ha	/^export type SDL_RendererInfo = struct {$/;"	t
SDL_ScaleMode	$HARESDL/v2c/render.ha	/^export type SDL_ScaleMode = enum {$/;"	t
SDL_Scancode	$HARESDL/v2c/scancode.ha	/^export type SDL_Scancode = enum uint {$/;"	t
SDL_Sensor	$HARESDL/v2c/sensor.ha	/^export type SDL_Sensor = opaque;$/;"	t
SDL_SensorEvent	$HARESDL/v2c/events.ha	/^export type SDL_SensorEvent = struct {$/;"	t
SDL_SensorID	$HARESDL/v2c/sensor.ha	/^export type SDL_SensorID = i32;$/;"	t
SDL_SensorType	$HARESDL/v2c/sensor.ha	/^export type SDL_SensorType = enum {$/;"	t
SDL_Surface	$HARESDL/v2c/surface.ha	/^export type SDL_Surface = struct {$/;"	t
SDL_SysWMEvent	$HARESDL/v2c/events.ha	/^export type SDL_SysWMEvent = struct {$/;"	t
SDL_SystemCursor	$HARESDL/v2c/mouse.ha	/^export type SDL_SystemCursor = enum {$/;"	t
SDL_TLSID	$HARESDL/v2c/thread.ha	/^export type SDL_TLSID = u32;$/;"	t
SDL_TextEditingEvent	$HARESDL/v2c/events.ha	/^export type SDL_TextEditingEvent = struct {$/;"	t
SDL_TextEditingExtEvent	$HARESDL/v2c/events.ha	/^export type SDL_TextEditingExtEvent = struct {$/;"	t
SDL_TextInputEvent	$HARESDL/v2c/events.ha	/^export type SDL_TextInputEvent = struct {$/;"	t
SDL_Texture	$HARESDL/v2c/render.ha	/^export type SDL_Texture = opaque;$/;"	t
SDL_TextureAccess	$HARESDL/v2c/render.ha	/^export type SDL_TextureAccess = enum {$/;"	t
SDL_TextureModulate	$HARESDL/v2c/render.ha	/^export type SDL_TextureModulate = enum {$/;"	t
SDL_Thread	$HARESDL/v2c/thread.ha	/^export type SDL_Thread = opaque;$/;"	t
SDL_ThreadFunction	$HARESDL/v2c/thread.ha	/^export type SDL_ThreadFunction = *fn(data: *opaque) int;$/;"	t
SDL_ThreadPriority	$HARESDL/v2c/thread.ha	/^export type SDL_ThreadPriority = enum {$/;"	t
SDL_TimerCallback	$HARESDL/v2c/timer.ha	/^export type SDL_TimerCallback = *fn(interval: u32, param: nullable *opaque) u32;$/;"	t
SDL_TimerID	$HARESDL/v2c/timer.ha	/^export type SDL_TimerID = int;$/;"	t
SDL_TouchDeviceType	$HARESDL/v2c/touch.ha	/^export type SDL_TouchDeviceType = enum {$/;"	t
SDL_TouchFingerEvent	$HARESDL/v2c/events.ha	/^export type SDL_TouchFingerEvent = struct {$/;"	t
SDL_TouchID	$HARESDL/v2c/touch.ha	/^export type SDL_TouchID = i64;$/;"	t
SDL_UserEvent	$HARESDL/v2c/events.ha	/^export type SDL_UserEvent = struct {$/;"	t
SDL_Vertex	$HARESDL/v2c/render.ha	/^export type SDL_Vertex = struct {$/;"	t
SDL_VirtualJoystickDesc	$HARESDL/v2c/joystick.ha	/^export type SDL_VirtualJoystickDesc = struct {$/;"	t
SDL_Window	$HARESDL/v2c/video.ha	/^export type SDL_Window = opaque;$/;"	t
SDL_WindowEvent	$HARESDL/v2c/events.ha	/^export type SDL_WindowEvent = struct {$/;"	t
SDL_WindowEventID	$HARESDL/v2c/video.ha	/^export type SDL_WindowEventID = enum u8 {$/;"	t
SDL_WindowFlags	$HARESDL/v2c/video.ha	/^export type SDL_WindowFlags = enum u32 {$/;"	t
SDL_WindowShapeMode	$HARESDL/v2c/shape.ha	/^export type SDL_WindowShapeMode = struct {$/;"	t
SDL_WindowShapeParams	$HARESDL/v2c/shape.ha	/^export type SDL_WindowShapeParams = union {$/;"	t
SDL_YUV_CONVERSION_MODE	$HARESDL/v2c/surface.ha	/^export type SDL_YUV_CONVERSION_MODE = enum {$/;"	t
SDL_calloc_func	$HARESDL/v2c/stdinc.ha	/^export type SDL_calloc_func = *fn(nmemb: size, size_: size) nullable *opaque;$/;"	t
SDL_cond	$HARESDL/v2c/mutex.ha	/^export type SDL_cond = opaque;$/;"	t
SDL_eventaction	$HARESDL/v2c/events.ha	/^export type SDL_eventaction = enum {$/;"	t
SDL_free_func	$HARESDL/v2c/stdinc.ha	/^export type SDL_free_func = *fn(mem: *opaque) void;$/;"	t
SDL_hid_device	$HARESDL/v2c/hidapi.ha	/^export type SDL_hid_device = opaque;$/;"	t
SDL_hid_device_info	$HARESDL/v2c/hidapi.ha	/^export type SDL_hid_device_info = struct {$/;"	t
SDL_iconv_t	$HARESDL/v2c/stdinc.ha	/^export type SDL_iconv_t = size;$/;"	t
SDL_malloc_func	$HARESDL/v2c/stdinc.ha	/^export type SDL_malloc_func = *fn(size_: size) nullable *opaque;$/;"	t
SDL_mutex	$HARESDL/v2c/mutex.ha	/^export type SDL_mutex = opaque;$/;"	t
SDL_realloc_func	$HARESDL/v2c/stdinc.ha	/^export type SDL_realloc_func = *fn(mem: *opaque, size_: size) nullable *opaque;$/;"	t
SDL_rw_from_handle	$HARESDL/v2c/rwops.ha	/^export fn SDL_rw_from_handle(in: io::handle) SDL_RWops = {$/;"	f
SDL_sem	$HARESDL/v2c/mutex.ha	/^export type SDL_sem = opaque;$/;"	t
SDL_threadID	$HARESDL/v2c/thread.ha	/^export type SDL_threadID = u32;$/;"	t
SDL_version	$HARESDL/v2c/version.ha	/^export type SDL_version = struct {$/;"	t
TTF_Font	$HARESDL/ttf/v2c/ttf.ha	/^export type TTF_Font = opaque;$/;"	t
WindowShapeMode	$HARESDL/v2c/shape.ha	/^export type WindowShapeMode = enum {$/;"	t
add	$HARESDL/timer/timer.ha	/^export fn add($/;"	f
allowed_changes	$HARESDL/audio/audio.ha	/^export type allowed_changes = enum {$/;"	t
animation	$HARESDL/image/image.ha	/^export type animation = struct {$/;"	t
audio_callback	$HARESDL/audio/audio.ha	/^export type audio_callback = fn(userdata: nullable *opaque, stream: *u8, len_: int) void;$/;"	t
audio_device_id	$HARESDL/audio/audio.ha	/^export type audio_device_id = u32;$/;"	t
audio_format	$HARESDL/audio/audio.ha	/^export type audio_format = enum u16 {$/;"	t
audio_spec	$HARESDL/audio/audio.ha	/^export type audio_spec = struct {$/;"	t
audio_status	$HARESDL/audio/audio.ha	/^export type audio_status = enum {$/;"	t
audio_stream	$HARESDL/audio/audio.ha	/^export type audio_stream = opaque;$/;"	t
audio_stream_available	$HARESDL/audio/audio.ha	/^export fn audio_stream_available(stream: *audio_stream) int =$/;"	f
audio_stream_clear	$HARESDL/audio/audio.ha	/^export fn audio_stream_clear(stream: *audio_stream) void =$/;"	f
audio_stream_flush	$HARESDL/audio/audio.ha	/^export fn audio_stream_flush(stream: *audio_stream) int =$/;"	f
audio_stream_get	$HARESDL/audio/audio.ha	/^export fn audio_stream_get($/;"	f
audio_stream_put	$HARESDL/audio/audio.ha	/^export fn audio_stream_put(stream: *audio_stream, buf: []u8) (void | sdl::error) = {$/;"	f
blend_factor	$HARESDL/blendmode/blendmode.ha	/^export type blend_factor = enum  {$/;"	t
blend_mode	$HARESDL/blendmode/blendmode.ha	/^export type blend_mode = enum  {$/;"	t
blend_operation	$HARESDL/blendmode/blendmode.ha	/^export type blend_operation = enum  {$/;"	t
blit_scaled	$HARESDL/surface/surface.ha	/^export fn blit_scaled($/;"	f
blit_surface	$HARESDL/surface/surface.ha	/^export fn blit_surface($/;"	f
callback	$HARESDL/timer/timer.ha	/^export type callback = *fn(interval: u32, param: nullable *opaque) u32;$/;"	t
clear_queued_audio	$HARESDL/audio/audio.ha	/^export fn clear_queued_audio(dev: audio_device_id) void =$/;"	f
close_audio_device	$HARESDL/audio/audio.ha	/^export fn close_audio_device(dev: audio_device_id) void =$/;"	f
close_font	$HARESDL/ttf/ttf.ha	/^export fn close_font(font: nullable *font) void =$/;"	f
color	$HARESDL/pixels/pixels.ha	/^export type color = struct {$/;"	t
compose_custom_blend_mode	$HARESDL/blendmode/blendmode.ha	/^export fn compose_custom_blend_mode($/;"	f
cond	$HARESDL/mutex/mutex.ha	/^export type cond = opaque;$/;"	t
cond_broadcast	$HARESDL/mutex/mutex.ha	/^export fn cond_broadcast(cond: *cond) (void | sdl::error) =$/;"	f
cond_signal	$HARESDL/mutex/mutex.ha	/^export fn cond_signal(cond: *cond) (void | sdl::error) =$/;"	f
cond_wait	$HARESDL/mutex/mutex.ha	/^export fn cond_wait(cond: *cond, mutex: *mutex) (void | sdl::error) = {$/;"	f
cond_wait_timeout	$HARESDL/mutex/mutex.ha	/^export fn cond_wait_timeout($/;"	f
convert_pixels	$HARESDL/surface/surface.ha	/^export fn convert_pixels($/;"	f
convert_surface	$HARESDL/surface/surface.ha	/^export fn convert_surface($/;"	f
convert_surface_format	$HARESDL/surface/surface.ha	/^export fn convert_surface_format($/;"	f
create_cond	$HARESDL/mutex/mutex.ha	/^export fn create_cond() (*cond | sdl::error) =$/;"	f
create_mutex	$HARESDL/mutex/mutex.ha	/^export fn create_mutex() (*mutex | sdl::error) =$/;"	f
create_renderer	$HARESDL/render/render.ha	/^export fn create_renderer($/;"	f
create_rgb_surface	$HARESDL/surface/surface.ha	/^export fn create_rgb_surface($/;"	f
create_rgb_surface_from	$HARESDL/surface/surface.ha	/^export fn create_rgb_surface_from($/;"	f
create_rgb_surface_with_format	$HARESDL/surface/surface.ha	/^export fn create_rgb_surface_with_format($/;"	f
create_rgb_surface_with_format_from	$HARESDL/surface/surface.ha	/^export fn create_rgb_surface_with_format_from($/;"	f
create_semaphore	$HARESDL/mutex/mutex.ha	/^export fn create_semaphore(initial_value: u32) (*sem | sdl::error) = {$/;"	f
create_software_renderer	$HARESDL/render/render.ha	/^export fn create_software_renderer($/;"	f
create_texture	$HARESDL/render/render.ha	/^export fn create_texture($/;"	f
create_texture_from_surface	$HARESDL/render/render.ha	/^export fn create_texture_from_surface($/;"	f
create_thread	$HARESDL/thread/thread.ha	/^export fn create_thread($/;"	f
create_thread_with_stack_size	$HARESDL/thread/thread.ha	/^export fn create_thread_with_stack_size($/;"	f
create_window	$HARESDL/video/video.ha	/^export fn create_window($/;"	f
create_window_and_renderer	$HARESDL/render/render.ha	/^export fn create_window_and_renderer($/;"	f
create_window_from	$HARESDL/video/video.ha	/^export fn create_window_from(data: *opaque) (*window | sdl::error) =$/;"	f
delay	$HARESDL/timer/timer.ha	/^export fn delay(ms: u32) void = SDL_Delay(ms);$/;"	f
dequeue_audio	$HARESDL/audio/audio.ha	/^export fn dequeue_audio(dev: audio_device_id, data: *opaque, len_: u32) u32 = {$/;"	f
destroy_cond	$HARESDL/mutex/mutex.ha	/^export fn destroy_cond(cond: *cond) void = SDL_DestroyCond(cond: *SDL_cond);$/;"	f
destroy_mutex	$HARESDL/mutex/mutex.ha	/^export fn destroy_mutex(mutex: *mutex) void = {$/;"	f
destroy_renderer	$HARESDL/render/render.ha	/^export fn destroy_renderer(renderer: *renderer) void =$/;"	f
destroy_semaphore	$HARESDL/mutex/mutex.ha	/^export fn destroy_semaphore(sem: *sem) void = {$/;"	f
destroy_texture	$HARESDL/render/render.ha	/^export fn destroy_texture(texture: *texture) void =$/;"	f
destroy_window	$HARESDL/video/video.ha	/^export fn destroy_window(window: *window) void =$/;"	f
destroy_window_surface	$HARESDL/video/video.ha	/^export fn destroy_window_surface(window: *window) (void | sdl::error) =$/;"	f
detach_thread	$HARESDL/thread/thread.ha	/^export fn detach_thread(thread: nullable *thread) void =$/;"	f
disable_screen_saver	$HARESDL/video/video.ha	/^export fn disable_screen_saver() void = SDL_DisableScreenSaver();$/;"	f
display_connected	$HARESDL/events/events.ha	/^export type display_connected = display_event_common;$/;"	t
display_disconnected	$HARESDL/events/events.ha	/^export type display_disconnected = display_event_common;$/;"	t
display_event_common	$HARESDL/events/events.ha	/^export type display_event_common = struct {$/;"	t
display_mode	$HARESDL/video/video.ha	/^export type display_mode = struct {$/;"	t
display_moved	$HARESDL/events/events.ha	/^export type display_moved = display_event_common;$/;"	t
display_orientation	$HARESDL/video/video.ha	/^export type display_orientation = enum i32 {$/;"	t
display_orientation_changed	$HARESDL/events/events.ha	/^export type display_orientation_changed = struct {$/;"	t
dpi	$HARESDL/video/video.ha	/^export type dpi = struct {$/;"	t
duplicate_surface	$HARESDL/surface/surface.ha	/^export fn duplicate_surface(sfc: *surface) (*surface | sdl::error) =$/;"	f
enable_screen_saver	$HARESDL/video/video.ha	/^export fn enable_screen_saver() void = SDL_EnableScreenSaver();$/;"	f
error	$HARESDL/audio/audio.ha	/^export fn get_default_audio_info(iscapture: int) ((str, audio_spec) | sdl::error) = {$/;"	f
error	$HARESDL/clipboard/clipboard.ha	/^export fn set_primary_selection_text(text: str) (void | sdl::error) = {$/;"	f
error	$HARESDL/cpuinfo/cpuinfo.ha	/^export fn simd_alloc(len_: size) (*opaque | sdl::error) =$/;"	f
error	$HARESDL/errors.ha	/^export type error = !str;$/;"	t
error	$HARESDL/image/error.ha	/^export type error = !str;$/;"	t
error	$HARESDL/misc/misc.ha	/^export fn open_url(url: str) (void | sdl::error) = {$/;"	f
error	$HARESDL/mutex/mutex.ha	/^export fn unlock_mutex(mutex: *mutex) (void | sdl::error) = {$/;"	f
error	$HARESDL/render/render.ha	/^export fn render_get_window(renderer: *renderer) (*sdl::window | sdl::error) =$/;"	f
error	$HARESDL/surface/surface.ha	/^export fn set_surface_rle(surface: *surface, enable: bool) (void | sdl::error) = {$/;"	f
error	$HARESDL/thread/thread.ha	/^export fn set_thread_priority(priority: thread_priority) (void | sdl::error) =$/;"	f
error	$HARESDL/ttf/errors.ha	/^export type error = !str;$/;"	t
error	$HARESDL/video/video.ha	/^export fn update_window_surface(window: *window) (void | sdl::error) =$/;"	f
event	$HARESDL/events/events.ha	/^export type event = (quit_requested | display_connected | display_disconnected$/;"	t
event_common	$HARESDL/events/events.ha	/^export type event_common = struct {$/;"	t
fill_rect	$HARESDL/surface/surface.ha	/^export fn fill_rect($/;"	f
fill_rects	$HARESDL/surface/surface.ha	/^export fn fill_rects($/;"	f
flash_operation	$HARESDL/video/video.ha	/^export type flash_operation = enum {$/;"	t
flash_window	$HARESDL/video/video.ha	/^export fn flash_window($/;"	f
font	$HARESDL/ttf/ttf.ha	/^export type font = opaque;$/;"	t
font_ascent	$HARESDL/ttf/ttf.ha	/^export fn font_ascent(font: *font) int =$/;"	f
font_descent	$HARESDL/ttf/ttf.ha	/^export fn font_descent(font: *font) int =$/;"	f
font_face_family_name	$HARESDL/ttf/ttf.ha	/^export fn font_face_family_name(font: *font) str =$/;"	f
font_face_is_fixed_width	$HARESDL/ttf/ttf.ha	/^export fn font_face_is_fixed_width(font: *font) bool =$/;"	f
font_face_style_name	$HARESDL/ttf/ttf.ha	/^export fn font_face_style_name(font: *font) str =$/;"	f
font_faces	$HARESDL/ttf/ttf.ha	/^export fn font_faces(font: *font) i32 =$/;"	f
font_height	$HARESDL/ttf/ttf.ha	/^export fn font_height(font: *font) int =$/;"	f
font_line_skip	$HARESDL/ttf/ttf.ha	/^export fn font_line_skip(font: *font) int =$/;"	f
fpoint	$HARESDL/rect/rect.ha	/^export type fpoint = struct {$/;"	t
frect	$HARESDL/rect/rect.ha	/^export type frect = struct {$/;"	t
free_animation	$HARESDL/image/image.ha	/^export fn free_animation(anim: *animation) void =$/;"	f
free_audio_stream	$HARESDL/audio/audio.ha	/^export fn free_audio_stream(stream: *audio_stream) void =$/;"	f
free_surface	$HARESDL/surface/surface.ha	/^export fn free_surface(surface: nullable *surface) void =$/;"	f
free_wav	$HARESDL/audio/audio.ha	/^export fn free_wav(audio_buf: nullable *u8) void = SDL_FreeWAV(audio_buf);$/;"	f
get_audio_device_name	$HARESDL/audio/audio.ha	/^export fn get_audio_device_name(index: int, iscapture: int) (str | sdl::error) =$/;"	f
get_audio_device_spec	$HARESDL/audio/audio.ha	/^export fn get_audio_device_spec($/;"	f
get_audio_device_status	$HARESDL/audio/audio.ha	/^export fn get_audio_device_status(dev: audio_device_id) audio_status =$/;"	f
get_audio_driver	$HARESDL/audio/audio.ha	/^export fn get_audio_driver(index: int) (str | sdl::error) =$/;"	f
get_clip_rect	$HARESDL/surface/surface.ha	/^export fn get_clip_rect(surface: *surface, rect: *sdl::rect) void =$/;"	f
get_clipboard_text	$HARESDL/clipboard/clipboard.ha	/^export fn get_clipboard_text() (str | sdl::error) = {$/;"	f
get_color_key	$HARESDL/surface/surface.ha	/^export fn get_color_key(surface: *surface) (u32 | sdl::error) = {$/;"	f
get_cpucache_line_size	$HARESDL/cpuinfo/cpuinfo.ha	/^export fn get_cpucache_line_size() int = SDL_GetCPUCacheLineSize();$/;"	f
get_cpucount	$HARESDL/cpuinfo/cpuinfo.ha	/^export fn get_cpucount() int = SDL_GetCPUCount();$/;"	f
get_current_audio_driver	$HARESDL/audio/audio.ha	/^export fn get_current_audio_driver() (str | sdl::error) =$/;"	f
get_current_video_driver	$HARESDL/video/video.ha	/^export fn get_current_video_driver() (str | void) = {$/;"	f
get_default_audio_info	$HARESDL/audio/audio.ha	/^export fn get_default_audio_info(iscapture: int) ((str, audio_spec) | sdl::error) = {$/;"	f
get_display_bounds	$HARESDL/video/video.ha	/^export fn get_display_bounds(index: int) (sdl::rect | sdl::error) = {$/;"	f
get_display_dpi	$HARESDL/video/video.ha	/^export fn get_display_dpi(index: int) (dpi | sdl::error) = {$/;"	f
get_display_mode	$HARESDL/video/video.ha	/^export fn get_display_mode($/;"	f
get_display_name	$HARESDL/video/video.ha	/^export fn get_display_name(index: int) (str | sdl::error) =$/;"	f
get_display_orientation	$HARESDL/video/video.ha	/^export fn get_display_orientation(index: int) display_orientation =$/;"	f
get_display_usable_bounds	$HARESDL/video/video.ha	/^export fn get_display_usable_bounds(index: int) (sdl::rect | sdl::error) = {$/;"	f
get_error	$HARESDL/ttf/errors.ha	/^export fn get_error() error = c::tostr(SDL_GetError()): error;$/;"	f
get_font_hinting	$HARESDL/ttf/ttf.ha	/^export fn get_font_hinting(font: *font) hinting =$/;"	f
get_font_kerning	$HARESDL/ttf/ttf.ha	/^export fn get_font_kerning(font: *font) bool =$/;"	f
get_font_outline	$HARESDL/ttf/ttf.ha	/^export fn get_font_outline(font: *font) int =$/;"	f
get_font_style	$HARESDL/ttf/ttf.ha	/^export fn get_font_style(font: *font) style =$/;"	f
get_font_wrapped_align	$HARESDL/ttf/ttf.ha	/^export fn get_font_wrapped_align(font: *font) wrapped_align =$/;"	f
get_free_type_version	$HARESDL/ttf/ttf.ha	/^export fn get_free_type_version($/;"	f
get_grabbed_window	$HARESDL/video/video.ha	/^export fn get_grabbed_window() (*window | void) = {$/;"	f
get_harf_buzz_version	$HARESDL/ttf/ttf.ha	/^export fn get_harf_buzz_version($/;"	f
get_hint	$HARESDL/hints/hints.ha	/^export fn get_hint(name: str) (void | str) = {$/;"	f
get_hint_boolean	$HARESDL/hints/hints.ha	/^export fn get_hint_boolean(name: str, default_value: bool) bool = {$/;"	f
get_num_audio_devices	$HARESDL/audio/audio.ha	/^export fn get_num_audio_devices(iscapture: int) (void | int) = {$/;"	f
get_num_audio_drivers	$HARESDL/audio/audio.ha	/^export fn get_num_audio_drivers() int = SDL_GetNumAudioDrivers();$/;"	f
get_num_display_modes	$HARESDL/video/video.ha	/^export fn get_num_display_modes(display_index: int) (int | sdl::error) =$/;"	f
get_num_render_drivers	$HARESDL/render/render.ha	/^export fn get_num_render_drivers() (int | sdl::error) =$/;"	f
get_num_video_displays	$HARESDL/video/video.ha	/^export fn get_num_video_displays() (int | sdl::error) =$/;"	f
get_num_video_drivers	$HARESDL/video/video.ha	/^export fn get_num_video_drivers() (int | sdl::error) =$/;"	f
get_performance_counter	$HARESDL/timer/timer.ha	/^export fn get_performance_counter() u64 = SDL_GetPerformanceCounter();$/;"	f
get_performance_frequency	$HARESDL/timer/timer.ha	/^export fn get_performance_frequency() u64 = SDL_GetPerformanceFrequency();$/;"	f
get_power_info	$HARESDL/power/power.ha	/^export fn get_power_info($/;"	f
get_primary_selection_text	$HARESDL/clipboard/clipboard.ha	/^export fn get_primary_selection_text() (str | sdl::error) = {$/;"	f
get_queued_audio_size	$HARESDL/audio/audio.ha	/^export fn get_queued_audio_size(dev: audio_device_id) u32 =$/;"	f
get_render_draw_blend_mode	$HARESDL/render/render.ha	/^export fn get_render_draw_blend_mode($/;"	f
get_render_draw_color	$HARESDL/render/render.ha	/^export fn get_render_draw_color($/;"	f
get_render_driver_info	$HARESDL/render/render.ha	/^export fn get_render_driver_info(index: int) (renderer_info | sdl::error) = {$/;"	f
get_render_target	$HARESDL/render/render.ha	/^export fn get_render_target(renderer: *renderer) (*texture | void) = {$/;"	f
get_renderer	$HARESDL/render/render.ha	/^export fn get_renderer(window: *sdl::window) (*renderer | sdl::error) =$/;"	f
get_renderer_info	$HARESDL/render/render.ha	/^export fn get_renderer_info(renderer: *renderer) (renderer_info | sdl::error) = {$/;"	f
get_renderer_output_size	$HARESDL/render/render.ha	/^export fn get_renderer_output_size($/;"	f
get_revision	$HARESDL/version.ha	/^export fn get_revision() str = c::tostr(SDL_GetRevision())!;$/;"	f
get_surface_alpha_mod	$HARESDL/surface/surface.ha	/^export fn get_surface_alpha_mod(surface: *surface, alpha: *u8) (void | sdl::error) =$/;"	f
get_surface_blend_mode	$HARESDL/surface/surface.ha	/^export fn get_surface_blend_mode(surface: *surface) (sdl::blend_mode | sdl::error) = {$/;"	f
get_surface_color_mod	$HARESDL/surface/surface.ha	/^export fn get_surface_color_mod($/;"	f
get_system_ram	$HARESDL/cpuinfo/cpuinfo.ha	/^export fn get_system_ram() int = SDL_GetSystemRAM();$/;"	f
get_texture_alpha_mod	$HARESDL/render/render.ha	/^export fn get_texture_alpha_mod($/;"	f
get_texture_blend_mode	$HARESDL/render/render.ha	/^export fn get_texture_blend_mode($/;"	f
get_texture_color_mod	$HARESDL/render/render.ha	/^export fn get_texture_color_mod($/;"	f
get_texture_scale_mode	$HARESDL/render/render.ha	/^export fn get_texture_scale_mode($/;"	f
get_texture_user_data	$HARESDL/render/render.ha	/^export fn get_texture_user_data(texture: *texture) (*opaque | sdl::error) =$/;"	f
get_thread_id	$HARESDL/thread/thread.ha	/^export fn get_thread_id(thread: nullable *thread) thread_id =$/;"	f
get_thread_name	$HARESDL/thread/thread.ha	/^export fn get_thread_name(thread: *thread) (str | void) = {$/;"	f
get_ticks64	$HARESDL/timer/timer.ha	/^export fn get_ticks64() u64 = SDL_GetTicks64();$/;"	f
get_version	$HARESDL/version.ha	/^export fn get_version(ver: *version) void = SDL_GetVersion(ver: *SDL_version);$/;"	f
get_video_driver	$HARESDL/video/video.ha	/^export fn get_video_driver(index: int) (str | sdl::error) =$/;"	f
get_window_borders_size	$HARESDL/video/video.ha	/^export fn get_window_borders_size($/;"	f
get_window_brightness	$HARESDL/video/video.ha	/^export fn get_window_brightness(window: *window) f32 =$/;"	f
get_window_data	$HARESDL/video/video.ha	/^export fn get_window_data(window: *window, name: str) nullable *opaque = {$/;"	f
get_window_flags	$HARESDL/video/video.ha	/^export fn get_window_flags(window: *window) window_flags =$/;"	f
get_window_from_id	$HARESDL/video/video.ha	/^export fn get_window_from_id(id: window_id) (*window | sdl::error) =$/;"	f
get_window_gamma_ramp	$HARESDL/video/video.ha	/^export fn get_window_gamma_ramp($/;"	f
get_window_grab	$HARESDL/video/video.ha	/^export fn get_window_grab(window: *window) bool =$/;"	f
get_window_id	$HARESDL/video/video.ha	/^export fn get_window_id(window: *window) (window_id | sdl::error) = {$/;"	f
get_window_keyboard_grab	$HARESDL/video/video.ha	/^export fn get_window_keyboard_grab(window: *window) bool =$/;"	f
get_window_maximum_size	$HARESDL/video/video.ha	/^export fn get_window_maximum_size($/;"	f
get_window_minimum_size	$HARESDL/video/video.ha	/^export fn get_window_minimum_size($/;"	f
get_window_mouse_grab	$HARESDL/video/video.ha	/^export fn get_window_mouse_grab(window: *window) bool =$/;"	f
get_window_mouse_rect	$HARESDL/video/video.ha	/^export fn get_window_mouse_rect(window: *window) (*sdl::rect | void) = {$/;"	f
get_window_opacity	$HARESDL/video/video.ha	/^export fn get_window_opacity(window: *window) (f32 | sdl::error) = {$/;"	f
get_window_position	$HARESDL/video/video.ha	/^export fn get_window_position($/;"	f
get_window_size	$HARESDL/video/video.ha	/^export fn get_window_size(window: *window) (int, int) = {$/;"	f
get_window_size_in_pixels	$HARESDL/video/video.ha	/^export fn get_window_size_in_pixels($/;"	f
get_window_surface	$HARESDL/video/video.ha	/^export fn get_window_surface(window: *window) (*sdl::surface | sdl::error) =$/;"	f
get_window_title	$HARESDL/video/video.ha	/^export fn get_window_title(window: *window) str =$/;"	f
get_yuvconversion_mode	$HARESDL/surface/surface.ha	/^export fn get_yuvconversion_mode() yuv_conversion_mode =$/;"	f
get_yuvconversion_mode_for_resolution	$HARESDL/surface/surface.ha	/^export fn get_yuvconversion_mode_for_resolution($/;"	f
gl_bind_texture	$HARESDL/render/render.ha	/^export fn gl_bind_texture($/;"	f
gl_create_context	$HARESDL/video/video.ha	/^export fn gl_create_context(window: *window) (*glcontext | sdl::error) =$/;"	f
gl_delete_context	$HARESDL/video/video.ha	/^export fn gl_delete_context(context: *glcontext) void =$/;"	f
gl_extension_supported	$HARESDL/video/video.ha	/^export fn gl_extension_supported(extension: str) bool = {$/;"	f
gl_get_attribute	$HARESDL/video/video.ha	/^export fn gl_get_attribute(attr: glattr) (int | sdl::error) = {$/;"	f
gl_get_current_context	$HARESDL/video/video.ha	/^export fn gl_get_current_context() (*glcontext | sdl::error) =$/;"	f
gl_get_current_window	$HARESDL/video/video.ha	/^export fn gl_get_current_window() (*window | sdl::error) =$/;"	f
gl_get_drawable_size	$HARESDL/video/video.ha	/^export fn gl_get_drawable_size($/;"	f
gl_get_proc_address	$HARESDL/video/video.ha	/^export fn gl_get_proc_address(proc: *c::char) (*opaque | sdl::error) =$/;"	f
gl_get_swap_interval	$HARESDL/video/video.ha	/^export fn gl_get_swap_interval() int = SDL_GL_GetSwapInterval();$/;"	f
gl_load_library	$HARESDL/video/video.ha	/^export fn gl_load_library(path: nullable *c::char) (void | sdl::error) =$/;"	f
gl_make_current	$HARESDL/video/video.ha	/^export fn gl_make_current($/;"	f
gl_reset_attributes	$HARESDL/video/video.ha	/^export fn gl_reset_attributes() void = SDL_GL_ResetAttributes();$/;"	f
gl_set_attribute	$HARESDL/video/video.ha	/^export fn gl_set_attribute(attr: glattr, value: int) (void | sdl::error) =$/;"	f
gl_set_swap_interval	$HARESDL/video/video.ha	/^export fn gl_set_swap_interval(interval: int) (void | sdl::error) =$/;"	f
gl_swap_window	$HARESDL/video/video.ha	/^export fn gl_swap_window(window: *window) void =$/;"	f
gl_unbind_texture	$HARESDL/render/render.ha	/^export fn gl_unbind_texture(texture: *texture) (void | sdl::error) =$/;"	f
gl_unload_library	$HARESDL/video/video.ha	/^export fn gl_unload_library() void = SDL_GL_UnloadLibrary();$/;"	f
glattr	$HARESDL/video/video.ha	/^export type glattr = enum {$/;"	t
glcontext	$HARESDL/video/video.ha	/^export type glcontext = opaque;$/;"	t
glyph_is_provided	$HARESDL/ttf/ttf.ha	/^export fn glyph_is_provided(font: *font, r: rune) bool =$/;"	f
glyph_metrics32	$HARESDL/ttf/ttf.ha	/^export fn glyph_metrics32($/;"	f
handle	$HARESDL/image/image.ha	/^export fn save_png_h(surface: *sdl::surface, dst: io::handle) (void | error) = {$/;"	f
handle	$HARESDL/ttf/ttf.ha	/^export fn open_font_h(src: io::handle, ptsize: int) (*font | error) = {$/;"	f
handle	$HARESDL/v2c/rwops.ha	/^export fn SDL_rw_from_handle(in: io::handle) SDL_RWops = {$/;"	f
has3_dnow	$HARESDL/cpuinfo/cpuinfo.ha	/^export fn has3_dnow() bool = SDL_Has3DNow();$/;"	f
has_alti_vec	$HARESDL/cpuinfo/cpuinfo.ha	/^export fn has_alti_vec() bool = SDL_HasAltiVec();$/;"	f
has_avx	$HARESDL/cpuinfo/cpuinfo.ha	/^export fn has_avx() bool = SDL_HasAVX();$/;"	f
has_avx2	$HARESDL/cpuinfo/cpuinfo.ha	/^export fn has_avx2() bool = SDL_HasAVX2();$/;"	f
has_avx512_f	$HARESDL/cpuinfo/cpuinfo.ha	/^export fn has_avx512_f() bool = SDL_HasAVX512F();$/;"	f
has_clipboard_text	$HARESDL/clipboard/clipboard.ha	/^export fn has_clipboard_text() bool = SDL_HasClipboardText();$/;"	f
has_color_key	$HARESDL/surface/surface.ha	/^export fn has_color_key(surface: nullable *surface) bool = {$/;"	f
has_lasx	$HARESDL/cpuinfo/cpuinfo.ha	/^export fn has_lasx() bool = SDL_HasLASX();$/;"	f
has_lsx	$HARESDL/cpuinfo/cpuinfo.ha	/^export fn has_lsx() bool = SDL_HasLSX();$/;"	f
has_mmx	$HARESDL/cpuinfo/cpuinfo.ha	/^export fn has_mmx() bool = SDL_HasMMX();$/;"	f
has_neon	$HARESDL/cpuinfo/cpuinfo.ha	/^export fn has_neon() bool = SDL_HasNEON();$/;"	f
has_primary_selection_text	$HARESDL/clipboard/clipboard.ha	/^export fn has_primary_selection_text() bool = SDL_HasPrimarySelectionText();$/;"	f
has_rdtsc	$HARESDL/cpuinfo/cpuinfo.ha	/^export fn has_rdtsc() bool = SDL_HasRDTSC();$/;"	f
has_sse	$HARESDL/cpuinfo/cpuinfo.ha	/^export fn has_sse() bool = SDL_HasSSE();$/;"	f
has_sse2	$HARESDL/cpuinfo/cpuinfo.ha	/^export fn has_sse2() bool = SDL_HasSSE2();$/;"	f
has_sse3	$HARESDL/cpuinfo/cpuinfo.ha	/^export fn has_sse3() bool = SDL_HasSSE3();$/;"	f
has_sse41	$HARESDL/cpuinfo/cpuinfo.ha	/^export fn has_sse41() bool = SDL_HasSSE41();$/;"	f
has_sse42	$HARESDL/cpuinfo/cpuinfo.ha	/^export fn has_sse42() bool = SDL_HasSSE42();$/;"	f
has_surface_rle	$HARESDL/surface/surface.ha	/^export fn has_surface_rle(surface: nullable *surface) bool = {$/;"	f
has_window_surface	$HARESDL/video/video.ha	/^export fn has_window_surface(window: *window) bool =$/;"	f
hide_window	$HARESDL/video/video.ha	/^export fn hide_window(window: *window) void =$/;"	f
hint_priority	$HARESDL/hints/hints.ha	/^export type hint_priority = enum {$/;"	t
hinting	$HARESDL/ttf/ttf.ha	/^export type hinting = enum {$/;"	t
hit_test	$HARESDL/video/video.ha	/^export type hit_test = fn($/;"	t
hit_test_result	$HARESDL/video/video.ha	/^export type hit_test_result = enum {$/;"	t
init	$HARESDL/image/image.ha	/^export fn init(flags: int) (int | error) = {$/;"	f
init	$HARESDL/sdl.ha	/^export fn init(flags: init_flags) (void | error) = wrapvoid(SDL_Init(flags));$/;"	f
init	$HARESDL/ttf/ttf.ha	/^export fn init() (void | error) = wrapvoid(TTF_Init());$/;"	f
init_flags	$HARESDL/image/image.ha	/^export type init_flags = enum {$/;"	t
init_flags	$HARESDL/sdl.ha	/^export type init_flags = enum u32 {$/;"	t
is_avif	$HARESDL/image/image.ha	/^export fn is_avif(src: io::handle) bool = {$/;"	f
is_bmp	$HARESDL/image/image.ha	/^export fn is_bmp(src: io::handle) bool = {$/;"	f
is_cur	$HARESDL/image/image.ha	/^export fn is_cur(src: io::handle) bool = {$/;"	f
is_gif	$HARESDL/image/image.ha	/^export fn is_gif(src: io::handle) bool = {$/;"	f
is_ico	$HARESDL/image/image.ha	/^export fn is_ico(src: io::handle) bool = {$/;"	f
is_jpg	$HARESDL/image/image.ha	/^export fn is_jpg(src: io::handle) bool = {$/;"	f
is_jxl	$HARESDL/image/image.ha	/^export fn is_jxl(src: io::handle) bool = {$/;"	f
is_lbm	$HARESDL/image/image.ha	/^export fn is_lbm(src: io::handle) bool = {$/;"	f
is_pcx	$HARESDL/image/image.ha	/^export fn is_pcx(src: io::handle) bool = {$/;"	f
is_png	$HARESDL/image/image.ha	/^export fn is_png(src: io::handle) bool = {$/;"	f
is_pnm	$HARESDL/image/image.ha	/^export fn is_pnm(src: io::handle) bool = {$/;"	f
is_qoi	$HARESDL/image/image.ha	/^export fn is_qoi(src: io::handle) bool= {$/;"	f
is_screen_saver_enabled	$HARESDL/video/video.ha	/^export fn is_screen_saver_enabled() bool = SDL_IsScreenSaverEnabled();$/;"	f
is_svg	$HARESDL/image/image.ha	/^export fn is_svg(src: io::handle) bool = {$/;"	f
is_tif	$HARESDL/image/image.ha	/^export fn is_tif(src: io::handle) bool = {$/;"	f
is_webp	$HARESDL/image/image.ha	/^export fn is_webp(src: io::handle) bool = {$/;"	f
is_xcf	$HARESDL/image/image.ha	/^export fn is_xcf(src: io::handle) bool = {$/;"	f
is_xpm	$HARESDL/image/image.ha	/^export fn is_xpm(src: io::handle) bool = {$/;"	f
is_xv	$HARESDL/image/image.ha	/^export fn is_xv(src: io::handle) bool = {$/;"	f
key_pressed	$HARESDL/events/events.ha	/^export type key_pressed = struct {$/;"	t
key_released	$HARESDL/events/events.ha	/^export type key_released = struct {$/;"	t
keycode	$HARESDL/keycode/keycode.ha	/^export type keycode = enum uint {$/;"	t
keymod	$HARESDL/keycode/keycode.ha	/^export type keymod = enum {$/;"	t
keysym	$HARESDL/keyboard/keyboard.ha	/^export type keysym = struct {$/;"	t
linked_version	$HARESDL/image/image.ha	/^export fn linked_version() *sdl::version = IMG_Linked_Version(): *sdl::version;$/;"	f
linked_version	$HARESDL/mixer/mixer.ha	/^export fn linked_version() *sdl::version = Mix_Linked_Version(): *sdl::version;$/;"	f
linked_version	$HARESDL/ttf/ttf.ha	/^export fn linked_version() *sdl::version = TTF_Linked_Version(): *sdl::version;$/;"	f
load	$HARESDL/image/image.ha	/^export fn load(file: str) (*sdl::surface | error) = {$/;"	f
load_animation	$HARESDL/image/image.ha	/^export fn load_animation(file: str) (*animation | error) = {$/;"	f
load_animation_h	$HARESDL/image/image.ha	/^export fn load_animation_h(src: io::handle) (*animation | error) = {$/;"	f
load_animation_typed_h	$HARESDL/image/image.ha	/^export fn load_animation_typed_h($/;"	f
load_avif_h	$HARESDL/image/image.ha	/^export fn load_avif_h(src: io::handle) (*sdl::surface | error) = {$/;"	f
load_bmp_h	$HARESDL/image/image.ha	/^export fn load_bmp_h(src: io::handle) (*sdl::surface | error) = {$/;"	f
load_cur_h	$HARESDL/image/image.ha	/^export fn load_cur_h(src: io::handle) (*sdl::surface | error) = {$/;"	f
load_gif_animation_h	$HARESDL/image/image.ha	/^export fn load_gif_animation_h(src: io::handle) (*animation | error) = {$/;"	f
load_gif_h	$HARESDL/image/image.ha	/^export fn load_gif_h(src: io::handle) (*sdl::surface | error) = {$/;"	f
load_h	$HARESDL/image/image.ha	/^export fn load_h(src: io::handle) (*sdl::surface | error) = {$/;"	f
load_ico_h	$HARESDL/image/image.ha	/^export fn load_ico_h(src: io::handle) (*sdl::surface | error) = {$/;"	f
load_jpg_h	$HARESDL/image/image.ha	/^export fn load_jpg_h(src: io::handle) (*sdl::surface | error) = {$/;"	f
load_jxl_h	$HARESDL/image/image.ha	/^export fn load_jxl_h(src: io::handle) (*sdl::surface | error) = {$/;"	f
load_lbm_h	$HARESDL/image/image.ha	/^export fn load_lbm_h(src: io::handle) (*sdl::surface | error) = {$/;"	f
load_pcx_h	$HARESDL/image/image.ha	/^export fn load_pcx_h(src: io::handle) (*sdl::surface | error) = {$/;"	f
load_png_h	$HARESDL/image/image.ha	/^export fn load_png_h(src: io::handle) (*sdl::surface | error) = {$/;"	f
load_pnm_h	$HARESDL/image/image.ha	/^export fn load_pnm_h(src: io::handle) (*sdl::surface | error) = {$/;"	f
load_qoi_h	$HARESDL/image/image.ha	/^export fn load_qoi_h(src: io::handle) (*sdl::surface | error) = {$/;"	f
load_sized_svg_h	$HARESDL/image/image.ha	/^export fn load_sized_svg_h($/;"	f
load_svg_h	$HARESDL/image/image.ha	/^export fn load_svg_h(src: io::handle) (*sdl::surface | error) = {$/;"	f
load_texture	$HARESDL/image/image.ha	/^export fn load_texture($/;"	f
load_texture_h	$HARESDL/image/image.ha	/^export fn load_texture_h($/;"	f
load_texture_typed_h	$HARESDL/image/image.ha	/^export fn load_texture_typed_h($/;"	f
load_tga_h	$HARESDL/image/image.ha	/^export fn load_tga_h(src: io::handle) (*sdl::surface | error) = {$/;"	f
load_tif_h	$HARESDL/image/image.ha	/^export fn load_tif_h(src: io::handle) (*sdl::surface | error) = {$/;"	f
load_typed_h	$HARESDL/image/image.ha	/^export fn load_typed_h(src: io::handle, type_: str) (*sdl::surface | error) = {$/;"	f
load_wav	$HARESDL/audio/audio.ha	/^export fn load_wav($/;"	f
load_wav_h	$HARESDL/audio/audio.ha	/^export fn load_wav_h($/;"	f
load_webp_animation_h	$HARESDL/image/image.ha	/^export fn load_webp_animation_h(src: io::handle) (*animation | error) = {$/;"	f
load_webp_h	$HARESDL/image/image.ha	/^export fn load_webp_h(src: io::handle) (*sdl::surface | error) = {$/;"	f
load_xcf_h	$HARESDL/image/image.ha	/^export fn load_xcf_h(src: io::handle) (*sdl::surface | error) = {$/;"	f
load_xpm_h	$HARESDL/image/image.ha	/^export fn load_xpm_h(src: io::handle) (*sdl::surface | error) = {$/;"	f
load_xv_h	$HARESDL/image/image.ha	/^export fn load_xv_h(src: io::handle) (*sdl::surface | error) = {$/;"	f
lock_audio_device	$HARESDL/audio/audio.ha	/^export fn lock_audio_device(dev: audio_device_id) void =$/;"	f
lock_mutex	$HARESDL/mutex/mutex.ha	/^export fn lock_mutex(mutex: *mutex) (void | sdl::error) = {$/;"	f
lock_surface	$HARESDL/surface/surface.ha	/^export fn lock_surface(surface: *surface) (void | sdl::error) = {$/;"	f
lock_texture	$HARESDL/render/render.ha	/^export fn lock_texture($/;"	f
lock_texture_to_surface	$HARESDL/render/render.ha	/^export fn lock_texture_to_surface($/;"	f
maximize_window	$HARESDL/video/video.ha	/^export fn maximize_window(window: *window) void =$/;"	f
measure_utf8	$HARESDL/ttf/ttf.ha	/^export fn measure_utf8($/;"	f
minimize_window	$HARESDL/video/video.ha	/^export fn minimize_window(window: *window) void =$/;"	f
mix_audio_format	$HARESDL/audio/audio.ha	/^export fn mix_audio_format($/;"	f
mouse_button_pressed	$HARESDL/events/events.ha	/^export type mouse_button_pressed = mouse_event_common;$/;"	t
mouse_button_released	$HARESDL/events/events.ha	/^export type mouse_button_released = mouse_event_common;$/;"	t
mouse_event_common	$HARESDL/events/events.ha	/^export type mouse_event_common = struct {$/;"	t
mouse_moved	$HARESDL/events/events.ha	/^export type mouse_moved = struct {$/;"	t
mouse_wheel_scrolled	$HARESDL/events/events.ha	/^export type mouse_wheel_scrolled = struct {$/;"	t
mutex	$HARESDL/mutex/mutex.ha	/^export type mutex = opaque;$/;"	t
mutex_timedout	$HARESDL/mutex/mutex.ha	/^export type mutex_timedout = void;$/;"	t
new_audio_stream	$HARESDL/audio/audio.ha	/^export fn new_audio_stream($/;"	f
open_audio_device	$HARESDL/audio/audio.ha	/^export fn open_audio_device($/;"	f
open_font	$HARESDL/ttf/ttf.ha	/^export fn open_font(file: str, ptsize: int) (*font | error) = {$/;"	f
open_font_dpi	$HARESDL/ttf/ttf.ha	/^export fn open_font_dpi($/;"	f
open_font_dpi_h	$HARESDL/ttf/ttf.ha	/^export fn open_font_dpi_h($/;"	f
open_font_h	$HARESDL/ttf/ttf.ha	/^export fn open_font_h(src: io::handle, ptsize: int) (*font | error) = {$/;"	f
open_font_index	$HARESDL/ttf/ttf.ha	/^export fn open_font_index($/;"	f
open_font_index_dpi	$HARESDL/ttf/ttf.ha	/^export fn open_font_index_dpi($/;"	f
open_font_index_dpi_h	$HARESDL/ttf/ttf.ha	/^export fn open_font_index_dpi_h($/;"	f
open_font_index_h	$HARESDL/ttf/ttf.ha	/^export fn open_font_index_h($/;"	f
open_url	$HARESDL/misc/misc.ha	/^export fn open_url(url: str) (void | sdl::error) = {$/;"	f
palette	$HARESDL/pixels/pixels.ha	/^export type palette = struct {$/;"	t
pause_audio_device	$HARESDL/audio/audio.ha	/^export fn pause_audio_device(dev: audio_device_id, pause_on: bool) void =$/;"	f
pixel_format	$HARESDL/pixels/pixels.ha	/^export type pixel_format = struct {$/;"	t
point	$HARESDL/rect/rect.ha	/^export type point = struct {$/;"	t
poll_event	$HARESDL/events/events.ha	/^export fn poll_event() (void | ...event) = {$/;"	f
power_state	$HARESDL/power/power.ha	/^export type power_state = enum {$/;"	t
premultiply_alpha	$HARESDL/surface/surface.ha	/^export fn premultiply_alpha($/;"	f
pump_events	$HARESDL/events/events.ha	/^export fn pump_events() void = SDL_PumpEvents();$/;"	f
query_texture	$HARESDL/render/render.ha	/^export fn query_texture($/;"	f
queue_audio	$HARESDL/audio/audio.ha	/^export fn queue_audio($/;"	f
quit	$HARESDL/image/image.ha	/^export fn quit() void = IMG_Quit();$/;"	f
quit	$HARESDL/sdl.ha	/^export fn quit() void = SDL_Quit();$/;"	f
quit	$HARESDL/ttf/ttf.ha	/^export fn quit() void = TTF_Quit();$/;"	f
quit_requested	$HARESDL/events/events.ha	/^export type quit_requested = struct {$/;"	t
raise_window	$HARESDL/video/video.ha	/^export fn raise_window(window: *window) void =$/;"	f
rect	$HARESDL/rect/rect.ha	/^export type rect = struct {$/;"	t
rect	$HARESDL/render/render.ha	/^export fn render_get_viewport(renderer: *renderer, rect: *sdl::rect) void =$/;"	f
rect	$HARESDL/surface/surface.ha	/^export fn set_clip_rect(surface: *surface, rect: nullable *sdl::rect) bool = {$/;"	f
rect	$HARESDL/video/video.ha	/^export fn get_window_mouse_rect(window: *window) (*sdl::rect | void) = {$/;"	f
remove	$HARESDL/timer/timer.ha	/^export fn remove(id: id) bool = SDL_RemoveTimer(id);$/;"	f
render_blended	$HARESDL/ttf/ttf.ha	/^export fn render_blended($/;"	f
render_blended_wrapped	$HARESDL/ttf/ttf.ha	/^export fn render_blended_wrapped($/;"	f
render_clear	$HARESDL/render/render.ha	/^export fn render_clear(renderer: *renderer) (void | sdl::error) =$/;"	f
render_copy	$HARESDL/render/render.ha	/^export fn render_copy($/;"	f
render_copy_ex	$HARESDL/render/render.ha	/^export fn render_copy_ex($/;"	f
render_copy_ex_f	$HARESDL/render/render.ha	/^export fn render_copy_ex_f($/;"	f
render_copy_f	$HARESDL/render/render.ha	/^export fn render_copy_f($/;"	f
render_draw_line	$HARESDL/render/render.ha	/^export fn render_draw_line($/;"	f
render_draw_line_f	$HARESDL/render/render.ha	/^export fn render_draw_line_f($/;"	f
render_draw_lines	$HARESDL/render/render.ha	/^export fn render_draw_lines($/;"	f
render_draw_lines_f	$HARESDL/render/render.ha	/^export fn render_draw_lines_f($/;"	f
render_draw_point	$HARESDL/render/render.ha	/^export fn render_draw_point($/;"	f
render_draw_point_f	$HARESDL/render/render.ha	/^export fn render_draw_point_f($/;"	f
render_draw_points	$HARESDL/render/render.ha	/^export fn render_draw_points($/;"	f
render_draw_points_f	$HARESDL/render/render.ha	/^export fn render_draw_points_f($/;"	f
render_draw_rect	$HARESDL/render/render.ha	/^export fn render_draw_rect($/;"	f
render_draw_rect_f	$HARESDL/render/render.ha	/^export fn render_draw_rect_f($/;"	f
render_draw_rects	$HARESDL/render/render.ha	/^export fn render_draw_rects($/;"	f
render_draw_rects_f	$HARESDL/render/render.ha	/^export fn render_draw_rects_f($/;"	f
render_fill_rect	$HARESDL/render/render.ha	/^export fn render_fill_rect($/;"	f
render_fill_rect_f	$HARESDL/render/render.ha	/^export fn render_fill_rect_f($/;"	f
render_fill_rects	$HARESDL/render/render.ha	/^export fn render_fill_rects($/;"	f
render_fill_rects_f	$HARESDL/render/render.ha	/^export fn render_fill_rects_f($/;"	f
render_flush	$HARESDL/render/render.ha	/^export fn render_flush(renderer: *renderer) (void | sdl::error) =$/;"	f
render_geometry	$HARESDL/render/render.ha	/^export fn render_geometry($/;"	f
render_geometry_raw	$HARESDL/render/render.ha	/^export fn render_geometry_raw($/;"	f
render_get_clip_rect	$HARESDL/render/render.ha	/^export fn render_get_clip_rect(renderer: *renderer, rect: *sdl::rect) void =$/;"	f
render_get_integer_scale	$HARESDL/render/render.ha	/^export fn render_get_integer_scale(renderer: *renderer) bool =$/;"	f
render_get_logical_size	$HARESDL/render/render.ha	/^export fn render_get_logical_size(renderer: *renderer, w: *int, h: *int) void =$/;"	f
render_get_scale	$HARESDL/render/render.ha	/^export fn render_get_scale($/;"	f
render_get_viewport	$HARESDL/render/render.ha	/^export fn render_get_viewport(renderer: *renderer, rect: *sdl::rect) void =$/;"	f
render_get_window	$HARESDL/render/render.ha	/^export fn render_get_window(renderer: *renderer) (*sdl::window | sdl::error) =$/;"	f
render_glyph_blended	$HARESDL/ttf/ttf.ha	/^export fn render_glyph_blended($/;"	f
render_glyph_lcd	$HARESDL/ttf/ttf.ha	/^export fn render_glyph_lcd($/;"	f
render_glyph_shaded	$HARESDL/ttf/ttf.ha	/^export fn render_glyph_shaded($/;"	f
render_glyph_solid	$HARESDL/ttf/ttf.ha	/^export fn render_glyph_solid($/;"	f
render_is_clip_enabled	$HARESDL/render/render.ha	/^export fn render_is_clip_enabled(renderer: *renderer) bool =$/;"	f
render_lcd	$HARESDL/ttf/ttf.ha	/^export fn render_lcd($/;"	f
render_lcd_wrapped	$HARESDL/ttf/ttf.ha	/^export fn render_lcd_wrapped($/;"	f
render_logical_to_window	$HARESDL/render/render.ha	/^export fn render_logical_to_window($/;"	f
render_present	$HARESDL/render/render.ha	/^export fn render_present(renderer: *renderer) void =$/;"	f
render_read_pixels	$HARESDL/render/render.ha	/^export fn render_read_pixels($/;"	f
render_set_clip_rect	$HARESDL/render/render.ha	/^export fn render_set_clip_rect($/;"	f
render_set_integer_scale	$HARESDL/render/render.ha	/^export fn render_set_integer_scale($/;"	f
render_set_logical_size	$HARESDL/render/render.ha	/^export fn render_set_logical_size($/;"	f
render_set_scale	$HARESDL/render/render.ha	/^export fn render_set_scale($/;"	f
render_set_viewport	$HARESDL/render/render.ha	/^export fn render_set_viewport($/;"	f
render_set_vsync	$HARESDL/render/render.ha	/^export fn render_set_vsync($/;"	f
render_shaded	$HARESDL/ttf/ttf.ha	/^export fn render_shaded($/;"	f
render_shaded_wrapped	$HARESDL/ttf/ttf.ha	/^export fn render_shaded_wrapped($/;"	f
render_solid	$HARESDL/ttf/ttf.ha	/^export fn render_solid($/;"	f
render_solid_wrapped	$HARESDL/ttf/ttf.ha	/^export fn render_solid_wrapped($/;"	f
render_target_supported	$HARESDL/render/render.ha	/^export fn render_target_supported(renderer: *renderer) bool =$/;"	f
render_window_to_logical	$HARESDL/render/render.ha	/^export fn render_window_to_logical($/;"	f
renderer	$HARESDL/render/render.ha	/^export type renderer = opaque;$/;"	t
renderer_flags	$HARESDL/render/render.ha	/^export type renderer_flags = enum u32 {$/;"	t
renderer_flip	$HARESDL/render/render.ha	/^export type renderer_flip = enum u32 {$/;"	t
renderer_info	$HARESDL/render/render.ha	/^export type renderer_info = struct {$/;"	t
reset_hint	$HARESDL/hints/hints.ha	/^export fn reset_hint(name: str) bool = {$/;"	f
reset_hints	$HARESDL/hints/hints.ha	/^export fn reset_hints() void = SDL_ResetHints();$/;"	f
restore_window	$HARESDL/video/video.ha	/^export fn restore_window(window: *window) void =$/;"	f
save_jpg	$HARESDL/image/image.ha	/^export fn save_jpg($/;"	f
save_jpg_h	$HARESDL/image/image.ha	/^export fn save_jpg_h($/;"	f
save_png	$HARESDL/image/image.ha	/^export fn save_png(surface: *sdl::surface, file: str) (void | error) = {$/;"	f
save_png_h	$HARESDL/image/image.ha	/^export fn save_png_h(surface: *sdl::surface, dst: io::handle) (void | error) = {$/;"	f
scale_mode	$HARESDL/render/render.ha	/^export type scale_mode = enum  {$/;"	t
scancode	$HARESDL/scancode/scancode.ha	/^export type scancode = enum uint {$/;"	t
sem	$HARESDL/mutex/mutex.ha	/^export type sem = opaque;$/;"	t
sem_post	$HARESDL/mutex/mutex.ha	/^export fn sem_post(sem: *sem) (void | sdl::error) = {$/;"	f
sem_try_wait	$HARESDL/mutex/mutex.ha	/^export fn sem_try_wait(sem: *sem) (void | mutex_timedout | sdl::error) = {$/;"	f
sem_value	$HARESDL/mutex/mutex.ha	/^export fn sem_value(sem: *sem) u32 = SDL_SemValue(sem: *SDL_sem);$/;"	f
sem_wait	$HARESDL/mutex/mutex.ha	/^export fn sem_wait(sem: *sem) (void | sdl::error) = {$/;"	f
sem_wait_timeout	$HARESDL/mutex/mutex.ha	/^export fn sem_wait_timeout($/;"	f
set_clip_rect	$HARESDL/surface/surface.ha	/^export fn set_clip_rect(surface: *surface, rect: nullable *sdl::rect) bool = {$/;"	f
set_clipboard_text	$HARESDL/clipboard/clipboard.ha	/^export fn set_clipboard_text(text: str) (void | sdl::error) = {$/;"	f
set_color_key	$HARESDL/surface/surface.ha	/^export fn set_color_key($/;"	f
set_font_hinting	$HARESDL/ttf/ttf.ha	/^export fn set_font_hinting(font: *font, hinting: int) void =$/;"	f
set_font_kerning	$HARESDL/ttf/ttf.ha	/^export fn set_font_kerning(font: *font, allowed: bool) void =$/;"	f
set_font_outline	$HARESDL/ttf/ttf.ha	/^export fn set_font_outline(font: *font, outline: int) void =$/;"	f
set_font_script_name	$HARESDL/ttf/ttf.ha	/^export fn set_font_script_name(font: *font, script: str) (void | error) = {$/;"	f
set_font_size	$HARESDL/ttf/ttf.ha	/^export fn set_font_size(font: *font, ptsize: int) (void | error) =$/;"	f
set_font_size_dpi	$HARESDL/ttf/ttf.ha	/^export fn set_font_size_dpi($/;"	f
set_font_style	$HARESDL/ttf/ttf.ha	/^export fn set_font_style(font: *font, style: style) void =$/;"	f
set_font_wrapped_align	$HARESDL/ttf/ttf.ha	/^export fn set_font_wrapped_align(font: *font, align_: wrapped_align) void =$/;"	f
set_hint	$HARESDL/hints/hints.ha	/^export fn set_hint(name: str, value: str) bool = {$/;"	f
set_hint_with_priority	$HARESDL/hints/hints.ha	/^export fn set_hint_with_priority($/;"	f
set_primary_selection_text	$HARESDL/clipboard/clipboard.ha	/^export fn set_primary_selection_text(text: str) (void | sdl::error) = {$/;"	f
set_render_draw_blend_mode	$HARESDL/render/render.ha	/^export fn set_render_draw_blend_mode($/;"	f
set_render_draw_color	$HARESDL/render/render.ha	/^export fn set_render_draw_color($/;"	f
set_render_target	$HARESDL/render/render.ha	/^export fn set_render_target($/;"	f
set_surface_alpha_mod	$HARESDL/surface/surface.ha	/^export fn set_surface_alpha_mod(surface: *surface, alpha: u8) (void | sdl::error) =$/;"	f
set_surface_blend_mode	$HARESDL/surface/surface.ha	/^export fn set_surface_blend_mode($/;"	f
set_surface_color_mod	$HARESDL/surface/surface.ha	/^export fn set_surface_color_mod($/;"	f
set_surface_palette	$HARESDL/surface/surface.ha	/^export fn set_surface_palette($/;"	f
set_surface_rle	$HARESDL/surface/surface.ha	/^export fn set_surface_rle(surface: *surface, enable: bool) (void | sdl::error) = {$/;"	f
set_texture_alpha_mod	$HARESDL/render/render.ha	/^export fn set_texture_alpha_mod($/;"	f
set_texture_blend_mode	$HARESDL/render/render.ha	/^export fn set_texture_blend_mode($/;"	f
set_texture_color_mod	$HARESDL/render/render.ha	/^export fn set_texture_color_mod($/;"	f
set_texture_scale_mode	$HARESDL/render/render.ha	/^export fn set_texture_scale_mode($/;"	f
set_texture_user_data	$HARESDL/render/render.ha	/^export fn set_texture_user_data($/;"	f
set_thread_priority	$HARESDL/thread/thread.ha	/^export fn set_thread_priority(priority: thread_priority) (void | sdl::error) =$/;"	f
set_window_always_on_top	$HARESDL/video/video.ha	/^export fn set_window_always_on_top(window: *window, on_top: bool) void =$/;"	f
set_window_bordered	$HARESDL/video/video.ha	/^export fn set_window_bordered(window: *window, bordered: bool) void =$/;"	f
set_window_brightness	$HARESDL/video/video.ha	/^export fn set_window_brightness($/;"	f
set_window_data	$HARESDL/video/video.ha	/^export fn set_window_data($/;"	f
set_window_fullscreen	$HARESDL/video/video.ha	/^export fn set_window_fullscreen($/;"	f
set_window_gamma_ramp	$HARESDL/video/video.ha	/^export fn set_window_gamma_ramp($/;"	f
set_window_grab	$HARESDL/video/video.ha	/^export fn set_window_grab(window: *window, grabbed: bool) void =$/;"	f
set_window_hit_test	$HARESDL/video/video.ha	/^export fn set_window_hit_test($/;"	f
set_window_icon	$HARESDL/video/video.ha	/^export fn set_window_icon(window: *window, icon: *sdl::surface) void =$/;"	f
set_window_input_focus	$HARESDL/video/video.ha	/^export fn set_window_input_focus(window: *window) (void | sdl::error) =$/;"	f
set_window_keyboard_grab	$HARESDL/video/video.ha	/^export fn set_window_keyboard_grab(window: *window, grabbed: bool) void =$/;"	f
set_window_maximum_size	$HARESDL/video/video.ha	/^export fn set_window_maximum_size($/;"	f
set_window_minimum_size	$HARESDL/video/video.ha	/^export fn set_window_minimum_size($/;"	f
set_window_modal_for	$HARESDL/video/video.ha	/^export fn set_window_modal_for($/;"	f
set_window_mouse_grab	$HARESDL/video/video.ha	/^export fn set_window_mouse_grab(window: *window, grabbed: bool) void =$/;"	f
set_window_mouse_rect	$HARESDL/video/video.ha	/^export fn set_window_mouse_rect($/;"	f
set_window_opacity	$HARESDL/video/video.ha	/^export fn set_window_opacity(window: *window, opacity: f32) (void | sdl::error) = {$/;"	f
set_window_position	$HARESDL/video/video.ha	/^export fn set_window_position(window: *window, x: int, y: int) void =$/;"	f
set_window_resizable	$HARESDL/video/video.ha	/^export fn set_window_resizable(window: *window, resizable: bool) void =$/;"	f
set_window_size	$HARESDL/video/video.ha	/^export fn set_window_size(window: *window, w: int, h: int) void =$/;"	f
set_window_title	$HARESDL/video/video.ha	/^export fn set_window_title(window: *window, title: str) void = {$/;"	f
set_yuvconversion_mode	$HARESDL/surface/surface.ha	/^export fn set_yuvconversion_mode(mode: yuv_conversion_mode) void =$/;"	f
show_window	$HARESDL/video/video.ha	/^export fn show_window(window: *window) void =$/;"	f
simd_alloc	$HARESDL/cpuinfo/cpuinfo.ha	/^export fn simd_alloc(len_: size) (*opaque | sdl::error) =$/;"	f
simd_free	$HARESDL/cpuinfo/cpuinfo.ha	/^export fn simd_free(ptr: nullable *opaque) void = SDL_SIMDFree(ptr);$/;"	f
simd_get_alignment	$HARESDL/cpuinfo/cpuinfo.ha	/^export fn simd_get_alignment() size = SDL_SIMDGetAlignment();$/;"	f
simd_realloc	$HARESDL/cpuinfo/cpuinfo.ha	/^export fn simd_realloc($/;"	f
size_utf8	$HARESDL/ttf/ttf.ha	/^export fn size_utf8($/;"	f
soft_stretch_linear	$HARESDL/surface/surface.ha	/^export fn soft_stretch_linear($/;"	f
strerror	$HARESDL/errors.ha	/^export fn strerror(err: error) str = err: str;$/;"	f
strerror	$HARESDL/image/error.ha	/^export fn strerror(err: error) str = {$/;"	f
strerror	$HARESDL/ttf/errors.ha	/^export fn strerror(err: error) str = {$/;"	f
style	$HARESDL/ttf/ttf.ha	/^export type style = enum {$/;"	t
surface	$HARESDL/image/image.ha	/^export fn save_png(surface: *sdl::surface, file: str) (void | error) = {$/;"	f
surface	$HARESDL/surface/surface.ha	/^export type surface = struct {$/;"	t
surface	$HARESDL/video/video.ha	/^export fn set_window_icon(window: *window, icon: *sdl::surface) void =$/;"	f
surface_flags	$HARESDL/surface/surface.ha	/^export type surface_flags = enum u32 {$/;"	t
texture	$HARESDL/render/render.ha	/^export type texture = opaque;$/;"	t
texture_access	$HARESDL/render/render.ha	/^export type texture_access = enum  {$/;"	t
texture_modulate	$HARESDL/render/render.ha	/^export type texture_modulate = enum  {$/;"	t
thread	$HARESDL/thread/thread.ha	/^export type thread = opaque;$/;"	t
thread_function	$HARESDL/thread/thread.ha	/^export type thread_function = *fn(data: *opaque) int;$/;"	t
thread_id	$HARESDL/thread/thread.ha	/^export type thread_id = u32;$/;"	t
thread_priority	$HARESDL/thread/thread.ha	/^export type thread_priority = enum {$/;"	t
try_lock_mutex	$HARESDL/mutex/mutex.ha	/^export fn try_lock_mutex(mutex: *mutex) (void | mutex_timedout | sdl::error) = {$/;"	f
unlock_audio_device	$HARESDL/audio/audio.ha	/^export fn unlock_audio_device(dev: audio_device_id) void =$/;"	f
unlock_mutex	$HARESDL/mutex/mutex.ha	/^export fn unlock_mutex(mutex: *mutex) (void | sdl::error) = {$/;"	f
unlock_surface	$HARESDL/surface/surface.ha	/^export fn unlock_surface(surface: *surface) void = {$/;"	f
unlock_texture	$HARESDL/render/render.ha	/^export fn unlock_texture(texture: *texture) void =$/;"	f
update_nvtexture	$HARESDL/render/render.ha	/^export fn update_nvtexture($/;"	f
update_texture	$HARESDL/render/render.ha	/^export fn update_texture($/;"	f
update_window_surface	$HARESDL/video/video.ha	/^export fn update_window_surface(window: *window) (void | sdl::error) =$/;"	f
update_window_surface_rects	$HARESDL/video/video.ha	/^export fn update_window_surface_rects($/;"	f
update_yuvtexture	$HARESDL/render/render.ha	/^export fn update_yuvtexture($/;"	f
version	$HARESDL/image/image.ha	/^export fn linked_version() *sdl::version = IMG_Linked_Version(): *sdl::version;$/;"	f
version	$HARESDL/mixer/mixer.ha	/^export fn linked_version() *sdl::version = Mix_Linked_Version(): *sdl::version;$/;"	f
version	$HARESDL/ttf/ttf.ha	/^export fn linked_version() *sdl::version = TTF_Linked_Version(): *sdl::version;$/;"	f
version	$HARESDL/version.ha	/^export type version = struct {$/;"	t
vertex	$HARESDL/render/render.ha	/^export type vertex = struct {$/;"	t
wait_thread	$HARESDL/thread/thread.ha	/^export fn wait_thread(thread: nullable *thread, status: nullable *int) void =$/;"	f
was_init	$HARESDL/sdl.ha	/^export fn was_init(flags: init_flags) init_flags =$/;"	f
was_init	$HARESDL/ttf/ttf.ha	/^export fn was_init() int = TTF_WasInit();$/;"	f
window	$HARESDL/video/video.ha	/^export type window = opaque;$/;"	t
window_closed	$HARESDL/events/events.ha	/^export type window_closed = window_event_common;$/;"	t
window_display_changed	$HARESDL/events/events.ha	/^export type window_display_changed = struct {$/;"	t
window_entered	$HARESDL/events/events.ha	/^export type window_entered = window_event_common;$/;"	t
window_event_common	$HARESDL/events/events.ha	/^export type window_event_common = struct {$/;"	t
window_exposed	$HARESDL/events/events.ha	/^export type window_exposed = window_event_common;$/;"	t
window_flags	$HARESDL/video/video.ha	/^export type window_flags = enum u32 {$/;"	t
window_focus_gained	$HARESDL/events/events.ha	/^export type window_focus_gained = window_event_common;$/;"	t
window_focus_lost	$HARESDL/events/events.ha	/^export type window_focus_lost = window_event_common;$/;"	t
window_hidden	$HARESDL/events/events.ha	/^export type window_hidden = window_event_common;$/;"	t
window_hit_test	$HARESDL/events/events.ha	/^export type window_hit_test = window_event_common;$/;"	t
window_iccprof_changed	$HARESDL/events/events.ha	/^export type window_iccprof_changed = window_event_common;$/;"	t
window_id	$HARESDL/video/video.ha	/^export type window_id = u32;$/;"	t
window_left	$HARESDL/events/events.ha	/^export type window_left = window_event_common;$/;"	t
window_maximized	$HARESDL/events/events.ha	/^export type window_maximized = window_event_common;$/;"	t
window_minimized	$HARESDL/events/events.ha	/^export type window_minimized = window_event_common;$/;"	t
window_moved	$HARESDL/events/events.ha	/^export type window_moved = struct {$/;"	t
window_resized	$HARESDL/events/events.ha	/^export type window_resized = struct {$/;"	t
window_restored	$HARESDL/events/events.ha	/^export type window_restored = window_event_common;$/;"	t
window_shown	$HARESDL/events/events.ha	/^export type window_shown = window_event_common;$/;"	t
window_size_changed	$HARESDL/events/events.ha	/^export type window_size_changed = struct {$/;"	t
window_take_focus	$HARESDL/events/events.ha	/^export type window_take_focus = window_event_common;$/;"	t
wrapped_align	$HARESDL/ttf/ttf.ha	/^export type wrapped_align = enum {$/;"	t
yuv_conversion_mode	$HARESDL/surface/surface.ha	/^export type yuv_conversion_mode = enum {$/;"	t
