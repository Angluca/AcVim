ABDAY_1	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const ABDAY_1* = cint(131072)$/;"	t
ABDAY_1	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const ABDAY_1* = cint(14)$/;"	t
ABDAY_1	$NIMLIB/posix/posix_other_consts.nim	/^var ABDAY_1* {.importc: "ABDAY_1", header: "<langinfo.h>".}: cint$/;"	t
ABDAY_2	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const ABDAY_2* = cint(131073)$/;"	t
ABDAY_2	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const ABDAY_2* = cint(15)$/;"	t
ABDAY_2	$NIMLIB/posix/posix_other_consts.nim	/^var ABDAY_2* {.importc: "ABDAY_2", header: "<langinfo.h>".}: cint$/;"	t
ABDAY_3	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const ABDAY_3* = cint(131074)$/;"	t
ABDAY_3	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const ABDAY_3* = cint(16)$/;"	t
ABDAY_3	$NIMLIB/posix/posix_other_consts.nim	/^var ABDAY_3* {.importc: "ABDAY_3", header: "<langinfo.h>".}: cint$/;"	t
ABDAY_4	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const ABDAY_4* = cint(131075)$/;"	t
ABDAY_4	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const ABDAY_4* = cint(17)$/;"	t
ABDAY_4	$NIMLIB/posix/posix_other_consts.nim	/^var ABDAY_4* {.importc: "ABDAY_4", header: "<langinfo.h>".}: cint$/;"	t
ABDAY_5	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const ABDAY_5* = cint(131076)$/;"	t
ABDAY_5	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const ABDAY_5* = cint(18)$/;"	t
ABDAY_5	$NIMLIB/posix/posix_other_consts.nim	/^var ABDAY_5* {.importc: "ABDAY_5", header: "<langinfo.h>".}: cint$/;"	t
ABDAY_6	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const ABDAY_6* = cint(131077)$/;"	t
ABDAY_6	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const ABDAY_6* = cint(19)$/;"	t
ABDAY_6	$NIMLIB/posix/posix_other_consts.nim	/^var ABDAY_6* {.importc: "ABDAY_6", header: "<langinfo.h>".}: cint$/;"	t
ABDAY_7	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const ABDAY_7* = cint(131078)$/;"	t
ABDAY_7	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const ABDAY_7* = cint(20)$/;"	t
ABDAY_7	$NIMLIB/posix/posix_other_consts.nim	/^var ABDAY_7* {.importc: "ABDAY_7", header: "<langinfo.h>".}: cint$/;"	t
ABMON_1	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const ABMON_1* = cint(131086)$/;"	t
ABMON_1	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const ABMON_1* = cint(33)$/;"	t
ABMON_1	$NIMLIB/posix/posix_other_consts.nim	/^var ABMON_1* {.importc: "ABMON_1", header: "<langinfo.h>".}: cint$/;"	t
ABMON_10	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const ABMON_10* = cint(131095)$/;"	t
ABMON_10	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const ABMON_10* = cint(42)$/;"	t
ABMON_10	$NIMLIB/posix/posix_other_consts.nim	/^var ABMON_10* {.importc: "ABMON_10", header: "<langinfo.h>".}: cint$/;"	t
ABMON_11	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const ABMON_11* = cint(131096)$/;"	t
ABMON_11	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const ABMON_11* = cint(43)$/;"	t
ABMON_11	$NIMLIB/posix/posix_other_consts.nim	/^var ABMON_11* {.importc: "ABMON_11", header: "<langinfo.h>".}: cint$/;"	t
ABMON_12	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const ABMON_12* = cint(131097)$/;"	t
ABMON_12	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const ABMON_12* = cint(44)$/;"	t
ABMON_12	$NIMLIB/posix/posix_other_consts.nim	/^var ABMON_12* {.importc: "ABMON_12", header: "<langinfo.h>".}: cint$/;"	t
ABMON_2	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const ABMON_2* = cint(131087)$/;"	t
ABMON_2	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const ABMON_2* = cint(34)$/;"	t
ABMON_2	$NIMLIB/posix/posix_other_consts.nim	/^var ABMON_2* {.importc: "ABMON_2", header: "<langinfo.h>".}: cint$/;"	t
ABMON_3	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const ABMON_3* = cint(131088)$/;"	t
ABMON_3	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const ABMON_3* = cint(35)$/;"	t
ABMON_3	$NIMLIB/posix/posix_other_consts.nim	/^var ABMON_3* {.importc: "ABMON_3", header: "<langinfo.h>".}: cint$/;"	t
ABMON_4	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const ABMON_4* = cint(131089)$/;"	t
ABMON_4	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const ABMON_4* = cint(36)$/;"	t
ABMON_4	$NIMLIB/posix/posix_other_consts.nim	/^var ABMON_4* {.importc: "ABMON_4", header: "<langinfo.h>".}: cint$/;"	t
ABMON_5	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const ABMON_5* = cint(131090)$/;"	t
ABMON_5	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const ABMON_5* = cint(37)$/;"	t
ABMON_5	$NIMLIB/posix/posix_other_consts.nim	/^var ABMON_5* {.importc: "ABMON_5", header: "<langinfo.h>".}: cint$/;"	t
ABMON_6	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const ABMON_6* = cint(131091)$/;"	t
ABMON_6	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const ABMON_6* = cint(38)$/;"	t
ABMON_6	$NIMLIB/posix/posix_other_consts.nim	/^var ABMON_6* {.importc: "ABMON_6", header: "<langinfo.h>".}: cint$/;"	t
ABMON_7	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const ABMON_7* = cint(131092)$/;"	t
ABMON_7	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const ABMON_7* = cint(39)$/;"	t
ABMON_7	$NIMLIB/posix/posix_other_consts.nim	/^var ABMON_7* {.importc: "ABMON_7", header: "<langinfo.h>".}: cint$/;"	t
ABMON_8	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const ABMON_8* = cint(131093)$/;"	t
ABMON_8	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const ABMON_8* = cint(40)$/;"	t
ABMON_8	$NIMLIB/posix/posix_other_consts.nim	/^var ABMON_8* {.importc: "ABMON_8", header: "<langinfo.h>".}: cint$/;"	t
ABMON_9	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const ABMON_9* = cint(131094)$/;"	t
ABMON_9	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const ABMON_9* = cint(41)$/;"	t
ABMON_9	$NIMLIB/posix/posix_other_consts.nim	/^var ABMON_9* {.importc: "ABMON_9", header: "<langinfo.h>".}: cint$/;"	t
AF_INET	$NIMLIB/posix/posix_freertos_consts.nim	/^var AF_INET* {.importc: "AF_INET", header: "<sys\/socket.h>".}: cint$/;"	t
AF_INET	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const AF_INET* = cint(2)$/;"	t
AF_INET	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const AF_INET* = cint(2)$/;"	t
AF_INET	$NIMLIB/posix/posix_other_consts.nim	/^var AF_INET* {.importc: "AF_INET", header: "<sys\/socket.h>".}: cint$/;"	t
AF_INET	$NIMLIB/windows/winlean.nim	/^  AF_INET* = 2$/;"	t
AF_INET6	$NIMLIB/posix/posix_freertos_consts.nim	/^var AF_INET6* {.importc: "AF_INET6", header: "<sys\/socket.h>".}: cint$/;"	t
AF_INET6	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const AF_INET6* = cint(10)$/;"	t
AF_INET6	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const AF_INET6* = cint(28)$/;"	t
AF_INET6	$NIMLIB/posix/posix_other_consts.nim	/^var AF_INET6* {.importc: "AF_INET6", header: "<sys\/socket.h>".}: cint$/;"	t
AF_INET6	$NIMLIB/windows/winlean.nim	/^  AF_INET6* = 23$/;"	t
AF_UNIX	$NIMLIB/posix/posix_freertos_consts.nim	/^const AF_UNIX*: cint = 1 # for compat with Nim libraries, doesn't exist on freertos$/;"	t
AF_UNIX	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const AF_UNIX* = cint(1)$/;"	t
AF_UNIX	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const AF_UNIX* = cint(1)$/;"	t
AF_UNIX	$NIMLIB/posix/posix_other_consts.nim	/^var AF_UNIX* {.importc: "AF_UNIX", header: "<sys\/socket.h>".}: cint$/;"	t
AF_UNSPEC	$NIMLIB/posix/posix_freertos_consts.nim	/^var AF_UNSPEC* {.importc: "AF_UNSPEC", header: "<sys\/socket.h>".}: cint$/;"	t
AF_UNSPEC	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const AF_UNSPEC* = cint(0)$/;"	t
AF_UNSPEC	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const AF_UNSPEC* = cint(0)$/;"	t
AF_UNSPEC	$NIMLIB/posix/posix_other_consts.nim	/^var AF_UNSPEC* {.importc: "AF_UNSPEC", header: "<sys\/socket.h>".}: cint$/;"	t
AF_UNSPEC	$NIMLIB/windows/winlean.nim	/^  AF_UNSPEC* = 0$/;"	t
AIO_ALLDONE	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const AIO_ALLDONE* = cint(2)$/;"	t
AIO_ALLDONE	$NIMLIB/posix/posix_other_consts.nim	/^var AIO_ALLDONE* {.importc: "AIO_ALLDONE", header: "<aio.h>".}: cint$/;"	t
AIO_CANCELED	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const AIO_CANCELED* = cint(0)$/;"	t
AIO_CANCELED	$NIMLIB/posix/posix_other_consts.nim	/^var AIO_CANCELED* {.importc: "AIO_CANCELED", header: "<aio.h>".}: cint$/;"	t
AIO_NOTCANCELED	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const AIO_NOTCANCELED* = cint(1)$/;"	t
AIO_NOTCANCELED	$NIMLIB/posix/posix_other_consts.nim	/^var AIO_NOTCANCELED* {.importc: "AIO_NOTCANCELED", header: "<aio.h>".}: cint$/;"	t
AI_ADDRCONFIG	$NIMLIB/posix/posix_freertos_consts.nim	/^var AI_ADDRCONFIG* {.importc: "AI_ADDRCONFIG", header: "<netdb.h>".}: cint$/;"	t
AI_ADDRCONFIG	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const AI_ADDRCONFIG* = cint(32)$/;"	t
AI_ADDRCONFIG	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const AI_ADDRCONFIG* = cint(1024)$/;"	t
AI_ADDRCONFIG	$NIMLIB/posix/posix_other_consts.nim	/^var AI_ADDRCONFIG* {.importc: "AI_ADDRCONFIG", header: "<netdb.h>".}: cint$/;"	t
AI_ALL	$NIMLIB/posix/posix_freertos_consts.nim	/^var AI_ALL* {.importc: "AI_ALL", header: "<netdb.h>".}: cint$/;"	t
AI_ALL	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const AI_ALL* = cint(16)$/;"	t
AI_ALL	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const AI_ALL* = cint(256)$/;"	t
AI_ALL	$NIMLIB/posix/posix_other_consts.nim	/^var AI_ALL* {.importc: "AI_ALL", header: "<netdb.h>".}: cint$/;"	t
AI_CANONNAME	$NIMLIB/posix/posix_freertos_consts.nim	/^var AI_CANONNAME* {.importc: "AI_CANONNAME", header: "<netdb.h>".}: cint$/;"	t
AI_CANONNAME	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const AI_CANONNAME* = cint(2)$/;"	t
AI_CANONNAME	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const AI_CANONNAME* = cint(2)$/;"	t
AI_CANONNAME	$NIMLIB/posix/posix_other_consts.nim	/^var AI_CANONNAME* {.importc: "AI_CANONNAME", header: "<netdb.h>".}: cint$/;"	t
AI_NUMERICHOST	$NIMLIB/posix/posix_freertos_consts.nim	/^var AI_NUMERICHOST* {.importc: "AI_NUMERICHOST", header: "<netdb.h>".}: cint$/;"	t
AI_NUMERICHOST	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const AI_NUMERICHOST* = cint(4)$/;"	t
AI_NUMERICHOST	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const AI_NUMERICHOST* = cint(4)$/;"	t
AI_NUMERICHOST	$NIMLIB/posix/posix_other_consts.nim	/^var AI_NUMERICHOST* {.importc: "AI_NUMERICHOST", header: "<netdb.h>".}: cint$/;"	t
AI_NUMERICSERV	$NIMLIB/posix/posix_freertos_consts.nim	/^var AI_NUMERICSERV* {.importc: "AI_NUMERICSERV", header: "<netdb.h>".}: cint$/;"	t
AI_NUMERICSERV	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const AI_NUMERICSERV* = cint(1024)$/;"	t
AI_NUMERICSERV	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const AI_NUMERICSERV* = cint(8)$/;"	t
AI_NUMERICSERV	$NIMLIB/posix/posix_other_consts.nim	/^var AI_NUMERICSERV* {.importc: "AI_NUMERICSERV", header: "<netdb.h>".}: cint$/;"	t
AI_PASSIVE	$NIMLIB/posix/posix_freertos_consts.nim	/^var AI_PASSIVE* {.importc: "AI_PASSIVE", header: "<netdb.h>".}: cint$/;"	t
AI_PASSIVE	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const AI_PASSIVE* = cint(1)$/;"	t
AI_PASSIVE	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const AI_PASSIVE* = cint(1)$/;"	t
AI_PASSIVE	$NIMLIB/posix/posix_other_consts.nim	/^var AI_PASSIVE* {.importc: "AI_PASSIVE", header: "<netdb.h>".}: cint$/;"	t
AI_V4MAPPED	$NIMLIB/posix/posix_freertos_consts.nim	/^var AI_V4MAPPED* {.importc: "AI_V4MAPPED", header: "<netdb.h>".}: cint$/;"	t
AI_V4MAPPED	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const AI_V4MAPPED* = cint(8)$/;"	t
AI_V4MAPPED	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const AI_V4MAPPED* = cint(2048)$/;"	t
AI_V4MAPPED	$NIMLIB/posix/posix_other_consts.nim	/^var AI_V4MAPPED* {.importc: "AI_V4MAPPED", header: "<netdb.h>".}: cint$/;"	t
AI_V4MAPPED	$NIMLIB/windows/winlean.nim	/^  AI_V4MAPPED* = 0x0008$/;"	t
ALT_DIGITS	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const ALT_DIGITS* = cint(131119)$/;"	t
ALT_DIGITS	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const ALT_DIGITS* = cint(49)$/;"	t
ALT_DIGITS	$NIMLIB/posix/posix_other_consts.nim	/^var ALT_DIGITS* {.importc: "ALT_DIGITS", header: "<langinfo.h>".}: cint$/;"	t
AM_STR	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const AM_STR* = cint(131110)$/;"	t
AM_STR	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const AM_STR* = cint(5)$/;"	t
AM_STR	$NIMLIB/posix/posix_other_consts.nim	/^var AM_STR* {.importc: "AM_STR", header: "<langinfo.h>".}: cint$/;"	t
ANCHORED	$NIMLIB/wrappers/pcre.nim	/^  ANCHORED*          = 0x00000010  # C4 E D$/;"	t
ATOMIC_ACQUIRE	$NIMLIB/std/sysatomics.nim	/^  var ATOMIC_ACQUIRE* {.importc: "__ATOMIC_ACQUIRE", nodecl.}: AtomMemModel$/;"	t
ATOMIC_ACQ_REL	$NIMLIB/std/sysatomics.nim	/^  var ATOMIC_ACQ_REL* {.importc: "__ATOMIC_ACQ_REL", nodecl.}: AtomMemModel$/;"	t
ATOMIC_CONSUME	$NIMLIB/std/sysatomics.nim	/^  var ATOMIC_CONSUME* {.importc: "__ATOMIC_CONSUME", nodecl.}: AtomMemModel$/;"	t
ATOMIC_RELAXED	$NIMLIB/std/sysatomics.nim	/^  var ATOMIC_RELAXED* {.importc: "__ATOMIC_RELAXED", nodecl.}: AtomMemModel$/;"	t
ATOMIC_RELEASE	$NIMLIB/std/sysatomics.nim	/^  var ATOMIC_RELEASE* {.importc: "__ATOMIC_RELEASE", nodecl.}: AtomMemModel$/;"	t
ATOMIC_SEQ_CST	$NIMLIB/std/sysatomics.nim	/^  var ATOMIC_SEQ_CST* {.importc: "__ATOMIC_SEQ_CST", nodecl.}: AtomMemModel$/;"	t
AUTO_CALLOUT	$NIMLIB/wrappers/pcre.nim	/^  AUTO_CALLOUT*      = 0x00004000  # C1$/;"	t
AccessViolationDefect	$NIMLIB/system/exceptions.nim	/^  AccessViolationDefect* = object of Defect ## \\$/;"	t
AccessViolationError	$NIMLIB/system/exceptions.nim	/^    AccessViolationError* {.deprecated: "See corresponding Defect".} = AccessViolationDefect$/;"	t
AddEventListenerOptions	$NIMLIB/js/dom.nim	/^  AddEventListenerOptions* = object$/;"	t
AddrInfo	$NIMLIB/windows/winlean.nim	/^  AddrInfo* = object$/;"	t
AllChars	$NIMLIB/pure/strutils.nim	/^  AllChars* = {'\\x00'..'\\xFF'}$/;"	t
AllocStats	$NIMLIB/system/memalloc.nim	/^  type AllocStats* = object$/;"	t
AltSep	$NIMLIB/std/private/osseps.nim	/^  AltSep* =$/;"	t
AnchorElement	$NIMLIB/js/dom.nim	/^  AnchorElement* {.importc.} = ref object of Element$/;"	t
Any	$NIMLIB/core/typeinfo.nim	/^  Any* = object$/;"	t
AnyKind	$NIMLIB/core/typeinfo.nim	/^  AnyKind* = enum       ## The kind of `Any`.$/;"	t
ArithmeticDefect	$NIMLIB/system/exceptions.nim	/^  ArithmeticDefect* = object of Defect ## \\$/;"	t
ArithmeticError	$NIMLIB/system/exceptions.nim	/^    ArithmeticError* {.deprecated: "See corresponding Defect".} = ArithmeticDefect$/;"	t
ArrayBuffer	$NIMLIB/std/private/jsutils.nim	/^    ArrayBuffer* = ref object of JsRoot$/;"	t
AssertionDefect	$NIMLIB/system/exceptions.nim	/^  AssertionDefect* = object of Defect ## \\$/;"	t
AssertionError	$NIMLIB/system/exceptions.nim	/^    AssertionError* {.deprecated: "See corresponding Defect".} = AssertionDefect$/;"	t
AsyncEvent	$NIMLIB/pure/asyncdispatch.nim	/^    AsyncEvent* = ptr AsyncEventImpl$/;"	t
AsyncFD	$NIMLIB/pure/asyncdispatch.nim	/^    AsyncFD* = distinct int$/;"	t
AsyncFile	$NIMLIB/pure/asyncfile.nim	/^  AsyncFile* = ref object$/;"	t
AsyncHttpClient	$NIMLIB/pure/httpclient.nim	/^  AsyncHttpClient* = HttpClientBase[AsyncSocket]$/;"	t
AsyncHttpServer	$NIMLIB/pure/asynchttpserver.nim	/^  AsyncHttpServer* = ref object$/;"	t
AsyncResponse	$NIMLIB/pure/httpclient.nim	/^  AsyncResponse* = ref object$/;"	t
AsyncSocket	$NIMLIB/pure/asyncnet.nim	/^  AsyncSocket* = ref AsyncSocketDesc$/;"	t
AtomMemModel	$NIMLIB/std/sysatomics.nim	/^  type AtomMemModel* = distinct cint$/;"	t
AtomType	$NIMLIB/std/sysatomics.nim	/^  AtomType* = SomeNumber|pointer|ptr|char|bool$/;"	t
Atomic	$NIMLIB/pure/concurrency/atomics.nim	/^    Atomic*[T] {.importcpp: "std::atomic", completeStruct.} = object$/;"	t
AtomicFlag	$NIMLIB/pure/concurrency/atomics.nim	/^    AtomicFlag* {.importcpp: "std::atomic_flag", size: 1.} = object$/;"	t
AtomicNodes	$NIMLIB/core/macros.nim	/^  AtomicNodes* = {nnkNone..nnkNilLit}$/;"	t
B0	$NIMLIB/posix/termios.nim	/^  B0* {.importc, header: "<termios.h>".}: Speed$/;"	t
B1000000	$NIMLIB/posix/termios.nim	/^  B1000000* {.importc, header: "<termios.h>".}: Speed$/;"	t
B110	$NIMLIB/posix/termios.nim	/^  B110* {.importc, header: "<termios.h>".}: Speed$/;"	t
B115200	$NIMLIB/posix/termios.nim	/^  B115200* {.importc, header: "<termios.h>".}: Speed$/;"	t
B1152000	$NIMLIB/posix/termios.nim	/^  B1152000* {.importc, header: "<termios.h>".}: Speed$/;"	t
B1200	$NIMLIB/posix/termios.nim	/^  B1200* {.importc, header: "<termios.h>".}: Speed$/;"	t
B134	$NIMLIB/posix/termios.nim	/^  B134* {.importc, header: "<termios.h>".}: Speed$/;"	t
B150	$NIMLIB/posix/termios.nim	/^  B150* {.importc, header: "<termios.h>".}: Speed$/;"	t
B1500000	$NIMLIB/posix/termios.nim	/^  B1500000* {.importc, header: "<termios.h>".}: Speed$/;"	t
B1800	$NIMLIB/posix/termios.nim	/^  B1800* {.importc, header: "<termios.h>".}: Speed$/;"	t
B19200	$NIMLIB/posix/termios.nim	/^  B19200* {.importc, header: "<termios.h>".}: Speed$/;"	t
B200	$NIMLIB/posix/termios.nim	/^  B200* {.importc, header: "<termios.h>".}: Speed$/;"	t
B2000000	$NIMLIB/posix/termios.nim	/^  B2000000* {.importc, header: "<termios.h>".}: Speed$/;"	t
B230400	$NIMLIB/posix/termios.nim	/^  B230400* {.importc, header: "<termios.h>".}: Speed$/;"	t
B2400	$NIMLIB/posix/termios.nim	/^  B2400* {.importc, header: "<termios.h>".}: Speed$/;"	t
B2500000	$NIMLIB/posix/termios.nim	/^  B2500000* {.importc, header: "<termios.h>".}: Speed$/;"	t
B300	$NIMLIB/posix/termios.nim	/^  B300* {.importc, header: "<termios.h>".}: Speed$/;"	t
B3000000	$NIMLIB/posix/termios.nim	/^  B3000000* {.importc, header: "<termios.h>".}: Speed$/;"	t
B3500000	$NIMLIB/posix/termios.nim	/^  B3500000* {.importc, header: "<termios.h>".}: Speed$/;"	t
B38400	$NIMLIB/posix/termios.nim	/^  B38400* {.importc, header: "<termios.h>".}: Speed$/;"	t
B4000000	$NIMLIB/posix/termios.nim	/^  B4000000* {.importc, header: "<termios.h>".}: Speed$/;"	t
B460800	$NIMLIB/posix/termios.nim	/^  B460800* {.importc, header: "<termios.h>".}: Speed$/;"	t
B4800	$NIMLIB/posix/termios.nim	/^  B4800* {.importc, header: "<termios.h>".}: Speed$/;"	t
B50	$NIMLIB/posix/termios.nim	/^  B50* {.importc, header: "<termios.h>".}: Speed$/;"	t
B500000	$NIMLIB/posix/termios.nim	/^  B500000* {.importc, header: "<termios.h>".}: Speed$/;"	t
B57600	$NIMLIB/posix/termios.nim	/^  B57600* {.importc, header: "<termios.h>".}: Speed$/;"	t
B576000	$NIMLIB/posix/termios.nim	/^  B576000* {.importc, header: "<termios.h>".}: Speed$/;"	t
B600	$NIMLIB/posix/termios.nim	/^  B600* {.importc, header: "<termios.h>".}: Speed$/;"	t
B75	$NIMLIB/posix/termios.nim	/^  B75* {.importc, header: "<termios.h>".}: Speed$/;"	t
B921600	$NIMLIB/posix/termios.nim	/^  B921600* {.importc, header: "<termios.h>".}: Speed$/;"	t
B9600	$NIMLIB/posix/termios.nim	/^  B9600* {.importc, header: "<termios.h>".}: Speed$/;"	t
BIO	$NIMLIB/wrappers/openssl.nim	/^  BIO* = SslPtr$/;"	t
BIO_ctrl	$NIMLIB/wrappers/openssl.nim	/^proc BIO_ctrl*(bio: BIO, cmd: cint, larg: int, arg: cstring): int{.cdecl,$/;"	f
BIO_do_connect	$NIMLIB/wrappers/openssl.nim	/^proc BIO_do_connect*(bio: BIO): int =$/;"	t
BIO_do_handshake	$NIMLIB/wrappers/openssl.nim	/^proc BIO_do_handshake*(bio: BIO): int =$/;"	t
BIO_free	$NIMLIB/wrappers/openssl.nim	/^proc BIO_free*(b: BIO): cint{.cdecl, dynlib: DLLUtilName, importc.}$/;"	f
BIO_get_ssl	$NIMLIB/wrappers/openssl.nim	/^proc BIO_get_ssl*(bio: BIO, ssl: ptr SslPtr): int =$/;"	t
BIO_new_mem_buf	$NIMLIB/wrappers/openssl.nim	/^proc BIO_new_mem_buf*(data: pointer, len: cint): BIO{.cdecl,$/;"	f
BIO_new_ssl_connect	$NIMLIB/wrappers/openssl.nim	/^proc BIO_new_ssl_connect*(ctx: SslCtx): BIO{.cdecl,$/;"	f
BIO_read	$NIMLIB/wrappers/openssl.nim	/^  proc BIO_read*(b: BIO, data: cstring, length: cint): cint{.cdecl,$/;"	f
BIO_set_conn_hostname	$NIMLIB/wrappers/openssl.nim	/^proc BIO_set_conn_hostname*(bio: BIO, name: cstring): int =$/;"	t
BIO_write	$NIMLIB/wrappers/openssl.nim	/^  proc BIO_write*(b: BIO, data: cstring, length: cint): cint{.cdecl,$/;"	f
BRKINT	$NIMLIB/posix/termios.nim	/^  BRKINT* {.importc, header: "<termios.h>".}: Cflag$/;"	t
BS0	$NIMLIB/posix/termios.nim	/^  BS0* {.importc, header: "<termios.h>".}: Cflag$/;"	t
BS1	$NIMLIB/posix/termios.nim	/^  BS1* {.importc, header: "<termios.h>".}: Cflag$/;"	t
BSDLY	$NIMLIB/posix/termios.nim	/^  BSDLY* {.importc, header: "<termios.h>".}: Cflag$/;"	t
BSR_ANYCRLF	$NIMLIB/wrappers/pcre.nim	/^  BSR_ANYCRLF*       = 0x00800000  # C3 E D$/;"	t
BSR_UNICODE	$NIMLIB/wrappers/pcre.nim	/^  BSR_UNICODE*       = 0x01000000  # C3 E D$/;"	t
BYTE	$NIMLIB/windows/winlean.nim	/^  BYTE* = uint8$/;"	t
BY_HANDLE_FILE_INFORMATION	$NIMLIB/windows/winlean.nim	/^  BY_HANDLE_FILE_INFORMATION* = object$/;"	t
BackgroundColor	$NIMLIB/pure/terminal.nim	/^  BackgroundColor* = enum ## Terminal's background colors.$/;"	t
BackwardsIndex	$NIMLIB/system/indices.nim	/^  BackwardsIndex* = distinct int ## Type that is constructed by `^` for$/;"	t
BaseLexer	$NIMLIB/pure/lexbase.nim	/^  BaseLexer* = object of RootObj ## the base lexer. Inherit your lexer from$/;"	t
BigUint64Array	$NIMLIB/std/private/jsutils.nim	/^    BigUint64Array* = ref object of JsRoot$/;"	t
BiggestFloat	$NIMLIB/system/ctypes.nim	/^  BiggestFloat* = float64$/;"	t
BiggestInt	$NIMLIB/system/ctypes.nim	/^  BiggestInt* = int64$/;"	t
BiggestUInt	$NIMLIB/system/ctypes.nim	/^  type BiggestUInt* = uint64$/;"	t
BinaryPrefixMode	$NIMLIB/pure/strutils.nim	/^  BinaryPrefixMode* = enum ## The different names for binary prefixes.$/;"	t
BindSymRule	$NIMLIB/core/macros.nim	/^  BindSymRule* = enum    ## Specifies how `bindSym` behaves. The difference$/;"	t
BitsRange	$NIMLIB/pure/bitops.nim	/^type BitsRange*[T] = range[0..sizeof(T)*8-1]$/;"	t
BitsType	$NIMLIB/std/private/dragonbox.nim	/^  BitsType* = uint64$/;"	t
Blkcnt	$NIMLIB/posix/posix_haiku.nim	/^  Blkcnt* {.importc: "blkcnt_t", header: "<sys\/types.h>".} = int64$/;"	t
Blkcnt	$NIMLIB/posix/posix_linux_amd64.nim	/^  Blkcnt* {.importc: "blkcnt_t", header: "<sys\/types.h>".} = clong$/;"	t
Blkcnt	$NIMLIB/posix/posix_macos_amd64.nim	/^  Blkcnt* {.importc: "blkcnt_t", header: "<sys\/types.h>".} = int$/;"	t
Blkcnt	$NIMLIB/posix/posix_nintendoswitch.nim	/^  Blkcnt* {.importc: "blkcnt_t", header: "<sys\/types.h>".} = clong$/;"	t
Blkcnt	$NIMLIB/posix/posix_openbsd_amd64.nim	/^  Blkcnt* {.importc: "blkcnt_t", header: "<sys\/types.h>".} = int$/;"	t
Blkcnt	$NIMLIB/posix/posix_other.nim	/^  Blkcnt* {.importc: "blkcnt_t", header: "<sys\/types.h>".} = int$/;"	t
Blksize	$NIMLIB/posix/posix_haiku.nim	/^  Blksize* {.importc: "blksize_t", header: "<sys\/types.h>".} = int32$/;"	t
Blksize	$NIMLIB/posix/posix_linux_amd64.nim	/^  Blksize* {.importc: "blksize_t", header: "<sys\/types.h>".} = clong$/;"	t
Blksize	$NIMLIB/posix/posix_macos_amd64.nim	/^  Blksize* {.importc: "blksize_t", header: "<sys\/types.h>".} = int32$/;"	t
Blksize	$NIMLIB/posix/posix_nintendoswitch.nim	/^  Blksize* {.importc: "blksize_t", header: "<sys\/types.h>".} = clong$/;"	t
Blksize	$NIMLIB/posix/posix_openbsd_amd64.nim	/^  Blksize* {.importc: "blksize_t", header: "<sys\/types.h>".} = int32$/;"	t
Blksize	$NIMLIB/posix/posix_other.nim	/^  Blksize* {.importc: "blksize_t", header: "<sys\/types.h>".} = int$/;"	t
Blob	$NIMLIB/js/dom.nim	/^  Blob* {.importc.} = ref object of RootObj ## see `docs<https:\/\/developer.mozilla.org\/en-US\//;"	t
BlockTags	$NIMLIB/pure/htmlparser.nim	/^  BlockTags* = {tagAddress, tagBlockquote, tagCenter, tagDel, tagDir, tagDiv,$/;"	t
BoundingRect	$NIMLIB/js/dom.nim	/^  BoundingRect* {.importc.} = object$/;"	t
BufferSize	$NIMLIB/pure/net.nim	/^  BufferSize*: int = 4000 ## size of a buffered socket's buffer$/;"	t
ByteAddress	$NIMLIB/system/ctypes.nim	/^  ByteAddress* {.deprecated: "use `uint`".} = int$/;"	t
CASELESS	$NIMLIB/wrappers/pcre.nim	/^  CASELESS*          = 0x00000001  # C1$/;"	t
CFilePtr	$NIMLIB/system/ansi_c.nim	/^  CFilePtr* = ptr CFile ## The type representing a file handle.$/;"	t
CLOCAL	$NIMLIB/posix/termios.nim	/^  CLOCAL* {.importc, header: "<termios.h>".}: Cflag$/;"	t
CLOCKS_PER_SEC	$NIMLIB/posix/posix_freertos_consts.nim	/^var CLOCKS_PER_SEC* {.importc: "CLOCKS_PER_SEC", header: "<time.h>".}: clong$/;"	t
CLOCKS_PER_SEC	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const CLOCKS_PER_SEC* = clong(1000000)$/;"	t
CLOCKS_PER_SEC	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const CLOCKS_PER_SEC* = clong(100)$/;"	t
CLOCKS_PER_SEC	$NIMLIB/posix/posix_other_consts.nim	/^var CLOCKS_PER_SEC* {.importc: "CLOCKS_PER_SEC", header: "<time.h>".}: clong$/;"	t
CLOCK_MONOTONIC	$NIMLIB/posix/posix_freertos_consts.nim	/^var CLOCK_MONOTONIC* {.importc: "CLOCK_MONOTONIC", header: "<time.h>".}: cint$/;"	t
CLOCK_MONOTONIC	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const CLOCK_MONOTONIC* = cint(1)$/;"	t
CLOCK_MONOTONIC	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const CLOCK_MONOTONIC* = cint(4)$/;"	t
CLOCK_MONOTONIC	$NIMLIB/posix/posix_other_consts.nim	/^var CLOCK_MONOTONIC* {.importc: "CLOCK_MONOTONIC", header: "<time.h>".}: cint$/;"	t
CLOCK_PROCESS_CPUTIME_ID	$NIMLIB/posix/posix_freertos_consts.nim	/^var CLOCK_PROCESS_CPUTIME_ID* {.importc: "CLOCK_PROCESS_CPUTIME_ID", header: "<time.h>".}: cint$/;"	t
CLOCK_PROCESS_CPUTIME_ID	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const CLOCK_PROCESS_CPUTIME_ID* = cint(2)$/;"	t
CLOCK_PROCESS_CPUTIME_ID	$NIMLIB/posix/posix_other_consts.nim	/^var CLOCK_PROCESS_CPUTIME_ID* {.importc: "CLOCK_PROCESS_CPUTIME_ID", header: "<time.h>".}: cint$/;"	t
CLOCK_REALTIME	$NIMLIB/posix/posix_freertos_consts.nim	/^var CLOCK_REALTIME* {.importc: "CLOCK_REALTIME", header: "<time.h>".}: cint$/;"	t
CLOCK_REALTIME	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const CLOCK_REALTIME* = cint(0)$/;"	t
CLOCK_REALTIME	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const CLOCK_REALTIME* = cint(1)$/;"	t
CLOCK_REALTIME	$NIMLIB/posix/posix_other_consts.nim	/^var CLOCK_REALTIME* {.importc: "CLOCK_REALTIME", header: "<time.h>".}: cint$/;"	t
CLOCK_THREAD_CPUTIME_ID	$NIMLIB/posix/posix_freertos_consts.nim	/^var CLOCK_THREAD_CPUTIME_ID* {.importc: "CLOCK_THREAD_CPUTIME_ID", header: "<time.h>".}: cint$/;"	t
CLOCK_THREAD_CPUTIME_ID	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const CLOCK_THREAD_CPUTIME_ID* = cint(3)$/;"	t
CLOCK_THREAD_CPUTIME_ID	$NIMLIB/posix/posix_other_consts.nim	/^var CLOCK_THREAD_CPUTIME_ID* {.importc: "CLOCK_THREAD_CPUTIME_ID", header: "<time.h>".}: cint$/;"	t
CLONE_CHILD_CLEARTID	$NIMLIB/posix/linux.nim	/^  CLONE_CHILD_CLEARTID* = 0x00200000'i32$/;"	t
CLONE_CHILD_SETTID	$NIMLIB/posix/linux.nim	/^  CLONE_CHILD_SETTID* = 0x01000000'i32$/;"	t
CLONE_DETACHED	$NIMLIB/posix/linux.nim	/^  CLONE_DETACHED* = 0x00400000'i32$/;"	t
CLONE_FILES	$NIMLIB/posix/linux.nim	/^  CLONE_FILES* = 0x00000400'i32$/;"	t
CLONE_FS	$NIMLIB/posix/linux.nim	/^  CLONE_FS* = 0x00000200'i32$/;"	t
CLONE_IO	$NIMLIB/posix/linux.nim	/^  CLONE_IO* = 0x80000000'i32$/;"	t
CLONE_NEWCGROUP	$NIMLIB/posix/linux.nim	/^  CLONE_NEWCGROUP* = 0x02000000'i32$/;"	t
CLONE_NEWIPC	$NIMLIB/posix/linux.nim	/^  CLONE_NEWIPC* = 0x08000000'i32$/;"	t
CLONE_NEWNET	$NIMLIB/posix/linux.nim	/^  CLONE_NEWNET* = 0x40000000'i32$/;"	t
CLONE_NEWNS	$NIMLIB/posix/linux.nim	/^  CLONE_NEWNS* = 0x00020000'i32$/;"	t
CLONE_NEWPID	$NIMLIB/posix/linux.nim	/^  CLONE_NEWPID* = 0x20000000'i32$/;"	t
CLONE_NEWUSER	$NIMLIB/posix/linux.nim	/^  CLONE_NEWUSER* = 0x10000000'i32$/;"	t
CLONE_NEWUTS	$NIMLIB/posix/linux.nim	/^  CLONE_NEWUTS* = 0x04000000'i32$/;"	t
CLONE_PARENT	$NIMLIB/posix/linux.nim	/^  CLONE_PARENT* = 0x00008000'i32$/;"	t
CLONE_PARENT_SETTID	$NIMLIB/posix/linux.nim	/^  CLONE_PARENT_SETTID* = 0x00100000'i32$/;"	t
CLONE_PIDFD	$NIMLIB/posix/linux.nim	/^  CLONE_PIDFD* = 0x00001000'i32$/;"	t
CLONE_PTRACE	$NIMLIB/posix/linux.nim	/^  CLONE_PTRACE* = 0x00002000'i32$/;"	t
CLONE_SETTLS	$NIMLIB/posix/linux.nim	/^  CLONE_SETTLS* = 0x00080000'i32$/;"	t
CLONE_SIGHAND	$NIMLIB/posix/linux.nim	/^  CLONE_SIGHAND* = 0x00000800'i32$/;"	t
CLONE_SYSVSEM	$NIMLIB/posix/linux.nim	/^  CLONE_SYSVSEM* = 0x00040000'i32$/;"	t
CLONE_THREAD	$NIMLIB/posix/linux.nim	/^  CLONE_THREAD* = 0x00010000'i32$/;"	t
CLONE_UNTRACED	$NIMLIB/posix/linux.nim	/^  CLONE_UNTRACED* = 0x00800000'i32$/;"	t
CLONE_VFORK	$NIMLIB/posix/linux.nim	/^  CLONE_VFORK* = 0x00004000'i32$/;"	t
CLONE_VM	$NIMLIB/posix/linux.nim	/^  CLONE_VM* = 0x00000100'i32$/;"	t
CMSG_DATA	$NIMLIB/posix/posix.nim	/^proc CMSG_DATA*(cmsg: ptr Tcmsghdr): cstring {.$/;"	f
CMSG_FIRSTHDR	$NIMLIB/posix/posix.nim	/^proc CMSG_FIRSTHDR*(mhdr: ptr Tmsghdr): ptr Tcmsghdr {.$/;"	f
CMSG_LEN	$NIMLIB/posix/posix.nim	/^proc CMSG_LEN*(len: csize_t): csize_t {.$/;"	f
CMSG_NXTHDR	$NIMLIB/posix/posix.nim	/^proc CMSG_NXTHDR*(mhdr: ptr Tmsghdr, cmsg: ptr Tcmsghdr): ptr Tcmsghdr {.$/;"	f
CMSG_SPACE	$NIMLIB/posix/posix.nim	/^proc CMSG_SPACE*(len: csize_t): csize_t {.$/;"	f
CODESET	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const CODESET* = cint(14)$/;"	t
CODESET	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const CODESET* = cint(0)$/;"	t
CODESET	$NIMLIB/posix/posix_other_consts.nim	/^var CODESET* {.importc: "CODESET", header: "<langinfo.h>".}: cint$/;"	t
CONFIG_BSR	$NIMLIB/wrappers/pcre.nim	/^  CONFIG_BSR*                    =  8$/;"	t
CONFIG_JIT	$NIMLIB/wrappers/pcre.nim	/^  CONFIG_JIT*                    =  9$/;"	t
CONFIG_JITTARGET	$NIMLIB/wrappers/pcre.nim	/^  CONFIG_JITTARGET*              = 11$/;"	t
CONFIG_LINK_SIZE	$NIMLIB/wrappers/pcre.nim	/^  CONFIG_LINK_SIZE*              =  2$/;"	t
CONFIG_MATCH_LIMIT	$NIMLIB/wrappers/pcre.nim	/^  CONFIG_MATCH_LIMIT*            =  4$/;"	t
CONFIG_MATCH_LIMIT_RECURSION	$NIMLIB/wrappers/pcre.nim	/^  CONFIG_MATCH_LIMIT_RECURSION*  =  7$/;"	t
CONFIG_NEWLINE	$NIMLIB/wrappers/pcre.nim	/^  CONFIG_NEWLINE*                =  1$/;"	t
CONFIG_PARENS_LIMIT	$NIMLIB/wrappers/pcre.nim	/^  CONFIG_PARENS_LIMIT*           = 13$/;"	t
CONFIG_POSIX_MALLOC_THRESHOLD	$NIMLIB/wrappers/pcre.nim	/^  CONFIG_POSIX_MALLOC_THRESHOLD* =  3$/;"	t
CONFIG_STACKRECURSE	$NIMLIB/wrappers/pcre.nim	/^  CONFIG_STACKRECURSE*           =  5$/;"	t
CONFIG_UNICODE_PROPERTIES	$NIMLIB/wrappers/pcre.nim	/^  CONFIG_UNICODE_PROPERTIES*     =  6$/;"	t
CONFIG_UTF16	$NIMLIB/wrappers/pcre.nim	/^  CONFIG_UTF16*                  = 10$/;"	t
CONFIG_UTF32	$NIMLIB/wrappers/pcre.nim	/^  CONFIG_UTF32*                  = 12$/;"	t
CONFIG_UTF8	$NIMLIB/wrappers/pcre.nim	/^  CONFIG_UTF8*                   =  0$/;"	t
CR0	$NIMLIB/posix/termios.nim	/^  CR0* {.importc, header: "<termios.h>".}: Cflag$/;"	t
CR1	$NIMLIB/posix/termios.nim	/^  CR1* {.importc, header: "<termios.h>".}: Cflag$/;"	t
CR2	$NIMLIB/posix/termios.nim	/^  CR2* {.importc, header: "<termios.h>".}: Cflag$/;"	t
CR3	$NIMLIB/posix/termios.nim	/^  CR3* {.importc, header: "<termios.h>".}: Cflag$/;"	t
CRDLY	$NIMLIB/posix/termios.nim	/^  CRDLY* {.importc, header: "<termios.h>".}: Cflag$/;"	t
CREAD	$NIMLIB/posix/termios.nim	/^  CREAD* {.importc, header: "<termios.h>".}: Cflag$/;"	t
CREATE_ALWAYS	$NIMLIB/windows/winlean.nim	/^  CREATE_ALWAYS* = 2'i32$/;"	t
CREATE_NEW	$NIMLIB/windows/winlean.nim	/^  CREATE_NEW* = 1'i32$/;"	t
CREATE_NO_WINDOW	$NIMLIB/windows/winlean.nim	/^  CREATE_NO_WINDOW* = 0x08000000'i32$/;"	t
CREATE_UNICODE_ENVIRONMENT	$NIMLIB/windows/winlean.nim	/^  CREATE_UNICODE_ENVIRONMENT* = 1024'i32$/;"	t
CRNCYSTR	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const CRNCYSTR* = cint(262159)$/;"	t
CRNCYSTR	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const CRNCYSTR* = cint(56)$/;"	t
CRNCYSTR	$NIMLIB/posix/posix_other_consts.nim	/^var CRNCYSTR* {.importc: "CRNCYSTR", header: "<langinfo.h>".}: cint$/;"	t
CRYPTO_malloc_init	$NIMLIB/wrappers/openssl.nim	/^  proc CRYPTO_malloc_init*() =$/;"	t
CS5	$NIMLIB/posix/termios.nim	/^  CS5* {.importc, header: "<termios.h>".}: Cflag$/;"	t
CS6	$NIMLIB/posix/termios.nim	/^  CS6* {.importc, header: "<termios.h>".}: Cflag$/;"	t
CS7	$NIMLIB/posix/termios.nim	/^  CS7* {.importc, header: "<termios.h>".}: Cflag$/;"	t
CS8	$NIMLIB/posix/termios.nim	/^  CS8* {.importc, header: "<termios.h>".}: Cflag$/;"	t
CSIGNAL	$NIMLIB/posix/linux.nim	/^  CSIGNAL* = 0x000000FF'i32$/;"	t
CSIZE	$NIMLIB/posix/termios.nim	/^  CSIZE* {.importc, header: "<termios.h>".}: Cflag$/;"	t
CSTOPB	$NIMLIB/posix/termios.nim	/^  CSTOPB* {.importc, header: "<termios.h>".}: Cflag$/;"	t
CS_PATH	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const CS_PATH* = cint(0)$/;"	t
CS_PATH	$NIMLIB/posix/posix_other_consts.nim	/^var CS_PATH* {.importc: "_CS_PATH", header: "<unistd.h>".}: cint$/;"	t
CS_POSIX_V6_ILP32_OFF32_CFLAGS	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const CS_POSIX_V6_ILP32_OFF32_CFLAGS* = cint(1116)$/;"	t
CS_POSIX_V6_ILP32_OFF32_CFLAGS	$NIMLIB/posix/posix_other_consts.nim	/^var CS_POSIX_V6_ILP32_OFF32_CFLAGS* {.importc: "_CS_POSIX_V6_ILP32_OFF32_CFLAGS", header: "<unis/;"	t
CS_POSIX_V6_ILP32_OFF32_LDFLAGS	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const CS_POSIX_V6_ILP32_OFF32_LDFLAGS* = cint(1117)$/;"	t
CS_POSIX_V6_ILP32_OFF32_LDFLAGS	$NIMLIB/posix/posix_other_consts.nim	/^var CS_POSIX_V6_ILP32_OFF32_LDFLAGS* {.importc: "_CS_POSIX_V6_ILP32_OFF32_LDFLAGS", header: "<un/;"	t
CS_POSIX_V6_ILP32_OFF32_LIBS	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const CS_POSIX_V6_ILP32_OFF32_LIBS* = cint(1118)$/;"	t
CS_POSIX_V6_ILP32_OFF32_LIBS	$NIMLIB/posix/posix_other_consts.nim	/^var CS_POSIX_V6_ILP32_OFF32_LIBS* {.importc: "_CS_POSIX_V6_ILP32_OFF32_LIBS", header: "<unistd.h/;"	t
CS_POSIX_V6_ILP32_OFFBIG_CFLAGS	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const CS_POSIX_V6_ILP32_OFFBIG_CFLAGS* = cint(1120)$/;"	t
CS_POSIX_V6_ILP32_OFFBIG_CFLAGS	$NIMLIB/posix/posix_other_consts.nim	/^var CS_POSIX_V6_ILP32_OFFBIG_CFLAGS* {.importc: "_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS", header: "<un/;"	t
CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS* = cint(1121)$/;"	t
CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS	$NIMLIB/posix/posix_other_consts.nim	/^var CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS* {.importc: "_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS", header: "</;"	t
CS_POSIX_V6_ILP32_OFFBIG_LIBS	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const CS_POSIX_V6_ILP32_OFFBIG_LIBS* = cint(1122)$/;"	t
CS_POSIX_V6_ILP32_OFFBIG_LIBS	$NIMLIB/posix/posix_other_consts.nim	/^var CS_POSIX_V6_ILP32_OFFBIG_LIBS* {.importc: "_CS_POSIX_V6_ILP32_OFFBIG_LIBS", header: "<unistd/;"	t
CS_POSIX_V6_LP64_OFF64_CFLAGS	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const CS_POSIX_V6_LP64_OFF64_CFLAGS* = cint(1124)$/;"	t
CS_POSIX_V6_LP64_OFF64_CFLAGS	$NIMLIB/posix/posix_other_consts.nim	/^var CS_POSIX_V6_LP64_OFF64_CFLAGS* {.importc: "_CS_POSIX_V6_LP64_OFF64_CFLAGS", header: "<unistd/;"	t
CS_POSIX_V6_LP64_OFF64_LDFLAGS	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const CS_POSIX_V6_LP64_OFF64_LDFLAGS* = cint(1125)$/;"	t
CS_POSIX_V6_LP64_OFF64_LDFLAGS	$NIMLIB/posix/posix_other_consts.nim	/^var CS_POSIX_V6_LP64_OFF64_LDFLAGS* {.importc: "_CS_POSIX_V6_LP64_OFF64_LDFLAGS", header: "<unis/;"	t
CS_POSIX_V6_LP64_OFF64_LIBS	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const CS_POSIX_V6_LP64_OFF64_LIBS* = cint(1126)$/;"	t
CS_POSIX_V6_LP64_OFF64_LIBS	$NIMLIB/posix/posix_other_consts.nim	/^var CS_POSIX_V6_LP64_OFF64_LIBS* {.importc: "_CS_POSIX_V6_LP64_OFF64_LIBS", header: "<unistd.h>"/;"	t
CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS* = cint(1128)$/;"	t
CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS	$NIMLIB/posix/posix_other_consts.nim	/^var CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS* {.importc: "_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS", header: "<un/;"	t
CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS* = cint(1129)$/;"	t
CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS	$NIMLIB/posix/posix_other_consts.nim	/^var CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS* {.importc: "_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS", header: "</;"	t
CS_POSIX_V6_LPBIG_OFFBIG_LIBS	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const CS_POSIX_V6_LPBIG_OFFBIG_LIBS* = cint(1130)$/;"	t
CS_POSIX_V6_LPBIG_OFFBIG_LIBS	$NIMLIB/posix/posix_other_consts.nim	/^var CS_POSIX_V6_LPBIG_OFFBIG_LIBS* {.importc: "_CS_POSIX_V6_LPBIG_OFFBIG_LIBS", header: "<unistd/;"	t
CS_POSIX_V6_WIDTH_RESTRICTED_ENVS	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const CS_POSIX_V6_WIDTH_RESTRICTED_ENVS* = cint(1)$/;"	t
CS_POSIX_V6_WIDTH_RESTRICTED_ENVS	$NIMLIB/posix/posix_other_consts.nim	/^var CS_POSIX_V6_WIDTH_RESTRICTED_ENVS* {.importc: "_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS", header: /;"	t
C_JmpBuf	$NIMLIB/system/ansi_c.nim	/^    C_JmpBuf* {.importc: "jmp_buf", header: "<setjmp.h>".} = object$/;"	t
CacheCounter	$NIMLIB/core/macrocache.nim	/^  CacheCounter* = distinct string$/;"	t
CacheSeq	$NIMLIB/core/macrocache.nim	/^  CacheSeq* = distinct string$/;"	t
CacheTable	$NIMLIB/core/macrocache.nim	/^  CacheTable* = distinct string$/;"	t
CallNodes	$NIMLIB/core/macros.nim	/^  CallNodes* = {nnkCall, nnkInfix, nnkPrefix, nnkPostfix, nnkCommand,$/;"	t
Callback	$NIMLIB/pure/asyncdispatch.nim	/^    Callback* = proc (fd: AsyncFD): bool {.closure, gcsafe.}$/;"	t
CalloutBlock	$NIMLIB/wrappers/pcre.nim	/^  CalloutBlock* = object$/;"	t
CaptureBounds	$NIMLIB/impure/nre.nim	/^  CaptureBounds* = distinct RegexMatch$/;"	t
Captures	$NIMLIB/impure/nre.nim	/^  Captures* = distinct RegexMatch$/;"	t
Captures	$NIMLIB/pure/pegs.nim	/^  Captures* = object ## contains the captured substrings.$/;"	t
CatchableError	$NIMLIB/system.nim	/^  CatchableError* = object of Exception ## \\$/;"	t
Cell	$NIMLIB/std/private/asciitables.nim	/^type Cell* = object$/;"	t
Certificate	$NIMLIB/pure/net.nim	/^    Certificate* = string ## DER encoded certificate$/;"	t
CfgEvent	$NIMLIB/pure/parsecfg.nim	/^  CfgEvent* = object of RootObj ## describes a parsing event$/;"	t
CfgEventKind	$NIMLIB/pure/parsecfg.nim	/^  CfgEventKind* = enum ## enumeration of all events that may occur when parsing$/;"	t
CfgParser	$NIMLIB/pure/parsecfg.nim	/^  CfgParser* = object of BaseLexer ## the parser object.$/;"	t
Cflag	$NIMLIB/posix/termios.nim	/^  Cflag* = cuint$/;"	t
CgiError	$NIMLIB/pure/cgi.nim	/^  CgiError* = object of IOError ## Exception that is raised if a CGI error occurs.$/;"	t
Channel	$NIMLIB/system/channels_builtin.nim	/^  Channel*[TMsg] {.gcsafe.} = RawChannel ## a channel for thread communication$/;"	t
CiphersIntermediate	$NIMLIB/pure/ssl_config.nim	/^const CiphersIntermediate* = "TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY130/;"	t
CiphersModern	$NIMLIB/pure/ssl_config.nim	/^const CiphersModern* = "TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA2/;"	t
CiphersOld	$NIMLIB/pure/ssl_config.nim	/^const CiphersOld* = "TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:/;"	t
ClassList	$NIMLIB/js/dom.nim	/^  ClassList* {.importc.} = ref object of RootObj$/;"	t
ClipboardEvent	$NIMLIB/js/dom.nim	/^  ClipboardEvent* {.importc.} = object of Event$/;"	t
Clock	$NIMLIB/posix/posix_haiku.nim	/^  Clock* {.importc: "clock_t", header: "<time.h>".} = int32$/;"	t
Clock	$NIMLIB/posix/posix_linux_amd64.nim	/^  Clock* {.importc: "clock_t", header: "<sys\/types.h>".} = clong$/;"	t
Clock	$NIMLIB/posix/posix_macos_amd64.nim	/^  Clock* {.importc: "clock_t", header: "<sys\/types.h>".} = int$/;"	t
Clock	$NIMLIB/posix/posix_nintendoswitch.nim	/^  Clock* {.importc: "clock_t", header: "<sys\/types.h>".} = clong$/;"	t
Clock	$NIMLIB/posix/posix_openbsd_amd64.nim	/^  Clock* {.importc: "clock_t", header: "<sys\/types.h>".} = int$/;"	t
Clock	$NIMLIB/posix/posix_other.nim	/^  Clock* {.importc: "clock_t", header: "<sys\/types.h>".} = int$/;"	t
ClockId	$NIMLIB/posix/posix_haiku.nim	/^  ClockId* {.importc: "clockid_t", header: "<sys\/types.h>".} = int32$/;"	t
ClockId	$NIMLIB/posix/posix_linux_amd64.nim	/^  ClockId* {.importc: "clockid_t", header: "<sys\/types.h>".} = cint$/;"	t
ClockId	$NIMLIB/posix/posix_macos_amd64.nim	/^  ClockId* {.importc: "clockid_t", header: "<sys\/types.h>".} = int$/;"	t
ClockId	$NIMLIB/posix/posix_nintendoswitch.nim	/^  ClockId* {.importc: "clockid_t", header: "<sys\/types.h>".} = cint$/;"	t
ClockId	$NIMLIB/posix/posix_openbsd_amd64.nim	/^  ClockId* {.importc: "clockid_t", header: "<sys\/types.h>".} = int$/;"	t
ClockId	$NIMLIB/posix/posix_other.nim	/^  ClockId* {.importc: "clockid_t", header: "<sys\/types.h>".} = int$/;"	t
CmdLineKind	$NIMLIB/pure/parseopt.nim	/^  CmdLineKind* = enum ## The detected command line token.$/;"	t
ColRstInit	$NIMLIB/packages/docutils/rst.nim	/^  ColRstInit* = 0   ## Initial column number for standalone RST text$/;"	t
ColRstOffset	$NIMLIB/packages/docutils/rst.nim	/^  ColRstOffset* = 1 ## 1: a replica of ColOffset for internal use$/;"	t
Color	$NIMLIB/pure/colors.nim	/^  Color* = distinct int ## A color stored as RGB, e.g. `0xff00cc`.$/;"	t
CompileDate	$NIMLIB/system/compilation.nim	/^  CompileDate* {.magic: "CompileDate".}: string = "0000-00-00"$/;"	t
CompileTime	$NIMLIB/system/compilation.nim	/^  CompileTime* {.magic: "CompileTime".}: string = "00:00:00"$/;"	t
CompletionCallback	$NIMLIB/wrappers/linenoise/linenoise.nim	/^  CompletionCallback* = proc (a2: cstring; a3: ptr Completions) {.cdecl.}$/;"	t
CompletionData	$NIMLIB/pure/asyncdispatch.nim	/^    CompletionData* = object$/;"	t
Completions	$NIMLIB/wrappers/linenoise/linenoise.nim	/^  Completions* = object$/;"	t
Complex	$NIMLIB/pure/complex.nim	/^  Complex*[T: SomeFloat] = object$/;"	t
Complex32	$NIMLIB/pure/complex.nim	/^  Complex32* = Complex[float32]$/;"	t
Complex64	$NIMLIB/pure/complex.nim	/^  Complex64* = Complex[float64]$/;"	t
Cond	$NIMLIB/core/locks.nim	/^  Cond* = SysCond ## Nim condition variable$/;"	t
Config	$NIMLIB/pure/parsecfg.nim	/^  Config* = OrderedTableRef[string, OrderedTableRef[string, string]]$/;"	t
Console	$NIMLIB/js/jsconsole.nim	/^type Console* = ref object of JsRoot$/;"	t
ConsoleLogger	$NIMLIB/pure/logging.nim	/^  ConsoleLogger* = ref object of Logger$/;"	t
ConsoleOutputFormatter	$NIMLIB/pure/unittest.nim	/^  ConsoleOutputFormatter* = ref object of OutputFormatter$/;"	t
ConvertThreadToFiber	$NIMLIB/windows/winlean.nim	/^proc ConvertThreadToFiber*(param: pointer): pointer {.stdcall, discardable, dynlib: "kernel32", /;"	f
ConvertThreadToFiberEx	$NIMLIB/windows/winlean.nim	/^proc ConvertThreadToFiberEx*(param: pointer, flags: int32): pointer {.stdcall, discardable, dynl/;"	f
CopyFlag	$NIMLIB/std/private/osfiles.nim	/^  CopyFlag* = enum    ## Copy options.$/;"	t
CoroutineRef	$NIMLIB/pure/coro.nim	/^  CoroutineRef* = ref object$/;"	t
CountTable	$NIMLIB/pure/collections/tables.nim	/^  CountTable*[A] = object$/;"	t
CountTableRef	$NIMLIB/pure/collections/tables.nim	/^  CountTableRef*[A] = ref CountTable[A] ## Ref version of$/;"	t
CpuPlatform	$NIMLIB/system/platforms.nim	/^  CpuPlatform* {.pure.} = enum ## the CPU this program will run on.$/;"	t
CpuSet	$NIMLIB/std/private/threadtypes.nim	/^  type CpuSet* {.importc: "cpu_set_t", header: schedh.} = object$/;"	t
CreateFiber	$NIMLIB/windows/winlean.nim	/^proc CreateFiber*(stackSize: int, fn: LPFIBER_START_ROUTINE, param: pointer): pointer {.stdcall,/;"	f
CreateFiberEx	$NIMLIB/windows/winlean.nim	/^proc CreateFiberEx*(stkCommit: int, stkReserve: int, flags: int32, fn: LPFIBER_START_ROUTINE, pa/;"	f
CritBitTree	$NIMLIB/pure/collections/critbits.nim	/^  CritBitTree*[T] = object ## The crit bit tree can either be used$/;"	t
CsvError	$NIMLIB/pure/parsecsv.nim	/^  CsvError* = object of IOError ## An exception that is raised if$/;"	t
CsvParser	$NIMLIB/pure/parsecsv.nim	/^  CsvParser* = object of BaseLexer ## The parser object.$/;"	t
CsvRow	$NIMLIB/pure/parsecsv.nim	/^  CsvRow* = seq[string] ## A row in a CSV file.$/;"	t
CurDir	$NIMLIB/std/private/osseps.nim	/^  CurDir* =$/;"	t
CustomRef	$NIMLIB/pure/asyncdispatch.nim	/^    CustomRef* = ref CustomObj$/;"	t
DAY_1	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const DAY_1* = cint(131079)$/;"	t
DAY_1	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const DAY_1* = cint(7)$/;"	t
DAY_1	$NIMLIB/posix/posix_other_consts.nim	/^var DAY_1* {.importc: "DAY_1", header: "<langinfo.h>".}: cint$/;"	t
DAY_2	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const DAY_2* = cint(131080)$/;"	t
DAY_2	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const DAY_2* = cint(8)$/;"	t
DAY_2	$NIMLIB/posix/posix_other_consts.nim	/^var DAY_2* {.importc: "DAY_2", header: "<langinfo.h>".}: cint$/;"	t
DAY_3	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const DAY_3* = cint(131081)$/;"	t
DAY_3	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const DAY_3* = cint(9)$/;"	t
DAY_3	$NIMLIB/posix/posix_other_consts.nim	/^var DAY_3* {.importc: "DAY_3", header: "<langinfo.h>".}: cint$/;"	t
DAY_4	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const DAY_4* = cint(131082)$/;"	t
DAY_4	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const DAY_4* = cint(10)$/;"	t
DAY_4	$NIMLIB/posix/posix_other_consts.nim	/^var DAY_4* {.importc: "DAY_4", header: "<langinfo.h>".}: cint$/;"	t
DAY_5	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const DAY_5* = cint(131083)$/;"	t
DAY_5	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const DAY_5* = cint(11)$/;"	t
DAY_5	$NIMLIB/posix/posix_other_consts.nim	/^var DAY_5* {.importc: "DAY_5", header: "<langinfo.h>".}: cint$/;"	t
DAY_6	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const DAY_6* = cint(131084)$/;"	t
DAY_6	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const DAY_6* = cint(12)$/;"	t
DAY_6	$NIMLIB/posix/posix_other_consts.nim	/^var DAY_6* {.importc: "DAY_6", header: "<langinfo.h>".}: cint$/;"	t
DAY_7	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const DAY_7* = cint(131085)$/;"	t
DAY_7	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const DAY_7* = cint(13)$/;"	t
DAY_7	$NIMLIB/posix/posix_other_consts.nim	/^var DAY_7* {.importc: "DAY_7", header: "<langinfo.h>".}: cint$/;"	t
DES_cblock	$NIMLIB/wrappers/openssl.nim	/^  DES_cblock* = array[0..7, int8]$/;"	t
DETACHED_PROCESS	$NIMLIB/windows/winlean.nim	/^  DETACHED_PROCESS* = 8'i32$/;"	t
DFA_RESTART	$NIMLIB/wrappers/pcre.nim	/^  DFA_RESTART*       = 0x00020000  #      D    ) Overlaid$/;"	t
DFA_SHORTEST	$NIMLIB/wrappers/pcre.nim	/^  DFA_SHORTEST*      = 0x00010000  #      D    ) Overlaid$/;"	t
DLLSSLName	$NIMLIB/wrappers/openssl.nim	/^      DLLSSLName* = "libssl.so." & sslVersion$/;"	t
DLLUtilName	$NIMLIB/wrappers/openssl.nim	/^      DLLUtilName* = "libcrypto.so." & sslVersion$/;"	t
DOLLAR_ENDONLY	$NIMLIB/wrappers/pcre.nim	/^  DOLLAR_ENDONLY*    = 0x00000020  # C2$/;"	t
DOMAIN_ALIAS_RID_ADMINS	$NIMLIB/windows/winlean.nim	/^  DOMAIN_ALIAS_RID_ADMINS* = 544$/;"	t
DOTALL	$NIMLIB/wrappers/pcre.nim	/^  DOTALL*            = 0x00000004  # C1$/;"	t
DT_BLK	$NIMLIB/posix/posix.nim	/^  DT_BLK* = 6     ## Block device.$/;"	t
DT_CHR	$NIMLIB/posix/posix.nim	/^  DT_CHR* = 2     ## Character device.$/;"	t
DT_DIR	$NIMLIB/posix/posix.nim	/^  DT_DIR* = 4     ## Directory.$/;"	t
DT_FIFO	$NIMLIB/posix/posix.nim	/^  DT_FIFO* = 1    ## Named pipe, or FIFO.$/;"	t
DT_LNK	$NIMLIB/posix/posix.nim	/^  DT_LNK* = 10    ## Symbolic link.$/;"	t
DT_REG	$NIMLIB/posix/posix.nim	/^  DT_REG* = 8     ## Regular file.$/;"	t
DT_SOCK	$NIMLIB/posix/posix.nim	/^  DT_SOCK* = 12   ## UNIX domain socket.$/;"	t
DT_UNKNOWN	$NIMLIB/posix/posix.nim	/^  DT_UNKNOWN* = 0 ## Unknown file type.$/;"	t
DT_WHT	$NIMLIB/posix/posix.nim	/^  DT_WHT* = 14$/;"	t
DUPLICATE_SAME_ACCESS	$NIMLIB/windows/winlean.nim	/^  DUPLICATE_SAME_ACCESS* = 2$/;"	t
DUPNAMES	$NIMLIB/wrappers/pcre.nim	/^  DUPNAMES*          = 0x00080000  # C1$/;"	t
DWORD	$NIMLIB/windows/winlean.nim	/^  DWORD* = int32$/;"	t
D_FMT	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const D_FMT* = cint(131113)$/;"	t
D_FMT	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const D_FMT* = cint(2)$/;"	t
D_FMT	$NIMLIB/posix/posix_other_consts.nim	/^var D_FMT* {.importc: "D_FMT", header: "<langinfo.h>".}: cint$/;"	t
D_T_FMT	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const D_T_FMT* = cint(131112)$/;"	t
D_T_FMT	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const D_T_FMT* = cint(1)$/;"	t
D_T_FMT	$NIMLIB/posix/posix_other_consts.nim	/^var D_T_FMT* {.importc: "D_T_FMT", header: "<langinfo.h>".}: cint$/;"	t
DataTransfer	$NIMLIB/js/dom.nim	/^  DataTransfer* {.importc.} = ref object of RootObj ## see `docs<https:\/\/developer.mozilla.org/;"	t
DataTransferDropEffect	$NIMLIB/js/dom.nim	/^  DataTransferDropEffect* {.pure.} = enum$/;"	t
DataTransferEffectAllowed	$NIMLIB/js/dom.nim	/^  DataTransferEffectAllowed* {.pure.} = enum$/;"	t
DataTransferItem	$NIMLIB/js/dom.nim	/^  DataTransferItem* {.importc.} = ref object of RootObj ## see `docs<https:\/\/developer.mozilla/;"	t
DataTransferItemKind	$NIMLIB/js/dom.nim	/^  DataTransferItemKind* {.pure.} = enum$/;"	t
Date	$NIMLIB/js/jscore.nim	/^  Date* {.importc, nodecl.}: DateLib$/;"	t
DateLib	$NIMLIB/js/jscore.nim	/^  DateLib* = ref object$/;"	t
DateTime	$NIMLIB/js/jscore.nim	/^  DateTime* = ref object$/;"	t
DateTime	$NIMLIB/pure/times.nim	/^  DateTime* = object of RootObj  ## \\$/;"	t
DateTimeLocale	$NIMLIB/pure/times.nim	/^  DateTimeLocale* = object$/;"	t
DeadThreadDefect	$NIMLIB/system/exceptions.nim	/^  DeadThreadDefect* = object of Defect ## \\$/;"	t
DeadThreadError	$NIMLIB/system/exceptions.nim	/^    DeadThreadError* {.deprecated: "See corresponding Defect".} = DeadThreadDefect$/;"	t
DefaultLocale	$NIMLIB/pure/times.nim	/^  DefaultLocale* = DateTimeLocale($/;"	t
Defect	$NIMLIB/system.nim	/^  Defect* = object of Exception ## \\$/;"	t
DeleteFiber	$NIMLIB/windows/winlean.nim	/^proc DeleteFiber*(fiber: pointer) {.stdcall, discardable, dynlib: "kernel32", importc.}$/;"	f
Deque	$NIMLIB/pure/collections/deques.nim	/^  Deque*[T] = object$/;"	t
Dev	$NIMLIB/posix/posix_haiku.nim	/^  Dev* {.importc: "dev_t", header: "<sys\/types.h>".} = int32$/;"	t
Dev	$NIMLIB/posix/posix_linux_amd64.nim	/^  Dev* {.importc: "dev_t", header: "<sys\/types.h>".} = culong$/;"	t
Dev	$NIMLIB/posix/posix_macos_amd64.nim	/^  Dev* {.importc: "dev_t", header: "<sys\/types.h>".} = int32$/;"	t
Dev	$NIMLIB/posix/posix_nintendoswitch.nim	/^  Dev* {.importc: "dev_t", header: "<sys\/types.h>".} = culong$/;"	t
Dev	$NIMLIB/posix/posix_openbsd_amd64.nim	/^  Dev* {.importc: "dev_t", header: "<sys\/types.h>".} = int32$/;"	t
Dev	$NIMLIB/posix/posix_other.nim	/^  Dev* {.importc: "dev_t", header: "<sys\/types.h>".} = int$/;"	t
DeviceId	$NIMLIB/pure/os.nim	/^    DeviceId* = int32$/;"	t
Digits	$NIMLIB/pure/strutils.nim	/^  Digits* = {'0'..'9'}$/;"	t
DirSep	$NIMLIB/std/private/osseps.nim	/^  DirSep* =$/;"	t
Distribution	$NIMLIB/pure/distros.nim	/^  Distribution* {.pure.} = enum ## the list of known distributions$/;"	t
DivByZeroDefect	$NIMLIB/system/exceptions.nim	/^  DivByZeroDefect* = object of ArithmeticDefect ## \\$/;"	t
DivByZeroError	$NIMLIB/system/exceptions.nim	/^    DivByZeroError* {.deprecated: "See corresponding Defect".} = DivByZeroDefect$/;"	t
Document	$NIMLIB/js/dom.nim	/^  Document* {.importc.} = ref object of Node$/;"	t
DocumentOrShadowRoot	$NIMLIB/js/dom.nim	/^    DocumentOrShadowRoot* {.importc.} = object of RootObj$/;"	t
DomApiVersion	$NIMLIB/js/dom.nim	/^  DomApiVersion* = 3 ## the version of DOM API we try to follow. No guarantees though.$/;"	t
DomEvent	$NIMLIB/js/dom.nim	/^  DomEvent* {.pure.} = enum$/;"	t
DomException	$NIMLIB/js/dom.nim	/^    DomException* {.importc.} = ref object$/;"	t
DomParser	$NIMLIB/js/dom.nim	/^    DomParser* = ref object$/;"	t
Domain	$NIMLIB/pure/nativesockets.nim	/^  Domain* = enum ## \\$/;"	t
Double	$NIMLIB/std/private/dragonbox.nim	/^  Double* = object$/;"	t
DoublyLinkedList	$NIMLIB/pure/collections/lists.nim	/^  DoublyLinkedList*[T] = object$/;"	t
DoublyLinkedNode	$NIMLIB/pure/collections/lists.nim	/^  DoublyLinkedNode*[T] = ref DoublyLinkedNodeObj[T]$/;"	t
DoublyLinkedNodeObj	$NIMLIB/pure/collections/lists.nim	/^  DoublyLinkedNodeObj*[T] = object$/;"	t
DoublyLinkedRing	$NIMLIB/pure/collections/lists.nim	/^  DoublyLinkedRing*[T] = object$/;"	t
DragEvent	$NIMLIB/js/dom.nim	/^  DragEvent* {.importc.} = object of MouseEvent$/;"	t
DragEventTypes	$NIMLIB/js/dom.nim	/^  DragEventTypes* = enum$/;"	t
Duration	$NIMLIB/pure/times.nim	/^  Duration* = object ## Represents a fixed duration of time, meaning a duration$/;"	t
DurationParts	$NIMLIB/pure/times.nim	/^  DurationParts* = array[FixedTimeUnit, int64] # Array of Duration parts starts$/;"	t
DurationZero	$NIMLIB/pure/times.nim	/^const DurationZero* = Duration() ## \\$/;"	t
DynlibFormat	$NIMLIB/std/private/osseps.nim	/^  DynlibFormat* =$/;"	t
E2BIG	$NIMLIB/posix/posix_freertos_consts.nim	/^var E2BIG* {.importc: "E2BIG", header: "<errno.h>".}: cint$/;"	t
E2BIG	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const E2BIG* = cint(7)$/;"	t
E2BIG	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const E2BIG* = cint(7)$/;"	t
E2BIG	$NIMLIB/posix/posix_other_consts.nim	/^var E2BIG* {.importc: "E2BIG", header: "<errno.h>".}: cint$/;"	t
EACCES	$NIMLIB/posix/posix_freertos_consts.nim	/^var EACCES* {.importc: "EACCES", header: "<errno.h>".}: cint$/;"	t
EACCES	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const EACCES* = cint(13)$/;"	t
EACCES	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const EACCES* = cint(13)$/;"	t
EACCES	$NIMLIB/posix/posix_other_consts.nim	/^var EACCES* {.importc: "EACCES", header: "<errno.h>".}: cint$/;"	t
EADDRINUSE	$NIMLIB/posix/posix_freertos_consts.nim	/^var EADDRINUSE* {.importc: "EADDRINUSE", header: "<errno.h>".}: cint$/;"	t
EADDRINUSE	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const EADDRINUSE* = cint(98)$/;"	t
EADDRINUSE	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const EADDRINUSE* = cint(112)$/;"	t
EADDRINUSE	$NIMLIB/posix/posix_other_consts.nim	/^var EADDRINUSE* {.importc: "EADDRINUSE", header: "<errno.h>".}: cint$/;"	t
EADDRNOTAVAIL	$NIMLIB/posix/posix_freertos_consts.nim	/^var EADDRNOTAVAIL* {.importc: "EADDRNOTAVAIL", header: "<errno.h>".}: cint$/;"	t
EADDRNOTAVAIL	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const EADDRNOTAVAIL* = cint(99)$/;"	t
EADDRNOTAVAIL	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const EADDRNOTAVAIL* = cint(125)$/;"	t
EADDRNOTAVAIL	$NIMLIB/posix/posix_other_consts.nim	/^var EADDRNOTAVAIL* {.importc: "EADDRNOTAVAIL", header: "<errno.h>".}: cint$/;"	t
EAFNOSUPPORT	$NIMLIB/posix/posix_freertos_consts.nim	/^var EAFNOSUPPORT* {.importc: "EAFNOSUPPORT", header: "<errno.h>".}: cint$/;"	t
EAFNOSUPPORT	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const EAFNOSUPPORT* = cint(97)$/;"	t
EAFNOSUPPORT	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const EAFNOSUPPORT* = cint(106)$/;"	t
EAFNOSUPPORT	$NIMLIB/posix/posix_other_consts.nim	/^var EAFNOSUPPORT* {.importc: "EAFNOSUPPORT", header: "<errno.h>".}: cint$/;"	t
EAGAIN	$NIMLIB/posix/posix_freertos_consts.nim	/^var EAGAIN* {.importc: "EAGAIN", header: "<errno.h>".}: cint$/;"	t
EAGAIN	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const EAGAIN* = cint(11)$/;"	t
EAGAIN	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const EAGAIN* = cint(11)$/;"	t
EAGAIN	$NIMLIB/posix/posix_other_consts.nim	/^var EAGAIN* {.importc: "EAGAIN", header: "<errno.h>".}: cint$/;"	t
EAI_AGAIN	$NIMLIB/posix/posix_freertos_consts.nim	/^var EAI_AGAIN* {.importc: "EAI_AGAIN", header: "<netdb.h>".}: cint$/;"	t
EAI_AGAIN	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const EAI_AGAIN* = cint(-3)$/;"	t
EAI_AGAIN	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const EAI_AGAIN* = cint(2)$/;"	t
EAI_AGAIN	$NIMLIB/posix/posix_other_consts.nim	/^var EAI_AGAIN* {.importc: "EAI_AGAIN", header: "<netdb.h>".}: cint$/;"	t
EAI_BADFLAGS	$NIMLIB/posix/posix_freertos_consts.nim	/^var EAI_BADFLAGS* {.importc: "EAI_BADFLAGS", header: "<netdb.h>".}: cint$/;"	t
EAI_BADFLAGS	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const EAI_BADFLAGS* = cint(-1)$/;"	t
EAI_BADFLAGS	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const EAI_BADFLAGS* = cint(3)$/;"	t
EAI_BADFLAGS	$NIMLIB/posix/posix_other_consts.nim	/^var EAI_BADFLAGS* {.importc: "EAI_BADFLAGS", header: "<netdb.h>".}: cint$/;"	t
EAI_FAIL	$NIMLIB/posix/posix_freertos_consts.nim	/^var EAI_FAIL* {.importc: "EAI_FAIL", header: "<netdb.h>".}: cint$/;"	t
EAI_FAIL	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const EAI_FAIL* = cint(-4)$/;"	t
EAI_FAIL	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const EAI_FAIL* = cint(4)$/;"	t
EAI_FAIL	$NIMLIB/posix/posix_other_consts.nim	/^var EAI_FAIL* {.importc: "EAI_FAIL", header: "<netdb.h>".}: cint$/;"	t
EAI_FAMILY	$NIMLIB/posix/posix_freertos_consts.nim	/^var EAI_FAMILY* {.importc: "EAI_FAMILY", header: "<netdb.h>".}: cint$/;"	t
EAI_FAMILY	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const EAI_FAMILY* = cint(-6)$/;"	t
EAI_FAMILY	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const EAI_FAMILY* = cint(5)$/;"	t
EAI_FAMILY	$NIMLIB/posix/posix_other_consts.nim	/^var EAI_FAMILY* {.importc: "EAI_FAMILY", header: "<netdb.h>".}: cint$/;"	t
EAI_MEMORY	$NIMLIB/posix/posix_freertos_consts.nim	/^var EAI_MEMORY* {.importc: "EAI_MEMORY", header: "<netdb.h>".}: cint$/;"	t
EAI_MEMORY	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const EAI_MEMORY* = cint(-10)$/;"	t
EAI_MEMORY	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const EAI_MEMORY* = cint(6)$/;"	t
EAI_MEMORY	$NIMLIB/posix/posix_other_consts.nim	/^var EAI_MEMORY* {.importc: "EAI_MEMORY", header: "<netdb.h>".}: cint$/;"	t
EAI_NONAME	$NIMLIB/posix/posix_freertos_consts.nim	/^var EAI_NONAME* {.importc: "EAI_NONAME", header: "<netdb.h>".}: cint$/;"	t
EAI_NONAME	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const EAI_NONAME* = cint(-2)$/;"	t
EAI_NONAME	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const EAI_NONAME* = cint(8)$/;"	t
EAI_NONAME	$NIMLIB/posix/posix_other_consts.nim	/^var EAI_NONAME* {.importc: "EAI_NONAME", header: "<netdb.h>".}: cint$/;"	t
EAI_OVERFLOW	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const EAI_OVERFLOW* = cint(-12)$/;"	t
EAI_OVERFLOW	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const EAI_OVERFLOW* = cint(14)$/;"	t
EAI_OVERFLOW	$NIMLIB/posix/posix_other_consts.nim	/^var EAI_OVERFLOW* {.importc: "EAI_OVERFLOW", header: "<netdb.h>".}: cint$/;"	t
EAI_SERVICE	$NIMLIB/posix/posix_freertos_consts.nim	/^var EAI_SERVICE* {.importc: "EAI_SERVICE", header: "<netdb.h>".}: cint$/;"	t
EAI_SERVICE	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const EAI_SERVICE* = cint(-8)$/;"	t
EAI_SERVICE	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const EAI_SERVICE* = cint(9)$/;"	t
EAI_SERVICE	$NIMLIB/posix/posix_other_consts.nim	/^var EAI_SERVICE* {.importc: "EAI_SERVICE", header: "<netdb.h>".}: cint$/;"	t
EAI_SOCKTYPE	$NIMLIB/posix/posix_freertos_consts.nim	/^var EAI_SOCKTYPE* {.importc: "EAI_SOCKTYPE", header: "<netdb.h>".}: cint$/;"	t
EAI_SOCKTYPE	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const EAI_SOCKTYPE* = cint(-7)$/;"	t
EAI_SOCKTYPE	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const EAI_SOCKTYPE* = cint(10)$/;"	t
EAI_SOCKTYPE	$NIMLIB/posix/posix_other_consts.nim	/^var EAI_SOCKTYPE* {.importc: "EAI_SOCKTYPE", header: "<netdb.h>".}: cint$/;"	t
EAI_SYSTEM	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const EAI_SYSTEM* = cint(-11)$/;"	t
EAI_SYSTEM	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const EAI_SYSTEM* = cint(11)$/;"	t
EAI_SYSTEM	$NIMLIB/posix/posix_other_consts.nim	/^var EAI_SYSTEM* {.importc: "EAI_SYSTEM", header: "<netdb.h>".}: cint$/;"	t
EALREADY	$NIMLIB/posix/posix_freertos_consts.nim	/^var EALREADY* {.importc: "EALREADY", header: "<errno.h>".}: cint$/;"	t
EALREADY	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const EALREADY* = cint(114)$/;"	t
EALREADY	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const EALREADY* = cint(120)$/;"	t
EALREADY	$NIMLIB/posix/posix_other_consts.nim	/^var EALREADY* {.importc: "EALREADY", header: "<errno.h>".}: cint$/;"	t
EBADF	$NIMLIB/posix/posix_freertos_consts.nim	/^var EBADF* {.importc: "EBADF", header: "<errno.h>".}: cint$/;"	t
EBADF	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const EBADF* = cint(9)$/;"	t
EBADF	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const EBADF* = cint(9)$/;"	t
EBADF	$NIMLIB/posix/posix_other_consts.nim	/^var EBADF* {.importc: "EBADF", header: "<errno.h>".}: cint$/;"	t
EBADMSG	$NIMLIB/posix/posix_freertos_consts.nim	/^var EBADMSG* {.importc: "EBADMSG", header: "<errno.h>".}: cint$/;"	t
EBADMSG	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const EBADMSG* = cint(74)$/;"	t
EBADMSG	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const EBADMSG* = cint(77)$/;"	t
EBADMSG	$NIMLIB/posix/posix_other_consts.nim	/^var EBADMSG* {.importc: "EBADMSG", header: "<errno.h>".}: cint$/;"	t
EBUSY	$NIMLIB/posix/posix_freertos_consts.nim	/^var EBUSY* {.importc: "EBUSY", header: "<errno.h>".}: cint$/;"	t
EBUSY	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const EBUSY* = cint(16)$/;"	t
EBUSY	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const EBUSY* = cint(16)$/;"	t
EBUSY	$NIMLIB/posix/posix_other_consts.nim	/^var EBUSY* {.importc: "EBUSY", header: "<errno.h>".}: cint$/;"	t
ECANCELED	$NIMLIB/posix/posix_freertos_consts.nim	/^var ECANCELED* {.importc: "ECANCELED", header: "<errno.h>".}: cint$/;"	t
ECANCELED	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const ECANCELED* = cint(125)$/;"	t
ECANCELED	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const ECANCELED* = cint(140)$/;"	t
ECANCELED	$NIMLIB/posix/posix_other_consts.nim	/^var ECANCELED* {.importc: "ECANCELED", header: "<errno.h>".}: cint$/;"	t
ECHILD	$NIMLIB/posix/posix_freertos_consts.nim	/^var ECHILD* {.importc: "ECHILD", header: "<errno.h>".}: cint$/;"	t
ECHILD	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const ECHILD* = cint(10)$/;"	t
ECHILD	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const ECHILD* = cint(10)$/;"	t
ECHILD	$NIMLIB/posix/posix_other_consts.nim	/^var ECHILD* {.importc: "ECHILD", header: "<errno.h>".}: cint$/;"	t
ECHO	$NIMLIB/posix/termios.nim	/^  ECHO* {.importc, header: "<termios.h>".}: Cflag$/;"	t
ECHOE	$NIMLIB/posix/termios.nim	/^  ECHOE* {.importc, header: "<termios.h>".}: Cflag$/;"	t
ECHOK	$NIMLIB/posix/termios.nim	/^  ECHOK* {.importc, header: "<termios.h>".}: Cflag$/;"	t
ECHONL	$NIMLIB/posix/termios.nim	/^  ECHONL* {.importc, header: "<termios.h>".}: Cflag$/;"	t
ECONNABORTED	$NIMLIB/posix/posix_freertos_consts.nim	/^var ECONNABORTED* {.importc: "ECONNABORTED", header: "<errno.h>".}: cint$/;"	t
ECONNABORTED	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const ECONNABORTED* = cint(103)$/;"	t
ECONNABORTED	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const ECONNABORTED* = cint(113)$/;"	t
ECONNABORTED	$NIMLIB/posix/posix_other_consts.nim	/^var ECONNABORTED* {.importc: "ECONNABORTED", header: "<errno.h>".}: cint$/;"	t
ECONNREFUSED	$NIMLIB/posix/posix_freertos_consts.nim	/^var ECONNREFUSED* {.importc: "ECONNREFUSED", header: "<errno.h>".}: cint$/;"	t
ECONNREFUSED	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const ECONNREFUSED* = cint(111)$/;"	t
ECONNREFUSED	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const ECONNREFUSED* = cint(111)$/;"	t
ECONNREFUSED	$NIMLIB/posix/posix_other_consts.nim	/^var ECONNREFUSED* {.importc: "ECONNREFUSED", header: "<errno.h>".}: cint$/;"	t
ECONNRESET	$NIMLIB/posix/posix_freertos_consts.nim	/^var ECONNRESET* {.importc: "ECONNRESET", header: "<errno.h>".}: cint$/;"	t
ECONNRESET	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const ECONNRESET* = cint(104)$/;"	t
ECONNRESET	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const ECONNRESET* = cint(104)$/;"	t
ECONNRESET	$NIMLIB/posix/posix_other_consts.nim	/^var ECONNRESET* {.importc: "ECONNRESET", header: "<errno.h>".}: cint$/;"	t
EDEADLK	$NIMLIB/posix/posix_freertos_consts.nim	/^var EDEADLK* {.importc: "EDEADLK", header: "<errno.h>".}: cint$/;"	t
EDEADLK	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const EDEADLK* = cint(35)$/;"	t
EDEADLK	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const EDEADLK* = cint(45)$/;"	t
EDEADLK	$NIMLIB/posix/posix_other_consts.nim	/^var EDEADLK* {.importc: "EDEADLK", header: "<errno.h>".}: cint$/;"	t
EDESTADDRREQ	$NIMLIB/posix/posix_freertos_consts.nim	/^var EDESTADDRREQ* {.importc: "EDESTADDRREQ", header: "<errno.h>".}: cint$/;"	t
EDESTADDRREQ	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const EDESTADDRREQ* = cint(89)$/;"	t
EDESTADDRREQ	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const EDESTADDRREQ* = cint(121)$/;"	t
EDESTADDRREQ	$NIMLIB/posix/posix_other_consts.nim	/^var EDESTADDRREQ* {.importc: "EDESTADDRREQ", header: "<errno.h>".}: cint$/;"	t
EDOM	$NIMLIB/posix/posix_freertos_consts.nim	/^var EDOM* {.importc: "EDOM", header: "<errno.h>".}: cint$/;"	t
EDOM	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const EDOM* = cint(33)$/;"	t
EDOM	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const EDOM* = cint(33)$/;"	t
EDOM	$NIMLIB/posix/posix_other_consts.nim	/^var EDOM* {.importc: "EDOM", header: "<errno.h>".}: cint$/;"	t
EDQUOT	$NIMLIB/posix/posix_freertos_consts.nim	/^var EDQUOT* {.importc: "EDQUOT", header: "<errno.h>".}: cint$/;"	t
EDQUOT	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const EDQUOT* = cint(122)$/;"	t
EDQUOT	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const EDQUOT* = cint(132)$/;"	t
EDQUOT	$NIMLIB/posix/posix_other_consts.nim	/^var EDQUOT* {.importc: "EDQUOT", header: "<errno.h>".}: cint$/;"	t
EEXIST	$NIMLIB/posix/posix_freertos_consts.nim	/^var EEXIST* {.importc: "EEXIST", header: "<errno.h>".}: cint$/;"	t
EEXIST	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const EEXIST* = cint(17)$/;"	t
EEXIST	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const EEXIST* = cint(17)$/;"	t
EEXIST	$NIMLIB/posix/posix_other_consts.nim	/^var EEXIST* {.importc: "EEXIST", header: "<errno.h>".}: cint$/;"	t
EFAULT	$NIMLIB/posix/posix_freertos_consts.nim	/^var EFAULT* {.importc: "EFAULT", header: "<errno.h>".}: cint$/;"	t
EFAULT	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const EFAULT* = cint(14)$/;"	t
EFAULT	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const EFAULT* = cint(14)$/;"	t
EFAULT	$NIMLIB/posix/posix_other_consts.nim	/^var EFAULT* {.importc: "EFAULT", header: "<errno.h>".}: cint$/;"	t
EFBIG	$NIMLIB/posix/posix_freertos_consts.nim	/^var EFBIG* {.importc: "EFBIG", header: "<errno.h>".}: cint$/;"	t
EFBIG	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const EFBIG* = cint(27)$/;"	t
EFBIG	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const EFBIG* = cint(27)$/;"	t
EFBIG	$NIMLIB/posix/posix_other_consts.nim	/^var EFBIG* {.importc: "EFBIG", header: "<errno.h>".}: cint$/;"	t
EHOSTUNREACH	$NIMLIB/posix/posix_freertos_consts.nim	/^var EHOSTUNREACH* {.importc: "EHOSTUNREACH", header: "<errno.h>".}: cint$/;"	t
EHOSTUNREACH	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const EHOSTUNREACH* = cint(113)$/;"	t
EHOSTUNREACH	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const EHOSTUNREACH* = cint(118)$/;"	t
EHOSTUNREACH	$NIMLIB/posix/posix_other_consts.nim	/^var EHOSTUNREACH* {.importc: "EHOSTUNREACH", header: "<errno.h>".}: cint$/;"	t
EIDRM	$NIMLIB/posix/posix_freertos_consts.nim	/^var EIDRM* {.importc: "EIDRM", header: "<errno.h>".}: cint$/;"	t
EIDRM	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const EIDRM* = cint(43)$/;"	t
EIDRM	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const EIDRM* = cint(36)$/;"	t
EIDRM	$NIMLIB/posix/posix_other_consts.nim	/^var EIDRM* {.importc: "EIDRM", header: "<errno.h>".}: cint$/;"	t
EILSEQ	$NIMLIB/posix/posix_freertos_consts.nim	/^var EILSEQ* {.importc: "EILSEQ", header: "<errno.h>".}: cint$/;"	t
EILSEQ	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const EILSEQ* = cint(84)$/;"	t
EILSEQ	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const EILSEQ* = cint(138)$/;"	t
EILSEQ	$NIMLIB/posix/posix_other_consts.nim	/^var EILSEQ* {.importc: "EILSEQ", header: "<errno.h>".}: cint$/;"	t
EINPROGRESS	$NIMLIB/posix/posix_freertos_consts.nim	/^var EINPROGRESS* {.importc: "EINPROGRESS", header: "<errno.h>".}: cint$/;"	t
EINPROGRESS	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const EINPROGRESS* = cint(115)$/;"	t
EINPROGRESS	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const EINPROGRESS* = cint(119)$/;"	t
EINPROGRESS	$NIMLIB/posix/posix_other_consts.nim	/^var EINPROGRESS* {.importc: "EINPROGRESS", header: "<errno.h>".}: cint$/;"	t
EINTR	$NIMLIB/posix/posix_freertos_consts.nim	/^var EINTR* {.importc: "EINTR", header: "<errno.h>".}: cint$/;"	t
EINTR	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const EINTR* = cint(4)$/;"	t
EINTR	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const EINTR* = cint(4)$/;"	t
EINTR	$NIMLIB/posix/posix_other_consts.nim	/^var EINTR* {.importc: "EINTR", header: "<errno.h>".}: cint$/;"	t
EINVAL	$NIMLIB/posix/posix_freertos_consts.nim	/^var EINVAL* {.importc: "EINVAL", header: "<errno.h>".}: cint$/;"	t
EINVAL	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const EINVAL* = cint(22)$/;"	t
EINVAL	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const EINVAL* = cint(22)$/;"	t
EINVAL	$NIMLIB/posix/posix_other_consts.nim	/^var EINVAL* {.importc: "EINVAL", header: "<errno.h>".}: cint$/;"	t
EIO	$NIMLIB/posix/posix_freertos_consts.nim	/^var EIO* {.importc: "EIO", header: "<errno.h>".}: cint$/;"	t
EIO	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const EIO* = cint(5)$/;"	t
EIO	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const EIO* = cint(5)$/;"	t
EIO	$NIMLIB/posix/posix_other_consts.nim	/^var EIO* {.importc: "EIO", header: "<errno.h>".}: cint$/;"	t
EISCONN	$NIMLIB/posix/posix_freertos_consts.nim	/^var EISCONN* {.importc: "EISCONN", header: "<errno.h>".}: cint$/;"	t
EISCONN	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const EISCONN* = cint(106)$/;"	t
EISCONN	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const EISCONN* = cint(127)$/;"	t
EISCONN	$NIMLIB/posix/posix_other_consts.nim	/^var EISCONN* {.importc: "EISCONN", header: "<errno.h>".}: cint$/;"	t
EISDIR	$NIMLIB/posix/posix_freertos_consts.nim	/^var EISDIR* {.importc: "EISDIR", header: "<errno.h>".}: cint$/;"	t
EISDIR	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const EISDIR* = cint(21)$/;"	t
EISDIR	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const EISDIR* = cint(21)$/;"	t
EISDIR	$NIMLIB/posix/posix_other_consts.nim	/^var EISDIR* {.importc: "EISDIR", header: "<errno.h>".}: cint$/;"	t
EInvalidPeg	$NIMLIB/pure/pegs.nim	/^  EInvalidPeg* = object of ValueError ## raised if an invalid$/;"	t
ELOOP	$NIMLIB/posix/posix_freertos_consts.nim	/^var ELOOP* {.importc: "ELOOP", header: "<errno.h>".}: cint$/;"	t
ELOOP	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const ELOOP* = cint(40)$/;"	t
ELOOP	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const ELOOP* = cint(92)$/;"	t
ELOOP	$NIMLIB/posix/posix_other_consts.nim	/^var ELOOP* {.importc: "ELOOP", header: "<errno.h>".}: cint$/;"	t
EMFILE	$NIMLIB/posix/posix_freertos_consts.nim	/^var EMFILE* {.importc: "EMFILE", header: "<errno.h>".}: cint$/;"	t
EMFILE	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const EMFILE* = cint(24)$/;"	t
EMFILE	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const EMFILE* = cint(24)$/;"	t
EMFILE	$NIMLIB/posix/posix_other_consts.nim	/^var EMFILE* {.importc: "EMFILE", header: "<errno.h>".}: cint$/;"	t
EMLINK	$NIMLIB/posix/posix_freertos_consts.nim	/^var EMLINK* {.importc: "EMLINK", header: "<errno.h>".}: cint$/;"	t
EMLINK	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const EMLINK* = cint(31)$/;"	t
EMLINK	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const EMLINK* = cint(31)$/;"	t
EMLINK	$NIMLIB/posix/posix_other_consts.nim	/^var EMLINK* {.importc: "EMLINK", header: "<errno.h>".}: cint$/;"	t
EMSGSIZE	$NIMLIB/posix/posix_freertos_consts.nim	/^var EMSGSIZE* {.importc: "EMSGSIZE", header: "<errno.h>".}: cint$/;"	t
EMSGSIZE	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const EMSGSIZE* = cint(90)$/;"	t
EMSGSIZE	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const EMSGSIZE* = cint(122)$/;"	t
EMSGSIZE	$NIMLIB/posix/posix_other_consts.nim	/^var EMSGSIZE* {.importc: "EMSGSIZE", header: "<errno.h>".}: cint$/;"	t
EMULTIHOP	$NIMLIB/posix/posix_freertos_consts.nim	/^var EMULTIHOP* {.importc: "EMULTIHOP", header: "<errno.h>".}: cint$/;"	t
EMULTIHOP	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const EMULTIHOP* = cint(72)$/;"	t
EMULTIHOP	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const EMULTIHOP* = cint(74)$/;"	t
EMULTIHOP	$NIMLIB/posix/posix_other_consts.nim	/^var EMULTIHOP* {.importc: "EMULTIHOP", header: "<errno.h>".}: cint$/;"	t
ENABLE_LOOPBACK	$NIMLIB/posix/posix_freertos_consts.nim	/^var ENABLE_LOOPBACK* {.importc: "ENABLE_LOOPBACK", header: "<netif.h>".}: cint$/;"	t
ENAMETOOLONG	$NIMLIB/posix/posix_freertos_consts.nim	/^var ENAMETOOLONG* {.importc: "ENAMETOOLONG", header: "<errno.h>".}: cint$/;"	t
ENAMETOOLONG	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const ENAMETOOLONG* = cint(36)$/;"	t
ENAMETOOLONG	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const ENAMETOOLONG* = cint(91)$/;"	t
ENAMETOOLONG	$NIMLIB/posix/posix_other_consts.nim	/^var ENAMETOOLONG* {.importc: "ENAMETOOLONG", header: "<errno.h>".}: cint$/;"	t
ENETDOWN	$NIMLIB/posix/posix_freertos_consts.nim	/^var ENETDOWN* {.importc: "ENETDOWN", header: "<errno.h>".}: cint$/;"	t
ENETDOWN	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const ENETDOWN* = cint(100)$/;"	t
ENETDOWN	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const ENETDOWN* = cint(115)$/;"	t
ENETDOWN	$NIMLIB/posix/posix_other_consts.nim	/^var ENETDOWN* {.importc: "ENETDOWN", header: "<errno.h>".}: cint$/;"	t
ENETRESET	$NIMLIB/posix/posix_freertos_consts.nim	/^var ENETRESET* {.importc: "ENETRESET", header: "<errno.h>".}: cint$/;"	t
ENETRESET	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const ENETRESET* = cint(102)$/;"	t
ENETRESET	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const ENETRESET* = cint(126)$/;"	t
ENETRESET	$NIMLIB/posix/posix_other_consts.nim	/^var ENETRESET* {.importc: "ENETRESET", header: "<errno.h>".}: cint$/;"	t
ENETUNREACH	$NIMLIB/posix/posix_freertos_consts.nim	/^var ENETUNREACH* {.importc: "ENETUNREACH", header: "<errno.h>".}: cint$/;"	t
ENETUNREACH	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const ENETUNREACH* = cint(101)$/;"	t
ENETUNREACH	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const ENETUNREACH* = cint(114)$/;"	t
ENETUNREACH	$NIMLIB/posix/posix_other_consts.nim	/^var ENETUNREACH* {.importc: "ENETUNREACH", header: "<errno.h>".}: cint$/;"	t
ENFILE	$NIMLIB/posix/posix_freertos_consts.nim	/^var ENFILE* {.importc: "ENFILE", header: "<errno.h>".}: cint$/;"	t
ENFILE	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const ENFILE* = cint(23)$/;"	t
ENFILE	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const ENFILE* = cint(23)$/;"	t
ENFILE	$NIMLIB/posix/posix_other_consts.nim	/^var ENFILE* {.importc: "ENFILE", header: "<errno.h>".}: cint$/;"	t
ENGINE	$NIMLIB/wrappers/openssl.nim	/^  ENGINE* = SslPtr$/;"	t
ENOBUFS	$NIMLIB/posix/posix_freertos_consts.nim	/^var ENOBUFS* {.importc: "ENOBUFS", header: "<errno.h>".}: cint$/;"	t
ENOBUFS	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const ENOBUFS* = cint(105)$/;"	t
ENOBUFS	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const ENOBUFS* = cint(105)$/;"	t
ENOBUFS	$NIMLIB/posix/posix_other_consts.nim	/^var ENOBUFS* {.importc: "ENOBUFS", header: "<errno.h>".}: cint$/;"	t
ENODATA	$NIMLIB/posix/posix_freertos_consts.nim	/^var ENODATA* {.importc: "ENODATA", header: "<errno.h>".}: cint$/;"	t
ENODATA	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const ENODATA* = cint(61)$/;"	t
ENODATA	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const ENODATA* = cint(61)$/;"	t
ENODATA	$NIMLIB/posix/posix_other_consts.nim	/^var ENODATA* {.importc: "ENODATA", header: "<errno.h>".}: cint$/;"	t
ENODEV	$NIMLIB/posix/posix_freertos_consts.nim	/^var ENODEV* {.importc: "ENODEV", header: "<errno.h>".}: cint$/;"	t
ENODEV	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const ENODEV* = cint(19)$/;"	t
ENODEV	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const ENODEV* = cint(19)$/;"	t
ENODEV	$NIMLIB/posix/posix_other_consts.nim	/^var ENODEV* {.importc: "ENODEV", header: "<errno.h>".}: cint$/;"	t
ENOENT	$NIMLIB/posix/posix_freertos_consts.nim	/^var ENOENT* {.importc: "ENOENT", header: "<errno.h>".}: cint$/;"	t
ENOENT	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const ENOENT* = cint(2)$/;"	t
ENOENT	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const ENOENT* = cint(2)$/;"	t
ENOENT	$NIMLIB/posix/posix_other_consts.nim	/^var ENOENT* {.importc: "ENOENT", header: "<errno.h>".}: cint$/;"	t
ENOEXEC	$NIMLIB/posix/posix_freertos_consts.nim	/^var ENOEXEC* {.importc: "ENOEXEC", header: "<errno.h>".}: cint$/;"	t
ENOEXEC	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const ENOEXEC* = cint(8)$/;"	t
ENOEXEC	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const ENOEXEC* = cint(8)$/;"	t
ENOEXEC	$NIMLIB/posix/posix_other_consts.nim	/^var ENOEXEC* {.importc: "ENOEXEC", header: "<errno.h>".}: cint$/;"	t
ENOLCK	$NIMLIB/posix/posix_freertos_consts.nim	/^var ENOLCK* {.importc: "ENOLCK", header: "<errno.h>".}: cint$/;"	t
ENOLCK	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const ENOLCK* = cint(37)$/;"	t
ENOLCK	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const ENOLCK* = cint(46)$/;"	t
ENOLCK	$NIMLIB/posix/posix_other_consts.nim	/^var ENOLCK* {.importc: "ENOLCK", header: "<errno.h>".}: cint$/;"	t
ENOLINK	$NIMLIB/posix/posix_freertos_consts.nim	/^var ENOLINK* {.importc: "ENOLINK", header: "<errno.h>".}: cint$/;"	t
ENOLINK	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const ENOLINK* = cint(67)$/;"	t
ENOLINK	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const ENOLINK* = cint(67)$/;"	t
ENOLINK	$NIMLIB/posix/posix_other_consts.nim	/^var ENOLINK* {.importc: "ENOLINK", header: "<errno.h>".}: cint$/;"	t
ENOMEM	$NIMLIB/posix/posix_freertos_consts.nim	/^var ENOMEM* {.importc: "ENOMEM", header: "<errno.h>".}: cint$/;"	t
ENOMEM	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const ENOMEM* = cint(12)$/;"	t
ENOMEM	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const ENOMEM* = cint(12)$/;"	t
ENOMEM	$NIMLIB/posix/posix_other_consts.nim	/^var ENOMEM* {.importc: "ENOMEM", header: "<errno.h>".}: cint$/;"	t
ENOMSG	$NIMLIB/posix/posix_freertos_consts.nim	/^var ENOMSG* {.importc: "ENOMSG", header: "<errno.h>".}: cint$/;"	t
ENOMSG	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const ENOMSG* = cint(42)$/;"	t
ENOMSG	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const ENOMSG* = cint(35)$/;"	t
ENOMSG	$NIMLIB/posix/posix_other_consts.nim	/^var ENOMSG* {.importc: "ENOMSG", header: "<errno.h>".}: cint$/;"	t
ENOPROTOOPT	$NIMLIB/posix/posix_freertos_consts.nim	/^var ENOPROTOOPT* {.importc: "ENOPROTOOPT", header: "<errno.h>".}: cint$/;"	t
ENOPROTOOPT	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const ENOPROTOOPT* = cint(92)$/;"	t
ENOPROTOOPT	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const ENOPROTOOPT* = cint(109)$/;"	t
ENOPROTOOPT	$NIMLIB/posix/posix_other_consts.nim	/^var ENOPROTOOPT* {.importc: "ENOPROTOOPT", header: "<errno.h>".}: cint$/;"	t
ENOSPC	$NIMLIB/posix/posix_freertos_consts.nim	/^var ENOSPC* {.importc: "ENOSPC", header: "<errno.h>".}: cint$/;"	t
ENOSPC	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const ENOSPC* = cint(28)$/;"	t
ENOSPC	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const ENOSPC* = cint(28)$/;"	t
ENOSPC	$NIMLIB/posix/posix_other_consts.nim	/^var ENOSPC* {.importc: "ENOSPC", header: "<errno.h>".}: cint$/;"	t
ENOSR	$NIMLIB/posix/posix_freertos_consts.nim	/^var ENOSR* {.importc: "ENOSR", header: "<errno.h>".}: cint$/;"	t
ENOSR	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const ENOSR* = cint(63)$/;"	t
ENOSR	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const ENOSR* = cint(63)$/;"	t
ENOSR	$NIMLIB/posix/posix_other_consts.nim	/^var ENOSR* {.importc: "ENOSR", header: "<errno.h>".}: cint$/;"	t
ENOSTR	$NIMLIB/posix/posix_freertos_consts.nim	/^var ENOSTR* {.importc: "ENOSTR", header: "<errno.h>".}: cint$/;"	t
ENOSTR	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const ENOSTR* = cint(60)$/;"	t
ENOSTR	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const ENOSTR* = cint(60)$/;"	t
ENOSTR	$NIMLIB/posix/posix_other_consts.nim	/^var ENOSTR* {.importc: "ENOSTR", header: "<errno.h>".}: cint$/;"	t
ENOSYS	$NIMLIB/posix/posix_freertos_consts.nim	/^var ENOSYS* {.importc: "ENOSYS", header: "<errno.h>".}: cint$/;"	t
ENOSYS	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const ENOSYS* = cint(38)$/;"	t
ENOSYS	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const ENOSYS* = cint(88)$/;"	t
ENOSYS	$NIMLIB/posix/posix_other_consts.nim	/^var ENOSYS* {.importc: "ENOSYS", header: "<errno.h>".}: cint$/;"	t
ENOTCONN	$NIMLIB/posix/posix_freertos_consts.nim	/^var ENOTCONN* {.importc: "ENOTCONN", header: "<errno.h>".}: cint$/;"	t
ENOTCONN	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const ENOTCONN* = cint(107)$/;"	t
ENOTCONN	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const ENOTCONN* = cint(128)$/;"	t
ENOTCONN	$NIMLIB/posix/posix_other_consts.nim	/^var ENOTCONN* {.importc: "ENOTCONN", header: "<errno.h>".}: cint$/;"	t
ENOTDIR	$NIMLIB/posix/posix_freertos_consts.nim	/^var ENOTDIR* {.importc: "ENOTDIR", header: "<errno.h>".}: cint$/;"	t
ENOTDIR	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const ENOTDIR* = cint(20)$/;"	t
ENOTDIR	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const ENOTDIR* = cint(20)$/;"	t
ENOTDIR	$NIMLIB/posix/posix_other_consts.nim	/^var ENOTDIR* {.importc: "ENOTDIR", header: "<errno.h>".}: cint$/;"	t
ENOTEMPTY	$NIMLIB/posix/posix_freertos_consts.nim	/^var ENOTEMPTY* {.importc: "ENOTEMPTY", header: "<errno.h>".}: cint$/;"	t
ENOTEMPTY	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const ENOTEMPTY* = cint(39)$/;"	t
ENOTEMPTY	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const ENOTEMPTY* = cint(90)$/;"	t
ENOTEMPTY	$NIMLIB/posix/posix_other_consts.nim	/^var ENOTEMPTY* {.importc: "ENOTEMPTY", header: "<errno.h>".}: cint$/;"	t
ENOTSOCK	$NIMLIB/posix/posix_freertos_consts.nim	/^var ENOTSOCK* {.importc: "ENOTSOCK", header: "<errno.h>".}: cint$/;"	t
ENOTSOCK	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const ENOTSOCK* = cint(88)$/;"	t
ENOTSOCK	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const ENOTSOCK* = cint(108)$/;"	t
ENOTSOCK	$NIMLIB/posix/posix_other_consts.nim	/^var ENOTSOCK* {.importc: "ENOTSOCK", header: "<errno.h>".}: cint$/;"	t
ENOTSUP	$NIMLIB/posix/posix_freertos_consts.nim	/^var ENOTSUP* {.importc: "ENOTSUP", header: "<errno.h>".}: cint$/;"	t
ENOTSUP	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const ENOTSUP* = cint(95)$/;"	t
ENOTSUP	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const ENOTSUP* = cint(134)$/;"	t
ENOTSUP	$NIMLIB/posix/posix_other_consts.nim	/^var ENOTSUP* {.importc: "ENOTSUP", header: "<errno.h>".}: cint$/;"	t
ENOTTY	$NIMLIB/posix/posix_freertos_consts.nim	/^var ENOTTY* {.importc: "ENOTTY", header: "<errno.h>".}: cint$/;"	t
ENOTTY	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const ENOTTY* = cint(25)$/;"	t
ENOTTY	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const ENOTTY* = cint(25)$/;"	t
ENOTTY	$NIMLIB/posix/posix_other_consts.nim	/^var ENOTTY* {.importc: "ENOTTY", header: "<errno.h>".}: cint$/;"	t
ENXIO	$NIMLIB/posix/posix_freertos_consts.nim	/^var ENXIO* {.importc: "ENXIO", header: "<errno.h>".}: cint$/;"	t
ENXIO	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const ENXIO* = cint(6)$/;"	t
ENXIO	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const ENXIO* = cint(6)$/;"	t
ENXIO	$NIMLIB/posix/posix_other_consts.nim	/^var ENXIO* {.importc: "ENXIO", header: "<errno.h>".}: cint$/;"	t
EOFError	$NIMLIB/system/exceptions.nim	/^  EOFError* = object of IOError ## \\$/;"	t
EOPNOTSUPP	$NIMLIB/posix/posix_freertos_consts.nim	/^var EOPNOTSUPP* {.importc: "EOPNOTSUPP", header: "<errno.h>".}: cint$/;"	t
EOPNOTSUPP	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const EOPNOTSUPP* = cint(95)$/;"	t
EOPNOTSUPP	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const EOPNOTSUPP* = cint(95)$/;"	t
EOPNOTSUPP	$NIMLIB/posix/posix_other_consts.nim	/^var EOPNOTSUPP* {.importc: "EOPNOTSUPP", header: "<errno.h>".}: cint$/;"	t
EOVERFLOW	$NIMLIB/posix/posix_freertos_consts.nim	/^var EOVERFLOW* {.importc: "EOVERFLOW", header: "<errno.h>".}: cint$/;"	t
EOVERFLOW	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const EOVERFLOW* = cint(75)$/;"	t
EOVERFLOW	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const EOVERFLOW* = cint(139)$/;"	t
EOVERFLOW	$NIMLIB/posix/posix_other_consts.nim	/^var EOVERFLOW* {.importc: "EOVERFLOW", header: "<errno.h>".}: cint$/;"	t
EPERM	$NIMLIB/posix/posix_freertos_consts.nim	/^var EPERM* {.importc: "EPERM", header: "<errno.h>".}: cint$/;"	t
EPERM	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const EPERM* = cint(1)$/;"	t
EPERM	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const EPERM* = cint(1)$/;"	t
EPERM	$NIMLIB/posix/posix_other_consts.nim	/^var EPERM* {.importc: "EPERM", header: "<errno.h>".}: cint$/;"	t
EPIPE	$NIMLIB/posix/posix_freertos_consts.nim	/^var EPIPE* {.importc: "EPIPE", header: "<errno.h>".}: cint$/;"	t
EPIPE	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const EPIPE* = cint(32)$/;"	t
EPIPE	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const EPIPE* = cint(32)$/;"	t
EPIPE	$NIMLIB/posix/posix_other_consts.nim	/^var EPIPE* {.importc: "EPIPE", header: "<errno.h>".}: cint$/;"	t
EPOLLERR	$NIMLIB/posix/epoll.nim	/^  EPOLLERR* = 0x00000008$/;"	t
EPOLLET	$NIMLIB/posix/epoll.nim	/^  EPOLLET* = 1 shl 31$/;"	t
EPOLLEXCLUSIVE	$NIMLIB/posix/epoll.nim	/^  EPOLLEXCLUSIVE* = 1 shl 28$/;"	t
EPOLLHUP	$NIMLIB/posix/epoll.nim	/^  EPOLLHUP* = 0x00000010$/;"	t
EPOLLIN	$NIMLIB/posix/epoll.nim	/^  EPOLLIN* = 0x00000001$/;"	t
EPOLLMSG	$NIMLIB/posix/epoll.nim	/^  EPOLLMSG* = 0x00000400$/;"	t
EPOLLONESHOT	$NIMLIB/posix/epoll.nim	/^  EPOLLONESHOT* = 1 shl 30$/;"	t
EPOLLOUT	$NIMLIB/posix/epoll.nim	/^  EPOLLOUT* = 0x00000004$/;"	t
EPOLLPRI	$NIMLIB/posix/epoll.nim	/^  EPOLLPRI* = 0x00000002$/;"	t
EPOLLRDBAND	$NIMLIB/posix/epoll.nim	/^  EPOLLRDBAND* = 0x00000080$/;"	t
EPOLLRDHUP	$NIMLIB/posix/epoll.nim	/^  EPOLLRDHUP* = 0x00002000$/;"	t
EPOLLRDNORM	$NIMLIB/posix/epoll.nim	/^  EPOLLRDNORM* = 0x00000040$/;"	t
EPOLLWAKEUP	$NIMLIB/posix/epoll.nim	/^  EPOLLWAKEUP* = 1 shl 29$/;"	t
EPOLLWRBAND	$NIMLIB/posix/epoll.nim	/^  EPOLLWRBAND* = 0x00000200$/;"	t
EPOLLWRNORM	$NIMLIB/posix/epoll.nim	/^  EPOLLWRNORM* = 0x00000100$/;"	t
EPOLL_CTL_ADD	$NIMLIB/posix/epoll.nim	/^  EPOLL_CTL_ADD* = 1          # Add a file descriptor to the interface.$/;"	t
EPOLL_CTL_DEL	$NIMLIB/posix/epoll.nim	/^  EPOLL_CTL_DEL* = 2          # Remove a file descriptor from the interface.$/;"	t
EPOLL_CTL_MOD	$NIMLIB/posix/epoll.nim	/^  EPOLL_CTL_MOD* = 3          # Change file descriptor epoll_event structure.$/;"	t
EPROTO	$NIMLIB/posix/posix_freertos_consts.nim	/^var EPROTO* {.importc: "EPROTO", header: "<errno.h>".}: cint$/;"	t
EPROTO	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const EPROTO* = cint(71)$/;"	t
EPROTO	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const EPROTO* = cint(71)$/;"	t
EPROTO	$NIMLIB/posix/posix_other_consts.nim	/^var EPROTO* {.importc: "EPROTO", header: "<errno.h>".}: cint$/;"	t
EPROTONOSUPPORT	$NIMLIB/posix/posix_freertos_consts.nim	/^var EPROTONOSUPPORT* {.importc: "EPROTONOSUPPORT", header: "<errno.h>".}: cint$/;"	t
EPROTONOSUPPORT	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const EPROTONOSUPPORT* = cint(93)$/;"	t
EPROTONOSUPPORT	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const EPROTONOSUPPORT* = cint(123)$/;"	t
EPROTONOSUPPORT	$NIMLIB/posix/posix_other_consts.nim	/^var EPROTONOSUPPORT* {.importc: "EPROTONOSUPPORT", header: "<errno.h>".}: cint$/;"	t
EPROTOTYPE	$NIMLIB/posix/posix_freertos_consts.nim	/^var EPROTOTYPE* {.importc: "EPROTOTYPE", header: "<errno.h>".}: cint$/;"	t
EPROTOTYPE	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const EPROTOTYPE* = cint(91)$/;"	t
EPROTOTYPE	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const EPROTOTYPE* = cint(107)$/;"	t
EPROTOTYPE	$NIMLIB/posix/posix_other_consts.nim	/^var EPROTOTYPE* {.importc: "EPROTOTYPE", header: "<errno.h>".}: cint$/;"	t
EParseError	$NIMLIB/packages/docutils/rst.nim	/^  EParseError* = object of ValueError$/;"	t
ERA	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const ERA* = cint(131116)$/;"	t
ERA	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const ERA* = cint(45)$/;"	t
ERA	$NIMLIB/posix/posix_other_consts.nim	/^var ERA* {.importc: "ERA", header: "<langinfo.h>".}: cint$/;"	t
ERANGE	$NIMLIB/posix/posix_freertos_consts.nim	/^var ERANGE* {.importc: "ERANGE", header: "<errno.h>".}: cint$/;"	t
ERANGE	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const ERANGE* = cint(34)$/;"	t
ERANGE	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const ERANGE* = cint(34)$/;"	t
ERANGE	$NIMLIB/posix/posix_other_consts.nim	/^var ERANGE* {.importc: "ERANGE", header: "<errno.h>".}: cint$/;"	t
ERA_D_FMT	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const ERA_D_FMT* = cint(131118)$/;"	t
ERA_D_FMT	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const ERA_D_FMT* = cint(46)$/;"	t
ERA_D_FMT	$NIMLIB/posix/posix_other_consts.nim	/^var ERA_D_FMT* {.importc: "ERA_D_FMT", header: "<langinfo.h>".}: cint$/;"	t
ERA_D_T_FMT	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const ERA_D_T_FMT* = cint(131120)$/;"	t
ERA_D_T_FMT	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const ERA_D_T_FMT* = cint(47)$/;"	t
ERA_D_T_FMT	$NIMLIB/posix/posix_other_consts.nim	/^var ERA_D_T_FMT* {.importc: "ERA_D_T_FMT", header: "<langinfo.h>".}: cint$/;"	t
ERA_T_FMT	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const ERA_T_FMT* = cint(131121)$/;"	t
ERA_T_FMT	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const ERA_T_FMT* = cint(48)$/;"	t
ERA_T_FMT	$NIMLIB/posix/posix_other_consts.nim	/^var ERA_T_FMT* {.importc: "ERA_T_FMT", header: "<langinfo.h>".}: cint$/;"	t
EROFS	$NIMLIB/posix/posix_freertos_consts.nim	/^var EROFS* {.importc: "EROFS", header: "<errno.h>".}: cint$/;"	t
EROFS	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const EROFS* = cint(30)$/;"	t
EROFS	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const EROFS* = cint(30)$/;"	t
EROFS	$NIMLIB/posix/posix_other_consts.nim	/^var EROFS* {.importc: "EROFS", header: "<errno.h>".}: cint$/;"	t
ERROR_ACCESS_DENIED	$NIMLIB/windows/winlean.nim	/^  ERROR_ACCESS_DENIED* = 5$/;"	t
ERROR_BADCOUNT	$NIMLIB/wrappers/pcre.nim	/^  ERROR_BADCOUNT*         = -15$/;"	t
ERROR_BADENDIANNESS	$NIMLIB/wrappers/pcre.nim	/^  ERROR_BADENDIANNESS*    = -29$/;"	t
ERROR_BADLENGTH	$NIMLIB/wrappers/pcre.nim	/^  ERROR_BADLENGTH*        = -32$/;"	t
ERROR_BADMAGIC	$NIMLIB/wrappers/pcre.nim	/^  ERROR_BADMAGIC*         =  -4$/;"	t
ERROR_BADMODE	$NIMLIB/wrappers/pcre.nim	/^  ERROR_BADMODE*          = -28$/;"	t
ERROR_BADNEWLINE	$NIMLIB/wrappers/pcre.nim	/^  ERROR_BADNEWLINE*       = -23$/;"	t
ERROR_BADOFFSET	$NIMLIB/wrappers/pcre.nim	/^  ERROR_BADOFFSET*        = -24$/;"	t
ERROR_BADOPTION	$NIMLIB/wrappers/pcre.nim	/^  ERROR_BADOPTION*        =  -3$/;"	t
ERROR_BADPARTIAL	$NIMLIB/wrappers/pcre.nim	/^  ERROR_BADPARTIAL*       = -13$/;"	t
ERROR_BADUTF16	$NIMLIB/wrappers/pcre.nim	/^  ERROR_BADUTF16*         = -10 ## Same for 8\/16\/32$/;"	t
ERROR_BADUTF16_OFFSET	$NIMLIB/wrappers/pcre.nim	/^  ERROR_BADUTF16_OFFSET*  = -11 ## Same for 8\/16$/;"	t
ERROR_BADUTF32	$NIMLIB/wrappers/pcre.nim	/^  ERROR_BADUTF32*         = -10 ## Same for 8\/16\/32$/;"	t
ERROR_BADUTF8	$NIMLIB/wrappers/pcre.nim	/^  ERROR_BADUTF8*          = -10 ## Same for 8\/16\/32$/;"	t
ERROR_BADUTF8_OFFSET	$NIMLIB/wrappers/pcre.nim	/^  ERROR_BADUTF8_OFFSET*   = -11 ## Same for 8\/16$/;"	t
ERROR_BAD_ARGUMENTS	$NIMLIB/windows/winlean.nim	/^  ERROR_BAD_ARGUMENTS* = 165$/;"	t
ERROR_CALLOUT	$NIMLIB/wrappers/pcre.nim	/^  ERROR_CALLOUT*          =  -9 ## Never used by PCRE itself$/;"	t
ERROR_DFA_BADRESTART	$NIMLIB/wrappers/pcre.nim	/^  ERROR_DFA_BADRESTART*   = -30$/;"	t
ERROR_DFA_RECURSE	$NIMLIB/wrappers/pcre.nim	/^  ERROR_DFA_RECURSE*      = -20$/;"	t
ERROR_DFA_UCOND	$NIMLIB/wrappers/pcre.nim	/^  ERROR_DFA_UCOND*        = -17$/;"	t
ERROR_DFA_UITEM	$NIMLIB/wrappers/pcre.nim	/^  ERROR_DFA_UITEM*        = -16$/;"	t
ERROR_DFA_UMLIMIT	$NIMLIB/wrappers/pcre.nim	/^  ERROR_DFA_UMLIMIT*      = -18$/;"	t
ERROR_DFA_WSSIZE	$NIMLIB/wrappers/pcre.nim	/^  ERROR_DFA_WSSIZE*       = -19$/;"	t
ERROR_FILE_EXISTS	$NIMLIB/windows/winlean.nim	/^  ERROR_FILE_EXISTS* = 80$/;"	t
ERROR_FILE_NOT_FOUND	$NIMLIB/windows/winlean.nim	/^  ERROR_FILE_NOT_FOUND* = 2 ## https:\/\/docs.microsoft.com\/en-us\/windows\/win32\/debug\/syste/;"	t
ERROR_HANDLE_EOF	$NIMLIB/windows/winlean.nim	/^  ERROR_HANDLE_EOF* = 38$/;"	t
ERROR_INTERNAL	$NIMLIB/wrappers/pcre.nim	/^  ERROR_INTERNAL*         = -14$/;"	t
ERROR_IO_PENDING	$NIMLIB/windows/winlean.nim	/^  ERROR_IO_PENDING* = 997 # a.k.a WSA_IO_PENDING$/;"	t
ERROR_JIT_BADOPTION	$NIMLIB/wrappers/pcre.nim	/^  ERROR_JIT_BADOPTION*    = -31$/;"	t
ERROR_JIT_STACKLIMIT	$NIMLIB/wrappers/pcre.nim	/^  ERROR_JIT_STACKLIMIT*   = -27$/;"	t
ERROR_LOCK_VIOLATION	$NIMLIB/windows/winlean.nim	/^  ERROR_LOCK_VIOLATION* = 33$/;"	t
ERROR_MATCHLIMIT	$NIMLIB/wrappers/pcre.nim	/^  ERROR_MATCHLIMIT*       =  -8$/;"	t
ERROR_NETNAME_DELETED	$NIMLIB/windows/winlean.nim	/^  ERROR_NETNAME_DELETED* = 64$/;"	t
ERROR_NOMATCH	$NIMLIB/wrappers/pcre.nim	/^  ERROR_NOMATCH*          =  -1$/;"	t
ERROR_NOMEMORY	$NIMLIB/wrappers/pcre.nim	/^  ERROR_NOMEMORY*         =  -6$/;"	t
ERROR_NOSUBSTRING	$NIMLIB/wrappers/pcre.nim	/^  ERROR_NOSUBSTRING*      =  -7$/;"	t
ERROR_NO_MORE_FILES	$NIMLIB/windows/winlean.nim	/^  ERROR_NO_MORE_FILES* = 18$/;"	t
ERROR_NULL	$NIMLIB/wrappers/pcre.nim	/^  ERROR_NULL*             =  -2$/;"	t
ERROR_NULLWSLIMIT	$NIMLIB/wrappers/pcre.nim	/^  ERROR_NULLWSLIMIT*      = -22 ## No longer actually used$/;"	t
ERROR_PARTIAL	$NIMLIB/wrappers/pcre.nim	/^  ERROR_PARTIAL*          = -12$/;"	t
ERROR_PATH_NOT_FOUND	$NIMLIB/windows/winlean.nim	/^  ERROR_PATH_NOT_FOUND* = 3$/;"	t
ERROR_RECURSELOOP	$NIMLIB/wrappers/pcre.nim	/^  ERROR_RECURSELOOP*      = -26$/;"	t
ERROR_RECURSIONLIMIT	$NIMLIB/wrappers/pcre.nim	/^  ERROR_RECURSIONLIMIT*   = -21$/;"	t
ERROR_SHORTUTF16	$NIMLIB/wrappers/pcre.nim	/^  ERROR_SHORTUTF16*       = -25 ## Same for 8\/16$/;"	t
ERROR_SHORTUTF8	$NIMLIB/wrappers/pcre.nim	/^  ERROR_SHORTUTF8*        = -25$/;"	t
ERROR_UNKNOWN_NODE	$NIMLIB/wrappers/pcre.nim	/^  ERROR_UNKNOWN_NODE*     =  -5 ## For backward compatibility$/;"	t
ERROR_UNKNOWN_OPCODE	$NIMLIB/wrappers/pcre.nim	/^  ERROR_UNKNOWN_OPCODE*   =  -5$/;"	t
ERROR_UNSET	$NIMLIB/wrappers/pcre.nim	/^  ERROR_UNSET*            = -33$/;"	t
ERR_error_string	$NIMLIB/wrappers/openssl.nim	/^proc ERR_error_string*(e: culong, buf: cstring): cstring{.cdecl,$/;"	f
ERR_get_error	$NIMLIB/wrappers/openssl.nim	/^proc ERR_get_error*(): culong{.cdecl, dynlib: DLLUtilName, importc.}$/;"	f
ERR_load_BIO_strings	$NIMLIB/wrappers/openssl.nim	/^  proc ERR_load_BIO_strings*() =$/;"	t
ERR_peek_last_error	$NIMLIB/wrappers/openssl.nim	/^proc ERR_peek_last_error*(): culong{.cdecl, dynlib: DLLUtilName, importc.}$/;"	f
ERR_print_errors_fp	$NIMLIB/wrappers/openssl.nim	/^proc ERR_print_errors_fp*(fp: File){.cdecl, dynlib: DLLUtilName, importc.}$/;"	f
ESPIPE	$NIMLIB/posix/posix_freertos_consts.nim	/^var ESPIPE* {.importc: "ESPIPE", header: "<errno.h>".}: cint$/;"	t
ESPIPE	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const ESPIPE* = cint(29)$/;"	t
ESPIPE	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const ESPIPE* = cint(29)$/;"	t
ESPIPE	$NIMLIB/posix/posix_other_consts.nim	/^var ESPIPE* {.importc: "ESPIPE", header: "<errno.h>".}: cint$/;"	t
ESRCH	$NIMLIB/posix/posix_freertos_consts.nim	/^var ESRCH* {.importc: "ESRCH", header: "<errno.h>".}: cint$/;"	t
ESRCH	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const ESRCH* = cint(3)$/;"	t
ESRCH	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const ESRCH* = cint(3)$/;"	t
ESRCH	$NIMLIB/posix/posix_other_consts.nim	/^var ESRCH* {.importc: "ESRCH", header: "<errno.h>".}: cint$/;"	t
ESTALE	$NIMLIB/posix/posix_freertos_consts.nim	/^var ESTALE* {.importc: "ESTALE", header: "<errno.h>".}: cint$/;"	t
ESTALE	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const ESTALE* = cint(116)$/;"	t
ESTALE	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const ESTALE* = cint(133)$/;"	t
ESTALE	$NIMLIB/posix/posix_other_consts.nim	/^var ESTALE* {.importc: "ESTALE", header: "<errno.h>".}: cint$/;"	t
ETIME	$NIMLIB/posix/posix_freertos_consts.nim	/^var ETIME* {.importc: "ETIME", header: "<errno.h>".}: cint$/;"	t
ETIME	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const ETIME* = cint(62)$/;"	t
ETIME	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const ETIME* = cint(62)$/;"	t
ETIME	$NIMLIB/posix/posix_other_consts.nim	/^var ETIME* {.importc: "ETIME", header: "<errno.h>".}: cint$/;"	t
ETIMEDOUT	$NIMLIB/posix/posix_freertos_consts.nim	/^var ETIMEDOUT* {.importc: "ETIMEDOUT", header: "<errno.h>".}: cint$/;"	t
ETIMEDOUT	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const ETIMEDOUT* = cint(110)$/;"	t
ETIMEDOUT	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const ETIMEDOUT* = cint(116)$/;"	t
ETIMEDOUT	$NIMLIB/posix/posix_other_consts.nim	/^var ETIMEDOUT* {.importc: "ETIMEDOUT", header: "<errno.h>".}: cint$/;"	t
ETXTBSY	$NIMLIB/posix/posix_freertos_consts.nim	/^var ETXTBSY* {.importc: "ETXTBSY", header: "<errno.h>".}: cint$/;"	t
ETXTBSY	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const ETXTBSY* = cint(26)$/;"	t
ETXTBSY	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const ETXTBSY* = cint(26)$/;"	t
ETXTBSY	$NIMLIB/posix/posix_other_consts.nim	/^var ETXTBSY* {.importc: "ETXTBSY", header: "<errno.h>".}: cint$/;"	t
EVFILT_AIO	$NIMLIB/posix/kqueue.nim	/^    EVFILT_AIO*      = 2 ## attached to aio requests$/;"	t
EVFILT_EXCEPT	$NIMLIB/posix/kqueue.nim	/^    EVFILT_EXCEPT*   = -8  ## exceptional conditions$/;"	t
EVFILT_FS	$NIMLIB/posix/kqueue.nim	/^    EVFILT_FS*       = -9  ## filesystem events$/;"	t
EVFILT_LIO	$NIMLIB/posix/kqueue.nim	/^    EVFILT_LIO*      = -10 ## attached to lio requests$/;"	t
EVFILT_MACHPORT	$NIMLIB/posix/kqueue.nim	/^    EVFILT_MACHPORT* = -8  ## Mach portsets$/;"	t
EVFILT_PROC	$NIMLIB/posix/kqueue.nim	/^    EVFILT_PROC*     = 4 ## attached to struct proc$/;"	t
EVFILT_READ	$NIMLIB/posix/kqueue.nim	/^    EVFILT_READ*     = 0$/;"	t
EVFILT_SIGNAL	$NIMLIB/posix/kqueue.nim	/^    EVFILT_SIGNAL*   = 5 ## attached to struct proc$/;"	t
EVFILT_TIMER	$NIMLIB/posix/kqueue.nim	/^    EVFILT_TIMER*    = 6 ## timers (in ms)$/;"	t
EVFILT_USER	$NIMLIB/posix/kqueue.nim	/^    EVFILT_USER*     = -9  ## user events$/;"	t
EVFILT_VNODE	$NIMLIB/posix/kqueue.nim	/^    EVFILT_VNODE*    = 3 ## attached to vnodes$/;"	t
EVFILT_WRITE	$NIMLIB/posix/kqueue.nim	/^    EVFILT_WRITE*    = 1$/;"	t
EVP_DigestFinal_ex	$NIMLIB/wrappers/openssl.nim	/^proc EVP_DigestFinal_ex*(ctx: EVP_MD_CTX, buffer: pointer, size: ptr cuint): cint {.lcrypto.}$/;"	f
EVP_DigestInit_ex	$NIMLIB/wrappers/openssl.nim	/^proc EVP_DigestInit_ex*(ctx: EVP_MD_CTX, typ: EVP_MD, engine: SslPtr = nil): cint {.lcrypto.}$/;"	t
EVP_DigestSignFinal	$NIMLIB/wrappers/openssl.nim	/^proc EVP_DigestSignFinal*(ctx: EVP_MD_CTX, data: pointer, len: ptr csize_t): cint {.lcrypto.}$/;"	f
EVP_DigestSignInit	$NIMLIB/wrappers/openssl.nim	/^proc EVP_DigestSignInit*(ctx: EVP_MD_CTX, pctx: ptr EVP_PKEY_CTX, typ: EVP_MD, e: ENGINE, pkey: /;"	f
EVP_DigestUpdate	$NIMLIB/wrappers/openssl.nim	/^proc EVP_DigestUpdate*(ctx: EVP_MD_CTX, data: pointer, len: cuint): cint {.lcrypto.}$/;"	f
EVP_MAX_MD_SIZE	$NIMLIB/wrappers/openssl.nim	/^  EVP_MAX_MD_SIZE* = 16 + 20$/;"	t
EVP_MD	$NIMLIB/wrappers/openssl.nim	/^  EVP_MD* = SslPtr$/;"	t
EVP_MD_CTX	$NIMLIB/wrappers/openssl.nim	/^  EVP_MD_CTX* = SslPtr$/;"	t
EVP_MD_CTX_cleanup	$NIMLIB/wrappers/openssl.nim	/^  proc EVP_MD_CTX_cleanup*(ctx: EVP_MD_CTX): cint {.lcrypto.}$/;"	f
EVP_MD_CTX_create	$NIMLIB/wrappers/openssl.nim	/^  proc EVP_MD_CTX_create*(): EVP_MD_CTX {.lcrypto.}$/;"	f
EVP_MD_CTX_destroy	$NIMLIB/wrappers/openssl.nim	/^  proc EVP_MD_CTX_destroy*(ctx: EVP_MD_CTX) {.lcrypto.}$/;"	f
EVP_MD_size	$NIMLIB/wrappers/openssl.nim	/^proc EVP_MD_size*(md: EVP_MD): cint {.lcrypto.}$/;"	f
EVP_PKEY	$NIMLIB/wrappers/openssl.nim	/^  EVP_PKEY* = SslPtr$/;"	t
EVP_PKEY_CTX	$NIMLIB/wrappers/openssl.nim	/^  EVP_PKEY_CTX* = SslPtr$/;"	t
EVP_PKEY_CTX_free	$NIMLIB/wrappers/openssl.nim	/^proc EVP_PKEY_CTX_free*(pkeyCtx: EVP_PKEY_CTX) {.lcrypto.}$/;"	f
EVP_PKEY_CTX_new	$NIMLIB/wrappers/openssl.nim	/^proc EVP_PKEY_CTX_new*(pkey: EVP_PKEY, e: ENGINE): EVP_PKEY_CTX {.lcrypto.}$/;"	f
EVP_PKEY_RSA	$NIMLIB/wrappers/openssl.nim	/^  EVP_PKEY_RSA* = 6           # libssl.dll$/;"	t
EVP_PKEY_free	$NIMLIB/wrappers/openssl.nim	/^proc EVP_PKEY_free*(p: EVP_PKEY)  {.lcrypto.}$/;"	f
EVP_PKEY_sign_init	$NIMLIB/wrappers/openssl.nim	/^proc EVP_PKEY_sign_init*(c: EVP_PKEY_CTX): cint {.lcrypto.}$/;"	f
EVP_dss	$NIMLIB/wrappers/openssl.nim	/^proc EVP_dss*(): EVP_MD       {.lcrypto.}$/;"	f
EVP_dss1	$NIMLIB/wrappers/openssl.nim	/^proc EVP_dss1*(): EVP_MD      {.lcrypto.}$/;"	f
EVP_ecdsa	$NIMLIB/wrappers/openssl.nim	/^proc EVP_ecdsa*(): EVP_MD     {.lcrypto.}$/;"	f
EVP_md2	$NIMLIB/wrappers/openssl.nim	/^proc EVP_md2*(): EVP_MD       {.lcrypto.}$/;"	f
EVP_md4	$NIMLIB/wrappers/openssl.nim	/^proc EVP_md4*(): EVP_MD       {.lcrypto.}$/;"	f
EVP_md5	$NIMLIB/wrappers/openssl.nim	/^proc EVP_md5*(): EVP_MD       {.lcrypto.}$/;"	f
EVP_md_null	$NIMLIB/wrappers/openssl.nim	/^proc EVP_md_null*(): EVP_MD   {.lcrypto.}$/;"	f
EVP_mdc2	$NIMLIB/wrappers/openssl.nim	/^proc EVP_mdc2*(): EVP_MD      {.lcrypto.}$/;"	f
EVP_ripemd160	$NIMLIB/wrappers/openssl.nim	/^proc EVP_ripemd160*(): EVP_MD {.lcrypto.}$/;"	f
EVP_sha	$NIMLIB/wrappers/openssl.nim	/^proc EVP_sha*(): EVP_MD       {.lcrypto.}$/;"	f
EVP_sha1	$NIMLIB/wrappers/openssl.nim	/^proc EVP_sha1*(): EVP_MD      {.lcrypto.}$/;"	f
EVP_sha224	$NIMLIB/wrappers/openssl.nim	/^proc EVP_sha224*(): EVP_MD    {.lcrypto.}$/;"	f
EVP_sha256	$NIMLIB/wrappers/openssl.nim	/^proc EVP_sha256*(): EVP_MD    {.lcrypto.}$/;"	f
EVP_sha384	$NIMLIB/wrappers/openssl.nim	/^proc EVP_sha384*(): EVP_MD    {.lcrypto.}$/;"	f
EVP_sha512	$NIMLIB/wrappers/openssl.nim	/^proc EVP_sha512*(): EVP_MD    {.lcrypto.}$/;"	f
EVP_whirlpool	$NIMLIB/wrappers/openssl.nim	/^proc EVP_whirlpool*(): EVP_MD {.lcrypto.}$/;"	f
EV_ADD	$NIMLIB/posix/kqueue.nim	/^  EV_ADD*      = 0x0001 ## Add event to queue (implies enable).$/;"	t
EV_CLEAR	$NIMLIB/posix/kqueue.nim	/^  EV_CLEAR*    = 0x0020 ## Clear event state after reporting.$/;"	t
EV_DELETE	$NIMLIB/posix/kqueue.nim	/^  EV_DELETE*   = 0x0002 ## Delete event from queue.$/;"	t
EV_DISABLE	$NIMLIB/posix/kqueue.nim	/^  EV_DISABLE*  = 0x0008 ## Disable event (not reported).$/;"	t
EV_DISPATCH	$NIMLIB/posix/kqueue.nim	/^  EV_DISPATCH* = 0x0080 ## Disable event after reporting.$/;"	t
EV_DROP	$NIMLIB/posix/kqueue.nim	/^  EV_DROP*     = 0x1000 ## Not should be dropped$/;"	t
EV_ENABLE	$NIMLIB/posix/kqueue.nim	/^  EV_ENABLE*   = 0x0004 ## Enable event.$/;"	t
EV_EOF	$NIMLIB/posix/kqueue.nim	/^  EV_EOF*      = 0x8000 ## EOF detected$/;"	t
EV_ERROR	$NIMLIB/posix/kqueue.nim	/^  EV_ERROR*    = 0x4000 ## Error, data contains errno$/;"	t
EV_FLAG1	$NIMLIB/posix/kqueue.nim	/^  EV_FLAG1*    = 0x2000 ## Filter-specific flag$/;"	t
EV_NODATA	$NIMLIB/posix/kqueue.nim	/^  EV_NODATA*   = 0x1000 ## EOF and no more data$/;"	t
EV_ONESHOT	$NIMLIB/posix/kqueue.nim	/^  EV_ONESHOT*  = 0x0010 ## Only report one occurrence.$/;"	t
EV_RECEIPT	$NIMLIB/posix/kqueue.nim	/^  EV_RECEIPT*  = 0x0040 ## Force EV_ERROR on success, data == 0$/;"	t
EV_SET	$NIMLIB/posix/kqueue.nim	/^proc EV_SET*(event: ptr KEvent, ident: uint, filter: cshort, flags: cushort,$/;"	f
EV_SYSFLAGS	$NIMLIB/posix/kqueue.nim	/^  EV_SYSFLAGS* = 0xF000 ## Reserved by system$/;"	t
EWOULDBLOCK	$NIMLIB/posix/posix_freertos_consts.nim	/^var EWOULDBLOCK* {.importc: "EWOULDBLOCK", header: "<errno.h>".}: cint$/;"	t
EWOULDBLOCK	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const EWOULDBLOCK* = cint(11)$/;"	t
EWOULDBLOCK	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const EWOULDBLOCK* = cint(11)$/;"	t
EWOULDBLOCK	$NIMLIB/posix/posix_other_consts.nim	/^var EWOULDBLOCK* {.importc: "EWOULDBLOCK", header: "<errno.h>".}: cint$/;"	t
EXDEV	$NIMLIB/posix/posix_freertos_consts.nim	/^var EXDEV* {.importc: "EXDEV", header: "<errno.h>".}: cint$/;"	t
EXDEV	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const EXDEV* = cint(18)$/;"	t
EXDEV	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const EXDEV* = cint(18)$/;"	t
EXDEV	$NIMLIB/posix/posix_other_consts.nim	/^var EXDEV* {.importc: "EXDEV", header: "<errno.h>".}: cint$/;"	t
EXTA	$NIMLIB/posix/termios.nim	/^  EXTA* {.importc, header: "<termios.h>".}: Speed$/;"	t
EXTB	$NIMLIB/posix/termios.nim	/^  EXTB* {.importc, header: "<termios.h>".}: Speed$/;"	t
EXTENDED	$NIMLIB/wrappers/pcre.nim	/^  EXTENDED*          = 0x00000008  # C1$/;"	t
EXTRA	$NIMLIB/wrappers/pcre.nim	/^  EXTRA*             = 0x00000040  # C1$/;"	t
EXTRA_CALLOUT_DATA	$NIMLIB/wrappers/pcre.nim	/^  EXTRA_CALLOUT_DATA*          = 0x0004$/;"	t
EXTRA_EXECUTABLE_JIT	$NIMLIB/wrappers/pcre.nim	/^  EXTRA_EXECUTABLE_JIT*        = 0x0040$/;"	t
EXTRA_MARK	$NIMLIB/wrappers/pcre.nim	/^  EXTRA_MARK*                  = 0x0020$/;"	t
EXTRA_MATCH_LIMIT	$NIMLIB/wrappers/pcre.nim	/^  EXTRA_MATCH_LIMIT*           = 0x0002$/;"	t
EXTRA_MATCH_LIMIT_RECURSION	$NIMLIB/wrappers/pcre.nim	/^  EXTRA_MATCH_LIMIT_RECURSION* = 0x0010$/;"	t
EXTRA_STUDY_DATA	$NIMLIB/wrappers/pcre.nim	/^  EXTRA_STUDY_DATA*            = 0x0001$/;"	t
EXTRA_TABLES	$NIMLIB/wrappers/pcre.nim	/^  EXTRA_TABLES*                = 0x0008$/;"	t
Element	$NIMLIB/js/dom.nim	/^  Element* {.importc.} = ref object of Node$/;"	t
EmbedElement	$NIMLIB/js/dom.nim	/^  EmbedElement* {.importc.} = ref object of Element$/;"	t
EncodingConverter	$NIMLIB/pure/encodings.nim	/^    EncodingConverter* = ptr ConverterObj ## Can convert between two character sets.$/;"	t
EncodingError	$NIMLIB/pure/encodings.nim	/^  EncodingError* = object of ValueError ## Exception that is raised$/;"	t
EndOfFile	$NIMLIB/pure/lexbase.nim	/^  EndOfFile* = '\\0' ## end of file marker$/;"	t
Endianness	$NIMLIB/system.nim	/^  Endianness* = enum ## Type describing the endianness of a processor.$/;"	t
Entrypoint	$NIMLIB/genode/entrypoints.nim	/^  Entrypoint* = ptr EntrypointObj$/;"	t
EnumMode	$NIMLIB/std/jsonutils.nim	/^  EnumMode* = enum$/;"	t
EpollEvent	$NIMLIB/posix/epoll.nim	/^  EpollEvent* {.importc: "struct epoll_event", header: "<sys\/epoll.h>", pure, final, epollPacke/;"	t
ErrClearError	$NIMLIB/wrappers/openssl.nim	/^proc ErrClearError*(){.cdecl, dynlib: DLLUtilName, importc: "ERR_clear_error".}$/;"	f
ErrFreeStrings	$NIMLIB/wrappers/openssl.nim	/^proc ErrFreeStrings*(){.cdecl, dynlib: DLLUtilName, importc: "ERR_free_strings".}$/;"	f
ErrRemoveState	$NIMLIB/wrappers/openssl.nim	/^proc ErrRemoveState*(pid: cint){.cdecl, dynlib: DLLUtilName, importc: "ERR_remove_state".}$/;"	f
Error	$NIMLIB/js/asyncjs.nim	/^  type Error*  {.importjs: "Error".} = ref object of JsRoot$/;"	t
ErrorFunc	$NIMLIB/wrappers/tinyc.nim	/^  ErrorFunc* = proc (opaque: pointer, msg: cstring) {.cdecl.}$/;"	t
EscapeMode	$NIMLIB/packages/docutils/rstgen.nim	/^  EscapeMode* = enum  # in Latex text inside options [] and URLs is$/;"	t
Event	$NIMLIB/js/dom.nim	/^  Event* {.importc.} = ref object of RootObj ## see `docs<https:\/\/developer.mozilla.org\/en-US/;"	t
Event	$NIMLIB/pure/selectors.nim	/^    Event* {.pure.} = enum$/;"	t
EventPhase	$NIMLIB/js/dom.nim	/^  EventPhase* = enum$/;"	t
EventTarget	$NIMLIB/js/dom.nim	/^  EventTarget* {.importc.} = ref object of RootObj$/;"	t
Exception	$NIMLIB/system.nim	/^  Exception* {.compilerproc, magic: "Exception".} = object of RootObj ## \\$/;"	t
ExeExt	$NIMLIB/std/private/osseps.nim	/^  ExeExt* =$/;"	t
ExeExts	$NIMLIB/pure/os.nim	/^  ExeExts* = ## Platform specific file extension for executables.$/;"	t
ExecIOEffect	$NIMLIB/system/exceptions.nim	/^  ExecIOEffect* = object of IOEffect   ## Effect describing an executing IO operation.$/;"	t
ExtSep	$NIMLIB/std/private/osseps.nim	/^  ExtSep* = '.'$/;"	t
ExtraData	$NIMLIB/wrappers/pcre.nim	/^  ExtraData* = object$/;"	t
FD_ACCEPT	$NIMLIB/windows/winlean.nim	/^  FD_ACCEPT* = 0x00000008'i32$/;"	t
FD_ADDRESS_LIST_CHANGE	$NIMLIB/windows/winlean.nim	/^  FD_ADDRESS_LIST_CHANGE* = 0x00000200'i32$/;"	t
FD_ALL_EVENTS	$NIMLIB/windows/winlean.nim	/^  FD_ALL_EVENTS* = 0x000003FF'i32$/;"	t
FD_CLOEXEC	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const FD_CLOEXEC* = cint(1)$/;"	t
FD_CLOEXEC	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const FD_CLOEXEC* = cint(1)$/;"	t
FD_CLOEXEC	$NIMLIB/posix/posix_other_consts.nim	/^var FD_CLOEXEC* {.importc: "FD_CLOEXEC", header: "<fcntl.h>".}: cint$/;"	t
FD_CLOSE	$NIMLIB/windows/winlean.nim	/^  FD_CLOSE* = 0x00000020'i32$/;"	t
FD_CLR	$NIMLIB/posix/posix.nim	/^proc FD_CLR*(a1: cint, a2: var TFdSet) {.importc, header: "<sys\/select.h>".}$/;"	f
FD_CONNECT	$NIMLIB/windows/winlean.nim	/^  FD_CONNECT* = 0x00000010'i32$/;"	t
FD_GROUP_QQS	$NIMLIB/windows/winlean.nim	/^  FD_GROUP_QQS* = 0x00000080'i32$/;"	t
FD_ISSET	$NIMLIB/posix/posix.nim	/^proc FD_ISSET*(a1: cint | SocketHandle, a2: var TFdSet): cint {.$/;"	f
FD_ISSET	$NIMLIB/windows/winlean.nim	/^proc FD_ISSET*(socket: SocketHandle, set: var TFdSet): cint =$/;"	t
FD_MAX	$NIMLIB/posix/posix_freertos_consts.nim	/^var FD_MAX* {.importc: "CONFIG_LWIP_MAX_SOCKETS", header: "<lwipopts.h>".}: cint$/;"	t
FD_MAX	$NIMLIB/posix/posix_other_consts.nim	/^  var FD_MAX* {.importc: "CONFIG_POSIX_MAX_FDS ", header: "<sys\/select.h>".}: cint$/;"	t
FD_OOB	$NIMLIB/windows/winlean.nim	/^  FD_OOB* = 0x00000004'i32$/;"	t
FD_QQS	$NIMLIB/windows/winlean.nim	/^  FD_QQS* = 0x00000040'i32$/;"	t
FD_READ	$NIMLIB/windows/winlean.nim	/^  FD_READ* = 0x00000001'i32$/;"	t
FD_ROUTING_INTERFACE_CHANGE	$NIMLIB/windows/winlean.nim	/^  FD_ROUTING_INTERFACE_CHANGE* = 0x00000100'i32$/;"	t
FD_SET	$NIMLIB/posix/posix.nim	/^proc FD_SET*(a1: cint | SocketHandle, a2: var TFdSet) {.$/;"	f
FD_SET	$NIMLIB/windows/winlean.nim	/^proc FD_SET*(socket: SocketHandle, s: var TFdSet) =$/;"	t
FD_SETSIZE	$NIMLIB/posix/posix_freertos_consts.nim	/^var FD_SETSIZE* {.importc: "FD_SETSIZE", header: "<sys\/select.h>".}: cint$/;"	t
FD_SETSIZE	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const FD_SETSIZE* = cint(1024)$/;"	t
FD_SETSIZE	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const FD_SETSIZE* = cint(64)$/;"	t
FD_SETSIZE	$NIMLIB/posix/posix_other_consts.nim	/^var FD_SETSIZE* {.importc: "FD_SETSIZE", header: "<sys\/select.h>".}: cint$/;"	t
FD_SETSIZE	$NIMLIB/windows/winlean.nim	/^  FD_SETSIZE* = 64$/;"	t
FD_WRITE	$NIMLIB/windows/winlean.nim	/^  FD_WRITE* = 0x00000002'i32$/;"	t
FD_ZERO	$NIMLIB/posix/posix.nim	/^proc FD_ZERO*(a1: var TFdSet) {.importc, header: "<sys\/select.h>".}$/;"	f
FD_ZERO	$NIMLIB/windows/winlean.nim	/^proc FD_ZERO*(s: var TFdSet) =$/;"	t
FE_ALL_EXCEPT	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const FE_ALL_EXCEPT* = cint(61)$/;"	t
FE_ALL_EXCEPT	$NIMLIB/posix/posix_other_consts.nim	/^var FE_ALL_EXCEPT* {.importc: "FE_ALL_EXCEPT", header: "<fenv.h>".}: cint$/;"	t
FE_ALL_EXCEPT	$NIMLIB/pure/fenv.nim	/^  FE_ALL_EXCEPT* {.importc, header: "<fenv.h>".}: cint$/;"	t
FE_DFL_ENV	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const FE_DFL_ENV* = cint(-1)$/;"	t
FE_DFL_ENV	$NIMLIB/posix/posix_other_consts.nim	/^var FE_DFL_ENV* {.importc: "FE_DFL_ENV", header: "<fenv.h>".}: cint$/;"	t
FE_DFL_ENV	$NIMLIB/pure/fenv.nim	/^  FE_DFL_ENV* {.importc, header: "<fenv.h>".}: cint$/;"	t
FE_DIVBYZERO	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const FE_DIVBYZERO* = cint(4)$/;"	t
FE_DIVBYZERO	$NIMLIB/posix/posix_other_consts.nim	/^var FE_DIVBYZERO* {.importc: "FE_DIVBYZERO", header: "<fenv.h>".}: cint$/;"	t
FE_DIVBYZERO	$NIMLIB/pure/fenv.nim	/^  FE_DIVBYZERO* {.importc, header: "<fenv.h>".}: cint$/;"	t
FE_DOWNWARD	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const FE_DOWNWARD* = cint(1024)$/;"	t
FE_DOWNWARD	$NIMLIB/posix/posix_other_consts.nim	/^var FE_DOWNWARD* {.importc: "FE_DOWNWARD", header: "<fenv.h>".}: cint$/;"	t
FE_DOWNWARD	$NIMLIB/pure/fenv.nim	/^  FE_DOWNWARD* {.importc, header: "<fenv.h>".}: cint$/;"	t
FE_INEXACT	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const FE_INEXACT* = cint(32)$/;"	t
FE_INEXACT	$NIMLIB/posix/posix_other_consts.nim	/^var FE_INEXACT* {.importc: "FE_INEXACT", header: "<fenv.h>".}: cint$/;"	t
FE_INEXACT	$NIMLIB/pure/fenv.nim	/^  FE_INEXACT* {.importc, header: "<fenv.h>".}: cint$/;"	t
FE_INVALID	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const FE_INVALID* = cint(1)$/;"	t
FE_INVALID	$NIMLIB/posix/posix_other_consts.nim	/^var FE_INVALID* {.importc: "FE_INVALID", header: "<fenv.h>".}: cint$/;"	t
FE_INVALID	$NIMLIB/pure/fenv.nim	/^  FE_INVALID* {.importc, header: "<fenv.h>".}: cint$/;"	t
FE_OVERFLOW	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const FE_OVERFLOW* = cint(8)$/;"	t
FE_OVERFLOW	$NIMLIB/posix/posix_other_consts.nim	/^var FE_OVERFLOW* {.importc: "FE_OVERFLOW", header: "<fenv.h>".}: cint$/;"	t
FE_OVERFLOW	$NIMLIB/pure/fenv.nim	/^  FE_OVERFLOW* {.importc, header: "<fenv.h>".}: cint$/;"	t
FE_TONEAREST	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const FE_TONEAREST* = cint(0)$/;"	t
FE_TONEAREST	$NIMLIB/posix/posix_other_consts.nim	/^var FE_TONEAREST* {.importc: "FE_TONEAREST", header: "<fenv.h>".}: cint$/;"	t
FE_TONEAREST	$NIMLIB/pure/fenv.nim	/^  FE_TONEAREST* {.importc, header: "<fenv.h>".}: cint$/;"	t
FE_TOWARDZERO	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const FE_TOWARDZERO* = cint(3072)$/;"	t
FE_TOWARDZERO	$NIMLIB/posix/posix_other_consts.nim	/^var FE_TOWARDZERO* {.importc: "FE_TOWARDZERO", header: "<fenv.h>".}: cint$/;"	t
FE_TOWARDZERO	$NIMLIB/pure/fenv.nim	/^  FE_TOWARDZERO* {.importc, header: "<fenv.h>".}: cint$/;"	t
FE_UNDERFLOW	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const FE_UNDERFLOW* = cint(16)$/;"	t
FE_UNDERFLOW	$NIMLIB/posix/posix_other_consts.nim	/^var FE_UNDERFLOW* {.importc: "FE_UNDERFLOW", header: "<fenv.h>".}: cint$/;"	t
FE_UNDERFLOW	$NIMLIB/pure/fenv.nim	/^  FE_UNDERFLOW* {.importc, header: "<fenv.h>".}: cint$/;"	t
FE_UPWARD	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const FE_UPWARD* = cint(2048)$/;"	t
FE_UPWARD	$NIMLIB/posix/posix_other_consts.nim	/^var FE_UPWARD* {.importc: "FE_UPWARD", header: "<fenv.h>".}: cint$/;"	t
FE_UPWARD	$NIMLIB/pure/fenv.nim	/^  FE_UPWARD* {.importc, header: "<fenv.h>".}: cint$/;"	t
FF0	$NIMLIB/posix/termios.nim	/^  FF0* {.importc, header: "<termios.h>".}: Cflag$/;"	t
FF1	$NIMLIB/posix/termios.nim	/^  FF1* {.importc, header: "<termios.h>".}: Cflag$/;"	t
FFDLY	$NIMLIB/posix/termios.nim	/^  FFDLY* {.importc, header: "<termios.h>".}: Cflag$/;"	t
FIBER_FLAG_FLOAT_SWITCH	$NIMLIB/windows/winlean.nim	/^  FIBER_FLAG_FLOAT_SWITCH* = 0x01$/;"	t
FILETIME	$NIMLIB/windows/winlean.nim	/^  FILETIME* = object ## CANNOT BE int64 BECAUSE OF ALIGNMENT$/;"	t
FILE_ATTRIBUTE_ARCHIVE	$NIMLIB/windows/winlean.nim	/^  FILE_ATTRIBUTE_ARCHIVE* = 0x00000020'i32$/;"	t
FILE_ATTRIBUTE_COMPRESSED	$NIMLIB/windows/winlean.nim	/^  FILE_ATTRIBUTE_COMPRESSED* = 0x00000800'i32$/;"	t
FILE_ATTRIBUTE_DEVICE	$NIMLIB/windows/winlean.nim	/^  FILE_ATTRIBUTE_DEVICE* = 0x00000040'i32$/;"	t
FILE_ATTRIBUTE_DIRECTORY	$NIMLIB/windows/winlean.nim	/^  FILE_ATTRIBUTE_DIRECTORY* = 0x00000010'i32$/;"	t
FILE_ATTRIBUTE_HIDDEN	$NIMLIB/windows/winlean.nim	/^  FILE_ATTRIBUTE_HIDDEN* = 0x00000002'i32$/;"	t
FILE_ATTRIBUTE_NORMAL	$NIMLIB/windows/winlean.nim	/^  FILE_ATTRIBUTE_NORMAL* = 0x00000080'i32$/;"	t
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED	$NIMLIB/windows/winlean.nim	/^  FILE_ATTRIBUTE_NOT_CONTENT_INDEXED* = 0x00002000'i32$/;"	t
FILE_ATTRIBUTE_OFFLINE	$NIMLIB/windows/winlean.nim	/^  FILE_ATTRIBUTE_OFFLINE* = 0x00001000'i32$/;"	t
FILE_ATTRIBUTE_READONLY	$NIMLIB/windows/winlean.nim	/^  FILE_ATTRIBUTE_READONLY* = 0x00000001'i32$/;"	t
FILE_ATTRIBUTE_REPARSE_POINT	$NIMLIB/windows/winlean.nim	/^  FILE_ATTRIBUTE_REPARSE_POINT* = 0x00000400'i32$/;"	t
FILE_ATTRIBUTE_SPARSE_FILE	$NIMLIB/windows/winlean.nim	/^  FILE_ATTRIBUTE_SPARSE_FILE* = 0x00000200'i32$/;"	t
FILE_ATTRIBUTE_SYSTEM	$NIMLIB/windows/winlean.nim	/^  FILE_ATTRIBUTE_SYSTEM* = 0x00000004'i32$/;"	t
FILE_ATTRIBUTE_TEMPORARY	$NIMLIB/windows/winlean.nim	/^  FILE_ATTRIBUTE_TEMPORARY* = 0x00000100'i32$/;"	t
FILE_BEGIN	$NIMLIB/windows/winlean.nim	/^  FILE_BEGIN* = 0'i32$/;"	t
FILE_FLAG_BACKUP_SEMANTICS	$NIMLIB/windows/winlean.nim	/^  FILE_FLAG_BACKUP_SEMANTICS* = 0x02000000'i32$/;"	t
FILE_FLAG_DELETE_ON_CLOSE	$NIMLIB/windows/winlean.nim	/^  FILE_FLAG_DELETE_ON_CLOSE* = 0x04000000'i32$/;"	t
FILE_FLAG_FIRST_PIPE_INSTANCE	$NIMLIB/windows/winlean.nim	/^  FILE_FLAG_FIRST_PIPE_INSTANCE* = 0x00080000'i32$/;"	t
FILE_FLAG_NO_BUFFERING	$NIMLIB/windows/winlean.nim	/^  FILE_FLAG_NO_BUFFERING* = 0x20000000'i32$/;"	t
FILE_FLAG_OPEN_NO_RECALL	$NIMLIB/windows/winlean.nim	/^  FILE_FLAG_OPEN_NO_RECALL* = 0x00100000'i32$/;"	t
FILE_FLAG_OPEN_REPARSE_POINT	$NIMLIB/windows/winlean.nim	/^  FILE_FLAG_OPEN_REPARSE_POINT* = 0x00200000'i32$/;"	t
FILE_FLAG_OVERLAPPED	$NIMLIB/windows/winlean.nim	/^  FILE_FLAG_OVERLAPPED* = 0x40000000'i32$/;"	t
FILE_FLAG_POSIX_SEMANTICS	$NIMLIB/windows/winlean.nim	/^  FILE_FLAG_POSIX_SEMANTICS* = 0x01000000'i32$/;"	t
FILE_FLAG_RANDOM_ACCESS	$NIMLIB/windows/winlean.nim	/^  FILE_FLAG_RANDOM_ACCESS* = 0x10000000'i32$/;"	t
FILE_FLAG_SEQUENTIAL_SCAN	$NIMLIB/windows/winlean.nim	/^  FILE_FLAG_SEQUENTIAL_SCAN* = 0x08000000'i32$/;"	t
FILE_FLAG_WRITE_THROUGH	$NIMLIB/windows/winlean.nim	/^  FILE_FLAG_WRITE_THROUGH* = 0x80000000'i32$/;"	t
FILE_MAP_READ	$NIMLIB/windows/winlean.nim	/^  FILE_MAP_READ* = 4'i32$/;"	t
FILE_MAP_WRITE	$NIMLIB/windows/winlean.nim	/^  FILE_MAP_WRITE* = 2'i32$/;"	t
FILE_READ_DATA	$NIMLIB/windows/winlean.nim	/^  FILE_READ_DATA* = 0x00000001 # file & pipe$/;"	t
FILE_SHARE_DELETE	$NIMLIB/windows/winlean.nim	/^  FILE_SHARE_DELETE* = 4'i32$/;"	t
FILE_SHARE_READ	$NIMLIB/windows/winlean.nim	/^  FILE_SHARE_READ* = 1'i32$/;"	t
FILE_SHARE_WRITE	$NIMLIB/windows/winlean.nim	/^  FILE_SHARE_WRITE* = 2'i32$/;"	t
FILE_WRITE_DATA	$NIMLIB/windows/winlean.nim	/^  FILE_WRITE_DATA* = 0x00000002 # file & pipe$/;"	t
FIONBIO	$NIMLIB/pure/nativesockets.nim	/^    FIONBIO* = IOC_IN.int32 or ((sizeof(int32) and IOCPARM_MASK) shl 16) or$/;"	t
FIRSTLINE	$NIMLIB/wrappers/pcre.nim	/^  FIRSTLINE*         = 0x00040000  # C3$/;"	t
FNM_NOESCAPE	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const FNM_NOESCAPE* = cint(2)$/;"	t
FNM_NOESCAPE	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const FNM_NOESCAPE* = cint(1)$/;"	t
FNM_NOESCAPE	$NIMLIB/posix/posix_other_consts.nim	/^var FNM_NOESCAPE* {.importc: "FNM_NOESCAPE", header: "<fnmatch.h>".}: cint$/;"	t
FNM_NOMATCH	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const FNM_NOMATCH* = cint(1)$/;"	t
FNM_NOMATCH	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const FNM_NOMATCH* = cint(1)$/;"	t
FNM_NOMATCH	$NIMLIB/posix/posix_other_consts.nim	/^var FNM_NOMATCH* {.importc: "FNM_NOMATCH", header: "<fnmatch.h>".}: cint$/;"	t
FNM_NOSYS	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const FNM_NOSYS* = cint(-1)$/;"	t
FNM_NOSYS	$NIMLIB/posix/posix_other_consts.nim	/^var FNM_NOSYS* {.importc: "FNM_NOSYS", header: "<fnmatch.h>".}: cint$/;"	t
FNM_PATHNAME	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const FNM_PATHNAME* = cint(1)$/;"	t
FNM_PATHNAME	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const FNM_PATHNAME* = cint(2)$/;"	t
FNM_PATHNAME	$NIMLIB/posix/posix_other_consts.nim	/^var FNM_PATHNAME* {.importc: "FNM_PATHNAME", header: "<fnmatch.h>".}: cint$/;"	t
FNM_PERIOD	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const FNM_PERIOD* = cint(4)$/;"	t
FNM_PERIOD	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const FNM_PERIOD* = cint(4)$/;"	t
FNM_PERIOD	$NIMLIB/posix/posix_other_consts.nim	/^var FNM_PERIOD* {.importc: "FNM_PERIOD", header: "<fnmatch.h>".}: cint$/;"	t
FTW	$NIMLIB/posix/posix_haiku.nim	/^  FTW* {.importc: "struct FTW", header: "<ftw.h>", final, pure.} = object$/;"	t
FTW	$NIMLIB/posix/posix_macos_amd64.nim	/^  FTW* {.importc: "struct FTW", header: "<ftw.h>", final, pure.} = object$/;"	t
FTW	$NIMLIB/posix/posix_openbsd_amd64.nim	/^  FTW* {.importc: "struct FTW", header: "<ftw.h>", final, pure.} = object$/;"	t
FTW	$NIMLIB/posix/posix_other.nim	/^  FTW* {.importc: "struct FTW", header: "<ftw.h>", final, pure.} = object$/;"	t
FTW_CHDIR	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const FTW_CHDIR* = cint(4)$/;"	t
FTW_CHDIR	$NIMLIB/posix/posix_other_consts.nim	/^var FTW_CHDIR* {.importc: "FTW_CHDIR", header: "<ftw.h>".}: cint$/;"	t
FTW_D	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const FTW_D* = cint(1)$/;"	t
FTW_D	$NIMLIB/posix/posix_other_consts.nim	/^var FTW_D* {.importc: "FTW_D", header: "<ftw.h>".}: cint$/;"	t
FTW_DEPTH	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const FTW_DEPTH* = cint(8)$/;"	t
FTW_DEPTH	$NIMLIB/posix/posix_other_consts.nim	/^var FTW_DEPTH* {.importc: "FTW_DEPTH", header: "<ftw.h>".}: cint$/;"	t
FTW_DNR	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const FTW_DNR* = cint(2)$/;"	t
FTW_DNR	$NIMLIB/posix/posix_other_consts.nim	/^var FTW_DNR* {.importc: "FTW_DNR", header: "<ftw.h>".}: cint$/;"	t
FTW_DP	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const FTW_DP* = cint(5)$/;"	t
FTW_DP	$NIMLIB/posix/posix_other_consts.nim	/^var FTW_DP* {.importc: "FTW_DP", header: "<ftw.h>".}: cint$/;"	t
FTW_F	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const FTW_F* = cint(0)$/;"	t
FTW_F	$NIMLIB/posix/posix_other_consts.nim	/^var FTW_F* {.importc: "FTW_F", header: "<ftw.h>".}: cint$/;"	t
FTW_MOUNT	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const FTW_MOUNT* = cint(2)$/;"	t
FTW_MOUNT	$NIMLIB/posix/posix_other_consts.nim	/^var FTW_MOUNT* {.importc: "FTW_MOUNT", header: "<ftw.h>".}: cint$/;"	t
FTW_NS	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const FTW_NS* = cint(3)$/;"	t
FTW_NS	$NIMLIB/posix/posix_other_consts.nim	/^var FTW_NS* {.importc: "FTW_NS", header: "<ftw.h>".}: cint$/;"	t
FTW_PHYS	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const FTW_PHYS* = cint(1)$/;"	t
FTW_PHYS	$NIMLIB/posix/posix_other_consts.nim	/^var FTW_PHYS* {.importc: "FTW_PHYS", header: "<ftw.h>".}: cint$/;"	t
FTW_SL	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const FTW_SL* = cint(4)$/;"	t
FTW_SL	$NIMLIB/posix/posix_other_consts.nim	/^var FTW_SL* {.importc: "FTW_SL", header: "<ftw.h>".}: cint$/;"	t
FTW_SLN	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const FTW_SLN* = cint(6)$/;"	t
FTW_SLN	$NIMLIB/posix/posix_other_consts.nim	/^var FTW_SLN* {.importc: "FTW_SLN", header: "<ftw.h>".}: cint$/;"	t
F_DUPFD	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const F_DUPFD* = cint(0)$/;"	t
F_DUPFD	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const F_DUPFD* = cint(0)$/;"	t
F_DUPFD	$NIMLIB/posix/posix_other_consts.nim	/^var F_DUPFD* {.importc: "F_DUPFD", header: "<fcntl.h>".}: cint$/;"	t
F_DUPFD_CLOEXEC	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const F_DUPFD_CLOEXEC* = cint(1030)$/;"	t
F_DUPFD_CLOEXEC	$NIMLIB/posix/posix_other_consts.nim	/^  var F_DUPFD_CLOEXEC* {.importc: "F_DUPFD_CLOEXEC", header: "<fcntl.h>".}: cint$/;"	t
F_GETFD	$NIMLIB/posix/posix_freertos_consts.nim	/^var F_GETFD* {.importc: "F_GETFD", header: "<sys\/fcntl.h>".}: cint$/;"	t
F_GETFD	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const F_GETFD* = cint(1)$/;"	t
F_GETFD	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const F_GETFD* = cint(1)$/;"	t
F_GETFD	$NIMLIB/posix/posix_other_consts.nim	/^var F_GETFD* {.importc: "F_GETFD", header: "<fcntl.h>".}: cint$/;"	t
F_GETFL	$NIMLIB/posix/posix_freertos_consts.nim	/^var F_GETFL* {.importc: "F_GETFL", header: "<sys\/fcntl.h>".}: cint$/;"	t
F_GETFL	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const F_GETFL* = cint(3)$/;"	t
F_GETFL	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const F_GETFL* = cint(3)$/;"	t
F_GETFL	$NIMLIB/posix/posix_other_consts.nim	/^var F_GETFL* {.importc: "F_GETFL", header: "<fcntl.h>".}: cint$/;"	t
F_GETLK	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const F_GETLK* = cint(5)$/;"	t
F_GETLK	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const F_GETLK* = cint(7)$/;"	t
F_GETLK	$NIMLIB/posix/posix_other_consts.nim	/^var F_GETLK* {.importc: "F_GETLK", header: "<fcntl.h>".}: cint$/;"	t
F_GETOWN	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const F_GETOWN* = cint(9)$/;"	t
F_GETOWN	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const F_GETOWN* = cint(5)$/;"	t
F_GETOWN	$NIMLIB/posix/posix_other_consts.nim	/^var F_GETOWN* {.importc: "F_GETOWN", header: "<fcntl.h>".}: cint$/;"	t
F_LOCK	$NIMLIB/posix/posix_freertos_consts.nim	/^const F_LOCK* = cint(1)$/;"	t
F_LOCK	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const F_LOCK* = cint(1)$/;"	t
F_LOCK	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const F_LOCK* = cint(1)$/;"	t
F_LOCK	$NIMLIB/posix/posix_other_consts.nim	/^var F_LOCK* {.importc: "F_LOCK", header: "<unistd.h>".}: cint$/;"	t
F_OK	$NIMLIB/posix/posix_freertos_consts.nim	/^const F_OK* = cint(0)$/;"	t
F_OK	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const F_OK* = cint(0)$/;"	t
F_OK	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const F_OK* = cint(0)$/;"	t
F_OK	$NIMLIB/posix/posix_other_consts.nim	/^var F_OK* {.importc: "F_OK", header: "<unistd.h>".}: cint$/;"	t
F_RDLCK	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const F_RDLCK* = cint(0)$/;"	t
F_RDLCK	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const F_RDLCK* = cint(1)$/;"	t
F_RDLCK	$NIMLIB/posix/posix_other_consts.nim	/^var F_RDLCK* {.importc: "F_RDLCK", header: "<fcntl.h>".}: cint$/;"	t
F_SETFD	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const F_SETFD* = cint(2)$/;"	t
F_SETFD	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const F_SETFD* = cint(2)$/;"	t
F_SETFD	$NIMLIB/posix/posix_other_consts.nim	/^var F_SETFD* {.importc: "F_SETFD", header: "<fcntl.h>".}: cint$/;"	t
F_SETFL	$NIMLIB/posix/posix_freertos_consts.nim	/^var F_SETFL* {.importc: "F_SETFL", header: "<sys\/fcntl.h>".}: cint$/;"	t
F_SETFL	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const F_SETFL* = cint(4)$/;"	t
F_SETFL	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const F_SETFL* = cint(4)$/;"	t
F_SETFL	$NIMLIB/posix/posix_other_consts.nim	/^var F_SETFL* {.importc: "F_SETFL", header: "<fcntl.h>".}: cint$/;"	t
F_SETLK	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const F_SETLK* = cint(6)$/;"	t
F_SETLK	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const F_SETLK* = cint(8)$/;"	t
F_SETLK	$NIMLIB/posix/posix_other_consts.nim	/^var F_SETLK* {.importc: "F_SETLK", header: "<fcntl.h>".}: cint$/;"	t
F_SETLKW	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const F_SETLKW* = cint(7)$/;"	t
F_SETLKW	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const F_SETLKW* = cint(9)$/;"	t
F_SETLKW	$NIMLIB/posix/posix_other_consts.nim	/^var F_SETLKW* {.importc: "F_SETLKW", header: "<fcntl.h>".}: cint$/;"	t
F_SETOWN	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const F_SETOWN* = cint(8)$/;"	t
F_SETOWN	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const F_SETOWN* = cint(6)$/;"	t
F_SETOWN	$NIMLIB/posix/posix_other_consts.nim	/^var F_SETOWN* {.importc: "F_SETOWN", header: "<fcntl.h>".}: cint$/;"	t
F_TEST	$NIMLIB/posix/posix_freertos_consts.nim	/^const F_TEST* = cint(3)$/;"	t
F_TEST	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const F_TEST* = cint(3)$/;"	t
F_TEST	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const F_TEST* = cint(3)$/;"	t
F_TEST	$NIMLIB/posix/posix_other_consts.nim	/^var F_TEST* {.importc: "F_TEST", header: "<unistd.h>".}: cint$/;"	t
F_TLOCK	$NIMLIB/posix/posix_freertos_consts.nim	/^const F_TLOCK* = cint(2)$/;"	t
F_TLOCK	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const F_TLOCK* = cint(2)$/;"	t
F_TLOCK	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const F_TLOCK* = cint(2)$/;"	t
F_TLOCK	$NIMLIB/posix/posix_other_consts.nim	/^var F_TLOCK* {.importc: "F_TLOCK", header: "<unistd.h>".}: cint$/;"	t
F_ULOCK	$NIMLIB/posix/posix_freertos_consts.nim	/^const F_ULOCK* = cint(0)$/;"	t
F_ULOCK	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const F_ULOCK* = cint(0)$/;"	t
F_ULOCK	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const F_ULOCK* = cint(0)$/;"	t
F_ULOCK	$NIMLIB/posix/posix_other_consts.nim	/^var F_ULOCK* {.importc: "F_ULOCK", header: "<unistd.h>".}: cint$/;"	t
F_UNLCK	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const F_UNLCK* = cint(2)$/;"	t
F_UNLCK	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const F_UNLCK* = cint(3)$/;"	t
F_UNLCK	$NIMLIB/posix/posix_other_consts.nim	/^var F_UNLCK* {.importc: "F_UNLCK", header: "<fcntl.h>".}: cint$/;"	t
F_WRLCK	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const F_WRLCK* = cint(1)$/;"	t
F_WRLCK	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const F_WRLCK* = cint(2)$/;"	t
F_WRLCK	$NIMLIB/posix/posix_other_consts.nim	/^var F_WRLCK* {.importc: "F_WRLCK", header: "<fcntl.h>".}: cint$/;"	t
FetchCaches	$NIMLIB/std/jsfetch.nim	/^  FetchCaches* = enum  ## https:\/\/developer.mozilla.org\/docs\/Web\/API\/Request\/cache$/;"	t
FetchCredentials	$NIMLIB/std/jsfetch.nim	/^  FetchCredentials* = enum  ## Credential options. See https:\/\/developer.mozilla.org\/en-US\/d/;"	t
FetchModes	$NIMLIB/std/jsfetch.nim	/^  FetchModes* = enum  ## Mode options.$/;"	t
FetchOptions	$NIMLIB/std/jsfetch.nim	/^  FetchOptions* = ref object of JsRoot  ## Options for Fetch API.$/;"	t
FetchRedirects	$NIMLIB/std/jsfetch.nim	/^  FetchRedirects* = enum  ## Redirects options.$/;"	t
FetchReferrerPolicies	$NIMLIB/std/jsfetch.nim	/^  FetchReferrerPolicies* = enum  ## Referrer Policy options.$/;"	t
FieldDefect	$NIMLIB/system/exceptions.nim	/^  FieldDefect* = object of Defect ## \\$/;"	t
FieldError	$NIMLIB/system/exceptions.nim	/^    FieldError* {.deprecated: "See corresponding Defect".} = FieldDefect$/;"	t
File	$NIMLIB/js/dom.nim	/^  File* {.importc.} = ref object of Blob ## see `docs<https:\/\/developer.mozilla.org\/en-US\/do/;"	t
File	$NIMLIB/std/syncio.nim	/^  File* = ptr CFile ## The type representing a file handle.$/;"	t
FileHandle	$NIMLIB/std/syncio.nim	/^  FileHandle* = cint ## type that represents an OS file handle; this is$/;"	t
FileHandleStream	$NIMLIB/pure/streams.nim	/^    FileHandleStream* = ref FileHandleStreamObj$/;"	t
FileHandleStreamObj	$NIMLIB/pure/streams.nim	/^    FileHandleStreamObj* = object of Stream$/;"	t
FileId	$NIMLIB/pure/os.nim	/^    FileId* = int64$/;"	t
FileIndex	$NIMLIB/packages/docutils/rstast.nim	/^  FileIndex* = distinct int32$/;"	t
FileInfo	$NIMLIB/pure/os.nim	/^  FileInfo* = object$/;"	t
FileLogger	$NIMLIB/pure/logging.nim	/^    FileLogger* = ref object of Logger$/;"	t
FileMode	$NIMLIB/std/syncio.nim	/^  FileMode* = enum       ## The file mode when opening a file.$/;"	t
FilePermission	$NIMLIB/std/private/osfiles.nim	/^  FilePermission* = enum   ## File access permission, modelled after UNIX.$/;"	t
FileReader	$NIMLIB/js/dom.nim	/^    FileReader* {.importc.} = ref object of EventTarget$/;"	t
FileReaderState	$NIMLIB/js/dom.nim	/^    FileReaderState* = distinct range[0'u16..2'u16]$/;"	t
FileSeekPos	$NIMLIB/std/syncio.nim	/^  FileSeekPos* = enum ## Position relative to which seek should happen.$/;"	t
FileStream	$NIMLIB/pure/streams.nim	/^  FileStream* = ref FileStreamObj$/;"	t
FileStreamObj	$NIMLIB/pure/streams.nim	/^  FileStreamObj* = object of Stream$/;"	t
FileSystemCaseSensitive	$NIMLIB/std/private/osseps.nim	/^  FileSystemCaseSensitive* =$/;"	t
FindFileHandler	$NIMLIB/packages/docutils/rst.nim	/^  FindFileHandler* = proc (filename: string): string {.closure, gcsafe.}$/;"	t
FindRefFileHandler	$NIMLIB/packages/docutils/rst.nim	/^  FindRefFileHandler* =$/;"	t
FixedTimeUnit	$NIMLIB/pure/times.nim	/^  FixedTimeUnit* = range[Nanoseconds..Weeks] ## \\$/;"	t
Float64Array	$NIMLIB/std/private/jsutils.nim	/^    Float64Array* = ref object of JsRoot$/;"	t
FloatClass	$NIMLIB/pure/math.nim	/^  FloatClass* = enum ## Describes the class a floating point value belongs to.$/;"	t
FloatDivByZeroDefect	$NIMLIB/system/exceptions.nim	/^  FloatDivByZeroDefect* = object of FloatingPointDefect ## \\$/;"	t
FloatDivByZeroError	$NIMLIB/system/exceptions.nim	/^    FloatDivByZeroError* {.deprecated: "See corresponding Defect".} = FloatDivByZeroDefect$/;"	t
FloatFormatMode	$NIMLIB/pure/strutils.nim	/^  FloatFormatMode* = enum$/;"	t
FloatInexactDefect	$NIMLIB/system/exceptions.nim	/^  FloatInexactDefect* = object of FloatingPointDefect ## \\$/;"	t
FloatInexactError	$NIMLIB/system/exceptions.nim	/^    FloatInexactError* {.deprecated: "See corresponding Defect".} = FloatInexactDefect$/;"	t
FloatInvalidOpDefect	$NIMLIB/system/exceptions.nim	/^  FloatInvalidOpDefect* = object of FloatingPointDefect ## \\$/;"	t
FloatInvalidOpError	$NIMLIB/system/exceptions.nim	/^    FloatInvalidOpError* {.deprecated: "See corresponding Defect".} = FloatInvalidOpDefect$/;"	t
FloatOverflowDefect	$NIMLIB/system/exceptions.nim	/^  FloatOverflowDefect* = object of FloatingPointDefect ## \\$/;"	t
FloatOverflowError	$NIMLIB/system/exceptions.nim	/^    FloatOverflowError* {.deprecated: "See corresponding Defect".} = FloatOverflowDefect$/;"	t
FloatUnderflowDefect	$NIMLIB/system/exceptions.nim	/^  FloatUnderflowDefect* = object of FloatingPointDefect ## \\$/;"	t
FloatUnderflowError	$NIMLIB/system/exceptions.nim	/^    FloatUnderflowError* {.deprecated: "See corresponding Defect".} = FloatUnderflowDefect$/;"	t
FloatingDecimal64	$NIMLIB/std/private/dragonbox.nim	/^  FloatingDecimal64* {.bycopy.} = object$/;"	t
FloatingPointDefect	$NIMLIB/system/exceptions.nim	/^  FloatingPointDefect* = object of Defect ## \\$/;"	t
FloatingPointError	$NIMLIB/system/exceptions.nim	/^    FloatingPointError* {.deprecated: "See corresponding Defect".} = FloatingPointDefect$/;"	t
FlowVar	$NIMLIB/pure/concurrency/threadpool.nim	/^  FlowVar*[T] {.compilerproc.} = ref FlowVarObj[T] ## A data flow variable.$/;"	t
FlowVarBase	$NIMLIB/pure/concurrency/threadpool.nim	/^  FlowVarBase* = ref FlowVarBaseObj ## Untyped base class for `FlowVar[T] <#FlowVar>`_.$/;"	t
FontFaceSet	$NIMLIB/js/dom.nim	/^  FontFaceSet* {.importc.} = ref object$/;"	t
FontFaceSetReady	$NIMLIB/js/dom.nim	/^  FontFaceSetReady* {.importc.} = ref object$/;"	t
ForLoopStmt	$NIMLIB/system.nim	/^  ForLoopStmt* {.compilerproc.} = object ## \\$/;"	t
ForegroundColor	$NIMLIB/pure/terminal.nim	/^  ForegroundColor* = enum ## Terminal's foreground colors.$/;"	t
ForeignCell	$NIMLIB/system/gc_common.nim	/^  ForeignCell* = object$/;"	t
ForeignCell	$NIMLIB/system/mmdisp.nim	/^  type ForeignCell* = object$/;"	t
FormData	$NIMLIB/std/jsformdata.nim	/^type FormData* = ref object of JsRoot ## FormData API.$/;"	t
FormElement	$NIMLIB/js/dom.nim	/^  FormElement* {.importc.} = ref object of Element ## see `docs<https:\/\/developer.mozilla.org\//;"	t
FormatFlag	$NIMLIB/pure/strtabs.nim	/^  FormatFlag* = enum ## Flags for the `%` operator.$/;"	t
Frame	$NIMLIB/js/dom.nim	/^  Frame* {.importc.} = ref object of Window$/;"	t
Fsblkcnt	$NIMLIB/posix/posix_haiku.nim	/^  Fsblkcnt* {.importc: "fsblkcnt_t", header: "<sys\/types.h>".} = int64$/;"	t
Fsblkcnt	$NIMLIB/posix/posix_linux_amd64.nim	/^  Fsblkcnt* {.importc: "fsblkcnt_t", header: "<sys\/types.h>".} = culong$/;"	t
Fsblkcnt	$NIMLIB/posix/posix_macos_amd64.nim	/^  Fsblkcnt* {.importc: "fsblkcnt_t", header: "<sys\/types.h>".} = int$/;"	t
Fsblkcnt	$NIMLIB/posix/posix_nintendoswitch.nim	/^  Fsblkcnt* {.importc: "fsblkcnt_t", header: "<sys\/types.h>".} = culong$/;"	t
Fsblkcnt	$NIMLIB/posix/posix_openbsd_amd64.nim	/^  Fsblkcnt* {.importc: "fsblkcnt_t", header: "<sys\/types.h>".} = int$/;"	t
Fsblkcnt	$NIMLIB/posix/posix_other.nim	/^  Fsblkcnt* {.importc: "fsblkcnt_t", header: "<sys\/types.h>".} = int$/;"	t
Fsfilcnt	$NIMLIB/posix/posix_haiku.nim	/^  Fsfilcnt* {.importc: "fsfilcnt_t", header: "<sys\/types.h>".} = int64$/;"	t
Fsfilcnt	$NIMLIB/posix/posix_linux_amd64.nim	/^  Fsfilcnt* {.importc: "fsfilcnt_t", header: "<sys\/types.h>".} = culong$/;"	t
Fsfilcnt	$NIMLIB/posix/posix_macos_amd64.nim	/^  Fsfilcnt* {.importc: "fsfilcnt_t", header: "<sys\/types.h>".} = int$/;"	t
Fsfilcnt	$NIMLIB/posix/posix_nintendoswitch.nim	/^  Fsfilcnt* {.importc: "fsfilcnt_t", header: "<sys\/types.h>".} = culong$/;"	t
Fsfilcnt	$NIMLIB/posix/posix_openbsd_amd64.nim	/^  Fsfilcnt* {.importc: "fsfilcnt_t", header: "<sys\/types.h>".} = int$/;"	t
Fsfilcnt	$NIMLIB/posix/posix_other.nim	/^  Fsfilcnt* {.importc: "fsfilcnt_t", header: "<sys\/types.h>".} = int$/;"	t
Future	$NIMLIB/js/asyncjs.nim	/^  Future*[T] = ref object$/;"	t
Future	$NIMLIB/pure/asyncfutures.nim	/^  Future*[T] = ref object of FutureBase ## Typed future.$/;"	t
FutureBase	$NIMLIB/pure/asyncfutures.nim	/^  FutureBase* = ref object of RootObj  ## Untyped future.$/;"	t
FutureError	$NIMLIB/pure/asyncfutures.nim	/^  FutureError* = object of Defect$/;"	t
FutureInfo	$NIMLIB/pure/asyncfutures.nim	/^    FutureInfo* = object$/;"	t
FutureStream	$NIMLIB/pure/asyncstreams.nim	/^  FutureStream*[T] = ref object ## Special future that acts as$/;"	t
FutureVar	$NIMLIB/pure/asyncfutures.nim	/^  FutureVar*[T] = distinct Future[T]$/;"	t
GC_Strategy	$NIMLIB/system/gc_interface.nim	/^    GC_Strategy* = enum  ## The strategy the GC should use for the application.$/;"	t
GC_collectZct	$NIMLIB/system/gc.nim	/^proc GC_collectZct*() =$/;"	t
GC_disable	$NIMLIB/system/gc_interface.nim	/^  template GC_disable* =$/;"	t
GC_disableMarkAndSweep	$NIMLIB/system/gc_interface.nim	/^  template GC_disableMarkAndSweep* =$/;"	t
GC_disableMarkAndSweep	$NIMLIB/system/orc.nim	/^proc GC_disableMarkAndSweep*() =$/;"	t
GC_disableOrc	$NIMLIB/system/orc.nim	/^proc GC_disableOrc*() =$/;"	t
GC_dumpHeap	$NIMLIB/system/gc2.nim	/^proc GC_dumpHeap*(file: File) =$/;"	t
GC_enable	$NIMLIB/system/gc_interface.nim	/^  template GC_enable* =$/;"	t
GC_enableMarkAndSweep	$NIMLIB/system/gc_interface.nim	/^  template GC_enableMarkAndSweep* =$/;"	t
GC_enableMarkAndSweep	$NIMLIB/system/orc.nim	/^proc GC_enableMarkAndSweep*() =$/;"	t
GC_enableOrc	$NIMLIB/system/orc.nim	/^proc GC_enableOrc*() =$/;"	t
GC_fullCollect	$NIMLIB/system/arc.nim	/^  template GC_fullCollect* =$/;"	t
GC_fullCollect	$NIMLIB/system/gc_interface.nim	/^  template GC_fullCollect* =$/;"	t
GC_fullCollect	$NIMLIB/system/orc.nim	/^proc GC_fullCollect* =$/;"	t
GC_getStatistics	$NIMLIB/system/gc_interface.nim	/^  template GC_getStatistics*(): string =$/;"	t
GC_getStatistics	$NIMLIB/system/strmantle.nim	/^  proc GC_getStatistics*(): string =$/;"	t
GC_logTrace	$NIMLIB/system/gc_ms.nim	/^    proc GC_logTrace*() =$/;"	t
GC_partialCollect	$NIMLIB/system/orc.nim	/^proc GC_partialCollect*(limit: int) =$/;"	t
GC_prepareOrc	$NIMLIB/system/orc.nim	/^proc GC_prepareOrc*(): int {.inline.} = roots.len$/;"	t
GC_ref	$NIMLIB/system/arc.nim	/^proc GC_ref*[T](x: ref T) =$/;"	t
GC_ref	$NIMLIB/system/gc_interface.nim	/^  template GC_ref*[T](x: seq[T]) =$/;"	t
GC_runOrc	$NIMLIB/system/orc.nim	/^proc GC_runOrc* =$/;"	t
GC_setMaxPause	$NIMLIB/system/gc.nim	/^  proc GC_setMaxPause*(MaxPauseInUs: int) =$/;"	t
GC_setMaxPause	$NIMLIB/system/gc2.nim	/^  proc GC_setMaxPause*(MaxPauseInUs: int) =$/;"	t
GC_setStrategy	$NIMLIB/system/gc_interface.nim	/^  template GC_setStrategy* =$/;"	t
GC_step	$NIMLIB/system/gc.nim	/^  proc GC_step*(us: int, strongAdvice = false, stackSize = -1) {.noinline.} =$/;"	t
GC_step	$NIMLIB/system/gc2.nim	/^  proc GC_step*(us: int, strongAdvice = false, stackSize = -1) {.noinline.} =$/;"	t
GC_unref	$NIMLIB/system/arc.nim	/^proc GC_unref*[T](x: ref T) =$/;"	t
GC_unref	$NIMLIB/system/gc_interface.nim	/^  template GC_unref*[T](x: seq[T]) =$/;"	t
GENERIC_ALL	$NIMLIB/windows/winlean.nim	/^  GENERIC_ALL* = 0x10000000'i32$/;"	t
GENERIC_READ	$NIMLIB/windows/winlean.nim	/^  GENERIC_READ* = 0x80000000'i32$/;"	t
GENERIC_WRITE	$NIMLIB/windows/winlean.nim	/^  GENERIC_WRITE* = 0x40000000'i32$/;"	t
GLOB_ABORTED	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const GLOB_ABORTED* = cint(2)$/;"	t
GLOB_ABORTED	$NIMLIB/posix/posix_other_consts.nim	/^var GLOB_ABORTED* {.importc: "GLOB_ABORTED", header: "<glob.h>".}: cint$/;"	t
GLOB_APPEND	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const GLOB_APPEND* = cint(32)$/;"	t
GLOB_APPEND	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const GLOB_APPEND* = cint(1)$/;"	t
GLOB_APPEND	$NIMLIB/posix/posix_other_consts.nim	/^var GLOB_APPEND* {.importc: "GLOB_APPEND", header: "<glob.h>".}: cint$/;"	t
GLOB_DOOFFS	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const GLOB_DOOFFS* = cint(8)$/;"	t
GLOB_DOOFFS	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const GLOB_DOOFFS* = cint(2)$/;"	t
GLOB_DOOFFS	$NIMLIB/posix/posix_other_consts.nim	/^var GLOB_DOOFFS* {.importc: "GLOB_DOOFFS", header: "<glob.h>".}: cint$/;"	t
GLOB_ERR	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const GLOB_ERR* = cint(1)$/;"	t
GLOB_ERR	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const GLOB_ERR* = cint(4)$/;"	t
GLOB_ERR	$NIMLIB/posix/posix_other_consts.nim	/^var GLOB_ERR* {.importc: "GLOB_ERR", header: "<glob.h>".}: cint$/;"	t
GLOB_MARK	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const GLOB_MARK* = cint(2)$/;"	t
GLOB_MARK	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const GLOB_MARK* = cint(8)$/;"	t
GLOB_MARK	$NIMLIB/posix/posix_other_consts.nim	/^var GLOB_MARK* {.importc: "GLOB_MARK", header: "<glob.h>".}: cint$/;"	t
GLOB_NOCHECK	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const GLOB_NOCHECK* = cint(16)$/;"	t
GLOB_NOCHECK	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const GLOB_NOCHECK* = cint(16)$/;"	t
GLOB_NOCHECK	$NIMLIB/posix/posix_other_consts.nim	/^var GLOB_NOCHECK* {.importc: "GLOB_NOCHECK", header: "<glob.h>".}: cint$/;"	t
GLOB_NOESCAPE	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const GLOB_NOESCAPE* = cint(64)$/;"	t
GLOB_NOESCAPE	$NIMLIB/posix/posix_other_consts.nim	/^var GLOB_NOESCAPE* {.importc: "GLOB_NOESCAPE", header: "<glob.h>".}: cint$/;"	t
GLOB_NOMATCH	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const GLOB_NOMATCH* = cint(3)$/;"	t
GLOB_NOMATCH	$NIMLIB/posix/posix_other_consts.nim	/^var GLOB_NOMATCH* {.importc: "GLOB_NOMATCH", header: "<glob.h>".}: cint$/;"	t
GLOB_NOSORT	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const GLOB_NOSORT* = cint(4)$/;"	t
GLOB_NOSORT	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const GLOB_NOSORT* = cint(32)$/;"	t
GLOB_NOSORT	$NIMLIB/posix/posix_other_consts.nim	/^var GLOB_NOSORT* {.importc: "GLOB_NOSORT", header: "<glob.h>".}: cint$/;"	t
GLOB_NOSPACE	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const GLOB_NOSPACE* = cint(1)$/;"	t
GLOB_NOSPACE	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const GLOB_NOSPACE* = cint(-1)$/;"	t
GLOB_NOSPACE	$NIMLIB/posix/posix_other_consts.nim	/^var GLOB_NOSPACE* {.importc: "GLOB_NOSPACE", header: "<glob.h>".}: cint$/;"	t
GLOB_NOSYS	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const GLOB_NOSYS* = cint(4)$/;"	t
GLOB_NOSYS	$NIMLIB/posix/posix_other_consts.nim	/^var GLOB_NOSYS* {.importc: "GLOB_NOSYS", header: "<glob.h>".}: cint$/;"	t
GUID	$NIMLIB/windows/winlean.nim	/^  GUID* = object$/;"	t
GcThread	$NIMLIB/std/private/threadtypes.nim	/^  GcThread* {.pure, inheritable.} = object$/;"	t
GenAstOpt	$NIMLIB/std/genasts.nim	/^type GenAstOpt* = enum$/;"	t
GeneralTokenizer	$NIMLIB/packages/docutils/highlite.nim	/^  GeneralTokenizer* = object of RootObj$/;"	t
GenodeEnvObj	$NIMLIB/genode/env.nim	/^  GenodeEnvObj* {.importcpp: "Genode::Env", header: "<base\/env.h>", pure.} = object$/;"	t
GenodeEnvPtr	$NIMLIB/genode/env.nim	/^  GenodeEnvPtr* = ptr GenodeEnvObj$/;"	t
GenodeHeader	$NIMLIB/std/private/threadtypes.nim	/^    GenodeHeader* = "genode_cpp\/threads.h"$/;"	t
GenodeThreadProc	$NIMLIB/std/private/threadtypes.nim	/^    GenodeThreadProc* = proc (x: pointer) {.noconv.}$/;"	t
GetCurrentFiber	$NIMLIB/windows/winlean.nim	/^proc GetCurrentFiber*(): pointer {.stdcall, importc, header: "windows.h".}$/;"	f
Gid	$NIMLIB/posix/posix_haiku.nim	/^  Gid* {.importc: "gid_t", header: "<sys\/types.h>".} = uint32$/;"	t
Gid	$NIMLIB/posix/posix_linux_amd64.nim	/^  Gid* {.importc: "gid_t", header: "<sys\/types.h>".} = cuint$/;"	t
Gid	$NIMLIB/posix/posix_macos_amd64.nim	/^  Gid* {.importc: "gid_t", header: "<sys\/types.h>".} = int32$/;"	t
Gid	$NIMLIB/posix/posix_nintendoswitch.nim	/^  Gid* {.importc: "gid_t", header: "<sys\/types.h>".} = cuint$/;"	t
Gid	$NIMLIB/posix/posix_openbsd_amd64.nim	/^  Gid* {.importc: "gid_t", header: "<sys\/types.h>".} = int32$/;"	t
Gid	$NIMLIB/posix/posix_other.nim	/^  Gid* {.importc: "gid_t", header: "<sys\/types.h>".} = int$/;"	t
Goo	$NIMLIB/std/importutils.nim	/^    Goo*[T] = object$/;"	t
HANDLE_FLAG_INHERIT	$NIMLIB/windows/winlean.nim	/^  HANDLE_FLAG_INHERIT* = 0x00000001'i32$/;"	t
HDC	$NIMLIB/windows/winlean.nim	/^  HDC* = Handle$/;"	t
HGLRC	$NIMLIB/windows/winlean.nim	/^  HGLRC* = Handle$/;"	t
HIGH_PRIORITY_CLASS	$NIMLIB/windows/winlean.nim	/^  HIGH_PRIORITY_CLASS* = 128'i32$/;"	t
HKEY	$NIMLIB/windows/registry.nim	/^  HKEY* = uint$/;"	t
HKEY_CURRENT_USER	$NIMLIB/windows/registry.nim	/^  HKEY_CURRENT_USER* = HKEY(2147483649)$/;"	t
HKEY_LOCAL_MACHINE	$NIMLIB/windows/registry.nim	/^  HKEY_LOCAL_MACHINE* = HKEY(0x80000002u)$/;"	t
HMAC	$NIMLIB/wrappers/openssl.nim	/^proc HMAC*(evp_md: EVP_MD; key: pointer; key_len: cint; d: cstring; n: csize_t; md: cstring; md_/;"	f
HOST_NOT_FOUND	$NIMLIB/posix/posix_freertos_consts.nim	/^var HOST_NOT_FOUND* {.importc: "HOST_NOT_FOUND", header: "<netdb.h>".}: cint$/;"	t
HOST_NOT_FOUND	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const HOST_NOT_FOUND* = cint(1)$/;"	t
HOST_NOT_FOUND	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const HOST_NOT_FOUND* = cint(1)$/;"	t
HOST_NOT_FOUND	$NIMLIB/posix/posix_other_consts.nim	/^var HOST_NOT_FOUND* {.importc: "HOST_NOT_FOUND", header: "<netdb.h>".}: cint$/;"	t
HSlice	$NIMLIB/system.nim	/^  HSlice*[T, U] = object   ## "Heterogeneous" slice type.$/;"	t
HTMLSlotElement	$NIMLIB/js/dom.nim	/^    HTMLSlotElement* {.importc.} = ref object of RootObj$/;"	t
HUPCL	$NIMLIB/posix/termios.nim	/^  HUPCL* {.importc, header: "<termios.h>".}: Cflag$/;"	t
Handle	$NIMLIB/std/private/threadtypes.nim	/^    Handle* = int$/;"	t
Handle	$NIMLIB/windows/winlean.nim	/^  Handle* = int$/;"	t
Hash	$NIMLIB/pure/hashes.nim	/^  Hash* = int ## A hash value. Hash tables using these values should$/;"	t
HashSet	$NIMLIB/pure/collections/sets.nim	/^  HashSet*[A] {.myShallow.} = object ## \\$/;"	t
HcrModuleInitializer	$NIMLIB/nimhcr.nim	/^    HcrModuleInitializer* = proc () {.nimcall.}$/;"	t
HcrProcGetter	$NIMLIB/nimhcr.nim	/^    HcrProcGetter* = proc (libHandle: pointer, procName: cstring): pointer {.nimcall.}$/;"	t
Headers	$NIMLIB/std/jsheaders.nim	/^type Headers* = ref object of JsRoot ## HTTP Headers API.$/;"	t
HeapQueue	$NIMLIB/pure/collections/heapqueue.nim	/^type HeapQueue*[T] = object$/;"	t
HexDigits	$NIMLIB/pure/strutils.nim	/^  HexDigits* = {'0'..'9', 'A'..'F', 'a'..'f'}$/;"	t
History	$NIMLIB/js/dom.nim	/^  History* {.importc.} = ref object of RootObj$/;"	t
HoleyEnum	$NIMLIB/pure/typetraits.nim	/^type HoleyEnum* = (not Ordinal) and enum ## Enum with holes.$/;"	t
Hostent	$NIMLIB/pure/nativesockets.nim	/^  Hostent* = object ## information about a given host$/;"	t
Hostent	$NIMLIB/windows/winlean.nim	/^  Hostent* = object$/;"	t
HourRange	$NIMLIB/pure/times.nim	/^  HourRange* = range[0..23]$/;"	t
HtmlTag	$NIMLIB/pure/htmlparser.nim	/^  HtmlTag* = enum  ## list of all supported HTML tags; order will always be$/;"	t
Http100	$NIMLIB/pure/httpcore.nim	/^  Http100* = HttpCode(100)$/;"	t
Http101	$NIMLIB/pure/httpcore.nim	/^  Http101* = HttpCode(101)$/;"	t
Http102	$NIMLIB/pure/httpcore.nim	/^  Http102* = HttpCode(102)  ## https:\/\/tools.ietf.org\/html\/rfc2518.html WebDAV$/;"	t
Http103	$NIMLIB/pure/httpcore.nim	/^  Http103* = HttpCode(103)  ## https:\/\/tools.ietf.org\/html\/rfc8297.html Early hints$/;"	t
Http200	$NIMLIB/pure/httpcore.nim	/^  Http200* = HttpCode(200)$/;"	t
Http201	$NIMLIB/pure/httpcore.nim	/^  Http201* = HttpCode(201)$/;"	t
Http202	$NIMLIB/pure/httpcore.nim	/^  Http202* = HttpCode(202)$/;"	t
Http203	$NIMLIB/pure/httpcore.nim	/^  Http203* = HttpCode(203)$/;"	t
Http204	$NIMLIB/pure/httpcore.nim	/^  Http204* = HttpCode(204)$/;"	t
Http205	$NIMLIB/pure/httpcore.nim	/^  Http205* = HttpCode(205)$/;"	t
Http206	$NIMLIB/pure/httpcore.nim	/^  Http206* = HttpCode(206)$/;"	t
Http207	$NIMLIB/pure/httpcore.nim	/^  Http207* = HttpCode(207)  ## https:\/\/tools.ietf.org\/html\/rfc4918.html WebDAV$/;"	t
Http208	$NIMLIB/pure/httpcore.nim	/^  Http208* = HttpCode(208)  ## https:\/\/tools.ietf.org\/html\/rfc5842.html WebDAV, Section 7.1$/;"	t
Http226	$NIMLIB/pure/httpcore.nim	/^  Http226* = HttpCode(226)  ## https:\/\/tools.ietf.org\/html\/rfc3229.html Delta encoding, Sect/;"	t
Http300	$NIMLIB/pure/httpcore.nim	/^  Http300* = HttpCode(300)$/;"	t
Http301	$NIMLIB/pure/httpcore.nim	/^  Http301* = HttpCode(301)$/;"	t
Http302	$NIMLIB/pure/httpcore.nim	/^  Http302* = HttpCode(302)$/;"	t
Http303	$NIMLIB/pure/httpcore.nim	/^  Http303* = HttpCode(303)$/;"	t
Http304	$NIMLIB/pure/httpcore.nim	/^  Http304* = HttpCode(304)$/;"	t
Http305	$NIMLIB/pure/httpcore.nim	/^  Http305* = HttpCode(305)$/;"	t
Http307	$NIMLIB/pure/httpcore.nim	/^  Http307* = HttpCode(307)$/;"	t
Http308	$NIMLIB/pure/httpcore.nim	/^  Http308* = HttpCode(308)$/;"	t
Http400	$NIMLIB/pure/httpcore.nim	/^  Http400* = HttpCode(400)$/;"	t
Http401	$NIMLIB/pure/httpcore.nim	/^  Http401* = HttpCode(401)$/;"	t
Http402	$NIMLIB/pure/httpcore.nim	/^  Http402* = HttpCode(402)  ## https:\/\/tools.ietf.org\/html\/rfc7231.html Payment required, Se/;"	t
Http403	$NIMLIB/pure/httpcore.nim	/^  Http403* = HttpCode(403)$/;"	t
Http404	$NIMLIB/pure/httpcore.nim	/^  Http404* = HttpCode(404)$/;"	t
Http405	$NIMLIB/pure/httpcore.nim	/^  Http405* = HttpCode(405)$/;"	t
Http406	$NIMLIB/pure/httpcore.nim	/^  Http406* = HttpCode(406)$/;"	t
Http407	$NIMLIB/pure/httpcore.nim	/^  Http407* = HttpCode(407)$/;"	t
Http408	$NIMLIB/pure/httpcore.nim	/^  Http408* = HttpCode(408)$/;"	t
Http409	$NIMLIB/pure/httpcore.nim	/^  Http409* = HttpCode(409)$/;"	t
Http410	$NIMLIB/pure/httpcore.nim	/^  Http410* = HttpCode(410)$/;"	t
Http411	$NIMLIB/pure/httpcore.nim	/^  Http411* = HttpCode(411)$/;"	t
Http412	$NIMLIB/pure/httpcore.nim	/^  Http412* = HttpCode(412)$/;"	t
Http413	$NIMLIB/pure/httpcore.nim	/^  Http413* = HttpCode(413)$/;"	t
Http414	$NIMLIB/pure/httpcore.nim	/^  Http414* = HttpCode(414)$/;"	t
Http415	$NIMLIB/pure/httpcore.nim	/^  Http415* = HttpCode(415)$/;"	t
Http416	$NIMLIB/pure/httpcore.nim	/^  Http416* = HttpCode(416)$/;"	t
Http417	$NIMLIB/pure/httpcore.nim	/^  Http417* = HttpCode(417)$/;"	t
Http418	$NIMLIB/pure/httpcore.nim	/^  Http418* = HttpCode(418)$/;"	t
Http421	$NIMLIB/pure/httpcore.nim	/^  Http421* = HttpCode(421)$/;"	t
Http422	$NIMLIB/pure/httpcore.nim	/^  Http422* = HttpCode(422)$/;"	t
Http423	$NIMLIB/pure/httpcore.nim	/^  Http423* = HttpCode(423)  ## https:\/\/tools.ietf.org\/html\/rfc4918.html WebDAV, Section 11.3$/;"	t
Http424	$NIMLIB/pure/httpcore.nim	/^  Http424* = HttpCode(424)  ## https:\/\/tools.ietf.org\/html\/rfc4918.html WebDAV, Section 11.3$/;"	t
Http425	$NIMLIB/pure/httpcore.nim	/^  Http425* = HttpCode(425)  ## https:\/\/tools.ietf.org\/html\/rfc8470.html Early data$/;"	t
Http426	$NIMLIB/pure/httpcore.nim	/^  Http426* = HttpCode(426)$/;"	t
Http428	$NIMLIB/pure/httpcore.nim	/^  Http428* = HttpCode(428)$/;"	t
Http429	$NIMLIB/pure/httpcore.nim	/^  Http429* = HttpCode(429)$/;"	t
Http431	$NIMLIB/pure/httpcore.nim	/^  Http431* = HttpCode(431)$/;"	t
Http451	$NIMLIB/pure/httpcore.nim	/^  Http451* = HttpCode(451)$/;"	t
Http500	$NIMLIB/pure/httpcore.nim	/^  Http500* = HttpCode(500)$/;"	t
Http501	$NIMLIB/pure/httpcore.nim	/^  Http501* = HttpCode(501)$/;"	t
Http502	$NIMLIB/pure/httpcore.nim	/^  Http502* = HttpCode(502)$/;"	t
Http503	$NIMLIB/pure/httpcore.nim	/^  Http503* = HttpCode(503)$/;"	t
Http504	$NIMLIB/pure/httpcore.nim	/^  Http504* = HttpCode(504)$/;"	t
Http505	$NIMLIB/pure/httpcore.nim	/^  Http505* = HttpCode(505)$/;"	t
Http506	$NIMLIB/pure/httpcore.nim	/^  Http506* = HttpCode(506)  ## https:\/\/tools.ietf.org\/html\/rfc2295.html Content negotiation,/;"	t
Http507	$NIMLIB/pure/httpcore.nim	/^  Http507* = HttpCode(507)  ## https:\/\/tools.ietf.org\/html\/rfc4918.html WebDAV, Section 11.5$/;"	t
Http508	$NIMLIB/pure/httpcore.nim	/^  Http508* = HttpCode(508)  ## https:\/\/tools.ietf.org\/html\/rfc5842.html WebDAV, Section 7.2$/;"	t
Http510	$NIMLIB/pure/httpcore.nim	/^  Http510* = HttpCode(510)  ## https:\/\/tools.ietf.org\/html\/rfc2774.html Extension framework,/;"	t
Http511	$NIMLIB/pure/httpcore.nim	/^  Http511* = HttpCode(511)  ## https:\/\/tools.ietf.org\/html\/rfc6585.html Additional status co/;"	t
HttpClient	$NIMLIB/pure/httpclient.nim	/^  HttpClient* = HttpClientBase[Socket]$/;"	t
HttpClientBase	$NIMLIB/pure/httpclient.nim	/^  HttpClientBase*[SocketType] = ref object$/;"	t
HttpCode	$NIMLIB/pure/httpcore.nim	/^  HttpCode* = distinct range[0 .. 599]$/;"	t
HttpHeaderValues	$NIMLIB/pure/httpcore.nim	/^  HttpHeaderValues* = distinct seq[string]$/;"	t
HttpHeaders	$NIMLIB/pure/httpcore.nim	/^  HttpHeaders* = ref object$/;"	t
HttpMethod	$NIMLIB/pure/httpcore.nim	/^  HttpMethod* = enum         ## the requested HttpMethod$/;"	t
HttpRequestError	$NIMLIB/pure/httpclient.nim	/^  HttpRequestError* = object of IOError ## Thrown in the `getContent` proc$/;"	t
HttpVersion	$NIMLIB/pure/httpcore.nim	/^  HttpVersion* = enum$/;"	t
ICANON	$NIMLIB/posix/termios.nim	/^  ICANON* {.importc, header: "<termios.h>".}: Cflag$/;"	t
ICRNL	$NIMLIB/posix/termios.nim	/^  ICRNL* {.importc, header: "<termios.h>".}: Cflag$/;"	t
IDLE_PRIORITY_CLASS	$NIMLIB/windows/winlean.nim	/^  IDLE_PRIORITY_CLASS* = 64'i32$/;"	t
IEXTEN	$NIMLIB/posix/termios.nim	/^  IEXTEN* {.importc, header: "<termios.h>".}: Cflag$/;"	t
IF_NAMESIZE	$NIMLIB/posix/posix_freertos_consts.nim	/^var IF_NAMESIZE* {.importc: "IF_NAMESIZE", header: "<net\/if.h>".}: cint$/;"	t
IF_NAMESIZE	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const IF_NAMESIZE* = cint(16)$/;"	t
IF_NAMESIZE	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const IF_NAMESIZE* = cint(16)$/;"	t
IF_NAMESIZE	$NIMLIB/posix/posix_other_consts.nim	/^var IF_NAMESIZE* {.importc: "IF_NAMESIZE", header: "<net\/if.h>".}: cint$/;"	t
IGNBRK	$NIMLIB/posix/termios.nim	/^  IGNBRK* {.importc, header: "<termios.h>".}: Cflag$/;"	t
IGNCR	$NIMLIB/posix/termios.nim	/^  IGNCR* {.importc, header: "<termios.h>".}: Cflag$/;"	t
IGNPAR	$NIMLIB/posix/termios.nim	/^  IGNPAR* {.importc, header: "<termios.h>".}: Cflag$/;"	t
IN6ADDR_ANY_INIT	$NIMLIB/posix/posix.nim	/^proc IN6ADDR_ANY_INIT* (): In6Addr {.importc, header: "<netinet\/in.h>".}$/;"	f
IN6ADDR_LOOPBACK_INIT	$NIMLIB/posix/posix.nim	/^proc IN6ADDR_LOOPBACK_INIT* (): In6Addr {.importc, header: "<netinet\/in.h>".}$/;"	f
IN6_IS_ADDR_LINKLOCAL	$NIMLIB/posix/posix.nim	/^proc IN6_IS_ADDR_LINKLOCAL* (a1: ptr In6Addr): cint {.$/;"	f
IN6_IS_ADDR_LOOPBACK	$NIMLIB/posix/posix.nim	/^proc IN6_IS_ADDR_LOOPBACK* (a1: ptr In6Addr): cint {.$/;"	f
IN6_IS_ADDR_MC_GLOBAL	$NIMLIB/posix/posix.nim	/^proc IN6_IS_ADDR_MC_GLOBAL* (a1: ptr In6Addr): cint {.$/;"	f
IN6_IS_ADDR_MC_LINKLOCAL	$NIMLIB/posix/posix.nim	/^proc IN6_IS_ADDR_MC_LINKLOCAL* (a1: ptr In6Addr): cint {.$/;"	f
IN6_IS_ADDR_MC_NODELOCAL	$NIMLIB/posix/posix.nim	/^proc IN6_IS_ADDR_MC_NODELOCAL* (a1: ptr In6Addr): cint {.$/;"	f
IN6_IS_ADDR_MC_ORGLOCAL	$NIMLIB/posix/posix.nim	/^proc IN6_IS_ADDR_MC_ORGLOCAL* (a1: ptr In6Addr): cint {.$/;"	f
IN6_IS_ADDR_MC_SITELOCAL	$NIMLIB/posix/posix.nim	/^proc IN6_IS_ADDR_MC_SITELOCAL* (a1: ptr In6Addr): cint {.$/;"	f
IN6_IS_ADDR_MULTICAST	$NIMLIB/posix/posix.nim	/^proc IN6_IS_ADDR_MULTICAST* (a1: ptr In6Addr): cint {.$/;"	f
IN6_IS_ADDR_SITELOCAL	$NIMLIB/posix/posix.nim	/^proc IN6_IS_ADDR_SITELOCAL* (a1: ptr In6Addr): cint {.$/;"	f
IN6_IS_ADDR_UNSPECIFIED	$NIMLIB/posix/posix.nim	/^proc IN6_IS_ADDR_UNSPECIFIED* (a1: ptr In6Addr): cint {.$/;"	f
IN6_IS_ADDR_V4COMPAT	$NIMLIB/posix/posix.nim	/^proc IN6_IS_ADDR_V4COMPAT* (a1: ptr In6Addr): cint {.$/;"	f
IN6_IS_ADDR_V4MAPPED	$NIMLIB/posix/posix.nim	/^  proc IN6_IS_ADDR_V4MAPPED*(ipv6_address: ptr In6Addr): cint =$/;"	t
INADDR_ANY	$NIMLIB/posix/posix_freertos_consts.nim	/^var INADDR_ANY* {.importc: "INADDR_ANY", header: "<sys\/socket.h>".}: InAddrScalar$/;"	t
INADDR_ANY	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const INADDR_ANY* = InAddrScalar(0)$/;"	t
INADDR_ANY	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const INADDR_ANY* = InAddrScalar(0)$/;"	t
INADDR_ANY	$NIMLIB/posix/posix_other_consts.nim	/^var INADDR_ANY* {.importc: "INADDR_ANY", header: "<netinet\/in.h>".}: InAddrScalar$/;"	t
INADDR_ANY	$NIMLIB/windows/winlean.nim	/^  INADDR_ANY* = 0'u32$/;"	t
INADDR_BROADCAST	$NIMLIB/posix/posix_freertos_consts.nim	/^var INADDR_BROADCAST* {.importc: "INADDR_BROADCAST", header: "<sys\/socket.h>".}: InAddrScalar$/;"	t
INADDR_BROADCAST	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const INADDR_BROADCAST* = InAddrScalar(4294967295)$/;"	t
INADDR_BROADCAST	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const INADDR_BROADCAST* = InAddrScalar(4294967295)$/;"	t
INADDR_BROADCAST	$NIMLIB/posix/posix_other_consts.nim	/^var INADDR_BROADCAST* {.importc: "INADDR_BROADCAST", header: "<netinet\/in.h>".}: InAddrScalar$/;"	t
INADDR_BROADCAST	$NIMLIB/windows/winlean.nim	/^  INADDR_BROADCAST* = -1$/;"	t
INADDR_LOOPBACK	$NIMLIB/posix/posix_freertos_consts.nim	/^var INADDR_LOOPBACK* {.importc: "INADDR_LOOPBACK", header: "<sys\/socket.h>".}: InAddrScalar$/;"	t
INADDR_LOOPBACK	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const INADDR_LOOPBACK* = InAddrScalar(2130706433)$/;"	t
INADDR_LOOPBACK	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const INADDR_LOOPBACK* = InAddrScalar(2130706433)$/;"	t
INADDR_LOOPBACK	$NIMLIB/posix/posix_other_consts.nim	/^var INADDR_LOOPBACK* {.importc: "INADDR_LOOPBACK", header: "<netinet\/in.h>".}: InAddrScalar$/;"	t
INADDR_LOOPBACK	$NIMLIB/windows/winlean.nim	/^  INADDR_LOOPBACK* = 0x7F000001$/;"	t
INADDR_NONE	$NIMLIB/windows/winlean.nim	/^  INADDR_NONE* = -1$/;"	t
INET6_ADDRSTRLEN	$NIMLIB/posix/posix_freertos_consts.nim	/^var INET6_ADDRSTRLEN* {.importc: "INET6_ADDRSTRLEN", header: "<sys\/socket.h>".}: cint$/;"	t
INET6_ADDRSTRLEN	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const INET6_ADDRSTRLEN* = cint(46)$/;"	t
INET6_ADDRSTRLEN	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const INET6_ADDRSTRLEN* = cint(46)$/;"	t
INET6_ADDRSTRLEN	$NIMLIB/posix/posix_other_consts.nim	/^var INET6_ADDRSTRLEN* {.importc: "INET6_ADDRSTRLEN", header: "<netinet\/in.h>".}: cint$/;"	t
INET_ADDRSTRLEN	$NIMLIB/posix/posix_freertos_consts.nim	/^var INET_ADDRSTRLEN* {.importc: "INET_ADDRSTRLEN", header: "<sys\/socket.h>".}: cint$/;"	t
INET_ADDRSTRLEN	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const INET_ADDRSTRLEN* = cint(16)$/;"	t
INET_ADDRSTRLEN	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const INET_ADDRSTRLEN* = cint(16)$/;"	t
INET_ADDRSTRLEN	$NIMLIB/posix/posix_other_consts.nim	/^var INET_ADDRSTRLEN* {.importc: "INET_ADDRSTRLEN", header: "<netinet\/in.h>".}: cint$/;"	t
INFINITE	$NIMLIB/windows/winlean.nim	/^  INFINITE* = -1'i32$/;"	t
INFO_BACKREFMAX	$NIMLIB/wrappers/pcre.nim	/^  INFO_BACKREFMAX*          =  3$/;"	t
INFO_CAPTURECOUNT	$NIMLIB/wrappers/pcre.nim	/^  INFO_CAPTURECOUNT*        =  2$/;"	t
INFO_DEFAULT_TABLES	$NIMLIB/wrappers/pcre.nim	/^  INFO_DEFAULT_TABLES*      = 11$/;"	t
INFO_FIRSTBYTE	$NIMLIB/wrappers/pcre.nim	/^  INFO_FIRSTBYTE*           =  4$/;"	t
INFO_FIRSTCHAR	$NIMLIB/wrappers/pcre.nim	/^  INFO_FIRSTCHAR*           =  4 ## For backwards compatibility$/;"	t
INFO_FIRSTCHARACTER	$NIMLIB/wrappers/pcre.nim	/^  INFO_FIRSTCHARACTER*      = 19$/;"	t
INFO_FIRSTCHARACTERFLAGS	$NIMLIB/wrappers/pcre.nim	/^  INFO_FIRSTCHARACTERFLAGS* = 20$/;"	t
INFO_FIRSTTABLE	$NIMLIB/wrappers/pcre.nim	/^  INFO_FIRSTTABLE*          =  5$/;"	t
INFO_HASCRORLF	$NIMLIB/wrappers/pcre.nim	/^  INFO_HASCRORLF*           = 14$/;"	t
INFO_JCHANGED	$NIMLIB/wrappers/pcre.nim	/^  INFO_JCHANGED*            = 13$/;"	t
INFO_JIT	$NIMLIB/wrappers/pcre.nim	/^  INFO_JIT*                 = 16$/;"	t
INFO_JITSIZE	$NIMLIB/wrappers/pcre.nim	/^  INFO_JITSIZE*             = 17$/;"	t
INFO_LASTLITERAL	$NIMLIB/wrappers/pcre.nim	/^  INFO_LASTLITERAL*         =  6$/;"	t
INFO_MATCHLIMIT	$NIMLIB/wrappers/pcre.nim	/^  INFO_MATCHLIMIT*          = 23$/;"	t
INFO_MATCH_EMPTY	$NIMLIB/wrappers/pcre.nim	/^  INFO_MATCH_EMPTY*         = 25$/;"	t
INFO_MAXLOOKBEHIND	$NIMLIB/wrappers/pcre.nim	/^  INFO_MAXLOOKBEHIND*       = 18$/;"	t
INFO_MINLENGTH	$NIMLIB/wrappers/pcre.nim	/^  INFO_MINLENGTH*           = 15$/;"	t
INFO_NAMECOUNT	$NIMLIB/wrappers/pcre.nim	/^  INFO_NAMECOUNT*           =  8$/;"	t
INFO_NAMEENTRYSIZE	$NIMLIB/wrappers/pcre.nim	/^  INFO_NAMEENTRYSIZE*       =  7$/;"	t
INFO_NAMETABLE	$NIMLIB/wrappers/pcre.nim	/^  INFO_NAMETABLE*           =  9$/;"	t
INFO_OKPARTIAL	$NIMLIB/wrappers/pcre.nim	/^  INFO_OKPARTIAL*           = 12$/;"	t
INFO_OPTIONS	$NIMLIB/wrappers/pcre.nim	/^  INFO_OPTIONS*             =  0$/;"	t
INFO_RECURSIONLIMIT	$NIMLIB/wrappers/pcre.nim	/^  INFO_RECURSIONLIMIT*      = 24$/;"	t
INFO_REQUIREDCHAR	$NIMLIB/wrappers/pcre.nim	/^  INFO_REQUIREDCHAR*        = 21$/;"	t
INFO_REQUIREDCHARFLAGS	$NIMLIB/wrappers/pcre.nim	/^  INFO_REQUIREDCHARFLAGS*   = 22$/;"	t
INFO_SIZE	$NIMLIB/wrappers/pcre.nim	/^  INFO_SIZE*                =  1$/;"	t
INFO_STUDYSIZE	$NIMLIB/wrappers/pcre.nim	/^  INFO_STUDYSIZE*           = 10$/;"	t
INLCR	$NIMLIB/posix/termios.nim	/^  INLCR* {.importc, header: "<termios.h>".}: Cflag$/;"	t
INPCK	$NIMLIB/posix/termios.nim	/^  INPCK* {.importc, header: "<termios.h>".}: Cflag$/;"	t
INVALID_FILE_SIZE	$NIMLIB/windows/winlean.nim	/^  INVALID_FILE_SIZE* = -1'i32$/;"	t
INVALID_HANDLE_VALUE	$NIMLIB/windows/winlean.nim	/^  INVALID_HANDLE_VALUE* = Handle(-1)$/;"	t
INVALID_SET_FILE_POINTER	$NIMLIB/windows/winlean.nim	/^  INVALID_SET_FILE_POINTER* = -1'i32$/;"	t
INVALID_SOCKET	$NIMLIB/posix/posix.nim	/^  INVALID_SOCKET* = SocketHandle(-1)$/;"	t
INVALID_SOCKET	$NIMLIB/windows/winlean.nim	/^  INVALID_SOCKET* {.importc, header: "winsock2.h".}: SocketHandle$/;"	t
IN_ACCESS	$NIMLIB/posix/inotify.nim	/^  IN_ACCESS* = 0x00000001                          ## File was accessed.$/;"	t
IN_ALL_EVENTS	$NIMLIB/posix/inotify.nim	/^  IN_ALL_EVENTS* = (IN_ACCESS or IN_MODIFY or IN_ATTRIB or IN_CLOSE_WRITE or$/;"	t
IN_ATTRIB	$NIMLIB/posix/inotify.nim	/^  IN_ATTRIB* = 0x00000004                          ## Metadata changed.$/;"	t
IN_CLOSE	$NIMLIB/posix/inotify.nim	/^  IN_CLOSE* = (IN_CLOSE_WRITE or IN_CLOSE_NOWRITE) ## Close.$/;"	t
IN_CLOSE_NOWRITE	$NIMLIB/posix/inotify.nim	/^  IN_CLOSE_NOWRITE* = 0x00000010                   ## Unwrittable file closed.$/;"	t
IN_CLOSE_WRITE	$NIMLIB/posix/inotify.nim	/^  IN_CLOSE_WRITE* = 0x00000008                     ## Writtable file was closed.$/;"	t
IN_CREATE	$NIMLIB/posix/inotify.nim	/^  IN_CREATE* = 0x00000100                          ## Subfile was created.$/;"	t
IN_DELETE	$NIMLIB/posix/inotify.nim	/^  IN_DELETE* = 0x00000200                          ## Subfile was deleted.$/;"	t
IN_DELETE_SELF	$NIMLIB/posix/inotify.nim	/^  IN_DELETE_SELF* = 0x00000400                     ## Self was deleted.$/;"	t
IN_DONT_FOLLOW	$NIMLIB/posix/inotify.nim	/^  IN_DONT_FOLLOW* = 0x02000000 ## Do not follow a sym link.$/;"	t
IN_EXCL_UNLINK	$NIMLIB/posix/inotify.nim	/^  IN_EXCL_UNLINK* = 0x04000000 ## Exclude events on unlinked objects.$/;"	t
IN_IGNORED	$NIMLIB/posix/inotify.nim	/^  IN_IGNORED* = 0x00008000    ## File was ignored.$/;"	t
IN_ISDIR	$NIMLIB/posix/inotify.nim	/^  IN_ISDIR* = 0x40000000       ## Event occurred against dir.$/;"	t
IN_MASK_ADD	$NIMLIB/posix/inotify.nim	/^  IN_MASK_ADD* = 0x20000000    ## Add to the mask of an already existing watch.$/;"	t
IN_MODIFY	$NIMLIB/posix/inotify.nim	/^  IN_MODIFY* = 0x00000002                          ## File was modified.$/;"	t
IN_MOVE	$NIMLIB/posix/inotify.nim	/^  IN_MOVE* = (IN_MOVED_FROM or IN_MOVED_TO)        ## Moves.$/;"	t
IN_MOVED_FROM	$NIMLIB/posix/inotify.nim	/^  IN_MOVED_FROM* = 0x00000040                      ## File was moved from X.$/;"	t
IN_MOVED_TO	$NIMLIB/posix/inotify.nim	/^  IN_MOVED_TO* = 0x00000080                        ## File was moved to Y.$/;"	t
IN_MOVE_SELF	$NIMLIB/posix/inotify.nim	/^  IN_MOVE_SELF* = 0x00000800                       ## Self was moved.$/;"	t
IN_ONESHOT	$NIMLIB/posix/inotify.nim	/^  IN_ONESHOT* = 0x80000000     ## Only send event once.$/;"	t
IN_ONLYDIR	$NIMLIB/posix/inotify.nim	/^  IN_ONLYDIR* = 0x01000000     ## Only watch the path if it is a directory.$/;"	t
IN_OPEN	$NIMLIB/posix/inotify.nim	/^  IN_OPEN* = 0x00000020                            ## File was opened.$/;"	t
IN_Q_OVERFLOW	$NIMLIB/posix/inotify.nim	/^  IN_Q_OVERFLOW* = 0x00004000 ## Event queued overflowed.$/;"	t
IN_UNMOUNT	$NIMLIB/posix/inotify.nim	/^  IN_UNMOUNT* = 0x00002000    ## Backing fs was unmounted.$/;"	t
IOCPARM_MASK	$NIMLIB/pure/nativesockets.nim	/^    IOCPARM_MASK* = 127$/;"	t
IOC_IN	$NIMLIB/pure/nativesockets.nim	/^    IOC_IN* = int(-2147483648)$/;"	t
IOC_IN	$NIMLIB/windows/winlean.nim	/^ IOC_IN*  = 0x80000000'i32$/;"	t
IOC_INOUT	$NIMLIB/windows/winlean.nim	/^ IOC_INOUT* = IOC_IN or IOC_OUT$/;"	t
IOC_OUT	$NIMLIB/windows/winlean.nim	/^ IOC_OUT* = 0x40000000'i32$/;"	t
IOC_WS2	$NIMLIB/windows/winlean.nim	/^ IOC_WS2* = 0x08000000'i32$/;"	t
IOEffect	$NIMLIB/system/exceptions.nim	/^  IOEffect* = object of RootEffect     ## IO effect.$/;"	t
IOError	$NIMLIB/system/exceptions.nim	/^  IOError* = object of CatchableError ## \\$/;"	t
IOFBF	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const IOFBF* = cint(0)$/;"	t
IOFBF	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const IOFBF* = cint(0)$/;"	t
IOFBF	$NIMLIB/posix/posix_other_consts.nim	/^var IOFBF* {.importc: "_IOFBF", header: "<stdio.h>".}: cint$/;"	t
IONBF	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const IONBF* = cint(2)$/;"	t
IONBF	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const IONBF* = cint(2)$/;"	t
IONBF	$NIMLIB/posix/posix_other_consts.nim	/^var IONBF* {.importc: "_IONBF", header: "<stdio.h>".}: cint$/;"	t
IOSelectorsException	$NIMLIB/pure/selectors.nim	/^    IOSelectorsException* = object of CatchableError$/;"	t
IOctl_WinSize	$NIMLIB/posix/termios.nim	/^type IOctl_WinSize* = object$/;"	t
IPC_CREAT	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const IPC_CREAT* = cint(512)$/;"	t
IPC_CREAT	$NIMLIB/posix/posix_other_consts.nim	/^var IPC_CREAT* {.importc: "IPC_CREAT", header: "<sys\/ipc.h>".}: cint$/;"	t
IPC_EXCL	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const IPC_EXCL* = cint(1024)$/;"	t
IPC_EXCL	$NIMLIB/posix/posix_other_consts.nim	/^var IPC_EXCL* {.importc: "IPC_EXCL", header: "<sys\/ipc.h>".}: cint$/;"	t
IPC_NOWAIT	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const IPC_NOWAIT* = cint(2048)$/;"	t
IPC_NOWAIT	$NIMLIB/posix/posix_other_consts.nim	/^var IPC_NOWAIT* {.importc: "IPC_NOWAIT", header: "<sys\/ipc.h>".}: cint$/;"	t
IPC_PRIVATE	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const IPC_PRIVATE* = cint(0)$/;"	t
IPC_PRIVATE	$NIMLIB/posix/posix_other_consts.nim	/^var IPC_PRIVATE* {.importc: "IPC_PRIVATE", header: "<sys\/ipc.h>".}: cint$/;"	t
IPC_RMID	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const IPC_RMID* = cint(0)$/;"	t
IPC_RMID	$NIMLIB/posix/posix_other_consts.nim	/^var IPC_RMID* {.importc: "IPC_RMID", header: "<sys\/ipc.h>".}: cint$/;"	t
IPC_SET	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const IPC_SET* = cint(1)$/;"	t
IPC_SET	$NIMLIB/posix/posix_other_consts.nim	/^var IPC_SET* {.importc: "IPC_SET", header: "<sys\/ipc.h>".}: cint$/;"	t
IPC_STAT	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const IPC_STAT* = cint(2)$/;"	t
IPC_STAT	$NIMLIB/posix/posix_other_consts.nim	/^var IPC_STAT* {.importc: "IPC_STAT", header: "<sys\/ipc.h>".}: cint$/;"	t
IPPORT_RESERVED	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const IPPORT_RESERVED* = cint(1024)$/;"	t
IPPORT_RESERVED	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const IPPORT_RESERVED* = cint(1024)$/;"	t
IPPORT_RESERVED	$NIMLIB/posix/posix_other_consts.nim	/^var IPPORT_RESERVED* {.importc: "IPPORT_RESERVED", header: "<netdb.h>".}: cint$/;"	t
IPPROTO_ICMP	$NIMLIB/posix/posix_freertos_consts.nim	/^var IPPROTO_ICMP* {.importc: "IPPROTO_ICMP", header: "<sys\/socket.h>".}: cint$/;"	t
IPPROTO_ICMP	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const IPPROTO_ICMP* = cint(1)$/;"	t
IPPROTO_ICMP	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const IPPROTO_ICMP* = cint(1)$/;"	t
IPPROTO_ICMP	$NIMLIB/posix/posix_other_consts.nim	/^var IPPROTO_ICMP* {.importc: "IPPROTO_ICMP", header: "<netinet\/in.h>".}: cint$/;"	t
IPPROTO_ICMPV6	$NIMLIB/posix/posix_freertos_consts.nim	/^var IPPROTO_ICMPV6* {.importc: "IPPROTO_ICMPV6", header: "<sys\/socket.h>".}: cint$/;"	t
IPPROTO_ICMPV6	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const IPPROTO_ICMPV6* = cint(58)$/;"	t
IPPROTO_ICMPV6	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const IPPROTO_ICMPV6* = cint(58)$/;"	t
IPPROTO_ICMPV6	$NIMLIB/posix/posix_other_consts.nim	/^var IPPROTO_ICMPV6* {.importc: "IPPROTO_ICMPV6", header: "<netinet\/in.h>".}: cint$/;"	t
IPPROTO_IP	$NIMLIB/posix/posix_freertos_consts.nim	/^var IPPROTO_IP* {.importc: "IPPROTO_IP", header: "<sys\/socket.h>".}: cint$/;"	t
IPPROTO_IP	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const IPPROTO_IP* = cint(0)$/;"	t
IPPROTO_IP	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const IPPROTO_IP* = cint(0)$/;"	t
IPPROTO_IP	$NIMLIB/posix/posix_other_consts.nim	/^var IPPROTO_IP* {.importc: "IPPROTO_IP", header: "<netinet\/in.h>".}: cint$/;"	t
IPPROTO_IPV6	$NIMLIB/posix/posix_freertos_consts.nim	/^var IPPROTO_IPV6* {.importc: "IPPROTO_IPV6", header: "<sys\/socket.h>".}: cint$/;"	t
IPPROTO_IPV6	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const IPPROTO_IPV6* = cint(41)$/;"	t
IPPROTO_IPV6	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const IPPROTO_IPV6* = cint(41)$/;"	t
IPPROTO_IPV6	$NIMLIB/posix/posix_other_consts.nim	/^var IPPROTO_IPV6* {.importc: "IPPROTO_IPV6", header: "<netinet\/in.h>".}: cint$/;"	t
IPPROTO_RAW	$NIMLIB/posix/posix_freertos_consts.nim	/^var IPPROTO_RAW* {.importc: "IPPROTO_RAW", header: "<sys\/socket.h>".}: cint$/;"	t
IPPROTO_RAW	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const IPPROTO_RAW* = cint(255)$/;"	t
IPPROTO_RAW	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const IPPROTO_RAW* = cint(255)$/;"	t
IPPROTO_RAW	$NIMLIB/posix/posix_other_consts.nim	/^var IPPROTO_RAW* {.importc: "IPPROTO_RAW", header: "<netinet\/in.h>".}: cint$/;"	t
IPPROTO_TCP	$NIMLIB/posix/posix_freertos_consts.nim	/^var IPPROTO_TCP* {.importc: "IPPROTO_TCP", header: "<sys\/socket.h>".}: cint$/;"	t
IPPROTO_TCP	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const IPPROTO_TCP* = cint(6)$/;"	t
IPPROTO_TCP	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const IPPROTO_TCP* = cint(6)$/;"	t
IPPROTO_TCP	$NIMLIB/posix/posix_other_consts.nim	/^var IPPROTO_TCP* {.importc: "IPPROTO_TCP", header: "<netinet\/in.h>".}: cint$/;"	t
IPPROTO_UDP	$NIMLIB/posix/posix_freertos_consts.nim	/^var IPPROTO_UDP* {.importc: "IPPROTO_UDP", header: "<sys\/socket.h>".}: cint$/;"	t
IPPROTO_UDP	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const IPPROTO_UDP* = cint(17)$/;"	t
IPPROTO_UDP	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const IPPROTO_UDP* = cint(17)$/;"	t
IPPROTO_UDP	$NIMLIB/posix/posix_other_consts.nim	/^var IPPROTO_UDP* {.importc: "IPPROTO_UDP", header: "<netinet\/in.h>".}: cint$/;"	t
IPV6_JOIN_GROUP	$NIMLIB/posix/posix_freertos_consts.nim	/^var IPV6_JOIN_GROUP* {.importc: "IPV6_JOIN_GROUP", header: "<sys\/socket.h>".}: cint$/;"	t
IPV6_JOIN_GROUP	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const IPV6_JOIN_GROUP* = cint(20)$/;"	t
IPV6_JOIN_GROUP	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const IPV6_JOIN_GROUP* = cint(12)$/;"	t
IPV6_JOIN_GROUP	$NIMLIB/posix/posix_other_consts.nim	/^var IPV6_JOIN_GROUP* {.importc: "IPV6_JOIN_GROUP", header: "<netinet\/in.h>".}: cint$/;"	t
IPV6_LEAVE_GROUP	$NIMLIB/posix/posix_freertos_consts.nim	/^var IPV6_LEAVE_GROUP* {.importc: "IPV6_LEAVE_GROUP", header: "<sys\/socket.h>".}: cint$/;"	t
IPV6_LEAVE_GROUP	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const IPV6_LEAVE_GROUP* = cint(21)$/;"	t
IPV6_LEAVE_GROUP	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const IPV6_LEAVE_GROUP* = cint(13)$/;"	t
IPV6_LEAVE_GROUP	$NIMLIB/posix/posix_other_consts.nim	/^var IPV6_LEAVE_GROUP* {.importc: "IPV6_LEAVE_GROUP", header: "<netinet\/in.h>".}: cint$/;"	t
IPV6_MULTICAST_HOPS	$NIMLIB/posix/posix_freertos_consts.nim	/^var IPV6_MULTICAST_HOPS* {.importc: "IPV6_MULTICAST_HOPS", header: "<sys\/socket.h>".}: cint$/;"	t
IPV6_MULTICAST_HOPS	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const IPV6_MULTICAST_HOPS* = cint(18)$/;"	t
IPV6_MULTICAST_HOPS	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const IPV6_MULTICAST_HOPS* = cint(10)$/;"	t
IPV6_MULTICAST_HOPS	$NIMLIB/posix/posix_other_consts.nim	/^var IPV6_MULTICAST_HOPS* {.importc: "IPV6_MULTICAST_HOPS", header: "<netinet\/in.h>".}: cint$/;"	t
IPV6_MULTICAST_IF	$NIMLIB/posix/posix_freertos_consts.nim	/^var IPV6_MULTICAST_IF* {.importc: "IPV6_MULTICAST_IF", header: "<sys\/socket.h>".}: cint$/;"	t
IPV6_MULTICAST_IF	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const IPV6_MULTICAST_IF* = cint(17)$/;"	t
IPV6_MULTICAST_IF	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const IPV6_MULTICAST_IF* = cint(9)$/;"	t
IPV6_MULTICAST_IF	$NIMLIB/posix/posix_other_consts.nim	/^var IPV6_MULTICAST_IF* {.importc: "IPV6_MULTICAST_IF", header: "<netinet\/in.h>".}: cint$/;"	t
IPV6_MULTICAST_LOOP	$NIMLIB/posix/posix_freertos_consts.nim	/^var IPV6_MULTICAST_LOOP* {.importc: "IPV6_MULTICAST_LOOP", header: "<sys\/socket.h>".}: cint$/;"	t
IPV6_MULTICAST_LOOP	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const IPV6_MULTICAST_LOOP* = cint(19)$/;"	t
IPV6_MULTICAST_LOOP	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const IPV6_MULTICAST_LOOP* = cint(11)$/;"	t
IPV6_MULTICAST_LOOP	$NIMLIB/posix/posix_other_consts.nim	/^var IPV6_MULTICAST_LOOP* {.importc: "IPV6_MULTICAST_LOOP", header: "<netinet\/in.h>".}: cint$/;"	t
IPV6_UNICAST_HOPS	$NIMLIB/posix/posix_freertos_consts.nim	/^var IPV6_UNICAST_HOPS* {.importc: "IPV6_UNICAST_HOPS", header: "<sys\/socket.h>".}: cint$/;"	t
IPV6_UNICAST_HOPS	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const IPV6_UNICAST_HOPS* = cint(16)$/;"	t
IPV6_UNICAST_HOPS	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const IPV6_UNICAST_HOPS* = cint(4)$/;"	t
IPV6_UNICAST_HOPS	$NIMLIB/posix/posix_other_consts.nim	/^var IPV6_UNICAST_HOPS* {.importc: "IPV6_UNICAST_HOPS", header: "<netinet\/in.h>".}: cint$/;"	t
IPV6_V6ONLY	$NIMLIB/posix/posix_freertos_consts.nim	/^var IPV6_V6ONLY* {.importc: "IPV6_V6ONLY", header: "<sys\/socket.h>".}: cint$/;"	t
IPV6_V6ONLY	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const IPV6_V6ONLY* = cint(26)$/;"	t
IPV6_V6ONLY	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const IPV6_V6ONLY* = cint(27)$/;"	t
IPV6_V6ONLY	$NIMLIB/posix/posix_other_consts.nim	/^var IPV6_V6ONLY* {.importc: "IPV6_V6ONLY", header: "<netinet\/in.h>".}: cint$/;"	t
IPv4_any	$NIMLIB/pure/net.nim	/^proc IPv4_any*(): IpAddress =$/;"	t
IPv4_broadcast	$NIMLIB/pure/net.nim	/^proc IPv4_broadcast*(): IpAddress =$/;"	t
IPv4_loopback	$NIMLIB/pure/net.nim	/^proc IPv4_loopback*(): IpAddress =$/;"	t
IPv6_any	$NIMLIB/pure/net.nim	/^proc IPv6_any*(): IpAddress =$/;"	t
IPv6_loopback	$NIMLIB/pure/net.nim	/^proc IPv6_loopback*(): IpAddress =$/;"	t
ISIG	$NIMLIB/posix/termios.nim	/^  ISIG* {.importc, header: "<termios.h>".}: Cflag$/;"	t
ISTRIP	$NIMLIB/posix/termios.nim	/^  ISTRIP* {.importc, header: "<termios.h>".}: Cflag$/;"	t
IUCLC	$NIMLIB/posix/termios.nim	/^  IUCLC* {.importc, header: "<termios.h>".}: Cflag$/;"	t
IXANY	$NIMLIB/posix/termios.nim	/^  IXANY* {.importc, header: "<termios.h>".}: Cflag$/;"	t
IXOFF	$NIMLIB/posix/termios.nim	/^  IXOFF* {.importc, header: "<termios.h>".}: Cflag$/;"	t
IXON	$NIMLIB/posix/termios.nim	/^  IXON* {.importc, header: "<termios.h>".}: Cflag$/;"	t
Iconv	$NIMLIB/posix/posix_haiku.nim	/^  Iconv* {.importc: "iconv_t", header: "<iconv.h>", final, pure.} =$/;"	t
Iconv	$NIMLIB/posix/posix_linux_amd64.nim	/^  Iconv* {.importc: "iconv_t", header: "<iconv.h>".} = pointer$/;"	t
Iconv	$NIMLIB/posix/posix_macos_amd64.nim	/^  Iconv* {.importc: "iconv_t", header: "<iconv.h>", final, pure.} =$/;"	t
Iconv	$NIMLIB/posix/posix_nintendoswitch.nim	/^  Iconv* {.importc: "iconv_t", header: "<iconv.h>".} = pointer$/;"	t
Iconv	$NIMLIB/posix/posix_openbsd_amd64.nim	/^  Iconv* {.importc: "iconv_t", header: "<iconv.h>", final, pure.} =$/;"	t
Iconv	$NIMLIB/posix/posix_other.nim	/^  Iconv* {.importc: "iconv_t", header: "<iconv.h>", final, pure.} =$/;"	t
Id	$NIMLIB/posix/posix_haiku.nim	/^  Id* {.importc: "id_t", header: "<sys\/types.h>".} = int32$/;"	t
Id	$NIMLIB/posix/posix_linux_amd64.nim	/^  Id* {.importc: "id_t", header: "<sys\/types.h>".} = cuint$/;"	t
Id	$NIMLIB/posix/posix_macos_amd64.nim	/^  Id* {.importc: "id_t", header: "<sys\/types.h>".} = int$/;"	t
Id	$NIMLIB/posix/posix_nintendoswitch.nim	/^  Id* {.importc: "id_t", header: "<sys\/types.h>".} = cuint$/;"	t
Id	$NIMLIB/posix/posix_openbsd_amd64.nim	/^  Id* {.importc: "id_t", header: "<sys\/types.h>".} = int$/;"	t
Id	$NIMLIB/posix/posix_other.nim	/^  Id* {.importc: "id_t", header: "<sys\/types.h>".} = int$/;"	t
IdentChars	$NIMLIB/pure/strutils.nim	/^  IdentChars* = {'a'..'z', 'A'..'Z', '0'..'9', '_'}$/;"	t
IdentStartChars	$NIMLIB/pure/strutils.nim	/^  IdentStartChars* = {'a'..'z', 'A'..'Z', '_'}$/;"	t
ImageElement	$NIMLIB/js/dom.nim	/^  ImageElement* {.importc.} = ref object of Element$/;"	t
In6_addr	$NIMLIB/windows/winlean.nim	/^  In6_addr* {.importc: "IN6_ADDR", header: "winsock2.h".} = object$/;"	t
InAddr	$NIMLIB/windows/winlean.nim	/^  InAddr* {.importc: "IN_ADDR", header: "winsock2.h", union.} = object$/;"	t
InAddrScalar	$NIMLIB/posix/posix_haiku.nim	/^  InAddrScalar* = uint32$/;"	t
InAddrScalar	$NIMLIB/posix/posix_linux_amd64.nim	/^  InAddrScalar* = uint32$/;"	t
InAddrScalar	$NIMLIB/posix/posix_macos_amd64.nim	/^  InAddrScalar* = uint32$/;"	t
InAddrScalar	$NIMLIB/posix/posix_nintendoswitch.nim	/^  InAddrScalar* = uint32$/;"	t
InAddrScalar	$NIMLIB/posix/posix_openbsd_amd64.nim	/^  InAddrScalar* = uint32$/;"	t
InAddrScalar	$NIMLIB/posix/posix_other.nim	/^  InAddrScalar* = uint32$/;"	t
InPort	$NIMLIB/posix/posix_haiku.nim	/^  InPort* = uint16$/;"	t
InPort	$NIMLIB/posix/posix_linux_amd64.nim	/^  InPort* = uint16$/;"	t
InPort	$NIMLIB/posix/posix_macos_amd64.nim	/^  InPort* = uint16$/;"	t
InPort	$NIMLIB/posix/posix_nintendoswitch.nim	/^  InPort* = uint16$/;"	t
InPort	$NIMLIB/posix/posix_openbsd_amd64.nim	/^  InPort* = uint16$/;"	t
InPort	$NIMLIB/posix/posix_other.nim	/^  InPort* = uint16$/;"	t
IndexDefect	$NIMLIB/system/exceptions.nim	/^  IndexDefect* = object of Defect ## \\$/;"	t
IndexEntry	$NIMLIB/packages/docutils/rstidx.nim	/^  IndexEntry* = object$/;"	t
IndexEntryKind	$NIMLIB/packages/docutils/rstidx.nim	/^  IndexEntryKind* = enum ## discriminator tag$/;"	t
IndexError	$NIMLIB/system/exceptions.nim	/^    IndexError* {.deprecated: "See corresponding Defect".} = IndexDefect$/;"	t
IndexExt	$NIMLIB/packages/docutils/rstgen.nim	/^  IndexExt* = ".idx"$/;"	t
IndexedDocs	$NIMLIB/packages/docutils/rstgen.nim	/^  IndexedDocs* = Table[IndexEntry, seq[IndexEntry]] ## \\$/;"	t
Inf	$NIMLIB/system.nim	/^  Inf* = 0x7FF0000000000000'f64$/;"	t
InlineTags	$NIMLIB/pure/htmlparser.nim	/^  InlineTags* = {tagA, tagAbbr, tagAcronym, tagApplet, tagB, tagBasefont,$/;"	t
Ino	$NIMLIB/posix/posix_haiku.nim	/^  Ino* {.importc: "ino_t", header: "<sys\/types.h>".} = int64$/;"	t
Ino	$NIMLIB/posix/posix_linux_amd64.nim	/^  Ino* {.importc: "ino_t", header: "<sys\/types.h>".} = culong$/;"	t
Ino	$NIMLIB/posix/posix_macos_amd64.nim	/^  Ino* {.importc: "ino_t", header: "<sys\/types.h>".} = int$/;"	t
Ino	$NIMLIB/posix/posix_nintendoswitch.nim	/^  Ino* {.importc: "ino_t", header: "<sys\/types.h>".} = culong$/;"	t
Ino	$NIMLIB/posix/posix_openbsd_amd64.nim	/^  Ino* {.importc: "ino_t", header: "<sys\/types.h>".} = int$/;"	t
Ino	$NIMLIB/posix/posix_other.nim	/^  Ino* {.importc: "ino_t", header: "<sys\/types.h>".} = int$/;"	t
InputElement	$NIMLIB/js/dom.nim	/^  InputElement* {.importc.} = ref object of Element ## see `docs<https:\/\/developer.mozilla.org/;"	t
IntSet	$NIMLIB/pure/collections/intsets.nim	/^  IntSet* = PackedSet[int]$/;"	t
InterpolatedKind	$NIMLIB/pure/parseutils.nim	/^  InterpolatedKind* = enum ## Describes for `interpolatedFragments`$/;"	t
Interval	$NIMLIB/js/dom.nim	/^  Interval* {.importc.} = ref object of RootObj$/;"	t
InvalidUnicodeError	$NIMLIB/impure/nre.nim	/^  InvalidUnicodeError* = ref object of RegexError$/;"	t
IpAddress	$NIMLIB/pure/net.nim	/^  IpAddress* = object                  ## stores an arbitrary IP address$/;"	t
IpAddressFamily	$NIMLIB/pure/net.nim	/^  IpAddressFamily* {.pure.} = enum ## Describes the type of an IP address$/;"	t
IsoWeekRange	$NIMLIB/pure/times.nim	/^  IsoWeekRange* = range[1 .. 53]$/;"	t
IsoYear	$NIMLIB/pure/times.nim	/^  IsoYear* = distinct int$/;"	t
Isolated	$NIMLIB/std/isolation.nim	/^  Isolated*[T] = object ## Isolated data can only be moved, not copied.$/;"	t
Item	$NIMLIB/experimental/diff.nim	/^  Item* = object    ## An Item in the list of differences.$/;"	t
JAVASCRIPT_COMPAT	$NIMLIB/wrappers/pcre.nim	/^  JAVASCRIPT_COMPAT* = 0x02000000  # C5$/;"	t
JSON	$NIMLIB/js/jscore.nim	/^  JSON* {.importc, nodecl.}: JsonLib$/;"	t
JUnitOutputFormatter	$NIMLIB/pure/unittest.nim	/^  JUnitOutputFormatter* = ref object of OutputFormatter$/;"	t
JitCallback	$NIMLIB/wrappers/pcre.nim	/^  JitCallback* = proc (a: pointer): ptr JitStack {.cdecl.}$/;"	t
JitStack	$NIMLIB/wrappers/pcre.nim	/^  JitStack* = object$/;"	t
JitStack16	$NIMLIB/wrappers/pcre.nim	/^  JitStack16* = object$/;"	t
JitStack32	$NIMLIB/wrappers/pcre.nim	/^  JitStack32* = object$/;"	t
Joptions	$NIMLIB/std/jsonutils.nim	/^  Joptions* = object # xxx rename FromJsonOptions$/;"	t
JsAssoc	$NIMLIB/js/jsffi.nim	/^  JsAssoc*[K: JsKey, V] = ref object of JsRoot$/;"	t
JsBigInt	$NIMLIB/std/jsbigints.nim	/^type JsBigInt* = distinct JsBigIntImpl         ## Arbitrary precision integer for JavaScript tar/;"	t
JsError	$NIMLIB/js/jsffi.nim	/^  JsError* {.importc: "Error".} = object of JsRoot$/;"	t
JsEvalError	$NIMLIB/js/jsffi.nim	/^  JsEvalError* {.importc: "EvalError".} = object of JsError$/;"	t
JsKey	$NIMLIB/js/jsffi.nim	/^  JsKey* = concept a, type T$/;"	t
JsObject	$NIMLIB/js/jsffi.nim	/^  JsObject* = ref object of JsRoot$/;"	t
JsRangeError	$NIMLIB/js/jsffi.nim	/^  JsRangeError* {.importc: "RangeError".} = object of JsError$/;"	t
JsReferenceError	$NIMLIB/js/jsffi.nim	/^  JsReferenceError* {.importc: "ReferenceError".} = object of JsError$/;"	t
JsRoot	$NIMLIB/system.nim	/^    JsRoot* = ref object of RootObj$/;"	t
JsSyntaxError	$NIMLIB/js/jsffi.nim	/^  JsSyntaxError* {.importc: "SyntaxError".} = object of JsError$/;"	t
JsTypeError	$NIMLIB/js/jsffi.nim	/^  JsTypeError* {.importc: "TypeError".} = object of JsError$/;"	t
JsURIError	$NIMLIB/js/jsffi.nim	/^  JsURIError* {.importc: "URIError".} = object of JsError$/;"	t
JsonError	$NIMLIB/pure/parsejson.nim	/^  JsonError* = enum       ## enumeration that lists all errors that can occur$/;"	t
JsonEventKind	$NIMLIB/pure/parsejson.nim	/^  JsonEventKind* = enum ## enumeration of all events that may occur when parsing$/;"	t
JsonKindError	$NIMLIB/pure/parsejson.nim	/^  JsonKindError* = object of ValueError ## raised by the `to` macro if the$/;"	t
JsonLib	$NIMLIB/js/jscore.nim	/^  JsonLib* = ref object$/;"	t
JsonNode	$NIMLIB/pure/json.nim	/^  JsonNode* = ref JsonNodeObj ## JSON node$/;"	t
JsonNodeKind	$NIMLIB/pure/json.nim	/^  JsonNodeKind* = enum ## possible JSON node types$/;"	t
JsonNodeMode	$NIMLIB/std/jsonutils.nim	/^  JsonNodeMode* = enum ## controls `toJson` for JsonNode types$/;"	t
JsonNodeObj	$NIMLIB/pure/json.nim	/^  JsonNodeObj* {.acyclic.} = object$/;"	t
JsonParser	$NIMLIB/pure/parsejson.nim	/^  JsonParser* = object of BaseLexer ## the parser object.$/;"	t
JsonParsingError	$NIMLIB/pure/parsejson.nim	/^  JsonParsingError* = object of ValueError ## is raised for a JSON error$/;"	t
KEY_EVENT_RECORD	$NIMLIB/windows/winlean.nim	/^  KEY_EVENT_RECORD* = object$/;"	t
Key	$NIMLIB/posix/posix_haiku.nim	/^  Key* {.importc: "key_t", header: "<sys\/types.h>".} = int32$/;"	t
Key	$NIMLIB/posix/posix_linux_amd64.nim	/^  Key* {.importc: "key_t", header: "<sys\/types.h>".} = cint$/;"	t
Key	$NIMLIB/posix/posix_macos_amd64.nim	/^  Key* {.importc: "key_t", header: "<sys\/types.h>".} = int$/;"	t
Key	$NIMLIB/posix/posix_nintendoswitch.nim	/^  Key* {.importc: "key_t", header: "<sys\/types.h>".} = cint$/;"	t
Key	$NIMLIB/posix/posix_openbsd_amd64.nim	/^  Key* {.importc: "key_t", header: "<sys\/types.h>".} = int$/;"	t
Key	$NIMLIB/posix/posix_other.nim	/^  Key* {.importc: "key_t", header: "<sys\/types.h>".} = int$/;"	t
KeyError	$NIMLIB/system/exceptions.nim	/^  KeyError* = object of ValueError ## \\$/;"	t
KeyboardEvent	$NIMLIB/js/dom.nim	/^  KeyboardEvent* {.importc.} = ref object of UIEvent ## see `docs<https:\/\/developer.mozilla.or/;"	t
KeyboardEventKey	$NIMLIB/js/dom.nim	/^  KeyboardEventKey* {.pure.} = enum ## see `docs<https:\/\/developer.mozilla.org\/en-US\/docs\/W/;"	t
LC_ALL	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const LC_ALL* = cint(6)$/;"	t
LC_ALL	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const LC_ALL* = cint(0)$/;"	t
LC_ALL	$NIMLIB/posix/posix_other_consts.nim	/^var LC_ALL* {.importc: "LC_ALL", header: "<locale.h>".}: cint$/;"	t
LC_COLLATE	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const LC_COLLATE* = cint(3)$/;"	t
LC_COLLATE	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const LC_COLLATE* = cint(1)$/;"	t
LC_COLLATE	$NIMLIB/posix/posix_other_consts.nim	/^var LC_COLLATE* {.importc: "LC_COLLATE", header: "<locale.h>".}: cint$/;"	t
LC_CTYPE	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const LC_CTYPE* = cint(0)$/;"	t
LC_CTYPE	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const LC_CTYPE* = cint(2)$/;"	t
LC_CTYPE	$NIMLIB/posix/posix_other_consts.nim	/^var LC_CTYPE* {.importc: "LC_CTYPE", header: "<locale.h>".}: cint$/;"	t
LC_MESSAGES	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const LC_MESSAGES* = cint(5)$/;"	t
LC_MESSAGES	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const LC_MESSAGES* = cint(6)$/;"	t
LC_MESSAGES	$NIMLIB/posix/posix_other_consts.nim	/^var LC_MESSAGES* {.importc: "LC_MESSAGES", header: "<locale.h>".}: cint$/;"	t
LC_MONETARY	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const LC_MONETARY* = cint(4)$/;"	t
LC_MONETARY	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const LC_MONETARY* = cint(3)$/;"	t
LC_MONETARY	$NIMLIB/posix/posix_other_consts.nim	/^var LC_MONETARY* {.importc: "LC_MONETARY", header: "<locale.h>".}: cint$/;"	t
LC_NUMERIC	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const LC_NUMERIC* = cint(1)$/;"	t
LC_NUMERIC	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const LC_NUMERIC* = cint(4)$/;"	t
LC_NUMERIC	$NIMLIB/posix/posix_other_consts.nim	/^var LC_NUMERIC* {.importc: "LC_NUMERIC", header: "<locale.h>".}: cint$/;"	t
LC_TIME	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const LC_TIME* = cint(2)$/;"	t
LC_TIME	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const LC_TIME* = cint(5)$/;"	t
LC_TIME	$NIMLIB/posix/posix_other_consts.nim	/^var LC_TIME* {.importc: "LC_TIME", header: "<locale.h>".}: cint$/;"	t
LIO_NOP	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const LIO_NOP* = cint(2)$/;"	t
LIO_NOP	$NIMLIB/posix/posix_other_consts.nim	/^var LIO_NOP* {.importc: "LIO_NOP", header: "<aio.h>".}: cint$/;"	t
LIO_NOWAIT	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const LIO_NOWAIT* = cint(1)$/;"	t
LIO_NOWAIT	$NIMLIB/posix/posix_other_consts.nim	/^var LIO_NOWAIT* {.importc: "LIO_NOWAIT", header: "<aio.h>".}: cint$/;"	t
LIO_READ	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const LIO_READ* = cint(0)$/;"	t
LIO_READ	$NIMLIB/posix/posix_other_consts.nim	/^var LIO_READ* {.importc: "LIO_READ", header: "<aio.h>".}: cint$/;"	t
LIO_WAIT	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const LIO_WAIT* = cint(0)$/;"	t
LIO_WAIT	$NIMLIB/posix/posix_other_consts.nim	/^var LIO_WAIT* {.importc: "LIO_WAIT", header: "<aio.h>".}: cint$/;"	t
LIO_WRITE	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const LIO_WRITE* = cint(1)$/;"	t
LIO_WRITE	$NIMLIB/posix/posix_other_consts.nim	/^var LIO_WRITE* {.importc: "LIO_WRITE", header: "<aio.h>".}: cint$/;"	t
LONG	$NIMLIB/windows/winlean.nim	/^  LONG* = int32$/;"	t
LPFIBER_START_ROUTINE	$NIMLIB/windows/winlean.nim	/^  LPFIBER_START_ROUTINE* = proc (param: pointer) {.stdcall.}$/;"	t
LPFILETIME	$NIMLIB/windows/winlean.nim	/^  LPFILETIME* = ptr FILETIME$/;"	t
LPINT	$NIMLIB/windows/winlean.nim	/^  LPINT* = ptr int32$/;"	t
LWIP_DNS_API_DECLARE_H_ERRNO	$NIMLIB/posix/posix_freertos_consts.nim	/^var LWIP_DNS_API_DECLARE_H_ERRNO* {.importc: "LWIP_DNS_API_DECLARE_H_ERRNO", header: "<netdb.h>"/;"	t
LWIP_DNS_API_DECLARE_STRUCTS	$NIMLIB/posix/posix_freertos_consts.nim	/^var LWIP_DNS_API_DECLARE_STRUCTS* {.importc: "LWIP_DNS_API_DECLARE_STRUCTS", header: "<netdb.h>"/;"	t
LWIP_DNS_API_DEFINE_ERRORS	$NIMLIB/posix/posix_freertos_consts.nim	/^var LWIP_DNS_API_DEFINE_ERRORS* {.importc: "LWIP_DNS_API_DEFINE_ERRORS", header: "<netdb.h>".}: /;"	t
LWIP_DNS_API_DEFINE_FLAGS	$NIMLIB/posix/posix_freertos_consts.nim	/^var LWIP_DNS_API_DEFINE_FLAGS* {.importc: "LWIP_DNS_API_DEFINE_FLAGS", header: "<netdb.h>".}: ci/;"	t
LWIP_NETIF_USE_HINTS	$NIMLIB/posix/posix_freertos_consts.nim	/^var LWIP_NETIF_USE_HINTS* {.importc: "LWIP_NETIF_USE_HINTS", header: "<netif.h>".}: cint$/;"	t
LWIP_NSC_IPV4_ADDRESS_CHANGED	$NIMLIB/posix/posix_freertos_consts.nim	/^var LWIP_NSC_IPV4_ADDRESS_CHANGED* {.importc: "LWIP_NSC_IPV4_ADDRESS_CHANGED", header: "<netif.h/;"	t
LWIP_NSC_IPV4_GATEWAY_CHANGED	$NIMLIB/posix/posix_freertos_consts.nim	/^var LWIP_NSC_IPV4_GATEWAY_CHANGED* {.importc: "LWIP_NSC_IPV4_GATEWAY_CHANGED", header: "<netif.h/;"	t
LWIP_NSC_IPV4_NETMASK_CHANGED	$NIMLIB/posix/posix_freertos_consts.nim	/^var LWIP_NSC_IPV4_NETMASK_CHANGED* {.importc: "LWIP_NSC_IPV4_NETMASK_CHANGED", header: "<netif.h/;"	t
LWIP_NSC_IPV4_SETTINGS_CHANGED	$NIMLIB/posix/posix_freertos_consts.nim	/^var LWIP_NSC_IPV4_SETTINGS_CHANGED* {.importc: "LWIP_NSC_IPV4_SETTINGS_CHANGED", header: "<netif/;"	t
LWIP_NSC_IPV6_ADDR_STATE_CHANGED	$NIMLIB/posix/posix_freertos_consts.nim	/^var LWIP_NSC_IPV6_ADDR_STATE_CHANGED* {.importc: "LWIP_NSC_IPV6_ADDR_STATE_CHANGED", header: "<n/;"	t
LWIP_NSC_IPV6_SET	$NIMLIB/posix/posix_freertos_consts.nim	/^var LWIP_NSC_IPV6_SET* {.importc: "LWIP_NSC_IPV6_SET", header: "<netif.h>".}: cint$/;"	t
LWIP_NSC_LINK_CHANGED	$NIMLIB/posix/posix_freertos_consts.nim	/^var LWIP_NSC_LINK_CHANGED* {.importc: "LWIP_NSC_LINK_CHANGED", header: "<netif.h>".}: cint$/;"	t
LWIP_NSC_NETIF_ADDED	$NIMLIB/posix/posix_freertos_consts.nim	/^var LWIP_NSC_NETIF_ADDED* {.importc: "LWIP_NSC_NETIF_ADDED", header: "<netif.h>".}: cint$/;"	t
LWIP_NSC_NETIF_REMOVED	$NIMLIB/posix/posix_freertos_consts.nim	/^var LWIP_NSC_NETIF_REMOVED* {.importc: "LWIP_NSC_NETIF_REMOVED", header: "<netif.h>".}: cint$/;"	t
LWIP_NSC_NONE	$NIMLIB/posix/posix_freertos_consts.nim	/^var LWIP_NSC_NONE* {.importc: "LWIP_NSC_NONE", header: "<netif.h>".}: cint$/;"	t
LWIP_NSC_STATUS_CHANGED	$NIMLIB/posix/posix_freertos_consts.nim	/^var LWIP_NSC_STATUS_CHANGED* {.importc: "LWIP_NSC_STATUS_CHANGED", header: "<netif.h>".}: cint$/;"	t
LacksDevPackages	$NIMLIB/pure/distros.nim	/^  LacksDevPackages* = {Distribution.Gentoo, Distribution.Slackware,$/;"	t
LangSymbol	$NIMLIB/packages/docutils/dochelpers.nim	/^  LangSymbol* = object       ## symbol signature in Nim$/;"	t
Letters	$NIMLIB/pure/strutils.nim	/^  Letters* = {'A'..'Z', 'a'..'z'}$/;"	t
Level	$NIMLIB/pure/logging.nim	/^  Level* = enum ## \\$/;"	t
LevelNames	$NIMLIB/pure/logging.nim	/^  LevelNames*: array[Level, string] = [$/;"	t
LibHandle	$NIMLIB/pure/dynlib.nim	/^  LibHandle* = pointer ## A handle to a dynamically loaded library.$/;"	t
LibraryError	$NIMLIB/system/exceptions.nim	/^  LibraryError* = object of OSError ## \\$/;"	t
LineInfo	$NIMLIB/core/macros.nim	/^  LineInfo* = object$/;"	t
LineRstInit	$NIMLIB/packages/docutils/rst.nim	/^  LineRstInit* = 1  ## Initial line number for standalone RST text$/;"	t
LinenoiseData	$NIMLIB/wrappers/linenoise/linenoise.nim	/^  type LinenoiseData* = object$/;"	t
LinkElement	$NIMLIB/js/dom.nim	/^  LinkElement* {.importc.} = ref object of Element$/;"	t
Location	$NIMLIB/js/dom.nim	/^  Location* {.importc.} = ref object of RootObj$/;"	t
LocationBar	$NIMLIB/js/dom.nim	/^  LocationBar* {.importc.} = object of RootObj$/;"	t
Lock	$NIMLIB/core/locks.nim	/^  Lock* = SysLock ## Nim lock; whether this is re-entrant$/;"	t
LogEntry	$NIMLIB/system/memtracker.nim	/^  LogEntry* = object$/;"	t
Logger	$NIMLIB/pure/logging.nim	/^  Logger* = ref object of RootObj$/;"	t
LowercaseLetters	$NIMLIB/pure/strutils.nim	/^  LowercaseLetters* = {'a'..'z'}$/;"	t
MAP_ANONYMOUS	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const MAP_ANONYMOUS* = cint(32)$/;"	t
MAP_ANONYMOUS	$NIMLIB/posix/posix_other_consts.nim	/^var MAP_ANONYMOUS* {.importc: "MAP_ANONYMOUS", header: "<sys\/mman.h>".}: cint$/;"	t
MAP_FAILED	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const MAP_FAILED* = cast[pointer](0xffffffffffffffff)$/;"	t
MAP_FAILED	$NIMLIB/posix/posix_other_consts.nim	/^var MAP_FAILED* {.importc: "MAP_FAILED", header: "<sys\/mman.h>".}: pointer$/;"	t
MAP_FIXED	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const MAP_FIXED* = cint(16)$/;"	t
MAP_FIXED	$NIMLIB/posix/posix_other_consts.nim	/^var MAP_FIXED* {.importc: "MAP_FIXED", header: "<sys\/mman.h>".}: cint$/;"	t
MAP_FIXED_NOREPLACE	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const MAP_FIXED_NOREPLACE* = cint(1048576)$/;"	t
MAP_FIXED_NOREPLACE	$NIMLIB/posix/posix_other_consts.nim	/^var MAP_FIXED_NOREPLACE* {.importc: "MAP_FIXED_NOREPLACE", header: "<sys\/mman.h>".}: cint$/;"	t
MAP_NORESERVE	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const MAP_NORESERVE* = cint(16384)$/;"	t
MAP_NORESERVE	$NIMLIB/posix/posix_other_consts.nim	/^var MAP_NORESERVE* {.importc: "MAP_NORESERVE", header: "<sys\/mman.h>".}: cint$/;"	t
MAP_POPULATE	$NIMLIB/posix/posix_haiku.nim	/^    MAP_POPULATE*: cint = 0$/;"	t
MAP_POPULATE	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const MAP_POPULATE* = cint(32768)$/;"	t
MAP_POPULATE	$NIMLIB/posix/posix_macos_amd64.nim	/^    MAP_POPULATE*: cint = 0$/;"	t
MAP_POPULATE	$NIMLIB/posix/posix_openbsd_amd64.nim	/^  MAP_POPULATE*: cint = 0$/;"	t
MAP_POPULATE	$NIMLIB/posix/posix_other.nim	/^    MAP_POPULATE*: cint = 0$/;"	t
MAP_PRIVATE	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const MAP_PRIVATE* = cint(2)$/;"	t
MAP_PRIVATE	$NIMLIB/posix/posix_other_consts.nim	/^var MAP_PRIVATE* {.importc: "MAP_PRIVATE", header: "<sys\/mman.h>".}: cint$/;"	t
MAP_SHARED	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const MAP_SHARED* = cint(1)$/;"	t
MAP_SHARED	$NIMLIB/posix/posix_other_consts.nim	/^var MAP_SHARED* {.importc: "MAP_SHARED", header: "<sys\/mman.h>".}: cint$/;"	t
MAXIMUM_WAIT_OBJECTS	$NIMLIB/windows/winlean.nim	/^  MAXIMUM_WAIT_OBJECTS* = 0x00000040$/;"	t
MAX_PATH	$NIMLIB/windows/winlean.nim	/^  MAX_PATH* = 260$/;"	t
MCL_CURRENT	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const MCL_CURRENT* = cint(1)$/;"	t
MCL_CURRENT	$NIMLIB/posix/posix_other_consts.nim	/^var MCL_CURRENT* {.importc: "MCL_CURRENT", header: "<sys\/mman.h>".}: cint$/;"	t
MCL_FUTURE	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const MCL_FUTURE* = cint(2)$/;"	t
MCL_FUTURE	$NIMLIB/posix/posix_other_consts.nim	/^var MCL_FUTURE* {.importc: "MCL_FUTURE", header: "<sys\/mman.h>".}: cint$/;"	t
MD5Context	$NIMLIB/pure/md5.nim	/^  MD5Context* {.final.} = object$/;"	t
MD5Digest	$NIMLIB/pure/md5.nim	/^  MD5Digest* = array[0..15, uint8]$/;"	t
MD5_CBLOCK	$NIMLIB/wrappers/openssl.nim	/^  MD5_CBLOCK* = 64$/;"	t
MD5_CTX	$NIMLIB/wrappers/openssl.nim	/^  MD5_CTX* = object$/;"	t
MD5_DIGEST_LENGTH	$NIMLIB/wrappers/openssl.nim	/^  MD5_DIGEST_LENGTH* = 16$/;"	t
MD5_LBLOCK	$NIMLIB/wrappers/openssl.nim	/^  MD5_LBLOCK* = int(MD5_CBLOCK div 4)$/;"	t
MD5_LONG	$NIMLIB/wrappers/openssl.nim	/^  MD5_LONG* = cuint$/;"	t
MINSIGSTKSZ	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const MINSIGSTKSZ* = cint(2048)$/;"	t
MINSIGSTKSZ	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const MINSIGSTKSZ* = cint(2048)$/;"	t
MINSIGSTKSZ	$NIMLIB/posix/posix_other_consts.nim	/^var MINSIGSTKSZ* {.importc: "MINSIGSTKSZ", header: "<signal.h>".}: cint$/;"	t
MM_APPL	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const MM_APPL* = cint(8)$/;"	t
MM_APPL	$NIMLIB/posix/posix_other_consts.nim	/^var MM_APPL* {.importc: "MM_APPL", header: "<fmtmsg.h>".}: cint$/;"	t
MM_CONSOLE	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const MM_CONSOLE* = cint(512)$/;"	t
MM_CONSOLE	$NIMLIB/posix/posix_other_consts.nim	/^var MM_CONSOLE* {.importc: "MM_CONSOLE", header: "<fmtmsg.h>".}: cint$/;"	t
MM_ERROR	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const MM_ERROR* = cint(2)$/;"	t
MM_ERROR	$NIMLIB/posix/posix_other_consts.nim	/^var MM_ERROR* {.importc: "MM_ERROR", header: "<fmtmsg.h>".}: cint$/;"	t
MM_FIRM	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const MM_FIRM* = cint(4)$/;"	t
MM_FIRM	$NIMLIB/posix/posix_other_consts.nim	/^var MM_FIRM* {.importc: "MM_FIRM", header: "<fmtmsg.h>".}: cint$/;"	t
MM_HALT	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const MM_HALT* = cint(1)$/;"	t
MM_HALT	$NIMLIB/posix/posix_other_consts.nim	/^var MM_HALT* {.importc: "MM_HALT", header: "<fmtmsg.h>".}: cint$/;"	t
MM_HARD	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const MM_HARD* = cint(1)$/;"	t
MM_HARD	$NIMLIB/posix/posix_other_consts.nim	/^var MM_HARD* {.importc: "MM_HARD", header: "<fmtmsg.h>".}: cint$/;"	t
MM_INFO	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const MM_INFO* = cint(4)$/;"	t
MM_INFO	$NIMLIB/posix/posix_other_consts.nim	/^var MM_INFO* {.importc: "MM_INFO", header: "<fmtmsg.h>".}: cint$/;"	t
MM_NOCON	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const MM_NOCON* = cint(4)$/;"	t
MM_NOCON	$NIMLIB/posix/posix_other_consts.nim	/^var MM_NOCON* {.importc: "MM_NOCON", header: "<fmtmsg.h>".}: cint$/;"	t
MM_NOMSG	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const MM_NOMSG* = cint(1)$/;"	t
MM_NOMSG	$NIMLIB/posix/posix_other_consts.nim	/^var MM_NOMSG* {.importc: "MM_NOMSG", header: "<fmtmsg.h>".}: cint$/;"	t
MM_NOSEV	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const MM_NOSEV* = cint(0)$/;"	t
MM_NOSEV	$NIMLIB/posix/posix_other_consts.nim	/^var MM_NOSEV* {.importc: "MM_NOSEV", header: "<fmtmsg.h>".}: cint$/;"	t
MM_NOTOK	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const MM_NOTOK* = cint(-1)$/;"	t
MM_NOTOK	$NIMLIB/posix/posix_other_consts.nim	/^var MM_NOTOK* {.importc: "MM_NOTOK", header: "<fmtmsg.h>".}: cint$/;"	t
MM_NRECOV	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const MM_NRECOV* = cint(128)$/;"	t
MM_NRECOV	$NIMLIB/posix/posix_other_consts.nim	/^var MM_NRECOV* {.importc: "MM_NRECOV", header: "<fmtmsg.h>".}: cint$/;"	t
MM_NULLACT	$NIMLIB/posix/posix.nim	/^  MM_NULLACT* = nil$/;"	t
MM_NULLLBL	$NIMLIB/posix/posix.nim	/^  MM_NULLLBL* = nil$/;"	t
MM_NULLMC	$NIMLIB/posix/posix.nim	/^  MM_NULLMC* = 0$/;"	t
MM_NULLSEV	$NIMLIB/posix/posix.nim	/^  MM_NULLSEV* = 0$/;"	t
MM_NULLTAG	$NIMLIB/posix/posix.nim	/^  MM_NULLTAG* = nil$/;"	t
MM_NULLTXT	$NIMLIB/posix/posix.nim	/^  MM_NULLTXT* = nil$/;"	t
MM_OK	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const MM_OK* = cint(0)$/;"	t
MM_OK	$NIMLIB/posix/posix_other_consts.nim	/^var MM_OK* {.importc: "MM_OK", header: "<fmtmsg.h>".}: cint$/;"	t
MM_OPSYS	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const MM_OPSYS* = cint(32)$/;"	t
MM_OPSYS	$NIMLIB/posix/posix_other_consts.nim	/^var MM_OPSYS* {.importc: "MM_OPSYS", header: "<fmtmsg.h>".}: cint$/;"	t
MM_PRINT	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const MM_PRINT* = cint(256)$/;"	t
MM_PRINT	$NIMLIB/posix/posix_other_consts.nim	/^var MM_PRINT* {.importc: "MM_PRINT", header: "<fmtmsg.h>".}: cint$/;"	t
MM_RECOVER	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const MM_RECOVER* = cint(64)$/;"	t
MM_RECOVER	$NIMLIB/posix/posix_other_consts.nim	/^var MM_RECOVER* {.importc: "MM_RECOVER", header: "<fmtmsg.h>".}: cint$/;"	t
MM_SOFT	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const MM_SOFT* = cint(2)$/;"	t
MM_SOFT	$NIMLIB/posix/posix_other_consts.nim	/^var MM_SOFT* {.importc: "MM_SOFT", header: "<fmtmsg.h>".}: cint$/;"	t
MM_UTIL	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const MM_UTIL* = cint(16)$/;"	t
MM_UTIL	$NIMLIB/posix/posix_other_consts.nim	/^var MM_UTIL* {.importc: "MM_UTIL", header: "<fmtmsg.h>".}: cint$/;"	t
MM_WARNING	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const MM_WARNING* = cint(3)$/;"	t
MM_WARNING	$NIMLIB/posix/posix_other_consts.nim	/^var MM_WARNING* {.importc: "MM_WARNING", header: "<fmtmsg.h>".}: cint$/;"	t
MON_1	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const MON_1* = cint(131098)$/;"	t
MON_1	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const MON_1* = cint(21)$/;"	t
MON_1	$NIMLIB/posix/posix_other_consts.nim	/^var MON_1* {.importc: "MON_1", header: "<langinfo.h>".}: cint$/;"	t
MON_10	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const MON_10* = cint(131107)$/;"	t
MON_10	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const MON_10* = cint(30)$/;"	t
MON_10	$NIMLIB/posix/posix_other_consts.nim	/^var MON_10* {.importc: "MON_10", header: "<langinfo.h>".}: cint$/;"	t
MON_11	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const MON_11* = cint(131108)$/;"	t
MON_11	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const MON_11* = cint(31)$/;"	t
MON_11	$NIMLIB/posix/posix_other_consts.nim	/^var MON_11* {.importc: "MON_11", header: "<langinfo.h>".}: cint$/;"	t
MON_12	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const MON_12* = cint(131109)$/;"	t
MON_12	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const MON_12* = cint(32)$/;"	t
MON_12	$NIMLIB/posix/posix_other_consts.nim	/^var MON_12* {.importc: "MON_12", header: "<langinfo.h>".}: cint$/;"	t
MON_2	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const MON_2* = cint(131099)$/;"	t
MON_2	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const MON_2* = cint(22)$/;"	t
MON_2	$NIMLIB/posix/posix_other_consts.nim	/^var MON_2* {.importc: "MON_2", header: "<langinfo.h>".}: cint$/;"	t
MON_3	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const MON_3* = cint(131100)$/;"	t
MON_3	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const MON_3* = cint(23)$/;"	t
MON_3	$NIMLIB/posix/posix_other_consts.nim	/^var MON_3* {.importc: "MON_3", header: "<langinfo.h>".}: cint$/;"	t
MON_4	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const MON_4* = cint(131101)$/;"	t
MON_4	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const MON_4* = cint(24)$/;"	t
MON_4	$NIMLIB/posix/posix_other_consts.nim	/^var MON_4* {.importc: "MON_4", header: "<langinfo.h>".}: cint$/;"	t
MON_5	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const MON_5* = cint(131102)$/;"	t
MON_5	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const MON_5* = cint(25)$/;"	t
MON_5	$NIMLIB/posix/posix_other_consts.nim	/^var MON_5* {.importc: "MON_5", header: "<langinfo.h>".}: cint$/;"	t
MON_6	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const MON_6* = cint(131103)$/;"	t
MON_6	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const MON_6* = cint(26)$/;"	t
MON_6	$NIMLIB/posix/posix_other_consts.nim	/^var MON_6* {.importc: "MON_6", header: "<langinfo.h>".}: cint$/;"	t
MON_7	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const MON_7* = cint(131104)$/;"	t
MON_7	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const MON_7* = cint(27)$/;"	t
MON_7	$NIMLIB/posix/posix_other_consts.nim	/^var MON_7* {.importc: "MON_7", header: "<langinfo.h>".}: cint$/;"	t
MON_8	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const MON_8* = cint(131105)$/;"	t
MON_8	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const MON_8* = cint(28)$/;"	t
MON_8	$NIMLIB/posix/posix_other_consts.nim	/^var MON_8* {.importc: "MON_8", header: "<langinfo.h>".}: cint$/;"	t
MON_9	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const MON_9* = cint(131106)$/;"	t
MON_9	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const MON_9* = cint(29)$/;"	t
MON_9	$NIMLIB/posix/posix_other_consts.nim	/^var MON_9* {.importc: "MON_9", header: "<langinfo.h>".}: cint$/;"	t
MOVEFILE_COPY_ALLOWED	$NIMLIB/windows/winlean.nim	/^  MOVEFILE_COPY_ALLOWED* = 0x2'i32$/;"	t
MOVEFILE_CREATE_HARDLINK	$NIMLIB/windows/winlean.nim	/^  MOVEFILE_CREATE_HARDLINK* = 0x10'i32$/;"	t
MOVEFILE_DELAY_UNTIL_REBOOT	$NIMLIB/windows/winlean.nim	/^  MOVEFILE_DELAY_UNTIL_REBOOT* = 0x4'i32$/;"	t
MOVEFILE_FAIL_IF_NOT_TRACKABLE	$NIMLIB/windows/winlean.nim	/^  MOVEFILE_FAIL_IF_NOT_TRACKABLE* = 0x20'i32$/;"	t
MOVEFILE_REPLACE_EXISTING	$NIMLIB/windows/winlean.nim	/^  MOVEFILE_REPLACE_EXISTING* = 0x1'i32$/;"	t
MOVEFILE_WRITE_THROUGH	$NIMLIB/windows/winlean.nim	/^  MOVEFILE_WRITE_THROUGH* = 0x8'i32$/;"	t
MSG_CTRUNC	$NIMLIB/posix/posix_freertos_consts.nim	/^const MSG_CTRUNC*  = 0x08$/;"	t
MSG_CTRUNC	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const MSG_CTRUNC* = cint(8)$/;"	t
MSG_CTRUNC	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const MSG_CTRUNC* = cint(32)$/;"	t
MSG_CTRUNC	$NIMLIB/posix/posix_other_consts.nim	/^var MSG_CTRUNC* {.importc: "MSG_CTRUNC", header: "<sys\/socket.h>".}: cint$/;"	t
MSG_DONTROUTE	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const MSG_DONTROUTE* = cint(4)$/;"	t
MSG_DONTROUTE	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const MSG_DONTROUTE* = cint(4)$/;"	t
MSG_DONTROUTE	$NIMLIB/posix/posix_other_consts.nim	/^var MSG_DONTROUTE* {.importc: "MSG_DONTROUTE", header: "<sys\/socket.h>".}: cint$/;"	t
MSG_DONTWAIT	$NIMLIB/posix/posix_freertos_consts.nim	/^const MSG_DONTWAIT*   = 0x08    # Nonblocking i\/o for this operation only$/;"	t
MSG_EOR	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const MSG_EOR* = cint(128)$/;"	t
MSG_EOR	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const MSG_EOR* = cint(8)$/;"	t
MSG_EOR	$NIMLIB/posix/posix_other_consts.nim	/^var MSG_EOR* {.importc: "MSG_EOR", header: "<sys\/socket.h>".}: cint$/;"	t
MSG_MORE	$NIMLIB/posix/posix_freertos_consts.nim	/^const MSG_MORE*       = 0x10    # Sender will send more$/;"	t
MSG_NOSIGNAL	$NIMLIB/posix/posix_haiku.nim	/^    MSG_NOSIGNAL* {.importc, header: "<sys\/socket.h>".}: cint$/;"	t
MSG_NOSIGNAL	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const MSG_NOSIGNAL* = cint(16384)$/;"	t
MSG_NOSIGNAL	$NIMLIB/posix/posix_macos_amd64.nim	/^    MSG_NOSIGNAL* {.importc, header: "<sys\/socket.h>".}: cint$/;"	t
MSG_NOSIGNAL	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const MSG_NOSIGNAL* = cint(131072)$/;"	t
MSG_NOSIGNAL	$NIMLIB/posix/posix_openbsd_amd64.nim	/^var MSG_NOSIGNAL* {.importc, header: "<sys\/socket.h>".}: cint$/;"	t
MSG_NOSIGNAL	$NIMLIB/posix/posix_other.nim	/^    MSG_NOSIGNAL* {.importc, header: "<sys\/socket.h>".}: cint$/;"	t
MSG_OOB	$NIMLIB/posix/posix_freertos_consts.nim	/^const MSG_OOB*        = 0x04    # Unimplemented: Requests out-of-band data. The significance and/;"	t
MSG_OOB	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const MSG_OOB* = cint(1)$/;"	t
MSG_OOB	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const MSG_OOB* = cint(1)$/;"	t
MSG_OOB	$NIMLIB/posix/posix_other_consts.nim	/^var MSG_OOB* {.importc: "MSG_OOB", header: "<sys\/socket.h>".}: cint$/;"	t
MSG_PEEK	$NIMLIB/posix/posix_freertos_consts.nim	/^const MSG_PEEK*       = 0x01    # Peeks at an incoming message$/;"	t
MSG_PEEK	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const MSG_PEEK* = cint(2)$/;"	t
MSG_PEEK	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const MSG_PEEK* = cint(2)$/;"	t
MSG_PEEK	$NIMLIB/posix/posix_other_consts.nim	/^var MSG_PEEK* {.importc: "MSG_PEEK", header: "<sys\/socket.h>".}: cint$/;"	t
MSG_PEEK	$NIMLIB/windows/winlean.nim	/^  MSG_PEEK* = 2$/;"	t
MSG_TRUNC	$NIMLIB/posix/posix_freertos_consts.nim	/^const MSG_TRUNC*   = 0x04$/;"	t
MSG_TRUNC	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const MSG_TRUNC* = cint(32)$/;"	t
MSG_TRUNC	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const MSG_TRUNC* = cint(16)$/;"	t
MSG_TRUNC	$NIMLIB/posix/posix_other_consts.nim	/^var MSG_TRUNC* {.importc: "MSG_TRUNC", header: "<sys\/socket.h>".}: cint$/;"	t
MSG_WAITALL	$NIMLIB/posix/posix_freertos_consts.nim	/^const MSG_WAITALL*    = 0x02    # Unimplemented: Requests that the function block until the full/;"	t
MSG_WAITALL	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const MSG_WAITALL* = cint(256)$/;"	t
MSG_WAITALL	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const MSG_WAITALL* = cint(64)$/;"	t
MSG_WAITALL	$NIMLIB/posix/posix_other_consts.nim	/^var MSG_WAITALL* {.importc: "MSG_WAITALL", header: "<sys\/socket.h>".}: cint$/;"	t
MS_ASYNC	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const MS_ASYNC* = cint(1)$/;"	t
MS_ASYNC	$NIMLIB/posix/posix_other_consts.nim	/^var MS_ASYNC* {.importc: "MS_ASYNC", header: "<sys\/mman.h>".}: cint$/;"	t
MS_INVALIDATE	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const MS_INVALIDATE* = cint(2)$/;"	t
MS_INVALIDATE	$NIMLIB/posix/posix_other_consts.nim	/^var MS_INVALIDATE* {.importc: "MS_INVALIDATE", header: "<sys\/mman.h>".}: cint$/;"	t
MS_SYNC	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const MS_SYNC* = cint(4)$/;"	t
MS_SYNC	$NIMLIB/posix/posix_other_consts.nim	/^var MS_SYNC* {.importc: "MS_SYNC", header: "<sys\/mman.h>".}: cint$/;"	t
MULTILINE	$NIMLIB/wrappers/pcre.nim	/^  MULTILINE*         = 0x00000002  # C1$/;"	t
Math	$NIMLIB/js/jscore.nim	/^  Math* {.importc, nodecl.}: MathLib$/;"	t
MathLib	$NIMLIB/js/jscore.nim	/^  MathLib* = ref object$/;"	t
MaxDistinguishedThread	$NIMLIB/pure/concurrency/threadpool.nim	/^  MaxDistinguishedThread* {.intdefine.} = 32 ## Maximum number of "distinguished" threads.$/;"	t
MaxFloat32Precision	$NIMLIB/pure/math.nim	/^  MaxFloat32Precision* = 8                   ## Maximum number of meaningful digits$/;"	t
MaxFloat64Precision	$NIMLIB/pure/math.nim	/^  MaxFloat64Precision* = 16                  ## Maximum number of meaningful digits$/;"	t
MaxFloatPrecision	$NIMLIB/pure/math.nim	/^  MaxFloatPrecision* = MaxFloat64Precision   ## Maximum number of$/;"	t
MaxLineLength	$NIMLIB/pure/net.nim	/^  MaxLineLength* = 1_000_000$/;"	t
MaxReBufSize	$NIMLIB/impure/re.nim	/^const MaxReBufSize* = high(cint)$/;"	t
MaxSubpatterns	$NIMLIB/impure/re.nim	/^  MaxSubpatterns* = 20$/;"	t
MaxSubpatterns	$NIMLIB/pure/pegs.nim	/^  MaxSubpatterns* = 20 ## defines the maximum number of subpatterns that$/;"	t
MaxThreadPoolSize	$NIMLIB/pure/concurrency/threadpool.nim	/^  MaxThreadPoolSize* {.intdefine.} = 256 ## Maximum size of the thread pool. 256 threads$/;"	t
MediaQueryList	$NIMLIB/js/dom.nim	/^  MediaQueryList* {.importc.} = ref object of EventTarget$/;"	t
MemAccessFlags	$NIMLIB/pure/reservedmem.nim	/^  MemAccessFlags* = int$/;"	t
MemFile	$NIMLIB/pure/memfiles.nim	/^  MemFile* = object      ## represents a memory mapped file$/;"	t
MemMapFileStream	$NIMLIB/pure/memfiles.nim	/^  MemMapFileStream* = ref MemMapFileStreamObj ## a stream that encapsulates a `MemFile`$/;"	t
MemMapFileStreamObj	$NIMLIB/pure/memfiles.nim	/^  MemMapFileStreamObj* = object of Stream$/;"	t
MemProfilerHook	$NIMLIB/system/profiler.nim	/^    MemProfilerHook* = proc (st: StackTrace, requestedSize: int) {.nimcall, gcsafe.}$/;"	t
MemRegion	$NIMLIB/system/gc_regions.nim	/^  MemRegion* = object$/;"	t
MemSlice	$NIMLIB/pure/memfiles.nim	/^type MemSlice* = object ## represent slice of a MemFile for iteration over delimited lines\/reco/;"	t
MemoryOrder	$NIMLIB/pure/concurrency/atomics.nim	/^    MemoryOrder* {.importcpp: "std::memory_order".} = enum$/;"	t
MenuBar	$NIMLIB/js/dom.nim	/^  MenuBar* = LocationBar$/;"	t
MersenneTwister	$NIMLIB/deprecated/pure/mersenne.nim	/^  MersenneTwister* = object$/;"	t
MetaEnum	$NIMLIB/packages/docutils/rstgen.nim	/^  MetaEnum* = enum$/;"	t
MimeDB	$NIMLIB/pure/mimetypes.nim	/^  MimeDB* = object$/;"	t
MimeType	$NIMLIB/js/dom.nim	/^  MimeType* {.importc.} = object of RootObj$/;"	t
MinFloatNormal	$NIMLIB/pure/math.nim	/^  MinFloatNormal* = 2.225073858507201e-308   ## Smallest normal number for Nim's$/;"	t
MinuteRange	$NIMLIB/pure/times.nim	/^  MinuteRange* = range[0..59]$/;"	t
Mode	$NIMLIB/posix/posix_haiku.nim	/^  Mode* {.importc: "mode_t", header: "<sys\/types.h>".} = ($/;"	t
Mode	$NIMLIB/posix/posix_linux_amd64.nim	/^  Mode* {.importc: "mode_t", header: "<sys\/types.h>".} = uint32$/;"	t
Mode	$NIMLIB/posix/posix_macos_amd64.nim	/^  Mode* {.importc: "mode_t", header: "<sys\/types.h>".} = ($/;"	t
Mode	$NIMLIB/posix/posix_nintendoswitch.nim	/^  Mode* {.importc: "mode_t", header: "<sys\/types.h>".} = uint16$/;"	t
Mode	$NIMLIB/posix/posix_openbsd_amd64.nim	/^  Mode* {.importc: "mode_t", header: "<sys\/types.h>".} = uint32$/;"	t
Mode	$NIMLIB/posix/posix_other.nim	/^  Mode* {.importc: "mode_t", header: "<sys\/types.h>".} = ($/;"	t
MonoTime	$NIMLIB/std/monotimes.nim	/^  MonoTime* = object ## Represents a monotonic timestamp.$/;"	t
Month	$NIMLIB/pure/times.nim	/^  Month* = enum ## Represents a month. Note that the enum starts at `1`,$/;"	t
MonthdayRange	$NIMLIB/pure/times.nim	/^  MonthdayRange* = range[1..31]$/;"	t
MouseButtons	$NIMLIB/js/dom.nim	/^  MouseButtons* = enum$/;"	t
MouseEvent	$NIMLIB/js/dom.nim	/^  MouseEvent* {.importc.} = ref object of UIEvent ## see `docs<https:\/\/developer.mozilla.org\//;"	t
Mqd	$NIMLIB/posix/posix_haiku.nim	/^  Mqd* {.importc: "mqd_t", header: "<mqueue.h>", final, pure.} = object$/;"	t
Mqd	$NIMLIB/posix/posix_linux_amd64.nim	/^  Mqd* {.importc: "mqd_t", header: "<mqueue.h>".} = cint$/;"	t
Mqd	$NIMLIB/posix/posix_macos_amd64.nim	/^    Mqd* {.importc: "mqd_t", header: "<mqueue.h>", final, pure.} = object$/;"	t
Mqd	$NIMLIB/posix/posix_openbsd_amd64.nim	/^  Mqd* {.importc: "mqd_t", header: "<mqueue.h>", final, pure.} = object$/;"	t
Mqd	$NIMLIB/posix/posix_other.nim	/^  Mqd* {.importc: "mqd_t", header: "<mqueue.h>", final, pure.} = object$/;"	t
MsgClass	$NIMLIB/packages/docutils/rst.nim	/^  MsgClass* = enum$/;"	t
MsgHandler	$NIMLIB/packages/docutils/rst.nim	/^  MsgHandler* = proc (filename: string, line, col: int, msgKind: MsgKind,$/;"	t
MsgKind	$NIMLIB/packages/docutils/rst.nim	/^  MsgKind* = enum          ## the possible messages$/;"	t
MultipartData	$NIMLIB/pure/httpclient.nim	/^  MultipartData* = ref object$/;"	t
MultipartEntries	$NIMLIB/pure/httpclient.nim	/^  MultipartEntries* = openArray[tuple[name, content: string]]$/;"	t
MultipleValueSetting	$NIMLIB/std/compilesettings.nim	/^  MultipleValueSetting* {.pure.} = enum ## \\$/;"	t
NCCS	$NIMLIB/posix/termios.nim	/^  NCCS* = when defined(macosx): 20 else: 32$/;"	t
NEPOLL_MAX	$NIMLIB/posix/posix_other_consts.nim	/^  var NEPOLL_MAX* {.importc: "CONFIG_FS_NEPOLL_DESCRIPTORS", header: "<nuttx\/config.h>".}: cint$/;"	t
NETDB_ELEM_SIZE	$NIMLIB/posix/posix_freertos_consts.nim	/^var NETDB_ELEM_SIZE* {.importc: "NETDB_ELEM_SIZE", header: "<netdb.h>".}: cint$/;"	t
NETIF_ADDR_IDX_MAX	$NIMLIB/posix/posix_freertos_consts.nim	/^var NETIF_ADDR_IDX_MAX* {.importc: "NETIF_ADDR_IDX_MAX", header: "<netif.h>".}: cint$/;"	t
NETIF_CHECKSUM_CHECK_ICMP	$NIMLIB/posix/posix_freertos_consts.nim	/^var NETIF_CHECKSUM_CHECK_ICMP* {.importc: "NETIF_CHECKSUM_CHECK_ICMP", header: "<netif.h>".}: ci/;"	t
NETIF_CHECKSUM_CHECK_ICMP6	$NIMLIB/posix/posix_freertos_consts.nim	/^var NETIF_CHECKSUM_CHECK_ICMP6* {.importc: "NETIF_CHECKSUM_CHECK_ICMP6", header: "<netif.h>".}: /;"	t
NETIF_CHECKSUM_CHECK_IP	$NIMLIB/posix/posix_freertos_consts.nim	/^var NETIF_CHECKSUM_CHECK_IP* {.importc: "NETIF_CHECKSUM_CHECK_IP", header: "<netif.h>".}: cint$/;"	t
NETIF_CHECKSUM_CHECK_TCP	$NIMLIB/posix/posix_freertos_consts.nim	/^var NETIF_CHECKSUM_CHECK_TCP* {.importc: "NETIF_CHECKSUM_CHECK_TCP", header: "<netif.h>".}: cint$/;"	t
NETIF_CHECKSUM_CHECK_UDP	$NIMLIB/posix/posix_freertos_consts.nim	/^var NETIF_CHECKSUM_CHECK_UDP* {.importc: "NETIF_CHECKSUM_CHECK_UDP", header: "<netif.h>".}: cint$/;"	t
NETIF_CHECKSUM_DISABLE_ALL	$NIMLIB/posix/posix_freertos_consts.nim	/^var NETIF_CHECKSUM_DISABLE_ALL* {.importc: "NETIF_CHECKSUM_DISABLE_ALL", header: "<netif.h>".}: /;"	t
NETIF_CHECKSUM_ENABLE_ALL	$NIMLIB/posix/posix_freertos_consts.nim	/^var NETIF_CHECKSUM_ENABLE_ALL* {.importc: "NETIF_CHECKSUM_ENABLE_ALL", header: "<netif.h>".}: ci/;"	t
NETIF_CHECKSUM_GEN_ICMP	$NIMLIB/posix/posix_freertos_consts.nim	/^var NETIF_CHECKSUM_GEN_ICMP* {.importc: "NETIF_CHECKSUM_GEN_ICMP", header: "<netif.h>".}: cint$/;"	t
NETIF_CHECKSUM_GEN_ICMP6	$NIMLIB/posix/posix_freertos_consts.nim	/^var NETIF_CHECKSUM_GEN_ICMP6* {.importc: "NETIF_CHECKSUM_GEN_ICMP6", header: "<netif.h>".}: cint$/;"	t
NETIF_CHECKSUM_GEN_IP	$NIMLIB/posix/posix_freertos_consts.nim	/^var NETIF_CHECKSUM_GEN_IP* {.importc: "NETIF_CHECKSUM_GEN_IP", header: "<netif.h>".}: cint$/;"	t
NETIF_CHECKSUM_GEN_TCP	$NIMLIB/posix/posix_freertos_consts.nim	/^var NETIF_CHECKSUM_GEN_TCP* {.importc: "NETIF_CHECKSUM_GEN_TCP", header: "<netif.h>".}: cint$/;"	t
NETIF_CHECKSUM_GEN_UDP	$NIMLIB/posix/posix_freertos_consts.nim	/^var NETIF_CHECKSUM_GEN_UDP* {.importc: "NETIF_CHECKSUM_GEN_UDP", header: "<netif.h>".}: cint$/;"	t
NETIF_FLAG_BROADCAST	$NIMLIB/posix/posix_freertos_consts.nim	/^var NETIF_FLAG_BROADCAST* {.importc: "NETIF_FLAG_BROADCAST", header: "<netif.h>".}: cint$/;"	t
NETIF_FLAG_ETHARP	$NIMLIB/posix/posix_freertos_consts.nim	/^var NETIF_FLAG_ETHARP* {.importc: "NETIF_FLAG_ETHARP", header: "<netif.h>".}: cint$/;"	t
NETIF_FLAG_ETHERNET	$NIMLIB/posix/posix_freertos_consts.nim	/^var NETIF_FLAG_ETHERNET* {.importc: "NETIF_FLAG_ETHERNET", header: "<netif.h>".}: cint$/;"	t
NETIF_FLAG_GARP	$NIMLIB/posix/posix_freertos_consts.nim	/^var NETIF_FLAG_GARP* {.importc: "NETIF_FLAG_GARP", header: "<netif.h>".}: cint$/;"	t
NETIF_FLAG_IGMP	$NIMLIB/posix/posix_freertos_consts.nim	/^var NETIF_FLAG_IGMP* {.importc: "NETIF_FLAG_IGMP", header: "<netif.h>".}: cint$/;"	t
NETIF_FLAG_LINK_UP	$NIMLIB/posix/posix_freertos_consts.nim	/^var NETIF_FLAG_LINK_UP* {.importc: "NETIF_FLAG_LINK_UP", header: "<netif.h>".}: cint$/;"	t
NETIF_FLAG_MLD6	$NIMLIB/posix/posix_freertos_consts.nim	/^var NETIF_FLAG_MLD6* {.importc: "NETIF_FLAG_MLD6", header: "<netif.h>".}: cint$/;"	t
NETIF_FLAG_UP	$NIMLIB/posix/posix_freertos_consts.nim	/^var NETIF_FLAG_UP* {.importc: "NETIF_FLAG_UP", header: "<netif.h>".}: cint$/;"	t
NETIF_MAX_HWADDR_LEN	$NIMLIB/posix/posix_freertos_consts.nim	/^var NETIF_MAX_HWADDR_LEN* {.importc: "NETIF_MAX_HWADDR_LEN", header: "<netif.h>".}: cint$/;"	t
NETIF_NAMESIZE	$NIMLIB/posix/posix_freertos_consts.nim	/^var NETIF_NAMESIZE* {.importc: "NETIF_NAMESIZE", header: "<netif.h>".}: cint$/;"	t
NETIF_NO_INDEX	$NIMLIB/posix/posix_freertos_consts.nim	/^var NETIF_NO_INDEX* {.importc: "NETIF_NO_INDEX", header: "<netif.h>".}: cint$/;"	t
NEVER_UTF	$NIMLIB/wrappers/pcre.nim	/^  NEVER_UTF*         = 0x00010000  # C1        ) Overlaid$/;"	t
NEWLINE_ANY	$NIMLIB/wrappers/pcre.nim	/^  NEWLINE_ANY*       = 0x00400000  # C3 E D$/;"	t
NEWLINE_ANYCRLF	$NIMLIB/wrappers/pcre.nim	/^  NEWLINE_ANYCRLF*   = 0x00500000  # C3 E D$/;"	t
NEWLINE_CR	$NIMLIB/wrappers/pcre.nim	/^  NEWLINE_CR*        = 0x00100000  # C3 E D$/;"	t
NEWLINE_CRLF	$NIMLIB/wrappers/pcre.nim	/^  NEWLINE_CRLF*      = 0x00300000  # C3 E D$/;"	t
NEWLINE_LF	$NIMLIB/wrappers/pcre.nim	/^  NEWLINE_LF*        = 0x00200000  # C3 E D$/;"	t
NI_DGRAM	$NIMLIB/posix/posix_freertos_consts.nim	/^var NI_DGRAM* {.importc: "NI_DGRAM", header: "<netdb.h>".}: cint$/;"	t
NI_DGRAM	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const NI_DGRAM* = cint(16)$/;"	t
NI_DGRAM	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const NI_DGRAM* = cint(16)$/;"	t
NI_DGRAM	$NIMLIB/posix/posix_other_consts.nim	/^var NI_DGRAM* {.importc: "NI_DGRAM", header: "<netdb.h>".}: cint$/;"	t
NI_NAMEREQD	$NIMLIB/posix/posix_freertos_consts.nim	/^var NI_NAMEREQD* {.importc: "NI_NAMEREQD", header: "<netdb.h>".}: cint$/;"	t
NI_NAMEREQD	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const NI_NAMEREQD* = cint(8)$/;"	t
NI_NAMEREQD	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const NI_NAMEREQD* = cint(4)$/;"	t
NI_NAMEREQD	$NIMLIB/posix/posix_other_consts.nim	/^var NI_NAMEREQD* {.importc: "NI_NAMEREQD", header: "<netdb.h>".}: cint$/;"	t
NI_NOFQDN	$NIMLIB/posix/posix_freertos_consts.nim	/^var NI_NOFQDN* {.importc: "NI_NOFQDN", header: "<netdb.h>".}: cint$/;"	t
NI_NOFQDN	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const NI_NOFQDN* = cint(4)$/;"	t
NI_NOFQDN	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const NI_NOFQDN* = cint(1)$/;"	t
NI_NOFQDN	$NIMLIB/posix/posix_other_consts.nim	/^var NI_NOFQDN* {.importc: "NI_NOFQDN", header: "<netdb.h>".}: cint$/;"	t
NI_NUMERICHOST	$NIMLIB/posix/posix_freertos_consts.nim	/^var NI_NUMERICHOST* {.importc: "NI_NUMERICHOST", header: "<netdb.h>".}: cint$/;"	t
NI_NUMERICHOST	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const NI_NUMERICHOST* = cint(1)$/;"	t
NI_NUMERICHOST	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const NI_NUMERICHOST* = cint(2)$/;"	t
NI_NUMERICHOST	$NIMLIB/posix/posix_other_consts.nim	/^var NI_NUMERICHOST* {.importc: "NI_NUMERICHOST", header: "<netdb.h>".}: cint$/;"	t
NI_NUMERICSCOPE	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const NI_NUMERICSCOPE* = cint(32)$/;"	t
NI_NUMERICSCOPE	$NIMLIB/posix/posix_other_consts.nim	/^var NI_NUMERICSCOPE* {.importc: "NI_NUMERICSCOPE", header: "<netdb.h>".}: cint$/;"	t
NI_NUMERICSERV	$NIMLIB/posix/posix_freertos_consts.nim	/^var NI_NUMERICSERV* {.importc: "NI_NUMERICSERV", header: "<netdb.h>".}: cint$/;"	t
NI_NUMERICSERV	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const NI_NUMERICSERV* = cint(2)$/;"	t
NI_NUMERICSERV	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const NI_NUMERICSERV* = cint(8)$/;"	t
NI_NUMERICSERV	$NIMLIB/posix/posix_other_consts.nim	/^var NI_NUMERICSERV* {.importc: "NI_NUMERICSERV", header: "<netdb.h>".}: cint$/;"	t
NL0	$NIMLIB/posix/termios.nim	/^  NL0* {.importc, header: "<termios.h>".}: Cflag$/;"	t
NL1	$NIMLIB/posix/termios.nim	/^  NL1* {.importc, header: "<termios.h>".}: Cflag$/;"	t
NLDLY	$NIMLIB/posix/termios.nim	/^  NLDLY* {.importc, header: "<termios.h>".}: Cflag$/;"	t
NL_CAT_LOCALE	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const NL_CAT_LOCALE* = cint(1)$/;"	t
NL_CAT_LOCALE	$NIMLIB/posix/posix_other_consts.nim	/^var NL_CAT_LOCALE* {.importc: "NL_CAT_LOCALE", header: "<nl_types.h>".}: cint$/;"	t
NL_SETD	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const NL_SETD* = cint(1)$/;"	t
NL_SETD	$NIMLIB/posix/posix_other_consts.nim	/^var NL_SETD* {.importc: "NL_SETD", header: "<nl_types.h>".}: cint$/;"	t
NOEXPR	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const NOEXPR* = cint(327681)$/;"	t
NOEXPR	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const NOEXPR* = cint(53)$/;"	t
NOEXPR	$NIMLIB/posix/posix_other_consts.nim	/^var NOEXPR* {.importc: "NOEXPR", header: "<langinfo.h>".}: cint$/;"	t
NOFLSH	$NIMLIB/posix/termios.nim	/^  NOFLSH* {.importc, header: "<termios.h>".}: Cflag$/;"	t
NORMAL_PRIORITY_CLASS	$NIMLIB/windows/winlean.nim	/^  NORMAL_PRIORITY_CLASS* = 32'i32$/;"	t
NOTBOL	$NIMLIB/wrappers/pcre.nim	/^  NOTBOL*            = 0x00000080  #    E D J$/;"	t
NOTEMPTY	$NIMLIB/wrappers/pcre.nim	/^  NOTEMPTY*          = 0x00000400  #    E D J$/;"	t
NOTEMPTY_ATSTART	$NIMLIB/wrappers/pcre.nim	/^  NOTEMPTY_ATSTART*  = 0x10000000  #    E D J$/;"	t
NOTEOL	$NIMLIB/wrappers/pcre.nim	/^  NOTEOL*            = 0x00000100  #    E D J$/;"	t
NOTE_ATTRIB	$NIMLIB/posix/kqueue.nim	/^  NOTE_ATTRIB*     = 0x0008 ## attributes changed$/;"	t
NOTE_CHILD	$NIMLIB/posix/kqueue.nim	/^  NOTE_CHILD*      = 0x00000004'u32 ## am a child process$/;"	t
NOTE_DELETE	$NIMLIB/posix/kqueue.nim	/^  NOTE_DELETE*     = 0x0001 ## vnode was removed$/;"	t
NOTE_EXEC	$NIMLIB/posix/kqueue.nim	/^  NOTE_EXEC*       = 0x20000000'u32 ## process exec'd$/;"	t
NOTE_EXIT	$NIMLIB/posix/kqueue.nim	/^  NOTE_EXIT*       = 0x80000000'u32 ## process exited$/;"	t
NOTE_EXTEND	$NIMLIB/posix/kqueue.nim	/^  NOTE_EXTEND*     = 0x0004 ## size increased$/;"	t
NOTE_FFAND	$NIMLIB/posix/kqueue.nim	/^    NOTE_FFAND*      = 0x40000000'u32 ## AND fflags$/;"	t
NOTE_FFCOPY	$NIMLIB/posix/kqueue.nim	/^    NOTE_FFCOPY*     = 0xc0000000'u32 ## copy fflags$/;"	t
NOTE_FFCTRLMASK	$NIMLIB/posix/kqueue.nim	/^    NOTE_FFCTRLMASK* = 0xc0000000'u32 ## masks for operations$/;"	t
NOTE_FFLAGSMASK	$NIMLIB/posix/kqueue.nim	/^    NOTE_FFLAGSMASK* = 0x00ffffff'u32$/;"	t
NOTE_FFNOP	$NIMLIB/posix/kqueue.nim	/^    NOTE_FFNOP*      = 0x00000000'u32 ## ignore input fflags$/;"	t
NOTE_FFOR	$NIMLIB/posix/kqueue.nim	/^    NOTE_FFOR*       = 0x80000000'u32 ## OR fflags$/;"	t
NOTE_FORK	$NIMLIB/posix/kqueue.nim	/^  NOTE_FORK*       = 0x40000000'u32 ## process forked$/;"	t
NOTE_LINK	$NIMLIB/posix/kqueue.nim	/^  NOTE_LINK*       = 0x0010 ## link count changed$/;"	t
NOTE_LOWAT	$NIMLIB/posix/kqueue.nim	/^  NOTE_LOWAT*      = 0x0001 ## low water mark$/;"	t
NOTE_MSECONDS	$NIMLIB/posix/kqueue.nim	/^    NOTE_MSECONDS*   = 0x00000002'u32 ## data is milliseconds$/;"	t
NOTE_NSECONDS	$NIMLIB/posix/kqueue.nim	/^    NOTE_NSECONDS*   = 0x00000008'u32 ## data is nanoseconds$/;"	t
NOTE_PCTRLMASK	$NIMLIB/posix/kqueue.nim	/^  NOTE_PCTRLMASK*  = 0xf0000000'u32 ## mask for hint bits$/;"	t
NOTE_PDATAMASK	$NIMLIB/posix/kqueue.nim	/^  NOTE_PDATAMASK*  = 0x000fffff'u32 ## mask for pid$/;"	t
NOTE_RENAME	$NIMLIB/posix/kqueue.nim	/^  NOTE_RENAME*     = 0x0020 ## vnode was renamed$/;"	t
NOTE_REVOKE	$NIMLIB/posix/kqueue.nim	/^  NOTE_REVOKE*     = 0x0040 ## vnode access was revoked$/;"	t
NOTE_SECONDS	$NIMLIB/posix/kqueue.nim	/^    NOTE_SECONDS*    = 0x00000001'u32 ## data is seconds$/;"	t
NOTE_TRACK	$NIMLIB/posix/kqueue.nim	/^  NOTE_TRACK*      = 0x00000001'u32 ## follow across forks$/;"	t
NOTE_TRACKERR	$NIMLIB/posix/kqueue.nim	/^  NOTE_TRACKERR*   = 0x00000002'u32 ## could not track child$/;"	t
NOTE_TRIGGER	$NIMLIB/posix/kqueue.nim	/^    NOTE_TRIGGER*    = 0x01000000'u32 ## Cause the event to be triggered$/;"	t
NOTE_USECONDS	$NIMLIB/posix/kqueue.nim	/^    NOTE_USECONDS*   = 0x00000004'u32 ## data is microseconds$/;"	t
NOTE_WRITE	$NIMLIB/posix/kqueue.nim	/^  NOTE_WRITE*      = 0x0002 ## data contents changed$/;"	t
NO_AUTO_CAPTURE	$NIMLIB/wrappers/pcre.nim	/^  NO_AUTO_CAPTURE*   = 0x00001000  # C1$/;"	t
NO_AUTO_POSSESS	$NIMLIB/wrappers/pcre.nim	/^  NO_AUTO_POSSESS*   = 0x00020000  # C1        ) Overlaid$/;"	t
NO_DATA	$NIMLIB/posix/posix_freertos_consts.nim	/^var NO_DATA* {.importc: "NO_DATA", header: "<netdb.h>".}: cint$/;"	t
NO_DATA	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const NO_DATA* = cint(4)$/;"	t
NO_DATA	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const NO_DATA* = cint(4)$/;"	t
NO_DATA	$NIMLIB/posix/posix_other_consts.nim	/^var NO_DATA* {.importc: "NO_DATA", header: "<netdb.h>".}: cint$/;"	t
NO_ERROR	$NIMLIB/windows/winlean.nim	/^  NO_ERROR* = 0'i32$/;"	t
NO_RECOVERY	$NIMLIB/posix/posix_freertos_consts.nim	/^var NO_RECOVERY* {.importc: "NO_RECOVERY", header: "<netdb.h>".}: cint$/;"	t
NO_RECOVERY	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const NO_RECOVERY* = cint(3)$/;"	t
NO_RECOVERY	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const NO_RECOVERY* = cint(3)$/;"	t
NO_RECOVERY	$NIMLIB/posix/posix_other_consts.nim	/^var NO_RECOVERY* {.importc: "NO_RECOVERY", header: "<netdb.h>".}: cint$/;"	t
NO_START_OPTIMISE	$NIMLIB/wrappers/pcre.nim	/^  NO_START_OPTIMISE* = 0x04000000  # C2 E D    )$/;"	t
NO_START_OPTIMIZE	$NIMLIB/wrappers/pcre.nim	/^  NO_START_OPTIMIZE* = 0x04000000  # C2 E D    ) Synonyms$/;"	t
NO_UTF16_CHECK	$NIMLIB/wrappers/pcre.nim	/^  NO_UTF16_CHECK*    = 0x00002000  # C1 E D J  ) Synonyms$/;"	t
NO_UTF32_CHECK	$NIMLIB/wrappers/pcre.nim	/^  NO_UTF32_CHECK*    = 0x00002000  # C1 E D J  )$/;"	t
NO_UTF8_CHECK	$NIMLIB/wrappers/pcre.nim	/^  NO_UTF8_CHECK*     = 0x00002000  # C1 E D J  )$/;"	t
NaN	$NIMLIB/system.nim	/^  NaN* = 0x7FF7FFFFFFFFFFFF'f64$/;"	t
NanosecondRange	$NIMLIB/pure/times.nim	/^  NanosecondRange* = range[0..999_999_999]$/;"	t
Natural	$NIMLIB/system.nim	/^  Natural* = range[0..high(int)]$/;"	t
Navigator	$NIMLIB/js/dom.nim	/^  Navigator* {.importc.} = ref object of RootObj$/;"	t
NegInf	$NIMLIB/system.nim	/^  NegInf* = 0xFFF0000000000000'f64$/;"	t
NewLines	$NIMLIB/pure/lexbase.nim	/^  NewLines* = {'\\c', '\\L'}$/;"	t
Newlines	$NIMLIB/pure/strutils.nim	/^  Newlines* = {'\\13', '\\10'}$/;"	t
NilAccessDefect	$NIMLIB/system/exceptions.nim	/^  NilAccessDefect* = object of Defect ## \\$/;"	t
NilAccessError	$NIMLIB/system/exceptions.nim	/^    NilAccessError* {.deprecated: "See corresponding Defect".} = NilAccessDefect$/;"	t
NimAsyncContinueSuffix	$NIMLIB/pure/asyncfutures.nim	/^  NimAsyncContinueSuffix* = "NimAsyncContinue" ## For internal usage. Do not use.$/;"	t
NimIdent	$NIMLIB/core/macros.nim	/^  NimIdent* {.deprecated.} = object of RootObj$/;"	t
NimMajor	$NIMLIB/system/compilation.nim	/^  NimMajor* {.intdefine.}: int = 1$/;"	t
NimMinor	$NIMLIB/system/compilation.nim	/^  NimMinor* {.intdefine.}: int = 9$/;"	t
NimNode	$NIMLIB/system.nim	/^  NimNode* {.magic: "PNimrodNode".} = ref NimNodeObj$/;"	t
NimNodeKind	$NIMLIB/core/macros.nim	/^  NimNodeKind* = enum$/;"	t
NimNodeKinds	$NIMLIB/core/macros.nim	/^  NimNodeKinds* = set[NimNodeKind]$/;"	t
NimPatch	$NIMLIB/system/compilation.nim	/^  NimPatch* {.intdefine.}: int = 1$/;"	t
NimSeqV2	$NIMLIB/system/seqs_v2.nim	/^  NimSeqV2*[T] = object # \\$/;"	t
NimSym	$NIMLIB/core/macros.nim	/^  NimSym* {.deprecated.} = ref NimSymObj$/;"	t
NimSymKind	$NIMLIB/core/macros.nim	/^  NimSymKind* = enum$/;"	t
NimTypeKind	$NIMLIB/core/macros.nim	/^  NimTypeKind* = enum  # some types are no longer used, see ast.nim$/;"	t
NimVersion	$NIMLIB/system.nim	/^  NimVersion*: string = $NimMajor & "." & $NimMinor & "." & $NimPatch$/;"	t
Nl_catd	$NIMLIB/posix/posix_haiku.nim	/^  Nl_catd* {.importc: "nl_catd", header: "<nl_types.h>".} = cint$/;"	t
Nl_catd	$NIMLIB/posix/posix_linux_amd64.nim	/^  Nl_catd* {.importc: "nl_catd", header: "<nl_types.h>".} = pointer$/;"	t
Nl_catd	$NIMLIB/posix/posix_macos_amd64.nim	/^  Nl_catd* {.importc: "nl_catd", header: "<nl_types.h>".} = cint$/;"	t
Nl_catd	$NIMLIB/posix/posix_openbsd_amd64.nim	/^  Nl_catd* {.importc: "nl_catd", header: "<nl_types.h>".} = cint$/;"	t
Nl_catd	$NIMLIB/posix/posix_other.nim	/^  Nl_catd* {.importc: "nl_catd", header: "<nl_types.h>".} = cint$/;"	t
Nl_item	$NIMLIB/posix/posix_haiku.nim	/^  Nl_item* {.importc: "nl_item", header: "<nl_types.h>".} = cint$/;"	t
Nl_item	$NIMLIB/posix/posix_linux_amd64.nim	/^  Nl_item* {.importc: "nl_item", header: "<nl_types.h>".} = cint$/;"	t
Nl_item	$NIMLIB/posix/posix_macos_amd64.nim	/^  Nl_item* {.importc: "nl_item", header: "<nl_types.h>".} = cint$/;"	t
Nl_item	$NIMLIB/posix/posix_nintendoswitch.nim	/^  Nl_item* {.importc: "nl_item", header: "<langinfo.h>".} = cint$/;"	t
Nl_item	$NIMLIB/posix/posix_openbsd_amd64.nim	/^  Nl_item* {.importc: "nl_item", header: "<nl_types.h>".} = cint$/;"	t
Nl_item	$NIMLIB/posix/posix_other.nim	/^  Nl_item* {.importc: "nl_item", header: "<nl_types.h>".} = cint$/;"	t
Nlink	$NIMLIB/posix/posix_haiku.nim	/^  Nlink* {.importc: "nlink_t", header: "<sys\/types.h>".} = int32$/;"	t
Nlink	$NIMLIB/posix/posix_linux_amd64.nim	/^  Nlink* {.importc: "nlink_t", header: "<sys\/types.h>".} = culong$/;"	t
Nlink	$NIMLIB/posix/posix_macos_amd64.nim	/^  Nlink* {.importc: "nlink_t", header: "<sys\/types.h>".} = int16$/;"	t
Nlink	$NIMLIB/posix/posix_nintendoswitch.nim	/^  Nlink* {.importc: "nlink_t", header: "<sys\/types.h>".} = culong$/;"	t
Nlink	$NIMLIB/posix/posix_openbsd_amd64.nim	/^  Nlink* {.importc: "nlink_t", header: "<sys\/types.h>".} = int16$/;"	t
Nlink	$NIMLIB/posix/posix_other.nim	/^  Nlink* {.importc: "nlink_t", header: "<sys\/types.h>".} = int$/;"	t
Node	$NIMLIB/js/dom.nim	/^  Node* {.importc.} = ref object of EventTarget$/;"	t
NodeType	$NIMLIB/js/dom.nim	/^  NodeType* = enum$/;"	t
NonTerminal	$NIMLIB/pure/pegs.nim	/^  NonTerminal* = ref NonTerminalObj$/;"	t
NonTerminalFlag	$NIMLIB/pure/pegs.nim	/^  NonTerminalFlag* = enum$/;"	t
OCRNL	$NIMLIB/posix/termios.nim	/^  OCRNL* {.importc, header: "<termios.h>".}: Cflag$/;"	t
OFDEL	$NIMLIB/posix/termios.nim	/^  OFDEL* {.importc, header: "<termios.h>".}: Cflag$/;"	t
OFILL	$NIMLIB/posix/termios.nim	/^  OFILL* {.importc, header: "<termios.h>".}: Cflag$/;"	t
ONLCR	$NIMLIB/posix/termios.nim	/^  ONLCR* {.importc, header: "<termios.h>".}: Cflag$/;"	t
ONLRET	$NIMLIB/posix/termios.nim	/^  ONLRET* {.importc, header: "<termios.h>".}: Cflag$/;"	t
ONOCR	$NIMLIB/posix/termios.nim	/^  ONOCR* {.importc, header: "<termios.h>".}: Cflag$/;"	t
OPENSSL_DES_DECRYPT	$NIMLIB/wrappers/openssl.nim	/^  OPENSSL_DES_DECRYPT* = 0$/;"	t
OPENSSL_DES_ENCRYPT	$NIMLIB/wrappers/openssl.nim	/^  OPENSSL_DES_ENCRYPT* = 1$/;"	t
OPENSSL_config	$NIMLIB/wrappers/openssl.nim	/^proc OPENSSL_config*(configName: cstring){.cdecl, dynlib: DLLUtilName, importc.}$/;"	f
OPENSSL_init_ssl	$NIMLIB/wrappers/openssl.nim	/^    proc OPENSSL_init_ssl*(opts: uint64, settings: uint8): cint {.cdecl, dynlib: DLLSSLName, imp/;"	f
OPENSSL_sk_num	$NIMLIB/wrappers/openssl.nim	/^proc OPENSSL_sk_num*(stack: PSTACK): int {.cdecl, dynlib: DLLSSLName, importc.}$/;"	f
OPENSSL_sk_value	$NIMLIB/wrappers/openssl.nim	/^proc OPENSSL_sk_value*(stack: PSTACK, index: int): pointer {.cdecl,$/;"	f
OPEN_ALWAYS	$NIMLIB/windows/winlean.nim	/^  OPEN_ALWAYS* = 4'i32$/;"	t
OPEN_EXISTING	$NIMLIB/windows/winlean.nim	/^  OPEN_EXISTING* = 3'i32$/;"	t
OPOST	$NIMLIB/posix/termios.nim	/^  OPOST* {.importc, header: "<termios.h>".}: Cflag$/;"	t
OSError	$NIMLIB/system/exceptions.nim	/^  OSError* = object of CatchableError ## \\$/;"	t
OSErrorCode	$NIMLIB/std/oserrors.nim	/^  OSErrorCode* = distinct int32 ## Specifies an OS Error Code.$/;"	t
OSVERSIONINFO	$NIMLIB/windows/winlean.nim	/^  OSVERSIONINFO* = object$/;"	t
OVERLAPPED	$NIMLIB/windows/winlean.nim	/^  OVERLAPPED* {.pure, inheritable.} = object$/;"	t
O_ACCMODE	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const O_ACCMODE* = cint(3)$/;"	t
O_ACCMODE	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const O_ACCMODE* = cint(3)$/;"	t
O_ACCMODE	$NIMLIB/posix/posix_other_consts.nim	/^var O_ACCMODE* {.importc: "O_ACCMODE", header: "<fcntl.h>".}: cint$/;"	t
O_APPEND	$NIMLIB/posix/posix_freertos_consts.nim	/^var O_APPEND* {.importc: "O_APPEND", header: "<sys\/fcntl.h>".}: cint$/;"	t
O_APPEND	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const O_APPEND* = cint(1024)$/;"	t
O_APPEND	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const O_APPEND* = cint(8)$/;"	t
O_APPEND	$NIMLIB/posix/posix_other_consts.nim	/^var O_APPEND* {.importc: "O_APPEND", header: "<fcntl.h>".}: cint$/;"	t
O_CLOEXEC	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const O_CLOEXEC* = cint(524288)$/;"	t
O_CLOEXEC	$NIMLIB/posix/posix_other_consts.nim	/^var O_CLOEXEC* {.importc: "O_CLOEXEC", header: "<fcntl.h>".}: cint$/;"	t
O_CREAT	$NIMLIB/posix/posix_freertos_consts.nim	/^var O_CREAT* {.importc: "O_CREAT", header: "<sys\/fcntl.h>".}: cint$/;"	t
O_CREAT	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const O_CREAT* = cint(64)$/;"	t
O_CREAT	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const O_CREAT* = cint(512)$/;"	t
O_CREAT	$NIMLIB/posix/posix_other_consts.nim	/^var O_CREAT* {.importc: "O_CREAT", header: "<fcntl.h>".}: cint$/;"	t
O_DIRECT	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const O_DIRECT* = cint(16384)$/;"	t
O_DIRECT	$NIMLIB/posix/posix_other_consts.nim	/^  var O_DIRECT* {.importc: "O_DIRECT", header: "<fcntl.h>".}: cint$/;"	t
O_DSYNC	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const O_DSYNC* = cint(4096)$/;"	t
O_DSYNC	$NIMLIB/posix/posix_other_consts.nim	/^var O_DSYNC* {.importc: "O_DSYNC", header: "<fcntl.h>".}: cint$/;"	t
O_EXCL	$NIMLIB/posix/posix_freertos_consts.nim	/^var O_EXCL* {.importc: "O_EXCL", header: "<sys\/fcntl.h>".}: cint$/;"	t
O_EXCL	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const O_EXCL* = cint(128)$/;"	t
O_EXCL	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const O_EXCL* = cint(2048)$/;"	t
O_EXCL	$NIMLIB/posix/posix_other_consts.nim	/^var O_EXCL* {.importc: "O_EXCL", header: "<fcntl.h>".}: cint$/;"	t
O_NOATIME	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const O_NOATIME* = cint(262144)$/;"	t
O_NOATIME	$NIMLIB/posix/posix_other_consts.nim	/^  var O_NOATIME* {.importc: "O_NOATIME", header: "<fcntl.h>".}: cint$/;"	t
O_NOCTTY	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const O_NOCTTY* = cint(256)$/;"	t
O_NOCTTY	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const O_NOCTTY* = cint(32768)$/;"	t
O_NOCTTY	$NIMLIB/posix/posix_other_consts.nim	/^var O_NOCTTY* {.importc: "O_NOCTTY", header: "<fcntl.h>".}: cint$/;"	t
O_NONBLOCK	$NIMLIB/posix/posix_freertos_consts.nim	/^var O_NONBLOCK* {.importc: "O_NONBLOCK", header: "<sys\/fcntl.h>".}: cint$/;"	t
O_NONBLOCK	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const O_NONBLOCK* = cint(2048)$/;"	t
O_NONBLOCK	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const O_NONBLOCK* = cint(16384)$/;"	t
O_NONBLOCK	$NIMLIB/posix/posix_other_consts.nim	/^var O_NONBLOCK* {.importc: "O_NONBLOCK", header: "<fcntl.h>".}: cint$/;"	t
O_PATH	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const O_PATH* = cint(2097152)$/;"	t
O_PATH	$NIMLIB/posix/posix_other_consts.nim	/^  var O_PATH* {.importc: "O_PATH", header: "<fcntl.h>".}: cint$/;"	t
O_RDONLY	$NIMLIB/posix/posix_freertos_consts.nim	/^var O_RDONLY* {.importc: "O_RDONLY", header: "<sys\/fcntl.h>".}: cint$/;"	t
O_RDONLY	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const O_RDONLY* = cint(0)$/;"	t
O_RDONLY	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const O_RDONLY* = cint(0)$/;"	t
O_RDONLY	$NIMLIB/posix/posix_other_consts.nim	/^var O_RDONLY* {.importc: "O_RDONLY", header: "<fcntl.h>".}: cint$/;"	t
O_RDWR	$NIMLIB/posix/posix_freertos_consts.nim	/^var O_RDWR* {.importc: "O_RDWR", header: "<sys\/fcntl.h>".}: cint$/;"	t
O_RDWR	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const O_RDWR* = cint(2)$/;"	t
O_RDWR	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const O_RDWR* = cint(2)$/;"	t
O_RDWR	$NIMLIB/posix/posix_other_consts.nim	/^var O_RDWR* {.importc: "O_RDWR", header: "<fcntl.h>".}: cint$/;"	t
O_RSYNC	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const O_RSYNC* = cint(1052672)$/;"	t
O_RSYNC	$NIMLIB/posix/posix_other_consts.nim	/^var O_RSYNC* {.importc: "O_RSYNC", header: "<fcntl.h>".}: cint$/;"	t
O_SYNC	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const O_SYNC* = cint(1052672)$/;"	t
O_SYNC	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const O_SYNC* = cint(8192)$/;"	t
O_SYNC	$NIMLIB/posix/posix_other_consts.nim	/^var O_SYNC* {.importc: "O_SYNC", header: "<fcntl.h>".}: cint$/;"	t
O_TMPFILE	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const O_TMPFILE* = cint(4259840)$/;"	t
O_TMPFILE	$NIMLIB/posix/posix_other_consts.nim	/^  var O_TMPFILE* {.importc: "O_TMPFILE", header: "<fcntl.h>".}: cint$/;"	t
O_TRUNC	$NIMLIB/posix/posix_freertos_consts.nim	/^var O_TRUNC* {.importc: "O_TRUNC", header: "<sys\/fcntl.h>".}: cint$/;"	t
O_TRUNC	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const O_TRUNC* = cint(512)$/;"	t
O_TRUNC	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const O_TRUNC* = cint(1024)$/;"	t
O_TRUNC	$NIMLIB/posix/posix_other_consts.nim	/^var O_TRUNC* {.importc: "O_TRUNC", header: "<fcntl.h>".}: cint$/;"	t
O_WRONLY	$NIMLIB/posix/posix_freertos_consts.nim	/^var O_WRONLY* {.importc: "O_WRONLY", header: "<sys\/fcntl.h>".}: cint$/;"	t
O_WRONLY	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const O_WRONLY* = cint(1)$/;"	t
O_WRONLY	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const O_WRONLY* = cint(1)$/;"	t
O_WRONLY	$NIMLIB/posix/posix_other_consts.nim	/^var O_WRONLY* {.importc: "O_WRONLY", header: "<fcntl.h>".}: cint$/;"	t
ObjectAssignmentDefect	$NIMLIB/system/exceptions.nim	/^  ObjectAssignmentDefect* = object of Defect ## \\$/;"	t
ObjectAssignmentError	$NIMLIB/system/exceptions.nim	/^    ObjectAssignmentError* {.deprecated: "See corresponding Defect".} = ObjectAssignmentDefect$/;"	t
ObjectConversionDefect	$NIMLIB/system/exceptions.nim	/^  ObjectConversionDefect* = object of Defect ## \\$/;"	t
ObjectConversionError	$NIMLIB/system/exceptions.nim	/^    ObjectConversionError* {.deprecated: "See corresponding Defect".} = ObjectConversionDefect$/;"	t
Off	$NIMLIB/posix/posix_haiku.nim	/^  Off* {.importc: "off_t", header: "<sys\/types.h>".} = int64$/;"	t
Off	$NIMLIB/posix/posix_linux_amd64.nim	/^  Off* {.importc: "off_t", header: "<sys\/types.h>".} = clong$/;"	t
Off	$NIMLIB/posix/posix_macos_amd64.nim	/^  Off* {.importc: "off_t", header: "<sys\/types.h>".} = int64$/;"	t
Off	$NIMLIB/posix/posix_nintendoswitch.nim	/^  Off* {.importc: "off_t", header: "<sys\/types.h>".} = clong$/;"	t
Off	$NIMLIB/posix/posix_openbsd_amd64.nim	/^  Off* {.importc: "off_t", header: "<sys\/types.h>".} = int64$/;"	t
Off	$NIMLIB/posix/posix_other.nim	/^  Off* {.importc: "off_t", header: "<sys\/types.h>".} = int64$/;"	t
Oid	$NIMLIB/pure/oids.nim	/^  Oid* = object ## An OID.$/;"	t
OnReject	$NIMLIB/js/asyncjs.nim	/^  type OnReject* = proc(reason: Error)$/;"	t
OpenSSL_add_all_algorithms	$NIMLIB/wrappers/openssl.nim	/^  template OpenSSL_add_all_algorithms*() = discard$/;"	t
OptParser	$NIMLIB/pure/parseopt.nim	/^  OptParser* = object of RootObj ## \\$/;"	t
Option	$NIMLIB/pure/options.nim	/^  Option*[T] = object$/;"	t
OptionElement	$NIMLIB/js/dom.nim	/^  OptionElement* {.importc.} = ref object of Element$/;"	t
OrderedSet	$NIMLIB/pure/collections/sets.nim	/^  OrderedSet*[A] {.myShallow.} = object ## \\$/;"	t
OrderedTable	$NIMLIB/pure/collections/tables.nim	/^  OrderedTable*[A, B] = object$/;"	t
OrderedTableRef	$NIMLIB/pure/collections/tables.nim	/^  OrderedTableRef*[A, B] = ref OrderedTable[A, B] ## Ref version of$/;"	t
OrdinalEnum	$NIMLIB/pure/typetraits.nim	/^type OrdinalEnum* = Ordinal and enum ## Enum without holes.$/;"	t
OsPlatform	$NIMLIB/system/platforms.nim	/^  OsPlatform* {.pure.} = enum ## the OS this program will run on.$/;"	t
OutOfMemDefect	$NIMLIB/system/exceptions.nim	/^  OutOfMemDefect* = object of Defect ## \\$/;"	t
OutOfMemError	$NIMLIB/system/exceptions.nim	/^    OutOfMemError* {.deprecated: "See corresponding Defect".} = OutOfMemDefect$/;"	t
OutputDll	$NIMLIB/wrappers/tinyc.nim	/^  OutputDll*: cint = 3 ## dynamic library$/;"	t
OutputExe	$NIMLIB/wrappers/tinyc.nim	/^  OutputExe*: cint = 2 ## executable file$/;"	t
OutputFormatter	$NIMLIB/pure/unittest.nim	/^  OutputFormatter* = ref object of RootObj$/;"	t
OutputLevel	$NIMLIB/pure/unittest.nim	/^  OutputLevel* = enum ## The output verbosity of the tests.$/;"	t
OutputMemory	$NIMLIB/wrappers/tinyc.nim	/^  OutputMemory*: cint = 1 ## output will be ran in memory (no$/;"	t
OutputObj	$NIMLIB/wrappers/tinyc.nim	/^  OutputObj*: cint = 4 ## object file$/;"	t
OutputPreprocess	$NIMLIB/wrappers/tinyc.nim	/^  OutputPreprocess*: cint = 5 ## preprocessed file (used internally)$/;"	t
OutputTarget	$NIMLIB/packages/docutils/rstgen.nim	/^  OutputTarget* = enum ## which document type to generate$/;"	t
OverflowDefect	$NIMLIB/system/exceptions.nim	/^  OverflowDefect* = object of ArithmeticDefect ## \\$/;"	t
OverflowError	$NIMLIB/system/exceptions.nim	/^    OverflowError* {.deprecated: "See corresponding Defect".} = OverflowDefect$/;"	t
PAGE_EXECUTE	$NIMLIB/windows/winlean.nim	/^  PAGE_EXECUTE* = 0x10'i32$/;"	t
PAGE_EXECUTE_READ	$NIMLIB/windows/winlean.nim	/^  PAGE_EXECUTE_READ* = 0x20'i32$/;"	t
PAGE_EXECUTE_READWRITE	$NIMLIB/windows/winlean.nim	/^  PAGE_EXECUTE_READWRITE* = 0x40'i32$/;"	t
PAGE_NOACCESS	$NIMLIB/windows/winlean.nim	/^  PAGE_NOACCESS* = 0x01'i32$/;"	t
PAGE_READONLY	$NIMLIB/windows/winlean.nim	/^  PAGE_READONLY* = 2'i32$/;"	t
PAGE_READWRITE	$NIMLIB/windows/winlean.nim	/^  PAGE_READWRITE* = 4'i32$/;"	t
PARENB	$NIMLIB/posix/termios.nim	/^  PARENB* {.importc, header: "<termios.h>".}: Cflag$/;"	t
PARMRK	$NIMLIB/posix/termios.nim	/^  PARMRK* {.importc, header: "<termios.h>".}: Cflag$/;"	t
PARODD	$NIMLIB/posix/termios.nim	/^  PARODD* {.importc, header: "<termios.h>".}: Cflag$/;"	t
PARTIAL	$NIMLIB/wrappers/pcre.nim	/^  PARTIAL*           = 0x00008000  #    E D J  )$/;"	t
PARTIAL_HARD	$NIMLIB/wrappers/pcre.nim	/^  PARTIAL_HARD*      = 0x08000000  #    E D J$/;"	t
PARTIAL_SOFT	$NIMLIB/wrappers/pcre.nim	/^  PARTIAL_SOFT*      = 0x00008000  #    E D J  ) Synonyms$/;"	t
PASN1_UTCTIME	$NIMLIB/wrappers/openssl.nim	/^  PASN1_UTCTIME* = SslPtr$/;"	t
PASN1_cInt	$NIMLIB/wrappers/openssl.nim	/^  PASN1_cInt* = SslPtr$/;"	t
PBIO_METHOD	$NIMLIB/wrappers/openssl.nim	/^  PBIO_METHOD* = SslPtr$/;"	t
PBOOL	$NIMLIB/windows/winlean.nim	/^  PBOOL* = ptr WINBOOL$/;"	t
PCRE_DATE	$NIMLIB/wrappers/pcre.nim	/^  PCRE_DATE* = "2014-09-26"$/;"	t
PCRE_MAJOR	$NIMLIB/wrappers/pcre.nim	/^  PCRE_MAJOR* = 8$/;"	t
PCRE_MINOR	$NIMLIB/wrappers/pcre.nim	/^  PCRE_MINOR* = 36$/;"	t
PCRE_PRERELEASE	$NIMLIB/wrappers/pcre.nim	/^  PCRE_PRERELEASE* = true$/;"	t
PC_2_SYMLINKS	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const PC_2_SYMLINKS* = cint(20)$/;"	t
PC_2_SYMLINKS	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const PC_2_SYMLINKS* = cint(13)$/;"	t
PC_2_SYMLINKS	$NIMLIB/posix/posix_other_consts.nim	/^var PC_2_SYMLINKS* {.importc: "_PC_2_SYMLINKS", header: "<unistd.h>".}: cint$/;"	t
PC_ALLOC_SIZE_MIN	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const PC_ALLOC_SIZE_MIN* = cint(18)$/;"	t
PC_ALLOC_SIZE_MIN	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const PC_ALLOC_SIZE_MIN* = cint(15)$/;"	t
PC_ALLOC_SIZE_MIN	$NIMLIB/posix/posix_other_consts.nim	/^var PC_ALLOC_SIZE_MIN* {.importc: "_PC_ALLOC_SIZE_MIN", header: "<unistd.h>".}: cint$/;"	t
PC_ASYNC_IO	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const PC_ASYNC_IO* = cint(10)$/;"	t
PC_ASYNC_IO	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const PC_ASYNC_IO* = cint(9)$/;"	t
PC_ASYNC_IO	$NIMLIB/posix/posix_other_consts.nim	/^var PC_ASYNC_IO* {.importc: "_PC_ASYNC_IO", header: "<unistd.h>".}: cint$/;"	t
PC_CHOWN_RESTRICTED	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const PC_CHOWN_RESTRICTED* = cint(6)$/;"	t
PC_CHOWN_RESTRICTED	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const PC_CHOWN_RESTRICTED* = cint(6)$/;"	t
PC_CHOWN_RESTRICTED	$NIMLIB/posix/posix_other_consts.nim	/^var PC_CHOWN_RESTRICTED* {.importc: "_PC_CHOWN_RESTRICTED", header: "<unistd.h>".}: cint$/;"	t
PC_FILESIZEBITS	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const PC_FILESIZEBITS* = cint(13)$/;"	t
PC_FILESIZEBITS	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const PC_FILESIZEBITS* = cint(12)$/;"	t
PC_FILESIZEBITS	$NIMLIB/posix/posix_other_consts.nim	/^var PC_FILESIZEBITS* {.importc: "_PC_FILESIZEBITS", header: "<unistd.h>".}: cint$/;"	t
PC_LINK_MAX	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const PC_LINK_MAX* = cint(0)$/;"	t
PC_LINK_MAX	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const PC_LINK_MAX* = cint(0)$/;"	t
PC_LINK_MAX	$NIMLIB/posix/posix_other_consts.nim	/^var PC_LINK_MAX* {.importc: "_PC_LINK_MAX", header: "<unistd.h>".}: cint$/;"	t
PC_MAX_CANON	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const PC_MAX_CANON* = cint(1)$/;"	t
PC_MAX_CANON	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const PC_MAX_CANON* = cint(1)$/;"	t
PC_MAX_CANON	$NIMLIB/posix/posix_other_consts.nim	/^var PC_MAX_CANON* {.importc: "_PC_MAX_CANON", header: "<unistd.h>".}: cint$/;"	t
PC_MAX_INPUT	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const PC_MAX_INPUT* = cint(2)$/;"	t
PC_MAX_INPUT	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const PC_MAX_INPUT* = cint(2)$/;"	t
PC_MAX_INPUT	$NIMLIB/posix/posix_other_consts.nim	/^var PC_MAX_INPUT* {.importc: "_PC_MAX_INPUT", header: "<unistd.h>".}: cint$/;"	t
PC_NAME_MAX	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const PC_NAME_MAX* = cint(3)$/;"	t
PC_NAME_MAX	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const PC_NAME_MAX* = cint(3)$/;"	t
PC_NAME_MAX	$NIMLIB/posix/posix_other_consts.nim	/^var PC_NAME_MAX* {.importc: "_PC_NAME_MAX", header: "<unistd.h>".}: cint$/;"	t
PC_NO_TRUNC	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const PC_NO_TRUNC* = cint(7)$/;"	t
PC_NO_TRUNC	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const PC_NO_TRUNC* = cint(7)$/;"	t
PC_NO_TRUNC	$NIMLIB/posix/posix_other_consts.nim	/^var PC_NO_TRUNC* {.importc: "_PC_NO_TRUNC", header: "<unistd.h>".}: cint$/;"	t
PC_PATH_MAX	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const PC_PATH_MAX* = cint(4)$/;"	t
PC_PATH_MAX	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const PC_PATH_MAX* = cint(4)$/;"	t
PC_PATH_MAX	$NIMLIB/posix/posix_other_consts.nim	/^var PC_PATH_MAX* {.importc: "_PC_PATH_MAX", header: "<unistd.h>".}: cint$/;"	t
PC_PIPE_BUF	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const PC_PIPE_BUF* = cint(5)$/;"	t
PC_PIPE_BUF	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const PC_PIPE_BUF* = cint(5)$/;"	t
PC_PIPE_BUF	$NIMLIB/posix/posix_other_consts.nim	/^var PC_PIPE_BUF* {.importc: "_PC_PIPE_BUF", header: "<unistd.h>".}: cint$/;"	t
PC_PRIO_IO	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const PC_PRIO_IO* = cint(11)$/;"	t
PC_PRIO_IO	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const PC_PRIO_IO* = cint(10)$/;"	t
PC_PRIO_IO	$NIMLIB/posix/posix_other_consts.nim	/^var PC_PRIO_IO* {.importc: "_PC_PRIO_IO", header: "<unistd.h>".}: cint$/;"	t
PC_REC_INCR_XFER_SIZE	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const PC_REC_INCR_XFER_SIZE* = cint(14)$/;"	t
PC_REC_INCR_XFER_SIZE	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const PC_REC_INCR_XFER_SIZE* = cint(16)$/;"	t
PC_REC_INCR_XFER_SIZE	$NIMLIB/posix/posix_other_consts.nim	/^var PC_REC_INCR_XFER_SIZE* {.importc: "_PC_REC_INCR_XFER_SIZE", header: "<unistd.h>".}: cint$/;"	t
PC_REC_MIN_XFER_SIZE	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const PC_REC_MIN_XFER_SIZE* = cint(16)$/;"	t
PC_REC_MIN_XFER_SIZE	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const PC_REC_MIN_XFER_SIZE* = cint(18)$/;"	t
PC_REC_MIN_XFER_SIZE	$NIMLIB/posix/posix_other_consts.nim	/^var PC_REC_MIN_XFER_SIZE* {.importc: "_PC_REC_MIN_XFER_SIZE", header: "<unistd.h>".}: cint$/;"	t
PC_REC_XFER_ALIGN	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const PC_REC_XFER_ALIGN* = cint(17)$/;"	t
PC_REC_XFER_ALIGN	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const PC_REC_XFER_ALIGN* = cint(19)$/;"	t
PC_REC_XFER_ALIGN	$NIMLIB/posix/posix_other_consts.nim	/^var PC_REC_XFER_ALIGN* {.importc: "_PC_REC_XFER_ALIGN", header: "<unistd.h>".}: cint$/;"	t
PC_SYMLINK_MAX	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const PC_SYMLINK_MAX* = cint(19)$/;"	t
PC_SYMLINK_MAX	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const PC_SYMLINK_MAX* = cint(14)$/;"	t
PC_SYMLINK_MAX	$NIMLIB/posix/posix_other_consts.nim	/^var PC_SYMLINK_MAX* {.importc: "_PC_SYMLINK_MAX", header: "<unistd.h>".}: cint$/;"	t
PC_SYNC_IO	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const PC_SYNC_IO* = cint(9)$/;"	t
PC_SYNC_IO	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const PC_SYNC_IO* = cint(11)$/;"	t
PC_SYNC_IO	$NIMLIB/posix/posix_other_consts.nim	/^var PC_SYNC_IO* {.importc: "_PC_SYNC_IO", header: "<unistd.h>".}: cint$/;"	t
PC_VDISABLE	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const PC_VDISABLE* = cint(8)$/;"	t
PC_VDISABLE	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const PC_VDISABLE* = cint(8)$/;"	t
PC_VDISABLE	$NIMLIB/posix/posix_other_consts.nim	/^var PC_VDISABLE* {.importc: "_PC_VDISABLE", header: "<unistd.h>".}: cint$/;"	t
PDES_cblock	$NIMLIB/wrappers/openssl.nim	/^  PDES_cblock* = ptr DES_cblock$/;"	t
PDWORD	$NIMLIB/windows/winlean.nim	/^  PDWORD* = ptr DWORD$/;"	t
PDispatcher	$NIMLIB/pure/asyncdispatch.nim	/^    PDispatcher* = ref object of PDispatcherBase$/;"	t
PEM_read_RSAPrivateKey	$NIMLIB/wrappers/openssl.nim	/^proc PEM_read_RSAPrivateKey*(fp: pointer; x: ptr PRSA; cb: pem_password_cb, u: pointer): PRSA {./;"	f
PEM_read_RSAPublicKey	$NIMLIB/wrappers/openssl.nim	/^proc PEM_read_RSAPublicKey*(fp: pointer; x: ptr PRSA; cb: pem_password_cb, u: pointer): PRSA {.c/;"	f
PEM_read_RSA_PUBKEY	$NIMLIB/wrappers/openssl.nim	/^proc PEM_read_RSA_PUBKEY*(fp: pointer; x: ptr PRSA; cb: pem_password_cb, u: pointer): PRSA {.cde/;"	f
PEM_read_bio_PrivateKey	$NIMLIB/wrappers/openssl.nim	/^proc PEM_read_bio_PrivateKey*(bp: BIO, x: ptr EVP_PKEY, cb: pointer, u: pointer): EVP_PKEY {.lcr/;"	f
PEM_read_bio_RSAPrivateKey	$NIMLIB/wrappers/openssl.nim	/^proc PEM_read_bio_RSAPrivateKey*(bp: BIO, x: ptr PRSA, cb: pem_password_cb, u: pointer): PRSA {./;"	f
PEM_read_bio_RSAPublicKey	$NIMLIB/wrappers/openssl.nim	/^proc PEM_read_bio_RSAPublicKey*(bp: BIO, x: ptr PRSA, cb: pem_password_cb, u: pointer): PRSA {.c/;"	f
PEM_read_bio_RSA_PUBKEY	$NIMLIB/wrappers/openssl.nim	/^proc PEM_read_bio_RSA_PUBKEY*(bp: BIO, x: ptr PRSA, pw: pem_password_cb, u: pointer): PRSA {.cde/;"	f
PFloat32	$NIMLIB/system/ctypes.nim	/^    PFloat32* {.deprecated: "use `ptr float32`".} = ptr float32$/;"	t
PFloat64	$NIMLIB/system/ctypes.nim	/^    PFloat64* {.deprecated: "use `ptr float64`".} = ptr float64$/;"	t
PFrame	$NIMLIB/system.nim	/^  PFrame* = ptr TFrame  ## Represents a runtime frame of the call stack;$/;"	t
PFunction	$NIMLIB/wrappers/openssl.nim	/^  PFunction* = proc () {.cdecl.}$/;"	t
PGcThread	$NIMLIB/std/private/threadtypes.nim	/^  PGcThread* = ptr GcThread$/;"	t
PI	$NIMLIB/pure/math.nim	/^  PI* = 3.1415926535897932384626433          ## The circle constant PI (Ludolph's number).$/;"	t
PIPE_ACCESS_DUPLEX	$NIMLIB/windows/winlean.nim	/^  PIPE_ACCESS_DUPLEX* = 0x00000003'i32$/;"	t
PIPE_ACCESS_INBOUND	$NIMLIB/windows/winlean.nim	/^  PIPE_ACCESS_INBOUND* = 1'i32$/;"	t
PIPE_ACCESS_OUTBOUND	$NIMLIB/windows/winlean.nim	/^  PIPE_ACCESS_OUTBOUND* = 2'i32$/;"	t
PIPE_NOWAIT	$NIMLIB/windows/winlean.nim	/^  PIPE_NOWAIT* = 0x00000001'i32$/;"	t
PInt32	$NIMLIB/system/ctypes.nim	/^    PInt32* {.deprecated: "use `ptr int32`".} = ptr int32$/;"	t
PInt64	$NIMLIB/system/ctypes.nim	/^    PInt64* {.deprecated: "use `ptr int64`".} = ptr int64$/;"	t
PJitStack	$NIMLIB/wrappers/pcre.nim	/^  PJitStack* {.deprecated.} = ptr JitStack$/;"	t
PM_STR	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const PM_STR* = cint(131111)$/;"	t
PM_STR	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const PM_STR* = cint(6)$/;"	t
PM_STR	$NIMLIB/posix/posix_other_consts.nim	/^var PM_STR* {.importc: "PM_STR", header: "<langinfo.h>".}: cint$/;"	t
PNimType	$NIMLIB/system/hti.nim	/^    PNimType* = ptr TNimType$/;"	t
POLLERR	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const POLLERR* = cshort(8)$/;"	t
POLLERR	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const POLLERR* = cshort(8)$/;"	t
POLLERR	$NIMLIB/posix/posix_other_consts.nim	/^var POLLERR* {.importc: "POLLERR", header: "<poll.h>".}: cshort$/;"	t
POLLHUP	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const POLLHUP* = cshort(16)$/;"	t
POLLHUP	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const POLLHUP* = cshort(16)$/;"	t
POLLHUP	$NIMLIB/posix/posix_other_consts.nim	/^var POLLHUP* {.importc: "POLLHUP", header: "<poll.h>".}: cshort$/;"	t
POLLIN	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const POLLIN* = cshort(1)$/;"	t
POLLIN	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const POLLIN* = cshort(1)$/;"	t
POLLIN	$NIMLIB/posix/posix_other_consts.nim	/^var POLLIN* {.importc: "POLLIN", header: "<poll.h>".}: cshort$/;"	t
POLLNVAL	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const POLLNVAL* = cshort(32)$/;"	t
POLLNVAL	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const POLLNVAL* = cshort(32)$/;"	t
POLLNVAL	$NIMLIB/posix/posix_other_consts.nim	/^var POLLNVAL* {.importc: "POLLNVAL", header: "<poll.h>".}: cshort$/;"	t
POLLOUT	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const POLLOUT* = cshort(4)$/;"	t
POLLOUT	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const POLLOUT* = cshort(4)$/;"	t
POLLOUT	$NIMLIB/posix/posix_other_consts.nim	/^var POLLOUT* {.importc: "POLLOUT", header: "<poll.h>".}: cshort$/;"	t
POLLPRI	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const POLLPRI* = cshort(2)$/;"	t
POLLPRI	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const POLLPRI* = cshort(2)$/;"	t
POLLPRI	$NIMLIB/posix/posix_other_consts.nim	/^var POLLPRI* {.importc: "POLLPRI", header: "<poll.h>".}: cshort$/;"	t
POLLRDBAND	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const POLLRDBAND* = cshort(128)$/;"	t
POLLRDBAND	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const POLLRDBAND* = cshort(128)$/;"	t
POLLRDBAND	$NIMLIB/posix/posix_other_consts.nim	/^var POLLRDBAND* {.importc: "POLLRDBAND", header: "<poll.h>".}: cshort$/;"	t
POLLRDNORM	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const POLLRDNORM* = cshort(64)$/;"	t
POLLRDNORM	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const POLLRDNORM* = cshort(64)$/;"	t
POLLRDNORM	$NIMLIB/posix/posix_other_consts.nim	/^var POLLRDNORM* {.importc: "POLLRDNORM", header: "<poll.h>".}: cshort$/;"	t
POLLWRBAND	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const POLLWRBAND* = cshort(512)$/;"	t
POLLWRBAND	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const POLLWRBAND* = cshort(256)$/;"	t
POLLWRBAND	$NIMLIB/posix/posix_other_consts.nim	/^var POLLWRBAND* {.importc: "POLLWRBAND", header: "<poll.h>".}: cshort$/;"	t
POLLWRNORM	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const POLLWRNORM* = cshort(256)$/;"	t
POLLWRNORM	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const POLLWRNORM* = cshort(4)$/;"	t
POLLWRNORM	$NIMLIB/posix/posix_other_consts.nim	/^var POLLWRNORM* {.importc: "POLLWRNORM", header: "<poll.h>".}: cshort$/;"	t
POSIX_ASYNC_IO	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const POSIX_ASYNC_IO* = cint(1)$/;"	t
POSIX_ASYNC_IO	$NIMLIB/posix/posix_other_consts.nim	/^var POSIX_ASYNC_IO* {.importc: "_POSIX_ASYNC_IO", header: "<unistd.h>".}: cint$/;"	t
POSIX_FADV_DONTNEED	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const POSIX_FADV_DONTNEED* = cint(4)$/;"	t
POSIX_FADV_DONTNEED	$NIMLIB/posix/posix_other_consts.nim	/^var POSIX_FADV_DONTNEED* {.importc: "POSIX_FADV_DONTNEED", header: "<fcntl.h>".}: cint$/;"	t
POSIX_FADV_NOREUSE	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const POSIX_FADV_NOREUSE* = cint(5)$/;"	t
POSIX_FADV_NOREUSE	$NIMLIB/posix/posix_other_consts.nim	/^var POSIX_FADV_NOREUSE* {.importc: "POSIX_FADV_NOREUSE", header: "<fcntl.h>".}: cint$/;"	t
POSIX_FADV_NORMAL	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const POSIX_FADV_NORMAL* = cint(0)$/;"	t
POSIX_FADV_NORMAL	$NIMLIB/posix/posix_other_consts.nim	/^var POSIX_FADV_NORMAL* {.importc: "POSIX_FADV_NORMAL", header: "<fcntl.h>".}: cint$/;"	t
POSIX_FADV_RANDOM	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const POSIX_FADV_RANDOM* = cint(1)$/;"	t
POSIX_FADV_RANDOM	$NIMLIB/posix/posix_other_consts.nim	/^var POSIX_FADV_RANDOM* {.importc: "POSIX_FADV_RANDOM", header: "<fcntl.h>".}: cint$/;"	t
POSIX_FADV_SEQUENTIAL	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const POSIX_FADV_SEQUENTIAL* = cint(2)$/;"	t
POSIX_FADV_SEQUENTIAL	$NIMLIB/posix/posix_other_consts.nim	/^var POSIX_FADV_SEQUENTIAL* {.importc: "POSIX_FADV_SEQUENTIAL", header: "<fcntl.h>".}: cint$/;"	t
POSIX_FADV_WILLNEED	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const POSIX_FADV_WILLNEED* = cint(3)$/;"	t
POSIX_FADV_WILLNEED	$NIMLIB/posix/posix_other_consts.nim	/^var POSIX_FADV_WILLNEED* {.importc: "POSIX_FADV_WILLNEED", header: "<fcntl.h>".}: cint$/;"	t
POSIX_MADV_DONTNEED	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const POSIX_MADV_DONTNEED* = cint(4)$/;"	t
POSIX_MADV_DONTNEED	$NIMLIB/posix/posix_other_consts.nim	/^var POSIX_MADV_DONTNEED* {.importc: "POSIX_MADV_DONTNEED", header: "<sys\/mman.h>".}: cint$/;"	t
POSIX_MADV_NORMAL	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const POSIX_MADV_NORMAL* = cint(0)$/;"	t
POSIX_MADV_NORMAL	$NIMLIB/posix/posix_other_consts.nim	/^var POSIX_MADV_NORMAL* {.importc: "POSIX_MADV_NORMAL", header: "<sys\/mman.h>".}: cint$/;"	t
POSIX_MADV_RANDOM	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const POSIX_MADV_RANDOM* = cint(1)$/;"	t
POSIX_MADV_RANDOM	$NIMLIB/posix/posix_other_consts.nim	/^var POSIX_MADV_RANDOM* {.importc: "POSIX_MADV_RANDOM", header: "<sys\/mman.h>".}: cint$/;"	t
POSIX_MADV_SEQUENTIAL	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const POSIX_MADV_SEQUENTIAL* = cint(2)$/;"	t
POSIX_MADV_SEQUENTIAL	$NIMLIB/posix/posix_other_consts.nim	/^var POSIX_MADV_SEQUENTIAL* {.importc: "POSIX_MADV_SEQUENTIAL", header: "<sys\/mman.h>".}: cint$/;"	t
POSIX_MADV_WILLNEED	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const POSIX_MADV_WILLNEED* = cint(3)$/;"	t
POSIX_MADV_WILLNEED	$NIMLIB/posix/posix_other_consts.nim	/^var POSIX_MADV_WILLNEED* {.importc: "POSIX_MADV_WILLNEED", header: "<sys\/mman.h>".}: cint$/;"	t
POSIX_PRIO_IO	$NIMLIB/posix/posix_other_consts.nim	/^var POSIX_PRIO_IO* {.importc: "_POSIX_PRIO_IO", header: "<unistd.h>".}: cint$/;"	t
POSIX_SPAWN_RESETIDS	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const POSIX_SPAWN_RESETIDS* = cint(1)$/;"	t
POSIX_SPAWN_RESETIDS	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const POSIX_SPAWN_RESETIDS* = cint(1)$/;"	t
POSIX_SPAWN_RESETIDS	$NIMLIB/posix/posix_other_consts.nim	/^var POSIX_SPAWN_RESETIDS* {.importc: "POSIX_SPAWN_RESETIDS", header: "<spawn.h>".}: cint$/;"	t
POSIX_SPAWN_SETPGROUP	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const POSIX_SPAWN_SETPGROUP* = cint(2)$/;"	t
POSIX_SPAWN_SETPGROUP	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const POSIX_SPAWN_SETPGROUP* = cint(2)$/;"	t
POSIX_SPAWN_SETPGROUP	$NIMLIB/posix/posix_other_consts.nim	/^var POSIX_SPAWN_SETPGROUP* {.importc: "POSIX_SPAWN_SETPGROUP", header: "<spawn.h>".}: cint$/;"	t
POSIX_SPAWN_SETSCHEDPARAM	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const POSIX_SPAWN_SETSCHEDPARAM* = cint(16)$/;"	t
POSIX_SPAWN_SETSCHEDPARAM	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const POSIX_SPAWN_SETSCHEDPARAM* = cint(4)$/;"	t
POSIX_SPAWN_SETSCHEDPARAM	$NIMLIB/posix/posix_other_consts.nim	/^var POSIX_SPAWN_SETSCHEDPARAM* {.importc: "POSIX_SPAWN_SETSCHEDPARAM", header: "<spawn.h>".}: ci/;"	t
POSIX_SPAWN_SETSCHEDULER	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const POSIX_SPAWN_SETSCHEDULER* = cint(32)$/;"	t
POSIX_SPAWN_SETSCHEDULER	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const POSIX_SPAWN_SETSCHEDULER* = cint(8)$/;"	t
POSIX_SPAWN_SETSCHEDULER	$NIMLIB/posix/posix_other_consts.nim	/^var POSIX_SPAWN_SETSCHEDULER* {.importc: "POSIX_SPAWN_SETSCHEDULER", header: "<spawn.h>".}: cint$/;"	t
POSIX_SPAWN_SETSIGDEF	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const POSIX_SPAWN_SETSIGDEF* = cint(4)$/;"	t
POSIX_SPAWN_SETSIGDEF	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const POSIX_SPAWN_SETSIGDEF* = cint(16)$/;"	t
POSIX_SPAWN_SETSIGDEF	$NIMLIB/posix/posix_other_consts.nim	/^var POSIX_SPAWN_SETSIGDEF* {.importc: "POSIX_SPAWN_SETSIGDEF", header: "<spawn.h>".}: cint$/;"	t
POSIX_SPAWN_SETSIGMASK	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const POSIX_SPAWN_SETSIGMASK* = cint(8)$/;"	t
POSIX_SPAWN_SETSIGMASK	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const POSIX_SPAWN_SETSIGMASK* = cint(32)$/;"	t
POSIX_SPAWN_SETSIGMASK	$NIMLIB/posix/posix_other_consts.nim	/^var POSIX_SPAWN_SETSIGMASK* {.importc: "POSIX_SPAWN_SETSIGMASK", header: "<spawn.h>".}: cint$/;"	t
POSIX_SPAWN_USEVFORK	$NIMLIB/posix/posix_haiku.nim	/^    const POSIX_SPAWN_USEVFORK* = cint(0x40)$/;"	t
POSIX_SPAWN_USEVFORK	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const POSIX_SPAWN_USEVFORK* = cint(64)$/;"	t
POSIX_SPAWN_USEVFORK	$NIMLIB/posix/posix_macos_amd64.nim	/^    const POSIX_SPAWN_USEVFORK* = cint(0x40)$/;"	t
POSIX_SPAWN_USEVFORK	$NIMLIB/posix/posix_nintendoswitch.nim	/^const POSIX_SPAWN_USEVFORK* = cint(0x40)  # needs _GNU_SOURCE!$/;"	t
POSIX_SPAWN_USEVFORK	$NIMLIB/posix/posix_openbsd_amd64.nim	/^    const POSIX_SPAWN_USEVFORK* = cint(0)$/;"	t
POSIX_SPAWN_USEVFORK	$NIMLIB/posix/posix_other.nim	/^    const POSIX_SPAWN_USEVFORK* = cint(0x40)$/;"	t
POSIX_SYNC_IO	$NIMLIB/posix/posix_other_consts.nim	/^var POSIX_SYNC_IO* {.importc: "_POSIX_SYNC_IO", header: "<unistd.h>".}: cint$/;"	t
POSIX_TYPED_MEM_ALLOCATE	$NIMLIB/posix/posix_other_consts.nim	/^var POSIX_TYPED_MEM_ALLOCATE* {.importc: "POSIX_TYPED_MEM_ALLOCATE", header: "<sys\/mman.h>".}: /;"	t
POSIX_TYPED_MEM_ALLOCATE_CONTIG	$NIMLIB/posix/posix_other_consts.nim	/^var POSIX_TYPED_MEM_ALLOCATE_CONTIG* {.importc: "POSIX_TYPED_MEM_ALLOCATE_CONTIG", header: "<sys/;"	t
POSIX_TYPED_MEM_MAP_ALLOCATABLE	$NIMLIB/posix/posix_other_consts.nim	/^var POSIX_TYPED_MEM_MAP_ALLOCATABLE* {.importc: "POSIX_TYPED_MEM_MAP_ALLOCATABLE", header: "<sys/;"	t
POVERLAPPED	$NIMLIB/windows/winlean.nim	/^  POVERLAPPED* = ptr OVERLAPPED$/;"	t
POVERLAPPED_COMPLETION_ROUTINE	$NIMLIB/windows/winlean.nim	/^  POVERLAPPED_COMPLETION_ROUTINE* = proc (para1: DWORD, para2: DWORD,$/;"	t
PPasswdCb	$NIMLIB/wrappers/openssl.nim	/^  PPasswdCb* = SslPtr$/;"	t
PPcre	$NIMLIB/wrappers/pcre.nim	/^  PPcre* {.deprecated.} = ptr Pcre$/;"	t
PROCESS_CREATE_PROCESS	$NIMLIB/windows/winlean.nim	/^  PROCESS_CREATE_PROCESS* = 0x00000080'i32$/;"	t
PROCESS_CREATE_THREAD	$NIMLIB/windows/winlean.nim	/^  PROCESS_CREATE_THREAD* = 0x00000002'i32$/;"	t
PROCESS_DUP_HANDLE	$NIMLIB/windows/winlean.nim	/^  PROCESS_DUP_HANDLE* = 0x00000040'i32$/;"	t
PROCESS_INFORMATION	$NIMLIB/windows/winlean.nim	/^  PROCESS_INFORMATION* = object$/;"	t
PROCESS_QUERY_INFORMATION	$NIMLIB/windows/winlean.nim	/^  PROCESS_QUERY_INFORMATION* = 0x00000400'i32$/;"	t
PROCESS_QUERY_LIMITED_INFORMATION	$NIMLIB/windows/winlean.nim	/^  PROCESS_QUERY_LIMITED_INFORMATION* = 0x00001000'i32$/;"	t
PROCESS_SET_INFORMATION	$NIMLIB/windows/winlean.nim	/^  PROCESS_SET_INFORMATION* = 0x00000200'i32$/;"	t
PROCESS_SET_LIMITED_INFORMATION	$NIMLIB/windows/winlean.nim	/^  PROCESS_SET_LIMITED_INFORMATION* = 0x00002000'i32$/;"	t
PROCESS_SET_QUOTA	$NIMLIB/windows/winlean.nim	/^  PROCESS_SET_QUOTA* = 0x00000100'i32$/;"	t
PROCESS_SET_SESSIONID	$NIMLIB/windows/winlean.nim	/^  PROCESS_SET_SESSIONID* = 0x00000004'i32$/;"	t
PROCESS_SUSPEND_RESUME	$NIMLIB/windows/winlean.nim	/^  PROCESS_SUSPEND_RESUME* = 0x00000800'i32$/;"	t
PROCESS_TERMINATE	$NIMLIB/windows/winlean.nim	/^  PROCESS_TERMINATE* = 0x00000001'i32$/;"	t
PROCESS_VM_OPERATION	$NIMLIB/windows/winlean.nim	/^  PROCESS_VM_OPERATION* = 0x00000008'i32$/;"	t
PROCESS_VM_READ	$NIMLIB/windows/winlean.nim	/^  PROCESS_VM_READ* = 0x00000010'i32$/;"	t
PROCESS_VM_WRITE	$NIMLIB/windows/winlean.nim	/^  PROCESS_VM_WRITE* = 0x00000020'i32$/;"	t
PROT_EXEC	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const PROT_EXEC* = cint(4)$/;"	t
PROT_EXEC	$NIMLIB/posix/posix_other_consts.nim	/^var PROT_EXEC* {.importc: "PROT_EXEC", header: "<sys\/mman.h>".}: cint$/;"	t
PROT_NONE	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const PROT_NONE* = cint(0)$/;"	t
PROT_NONE	$NIMLIB/posix/posix_other_consts.nim	/^var PROT_NONE* {.importc: "PROT_NONE", header: "<sys\/mman.h>".}: cint$/;"	t
PROT_READ	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const PROT_READ* = cint(1)$/;"	t
PROT_READ	$NIMLIB/posix/posix_other_consts.nim	/^var PROT_READ* {.importc: "PROT_READ", header: "<sys\/mman.h>".}: cint$/;"	t
PROT_WRITE	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const PROT_WRITE* = cint(2)$/;"	t
PROT_WRITE	$NIMLIB/posix/posix_other_consts.nim	/^var PROT_WRITE* {.importc: "PROT_WRITE", header: "<sys\/mman.h>".}: cint$/;"	t
PRSA	$NIMLIB/wrappers/openssl.nim	/^  PRSA* = SslPtr$/;"	t
PRstNode	$NIMLIB/packages/docutils/rstast.nim	/^  PRstNode* = ref RstNode    ## an RST node$/;"	t
PRstSharedState	$NIMLIB/packages/docutils/rst.nim	/^  PRstSharedState* = ref RstSharedState$/;"	t
PSID	$NIMLIB/windows/winlean.nim	/^  PSID* = ptr SID$/;"	t
PSSL_METHOD	$NIMLIB/wrappers/openssl.nim	/^  PSSL_METHOD* = SslPtr$/;"	t
PSTACK	$NIMLIB/wrappers/openssl.nim	/^  PSTACK* = SslPtr$/;"	t
PSslPtr	$NIMLIB/wrappers/openssl.nim	/^  PSslPtr* = ptr SslPtr$/;"	t
PTHREAD_BARRIER_SERIAL_THREAD	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const PTHREAD_BARRIER_SERIAL_THREAD* = cint(-1)$/;"	t
PTHREAD_BARRIER_SERIAL_THREAD	$NIMLIB/posix/posix_other_consts.nim	/^var PTHREAD_BARRIER_SERIAL_THREAD* {.importc: "PTHREAD_BARRIER_SERIAL_THREAD", header: "<pthread/;"	t
PTHREAD_CANCEL_ASYNCHRONOUS	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const PTHREAD_CANCEL_ASYNCHRONOUS* = cint(1)$/;"	t
PTHREAD_CANCEL_ASYNCHRONOUS	$NIMLIB/posix/posix_other_consts.nim	/^var PTHREAD_CANCEL_ASYNCHRONOUS* {.importc: "PTHREAD_CANCEL_ASYNCHRONOUS", header: "<pthread.h>"/;"	t
PTHREAD_CANCEL_DEFERRED	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const PTHREAD_CANCEL_DEFERRED* = cint(0)$/;"	t
PTHREAD_CANCEL_DEFERRED	$NIMLIB/posix/posix_other_consts.nim	/^var PTHREAD_CANCEL_DEFERRED* {.importc: "PTHREAD_CANCEL_DEFERRED", header: "<pthread.h>".}: cint$/;"	t
PTHREAD_CANCEL_DISABLE	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const PTHREAD_CANCEL_DISABLE* = cint(1)$/;"	t
PTHREAD_CANCEL_DISABLE	$NIMLIB/posix/posix_other_consts.nim	/^var PTHREAD_CANCEL_DISABLE* {.importc: "PTHREAD_CANCEL_DISABLE", header: "<pthread.h>".}: cint$/;"	t
PTHREAD_CANCEL_ENABLE	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const PTHREAD_CANCEL_ENABLE* = cint(0)$/;"	t
PTHREAD_CANCEL_ENABLE	$NIMLIB/posix/posix_other_consts.nim	/^var PTHREAD_CANCEL_ENABLE* {.importc: "PTHREAD_CANCEL_ENABLE", header: "<pthread.h>".}: cint$/;"	t
PTHREAD_CREATE_DETACHED	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const PTHREAD_CREATE_DETACHED* = cint(1)$/;"	t
PTHREAD_CREATE_DETACHED	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const PTHREAD_CREATE_DETACHED* = cint(0)$/;"	t
PTHREAD_CREATE_DETACHED	$NIMLIB/posix/posix_other_consts.nim	/^var PTHREAD_CREATE_DETACHED* {.importc: "PTHREAD_CREATE_DETACHED", header: "<pthread.h>".}: cint$/;"	t
PTHREAD_CREATE_JOINABLE	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const PTHREAD_CREATE_JOINABLE* = cint(0)$/;"	t
PTHREAD_CREATE_JOINABLE	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const PTHREAD_CREATE_JOINABLE* = cint(1)$/;"	t
PTHREAD_CREATE_JOINABLE	$NIMLIB/posix/posix_other_consts.nim	/^var PTHREAD_CREATE_JOINABLE* {.importc: "PTHREAD_CREATE_JOINABLE", header: "<pthread.h>".}: cint$/;"	t
PTHREAD_EXPLICIT_SCHED	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const PTHREAD_EXPLICIT_SCHED* = cint(1)$/;"	t
PTHREAD_EXPLICIT_SCHED	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const PTHREAD_EXPLICIT_SCHED* = cint(2)$/;"	t
PTHREAD_EXPLICIT_SCHED	$NIMLIB/posix/posix_other_consts.nim	/^var PTHREAD_EXPLICIT_SCHED* {.importc: "PTHREAD_EXPLICIT_SCHED", header: "<pthread.h>".}: cint$/;"	t
PTHREAD_INHERIT_SCHED	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const PTHREAD_INHERIT_SCHED* = cint(0)$/;"	t
PTHREAD_INHERIT_SCHED	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const PTHREAD_INHERIT_SCHED* = cint(1)$/;"	t
PTHREAD_INHERIT_SCHED	$NIMLIB/posix/posix_other_consts.nim	/^var PTHREAD_INHERIT_SCHED* {.importc: "PTHREAD_INHERIT_SCHED", header: "<pthread.h>".}: cint$/;"	t
PTHREAD_MUTEX_DEFAULT	$NIMLIB/posix/posix_other_consts.nim	/^var PTHREAD_MUTEX_DEFAULT* {.importc: "PTHREAD_MUTEX_DEFAULT", header: "<pthread.h>".}: cint$/;"	t
PTHREAD_MUTEX_ERRORCHECK	$NIMLIB/posix/posix_other_consts.nim	/^var PTHREAD_MUTEX_ERRORCHECK* {.importc: "PTHREAD_MUTEX_ERRORCHECK", header: "<pthread.h>".}: ci/;"	t
PTHREAD_MUTEX_NORMAL	$NIMLIB/posix/posix_other_consts.nim	/^var PTHREAD_MUTEX_NORMAL* {.importc: "PTHREAD_MUTEX_NORMAL", header: "<pthread.h>".}: cint$/;"	t
PTHREAD_MUTEX_RECURSIVE	$NIMLIB/posix/posix_other_consts.nim	/^var PTHREAD_MUTEX_RECURSIVE* {.importc: "PTHREAD_MUTEX_RECURSIVE", header: "<pthread.h>".}: cint$/;"	t
PTHREAD_PRIO_INHERIT	$NIMLIB/posix/posix_other_consts.nim	/^var PTHREAD_PRIO_INHERIT* {.importc: "PTHREAD_PRIO_INHERIT", header: "<pthread.h>".}: cint$/;"	t
PTHREAD_PRIO_NONE	$NIMLIB/posix/posix_other_consts.nim	/^var PTHREAD_PRIO_NONE* {.importc: "PTHREAD_PRIO_NONE", header: "<pthread.h>".}: cint$/;"	t
PTHREAD_PRIO_PROTECT	$NIMLIB/posix/posix_other_consts.nim	/^var PTHREAD_PRIO_PROTECT* {.importc: "PTHREAD_PRIO_PROTECT", header: "<pthread.h>".}: cint$/;"	t
PTHREAD_PROCESS_PRIVATE	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const PTHREAD_PROCESS_PRIVATE* = cint(0)$/;"	t
PTHREAD_PROCESS_PRIVATE	$NIMLIB/posix/posix_other_consts.nim	/^var PTHREAD_PROCESS_PRIVATE* {.importc: "PTHREAD_PROCESS_PRIVATE", header: "<pthread.h>".}: cint$/;"	t
PTHREAD_PROCESS_SHARED	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const PTHREAD_PROCESS_SHARED* = cint(1)$/;"	t
PTHREAD_PROCESS_SHARED	$NIMLIB/posix/posix_other_consts.nim	/^var PTHREAD_PROCESS_SHARED* {.importc: "PTHREAD_PROCESS_SHARED", header: "<pthread.h>".}: cint$/;"	t
PTHREAD_SCOPE_PROCESS	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const PTHREAD_SCOPE_PROCESS* = cint(1)$/;"	t
PTHREAD_SCOPE_PROCESS	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const PTHREAD_SCOPE_PROCESS* = cint(0)$/;"	t
PTHREAD_SCOPE_PROCESS	$NIMLIB/posix/posix_other_consts.nim	/^var PTHREAD_SCOPE_PROCESS* {.importc: "PTHREAD_SCOPE_PROCESS", header: "<pthread.h>".}: cint$/;"	t
PTHREAD_SCOPE_SYSTEM	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const PTHREAD_SCOPE_SYSTEM* = cint(0)$/;"	t
PTHREAD_SCOPE_SYSTEM	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const PTHREAD_SCOPE_SYSTEM* = cint(1)$/;"	t
PTHREAD_SCOPE_SYSTEM	$NIMLIB/posix/posix_other_consts.nim	/^var PTHREAD_SCOPE_SYSTEM* {.importc: "PTHREAD_SCOPE_SYSTEM", header: "<pthread.h>".}: cint$/;"	t
PTHREAD_STACK_MIN	$NIMLIB/posix/posix_freertos_consts.nim	/^var PTHREAD_STACK_MIN* {.importc: "PTHREAD_STACK_MIN", header: "<pthread.h>".}: cint$/;"	t
PULONG	$NIMLIB/windows/winlean.nim	/^  PULONG* = ptr int$/;"	t
PULONG_PTR	$NIMLIB/windows/winlean.nim	/^  PULONG_PTR* = ptr uint$/;"	t
PWOHandleArray	$NIMLIB/windows/winlean.nim	/^  PWOHandleArray* = ptr WOHandleArray$/;"	t
PX509	$NIMLIB/wrappers/openssl.nim	/^  PX509* = SslPtr$/;"	t
PX509_NAME	$NIMLIB/wrappers/openssl.nim	/^  PX509_NAME* = SslPtr$/;"	t
PX509_OBJECT	$NIMLIB/wrappers/openssl.nim	/^  type PX509_OBJECT* = SslPtr$/;"	t
PX509_STORE	$NIMLIB/wrappers/openssl.nim	/^  type PX509_STORE* = SslPtr$/;"	t
P_ALL	$NIMLIB/posix/posix_other_consts.nim	/^var P_ALL* {.importc: "P_ALL", header: "<sys\/wait.h>".}: cint$/;"	t
P_PGID	$NIMLIB/posix/posix_other_consts.nim	/^var P_PGID* {.importc: "P_PGID", header: "<sys\/wait.h>".}: cint$/;"	t
P_PID	$NIMLIB/posix/posix_other_consts.nim	/^var P_PID* {.importc: "P_PID", header: "<sys\/wait.h>".}: cint$/;"	t
PackedSet	$NIMLIB/std/packedsets.nim	/^  PackedSet*[A: Ordinal] = object$/;"	t
PaddingType	$NIMLIB/wrappers/openssl.nim	/^  PaddingType* = enum$/;"	t
ParDir	$NIMLIB/std/private/osseps.nim	/^  ParDir* =$/;"	t
Path	$NIMLIB/std/paths.nim	/^  Path* = distinct string$/;"	t
PathComponent	$NIMLIB/std/private/oscommon.nim	/^  PathComponent* = enum   ## Enumeration specifying a path component.$/;"	t
PathEntry	$NIMLIB/std/private/globs.nim	/^  PathEntry* = object$/;"	t
PathIter	$NIMLIB/pure/pathnorm.nim	/^  PathIter* = object$/;"	t
PathSep	$NIMLIB/std/private/osseps.nim	/^  PathSep* =$/;"	t
PccState	$NIMLIB/wrappers/tinyc.nim	/^  PccState* = ptr CcState$/;"	t
Pcre	$NIMLIB/wrappers/pcre.nim	/^  Pcre* = object$/;"	t
Pcre16	$NIMLIB/wrappers/pcre.nim	/^  Pcre16* = object$/;"	t
Pcre32	$NIMLIB/wrappers/pcre.nim	/^  Pcre32* = object$/;"	t
Peg	$NIMLIB/pure/pegs.nim	/^  Peg* {.shallow.} = object ## type that represents a PEG$/;"	t
PegKind	$NIMLIB/pure/pegs.nim	/^  PegKind* = enum$/;"	t
Performance	$NIMLIB/js/dom.nim	/^  Performance* {.importc.} = ref object$/;"	t
PerformanceMemory	$NIMLIB/js/dom.nim	/^  PerformanceMemory* {.importc.} = ref object$/;"	t
PerformanceTiming	$NIMLIB/js/dom.nim	/^  PerformanceTiming* {.importc.} = ref object$/;"	t
PersonalBar	$NIMLIB/js/dom.nim	/^  PersonalBar* = LocationBar$/;"	t
Pid	$NIMLIB/posix/posix_haiku.nim	/^  Pid* {.importc: "pid_t", header: "<sys\/types.h>".} = int32$/;"	t
Pid	$NIMLIB/posix/posix_linux_amd64.nim	/^  Pid* {.importc: "pid_t", header: "<sys\/types.h>".} = cint$/;"	t
Pid	$NIMLIB/posix/posix_macos_amd64.nim	/^  Pid* {.importc: "pid_t", header: "<sys\/types.h>".} = int32$/;"	t
Pid	$NIMLIB/posix/posix_nintendoswitch.nim	/^  Pid* {.importc: "pid_t", header: "<sys\/types.h>".} = cint$/;"	t
Pid	$NIMLIB/posix/posix_openbsd_amd64.nim	/^  Pid* {.importc: "pid_t", header: "<sys\/types.h>".} = int32$/;"	t
Pid	$NIMLIB/posix/posix_other.nim	/^  Pid* {.importc: "pid_t", header: "<sys\/types.h>".} = int32$/;"	t
Pid	$NIMLIB/std/private/threadtypes.nim	/^    type Pid* {.importc: "pid_t", header: "<sys\/types.h>".} = int32 # From posix_other.nim$/;"	t
PipeOutStream	$NIMLIB/pure/streamwrapper.nim	/^  PipeOutStream*[T] = ref object of T$/;"	t
Plugin	$NIMLIB/js/dom.nim	/^  Plugin* {.importc.} = object of RootObj$/;"	t
Port	$NIMLIB/pure/nativesockets.nim	/^  Port* = distinct uint16 ## port type$/;"	t
Positive	$NIMLIB/system.nim	/^  Positive* = range[1..high(int)]$/;"	t
PrintableChars	$NIMLIB/pure/strutils.nim	/^  PrintableChars* = Letters + Digits + PunctuationChars + Whitespace$/;"	t
Process	$NIMLIB/pure/osproc.nim	/^  Process* = ref ProcessObj ## Represents an operating system process.$/;"	t
ProcessOption	$NIMLIB/pure/osproc.nim	/^  ProcessOption* = enum ## Options that can be passed to `startProcess proc$/;"	t
ProfilerHook	$NIMLIB/system/profiler.nim	/^  ProfilerHook* = proc (st: StackTrace) {.nimcall.}$/;"	t
ProgressChangedProc	$NIMLIB/pure/httpclient.nim	/^  ProgressChangedProc*[ReturnType] =$/;"	t
PromiseJs	$NIMLIB/js/asyncjs.nim	/^  PromiseJs* {.importjs: "Promise".} = ref object$/;"	t
Protocol	$NIMLIB/pure/nativesockets.nim	/^  Protocol* = enum    ## third argument to `socket` proc$/;"	t
ProtocolError	$NIMLIB/pure/httpclient.nim	/^  ProtocolError* = object of IOError ## exception that is raised when server$/;"	t
Protoent	$NIMLIB/windows/winlean.nim	/^  Protoent* = object$/;"	t
Proxy	$NIMLIB/pure/httpclient.nim	/^  Proxy* = ref object$/;"	t
PskClientCallback	$NIMLIB/wrappers/openssl.nim	/^  PskClientCallback* = proc (ssl: SslPtr;$/;"	t
PskServerCallback	$NIMLIB/wrappers/openssl.nim	/^  PskServerCallback* = proc (ssl: SslPtr;$/;"	t
Pthread	$NIMLIB/posix/posix_haiku.nim	/^  Pthread* {.importc: "pthread_t", header: "<sys\/types.h>".} = object$/;"	t
Pthread	$NIMLIB/posix/posix_linux_amd64.nim	/^  Pthread* {.importc: "pthread_t", header: "<sys\/types.h>".} = culong$/;"	t
Pthread	$NIMLIB/posix/posix_macos_amd64.nim	/^  Pthread* {.importc: "pthread_t", header: "<sys\/types.h>".} = int$/;"	t
Pthread	$NIMLIB/posix/posix_nintendoswitch.nim	/^  Pthread* {.importc: "pthread_t", header: "<sys\/types.h>".} = culong$/;"	t
Pthread	$NIMLIB/posix/posix_openbsd_amd64.nim	/^  Pthread* {.importc: "pthread_t", header: "<pthread.h>".} = int$/;"	t
Pthread	$NIMLIB/posix/posix_other.nim	/^  Pthread* {.importc: "pthread_t", header: "<sys\/types.h>".} = int$/;"	t
Pthread_attr	$NIMLIB/posix/posix_haiku.nim	/^  Pthread_attr* {.importc: "pthread_attr_t", header: "<sys\/types.h>".} = object$/;"	t
Pthread_attr	$NIMLIB/posix/posix_macos_amd64.nim	/^  Pthread_attr* {.importc: "pthread_attr_t", header: "<sys\/types.h>".} = int$/;"	t
Pthread_attr	$NIMLIB/posix/posix_openbsd_amd64.nim	/^  Pthread_attr* {.importc: "pthread_attr_t", header: "<pthread.h>".} = int$/;"	t
Pthread_attr	$NIMLIB/posix/posix_other.nim	/^  Pthread_attr* {.importc: "pthread_attr_t", header: "<sys\/types.h>".} = int$/;"	t
Pthread_cond	$NIMLIB/posix/posix_haiku.nim	/^  Pthread_cond* {.importc: "pthread_cond_t", header: "<sys\/types.h>".} = object$/;"	t
Pthread_cond	$NIMLIB/posix/posix_macos_amd64.nim	/^  Pthread_cond* {.importc: "pthread_cond_t", header: "<sys\/types.h>".} = int$/;"	t
Pthread_cond	$NIMLIB/posix/posix_openbsd_amd64.nim	/^  Pthread_cond* {.importc: "pthread_cond_t", header: "<pthread.h>".} = int$/;"	t
Pthread_cond	$NIMLIB/posix/posix_other.nim	/^  Pthread_cond* {.importc: "pthread_cond_t", header: "<sys\/types.h>".} = int$/;"	t
Pthread_key	$NIMLIB/posix/posix_haiku.nim	/^  Pthread_key* {.importc: "pthread_key_t", header: "<sys\/types.h>".} = object$/;"	t
Pthread_key	$NIMLIB/posix/posix_linux_amd64.nim	/^  Pthread_key* {.importc: "pthread_key_t", header: "<sys\/types.h>".} = cuint$/;"	t
Pthread_key	$NIMLIB/posix/posix_macos_amd64.nim	/^  Pthread_key* {.importc: "pthread_key_t", header: "<sys\/types.h>".} = int$/;"	t
Pthread_key	$NIMLIB/posix/posix_nintendoswitch.nim	/^  Pthread_key* {.importc: "pthread_key_t", header: "<sys\/types.h>".} = cuint$/;"	t
Pthread_key	$NIMLIB/posix/posix_openbsd_amd64.nim	/^  Pthread_key* {.importc: "pthread_key_t", header: "<pthread.h>".} = int$/;"	t
Pthread_key	$NIMLIB/posix/posix_other.nim	/^  Pthread_key* {.importc: "pthread_key_t", header: "<sys\/types.h>".} = int$/;"	t
Pthread_mutex	$NIMLIB/posix/posix_haiku.nim	/^  Pthread_mutex* {.importc: "pthread_mutex_t", header: "<sys\/types.h>".} = object$/;"	t
Pthread_mutex	$NIMLIB/posix/posix_macos_amd64.nim	/^  Pthread_mutex* {.importc: "pthread_mutex_t", header: "<sys\/types.h>".} = int$/;"	t
Pthread_mutex	$NIMLIB/posix/posix_openbsd_amd64.nim	/^  Pthread_mutex* {.importc: "pthread_mutex_t", header: "<pthread.h>".} = int$/;"	t
Pthread_mutex	$NIMLIB/posix/posix_other.nim	/^  Pthread_mutex* {.importc: "pthread_mutex_t", header: "<sys\/types.h>".} = int$/;"	t
Pthread_once	$NIMLIB/posix/posix_haiku.nim	/^  Pthread_once* {.importc: "pthread_once_t", header: "<sys\/types.h>".} = object$/;"	t
Pthread_once	$NIMLIB/posix/posix_linux_amd64.nim	/^  Pthread_once* {.importc: "pthread_once_t", header: "<sys\/types.h>".} = cint$/;"	t
Pthread_once	$NIMLIB/posix/posix_macos_amd64.nim	/^  Pthread_once* {.importc: "pthread_once_t", header: "<sys\/types.h>".} = int$/;"	t
Pthread_once	$NIMLIB/posix/posix_nintendoswitch.nim	/^  Pthread_once* {.importc: "pthread_once_t", header: "<sys\/types.h>".} = cint$/;"	t
Pthread_once	$NIMLIB/posix/posix_openbsd_amd64.nim	/^  Pthread_once* {.importc: "pthread_once_t", header: "<pthread.h>".} = int$/;"	t
Pthread_once	$NIMLIB/posix/posix_other.nim	/^  Pthread_once* {.importc: "pthread_once_t", header: "<sys\/types.h>".} = int$/;"	t
PunctuationChars	$NIMLIB/pure/strutils.nim	/^  PunctuationChars* = {'!'..'\/', ':'..'@', '['..'`', '{'..'~'}$/;"	t
QuitFailure	$NIMLIB/system.nim	/^  QuitFailure* = 1$/;"	t
QuitSuccess	$NIMLIB/system.nim	/^  QuitSuccess* = 0$/;"	t
RADIXCHAR	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const RADIXCHAR* = cint(65536)$/;"	t
RADIXCHAR	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const RADIXCHAR* = cint(50)$/;"	t
RADIXCHAR	$NIMLIB/posix/posix_other_consts.nim	/^var RADIXCHAR* {.importc: "RADIXCHAR", header: "<langinfo.h>".}: cint$/;"	t
REALTIME_PRIORITY_CLASS	$NIMLIB/windows/winlean.nim	/^  REALTIME_PRIORITY_CLASS* = 256'i32$/;"	t
RLIMIT_NOFILE	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const RLIMIT_NOFILE* = cint(7)$/;"	t
RLIMIT_NOFILE	$NIMLIB/posix/posix_other_consts.nim	/^var RLIMIT_NOFILE* {.importc: "RLIMIT_NOFILE", header: "<sys\/resource.h>".}: cint$/;"	t
RLock	$NIMLIB/core/rlocks.nim	/^  RLock* = SysLock ## Nim lock, re-entrant$/;"	t
RSA_free	$NIMLIB/wrappers/openssl.nim	/^proc RSA_free*(rsa: PRSA) {.cdecl, dynlib: DLLUtilName, importc.}$/;"	f
RSA_private_decrypt	$NIMLIB/wrappers/openssl.nim	/^proc RSA_private_decrypt*(flen: cint, fr: ptr uint8, to: ptr uint8, rsa: PRSA, padding: PaddingT/;"	f
RSA_private_encrypt	$NIMLIB/wrappers/openssl.nim	/^proc RSA_private_encrypt*(flen: cint, fr: ptr uint8, to: ptr uint8, rsa: PRSA, padding: PaddingT/;"	f
RSA_public_decrypt	$NIMLIB/wrappers/openssl.nim	/^proc RSA_public_decrypt*(flen: cint, fr: ptr uint8, to: ptr uint8, rsa: PRSA, padding: PaddingTy/;"	f
RSA_public_encrypt	$NIMLIB/wrappers/openssl.nim	/^proc RSA_public_encrypt*(flen: cint, fr: ptr uint8, to: ptr uint8, rsa: PRSA, padding: PaddingTy/;"	f
RSA_size	$NIMLIB/wrappers/openssl.nim	/^proc RSA_size*(rsa: PRSA): cint {.cdecl, dynlib: DLLUtilName, importc.}$/;"	f
RSA_verify	$NIMLIB/wrappers/openssl.nim	/^proc RSA_verify*(kind: cint, origMsg: pointer, origMsgLen: cuint, signature: pointer,$/;"	f
RTLD_GLOBAL	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const RTLD_GLOBAL* = cint(256)$/;"	t
RTLD_GLOBAL	$NIMLIB/posix/posix_other_consts.nim	/^var RTLD_GLOBAL* {.importc: "RTLD_GLOBAL", header: "<dlfcn.h>".}: cint$/;"	t
RTLD_LAZY	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const RTLD_LAZY* = cint(1)$/;"	t
RTLD_LAZY	$NIMLIB/posix/posix_other_consts.nim	/^var RTLD_LAZY* {.importc: "RTLD_LAZY", header: "<dlfcn.h>".}: cint$/;"	t
RTLD_LOCAL	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const RTLD_LOCAL* = cint(0)$/;"	t
RTLD_LOCAL	$NIMLIB/posix/posix_other_consts.nim	/^var RTLD_LOCAL* {.importc: "RTLD_LOCAL", header: "<dlfcn.h>".}: cint$/;"	t
RTLD_NOW	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const RTLD_NOW* = cint(2)$/;"	t
RTLD_NOW	$NIMLIB/posix/posix_other_consts.nim	/^var RTLD_NOW* {.importc: "RTLD_NOW", header: "<dlfcn.h>".}: cint$/;"	t
RUSAGE_CHILDREN	$NIMLIB/posix/posix.nim	/^  RUSAGE_CHILDREN* = cint(-1)$/;"	t
RUSAGE_SELF	$NIMLIB/posix/posix.nim	/^  RUSAGE_SELF* = cint(0)$/;"	t
RUSAGE_THREAD	$NIMLIB/posix/posix.nim	/^  RUSAGE_THREAD* = cint(1)    # This one is less std; Linux, BSD agree though.$/;"	t
R_OK	$NIMLIB/posix/posix_freertos_consts.nim	/^const R_OK* = cint(4)$/;"	t
R_OK	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const R_OK* = cint(4)$/;"	t
R_OK	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const R_OK* = cint(4)$/;"	t
R_OK	$NIMLIB/posix/posix_other_consts.nim	/^var R_OK* {.importc: "R_OK", header: "<unistd.h>".}: cint$/;"	t
Rand	$NIMLIB/pure/random.nim	/^  Rand* = object ## State of a random number generator.$/;"	t
Range	$NIMLIB/js/dom.nim	/^  Range* {.importc.} = ref object$/;"	t
RangeDefect	$NIMLIB/system/exceptions.nim	/^  RangeDefect* = object of Defect ## \\$/;"	t
RangeError	$NIMLIB/system/exceptions.nim	/^    RangeError* {.deprecated: "See corresponding Defect".} = RangeDefect$/;"	t
Rational	$NIMLIB/pure/rationals.nim	/^type Rational*[T] = object$/;"	t
ReadDirEffect	$NIMLIB/std/private/oscommon.nim	/^  ReadDirEffect* = object of ReadIOEffect   ## Effect that denotes a read$/;"	t
ReadEnvEffect	$NIMLIB/std/envvars.nim	/^  ReadEnvEffect* = object of ReadIOEffect   ## Effect that denotes a read$/;"	t
ReadIOEffect	$NIMLIB/system/exceptions.nim	/^  ReadIOEffect* = object of IOEffect   ## Effect describing a read IO operation.$/;"	t
ReadLineResult	$NIMLIB/pure/net.nim	/^  ReadLineResult* = enum ## result for readLineAsync$/;"	t
ReadLineResult	$NIMLIB/wrappers/linenoise/linenoise.nim	/^  type ReadLineResult* = object$/;"	t
ReadSocketStream	$NIMLIB/std/socketstreams.nim	/^  ReadSocketStream* = ref ReadSocketStreamObj$/;"	t
ReadSocketStreamObj	$NIMLIB/std/socketstreams.nim	/^  ReadSocketStreamObj* = object of StreamObj$/;"	t
ReadyKey	$NIMLIB/pure/selectors.nim	/^    ReadyKey* = object$/;"	t
RegExp	$NIMLIB/js/jsre.nim	/^type RegExp* = ref object of JsRoot$/;"	t
Regex	$NIMLIB/impure/nre.nim	/^  Regex* = ref object$/;"	t
Regex	$NIMLIB/impure/re.nim	/^  Regex* = ref RegexDesc ## a compiled regular expression$/;"	t
RegexError	$NIMLIB/impure/nre.nim	/^  RegexError* = ref object of CatchableError$/;"	t
RegexError	$NIMLIB/impure/re.nim	/^  RegexError* = object of ValueError$/;"	t
RegexFlag	$NIMLIB/impure/re.nim	/^  RegexFlag* = enum     ## options for regular expressions$/;"	t
RegexInternalError	$NIMLIB/impure/nre.nim	/^  RegexInternalError* = ref object of RegexError$/;"	t
RegexMatch	$NIMLIB/impure/nre.nim	/^  RegexMatch* = object$/;"	t
Request	$NIMLIB/pure/asynchttpserver.nim	/^  Request* = object$/;"	t
Request	$NIMLIB/std/jsfetch.nim	/^  Request* = ref object of JsRoot  ## https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/API\/Re/;"	t
RequestMethod	$NIMLIB/pure/cgi.nim	/^  RequestMethod* = enum ## The used request method.$/;"	t
ReraiseDefect	$NIMLIB/system/exceptions.nim	/^  ReraiseDefect* = object of Defect ## \\$/;"	t
ReraiseError	$NIMLIB/system/exceptions.nim	/^    ReraiseError* {.deprecated: "See corresponding Defect".} = ReraiseDefect$/;"	t
ReservedMem	$NIMLIB/pure/reservedmem.nim	/^  ReservedMem* = object$/;"	t
ReservedMemSeq	$NIMLIB/pure/reservedmem.nim	/^  ReservedMemSeq*[T] = object$/;"	t
ResourceExhaustedError	$NIMLIB/system/exceptions.nim	/^  ResourceExhaustedError* = object of CatchableError ## \\$/;"	t
Response	$NIMLIB/pure/httpclient.nim	/^  Response* = ref object$/;"	t
Response	$NIMLIB/std/jsfetch.nim	/^  Response* = ref object of JsRoot  ## https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/API\/R/;"	t
RollingFileLogger	$NIMLIB/pure/logging.nim	/^    RollingFileLogger* = ref object of FileLogger$/;"	t
RootEffect	$NIMLIB/system.nim	/^  RootEffect* {.compilerproc.} = object of RootObj ## \\$/;"	t
RootNodeOptions	$NIMLIB/js/dom.nim	/^    RootNodeOptions* = object of RootObj$/;"	t
RootObj	$NIMLIB/system.nim	/^  RootObj* {.compilerproc, inheritable.} =$/;"	t
RootRef	$NIMLIB/system.nim	/^  RootRef* = ref RootObj ## Reference to `RootObj`.$/;"	t
Rope	$NIMLIB/pure/ropes.nim	/^  Rope* {.acyclic.} = ref object$/;"	t
RoutineNodes	$NIMLIB/core/macros.nim	/^  RoutineNodes* = {nnkProcDef, nnkFuncDef, nnkMethodDef, nnkDo, nnkLambda,$/;"	t
RstFileTable	$NIMLIB/packages/docutils/rst.nim	/^  RstFileTable* = object$/;"	t
RstGenerator	$NIMLIB/packages/docutils/rstgen.nim	/^  RstGenerator* = object of RootObj$/;"	t
RstNode	$NIMLIB/packages/docutils/rstast.nim	/^  RstNode* {.acyclic, final.} = object ## AST node (result of RST parsing)$/;"	t
RstNodeKind	$NIMLIB/packages/docutils/rstast.nim	/^  RstNodeKind* = enum        ## the possible node kinds of an PRstNode$/;"	t
RstNodeSeq	$NIMLIB/packages/docutils/rstast.nim	/^  RstNodeSeq* = seq[PRstNode]$/;"	t
RstParseOption	$NIMLIB/packages/docutils/rst.nim	/^  RstParseOption* = enum     ## options for the RST parser$/;"	t
RstParseOptions	$NIMLIB/packages/docutils/rst.nim	/^  RstParseOptions* = set[RstParseOption]$/;"	t
RtArray	$NIMLIB/pure/collections/rtarrays.nim	/^  RtArray*[T] = object ##$/;"	t
Rune	$NIMLIB/pure/unicode.nim	/^  Rune* = distinct RuneImpl ## \\$/;"	t
RunningRegress	$NIMLIB/pure/stats.nim	/^  RunningRegress* = object ## An accumulator for regression calculations.$/;"	t
RunningStat	$NIMLIB/pure/stats.nim	/^  RunningStat* = object           ## An accumulator for statistical data.$/;"	t
SA_NOCLDSTOP	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SA_NOCLDSTOP* = cint(1)$/;"	t
SA_NOCLDSTOP	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SA_NOCLDSTOP* = cint(1)$/;"	t
SA_NOCLDSTOP	$NIMLIB/posix/posix_other_consts.nim	/^var SA_NOCLDSTOP* {.importc: "SA_NOCLDSTOP", header: "<signal.h>".}: cint$/;"	t
SA_NOCLDWAIT	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SA_NOCLDWAIT* = cint(2)$/;"	t
SA_NOCLDWAIT	$NIMLIB/posix/posix_other_consts.nim	/^var SA_NOCLDWAIT* {.importc: "SA_NOCLDWAIT", header: "<signal.h>".}: cint$/;"	t
SA_NODEFER	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SA_NODEFER* = cint(1073741824)$/;"	t
SA_NODEFER	$NIMLIB/posix/posix_other_consts.nim	/^var SA_NODEFER* {.importc: "SA_NODEFER", header: "<signal.h>".}: cint$/;"	t
SA_ONSTACK	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SA_ONSTACK* = cint(134217728)$/;"	t
SA_ONSTACK	$NIMLIB/posix/posix_other_consts.nim	/^var SA_ONSTACK* {.importc: "SA_ONSTACK", header: "<signal.h>".}: cint$/;"	t
SA_RESETHAND	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SA_RESETHAND* = cint(-2147483648)$/;"	t
SA_RESETHAND	$NIMLIB/posix/posix_other_consts.nim	/^var SA_RESETHAND* {.importc: "SA_RESETHAND", header: "<signal.h>".}: cint$/;"	t
SA_RESTART	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SA_RESTART* = cint(268435456)$/;"	t
SA_RESTART	$NIMLIB/posix/posix_other_consts.nim	/^var SA_RESTART* {.importc: "SA_RESTART", header: "<signal.h>".}: cint$/;"	t
SA_SIGINFO	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SA_SIGINFO* = cint(4)$/;"	t
SA_SIGINFO	$NIMLIB/posix/posix_other_consts.nim	/^var SA_SIGINFO* {.importc: "SA_SIGINFO", header: "<signal.h>".}: cint$/;"	t
SCHED_FIFO	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SCHED_FIFO* = cint(1)$/;"	t
SCHED_FIFO	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SCHED_FIFO* = cint(1)$/;"	t
SCHED_FIFO	$NIMLIB/posix/posix_other_consts.nim	/^var SCHED_FIFO* {.importc: "SCHED_FIFO", header: "<sched.h>".}: cint$/;"	t
SCHED_OTHER	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SCHED_OTHER* = cint(0)$/;"	t
SCHED_OTHER	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SCHED_OTHER* = cint(0)$/;"	t
SCHED_OTHER	$NIMLIB/posix/posix_other_consts.nim	/^var SCHED_OTHER* {.importc: "SCHED_OTHER", header: "<sched.h>".}: cint$/;"	t
SCHED_RR	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SCHED_RR* = cint(2)$/;"	t
SCHED_RR	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SCHED_RR* = cint(2)$/;"	t
SCHED_RR	$NIMLIB/posix/posix_other_consts.nim	/^var SCHED_RR* {.importc: "SCHED_RR", header: "<sched.h>".}: cint$/;"	t
SCHED_SPORADIC	$NIMLIB/posix/posix_other_consts.nim	/^var SCHED_SPORADIC* {.importc: "SCHED_SPORADIC", header: "<sched.h>".}: cint$/;"	t
SCM_RIGHTS	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SCM_RIGHTS* = cint(1)$/;"	t
SCM_RIGHTS	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SCM_RIGHTS* = cint(1)$/;"	t
SCM_RIGHTS	$NIMLIB/posix/posix_other_consts.nim	/^var SCM_RIGHTS* {.importc: "SCM_RIGHTS", header: "<sys\/socket.h>".}: cint$/;"	t
SC_2_CHAR_TERM	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_2_CHAR_TERM* = cint(95)$/;"	t
SC_2_CHAR_TERM	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_2_CHAR_TERM* = cint(107)$/;"	t
SC_2_CHAR_TERM	$NIMLIB/posix/posix_other_consts.nim	/^var SC_2_CHAR_TERM* {.importc: "_SC_2_CHAR_TERM", header: "<unistd.h>".}: cint$/;"	t
SC_2_C_BIND	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_2_C_BIND* = cint(47)$/;"	t
SC_2_C_BIND	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_2_C_BIND* = cint(108)$/;"	t
SC_2_C_BIND	$NIMLIB/posix/posix_other_consts.nim	/^var SC_2_C_BIND* {.importc: "_SC_2_C_BIND", header: "<unistd.h>".}: cint$/;"	t
SC_2_C_DEV	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_2_C_DEV* = cint(48)$/;"	t
SC_2_C_DEV	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_2_C_DEV* = cint(109)$/;"	t
SC_2_C_DEV	$NIMLIB/posix/posix_other_consts.nim	/^var SC_2_C_DEV* {.importc: "_SC_2_C_DEV", header: "<unistd.h>".}: cint$/;"	t
SC_2_FORT_DEV	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_2_FORT_DEV* = cint(49)$/;"	t
SC_2_FORT_DEV	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_2_FORT_DEV* = cint(110)$/;"	t
SC_2_FORT_DEV	$NIMLIB/posix/posix_other_consts.nim	/^var SC_2_FORT_DEV* {.importc: "_SC_2_FORT_DEV", header: "<unistd.h>".}: cint$/;"	t
SC_2_FORT_RUN	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_2_FORT_RUN* = cint(50)$/;"	t
SC_2_FORT_RUN	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_2_FORT_RUN* = cint(111)$/;"	t
SC_2_FORT_RUN	$NIMLIB/posix/posix_other_consts.nim	/^var SC_2_FORT_RUN* {.importc: "_SC_2_FORT_RUN", header: "<unistd.h>".}: cint$/;"	t
SC_2_LOCALEDEF	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_2_LOCALEDEF* = cint(52)$/;"	t
SC_2_LOCALEDEF	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_2_LOCALEDEF* = cint(112)$/;"	t
SC_2_LOCALEDEF	$NIMLIB/posix/posix_other_consts.nim	/^var SC_2_LOCALEDEF* {.importc: "_SC_2_LOCALEDEF", header: "<unistd.h>".}: cint$/;"	t
SC_2_PBS	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_2_PBS* = cint(168)$/;"	t
SC_2_PBS	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_2_PBS* = cint(113)$/;"	t
SC_2_PBS	$NIMLIB/posix/posix_other_consts.nim	/^var SC_2_PBS* {.importc: "_SC_2_PBS", header: "<unistd.h>".}: cint$/;"	t
SC_2_PBS_ACCOUNTING	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_2_PBS_ACCOUNTING* = cint(169)$/;"	t
SC_2_PBS_ACCOUNTING	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_2_PBS_ACCOUNTING* = cint(114)$/;"	t
SC_2_PBS_ACCOUNTING	$NIMLIB/posix/posix_other_consts.nim	/^var SC_2_PBS_ACCOUNTING* {.importc: "_SC_2_PBS_ACCOUNTING", header: "<unistd.h>".}: cint$/;"	t
SC_2_PBS_CHECKPOINT	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_2_PBS_CHECKPOINT* = cint(175)$/;"	t
SC_2_PBS_CHECKPOINT	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_2_PBS_CHECKPOINT* = cint(115)$/;"	t
SC_2_PBS_CHECKPOINT	$NIMLIB/posix/posix_other_consts.nim	/^var SC_2_PBS_CHECKPOINT* {.importc: "_SC_2_PBS_CHECKPOINT", header: "<unistd.h>".}: cint$/;"	t
SC_2_PBS_LOCATE	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_2_PBS_LOCATE* = cint(170)$/;"	t
SC_2_PBS_LOCATE	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_2_PBS_LOCATE* = cint(116)$/;"	t
SC_2_PBS_LOCATE	$NIMLIB/posix/posix_other_consts.nim	/^var SC_2_PBS_LOCATE* {.importc: "_SC_2_PBS_LOCATE", header: "<unistd.h>".}: cint$/;"	t
SC_2_PBS_MESSAGE	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_2_PBS_MESSAGE* = cint(171)$/;"	t
SC_2_PBS_MESSAGE	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_2_PBS_MESSAGE* = cint(117)$/;"	t
SC_2_PBS_MESSAGE	$NIMLIB/posix/posix_other_consts.nim	/^var SC_2_PBS_MESSAGE* {.importc: "_SC_2_PBS_MESSAGE", header: "<unistd.h>".}: cint$/;"	t
SC_2_PBS_TRACK	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_2_PBS_TRACK* = cint(172)$/;"	t
SC_2_PBS_TRACK	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_2_PBS_TRACK* = cint(118)$/;"	t
SC_2_PBS_TRACK	$NIMLIB/posix/posix_other_consts.nim	/^var SC_2_PBS_TRACK* {.importc: "_SC_2_PBS_TRACK", header: "<unistd.h>".}: cint$/;"	t
SC_2_SW_DEV	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_2_SW_DEV* = cint(51)$/;"	t
SC_2_SW_DEV	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_2_SW_DEV* = cint(119)$/;"	t
SC_2_SW_DEV	$NIMLIB/posix/posix_other_consts.nim	/^var SC_2_SW_DEV* {.importc: "_SC_2_SW_DEV", header: "<unistd.h>".}: cint$/;"	t
SC_2_UPE	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_2_UPE* = cint(97)$/;"	t
SC_2_UPE	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_2_UPE* = cint(120)$/;"	t
SC_2_UPE	$NIMLIB/posix/posix_other_consts.nim	/^var SC_2_UPE* {.importc: "_SC_2_UPE", header: "<unistd.h>".}: cint$/;"	t
SC_2_VERSION	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_2_VERSION* = cint(46)$/;"	t
SC_2_VERSION	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_2_VERSION* = cint(121)$/;"	t
SC_2_VERSION	$NIMLIB/posix/posix_other_consts.nim	/^var SC_2_VERSION* {.importc: "_SC_2_VERSION", header: "<unistd.h>".}: cint$/;"	t
SC_ADVISORY_INFO	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_ADVISORY_INFO* = cint(132)$/;"	t
SC_ADVISORY_INFO	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_ADVISORY_INFO* = cint(54)$/;"	t
SC_ADVISORY_INFO	$NIMLIB/posix/posix_other_consts.nim	/^var SC_ADVISORY_INFO* {.importc: "_SC_ADVISORY_INFO", header: "<unistd.h>".}: cint$/;"	t
SC_AIO_LISTIO_MAX	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_AIO_LISTIO_MAX* = cint(23)$/;"	t
SC_AIO_LISTIO_MAX	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_AIO_LISTIO_MAX* = cint(34)$/;"	t
SC_AIO_LISTIO_MAX	$NIMLIB/posix/posix_other_consts.nim	/^var SC_AIO_LISTIO_MAX* {.importc: "_SC_AIO_LISTIO_MAX", header: "<unistd.h>".}: cint$/;"	t
SC_AIO_MAX	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_AIO_MAX* = cint(24)$/;"	t
SC_AIO_MAX	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_AIO_MAX* = cint(35)$/;"	t
SC_AIO_MAX	$NIMLIB/posix/posix_other_consts.nim	/^var SC_AIO_MAX* {.importc: "_SC_AIO_MAX", header: "<unistd.h>".}: cint$/;"	t
SC_AIO_PRIO_DELTA_MAX	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_AIO_PRIO_DELTA_MAX* = cint(25)$/;"	t
SC_AIO_PRIO_DELTA_MAX	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_AIO_PRIO_DELTA_MAX* = cint(36)$/;"	t
SC_AIO_PRIO_DELTA_MAX	$NIMLIB/posix/posix_other_consts.nim	/^var SC_AIO_PRIO_DELTA_MAX* {.importc: "_SC_AIO_PRIO_DELTA_MAX", header: "<unistd.h>".}: cint$/;"	t
SC_ARG_MAX	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_ARG_MAX* = cint(0)$/;"	t
SC_ARG_MAX	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_ARG_MAX* = cint(0)$/;"	t
SC_ARG_MAX	$NIMLIB/posix/posix_other_consts.nim	/^var SC_ARG_MAX* {.importc: "_SC_ARG_MAX", header: "<unistd.h>".}: cint$/;"	t
SC_ASYNCHRONOUS_IO	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_ASYNCHRONOUS_IO* = cint(12)$/;"	t
SC_ASYNCHRONOUS_IO	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_ASYNCHRONOUS_IO* = cint(21)$/;"	t
SC_ASYNCHRONOUS_IO	$NIMLIB/posix/posix_other_consts.nim	/^var SC_ASYNCHRONOUS_IO* {.importc: "_SC_ASYNCHRONOUS_IO", header: "<unistd.h>".}: cint$/;"	t
SC_ATEXIT_MAX	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_ATEXIT_MAX* = cint(87)$/;"	t
SC_ATEXIT_MAX	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_ATEXIT_MAX* = cint(55)$/;"	t
SC_ATEXIT_MAX	$NIMLIB/posix/posix_other_consts.nim	/^var SC_ATEXIT_MAX* {.importc: "_SC_ATEXIT_MAX", header: "<unistd.h>".}: cint$/;"	t
SC_BARRIERS	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_BARRIERS* = cint(133)$/;"	t
SC_BARRIERS	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_BARRIERS* = cint(56)$/;"	t
SC_BARRIERS	$NIMLIB/posix/posix_other_consts.nim	/^var SC_BARRIERS* {.importc: "_SC_BARRIERS", header: "<unistd.h>".}: cint$/;"	t
SC_BC_BASE_MAX	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_BC_BASE_MAX* = cint(36)$/;"	t
SC_BC_BASE_MAX	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_BC_BASE_MAX* = cint(57)$/;"	t
SC_BC_BASE_MAX	$NIMLIB/posix/posix_other_consts.nim	/^var SC_BC_BASE_MAX* {.importc: "_SC_BC_BASE_MAX", header: "<unistd.h>".}: cint$/;"	t
SC_BC_DIM_MAX	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_BC_DIM_MAX* = cint(37)$/;"	t
SC_BC_DIM_MAX	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_BC_DIM_MAX* = cint(58)$/;"	t
SC_BC_DIM_MAX	$NIMLIB/posix/posix_other_consts.nim	/^var SC_BC_DIM_MAX* {.importc: "_SC_BC_DIM_MAX", header: "<unistd.h>".}: cint$/;"	t
SC_BC_SCALE_MAX	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_BC_SCALE_MAX* = cint(38)$/;"	t
SC_BC_SCALE_MAX	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_BC_SCALE_MAX* = cint(59)$/;"	t
SC_BC_SCALE_MAX	$NIMLIB/posix/posix_other_consts.nim	/^var SC_BC_SCALE_MAX* {.importc: "_SC_BC_SCALE_MAX", header: "<unistd.h>".}: cint$/;"	t
SC_BC_STRING_MAX	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_BC_STRING_MAX* = cint(39)$/;"	t
SC_BC_STRING_MAX	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_BC_STRING_MAX* = cint(60)$/;"	t
SC_BC_STRING_MAX	$NIMLIB/posix/posix_other_consts.nim	/^var SC_BC_STRING_MAX* {.importc: "_SC_BC_STRING_MAX", header: "<unistd.h>".}: cint$/;"	t
SC_CHILD_MAX	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_CHILD_MAX* = cint(1)$/;"	t
SC_CHILD_MAX	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_CHILD_MAX* = cint(1)$/;"	t
SC_CHILD_MAX	$NIMLIB/posix/posix_other_consts.nim	/^var SC_CHILD_MAX* {.importc: "_SC_CHILD_MAX", header: "<unistd.h>".}: cint$/;"	t
SC_CLK_TCK	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_CLK_TCK* = cint(2)$/;"	t
SC_CLK_TCK	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_CLK_TCK* = cint(2)$/;"	t
SC_CLK_TCK	$NIMLIB/posix/posix_other_consts.nim	/^var SC_CLK_TCK* {.importc: "_SC_CLK_TCK", header: "<unistd.h>".}: cint$/;"	t
SC_CLOCK_SELECTION	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_CLOCK_SELECTION* = cint(137)$/;"	t
SC_CLOCK_SELECTION	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_CLOCK_SELECTION* = cint(61)$/;"	t
SC_CLOCK_SELECTION	$NIMLIB/posix/posix_other_consts.nim	/^var SC_CLOCK_SELECTION* {.importc: "_SC_CLOCK_SELECTION", header: "<unistd.h>".}: cint$/;"	t
SC_COLL_WEIGHTS_MAX	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_COLL_WEIGHTS_MAX* = cint(40)$/;"	t
SC_COLL_WEIGHTS_MAX	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_COLL_WEIGHTS_MAX* = cint(62)$/;"	t
SC_COLL_WEIGHTS_MAX	$NIMLIB/posix/posix_other_consts.nim	/^var SC_COLL_WEIGHTS_MAX* {.importc: "_SC_COLL_WEIGHTS_MAX", header: "<unistd.h>".}: cint$/;"	t
SC_CPUTIME	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_CPUTIME* = cint(138)$/;"	t
SC_CPUTIME	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_CPUTIME* = cint(63)$/;"	t
SC_CPUTIME	$NIMLIB/posix/posix_other_consts.nim	/^var SC_CPUTIME* {.importc: "_SC_CPUTIME", header: "<unistd.h>".}: cint$/;"	t
SC_DELAYTIMER_MAX	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_DELAYTIMER_MAX* = cint(26)$/;"	t
SC_DELAYTIMER_MAX	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_DELAYTIMER_MAX* = cint(37)$/;"	t
SC_DELAYTIMER_MAX	$NIMLIB/posix/posix_other_consts.nim	/^var SC_DELAYTIMER_MAX* {.importc: "_SC_DELAYTIMER_MAX", header: "<unistd.h>".}: cint$/;"	t
SC_EXPR_NEST_MAX	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_EXPR_NEST_MAX* = cint(42)$/;"	t
SC_EXPR_NEST_MAX	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_EXPR_NEST_MAX* = cint(64)$/;"	t
SC_EXPR_NEST_MAX	$NIMLIB/posix/posix_other_consts.nim	/^var SC_EXPR_NEST_MAX* {.importc: "_SC_EXPR_NEST_MAX", header: "<unistd.h>".}: cint$/;"	t
SC_FSYNC	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_FSYNC* = cint(15)$/;"	t
SC_FSYNC	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_FSYNC* = cint(22)$/;"	t
SC_FSYNC	$NIMLIB/posix/posix_other_consts.nim	/^var SC_FSYNC* {.importc: "_SC_FSYNC", header: "<unistd.h>".}: cint$/;"	t
SC_GETGR_R_SIZE_MAX	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_GETGR_R_SIZE_MAX* = cint(69)$/;"	t
SC_GETGR_R_SIZE_MAX	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_GETGR_R_SIZE_MAX* = cint(50)$/;"	t
SC_GETGR_R_SIZE_MAX	$NIMLIB/posix/posix_other_consts.nim	/^var SC_GETGR_R_SIZE_MAX* {.importc: "_SC_GETGR_R_SIZE_MAX", header: "<unistd.h>".}: cint$/;"	t
SC_GETPW_R_SIZE_MAX	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_GETPW_R_SIZE_MAX* = cint(70)$/;"	t
SC_GETPW_R_SIZE_MAX	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_GETPW_R_SIZE_MAX* = cint(51)$/;"	t
SC_GETPW_R_SIZE_MAX	$NIMLIB/posix/posix_other_consts.nim	/^var SC_GETPW_R_SIZE_MAX* {.importc: "_SC_GETPW_R_SIZE_MAX", header: "<unistd.h>".}: cint$/;"	t
SC_HOST_NAME_MAX	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_HOST_NAME_MAX* = cint(180)$/;"	t
SC_HOST_NAME_MAX	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_HOST_NAME_MAX* = cint(65)$/;"	t
SC_HOST_NAME_MAX	$NIMLIB/posix/posix_other_consts.nim	/^var SC_HOST_NAME_MAX* {.importc: "_SC_HOST_NAME_MAX", header: "<unistd.h>".}: cint$/;"	t
SC_IOV_MAX	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_IOV_MAX* = cint(60)$/;"	t
SC_IOV_MAX	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_IOV_MAX* = cint(66)$/;"	t
SC_IOV_MAX	$NIMLIB/posix/posix_other_consts.nim	/^var SC_IOV_MAX* {.importc: "_SC_IOV_MAX", header: "<unistd.h>".}: cint$/;"	t
SC_IPV6	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_IPV6* = cint(235)$/;"	t
SC_IPV6	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_IPV6* = cint(67)$/;"	t
SC_IPV6	$NIMLIB/posix/posix_other_consts.nim	/^var SC_IPV6* {.importc: "_SC_IPV6", header: "<unistd.h>".}: cint$/;"	t
SC_JOB_CONTROL	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_JOB_CONTROL* = cint(7)$/;"	t
SC_JOB_CONTROL	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_JOB_CONTROL* = cint(5)$/;"	t
SC_JOB_CONTROL	$NIMLIB/posix/posix_other_consts.nim	/^var SC_JOB_CONTROL* {.importc: "_SC_JOB_CONTROL", header: "<unistd.h>".}: cint$/;"	t
SC_LINE_MAX	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_LINE_MAX* = cint(43)$/;"	t
SC_LINE_MAX	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_LINE_MAX* = cint(68)$/;"	t
SC_LINE_MAX	$NIMLIB/posix/posix_other_consts.nim	/^var SC_LINE_MAX* {.importc: "_SC_LINE_MAX", header: "<unistd.h>".}: cint$/;"	t
SC_LOGIN_NAME_MAX	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_LOGIN_NAME_MAX* = cint(71)$/;"	t
SC_LOGIN_NAME_MAX	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_LOGIN_NAME_MAX* = cint(52)$/;"	t
SC_LOGIN_NAME_MAX	$NIMLIB/posix/posix_other_consts.nim	/^var SC_LOGIN_NAME_MAX* {.importc: "_SC_LOGIN_NAME_MAX", header: "<unistd.h>".}: cint$/;"	t
SC_MAPPED_FILES	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_MAPPED_FILES* = cint(16)$/;"	t
SC_MAPPED_FILES	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_MAPPED_FILES* = cint(23)$/;"	t
SC_MAPPED_FILES	$NIMLIB/posix/posix_other_consts.nim	/^var SC_MAPPED_FILES* {.importc: "_SC_MAPPED_FILES", header: "<unistd.h>".}: cint$/;"	t
SC_MEMLOCK	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_MEMLOCK* = cint(17)$/;"	t
SC_MEMLOCK	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_MEMLOCK* = cint(24)$/;"	t
SC_MEMLOCK	$NIMLIB/posix/posix_other_consts.nim	/^var SC_MEMLOCK* {.importc: "_SC_MEMLOCK", header: "<unistd.h>".}: cint$/;"	t
SC_MEMLOCK_RANGE	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_MEMLOCK_RANGE* = cint(18)$/;"	t
SC_MEMLOCK_RANGE	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_MEMLOCK_RANGE* = cint(25)$/;"	t
SC_MEMLOCK_RANGE	$NIMLIB/posix/posix_other_consts.nim	/^var SC_MEMLOCK_RANGE* {.importc: "_SC_MEMLOCK_RANGE", header: "<unistd.h>".}: cint$/;"	t
SC_MEMORY_PROTECTION	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_MEMORY_PROTECTION* = cint(19)$/;"	t
SC_MEMORY_PROTECTION	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_MEMORY_PROTECTION* = cint(26)$/;"	t
SC_MEMORY_PROTECTION	$NIMLIB/posix/posix_other_consts.nim	/^var SC_MEMORY_PROTECTION* {.importc: "_SC_MEMORY_PROTECTION", header: "<unistd.h>".}: cint$/;"	t
SC_MESSAGE_PASSING	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_MESSAGE_PASSING* = cint(20)$/;"	t
SC_MESSAGE_PASSING	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_MESSAGE_PASSING* = cint(27)$/;"	t
SC_MESSAGE_PASSING	$NIMLIB/posix/posix_other_consts.nim	/^var SC_MESSAGE_PASSING* {.importc: "_SC_MESSAGE_PASSING", header: "<unistd.h>".}: cint$/;"	t
SC_MONOTONIC_CLOCK	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_MONOTONIC_CLOCK* = cint(149)$/;"	t
SC_MONOTONIC_CLOCK	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_MONOTONIC_CLOCK* = cint(69)$/;"	t
SC_MONOTONIC_CLOCK	$NIMLIB/posix/posix_other_consts.nim	/^var SC_MONOTONIC_CLOCK* {.importc: "_SC_MONOTONIC_CLOCK", header: "<unistd.h>".}: cint$/;"	t
SC_MQ_OPEN_MAX	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_MQ_OPEN_MAX* = cint(27)$/;"	t
SC_MQ_OPEN_MAX	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_MQ_OPEN_MAX* = cint(13)$/;"	t
SC_MQ_OPEN_MAX	$NIMLIB/posix/posix_other_consts.nim	/^var SC_MQ_OPEN_MAX* {.importc: "_SC_MQ_OPEN_MAX", header: "<unistd.h>".}: cint$/;"	t
SC_MQ_PRIO_MAX	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_MQ_PRIO_MAX* = cint(28)$/;"	t
SC_MQ_PRIO_MAX	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_MQ_PRIO_MAX* = cint(14)$/;"	t
SC_MQ_PRIO_MAX	$NIMLIB/posix/posix_other_consts.nim	/^var SC_MQ_PRIO_MAX* {.importc: "_SC_MQ_PRIO_MAX", header: "<unistd.h>".}: cint$/;"	t
SC_NGROUPS_MAX	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_NGROUPS_MAX* = cint(3)$/;"	t
SC_NGROUPS_MAX	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_NGROUPS_MAX* = cint(3)$/;"	t
SC_NGROUPS_MAX	$NIMLIB/posix/posix_other_consts.nim	/^var SC_NGROUPS_MAX* {.importc: "_SC_NGROUPS_MAX", header: "<unistd.h>".}: cint$/;"	t
SC_NPROCESSORS_ONLN	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_NPROCESSORS_ONLN* = cint(84)$/;"	t
SC_NPROCESSORS_ONLN	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_NPROCESSORS_ONLN* = cint(10)$/;"	t
SC_NPROCESSORS_ONLN	$NIMLIB/posix/posix_other_consts.nim	/^var SC_NPROCESSORS_ONLN* {.importc: "_SC_NPROCESSORS_ONLN", header: "<unistd.h>".}: cint$/;"	t
SC_OPEN_MAX	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_OPEN_MAX* = cint(4)$/;"	t
SC_OPEN_MAX	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_OPEN_MAX* = cint(4)$/;"	t
SC_OPEN_MAX	$NIMLIB/posix/posix_other_consts.nim	/^var SC_OPEN_MAX* {.importc: "_SC_OPEN_MAX", header: "<unistd.h>".}: cint$/;"	t
SC_PAGESIZE	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_PAGESIZE* = cint(30)$/;"	t
SC_PAGESIZE	$NIMLIB/posix/posix_other_consts.nim	/^var SC_PAGESIZE* {.importc: "_SC_PAGESIZE", header: "<unistd.h>".}: cint$/;"	t
SC_PAGE_SIZE	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_PAGE_SIZE* = cint(8)$/;"	t
SC_PRIORITIZED_IO	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_PRIORITIZED_IO* = cint(13)$/;"	t
SC_PRIORITIZED_IO	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_PRIORITIZED_IO* = cint(28)$/;"	t
SC_PRIORITIZED_IO	$NIMLIB/posix/posix_other_consts.nim	/^var SC_PRIORITIZED_IO* {.importc: "_SC_PRIORITIZED_IO", header: "<unistd.h>".}: cint$/;"	t
SC_PRIORITY_SCHEDULING	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_PRIORITY_SCHEDULING* = cint(10)$/;"	t
SC_PRIORITY_SCHEDULING	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_PRIORITY_SCHEDULING* = cint(101)$/;"	t
SC_PRIORITY_SCHEDULING	$NIMLIB/posix/posix_other_consts.nim	/^var SC_PRIORITY_SCHEDULING* {.importc: "_SC_PRIORITY_SCHEDULING", header: "<unistd.h>".}: cint$/;"	t
SC_RAW_SOCKETS	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_RAW_SOCKETS* = cint(236)$/;"	t
SC_RAW_SOCKETS	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_RAW_SOCKETS* = cint(70)$/;"	t
SC_RAW_SOCKETS	$NIMLIB/posix/posix_other_consts.nim	/^var SC_RAW_SOCKETS* {.importc: "_SC_RAW_SOCKETS", header: "<unistd.h>".}: cint$/;"	t
SC_READER_WRITER_LOCKS	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_READER_WRITER_LOCKS* = cint(153)$/;"	t
SC_READER_WRITER_LOCKS	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_READER_WRITER_LOCKS* = cint(71)$/;"	t
SC_READER_WRITER_LOCKS	$NIMLIB/posix/posix_other_consts.nim	/^var SC_READER_WRITER_LOCKS* {.importc: "_SC_READER_WRITER_LOCKS", header: "<unistd.h>".}: cint$/;"	t
SC_REALTIME_SIGNALS	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_REALTIME_SIGNALS* = cint(9)$/;"	t
SC_REALTIME_SIGNALS	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_REALTIME_SIGNALS* = cint(29)$/;"	t
SC_REALTIME_SIGNALS	$NIMLIB/posix/posix_other_consts.nim	/^var SC_REALTIME_SIGNALS* {.importc: "_SC_REALTIME_SIGNALS", header: "<unistd.h>".}: cint$/;"	t
SC_REGEXP	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_REGEXP* = cint(155)$/;"	t
SC_REGEXP	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_REGEXP* = cint(72)$/;"	t
SC_REGEXP	$NIMLIB/posix/posix_other_consts.nim	/^var SC_REGEXP* {.importc: "_SC_REGEXP", header: "<unistd.h>".}: cint$/;"	t
SC_RE_DUP_MAX	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_RE_DUP_MAX* = cint(44)$/;"	t
SC_RE_DUP_MAX	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_RE_DUP_MAX* = cint(73)$/;"	t
SC_RE_DUP_MAX	$NIMLIB/posix/posix_other_consts.nim	/^var SC_RE_DUP_MAX* {.importc: "_SC_RE_DUP_MAX", header: "<unistd.h>".}: cint$/;"	t
SC_RTSIG_MAX	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_RTSIG_MAX* = cint(31)$/;"	t
SC_RTSIG_MAX	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_RTSIG_MAX* = cint(15)$/;"	t
SC_RTSIG_MAX	$NIMLIB/posix/posix_other_consts.nim	/^var SC_RTSIG_MAX* {.importc: "_SC_RTSIG_MAX", header: "<unistd.h>".}: cint$/;"	t
SC_SAVED_IDS	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_SAVED_IDS* = cint(8)$/;"	t
SC_SAVED_IDS	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_SAVED_IDS* = cint(6)$/;"	t
SC_SAVED_IDS	$NIMLIB/posix/posix_other_consts.nim	/^var SC_SAVED_IDS* {.importc: "_SC_SAVED_IDS", header: "<unistd.h>".}: cint$/;"	t
SC_SEMAPHORES	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_SEMAPHORES* = cint(21)$/;"	t
SC_SEMAPHORES	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_SEMAPHORES* = cint(30)$/;"	t
SC_SEMAPHORES	$NIMLIB/posix/posix_other_consts.nim	/^var SC_SEMAPHORES* {.importc: "_SC_SEMAPHORES", header: "<unistd.h>".}: cint$/;"	t
SC_SEM_NSEMS_MAX	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_SEM_NSEMS_MAX* = cint(32)$/;"	t
SC_SEM_NSEMS_MAX	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_SEM_NSEMS_MAX* = cint(16)$/;"	t
SC_SEM_NSEMS_MAX	$NIMLIB/posix/posix_other_consts.nim	/^var SC_SEM_NSEMS_MAX* {.importc: "_SC_SEM_NSEMS_MAX", header: "<unistd.h>".}: cint$/;"	t
SC_SEM_VALUE_MAX	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_SEM_VALUE_MAX* = cint(33)$/;"	t
SC_SEM_VALUE_MAX	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_SEM_VALUE_MAX* = cint(17)$/;"	t
SC_SEM_VALUE_MAX	$NIMLIB/posix/posix_other_consts.nim	/^var SC_SEM_VALUE_MAX* {.importc: "_SC_SEM_VALUE_MAX", header: "<unistd.h>".}: cint$/;"	t
SC_SHARED_MEMORY_OBJECTS	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_SHARED_MEMORY_OBJECTS* = cint(22)$/;"	t
SC_SHARED_MEMORY_OBJECTS	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_SHARED_MEMORY_OBJECTS* = cint(31)$/;"	t
SC_SHARED_MEMORY_OBJECTS	$NIMLIB/posix/posix_other_consts.nim	/^var SC_SHARED_MEMORY_OBJECTS* {.importc: "_SC_SHARED_MEMORY_OBJECTS", header: "<unistd.h>".}: ci/;"	t
SC_SHELL	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_SHELL* = cint(157)$/;"	t
SC_SHELL	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_SHELL* = cint(74)$/;"	t
SC_SHELL	$NIMLIB/posix/posix_other_consts.nim	/^var SC_SHELL* {.importc: "_SC_SHELL", header: "<unistd.h>".}: cint$/;"	t
SC_SIGQUEUE_MAX	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_SIGQUEUE_MAX* = cint(34)$/;"	t
SC_SIGQUEUE_MAX	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_SIGQUEUE_MAX* = cint(18)$/;"	t
SC_SIGQUEUE_MAX	$NIMLIB/posix/posix_other_consts.nim	/^var SC_SIGQUEUE_MAX* {.importc: "_SC_SIGQUEUE_MAX", header: "<unistd.h>".}: cint$/;"	t
SC_SPAWN	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_SPAWN* = cint(159)$/;"	t
SC_SPAWN	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_SPAWN* = cint(75)$/;"	t
SC_SPAWN	$NIMLIB/posix/posix_other_consts.nim	/^var SC_SPAWN* {.importc: "_SC_SPAWN", header: "<unistd.h>".}: cint$/;"	t
SC_SPIN_LOCKS	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_SPIN_LOCKS* = cint(154)$/;"	t
SC_SPIN_LOCKS	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_SPIN_LOCKS* = cint(76)$/;"	t
SC_SPIN_LOCKS	$NIMLIB/posix/posix_other_consts.nim	/^var SC_SPIN_LOCKS* {.importc: "_SC_SPIN_LOCKS", header: "<unistd.h>".}: cint$/;"	t
SC_SPORADIC_SERVER	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_SPORADIC_SERVER* = cint(160)$/;"	t
SC_SPORADIC_SERVER	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_SPORADIC_SERVER* = cint(77)$/;"	t
SC_SPORADIC_SERVER	$NIMLIB/posix/posix_other_consts.nim	/^var SC_SPORADIC_SERVER* {.importc: "_SC_SPORADIC_SERVER", header: "<unistd.h>".}: cint$/;"	t
SC_SS_REPL_MAX	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_SS_REPL_MAX* = cint(241)$/;"	t
SC_SS_REPL_MAX	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_SS_REPL_MAX* = cint(78)$/;"	t
SC_SS_REPL_MAX	$NIMLIB/posix/posix_other_consts.nim	/^var SC_SS_REPL_MAX* {.importc: "_SC_SS_REPL_MAX", header: "<unistd.h>".}: cint$/;"	t
SC_STREAM_MAX	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_STREAM_MAX* = cint(5)$/;"	t
SC_STREAM_MAX	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_STREAM_MAX* = cint(100)$/;"	t
SC_STREAM_MAX	$NIMLIB/posix/posix_other_consts.nim	/^var SC_STREAM_MAX* {.importc: "_SC_STREAM_MAX", header: "<unistd.h>".}: cint$/;"	t
SC_SYMLOOP_MAX	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_SYMLOOP_MAX* = cint(173)$/;"	t
SC_SYMLOOP_MAX	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_SYMLOOP_MAX* = cint(79)$/;"	t
SC_SYMLOOP_MAX	$NIMLIB/posix/posix_other_consts.nim	/^var SC_SYMLOOP_MAX* {.importc: "_SC_SYMLOOP_MAX", header: "<unistd.h>".}: cint$/;"	t
SC_SYNCHRONIZED_IO	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_SYNCHRONIZED_IO* = cint(14)$/;"	t
SC_SYNCHRONIZED_IO	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_SYNCHRONIZED_IO* = cint(32)$/;"	t
SC_SYNCHRONIZED_IO	$NIMLIB/posix/posix_other_consts.nim	/^var SC_SYNCHRONIZED_IO* {.importc: "_SC_SYNCHRONIZED_IO", header: "<unistd.h>".}: cint$/;"	t
SC_THREADS	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_THREADS* = cint(67)$/;"	t
SC_THREADS	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_THREADS* = cint(42)$/;"	t
SC_THREADS	$NIMLIB/posix/posix_other_consts.nim	/^var SC_THREADS* {.importc: "_SC_THREADS", header: "<unistd.h>".}: cint$/;"	t
SC_THREAD_ATTR_STACKADDR	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_THREAD_ATTR_STACKADDR* = cint(77)$/;"	t
SC_THREAD_ATTR_STACKADDR	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_THREAD_ATTR_STACKADDR* = cint(43)$/;"	t
SC_THREAD_ATTR_STACKADDR	$NIMLIB/posix/posix_other_consts.nim	/^var SC_THREAD_ATTR_STACKADDR* {.importc: "_SC_THREAD_ATTR_STACKADDR", header: "<unistd.h>".}: ci/;"	t
SC_THREAD_ATTR_STACKSIZE	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_THREAD_ATTR_STACKSIZE* = cint(78)$/;"	t
SC_THREAD_ATTR_STACKSIZE	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_THREAD_ATTR_STACKSIZE* = cint(44)$/;"	t
SC_THREAD_ATTR_STACKSIZE	$NIMLIB/posix/posix_other_consts.nim	/^var SC_THREAD_ATTR_STACKSIZE* {.importc: "_SC_THREAD_ATTR_STACKSIZE", header: "<unistd.h>".}: ci/;"	t
SC_THREAD_CPUTIME	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_THREAD_CPUTIME* = cint(139)$/;"	t
SC_THREAD_CPUTIME	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_THREAD_CPUTIME* = cint(80)$/;"	t
SC_THREAD_CPUTIME	$NIMLIB/posix/posix_other_consts.nim	/^var SC_THREAD_CPUTIME* {.importc: "_SC_THREAD_CPUTIME", header: "<unistd.h>".}: cint$/;"	t
SC_THREAD_DESTRUCTOR_ITERATIONS	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_THREAD_DESTRUCTOR_ITERATIONS* = cint(73)$/;"	t
SC_THREAD_DESTRUCTOR_ITERATIONS	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_THREAD_DESTRUCTOR_ITERATIONS* = cint(53)$/;"	t
SC_THREAD_DESTRUCTOR_ITERATIONS	$NIMLIB/posix/posix_other_consts.nim	/^var SC_THREAD_DESTRUCTOR_ITERATIONS* {.importc: "_SC_THREAD_DESTRUCTOR_ITERATIONS", header: "<un/;"	t
SC_THREAD_KEYS_MAX	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_THREAD_KEYS_MAX* = cint(74)$/;"	t
SC_THREAD_KEYS_MAX	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_THREAD_KEYS_MAX* = cint(38)$/;"	t
SC_THREAD_KEYS_MAX	$NIMLIB/posix/posix_other_consts.nim	/^var SC_THREAD_KEYS_MAX* {.importc: "_SC_THREAD_KEYS_MAX", header: "<unistd.h>".}: cint$/;"	t
SC_THREAD_PRIORITY_SCHEDULING	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_THREAD_PRIORITY_SCHEDULING* = cint(79)$/;"	t
SC_THREAD_PRIORITY_SCHEDULING	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_THREAD_PRIORITY_SCHEDULING* = cint(45)$/;"	t
SC_THREAD_PRIORITY_SCHEDULING	$NIMLIB/posix/posix_other_consts.nim	/^var SC_THREAD_PRIORITY_SCHEDULING* {.importc: "_SC_THREAD_PRIORITY_SCHEDULING", header: "<unistd/;"	t
SC_THREAD_PRIO_INHERIT	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_THREAD_PRIO_INHERIT* = cint(80)$/;"	t
SC_THREAD_PRIO_INHERIT	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_THREAD_PRIO_INHERIT* = cint(46)$/;"	t
SC_THREAD_PRIO_INHERIT	$NIMLIB/posix/posix_other_consts.nim	/^var SC_THREAD_PRIO_INHERIT* {.importc: "_SC_THREAD_PRIO_INHERIT", header: "<unistd.h>".}: cint$/;"	t
SC_THREAD_PRIO_PROTECT	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_THREAD_PRIO_PROTECT* = cint(81)$/;"	t
SC_THREAD_PRIO_PROTECT	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_THREAD_PRIO_PROTECT* = cint(47)$/;"	t
SC_THREAD_PRIO_PROTECT	$NIMLIB/posix/posix_other_consts.nim	/^var SC_THREAD_PRIO_PROTECT* {.importc: "_SC_THREAD_PRIO_PROTECT", header: "<unistd.h>".}: cint$/;"	t
SC_THREAD_PROCESS_SHARED	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_THREAD_PROCESS_SHARED* = cint(82)$/;"	t
SC_THREAD_PROCESS_SHARED	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_THREAD_PROCESS_SHARED* = cint(48)$/;"	t
SC_THREAD_PROCESS_SHARED	$NIMLIB/posix/posix_other_consts.nim	/^var SC_THREAD_PROCESS_SHARED* {.importc: "_SC_THREAD_PROCESS_SHARED", header: "<unistd.h>".}: ci/;"	t
SC_THREAD_SAFE_FUNCTIONS	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_THREAD_SAFE_FUNCTIONS* = cint(68)$/;"	t
SC_THREAD_SAFE_FUNCTIONS	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_THREAD_SAFE_FUNCTIONS* = cint(49)$/;"	t
SC_THREAD_SAFE_FUNCTIONS	$NIMLIB/posix/posix_other_consts.nim	/^var SC_THREAD_SAFE_FUNCTIONS* {.importc: "_SC_THREAD_SAFE_FUNCTIONS", header: "<unistd.h>".}: ci/;"	t
SC_THREAD_SPORADIC_SERVER	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_THREAD_SPORADIC_SERVER* = cint(161)$/;"	t
SC_THREAD_SPORADIC_SERVER	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_THREAD_SPORADIC_SERVER* = cint(81)$/;"	t
SC_THREAD_SPORADIC_SERVER	$NIMLIB/posix/posix_other_consts.nim	/^var SC_THREAD_SPORADIC_SERVER* {.importc: "_SC_THREAD_SPORADIC_SERVER", header: "<unistd.h>".}: /;"	t
SC_THREAD_STACK_MIN	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_THREAD_STACK_MIN* = cint(75)$/;"	t
SC_THREAD_STACK_MIN	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_THREAD_STACK_MIN* = cint(39)$/;"	t
SC_THREAD_STACK_MIN	$NIMLIB/posix/posix_other_consts.nim	/^var SC_THREAD_STACK_MIN* {.importc: "_SC_THREAD_STACK_MIN", header: "<unistd.h>".}: cint$/;"	t
SC_THREAD_THREADS_MAX	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_THREAD_THREADS_MAX* = cint(76)$/;"	t
SC_THREAD_THREADS_MAX	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_THREAD_THREADS_MAX* = cint(40)$/;"	t
SC_THREAD_THREADS_MAX	$NIMLIB/posix/posix_other_consts.nim	/^var SC_THREAD_THREADS_MAX* {.importc: "_SC_THREAD_THREADS_MAX", header: "<unistd.h>".}: cint$/;"	t
SC_TIMEOUTS	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_TIMEOUTS* = cint(164)$/;"	t
SC_TIMEOUTS	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_TIMEOUTS* = cint(82)$/;"	t
SC_TIMEOUTS	$NIMLIB/posix/posix_other_consts.nim	/^var SC_TIMEOUTS* {.importc: "_SC_TIMEOUTS", header: "<unistd.h>".}: cint$/;"	t
SC_TIMERS	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_TIMERS* = cint(11)$/;"	t
SC_TIMERS	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_TIMERS* = cint(33)$/;"	t
SC_TIMERS	$NIMLIB/posix/posix_other_consts.nim	/^var SC_TIMERS* {.importc: "_SC_TIMERS", header: "<unistd.h>".}: cint$/;"	t
SC_TIMER_MAX	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_TIMER_MAX* = cint(35)$/;"	t
SC_TIMER_MAX	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_TIMER_MAX* = cint(19)$/;"	t
SC_TIMER_MAX	$NIMLIB/posix/posix_other_consts.nim	/^var SC_TIMER_MAX* {.importc: "_SC_TIMER_MAX", header: "<unistd.h>".}: cint$/;"	t
SC_TRACE	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_TRACE* = cint(181)$/;"	t
SC_TRACE	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_TRACE* = cint(83)$/;"	t
SC_TRACE	$NIMLIB/posix/posix_other_consts.nim	/^var SC_TRACE* {.importc: "_SC_TRACE", header: "<unistd.h>".}: cint$/;"	t
SC_TRACE_EVENT_FILTER	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_TRACE_EVENT_FILTER* = cint(182)$/;"	t
SC_TRACE_EVENT_FILTER	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_TRACE_EVENT_FILTER* = cint(84)$/;"	t
SC_TRACE_EVENT_FILTER	$NIMLIB/posix/posix_other_consts.nim	/^var SC_TRACE_EVENT_FILTER* {.importc: "_SC_TRACE_EVENT_FILTER", header: "<unistd.h>".}: cint$/;"	t
SC_TRACE_EVENT_NAME_MAX	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_TRACE_EVENT_NAME_MAX* = cint(242)$/;"	t
SC_TRACE_EVENT_NAME_MAX	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_TRACE_EVENT_NAME_MAX* = cint(85)$/;"	t
SC_TRACE_EVENT_NAME_MAX	$NIMLIB/posix/posix_other_consts.nim	/^var SC_TRACE_EVENT_NAME_MAX* {.importc: "_SC_TRACE_EVENT_NAME_MAX", header: "<unistd.h>".}: cint$/;"	t
SC_TRACE_INHERIT	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_TRACE_INHERIT* = cint(183)$/;"	t
SC_TRACE_INHERIT	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_TRACE_INHERIT* = cint(86)$/;"	t
SC_TRACE_INHERIT	$NIMLIB/posix/posix_other_consts.nim	/^var SC_TRACE_INHERIT* {.importc: "_SC_TRACE_INHERIT", header: "<unistd.h>".}: cint$/;"	t
SC_TRACE_LOG	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_TRACE_LOG* = cint(184)$/;"	t
SC_TRACE_LOG	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_TRACE_LOG* = cint(87)$/;"	t
SC_TRACE_LOG	$NIMLIB/posix/posix_other_consts.nim	/^var SC_TRACE_LOG* {.importc: "_SC_TRACE_LOG", header: "<unistd.h>".}: cint$/;"	t
SC_TRACE_NAME_MAX	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_TRACE_NAME_MAX* = cint(243)$/;"	t
SC_TRACE_NAME_MAX	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_TRACE_NAME_MAX* = cint(88)$/;"	t
SC_TRACE_NAME_MAX	$NIMLIB/posix/posix_other_consts.nim	/^var SC_TRACE_NAME_MAX* {.importc: "_SC_TRACE_NAME_MAX", header: "<unistd.h>".}: cint$/;"	t
SC_TRACE_SYS_MAX	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_TRACE_SYS_MAX* = cint(244)$/;"	t
SC_TRACE_SYS_MAX	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_TRACE_SYS_MAX* = cint(89)$/;"	t
SC_TRACE_SYS_MAX	$NIMLIB/posix/posix_other_consts.nim	/^var SC_TRACE_SYS_MAX* {.importc: "_SC_TRACE_SYS_MAX", header: "<unistd.h>".}: cint$/;"	t
SC_TRACE_USER_EVENT_MAX	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_TRACE_USER_EVENT_MAX* = cint(245)$/;"	t
SC_TRACE_USER_EVENT_MAX	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_TRACE_USER_EVENT_MAX* = cint(90)$/;"	t
SC_TRACE_USER_EVENT_MAX	$NIMLIB/posix/posix_other_consts.nim	/^var SC_TRACE_USER_EVENT_MAX* {.importc: "_SC_TRACE_USER_EVENT_MAX", header: "<unistd.h>".}: cint$/;"	t
SC_TTY_NAME_MAX	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_TTY_NAME_MAX* = cint(72)$/;"	t
SC_TTY_NAME_MAX	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_TTY_NAME_MAX* = cint(41)$/;"	t
SC_TTY_NAME_MAX	$NIMLIB/posix/posix_other_consts.nim	/^var SC_TTY_NAME_MAX* {.importc: "_SC_TTY_NAME_MAX", header: "<unistd.h>".}: cint$/;"	t
SC_TYPED_MEMORY_OBJECTS	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_TYPED_MEMORY_OBJECTS* = cint(165)$/;"	t
SC_TYPED_MEMORY_OBJECTS	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_TYPED_MEMORY_OBJECTS* = cint(91)$/;"	t
SC_TYPED_MEMORY_OBJECTS	$NIMLIB/posix/posix_other_consts.nim	/^var SC_TYPED_MEMORY_OBJECTS* {.importc: "_SC_TYPED_MEMORY_OBJECTS", header: "<unistd.h>".}: cint$/;"	t
SC_TZNAME_MAX	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_TZNAME_MAX* = cint(6)$/;"	t
SC_TZNAME_MAX	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_TZNAME_MAX* = cint(20)$/;"	t
SC_TZNAME_MAX	$NIMLIB/posix/posix_other_consts.nim	/^var SC_TZNAME_MAX* {.importc: "_SC_TZNAME_MAX", header: "<unistd.h>".}: cint$/;"	t
SC_V6_ILP32_OFF32	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_V6_ILP32_OFF32* = cint(176)$/;"	t
SC_V6_ILP32_OFF32	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_V6_ILP32_OFF32* = cint(92)$/;"	t
SC_V6_ILP32_OFF32	$NIMLIB/posix/posix_other_consts.nim	/^var SC_V6_ILP32_OFF32* {.importc: "_SC_V6_ILP32_OFF32", header: "<unistd.h>".}: cint$/;"	t
SC_V6_ILP32_OFFBIG	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_V6_ILP32_OFFBIG* = cint(177)$/;"	t
SC_V6_ILP32_OFFBIG	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_V6_ILP32_OFFBIG* = cint(93)$/;"	t
SC_V6_ILP32_OFFBIG	$NIMLIB/posix/posix_other_consts.nim	/^var SC_V6_ILP32_OFFBIG* {.importc: "_SC_V6_ILP32_OFFBIG", header: "<unistd.h>".}: cint$/;"	t
SC_V6_LP64_OFF64	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_V6_LP64_OFF64* = cint(178)$/;"	t
SC_V6_LP64_OFF64	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_V6_LP64_OFF64* = cint(94)$/;"	t
SC_V6_LP64_OFF64	$NIMLIB/posix/posix_other_consts.nim	/^var SC_V6_LP64_OFF64* {.importc: "_SC_V6_LP64_OFF64", header: "<unistd.h>".}: cint$/;"	t
SC_V6_LPBIG_OFFBIG	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_V6_LPBIG_OFFBIG* = cint(179)$/;"	t
SC_V6_LPBIG_OFFBIG	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_V6_LPBIG_OFFBIG* = cint(95)$/;"	t
SC_V6_LPBIG_OFFBIG	$NIMLIB/posix/posix_other_consts.nim	/^var SC_V6_LPBIG_OFFBIG* {.importc: "_SC_V6_LPBIG_OFFBIG", header: "<unistd.h>".}: cint$/;"	t
SC_VERSION	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_VERSION* = cint(29)$/;"	t
SC_VERSION	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_VERSION* = cint(7)$/;"	t
SC_VERSION	$NIMLIB/posix/posix_other_consts.nim	/^var SC_VERSION* {.importc: "_SC_VERSION", header: "<unistd.h>".}: cint$/;"	t
SC_XBS5_ILP32_OFF32	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_XBS5_ILP32_OFF32* = cint(125)$/;"	t
SC_XBS5_ILP32_OFF32	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_XBS5_ILP32_OFF32* = cint(92)$/;"	t
SC_XBS5_ILP32_OFF32	$NIMLIB/posix/posix_other_consts.nim	/^var SC_XBS5_ILP32_OFF32* {.importc: "_SC_XBS5_ILP32_OFF32", header: "<unistd.h>".}: cint$/;"	t
SC_XBS5_ILP32_OFFBIG	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_XBS5_ILP32_OFFBIG* = cint(126)$/;"	t
SC_XBS5_ILP32_OFFBIG	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_XBS5_ILP32_OFFBIG* = cint(93)$/;"	t
SC_XBS5_ILP32_OFFBIG	$NIMLIB/posix/posix_other_consts.nim	/^var SC_XBS5_ILP32_OFFBIG* {.importc: "_SC_XBS5_ILP32_OFFBIG", header: "<unistd.h>".}: cint$/;"	t
SC_XBS5_LP64_OFF64	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_XBS5_LP64_OFF64* = cint(127)$/;"	t
SC_XBS5_LP64_OFF64	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_XBS5_LP64_OFF64* = cint(94)$/;"	t
SC_XBS5_LP64_OFF64	$NIMLIB/posix/posix_other_consts.nim	/^var SC_XBS5_LP64_OFF64* {.importc: "_SC_XBS5_LP64_OFF64", header: "<unistd.h>".}: cint$/;"	t
SC_XBS5_LPBIG_OFFBIG	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_XBS5_LPBIG_OFFBIG* = cint(128)$/;"	t
SC_XBS5_LPBIG_OFFBIG	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_XBS5_LPBIG_OFFBIG* = cint(95)$/;"	t
SC_XBS5_LPBIG_OFFBIG	$NIMLIB/posix/posix_other_consts.nim	/^var SC_XBS5_LPBIG_OFFBIG* {.importc: "_SC_XBS5_LPBIG_OFFBIG", header: "<unistd.h>".}: cint$/;"	t
SC_XOPEN_CRYPT	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_XOPEN_CRYPT* = cint(92)$/;"	t
SC_XOPEN_CRYPT	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_XOPEN_CRYPT* = cint(96)$/;"	t
SC_XOPEN_CRYPT	$NIMLIB/posix/posix_other_consts.nim	/^var SC_XOPEN_CRYPT* {.importc: "_SC_XOPEN_CRYPT", header: "<unistd.h>".}: cint$/;"	t
SC_XOPEN_ENH_I18N	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_XOPEN_ENH_I18N* = cint(93)$/;"	t
SC_XOPEN_ENH_I18N	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_XOPEN_ENH_I18N* = cint(97)$/;"	t
SC_XOPEN_ENH_I18N	$NIMLIB/posix/posix_other_consts.nim	/^var SC_XOPEN_ENH_I18N* {.importc: "_SC_XOPEN_ENH_I18N", header: "<unistd.h>".}: cint$/;"	t
SC_XOPEN_LEGACY	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_XOPEN_LEGACY* = cint(129)$/;"	t
SC_XOPEN_LEGACY	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_XOPEN_LEGACY* = cint(98)$/;"	t
SC_XOPEN_LEGACY	$NIMLIB/posix/posix_other_consts.nim	/^var SC_XOPEN_LEGACY* {.importc: "_SC_XOPEN_LEGACY", header: "<unistd.h>".}: cint$/;"	t
SC_XOPEN_REALTIME	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_XOPEN_REALTIME* = cint(130)$/;"	t
SC_XOPEN_REALTIME	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_XOPEN_REALTIME* = cint(99)$/;"	t
SC_XOPEN_REALTIME	$NIMLIB/posix/posix_other_consts.nim	/^var SC_XOPEN_REALTIME* {.importc: "_SC_XOPEN_REALTIME", header: "<unistd.h>".}: cint$/;"	t
SC_XOPEN_REALTIME_THREADS	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_XOPEN_REALTIME_THREADS* = cint(131)$/;"	t
SC_XOPEN_REALTIME_THREADS	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_XOPEN_REALTIME_THREADS* = cint(102)$/;"	t
SC_XOPEN_REALTIME_THREADS	$NIMLIB/posix/posix_other_consts.nim	/^var SC_XOPEN_REALTIME_THREADS* {.importc: "_SC_XOPEN_REALTIME_THREADS", header: "<unistd.h>".}: /;"	t
SC_XOPEN_SHM	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_XOPEN_SHM* = cint(94)$/;"	t
SC_XOPEN_SHM	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_XOPEN_SHM* = cint(103)$/;"	t
SC_XOPEN_SHM	$NIMLIB/posix/posix_other_consts.nim	/^var SC_XOPEN_SHM* {.importc: "_SC_XOPEN_SHM", header: "<unistd.h>".}: cint$/;"	t
SC_XOPEN_STREAMS	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_XOPEN_STREAMS* = cint(246)$/;"	t
SC_XOPEN_STREAMS	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_XOPEN_STREAMS* = cint(104)$/;"	t
SC_XOPEN_STREAMS	$NIMLIB/posix/posix_other_consts.nim	/^var SC_XOPEN_STREAMS* {.importc: "_SC_XOPEN_STREAMS", header: "<unistd.h>".}: cint$/;"	t
SC_XOPEN_UNIX	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_XOPEN_UNIX* = cint(91)$/;"	t
SC_XOPEN_UNIX	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_XOPEN_UNIX* = cint(105)$/;"	t
SC_XOPEN_UNIX	$NIMLIB/posix/posix_other_consts.nim	/^var SC_XOPEN_UNIX* {.importc: "_SC_XOPEN_UNIX", header: "<unistd.h>".}: cint$/;"	t
SC_XOPEN_VERSION	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SC_XOPEN_VERSION* = cint(89)$/;"	t
SC_XOPEN_VERSION	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SC_XOPEN_VERSION* = cint(106)$/;"	t
SC_XOPEN_VERSION	$NIMLIB/posix/posix_other_consts.nim	/^var SC_XOPEN_VERSION* {.importc: "_SC_XOPEN_VERSION", header: "<unistd.h>".}: cint$/;"	t
SECURITY_ATTRIBUTES	$NIMLIB/windows/winlean.nim	/^  SECURITY_ATTRIBUTES* = object$/;"	t
SECURITY_BUILTIN_DOMAIN_RID	$NIMLIB/windows/winlean.nim	/^  SECURITY_BUILTIN_DOMAIN_RID* = 32$/;"	t
SECURITY_NT_AUTHORITY	$NIMLIB/windows/winlean.nim	/^  SECURITY_NT_AUTHORITY* = [BYTE(0), BYTE(0), BYTE(0), BYTE(0), BYTE(0), BYTE(5)]$/;"	t
SEEK_CUR	$NIMLIB/posix/posix_freertos_consts.nim	/^const SEEK_CUR* = cint(1)$/;"	t
SEEK_CUR	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SEEK_CUR* = cint(1)$/;"	t
SEEK_CUR	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SEEK_CUR* = cint(1)$/;"	t
SEEK_CUR	$NIMLIB/posix/posix_other_consts.nim	/^var SEEK_CUR* {.importc: "SEEK_CUR", header: "<unistd.h>".}: cint$/;"	t
SEEK_END	$NIMLIB/posix/posix_freertos_consts.nim	/^const SEEK_END* = cint(2)$/;"	t
SEEK_END	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SEEK_END* = cint(2)$/;"	t
SEEK_END	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SEEK_END* = cint(2)$/;"	t
SEEK_END	$NIMLIB/posix/posix_other_consts.nim	/^var SEEK_END* {.importc: "SEEK_END", header: "<unistd.h>".}: cint$/;"	t
SEEK_SET	$NIMLIB/posix/posix_freertos_consts.nim	/^const SEEK_SET* = cint(0)$/;"	t
SEEK_SET	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SEEK_SET* = cint(0)$/;"	t
SEEK_SET	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SEEK_SET* = cint(0)$/;"	t
SEEK_SET	$NIMLIB/posix/posix_other_consts.nim	/^var SEEK_SET* {.importc: "SEEK_SET", header: "<unistd.h>".}: cint$/;"	t
SEM_FAILED	$NIMLIB/posix/posix_freertos_consts.nim	/^var SEM_FAILED* {.importc: "SEM_FAILED", header: "<semaphore.h>".}: pointer$/;"	t
SEM_FAILED	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SEM_FAILED* = cast[pointer]((nil))$/;"	t
SEM_FAILED	$NIMLIB/posix/posix_other_consts.nim	/^var SEM_FAILED* {.importc: "SEM_FAILED", header: "<semaphore.h>".}: pointer$/;"	t
SHUT_RD	$NIMLIB/posix/posix_freertos_consts.nim	/^var SHUT_RD* {.importc: "SHUT_RD", header: "<sys\/socket.h>".}: cint$/;"	t
SHUT_RD	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SHUT_RD* = cint(0)$/;"	t
SHUT_RD	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SHUT_RD* = cint(0)$/;"	t
SHUT_RD	$NIMLIB/posix/posix_other_consts.nim	/^var SHUT_RD* {.importc: "SHUT_RD", header: "<sys\/socket.h>".}: cint$/;"	t
SHUT_RDWR	$NIMLIB/posix/posix_freertos_consts.nim	/^var SHUT_RDWR* {.importc: "SHUT_RDWR", header: "<sys\/socket.h>".}: cint$/;"	t
SHUT_RDWR	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SHUT_RDWR* = cint(2)$/;"	t
SHUT_RDWR	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SHUT_RDWR* = cint(2)$/;"	t
SHUT_RDWR	$NIMLIB/posix/posix_other_consts.nim	/^var SHUT_RDWR* {.importc: "SHUT_RDWR", header: "<sys\/socket.h>".}: cint$/;"	t
SHUT_WR	$NIMLIB/posix/posix_freertos_consts.nim	/^var SHUT_WR* {.importc: "SHUT_WR", header: "<sys\/socket.h>".}: cint$/;"	t
SHUT_WR	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SHUT_WR* = cint(1)$/;"	t
SHUT_WR	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SHUT_WR* = cint(1)$/;"	t
SHUT_WR	$NIMLIB/posix/posix_other_consts.nim	/^var SHUT_WR* {.importc: "SHUT_WR", header: "<sys\/socket.h>".}: cint$/;"	t
SID	$NIMLIB/windows/winlean.nim	/^  SID* {.importc, header: "<windows.h>".} = object$/;"	t
SID_IDENTIFIER_AUTHORITY	$NIMLIB/windows/winlean.nim	/^  SID_IDENTIFIER_AUTHORITY* {.importc, header: "<windows.h>".} = object$/;"	t
SIGABRT	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SIGABRT* = cint(6)$/;"	t
SIGABRT	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SIGABRT* = cint(6)$/;"	t
SIGABRT	$NIMLIB/posix/posix_other_consts.nim	/^var SIGABRT* {.importc: "SIGABRT", header: "<signal.h>".}: cint$/;"	t
SIGABRT	$NIMLIB/system/ansi_c.nim	/^    SIGABRT* = cint(6)$/;"	t
SIGALRM	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SIGALRM* = cint(14)$/;"	t
SIGALRM	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SIGALRM* = cint(14)$/;"	t
SIGALRM	$NIMLIB/posix/posix_other_consts.nim	/^var SIGALRM* {.importc: "SIGALRM", header: "<signal.h>".}: cint$/;"	t
SIGBUS	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SIGBUS* = cint(7)$/;"	t
SIGBUS	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SIGBUS* = cint(10)$/;"	t
SIGBUS	$NIMLIB/posix/posix_other_consts.nim	/^var SIGBUS* {.importc: "SIGBUS", header: "<signal.h>".}: cint$/;"	t
SIGBUS	$NIMLIB/system/ansi_c.nim	/^  const SIGBUS* = cint(30)$/;"	t
SIGCHLD	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SIGCHLD* = cint(17)$/;"	t
SIGCHLD	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SIGCHLD* = cint(20)$/;"	t
SIGCHLD	$NIMLIB/posix/posix_other_consts.nim	/^var SIGCHLD* {.importc: "SIGCHLD", header: "<signal.h>".}: cint$/;"	t
SIGCONT	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SIGCONT* = cint(18)$/;"	t
SIGCONT	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SIGCONT* = cint(19)$/;"	t
SIGCONT	$NIMLIB/posix/posix_other_consts.nim	/^var SIGCONT* {.importc: "SIGCONT", header: "<signal.h>".}: cint$/;"	t
SIGEV_NONE	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SIGEV_NONE* = cint(1)$/;"	t
SIGEV_NONE	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SIGEV_NONE* = cint(1)$/;"	t
SIGEV_NONE	$NIMLIB/posix/posix_other_consts.nim	/^var SIGEV_NONE* {.importc: "SIGEV_NONE", header: "<signal.h>".}: cint$/;"	t
SIGEV_SIGNAL	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SIGEV_SIGNAL* = cint(0)$/;"	t
SIGEV_SIGNAL	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SIGEV_SIGNAL* = cint(2)$/;"	t
SIGEV_SIGNAL	$NIMLIB/posix/posix_other_consts.nim	/^var SIGEV_SIGNAL* {.importc: "SIGEV_SIGNAL", header: "<signal.h>".}: cint$/;"	t
SIGEV_THREAD	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SIGEV_THREAD* = cint(2)$/;"	t
SIGEV_THREAD	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SIGEV_THREAD* = cint(3)$/;"	t
SIGEV_THREAD	$NIMLIB/posix/posix_other_consts.nim	/^var SIGEV_THREAD* {.importc: "SIGEV_THREAD", header: "<signal.h>".}: cint$/;"	t
SIGFPE	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SIGFPE* = cint(8)$/;"	t
SIGFPE	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SIGFPE* = cint(8)$/;"	t
SIGFPE	$NIMLIB/posix/posix_other_consts.nim	/^var SIGFPE* {.importc: "SIGFPE", header: "<signal.h>".}: cint$/;"	t
SIGFPE	$NIMLIB/system/ansi_c.nim	/^    SIGFPE* = cint(8)$/;"	t
SIGHUP	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SIGHUP* = cint(1)$/;"	t
SIGHUP	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SIGHUP* = cint(1)$/;"	t
SIGHUP	$NIMLIB/posix/posix_other_consts.nim	/^var SIGHUP* {.importc: "SIGHUP", header: "<signal.h>".}: cint$/;"	t
SIGILL	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SIGILL* = cint(4)$/;"	t
SIGILL	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SIGILL* = cint(4)$/;"	t
SIGILL	$NIMLIB/posix/posix_other_consts.nim	/^var SIGILL* {.importc: "SIGILL", header: "<signal.h>".}: cint$/;"	t
SIGILL	$NIMLIB/system/ansi_c.nim	/^    SIGILL* = cint(4)$/;"	t
SIGINT	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SIGINT* = cint(2)$/;"	t
SIGINT	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SIGINT* = cint(2)$/;"	t
SIGINT	$NIMLIB/posix/posix_other_consts.nim	/^var SIGINT* {.importc: "SIGINT", header: "<signal.h>".}: cint$/;"	t
SIGINT	$NIMLIB/system/ansi_c.nim	/^    SIGINT* = cint(2)$/;"	t
SIGKILL	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SIGKILL* = cint(9)$/;"	t
SIGKILL	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SIGKILL* = cint(9)$/;"	t
SIGKILL	$NIMLIB/posix/posix_other_consts.nim	/^var SIGKILL* {.importc: "SIGKILL", header: "<signal.h>".}: cint$/;"	t
SIGKILLTHR	$NIMLIB/posix/posix_haiku.nim	/^    SIGKILLTHR* = 21 ## BeOS specific: Kill just the thread, not team$/;"	t
SIGKILLTHR	$NIMLIB/posix/posix_macos_amd64.nim	/^    SIGKILLTHR* = 21 ## BeOS specific: Kill just the thread, not team$/;"	t
SIGKILLTHR	$NIMLIB/posix/posix_other.nim	/^    SIGKILLTHR* = 21 ## BeOS specific: Kill just the thread, not team$/;"	t
SIGPIPE	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SIGPIPE* = cint(13)$/;"	t
SIGPIPE	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SIGPIPE* = cint(13)$/;"	t
SIGPIPE	$NIMLIB/posix/posix_other_consts.nim	/^var SIGPIPE* {.importc: "SIGPIPE", header: "<signal.h>".}: cint$/;"	t
SIGPIPE	$NIMLIB/system/ansi_c.nim	/^    SIGPIPE* = cint(7)$/;"	t
SIGPOLL	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SIGPOLL* = cint(29)$/;"	t
SIGPOLL	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SIGPOLL* = cint(23)$/;"	t
SIGPOLL	$NIMLIB/posix/posix_other_consts.nim	/^var SIGPOLL* {.importc: "SIGPOLL", header: "<signal.h>".}: cint$/;"	t
SIGPROF	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SIGPROF* = cint(27)$/;"	t
SIGPROF	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SIGPROF* = cint(27)$/;"	t
SIGPROF	$NIMLIB/posix/posix_other_consts.nim	/^var SIGPROF* {.importc: "SIGPROF", header: "<signal.h>".}: cint$/;"	t
SIGQUIT	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SIGQUIT* = cint(3)$/;"	t
SIGQUIT	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SIGQUIT* = cint(3)$/;"	t
SIGQUIT	$NIMLIB/posix/posix_other_consts.nim	/^var SIGQUIT* {.importc: "SIGQUIT", header: "<signal.h>".}: cint$/;"	t
SIGSEGV	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SIGSEGV* = cint(11)$/;"	t
SIGSEGV	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SIGSEGV* = cint(11)$/;"	t
SIGSEGV	$NIMLIB/posix/posix_other_consts.nim	/^var SIGSEGV* {.importc: "SIGSEGV", header: "<signal.h>".}: cint$/;"	t
SIGSEGV	$NIMLIB/system/ansi_c.nim	/^    SIGSEGV* = cint(11)$/;"	t
SIGSTKSZ	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SIGSTKSZ* = cint(8192)$/;"	t
SIGSTKSZ	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SIGSTKSZ* = cint(8192)$/;"	t
SIGSTKSZ	$NIMLIB/posix/posix_other_consts.nim	/^var SIGSTKSZ* {.importc: "SIGSTKSZ", header: "<signal.h>".}: cint$/;"	t
SIGSTOP	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SIGSTOP* = cint(19)$/;"	t
SIGSTOP	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SIGSTOP* = cint(17)$/;"	t
SIGSTOP	$NIMLIB/posix/posix_other_consts.nim	/^var SIGSTOP* {.importc: "SIGSTOP", header: "<signal.h>".}: cint$/;"	t
SIGSYS	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SIGSYS* = cint(31)$/;"	t
SIGSYS	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SIGSYS* = cint(12)$/;"	t
SIGSYS	$NIMLIB/posix/posix_other_consts.nim	/^var SIGSYS* {.importc: "SIGSYS", header: "<signal.h>".}: cint$/;"	t
SIGTERM	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SIGTERM* = cint(15)$/;"	t
SIGTERM	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SIGTERM* = cint(15)$/;"	t
SIGTERM	$NIMLIB/posix/posix_other_consts.nim	/^var SIGTERM* {.importc: "SIGTERM", header: "<signal.h>".}: cint$/;"	t
SIGTERM	$NIMLIB/system/ansi_c.nim	/^    SIGTERM* = cint(15)$/;"	t
SIGTRAP	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SIGTRAP* = cint(5)$/;"	t
SIGTRAP	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SIGTRAP* = cint(5)$/;"	t
SIGTRAP	$NIMLIB/posix/posix_other_consts.nim	/^var SIGTRAP* {.importc: "SIGTRAP", header: "<signal.h>".}: cint$/;"	t
SIGTSTP	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SIGTSTP* = cint(20)$/;"	t
SIGTSTP	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SIGTSTP* = cint(18)$/;"	t
SIGTSTP	$NIMLIB/posix/posix_other_consts.nim	/^var SIGTSTP* {.importc: "SIGTSTP", header: "<signal.h>".}: cint$/;"	t
SIGTTIN	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SIGTTIN* = cint(21)$/;"	t
SIGTTIN	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SIGTTIN* = cint(21)$/;"	t
SIGTTIN	$NIMLIB/posix/posix_other_consts.nim	/^var SIGTTIN* {.importc: "SIGTTIN", header: "<signal.h>".}: cint$/;"	t
SIGTTOU	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SIGTTOU* = cint(22)$/;"	t
SIGTTOU	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SIGTTOU* = cint(22)$/;"	t
SIGTTOU	$NIMLIB/posix/posix_other_consts.nim	/^var SIGTTOU* {.importc: "SIGTTOU", header: "<signal.h>".}: cint$/;"	t
SIGURG	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SIGURG* = cint(23)$/;"	t
SIGURG	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SIGURG* = cint(16)$/;"	t
SIGURG	$NIMLIB/posix/posix_other_consts.nim	/^var SIGURG* {.importc: "SIGURG", header: "<signal.h>".}: cint$/;"	t
SIGUSR1	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SIGUSR1* = cint(10)$/;"	t
SIGUSR1	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SIGUSR1* = cint(30)$/;"	t
SIGUSR1	$NIMLIB/posix/posix_other_consts.nim	/^var SIGUSR1* {.importc: "SIGUSR1", header: "<signal.h>".}: cint$/;"	t
SIGUSR2	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SIGUSR2* = cint(12)$/;"	t
SIGUSR2	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SIGUSR2* = cint(31)$/;"	t
SIGUSR2	$NIMLIB/posix/posix_other_consts.nim	/^var SIGUSR2* {.importc: "SIGUSR2", header: "<signal.h>".}: cint$/;"	t
SIGVTALRM	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SIGVTALRM* = cint(26)$/;"	t
SIGVTALRM	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SIGVTALRM* = cint(26)$/;"	t
SIGVTALRM	$NIMLIB/posix/posix_other_consts.nim	/^var SIGVTALRM* {.importc: "SIGVTALRM", header: "<signal.h>".}: cint$/;"	t
SIGXCPU	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SIGXCPU* = cint(24)$/;"	t
SIGXCPU	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SIGXCPU* = cint(24)$/;"	t
SIGXCPU	$NIMLIB/posix/posix_other_consts.nim	/^var SIGXCPU* {.importc: "SIGXCPU", header: "<signal.h>".}: cint$/;"	t
SIGXFSZ	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SIGXFSZ* = cint(25)$/;"	t
SIGXFSZ	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SIGXFSZ* = cint(25)$/;"	t
SIGXFSZ	$NIMLIB/posix/posix_other_consts.nim	/^var SIGXFSZ* {.importc: "SIGXFSZ", header: "<signal.h>".}: cint$/;"	t
SIG_BLOCK	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SIG_BLOCK* = cint(0)$/;"	t
SIG_BLOCK	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SIG_BLOCK* = cint(1)$/;"	t
SIG_BLOCK	$NIMLIB/posix/posix_other_consts.nim	/^var SIG_BLOCK* {.importc: "SIG_BLOCK", header: "<signal.h>".}: cint$/;"	t
SIG_DFL	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SIG_DFL* = cast[Sighandler](0)$/;"	t
SIG_DFL	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SIG_DFL* = cast[Sighandler](0)$/;"	t
SIG_DFL	$NIMLIB/posix/posix_other_consts.nim	/^var SIG_DFL* {.importc: "SIG_DFL", header: "<signal.h>".}: Sighandler$/;"	t
SIG_DFL	$NIMLIB/system/ansi_c.nim	/^    SIG_DFL* = cast[CSighandlerT](0)$/;"	t
SIG_ERR	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SIG_ERR* = cast[Sighandler](-1)$/;"	t
SIG_ERR	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SIG_ERR* = cast[Sighandler](-1)$/;"	t
SIG_ERR	$NIMLIB/posix/posix_other_consts.nim	/^var SIG_ERR* {.importc: "SIG_ERR", header: "<signal.h>".}: Sighandler$/;"	t
SIG_HOLD	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SIG_HOLD* = cast[Sighandler](2)$/;"	t
SIG_HOLD	$NIMLIB/posix/posix_nintendoswitch.nim	/^const SIG_HOLD* = cast[Sighandler](2)$/;"	t
SIG_HOLD	$NIMLIB/posix/posix_other_consts.nim	/^var SIG_HOLD* {.importc: "SIG_HOLD", header: "<signal.h>".}: Sighandler$/;"	t
SIG_IGN	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SIG_IGN* = cast[Sighandler](1)$/;"	t
SIG_IGN	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SIG_IGN* = cast[Sighandler](1)$/;"	t
SIG_IGN	$NIMLIB/posix/posix_other_consts.nim	/^var SIG_IGN* {.importc: "SIG_IGN", header: "<signal.h>".}: Sighandler$/;"	t
SIG_SETMASK	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SIG_SETMASK* = cint(2)$/;"	t
SIG_SETMASK	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SIG_SETMASK* = cint(0)$/;"	t
SIG_SETMASK	$NIMLIB/posix/posix_other_consts.nim	/^var SIG_SETMASK* {.importc: "SIG_SETMASK", header: "<signal.h>".}: cint$/;"	t
SIG_UNBLOCK	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SIG_UNBLOCK* = cint(1)$/;"	t
SIG_UNBLOCK	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SIG_UNBLOCK* = cint(2)$/;"	t
SIG_UNBLOCK	$NIMLIB/posix/posix_other_consts.nim	/^var SIG_UNBLOCK* {.importc: "SIG_UNBLOCK", header: "<signal.h>".}: cint$/;"	t
SIO_GET_EXTENSION_FUNCTION_POINTER	$NIMLIB/windows/winlean.nim	/^  SIO_GET_EXTENSION_FUNCTION_POINTER* = WSAIORW(IOC_WS2,6).DWORD$/;"	t
SOBool	$NIMLIB/pure/net.nim	/^  SOBool* = enum ## Boolean socket options.$/;"	t
SOCK_CLOEXEC	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SOCK_CLOEXEC* = cint(524288)$/;"	t
SOCK_CLOEXEC	$NIMLIB/posix/posix_macos_amd64.nim	/^  var SOCK_CLOEXEC* {.importc, header: "<sys\/socket.h>".}: cint$/;"	t
SOCK_CLOEXEC	$NIMLIB/posix/posix_openbsd_amd64.nim	/^var SOCK_CLOEXEC* {.importc, header: "<sys\/socket.h>".}: cint$/;"	t
SOCK_CLOEXEC	$NIMLIB/posix/posix_other.nim	/^  var SOCK_CLOEXEC* {.importc, header: "<sys\/socket.h>".}: cint$/;"	t
SOCK_DGRAM	$NIMLIB/posix/posix_freertos_consts.nim	/^var SOCK_DGRAM* {.importc: "SOCK_DGRAM", header: "<sys\/socket.h>".}: cint$/;"	t
SOCK_DGRAM	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SOCK_DGRAM* = cint(2)$/;"	t
SOCK_DGRAM	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SOCK_DGRAM* = cint(2)$/;"	t
SOCK_DGRAM	$NIMLIB/posix/posix_other_consts.nim	/^var SOCK_DGRAM* {.importc: "SOCK_DGRAM", header: "<sys\/socket.h>".}: cint$/;"	t
SOCK_RAW	$NIMLIB/posix/posix_freertos_consts.nim	/^var SOCK_RAW* {.importc: "SOCK_RAW", header: "<sys\/socket.h>".}: cint$/;"	t
SOCK_RAW	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SOCK_RAW* = cint(3)$/;"	t
SOCK_RAW	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SOCK_RAW* = cint(3)$/;"	t
SOCK_RAW	$NIMLIB/posix/posix_other_consts.nim	/^var SOCK_RAW* {.importc: "SOCK_RAW", header: "<sys\/socket.h>".}: cint$/;"	t
SOCK_SEQPACKET	$NIMLIB/posix/posix_freertos_consts.nim	/^const SOCK_SEQPACKET* = cint(5)$/;"	t
SOCK_SEQPACKET	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SOCK_SEQPACKET* = cint(5)$/;"	t
SOCK_SEQPACKET	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SOCK_SEQPACKET* = cint(5)$/;"	t
SOCK_SEQPACKET	$NIMLIB/posix/posix_other_consts.nim	/^  var SOCK_SEQPACKET* {.importc: "SOCK_SEQPACKET", header: "<sys\/socket.h>".}: cint$/;"	t
SOCK_STREAM	$NIMLIB/posix/posix_freertos_consts.nim	/^var SOCK_STREAM* {.importc: "SOCK_STREAM", header: "<sys\/socket.h>".}: cint$/;"	t
SOCK_STREAM	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SOCK_STREAM* = cint(1)$/;"	t
SOCK_STREAM	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SOCK_STREAM* = cint(1)$/;"	t
SOCK_STREAM	$NIMLIB/posix/posix_other_consts.nim	/^var SOCK_STREAM* {.importc: "SOCK_STREAM", header: "<sys\/socket.h>".}: cint$/;"	t
SOL_SOCKET	$NIMLIB/posix/posix_freertos_consts.nim	/^var SOL_SOCKET* {.importc: "SOL_SOCKET", header: "<sys\/socket.h>".}: cint$/;"	t
SOL_SOCKET	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SOL_SOCKET* = cint(1)$/;"	t
SOL_SOCKET	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SOL_SOCKET* = cint(65535)$/;"	t
SOL_SOCKET	$NIMLIB/posix/posix_other_consts.nim	/^var SOL_SOCKET* {.importc: "SOL_SOCKET", header: "<sys\/socket.h>".}: cint$/;"	t
SOL_SOCKET	$NIMLIB/windows/winlean.nim	/^  SOL_SOCKET* {.importc, header: "winsock2.h".}: cint$/;"	t
SOMAXCONN	$NIMLIB/posix/posix_freertos_consts.nim	/^var SOMAXCONN*: cint = SocketMaxConnections.cint$/;"	t
SOMAXCONN	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SOMAXCONN* = cint(4096)$/;"	t
SOMAXCONN	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SOMAXCONN* = cint(128)$/;"	t
SOMAXCONN	$NIMLIB/posix/posix_other_consts.nim	/^  var SOMAXCONN* {.importc: "SOMAXCONN", header: "<sys\/socket.h>".}: cint$/;"	t
SOMAXCONN	$NIMLIB/windows/winlean.nim	/^  SOMAXCONN* {.importc, header: "winsock2.h".}: cint$/;"	t
SO_ACCEPTCONN	$NIMLIB/posix/posix_freertos_consts.nim	/^var SO_ACCEPTCONN* {.importc: "SO_ACCEPTCONN", header: "<sys\/socket.h>".}: cint$/;"	t
SO_ACCEPTCONN	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SO_ACCEPTCONN* = cint(30)$/;"	t
SO_ACCEPTCONN	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SO_ACCEPTCONN* = cint(2)$/;"	t
SO_ACCEPTCONN	$NIMLIB/posix/posix_other_consts.nim	/^var SO_ACCEPTCONN* {.importc: "SO_ACCEPTCONN", header: "<sys\/socket.h>".}: cint$/;"	t
SO_ACCEPTCONN	$NIMLIB/windows/winlean.nim	/^  SO_ACCEPTCONN* {.importc, header: "winsock2.h".}: cint # socket has had listen()$/;"	t
SO_BROADCAST	$NIMLIB/posix/posix_freertos_consts.nim	/^var SO_BROADCAST* {.importc: "SO_BROADCAST", header: "<sys\/socket.h>".}: cint$/;"	t
SO_BROADCAST	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SO_BROADCAST* = cint(6)$/;"	t
SO_BROADCAST	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SO_BROADCAST* = cint(32)$/;"	t
SO_BROADCAST	$NIMLIB/posix/posix_other_consts.nim	/^var SO_BROADCAST* {.importc: "SO_BROADCAST", header: "<sys\/socket.h>".}: cint$/;"	t
SO_BROADCAST	$NIMLIB/windows/winlean.nim	/^  SO_BROADCAST* {.importc, header: "winsock2.h".}: cint # permit sending of broadcast msgs$/;"	t
SO_DEBUG	$NIMLIB/posix/posix_freertos_consts.nim	/^var SO_DEBUG* {.importc: "SO_DEBUG", header: "<sys\/socket.h>".}: cint$/;"	t
SO_DEBUG	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SO_DEBUG* = cint(1)$/;"	t
SO_DEBUG	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SO_DEBUG* = cint(1)$/;"	t
SO_DEBUG	$NIMLIB/posix/posix_other_consts.nim	/^var SO_DEBUG* {.importc: "SO_DEBUG", header: "<sys\/socket.h>".}: cint$/;"	t
SO_DEBUG	$NIMLIB/windows/winlean.nim	/^  SO_DEBUG* {.importc, header: "winsock2.h".}: cint ## turn on debugging info recording$/;"	t
SO_DONTLINGER	$NIMLIB/windows/winlean.nim	/^  SO_DONTLINGER* {.importc, header: "winsock2.h".}: cint$/;"	t
SO_DONTROUTE	$NIMLIB/posix/posix_freertos_consts.nim	/^var SO_DONTROUTE* {.importc: "SO_DONTROUTE", header: "<sys\/socket.h>".}: cint$/;"	t
SO_DONTROUTE	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SO_DONTROUTE* = cint(5)$/;"	t
SO_DONTROUTE	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SO_DONTROUTE* = cint(16)$/;"	t
SO_DONTROUTE	$NIMLIB/posix/posix_other_consts.nim	/^var SO_DONTROUTE* {.importc: "SO_DONTROUTE", header: "<sys\/socket.h>".}: cint$/;"	t
SO_DONTROUTE	$NIMLIB/windows/winlean.nim	/^  SO_DONTROUTE* {.importc, header: "winsock2.h".}: cint # just use interface addresses$/;"	t
SO_ERROR	$NIMLIB/posix/posix_freertos_consts.nim	/^var SO_ERROR* {.importc: "SO_ERROR", header: "<sys\/socket.h>".}: cint$/;"	t
SO_ERROR	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SO_ERROR* = cint(4)$/;"	t
SO_ERROR	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SO_ERROR* = cint(4103)$/;"	t
SO_ERROR	$NIMLIB/posix/posix_other_consts.nim	/^var SO_ERROR* {.importc: "SO_ERROR", header: "<sys\/socket.h>".}: cint$/;"	t
SO_ERROR	$NIMLIB/windows/winlean.nim	/^  SO_ERROR* {.importc, header: "winsock2.h".}: cint$/;"	t
SO_EXCLUSIVEADDRUSE	$NIMLIB/windows/winlean.nim	/^  SO_EXCLUSIVEADDRUSE* {.importc, header: "winsock2.h".}: cint # disallow local address reuse$/;"	t
SO_KEEPALIVE	$NIMLIB/posix/posix_freertos_consts.nim	/^var SO_KEEPALIVE* {.importc: "SO_KEEPALIVE", header: "<sys\/socket.h>".}: cint$/;"	t
SO_KEEPALIVE	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SO_KEEPALIVE* = cint(9)$/;"	t
SO_KEEPALIVE	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SO_KEEPALIVE* = cint(8)$/;"	t
SO_KEEPALIVE	$NIMLIB/posix/posix_other_consts.nim	/^var SO_KEEPALIVE* {.importc: "SO_KEEPALIVE", header: "<sys\/socket.h>".}: cint$/;"	t
SO_KEEPALIVE	$NIMLIB/windows/winlean.nim	/^  SO_KEEPALIVE* {.importc, header: "winsock2.h".}: cint # keep connections alive$/;"	t
SO_LINGER	$NIMLIB/posix/posix_freertos_consts.nim	/^var SO_LINGER* {.importc: "SO_LINGER", header: "<sys\/socket.h>".}: cint$/;"	t
SO_LINGER	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SO_LINGER* = cint(13)$/;"	t
SO_LINGER	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SO_LINGER* = cint(128)$/;"	t
SO_LINGER	$NIMLIB/posix/posix_other_consts.nim	/^var SO_LINGER* {.importc: "SO_LINGER", header: "<sys\/socket.h>".}: cint$/;"	t
SO_LINGER	$NIMLIB/windows/winlean.nim	/^  SO_LINGER* {.importc, header: "winsock2.h".}: cint # linger on close if data present$/;"	t
SO_NOSIGPIPE	$NIMLIB/posix/posix_haiku.nim	/^    SO_NOSIGPIPE* {.importc, header: "<sys\/socket.h>".}: cint$/;"	t
SO_NOSIGPIPE	$NIMLIB/posix/posix_macos_amd64.nim	/^    SO_NOSIGPIPE* {.importc, header: "<sys\/socket.h>".}: cint$/;"	t
SO_NOSIGPIPE	$NIMLIB/posix/posix_other.nim	/^    SO_NOSIGPIPE* {.importc, header: "<sys\/socket.h>".}: cint$/;"	t
SO_OOBINLINE	$NIMLIB/posix/posix_freertos_consts.nim	/^var SO_OOBINLINE* {.importc: "SO_OOBINLINE", header: "<sys\/socket.h>".}: cint$/;"	t
SO_OOBINLINE	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SO_OOBINLINE* = cint(10)$/;"	t
SO_OOBINLINE	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SO_OOBINLINE* = cint(256)$/;"	t
SO_OOBINLINE	$NIMLIB/posix/posix_other_consts.nim	/^var SO_OOBINLINE* {.importc: "SO_OOBINLINE", header: "<sys\/socket.h>".}: cint$/;"	t
SO_OOBINLINE	$NIMLIB/windows/winlean.nim	/^  SO_OOBINLINE* {.importc, header: "winsock2.h".}: cint # leave received OOB data in line$/;"	t
SO_RCVBUF	$NIMLIB/posix/posix_freertos_consts.nim	/^var SO_RCVBUF* {.importc: "SO_RCVBUF", header: "<sys\/socket.h>".}: cint$/;"	t
SO_RCVBUF	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SO_RCVBUF* = cint(8)$/;"	t
SO_RCVBUF	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SO_RCVBUF* = cint(4098)$/;"	t
SO_RCVBUF	$NIMLIB/posix/posix_other_consts.nim	/^var SO_RCVBUF* {.importc: "SO_RCVBUF", header: "<sys\/socket.h>".}: cint$/;"	t
SO_RCVLOWAT	$NIMLIB/posix/posix_freertos_consts.nim	/^var SO_RCVLOWAT* {.importc: "SO_RCVLOWAT", header: "<sys\/socket.h>".}: cint$/;"	t
SO_RCVLOWAT	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SO_RCVLOWAT* = cint(18)$/;"	t
SO_RCVLOWAT	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SO_RCVLOWAT* = cint(4100)$/;"	t
SO_RCVLOWAT	$NIMLIB/posix/posix_other_consts.nim	/^var SO_RCVLOWAT* {.importc: "SO_RCVLOWAT", header: "<sys\/socket.h>".}: cint$/;"	t
SO_RCVTIMEO	$NIMLIB/posix/posix_freertos_consts.nim	/^var SO_RCVTIMEO* {.importc: "SO_RCVTIMEO", header: "<sys\/socket.h>".}: cint$/;"	t
SO_RCVTIMEO	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SO_RCVTIMEO* = cint(20)$/;"	t
SO_RCVTIMEO	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SO_RCVTIMEO* = cint(4102)$/;"	t
SO_RCVTIMEO	$NIMLIB/posix/posix_other_consts.nim	/^var SO_RCVTIMEO* {.importc: "SO_RCVTIMEO", header: "<sys\/socket.h>".}: cint$/;"	t
SO_REUSEADDR	$NIMLIB/posix/posix_freertos_consts.nim	/^var SO_REUSEADDR* {.importc: "SO_REUSEADDR", header: "<sys\/socket.h>".}: cint$/;"	t
SO_REUSEADDR	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SO_REUSEADDR* = cint(2)$/;"	t
SO_REUSEADDR	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SO_REUSEADDR* = cint(4)$/;"	t
SO_REUSEADDR	$NIMLIB/posix/posix_other_consts.nim	/^var SO_REUSEADDR* {.importc: "SO_REUSEADDR", header: "<sys\/socket.h>".}: cint$/;"	t
SO_REUSEADDR	$NIMLIB/windows/winlean.nim	/^  SO_REUSEADDR* {.importc, header: "winsock2.h".}: cint # allow local address reuse$/;"	t
SO_REUSEPORT	$NIMLIB/posix/posix_haiku.nim	/^  var SO_REUSEPORT* {.importc, header: "<sys\/socket.h>".}: cint$/;"	t
SO_REUSEPORT	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SO_REUSEPORT* = cint(15)$/;"	t
SO_REUSEPORT	$NIMLIB/posix/posix_macos_amd64.nim	/^  var SO_REUSEPORT* {.importc, header: "<sys\/socket.h>".}: cint$/;"	t
SO_REUSEPORT	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SO_REUSEPORT* = cint(512)$/;"	t
SO_REUSEPORT	$NIMLIB/posix/posix_openbsd_amd64.nim	/^  var SO_REUSEPORT* {.importc, header: "<sys\/socket.h>".}: cint$/;"	t
SO_REUSEPORT	$NIMLIB/posix/posix_other.nim	/^  var SO_REUSEPORT* {.importc: "SO_REUSEADDR", header: "<sys\/socket.h>".}: cint$/;"	t
SO_REUSEPORT	$NIMLIB/windows/winlean.nim	/^  SO_REUSEPORT* {.importc: "SO_REUSEADDR", header: "winsock2.h".}: cint # allow port reuse. Sinc/;"	t
SO_SNDBUF	$NIMLIB/posix/posix_freertos_consts.nim	/^var SO_SNDBUF* {.importc: "SO_SNDBUF", header: "<sys\/socket.h>".}: cint$/;"	t
SO_SNDBUF	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SO_SNDBUF* = cint(7)$/;"	t
SO_SNDBUF	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SO_SNDBUF* = cint(4097)$/;"	t
SO_SNDBUF	$NIMLIB/posix/posix_other_consts.nim	/^var SO_SNDBUF* {.importc: "SO_SNDBUF", header: "<sys\/socket.h>".}: cint$/;"	t
SO_SNDLOWAT	$NIMLIB/posix/posix_freertos_consts.nim	/^var SO_SNDLOWAT* {.importc: "SO_SNDLOWAT", header: "<sys\/socket.h>".}: cint$/;"	t
SO_SNDLOWAT	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SO_SNDLOWAT* = cint(19)$/;"	t
SO_SNDLOWAT	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SO_SNDLOWAT* = cint(4099)$/;"	t
SO_SNDLOWAT	$NIMLIB/posix/posix_other_consts.nim	/^var SO_SNDLOWAT* {.importc: "SO_SNDLOWAT", header: "<sys\/socket.h>".}: cint$/;"	t
SO_SNDTIMEO	$NIMLIB/posix/posix_freertos_consts.nim	/^var SO_SNDTIMEO* {.importc: "SO_SNDTIMEO", header: "<sys\/socket.h>".}: cint$/;"	t
SO_SNDTIMEO	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SO_SNDTIMEO* = cint(21)$/;"	t
SO_SNDTIMEO	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SO_SNDTIMEO* = cint(4101)$/;"	t
SO_SNDTIMEO	$NIMLIB/posix/posix_other_consts.nim	/^var SO_SNDTIMEO* {.importc: "SO_SNDTIMEO", header: "<sys\/socket.h>".}: cint$/;"	t
SO_TYPE	$NIMLIB/posix/posix_freertos_consts.nim	/^var SO_TYPE* {.importc: "SO_TYPE", header: "<sys\/socket.h>".}: cint$/;"	t
SO_TYPE	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SO_TYPE* = cint(3)$/;"	t
SO_TYPE	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SO_TYPE* = cint(4104)$/;"	t
SO_TYPE	$NIMLIB/posix/posix_other_consts.nim	/^var SO_TYPE* {.importc: "SO_TYPE", header: "<sys\/socket.h>".}: cint$/;"	t
SO_UPDATE_ACCEPT_CONTEXT	$NIMLIB/windows/winlean.nim	/^  SO_UPDATE_ACCEPT_CONTEXT* = 0x700B$/;"	t
SO_USELOOPBACK	$NIMLIB/windows/winlean.nim	/^  SO_USELOOPBACK* {.importc, header: "winsock2.h".}: cint # bypass hardware when possible$/;"	t
SSLCTXSetMode	$NIMLIB/wrappers/openssl.nim	/^proc SSLCTXSetMode*(ctx: SslCtx, mode: int): int =$/;"	t
SSL_CTRL_CLEAR_NUM_RENEGOTIATIONS	$NIMLIB/wrappers/openssl.nim	/^  SSL_CTRL_CLEAR_NUM_RENEGOTIATIONS* = 11$/;"	t
SSL_CTRL_EXTRA_CHAIN_CERT	$NIMLIB/wrappers/openssl.nim	/^  SSL_CTRL_EXTRA_CHAIN_CERT* = 14$/;"	t
SSL_CTRL_GET_CLIENT_CERT_REQUEST	$NIMLIB/wrappers/openssl.nim	/^  SSL_CTRL_GET_CLIENT_CERT_REQUEST* = 9$/;"	t
SSL_CTRL_GET_FLAGS	$NIMLIB/wrappers/openssl.nim	/^  SSL_CTRL_GET_FLAGS* = 13$/;"	t
SSL_CTRL_GET_MAX_CERT_LIST	$NIMLIB/wrappers/openssl.nim	/^  SSL_CTRL_GET_MAX_CERT_LIST* = 50$/;"	t
SSL_CTRL_GET_NUM_RENEGOTIATIONS	$NIMLIB/wrappers/openssl.nim	/^  SSL_CTRL_GET_NUM_RENEGOTIATIONS* = 10$/;"	t
SSL_CTRL_GET_READ_AHEAD	$NIMLIB/wrappers/openssl.nim	/^  SSL_CTRL_GET_READ_AHEAD* = 40$/;"	t
SSL_CTRL_GET_SESSION_REUSED	$NIMLIB/wrappers/openssl.nim	/^  SSL_CTRL_GET_SESSION_REUSED* = 8$/;"	t
SSL_CTRL_GET_SESS_CACHE_MODE	$NIMLIB/wrappers/openssl.nim	/^  SSL_CTRL_GET_SESS_CACHE_MODE* = 45$/;"	t
SSL_CTRL_GET_SESS_CACHE_SIZE	$NIMLIB/wrappers/openssl.nim	/^  SSL_CTRL_GET_SESS_CACHE_SIZE* = 43$/;"	t
SSL_CTRL_GET_TOTAL_RENEGOTIATIONS	$NIMLIB/wrappers/openssl.nim	/^  SSL_CTRL_GET_TOTAL_RENEGOTIATIONS* = 12$/;"	t
SSL_CTRL_MODE	$NIMLIB/wrappers/openssl.nim	/^  SSL_CTRL_MODE* = 33$/;"	t
SSL_CTRL_NEED_TMP_RSA	$NIMLIB/wrappers/openssl.nim	/^  SSL_CTRL_NEED_TMP_RSA* = 1$/;"	t
SSL_CTRL_OPTIONS	$NIMLIB/wrappers/openssl.nim	/^  SSL_CTRL_OPTIONS* = 32$/;"	t
SSL_CTRL_SESS_ACCEPT	$NIMLIB/wrappers/openssl.nim	/^  SSL_CTRL_SESS_ACCEPT* = 24$/;"	t
SSL_CTRL_SESS_ACCEPT_GOOD	$NIMLIB/wrappers/openssl.nim	/^  SSL_CTRL_SESS_ACCEPT_GOOD* = 25$/;"	t
SSL_CTRL_SESS_ACCEPT_RENEGOTIATE	$NIMLIB/wrappers/openssl.nim	/^  SSL_CTRL_SESS_ACCEPT_RENEGOTIATE* = 26$/;"	t
SSL_CTRL_SESS_CACHE_FULL	$NIMLIB/wrappers/openssl.nim	/^  SSL_CTRL_SESS_CACHE_FULL* = 31$/;"	t
SSL_CTRL_SESS_CB_HIT	$NIMLIB/wrappers/openssl.nim	/^  SSL_CTRL_SESS_CB_HIT* = 28$/;"	t
SSL_CTRL_SESS_CONNECT	$NIMLIB/wrappers/openssl.nim	/^  SSL_CTRL_SESS_CONNECT* = 21$/;"	t
SSL_CTRL_SESS_CONNECT_GOOD	$NIMLIB/wrappers/openssl.nim	/^  SSL_CTRL_SESS_CONNECT_GOOD* = 22$/;"	t
SSL_CTRL_SESS_CONNECT_RENEGOTIATE	$NIMLIB/wrappers/openssl.nim	/^  SSL_CTRL_SESS_CONNECT_RENEGOTIATE* = 23$/;"	t
SSL_CTRL_SESS_HIT	$NIMLIB/wrappers/openssl.nim	/^  SSL_CTRL_SESS_HIT* = 27$/;"	t
SSL_CTRL_SESS_MISSES	$NIMLIB/wrappers/openssl.nim	/^  SSL_CTRL_SESS_MISSES* = 29$/;"	t
SSL_CTRL_SESS_NUMBER	$NIMLIB/wrappers/openssl.nim	/^  SSL_CTRL_SESS_NUMBER* = 20$/;"	t
SSL_CTRL_SESS_TIMEOUTS	$NIMLIB/wrappers/openssl.nim	/^  SSL_CTRL_SESS_TIMEOUTS* = 30$/;"	t
SSL_CTRL_SET_ECDH_AUTO	$NIMLIB/wrappers/openssl.nim	/^  SSL_CTRL_SET_ECDH_AUTO* = 94$/;"	t
SSL_CTRL_SET_MAX_CERT_LIST	$NIMLIB/wrappers/openssl.nim	/^  SSL_CTRL_SET_MAX_CERT_LIST* = 51 #* Allow SSL_write(..., n) to return r with 0 < r < n (i.e. r/;"	t
SSL_CTRL_SET_MSG_CALLBACK	$NIMLIB/wrappers/openssl.nim	/^  SSL_CTRL_SET_MSG_CALLBACK* = 15$/;"	t
SSL_CTRL_SET_MSG_CALLBACK_ARG	$NIMLIB/wrappers/openssl.nim	/^  SSL_CTRL_SET_MSG_CALLBACK_ARG* = 16 # only applies to datagram connections$/;"	t
SSL_CTRL_SET_MTU	$NIMLIB/wrappers/openssl.nim	/^  SSL_CTRL_SET_MTU* = 17      # Stats$/;"	t
SSL_CTRL_SET_READ_AHEAD	$NIMLIB/wrappers/openssl.nim	/^  SSL_CTRL_SET_READ_AHEAD* = 41$/;"	t
SSL_CTRL_SET_SESS_CACHE_MODE	$NIMLIB/wrappers/openssl.nim	/^  SSL_CTRL_SET_SESS_CACHE_MODE* = 44$/;"	t
SSL_CTRL_SET_SESS_CACHE_SIZE	$NIMLIB/wrappers/openssl.nim	/^  SSL_CTRL_SET_SESS_CACHE_SIZE* = 42$/;"	t
SSL_CTRL_SET_TMP_DH	$NIMLIB/wrappers/openssl.nim	/^  SSL_CTRL_SET_TMP_DH* = 3$/;"	t
SSL_CTRL_SET_TMP_DH_CB	$NIMLIB/wrappers/openssl.nim	/^  SSL_CTRL_SET_TMP_DH_CB* = 6$/;"	t
SSL_CTRL_SET_TMP_ECDH	$NIMLIB/wrappers/openssl.nim	/^  SSL_CTRL_SET_TMP_ECDH* = 4$/;"	t
SSL_CTRL_SET_TMP_ECDH_CB	$NIMLIB/wrappers/openssl.nim	/^  SSL_CTRL_SET_TMP_ECDH_CB* = 7$/;"	t
SSL_CTRL_SET_TMP_RSA	$NIMLIB/wrappers/openssl.nim	/^  SSL_CTRL_SET_TMP_RSA* = 2$/;"	t
SSL_CTRL_SET_TMP_RSA_CB	$NIMLIB/wrappers/openssl.nim	/^  SSL_CTRL_SET_TMP_RSA_CB* = 5$/;"	t
SSL_CTX_check_private_key	$NIMLIB/wrappers/openssl.nim	/^proc SSL_CTX_check_private_key*(ctx: SslCtx): cint{.cdecl, dynlib: DLLSSLName,$/;"	f
SSL_CTX_ctrl	$NIMLIB/wrappers/openssl.nim	/^proc SSL_CTX_ctrl*(ctx: SslCtx, cmd: cint, larg: clong, parg: pointer): clong{.$/;"	f
SSL_CTX_free	$NIMLIB/wrappers/openssl.nim	/^proc SSL_CTX_free*(arg0: SslCtx){.cdecl, dynlib: DLLSSLName, importc.}$/;"	f
SSL_CTX_get_ex_data	$NIMLIB/wrappers/openssl.nim	/^proc SSL_CTX_get_ex_data*(ssl: SslCtx, idx: cint): pointer {.cdecl, dynlib: DLLSSLName, importc./;"	f
SSL_CTX_get_ex_new_index	$NIMLIB/wrappers/openssl.nim	/^proc SSL_CTX_get_ex_new_index*(argl: clong, argp: pointer, new_func: pointer, dup_func: pointer,/;"	f
SSL_CTX_load_verify_locations	$NIMLIB/wrappers/openssl.nim	/^proc SSL_CTX_load_verify_locations*(ctx: SslCtx, CAfile: cstring,$/;"	f
SSL_CTX_new	$NIMLIB/wrappers/openssl.nim	/^proc SSL_CTX_new*(meth: PSSL_METHOD): SslCtx{.cdecl,$/;"	f
SSL_CTX_set_alpn_protos	$NIMLIB/wrappers/openssl.nim	/^proc SSL_CTX_set_alpn_protos*(ctx: SslCtx; protos: cstring; protos_len: cuint): cint {.cdecl, dy/;"	f
SSL_CTX_set_alpn_select_cb	$NIMLIB/wrappers/openssl.nim	/^proc SSL_CTX_set_alpn_select_cb*(ctx: SslCtx; cb: proc(ssl: SslPtr; out_proto: ptr cstring; outl/;"	f
SSL_CTX_set_cipher_list	$NIMLIB/wrappers/openssl.nim	/^proc SSL_CTX_set_cipher_list*(s: SslCtx, ciphers: cstring): cint{.cdecl, dynlib: DLLSSLName, imp/;"	f
SSL_CTX_set_ciphersuites	$NIMLIB/wrappers/openssl.nim	/^  proc SSL_CTX_set_ciphersuites*(ctx: SslCtx, str: cstring): cint =$/;"	t
SSL_CTX_set_ecdh_auto	$NIMLIB/wrappers/openssl.nim	/^proc SSL_CTX_set_ecdh_auto*(ctx: SslCtx, onoff: cint): cint {.inline.} =$/;"	t
SSL_CTX_set_ex_data	$NIMLIB/wrappers/openssl.nim	/^proc SSL_CTX_set_ex_data*(ssl: SslCtx, idx: cint, arg: pointer): cint {.cdecl, dynlib: DLLSSLNam/;"	f
SSL_CTX_set_next_proto_select_cb	$NIMLIB/wrappers/openssl.nim	/^proc SSL_CTX_set_next_proto_select_cb*(ctx: SslCtx; cb: proc(s: SslPtr; out_proto: cstring; outl/;"	f
SSL_CTX_set_next_protos_advertised_cb	$NIMLIB/wrappers/openssl.nim	/^proc SSL_CTX_set_next_protos_advertised_cb*(ctx: SslCtx; cb: proc(ssl: SslPtr; out_proto: ptr cs/;"	f
SSL_CTX_set_psk_client_callback	$NIMLIB/wrappers/openssl.nim	/^proc SSL_CTX_set_psk_client_callback*(ctx: SslCtx; callback: PskClientCallback) {.cdecl, dynlib:/;"	f
SSL_CTX_set_psk_server_callback	$NIMLIB/wrappers/openssl.nim	/^proc SSL_CTX_set_psk_server_callback*(ctx: SslCtx; callback: PskServerCallback) {.cdecl, dynlib:/;"	f
SSL_CTX_set_session_id_context	$NIMLIB/wrappers/openssl.nim	/^proc SSL_CTX_set_session_id_context*(context: SslCtx, sid_ctx: string, sid_ctx_len: int){.cdecl,/;"	f
SSL_CTX_set_tlsext_servername_arg	$NIMLIB/wrappers/openssl.nim	/^proc SSL_CTX_set_tlsext_servername_arg*(ctx: SslCtx, arg: pointer): int =$/;"	t
SSL_CTX_set_tlsext_servername_callback	$NIMLIB/wrappers/openssl.nim	/^proc SSL_CTX_set_tlsext_servername_callback*(ctx: SslCtx, cb: proc(ssl: SslPtr, cb_id: int, arg:/;"	t
SSL_CTX_set_verify	$NIMLIB/wrappers/openssl.nim	/^proc SSL_CTX_set_verify*(s: SslCtx, mode: int, cb: proc (a: int, b: pointer): int {.cdecl.}){.cd/;"	f
SSL_CTX_use_PrivateKey_file	$NIMLIB/wrappers/openssl.nim	/^proc SSL_CTX_use_PrivateKey_file*(ctx: SslCtx,$/;"	f
SSL_CTX_use_certificate_chain_file	$NIMLIB/wrappers/openssl.nim	/^proc SSL_CTX_use_certificate_chain_file*(ctx: SslCtx, filename: cstring): cint{.$/;"	f
SSL_CTX_use_certificate_file	$NIMLIB/wrappers/openssl.nim	/^proc SSL_CTX_use_certificate_file*(ctx: SslCtx, filename: cstring, typ: cint): cint{.$/;"	f
SSL_CTX_use_psk_identity_hint	$NIMLIB/wrappers/openssl.nim	/^proc SSL_CTX_use_psk_identity_hint*(ctx: SslCtx; hint: cstring): cint {.cdecl, dynlib: DLLSSLNam/;"	f
SSL_ERROR_NONE	$NIMLIB/wrappers/openssl.nim	/^  SSL_ERROR_NONE* = 0$/;"	t
SSL_ERROR_SSL	$NIMLIB/wrappers/openssl.nim	/^  SSL_ERROR_SSL* = 1$/;"	t
SSL_ERROR_SYSCALL	$NIMLIB/wrappers/openssl.nim	/^  SSL_ERROR_SYSCALL* = 5      #look at error stack\/return value\/errno$/;"	t
SSL_ERROR_WANT_ACCEPT	$NIMLIB/wrappers/openssl.nim	/^  SSL_ERROR_WANT_ACCEPT* = 8$/;"	t
SSL_ERROR_WANT_CONNECT	$NIMLIB/wrappers/openssl.nim	/^  SSL_ERROR_WANT_CONNECT* = 7$/;"	t
SSL_ERROR_WANT_READ	$NIMLIB/wrappers/openssl.nim	/^  SSL_ERROR_WANT_READ* = 2$/;"	t
SSL_ERROR_WANT_WRITE	$NIMLIB/wrappers/openssl.nim	/^  SSL_ERROR_WANT_WRITE* = 3$/;"	t
SSL_ERROR_WANT_X509_LOOKUP	$NIMLIB/wrappers/openssl.nim	/^  SSL_ERROR_WANT_X509_LOOKUP* = 4$/;"	t
SSL_ERROR_ZERO_RETURN	$NIMLIB/wrappers/openssl.nim	/^  SSL_ERROR_ZERO_RETURN* = 6$/;"	t
SSL_FILETYPE_ASN1	$NIMLIB/wrappers/openssl.nim	/^  SSL_FILETYPE_ASN1* = 2$/;"	t
SSL_FILETYPE_PEM	$NIMLIB/wrappers/openssl.nim	/^  SSL_FILETYPE_PEM* = 1$/;"	t
SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER	$NIMLIB/wrappers/openssl.nim	/^  SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER* = 2 #* Never bother the application with retries if the t/;"	t
SSL_MODE_AUTO_RETRY	$NIMLIB/wrappers/openssl.nim	/^  SSL_MODE_AUTO_RETRY* = 4    #* Don't attempt to automatically build certificate chain *$/;"	t
SSL_MODE_ENABLE_PARTIAL_WRITE	$NIMLIB/wrappers/openssl.nim	/^  SSL_MODE_ENABLE_PARTIAL_WRITE* = 1 #* Make it possible to retry SSL_write() with changed buffe/;"	t
SSL_MODE_NO_AUTO_CHAIN	$NIMLIB/wrappers/openssl.nim	/^  SSL_MODE_NO_AUTO_CHAIN* = 8$/;"	t
SSL_OP_ALL	$NIMLIB/wrappers/openssl.nim	/^  SSL_OP_ALL* = 0x000FFFFF$/;"	t
SSL_OP_NO_SSLv2	$NIMLIB/wrappers/openssl.nim	/^  SSL_OP_NO_SSLv2* = 0x01000000$/;"	t
SSL_OP_NO_SSLv3	$NIMLIB/wrappers/openssl.nim	/^  SSL_OP_NO_SSLv3* = 0x02000000$/;"	t
SSL_OP_NO_TLSv1	$NIMLIB/wrappers/openssl.nim	/^  SSL_OP_NO_TLSv1* = 0x04000000$/;"	t
SSL_OP_NO_TLSv1_1	$NIMLIB/wrappers/openssl.nim	/^  SSL_OP_NO_TLSv1_1* = 0x08000000$/;"	t
SSL_RECEIVED_SHUTDOWN	$NIMLIB/wrappers/openssl.nim	/^  SSL_RECEIVED_SHUTDOWN* = 2$/;"	t
SSL_SENT_SHUTDOWN	$NIMLIB/wrappers/openssl.nim	/^  SSL_SENT_SHUTDOWN* = 1$/;"	t
SSL_ST_ACCEPT	$NIMLIB/wrappers/openssl.nim	/^  SSL_ST_ACCEPT* = 0x2000$/;"	t
SSL_ST_CONNECT	$NIMLIB/wrappers/openssl.nim	/^  SSL_ST_CONNECT* = 0x1000$/;"	t
SSL_ST_INIT	$NIMLIB/wrappers/openssl.nim	/^  SSL_ST_INIT* = SSL_ST_CONNECT or SSL_ST_ACCEPT$/;"	t
SSL_TLSEXT_ERR_ALERT_FATAL	$NIMLIB/wrappers/openssl.nim	/^  SSL_TLSEXT_ERR_ALERT_FATAL* = 2$/;"	t
SSL_TLSEXT_ERR_ALERT_WARNING	$NIMLIB/wrappers/openssl.nim	/^  SSL_TLSEXT_ERR_ALERT_WARNING* = 1$/;"	t
SSL_TLSEXT_ERR_NOACK	$NIMLIB/wrappers/openssl.nim	/^  SSL_TLSEXT_ERR_NOACK* = 3$/;"	t
SSL_TLSEXT_ERR_OK	$NIMLIB/wrappers/openssl.nim	/^  SSL_TLSEXT_ERR_OK* = 0$/;"	t
SSL_VERIFY_NONE	$NIMLIB/wrappers/openssl.nim	/^  SSL_VERIFY_NONE* = 0x00000000$/;"	t
SSL_VERIFY_PEER	$NIMLIB/wrappers/openssl.nim	/^  SSL_VERIFY_PEER* = 0x00000001$/;"	t
SSL_accept	$NIMLIB/wrappers/openssl.nim	/^proc SSL_accept*(ssl: SslPtr): cint{.cdecl, dynlib: DLLSSLName, importc.}$/;"	f
SSL_connect	$NIMLIB/wrappers/openssl.nim	/^proc SSL_connect*(ssl: SslPtr): cint{.cdecl, dynlib: DLLSSLName, importc.}$/;"	f
SSL_ctrl	$NIMLIB/wrappers/openssl.nim	/^proc SSL_ctrl*(ssl: SslPtr, cmd: cint, larg: int, parg: pointer): int{.$/;"	f
SSL_free	$NIMLIB/wrappers/openssl.nim	/^proc SSL_free*(ssl: SslPtr){.cdecl, dynlib: DLLSSLName, importc.}$/;"	f
SSL_get0_alpn_selected	$NIMLIB/wrappers/openssl.nim	/^proc SSL_get0_alpn_selected*(ssl: SslPtr; data: ptr cstring; len: ptr cuint) {.cdecl, dynlib: DL/;"	f
SSL_get0_next_proto_negotiated	$NIMLIB/wrappers/openssl.nim	/^proc SSL_get0_next_proto_negotiated*(s: SslPtr; data: ptr cstring; len: ptr cuint) {.cdecl, dynl/;"	f
SSL_get0_verified_chain	$NIMLIB/wrappers/openssl.nim	/^proc SSL_get0_verified_chain*(ssl: SslPtr): PSTACK {.cdecl, dynlib: DLLSSLName,$/;"	f
SSL_get1_peer_certificate	$NIMLIB/wrappers/openssl.nim	/^    proc SSL_get1_peer_certificate*(ssl: SslCtx): PX509 {.cdecl, dynlib: DLLSSLName, importc.}$/;"	f
SSL_get_SSL_CTX	$NIMLIB/wrappers/openssl.nim	/^proc SSL_get_SSL_CTX*(ssl: SslPtr): SslCtx {.cdecl, dynlib: DLLSSLName, importc.}$/;"	f
SSL_get_error	$NIMLIB/wrappers/openssl.nim	/^proc SSL_get_error*(s: SslPtr, ret_code: cint): cint{.cdecl, dynlib: DLLSSLName, importc.}$/;"	f
SSL_get_peer_certificate	$NIMLIB/wrappers/openssl.nim	/^    proc SSL_get_peer_certificate*(ssl: SslCtx): PX509 {.cdecl, dynlib: DLLSSLName, importc.}$/;"	f
SSL_get_psk_identity	$NIMLIB/wrappers/openssl.nim	/^proc SSL_get_psk_identity*(ssl: SslPtr): cstring {.cdecl, dynlib: DLLSSLName, importc.}$/;"	f
SSL_get_servername	$NIMLIB/wrappers/openssl.nim	/^proc SSL_get_servername*(ssl: SslPtr, typ: cint = TLSEXT_NAMETYPE_host_name): cstring {.cdecl, d/;"	t
SSL_get_shutdown	$NIMLIB/wrappers/openssl.nim	/^proc SSL_get_shutdown*(ssl: SslPtr): cint {.cdecl, dynlib: DLLSSLName, importc: "SSL_get_shutdow/;"	f
SSL_get_verify_result	$NIMLIB/wrappers/openssl.nim	/^proc SSL_get_verify_result*(ssl: SslPtr): int{.cdecl,$/;"	f
SSL_in_init	$NIMLIB/wrappers/openssl.nim	/^  proc SSL_in_init*(ssl: SslPtr): cint =$/;"	t
SSL_library_init	$NIMLIB/wrappers/openssl.nim	/^  proc SSL_library_init*(): cint {.discardable.} =$/;"	t
SSL_load_error_strings	$NIMLIB/wrappers/openssl.nim	/^  proc SSL_load_error_strings*() =$/;"	t
SSL_new	$NIMLIB/wrappers/openssl.nim	/^proc SSL_new*(context: SslCtx): SslPtr{.cdecl, dynlib: DLLSSLName, importc.}$/;"	f
SSL_pending	$NIMLIB/wrappers/openssl.nim	/^proc SSL_pending*(ssl: SslPtr): cint{.cdecl, dynlib: DLLSSLName, importc.}$/;"	f
SSL_read	$NIMLIB/wrappers/openssl.nim	/^proc SSL_read*(ssl: SslPtr, buf: pointer, num: int): cint{.cdecl, dynlib: DLLSSLName, importc.}$/;"	f
SSL_select_next_proto	$NIMLIB/wrappers/openssl.nim	/^proc SSL_select_next_proto*(out_proto: ptr cstring; outlen: cstring; server: cstring; server_len/;"	f
SSL_set_SSL_CTX	$NIMLIB/wrappers/openssl.nim	/^proc SSL_set_SSL_CTX*(ssl: SslPtr, ctx: SslCtx): SslCtx {.cdecl, dynlib: DLLSSLName, importc.}$/;"	f
SSL_set_alpn_protos	$NIMLIB/wrappers/openssl.nim	/^proc SSL_set_alpn_protos*(ssl: SslPtr; protos: cstring; protos_len: cuint): cint {.cdecl, dynlib/;"	f
SSL_set_fd	$NIMLIB/wrappers/openssl.nim	/^proc SSL_set_fd*(ssl: SslPtr, fd: SocketHandle): cint{.cdecl, dynlib: DLLSSLName, importc.}$/;"	f
SSL_set_shutdown	$NIMLIB/wrappers/openssl.nim	/^proc SSL_set_shutdown*(ssl: SslPtr, mode: cint) {.cdecl, dynlib: DLLSSLName, importc: "SSL_set_s/;"	f
SSL_set_tlsext_host_name	$NIMLIB/wrappers/openssl.nim	/^proc SSL_set_tlsext_host_name*(ssl: SslPtr, name: cstring): int =$/;"	t
SSL_shutdown	$NIMLIB/wrappers/openssl.nim	/^proc SSL_shutdown*(ssl: SslPtr): cint{.cdecl, dynlib: DLLSSLName, importc.}$/;"	f
SSL_write	$NIMLIB/wrappers/openssl.nim	/^proc SSL_write*(ssl: SslPtr, buf: cstring, num: int): cint{.cdecl, dynlib: DLLSSLName, importc.}$/;"	f
SSLv23_client_method	$NIMLIB/wrappers/openssl.nim	/^  proc SSLv23_client_method*(): PSSL_METHOD {.cdecl, dynlib: DLLSSLName, importc.}$/;"	f
SSLv23_method	$NIMLIB/wrappers/openssl.nim	/^  proc SSLv23_method*(): PSSL_METHOD =$/;"	t
SSLv2_method	$NIMLIB/wrappers/openssl.nim	/^  proc SSLv2_method*(): PSSL_METHOD {.cdecl, dynlib: DLLSSLName, importc.}$/;"	f
SSLv3_method	$NIMLIB/wrappers/openssl.nim	/^  proc SSLv3_method*(): PSSL_METHOD {.cdecl, dynlib: DLLSSLName, importc.}$/;"	f
SS_DISABLE	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SS_DISABLE* = cint(2)$/;"	t
SS_DISABLE	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SS_DISABLE* = cint(2)$/;"	t
SS_DISABLE	$NIMLIB/posix/posix_other_consts.nim	/^var SS_DISABLE* {.importc: "SS_DISABLE", header: "<signal.h>".}: cint$/;"	t
SS_ONSTACK	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const SS_ONSTACK* = cint(1)$/;"	t
SS_ONSTACK	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const SS_ONSTACK* = cint(1)$/;"	t
SS_ONSTACK	$NIMLIB/posix/posix_other_consts.nim	/^var SS_ONSTACK* {.importc: "SS_ONSTACK", header: "<signal.h>".}: cint$/;"	t
STARTF_USESHOWWINDOW	$NIMLIB/windows/winlean.nim	/^  STARTF_USESHOWWINDOW* = 1'i32$/;"	t
STARTF_USESTDHANDLES	$NIMLIB/windows/winlean.nim	/^  STARTF_USESTDHANDLES* = 256'i32$/;"	t
STARTUPINFO	$NIMLIB/windows/winlean.nim	/^  STARTUPINFO* = object$/;"	t
STATUS_PENDING	$NIMLIB/windows/winlean.nim	/^  STATUS_PENDING* = 0x103$/;"	t
STDERR_FILENO	$NIMLIB/posix/posix.nim	/^  STDERR_FILENO* = 2 ## File number of stderr;$/;"	t
STDIN_FILENO	$NIMLIB/posix/posix.nim	/^  STDIN_FILENO* = 0  ## File number of stdin;$/;"	t
STDOUT_FILENO	$NIMLIB/posix/posix.nim	/^  STDOUT_FILENO* = 1 ## File number of stdout;$/;"	t
STD_ERROR_HANDLE	$NIMLIB/windows/winlean.nim	/^  STD_ERROR_HANDLE* = -12'i32$/;"	t
STD_INPUT_HANDLE	$NIMLIB/windows/winlean.nim	/^  STD_INPUT_HANDLE* = -10'i32$/;"	t
STD_OUTPUT_HANDLE	$NIMLIB/windows/winlean.nim	/^  STD_OUTPUT_HANDLE* = -11'i32$/;"	t
STILL_ACTIVE	$NIMLIB/windows/winlean.nim	/^  STILL_ACTIVE* = 0x00000103'i32$/;"	t
STUDY_EXTRA_NEEDED	$NIMLIB/wrappers/pcre.nim	/^  STUDY_EXTRA_NEEDED*             = 0x0008$/;"	t
STUDY_JIT_COMPILE	$NIMLIB/wrappers/pcre.nim	/^  STUDY_JIT_COMPILE*              = 0x0001$/;"	t
STUDY_JIT_PARTIAL_HARD_COMPILE	$NIMLIB/wrappers/pcre.nim	/^  STUDY_JIT_PARTIAL_HARD_COMPILE* = 0x0004$/;"	t
STUDY_JIT_PARTIAL_SOFT_COMPILE	$NIMLIB/wrappers/pcre.nim	/^  STUDY_JIT_PARTIAL_SOFT_COMPILE* = 0x0002$/;"	t
ST_NOSUID	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const ST_NOSUID* = cint(2)$/;"	t
ST_NOSUID	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const ST_NOSUID* = cint(2)$/;"	t
ST_NOSUID	$NIMLIB/posix/posix_other_consts.nim	/^var ST_NOSUID* {.importc: "ST_NOSUID", header: "<sys\/statvfs.h>".}: cint$/;"	t
ST_RDONLY	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const ST_RDONLY* = cint(1)$/;"	t
ST_RDONLY	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const ST_RDONLY* = cint(1)$/;"	t
ST_RDONLY	$NIMLIB/posix/posix_other_consts.nim	/^var ST_RDONLY* {.importc: "ST_RDONLY", header: "<sys\/statvfs.h>".}: cint$/;"	t
SW_SHOWNORMAL	$NIMLIB/windows/winlean.nim	/^  SW_SHOWNORMAL* = 1'i32$/;"	t
SYNCHRONIZE	$NIMLIB/windows/winlean.nim	/^  SYNCHRONIZE* = 0x00100000'i32$/;"	t
S_IFBLK	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const S_IFBLK* = cint(24576)$/;"	t
S_IFBLK	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const S_IFBLK* = cint(24576)$/;"	t
S_IFBLK	$NIMLIB/posix/posix_other_consts.nim	/^var S_IFBLK* {.importc: "S_IFBLK", header: "<sys\/stat.h>".}: cint$/;"	t
S_IFCHR	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const S_IFCHR* = cint(8192)$/;"	t
S_IFCHR	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const S_IFCHR* = cint(8192)$/;"	t
S_IFCHR	$NIMLIB/posix/posix_other_consts.nim	/^var S_IFCHR* {.importc: "S_IFCHR", header: "<sys\/stat.h>".}: cint$/;"	t
S_IFDIR	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const S_IFDIR* = cint(16384)$/;"	t
S_IFDIR	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const S_IFDIR* = cint(16384)$/;"	t
S_IFDIR	$NIMLIB/posix/posix_other_consts.nim	/^var S_IFDIR* {.importc: "S_IFDIR", header: "<sys\/stat.h>".}: cint$/;"	t
S_IFIFO	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const S_IFIFO* = cint(4096)$/;"	t
S_IFIFO	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const S_IFIFO* = cint(4096)$/;"	t
S_IFIFO	$NIMLIB/posix/posix_other_consts.nim	/^var S_IFIFO* {.importc: "S_IFIFO", header: "<sys\/stat.h>".}: cint$/;"	t
S_IFLNK	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const S_IFLNK* = cint(40960)$/;"	t
S_IFLNK	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const S_IFLNK* = cint(40960)$/;"	t
S_IFLNK	$NIMLIB/posix/posix_other_consts.nim	/^var S_IFLNK* {.importc: "S_IFLNK", header: "<sys\/stat.h>".}: cint$/;"	t
S_IFMT	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const S_IFMT* = cint(61440)$/;"	t
S_IFMT	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const S_IFMT* = cint(61440)$/;"	t
S_IFMT	$NIMLIB/posix/posix_other_consts.nim	/^var S_IFMT* {.importc: "S_IFMT", header: "<sys\/stat.h>".}: cint$/;"	t
S_IFREG	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const S_IFREG* = cint(32768)$/;"	t
S_IFREG	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const S_IFREG* = cint(32768)$/;"	t
S_IFREG	$NIMLIB/posix/posix_other_consts.nim	/^var S_IFREG* {.importc: "S_IFREG", header: "<sys\/stat.h>".}: cint$/;"	t
S_IFSOCK	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const S_IFSOCK* = cint(49152)$/;"	t
S_IFSOCK	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const S_IFSOCK* = cint(49152)$/;"	t
S_IFSOCK	$NIMLIB/posix/posix_other_consts.nim	/^var S_IFSOCK* {.importc: "S_IFSOCK", header: "<sys\/stat.h>".}: cint$/;"	t
S_IRGRP	$NIMLIB/posix/posix_freertos_consts.nim	/^var S_IRGRP* {.importc: "S_IRGRP", header: "<sys\/stat.h>".}: cint$/;"	t
S_IRGRP	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const S_IRGRP* = cint(32)$/;"	t
S_IRGRP	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const S_IRGRP* = cint(32)$/;"	t
S_IRGRP	$NIMLIB/posix/posix_other_consts.nim	/^var S_IRGRP* {.importc: "S_IRGRP", header: "<sys\/stat.h>".}: cint$/;"	t
S_IROTH	$NIMLIB/posix/posix_freertos_consts.nim	/^var S_IROTH* {.importc: "S_IROTH", header: "<sys\/stat.h>".}: cint$/;"	t
S_IROTH	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const S_IROTH* = cint(4)$/;"	t
S_IROTH	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const S_IROTH* = cint(4)$/;"	t
S_IROTH	$NIMLIB/posix/posix_other_consts.nim	/^var S_IROTH* {.importc: "S_IROTH", header: "<sys\/stat.h>".}: cint$/;"	t
S_IRUSR	$NIMLIB/posix/posix_freertos_consts.nim	/^var S_IRUSR* {.importc: "S_IRUSR", header: "<sys\/stat.h>".}: cint$/;"	t
S_IRUSR	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const S_IRUSR* = cint(256)$/;"	t
S_IRUSR	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const S_IRUSR* = cint(256)$/;"	t
S_IRUSR	$NIMLIB/posix/posix_other_consts.nim	/^var S_IRUSR* {.importc: "S_IRUSR", header: "<sys\/stat.h>".}: cint$/;"	t
S_IRWXG	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const S_IRWXG* = cint(56)$/;"	t
S_IRWXG	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const S_IRWXG* = cint(56)$/;"	t
S_IRWXG	$NIMLIB/posix/posix_other_consts.nim	/^var S_IRWXG* {.importc: "S_IRWXG", header: "<sys\/stat.h>".}: cint$/;"	t
S_IRWXO	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const S_IRWXO* = cint(7)$/;"	t
S_IRWXO	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const S_IRWXO* = cint(7)$/;"	t
S_IRWXO	$NIMLIB/posix/posix_other_consts.nim	/^var S_IRWXO* {.importc: "S_IRWXO", header: "<sys\/stat.h>".}: cint$/;"	t
S_IRWXU	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const S_IRWXU* = cint(448)$/;"	t
S_IRWXU	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const S_IRWXU* = cint(448)$/;"	t
S_IRWXU	$NIMLIB/posix/posix_other_consts.nim	/^var S_IRWXU* {.importc: "S_IRWXU", header: "<sys\/stat.h>".}: cint$/;"	t
S_ISBLK	$NIMLIB/posix/posix.nim	/^proc S_ISBLK*(m: Mode): bool {.importc, header: "<sys\/stat.h>".}$/;"	f
S_ISCHR	$NIMLIB/posix/posix.nim	/^proc S_ISCHR*(m: Mode): bool {.importc, header: "<sys\/stat.h>".}$/;"	f
S_ISDIR	$NIMLIB/posix/posix.nim	/^proc S_ISDIR*(m: Mode): bool {.importc, header: "<sys\/stat.h>".}$/;"	f
S_ISFIFO	$NIMLIB/posix/posix.nim	/^proc S_ISFIFO*(m: Mode): bool {.importc, header: "<sys\/stat.h>".}$/;"	f
S_ISGID	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const S_ISGID* = cint(1024)$/;"	t
S_ISGID	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const S_ISGID* = cint(1024)$/;"	t
S_ISGID	$NIMLIB/posix/posix_other_consts.nim	/^var S_ISGID* {.importc: "S_ISGID", header: "<sys\/stat.h>".}: cint$/;"	t
S_ISLNK	$NIMLIB/posix/posix.nim	/^proc S_ISLNK*(m: Mode): bool {.importc, header: "<sys\/stat.h>".}$/;"	f
S_ISREG	$NIMLIB/posix/posix.nim	/^proc S_ISREG*(m: Mode): bool {.importc, header: "<sys\/stat.h>".}$/;"	f
S_ISSOCK	$NIMLIB/posix/posix.nim	/^proc S_ISSOCK*(m: Mode): bool {.importc, header: "<sys\/stat.h>".}$/;"	f
S_ISUID	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const S_ISUID* = cint(2048)$/;"	t
S_ISUID	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const S_ISUID* = cint(2048)$/;"	t
S_ISUID	$NIMLIB/posix/posix_other_consts.nim	/^var S_ISUID* {.importc: "S_ISUID", header: "<sys\/stat.h>".}: cint$/;"	t
S_ISVTX	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const S_ISVTX* = cint(512)$/;"	t
S_ISVTX	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const S_ISVTX* = cint(512)$/;"	t
S_ISVTX	$NIMLIB/posix/posix_other_consts.nim	/^var S_ISVTX* {.importc: "S_ISVTX", header: "<sys\/stat.h>".}: cint$/;"	t
S_IWGRP	$NIMLIB/posix/posix_freertos_consts.nim	/^var S_IWGRP* {.importc: "S_IWGRP", header: "<sys\/stat.h>".}: cint$/;"	t
S_IWGRP	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const S_IWGRP* = cint(16)$/;"	t
S_IWGRP	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const S_IWGRP* = cint(16)$/;"	t
S_IWGRP	$NIMLIB/posix/posix_other_consts.nim	/^var S_IWGRP* {.importc: "S_IWGRP", header: "<sys\/stat.h>".}: cint$/;"	t
S_IWOTH	$NIMLIB/posix/posix_freertos_consts.nim	/^var S_IWOTH* {.importc: "S_IWOTH", header: "<sys\/stat.h>".}: cint$/;"	t
S_IWOTH	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const S_IWOTH* = cint(2)$/;"	t
S_IWOTH	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const S_IWOTH* = cint(2)$/;"	t
S_IWOTH	$NIMLIB/posix/posix_other_consts.nim	/^var S_IWOTH* {.importc: "S_IWOTH", header: "<sys\/stat.h>".}: cint$/;"	t
S_IWUSR	$NIMLIB/posix/posix_freertos_consts.nim	/^var S_IWUSR* {.importc: "S_IWUSR", header: "<sys\/stat.h>".}: cint$/;"	t
S_IWUSR	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const S_IWUSR* = cint(128)$/;"	t
S_IWUSR	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const S_IWUSR* = cint(128)$/;"	t
S_IWUSR	$NIMLIB/posix/posix_other_consts.nim	/^var S_IWUSR* {.importc: "S_IWUSR", header: "<sys\/stat.h>".}: cint$/;"	t
S_IXGRP	$NIMLIB/posix/posix_freertos_consts.nim	/^var S_IXGRP* {.importc: "S_IXGRP", header: "<sys\/stat.h>".}: cint$/;"	t
S_IXGRP	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const S_IXGRP* = cint(8)$/;"	t
S_IXGRP	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const S_IXGRP* = cint(8)$/;"	t
S_IXGRP	$NIMLIB/posix/posix_other_consts.nim	/^var S_IXGRP* {.importc: "S_IXGRP", header: "<sys\/stat.h>".}: cint$/;"	t
S_IXOTH	$NIMLIB/posix/posix_freertos_consts.nim	/^var S_IXOTH* {.importc: "S_IXOTH", header: "<sys\/stat.h>".}: cint$/;"	t
S_IXOTH	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const S_IXOTH* = cint(1)$/;"	t
S_IXOTH	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const S_IXOTH* = cint(1)$/;"	t
S_IXOTH	$NIMLIB/posix/posix_other_consts.nim	/^var S_IXOTH* {.importc: "S_IXOTH", header: "<sys\/stat.h>".}: cint$/;"	t
S_IXUSR	$NIMLIB/posix/posix_freertos_consts.nim	/^var S_IXUSR* {.importc: "S_IXUSR", header: "<sys\/stat.h>".}: cint$/;"	t
S_IXUSR	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const S_IXUSR* = cint(64)$/;"	t
S_IXUSR	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const S_IXUSR* = cint(64)$/;"	t
S_IXUSR	$NIMLIB/posix/posix_other_consts.nim	/^var S_IXUSR* {.importc: "S_IXUSR", header: "<sys\/stat.h>".}: cint$/;"	t
S_TYPEISMQ	$NIMLIB/posix/posix.nim	/^proc S_TYPEISMQ*(buf: var Stat): bool {.importc, header: "<sys\/stat.h>".}$/;"	f
S_TYPEISSEM	$NIMLIB/posix/posix.nim	/^proc S_TYPEISSEM*(buf: var Stat): bool {.importc, header: "<sys\/stat.h>".}$/;"	f
S_TYPEISSHM	$NIMLIB/posix/posix.nim	/^proc S_TYPEISSHM*(buf: var Stat): bool {.importc, header: "<sys\/stat.h>".}$/;"	f
S_TYPEISTMO	$NIMLIB/posix/posix.nim	/^proc S_TYPEISTMO*(buf: var Stat): bool {.importc, header: "<sys\/stat.h>".}$/;"	f
SameSite	$NIMLIB/pure/cookies.nim	/^  SameSite* {.pure.} = enum ## The SameSite cookie attribute.$/;"	t
Screen	$NIMLIB/js/dom.nim	/^  Screen* {.importc.} = ref object of RootObj$/;"	t
ScriptExt	$NIMLIB/std/private/osseps.nim	/^  ScriptExt* =$/;"	t
ScriptMode	$NIMLIB/system/nimscript.nim	/^  ScriptMode* {.pure.} = enum ## Controls the behaviour of the script.$/;"	t
ScrollBars	$NIMLIB/js/dom.nim	/^  ScrollBars* = LocationBar$/;"	t
ScrollIntoViewOptions	$NIMLIB/js/dom.nim	/^  ScrollIntoViewOptions* = object$/;"	t
SecondRange	$NIMLIB/pure/times.nim	/^  SecondRange* = range[0..60] ## \\$/;"	t
SecureHash	$NIMLIB/std/sha1.nim	/^  SecureHash* = distinct Sha1Digest$/;"	t
SelectEvent	$NIMLIB/pure/ioselects/ioselectors_epoll.nim	/^  SelectEvent* = ptr SelectEventImpl$/;"	t
SelectEvent	$NIMLIB/pure/ioselects/ioselectors_kqueue.nim	/^  SelectEvent* = ptr SelectEventImpl$/;"	t
SelectEvent	$NIMLIB/pure/ioselects/ioselectors_poll.nim	/^  SelectEvent* = ptr SelectEventImpl$/;"	t
SelectEvent	$NIMLIB/pure/ioselects/ioselectors_select.nim	/^  SelectEvent* = ptr SelectEventImpl$/;"	t
SelectEvent	$NIMLIB/pure/selectors.nim	/^    SelectEvent* = object$/;"	t
Selection	$NIMLIB/js/dom.nim	/^  Selection* {.importc.} = ref object$/;"	t
Selector	$NIMLIB/pure/ioselects/ioselectors_epoll.nim	/^    Selector*[T] = ref SelectorImpl[T]$/;"	t
Selector	$NIMLIB/pure/ioselects/ioselectors_kqueue.nim	/^    Selector*[T] = ref SelectorImpl[T]$/;"	t
Selector	$NIMLIB/pure/ioselects/ioselectors_poll.nim	/^    Selector*[T] = ref SelectorImpl[T]$/;"	t
Selector	$NIMLIB/pure/ioselects/ioselectors_select.nim	/^    Selector*[T] = ref SelectorImpl[T]$/;"	t
Selector	$NIMLIB/pure/selectors.nim	/^    Selector*[T] = ref object$/;"	t
Sem	$NIMLIB/posix/posix_haiku.nim	/^  Sem* {.importc: "sem_t", header: "<semaphore.h>", final, pure.} = object$/;"	t
Sem	$NIMLIB/posix/posix_linux_amd64.nim	/^  Sem* {.importc: "sem_t", header: "<semaphore.h>", final, pure.} = object$/;"	t
Sem	$NIMLIB/posix/posix_macos_amd64.nim	/^  Sem* {.importc: "sem_t", header: "<semaphore.h>", final, pure.} = object$/;"	t
Sem	$NIMLIB/posix/posix_nintendoswitch.nim	/^  Sem* {.importc: "sem_t", header: "<semaphore.h>", final, pure.} = object$/;"	t
Sem	$NIMLIB/posix/posix_openbsd_amd64.nim	/^  Sem* {.importc: "sem_t", header: "<semaphore.h>", final, pure.} = object$/;"	t
Sem	$NIMLIB/posix/posix_other.nim	/^  Sem* {.importc: "sem_t", header: "<semaphore.h>", final, pure.} = object$/;"	t
Servent	$NIMLIB/pure/nativesockets.nim	/^  Servent* = object ## information about a service$/;"	t
Servent	$NIMLIB/windows/winlean.nim	/^  Servent* = object$/;"	t
SetElement	$NIMLIB/std/setutils.nim	/^  type SetElement* = char|byte|bool|int16|uint16|enum|uint8|int8$/;"	t
Sha1Digest	$NIMLIB/std/sha1.nim	/^  Sha1Digest* = array[0 .. Sha1DigestSize - 1, uint8]$/;"	t
Sha1State	$NIMLIB/std/sha1.nim	/^  Sha1State* = object$/;"	t
ShadowRoot	$NIMLIB/js/dom.nim	/^    ShadowRoot* {.importc.} = ref object of DocumentOrShadowRoot$/;"	t
ShadowRootInit	$NIMLIB/js/dom.nim	/^    ShadowRootInit* = object of RootObj$/;"	t
SharedList	$NIMLIB/pure/collections/sharedlist.nim	/^  SharedList*[A] = object ## generic shared list$/;"	t
SharedTable	$NIMLIB/pure/collections/sharedtables.nim	/^  SharedTable*[A, B] = object ## generic hash SharedTable$/;"	t
Sig_atomic	$NIMLIB/posix/posix_haiku.nim	/^  Sig_atomic* {.importc: "sig_atomic_t", header: "<signal.h>".} = cint$/;"	t
Sig_atomic	$NIMLIB/posix/posix_linux_amd64.nim	/^  Sig_atomic* {.importc: "sig_atomic_t", header: "<signal.h>".} = cint$/;"	t
Sig_atomic	$NIMLIB/posix/posix_macos_amd64.nim	/^  Sig_atomic* {.importc: "sig_atomic_t", header: "<signal.h>".} = cint$/;"	t
Sig_atomic	$NIMLIB/posix/posix_nintendoswitch.nim	/^  Sig_atomic* {.importc: "sig_atomic_t", header: "<signal.h>".} = cint$/;"	t
Sig_atomic	$NIMLIB/posix/posix_openbsd_amd64.nim	/^  Sig_atomic* {.importc: "sig_atomic_t", header: "<signal.h>".} = cint$/;"	t
Sig_atomic	$NIMLIB/posix/posix_other.nim	/^  Sig_atomic* {.importc: "sig_atomic_t", header: "<signal.h>".} = cint$/;"	t
SignalHandler	$NIMLIB/genode/signals.nim	/^  SignalHandler* = ref SignalHandlerObj$/;"	t
Sigset	$NIMLIB/posix/posix_haiku.nim	/^  Sigset* {.importc: "sigset_t", header: "<signal.h>".} = uint64$/;"	t
Sigset	$NIMLIB/posix/posix_linux_amd64.nim	/^  Sigset* {.importc: "sigset_t", header: "<signal.h>", final, pure.} = object$/;"	t
Sigset	$NIMLIB/posix/posix_macos_amd64.nim	/^  Sigset* {.importc: "sigset_t", header: "<signal.h>", final, pure.} = object$/;"	t
Sigset	$NIMLIB/posix/posix_nintendoswitch.nim	/^  Sigset* {.importc: "sigset_t", header: "<signal.h>", final.} = culong$/;"	t
Sigset	$NIMLIB/posix/posix_openbsd_amd64.nim	/^  Sigset* {.importc: "sigset_t", header: "<signal.h>", final, pure.} = object$/;"	t
Sigset	$NIMLIB/posix/posix_other.nim	/^  Sigset* {.importc: "sigset_t", header: "<signal.h>", final, pure.} = object$/;"	t
SingleTags	$NIMLIB/pure/htmlparser.nim	/^  SingleTags* = {tagArea, tagBase, tagBasefont,$/;"	t
SingleValueSetting	$NIMLIB/std/compilesettings.nim	/^  SingleValueSetting* {.pure.} = enum ## \\$/;"	t
SinglyLinkedList	$NIMLIB/pure/collections/lists.nim	/^  SinglyLinkedList*[T] = object$/;"	t
SinglyLinkedNode	$NIMLIB/pure/collections/lists.nim	/^  SinglyLinkedNode*[T] = ref SinglyLinkedNodeObj[T]$/;"	t
SinglyLinkedNodeObj	$NIMLIB/pure/collections/lists.nim	/^  SinglyLinkedNodeObj*[T] = object$/;"	t
SinglyLinkedRing	$NIMLIB/pure/collections/lists.nim	/^  SinglyLinkedRing*[T] = object$/;"	t
SkipTable	$NIMLIB/pure/strutils.nim	/^  SkipTable* = array[char, int] ## Character table for efficient substring search.$/;"	t
Slice	$NIMLIB/system.nim	/^  Slice*[T] = HSlice[T, T] ## An alias for `HSlice[T, T]`.$/;"	t
SlotOptions	$NIMLIB/js/dom.nim	/^    SlotOptions* = object of RootObj$/;"	t
SockAddr	$NIMLIB/windows/winlean.nim	/^  SockAddr* {.importc: "SOCKADDR", header: "winsock2.h".} = object$/;"	t
SockLen	$NIMLIB/posix/posix_haiku.nim	/^  SockLen* {.importc: "socklen_t", header: "<sys\/socket.h>".} = uint32$/;"	t
SockLen	$NIMLIB/posix/posix_linux_amd64.nim	/^  SockLen* {.importc: "socklen_t", header: "<sys\/socket.h>".} = cuint$/;"	t
SockLen	$NIMLIB/posix/posix_macos_amd64.nim	/^  SockLen* {.importc: "socklen_t", header: "<sys\/socket.h>".} = cuint$/;"	t
SockLen	$NIMLIB/posix/posix_nintendoswitch.nim	/^  SockLen* {.importc: "socklen_t", header: "<sys\/socket.h>".} = cuint$/;"	t
SockLen	$NIMLIB/posix/posix_openbsd_amd64.nim	/^  SockLen* {.importc: "socklen_t", header: "<sys\/socket.h>".} = cuint$/;"	t
SockLen	$NIMLIB/posix/posix_other.nim	/^  SockLen* {.importc: "socklen_t", header: "<sys\/socket.h>".} = cuint$/;"	t
SockLen	$NIMLIB/windows/winlean.nim	/^  SockLen* = cuint$/;"	t
SockType	$NIMLIB/pure/nativesockets.nim	/^  SockType* = enum     ## second argument to `socket` proc$/;"	t
Sockaddr_max_length	$NIMLIB/posix/posix_other.nim	/^  const Sockaddr_max_length* = 255$/;"	t
Sockaddr_un_path_length	$NIMLIB/posix/posix_haiku.nim	/^  const Sockaddr_un_path_length* = 92$/;"	t
Sockaddr_un_path_length	$NIMLIB/posix/posix_linux_amd64.nim	/^const Sockaddr_un_path_length* = 108$/;"	t
Sockaddr_un_path_length	$NIMLIB/posix/posix_macos_amd64.nim	/^  const Sockaddr_un_path_length* = 92$/;"	t
Sockaddr_un_path_length	$NIMLIB/posix/posix_nintendoswitch.nim	/^const Sockaddr_un_path_length* = 108$/;"	t
Sockaddr_un_path_length	$NIMLIB/posix/posix_openbsd_amd64.nim	/^const Sockaddr_un_path_length* = 92$/;"	t
Sockaddr_un_path_length	$NIMLIB/posix/posix_other.nim	/^  const Sockaddr_un_path_length* = Sockaddr_max_length$/;"	t
Socket	$NIMLIB/pure/net.nim	/^  Socket* = ref SocketImpl$/;"	t
SocketFlag	$NIMLIB/pure/net.nim	/^  SocketFlag* {.pure.} = enum$/;"	t
SocketHandle	$NIMLIB/posix/posix_haiku.nim	/^  SocketHandle* = distinct cint # The type used to represent socket descriptors$/;"	t
SocketHandle	$NIMLIB/posix/posix_linux_amd64.nim	/^  SocketHandle* = distinct cint # The type used to represent socket descriptors$/;"	t
SocketHandle	$NIMLIB/posix/posix_macos_amd64.nim	/^  SocketHandle* = distinct cint # The type used to represent socket descriptors$/;"	t
SocketHandle	$NIMLIB/posix/posix_nintendoswitch.nim	/^  SocketHandle* = distinct cint # The type used to represent socket descriptors$/;"	t
SocketHandle	$NIMLIB/posix/posix_openbsd_amd64.nim	/^  SocketHandle* = distinct cint # The type used to represent socket descriptors$/;"	t
SocketHandle	$NIMLIB/posix/posix_other.nim	/^  SocketHandle* = distinct cint # The type used to represent socket descriptors$/;"	t
SocketHandle	$NIMLIB/windows/winlean.nim	/^  SocketHandle* = distinct int$/;"	t
SocketImpl	$NIMLIB/pure/net.nim	/^  SocketImpl* = object     ## socket type$/;"	t
SomeFloat	$NIMLIB/system/basic_types.nim	/^  SomeFloat* = float|float32|float64$/;"	t
SomeInteger	$NIMLIB/system/basic_types.nim	/^  SomeInteger* = SomeSignedInt|SomeUnsignedInt$/;"	t
SomeLinkedCollection	$NIMLIB/pure/collections/lists.nim	/^  SomeLinkedCollection*[T] = SomeLinkedList[T] | SomeLinkedRing[T]$/;"	t
SomeLinkedList	$NIMLIB/pure/collections/lists.nim	/^  SomeLinkedList*[T] = SinglyLinkedList[T] | DoublyLinkedList[T]$/;"	t
SomeLinkedNode	$NIMLIB/pure/collections/lists.nim	/^  SomeLinkedNode*[T] = SinglyLinkedNode[T] | DoublyLinkedNode[T]$/;"	t
SomeLinkedRing	$NIMLIB/pure/collections/lists.nim	/^  SomeLinkedRing*[T] = SinglyLinkedRing[T] | DoublyLinkedRing[T]$/;"	t
SomeNumber	$NIMLIB/system/basic_types.nim	/^  SomeNumber* = SomeInteger|SomeFloat$/;"	t
SomeOrdinal	$NIMLIB/system/basic_types.nim	/^  SomeOrdinal* = int|int8|int16|int32|int64|bool|enum|uint|uint8|uint16|uint32|uint64$/;"	t
SomeSet	$NIMLIB/pure/collections/sets.nim	/^  SomeSet*[A] = HashSet[A] | OrderedSet[A]$/;"	t
SomeSignedInt	$NIMLIB/system/basic_types.nim	/^  SomeSignedInt* = int|int8|int16|int32|int64$/;"	t
SomeUnsignedInt	$NIMLIB/system/basic_types.nim	/^  SomeUnsignedInt* = uint|uint8|uint16|uint32|uint64$/;"	t
SortOrder	$NIMLIB/pure/algorithm.nim	/^  SortOrder* = enum$/;"	t
SourceLanguage	$NIMLIB/packages/docutils/highlite.nim	/^  SourceLanguage* = enum$/;"	t
Speed	$NIMLIB/posix/termios.nim	/^  Speed* = cuint$/;"	t
SqlLexer	$NIMLIB/pure/parsesql.nim	/^  SqlLexer* = object of BaseLexer ## the parser object.$/;"	t
SqlNode	$NIMLIB/pure/parsesql.nim	/^  SqlNode* = ref SqlNodeObj ## an SQL abstract syntax tree node$/;"	t
SqlNodeKind	$NIMLIB/pure/parsesql.nim	/^  SqlNodeKind* = enum ## kind of SQL abstract syntax tree$/;"	t
SqlNodeObj	$NIMLIB/pure/parsesql.nim	/^  SqlNodeObj* = object      ## an SQL abstract syntax tree node$/;"	t
SqlParseError	$NIMLIB/pure/parsesql.nim	/^  SqlParseError* = object of ValueError ## Invalid SQL encountered$/;"	t
SqlParser	$NIMLIB/pure/parsesql.nim	/^  SqlParser* = object of SqlLexer ## SQL parser object$/;"	t
SslAcceptResult	$NIMLIB/pure/net.nim	/^    SslAcceptResult* = enum$/;"	t
SslCVerifyMode	$NIMLIB/pure/net.nim	/^    SslCVerifyMode* = enum$/;"	t
SslClientGetPskFunc	$NIMLIB/pure/net.nim	/^    SslClientGetPskFunc* = proc(hint: string): tuple[identity: string, psk: string]$/;"	t
SslContext	$NIMLIB/pure/net.nim	/^    SslContext* = ref object$/;"	t
SslCtx	$NIMLIB/wrappers/openssl.nim	/^  SslCtx* = SslPtr$/;"	t
SslError	$NIMLIB/pure/net.nim	/^    SslError* = object of CatchableError$/;"	t
SslHandshakeType	$NIMLIB/pure/net.nim	/^    SslHandshakeType* = enum$/;"	t
SslProtVersion	$NIMLIB/pure/net.nim	/^    SslProtVersion* = enum$/;"	t
SslPtr	$NIMLIB/wrappers/openssl.nim	/^  SslPtr* = ptr SslStruct$/;"	t
SslServerGetPskFunc	$NIMLIB/pure/net.nim	/^    SslServerGetPskFunc* = proc(identity: string): string$/;"	t
StackOverflowDefect	$NIMLIB/system/exceptions.nim	/^  StackOverflowDefect* = object of Defect ## \\$/;"	t
StackOverflowError	$NIMLIB/system/exceptions.nim	/^    StackOverflowError* {.deprecated: "See corresponding Defect".} = StackOverflowDefect$/;"	t
StackTrace	$NIMLIB/system/profiler.nim	/^  StackTrace* = object$/;"	t
StackTraceEntry	$NIMLIB/system.nim	/^  StackTraceEntry* = object ## In debug mode exceptions store the stack trace that led$/;"	t
StackTraceOverrideGetDebuggingInfoProc	$NIMLIB/system/stacktraces.nim	/^    StackTraceOverrideGetDebuggingInfoProc* =$/;"	t
StackTraceOverrideGetProgramCountersProc	$NIMLIB/system/stacktraces.nim	/^    StackTraceOverrideGetProgramCountersProc* = proc (maxLength: cint): seq[cuintptr_t] {.$/;"	t
StackTraceOverrideGetTracebackProc	$NIMLIB/system/stacktraces.nim	/^    StackTraceOverrideGetTracebackProc* = proc (): string {.$/;"	t
StandardFormatSpecifier	$NIMLIB/pure/strformat.nim	/^  StandardFormatSpecifier* = object ## Type that describes "standard format specifiers".$/;"	t
StatHasNanoseconds	$NIMLIB/posix/posix.nim	/^const StatHasNanoseconds* = defined(linux) or defined(freebsd) or$/;"	t
StaticParam	$NIMLIB/pure/typetraits.nim	/^  type StaticParam*[value: static type] = object$/;"	t
Status	$NIMLIB/wrappers/linenoise/linenoise.nim	/^  type Status* = enum$/;"	t
StatusBar	$NIMLIB/js/dom.nim	/^  StatusBar* = LocationBar$/;"	t
Storage	$NIMLIB/js/dom.nim	/^  Storage* {.importc.} = ref object$/;"	t
StorageEvent	$NIMLIB/js/dom.nim	/^  StorageEvent* {.importc.} = ref object of Event ## see `docs<https:\/\/developer.mozilla.org\//;"	t
Stream	$NIMLIB/pure/streams.nim	/^  Stream* = ref StreamObj$/;"	t
StreamObj	$NIMLIB/pure/streams.nim	/^  StreamObj* = object of RootObj$/;"	t
StringStream	$NIMLIB/pure/streams.nim	/^  StringStream* = ref StringStreamObj$/;"	t
StringStreamObj	$NIMLIB/pure/streams.nim	/^  StringStreamObj* = object of StreamObj$/;"	t
StringTableMode	$NIMLIB/pure/strtabs.nim	/^  StringTableMode* = enum ## Describes the tables operation mode.$/;"	t
StringTableObj	$NIMLIB/pure/strtabs.nim	/^  StringTableObj* = object of RootObj$/;"	t
StringTableRef	$NIMLIB/pure/strtabs.nim	/^  StringTableRef* = ref StringTableObj$/;"	t
StudyError	$NIMLIB/impure/nre.nim	/^  StudyError* = ref object of RegexError$/;"	t
Style	$NIMLIB/js/dom.nim	/^  Style* {.importc.} = ref object of RootObj$/;"	t
Style	$NIMLIB/pure/terminal.nim	/^  Style* = enum        ## Different styles for text output.$/;"	t
Suseconds	$NIMLIB/posix/posix_haiku.nim	/^  Suseconds* {.importc: "suseconds_t", header: "<sys\/types.h>".} = int32$/;"	t
Suseconds	$NIMLIB/posix/posix_linux_amd64.nim	/^  Suseconds* {.importc: "suseconds_t", header: "<sys\/types.h>".} = clong$/;"	t
Suseconds	$NIMLIB/posix/posix_macos_amd64.nim	/^  Suseconds* {.importc: "suseconds_t", header: "<sys\/types.h>".} = int32$/;"	t
Suseconds	$NIMLIB/posix/posix_nintendoswitch.nim	/^  Suseconds* {.importc: "suseconds_t", header: "<sys\/types.h>".} = clong$/;"	t
Suseconds	$NIMLIB/posix/posix_openbsd_amd64.nim	/^  Suseconds* {.importc: "suseconds_t", header: "<sys\/types.h>".} = int32$/;"	t
Suseconds	$NIMLIB/posix/posix_other.nim	/^  Suseconds* {.importc: "suseconds_t", header: "<sys\/types.h>".} = int$/;"	t
SwitchToFiber	$NIMLIB/windows/winlean.nim	/^proc SwitchToFiber*(fiber: pointer) {.stdcall, discardable, dynlib: "kernel32", importc.}$/;"	f
SyntaxError	$NIMLIB/impure/nre.nim	/^  SyntaxError* = ref object of RegexError$/;"	t
SysCond	$NIMLIB/std/private/syslocks.nim	/^    SysCond* {.importc: "RTL_CONDITION_VARIABLE", header: "<windows.h>".} = object$/;"	t
SysLock	$NIMLIB/std/private/syslocks.nim	/^      SysLock* = ptr SysLockObj$/;"	t
SysThread	$NIMLIB/std/private/threadtypes.nim	/^    SysThread* = Handle$/;"	t
SystemInfo	$NIMLIB/std/private/win_getsysteminfo.nim	/^  SystemInfo* = object$/;"	t
TAB0	$NIMLIB/posix/termios.nim	/^  TAB0* {.importc, header: "<termios.h>".}: Cflag$/;"	t
TAB1	$NIMLIB/posix/termios.nim	/^  TAB1* {.importc, header: "<termios.h>".}: Cflag$/;"	t
TAB2	$NIMLIB/posix/termios.nim	/^  TAB2* {.importc, header: "<termios.h>".}: Cflag$/;"	t
TAB3	$NIMLIB/posix/termios.nim	/^  TAB3* {.importc, header: "<termios.h>".}: Cflag$/;"	t
TABDLY	$NIMLIB/posix/termios.nim	/^  TABDLY* {.importc, header: "<termios.h>".}: Cflag$/;"	t
TAU	$NIMLIB/pure/math.nim	/^  TAU* = 2.0 * PI                            ## The circle constant TAU (= 2 * PI).$/;"	t
TCIFLUSH	$NIMLIB/posix/termios.nim	/^  TCIFLUSH* {.importc, header: "<termios.h>".}: cint$/;"	t
TCIOFF	$NIMLIB/posix/termios.nim	/^  TCIOFF* {.importc, header: "<termios.h>".}: cint$/;"	t
TCIOFLUSH	$NIMLIB/posix/termios.nim	/^  TCIOFLUSH* {.importc, header: "<termios.h>".}: cint$/;"	t
TCION	$NIMLIB/posix/termios.nim	/^  TCION* {.importc, header: "<termios.h>".}: cint$/;"	t
TCOFLUSH	$NIMLIB/posix/termios.nim	/^  TCOFLUSH* {.importc, header: "<termios.h>".}: cint$/;"	t
TCOOFF	$NIMLIB/posix/termios.nim	/^  TCOOFF* {.importc, header: "<termios.h>".}: cint$/;"	t
TCOON	$NIMLIB/posix/termios.nim	/^  TCOON* {.importc, header: "<termios.h>".}: cint$/;"	t
TCP_KEEPALIVE	$NIMLIB/posix/posix_freertos_consts.nim	/^const TCP_KEEPALIVE*  = 0x02    # send KEEPALIVE probes when idle for pcb->keep_idle millisecond/;"	t
TCP_KEEPCNT	$NIMLIB/posix/posix_freertos_consts.nim	/^const TCP_KEEPCNT*    = 0x05    # set pcb->keep_cnt   - Use number of probes sent for get\/setso/;"	t
TCP_KEEPIDLE	$NIMLIB/posix/posix_freertos_consts.nim	/^const TCP_KEEPIDLE*   = 0x03    # set pcb->keep_idle  - Same as TCP_KEEPALIVE, but use seconds f/;"	t
TCP_KEEPINTVL	$NIMLIB/posix/posix_freertos_consts.nim	/^const TCP_KEEPINTVL*  = 0x04    # set pcb->keep_intvl - Use seconds for get\/setsockopt$/;"	t
TCP_NODELAY	$NIMLIB/posix/posix_freertos_consts.nim	/^const TCP_NODELAY*    = 0x01    # don't delay send to coalesce packets$/;"	t
TCP_NODELAY	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const TCP_NODELAY* = cint(1)$/;"	t
TCP_NODELAY	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const TCP_NODELAY* = cint(1)$/;"	t
TCP_NODELAY	$NIMLIB/posix/posix_other_consts.nim	/^var TCP_NODELAY* {.importc: "TCP_NODELAY", header: "<netinet\/tcp.h>".}: cint$/;"	t
TCP_NODELAY	$NIMLIB/windows/winlean.nim	/^  TCP_NODELAY* {.importc, header: "winsock2.h".}: cint$/;"	t
TCSADRAIN	$NIMLIB/posix/termios.nim	/^  TCSADRAIN* {.importc, header: "<termios.h>".}: cint$/;"	t
TCSAFLUSH	$NIMLIB/posix/termios.nim	/^  TCSAFLUSH* {.importc, header: "<termios.h>".}: cint$/;"	t
TCSANOW	$NIMLIB/posix/termios.nim	/^  TCSANOW* {.importc, header: "<termios.h>".}: cint$/;"	t
TFdSet	$NIMLIB/windows/winlean.nim	/^  TFdSet* = object$/;"	t
TFrame	$NIMLIB/system.nim	/^  TFrame* {.importc, nodecl, final.} = object ## The frame itself.$/;"	t
THOUSEP	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const THOUSEP* = cint(65537)$/;"	t
THOUSEP	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const THOUSEP* = cint(51)$/;"	t
THOUSEP	$NIMLIB/posix/posix_other_consts.nim	/^var THOUSEP* {.importc: "THOUSEP", header: "<langinfo.h>".}: cint$/;"	t
TIMER_ABSTIME	$NIMLIB/posix/posix_freertos_consts.nim	/^var TIMER_ABSTIME* {.importc: "TIMER_ABSTIME", header: "<time.h>".}: cint$/;"	t
TIMER_ABSTIME	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const TIMER_ABSTIME* = cint(1)$/;"	t
TIMER_ABSTIME	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const TIMER_ABSTIME* = cint(4)$/;"	t
TIMER_ABSTIME	$NIMLIB/posix/posix_other_consts.nim	/^var TIMER_ABSTIME* {.importc: "TIMER_ABSTIME", header: "<time.h>".}: cint$/;"	t
TIOCGWINSZ	$NIMLIB/posix/termios.nim	/^  var TIOCGWINSZ*{.importc, header: "<sys\/termios.h>".}: culong$/;"	t
TLSEXT_NAMETYPE_host_name	$NIMLIB/wrappers/openssl.nim	/^  TLSEXT_NAMETYPE_host_name* = 0$/;"	t
TLS_client_method	$NIMLIB/wrappers/openssl.nim	/^  proc TLS_client_method*(): PSSL_METHOD =$/;"	t
TLS_method	$NIMLIB/wrappers/openssl.nim	/^  proc TLS_method*(): PSSL_METHOD =$/;"	t
TLS_server_method	$NIMLIB/wrappers/openssl.nim	/^  proc TLS_server_method*(): PSSL_METHOD =$/;"	t
TLSv1_method	$NIMLIB/wrappers/openssl.nim	/^proc TLSv1_method*(): PSSL_METHOD{.cdecl, dynlib: DLLSSLName, importc.}$/;"	f
TLineInfo	$NIMLIB/packages/docutils/rstast.nim	/^  TLineInfo* = object$/;"	t
TNimSymKinds	$NIMLIB/core/macros.nim	/^  TNimSymKinds* {.deprecated.} = set[NimSymKind]$/;"	t
TNimTypeKinds	$NIMLIB/core/macros.nim	/^  TNimTypeKinds* {.deprecated.} = set[NimTypeKind]$/;"	t
TOSTOP	$NIMLIB/posix/termios.nim	/^  TOSTOP* {.importc, header: "<termios.h>".}: Cflag$/;"	t
TRY_AGAIN	$NIMLIB/posix/posix_freertos_consts.nim	/^var TRY_AGAIN* {.importc: "TRY_AGAIN", header: "<netdb.h>".}: cint$/;"	t
TRY_AGAIN	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const TRY_AGAIN* = cint(2)$/;"	t
TRY_AGAIN	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const TRY_AGAIN* = cint(2)$/;"	t
TRY_AGAIN	$NIMLIB/posix/posix_other_consts.nim	/^var TRY_AGAIN* {.importc: "TRY_AGAIN", header: "<netdb.h>".}: cint$/;"	t
TSa_Family	$NIMLIB/posix/posix_haiku.nim	/^  TSa_Family* {.importc: "sa_family_t", header: "<sys\/socket.h>".} = uint8$/;"	t
TSa_Family	$NIMLIB/posix/posix_linux_amd64.nim	/^  TSa_Family* {.importc: "sa_family_t", header: "<sys\/socket.h>".} = cushort$/;"	t
TSa_Family	$NIMLIB/posix/posix_macos_amd64.nim	/^  TSa_Family* {.importc: "sa_family_t", header: "<sys\/socket.h>".} = uint8$/;"	t
TSa_Family	$NIMLIB/posix/posix_nintendoswitch.nim	/^  TSa_Family* {.importc: "sa_family_t", header: "<sys\/socket.h>".} = cshort$/;"	t
TSa_Family	$NIMLIB/posix/posix_openbsd_amd64.nim	/^  TSa_Family* {.importc: "sa_family_t", header: "<sys\/socket.h>".} = uint8$/;"	t
TSa_Family	$NIMLIB/posix/posix_other.nim	/^  TSa_Family* {.importc: "sa_family_t", header: "<sys\/socket.h>".} = cushort$/;"	t
TWSABuf	$NIMLIB/windows/winlean.nim	/^  TWSABuf* {.importc: "WSABUF", header: "winsock2.h".} = object$/;"	t
T_FMT	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const T_FMT* = cint(131114)$/;"	t
T_FMT	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const T_FMT* = cint(3)$/;"	t
T_FMT	$NIMLIB/posix/posix_other_consts.nim	/^var T_FMT* {.importc: "T_FMT", header: "<langinfo.h>".}: cint$/;"	t
T_FMT_AMPM	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const T_FMT_AMPM* = cint(131115)$/;"	t
T_FMT_AMPM	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const T_FMT_AMPM* = cint(4)$/;"	t
T_FMT_AMPM	$NIMLIB/posix/posix_other_consts.nim	/^var T_FMT_AMPM* {.importc: "T_FMT_AMPM", header: "<langinfo.h>".}: cint$/;"	t
Table	$NIMLIB/pure/collections/tables.nim	/^  Table*[A, B] = object$/;"	t
TableRef	$NIMLIB/pure/collections/tables.nim	/^  TableRef*[A, B] = ref Table[A, B] ## Ref version of `Table<#Table>`_.$/;"	t
TaintedString	$NIMLIB/system.nim	/^  type TaintedString* {.deprecated: "Deprecated since 1.5".} = string$/;"	t
Task	$NIMLIB/std/tasks.nim	/^  Task* = object ## `Task` contains the callback and its arguments.$/;"	t
TerminalCmd	$NIMLIB/pure/terminal.nim	/^  TerminalCmd* = enum ## commands that can be expressed as arguments$/;"	t
Termios	$NIMLIB/posix/termios.nim	/^    Termios* {.importc: "struct termios", header: "<termios.h>".} = object$/;"	t
TestResult	$NIMLIB/pure/unittest.nim	/^  TestResult* = object$/;"	t
TestStatus	$NIMLIB/pure/unittest.nim	/^  TestStatus* = enum ## The status of a test when it is done.$/;"	t
TextAreaElement	$NIMLIB/js/dom.nim	/^  TextAreaElement* {.importc.} = ref object of Element ## see `docs<https:\/\/developer.mozilla./;"	t
Tfenv	$NIMLIB/pure/fenv.nim	/^  Tfenv* {.importc: "fenv_t", header: "<fenv.h>", final, pure.} =$/;"	t
Tfexcept	$NIMLIB/pure/fenv.nim	/^  Tfexcept* {.importc: "fexcept_t", header: "<fenv.h>", final, pure.} =$/;"	t
Thread	$NIMLIB/std/private/threadtypes.nim	/^  Thread*[TArg] = object$/;"	t
ThreadId	$NIMLIB/pure/concurrency/threadpool.nim	/^  ThreadId* = range[0..MaxDistinguishedThread-1] ## A thread identifier.$/;"	t
ThreadLocalStorage	$NIMLIB/std/private/threadtypes.nim	/^  ThreadLocalStorage* = array[0..(nimTlsSize div sizeof(float)), float]$/;"	t
ThreadPoolAdvice	$NIMLIB/pure/concurrency/cpuload.nim	/^  ThreadPoolAdvice* = enum$/;"	t
ThreadPoolState	$NIMLIB/pure/concurrency/cpuload.nim	/^  ThreadPoolState* = object$/;"	t
Time	$NIMLIB/posix/posix_haiku.nim	/^  Time* {.importc: "time_t", header: "<time.h>".} = distinct ($/;"	t
Time	$NIMLIB/posix/posix_linux_amd64.nim	/^  Time* {.importc: "time_t", header: "<time.h>".} = distinct clong$/;"	t
Time	$NIMLIB/posix/posix_macos_amd64.nim	/^  Time* {.importc: "time_t", header: "<time.h>".} = distinct clong$/;"	t
Time	$NIMLIB/posix/posix_nintendoswitch.nim	/^  Time* {.importc: "time_t", header: "<time.h>".} = distinct clong$/;"	t
Time	$NIMLIB/posix/posix_openbsd_amd64.nim	/^  Time* {.importc: "time_t", header: "<time.h>".} = distinct clonglong$/;"	t
Time	$NIMLIB/posix/posix_other.nim	/^  Time* {.importc: "time_t", header: "<time.h>".} = distinct ($/;"	t
Time	$NIMLIB/pure/times.nim	/^  Time* = object ## Represents a point in time.$/;"	t
Time	$NIMLIB/std/time_t.nim	/^    type Time* {.importc: "time_t", header: "<time.h>".} = distinct int64$/;"	t
TimeEffect	$NIMLIB/system/exceptions.nim	/^  TimeEffect* = object of RootEffect   ## Time effect.$/;"	t
TimeFormat	$NIMLIB/pure/times.nim	/^  TimeFormat* = object  ## Represents a format for parsing and printing$/;"	t
TimeFormatParseError	$NIMLIB/pure/times.nim	/^  TimeFormatParseError* = object of ValueError ## \\$/;"	t
TimeInterval	$NIMLIB/pure/times.nim	/^  TimeInterval* = object ## \\$/;"	t
TimeIntervalParts	$NIMLIB/pure/times.nim	/^  TimeIntervalParts* = array[TimeUnit, int] # Array of Duration parts starts$/;"	t
TimeOut	$NIMLIB/js/dom.nim	/^  TimeOut* {.importc.} = ref object of RootObj$/;"	t
TimeParseError	$NIMLIB/pure/times.nim	/^  TimeParseError* = object of ValueError ## \\$/;"	t
TimeUnit	$NIMLIB/pure/times.nim	/^  TimeUnit* = enum ## Different units of time.$/;"	t
TimeoutError	$NIMLIB/pure/net.nim	/^  TimeoutError* = object of CatchableError$/;"	t
Timer	$NIMLIB/posix/posix_haiku.nim	/^  Timer* {.importc: "timer_t", header: "<sys\/types.h>".} = object$/;"	t
Timer	$NIMLIB/posix/posix_linux_amd64.nim	/^  Timer* {.importc: "timer_t", header: "<sys\/types.h>".} = pointer$/;"	t
Timer	$NIMLIB/posix/posix_macos_amd64.nim	/^  Timer* {.importc: "timer_t", header: "<sys\/types.h>".} = int$/;"	t
Timer	$NIMLIB/posix/posix_nintendoswitch.nim	/^  Timer* {.importc: "timer_t", header: "<sys\/types.h>".} = pointer$/;"	t
Timer	$NIMLIB/posix/posix_openbsd_amd64.nim	/^  Timer* {.importc: "timer_t", header: "<sys\/types.h>".} = int$/;"	t
Timer	$NIMLIB/posix/posix_other.nim	/^  Timer* {.importc: "timer_t", header: "<sys\/types.h>".} = int$/;"	t
Timespec	$NIMLIB/std/private/threadtypes.nim	/^    Timespec* {.importc: "struct timespec", header: "<time.h>".} = object$/;"	t
Timeval	$NIMLIB/windows/winlean.nim	/^    Timeval* {.importc: "timeval", header: "<time.h>".} = object$/;"	t
Timezone	$NIMLIB/pure/times.nim	/^  Timezone* = ref object ## \\$/;"	t
Tnfds	$NIMLIB/posix/posix_haiku.nim	/^  Tnfds* {.importc: "nfds_t", header: "<poll.h>".} = culong$/;"	t
Tnfds	$NIMLIB/posix/posix_linux_amd64.nim	/^  Tnfds* {.importc: "nfds_t", header: "<poll.h>".} = culong$/;"	t
Tnfds	$NIMLIB/posix/posix_macos_amd64.nim	/^  Tnfds* {.importc: "nfds_t", header: "<poll.h>".} = cint$/;"	t
Tnfds	$NIMLIB/posix/posix_nintendoswitch.nim	/^  Tnfds* {.importc: "nfds_t", header: "<poll.h>".} = culong$/;"	t
Tnfds	$NIMLIB/posix/posix_openbsd_amd64.nim	/^  Tnfds* {.importc: "nfds_t", header: "<poll.h>".} = cint$/;"	t
Tnfds	$NIMLIB/posix/posix_other.nim	/^      Tnfds* {.importc: "nfds_t", header: "<poll.h>".} = cint$/;"	t
ToJsonOptions	$NIMLIB/std/jsonutils.nim	/^  ToJsonOptions* = object$/;"	t
TokKind	$NIMLIB/pure/parsejson.nim	/^  TokKind* = enum # must be synchronized with TJsonEventKind!$/;"	t
TokenClass	$NIMLIB/packages/docutils/highlite.nim	/^  TokenClass* = enum$/;"	t
ToolBar	$NIMLIB/js/dom.nim	/^  ToolBar* = LocationBar$/;"	t
Touch	$NIMLIB/js/dom.nim	/^  Touch* {.importc.} = ref object of RootObj$/;"	t
TouchEvent	$NIMLIB/js/dom.nim	/^  TouchEvent* {.importc.} = ref object of UIEvent$/;"	t
TouchList	$NIMLIB/js/dom.nim	/^  TouchList* {.importc.} = ref object of RootObj$/;"	t
Trace_attr	$NIMLIB/posix/posix_macos_amd64.nim	/^  Trace_attr* {.importc: "trace_attr_t", header: "<sys\/types.h>".} = int$/;"	t
Trace_attr	$NIMLIB/posix/posix_openbsd_amd64.nim	/^  Trace_attr* {.importc: "trace_attr_t", header: "<sys\/types.h>".} = int$/;"	t
Trace_attr	$NIMLIB/posix/posix_other.nim	/^  Trace_attr* {.importc: "trace_attr_t", header: "<sys\/types.h>".} = int$/;"	t
Trace_id	$NIMLIB/posix/posix_macos_amd64.nim	/^  Trace_id* {.importc: "trace_id_t", header: "<sys\/types.h>".} = int$/;"	t
Trace_id	$NIMLIB/posix/posix_openbsd_amd64.nim	/^  Trace_id* {.importc: "trace_id_t", header: "<sys\/types.h>".} = int$/;"	t
Trace_id	$NIMLIB/posix/posix_other.nim	/^  Trace_id* {.importc: "trace_id_t", header: "<sys\/types.h>".} = int$/;"	t
TrackLog	$NIMLIB/system/memtracker.nim	/^  TrackLog* = object$/;"	t
TrackLogger	$NIMLIB/system/memtracker.nim	/^  TrackLogger* = proc (log: TrackLog) {.nimcall, tags: [], gcsafe.}$/;"	t
TypeOfMode	$NIMLIB/system.nim	/^  TypeOfMode* = enum ## Possible modes of `typeof`.$/;"	t
UCP	$NIMLIB/wrappers/pcre.nim	/^  UCP*               = 0x20000000  # C3$/;"	t
UIEvent	$NIMLIB/js/dom.nim	/^  UIEvent* {.importc.} = ref object of Event ## see `docs<https:\/\/developer.mozilla.org\/en-US/;"	t
ULONG	$NIMLIB/windows/winlean.nim	/^  ULONG* = int32$/;"	t
ULONG_PTR	$NIMLIB/windows/winlean.nim	/^  ULONG_PTR* = uint$/;"	t
UNGREEDY	$NIMLIB/wrappers/pcre.nim	/^  UNGREEDY*          = 0x00000200  # C1$/;"	t
UTC	$NIMLIB/js/jscore.nim	/^proc UTC*(d: DateLib): int {.importcpp.}$/;"	f
UTF16	$NIMLIB/wrappers/pcre.nim	/^  UTF16*             = 0x00000800  # C4        ) Synonyms$/;"	t
UTF16_ERR0	$NIMLIB/wrappers/pcre.nim	/^  UTF16_ERR0* = 0$/;"	t
UTF16_ERR1	$NIMLIB/wrappers/pcre.nim	/^  UTF16_ERR1* = 1$/;"	t
UTF16_ERR2	$NIMLIB/wrappers/pcre.nim	/^  UTF16_ERR2* = 2$/;"	t
UTF16_ERR3	$NIMLIB/wrappers/pcre.nim	/^  UTF16_ERR3* = 3$/;"	t
UTF16_ERR4	$NIMLIB/wrappers/pcre.nim	/^  UTF16_ERR4* = 4 # Unused (was non-character)$/;"	t
UTF32	$NIMLIB/wrappers/pcre.nim	/^  UTF32*             = 0x00000800  # C4        )$/;"	t
UTF32_ERR0	$NIMLIB/wrappers/pcre.nim	/^  UTF32_ERR0* = 0$/;"	t
UTF32_ERR1	$NIMLIB/wrappers/pcre.nim	/^  UTF32_ERR1* = 1$/;"	t
UTF32_ERR2	$NIMLIB/wrappers/pcre.nim	/^  UTF32_ERR2* = 2 # Unused (was non-character)$/;"	t
UTF32_ERR3	$NIMLIB/wrappers/pcre.nim	/^  UTF32_ERR3* = 3$/;"	t
UTF8	$NIMLIB/wrappers/pcre.nim	/^  UTF8*              = 0x00000800  # C4        )$/;"	t
UTF8_ERR0	$NIMLIB/wrappers/pcre.nim	/^  UTF8_ERR0*  =  0$/;"	t
UTF8_ERR1	$NIMLIB/wrappers/pcre.nim	/^  UTF8_ERR1*  =  1$/;"	t
UTF8_ERR10	$NIMLIB/wrappers/pcre.nim	/^  UTF8_ERR10* = 10$/;"	t
UTF8_ERR11	$NIMLIB/wrappers/pcre.nim	/^  UTF8_ERR11* = 11$/;"	t
UTF8_ERR12	$NIMLIB/wrappers/pcre.nim	/^  UTF8_ERR12* = 12$/;"	t
UTF8_ERR13	$NIMLIB/wrappers/pcre.nim	/^  UTF8_ERR13* = 13$/;"	t
UTF8_ERR14	$NIMLIB/wrappers/pcre.nim	/^  UTF8_ERR14* = 14$/;"	t
UTF8_ERR15	$NIMLIB/wrappers/pcre.nim	/^  UTF8_ERR15* = 15$/;"	t
UTF8_ERR16	$NIMLIB/wrappers/pcre.nim	/^  UTF8_ERR16* = 16$/;"	t
UTF8_ERR17	$NIMLIB/wrappers/pcre.nim	/^  UTF8_ERR17* = 17$/;"	t
UTF8_ERR18	$NIMLIB/wrappers/pcre.nim	/^  UTF8_ERR18* = 18$/;"	t
UTF8_ERR19	$NIMLIB/wrappers/pcre.nim	/^  UTF8_ERR19* = 19$/;"	t
UTF8_ERR2	$NIMLIB/wrappers/pcre.nim	/^  UTF8_ERR2*  =  2$/;"	t
UTF8_ERR20	$NIMLIB/wrappers/pcre.nim	/^  UTF8_ERR20* = 20$/;"	t
UTF8_ERR21	$NIMLIB/wrappers/pcre.nim	/^  UTF8_ERR21* = 21$/;"	t
UTF8_ERR22	$NIMLIB/wrappers/pcre.nim	/^  UTF8_ERR22* = 22 # Unused (was non-character)$/;"	t
UTF8_ERR3	$NIMLIB/wrappers/pcre.nim	/^  UTF8_ERR3*  =  3$/;"	t
UTF8_ERR4	$NIMLIB/wrappers/pcre.nim	/^  UTF8_ERR4*  =  4$/;"	t
UTF8_ERR5	$NIMLIB/wrappers/pcre.nim	/^  UTF8_ERR5*  =  5$/;"	t
UTF8_ERR6	$NIMLIB/wrappers/pcre.nim	/^  UTF8_ERR6*  =  6$/;"	t
UTF8_ERR7	$NIMLIB/wrappers/pcre.nim	/^  UTF8_ERR7*  =  7$/;"	t
UTF8_ERR8	$NIMLIB/wrappers/pcre.nim	/^  UTF8_ERR8*  =  8$/;"	t
UTF8_ERR9	$NIMLIB/wrappers/pcre.nim	/^  UTF8_ERR9*  =  9$/;"	t
Uid	$NIMLIB/posix/posix_haiku.nim	/^  Uid* {.importc: "uid_t", header: "<sys\/types.h>".} = uint32$/;"	t
Uid	$NIMLIB/posix/posix_linux_amd64.nim	/^  Uid* {.importc: "uid_t", header: "<sys\/types.h>".} = cuint$/;"	t
Uid	$NIMLIB/posix/posix_macos_amd64.nim	/^  Uid* {.importc: "uid_t", header: "<sys\/types.h>".} = int32$/;"	t
Uid	$NIMLIB/posix/posix_nintendoswitch.nim	/^  Uid* {.importc: "uid_t", header: "<sys\/types.h>".} = cuint$/;"	t
Uid	$NIMLIB/posix/posix_openbsd_amd64.nim	/^  Uid* {.importc: "uid_t", header: "<sys\/types.h>".} = int32$/;"	t
Uid	$NIMLIB/posix/posix_other.nim	/^  Uid* {.importc: "uid_t", header: "<sys\/types.h>".} = int$/;"	t
Uint32Array	$NIMLIB/std/private/jsutils.nim	/^    Uint32Array* = ref object of JsRoot$/;"	t
Uint8Array	$NIMLIB/std/private/jsutils.nim	/^    Uint8Array* = ref object of JsRoot$/;"	t
Uname	$NIMLIB/posix/posix_utils.nim	/^type Uname* = object$/;"	t
UnpackDefect	$NIMLIB/pure/options.nim	/^  UnpackDefect* = object of Defect$/;"	t
UnpackError	$NIMLIB/pure/options.nim	/^  UnpackError* {.deprecated: "See corresponding Defect".} = UnpackDefect$/;"	t
UppercaseLetters	$NIMLIB/pure/strutils.nim	/^  UppercaseLetters* = {'A'..'Z'}$/;"	t
Uri	$NIMLIB/pure/uri.nim	/^  Uri* = object$/;"	t
UriParseError	$NIMLIB/pure/uri.nim	/^  UriParseError* = object of ValueError$/;"	t
Url	$NIMLIB/pure/uri.nim	/^  Url* = distinct string$/;"	t
Useconds	$NIMLIB/posix/posix_haiku.nim	/^  Useconds* {.importc: "useconds_t", header: "<sys\/types.h>".} = uint32$/;"	t
Useconds	$NIMLIB/posix/posix_linux_amd64.nim	/^  Useconds* {.importc: "useconds_t", header: "<sys\/types.h>".} = cuint$/;"	t
Useconds	$NIMLIB/posix/posix_macos_amd64.nim	/^  Useconds* {.importc: "useconds_t", header: "<sys\/types.h>".} = int$/;"	t
Useconds	$NIMLIB/posix/posix_nintendoswitch.nim	/^  Useconds* {.importc: "useconds_t", header: "<sys\/types.h>".} = cuint$/;"	t
Useconds	$NIMLIB/posix/posix_openbsd_amd64.nim	/^  Useconds* {.importc: "useconds_t", header: "<sys\/types.h>".} = int$/;"	t
Useconds	$NIMLIB/posix/posix_other.nim	/^  Useconds* {.importc: "useconds_t", header: "<sys\/types.h>".} = int$/;"	t
Utf16Char	$NIMLIB/std/widestrs.nim	/^  Utf16Char* = distinct int16$/;"	t
VEOF	$NIMLIB/posix/termios.nim	/^  VEOF* {.importc, header: "<termios.h>".}: cint$/;"	t
VEOL	$NIMLIB/posix/termios.nim	/^  VEOL* {.importc, header: "<termios.h>".}: cint$/;"	t
VERASE	$NIMLIB/posix/termios.nim	/^  VERASE* {.importc, header: "<termios.h>".}: cint$/;"	t
VINTR	$NIMLIB/posix/termios.nim	/^  VINTR* {.importc, header: "<termios.h>".}: cint$/;"	t
VKILL	$NIMLIB/posix/termios.nim	/^  VKILL* {.importc, header: "<termios.h>".}: cint$/;"	t
VMIN	$NIMLIB/posix/termios.nim	/^  VMIN* {.importc, header: "<termios.h>".}: cint$/;"	t
VQUIT	$NIMLIB/posix/termios.nim	/^  VQUIT* {.importc, header: "<termios.h>".}: cint$/;"	t
VSTART	$NIMLIB/posix/termios.nim	/^  VSTART* {.importc, header: "<termios.h>".}: cint$/;"	t
VSTOP	$NIMLIB/posix/termios.nim	/^  VSTOP* {.importc, header: "<termios.h>".}: cint$/;"	t
VSUSP	$NIMLIB/posix/termios.nim	/^  VSUSP* {.importc, header: "<termios.h>".}: cint$/;"	t
VT0	$NIMLIB/posix/termios.nim	/^  VT0* {.importc, header: "<termios.h>".}: Cflag$/;"	t
VT1	$NIMLIB/posix/termios.nim	/^  VT1* {.importc, header: "<termios.h>".}: Cflag$/;"	t
VTDLY	$NIMLIB/posix/termios.nim	/^  VTDLY* {.importc, header: "<termios.h>".}: Cflag$/;"	t
VTIME	$NIMLIB/posix/termios.nim	/^  VTIME* {.importc, header: "<termios.h>".}: cint$/;"	t
ValidityState	$NIMLIB/js/dom.nim	/^  ValidityState* {.importc.} = ref object ## see `docs<https:\/\/developer.mozilla.org\/en-US\/d/;"	t
ValueError	$NIMLIB/system/exceptions.nim	/^  ValueError* = object of CatchableError ## \\$/;"	t
ValueType	$NIMLIB/std/private/dragonbox.nim	/^  ValueType* = float$/;"	t
WAITORTIMERCALLBACK	$NIMLIB/windows/winlean.nim	/^  WAITORTIMERCALLBACK* = proc(para1: pointer, para2: int32) {.stdcall.}$/;"	t
WAIT_FAILED	$NIMLIB/windows/winlean.nim	/^  WAIT_FAILED* = 0xFFFFFFFF'i32$/;"	t
WAIT_OBJECT_0	$NIMLIB/windows/winlean.nim	/^  WAIT_OBJECT_0* = 0'i32$/;"	t
WAIT_TIMEOUT	$NIMLIB/windows/winlean.nim	/^  WAIT_TIMEOUT* = 0x00000102'i32$/;"	t
WCONTINUED	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const WCONTINUED* = cint(8)$/;"	t
WCONTINUED	$NIMLIB/posix/posix_other_consts.nim	/^var WCONTINUED* {.importc: "WCONTINUED", header: "<sys\/wait.h>".}: cint$/;"	t
WEXITED	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const WEXITED* = cint(4)$/;"	t
WEXITED	$NIMLIB/posix/posix_other_consts.nim	/^var WEXITED* {.importc: "WEXITED", header: "<sys\/wait.h>".}: cint$/;"	t
WEXITSTATUS	$NIMLIB/posix/posix_haiku.nim	/^proc WEXITSTATUS*(s: cint): cint {.importc, header: "<sys\/wait.h>".}$/;"	f
WEXITSTATUS	$NIMLIB/posix/posix_linux_amd64.nim	/^proc WEXITSTATUS*(s: cint): cint =  (s and 0xff00) shr 8$/;"	t
WEXITSTATUS	$NIMLIB/posix/posix_macos_amd64.nim	/^proc WEXITSTATUS*(s: cint): cint {.importc, header: "<sys\/wait.h>".}$/;"	f
WEXITSTATUS	$NIMLIB/posix/posix_nintendoswitch.nim	/^proc WEXITSTATUS*(s: cint): cint =  (s shr 8) and 0xff$/;"	t
WEXITSTATUS	$NIMLIB/posix/posix_openbsd_amd64.nim	/^proc WEXITSTATUS*(s: cint): cint {.importc, header: "<sys\/wait.h>".}$/;"	f
WEXITSTATUS	$NIMLIB/posix/posix_other.nim	/^proc WEXITSTATUS*(s: cint): cint {.importc, header: "<sys\/wait.h>".}$/;"	f
WIFCONTINUED	$NIMLIB/posix/posix_haiku.nim	/^proc WIFCONTINUED*(s: cint): bool {.importc, header: "<sys\/wait.h>".}$/;"	f
WIFCONTINUED	$NIMLIB/posix/posix_linux_amd64.nim	/^proc WIFCONTINUED*(s:cint) : bool = s == WCONTINUED$/;"	t
WIFCONTINUED	$NIMLIB/posix/posix_macos_amd64.nim	/^proc WIFCONTINUED*(s: cint): bool {.importc, header: "<sys\/wait.h>".}$/;"	f
WIFCONTINUED	$NIMLIB/posix/posix_openbsd_amd64.nim	/^proc WIFCONTINUED*(s: cint): bool {.importc, header: "<sys\/wait.h>".}$/;"	f
WIFCONTINUED	$NIMLIB/posix/posix_other.nim	/^proc WIFCONTINUED*(s: cint): bool {.importc, header: "<sys\/wait.h>".}$/;"	f
WIFEXITED	$NIMLIB/posix/posix_haiku.nim	/^proc WIFEXITED*(s: cint): bool {.importc, header: "<sys\/wait.h>".}$/;"	f
WIFEXITED	$NIMLIB/posix/posix_linux_amd64.nim	/^proc WIFEXITED*(s:cint) : bool = WTERMSIG(s) == 0$/;"	t
WIFEXITED	$NIMLIB/posix/posix_macos_amd64.nim	/^proc WIFEXITED*(s: cint): bool {.importc, header: "<sys\/wait.h>".}$/;"	f
WIFEXITED	$NIMLIB/posix/posix_nintendoswitch.nim	/^proc WIFEXITED*(s:cint) : bool = (s and 0xff) == 0$/;"	t
WIFEXITED	$NIMLIB/posix/posix_openbsd_amd64.nim	/^proc WIFEXITED*(s: cint): bool {.importc, header: "<sys\/wait.h>".}$/;"	f
WIFEXITED	$NIMLIB/posix/posix_other.nim	/^proc WIFEXITED*(s: cint): bool {.importc, header: "<sys\/wait.h>".}$/;"	f
WIFSIGNALED	$NIMLIB/posix/posix_haiku.nim	/^proc WIFSIGNALED*(s: cint): bool {.importc, header: "<sys\/wait.h>".}$/;"	f
WIFSIGNALED	$NIMLIB/posix/posix_linux_amd64.nim	/^proc WIFSIGNALED*(s:cint) : bool = (cast[int8]((s and 0x7f) + 1) shr 1) > 0$/;"	t
WIFSIGNALED	$NIMLIB/posix/posix_macos_amd64.nim	/^proc WIFSIGNALED*(s: cint): bool {.importc, header: "<sys\/wait.h>".}$/;"	f
WIFSIGNALED	$NIMLIB/posix/posix_nintendoswitch.nim	/^proc WIFSIGNALED*(s:cint) : bool = ((s and 0x7f) > 0) and ((s and 0x7f) < 0x7f)$/;"	t
WIFSIGNALED	$NIMLIB/posix/posix_openbsd_amd64.nim	/^proc WIFSIGNALED*(s: cint): bool {.importc, header: "<sys\/wait.h>".}$/;"	f
WIFSIGNALED	$NIMLIB/posix/posix_other.nim	/^proc WIFSIGNALED*(s: cint): bool {.importc, header: "<sys\/wait.h>".}$/;"	f
WIFSTOPPED	$NIMLIB/posix/posix_haiku.nim	/^proc WIFSTOPPED*(s: cint): bool {.importc, header: "<sys\/wait.h>".}$/;"	f
WIFSTOPPED	$NIMLIB/posix/posix_linux_amd64.nim	/^proc WIFSTOPPED*(s:cint) : bool = (s and 0xff) == 0x7f$/;"	t
WIFSTOPPED	$NIMLIB/posix/posix_macos_amd64.nim	/^proc WIFSTOPPED*(s: cint): bool {.importc, header: "<sys\/wait.h>".}$/;"	f
WIFSTOPPED	$NIMLIB/posix/posix_nintendoswitch.nim	/^proc WIFSTOPPED*(s:cint) : bool = (s and 0xff) == 0x7f$/;"	t
WIFSTOPPED	$NIMLIB/posix/posix_openbsd_amd64.nim	/^proc WIFSTOPPED*(s: cint): bool {.importc, header: "<sys\/wait.h>".}$/;"	f
WIFSTOPPED	$NIMLIB/posix/posix_other.nim	/^proc WIFSTOPPED*(s: cint): bool {.importc, header: "<sys\/wait.h>".}$/;"	f
WIN32_FIND_DATA	$NIMLIB/windows/winlean.nim	/^  WIN32_FIND_DATA* {.pure.} = object$/;"	t
WINBOOL	$NIMLIB/windows/winlean.nim	/^  WINBOOL* = int32$/;"	t
WNOHANG	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const WNOHANG* = cint(1)$/;"	t
WNOHANG	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const WNOHANG* = cint(1)$/;"	t
WNOHANG	$NIMLIB/posix/posix_other_consts.nim	/^var WNOHANG* {.importc: "WNOHANG", header: "<sys\/wait.h>".}: cint$/;"	t
WNOWAIT	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const WNOWAIT* = cint(16777216)$/;"	t
WNOWAIT	$NIMLIB/posix/posix_other_consts.nim	/^var WNOWAIT* {.importc: "WNOWAIT", header: "<sys\/wait.h>".}: cint$/;"	t
WOHandleArray	$NIMLIB/windows/winlean.nim	/^  WOHandleArray* = array[0..MAXIMUM_WAIT_OBJECTS - 1, Handle]$/;"	t
WSADESCRIPTION_LEN	$NIMLIB/windows/winlean.nim	/^  WSADESCRIPTION_LEN* = 256$/;"	t
WSAData	$NIMLIB/windows/winlean.nim	/^  WSAData* {.importc: "WSADATA", header: "winsock2.h".} = object$/;"	t
WSAEADDRINUSE	$NIMLIB/windows/winlean.nim	/^  WSAEADDRINUSE* = 10048$/;"	t
WSAECONNABORTED	$NIMLIB/windows/winlean.nim	/^  WSAECONNABORTED* = 10053$/;"	t
WSAECONNRESET	$NIMLIB/windows/winlean.nim	/^  WSAECONNRESET* = 10054$/;"	t
WSAEDISCON	$NIMLIB/windows/winlean.nim	/^  WSAEDISCON* = 10101$/;"	t
WSAEINPROGRESS	$NIMLIB/windows/winlean.nim	/^  WSAEINPROGRESS* = 10036$/;"	t
WSAEINTR	$NIMLIB/windows/winlean.nim	/^  WSAEINTR* = 10004$/;"	t
WSAENETRESET	$NIMLIB/windows/winlean.nim	/^  WSAENETRESET* = 10052$/;"	t
WSAENOTSOCK	$NIMLIB/windows/winlean.nim	/^  WSAENOTSOCK* = 10038$/;"	t
WSAESHUTDOWN	$NIMLIB/windows/winlean.nim	/^  WSAESHUTDOWN* = 10058$/;"	t
WSAETIMEDOUT	$NIMLIB/windows/winlean.nim	/^  WSAETIMEDOUT* = 10060$/;"	t
WSAEWOULDBLOCK	$NIMLIB/windows/winlean.nim	/^  WSAEWOULDBLOCK* = 10035$/;"	t
WSAID_ACCEPTEX	$NIMLIB/windows/winlean.nim	/^  WSAID_ACCEPTEX*: GUID = GUID(D1: 0xb5367df1'i32, D2: 0xcbac'i16, D3: 0x11cf, D4: [$/;"	t
WSAID_CONNECTEX	$NIMLIB/windows/winlean.nim	/^  WSAID_CONNECTEX*: GUID = GUID(D1: 0x25a207b9, D2: 0xddf3'i16, D3: 0x4660, D4: [$/;"	t
WSAID_GETACCEPTEXSOCKADDRS	$NIMLIB/windows/winlean.nim	/^  WSAID_GETACCEPTEXSOCKADDRS*: GUID = GUID(D1: 0xb5367df2'i32, D2: 0xcbac'i16, D3: 0x11cf, D4: [$/;"	t
WSAIORW	$NIMLIB/windows/winlean.nim	/^template WSAIORW*(x,y): untyped = (IOC_INOUT or x or y)$/;"	t
WSAIoctl	$NIMLIB/windows/winlean.nim	/^proc WSAIoctl*(s: SocketHandle, dwIoControlCode: DWORD, lpvInBuffer: pointer,$/;"	f
WSANOTINITIALISED	$NIMLIB/windows/winlean.nim	/^  WSANOTINITIALISED* = 10093$/;"	t
WSAPROC_ACCEPTEX	$NIMLIB/windows/winlean.nim	/^  WSAPROC_ACCEPTEX* = proc (sListenSocket: SocketHandle,$/;"	t
WSAPROC_CONNECTEX	$NIMLIB/windows/winlean.nim	/^  WSAPROC_CONNECTEX* = proc (s: SocketHandle, name: ptr SockAddr, namelen: cint,$/;"	t
WSAPROC_GETACCEPTEXSOCKADDRS	$NIMLIB/windows/winlean.nim	/^  WSAPROC_GETACCEPTEXSOCKADDRS* = proc(lpOutputBuffer: pointer,$/;"	t
WSARecv	$NIMLIB/windows/winlean.nim	/^proc WSARecv*(s: SocketHandle, buf: ptr TWSABuf, bufCount: DWORD,$/;"	f
WSARecvFrom	$NIMLIB/windows/winlean.nim	/^proc WSARecvFrom*(s: SocketHandle, buf: ptr TWSABuf, bufCount: DWORD,$/;"	f
WSASYS_STATUS_LEN	$NIMLIB/windows/winlean.nim	/^  WSASYS_STATUS_LEN* = 128$/;"	t
WSASend	$NIMLIB/windows/winlean.nim	/^proc WSASend*(s: SocketHandle, buf: ptr TWSABuf, bufCount: DWORD,$/;"	f
WSASendTo	$NIMLIB/windows/winlean.nim	/^proc WSASendTo*(s: SocketHandle, buf: ptr TWSABuf, bufCount: DWORD,$/;"	f
WSTOPPED	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const WSTOPPED* = cint(2)$/;"	t
WSTOPPED	$NIMLIB/posix/posix_other_consts.nim	/^var WSTOPPED* {.importc: "WSTOPPED", header: "<sys\/wait.h>".}: cint$/;"	t
WSTOPSIG	$NIMLIB/posix/posix_haiku.nim	/^proc WSTOPSIG*(s: cint): cint {.importc, header: "<sys\/wait.h>".}$/;"	f
WSTOPSIG	$NIMLIB/posix/posix_linux_amd64.nim	/^proc WSTOPSIG*(s:cint): cint = WEXITSTATUS(s)$/;"	t
WSTOPSIG	$NIMLIB/posix/posix_macos_amd64.nim	/^proc WSTOPSIG*(s: cint): cint {.importc, header: "<sys\/wait.h>".}$/;"	f
WSTOPSIG	$NIMLIB/posix/posix_nintendoswitch.nim	/^proc WSTOPSIG*(s:cint): cint = WEXITSTATUS(s)$/;"	t
WSTOPSIG	$NIMLIB/posix/posix_openbsd_amd64.nim	/^proc WSTOPSIG*(s: cint): cint {.importc, header: "<sys\/wait.h>".}$/;"	f
WSTOPSIG	$NIMLIB/posix/posix_other.nim	/^proc WSTOPSIG*(s: cint): cint {.importc, header: "<sys\/wait.h>".}$/;"	f
WTERMSIG	$NIMLIB/posix/posix_haiku.nim	/^proc WTERMSIG*(s: cint): cint {.importc, header: "<sys\/wait.h>".}$/;"	f
WTERMSIG	$NIMLIB/posix/posix_linux_amd64.nim	/^proc WTERMSIG*(s:cint): cint = s and 0x7f$/;"	t
WTERMSIG	$NIMLIB/posix/posix_macos_amd64.nim	/^proc WTERMSIG*(s: cint): cint {.importc, header: "<sys\/wait.h>".}$/;"	f
WTERMSIG	$NIMLIB/posix/posix_nintendoswitch.nim	/^proc WTERMSIG*(s:cint): cint = s and 0x7f$/;"	t
WTERMSIG	$NIMLIB/posix/posix_openbsd_amd64.nim	/^proc WTERMSIG*(s: cint): cint {.importc, header: "<sys\/wait.h>".}$/;"	f
WTERMSIG	$NIMLIB/posix/posix_other.nim	/^proc WTERMSIG*(s: cint): cint {.importc, header: "<sys\/wait.h>".}$/;"	f
WT_EXECUTEDEFAULT	$NIMLIB/windows/winlean.nim	/^  WT_EXECUTEDEFAULT* = 0x00000000'i32$/;"	t
WT_EXECUTEINIOTHREAD	$NIMLIB/windows/winlean.nim	/^  WT_EXECUTEINIOTHREAD* = 0x00000001'i32$/;"	t
WT_EXECUTEINPERSISTENTIOTHREAD	$NIMLIB/windows/winlean.nim	/^  WT_EXECUTEINPERSISTENTIOTHREAD* = 0x00000040'i32$/;"	t
WT_EXECUTEINPERSISTENTTHREAD	$NIMLIB/windows/winlean.nim	/^  WT_EXECUTEINPERSISTENTTHREAD* = 0x00000080'i32$/;"	t
WT_EXECUTEINTIMERTHREAD	$NIMLIB/windows/winlean.nim	/^  WT_EXECUTEINTIMERTHREAD* = 0x00000020'i32$/;"	t
WT_EXECUTEINUITHREAD	$NIMLIB/windows/winlean.nim	/^  WT_EXECUTEINUITHREAD* = 0x00000002'i32$/;"	t
WT_EXECUTEINWAITTHREAD	$NIMLIB/windows/winlean.nim	/^  WT_EXECUTEINWAITTHREAD* = 0x00000004'i32$/;"	t
WT_EXECUTELONGFUNCTION	$NIMLIB/windows/winlean.nim	/^  WT_EXECUTELONGFUNCTION* = 0x00000010'i32$/;"	t
WT_EXECUTEONLYONCE	$NIMLIB/windows/winlean.nim	/^  WT_EXECUTEONLYONCE* = 0x00000008'i32$/;"	t
WT_TRANSFER_IMPERSONATION	$NIMLIB/windows/winlean.nim	/^  WT_TRANSFER_IMPERSONATION* = 0x00000100'i32$/;"	t
WUNTRACED	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const WUNTRACED* = cint(2)$/;"	t
WUNTRACED	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const WUNTRACED* = cint(2)$/;"	t
WUNTRACED	$NIMLIB/posix/posix_other_consts.nim	/^var WUNTRACED* {.importc: "WUNTRACED", header: "<sys\/wait.h>".}: cint$/;"	t
W_OK	$NIMLIB/posix/posix_freertos_consts.nim	/^const W_OK* = cint(2)$/;"	t
W_OK	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const W_OK* = cint(2)$/;"	t
W_OK	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const W_OK* = cint(2)$/;"	t
W_OK	$NIMLIB/posix/posix_other_consts.nim	/^var W_OK* {.importc: "W_OK", header: "<unistd.h>".}: cint$/;"	t
WeekDay	$NIMLIB/pure/times.nim	/^  WeekDay* = enum ## Represents a weekday.$/;"	t
Whitespace	$NIMLIB/pure/strutils.nim	/^  Whitespace* = {' ', '\\t', '\\v', '\\r', '\\l', '\\f'}$/;"	t
WideCString	$NIMLIB/std/widestrs.nim	/^      WideCString* = ref UncheckedArray[Utf16Char]$/;"	t
WideCStringObj	$NIMLIB/std/widestrs.nim	/^      WideCStringObj* = object$/;"	t
WinChar	$NIMLIB/windows/winlean.nim	/^type WinChar* = Utf16Char$/;"	t
WinSizeT	$NIMLIB/windows/winlean.nim	/^    WinSizeT* = uint64$/;"	t
WinThreadProc	$NIMLIB/std/private/threadtypes.nim	/^    WinThreadProc* = proc (x: pointer): int32 {.stdcall.}$/;"	t
Window	$NIMLIB/js/dom.nim	/^  Window* {.importc.} = ref object of EventTarget$/;"	t
WriteDirEffect	$NIMLIB/std/private/oscommon.nim	/^  WriteDirEffect* = object of WriteIOEffect ## Effect that denotes a write$/;"	t
WriteEnvEffect	$NIMLIB/std/envvars.nim	/^  WriteEnvEffect* = object of WriteIOEffect ## Effect that denotes a write$/;"	t
WriteIOEffect	$NIMLIB/system/exceptions.nim	/^  WriteIOEffect* = object of IOEffect  ## Effect describing a write IO operation.$/;"	t
WriteSocketStream	$NIMLIB/std/socketstreams.nim	/^  WriteSocketStream* = ref WriteSocketStreamObj$/;"	t
WriteSocketStreamObj	$NIMLIB/std/socketstreams.nim	/^  WriteSocketStreamObj* = object of ReadSocketStreamObj$/;"	t
X509_NAME_get_text_by_NID	$NIMLIB/wrappers/openssl.nim	/^  proc X509_NAME_get_text_by_NID*(subject:cstring, NID: cint, buf: cstring, size: cint): cint{.$/;"	f
X509_NAME_oneline	$NIMLIB/wrappers/openssl.nim	/^  proc X509_NAME_oneline*(a: PX509_NAME, buf: cstring, size: cint): cstring {.$/;"	f
X509_OBJECT_free	$NIMLIB/wrappers/openssl.nim	/^  proc X509_OBJECT_free*(a: PX509_OBJECT)$/;"	f
X509_OBJECT_new	$NIMLIB/wrappers/openssl.nim	/^  proc X509_OBJECT_new*(): PX509_OBJECT$/;"	f
X509_STORE_add_cert	$NIMLIB/wrappers/openssl.nim	/^  proc X509_STORE_add_cert*(ctx: PX509_STORE; x: PX509): cint$/;"	f
X509_STORE_free	$NIMLIB/wrappers/openssl.nim	/^  proc X509_STORE_free*(v: PX509_STORE)$/;"	f
X509_STORE_lock	$NIMLIB/wrappers/openssl.nim	/^  proc X509_STORE_lock*(ctx: PX509_STORE): cint$/;"	f
X509_STORE_new	$NIMLIB/wrappers/openssl.nim	/^  proc X509_STORE_new*(): PX509_STORE$/;"	f
X509_STORE_set_flags	$NIMLIB/wrappers/openssl.nim	/^  proc X509_STORE_set_flags*(ctx: PX509_STORE; flags: culong): cint$/;"	f
X509_STORE_set_purpose	$NIMLIB/wrappers/openssl.nim	/^  proc X509_STORE_set_purpose*(ctx: PX509_STORE; purpose: cint): cint$/;"	f
X509_STORE_set_trust	$NIMLIB/wrappers/openssl.nim	/^  proc X509_STORE_set_trust*(ctx: PX509_STORE; trust: cint): cint$/;"	f
X509_STORE_unlock	$NIMLIB/wrappers/openssl.nim	/^  proc X509_STORE_unlock*(ctx: PX509_STORE): cint$/;"	f
X509_STORE_up_ref	$NIMLIB/wrappers/openssl.nim	/^  proc X509_STORE_up_ref*(v: PX509_STORE): cint$/;"	f
X509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH	$NIMLIB/wrappers/openssl.nim	/^  X509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH* = 31$/;"	t
X509_V_ERR_AKID_SKID_MISMATCH	$NIMLIB/wrappers/openssl.nim	/^  X509_V_ERR_AKID_SKID_MISMATCH* = 30$/;"	t
X509_V_ERR_APPLICATION_VERIFICATION	$NIMLIB/wrappers/openssl.nim	/^  X509_V_ERR_APPLICATION_VERIFICATION* = 50$/;"	t
X509_V_ERR_CERT_CHAIN_TOO_LONG	$NIMLIB/wrappers/openssl.nim	/^  X509_V_ERR_CERT_CHAIN_TOO_LONG* = 22$/;"	t
X509_V_ERR_CERT_HAS_EXPIRED	$NIMLIB/wrappers/openssl.nim	/^  X509_V_ERR_CERT_HAS_EXPIRED* = 10$/;"	t
X509_V_ERR_CERT_NOT_YET_VALID	$NIMLIB/wrappers/openssl.nim	/^  X509_V_ERR_CERT_NOT_YET_VALID* = 9$/;"	t
X509_V_ERR_CERT_REJECTED	$NIMLIB/wrappers/openssl.nim	/^  X509_V_ERR_CERT_REJECTED* = 28 #These are 'informational' when looking for issuer cert$/;"	t
X509_V_ERR_CERT_REVOKED	$NIMLIB/wrappers/openssl.nim	/^  X509_V_ERR_CERT_REVOKED* = 23$/;"	t
X509_V_ERR_CERT_SIGNATURE_FAILURE	$NIMLIB/wrappers/openssl.nim	/^  X509_V_ERR_CERT_SIGNATURE_FAILURE* = 7$/;"	t
X509_V_ERR_CERT_UNTRUSTED	$NIMLIB/wrappers/openssl.nim	/^  X509_V_ERR_CERT_UNTRUSTED* = 27$/;"	t
X509_V_ERR_CRL_HAS_EXPIRED	$NIMLIB/wrappers/openssl.nim	/^  X509_V_ERR_CRL_HAS_EXPIRED* = 12$/;"	t
X509_V_ERR_CRL_NOT_YET_VALID	$NIMLIB/wrappers/openssl.nim	/^  X509_V_ERR_CRL_NOT_YET_VALID* = 11$/;"	t
X509_V_ERR_CRL_SIGNATURE_FAILURE	$NIMLIB/wrappers/openssl.nim	/^  X509_V_ERR_CRL_SIGNATURE_FAILURE* = 8$/;"	t
X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT	$NIMLIB/wrappers/openssl.nim	/^  X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT* = 18$/;"	t
X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD	$NIMLIB/wrappers/openssl.nim	/^  X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD* = 14$/;"	t
X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD	$NIMLIB/wrappers/openssl.nim	/^  X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD* = 13$/;"	t
X509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD	$NIMLIB/wrappers/openssl.nim	/^  X509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD* = 15$/;"	t
X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD	$NIMLIB/wrappers/openssl.nim	/^  X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD* = 16$/;"	t
X509_V_ERR_INVALID_CA	$NIMLIB/wrappers/openssl.nim	/^  X509_V_ERR_INVALID_CA* = 24$/;"	t
X509_V_ERR_INVALID_PURPOSE	$NIMLIB/wrappers/openssl.nim	/^  X509_V_ERR_INVALID_PURPOSE* = 26$/;"	t
X509_V_ERR_KEYUSAGE_NO_CERTSIGN	$NIMLIB/wrappers/openssl.nim	/^  X509_V_ERR_KEYUSAGE_NO_CERTSIGN* = 32$/;"	t
X509_V_ERR_OUT_OF_MEM	$NIMLIB/wrappers/openssl.nim	/^  X509_V_ERR_OUT_OF_MEM* = 17$/;"	t
X509_V_ERR_PATH_LENGTH_EXCEEDED	$NIMLIB/wrappers/openssl.nim	/^  X509_V_ERR_PATH_LENGTH_EXCEEDED* = 25$/;"	t
X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN	$NIMLIB/wrappers/openssl.nim	/^  X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN* = 19$/;"	t
X509_V_ERR_SUBJECT_ISSUER_MISMATCH	$NIMLIB/wrappers/openssl.nim	/^  X509_V_ERR_SUBJECT_ISSUER_MISMATCH* = 29$/;"	t
X509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY	$NIMLIB/wrappers/openssl.nim	/^  X509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY* = 6$/;"	t
X509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE	$NIMLIB/wrappers/openssl.nim	/^  X509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE* = 4$/;"	t
X509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE	$NIMLIB/wrappers/openssl.nim	/^  X509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE* = 5$/;"	t
X509_V_ERR_UNABLE_TO_GET_CRL	$NIMLIB/wrappers/openssl.nim	/^  X509_V_ERR_UNABLE_TO_GET_CRL* = 3$/;"	t
X509_V_ERR_UNABLE_TO_GET_CRL_ISSUER	$NIMLIB/wrappers/openssl.nim	/^  X509_V_ERR_UNABLE_TO_GET_CRL_ISSUER* = 33$/;"	t
X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT	$NIMLIB/wrappers/openssl.nim	/^  X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT* = 2$/;"	t
X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY	$NIMLIB/wrappers/openssl.nim	/^  X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY* = 20$/;"	t
X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE	$NIMLIB/wrappers/openssl.nim	/^  X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE* = 21$/;"	t
X509_V_ERR_UNHANDLED_CRITICAL_EXTENSION	$NIMLIB/wrappers/openssl.nim	/^  X509_V_ERR_UNHANDLED_CRITICAL_EXTENSION* = 34 #The application is not happy$/;"	t
X509_V_ILLEGAL	$NIMLIB/wrappers/openssl.nim	/^  X509_V_ILLEGAL* = 1$/;"	t
X509_V_OK	$NIMLIB/wrappers/openssl.nim	/^  X509_V_OK* = 0$/;"	t
X509_check_host	$NIMLIB/wrappers/openssl.nim	/^  proc X509_check_host*(cert: PX509, name: cstring, namelen: cint, flags:cuint, peername: cstrin/;"	f
X509_free	$NIMLIB/wrappers/openssl.nim	/^  proc X509_free*(cert: PX509) {.cdecl, dynlib: DLLSSLName, importc.}$/;"	f
X509_get_issuer_name	$NIMLIB/wrappers/openssl.nim	/^  proc X509_get_issuer_name*(a: PX509): PX509_NAME{.cdecl, dynlib: DLLUtilName, importc.}$/;"	f
X509_get_subject_name	$NIMLIB/wrappers/openssl.nim	/^  proc X509_get_subject_name*(a: PX509): PX509_NAME{.cdecl, dynlib: DLLSSLName, importc.}$/;"	f
X_OK	$NIMLIB/posix/posix_freertos_consts.nim	/^const X_OK* = cint(1)$/;"	t
X_OK	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const X_OK* = cint(1)$/;"	t
X_OK	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const X_OK* = cint(1)$/;"	t
X_OK	$NIMLIB/posix/posix_other_consts.nim	/^var X_OK* {.importc: "X_OK", header: "<unistd.h>".}: cint$/;"	t
XmlAttributes	$NIMLIB/pure/xmltree.nim	/^  XmlAttributes* = StringTableRef ## An alias for a string to string mapping.$/;"	t
XmlError	$NIMLIB/pure/xmlparser.nim	/^  XmlError* = object of ValueError ## Exception that is raised$/;"	t
XmlErrorKind	$NIMLIB/pure/parsexml.nim	/^  XmlErrorKind* = enum        ## enumeration that lists all errors that can occur$/;"	t
XmlEventKind	$NIMLIB/pure/parsexml.nim	/^  XmlEventKind* = enum ## enumeration of all events that may occur when parsing$/;"	t
XmlNode	$NIMLIB/pure/xmltree.nim	/^  XmlNode* = ref XmlNodeObj ## An XML tree consisting of XML nodes.$/;"	t
XmlNodeKind	$NIMLIB/pure/xmltree.nim	/^  XmlNodeKind* = enum ## Different kinds of XML nodes.$/;"	t
XmlParseOption	$NIMLIB/pure/parsexml.nim	/^  XmlParseOption* = enum ## options for the XML parser$/;"	t
XmlParser	$NIMLIB/pure/parsexml.nim	/^  XmlParser* = object of BaseLexer ## the parser object.$/;"	t
YESEXPR	$NIMLIB/posix/posix_linux_amd64_consts.nim	/^const YESEXPR* = cint(327680)$/;"	t
YESEXPR	$NIMLIB/posix/posix_nintendoswitch_consts.nim	/^const YESEXPR* = cint(52)$/;"	t
YESEXPR	$NIMLIB/posix/posix_other_consts.nim	/^var YESEXPR* {.importc: "YESEXPR", header: "<langinfo.h>".}: cint$/;"	t
YeardayRange	$NIMLIB/pure/times.nim	/^  YeardayRange* = range[0..365]$/;"	t
ZonedTime	$NIMLIB/pure/times.nim	/^  ZonedTime* = object ## Represents a point in time with an associated$/;"	t
abbr	$NIMLIB/pure/htmlgen.nim	/^macro abbr*(e: varargs[untyped]): untyped =$/;"	t
abbrev	$NIMLIB/pure/strutils.nim	/^func abbrev*(s: string, possibilities: openArray[string]): int =$/;"	t
abort	$NIMLIB/js/dom.nim	/^  proc abort*(f: FileReader) {.importcpp: "#.abort()".}$/;"	f
abortOnError	$NIMLIB/pure/unittest.nim	/^  abortOnError* {.threadvar.}: bool ## Set to true in order to quit$/;"	t
abs	$NIMLIB/js/jscore.nim	/^proc abs*(m: MathLib, a: SomeNumber): SomeNumber {.importcpp.}$/;"	f
abs	$NIMLIB/pure/complex.nim	/^func abs*[T](z: Complex[T]): T =$/;"	t
abs	$NIMLIB/pure/rationals.nim	/^func abs*[T](x: Rational[T]): Rational[T] =$/;"	t
abs	$NIMLIB/pure/times.nim	/^proc abs*(a: Duration): Duration =$/;"	t
abs	$NIMLIB/system.nim	/^proc abs*[T: float64 | float32](x: T): T {.noSideEffect, inline.} =$/;"	t
abs2	$NIMLIB/pure/complex.nim	/^func abs2*[T](z: Complex[T]): T =$/;"	t
absolutePath	$NIMLIB/std/paths.nim	/^proc absolutePath*(path: Path, root = getCurrentDir()): Path =$/;"	t
absolutePath	$NIMLIB/std/private/ospaths2.nim	/^proc absolutePath*(path: string, root = getCurrentDir()): string =$/;"	t
accept	$NIMLIB/posix/posix.nim	/^proc accept*(a1: SocketHandle, a2: ptr SockAddr, a3: ptr SockLen): SocketHandle {.$/;"	f
accept	$NIMLIB/pure/asyncdispatch.nim	/^proc accept*(socket: AsyncFD,$/;"	f
accept	$NIMLIB/pure/asyncnet.nim	/^proc accept*(socket: AsyncSocket,$/;"	f
accept	$NIMLIB/pure/nativesockets.nim	/^proc accept*(fd: SocketHandle, inheritable = defined(nimInheritHandles)): (SocketHandle, string)/;"	t
accept	$NIMLIB/pure/net.nim	/^proc accept*(server: Socket, client: var owned(Socket),$/;"	f
accept	$NIMLIB/windows/winlean.nim	/^proc accept*(s: SocketHandle, a: ptr SockAddr, addrlen: ptr SockLen): SocketHandle {.$/;"	f
accept4	$NIMLIB/posix/posix.nim	/^  proc accept4*(a1: SocketHandle, a2: ptr SockAddr, a3: ptr SockLen,$/;"	f
acceptAddr	$NIMLIB/pure/asyncdispatch.nim	/^  proc acceptAddr*(socket: AsyncFD, flags = {SocketFlag.SafeDisconn},$/;"	t
acceptAddr	$NIMLIB/pure/asyncnet.nim	/^proc acceptAddr*(socket: AsyncSocket, flags = {SocketFlag.SafeDisconn},$/;"	t
acceptAddr	$NIMLIB/pure/net.nim	/^proc acceptAddr*(server: Socket, client: var owned(Socket), address: var string,$/;"	f
acceptAddrSSL	$NIMLIB/pure/net.nim	/^  proc acceptAddrSSL*(server: Socket, client: var Socket,$/;"	f
acceptRequest	$NIMLIB/pure/asynchttpserver.nim	/^proc acceptRequest*(server: AsyncHttpServer,$/;"	f
access	$NIMLIB/posix/posix.nim	/^proc access*(a1: cstring, a2: cint): cint {.importc, header: "<unistd.h>".}$/;"	f
acos	$NIMLIB/js/jscore.nim	/^proc acos*(m: MathLib, a: SomeNumber): float {.importcpp.}$/;"	f
acosh	$NIMLIB/js/jscore.nim	/^proc acosh*(m: MathLib, a: SomeNumber): float {.importcpp.}$/;"	f
acquire	$NIMLIB/core/locks.nim	/^proc acquire*(lock: var Lock) {.inline.} =$/;"	t
acquire	$NIMLIB/core/rlocks.nim	/^proc acquire*(lock: var RLock) {.inline.} =$/;"	t
acquireSys	$NIMLIB/std/private/syslocks.nim	/^  proc acquireSys*(L: var SysLock) {.noSideEffect, importcpp.}$/;"	f
activeDescriptors	$NIMLIB/pure/asyncdispatch.nim	/^proc activeDescriptors*(): int {.inline.} =$/;"	t
add	$NIMLIB/core/macrocache.nim	/^proc add*(s: CacheSeq; value: NimNode) {.magic: "NcsAdd".} =$/;"	t
add	$NIMLIB/core/macros.nim	/^proc add*(father: NimNode, children: varargs[NimNode]): NimNode {.$/;"	f
add	$NIMLIB/js/dom.nim	/^proc add*(c: ClassList, class: cstring)$/;"	f
add	$NIMLIB/packages/docutils/rstast.nim	/^proc add*(father: PRstNode; s: string) =$/;"	t
add	$NIMLIB/pure/collections/lists.nim	/^proc add*[T](L: var SinglyLinkedRing[T], value: T) =$/;"	t
add	$NIMLIB/pure/collections/sharedlist.nim	/^proc add*[A](x: var SharedList[A]; y: A) =$/;"	t
add	$NIMLIB/pure/collections/sharedtables.nim	/^proc add*[A, B](t: var SharedTable[A, B], key: A, val: B) =$/;"	t
add	$NIMLIB/pure/collections/tables.nim	/^proc add*[A, B](t: var Table[A, B], key: A, val: sink B) {.deprecated:$/;"	f
add	$NIMLIB/pure/httpclient.nim	/^proc add*(p: MultipartData, xs: MultipartEntries): MultipartData$/;"	f
add	$NIMLIB/pure/httpcore.nim	/^proc add*(headers: HttpHeaders, key, value: string) =$/;"	t
add	$NIMLIB/pure/json.nim	/^proc add*(obj: JsonNode, key: string, val: JsonNode) =$/;"	t
add	$NIMLIB/pure/parsesql.nim	/^proc add*(father, n: SqlNode) =$/;"	t
add	$NIMLIB/pure/reservedmem.nim	/^proc add*[T](s: var ReservedMemSeq[T], val: T) =$/;"	t
add	$NIMLIB/pure/ropes.nim	/^proc add*(a: var Rope, b: string) {.rtl, extern: "nro$1Str".} =$/;"	t
add	$NIMLIB/pure/unicode.nim	/^proc add*(s: var string; c: Rune) =$/;"	t
add	$NIMLIB/pure/xmltree.nim	/^proc add*(result: var string, n: XmlNode, indent = 0, indWidth = 2,$/;"	t
add	$NIMLIB/std/strbasics.nim	/^proc add*(x: var string, y: openArray[char]) =$/;"	t
add	$NIMLIB/system.nim	/^proc add*(x: var string, y: string) {.magic: "AppendStrStr", noSideEffect.} =$/;"	t
add	$NIMLIB/system/seqs_v2.nim	/^proc add*[T](x: var seq[T]; value: sink T) {.magic: "AppendSeqElem", noSideEffect, nodestroy.} =$/;"	t
addAnchorNim	$NIMLIB/packages/docutils/rst.nim	/^proc addAnchorNim*(s: var PRstSharedState, external: bool, refn: string, tooltip: string,$/;"	f
addAndFetch	$NIMLIB/std/sysatomics.nim	/^  proc addAndFetch*(p: ptr int, val: int): int {.inline.} =$/;"	t
addCallback	$NIMLIB/pure/asyncfutures.nim	/^proc addCallback*[T](future: Future[T],$/;"	f
addCompletion	$NIMLIB/wrappers/linenoise/linenoise.nim	/^proc addCompletion*(a2: ptr Completions; a3: cstring) {.$/;"	f
addDebuggingInfo	$NIMLIB/system/stacktraces.nim	/^  proc addDebuggingInfo*(s: seq[StackTraceEntry]): seq[StackTraceEntry] =$/;"	t
addEscaped	$NIMLIB/pure/xmltree.nim	/^proc addEscaped*(result: var string, s: string) =$/;"	t
addEscapedChar	$NIMLIB/system.nim	/^proc addEscapedChar*(s: var string, c: char) {.noSideEffect, inline.} =$/;"	t
addEvent	$NIMLIB/pure/asyncdispatch.nim	/^  proc addEvent*(ev: AsyncEvent, cb: Callback) =$/;"	t
addEventListener	$NIMLIB/js/dom.nim	/^proc addEventListener*(et: EventTarget, ev: cstring, cb: proc(ev: Event), useCapture: bool = fal/;"	t
addExitProc	$NIMLIB/std/exitprocs.nim	/^proc addExitProc*(cl: proc() {.noconv.}) =$/;"	t
addFile	$NIMLIB/wrappers/tinyc.nim	/^proc addFile*(s: PccState, filename: cstring): cint {.cdecl,$/;"	f
addFileExt	$NIMLIB/std/paths.nim	/^func addFileExt*(filename: Path, ext: string): Path {.inline.} =$/;"	t
addFileExt	$NIMLIB/std/private/ospaths2.nim	/^proc addFileExt*(filename, ext: string): string {.$/;"	f
addFilename	$NIMLIB/packages/docutils/rst.nim	/^proc addFilename*(s: PRstSharedState, file1: string): FileIndex =$/;"	t
addFiles	$NIMLIB/pure/httpclient.nim	/^proc addFiles*(p: MultipartData, xs: openArray[tuple[name, file: string]],$/;"	f
addFirst	$NIMLIB/pure/collections/deques.nim	/^proc addFirst*[T](deq: var Deque[T], item: sink T) =$/;"	t
addFloat	$NIMLIB/std/formatfloat.nim	/^proc addFloat*(result: var string; x: float | float32) {.inline.} =$/;"	t
addFloatRoundtrip	$NIMLIB/std/formatfloat.nim	/^proc addFloatRoundtrip*(result: var string; x: float | float32) =$/;"	t
addFloatSprintf	$NIMLIB/std/formatfloat.nim	/^proc addFloatSprintf*(result: var string; x: float) =$/;"	t
addHandler	$NIMLIB/pure/logging.nim	/^proc addHandler*(handler: Logger) =$/;"	t
addIdentIfAbsent	$NIMLIB/core/macros.nim	/^proc addIdentIfAbsent*(dest: NimNode, ident: string) =$/;"	t
addIfNotNil	$NIMLIB/packages/docutils/rstast.nim	/^proc addIfNotNil*(father, son: PRstNode) =$/;"	t
addIncludePath	$NIMLIB/wrappers/tinyc.nim	/^proc addIncludePath*(s: PccState, pathname: cstring) {.cdecl,$/;"	f
addInt	$NIMLIB/std/private/digitsutils.nim	/^proc addInt*(result: var string; x: int64) {.enforceNoRaises.} =$/;"	t
addLast	$NIMLIB/pure/collections/deques.nim	/^proc addLast*[T](deq: var Deque[T], item: sink T) =$/;"	t
addLibrary	$NIMLIB/wrappers/tinyc.nim	/^proc addLibrary*(s: PccState, libraryname: cstring): cint {.cdecl,$/;"	f
addLibraryPath	$NIMLIB/wrappers/tinyc.nim	/^proc addLibraryPath*(s: PccState, pathname: cstring): cint {.cdecl,$/;"	f
addMoved	$NIMLIB/pure/collections/lists.nim	/^proc addMoved*[T](a, b: var SinglyLinkedList[T]) {.since: (1, 5, 1).} =$/;"	t
addNodes	$NIMLIB/packages/docutils/rst.nim	/^proc addNodes*(n: PRstNode): string$/;"	f
addNormalizePath	$NIMLIB/pure/pathnorm.nim	/^proc addNormalizePath*(x: string; result: var string; state: var int;$/;"	f
addOutputFormatter	$NIMLIB/pure/unittest.nim	/^proc addOutputFormatter*(formatter: OutputFormatter) =$/;"	t
addPragma	$NIMLIB/core/macros.nim	/^proc addPragma*(someProc, pragma: NimNode) =$/;"	t
addProcess	$NIMLIB/pure/asyncdispatch.nim	/^  proc addProcess*(pid: int, cb: Callback) =$/;"	t
addQuitProc	$NIMLIB/system.nim	/^  proc addQuitProc*(quitProc: proc() {.noconv.}) {.$/;"	f
addQuoted	$NIMLIB/system.nim	/^proc addQuoted*[T](s: var string, x: T) =$/;"	t
addRead	$NIMLIB/pure/asyncdispatch.nim	/^  proc addRead*(fd: AsyncFD, cb: Callback) =$/;"	t
addSep	$NIMLIB/pure/strutils.nim	/^func addSep*(dest: var string, sep = ", ", startLen: Natural = 0) {.inline.} =$/;"	t
addSignal	$NIMLIB/pure/asyncdispatch.nim	/^    proc addSignal*(signal: int, cb: Callback) =$/;"	t
addSymbol	$NIMLIB/wrappers/tinyc.nim	/^proc addSymbol*(s: PccState, name: cstring, val: pointer): cint {.cdecl,$/;"	f
addSysincludePath	$NIMLIB/wrappers/tinyc.nim	/^proc addSysincludePath*(s: PccState, pathname: cstring) {.cdecl,$/;"	f
addTimer	$NIMLIB/pure/asyncdispatch.nim	/^  proc addTimer*(timeout: int, oneshot: bool, cb: Callback) =$/;"	t
addWrite	$NIMLIB/pure/asyncdispatch.nim	/^  proc addWrite*(fd: AsyncFD, cb: Callback) =$/;"	t
addf	$NIMLIB/pure/ropes.nim	/^proc addf*(c: var Rope, frmt: string, args: openArray[Rope]) {.rtl, extern: "nro$1".} =$/;"	t
addr	$NIMLIB/system.nim	/^proc `addr`*[T](x: T): ptr T {.magic: "Addr", noSideEffect.} =$/;"	o
address	$NIMLIB/pure/htmlgen.nim	/^macro address*(e: varargs[untyped]): untyped =$/;"	t
advice	$NIMLIB/pure/concurrency/cpuload.nim	/^proc advice*(s: var ThreadPoolState): ThreadPoolAdvice =$/;"	t
after	$NIMLIB/js/dom.nim	/^  proc after*(self: Node; element: Node): Node {.importjs: "#.$1(@)", varargs.}$/;"	f
afterCodeReload	$NIMLIB/core/hotcodereloading.nim	/^  template afterCodeReload*(body: untyped) =$/;"	t
aio_cancel	$NIMLIB/posix/posix.nim	/^  proc aio_cancel*(a1: cint, a2: ptr Taiocb): cint {.importc, header: "<aio.h>".}$/;"	f
aio_error	$NIMLIB/posix/posix.nim	/^  proc aio_error*(a1: ptr Taiocb): cint {.importc, header: "<aio.h>".}$/;"	f
aio_fsync	$NIMLIB/posix/posix.nim	/^  proc aio_fsync*(a1: cint, a2: ptr Taiocb): cint {.importc, header: "<aio.h>".}$/;"	f
aio_read	$NIMLIB/posix/posix.nim	/^  proc aio_read*(a1: ptr Taiocb): cint {.importc, header: "<aio.h>".}$/;"	f
aio_return	$NIMLIB/posix/posix.nim	/^  proc aio_return*(a1: ptr Taiocb): int {.importc, header: "<aio.h>".}$/;"	f
aio_suspend	$NIMLIB/posix/posix.nim	/^  proc aio_suspend*(a1: ptr ptr Taiocb, a2: cint, a3: ptr Timespec): cint {.$/;"	f
aio_write	$NIMLIB/posix/posix.nim	/^  proc aio_write*(a1: ptr Taiocb): cint {.importc, header: "<aio.h>".}$/;"	f
alarm	$NIMLIB/posix/posix.nim	/^proc alarm*(a1: cint): cint {.importc, header: "<unistd.h>".}$/;"	f
alert	$NIMLIB/js/dom.nim	/^proc alert*(w: Window, msg: cstring)$/;"	f
align	$NIMLIB/pure/strutils.nim	/^func align*(s: string, count: Natural, padding = ' '): string {.rtl,$/;"	t
align	$NIMLIB/pure/unicode.nim	/^proc align*(s: string, count: Natural, padding = ' '.Rune): string {.noSideEffect, inline.} =$/;"	t
alignLeft	$NIMLIB/pure/strutils.nim	/^func alignLeft*(s: string, count: Natural, padding = ' '): string =$/;"	t
alignLeft	$NIMLIB/pure/unicode.nim	/^proc alignLeft*(s: string, count: Natural, padding = ' '.Rune): string {.noSideEffect, inline.} /;"	t
alignString	$NIMLIB/pure/strformat.nim	/^proc alignString*(s: string, minimumWidth: int; align = '\\0'; fill = ' '): string =$/;"	t
alignTable	$NIMLIB/std/private/asciitables.nim	/^proc alignTable*(s: string, delim = '\\t', fill = ' ', sep = " "): string =$/;"	t
alignof	$NIMLIB/system.nim	/^proc alignof*[T](x: T): int {.magic: "AlignOf", noSideEffect.}$/;"	f
alive	$NIMLIB/pure/coro.nim	/^proc alive*(c: CoroutineRef): bool = c.coro != nil and c.coro.state != CORO_FINISHED$/;"	t
all	$NIMLIB/pure/asyncfutures.nim	/^proc all*[T](futs: varargs[Future[T]]): auto =$/;"	t
all	$NIMLIB/pure/collections/sequtils.nim	/^proc all*[T](s: openArray[T], pred: proc(x: T): bool {.closure.}): bool {.effectsOf: pred.} =$/;"	t
allCharsInSet	$NIMLIB/pure/strutils.nim	/^func allCharsInSet*(s: string, theSet: set[char]): bool =$/;"	t
allIt	$NIMLIB/pure/collections/sequtils.nim	/^template allIt*(s, pred: untyped): bool =$/;"	t
allValues	$NIMLIB/pure/collections/tables.nim	/^iterator allValues*[A, B](t: Table[A, B]; key: A): B {.deprecated:$/;"	i
alloc	$NIMLIB/system/memalloc.nim	/^  template alloc*(size: Natural): pointer =$/;"	t
alloc0	$NIMLIB/system/memalloc.nim	/^  template alloc0*(size: Natural): pointer =$/;"	t
alloc0Impl	$NIMLIB/system/memalloc.nim	/^  proc alloc0Impl*(size: Natural): pointer {.noconv, rtl, tags: [], benign, raises: [].}$/;"	f
allocCStringArray	$NIMLIB/system.nim	/^  proc allocCStringArray*(a: openArray[string]): cstringArray =$/;"	t
allocImpl	$NIMLIB/system/memalloc.nim	/^  proc allocImpl*(size: Natural): pointer {.noconv, rtl, tags: [], benign, raises: [].}$/;"	f
allocShared	$NIMLIB/system/memalloc.nim	/^  template allocShared*(size: Natural): pointer =$/;"	t
allocShared0	$NIMLIB/system/memalloc.nim	/^  template allocShared0*(size: Natural): pointer =$/;"	t
allocShared0Impl	$NIMLIB/system/memalloc.nim	/^  proc allocShared0Impl*(size: Natural): pointer {.noconv, rtl, benign, raises: [], tags: [].}$/;"	f
allocSharedImpl	$NIMLIB/system/memalloc.nim	/^  proc allocSharedImpl*(size: Natural): pointer {.noconv, compilerproc, rtl, benign, raises: [],/;"	f
allocateAndInitializeSid	$NIMLIB/windows/winlean.nim	/^proc allocateAndInitializeSid*(pIdentifierAuthority: ptr SID_IDENTIFIER_AUTHORITY,$/;"	f
almostEqual	$NIMLIB/pure/math.nim	/^func almostEqual*[T: SomeFloat](x, y: T; unitsInLastPlace: Natural = 4): bool {.$/;"	t
and	$NIMLIB/js/jsffi.nim	/^proc `and`*(x, y: JsObject): JsObject {.importjs: "(# && #)".}$/;"	o
and	$NIMLIB/pure/asyncfutures.nim	/^proc `and`*[T, Y](fut1: Future[T], fut2: Future[Y]): Future[void] =$/;"	o
and	$NIMLIB/std/jsbigints.nim	/^func `and`*(x, y: JsBigInt): JsBigInt {.importjs: "(# & #)".} =$/;"	o
and	$NIMLIB/system.nim	/^proc `and`*(a, b: typedesc): typedesc {.magic: "TypeTrait", noSideEffect.}$/;"	o
and	$NIMLIB/system/arithmetics.nim	/^proc `and`*(x, y: uint8): uint8 {.magic: "BitandI", noSideEffect.}$/;"	o
and	$NIMLIB/system/basic_types.nim	/^proc `and`*(x, y: bool): bool {.magic: "And", noSideEffect.}$/;"	o
annotation	$NIMLIB/pure/htmlgen.nim	/^macro annotation*(e: varargs[untyped]): untyped =$/;"	t
ansiBackgroundColorCode	$NIMLIB/pure/terminal.nim	/^template ansiBackgroundColorCode*(color: static[Color]): string =$/;"	t
ansiForegroundColorCode	$NIMLIB/pure/terminal.nim	/^template ansiForegroundColorCode*(fg: static[ForegroundColor],$/;"	m
ansiResetCode	$NIMLIB/pure/terminal.nim	/^  ansiResetCode* = "\\e[0m"$/;"	t
ansiStyleCode	$NIMLIB/pure/terminal.nim	/^template ansiStyleCode*(style: static[Style]): string =$/;"	t
any	$NIMLIB/pure/collections/sequtils.nim	/^proc any*[T](s: openArray[T], pred: proc(x: T): bool {.closure.}): bool {.effectsOf: pred.} =$/;"	t
any	$NIMLIB/pure/pegs.nim	/^func any*: Peg {.inline.} =$/;"	t
any	$NIMLIB/system/basic_types.nim	/^  any* {.deprecated: "Deprecated since v1.5; Use auto instead.".} = distinct auto  ## Deprecated/;"	t
anyIt	$NIMLIB/pure/collections/sequtils.nim	/^template anyIt*(s, pred: untyped): bool =$/;"	t
anyRune	$NIMLIB/pure/pegs.nim	/^func anyRune*: Peg {.inline.} =$/;"	t
appType	$NIMLIB/system.nim	/^  appType* {.magic: "AppType".}: string = ""$/;"	t
append	$NIMLIB/js/dom.nim	/^  proc append*(self: Node; element: Node): Node {.importjs: "#.$1(@)", varargs.}$/;"	f
append	$NIMLIB/pure/collections/chains.nim	/^template append*(header, node) =$/;"	t
append	$NIMLIB/pure/collections/lists.nim	/^proc append*[T](a: var (SinglyLinkedList[T] | SinglyLinkedRing[T]),$/;"	f
appendChild	$NIMLIB/js/dom.nim	/^  proc appendChild*(parent, n: Node) =$/;"	t
appendData	$NIMLIB/js/dom.nim	/^proc appendData*(n: Node, data: cstring)$/;"	f
appendMoved	$NIMLIB/pure/collections/lists.nim	/^proc appendMoved*[T: SomeLinkedList](a, b: var T) {.since: (1, 5, 1).} =$/;"	t
apply	$NIMLIB/pure/collections/sequtils.nim	/^proc apply*[T](s: var openArray[T], op: proc (x: var T) {.closure.})$/;"	f
applyIt	$NIMLIB/pure/collections/sequtils.nim	/^template applyIt*(varSeq, op: untyped) =$/;"	t
arccos	$NIMLIB/pure/complex.nim	/^func arccos*[T](z: Complex[T]): Complex[T] =$/;"	t
arccos	$NIMLIB/pure/math.nim	/^  func arccos*(x: float64): float64 {.importc: "acos", header: "<math.h>".} =$/;"	t
arccosh	$NIMLIB/pure/complex.nim	/^func arccosh*[T](z: Complex[T]): Complex[T] =$/;"	t
arccot	$NIMLIB/pure/complex.nim	/^func arccot*[T](z: Complex[T]): Complex[T] =$/;"	t
arccot	$NIMLIB/pure/math.nim	/^func arccot*[T: float32|float64](x: T): T = arctan(1.0 \/ x)$/;"	t
arccoth	$NIMLIB/pure/complex.nim	/^func arccoth*[T](z: Complex[T]): Complex[T] =$/;"	t
arccoth	$NIMLIB/pure/math.nim	/^func arccoth*[T: float32|float64](x: T): T = arctanh(1.0 \/ x)$/;"	t
arccsc	$NIMLIB/pure/complex.nim	/^func arccsc*[T](z: Complex[T]): Complex[T] =$/;"	t
arccsc	$NIMLIB/pure/math.nim	/^func arccsc*[T: float32|float64](x: T): T = arcsin(1.0 \/ x)$/;"	t
arccsch	$NIMLIB/pure/complex.nim	/^func arccsch*[T](z: Complex[T]): Complex[T] =$/;"	t
arccsch	$NIMLIB/pure/math.nim	/^func arccsch*[T: float32|float64](x: T): T = arcsinh(1.0 \/ x)$/;"	t
arch64	$NIMLIB/system/countbits_impl.nim	/^const arch64* = sizeof(int) == 8$/;"	t
arcsec	$NIMLIB/pure/complex.nim	/^func arcsec*[T](z: Complex[T]): Complex[T] =$/;"	t
arcsec	$NIMLIB/pure/math.nim	/^func arcsec*[T: float32|float64](x: T): T = arccos(1.0 \/ x)$/;"	t
arcsech	$NIMLIB/pure/complex.nim	/^func arcsech*[T](z: Complex[T]): Complex[T] =$/;"	t
arcsech	$NIMLIB/pure/math.nim	/^func arcsech*[T: float32|float64](x: T): T = arccosh(1.0 \/ x)$/;"	t
arcsin	$NIMLIB/pure/complex.nim	/^func arcsin*[T](z: Complex[T]): Complex[T] =$/;"	t
arcsin	$NIMLIB/pure/math.nim	/^  func arcsin*(x: float64): float64 {.importc: "asin", header: "<math.h>".} =$/;"	t
arcsinh	$NIMLIB/pure/complex.nim	/^func arcsinh*[T](z: Complex[T]): Complex[T] =$/;"	t
arctan	$NIMLIB/pure/complex.nim	/^func arctan*[T](z: Complex[T]): Complex[T] =$/;"	t
arctan	$NIMLIB/pure/math.nim	/^  func arctan*(x: float64): float64 {.importc: "atan", header: "<math.h>".} =$/;"	t
arctan2	$NIMLIB/pure/math.nim	/^  func arctan2*(y, x: float64): float64 {.importc: "atan2", header: "<math.h>".} =$/;"	t
arctanh	$NIMLIB/pure/complex.nim	/^func arctanh*[T](z: Complex[T]): Complex[T] =$/;"	t
area	$NIMLIB/pure/htmlgen.nim	/^macro area*(e: varargs[untyped]): untyped =$/;"	t
ariaAttr	$NIMLIB/pure/htmlgen.nim	/^  ariaAttr* = " role "                           ## HTML DOM Aria Attributes$/;"	t
arity	$NIMLIB/pure/typetraits.nim	/^proc arity*(t: typedesc): int {.magic: "TypeTrait".} =$/;"	t
article	$NIMLIB/pure/htmlgen.nim	/^macro article*(e: varargs[untyped]): untyped =$/;"	t
asctime	$NIMLIB/posix/posix.nim	/^proc asctime*(a1: var Tm): cstring{.importc, header: "<time.h>".}$/;"	f
asctime_r	$NIMLIB/posix/posix.nim	/^proc asctime_r*(a1: var Tm, a2: cstring): cstring {.importc, header: "<time.h>".}$/;"	f
ashr	$NIMLIB/system/arithmetics.nim	/^proc ashr*(x: int8, y: SomeInteger): int8 {.magic: "AshrI", noSideEffect.}$/;"	f
aside	$NIMLIB/pure/htmlgen.nim	/^macro aside*(e: varargs[untyped]): untyped =$/;"	t
asin	$NIMLIB/js/jscore.nim	/^proc asin*(m: MathLib, a: SomeNumber): float {.importcpp.}$/;"	f
asinh	$NIMLIB/js/jscore.nim	/^proc asinh*(m: MathLib, a: SomeNumber): float {.importcpp.}$/;"	f
assert	$NIMLIB/std/assertions.nim	/^template assert*(cond: untyped, msg = "") =$/;"	t
assign	$NIMLIB/core/typeinfo.nim	/^proc assign*(x, y: Any) =$/;"	t
assign	$NIMLIB/std/packedsets.nim	/^proc assign*[A](dest: var PackedSet[A], src: PackedSet[A]) {.inline, deprecated.} =$/;"	t
assign_jit_stack	$NIMLIB/wrappers/pcre.nim	/^proc assign_jit_stack*(extra: ptr ExtraData,$/;"	f
assignedElements	$NIMLIB/js/dom.nim	/^  proc assignedElements*(n: HTMLSlotElement; options: SlotOptions): seq[Element]$/;"	f
assignedNodes	$NIMLIB/js/dom.nim	/^  proc assignedNodes*(n: HTMLSlotElement; options: SlotOptions): seq[Node]$/;"	f
astGenRepr	$NIMLIB/core/macros.nim	/^proc astGenRepr*(n: NimNode): string {.benign.} =$/;"	t
astToStr	$NIMLIB/system/compilation.nim	/^proc astToStr*[T](x: T): string {.magic: "AstToStr", noSideEffect.}$/;"	f
async	$NIMLIB/js/asyncjs.nim	/^macro async*(arg: untyped): untyped =$/;"	t
async	$NIMLIB/pure/asyncmacro.nim	/^macro async*(prc: untyped): untyped =$/;"	t
asyncCheck	$NIMLIB/pure/asyncfutures.nim	/^proc asyncCheck*[T](future: Future[T]) =$/;"	t
atEnd	$NIMLIB/pure/streams.nim	/^proc atEnd*(s: Stream): bool =$/;"	t
atan	$NIMLIB/js/jscore.nim	/^proc atan*(m: MathLib, a: SomeNumber): float {.importcpp.}$/;"	f
atan2	$NIMLIB/js/jscore.nim	/^proc atan2*(m: MathLib, a: SomeNumber): float {.importcpp.}$/;"	f
atanh	$NIMLIB/js/jscore.nim	/^proc atanh*(m: MathLib, a: SomeNumber): float {.importcpp.}$/;"	f
atom	$NIMLIB/pure/strscans.nim	/^template atom*(input: string; idx: int; s: set[char]): bool =$/;"	t
atomicAddFetch	$NIMLIB/std/sysatomics.nim	/^  proc atomicAddFetch*[T: AtomType](p: ptr T, val: T, mem: AtomMemModel): T {.$/;"	f
atomicAlwaysLockFree	$NIMLIB/std/sysatomics.nim	/^  proc atomicAlwaysLockFree*(size: int, p: pointer): bool {.$/;"	f
atomicAndFetch	$NIMLIB/std/sysatomics.nim	/^  proc atomicAndFetch*[T: AtomType](p: ptr T, val: T, mem: AtomMemModel): T {.$/;"	f
atomicClear	$NIMLIB/std/sysatomics.nim	/^  proc atomicClear*(p: pointer, mem: AtomMemModel) {.$/;"	f
atomicCompareExchange	$NIMLIB/std/sysatomics.nim	/^  proc atomicCompareExchange*[T: AtomType](p, expected, desired: ptr T,$/;"	f
atomicCompareExchangeN	$NIMLIB/std/sysatomics.nim	/^  proc atomicCompareExchangeN*[T: ptr](p, expected: ptr T, desired: T,$/;"	f
atomicDec	$NIMLIB/pure/concurrency/atomics.nim	/^proc atomicDec*[T: SomeInteger](location: var Atomic[T]; value: T = 1) {.inline.} =$/;"	t
atomicDec	$NIMLIB/std/sysatomics.nim	/^proc atomicDec*(memLoc: var int, x: int = 1): int {.inline, discardable, raises: [], tags: [].} /;"	t
atomicExchange	$NIMLIB/std/sysatomics.nim	/^  proc atomicExchange*[T: AtomType](p, val, ret: ptr T, mem: AtomMemModel) {.$/;"	f
atomicExchangeN	$NIMLIB/std/sysatomics.nim	/^  proc atomicExchangeN*[T: ptr](p: ptr T, val: T, mem: AtomMemModel): T =$/;"	t
atomicFetchAdd	$NIMLIB/std/sysatomics.nim	/^  proc atomicFetchAdd*[T: AtomType](p: ptr T, val: T, mem: AtomMemModel): T {.$/;"	f
atomicFetchAnd	$NIMLIB/std/sysatomics.nim	/^  proc atomicFetchAnd*[T: AtomType](p: ptr T, val: T, mem: AtomMemModel): T {.$/;"	f
atomicFetchNand	$NIMLIB/std/sysatomics.nim	/^  proc atomicFetchNand*[T: AtomType](p: ptr T, val: T, mem: AtomMemModel): T {.$/;"	f
atomicFetchOr	$NIMLIB/std/sysatomics.nim	/^  proc atomicFetchOr*[T: AtomType](p: ptr T, val: T, mem: AtomMemModel): T {.$/;"	f
atomicFetchSub	$NIMLIB/std/sysatomics.nim	/^  proc atomicFetchSub*[T: AtomType](p: ptr T, val: T, mem: AtomMemModel): T {.$/;"	f
atomicFetchXor	$NIMLIB/std/sysatomics.nim	/^  proc atomicFetchXor*[T: AtomType](p: ptr T, val: T, mem: AtomMemModel): T {.$/;"	f
atomicInc	$NIMLIB/pure/concurrency/atomics.nim	/^proc atomicInc*[T: SomeInteger](location: var Atomic[T]; value: T = 1) {.inline.} =$/;"	t
atomicInc	$NIMLIB/std/sysatomics.nim	/^proc atomicInc*(memLoc: var int, x: int = 1): int {.inline, discardable, raises: [], tags: [].} /;"	t
atomicIsLockFree	$NIMLIB/std/sysatomics.nim	/^  proc atomicIsLockFree*(size: int, p: pointer): bool {.$/;"	f
atomicLoad	$NIMLIB/std/sysatomics.nim	/^  proc atomicLoad*[T: AtomType](p, ret: ptr T, mem: AtomMemModel) {.$/;"	f
atomicLoadN	$NIMLIB/std/sysatomics.nim	/^  proc atomicLoadN*[T: AtomType](p: ptr T, mem: static[AtomMemModel]): T =$/;"	t
atomicNandFetch	$NIMLIB/std/sysatomics.nim	/^  proc atomicNandFetch*[T: AtomType](p: ptr T, val: T, mem: AtomMemModel): T {.$/;"	f
atomicOrFetch	$NIMLIB/std/sysatomics.nim	/^  proc atomicOrFetch*[T: AtomType](p: ptr T, val: T, mem: AtomMemModel): T {.$/;"	f
atomicSignalFence	$NIMLIB/std/sysatomics.nim	/^  proc atomicSignalFence*(mem: AtomMemModel) {.$/;"	f
atomicStore	$NIMLIB/std/sysatomics.nim	/^  proc atomicStore*[T: AtomType](p, val: ptr T, mem: AtomMemModel) {.$/;"	f
atomicStoreN	$NIMLIB/std/sysatomics.nim	/^  proc atomicStoreN*[T: AtomType](p: ptr T, val: T, mem: static[AtomMemModel]) =$/;"	t
atomicSubFetch	$NIMLIB/std/sysatomics.nim	/^  proc atomicSubFetch*[T: AtomType](p: ptr T, val: T, mem: AtomMemModel): T {.$/;"	f
atomicTestAndSet	$NIMLIB/std/sysatomics.nim	/^  proc atomicTestAndSet*(p: pointer, mem: AtomMemModel): bool {.$/;"	f
atomicThreadFence	$NIMLIB/std/sysatomics.nim	/^  proc atomicThreadFence*(mem: AtomMemModel) {.$/;"	f
atomicXorFetch	$NIMLIB/std/sysatomics.nim	/^  proc atomicXorFetch*[T: AtomType](p: ptr T, val: T, mem: AtomMemModel): T {.$/;"	f
attachShadow	$NIMLIB/js/dom.nim	/^  proc attachShadow*(n: Element): ShadowRoot$/;"	f
attr	$NIMLIB/pure/xmltree.nim	/^proc attr*(n: XmlNode, name: string): string =$/;"	t
attrKey	$NIMLIB/pure/parsexml.nim	/^template attrKey*(my: XmlParser): string =$/;"	t
attrValue	$NIMLIB/pure/parsexml.nim	/^template attrValue*(my: XmlParser): string =$/;"	t
attrs	$NIMLIB/pure/xmltree.nim	/^proc attrs*(n: XmlNode): XmlAttributes {.inline.} =$/;"	t
attrsLen	$NIMLIB/pure/xmltree.nim	/^proc attrsLen*(n: XmlNode): int {.inline.} =$/;"	t
audio	$NIMLIB/pure/htmlgen.nim	/^macro audio*(e: varargs[untyped]): untyped =$/;"	t
auto	$NIMLIB/system/basic_types.nim	/^  auto* {.magic: Expr.}          ## Meta type for automatic type determination.$/;"	t
auxWriteStackTraceWithOverride	$NIMLIB/system/stacktraces.nim	/^  proc auxWriteStackTraceWithOverride*(s: var string) =$/;"	t
await	$NIMLIB/pure/asyncmacro.nim	/^template await*[T](f: Future[T]): auto {.used.} =$/;"	t
awaitAndThen	$NIMLIB/pure/concurrency/threadpool.nim	/^proc awaitAndThen*[T](fv: FlowVar[T]; action: proc (x: T) {.closure.}) =$/;"	t
back	$NIMLIB/js/dom.nim	/^proc back*(w: Window)$/;"	f
backref	$NIMLIB/pure/pegs.nim	/^func backref*(index: range[1..MaxSubpatterns], reverse: bool = false): Peg {.$/;"	t
backrefIgnoreCase	$NIMLIB/pure/pegs.nim	/^func backrefIgnoreCase*(index: range[1..MaxSubpatterns], reverse: bool = false): Peg {.$/;"	t
backrefIgnoreStyle	$NIMLIB/pure/pegs.nim	/^func backrefIgnoreStyle*(index: range[1..MaxSubpatterns], reverse: bool = false): Peg {.$/;"	t
base	$NIMLIB/core/typeinfo.nim	/^proc base*(x: Any): Any =$/;"	t
base	$NIMLIB/pure/htmlgen.nim	/^macro base*(e: varargs[untyped]): untyped =$/;"	t
baseTypeKind	$NIMLIB/core/typeinfo.nim	/^proc baseTypeKind*(x: Any): AnyKind {.inline.} =$/;"	t
baseTypeSize	$NIMLIB/core/typeinfo.nim	/^proc baseTypeSize*(x: Any): int {.inline.} =$/;"	t
basename	$NIMLIB/core/macros.nim	/^proc basename*(a: NimNode): NimNode =$/;"	t
basename	$NIMLIB/posix/posix.nim	/^proc basename*(a1: cstring): cstring {.importc, header: "<libgen.h>".}$/;"	f
bdi	$NIMLIB/pure/htmlgen.nim	/^macro bdi*(e: varargs[untyped]): untyped =$/;"	t
bdo	$NIMLIB/pure/htmlgen.nim	/^macro bdo*(e: varargs[untyped]): untyped =$/;"	t
before	$NIMLIB/js/dom.nim	/^  proc before*(self: Node; element: Node): Node {.importjs: "#.$1(@)", varargs.}$/;"	f
beforeCodeReload	$NIMLIB/core/hotcodereloading.nim	/^  template beforeCodeReload*(body: untyped) =$/;"	t
between	$NIMLIB/pure/times.nim	/^proc between*(startDt, endDt: DateTime): TimeInterval =$/;"	t
big	$NIMLIB/pure/htmlgen.nim	/^macro big*(e: varargs[untyped]): untyped =$/;"	t
big	$NIMLIB/std/jsbigints.nim	/^func big*(integer: cstring): JsBigInt {.importjs: "BigInt(#)".} =$/;"	t
bigEndian16	$NIMLIB/pure/endians.nim	/^  proc bigEndian16*(outp, inp: pointer) {.inline.} = swapEndian16(outp, inp)$/;"	t
bigEndian32	$NIMLIB/pure/endians.nim	/^  proc bigEndian32*(outp, inp: pointer) {.inline.} = swapEndian32(outp, inp)$/;"	t
bigEndian64	$NIMLIB/pure/endians.nim	/^  proc bigEndian64*(outp, inp: pointer) {.inline.} = swapEndian64(outp, inp)$/;"	t
bin	$NIMLIB/system/nimscript.nim	/^      installExt*, bin*: seq[string] = @[] ## Nimble metadata.$/;"	t
binarySearch	$NIMLIB/pure/algorithm.nim	/^proc binarySearch*[T](a: openArray[T], key: T): int =$/;"	t
bindAddr	$NIMLIB/pure/asyncnet.nim	/^proc bindAddr*(socket: AsyncSocket, port = Port(0), address = "") {.$/;"	t
bindAddr	$NIMLIB/pure/nativesockets.nim	/^proc bindAddr*(socket: SocketHandle, name: ptr SockAddr,$/;"	f
bindAddr	$NIMLIB/pure/net.nim	/^proc bindAddr*(socket: Socket, port = Port(0), address = "") {.$/;"	t
bindMethod	$NIMLIB/js/jsffi.nim	/^macro bindMethod*(procedure: typed): auto =$/;"	t
bindSocket	$NIMLIB/posix/posix.nim	/^proc bindSocket*(a1: SocketHandle, a2: ptr SockAddr, a3: SockLen): cint {.$/;"	f
bindSocket	$NIMLIB/windows/winlean.nim	/^proc bindSocket*(s: SocketHandle, name: ptr SockAddr, namelen: SockLen): cint {.$/;"	f
bindSym	$NIMLIB/core/macros.nim	/^proc bindSym*(ident: string | NimNode, rule: BindSymRule = brClosed): NimNode {.$/;"	t
bindUnix	$NIMLIB/pure/asyncnet.nim	/^  proc bindUnix*(socket: AsyncSocket, path: string) {.$/;"	f
bindUnix	$NIMLIB/pure/net.nim	/^  proc bindUnix*(socket: Socket, path: string) =$/;"	t
binom	$NIMLIB/pure/math.nim	/^func binom*(n, k: int): int =$/;"	t
bioCtrlPending	$NIMLIB/wrappers/openssl.nim	/^proc bioCtrlPending*(b: BIO): cint{.cdecl, dynlib: DLLUtilName, importc: "BIO_ctrl_pending".}$/;"	f
bioFreeAll	$NIMLIB/wrappers/openssl.nim	/^proc bioFreeAll*(b: BIO){.cdecl, dynlib: DLLUtilName, importc: "BIO_free_all".}$/;"	f
bioNew	$NIMLIB/wrappers/openssl.nim	/^proc bioNew*(b: PBIO_METHOD): BIO{.cdecl, dynlib: DLLUtilName, importc: "BIO_new".}$/;"	f
bioRead	$NIMLIB/wrappers/openssl.nim	/^proc bioRead*(b: BIO, Buf: cstring, length: cint): cint{.cdecl,$/;"	f
bioSMem	$NIMLIB/wrappers/openssl.nim	/^proc bioSMem*(): PBIO_METHOD{.cdecl, dynlib: DLLUtilName, importc: "BIO_s_mem".}$/;"	f
bioWrite	$NIMLIB/wrappers/openssl.nim	/^proc bioWrite*(b: BIO, Buf: cstring, length: cint): cint{.cdecl,$/;"	f
bitand	$NIMLIB/pure/bitops.nim	/^macro bitand*[T: SomeInteger](x, y: T; z: varargs[T]): T =$/;"	t
bitor	$NIMLIB/pure/bitops.nim	/^macro bitor*[T: SomeInteger](x, y: T; z: varargs[T]): T =$/;"	t
bitslice	$NIMLIB/pure/bitops.nim	/^proc bitslice*[T: SomeInteger](v: var T; slice: Slice[int]) {.inline, since: (1, 3).} =$/;"	t
bitsliced	$NIMLIB/pure/bitops.nim	/^func bitsliced*[T: SomeInteger](v: T; slice: Slice[int]): T {.inline, since: (1, 3).} =$/;"	t
bitxor	$NIMLIB/pure/bitops.nim	/^macro bitxor*[T: SomeInteger](x, y: T; z: varargs[T]): T =$/;"	t
block	$NIMLIB/js/dom.nim	/^    `block`*: cstring$/;"	o
blockUntil	$NIMLIB/pure/concurrency/threadpool.nim	/^proc blockUntil*(fv: var FlowVarBaseObj) =$/;"	t
blockUntilAny	$NIMLIB/pure/concurrency/threadpool.nim	/^proc blockUntilAny*(flowVars: openArray[FlowVarBase]): int =$/;"	t
blockquote	$NIMLIB/pure/htmlgen.nim	/^macro blockquote*(e: varargs[untyped]): untyped =$/;"	t
blur	$NIMLIB/js/dom.nim	/^proc blur*(w: Window)$/;"	f
body	$NIMLIB/core/macros.nim	/^proc body*(someProc: NimNode): NimNode =$/;"	t
body	$NIMLIB/pure/htmlgen.nim	/^macro body*(e: varargs[untyped]): untyped =$/;"	t
body	$NIMLIB/pure/httpclient.nim	/^proc body*(response: Response): string =$/;"	t
bool	$NIMLIB/system/basic_types.nim	/^  bool* {.magic: "Bool".} = enum ## Built-in boolean type.$/;"	t
boolVal	$NIMLIB/core/macros.nim	/^proc boolVal*(n: NimNode): bool {.noSideEffect.} =$/;"	t
br	$NIMLIB/pure/htmlgen.nim	/^macro br*(e: varargs[untyped]): untyped =$/;"	t
broadcast	$NIMLIB/core/locks.nim	/^proc broadcast*(cond: var Cond) {.inline.} =$/;"	t
broadcastSysCond	$NIMLIB/std/private/syslocks.nim	/^  proc broadcastSysCond*(hEvent: var SysCond) {.stdcall, noSideEffect,$/;"	f
bsd_signal	$NIMLIB/posix/posix.nim	/^proc bsd_signal*(a1: cint, a2: proc (x: pointer) {.noconv.}) {.$/;"	f
buildCPU	$NIMLIB/system/nimscript.nim	/^  buildCPU* {.magic: "BuildCPU".}: string = ""$/;"	t
buildOS	$NIMLIB/system/nimscript.nim	/^  buildOS* {.magic: "BuildOS".}: string = ""$/;"	t
button	$NIMLIB/pure/htmlgen.nim	/^macro button*(e: varargs[untyped]): untyped =$/;"	t
byaddr	$NIMLIB/std/decls.nim	/^macro byaddr*(sect) =$/;"	t
byte	$NIMLIB/system.nim	/^  byte* = uint8 ## This is an alias for `uint8`, that is an unsigned$/;"	t
bytes	$NIMLIB/windows/winlean.nim	/^    bytes* {.importc: "u.Byte".}: array[0..15, char]$/;"	t
c_abort	$NIMLIB/system/ansi_c.nim	/^proc c_abort*() {.$/;"	f
c_calloc	$NIMLIB/system/ansi_c.nim	/^  proc c_calloc*(nmemb, size: csize_t): pointer {.$/;"	f
c_fflush	$NIMLIB/system/ansi_c.nim	/^proc c_fflush*(f: CFilePtr): cint {.$/;"	f
c_fprintf	$NIMLIB/system/ansi_c.nim	/^proc c_fprintf*(f: CFilePtr, frmt: cstring): cint {.$/;"	f
c_fputc	$NIMLIB/system/ansi_c.nim	/^proc c_fputc*(c: char, f: CFilePtr): cint {.$/;"	f
c_fputs	$NIMLIB/system/ansi_c.nim	/^proc c_fputs*(c: cstring, f: CFilePtr): cint {.$/;"	f
c_free	$NIMLIB/system/ansi_c.nim	/^  proc c_free*(p: pointer) {.$/;"	f
c_fwrite	$NIMLIB/system/ansi_c.nim	/^proc c_fwrite*(buf: pointer, size, n: csize_t, f: CFilePtr): csize_t {.$/;"	f
c_longjmp	$NIMLIB/system/ansi_c.nim	/^  proc c_longjmp*(jmpb: C_JmpBuf, retval: cint) {.$/;"	f
c_malloc	$NIMLIB/system/ansi_c.nim	/^  proc c_malloc*(size: csize_t): pointer {.$/;"	f
c_memchr	$NIMLIB/system/ansi_c.nim	/^proc c_memchr*(s: pointer, c: cint, n: csize_t): pointer {.$/;"	f
c_memcmp	$NIMLIB/system/ansi_c.nim	/^proc c_memcmp*(a, b: pointer, size: csize_t): cint {.$/;"	f
c_memcpy	$NIMLIB/system/ansi_c.nim	/^proc c_memcpy*(a, b: pointer, size: csize_t): pointer {.$/;"	f
c_memmove	$NIMLIB/system/ansi_c.nim	/^proc c_memmove*(a, b: pointer, size: csize_t): pointer {.$/;"	f
c_memset	$NIMLIB/system/ansi_c.nim	/^proc c_memset*(p: pointer, value: cint, size: csize_t): pointer {.$/;"	f
c_printf	$NIMLIB/system/ansi_c.nim	/^proc c_printf*(frmt: cstring): cint {.$/;"	f
c_raise	$NIMLIB/system/ansi_c.nim	/^proc c_raise*(sign: cint): cint {.importc: "raise", header: "<signal.h>".}$/;"	f
c_realloc	$NIMLIB/system/ansi_c.nim	/^  proc c_realloc*(p: pointer, newsize: csize_t): pointer {.$/;"	f
c_setjmp	$NIMLIB/system/ansi_c.nim	/^  proc c_setjmp*(jmpb: C_JmpBuf): cint {.$/;"	f
c_signal	$NIMLIB/system/ansi_c.nim	/^proc c_signal*(sign: cint, handler: CSighandlerT): CSighandlerT {.$/;"	f
c_sprintf	$NIMLIB/system/ansi_c.nim	/^proc c_sprintf*(buf, frmt: cstring): cint {.$/;"	f
c_strcmp	$NIMLIB/system/ansi_c.nim	/^proc c_strcmp*(a, b: cstring): cint {.$/;"	f
c_strlen	$NIMLIB/system/ansi_c.nim	/^proc c_strlen*(a: cstring): csize_t {.$/;"	f
callSoon	$NIMLIB/pure/asyncdispatch.nim	/^proc callSoon*(cbproc: proc () {.gcsafe.}) {.gcsafe.}$/;"	f
callSoon	$NIMLIB/pure/asyncfutures.nim	/^proc callSoon*(cbproc: proc () {.gcsafe.}) =$/;"	t
callback	$NIMLIB/pure/asyncfutures.nim	/^proc `callback=`*[T](future: Future[T],$/;"	o
callback	$NIMLIB/pure/asyncstreams.nim	/^proc `callback=`*[T](future: FutureStream[T],$/;"	o
callsite	$NIMLIB/core/macros.nim	/^proc callsite*(): NimNode {.magic: "NCallSite", benign, deprecated:$/;"	f
canShare	$NIMLIB/js/dom.nim	/^  proc canShare*(self: Navigator; data: cstring): bool           ## https:\/\/developer.mozilla./;"	f
cancelAnimationFrame	$NIMLIB/js/dom.nim	/^proc cancelAnimationFrame*(w: Window, id: int)$/;"	f
canvas	$NIMLIB/pure/htmlgen.nim	/^macro canvas*(e: varargs[untyped]): untyped =$/;"	t
cap	$NIMLIB/genode/signals.nim	/^proc cap*(sig: SignalHandler): SignalContextCapability =$/;"	t
capacity	$NIMLIB/system/seqs_v2.nim	/^func capacity*[T](self: seq[T]): int {.inline.} =$/;"	t
capacity	$NIMLIB/system/strs_v2.nim	/^func capacity*(self: string): int {.inline.} =$/;"	t
capitalize	$NIMLIB/pure/unicode.nim	/^proc capitalize*(s: string): string {.noSideEffect.} =$/;"	t
capitalizeAscii	$NIMLIB/pure/strutils.nim	/^func capitalizeAscii*(s: string): string {.rtl, extern: "nsuCapitalizeAscii".} =$/;"	t
caption	$NIMLIB/pure/htmlgen.nim	/^macro caption*(e: varargs[untyped]): untyped =$/;"	t
capture	$NIMLIB/pure/pegs.nim	/^func capture*(a: Peg = Peg(kind: pkEmpty)): Peg {.rtl, extern: "npegsCapture".} =$/;"	t
capture	$NIMLIB/pure/sugar.nim	/^macro capture*(locals: varargs[typed], body: untyped): untyped {.since: (1, 1).} =$/;"	t
captureBetween	$NIMLIB/pure/parseutils.nim	/^proc captureBetween*(s: string, first: char, second = '\\0', start = 0): string =$/;"	t
captureBounds	$NIMLIB/impure/nre.nim	/^func captureBounds*(pattern: RegexMatch): CaptureBounds = return CaptureBounds(pattern)$/;"	t
captureCount	$NIMLIB/impure/nre.nim	/^proc captureCount*(pattern: Regex): int =$/;"	t
captureNameId	$NIMLIB/impure/nre.nim	/^proc captureNameId*(pattern: Regex): Table[string, int] =$/;"	t
captures	$NIMLIB/impure/nre.nim	/^func captures*(pattern: RegexMatch): Captures = return Captures(pattern)$/;"	t
card	$NIMLIB/pure/collections/sets.nim	/^proc card*[A](s: OrderedSet[A]): int {.inline.} =$/;"	t
card	$NIMLIB/std/packedsets.nim	/^proc card*[A](s: PackedSet[A]): int {.inline.} =$/;"	t
card	$NIMLIB/system/setops.nim	/^func card*[T](x: set[T]): int {.magic: "Card".} =$/;"	t
cas	$NIMLIB/std/sysatomics.nim	/^  proc cas*[T: bool|int|ptr](p: ptr T; oldValue, newValue: T): bool$/;"	f
castToUnsigned	$NIMLIB/std/private/bitops_utils.nim	/^template castToUnsigned*[T: SomeUnsignedInt](x: T): T = x$/;"	t
catch	$NIMLIB/js/asyncjs.nim	/^  proc catch*[T](future: Future[T], onReject: OnReject): Future[void] =$/;"	t
catclose	$NIMLIB/posix/posix.nim	/^  proc catclose*(a1: Nl_catd): cint {.importc, header: "<nl_types.h>".}$/;"	f
catgets	$NIMLIB/posix/posix.nim	/^  proc catgets*(a1: Nl_catd, a2, a3: cint, a4: cstring): cstring {.$/;"	f
catopen	$NIMLIB/posix/posix.nim	/^  proc catopen*(a1: cstring, a2: cint): Nl_catd {.$/;"	f
cbrt	$NIMLIB/js/jscore.nim	/^proc cbrt*(m: MathLib, f: SomeFloat): SomeFloat {.importcpp.}$/;"	f
cbrt	$NIMLIB/pure/math.nim	/^  func cbrt*(x: float64): float64 {.importc: "cbrt", header: "<math.h>".} =$/;"	t
cceq	$NIMLIB/posix/termios.nim	/^template cceq*(val, c): untyped =$/;"	t
cchar	$NIMLIB/system/ctypes.nim	/^  cchar* {.importc: "char", nodecl.} = char$/;"	t
cd	$NIMLIB/system/nimscript.nim	/^proc cd*(dir: string) {.raises: [OSError].} =$/;"	t
cdouble	$NIMLIB/system/ctypes.nim	/^  cdouble* {.importc: "double", nodecl.} = float64$/;"	t
ceil	$NIMLIB/js/jscore.nim	/^proc ceil*(m: MathLib, f: SomeFloat): SomeFloat {.importcpp.}$/;"	f
ceil	$NIMLIB/pure/math.nim	/^  func ceil*(x: float64): float64 {.importc: "ceil", header: "<math.h>".} =$/;"	t
ceilDiv	$NIMLIB/pure/math.nim	/^func ceilDiv*[T: SomeInteger](x, y: T): T {.inline, since: (1, 5, 1).} =$/;"	t
center	$NIMLIB/pure/htmlgen.nim	/^macro center*(e: varargs[untyped]): untyped =$/;"	t
center	$NIMLIB/pure/strutils.nim	/^func center*(s: string, width: int, fillChar: char = ' '): string {.rtl,$/;"	t
cfGetIspeed	$NIMLIB/posix/termios.nim	/^proc cfGetIspeed*(termios: ptr Termios): Speed {.importc: "cfgetispeed",$/;"	f
cfGetOspeed	$NIMLIB/posix/termios.nim	/^proc cfGetOspeed*(termios: ptr Termios): Speed {.importc: "cfgetospeed",$/;"	f
cfSetIspeed	$NIMLIB/posix/termios.nim	/^proc cfSetIspeed*(termios: ptr Termios; speed: Speed): cint {.$/;"	f
cfSetOspeed	$NIMLIB/posix/termios.nim	/^proc cfSetOspeed*(termios: ptr Termios; speed: Speed): cint {.$/;"	f
cfloat	$NIMLIB/system/ctypes.nim	/^  cfloat* {.importc: "float", nodecl.} = float32$/;"	t
cgiError	$NIMLIB/pure/cgi.nim	/^proc cgiError*(msg: string) {.noreturn.} =$/;"	t
ch	$NIMLIB/pure/pegs.nim	/^func ch*(p: Peg): char = p.ch$/;"	t
changeFileExt	$NIMLIB/std/paths.nim	/^func changeFileExt*(filename: Path, ext: string): Path {.inline.} =$/;"	t
changeFileExt	$NIMLIB/std/private/ospaths2.nim	/^proc changeFileExt*(filename, ext: string): string {.$/;"	f
char	$NIMLIB/system/basic_types.nim	/^  char* {.magic: Char.}         ## Built-in 8 bit character type (unsigned).$/;"	t
charChoice	$NIMLIB/pure/pegs.nim	/^func charChoice*(p: Peg): ref set[char] = p.charChoice$/;"	t
charData	$NIMLIB/pure/parsexml.nim	/^template charData*(my: XmlParser): string =$/;"	t
charSet	$NIMLIB/pure/pegs.nim	/^func charSet*(s: set[char]): Peg {.rtl, extern: "npegs$1".} =$/;"	t
chdir	$NIMLIB/posix/posix.nim	/^proc chdir*(a1: cstring): cint {.importc, header: "<unistd.h>".}$/;"	f
check	$NIMLIB/pure/unittest.nim	/^macro check*(conditions: untyped): untyped =$/;"	t
checkTokenMembership	$NIMLIB/windows/winlean.nim	/^proc checkTokenMembership*(tokenHandle: Handle, sidToCheck: PSID,$/;"	f
checkValidity	$NIMLIB/js/dom.nim	/^proc checkValidity*(e: InputElement): bool$/;"	f
checked	$NIMLIB/js/dom.nim	/^proc checked*(n: Node): bool {.importcpp: "#.checked", nodecl.}$/;"	f
checkedSymAddr	$NIMLIB/pure/dynlib.nim	/^proc checkedSymAddr*(lib: LibHandle, name: cstring): pointer =$/;"	t
checkpoint	$NIMLIB/pure/unittest.nim	/^proc checkpoint*(msg: string) =$/;"	t
child	$NIMLIB/pure/xmltree.nim	/^proc child*(n: XmlNode, name: string): XmlNode =$/;"	t
children	$NIMLIB/core/macros.nim	/^iterator children*(n: NimNode): NimNode {.inline.} =$/;"	t
chmod	$NIMLIB/posix/posix.nim	/^proc chmod*(a1: cstring, a2: Mode): cint {.importc, header: "<sys\/stat.h>", sideEffect.}$/;"	f
chown	$NIMLIB/posix/posix.nim	/^proc chown*(a1: cstring, a2: Uid, a3: Gid): cint {.importc, header: "<unistd.h>".}$/;"	f
chr	$NIMLIB/system.nim	/^func chr*(u: range[0..255]): char {.magic: "Chr".} =$/;"	t
cint	$NIMLIB/system/ctypes.nim	/^  cint* {.importc: "int", nodecl.} = int32$/;"	t
cite	$NIMLIB/pure/htmlgen.nim	/^macro cite*(e: varargs[untyped]): untyped =$/;"	t
clamp	$NIMLIB/pure/math.nim	/^func clamp*[T](val: T, bounds: Slice[T]): T {.since: (1, 5), inline.} =$/;"	t
clamp	$NIMLIB/system/comparisons.nim	/^proc clamp*[T](x, a, b: T): T =$/;"	t
class	$NIMLIB/js/dom.nim	/^proc class*(n: Node): cstring {.importcpp: "#.className", nodecl.}$/;"	f
classify	$NIMLIB/pure/math.nim	/^func classify*(x: float): FloatClass =$/;"	t
clean	$NIMLIB/pure/asyncfutures.nim	/^proc clean*[T](future: FutureVar[T]) =$/;"	t
clear	$NIMLIB/js/dom.nim	/^proc clear*(s: Storage)$/;"	f
clear	$NIMLIB/js/jsconsole.nim	/^proc clear*(console: Console) {.importcpp, varargs.}$/;"	f
clear	$NIMLIB/pure/collections/deques.nim	/^proc clear*[T](deq: var Deque[T]) {.inline.} =$/;"	t
clear	$NIMLIB/pure/collections/heapqueue.nim	/^proc clear*[T](heap: var HeapQueue[T]) =$/;"	t
clear	$NIMLIB/pure/collections/sets.nim	/^proc clear*[A](s: var OrderedSet[A]) =$/;"	t
clear	$NIMLIB/pure/collections/sharedlist.nim	/^proc clear*[A](t: var SharedList[A]) =$/;"	t
clear	$NIMLIB/pure/collections/tables.nim	/^proc clear*[A](t: var CountTable[A]) =$/;"	t
clear	$NIMLIB/pure/concurrency/atomics.nim	/^  proc clear*(location: var AtomicFlag; order: MemoryOrder = moSequentiallyConsistent) {.importc/;"	t
clear	$NIMLIB/pure/httpcore.nim	/^proc clear*(headers: HttpHeaders) {.inline.} =$/;"	t
clear	$NIMLIB/pure/stats.nim	/^proc clear*(s: var RunningStat) =$/;"	t
clear	$NIMLIB/pure/strtabs.nim	/^proc clear*(s: StringTableRef, mode: StringTableMode) {.$/;"	f
clear	$NIMLIB/pure/xmltree.nim	/^proc clear*(n: var XmlNode) =$/;"	t
clear	$NIMLIB/std/packedsets.nim	/^proc clear*[A](result: var PackedSet[A]) =$/;"	t
clearBit	$NIMLIB/pure/bitops.nim	/^proc clearBit*[T: SomeInteger](v: var T; bit: BitsRange[T]) {.inline.} =$/;"	t
clearBits	$NIMLIB/pure/bitops.nim	/^macro clearBits*(v: typed; bits: varargs[typed]): untyped =$/;"	t
clearCallbacks	$NIMLIB/pure/asyncfutures.nim	/^proc clearCallbacks*(future: FutureBase) =$/;"	t
clearData	$NIMLIB/js/dom.nim	/^proc clearData*(dt: DataTransfer, format: cstring)$/;"	f
clearInterval	$NIMLIB/js/dom.nim	/^proc clearInterval*(w: Window, interval: Interval)$/;"	f
clearMask	$NIMLIB/pure/bitops.nim	/^proc clearMask*[T: SomeInteger](v: var T; slice: Slice[int]) {.inline, since: (1, 3).} =$/;"	t
clearMasked	$NIMLIB/pure/bitops.nim	/^func clearMasked*[T: SomeInteger](v: T; slice: Slice[int]): T {.inline, since: (1, 3).} =$/;"	t
clearScreen	$NIMLIB/wrappers/linenoise/linenoise.nim	/^proc clearScreen*() {.importc: "linenoiseClearScreen".}$/;"	f
clearTimeout	$NIMLIB/js/dom.nim	/^proc clearTimeout*(w: Window, timeout: TimeOut)$/;"	f
click	$NIMLIB/js/dom.nim	/^proc click*(e: Element)$/;"	f
clientData	$NIMLIB/pure/xmltree.nim	/^proc clientData*(n: XmlNode): int {.inline.} =$/;"	t
clientGetPskFunc	$NIMLIB/pure/net.nim	/^  proc clientGetPskFunc*(ctx: SslContext): SslClientGetPskFunc =$/;"	t
clientHeight	$NIMLIB/js/dom.nim	/^proc clientHeight*(): int {.$/;"	f
clientWidth	$NIMLIB/js/dom.nim	/^proc clientWidth*(): int {.$/;"	f
clock	$NIMLIB/posix/posix.nim	/^proc clock*(): Clock {.importc, header: "<time.h>", sideEffect.}$/;"	f
clock_getcpuclockid	$NIMLIB/posix/posix.nim	/^proc clock_getcpuclockid*(a1: Pid, a2: var ClockId): cint {.$/;"	f
clock_getres	$NIMLIB/posix/posix.nim	/^proc clock_getres*(a1: ClockId, a2: var Timespec): cint {.$/;"	f
clock_gettime	$NIMLIB/posix/posix.nim	/^proc clock_gettime*(a1: ClockId, a2: var Timespec): cint {.$/;"	f
clock_nanosleep	$NIMLIB/posix/posix.nim	/^proc clock_nanosleep*(a1: ClockId, a2: cint, a3: var Timespec,$/;"	f
clock_settime	$NIMLIB/posix/posix.nim	/^proc clock_settime*(a1: ClockId, a2: var Timespec): cint {.$/;"	f
clone	$NIMLIB/posix/linux.nim	/^proc clone*(fn: pointer; child_stack: pointer; flags: cint;$/;"	f
cloneNode	$NIMLIB/js/dom.nim	/^proc cloneNode*(n: Node, copyContent: bool): Node$/;"	f
clong	$NIMLIB/system/ctypes.nim	/^    clong* {.importc: "long", nodecl.} = int32$/;"	t
clongdouble	$NIMLIB/system/ctypes.nim	/^  clongdouble* {.importc: "long double", nodecl.} = BiggestFloat$/;"	t
clonglong	$NIMLIB/system/ctypes.nim	/^  clonglong* {.importc: "long long", nodecl.} = int64$/;"	t
close	$NIMLIB/js/dom.nim	/^proc close*(w: Window)$/;"	f
close	$NIMLIB/posix/posix.nim	/^proc close*(a1: cint | SocketHandle): cint {.importc, header: "<unistd.h>".}$/;"	f
close	$NIMLIB/pure/asyncdispatch.nim	/^  proc close*(ev: AsyncEvent) =$/;"	t
close	$NIMLIB/pure/asyncfile.nim	/^proc close*(f: AsyncFile) =$/;"	t
close	$NIMLIB/pure/asynchttpserver.nim	/^proc close*(server: AsyncHttpServer) =$/;"	t
close	$NIMLIB/pure/asyncnet.nim	/^proc close*(socket: AsyncSocket) =$/;"	t
close	$NIMLIB/pure/encodings.nim	/^proc close*(c: EncodingConverter) =$/;"	t
close	$NIMLIB/pure/httpclient.nim	/^proc close*(client: HttpClient | AsyncHttpClient) =$/;"	t
close	$NIMLIB/pure/ioselects/ioselectors_epoll.nim	/^proc close*[T](s: Selector[T]) =$/;"	t
close	$NIMLIB/pure/ioselects/ioselectors_kqueue.nim	/^proc close*[T](s: Selector[T]) =$/;"	t
close	$NIMLIB/pure/ioselects/ioselectors_poll.nim	/^proc close*[T](s: Selector[T]) =$/;"	t
close	$NIMLIB/pure/ioselects/ioselectors_select.nim	/^proc close*[T](s: Selector[T]) =$/;"	t
close	$NIMLIB/pure/lexbase.nim	/^proc close*(L: var BaseLexer) =$/;"	t
close	$NIMLIB/pure/memfiles.nim	/^proc close*(f: var MemFile) =$/;"	t
close	$NIMLIB/pure/nativesockets.nim	/^proc close*(socket: SocketHandle) =$/;"	t
close	$NIMLIB/pure/net.nim	/^proc close*(socket: Socket, flags = {SocketFlag.SafeDisconn}) =$/;"	t
close	$NIMLIB/pure/osproc.nim	/^proc close*(p: Process) {.rtl, extern: "nosp$1", raises: [IOError, OSError], tags: [WriteIOEffec/;"	f
close	$NIMLIB/pure/parsecfg.nim	/^proc close*(c: var CfgParser) {.rtl, extern: "npc$1".} =$/;"	t
close	$NIMLIB/pure/parsecsv.nim	/^proc close*(self: var CsvParser) {.inline.} =$/;"	t
close	$NIMLIB/pure/parsejson.nim	/^proc close*(my: var JsonParser) {.inline.} =$/;"	t
close	$NIMLIB/pure/parsexml.nim	/^proc close*(my: var XmlParser) {.inline.} =$/;"	t
close	$NIMLIB/pure/selectors.nim	/^  proc close*[T](s: Selector[T]) =$/;"	t
close	$NIMLIB/pure/streams.nim	/^proc close*(s: Stream) =$/;"	t
close	$NIMLIB/pure/unittest.nim	/^proc close*(formatter: JUnitOutputFormatter) =$/;"	t
close	$NIMLIB/std/syncio.nim	/^proc close*(f: File) {.tags: [], gcsafe.} =$/;"	t
close	$NIMLIB/system/channels_builtin.nim	/^proc close*[TMsg](c: var Channel[TMsg]) =$/;"	t
closeCCState	$NIMLIB/wrappers/tinyc.nim	/^proc closeCCState*(s: PccState) {.importc: "tcc_delete", cdecl.}$/;"	f
closeHandle	$NIMLIB/windows/winlean.nim	/^proc closeHandle*(hObject: Handle): WINBOOL {.stdcall, dynlib: "kernel32",$/;"	f
closeSocket	$NIMLIB/pure/asyncdispatch.nim	/^  proc closeSocket*(socket: AsyncFD) =$/;"	t
closedir	$NIMLIB/posix/posix.nim	/^proc closedir*(a1: ptr DIR): cint  {.importc, header: "<dirent.h>".}$/;"	f
closesocket	$NIMLIB/windows/winlean.nim	/^proc closesocket*(s: SocketHandle): cint {.$/;"	f
closest	$NIMLIB/js/dom.nim	/^  proc closest*(self: Node; cssSelector: cstring): Node {.importjs: "#.$1(#)".}$/;"	f
closureScope	$NIMLIB/system.nim	/^template closureScope*(body: untyped): untyped =$/;"	t
clz32	$NIMLIB/js/jscore.nim	/^proc clz32*(m: MathLib, f: SomeInteger): int {.importcpp.}$/;"	f
cmdLineRest	$NIMLIB/pure/parseopt.nim	/^  proc cmdLineRest*(p: OptParser): string {.rtl, extern: "npo$1".} =$/;"	t
cmp	$NIMLIB/packages/docutils/rstidx.nim	/^proc cmp*(a, b: IndexEntry): int =$/;"	t
cmp	$NIMLIB/pure/rationals.nim	/^func cmp*(x, y: Rational): int =$/;"	t
cmp	$NIMLIB/system.nim	/^proc cmp*[T](x, y: T): int =$/;"	t
cmpIgnoreCase	$NIMLIB/pure/cstrutils.nim	/^func cmpIgnoreCase*(a, b: cstring): int {.rtl, extern: "csuCmpIgnoreCase".} =$/;"	t
cmpIgnoreCase	$NIMLIB/pure/strutils.nim	/^func cmpIgnoreCase*(a, b: string): int {.rtl, extern: "nsuCmpIgnoreCase".} =$/;"	t
cmpIgnoreCaseImpl	$NIMLIB/std/private/strimpl.nim	/^template cmpIgnoreCaseImpl*[T: string | cstring](a, b: T,$/;"	m
cmpIgnoreStyle	$NIMLIB/pure/cstrutils.nim	/^func cmpIgnoreStyle*(a, b: cstring): int {.rtl, extern: "csuCmpIgnoreStyle".} =$/;"	t
cmpIgnoreStyle	$NIMLIB/pure/strutils.nim	/^func cmpIgnoreStyle*(a, b: string): int {.rtl, extern: "nsuCmpIgnoreStyle".} =$/;"	t
cmpIgnoreStyleImpl	$NIMLIB/std/private/strimpl.nim	/^template cmpIgnoreStyleImpl*[T: string | cstring](a, b: T,$/;"	m
cmpMem	$NIMLIB/system/memalloc.nim	/^  proc cmpMem*(a, b: pointer, size: Natural): int {.inline, noSideEffect,$/;"	f
cmpNimIdentifier	$NIMLIB/std/private/strimpl.nim	/^func cmpNimIdentifier*[T: string | cstring](a, b: T): int =$/;"	t
cmpPaths	$NIMLIB/std/private/ospaths2.nim	/^proc cmpPaths*(pathA, pathB: string): int {.$/;"	f
cmpRunesIgnoreCase	$NIMLIB/pure/unicode.nim	/^proc cmpRunesIgnoreCase*(a, b: string): int {.inline.} =$/;"	t
cmpic	$NIMLIB/system/nimscript.nim	/^proc cmpic*(a, b: string): int =$/;"	t
code	$NIMLIB/pure/htmlgen.nim	/^macro code*(e: varargs[untyped]): untyped =$/;"	t
code	$NIMLIB/pure/httpclient.nim	/^proc code*(response: Response | AsyncResponse): HttpCode$/;"	f
codePageToName	$NIMLIB/pure/encodings.nim	/^  proc codePageToName*(c: CodePage): string =$/;"	t
col	$NIMLIB/pure/htmlgen.nim	/^macro col*(e: varargs[untyped]): untyped =$/;"	t
col	$NIMLIB/pure/pegs.nim	/^func col*(nt: NonTerminal): int = nt.col$/;"	t
colAliceBlue	$NIMLIB/pure/colors.nim	/^  colAliceBlue* = Color(0xF0F8FF)$/;"	t
colAntiqueWhite	$NIMLIB/pure/colors.nim	/^  colAntiqueWhite* = Color(0xFAEBD7)$/;"	t
colAqua	$NIMLIB/pure/colors.nim	/^  colAqua* = Color(0x00FFFF)$/;"	t
colAquamarine	$NIMLIB/pure/colors.nim	/^  colAquamarine* = Color(0x7FFFD4)$/;"	t
colAzure	$NIMLIB/pure/colors.nim	/^  colAzure* = Color(0xF0FFFF)$/;"	t
colBeige	$NIMLIB/pure/colors.nim	/^  colBeige* = Color(0xF5F5DC)$/;"	t
colBisque	$NIMLIB/pure/colors.nim	/^  colBisque* = Color(0xFFE4C4)$/;"	t
colBlack	$NIMLIB/pure/colors.nim	/^  colBlack* = Color(0x000000)$/;"	t
colBlanchedAlmond	$NIMLIB/pure/colors.nim	/^  colBlanchedAlmond* = Color(0xFFEBCD)$/;"	t
colBlue	$NIMLIB/pure/colors.nim	/^  colBlue* = Color(0x0000FF)$/;"	t
colBlueViolet	$NIMLIB/pure/colors.nim	/^  colBlueViolet* = Color(0x8A2BE2)$/;"	t
colBrown	$NIMLIB/pure/colors.nim	/^  colBrown* = Color(0xA52A2A)$/;"	t
colBurlyWood	$NIMLIB/pure/colors.nim	/^  colBurlyWood* = Color(0xDEB887)$/;"	t
colCadetBlue	$NIMLIB/pure/colors.nim	/^  colCadetBlue* = Color(0x5F9EA0)$/;"	t
colChartreuse	$NIMLIB/pure/colors.nim	/^  colChartreuse* = Color(0x7FFF00)$/;"	t
colChocolate	$NIMLIB/pure/colors.nim	/^  colChocolate* = Color(0xD2691E)$/;"	t
colCoral	$NIMLIB/pure/colors.nim	/^  colCoral* = Color(0xFF7F50)$/;"	t
colCornflowerBlue	$NIMLIB/pure/colors.nim	/^  colCornflowerBlue* = Color(0x6495ED)$/;"	t
colCornsilk	$NIMLIB/pure/colors.nim	/^  colCornsilk* = Color(0xFFF8DC)$/;"	t
colCrimson	$NIMLIB/pure/colors.nim	/^  colCrimson* = Color(0xDC143C)$/;"	t
colCyan	$NIMLIB/pure/colors.nim	/^  colCyan* = Color(0x00FFFF)$/;"	t
colDarkBlue	$NIMLIB/pure/colors.nim	/^  colDarkBlue* = Color(0x00008B)$/;"	t
colDarkCyan	$NIMLIB/pure/colors.nim	/^  colDarkCyan* = Color(0x008B8B)$/;"	t
colDarkGoldenRod	$NIMLIB/pure/colors.nim	/^  colDarkGoldenRod* = Color(0xB8860B)$/;"	t
colDarkGray	$NIMLIB/pure/colors.nim	/^  colDarkGray* = Color(0xA9A9A9)$/;"	t
colDarkGreen	$NIMLIB/pure/colors.nim	/^  colDarkGreen* = Color(0x006400)$/;"	t
colDarkGrey	$NIMLIB/pure/colors.nim	/^  colDarkGrey* = Color(0xA9A9A9)$/;"	t
colDarkKhaki	$NIMLIB/pure/colors.nim	/^  colDarkKhaki* = Color(0xBDB76B)$/;"	t
colDarkMagenta	$NIMLIB/pure/colors.nim	/^  colDarkMagenta* = Color(0x8B008B)$/;"	t
colDarkOliveGreen	$NIMLIB/pure/colors.nim	/^  colDarkOliveGreen* = Color(0x556B2F)$/;"	t
colDarkOrchid	$NIMLIB/pure/colors.nim	/^  colDarkOrchid* = Color(0x9932CC)$/;"	t
colDarkRed	$NIMLIB/pure/colors.nim	/^  colDarkRed* = Color(0x8B0000)$/;"	t
colDarkSalmon	$NIMLIB/pure/colors.nim	/^  colDarkSalmon* = Color(0xE9967A)$/;"	t
colDarkSeaGreen	$NIMLIB/pure/colors.nim	/^  colDarkSeaGreen* = Color(0x8FBC8F)$/;"	t
colDarkSlateBlue	$NIMLIB/pure/colors.nim	/^  colDarkSlateBlue* = Color(0x483D8B)$/;"	t
colDarkSlateGray	$NIMLIB/pure/colors.nim	/^  colDarkSlateGray* = Color(0x2F4F4F)$/;"	t
colDarkSlateGrey	$NIMLIB/pure/colors.nim	/^  colDarkSlateGrey* = Color(0x2F4F4F)$/;"	t
colDarkTurquoise	$NIMLIB/pure/colors.nim	/^  colDarkTurquoise* = Color(0x00CED1)$/;"	t
colDarkViolet	$NIMLIB/pure/colors.nim	/^  colDarkViolet* = Color(0x9400D3)$/;"	t
colDarkorange	$NIMLIB/pure/colors.nim	/^  colDarkorange* = Color(0xFF8C00)$/;"	t
colDeepPink	$NIMLIB/pure/colors.nim	/^  colDeepPink* = Color(0xFF1493)$/;"	t
colDeepSkyBlue	$NIMLIB/pure/colors.nim	/^  colDeepSkyBlue* = Color(0x00BFFF)$/;"	t
colDimGray	$NIMLIB/pure/colors.nim	/^  colDimGray* = Color(0x696969)$/;"	t
colDimGrey	$NIMLIB/pure/colors.nim	/^  colDimGrey* = Color(0x696969)$/;"	t
colDodgerBlue	$NIMLIB/pure/colors.nim	/^  colDodgerBlue* = Color(0x1E90FF)$/;"	t
colFireBrick	$NIMLIB/pure/colors.nim	/^  colFireBrick* = Color(0xB22222)$/;"	t
colFloralWhite	$NIMLIB/pure/colors.nim	/^  colFloralWhite* = Color(0xFFFAF0)$/;"	t
colForestGreen	$NIMLIB/pure/colors.nim	/^  colForestGreen* = Color(0x228B22)$/;"	t
colFuchsia	$NIMLIB/pure/colors.nim	/^  colFuchsia* = Color(0xFF00FF)$/;"	t
colGainsboro	$NIMLIB/pure/colors.nim	/^  colGainsboro* = Color(0xDCDCDC)$/;"	t
colGhostWhite	$NIMLIB/pure/colors.nim	/^  colGhostWhite* = Color(0xF8F8FF)$/;"	t
colGold	$NIMLIB/pure/colors.nim	/^  colGold* = Color(0xFFD700)$/;"	t
colGoldenRod	$NIMLIB/pure/colors.nim	/^  colGoldenRod* = Color(0xDAA520)$/;"	t
colGray	$NIMLIB/pure/colors.nim	/^  colGray* = Color(0x808080)$/;"	t
colGreen	$NIMLIB/pure/colors.nim	/^  colGreen* = Color(0x008000)$/;"	t
colGreenYellow	$NIMLIB/pure/colors.nim	/^  colGreenYellow* = Color(0xADFF2F)$/;"	t
colGrey	$NIMLIB/pure/colors.nim	/^  colGrey* = Color(0x808080)$/;"	t
colHoneyDew	$NIMLIB/pure/colors.nim	/^  colHoneyDew* = Color(0xF0FFF0)$/;"	t
colHotPink	$NIMLIB/pure/colors.nim	/^  colHotPink* = Color(0xFF69B4)$/;"	t
colIndianRed	$NIMLIB/pure/colors.nim	/^  colIndianRed* = Color(0xCD5C5C)$/;"	t
colIndigo	$NIMLIB/pure/colors.nim	/^  colIndigo* = Color(0x4B0082)$/;"	t
colIvory	$NIMLIB/pure/colors.nim	/^  colIvory* = Color(0xFFFFF0)$/;"	t
colKhaki	$NIMLIB/pure/colors.nim	/^  colKhaki* = Color(0xF0E68C)$/;"	t
colLavender	$NIMLIB/pure/colors.nim	/^  colLavender* = Color(0xE6E6FA)$/;"	t
colLavenderBlush	$NIMLIB/pure/colors.nim	/^  colLavenderBlush* = Color(0xFFF0F5)$/;"	t
colLawnGreen	$NIMLIB/pure/colors.nim	/^  colLawnGreen* = Color(0x7CFC00)$/;"	t
colLemonChiffon	$NIMLIB/pure/colors.nim	/^  colLemonChiffon* = Color(0xFFFACD)$/;"	t
colLightBlue	$NIMLIB/pure/colors.nim	/^  colLightBlue* = Color(0xADD8E6)$/;"	t
colLightCoral	$NIMLIB/pure/colors.nim	/^  colLightCoral* = Color(0xF08080)$/;"	t
colLightCyan	$NIMLIB/pure/colors.nim	/^  colLightCyan* = Color(0xE0FFFF)$/;"	t
colLightGoldenRodYellow	$NIMLIB/pure/colors.nim	/^  colLightGoldenRodYellow* = Color(0xFAFAD2)$/;"	t
colLightGray	$NIMLIB/pure/colors.nim	/^  colLightGray* = Color(0xD3D3D3)$/;"	t
colLightGreen	$NIMLIB/pure/colors.nim	/^  colLightGreen* = Color(0x90EE90)$/;"	t
colLightGrey	$NIMLIB/pure/colors.nim	/^  colLightGrey* = Color(0xD3D3D3)$/;"	t
colLightPink	$NIMLIB/pure/colors.nim	/^  colLightPink* = Color(0xFFB6C1)$/;"	t
colLightSalmon	$NIMLIB/pure/colors.nim	/^  colLightSalmon* = Color(0xFFA07A)$/;"	t
colLightSeaGreen	$NIMLIB/pure/colors.nim	/^  colLightSeaGreen* = Color(0x20B2AA)$/;"	t
colLightSkyBlue	$NIMLIB/pure/colors.nim	/^  colLightSkyBlue* = Color(0x87CEFA)$/;"	t
colLightSlateGray	$NIMLIB/pure/colors.nim	/^  colLightSlateGray* = Color(0x778899)$/;"	t
colLightSlateGrey	$NIMLIB/pure/colors.nim	/^  colLightSlateGrey* = Color(0x778899)$/;"	t
colLightSteelBlue	$NIMLIB/pure/colors.nim	/^  colLightSteelBlue* = Color(0xB0C4DE)$/;"	t
colLightYellow	$NIMLIB/pure/colors.nim	/^  colLightYellow* = Color(0xFFFFE0)$/;"	t
colLime	$NIMLIB/pure/colors.nim	/^  colLime* = Color(0x00FF00)$/;"	t
colLimeGreen	$NIMLIB/pure/colors.nim	/^  colLimeGreen* = Color(0x32CD32)$/;"	t
colLinen	$NIMLIB/pure/colors.nim	/^  colLinen* = Color(0xFAF0E6)$/;"	t
colMagenta	$NIMLIB/pure/colors.nim	/^  colMagenta* = Color(0xFF00FF)$/;"	t
colMaroon	$NIMLIB/pure/colors.nim	/^  colMaroon* = Color(0x800000)$/;"	t
colMediumAquaMarine	$NIMLIB/pure/colors.nim	/^  colMediumAquaMarine* = Color(0x66CDAA)$/;"	t
colMediumBlue	$NIMLIB/pure/colors.nim	/^  colMediumBlue* = Color(0x0000CD)$/;"	t
colMediumOrchid	$NIMLIB/pure/colors.nim	/^  colMediumOrchid* = Color(0xBA55D3)$/;"	t
colMediumPurple	$NIMLIB/pure/colors.nim	/^  colMediumPurple* = Color(0x9370DB)$/;"	t
colMediumSeaGreen	$NIMLIB/pure/colors.nim	/^  colMediumSeaGreen* = Color(0x3CB371)$/;"	t
colMediumSlateBlue	$NIMLIB/pure/colors.nim	/^  colMediumSlateBlue* = Color(0x7B68EE)$/;"	t
colMediumSpringGreen	$NIMLIB/pure/colors.nim	/^  colMediumSpringGreen* = Color(0x00FA9A)$/;"	t
colMediumTurquoise	$NIMLIB/pure/colors.nim	/^  colMediumTurquoise* = Color(0x48D1CC)$/;"	t
colMediumVioletRed	$NIMLIB/pure/colors.nim	/^  colMediumVioletRed* = Color(0xC71585)$/;"	t
colMidnightBlue	$NIMLIB/pure/colors.nim	/^  colMidnightBlue* = Color(0x191970)$/;"	t
colMintCream	$NIMLIB/pure/colors.nim	/^  colMintCream* = Color(0xF5FFFA)$/;"	t
colMistyRose	$NIMLIB/pure/colors.nim	/^  colMistyRose* = Color(0xFFE4E1)$/;"	t
colMoccasin	$NIMLIB/pure/colors.nim	/^  colMoccasin* = Color(0xFFE4B5)$/;"	t
colNavajoWhite	$NIMLIB/pure/colors.nim	/^  colNavajoWhite* = Color(0xFFDEAD)$/;"	t
colNavy	$NIMLIB/pure/colors.nim	/^  colNavy* = Color(0x000080)$/;"	t
colOldLace	$NIMLIB/pure/colors.nim	/^  colOldLace* = Color(0xFDF5E6)$/;"	t
colOlive	$NIMLIB/pure/colors.nim	/^  colOlive* = Color(0x808000)$/;"	t
colOliveDrab	$NIMLIB/pure/colors.nim	/^  colOliveDrab* = Color(0x6B8E23)$/;"	t
colOrange	$NIMLIB/pure/colors.nim	/^  colOrange* = Color(0xFFA500)$/;"	t
colOrangeRed	$NIMLIB/pure/colors.nim	/^  colOrangeRed* = Color(0xFF4500)$/;"	t
colOrchid	$NIMLIB/pure/colors.nim	/^  colOrchid* = Color(0xDA70D6)$/;"	t
colPaleGoldenRod	$NIMLIB/pure/colors.nim	/^  colPaleGoldenRod* = Color(0xEEE8AA)$/;"	t
colPaleGreen	$NIMLIB/pure/colors.nim	/^  colPaleGreen* = Color(0x98FB98)$/;"	t
colPaleTurquoise	$NIMLIB/pure/colors.nim	/^  colPaleTurquoise* = Color(0xAFEEEE)$/;"	t
colPaleVioletRed	$NIMLIB/pure/colors.nim	/^  colPaleVioletRed* = Color(0xDB7093)$/;"	t
colPapayaWhip	$NIMLIB/pure/colors.nim	/^  colPapayaWhip* = Color(0xFFEFD5)$/;"	t
colPeachPuff	$NIMLIB/pure/colors.nim	/^  colPeachPuff* = Color(0xFFDAB9)$/;"	t
colPeru	$NIMLIB/pure/colors.nim	/^  colPeru* = Color(0xCD853F)$/;"	t
colPink	$NIMLIB/pure/colors.nim	/^  colPink* = Color(0xFFC0CB)$/;"	t
colPlum	$NIMLIB/pure/colors.nim	/^  colPlum* = Color(0xDDA0DD)$/;"	t
colPowderBlue	$NIMLIB/pure/colors.nim	/^  colPowderBlue* = Color(0xB0E0E6)$/;"	t
colPurple	$NIMLIB/pure/colors.nim	/^  colPurple* = Color(0x800080)$/;"	t
colRebeccaPurple	$NIMLIB/pure/colors.nim	/^  colRebeccaPurple* = Color(0x663399)$/;"	t
colRed	$NIMLIB/pure/colors.nim	/^  colRed* = Color(0xFF0000)$/;"	t
colRosyBrown	$NIMLIB/pure/colors.nim	/^  colRosyBrown* = Color(0xBC8F8F)$/;"	t
colRoyalBlue	$NIMLIB/pure/colors.nim	/^  colRoyalBlue* = Color(0x4169E1)$/;"	t
colSaddleBrown	$NIMLIB/pure/colors.nim	/^  colSaddleBrown* = Color(0x8B4513)$/;"	t
colSalmon	$NIMLIB/pure/colors.nim	/^  colSalmon* = Color(0xFA8072)$/;"	t
colSandyBrown	$NIMLIB/pure/colors.nim	/^  colSandyBrown* = Color(0xF4A460)$/;"	t
colSeaGreen	$NIMLIB/pure/colors.nim	/^  colSeaGreen* = Color(0x2E8B57)$/;"	t
colSeaShell	$NIMLIB/pure/colors.nim	/^  colSeaShell* = Color(0xFFF5EE)$/;"	t
colSienna	$NIMLIB/pure/colors.nim	/^  colSienna* = Color(0xA0522D)$/;"	t
colSilver	$NIMLIB/pure/colors.nim	/^  colSilver* = Color(0xC0C0C0)$/;"	t
colSkyBlue	$NIMLIB/pure/colors.nim	/^  colSkyBlue* = Color(0x87CEEB)$/;"	t
colSlateBlue	$NIMLIB/pure/colors.nim	/^  colSlateBlue* = Color(0x6A5ACD)$/;"	t
colSlateGray	$NIMLIB/pure/colors.nim	/^  colSlateGray* = Color(0x708090)$/;"	t
colSlateGrey	$NIMLIB/pure/colors.nim	/^  colSlateGrey* = Color(0x708090)$/;"	t
colSnow	$NIMLIB/pure/colors.nim	/^  colSnow* = Color(0xFFFAFA)$/;"	t
colSpringGreen	$NIMLIB/pure/colors.nim	/^  colSpringGreen* = Color(0x00FF7F)$/;"	t
colSteelBlue	$NIMLIB/pure/colors.nim	/^  colSteelBlue* = Color(0x4682B4)$/;"	t
colTan	$NIMLIB/pure/colors.nim	/^  colTan* = Color(0xD2B48C)$/;"	t
colTeal	$NIMLIB/pure/colors.nim	/^  colTeal* = Color(0x008080)$/;"	t
colThistle	$NIMLIB/pure/colors.nim	/^  colThistle* = Color(0xD8BFD8)$/;"	t
colTomato	$NIMLIB/pure/colors.nim	/^  colTomato* = Color(0xFF6347)$/;"	t
colTurquoise	$NIMLIB/pure/colors.nim	/^  colTurquoise* = Color(0x40E0D0)$/;"	t
colViolet	$NIMLIB/pure/colors.nim	/^  colViolet* = Color(0xEE82EE)$/;"	t
colWheat	$NIMLIB/pure/colors.nim	/^  colWheat* = Color(0xF5DEB3)$/;"	t
colWhite	$NIMLIB/pure/colors.nim	/^  colWhite* = Color(0xFFFFFF)$/;"	t
colWhiteSmoke	$NIMLIB/pure/colors.nim	/^  colWhiteSmoke* = Color(0xF5F5F5)$/;"	t
colYellow	$NIMLIB/pure/colors.nim	/^  colYellow* = Color(0xFFFF00)$/;"	t
colYellowGreen	$NIMLIB/pure/colors.nim	/^  colYellowGreen* = Color(0x9ACD32)$/;"	t
colgroup	$NIMLIB/pure/htmlgen.nim	/^macro colgroup*(e: varargs[untyped]): untyped =$/;"	t
collect	$NIMLIB/pure/sugar.nim	/^macro collect*(init, body: untyped): untyped {.since: (1, 1).} =$/;"	t
combine	$NIMLIB/pure/uri.nim	/^func combine*(uris: varargs[Uri]): Uri =$/;"	t
commandLineParams	$NIMLIB/std/cmdline.nim	/^  proc commandLineParams*(): seq[string] {.error:$/;"	f
commitHead	$NIMLIB/std/private/gitutils.nim	/^const commitHead* = "HEAD"$/;"	t
commitedLen	$NIMLIB/pure/reservedmem.nim	/^func commitedLen*[T](s: ReservedMemSeq[T]): int =$/;"	t
commonAttr	$NIMLIB/pure/htmlgen.nim	/^  commonAttr* = coreAttr & eventAttr & ariaAttr  ## HTML DOM Common Attributes$/;"	t
commonPrefixLen	$NIMLIB/pure/collections/critbits.nim	/^func commonPrefixLen*[T](c: CritBitTree[T]): int {.inline, since((1, 3)).} =$/;"	t
compareDocumentPosition	$NIMLIB/js/dom.nim	/^proc compareDocumentPosition*(n: Node, otherNode:Node): int$/;"	f
compareExchange	$NIMLIB/pure/concurrency/atomics.nim	/^  proc compareExchange*[T](location: var Atomic[T]; expected: var T; desired: T; success, failur/;"	f
compareExchangeWeak	$NIMLIB/pure/concurrency/atomics.nim	/^  proc compareExchangeWeak*[T](location: var Atomic[T]; expected: var T; desired: T; success, fa/;"	f
compile	$NIMLIB/wrappers/pcre.nim	/^proc compile*(pattern: cstring,$/;"	f
compile2	$NIMLIB/wrappers/pcre.nim	/^proc compile2*(pattern: cstring,$/;"	f
compileOption	$NIMLIB/system/compilation.nim	/^proc compileOption*(option: string): bool {.$/;"	f
compileString	$NIMLIB/wrappers/tinyc.nim	/^proc compileString*(s: PccState, buf: cstring): cint {.cdecl,$/;"	f
compiles	$NIMLIB/system/compilation.nim	/^proc compiles*(x: untyped): bool {.magic: "Compiles", noSideEffect, compileTime.} =$/;"	t
complement	$NIMLIB/std/setutils.nim	/^func complement*[T](s: set[T]): set[T] {.inline.} =$/;"	t
complete	$NIMLIB/pure/asyncfutures.nim	/^proc complete*[T](future: Future[T], val: T) =$/;"	t
complete	$NIMLIB/pure/asyncstreams.nim	/^proc complete*[T](future: FutureStream[T]) =$/;"	t
completePass2	$NIMLIB/packages/docutils/rst.nim	/^proc completePass2*(s: PRstSharedState) =$/;"	t
complex	$NIMLIB/pure/complex.nim	/^func complex*[T: SomeFloat](re: T; im: T = 0.0): Complex[T] =$/;"	t
complex32	$NIMLIB/pure/complex.nim	/^func complex32*(re: float32; im: float32 = 0.0): Complex32 =$/;"	t
complex64	$NIMLIB/pure/complex.nim	/^func complex64*(re: float64; im: float64 = 0.0): Complex64 =$/;"	t
computeDelta	$NIMLIB/std/private/dragonbox.nim	/^proc computeDelta*(pow10: uint64x2; betaMinus1: int32): uint32 {.inline.} =$/;"	t
computePow10	$NIMLIB/std/private/dragonbox.nim	/^proc computePow10*(k: int32): uint64x2 {.inline.} =$/;"	t
concat	$NIMLIB/pure/collections/sequtils.nim	/^func concat*[T](seqs: varargs[seq[T]]): seq[T] =$/;"	t
config	$NIMLIB/wrappers/pcre.nim	/^proc config*(what: cint,$/;"	f
confirm	$NIMLIB/js/dom.nim	/^proc confirm*(w: Window, msg: cstring): bool$/;"	f
confstr	$NIMLIB/posix/posix.nim	/^proc confstr*(a1: cint, a2: cstring, a3: int): int {.importc, header: "<unistd.h>".}$/;"	f
conjugate	$NIMLIB/pure/complex.nim	/^func conjugate*[T](z: Complex[T]): Complex[T] =$/;"	t
connect	$NIMLIB/posix/posix.nim	/^proc connect*(a1: SocketHandle, a2: ptr SockAddr, a3: SockLen): cint {.$/;"	f
connect	$NIMLIB/pure/asyncdispatch.nim	/^proc connect*(socket: AsyncFD, address: string, port: Port,$/;"	f
connect	$NIMLIB/pure/asyncnet.nim	/^proc connect*(socket: AsyncSocket, address: string, port: Port) {.async.} =$/;"	t
connect	$NIMLIB/pure/net.nim	/^proc connect*(socket: Socket, address: string,$/;"	f
connect	$NIMLIB/windows/winlean.nim	/^proc connect*(s: SocketHandle, name: ptr SockAddr, namelen: SockLen): cint {.$/;"	f
connectUnix	$NIMLIB/pure/asyncnet.nim	/^  proc connectUnix*(socket: AsyncSocket, path: string): owned(Future[void]) =$/;"	t
connectUnix	$NIMLIB/pure/net.nim	/^  proc connectUnix*(socket: Socket, path: string) =$/;"	t
console	$NIMLIB/js/jsconsole.nim	/^var console* {.importc, nodecl.}: Console$/;"	t
construct	$NIMLIB/genode/constructibles.nim	/^proc construct*[T](x: Constructible[T]) {.importcpp.}$/;"	f
constructDouble	$NIMLIB/std/private/dragonbox.nim	/^proc constructDouble*(value: ValueType): Double {.constructor.} =$/;"	t
constructed	$NIMLIB/genode/constructibles.nim	/^proc constructed*[T](x: Constructible[T]): bool {.importcpp.}$/;"	f
contains	$NIMLIB/core/macrocache.nim	/^proc contains*(t: CacheTable; key: string): bool {.inline.} =$/;"	t
contains	$NIMLIB/impure/nre.nim	/^proc contains*(str: string, pattern: Regex, start = 0, endpos = int.high): bool =$/;"	t
contains	$NIMLIB/impure/re.nim	/^proc contains*(s: string, pattern: Regex, start = 0): bool {.inline.} =$/;"	t
contains	$NIMLIB/js/dom.nim	/^proc contains*(n: Node): bool$/;"	f
contains	$NIMLIB/js/jsre.nim	/^func contains*(pattern: cstring; self: RegExp): bool =$/;"	t
contains	$NIMLIB/pure/asyncdispatch.nim	/^  proc contains*(disp: PDispatcher, fd: AsyncFD): bool =$/;"	t
contains	$NIMLIB/pure/collections/critbits.nim	/^func contains*[T](c: CritBitTree[T], key: string): bool {.inline.} =$/;"	t
contains	$NIMLIB/pure/collections/deques.nim	/^proc contains*[T](deq: Deque[T], item: T): bool {.inline.} =$/;"	t
contains	$NIMLIB/pure/collections/lists.nim	/^proc contains*[T](L: SomeLinkedCollection[T], value: T): bool {.inline.} =$/;"	t
contains	$NIMLIB/pure/collections/sets.nim	/^proc contains*[A](s: OrderedSet[A], key: A): bool =$/;"	t
contains	$NIMLIB/pure/collections/tables.nim	/^proc contains*[A](t: CountTable[A], key: A): bool =$/;"	t
contains	$NIMLIB/pure/httpcore.nim	/^func contains*(values: HttpHeaderValues, value: string): bool =$/;"	t
contains	$NIMLIB/pure/ioselects/ioselectors_epoll.nim	/^proc contains*[T](s: Selector[T], fd: SocketHandle|int): bool {.inline.} =$/;"	t
contains	$NIMLIB/pure/ioselects/ioselectors_kqueue.nim	/^proc contains*[T](s: Selector[T], fd: SocketHandle|int): bool {.inline.} =$/;"	t
contains	$NIMLIB/pure/ioselects/ioselectors_poll.nim	/^proc contains*[T](s: Selector[T], fd: SocketHandle|int): bool {.inline.} =$/;"	t
contains	$NIMLIB/pure/ioselects/ioselectors_select.nim	/^proc contains*[T](s: Selector[T], fd: SocketHandle|int): bool {.inline.} =$/;"	t
contains	$NIMLIB/pure/json.nim	/^proc contains*(node: JsonNode, val: JsonNode): bool =$/;"	t
contains	$NIMLIB/pure/pegs.nim	/^func contains*(s: string, pattern: Peg, start = 0): bool {.$/;"	t
contains	$NIMLIB/pure/selectors.nim	/^  proc contains*[T](s: Selector[T], fd: SocketHandle|int): bool {.inline.} =$/;"	t
contains	$NIMLIB/pure/strtabs.nim	/^proc contains*(t: StringTableRef, key: string): bool =$/;"	t
contains	$NIMLIB/pure/strutils.nim	/^func contains*(s: string, chars: set[char]): bool =$/;"	t
contains	$NIMLIB/std/packedsets.nim	/^proc contains*[A](s: PackedSet[A], key: A): bool =$/;"	t
contains	$NIMLIB/system.nim	/^proc contains*[U, V, W](s: HSlice[U, V], value: W): bool {.noSideEffect, inline.} =$/;"	t
contains	$NIMLIB/system/setops.nim	/^func contains*[T](x: set[T], y: T): bool {.magic: "InSet".} =$/;"	t
containsOrIncl	$NIMLIB/pure/collections/critbits.nim	/^proc containsOrIncl*[T](c: var CritBitTree[T], key: string, val: sink T): bool =$/;"	t
containsOrIncl	$NIMLIB/pure/collections/sets.nim	/^proc containsOrIncl*[A](s: var OrderedSet[A], key: A): bool =$/;"	t
containsOrIncl	$NIMLIB/std/packedsets.nim	/^proc containsOrIncl*[A](s: var PackedSet[A], key: A): bool =$/;"	t
contentLength	$NIMLIB/pure/httpclient.nim	/^proc contentLength*(response: Response | AsyncResponse): int =$/;"	t
contentType	$NIMLIB/pure/httpclient.nim	/^proc contentType*(response: Response | AsyncResponse): string {.inline.} =$/;"	t
convert	$NIMLIB/pure/encodings.nim	/^proc convert*(s: string, destEncoding = "UTF-8",$/;"	t
convert	$NIMLIB/pure/times.nim	/^proc convert*[T: SomeInteger](unitFrom, unitTo: FixedTimeUnit, quantity: T): T$/;"	f
cookie	$NIMLIB/posix/inotify.nim	/^    cookie* {.importc: "cookie".}: uint32              ## Cookie to synchronize two events.$/;"	t
copy	$NIMLIB/core/macros.nim	/^proc copy*(node: NimNode): NimNode =$/;"	t
copy	$NIMLIB/pure/collections/lists.nim	/^func copy*[T](a: SinglyLinkedList[T]): SinglyLinkedList[T] {.since: (1, 5, 1).} =$/;"	t
copy	$NIMLIB/pure/json.nim	/^proc copy*(p: JsonNode): JsonNode =$/;"	t
copyChildrenTo	$NIMLIB/core/macros.nim	/^proc copyChildrenTo*(src, dest: NimNode) =$/;"	t
copyDir	$NIMLIB/std/private/osdirs.nim	/^proc copyDir*(source, dest: string) {.rtl, extern: "nos$1",$/;"	f
copyDirWithPermissions	$NIMLIB/std/private/osdirs.nim	/^proc copyDirWithPermissions*(source, dest: string,$/;"	f
copyFile	$NIMLIB/std/private/osfiles.nim	/^proc copyFile*(source, dest: string, options = {cfSymlinkFollow}) {.rtl,$/;"	t
copyFileToDir	$NIMLIB/std/private/osfiles.nim	/^proc copyFileToDir*(source, dir: string, options = {cfSymlinkFollow})$/;"	t
copyFileW	$NIMLIB/windows/winlean.nim	/^proc copyFileW*(lpExistingFileName, lpNewFileName: WideCString,$/;"	f
copyFileWithPermissions	$NIMLIB/std/private/osfiles.nim	/^proc copyFileWithPermissions*(source, dest: string,$/;"	f
copyLineInfo	$NIMLIB/core/macros.nim	/^proc copyLineInfo*(arg: NimNode, info: NimNode) {.magic: "NLineInfo", noSideEffect.}$/;"	f
copyMem	$NIMLIB/system/memalloc.nim	/^  proc copyMem*(dest, source: pointer, size: Natural) {.inline, benign,$/;"	f
copyNimNode	$NIMLIB/core/macros.nim	/^proc copyNimNode*(n: NimNode): NimNode {.magic: "NCopyNimNode", noSideEffect.} =$/;"	t
copyNimTree	$NIMLIB/core/macros.nim	/^proc copyNimTree*(n: NimNode): NimNode {.magic: "NCopyNimTree", noSideEffect.} =$/;"	t
copySign	$NIMLIB/pure/math.nim	/^func copySign*[T: SomeFloat](x, y: T): T {.inline, since: (1, 5, 1).} =$/;"	t
copyWithin	$NIMLIB/js/jscore.nim	/^  func copyWithin*[T](self: openArray[T]; target, start, ends: int): seq[T] {.importjs: "#.copyW/;"	t
copy_named_substring	$NIMLIB/wrappers/pcre.nim	/^proc copy_named_substring*(code: ptr Pcre,$/;"	f
copy_substring	$NIMLIB/wrappers/pcre.nim	/^proc copy_substring*(subject: cstring,$/;"	f
coreAttr	$NIMLIB/pure/htmlgen.nim	/^  coreAttr* = " accesskey class contenteditable dir hidden id lang " &$/;"	t
coroExecWithStack	$NIMLIB/pure/coro.nim	/^  proc coroExecWithStack*(fn: pointer, stack: pointer) {.noreturn,$/;"	f
correlation	$NIMLIB/pure/stats.nim	/^proc correlation*(r: RunningRegress): float =$/;"	t
cos	$NIMLIB/js/jscore.nim	/^proc cos*(m: MathLib, a: SomeNumber): float {.importcpp.}$/;"	f
cos	$NIMLIB/pure/complex.nim	/^func cos*[T](z: Complex[T]): Complex[T] =$/;"	t
cos	$NIMLIB/pure/math.nim	/^  func cos*(x: float64): float64 {.importc: "cos", header: "<math.h>".} =$/;"	t
cosh	$NIMLIB/js/jscore.nim	/^proc cosh*(m: MathLib, a: SomeNumber): float {.importcpp.}$/;"	f
cosh	$NIMLIB/pure/complex.nim	/^func cosh*[T](z: Complex[T]): Complex[T] =$/;"	t
cosh	$NIMLIB/pure/math.nim	/^  func cosh*(x: float64): float64 {.importc: "cosh", header: "<math.h>".} =$/;"	t
cot	$NIMLIB/pure/complex.nim	/^func cot*[T](z: Complex[T]): Complex[T] =$/;"	t
cot	$NIMLIB/pure/math.nim	/^func cot*[T: float32|float64](x: T): T = 1.0 \/ tan(x)$/;"	t
coth	$NIMLIB/pure/complex.nim	/^func coth*[T](z: Complex[T]): Complex[T] =$/;"	t
coth	$NIMLIB/pure/math.nim	/^func coth*[T: float32|float64](x: T): T = 1.0 \/ tanh(x)$/;"	t
count	$NIMLIB/js/jsconsole.nim	/^proc count*(console: Console, label = "".cstring) {.importcpp.}$/;"	t
count	$NIMLIB/pure/collections/sequtils.nim	/^func count*[T](s: openArray[T], x: T): int =$/;"	t
count	$NIMLIB/pure/strutils.nim	/^func count*(s: string, sub: string, overlapping: bool = false): int {.rtl,$/;"	t
countBits32	$NIMLIB/system/countbits_impl.nim	/^proc countBits32*(n: uint32): int {.compilerproc, inline.} =$/;"	t
countBits64	$NIMLIB/system/countbits_impl.nim	/^proc countBits64*(n: uint64): int {.compilerproc, inline.} =$/;"	t
countIt	$NIMLIB/pure/collections/sequtils.nim	/^  template countIt*(s, pred: untyped): int =$/;"	t
countLeadingZeroBits	$NIMLIB/pure/bitops.nim	/^func countLeadingZeroBits*(x: SomeInteger): int {.inline.} =$/;"	t
countLines	$NIMLIB/pure/strutils.nim	/^func countLines*(s: string): int {.rtl, extern: "nsuCountLines".} =$/;"	t
countProcessors	$NIMLIB/pure/concurrency/cpuinfo.nim	/^proc countProcessors*(): int {.rtl, extern: "ncpi$1".} =$/;"	t
countProcessors	$NIMLIB/pure/osproc.nim	/^proc countProcessors*(): int {.rtl, extern: "nosp$1", raises: [].} =$/;"	t
countReset	$NIMLIB/js/jsconsole.nim	/^proc countReset*(console: Console, label = "".cstring) {.importcpp.}$/;"	t
countSetBits	$NIMLIB/pure/bitops.nim	/^func countSetBits*(x: SomeInteger): int {.inline.} =$/;"	t
countSetBitsImpl	$NIMLIB/system/countbits_impl.nim	/^func countSetBitsImpl*(x: SomeInteger): int {.inline.} =$/;"	t
countTrailingZeroBits	$NIMLIB/pure/bitops.nim	/^func countTrailingZeroBits*(x: SomeInteger): int {.inline.} =$/;"	t
countdown	$NIMLIB/system/iterators_1.nim	/^iterator countdown*[T](a, b: T, step: Positive = 1): T {.inline.} =$/;"	t
countup	$NIMLIB/system/iterators_1.nim	/^iterator countup*[T](a, b: T, step: Positive = 1): T {.inline.} =$/;"	t
cpDir	$NIMLIB/system/nimscript.nim	/^proc cpDir*(`from`, to: string) {.raises: [OSError].} =$/;"	t
cpFile	$NIMLIB/system/nimscript.nim	/^proc cpFile*(`from`, to: string) {.raises: [OSError].} =$/;"	t
cppDefine	$NIMLIB/system/nimscript.nim	/^proc cppDefine*(define: string) =$/;"	t
cpuEndian	$NIMLIB/system.nim	/^  cpuEndian* {.magic: "CpuEndian".}: Endianness = littleEndian$/;"	t
cpuRelax	$NIMLIB/std/sysatomics.nim	/^  proc cpuRelax* {.inline.} =$/;"	t
cpuTime	$NIMLIB/pure/times.nim	/^  proc cpuTime*(): float {.tags: [TimeEffect].} =$/;"	t
cpusetIncl	$NIMLIB/std/private/threadtypes.nim	/^  proc cpusetIncl*(cpu: cint; s: var CpuSet) {.$/;"	f
cpusetZero	$NIMLIB/std/private/threadtypes.nim	/^  proc cpusetZero*(s: var CpuSet) {.importc: "CPU_ZERO", header: schedh.}$/;"	f
creat	$NIMLIB/posix/posix.nim	/^proc creat*(a1: cstring, a2: Mode): cint {.importc, header: "<fcntl.h>", sideEffect.}$/;"	f
create	$NIMLIB/system/memalloc.nim	/^  proc create*(T: typedesc, size = 1.Positive): ptr T {.inline, benign, raises: [].} =$/;"	t
createAsyncNativeSocket	$NIMLIB/pure/asyncdispatch.nim	/^proc createAsyncNativeSocket*(domain: cint, sockType: cint,$/;"	f
createAttribute	$NIMLIB/js/dom.nim	/^proc createAttribute*(d: Document, identifier: cstring): Node$/;"	f
createComment	$NIMLIB/js/dom.nim	/^  proc createComment*(d: Document, data: cstring): Node {.importcpp.}$/;"	f
createDir	$NIMLIB/std/dirs.nim	/^proc createDir*(dir: Path) {.inline, tags: [WriteDirEffect, ReadDirEffect].} =$/;"	t
createDir	$NIMLIB/std/private/osdirs.nim	/^proc createDir*(dir: string) {.rtl, extern: "nos$1",$/;"	f
createDirectoryW	$NIMLIB/windows/winlean.nim	/^proc createDirectoryW*(pathName: WideCString, security: pointer=nil): int32 {.$/;"	t
createElement	$NIMLIB/js/dom.nim	/^  proc createElement*(d: Document, identifier: cstring): Element {.importcpp.}$/;"	f
createElementNS	$NIMLIB/js/dom.nim	/^  proc createElementNS*(d: Document, namespaceURI, qualifiedIdentifier: cstring): Element {.impo/;"	f
createEvent	$NIMLIB/windows/winlean.nim	/^proc createEvent*(lpEventAttributes: ptr SECURITY_ATTRIBUTES,$/;"	f
createFileA	$NIMLIB/windows/winlean.nim	/^proc createFileA*(lpFileName: cstring, dwDesiredAccess, dwShareMode: DWORD,$/;"	f
createFileMappingW	$NIMLIB/windows/winlean.nim	/^proc createFileMappingW*(hFile: Handle,$/;"	f
createFileW	$NIMLIB/windows/winlean.nim	/^proc createFileW*(lpFileName: WideCString, dwDesiredAccess, dwShareMode: DWORD,$/;"	f
createHardLinkW	$NIMLIB/windows/winlean.nim	/^proc createHardLinkW*(lpFileName, lpExistingFileName: WideCString,$/;"	f
createHardlink	$NIMLIB/pure/os.nim	/^proc createHardlink*(src, dest: string) {.noWeirdTarget.} =$/;"	t
createIoCompletionPort	$NIMLIB/windows/winlean.nim	/^proc createIoCompletionPort*(FileHandle: Handle, ExistingCompletionPort: Handle,$/;"	f
createNamedPipe	$NIMLIB/windows/winlean.nim	/^proc createNamedPipe*(lpName: WideCString,$/;"	f
createNativeSocket	$NIMLIB/pure/nativesockets.nim	/^proc createNativeSocket*(domain: cint, sockType: cint, protocol: cint,$/;"	f
createPipe	$NIMLIB/windows/winlean.nim	/^proc createPipe*(hReadPipe, hWritePipe: var Handle,$/;"	f
createProcessW	$NIMLIB/windows/winlean.nim	/^proc createProcessW*(lpApplicationName, lpCommandLine: WideCString,$/;"	f
createShared	$NIMLIB/system/memalloc.nim	/^  proc createShared*(T: typedesc, size = 1.Positive): ptr T {.inline.} =$/;"	t
createSharedU	$NIMLIB/system/memalloc.nim	/^  proc createSharedU*(T: typedesc, size = 1.Positive): ptr T {.inline, tags: [],$/;"	t
createSymbolicLinkW	$NIMLIB/windows/winlean.nim	/^proc createSymbolicLinkW*(lpSymlinkFileName, lpTargetFileName: WideCString,$/;"	f
createSymlink	$NIMLIB/std/private/ossymlinks.nim	/^proc createSymlink*(src, dest: string) {.noWeirdTarget.} =$/;"	t
createSymlink	$NIMLIB/std/symlinks.nim	/^proc createSymlink*(src, dest: Path) {.inline.} =$/;"	t
createTempDir	$NIMLIB/std/tempfiles.nim	/^proc createTempDir*(prefix, suffix: string, dir = ""): string =$/;"	t
createTempFile	$NIMLIB/std/tempfiles.nim	/^proc createTempFile*(prefix, suffix: string, dir = ""): tuple[cfile: File, path: string] =$/;"	t
createTextNode	$NIMLIB/js/dom.nim	/^  proc createTextNode*(d: Document, identifier: cstring): Node {.importcpp.}$/;"	f
createThread	$NIMLIB/std/private/threadtypes.nim	/^  proc createThread*(lpThreadAttributes: pointer, dwStackSize: int32,$/;"	f
createThread	$NIMLIB/std/typedthreads.nim	/^proc createThread*(t: var Thread[void], tp: proc () {.thread, nimcall.}) =$/;"	t
createU	$NIMLIB/system/memalloc.nim	/^  proc createU*(T: typedesc, size = 1.Positive): ptr T {.inline, benign, raises: [].} =$/;"	t
crypt	$NIMLIB/posix/posix.nim	/^proc crypt*(a1, a2: cstring): cstring {.importc, header: "<unistd.h>".}$/;"	f
csc	$NIMLIB/pure/complex.nim	/^func csc*[T](z: Complex[T]): Complex[T] =$/;"	t
csc	$NIMLIB/pure/math.nim	/^func csc*[T: float32|float64](x: T): T = 1.0 \/ sin(x)$/;"	t
csch	$NIMLIB/pure/complex.nim	/^func csch*[T](z: Complex[T]): Complex[T] =$/;"	t
csch	$NIMLIB/pure/math.nim	/^func csch*[T: float32|float64](x: T): T = 1.0 \/ sinh(x)$/;"	t
cschar	$NIMLIB/system/ctypes.nim	/^  cschar* {.importc: "signed char", nodecl.} = int8$/;"	t
cshort	$NIMLIB/system/ctypes.nim	/^  cshort* {.importc: "short", nodecl.} = int16$/;"	t
csize	$NIMLIB/system.nim	/^    csize* {.importc: "size_t", nodecl, deprecated: "use `csize_t` instead".} = int$/;"	t
csize_t	$NIMLIB/system/ctypes.nim	/^  csize_t* {.importc: "size_t", nodecl.} = uint$/;"	t
cstderr	$NIMLIB/system/ansi_c.nim	/^  cstderr* {.importc: stderrName, header: "<stdio.h>".}: CFilePtr$/;"	t
cstdin	$NIMLIB/system/ansi_c.nim	/^  cstdin* {.importc: stdinName, header: "<stdio.h>".}: CFilePtr$/;"	t
cstdout	$NIMLIB/system/ansi_c.nim	/^  cstdout* {.importc: stdoutName, header: "<stdio.h>".}: CFilePtr$/;"	t
cstring	$NIMLIB/system/basic_types.nim	/^  cstring* {.magic: Cstring.}   ## Built-in cstring (*compatible string*) type.$/;"	t
cstringArray	$NIMLIB/system/ctypes.nim	/^  cstringArray* {.importc: "char**", nodecl.} = ptr UncheckedArray[cstring]$/;"	t
cstringArrayToSeq	$NIMLIB/system.nim	/^    proc cstringArrayToSeq*(a: cstringArray, len: Natural): seq[string] =$/;"	t
ctermid	$NIMLIB/posix/posix.nim	/^proc ctermid*(a1: cstring): cstring {.importc, header: "<unistd.h>".}$/;"	f
ctime	$NIMLIB/posix/posix.nim	/^proc ctime*(a1: var Time): cstring {.importc, header: "<time.h>".}$/;"	f
ctime_r	$NIMLIB/posix/posix.nim	/^proc ctime_r*(a1: var Time, a2: cstring): cstring {.importc, header: "<time.h>".}$/;"	f
cuchar	$NIMLIB/system/ctypes.nim	/^  cuchar* {.importc: "unsigned char", nodecl, deprecated: "use `char` or `uint8` instead".} = ch/;"	t
cuint	$NIMLIB/system/ctypes.nim	/^  cuint* {.importc: "unsigned int", nodecl.} = uint32$/;"	t
cuint32	$NIMLIB/pure/os.nim	/^    cuint32* {.importc: "unsigned int", nodecl.} = int$/;"	t
cuintptr_t	$NIMLIB/system/stacktraces.nim	/^    cuintptr_t* {.importc: "uintptr_t", nodecl.} = uint$/;"	t
culong	$NIMLIB/system/ctypes.nim	/^    culong* {.importc: "unsigned long", nodecl.} = uint32$/;"	t
culonglong	$NIMLIB/system/ctypes.nim	/^  culonglong* {.importc: "unsigned long long", nodecl.} = uint64$/;"	t
cumsum	$NIMLIB/pure/math.nim	/^func cumsum*[T](x: var openArray[T]) =$/;"	t
cumsummed	$NIMLIB/pure/math.nim	/^func cumsummed*[T](x: openArray[T]): seq[T] =$/;"	t
currentSourcePath	$NIMLIB/system/compilation.nim	/^template currentSourcePath*: string = instantiationInfo(-1, true).filename$/;"	t
cursorBackward	$NIMLIB/pure/terminal.nim	/^template cursorBackward*(count = 1) = cursorBackward(stdout, count)$/;"	t
cursorDown	$NIMLIB/pure/terminal.nim	/^template cursorDown*(count = 1) = cursorDown(stdout, count)$/;"	t
cursorForward	$NIMLIB/pure/terminal.nim	/^template cursorForward*(count = 1) = cursorForward(stdout, count)$/;"	t
cursorUp	$NIMLIB/pure/terminal.nim	/^template cursorUp*(count = 1) = cursorUp(stdout, count)$/;"	t
cushort	$NIMLIB/system/ctypes.nim	/^  cushort* {.importc: "unsigned short", nodecl.} = uint16$/;"	t
cycle	$NIMLIB/pure/collections/sequtils.nim	/^func cycle*[T](s: openArray[T], n: Natural): seq[T] =$/;"	t
d2i_X509	$NIMLIB/wrappers/openssl.nim	/^proc d2i_X509*(px: ptr PX509, i: ptr ptr uint8, len: cint): PX509 {.cdecl,$/;"	f
data	$NIMLIB/pure/htmlgen.nim	/^macro data*(e: varargs[untyped]): untyped =$/;"	t
datalist	$NIMLIB/pure/htmlgen.nim	/^macro datalist*(e: varargs[untyped]): untyped =$/;"	t
dateTime	$NIMLIB/pure/times.nim	/^proc dateTime*(year: int, month: Month, monthday: MonthdayRange,$/;"	f
daylight	$NIMLIB/posix/posix_haiku.nim	/^  daylight* {.importc, header: "<time.h>".}: cint$/;"	t
daylight	$NIMLIB/posix/posix_linux_amd64.nim	/^  daylight* {.importc, header: "<time.h>".}: cint$/;"	t
daylight	$NIMLIB/posix/posix_macos_amd64.nim	/^  daylight* {.importc, header: "<time.h>".}: cint$/;"	t
daylight	$NIMLIB/posix/posix_nintendoswitch.nim	/^  daylight* {.importc: "_daylight", header: "<time.h>".}: cint$/;"	t
daylight	$NIMLIB/posix/posix_openbsd_amd64.nim	/^  daylight* {.importc, header: "<time.h>".}: cint$/;"	t
daylight	$NIMLIB/posix/posix_other.nim	/^  daylight* {.importc, header: "<time.h>".}: cint$/;"	t
days	$NIMLIB/pure/times.nim	/^proc days*(d: int): TimeInterval {.inline.} =$/;"	t
dd	$NIMLIB/pure/htmlgen.nim	/^macro dd*(e: varargs[untyped]): untyped =$/;"	t
dealloc	$NIMLIB/system/memalloc.nim	/^  proc dealloc*(p: pointer) {.noconv, compilerproc, rtl, benign, raises: [], tags: [].} =$/;"	t
deallocAll	$NIMLIB/system/gc_regions.nim	/^proc deallocAll*(r: var MemRegion) =$/;"	t
deallocCStringArray	$NIMLIB/system.nim	/^  proc deallocCStringArray*(a: cstringArray) =$/;"	t
deallocHeap	$NIMLIB/system/gc_common.nim	/^proc deallocHeap*(runFinalizers = true; allowGcAfterwards = true) =$/;"	t
deallocImpl	$NIMLIB/system/memalloc.nim	/^  proc deallocImpl*(p: pointer) {.noconv, rtl, tags: [], benign, raises: [].}$/;"	f
deallocShared	$NIMLIB/system/memalloc.nim	/^  proc deallocShared*(p: pointer) {.noconv, compilerproc, rtl, benign, raises: [], tags: [].} =$/;"	t
deallocSharedImpl	$NIMLIB/system/memalloc.nim	/^  proc deallocSharedImpl*(p: pointer) {.noconv, rtl, benign, raises: [], tags: [].}$/;"	f
deallocatedRefId	$NIMLIB/system/arc.nim	/^  proc deallocatedRefId*(p: pointer): int =$/;"	t
debug	$NIMLIB/js/jsconsole.nim	/^proc debug*(console: Console) {.importcpp, varargs.}$/;"	f
debug	$NIMLIB/pure/logging.nim	/^template debug*(args: varargs[string, `$`]) =$/;"	t
debugEcho	$NIMLIB/system.nim	/^proc debugEcho*(x: varargs[typed, `$`]) {.magic: "Echo", noSideEffect,$/;"	f
dec	$NIMLIB/std/jsbigints.nim	/^func dec*(this: var JsBigInt; amount: JsBigInt) {.importjs: "([#][0][0] -= #)".} =$/;"	t
dec	$NIMLIB/system/arithmetics.nim	/^proc dec*[T, V: Ordinal](x: var T, y: V = 1) {.magic: "Dec", noSideEffect.} =$/;"	t
decimalLength	$NIMLIB/std/private/dragonbox.nim	/^proc decimalLength*(v: uint64): int {.inline.} =$/;"	t
declared	$NIMLIB/system/compilation.nim	/^proc declared*(x: untyped): bool {.magic: "Declared", noSideEffect, compileTime.}$/;"	f
declaredInScope	$NIMLIB/system/compilation.nim	/^proc declaredInScope*(x: untyped): bool {.magic: "DeclaredInScope", noSideEffect, compileTime.}$/;"	f
decode	$NIMLIB/pure/base64.nim	/^proc decode*(s: string): string =$/;"	t
decodeData	$NIMLIB/pure/cgi.nim	/^iterator decodeData*(data: string): tuple[key, value: string] =$/;"	t
decodePercent	$NIMLIB/std/private/decode_helpers.nim	/^proc decodePercent*(s: openArray[char], i: var int): char =$/;"	t
decodeQuery	$NIMLIB/pure/uri.nim	/^iterator decodeQuery*(data: string, sep = '&'): tuple[key, value: string] =$/;"	t
decodeURI	$NIMLIB/js/dom.nim	/^proc decodeURI*(uri: cstring): cstring {.importc, nodecl.}$/;"	f
decodeURIComponent	$NIMLIB/js/dom.nim	/^proc decodeURIComponent*(uri: cstring): cstring {.importc, nodecl.}$/;"	f
decodeUrl	$NIMLIB/pure/uri.nim	/^func decodeUrl*(s: string, decodePlus = true): string =$/;"	t
decodeZigzag	$NIMLIB/std/varints.nim	/^proc decodeZigzag*(x: uint64): int64 {.inline.} =$/;"	t
dedent	$NIMLIB/pure/strutils.nim	/^func dedent*(s: string, count: Natural = indentation(s)): string {.rtl,$/;"	t
deduplicate	$NIMLIB/pure/collections/sequtils.nim	/^func deduplicate*[T](s: openArray[T], isSorted: bool = false): seq[T] =$/;"	t
deepCopy	$NIMLIB/system.nim	/^  proc deepCopy*[T](y: T): T =$/;"	t
defUserAgent	$NIMLIB/pure/httpclient.nim	/^const defUserAgent* = "Nim httpclient\/" & NimVersion$/;"	t
default	$NIMLIB/system.nim	/^proc default*[T](_: typedesc[T]): T {.magic: "Default", noSideEffect.} =$/;"	t
defaultConfig	$NIMLIB/packages/docutils/rstgen.nim	/^proc defaultConfig*(): StringTableRef =$/;"	t
defaultConsoleFormatter	$NIMLIB/pure/unittest.nim	/^proc defaultConsoleFormatter*(): ConsoleOutputFormatter =$/;"	t
defaultFilename	$NIMLIB/pure/logging.nim	/^  proc defaultFilename*(): string =$/;"	t
defaultFindFile	$NIMLIB/packages/docutils/rst.nim	/^proc defaultFindFile*(filename: string): string =$/;"	t
defaultFindRefFile	$NIMLIB/packages/docutils/rst.nim	/^proc defaultFindRefFile*(filename: string): (string, string) =$/;"	t
defaultFmtStr	$NIMLIB/pure/logging.nim	/^  defaultFmtStr* = "$levelname "                         ## The default format string.$/;"	t
defaultInitialSize	$NIMLIB/pure/collections/deques.nim	/^  defaultInitialSize* = 4$/;"	t
defaultInitialSize	$NIMLIB/pure/collections/sets.nim	/^  defaultInitialSize* = 64$/;"	t
defaultInitialSize	$NIMLIB/pure/collections/tables.nim	/^  defaultInitialSize* = 32$/;"	t
defaultMsgHandler	$NIMLIB/packages/docutils/rst.nim	/^proc defaultMsgHandler*(filename: string, line, col: int, msgkind: MsgKind,$/;"	f
defineSymbol	$NIMLIB/wrappers/tinyc.nim	/^proc defineSymbol*(s: PccState, sym, value: cstring) {.cdecl,$/;"	f
defined	$NIMLIB/system/compilation.nim	/^proc defined*(x: untyped): bool {.magic: "Defined", noSideEffect, compileTime.}$/;"	f
degToRad	$NIMLIB/pure/math.nim	/^func degToRad*[T: float32|float64](d: T): T {.inline.} =$/;"	t
deinitCond	$NIMLIB/core/locks.nim	/^proc deinitCond*(cond: var Cond) {.inline.} =$/;"	t
deinitGeneralTokenizer	$NIMLIB/packages/docutils/highlite.nim	/^proc deinitGeneralTokenizer*(g: var GeneralTokenizer) =$/;"	t
deinitLock	$NIMLIB/core/locks.nim	/^proc deinitLock*(lock: var Lock) {.inline.} =$/;"	t
deinitRLock	$NIMLIB/core/rlocks.nim	/^proc deinitRLock*(lock: var RLock) {.inline.} =$/;"	t
deinitSharedList	$NIMLIB/pure/collections/sharedlist.nim	/^proc deinitSharedList*[A](t: var SharedList[A]) =$/;"	t
deinitSharedTable	$NIMLIB/pure/collections/sharedtables.nim	/^proc deinitSharedTable*[A, B](t: var SharedTable[A, B]) =$/;"	t
deinitSys	$NIMLIB/std/private/syslocks.nim	/^  proc deinitSys*(L: var SysLock) {.importc: "DeleteCriticalSection",$/;"	f
deinitSysCond	$NIMLIB/std/private/syslocks.nim	/^  proc deinitSysCond*(cond: var SysCond) {.inline.} =$/;"	t
del	$NIMLIB/core/macros.nim	/^proc del*(father: NimNode, idx = 0, n = 1) {.magic: "NDel", noSideEffect.}$/;"	t
del	$NIMLIB/pure/collections/heapqueue.nim	/^proc del*[T](heap: var HeapQueue[T], index: Natural) =$/;"	t
del	$NIMLIB/pure/collections/sharedtables.nim	/^proc del*[A, B](t: var SharedTable[A, B], key: A) =$/;"	t
del	$NIMLIB/pure/collections/tables.nim	/^proc del*[A](t: var CountTable[A], key: A) {.since: (1, 1).} =$/;"	t
del	$NIMLIB/pure/htmlgen.nim	/^macro del*(e: varargs[untyped]): untyped =$/;"	t
del	$NIMLIB/pure/httpcore.nim	/^proc del*(headers: HttpHeaders, key: string) =$/;"	t
del	$NIMLIB/pure/strtabs.nim	/^proc del*(t: StringTableRef, key: string) =$/;"	t
del	$NIMLIB/system.nim	/^proc del*[T](x: var seq[T], i: Natural) {.noSideEffect.} =$/;"	t
delEnv	$NIMLIB/std/envvars.nim	/^    proc delEnv*(key: string) {.tags: [WriteEnvEffect].} =$/;"	t
delEnv	$NIMLIB/system/nimscript.nim	/^proc delEnv*(key: string) {.tags: [WriteIOEffect].} =$/;"	t
delOutputFormatter	$NIMLIB/pure/unittest.nim	/^proc delOutputFormatter*(formatter: OutputFormatter) =$/;"	t
delSection	$NIMLIB/pure/parsecfg.nim	/^proc delSection*(dict: var Config, section: string) =$/;"	t
delSectionKey	$NIMLIB/pure/parsecfg.nim	/^proc delSectionKey*(dict: var Config, section, key: string) =$/;"	t
delete	$NIMLIB/pure/collections/sequtils.nim	/^func delete*[T](s: var seq[T]; slice: Slice[int]) =$/;"	t
delete	$NIMLIB/pure/httpclient.nim	/^proc delete*(client: HttpClient | AsyncHttpClient,$/;"	f
delete	$NIMLIB/pure/json.nim	/^proc delete*(obj: JsonNode, key: string) =$/;"	t
delete	$NIMLIB/pure/strutils.nim	/^func delete*(s: var string, slice: Slice[int]) =$/;"	t
delete	$NIMLIB/pure/xmltree.nim	/^proc delete*(n: XmlNode, slice: Slice[int]) =$/;"	t
delete	$NIMLIB/system.nim	/^proc delete*[T](x: var seq[T], i: Natural) {.noSideEffect, auditDelete.} =$/;"	t
deleteContent	$NIMLIB/pure/httpclient.nim	/^proc deleteContent*(client: HttpClient | AsyncHttpClient,$/;"	f
deleteData	$NIMLIB/js/dom.nim	/^proc deleteData*(n: Node, start, len: int)$/;"	f
deleteFileA	$NIMLIB/windows/winlean.nim	/^proc deleteFileA*(pathName: cstring): int32 {.$/;"	f
deleteFileW	$NIMLIB/windows/winlean.nim	/^proc deleteFileW*(pathName: WideCString): int32 {.$/;"	f
deleteFromDocument	$NIMLIB/js/dom.nim	/^proc deleteFromDocument*(s: Selection)$/;"	f
des_key_schedule	$NIMLIB/wrappers/openssl.nim	/^  des_key_schedule* = array[1..16, des_ks_struct]$/;"	t
des_ks_struct	$NIMLIB/wrappers/openssl.nim	/^  des_ks_struct*{.final.} = object$/;"	t
destroyContext	$NIMLIB/pure/net.nim	/^  proc destroyContext*(ctx: SslContext) =$/;"	t
destroyThread	$NIMLIB/std/typedthreads.nim	/^  proc destroyThread*[TArg](t: var Thread[TArg]) =$/;"	t
destruct	$NIMLIB/genode/constructibles.nim	/^proc destruct*[T](x: Constructible[T]) {.importcpp.}$/;"	f
details	$NIMLIB/pure/htmlgen.nim	/^macro details*(e: varargs[untyped]): untyped =$/;"	t
detectOs	$NIMLIB/pure/distros.nim	/^template detectOs*(d: untyped): bool =$/;"	t
dfa_exec	$NIMLIB/wrappers/pcre.nim	/^proc dfa_exec*(code: ptr Pcre,$/;"	f
dfn	$NIMLIB/pure/htmlgen.nim	/^macro dfn*(e: varargs[untyped]): untyped =$/;"	t
dial	$NIMLIB/pure/asyncdispatch.nim	/^proc dial*(address: string, port: Port,$/;"	f
dial	$NIMLIB/pure/asyncnet.nim	/^proc dial*(address: string, port: Port, protocol = IPPROTO_TCP,$/;"	t
dial	$NIMLIB/pure/net.nim	/^proc dial*(address: string, port: Port,$/;"	f
dialog	$NIMLIB/pure/htmlgen.nim	/^macro dialog*(e: varargs[untyped]): untyped =$/;"	t
diffFiles	$NIMLIB/std/private/gitutils.nim	/^proc diffFiles*(path1, path2: string): tuple[output: string, same: bool] =$/;"	t
diffInt	$NIMLIB/experimental/diff.nim	/^proc diffInt*(arrayA, arrayB: openArray[int]): seq[Item] =$/;"	t
diffStrings	$NIMLIB/std/private/gitutils.nim	/^proc diffStrings*(a, b: string): tuple[output: string, same: bool] =$/;"	t
diffText	$NIMLIB/experimental/diff.nim	/^proc diffText*(textA, textB: string): seq[Item] =$/;"	t
difference	$NIMLIB/pure/collections/sets.nim	/^proc difference*[A](s1, s2: HashSet[A]): HashSet[A] =$/;"	t
difference	$NIMLIB/std/packedsets.nim	/^proc difference*[A](s1, s2: PackedSet[A]): PackedSet[A] =$/;"	t
difftime	$NIMLIB/posix/posix.nim	/^proc difftime*(a1, a2: Time): cdouble {.importc, header: "<time.h>".}$/;"	f
digits	$NIMLIB/pure/fenv.nim	/^template digits*(T: typedesc[float64]): int = DBL_DIG$/;"	t
digits	$NIMLIB/pure/pegs.nim	/^template digits*: Peg =$/;"	t
dirExists	$NIMLIB/std/dirs.nim	/^proc dirExists*(dir: Path): bool {.inline, tags: [ReadDirEffect].} =$/;"	t
dirExists	$NIMLIB/std/private/oscommon.nim	/^proc dirExists*(dir: string): bool {.rtl, extern: "nos$1", tags: [ReadDirEffect],$/;"	f
dirExists	$NIMLIB/system/nimscript.nim	/^proc dirExists*(dir: string): bool {.$/;"	f
dirname	$NIMLIB/posix/posix.nim	/^proc dirname*(a1: cstring): cstring {.importc, header: "<libgen.h>".}$/;"	f
disableCache	$NIMLIB/pure/ropes.nim	/^proc disableCache*() {.rtl, extern: "nro$1".} =$/;"	t
disableExternalCapture	$NIMLIB/js/dom.nim	/^proc disableExternalCapture*(w: Window)$/;"	f
disableParamFiltering	$NIMLIB/pure/unittest.nim	/^proc disableParamFiltering* =$/;"	t
disableProfiling	$NIMLIB/pure/nimprof.nim	/^proc disableProfiling*() =$/;"	t
disableTrueColors	$NIMLIB/pure/terminal.nim	/^proc disableTrueColors*() =$/;"	t
disabled	$NIMLIB/js/dom.nim	/^proc `disabled=`*(n: Node; v: bool) {.importcpp: "#.disabled = #", nodecl.}$/;"	o
disarm	$NIMLIB/system.nim	/^template disarm*(x: typed) =$/;"	t
disjoint	$NIMLIB/pure/collections/sets.nim	/^proc disjoint*[A](s1, s2: HashSet[A]): bool =$/;"	t
disjoint	$NIMLIB/std/packedsets.nim	/^proc disjoint*[A](s1, s2: PackedSet[A]): bool =$/;"	t
dispatchEvent	$NIMLIB/js/dom.nim	/^proc dispatchEvent*(et: EventTarget, ev: Event)$/;"	f
dispose	$NIMLIB/system/gc_common.nim	/^proc dispose*(x: ForeignCell) =$/;"	t
dispose	$NIMLIB/system/mmdisp.nim	/^  proc dispose*(x: ForeignCell) = discard$/;"	t
dissolve	$NIMLIB/genode/signals.nim	/^proc dissolve*(sig: SignalHandler) =$/;"	t
distance	$NIMLIB/pure/reservedmem.nim	/^template distance*(lhs, rhs: pointer): int =$/;"	t
distinctBase	$NIMLIB/pure/typetraits.nim	/^proc distinctBase*(T: typedesc, recursive: static bool = true): typedesc {.magic: "TypeTrait".} /;"	t
distribute	$NIMLIB/pure/collections/sequtils.nim	/^func distribute*[T](s: seq[T], num: Positive, spread = true): seq[seq[T]] =$/;"	t
div	$NIMLIB/pure/htmlgen.nim	/^macro `div`*(e: varargs[untyped]): untyped =$/;"	o
div	$NIMLIB/pure/rationals.nim	/^func `div`*[T: SomeInteger](x, y: Rational[T]): T =$/;"	o
div	$NIMLIB/pure/times.nim	/^proc `div`*(a: Duration, b: int64): Duration {.operator,$/;"	o
div	$NIMLIB/std/jsbigints.nim	/^func `div`*(x, y: JsBigInt): JsBigInt {.importjs: "(# \/ #)".} =$/;"	o
div	$NIMLIB/system/arithmetics.nim	/^proc `div`*(x, y: uint8): uint8 {.magic: "DivU", noSideEffect.}$/;"	o
dl	$NIMLIB/pure/htmlgen.nim	/^macro dl*(e: varargs[untyped]): untyped =$/;"	t
dlclose	$NIMLIB/posix/posix.nim	/^proc dlclose*(a1: pointer): cint {.importc, header: "<dlfcn.h>", sideEffect.}$/;"	f
dlerror	$NIMLIB/posix/posix.nim	/^proc dlerror*(): cstring {.importc, header: "<dlfcn.h>", sideEffect.}$/;"	f
dlopen	$NIMLIB/posix/posix.nim	/^proc dlopen*(a1: cstring, a2: cint): pointer {.importc, header: "<dlfcn.h>", sideEffect.}$/;"	f
dlsym	$NIMLIB/posix/posix.nim	/^proc dlsym*(a1: pointer, a2: cstring): pointer {.importc, header: "<dlfcn.h>", sideEffect.}$/;"	f
doAssert	$NIMLIB/std/assertions.nim	/^template doAssert*(cond: untyped, msg = "") =$/;"	t
doAssertRaises	$NIMLIB/std/assertions.nim	/^template doAssertRaises*(exception: typedesc, code: untyped) =$/;"	t
document	$NIMLIB/js/dom.nim	/^  var document* {.importc, nodecl.}: Document$/;"	t
doslikeFileSystem	$NIMLIB/std/private/osseps.nim	/^  doslikeFileSystem* = defined(windows) or defined(OS2) or defined(DOS)$/;"	t
downloadFile	$NIMLIB/pure/httpclient.nim	/^proc downloadFile*(client: HttpClient, url: Uri | string, filename: string) =$/;"	t
dragonbox_Assert	$NIMLIB/std/private/dragonbox.nim	/^template dragonbox_Assert*(x: untyped): untyped =$/;"	t
drain	$NIMLIB/pure/asyncdispatch.nim	/^proc drain*(timeout = 500) =$/;"	t
dt	$NIMLIB/pure/htmlgen.nim	/^macro dt*(e: varargs[untyped]): untyped =$/;"	t
dtoaMinBufferLength	$NIMLIB/std/private/dragonbox.nim	/^  dtoaMinBufferLength*: cint = 64$/;"	t
dump	$NIMLIB/pure/sugar.nim	/^macro dump*(x: untyped): untyped =$/;"	t
dumpAllocstats	$NIMLIB/system/memalloc.nim	/^  template dumpAllocstats*(code: untyped) =$/;"	t
dumpAstGen	$NIMLIB/core/macros.nim	/^macro dumpAstGen*(s: untyped): untyped = echo s.astGenRepr$/;"	t
dumpHeapInstances	$NIMLIB/system/gc_common.nim	/^  iterator dumpHeapInstances*(): tuple[name: cstring; count: int; sizes: int] =$/;"	t
dumpLisp	$NIMLIB/core/macros.nim	/^macro dumpLisp*(s: untyped): untyped = echo s.lispRepr(indented = true)$/;"	t
dumpNumberOfInstances	$NIMLIB/system/gc_common.nim	/^  proc dumpNumberOfInstances* =$/;"	t
dumpToString	$NIMLIB/pure/sugar.nim	/^macro dumpToString*(x: untyped): string =$/;"	t
dumpTree	$NIMLIB/core/macros.nim	/^macro dumpTree*(s: untyped): untyped = echo s.treeRepr$/;"	t
dup	$NIMLIB/posix/posix.nim	/^proc dup*(a1: cint): cint {.importc, header: "<unistd.h>".}$/;"	f
dup	$NIMLIB/pure/sugar.nim	/^  macro dup*[T](arg: T, calls: varargs[untyped]): T =$/;"	t
dup2	$NIMLIB/posix/posix.nim	/^proc dup2*(a1, a2: cint): cint {.importc, header: "<unistd.h>".}$/;"	f
duplicateHandle	$NIMLIB/windows/winlean.nim	/^proc duplicateHandle*(hSourceProcessHandle: Handle, hSourceHandle: Handle,$/;"	f
eat	$NIMLIB/pure/parsejson.nim	/^proc eat*(p: var JsonParser, tok: TokKind) =$/;"	t
echo	$NIMLIB/system.nim	/^proc echo*(x: varargs[typed, `$`]) {.magic: "Echo", benign, sideEffect.}$/;"	f
echoForeignDeps	$NIMLIB/pure/distros.nim	/^proc echoForeignDeps*() =$/;"	t
editDistance	$NIMLIB/std/editdistance.nim	/^proc editDistance*(a, b: string): int {.noSideEffect.} =$/;"	t
editDistanceAscii	$NIMLIB/std/editdistance.nim	/^proc editDistanceAscii*(a, b: string): int {.noSideEffect.} =$/;"	t
elementFromPoint	$NIMLIB/js/dom.nim	/^  proc elementFromPoint*(n: DocumentOrShadowRoot; x, y: float): Element$/;"	f
elementName	$NIMLIB/pure/parsexml.nim	/^template elementName*(my: XmlParser): string =$/;"	t
elementType	$NIMLIB/pure/typetraits.nim	/^  template elementType*(a: untyped): typedesc =$/;"	t
elements	$NIMLIB/core/typeinfo.nim	/^iterator elements*(x: Any): int =$/;"	t
elementsFromPoint	$NIMLIB/js/dom.nim	/^  proc elementsFromPoint*(n: DocumentOrShadowRoot; x, y: float): seq[Element] {.importcpp.}$/;"	f
em	$NIMLIB/pure/htmlgen.nim	/^macro em*(e: varargs[untyped]): untyped =$/;"	t
embed	$NIMLIB/pure/htmlgen.nim	/^macro embed*(e: varargs[untyped]): untyped =$/;"	t
emulatedThreadVars	$NIMLIB/std/private/threadtypes.nim	/^  emulatedThreadVars* = compileOption("tlsEmulation")$/;"	t
enableCache	$NIMLIB/pure/ropes.nim	/^proc enableCache*() {.rtl, extern: "nro$1".} =$/;"	t
enableExternalCapture	$NIMLIB/js/dom.nim	/^proc enableExternalCapture*(w: Window)$/;"	f
enableProfiling	$NIMLIB/pure/nimprof.nim	/^proc enableProfiling*() =$/;"	t
enableTrueColors	$NIMLIB/pure/terminal.nim	/^proc enableTrueColors*() =$/;"	t
encode	$NIMLIB/pure/base64.nim	/^proc encode*[T: byte|char](s: openArray[T], safe = false): string =$/;"	t
encodeMime	$NIMLIB/pure/base64.nim	/^proc encodeMime*(s: string, lineLen = 75.Positive, newLine = "\\r\\n",$/;"	t
encodeQuery	$NIMLIB/pure/uri.nim	/^func encodeQuery*(query: openArray[(string, string)], usePlus = true,$/;"	t
encodeURI	$NIMLIB/js/dom.nim	/^proc encodeURI*(uri: cstring): cstring {.importc, nodecl.}$/;"	f
encodeURIComponent	$NIMLIB/js/dom.nim	/^proc encodeURIComponent*(uri: cstring): cstring {.importc, nodecl.}$/;"	f
encodeUrl	$NIMLIB/pure/uri.nim	/^func encodeUrl*(s: string, usePlus = true): string =$/;"	t
encodeZigzag	$NIMLIB/std/varints.nim	/^proc encodeZigzag*(x: int64): uint64 {.inline.} =$/;"	t
encrypt	$NIMLIB/posix/posix.nim	/^proc encrypt*(a1: array[0..63, char], a2: cint) {.importc, header: "<unistd.h>".}$/;"	f
endAnchor	$NIMLIB/pure/pegs.nim	/^func endAnchor*: Peg {.inline.} =$/;"	t
endOfFile	$NIMLIB/std/syncio.nim	/^proc endOfFile*(f: File): bool {.tags: [], benign.} =$/;"	t
endgrent	$NIMLIB/posix/posix.nim	/^proc endgrent*() {.importc, header: "<grp.h>".}$/;"	f
endhostent	$NIMLIB/posix/posix.nim	/^proc endhostent*() {.importc, header: "<netdb.h>".}$/;"	f
endnetent	$NIMLIB/posix/posix.nim	/^proc endnetent*() {.importc, header: "<netdb.h>".}$/;"	f
endprotoent	$NIMLIB/posix/posix.nim	/^proc endprotoent*() {.importc, header: "<netdb.h>".}$/;"	f
endpwent	$NIMLIB/posix/posix.nim	/^proc endpwent*() {.importc, header: "<pwd.h>".}$/;"	f
endsWith	$NIMLIB/impure/re.nim	/^proc endsWith*(s: string, suffix: Regex): bool {.inline.} =$/;"	t
endsWith	$NIMLIB/js/jsre.nim	/^func endsWith*(pattern: cstring; self: RegExp): bool =$/;"	t
endsWith	$NIMLIB/pure/cstrutils.nim	/^func endsWith*(s, suffix: cstring): bool {.rtl, extern: "csuEndsWith".} =$/;"	t
endsWith	$NIMLIB/pure/pegs.nim	/^func endsWith*(s: string, suffix: Peg, start = 0): bool {.$/;"	t
endsWith	$NIMLIB/pure/strutils.nim	/^func endsWith*(s: string, suffix: char): bool {.inline.} =$/;"	t
endsWithImpl	$NIMLIB/std/private/strimpl.nim	/^template endsWithImpl*[T: string | cstring](s, suffix: T) =$/;"	t
endservent	$NIMLIB/posix/posix.nim	/^proc endservent*() {.importc, header: "<netdb.h>".}$/;"	f
entityName	$NIMLIB/pure/parsexml.nim	/^template entityName*(my: XmlParser): string =$/;"	t
entityToRune	$NIMLIB/pure/htmlparser.nim	/^proc entityToRune*(entity: string): Rune =$/;"	t
entityToUtf8	$NIMLIB/pure/htmlparser.nim	/^proc entityToUtf8*(entity: string): string =$/;"	t
enumLen	$NIMLIB/pure/typetraits.nim	/^macro enumLen*(T: typedesc[enum]): int =$/;"	t
enumerate	$NIMLIB/std/enumerate.nim	/^macro enumerate*(x: ForLoopStmt): untyped {.since: (1, 3).} =$/;"	t
envPairs	$NIMLIB/std/envvars.nim	/^iterator envPairs*(): tuple[key, value: string] {.tags: [ReadEnvEffect].} =$/;"	t
ep	$NIMLIB/genode/entrypoints.nim	/^proc ep*(env: GenodeEnv): Entrypoint {.importcpp: "(&#->ep())".}$/;"	f
epochTime	$NIMLIB/pure/times.nim	/^proc epochTime*(): float {.tags: [TimeEffect].} =$/;"	t
epoll_create	$NIMLIB/posix/epoll.nim	/^proc epoll_create*(size: cint): cint {.importc: "epoll_create",$/;"	f
epoll_create1	$NIMLIB/posix/epoll.nim	/^proc epoll_create1*(flags: cint): cint {.importc: "epoll_create1",$/;"	f
epoll_ctl	$NIMLIB/posix/epoll.nim	/^proc epoll_ctl*(epfd: cint; op: cint; fd: cint | SocketHandle; event: ptr EpollEvent): cint {.$/;"	f
epoll_wait	$NIMLIB/posix/epoll.nim	/^proc epoll_wait*(epfd: cint; events: ptr EpollEvent; maxevents: cint;$/;"	f
epsilon	$NIMLIB/pure/fenv.nim	/^template epsilon*(T: typedesc[float64]): float64 = DBL_EPSILON$/;"	t
eqIdent	$NIMLIB/core/macros.nim	/^proc eqIdent*(a: string; b: string): bool {.magic: "EqIdent", noSideEffect.}$/;"	f
equalMem	$NIMLIB/system/memalloc.nim	/^  proc equalMem*(a, b: pointer, size: Natural): bool {.inline, noSideEffect,$/;"	f
equalsFile	$NIMLIB/pure/ropes.nim	/^  proc equalsFile*(r: Rope, filename: string): bool {.rtl, extern: "nro$1Str".} =$/;"	t
eraseDown	$NIMLIB/pure/terminal.nim	/^  proc eraseDown*(f: File) =$/;"	t
eraseLine	$NIMLIB/pure/terminal.nim	/^template eraseLine*() = eraseLine(stdout)$/;"	t
eraseLineEnd	$NIMLIB/pure/terminal.nim	/^  proc eraseLineEnd*(f: File) =$/;"	t
eraseLineStart	$NIMLIB/pure/terminal.nim	/^  proc eraseLineStart*(f: File) =$/;"	t
eraseScreen	$NIMLIB/pure/terminal.nim	/^template eraseScreen*() = eraseScreen(stdout)$/;"	t
eraseUp	$NIMLIB/pure/terminal.nim	/^  proc eraseUp*(f: File) =$/;"	t
errno	$NIMLIB/posix/posix_haiku.nim	/^  errno* {.importc, header: "<errno.h>".}: cint ## error variable$/;"	t
errno	$NIMLIB/posix/posix_linux_amd64.nim	/^  errno* {.importc, header: "<errno.h>".}: cint ## error variable$/;"	t
errno	$NIMLIB/posix/posix_macos_amd64.nim	/^  errno* {.importc, header: "<errno.h>".}: cint ## error variable$/;"	t
errno	$NIMLIB/posix/posix_nintendoswitch.nim	/^  errno* {.importc, header: "<errno.h>".}: cint ## error variable$/;"	t
errno	$NIMLIB/posix/posix_openbsd_amd64.nim	/^  errno* {.importc, header: "<errno.h>".}: cint ## error variable$/;"	t
errno	$NIMLIB/posix/posix_other.nim	/^  errno* {.importc, header: "<errno.h>".}: cint ## error variable$/;"	t
error	$NIMLIB/core/macros.nim	/^proc error*(msg: string, n: NimNode = nil) {.magic: "NError", benign.}$/;"	t
error	$NIMLIB/js/dom.nim	/^  proc error*(f: FileReader): DomException {.importcpp: "#.error", nodecl.}$/;"	f
error	$NIMLIB/js/jsconsole.nim	/^proc error*(console: Console) {.importcpp, varargs.}$/;"	f
error	$NIMLIB/pure/logging.nim	/^template error*(args: varargs[string, `$`]) =$/;"	t
errorHandle	$NIMLIB/pure/osproc.nim	/^proc errorHandle*(p: Process): FileHandle {.rtl, extern: "nosp$1",$/;"	f
errorMessages	$NIMLIB/pure/parsejson.nim	/^  errorMessages*: array[JsonError, string] = [$/;"	t
errorMsg	$NIMLIB/pure/parsejson.nim	/^proc errorMsg*(my: JsonParser): string =$/;"	t
errorMsg	$NIMLIB/pure/parsexml.nim	/^proc errorMsg*(my: XmlParser, msg: string): string =$/;"	t
errorMsgExpected	$NIMLIB/pure/parsejson.nim	/^proc errorMsgExpected*(my: JsonParser, e: string): string =$/;"	t
errorMsgExpected	$NIMLIB/pure/parsexml.nim	/^proc errorMsgExpected*(my: XmlParser, tag: string): string =$/;"	t
errorStr	$NIMLIB/pure/parsecfg.nim	/^proc errorStr*(c: CfgParser, msg: string): string {.rtl, extern: "npc$1".} =$/;"	t
errorStream	$NIMLIB/pure/osproc.nim	/^proc errorStream*(p: Process): Stream {.rtl, extern: "nosp$1", tags: [].}$/;"	f
esc	$NIMLIB/packages/docutils/rstgen.nim	/^proc esc*(target: OutputTarget, s: string, splitAfter = -1, escMode = emText): string =$/;"	t
escChar	$NIMLIB/packages/docutils/rstgen.nim	/^proc escChar*(target: OutputTarget, dest: var string,$/;"	f
escape	$NIMLIB/js/dom.nim	/^proc escape*(uri: cstring): cstring {.importc, nodecl.}$/;"	f
escape	$NIMLIB/pure/strutils.nim	/^func escape*(s: string, prefix = "\\"", suffix = "\\""): string {.rtl,$/;"	t
escape	$NIMLIB/pure/xmltree.nim	/^proc escape*(s: string): string =$/;"	t
escapeJson	$NIMLIB/pure/json.nim	/^proc escapeJson*(s: string; result: var string) =$/;"	t
escapeJsonUnquoted	$NIMLIB/pure/json.nim	/^proc escapeJsonUnquoted*(s: string; result: var string) =$/;"	t
escapePeg	$NIMLIB/pure/pegs.nim	/^func escapePeg*(s: string): string =$/;"	t
escapeRe	$NIMLIB/impure/nre.nim	/^proc escapeRe*(str: string): string {.gcsafe.} =$/;"	t
escapeRe	$NIMLIB/impure/re.nim	/^proc escapeRe*(s: string): string =$/;"	t
euclDiv	$NIMLIB/pure/math.nim	/^func euclDiv*[T: SomeInteger](x, y: T): T {.since: (1, 5, 1).} =$/;"	t
euclMod	$NIMLIB/pure/math.nim	/^func euclMod*[T: SomeNumber](x, y: T): T {.since: (1, 5, 1).} =$/;"	t
eventAttr	$NIMLIB/pure/htmlgen.nim	/^  eventAttr* = "onabort onblur oncancel oncanplay oncanplaythrough onchange " &$/;"	t
eventParser	$NIMLIB/pure/pegs.nim	/^template eventParser*(pegAst, handlers: untyped): (proc(s: string): int) =$/;"	t
exception	$NIMLIB/js/jsconsole.nim	/^template exception*(console: Console, args: varargs[untyped]) =$/;"	t
exchange	$NIMLIB/pure/concurrency/atomics.nim	/^  proc exchange*[T](location: var Atomic[T]; desired: T; order: MemoryOrder = moSequentiallyCons/;"	t
excl	$NIMLIB/pure/collections/critbits.nim	/^proc excl*[T](c: var CritBitTree[T], key: string) =$/;"	t
excl	$NIMLIB/pure/collections/sets.nim	/^proc excl*[A](s: var OrderedSet[A], key: A) =$/;"	t
excl	$NIMLIB/std/packedsets.nim	/^proc excl*[A](s: var PackedSet[A], other: PackedSet[A]) =$/;"	t
excl	$NIMLIB/system/setops.nim	/^template excl*[T](x: var set[T], y: set[T]) {.callsite.} =$/;"	t
exclFilePermissions	$NIMLIB/pure/os.nim	/^proc exclFilePermissions*(filename: string,$/;"	f
exec	$NIMLIB/system/nimscript.nim	/^proc exec*(command: string, input: string, cache = "") {.$/;"	t
exec	$NIMLIB/wrappers/pcre.nim	/^proc exec*(code: ptr Pcre,$/;"	f
execCmd	$NIMLIB/pure/osproc.nim	/^proc execCmd*(command: string): int {.rtl, extern: "nosp$1",$/;"	f
execCmdEx	$NIMLIB/pure/osproc.nim	/^proc execCmdEx*(command: string, options: set[ProcessOption] = {$/;"	t
execProcess	$NIMLIB/pure/osproc.nim	/^proc execProcess*(command: string, workingDir: string = "",$/;"	t
execProcesses	$NIMLIB/pure/osproc.nim	/^proc execProcesses*(cmds: openArray[string],$/;"	f
execShellCmd	$NIMLIB/pure/os.nim	/^proc execShellCmd*(command: string): int {.rtl, extern: "nos$1",$/;"	f
execl	$NIMLIB/posix/posix.nim	/^proc execl*(a1, a2: cstring): cint {.varargs, importc, header: "<unistd.h>", sideEffect.}$/;"	f
execle	$NIMLIB/posix/posix.nim	/^proc execle*(a1, a2: cstring): cint {.varargs, importc, header: "<unistd.h>", sideEffect.}$/;"	f
execlp	$NIMLIB/posix/posix.nim	/^proc execlp*(a1, a2: cstring): cint {.varargs, importc, header: "<unistd.h>", sideEffect.}$/;"	f
execv	$NIMLIB/posix/posix.nim	/^proc execv*(a1: cstring, a2: cstringArray): cint {.importc, header: "<unistd.h>", sideEffect.}$/;"	f
execve	$NIMLIB/posix/posix.nim	/^proc execve*(a1: cstring, a2, a3: cstringArray): cint {.$/;"	f
execvp	$NIMLIB/posix/posix.nim	/^proc execvp*(a1: cstring, a2: cstringArray): cint {.importc, header: "<unistd.h>", sideEffect.}$/;"	f
execvpe	$NIMLIB/posix/posix.nim	/^proc execvpe*(a1: cstring, a2: cstringArray, a3: cstringArray): cint {.importc, header: "<unistd/;"	f
exists	$NIMLIB/std/logic.nim	/^proc exists*(args: varargs[untyped]): bool {.magic: "Exists".}$/;"	f
exists	$NIMLIB/system/nimscript.nim	/^proc exists*(key: string): bool =$/;"	t
existsCookie	$NIMLIB/pure/cgi.nim	/^proc existsCookie*(name: string): bool =$/;"	t
existsDir	$NIMLIB/pure/os.nim	/^    template existsDir*(args: varargs[untyped]): untyped {.deprecated: "use dirExists".} =$/;"	t
existsEnv	$NIMLIB/std/envvars.nim	/^    proc existsEnv*(key: string): bool {.tags: [ReadEnvEffect].} =$/;"	t
existsEnv	$NIMLIB/system/nimscript.nim	/^proc existsEnv*(key: string): bool {.tags: [ReadIOEffect].} =$/;"	t
existsFile	$NIMLIB/pure/os.nim	/^    template existsFile*(args: varargs[untyped]): untyped {.deprecated: "use fileExists".} =$/;"	t
existsOrCreateDir	$NIMLIB/std/dirs.nim	/^proc existsOrCreateDir*(dir: Path): bool {.inline, tags: [WriteDirEffect, ReadDirEffect].} =$/;"	t
existsOrCreateDir	$NIMLIB/std/private/osdirs.nim	/^proc existsOrCreateDir*(dir: string): bool {.rtl, extern: "nos$1",$/;"	f
exitStatusLikeShell	$NIMLIB/pure/os.nim	/^proc exitStatusLikeShell*(status: cint): cint =$/;"	t
exitnow	$NIMLIB/posix/posix.nim	/^proc exitnow*(code: int) {.importc: "_exit", header: "<unistd.h>".}$/;"	f
exp	$NIMLIB/js/jscore.nim	/^proc exp*(m: MathLib, a: SomeNumber): float {.importcpp.}$/;"	f
exp	$NIMLIB/pure/complex.nim	/^func exp*[T](z: Complex[T]): Complex[T] =$/;"	t
exp	$NIMLIB/pure/math.nim	/^  func exp*(x: float64): float64 {.importc: "exp", header: "<math.h>".} =$/;"	t
expandFilename	$NIMLIB/pure/os.nim	/^proc expandFilename*(filename: string): string {.rtl, extern: "nos$1",$/;"	f
expandMacros	$NIMLIB/core/macros.nim	/^macro expandMacros*(body: typed): untyped =$/;"	t
expandSymlink	$NIMLIB/std/private/ossymlinks.nim	/^proc expandSymlink*(symlinkPath: string): string {.noWeirdTarget.} =$/;"	t
expandSymlink	$NIMLIB/std/symlinks.nim	/^proc expandSymlink*(symlinkPath: Path): Path {.inline.} =$/;"	t
expandTabs	$NIMLIB/pure/strmisc.nim	/^func expandTabs*(s: string, tabSize: int = 8): string =$/;"	t
expandTilde	$NIMLIB/pure/os.nim	/^proc expandTilde*(path: string): string {.$/;"	f
expandTilde	$NIMLIB/std/paths.nim	/^proc expandTilde*(path: Path): Path {.inline,$/;"	f
expect	$NIMLIB/pure/unittest.nim	/^macro expect*(exceptions: varargs[typed], body: untyped): untyped =$/;"	t
expectIdent	$NIMLIB/core/macros.nim	/^proc expectIdent*(n: NimNode, name: string) {.since: (1,1).} =$/;"	t
expectKind	$NIMLIB/core/macros.nim	/^proc expectKind*(n: NimNode; k: set[NimNodeKind]) =$/;"	t
expectLen	$NIMLIB/core/macros.nim	/^proc expectLen*(n: NimNode, min, max: int) =$/;"	t
expectMinLen	$NIMLIB/core/macros.nim	/^proc expectMinLen*(n: NimNode, min: int) =$/;"	t
expm1	$NIMLIB/js/jscore.nim	/^proc expm1*(m: MathLib, a: SomeNumber): float {.importcpp.}$/;"	f
exponentBias	$NIMLIB/std/private/dragonbox.nim	/^  exponentBias*: int32 = 1024 - 1 + (significandSize - 1)$/;"	t
exponentMask	$NIMLIB/std/private/dragonbox.nim	/^  exponentMask*: BitsType = maxIeeeExponent shl (significandSize - 1)$/;"	t
exported	$NIMLIB/system/compilation.nim	/^        const exported* = 123$/;"	t
extendSeq	$NIMLIB/core/typeinfo.nim	/^proc extendSeq*(x: Any) =$/;"	t
extract	$NIMLIB/std/isolation.nim	/^func extract*[T](src: var Isolated[T]): T =$/;"	t
extractDocCommentsAndRunnables	$NIMLIB/core/macros.nim	/^proc extractDocCommentsAndRunnables*(n: NimNode): NimNode =$/;"	t
extractFilename	$NIMLIB/std/paths.nim	/^func extractFilename*(path: Path): Path {.inline.} =$/;"	t
extractFilename	$NIMLIB/std/private/ospaths2.nim	/^proc extractFilename*(path: string): string {.$/;"	f
extractRGB	$NIMLIB/pure/colors.nim	/^proc extractRGB*(a: Color): tuple[r, g, b: range[0..255]] =$/;"	t
fac	$NIMLIB/pure/math.nim	/^func fac*(n: int): int =$/;"	t
fail	$NIMLIB/pure/asyncfutures.nim	/^proc fail*[T](future: Future[T], error: ref Exception) =$/;"	t
fail	$NIMLIB/pure/asyncstreams.nim	/^proc fail*[T](future: FutureStream[T], error: ref Exception) =$/;"	t
fail	$NIMLIB/pure/unittest.nim	/^template fail* =$/;"	t
failed	$NIMLIB/pure/asyncfutures.nim	/^proc failed*(future: FutureBase): bool =$/;"	t
failed	$NIMLIB/pure/asyncstreams.nim	/^proc failed*[T](future: FutureStream[T]): bool =$/;"	t
failedAssertImpl	$NIMLIB/std/assertions.nim	/^proc failedAssertImpl*(msg: string) {.raises: [], tags: [].} =$/;"	t
failureOccurred	$NIMLIB/pure/unittest.nim	/^method failureOccurred*(formatter: OutputFormatter, checkpoints: seq[string],$/;"	f
fakeDot	$NIMLIB/std/wrapnils.nim	/^template fakeDot*(a: Option, b): untyped =$/;"	t
fastLog2	$NIMLIB/pure/bitops.nim	/^func fastLog2*(x: SomeInteger): int {.inline.} =$/;"	t
fastRuneAt	$NIMLIB/pure/unicode.nim	/^template fastRuneAt*(s: openArray[char] or string, i: int, result: untyped, doInc = true) =$/;"	t
fastToUTF8Copy	$NIMLIB/pure/unicode.nim	/^template fastToUTF8Copy*(c: Rune, s: var string, pos: int, doInc = true) =$/;"	t
fatal	$NIMLIB/pure/logging.nim	/^template fatal*(args: varargs[string, `$`]) =$/;"	t
fchdir	$NIMLIB/posix/posix.nim	/^proc fchdir*(a1: cint): cint {.importc, header: "<unistd.h>", sideEffect.}$/;"	f
fchmod	$NIMLIB/posix/posix.nim	/^proc fchmod*(a1: cint, a2: Mode): cint {.importc, header: "<sys\/stat.h>", sideEffect.}$/;"	f
fchown	$NIMLIB/posix/posix.nim	/^proc fchown*(a1: cint, a2: Uid, a3: Gid): cint {.importc, header: "<unistd.h>", sideEffect.}$/;"	f
fcntl	$NIMLIB/posix/posix.nim	/^proc fcntl*(a1: cint | SocketHandle, a2: cint): cint {.varargs, importc, header: "<fcntl.h>", si/;"	f
fd	$NIMLIB/posix/epoll.nim	/^    fd* {.importc: "fd".}: cint$/;"	t
fdatasync	$NIMLIB/posix/posix.nim	/^proc fdatasync*(a1: cint): cint {.importc, header: "<unistd.h>".}$/;"	f
feclearexcept	$NIMLIB/pure/fenv.nim	/^proc feclearexcept*(excepts: cint): cint {.importc, header: "<fenv.h>".}$/;"	f
fegetenv	$NIMLIB/pure/fenv.nim	/^proc fegetenv*(envp: ptr Tfenv): cint {.importc, header: "<fenv.h>".}$/;"	f
fegetexceptflag	$NIMLIB/pure/fenv.nim	/^proc fegetexceptflag*(flagp: ptr Tfexcept, excepts: cint): cint {.$/;"	f
fegetround	$NIMLIB/pure/fenv.nim	/^proc fegetround*(): cint {.importc, header: "<fenv.h>".}$/;"	f
feholdexcept	$NIMLIB/pure/fenv.nim	/^proc feholdexcept*(envp: ptr Tfenv): cint {.importc, header: "<fenv.h>".}$/;"	f
fence	$NIMLIB/pure/concurrency/atomics.nim	/^  proc fence*(order: MemoryOrder) {.importcpp: "std::atomic_thread_fence(@)".}$/;"	f
fence	$NIMLIB/std/sysatomics.nim	/^  template fence*() = atomicThreadFence(ATOMIC_SEQ_CST)$/;"	t
feraiseexcept	$NIMLIB/pure/fenv.nim	/^proc feraiseexcept*(excepts: cint): cint {.importc, header: "<fenv.h>".}$/;"	f
fesetenv	$NIMLIB/pure/fenv.nim	/^proc fesetenv*(a1: ptr Tfenv): cint {.importc, header: "<fenv.h>".}$/;"	f
fesetexceptflag	$NIMLIB/pure/fenv.nim	/^proc fesetexceptflag*(flagp: ptr Tfexcept, excepts: cint): cint {.$/;"	f
fesetround	$NIMLIB/pure/fenv.nim	/^proc fesetround*(roundingDirection: cint): cint {.importc, header: "<fenv.h>".}$/;"	f
fetch	$NIMLIB/std/jsfetch.nim	/^proc fetch*(url: cstring | Request; options: FetchOptions): Future[Response] {.importjs: "$1(#, /;"	f
fetchAdd	$NIMLIB/pure/concurrency/atomics.nim	/^  proc fetchAdd*[T: SomeInteger](location: var Atomic[T]; value: T; order: MemoryOrder = moSeque/;"	t
fetchAnd	$NIMLIB/pure/concurrency/atomics.nim	/^  proc fetchAnd*[T: SomeInteger](location: var Atomic[T]; value: T; order: MemoryOrder = moSeque/;"	t
fetchOr	$NIMLIB/pure/concurrency/atomics.nim	/^  proc fetchOr*[T: SomeInteger](location: var Atomic[T]; value: T; order: MemoryOrder = moSequen/;"	t
fetchSub	$NIMLIB/pure/concurrency/atomics.nim	/^  proc fetchSub*[T: SomeInteger](location: var Atomic[T]; value: T; order: MemoryOrder = moSeque/;"	t
fetchXor	$NIMLIB/pure/concurrency/atomics.nim	/^  proc fetchXor*[T: SomeInteger](location: var Atomic[T]; value: T; order: MemoryOrder = moSeque/;"	t
fetestexcept	$NIMLIB/pure/fenv.nim	/^proc fetestexcept*(excepts: cint): cint {.importc, header: "<fenv.h>".}$/;"	f
feupdateenv	$NIMLIB/pure/fenv.nim	/^proc feupdateenv*(envp: ptr Tfenv): cint {.importc, header: "<fenv.h>".}$/;"	f
fieldPairs	$NIMLIB/system/iterators.nim	/^iterator fieldPairs*[T: tuple|object](x: T): tuple[key: string, val: RootObj] {.$/;"	i
fields	$NIMLIB/core/typeinfo.nim	/^iterator fields*(x: Any): tuple[name: string, any: Any] =$/;"	t
fields	$NIMLIB/system/iterators.nim	/^iterator fields*[T: tuple|object](x: T): RootObj {.$/;"	i
fieldset	$NIMLIB/pure/htmlgen.nim	/^macro fieldset*(e: varargs[untyped]): untyped =$/;"	t
figcaption	$NIMLIB/pure/htmlgen.nim	/^macro figcaption*(e: varargs[untyped]): untyped =$/;"	t
figure	$NIMLIB/pure/htmlgen.nim	/^macro figure*(e: varargs[untyped]): untyped =$/;"	t
fileExists	$NIMLIB/std/files.nim	/^proc fileExists*(filename: Path): bool {.inline, tags: [ReadDirEffect].} =$/;"	t
fileExists	$NIMLIB/std/private/oscommon.nim	/^proc fileExists*(filename: string): bool {.rtl, extern: "nos$1",$/;"	f
fileExists	$NIMLIB/system/nimscript.nim	/^proc fileExists*(filename: string): bool {.tags: [ReadIOEffect].} =$/;"	t
fileNewer	$NIMLIB/pure/os.nim	/^proc fileNewer*(a, b: string): bool {.rtl, extern: "nos$1", noWeirdTarget.} =$/;"	t
fileReaderDone	$NIMLIB/js/dom.nim	/^    fileReaderDone* = 2.FileReaderState$/;"	t
fileReaderEmpty	$NIMLIB/js/dom.nim	/^    fileReaderEmpty* = 0.FileReaderState$/;"	t
fileReaderLoading	$NIMLIB/js/dom.nim	/^    fileReaderLoading* = 1.FileReaderState$/;"	t
fill	$NIMLIB/pure/algorithm.nim	/^proc fill*[T](a: var openArray[T], value: T) =$/;"	t
filter	$NIMLIB/pure/collections/sequtils.nim	/^proc filter*[T](s: openArray[T], pred: proc(x: T): bool {.closure.}): seq[T]$/;"	f
filter	$NIMLIB/pure/options.nim	/^proc filter*[T](self: Option[T], callback: proc (input: T): bool): Option[T] {.inline, effectsOf/;"	t
filterIt	$NIMLIB/pure/collections/sequtils.nim	/^template filterIt*(s, pred: untyped): untyped =$/;"	t
finalize	$NIMLIB/std/sha1.nim	/^proc finalize*(ctx: var Sha1State): Sha1Digest =$/;"	t
find	$NIMLIB/impure/nre.nim	/^proc find*(str: string, pattern: Regex, start = 0, endpos = int.high): Option[RegexMatch] =$/;"	t
find	$NIMLIB/impure/re.nim	/^proc find*(s: string, pattern: Regex, start = 0): int {.inline.} =$/;"	t
find	$NIMLIB/js/dom.nim	/^proc find*(w: Window, text: cstring, caseSensitive = false,$/;"	t
find	$NIMLIB/pure/collections/heapqueue.nim	/^proc find*[T](heap: HeapQueue[T], x: T): int {.since: (1, 3).} =$/;"	t
find	$NIMLIB/pure/collections/lists.nim	/^proc find*[T](L: SomeLinkedCollection[T], value: T): SomeLinkedNode[T] =$/;"	t
find	$NIMLIB/pure/strutils.nim	/^func find*(s: string, sub: char, start: Natural = 0, last = -1): int {.rtl,$/;"	t
find	$NIMLIB/std/private/strimpl.nim	/^func find*(s: cstring, sub: char, start: Natural = 0, last = 0): int =$/;"	t
find	$NIMLIB/system.nim	/^proc find*[T, S](a: T, item: S): int {.inline.}=$/;"	t
findAll	$NIMLIB/impure/nre.nim	/^proc findAll*(str: string, pattern: Regex, start = 0, endpos = int.high): seq[string] =$/;"	t
findAll	$NIMLIB/impure/re.nim	/^proc findAll*(s: string, pattern: Regex, start = 0): seq[string] {.inline.} =$/;"	t
findAll	$NIMLIB/pure/pegs.nim	/^iterator findAll*(s: string, pattern: Peg, start = 0): string =$/;"	t
findAll	$NIMLIB/pure/xmltree.nim	/^proc findAll*(n: XmlNode, tag: string, result: var seq[XmlNode],$/;"	f
findBounds	$NIMLIB/impure/re.nim	/^proc findBounds*(s: string, pattern: Regex,$/;"	f
findChild	$NIMLIB/core/macros.nim	/^template findChild*(n: NimNode; cond: untyped): NimNode {.dirty.} =$/;"	t
findClose	$NIMLIB/windows/winlean.nim	/^proc findClose*(hFindFile: Handle) {.stdcall, dynlib: "kernel32",$/;"	f
findExe	$NIMLIB/pure/os.nim	/^proc findExe*(exe: string, followSymlinks: bool = true;$/;"	t
findExe	$NIMLIB/system/nimscript.nim	/^proc findExe*(bin: string): string =$/;"	t
findFirstFile	$NIMLIB/std/private/oscommon.nim	/^  proc findFirstFile*(a: string, b: var WIN32_FIND_DATA): Handle =$/;"	t
findFirstFileW	$NIMLIB/windows/winlean.nim	/^proc findFirstFileW*(lpFileName: WideCString,$/;"	f
findIter	$NIMLIB/impure/nre.nim	/^iterator findIter*(str: string, pattern: Regex, start = 0, endpos = int.high): RegexMatch =$/;"	t
findNextFile	$NIMLIB/std/private/oscommon.nim	/^  template findNextFile*(a, b: untyped): untyped = findNextFileW(a, b)$/;"	t
findNextFileW	$NIMLIB/windows/winlean.nim	/^proc findNextFileW*(hFindFile: Handle,$/;"	f
finished	$NIMLIB/pure/asyncfutures.nim	/^proc finished*(future: FutureBase | FutureVar): bool =$/;"	t
finished	$NIMLIB/pure/asyncstreams.nim	/^proc finished*[T](future: FutureStream[T]): bool =$/;"	t
finished	$NIMLIB/system.nim	/^  proc finished*[T: proc](x: T): bool {.noSideEffect, inline, magic: "Finished".} =$/;"	t
firstSetBit	$NIMLIB/pure/bitops.nim	/^func firstSetBit*(x: SomeInteger): int {.inline.} =$/;"	t
flags	$NIMLIB/pure/pegs.nim	/^func flags*(nt: NonTerminal): set[NonTerminalFlag] = nt.flags$/;"	t
flatMap	$NIMLIB/pure/options.nim	/^proc flatMap*[T, R](self: Option[T],$/;"	f
flatten	$NIMLIB/pure/options.nim	/^proc flatten*[T](self: Option[Option[T]]): Option[T] {.inline.} =$/;"	t
flipBit	$NIMLIB/pure/bitops.nim	/^proc flipBit*[T: SomeInteger](v: var T; bit: BitsRange[T]) {.inline.} =$/;"	t
flipBits	$NIMLIB/pure/bitops.nim	/^macro flipBits*(v: typed; bits: varargs[typed]): untyped =$/;"	t
flipMask	$NIMLIB/pure/bitops.nim	/^proc flipMask*[T: SomeInteger](v: var T; slice: Slice[int]) {.inline, since: (1, 3).} =$/;"	t
flipMasked	$NIMLIB/pure/bitops.nim	/^func flipMasked*[T: SomeInteger](v: T; slice: Slice[int]): T {.inline, since: (1, 3).} =$/;"	t
float	$NIMLIB/system/basic_types.nim	/^  float* {.magic: Float.}     ## Default floating point type.$/;"	t
float32	$NIMLIB/system/basic_types.nim	/^  float32* {.magic: Float32.} ## 32 bit floating point type.$/;"	t
float32ToChars	$NIMLIB/std/private/schubfach.nim	/^proc float32ToChars*(buffer: var openArray[char]; v: float32; forceTrailingDotZero = false): int/;"	t
float64	$NIMLIB/system/basic_types.nim	/^  float64* {.magic: Float.}   ## 64 bit floating point type.$/;"	t
floatVal	$NIMLIB/core/macros.nim	/^proc floatVal*(n: NimNode): BiggestFloat {.magic: "NFloatVal", noSideEffect.}$/;"	f
floor	$NIMLIB/js/jscore.nim	/^proc floor*(m: MathLib, f: SomeFloat): int {.importcpp.}$/;"	f
floor	$NIMLIB/pure/math.nim	/^  func floor*(x: float64): float64 {.importc: "floor", header: "<math.h>".} =$/;"	t
floorDiv	$NIMLIB/pure/math.nim	/^func floorDiv*[T: SomeInteger](x, y: T): T =$/;"	t
floorDiv	$NIMLIB/pure/rationals.nim	/^func floorDiv*[T: SomeInteger](x, y: Rational[T]): T =$/;"	t
floorDivPow2	$NIMLIB/std/private/dragonbox.nim	/^proc floorDivPow2*(x: int32; n: int32): int32 {.inline.} =$/;"	t
floorLog10Pow2	$NIMLIB/std/private/dragonbox.nim	/^proc floorLog10Pow2*(e: int32): int32 {.inline.} =$/;"	t
floorLog10ThreeQuartersPow2	$NIMLIB/std/private/dragonbox.nim	/^proc floorLog10ThreeQuartersPow2*(e: int32): int32 {.inline.} =$/;"	t
floorLog2Pow10	$NIMLIB/std/private/dragonbox.nim	/^proc floorLog2Pow10*(e: int32): int32 {.inline.} =$/;"	t
floorMod	$NIMLIB/pure/math.nim	/^func floorMod*[T: SomeNumber](x, y: T): T =$/;"	t
floorMod	$NIMLIB/pure/rationals.nim	/^func floorMod*[T: SomeInteger](x, y: Rational[T]): Rational[T] =$/;"	t
flush	$NIMLIB/pure/ioselects/ioselectors_select.nim	/^proc flush*[T](s: Selector[T]) = discard$/;"	t
flush	$NIMLIB/pure/memfiles.nim	/^proc flush*(f: var MemFile; attempts: Natural = 3) =$/;"	t
flush	$NIMLIB/pure/streams.nim	/^proc flush*(s: Stream) =$/;"	t
flushFile	$NIMLIB/std/syncio.nim	/^proc flushFile*(f: File) {.tags: [WriteIOEffect].} =$/;"	t
flushFileBuffers	$NIMLIB/windows/winlean.nim	/^proc flushFileBuffers*(hFile: Handle): WINBOOL {.stdcall, dynlib: "kernel32",$/;"	f
flushViewOfFile	$NIMLIB/windows/winlean.nim	/^proc flushViewOfFile*(lpBaseAddress: pointer, dwNumberOfBytesToFlush: DWORD): WINBOOL {.$/;"	f
fmt	$NIMLIB/pure/strformat.nim	/^template fmt*(pattern: static string): untyped =$/;"	t
fmtmsg	$NIMLIB/posix/posix.nim	/^  proc fmtmsg*(a1: int, a2: cstring, a3: cint,$/;"	f
fnmatch	$NIMLIB/posix/posix.nim	/^proc fnmatch*(a1, a2: cstring, a3: cint): cint {.importc, header: "<fnmatch.h>".}$/;"	f
focus	$NIMLIB/js/dom.nim	/^proc focus*(w: Window)$/;"	f
foldl	$NIMLIB/pure/collections/sequtils.nim	/^template foldl*(sequence, operation: untyped): untyped =$/;"	t
foldr	$NIMLIB/pure/collections/sequtils.nim	/^template foldr*(sequence, operation: untyped): untyped =$/;"	t
footer	$NIMLIB/pure/htmlgen.nim	/^macro footer*(e: varargs[untyped]): untyped =$/;"	t
forall	$NIMLIB/std/logic.nim	/^proc forall*(args: varargs[untyped]): bool {.magic: "Forall".}$/;"	f
foreignCmd	$NIMLIB/pure/distros.nim	/^proc foreignCmd*(cmd: string; requiresSudo = false) =$/;"	t
foreignDep	$NIMLIB/pure/distros.nim	/^proc foreignDep*(foreignPackageName: string) =$/;"	t
foreignDepInstallCmd	$NIMLIB/pure/distros.nim	/^proc foreignDepInstallCmd*(foreignPackageName: string): (string, bool) =$/;"	t
foreignDeps	$NIMLIB/pure/distros.nim	/^  var foreignDeps*: seq[string] = @[]  ## Registered foreign deps.$/;"	t
fork	$NIMLIB/posix/posix.nim	/^proc fork*(): Pid {.importc, header: "<unistd.h>", sideEffect.}$/;"	f
form	$NIMLIB/pure/htmlgen.nim	/^macro form*(e: varargs[untyped]): untyped =$/;"	t
formData	$NIMLIB/std/jsfetch.nim	/^proc formData*(self: Response): Future[FormData] {.importjs: "#.$1()".}$/;"	f
format	$NIMLIB/pure/times.nim	/^proc format*(time: Time, f: string, zone: Timezone = local()): string$/;"	t
formatBiggestFloat	$NIMLIB/pure/strutils.nim	/^func formatBiggestFloat*(f: BiggestFloat, format: FloatFormatMode = ffDefault,$/;"	t
formatDigits	$NIMLIB/std/private/dragonbox.nim	/^proc formatDigits*[T: Ordinal](buffer: var openArray[char]; pos: T; digits: uint64; decimalExpon/;"	f
formatErrorIndexBound	$NIMLIB/system/indexerrors.nim	/^template formatErrorIndexBound*[T](i, n: T): string =$/;"	t
formatFieldDefect	$NIMLIB/system/indexerrors.nim	/^template formatFieldDefect*(f, discVal): string =$/;"	t
formatFloat	$NIMLIB/pure/strutils.nim	/^func formatFloat*(f: float, format: FloatFormatMode = ffDefault,$/;"	t
formatIndexEntry	$NIMLIB/packages/docutils/rstidx.nim	/^proc formatIndexEntry*(kind: IndexEntryKind; htmlFile, id, term, linkTitle,$/;"	f
formatMessageW	$NIMLIB/windows/winlean.nim	/^proc formatMessageW*(dwFlags: int32, lpSource: pointer,$/;"	f
formatNamedVars	$NIMLIB/packages/docutils/rstgen.nim	/^proc formatNamedVars*(frmt: string, varnames: openArray[string],$/;"	f
formatStr	$NIMLIB/impure/nre/private/util.nim	/^template formatStr*(howExpr, namegetter, idgetter): untyped =$/;"	t
formatValue	$NIMLIB/pure/strformat.nim	/^proc formatValue*[T: SomeInteger](result: var string; value: T;$/;"	f
formatValue	$NIMLIB/pure/times.nim	/^proc formatValue*(result: var string; value: DateTime | Time, specifier: string) =$/;"	t
forward	$NIMLIB/js/dom.nim	/^proc forward*(w: Window)$/;"	f
forwardImpl	$NIMLIB/std/private/bitops_utils.nim	/^template forwardImpl*(impl, arg) {.dirty.} =$/;"	t
fpRadix	$NIMLIB/pure/fenv.nim	/^template fpRadix*: int = FLT_RADIX$/;"	t
fpathconf	$NIMLIB/posix/posix.nim	/^proc fpathconf*(a1, a2: cint): int {.importc, header: "<unistd.h>".}$/;"	f
frameMsgBuf	$NIMLIB/system/excpt.nim	/^  var frameMsgBuf* {.threadvar.}: string$/;"	t
free	$NIMLIB/wrappers/linenoise/linenoise.nim	/^proc free*(s: cstring) {.importc: "free", header: "<stdlib.h>".}$/;"	f
freeAddrInfo	$NIMLIB/posix/posix.nim	/^proc freeAddrInfo*(a1: ptr AddrInfo) {.importc: "freeaddrinfo", header: "<netdb.h>".}$/;"	f
freeAddrInfo	$NIMLIB/windows/winlean.nim	/^proc freeAddrInfo*(ai: ptr AddrInfo) {.$/;"	f
freeEnvironmentStringsW	$NIMLIB/windows/winlean.nim	/^proc freeEnvironmentStringsW*(para1: WideCString): int32 {.$/;"	f
freeShared	$NIMLIB/system/memalloc.nim	/^  proc freeShared*[T](p: ptr T) {.inline, benign, raises: [].} =$/;"	t
freeSid	$NIMLIB/windows/winlean.nim	/^proc freeSid*(pSid: PSID): PSID$/;"	f
free_study	$NIMLIB/wrappers/pcre.nim	/^proc free_study*(extra: ptr ExtraData)$/;"	f
free_substring	$NIMLIB/wrappers/pcre.nim	/^proc free_substring*(stringptr: cstring)$/;"	f
free_substring_list	$NIMLIB/wrappers/pcre.nim	/^proc free_substring_list*(stringptr: cstringArray)$/;"	f
frexp	$NIMLIB/pure/math.nim	/^func frexp*[T: float32|float64](x: T, exponent: var int): T {.inline.} =$/;"	t
fromBin	$NIMLIB/pure/strutils.nim	/^func fromBin*[T: SomeInteger](s: string): T =$/;"	t
fromHex	$NIMLIB/pure/strutils.nim	/^func fromHex*[T: SomeInteger](s: string): T =$/;"	t
fromJson	$NIMLIB/std/jsonutils.nim	/^proc fromJson*[T](a: var T, b: JsonNode, opt = Joptions())$/;"	t
fromJsonHook	$NIMLIB/std/jsonutils.nim	/^proc fromJsonHook*[T](self: var Option[T], jsonNode: JsonNode, opt = Joptions()) =$/;"	t
fromOct	$NIMLIB/pure/strutils.nim	/^func fromOct*[T: SomeInteger](s: string): T =$/;"	t
fromSockAddr	$NIMLIB/pure/net.nim	/^proc fromSockAddr*(sa: Sockaddr_storage | SockAddr | Sockaddr_in | Sockaddr_in6,$/;"	f
fromUnix	$NIMLIB/pure/times.nim	/^proc fromUnix*(unix: int64): Time$/;"	f
fromWinTime	$NIMLIB/pure/times.nim	/^proc fromWinTime*(win: int64): Time =$/;"	t
fround	$NIMLIB/js/jscore.nim	/^proc fround*(m: MathLib, f: SomeFloat): float32 {.importcpp.}$/;"	f
fstat	$NIMLIB/posix/posix.nim	/^proc fstat*(a1: cint, a2: var Stat): cint {.importc, header: "<sys\/stat.h>", sideEffect.}$/;"	f
fstatvfs	$NIMLIB/posix/posix.nim	/^proc fstatvfs*(a1: cint, a2: var Statvfs): cint {.$/;"	f
fsync	$NIMLIB/posix/posix.nim	/^proc fsync*(a1: cint): cint {.importc, header: "<unistd.h>".}$/;"	f
fsync	$NIMLIB/posix/posix_utils.nim	/^proc fsync*(fd: int) =$/;"	t
ftok	$NIMLIB/posix/posix.nim	/^proc ftok*(a1: cstring, a2: cint): Key {.importc, header: "<sys\/ipc.h>".}$/;"	f
ftruncate	$NIMLIB/posix/posix.nim	/^proc ftruncate*(a1: cint, a2: Off): cint {.importc, header: "<unistd.h>".}$/;"	f
ftw	$NIMLIB/posix/posix.nim	/^proc ftw*(a1: cstring,$/;"	f
fullSet	$NIMLIB/std/setutils.nim	/^func fullSet*[T](U: typedesc[T]): set[T] {.inline.} =$/;"	t
fullinfo	$NIMLIB/wrappers/pcre.nim	/^proc fullinfo*(code: ptr Pcre,$/;"	f
gLogger	$NIMLIB/system/memtracker.nim	/^  gLogger*: TrackLogger = proc (log: TrackLog) = discard$/;"	t
gai_strerror	$NIMLIB/posix/posix.nim	/^proc gai_strerror*(a1: cint): cstring {.importc:"(char *)$1", header: "<netdb.h>".}$/;"	f
gamma	$NIMLIB/pure/math.nim	/^    func gamma*(x: float64): float64 {.importc: "tgamma", header: "<math.h>".} =$/;"	t
gauss	$NIMLIB/pure/random.nim	/^proc gauss*(r: var Rand; mu = 0.0; sigma = 1.0): float {.since: (1, 3).} =$/;"	t
gcInvariant	$NIMLIB/system/gc.nim	/^proc gcInvariant*() =$/;"	t
gcInvariant	$NIMLIB/system/gc2.nim	/^proc gcInvariant*() =$/;"	t
gcd	$NIMLIB/pure/math.nim	/^func gcd*[T](x: openArray[T]): T {.since: (1, 1).} =$/;"	t
genAst	$NIMLIB/std/genasts.nim	/^template genAst*(args: varargs[untyped]): untyped =$/;"	t
genAstOpt	$NIMLIB/std/genasts.nim	/^macro genAstOpt*(options: static set[GenAstOpt], args: varargs[untyped]): untyped =$/;"	t
genEnumCaseStmt	$NIMLIB/std/enumutils.nim	/^macro genEnumCaseStmt*(typ: typedesc, argSym: typed, default: typed,$/;"	m
genOid	$NIMLIB/pure/oids.nim	/^proc genOid*(): Oid =$/;"	t
genSym	$NIMLIB/core/macros.nim	/^proc genSym*(kind: NimSymKind = nskLet; ident = ""): NimNode {.$/;"	t
genTempPath	$NIMLIB/std/tempfiles.nim	/^proc genTempPath*(prefix, suffix: string, dir = ""): string =$/;"	t
generatedTime	$NIMLIB/pure/oids.nim	/^proc generatedTime*(oid: Oid): Time =$/;"	t
genericHead	$NIMLIB/pure/typetraits.nim	/^proc genericHead*(t: typedesc): typedesc {.magic: "TypeTrait".} =$/;"	t
genericParams	$NIMLIB/pure/typetraits.nim	/^  template genericParams*(T: typedesc): untyped =$/;"	t
get	$NIMLIB/pure/httpclient.nim	/^proc get*(client: HttpClient | AsyncHttpClient,$/;"	f
get	$NIMLIB/pure/options.nim	/^proc get*[T](self: var Option[T]): var T {.inline.} =$/;"	t
get	$NIMLIB/pure/typetraits.nim	/^  template get*(T: typedesc[tuple], i: static int): untyped =$/;"	t
get	$NIMLIB/system/nimscript.nim	/^proc get*(key: string): string =$/;"	t
getAddrInfo	$NIMLIB/pure/nativesockets.nim	/^proc getAddrInfo*(address: string, port: Port, domain: Domain = AF_INET,$/;"	t
getAddrString	$NIMLIB/pure/nativesockets.nim	/^  proc getAddrString*(sockAddr: ptr SockAddr, strAddress: var string) {.noinit.} =$/;"	t
getAlign	$NIMLIB/core/macros.nim	/^proc getAlign*(arg: NimNode): int {.magic: "NSizeOf", noSideEffect.} =$/;"	t
getAllocStats	$NIMLIB/system/memalloc.nim	/^    proc getAllocStats*(): AllocStats = stats$/;"	t
getAppDir	$NIMLIB/pure/os.nim	/^proc getAppDir*(): string {.rtl, extern: "nos$1", tags: [ReadIOEffect], noWeirdTarget.} =$/;"	t
getAppFilename	$NIMLIB/pure/os.nim	/^proc getAppFilename*(): string {.rtl, extern: "nos$1", tags: [ReadIOEffect], noWeirdTarget.} =$/;"	t
getArgument	$NIMLIB/packages/docutils/rst.nim	/^proc getArgument*(n: PRstNode): string$/;"	f
getAsFile	$NIMLIB/js/dom.nim	/^proc getAsFile*(dti: DataTransferItem): File$/;"	f
getAst	$NIMLIB/core/macros.nim	/^proc getAst*(macroOrTemplate: untyped): NimNode {.magic: "ExpandToAst", noSideEffect.}$/;"	f
getAttribute	$NIMLIB/js/dom.nim	/^proc getAttribute*(n: Node, attr: cstring): cstring$/;"	f
getAttributeNode	$NIMLIB/js/dom.nim	/^proc getAttributeNode*(n: Node, attr: cstring): Node$/;"	f
getBiggestFloat	$NIMLIB/core/typeinfo.nim	/^proc getBiggestFloat*(x: Any): BiggestFloat =$/;"	t
getBiggestInt	$NIMLIB/core/typeinfo.nim	/^proc getBiggestInt*(x: Any): BiggestInt =$/;"	t
getBiggestInt	$NIMLIB/pure/json.nim	/^proc getBiggestInt*(n: JsonNode, default: BiggestInt = 0): BiggestInt =$/;"	t
getBiggestUint	$NIMLIB/core/typeinfo.nim	/^proc getBiggestUint*(x: Any): uint64 =$/;"	t
getBool	$NIMLIB/core/typeinfo.nim	/^proc getBool*(x: Any): bool =$/;"	t
getBool	$NIMLIB/pure/json.nim	/^proc getBool*(n: JsonNode, default: bool = false): bool =$/;"	t
getBoundingClientRect	$NIMLIB/js/dom.nim	/^proc getBoundingClientRect*(e: Node): BoundingRect {.$/;"	f
getCString	$NIMLIB/core/typeinfo.nim	/^proc getCString*(x: Any): cstring =$/;"	t
getCacheDir	$NIMLIB/std/appdirs.nim	/^proc getCacheDir*(app: Path): Path {.inline.} =$/;"	t
getCacheDir	$NIMLIB/std/private/osappdirs.nim	/^proc getCacheDir*(app: string): string =$/;"	t
getCallSoonProc	$NIMLIB/pure/asyncfutures.nim	/^proc getCallSoonProc*(): (proc(cbproc: proc ()) {.gcsafe.}) =$/;"	t
getCellId	$NIMLIB/system/gc_ms.nim	/^  proc getCellId*[T](x: ref T): int =$/;"	t
getChar	$NIMLIB/core/typeinfo.nim	/^proc getChar*(x: Any): char =$/;"	t
getClockStr	$NIMLIB/pure/times.nim	/^proc getClockStr*(dt = now()): string {.rtl, extern: "nt$1", tags: [TimeEffect].} =$/;"	t
getColNumber	$NIMLIB/pure/lexbase.nim	/^proc getColNumber*(L: BaseLexer, pos: int): int =$/;"	t
getColumn	$NIMLIB/pure/parsecfg.nim	/^proc getColumn*(c: CfgParser): int {.rtl, extern: "npc$1".} =$/;"	t
getColumn	$NIMLIB/pure/parsejson.nim	/^proc getColumn*(my: JsonParser): int {.inline.} =$/;"	t
getColumn	$NIMLIB/pure/parsexml.nim	/^proc getColumn*(my: XmlParser): int {.inline.} =$/;"	t
getCommand	$NIMLIB/system/nimscript.nim	/^proc getCommand*(): string =$/;"	t
getCommandLine	$NIMLIB/std/cmdline.nim	/^  template getCommandLine*(): untyped = getCommandLineW()$/;"	t
getCommandLineW	$NIMLIB/windows/winlean.nim	/^proc getCommandLineW*(): WideCString {.importc: "GetCommandLineW",$/;"	f
getComputedStyle	$NIMLIB/js/dom.nim	/^proc getComputedStyle*(w: Window, e: Node, pe: Node = nil): Style$/;"	t
getConfigDir	$NIMLIB/std/appdirs.nim	/^proc getConfigDir*(): Path {.inline, tags: [ReadEnvEffect, ReadIOEffect].} =$/;"	t
getConfigDir	$NIMLIB/std/private/osappdirs.nim	/^proc getConfigDir*(): string {.rtl, extern: "nos$1",$/;"	f
getContent	$NIMLIB/pure/httpclient.nim	/^proc getContent*(client: HttpClient | AsyncHttpClient,$/;"	f
getContentLength	$NIMLIB/pure/cgi.nim	/^proc getContentLength*(): string =$/;"	t
getContentType	$NIMLIB/pure/cgi.nim	/^proc getContentType*(): string =$/;"	t
getCookie	$NIMLIB/pure/cgi.nim	/^proc getCookie*(name: string): string =$/;"	t
getCreationTime	$NIMLIB/pure/os.nim	/^proc getCreationTime*(file: string): times.Time {.rtl, extern: "nos$1", noWeirdTarget.} =$/;"	t
getCurrentCompilerExe	$NIMLIB/pure/os.nim	/^proc getCurrentCompilerExe*(): string {.compileTime.} = discard$/;"	t
getCurrentDir	$NIMLIB/std/paths.nim	/^proc getCurrentDir*(): Path {.inline, tags: [].} =$/;"	t
getCurrentDir	$NIMLIB/std/private/ospaths2.nim	/^  proc getCurrentDir*(): string {.rtl, extern: "nos$1", tags: [].} =$/;"	t
getCurrentDir	$NIMLIB/system/nimscript.nim	/^proc getCurrentDir*(): string =$/;"	t
getCurrentDirectoryW	$NIMLIB/windows/winlean.nim	/^proc getCurrentDirectoryW*(nBufferLength: int32,$/;"	f
getCurrentEncoding	$NIMLIB/pure/encodings.nim	/^proc getCurrentEncoding*(uiApp = false): string =$/;"	t
getCurrentException	$NIMLIB/system.nim	/^  proc getCurrentException*(): ref Exception {.compilerRtl.} = discard$/;"	t
getCurrentException	$NIMLIB/system/jssys.nim	/^proc getCurrentException*(): ref Exception {.compilerRtl, benign.} =$/;"	t
getCurrentExceptionMsg	$NIMLIB/system.nim	/^  proc getCurrentExceptionMsg*(): string {.inline, benign.} =$/;"	t
getCurrentExceptionMsg	$NIMLIB/system/jssys.nim	/^proc getCurrentExceptionMsg*(): string =$/;"	t
getCurrentLine	$NIMLIB/pure/lexbase.nim	/^proc getCurrentLine*(L: BaseLexer, marker: bool = true): string =$/;"	t
getCurrentProcess	$NIMLIB/windows/winlean.nim	/^proc getCurrentProcess*(): Handle{.stdcall, dynlib: "kernel32",$/;"	f
getCurrentProcessId	$NIMLIB/pure/os.nim	/^proc getCurrentProcessId*(): int {.noWeirdTarget.} =$/;"	t
getCustomPragmaVal	$NIMLIB/core/macros.nim	/^macro getCustomPragmaVal*(n: typed, cp: typed{nkSym}): untyped =$/;"	t
getData	$NIMLIB/js/dom.nim	/^proc getData*(dt: DataTransfer, format: cstring): cstring$/;"	f
getData	$NIMLIB/pure/ioselects/ioselectors_epoll.nim	/^proc getData*[T](s: Selector[T], fd: SocketHandle|int): var T =$/;"	t
getData	$NIMLIB/pure/ioselects/ioselectors_kqueue.nim	/^proc getData*[T](s: Selector[T], fd: SocketHandle|int): var T =$/;"	t
getData	$NIMLIB/pure/ioselects/ioselectors_poll.nim	/^proc getData*[T](s: Selector[T], fd: SocketHandle|int): var T =$/;"	t
getData	$NIMLIB/pure/ioselects/ioselectors_select.nim	/^proc getData*[T](s: Selector[T], fd: SocketHandle|int): var T =$/;"	t
getData	$NIMLIB/pure/selectors.nim	/^  proc getData*[T](s: Selector[T], fd: SocketHandle|int): var T =$/;"	t
getDataDir	$NIMLIB/std/private/osappdirs.nim	/^proc getDataDir*(): string {.rtl, extern: "nos$1"$/;"	f
getDataUri	$NIMLIB/pure/uri.nim	/^proc getDataUri*(data, mime: string, encoding = "utf-8"): string {.since: (1, 3).} =$/;"	t
getDateStr	$NIMLIB/pure/times.nim	/^proc getDateStr*(dt = now()): string {.rtl, extern: "nt$1", tags: [TimeEffect].} =$/;"	t
getDay	$NIMLIB/js/jscore.nim	/^proc getDay*(d: DateTime): int {.importcpp.}$/;"	f
getDayOfWeek	$NIMLIB/pure/times.nim	/^proc getDayOfWeek*(monthday: MonthdayRange, month: Month, year: int): WeekDay$/;"	f
getDayOfYear	$NIMLIB/pure/times.nim	/^proc getDayOfYear*(monthday: MonthdayRange, month: Month, year: int):$/;"	f
getDaysInMonth	$NIMLIB/pure/times.nim	/^proc getDaysInMonth*(month: Month, year: int): int =$/;"	t
getDaysInYear	$NIMLIB/pure/times.nim	/^proc getDaysInYear*(year: int): int =$/;"	t
getDocumentRoot	$NIMLIB/pure/cgi.nim	/^proc getDocumentRoot*(): string =$/;"	t
getDomain	$NIMLIB/pure/net.nim	/^  proc getDomain*(socket: Socket): Domain = return socket.domain$/;"	t
getElementById	$NIMLIB/js/dom.nim	/^  proc getElementById*(id: cstring): Element {.importc: "document.getElementById", nodecl.}$/;"	f
getElementsByClass	$NIMLIB/js/dom.nim	/^proc getElementsByClass*(n: Node; name: cstring): seq[Node] {.$/;"	f
getElementsByClassName	$NIMLIB/js/dom.nim	/^proc getElementsByClassName*(e: Element, name: cstring): seq[Element]$/;"	f
getElementsByName	$NIMLIB/js/dom.nim	/^proc getElementsByName*(d: Document, name: cstring): seq[Element]$/;"	f
getElementsByTagName	$NIMLIB/js/dom.nim	/^proc getElementsByTagName*(e: Element, name: cstring): seq[Element]$/;"	f
getElems	$NIMLIB/pure/json.nim	/^proc getElems*(n: JsonNode, default: seq[JsonNode] = @[]): seq[JsonNode] =$/;"	t
getEnumField	$NIMLIB/core/typeinfo.nim	/^proc getEnumField*(x: Any, ordinalValue: int): string =$/;"	t
getEnumOrdinal	$NIMLIB/core/typeinfo.nim	/^proc getEnumOrdinal*(x: Any, name: string): int =$/;"	t
getEnv	$NIMLIB/std/envvars.nim	/^    proc getEnv*(key: string, default = ""): string {.tags: [ReadEnvEffect].} =$/;"	t
getEnv	$NIMLIB/system/nimscript.nim	/^proc getEnv*(key: string; default = ""): string {.tags: [ReadIOEffect].} =$/;"	t
getEnvironmentStringsW	$NIMLIB/windows/winlean.nim	/^proc getEnvironmentStringsW*(): WideCString {.$/;"	f
getExitCodeProcess	$NIMLIB/windows/winlean.nim	/^proc getExitCodeProcess*(hProcess: Handle, lpExitCode: var int32): WINBOOL {.$/;"	f
getExt	$NIMLIB/pure/mimetypes.nim	/^func getExt*(mimedb: MimeDB, mimetype: string, default = "txt"): string =$/;"	t
getExtraData	$NIMLIB/pure/net.nim	/^  proc getExtraData*(ctx: SslContext, index: int): RootRef =$/;"	t
getFd	$NIMLIB/pure/asyncnet.nim	/^proc getFd*(socket: AsyncSocket): SocketHandle =$/;"	t
getFd	$NIMLIB/pure/ioselects/ioselectors_epoll.nim	/^proc getFd*[T](s: Selector[T]): int =$/;"	t
getFd	$NIMLIB/pure/ioselects/ioselectors_kqueue.nim	/^proc getFd*[T](s: Selector[T]): int =$/;"	t
getFd	$NIMLIB/pure/ioselects/ioselectors_poll.nim	/^proc getFd*[T](s: Selector[T]): int =$/;"	t
getFd	$NIMLIB/pure/ioselects/ioselectors_select.nim	/^proc getFd*[T](s: Selector[T]): int =$/;"	t
getFd	$NIMLIB/pure/net.nim	/^proc getFd*(socket: Socket): SocketHandle = return socket.fd$/;"	t
getFd	$NIMLIB/pure/selectors.nim	/^  proc getFd*[T](s: Selector[T]): int =$/;"	t
getFieldValue	$NIMLIB/packages/docutils/rst.nim	/^proc getFieldValue*(n: PRstNode, fieldname: string): string {.gcsafe.}$/;"	f
getFields	$NIMLIB/pure/json.nim	/^proc getFields*(n: JsonNode,$/;"	f
getFileAttributesW	$NIMLIB/windows/winlean.nim	/^proc getFileAttributesW*(lpFileName: WideCString): int32 {.$/;"	f
getFileHandle	$NIMLIB/std/syncio.nim	/^proc getFileHandle*(f: File): FileHandle =$/;"	t
getFileInfo	$NIMLIB/pure/os.nim	/^proc getFileInfo*(path: string, followSymlink = true): FileInfo {.noWeirdTarget.} =$/;"	t
getFileInformationByHandle	$NIMLIB/windows/winlean.nim	/^proc getFileInformationByHandle*(hFile: Handle,$/;"	f
getFilePermissions	$NIMLIB/std/private/osfiles.nim	/^proc getFilePermissions*(filename: string): set[FilePermission] {.$/;"	f
getFilePos	$NIMLIB/pure/asyncfile.nim	/^proc getFilePos*(f: AsyncFile): int64 =$/;"	t
getFilePos	$NIMLIB/std/syncio.nim	/^proc getFilePos*(f: File): int64 {.benign.} =$/;"	t
getFileSize	$NIMLIB/pure/asyncfile.nim	/^proc getFileSize*(f: AsyncFile): int64 =$/;"	t
getFileSize	$NIMLIB/pure/os.nim	/^proc getFileSize*(file: string): BiggestInt {.rtl, extern: "nos$1",$/;"	f
getFileSize	$NIMLIB/std/syncio.nim	/^proc getFileSize*(f: File): int64 {.tags: [ReadIOEffect], benign.} =$/;"	t
getFileSize	$NIMLIB/windows/winlean.nim	/^proc getFileSize*(hFile: Handle, lpFileSizeHigh: ptr DWORD): DWORD{.stdcall,$/;"	f
getFilename	$NIMLIB/pure/parsecfg.nim	/^proc getFilename*(c: CfgParser): string {.rtl, extern: "npc$1".} =$/;"	t
getFilename	$NIMLIB/pure/parsejson.nim	/^proc getFilename*(my: JsonParser): string {.inline.} =$/;"	t
getFilename	$NIMLIB/pure/parsexml.nim	/^proc getFilename*(my: XmlParser): string {.inline.} =$/;"	t
getFilename	$NIMLIB/std/private/oscommon.nim	/^  template getFilename*(f: untyped): untyped =$/;"	t
getFloat	$NIMLIB/core/typeinfo.nim	/^proc getFloat*(x: Any): float =$/;"	t
getFloat	$NIMLIB/pure/json.nim	/^proc getFloat*(n: JsonNode, default: float = 0.0): float =$/;"	t
getFloat	$NIMLIB/pure/parsejson.nim	/^proc getFloat*(my: JsonParser): float {.inline.} =$/;"	t
getFloat32	$NIMLIB/core/typeinfo.nim	/^proc getFloat32*(x: Any): float32 =$/;"	t
getFloat64	$NIMLIB/core/typeinfo.nim	/^proc getFloat64*(x: Any): float64 =$/;"	t
getForbidsList	$NIMLIB/std/effecttraits.nim	/^proc getForbidsList*(fn: NimNode): NimNode =$/;"	t
getFrame	$NIMLIB/system/excpt.nim	/^proc getFrame*(): PFrame {.compilerRtl, inl.} = framePtr$/;"	t
getFrameState	$NIMLIB/system/excpt.nim	/^proc getFrameState*(): FrameState {.compilerRtl, inl.} =$/;"	t
getFreeMem	$NIMLIB/system/gc_regions.nim	/^proc getFreeMem*(r: MemRegion): int = r.remaining$/;"	t
getFreeMem	$NIMLIB/system/memalloc.nim	/^  proc getFreeMem*(): int {.rtl.}$/;"	f
getFreeSharedMem	$NIMLIB/system/memalloc.nim	/^  proc getFreeSharedMem*(): int {.rtl.}$/;"	f
getFullPathNameW	$NIMLIB/windows/winlean.nim	/^proc getFullPathNameW*(lpFileName: WideCString, nBufferLength: int32,$/;"	f
getFullYear	$NIMLIB/js/jscore.nim	/^proc getFullYear*(d: DateTime): int {.importcpp.}$/;"	f
getFuturesInProgress	$NIMLIB/pure/asyncfutures.nim	/^  proc getFuturesInProgress*(): var Table[FutureInfo, int] =$/;"	t
getGatewayInterface	$NIMLIB/pure/cgi.nim	/^proc getGatewayInterface*(): string =$/;"	t
getGcFrame	$NIMLIB/system/excpt.nim	/^proc getGcFrame*(): GcFrame {.compilerRtl, inl.} = gcFramePtr$/;"	t
getGlobalDispatcher	$NIMLIB/pure/asyncdispatch.nim	/^  proc getGlobalDispatcher*(): PDispatcher =$/;"	t
getHandleInformation	$NIMLIB/windows/winlean.nim	/^proc getHandleInformation*(hObject: Handle, lpdwFlags: ptr DWORD): WINBOOL {.$/;"	f
getHandlers	$NIMLIB/pure/logging.nim	/^proc getHandlers*(): seq[Logger] =$/;"	t
getHomeDir	$NIMLIB/std/appdirs.nim	/^proc getHomeDir*(): Path {.inline, tags: [ReadEnvEffect, ReadIOEffect].} =$/;"	t
getHomeDir	$NIMLIB/std/private/osappdirs.nim	/^proc getHomeDir*(): string {.rtl, extern: "nos$1",$/;"	f
getHostByAddr	$NIMLIB/pure/nativesockets.nim	/^  proc getHostByAddr*(ip: string): Hostent {.tags: [ReadIOEffect].} =$/;"	t
getHostByName	$NIMLIB/pure/nativesockets.nim	/^  proc getHostByName*(name: string): Hostent {.tags: [ReadIOEffect].} =$/;"	t
getHostname	$NIMLIB/pure/nativesockets.nim	/^  proc getHostname*(): string {.tags: [ReadIOEffect].} =$/;"	t
getHours	$NIMLIB/js/jscore.nim	/^proc getHours*(d: DateTime): int {.importcpp.}$/;"	f
getHttpAccept	$NIMLIB/pure/cgi.nim	/^proc getHttpAccept*(): string =$/;"	t
getHttpAcceptCharset	$NIMLIB/pure/cgi.nim	/^proc getHttpAcceptCharset*(): string =$/;"	t
getHttpAcceptEncoding	$NIMLIB/pure/cgi.nim	/^proc getHttpAcceptEncoding*(): string =$/;"	t
getHttpAcceptLanguage	$NIMLIB/pure/cgi.nim	/^proc getHttpAcceptLanguage*(): string =$/;"	t
getHttpConnection	$NIMLIB/pure/cgi.nim	/^proc getHttpConnection*(): string =$/;"	t
getHttpCookie	$NIMLIB/pure/cgi.nim	/^proc getHttpCookie*(): string =$/;"	t
getHttpHost	$NIMLIB/pure/cgi.nim	/^proc getHttpHost*(): string =$/;"	t
getHttpReferer	$NIMLIB/pure/cgi.nim	/^proc getHttpReferer*(): string =$/;"	t
getHttpUserAgent	$NIMLIB/pure/cgi.nim	/^proc getHttpUserAgent*(): string =$/;"	t
getImpl	$NIMLIB/core/macros.nim	/^proc getImpl*(symbol: NimNode): NimNode {.magic: "GetImpl", noSideEffect.}$/;"	f
getImplTransformed	$NIMLIB/core/macros.nim	/^  proc getImplTransformed*(symbol: NimNode): NimNode {.magic: "GetImplTransf", noSideEffect.}$/;"	f
getInt	$NIMLIB/core/typeinfo.nim	/^proc getInt*(x: Any): int =$/;"	t
getInt	$NIMLIB/pure/json.nim	/^proc getInt*(n: JsonNode, default: int = 0): int =$/;"	t
getInt	$NIMLIB/pure/parsejson.nim	/^proc getInt*(my: JsonParser): BiggestInt {.inline.} =$/;"	t
getInt16	$NIMLIB/core/typeinfo.nim	/^proc getInt16*(x: Any): int16 =$/;"	t
getInt32	$NIMLIB/core/typeinfo.nim	/^proc getInt32*(x: Any): int32 =$/;"	t
getInt64	$NIMLIB/core/typeinfo.nim	/^proc getInt64*(x: Any): int64 =$/;"	t
getInt8	$NIMLIB/core/typeinfo.nim	/^proc getInt8*(x: Any): int8 =$/;"	t
getIoHandler	$NIMLIB/pure/asyncdispatch.nim	/^  proc getIoHandler*(disp: PDispatcher): Selector[AsyncData] =$/;"	t
getIsoWeekAndYear	$NIMLIB/pure/times.nim	/^proc getIsoWeekAndYear*(dt: DateTime):$/;"	f
getItem	$NIMLIB/js/dom.nim	/^proc getItem*(s: Storage, key: cstring): cstring$/;"	f
getLastAccessTime	$NIMLIB/pure/os.nim	/^proc getLastAccessTime*(file: string): times.Time {.rtl, extern: "nos$1", noWeirdTarget.} =$/;"	t
getLastError	$NIMLIB/windows/winlean.nim	/^proc getLastError*(): int32 {.importc: "GetLastError",$/;"	f
getLastModificationTime	$NIMLIB/pure/os.nim	/^proc getLastModificationTime*(file: string): times.Time {.rtl, extern: "nos$1", noWeirdTarget.} /;"	t
getLine	$NIMLIB/pure/parsecfg.nim	/^proc getLine*(c: CfgParser): int {.rtl, extern: "npc$1".} =$/;"	t
getLine	$NIMLIB/pure/parsejson.nim	/^proc getLine*(my: JsonParser): int {.inline.} =$/;"	t
getLine	$NIMLIB/pure/parsexml.nim	/^proc getLine*(my: XmlParser): int {.inline.} =$/;"	t
getLocalAddr	$NIMLIB/pure/asyncnet.nim	/^proc getLocalAddr*(socket: AsyncSocket): (string, Port) =$/;"	t
getLocalAddr	$NIMLIB/pure/nativesockets.nim	/^  proc getLocalAddr*(socket: SocketHandle, domain: Domain): (string, Port) =$/;"	t
getLocalAddr	$NIMLIB/pure/net.nim	/^proc getLocalAddr*(socket: Socket): (string, Port) =$/;"	t
getLogFilter	$NIMLIB/pure/logging.nim	/^proc getLogFilter*(): Level =$/;"	t
getMD5	$NIMLIB/pure/md5.nim	/^proc getMD5*(s: string): string =$/;"	t
getMaxMem	$NIMLIB/system/alloc.nim	/^  proc getMaxMem*(): int =$/;"	t
getMemCounters	$NIMLIB/system/alloc.nim	/^    proc getMemCounters*(): (int, int) = getMemCounters(allocator)$/;"	t
getMilliseconds	$NIMLIB/js/jscore.nim	/^proc getMilliseconds*(d: DateTime): int {.importcpp.}$/;"	f
getMimetype	$NIMLIB/pure/mimetypes.nim	/^func getMimetype*(mimedb: MimeDB, ext: string, default = "text\/plain"): string =$/;"	t
getMinutes	$NIMLIB/js/jscore.nim	/^proc getMinutes*(d: DateTime): int {.importcpp.}$/;"	f
getModifierState	$NIMLIB/js/dom.nim	/^proc getModifierState*(ev: MouseEvent, keyArg: cstring): bool$/;"	f
getModuleFileNameW	$NIMLIB/windows/winlean.nim	/^proc getModuleFileNameW*(handle: Handle, buf: WideCString,$/;"	f
getMonoTime	$NIMLIB/std/monotimes.nim	/^proc getMonoTime*(): MonoTime {.tags: [TimeEffect].} =$/;"	t
getMonth	$NIMLIB/js/jscore.nim	/^proc getMonth*(d: DateTime): int {.importcpp.}$/;"	f
getNextToken	$NIMLIB/packages/docutils/highlite.nim	/^proc getNextToken*(g: var GeneralTokenizer, lang: SourceLanguage) =$/;"	t
getNum	$NIMLIB/deprecated/pure/mersenne.nim	/^proc getNum*(m: var MersenneTwister): uint32 =$/;"	t
getOccupiedMem	$NIMLIB/system/gc_regions.nim	/^proc getOccupiedMem*(r: MemRegion): int =$/;"	t
getOccupiedMem	$NIMLIB/system/memalloc.nim	/^  proc getOccupiedMem*(): int {.rtl.}$/;"	f
getOccupiedSharedMem	$NIMLIB/system/memalloc.nim	/^  proc getOccupiedSharedMem*(): int {.rtl.}$/;"	f
getOffset	$NIMLIB/core/macros.nim	/^proc getOffset*(arg: NimNode): int {.magic: "NSizeOf", noSideEffect.} =$/;"	t
getOpenSSLVersion	$NIMLIB/wrappers/openssl.nim	/^  proc getOpenSSLVersion*(): culong =$/;"	t
getOrDefault	$NIMLIB/pure/collections/tables.nim	/^proc getOrDefault*[A](t: CountTable[A], key: A; default: int = 0): int =$/;"	t
getOrDefault	$NIMLIB/pure/json.nim	/^proc getOrDefault*(node: JsonNode, key: string): JsonNode =$/;"	t
getOrDefault	$NIMLIB/pure/strtabs.nim	/^proc getOrDefault*(t: StringTableRef; key: string,$/;"	f
getOsFileHandle	$NIMLIB/std/syncio.nim	/^proc getOsFileHandle*(f: File): FileHandle =$/;"	t
getOverlappedResult	$NIMLIB/windows/winlean.nim	/^proc getOverlappedResult*(hFile: Handle, lpOverlapped: POVERLAPPED,$/;"	f
getPFrame	$NIMLIB/std/stackframes.nim	/^template getPFrame*(): PFrame =$/;"	t
getPathInfo	$NIMLIB/pure/cgi.nim	/^proc getPathInfo*(): string =$/;"	t
getPathTranslated	$NIMLIB/pure/cgi.nim	/^proc getPathTranslated*(): string =$/;"	t
getPeerAddr	$NIMLIB/pure/asyncnet.nim	/^  proc getPeerAddr*(socket: AsyncSocket): (string, Port) =$/;"	t
getPeerAddr	$NIMLIB/pure/nativesockets.nim	/^  proc getPeerAddr*(socket: SocketHandle, domain: Domain): (string, Port) =$/;"	t
getPeerAddr	$NIMLIB/pure/net.nim	/^  proc getPeerAddr*(socket: Socket): (string, Port) =$/;"	t
getPeerCertificates	$NIMLIB/pure/asyncnet.nim	/^  proc getPeerCertificates*(socket: AsyncSocket): seq[Certificate] {.since: (1, 1).} =$/;"	t
getPeerCertificates	$NIMLIB/pure/net.nim	/^  proc getPeerCertificates*(sslHandle: SslPtr): seq[Certificate] {.since: (1, 1).} =$/;"	t
getPointer	$NIMLIB/core/typeinfo.nim	/^proc getPointer*(x: Any): pointer =$/;"	t
getPort	$NIMLIB/pure/asynchttpserver.nim	/^proc getPort*(self: AsyncHttpServer): Port {.since: (1, 5, 1).} =$/;"	t
getPosition	$NIMLIB/pure/streams.nim	/^proc getPosition*(s: Stream): int =$/;"	t
getPrimaryIPAddr	$NIMLIB/pure/net.nim	/^proc getPrimaryIPAddr*(dest = parseIpAddress("8.8.8.8")): IpAddress =$/;"	t
getProcessTimes	$NIMLIB/windows/winlean.nim	/^proc getProcessTimes*(hProcess: Handle; lpCreationTime, lpExitTime,$/;"	f
getProgramResult	$NIMLIB/std/exitprocs.nim	/^  proc getProgramResult*(): int =$/;"	t
getProjectPath	$NIMLIB/core/macros.nim	/^proc getProjectPath*(): string = discard$/;"	t
getPropertyPriority	$NIMLIB/js/dom.nim	/^proc getPropertyPriority*(s: Style, property: cstring): cstring$/;"	f
getPropertyValue	$NIMLIB/js/dom.nim	/^proc getPropertyValue*(s: Style, property: cstring): cstring$/;"	f
getProtoByName	$NIMLIB/pure/nativesockets.nim	/^proc getProtoByName*(name: string): int {.since: (1, 3, 5).} =$/;"	t
getProtoName	$NIMLIB/std/private/jsutils.nim	/^  proc getProtoName*[T](a: T): cstring {.importjs: "Object.prototype.toString.call(#)".} =$/;"	t
getProtocol	$NIMLIB/pure/net.nim	/^  proc getProtocol*(socket: Socket): Protocol = return socket.protocol$/;"	t
getPskIdentity	$NIMLIB/pure/net.nim	/^  proc getPskIdentity*(socket: Socket): string =$/;"	t
getQueryString	$NIMLIB/pure/cgi.nim	/^proc getQueryString*(): string =$/;"	t
getQueuedCompletionStatus	$NIMLIB/windows/winlean.nim	/^proc getQueuedCompletionStatus*(CompletionPort: Handle,$/;"	f
getRaisesList	$NIMLIB/std/effecttraits.nim	/^proc getRaisesList*(fn: NimNode): NimNode =$/;"	t
getRangeAt	$NIMLIB/js/dom.nim	/^proc getRangeAt*(s: Selection, index: int): Range$/;"	f
getRawData	$NIMLIB/pure/collections/rtarrays.nim	/^proc getRawData*[T](x: var RtArray[T]): ptr UncheckedArray[T] =$/;"	t
getRemoteAddr	$NIMLIB/pure/cgi.nim	/^proc getRemoteAddr*(): string =$/;"	t
getRemoteHost	$NIMLIB/pure/cgi.nim	/^proc getRemoteHost*(): string =$/;"	t
getRemoteIdent	$NIMLIB/pure/cgi.nim	/^proc getRemoteIdent*(): string =$/;"	t
getRemotePort	$NIMLIB/pure/cgi.nim	/^proc getRemotePort*(): string =$/;"	t
getRemoteUser	$NIMLIB/pure/cgi.nim	/^proc getRemoteUser*(): string =$/;"	t
getRequestMethod	$NIMLIB/pure/cgi.nim	/^proc getRequestMethod*(): string =$/;"	t
getRequestURI	$NIMLIB/pure/cgi.nim	/^proc getRequestURI*(): string =$/;"	t
getRootNode	$NIMLIB/js/dom.nim	/^  proc getRootNode*(n: Node,options: RootNodeOptions): Node$/;"	f
getScriptFilename	$NIMLIB/pure/cgi.nim	/^proc getScriptFilename*(): string =$/;"	t
getScriptName	$NIMLIB/pure/cgi.nim	/^proc getScriptName*(): string =$/;"	t
getSeconds	$NIMLIB/js/jscore.nim	/^proc getSeconds*(d: DateTime): int {.importcpp.}$/;"	f
getSectionValue	$NIMLIB/pure/parsecfg.nim	/^proc getSectionValue*(dict: Config, section, key: string, defaultVal = ""): string =$/;"	t
getSelection	$NIMLIB/js/dom.nim	/^proc getSelection*(d: Document): Selection$/;"	f
getServByName	$NIMLIB/pure/nativesockets.nim	/^  proc getServByName*(name, proto: string): Servent {.tags: [ReadIOEffect].} =$/;"	t
getServByPort	$NIMLIB/pure/nativesockets.nim	/^  proc getServByPort*(port: Port, proto: string): Servent {.tags: [ReadIOEffect].} =$/;"	t
getServerAddr	$NIMLIB/pure/cgi.nim	/^proc getServerAddr*(): string =$/;"	t
getServerAdmin	$NIMLIB/pure/cgi.nim	/^proc getServerAdmin*(): string =$/;"	t
getServerName	$NIMLIB/pure/cgi.nim	/^proc getServerName*(): string =$/;"	t
getServerPort	$NIMLIB/pure/cgi.nim	/^proc getServerPort*(): string =$/;"	t
getServerProtocol	$NIMLIB/pure/cgi.nim	/^proc getServerProtocol*(): string =$/;"	t
getServerSignature	$NIMLIB/pure/cgi.nim	/^proc getServerSignature*(): string =$/;"	t
getServerSoftware	$NIMLIB/pure/cgi.nim	/^proc getServerSoftware*(): string =$/;"	t
getSize	$NIMLIB/core/macros.nim	/^proc getSize*(arg: NimNode): int {.magic: "NSizeOf", noSideEffect.} =$/;"	t
getSockDomain	$NIMLIB/pure/nativesockets.nim	/^proc getSockDomain*(socket: SocketHandle): Domain =$/;"	t
getSockName	$NIMLIB/pure/nativesockets.nim	/^  proc getSockName*(socket: SocketHandle): Port =$/;"	t
getSockOpt	$NIMLIB/pure/asyncnet.nim	/^proc getSockOpt*(socket: AsyncSocket, opt: SOBool, level = SOL_SOCKET): bool {.$/;"	t
getSockOpt	$NIMLIB/pure/net.nim	/^proc getSockOpt*(socket: Socket, opt: SOBool, level = SOL_SOCKET): bool {.$/;"	t
getSockOptInt	$NIMLIB/pure/nativesockets.nim	/^proc getSockOptInt*(socket: SocketHandle, level, optname: int): int {.$/;"	f
getSocket	$NIMLIB/pure/httpclient.nim	/^proc getSocket*(client: HttpClient): Socket {.inline.} =$/;"	t
getSocketError	$NIMLIB/pure/net.nim	/^proc getSocketError*(socket: Socket): OSErrorCode =$/;"	t
getSourceLanguage	$NIMLIB/packages/docutils/highlite.nim	/^proc getSourceLanguage*(name: string): SourceLanguage =$/;"	t
getStackTrace	$NIMLIB/system.nim	/^    proc getStackTrace*(e: ref Exception): string {.gcsafe.}$/;"	f
getStackTrace	$NIMLIB/system/jssys.nim	/^proc getStackTrace*(e: ref Exception): string = e.trace$/;"	t
getStackTraceEntries	$NIMLIB/system/excpt.nim	/^proc getStackTraceEntries*(e: ref Exception): lent seq[StackTraceEntry] =$/;"	t
getStdHandle	$NIMLIB/windows/winlean.nim	/^proc getStdHandle*(nStdHandle: int32): Handle {.stdcall, dynlib: "kernel32",$/;"	f
getStr	$NIMLIB/pure/json.nim	/^proc getStr*(n: JsonNode, default: string = ""): string =$/;"	t
getString	$NIMLIB/core/typeinfo.nim	/^proc getString*(x: Any): string =$/;"	t
getSymbol	$NIMLIB/wrappers/tinyc.nim	/^proc getSymbol*(s: PccState, name: cstring): pointer {.cdecl,$/;"	f
getSymlinkFileKind	$NIMLIB/std/private/oscommon.nim	/^  proc getSymlinkFileKind*(path: string):$/;"	f
getSystemInfo	$NIMLIB/std/private/win_getsysteminfo.nim	/^proc getSystemInfo*(lpSystemInfo: ptr SystemInfo) {.stdcall,$/;"	f
getSystemTimeAsFileTime	$NIMLIB/windows/winlean.nim	/^proc getSystemTimeAsFileTime*(lpSystemTimeAsFileTime: var FILETIME) {.$/;"	f
getSystemTimePreciseAsFileTime	$NIMLIB/windows/winlean.nim	/^proc getSystemTimePreciseAsFileTime*(lpSystemTimeAsFileTime: var FILETIME) {.$/;"	f
getSystemTimes	$NIMLIB/windows/winlean.nim	/^proc getSystemTimes*(lpIdleTime, lpKernelTime,$/;"	f
getTagsList	$NIMLIB/std/effecttraits.nim	/^proc getTagsList*(fn: NimNode): NimNode =$/;"	t
getTempDir	$NIMLIB/std/appdirs.nim	/^proc getTempDir*(): Path {.inline, tags: [ReadEnvEffect, ReadIOEffect].} =$/;"	t
getTempDir	$NIMLIB/std/private/osappdirs.nim	/^proc getTempDir*(): string {.rtl, extern: "nos$1",$/;"	f
getThreadId	$NIMLIB/system/threadids.nim	/^  proc getThreadId*(): int =$/;"	t
getTime	$NIMLIB/js/jscore.nim	/^proc getTime*(d: DateTime): int {.importcpp.}$/;"	f
getTime	$NIMLIB/pure/times.nim	/^proc getTime*(): Time {.tags: [TimeEffect], benign.} =$/;"	t
getTimezoneOffset	$NIMLIB/js/jscore.nim	/^proc getTimezoneOffset*(d: DateTime): int {.importcpp.}$/;"	f
getTok	$NIMLIB/pure/parsejson.nim	/^proc getTok*(my: var JsonParser): TokKind =$/;"	t
getTotalMem	$NIMLIB/system/gc_regions.nim	/^proc getTotalMem*(r: MemRegion): int =$/;"	t
getTotalMem	$NIMLIB/system/memalloc.nim	/^  proc getTotalMem*(): int {.rtl.}$/;"	f
getTotalSharedMem	$NIMLIB/system/memalloc.nim	/^  proc getTotalSharedMem*(): int {.rtl.}$/;"	f
getType	$NIMLIB/core/macros.nim	/^proc getType*(n: typedesc): NimNode {.magic: "NGetType", noSideEffect.}$/;"	f
getType	$NIMLIB/pure/net.nim	/^  proc getType*(socket: Socket): SockType = return socket.sockType$/;"	t
getTypeImpl	$NIMLIB/core/macros.nim	/^proc getTypeImpl*(n: typedesc): NimNode {.magic: "NGetType", noSideEffect.}$/;"	f
getTypeInfo	$NIMLIB/system.nim	/^proc getTypeInfo*[T](x: T): pointer {.magic: "GetTypeInfo", benign.}$/;"	f
getTypeInst	$NIMLIB/core/macros.nim	/^proc getTypeInst*(n: typedesc): NimNode {.magic: "NGetType", noSideEffect.}$/;"	f
getUInt	$NIMLIB/core/typeinfo.nim	/^proc getUInt*(x: Any): uint =$/;"	t
getUInt16	$NIMLIB/core/typeinfo.nim	/^proc getUInt16*(x: Any): uint16 =$/;"	t
getUInt32	$NIMLIB/core/typeinfo.nim	/^proc getUInt32*(x: Any): uint32 =$/;"	t
getUInt64	$NIMLIB/core/typeinfo.nim	/^proc getUInt64*(x: Any): uint64 =$/;"	t
getUInt8	$NIMLIB/core/typeinfo.nim	/^proc getUInt8*(x: Any): uint8 =$/;"	t
getUTCDate	$NIMLIB/js/jscore.nim	/^proc getUTCDate*(d: DateTime): int {.importcpp.}$/;"	f
getUTCDay	$NIMLIB/js/jscore.nim	/^proc getUTCDay*(d: DateTime): int {.importcpp.}$/;"	f
getUTCFullYear	$NIMLIB/js/jscore.nim	/^proc getUTCFullYear*(d: DateTime): int {.importcpp.}$/;"	f
getUTCHours	$NIMLIB/js/jscore.nim	/^proc getUTCHours*(d: DateTime): int {.importcpp.}$/;"	f
getUTCMilliseconds	$NIMLIB/js/jscore.nim	/^proc getUTCMilliseconds*(d: DateTime): int {.importcpp.}$/;"	f
getUTCMinutes	$NIMLIB/js/jscore.nim	/^proc getUTCMinutes*(d: DateTime): int {.importcpp.}$/;"	f
getUTCMonth	$NIMLIB/js/jscore.nim	/^proc getUTCMonth*(d: DateTime): int {.importcpp.}$/;"	f
getUTCSeconds	$NIMLIB/js/jscore.nim	/^proc getUTCSeconds*(d: DateTime): int {.importcpp.}$/;"	f
getUnicodeValue	$NIMLIB/windows/registry.nim	/^proc getUnicodeValue*(path, key: string; handle: HKEY): string =$/;"	t
getVersion	$NIMLIB/windows/winlean.nim	/^proc getVersion*(): DWORD {.stdcall, dynlib: "kernel32", importc: "GetVersion", sideEffect.}$/;"	f
getVersionExA	$NIMLIB/windows/winlean.nim	/^proc getVersionExA*(lpVersionInfo: ptr OSVERSIONINFO): WINBOOL {.$/;"	f
getVersionExW	$NIMLIB/windows/winlean.nim	/^proc getVersionExW*(lpVersionInfo: ptr OSVERSIONINFO): WINBOOL {.$/;"	f
getWeeksInIsoYear	$NIMLIB/pure/times.nim	/^proc getWeeksInIsoYear*(y: IsoYear): IsoWeekRange {.since: (1, 5).} =$/;"	t
getYear	$NIMLIB/js/jscore.nim	/^proc getYear*(d: DateTime): int {.importcpp.}$/;"	f
get_named_substring	$NIMLIB/wrappers/pcre.nim	/^proc get_named_substring*(code: ptr Pcre,$/;"	f
get_osfhandle	$NIMLIB/windows/winlean.nim	/^proc get_osfhandle*(fd:FileHandle): Handle {.$/;"	f
get_stringnumber	$NIMLIB/wrappers/pcre.nim	/^proc get_stringnumber*(code: ptr Pcre,$/;"	f
get_stringtable_entries	$NIMLIB/wrappers/pcre.nim	/^proc get_stringtable_entries*(code: ptr Pcre,$/;"	f
get_substring	$NIMLIB/wrappers/pcre.nim	/^proc get_substring*(subject: cstring,$/;"	f
get_substring_list	$NIMLIB/wrappers/pcre.nim	/^proc get_substring_list*(subject: cstring,$/;"	f
getaddrinfo	$NIMLIB/posix/posix.nim	/^proc getaddrinfo*(a1, a2: cstring, a3: ptr AddrInfo,$/;"	f
getaddrinfo	$NIMLIB/windows/winlean.nim	/^proc getaddrinfo*(nodename, servname: cstring, hints: ptr AddrInfo,$/;"	f
getch	$NIMLIB/pure/terminal.nim	/^proc getch*(): char =$/;"	t
getcontext	$NIMLIB/posix/posix.nim	/^  proc getcontext*(a1: var Ucontext): cint {.importc, header: "<ucontext.h>".}$/;"	f
getcwd	$NIMLIB/posix/posix.nim	/^proc getcwd*(a1: cstring, a2: int): cstring {.importc, header: "<unistd.h>", sideEffect.}$/;"	f
getdate	$NIMLIB/posix/posix.nim	/^proc getdate*(a1: cstring): ptr Tm {.importc, header: "<time.h>".}$/;"	f
getegid	$NIMLIB/posix/posix.nim	/^proc getegid*(): Gid {.importc, header: "<unistd.h>", sideEffect.}$/;"	f
geteuid	$NIMLIB/posix/posix.nim	/^proc geteuid*(): Uid {.importc, header: "<unistd.h>", sideEffect.}$/;"	f
getgid	$NIMLIB/posix/posix.nim	/^proc getgid*(): Gid {.importc, header: "<unistd.h>", sideEffect.}$/;"	f
getgrent	$NIMLIB/posix/posix.nim	/^proc getgrent*(): ptr Group {.importc, header: "<grp.h>".}$/;"	f
getgrgid	$NIMLIB/posix/posix.nim	/^proc getgrgid*(a1: Gid): ptr Group {.importc, header: "<grp.h>".}$/;"	f
getgrgid_r	$NIMLIB/posix/posix.nim	/^proc getgrgid_r*(a1: Gid, a2: ptr Group, a3: cstring, a4: int,$/;"	f
getgrnam	$NIMLIB/posix/posix.nim	/^proc getgrnam*(a1: cstring): ptr Group {.importc, header: "<grp.h>".}$/;"	f
getgrnam_r	$NIMLIB/posix/posix.nim	/^proc getgrnam_r*(a1: cstring, a2: ptr Group, a3: cstring,$/;"	f
getgroups	$NIMLIB/posix/posix.nim	/^proc getgroups*(a1: cint, a2: ptr array[0..255, Gid]): cint {.$/;"	f
gethostbyaddr	$NIMLIB/posix/posix.nim	/^  proc gethostbyaddr*(a1: pointer, a2: SockLen, a3: cint): ptr Hostent {.$/;"	f
gethostbyaddr	$NIMLIB/windows/winlean.nim	/^proc gethostbyaddr*(ip: ptr InAddr, len: cuint, theType: cint): ptr Hostent {.$/;"	f
gethostbyname	$NIMLIB/posix/posix.nim	/^proc gethostbyname*(a1: cstring): ptr Hostent {.importc, header: "<netdb.h>".}$/;"	f
gethostbyname	$NIMLIB/windows/winlean.nim	/^proc gethostbyname*(name: cstring): ptr Hostent {.$/;"	f
gethostent	$NIMLIB/posix/posix.nim	/^proc gethostent*(): ptr Hostent {.importc, header: "<netdb.h>".}$/;"	f
gethostid	$NIMLIB/posix/posix.nim	/^proc gethostid*(): int {.importc, header: "<unistd.h>", sideEffect.}$/;"	f
gethostname	$NIMLIB/posix/posix.nim	/^proc gethostname*(a1: cstring, a2: int): cint {.importc, header: "<unistd.h>", sideEffect.}$/;"	f
gethostname	$NIMLIB/windows/winlean.nim	/^proc gethostname*(hostname: cstring, len: cint): cint {.$/;"	f
getlogin	$NIMLIB/posix/posix.nim	/^proc getlogin*(): cstring {.importc, header: "<unistd.h>", sideEffect.}$/;"	f
getlogin_r	$NIMLIB/posix/posix.nim	/^proc getlogin_r*(a1: cstring, a2: int): cint {.importc, header: "<unistd.h>", sideEffect.}$/;"	f
getnameinfo	$NIMLIB/posix/posix.nim	/^proc getnameinfo*(a1: ptr SockAddr, a2: SockLen,$/;"	f
getnameinfo	$NIMLIB/windows/winlean.nim	/^proc getnameinfo*(a1: ptr SockAddr, a2: SockLen,$/;"	f
getnetbyaddr	$NIMLIB/posix/posix.nim	/^proc getnetbyaddr*(a1: int32, a2: cint): ptr Tnetent {.importc, header: "<netdb.h>".}$/;"	f
getnetbyname	$NIMLIB/posix/posix.nim	/^proc getnetbyname*(a1: cstring): ptr Tnetent {.importc, header: "<netdb.h>".}$/;"	f
getnetent	$NIMLIB/posix/posix.nim	/^proc getnetent*(): ptr Tnetent {.importc, header: "<netdb.h>".}$/;"	f
getopt	$NIMLIB/posix/posix.nim	/^proc getopt*(a1: cint, a2: cstringArray, a3: cstring): cint {.$/;"	f
getopt	$NIMLIB/pure/parseopt.nim	/^iterator getopt*(p: var OptParser): tuple[kind: CmdLineKind, key,$/;"	i
getpeername	$NIMLIB/posix/posix.nim	/^proc getpeername*(a1: SocketHandle, a2: ptr SockAddr, a3: ptr SockLen): cint {.$/;"	f
getpeername	$NIMLIB/windows/winlean.nim	/^proc getpeername*(s: SocketHandle, name: ptr SockAddr,$/;"	f
getpgid	$NIMLIB/posix/posix.nim	/^proc getpgid*(a1: Pid): Pid {.importc, header: "<unistd.h>".}$/;"	f
getpgrp	$NIMLIB/posix/posix.nim	/^proc getpgrp*(): Pid {.importc, header: "<unistd.h>".}$/;"	f
getpid	$NIMLIB/posix/posix.nim	/^proc getpid*(): Pid {.importc, header: "<unistd.h>", sideEffect.}$/;"	f
getppid	$NIMLIB/posix/posix.nim	/^proc getppid*(): Pid {.importc, header: "<unistd.h>", sideEffect.}$/;"	f
getprotobyname	$NIMLIB/posix/posix.nim	/^proc getprotobyname*(a1: cstring): ptr Protoent {.importc, header: "<netdb.h>".}$/;"	f
getprotobyname	$NIMLIB/windows/winlean.nim	/^proc getprotobyname*($/;"	f
getprotobynumber	$NIMLIB/posix/posix.nim	/^proc getprotobynumber*(a1: cint): ptr Protoent {.importc, header: "<netdb.h>".}$/;"	f
getprotobynumber	$NIMLIB/windows/winlean.nim	/^proc getprotobynumber*($/;"	f
getprotoent	$NIMLIB/posix/posix.nim	/^proc getprotoent*(): ptr Protoent {.importc, header: "<netdb.h>".}$/;"	f
getpwent	$NIMLIB/posix/posix.nim	/^proc getpwent*(): ptr Passwd {.importc, header: "<pwd.h>".}$/;"	f
getpwnam	$NIMLIB/posix/posix.nim	/^proc getpwnam*(a1: cstring): ptr Passwd {.importc, header: "<pwd.h>".}$/;"	f
getpwnam_r	$NIMLIB/posix/posix.nim	/^proc getpwnam_r*(a1: cstring, a2: ptr Passwd, a3: cstring, a4: int,$/;"	f
getpwuid	$NIMLIB/posix/posix.nim	/^proc getpwuid*(a1: Uid): ptr Passwd {.importc, header: "<pwd.h>".}$/;"	f
getpwuid_r	$NIMLIB/posix/posix.nim	/^proc getpwuid_r*(a1: Uid, a2: ptr Passwd, a3: cstring,$/;"	f
getrlimit	$NIMLIB/posix/posix.nim	/^proc getrlimit*(resource: cint, rlp: var RLimit): cint {.$/;"	f
getrusage	$NIMLIB/posix/posix.nim	/^proc getrusage*(who: cint, rusage: ptr Rusage): cint$/;"	f
getservbyname	$NIMLIB/posix/posix.nim	/^proc getservbyname*(a1, a2: cstring): ptr Servent {.importc, header: "<netdb.h>".}$/;"	f
getservbyname	$NIMLIB/windows/winlean.nim	/^proc getservbyname*(name, proto: cstring): ptr Servent {.$/;"	f
getservbyport	$NIMLIB/posix/posix.nim	/^proc getservbyport*(a1: cint, a2: cstring): ptr Servent {.$/;"	f
getservbyport	$NIMLIB/windows/winlean.nim	/^proc getservbyport*(port: cint, proto: cstring): ptr Servent {.$/;"	f
getservent	$NIMLIB/posix/posix.nim	/^proc getservent*(): ptr Servent {.importc, header: "<netdb.h>".}$/;"	f
getsid	$NIMLIB/posix/posix.nim	/^proc getsid*(a1: Pid): Pid {.importc, header: "<unistd.h>", sideEffect.}$/;"	f
getsockname	$NIMLIB/posix/posix.nim	/^proc getsockname*(a1: SocketHandle, a2: ptr SockAddr, a3: ptr SockLen): cint {.$/;"	f
getsockname	$NIMLIB/windows/winlean.nim	/^proc getsockname*(s: SocketHandle, name: ptr SockAddr,$/;"	f
getsockopt	$NIMLIB/posix/posix.nim	/^proc getsockopt*(a1: SocketHandle, a2, a3: cint, a4: pointer, a5: ptr SockLen): cint {.$/;"	f
getsockopt	$NIMLIB/windows/winlean.nim	/^proc getsockopt*(s: SocketHandle, level, optname: cint, optval: pointer,$/;"	f
getuid	$NIMLIB/posix/posix.nim	/^proc getuid*(): Uid {.importc, header: "<unistd.h>", sideEffect.}$/;"	f
getwd	$NIMLIB/posix/posix.nim	/^proc getwd*(a1: cstring): cstring {.importc, header: "<unistd.h>".}$/;"	f
glob	$NIMLIB/posix/posix.nim	/^proc glob*(a1: cstring, a2: cint,$/;"	f
globfree	$NIMLIB/posix/posix.nim	/^proc globfree*(a1: ptr Glob) {.importc, header: "<glob.h>".}$/;"	f
gmtime	$NIMLIB/posix/posix.nim	/^proc gmtime*(a1: var Time): ptr Tm {.importc, header: "<time.h>".}$/;"	f
gmtime_r	$NIMLIB/posix/posix.nim	/^proc gmtime_r*(a1: var Time, a2: var Tm): ptr Tm {.importc, header: "<time.h>".}$/;"	f
go	$NIMLIB/js/dom.nim	/^proc go*(h: History, pagesToJump: int)$/;"	f
gorge	$NIMLIB/system/compilation.nim	/^proc gorge*(command: string, input = "", cache = ""): string {.$/;"	t
gorgeEx	$NIMLIB/system/compilation.nim	/^proc gorgeEx*(command: string, input = "", cache = ""): tuple[output: string,$/;"	t
gotHandshake	$NIMLIB/pure/net.nim	/^  proc gotHandshake*(socket: Socket): bool =$/;"	t
graphemeLen	$NIMLIB/pure/unicode.nim	/^proc graphemeLen*(s: string; i: Natural): Natural {.inline.} =$/;"	t
group	$NIMLIB/js/jsconsole.nim	/^proc group*(console: Console, label = "".cstring) {.importcpp.}$/;"	t
groupCollapsed	$NIMLIB/js/jsconsole.nim	/^proc groupCollapsed*(console: Console, label = "".cstring) {.importcpp.}$/;"	t
groupEnd	$NIMLIB/js/jsconsole.nim	/^proc groupEnd*(console: Console) {.importcpp.}$/;"	f
grow	$NIMLIB/system/seqs_v2.nim	/^proc grow*[T](x: var seq[T]; newLen: Natural; value: T) =$/;"	t
h1	$NIMLIB/pure/htmlgen.nim	/^macro h1*(e: varargs[untyped]): untyped =$/;"	t
h2	$NIMLIB/pure/htmlgen.nim	/^macro h2*(e: varargs[untyped]): untyped =$/;"	t
h3	$NIMLIB/pure/htmlgen.nim	/^macro h3*(e: varargs[untyped]): untyped =$/;"	t
h4	$NIMLIB/pure/htmlgen.nim	/^macro h4*(e: varargs[untyped]): untyped =$/;"	t
h5	$NIMLIB/pure/htmlgen.nim	/^macro h5*(e: varargs[untyped]): untyped =$/;"	t
h6	$NIMLIB/pure/htmlgen.nim	/^macro h6*(e: varargs[untyped]): untyped =$/;"	t
h_errno	$NIMLIB/posix/posix_haiku.nim	/^  h_errno* {.importc, header: "<netdb.h>".}: cint$/;"	t
h_errno	$NIMLIB/posix/posix_linux_amd64.nim	/^  h_errno* {.importc, header: "<netdb.h>".}: cint$/;"	t
h_errno	$NIMLIB/posix/posix_macos_amd64.nim	/^  h_errno* {.importc, header: "<netdb.h>".}: cint$/;"	t
h_errno	$NIMLIB/posix/posix_nintendoswitch.nim	/^  h_errno* {.importc, header: "<netdb.h>".}: cint$/;"	t
h_errno	$NIMLIB/posix/posix_openbsd_amd64.nim	/^  h_errno* {.importc, header: "<netdb.h>".}: cint$/;"	t
h_errno	$NIMLIB/posix/posix_other.nim	/^  h_errno* {.importc, header: "<netdb.h>".}: cint$/;"	t
handle	$NIMLIB/std/typedthreads.nim	/^proc handle*[TArg](t: Thread[TArg]): SysThread {.inline.} =$/;"	t
handleCR	$NIMLIB/pure/lexbase.nim	/^proc handleCR*(L: var BaseLexer, pos: int): int =$/;"	t
handleEvent	$NIMLIB/js/dom.nim	/^proc handleEvent*(w: Window, e: Event)$/;"	f
handleHexChar	$NIMLIB/std/private/decode_helpers.nim	/^proc handleHexChar*(c: char, x: var int): bool {.inline.} =$/;"	t
handleLF	$NIMLIB/pure/lexbase.nim	/^proc handleLF*(L: var BaseLexer, pos: int): int =$/;"	t
handleRefillChar	$NIMLIB/pure/lexbase.nim	/^proc handleRefillChar*(L: var BaseLexer, pos: int): int =$/;"	t
hasAllocStack	$NIMLIB/std/private/threadtypes.nim	/^const hasAllocStack* = defined(zephyr) # maybe freertos too?$/;"	t
hasAnyModuleChanged	$NIMLIB/core/hotcodereloading.nim	/^  proc hasAnyModuleChanged*(): bool = hcrReloadNeeded()$/;"	t
hasArgOfName	$NIMLIB/core/macros.nim	/^proc hasArgOfName*(params: NimNode; name: string): bool =$/;"	t
hasAttribute	$NIMLIB/js/dom.nim	/^proc hasAttribute*(n: Node, attr: cstring): bool$/;"	f
hasAttributeNS	$NIMLIB/js/dom.nim	/^  proc hasAttributeNS*(self: Node; namespace, localName: cstring): bool {.importjs: "(#.$1(#, #)/;"	f
hasBigUint64Array	$NIMLIB/std/private/jsutils.nim	/^  proc hasBigUint64Array*(): bool =$/;"	t
hasChildNodes	$NIMLIB/js/dom.nim	/^proc hasChildNodes*(n: Node): bool$/;"	f
hasClosure	$NIMLIB/pure/typetraits.nim	/^proc hasClosure*(fn: NimNode): bool {.since: (1, 5, 1).} =$/;"	t
hasCustomPragma	$NIMLIB/core/macros.nim	/^macro hasCustomPragma*(n: typed, cp: typed{nkSym}): untyped =$/;"	t
hasData	$NIMLIB/pure/osproc.nim	/^  proc hasData*(p: Process): bool =$/;"	t
hasDataBuffered	$NIMLIB/pure/asyncnet.nim	/^proc hasDataBuffered*(s: AsyncSocket): bool {.since: (1, 5).} =$/;"	t
hasDataBuffered	$NIMLIB/pure/net.nim	/^proc hasDataBuffered*(s: Socket): bool =$/;"	t
hasItem	$NIMLIB/js/dom.nim	/^proc hasItem*(s: Storage, key: cstring): bool$/;"	f
hasJsBigInt	$NIMLIB/std/private/jsutils.nim	/^  proc hasJsBigInt*(): bool =$/;"	t
hasKey	$NIMLIB/core/macrocache.nim	/^proc hasKey*(t: CacheTable; key: string): bool =$/;"	t
hasKey	$NIMLIB/pure/collections/critbits.nim	/^func hasKey*[T](c: CritBitTree[T], key: string): bool {.inline.} =$/;"	t
hasKey	$NIMLIB/pure/collections/tables.nim	/^proc hasKey*[A](t: CountTable[A], key: A): bool =$/;"	t
hasKey	$NIMLIB/pure/httpcore.nim	/^func hasKey*(headers: HttpHeaders, key: string): bool =$/;"	t
hasKey	$NIMLIB/pure/json.nim	/^proc hasKey*(node: JsonNode, key: string): bool =$/;"	t
hasKey	$NIMLIB/pure/strtabs.nim	/^proc hasKey*(t: StringTableRef, key: string): bool {.rtlFunc,$/;"	f
hasKeyOrPut	$NIMLIB/pure/collections/sharedtables.nim	/^proc hasKeyOrPut*[A, B](t: var SharedTable[A, B], key: A, val: B): bool =$/;"	t
hasKeyOrPut	$NIMLIB/pure/collections/tables.nim	/^proc hasKeyOrPut*[A, B](t: var Table[A, B], key: A, val: B): bool =$/;"	t
hasModuleChanged	$NIMLIB/core/hotcodereloading.nim	/^  template hasModuleChanged*(module: typed): bool = false$/;"	t
hasNext	$NIMLIB/pure/pathnorm.nim	/^proc hasNext*(it: PathIter; x: string): bool =$/;"	t
hasNoSideEffects	$NIMLIB/std/effecttraits.nim	/^proc hasNoSideEffects*(fn: NimNode): bool =$/;"	t
hasNxt	$NIMLIB/pure/strscans.nim	/^template hasNxt*(input: string; idx: int): bool = idx < input.len$/;"	t
hasOverlappedIoCompleted	$NIMLIB/windows/winlean.nim	/^template hasOverlappedIoCompleted*(lpOverlapped): bool =$/;"	t
hasOwnProperty	$NIMLIB/js/jsffi.nim	/^proc hasOwnProperty*(x: JsObject, prop: cstring): bool$/;"	f
hasPendingOperations	$NIMLIB/pure/asyncdispatch.nim	/^  proc hasPendingOperations*(): bool =$/;"	t
hasPointerCapture	$NIMLIB/js/dom.nim	/^  proc hasPointerCapture*(self: Node; pointerId: SomeNumber): bool {.importjs: "(#.$1(#) || fals/;"	f
hasSharedHeap	$NIMLIB/std/private/threadtypes.nim	/^const hasSharedHeap* = defined(boehmgc) or defined(gogc) # don't share heaps; every thread has i/;"	t
hash	$NIMLIB/packages/docutils/rstidx.nim	/^proc hash*(x: IndexEntry): Hash =$/;"	t
hash	$NIMLIB/pure/collections/sets.nim	/^proc hash*[A](s: OrderedSet[A]): Hash =$/;"	t
hash	$NIMLIB/pure/hashes.nim	/^proc hash*[T](x: ptr[T]): Hash {.inline.} =$/;"	t
hash	$NIMLIB/pure/json.nim	/^proc hash*(n: OrderedTable[string, JsonNode]): Hash {.noSideEffect.}$/;"	f
hash	$NIMLIB/pure/oids.nim	/^proc hash*(oid: Oid): Hash =$/;"	t
hash	$NIMLIB/pure/rationals.nim	/^func hash*[T](x: Rational[T]): Hash =$/;"	t
hashData	$NIMLIB/pure/hashes.nim	/^proc hashData*(data: pointer, size: int): Hash =$/;"	t
hashIdentity	$NIMLIB/pure/hashes.nim	/^proc hashIdentity*[T: Ordinal|enum](x: T): Hash {.inline, since: (1, 3).} =$/;"	t
hashIgnoreCase	$NIMLIB/pure/hashes.nim	/^proc hashIgnoreCase*(x: string): Hash =$/;"	t
hashIgnoreStyle	$NIMLIB/pure/hashes.nim	/^proc hashIgnoreStyle*(x: string): Hash =$/;"	t
hashWangYi1	$NIMLIB/pure/hashes.nim	/^proc hashWangYi1*(x: int64|uint64|Hash): Hash {.inline.} =$/;"	t
hcrAddEventHandler	$NIMLIB/nimhcr.nim	/^  proc hcrAddEventHandler*(isBefore: bool, cb: proc ()) {.nimhcr.} =$/;"	t
hcrAddModule	$NIMLIB/nimhcr.nim	/^  proc hcrAddModule*(module: cstring) {.nimhcr.} =$/;"	t
hcrGeneration	$NIMLIB/nimhcr.nim	/^  proc hcrGeneration*(): int {.nimhcr.} =$/;"	t
hcrGetGlobal	$NIMLIB/nimhcr.nim	/^  proc hcrGetGlobal*(module: cstring, name: cstring): pointer {.nimhcr.} =$/;"	t
hcrGetProc	$NIMLIB/nimhcr.nim	/^  proc hcrGetProc*(module: cstring, name: cstring): pointer {.nimhcr.} =$/;"	t
hcrHasModuleChanged	$NIMLIB/nimhcr.nim	/^  proc hcrHasModuleChanged*(moduleHash: string): bool {.nimhcr.} =$/;"	t
hcrInit	$NIMLIB/nimhcr.nim	/^  proc hcrInit*(moduleList: ptr pointer, main, sys: cstring,$/;"	f
hcrMarkGlobals	$NIMLIB/nimhcr.nim	/^  proc hcrMarkGlobals*() {.compilerproc, exportc, dynlib, nimcall, gcsafe.} =$/;"	t
hcrPerformCodeReload	$NIMLIB/nimhcr.nim	/^  proc hcrPerformCodeReload*() {.nimhcr.} =$/;"	t
hcrRegisterGlobal	$NIMLIB/nimhcr.nim	/^  proc hcrRegisterGlobal*(module: cstring,$/;"	f
hcrRegisterProc	$NIMLIB/nimhcr.nim	/^  proc hcrRegisterProc*(module: cstring, name: cstring, fn: pointer): pointer {.nimhcr.} =$/;"	t
hcrReloadNeeded	$NIMLIB/nimhcr.nim	/^  proc hcrReloadNeeded*(): bool {.nimhcr.} =$/;"	t
head	$NIMLIB/pure/htmlgen.nim	/^macro head*(e: varargs[untyped]): untyped =$/;"	t
head	$NIMLIB/pure/httpclient.nim	/^proc head*(client: HttpClient | AsyncHttpClient,$/;"	f
header	$NIMLIB/pure/htmlgen.nim	/^macro header*(e: varargs[untyped]): untyped =$/;"	t
headerLimit	$NIMLIB/pure/httpcore.nim	/^const headerLimit* = 10_000$/;"	t
hexbyte	$NIMLIB/pure/oids.nim	/^proc hexbyte*(hex: char): int {.inline.} =$/;"	t
hi32	$NIMLIB/std/private/dragonbox.nim	/^  proc hi32*(x: uint64): uint32 {.inline.} =$/;"	t
hiddenBit	$NIMLIB/std/private/dragonbox.nim	/^  hiddenBit*: BitsType = BitsType(1) shl (significandSize - 1)$/;"	t
hideCursor	$NIMLIB/pure/terminal.nim	/^template hideCursor*() = hideCursor(stdout)$/;"	t
high	$NIMLIB/pure/times.nim	/^proc high*(typ: typedesc[Time]): Time =$/;"	t
high	$NIMLIB/std/jsbigints.nim	/^proc high*(_: typedesc[JsBigInt]): JsBigInt {.error:$/;"	f
high	$NIMLIB/std/monotimes.nim	/^proc high*(typ: typedesc[MonoTime]): MonoTime =$/;"	t
high	$NIMLIB/system.nim	/^proc high*[T](x: openArray[T]): int {.magic: "High", noSideEffect.}$/;"	f
hint	$NIMLIB/core/macros.nim	/^proc hint*(msg: string, n: NimNode = nil) {.magic: "NHint", benign.}$/;"	t
hint	$NIMLIB/system/nimscript.nim	/^proc hint*(name: string; val: bool) =$/;"	t
historyAdd	$NIMLIB/wrappers/linenoise/linenoise.nim	/^proc historyAdd*(line: cstring): cint {.importc: "linenoiseHistoryAdd",$/;"	f
historyLoad	$NIMLIB/wrappers/linenoise/linenoise.nim	/^proc historyLoad*(filename: cstring): cint {.importc: "linenoiseHistoryLoad".}$/;"	f
historySave	$NIMLIB/wrappers/linenoise/linenoise.nim	/^proc historySave*(filename: cstring): cint {.importc: "linenoiseHistorySave".}$/;"	f
historySetMaxLen	$NIMLIB/wrappers/linenoise/linenoise.nim	/^proc historySetMaxLen*(len: cint): cint {.importc: "linenoiseHistorySetMaxLen".}$/;"	f
home	$NIMLIB/js/dom.nim	/^proc home*(w: Window)$/;"	f
hostCPU	$NIMLIB/system.nim	/^  hostCPU* {.magic: "HostCPU".}: string = ""$/;"	t
hostOS	$NIMLIB/system.nim	/^  hostOS* {.magic: "HostOS".}: string = ""$/;"	t
hour	$NIMLIB/pure/times.nim	/^proc hour*(dt: DateTime): HourRange {.inline.} =$/;"	t
hours	$NIMLIB/pure/times.nim	/^proc hours*(h: int): TimeInterval {.inline.} =$/;"	t
hr	$NIMLIB/pure/htmlgen.nim	/^macro hr*(): untyped =$/;"	t
hstrerror	$NIMLIB/posix/posix.nim	/^proc hstrerror*(herrnum: cint): cstring {.importc:"(char *)$1", header: "<netdb.h>".}$/;"	f
html	$NIMLIB/pure/htmlgen.nim	/^macro html*(e: varargs[untyped]): untyped =$/;"	t
htmlTag	$NIMLIB/pure/htmlparser.nim	/^proc htmlTag*(s: string): HtmlTag =$/;"	t
htonl	$NIMLIB/posix/posix.nim	/^proc htonl*(a1: uint32): uint32 {.importc, header: "<arpa\/inet.h>".}$/;"	f
htonl	$NIMLIB/pure/nativesockets.nim	/^template htonl*(x: uint32): untyped =$/;"	t
htons	$NIMLIB/posix/posix.nim	/^proc htons*(a1: uint16): uint16 {.importc, header: "<arpa\/inet.h>".}$/;"	f
htons	$NIMLIB/pure/nativesockets.nim	/^template htons*(x: uint16): untyped =$/;"	t
httpNewLine	$NIMLIB/pure/httpcore.nim	/^const httpNewLine* = "\\c\\L"$/;"	t
hypot	$NIMLIB/js/jscore.nim	/^proc hypot*(m: MathLib, args: varargs[distinct SomeNumber]): float {.importcpp.}$/;"	f
hypot	$NIMLIB/pure/math.nim	/^  func hypot*(x, y: float64): float64 {.importc: "hypot", header: "<math.h>".} =$/;"	t
i2d_X509	$NIMLIB/wrappers/openssl.nim	/^proc i2d_X509*(cert: PX509; o: ptr ptr uint8): cint {.cdecl,$/;"	f
iconv	$NIMLIB/posix/posix.nim	/^proc iconv*(a1: Iconv, a2: var cstring, a3: var int, a4: var cstring,$/;"	f
iconv_close	$NIMLIB/posix/posix.nim	/^proc iconv_close*(a1: Iconv): cint {.importc, header: "<iconv.h>".}$/;"	f
iconv_open	$NIMLIB/posix/posix.nim	/^proc iconv_open*(a1, a2: cstring): Iconv {.importc, header: "<iconv.h>".}$/;"	f
id	$NIMLIB/js/dom.nim	/^proc id*(n: Node): cstring {.importcpp: "#.id", nodecl.}$/;"	f
ident	$NIMLIB/core/macros.nim	/^proc ident*(name: string): NimNode {.magic: "StrToIdent", noSideEffect.}$/;"	f
ident	$NIMLIB/pure/pegs.nim	/^template ident*: Peg =$/;"	t
identChars	$NIMLIB/pure/pegs.nim	/^template identChars*: Peg =$/;"	t
identStartChars	$NIMLIB/pure/pegs.nim	/^template identStartChars*: Peg =$/;"	t
identifiedTouch	$NIMLIB/js/dom.nim	/^proc identifiedTouch*(list: TouchList): Touch$/;"	f
if_freenameindex	$NIMLIB/posix/posix.nim	/^proc if_freenameindex*(a1: ptr Tif_nameindex) {.importc, header: "<net\/if.h>".}$/;"	f
if_indextoname	$NIMLIB/posix/posix.nim	/^proc if_indextoname*(a1: cint, a2: cstring): cstring {.$/;"	f
if_nameindex	$NIMLIB/posix/posix.nim	/^proc if_nameindex*(): ptr Tif_nameindex {.importc, header: "<net\/if.h>".}$/;"	f
if_nametoindex	$NIMLIB/posix/posix.nim	/^proc if_nametoindex*(a1: cstring): cint {.importc, header: "<net\/if.h>".}$/;"	f
iframe	$NIMLIB/pure/htmlgen.nim	/^macro iframe*(e: varargs[untyped]): untyped =$/;"	t
ignoreMsg	$NIMLIB/pure/parsecfg.nim	/^proc ignoreMsg*(c: CfgParser, e: CfgEvent): string {.rtl, extern: "npc$1".} =$/;"	t
im	$NIMLIB/pure/complex.nim	/^template im*(arg: typedesc[float64]): Complex64 = complex64(0, 1)$/;"	t
img	$NIMLIB/pure/htmlgen.nim	/^macro img*(e: varargs[untyped]): untyped =$/;"	t
imul	$NIMLIB/js/jscore.nim	/^proc imul*(m: MathLib, a, b: int32): int32 {.importcpp.}$/;"	f
in	$NIMLIB/js/jsffi.nim	/^proc `in`*(x, y: JsObject): JsObject {.importjs: "(# in #)".}$/;"	o
in	$NIMLIB/system.nim	/^template `in`*(x, y: untyped): untyped {.dirty, callsite.} = contains(y, x)$/;"	o
in6addr_any	$NIMLIB/posix/posix.nim	/^  in6addr_any* {.importc, header: "<netinet\/in.h>".}: In6Addr$/;"	t
in6addr_loopback	$NIMLIB/posix/posix.nim	/^  in6addr_loopback* {.importc, header: "<netinet\/in.h>".}: In6Addr$/;"	t
inDays	$NIMLIB/pure/times.nim	/^proc inDays*(dur: Duration): int64 =$/;"	t
inHours	$NIMLIB/pure/times.nim	/^proc inHours*(dur: Duration): int64 =$/;"	t
inMicroseconds	$NIMLIB/pure/times.nim	/^proc inMicroseconds*(dur: Duration): int64 =$/;"	t
inMilliseconds	$NIMLIB/pure/times.nim	/^proc inMilliseconds*(dur: Duration): int64 =$/;"	t
inMinutes	$NIMLIB/pure/times.nim	/^proc inMinutes*(dur: Duration): int64 =$/;"	t
inNanoseconds	$NIMLIB/pure/times.nim	/^proc inNanoseconds*(dur: Duration): int64 =$/;"	t
inSeconds	$NIMLIB/pure/times.nim	/^proc inSeconds*(dur: Duration): int64 =$/;"	t
inViewport	$NIMLIB/js/dom.nim	/^proc inViewport*(el: Node): bool =$/;"	t
inWeeks	$NIMLIB/pure/times.nim	/^proc inWeeks*(dur: Duration): int64 =$/;"	t
inZone	$NIMLIB/pure/times.nim	/^proc inZone*(time: Time, zone: Timezone): DateTime$/;"	f
inc	$NIMLIB/core/macrocache.nim	/^proc inc*(c: CacheCounter; by = 1) {.magic: "NccInc".} =$/;"	t
inc	$NIMLIB/pure/collections/critbits.nim	/^proc inc*(c: var CritBitTree[int]; key: string, val: int = 1) =$/;"	t
inc	$NIMLIB/pure/collections/tables.nim	/^proc inc*[A](t: var CountTable[A], key: A, val = 1)$/;"	t
inc	$NIMLIB/std/jsbigints.nim	/^func inc*(this: var JsBigInt; amount: JsBigInt) {.importjs: "([#][0][0] += #)".} =$/;"	t
inc	$NIMLIB/system/arithmetics.nim	/^proc inc*[T, V: Ordinal](x: var T, y: V = 1) {.magic: "Inc", noSideEffect.} =$/;"	t
incl	$NIMLIB/core/macrocache.nim	/^proc incl*(s: CacheSeq; value: NimNode) {.magic: "NcsIncl".} =$/;"	t
incl	$NIMLIB/pure/collections/critbits.nim	/^proc incl*[T](c: var CritBitTree[T], key: string, val: sink T) =$/;"	t
incl	$NIMLIB/pure/collections/sets.nim	/^proc incl*[A](s: var OrderedSet[A], key: A) =$/;"	t
incl	$NIMLIB/std/packedsets.nim	/^proc incl*[A](s: var PackedSet[A], other: PackedSet[A]) =$/;"	t
incl	$NIMLIB/system/setops.nim	/^template incl*[T](x: var set[T], y: set[T]) {.callsite.} =$/;"	t
inclFilePermissions	$NIMLIB/pure/os.nim	/^proc inclFilePermissions*(filename: string,$/;"	f
inclSetElement	$NIMLIB/core/typeinfo.nim	/^proc inclSetElement*(x: Any, elem: int) =$/;"	t
indent	$NIMLIB/pure/strutils.nim	/^func indent*(s: string, count: Natural, padding: string = " "): string {.rtl,$/;"	t
indentation	$NIMLIB/pure/strutils.nim	/^func indentation*(s: string): Natural {.since: (1, 3).} =$/;"	t
index	$NIMLIB/pure/pegs.nim	/^func index*(p: Peg): range[-MaxSubpatterns..MaxSubpatterns-1] = p.index$/;"	t
indexBy	$NIMLIB/pure/collections/tables.nim	/^proc indexBy*[A, B, C](collection: A, index: proc(x: B): C): Table[C, B] =$/;"	t
inet_addr	$NIMLIB/posix/posix.nim	/^  proc inet_addr*(a1: cstring): InAddrT {.importc, header: "<arpa\/inet.h>".}$/;"	f
inet_addr	$NIMLIB/windows/winlean.nim	/^proc inet_addr*(cp: cstring): uint32 {.$/;"	f
inet_ntoa	$NIMLIB/posix/posix.nim	/^  proc inet_ntoa*(a1: InAddr): cstring {.importc, header: "<arpa\/inet.h>".}$/;"	f
inet_ntoa	$NIMLIB/windows/winlean.nim	/^proc inet_ntoa*(i: InAddr): cstring {.$/;"	f
inet_ntop	$NIMLIB/posix/posix.nim	/^proc inet_ntop*(a1: cint, a2: pointer | ptr InAddr | ptr In6Addr, a3: cstring, a4: int32): cstri/;"	f
inet_ntop	$NIMLIB/windows/winlean.nim	/^proc inet_ntop*(family: cint, paddr: pointer, pStringBuffer: cstring,$/;"	f
inet_pton	$NIMLIB/posix/posix.nim	/^proc inet_pton*(a1: cint, a2: cstring, a3: pointer | ptr InAddr | ptr In6Addr): cint {.$/;"	f
infix	$NIMLIB/core/macros.nim	/^proc infix*(a: NimNode; op: string;$/;"	f
info	$NIMLIB/js/jsconsole.nim	/^proc info*(console: Console) {.importcpp, varargs.}$/;"	f
info	$NIMLIB/pure/logging.nim	/^template info*(args: varargs[string, `$`]) =$/;"	t
init	$NIMLIB/pure/collections/sets.nim	/^proc init*[A](s: var OrderedSet[A], initialSize = defaultInitialSize) =$/;"	t
init	$NIMLIB/pure/collections/sharedlist.nim	/^proc init*[A](t: var SharedList[A]) =$/;"	t
init	$NIMLIB/pure/collections/sharedtables.nim	/^proc init*[A, B](t: var SharedTable[A, B], initialSize = 32) =$/;"	t
init	$NIMLIB/pure/reservedmem.nim	/^proc init*(T: type ReservedMem,$/;"	f
initCond	$NIMLIB/core/locks.nim	/^proc initCond*(cond: var Cond) {.inline.} =$/;"	t
initCountTable	$NIMLIB/pure/collections/tables.nim	/^proc initCountTable*[A](initialSize = defaultInitialSize): CountTable[A] =$/;"	t
initDateTime	$NIMLIB/pure/times.nim	/^proc initDateTime*(weekday: WeekDay, isoweek: IsoWeekRange, isoyear: IsoYear,$/;"	f
initDecodeTable	$NIMLIB/pure/base64.nim	/^proc initDecodeTable*(): array[256, char] =$/;"	t
initDeque	$NIMLIB/pure/collections/deques.nim	/^proc initDeque*[T](initialSize: int = defaultInitialSize): Deque[T] =$/;"	t
initDoublyLinkedList	$NIMLIB/pure/collections/lists.nim	/^proc initDoublyLinkedList*[T](): DoublyLinkedList[T] =$/;"	t
initDoublyLinkedRing	$NIMLIB/pure/collections/lists.nim	/^proc initDoublyLinkedRing*[T](): DoublyLinkedRing[T] =$/;"	t
initDuration	$NIMLIB/pure/times.nim	/^proc initDuration*(nanoseconds, microseconds, milliseconds,$/;"	f
initFoo	$NIMLIB/std/importutils.nim	/^  proc initFoo*(): auto = Foo()$/;"	t
initGeneralTokenizer	$NIMLIB/packages/docutils/highlite.nim	/^proc initGeneralTokenizer*(g: var GeneralTokenizer, buf: string) =$/;"	t
initHashSet	$NIMLIB/pure/collections/sets.nim	/^proc initHashSet*[A](initialSize = defaultInitialSize): HashSet[A] =$/;"	t
initHeapQueue	$NIMLIB/pure/collections/heapqueue.nim	/^proc initHeapQueue*[T](): HeapQueue[T] =$/;"	t
initIntSet	$NIMLIB/pure/collections/intsets.nim	/^proc initIntSet*(): IntSet {.inline.} = initPackedSet[int]()$/;"	t
initLock	$NIMLIB/core/locks.nim	/^proc initLock*(lock: var Lock) {.inline.} =$/;"	t
initOptParser	$NIMLIB/pure/parseopt.nim	/^proc initOptParser*(cmdline: seq[string], shortNoVal: set[char] = {},$/;"	t
initOrderedSet	$NIMLIB/pure/collections/sets.nim	/^proc initOrderedSet*[A](initialSize = defaultInitialSize): OrderedSet[A] =$/;"	t
initOrderedTable	$NIMLIB/pure/collections/tables.nim	/^proc initOrderedTable*[A, B](initialSize = defaultInitialSize): OrderedTable[A, B] =$/;"	t
initPackedSet	$NIMLIB/std/packedsets.nim	/^proc initPackedSet*[A]: PackedSet[A] =$/;"	t
initRLock	$NIMLIB/core/rlocks.nim	/^proc initRLock*(lock: var RLock) {.inline.} =$/;"	t
initRand	$NIMLIB/pure/random.nim	/^proc initRand*(seed: int64): Rand =$/;"	t
initRational	$NIMLIB/pure/rationals.nim	/^func initRational*[T: SomeInteger](num, den: T): Rational[T] =$/;"	t
initRstGenerator	$NIMLIB/packages/docutils/rstgen.nim	/^proc initRstGenerator*(g: var RstGenerator, target: OutputTarget,$/;"	f
initRtArray	$NIMLIB/pure/collections/rtarrays.nim	/^proc initRtArray*[T](len: Natural): RtArray[T] =$/;"	t
initSet	$NIMLIB/pure/collections/sets.nim	/^proc initSet*[A](initialSize = defaultInitialSize): HashSet[A] {.deprecated:$/;"	t
initSinglyLinkedList	$NIMLIB/pure/collections/lists.nim	/^proc initSinglyLinkedList*[T](): SinglyLinkedList[T] =$/;"	t
initSinglyLinkedRing	$NIMLIB/pure/collections/lists.nim	/^proc initSinglyLinkedRing*[T](): SinglyLinkedRing[T] =$/;"	t
initSysCond	$NIMLIB/std/private/syslocks.nim	/^  proc initSysCond*(cond: var SysCond) {.inline.} =$/;"	t
initSysLock	$NIMLIB/std/private/syslocks.nim	/^  proc initSysLock*(L: var SysLock) {.importc: "InitializeCriticalSection",$/;"	f
initSysLockAttr	$NIMLIB/std/private/syslocks.nim	/^  proc initSysLockAttr*(a: var SysLockAttr) {.$/;"	f
initTable	$NIMLIB/pure/collections/tables.nim	/^proc initTable*[A, B](initialSize = defaultInitialSize): Table[A, B] =$/;"	t
initThread	$NIMLIB/std/private/threadtypes.nim	/^  proc initThread*(s: var SysThread,$/;"	f
initTime	$NIMLIB/pure/times.nim	/^proc initTime*(unix: int64, nanosecond: NanosecondRange): Time =$/;"	t
initTimeFormat	$NIMLIB/pure/times.nim	/^proc initTimeFormat*(format: string): TimeFormat =$/;"	t
initTimeInterval	$NIMLIB/pure/times.nim	/^proc initTimeInterval*(nanoseconds, microseconds, milliseconds,$/;"	f
initToJsonOptions	$NIMLIB/std/jsonutils.nim	/^proc initToJsonOptions*(): ToJsonOptions =$/;"	t
initUri	$NIMLIB/pure/uri.nim	/^func initUri*(isIpv6 = false): Uri =$/;"	t
innerText	$NIMLIB/pure/xmltree.nim	/^proc innerText*(n: XmlNode): string =$/;"	t
inotify_add_watch	$NIMLIB/posix/inotify.nim	/^proc inotify_add_watch*(fd: cint; name: cstring; mask: uint32): cint {.cdecl,$/;"	f
inotify_events	$NIMLIB/posix/inotify.nim	/^iterator inotify_events*(evs: pointer, n: int): ptr InotifyEvent =$/;"	t
inotify_init	$NIMLIB/posix/inotify.nim	/^proc inotify_init*(): FileHandle {.cdecl, importc: "inotify_init",$/;"	f
inotify_init1	$NIMLIB/posix/inotify.nim	/^proc inotify_init1*(flags: cint): FileHandle {.cdecl, importc: "inotify_init1",$/;"	f
inotify_rm_watch	$NIMLIB/posix/inotify.nim	/^proc inotify_rm_watch*(fd: cint; wd: cint): cint {.cdecl,$/;"	f
input	$NIMLIB/pure/htmlgen.nim	/^macro input*(e: varargs[untyped]): untyped =$/;"	t
inputHandle	$NIMLIB/pure/osproc.nim	/^proc inputHandle*(p: Process): FileHandle {.rtl, raises: [], extern: "nosp$1",$/;"	f
inputStream	$NIMLIB/pure/osproc.nim	/^proc inputStream*(p: Process): Stream {.rtl, extern: "nosp$1", tags: [].}$/;"	f
ins	$NIMLIB/pure/htmlgen.nim	/^macro ins*(e: varargs[untyped]): untyped =$/;"	t
insert	$NIMLIB/core/macros.nim	/^proc insert*(a: NimNode; pos: int; b: NimNode) =$/;"	t
insert	$NIMLIB/pure/collections/sequtils.nim	/^func insert*[T](dest: var seq[T], src: openArray[T], pos = 0) =$/;"	t
insert	$NIMLIB/pure/xmltree.nim	/^proc insert*(father: XmlNode, sons: openArray[XmlNode], index: int) {.inline.} =$/;"	t
insert	$NIMLIB/system.nim	/^proc insert*[T](x: var seq[T], item: sink T, i = 0.Natural) {.noSideEffect.} =$/;"	t
insertAdjacentElement	$NIMLIB/js/dom.nim	/^  proc insertAdjacentElement*(self: Node; position: cstring; element: Node) {.importjs: "#.$1(#,/;"	f
insertAdjacentHTML	$NIMLIB/js/dom.nim	/^  proc insertAdjacentHTML*(self: Node; position, html: cstring) {.importjs: "#.$1(#, #)".}$/;"	f
insertAdjacentText	$NIMLIB/js/dom.nim	/^  proc insertAdjacentText*(self: Node; position, data: cstring) {.importjs: "#.$1(#, #)".}$/;"	f
insertBefore	$NIMLIB/js/dom.nim	/^  proc insertBefore*(parent, newNode, before: Node) =$/;"	t
insertData	$NIMLIB/js/dom.nim	/^proc insertData*(n: Node, position: int, data: cstring)$/;"	f
insertNode	$NIMLIB/js/dom.nim	/^proc insertNode*(range: Range, node: Node)$/;"	f
insertSep	$NIMLIB/pure/strutils.nim	/^func insertSep*(s: string, sep = '_', digits = 3): string {.rtl,$/;"	t
instantiationInfo	$NIMLIB/system.nim	/^proc instantiationInfo*(index = -1, fullPaths = false): tuple[$/;"	t
int	$NIMLIB/system/basic_types.nim	/^  int* {.magic: Int.}         ## Default integer type; bitwidth depends on$/;"	t
int16	$NIMLIB/system/basic_types.nim	/^  int16* {.magic: Int16.}     ## Signed 16 bit integer type.$/;"	t
int32	$NIMLIB/system/basic_types.nim	/^  int32* {.magic: Int32.}     ## Signed 32 bit integer type.$/;"	t
int64	$NIMLIB/system/basic_types.nim	/^  int64* {.magic: Int64.}     ## Signed 64 bit integer type.$/;"	t
int8	$NIMLIB/system/basic_types.nim	/^  int8* {.magic: Int8.}       ## Signed 8 bit integer type.$/;"	t
intToStr	$NIMLIB/pure/strutils.nim	/^func intToStr*(x: int, minchars: Positive = 1): string {.rtl,$/;"	t
intVal	$NIMLIB/core/macros.nim	/^proc intVal*(n: NimNode): BiggestInt {.magic: "NIntVal", noSideEffect.}$/;"	f
intensity	$NIMLIB/pure/colors.nim	/^proc intensity*(a: Color, f: float): Color =$/;"	t
intercept	$NIMLIB/pure/stats.nim	/^proc intercept*(r: RunningRegress): float =$/;"	t
interiorAllocatedPtr	$NIMLIB/system/alloc.nim	/^    proc interiorAllocatedPtr*(p: pointer): pointer =$/;"	t
internalErrorFlag	$NIMLIB/core/macros.nim	/^proc internalErrorFlag*(): string {.magic: "NError", noSideEffect.}$/;"	f
internalNew	$NIMLIB/system.nim	/^proc internalNew*[T](a: var ref T) {.magic: "New", noSideEffect.}$/;"	f
interpolatedFragments	$NIMLIB/pure/parseutils.nim	/^iterator interpolatedFragments*(s: string): tuple[kind: InterpolatedKind,$/;"	i
intersection	$NIMLIB/pure/collections/sets.nim	/^proc intersection*[A](s1, s2: HashSet[A]): HashSet[A] =$/;"	t
intersection	$NIMLIB/std/packedsets.nim	/^proc intersection*[A](s1, s2: PackedSet[A]): PackedSet[A] =$/;"	t
inv	$NIMLIB/pure/complex.nim	/^func inv*[T](z: Complex[T]): Complex[T] =$/;"	t
invalidFilenameChars	$NIMLIB/pure/os.nim	/^    invalidFilenameChars* = {'\/', '\\\\', ':', '*', '?', '"', '<', '>', '|', '^', '\\0'} ## \\$/;"	t
invalidFilenames	$NIMLIB/pure/os.nim	/^    invalidFilenames* = [$/;"	t
invoke	$NIMLIB/std/tasks.nim	/^proc invoke*(task: Task) {.inline, gcsafe.} =$/;"	t
invokeNew	$NIMLIB/core/typeinfo.nim	/^proc invokeNew*(x: Any) =$/;"	t
invokeNewSeq	$NIMLIB/core/typeinfo.nim	/^proc invokeNewSeq*(x: Any, len: int) =$/;"	t
ioctl	$NIMLIB/posix/posix.nim	/^proc ioctl*(f: FileHandle, device: uint): int {.importc: "ioctl",$/;"	f
ioctl	$NIMLIB/posix/termios.nim	/^proc ioctl*(fd: cint, request: culong, reply: ptr IOctl_WinSize): int {.$/;"	f
ioctlsocket	$NIMLIB/pure/nativesockets.nim	/^  proc ioctlsocket*(s: SocketHandle, cmd: clong,$/;"	f
ioselSupportedPlatform	$NIMLIB/pure/selectors.nim	/^const ioselSupportedPlatform* = defined(macosx) or defined(freebsd) or$/;"	t
is	$NIMLIB/system.nim	/^proc `is`*[T, S](x: T, y: S): bool {.magic: "Is", noSideEffect.}$/;"	o
is1xx	$NIMLIB/pure/httpcore.nim	/^func is1xx*(code: HttpCode): bool {.inline, since: (1, 5).} =$/;"	t
is2xx	$NIMLIB/pure/httpcore.nim	/^func is2xx*(code: HttpCode): bool {.inline.} =$/;"	t
is3xx	$NIMLIB/pure/httpcore.nim	/^func is3xx*(code: HttpCode): bool {.inline.} =$/;"	t
is4xx	$NIMLIB/pure/httpcore.nim	/^func is4xx*(code: HttpCode): bool {.inline.} =$/;"	t
is5xx	$NIMLIB/pure/httpcore.nim	/^func is5xx*(code: HttpCode): bool {.inline.} =$/;"	t
isAbsolute	$NIMLIB/pure/uri.nim	/^func isAbsolute*(uri: Uri): bool =$/;"	t
isAbsolute	$NIMLIB/std/paths.nim	/^func isAbsolute*(path: Path): bool {.inline, raises: [].} =$/;"	t
isAbsolute	$NIMLIB/std/private/ospaths2.nim	/^proc isAbsolute*(path: string): bool {.rtl, noSideEffect, extern: "nos$1", raises: [].} =$/;"	t
isAdmin	$NIMLIB/pure/os.nim	/^proc isAdmin*: bool {.noWeirdTarget.} =$/;"	t
isAllocatedPtr	$NIMLIB/system/alloc.nim	/^    proc isAllocatedPtr*(p: pointer): bool =$/;"	t
isAlpha	$NIMLIB/pure/unicode.nim	/^proc isAlpha*(s: string): bool {.noSideEffect, inline.} =$/;"	t
isAlphaAscii	$NIMLIB/pure/strutils.nim	/^func isAlphaAscii*(c: char): bool {.rtl, extern: "nsuIsAlphaAsciiChar".} =$/;"	t
isAlphaNumeric	$NIMLIB/pure/strutils.nim	/^func isAlphaNumeric*(c: char): bool {.rtl, extern: "nsuIsAlphaNumericChar".} =$/;"	t
isClosed	$NIMLIB/pure/asyncnet.nim	/^proc isClosed*(socket: AsyncSocket): bool =$/;"	t
isColor	$NIMLIB/pure/colors.nim	/^proc isColor*(name: string): bool =$/;"	t
isCombining	$NIMLIB/pure/unicode.nim	/^proc isCombining*(c: Rune): bool {.rtl, extern: "nuc$1".} =$/;"	t
isDefaultNamespace	$NIMLIB/js/dom.nim	/^proc isDefaultNamespace*(n: Node): bool$/;"	f
isDigit	$NIMLIB/pure/strutils.nim	/^func isDigit*(c: char): bool {.rtl, extern: "nsuIsDigitChar".} =$/;"	t
isDisconnectionError	$NIMLIB/pure/net.nim	/^proc isDisconnectionError*(flags: set[SocketFlag],$/;"	f
isDocumentationTitle	$NIMLIB/packages/docutils/rstidx.nim	/^proc isDocumentationTitle*(hyperlink: string): bool =$/;"	t
isDst	$NIMLIB/pure/times.nim	/^proc isDst*(dt: DateTime): bool {.inline.} =$/;"	t
isEmpty	$NIMLIB/pure/ioselects/ioselectors_epoll.nim	/^template isEmpty*[T](s: Selector[T]): bool =$/;"	t
isEmpty	$NIMLIB/pure/ioselects/ioselectors_kqueue.nim	/^template isEmpty*[T](s: Selector[T]): bool =$/;"	t
isEmpty	$NIMLIB/pure/ioselects/ioselectors_poll.nim	/^template isEmpty*[T](s: Selector[T]): bool =$/;"	t
isEmpty	$NIMLIB/pure/ioselects/ioselectors_select.nim	/^template isEmpty*[T](s: Selector[T]): bool =$/;"	t
isEmpty	$NIMLIB/pure/selectors.nim	/^  template isEmpty*[T](s: Selector[T]): bool = # TODO: Why is this a template?$/;"	t
isEqualNode	$NIMLIB/js/dom.nim	/^proc isEqualNode*(n: Node): bool$/;"	f
isExported	$NIMLIB/core/macros.nim	/^proc isExported*(n: NimNode): bool {.noSideEffect.} =$/;"	t
isFinite	$NIMLIB/js/dom.nim	/^proc isFinite*(x: BiggestFloat): bool {.importc, nodecl.}$/;"	f
isFinite	$NIMLIB/std/private/dragonbox.nim	/^proc isFinite*(this: Double): bool {.noSideEffect.} =$/;"	t
isFutureLoggingEnabled	$NIMLIB/pure/asyncfutures.nim	/^const isFutureLoggingEnabled* = defined(futureLogging)$/;"	t
isGcSafe	$NIMLIB/std/effecttraits.nim	/^proc isGcSafe*(fn: NimNode): bool =$/;"	t
isGitRepo	$NIMLIB/std/private/gitutils.nim	/^proc isGitRepo*(dir: string): bool =$/;"	t
isHidden	$NIMLIB/pure/os.nim	/^proc isHidden*(path: string): bool {.noWeirdTarget.} =$/;"	t
isInf	$NIMLIB/std/private/dragonbox.nim	/^proc isInf*(this: Double): bool {.noSideEffect.} =$/;"	t
isInstantiationOf	$NIMLIB/core/macros.nim	/^proc isInstantiationOf*(instanceProcSym, genProcSym: NimNode): bool {.magic: "SymIsInstantiation/;"	f
isInteger	$NIMLIB/std/private/jsutils.nim	/^  proc isInteger*[T](x: T): bool {.importjs: "Number.isInteger(#)".} =$/;"	t
isIntegralEndpoint	$NIMLIB/std/private/dragonbox.nim	/^proc isIntegralEndpoint*(twoF: uint64; e2: int32; minusK: int32): bool {.inline.} =$/;"	t
isIntegralMidpoint	$NIMLIB/std/private/dragonbox.nim	/^proc isIntegralMidpoint*(twoF: uint64; e2: int32; minusK: int32): bool {.inline.} =$/;"	t
isIpAddress	$NIMLIB/pure/net.nim	/^proc isIpAddress*(addressStr: string): bool {.tags: [].} =$/;"	t
isLeapDay	$NIMLIB/pure/times.nim	/^proc isLeapDay*(dt: DateTime): bool {.since: (1, 1).} =$/;"	t
isLeapYear	$NIMLIB/pure/times.nim	/^proc isLeapYear*(year: int): bool =$/;"	t
isLower	$NIMLIB/pure/unicode.nim	/^proc isLower*(c: Rune): bool {.rtl, extern: "nuc$1".} =$/;"	t
isLowerAscii	$NIMLIB/pure/strutils.nim	/^func isLowerAscii*(c: char): bool {.rtl, extern: "nsuIsLowerAsciiChar".} =$/;"	t
isMainModule	$NIMLIB/system/compilation.nim	/^  isMainModule* {.magic: "IsMainModule".}: bool = false$/;"	t
isNaN	$NIMLIB/js/dom.nim	/^proc isNaN*(x: BiggestFloat): bool {.importc, nodecl.}$/;"	f
isNaN	$NIMLIB/pure/math.nim	/^func isNaN*(x: SomeFloat): bool {.inline, since: (1,5,1).} =$/;"	t
isNaN	$NIMLIB/std/private/dragonbox.nim	/^proc isNaN*(this: Double): bool {.noSideEffect.} =$/;"	t
isNamedTuple	$NIMLIB/pure/typetraits.nim	/^proc isNamedTuple*(T: typedesc): bool {.magic: "TypeTrait".} =$/;"	t
isNil	$NIMLIB/core/typeinfo.nim	/^proc isNil*(x: Any): bool =$/;"	t
isNil	$NIMLIB/std/packedsets.nim	/^proc isNil*[A](x: PackedSet[A]): bool {.inline.} =$/;"	t
isNil	$NIMLIB/system.nim	/^proc isNil*[T](x: ref T): bool {.noSideEffect, magic: "IsNil".}$/;"	f
isNone	$NIMLIB/pure/options.nim	/^proc isNone*[T](self: Option[T]): bool {.inline.} =$/;"	t
isNotForeign	$NIMLIB/system/gc_common.nim	/^proc isNotForeign*(x: ForeignCell): bool =$/;"	t
isNotForeign	$NIMLIB/system/mmdisp.nim	/^  proc isNotForeign*(x: ForeignCell): bool = false$/;"	t
isNull	$NIMLIB/js/jsffi.nim	/^proc isNull*[T](x: T): bool {.noSideEffect, importjs: "(# === null)".}$/;"	t
isOnHeap	$NIMLIB/system/gc_regions.nim	/^proc isOnHeap*(r: MemRegion; p: pointer): bool =$/;"	t
isPowerOfTwo	$NIMLIB/pure/math.nim	/^func isPowerOfTwo*(x: int): bool =$/;"	t
isReady	$NIMLIB/pure/concurrency/threadpool.nim	/^proc isReady*(fv: FlowVarBase): bool =$/;"	t
isRefSkipDistinct	$NIMLIB/pure/json.nim	/^macro isRefSkipDistinct*(arg: typed): untyped =$/;"	t
isRelativeTo	$NIMLIB/std/paths.nim	/^proc isRelativeTo*(path: Path, base: Path): bool {.inline.} =$/;"	t
isRelativeTo	$NIMLIB/std/private/ospaths2.nim	/^proc isRelativeTo*(path: string, base: string): bool {.since: (1, 1).} =$/;"	t
isRootDir	$NIMLIB/std/paths.nim	/^func isRootDir*(path: Path): bool {.inline.} =$/;"	t
isRootDir	$NIMLIB/std/private/ospaths2.nim	/^proc isRootDir*(path: string): bool {.$/;"	f
isSafeInteger	$NIMLIB/std/private/jsutils.nim	/^  proc isSafeInteger*[T](x: T): bool {.importjs: "Number.isSafeInteger(#)".} =$/;"	t
isSameNode	$NIMLIB/js/dom.nim	/^proc isSameNode*(n: Node): bool$/;"	f
isSome	$NIMLIB/pure/options.nim	/^proc isSome*[T](self: Option[T]): bool {.inline.} =$/;"	t
isSorted	$NIMLIB/pure/algorithm.nim	/^proc isSorted*[T](a: openArray[T], order = SortOrder.Ascending): bool =$/;"	t
isSpace	$NIMLIB/pure/unicode.nim	/^proc isSpace*(s: string): bool {.noSideEffect, inline.} =$/;"	t
isSpaceAscii	$NIMLIB/pure/strutils.nim	/^func isSpaceAscii*(c: char): bool {.rtl, extern: "nsuIsSpaceAsciiChar".} =$/;"	t
isSsl	$NIMLIB/pure/asyncnet.nim	/^proc isSsl*(socket: AsyncSocket): bool =$/;"	t
isSsl	$NIMLIB/pure/net.nim	/^proc isSsl*(socket: Socket): bool =$/;"	t
isSuccess	$NIMLIB/windows/winlean.nim	/^proc isSuccess*(a: WINBOOL): bool {.inline.} =$/;"	t
isTitle	$NIMLIB/pure/unicode.nim	/^proc isTitle*(c: Rune): bool {.rtl, extern: "nuc$1".} =$/;"	t
isTrueColorSupported	$NIMLIB/pure/terminal.nim	/^proc isTrueColorSupported*(): bool =$/;"	t
isUndefined	$NIMLIB/js/jsffi.nim	/^proc isUndefined*[T](x: T): bool {.noSideEffect, importjs: "(# === undefined)".}$/;"	t
isUpper	$NIMLIB/pure/unicode.nim	/^proc isUpper*(c: Rune): bool {.rtl, extern: "nuc$1".} =$/;"	t
isUpperAscii	$NIMLIB/pure/strutils.nim	/^func isUpperAscii*(c: char): bool {.rtl, extern: "nsuIsUpperAsciiChar".} =$/;"	t
isValid	$NIMLIB/genode/signals.nim	/^proc isValid*(cap: SignalContextCapability): bool {.importcpp: "#.valid()".}$/;"	f
isValid	$NIMLIB/pure/collections/sets.nim	/^proc isValid*[A](s: HashSet[A]): bool {.deprecated:$/;"	f
isValidFilename	$NIMLIB/pure/os.nim	/^func isValidFilename*(filename: string, maxLen = 259.Positive): bool {.since: (1, 1).} =$/;"	t
isValidSha1Hash	$NIMLIB/std/sha1.nim	/^proc isValidSha1Hash*(s: string): bool =$/;"	t
isWhiteSpace	$NIMLIB/pure/unicode.nim	/^proc isWhiteSpace*(c: Rune): bool {.rtl, extern: "nuc$1".} =$/;"	t
isZero	$NIMLIB/std/private/dragonbox.nim	/^proc isZero*(this: Double): bool {.noSideEffect.} =$/;"	t
isatty	$NIMLIB/posix/posix.nim	/^proc isatty*(a1: cint): cint {.importc, header: "<unistd.h>".}$/;"	f
isatty	$NIMLIB/pure/terminal.nim	/^proc isatty*(f: File): bool =$/;"	t
isnot	$NIMLIB/system.nim	/^template `isnot`*(x, y: untyped): untyped {.callsite.} = not (x is y)$/;"	o
isolate	$NIMLIB/std/isolation.nim	/^func isolate*[T](value: sink T): Isolated[T] {.magic: "Isolate".} =$/;"	t
item	$NIMLIB/js/dom.nim	/^proc item*(list: TouchList, i: int): Touch$/;"	f
items	$NIMLIB/core/macrocache.nim	/^iterator items*(s: CacheSeq): NimNode =$/;"	t
items	$NIMLIB/core/macros.nim	/^iterator items*(n: NimNode): NimNode {.inline.} =$/;"	t
items	$NIMLIB/impure/nre.nim	/^iterator items*(pattern: Captures,$/;"	i
items	$NIMLIB/js/jsffi.nim	/^iterator items*[K, V](assoc: JsAssoc[K, V]): V =$/;"	t
items	$NIMLIB/pure/collections/critbits.nim	/^iterator items*[T](c: CritBitTree[T]): string =$/;"	t
items	$NIMLIB/pure/collections/deques.nim	/^iterator items*[T](deq: Deque[T]): lent T =$/;"	t
items	$NIMLIB/pure/collections/lists.nim	/^iterator items*[T](L: SomeLinkedRing[T]): T =$/;"	t
items	$NIMLIB/pure/collections/sequtils.nim	/^iterator items*[T](xs: iterator: T): T =$/;"	t
items	$NIMLIB/pure/collections/sets.nim	/^iterator items*[A](s: OrderedSet[A]): A =$/;"	t
items	$NIMLIB/pure/collections/sharedlist.nim	/^iterator items*[A](x: var SharedList[A]): A =$/;"	t
items	$NIMLIB/pure/json.nim	/^iterator items*(node: JsonNode): JsonNode =$/;"	t
items	$NIMLIB/pure/pegs.nim	/^iterator items*(p: Peg): Peg {.inline.} =$/;"	t
items	$NIMLIB/pure/ropes.nim	/^iterator items*(r: Rope): char =$/;"	t
items	$NIMLIB/pure/xmltree.nim	/^iterator items*(n: XmlNode): XmlNode {.inline.} =$/;"	t
items	$NIMLIB/std/enumutils.nim	/^iterator items*[T: HoleyEnum](E: typedesc[T]): T =$/;"	t
items	$NIMLIB/std/packedsets.nim	/^iterator items*[A](s: PackedSet[A]): A {.inline.} =$/;"	t
items	$NIMLIB/system/iterators.nim	/^iterator items*[T](a: set[T]): T {.inline.} =$/;"	t
itemsWithPrefix	$NIMLIB/pure/collections/critbits.nim	/^iterator itemsWithPrefix*[T](c: CritBitTree[T], prefix: string): string =$/;"	t
iterAndMutate	$NIMLIB/pure/collections/sharedlist.nim	/^proc iterAndMutate*[A](x: var SharedList[A]; action: proc(x: A): bool) =$/;"	t
iterToProc	$NIMLIB/system/alloc.nim	/^proc iterToProc*(iter: typed, envType: typedesc; procName: untyped) {.$/;"	f
javaEnabled	$NIMLIB/js/dom.nim	/^proc javaEnabled*(h: Navigator): bool$/;"	f
jit_exec	$NIMLIB/wrappers/pcre.nim	/^proc jit_exec*(code: ptr Pcre,$/;"	f
jit_free_unused_memory	$NIMLIB/wrappers/pcre.nim	/^proc jit_free_unused_memory*()$/;"	f
jit_stack_alloc	$NIMLIB/wrappers/pcre.nim	/^proc jit_stack_alloc*(startsize: cint,$/;"	f
jit_stack_free	$NIMLIB/wrappers/pcre.nim	/^proc jit_stack_free*(stack: ptr JitStack)$/;"	f
join	$NIMLIB/pure/strutils.nim	/^func join*[T: not string](a: openArray[T], sep: string = ""): string =$/;"	t
joinPath	$NIMLIB/std/private/ospaths2.nim	/^proc joinPath*(parts: varargs[string]): string {.noSideEffect,$/;"	f
joinRegion	$NIMLIB/system/gc_regions.nim	/^  proc joinRegion*(dest: var MemRegion; src: MemRegion) =$/;"	t
joinThread	$NIMLIB/std/typedthreads.nim	/^  proc joinThread*[TArg](t: Thread[TArg]) {.inline.} =$/;"	t
joinThreads	$NIMLIB/std/typedthreads.nim	/^  proc joinThreads*[TArg](t: varargs[Thread[TArg]]) =$/;"	t
js	$NIMLIB/js/jsffi.nim	/^  js* = JsObject$/;"	t
jsArguments	$NIMLIB/js/jsffi.nim	/^  jsArguments* {.importc: "arguments", nodecl}: JsObject$/;"	t
jsAssert	$NIMLIB/js/jsconsole.nim	/^  template jsAssert*(console: Console; assertion) =$/;"	t
jsConstructorName	$NIMLIB/std/private/jsutils.nim	/^  proc jsConstructorName*[T](a: T): cstring =$/;"	t
jsDelete	$NIMLIB/js/jsffi.nim	/^proc jsDelete*(x: auto): JsObject {.importjs: "(delete #)".}$/;"	f
jsDirname	$NIMLIB/js/jsffi.nim	/^  jsDirname* {.importc: "__dirname", nodecl.}: cstring$/;"	t
jsFilename	$NIMLIB/js/jsffi.nim	/^  jsFilename* {.importc: "__filename", nodecl.}: cstring$/;"	t
jsFromAst	$NIMLIB/js/jsffi.nim	/^macro jsFromAst*(n: untyped): untyped =$/;"	t
jsNew	$NIMLIB/js/jsffi.nim	/^proc jsNew*(x: auto): JsObject {.importjs: "(new #)".}$/;"	f
jsNull	$NIMLIB/js/jsffi.nim	/^  jsNull* {.importc: "null", nodecl.}: JsObject$/;"	t
jsTypeOf	$NIMLIB/js/jsffi.nim	/^proc jsTypeOf*(x: JsObject): cstring {.importjs: "typeof(#)".}$/;"	f
jsTypeOf	$NIMLIB/std/private/jsutils.nim	/^  proc jsTypeOf*[T](x: T): cstring {.importjs: "typeof(#)".} =$/;"	t
jsUndefined	$NIMLIB/js/jsffi.nim	/^  jsUndefined* {.importc: "undefined", nodecl.}: JsObject$/;"	t
json	$NIMLIB/std/jsfetch.nim	/^proc json*(self: Response): Future[JsObject] {.importjs: "#.$1()".}$/;"	f
jsonTo	$NIMLIB/std/jsonutils.nim	/^proc jsonTo*(b: JsonNode, T: typedesc, opt = Joptions()): T =$/;"	t
kbd	$NIMLIB/pure/htmlgen.nim	/^macro kbd*(e: varargs[untyped]): untyped =$/;"	t
keepIf	$NIMLIB/pure/collections/sequtils.nim	/^proc keepIf*[T](s: var seq[T], pred: proc(x: T): bool {.closure.})$/;"	f
keepItIf	$NIMLIB/pure/collections/sequtils.nim	/^template keepItIf*(varSeq: seq, pred: untyped) =$/;"	t
kevent	$NIMLIB/posix/kqueue.nim	/^proc kevent*(kqFD: cint,$/;"	f
keygen	$NIMLIB/pure/htmlgen.nim	/^macro keygen*(e: varargs[untyped]): untyped =$/;"	t
keys	$NIMLIB/js/jsffi.nim	/^iterator keys*[K: JsKey, V](assoc: JsAssoc[K, V]): K =$/;"	t
keys	$NIMLIB/pure/collections/critbits.nim	/^iterator keys*[T](c: CritBitTree[T]): string =$/;"	t
keys	$NIMLIB/pure/collections/tables.nim	/^iterator keys*[A](t: CountTable[A]): lent A =$/;"	t
keys	$NIMLIB/pure/json.nim	/^iterator keys*(node: JsonNode): string =$/;"	t
keys	$NIMLIB/pure/strtabs.nim	/^iterator keys*(t: StringTableRef): string =$/;"	t
keysWithPrefix	$NIMLIB/pure/collections/critbits.nim	/^iterator keysWithPrefix*[T](c: CritBitTree[T], prefix: string): string =$/;"	t
kill	$NIMLIB/posix/posix.nim	/^proc kill*(a1: Pid, a2: cint): cint {.importc, header: "<signal.h>", sideEffect.}$/;"	f
kill	$NIMLIB/pure/osproc.nim	/^proc kill*(p: Process) {.rtl, extern: "nosp$1", tags: [].}$/;"	f
killpg	$NIMLIB/posix/posix.nim	/^proc killpg*(a1: Pid, a2: cint): cint {.importc, header: "<signal.h>", sideEffect.}$/;"	f
kind	$NIMLIB/core/macros.nim	/^proc kind*(n: NimNode): NimNodeKind {.magic: "NKind", noSideEffect.}$/;"	f
kind	$NIMLIB/core/typeinfo.nim	/^proc kind*(x: Any): AnyKind {.inline.} =$/;"	t
kind	$NIMLIB/pure/parsejson.nim	/^proc kind*(my: JsonParser): JsonEventKind {.inline.} =$/;"	t
kind	$NIMLIB/pure/parsexml.nim	/^proc kind*(my: XmlParser): XmlEventKind {.inline.} =$/;"	t
kind	$NIMLIB/pure/pegs.nim	/^func kind*(p: Peg): PegKind = p.kind$/;"	t
kind	$NIMLIB/pure/xmltree.nim	/^proc kind*(n: XmlNode): XmlNodeKind {.inline.} =$/;"	t
kqueue	$NIMLIB/posix/kqueue.nim	/^proc kqueue*(): cint {.importc: "kqueue", header: "<sys\/event.h>".}$/;"	f
kurtosis	$NIMLIB/pure/stats.nim	/^proc kurtosis*[T](x: openArray[T]): float =$/;"	t
kurtosisS	$NIMLIB/pure/stats.nim	/^proc kurtosisS*[T](x: openArray[T]): float =$/;"	t
label	$NIMLIB/pure/htmlgen.nim	/^macro label*(e: varargs[untyped]): untyped =$/;"	t
langSymbolGroup	$NIMLIB/packages/docutils/dochelpers.nim	/^proc langSymbolGroup*(kind: string, name: string): LangSymbol =$/;"	t
largest	$NIMLIB/pure/collections/tables.nim	/^proc largest*[A](t: CountTable[A]): tuple[key: A, val: int] =$/;"	t
last	$NIMLIB/core/macros.nim	/^proc last*(node: NimNode): NimNode = node[node.len-1]$/;"	t
lastModified	$NIMLIB/pure/httpclient.nim	/^proc lastModified*(response: Response | AsyncResponse): DateTime =$/;"	t
lastPathPart	$NIMLIB/std/paths.nim	/^func lastPathPart*(path: Path): Path {.inline.} =$/;"	t
lastPathPart	$NIMLIB/std/private/ospaths2.nim	/^proc lastPathPart*(path: string): string {.$/;"	f
lastRune	$NIMLIB/pure/unicode.nim	/^proc lastRune*(s: string; last: int): (Rune, int) {.inline.} =$/;"	t
lastSon	$NIMLIB/packages/docutils/rstast.nim	/^proc lastSon*(n: PRstNode): PRstNode =$/;"	t
lchmod	$NIMLIB/posix/posix.nim	/^  proc lchmod*(a1: cstring, a2: Mode): cint {.importc, header: "<sys\/stat.h>", sideEffect.}$/;"	f
lchown	$NIMLIB/posix/posix.nim	/^proc lchown*(a1: cstring, a2: Uid, a3: Gid): cint {.importc, header: "<unistd.h>".}$/;"	f
lcm	$NIMLIB/pure/math.nim	/^func lcm*[T](x: openArray[T]): T {.since: (1, 1).} =$/;"	t
leaves	$NIMLIB/pure/ropes.nim	/^iterator leaves*(r: Rope): string =$/;"	t
legend	$NIMLIB/pure/htmlgen.nim	/^macro legend*(e: varargs[untyped]): untyped =$/;"	t
len	$NIMLIB/core/macrocache.nim	/^proc len*(t: CacheTable): int {.magic: "NctLen".} =$/;"	t
len	$NIMLIB/core/macros.nim	/^proc len*(n: NimNode): int {.magic: "NLen", noSideEffect.}$/;"	f
len	$NIMLIB/core/typeinfo.nim	/^proc len*(x: Any): int =$/;"	t
len	$NIMLIB/js/dom.nim	/^  proc len*(x: Node): int {.importcpp: "#.childNodes.length".}$/;"	f
len	$NIMLIB/packages/docutils/rstast.nim	/^proc len*(n: PRstNode): int =$/;"	t
len	$NIMLIB/posix/inotify.nim	/^    len* {.importc: "len".}: uint32                    ## Length (including NULs) of name.$/;"	t
len	$NIMLIB/pure/asyncstreams.nim	/^proc len*[T](future: FutureStream[T]): int =$/;"	t
len	$NIMLIB/pure/collections/critbits.nim	/^func len*[T](c: CritBitTree[T]): int {.inline.} =$/;"	t
len	$NIMLIB/pure/collections/deques.nim	/^proc len*[T](deq: Deque[T]): int {.inline.} =$/;"	t
len	$NIMLIB/pure/collections/heapqueue.nim	/^proc len*[T](heap: HeapQueue[T]): int {.inline.} =$/;"	t
len	$NIMLIB/pure/collections/sets.nim	/^proc len*[A](s: OrderedSet[A]): int {.inline.} =$/;"	t
len	$NIMLIB/pure/collections/sharedtables.nim	/^proc len*[A, B](t: var SharedTable[A, B]): int =$/;"	t
len	$NIMLIB/pure/collections/tables.nim	/^proc len*[A](t: CountTable[A]): int =$/;"	t
len	$NIMLIB/pure/httpcore.nim	/^func len*(headers: HttpHeaders): int {.inline.} = headers.table.len$/;"	t
len	$NIMLIB/pure/json.nim	/^proc len*(n: JsonNode): int =$/;"	t
len	$NIMLIB/pure/parsesql.nim	/^proc len*(n: SqlNode): int =$/;"	t
len	$NIMLIB/pure/reservedmem.nim	/^func len*[T](s: ReservedMemSeq[T]): int =$/;"	t
len	$NIMLIB/pure/ropes.nim	/^proc len*(a: Rope): int {.rtl, extern: "nro$1".} =$/;"	t
len	$NIMLIB/pure/strtabs.nim	/^proc len*(t: StringTableRef): int {.rtlFunc, extern: "nst$1".} =$/;"	t
len	$NIMLIB/pure/xmltree.nim	/^proc len*(n: XmlNode): int {.inline.} =$/;"	t
len	$NIMLIB/std/packedsets.nim	/^proc len*[A](s: PackedSet[A]): int {.inline.} =$/;"	t
len	$NIMLIB/std/widestrs.nim	/^  proc len*(w: WideCString): int =$/;"	t
len	$NIMLIB/system.nim	/^proc len*[U: Ordinal; V: Ordinal](x: HSlice[U, V]): int {.noSideEffect, inline.} =$/;"	t
letters	$NIMLIB/pure/pegs.nim	/^template letters*: Peg =$/;"	t
lgamma	$NIMLIB/pure/math.nim	/^    func lgamma*(x: float64): float64 {.importc: "lgamma", header: "<math.h>".} =$/;"	t
li	$NIMLIB/pure/htmlgen.nim	/^macro li*(e: varargs[untyped]): untyped =$/;"	t
libCandidates	$NIMLIB/pure/dynlib.nim	/^proc libCandidates*(s: string, dest: var seq[string]) =$/;"	t
likely	$NIMLIB/system.nim	/^template likely*(val: bool): bool =$/;"	t
line	$NIMLIB/pure/pegs.nim	/^func line*(nt: NonTerminal): int = nt.line$/;"	t
lineInfo	$NIMLIB/core/macros.nim	/^proc lineInfo*(arg: NimNode): string =$/;"	t
lineInfoObj	$NIMLIB/core/macros.nim	/^proc lineInfoObj*(n: NimNode): LineInfo =$/;"	t
lines	$NIMLIB/pure/memfiles.nim	/^iterator lines*(mfile: MemFile, delim = '\\l', eat = '\\r'): string {.inline.} =$/;"	t
lines	$NIMLIB/pure/osproc.nim	/^iterator lines*(p: Process, keepNewLines = false): string {.since: (1, 3), raises: [OSError, IOE/;"	t
lines	$NIMLIB/pure/streams.nim	/^iterator lines*(s: Stream): string =$/;"	t
lines	$NIMLIB/std/syncio.nim	/^iterator lines*(filename: string): string {.tags: [ReadIOEffect].} =$/;"	t
link	$NIMLIB/posix/posix.nim	/^proc link*(a1, a2: cstring): cint {.importc, header: "<unistd.h>".}$/;"	f
link	$NIMLIB/pure/htmlgen.nim	/^macro link*(e: varargs[untyped]): untyped =$/;"	t
lio_listio	$NIMLIB/posix/posix.nim	/^  proc lio_listio*(a1: cint, a2: ptr ptr Taiocb, a3: cint,$/;"	f
lispRepr	$NIMLIB/core/macros.nim	/^proc lispRepr*(n: NimNode; indented = false): string {.benign.} =$/;"	t
listDirs	$NIMLIB/system/nimscript.nim	/^proc listDirs*(dir: string): seq[string] =$/;"	t
listFiles	$NIMLIB/system/nimscript.nim	/^proc listFiles*(dir: string): seq[string] =$/;"	t
listen	$NIMLIB/posix/posix.nim	/^proc listen*(a1: SocketHandle, a2: cint): cint {.$/;"	f
listen	$NIMLIB/pure/asynchttpserver.nim	/^proc listen*(server: AsyncHttpServer; port: Port; address = ""; domain = AF_INET) =$/;"	t
listen	$NIMLIB/pure/asyncnet.nim	/^proc listen*(socket: AsyncSocket, backlog = SOMAXCONN) {.tags: [$/;"	t
listen	$NIMLIB/pure/nativesockets.nim	/^proc listen*(socket: SocketHandle, backlog = SOMAXCONN): cint {.tags: [$/;"	t
listen	$NIMLIB/pure/net.nim	/^proc listen*(socket: Socket, backlog = SOMAXCONN) {.tags: [ReadIOEffect].} =$/;"	t
listen	$NIMLIB/windows/winlean.nim	/^proc listen*(s: SocketHandle, backlog: cint): cint {.$/;"	f
littleEndian16	$NIMLIB/pure/endians.nim	/^  proc littleEndian16*(outp, inp: pointer){.inline.} = copyMem(outp, inp, 2)$/;"	t
littleEndian32	$NIMLIB/pure/endians.nim	/^  proc littleEndian32*(outp, inp: pointer) {.inline.} = swapEndian32(outp, inp)$/;"	t
littleEndian64	$NIMLIB/pure/endians.nim	/^  proc littleEndian64*(outp, inp: pointer) {.inline.} = swapEndian64(outp, inp)$/;"	t
ln	$NIMLIB/pure/complex.nim	/^func ln*[T](z: Complex[T]): Complex[T] =$/;"	t
ln	$NIMLIB/pure/math.nim	/^  func ln*(x: float64): float64 {.importc: "log", header: "<math.h>".} =$/;"	t
lo32	$NIMLIB/std/private/dragonbox.nim	/^  proc lo32*(x: uint64): uint32 {.inline.} =$/;"	t
load	$NIMLIB/pure/concurrency/atomics.nim	/^  proc load*[T](location: var Atomic[T]; order: MemoryOrder = moSequentiallyConsistent): T {.imp/;"	t
load	$NIMLIB/pure/marshal.nim	/^proc load*[T](s: Stream, data: var T) =$/;"	t
loadConfig	$NIMLIB/pure/parsecfg.nim	/^proc loadConfig*(stream: Stream, filename: string = "[stream]"): Config =$/;"	t
loadHtml	$NIMLIB/pure/htmlparser.nim	/^proc loadHtml*(path: string, errors: var seq[string]): XmlNode =$/;"	t
loadLib	$NIMLIB/pure/dynlib.nim	/^proc loadLib*(path: string, globalSymbols = false): LibHandle {.gcsafe.}$/;"	t
loadLibPattern	$NIMLIB/pure/dynlib.nim	/^proc loadLibPattern*(pattern: string, globalSymbols = false): LibHandle =$/;"	t
loadUnidecodeTable	$NIMLIB/pure/unidecode/unidecode.nim	/^proc loadUnidecodeTable*(datafile = "unidecode.dat") =$/;"	t
loadXml	$NIMLIB/pure/xmlparser.nim	/^proc loadXml*(path: string, options: set[XmlParseOption] = {reportComments}): XmlNode =$/;"	t
local	$NIMLIB/pure/times.nim	/^proc local*(t: Time): DateTime =$/;"	t
localFree	$NIMLIB/windows/winlean.nim	/^proc localFree*(p: pointer) {.$/;"	f
localRaiseHook	$NIMLIB/system.nim	/^    localRaiseHook* {.threadvar.}: proc (e: ref Exception): bool {.nimcall, benign.}$/;"	t
localeconv	$NIMLIB/posix/posix.nim	/^proc localeconv*(): ptr Lconv {.importc, header: "<locale.h>".}$/;"	f
locals	$NIMLIB/system.nim	/^proc locals*(): RootObj {.magic: "Plugin", noSideEffect.} =$/;"	t
localtime	$NIMLIB/posix/posix.nim	/^proc localtime*(a1: var Time): ptr Tm {.importc, header: "<time.h>".}$/;"	f
localtime_r	$NIMLIB/posix/posix.nim	/^proc localtime_r*(a1: var Time, a2: var Tm): ptr Tm {.importc, header: "<time.h>".}$/;"	f
lockf	$NIMLIB/posix/posix.nim	/^proc lockf*(a1, a2: cint, a3: Off): cint {.importc, header: "<unistd.h>".}$/;"	f
log	$NIMLIB/js/jsconsole.nim	/^proc log*(console: Console) {.importcpp, varargs.}$/;"	f
log	$NIMLIB/js/jscore.nim	/^proc log*(m: MathLib, a: SomeNumber): float {.importcpp.}$/;"	f
log	$NIMLIB/pure/logging.nim	/^template log*(level: Level, args: varargs[string, `$`]) =$/;"	t
log	$NIMLIB/pure/math.nim	/^func log*[T: SomeFloat](x, base: T): T =$/;"	t
log	$NIMLIB/system/jssys.nim	/^proc log*(s: cstring) {.importc: "console.log", varargs, nodecl.}$/;"	f
log10	$NIMLIB/js/jscore.nim	/^proc log10*(m: MathLib, a: SomeNumber): float {.importcpp.}$/;"	f
log10	$NIMLIB/pure/complex.nim	/^func log10*[T](z: Complex[T]): Complex[T] =$/;"	t
log10	$NIMLIB/pure/math.nim	/^  func log10*(x: float64): float64 {.importc: "log10", header: "<math.h>".} =$/;"	t
log1p	$NIMLIB/js/jscore.nim	/^proc log1p*(m: MathLib, a: SomeNumber): float {.importcpp.}$/;"	f
log2	$NIMLIB/js/jscore.nim	/^proc log2*(m: MathLib, a: SomeNumber): float {.importcpp.}$/;"	f
log2	$NIMLIB/pure/complex.nim	/^func log2*[T](z: Complex[T]): Complex[T] =$/;"	t
log2	$NIMLIB/pure/math.nim	/^    func log2*(x: float64): float64 {.importc: "log2", header: "<math.h>".} =$/;"	t
lookupNamespaceURI	$NIMLIB/js/dom.nim	/^proc lookupNamespaceURI*(n: Node): cstring$/;"	f
lookupPrefix	$NIMLIB/js/dom.nim	/^proc lookupPrefix*(n: Node): cstring$/;"	f
low	$NIMLIB/pure/times.nim	/^proc low*(typ: typedesc[Time]): Time =$/;"	t
low	$NIMLIB/std/jsbigints.nim	/^proc low*(_: typedesc[JsBigInt]): JsBigInt {.error:$/;"	f
low	$NIMLIB/std/monotimes.nim	/^proc low*(typ: typedesc[MonoTime]): MonoTime =$/;"	t
low	$NIMLIB/system.nim	/^proc low*[T](x: openArray[T]): int {.magic: "Low", noSideEffect.}$/;"	f
lowerBound	$NIMLIB/pure/algorithm.nim	/^proc lowerBound*[T](a: openArray[T], key: T): int = lowerBound(a, key, cmp[T])$/;"	t
lseek	$NIMLIB/posix/posix.nim	/^proc lseek*(a1: cint, a2: Off, a3: cint): Off {.importc, header: "<unistd.h>".}$/;"	f
lstat	$NIMLIB/posix/posix.nim	/^proc lstat*(a1: cstring, a2: var Stat): cint {.importc, header: "<sys\/stat.h>", sideEffect.}$/;"	f
maction	$NIMLIB/pure/htmlgen.nim	/^macro maction*(e: varargs[untyped]): untyped =$/;"	t
main	$NIMLIB/pure/htmlgen.nim	/^macro main*(e: varargs[untyped]): untyped =$/;"	t
makeUnixAddr	$NIMLIB/pure/nativesockets.nim	/^    proc makeUnixAddr*(path: string): Sockaddr_un =$/;"	t
makecontext	$NIMLIB/posix/posix.nim	/^  proc makecontext*(a1: var Ucontext, a4: proc (){.noconv.}, a3: cint) {.$/;"	f
maketables	$NIMLIB/wrappers/pcre.nim	/^proc maketables*(): pointer$/;"	f
mantissaDigits	$NIMLIB/pure/fenv.nim	/^template mantissaDigits*(T: typedesc[float64]): int = DBL_MANT_DIG$/;"	t
map	$NIMLIB/pure/collections/sequtils.nim	/^proc map*[T, S](s: openArray[T], op: proc (x: T): S {.closure.}):$/;"	f
map	$NIMLIB/pure/collections/sets.nim	/^proc map*[A, B](data: HashSet[A], op: proc (x: A): B {.closure.}): HashSet[B] {.effectsOf: op.} /;"	t
map	$NIMLIB/pure/htmlgen.nim	/^macro map*(e: varargs[untyped]): untyped =$/;"	t
map	$NIMLIB/pure/options.nim	/^proc map*[T](self: Option[T], callback: proc (input: T)) {.inline, effectsOf: callback.} =$/;"	t
mapIt	$NIMLIB/pure/collections/sequtils.nim	/^template mapIt*(s: typed, op: untyped): untyped =$/;"	t
mapLiterals	$NIMLIB/pure/collections/sequtils.nim	/^macro mapLiterals*(constructor, op: untyped;$/;"	m
mapMem	$NIMLIB/pure/memfiles.nim	/^proc mapMem*(m: var MemFile, mode: FileMode = fmRead,$/;"	t
mapViewOfFileEx	$NIMLIB/windows/winlean.nim	/^proc mapViewOfFileEx*(hFileMappingObject: Handle, dwDesiredAccess: DWORD,$/;"	f
mark	$NIMLIB/pure/htmlgen.nim	/^macro mark*(e: varargs[untyped]): untyped =$/;"	t
marquee	$NIMLIB/pure/htmlgen.nim	/^macro marquee*(e: varargs[untyped]): untyped =$/;"	t
mask	$NIMLIB/posix/inotify.nim	/^    mask* {.importc: "mask".}: uint32                  ## Watch mask.$/;"	t
mask	$NIMLIB/pure/bitops.nim	/^proc mask*[T: SomeInteger](v: var T; slice: Slice[int]) {.inline, since: (1, 3).} =$/;"	t
masked	$NIMLIB/pure/bitops.nim	/^proc masked*[T: SomeInteger](v, mask :T): T {.inline, since: (1, 3).} =$/;"	t
match	$NIMLIB/impure/nre.nim	/^proc match*(str: string, pattern: Regex, start = 0, endpos = int.high): Option[RegexMatch] =$/;"	t
match	$NIMLIB/impure/re.nim	/^proc match*(s: string, pattern: Regex, start = 0): bool {.inline.} =$/;"	t
match	$NIMLIB/packages/docutils/dochelpers.nim	/^proc match*(generated: LangSymbol, docLink: LangSymbol): bool =$/;"	t
matchBounds	$NIMLIB/impure/nre.nim	/^func matchBounds*(pattern: RegexMatch): HSlice[int, int] =$/;"	t
matchLen	$NIMLIB/impure/re.nim	/^proc matchLen*(s: string, pattern: Regex, start = 0): int {.inline.} =$/;"	t
matchMedia	$NIMLIB/js/dom.nim	/^proc matchMedia*(w: Window, mediaQueryString: cstring): MediaQueryList$/;"	f
matches	$NIMLIB/js/dom.nim	/^  proc matches*(self: Node; cssSelector: cstring): bool {.importjs: "(#.$1(#) || false)".}$/;"	f
math	$NIMLIB/pure/htmlgen.nim	/^macro math*(e: varargs[untyped]): untyped =$/;"	t
max	$NIMLIB/js/jscore.nim	/^proc max*(m: MathLib, a, b: SomeNumber): SomeNumber {.importcpp.}$/;"	f
max	$NIMLIB/system/comparisons.nim	/^proc max*[T](x: openArray[T]): T =$/;"	t
max10Exponent	$NIMLIB/pure/fenv.nim	/^template max10Exponent*(T: typedesc[float64]): int = DBL_MAX_10_EXP$/;"	t
maxDescriptors	$NIMLIB/pure/asyncdispatch.nim	/^  proc maxDescriptors*(): int {.raises: OSError.} =$/;"	t
maxDescriptors	$NIMLIB/pure/selectors.nim	/^    template maxDescriptors*(): int =$/;"	t
maxExponent	$NIMLIB/pure/fenv.nim	/^template maxExponent*(T: typedesc[float64]): int = DBL_MAX_EXP$/;"	t
maxIeeeExponent	$NIMLIB/std/private/dragonbox.nim	/^  maxIeeeExponent*: BitsType = BitsType(2 * 1024 - 1)$/;"	t
maxIndex	$NIMLIB/pure/collections/sequtils.nim	/^func maxIndex*[T](s: openArray[T]): int {.since: (1, 1).} =$/;"	t
maxLen	$NIMLIB/pure/reservedmem.nim	/^func maxLen*[T](s: ReservedMemSeq[T]): int =$/;"	t
maxSafeInteger	$NIMLIB/std/private/jsutils.nim	/^  const maxSafeInteger* = 9007199254740991$/;"	t
maxStackTraceLines	$NIMLIB/system/stacktraces.nim	/^  maxStackTraceLines* = 128$/;"	t
maxSymlinkLen	$NIMLIB/std/private/oscommon.nim	/^  const maxSymlinkLen* = 1024$/;"	t
maxVarIntLen	$NIMLIB/std/varints.nim	/^  maxVarIntLen* = 9 ## the maximal number of bytes a varint can take$/;"	t
maximumPositiveValue	$NIMLIB/pure/fenv.nim	/^template maximumPositiveValue*(T: typedesc[float64]): float64 = DBL_MAX$/;"	t
md5	$NIMLIB/wrappers/openssl.nim	/^proc md5*(d: ptr uint8; n: csize_t; md: ptr uint8): ptr uint8{.importc: "MD5".}$/;"	f
md5Final	$NIMLIB/pure/md5.nim	/^proc md5Final*(c: var MD5Context, digest: var MD5Digest) {.raises: [], tags: [], gcsafe.}$/;"	f
md5Init	$NIMLIB/pure/md5.nim	/^proc md5Init*(c: var MD5Context) {.raises: [], tags: [], gcsafe.}$/;"	f
md5Update	$NIMLIB/pure/md5.nim	/^proc md5Update*(c: var MD5Context, input: openArray[uint8]) {.raises: [],$/;"	f
md5_File	$NIMLIB/wrappers/openssl.nim	/^proc md5_File*(file: string): string {.raises: [IOError,Exception].} =$/;"	t
md5_Final	$NIMLIB/wrappers/openssl.nim	/^proc md5_Final*(md: cstring; c: var MD5_CTX): cint{.importc: "MD5_Final".}$/;"	f
md5_Init	$NIMLIB/wrappers/openssl.nim	/^proc md5_Init*(c: var MD5_CTX): cint{.importc: "MD5_Init".}$/;"	f
md5_Str	$NIMLIB/wrappers/openssl.nim	/^proc md5_Str*(str: string): string =$/;"	t
md5_Transform	$NIMLIB/wrappers/openssl.nim	/^proc md5_Transform*(c: var MD5_CTX; b: ptr uint8){.importc: "MD5_Transform".}$/;"	f
md5_Update	$NIMLIB/wrappers/openssl.nim	/^proc md5_Update*(c: var MD5_CTX; data: pointer; len: csize_t): cint{.importc: "MD5_Update".}$/;"	f
mean	$NIMLIB/pure/stats.nim	/^proc mean*[T](x: openArray[T]): float =$/;"	t
memExec	$NIMLIB/pure/reservedmem.nim	/^    memExec* = MemAccessFlags(PROT_EXEC)$/;"	t
memExecRead	$NIMLIB/pure/reservedmem.nim	/^    memExecRead* = MemAccessFlags(PROT_EXEC or PROT_READ)$/;"	t
memExecReadWrite	$NIMLIB/pure/reservedmem.nim	/^    memExecReadWrite* = MemAccessFlags(PROT_EXEC or PROT_READ or PROT_WRITE)$/;"	t
memRead	$NIMLIB/pure/reservedmem.nim	/^    memRead* = MemAccessFlags(PROT_READ)$/;"	t
memReadWrite	$NIMLIB/pure/reservedmem.nim	/^    memReadWrite* = MemAccessFlags(PROT_READ or PROT_WRITE)$/;"	t
memSlices	$NIMLIB/pure/memfiles.nim	/^iterator memSlices*(mfile: MemFile, delim = '\\l', eat = '\\r'): MemSlice {.inline.} =$/;"	t
memTrackerDisable	$NIMLIB/system/memtracker.nim	/^proc memTrackerDisable*() =$/;"	t
memTrackerEnable	$NIMLIB/system/memtracker.nim	/^proc memTrackerEnable*() =$/;"	t
memTrackerOp	$NIMLIB/system/memtracker.nim	/^proc memTrackerOp*(op: cstring; address: pointer; size: int) {.tags: [],$/;"	f
memoryLock	$NIMLIB/posix/posix_utils.nim	/^proc memoryLock*(a1: pointer, a2: int) =$/;"	t
memoryLockAll	$NIMLIB/posix/posix_utils.nim	/^proc memoryLockAll*(flags: int) =$/;"	t
memoryUnlock	$NIMLIB/posix/posix_utils.nim	/^proc memoryUnlock*(a1: pointer, a2: int) =$/;"	t
memoryUnlockAll	$NIMLIB/posix/posix_utils.nim	/^proc memoryUnlockAll*() =$/;"	t
menclose	$NIMLIB/pure/htmlgen.nim	/^macro menclose*(e: varargs[untyped]): untyped =$/;"	t
merge	$NIMLIB/pure/algorithm.nim	/^proc merge*[T](result: var seq[T], x, y: openArray[T]) {.inline, since: (1, 5, 1).} =$/;"	t
merge	$NIMLIB/pure/collections/tables.nim	/^proc merge*[A](s: var CountTable[A], t: CountTable[A]) =$/;"	t
mergeIndexes	$NIMLIB/packages/docutils/rstgen.nim	/^proc mergeIndexes*(dir: string): string =$/;"	t
merror	$NIMLIB/pure/htmlgen.nim	/^macro merror*(e: varargs[untyped]): untyped =$/;"	t
message	$NIMLIB/js/dom.nim	/^  proc message*(ex: DomException): cstring {.importcpp: "#.message", nodecl.}$/;"	f
meta	$NIMLIB/pure/htmlgen.nim	/^macro meta*(e: varargs[untyped]): untyped =$/;"	t
meter	$NIMLIB/pure/htmlgen.nim	/^macro meter*(e: varargs[untyped]): untyped =$/;"	t
method	$NIMLIB/js/dom.nim	/^    `method`*: cstring$/;"	o
metod	$NIMLIB/std/jsfetch.nim	/^    metod* {.importjs: "method".}: cstring$/;"	t
mfenced	$NIMLIB/pure/htmlgen.nim	/^macro mfenced*(e: varargs[untyped]): untyped =$/;"	t
mfrac	$NIMLIB/pure/htmlgen.nim	/^macro mfrac*(e: varargs[untyped]): untyped =$/;"	t
mget	$NIMLIB/pure/asyncfutures.nim	/^proc mget*[T](future: FutureVar[T]): var T =$/;"	t
mget	$NIMLIB/pure/collections/sharedtables.nim	/^proc mget*[A, B](t: var SharedTable[A, B], key: A): var B =$/;"	t
mgetOrPut	$NIMLIB/pure/collections/sharedtables.nim	/^proc mgetOrPut*[A, B](t: var SharedTable[A, B], key: A, val: B): var B =$/;"	t
mgetOrPut	$NIMLIB/pure/collections/tables.nim	/^proc mgetOrPut*[A, B](t: var Table[A, B], key: A, val: B): var B =$/;"	t
mglyph	$NIMLIB/pure/htmlgen.nim	/^macro mglyph*(e: varargs[untyped]): untyped =$/;"	t
mi	$NIMLIB/pure/htmlgen.nim	/^macro mi*(e: varargs[untyped]): untyped =$/;"	t
microseconds	$NIMLIB/pure/times.nim	/^proc microseconds*(micros: int): TimeInterval {.inline.} =$/;"	t
milliseconds	$NIMLIB/pure/times.nim	/^proc milliseconds*(ms: int): TimeInterval {.inline.} =$/;"	t
mimes	$NIMLIB/pure/mimetypes.nim	/^const mimes* = {$/;"	t
min	$NIMLIB/js/jscore.nim	/^proc min*[T: SomeNumber | JsRoot](m: MathLib, a, b: T): T {.importcpp.}$/;"	f
min	$NIMLIB/system/comparisons.nim	/^proc min*[T](x: openArray[T]): T =$/;"	t
min10Exponent	$NIMLIB/pure/fenv.nim	/^template min10Exponent*(T: typedesc[float64]): int = DBL_MIN_10_EXP$/;"	t
minExponent	$NIMLIB/pure/fenv.nim	/^template minExponent*(T: typedesc[float64]): int = DBL_MIN_EXP$/;"	t
minIndex	$NIMLIB/pure/collections/sequtils.nim	/^func minIndex*[T](s: openArray[T]): int {.since: (1, 1).} =$/;"	t
minimumPositiveValue	$NIMLIB/pure/fenv.nim	/^template minimumPositiveValue*(T: typedesc[float64]): float64 = DBL_MIN$/;"	t
minute	$NIMLIB/pure/times.nim	/^proc minute*(dt: DateTime): MinuteRange {.inline.} =$/;"	t
minutes	$NIMLIB/pure/times.nim	/^proc minutes*(m: int): TimeInterval {.inline.} =$/;"	t
missingOrExcl	$NIMLIB/pure/collections/critbits.nim	/^proc missingOrExcl*[T](c: var CritBitTree[T], key: string): bool =$/;"	t
missingOrExcl	$NIMLIB/pure/collections/sets.nim	/^proc missingOrExcl*[A](s: var OrderedSet[A], key: A): bool =$/;"	t
missingOrExcl	$NIMLIB/std/packedsets.nim	/^proc missingOrExcl*[A](s: var PackedSet[A], key: A): bool =$/;"	t
mitems	$NIMLIB/pure/collections/deques.nim	/^iterator mitems*[T](deq: var Deque[T]): var T =$/;"	t
mitems	$NIMLIB/pure/collections/lists.nim	/^iterator mitems*[T](L: var SomeLinkedRing[T]): var T =$/;"	t
mitems	$NIMLIB/pure/json.nim	/^iterator mitems*(node: var JsonNode): var JsonNode =$/;"	t
mitems	$NIMLIB/pure/xmltree.nim	/^iterator mitems*(n: var XmlNode): var XmlNode {.inline.} =$/;"	t
mitems	$NIMLIB/system/iterators.nim	/^iterator mitems*[T](a: var seq[T]): var T {.inline.} =$/;"	t
mix	$NIMLIB/pure/colors.nim	/^template mix*(a, b: Color, fn: untyped): untyped =$/;"	t
mkDir	$NIMLIB/system/nimscript.nim	/^proc mkDir*(dir: string) {.raises: [OSError].} =$/;"	t
mkdir	$NIMLIB/posix/posix.nim	/^proc mkdir*(a1: cstring, a2: Mode): cint {.importc, header: "<sys\/stat.h>", sideEffect.}$/;"	f
mkdtemp	$NIMLIB/posix/posix.nim	/^proc mkdtemp*(tmpl: cstring): pointer {.importc, header: "<stdlib.h>", sideEffect.}$/;"	f
mkdtemp	$NIMLIB/posix/posix_utils.nim	/^proc mkdtemp*(prefix: string): string =$/;"	t
mkfifo	$NIMLIB/posix/posix.nim	/^proc mkfifo*(a1: cstring, a2: Mode): cint {.importc, header: "<sys\/stat.h>".}$/;"	f
mknod	$NIMLIB/posix/posix.nim	/^proc mknod*(a1: cstring, a2: Mode, a3: Dev): cint {.$/;"	f
mkostemp	$NIMLIB/posix/posix.nim	/^  proc mkostemp*(tmpl: cstring, oflags: cint): cint {.importc, header: "<stdlib.h>", sideEffect./;"	f
mkostemps	$NIMLIB/posix/posix.nim	/^  proc mkostemps*(tmpl: cstring, suffixlen: cint, oflags: cint): cint {.importc, header: "<stdli/;"	f
mkstemp	$NIMLIB/posix/posix.nim	/^proc mkstemp*(tmpl: cstring): cint {.importc, header: "<stdlib.h>", sideEffect.}$/;"	f
mkstemp	$NIMLIB/posix/posix_utils.nim	/^proc mkstemp*(prefix: string, suffix=""): (string, File) =$/;"	t
mkstemps	$NIMLIB/posix/posix.nim	/^proc mkstemps*(tmpl: cstring, suffixlen: int): cint {.importc, header: "<stdlib.h>", sideEffect./;"	f
mktime	$NIMLIB/posix/posix.nim	/^proc mktime*(a1: var Tm): Time  {.importc, header: "<time.h>".}$/;"	f
mlabeledtr	$NIMLIB/pure/htmlgen.nim	/^macro mlabeledtr*(e: varargs[untyped]): untyped =$/;"	t
mlock	$NIMLIB/posix/posix.nim	/^proc mlock*(a1: pointer, a2: int): cint {.importc, header: "<sys\/mman.h>".}$/;"	f
mlockall	$NIMLIB/posix/posix.nim	/^proc mlockall*(a1: cint): cint {.importc, header: "<sys\/mman.h>".}$/;"	f
mmap	$NIMLIB/posix/posix.nim	/^proc mmap*(a1: pointer, a2: int, a3, a4, a5: cint, a6: Off): pointer {.$/;"	f
mmultiscripts	$NIMLIB/pure/htmlgen.nim	/^macro mmultiscripts*(e: varargs[untyped]): untyped =$/;"	t
mn	$NIMLIB/pure/htmlgen.nim	/^macro mn*(e: varargs[untyped]): untyped =$/;"	t
mo	$NIMLIB/pure/htmlgen.nim	/^macro mo*(e: varargs[untyped]): untyped =$/;"	t
mod	$NIMLIB/pure/math.nim	/^  func `mod`*(x, y: float64): float64 {.importjs: "(# % #)".} =$/;"	o
mod	$NIMLIB/pure/rationals.nim	/^func `mod`*[T: SomeInteger](x, y: Rational[T]): Rational[T] =$/;"	o
mod	$NIMLIB/std/jsbigints.nim	/^func `mod`*(x, y: JsBigInt): JsBigInt {.importjs: "(# % #)".} =$/;"	o
mod	$NIMLIB/system/arithmetics.nim	/^proc `mod`*(x, y: uint8): uint8 {.magic: "ModU", noSideEffect.}$/;"	o
mode	$NIMLIB/pure/strtabs.nim	/^proc mode*(t: StringTableRef): StringTableMode {.inline.} = t.mode$/;"	t
month	$NIMLIB/pure/times.nim	/^proc month*(dt: DateTime): Month =$/;"	t
monthZero	$NIMLIB/pure/times.nim	/^proc `monthZero=`*(dt: var DateTime, value: int) {.deprecated: "Deprecated since v1.3.1".} =$/;"	o
monthday	$NIMLIB/pure/times.nim	/^proc monthday*(dt: DateTime): MonthdayRange {.inline.} =$/;"	t
monthdayZero	$NIMLIB/pure/times.nim	/^proc `monthdayZero=`*(dt: var DateTime, value: int) {.deprecated: "Deprecated since v1.3.1".} =$/;"	o
months	$NIMLIB/pure/times.nim	/^proc months*(m: int): TimeInterval {.inline.} =$/;"	t
move	$NIMLIB/system.nim	/^proc move*[T](x: var T): T {.magic: "Move", noSideEffect.} =$/;"	t
moveBy	$NIMLIB/js/dom.nim	/^proc moveBy*(w: Window, x, y: int)$/;"	f
moveDir	$NIMLIB/std/dirs.nim	/^proc moveDir*(source, dest: Path) {.inline, tags: [ReadIOEffect, WriteIOEffect].} =$/;"	t
moveDir	$NIMLIB/std/private/osdirs.nim	/^proc moveDir*(source, dest: string) {.tags: [ReadIOEffect, WriteIOEffect], noWeirdTarget.} =$/;"	t
moveFile	$NIMLIB/std/files.nim	/^proc moveFile*(source, dest: Path) {.inline,$/;"	f
moveFile	$NIMLIB/std/private/osfiles.nim	/^proc moveFile*(source, dest: string) {.rtl, extern: "nos$1",$/;"	f
moveFileExW	$NIMLIB/windows/winlean.nim	/^proc moveFileExW*(lpExistingFileName, lpNewFileName: WideCString,$/;"	f
moveFileW	$NIMLIB/windows/winlean.nim	/^proc moveFileW*(lpExistingFileName, lpNewFileName: WideCString): WINBOOL {.$/;"	f
moveMem	$NIMLIB/system/memalloc.nim	/^  proc moveMem*(dest, source: pointer, size: Natural) {.inline, benign,$/;"	f
moveTo	$NIMLIB/js/dom.nim	/^proc moveTo*(w: Window, x, y: int)$/;"	f
mover	$NIMLIB/pure/htmlgen.nim	/^macro mover*(e: varargs[untyped]): untyped =$/;"	t
mpadded	$NIMLIB/pure/htmlgen.nim	/^macro mpadded*(e: varargs[untyped]): untyped =$/;"	t
mpairs	$NIMLIB/pure/collections/critbits.nim	/^iterator mpairs*[T](c: var CritBitTree[T]): tuple[key: string, val: var T] =$/;"	t
mpairs	$NIMLIB/pure/collections/tables.nim	/^iterator mpairs*[A](t: var CountTable[A]): (A, var int) =$/;"	t
mpairs	$NIMLIB/pure/json.nim	/^iterator mpairs*(node: var JsonNode): tuple[key: string, val: var JsonNode] =$/;"	t
mpairs	$NIMLIB/system/iterators.nim	/^iterator mpairs*[T](a: var seq[T]): tuple[key: int, val: var T] {.inline.} =$/;"	t
mpairsWithPrefix	$NIMLIB/pure/collections/critbits.nim	/^iterator mpairsWithPrefix*[T](c: var CritBitTree[T],$/;"	i
mphantom	$NIMLIB/pure/htmlgen.nim	/^macro mphantom*(e: varargs[untyped]): untyped =$/;"	t
mprotect	$NIMLIB/posix/posix.nim	/^proc mprotect*(a1: pointer, a2: int, a3: cint): cint {.$/;"	f
mq_close	$NIMLIB/posix/posix.nim	/^  proc mq_close*(mqdes: Mqd): cint {.importc, header: "<mqueue.h>".}$/;"	f
mq_getattr	$NIMLIB/posix/posix.nim	/^  proc mq_getattr*(mqdes: Mqd, attribute: ptr MqAttr): cint {.$/;"	f
mq_notify	$NIMLIB/posix/posix.nim	/^  proc mq_notify*(mqdes: Mqd, event: ptr SigEvent): cint {.$/;"	f
mq_open	$NIMLIB/posix/posix.nim	/^  proc mq_open*(name: cstring, flags: cint): Mqd {.$/;"	f
mq_receive	$NIMLIB/posix/posix.nim	/^  proc mq_receive*($/;"	f
mq_send	$NIMLIB/posix/posix.nim	/^  proc mq_send*($/;"	f
mq_setattr	$NIMLIB/posix/posix.nim	/^  proc mq_setattr*(mqdes: Mqd, newAttribute, oldAttribute: ptr MqAttr): cint {.$/;"	f
mq_timedreceive	$NIMLIB/posix/posix.nim	/^  proc mq_timedreceive*($/;"	f
mq_timedsend	$NIMLIB/posix/posix.nim	/^  proc mq_timedsend*($/;"	f
mq_unlink	$NIMLIB/posix/posix.nim	/^  proc mq_unlink*(mqdes: cstring): cint {.importc, header: "<mqueue.h>".}$/;"	f
mroot	$NIMLIB/pure/htmlgen.nim	/^macro mroot*(e: varargs[untyped]): untyped =$/;"	t
mrow	$NIMLIB/pure/htmlgen.nim	/^macro mrow*(e: varargs[untyped]): untyped =$/;"	t
ms	$NIMLIB/pure/htmlgen.nim	/^macro ms*(e: varargs[untyped]): untyped =$/;"	t
msg	$NIMLIB/system.nim	/^    msg* {.exportc: "message".}: string ## The exception's message. Not$/;"	t
mspace	$NIMLIB/pure/htmlgen.nim	/^macro mspace*(e: varargs[untyped]): untyped =$/;"	t
msqrt	$NIMLIB/pure/htmlgen.nim	/^macro msqrt*(e: varargs[untyped]): untyped =$/;"	t
mstyle	$NIMLIB/pure/htmlgen.nim	/^macro mstyle*(e: varargs[untyped]): untyped =$/;"	t
msub	$NIMLIB/pure/htmlgen.nim	/^macro msub*(e: varargs[untyped]): untyped =$/;"	t
msubsup	$NIMLIB/pure/htmlgen.nim	/^macro msubsup*(e: varargs[untyped]): untyped =$/;"	t
msup	$NIMLIB/pure/htmlgen.nim	/^macro msup*(e: varargs[untyped]): untyped =$/;"	t
msync	$NIMLIB/posix/posix.nim	/^proc msync*(a1: pointer, a2: int, a3: cint): cint {.importc, header: "<sys\/mman.h>".}$/;"	f
mtable	$NIMLIB/pure/htmlgen.nim	/^macro mtable*(e: varargs[untyped]): untyped =$/;"	t
mtd	$NIMLIB/pure/htmlgen.nim	/^macro mtd*(e: varargs[untyped]): untyped =$/;"	t
mtext	$NIMLIB/pure/htmlgen.nim	/^macro mtext*(e: varargs[untyped]): untyped =$/;"	t
mul128	$NIMLIB/std/private/dragonbox.nim	/^  proc mul128*(x: uint64; y: uint64): uint64x2 {.inline.} =$/;"	t
mulParity	$NIMLIB/std/private/dragonbox.nim	/^proc mulParity*(twoF: uint64; pow10: uint64x2; betaMinus1: int32): bool {.inline.} =$/;"	t
mulShift	$NIMLIB/std/private/dragonbox.nim	/^proc mulShift*(x: uint64; y: uint64x2): uint64 {.inline.} =$/;"	t
multiReplace	$NIMLIB/impure/re.nim	/^proc multiReplace*(s: string, subs: openArray[$/;"	f
multiReplace	$NIMLIB/pure/strutils.nim	/^func multiReplace*(s: string, replacements: varargs[(string, string)]): string =$/;"	t
multipleOfPow2	$NIMLIB/std/private/dragonbox.nim	/^proc multipleOfPow2*(value: uint64; e2: int32): bool {.inline.} =$/;"	t
multipleOfPow5	$NIMLIB/std/private/dragonbox.nim	/^proc multipleOfPow5*(value: uint64; e5: int32): bool {.inline.} =$/;"	t
multisync	$NIMLIB/pure/asyncmacro.nim	/^macro multisync*(prc: untyped): untyped =$/;"	t
munder	$NIMLIB/pure/htmlgen.nim	/^macro munder*(e: varargs[untyped]): untyped =$/;"	t
munderover	$NIMLIB/pure/htmlgen.nim	/^macro munderover*(e: varargs[untyped]): untyped =$/;"	t
munlock	$NIMLIB/posix/posix.nim	/^proc munlock*(a1: pointer, a2: int): cint {.importc, header: "<sys\/mman.h>".}$/;"	f
munlockall	$NIMLIB/posix/posix.nim	/^proc munlockall*(): cint {.importc, header: "<sys\/mman.h>".}$/;"	f
munmap	$NIMLIB/posix/posix.nim	/^proc munmap*(a1: pointer, a2: int): cint {.importc, header: "<sys\/mman.h>".}$/;"	f
mvDir	$NIMLIB/system/nimscript.nim	/^proc mvDir*(`from`, to: string) {.raises: [OSError].} =$/;"	t
mvFile	$NIMLIB/system/nimscript.nim	/^proc mvFile*(`from`, to: string) {.raises: [OSError].} =$/;"	t
mvalues	$NIMLIB/pure/collections/critbits.nim	/^iterator mvalues*[T](c: var CritBitTree[T]): var T =$/;"	t
mvalues	$NIMLIB/pure/collections/tables.nim	/^iterator mvalues*[A](t: var CountTable[A]): var int =$/;"	t
mvaluesWithPrefix	$NIMLIB/pure/collections/critbits.nim	/^iterator mvaluesWithPrefix*[T](c: var CritBitTree[T], prefix: string): var T =$/;"	t
name	$NIMLIB/core/macros.nim	/^proc name*(someProc: NimNode): NimNode =$/;"	t
name	$NIMLIB/js/dom.nim	/^  proc name*(ex: DomException): cstring  {.importcpp: "#.name", nodecl.}$/;"	f
name	$NIMLIB/posix/inotify.nim	/^    name* {.importc: "name".}: char                    ## Name.$/;"	t
name	$NIMLIB/pure/pegs.nim	/^func name*(nt: NonTerminal): string = nt.name$/;"	t
name	$NIMLIB/pure/times.nim	/^proc name*(zone: Timezone): string =$/;"	t
name	$NIMLIB/pure/typetraits.nim	/^proc name*(t: typedesc): string {.magic: "TypeTrait".} =$/;"	t
nameToCodePage	$NIMLIB/pure/encodings.nim	/^  proc nameToCodePage*(name: string): CodePage =$/;"	t
nanosecond	$NIMLIB/pure/times.nim	/^proc nanosecond*(time: Time): NanosecondRange =$/;"	t
nanoseconds	$NIMLIB/pure/times.nim	/^proc nanoseconds*(nanos: int): TimeInterval {.inline.} =$/;"	t
nanosleep	$NIMLIB/posix/posix.nim	/^proc nanosleep*(a1, a2: var Timespec): cint {.importc, header: "<time.h>", sideEffect.}$/;"	f
nativeToUnixPath	$NIMLIB/std/private/globs.nim	/^proc nativeToUnixPath*(path: string): string =$/;"	t
natural	$NIMLIB/pure/pegs.nim	/^template natural*: Peg =$/;"	t
nav	$NIMLIB/pure/htmlgen.nim	/^macro nav*(e: varargs[untyped]): untyped =$/;"	t
navigator	$NIMLIB/js/dom.nim	/^  navigator* {.importc, nodecl.}: Navigator$/;"	t
nestList	$NIMLIB/core/macros.nim	/^proc nestList*(op: NimNode; pack: NimNode; init: NimNode): NimNode =$/;"	t
new	$NIMLIB/system.nim	/^proc new*[T](a: var ref T, finalizer: proc (x: ref T) {.nimcall.}) {.$/;"	f
newAssignment	$NIMLIB/core/macros.nim	/^proc newAssignment*(lhs, rhs: NimNode): NimNode =$/;"	t
newAsyncEvent	$NIMLIB/pure/asyncdispatch.nim	/^  proc newAsyncEvent*(): AsyncEvent =$/;"	t
newAsyncFile	$NIMLIB/pure/asyncfile.nim	/^proc newAsyncFile*(fd: AsyncFD): AsyncFile =$/;"	t
newAsyncHttpClient	$NIMLIB/pure/httpclient.nim	/^proc newAsyncHttpClient*(userAgent = defUserAgent, maxRedirects = 5,$/;"	t
newAsyncHttpServer	$NIMLIB/pure/asynchttpserver.nim	/^proc newAsyncHttpServer*(reuseAddr = true, reusePort = false,$/;"	t
newAsyncSocket	$NIMLIB/pure/asyncnet.nim	/^proc newAsyncSocket*(fd: AsyncFD, domain: Domain = AF_INET,$/;"	t
newBlockStmt	$NIMLIB/core/macros.nim	/^proc newBlockStmt*(label, body: NimNode): NimNode =$/;"	t
newCData	$NIMLIB/pure/xmltree.nim	/^proc newCData*(cdata: sink string): XmlNode =$/;"	t
newCall	$NIMLIB/core/macros.nim	/^proc newCall*(theProc: string,$/;"	f
newColonExpr	$NIMLIB/core/macros.nim	/^proc newColonExpr*(a, b: NimNode): NimNode =$/;"	t
newComment	$NIMLIB/pure/xmltree.nim	/^proc newComment*(comment: sink string): XmlNode =$/;"	t
newCommentStmtNode	$NIMLIB/core/macros.nim	/^proc newCommentStmtNode*(s: string): NimNode {.noSideEffect.} =$/;"	t
newConfig	$NIMLIB/pure/parsecfg.nim	/^proc newConfig*(): Config =$/;"	t
newConsoleLogger	$NIMLIB/pure/logging.nim	/^proc newConsoleLogger*(levelThreshold = lvlAll, fmtStr = defaultFmtStr,$/;"	t
newConsoleOutputFormatter	$NIMLIB/pure/unittest.nim	/^proc newConsoleOutputFormatter*(outputLevel: OutputLevel = outputLevelDefault,$/;"	t
newConstStmt	$NIMLIB/core/macros.nim	/^proc newConstStmt*(name, value: NimNode): NimNode =$/;"	t
newContext	$NIMLIB/pure/net.nim	/^  proc newContext*(protVersion = protSSLv23, verifyMode = CVerifyPeer,$/;"	t
newCountTable	$NIMLIB/pure/collections/tables.nim	/^proc newCountTable*[A](keys: openArray[A]): CountTableRef[A] =$/;"	t
newCustom	$NIMLIB/pure/asyncdispatch.nim	/^  proc newCustom*(): CustomRef =$/;"	t
newDate	$NIMLIB/js/jscore.nim	/^proc newDate*(year, month, day, hours, minutes,$/;"	f
newDispatcher	$NIMLIB/pure/asyncdispatch.nim	/^  proc newDispatcher*(): owned(PDispatcher) =$/;"	t
newDomException	$NIMLIB/js/dom.nim	/^  proc newDomException*(): DomException {.importcpp: "new DomException()", constructor.}$/;"	f
newDotExpr	$NIMLIB/core/macros.nim	/^proc newDotExpr*(a, b: NimNode): NimNode =$/;"	t
newDoublyLinkedNode	$NIMLIB/pure/collections/lists.nim	/^proc newDoublyLinkedNode*[T](value: T): DoublyLinkedNode[T] =$/;"	t
newElement	$NIMLIB/pure/xmltree.nim	/^proc newElement*(tag: sink string): XmlNode =$/;"	t
newEmptyNode	$NIMLIB/core/macros.nim	/^proc newEmptyNode*(): NimNode {.noSideEffect.} =$/;"	t
newEntity	$NIMLIB/pure/xmltree.nim	/^proc newEntity*(entity: string): XmlNode =$/;"	t
newEnum	$NIMLIB/core/macros.nim	/^proc newEnum*(name: NimNode, fields: openArray[NimNode],$/;"	f
newEvent	$NIMLIB/js/dom.nim	/^proc newEvent*(name: cstring): Event {.importcpp: "new Event(@)", constructor.}$/;"	f
newException	$NIMLIB/system.nim	/^template newException*(exceptn: typedesc, message: string;$/;"	m
newFileHandleStream	$NIMLIB/pure/streams.nim	/^  proc newFileHandleStream*(handle: FileHandle): owned FileHandleStream =$/;"	t
newFileLogger	$NIMLIB/pure/logging.nim	/^  proc newFileLogger*(filename = defaultFilename(),$/;"	t
newFileReader	$NIMLIB/js/dom.nim	/^  proc newFileReader*(): FileReader {.importcpp: "new FileReader()", constructor.}$/;"	f
newFileStream	$NIMLIB/pure/streams.nim	/^proc newFileStream*(filename: string, mode: FileMode = fmRead,$/;"	t
newFloatLitNode	$NIMLIB/core/macros.nim	/^proc newFloatLitNode*(f: BiggestFloat): NimNode =$/;"	t
newFuture	$NIMLIB/pure/asyncfutures.nim	/^proc newFuture*[T](fromProc: string = "unspecified"): owned(Future[T]) =$/;"	t
newFutureStream	$NIMLIB/pure/asyncstreams.nim	/^proc newFutureStream*[T](fromProc = "unspecified"): FutureStream[T] =$/;"	t
newFutureVar	$NIMLIB/pure/asyncfutures.nim	/^proc newFutureVar*[T](fromProc = "unspecified"): owned(FutureVar[T]) =$/;"	t
newHttpClient	$NIMLIB/pure/httpclient.nim	/^proc newHttpClient*(userAgent = defUserAgent, maxRedirects = 5,$/;"	t
newHttpHeaders	$NIMLIB/pure/httpcore.nim	/^func newHttpHeaders*(titleCase=false): HttpHeaders =$/;"	t
newIdentDefs	$NIMLIB/core/macros.nim	/^proc newIdentDefs*(name, kind: NimNode;$/;"	f
newIdentNode	$NIMLIB/core/macros.nim	/^proc newIdentNode*(i: string): NimNode {.magic: "StrToIdent", noSideEffect.}$/;"	f
newIfStmt	$NIMLIB/core/macros.nim	/^proc newIfStmt*(branches: varargs[tuple[cond, body: NimNode]]): NimNode =$/;"	t
newIntLitNode	$NIMLIB/core/macros.nim	/^proc newIntLitNode*(i: BiggestInt): NimNode =$/;"	t
newJArray	$NIMLIB/pure/json.nim	/^proc newJArray*(): JsonNode =$/;"	t
newJBool	$NIMLIB/pure/json.nim	/^proc newJBool*(b: bool): JsonNode =$/;"	t
newJFloat	$NIMLIB/pure/json.nim	/^proc newJFloat*(n: float): JsonNode =$/;"	t
newJInt	$NIMLIB/pure/json.nim	/^proc newJInt*(n: BiggestInt): JsonNode =$/;"	t
newJNull	$NIMLIB/pure/json.nim	/^proc newJNull*(): JsonNode =$/;"	t
newJObject	$NIMLIB/pure/json.nim	/^proc newJObject*(): JsonNode =$/;"	t
newJString	$NIMLIB/pure/json.nim	/^proc newJString*(s: string): JsonNode =$/;"	t
newJUnitOutputFormatter	$NIMLIB/pure/unittest.nim	/^proc newJUnitOutputFormatter*(stream: Stream): JUnitOutputFormatter =$/;"	t
newJsAssoc	$NIMLIB/js/jsffi.nim	/^proc newJsAssoc*[K: JsKey, V]: JsAssoc[K, V] {.importjs: "{@}".}$/;"	f
newJsObject	$NIMLIB/js/jsffi.nim	/^proc newJsObject*: JsObject {.importjs: "{@}".}$/;"	f
newLetStmt	$NIMLIB/core/macros.nim	/^proc newLetStmt*(name, value: NimNode): NimNode =$/;"	t
newLine	$NIMLIB/pure/pegs.nim	/^func newLine*: Peg {.inline.} =$/;"	t
newLit	$NIMLIB/core/macros.nim	/^proc newLit*[T](s: set[T]): NimNode$/;"	f
newMemMapFileStream	$NIMLIB/pure/memfiles.nim	/^proc newMemMapFileStream*(filename: string, mode: FileMode = fmRead,$/;"	t
newMersenneTwister	$NIMLIB/deprecated/pure/mersenne.nim	/^proc newMersenneTwister*(seed: uint32): MersenneTwister =$/;"	t
newMimetypes	$NIMLIB/pure/mimetypes.nim	/^func newMimetypes*(): MimeDB =$/;"	t
newMultipartData	$NIMLIB/pure/httpclient.nim	/^proc newMultipartData*: MultipartData {.inline.} =$/;"	t
newNilLit	$NIMLIB/core/macros.nim	/^proc newNilLit*(): NimNode =$/;"	t
newNimNode	$NIMLIB/core/macros.nim	/^proc newNimNode*(kind: NimNodeKind,$/;"	f
newNode	$NIMLIB/pure/parsesql.nim	/^proc newNode*(k: SqlNodeKind, sons: seq[SqlNode]): SqlNode =$/;"	t
newOSError	$NIMLIB/std/oserrors.nim	/^proc newOSError*($/;"	f
newOrderedTable	$NIMLIB/pure/collections/tables.nim	/^proc newOrderedTable*[A, B](pairs: openArray[(A, B)]): OrderedTableRef[A, B] =$/;"	t
newPar	$NIMLIB/core/macros.nim	/^proc newPar*(exprs: varargs[NimNode]): NimNode {.deprecated:$/;"	f
newPipeOutStream	$NIMLIB/pure/streamwrapper.nim	/^proc newPipeOutStream*[T](s: sink (ref T)): owned PipeOutStream[T] =$/;"	t
newProc	$NIMLIB/core/macros.nim	/^proc newProc*(name = newEmptyNode();$/;"	t
newPromise	$NIMLIB/js/asyncjs.nim	/^proc newPromise*[T](handler: proc(resolve: proc(response: T))): Future[T] {.importjs: "(new Prom/;"	f
newProxy	$NIMLIB/pure/httpclient.nim	/^proc newProxy*(url: string; auth = ""): Proxy =$/;"	t
newReadSocketStream	$NIMLIB/std/socketstreams.nim	/^proc newReadSocketStream*(s: Socket): owned ReadSocketStream =$/;"	t
newRollingFileLogger	$NIMLIB/pure/logging.nim	/^  proc newRollingFileLogger*(filename = defaultFilename(),$/;"	t
newRstLeaf	$NIMLIB/packages/docutils/rstast.nim	/^proc newRstLeaf*(s: string): PRstNode =$/;"	t
newRstNode	$NIMLIB/packages/docutils/rstast.nim	/^proc newRstNode*(kind: RstNodeKind, sons: seq[PRstNode] = @[],$/;"	t
newRstSharedState	$NIMLIB/packages/docutils/rst.nim	/^proc newRstSharedState*(options: RstParseOptions,$/;"	f
newSelectEvent	$NIMLIB/pure/ioselects/ioselectors_epoll.nim	/^proc newSelectEvent*(): SelectEvent =$/;"	t
newSelectEvent	$NIMLIB/pure/ioselects/ioselectors_kqueue.nim	/^proc newSelectEvent*(): SelectEvent =$/;"	t
newSelectEvent	$NIMLIB/pure/ioselects/ioselectors_poll.nim	/^proc newSelectEvent*(): SelectEvent =$/;"	t
newSelectEvent	$NIMLIB/pure/ioselects/ioselectors_select.nim	/^  proc newSelectEvent*(): SelectEvent =$/;"	t
newSelectEvent	$NIMLIB/pure/selectors.nim	/^  proc newSelectEvent*(): SelectEvent =$/;"	t
newSelector	$NIMLIB/pure/ioselects/ioselectors_epoll.nim	/^proc newSelector*[T](): Selector[T] =$/;"	t
newSelector	$NIMLIB/pure/ioselects/ioselectors_kqueue.nim	/^proc newSelector*[T](): owned(Selector[T]) =$/;"	t
newSelector	$NIMLIB/pure/ioselects/ioselectors_poll.nim	/^proc newSelector*[T](): Selector[T] =$/;"	t
newSelector	$NIMLIB/pure/ioselects/ioselectors_select.nim	/^proc newSelector*[T](): Selector[T] =$/;"	t
newSelector	$NIMLIB/pure/selectors.nim	/^  proc newSelector*[T](): Selector[T] =$/;"	t
newSeq	$NIMLIB/system.nim	/^proc newSeq*[T](s: var seq[T], len: Natural) {.magic: "NewSeq", noSideEffect.}$/;"	f
newSeqOfCap	$NIMLIB/system.nim	/^proc newSeqOfCap*[T](cap: Natural): seq[T] {.$/;"	f
newSeqUninitialized	$NIMLIB/system.nim	/^  proc newSeqUninitialized*[T: SomeNumber](len: Natural): seq[T] =$/;"	t
newSeqWith	$NIMLIB/pure/collections/sequtils.nim	/^template newSeqWith*(len: int, init: untyped): untyped =$/;"	t
newSha1State	$NIMLIB/std/sha1.nim	/^proc newSha1State*(): Sha1State =$/;"	t
newSignalHandler	$NIMLIB/genode/signals.nim	/^proc newSignalHandler*(ep: Entrypoint; cb: HandlerProc): SignalHandler =$/;"	t
newSinglyLinkedNode	$NIMLIB/pure/collections/lists.nim	/^proc newSinglyLinkedNode*[T](value: T): SinglyLinkedNode[T] =$/;"	t
newSocket	$NIMLIB/pure/net.nim	/^proc newSocket*(fd: SocketHandle, domain: Domain = AF_INET,$/;"	t
newStmtList	$NIMLIB/core/macros.nim	/^proc newStmtList*(stmts: varargs[NimNode]): NimNode =$/;"	t
newStrLitNode	$NIMLIB/core/macros.nim	/^proc newStrLitNode*(s: string): NimNode {.noSideEffect.} =$/;"	t
newString	$NIMLIB/system.nim	/^proc newString*(len: Natural): string {.$/;"	f
newStringOfCap	$NIMLIB/system.nim	/^proc newStringOfCap*(cap: Natural): string {.$/;"	f
newStringStream	$NIMLIB/pure/streams.nim	/^  proc newStringStream*(s: string = ""): owned StringStream {.compileTime.} =$/;"	t
newStringTable	$NIMLIB/pure/strtabs.nim	/^proc newStringTable*(mode: StringTableMode): owned(StringTableRef) {.$/;"	f
newTable	$NIMLIB/pure/collections/tables.nim	/^proc newTable*[A, B](pairs: openArray[(A, B)]): TableRef[A, B] =$/;"	t
newTableFrom	$NIMLIB/pure/collections/tables.nim	/^proc newTableFrom*[A, B, C](collection: A, index: proc(x: B): C): TableRef[C, B] =$/;"	t
newText	$NIMLIB/pure/xmltree.nim	/^proc newText*(text: sink string): XmlNode =$/;"	t
newTimezone	$NIMLIB/pure/times.nim	/^proc newTimezone*($/;"	f
newTree	$NIMLIB/core/macros.nim	/^proc newTree*(kind: NimNodeKind,$/;"	f
newVarStmt	$NIMLIB/core/macros.nim	/^proc newVarStmt*(name, value: NimNode): NimNode =$/;"	t
newVerbatimText	$NIMLIB/pure/xmltree.nim	/^proc newVerbatimText*(text: sink string): XmlNode {.since: (1, 3).} =$/;"	t
newWideCString	$NIMLIB/std/widestrs.nim	/^  proc newWideCString*(source: cstring, L: int): WideCStringObj =$/;"	t
newWriteSocketStream	$NIMLIB/std/socketstreams.nim	/^proc newWriteSocketStream*(s: Socket): owned WriteSocketStream =$/;"	t
newXmlTree	$NIMLIB/pure/xmltree.nim	/^proc newXmlTree*(tag: sink string, children: openArray[XmlNode],$/;"	f
newfetchOptions	$NIMLIB/std/jsfetch.nim	/^func newfetchOptions*(metod = HttpGet; body: cstring = nil;$/;"	t
next	$NIMLIB/pure/parsecfg.nim	/^proc next*(c: var CfgParser): CfgEvent {.rtl, extern: "npc$1".} =$/;"	t
next	$NIMLIB/pure/parsejson.nim	/^proc next*(my: var JsonParser) =$/;"	t
next	$NIMLIB/pure/parseopt.nim	/^proc next*(p: var OptParser) {.rtl, extern: "npo$1".} =$/;"	t
next	$NIMLIB/pure/parsexml.nim	/^proc next*(my: var XmlParser) =$/;"	t
next	$NIMLIB/pure/pathnorm.nim	/^proc next*(it: var PathIter; x: string): (int, int) =$/;"	t
next	$NIMLIB/pure/random.nim	/^proc next*(r: var Rand): uint64 =$/;"	t
nextPermutation	$NIMLIB/pure/algorithm.nim	/^proc nextPermutation*[T](x: var openArray[T]): bool {.discardable.} =$/;"	t
nextPowerOfTwo	$NIMLIB/pure/math.nim	/^func nextPowerOfTwo*(x: int): int =$/;"	t
nextSplitPoint	$NIMLIB/packages/docutils/rstgen.nim	/^proc nextSplitPoint*(s: string, start: int): int =$/;"	t
nftw	$NIMLIB/posix/posix.nim	/^  proc nftw*(a1: cstring,$/;"	f
nice	$NIMLIB/posix/posix.nim	/^proc nice*(a1: cint): cint {.importc, header: "<unistd.h>".}$/;"	f
nimCStrLen	$NIMLIB/system/memory.nim	/^proc nimCStrLen*(a: cstring): int {.compilerproc, nonReloadable, inline.} =$/;"	t
nimCmpMem	$NIMLIB/system/memory.nim	/^proc nimCmpMem*(a, b: pointer, size: Natural): cint {.compilerproc, nonReloadable, inline.} =$/;"	t
nimCopyMem	$NIMLIB/system/memory.nim	/^proc nimCopyMem*(dest, source: pointer, size: Natural) {.nonReloadable, compilerproc, inline.} =$/;"	t
nimCoroutines	$NIMLIB/system/coro_detection.nim	/^  const nimCoroutines* = true$/;"	t
nimGC_setStackBottom	$NIMLIB/pure/coro.nim	/^  proc nimGC_setStackBottom*(theStackBottom: pointer) = discard$/;"	t
nimGC_setStackBottom	$NIMLIB/system/gc_interface.nim	/^  proc nimGC_setStackBottom*(theStackBottom: pointer) {.compilerRtl, noinline, benign, raises: [/;"	f
nimIdentBackticksNormalize	$NIMLIB/packages/docutils/dochelpers.nim	/^func nimIdentBackticksNormalize*(s: string): string =$/;"	t
nimIdentNormalize	$NIMLIB/pure/strutils.nim	/^func nimIdentNormalize*(s: string): string =$/;"	t
nimMaxDescriptorsFallback	$NIMLIB/pure/asynchttpserver.nim	/^  nimMaxDescriptorsFallback* {.intdefine.} = 16_000 ## fallback value for \\$/;"	t
nimSetMem	$NIMLIB/system/memory.nim	/^proc nimSetMem*(a: pointer, v: cint, size: Natural) {.nonReloadable, inline.} =$/;"	t
nimThreadDestructionHandlers	$NIMLIB/system/threadimpl.nim	/^  nimThreadDestructionHandlers* {.rtlThreadVar.}: seq[proc () {.closure, gcsafe, raises: [].}]$/;"	t
nimThreadProcWrapperBody	$NIMLIB/system/threadimpl.nim	/^template nimThreadProcWrapperBody*(closure: untyped): untyped =$/;"	t
nimZeroMem	$NIMLIB/system/memory.nim	/^proc nimZeroMem*(p: pointer, size: Natural) {.compilerproc, nonReloadable, inline.} =$/;"	t
nimcacheDir	$NIMLIB/system/nimscript.nim	/^proc nimcacheDir*(): string =$/;"	t
nimrtl	$NIMLIB/system/inclrtl.nim	/^  const nimrtl* =$/;"	t
nimvm	$NIMLIB/system/compilation.nim	/^let nimvm* {.magic: "Nimvm", compileTime.}: bool = false$/;"	t
nl_langinfo	$NIMLIB/posix/posix.nim	/^proc nl_langinfo*(a1: Nl_item): cstring {.importc, header: "<langinfo.h>".}$/;"	f
nnkCallKinds	$NIMLIB/core/macros.nim	/^  nnkCallKinds* = {nnkCall, nnkInfix, nnkPrefix, nnkPostfix, nnkCommand,$/;"	t
nnkLiterals	$NIMLIB/core/macros.nim	/^  nnkLiterals* = {nnkCharLit..nnkNilLit}$/;"	t
nnkMutableTy	$NIMLIB/core/macros.nim	/^  nnkMutableTy* {.deprecated.} = nnkOutTy$/;"	t
nnkSharedTy	$NIMLIB/core/macros.nim	/^  nnkSharedTy* {.deprecated.} = nnkSinkAsgn$/;"	t
noUndefined	$NIMLIB/system/countbits_impl.nim	/^const noUndefined* = defined(noUndefinedBitOpts)$/;"	t
nodeID	$NIMLIB/core/macros.nim	/^proc nodeID*(n: NimNode): int {.magic: "NodeId".}$/;"	f
nodes	$NIMLIB/pure/collections/lists.nim	/^iterator nodes*[T](L: SomeLinkedRing[T]): SomeLinkedNode[T] =$/;"	t
nonAtomicType	$NIMLIB/pure/concurrency/atomics.nim	/^  template nonAtomicType*(T: typedesc[Trivial]): untyped =$/;"	t
none	$NIMLIB/pure/options.nim	/^proc none*[T]: Option[T] {.inline.} =$/;"	t
normalize	$NIMLIB/js/dom.nim	/^proc normalize*(n: Node)$/;"	f
normalize	$NIMLIB/pure/strutils.nim	/^func normalize*(s: string): string {.rtl, extern: "nsuNormalize".} =$/;"	t
normalizeExe	$NIMLIB/std/paths.nim	/^proc normalizeExe*(file: var Path) {.borrow.}$/;"	f
normalizeExe	$NIMLIB/std/private/ospaths2.nim	/^proc normalizeExe*(file: var string) {.since: (1, 3, 5).} =$/;"	t
normalizePath	$NIMLIB/pure/pathnorm.nim	/^proc normalizePath*(path: string; dirSep = DirSep): string =$/;"	t
normalizePath	$NIMLIB/std/paths.nim	/^proc normalizePath*(path: var Path) {.borrow.}$/;"	f
normalizePath	$NIMLIB/std/private/ospaths2.nim	/^proc normalizePath*(path: var string) {.rtl, extern: "nos$1", tags: [].} =$/;"	t
normalizePathEnd	$NIMLIB/std/paths.nim	/^proc normalizePathEnd*(path: var Path, trailingSep = false) {.borrow.}$/;"	t
normalizePathEnd	$NIMLIB/std/private/ospaths2.nim	/^proc normalizePathEnd*(path: var string, trailingSep = false) =$/;"	t
normalizedPath	$NIMLIB/std/private/ospaths2.nim	/^proc normalizedPath*(path: string): string {.rtl, extern: "nos$1", tags: [].} =$/;"	t
noscript	$NIMLIB/pure/htmlgen.nim	/^macro noscript*(e: varargs[untyped]): untyped =$/;"	t
not	$NIMLIB/js/jsffi.nim	/^proc `not`*(x:    JsObject): JsObject {.importjs: "(!#)".}$/;"	o
not	$NIMLIB/system.nim	/^proc `not`*(a: typedesc): typedesc {.magic: "TypeTrait", noSideEffect.}$/;"	o
not	$NIMLIB/system/arithmetics.nim	/^proc `not`*(x: uint8): uint8 {.magic: "BitnotI", noSideEffect.}$/;"	o
not	$NIMLIB/system/basic_types.nim	/^proc `not`*(x: bool): bool {.magic: "Not", noSideEffect.}$/;"	o
notice	$NIMLIB/pure/logging.nim	/^template notice*(args: varargs[string, `$`]) =$/;"	t
notin	$NIMLIB/system.nim	/^template `notin`*(x, y: untyped): untyped {.dirty, callsite.} = not contains(y, x)$/;"	o
now	$NIMLIB/js/dom.nim	/^proc now*(p: Performance): float$/;"	f
now	$NIMLIB/js/jscore.nim	/^proc now*(d: DateLib): int {.importcpp.}$/;"	f
now	$NIMLIB/pure/times.nim	/^proc now*(): DateTime {.tags: [TimeEffect], benign.} =$/;"	t
nt	$NIMLIB/pure/pegs.nim	/^func nt*(p: Peg): NonTerminal = p.nt$/;"	t
ntohl	$NIMLIB/posix/posix.nim	/^proc ntohl*(a1: uint32): uint32 {.importc, header: "<arpa\/inet.h>".}$/;"	f
ntohl	$NIMLIB/pure/nativesockets.nim	/^proc ntohl*(x: uint32): uint32 =$/;"	t
ntohs	$NIMLIB/posix/posix.nim	/^proc ntohs*(a1: uint16): uint16 {.importc, header: "<arpa\/inet.h>".}$/;"	f
ntohs	$NIMLIB/pure/nativesockets.nim	/^proc ntohs*(x: uint16): uint16 =$/;"	t
nxt	$NIMLIB/pure/strscans.nim	/^template nxt*(input: string; idx, step: int = 1) = inc(idx, step)$/;"	t
object	$NIMLIB/pure/htmlgen.nim	/^macro `object`*(e: varargs[untyped]): untyped =$/;"	o
obstackPtr	$NIMLIB/system/gc_regions.nim	/^proc obstackPtr*(r: MemRegion): StackPtr =$/;"	t
of	$NIMLIB/system.nim	/^proc `of`*[T, S](x: T, y: typedesc[S]): bool {.magic: "Of", noSideEffect.} =$/;"	o
off	$NIMLIB/system/basic_types.nim	/^  off* = false  ## Alias for `false`.$/;"	t
offsetHeight	$NIMLIB/js/dom.nim	/^proc offsetHeight*(e: Node): int {.importcpp: "#.offsetHeight", nodecl.}$/;"	f
offsetLeft	$NIMLIB/js/dom.nim	/^proc offsetLeft*(e: Node): int {.importcpp: "#.offsetLeft", nodecl.}$/;"	f
offsetOf	$NIMLIB/system.nim	/^template offsetOf*[T](value: T; member: untyped): int =$/;"	t
offsetTop	$NIMLIB/js/dom.nim	/^proc offsetTop*(e: Node): int {.importcpp: "#.offsetTop", nodecl.}$/;"	f
offsetWidth	$NIMLIB/js/dom.nim	/^proc offsetWidth*(e: Node): int {.importcpp: "#.offsetWidth", nodecl.}$/;"	f
ol	$NIMLIB/pure/htmlgen.nim	/^macro ol*(e: varargs[untyped]): untyped =$/;"	t
old	$NIMLIB/std/logic.nim	/^proc old*[T](x: T): T {.magic: "Old".}$/;"	f
on	$NIMLIB/system/basic_types.nim	/^  on* = true    ## Alias for `true`.$/;"	t
onFailedAssert	$NIMLIB/std/assertions.nim	/^template onFailedAssert*(msg, code: untyped): untyped {.dirty.} =$/;"	t
onSignal	$NIMLIB/posix/posix.nim	/^template onSignal*(signals: varargs[cint], body: untyped) =$/;"	t
onThreadDestruction	$NIMLIB/system/threadimpl.nim	/^proc onThreadDestruction*(handler: proc () {.closure, gcsafe, raises: [].}) =$/;"	t
once	$NIMLIB/system.nim	/^template once*(body: untyped): untyped =$/;"	t
open	$NIMLIB/js/dom.nim	/^proc open*(w: Window, uri, windowname: cstring,$/;"	f
open	$NIMLIB/posix/posix.nim	/^proc open*(a1: cstring, a2: cint, mode: Mode | cint = 0.Mode): cint {.inline.} =$/;"	t
open	$NIMLIB/pure/encodings.nim	/^proc open*(destEncoding = "UTF-8", srcEncoding = "CP1252"): EncodingConverter =$/;"	t
open	$NIMLIB/pure/lexbase.nim	/^proc open*(L: var BaseLexer, input: Stream, bufLen: int = 8192;$/;"	t
open	$NIMLIB/pure/memfiles.nim	/^proc open*(filename: string, mode: FileMode = fmRead,$/;"	t
open	$NIMLIB/pure/parsecfg.nim	/^proc open*(c: var CfgParser, input: Stream, filename: string,$/;"	f
open	$NIMLIB/pure/parsecsv.nim	/^proc open*(self: var CsvParser, input: Stream, filename: string,$/;"	f
open	$NIMLIB/pure/parsejson.nim	/^proc open*(my: var JsonParser, input: Stream, filename: string;$/;"	f
open	$NIMLIB/pure/parsexml.nim	/^proc open*(my: var XmlParser, input: Stream, filename: string,$/;"	f
open	$NIMLIB/std/syncio.nim	/^proc open*(filename: string,$/;"	f
open	$NIMLIB/system/channels_builtin.nim	/^proc open*[TMsg](c: var Channel[TMsg], maxItems: int = 0) =$/;"	t
openAsync	$NIMLIB/pure/asyncfile.nim	/^proc openAsync*(filename: string, mode = fmRead): AsyncFile =$/;"	t
openCCState	$NIMLIB/wrappers/tinyc.nim	/^proc openCCState*(): PccState {.importc: "tcc_new", cdecl.}$/;"	f
openDefaultBrowser	$NIMLIB/pure/browsers.nim	/^proc openDefaultBrowser*(url: string) =$/;"	t
openFileStream	$NIMLIB/pure/streams.nim	/^proc openFileStream*(filename: string, mode: FileMode = fmRead,$/;"	t
openHandle	$NIMLIB/std/private/oscommon.nim	/^  proc openHandle*(path: string, followSymlink=true, writeAccess=false): Handle =$/;"	t
openProcess	$NIMLIB/windows/winlean.nim	/^proc openProcess*(dwDesiredAccess: DWORD, bInheritHandle: WINBOOL,$/;"	f
opendir	$NIMLIB/posix/posix.nim	/^proc opendir*(a1: cstring): ptr DIR {.importc, header: "<dirent.h>", sideEffect.}$/;"	f
optgroup	$NIMLIB/pure/htmlgen.nim	/^macro optgroup*(e: varargs[untyped]): untyped =$/;"	t
option	$NIMLIB/pure/htmlgen.nim	/^macro option*(e: varargs[untyped]): untyped =$/;"	t
option	$NIMLIB/pure/options.nim	/^proc option*[T](val: sink T): Option[T] {.inline.} =$/;"	t
or	$NIMLIB/core/macros.nim	/^template `or`*(x, y: NimNode): NimNode =$/;"	o
or	$NIMLIB/js/jsffi.nim	/^proc `or`*(x, y: JsObject): JsObject {.importjs: "(# || #)".}$/;"	o
or	$NIMLIB/pure/asyncfutures.nim	/^proc `or`*[T, Y](fut1: Future[T], fut2: Future[Y]): Future[void] =$/;"	o
or	$NIMLIB/std/jsbigints.nim	/^func `or`*(x, y: JsBigInt): JsBigInt {.importjs: "(# | #)".} =$/;"	o
or	$NIMLIB/system.nim	/^proc `or`*(a, b: typedesc): typedesc {.magic: "TypeTrait", noSideEffect.}$/;"	o
or	$NIMLIB/system/arithmetics.nim	/^proc `or`*(x, y: uint8): uint8 {.magic: "BitorI", noSideEffect.}$/;"	o
or	$NIMLIB/system/basic_types.nim	/^proc `or`*(x, y: bool): bool {.magic: "Or", noSideEffect.}$/;"	o
ord	$NIMLIB/system.nim	/^func ord*[T: Ordinal|enum](x: T): int {.magic: "Ord".} =$/;"	t
osErrorMsg	$NIMLIB/std/oserrors.nim	/^proc osErrorMsg*(errorCode: OSErrorCode): string =$/;"	t
osInvalidSocket	$NIMLIB/pure/nativesockets.nim	/^    osInvalidSocket* = winlean.INVALID_SOCKET$/;"	t
osLastError	$NIMLIB/std/oserrors.nim	/^proc osLastError*(): OSErrorCode {.sideEffect.} =$/;"	t
osOpenCmd	$NIMLIB/pure/browsers.nim	/^const osOpenCmd* =$/;"	t
osReleaseFile	$NIMLIB/posix/posix_utils.nim	/^proc osReleaseFile*(): Config {.since: (1, 5).} =$/;"	t
outParamsAt	$NIMLIB/std/outparams.nim	/^macro outParamsAt*(positions: static openArray[int]; n: untyped): untyped =$/;"	t
output	$NIMLIB/pure/htmlgen.nim	/^macro output*(e: varargs[untyped]): untyped =$/;"	t
outputFile	$NIMLIB/wrappers/tinyc.nim	/^proc outputFile*(s: PccState, filename: cstring): cint {.cdecl,$/;"	f
outputHandle	$NIMLIB/pure/osproc.nim	/^proc outputHandle*(p: Process): FileHandle {.rtl, extern: "nosp$1",$/;"	f
outputStream	$NIMLIB/pure/osproc.nim	/^proc outputStream*(p: Process): Stream {.rtl, extern: "nosp$1", raises: [IOError, OSError], tags/;"	f
owned	$NIMLIB/system.nim	/^  template owned*(t: typedesc): typedesc = t$/;"	t
owner	$NIMLIB/core/macros.nim	/^proc owner*(sym: NimNode): NimNode {.magic: "SymOwner", noSideEffect.}$/;"	f
packageName	$NIMLIB/system/nimscript.nim	/^    packageName* = ""    ## Nimble support: Set this to the package name. It$/;"	t
pad	$NIMLIB/pure/ioselects/ioselectors_epoll.nim	/^      pad* {.importc: "__pad".}: array[0..47, uint8]$/;"	t
pairs	$NIMLIB/core/macrocache.nim	/^iterator pairs*(t: CacheTable): (string, NimNode) =$/;"	t
pairs	$NIMLIB/core/macros.nim	/^iterator pairs*(n: NimNode): (int, NimNode) {.inline.} =$/;"	t
pairs	$NIMLIB/js/jsffi.nim	/^iterator pairs*[K: JsKey, V](assoc: JsAssoc[K, V]): (K,V) =$/;"	t
pairs	$NIMLIB/pure/collections/critbits.nim	/^iterator pairs*[T](c: CritBitTree[T]): tuple[key: string, val: T] =$/;"	t
pairs	$NIMLIB/pure/collections/deques.nim	/^iterator pairs*[T](deq: Deque[T]): tuple[key: int, val: T] =$/;"	t
pairs	$NIMLIB/pure/collections/sets.nim	/^iterator pairs*[A](s: OrderedSet[A]): tuple[a: int, b: A] =$/;"	t
pairs	$NIMLIB/pure/collections/tables.nim	/^iterator pairs*[A](t: CountTable[A]): (A, int) =$/;"	t
pairs	$NIMLIB/pure/httpcore.nim	/^iterator pairs*(headers: HttpHeaders): tuple[key, value: string] =$/;"	t
pairs	$NIMLIB/pure/json.nim	/^iterator pairs*(node: JsonNode): tuple[key: string, val: JsonNode] =$/;"	t
pairs	$NIMLIB/pure/pegs.nim	/^iterator pairs*(p: Peg): (int, Peg) {.inline.} =$/;"	t
pairs	$NIMLIB/pure/strtabs.nim	/^iterator pairs*(t: StringTableRef): tuple[key, value: string] =$/;"	t
pairs	$NIMLIB/system/iterators.nim	/^iterator pairs*[T](a: seq[T]): tuple[key: int, val: T] {.inline.} =$/;"	t
pairsWithPrefix	$NIMLIB/pure/collections/critbits.nim	/^iterator pairsWithPrefix*[T](c: CritBitTree[T],$/;"	i
parallel	$NIMLIB/pure/concurrency/threadpool.nim	/^proc parallel*(body: untyped) {.magic: "Parallel".}$/;"	f
param	$NIMLIB/pure/htmlgen.nim	/^macro param*(e: varargs[untyped]): untyped =$/;"	t
paramCount	$NIMLIB/std/cmdline.nim	/^  proc paramCount*(): int {.tags: [ReadIOEffect].} =$/;"	t
paramCount	$NIMLIB/system/nimscript.nim	/^proc paramCount*(): int =$/;"	t
paramStr	$NIMLIB/std/cmdline.nim	/^  proc paramStr*(i: int): string {.tags: [ReadIOEffect].} =$/;"	t
paramStr	$NIMLIB/system/nimscript.nim	/^proc paramStr*(i: int): string =$/;"	t
params	$NIMLIB/core/macros.nim	/^proc params*(someProc: NimNode): NimNode =$/;"	t
parentDir	$NIMLIB/std/paths.nim	/^func parentDir*(path: Path): Path {.inline.} =$/;"	t
parentDir	$NIMLIB/std/private/ospaths2.nim	/^proc parentDir*(path: string): string {.$/;"	f
parentDirs	$NIMLIB/std/paths.nim	/^iterator parentDirs*(path: Path, fromRoot=false, inclusive=true): Path =$/;"	t
parentDirs	$NIMLIB/std/private/ospaths2.nim	/^iterator parentDirs*(path: string, fromRoot=false, inclusive=true): string =$/;"	t
parityBits	$NIMLIB/pure/bitops.nim	/^func parityBits*(x: SomeInteger): int {.inline.} =$/;"	t
parse	$NIMLIB/js/jscore.nim	/^proc parse*(l: JsonLib, s: cstring): JsRoot {.importcpp.}$/;"	f
parse	$NIMLIB/pure/times.nim	/^proc parse*(input: string, f: static[string], zone: Timezone = local(),$/;"	t
parseBiggestFloat	$NIMLIB/pure/parseutils.nim	/^proc parseBiggestFloat*(s: string, number: var BiggestFloat, start = 0): int {.noSideEffect.} =$/;"	t
parseBiggestInt	$NIMLIB/pure/parseutils.nim	/^proc parseBiggestInt*(s: string, number: var BiggestInt, start = 0): int {.noSideEffect, raises:/;"	t
parseBiggestUInt	$NIMLIB/pure/parseutils.nim	/^proc parseBiggestUInt*(s: string, number: var BiggestUInt, start = 0): int {.noSideEffect, raise/;"	t
parseBin	$NIMLIB/pure/parseutils.nim	/^proc parseBin*[T: SomeInteger](s: string, number: var T, start = 0,$/;"	t
parseBinInt	$NIMLIB/pure/strutils.nim	/^func parseBinInt*(s: string): int {.rtl, extern: "nsuParseBinInt".} =$/;"	t
parseBool	$NIMLIB/pure/strutils.nim	/^func parseBool*(s: string): bool =$/;"	t
parseChar	$NIMLIB/pure/parseutils.nim	/^proc parseChar*(s: string, c: var char, start = 0): int =$/;"	t
parseCmdLine	$NIMLIB/std/cmdline.nim	/^proc parseCmdLine*(c: string): seq[string] {.$/;"	f
parseColor	$NIMLIB/pure/colors.nim	/^proc parseColor*(name: string): Color =$/;"	t
parseCookies	$NIMLIB/pure/cookies.nim	/^proc parseCookies*(s: string): StringTableRef =$/;"	t
parseEnum	$NIMLIB/pure/strutils.nim	/^func parseEnum*[T: enum](s: string, default: T): T =$/;"	t
parseEscapedUTF16	$NIMLIB/pure/parsejson.nim	/^proc parseEscapedUTF16*(buf: cstring, pos: var int): int =$/;"	t
parseExpr	$NIMLIB/core/macros.nim	/^proc parseExpr*(s: string; filename: string = ""): NimNode {.noSideEffect.} =$/;"	t
parseFile	$NIMLIB/pure/json.nim	/^  proc parseFile*(filename: string): JsonNode =$/;"	t
parseFloat	$NIMLIB/pure/parseutils.nim	/^proc parseFloat*(s: string, number: var float, start = 0): int {.noSideEffect.} =$/;"	t
parseFloat	$NIMLIB/pure/strutils.nim	/^func parseFloat*(s: string): float {.rtl, extern: "nsuParseFloat".} =$/;"	t
parseHeader	$NIMLIB/pure/httpcore.nim	/^func parseHeader*(line: string): tuple[key: string, value: seq[string]] =$/;"	t
parseHex	$NIMLIB/pure/parseutils.nim	/^proc parseHex*[T: SomeInteger](s: string, number: var T, start = 0,$/;"	t
parseHexInt	$NIMLIB/pure/strutils.nim	/^func parseHexInt*(s: string): int {.rtl, extern: "nsuParseHexInt".} =$/;"	t
parseHexStr	$NIMLIB/pure/strutils.nim	/^func parseHexStr*(s: string): string {.rtl, extern: "nsuParseHexStr".} =$/;"	t
parseHtml	$NIMLIB/pure/htmlparser.nim	/^proc parseHtml*(s: Stream, filename: string,$/;"	f
parseIdent	$NIMLIB/pure/parseutils.nim	/^proc parseIdent*(s: string, start = 0): string =$/;"	t
parseIdxFile	$NIMLIB/packages/docutils/rstidx.nim	/^proc parseIdxFile*(path: string):$/;"	f
parseInt	$NIMLIB/pure/parseutils.nim	/^proc parseInt*(s: string, number: var int, start = 0): int {.noSideEffect, raises: [ValueError]./;"	t
parseInt	$NIMLIB/pure/strutils.nim	/^func parseInt*(s: string): int {.rtl, extern: "nsuParseInt".} =$/;"	t
parseIpAddress	$NIMLIB/pure/net.nim	/^proc parseIpAddress*(addressStr: string): IpAddress =$/;"	t
parseIps	$NIMLIB/pure/strscans.nim	/^  iterator parseIps*(soup: string): string =$/;"	t
parseJson	$NIMLIB/pure/json.nim	/^proc parseJson*(s: Stream, filename: string = ""; rawIntegers = false, rawFloats = false): JsonN/;"	t
parseJsonFragments	$NIMLIB/pure/json.nim	/^iterator parseJsonFragments*(s: Stream, filename: string = ""; rawIntegers = false, rawFloats = /;"	t
parseOct	$NIMLIB/pure/parseutils.nim	/^proc parseOct*[T: SomeInteger](s: string, number: var T, start = 0,$/;"	t
parseOctInt	$NIMLIB/pure/strutils.nim	/^func parseOctInt*(s: string): int {.rtl, extern: "nsuParseOctInt".} =$/;"	t
parseOid	$NIMLIB/pure/oids.nim	/^proc parseOid*(str: cstring): Oid =$/;"	t
parsePeg	$NIMLIB/pure/pegs.nim	/^func parsePeg*(pattern: string, filename = "pattern", line = 1, col = 0): Peg =$/;"	t
parseSaturatedNatural	$NIMLIB/pure/parseutils.nim	/^proc parseSaturatedNatural*(s: string, b: var int, start = 0): int {.$/;"	t
parseSecureHash	$NIMLIB/std/sha1.nim	/^proc parseSecureHash*(hash: string): SecureHash =$/;"	t
parseSize	$NIMLIB/pure/parseutils.nim	/^func parseSize*(s: openArray[char], size: var int64, alwaysBin=false): int =$/;"	t
parseSql	$NIMLIB/pure/parsesql.nim	/^proc parseSql*(input: string, filename = ""): SqlNode =$/;"	t
parseStandardFormatSpecifier	$NIMLIB/pure/strformat.nim	/^proc parseStandardFormatSpecifier*(s: string; start = 0;$/;"	t
parseStmt	$NIMLIB/core/macros.nim	/^proc parseStmt*(s: string; filename: string = ""): NimNode {.noSideEffect.} =$/;"	t
parseTableCells	$NIMLIB/std/private/asciitables.nim	/^iterator parseTableCells*(s: string, delim = '\\t'): Cell =$/;"	t
parseTime	$NIMLIB/pure/times.nim	/^proc parseTime*(input: string, f: static[string], zone: Timezone): Time$/;"	f
parseUInt	$NIMLIB/pure/parseutils.nim	/^proc parseUInt*(s: string, number: var uint, start = 0): int {.noSideEffect, raises: [ValueError/;"	t
parseUInt	$NIMLIB/pure/strutils.nim	/^func parseUInt*(s: string): uint {.rtl, extern: "nsuParseUInt".} =$/;"	t
parseUntil	$NIMLIB/pure/parseutils.nim	/^proc parseUntil*(s: string, token: var string, until: string,$/;"	f
parseUri	$NIMLIB/pure/uri.nim	/^func parseUri*(uri: string, result: var Uri) =$/;"	t
parseWhile	$NIMLIB/pure/parseutils.nim	/^proc parseWhile*(s: string, token: var string, validChars: set[char],$/;"	f
parseXml	$NIMLIB/pure/xmlparser.nim	/^proc parseXml*(str: string, options: set[XmlParseOption] = {reportComments}): XmlNode =$/;"	t
patch	$NIMLIB/pure/httpclient.nim	/^proc patch*(client: HttpClient | AsyncHttpClient, url: Uri | string, body = "",$/;"	t
patchContent	$NIMLIB/pure/httpclient.nim	/^proc patchContent*(client: HttpClient | AsyncHttpClient, url: Uri | string, body = "",$/;"	t
patchFile	$NIMLIB/system/nimscript.nim	/^proc patchFile*(package, filename, replacement: string) =$/;"	t
pathconf	$NIMLIB/posix/posix.nim	/^proc pathconf*(a1: cstring, a2: cint): int {.importc, header: "<unistd.h>".}$/;"	f
pattern_to_host_byte_order	$NIMLIB/wrappers/pcre.nim	/^proc pattern_to_host_byte_order*(code: ptr Pcre,$/;"	f
pause	$NIMLIB/posix/posix.nim	/^proc pause*(): cint {.importc, header: "<unistd.h>".}$/;"	f
pclose	$NIMLIB/posix/posix.nim	/^proc pclose*(a: File): cint {.importc, header: "<stdio.h>".}$/;"	f
peek	$NIMLIB/pure/streams.nim	/^proc peek*[T](s: Stream, result: var T) =$/;"	t
peek	$NIMLIB/system/channels_builtin.nim	/^proc peek*[TMsg](c: var Channel[TMsg]): int =$/;"	t
peekBool	$NIMLIB/pure/streams.nim	/^proc peekBool*(s: Stream): bool =$/;"	t
peekChar	$NIMLIB/pure/streams.nim	/^proc peekChar*(s: Stream): char =$/;"	t
peekData	$NIMLIB/pure/streams.nim	/^proc peekData*(s: Stream, buffer: pointer, bufLen: int): int =$/;"	t
peekExitCode	$NIMLIB/pure/osproc.nim	/^proc peekExitCode*(p: Process): int {.rtl, extern: "nosp$1", raises: [OSError], tags: [].}$/;"	f
peekFirst	$NIMLIB/pure/collections/deques.nim	/^proc peekFirst*[T](deq: var Deque[T]): var T {.inline, since: (1, 3).} =$/;"	t
peekFloat32	$NIMLIB/pure/streams.nim	/^proc peekFloat32*(s: Stream): float32 =$/;"	t
peekFloat64	$NIMLIB/pure/streams.nim	/^proc peekFloat64*(s: Stream): float64 =$/;"	t
peekInt16	$NIMLIB/pure/streams.nim	/^proc peekInt16*(s: Stream): int16 =$/;"	t
peekInt32	$NIMLIB/pure/streams.nim	/^proc peekInt32*(s: Stream): int32 =$/;"	t
peekInt64	$NIMLIB/pure/streams.nim	/^proc peekInt64*(s: Stream): int64 =$/;"	t
peekInt8	$NIMLIB/pure/streams.nim	/^proc peekInt8*(s: Stream): int8 =$/;"	t
peekLast	$NIMLIB/pure/collections/deques.nim	/^proc peekLast*[T](deq: var Deque[T]): var T {.inline, since: (1, 3).} =$/;"	t
peekLine	$NIMLIB/pure/streams.nim	/^proc peekLine*(s: Stream, line: var string): bool =$/;"	t
peekNamedPipe	$NIMLIB/windows/winlean.nim	/^proc peekNamedPipe*(hNamedPipe: Handle, lpBuffer: pointer=nil,$/;"	t
peekStr	$NIMLIB/pure/streams.nim	/^proc peekStr*(s: Stream, length: int, str: var string) {.since: (1, 3).} =$/;"	t
peekUint16	$NIMLIB/pure/streams.nim	/^proc peekUint16*(s: Stream): uint16 =$/;"	t
peekUint32	$NIMLIB/pure/streams.nim	/^proc peekUint32*(s: Stream): uint32 =$/;"	t
peekUint64	$NIMLIB/pure/streams.nim	/^proc peekUint64*(s: Stream): uint64 =$/;"	t
peekUint8	$NIMLIB/pure/streams.nim	/^proc peekUint8*(s: Stream): uint8 =$/;"	t
peekableErrorStream	$NIMLIB/pure/osproc.nim	/^proc peekableErrorStream*(p: Process): Stream {.rtl, extern: "nosp$1", tags: [], since: (1, 3).}$/;"	f
peekableOutputStream	$NIMLIB/pure/osproc.nim	/^proc peekableOutputStream*(p: Process): Stream {.rtl, extern: "nosp$1", tags: [], since: (1, 3)./;"	f
peg	$NIMLIB/pure/pegs.nim	/^func peg*(pattern: string): Peg =$/;"	t
pem_password_cb	$NIMLIB/wrappers/openssl.nim	/^  pem_password_cb* = proc(buf: cstring, size, rwflag: cint, userdata: pointer): cint {.cdecl.}$/;"	t
performCodeReload	$NIMLIB/core/hotcodereloading.nim	/^  template performCodeReload*() = discard$/;"	t
phase	$NIMLIB/pure/complex.nim	/^func phase*[T](z: Complex[T]): T =$/;"	t
physicalExponent	$NIMLIB/std/private/dragonbox.nim	/^proc physicalExponent*(this: Double): BitsType {.noSideEffect.} =$/;"	t
physicalSignificand	$NIMLIB/std/private/dragonbox.nim	/^proc physicalSignificand*(this: Double): BitsType {.noSideEffect.} =$/;"	t
piName	$NIMLIB/pure/parsexml.nim	/^template piName*(my: XmlParser): string =$/;"	t
piRest	$NIMLIB/pure/parsexml.nim	/^template piRest*(my: XmlParser): string =$/;"	t
picture	$NIMLIB/pure/htmlgen.nim	/^macro picture*(e: varargs[untyped]): untyped =$/;"	t
pinToCpu	$NIMLIB/std/typedthreads.nim	/^  proc pinToCpu*[Arg](t: var Thread[Arg]; cpu: Natural) =$/;"	t
pinnedSpawn	$NIMLIB/pure/concurrency/threadpool.nim	/^proc pinnedSpawn*(id: ThreadId; call: sink typed) {.magic: "Spawn".} =$/;"	t
pipe	$NIMLIB/posix/posix.nim	/^proc pipe*(a: array[0..1, cint]): cint {.importc, header: "<unistd.h>".}$/;"	f
pipe2	$NIMLIB/posix/linux.nim	/^proc pipe2*(a: array[0..1, cint], flags: cint): cint {.importc, header: "<unistd.h>".}$/;"	f
play	$NIMLIB/js/dom.nim	/^proc play*(e: EmbedElement)$/;"	f
pointer	$NIMLIB/system/basic_types.nim	/^  pointer* {.magic: Pointer.}   ## Built-in pointer type, use the `addr`$/;"	t
pointerBase	$NIMLIB/pure/typetraits.nim	/^template pointerBase*[T](_: typedesc[ptr T | ref T]): typedesc =$/;"	t
polar	$NIMLIB/pure/complex.nim	/^func polar*[T](z: Complex[T]): tuple[r, phi: T] =$/;"	t
poll	$NIMLIB/posix/posix.nim	/^  proc poll*(a1: ptr TPollfd, a2: Tnfds, a3: int): cint {.$/;"	f
poll	$NIMLIB/pure/asyncdispatch.nim	/^proc poll*(timeout = 500) =$/;"	t
pop	$NIMLIB/pure/collections/heapqueue.nim	/^proc pop*[T](heap: var HeapQueue[T]): T =$/;"	t
pop	$NIMLIB/pure/collections/sets.nim	/^proc pop*[A](s: var HashSet[A]): A =$/;"	t
pop	$NIMLIB/pure/collections/tables.nim	/^proc pop*[A](t: var CountTable[A], key: A, val: var int): bool {.since: (1, 1).} =$/;"	t
pop	$NIMLIB/pure/reservedmem.nim	/^proc pop*[T](s: var ReservedMemSeq[T]): T =$/;"	t
pop	$NIMLIB/system.nim	/^proc pop*[T](s: var seq[T]): T {.inline, noSideEffect.} =$/;"	t
popFirst	$NIMLIB/pure/collections/deques.nim	/^proc popFirst*[T](deq: var Deque[T]): T {.inline, discardable.} =$/;"	t
popGcFrame	$NIMLIB/system/excpt.nim	/^proc popGcFrame*() {.compilerRtl, inl.} = gcFramePtr = gcFramePtr.prev$/;"	t
popLast	$NIMLIB/pure/collections/deques.nim	/^proc popLast*[T](deq: var Deque[T]): T {.inline, discardable.} =$/;"	t
popcount	$NIMLIB/pure/bitops.nim	/^func popcount*(x: SomeInteger): int {.inline.} =$/;"	t
popen	$NIMLIB/posix/posix.nim	/^proc popen*(a1, a2: cstring): File {.importc, header: "<stdio.h>".}$/;"	f
portal	$NIMLIB/pure/htmlgen.nim	/^macro portal*(e: varargs[untyped]): untyped =$/;"	t
posix_fadvise	$NIMLIB/posix/posix.nim	/^proc posix_fadvise*(a1: cint, a2, a3: Off, a4: cint): cint {.$/;"	f
posix_fallocate	$NIMLIB/posix/posix.nim	/^  proc posix_fallocate*(a1: cint, a2, a3: Off): cint {.$/;"	f
posix_madvise	$NIMLIB/posix/posix.nim	/^proc posix_madvise*(a1: pointer, a2: int, a3: cint): cint {.$/;"	f
posix_mem_offset	$NIMLIB/posix/posix.nim	/^proc posix_mem_offset*(a1: pointer, a2: int, a3: var Off,$/;"	f
posix_memalign	$NIMLIB/posix/posix.nim	/^  proc posix_memalign*(memptr: pointer, alignment: csize_t, size: csize_t): cint {.importc, head/;"	f
posix_spawn	$NIMLIB/posix/posix.nim	/^  proc posix_spawn*(a1: var Pid, a2: cstring,$/;"	f
posix_spawn_file_actions_addclose	$NIMLIB/posix/posix.nim	/^  proc posix_spawn_file_actions_addclose*(a1: var Tposix_spawn_file_actions,$/;"	f
posix_spawn_file_actions_adddup2	$NIMLIB/posix/posix.nim	/^  proc posix_spawn_file_actions_adddup2*(a1: var Tposix_spawn_file_actions,$/;"	f
posix_spawn_file_actions_addopen	$NIMLIB/posix/posix.nim	/^  proc posix_spawn_file_actions_addopen*(a1: var Tposix_spawn_file_actions,$/;"	f
posix_spawn_file_actions_destroy	$NIMLIB/posix/posix.nim	/^  proc posix_spawn_file_actions_destroy*($/;"	f
posix_spawn_file_actions_init	$NIMLIB/posix/posix.nim	/^  proc posix_spawn_file_actions_init*($/;"	f
posix_spawnattr_destroy	$NIMLIB/posix/posix.nim	/^  proc posix_spawnattr_destroy*(a1: var Tposix_spawnattr): cint {.$/;"	f
posix_spawnattr_getflags	$NIMLIB/posix/posix.nim	/^  proc posix_spawnattr_getflags*(a1: var Tposix_spawnattr,$/;"	f
posix_spawnattr_getpgroup	$NIMLIB/posix/posix.nim	/^  proc posix_spawnattr_getpgroup*(a1: var Tposix_spawnattr,$/;"	f
posix_spawnattr_getschedparam	$NIMLIB/posix/posix.nim	/^  proc posix_spawnattr_getschedparam*(a1: var Tposix_spawnattr,$/;"	f
posix_spawnattr_getschedpolicy	$NIMLIB/posix/posix.nim	/^  proc posix_spawnattr_getschedpolicy*(a1: var Tposix_spawnattr,$/;"	f
posix_spawnattr_getsigdefault	$NIMLIB/posix/posix.nim	/^  proc posix_spawnattr_getsigdefault*(a1: var Tposix_spawnattr,$/;"	f
posix_spawnattr_getsigmask	$NIMLIB/posix/posix.nim	/^  proc posix_spawnattr_getsigmask*(a1: var Tposix_spawnattr,$/;"	f
posix_spawnattr_init	$NIMLIB/posix/posix.nim	/^  proc posix_spawnattr_init*(a1: var Tposix_spawnattr): cint {.$/;"	f
posix_spawnattr_setflags	$NIMLIB/posix/posix.nim	/^  proc posix_spawnattr_setflags*(a1: var Tposix_spawnattr, a2: cint): cint {.$/;"	f
posix_spawnattr_setpgroup	$NIMLIB/posix/posix.nim	/^  proc posix_spawnattr_setpgroup*(a1: var Tposix_spawnattr, a2: Pid): cint {.$/;"	f
posix_spawnattr_setschedparam	$NIMLIB/posix/posix.nim	/^  proc posix_spawnattr_setschedparam*(a1: var Tposix_spawnattr,$/;"	f
posix_spawnattr_setschedpolicy	$NIMLIB/posix/posix.nim	/^  proc posix_spawnattr_setschedpolicy*(a1: var Tposix_spawnattr,$/;"	f
posix_spawnattr_setsigdefault	$NIMLIB/posix/posix.nim	/^  proc posix_spawnattr_setsigdefault*(a1: var Tposix_spawnattr,$/;"	f
posix_spawnattr_setsigmask	$NIMLIB/posix/posix.nim	/^  proc posix_spawnattr_setsigmask*(a1: var Tposix_spawnattr,$/;"	f
posix_spawnp	$NIMLIB/posix/posix.nim	/^  proc posix_spawnp*(a1: var Pid, a2: cstring,$/;"	f
posix_typed_mem_get_info	$NIMLIB/posix/posix.nim	/^  proc posix_typed_mem_get_info*(a1: cint,$/;"	f
posix_typed_mem_open	$NIMLIB/posix/posix.nim	/^proc posix_typed_mem_open*(a1: cstring, a2, a3: cint): cint {.$/;"	f
post	$NIMLIB/pure/httpclient.nim	/^proc post*(client: HttpClient | AsyncHttpClient, url: Uri | string, body = "",$/;"	t
postContent	$NIMLIB/pure/httpclient.nim	/^proc postContent*(client: HttpClient | AsyncHttpClient, url: Uri | string, body = "",$/;"	t
postQueuedCompletionStatus	$NIMLIB/windows/winlean.nim	/^proc postQueuedCompletionStatus*(CompletionPort: Handle,$/;"	f
postfix	$NIMLIB/core/macros.nim	/^proc postfix*(node: NimNode; op: string): NimNode =$/;"	t
pow	$NIMLIB/js/jscore.nim	/^proc pow*(m: MathLib, a, b: distinct SomeNumber): float {.importcpp.}$/;"	f
pow	$NIMLIB/pure/complex.nim	/^func pow*[T](x: Complex[T]; y: T): Complex[T] =$/;"	t
pow	$NIMLIB/pure/math.nim	/^  func pow*(x, y: float64): float64 {.importc: "pow", header: "<math.h>".} =$/;"	t
pragma	$NIMLIB/core/macros.nim	/^proc pragma*(someProc: NimNode): NimNode =$/;"	t
pre	$NIMLIB/pure/htmlgen.nim	/^macro pre*(e: varargs[untyped]): untyped =$/;"	t
pread	$NIMLIB/posix/posix.nim	/^proc pread*(a1: cint, a2: pointer, a3: int, a4: Off): int {.$/;"	f
pred	$NIMLIB/system/arithmetics.nim	/^proc pred*[T, V: Ordinal](x: T, y: V = 1): T {.magic: "Pred", noSideEffect.} =$/;"	t
preferSpawn	$NIMLIB/pure/concurrency/threadpool.nim	/^proc preferSpawn*(): bool =$/;"	t
prefix	$NIMLIB/core/macros.nim	/^proc prefix*(node: NimNode; op: string): NimNode =$/;"	t
prepareMutation	$NIMLIB/system.nim	/^  proc prepareMutation*(s: var string) {.inline.} =$/;"	t
prepareMutation	$NIMLIB/system/strs_v2.nim	/^proc prepareMutation*(s: var string) {.inline.} =$/;"	t
preparePass2	$NIMLIB/packages/docutils/rst.nim	/^proc preparePass2*(s: var PRstSharedState, mainNode: PRstNode, importdoc = true) =$/;"	t
prepend	$NIMLIB/pure/collections/chains.nim	/^template prepend*(header, node) =$/;"	t
prepend	$NIMLIB/pure/collections/lists.nim	/^proc prepend*[T](L: var SinglyLinkedRing[T], value: T) =$/;"	t
prependMoved	$NIMLIB/pure/collections/lists.nim	/^proc prependMoved*[T: SomeLinkedList](a, b: var T) {.since: (1, 5, 1).} =$/;"	t
pretty	$NIMLIB/pure/json.nim	/^proc pretty*(node: JsonNode, indent = 2): string =$/;"	t
prettyLink	$NIMLIB/packages/docutils/rstgen.nim	/^proc prettyLink*(file: string): string =$/;"	t
prev	$NIMLIB/pure/collections/lists.nim	/^    prev* {.cursor.}: DoublyLinkedNode[T]$/;"	t
prevPermutation	$NIMLIB/pure/algorithm.nim	/^proc prevPermutation*[T](x: var openArray[T]): bool {.discardable.} =$/;"	t
preventDefault	$NIMLIB/js/dom.nim	/^proc preventDefault*(ev: Event)$/;"	f
print	$NIMLIB/js/dom.nim	/^proc print*(w: Window)$/;"	f
printDecimalDigitsBackwards	$NIMLIB/std/private/dragonbox.nim	/^proc printDecimalDigitsBackwards*(buf: var openArray[char]; pos: int; output64: uint64): int32 {/;"	t
printKeyCodes	$NIMLIB/wrappers/linenoise/linenoise.nim	/^proc printKeyCodes*() {.importc: "linenoisePrintKeyCodes".}$/;"	f
privateAccess	$NIMLIB/std/importutils.nim	/^proc privateAccess*(t: typedesc) {.magic: "PrivateAccess".} =$/;"	t
procCall	$NIMLIB/system.nim	/^proc procCall*(x: untyped) {.magic: "ProcCall", compileTime.} =$/;"	t
procName	$NIMLIB/std/stackframes.nim	/^template procName*(): string =$/;"	t
processID	$NIMLIB/pure/osproc.nim	/^proc processID*(p: Process): int {.rtl, extern: "nosp$1".} =$/;"	t
processedRows	$NIMLIB/pure/parsecsv.nim	/^proc processedRows*(self: var CsvParser): int {.inline.} =$/;"	t
prod	$NIMLIB/pure/math.nim	/^func prod*[T](x: openArray[T]): T =$/;"	t
product	$NIMLIB/pure/algorithm.nim	/^proc product*[T](x: openArray[seq[T]]): seq[seq[T]] =$/;"	t
programResult	$NIMLIB/system.nim	/^  var programResult* {.compilerproc, exportc: "nim_program_result".}: int$/;"	t
progress	$NIMLIB/pure/htmlgen.nim	/^macro progress*(e: varargs[untyped]): untyped =$/;"	t
projectDir	$NIMLIB/system/nimscript.nim	/^proc projectDir*(): string =$/;"	t
projectName	$NIMLIB/system/nimscript.nim	/^proc projectName*(): string =$/;"	t
projectPath	$NIMLIB/system/nimscript.nim	/^proc projectPath*(): string =$/;"	t
prompt	$NIMLIB/js/dom.nim	/^proc prompt*(w: Window, text, default: cstring): cstring$/;"	f
protect	$NIMLIB/system/gc_common.nim	/^proc protect*(x: pointer): ForeignCell =$/;"	t
protect	$NIMLIB/system/mmdisp.nim	/^  proc protect*(x: pointer): ForeignCell = ForeignCell(data: x)$/;"	t
pselect	$NIMLIB/posix/posix.nim	/^proc pselect*(a1: cint, a2, a3, a4: ptr TFdSet, a5: ptr Timespec,$/;"	f
pskIdentityHint	$NIMLIB/pure/net.nim	/^  proc `pskIdentityHint=`*(ctx: SslContext, hint: string) =$/;"	o
pthread_atfork	$NIMLIB/posix/posix.nim	/^proc pthread_atfork*(a1, a2, a3: proc () {.noconv.}): cint {.$/;"	f
pthread_attr_destroy	$NIMLIB/posix/posix.nim	/^proc pthread_attr_destroy*(a1: ptr Pthread_attr): cint {.$/;"	f
pthread_attr_destroy	$NIMLIB/std/private/threadtypes.nim	/^  proc pthread_attr_destroy*(a1: var Pthread_attr): cint {.$/;"	f
pthread_attr_getdetachstate	$NIMLIB/posix/posix.nim	/^proc pthread_attr_getdetachstate*(a1: ptr Pthread_attr, a2: cint): cint {.$/;"	f
pthread_attr_getguardsize	$NIMLIB/posix/posix.nim	/^proc pthread_attr_getguardsize*(a1: ptr Pthread_attr, a2: var cint): cint {.$/;"	f
pthread_attr_getinheritsched	$NIMLIB/posix/posix.nim	/^proc pthread_attr_getinheritsched*(a1: ptr Pthread_attr,$/;"	f
pthread_attr_getschedparam	$NIMLIB/posix/posix.nim	/^proc pthread_attr_getschedparam*(a1: ptr Pthread_attr,$/;"	f
pthread_attr_getschedpolicy	$NIMLIB/posix/posix.nim	/^proc pthread_attr_getschedpolicy*(a1: ptr Pthread_attr,$/;"	f
pthread_attr_getscope	$NIMLIB/posix/posix.nim	/^proc pthread_attr_getscope*(a1: ptr Pthread_attr,$/;"	f
pthread_attr_getstack	$NIMLIB/posix/posix.nim	/^proc pthread_attr_getstack*(a1: ptr Pthread_attr,$/;"	f
pthread_attr_getstackaddr	$NIMLIB/posix/posix.nim	/^proc pthread_attr_getstackaddr*(a1: ptr Pthread_attr,$/;"	f
pthread_attr_getstacksize	$NIMLIB/posix/posix.nim	/^proc pthread_attr_getstacksize*(a1: ptr Pthread_attr,$/;"	f
pthread_attr_init	$NIMLIB/posix/posix.nim	/^proc pthread_attr_init*(a1: ptr Pthread_attr): cint {.$/;"	f
pthread_attr_init	$NIMLIB/std/private/threadtypes.nim	/^  proc pthread_attr_init*(a1: var Pthread_attr): cint {.$/;"	f
pthread_attr_setdetachstate	$NIMLIB/posix/posix.nim	/^proc pthread_attr_setdetachstate*(a1: ptr Pthread_attr, a2: cint): cint {.$/;"	f
pthread_attr_setguardsize	$NIMLIB/posix/posix.nim	/^proc pthread_attr_setguardsize*(a1: ptr Pthread_attr, a2: int): cint {.$/;"	f
pthread_attr_setinheritsched	$NIMLIB/posix/posix.nim	/^proc pthread_attr_setinheritsched*(a1: ptr Pthread_attr, a2: cint): cint {.$/;"	f
pthread_attr_setschedparam	$NIMLIB/posix/posix.nim	/^proc pthread_attr_setschedparam*(a1: ptr Pthread_attr,$/;"	f
pthread_attr_setschedpolicy	$NIMLIB/posix/posix.nim	/^proc pthread_attr_setschedpolicy*(a1: ptr Pthread_attr, a2: cint): cint {.$/;"	f
pthread_attr_setscope	$NIMLIB/posix/posix.nim	/^proc pthread_attr_setscope*(a1: ptr Pthread_attr, a2: cint): cint {.importc,$/;"	f
pthread_attr_setstack	$NIMLIB/posix/posix.nim	/^proc pthread_attr_setstack*(a1: ptr Pthread_attr, a2: pointer, a3: int): cint {.$/;"	f
pthread_attr_setstack	$NIMLIB/std/private/threadtypes.nim	/^  proc pthread_attr_setstack*(a1: ptr Pthread_attr, a2: pointer, a3: int): cint {.$/;"	f
pthread_attr_setstackaddr	$NIMLIB/posix/posix.nim	/^proc pthread_attr_setstackaddr*(a1: ptr Pthread_attr, a2: pointer): cint {.$/;"	f
pthread_attr_setstacksize	$NIMLIB/posix/posix.nim	/^proc pthread_attr_setstacksize*(a1: ptr Pthread_attr, a2: int): cint {.$/;"	f
pthread_attr_setstacksize	$NIMLIB/std/private/threadtypes.nim	/^  proc pthread_attr_setstacksize*(a1: var Pthread_attr, a2: int): cint {.$/;"	f
pthread_barrier_destroy	$NIMLIB/posix/posix.nim	/^proc pthread_barrier_destroy*(a1: ptr Pthread_barrier): cint {.$/;"	f
pthread_barrier_init	$NIMLIB/posix/posix.nim	/^proc pthread_barrier_init*(a1: ptr Pthread_barrier,$/;"	f
pthread_barrier_wait	$NIMLIB/posix/posix.nim	/^proc pthread_barrier_wait*(a1: ptr Pthread_barrier): cint {.$/;"	f
pthread_barrierattr_destroy	$NIMLIB/posix/posix.nim	/^proc pthread_barrierattr_destroy*(a1: ptr Pthread_barrierattr): cint {.$/;"	f
pthread_barrierattr_getpshared	$NIMLIB/posix/posix.nim	/^proc pthread_barrierattr_getpshared*($/;"	f
pthread_barrierattr_init	$NIMLIB/posix/posix.nim	/^proc pthread_barrierattr_init*(a1: ptr Pthread_barrierattr): cint {.$/;"	f
pthread_barrierattr_setpshared	$NIMLIB/posix/posix.nim	/^proc pthread_barrierattr_setpshared*(a1: ptr Pthread_barrierattr,$/;"	f
pthread_cancel	$NIMLIB/posix/posix.nim	/^proc pthread_cancel*(a1: Pthread): cint {.importc, header: "<pthread.h>".}$/;"	f
pthread_cancel	$NIMLIB/std/private/threadtypes.nim	/^  proc pthread_cancel*(a1: SysThread): cint {.$/;"	f
pthread_cleanup_pop	$NIMLIB/posix/posix.nim	/^proc pthread_cleanup_pop*(a1: cint) {.importc, header: "<pthread.h>".}$/;"	f
pthread_cleanup_push	$NIMLIB/posix/posix.nim	/^proc pthread_cleanup_push*(a1: proc (x: pointer) {.noconv.}, a2: pointer) {.$/;"	f
pthread_cond_broadcast	$NIMLIB/posix/posix.nim	/^proc pthread_cond_broadcast*(a1: ptr Pthread_cond): cint {.$/;"	f
pthread_cond_destroy	$NIMLIB/posix/posix.nim	/^proc pthread_cond_destroy*(a1: ptr Pthread_cond): cint {.importc, header: "<pthread.h>".}$/;"	f
pthread_cond_init	$NIMLIB/posix/posix.nim	/^proc pthread_cond_init*(a1: ptr Pthread_cond,$/;"	f
pthread_cond_signal	$NIMLIB/posix/posix.nim	/^proc pthread_cond_signal*(a1: ptr Pthread_cond): cint {.importc, header: "<pthread.h>".}$/;"	f
pthread_cond_timedwait	$NIMLIB/posix/posix.nim	/^proc pthread_cond_timedwait*(a1: ptr Pthread_cond,$/;"	f
pthread_cond_wait	$NIMLIB/posix/posix.nim	/^proc pthread_cond_wait*(a1: ptr Pthread_cond,$/;"	f
pthread_condattr_destroy	$NIMLIB/posix/posix.nim	/^proc pthread_condattr_destroy*(a1: ptr Pthread_condattr): cint {.importc, header: "<pthread.h>"./;"	f
pthread_condattr_getclock	$NIMLIB/posix/posix.nim	/^proc pthread_condattr_getclock*(a1: ptr Pthread_condattr,$/;"	f
pthread_condattr_getpshared	$NIMLIB/posix/posix.nim	/^proc pthread_condattr_getpshared*(a1: ptr Pthread_condattr,$/;"	f
pthread_condattr_init	$NIMLIB/posix/posix.nim	/^proc pthread_condattr_init*(a1: ptr Pthread_condattr): cint {.importc, header: "<pthread.h>".}$/;"	f
pthread_condattr_setclock	$NIMLIB/posix/posix.nim	/^proc pthread_condattr_setclock*(a1: ptr Pthread_condattr,a2: ClockId): cint {.importc, header: "/;"	f
pthread_condattr_setpshared	$NIMLIB/posix/posix.nim	/^proc pthread_condattr_setpshared*(a1: ptr Pthread_condattr, a2: cint): cint {.importc, header: "/;"	f
pthread_create	$NIMLIB/posix/posix.nim	/^proc pthread_create*(a1: ptr Pthread, a2: ptr Pthread_attr,$/;"	f
pthread_create	$NIMLIB/std/private/threadtypes.nim	/^  proc pthread_create*(a1: var SysThread, a2: var Pthread_attr,$/;"	f
pthread_detach	$NIMLIB/posix/posix.nim	/^proc pthread_detach*(a1: Pthread): cint {.importc, header: "<pthread.h>".}$/;"	f
pthread_equal	$NIMLIB/posix/posix.nim	/^proc pthread_equal*(a1, a2: Pthread): cint {.importc, header: "<pthread.h>".}$/;"	f
pthread_exit	$NIMLIB/posix/posix.nim	/^proc pthread_exit*(a1: pointer) {.importc, header: "<pthread.h>".}$/;"	f
pthread_getconcurrency	$NIMLIB/posix/posix.nim	/^proc pthread_getconcurrency*(): cint {.importc, header: "<pthread.h>".}$/;"	f
pthread_getcpuclockid	$NIMLIB/posix/posix.nim	/^proc pthread_getcpuclockid*(a1: Pthread, a2: var ClockId): cint {.importc, header: "<pthread.h>"/;"	f
pthread_getschedparam	$NIMLIB/posix/posix.nim	/^proc pthread_getschedparam*(a1: Pthread,  a2: var cint,$/;"	f
pthread_getspecific	$NIMLIB/posix/posix.nim	/^proc pthread_getspecific*(a1: Pthread_key): pointer {.importc, header: "<pthread.h>".}$/;"	f
pthread_gettid_np	$NIMLIB/std/private/threadtypes.nim	/^    proc pthread_gettid_np*(thread: SysThread): Pid {.$/;"	f
pthread_join	$NIMLIB/posix/posix.nim	/^proc pthread_join*(a1: Pthread, a2: ptr pointer): cint {.importc, header: "<pthread.h>".}$/;"	f
pthread_join	$NIMLIB/std/private/threadtypes.nim	/^  proc pthread_join*(a1: SysThread, a2: ptr pointer): cint {.$/;"	f
pthread_key_create	$NIMLIB/posix/posix.nim	/^proc pthread_key_create*(a1: ptr Pthread_key, a2: proc (x: pointer) {.noconv.}): cint {.importc,/;"	f
pthread_key_delete	$NIMLIB/posix/posix.nim	/^proc pthread_key_delete*(a1: Pthread_key): cint {.importc, header: "<pthread.h>".}$/;"	f
pthread_kill	$NIMLIB/posix/posix.nim	/^proc pthread_kill*(a1: Pthread, a2: cint): cint {.importc, header: "<signal.h>".}$/;"	f
pthread_mutex_destroy	$NIMLIB/posix/posix.nim	/^proc pthread_mutex_destroy*(a1: ptr Pthread_mutex): cint {.importc, header: "<pthread.h>".}$/;"	f
pthread_mutex_getprioceiling	$NIMLIB/posix/posix.nim	/^proc pthread_mutex_getprioceiling*(a1: ptr Pthread_mutex,$/;"	f
pthread_mutex_init	$NIMLIB/posix/posix.nim	/^proc pthread_mutex_init*(a1: ptr Pthread_mutex,$/;"	f
pthread_mutex_lock	$NIMLIB/posix/posix.nim	/^proc pthread_mutex_lock*(a1: ptr Pthread_mutex): cint {.importc, header: "<pthread.h>".}$/;"	f
pthread_mutex_setprioceiling	$NIMLIB/posix/posix.nim	/^proc pthread_mutex_setprioceiling*(a1: ptr Pthread_mutex,a2: cint,$/;"	f
pthread_mutex_timedlock	$NIMLIB/posix/posix.nim	/^proc pthread_mutex_timedlock*(a1: ptr Pthread_mutex,$/;"	f
pthread_mutex_trylock	$NIMLIB/posix/posix.nim	/^proc pthread_mutex_trylock*(a1: ptr Pthread_mutex): cint {.importc, header: "<pthread.h>".}$/;"	f
pthread_mutex_unlock	$NIMLIB/posix/posix.nim	/^proc pthread_mutex_unlock*(a1: ptr Pthread_mutex): cint {.importc, header: "<pthread.h>".}$/;"	f
pthread_mutexattr_destroy	$NIMLIB/posix/posix.nim	/^proc pthread_mutexattr_destroy*(a1: ptr Pthread_mutexattr): cint {.importc, header: "<pthread.h>/;"	f
pthread_mutexattr_getprioceiling	$NIMLIB/posix/posix.nim	/^proc pthread_mutexattr_getprioceiling*($/;"	f
pthread_mutexattr_getprotocol	$NIMLIB/posix/posix.nim	/^proc pthread_mutexattr_getprotocol*(a1: ptr Pthread_mutexattr,$/;"	f
pthread_mutexattr_getpshared	$NIMLIB/posix/posix.nim	/^proc pthread_mutexattr_getpshared*(a1: ptr Pthread_mutexattr,$/;"	f
pthread_mutexattr_gettype	$NIMLIB/posix/posix.nim	/^proc pthread_mutexattr_gettype*(a1: ptr Pthread_mutexattr,$/;"	f
pthread_mutexattr_init	$NIMLIB/posix/posix.nim	/^proc pthread_mutexattr_init*(a1: ptr Pthread_mutexattr): cint {.importc, header: "<pthread.h>".}$/;"	f
pthread_mutexattr_setprioceiling	$NIMLIB/posix/posix.nim	/^proc pthread_mutexattr_setprioceiling*(a1: ptr Pthread_mutexattr, a2: cint): cint {.importc, hea/;"	f
pthread_mutexattr_setprotocol	$NIMLIB/posix/posix.nim	/^proc pthread_mutexattr_setprotocol*(a1: ptr Pthread_mutexattr, a2: cint): cint {.importc, header/;"	f
pthread_mutexattr_setpshared	$NIMLIB/posix/posix.nim	/^proc pthread_mutexattr_setpshared*(a1: ptr Pthread_mutexattr, a2: cint): cint {.importc, header:/;"	f
pthread_mutexattr_settype	$NIMLIB/posix/posix.nim	/^proc pthread_mutexattr_settype*(a1: ptr Pthread_mutexattr, a2: cint): cint {.importc, header: "</;"	f
pthread_once	$NIMLIB/posix/posix.nim	/^proc pthread_once*(a1: ptr Pthread_once, a2: proc () {.noconv.}): cint {.importc, header: "<pthr/;"	f
pthread_rwlock_destroy	$NIMLIB/posix/posix.nim	/^proc pthread_rwlock_destroy*(a1: ptr Pthread_rwlock): cint {.importc, header: "<pthread.h>".}$/;"	f
pthread_rwlock_init	$NIMLIB/posix/posix.nim	/^proc pthread_rwlock_init*(a1: ptr Pthread_rwlock,$/;"	f
pthread_rwlock_rdlock	$NIMLIB/posix/posix.nim	/^proc pthread_rwlock_rdlock*(a1: ptr Pthread_rwlock): cint {.importc, header: "<pthread.h>".}$/;"	f
pthread_rwlock_timedrdlock	$NIMLIB/posix/posix.nim	/^proc pthread_rwlock_timedrdlock*(a1: ptr Pthread_rwlock,$/;"	f
pthread_rwlock_timedwrlock	$NIMLIB/posix/posix.nim	/^proc pthread_rwlock_timedwrlock*(a1: ptr Pthread_rwlock,$/;"	f
pthread_rwlock_tryrdlock	$NIMLIB/posix/posix.nim	/^proc pthread_rwlock_tryrdlock*(a1: ptr Pthread_rwlock): cint {.importc, header: "<pthread.h>".}$/;"	f
pthread_rwlock_trywrlock	$NIMLIB/posix/posix.nim	/^proc pthread_rwlock_trywrlock*(a1: ptr Pthread_rwlock): cint {.importc, header: "<pthread.h>".}$/;"	f
pthread_rwlock_unlock	$NIMLIB/posix/posix.nim	/^proc pthread_rwlock_unlock*(a1: ptr Pthread_rwlock): cint {.importc, header: "<pthread.h>".}$/;"	f
pthread_rwlock_wrlock	$NIMLIB/posix/posix.nim	/^proc pthread_rwlock_wrlock*(a1: ptr Pthread_rwlock): cint {.importc, header: "<pthread.h>".}$/;"	f
pthread_rwlockattr_destroy	$NIMLIB/posix/posix.nim	/^proc pthread_rwlockattr_destroy*(a1: ptr Pthread_rwlockattr): cint {.importc, header: "<pthread./;"	f
pthread_rwlockattr_getpshared	$NIMLIB/posix/posix.nim	/^proc pthread_rwlockattr_getpshared*($/;"	f
pthread_rwlockattr_init	$NIMLIB/posix/posix.nim	/^proc pthread_rwlockattr_init*(a1: ptr Pthread_rwlockattr): cint {.importc, header: "<pthread.h>"/;"	f
pthread_rwlockattr_setpshared	$NIMLIB/posix/posix.nim	/^proc pthread_rwlockattr_setpshared*(a1: ptr Pthread_rwlockattr, a2: cint): cint {.importc, heade/;"	f
pthread_self	$NIMLIB/posix/posix.nim	/^proc pthread_self*(): Pthread {.importc, header: "<pthread.h>".}$/;"	f
pthread_setcancelstate	$NIMLIB/posix/posix.nim	/^proc pthread_setcancelstate*(a1: cint, a2: var cint): cint {.importc, header: "<pthread.h>".}$/;"	f
pthread_setcanceltype	$NIMLIB/posix/posix.nim	/^proc pthread_setcanceltype*(a1: cint, a2: var cint): cint {.importc, header: "<pthread.h>".}$/;"	f
pthread_setconcurrency	$NIMLIB/posix/posix.nim	/^proc pthread_setconcurrency*(a1: cint): cint {.importc, header: "<pthread.h>".}$/;"	f
pthread_setschedparam	$NIMLIB/posix/posix.nim	/^proc pthread_setschedparam*(a1: Pthread, a2: cint,$/;"	f
pthread_setschedprio	$NIMLIB/posix/posix.nim	/^proc pthread_setschedprio*(a1: Pthread, a2: cint): cint {.$/;"	f
pthread_setspecific	$NIMLIB/posix/posix.nim	/^proc pthread_setspecific*(a1: Pthread_key, a2: pointer): cint {.$/;"	f
pthread_sigmask	$NIMLIB/posix/posix.nim	/^proc pthread_sigmask*(a1: cint, a2, a3: var Sigset): cint {.$/;"	f
pthread_spin_destroy	$NIMLIB/posix/posix.nim	/^proc pthread_spin_destroy*(a1: ptr Pthread_spinlock): cint {.$/;"	f
pthread_spin_init	$NIMLIB/posix/posix.nim	/^proc pthread_spin_init*(a1: ptr Pthread_spinlock, a2: cint): cint {.$/;"	f
pthread_spin_lock	$NIMLIB/posix/posix.nim	/^proc pthread_spin_lock*(a1: ptr Pthread_spinlock): cint {.$/;"	f
pthread_spin_trylock	$NIMLIB/posix/posix.nim	/^proc pthread_spin_trylock*(a1: ptr Pthread_spinlock): cint{.$/;"	f
pthread_spin_unlock	$NIMLIB/posix/posix.nim	/^proc pthread_spin_unlock*(a1: ptr Pthread_spinlock): cint {.$/;"	f
pthread_testcancel	$NIMLIB/posix/posix.nim	/^proc pthread_testcancel*() {.importc, header: "<pthread.h>".}$/;"	f
pthreadh	$NIMLIB/std/private/threadtypes.nim	/^    pthreadh* = "#define _GNU_SOURCE\\n#include <pthread.h>"$/;"	t
ptr	$NIMLIB/posix/epoll.nim	/^    `ptr`* {.importc: "ptr".}: pointer$/;"	o
ptr	$NIMLIB/system/basic_types.nim	/^  `ptr`*[T] {.magic: Pointer.}   ## Built-in generic untraced pointer type.$/;"	o
push	$NIMLIB/pure/collections/heapqueue.nim	/^proc push*[T](heap: var HeapQueue[T], item: sink T) =$/;"	t
push	$NIMLIB/pure/stats.nim	/^proc push*(s: var RunningStat, x: openArray[float|int]) =$/;"	t
pushGcFrame	$NIMLIB/system/excpt.nim	/^proc pushGcFrame*(s: GcFrame) {.compilerRtl, inl.} =$/;"	t
pushState	$NIMLIB/js/dom.nim	/^proc pushState*[T](h: History, stateObject: T, title, url: cstring)$/;"	f
pushpop	$NIMLIB/pure/collections/heapqueue.nim	/^proc pushpop*[T](heap: var HeapQueue[T], item: sink T): T =$/;"	t
put	$NIMLIB/pure/httpclient.nim	/^proc put*(client: HttpClient | AsyncHttpClient, url: Uri | string, body = "",$/;"	t
put	$NIMLIB/system/nimscript.nim	/^proc put*(key, value: string) =$/;"	t
putContent	$NIMLIB/pure/httpclient.nim	/^proc putContent*(client: HttpClient | AsyncHttpClient, url: Uri | string, body = "",$/;"	t
putEnv	$NIMLIB/std/envvars.nim	/^    proc putEnv*(key, val: string) {.tags: [WriteEnvEffect].} =$/;"	t
putEnv	$NIMLIB/system/nimscript.nim	/^proc putEnv*(key, val: string) {.tags: [WriteIOEffect].} =$/;"	t
pwrite	$NIMLIB/posix/posix.nim	/^proc pwrite*(a1: cint, a2: pointer, a3: int, a4: Off): int {.$/;"	f
querySelector	$NIMLIB/js/dom.nim	/^proc querySelector*(n: Node, selectors: cstring): Element$/;"	f
querySelectorAll	$NIMLIB/js/dom.nim	/^proc querySelectorAll*(n: Node, selectors: cstring): seq[Element]$/;"	f
querySetting	$NIMLIB/std/compilesettings.nim	/^proc querySetting*(setting: SingleValueSetting): string {.$/;"	f
querySettingSeq	$NIMLIB/std/compilesettings.nim	/^proc querySettingSeq*(setting: MultipleValueSetting): seq[string] {.$/;"	f
queueMicrotask	$NIMLIB/js/jscore.nim	/^  func queueMicrotask*(function: proc) {.importjs: "$1(#)".} =$/;"	t
quit	$NIMLIB/system.nim	/^proc quit*(errormsg: string, errorcode = QuitFailure) {.noreturn.} =$/;"	t
quote	$NIMLIB/core/macros.nim	/^proc quote*(bl: typed, op = "``"): NimNode {.magic: "QuoteAst", noSideEffect.} =$/;"	t
quoteShell	$NIMLIB/pure/os.nim	/^  proc quoteShell*(s: string): string {.noSideEffect, rtl, extern: "nosp$1".} =$/;"	t
quoteShellCommand	$NIMLIB/pure/os.nim	/^  proc quoteShellCommand*(args: openArray[string]): string =$/;"	t
quoteShellPosix	$NIMLIB/pure/os.nim	/^proc quoteShellPosix*(s: string): string {.noSideEffect, rtl, extern: "nosp$1".} =$/;"	t
quoteShellWindows	$NIMLIB/pure/os.nim	/^proc quoteShellWindows*(s: string): string {.noSideEffect, rtl, extern: "nosp$1".} =$/;"	t
radToDeg	$NIMLIB/pure/math.nim	/^func radToDeg*[T: float32|float64](d: T): T {.inline.} =$/;"	t
raise	$NIMLIB/posix/posix.nim	/^proc `raise`*(a1: cint): cint {.importc, header: "<signal.h>".}$/;"	o
raiseAssert	$NIMLIB/std/assertions.nim	/^proc raiseAssert*(msg: string) {.noinline, noreturn, nosinks.} =$/;"	t
raiseInvalidLibrary	$NIMLIB/pure/dynlib.nim	/^proc raiseInvalidLibrary*(name: cstring) {.noinline, noreturn.} =$/;"	t
raiseOSError	$NIMLIB/std/oserrors.nim	/^proc raiseOSError*(errorCode: OSErrorCode, additionalInfo = "") {.noinline.} =$/;"	t
raiseParseErr	$NIMLIB/pure/parsejson.nim	/^proc raiseParseErr*(p: JsonParser, msg: string) {.noinline, noreturn.} =$/;"	t
raiseSSLError	$NIMLIB/pure/net.nim	/^  proc raiseSSLError*(s = "") {.raises: [SslError].}=$/;"	t
rand	$NIMLIB/pure/random.nim	/^proc rand*[T: Ordinal](t: typedesc[T]): T =$/;"	t
randState	$NIMLIB/pure/random.nim	/^  template randState*(): untyped =$/;"	t
random	$NIMLIB/js/jscore.nim	/^proc random*(m: MathLib): float {.importcpp.}$/;"	f
randomize	$NIMLIB/pure/random.nim	/^proc randomize*(seed: int64) {.benign.} =$/;"	t
rangeCheck	$NIMLIB/system.nim	/^  template rangeCheck*(cond) =$/;"	t
rawData	$NIMLIB/pure/parsexml.nim	/^proc rawData*(my: var XmlParser): lent string {.inline.} =$/;"	t
rawData2	$NIMLIB/pure/parsexml.nim	/^proc rawData2*(my: var XmlParser): lent string {.inline.} =$/;"	t
rawEnv	$NIMLIB/system.nim	/^  proc rawEnv*[T: proc](x: T): pointer {.noSideEffect, inline.} =$/;"	t
rawProc	$NIMLIB/system.nim	/^  proc rawProc*[T: proc](x: T): pointer {.noSideEffect, inline.} =$/;"	t
rawTag	$NIMLIB/pure/xmltree.nim	/^proc rawTag*(n: XmlNode): string {.inline.} =$/;"	t
rawText	$NIMLIB/pure/xmltree.nim	/^proc rawText*(n: XmlNode): string {.inline.} =$/;"	t
rawWrite	$NIMLIB/system/ansi_c.nim	/^proc rawWrite*(f: CFilePtr, s: cstring) {.compilerproc, nonReloadable, inline.} =$/;"	t
rawWriteString	$NIMLIB/system/ansi_c.nim	/^proc rawWriteString*(f: CFilePtr, s: cstring, length: int) {.compilerproc, nonReloadable, inline/;"	t
rb	$NIMLIB/pure/htmlgen.nim	/^macro rb*(e: varargs[untyped]): untyped =$/;"	t
rdFileSize	$NIMLIB/windows/winlean.nim	/^proc rdFileSize*(f: WIN32_FIND_DATA): int64 =$/;"	t
rdFileTime	$NIMLIB/windows/winlean.nim	/^proc rdFileTime*(f: FILETIME): int64 =$/;"	t
re	$NIMLIB/impure/nre.nim	/^proc re*(pattern: string): Regex =$/;"	t
re	$NIMLIB/impure/re.nim	/^proc re*(s: string, flags = {reStudy}): Regex =$/;"	t
read	$NIMLIB/posix/posix.nim	/^proc read*(a1: cint, a2: pointer, a3: int): int {.importc, header: "<unistd.h>".}$/;"	f
read	$NIMLIB/pure/asyncfile.nim	/^proc read*(f: AsyncFile, size: int): Future[string] =$/;"	t
read	$NIMLIB/pure/asyncfutures.nim	/^proc read*[T](future: Future[T] | FutureVar[T]): T =$/;"	t
read	$NIMLIB/pure/asyncstreams.nim	/^proc read*[T](future: FutureStream[T]): owned(Future[(bool, T)]) =$/;"	t
read	$NIMLIB/pure/streams.nim	/^proc read*[T](s: Stream, result: var T) =$/;"	t
readAll	$NIMLIB/pure/asyncdispatch.nim	/^proc readAll*(future: FutureStream[string]): owned(Future[string]) {.async.} =$/;"	t
readAll	$NIMLIB/pure/asyncfile.nim	/^proc readAll*(f: AsyncFile): Future[string] {.async.} =$/;"	t
readAll	$NIMLIB/pure/streams.nim	/^  proc readAll*(s: Stream): string {.compileTime.} =$/;"	t
readAll	$NIMLIB/std/syncio.nim	/^proc readAll*(file: File): string {.tags: [ReadIOEffect], benign.} =$/;"	t
readAllFromStdin	$NIMLIB/system/nimscript.nim	/^proc readAllFromStdin*(): string {.raises: [IOError].} =$/;"	t
readAsBinaryString	$NIMLIB/js/dom.nim	/^  proc readAsBinaryString*(f: FileReader, b: Blob) {.importcpp: "#.readAsBinaryString(#)".}$/;"	f
readAsDataURL	$NIMLIB/js/dom.nim	/^  proc readAsDataURL*(f: FileReader, b: Blob) {.importcpp: "#.readAsDataURL(#)".}$/;"	f
readAsText	$NIMLIB/js/dom.nim	/^  proc readAsText*(f: FileReader, b: Blob|File, encoding = cstring"UTF-8") {.importcpp: "#.readA/;"	t
readBool	$NIMLIB/pure/streams.nim	/^proc readBool*(s: Stream): bool =$/;"	t
readBuffer	$NIMLIB/pure/asyncfile.nim	/^proc readBuffer*(f: AsyncFile, buf: pointer, size: int): Future[int] =$/;"	t
readBuffer	$NIMLIB/std/syncio.nim	/^proc readBuffer*(f: File, buffer: pointer, len: Natural): int {.$/;"	f
readBytes	$NIMLIB/std/syncio.nim	/^proc readBytes*(f: File, a: var openArray[int8|uint8], start,$/;"	f
readChar	$NIMLIB/pure/streams.nim	/^proc readChar*(s: Stream): char =$/;"	t
readChar	$NIMLIB/std/syncio.nim	/^proc readChar*(f: File): char {.tags: [ReadIOEffect].} =$/;"	t
readChars	$NIMLIB/std/syncio.nim	/^proc readChars*(f: File, a: var openArray[char], start, len: Natural): int {.$/;"	f
readConsoleInput	$NIMLIB/windows/winlean.nim	/^proc readConsoleInput*(hConsoleInput: Handle, lpBuffer: pointer, nLength: cint,$/;"	f
readData	$NIMLIB/pure/cgi.nim	/^proc readData*(data: string): StringTableRef =$/;"	t
readData	$NIMLIB/pure/streams.nim	/^proc readData*(s: Stream, buffer: pointer, bufLen: int): int =$/;"	t
readDataStr	$NIMLIB/pure/streams.nim	/^proc readDataStr*(s: Stream, buffer: var string, slice: Slice[int]): int =$/;"	t
readError	$NIMLIB/pure/asyncfutures.nim	/^proc readError*[T](future: Future[T]): ref Exception =$/;"	t
readFile	$NIMLIB/std/syncio.nim	/^proc readFile*(filename: string): string {.tags: [ReadIOEffect], benign.} =$/;"	t
readFile	$NIMLIB/windows/winlean.nim	/^proc readFile*(hFile: Handle, buffer: pointer, nNumberOfBytesToRead: int32,$/;"	f
readFloat32	$NIMLIB/pure/streams.nim	/^proc readFloat32*(s: Stream): float32 =$/;"	t
readFloat64	$NIMLIB/pure/streams.nim	/^proc readFloat64*(s: Stream): float64 =$/;"	t
readHeaderRow	$NIMLIB/pure/parsecsv.nim	/^proc readHeaderRow*(self: var CsvParser) =$/;"	t
readIndexDir	$NIMLIB/packages/docutils/rstgen.nim	/^proc readIndexDir*(dir: string):$/;"	f
readInt16	$NIMLIB/pure/streams.nim	/^proc readInt16*(s: Stream): int16 =$/;"	t
readInt32	$NIMLIB/pure/streams.nim	/^proc readInt32*(s: Stream): int32 =$/;"	t
readInt64	$NIMLIB/pure/streams.nim	/^proc readInt64*(s: Stream): int64 =$/;"	t
readInt8	$NIMLIB/pure/streams.nim	/^proc readInt8*(s: Stream): int8 =$/;"	t
readLine	$NIMLIB/pure/asyncfile.nim	/^proc readLine*(f: AsyncFile): Future[string] {.async.} =$/;"	t
readLine	$NIMLIB/pure/net.nim	/^proc readLine*(socket: Socket, line: var string, timeout = -1,$/;"	t
readLine	$NIMLIB/pure/streams.nim	/^proc readLine*(s: Stream, line: var string): bool =$/;"	t
readLine	$NIMLIB/std/syncio.nim	/^proc readLine*(f: File, line: var string): bool {.tags: [ReadIOEffect],$/;"	f
readLine	$NIMLIB/wrappers/linenoise/linenoise.nim	/^proc readLine*(prompt: cstring): cstring {.importc: "linenoise".}$/;"	f
readLineFromStdin	$NIMLIB/impure/rdstdin.nim	/^  proc readLineFromStdin*(prompt: string, line: var string): bool {.$/;"	f
readLineFromStdin	$NIMLIB/system/nimscript.nim	/^proc readLineFromStdin*(): string {.raises: [IOError].} =$/;"	t
readLineStatus	$NIMLIB/wrappers/linenoise/linenoise.nim	/^  proc readLineStatus*(prompt: string, result: var ReadLineResult) =$/;"	t
readLines	$NIMLIB/pure/osproc.nim	/^proc readLines*(p: Process): (seq[string], int) {.since: (1, 3),$/;"	f
readLines	$NIMLIB/std/syncio.nim	/^template readLines*(filename: string): seq[$/;"	m
readPasswordFromStdin	$NIMLIB/pure/terminal.nim	/^proc readPasswordFromStdin*(prompt = "password: "): string =$/;"	t
readRow	$NIMLIB/pure/parsecsv.nim	/^proc readRow*(self: var CsvParser, columns = 0): bool =$/;"	t
readStr	$NIMLIB/pure/streams.nim	/^proc readStr*(s: Stream, length: int, str: var string) {.since: (1, 3).} =$/;"	t
readToStream	$NIMLIB/pure/asyncfile.nim	/^proc readToStream*(f: AsyncFile, fs: FutureStream[string]) {.async.} =$/;"	t
readUint16	$NIMLIB/pure/streams.nim	/^proc readUint16*(s: Stream): uint16 =$/;"	t
readUint32	$NIMLIB/pure/streams.nim	/^proc readUint32*(s: Stream): uint32 =$/;"	t
readUint64	$NIMLIB/pure/streams.nim	/^proc readUint64*(s: Stream): uint64 =$/;"	t
readUint8	$NIMLIB/pure/streams.nim	/^proc readUint8*(s: Stream): uint8 =$/;"	t
readVu64	$NIMLIB/std/varints.nim	/^proc readVu64*(z: openArray[byte]; pResult: var uint64): int =$/;"	t
readdir	$NIMLIB/posix/posix.nim	/^proc readdir*(a1: ptr DIR): ptr Dirent  {.importc, header: "<dirent.h>", sideEffect.}$/;"	f
readdir_r	$NIMLIB/posix/posix.nim	/^proc readdir_r*(a1: ptr DIR, a2: ptr Dirent, a3: ptr ptr Dirent): cint  {.$/;"	f
readlink	$NIMLIB/posix/posix.nim	/^  proc readlink*(a1, a2: cstring, a3: int): int {.importc, header: "<unistd.h>".}$/;"	f
readv	$NIMLIB/posix/posix.nim	/^proc readv*(a1: cint, a2: ptr IOVec, a3: cint): int {.$/;"	f
ready	$NIMLIB/system/channels_builtin.nim	/^proc ready*[TMsg](c: var Channel[TMsg]): bool =$/;"	t
readyState	$NIMLIB/js/dom.nim	/^  proc readyState*(f: FileReader): FileReaderState {.importcpp: "#.readyState", nodecl.}$/;"	f
realloc	$NIMLIB/system/memalloc.nim	/^  template realloc*(p: pointer, newSize: Natural): pointer =$/;"	t
realloc0	$NIMLIB/system/memalloc.nim	/^  template realloc0*(p: pointer, oldSize, newSize: Natural): pointer =$/;"	t
realloc0Impl	$NIMLIB/system/memalloc.nim	/^  proc realloc0Impl*(p: pointer, oldSize, newSize: Natural): pointer {.noconv, rtl, tags: [], be/;"	f
reallocImpl	$NIMLIB/system/memalloc.nim	/^  proc reallocImpl*(p: pointer, newSize: Natural): pointer {.noconv, rtl, tags: [], benign, rais/;"	f
reallocShared	$NIMLIB/system/memalloc.nim	/^  template reallocShared*(p: pointer, newSize: Natural): pointer =$/;"	t
reallocShared0	$NIMLIB/system/memalloc.nim	/^  template reallocShared0*(p: pointer, oldSize, newSize: Natural): pointer =$/;"	t
reallocShared0Impl	$NIMLIB/system/memalloc.nim	/^  proc reallocShared0Impl*(p: pointer, oldSize, newSize: Natural): pointer {.noconv, rtl, tags: /;"	f
reallocSharedImpl	$NIMLIB/system/memalloc.nim	/^  proc reallocSharedImpl*(p: pointer, newSize: Natural): pointer {.noconv, rtl, tags: [], benign/;"	f
realpath	$NIMLIB/posix/posix.nim	/^proc realpath*(name, resolved: cstring): cstring {.$/;"	f
reciprocal	$NIMLIB/pure/rationals.nim	/^func reciprocal*[T](x: Rational[T]): Rational[T] =$/;"	t
rect	$NIMLIB/pure/complex.nim	/^func rect*[T](r, phi: T): Complex[T] =$/;"	t
recv	$NIMLIB/posix/posix.nim	/^proc recv*(a1: SocketHandle, a2: pointer, a3: int, a4: cint): int {.$/;"	f
recv	$NIMLIB/pure/asyncdispatch.nim	/^  proc recv*(socket: AsyncFD, size: int,$/;"	f
recv	$NIMLIB/pure/asyncnet.nim	/^proc recv*(socket: AsyncSocket, size: int,$/;"	f
recv	$NIMLIB/pure/net.nim	/^proc recv*(socket: Socket, size: int, timeout = -1,$/;"	t
recv	$NIMLIB/system/channels_builtin.nim	/^proc recv*[TMsg](c: var Channel[TMsg]): TMsg =$/;"	t
recv	$NIMLIB/windows/winlean.nim	/^proc recv*(s: SocketHandle, buf: pointer, len, flags: cint): cint {.$/;"	f
recvFrom	$NIMLIB/pure/asyncnet.nim	/^proc recvFrom*(socket: AsyncSocket, size: int,$/;"	f
recvFrom	$NIMLIB/pure/net.nim	/^proc recvFrom*[T: string | IpAddress](socket: Socket, data: var string, length: int,$/;"	f
recvFromInto	$NIMLIB/pure/asyncdispatch.nim	/^  proc recvFromInto*(socket: AsyncFD, data: pointer, size: int,$/;"	f
recvInto	$NIMLIB/pure/asyncdispatch.nim	/^  proc recvInto*(socket: AsyncFD, buf: pointer, size: int,$/;"	f
recvInto	$NIMLIB/pure/asyncnet.nim	/^proc recvInto*(socket: AsyncSocket, buf: pointer, size: int,$/;"	f
recvLine	$NIMLIB/pure/asyncnet.nim	/^proc recvLine*(socket: AsyncSocket,$/;"	f
recvLine	$NIMLIB/pure/net.nim	/^proc recvLine*(socket: Socket, timeout = -1,$/;"	t
recvLineInto	$NIMLIB/pure/asyncnet.nim	/^proc recvLineInto*(socket: AsyncSocket, resString: FutureVar[string],$/;"	f
recvfrom	$NIMLIB/posix/posix.nim	/^proc recvfrom*(a1: SocketHandle, a2: pointer, a3: int, a4: cint,$/;"	f
recvfrom	$NIMLIB/windows/winlean.nim	/^proc recvfrom*(s: SocketHandle, buf: cstring, len, flags: cint,$/;"	f
recvmsg	$NIMLIB/posix/posix.nim	/^proc recvmsg*(a1: SocketHandle, a2: ptr Tmsghdr, a3: cint): int {.$/;"	f
reduce	$NIMLIB/pure/rationals.nim	/^func reduce*[T: SomeInteger](x: var Rational[T]) =$/;"	t
ref	$NIMLIB/system/basic_types.nim	/^  `ref`*[T] {.magic: Pointer.}   ## Built-in generic traced pointer type.$/;"	o
refcount	$NIMLIB/wrappers/pcre.nim	/^proc refcount*(code: ptr Pcre,$/;"	f
register	$NIMLIB/pure/asyncdispatch.nim	/^  proc register*(fd: AsyncFD) =$/;"	t
register	$NIMLIB/pure/mimetypes.nim	/^func register*(mimedb: var MimeDB, ext: string, mimetype: string) =$/;"	t
registerEvent	$NIMLIB/pure/ioselects/ioselectors_epoll.nim	/^proc registerEvent*[T](s: Selector[T], ev: SelectEvent, data: T) =$/;"	t
registerEvent	$NIMLIB/pure/ioselects/ioselectors_kqueue.nim	/^proc registerEvent*[T](s: Selector[T], ev: SelectEvent, data: T) =$/;"	t
registerEvent	$NIMLIB/pure/ioselects/ioselectors_poll.nim	/^proc registerEvent*[T](s: Selector[T], ev: SelectEvent, data: T) =$/;"	t
registerEvent	$NIMLIB/pure/ioselects/ioselectors_select.nim	/^proc registerEvent*[T](s: Selector[T], ev: SelectEvent, data: T) =$/;"	t
registerEvent	$NIMLIB/pure/selectors.nim	/^  proc registerEvent*[T](s: Selector[T], ev: SelectEvent, data: T) =$/;"	t
registerHandle	$NIMLIB/pure/ioselects/ioselectors_epoll.nim	/^proc registerHandle*[T](s: Selector[T], fd: int | SocketHandle,$/;"	f
registerHandle	$NIMLIB/pure/ioselects/ioselectors_kqueue.nim	/^proc registerHandle*[T](s: Selector[T], fd: int | SocketHandle,$/;"	f
registerHandle	$NIMLIB/pure/ioselects/ioselectors_poll.nim	/^proc registerHandle*[T](s: Selector[T], fd: int | SocketHandle,$/;"	f
registerHandle	$NIMLIB/pure/ioselects/ioselectors_select.nim	/^proc registerHandle*[T](s: Selector[T], fd: int | SocketHandle,$/;"	f
registerHandle	$NIMLIB/pure/selectors.nim	/^  proc registerHandle*[T](s: Selector[T], fd: int | SocketHandle,$/;"	f
registerProcess	$NIMLIB/pure/ioselects/ioselectors_epoll.nim	/^  proc registerProcess*[T](s: Selector, pid: int,$/;"	f
registerProcess	$NIMLIB/pure/ioselects/ioselectors_kqueue.nim	/^proc registerProcess*[T](s: Selector[T], pid: int,$/;"	f
registerProcess	$NIMLIB/pure/selectors.nim	/^  proc registerProcess*[T](s: Selector[T], pid: int,$/;"	f
registerProtocolHandler	$NIMLIB/js/dom.nim	/^  proc registerProtocolHandler*(self: Navigator; scheme, url, title: cstring) ## https:\/\/devel/;"	f
registerSignal	$NIMLIB/pure/ioselects/ioselectors_epoll.nim	/^  proc registerSignal*[T](s: Selector[T], signal: int,$/;"	f
registerSignal	$NIMLIB/pure/ioselects/ioselectors_kqueue.nim	/^proc registerSignal*[T](s: Selector[T], signal: int,$/;"	f
registerSignal	$NIMLIB/pure/selectors.nim	/^  proc registerSignal*[T](s: Selector[T], signal: int,$/;"	f
registerStackTraceOverride	$NIMLIB/system/stacktraces.nim	/^  proc registerStackTraceOverride*(overrideProc: StackTraceOverrideGetTracebackProc) =$/;"	t
registerStackTraceOverrideGetDebuggingInfo	$NIMLIB/system/stacktraces.nim	/^  proc registerStackTraceOverrideGetDebuggingInfo*(overrideProc: StackTraceOverrideGetDebuggingI/;"	t
registerStackTraceOverrideGetProgramCounters	$NIMLIB/system/stacktraces.nim	/^  proc registerStackTraceOverrideGetProgramCounters*(overrideProc: StackTraceOverrideGetProgramC/;"	t
registerTimer	$NIMLIB/pure/ioselects/ioselectors_epoll.nim	/^proc registerTimer*[T](s: Selector[T], timeout: int, oneshot: bool,$/;"	f
registerTimer	$NIMLIB/pure/ioselects/ioselectors_kqueue.nim	/^proc registerTimer*[T](s: Selector[T], timeout: int, oneshot: bool,$/;"	f
registerTimer	$NIMLIB/pure/selectors.nim	/^  proc registerTimer*[T](s: Selector[T], timeout: int, oneshot: bool,$/;"	f
registerVnode	$NIMLIB/pure/ioselects/ioselectors_kqueue.nim	/^proc registerVnode*[T](s: Selector[T], fd: cint, events: set[Event], data: T) =$/;"	t
registerVnode	$NIMLIB/pure/selectors.nim	/^  proc registerVnode*[T](s: Selector[T], fd: cint, events: set[Event],$/;"	f
registerWaitForSingleObject	$NIMLIB/windows/winlean.nim	/^proc registerWaitForSingleObject*(phNewWaitObject: ptr Handle, hObject: Handle,$/;"	f
relativePath	$NIMLIB/std/paths.nim	/^proc relativePath*(path, base: Path, sep = DirSep): Path {.inline.} =$/;"	t
relativePath	$NIMLIB/std/private/ospaths2.nim	/^proc relativePath*(path, base: string, sep = DirSep): string {.$/;"	t
release	$NIMLIB/core/locks.nim	/^proc release*(lock: var Lock) {.inline.} =$/;"	t
release	$NIMLIB/core/rlocks.nim	/^proc release*(lock: var RLock) {.inline.} =$/;"	t
releasePointerCapture	$NIMLIB/js/dom.nim	/^  proc releasePointerCapture*(self: Node; pointerId: SomeNumber) {.importjs: "#.$1(#)".}$/;"	f
releaseSys	$NIMLIB/std/private/syslocks.nim	/^  proc releaseSys*(L: var SysLock) {.noSideEffect, importcpp.}$/;"	f
reload	$NIMLIB/js/dom.nim	/^proc reload*(loc: Location)$/;"	f
relocate	$NIMLIB/wrappers/tinyc.nim	/^proc relocate*(s: PccState, p: pointer): cint {.cdecl,$/;"	f
remainingArgs	$NIMLIB/pure/parseopt.nim	/^proc remainingArgs*(p: OptParser): seq[string] {.rtl, extern: "npo$1".} =$/;"	t
remove	$NIMLIB/js/dom.nim	/^proc remove*(c: ClassList, class: cstring)$/;"	f
remove	$NIMLIB/pure/collections/lists.nim	/^proc remove*[T](L: var SinglyLinkedList[T], n: SinglyLinkedNode[T]): bool {.discardable.} =$/;"	t
removeAllRanges	$NIMLIB/js/dom.nim	/^proc removeAllRanges*(s: Selection)$/;"	f
removeAttribute	$NIMLIB/js/dom.nim	/^proc removeAttribute*(n: Node, attr: cstring)$/;"	f
removeAttributeNS	$NIMLIB/js/dom.nim	/^  proc removeAttributeNS*(self: Node; namespace, attributeName: cstring) {.importjs: "#.$1(#, #)/;"	f
removeAttributeNode	$NIMLIB/js/dom.nim	/^proc removeAttributeNode*(n, attr: Node)$/;"	f
removeChild	$NIMLIB/js/dom.nim	/^  proc removeChild*(parent, child: Node) =$/;"	t
removeDir	$NIMLIB/std/dirs.nim	/^proc removeDir*(dir: Path, checkDir = false$/;"	t
removeDir	$NIMLIB/std/private/osdirs.nim	/^proc removeDir*(dir: string, checkDir = false) {.rtl, extern: "nos$1", tags: [$/;"	t
removeDirectoryW	$NIMLIB/windows/winlean.nim	/^proc removeDirectoryW*(lpPathName: WideCString): int32 {.$/;"	f
removeEventListener	$NIMLIB/js/dom.nim	/^proc removeEventListener*(et: EventTarget; ev: cstring; cb: proc(ev: Event))$/;"	f
removeFile	$NIMLIB/std/files.nim	/^proc removeFile*(file: Path) {.inline, tags: [WriteDirEffect].} =$/;"	t
removeFile	$NIMLIB/std/private/osfiles.nim	/^proc removeFile*(file: string) {.rtl, extern: "nos$1", tags: [WriteDirEffect], noWeirdTarget.} =$/;"	t
removeItem	$NIMLIB/js/dom.nim	/^proc removeItem*(s: Storage, key: cstring)$/;"	f
removePrefix	$NIMLIB/pure/strutils.nim	/^func removePrefix*(s: var string, chars: set[char] = Newlines) {.rtl,$/;"	t
removeProperty	$NIMLIB/js/dom.nim	/^proc removeProperty*(s: Style, property: cstring)$/;"	f
removeSuffix	$NIMLIB/pure/strutils.nim	/^func removeSuffix*(s: var string, chars: set[char] = Newlines) {.rtl,$/;"	t
renderCodeLang	$NIMLIB/packages/docutils/rstgen.nim	/^proc renderCodeLang*(result: var string, lang: SourceLanguage, code: string,$/;"	f
renderIndexTerm	$NIMLIB/packages/docutils/rstgen.nim	/^proc renderIndexTerm*(d: PDoc, n: PRstNode, result: var string) =$/;"	t
renderNimCode	$NIMLIB/packages/docutils/rstgen.nim	/^proc renderNimCode*(result: var string, code: string, target: OutputTarget) =$/;"	t
renderRstToJson	$NIMLIB/packages/docutils/rstast.nim	/^proc renderRstToJson*(node: PRstNode): string =$/;"	t
renderRstToOut	$NIMLIB/packages/docutils/rstgen.nim	/^proc renderRstToOut*(d: var RstGenerator, n: PRstNode, result: var string) {.gcsafe.}$/;"	f
renderRstToRst	$NIMLIB/packages/docutils/rstast.nim	/^proc renderRstToRst*(n: PRstNode, result: var string) =$/;"	t
renderRstToText	$NIMLIB/packages/docutils/rstast.nim	/^proc renderRstToText*(node: PRstNode): string =$/;"	t
renderSql	$NIMLIB/pure/parsesql.nim	/^proc renderSql*(n: SqlNode, upperCase = false): string =$/;"	t
renderTocEntries	$NIMLIB/packages/docutils/rstgen.nim	/^proc renderTocEntries*(d: var RstGenerator, j: var int, lvl: int,$/;"	f
reopen	$NIMLIB/std/syncio.nim	/^proc reopen*(f: File, filename: string, mode: FileMode = fmRead): bool {.$/;"	t
repeat	$NIMLIB/pure/collections/sequtils.nim	/^proc repeat*[T](x: T, n: Natural): seq[T] =$/;"	t
repeat	$NIMLIB/pure/strutils.nim	/^func repeat*(s: string, n: Natural): string {.rtl, extern: "nsuRepeatStr".} =$/;"	t
repeat	$NIMLIB/pure/unicode.nim	/^proc repeat*(c: Rune, count: Natural): string {.noSideEffect,$/;"	f
replace	$NIMLIB/impure/nre.nim	/^proc replace*(str: string, pattern: Regex,$/;"	f
replace	$NIMLIB/impure/re.nim	/^proc replace*(s: string, sub: Regex, by = ""): string =$/;"	t
replace	$NIMLIB/js/dom.nim	/^proc replace*(loc: Location, s: cstring)$/;"	f
replace	$NIMLIB/pure/collections/heapqueue.nim	/^proc replace*[T](heap: var HeapQueue[T], item: sink T): T =$/;"	t
replace	$NIMLIB/pure/pegs.nim	/^func replace*(s: string, sub: Peg, by = ""): string {.$/;"	t
replace	$NIMLIB/pure/strutils.nim	/^func replace*(s, sub: string, by = ""): string {.rtl,$/;"	t
replace	$NIMLIB/pure/xmltree.nim	/^proc replace*(n: XmlNode, slice: Slice[int], replacement: openArray[XmlNode]) =$/;"	t
replaceChild	$NIMLIB/js/dom.nim	/^  proc replaceChild*(parent, newNode, oldNode: Node) =$/;"	t
replaceChildren	$NIMLIB/js/dom.nim	/^  proc replaceChildren*(self: Node; replacements: Node) {.importjs: "#.$1(@)", varargs.}$/;"	f
replaceData	$NIMLIB/js/dom.nim	/^proc replaceData*(n: Node, start, len: int, text: cstring)$/;"	f
replaceWith	$NIMLIB/js/dom.nim	/^  proc replaceWith*(self: Node; replacements: Node) {.importjs: "#.$1(@)", varargs.}$/;"	f
replaceWord	$NIMLIB/pure/strutils.nim	/^func replaceWord*(s, sub: string, by = ""): string {.rtl,$/;"	t
replacef	$NIMLIB/impure/re.nim	/^proc replacef*(s: string, sub: Regex, by: string): string =$/;"	t
reportValidity	$NIMLIB/js/dom.nim	/^proc reportValidity*(e: FormElement): bool$/;"	f
repr	$NIMLIB/system.nim	/^  proc repr*[T](x: T): string {.magic: "Repr", noSideEffect.}$/;"	f
repr	$NIMLIB/system/repr_v2.nim	/^template repr*(x: distinct): string =$/;"	t
reprDiscriminant	$NIMLIB/system/repr_impl.nim	/^proc reprDiscriminant*(e: int, typ: PNimType): string {.compilerRtl.} =$/;"	t
reprDiscriminant	$NIMLIB/system/repr_v2.nim	/^proc reprDiscriminant*(e: int): string {.compilerproc.} =$/;"	t
request	$NIMLIB/pure/httpclient.nim	/^proc request*(client: HttpClient | AsyncHttpClient, url: Uri | string,$/;"	f
requestAnimationFrame	$NIMLIB/js/dom.nim	/^proc requestAnimationFrame*(w: Window, function: proc (time: float)): int$/;"	f
requestPointerLock	$NIMLIB/js/dom.nim	/^  proc requestPointerLock*(self: Node) {.importjs: "#.$1()".}$/;"	f
require	$NIMLIB/js/jsffi.nim	/^proc require*(module: cstring): JsObject {.importc.}$/;"	f
require	$NIMLIB/pure/unittest.nim	/^template require*(conditions: untyped) =$/;"	t
requires	$NIMLIB/system/nimscript.nim	/^  proc requires*(deps: varargs[string]) =$/;"	t
requiresData	$NIMLIB/system/nimscript.nim	/^    requiresData*: seq[string] = @[] ## Exposes the list of requirements for read$/;"	t
reraisedFromBegin	$NIMLIB/system/stacktraces.nim	/^  reraisedFromBegin* = -10$/;"	t
reraisedFromEnd	$NIMLIB/system/stacktraces.nim	/^  reraisedFromEnd* = -100$/;"	t
reset	$NIMLIB/js/dom.nim	/^proc reset*(f: FormElement)$/;"	f
reset	$NIMLIB/system.nim	/^proc reset*[T](obj: var T) {.noSideEffect.} =$/;"	t
resetAttributes	$NIMLIB/pure/terminal.nim	/^proc resetAttributes*(f: File) =$/;"	t
resetOutputFormatters	$NIMLIB/pure/unittest.nim	/^proc resetOutputFormatters* {.since: (1, 1).} =$/;"	t
resetStream	$NIMLIB/std/socketstreams.nim	/^proc resetStream*(s: WriteSocketStream) =$/;"	t
resize	$NIMLIB/pure/memfiles.nim	/^proc resize*(f: var MemFile, newFileSize: int) {.raises: [IOError, OSError].} =$/;"	t
resize	$NIMLIB/system/memalloc.nim	/^  proc resize*[T](p: ptr T, newSize: Natural): ptr T {.inline, benign, raises: [].} =$/;"	t
resizeBy	$NIMLIB/js/dom.nim	/^proc resizeBy*(w: Window, x, y: int)$/;"	f
resizeShared	$NIMLIB/system/memalloc.nim	/^  proc resizeShared*[T](p: ptr T, newSize: Natural): ptr T {.inline, raises: [].} =$/;"	t
resizeTo	$NIMLIB/js/dom.nim	/^proc resizeTo*(w: Window, x, y: int)$/;"	f
resolveSubs	$NIMLIB/packages/docutils/rst.nim	/^proc resolveSubs*(s: PRstSharedState, n: PRstNode): PRstNode =$/;"	t
respond	$NIMLIB/pure/asynchttpserver.nim	/^proc respond*(req: Request, code: HttpCode, content: string,$/;"	f
resultAsString	$NIMLIB/js/dom.nim	/^  proc resultAsString*(f: FileReader): cstring {.importcpp: "#.result", nodecl.}$/;"	f
resume	$NIMLIB/pure/osproc.nim	/^proc resume*(p: Process) {.rtl, extern: "nosp$1", tags: [].}$/;"	f
resumeThread	$NIMLIB/windows/winlean.nim	/^proc resumeThread*(hThread: Handle): int32 {.stdcall, dynlib: "kernel32",$/;"	f
retryCall	$NIMLIB/std/private/gitutils.nim	/^template retryCall*(maxRetry = 3, backoffDuration = 1.0, call: untyped): bool =$/;"	t
reverse	$NIMLIB/pure/algorithm.nim	/^proc reverse*[T](a: var openArray[T], first, last: Natural) =$/;"	t
reverseBits	$NIMLIB/pure/bitops.nim	/^func reverseBits*[T: SomeUnsignedInt](x: T): T =$/;"	t
reversed	$NIMLIB/pure/algorithm.nim	/^proc reversed*[T](a: openArray[T], first: Natural, last: int): seq[T]$/;"	f
reversed	$NIMLIB/pure/unicode.nim	/^proc reversed*(s: string): string {.inline.} =$/;"	t
rewinddir	$NIMLIB/posix/posix.nim	/^proc rewinddir*(a1: ptr DIR)  {.importc, header: "<dirent.h>".}$/;"	f
rex	$NIMLIB/impure/re.nim	/^proc rex*(s: string, flags = {reStudy, reExtended}): Regex =$/;"	t
rfind	$NIMLIB/pure/strutils.nim	/^func rfind*(s: string, sub: char, start: Natural = 0, last = -1): int {.rtl,$/;"	t
rgb	$NIMLIB/pure/colors.nim	/^proc rgb*(r, g, b: range[0..255]): Color =$/;"	t
rmDir	$NIMLIB/system/nimscript.nim	/^proc rmDir*(dir: string, checkDir = false) {.raises: [OSError].} =$/;"	t
rmFile	$NIMLIB/system/nimscript.nim	/^proc rmFile*(file: string) {.raises: [OSError].} =$/;"	t
rmdir	$NIMLIB/posix/posix.nim	/^proc rmdir*(a1: cstring): cint {.importc, header: "<unistd.h>".}$/;"	f
rope	$NIMLIB/pure/ropes.nim	/^proc rope*(s: string = ""): Rope {.rtl, extern: "nro$1Str".} =$/;"	t
rotateLeft	$NIMLIB/pure/algorithm.nim	/^proc rotateLeft*[T](arg: var openArray[T]; slice: HSlice[int, int];$/;"	f
rotateLeftBits	$NIMLIB/pure/bitops.nim	/^func rotateLeftBits*[T: SomeUnsignedInt](value: T, shift: range[0..(sizeof(T) * 8)]): T {.inline/;"	t
rotateRightBits	$NIMLIB/pure/bitops.nim	/^func rotateRightBits*[T: SomeUnsignedInt](value: T, shift: range[0..(sizeof(T) * 8)]): T {.inlin/;"	t
rotatedLeft	$NIMLIB/pure/algorithm.nim	/^proc rotatedLeft*[T](arg: openArray[T]; slice: HSlice[int, int],$/;"	f
round	$NIMLIB/js/jscore.nim	/^proc round*(m: MathLib, f: SomeFloat): int {.importcpp.}$/;"	f
round	$NIMLIB/pure/math.nim	/^func round*[T: float32|float64](x: T, places: int): T =$/;"	t
routeEvent	$NIMLIB/js/dom.nim	/^proc routeEvent*(w: Window, event: Event)$/;"	f
rowEntry	$NIMLIB/pure/parsecsv.nim	/^proc rowEntry*(self: var CsvParser, entry: string): var string =$/;"	t
rp	$NIMLIB/pure/htmlgen.nim	/^macro rp*(e: varargs[untyped]): untyped =$/;"	t
rpartition	$NIMLIB/pure/strmisc.nim	/^func rpartition*(s: string, sep: string): (string, string, string) =$/;"	t
rsplit	$NIMLIB/pure/strutils.nim	/^iterator rsplit*(s: string, seps: set[char] = Whitespace,$/;"	t
rstMessage	$NIMLIB/packages/docutils/rst.nim	/^proc rstMessage*(filenames: RstFileTable, f: MsgHandler,$/;"	f
rstParse	$NIMLIB/packages/docutils/rst.nim	/^proc rstParse*(text, filename: string,$/;"	f
rstParsePass1	$NIMLIB/packages/docutils/rst.nim	/^proc rstParsePass1*(fragment: string,$/;"	f
rstToHtml	$NIMLIB/packages/docutils/rstgen.nim	/^proc rstToHtml*(s: string, options: RstParseOptions,$/;"	f
rstToLatex	$NIMLIB/packages/docutils/rstgen.nim	/^proc rstToLatex*(rstSource: string; options: RstParseOptions): string {.inline, since: (1, 3).} /;"	t
rstnodeToRefname	$NIMLIB/packages/docutils/rst.nim	/^proc rstnodeToRefname*(n: PRstNode): string$/;"	f
rt	$NIMLIB/pure/htmlgen.nim	/^macro rt*(e: varargs[untyped]): untyped =$/;"	t
rtc	$NIMLIB/pure/htmlgen.nim	/^macro rtc*(e: varargs[untyped]): untyped =$/;"	t
ruby	$NIMLIB/pure/htmlgen.nim	/^macro ruby*(e: varargs[untyped]): untyped =$/;"	t
rule	$NIMLIB/pure/pegs.nim	/^func rule*(nt: NonTerminal): Peg = nt.rule$/;"	t
run	$NIMLIB/pure/coro.nim	/^proc run*() =$/;"	t
run	$NIMLIB/wrappers/tinyc.nim	/^proc run*(s: PccState, argc: cint, argv: cstringArray): cint {.cdecl,$/;"	f
runForever	$NIMLIB/pure/asyncdispatch.nim	/^proc runForever*() =$/;"	t
runeAt	$NIMLIB/pure/unicode.nim	/^proc runeAt*(s: string, i: Natural): Rune {.inline.} =$/;"	t
runeAtPos	$NIMLIB/pure/unicode.nim	/^proc runeAtPos*(s: string, pos: int): Rune {.inline.} =$/;"	t
runeLen	$NIMLIB/pure/unicode.nim	/^proc runeLen*(s: string): int {.inline.} =$/;"	t
runeLenAt	$NIMLIB/pure/unicode.nim	/^proc runeLenAt*(s: string, i: Natural): int {.inline.} =$/;"	t
runeOffset	$NIMLIB/pure/unicode.nim	/^proc runeOffset*(s: string, pos: Natural, start: Natural = 0): int {.inline.} =$/;"	t
runeReverseOffset	$NIMLIB/pure/unicode.nim	/^proc runeReverseOffset*(s: string, rev: Positive): (int, int) {.inline.} =$/;"	t
runeStrAtPos	$NIMLIB/pure/unicode.nim	/^proc runeStrAtPos*(s: string, pos: Natural): string {.inline.} =$/;"	t
runeSubStr	$NIMLIB/pure/unicode.nim	/^proc runeSubStr*(s: string, pos: int, len: int = int.high): string {.inline.} =$/;"	t
runeToEntity	$NIMLIB/pure/htmlparser.nim	/^proc runeToEntity*(rune: Rune): string =$/;"	t
runes	$NIMLIB/pure/unicode.nim	/^iterator runes*(s: string): Rune =$/;"	t
runnableExamples	$NIMLIB/system/compilation.nim	/^proc runnableExamples*(rdoccmd = "", body: untyped) {.magic: "RunnableExamples".} =$/;"	t
running	$NIMLIB/pure/osproc.nim	/^proc running*(p: Process): bool {.rtl, extern: "nosp$1", raises: [OSError], tags: [].}$/;"	f
running	$NIMLIB/std/typedthreads.nim	/^proc running*[TArg](t: Thread[TArg]): bool {.inline.} =$/;"	t
runtimeEnv	$NIMLIB/genode/env.nim	/^  var runtimeEnv* {.importcpp: runtimeEnvSym.}: GenodeEnvPtr$/;"	t
runtimeEnvSym	$NIMLIB/genode/env.nim	/^const runtimeEnvSym* = "nim_runtime_env"$/;"	t
safeProtocol	$NIMLIB/packages/docutils/rst.nim	/^proc safeProtocol*(linkStr: var string): string =$/;"	t
sameFile	$NIMLIB/std/private/ospaths2.nim	/^proc sameFile*(path1, path2: string): bool {.rtl, extern: "nos$1",$/;"	f
sameFileContent	$NIMLIB/pure/os.nim	/^proc sameFileContent*(path1, path2: string): bool {.rtl, extern: "nos$1",$/;"	f
sameType	$NIMLIB/core/macros.nim	/^proc sameType*(a, b: NimNode): bool {.magic: "SameNodeType", noSideEffect.} =$/;"	t
samp	$NIMLIB/pure/htmlgen.nim	/^macro samp*(e: varargs[untyped]): untyped =$/;"	t
sample	$NIMLIB/pure/random.nim	/^proc sample*[T](s: set[T]): T =$/;"	t
scanSSLCertificates	$NIMLIB/pure/ssl_certs.nim	/^iterator scanSSLCertificates*(useEnvVars = false): string =$/;"	t
scanTuple	$NIMLIB/pure/strscans.nim	/^macro scanTuple*(input: untyped; pattern: static[string]; matcherTypes: varargs[untyped]): untyp/;"	t
scanf	$NIMLIB/pure/strscans.nim	/^macro scanf*(input: string; pattern: static[string]; results: varargs[typed]): bool =$/;"	t
scanp	$NIMLIB/pure/strscans.nim	/^macro scanp*(input, idx: typed; pattern: varargs[untyped]): bool =$/;"	t
sched_get_priority_max	$NIMLIB/posix/posix.nim	/^proc sched_get_priority_max*(a1: cint): cint {.importc, header: "<sched.h>".}$/;"	f
sched_get_priority_min	$NIMLIB/posix/posix.nim	/^proc sched_get_priority_min*(a1: cint): cint {.importc, header: "<sched.h>".}$/;"	f
sched_getparam	$NIMLIB/posix/posix.nim	/^proc sched_getparam*(a1: Pid, a2: var Sched_param): cint {.$/;"	f
sched_getscheduler	$NIMLIB/posix/posix.nim	/^proc sched_getscheduler*(a1: Pid): cint {.importc, header: "<sched.h>".}$/;"	f
sched_rr_get_interval	$NIMLIB/posix/posix.nim	/^proc sched_rr_get_interval*(a1: Pid, a2: var Timespec): cint {.$/;"	f
sched_setparam	$NIMLIB/posix/posix.nim	/^proc sched_setparam*(a1: Pid, a2: var Sched_param): cint {.$/;"	f
sched_setscheduler	$NIMLIB/posix/posix.nim	/^proc sched_setscheduler*(a1: Pid, a2: cint, a3: var Sched_param): cint {.$/;"	f
sched_yield	$NIMLIB/posix/posix.nim	/^proc sched_yield*(): cint {.importc, header: "<sched.h>".}$/;"	f
scheduleCallbacks	$NIMLIB/pure/asyncdispatch.nim	/^  proc scheduleCallbacks*(): bool {.discardable.} =$/;"	t
screen	$NIMLIB/js/dom.nim	/^  screen* {.importc, nodecl.}: Screen$/;"	t
script	$NIMLIB/pure/htmlgen.nim	/^macro script*(e: varargs[untyped]): untyped =$/;"	t
scrollBy	$NIMLIB/js/dom.nim	/^proc scrollBy*(w: Window, x, y: int)$/;"	f
scrollHeight	$NIMLIB/js/dom.nim	/^proc scrollHeight*(e: Node): int {.importcpp: "#.scrollHeight", nodecl.}$/;"	f
scrollIntoView	$NIMLIB/js/dom.nim	/^proc scrollIntoView*(n: Node, options: ScrollIntoViewOptions)$/;"	f
scrollIntoViewIfNeeded	$NIMLIB/js/dom.nim	/^  proc scrollIntoViewIfNeeded*(self: Node; centerIfNeeded: bool) {.importjs: "#.$1(#)".}$/;"	f
scrollLeft	$NIMLIB/js/dom.nim	/^proc scrollLeft*(e: Node): int {.importcpp: "#.scrollLeft", nodecl.}$/;"	f
scrollTo	$NIMLIB/js/dom.nim	/^proc scrollTo*(w: Window, x, y: int)$/;"	f
scrollTop	$NIMLIB/js/dom.nim	/^proc scrollTop*(e: Node): int {.importcpp: "#.scrollTop", nodecl.}$/;"	f
scrollWidth	$NIMLIB/js/dom.nim	/^proc scrollWidth*(e: Node): int {.importcpp: "#.scrollWidth", nodecl.}$/;"	f
searchExtPos	$NIMLIB/std/private/ospaths2.nim	/^proc searchExtPos*(path: string): int =$/;"	t
sec	$NIMLIB/pure/complex.nim	/^func sec*[T](z: Complex[T]): Complex[T] =$/;"	t
sec	$NIMLIB/pure/math.nim	/^func sec*[T: float32|float64](x: T): T = 1.0 \/ cos(x)$/;"	t
sech	$NIMLIB/pure/complex.nim	/^func sech*[T](z: Complex[T]): Complex[T] =$/;"	t
sech	$NIMLIB/pure/math.nim	/^func sech*[T: float32|float64](x: T): T = 1.0 \/ cosh(x)$/;"	t
second	$NIMLIB/pure/times.nim	/^proc second*(dt: DateTime): SecondRange {.inline.} =$/;"	t
seconds	$NIMLIB/pure/times.nim	/^proc seconds*(s: int): TimeInterval {.inline.} =$/;"	t
section	$NIMLIB/pure/htmlgen.nim	/^macro section*(e: varargs[untyped]): untyped =$/;"	t
sections	$NIMLIB/pure/parsecfg.nim	/^iterator sections*(dict: Config): lent string {.since: (1, 5).} =$/;"	t
secureHash	$NIMLIB/std/sha1.nim	/^proc secureHash*(str: openArray[char]): SecureHash =$/;"	t
secureHashFile	$NIMLIB/std/sha1.nim	/^proc secureHashFile*(filename: string): SecureHash =$/;"	t
seekdir	$NIMLIB/posix/posix.nim	/^proc seekdir*(a1: ptr DIR, a2: int)  {.importc, header: "<dirent.h>".}$/;"	f
select	$NIMLIB/js/dom.nim	/^proc select*(e: Element)$/;"	f
select	$NIMLIB/posix/posix.nim	/^proc select*(a1: cint | SocketHandle, a2, a3, a4: ptr TFdSet, a5: ptr Timeval): cint {.$/;"	f
select	$NIMLIB/pure/htmlgen.nim	/^macro select*(e: varargs[untyped]): untyped =$/;"	t
select	$NIMLIB/pure/ioselects/ioselectors_epoll.nim	/^proc select*[T](s: Selector[T], timeout: int): seq[ReadyKey] =$/;"	t
select	$NIMLIB/pure/ioselects/ioselectors_kqueue.nim	/^proc select*[T](s: Selector[T], timeout: int): seq[ReadyKey] =$/;"	t
select	$NIMLIB/pure/ioselects/ioselectors_poll.nim	/^proc select*[T](s: Selector[T], timeout: int): seq[ReadyKey] =$/;"	t
select	$NIMLIB/pure/ioselects/ioselectors_select.nim	/^proc select*[T](s: Selector[T], timeout: int): seq[ReadyKey] =$/;"	t
select	$NIMLIB/pure/selectors.nim	/^  proc select*[T](s: Selector[T], timeout: int): seq[ReadyKey] =$/;"	t
select	$NIMLIB/windows/winlean.nim	/^proc select*(nfds: cint, readfds, writefds, exceptfds: ptr TFdSet,$/;"	f
selectInto	$NIMLIB/pure/ioselects/ioselectors_epoll.nim	/^proc selectInto*[T](s: Selector[T], timeout: int,$/;"	f
selectInto	$NIMLIB/pure/ioselects/ioselectors_kqueue.nim	/^proc selectInto*[T](s: Selector[T], timeout: int,$/;"	f
selectInto	$NIMLIB/pure/ioselects/ioselectors_poll.nim	/^proc selectInto*[T](s: Selector[T], timeout: int,$/;"	f
selectInto	$NIMLIB/pure/ioselects/ioselectors_select.nim	/^proc selectInto*[T](s: Selector[T], timeout: int,$/;"	f
selectInto	$NIMLIB/pure/selectors.nim	/^  proc selectInto*[T](s: Selector[T], timeout: int,$/;"	f
selectRead	$NIMLIB/pure/nativesockets.nim	/^proc selectRead*(readfds: var seq[SocketHandle], timeout = 500): int =$/;"	t
selectWrite	$NIMLIB/pure/nativesockets.nim	/^proc selectWrite*(writefds: var seq[SocketHandle],$/;"	f
selfExe	$NIMLIB/system/nimscript.nim	/^proc selfExe*(): string {.deprecated: "Deprecated since v1.7; Use getCurrentCompilerExe".} =$/;"	t
selfExec	$NIMLIB/system/nimscript.nim	/^proc selfExec*(command: string) {.$/;"	f
sem_close	$NIMLIB/posix/posix.nim	/^proc sem_close*(a1: ptr Sem): cint {.importc, header: "<semaphore.h>".}$/;"	f
sem_destroy	$NIMLIB/posix/posix.nim	/^proc sem_destroy*(a1: ptr Sem): cint {.importc, header: "<semaphore.h>".}$/;"	f
sem_getvalue	$NIMLIB/posix/posix.nim	/^proc sem_getvalue*(a1: ptr Sem, a2: var cint): cint {.$/;"	f
sem_init	$NIMLIB/posix/posix.nim	/^proc sem_init*(a1: ptr Sem, a2: cint, a3: cint): cint {.$/;"	f
sem_open	$NIMLIB/posix/posix.nim	/^proc sem_open*(a1: cstring, a2: cint): ptr Sem {.$/;"	f
sem_post	$NIMLIB/posix/posix.nim	/^proc sem_post*(a1: ptr Sem): cint {.importc, header: "<semaphore.h>".}$/;"	f
sem_timedwait	$NIMLIB/posix/posix.nim	/^proc sem_timedwait*(a1: ptr Sem, a2: ptr Timespec): cint {.$/;"	f
sem_trywait	$NIMLIB/posix/posix.nim	/^proc sem_trywait*(a1: ptr Sem): cint {.importc, header: "<semaphore.h>".}$/;"	f
sem_unlink	$NIMLIB/posix/posix.nim	/^proc sem_unlink*(a1: cstring): cint {.importc, header: "<semaphore.h>".}$/;"	f
sem_wait	$NIMLIB/posix/posix.nim	/^proc sem_wait*(a1: ptr Sem): cint {.importc, header: "<semaphore.h>".}$/;"	f
semantics	$NIMLIB/pure/htmlgen.nim	/^macro semantics*(e: varargs[untyped]): untyped =$/;"	t
send	$NIMLIB/posix/posix.nim	/^proc send*(a1: SocketHandle, a2: pointer, a3: int, a4: cint): int {.$/;"	f
send	$NIMLIB/pure/asyncdispatch.nim	/^proc send*(socket: AsyncFD, data: string,$/;"	f
send	$NIMLIB/pure/asyncnet.nim	/^proc send*(socket: AsyncSocket, data: string,$/;"	f
send	$NIMLIB/pure/net.nim	/^proc send*(socket: Socket, data: string,$/;"	f
send	$NIMLIB/system/channels_builtin.nim	/^proc send*[TMsg](c: var Channel[TMsg], msg: sink TMsg) {.inline.} =$/;"	t
send	$NIMLIB/windows/winlean.nim	/^proc send*(s: SocketHandle, buf: pointer, len, flags: cint): cint {.$/;"	f
sendBeacon	$NIMLIB/js/dom.nim	/^  proc sendBeacon*(self: Navigator; url, data: cstring): bool    ## https:\/\/developer.mozilla./;"	f
sendHeaders	$NIMLIB/pure/asynchttpserver.nim	/^proc sendHeaders*(req: Request, headers: HttpHeaders): Future[void] =$/;"	t
sendSignal	$NIMLIB/posix/posix_utils.nim	/^proc sendSignal*(pid: Pid, signal: int) =$/;"	t
sendTo	$NIMLIB/pure/asyncdispatch.nim	/^  proc sendTo*(socket: AsyncFD, data: pointer, size: int, saddr: ptr SockAddr,$/;"	f
sendTo	$NIMLIB/pure/asyncnet.nim	/^proc sendTo*(socket: AsyncSocket, address: string, port: Port, data: string,$/;"	f
sendTo	$NIMLIB/pure/net.nim	/^proc sendTo*(socket: Socket, address: string, port: Port,$/;"	f
sendmsg	$NIMLIB/posix/posix.nim	/^proc sendmsg*(a1: SocketHandle, a2: ptr Tmsghdr, a3: cint): int {.$/;"	f
sendto	$NIMLIB/posix/posix.nim	/^proc sendto*(a1: SocketHandle, a2: pointer, a3: int, a4: cint, a5: ptr SockAddr,$/;"	f
sendto	$NIMLIB/windows/winlean.nim	/^proc sendto*(s: SocketHandle, buf: pointer, len, flags: cint,$/;"	f
serve	$NIMLIB/pure/asynchttpserver.nim	/^proc serve*(server: AsyncHttpServer, port: Port,$/;"	f
serverGetPskFunc	$NIMLIB/pure/net.nim	/^  proc serverGetPskFunc*(ctx: SslContext): SslServerGetPskFunc =$/;"	t
sessionIdContext	$NIMLIB/pure/net.nim	/^  proc `sessionIdContext=`*(ctx: SslContext, sidCtx: string) =$/;"	o
setAffinity	$NIMLIB/std/private/threadtypes.nim	/^    proc setAffinity*(thread: SysThread; setsize: csize_t; s: var CpuSet) {.$/;"	f
setAffinityTID	$NIMLIB/std/private/threadtypes.nim	/^    proc setAffinityTID*(tid: Pid; setsize: csize_t; s: var CpuSet) {.$/;"	f
setAttr	$NIMLIB/js/dom.nim	/^proc setAttr*(n: Node; key, val: cstring) {.importcpp: "#.setAttribute(@)".}$/;"	f
setAttribute	$NIMLIB/js/dom.nim	/^proc setAttribute*(n: Node, name, value: cstring)$/;"	f
setAttributeNode	$NIMLIB/js/dom.nim	/^proc setAttributeNode*(n: Node, attr: Node)$/;"	f
setBackgroundColor	$NIMLIB/pure/terminal.nim	/^template setBackgroundColor*(color: Color) =$/;"	t
setBiggestFloat	$NIMLIB/core/typeinfo.nim	/^proc setBiggestFloat*(x: Any, y: BiggestFloat) =$/;"	t
setBiggestInt	$NIMLIB/core/typeinfo.nim	/^proc setBiggestInt*(x: Any, y: BiggestInt) =$/;"	t
setBiggestUint	$NIMLIB/core/typeinfo.nim	/^proc setBiggestUint*(x: Any; y: uint64) =$/;"	t
setBit	$NIMLIB/pure/bitops.nim	/^proc setBit*[T: SomeInteger](v: var T; bit: BitsRange[T]) {.inline.} =$/;"	t
setBits	$NIMLIB/pure/bitops.nim	/^macro setBits*(v: typed; bits: varargs[typed]): untyped =$/;"	t
setBlocking	$NIMLIB/pure/nativesockets.nim	/^proc setBlocking*(s: SocketHandle, blocking: bool) =$/;"	t
setCallSoonProc	$NIMLIB/pure/asyncfutures.nim	/^proc setCallSoonProc*(p: (proc(cbproc: proc ()) {.gcsafe.})) =$/;"	t
setCommand	$NIMLIB/system/nimscript.nim	/^proc setCommand*(cmd: string; project="") =$/;"	t
setCompletionCallback	$NIMLIB/wrappers/linenoise/linenoise.nim	/^proc setCompletionCallback*(a2: CompletionCallback) {.$/;"	f
setControlCHook	$NIMLIB/system.nim	/^  proc setControlCHook*(hook: proc () {.noconv.})$/;"	f
setCookie	$NIMLIB/pure/cgi.nim	/^proc setCookie*(name, value: string) =$/;"	t
setCookie	$NIMLIB/pure/cookies.nim	/^proc setCookie*(key, value: string, expires: DateTime|Time,$/;"	f
setCurrFilename	$NIMLIB/packages/docutils/rst.nim	/^proc setCurrFilename*(s: PRstSharedState, file1: string) =$/;"	t
setCurrentDir	$NIMLIB/std/dirs.nim	/^proc setCurrentDir*(newDir: Path) {.inline, tags: [].} =$/;"	t
setCurrentDir	$NIMLIB/std/private/osdirs.nim	/^proc setCurrentDir*(newDir: string) {.inline, tags: [], noWeirdTarget.} =$/;"	t
setCurrentDirectoryW	$NIMLIB/windows/winlean.nim	/^proc setCurrentDirectoryW*(lpPathName: WideCString): int32 {.$/;"	f
setCurrentException	$NIMLIB/system.nim	/^  proc setCurrentException*(exc: ref Exception) {.inline, benign.} =$/;"	t
setCurrentException	$NIMLIB/system/jssys.nim	/^proc setCurrentException*(exc: ref Exception) =$/;"	t
setCursorPos	$NIMLIB/pure/terminal.nim	/^template setCursorPos*(x, y: int) = setCursorPos(stdout, x, y)$/;"	t
setCursorXPos	$NIMLIB/pure/terminal.nim	/^template setCursorXPos*(x: int) = setCursorXPos(stdout, x)$/;"	t
setCursorYPos	$NIMLIB/pure/terminal.nim	/^  template setCursorYPos*(x: int) = setCursorYPos(stdout, x)$/;"	t
setCustomValidity	$NIMLIB/js/dom.nim	/^proc setCustomValidity*(e: InputElement, error: cstring)$/;"	f
setData	$NIMLIB/js/dom.nim	/^proc setData*(dt: DataTransfer, format: cstring, data: cstring)$/;"	f
setData	$NIMLIB/pure/ioselects/ioselectors_epoll.nim	/^proc setData*[T](s: Selector[T], fd: SocketHandle|int, data: T): bool =$/;"	t
setData	$NIMLIB/pure/ioselects/ioselectors_kqueue.nim	/^proc setData*[T](s: Selector[T], fd: SocketHandle|int, data: T): bool =$/;"	t
setData	$NIMLIB/pure/ioselects/ioselectors_poll.nim	/^proc setData*[T](s: Selector[T], fd: SocketHandle|int, data: T): bool =$/;"	t
setData	$NIMLIB/pure/ioselects/ioselectors_select.nim	/^proc setData*[T](s: Selector[T], fd: SocketHandle|int, data: T): bool =$/;"	t
setData	$NIMLIB/pure/selectors.nim	/^  proc setData*[T](s: Selector[T], fd: SocketHandle|int, data: var T): bool =$/;"	t
setDragImage	$NIMLIB/js/dom.nim	/^proc setDragImage*(dt: DataTransfer, img: Element, xOffset: int64, yOffset: int64)$/;"	f
setEndOfFile	$NIMLIB/windows/winlean.nim	/^proc setEndOfFile*(hFile: Handle): WINBOOL {.stdcall, dynlib: "kernel32",$/;"	f
setEnvImpl	$NIMLIB/std/private/win_setenv.nim	/^  proc setEnvImpl*(name: string, value: string, overwrite: cint): cint =$/;"	t
setEnvironmentVariableW	$NIMLIB/std/private/win_setenv.nim	/^  proc setEnvironmentVariableW*(lpName, lpValue: WideCString): int32 {.$/;"	f
setEnvironmentVariableW	$NIMLIB/windows/winlean.nim	/^proc setEnvironmentVariableW*(lpName, lpValue: WideCString): int32 {.$/;"	f
setErrorFunc	$NIMLIB/wrappers/tinyc.nim	/^proc setErrorFunc*(s: PccState, errorOpaque: pointer, errorFun: ErrorFunc) {.$/;"	f
setEvent	$NIMLIB/windows/winlean.nim	/^proc setEvent*(hEvent: Handle): cint$/;"	f
setExtraData	$NIMLIB/pure/net.nim	/^  proc setExtraData*(ctx: SslContext, index: int, data: RootRef) =$/;"	t
setFileAttributesW	$NIMLIB/windows/winlean.nim	/^proc setFileAttributesW*(lpFileName: WideCString,$/;"	f
setFilePermissions	$NIMLIB/std/private/osfiles.nim	/^proc setFilePermissions*(filename: string, permissions: set[FilePermission],$/;"	f
setFilePointer	$NIMLIB/windows/winlean.nim	/^proc setFilePointer*(hFile: Handle, lDistanceToMove: LONG,$/;"	f
setFilePos	$NIMLIB/pure/asyncfile.nim	/^proc setFilePos*(f: AsyncFile, pos: int64) =$/;"	t
setFilePos	$NIMLIB/std/syncio.nim	/^proc setFilePos*(f: File, pos: int64, relativeTo: FileSeekPos = fspSet) {.benign.} =$/;"	t
setFileSize	$NIMLIB/pure/asyncfile.nim	/^proc setFileSize*(f: AsyncFile, length: int64) =$/;"	t
setFileTime	$NIMLIB/windows/winlean.nim	/^proc setFileTime*(hFile: Handle, lpCreationTime: LPFILETIME,$/;"	f
setForegroundColor	$NIMLIB/pure/terminal.nim	/^template setForegroundColor*(fg: ForegroundColor, bright = false) =$/;"	t
setFrame	$NIMLIB/system/excpt.nim	/^proc setFrame*(s: PFrame) {.compilerRtl, inl.} =$/;"	t
setFrameMsg	$NIMLIB/std/stackframes.nim	/^template setFrameMsg*(msg: string, prefix = " ") =$/;"	t
setFrameState	$NIMLIB/system/excpt.nim	/^proc setFrameState*(state: FrameState) {.compilerRtl, inl.} =$/;"	t
setFullYear	$NIMLIB/js/jscore.nim	/^proc setFullYear*(d: DateTime, year: int) {.importcpp.}$/;"	f
setGcFrame	$NIMLIB/system/excpt.nim	/^proc setGcFrame*(s: GcFrame) {.compilerRtl, inl.} = gcFramePtr = s$/;"	t
setGlobalDispatcher	$NIMLIB/pure/asyncdispatch.nim	/^  proc setGlobalDispatcher*(disp: sink PDispatcher) =$/;"	t
setHTML	$NIMLIB/js/dom.nim	/^  proc setHTML*(self: Node; html: cstring) {.importjs: "#.$1(#)".}$/;"	f
setHandleInformation	$NIMLIB/windows/winlean.nim	/^proc setHandleInformation*(hObject: Handle, dwMask: DWORD,$/;"	f
setIndexTerm	$NIMLIB/packages/docutils/rstgen.nim	/^proc setIndexTerm*(d: var RstGenerator; k: IndexEntryKind, htmlFile, id, term: string,$/;"	f
setInheritable	$NIMLIB/pure/asyncdispatch.nim	/^    proc setInheritable*(fd: AsyncFD, inheritable: bool): bool =$/;"	t
setInheritable	$NIMLIB/pure/nativesockets.nim	/^  proc setInheritable*(s: SocketHandle, inheritable: bool): bool {.inline.} =$/;"	t
setInheritable	$NIMLIB/std/syncio.nim	/^  proc setInheritable*(f: FileHandle, inheritable: bool): bool =$/;"	t
setInterval	$NIMLIB/js/dom.nim	/^proc setInterval*(w: Window, function: proc (), pause: int): Interval$/;"	f
setItem	$NIMLIB/js/dom.nim	/^proc setItem*(s: Storage, key, value: cstring)$/;"	f
setLastError	$NIMLIB/windows/winlean.nim	/^proc setLastError*(error: int32) {.importc: "SetLastError",$/;"	f
setLastModificationTime	$NIMLIB/pure/os.nim	/^proc setLastModificationTime*(file: string, t: times.Time) {.noWeirdTarget.} =$/;"	t
setLen	$NIMLIB/pure/reservedmem.nim	/^proc setLen*[T](s: var ReservedMemSeq[T], newLen: int) =$/;"	t
setLen	$NIMLIB/system.nim	/^proc setLen*[T](s: var seq[T], newlen: Natural) {.$/;"	f
setLibPath	$NIMLIB/wrappers/tinyc.nim	/^proc setLibPath*(s: PccState, path: cstring) {.cdecl,$/;"	f
setLineInfo	$NIMLIB/core/macros.nim	/^proc setLineInfo*(arg: NimNode, lineInfo: LineInfo) =$/;"	t
setLogFilter	$NIMLIB/pure/logging.nim	/^proc setLogFilter*(lvl: Level) =$/;"	t
setMask	$NIMLIB/pure/bitops.nim	/^proc setMask*[T: SomeInteger](v: var T; slice: Slice[int]) {.inline, since: (1, 3).} =$/;"	t
setMasked	$NIMLIB/pure/bitops.nim	/^func setMasked*[T: SomeInteger](v: T; slice: Slice[int]): T {.inline, since: (1, 3).} =$/;"	t
setMaxPoolSize	$NIMLIB/pure/concurrency/threadpool.nim	/^proc setMaxPoolSize*(size: range[1..MaxThreadPoolSize]) =$/;"	t
setMinPoolSize	$NIMLIB/pure/concurrency/threadpool.nim	/^proc setMinPoolSize*(size: range[1..MaxThreadPoolSize]) =$/;"	t
setMultiLine	$NIMLIB/wrappers/linenoise/linenoise.nim	/^proc setMultiLine*(ml: cint) {.importc: "linenoiseSetMultiLine".}$/;"	f
setObjectRuntimeType	$NIMLIB/core/typeinfo.nim	/^proc setObjectRuntimeType*(x: Any) =$/;"	t
setObstackPtr	$NIMLIB/system/gc_regions.nim	/^proc setObstackPtr*(sp: StackPtr) = tlRegion.setObstackPtr(sp)$/;"	t
setOptions	$NIMLIB/wrappers/tinyc.nim	/^proc setOptions*(s: PccState, options: cstring) {.cdecl, importc: "tcc_set_options".}$/;"	f
setOutputType	$NIMLIB/wrappers/tinyc.nim	/^proc setOutputType*(s: PccState, outputType: cint): cint {.cdecl,$/;"	f
setPointer	$NIMLIB/core/typeinfo.nim	/^proc setPointer*(x: Any, y: pointer) =$/;"	t
setPosition	$NIMLIB/pure/streams.nim	/^proc setPosition*(s: Stream, pos: int) =$/;"	t
setProgramResult	$NIMLIB/std/exitprocs.nim	/^  proc setProgramResult*(a: int) =$/;"	t
setProperty	$NIMLIB/js/dom.nim	/^proc setProperty*(s: Style, property, value: cstring, priority = "")$/;"	t
setRangeText	$NIMLIB/js/dom.nim	/^proc setRangeText*(e: InputElement, replacement: cstring, startindex: int = 0, endindex: int = 0/;"	t
setSamplingFrequency	$NIMLIB/pure/nimprof.nim	/^  proc setSamplingFrequency*(intervalInUs: int) =$/;"	t
setSectionKey	$NIMLIB/pure/parsecfg.nim	/^proc setSectionKey*(dict: var Config, section, key, value: string) =$/;"	t
setSelectionRange	$NIMLIB/js/dom.nim	/^proc setSelectionRange*(e: InputElement, selectionStart: int, selectionEnd: int, selectionDirect/;"	t
setSlice	$NIMLIB/std/strbasics.nim	/^func setSlice*(s: var string, slice: Slice[int]) =$/;"	t
setSockOpt	$NIMLIB/pure/asyncnet.nim	/^proc setSockOpt*(socket: AsyncSocket, opt: SOBool, value: bool,$/;"	f
setSockOpt	$NIMLIB/pure/net.nim	/^proc setSockOpt*(socket: Socket, opt: SOBool, value: bool,$/;"	f
setSockOptInt	$NIMLIB/pure/nativesockets.nim	/^proc setSockOptInt*(socket: SocketHandle, level, optname, optval: int) {.$/;"	f
setStackTraceStdout	$NIMLIB/pure/cgi.nim	/^proc setStackTraceStdout*() =$/;"	t
setStdHandle	$NIMLIB/windows/winlean.nim	/^proc setStdHandle*(nStdHandle: int32, hHandle: Handle): WINBOOL {.stdcall,$/;"	f
setStdIoUnbuffered	$NIMLIB/std/syncio.nim	/^proc setStdIoUnbuffered*() {.tags: [], benign.} =$/;"	t
setString	$NIMLIB/core/typeinfo.nim	/^proc setString*(x: Any, y: string) =$/;"	t
setStyle	$NIMLIB/pure/terminal.nim	/^template setStyle*(style: set[Style]) =$/;"	t
setSysLockType	$NIMLIB/std/private/syslocks.nim	/^  proc setSysLockType*(a: var SysLockAttr, t: SysLockType) {.$/;"	f
setTestData	$NIMLIB/pure/cgi.nim	/^proc setTestData*(keysvalues: varargs[string]) =$/;"	t
setThreadAffinityMask	$NIMLIB/std/private/threadtypes.nim	/^  proc setThreadAffinityMask*(hThread: SysThread, dwThreadAffinityMask: uint) {.$/;"	f
setTimeout	$NIMLIB/js/dom.nim	/^proc setTimeout*(w: Window, function: proc (), pause: int): Interval$/;"	f
setTrackLogger	$NIMLIB/system/memtracker.nim	/^proc setTrackLogger*(logger: TrackLogger) =$/;"	t
setUnicodeValue	$NIMLIB/windows/registry.nim	/^proc setUnicodeValue*(path, key, val: string; handle: HKEY) =$/;"	t
setcontext	$NIMLIB/posix/posix.nim	/^  proc setcontext*(a1: var Ucontext): cint {.importc, header: "<ucontext.h>".}$/;"	f
setegid	$NIMLIB/posix/posix.nim	/^proc setegid*(a1: Gid): cint {.importc, header: "<unistd.h>".}$/;"	f
seteuid	$NIMLIB/posix/posix.nim	/^proc seteuid*(a1: Uid): cint {.importc, header: "<unistd.h>".}$/;"	f
setgid	$NIMLIB/posix/posix.nim	/^proc setgid*(a1: Gid): cint {.importc, header: "<unistd.h>".}$/;"	f
setgrent	$NIMLIB/posix/posix.nim	/^proc setgrent*() {.importc, header: "<grp.h>".}$/;"	f
sethostent	$NIMLIB/posix/posix.nim	/^proc sethostent*(a1: cint) {.importc, header: "<netdb.h>".}$/;"	f
setlocale	$NIMLIB/posix/posix.nim	/^proc setlocale*(a1: cint, a2: cstring): cstring {.$/;"	f
setnetent	$NIMLIB/posix/posix.nim	/^proc setnetent*(a1: cint) {.importc, header: "<netdb.h>".}$/;"	f
setpgid	$NIMLIB/posix/posix.nim	/^proc setpgid*(a1, a2: Pid): cint {.importc, header: "<unistd.h>".}$/;"	f
setpgrp	$NIMLIB/posix/posix.nim	/^proc setpgrp*(): Pid {.importc, header: "<unistd.h>".}$/;"	f
setprotoent	$NIMLIB/posix/posix.nim	/^proc setprotoent*(a1: cint) {.importc, header: "<netdb.h>".}$/;"	f
setpwent	$NIMLIB/posix/posix.nim	/^proc setpwent*() {.importc, header: "<pwd.h>".}$/;"	f
setregid	$NIMLIB/posix/posix.nim	/^proc setregid*(a1, a2: Gid): cint {.importc, header: "<unistd.h>".}$/;"	f
setreuid	$NIMLIB/posix/posix.nim	/^proc setreuid*(a1, a2: Uid): cint {.importc, header: "<unistd.h>".}$/;"	f
setrlimit	$NIMLIB/posix/posix.nim	/^proc setrlimit*(resource: cint, rlp: var RLimit): cint {.$/;"	f
setservent	$NIMLIB/posix/posix.nim	/^proc setservent*(a1: cint) {.importc, header: "<netdb.h>".}$/;"	f
setsid	$NIMLIB/posix/posix.nim	/^proc setsid*(): Pid {.importc, header: "<unistd.h>".}$/;"	f
setsockopt	$NIMLIB/posix/posix.nim	/^proc setsockopt*(a1: SocketHandle, a2, a3: cint, a4: pointer, a5: SockLen): cint {.$/;"	f
setsockopt	$NIMLIB/windows/winlean.nim	/^proc setsockopt*(s: SocketHandle, level, optname: cint, optval: pointer,$/;"	f
setuid	$NIMLIB/posix/posix.nim	/^proc setuid*(a1: Uid): cint {.importc, header: "<unistd.h>".}$/;"	f
setupForeignThreadGc	$NIMLIB/system/arc.nim	/^template setupForeignThreadGc* =$/;"	t
setupForeignThreadGc	$NIMLIB/system/gc_common.nim	/^  template setupForeignThreadGc*() =$/;"	t
sgn	$NIMLIB/pure/complex.nim	/^func sgn*[T](z: Complex[T]): Complex[T] =$/;"	t
sgn	$NIMLIB/pure/math.nim	/^func sgn*[T: SomeNumber](x: T): int {.inline.} =$/;"	t
shallow	$NIMLIB/system.nim	/^  proc shallow*[T](s: var seq[T]) {.noSideEffect, inline.} =$/;"	t
shallowCopy	$NIMLIB/system.nim	/^  proc shallowCopy*[T](x: var T, y: T) {.noSideEffect, magic: "ShallowCopy".}$/;"	f
shellExecuteW	$NIMLIB/windows/winlean.nim	/^proc shellExecuteW*(hwnd: Handle, lpOperation, lpFile,$/;"	f
shift	$NIMLIB/js/jscore.nim	/^  func shift*[T](self: seq[T]): T {.importjs: "#.$1()".} =$/;"	t
shift	$NIMLIB/pure/reservedmem.nim	/^template shift*(p: pointer, distance: int): pointer =$/;"	t
shl	$NIMLIB/std/jsbigints.nim	/^func `shl`*(a, b: JsBigInt): JsBigInt {.importjs: "(# << #)".} =$/;"	o
shl	$NIMLIB/system/arithmetics.nim	/^proc `shl`*(x: uint8, y: SomeInteger): uint8 {.magic: "ShlI", noSideEffect.}$/;"	o
shm_open	$NIMLIB/posix/posix.nim	/^proc shm_open*(a1: cstring, a2: cint, a3: Mode): cint {.$/;"	f
shm_unlink	$NIMLIB/posix/posix.nim	/^proc shm_unlink*(a1: cstring): cint {.importc, header: "<sys\/mman.h>".}$/;"	f
shouldAcceptRequest	$NIMLIB/pure/asynchttpserver.nim	/^proc shouldAcceptRequest*(server: AsyncHttpServer;$/;"	f
showCursor	$NIMLIB/pure/terminal.nim	/^template showCursor*() = showCursor(stdout)$/;"	t
shr	$NIMLIB/std/jsbigints.nim	/^func `shr`*(a, b: JsBigInt): JsBigInt {.importjs: "(# >> #)".} =$/;"	o
shr	$NIMLIB/system/arithmetics.nim	/^proc `shr`*(x: uint8, y: SomeInteger): uint8 {.magic: "ShrI", noSideEffect.}$/;"	o
shrink	$NIMLIB/pure/collections/deques.nim	/^proc shrink*[T](deq: var Deque[T], fromFirst = 0, fromLast = 0) =$/;"	t
shrink	$NIMLIB/system/seqs_v2.nim	/^proc shrink*[T](x: var seq[T]; newLen: Natural) {.tags: [], raises: [].} =$/;"	t
shuffle	$NIMLIB/pure/random.nim	/^proc shuffle*[T](x: var openArray[T]) =$/;"	t
shutdown	$NIMLIB/posix/posix.nim	/^proc shutdown*(a1: SocketHandle, a2: cint): cint {.$/;"	f
shutdown	$NIMLIB/windows/winlean.nim	/^proc shutdown*(s: SocketHandle, how: cint): cint {.$/;"	f
si_pid	$NIMLIB/posix/posix_nintendoswitch.nim	/^proc si_pid*(info: SigInfo): Pid =$/;"	t
sigaction	$NIMLIB/posix/posix.nim	/^proc sigaction*(a1: cint, a2: var Sigaction; a3: ptr Sigaction = nil): cint {.$/;"	t
sigaddset	$NIMLIB/posix/posix.nim	/^proc sigaddset*(a1: var Sigset, a2: cint): cint {.importc, header: "<signal.h>".}$/;"	f
sigaltstack	$NIMLIB/posix/posix.nim	/^proc sigaltstack*(a1, a2: var Stack): cint {.importc, header: "<signal.h>".}$/;"	f
sigdelset	$NIMLIB/posix/posix.nim	/^proc sigdelset*(a1: var Sigset, a2: cint): cint {.importc, header: "<signal.h>".}$/;"	f
sigemptyset	$NIMLIB/posix/posix.nim	/^proc sigemptyset*(a1: var Sigset): cint {.importc, header: "<signal.h>".}$/;"	f
sigfillset	$NIMLIB/posix/posix.nim	/^proc sigfillset*(a1: var Sigset): cint {.importc, header: "<signal.h>".}$/;"	f
sighold	$NIMLIB/posix/posix.nim	/^proc sighold*(a1: cint): cint {.importc, header: "<signal.h>".}$/;"	f
sigignore	$NIMLIB/posix/posix.nim	/^proc sigignore*(a1: cint): cint {.importc, header: "<signal.h>".}$/;"	f
siginterrupt	$NIMLIB/posix/posix.nim	/^proc siginterrupt*(a1, a2: cint): cint {.importc, header: "<signal.h>".}$/;"	f
sigismember	$NIMLIB/posix/posix.nim	/^proc sigismember*(a1: var Sigset, a2: cint): cint {.importc, header: "<signal.h>".}$/;"	f
sign	$NIMLIB/js/jscore.nim	/^proc sign*(m: MathLib, f: SomeNumber): int {.importcpp.}$/;"	f
signBit	$NIMLIB/std/private/dragonbox.nim	/^proc signBit*(this: Double): int {.noSideEffect.} =$/;"	t
signMask	$NIMLIB/std/private/dragonbox.nim	/^  signMask*: BitsType = not (not BitsType(0) shr 1)$/;"	t
signal	$NIMLIB/core/locks.nim	/^proc signal*(cond: var Cond) {.inline.} =$/;"	t
signal	$NIMLIB/posix/posix.nim	/^proc signal*(a1: cint, a2: Sighandler) {.$/;"	f
signalFence	$NIMLIB/pure/concurrency/atomics.nim	/^  proc signalFence*(order: MemoryOrder) {.importcpp: "std::atomic_signal_fence(@)".}$/;"	f
signalSysCond	$NIMLIB/std/private/syslocks.nim	/^  proc signalSysCond*(hEvent: var SysCond) {.stdcall, noSideEffect,$/;"	f
signatureHash	$NIMLIB/core/macros.nim	/^proc signatureHash*(n: NimNode): string {.magic: "NSigHash", noSideEffect.}$/;"	f
signbit	$NIMLIB/pure/math.nim	/^proc signbit*(x: SomeFloat): bool {.inline, since: (1, 5, 1).} =$/;"	t
significandMask	$NIMLIB/std/private/dragonbox.nim	/^  significandMask*: BitsType = hiddenBit - 1$/;"	t
significandSize	$NIMLIB/std/private/dragonbox.nim	/^  significandSize*: int32 = 53$/;"	t
sigpause	$NIMLIB/posix/posix.nim	/^proc sigpause*(a1: cint): cint {.importc, header: "<signal.h>".}$/;"	f
sigpending	$NIMLIB/posix/posix.nim	/^proc sigpending*(a1: var Sigset): cint {.importc, header: "<signal.h>".}$/;"	f
sigprocmask	$NIMLIB/posix/posix.nim	/^proc sigprocmask*(a1: cint, a2, a3: var Sigset): cint {.$/;"	f
sigqueue	$NIMLIB/posix/posix.nim	/^proc sigqueue*(a1: Pid, a2: cint, a3: SigVal): cint {.$/;"	f
sigrelse	$NIMLIB/posix/posix.nim	/^proc sigrelse*(a1: cint): cint {.importc, header: "<signal.h>".}$/;"	f
sigset	$NIMLIB/posix/posix.nim	/^proc sigset*(a1: int, a2: proc (x: cint) {.noconv.}) {.$/;"	f
sigsuspend	$NIMLIB/posix/posix.nim	/^proc sigsuspend*(a1: var Sigset): cint {.importc, header: "<signal.h>".}$/;"	f
sigtimedwait	$NIMLIB/posix/posix.nim	/^  proc sigtimedwait*(a1: var Sigset, a2: var SigInfo,$/;"	f
sigwait	$NIMLIB/posix/posix.nim	/^proc sigwait*(a1: var Sigset, a2: var cint): cint {.$/;"	f
sigwaitinfo	$NIMLIB/posix/posix.nim	/^proc sigwaitinfo*(a1: var Sigset, a2: var SigInfo): cint {.$/;"	f
sin	$NIMLIB/js/jscore.nim	/^proc sin*(m: MathLib, a: SomeNumber): float {.importcpp.}$/;"	f
sin	$NIMLIB/pure/complex.nim	/^func sin*[T](z: Complex[T]): Complex[T] =$/;"	t
sin	$NIMLIB/pure/math.nim	/^  func sin*(x: float64): float64 {.importc: "sin", header: "<math.h>".} =$/;"	t
since	$NIMLIB/std/private/since.nim	/^template since*(version: (int, int, int), body: untyped) {.dirty.} =$/;"	t
sinh	$NIMLIB/js/jscore.nim	/^proc sinh*(m: MathLib, a: SomeNumber): float {.importcpp.}$/;"	f
sinh	$NIMLIB/pure/complex.nim	/^func sinh*[T](z: Complex[T]): Complex[T] =$/;"	t
sinh	$NIMLIB/pure/math.nim	/^  func sinh*(x: float64): float64 {.importc: "sinh", header: "<math.h>".} =$/;"	t
size	$NIMLIB/core/typeinfo.nim	/^proc size*(x: Any): int {.inline.} =$/;"	t
size	$NIMLIB/pure/unicode.nim	/^proc size*(r: Rune): int {.noSideEffect.} =$/;"	t
sizeof	$NIMLIB/system.nim	/^proc sizeof*[T](x: T): int {.magic: "SizeOf", noSideEffect.}$/;"	f
skewness	$NIMLIB/pure/stats.nim	/^proc skewness*[T](x: openArray[T]): float =$/;"	t
skewnessS	$NIMLIB/pure/stats.nim	/^proc skewnessS*[T](x: openArray[T]): float =$/;"	t
skip	$NIMLIB/pure/net.nim	/^proc skip*(socket: Socket, size: int, timeout = -1) =$/;"	t
skip	$NIMLIB/pure/parseutils.nim	/^proc skip*(s, token: string, start = 0): int {.inline.} =$/;"	t
skip	$NIMLIB/pure/unittest.nim	/^template skip* =$/;"	t
skipFindData	$NIMLIB/std/private/oscommon.nim	/^  proc skipFindData*(f: WIN32_FIND_DATA): bool {.inline.} =$/;"	t
skipIgnoreCase	$NIMLIB/pure/parseutils.nim	/^proc skipIgnoreCase*(s, token: string, start = 0): int =$/;"	t
skipRandomNumbers	$NIMLIB/pure/random.nim	/^proc skipRandomNumbers*(s: var Rand) =$/;"	t
skipRange	$NIMLIB/core/typeinfo.nim	/^proc skipRange*(x: Any): Any =$/;"	t
skipUntil	$NIMLIB/pure/parseutils.nim	/^proc skipUntil*(s: string, until: set[char], start = 0): int {.inline.} =$/;"	t
skipWhile	$NIMLIB/pure/parseutils.nim	/^proc skipWhile*(s: string, toSkip: set[char], start = 0): int {.inline.} =$/;"	t
skipWhitespace	$NIMLIB/pure/parseutils.nim	/^proc skipWhitespace*(s: string, start = 0): int {.inline.} =$/;"	t
sleep	$NIMLIB/posix/posix.nim	/^proc sleep*(a1: cint): cint {.importc, header: "<unistd.h>".}$/;"	f
sleep	$NIMLIB/pure/os.nim	/^proc sleep*(milsecs: int) {.rtl, extern: "nos$1", tags: [TimeEffect], noWeirdTarget.} =$/;"	t
sleep	$NIMLIB/windows/winlean.nim	/^proc sleep*(dwMilliseconds: int32){.stdcall, dynlib: "kernel32",$/;"	f
sleepAsync	$NIMLIB/pure/asyncdispatch.nim	/^proc sleepAsync*(ms: int | float): owned(Future[void]) =$/;"	t
slice	$NIMLIB/js/dom.nim	/^proc slice*(e: Blob, startindex: int = 0, endindex: int = e.size, contentType: cstring = "")$/;"	t
slope	$NIMLIB/pure/stats.nim	/^proc slope*(r: RunningRegress): float =$/;"	t
slot	$NIMLIB/pure/htmlgen.nim	/^macro slot*(e: varargs[untyped]): untyped =$/;"	t
slurp	$NIMLIB/system/compilation.nim	/^proc slurp*(filename: string): string {.magic: "Slurp".}$/;"	f
small	$NIMLIB/pure/htmlgen.nim	/^macro small*(e: varargs[untyped]): untyped =$/;"	t
smallest	$NIMLIB/pure/collections/tables.nim	/^proc smallest*[A](t: CountTable[A]): tuple[key: A, val: int] =$/;"	t
sockatmark	$NIMLIB/posix/posix.nim	/^proc sockatmark*(a1: cint): cint {.$/;"	f
socket	$NIMLIB/posix/posix.nim	/^proc socket*(a1, a2, a3: cint): SocketHandle {.$/;"	f
socket	$NIMLIB/windows/winlean.nim	/^proc socket*(af, typ, protocol: cint): SocketHandle {.$/;"	f
socketError	$NIMLIB/pure/net.nim	/^proc socketError*(socket: Socket, err: int = -1, async = false,$/;"	t
socketpair	$NIMLIB/posix/posix.nim	/^proc socketpair*(a1, a2, a3: cint, a4: var array[0..1, cint]): cint {.$/;"	f
some	$NIMLIB/pure/options.nim	/^proc some*[T](val: sink T): Option[T] {.inline.} =$/;"	t
sort	$NIMLIB/pure/algorithm.nim	/^proc sort*[T](a: var openArray[T], order = SortOrder.Ascending) = sort[T](a,$/;"	t
sort	$NIMLIB/pure/collections/tables.nim	/^proc sort*[A](t: var CountTable[A], order = SortOrder.Descending) =$/;"	t
sorted	$NIMLIB/pure/algorithm.nim	/^proc sorted*[T](a: openArray[T], order = SortOrder.Ascending): seq[T] =$/;"	t
sortedByIt	$NIMLIB/pure/algorithm.nim	/^template sortedByIt*(seq1, op: untyped): untyped =$/;"	t
source	$NIMLIB/pure/htmlgen.nim	/^macro source*(e: varargs[untyped]): untyped =$/;"	t
sourceLanguageToAlpha	$NIMLIB/packages/docutils/highlite.nim	/^  sourceLanguageToAlpha*: array[SourceLanguage, string] = ["none",$/;"	t
sourceLanguageToStr	$NIMLIB/packages/docutils/highlite.nim	/^  sourceLanguageToStr*: array[SourceLanguage, string] = ["none",$/;"	t
spaces	$NIMLIB/pure/strutils.nim	/^func spaces*(n: Natural): string {.inline.} =$/;"	t
span	$NIMLIB/pure/htmlgen.nim	/^macro span*(e: varargs[untyped]): untyped =$/;"	t
spawn	$NIMLIB/pure/concurrency/threadpool.nim	/^proc spawn*(call: sink typed) {.magic: "Spawn".} =$/;"	t
spawnX	$NIMLIB/pure/concurrency/threadpool.nim	/^template spawnX*(call) =$/;"	t
split	$NIMLIB/impure/nre.nim	/^proc split*(str: string, pattern: Regex, maxSplit = -1, start = 0): seq[string] =$/;"	t
split	$NIMLIB/impure/re.nim	/^proc split*(s: string, sep: Regex, maxsplit = -1): seq[string] {.inline.} =$/;"	t
split	$NIMLIB/pure/pegs.nim	/^iterator split*(s: string, sep: Peg): string =$/;"	t
split	$NIMLIB/pure/strutils.nim	/^iterator split*(s: string, seps: set[char] = Whitespace,$/;"	t
split	$NIMLIB/pure/unicode.nim	/^proc split*(s: string, seps: openArray[Rune] = unicodeSpaces, maxsplit: int = -1):$/;"	t
splitDecimal	$NIMLIB/pure/math.nim	/^func splitDecimal*[T: float32|float64](x: T): tuple[intpart: T, floatpart: T] =$/;"	t
splitDrive	$NIMLIB/std/private/ntpath.nim	/^func splitDrive*(p: string): tuple[drive, path: string] =$/;"	t
splitFile	$NIMLIB/std/paths.nim	/^func splitFile*(path: Path): tuple[dir, name: Path, ext: string] {.inline.} =$/;"	t
splitFile	$NIMLIB/std/private/ospaths2.nim	/^proc splitFile*(path: string): tuple[dir, name, ext: string] {.$/;"	f
splitLines	$NIMLIB/pure/strutils.nim	/^iterator splitLines*(s: string, keepEol = false): string =$/;"	t
splitPath	$NIMLIB/std/paths.nim	/^func splitPath*(path: Path): tuple[head, tail: Path] {.inline.} =$/;"	t
splitPath	$NIMLIB/std/private/ospaths2.nim	/^proc splitPath*(path: string): tuple[head, tail: string] {.$/;"	f
splitWhitespace	$NIMLIB/pure/strutils.nim	/^iterator splitWhitespace*(s: string, maxsplit: int = -1): string =$/;"	t
splitWhitespace	$NIMLIB/pure/unicode.nim	/^proc splitWhitespace*(s: string): seq[string] {.noSideEffect, inline.}=$/;"	t
sqrt	$NIMLIB/js/jscore.nim	/^proc sqrt*(m: MathLib, f: SomeFloat): SomeFloat {.importcpp.}$/;"	f
sqrt	$NIMLIB/pure/complex.nim	/^func sqrt*[T](z: Complex[T]): Complex[T] =$/;"	t
sqrt	$NIMLIB/pure/math.nim	/^  func sqrt*(x: float64): float64 {.importc: "sqrt", header: "<math.h>".} =$/;"	t
sslDoHandshake	$NIMLIB/wrappers/openssl.nim	/^proc sslDoHandshake*(ssl: SslPtr): cint {.cdecl,$/;"	f
sslHandle	$NIMLIB/pure/asyncnet.nim	/^  proc sslHandle*(self: AsyncSocket): SslPtr =$/;"	t
sslHandle	$NIMLIB/pure/net.nim	/^  proc sslHandle*(self: Socket): SslPtr =$/;"	t
sslPeek	$NIMLIB/wrappers/openssl.nim	/^proc sslPeek*(ssl: SslPtr, buf: cstring, num: cint): cint{.cdecl,$/;"	f
sslRead	$NIMLIB/wrappers/openssl.nim	/^proc sslRead*(ssl: SslPtr, buf: cstring, num: cint): cint{.cdecl,$/;"	f
sslSetAcceptState	$NIMLIB/wrappers/openssl.nim	/^proc sslSetAcceptState*(s: SslPtr) {.cdecl,$/;"	f
sslSetBio	$NIMLIB/wrappers/openssl.nim	/^proc sslSetBio*(ssl: SslPtr, rbio, wbio: BIO) {.cdecl,$/;"	f
sslSetConnectState	$NIMLIB/wrappers/openssl.nim	/^proc sslSetConnectState*(s: SslPtr) {.cdecl,$/;"	f
sslWrite	$NIMLIB/wrappers/openssl.nim	/^proc sslWrite*(ssl: SslPtr, buf: cstring, num: cint): cint{.cdecl,$/;"	f
st_atim	$NIMLIB/posix/posix.nim	/^  proc st_atim*(s: Stat): Timespec {.inline.} =$/;"	t
st_atim	$NIMLIB/posix/posix_macos_amd64.nim	/^      st_atim* {.importc:"st_atimespec".}: Timespec  ## Time of last access.$/;"	t
st_atime	$NIMLIB/posix/posix.nim	/^  proc st_atime*(s: Stat): Time {.inline.} =$/;"	t
st_ctim	$NIMLIB/posix/posix.nim	/^  proc st_ctim*(s: Stat): Timespec {.inline.} =$/;"	t
st_ctim	$NIMLIB/posix/posix_macos_amd64.nim	/^      st_ctim*  {.importc:"st_ctimespec".}: Timespec  ## Time of last status change.$/;"	t
st_ctime	$NIMLIB/posix/posix.nim	/^  proc st_ctime*(s: Stat): Time {.inline.} =$/;"	t
st_mtim	$NIMLIB/posix/posix.nim	/^  proc st_mtim*(s: Stat): Timespec {.inline.} =$/;"	t
st_mtim	$NIMLIB/posix/posix_macos_amd64.nim	/^      st_mtim* {.importc:"st_mtimespec".}: Timespec  ## Time of last data modification.$/;"	t
st_mtime	$NIMLIB/posix/posix.nim	/^  proc st_mtime*(s: Stat): Time {.inline.} =$/;"	t
stackTraceAvailable	$NIMLIB/system/excpt.nim	/^  proc stackTraceAvailable*(): bool$/;"	f
standardDeviation	$NIMLIB/pure/stats.nim	/^proc standardDeviation*[T](x: openArray[T]): float =$/;"	t
standardDeviationS	$NIMLIB/pure/stats.nim	/^proc standardDeviationS*[T](x: openArray[T]): float =$/;"	t
start	$NIMLIB/pure/coro.nim	/^proc start*(c: proc(), stacksize: int = defaultStackSize): CoroutineRef {.discardable.} =$/;"	t
startAnchor	$NIMLIB/pure/pegs.nim	/^func startAnchor*: Peg {.inline.} =$/;"	t
startProcess	$NIMLIB/pure/osproc.nim	/^proc startProcess*(command: string, workingDir: string = "",$/;"	t
startsWith	$NIMLIB/impure/re.nim	/^proc startsWith*(s: string, prefix: Regex): bool {.inline.} =$/;"	t
startsWith	$NIMLIB/js/jsre.nim	/^func startsWith*(pattern: cstring; self: RegExp): bool =$/;"	t
startsWith	$NIMLIB/pure/cstrutils.nim	/^func startsWith*(s, prefix: cstring): bool {.rtl, extern: "csuStartsWith".} =$/;"	t
startsWith	$NIMLIB/pure/pegs.nim	/^func startsWith*(s: string, prefix: Peg, start = 0): bool {.$/;"	t
startsWith	$NIMLIB/pure/strutils.nim	/^func startsWith*(s: string, prefix: char): bool {.inline.} =$/;"	t
startsWithImpl	$NIMLIB/std/private/strimpl.nim	/^template startsWithImpl*[T: string | cstring](s, prefix: T) =$/;"	t
stat	$NIMLIB/posix/posix.nim	/^proc stat*(a1: cstring, a2: var Stat): cint {.importc, header: "<sys\/stat.h>".}$/;"	f
stat	$NIMLIB/posix/posix_utils.nim	/^proc stat*(path: string): Stat =$/;"	t
static	$NIMLIB/system.nim	/^  `static`*[T] {.magic: "Static".}$/;"	o
staticExec	$NIMLIB/system/compilation.nim	/^proc staticExec*(command: string, input = "", cache = ""): string {.$/;"	t
staticRead	$NIMLIB/system/compilation.nim	/^proc staticRead*(filename: string): string {.magic: "Slurp".}$/;"	f
statvfs	$NIMLIB/posix/posix.nim	/^proc statvfs*(a1: cstring, a2: var Statvfs): cint {.$/;"	f
stderr	$NIMLIB/std/syncio.nim	/^    stderr* {.importc: stderrName, header: "<stdio.h>".}: File$/;"	t
stdin	$NIMLIB/std/syncio.nim	/^    stdin* {.importc: stdinName, header: "<stdio.h>".}: File$/;"	t
stdmsg	$NIMLIB/std/syncio.nim	/^  template stdmsg*: File = stdout$/;"	t
stdout	$NIMLIB/std/syncio.nim	/^    stdout* {.importc: stdoutName, header: "<stdio.h>".}: File$/;"	t
stop	$NIMLIB/js/dom.nim	/^proc stop*(w: Window)$/;"	f
stopImmediatePropagation	$NIMLIB/js/dom.nim	/^proc stopImmediatePropagation*(ev: Event)$/;"	f
stopPropagation	$NIMLIB/js/dom.nim	/^proc stopPropagation*(ev: Event)$/;"	f
store	$NIMLIB/pure/concurrency/atomics.nim	/^  proc store*[T](location: var Atomic[T]; desired: T; order: MemoryOrder = moSequentiallyConsist/;"	t
store	$NIMLIB/pure/marshal.nim	/^proc store*[T](s: Stream, data: sink T) =$/;"	t
str	$NIMLIB/pure/parsejson.nim	/^proc str*(my: JsonParser): string {.inline.} =$/;"	t
strVal	$NIMLIB/core/macros.nim	/^proc strVal*(n: NimNode): string  {.magic: "NStrVal", noSideEffect.}$/;"	f
strerror	$NIMLIB/posix/posix.nim	/^proc strerror*(errnum: cint): cstring {.importc, header: "<string.h>".}$/;"	f
strfmon	$NIMLIB/posix/posix.nim	/^proc strfmon*(a1: cstring, a2: int, a3: cstring): int {.varargs,$/;"	f
strftime	$NIMLIB/posix/posix.nim	/^proc strftime*(a1: cstring, a2: int, a3: cstring,$/;"	f
string	$NIMLIB/system/basic_types.nim	/^  string* {.magic: String.}     ## Built-in string type.$/;"	t
stringify	$NIMLIB/js/jscore.nim	/^proc stringify*(l: JsonLib, s: JsRoot): cstring {.importcpp.}$/;"	f
strip	$NIMLIB/pure/strutils.nim	/^func strip*(s: string, leading = true, trailing = true,$/;"	t
strip	$NIMLIB/pure/unicode.nim	/^proc strip*(s: string, leading = true, trailing = true,$/;"	t
strip	$NIMLIB/std/strbasics.nim	/^func strip*(a: var string, leading = true, trailing = true, chars: set[char] = whitespaces) {.in/;"	t
stripGenericParams	$NIMLIB/pure/typetraits.nim	/^proc stripGenericParams*(t: typedesc): typedesc {.magic: "TypeTrait".} =$/;"	t
stripLineEnd	$NIMLIB/pure/strutils.nim	/^func stripLineEnd*(s: var string) =$/;"	t
strong	$NIMLIB/pure/htmlgen.nim	/^macro strong*(e: varargs[untyped]): untyped =$/;"	t
strptime	$NIMLIB/posix/posix.nim	/^proc strptime*(a1, a2: cstring, a3: var Tm): cstring {.importc, header: "<time.h>".}$/;"	f
study	$NIMLIB/wrappers/pcre.nim	/^proc study*(code: ptr Pcre,$/;"	f
style	$NIMLIB/pure/htmlgen.nim	/^macro style*(e: varargs[untyped]): untyped =$/;"	t
styledEcho	$NIMLIB/pure/terminal.nim	/^template styledEcho*(args: varargs[untyped]) =$/;"	t
styledWrite	$NIMLIB/pure/terminal.nim	/^macro styledWrite*(f: File, m: varargs[typed]): untyped =$/;"	t
styledWriteLine	$NIMLIB/pure/terminal.nim	/^template styledWriteLine*(f: File, args: varargs[untyped]) =$/;"	t
sub	$NIMLIB/pure/htmlgen.nim	/^macro sub*(e: varargs[untyped]): untyped =$/;"	t
submit	$NIMLIB/genode/signals.nim	/^proc submit*(cap: SignalContextCapability) {.$/;"	f
submit	$NIMLIB/js/dom.nim	/^proc submit*(f: FormElement)$/;"	f
substituteLog	$NIMLIB/pure/logging.nim	/^proc substituteLog*(frmt: string, level: Level,$/;"	f
substr	$NIMLIB/system.nim	/^proc substr*(s: string, first, last: int): string = # A bug with `magic: Slice` requires this to/;"	t
succ	$NIMLIB/system/arithmetics.nim	/^proc succ*[T, V: Ordinal](x: T, y: V = 1): T {.magic: "Succ", noSideEffect.} =$/;"	t
success	$NIMLIB/pure/strscans.nim	/^template success*(x: int): bool = x != 0$/;"	t
suite	$NIMLIB/pure/unittest.nim	/^template suite*(name, body) {.dirty.} =$/;"	t
suiteEnded	$NIMLIB/pure/unittest.nim	/^method suiteEnded*(formatter: OutputFormatter) {.base, gcsafe.} =$/;"	t
suiteStarted	$NIMLIB/pure/unittest.nim	/^method suiteStarted*(formatter: OutputFormatter, suiteName: string) {.base, gcsafe.} =$/;"	t
sum	$NIMLIB/pure/math.nim	/^func sum*[T](x: openArray[T]): T =$/;"	t
sumKbn	$NIMLIB/deprecated/pure/sums.nim	/^func sumKbn*[T](x: openArray[T]): T =$/;"	t
sumPairs	$NIMLIB/deprecated/pure/sums.nim	/^func sumPairs*[T](x: openArray[T]): T =$/;"	t
summary	$NIMLIB/pure/htmlgen.nim	/^macro summary*(e: varargs[untyped]): untyped =$/;"	t
sup	$NIMLIB/pure/htmlgen.nim	/^macro sup*(e: varargs[untyped]): untyped =$/;"	t
supportsCopyMem	$NIMLIB/pure/typetraits.nim	/^proc supportsCopyMem*(t: typedesc): bool {.magic: "TypeTrait".}$/;"	f
suspend	$NIMLIB/pure/coro.nim	/^proc suspend*(sleepTime: float = 0) =$/;"	t
suspend	$NIMLIB/pure/osproc.nim	/^proc suspend*(p: Process) {.rtl, extern: "nosp$1", tags: [].}$/;"	f
suspendThread	$NIMLIB/windows/winlean.nim	/^proc suspendThread*(hThread: Handle): int32 {.stdcall, dynlib: "kernel32",$/;"	f
swab	$NIMLIB/posix/posix.nim	/^proc swab*(a1, a2: pointer, a3: int) {.importc, header: "<unistd.h>".}$/;"	f
swap	$NIMLIB/system.nim	/^proc swap*[T](a, b: var T) {.magic: "Swap", noSideEffect.}$/;"	f
swapCase	$NIMLIB/pure/unicode.nim	/^proc swapCase*(s: string): string {.noSideEffect, inline.} =$/;"	t
swapEndian16	$NIMLIB/pure/endians.nim	/^  proc swapEndian16*(outp, inp: pointer) {.inline, noSideEffect.} =$/;"	t
swapEndian32	$NIMLIB/pure/endians.nim	/^  proc swapEndian32*(outp, inp: pointer) {.inline, noSideEffect.} =$/;"	t
swapEndian64	$NIMLIB/pure/endians.nim	/^  proc swapEndian64*(outp, inp: pointer) {.inline, noSideEffect.} =$/;"	t
swapRefsInArray	$NIMLIB/system.nim	/^  template swapRefsInArray*{swap(arr[a], arr[b])}(arr: openArray[ref], a, b: int) =$/;"	t
swapcontext	$NIMLIB/posix/posix.nim	/^  proc swapcontext*(a1, a2: var Ucontext): cint {.importc, header: "<ucontext.h>".}$/;"	f
switch	$NIMLIB/system/nimscript.nim	/^proc switch*(key: string, val="") =$/;"	t
symAddr	$NIMLIB/pure/dynlib.nim	/^proc symAddr*(lib: LibHandle, name: cstring): pointer {.gcsafe.}$/;"	f
symBodyHash	$NIMLIB/core/macros.nim	/^proc symBodyHash*(s: NimNode): string {.noSideEffect.} =$/;"	t
symKind	$NIMLIB/core/macros.nim	/^proc symKind*(symbol: NimNode): NimSymKind {.magic: "NSymKind", noSideEffect.}$/;"	f
symbol	$NIMLIB/core/macros.nim	/^proc symbol*(n: NimNode): NimSym {.magic: "NSymbol", noSideEffect, deprecated:$/;"	f
symbolName	$NIMLIB/std/enumutils.nim	/^func symbolName*[T: enum](a: T): string =$/;"	t
symbolRank	$NIMLIB/std/enumutils.nim	/^template symbolRank*[T: enum](a: T): int =$/;"	t
symlink	$NIMLIB/posix/posix.nim	/^  proc symlink*(a1, a2: cstring): cint {.importc, header: "<unistd.h>".}$/;"	f
symlinkExists	$NIMLIB/std/private/oscommon.nim	/^proc symlinkExists*(link: string): bool {.rtl, extern: "nos$1",$/;"	f
symlinkExists	$NIMLIB/std/symlinks.nim	/^proc symlinkExists*(link: Path): bool {.inline, tags: [ReadDirEffect].} =$/;"	t
symmetricDifference	$NIMLIB/pure/collections/sets.nim	/^proc symmetricDifference*[A](s1, s2: HashSet[A]): HashSet[A] =$/;"	t
symmetricDifference	$NIMLIB/std/packedsets.nim	/^proc symmetricDifference*[A](s1, s2: PackedSet[A]): PackedSet[A] =$/;"	t
sync	$NIMLIB/posix/posix.nim	/^proc sync*() {.importc, header: "<unistd.h>".}$/;"	f
sync	$NIMLIB/pure/concurrency/threadpool.nim	/^proc sync*() =$/;"	t
sysconf	$NIMLIB/posix/posix.nim	/^proc sysconf*(a1: cint): int {.importc, header: "<unistd.h>".}$/;"	f
table	$NIMLIB/js/jsconsole.nim	/^proc table*(console: Console) {.importcpp, varargs.}$/;"	f
table	$NIMLIB/pure/htmlgen.nim	/^macro table*(e: varargs[untyped]): untyped =$/;"	t
tag	$NIMLIB/pure/xmltree.nim	/^proc tag*(n: XmlNode): lent string {.inline.} =$/;"	t
tagToStr	$NIMLIB/pure/htmlparser.nim	/^  tagToStr* = [$/;"	t
tail	$NIMLIB/pure/collections/lists.nim	/^    tail* {.cursor.}: SinglyLinkedNode[T]$/;"	t
tailDir	$NIMLIB/std/paths.nim	/^func tailDir*(path: Path): Path {.inline.} =$/;"	t
tailDir	$NIMLIB/std/private/ospaths2.nim	/^proc tailDir*(path: string): string {.$/;"	f
take	$NIMLIB/pure/collections/tables.nim	/^proc take*[A, B](t: var Table[A, B], key: A, val: var B): bool {.inline.} =$/;"	t
tan	$NIMLIB/js/jscore.nim	/^proc tan*(m: MathLib, a: SomeNumber): float {.importcpp.}$/;"	f
tan	$NIMLIB/pure/complex.nim	/^func tan*[T](z: Complex[T]): Complex[T] =$/;"	t
tan	$NIMLIB/pure/math.nim	/^  func tan*(x: float64): float64 {.importc: "tan", header: "<math.h>".} =$/;"	t
tanh	$NIMLIB/js/jscore.nim	/^proc tanh*(m: MathLib, a: SomeNumber): float {.importcpp.}$/;"	f
tanh	$NIMLIB/pure/complex.nim	/^func tanh*[T](z: Complex[T]): Complex[T] =$/;"	t
tanh	$NIMLIB/pure/math.nim	/^  func tanh*(x: float64): float64 {.importc: "tanh", header: "<math.h>".} =$/;"	t
targetCPU	$NIMLIB/system/platforms.nim	/^  targetCPU* = when defined(i386): CpuPlatform.i386$/;"	t
targetOS	$NIMLIB/system/platforms.nim	/^  targetOS* = when defined(windows): OsPlatform.windows$/;"	t
task	$NIMLIB/system/nimscript.nim	/^  template task*(name: untyped; description: string; body: untyped): untyped =$/;"	t
tbody	$NIMLIB/pure/htmlgen.nim	/^macro tbody*(e: varargs[untyped]): untyped =$/;"	t
tcDrain	$NIMLIB/posix/termios.nim	/^proc tcDrain*(fd: cint): cint {.importc: "tcdrain", header: "<termios.h>".}$/;"	f
tcFlow	$NIMLIB/posix/termios.nim	/^proc tcFlow*(fd: cint; action: cint): cint {.importc: "tcflow",$/;"	f
tcFlush	$NIMLIB/posix/termios.nim	/^proc tcFlush*(fd: cint; queue_selector: cint): cint {.importc: "tcflush",$/;"	f
tcGetAttr	$NIMLIB/posix/termios.nim	/^proc tcGetAttr*(fd: cint; termios: ptr Termios): cint {.$/;"	f
tcSendBreak	$NIMLIB/posix/termios.nim	/^proc tcSendBreak*(fd: cint; duration: cint): cint {.importc: "tcsendbreak",$/;"	f
tcSetAttr	$NIMLIB/posix/termios.nim	/^proc tcSetAttr*(fd: cint; optional_actions: cint; termios: ptr Termios): cint {.$/;"	f
tcgetpgrp	$NIMLIB/posix/posix.nim	/^proc tcgetpgrp*(a1: cint): Pid {.importc, header: "<unistd.h>".}$/;"	f
tcsetpgrp	$NIMLIB/posix/posix.nim	/^proc tcsetpgrp*(a1: cint, a2: Pid): cint {.importc, header: "<unistd.h>".}$/;"	f
td	$NIMLIB/pure/htmlgen.nim	/^macro td*(e: varargs[untyped]): untyped =$/;"	t
tearDownForeignThreadGc	$NIMLIB/system/arc.nim	/^template tearDownForeignThreadGc* =$/;"	t
tearDownForeignThreadGc	$NIMLIB/system/gc_common.nim	/^  template tearDownForeignThreadGc*() =$/;"	t
telldir	$NIMLIB/posix/posix.nim	/^proc telldir*(a1: ptr DIR): int {.importc, header: "<dirent.h>".}$/;"	f
template	$NIMLIB/pure/htmlgen.nim	/^macro `template`*(e: varargs[untyped]): untyped =$/;"	o
term	$NIMLIB/pure/pegs.nim	/^func term*(t: string): Peg {.rtl, extern: "npegs$1Str".} =$/;"	t
terminalHeight	$NIMLIB/pure/terminal.nim	/^  proc terminalHeight*(): int =$/;"	t
terminalHeightIoctl	$NIMLIB/pure/terminal.nim	/^  proc terminalHeightIoctl*(handles: openArray[Handle]): int =$/;"	t
terminalSize	$NIMLIB/pure/terminal.nim	/^proc terminalSize*(): tuple[w, h: int] =$/;"	t
terminalWidth	$NIMLIB/pure/terminal.nim	/^  proc terminalWidth*(): int =$/;"	t
terminalWidthIoctl	$NIMLIB/pure/terminal.nim	/^  proc terminalWidthIoctl*(handles: openArray[Handle]): int =$/;"	t
terminate	$NIMLIB/pure/osproc.nim	/^proc terminate*(p: Process) {.rtl, extern: "nosp$1", tags: [].}$/;"	f
terminateProcess	$NIMLIB/windows/winlean.nim	/^proc terminateProcess*(hProcess: Handle, uExitCode: int): WINBOOL {.stdcall,$/;"	f
terminateThread	$NIMLIB/std/private/threadtypes.nim	/^  proc terminateThread*(hThread: SysThread, dwExitCode: int32): int32 {.$/;"	f
test	$NIMLIB/pure/unittest.nim	/^template test*(name, body) {.dirty.} =$/;"	t
testAndSet	$NIMLIB/pure/concurrency/atomics.nim	/^  proc testAndSet*(location: var AtomicFlag; order: MemoryOrder = moSequentiallyConsistent): boo/;"	t
testBit	$NIMLIB/pure/bitops.nim	/^proc testBit*[T: SomeInteger](v: T; bit: BitsRange[T]): bool {.inline.} =$/;"	t
testEnded	$NIMLIB/pure/unittest.nim	/^method testEnded*(formatter: OutputFormatter, testResult: TestResult) {.base, gcsafe.} =$/;"	t
testStarted	$NIMLIB/pure/unittest.nim	/^method testStarted*(formatter: OutputFormatter, testName: string) {.base, gcsafe.} =$/;"	t
text	$NIMLIB/pure/xmltree.nim	/^proc text*(n: XmlNode): lent string {.inline.} =$/;"	t
text	$NIMLIB/std/jsfetch.nim	/^proc text*(self: Response): Future[cstring] {.importjs: "#.$1()".}$/;"	f
textarea	$NIMLIB/pure/htmlgen.nim	/^macro textarea*(e: varargs[untyped]): untyped =$/;"	t
tfoot	$NIMLIB/pure/htmlgen.nim	/^macro tfoot*(e: varargs[untyped]): untyped =$/;"	t
th	$NIMLIB/pure/htmlgen.nim	/^macro th*(e: varargs[untyped]): untyped =$/;"	t
thead	$NIMLIB/pure/htmlgen.nim	/^macro thead*(e: varargs[untyped]): untyped =$/;"	t
then	$NIMLIB/js/asyncjs.nim	/^  proc then*[T](future: Future[T], onSuccess: proc, onReject: OnReject = nil): auto =$/;"	t
thinout	$NIMLIB/system/cyclebreaker.nim	/^proc thinout*[T](x: ref T) {.inline.} =$/;"	t
thisDir	$NIMLIB/system/nimscript.nim	/^proc thisDir*(): string =$/;"	t
ticks	$NIMLIB/std/monotimes.nim	/^proc ticks*(t: MonoTime): int64 =$/;"	t
time	$NIMLIB/js/jsconsole.nim	/^proc time*(console: Console, label = "".cstring) {.importcpp.}$/;"	t
time	$NIMLIB/posix/posix.nim	/^proc time*(a1: var Time): Time {.importc, header: "<time.h>", sideEffect.}$/;"	f
time	$NIMLIB/pure/htmlgen.nim	/^macro time*(e: varargs[untyped]): untyped =$/;"	t
timeEnd	$NIMLIB/js/jsconsole.nim	/^proc timeEnd*(console: Console, label = "".cstring) {.importcpp.}$/;"	t
timeLog	$NIMLIB/js/jsconsole.nim	/^proc timeLog*(console: Console, label = "".cstring) {.importcpp.}$/;"	t
timegm	$NIMLIB/posix/posix.nim	/^proc timegm*(a1: var Tm): Time  {.importc, header: "<time.h>".}$/;"	f
timer_create	$NIMLIB/posix/posix.nim	/^proc timer_create*(a1: ClockId, a2: var SigEvent,$/;"	f
timer_delete	$NIMLIB/posix/posix.nim	/^proc timer_delete*(a1: Timer): cint {.importc, header: "<time.h>".}$/;"	f
timer_getoverrun	$NIMLIB/posix/posix.nim	/^proc timer_getoverrun*(a1: Timer): cint {.importc, header: "<time.h>".}$/;"	f
timer_gettime	$NIMLIB/posix/posix.nim	/^proc timer_gettime*(a1: Timer, a2: var Itimerspec): cint {.$/;"	f
timer_settime	$NIMLIB/posix/posix.nim	/^proc timer_settime*(a1: Timer, a2: cint, a3: var Itimerspec,$/;"	f
timesTwo	$NIMLIB/system/compilation.nim	/^    proc timesTwo*(x: int): int =$/;"	t
timezone	$NIMLIB/posix/posix_haiku.nim	/^  timezone* {.importc, header: "<time.h>".}: int$/;"	t
timezone	$NIMLIB/posix/posix_linux_amd64.nim	/^  timezone* {.importc, header: "<time.h>".}: clong$/;"	t
timezone	$NIMLIB/posix/posix_macos_amd64.nim	/^  timezone* {.importc, header: "<time.h>".}: int$/;"	t
timezone	$NIMLIB/posix/posix_nintendoswitch.nim	/^  timezone* {.importc: "_timezone", header: "<time.h>".}: clong$/;"	t
timezone	$NIMLIB/posix/posix_openbsd_amd64.nim	/^  timezone* {.importc, header: "<time.h>".}: int$/;"	t
timezone	$NIMLIB/posix/posix_other.nim	/^  timezone* {.importc, header: "<time.h>".}: int$/;"	t
timezone	$NIMLIB/pure/times.nim	/^proc timezone*(dt: DateTime): Timezone {.inline.} =$/;"	t
title	$NIMLIB/pure/htmlgen.nim	/^macro title*(e: varargs[untyped]): untyped =$/;"	t
title	$NIMLIB/pure/unicode.nim	/^proc title*(s: string): string {.noSideEffect, inline.} =$/;"	t
tm_wday	$NIMLIB/posix/posix_haiku.nim	/^    tm_wday*: cint  ## Day of week [0,6] (Sunday =0).$/;"	t
tm_wday	$NIMLIB/posix/posix_linux_amd64.nim	/^    tm_wday*: cint  ## Day of week [0,6] (Sunday =0).$/;"	t
tm_wday	$NIMLIB/posix/posix_macos_amd64.nim	/^    tm_wday*: cint  ## Day of week [0,6] (Sunday =0).$/;"	t
tm_wday	$NIMLIB/posix/posix_nintendoswitch.nim	/^    tm_wday*: cint  ## Day of week [0,6] (Sunday =0).$/;"	t
tm_wday	$NIMLIB/posix/posix_openbsd_amd64.nim	/^    tm_wday*: cint  ## Day of week [0,6] (Sunday =0).$/;"	t
tm_wday	$NIMLIB/posix/posix_other.nim	/^    tm_wday*: cint  ## Day of week [0,6] (Sunday =0).$/;"	t
tm_wday	$NIMLIB/pure/times.nim	/^      tm_wday*: cint  ## Day of week [0,6] (Sunday =0).$/;"	t
to	$NIMLIB/js/jsffi.nim	/^proc to*(x: JsObject, T: typedesc): T {.importjs: "(#)".}$/;"	f
to	$NIMLIB/pure/json.nim	/^proc to*[T](node: JsonNode, t: typedesc[T]): T =$/;"	t
to	$NIMLIB/pure/marshal.nim	/^proc to*[T](data: string): T =$/;"	t
toAny	$NIMLIB/core/typeinfo.nim	/^proc toAny*[T](x: var T): Any {.inline.} =$/;"	t
toBiggestFloat	$NIMLIB/system.nim	/^proc toBiggestFloat*(i: BiggestInt): BiggestFloat {.noSideEffect, inline.} =$/;"	t
toBiggestInt	$NIMLIB/system.nim	/^proc toBiggestInt*(f: BiggestFloat): BiggestInt {.noSideEffect.} =$/;"	t
toBin	$NIMLIB/pure/strutils.nim	/^func toBin*(x: BiggestInt, len: Positive): string {.rtl, extern: "nsuToBin".} =$/;"	t
toCInt	$NIMLIB/pure/net.nim	/^proc toCInt*(opt: SOBool): cint =$/;"	t
toChars	$NIMLIB/std/private/dragonbox.nim	/^proc toChars*(buffer: var openArray[char]; v: float; forceTrailingDotZero = false): int {.$/;"	t
toCountTable	$NIMLIB/pure/collections/tables.nim	/^proc toCountTable*[A](keys: openArray[A]): CountTable[A] =$/;"	t
toCritBitTree	$NIMLIB/pure/collections/critbits.nim	/^proc toCritBitTree*[T](pairs: sink openArray[(string, T)]): CritBitTree[T] {.since: (1, 3).} =$/;"	t
toCstring	$NIMLIB/std/jsbigints.nim	/^func toCstring*(this: JsBigInt; radix: 2..36): cstring {.importjs: "#.toString(#)".} =$/;"	t
toDecimal64	$NIMLIB/std/private/dragonbox.nim	/^proc toDecimal64*(ieeeSignificand: uint64; ieeeExponent: uint64): FloatingDecimal64 {.$/;"	f
toDecimal64AsymmetricInterval	$NIMLIB/std/private/dragonbox.nim	/^proc toDecimal64AsymmetricInterval*(e2: int32): FloatingDecimal64 {.inline.} =$/;"	t
toDeque	$NIMLIB/pure/collections/deques.nim	/^proc toDeque*[T](x: openArray[T]): Deque[T] {.since: (1, 3).} =$/;"	t
toDll	$NIMLIB/system/nimscript.nim	/^proc toDll*(filename: string): string =$/;"	t
toDoublyLinkedList	$NIMLIB/pure/collections/lists.nim	/^func toDoublyLinkedList*[T](elems: openArray[T]): DoublyLinkedList[T] {.since: (1, 5, 1).} =$/;"	t
toExe	$NIMLIB/system/nimscript.nim	/^proc toExe*(filename: string): string =$/;"	t
toFILETIME	$NIMLIB/windows/winlean.nim	/^proc toFILETIME*(t: int64): FILETIME =$/;"	t
toFloat	$NIMLIB/pure/rationals.nim	/^func toFloat*[T](x: Rational[T]): float =$/;"	t
toFloat	$NIMLIB/system.nim	/^proc toFloat*(i: int): float {.noSideEffect, inline.} =$/;"	t
toHashSet	$NIMLIB/pure/collections/sets.nim	/^proc toHashSet*[A](keys: openArray[A]): HashSet[A] =$/;"	t
toHeapQueue	$NIMLIB/pure/collections/heapqueue.nim	/^proc toHeapQueue*[T](x: openArray[T]): HeapQueue[T] {.since: (1, 3).} =$/;"	t
toHex	$NIMLIB/pure/strutils.nim	/^func toHex*[T: SomeInteger](x: T, len: Positive): string =$/;"	t
toInt	$NIMLIB/pure/nativesockets.nim	/^proc toInt*(typ: SockType): cint$/;"	f
toInt	$NIMLIB/pure/rationals.nim	/^func toInt*[T](x: Rational[T]): int =$/;"	t
toInt	$NIMLIB/system.nim	/^proc toInt*(f: float): int {.noSideEffect.} =$/;"	t
toIntSet	$NIMLIB/pure/collections/intsets.nim	/^proc toIntSet*(x: openArray[int]): IntSet {.since: (1, 3), inline.} = toPackedSet[int](x)$/;"	t
toJs	$NIMLIB/js/jsffi.nim	/^template toJs*(s: string): JsObject = cstring(s).toJs$/;"	t
toJsKey	$NIMLIB/js/jsffi.nim	/^proc toJsKey*[T: enum](text: cstring, t: type T): T =$/;"	t
toJson	$NIMLIB/std/jsonutils.nim	/^proc toJson*[T](a: T, opt = initToJsonOptions()): JsonNode =$/;"	t
toJsonHook	$NIMLIB/std/jsonutils.nim	/^proc toJsonHook*[T](self: Option[T], opt = initToJsonOptions()): JsonNode =$/;"	t
toKnownDomain	$NIMLIB/pure/nativesockets.nim	/^  proc toKnownDomain*(family: cint): Option[Domain] =$/;"	t
toLangSymbol	$NIMLIB/packages/docutils/dochelpers.nim	/^proc toLangSymbol*(linkText: PRstNode): LangSymbol =$/;"	t
toLocation	$NIMLIB/std/private/miscdollars.nim	/^template toLocation*(result: var string, file: string | cstring, line: int, col: int) =$/;"	t
toLower	$NIMLIB/pure/unicode.nim	/^proc toLower*(s: string): string {.noSideEffect, inline.} =$/;"	t
toLowerAscii	$NIMLIB/pure/strutils.nim	/^func toLowerAscii*(s: string): string {.rtl, extern: "nsuToLowerAsciiStr".} =$/;"	t
toLowerAscii	$NIMLIB/std/private/strimpl.nim	/^func toLowerAscii*(c: char): char {.inline.} =$/;"	t
toMD5	$NIMLIB/pure/md5.nim	/^proc toMD5*(s: string): MD5Digest =$/;"	t
toMask	$NIMLIB/pure/bitops.nim	/^func toMask*[T: SomeInteger](slice: Slice[int]): T {.inline, since: (1, 3).} =$/;"	t
toNimIdent	$NIMLIB/core/macros.nim	/^proc toNimIdent*(s: string): NimIdent {.magic: "StrToIdent", noSideEffect, deprecated:$/;"	f
toNumber	$NIMLIB/std/jsbigints.nim	/^func toNumber*(this: JsBigInt): BiggestInt {.importjs: "Number(#)".} =$/;"	t
toOSFlags	$NIMLIB/pure/net.nim	/^proc toOSFlags*(socketFlags: set[SocketFlag]): cint =$/;"	t
toOct	$NIMLIB/pure/strutils.nim	/^func toOct*(x: BiggestInt, len: Positive): string {.rtl, extern: "nsuToOct".} =$/;"	t
toOctal	$NIMLIB/pure/strutils.nim	/^func toOctal*(c: char): string {.rtl, extern: "nsuToOctal".} =$/;"	t
toOpenArray	$NIMLIB/system.nim	/^proc toOpenArray*[T](x: seq[T]; first, last: int): openArray[T] {.$/;"	f
toOpenArrayByte	$NIMLIB/system.nim	/^proc toOpenArrayByte*(x: string; first, last: int): openArray[byte] {.$/;"	f
toOrderedSet	$NIMLIB/pure/collections/sets.nim	/^proc toOrderedSet*[A](keys: openArray[A]): OrderedSet[A] =$/;"	t
toOrderedTable	$NIMLIB/pure/collections/tables.nim	/^proc toOrderedTable*[A, B](pairs: openArray[(A, B)]): OrderedTable[A, B] =$/;"	t
toPackedSet	$NIMLIB/std/packedsets.nim	/^proc toPackedSet*[A](x: openArray[A]): PackedSet[A] {.since: (1, 3).} =$/;"	t
toParts	$NIMLIB/pure/times.nim	/^proc toParts*(ti: TimeInterval): TimeIntervalParts =$/;"	t
toRational	$NIMLIB/pure/rationals.nim	/^func toRational*[T: SomeInteger](x: T): Rational[T] =$/;"	t
toRunes	$NIMLIB/pure/unicode.nim	/^proc toRunes*(s: string): seq[Rune] {.inline.} =$/;"	t
toSeq	$NIMLIB/impure/nre.nim	/^proc toSeq*(pattern: Captures,$/;"	f
toSeq	$NIMLIB/pure/collections/sequtils.nim	/^template toSeq*(iter: untyped): untyped =$/;"	t
toSet	$NIMLIB/pure/collections/sets.nim	/^proc toSet*[A](keys: openArray[A]): HashSet[A] {.deprecated:$/;"	f
toSet	$NIMLIB/std/setutils.nim	/^template toSet*(iter: untyped): untyped =$/;"	t
toSigned	$NIMLIB/pure/typetraits.nim	/^template toSigned*(T: typedesc[SomeInteger and not range]): untyped =$/;"	t
toSinglyLinkedList	$NIMLIB/pure/collections/lists.nim	/^func toSinglyLinkedList*[T](elems: openArray[T]): SinglyLinkedList[T] {.since: (1, 5, 1).} =$/;"	t
toSockAddr	$NIMLIB/pure/net.nim	/^proc toSockAddr*(address: IpAddress, port: Port, sa: var Sockaddr_storage,$/;"	f
toSockType	$NIMLIB/pure/nativesockets.nim	/^proc toSockType*(protocol: Protocol): SockType =$/;"	t
toStrLit	$NIMLIB/core/macros.nim	/^proc toStrLit*(n: NimNode): NimNode =$/;"	t
toString	$NIMLIB/js/asyncjs.nim	/^  * proc toString*(a: Error): cstring {.importjs: "#.toString()".}$/;"	f
toString	$NIMLIB/js/jscore.nim	/^proc toString*(d: DateTime): cstring {.importcpp.}$/;"	f
toString	$NIMLIB/pure/httpcore.nim	/^converter toString*(values: HttpHeaderValues): string =$/;"	t
toString	$NIMLIB/std/private/dragonbox.nim	/^  proc toString*(value: float): string =$/;"	t
toTable	$NIMLIB/impure/nre.nim	/^func toTable*(pattern: Captures): Table[string, string] =$/;"	t
toTable	$NIMLIB/pure/collections/tables.nim	/^proc toTable*[A, B](pairs: openArray[(A, B)]): Table[A, B] =$/;"	t
toTask	$NIMLIB/std/tasks.nim	/^macro toTask*(e: typed{nkCall | nkInfix | nkPrefix | nkPostfix | nkCommand | nkCallStrLit}): Tas/;"	t
toTime	$NIMLIB/pure/times.nim	/^proc toTime*(dt: DateTime): Time {.tags: [], raises: [], benign.} =$/;"	t
toTitle	$NIMLIB/pure/unicode.nim	/^proc toTitle*(c: Rune): Rune {.rtl, extern: "nuc$1".} =$/;"	t
toU16	$NIMLIB/system/arithmetics.nim	/^  proc toU16*(x: int): int16 {.deprecated.} =$/;"	t
toU32	$NIMLIB/system/arithmetics.nim	/^  proc toU32*(x: int64): int32 {.deprecated.} =$/;"	t
toU8	$NIMLIB/system/arithmetics.nim	/^  proc toU8*(x: int): int8 {.deprecated.} =$/;"	t
toUTF8	$NIMLIB/pure/unicode.nim	/^proc toUTF8*(c: Rune): string {.rtl, extern: "nuc$1".} =$/;"	t
toUgly	$NIMLIB/pure/json.nim	/^proc toUgly*(result: var string, node: JsonNode) =$/;"	t
toUnix	$NIMLIB/pure/times.nim	/^proc toUnix*(t: Time): int64 {.benign, tags: [], raises: [], noSideEffect.} =$/;"	t
toUnsigned	$NIMLIB/pure/typetraits.nim	/^template toUnsigned*(T: typedesc[SomeInteger and not range]): untyped =$/;"	t
toUpper	$NIMLIB/pure/unicode.nim	/^proc toUpper*(s: string): string {.noSideEffect, inline.} =$/;"	t
toUpperAscii	$NIMLIB/pure/strutils.nim	/^func toUpperAscii*(s: string): string {.rtl, extern: "nsuToUpperAsciiStr".} =$/;"	t
toWideCString	$NIMLIB/std/widestrs.nim	/^    converter toWideCString*(x: WideCStringObj): WideCString {.inline.} =$/;"	t
toWinTime	$NIMLIB/pure/times.nim	/^proc toWinTime*(t: Time): int64 =$/;"	t
toXmlAttributes	$NIMLIB/pure/xmltree.nim	/^proc toXmlAttributes*(keyValuePairs: varargs[tuple[key,$/;"	f
toggle	$NIMLIB/js/dom.nim	/^proc toggle*(c: ClassList, class: cstring)$/;"	f
toggleAttribute	$NIMLIB/js/dom.nim	/^  proc toggleAttribute*(self: Node; name: cstring; force = false): bool {.importjs: "(#.$1(#, #)/;"	t
tokenClassToStr	$NIMLIB/packages/docutils/highlite.nim	/^  tokenClassToStr*: array[TokenClass, string] = ["Eof", "None", "Whitespace",$/;"	t
tokenize	$NIMLIB/packages/docutils/highlite.nim	/^proc tokenize*(text: string, lang: SourceLanguage): seq[(string, TokenClass)] =$/;"	t
tokenize	$NIMLIB/pure/strutils.nim	/^iterator tokenize*(s: string, seps: set[char] = Whitespace): tuple[$/;"	t
tr	$NIMLIB/pure/htmlgen.nim	/^macro tr*(e: varargs[untyped]): untyped =$/;"	t
trace	$NIMLIB/js/jsconsole.nim	/^proc trace*(console: Console) {.importcpp, varargs.}$/;"	f
track	$NIMLIB/pure/htmlgen.nim	/^macro track*(e: varargs[untyped]): untyped =$/;"	t
trackLocation	$NIMLIB/system/memtracker.nim	/^proc trackLocation*(p: pointer; size: int) =$/;"	t
trailingZeros2Digits	$NIMLIB/std/private/digitsutils.nim	/^proc trailingZeros2Digits*(digits: uint32): int32 {.inline.} =$/;"	t
transformFile	$NIMLIB/impure/re.nim	/^proc transformFile*(infile, outfile: string,$/;"	f
transformFile	$NIMLIB/pure/pegs.nim	/^  proc transformFile*(infile, outfile: string,$/;"	f
translate	$NIMLIB/pure/unicode.nim	/^proc translate*(s: string, replacements: proc(key: string): string): string {.effectsOf: replace/;"	t
traverseForIndex	$NIMLIB/packages/docutils/rstgen.nim	/^proc traverseForIndex*(d: PDoc, n: PRstNode) =$/;"	t
traverseGlobals	$NIMLIB/system/gc_hooks.nim	/^proc traverseGlobals*() =$/;"	t
traverseThreadLocals	$NIMLIB/system/gc_hooks.nim	/^proc traverseThreadLocals*() =$/;"	t
treeRepr	$NIMLIB/core/macros.nim	/^proc treeRepr*(n: NimNode): string {.benign.} =$/;"	t
treeRepr	$NIMLIB/packages/docutils/rstast.nim	/^proc treeRepr*(node: PRstNode, indent=0): string =$/;"	t
treeRepr	$NIMLIB/pure/parsesql.nim	/^proc treeRepr*(s: SqlNode): string =$/;"	t
trigger	$NIMLIB/pure/asyncdispatch.nim	/^  proc trigger*(ev: AsyncEvent) =$/;"	t
trigger	$NIMLIB/pure/ioselects/ioselectors_epoll.nim	/^proc trigger*(ev: SelectEvent) =$/;"	t
trigger	$NIMLIB/pure/ioselects/ioselectors_kqueue.nim	/^proc trigger*(ev: SelectEvent) =$/;"	t
trigger	$NIMLIB/pure/ioselects/ioselectors_poll.nim	/^proc trigger*(ev: SelectEvent) =$/;"	t
trigger	$NIMLIB/pure/ioselects/ioselectors_select.nim	/^  proc trigger*(ev: SelectEvent) =$/;"	t
trigger	$NIMLIB/pure/selectors.nim	/^  proc trigger*(ev: SelectEvent) =$/;"	t
trimZeros	$NIMLIB/pure/strutils.nim	/^func trimZeros*(x: var string; decimalSep = '.') =$/;"	t
trunc	$NIMLIB/js/jscore.nim	/^proc trunc*(m: MathLib, f: SomeFloat): int {.importcpp.}$/;"	f
trunc	$NIMLIB/pure/math.nim	/^    func trunc*(x: float64): float64 {.importc: "trunc", header: "<math.h>".} =$/;"	t
truncate	$NIMLIB/posix/posix.nim	/^proc truncate*(a1: cstring, a2: Off): cint {.importc, header: "<unistd.h>".}$/;"	f
tryAcquire	$NIMLIB/core/locks.nim	/^proc tryAcquire*(lock: var Lock): bool {.inline.} =$/;"	t
tryAcquire	$NIMLIB/core/rlocks.nim	/^proc tryAcquire*(lock: var RLock): bool {.inline.} =$/;"	t
tryAcquireSys	$NIMLIB/std/private/syslocks.nim	/^  proc tryAcquireSys*(L: var SysLock): bool {.noSideEffect, importcpp.}$/;"	f
tryMoveFSObject	$NIMLIB/std/private/oscommon.nim	/^proc tryMoveFSObject*(source, dest: string, isDir: bool): bool {.noWeirdTarget.} =$/;"	t
tryRecv	$NIMLIB/system/channels_builtin.nim	/^proc tryRecv*[TMsg](c: var Channel[TMsg]): tuple[dataAvailable: bool,$/;"	f
tryRemoveFile	$NIMLIB/std/private/osfiles.nim	/^proc tryRemoveFile*(file: string): bool {.rtl, extern: "nos$1", tags: [WriteDirEffect], noWeirdT/;"	t
trySend	$NIMLIB/pure/net.nim	/^proc trySend*(socket: Socket, data: string): bool {.tags: [WriteIOEffect].} =$/;"	t
trySend	$NIMLIB/system/channels_builtin.nim	/^proc trySend*[TMsg](c: var Channel[TMsg], msg: sink TMsg): bool {.inline.} =$/;"	t
tt	$NIMLIB/pure/htmlgen.nim	/^macro tt*(e: varargs[untyped]): untyped =$/;"	t
ttyname	$NIMLIB/posix/posix.nim	/^proc ttyname*(a1: cint): cstring {.importc, header: "<unistd.h>".}$/;"	f
ttyname_r	$NIMLIB/posix/posix.nim	/^proc ttyname_r*(a1: cint, a2: cstring, a3: int): cint {.$/;"	f
tupleLen	$NIMLIB/pure/typetraits.nim	/^  template tupleLen*(t: tuple): int =$/;"	t
tupleObjectDollar	$NIMLIB/std/private/miscdollars.nim	/^template tupleObjectDollar*[T: tuple | object](result: var string, x: T) =$/;"	t
typ	$NIMLIB/std/jsfetch.nim	/^    typ* {.importjs: "type".}: cstring$/;"	t
type	$NIMLIB/js/dom.nim	/^    `type`*: cstring$/;"	o
type	$NIMLIB/system.nim	/^  `type`*[T] {.magic: "Type".}$/;"	o
typeKind	$NIMLIB/core/macros.nim	/^proc typeKind*(n: NimNode): NimTypeKind {.magic: "NGetType", noSideEffect.}$/;"	f
typed	$NIMLIB/system/basic_types.nim	/^  typed* {.magic: Stmt.}         ## Meta type to denote an expression that$/;"	t
typedesc	$NIMLIB/system/basic_types.nim	/^  typedesc* {.magic: TypeDesc.} ## Meta type to denote a type description.$/;"	t
typeof	$NIMLIB/system.nim	/^proc typeof*(x: untyped; mode = typeOfIter): typedesc {.$/;"	t
tzset	$NIMLIB/posix/posix.nim	/^proc tzset*() {.importc, header: "<time.h>".}$/;"	f
u32	$NIMLIB/posix/epoll.nim	/^    u32* {.importc: "u32".}: uint32$/;"	t
u64	$NIMLIB/posix/epoll.nim	/^    u64* {.importc: "u64".}: uint64$/;"	t
ualarm	$NIMLIB/posix/posix.nim	/^proc ualarm*(a1, a2: Useconds): Useconds {.importc, header: "<unistd.h>".}$/;"	f
uint	$NIMLIB/system/basic_types.nim	/^  uint* {.magic: UInt.}       ## Unsigned default integer type.$/;"	t
uint16	$NIMLIB/system/basic_types.nim	/^  uint16* {.magic: UInt16.}   ## Unsigned 16 bit integer type.$/;"	t
uint32	$NIMLIB/system/basic_types.nim	/^  uint32* {.magic: UInt32.}   ## Unsigned 32 bit integer type.$/;"	t
uint64	$NIMLIB/system/basic_types.nim	/^  uint64* {.magic: UInt64.}   ## Unsigned 64 bit integer type.$/;"	t
uint64_t	$NIMLIB/cycle.h	/^  static uint64_t* addr = 0;$/;"	t
uint64x2	$NIMLIB/std/private/dragonbox.nim	/^  uint64x2* {.bycopy.} = object$/;"	t
uint8	$NIMLIB/system/basic_types.nim	/^  uint8* {.magic: UInt8.}     ## Unsigned 8 bit integer type.$/;"	t
ul	$NIMLIB/pure/htmlgen.nim	/^macro ul*(e: varargs[untyped]): untyped =$/;"	t
umask	$NIMLIB/posix/posix.nim	/^proc umask*(a1: Mode): Mode {.importc, header: "<sys\/stat.h>".}$/;"	f
uname	$NIMLIB/posix/posix.nim	/^proc uname*(a1: var Utsname): cint {.importc, header: "<sys\/utsname.h>".}$/;"	f
uname	$NIMLIB/posix/posix_utils.nim	/^proc uname*(): Uname =$/;"	t
undefineSymbol	$NIMLIB/wrappers/tinyc.nim	/^proc undefineSymbol*(s: PccState, sym: cstring) {.cdecl,$/;"	f
underscoredCalls	$NIMLIB/std/private/underscored_calls.nim	/^proc underscoredCalls*(result, calls, arg0: NimNode) =$/;"	t
unescape	$NIMLIB/js/dom.nim	/^proc unescape*(uri: cstring): cstring {.importc, nodecl.}$/;"	f
unescape	$NIMLIB/pure/strutils.nim	/^func unescape*(s: string, prefix = "\\"", suffix = "\\""): string {.rtl,$/;"	t
unicodeLetter	$NIMLIB/pure/pegs.nim	/^func unicodeLetter*: Peg {.inline.} =$/;"	t
unicodeLower	$NIMLIB/pure/pegs.nim	/^func unicodeLower*: Peg {.inline.} =$/;"	t
unicodeTitle	$NIMLIB/pure/pegs.nim	/^func unicodeTitle*: Peg {.inline.} =$/;"	t
unicodeUpper	$NIMLIB/pure/pegs.nim	/^func unicodeUpper*: Peg {.inline.} =$/;"	t
unicodeWhitespace	$NIMLIB/pure/pegs.nim	/^func unicodeWhitespace*: Peg {.inline.} =$/;"	t
unidecode	$NIMLIB/pure/unidecode/unidecode.nim	/^proc unidecode*(s: string): string =$/;"	t
unindent	$NIMLIB/pure/strutils.nim	/^func unindent*(s: string, count: Natural = int.high,$/;"	t
union	$NIMLIB/pure/collections/sets.nim	/^proc union*[A](s1, s2: HashSet[A]): HashSet[A] =$/;"	t
union	$NIMLIB/std/packedsets.nim	/^proc union*[A](s1, s2: PackedSet[A]): PackedSet[A] =$/;"	t
unixToNativePath	$NIMLIB/std/paths.nim	/^func unixToNativePath*(path: Path, drive=Path("")): Path {.inline.} =$/;"	t
unixToNativePath	$NIMLIB/std/private/ospaths2.nim	/^proc unixToNativePath*(path: string, drive=""): string {.$/;"	t
unlikely	$NIMLIB/system.nim	/^template unlikely*(val: bool): bool =$/;"	t
unlink	$NIMLIB/posix/posix.nim	/^proc unlink*(a1: cstring): cint {.importc, header: "<unistd.h>".}$/;"	f
unlink	$NIMLIB/pure/collections/chains.nim	/^template unlink*(header, node) =$/;"	t
unloadLib	$NIMLIB/pure/dynlib.nim	/^proc unloadLib*(lib: LibHandle) {.gcsafe.}$/;"	f
unmapMem	$NIMLIB/pure/memfiles.nim	/^proc unmapMem*(f: var MemFile, p: pointer, size: int) =$/;"	t
unmapViewOfFile	$NIMLIB/windows/winlean.nim	/^proc unmapViewOfFile*(lpBaseAddress: pointer): WINBOOL {.stdcall,$/;"	f
unown	$NIMLIB/system.nim	/^  template unown*(x: typed): untyped = x$/;"	t
unpackInfix	$NIMLIB/core/macros.nim	/^proc unpackInfix*(node: NimNode): tuple[left: NimNode; op: string; right: NimNode] =$/;"	t
unpackPostfix	$NIMLIB/core/macros.nim	/^proc unpackPostfix*(node: NimNode): tuple[node: NimNode; op: string] =$/;"	t
unpackPrefix	$NIMLIB/core/macros.nim	/^proc unpackPrefix*(node: NimNode): tuple[node: NimNode; op: string] =$/;"	t
unpackVarargs	$NIMLIB/core/macros.nim	/^macro unpackVarargs*(callee: untyped; args: varargs[untyped]): untyped =$/;"	t
unquoteIndexColumn	$NIMLIB/packages/docutils/rstidx.nim	/^proc unquoteIndexColumn*(text: string): string =$/;"	t
unregister	$NIMLIB/pure/asyncdispatch.nim	/^  proc unregister*(fd: AsyncFD) =$/;"	t
unregister	$NIMLIB/pure/ioselects/ioselectors_epoll.nim	/^proc unregister*[T](s: Selector[T], fd: int|SocketHandle) =$/;"	t
unregister	$NIMLIB/pure/ioselects/ioselectors_kqueue.nim	/^proc unregister*[T](s: Selector[T], fd: int|SocketHandle) =$/;"	t
unregister	$NIMLIB/pure/ioselects/ioselectors_poll.nim	/^proc unregister*[T](s: Selector[T], fd: int|SocketHandle) =$/;"	t
unregister	$NIMLIB/pure/ioselects/ioselectors_select.nim	/^proc unregister*[T](s: Selector[T], fd: SocketHandle|int) =$/;"	t
unregister	$NIMLIB/pure/selectors.nim	/^  proc unregister*[T](s: Selector[T], fd: int|SocketHandle|cint) =$/;"	t
unregisterWait	$NIMLIB/windows/winlean.nim	/^proc unregisterWait*(WaitHandle: Handle): DWORD$/;"	f
unsafeAddr	$NIMLIB/system.nim	/^proc unsafeAddr*[T](x: T): ptr T {.magic: "Addr", noSideEffect.} =$/;"	t
unsafeGet	$NIMLIB/pure/options.nim	/^proc unsafeGet*[T](self: Option[T]): lent T {.inline.}=$/;"	t
unsafeIsolate	$NIMLIB/std/isolation.nim	/^func unsafeIsolate*[T](value: sink T): Isolated[T] =$/;"	t
unsafeNew	$NIMLIB/system.nim	/^proc unsafeNew*[T](a: var ref T, size: Natural) {.magic: "New", noSideEffect.}$/;"	f
unsafeNewFetchOptions	$NIMLIB/std/jsfetch.nim	/^proc unsafeNewFetchOptions*(metod, body, mode, credentials, cache, referrerPolicy: cstring;$/;"	f
unsafeRead	$NIMLIB/pure/concurrency/threadpool.nim	/^proc unsafeRead*[T](fv: FlowVar[ref T]): ptr T =$/;"	t
unsetControlCHook	$NIMLIB/system.nim	/^    proc unsetControlCHook*()$/;"	f
untyped	$NIMLIB/system/basic_types.nim	/^  untyped* {.magic: Expr.}       ## Meta type to denote an expression that$/;"	t
unzip	$NIMLIB/pure/collections/sequtils.nim	/^proc unzip*[S, T](s: openArray[(S, T)]): (seq[S], seq[T]) {.since: (1, 1).} =$/;"	t
update	$NIMLIB/std/sha1.nim	/^proc update*(ctx: var Sha1State, data: openArray[char]) =$/;"	t
updateHandle	$NIMLIB/pure/ioselects/ioselectors_epoll.nim	/^proc updateHandle*[T](s: Selector[T], fd: int | SocketHandle, events: set[Event]) =$/;"	t
updateHandle	$NIMLIB/pure/ioselects/ioselectors_kqueue.nim	/^proc updateHandle*[T](s: Selector[T], fd: int | SocketHandle,$/;"	f
updateHandle	$NIMLIB/pure/ioselects/ioselectors_poll.nim	/^proc updateHandle*[T](s: Selector[T], fd: int | SocketHandle,$/;"	f
updateHandle	$NIMLIB/pure/ioselects/ioselectors_select.nim	/^proc updateHandle*[T](s: Selector[T], fd: int | SocketHandle,$/;"	f
updateHandle	$NIMLIB/pure/selectors.nim	/^  proc updateHandle*[T](s: Selector[T], fd: int | SocketHandle,$/;"	f
upperBound	$NIMLIB/pure/algorithm.nim	/^proc upperBound*[T](a: openArray[T], key: T): int = upperBound(a, key, cmp[T])$/;"	t
urandom	$NIMLIB/std/sysrand.nim	/^proc urandom*(size: Natural): seq[byte] {.inline.} =$/;"	t
uriParseError	$NIMLIB/pure/uri.nim	/^proc uriParseError*(msg: string) {.noreturn.} =$/;"	t
useBuiltins	$NIMLIB/system/countbits_impl.nim	/^const useBuiltins* = not defined(noIntrinsicsBitOpts)$/;"	t
useGCC_builtins	$NIMLIB/system/countbits_impl.nim	/^const useGCC_builtins* = (defined(gcc) or defined(llvm_gcc) or$/;"	t
useICC_builtins	$NIMLIB/system/countbits_impl.nim	/^const useICC_builtins* = defined(icc) and useBuiltins$/;"	t
useOpenssl3	$NIMLIB/wrappers/openssl.nim	/^const useOpenssl3* {.booldefine.} = sslVersion.startsWith('3')$/;"	t
useVCC_builtins	$NIMLIB/system/countbits_impl.nim	/^const useVCC_builtins* = defined(vcc) and useBuiltins$/;"	t
usleep	$NIMLIB/posix/posix.nim	/^proc usleep*(a1: Useconds): cint {.importc, header: "<unistd.h>".}$/;"	f
utc	$NIMLIB/pure/times.nim	/^proc utc*(t: Time): DateTime =$/;"	t
utcOffset	$NIMLIB/pure/times.nim	/^proc utcOffset*(dt: DateTime): int {.inline.} =$/;"	t
utf8	$NIMLIB/pure/unicode.nim	/^iterator utf8*(s: string): string =$/;"	t
utimes	$NIMLIB/posix/posix.nim	/^proc utimes*(path: cstring, times: ptr array[2, Timeval]): int {.$/;"	f
utoa2Digits	$NIMLIB/std/private/digitsutils.nim	/^proc utoa2Digits*(buf: var openArray[char]; pos: int; digits: uint32) {.inline.} =$/;"	t
utoa8DigitsSkipTrailingZeros	$NIMLIB/std/private/dragonbox.nim	/^proc utoa8DigitsSkipTrailingZeros*(buf: var openArray[char]; pos: int; digits: uint32): int32 {./;"	t
validIdentifier	$NIMLIB/pure/strutils.nim	/^func validIdentifier*(s: string): bool {.rtl, extern: "nsuValidIdentifier".} =$/;"	t
validateData	$NIMLIB/pure/cgi.nim	/^proc validateData*(data: StringTableRef, validKeys: varargs[string]) =$/;"	t
validateUtf8	$NIMLIB/pure/unicode.nim	/^proc validateUtf8*(s: string): int {.inline.} =$/;"	t
value	$NIMLIB/core/macrocache.nim	/^proc value*(c: CacheCounter): int {.magic: "NccValue".} =$/;"	t
value	$NIMLIB/js/dom.nim	/^proc value*(n: Node): cstring {.importcpp: "#.value", nodecl.}$/;"	f
value	$NIMLIB/windows/winlean.nim	/^    value* {.importc: "Value".}: array[6, BYTE]$/;"	t
values	$NIMLIB/pure/collections/critbits.nim	/^iterator values*[T](c: CritBitTree[T]): lent T =$/;"	t
values	$NIMLIB/pure/collections/tables.nim	/^iterator values*[A](t: CountTable[A]): int =$/;"	t
values	$NIMLIB/pure/strtabs.nim	/^iterator values*(t: StringTableRef): string =$/;"	t
valuesWithPrefix	$NIMLIB/pure/collections/critbits.nim	/^iterator valuesWithPrefix*[T](c: CritBitTree[T], prefix: string): lent T =$/;"	t
var	$NIMLIB/pure/htmlgen.nim	/^macro `var`*(e: varargs[untyped]): untyped =$/;"	o
varargsLen	$NIMLIB/system.nim	/^macro varargsLen*(x: varargs[untyped]): int {.since: (1, 1).} =$/;"	t
variance	$NIMLIB/pure/stats.nim	/^proc variance*[T](x: openArray[T]): float =$/;"	t
varianceS	$NIMLIB/pure/stats.nim	/^proc varianceS*[T](x: openArray[T]): float =$/;"	t
verboseFmtStr	$NIMLIB/pure/logging.nim	/^  verboseFmtStr* = "$levelid, [$datetime] -- $appname: " ## \\$/;"	t
version	$NIMLIB/wrappers/pcre.nim	/^proc version*(): cstring$/;"	f
vfork	$NIMLIB/posix/posix.nim	/^proc vfork*(): Pid {.importc, header: "<unistd.h>".}$/;"	f
vibrate	$NIMLIB/js/dom.nim	/^  proc vibrate*(self: Navigator; pattern: openArray[cint]): bool ## https:\/\/developer.mozilla./;"	f
video	$NIMLIB/pure/htmlgen.nim	/^macro video*(e: varargs[untyped]): untyped =$/;"	t
vmTrace	$NIMLIB/std/vmutils.nim	/^proc vmTrace*(on: bool) {.compileTime.} =$/;"	t
void	$NIMLIB/system/basic_types.nim	/^  void* {.magic: "VoidType".}    ## Meta type to denote the absence of any type.$/;"	t
volatile	$NIMLIB/pure/volatile.nim	/^      {.emit: ["*((", typeof(dest[]), " volatile*)(", dest, ")) = ", val, ";"].}$/;"	t
volatileLoad	$NIMLIB/pure/volatile.nim	/^template volatileLoad*[T](src: ptr T): T =$/;"	t
volatileStore	$NIMLIB/pure/volatile.nim	/^template volatileStore*[T](dest: ptr T, val: T) =$/;"	t
wait	$NIMLIB/core/locks.nim	/^proc wait*(cond: var Cond, lock: var Lock) {.inline.} =$/;"	t
wait	$NIMLIB/posix/posix.nim	/^proc wait*(a1: ptr cint): Pid {.importc, discardable, header: "<sys\/wait.h>", sideEffect.}$/;"	f
wait	$NIMLIB/pure/coro.nim	/^proc wait*(c: CoroutineRef, interval = 0.01) =$/;"	t
wait4	$NIMLIB/posix/posix.nim	/^proc wait4*(pid: Pid, status: ptr cint, options: cint, rusage: ptr Rusage): Pid$/;"	f
waitFor	$NIMLIB/pure/asyncdispatch.nim	/^proc waitFor*[T](fut: Future[T]): T =$/;"	t
waitForExit	$NIMLIB/pure/osproc.nim	/^proc waitForExit*(p: Process, timeout: int = -1): int {.rtl,$/;"	t
waitForMultipleObjects	$NIMLIB/std/private/threadtypes.nim	/^  proc waitForMultipleObjects*(nCount: int32,$/;"	f
waitForMultipleObjects	$NIMLIB/windows/winlean.nim	/^proc waitForMultipleObjects*(nCount: DWORD, lpHandles: PWOHandleArray,$/;"	f
waitForSingleObject	$NIMLIB/std/private/threadtypes.nim	/^  proc waitForSingleObject*(hHandle: SysThread, dwMilliseconds: int32): int32 {.$/;"	f
waitForSingleObject	$NIMLIB/windows/winlean.nim	/^proc waitForSingleObject*(hHandle: Handle, dwMilliseconds: int32): int32 {.$/;"	f
waitSysCond	$NIMLIB/std/private/syslocks.nim	/^  proc waitSysCond*(cond: var SysCond, lock: var SysLock) {.$/;"	f
waitid	$NIMLIB/posix/posix.nim	/^proc waitid*(a1: cint, a2: Id, a3: var SigInfo, a4: cint): cint {.$/;"	f
waitpid	$NIMLIB/posix/posix.nim	/^proc waitpid*(a1: Pid, a2: var cint, a3: cint): Pid {.$/;"	f
walkDir	$NIMLIB/std/dirs.nim	/^iterator walkDir*(dir: Path; relative = false, checkDir = false,$/;"	t
walkDir	$NIMLIB/std/private/osdirs.nim	/^iterator walkDir*(dir: string; relative = false, checkDir = false,$/;"	t
walkDirRec	$NIMLIB/std/dirs.nim	/^iterator walkDirRec*(dir: Path,$/;"	i
walkDirRec	$NIMLIB/std/private/osdirs.nim	/^iterator walkDirRec*(dir: string,$/;"	i
walkDirRecFilter	$NIMLIB/std/private/globs.nim	/^iterator walkDirRecFilter*(dir: string, follow: proc(entry: PathEntry): bool = nil,$/;"	t
walkDirs	$NIMLIB/std/private/osdirs.nim	/^iterator walkDirs*(pattern: string): string {.tags: [ReadDirEffect], noWeirdTarget.} =$/;"	t
walkFiles	$NIMLIB/std/private/osdirs.nim	/^iterator walkFiles*(pattern: string): string {.tags: [ReadDirEffect], noWeirdTarget.} =$/;"	t
walkPattern	$NIMLIB/std/private/osdirs.nim	/^iterator walkPattern*(pattern: string): string {.tags: [ReadDirEffect], noWeirdTarget.} =$/;"	t
warn	$NIMLIB/js/jsconsole.nim	/^proc warn*(console: Console) {.importcpp, varargs.}$/;"	f
warn	$NIMLIB/pure/logging.nim	/^template warn*(args: varargs[string, `$`]) =$/;"	t
warning	$NIMLIB/core/macros.nim	/^proc warning*(msg: string, n: NimNode = nil) {.magic: "NWarning", benign.}$/;"	t
warning	$NIMLIB/system/nimscript.nim	/^proc warning*(name: string; val: bool) =$/;"	t
warningStr	$NIMLIB/pure/parsecfg.nim	/^proc warningStr*(c: CfgParser, msg: string): string {.rtl, extern: "npc$1".} =$/;"	t
wasMoved	$NIMLIB/system.nim	/^proc wasMoved*[T](obj: var T) {.magic: "WasMoved", noSideEffect.} =$/;"	t
wbr	$NIMLIB/pure/htmlgen.nim	/^macro wbr*(e: varargs[untyped]): untyped =$/;"	t
wd	$NIMLIB/posix/inotify.nim	/^    wd* {.importc: "wd".}: FileHandle                  ## Watch descriptor.$/;"	t
weekday	$NIMLIB/pure/times.nim	/^proc weekday*(dt: DateTime): WeekDay {.inline.} =$/;"	t
weeks	$NIMLIB/pure/times.nim	/^proc weeks*(w: int): TimeInterval {.inline.} =$/;"	t
weirdTarget	$NIMLIB/std/private/oscommon.nim	/^const weirdTarget* = defined(nimscript) or defined(js)$/;"	t
whichMsgClass	$NIMLIB/packages/docutils/rst.nim	/^proc whichMsgClass*(k: MsgKind): MsgClass =$/;"	t
whitespace	$NIMLIB/pure/pegs.nim	/^template whitespace*: Peg =$/;"	t
winResumeThread	$NIMLIB/std/private/threadtypes.nim	/^  proc winResumeThread*(hThread: SysThread): int32 {.$/;"	f
winSuspendThread	$NIMLIB/std/private/threadtypes.nim	/^  proc winSuspendThread*(hThread: SysThread): int32 {.$/;"	f
window	$NIMLIB/js/dom.nim	/^  window* {.importc, nodecl.}: Window$/;"	t
with	$NIMLIB/std/with.nim	/^macro with*(arg: typed; calls: varargs[untyped]): untyped =$/;"	t
withData	$NIMLIB/pure/ioselects/ioselectors_epoll.nim	/^template withData*[T](s: Selector[T], fd: SocketHandle|int, value,$/;"	m
withData	$NIMLIB/pure/ioselects/ioselectors_kqueue.nim	/^template withData*[T](s: Selector[T], fd: SocketHandle|int, value,$/;"	m
withData	$NIMLIB/pure/ioselects/ioselectors_poll.nim	/^template withData*[T](s: Selector[T], fd: SocketHandle|int, value,$/;"	m
withData	$NIMLIB/pure/ioselects/ioselectors_select.nim	/^template withData*[T](s: Selector[T], fd: SocketHandle|int, value,$/;"	m
withData	$NIMLIB/pure/selectors.nim	/^  template withData*[T](s: Selector[T], fd: SocketHandle|int, value,$/;"	m
withDir	$NIMLIB/system/nimscript.nim	/^template withDir*(dir: string; body: untyped): untyped =$/;"	t
withKey	$NIMLIB/pure/collections/sharedtables.nim	/^proc withKey*[A, B](t: var SharedTable[A, B], key: A,$/;"	f
withLock	$NIMLIB/core/locks.nim	/^template withLock*(a: Lock, body: untyped) =$/;"	t
withRLock	$NIMLIB/core/rlocks.nim	/^template withRLock*(lock: RLock, code: untyped) =$/;"	t
withRegion	$NIMLIB/system/gc_regions.nim	/^template withRegion*(r: var MemRegion; body: untyped) =$/;"	t
withScratchRegion	$NIMLIB/system/gc_regions.nim	/^template withScratchRegion*(body: untyped) =$/;"	t
withTimeout	$NIMLIB/pure/asyncdispatch.nim	/^proc withTimeout*[T](fut: Future[T], timeout: int): owned(Future[bool]) =$/;"	t
withValue	$NIMLIB/pure/collections/sharedtables.nim	/^template withValue*[A, B](t: var SharedTable[A, B], key: A,$/;"	m
withValue	$NIMLIB/pure/collections/tables.nim	/^template withValue*[A, B](t: var Table[A, B], key: A,$/;"	m
wrapBinary	$NIMLIB/std/private/oscommon.nim	/^  template wrapBinary*(varname, winApiProc, arg, arg2: untyped) =$/;"	t
wrapConnectedSocket	$NIMLIB/pure/asyncnet.nim	/^  proc wrapConnectedSocket*(ctx: SslContext, socket: AsyncSocket,$/;"	f
wrapConnectedSocket	$NIMLIB/pure/net.nim	/^  proc wrapConnectedSocket*(ctx: SslContext, socket: Socket,$/;"	f
wrapSocket	$NIMLIB/pure/asyncnet.nim	/^  proc wrapSocket*(ctx: SslContext, socket: AsyncSocket) =$/;"	t
wrapSocket	$NIMLIB/pure/net.nim	/^  proc wrapSocket*(ctx: SslContext, socket: Socket) =$/;"	t
wrapUnary	$NIMLIB/std/private/oscommon.nim	/^  template wrapUnary*(varname, winApiProc, arg: untyped) =$/;"	t
wrapWords	$NIMLIB/std/wordwrap.nim	/^proc wrapWords*(s: string, maxLineWidth = 80,$/;"	t
write	$NIMLIB/js/dom.nim	/^proc write*(d: Document, text: cstring)$/;"	f
write	$NIMLIB/posix/posix.nim	/^proc write*(a1: cint, a2: pointer, a3: int): int {.importc, header: "<unistd.h>".}$/;"	f
write	$NIMLIB/pure/asyncfile.nim	/^proc write*(f: AsyncFile, data: string): Future[void] =$/;"	t
write	$NIMLIB/pure/asyncstreams.nim	/^proc write*[T](future: FutureStream[T], value: T): Future[void] =$/;"	t
write	$NIMLIB/pure/ropes.nim	/^proc write*(s: Stream, r: Rope) {.rtl, extern: "nroWriteStream".} =$/;"	t
write	$NIMLIB/pure/streams.nim	/^proc write*[T](s: Stream, x: T) =$/;"	t
write	$NIMLIB/std/syncio.nim	/^proc write*(f: File, s: string) {.tags: [WriteIOEffect], benign.} =$/;"	t
writeBuffer	$NIMLIB/pure/asyncfile.nim	/^proc writeBuffer*(f: AsyncFile, buf: pointer, size: int): Future[void] =$/;"	t
writeBuffer	$NIMLIB/std/syncio.nim	/^proc writeBuffer*(f: File, buffer: pointer, len: Natural): int {.$/;"	f
writeBytes	$NIMLIB/std/syncio.nim	/^proc writeBytes*(f: File, a: openArray[int8|uint8], start, len: Natural): int {.$/;"	f
writeChars	$NIMLIB/std/syncio.nim	/^proc writeChars*(f: File, a: openArray[char], start, len: Natural): int {.$/;"	f
writeConfig	$NIMLIB/pure/parsecfg.nim	/^proc writeConfig*(dict: Config, stream: Stream) =$/;"	t
writeContentType	$NIMLIB/pure/cgi.nim	/^proc writeContentType*() =$/;"	t
writeData	$NIMLIB/pure/streams.nim	/^proc writeData*(s: Stream, buffer: pointer, bufLen: int) =$/;"	t
writeErrorMessage	$NIMLIB/pure/cgi.nim	/^proc writeErrorMessage*(data: string) =$/;"	t
writeFile	$NIMLIB/std/syncio.nim	/^proc writeFile*(filename: string, content: openArray[byte]) {.since: (1, 1).} =$/;"	t
writeFile	$NIMLIB/windows/winlean.nim	/^proc writeFile*(hFile: Handle, buffer: pointer, nNumberOfBytesToWrite: int32,$/;"	f
writeFloatToBuffer	$NIMLIB/std/formatfloat.nim	/^proc writeFloatToBuffer*(buf: var array[65, char]; value: BiggestFloat | float32): int {.inline./;"	t
writeFloatToBufferRoundtrip	$NIMLIB/std/formatfloat.nim	/^proc writeFloatToBufferRoundtrip*(buf: var array[65, char]; value: float32): int =$/;"	t
writeFloatToBufferSprintf	$NIMLIB/std/formatfloat.nim	/^proc writeFloatToBufferSprintf*(buf: var array[65, char]; value: BiggestFloat): int =$/;"	t
writeFromStream	$NIMLIB/pure/asyncfile.nim	/^proc writeFromStream*(f: AsyncFile, fs: FutureStream[string]) {.async.} =$/;"	t
writeIndexFile	$NIMLIB/packages/docutils/rstgen.nim	/^proc writeIndexFile*(g: var RstGenerator, outfile: string) =$/;"	t
writeLine	$NIMLIB/pure/streams.nim	/^proc writeLine*(s: Stream, args: varargs[string, `$`]) =$/;"	t
writeLine	$NIMLIB/std/syncio.nim	/^proc writeLine*[Ty](f: File, x: varargs[Ty, `$`]) {.inline,$/;"	f
writeStackTrace	$NIMLIB/system.nim	/^  proc writeStackTrace*() {.tags: [], gcsafe, raises: [].}$/;"	f
writeStyled	$NIMLIB/pure/terminal.nim	/^proc writeStyled*(txt: string, style: set[Style] = {styleBright}) =$/;"	t
writeVu64	$NIMLIB/std/varints.nim	/^proc writeVu64*(z: var openArray[byte], x: uint64): int =$/;"	t
writeln	$NIMLIB/js/dom.nim	/^proc writeln*(d: Document, text: cstring)$/;"	f
writev	$NIMLIB/posix/posix.nim	/^proc writev*(a1: cint, a2: ptr IOVec, a3: cint): int {.$/;"	f
wsaCloseEvent	$NIMLIB/windows/winlean.nim	/^proc wsaCloseEvent*(hEvent: Handle): bool$/;"	f
wsaCreateEvent	$NIMLIB/windows/winlean.nim	/^proc wsaCreateEvent*(): Handle$/;"	f
wsaEventSelect	$NIMLIB/windows/winlean.nim	/^proc wsaEventSelect*(s: SocketHandle, hEventObject: Handle,$/;"	f
wsaGetLastError	$NIMLIB/windows/winlean.nim	/^proc wsaGetLastError*(): cint {.importc: "WSAGetLastError", dynlib: ws2dll, sideEffect.}$/;"	f
wsaResetEvent	$NIMLIB/windows/winlean.nim	/^proc wsaResetEvent*(hEvent: Handle): bool$/;"	f
wsaStartup	$NIMLIB/windows/winlean.nim	/^proc wsaStartup*(wVersionRequired: int16, WSData: ptr WSAData): cint {.$/;"	f
xmlCheckedTag	$NIMLIB/pure/htmlgen.nim	/^proc xmlCheckedTag*(argsList: NimNode, tag: string, optAttr = "", reqAttr = "",$/;"	t
xmlEncode	$NIMLIB/pure/cgi.nim	/^proc xmlEncode*(s: string): string =$/;"	t
xmlHeader	$NIMLIB/pure/xmltree.nim	/^  xmlHeader* = "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\" ?>\\n"$/;"	t
xor	$NIMLIB/std/jsbigints.nim	/^func `xor`*(x, y: JsBigInt): JsBigInt {.importjs: "(# ^ #)".} =$/;"	o
xor	$NIMLIB/system/arithmetics.nim	/^proc `xor`*(x, y: uint8): uint8 {.magic: "BitxorI", noSideEffect.}$/;"	o
xor	$NIMLIB/system/basic_types.nim	/^proc `xor`*(x, y: bool): bool {.magic: "Xor", noSideEffect.}$/;"	o
year	$NIMLIB/pure/times.nim	/^proc year*(dt: DateTime): int {.inline.} =$/;"	t
yearday	$NIMLIB/pure/times.nim	/^proc yearday*(dt: DateTime): YeardayRange {.inline.} =$/;"	t
years	$NIMLIB/pure/times.nim	/^proc years*(y: int): TimeInterval {.inline.} =$/;"	t
ze	$NIMLIB/system/arithmetics.nim	/^  proc ze*(x: int8): int {.deprecated.} =$/;"	t
ze64	$NIMLIB/system/arithmetics.nim	/^  proc ze64*(x: int8): int64 {.deprecated.} =$/;"	t
zeroDefault	$NIMLIB/system.nim	/^func zeroDefault*[T](_: typedesc[T]): T {.magic: "ZeroDefault".} =$/;"	t
zeroMem	$NIMLIB/system/memalloc.nim	/^  proc zeroMem*(p: pointer, size: Natural) {.inline, noSideEffect,$/;"	f
zip	$NIMLIB/pure/collections/sequtils.nim	/^  proc zip*[S, T](s1: openArray[S], s2: openArray[T]): retType =$/;"	t
zonedTimeFromAdjTime	$NIMLIB/pure/times.nim	/^proc zonedTimeFromAdjTime*(zone: Timezone, adjTime: Time): ZonedTime =$/;"	t
zonedTimeFromTime	$NIMLIB/pure/times.nim	/^proc zonedTimeFromTime*(zone: Timezone, time: Time): ZonedTime =$/;"	t
