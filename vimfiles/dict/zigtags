!_TAG_FILE_SORTED	1	/1 = sorted/
!_TAG_FILE_ENCODING	utf-8
10e60	$ZIGLIB/std/target/csky.zig	/@"10e60"/;"	field
12844	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const @"12844" = 25/;"	constant
1394	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/@"1394": *const F1394DevicePath/;"	field
16_bit_insts	$ZIGLIB/std/target/amdgpu.zig	/@"16_bit_insts"/;"	field
16bit_mode	$ZIGLIB/std/target/x86.zig	/@"16bit_mode"/;"	field
2292DSTOPTS	$ZIGLIB/std/os/linux.zig	/pub const @"2292DSTOPTS" = 4/;"	constant
2292HOPLIMIT	$ZIGLIB/std/os/linux.zig	/pub const @"2292HOPLIMIT" = 8/;"	constant
2292HOPOPTS	$ZIGLIB/std/os/linux.zig	/pub const @"2292HOPOPTS" = 3/;"	constant
2292PKTINFO	$ZIGLIB/std/os/linux.zig	/pub const @"2292PKTINFO" = 2/;"	constant
2292PKTOPTIONS	$ZIGLIB/std/os/linux.zig	/pub const @"2292PKTOPTIONS" = 6/;"	constant
2292RTHDR	$ZIGLIB/std/os/linux.zig	/pub const @"2292RTHDR" = 5/;"	constant
26BIT	$ZIGLIB/std/os/linux/arm-eabi.zig	/pub const @"26BIT" = 1 << 3/;"	constant
2BIG	$ZIGLIB/std/os/wasi.zig	/@"2BIG" = 1/;"	field
32BIT	$ZIGLIB/std/os/linux/x86_64.zig	/pub const @"32BIT" = 0x40/;"	constant
32BIT_MACHINE	$ZIGLIB/std/coff.zig	/@"32BIT_MACHINE": u1 = 0/;"	field
32bit	$ZIGLIB/std/target/arm.zig	/@"32bit"/;"	field
32bit_mode	$ZIGLIB/std/target/x86.zig	/@"32bit_mode"/;"	field
3DNOW_INSTRUCTIONS_AVAILABLE	$ZIGLIB/std/os/windows.zig	/@"3DNOW_INSTRUCTIONS_AVAILABLE" = 7/;"	field
3dnow	$ZIGLIB/std/target/x86.zig	/@"3dnow"/;"	field
3dnowa	$ZIGLIB/std/target/x86.zig	/@"3dnowa"/;"	field
3e3r1	$ZIGLIB/std/target/csky.zig	/@"3e3r1"/;"	field
3e3r2	$ZIGLIB/std/target/csky.zig	/@"3e3r2"/;"	field
3e3r3	$ZIGLIB/std/target/csky.zig	/@"3e3r3"/;"	field
56800EX	$ZIGLIB/std/elf.zig	/@"56800EX" = 200/;"	field
603e	$ZIGLIB/std/target/powerpc.zig	/pub const @"603e" = CpuModel{$/;"	constant
603ev	$ZIGLIB/std/target/powerpc.zig	/pub const @"603ev" = CpuModel{$/;"	constant
604e	$ZIGLIB/std/target/powerpc.zig	/pub const @"604e" = CpuModel{$/;"	constant
64BIT	$ZIGLIB/std/os/linux.zig	/const @"64BIT" = 0x80000000/;"	constant
64REGSET	$ZIGLIB/std/c/darwin.zig	/pub const @"64REGSET" = 0x0200/;"	constant
64bit	$ZIGLIB/std/target/x86.zig	/@"64bit"/;"	field
64bitregs	$ZIGLIB/std/target/powerpc.zig	/@"64bitregs"/;"	field
68HC05	$ZIGLIB/std/elf.zig	/@"68HC05" = 72/;"	field
68HC08	$ZIGLIB/std/elf.zig	/@"68HC08" = 71/;"	field
68HC11	$ZIGLIB/std/elf.zig	/@"68HC11" = 70/;"	field
68HC12	$ZIGLIB/std/elf.zig	/@"68HC12" = 53/;"	field
68HC16	$ZIGLIB/std/elf.zig	/@"68HC16" = 69/;"	field
7400	$ZIGLIB/std/target/powerpc.zig	/pub const @"7400" = CpuModel{$/;"	constant
7450	$ZIGLIB/std/target/powerpc.zig	/pub const @"7450" = CpuModel{$/;"	constant
78KOR	$ZIGLIB/std/elf.zig	/@"78KOR" = 199/;"	field
7e10	$ZIGLIB/std/target/csky.zig	/@"7e10"/;"	field
8051	$ZIGLIB/std/elf.zig	/@"8051" = 165/;"	field
8msecext	$ZIGLIB/std/target/arm.zig	/@"8msecext"/;"	field
@"resume"	$ZIGLIB/std/os/darwin.zig	/pub fn @"resume"(task: MachTask) MachError!void {$/;"	function
@"suspend"	$ZIGLIB/std/os/darwin.zig	/pub fn @"suspend"(task: MachTask) MachError!void {$/;"	function
@"type"	$ZIGLIB/std/macho.zig	/pub fn @"type"(sect: section_64) u8 {$/;"	function
AAAA	$ZIGLIB/std/os/linux.zig	/pub const AAAA = 28/;"	constant
AAL5_MODE_MESSAGE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const AAL5_MODE_MESSAGE = 1/;"	constant
AAL5_MODE_STREAMING	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const AAL5_MODE_STREAMING = 2/;"	constant
AAL5_SSCS_FRAME_RELAY	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const AAL5_SSCS_FRAME_RELAY = 4/;"	constant
AAL5_SSCS_NULL	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const AAL5_SSCS_NULL = 0/;"	constant
AAL5_SSCS_SSCOP_ASSURED	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const AAL5_SSCS_SSCOP_ASSURED = 1/;"	constant
AAL5_SSCS_SSCOP_NON_ASSURED	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const AAL5_SSCS_SSCOP_NON_ASSURED = 2/;"	constant
AAPCS	$ZIGLIB/std/builtin.zig	/AAPCS/;"	field
AAPCSVFP	$ZIGLIB/std/builtin.zig	/AAPCSVFP/;"	field
AARCH64	$ZIGLIB/std/os/linux.zig	/AARCH64 = toAudit(.aarch64)/;"	field
ABANDONED	$ZIGLIB/std/os/windows/ntstatus.zig	/ABANDONED = 0x00000080/;"	field
ABANDONED_WAIT_0	$ZIGLIB/std/os/windows/win32error.zig	/ABANDONED_WAIT_0 = 735/;"	field
ABANDONED_WAIT_63	$ZIGLIB/std/os/windows/win32error.zig	/ABANDONED_WAIT_63 = 736/;"	field
ABANDON_HIBERFILE	$ZIGLIB/std/os/windows/win32error.zig	/ABANDON_HIBERFILE = 787/;"	field
ABIOS_ERROR	$ZIGLIB/std/os/windows/win32error.zig	/ABIOS_ERROR = 538/;"	field
ABORTED	$ZIGLIB/std/c/darwin.zig	/ABORTED = 14/;"	field
ABORT_TX	$ZIGLIB/std/os/linux.zig	/pub const ABORT_TX = 1 << 7/;"	constant
ABRT	$ZIGLIB/std/os/linux.zig	/pub const ABRT = 6/;"	constant
ABRT_COMPAT	$ZIGLIB/std/c/windows.zig	/pub const ABRT_COMPAT = 6/;"	constant
ABSOLUTE	$ZIGLIB/std/coff.zig	/ABSOLUTE = 0xffff/;"	field
ACCEPT	$ZIGLIB/std/os/linux.zig	/ACCEPT/;"	field
ACCEPTCONN	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const ACCEPTCONN = 2/;"	constant
ACCEPTFILTER	$ZIGLIB/std/c/netbsd.zig	/pub const ACCEPTFILTER = 0x1000/;"	constant
ACCES	$ZIGLIB/std/os/wasi.zig	/ACCES = 2/;"	field
ACCESS	$ZIGLIB/std/os/linux.zig	/pub const ACCESS = 0x00000001/;"	constant
ACCESS_AUDIT_BY_POLICY	$ZIGLIB/std/os/windows/win32error.zig	/ACCESS_AUDIT_BY_POLICY = 785/;"	field
ACCESS_DEFAULT	$ZIGLIB/std/c/solaris.zig	/pub const ACCESS_DEFAULT = 6/;"	constant
ACCESS_DENIED	$ZIGLIB/std/os/windows/win32error.zig	/ACCESS_DENIED = 5/;"	field
ACCESS_DISABLED_BY_POLICY	$ZIGLIB/std/os/windows/win32error.zig	/ACCESS_DISABLED_BY_POLICY = 1260/;"	field
ACCESS_DISABLED_BY_POLICY_DEFAULT	$ZIGLIB/std/os/windows/ntstatus.zig	/ACCESS_DISABLED_BY_POLICY_DEFAULT = 0xC0000361/;"	field
ACCESS_DISABLED_BY_POLICY_OTHER	$ZIGLIB/std/os/windows/ntstatus.zig	/ACCESS_DISABLED_BY_POLICY_OTHER = 0xC0000364/;"	field
ACCESS_DISABLED_BY_POLICY_PATH	$ZIGLIB/std/os/windows/ntstatus.zig	/ACCESS_DISABLED_BY_POLICY_PATH = 0xC0000362/;"	field
ACCESS_DISABLED_BY_POLICY_PUBLISHER	$ZIGLIB/std/os/windows/ntstatus.zig	/ACCESS_DISABLED_BY_POLICY_PUBLISHER = 0xC0000363/;"	field
ACCESS_DISABLED_NO_SAFER_UI_BY_POLICY	$ZIGLIB/std/os/windows/win32error.zig	/ACCESS_DISABLED_NO_SAFER_UI_BY_POLICY = 786/;"	field
ACCESS_DISABLED_WEBBLADE	$ZIGLIB/std/os/windows/win32error.zig	/ACCESS_DISABLED_WEBBLADE = 1277/;"	field
ACCESS_DISABLED_WEBBLADE_TAMPER	$ZIGLIB/std/os/windows/win32error.zig	/ACCESS_DISABLED_WEBBLADE_TAMPER = 1278/;"	field
ACCESS_LWP	$ZIGLIB/std/c/solaris.zig	/pub const ACCESS_LWP = 7/;"	constant
ACCESS_MANY	$ZIGLIB/std/c/solaris.zig	/pub const ACCESS_MANY = 8/;"	constant
ACCESS_MASK	$ZIGLIB/std/os/windows.zig	/^pub const ACCESS_MASK = DWORD/;"	constant
ACCESS_VIOLATION	$ZIGLIB/std/os/windows/ntstatus.zig	/ACCESS_VIOLATION = 0xC0000005/;"	field
ACCMODE	$ZIGLIB/std/c/wasi.zig	/pub const ACCMODE = (EXEC | RDWR | SEARCH)/;"	constant
ACCOUNT_DISABLED	$ZIGLIB/std/os/windows/win32error.zig	/ACCOUNT_DISABLED = 1331/;"	field
ACCOUNT_EXPIRED	$ZIGLIB/std/os/windows/win32error.zig	/ACCOUNT_EXPIRED = 1793/;"	field
ACCOUNT_LOCKED_OUT	$ZIGLIB/std/os/windows/win32error.zig	/ACCOUNT_LOCKED_OUT = 1909/;"	field
ACCOUNT_RESTRICTION	$ZIGLIB/std/os/windows/win32error.zig	/ACCOUNT_RESTRICTION = 1327/;"	field
ACM_OPENA	$ZIGLIB/std/os/windows/user32.zig	/^pub const ACM_OPENA = 0x0464/;"	constant
ACM_OPENW	$ZIGLIB/std/os/windows/user32.zig	/^pub const ACM_OPENW = 0x0467/;"	constant
ACM_PLAY	$ZIGLIB/std/os/windows/user32.zig	/^pub const ACM_PLAY = 0x0465/;"	constant
ACM_STOP	$ZIGLIB/std/os/windows/user32.zig	/^pub const ACM_STOP = 0x0466/;"	constant
ACPIMemoryNVS	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/ACPIMemoryNVS/;"	field
ACPIReclaimMemory	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/ACPIReclaimMemory/;"	field
ACPI_ACQUIRE_GLOBAL_LOCK	$ZIGLIB/std/os/windows/ntstatus.zig	/ACPI_ACQUIRE_GLOBAL_LOCK = 0xC0140012/;"	field
ACPI_ADDRESS_NOT_MAPPED	$ZIGLIB/std/os/windows/ntstatus.zig	/ACPI_ADDRESS_NOT_MAPPED = 0xC014000C/;"	field
ACPI_ALREADY_INITIALIZED	$ZIGLIB/std/os/windows/ntstatus.zig	/ACPI_ALREADY_INITIALIZED = 0xC0140013/;"	field
ACPI_ASSERT_FAILED	$ZIGLIB/std/os/windows/ntstatus.zig	/ACPI_ASSERT_FAILED = 0xC0140003/;"	field
ACPI_ERROR	$ZIGLIB/std/os/windows/win32error.zig	/ACPI_ERROR = 669/;"	field
ACPI_FATAL	$ZIGLIB/std/os/windows/ntstatus.zig	/ACPI_FATAL = 0xC0140006/;"	field
ACPI_HANDLER_COLLISION	$ZIGLIB/std/os/windows/ntstatus.zig	/ACPI_HANDLER_COLLISION = 0xC014000E/;"	field
ACPI_INCORRECT_ARGUMENT_COUNT	$ZIGLIB/std/os/windows/ntstatus.zig	/ACPI_INCORRECT_ARGUMENT_COUNT = 0xC014000B/;"	field
ACPI_INVALID_ACCESS_SIZE	$ZIGLIB/std/os/windows/ntstatus.zig	/ACPI_INVALID_ACCESS_SIZE = 0xC0140011/;"	field
ACPI_INVALID_ARGTYPE	$ZIGLIB/std/os/windows/ntstatus.zig	/ACPI_INVALID_ARGTYPE = 0xC0140008/;"	field
ACPI_INVALID_ARGUMENT	$ZIGLIB/std/os/windows/ntstatus.zig	/ACPI_INVALID_ARGUMENT = 0xC0140005/;"	field
ACPI_INVALID_DATA	$ZIGLIB/std/os/windows/ntstatus.zig	/ACPI_INVALID_DATA = 0xC014000F/;"	field
ACPI_INVALID_EVENTTYPE	$ZIGLIB/std/os/windows/ntstatus.zig	/ACPI_INVALID_EVENTTYPE = 0xC014000D/;"	field
ACPI_INVALID_INDEX	$ZIGLIB/std/os/windows/ntstatus.zig	/ACPI_INVALID_INDEX = 0xC0140004/;"	field
ACPI_INVALID_MUTEX_LEVEL	$ZIGLIB/std/os/windows/ntstatus.zig	/ACPI_INVALID_MUTEX_LEVEL = 0xC0140015/;"	field
ACPI_INVALID_OBJTYPE	$ZIGLIB/std/os/windows/ntstatus.zig	/ACPI_INVALID_OBJTYPE = 0xC0140009/;"	field
ACPI_INVALID_OPCODE	$ZIGLIB/std/os/windows/ntstatus.zig	/ACPI_INVALID_OPCODE = 0xC0140001/;"	field
ACPI_INVALID_REGION	$ZIGLIB/std/os/windows/ntstatus.zig	/ACPI_INVALID_REGION = 0xC0140010/;"	field
ACPI_INVALID_SUPERNAME	$ZIGLIB/std/os/windows/ntstatus.zig	/ACPI_INVALID_SUPERNAME = 0xC0140007/;"	field
ACPI_INVALID_TABLE	$ZIGLIB/std/os/windows/ntstatus.zig	/ACPI_INVALID_TABLE = 0xC0140019/;"	field
ACPI_INVALID_TARGETTYPE	$ZIGLIB/std/os/windows/ntstatus.zig	/ACPI_INVALID_TARGETTYPE = 0xC014000A/;"	field
ACPI_MUTEX_NOT_OWNED	$ZIGLIB/std/os/windows/ntstatus.zig	/ACPI_MUTEX_NOT_OWNED = 0xC0140016/;"	field
ACPI_MUTEX_NOT_OWNER	$ZIGLIB/std/os/windows/ntstatus.zig	/ACPI_MUTEX_NOT_OWNER = 0xC0140017/;"	field
ACPI_NOT_INITIALIZED	$ZIGLIB/std/os/windows/ntstatus.zig	/ACPI_NOT_INITIALIZED = 0xC0140014/;"	field
ACPI_POWER_REQUEST_FAILED	$ZIGLIB/std/os/windows/ntstatus.zig	/ACPI_POWER_REQUEST_FAILED = 0xC0140021/;"	field
ACPI_REG_HANDLER_FAILED	$ZIGLIB/std/os/windows/ntstatus.zig	/ACPI_REG_HANDLER_FAILED = 0xC0140020/;"	field
ACPI_RS_ACCESS	$ZIGLIB/std/os/windows/ntstatus.zig	/ACPI_RS_ACCESS = 0xC0140018/;"	field
ACPI_STACK_OVERFLOW	$ZIGLIB/std/os/windows/ntstatus.zig	/ACPI_STACK_OVERFLOW = 0xC0140002/;"	field
ACTION	$ZIGLIB/std/os/linux/seccomp.zig	/pub const ACTION = 0x7fff0000/;"	constant
ACTION_FULL	$ZIGLIB/std/os/linux/seccomp.zig	/pub const ACTION_FULL = 0xffff0000/;"	constant
ACTIVE	$ZIGLIB/std/os/linux.zig	/pub const ACTIVE = (1 << 30)/;"	constant
ACTIVE_CONNECTIONS	$ZIGLIB/std/os/windows/win32error.zig	/ACTIVE_CONNECTIONS = 2402/;"	field
ADAPTER_HARDWARE_ERROR	$ZIGLIB/std/os/windows/ntstatus.zig	/ADAPTER_HARDWARE_ERROR = 0xC00000C2/;"	field
ADAP_HDW_ERR	$ZIGLIB/std/os/windows/win32error.zig	/ADAP_HDW_ERR = 57/;"	field
ADDFD	$ZIGLIB/std/os/linux/seccomp.zig	/pub const ADDFD = IOCTL.IOW('!', 3, notif_addfd)/;"	constant
ADDFD_FLAG	$ZIGLIB/std/os/linux/seccomp.zig	/^pub const ADDFD_FLAG = struct {$/;"	struct
ADDFILESIGS	$ZIGLIB/std/c/darwin.zig	/pub const ADDFILESIGS = 61/;"	constant
ADDFILESIGS_FOR_DYLD_SIM	$ZIGLIB/std/c/darwin.zig	/pub const ADDFILESIGS_FOR_DYLD_SIM = 83/;"	constant
ADDFILESIGS_RETURN	$ZIGLIB/std/c/darwin.zig	/pub const ADDFILESIGS_RETURN = 97/;"	constant
ADDR	$ZIGLIB/std/os/linux.zig	/pub const ADDR = 8/;"	constant
ADDRCONFIG	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const ADDRCONFIG = 1024/;"	constant
ADDRESS	$ZIGLIB/std/os/linux.zig	/ADDRESS/;"	field
ADDRESS_ALREADY_ASSOCIATED	$ZIGLIB/std/os/windows/win32error.zig	/ADDRESS_ALREADY_ASSOCIATED = 1227/;"	field
ADDRESS_ALREADY_EXISTS	$ZIGLIB/std/os/windows/ntstatus.zig	/ADDRESS_ALREADY_EXISTS = 0xC000020A/;"	field
ADDRESS_CLOSED	$ZIGLIB/std/os/windows/ntstatus.zig	/ADDRESS_CLOSED = 0xC000020B/;"	field
ADDRESS_FAMILY	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const ADDRESS_FAMILY = u16/;"	constant
ADDRESS_NOT_ASSOCIATED	$ZIGLIB/std/os/windows/win32error.zig	/ADDRESS_NOT_ASSOCIATED = 1228/;"	field
ADDRFAMILY	$ZIGLIB/std/c/solaris.zig	/ADDRFAMILY = 1/;"	field
ADDRFORM	$ZIGLIB/std/os/linux.zig	/pub const ADDRFORM = 1/;"	constant
ADDRINFOEX_VERSION_2	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const ADDRINFOEX_VERSION_2 = 2/;"	constant
ADDRINFOEX_VERSION_3	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const ADDRINFOEX_VERSION_3 = 3/;"	constant
ADDRINFOEX_VERSION_4	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const ADDRINFOEX_VERSION_4 = 4/;"	constant
ADDRINUSE	$ZIGLIB/std/os/wasi.zig	/ADDRINUSE = 3/;"	field
ADDRNOTAVAIL	$ZIGLIB/std/os/wasi.zig	/ADDRNOTAVAIL = 4/;"	field
ADDR_PREFERENCES	$ZIGLIB/std/os/linux.zig	/pub const ADDR_PREFERENCES = 72/;"	constant
ADDSIGS	$ZIGLIB/std/c/darwin.zig	/pub const ADDSIGS = 59/;"	constant
ADD_MEMBERSHIP	$ZIGLIB/std/os/linux.zig	/pub const ADD_MEMBERSHIP = 35/;"	constant
ADD_SEALS	$ZIGLIB/std/c/freebsd.zig	/pub const ADD_SEALS = 19/;"	constant
ADD_SOURCE_MEMBERSHIP	$ZIGLIB/std/os/linux.zig	/pub const ADD_SOURCE_MEMBERSHIP = 39/;"	constant
ADFS	$ZIGLIB/std/c/freebsd.zig	/pub const ADFS = 68/;"	constant
ADVANCED_INSTALLER_FAILED	$ZIGLIB/std/os/windows/ntstatus.zig	/ADVANCED_INSTALLER_FAILED = 0xC0150020/;"	field
ADVICE_DONTNEED	$ZIGLIB/std/os/wasi.zig	/^pub const ADVICE_DONTNEED: advice_t = 4/;"	constant
ADVICE_NOREUSE	$ZIGLIB/std/os/wasi.zig	/^pub const ADVICE_NOREUSE: advice_t = 5/;"	constant
ADVICE_NORMAL	$ZIGLIB/std/os/wasi.zig	/^pub const ADVICE_NORMAL: advice_t = 0/;"	constant
ADVICE_RANDOM	$ZIGLIB/std/os/wasi.zig	/^pub const ADVICE_RANDOM: advice_t = 2/;"	constant
ADVICE_SEQUENTIAL	$ZIGLIB/std/os/wasi.zig	/^pub const ADVICE_SEQUENTIAL: advice_t = 1/;"	constant
ADVICE_WILLNEED	$ZIGLIB/std/os/wasi.zig	/^pub const ADVICE_WILLNEED: advice_t = 3/;"	constant
AEAD	$ZIGLIB/std/crypto/tls.zig	/pub const AEAD = AeadType/;"	constant
AEGIS_128L_SHA256	$ZIGLIB/std/crypto/tls.zig	/AEGIS_128L_SHA256: HandshakeCipherT(crypto.aead.aegis.Aegis128L, crypto.hash.sha2.Sha256)/;"	field
AEGIS_256_SHA384	$ZIGLIB/std/crypto/tls.zig	/AEGIS_256_SHA384: HandshakeCipherT(crypto.aead.aegis.Aegis256, crypto.hash.sha2.Sha384)/;"	field
AES_128_CCM_8_SHA256	$ZIGLIB/std/crypto/tls.zig	/AES_128_CCM_8_SHA256 = 0x1305/;"	field
AES_128_CCM_SHA256	$ZIGLIB/std/crypto/tls.zig	/AES_128_CCM_SHA256 = 0x1304/;"	field
AES_128_GCM_SHA256	$ZIGLIB/std/crypto/tls.zig	/AES_128_GCM_SHA256: HandshakeCipherT(crypto.aead.aes_gcm.Aes128Gcm, crypto.hash.sha2.Sha256)/;"	field
AES_256_GCM_SHA384	$ZIGLIB/std/crypto/tls.zig	/AES_256_GCM_SHA384: HandshakeCipherT(crypto.aead.aes_gcm.Aes256Gcm, crypto.hash.sha2.Sha384)/;"	field
AFNOSUPPORT	$ZIGLIB/std/os/wasi.zig	/AFNOSUPPORT = 5/;"	field
AFRIKAANS	$ZIGLIB/std/os/windows/lang.zig	/^pub const AFRIKAANS = 0x36/;"	constant
AFRIKAANS_SOUTH_AFRICA	$ZIGLIB/std/os/windows/sublang.zig	/^pub const AFRIKAANS_SOUTH_AFRICA = 0x01/;"	constant
AF_SPEC	$ZIGLIB/std/os/linux.zig	/AF_SPEC/;"	field
AF_SUN	$ZIGLIB/std/c/solaris.zig	/^pub const AF_SUN = struct {$/;"	struct
AGAIN	$ZIGLIB/std/os/wasi.zig	/AGAIN = 6/;"	field
AGENTS_EXHAUSTED	$ZIGLIB/std/os/windows/ntstatus.zig	/AGENTS_EXHAUSTED = 0xC0000085/;"	field
AGGRESSIVE_WS_TRIM	$ZIGLIB/std/coff.zig	/AGGRESSIVE_WS_TRIM: u1 = 0/;"	field
AHIP	$ZIGLIB/std/c/freebsd.zig	/pub const AHIP = 61/;"	constant
AI_NUMERICSERV	$ZIGLIB/std/c/haiku.zig	/^pub const AI_NUMERICSERV = AI.NUMERICSERV/;"	constant
ALARM	$ZIGLIB/std/os/plan9.zig	/ALARM = 6/;"	field
ALBANIAN	$ZIGLIB/std/os/windows/lang.zig	/^pub const ALBANIAN = 0x1c/;"	constant
ALBANIAN_ALBANIA	$ZIGLIB/std/os/windows/sublang.zig	/^pub const ALBANIAN_ALBANIA = 0x01/;"	constant
ALERT	$ZIGLIB/std/os.zig	/pub const ALERT = 1/;"	constant
ALERTED	$ZIGLIB/std/os/windows/win32error.zig	/ALERTED = 739/;"	field
ALIAS_EXISTS	$ZIGLIB/std/os/windows/win32error.zig	/ALIAS_EXISTS = 1379/;"	field
ALIGN	$ZIGLIB/std/coff.zig	/ALIGN: u4 = 0/;"	field
ALIGNMENT_FAULTS	$ZIGLIB/std/os/linux.zig	/ALIGNMENT_FAULTS/;"	field
ALIGNTO	$ZIGLIB/std/os/linux.zig	/pub const ALIGNTO = 4/;"	constant
ALLDONE	$ZIGLIB/std/c/linux.zig	/ALLDONE = -103/;"	field
ALLOCATE_BUCKET	$ZIGLIB/std/os/windows/win32error.zig	/ALLOCATE_BUCKET = 602/;"	field
ALLOCSP	$ZIGLIB/std/c/solaris.zig	/pub const ALLOCSP = 10/;"	constant
ALLOTTED_SPACE_EXCEEDED	$ZIGLIB/std/os/windows/win32error.zig	/ALLOTTED_SPACE_EXCEEDED = 1344/;"	field
ALLOW	$ZIGLIB/std/os/linux/seccomp.zig	/pub const ALLOW = 0x7fff0000/;"	constant
ALLOWDT	$ZIGLIB/std/c/openbsd.zig	/pub const ALLOWDT = 65/;"	constant
ALLOWKMEM	$ZIGLIB/std/c/openbsd.zig	/pub const ALLOWKMEM = 52/;"	constant
ALLOW_SEALING	$ZIGLIB/std/os/linux.zig	/pub const ALLOW_SEALING = 0x0002/;"	constant
ALLZONES	$ZIGLIB/std/c/solaris.zig	/pub const ALLZONES = 0x1014/;"	constant
ALL_EVENTS	$ZIGLIB/std/os/linux.zig	/pub const ALL_EVENTS = 0x00000fff/;"	constant
ALL_FLAGS	$ZIGLIB/std/os/linux.zig	/pub const ALL_FLAGS = CLOEXEC | ALLOW_SEALING | HUGETLB/;"	constant
ALL_KEYS	$ZIGLIB/std/os/darwin/cssm.zig	/ALL_KEYS = DB_RECORDTYPE_OPEN_GROUP_START + 8/;"	field
ALL_SIDS_FILTERED	$ZIGLIB/std/os/windows/ntstatus.zig	/ALL_SIDS_FILTERED = 0xC000035E/;"	field
ALL_USER_TRUST_QUOTA_EXCEEDED	$ZIGLIB/std/os/windows/win32error.zig	/ALL_USER_TRUST_QUOTA_EXCEEDED = 1933/;"	field
ALPC_CHECK_COMPLETION_LIST	$ZIGLIB/std/os/windows/ntstatus.zig	/ALPC_CHECK_COMPLETION_LIST = 0x40000030/;"	field
ALPHA	$ZIGLIB/std/elf.zig	/ALPHA = 41/;"	field
ALPHA_BYTE_INSTRUCTIONS	$ZIGLIB/std/os/windows.zig	/ALPHA_BYTE_INSTRUCTIONS = 5/;"	field
ALREADY	$ZIGLIB/std/os/wasi.zig	/ALREADY = 7/;"	field
ALREADY_ASSIGNED	$ZIGLIB/std/os/windows/win32error.zig	/ALREADY_ASSIGNED = 85/;"	field
ALREADY_COMMITTED	$ZIGLIB/std/os/windows/ntstatus.zig	/ALREADY_COMMITTED = 0xC0000021/;"	field
ALREADY_DISCONNECTED	$ZIGLIB/std/os/windows/ntstatus.zig	/ALREADY_DISCONNECTED = 0x80000025/;"	field
ALREADY_EXISTS	$ZIGLIB/std/os/windows/win32error.zig	/ALREADY_EXISTS = 183/;"	field
ALREADY_FIBER	$ZIGLIB/std/os/windows/win32error.zig	/ALREADY_FIBER = 1280/;"	field
ALREADY_INITIALIZED	$ZIGLIB/std/os/windows/win32error.zig	/ALREADY_INITIALIZED = 1247/;"	field
ALREADY_IN_SET	$ZIGLIB/std/c/darwin.zig	/ALREADY_IN_SET = 11/;"	field
ALREADY_REGISTERED	$ZIGLIB/std/os/windows/win32error.zig	/ALREADY_REGISTERED = 1242/;"	field
ALREADY_RUNNING_LKG	$ZIGLIB/std/os/windows/win32error.zig	/ALREADY_RUNNING_LKG = 1074/;"	field
ALREADY_THREAD	$ZIGLIB/std/os/windows/win32error.zig	/ALREADY_THREAD = 1281/;"	field
ALREADY_WAITING	$ZIGLIB/std/os/windows/win32error.zig	/ALREADY_WAITING = 1904/;"	field
ALREADY_WIN32	$ZIGLIB/std/os/windows/win32error.zig	/ALREADY_WIN32 = 719/;"	field
ALRM	$ZIGLIB/std/os/linux.zig	/pub const ALRM = 14/;"	constant
ALSATIAN	$ZIGLIB/std/os/windows/lang.zig	/^pub const ALSATIAN = 0x84/;"	constant
ALSATIAN_FRANCE	$ZIGLIB/std/os/windows/sublang.zig	/^pub const ALSATIAN_FRANCE = 0x01/;"	constant
ALTERA_NIOS2	$ZIGLIB/std/elf.zig	/ALTERA_NIOS2 = 113/;"	field
ALTERNATIVE_ARCHITECTURE_TYPE	$ZIGLIB/std/os/windows.zig	/^pub const ALTERNATIVE_ARCHITECTURE_TYPE = enum(INT) {$/;"	enum
ALTWERASE	$ZIGLIB/std/c/darwin.zig	/^pub const ALTWERASE: tcflag_t = 0x00000200/;"	constant
ALT_IO	$ZIGLIB/std/c/netbsd.zig	/pub const ALT_IO = 0x00040000/;"	constant
ALU64	$ZIGLIB/std/os/linux/bpf.zig	/^pub const ALU64 = 0x07/;"	constant
AM33	$ZIGLIB/std/coff.zig	/AM33 = 0x1d3/;"	field
AMBIGUOUS_SYSTEM_DEVICE	$ZIGLIB/std/os/windows/ntstatus.zig	/AMBIGUOUS_SYSTEM_DEVICE = 0xC0000451/;"	field
AMDGPU	$ZIGLIB/std/elf.zig	/AMDGPU = 224/;"	field
AMHARIC	$ZIGLIB/std/os/windows/lang.zig	/^pub const AMHARIC = 0x5e/;"	constant
AMHARIC_ETHIOPIA	$ZIGLIB/std/os/windows/sublang.zig	/^pub const AMHARIC_ETHIOPIA = 0x01/;"	constant
ANON	$ZIGLIB/std/c/solaris.zig	/pub const ANON = 0x0100/;"	constant
ANONYMOUS	$ZIGLIB/std/os/linux.zig	/pub const ANONYMOUS = if (is_mips) 0x800 else 0x20/;"	constant
ANON_MLP	$ZIGLIB/std/c/solaris.zig	/pub const ANON_MLP = 0x100a/;"	constant
ANTI_DEPENDENCY	$ZIGLIB/std/coff.zig	/ANTI_DEPENDENCY = 4/;"	field
ANY_CALL	$ZIGLIB/std/os/linux.zig	/pub const ANY_CALL = 1 << 4/;"	constant
ANY_RETURN	$ZIGLIB/std/os/linux.zig	/pub const ANY_RETURN = 1 << 5/;"	constant
APCS	$ZIGLIB/std/builtin.zig	/APCS/;"	field
APC_RETURNED_WHILE_IMPERSONATING	$ZIGLIB/std/os/windows/ntstatus.zig	/APC_RETURNED_WHILE_IMPERSONATING = 0xC0000711/;"	field
APES	$ZIGLIB/std/c/freebsd.zig	/pub const APES = 99/;"	constant
APPCONTAINER	$ZIGLIB/std/coff.zig	/APPCONTAINER: u1 = 0/;"	field
APPEND	$ZIGLIB/std/os/wasi.zig	/pub const APPEND: fdflags_t = 0x0001/;"	constant
APPHELP_BLOCK	$ZIGLIB/std/os/windows/win32error.zig	/APPHELP_BLOCK = 1259/;"	field
APPLESHARE_PASSWORD	$ZIGLIB/std/os/darwin/cssm.zig	/APPLESHARE_PASSWORD = DB_RECORDTYPE_APP_DEFINED_START + 2/;"	field
APPLETALK	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const APPLETALK = 16/;"	constant
APP_HANG	$ZIGLIB/std/os/windows/win32error.zig	/APP_HANG = 1298/;"	field
APP_INIT_FAILURE	$ZIGLIB/std/os/windows/win32error.zig	/APP_INIT_FAILURE = 575/;"	field
APP_WRONG_OS	$ZIGLIB/std/os/windows/win32error.zig	/APP_WRONG_OS = 1151/;"	field
ARABIC	$ZIGLIB/std/os/windows/lang.zig	/^pub const ARABIC = 0x01/;"	constant
ARABIC_ALGERIA	$ZIGLIB/std/os/windows/sublang.zig	/^pub const ARABIC_ALGERIA = 0x05/;"	constant
ARABIC_BAHRAIN	$ZIGLIB/std/os/windows/sublang.zig	/^pub const ARABIC_BAHRAIN = 0x0f/;"	constant
ARABIC_EGYPT	$ZIGLIB/std/os/windows/sublang.zig	/^pub const ARABIC_EGYPT = 0x03/;"	constant
ARABIC_IRAQ	$ZIGLIB/std/os/windows/sublang.zig	/^pub const ARABIC_IRAQ = 0x02/;"	constant
ARABIC_JORDAN	$ZIGLIB/std/os/windows/sublang.zig	/^pub const ARABIC_JORDAN = 0x0b/;"	constant
ARABIC_KUWAIT	$ZIGLIB/std/os/windows/sublang.zig	/^pub const ARABIC_KUWAIT = 0x0d/;"	constant
ARABIC_LEBANON	$ZIGLIB/std/os/windows/sublang.zig	/^pub const ARABIC_LEBANON = 0x0c/;"	constant
ARABIC_LIBYA	$ZIGLIB/std/os/windows/sublang.zig	/^pub const ARABIC_LIBYA = 0x04/;"	constant
ARABIC_MOROCCO	$ZIGLIB/std/os/windows/sublang.zig	/^pub const ARABIC_MOROCCO = 0x06/;"	constant
ARABIC_OMAN	$ZIGLIB/std/os/windows/sublang.zig	/^pub const ARABIC_OMAN = 0x08/;"	constant
ARABIC_QATAR	$ZIGLIB/std/os/windows/sublang.zig	/^pub const ARABIC_QATAR = 0x10/;"	constant
ARABIC_SAUDI_ARABIA	$ZIGLIB/std/os/windows/sublang.zig	/^pub const ARABIC_SAUDI_ARABIA = 0x01/;"	constant
ARABIC_SYRIA	$ZIGLIB/std/os/windows/sublang.zig	/^pub const ARABIC_SYRIA = 0x0a/;"	constant
ARABIC_TUNISIA	$ZIGLIB/std/os/windows/sublang.zig	/^pub const ARABIC_TUNISIA = 0x07/;"	constant
ARABIC_UAE	$ZIGLIB/std/os/windows/sublang.zig	/^pub const ARABIC_UAE = 0x0e/;"	constant
ARABIC_YEMEN	$ZIGLIB/std/os/windows/sublang.zig	/^pub const ARABIC_YEMEN = 0x09/;"	constant
ARBITRATION_UNHANDLED	$ZIGLIB/std/os/windows/win32error.zig	/ARBITRATION_UNHANDLED = 723/;"	field
ARCA	$ZIGLIB/std/elf.zig	/ARCA = 109/;"	field
ARCH	$ZIGLIB/std/os/linux/x86_64.zig	/^pub const ARCH = struct {$/;"	struct
ARCHITECTURE	$ZIGLIB/std/coff.zig	/ARCHITECTURE = 7/;"	field
ARC_COMPACT	$ZIGLIB/std/elf.zig	/ARC_COMPACT = 93/;"	field
ARC_COMPACT2	$ZIGLIB/std/elf.zig	/ARC_COMPACT2 = 195/;"	field
ARENA_TRASHED	$ZIGLIB/std/os/windows/win32error.zig	/ARENA_TRASHED = 7/;"	field
ARGMAX	$ZIGLIB/std/c/openbsd.zig	/pub const ARGMAX = 8/;"	constant
ARGUMENT	$ZIGLIB/std/coff.zig	/ARGUMENT = 9/;"	field
ARGUS	$ZIGLIB/std/c/freebsd.zig	/pub const ARGUS = 13/;"	constant
ARITHMETIC	$ZIGLIB/std/c/darwin.zig	/ARITHMETIC = 3/;"	field
ARITHMETIC_OVERFLOW	$ZIGLIB/std/os/windows/win32error.zig	/ARITHMETIC_OVERFLOW = 534/;"	field
ARM64	$ZIGLIB/std/coff.zig	/ARM64 = 0xaa64/;"	field
ARM64_RELOC_ADDEND	$ZIGLIB/std/macho.zig	/ARM64_RELOC_ADDEND/;"	field
ARM64_RELOC_BRANCH26	$ZIGLIB/std/macho.zig	/ARM64_RELOC_BRANCH26/;"	field
ARM64_RELOC_GOT_LOAD_PAGE21	$ZIGLIB/std/macho.zig	/ARM64_RELOC_GOT_LOAD_PAGE21/;"	field
ARM64_RELOC_GOT_LOAD_PAGEOFF12	$ZIGLIB/std/macho.zig	/ARM64_RELOC_GOT_LOAD_PAGEOFF12/;"	field
ARM64_RELOC_PAGE21	$ZIGLIB/std/macho.zig	/ARM64_RELOC_PAGE21/;"	field
ARM64_RELOC_PAGEOFF12	$ZIGLIB/std/macho.zig	/ARM64_RELOC_PAGEOFF12/;"	field
ARM64_RELOC_POINTER_TO_GOT	$ZIGLIB/std/macho.zig	/ARM64_RELOC_POINTER_TO_GOT/;"	field
ARM64_RELOC_SUBTRACTOR	$ZIGLIB/std/macho.zig	/ARM64_RELOC_SUBTRACTOR/;"	field
ARM64_RELOC_TLVP_LOAD_PAGE21	$ZIGLIB/std/macho.zig	/ARM64_RELOC_TLVP_LOAD_PAGE21/;"	field
ARM64_RELOC_TLVP_LOAD_PAGEOFF12	$ZIGLIB/std/macho.zig	/ARM64_RELOC_TLVP_LOAD_PAGEOFF12/;"	field
ARM64_RELOC_UNSIGNED	$ZIGLIB/std/macho.zig	/ARM64_RELOC_UNSIGNED = 0/;"	field
ARMEB	$ZIGLIB/std/os/linux.zig	/ARMEB = toAudit(.armeb)/;"	field
ARMENIAN	$ZIGLIB/std/os/windows/lang.zig	/^pub const ARMENIAN = 0x2b/;"	constant
ARMENIAN_ARMENIA	$ZIGLIB/std/os/windows/sublang.zig	/^pub const ARMENIAN_ARMENIA = 0x01/;"	constant
ARMNT	$ZIGLIB/std/coff.zig	/ARMNT = 0x1c4/;"	field
ARM_11	$ZIGLIB/std/c/darwin.zig	/ARM_11 = 0x8ff620d8/;"	field
ARM_12	$ZIGLIB/std/c/darwin.zig	/ARM_12 = 0xbd1b0ae9/;"	field
ARM_13	$ZIGLIB/std/c/darwin.zig	/ARM_13 = 0x0cc90e64/;"	field
ARM_14	$ZIGLIB/std/c/darwin.zig	/ARM_14 = 0x96077ef1/;"	field
ARM_15	$ZIGLIB/std/c/darwin.zig	/ARM_15 = 0xa8511bca/;"	field
ARM_64BIT_LOADSTORE_ATOMIC	$ZIGLIB/std/os/windows.zig	/ARM_64BIT_LOADSTORE_ATOMIC = 25/;"	field
ARM_9	$ZIGLIB/std/c/darwin.zig	/ARM_9 = 0xe73283ae/;"	field
ARM_CPMU_STATE64	$ZIGLIB/std/c/darwin/aarch64.zig	/^pub const ARM_CPMU_STATE64 = 18/;"	constant
ARM_CYCLONE	$ZIGLIB/std/c/darwin.zig	/ARM_CYCLONE = 0x37a09642/;"	field
ARM_DEBUG_STATE	$ZIGLIB/std/c/darwin/aarch64.zig	/^pub const ARM_DEBUG_STATE = 4/;"	constant
ARM_DEBUG_STATE32	$ZIGLIB/std/c/darwin/aarch64.zig	/^pub const ARM_DEBUG_STATE32 = 14/;"	constant
ARM_DEBUG_STATE64	$ZIGLIB/std/c/darwin/aarch64.zig	/^pub const ARM_DEBUG_STATE64 = 15/;"	constant
ARM_DIVIDE_INSTRUCTION_AVAILABLE	$ZIGLIB/std/os/windows.zig	/ARM_DIVIDE_INSTRUCTION_AVAILABLE = 24/;"	field
ARM_EXCEPTION_STATE	$ZIGLIB/std/c/darwin/aarch64.zig	/^pub const ARM_EXCEPTION_STATE = 3/;"	constant
ARM_EXCEPTION_STATE64	$ZIGLIB/std/c/darwin/aarch64.zig	/^pub const ARM_EXCEPTION_STATE64 = 7/;"	constant
ARM_EXTERNAL_CACHE_AVAILABLE	$ZIGLIB/std/os/windows.zig	/ARM_EXTERNAL_CACHE_AVAILABLE = 26/;"	field
ARM_FIRESTORM_ICESTORM	$ZIGLIB/std/c/darwin.zig	/ARM_FIRESTORM_ICESTORM = 0x1b588bb3/;"	field
ARM_FMAC_INSTRUCTIONS_AVAILABLE	$ZIGLIB/std/os/windows.zig	/ARM_FMAC_INSTRUCTIONS_AVAILABLE = 27/;"	field
ARM_HURRICANE	$ZIGLIB/std/c/darwin.zig	/ARM_HURRICANE = 0x67ceee93/;"	field
ARM_LIGHTNING_THUNDER	$ZIGLIB/std/c/darwin.zig	/ARM_LIGHTNING_THUNDER = 0x462504d2/;"	field
ARM_MONSOON_MISTRAL	$ZIGLIB/std/c/darwin.zig	/ARM_MONSOON_MISTRAL = 0xe81e7ef6/;"	field
ARM_NEON_INSTRUCTIONS_AVAILABLE	$ZIGLIB/std/os/windows.zig	/ARM_NEON_INSTRUCTIONS_AVAILABLE = 19/;"	field
ARM_NEON_STATE	$ZIGLIB/std/c/darwin/aarch64.zig	/^pub const ARM_NEON_STATE = 16/;"	constant
ARM_NEON_STATE64	$ZIGLIB/std/c/darwin/aarch64.zig	/^pub const ARM_NEON_STATE64 = 17/;"	constant
ARM_PAGEIN_STATE	$ZIGLIB/std/c/darwin/aarch64.zig	/^pub const ARM_PAGEIN_STATE = 27/;"	constant
ARM_SWIFT	$ZIGLIB/std/c/darwin.zig	/ARM_SWIFT = 0x1e2d6381/;"	field
ARM_SYNC_ICACHE	$ZIGLIB/compiler_rt/clear_cache.zig	/^const ARM_SYNC_ICACHE = 0/;"	constant
ARM_THREAD_STATE	$ZIGLIB/std/c/darwin/aarch64.zig	/^pub const ARM_THREAD_STATE = 1/;"	constant
ARM_THREAD_STATE32	$ZIGLIB/std/c/darwin/aarch64.zig	/^pub const ARM_THREAD_STATE32 = 9/;"	constant
ARM_THREAD_STATE64	$ZIGLIB/std/c/darwin/aarch64.zig	/^pub const ARM_THREAD_STATE64 = 6/;"	constant
ARM_THREAD_STATE_LAST	$ZIGLIB/std/c/darwin/aarch64.zig	/^pub const ARM_THREAD_STATE_LAST = 8/;"	constant
ARM_TWISTER	$ZIGLIB/std/c/darwin.zig	/ARM_TWISTER = 0x92fb37c8/;"	field
ARM_TYPHOON	$ZIGLIB/std/c/darwin.zig	/ARM_TYPHOON = 0x2c91a47e/;"	field
ARM_UNIFIED_THREAD_STATE	$ZIGLIB/std/c/darwin/aarch64.zig	/^pub const ARM_UNIFIED_THREAD_STATE = ARM_THREAD_STATE/;"	constant
ARM_V81_ATOMIC_INSTRUCTIONS_AVAILABLE	$ZIGLIB/std/os/windows.zig	/ARM_V81_ATOMIC_INSTRUCTIONS_AVAILABLE = 34/;"	field
ARM_V82_DP_INSTRUCTIONS_AVAILABLE	$ZIGLIB/std/os/windows.zig	/ARM_V82_DP_INSTRUCTIONS_AVAILABLE = 43/;"	field
ARM_V83_JSCVT_INSTRUCTIONS_AVAILABLE	$ZIGLIB/std/os/windows.zig	/ARM_V83_JSCVT_INSTRUCTIONS_AVAILABLE = 44/;"	field
ARM_V8_CRC32_INSTRUCTIONS_AVAILABLE	$ZIGLIB/std/os/windows.zig	/ARM_V8_CRC32_INSTRUCTIONS_AVAILABLE = 31/;"	field
ARM_V8_CRYPTO_INSTRUCTIONS_AVAILABLE	$ZIGLIB/std/os/windows.zig	/ARM_V8_CRYPTO_INSTRUCTIONS_AVAILABLE = 30/;"	field
ARM_V8_INSTRUCTIONS_AVAILABLE	$ZIGLIB/std/os/windows.zig	/ARM_V8_INSTRUCTIONS_AVAILABLE = 29/;"	field
ARM_VFP_32_REGISTERS_AVAILABLE	$ZIGLIB/std/os/windows.zig	/ARM_VFP_32_REGISTERS_AVAILABLE = 18/;"	field
ARM_VFP_STATE	$ZIGLIB/std/c/darwin/aarch64.zig	/^pub const ARM_VFP_STATE = 2/;"	constant
ARM_VORTEX_TEMPEST	$ZIGLIB/std/c/darwin.zig	/ARM_VORTEX_TEMPEST = 0x07d34b9f/;"	field
ARM_XSCALE	$ZIGLIB/std/c/darwin.zig	/ARM_XSCALE = 0x53b005f5/;"	field
ARRAY	$ZIGLIB/std/coff.zig	/ARRAY = 48/;"	field
ARRAY_BOUNDS_EXCEEDED	$ZIGLIB/std/os/windows/ntstatus.zig	/ARRAY_BOUNDS_EXCEEDED = 0xC000008C/;"	field
ARSH	$ZIGLIB/std/os/linux/bpf.zig	/^pub const ARSH = 0xc0/;"	constant
ASCII	$ZIGLIB/std/dwarf/ATE.zig	/^pub const ASCII = 0x12/;"	constant
ASSAMESE	$ZIGLIB/std/os/windows/lang.zig	/^pub const ASSAMESE = 0x4d/;"	constant
ASSAMESE_INDIA	$ZIGLIB/std/os/windows/sublang.zig	/^pub const ASSAMESE_INDIA = 0x01/;"	constant
ASSERTION_FAILURE	$ZIGLIB/std/os/windows/win32error.zig	/ASSERTION_FAILURE = 668/;"	field
ASSOCIATE_NAMERES_CONTEXT	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const ASSOCIATE_NAMERES_CONTEXT = GUID.parse("{59a38b67-d4fe-46e1-ba3c-87ea74ca3049}")/;"	constant
ASSOCIATIVE	$ZIGLIB/std/coff.zig	/ASSOCIATIVE = 5/;"	field
ASYNC	$ZIGLIB/std/os/linux/x86_64.zig	/pub const ASYNC = 0o20000/;"	constant
ASYNC_CANCEL	$ZIGLIB/std/os/linux.zig	/ASYNC_CANCEL/;"	field
ATMARK	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const ATMARK = 8/;"	constant
ATMPROTO_AAL1	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const ATMPROTO_AAL1 = 1/;"	constant
ATMPROTO_AAL2	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const ATMPROTO_AAL2 = 2/;"	constant
ATMPROTO_AAL34	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const ATMPROTO_AAL34 = 3/;"	constant
ATMPROTO_AAL5	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const ATMPROTO_AAL5 = 5/;"	constant
ATMPROTO_AALUSER	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const ATMPROTO_AALUSER = 0/;"	constant
ATMPVC	$ZIGLIB/std/os/linux.zig	/pub const ATMPVC = 8/;"	constant
ATMSVC	$ZIGLIB/std/os/linux.zig	/pub const ATMSVC = 20/;"	constant
ATM_ADDR_SIZE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const ATM_ADDR_SIZE = 20/;"	constant
ATM_AESA	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const ATM_AESA = 2/;"	constant
ATM_E164	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const ATM_E164 = 1/;"	constant
ATM_NSAP	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const ATM_NSAP = 2/;"	constant
ATOM	$ZIGLIB/std/os/windows.zig	/^pub const ATOM = u16/;"	constant
ATOMIC_LOCKS_NOT_SUPPORTED	$ZIGLIB/std/os/windows/win32error.zig	/ATOMIC_LOCKS_NOT_SUPPORTED = 174/;"	field
ATTACH_BPF	$ZIGLIB/std/os/linux.zig	/pub const ATTACH_BPF = 52/;"	constant
ATTACH_FILTER	$ZIGLIB/std/os/linux.zig	/pub const ATTACH_FILTER = 26/;"	constant
ATTACH_REUSEPORT_CBPF	$ZIGLIB/std/os/linux.zig	/pub const ATTACH_REUSEPORT_CBPF = 53/;"	constant
ATTACH_REUSEPORT_EBPF	$ZIGLIB/std/os/linux.zig	/pub const ATTACH_REUSEPORT_EBPF = 54/;"	constant
ATTRIB	$ZIGLIB/std/os/linux.zig	/pub const ATTRIB = 0x00000004/;"	constant
AT_BASE	$ZIGLIB/std/elf.zig	/^pub const AT_BASE = 7/;"	constant
AT_BASE_PLATFORM	$ZIGLIB/std/elf.zig	/^pub const AT_BASE_PLATFORM = 24/;"	constant
AT_CLKTCK	$ZIGLIB/std/elf.zig	/^pub const AT_CLKTCK = 17/;"	constant
AT_DCACHEBSIZE	$ZIGLIB/std/elf.zig	/^pub const AT_DCACHEBSIZE = 19/;"	constant
AT_EGID	$ZIGLIB/std/elf.zig	/^pub const AT_EGID = 14/;"	constant
AT_ENTRY	$ZIGLIB/std/elf.zig	/^pub const AT_ENTRY = 9/;"	constant
AT_EUID	$ZIGLIB/std/elf.zig	/^pub const AT_EUID = 12/;"	constant
AT_EXECFD	$ZIGLIB/std/elf.zig	/^pub const AT_EXECFD = 2/;"	constant
AT_EXECFN	$ZIGLIB/std/elf.zig	/^pub const AT_EXECFN = 31/;"	constant
AT_FLAGS	$ZIGLIB/std/elf.zig	/^pub const AT_FLAGS = 8/;"	constant
AT_FPUCW	$ZIGLIB/std/elf.zig	/^pub const AT_FPUCW = 18/;"	constant
AT_GID	$ZIGLIB/std/elf.zig	/^pub const AT_GID = 13/;"	constant
AT_HWCAP	$ZIGLIB/std/elf.zig	/^pub const AT_HWCAP = 16/;"	constant
AT_HWCAP2	$ZIGLIB/std/elf.zig	/^pub const AT_HWCAP2 = 26/;"	constant
AT_ICACHEBSIZE	$ZIGLIB/std/elf.zig	/^pub const AT_ICACHEBSIZE = 20/;"	constant
AT_IGNORE	$ZIGLIB/std/elf.zig	/^pub const AT_IGNORE = 1/;"	constant
AT_IGNOREPPC	$ZIGLIB/std/elf.zig	/^pub const AT_IGNOREPPC = 22/;"	constant
AT_L1D_CACHEGEOMETRY	$ZIGLIB/std/elf.zig	/^pub const AT_L1D_CACHEGEOMETRY = 43/;"	constant
AT_L1D_CACHESHAPE	$ZIGLIB/std/elf.zig	/^pub const AT_L1D_CACHESHAPE = 35/;"	constant
AT_L1D_CACHESIZE	$ZIGLIB/std/elf.zig	/^pub const AT_L1D_CACHESIZE = 42/;"	constant
AT_L1I_CACHEGEOMETRY	$ZIGLIB/std/elf.zig	/^pub const AT_L1I_CACHEGEOMETRY = 41/;"	constant
AT_L1I_CACHESHAPE	$ZIGLIB/std/elf.zig	/^pub const AT_L1I_CACHESHAPE = 34/;"	constant
AT_L1I_CACHESIZE	$ZIGLIB/std/elf.zig	/^pub const AT_L1I_CACHESIZE = 40/;"	constant
AT_L2_CACHEGEOMETRY	$ZIGLIB/std/elf.zig	/^pub const AT_L2_CACHEGEOMETRY = 45/;"	constant
AT_L2_CACHESHAPE	$ZIGLIB/std/elf.zig	/^pub const AT_L2_CACHESHAPE = 36/;"	constant
AT_L2_CACHESIZE	$ZIGLIB/std/elf.zig	/^pub const AT_L2_CACHESIZE = 44/;"	constant
AT_L3_CACHEGEOMETRY	$ZIGLIB/std/elf.zig	/^pub const AT_L3_CACHEGEOMETRY = 47/;"	constant
AT_L3_CACHESHAPE	$ZIGLIB/std/elf.zig	/^pub const AT_L3_CACHESHAPE = 37/;"	constant
AT_L3_CACHESIZE	$ZIGLIB/std/elf.zig	/^pub const AT_L3_CACHESIZE = 46/;"	constant
AT_NOTELF	$ZIGLIB/std/elf.zig	/^pub const AT_NOTELF = 10/;"	constant
AT_NULL	$ZIGLIB/std/elf.zig	/^pub const AT_NULL = 0/;"	constant
AT_PAGESZ	$ZIGLIB/std/elf.zig	/^pub const AT_PAGESZ = 6/;"	constant
AT_PHDR	$ZIGLIB/std/elf.zig	/^pub const AT_PHDR = 3/;"	constant
AT_PHENT	$ZIGLIB/std/elf.zig	/^pub const AT_PHENT = 4/;"	constant
AT_PHNUM	$ZIGLIB/std/elf.zig	/^pub const AT_PHNUM = 5/;"	constant
AT_PLATFORM	$ZIGLIB/std/elf.zig	/^pub const AT_PLATFORM = 15/;"	constant
AT_RANDOM	$ZIGLIB/std/elf.zig	/^pub const AT_RANDOM = 25/;"	constant
AT_SECURE	$ZIGLIB/std/elf.zig	/^pub const AT_SECURE = 23/;"	constant
AT_SUN	$ZIGLIB/std/c/solaris.zig	/^pub const AT_SUN = struct {$/;"	struct
AT_SYSINFO	$ZIGLIB/std/elf.zig	/^pub const AT_SYSINFO = 32/;"	constant
AT_SYSINFO_EHDR	$ZIGLIB/std/elf.zig	/^pub const AT_SYSINFO_EHDR = 33/;"	constant
AT_UCACHEBSIZE	$ZIGLIB/std/elf.zig	/^pub const AT_UCACHEBSIZE = 21/;"	constant
AT_UID	$ZIGLIB/std/elf.zig	/^pub const AT_UID = 11/;"	constant
AUDIO	$ZIGLIB/std/c/openbsd.zig	/pub const AUDIO = 84/;"	constant
AUDIT	$ZIGLIB/std/os/linux.zig	/pub const AUDIT = 9/;"	constant
AUDITING_DISABLED	$ZIGLIB/std/os/windows/ntstatus.zig	/AUDITING_DISABLED = 0xC0000356/;"	field
AUDIT_CONTROL	$ZIGLIB/std/os/linux.zig	/pub const AUDIT_CONTROL = 30/;"	constant
AUDIT_FAILED	$ZIGLIB/std/os/windows/win32error.zig	/AUDIT_FAILED = 606/;"	field
AUDIT_READ	$ZIGLIB/std/os/linux.zig	/pub const AUDIT_READ = 37/;"	constant
AUDIT_WRITE	$ZIGLIB/std/os/linux.zig	/pub const AUDIT_WRITE = 29/;"	constant
AUTH	$ZIGLIB/std/c/openbsd.zig	/pub const AUTH = "authorize"/;"	constant
AUTHENTICATION_FIREWALL_FAILED	$ZIGLIB/std/os/windows/win32error.zig	/AUTHENTICATION_FIREWALL_FAILED = 1935/;"	field
AUTHHDR	$ZIGLIB/std/os/linux.zig	/pub const AUTHHDR = 10/;"	constant
AUTHIP_FAILURE	$ZIGLIB/std/os/windows/win32error.zig	/AUTHIP_FAILURE = 1469/;"	field
AUTHV	$ZIGLIB/std/c/openbsd.zig	/^pub const AUTHV = struct {$/;"	struct
AUTODATASEG_EXCEEDS_64k	$ZIGLIB/std/os/windows/win32error.zig	/AUTODATASEG_EXCEEDS_64k = 199/;"	field
AUTOFLOWLABEL	$ZIGLIB/std/os/linux.zig	/pub const AUTOFLOWLABEL = 70/;"	constant
AUTOMATIC	$ZIGLIB/std/coff.zig	/AUTOMATIC = 1/;"	field
AUTOSYNC	$ZIGLIB/std/c/dragonfly.zig	/pub const AUTOSYNC = 7/;"	constant
AUXFLAGS	$ZIGLIB/std/c/solaris.zig	/pub const AUXFLAGS = 2017/;"	constant
AVR32	$ZIGLIB/std/elf.zig	/AVR32 = 185/;"	field
AVX2_INSTRUCTIONS_AVAILABLE	$ZIGLIB/std/os/windows.zig	/AVX2_INSTRUCTIONS_AVAILABLE = 40/;"	field
AVX512F_INSTRUCTIONS_AVAILABLE	$ZIGLIB/std/os/windows.zig	/AVX512F_INSTRUCTIONS_AVAILABLE = 41/;"	field
AVX_INSTRUCTIONS_AVAILABLE	$ZIGLIB/std/os/windows.zig	/AVX_INSTRUCTIONS_AVAILABLE = 39/;"	field
AWAIT	$ZIGLIB/std/os/plan9.zig	/AWAIT = 47/;"	field
AX25	$ZIGLIB/std/os/linux.zig	/pub const AX25 = 3/;"	constant
AZERBAIJANI	$ZIGLIB/std/os/windows/lang.zig	/^pub const AZERBAIJANI = 0x2c/;"	constant
AZERBAIJANI_AZERBAIJAN_CYRILLIC	$ZIGLIB/std/os/windows/sublang.zig	/^pub const AZERBAIJANI_AZERBAIJAN_CYRILLIC = 0x02/;"	constant
AZERBAIJANI_AZERBAIJAN_LATIN	$ZIGLIB/std/os/windows/sublang.zig	/^pub const AZERBAIJANI_AZERBAIJAN_LATIN = 0x01/;"	constant
AZERI	$ZIGLIB/std/os/windows/lang.zig	/^pub const AZERI = 0x2c/;"	constant
AZERI_CYRILLIC	$ZIGLIB/std/os/windows/sublang.zig	/^pub const AZERI_CYRILLIC = 0x02/;"	constant
AZERI_LATIN	$ZIGLIB/std/os/windows/sublang.zig	/^pub const AZERI_LATIN = 0x01/;"	constant
A_Promoted	$ZIGLIB/std/zig/c_translation.zig	/const A_Promoted = PromotedIntType(A)/;"	constant
A_count	$ZIGLIB/std/sort.zig	/var A_count: usize = 0/;"	variable
A_index	$ZIGLIB/std/sort.zig	/var A_index: usize = A.start/;"	variable
A_is_positive	$ZIGLIB/std/math/big/int.zig	/const A_is_positive = A >= 0/;"	constant
A_last	$ZIGLIB/std/sort.zig	/const A_last = A.length()/;"	constant
AbbrevAttr	$ZIGLIB/std/dwarf.zig	/^const AbbrevAttr = struct {$/;"	struct
AbbrevTable	$ZIGLIB/std/dwarf.zig	/^const AbbrevTable = std.ArrayList(AbbrevTableEntry)/;"	constant
AbbrevTableEntry	$ZIGLIB/std/dwarf.zig	/^const AbbrevTableEntry = struct {$/;"	struct
AbbrevTableHeader	$ZIGLIB/std/dwarf.zig	/^const AbbrevTableHeader = struct {$/;"	struct
AbiAndDynamicLinkerFromFileError	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/^pub const AbiAndDynamicLinkerFromFileError = error{$/;"	constant
Aborted	$ZIGLIB/std/os/windows.zig	/Aborted/;"	field
AbsolutePointerMode	$ZIGLIB/std/os/uefi/protocols/absolute_pointer_protocol.zig	/^pub const AbsolutePointerMode = extern struct {$/;"	struct
AbsolutePointerModeAttributes	$ZIGLIB/std/os/uefi/protocols/absolute_pointer_protocol.zig	/^pub const AbsolutePointerModeAttributes = packed struct(u32) {$/;"	struct
AbsolutePointerProtocol	$ZIGLIB/std/os/uefi/protocols/absolute_pointer_protocol.zig	/^pub const AbsolutePointerProtocol = extern struct {$/;"	struct
AbsolutePointerState	$ZIGLIB/std/os/uefi/protocols/absolute_pointer_protocol.zig	/^pub const AbsolutePointerState = extern struct {$/;"	struct
AbsolutePointerStateActiveButtons	$ZIGLIB/std/os/uefi/protocols/absolute_pointer_protocol.zig	/^pub const AbsolutePointerStateActiveButtons = packed struct(u32) {$/;"	struct
AccOp	$ZIGLIB/std/math/big/int.zig	/^const AccOp = enum {$/;"	enum
AcceptError	$ZIGLIB/std/os.zig	/^pub const AcceptError = error{$/;"	constant
AccessDenied	$ZIGLIB/std/os/uefi/status.zig	/AccessDenied = high_bit | 15/;"	field
AccessError	$ZIGLIB/std/os.zig	/^pub const AccessError = error{$/;"	constant
AccessFlags	$ZIGLIB/std/os/windows.zig	/AccessFlags: ACCESS_MASK/;"	field
AccessInformation	$ZIGLIB/std/os/windows.zig	/AccessInformation: FILE_ACCESS_INFORMATION/;"	field
Acpi	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/Acpi: AcpiDevicePath/;"	field
AcpiDevicePath	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/^pub const AcpiDevicePath = union(Subtype) {$/;"	union
AcqRel	$ZIGLIB/std/builtin.zig	/AcqRel/;"	field
Acquire	$ZIGLIB/std/builtin.zig	/Acquire/;"	field
Action	$ZIGLIB/std/os/windows.zig	/Action: DWORD/;"	field
Actions	$ZIGLIB/std/os/posix_spawn.zig	/pub const Actions = struct {$/;"	struct
ActivationContextData	$ZIGLIB/std/os/windows.zig	/ActivationContextData: *const ACTIVATION_CONTEXT_DATA/;"	field
ActiveConsoleId	$ZIGLIB/std/os/windows.zig	/ActiveConsoleId: ULONG/;"	field
ActiveFields	$ZIGLIB/std/meta/trailer_flags.zig	/pub const ActiveFields = std.enums.EnumFieldStruct(FieldEnum, bool, false)/;"	constant
ActiveGroupCount	$ZIGLIB/std/os/windows.zig	/ActiveGroupCount: UCHAR/;"	field
ActiveProcessAffinityMask	$ZIGLIB/std/os/windows.zig	/ActiveProcessAffinityMask: KAFFINITY/;"	field
ActiveProcessorCount	$ZIGLIB/std/os/windows.zig	/ActiveProcessorCount: ULONG/;"	field
Ada83	$ZIGLIB/std/dwarf/LANG.zig	/^pub const Ada83 = 0x0003/;"	constant
Ada95	$ZIGLIB/std/dwarf/LANG.zig	/^pub const Ada95 = 0x000d/;"	constant
AdaptedContext	$ZIGLIB/std/hash_map.zig	/const AdaptedContext = struct {$/;"	struct
Adapter	$ZIGLIB/std/crypto/Certificate/Bundle.zig	/const Adapter = struct {$/;"	struct
AddExecutableOptions	$ZIGLIB/std/Build/TranslateCStep.zig	/^pub const AddExecutableOptions = struct {$/;"	struct
AddModuleOptions	$ZIGLIB/std/Build.zig	/^pub const AddModuleOptions = struct {$/;"	struct
Addr	$ZIGLIB/std/elf.zig	/^pub const Addr = switch (@sizeOf(usize)) {$/;"	constant
AddrOffset	$ZIGLIB/std/dwarf.zig	/AddrOffset: usize/;"	field
Address	$ZIGLIB/std/os/windows/ws2_32.zig	/Address: [1]SOCKET_ADDRESS/;"	field
AddressList	$ZIGLIB/std/net.zig	/^pub const AddressList = struct {$/;"	struct
AddressOfCallBacks	$ZIGLIB/std/start_windows_tls.zig	/AddressOfCallBacks: *anyopaque/;"	field
AddressOfIndex	$ZIGLIB/std/start_windows_tls.zig	/AddressOfIndex: *anyopaque/;"	field
AddressSpace	$ZIGLIB/std/builtin.zig	/^pub const AddressSpace = enum {$/;"	enum
Addresses	$ZIGLIB/std/target/spirv.zig	/Addresses/;"	field
Adler32	$ZIGLIB/std/hash/adler.zig	/^pub const Adler32 = struct {$/;"	struct
AdrDevicePath	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/pub const AdrDevicePath = extern struct {$/;"	struct
Aead	$ZIGLIB/std/crypto/gimli.zig	/^pub const Aead = struct {$/;"	struct
Aegis128L	$ZIGLIB/std/crypto/aegis.zig	/^pub const Aegis128L = struct {$/;"	struct
Aegis128LMac	$ZIGLIB/std/crypto/aegis.zig	/^pub const Aegis128LMac = AegisMac(Aegis128L)/;"	constant
Aegis256	$ZIGLIB/std/crypto/aegis.zig	/^pub const Aegis256 = struct {$/;"	struct
Aegis256Mac	$ZIGLIB/std/crypto/aegis.zig	/^pub const Aegis256Mac = AegisMac(Aegis256)/;"	constant
AegisMac	$ZIGLIB/std/crypto/aegis.zig	/^fn AegisMac(comptime T: type) type {$/;"	function
Aes128	$ZIGLIB/std/crypto/aes/soft.zig	/^pub const Aes128 = struct {$/;"	struct
Aes128Gcm	$ZIGLIB/std/crypto/aes_gcm.zig	/^pub const Aes128Gcm = AesGcm(crypto.core.aes.Aes128)/;"	constant
Aes128Ocb	$ZIGLIB/std/crypto/aes_ocb.zig	/^pub const Aes128Ocb = AesOcb(aes.Aes128)/;"	constant
Aes256	$ZIGLIB/std/crypto/aes/soft.zig	/^pub const Aes256 = struct {$/;"	struct
Aes256Gcm	$ZIGLIB/std/crypto/aes_gcm.zig	/^pub const Aes256Gcm = AesGcm(crypto.core.aes.Aes256)/;"	constant
Aes256Ocb	$ZIGLIB/std/crypto/aes_ocb.zig	/^pub const Aes256Ocb = AesOcb(aes.Aes256)/;"	constant
AesBlock	$ZIGLIB/std/crypto/aegis.zig	/^const AesBlock = std.crypto.core.aes.Block/;"	constant
AesDecryptCtx	$ZIGLIB/std/crypto/aes/soft.zig	/^pub fn AesDecryptCtx(comptime Aes: type) type {$/;"	function
AesEncryptCtx	$ZIGLIB/std/crypto/aes/soft.zig	/^pub fn AesEncryptCtx(comptime Aes: type) type {$/;"	function
AesGcm	$ZIGLIB/std/crypto/aes_gcm.zig	/^fn AesGcm(comptime Aes: anytype) type {$/;"	function
AesOcb	$ZIGLIB/std/crypto/aes_ocb.zig	/^fn AesOcb(comptime Aes: anytype) type {$/;"	function
AfRr	$ZIGLIB/std/net.zig	/const AfRr = struct {$/;"	struct
AffineCoordinates	$ZIGLIB/std/crypto/pcurves/secp256k1.zig	/^pub const AffineCoordinates = struct {$/;"	struct
AffinityMask	$ZIGLIB/std/os/windows.zig	/AffinityMask: KAFFINITY/;"	field
AggregateContainerStack	$ZIGLIB/std/json.zig	/^fn AggregateContainerStack(comptime n: usize) type {$/;"	function
AggregateContainerType	$ZIGLIB/std/json.zig	/^const AggregateContainerType = enum(u1) { object, array }/;"	enum
AitSamplingValue	$ZIGLIB/std/os/windows.zig	/AitSamplingValue: ULONG/;"	field
AlertDescription	$ZIGLIB/std/crypto/tls.zig	/^pub const AlertDescription = enum(u8) {$/;"	enum
AlertLevel	$ZIGLIB/std/crypto/tls.zig	/^pub const AlertLevel = enum(u8) {$/;"	enum
Algorithm	$ZIGLIB/std/hash/crc.zig	/^pub fn Algorithm(comptime W: type) type {$/;"	function
AlgorithmCategory	$ZIGLIB/std/crypto/Certificate.zig	/^pub const AlgorithmCategory = enum {$/;"	enum
AlignCastError	$ZIGLIB/std/math.zig	/^pub const AlignCastError = error{UnalignedMemory}/;"	constant
AlignedSlice	$ZIGLIB/std/mem.zig	/^fn AlignedSlice(comptime AttributeSource: type, comptime new_alignment: usize) type {$/;"	function
Alignment	$ZIGLIB/std/fmt.zig	/^pub const Alignment = enum {$/;"	enum
AlignmentInformation	$ZIGLIB/std/os/windows.zig	/AlignmentInformation: FILE_ALIGNMENT_INFORMATION/;"	field
AlignmentRequirement	$ZIGLIB/std/os/windows.zig	/AlignmentRequirement: ULONG/;"	field
AllHandles	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/AllHandles/;"	field
AllocPrintError	$ZIGLIB/std/fmt.zig	/^pub const AllocPrintError = error{OutOfMemory}/;"	constant
AllocStack	$ZIGLIB/std/event/group.zig	/const AllocStack = std.atomic.Stack(Node)/;"	constant
AllocWithOptionsPayload	$ZIGLIB/std/mem/Allocator.zig	/^fn AllocWithOptionsPayload(comptime Elem: type, comptime alignment: ?u29, comptime sentinel: ?Elem) type {$/;"	function
AllocateAddress	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/AllocateAddress/;"	field
AllocateAnyPages	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/AllocateAnyPages/;"	field
AllocateMaxAddress	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/AllocateMaxAddress/;"	field
AllocateType	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/^pub const AllocateType = enum(u32) {$/;"	enum
AllocationBase	$ZIGLIB/std/os/windows.zig	/AllocationBase: PVOID/;"	field
AllocationProtect	$ZIGLIB/std/os/windows.zig	/AllocationProtect: DWORD/;"	field
AllocationSize	$ZIGLIB/std/os/windows.zig	/AllocationSize: ULONG/;"	field
Allocator	$ZIGLIB/std/mem/Allocator.zig	/^const Allocator = @This()/;"	constant
AlreadyStarted	$ZIGLIB/std/os/uefi/status.zig	/AlreadyStarted = high_bit | 20/;"	field
AltInterfaceId	$ZIGLIB/std/os/uefi/protocols/ip6_config_protocol.zig	/AltInterfaceId/;"	field
AlternativeArchitecture	$ZIGLIB/std/os/windows.zig	/AlternativeArchitecture: ALTERNATIVE_ARCHITECTURE_TYPE/;"	field
AluOp	$ZIGLIB/std/os/linux/bpf.zig	/pub const AluOp = enum(u8) {$/;"	enum
AmdgpuKernel	$ZIGLIB/std/builtin.zig	/AmdgpuKernel/;"	field
Ampere	$ZIGLIB/std/zig/system/arm.zig	/const Ampere = [_]E{$/;"	constant
Ampersand	$ZIGLIB/std/c/tokenizer.zig	/Ampersand/;"	field
AmpersandAmpersand	$ZIGLIB/std/c/tokenizer.zig	/AmpersandAmpersand/;"	field
AmpersandEqual	$ZIGLIB/std/c/tokenizer.zig	/AmpersandEqual/;"	field
AngleBracketAngleBracketLeft	$ZIGLIB/std/c/tokenizer.zig	/AngleBracketAngleBracketLeft/;"	field
AngleBracketAngleBracketLeftEqual	$ZIGLIB/std/c/tokenizer.zig	/AngleBracketAngleBracketLeftEqual/;"	field
AngleBracketAngleBracketRight	$ZIGLIB/std/c/tokenizer.zig	/AngleBracketAngleBracketRight/;"	field
AngleBracketAngleBracketRightEqual	$ZIGLIB/std/c/tokenizer.zig	/AngleBracketAngleBracketRightEqual/;"	field
AngleBracketLeft	$ZIGLIB/std/c/tokenizer.zig	/AngleBracketLeft/;"	field
AngleBracketLeftEqual	$ZIGLIB/std/c/tokenizer.zig	/AngleBracketLeftEqual/;"	field
AngleBracketRight	$ZIGLIB/std/c/tokenizer.zig	/AngleBracketRight/;"	field
AngleBracketRightEqual	$ZIGLIB/std/c/tokenizer.zig	/AngleBracketRightEqual/;"	field
AnsiCodePageData	$ZIGLIB/std/os/windows.zig	/AnsiCodePageData: PVOID/;"	field
AnyFrame	$ZIGLIB/std/builtin.zig	/pub const AnyFrame = struct {$/;"	struct
ApiSetMap	$ZIGLIB/std/os/windows.zig	/ApiSetMap: PVOID/;"	field
AppCompatFlag	$ZIGLIB/std/os/windows.zig	/AppCompatFlag: ULONG/;"	field
AppCompatFlags	$ZIGLIB/std/os/windows.zig	/AppCompatFlags: ULARGE_INTEGER/;"	field
AppCompatFlagsUser	$ZIGLIB/std/os/windows.zig	/AppCompatFlagsUser: ULARGE_INTEGER/;"	field
AppCompatInfo	$ZIGLIB/std/os/windows.zig	/AppCompatInfo: PVOID/;"	field
ApplDbHeader	$ZIGLIB/std/crypto/Certificate/Bundle/macos.zig	/^const ApplDbHeader = extern struct {$/;"	struct
ApplDbSchema	$ZIGLIB/std/crypto/Certificate/Bundle/macos.zig	/^const ApplDbSchema = extern struct {$/;"	struct
ApplicationCipher	$ZIGLIB/std/crypto/tls.zig	/^pub const ApplicationCipher = union(enum) {$/;"	union
ApplicationCipherT	$ZIGLIB/std/crypto/tls.zig	/^pub fn ApplicationCipherT(comptime AeadType: type, comptime HashType: type) type {$/;"	function
ArbitraryPrecisionIntegersINTEL	$ZIGLIB/std/target/spirv.zig	/ArbitraryPrecisionIntegersINTEL/;"	field
ArbitraryUserPointer	$ZIGLIB/std/os/windows.zig	/ArbitraryUserPointer: PVOID/;"	field
Arch	$ZIGLIB/std/target.zig	/pub const Arch = enum {$/;"	enum
ArchStartedInEl2	$ZIGLIB/std/os/windows.zig	/ArchStartedInEl2: u1/;"	field
ArenaAllocator	$ZIGLIB/std/heap/arena_allocator.zig	/^pub const ArenaAllocator = struct {$/;"	struct
Arg0Expand	$ZIGLIB/std/os.zig	/^pub const Arg0Expand = enum {$/;"	enum
ArgIterator	$ZIGLIB/std/process.zig	/^pub const ArgIterator = struct {$/;"	struct
ArgIteratorGeneral	$ZIGLIB/std/process.zig	/^pub fn ArgIteratorGeneral(comptime options: ArgIteratorGeneralOptions) type {$/;"	function
ArgIteratorGeneralOptions	$ZIGLIB/std/process.zig	/^pub const ArgIteratorGeneralOptions = struct {$/;"	struct
ArgIteratorPosix	$ZIGLIB/std/process.zig	/^pub const ArgIteratorPosix = struct {$/;"	struct
ArgIteratorWasi	$ZIGLIB/std/process.zig	/^pub const ArgIteratorWasi = struct {$/;"	struct
ArgSetType	$ZIGLIB/std/fmt.zig	/^const ArgSetType = u32/;"	constant
ArgState	$ZIGLIB/std/fmt.zig	/^const ArgState = struct {$/;"	struct
Args	$ZIGLIB/std/event/loop.zig	/const Args = @TypeOf(args)/;"	constant
ArgsTuple	$ZIGLIB/std/testing.zig	/const ArgsTuple = std.meta.ArgsTuple(@TypeOf(test_fn))/;"	constant
ArgsType	$ZIGLIB/std/zig/system/windows.zig	/const ArgsType = @TypeOf(args)/;"	constant
ArithmeticConversion	$ZIGLIB/std/zig/c_translation.zig	/^fn ArithmeticConversion(comptime A: type, comptime B: type) type {$/;"	function
Arm64	$ZIGLIB/std/os/linux/syscalls.zig	/^pub const Arm64 = enum(usize) {$/;"	enum
ArmCpuinfoImpl	$ZIGLIB/std/zig/system/linux.zig	/^const ArmCpuinfoImpl = struct {$/;"	struct
ArmCpuinfoParser	$ZIGLIB/std/zig/system/linux.zig	/^const ArmCpuinfoParser = CpuinfoParser(ArmCpuinfoImpl)/;"	constant
Array	$ZIGLIB/std/os/linux/bpf/btf.zig	/^pub const Array = extern struct {$/;"	struct
ArrayBegin	$ZIGLIB/std/json.zig	/ArrayBegin/;"	field
ArrayBitSet	$ZIGLIB/std/bit_set.zig	/^pub fn ArrayBitSet(comptime MaskIntType: type, comptime size: usize) type {$/;"	function
ArrayEnd	$ZIGLIB/std/json.zig	/ArrayEnd/;"	field
ArrayHashMap	$ZIGLIB/std/array_hash_map.zig	/^pub fn ArrayHashMap($/;"	function
ArrayHashMapUnmanaged	$ZIGLIB/std/array_hash_map.zig	/^pub fn ArrayHashMapUnmanaged($/;"	function
ArrayInit	$ZIGLIB/std/zig/Ast.zig	/pub const ArrayInit = struct {$/;"	struct
ArrayList	$ZIGLIB/std/array_list.zig	/^pub fn ArrayList(comptime T: type) type {$/;"	function
ArrayListAligned	$ZIGLIB/std/array_list.zig	/^pub fn ArrayListAligned(comptime T: type, comptime alignment: ?u29) type {$/;"	function
ArrayListAlignedUnmanaged	$ZIGLIB/std/array_list.zig	/^pub fn ArrayListAlignedUnmanaged(comptime T: type, comptime alignment: ?u29) type {$/;"	function
ArrayListUnmanaged	$ZIGLIB/std/array_list.zig	/^pub fn ArrayListUnmanaged(comptime T: type) type {$/;"	function
ArrayStart	$ZIGLIB/std/json/write_stream.zig	/ArrayStart/;"	field
ArrayType	$ZIGLIB/std/zig/Ast.zig	/pub const ArrayType = struct {$/;"	struct
ArrayTypeSentinel	$ZIGLIB/std/zig/Ast.zig	/pub const ArrayTypeSentinel = struct {$/;"	struct
ArrayValue	$ZIGLIB/std/json.zig	/ArrayValue/;"	field
Arrow	$ZIGLIB/std/c/tokenizer.zig	/Arrow/;"	field
AsBytesReturnType	$ZIGLIB/std/mem.zig	/^fn AsBytesReturnType(comptime P: type) type {$/;"	function
AsmINTEL	$ZIGLIB/std/target/spirv.zig	/AsmINTEL/;"	field
AssemblyOptions	$ZIGLIB/std/Build.zig	/^pub const AssemblyOptions = struct {$/;"	struct
AssignedStateful	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/AssignedStateful = 2/;"	field
AssignedStateless	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/AssignedStateless = 1/;"	field
Assoc	$ZIGLIB/std/zig/Parse.zig	/^const Assoc = enum {$/;"	enum
AstError	$ZIGLIB/std/zig/Parse.zig	/^const AstError = Ast.Error/;"	constant
Asterisk	$ZIGLIB/std/c/tokenizer.zig	/Asterisk/;"	field
AsteriskEqual	$ZIGLIB/std/c/tokenizer.zig	/AsteriskEqual/;"	field
Async	$ZIGLIB/std/builtin.zig	/Async/;"	field
AtType	$ZIGLIB/std/segmented_list.zig	/fn AtType(comptime SelfType: type) type {$/;"	function
Atapi	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/Atapi: *const AtapiDevicePath/;"	field
AtapiDevicePath	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/pub const AtapiDevicePath = extern struct {$/;"	struct
AtlThunkSListPtr	$ZIGLIB/std/os/windows.zig	/AtlThunkSListPtr: PVOID/;"	field
AtlThunkSListPtr32	$ZIGLIB/std/os/windows.zig	/AtlThunkSListPtr32: ULONG/;"	field
Atomic	$ZIGLIB/std/atomic/Atomic.zig	/^pub fn Atomic(comptime T: type) type {$/;"	function
AtomicFile	$ZIGLIB/std/fs.zig	/^pub const AtomicFile = struct {$/;"	struct
AtomicFileOptions	$ZIGLIB/std/fs.zig	/pub const AtomicFileOptions = struct {$/;"	struct
AtomicFloat16MinMaxEXT	$ZIGLIB/std/target/spirv.zig	/AtomicFloat16MinMaxEXT/;"	field
AtomicFloat32AddEXT	$ZIGLIB/std/target/spirv.zig	/AtomicFloat32AddEXT/;"	field
AtomicFloat32MinMaxEXT	$ZIGLIB/std/target/spirv.zig	/AtomicFloat32MinMaxEXT/;"	field
AtomicFloat64AddEXT	$ZIGLIB/std/target/spirv.zig	/AtomicFloat64AddEXT/;"	field
AtomicFloat64MinMaxEXT	$ZIGLIB/std/target/spirv.zig	/AtomicFloat64MinMaxEXT/;"	field
AtomicOrder	$ZIGLIB/std/builtin.zig	/^pub const AtomicOrder = enum {$/;"	enum
AtomicRmwOp	$ZIGLIB/std/builtin.zig	/^pub const AtomicRmwOp = enum {$/;"	enum
AtomicStorage	$ZIGLIB/std/target/spirv.zig	/AtomicStorage/;"	field
AtomicStorageOps	$ZIGLIB/std/target/spirv.zig	/AtomicStorageOps/;"	field
AttachType	$ZIGLIB/std/os/linux/bpf.zig	/^pub const AttachType = enum(u32) {$/;"	enum
Attr	$ZIGLIB/std/os/posix_spawn.zig	/pub const Attr = struct {$/;"	struct
Attribute	$ZIGLIB/std/crypto/Certificate.zig	/^pub const Attribute = enum {$/;"	enum
Attributes	$ZIGLIB/std/os/windows.zig	/Attributes: ULONG/;"	field
AuthenticationError	$ZIGLIB/std/crypto/errors.zig	/^pub const AuthenticationError = error{AuthenticationFailed}/;"	constant
Auto	$ZIGLIB/std/builtin.zig	/Auto/;"	field
AutoArrayHashMap	$ZIGLIB/std/array_hash_map.zig	/^pub fn AutoArrayHashMap(comptime K: type, comptime V: type) type {$/;"	function
AutoArrayHashMapUnmanaged	$ZIGLIB/std/array_hash_map.zig	/^pub fn AutoArrayHashMapUnmanaged(comptime K: type, comptime V: type) type {$/;"	function
AutoContext	$ZIGLIB/std/hash_map.zig	/^pub fn AutoContext(comptime K: type) type {$/;"	function
AutoFree	$ZIGLIB/std/valgrind.zig	/pub const AutoFree = 1/;"	constant
AutoHashMap	$ZIGLIB/std/hash_map.zig	/^pub fn AutoHashMap(comptime K: type, comptime V: type) type {$/;"	function
AutoHashMapUnmanaged	$ZIGLIB/std/hash_map.zig	/^pub fn AutoHashMapUnmanaged(comptime K: type, comptime V: type) type {$/;"	function
AutoIndentingStream	$ZIGLIB/std/zig/render.zig	/^fn AutoIndentingStream(comptime UnderlyingWriter: type) type {$/;"	function
Auxv	$ZIGLIB/std/elf.zig	/^pub const Auxv = switch (@sizeOf(usize)) {$/;"	constant
Available	$ZIGLIB/std/event/future.zig	/const Available = enum(u8) {$/;"	enum
AvailableOption	$ZIGLIB/std/Build.zig	/^const AvailableOption = struct {$/;"	struct
AvailableOptionsMap	$ZIGLIB/std/Build.zig	/^const AvailableOptionsMap = StringHashMap(AvailableOption)/;"	constant
B1000000	$ZIGLIB/std/os/linux.zig	/^pub const B1000000 = 0o0010010/;"	constant
B110	$ZIGLIB/std/os/linux.zig	/^pub const B110 = 0o0000003/;"	constant
B115200	$ZIGLIB/std/os/linux.zig	/^pub const B115200 = 0o0010002/;"	constant
B1152000	$ZIGLIB/std/os/linux.zig	/^pub const B1152000 = 0o0010011/;"	constant
B1200	$ZIGLIB/std/os/linux.zig	/^pub const B1200 = 0o0000011/;"	constant
B134	$ZIGLIB/std/os/linux.zig	/^pub const B134 = 0o0000004/;"	constant
B14400	$ZIGLIB/std/c/openbsd.zig	/^pub const B14400 = 14400/;"	constant
B150	$ZIGLIB/std/os/linux.zig	/^pub const B150 = 0o0000005/;"	constant
B1500000	$ZIGLIB/std/os/linux.zig	/^pub const B1500000 = 0o0010012/;"	constant
B1800	$ZIGLIB/std/os/linux.zig	/^pub const B1800 = 0o0000012/;"	constant
B19200	$ZIGLIB/std/os/linux.zig	/^pub const B19200 = 0o0000016/;"	constant
B200	$ZIGLIB/std/os/linux.zig	/^pub const B200 = 0o0000006/;"	constant
B2000000	$ZIGLIB/std/os/linux.zig	/^pub const B2000000 = 0o0010013/;"	constant
B230400	$ZIGLIB/std/os/linux.zig	/^pub const B230400 = 0o0010003/;"	constant
B2400	$ZIGLIB/std/os/linux.zig	/^pub const B2400 = 0o0000013/;"	constant
B2500000	$ZIGLIB/std/os/linux.zig	/^pub const B2500000 = 0o0010014/;"	constant
B28800	$ZIGLIB/std/c/openbsd.zig	/^pub const B28800 = 28800/;"	constant
B300	$ZIGLIB/std/os/linux.zig	/^pub const B300 = 0o0000007/;"	constant
B3000000	$ZIGLIB/std/os/linux.zig	/^pub const B3000000 = 0o0010015/;"	constant
B3500000	$ZIGLIB/std/os/linux.zig	/^pub const B3500000 = 0o0010016/;"	constant
B38400	$ZIGLIB/std/os/linux.zig	/^pub const B38400 = 0o0000017/;"	constant
B4000000	$ZIGLIB/std/os/linux.zig	/^pub const B4000000 = 0o0010017/;"	constant
B460800	$ZIGLIB/std/os/linux.zig	/^pub const B460800 = 0o0010004/;"	constant
B4800	$ZIGLIB/std/os/linux.zig	/^pub const B4800 = 0o0000014/;"	constant
B500000	$ZIGLIB/std/os/linux.zig	/^pub const B500000 = 0o0010005/;"	constant
B57600	$ZIGLIB/std/os/linux.zig	/^pub const B57600 = 0o0010001/;"	constant
B576000	$ZIGLIB/std/os/linux.zig	/^pub const B576000 = 0o0010006/;"	constant
B600	$ZIGLIB/std/os/linux.zig	/^pub const B600 = 0o0000010/;"	constant
B64Decoder	$ZIGLIB/std/crypto/phc_encoding.zig	/^const B64Decoder = std.base64.standard_no_pad.Decoder/;"	constant
B64Encoder	$ZIGLIB/std/crypto/phc_encoding.zig	/^const B64Encoder = std.base64.standard_no_pad.Encoder/;"	constant
B7200	$ZIGLIB/std/c/openbsd.zig	/^pub const B7200 = 7200/;"	constant
B76800	$ZIGLIB/std/c/openbsd.zig	/^pub const B76800 = 76800/;"	constant
B921600	$ZIGLIB/std/os/linux.zig	/^pub const B921600 = 0o0010007/;"	constant
B9600	$ZIGLIB/std/os/linux.zig	/^pub const B9600 = 0o0000015/;"	constant
BACKUP_CONTROLLER	$ZIGLIB/std/os/windows/win32error.zig	/BACKUP_CONTROLLER = 586/;"	field
BADARCH	$ZIGLIB/std/c/darwin.zig	/BADARCH = 86/;"	field
BADDB	$ZIGLIB/std/os/windows/win32error.zig	/BADDB = 1009/;"	field
BADE	$ZIGLIB/std/os/linux/errno/sparc.zig	/BADE = 102/;"	field
BADEXEC	$ZIGLIB/std/c/darwin.zig	/BADEXEC = 85/;"	field
BADF	$ZIGLIB/std/os/wasi.zig	/BADF = 8/;"	field
BADFD	$ZIGLIB/std/os/linux/errno/sparc.zig	/BADFD = 93/;"	field
BADFLAGS	$ZIGLIB/std/c/solaris.zig	/BADFLAGS = 3/;"	field
BADHINTS	$ZIGLIB/std/c/openbsd.zig	/BADHINTS = -12/;"	field
BADKEY	$ZIGLIB/std/os/windows/win32error.zig	/BADKEY = 1010/;"	field
BADMACHO	$ZIGLIB/std/c/darwin.zig	/BADMACHO = 88/;"	field
BADMSG	$ZIGLIB/std/os/wasi.zig	/BADMSG = 9/;"	field
BADR	$ZIGLIB/std/os/linux/errno/sparc.zig	/BADR = 103/;"	field
BADRPC	$ZIGLIB/std/c/openbsd.zig	/BADRPC = 72/;"	field
BADRQC	$ZIGLIB/std/os/linux/errno/sparc.zig	/BADRQC = 106/;"	field
BADSIG	$ZIGLIB/std/c/dragonfly.zig	/^pub const BADSIG = SIG.ERR/;"	constant
BADSLT	$ZIGLIB/std/os/linux/errno/sparc.zig	/BADSLT = 107/;"	field
BADSTARTPOSITION	$ZIGLIB/std/os/windows/win32error.zig	/BADSTARTPOSITION = 778/;"	field
BAD_ACCESS	$ZIGLIB/std/c/darwin.zig	/BAD_ACCESS = 1/;"	field
BAD_ACCESSOR_FLAGS	$ZIGLIB/std/os/windows/win32error.zig	/BAD_ACCESSOR_FLAGS = 773/;"	field
BAD_ARGUMENTS	$ZIGLIB/std/os/windows/win32error.zig	/BAD_ARGUMENTS = 160/;"	field
BAD_BINDINGS	$ZIGLIB/std/os/windows/ntstatus.zig	/BAD_BINDINGS = 0xC000035B/;"	field
BAD_CLUSTERS	$ZIGLIB/std/os/windows/ntstatus.zig	/BAD_CLUSTERS = 0xC0000805/;"	field
BAD_COMMAND	$ZIGLIB/std/os/windows/win32error.zig	/BAD_COMMAND = 22/;"	field
BAD_COMPRESSION_BUFFER	$ZIGLIB/std/os/windows/win32error.zig	/BAD_COMPRESSION_BUFFER = 605/;"	field
BAD_CONFIGURATION	$ZIGLIB/std/os/windows/win32error.zig	/BAD_CONFIGURATION = 1610/;"	field
BAD_CURRENT_DIRECTORY	$ZIGLIB/std/os/windows/win32error.zig	/BAD_CURRENT_DIRECTORY = 703/;"	field
BAD_DESCRIPTOR_FORMAT	$ZIGLIB/std/os/windows/win32error.zig	/BAD_DESCRIPTOR_FORMAT = 1361/;"	field
BAD_DEVICE	$ZIGLIB/std/os/windows/win32error.zig	/BAD_DEVICE = 1200/;"	field
BAD_DEVICE_PATH	$ZIGLIB/std/os/windows/win32error.zig	/BAD_DEVICE_PATH = 330/;"	field
BAD_DEVICE_TYPE	$ZIGLIB/std/os/windows/ntstatus.zig	/BAD_DEVICE_TYPE = 0xC00000CB/;"	field
BAD_DEV_TYPE	$ZIGLIB/std/os/windows/win32error.zig	/BAD_DEV_TYPE = 66/;"	field
BAD_DLL_ENTRYPOINT	$ZIGLIB/std/os/windows/win32error.zig	/BAD_DLL_ENTRYPOINT = 609/;"	field
BAD_DRIVER	$ZIGLIB/std/os/windows/win32error.zig	/BAD_DRIVER = 2001/;"	field
BAD_DRIVER_LEVEL	$ZIGLIB/std/os/windows/win32error.zig	/BAD_DRIVER_LEVEL = 119/;"	field
BAD_ENVIRONMENT	$ZIGLIB/std/os/windows/win32error.zig	/BAD_ENVIRONMENT = 10/;"	field
BAD_EXE_FORMAT	$ZIGLIB/std/os/windows/win32error.zig	/BAD_EXE_FORMAT = 193/;"	field
BAD_FILE_TYPE	$ZIGLIB/std/os/windows/win32error.zig	/BAD_FILE_TYPE = 222/;"	field
BAD_FORMAT	$ZIGLIB/std/os/windows/win32error.zig	/BAD_FORMAT = 11/;"	field
BAD_FUNCTION_TABLE	$ZIGLIB/std/os/windows/win32error.zig	/BAD_FUNCTION_TABLE = 559/;"	field
BAD_IMPERSONATION_LEVEL	$ZIGLIB/std/os/windows/win32error.zig	/BAD_IMPERSONATION_LEVEL = 1346/;"	field
BAD_INHERITANCE_ACL	$ZIGLIB/std/os/windows/win32error.zig	/BAD_INHERITANCE_ACL = 1340/;"	field
BAD_INITIAL_PC	$ZIGLIB/std/os/windows/ntstatus.zig	/BAD_INITIAL_PC = 0xC000000A/;"	field
BAD_INITIAL_STACK	$ZIGLIB/std/os/windows/ntstatus.zig	/BAD_INITIAL_STACK = 0xC0000009/;"	field
BAD_INSTRUCTION	$ZIGLIB/std/c/darwin.zig	/BAD_INSTRUCTION = 2/;"	field
BAD_LENGTH	$ZIGLIB/std/os/windows/win32error.zig	/BAD_LENGTH = 24/;"	field
BAD_LOGON_SESSION_STATE	$ZIGLIB/std/os/windows/win32error.zig	/BAD_LOGON_SESSION_STATE = 1365/;"	field
BAD_MASTER_BOOT_RECORD	$ZIGLIB/std/os/windows/ntstatus.zig	/BAD_MASTER_BOOT_RECORD = 0xC00000A9/;"	field
BAD_MCFG_TABLE	$ZIGLIB/std/os/windows/win32error.zig	/BAD_MCFG_TABLE = 791/;"	field
BAD_NETPATH	$ZIGLIB/std/os/windows/win32error.zig	/BAD_NETPATH = 53/;"	field
BAD_NETWORK_NAME	$ZIGLIB/std/os/windows/ntstatus.zig	/BAD_NETWORK_NAME = 0xC00000CC/;"	field
BAD_NETWORK_PATH	$ZIGLIB/std/os/windows/ntstatus.zig	/BAD_NETWORK_PATH = 0xC00000BE/;"	field
BAD_NET_NAME	$ZIGLIB/std/os/windows/win32error.zig	/BAD_NET_NAME = 67/;"	field
BAD_NET_RESP	$ZIGLIB/std/os/windows/win32error.zig	/BAD_NET_RESP = 58/;"	field
BAD_PATHNAME	$ZIGLIB/std/os/windows/win32error.zig	/BAD_PATHNAME = 161/;"	field
BAD_PIPE	$ZIGLIB/std/os/windows/win32error.zig	/BAD_PIPE = 230/;"	field
BAD_PROFILE	$ZIGLIB/std/os/windows/win32error.zig	/BAD_PROFILE = 1206/;"	field
BAD_PROVIDER	$ZIGLIB/std/os/windows/win32error.zig	/BAD_PROVIDER = 1204/;"	field
BAD_QUERY_SYNTAX	$ZIGLIB/std/os/windows/win32error.zig	/BAD_QUERY_SYNTAX = 1615/;"	field
BAD_REMOTE_ADAPTER	$ZIGLIB/std/os/windows/ntstatus.zig	/BAD_REMOTE_ADAPTER = 0xC00000C5/;"	field
BAD_REM_ADAP	$ZIGLIB/std/os/windows/win32error.zig	/BAD_REM_ADAP = 60/;"	field
BAD_SERVICE_ENTRYPOINT	$ZIGLIB/std/os/windows/win32error.zig	/BAD_SERVICE_ENTRYPOINT = 610/;"	field
BAD_STACK	$ZIGLIB/std/os/windows/win32error.zig	/BAD_STACK = 543/;"	field
BAD_THREADID_ADDR	$ZIGLIB/std/os/windows/win32error.zig	/BAD_THREADID_ADDR = 159/;"	field
BAD_TOKEN_TYPE	$ZIGLIB/std/os/windows/win32error.zig	/BAD_TOKEN_TYPE = 1349/;"	field
BAD_UNIT	$ZIGLIB/std/os/windows/win32error.zig	/BAD_UNIT = 20/;"	field
BAD_USERNAME	$ZIGLIB/std/os/windows/win32error.zig	/BAD_USERNAME = 2202/;"	field
BAD_USER_PROFILE	$ZIGLIB/std/os/windows/win32error.zig	/BAD_USER_PROFILE = 1253/;"	field
BAD_VALIDATION_CLASS	$ZIGLIB/std/os/windows/win32error.zig	/BAD_VALIDATION_CLASS = 1348/;"	field
BAD_WORKING_SET_LIMIT	$ZIGLIB/std/os/windows/ntstatus.zig	/BAD_WORKING_SET_LIMIT = 0xC000004C/;"	field
BANGLA	$ZIGLIB/std/os/windows/lang.zig	/^pub const BANGLA = 0x45/;"	constant
BANGLA_BANGLADESH	$ZIGLIB/std/os/windows/sublang.zig	/^pub const BANGLA_BANGLADESH = 0x02/;"	constant
BANGLA_INDIA	$ZIGLIB/std/os/windows/sublang.zig	/^pub const BANGLA_INDIA = 0x01/;"	constant
BARRIERFSYNC	$ZIGLIB/std/c/darwin.zig	/pub const BARRIERFSYNC = 85/;"	constant
BASERELOC	$ZIGLIB/std/coff.zig	/BASERELOC = 5/;"	field
BASE_PROTOCOL	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const BASE_PROTOCOL = 1/;"	constant
BASHKIR	$ZIGLIB/std/os/windows/lang.zig	/^pub const BASHKIR = 0x6d/;"	constant
BASHKIR_RUSSIA	$ZIGLIB/std/os/windows/sublang.zig	/^pub const BASHKIR_RUSSIA = 0x01/;"	constant
BASQUE	$ZIGLIB/std/os/windows/lang.zig	/^pub const BASQUE = 0x2d/;"	constant
BASQUE_BASQUE	$ZIGLIB/std/os/windows/sublang.zig	/^pub const BASQUE_BASQUE = 0x01/;"	constant
BATCH	$ZIGLIB/std/os/linux.zig	/pub const BATCH = 0x40000/;"	constant
BBS101	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/BBS101: *const BBS101DevicePath/;"	field
BBS101DevicePath	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/pub const BBS101DevicePath = extern struct {$/;"	struct
BCAST	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const BCAST = 1024/;"	constant
BCOB_A	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const BCOB_A = 1/;"	constant
BCOB_C	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const BCOB_C = 3/;"	constant
BCOB_X	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const BCOB_X = 16/;"	constant
BEETPH	$ZIGLIB/std/os/linux.zig	/pub const BEETPH = 94/;"	constant
BEGINNING_OF_MEDIA	$ZIGLIB/std/os/windows/win32error.zig	/BEGINNING_OF_MEDIA = 1102/;"	field
BELARUSIAN	$ZIGLIB/std/os/windows/lang.zig	/^pub const BELARUSIAN = 0x23/;"	constant
BELARUSIAN_BELARUS	$ZIGLIB/std/os/windows/sublang.zig	/^pub const BELARUSIAN_BELARUS = 0x01/;"	constant
BENEATH	$ZIGLIB/std/c/freebsd.zig	/pub const BENEATH = 0x1000/;"	constant
BENGALI	$ZIGLIB/std/os/windows/lang.zig	/^pub const BENGALI = 0x45/;"	constant
BENGALI_BANGLADESH	$ZIGLIB/std/os/windows/sublang.zig	/^pub const BENGALI_BANGLADESH = 0x02/;"	constant
BENGALI_INDIA	$ZIGLIB/std/os/windows/sublang.zig	/^pub const BENGALI_INDIA = 0x01/;"	constant
BEYOND_VDL	$ZIGLIB/std/os/windows/win32error.zig	/BEYOND_VDL = 1289/;"	field
BFFM_ENABLEOK	$ZIGLIB/std/os/windows/user32.zig	/^pub const BFFM_ENABLEOK = 0x0465/;"	constant
BFFM_SETSELECTIONA	$ZIGLIB/std/os/windows/user32.zig	/^pub const BFFM_SETSELECTIONA = 0x0466/;"	constant
BFFM_SETSELECTIONW	$ZIGLIB/std/os/windows/user32.zig	/^pub const BFFM_SETSELECTIONW = 0x0467/;"	constant
BFFM_SETSTATUSTEXTA	$ZIGLIB/std/os/windows/user32.zig	/^pub const BFFM_SETSTATUSTEXTA = 0x0464/;"	constant
BFFM_SETSTATUSTEXTW	$ZIGLIB/std/os/windows/user32.zig	/^pub const BFFM_SETSTATUSTEXTW = 0x0468/;"	constant
BFONT	$ZIGLIB/std/os/linux/errno/sparc.zig	/BFONT = 109/;"	field
BHLI_HighLayerProfile	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const BHLI_HighLayerProfile = 2/;"	constant
BHLI_ISO	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const BHLI_ISO = 0/;"	constant
BHLI_UserSpecific	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const BHLI_UserSpecific = 1/;"	constant
BHLI_VendorSpecificAppId	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const BHLI_VendorSpecificAppId = 3/;"	constant
BIGENDIAN	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const BIGENDIAN = 0/;"	constant
BINARY	$ZIGLIB/std/os/windows.zig	/pub const BINARY: ULONG = 3/;"	constant
BIND	.D = 2/;"	field
BINDANY	$ZIGLIB/std/c/openbsd.zig	/pub const BINDANY = 0x1000/;"	constant
BINDTODEVICE	$ZIGLIB/std/os/linux.zig	/pub const BINDTODEVICE = 25/;"	constant
BINDTOIFINDEX	$ZIGLIB/std/os/linux.zig	/pub const BINDTOIFINDEX = 65/;"	constant
BIND_ADDRESS_NO_PORT	$ZIGLIB/std/os/linux.zig	/pub const BIND_ADDRESS_NO_PORT = 24/;"	constant
BIND_IMMEDIATE_MASK	$ZIGLIB/std/macho.zig	/^pub const BIND_IMMEDIATE_MASK: u8 = 0x0f/;"	constant
BIND_OPCODE_ADD_ADDR_ULEB	$ZIGLIB/std/macho.zig	/^pub const BIND_OPCODE_ADD_ADDR_ULEB: u8 = 0x80/;"	constant
BIND_OPCODE_DONE	$ZIGLIB/std/macho.zig	/^pub const BIND_OPCODE_DONE: u8 = 0x00/;"	constant
BIND_OPCODE_DO_BIND	$ZIGLIB/std/macho.zig	/^pub const BIND_OPCODE_DO_BIND: u8 = 0x90/;"	constant
BIND_OPCODE_DO_BIND_ADD_ADDR_IMM_SCALED	$ZIGLIB/std/macho.zig	/^pub const BIND_OPCODE_DO_BIND_ADD_ADDR_IMM_SCALED: u8 = 0xb0/;"	constant
BIND_OPCODE_DO_BIND_ADD_ADDR_ULEB	$ZIGLIB/std/macho.zig	/^pub const BIND_OPCODE_DO_BIND_ADD_ADDR_ULEB: u8 = 0xa0/;"	constant
BIND_OPCODE_DO_BIND_ULEB_TIMES_SKIPPING_ULEB	$ZIGLIB/std/macho.zig	/^pub const BIND_OPCODE_DO_BIND_ULEB_TIMES_SKIPPING_ULEB: u8 = 0xc0/;"	constant
BIND_OPCODE_MASK	$ZIGLIB/std/macho.zig	/^pub const BIND_OPCODE_MASK: u8 = 0xf0/;"	constant
BIND_OPCODE_SET_ADDEND_SLEB	$ZIGLIB/std/macho.zig	/^pub const BIND_OPCODE_SET_ADDEND_SLEB: u8 = 0x60/;"	constant
BIND_OPCODE_SET_DYLIB_ORDINAL_IMM	$ZIGLIB/std/macho.zig	/^pub const BIND_OPCODE_SET_DYLIB_ORDINAL_IMM: u8 = 0x10/;"	constant
BIND_OPCODE_SET_DYLIB_ORDINAL_ULEB	$ZIGLIB/std/macho.zig	/^pub const BIND_OPCODE_SET_DYLIB_ORDINAL_ULEB: u8 = 0x20/;"	constant
BIND_OPCODE_SET_DYLIB_SPECIAL_IMM	$ZIGLIB/std/macho.zig	/^pub const BIND_OPCODE_SET_DYLIB_SPECIAL_IMM: u8 = 0x30/;"	constant
BIND_OPCODE_SET_SEGMENT_AND_OFFSET_ULEB	$ZIGLIB/std/macho.zig	/^pub const BIND_OPCODE_SET_SEGMENT_AND_OFFSET_ULEB: u8 = 0x70/;"	constant
BIND_OPCODE_SET_SYMBOL_TRAILING_FLAGS_IMM	$ZIGLIB/std/macho.zig	/^pub const BIND_OPCODE_SET_SYMBOL_TRAILING_FLAGS_IMM: u8 = 0x40/;"	constant
BIND_OPCODE_SET_TYPE_IMM	$ZIGLIB/std/macho.zig	/^pub const BIND_OPCODE_SET_TYPE_IMM: u8 = 0x50/;"	constant
BIND_SPECIAL_DYLIB_FLAT_LOOKUP	$ZIGLIB/std/macho.zig	/^pub const BIND_SPECIAL_DYLIB_FLAT_LOOKUP: i8 = -2/;"	constant
BIND_SPECIAL_DYLIB_MAIN_EXECUTABLE	$ZIGLIB/std/macho.zig	/^pub const BIND_SPECIAL_DYLIB_MAIN_EXECUTABLE: i8 = -1/;"	constant
BIND_SPECIAL_DYLIB_SELF	$ZIGLIB/std/macho.zig	/^pub const BIND_SPECIAL_DYLIB_SELF: i8 = 0/;"	constant
BIND_SYMBOL_FLAGS_NON_WEAK_DEFINITION	$ZIGLIB/std/macho.zig	/^pub const BIND_SYMBOL_FLAGS_NON_WEAK_DEFINITION: u8 = 0x8/;"	constant
BIND_SYMBOL_FLAGS_WEAK_IMPORT	$ZIGLIB/std/macho.zig	/^pub const BIND_SYMBOL_FLAGS_WEAK_IMPORT: u8 = 0x1/;"	constant
BIND_TYPE_POINTER	$ZIGLIB/std/macho.zig	/^pub const BIND_TYPE_POINTER: u8 = 1/;"	constant
BIND_TYPE_TEXT_ABSOLUTE32	$ZIGLIB/std/macho.zig	/^pub const BIND_TYPE_TEXT_ABSOLUTE32: u8 = 2/;"	constant
BIND_TYPE_TEXT_PCREL32	$ZIGLIB/std/macho.zig	/^pub const BIND_TYPE_TEXT_PCREL32: u8 = 3/;"	constant
BINTIME	$ZIGLIB/std/c/freebsd.zig	/pub const BINTIME = 0x00002000/;"	constant
BIOS_FAILED_TO_CONNECT_INTERRUPT	$ZIGLIB/std/os/windows/win32error.zig	/BIOS_FAILED_TO_CONNECT_INTERRUPT = 585/;"	field
BITS_PER_BYTE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const BITS_PER_BYTE = 8/;"	constant
BIT_FIELD	$ZIGLIB/std/coff.zig	/BIT_FIELD = 18/;"	field
BIZRULES_NOT_ENABLED	$ZIGLIB/std/os/windows/ntstatus.zig	/BIZRULES_NOT_ENABLED = 0x40000034/;"	field
BLACKFIN	$ZIGLIB/std/elf.zig	/BLACKFIN = 106/;"	field
BLISS	$ZIGLIB/std/dwarf/LANG.zig	/^pub const BLISS = 0x0025/;"	constant
BLKSIZE	$ZIGLIB/std/c/solaris.zig	/pub const BLKSIZE = 19/;"	constant
BLLI_L2_ELAPB	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const BLLI_L2_ELAPB = 8/;"	constant
BLLI_L2_HDLC_ABM	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const BLLI_L2_HDLC_ABM = 11/;"	constant
BLLI_L2_HDLC_ARM	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const BLLI_L2_HDLC_ARM = 9/;"	constant
BLLI_L2_HDLC_NRM	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const BLLI_L2_HDLC_NRM = 10/;"	constant
BLLI_L2_ISO_1745	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const BLLI_L2_ISO_1745 = 1/;"	constant
BLLI_L2_ISO_7776	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const BLLI_L2_ISO_7776 = 17/;"	constant
BLLI_L2_LLC	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const BLLI_L2_LLC = 12/;"	constant
BLLI_L2_MODE_EXT	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const BLLI_L2_MODE_EXT = 128/;"	constant
BLLI_L2_MODE_NORMAL	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const BLLI_L2_MODE_NORMAL = 64/;"	constant
BLLI_L2_Q921	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const BLLI_L2_Q921 = 2/;"	constant
BLLI_L2_Q922	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const BLLI_L2_Q922 = 14/;"	constant
BLLI_L2_USER_SPECIFIED	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const BLLI_L2_USER_SPECIFIED = 16/;"	constant
BLLI_L2_X25L	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const BLLI_L2_X25L = 6/;"	constant
BLLI_L2_X25M	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const BLLI_L2_X25M = 7/;"	constant
BLLI_L2_X75	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const BLLI_L2_X75 = 13/;"	constant
BLLI_L3_IPI_IP	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const BLLI_L3_IPI_IP = 204/;"	constant
BLLI_L3_IPI_SNAP	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const BLLI_L3_IPI_SNAP = 128/;"	constant
BLLI_L3_ISO_8208	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const BLLI_L3_ISO_8208 = 7/;"	constant
BLLI_L3_ISO_TR9577	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const BLLI_L3_ISO_TR9577 = 11/;"	constant
BLLI_L3_MODE_EXT	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const BLLI_L3_MODE_EXT = 128/;"	constant
BLLI_L3_MODE_NORMAL	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const BLLI_L3_MODE_NORMAL = 64/;"	constant
BLLI_L3_PACKET_1024	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const BLLI_L3_PACKET_1024 = 10/;"	constant
BLLI_L3_PACKET_128	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const BLLI_L3_PACKET_128 = 7/;"	constant
BLLI_L3_PACKET_16	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const BLLI_L3_PACKET_16 = 4/;"	constant
BLLI_L3_PACKET_2048	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const BLLI_L3_PACKET_2048 = 11/;"	constant
BLLI_L3_PACKET_256	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const BLLI_L3_PACKET_256 = 8/;"	constant
BLLI_L3_PACKET_32	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const BLLI_L3_PACKET_32 = 5/;"	constant
BLLI_L3_PACKET_4096	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const BLLI_L3_PACKET_4096 = 12/;"	constant
BLLI_L3_PACKET_512	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const BLLI_L3_PACKET_512 = 9/;"	constant
BLLI_L3_PACKET_64	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const BLLI_L3_PACKET_64 = 6/;"	constant
BLLI_L3_SIO_8473	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const BLLI_L3_SIO_8473 = 9/;"	constant
BLLI_L3_T70	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const BLLI_L3_T70 = 10/;"	constant
BLLI_L3_USER_SPECIFIED	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const BLLI_L3_USER_SPECIFIED = 16/;"	constant
BLLI_L3_X223	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const BLLI_L3_X223 = 8/;"	constant
BLLI_L3_X25	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const BLLI_L3_X25 = 6/;"	constant
BLOCK	$ZIGLIB/std/os/linux.zig	/pub const BLOCK = 1/;"	constant
BLOCKBYTES	$ZIGLIB/std/crypto/gimli.zig	/pub const BLOCKBYTES = 48/;"	constant
BLOCKS	$ZIGLIB/std/c/solaris.zig	/pub const BLOCKS = 18/;"	constant
BLOCK_DEVICE	$ZIGLIB/std/os/wasi.zig	/BLOCK_DEVICE/;"	field
BLOCK_LEN	$ZIGLIB/std/crypto/blake3.zig	/^const BLOCK_LEN: usize = 64/;"	constant
BLOCK_SOURCE	$ZIGLIB/std/os/linux.zig	/pub const BLOCK_SOURCE = 38/;"	constant
BLOCK_SUSPEND	$ZIGLIB/std/os/linux.zig	/pub const BLOCK_SUSPEND = 36/;"	constant
BLUETOOTH	$ZIGLIB/std/os/linux.zig	/pub const BLUETOOTH = 31/;"	constant
BM_CLICK	$ZIGLIB/std/os/windows/user32.zig	/^pub const BM_CLICK = 0x00F5/;"	constant
BM_GETCHECK	$ZIGLIB/std/os/windows/user32.zig	/^pub const BM_GETCHECK = 0x00F0/;"	constant
BM_GETIMAGE	$ZIGLIB/std/os/windows/user32.zig	/^pub const BM_GETIMAGE = 0x00F6/;"	constant
BM_GETSTATE	$ZIGLIB/std/os/windows/user32.zig	/^pub const BM_GETSTATE = 0x00F2/;"	constant
BM_SETCHECK	$ZIGLIB/std/os/windows/user32.zig	/^pub const BM_SETCHECK = 0x00F1/;"	constant
BM_SETDONTCLICK	$ZIGLIB/std/os/windows/user32.zig	/^pub const BM_SETDONTCLICK = 0x00F8/;"	constant
BM_SETIMAGE	$ZIGLIB/std/os/windows/user32.zig	/^pub const BM_SETIMAGE = 0x00F7/;"	constant
BM_SETSTATE	$ZIGLIB/std/os/windows/user32.zig	/^pub const BM_SETSTATE = 0x00F3/;"	constant
BM_SETSTYLE	$ZIGLIB/std/os/windows/user32.zig	/^pub const BM_SETSTYLE = 0x00F4/;"	constant
BOOL	$ZIGLIB/std/os/windows.zig	/^pub const BOOL = c_int/;"	constant
BOOLEAN	$ZIGLIB/std/os/windows.zig	/^pub const BOOLEAN = BYTE/;"	constant
BOOTFILE	$ZIGLIB/std/c/dragonfly.zig	/pub const BOOTFILE = 26/;"	constant
BOOTTIME	$ZIGLIB/std/os/linux.zig	/pub const BOOTTIME = 7/;"	constant
BOOTTIME_ALARM	$ZIGLIB/std/os/linux.zig	/pub const BOOTTIME_ALARM = 9/;"	constant
BOOT_ALREADY_ACCEPTED	$ZIGLIB/std/os/windows/win32error.zig	/BOOT_ALREADY_ACCEPTED = 1076/;"	field
BORLAND	$ZIGLIB/std/coff.zig	/BORLAND = 9/;"	field
BORN	$ZIGLIB/std/os/linux.zig	/pub const BORN = (1 << 29)/;"	constant
BOSNIAN	$ZIGLIB/std/os/windows/lang.zig	/^pub const BOSNIAN = 0x1a/;"	constant
BOSNIAN_BOSNIA_HERZEGOVINA_CYRILLIC	$ZIGLIB/std/os/windows/sublang.zig	/^pub const BOSNIAN_BOSNIA_HERZEGOVINA_CYRILLIC = 0x08/;"	constant
BOSNIAN_BOSNIA_HERZEGOVINA_LATIN	$ZIGLIB/std/os/windows/sublang.zig	/^pub const BOSNIAN_BOSNIA_HERZEGOVINA_LATIN = 0x05/;"	constant
BOSNIAN_NEUTRAL	$ZIGLIB/std/os/windows/lang.zig	/^pub const BOSNIAN_NEUTRAL = 0x781a/;"	constant
BOTHER	$ZIGLIB/std/os/linux.zig	/^pub const BOTHER = 0o0010000/;"	constant
BOUND_IMPORT	$ZIGLIB/std/coff.zig	/BOUND_IMPORT = 11/;"	field
BPF_EXTENSIONS	$ZIGLIB/std/os/linux.zig	/pub const BPF_EXTENSIONS = 50/;"	constant
BPF_F_CLONE	$ZIGLIB/std/os/linux/bpf.zig	/^pub const BPF_F_CLONE = 0x200/;"	constant
BPF_F_MMAPABLE	$ZIGLIB/std/os/linux/bpf.zig	/^pub const BPF_F_MMAPABLE = 0x400/;"	constant
BPF_F_NO_COMMON_LRU	$ZIGLIB/std/os/linux/bpf.zig	/^pub const BPF_F_NO_COMMON_LRU = 0x2/;"	constant
BPF_F_NO_PREALLOC	$ZIGLIB/std/os/linux/bpf.zig	/^pub const BPF_F_NO_PREALLOC = 0x1/;"	constant
BPF_F_NUMA_NODE	$ZIGLIB/std/os/linux/bpf.zig	/^pub const BPF_F_NUMA_NODE = 0x4/;"	constant
BPF_F_RDONLY	$ZIGLIB/std/os/linux/bpf.zig	/^pub const BPF_F_RDONLY = 0x8/;"	constant
BPF_F_RDONLY_PROG	$ZIGLIB/std/os/linux/bpf.zig	/^pub const BPF_F_RDONLY_PROG = 0x80/;"	constant
BPF_F_STACK_BUILD_ID	$ZIGLIB/std/os/linux/bpf.zig	/^pub const BPF_F_STACK_BUILD_ID = 0x20/;"	constant
BPF_F_WRONLY	$ZIGLIB/std/os/linux/bpf.zig	/^pub const BPF_F_WRONLY = 0x10/;"	constant
BPF_F_WRONLY_PROG	$ZIGLIB/std/os/linux/bpf.zig	/^pub const BPF_F_WRONLY_PROG = 0x100/;"	constant
BPF_F_ZERO_SEED	$ZIGLIB/std/os/linux/bpf.zig	/^pub const BPF_F_ZERO_SEED = 0x40/;"	constant
BPF_OUTPUT	$ZIGLIB/std/os/linux.zig	/BPF_OUTPUT/;"	field
BRANCH	$ZIGLIB/std/os/linux.zig	/pub const BRANCH = struct {$/;"	struct
BRANCH_INSTRUCTIONS	$ZIGLIB/std/os/linux.zig	/BRANCH_INSTRUCTIONS/;"	field
BRANCH_MISSES	$ZIGLIB/std/os/linux.zig	/BRANCH_MISSES/;"	field
BRANCH_STACK	$ZIGLIB/std/os/linux.zig	/pub const BRANCH_STACK = 2048/;"	constant
BRANDNAME	$ZIGLIB/std/c/solaris.zig	/pub const BRANDNAME = 2019/;"	constant
BRAND_AUX1	$ZIGLIB/std/c/solaris.zig	/pub const BRAND_AUX1 = 2020/;"	constant
BRAND_AUX2	$ZIGLIB/std/c/solaris.zig	/pub const BRAND_AUX2 = 2021/;"	constant
BRAND_AUX3	$ZIGLIB/std/c/solaris.zig	/pub const BRAND_AUX3 = 2022/;"	constant
BRAND_AUX4	$ZIGLIB/std/c/solaris.zig	/pub const BRAND_AUX4 = 2025/;"	constant
BRAND_NROOT	$ZIGLIB/std/c/solaris.zig	/pub const BRAND_NROOT = 2024/;"	constant
BREAK	$ZIGLIB/std/c/windows.zig	/pub const BREAK = 21/;"	constant
BREAKPOINT	$ZIGLIB/std/os/windows/ntstatus.zig	/BREAKPOINT = 0x80000003/;"	field
BRETON	$ZIGLIB/std/os/windows/lang.zig	/^pub const BRETON = 0x7e/;"	constant
BRETON_FRANCE	$ZIGLIB/std/os/windows/sublang.zig	/^pub const BRETON_FRANCE = 0x01/;"	constant
BRIDGE	$ZIGLIB/std/os/linux.zig	/pub const BRIDGE = 7/;"	constant
BRIDGEOS	$ZIGLIB/std/macho.zig	/BRIDGEOS = 0x5/;"	field
BRKINT	$ZIGLIB/std/os/linux.zig	/^pub const BRKINT: tcflag_t = 2/;"	constant
BRK_	$ZIGLIB/std/os/plan9.zig	/BRK_ = 24/;"	field
BROADCAST	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const BROADCAST = 32/;"	constant
BROKEN_PIPE	$ZIGLIB/std/os/windows/win32error.zig	/BROKEN_PIPE = 109/;"	field
BRSATMON	$ZIGLIB/std/c/freebsd.zig	/pub const BRSATMON = 76/;"	constant
BSDCOMPAT	$ZIGLIB/std/os/linux.zig	/pub const BSDCOMPAT = 14/;"	constant
BSDLY	$ZIGLIB/std/c/darwin.zig	/^pub const BSDLY: tcflag_t = 0x00008000/;"	constant
BSDURGENT	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const BSDURGENT = 28672/;"	constant
BSP_STATE	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const BSP_STATE = 4105/;"	constant
BUFFER_ALL_ZEROS	$ZIGLIB/std/os/windows/win32error.zig	/BUFFER_ALL_ZEROS = 754/;"	field
BUFFER_OVERFLOW	$ZIGLIB/std/os/windows/win32error.zig	/BUFFER_OVERFLOW = 111/;"	field
BUFFER_SELECT	$ZIGLIB/std/os/linux.zig	/BUFFER_SELECT/;"	field
BUFFER_TOO_SMALL	$ZIGLIB/std/os/windows/ntstatus.zig	/BUFFER_TOO_SMALL = 0xC0000023/;"	field
BUILD_VERSION	$ZIGLIB/std/macho.zig	/BUILD_VERSION = 0x32/;"	field
BULGARIAN	$ZIGLIB/std/os/windows/lang.zig	/^pub const BULGARIAN = 0x02/;"	constant
BULGARIAN_BULGARIA	$ZIGLIB/std/os/windows/sublang.zig	/^pub const BULGARIAN_BULGARIA = 0x01/;"	constant
BUSY	$ZIGLIB/std/os/windows/win32error.zig	/BUSY = 170/;"	field
BUSY_DRIVE	$ZIGLIB/std/os/windows/win32error.zig	/BUSY_DRIVE = 142/;"	field
BUSY_POLL	$ZIGLIB/std/os/linux.zig	/pub const BUSY_POLL = 48/;"	constant
BUS_CYCLES	$ZIGLIB/std/os/linux.zig	/BUS_CYCLES/;"	field
BUS_RESET	$ZIGLIB/std/os/windows/win32error.zig	/BUS_RESET = 1111/;"	field
BYTE	$ZIGLIB/std/os/windows.zig	/^pub const BYTE = u8/;"	constant
BYTES_REVERSED_HI	$ZIGLIB/std/coff.zig	/BYTES_REVERSED_HI: u1 = 0/;"	field
BYTES_REVERSED_LO	$ZIGLIB/std/coff.zig	/BYTES_REVERSED_LO: u1 = 0/;"	field
BY_HANDLE_FILE_INFORMATION	$ZIGLIB/std/os/windows.zig	/^pub const BY_HANDLE_FILE_INFORMATION = extern struct {$/;"	struct
B_OS_NAME_LENGTH	$ZIGLIB/std/c/haiku.zig	/^pub const B_OS_NAME_LENGTH = 32/;"	constant
B_POSIX_ERROR_BASE	$ZIGLIB/std/c/haiku.zig	/^const B_POSIX_ERROR_BASE = -2147454976/;"	constant
B_Promoted	$ZIGLIB/std/zig/c_translation.zig	/const B_Promoted = PromotedIntType(B)/;"	constant
B_USER_SETTINGS_DIRECTORY	$ZIGLIB/std/c/haiku.zig	/B_USER_SETTINGS_DIRECTORY = 0xbbe/;"	field
B_count	$ZIGLIB/std/sort.zig	/var B_count: usize = 0/;"	variable
B_index	$ZIGLIB/std/sort.zig	/var B_index: usize = B.start/;"	variable
B_last	$ZIGLIB/std/sort.zig	/const B_last = B.end/;"	constant
B_remaining	$ZIGLIB/std/sort.zig	/const B_remaining = lastB.end - B_split/;"	constant
B_split	$ZIGLIB/std/sort.zig	/const B_split = binaryFirst(T, items, items[indexA], lastB, context, lessThan)/;"	constant
BackSlash	$ZIGLIB/std/c/tokenizer.zig	/BackSlash/;"	field
BackSlashCr	$ZIGLIB/std/c/tokenizer.zig	/BackSlashCr/;"	field
BadBufferSize	$ZIGLIB/std/os/uefi/status.zig	/BadBufferSize = high_bit | 4/;"	field
Ball	$ZIGLIB/std/enums.zig	/const Ball = enum { red, green, blue }/;"	enum
Bang	$ZIGLIB/std/c/tokenizer.zig	/Bang/;"	field
BangEqual	$ZIGLIB/std/c/tokenizer.zig	/BangEqual/;"	field
Barrier	$ZIGLIB/std/Thread/ResetEvent.zig	/const Barrier = struct {$/;"	struct
Base	$ZIGLIB/std/zig/number_literal.zig	/^pub const Base = enum(u8) { decimal = 10, hex = 16, binary = 2, octal = 8 }/;"	enum
Base64Decoder	$ZIGLIB/std/base64.zig	/^pub const Base64Decoder = struct {$/;"	struct
Base64DecoderWithIgnore	$ZIGLIB/std/base64.zig	/^pub const Base64DecoderWithIgnore = struct {$/;"	struct
Base64Encoder	$ZIGLIB/std/base64.zig	/^pub const Base64Encoder = struct {$/;"	struct
BaseAcpiDevicePath	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/pub const BaseAcpiDevicePath = extern struct {$/;"	struct
BaseAddress	$ZIGLIB/std/os/windows.zig	/BaseAddress: PVOID/;"	field
BaseIterator	$ZIGLIB/std/segmented_list.zig	/fn BaseIterator(comptime SelfType: type, comptime ElementPtr: type) type {$/;"	function
BasePriority	$ZIGLIB/std/os/windows.zig	/BasePriority: KPRIORITY/;"	field
BaseRelocation	$ZIGLIB/std/coff.zig	/^pub const BaseRelocation = packed struct {$/;"	struct
BaseRelocationDirectoryEntry	$ZIGLIB/std/coff.zig	/^pub const BaseRelocationDirectoryEntry = extern struct {$/;"	struct
BaseRelocationType	$ZIGLIB/std/coff.zig	/^pub const BaseRelocationType = enum(u4) {$/;"	enum
BaseType	$ZIGLIB/std/coff.zig	/^pub const BaseType = enum(u8) {$/;"	enum
BaselineInterruptTimeQpc	$ZIGLIB/std/os/windows.zig	/BaselineInterruptTimeQpc: ULONGLONG/;"	field
BaselineSystemTimeQpc	$ZIGLIB/std/os/windows.zig	/BaselineSystemTimeQpc: ULONGLONG/;"	field
Basic	$ZIGLIB/std/event/loop.zig	/pub const Basic = switch (builtin.os.tag) {$/;"	constant
BasicInfo	$ZIGLIB/std/os/windows.zig	/BasicInfo: PSAPI_WS_WATCH_INFORMATION/;"	field
BasicInformation	$ZIGLIB/std/os/windows.zig	/BasicInformation: FILE_BASIC_INFORMATION/;"	field
Batch	$ZIGLIB/std/event/batch.zig	/^pub fn Batch($/;"	function
BatchElement	$ZIGLIB/std/crypto/25519/ed25519.zig	/pub const BatchElement = struct {$/;"	struct
BeginAddress	$ZIGLIB/std/os/windows.zig	/BeginAddress: DWORD/;"	field
BeingDebugged	$ZIGLIB/std/os/windows.zig	/BeingDebugged: BOOLEAN/;"	field
BiasedFp	$ZIGLIB/std/fmt/parse_float/common.zig	/^pub fn BiasedFp(comptime T: type) type {$/;"	function
BigInt	$ZIGLIB/std/crypto/Certificate.zig	/const BigInt = std.math.big.int.Managed/;"	constant
BinNameOptions	$ZIGLIB/std/zig.zig	/^pub const BinNameOptions = struct {$/;"	struct
BinValue	$ZIGLIB/std/crypto/scrypt.zig	/pub fn BinValue(comptime max_len: usize) type {$/;"	function
BindError	$ZIGLIB/std/os.zig	/^pub const BindError = error{$/;"	constant
BiosBootSpecification	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/BiosBootSpecification: BiosBootSpecificationDevicePath/;"	field
BiosBootSpecificationDevicePath	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/^pub const BiosBootSpecificationDevicePath = union(Subtype) {$/;"	union
BitField	$ZIGLIB/std/os/windows.zig	/BitField: UCHAR/;"	field
BitReader	$ZIGLIB/std/io/bit_reader.zig	/^pub fn BitReader(comptime endian: std.builtin.Endian, comptime ReaderType: type) type {$/;"	function
BitReprType	$ZIGLIB/std/math/big/rational.zig	/const BitReprType = std.meta.Int(.unsigned, fsize)/;"	constant
BitRmwOp	$ZIGLIB/std/atomic/Atomic.zig	/const BitRmwOp = enum {$/;"	enum
BitSet	$ZIGLIB/std/enums.zig	/const BitSet = std.StaticBitSet(Indexer.count)/;"	constant
BitSetIterator	$ZIGLIB/std/bit_set.zig	/^fn BitSetIterator(comptime MaskInt: type, comptime options: IteratorOptions) type {$/;"	function
BitTree	$ZIGLIB/std/compress/lzma/decode/rangecoder.zig	/^pub fn BitTree(comptime num_bits: usize) type {$/;"	function
BitWriter	$ZIGLIB/std/io/bit_writer.zig	/^pub fn BitWriter(comptime endian: std.builtin.Endian, comptime WriterType: type) type {$/;"	function
Blake2b	$ZIGLIB/std/crypto/blake2.zig	/^pub fn Blake2b(comptime out_bits: usize) type {$/;"	function
Blake2b128	$ZIGLIB/std/crypto/blake2.zig	/^pub const Blake2b128 = Blake2b(128)/;"	constant
Blake2b160	$ZIGLIB/std/crypto/blake2.zig	/^pub const Blake2b160 = Blake2b(160)/;"	constant
Blake2b256	$ZIGLIB/std/crypto/blake2.zig	/^pub const Blake2b256 = Blake2b(256)/;"	constant
Blake2b384	$ZIGLIB/std/crypto/blake2.zig	/^pub const Blake2b384 = Blake2b(384)/;"	constant
Blake2b512	$ZIGLIB/std/crypto/blake2.zig	/^pub const Blake2b512 = Blake2b(512)/;"	constant
Blake2s	$ZIGLIB/std/crypto/blake2.zig	/^pub fn Blake2s(comptime out_bits: usize) type {$/;"	function
Blake2s128	$ZIGLIB/std/crypto/blake2.zig	/^pub const Blake2s128 = Blake2s(128)/;"	constant
Blake2s160	$ZIGLIB/std/crypto/blake2.zig	/^pub const Blake2s160 = Blake2s(160)/;"	constant
Blake2s224	$ZIGLIB/std/crypto/blake2.zig	/^pub const Blake2s224 = Blake2s(224)/;"	constant
Blake2s256	$ZIGLIB/std/crypto/blake2.zig	/^pub const Blake2s256 = Blake2s(256)/;"	constant
Blake3	$ZIGLIB/std/crypto/blake3.zig	/^pub const Blake3 = struct {$/;"	struct
BlindKeyPair	$ZIGLIB/std/crypto/25519/ed25519.zig	/pub const BlindKeyPair = struct {$/;"	struct
BlindPublicKey	$ZIGLIB/std/crypto/25519/ed25519.zig	/pub const BlindPublicKey = struct {$/;"	struct
BlindSecretKey	$ZIGLIB/std/crypto/25519/ed25519.zig	/pub const BlindSecretKey = struct {$/;"	struct
Blink	$ZIGLIB/std/os/windows.zig	/Blink: *LIST_ENTRY/;"	field
BlobIndex	$ZIGLIB/std/macho.zig	/^pub const BlobIndex = extern struct {$/;"	struct
Block	$ZIGLIB/std/dwarf.zig	/Block: []u8/;"	field
BlockDevice	$ZIGLIB/std/fs/file.zig	/BlockDevice/;"	field
BlockIoProtocol	$ZIGLIB/std/os/uefi/protocols/block_io_protocol.zig	/^pub const BlockIoProtocol = extern struct {$/;"	struct
BlockMapAddr	$ZIGLIB/std/pdb.zig	/BlockMapAddr: u32/;"	field
BlockReader	$ZIGLIB/std/io/buffered_reader.zig	/const BlockReader = struct {$/;"	struct
BlockSize	$ZIGLIB/std/pdb.zig	/BlockSize: u32/;"	field
BlockVec	$ZIGLIB/std/crypto/salsa20.zig	/const BlockVec = [4]Lane/;"	constant
BlockingPipesINTEL	$ZIGLIB/std/target/spirv.zig	/BlockingPipesINTEL/;"	field
Blocks	$ZIGLIB/std/crypto/argon2.zig	/^const Blocks = std.ArrayListAligned([block_length]u64, 16)/;"	constant
BltBufferToVideo	$ZIGLIB/std/os/uefi/protocols/graphics_output_protocol.zig	/BltBufferToVideo/;"	field
BltVideoFill	$ZIGLIB/std/os/uefi/protocols/graphics_output_protocol.zig	/BltVideoFill/;"	field
BltVideoToBltBuffer	$ZIGLIB/std/os/uefi/protocols/graphics_output_protocol.zig	/BltVideoToBltBuffer/;"	field
BltVideoToVideo	$ZIGLIB/std/os/uefi/protocols/graphics_output_protocol.zig	/BltVideoToVideo/;"	field
BmcDevicePath	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/pub const BmcDevicePath = extern struct {$/;"	struct
Bold	$ZIGLIB/std/debug.zig	/Bold/;"	field
Bool	$ZIGLIB/std/json.zig	/Bool: bool/;"	field
BootId	$ZIGLIB/std/os/windows.zig	/BootId: ULONG/;"	field
BootServices	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/^pub const BootServices = extern struct {$/;"	struct
BootServicesCode	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/BootServicesCode/;"	field
BootServicesData	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/BootServicesData/;"	field
Bottom	$ZIGLIB/std/os/windows.zig	/Bottom: SHORT/;"	field
BoundedArray	$ZIGLIB/std/bounded_array.zig	/^pub fn BoundedArray(comptime T: type, comptime buffer_capacity: usize) type {$/;"	function
BoundedEnumMultiset	$ZIGLIB/std/enums.zig	/^pub fn BoundedEnumMultiset(comptime E: type, comptime CountSize: type) type {$/;"	function
Branch	$ZIGLIB/std/fmt.zig	/Branch: struct { left: *const R, right: *const R }/;"	field
Broadcast	$ZIGLIB/std/Thread/Futex.zig	/const Broadcast = struct {$/;"	struct
BroadcastTest	$ZIGLIB/std/Thread/Condition.zig	/const BroadcastTest = struct {$/;"	struct
Broadcom	$ZIGLIB/std/zig/system/arm.zig	/const Broadcom = [_]E{$/;"	constant
BtfLoadAttr	$ZIGLIB/std/os/linux/bpf.zig	/^pub const BtfLoadAttr = extern struct {$/;"	struct
Bucket	$ZIGLIB/std/Thread/Futex.zig	/const Bucket = struct {$/;"	struct
BucketHeader	$ZIGLIB/std/heap/general_purpose_allocator.zig	/const BucketHeader = struct {$/;"	struct
BufMap	$ZIGLIB/std/buf_map.zig	/^pub const BufMap = struct {$/;"	struct
BufMapHashMap	$ZIGLIB/std/buf_map.zig	/const BufMapHashMap = StringHashMap([]const u8)/;"	constant
BufNode	$ZIGLIB/std/heap/arena_allocator.zig	/const BufNode = std.SinglyLinkedList([]u8).Node/;"	constant
BufPrintError	$ZIGLIB/std/fmt.zig	/^pub const BufPrintError = error{$/;"	constant
BufSet	$ZIGLIB/std/buf_set.zig	/^pub const BufSet = struct {$/;"	struct
BufSetHashMap	$ZIGLIB/std/buf_set.zig	/const BufSetHashMap = StringHashMap(void)/;"	constant
BufShift	$ZIGLIB/std/io/bit_writer.zig	/const BufShift = math.Log2Int(Buf)/;"	constant
Buffer	$ZIGLIB/std/os/windows.zig	/Buffer: [*]WCHAR/;"	field
BufferTooSmall	$ZIGLIB/std/os/uefi/status.zig	/BufferTooSmall = high_bit | 5/;"	field
BufferedAtomicFile	$ZIGLIB/std/io/buffered_atomic_file.zig	/^pub const BufferedAtomicFile = struct {$/;"	struct
BufferedReader	$ZIGLIB/std/io/buffered_reader.zig	/^pub fn BufferedReader(comptime buffer_size: usize, comptime ReaderType: type) type {$/;"	function
BufferedWriter	$ZIGLIB/std/io/buffered_writer.zig	/^pub fn BufferedWriter(comptime buffer_size: usize, comptime WriterType: type) type {$/;"	function
Build	$ZIGLIB/std/Build.zig	/^const Build = @This()/;"	constant
BuildNumber	$ZIGLIB/std/pdb.zig	/BuildNumber: u16/;"	field
Builder	$ZIGLIB/std/Build.zig	/^pub const Builder = Build/;"	constant
Bundle	$ZIGLIB/std/crypto/Certificate/Bundle.zig	/^const Bundle = @This()/;"	constant
ByIndexContext	$ZIGLIB/std/array_hash_map.zig	/const ByIndexContext = if (store_hash) void else Context/;"	constant
ByName	$ZIGLIB/std/coff.zig	/pub const ByName = packed struct {$/;"	struct
ByOrdinal	$ZIGLIB/std/coff.zig	/pub const ByOrdinal = packed struct {$/;"	struct
ByProtocol	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/ByProtocol/;"	field
ByRegisterNotify	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/ByRegisterNotify/;"	field
ByteAlignedT	$ZIGLIB/std/rand.zig	/const ByteAlignedT = std.meta.Int(.unsigned, @divTrunc(bits + 7, 8) * 8)/;"	constant
ByteOffset	$ZIGLIB/std/zig/Ast.zig	/^pub const ByteOffset = u32/;"	constant
ByteSize	$ZIGLIB/std/pdb.zig	/ByteSize: u32/;"	field
BytesAsSliceReturnType	$ZIGLIB/std/mem.zig	/^fn BytesAsSliceReturnType(comptime T: type, comptime bytesType: type) type {$/;"	function
BytesAsValueReturnType	$ZIGLIB/std/mem.zig	/^fn BytesAsValueReturnType(comptime T: type, comptime B: type) type {$/;"	function
BytesDiffer	$ZIGLIB/std/testing.zig	/^const BytesDiffer = struct {$/;"	struct
C11ByteSize	$ZIGLIB/std/pdb.zig	/C11ByteSize: u32/;"	field
C13ByteSize	$ZIGLIB/std/pdb.zig	/C13ByteSize: u32/;"	field
C166	$ZIGLIB/std/elf.zig	/C166 = 116/;"	field
CACHE	$ZIGLIB/std/os/linux.zig	/pub const CACHE = enum(u32) {$/;"	enum
CACHEPCT	$ZIGLIB/std/c/openbsd.zig	/pub const CACHEPCT = 72/;"	constant
CACHE_MISSES	$ZIGLIB/std/os/linux.zig	/CACHE_MISSES/;"	field
CACHE_PAGE_LOCKED	$ZIGLIB/std/os/windows/win32error.zig	/CACHE_PAGE_LOCKED = 752/;"	field
CACHE_REFERENCES	$ZIGLIB/std/os/linux.zig	/CACHE_REFERENCES/;"	field
CAD_OFF	$ZIGLIB/std/os/linux.zig	/CAD_OFF = 0x00000000/;"	field
CAD_ON	$ZIGLIB/std/os/linux.zig	/CAD_ON = 0x89ABCDEF/;"	field
CAIF	$ZIGLIB/std/os/linux.zig	/pub const CAIF = 37/;"	constant
CALENDAR_CLOCK	$ZIGLIB/std/c/darwin.zig	/^pub const CALENDAR_CLOCK = 1/;"	constant
CALL	$ZIGLIB/std/os/linux/bpf.zig	/^pub const CALL = 0x80/;"	constant
CALLBACK_BYPASS	$ZIGLIB/std/os/windows/ntstatus.zig	/CALLBACK_BYPASS = 0xC0000503/;"	field
CALLBACK_POP_STACK	$ZIGLIB/std/os/windows/win32error.zig	/CALLBACK_POP_STACK = 768/;"	field
CALLBACK_RETURNED_LANG	$ZIGLIB/std/os/windows/ntstatus.zig	/CALLBACK_RETURNED_LANG = 0xC000071F/;"	field
CALLBACK_RETURNED_LDR_LOCK	$ZIGLIB/std/os/windows/ntstatus.zig	/CALLBACK_RETURNED_LDR_LOCK = 0xC000071E/;"	field
CALLBACK_RETURNED_PRI_BACK	$ZIGLIB/std/os/windows/ntstatus.zig	/CALLBACK_RETURNED_PRI_BACK = 0xC0000720/;"	field
CALLBACK_RETURNED_THREAD_AFFINITY	$ZIGLIB/std/os/windows/ntstatus.zig	/CALLBACK_RETURNED_THREAD_AFFINITY = 0xC0000721/;"	field
CALLBACK_RETURNED_THREAD_PRIORITY	$ZIGLIB/std/os/windows/ntstatus.zig	/CALLBACK_RETURNED_THREAD_PRIORITY = 0xC000071B/;"	field
CALLBACK_RETURNED_TRANSACTION	$ZIGLIB/std/os/windows/ntstatus.zig	/CALLBACK_RETURNED_TRANSACTION = 0xC000071D/;"	field
CALLBACK_RETURNED_WHILE_IMPERSONATING	$ZIGLIB/std/os/windows/ntstatus.zig	/CALLBACK_RETURNED_WHILE_IMPERSONATING = 0xC0000710/;"	field
CALLBACK_SUPPLIED_INVALID_DATA	$ZIGLIB/std/os/windows/win32error.zig	/CALLBACK_SUPPLIED_INVALID_DATA = 1273/;"	field
CALLCHAIN	$ZIGLIB/std/os/linux.zig	/pub const CALLCHAIN = 32/;"	constant
CALL_NOT_IMPLEMENTED	$ZIGLIB/std/os/windows/win32error.zig	/CALL_NOT_IMPLEMENTED = 120/;"	field
CALL_STACK	$ZIGLIB/std/os/linux.zig	/pub const CALL_STACK = 1 << 11/;"	constant
CANCEL	$ZIGLIB/std/c/solaris.zig	/pub const CANCEL = 36/;"	constant
CANCELED	$ZIGLIB/std/os/wasi.zig	/CANCELED = 11/;"	field
CANCELLED	$ZIGLIB/std/os/windows/win32error.zig	/CANCELLED = 1223/;"	field
CANCEL_VIOLATION	$ZIGLIB/std/os/windows/win32error.zig	/CANCEL_VIOLATION = 173/;"	field
CANNOT_ABORT_TRANSACTIONS	$ZIGLIB/std/os/windows/ntstatus.zig	/CANNOT_ABORT_TRANSACTIONS = 0xC019004D/;"	field
CANNOT_ACCEPT_TRANSACTED_WORK	$ZIGLIB/std/os/windows/ntstatus.zig	/CANNOT_ACCEPT_TRANSACTED_WORK = 0xC019004C/;"	field
CANNOT_BREAK_OPLOCK	$ZIGLIB/std/os/windows/win32error.zig	/CANNOT_BREAK_OPLOCK = 802/;"	field
CANNOT_COPY	$ZIGLIB/std/os/windows/win32error.zig	/CANNOT_COPY = 266/;"	field
CANNOT_DELETE	$ZIGLIB/std/os/windows/ntstatus.zig	/CANNOT_DELETE = 0xC0000121/;"	field
CANNOT_DETECT_DRIVER_FAILURE	$ZIGLIB/std/os/windows/win32error.zig	/CANNOT_DETECT_DRIVER_FAILURE = 1080/;"	field
CANNOT_DETECT_PROCESS_ABORT	$ZIGLIB/std/os/windows/win32error.zig	/CANNOT_DETECT_PROCESS_ABORT = 1081/;"	field
CANNOT_EXECUTE_FILE_IN_TRANSACTION	$ZIGLIB/std/os/windows/ntstatus.zig	/CANNOT_EXECUTE_FILE_IN_TRANSACTION = 0xC0190044/;"	field
CANNOT_FIND_WND_CLASS	$ZIGLIB/std/os/windows/win32error.zig	/CANNOT_FIND_WND_CLASS = 1407/;"	field
CANNOT_GRANT_REQUESTED_OPLOCK	$ZIGLIB/std/os/windows/win32error.zig	/CANNOT_GRANT_REQUESTED_OPLOCK = 801/;"	field
CANNOT_IMPERSONATE	$ZIGLIB/std/os/windows/win32error.zig	/CANNOT_IMPERSONATE = 1368/;"	field
CANNOT_LOAD_REGISTRY_FILE	$ZIGLIB/std/os/windows/win32error.zig	/CANNOT_LOAD_REGISTRY_FILE = 589/;"	field
CANNOT_MAKE	$ZIGLIB/std/os/windows/win32error.zig	/CANNOT_MAKE = 82/;"	field
CANNOT_OPEN_PROFILE	$ZIGLIB/std/os/windows/win32error.zig	/CANNOT_OPEN_PROFILE = 1205/;"	field
CANONNAME	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const CANONNAME = 2/;"	constant
CANTFETCHBACKWARDS	$ZIGLIB/std/os/windows/win32error.zig	/CANTFETCHBACKWARDS = 770/;"	field
CANTOPEN	$ZIGLIB/std/os/windows/win32error.zig	/CANTOPEN = 1011/;"	field
CANTREAD	$ZIGLIB/std/os/windows/win32error.zig	/CANTREAD = 1012/;"	field
CANTSCROLLBACKWARDS	$ZIGLIB/std/os/windows/win32error.zig	/CANTSCROLLBACKWARDS = 771/;"	field
CANTWRITE	$ZIGLIB/std/os/windows/win32error.zig	/CANTWRITE = 1013/;"	field
CANT_ACCESS_DOMAIN_INFO	$ZIGLIB/std/os/windows/win32error.zig	/CANT_ACCESS_DOMAIN_INFO = 1351/;"	field
CANT_ACCESS_FILE	$ZIGLIB/std/os/windows/win32error.zig	/CANT_ACCESS_FILE = 1920/;"	field
CANT_BREAK_TRANSACTIONAL_DEPENDENCY	$ZIGLIB/std/os/windows/ntstatus.zig	/CANT_BREAK_TRANSACTIONAL_DEPENDENCY = 0xC0190037/;"	field
CANT_CREATE_MORE_STREAM_MINIVERSIONS	$ZIGLIB/std/os/windows/ntstatus.zig	/CANT_CREATE_MORE_STREAM_MINIVERSIONS = 0xC0190026/;"	field
CANT_CROSS_RM_BOUNDARY	$ZIGLIB/std/os/windows/ntstatus.zig	/CANT_CROSS_RM_BOUNDARY = 0xC0190038/;"	field
CANT_DISABLE_MANDATORY	$ZIGLIB/std/os/windows/win32error.zig	/CANT_DISABLE_MANDATORY = 1310/;"	field
CANT_ENABLE_DENY_ONLY	$ZIGLIB/std/os/windows/win32error.zig	/CANT_ENABLE_DENY_ONLY = 629/;"	field
CANT_OPEN_ANONYMOUS	$ZIGLIB/std/os/windows/win32error.zig	/CANT_OPEN_ANONYMOUS = 1347/;"	field
CANT_OPEN_MINIVERSION_WITH_MODIFY_INTENT	$ZIGLIB/std/os/windows/ntstatus.zig	/CANT_OPEN_MINIVERSION_WITH_MODIFY_INTENT = 0xC0190025/;"	field
CANT_RECOVER_WITH_HANDLE_OPEN	$ZIGLIB/std/os/windows/ntstatus.zig	/CANT_RECOVER_WITH_HANDLE_OPEN = 0x80190031/;"	field
CANT_RESOLVE_FILENAME	$ZIGLIB/std/os/windows/win32error.zig	/CANT_RESOLVE_FILENAME = 1921/;"	field
CANT_TERMINATE_SELF	$ZIGLIB/std/os/windows/win32error.zig	/CANT_TERMINATE_SELF = 555/;"	field
CANT_WAIT	$ZIGLIB/std/os/windows/win32error.zig	/CANT_WAIT = 554/;"	field
CAN_NOT_COMPLETE	$ZIGLIB/std/os/windows/win32error.zig	/CAN_NOT_COMPLETE = 1003/;"	field
CAPBSET_DROP	$ZIGLIB/std/os/linux.zig	/CAPBSET_DROP = 24/;"	field
CAPBSET_READ	$ZIGLIB/std/os/linux.zig	/CAPBSET_READ = 23/;"	field
CAPMODE	$ZIGLIB/std/c/freebsd.zig	/CAPMODE = 94/;"	field
CAP_AMBIENT	$ZIGLIB/std/os/linux.zig	/CAP_AMBIENT = 47/;"	field
CAP_AMBIENT_CLEAR_ALL	$ZIGLIB/std/os/linux.zig	/pub const CAP_AMBIENT_CLEAR_ALL = 4/;"	constant
CAP_AMBIENT_IS_SET	$ZIGLIB/std/os/linux.zig	/pub const CAP_AMBIENT_IS_SET = 1/;"	constant
CAP_AMBIENT_LOWER	$ZIGLIB/std/os/linux.zig	/pub const CAP_AMBIENT_LOWER = 3/;"	constant
CAP_AMBIENT_RAISE	$ZIGLIB/std/os/linux.zig	/pub const CAP_AMBIENT_RAISE = 2/;"	constant
CAP_RIGHTS_VERSION	$ZIGLIB/std/c/freebsd.zig	/^pub const CAP_RIGHTS_VERSION = 0/;"	constant
CARDBUS_NOT_SUPPORTED	$ZIGLIB/std/os/windows/win32error.zig	/CARDBUS_NOT_SUPPORTED = 724/;"	field
CARP	$ZIGLIB/std/c/openbsd.zig	/pub const CARP = 112/;"	constant
CARRIER	$ZIGLIB/std/os/linux.zig	/CARRIER/;"	field
CARRIER_CHANGES	$ZIGLIB/std/os/linux.zig	/CARRIER_CHANGES/;"	field
CARRIER_DOWN_COUNT	$ZIGLIB/std/os/linux.zig	/CARRIER_DOWN_COUNT/;"	field
CARRIER_UP_COUNT	$ZIGLIB/std/os/linux.zig	/CARRIER_UP_COUNT/;"	field
CAST_OR_CALL	$ZIGLIB/std/zig/c_translation.zig	/pub fn CAST_OR_CALL(a: anytype, b: anytype) switch (@typeInfo(@TypeOf(a))) {$/;"	function
CATALAN	$ZIGLIB/std/os/windows/lang.zig	/^pub const CATALAN = 0x03/;"	constant
CATALAN_CATALAN	$ZIGLIB/std/os/windows/sublang.zig	/^pub const CATALAN_CATALAN = 0x01/;"	constant
CATCH	$ZIGLIB/std/c/openbsd.zig	/pub const CATCH = @intToPtr(?Sigaction.handler_fn, 2)/;"	constant
CAUSE_AAL_PARAMETERS_UNSUPPORTED	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const CAUSE_AAL_PARAMETERS_UNSUPPORTED = 93/;"	constant
CAUSE_ACCESS_INFORMAION_DISCARDED	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const CAUSE_ACCESS_INFORMAION_DISCARDED = 43/;"	constant
CAUSE_BEARER_CAPABILITY_UNAUTHORIZED	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const CAUSE_BEARER_CAPABILITY_UNAUTHORIZED = 57/;"	constant
CAUSE_BEARER_CAPABILITY_UNAVAILABLE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const CAUSE_BEARER_CAPABILITY_UNAVAILABLE = 58/;"	constant
CAUSE_BEARER_CAPABILITY_UNIMPLEMENTED	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const CAUSE_BEARER_CAPABILITY_UNIMPLEMENTED = 65/;"	constant
CAUSE_CALL_REJECTED	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const CAUSE_CALL_REJECTED = 21/;"	constant
CAUSE_CHANNEL_NONEXISTENT	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const CAUSE_CHANNEL_NONEXISTENT = 82/;"	constant
CAUSE_COND_PERMANENT	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const CAUSE_COND_PERMANENT = 1/;"	constant
CAUSE_COND_TRANSIENT	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const CAUSE_COND_TRANSIENT = 2/;"	constant
CAUSE_COND_UNKNOWN	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const CAUSE_COND_UNKNOWN = 0/;"	constant
CAUSE_DESTINATION_OUT_OF_ORDER	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const CAUSE_DESTINATION_OUT_OF_ORDER = 27/;"	constant
CAUSE_INCOMPATIBLE_DESTINATION	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const CAUSE_INCOMPATIBLE_DESTINATION = 88/;"	constant
CAUSE_INCORRECT_MESSAGE_LENGTH	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const CAUSE_INCORRECT_MESSAGE_LENGTH = 104/;"	constant
CAUSE_INVALID_CALL_REFERENCE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const CAUSE_INVALID_CALL_REFERENCE = 81/;"	constant
CAUSE_INVALID_ENDPOINT_REFERENCE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const CAUSE_INVALID_ENDPOINT_REFERENCE = 89/;"	constant
CAUSE_INVALID_IE_CONTENTS	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const CAUSE_INVALID_IE_CONTENTS = 100/;"	constant
CAUSE_INVALID_NUMBER_FORMAT	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const CAUSE_INVALID_NUMBER_FORMAT = 28/;"	constant
CAUSE_INVALID_STATE_FOR_MESSAGE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const CAUSE_INVALID_STATE_FOR_MESSAGE = 101/;"	constant
CAUSE_INVALID_TRANSIT_NETWORK_SELECTION	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const CAUSE_INVALID_TRANSIT_NETWORK_SELECTION = 91/;"	constant
CAUSE_LOC_BEYOND_INTERWORKING	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const CAUSE_LOC_BEYOND_INTERWORKING = 10/;"	constant
CAUSE_LOC_INTERNATIONAL_NETWORK	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const CAUSE_LOC_INTERNATIONAL_NETWORK = 7/;"	constant
CAUSE_LOC_PRIVATE_LOCAL	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const CAUSE_LOC_PRIVATE_LOCAL = 1/;"	constant
CAUSE_LOC_PRIVATE_REMOTE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const CAUSE_LOC_PRIVATE_REMOTE = 5/;"	constant
CAUSE_LOC_PUBLIC_LOCAL	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const CAUSE_LOC_PUBLIC_LOCAL = 2/;"	constant
CAUSE_LOC_PUBLIC_REMOTE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const CAUSE_LOC_PUBLIC_REMOTE = 4/;"	constant
CAUSE_LOC_TRANSIT_NETWORK	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const CAUSE_LOC_TRANSIT_NETWORK = 3/;"	constant
CAUSE_LOC_USER	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const CAUSE_LOC_USER = 0/;"	constant
CAUSE_MANDATORY_IE_MISSING	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const CAUSE_MANDATORY_IE_MISSING = 96/;"	constant
CAUSE_NA_ABNORMAL	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const CAUSE_NA_ABNORMAL = 4/;"	constant
CAUSE_NA_NORMAL	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const CAUSE_NA_NORMAL = 0/;"	constant
CAUSE_NETWORK_OUT_OF_ORDER	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const CAUSE_NETWORK_OUT_OF_ORDER = 38/;"	constant
CAUSE_NORMAL_CALL_CLEARING	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const CAUSE_NORMAL_CALL_CLEARING = 16/;"	constant
CAUSE_NORMAL_UNSPECIFIED	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const CAUSE_NORMAL_UNSPECIFIED = 31/;"	constant
CAUSE_NO_ROUTE_TO_DESTINATION	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const CAUSE_NO_ROUTE_TO_DESTINATION = 3/;"	constant
CAUSE_NO_ROUTE_TO_TRANSIT_NETWORK	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const CAUSE_NO_ROUTE_TO_TRANSIT_NETWORK = 2/;"	constant
CAUSE_NO_USER_RESPONDING	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const CAUSE_NO_USER_RESPONDING = 18/;"	constant
CAUSE_NO_VPI_VCI_AVAILABLE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const CAUSE_NO_VPI_VCI_AVAILABLE = 45/;"	constant
CAUSE_NUMBER_CHANGED	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const CAUSE_NUMBER_CHANGED = 22/;"	constant
CAUSE_OPTION_UNAVAILABLE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const CAUSE_OPTION_UNAVAILABLE = 63/;"	constant
CAUSE_PROTOCOL_ERROR	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const CAUSE_PROTOCOL_ERROR = 111/;"	constant
CAUSE_PU_PROVIDER	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const CAUSE_PU_PROVIDER = 0/;"	constant
CAUSE_PU_USER	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const CAUSE_PU_USER = 8/;"	constant
CAUSE_QOS_UNAVAILABLE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const CAUSE_QOS_UNAVAILABLE = 49/;"	constant
CAUSE_REASON_IE_INSUFFICIENT	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const CAUSE_REASON_IE_INSUFFICIENT = 8/;"	constant
CAUSE_REASON_IE_MISSING	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const CAUSE_REASON_IE_MISSING = 4/;"	constant
CAUSE_REASON_USER	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const CAUSE_REASON_USER = 0/;"	constant
CAUSE_RECOVERY_ON_TIMEOUT	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const CAUSE_RECOVERY_ON_TIMEOUT = 102/;"	constant
CAUSE_RESOURCE_UNAVAILABLE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const CAUSE_RESOURCE_UNAVAILABLE = 47/;"	constant
CAUSE_STATUS_ENQUIRY_RESPONSE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const CAUSE_STATUS_ENQUIRY_RESPONSE = 30/;"	constant
CAUSE_TEMPORARY_FAILURE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const CAUSE_TEMPORARY_FAILURE = 41/;"	constant
CAUSE_TOO_MANY_PENDING_ADD_PARTY	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const CAUSE_TOO_MANY_PENDING_ADD_PARTY = 92/;"	constant
CAUSE_UNALLOCATED_NUMBER	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const CAUSE_UNALLOCATED_NUMBER = 1/;"	constant
CAUSE_UNIMPLEMENTED_IE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const CAUSE_UNIMPLEMENTED_IE = 99/;"	constant
CAUSE_UNIMPLEMENTED_MESSAGE_TYPE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const CAUSE_UNIMPLEMENTED_MESSAGE_TYPE = 97/;"	constant
CAUSE_UNSUPPORTED_TRAFFIC_PARAMETERS	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const CAUSE_UNSUPPORTED_TRAFFIC_PARAMETERS = 73/;"	constant
CAUSE_USER_BUSY	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const CAUSE_USER_BUSY = 17/;"	constant
CAUSE_USER_CELL_RATE_UNAVAILABLE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const CAUSE_USER_CELL_RATE_UNAVAILABLE = 51/;"	constant
CAUSE_USER_REJECTS_CLIR	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const CAUSE_USER_REJECTS_CLIR = 23/;"	constant
CAUSE_VPI_VCI_UNACCEPTABLE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const CAUSE_VPI_VCI_UNACCEPTABLE = 10/;"	constant
CAUSE_VPI_VCI_UNAVAILABLE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const CAUSE_VPI_VCI_UNAVAILABLE = 35/;"	constant
CAllocator	$ZIGLIB/std/heap.zig	/^const CAllocator = struct {$/;"	struct
CBEM_GETCOMBOCONTROL	$ZIGLIB/std/os/windows/user32.zig	/^pub const CBEM_GETCOMBOCONTROL = 0x0406/;"	constant
CBEM_GETEDITCONTROL	$ZIGLIB/std/os/windows/user32.zig	/^pub const CBEM_GETEDITCONTROL = 0x0407/;"	constant
CBEM_GETEXSTYLE	$ZIGLIB/std/os/windows/user32.zig	/^pub const CBEM_GETEXSTYLE = 0x0409/;"	constant
CBEM_GETEXTENDEDSTYLE	$ZIGLIB/std/os/windows/user32.zig	/^pub const CBEM_GETEXTENDEDSTYLE = 0x0409/;"	constant
CBEM_GETIMAGELIST	$ZIGLIB/std/os/windows/user32.zig	/^pub const CBEM_GETIMAGELIST = 0x0403/;"	constant
CBEM_GETITEMA	$ZIGLIB/std/os/windows/user32.zig	/^pub const CBEM_GETITEMA = 0x0404/;"	constant
CBEM_GETITEMW	$ZIGLIB/std/os/windows/user32.zig	/^pub const CBEM_GETITEMW = 0x040D/;"	constant
CBEM_HASEDITCHANGED	$ZIGLIB/std/os/windows/user32.zig	/^pub const CBEM_HASEDITCHANGED = 0x040A/;"	constant
CBEM_INSERTITEMA	$ZIGLIB/std/os/windows/user32.zig	/^pub const CBEM_INSERTITEMA = 0x0401/;"	constant
CBEM_INSERTITEMW	$ZIGLIB/std/os/windows/user32.zig	/^pub const CBEM_INSERTITEMW = 0x040B/;"	constant
CBEM_SETEXSTYLE	$ZIGLIB/std/os/windows/user32.zig	/^pub const CBEM_SETEXSTYLE = 0x0408/;"	constant
CBEM_SETEXTENDEDSTYLE	$ZIGLIB/std/os/windows/user32.zig	/^pub const CBEM_SETEXTENDEDSTYLE = 0x040E/;"	constant
CBEM_SETIMAGELIST	$ZIGLIB/std/os/windows/user32.zig	/^pub const CBEM_SETIMAGELIST = 0x0402/;"	constant
CBEM_SETITEMA	$ZIGLIB/std/os/windows/user32.zig	/^pub const CBEM_SETITEMA = 0x0405/;"	constant
CBEM_SETITEMW	$ZIGLIB/std/os/windows/user32.zig	/^pub const CBEM_SETITEMW = 0x040C/;"	constant
CCAR_OFLOW	$ZIGLIB/std/c/darwin.zig	/^pub const CCAR_OFLOW: tcflag_t = 0x00100000/;"	constant
CCITT	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const CCITT = 10/;"	constant
CCPU	$ZIGLIB/std/c/openbsd.zig	/pub const CCPU = 45/;"	constant
CCTS_OFLOW	$ZIGLIB/std/c/openbsd.zig	/^pub const CCTS_OFLOW: tcflag_t = CRTSCTS/;"	constant
CC_INFO	$ZIGLIB/std/os/linux.zig	/pub const CC_INFO = 26/;"	constant
CDM_GETFILEPATH	$ZIGLIB/std/os/windows/user32.zig	/^pub const CDM_GETFILEPATH = 0x0465/;"	constant
CDM_GETFOLDERIDLIST	$ZIGLIB/std/os/windows/user32.zig	/^pub const CDM_GETFOLDERIDLIST = 0x0467/;"	constant
CDM_GETFOLDERPATH	$ZIGLIB/std/os/windows/user32.zig	/^pub const CDM_GETFOLDERPATH = 0x0466/;"	constant
CDM_GETSPEC	$ZIGLIB/std/os/windows/user32.zig	/^pub const CDM_GETSPEC = 0x0464/;"	constant
CDM_HIDECONTROL	$ZIGLIB/std/os/windows/user32.zig	/^pub const CDM_HIDECONTROL = 0x0469/;"	constant
CDM_SETCONTROLTEXT	$ZIGLIB/std/os/windows/user32.zig	/^pub const CDM_SETCONTROLTEXT = 0x0468/;"	constant
CDM_SETDEFEXT	$ZIGLIB/std/os/windows/user32.zig	/^pub const CDM_SETDEFEXT = 0x046A/;"	constant
CDSR_OFLOW	$ZIGLIB/std/c/darwin.zig	/^pub const CDSR_OFLOW: tcflag_t = 0x00080000/;"	constant
CDTR_IFLOW	$ZIGLIB/std/c/darwin.zig	/^pub const CDTR_IFLOW: tcflag_t = 0x00040000/;"	constant
CENTRAL_KURDISH	$ZIGLIB/std/os/windows/lang.zig	/^pub const CENTRAL_KURDISH = 0x92/;"	constant
CENTRAL_KURDISH_IRAQ	$ZIGLIB/std/os/windows/sublang.zig	/^pub const CENTRAL_KURDISH_IRAQ = 0x01/;"	constant
CERT	$ZIGLIB/std/os/darwin/cssm.zig	/CERT = DB_RECORDTYPE_OPEN_GROUP_START + 1/;"	field
CERTIFICATE_MAPPING_NOT_UNIQUE	$ZIGLIB/std/os/windows/ntstatus.zig	/CERTIFICATE_MAPPING_NOT_UNIQUE = 0xC0000714/;"	field
CERT_CONTEXT	$ZIGLIB/std/os/windows/crypt32.zig	/^pub const CERT_CONTEXT = extern struct {$/;"	struct
CERT_INFO	$ZIGLIB/std/os/windows/crypt32.zig	/^pub const CERT_INFO = *opaque {}/;"	constant
CFLSH	$ZIGLIB/std/os/linux.zig	/pub const CFLSH = if (is_mips) 0x5407 else 0x540B/;"	constant
CFTP	$ZIGLIB/std/c/freebsd.zig	/pub const CFTP = 62/;"	constant
CF_ACCEPT	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const CF_ACCEPT = 0/;"	constant
CF_DEFER	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const CF_DEFER = 2/;"	constant
CF_REJECT	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const CF_REJECT = 1/;"	constant
CGETA	$ZIGLIB/std/os/linux.zig	/pub const CGETA = if (is_mips) 0x5401 else 0x5405/;"	constant
CGETBITS	$ZIGLIB/std/c/haiku.zig	/pub const CGETBITS = 0x8009/;"	constant
CGETS	$ZIGLIB/std/os/linux.zig	/pub const CGETS = if (is_mips) 0x540D else 0x5401/;"	constant
CGETX	$ZIGLIB/std/os/linux.zig	/pub const CGETX = 0x5432/;"	constant
CGT_SYM	$ZIGLIB/std/os/linux/x86_64.zig	/pub const CGT_SYM = "__vdso_clock_gettime"/;"	constant
CGT_VER	$ZIGLIB/std/os/linux/x86_64.zig	/pub const CGT_VER = "LINUX_2.6"/;"	constant
CHACHA20_POLY1305_SHA256	$ZIGLIB/std/crypto/tls.zig	/CHACHA20_POLY1305_SHA256: HandshakeCipherT(crypto.aead.chacha_poly.ChaCha20Poly1305, crypto.hash.sha2.Sha256)/;"	field
CHALLENGE	$ZIGLIB/std/c/openbsd.zig	/pub const CHALLENGE: c_int = 0x10/;"	constant
CHANNELS_ENABLED	$ZIGLIB/std/os/windows.zig	/CHANNELS_ENABLED = 16/;"	field
CHAOS	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const CHAOS = 5/;"	constant
CHAR	$ZIGLIB/std/os/windows.zig	/^pub const CHAR = u8/;"	constant
CHARACTER_DEVICE	$ZIGLIB/std/os/wasi.zig	/CHARACTER_DEVICE/;"	field
CHDIR	$ZIGLIB/std/os/plan9.zig	/CHDIR = 3/;"	field
CHECKING_FILE_SYSTEM	$ZIGLIB/std/os/windows/win32error.zig	/CHECKING_FILE_SYSTEM = 712/;"	field
CHECKOUT_REQUIRED	$ZIGLIB/std/os/windows/win32error.zig	/CHECKOUT_REQUIRED = 221/;"	field
CHECKSUM	$ZIGLIB/std/os/linux.zig	/pub const CHECKSUM = 7/;"	constant
CHECK_LV	$ZIGLIB/std/c/darwin.zig	/pub const CHECK_LV = 98/;"	constant
CHEROKEE	$ZIGLIB/std/os/windows/lang.zig	/^pub const CHEROKEE = 0x5c/;"	constant
CHEROKEE_CHEROKEE	$ZIGLIB/std/os/windows/sublang.zig	/^pub const CHEROKEE_CHEROKEE = 0x01/;"	constant
CHILD	$ZIGLIB/std/os/wasi.zig	/CHILD = 12/;"	field
CHILDREN	$ZIGLIB/std/os/linux.zig	/pub const CHILDREN = -1/;"	constant
CHILD_CLEARTID	$ZIGLIB/std/os/linux.zig	/pub const CHILD_CLEARTID = 0x00200000/;"	constant
CHILD_MUST_BE_VOLATILE	$ZIGLIB/std/os/windows/win32error.zig	/CHILD_MUST_BE_VOLATILE = 1021/;"	field
CHILD_NOT_COMPLETE	$ZIGLIB/std/os/windows/win32error.zig	/CHILD_NOT_COMPLETE = 129/;"	field
CHILD_SETTID	$ZIGLIB/std/os/linux.zig	/pub const CHILD_SETTID = 0x01000000/;"	constant
CHILD_WINDOW_MENU	$ZIGLIB/std/os/windows/win32error.zig	/CHILD_WINDOW_MENU = 1436/;"	field
CHINESE	$ZIGLIB/std/os/windows/lang.zig	/^pub const CHINESE = 0x04/;"	constant
CHINESE_HONGKONG	$ZIGLIB/std/os/windows/sublang.zig	/^pub const CHINESE_HONGKONG = 0x03/;"	constant
CHINESE_MACAU	$ZIGLIB/std/os/windows/sublang.zig	/^pub const CHINESE_MACAU = 0x05/;"	constant
CHINESE_SIMPLIFIED	$ZIGLIB/std/os/windows/sublang.zig	/^pub const CHINESE_SIMPLIFIED = 0x02/;"	constant
CHINESE_SINGAPORE	$ZIGLIB/std/os/windows/sublang.zig	/^pub const CHINESE_SINGAPORE = 0x04/;"	constant
CHINESE_TRADITIONAL	$ZIGLIB/std/os/windows/sublang.zig	/^pub const CHINESE_TRADITIONAL = 0x01/;"	constant
CHKCLEAN	$ZIGLIB/std/c/darwin.zig	/pub const CHKCLEAN = 41/;"	constant
CHKFL	$ZIGLIB/std/c/solaris.zig	/pub const CHKFL = 8/;"	constant
CHLD	$ZIGLIB/std/os/linux.zig	/pub const CHLD = 20/;"	constant
CHOWN	$ZIGLIB/std/os/linux.zig	/pub const CHOWN = 0/;"	constant
CHRNG	$ZIGLIB/std/os/linux/errno/sparc.zig	/CHRNG = 94/;"	field
CHUNK_END	$ZIGLIB/std/crypto/blake3.zig	/^const CHUNK_END: u8 = 1 << 1/;"	constant
CHUNK_LEN	$ZIGLIB/std/crypto/blake3.zig	/^const CHUNK_LEN: usize = 1024/;"	constant
CHUNK_START	$ZIGLIB/std/crypto/blake3.zig	/^const CHUNK_START: u8 = 1 << 0/;"	constant
CHWFLOW	$ZIGLIB/std/c/openbsd.zig	/^pub const CHWFLOW: tcflag_t = (MDMBUF | CRTSCTS)/;"	constant
CIGNORE	$ZIGLIB/std/c/openbsd.zig	/^pub const CIGNORE: tcflag_t = 0x00000001/;"	constant
CINFO	$ZIGLIB/std/compress/zlib.zig	/const CINFO = @truncate(u4, header[0] >> 4)/;"	constant
CIRCULAR_DEPENDENCY	$ZIGLIB/std/os/windows/win32error.zig	/CIRCULAR_DEPENDENCY = 1059/;"	field
CIntLiteralRadix	$ZIGLIB/std/zig/c_translation.zig	/^pub const CIntLiteralRadix = enum { decimal, octal, hexadecimal }/;"	enum
CKPT	$ZIGLIB/std/c/dragonfly.zig	/pub const CKPT = 33/;"	constant
CKPTEXIT	$ZIGLIB/std/c/dragonfly.zig	/pub const CKPTEXIT = 34/;"	constant
CLANG	$ZIGLIB/std/macho.zig	/CLANG = 0x1/;"	field
CLASS	$ZIGLIB/std/c/openbsd.zig	/pub const CLASS: auth_item_t = 2/;"	constant
CLASS_ALREADY_EXISTS	$ZIGLIB/std/os/windows/win32error.zig	/CLASS_ALREADY_EXISTS = 1410/;"	field
CLASS_DOES_NOT_EXIST	$ZIGLIB/std/os/windows/win32error.zig	/CLASS_DOES_NOT_EXIST = 1411/;"	field
CLASS_HAS_WINDOWS	$ZIGLIB/std/os/windows/win32error.zig	/CLASS_HAS_WINDOWS = 1412/;"	field
CLEANER_CARTRIDGE_INSTALLED	$ZIGLIB/std/os/windows/ntstatus.zig	/CLEANER_CARTRIDGE_INSTALLED = 0x80000027/;"	field
CLEAR_SIGHAND	$ZIGLIB/std/os/linux.zig	/pub const CLEAR_SIGHAND = 0x100000000/;"	constant
CLIENT_ID	$ZIGLIB/std/os/windows.zig	/^pub const CLIENT_ID = extern struct {$/;"	struct
CLIENT_SERVER_PARAMETERS_INVALID	$ZIGLIB/std/os/windows/win32error.zig	/CLIENT_SERVER_PARAMETERS_INVALID = 597/;"	field
CLIPBOARD_NOT_OPEN	$ZIGLIB/std/os/windows/win32error.zig	/CLIPBOARD_NOT_OPEN = 1418/;"	field
CLIPPING_NOT_SUPPORTED	$ZIGLIB/std/os/windows/win32error.zig	/CLIPPING_NOT_SUPPORTED = 2005/;"	field
CLIP_NOT	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const CLIP_NOT = 0/;"	constant
CLIP_SUS	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const CLIP_SUS = 32/;"	constant
CLOCAL	$ZIGLIB/std/os/linux.zig	/^pub const CLOCAL: tcflag_t = 2048/;"	constant
CLOCK	$ZIGLIB/std/os/wasi.zig	/^pub const CLOCK = struct {$/;"	struct
CLOCKRATE	$ZIGLIB/std/c/openbsd.zig	/pub const CLOCKRATE = 12/;"	constant
CLOCK_REALTIME	$ZIGLIB/std/os/linux.zig	/pub const CLOCK_REALTIME = 256/;"	constant
CLOEXEC	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const CLOEXEC = 0x10000/;"	constant
CLONE	$ZIGLIB/std/os/linux.zig	/^pub const CLONE = struct {$/;"	struct
CLOSE	$ZIGLIB/std/os/plan9.zig	/CLOSE = 4/;"	field
CLOSEM	$ZIGLIB/std/c/netbsd.zig	/pub const CLOSEM = 10/;"	constant
CLOSE_NOWRITE	$ZIGLIB/std/os/linux.zig	/pub const CLOSE_NOWRITE = 0x00000010/;"	constant
CLOSE_WRITE	$ZIGLIB/std/os/linux.zig	/pub const CLOSE_WRITE = 0x00000008/;"	constant
CLOUDSHIELD	$ZIGLIB/std/elf.zig	/CLOUDSHIELD = 192/;"	field
CLR_TOKEN	$ZIGLIB/std/coff.zig	/CLR_TOKEN = 107/;"	field
CLUSTER	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const CLUSTER = 24/;"	constant
CLUSTER_INVALID_NETWORK	$ZIGLIB/std/os/windows/ntstatus.zig	/CLUSTER_INVALID_NETWORK = 0xC0130010/;"	field
CLUSTER_INVALID_NETWORK_PROVIDER	$ZIGLIB/std/os/windows/ntstatus.zig	/CLUSTER_INVALID_NETWORK_PROVIDER = 0xC013000B/;"	field
CLUSTER_INVALID_NODE	$ZIGLIB/std/os/windows/ntstatus.zig	/CLUSTER_INVALID_NODE = 0xC0130001/;"	field
CLUSTER_INVALID_REQUEST	$ZIGLIB/std/os/windows/ntstatus.zig	/CLUSTER_INVALID_REQUEST = 0xC013000A/;"	field
CLUSTER_JOIN_IN_PROGRESS	$ZIGLIB/std/os/windows/ntstatus.zig	/CLUSTER_JOIN_IN_PROGRESS = 0xC0130003/;"	field
CLUSTER_JOIN_NOT_IN_PROGRESS	$ZIGLIB/std/os/windows/ntstatus.zig	/CLUSTER_JOIN_NOT_IN_PROGRESS = 0xC013000F/;"	field
CLUSTER_LOCAL_NODE_NOT_FOUND	$ZIGLIB/std/os/windows/ntstatus.zig	/CLUSTER_LOCAL_NODE_NOT_FOUND = 0xC0130005/;"	field
CLUSTER_NETINTERFACE_EXISTS	$ZIGLIB/std/os/windows/ntstatus.zig	/CLUSTER_NETINTERFACE_EXISTS = 0xC0130008/;"	field
CLUSTER_NETINTERFACE_NOT_FOUND	$ZIGLIB/std/os/windows/ntstatus.zig	/CLUSTER_NETINTERFACE_NOT_FOUND = 0xC0130009/;"	field
CLUSTER_NETWORK_ALREADY_OFFLINE	$ZIGLIB/std/os/windows/ntstatus.zig	/CLUSTER_NETWORK_ALREADY_OFFLINE = 0x80130004/;"	field
CLUSTER_NETWORK_ALREADY_ONLINE	$ZIGLIB/std/os/windows/ntstatus.zig	/CLUSTER_NETWORK_ALREADY_ONLINE = 0x80130003/;"	field
CLUSTER_NETWORK_EXISTS	$ZIGLIB/std/os/windows/ntstatus.zig	/CLUSTER_NETWORK_EXISTS = 0xC0130006/;"	field
CLUSTER_NETWORK_NOT_FOUND	$ZIGLIB/std/os/windows/ntstatus.zig	/CLUSTER_NETWORK_NOT_FOUND = 0xC0130007/;"	field
CLUSTER_NETWORK_NOT_INTERNAL	$ZIGLIB/std/os/windows/ntstatus.zig	/CLUSTER_NETWORK_NOT_INTERNAL = 0xC0130016/;"	field
CLUSTER_NODE_ALREADY_DOWN	$ZIGLIB/std/os/windows/ntstatus.zig	/CLUSTER_NODE_ALREADY_DOWN = 0x80130002/;"	field
CLUSTER_NODE_ALREADY_MEMBER	$ZIGLIB/std/os/windows/ntstatus.zig	/CLUSTER_NODE_ALREADY_MEMBER = 0x80130005/;"	field
CLUSTER_NODE_ALREADY_UP	$ZIGLIB/std/os/windows/ntstatus.zig	/CLUSTER_NODE_ALREADY_UP = 0x80130001/;"	field
CLUSTER_NODE_DOWN	$ZIGLIB/std/os/windows/ntstatus.zig	/CLUSTER_NODE_DOWN = 0xC013000C/;"	field
CLUSTER_NODE_EXISTS	$ZIGLIB/std/os/windows/ntstatus.zig	/CLUSTER_NODE_EXISTS = 0xC0130002/;"	field
CLUSTER_NODE_NOT_FOUND	$ZIGLIB/std/os/windows/ntstatus.zig	/CLUSTER_NODE_NOT_FOUND = 0xC0130004/;"	field
CLUSTER_NODE_NOT_MEMBER	$ZIGLIB/std/os/windows/ntstatus.zig	/CLUSTER_NODE_NOT_MEMBER = 0xC013000E/;"	field
CLUSTER_NODE_NOT_PAUSED	$ZIGLIB/std/os/windows/ntstatus.zig	/CLUSTER_NODE_NOT_PAUSED = 0xC0130014/;"	field
CLUSTER_NODE_PAUSED	$ZIGLIB/std/os/windows/ntstatus.zig	/CLUSTER_NODE_PAUSED = 0xC0130013/;"	field
CLUSTER_NODE_UNREACHABLE	$ZIGLIB/std/os/windows/ntstatus.zig	/CLUSTER_NODE_UNREACHABLE = 0xC013000D/;"	field
CLUSTER_NODE_UP	$ZIGLIB/std/os/windows/ntstatus.zig	/CLUSTER_NODE_UP = 0xC0130012/;"	field
CLUSTER_NO_NET_ADAPTERS	$ZIGLIB/std/os/windows/ntstatus.zig	/CLUSTER_NO_NET_ADAPTERS = 0xC0130011/;"	field
CLUSTER_NO_SECURITY_CONTEXT	$ZIGLIB/std/os/windows/ntstatus.zig	/CLUSTER_NO_SECURITY_CONTEXT = 0xC0130015/;"	field
CLUSTER_POISONED	$ZIGLIB/std/os/windows/ntstatus.zig	/CLUSTER_POISONED = 0xC0130017/;"	field
CMP_REQUEUE	$ZIGLIB/std/os/linux.zig	/pub const CMP_REQUEUE = 4/;"	constant
CMP_REQUEUE_PI	$ZIGLIB/std/os/linux.zig	/pub const CMP_REQUEUE_PI = 12/;"	constant
CMSG_CLOEXEC	$ZIGLIB/std/os/linux.zig	/pub const CMSG_CLOEXEC = 0x40000000/;"	constant
CMTP	$ZIGLIB/std/c/freebsd.zig	/pub const CMTP = 38/;"	constant
CM_INQ	$ZIGLIB/std/os/linux.zig	/pub const CM_INQ = INQ/;"	constant
CNAME	$ZIGLIB/std/os/linux.zig	/pub const CNAME = 5/;"	constant
CNT_CODE	$ZIGLIB/std/coff.zig	/CNT_CODE: u1 = 0/;"	field
CNT_INITIALIZED_DATA	$ZIGLIB/std/coff.zig	/CNT_INITIALIZED_DATA: u1 = 0/;"	field
CNT_UNINITIALIZED_DATA	$ZIGLIB/std/coff.zig	/CNT_UNINITIALIZED_DATA: u1 = 0/;"	field
CNX_ADVICE	$ZIGLIB/std/os/linux.zig	/pub const CNX_ADVICE = 55/;"	constant
CODESIGN_ERROR	$ZIGLIB/std/c/darwin.zig	/CODESIGN_ERROR = 50/;"	field
CODEVIEW	$ZIGLIB/std/coff.zig	/CODEVIEW = 2/;"	field
CODE_SIGNATURE	$ZIGLIB/std/macho.zig	/CODE_SIGNATURE = 0x1d/;"	field
COFF	$ZIGLIB/std/coff.zig	/COFF = 1/;"	field
COGE	$ZIGLIB/std/elf.zig	/COGE = 216/;"	field
COINIT	$ZIGLIB/std/os/windows.zig	/^pub const COINIT = enum(c_int) {$/;"	enum
COINIT_APARTMENTTHREADED	$ZIGLIB/std/os/windows.zig	/COINIT_APARTMENTTHREADED = 2/;"	field
COINIT_DISABLE_OLE1DDE	$ZIGLIB/std/os/windows.zig	/COINIT_DISABLE_OLE1DDE = 4/;"	field
COINIT_MULTITHREADED	$ZIGLIB/std/os/windows.zig	/COINIT_MULTITHREADED = 0/;"	field
COINIT_SPEED_OVER_MEMORY	$ZIGLIB/std/os/windows.zig	/COINIT_SPEED_OVER_MEMORY = 8/;"	field
COIP	$ZIGLIB/std/c/netbsd.zig	/pub const COIP = 20/;"	constant
COLD	$ZIGLIB/std/os/linux.zig	/pub const COLD = 20/;"	constant
COLDFIRE	$ZIGLIB/std/elf.zig	/COLDFIRE = 52/;"	field
COLORSPACE_MISMATCH	$ZIGLIB/std/os/windows/win32error.zig	/COLORSPACE_MISMATCH = 2021/;"	field
COMM	$ZIGLIB/std/os/linux/errno/sparc.zig	/COMM = 85/;"	field
COMMITMENT_LIMIT	$ZIGLIB/std/os/windows/win32error.zig	/COMMITMENT_LIMIT = 1455/;"	field
COMMITMENT_MINIMUM	$ZIGLIB/std/os/windows/win32error.zig	/COMMITMENT_MINIMUM = 635/;"	field
COMMPAGE	$ZIGLIB/std/c/solaris.zig	/pub const COMMPAGE = 2026/;"	constant
COMP	$ZIGLIB/std/os/linux.zig	/pub const COMP = 108/;"	constant
COMPARE64_EXCHANGE128	$ZIGLIB/std/os/windows.zig	/COMPARE64_EXCHANGE128 = 15/;"	field
COMPARE_EXCHANGE128	$ZIGLIB/std/os/windows.zig	/COMPARE_EXCHANGE128 = 14/;"	field
COMPARE_EXCHANGE_DOUBLE	$ZIGLIB/std/os/windows.zig	/COMPARE_EXCHANGE_DOUBLE = 2/;"	field
COMPARTMENT_ID	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const COMPARTMENT_ID = 12292/;"	constant
COMPRESSED	$ZIGLIB/std/macho.zig	/COMPRESSED = 3/;"	field
COMPRESSED_FILE_NOT_SUPPORTED	$ZIGLIB/std/os/windows/win32error.zig	/COMPRESSED_FILE_NOT_SUPPORTED = 335/;"	field
COMPRESSION_DISABLED	$ZIGLIB/std/os/windows/win32error.zig	/COMPRESSION_DISABLED = 769/;"	field
COMPRESSION_NOT_ALLOWED_IN_TRANSACTION	$ZIGLIB/std/os/windows/ntstatus.zig	/COMPRESSION_NOT_ALLOWED_IN_TRANSACTION = 0xC0190056/;"	field
COM_DESCRIPTOR	$ZIGLIB/std/coff.zig	/COM_DESCRIPTOR = 14/;"	field
CONCEAL	$ZIGLIB/std/c/openbsd.zig	/pub const CONCEAL = 0x8000/;"	constant
COND	$ZIGLIB/std/os/linux.zig	/pub const COND = 1 << 10/;"	constant
CONDITIONAL_ACCEPT	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const CONDITIONAL_ACCEPT = 12290/;"	constant
CONDITION_VARIABLE	$ZIGLIB/std/os/windows.zig	/^pub const CONDITION_VARIABLE = extern struct {$/;"	struct
CONDITION_VARIABLE_INIT	$ZIGLIB/std/os/windows.zig	/^pub const CONDITION_VARIABLE_INIT = CONDITION_VARIABLE{}/;"	constant
CONFGEN	$ZIGLIB/std/c/solaris.zig	/pub const CONFGEN = 0x10000/;"	constant
CONFIRM	$ZIGLIB/std/os/linux.zig	/pub const CONFIRM = 0x0800/;"	constant
CONFLICTING_ADDRESSES	$ZIGLIB/std/os/windows/ntstatus.zig	/CONFLICTING_ADDRESSES = 0xC0000018/;"	field
CONGESTION	$ZIGLIB/std/os/linux.zig	/pub const CONGESTION = 13/;"	constant
CONGESTION_ALGORITHM	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const CONGESTION_ALGORITHM = 12/;"	constant
CONNABORTED	$ZIGLIB/std/os/wasi.zig	/CONNABORTED = 13/;"	field
CONNDATA	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const CONNDATA = 28672/;"	constant
CONNDATALEN	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const CONNDATALEN = 28676/;"	constant
CONNECT	$ZIGLIB/std/os/linux.zig	/CONNECT/;"	field
CONNECTED_OTHER_PASSWORD	$ZIGLIB/std/os/windows/win32error.zig	/CONNECTED_OTHER_PASSWORD = 2108/;"	field
CONNECTED_OTHER_PASSWORD_DEFAULT	$ZIGLIB/std/os/windows/win32error.zig	/CONNECTED_OTHER_PASSWORD_DEFAULT = 2109/;"	field
CONNECTION_ABORTED	$ZIGLIB/std/os/windows/win32error.zig	/CONNECTION_ABORTED = 1236/;"	field
CONNECTION_ACTIVE	$ZIGLIB/std/os/windows/win32error.zig	/CONNECTION_ACTIVE = 1230/;"	field
CONNECTION_COUNT_LIMIT	$ZIGLIB/std/os/windows/win32error.zig	/CONNECTION_COUNT_LIMIT = 1238/;"	field
CONNECTION_DISCONNECTED	$ZIGLIB/std/os/windows/ntstatus.zig	/CONNECTION_DISCONNECTED = 0xC000020C/;"	field
CONNECTION_INVALID	$ZIGLIB/std/os/windows/win32error.zig	/CONNECTION_INVALID = 1229/;"	field
CONNECTION_IN_USE	$ZIGLIB/std/os/windows/ntstatus.zig	/CONNECTION_IN_USE = 0xC0000108/;"	field
CONNECTION_REFUSED	$ZIGLIB/std/os/windows/win32error.zig	/CONNECTION_REFUSED = 1225/;"	field
CONNECTION_RESET	$ZIGLIB/std/os/windows/ntstatus.zig	/CONNECTION_RESET = 0xC000020D/;"	field
CONNECTION_UNAVAIL	$ZIGLIB/std/os/windows/win32error.zig	/CONNECTION_UNAVAIL = 1201/;"	field
CONNECTOR	$ZIGLIB/std/os/linux.zig	/pub const CONNECTOR = 11/;"	constant
CONNECT_TIME	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const CONNECT_TIME = 28684/;"	constant
CONNOPT	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const CONNOPT = 28673/;"	constant
CONNOPTLEN	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const CONNOPTLEN = 28677/;"	constant
CONNREFUSED	$ZIGLIB/std/os/wasi.zig	/CONNREFUSED = 14/;"	field
CONNRESET	$ZIGLIB/std/os/wasi.zig	/CONNRESET = 15/;"	field
CONN_DGRAM	$ZIGLIB/std/c/netbsd.zig	/pub const CONN_DGRAM = 6/;"	constant
CONSBUF	$ZIGLIB/std/c/openbsd.zig	/pub const CONSBUF = 83/;"	constant
CONSBUFSIZE	$ZIGLIB/std/c/openbsd.zig	/pub const CONSBUFSIZE = 82/;"	constant
CONSDEV	$ZIGLIB/std/c/openbsd.zig	/pub const CONSDEV = 75/;"	constant
CONSOLE_SCREEN_BUFFER_INFO	$ZIGLIB/std/os/windows.zig	/^pub const CONSOLE_SCREEN_BUFFER_INFO = extern struct {$/;"	struct
CONT	$ZIGLIB/std/os/linux.zig	/pub const CONT = 19/;"	constant
CONTENT_BLOCKED	$ZIGLIB/std/os/windows/win32error.zig	/CONTENT_BLOCKED = 1296/;"	field
CONTEXT	$ZIGLIB/std/os/windows.zig	/pub const CONTEXT = extern struct {$/;"	struct
CONTEXT_EXPIRED	$ZIGLIB/std/os/windows/win32error.zig	/CONTEXT_EXPIRED = 1931/;"	field
CONTEXT_MISMATCH	$ZIGLIB/std/os/windows/ntstatus.zig	/CONTEXT_MISMATCH = 0xC0000719/;"	field
CONTEXT_SWITCHES	$ZIGLIB/std/os/linux.zig	/CONTEXT_SWITCHES/;"	field
CONTINUE	$ZIGLIB/std/os/windows/win32error.zig	/CONTINUE = 1246/;"	field
CONTINUED	$ZIGLIB/std/os/linux.zig	/pub const CONTINUED = 8/;"	constant
CONTRACT	$ZIGLIB/std/c/solaris.zig	/CONTRACT = 9/;"	field
CONTROL_C_EXIT	$ZIGLIB/std/os/windows/win32error.zig	/CONTROL_C_EXIT = 572/;"	field
CONTROL_END	$ZIGLIB/std/c/dragonfly.zig	/pub const CONTROL_END = SETMAP/;"	constant
CONTROL_ID_NOT_FOUND	$ZIGLIB/std/os/windows/win32error.zig	/CONTROL_ID_NOT_FOUND = 1421/;"	field
CONTROL_START	$ZIGLIB/std/c/dragonfly.zig	/pub const CONTROL_START = INVAL/;"	constant
CONVERT_TO_LARGE	$ZIGLIB/std/os/windows/win32error.zig	/CONVERT_TO_LARGE = 600/;"	field
COOKIE	$ZIGLIB/std/os/linux.zig	/pub const COOKIE = 59/;"	constant
COOL	$ZIGLIB/std/elf.zig	/COOL = 217/;"	field
COORD	$ZIGLIB/std/os/windows.zig	/^pub const COORD = extern struct {$/;"	struct
COPY	$ZIGLIB/std/os/linux.zig	/pub const COPY = (1 << 1)/;"	constant
COPYFILE_ACL	$ZIGLIB/std/c/darwin.zig	/^pub const COPYFILE_ACL = 1 << 0/;"	constant
COPYFILE_DATA	$ZIGLIB/std/c/darwin.zig	/^pub const COPYFILE_DATA = 1 << 3/;"	constant
COPYFILE_STAT	$ZIGLIB/std/c/darwin.zig	/^pub const COPYFILE_STAT = 1 << 1/;"	constant
COPYFILE_XATTR	$ZIGLIB/std/c/darwin.zig	/^pub const COPYFILE_XATTR = 1 << 2/;"	constant
COPY_PROTECTION_FAILURE	$ZIGLIB/std/os/windows/ntstatus.zig	/COPY_PROTECTION_FAILURE = 0xC0000305/;"	field
COPY_RECEIVE	$ZIGLIB/std/c/darwin.zig	/COPY_RECEIVE = 22/;"	field
COPY_SEND	$ZIGLIB/std/c/darwin.zig	/COPY_SEND = 19/;"	field
CORE	$ZIGLIB/std/os/linux/sparc64.zig	/CORE/;"	field
COREA_1ST	$ZIGLIB/std/elf.zig	/COREA_1ST = 193/;"	field
COREA_2ND	$ZIGLIB/std/elf.zig	/COREA_2ND = 194/;"	field
CORE_DRIVER_PACKAGE_NOT_FOUND	$ZIGLIB/std/os/windows/win32error.zig	/CORE_DRIVER_PACKAGE_NOT_FOUND = 3016/;"	field
CORK	$ZIGLIB/std/os/linux.zig	/pub const CORK = 3/;"	constant
CORPSE_NOTIFY	$ZIGLIB/std/c/darwin.zig	/CORPSE_NOTIFY = 13/;"	field
CORRUPT_LOG_CLEARED	$ZIGLIB/std/os/windows/win32error.zig	/CORRUPT_LOG_CLEARED = 798/;"	field
CORRUPT_LOG_CORRUPTED	$ZIGLIB/std/os/windows/win32error.zig	/CORRUPT_LOG_CORRUPTED = 795/;"	field
CORRUPT_LOG_DELETED_FULL	$ZIGLIB/std/os/windows/win32error.zig	/CORRUPT_LOG_DELETED_FULL = 797/;"	field
CORRUPT_LOG_OVERFULL	$ZIGLIB/std/os/windows/win32error.zig	/CORRUPT_LOG_OVERFULL = 794/;"	field
CORRUPT_LOG_UNAVAILABLE	$ZIGLIB/std/os/windows/win32error.zig	/CORRUPT_LOG_UNAVAILABLE = 796/;"	field
CORRUPT_SYSTEM_FILE	$ZIGLIB/std/os/windows/win32error.zig	/CORRUPT_SYSTEM_FILE = 634/;"	field
CORSICAN	$ZIGLIB/std/os/windows/lang.zig	/^pub const CORSICAN = 0x83/;"	constant
CORSICAN_FRANCE	$ZIGLIB/std/os/windows/sublang.zig	/^pub const CORSICAN_FRANCE = 0x01/;"	constant
COST	$ZIGLIB/std/os/linux.zig	/COST/;"	field
COULD_NOT_INTERPRET	$ZIGLIB/std/os/windows/win32error.zig	/COULD_NOT_INTERPRET = 552/;"	field
COULD_NOT_RESIZE_LOG	$ZIGLIB/std/os/windows/ntstatus.zig	/COULD_NOT_RESIZE_LOG = 0x80190009/;"	field
COUNT	$ZIGLIB/std/os/linux.zig	/pub const COUNT = struct {$/;"	struct
COUNTER_TIMEOUT	$ZIGLIB/std/os/windows/win32error.zig	/COUNTER_TIMEOUT = 1121/;"	field
CPDQ	$ZIGLIB/std/priority_dequeue.zig	/^const CPDQ = PriorityDequeue(usize, []const u32, contextLessThanComparison)/;"	constant
CPHB	$ZIGLIB/std/c/freebsd.zig	/pub const CPHB = 73/;"	constant
CPNX	$ZIGLIB/std/c/freebsd.zig	/pub const CPNX = 72/;"	constant
CPQlt	$ZIGLIB/std/priority_queue.zig	/^const CPQlt = PriorityQueue(usize, []const u32, contextLessThan)/;"	constant
CPTIME	$ZIGLIB/std/c/openbsd.zig	/pub const CPTIME = 40/;"	constant
CPTIME2	$ZIGLIB/std/c/openbsd.zig	/pub const CPTIME2 = 71/;"	constant
CPUFAMILY	$ZIGLIB/std/c/darwin.zig	/^pub const CPUFAMILY = enum(u32) {$/;"	enum
CPUHINT	$ZIGLIB/std/c/dragonfly.zig	/pub const CPUHINT = 0x1030/;"	constant
CPUSTATS	$ZIGLIB/std/c/openbsd.zig	/pub const CPUSTATS = 85/;"	constant
CPU_CLOCK	$ZIGLIB/std/os/linux.zig	/CPU_CLOCK/;"	field
CPU_COUNT	$ZIGLIB/std/os/linux.zig	/^pub fn CPU_COUNT(set: cpu_set_t) cpu_count_t {$/;"	function
CPU_CYCLES	$ZIGLIB/std/os/linux.zig	/CPU_CYCLES/;"	field
CPU_MIGRATIONS	$ZIGLIB/std/os/linux.zig	/CPU_MIGRATIONS/;"	field
CPU_SETSIZE	$ZIGLIB/std/os/linux.zig	/^pub const CPU_SETSIZE = 128/;"	constant
CPU_SUBTYPE_ARM_ALL	$ZIGLIB/std/macho.zig	/^pub const CPU_SUBTYPE_ARM_ALL: cpu_subtype_t = 0x0/;"	constant
CPU_SUBTYPE_X86_64_ALL	$ZIGLIB/std/macho.zig	/^pub const CPU_SUBTYPE_X86_64_ALL: cpu_subtype_t = 0x3/;"	constant
CPU_TYPE_ARM64	$ZIGLIB/std/macho.zig	/^pub const CPU_TYPE_ARM64: cpu_type_t = 0x0100000C/;"	constant
CPU_TYPE_X86_64	$ZIGLIB/std/macho.zig	/^pub const CPU_TYPE_X86_64: cpu_type_t = 0x01000007/;"	constant
CQE_SKIP_SUCCESS	$ZIGLIB/std/os/linux.zig	/CQE_SKIP_SUCCESS/;"	field
CQUERYCONNECTED	$ZIGLIB/std/c/haiku.zig	/pub const CQUERYCONNECTED = 0x8008/;"	constant
CR16	$ZIGLIB/std/elf.zig	/CR16 = 177/;"	field
CRASH	$ZIGLIB/std/c/darwin.zig	/CRASH = 10/;"	field
CRASH_DUMP	$ZIGLIB/std/os/windows/win32error.zig	/CRASH_DUMP = 753/;"	field
CRAYNV2	$ZIGLIB/std/elf.zig	/CRAYNV2 = 172/;"	field
CRC_ERROR	$ZIGLIB/std/os/windows/ntstatus.zig	/CRC_ERROR = 0xC000003F/;"	field
CRDLY	$ZIGLIB/std/c/darwin.zig	/^pub const CRDLY: tcflag_t = 0x00003000/;"	constant
CREAD	$ZIGLIB/std/os/linux.zig	/^pub const CREAD: tcflag_t = 128/;"	constant
CREAT	$ZIGLIB/std/os/wasi.zig	/pub const CREAT: oflags_t = 0x0001/;"	constant
CREATE	$ZIGLIB/std/os/plan9.zig	/CREATE = 22/;"	field
CREATE_ALWAYS	$ZIGLIB/std/os/windows.zig	/^pub const CREATE_ALWAYS = 2/;"	constant
CREATE_EVENT_INITIAL_SET	$ZIGLIB/std/os/windows.zig	/^pub const CREATE_EVENT_INITIAL_SET = 0x00000002/;"	constant
CREATE_EVENT_MANUAL_RESET	$ZIGLIB/std/os/windows.zig	/^pub const CREATE_EVENT_MANUAL_RESET = 0x00000001/;"	constant
CREATE_FAILED	$ZIGLIB/std/os/windows/win32error.zig	/CREATE_FAILED = 1631/;"	field
CREATE_NEW	$ZIGLIB/std/os/windows.zig	/^pub const CREATE_NEW = 1/;"	constant
CREATE_UNICODE_ENVIRONMENT	$ZIGLIB/std/os/windows.zig	/^pub const CREATE_UNICODE_ENVIRONMENT = 1024/;"	constant
CRED_REQUIRES_CONFIRMATION	$ZIGLIB/std/os/windows/ntstatus.zig	/CRED_REQUIRES_CONFIRMATION = 0xC0000440/;"	field
CRIS	$ZIGLIB/std/elf.zig	/CRIS = 76/;"	field
CRIT	$ZIGLIB/std/os.zig	/pub const CRIT = 2/;"	constant
CRITICAL_SECTION	$ZIGLIB/std/os/windows.zig	/^pub const CRITICAL_SECTION = RTL_CRITICAL_SECTION/;"	constant
CRM_PROTOCOL_ALREADY_EXISTS	$ZIGLIB/std/os/windows/ntstatus.zig	/CRM_PROTOCOL_ALREADY_EXISTS = 0xC019000F/;"	field
CRM_PROTOCOL_NOT_FOUND	$ZIGLIB/std/os/windows/ntstatus.zig	/CRM_PROTOCOL_NOT_FOUND = 0xC0190011/;"	field
CROATIAN	$ZIGLIB/std/os/windows/lang.zig	/^pub const CROATIAN = 0x1a/;"	constant
CROATIAN_BOSNIA_HERZEGOVINA_LATIN	$ZIGLIB/std/os/windows/sublang.zig	/^pub const CROATIAN_BOSNIA_HERZEGOVINA_LATIN = 0x04/;"	constant
CROATIAN_CROATIA	$ZIGLIB/std/os/windows/sublang.zig	/^pub const CROATIAN_CROATIA = 0x01/;"	constant
CROSSREALM_DELEGATION_FAILURE	$ZIGLIB/std/os/windows/ntstatus.zig	/CROSSREALM_DELEGATION_FAILURE = 0xC000040B/;"	field
CRTSCTS	$ZIGLIB/std/c/openbsd.zig	/^pub const CRTSCTS: tcflag_t = 0x00010000/;"	constant
CRTS_IFLOW	$ZIGLIB/std/c/openbsd.zig	/^pub const CRTS_IFLOW: tcflag_t = CRTSCTS/;"	constant
CRUNCH	$ZIGLIB/std/os/linux/arm-eabi.zig	/pub const CRUNCH = 1 << 10/;"	constant
CRYPTO	$ZIGLIB/std/os/linux.zig	/pub const CRYPTO = 21/;"	constant
CRYPTO_SYSTEM_INVALID	$ZIGLIB/std/os/windows/ntstatus.zig	/CRYPTO_SYSTEM_INVALID = 0xC00002F3/;"	field
CSADRAIN	$ZIGLIB/std/c/solaris.zig	/pub const CSADRAIN = tioc('T', 15)/;"	constant
CSANOW	$ZIGLIB/std/c/solaris.zig	/pub const CSANOW = tioc('T', 14)/;"	constant
CSBRK	$ZIGLIB/std/os/linux.zig	/pub const CSBRK = if (is_mips) 0x5405 else 0x5409/;"	constant
CSBRKP	$ZIGLIB/std/os/linux.zig	/pub const CSBRKP = if (is_mips) 0x5486 else 0x5425/;"	constant
CSCSHARE_OFFLINE	$ZIGLIB/std/os/windows/win32error.zig	/CSCSHARE_OFFLINE = 1262/;"	field
CSDVersion	$ZIGLIB/std/os/windows.zig	/CSDVersion: UNICODE_STRING/;"	field
CSETA	$ZIGLIB/std/os/linux.zig	/pub const CSETA = if (is_mips) 0x5402 else 0x5406/;"	constant
CSETAF	$ZIGLIB/std/os/linux.zig	/pub const CSETAF = if (is_mips) 0x5404 else 0x5408/;"	constant
CSETAW	$ZIGLIB/std/os/linux.zig	/pub const CSETAW = if (is_mips) 0x5403 else 0x5407/;"	constant
CSETDTR	$ZIGLIB/std/c/haiku.zig	/pub const CSETDTR = 0x8010/;"	constant
CSETRTS	$ZIGLIB/std/c/haiku.zig	/pub const CSETRTS = 0x8011/;"	constant
CSETS	$ZIGLIB/std/os/linux.zig	/pub const CSETS = if (is_mips) 0x540e else 0x5402/;"	constant
CSETSF	$ZIGLIB/std/os/linux.zig	/pub const CSETSF = if (is_mips) 0x5410 else 0x5404/;"	constant
CSETSW	$ZIGLIB/std/os/linux.zig	/pub const CSETSW = if (is_mips) 0x540f else 0x5403/;"	constant
CSETX	$ZIGLIB/std/os/linux.zig	/pub const CSETX = 0x5433/;"	constant
CSETXF	$ZIGLIB/std/os/linux.zig	/pub const CSETXF = 0x5434/;"	constant
CSETXW	$ZIGLIB/std/os/linux.zig	/pub const CSETXW = 0x5435/;"	constant
CSGSFS	$ZIGLIB/std/os/linux/x86_64.zig	/pub const CSGSFS = 18/;"	constant
CSIGNAL	$ZIGLIB/std/os/linux.zig	/^pub const CSIGNAL = 0x000000ff/;"	constant
CSIZE	$ZIGLIB/std/os/linux.zig	/^pub const CSIZE: tcflag_t = 48/;"	constant
CSKY	$ZIGLIB/std/os/linux.zig	/CSKY = toAudit(.csky)/;"	field
CSMAGIC_BLOBWRAPPER	$ZIGLIB/std/macho.zig	/^pub const CSMAGIC_BLOBWRAPPER: u32 = 0xfade0b01/;"	constant
CSMAGIC_CODEDIRECTORY	$ZIGLIB/std/macho.zig	/^pub const CSMAGIC_CODEDIRECTORY: u32 = 0xfade0c02/;"	constant
CSMAGIC_DETACHED_SIGNATURE	$ZIGLIB/std/macho.zig	/^pub const CSMAGIC_DETACHED_SIGNATURE: u32 = 0xfade0cc1/;"	constant
CSMAGIC_EMBEDDED_DER_ENTITLEMENTS	$ZIGLIB/std/macho.zig	/^pub const CSMAGIC_EMBEDDED_DER_ENTITLEMENTS: u32 = 0xfade7172/;"	constant
CSMAGIC_EMBEDDED_ENTITLEMENTS	$ZIGLIB/std/macho.zig	/^pub const CSMAGIC_EMBEDDED_ENTITLEMENTS: u32 = 0xfade7171/;"	constant
CSMAGIC_EMBEDDED_SIGNATURE	$ZIGLIB/std/macho.zig	/^pub const CSMAGIC_EMBEDDED_SIGNATURE: u32 = 0xfade0cc0/;"	constant
CSMAGIC_EMBEDDED_SIGNATURE_OLD	$ZIGLIB/std/macho.zig	/^pub const CSMAGIC_EMBEDDED_SIGNATURE_OLD: u32 = 0xfade0b02/;"	constant
CSMAGIC_REQUIREMENT	$ZIGLIB/std/macho.zig	/^pub const CSMAGIC_REQUIREMENT: u32 = 0xfade0c00/;"	constant
CSMAGIC_REQUIREMENTS	$ZIGLIB/std/macho.zig	/^pub const CSMAGIC_REQUIREMENTS: u32 = 0xfade0c01/;"	constant
CSR_KALIMBA	$ZIGLIB/std/elf.zig	/CSR_KALIMBA = 219/;"	field
CSSLOT_ALTERNATE_CODEDIRECTORIES	$ZIGLIB/std/macho.zig	/^pub const CSSLOT_ALTERNATE_CODEDIRECTORIES: u32 = 0x1000/;"	constant
CSSLOT_ALTERNATE_CODEDIRECTORY_LIMIT	$ZIGLIB/std/macho.zig	/^pub const CSSLOT_ALTERNATE_CODEDIRECTORY_LIMIT: u32 = CSSLOT_ALTERNATE_CODEDIRECTORIES + CSSLOT_ALTERNATE_CODEDIRECTORY_MAX/;"	constant
CSSLOT_ALTERNATE_CODEDIRECTORY_MAX	$ZIGLIB/std/macho.zig	/^pub const CSSLOT_ALTERNATE_CODEDIRECTORY_MAX: u32 = 5/;"	constant
CSSLOT_APPLICATION	$ZIGLIB/std/macho.zig	/^pub const CSSLOT_APPLICATION: u32 = 4/;"	constant
CSSLOT_CODEDIRECTORY	$ZIGLIB/std/macho.zig	/^pub const CSSLOT_CODEDIRECTORY: u32 = 0/;"	constant
CSSLOT_DER_ENTITLEMENTS	$ZIGLIB/std/macho.zig	/^pub const CSSLOT_DER_ENTITLEMENTS: u32 = 7/;"	constant
CSSLOT_ENTITLEMENTS	$ZIGLIB/std/macho.zig	/^pub const CSSLOT_ENTITLEMENTS: u32 = 5/;"	constant
CSSLOT_IDENTIFICATIONSLOT	$ZIGLIB/std/macho.zig	/^pub const CSSLOT_IDENTIFICATIONSLOT: u32 = 0x10001/;"	constant
CSSLOT_INFOSLOT	$ZIGLIB/std/macho.zig	/^pub const CSSLOT_INFOSLOT: u32 = 1/;"	constant
CSSLOT_REQUIREMENTS	$ZIGLIB/std/macho.zig	/^pub const CSSLOT_REQUIREMENTS: u32 = 2/;"	constant
CSSLOT_RESOURCEDIR	$ZIGLIB/std/macho.zig	/^pub const CSSLOT_RESOURCEDIR: u32 = 3/;"	constant
CSSLOT_SIGNATURESLOT	$ZIGLIB/std/macho.zig	/^pub const CSSLOT_SIGNATURESLOT: u32 = 0x10000/;"	constant
CSSLOT_TICKETSLOT	$ZIGLIB/std/macho.zig	/^pub const CSSLOT_TICKETSLOT: u32 = 0x10002/;"	constant
CSS_AUTHENTICATION_FAILURE	$ZIGLIB/std/os/windows/ntstatus.zig	/CSS_AUTHENTICATION_FAILURE = 0xC0000306/;"	field
CSS_KEY_NOT_ESTABLISHED	$ZIGLIB/std/os/windows/ntstatus.zig	/CSS_KEY_NOT_ESTABLISHED = 0xC0000308/;"	field
CSS_KEY_NOT_PRESENT	$ZIGLIB/std/os/windows/ntstatus.zig	/CSS_KEY_NOT_PRESENT = 0xC0000307/;"	field
CSS_REGION_MISMATCH	$ZIGLIB/std/os/windows/ntstatus.zig	/CSS_REGION_MISMATCH = 0xC000030A/;"	field
CSS_RESETS_EXHAUSTED	$ZIGLIB/std/os/windows/ntstatus.zig	/CSS_RESETS_EXHAUSTED = 0xC000030B/;"	field
CSS_SCRAMBLED_SECTOR	$ZIGLIB/std/os/windows/ntstatus.zig	/CSS_SCRAMBLED_SECTOR = 0xC0000309/;"	field
CSTOPB	$ZIGLIB/std/os/linux.zig	/^pub const CSTOPB: tcflag_t = 64/;"	constant
CSTYPE_INDEX_ENTITLEMENTS	$ZIGLIB/std/macho.zig	/^pub const CSTYPE_INDEX_ENTITLEMENTS: u32 = 0x00000005/;"	constant
CSTYPE_INDEX_REQUIREMENTS	$ZIGLIB/std/macho.zig	/^pub const CSTYPE_INDEX_REQUIREMENTS: u32 = 0x00000002/;"	constant
CS_ADHOC	$ZIGLIB/std/macho.zig	/^pub const CS_ADHOC: u32 = 0x2/;"	constant
CS_BYTEALIGNCLIENT	$ZIGLIB/std/os/windows/user32.zig	/^pub const CS_BYTEALIGNCLIENT = 0x1000/;"	constant
CS_BYTEALIGNWINDOW	$ZIGLIB/std/os/windows/user32.zig	/^pub const CS_BYTEALIGNWINDOW = 0x2000/;"	constant
CS_CDHASH_LEN	$ZIGLIB/std/macho.zig	/^pub const CS_CDHASH_LEN: u32 = 20/;"	constant
CS_CLASSDC	$ZIGLIB/std/os/windows/user32.zig	/^pub const CS_CLASSDC = 0x0040/;"	constant
CS_DBLCLKS	$ZIGLIB/std/os/windows/user32.zig	/^pub const CS_DBLCLKS = 0x0008/;"	constant
CS_ENCRYPTION_EXISTING_ENCRYPTED_FILE	$ZIGLIB/std/os/windows/ntstatus.zig	/CS_ENCRYPTION_EXISTING_ENCRYPTED_FILE = 0xC0000443/;"	field
CS_ENCRYPTION_FILE_NOT_CSE	$ZIGLIB/std/os/windows/ntstatus.zig	/CS_ENCRYPTION_FILE_NOT_CSE = 0xC0000445/;"	field
CS_ENCRYPTION_INVALID_SERVER_RESPONSE	$ZIGLIB/std/os/windows/ntstatus.zig	/CS_ENCRYPTION_INVALID_SERVER_RESPONSE = 0xC0000441/;"	field
CS_ENCRYPTION_NEW_ENCRYPTED_FILE	$ZIGLIB/std/os/windows/ntstatus.zig	/CS_ENCRYPTION_NEW_ENCRYPTED_FILE = 0xC0000444/;"	field
CS_ENCRYPTION_UNSUPPORTED_SERVER	$ZIGLIB/std/os/windows/ntstatus.zig	/CS_ENCRYPTION_UNSUPPORTED_SERVER = 0xC0000442/;"	field
CS_EXECSEG_MAIN_BINARY	$ZIGLIB/std/macho.zig	/^pub const CS_EXECSEG_MAIN_BINARY: u32 = 0x1/;"	constant
CS_GLOBALCLASS	$ZIGLIB/std/os/windows/user32.zig	/^pub const CS_GLOBALCLASS = 0x4000/;"	constant
CS_HASHTYPE_SHA1	$ZIGLIB/std/macho.zig	/^pub const CS_HASHTYPE_SHA1: u8 = 1/;"	constant
CS_HASHTYPE_SHA256	$ZIGLIB/std/macho.zig	/^pub const CS_HASHTYPE_SHA256: u8 = 2/;"	constant
CS_HASHTYPE_SHA256_TRUNCATED	$ZIGLIB/std/macho.zig	/^pub const CS_HASHTYPE_SHA256_TRUNCATED: u8 = 3/;"	constant
CS_HASHTYPE_SHA384	$ZIGLIB/std/macho.zig	/^pub const CS_HASHTYPE_SHA384: u8 = 4/;"	constant
CS_HASH_MAX_SIZE	$ZIGLIB/std/macho.zig	/^pub const CS_HASH_MAX_SIZE: u32 = 48/;"	constant
CS_HREDRAW	$ZIGLIB/std/os/windows/user32.zig	/^pub const CS_HREDRAW = 0x0002/;"	constant
CS_LINKER_SIGNED	$ZIGLIB/std/macho.zig	/^pub const CS_LINKER_SIGNED: u32 = 0x20000/;"	constant
CS_NOCLOSE	$ZIGLIB/std/os/windows/user32.zig	/^pub const CS_NOCLOSE = 0x0200/;"	constant
CS_OWNDC	$ZIGLIB/std/os/windows/user32.zig	/^pub const CS_OWNDC = 0x0020/;"	constant
CS_PARENTDC	$ZIGLIB/std/os/windows/user32.zig	/^pub const CS_PARENTDC = 0x0080/;"	constant
CS_SAVEBITS	$ZIGLIB/std/os/windows/user32.zig	/^pub const CS_SAVEBITS = 0x0800/;"	constant
CS_SHA1_LEN	$ZIGLIB/std/macho.zig	/^pub const CS_SHA1_LEN: u32 = 20/;"	constant
CS_SHA256_LEN	$ZIGLIB/std/macho.zig	/^pub const CS_SHA256_LEN: u32 = 32/;"	constant
CS_SHA256_TRUNCATED_LEN	$ZIGLIB/std/macho.zig	/^pub const CS_SHA256_TRUNCATED_LEN: u32 = 20/;"	constant
CS_SIGNER_TYPE_LEGACYVPN	$ZIGLIB/std/macho.zig	/^pub const CS_SIGNER_TYPE_LEGACYVPN: u32 = 5/;"	constant
CS_SIGNER_TYPE_MAC_APP_STORE	$ZIGLIB/std/macho.zig	/^pub const CS_SIGNER_TYPE_MAC_APP_STORE: u32 = 6/;"	constant
CS_SIGNER_TYPE_UNKNOWN	$ZIGLIB/std/macho.zig	/^pub const CS_SIGNER_TYPE_UNKNOWN: u32 = 0/;"	constant
CS_SUPPORTSCODELIMIT64	$ZIGLIB/std/macho.zig	/^pub const CS_SUPPORTSCODELIMIT64: u32 = 0x20300/;"	constant
CS_SUPPORTSEXECSEG	$ZIGLIB/std/macho.zig	/^pub const CS_SUPPORTSEXECSEG: u32 = 0x20400/;"	constant
CS_SUPPORTSSCATTER	$ZIGLIB/std/macho.zig	/^pub const CS_SUPPORTSSCATTER: u32 = 0x20100/;"	constant
CS_SUPPORTSTEAMID	$ZIGLIB/std/macho.zig	/^pub const CS_SUPPORTSTEAMID: u32 = 0x20200/;"	constant
CS_VREDRAW	$ZIGLIB/std/os/windows/user32.zig	/^pub const CS_VREDRAW = 0x0001/;"	constant
CSourceFile	$ZIGLIB/std/Build/CompileStep.zig	/^pub const CSourceFile = struct {$/;"	struct
CSourceFiles	$ZIGLIB/std/Build/CompileStep.zig	/^pub const CSourceFiles = struct {$/;"	struct
CStd	$ZIGLIB/std/Build.zig	/^pub const CStd = enum {$/;"	enum
CTL_ADD	$ZIGLIB/std/os/linux.zig	/pub const CTL_ADD = 1/;"	constant
CTL_CODE	$ZIGLIB/std/os/windows.zig	/^pub fn CTL_CODE(deviceType: u16, function: u12, method: TransferType, access: u2) DWORD {$/;"	function
CTL_DEL	$ZIGLIB/std/os/linux.zig	/pub const CTL_DEL = 2/;"	constant
CTL_FILE_NOT_SUPPORTED	$ZIGLIB/std/os/windows/ntstatus.zig	/CTL_FILE_NOT_SUPPORTED = 0xC0000057/;"	field
CTL_MOD	$ZIGLIB/std/os/linux.zig	/pub const CTL_MOD = 3/;"	constant
CTRL_BREAK_EVENT	$ZIGLIB/std/os/windows.zig	/^pub const CTRL_BREAK_EVENT: DWORD = 1/;"	constant
CTRL_CLOSE_EVENT	$ZIGLIB/std/os/windows.zig	/^pub const CTRL_CLOSE_EVENT: DWORD = 2/;"	constant
CTRL_C_EVENT	$ZIGLIB/std/os/windows.zig	/^pub const CTRL_C_EVENT: DWORD = 0/;"	constant
CTRL_LOGOFF_EVENT	$ZIGLIB/std/os/windows.zig	/^pub const CTRL_LOGOFF_EVENT: DWORD = 5/;"	constant
CTRL_SHUTDOWN_EVENT	$ZIGLIB/std/os/windows.zig	/^pub const CTRL_SHUTDOWN_EVENT: DWORD = 6/;"	constant
CTRUNC	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const CTRUNC = 512/;"	constant
CTX_BAD_VIDEO_MODE	$ZIGLIB/std/os/windows/ntstatus.zig	/CTX_BAD_VIDEO_MODE = 0xC00A0018/;"	field
CTX_CDM_CONNECT	$ZIGLIB/std/os/windows/ntstatus.zig	/CTX_CDM_CONNECT = 0x400A0004/;"	field
CTX_CDM_DISCONNECT	$ZIGLIB/std/os/windows/ntstatus.zig	/CTX_CDM_DISCONNECT = 0x400A0005/;"	field
CTX_CLIENT_LICENSE_IN_USE	$ZIGLIB/std/os/windows/ntstatus.zig	/CTX_CLIENT_LICENSE_IN_USE = 0xC00A0034/;"	field
CTX_CLIENT_LICENSE_NOT_SET	$ZIGLIB/std/os/windows/ntstatus.zig	/CTX_CLIENT_LICENSE_NOT_SET = 0xC00A0033/;"	field
CTX_CLIENT_QUERY_TIMEOUT	$ZIGLIB/std/os/windows/ntstatus.zig	/CTX_CLIENT_QUERY_TIMEOUT = 0xC00A0026/;"	field
CTX_CLOSE_PENDING	$ZIGLIB/std/os/windows/ntstatus.zig	/CTX_CLOSE_PENDING = 0xC00A0006/;"	field
CTX_CONSOLE_CONNECT	$ZIGLIB/std/os/windows/ntstatus.zig	/CTX_CONSOLE_CONNECT = 0xC00A0028/;"	field
CTX_CONSOLE_DISCONNECT	$ZIGLIB/std/os/windows/ntstatus.zig	/CTX_CONSOLE_DISCONNECT = 0xC00A0027/;"	field
CTX_GRAPHICS_INVALID	$ZIGLIB/std/os/windows/ntstatus.zig	/CTX_GRAPHICS_INVALID = 0xC00A0022/;"	field
CTX_INVALID_MODEMNAME	$ZIGLIB/std/os/windows/ntstatus.zig	/CTX_INVALID_MODEMNAME = 0xC00A0009/;"	field
CTX_INVALID_PD	$ZIGLIB/std/os/windows/ntstatus.zig	/CTX_INVALID_PD = 0xC00A0002/;"	field
CTX_INVALID_WD	$ZIGLIB/std/os/windows/ntstatus.zig	/CTX_INVALID_WD = 0xC00A002E/;"	field
CTX_LICENSE_CLIENT_INVALID	$ZIGLIB/std/os/windows/ntstatus.zig	/CTX_LICENSE_CLIENT_INVALID = 0xC00A0012/;"	field
CTX_LICENSE_EXPIRED	$ZIGLIB/std/os/windows/ntstatus.zig	/CTX_LICENSE_EXPIRED = 0xC00A0014/;"	field
CTX_LICENSE_NOT_AVAILABLE	$ZIGLIB/std/os/windows/ntstatus.zig	/CTX_LICENSE_NOT_AVAILABLE = 0xC00A0013/;"	field
CTX_LOGON_DISABLED	$ZIGLIB/std/os/windows/ntstatus.zig	/CTX_LOGON_DISABLED = 0xC00A0037/;"	field
CTX_MODEM_INF_NOT_FOUND	$ZIGLIB/std/os/windows/ntstatus.zig	/CTX_MODEM_INF_NOT_FOUND = 0xC00A0008/;"	field
CTX_MODEM_RESPONSE_BUSY	$ZIGLIB/std/os/windows/ntstatus.zig	/CTX_MODEM_RESPONSE_BUSY = 0xC00A000E/;"	field
CTX_MODEM_RESPONSE_NO_CARRIER	$ZIGLIB/std/os/windows/ntstatus.zig	/CTX_MODEM_RESPONSE_NO_CARRIER = 0xC00A000C/;"	field
CTX_MODEM_RESPONSE_NO_DIALTONE	$ZIGLIB/std/os/windows/ntstatus.zig	/CTX_MODEM_RESPONSE_NO_DIALTONE = 0xC00A000D/;"	field
CTX_MODEM_RESPONSE_TIMEOUT	$ZIGLIB/std/os/windows/ntstatus.zig	/CTX_MODEM_RESPONSE_TIMEOUT = 0xC00A000B/;"	field
CTX_MODEM_RESPONSE_VOICE	$ZIGLIB/std/os/windows/ntstatus.zig	/CTX_MODEM_RESPONSE_VOICE = 0xC00A000F/;"	field
CTX_NOT_CONSOLE	$ZIGLIB/std/os/windows/ntstatus.zig	/CTX_NOT_CONSOLE = 0xC00A0024/;"	field
CTX_NO_OUTBUF	$ZIGLIB/std/os/windows/ntstatus.zig	/CTX_NO_OUTBUF = 0xC00A0007/;"	field
CTX_PD_NOT_FOUND	$ZIGLIB/std/os/windows/ntstatus.zig	/CTX_PD_NOT_FOUND = 0xC00A0003/;"	field
CTX_RESPONSE_ERROR	$ZIGLIB/std/os/windows/ntstatus.zig	/CTX_RESPONSE_ERROR = 0xC00A000A/;"	field
CTX_SECURITY_LAYER_ERROR	$ZIGLIB/std/os/windows/ntstatus.zig	/CTX_SECURITY_LAYER_ERROR = 0xC00A0038/;"	field
CTX_SHADOW_DENIED	$ZIGLIB/std/os/windows/ntstatus.zig	/CTX_SHADOW_DENIED = 0xC00A002A/;"	field
CTX_SHADOW_DISABLED	$ZIGLIB/std/os/windows/ntstatus.zig	/CTX_SHADOW_DISABLED = 0xC00A0031/;"	field
CTX_SHADOW_ENDED_BY_MODE_CHANGE	$ZIGLIB/std/os/windows/ntstatus.zig	/CTX_SHADOW_ENDED_BY_MODE_CHANGE = 0xC00A0035/;"	field
CTX_SHADOW_INVALID	$ZIGLIB/std/os/windows/ntstatus.zig	/CTX_SHADOW_INVALID = 0xC00A0030/;"	field
CTX_SHADOW_NOT_RUNNING	$ZIGLIB/std/os/windows/ntstatus.zig	/CTX_SHADOW_NOT_RUNNING = 0xC00A0036/;"	field
CTX_TD_ERROR	$ZIGLIB/std/os/windows/ntstatus.zig	/CTX_TD_ERROR = 0xC00A0010/;"	field
CTX_WD_NOT_FOUND	$ZIGLIB/std/os/windows/ntstatus.zig	/CTX_WD_NOT_FOUND = 0xC00A002F/;"	field
CTX_WINSTATION_ACCESS_DENIED	$ZIGLIB/std/os/windows/ntstatus.zig	/CTX_WINSTATION_ACCESS_DENIED = 0xC00A002B/;"	field
CTX_WINSTATION_BUSY	$ZIGLIB/std/os/windows/ntstatus.zig	/CTX_WINSTATION_BUSY = 0xC00A0017/;"	field
CTX_WINSTATION_NAME_COLLISION	$ZIGLIB/std/os/windows/ntstatus.zig	/CTX_WINSTATION_NAME_COLLISION = 0xC00A0016/;"	field
CTX_WINSTATION_NAME_INVALID	$ZIGLIB/std/os/windows/ntstatus.zig	/CTX_WINSTATION_NAME_INVALID = 0xC00A0001/;"	field
CTX_WINSTATION_NOT_FOUND	$ZIGLIB/std/os/windows/ntstatus.zig	/CTX_WINSTATION_NOT_FOUND = 0xC00A0015/;"	field
CType	$ZIGLIB/std/target.zig	/pub const CType = enum {$/;"	enum
CUDA	$ZIGLIB/std/elf.zig	/CUDA = 190/;"	field
CURDIR	$ZIGLIB/std/os/windows.zig	/^pub const CURDIR = extern struct {$/;"	struct
CURRENT_DIRECTORY	$ZIGLIB/std/os/windows/win32error.zig	/CURRENT_DIRECTORY = 16/;"	field
CURRENT_DOMAIN_NOT_ALLOWED	$ZIGLIB/std/os/windows/win32error.zig	/CURRENT_DOMAIN_NOT_ALLOWED = 1399/;"	field
CURRENT_TRANSACTION_NOT_VALID	$ZIGLIB/std/os/windows/ntstatus.zig	/CURRENT_TRANSACTION_NOT_VALID = 0xC0190018/;"	field
CUSTOM_DEFAULT	$ZIGLIB/std/os/windows/sublang.zig	/^pub const CUSTOM_DEFAULT = 0x03/;"	constant
CUSTOM_UNSPECIFIED	$ZIGLIB/std/os/windows/sublang.zig	/^pub const CUSTOM_UNSPECIFIED = 0x04/;"	constant
CVTIME	$ZIGLIB/std/c/haiku.zig	/pub const CVTIME = 0x8014/;"	constant
CV_BROADCAST	$ZIGLIB/std/c/freebsd.zig	/CV_BROADCAST = 10/;"	field
CV_SIGNAL	$ZIGLIB/std/c/freebsd.zig	/CV_SIGNAL = 9/;"	field
CV_WAIT	$ZIGLIB/std/c/freebsd.zig	/CV_WAIT = 8/;"	field
CWAITEVENT	$ZIGLIB/std/c/haiku.zig	/pub const CWAITEVENT = 0x8004/;"	constant
CW_USEDEFAULT	$ZIGLIB/std/os/windows/user32.zig	/^pub const CW_USEDEFAULT = @bitCast(i32, @as(u32, 0x80000000))/;"	constant
CWriter	$ZIGLIB/std/io/c_writer.zig	/^pub const CWriter = io.Writer(*std.c.FILE, std.fs.File.WriteError, cWriterWrite)/;"	constant
CXONC	$ZIGLIB/std/os/linux.zig	/pub const CXONC = if (is_mips) 0x5406 else 0x540A/;"	constant
CYPRESS_M8C	$ZIGLIB/std/elf.zig	/CYPRESS_M8C = 161/;"	field
CZECH	$ZIGLIB/std/os/windows/lang.zig	/^pub const CZECH = 0x05/;"	constant
CZECH_CZECH_REPUBLIC	$ZIGLIB/std/os/windows/sublang.zig	/^pub const CZECH_CZECH_REPUBLIC = 0x01/;"	constant
C_plus_plus	$ZIGLIB/std/dwarf/LANG.zig	/^pub const C_plus_plus = 0x0004/;"	constant
C_plus_plus_03	$ZIGLIB/std/dwarf/LANG.zig	/^pub const C_plus_plus_03 = 0x0019/;"	constant
C_plus_plus_11	$ZIGLIB/std/dwarf/LANG.zig	/^pub const C_plus_plus_11 = 0x001a/;"	constant
C_plus_plus_14	$ZIGLIB/std/dwarf/LANG.zig	/^pub const C_plus_plus_14 = 0x0021/;"	constant
C_struct	$ZIGLIB/std/mem.zig	/const C_struct = extern struct {$/;"	struct
C_union	$ZIGLIB/std/mem.zig	/const C_union = extern union {$/;"	union
Cache	$ZIGLIB/std/builtin.zig	/pub const Cache = enum(u1) {$/;"	enum
CalcUtf16LeLenError	$ZIGLIB/std/unicode.zig	/^const CalcUtf16LeLenError = Utf8DecodeError || error{Utf8InvalidStartByte}/;"	constant
Call	$ZIGLIB/std/zig/Ast.zig	/pub const Call = struct {$/;"	struct
CallModifier	$ZIGLIB/std/builtin.zig	/^pub const CallModifier = enum {$/;"	enum
CallgrindClientRequest	$ZIGLIB/std/valgrind/callgrind.zig	/^pub const CallgrindClientRequest = enum(usize) {$/;"	enum
CallingConvention	$ZIGLIB/std/builtin.zig	/^pub const CallingConvention = enum {$/;"	enum
Cancel	$ZIGLIB/std/os/uefi/protocols/hii_popup_protocol.zig	/Cancel/;"	field
Cancelled	$ZIGLIB/std/os/windows.zig	/Cancelled/;"	field
Capacity	$ZIGLIB/std/pdb.zig	/Capacity: u32/;"	field
CapacityIndexType	$ZIGLIB/std/array_hash_map.zig	/^const CapacityIndexType = enum { u8, u16, u32 }/;"	enum
CapsuleHeader	$ZIGLIB/std/os/uefi/tables/runtime_services.zig	/^pub const CapsuleHeader = extern struct {$/;"	struct
Caret	$ZIGLIB/std/c/tokenizer.zig	/Caret/;"	field
CaretEqual	$ZIGLIB/std/c/tokenizer.zig	/CaretEqual/;"	field
Case	$ZIGLIB/std/fmt.zig	/^pub const Case = enum { lower, upper }/;"	enum
Castagnoli	$ZIGLIB/std/hash/crc.zig	/Castagnoli = 0x82f63b78/;"	field
Cavium	$ZIGLIB/std/zig/system/arm.zig	/const Cavium = [_]E{$/;"	constant
Cdrom	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/Cdrom: *const CdromDevicePath/;"	field
CdromDevicePath	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/pub const CdromDevicePath = extern struct {$/;"	struct
Center	$ZIGLIB/std/fmt.zig	/Center/;"	field
Certificate	$ZIGLIB/std/crypto/Certificate.zig	/^const Certificate = @This()/;"	constant
CertificateType	$ZIGLIB/std/crypto/tls.zig	/^pub const CertificateType = enum(u8) {$/;"	enum
Cext	$ZIGLIB/std/crypto/utils.zig	/const Cext = std.meta.Int(.unsigned, s + 1)/;"	constant
ChaCha12IETF	$ZIGLIB/std/crypto/chacha20.zig	/^pub const ChaCha12IETF = ChaChaIETF(12)/;"	constant
ChaCha12Poly1305	$ZIGLIB/std/crypto/chacha20.zig	/^pub const ChaCha12Poly1305 = ChaChaPoly1305(12)/;"	constant
ChaCha12With64BitNonce	$ZIGLIB/std/crypto/chacha20.zig	/^pub const ChaCha12With64BitNonce = ChaChaWith64BitNonce(12)/;"	constant
ChaCha20IETF	$ZIGLIB/std/crypto/chacha20.zig	/^pub const ChaCha20IETF = ChaChaIETF(20)/;"	constant
ChaCha20Poly1305	$ZIGLIB/std/crypto/chacha20.zig	/^pub const ChaCha20Poly1305 = ChaChaPoly1305(20)/;"	constant
ChaCha20With64BitNonce	$ZIGLIB/std/crypto/chacha20.zig	/^pub const ChaCha20With64BitNonce = ChaChaWith64BitNonce(20)/;"	constant
ChaCha8IETF	$ZIGLIB/std/crypto/chacha20.zig	/^pub const ChaCha8IETF = ChaChaIETF(8)/;"	constant
ChaCha8Poly1305	$ZIGLIB/std/crypto/chacha20.zig	/^pub const ChaCha8Poly1305 = ChaChaPoly1305(8)/;"	constant
ChaCha8With64BitNonce	$ZIGLIB/std/crypto/chacha20.zig	/^pub const ChaCha8With64BitNonce = ChaChaWith64BitNonce(8)/;"	constant
ChaChaIETF	$ZIGLIB/std/crypto/chacha20.zig	/^fn ChaChaIETF(comptime rounds_nb: usize) type {$/;"	function
ChaChaImpl	$ZIGLIB/std/crypto/chacha20.zig	/^fn ChaChaImpl(comptime rounds_nb: usize) type {$/;"	function
ChaChaNonVecImpl	$ZIGLIB/std/crypto/chacha20.zig	/^fn ChaChaNonVecImpl(comptime rounds_nb: usize) type {$/;"	function
ChaChaPoly1305	$ZIGLIB/std/crypto/chacha20.zig	/^fn ChaChaPoly1305(comptime rounds_nb: usize) type {$/;"	function
ChaChaVecImpl	$ZIGLIB/std/crypto/chacha20.zig	/^fn ChaChaVecImpl(comptime rounds_nb: usize) type {$/;"	function
ChaChaWith64BitNonce	$ZIGLIB/std/crypto/chacha20.zig	/^fn ChaChaWith64BitNonce(comptime rounds_nb: usize) type {$/;"	function
ChainEntries	$ZIGLIB/std/os/windows/ws2_32.zig	/ChainEntries: [MAX_PROTOCOL_CHAIN]DWORD/;"	field
ChainLen	$ZIGLIB/std/os/windows/ws2_32.zig	/ChainLen: c_int/;"	field
ChangeCurDirError	$ZIGLIB/std/os.zig	/^pub const ChangeCurDirError = error{$/;"	constant
ChangeDetectionStream	$ZIGLIB/std/io/change_detection_stream.zig	/^pub fn ChangeDetectionStream(comptime WriterType: type) type {$/;"	function
ChangeErrDisablement	$ZIGLIB/std/valgrind.zig	/ChangeErrDisablement = 6145/;"	field
ChangeTime	$ZIGLIB/std/os/windows.zig	/ChangeTime: LARGE_INTEGER/;"	field
Channel	$ZIGLIB/std/event/channel.zig	/^pub fn Channel(comptime T: type) type {$/;"	function
CharLiteral	$ZIGLIB/std/c/tokenizer.zig	/CharLiteral: StrKind/;"	field
CharLiteralStart	$ZIGLIB/std/c/tokenizer.zig	/CharLiteralStart/;"	field
CharacterDevice	$ZIGLIB/std/fs/file.zig	/CharacterDevice/;"	field
Characteristics	$ZIGLIB/std/start_windows_tls.zig	/Characteristics: u32/;"	field
Check	$ZIGLIB/std/compress/xz.zig	/^pub const Check = enum(u4) {$/;"	enum
CheckFileStep	$ZIGLIB/std/Build/CheckFileStep.zig	/^const CheckFileStep = @This()/;"	constant
CheckMemIsAddressable	$ZIGLIB/std/valgrind/memcheck.zig	/CheckMemIsAddressable/;"	field
CheckMemIsDefined	$ZIGLIB/std/valgrind/memcheck.zig	/CheckMemIsDefined/;"	field
CheckObjectStep	$ZIGLIB/std/Build/CheckObjectStep.zig	/^const CheckObjectStep = @This()/;"	constant
CheckSum	$ZIGLIB/std/os/windows.zig	/CheckSum: ULONG/;"	field
ChecksumKind	$ZIGLIB/std/pdb.zig	/ChecksumKind: u8/;"	field
ChecksumSize	$ZIGLIB/std/pdb.zig	/ChecksumSize: u8/;"	field
Child	$ZIGLIB/std/simd.zig	/const Child = std.meta.Child(VecType)/;"	constant
ChildProcess	$ZIGLIB/std/child_process.zig	/^pub const ChildProcess = struct {$/;"	struct
ChmodError	$ZIGLIB/std/fs/file.zig	/pub const ChmodError = std.os.FChmodError/;"	constant
ChownError	$ZIGLIB/std/fs/file.zig	/pub const ChownError = std.os.FChownError/;"	constant
ChunkIterator	$ZIGLIB/std/testing.zig	/const ChunkIterator = struct {$/;"	struct
ChunkState	$ZIGLIB/std/crypto/blake3.zig	/^const ChunkState = struct {$/;"	struct
CipherSuite	$ZIGLIB/std/crypto/tls.zig	/^pub const CipherSuite = enum(u16) {$/;"	enum
CityHash32	$ZIGLIB/std/hash/cityhash.zig	/^pub const CityHash32 = struct {$/;"	struct
CityHash32hashIgnoreSeed	$ZIGLIB/std/hash/cityhash.zig	/^fn CityHash32hashIgnoreSeed(str: []const u8, seed: u32) u32 {$/;"	function
CityHash64	$ZIGLIB/std/hash/cityhash.zig	/^pub const CityHash64 = struct {$/;"	struct
Class	$ZIGLIB/std/http.zig	/pub const Class = enum {$/;"	enum
ClassName	$ZIGLIB/std/pdb.zig	/ClassName: u16/;"	field
Client	$ZIGLIB/std/http/Client.zig	/^const Client = @This()/;"	constant
ClientCall0	$ZIGLIB/std/valgrind.zig	/ClientCall0 = 4353/;"	field
ClientCall1	$ZIGLIB/std/valgrind.zig	/ClientCall1 = 4354/;"	field
ClientCall2	$ZIGLIB/std/valgrind.zig	/ClientCall2 = 4355/;"	field
ClientCall3	$ZIGLIB/std/valgrind.zig	/ClientCall3 = 4356/;"	field
ClientId	$ZIGLIB/std/os/windows.zig	/ClientId: CLIENT_ID/;"	field
ClientRequest	$ZIGLIB/std/valgrind.zig	/^pub const ClientRequest = enum(u32) {$/;"	enum
ClipDistance	$ZIGLIB/std/target/spirv.zig	/ClipDistance/;"	field
ClockGetTimeError	$ZIGLIB/std/os.zig	/^pub const ClockGetTimeError = error{UnsupportedClock} || UnexpectedError/;"	constant
CloneFn	$ZIGLIB/std/os/linux/x86_64.zig	/^const CloneFn = *const fn (arg: usize) callconv(.C) u8/;"	constant
Close	$ZIGLIB/std/event/loop.zig	/pub const Close = struct {$/;"	struct
CloseHandle	$ZIGLIB/std/os/windows.zig	/^pub fn CloseHandle(hObject: HANDLE) void {$/;"	function
CloseWrite	$ZIGLIB/std/fs/watch.zig	/CloseWrite/;"	field
Closure	$ZIGLIB/std/meta/trait.zig	/const Closure = struct {$/;"	struct
CloudFileFlags	$ZIGLIB/std/os/windows.zig	/CloudFileFlags: ULONG/;"	field
Cobol74	$ZIGLIB/std/dwarf/LANG.zig	/^pub const Cobol74 = 0x0005/;"	constant
Cobol85	$ZIGLIB/std/dwarf/LANG.zig	/^pub const Cobol85 = 0x0006/;"	constant
CodeDirectory	$ZIGLIB/std/macho.zig	/^pub const CodeDirectory = extern struct {$/;"	struct
CodeModel	$ZIGLIB/std/builtin.zig	/^pub const CodeModel = enum {$/;"	enum
CodeOffset	$ZIGLIB/std/pdb.zig	/CodeOffset: u32/;"	field
CodeSize	$ZIGLIB/std/pdb.zig	/CodeSize: u32/;"	field
Codec	$ZIGLIB/std/crypto/scrypt.zig	/const Codec = CustomB64Codec(".\/0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".*)/;"	constant
Codecs	$ZIGLIB/std/base64.zig	/^pub const Codecs = struct {$/;"	struct
Coff	$ZIGLIB/std/coff.zig	/^pub const Coff = struct {$/;"	struct
CoffError	$ZIGLIB/std/coff.zig	/^pub const CoffError = error{$/;"	constant
CoffHeader	$ZIGLIB/std/coff.zig	/^pub const CoffHeader = extern struct {$/;"	struct
CoffHeaderFlags	$ZIGLIB/std/coff.zig	/^pub const CoffHeaderFlags = packed struct {$/;"	struct
CoffSymbolRVA	$ZIGLIB/std/pdb.zig	/CoffSymbolRVA = 0xfd/;"	field
CollectedResult	$ZIGLIB/std/event/batch.zig	/const CollectedResult = switch (@typeInfo(Result)) {$/;"	constant
Colon	$ZIGLIB/std/c/tokenizer.zig	/Colon/;"	field
Color	$ZIGLIB/std/mem.zig	/const Color = struct {$/;"	struct
ColumnNumberEntry	$ZIGLIB/std/pdb.zig	/^pub const ColumnNumberEntry = extern struct {$/;"	struct
ComPlusPackage	$ZIGLIB/std/os/windows.zig	/ComPlusPackage: ULONG/;"	field
ComdatSelection	$ZIGLIB/std/coff.zig	/^pub const ComdatSelection = enum(u8) {$/;"	enum
Comma	$ZIGLIB/std/c/tokenizer.zig	/Comma/;"	field
CommandLine	$ZIGLIB/std/os/windows.zig	/CommandLine: UNICODE_STRING/;"	field
CommitLimit	$ZIGLIB/std/os/windows.zig	/CommitLimit: SIZE_T/;"	field
CommitPeak	$ZIGLIB/std/os/windows.zig	/CommitPeak: SIZE_T/;"	field
CommitTotal	$ZIGLIB/std/os/windows.zig	/CommitTotal: SIZE_T/;"	field
CompareOperator	$ZIGLIB/std/math.zig	/^pub const CompareOperator = enum {$/;"	enum
CompileStep	$ZIGLIB/std/Build/CompileStep.zig	/^const CompileStep = @This()/;"	constant
CompileUnit	$ZIGLIB/std/dwarf.zig	/^const CompileUnit = struct {$/;"	struct
CompilerBackend	$ZIGLIB/std/builtin.zig	/^pub const CompilerBackend = enum(u64) {$/;"	enum
Complete	$ZIGLIB/std/json/write_stream.zig	/Complete/;"	field
Completion	$ZIGLIB/std/Thread.zig	/^const Completion = Atomic(enum(u8) {$/;"	constant
CompletionQueue	$ZIGLIB/std/os/linux/io_uring.zig	/^pub const CompletionQueue = struct {$/;"	struct
Complex	$ZIGLIB/std/math/complex.zig	/^pub fn Complex(comptime T: type) type {$/;"	function
ComplexType	$ZIGLIB/std/coff.zig	/^pub const ComplexType = enum(u8) {$/;"	enum
Components	$ZIGLIB/std/zig/Ast.zig	/pub const Components = struct {$/;"	struct
Composition	$ZIGLIB/std/crypto/hash_composition.zig	/^pub fn Composition(comptime H1: type, comptime H2: type) type {$/;"	function
CompressGeneric	$ZIGLIB/std/crypto/blake3.zig	/^const CompressGeneric = struct {$/;"	struct
CompressVectorized	$ZIGLIB/std/crypto/blake3.zig	/^const CompressVectorized = struct {$/;"	struct
CompressedScalar	$ZIGLIB/std/crypto/pcurves/secp256k1/scalar.zig	/^pub const CompressedScalar = [encoded_length]u8/;"	constant
Compression	$ZIGLIB/std/compress/deflate/compressor.zig	/^pub const Compression = enum(i5) {$/;"	enum
CompressionLevel	$ZIGLIB/std/compress/deflate/compressor.zig	/^const CompressionLevel = struct {$/;"	struct
Compressor	$ZIGLIB/std/compress/deflate/compressor.zig	/^pub fn Compressor(comptime WriterType: anytype) type {$/;"	function
CompressorOptions	$ZIGLIB/std/compress/deflate/compressor.zig	/^pub const CompressorOptions = struct {$/;"	struct
CompromisedData	$ZIGLIB/std/os/uefi/status.zig	/CompromisedData = high_bit | 33/;"	field
ComptimeFloat	$ZIGLIB/std/builtin.zig	/ComptimeFloat: void/;"	field
ComptimeInt	$ZIGLIB/std/builtin.zig	/ComptimeInt: void/;"	field
ComptimeStringMap	$ZIGLIB/std/comptime_string_map.zig	/^pub fn ComptimeStringMap(comptime V: type, comptime kvs_list: anytype) type {$/;"	function
ComputeCompareExpected	$ZIGLIB/std/Build/CheckObjectStep.zig	/^const ComputeCompareExpected = struct {$/;"	struct
ComputeDerivativeGroupLinearNV	$ZIGLIB/std/target/spirv.zig	/ComputeDerivativeGroupLinearNV/;"	field
ComputeDerivativeGroupQuadsNV	$ZIGLIB/std/target/spirv.zig	/ComputeDerivativeGroupQuadsNV/;"	field
Condition	$ZIGLIB/std/Thread/Condition.zig	/^const Condition = @This()/;"	constant
Config	$ZIGLIB/std/heap/general_purpose_allocator.zig	/^pub const Config = struct {$/;"	struct
ConfigHeaderStep	$ZIGLIB/std/Build/ConfigHeaderStep.zig	/^const ConfigHeaderStep = @This()/;"	constant
ConfigurableTrace	$ZIGLIB/std/debug.zig	/^pub fn ConfigurableTrace(comptime size: usize, comptime stack_frame_count: usize, comptime is_enabled: bool) type {$/;"	function
ConfigurationTable	$ZIGLIB/std/os/uefi/tables/configuration_table.zig	/^pub const ConfigurationTable = extern struct {$/;"	struct
ConnectError	$ZIGLIB/std/os.zig	/^pub const ConnectError = error{$/;"	constant
Connection	$ZIGLIB/std/net.zig	/pub const Connection = struct {$/;"	struct
ConnectionFin	$ZIGLIB/std/os/uefi/status.zig	/ConnectionFin = high_bit | 104/;"	field
ConnectionRefused	$ZIGLIB/std/os/uefi/status.zig	/ConnectionRefused = high_bit | 106/;"	field
ConnectionReset	$ZIGLIB/std/os/uefi/status.zig	/ConnectionReset = high_bit | 105/;"	field
Console	$ZIGLIB/std/target.zig	/Console/;"	field
ConsoleFlags	$ZIGLIB/std/os/windows.zig	/ConsoleFlags: ULONG/;"	field
ConsoleHandle	$ZIGLIB/std/os/windows.zig	/ConsoleHandle: HANDLE/;"	field
ConsoleSessionForegroundProcessId	$ZIGLIB/std/os/windows.zig	/ConsoleSessionForegroundProcessId: LONGLONG/;"	field
Const	$ZIGLIB/std/math/big/int.zig	/^pub const Const = struct {$/;"	struct
ConstIterator	$ZIGLIB/std/segmented_list.zig	/pub const ConstIterator = BaseIterator(*const Self, *const T)/;"	constant
Constant	$ZIGLIB/std/dwarf.zig	/^const Constant = struct {$/;"	struct
Container	$ZIGLIB/std/zig/c_translation.zig	/const Container = extern struct {$/;"	struct
ContainerDecl	$ZIGLIB/std/zig/Ast.zig	/pub const ContainerDecl = struct {$/;"	struct
ContainerField	$ZIGLIB/std/zig/Ast.zig	/pub const ContainerField = struct {$/;"	struct
ContainerLayout	$ZIGLIB/std/builtin.zig	/pub const ContainerLayout = enum(u2) {$/;"	enum
ContentType	$ZIGLIB/std/crypto/tls.zig	/^pub const ContentType = enum(u8) {$/;"	enum
ContentionCount	$ZIGLIB/std/os/windows.zig	/ContentionCount: DWORD/;"	field
Context	$ZIGLIB/std/os.zig	/const Context = @TypeOf(context)/;"	constant
ContextFlags	$ZIGLIB/std/os/windows.zig	/ContextFlags: ULONG align(16)/;"	field
ContextRecord	$ZIGLIB/std/os/windows.zig	/ContextRecord: *std.os.windows.CONTEXT/;"	field
Control	$ZIGLIB/std/os/windows/ws2_32.zig	/Control: WSABUF/;"	field
ControlWord	$ZIGLIB/std/os/windows.zig	/ControlWord: WORD/;"	field
Controller	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/Controller: *const ControllerDevicePath/;"	field
ControllerDevicePath	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/pub const ControllerDevicePath = extern struct {$/;"	struct
ControllerType	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/pub const ControllerType = enum(u1) {$/;"	enum
ConventionalMemory	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/ConventionalMemory/;"	field
ConvertError	$ZIGLIB/std/math/big/int.zig	/pub const ConvertError = error{$/;"	constant
Cookie	$ZIGLIB/std/os/windows.zig	/Cookie: ULONG/;"	field
CookiePad	$ZIGLIB/std/os/windows.zig	/CookiePad: [1]ULONG/;"	field
CooperativeMatrixNV	$ZIGLIB/std/target/spirv.zig	/CooperativeMatrixNV/;"	field
CopyFileError	$ZIGLIB/std/fs.zig	/pub const CopyFileError = File.OpenError || File.StatError || AtomicFile.InitError || CopyFileRawError || AtomicFile.FinishError/;"	constant
CopyFileOptions	$ZIGLIB/std/fs.zig	/^pub const CopyFileOptions = struct {$/;"	struct
CopyFileRangeError	$ZIGLIB/std/os.zig	/^pub const CopyFileRangeError = error{$/;"	constant
CopyFileRawError	$ZIGLIB/std/fs.zig	/^const CopyFileRawError = error{SystemResources} || os.CopyFileRangeError || os.SendFileError/;"	constant
CopyPtrAttrs	$ZIGLIB/std/mem.zig	/^fn CopyPtrAttrs($/;"	function
CopyRangeError	$ZIGLIB/std/fs/file.zig	/pub const CopyRangeError = os.CopyFileRangeError/;"	constant
CoreInfo	$ZIGLIB/std/zig/system/linux.zig	/const CoreInfo = struct {$/;"	struct
Count	$ZIGLIB/std/pdb.zig	/Count: u16/;"	field
CountErrors	$ZIGLIB/std/valgrind.zig	/CountErrors = 4609/;"	field
CountIntType	$ZIGLIB/std/simd.zig	/const CountIntType = VectorCount(@TypeOf(vec))/;"	constant
CountLeakBlocks	$ZIGLIB/std/valgrind/memcheck.zig	/CountLeakBlocks/;"	field
CountLeaks	$ZIGLIB/std/valgrind/memcheck.zig	/CountLeaks/;"	field
CountResult	$ZIGLIB/std/valgrind/memcheck.zig	/^const CountResult = struct {$/;"	struct
CounterType	$ZIGLIB/std/event/wait_group.zig	/const CounterType = std.meta.Int(.unsigned, counter_size)/;"	constant
CountingReader	$ZIGLIB/std/io/counting_reader.zig	/^pub fn CountingReader(comptime ReaderType: anytype) type {$/;"	function
CountingWriter	$ZIGLIB/std/io/counting_writer.zig	/^pub fn CountingWriter(comptime WriterType: type) type {$/;"	function
Cpsr	$ZIGLIB/std/os/windows.zig	/Cpsr: ULONG/;"	field
CpuCountError	$ZIGLIB/std/Thread.zig	/^pub const CpuCountError = error{$/;"	constant
CpuFeature	$ZIGLIB/std/target/x86.zig	/^const CpuFeature = std.Target.Cpu.Feature/;"	constant
CpuModel	$ZIGLIB/std/zig/CrossTarget.zig	/^pub const CpuModel = union(enum) {$/;"	union
CpuidLeaf	$ZIGLIB/std/zig/system/x86.zig	/^const CpuidLeaf = packed struct {$/;"	struct
CpuinfoParser	$ZIGLIB/std/zig/system/linux.zig	/^fn CpuinfoParser(comptime impl: anytype) type {$/;"	function
Cr0NpxState	$ZIGLIB/std/os/windows.zig	/Cr0NpxState: DWORD/;"	field
CrEscape	$ZIGLIB/std/c/tokenizer.zig	/CrEscape/;"	field
Crc10Atm	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc10Atm = Crc(u10, .{$/;"	constant
Crc10Cdma2000	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc10Cdma2000 = Crc(u10, .{$/;"	constant
Crc10Gsm	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc10Gsm = Crc(u10, .{$/;"	constant
Crc11Flexray	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc11Flexray = Crc(u11, .{$/;"	constant
Crc11Umts	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc11Umts = Crc(u11, .{$/;"	constant
Crc12Cdma2000	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc12Cdma2000 = Crc(u12, .{$/;"	constant
Crc12Dect	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc12Dect = Crc(u12, .{$/;"	constant
Crc12Gsm	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc12Gsm = Crc(u12, .{$/;"	constant
Crc12Umts	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc12Umts = Crc(u12, .{$/;"	constant
Crc13Bbc	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc13Bbc = Crc(u13, .{$/;"	constant
Crc14Darc	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc14Darc = Crc(u14, .{$/;"	constant
Crc14Gsm	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc14Gsm = Crc(u14, .{$/;"	constant
Crc15Can	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc15Can = Crc(u15, .{$/;"	constant
Crc15Mpt1327	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc15Mpt1327 = Crc(u15, .{$/;"	constant
Crc16Arc	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc16Arc = Crc(u16, .{$/;"	constant
Crc16Cdma2000	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc16Cdma2000 = Crc(u16, .{$/;"	constant
Crc16Cms	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc16Cms = Crc(u16, .{$/;"	constant
Crc16Dds110	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc16Dds110 = Crc(u16, .{$/;"	constant
Crc16DectR	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc16DectR = Crc(u16, .{$/;"	constant
Crc16DectX	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc16DectX = Crc(u16, .{$/;"	constant
Crc16Dnp	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc16Dnp = Crc(u16, .{$/;"	constant
Crc16En13757	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc16En13757 = Crc(u16, .{$/;"	constant
Crc16Genibus	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc16Genibus = Crc(u16, .{$/;"	constant
Crc16Gsm	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc16Gsm = Crc(u16, .{$/;"	constant
Crc16Ibm3740	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc16Ibm3740 = Crc(u16, .{$/;"	constant
Crc16IbmSdlc	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc16IbmSdlc = Crc(u16, .{$/;"	constant
Crc16IsoIec144433A	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc16IsoIec144433A = Crc(u16, .{$/;"	constant
Crc16Kermit	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc16Kermit = Crc(u16, .{$/;"	constant
Crc16Lj1200	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc16Lj1200 = Crc(u16, .{$/;"	constant
Crc16M17	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc16M17 = Crc(u16, .{$/;"	constant
Crc16MaximDow	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc16MaximDow = Crc(u16, .{$/;"	constant
Crc16Mcrf4xx	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc16Mcrf4xx = Crc(u16, .{$/;"	constant
Crc16Modbus	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc16Modbus = Crc(u16, .{$/;"	constant
Crc16Nrsc5	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc16Nrsc5 = Crc(u16, .{$/;"	constant
Crc16OpensafetyA	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc16OpensafetyA = Crc(u16, .{$/;"	constant
Crc16OpensafetyB	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc16OpensafetyB = Crc(u16, .{$/;"	constant
Crc16Profibus	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc16Profibus = Crc(u16, .{$/;"	constant
Crc16Riello	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc16Riello = Crc(u16, .{$/;"	constant
Crc16SpiFujitsu	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc16SpiFujitsu = Crc(u16, .{$/;"	constant
Crc16T10Dif	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc16T10Dif = Crc(u16, .{$/;"	constant
Crc16Teledisk	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc16Teledisk = Crc(u16, .{$/;"	constant
Crc16Tms37157	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc16Tms37157 = Crc(u16, .{$/;"	constant
Crc16Umts	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc16Umts = Crc(u16, .{$/;"	constant
Crc16Usb	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc16Usb = Crc(u16, .{$/;"	constant
Crc16Xmodem	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc16Xmodem = Crc(u16, .{$/;"	constant
Crc17CanFd	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc17CanFd = Crc(u17, .{$/;"	constant
Crc21CanFd	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc21CanFd = Crc(u21, .{$/;"	constant
Crc24Ble	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc24Ble = Crc(u24, .{$/;"	constant
Crc24FlexrayA	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc24FlexrayA = Crc(u24, .{$/;"	constant
Crc24FlexrayB	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc24FlexrayB = Crc(u24, .{$/;"	constant
Crc24Interlaken	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc24Interlaken = Crc(u24, .{$/;"	constant
Crc24LteA	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc24LteA = Crc(u24, .{$/;"	constant
Crc24LteB	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc24LteB = Crc(u24, .{$/;"	constant
Crc24Openpgp	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc24Openpgp = Crc(u24, .{$/;"	constant
Crc24Os9	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc24Os9 = Crc(u24, .{$/;"	constant
Crc30Cdma	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc30Cdma = Crc(u30, .{$/;"	constant
Crc31Philips	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc31Philips = Crc(u31, .{$/;"	constant
Crc32	$ZIGLIB/std/hash/crc.zig	/^pub const Crc32 = Crc32WithPoly(.IEEE)/;"	constant
Crc32Aixm	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc32Aixm = Crc(u32, .{$/;"	constant
Crc32Autosar	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc32Autosar = Crc(u32, .{$/;"	constant
Crc32Base91D	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc32Base91D = Crc(u32, .{$/;"	constant
Crc32Bzip2	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc32Bzip2 = Crc(u32, .{$/;"	constant
Crc32Castagnoli	$ZIGLIB/std/hash/crc.zig	/const Crc32Castagnoli = Crc32WithPoly(.Castagnoli)/;"	constant
Crc32CdRomEdc	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc32CdRomEdc = Crc(u32, .{$/;"	constant
Crc32Cksum	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc32Cksum = Crc(u32, .{$/;"	constant
Crc32Ieee	$ZIGLIB/std/hash/crc.zig	/const Crc32Ieee = Crc32WithPoly(.IEEE)/;"	constant
Crc32Iscsi	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc32Iscsi = Crc(u32, .{$/;"	constant
Crc32IsoHdlc	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc32IsoHdlc = Crc(u32, .{$/;"	constant
Crc32Jamcrc	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc32Jamcrc = Crc(u32, .{$/;"	constant
Crc32Mef	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc32Mef = Crc(u32, .{$/;"	constant
Crc32Mpeg2	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc32Mpeg2 = Crc(u32, .{$/;"	constant
Crc32SmallWithPoly	$ZIGLIB/std/hash/crc.zig	/^pub fn Crc32SmallWithPoly(comptime poly: Polynomial) type {$/;"	function
Crc32WithPoly	$ZIGLIB/std/hash/crc.zig	/^pub fn Crc32WithPoly(comptime poly: Polynomial) type {$/;"	function
Crc32Xfer	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc32Xfer = Crc(u32, .{$/;"	constant
Crc3Gsm	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc3Gsm = Crc(u3, .{$/;"	constant
Crc3Rohc	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc3Rohc = Crc(u3, .{$/;"	constant
Crc40Gsm	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc40Gsm = Crc(u40, .{$/;"	constant
Crc4G704	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc4G704 = Crc(u4, .{$/;"	constant
Crc4Interlaken	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc4Interlaken = Crc(u4, .{$/;"	constant
Crc5EpcC1g2	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc5EpcC1g2 = Crc(u5, .{$/;"	constant
Crc5G704	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc5G704 = Crc(u5, .{$/;"	constant
Crc5Usb	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc5Usb = Crc(u5, .{$/;"	constant
Crc64	$ZIGLIB/std/compress/xz/block.zig	/^const Crc64 = std.hash.crc.Crc64Xz/;"	constant
Crc64Ecma182	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc64Ecma182 = Crc(u64, .{$/;"	constant
Crc64GoIso	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc64GoIso = Crc(u64, .{$/;"	constant
Crc64Ms	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc64Ms = Crc(u64, .{$/;"	constant
Crc64Redis	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc64Redis = Crc(u64, .{$/;"	constant
Crc64We	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc64We = Crc(u64, .{$/;"	constant
Crc64Xz	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc64Xz = Crc(u64, .{$/;"	constant
Crc6Cdma2000A	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc6Cdma2000A = Crc(u6, .{$/;"	constant
Crc6Cdma2000B	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc6Cdma2000B = Crc(u6, .{$/;"	constant
Crc6Darc	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc6Darc = Crc(u6, .{$/;"	constant
Crc6G704	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc6G704 = Crc(u6, .{$/;"	constant
Crc6Gsm	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc6Gsm = Crc(u6, .{$/;"	constant
Crc7Mmc	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc7Mmc = Crc(u7, .{$/;"	constant
Crc7Rohc	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc7Rohc = Crc(u7, .{$/;"	constant
Crc7Umts	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc7Umts = Crc(u7, .{$/;"	constant
Crc82Darc	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc82Darc = Crc(u82, .{$/;"	constant
Crc8Autosar	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc8Autosar = Crc(u8, .{$/;"	constant
Crc8Bluetooth	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc8Bluetooth = Crc(u8, .{$/;"	constant
Crc8Cdma2000	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc8Cdma2000 = Crc(u8, .{$/;"	constant
Crc8Darc	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc8Darc = Crc(u8, .{$/;"	constant
Crc8DvbS2	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc8DvbS2 = Crc(u8, .{$/;"	constant
Crc8GsmA	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc8GsmA = Crc(u8, .{$/;"	constant
Crc8GsmB	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc8GsmB = Crc(u8, .{$/;"	constant
Crc8Hitag	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc8Hitag = Crc(u8, .{$/;"	constant
Crc8I4321	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc8I4321 = Crc(u8, .{$/;"	constant
Crc8ICode	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc8ICode = Crc(u8, .{$/;"	constant
Crc8Lte	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc8Lte = Crc(u8, .{$/;"	constant
Crc8MaximDow	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc8MaximDow = Crc(u8, .{$/;"	constant
Crc8MifareMad	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc8MifareMad = Crc(u8, .{$/;"	constant
Crc8Nrsc5	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc8Nrsc5 = Crc(u8, .{$/;"	constant
Crc8Opensafety	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc8Opensafety = Crc(u8, .{$/;"	constant
Crc8Rohc	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc8Rohc = Crc(u8, .{$/;"	constant
Crc8SaeJ1850	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc8SaeJ1850 = Crc(u8, .{$/;"	constant
Crc8Smbus	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc8Smbus = Crc(u8, .{$/;"	constant
Crc8Tech3250	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc8Tech3250 = Crc(u8, .{$/;"	constant
Crc8Wcdma	$ZIGLIB/std/hash/crc/catalog.zig	/^pub const Crc8Wcdma = Crc(u8, .{$/;"	constant
CrcError	$ZIGLIB/std/os/uefi/status.zig	/CrcError = high_bit | 27/;"	field
CreateBlock	$ZIGLIB/std/valgrind/memcheck.zig	/CreateBlock/;"	field
CreateEventEx	$ZIGLIB/std/os/windows.zig	/^pub fn CreateEventEx(attributes: ?*SECURITY_ATTRIBUTES, name: []const u8, flags: DWORD, desired_access: DWORD) !HANDLE {$/;"	function
CreateEventExW	$ZIGLIB/std/os/windows.zig	/^pub fn CreateEventExW(attributes: ?*SECURITY_ATTRIBUTES, nameW: [*:0]const u16, flags: DWORD, desired_access: DWORD) !HANDLE {$/;"	function
CreateFlags	$ZIGLIB/std/fs/file.zig	/pub const CreateFlags = struct {$/;"	struct
CreateIoCompletionPort	$ZIGLIB/std/os/windows.zig	/^pub fn CreateIoCompletionPort($/;"	function
CreateIoCompletionPortError	$ZIGLIB/std/os/windows.zig	/^pub const CreateIoCompletionPortError = error{Unexpected}/;"	constant
CreateMempool	$ZIGLIB/std/valgrind.zig	/CreateMempool = 4867/;"	field
CreateModuleOptions	$ZIGLIB/std/Build.zig	/^pub const CreateModuleOptions = struct {$/;"	struct
CreateOptions	$ZIGLIB/std/Build/InstallRawStep.zig	/^pub const CreateOptions = struct {$/;"	struct
CreatePipe	$ZIGLIB/std/os/windows.zig	/^pub fn CreatePipe(rd: *HANDLE, wr: *HANDLE, sattr: *const SECURITY_ATTRIBUTES) CreatePipeError!void {$/;"	function
CreatePipeError	$ZIGLIB/std/os/windows.zig	/^pub const CreatePipeError = error{Unexpected}/;"	constant
CreateProcessError	$ZIGLIB/std/os/windows.zig	/^pub const CreateProcessError = error{$/;"	constant
CreateProcessW	$ZIGLIB/std/os/windows.zig	/^pub fn CreateProcessW($/;"	function
CreateSymbolicLink	$ZIGLIB/std/os/windows.zig	/^pub fn CreateSymbolicLink($/;"	function
CreateSymbolicLinkError	$ZIGLIB/std/os/windows.zig	/^pub const CreateSymbolicLinkError = error{$/;"	constant
CreateUniqueTuple	$ZIGLIB/std/meta.zig	/^fn CreateUniqueTuple(comptime N: comptime_int, comptime types: [N]type) type {$/;"	function
CreationTime	$ZIGLIB/std/os/windows.zig	/CreationTime: LARGE_INTEGER/;"	field
CreatorBackTraceIndex	$ZIGLIB/std/os/windows.zig	/CreatorBackTraceIndex: WORD/;"	field
CreatorBackTraceIndexHigh	$ZIGLIB/std/os/windows.zig	/CreatorBackTraceIndexHigh: WORD/;"	field
CriticalSection	$ZIGLIB/std/os/windows.zig	/CriticalSection: *RTL_CRITICAL_SECTION/;"	field
CriticalSectionTimeout	$ZIGLIB/std/os/windows.zig	/CriticalSectionTimeout: LARGE_INTEGER/;"	field
CrossProcessFlags	$ZIGLIB/std/os/windows.zig	/CrossProcessFlags: ULONG/;"	field
CrossScopeExports	$ZIGLIB/std/pdb.zig	/CrossScopeExports = 0xf8/;"	field
CrossScopeImports	$ZIGLIB/std/pdb.zig	/CrossScopeImports = 0xf7/;"	field
CrossTarget	$ZIGLIB/std/zig/CrossTarget.zig	/^const CrossTarget = @This()/;"	constant
CryptFormatHasher	$ZIGLIB/std/crypto/scrypt.zig	/^const CryptFormatHasher = struct {$/;"	struct
CryptoExponent	$ZIGLIB/std/os/windows.zig	/CryptoExponent: ULONG/;"	field
CsrServerReadOnlySharedMemoryBase	$ZIGLIB/std/os/windows.zig	/CsrServerReadOnlySharedMemoryBase: ULONGLONG/;"	field
CtxTy	$ZIGLIB/std/debug.zig	/const CtxTy = @TypeOf(ctx)/;"	constant
CullDistance	$ZIGLIB/std/target/spirv.zig	/CullDistance/;"	field
CurDirDevicesSkippedForDlls	$ZIGLIB/std/os/windows.zig	/CurDirDevicesSkippedForDlls: u2/;"	field
CurrentByteOffset	$ZIGLIB/std/os/windows.zig	/CurrentByteOffset: LARGE_INTEGER/;"	field
CurrentDirectory	$ZIGLIB/std/os/windows.zig	/CurrentDirectory: CURDIR/;"	field
Curve	$ZIGLIB/std/crypto/Certificate.zig	/pub fn Curve(comptime curve: NamedCurve) type {$/;"	function
Curve25519	$ZIGLIB/std/crypto/25519/curve25519.zig	/^pub const Curve25519 = struct {$/;"	struct
CustomB64Codec	$ZIGLIB/std/crypto/scrypt.zig	/fn CustomB64Codec(comptime map: [64]u8) type {$/;"	function
CustomData	$ZIGLIB/std/os/linux/tls.zig	/^const CustomData = struct {$/;"	struct
Cyan	$ZIGLIB/std/debug.zig	/Cyan/;"	field
CyclesPerYield	$ZIGLIB/std/os/windows.zig	/CyclesPerYield: USHORT/;"	field
D10V	$ZIGLIB/std/elf.zig	/D10V = 85/;"	field
D30V	$ZIGLIB/std/elf.zig	/D30V = 86/;"	field
DAC_OVERRIDE	$ZIGLIB/std/os/linux.zig	/pub const DAC_OVERRIDE = 1/;"	constant
DAC_READ_SEARCH	$ZIGLIB/std/os/linux.zig	/pub const DAC_READ_SEARCH = 2/;"	constant
DANISH	$ZIGLIB/std/os/windows/lang.zig	/^pub const DANISH = 0x06/;"	constant
DANISH_DENMARK	$ZIGLIB/std/os/windows/sublang.zig	/^pub const DANISH_DENMARK = 0x01/;"	constant
DARI	$ZIGLIB/std/os/windows/lang.zig	/^pub const DARI = 0x8c/;"	constant
DARI_AFGHANISTAN	$ZIGLIB/std/os/windows/sublang.zig	/^pub const DARI_AFGHANISTAN = 0x01/;"	constant
DAS_MATCHINGLABEL	$ZIGLIB/std/net.zig	/^const DAS_MATCHINGLABEL = 0x10000000/;"	constant
DAS_MATCHINGSCOPE	$ZIGLIB/std/net.zig	/^const DAS_MATCHINGSCOPE = 0x20000000/;"	constant
DAS_ORDER_SHIFT	$ZIGLIB/std/net.zig	/^const DAS_ORDER_SHIFT = 0/;"	constant
DAS_PREC_SHIFT	$ZIGLIB/std/net.zig	/^const DAS_PREC_SHIFT = 20/;"	constant
DAS_PREFIX_SHIFT	$ZIGLIB/std/net.zig	/^const DAS_PREFIX_SHIFT = 8/;"	constant
DAS_SCOPE_SHIFT	$ZIGLIB/std/net.zig	/^const DAS_SCOPE_SHIFT = 16/;"	constant
DAS_USABLE	$ZIGLIB/std/net.zig	/^const DAS_USABLE = 0x40000000/;"	constant
DATA	$ZIGLIB/std/os/linux/sparc64.zig	/DATA/;"	field
DATABASE_DOES_NOT_EXIST	$ZIGLIB/std/os/windows/win32error.zig	/DATABASE_DOES_NOT_EXIST = 1065/;"	field
DATAKIT	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const DATAKIT = 9/;"	constant
DATATYPE_MISALIGNMENT	$ZIGLIB/std/os/windows/ntstatus.zig	/DATATYPE_MISALIGNMENT = 0x80000002/;"	field
DATATYPE_MISALIGNMENT_ERROR	$ZIGLIB/std/os/windows/ntstatus.zig	/DATATYPE_MISALIGNMENT_ERROR = 0xC00002C5/;"	field
DATATYPE_MISMATCH	$ZIGLIB/std/os/windows/win32error.zig	/DATATYPE_MISMATCH = 1629/;"	field
DATA_CHECKSUM_ERROR	$ZIGLIB/std/os/windows/win32error.zig	/DATA_CHECKSUM_ERROR = 323/;"	field
DATA_ERROR	$ZIGLIB/std/os/windows/ntstatus.zig	/DATA_ERROR = 0xC000003E/;"	field
DATA_IN_CODE	$ZIGLIB/std/macho.zig	/DATA_IN_CODE = 0x29/;"	field
DATA_LATE_ERROR	$ZIGLIB/std/os/windows/ntstatus.zig	/DATA_LATE_ERROR = 0xC000003D/;"	field
DATA_LOST_REPAIR	$ZIGLIB/std/os/windows/ntstatus.zig	/DATA_LOST_REPAIR = 0x80000803/;"	field
DATA_NOT_ACCEPTED	$ZIGLIB/std/os/windows/win32error.zig	/DATA_NOT_ACCEPTED = 592/;"	field
DATA_OVERRUN	$ZIGLIB/std/os/windows/ntstatus.zig	/DATA_OVERRUN = 0xC000003C/;"	field
DATA_SRC	$ZIGLIB/std/os/linux.zig	/pub const DATA_SRC = 32768/;"	constant
DBG_APP_NOT_IDLE	$ZIGLIB/std/os/windows/ntstatus.zig	/DBG_APP_NOT_IDLE = 0xC0010002/;"	field
DBG_COMMAND_EXCEPTION	$ZIGLIB/std/os/windows/win32error.zig	/DBG_COMMAND_EXCEPTION = 697/;"	field
DBG_CONTINUE	$ZIGLIB/std/os/windows/win32error.zig	/DBG_CONTINUE = 767/;"	field
DBG_CONTROL_BREAK	$ZIGLIB/std/os/windows/win32error.zig	/DBG_CONTROL_BREAK = 696/;"	field
DBG_CONTROL_C	$ZIGLIB/std/os/windows/win32error.zig	/DBG_CONTROL_C = 693/;"	field
DBG_EXCEPTION_HANDLED	$ZIGLIB/std/os/windows/win32error.zig	/DBG_EXCEPTION_HANDLED = 766/;"	field
DBG_EXCEPTION_NOT_HANDLED	$ZIGLIB/std/os/windows/win32error.zig	/DBG_EXCEPTION_NOT_HANDLED = 688/;"	field
DBG_NO_STATE_CHANGE	$ZIGLIB/std/os/windows/ntstatus.zig	/DBG_NO_STATE_CHANGE = 0xC0010001/;"	field
DBG_PRINTEXCEPTION_C	$ZIGLIB/std/os/windows/win32error.zig	/DBG_PRINTEXCEPTION_C = 694/;"	field
DBG_REPLY_LATER	$ZIGLIB/std/os/windows/win32error.zig	/DBG_REPLY_LATER = 689/;"	field
DBG_RIPEXCEPTION	$ZIGLIB/std/os/windows/win32error.zig	/DBG_RIPEXCEPTION = 695/;"	field
DBG_TERMINATE_PROCESS	$ZIGLIB/std/os/windows/win32error.zig	/DBG_TERMINATE_PROCESS = 692/;"	field
DBG_TERMINATE_THREAD	$ZIGLIB/std/os/windows/win32error.zig	/DBG_TERMINATE_THREAD = 691/;"	field
DBG_UNABLE_TO_PROVIDE_HANDLE	$ZIGLIB/std/os/windows/win32error.zig	/DBG_UNABLE_TO_PROVIDE_HANDLE = 690/;"	field
DB_RECORDTYPE	$ZIGLIB/std/os/darwin/cssm.zig	/^pub const DB_RECORDTYPE = enum(u32) {$/;"	enum
DB_RECORDTYPE_APP_DEFINED_END	$ZIGLIB/std/os/darwin/cssm.zig	/^pub const DB_RECORDTYPE_APP_DEFINED_END = 0xffffffff/;"	constant
DB_RECORDTYPE_APP_DEFINED_START	$ZIGLIB/std/os/darwin/cssm.zig	/^pub const DB_RECORDTYPE_APP_DEFINED_START = 0x80000000/;"	constant
DB_RECORDTYPE_OPEN_GROUP_END	$ZIGLIB/std/os/darwin/cssm.zig	/^pub const DB_RECORDTYPE_OPEN_GROUP_END = DB_RECORDTYPE_OPEN_GROUP_START + 8/;"	constant
DB_RECORDTYPE_OPEN_GROUP_START	$ZIGLIB/std/os/darwin/cssm.zig	/^pub const DB_RECORDTYPE_OPEN_GROUP_START = 0x0000000A/;"	constant
DB_RECORDTYPE_SCHEMA_END	$ZIGLIB/std/os/darwin/cssm.zig	/^pub const DB_RECORDTYPE_SCHEMA_END = DB_RECORDTYPE_SCHEMA_START + 4/;"	constant
DB_RECORDTYPE_SCHEMA_START	$ZIGLIB/std/os/darwin/cssm.zig	/^pub const DB_RECORDTYPE_SCHEMA_START = 0x00000000/;"	constant
DCCP	$ZIGLIB/std/os/linux.zig	/pub const DCCP = 6/;"	constant
DC_NOT_FOUND	$ZIGLIB/std/os/windows/win32error.zig	/DC_NOT_FOUND = 1425/;"	field
DDE_FAIL	$ZIGLIB/std/os/windows/win32error.zig	/DDE_FAIL = 1156/;"	field
DDM_BEGIN	$ZIGLIB/std/os/windows/user32.zig	/^pub const DDM_BEGIN = 0x0403/;"	constant
DDM_CLOSE	$ZIGLIB/std/os/windows/user32.zig	/^pub const DDM_CLOSE = 0x0402/;"	constant
DDM_DRAW	$ZIGLIB/std/os/windows/user32.zig	/^pub const DDM_DRAW = 0x0401/;"	constant
DDM_END	$ZIGLIB/std/os/windows/user32.zig	/^pub const DDM_END = 0x0404/;"	constant
DDM_SETFMT	$ZIGLIB/std/os/windows/user32.zig	/^pub const DDM_SETFMT = 0x0400/;"	constant
DEACTIVATE	$ZIGLIB/std/c/darwin.zig	/pub const DEACTIVATE = 0x8/;"	constant
DEADLK	$ZIGLIB/std/os/wasi.zig	/DEADLK = 16/;"	field
DEADLOCK	$ZIGLIB/std/os/linux/errno/sparc.zig	/DEADLOCK = 108/;"	field
DEAD_NAME	$ZIGLIB/std/c/darwin.zig	/DEAD_NAME = 4/;"	field
DEBUG	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const DEBUG = 1/;"	constant
DEBUGGER_INACTIVE	$ZIGLIB/std/os/windows/win32error.zig	/DEBUGGER_INACTIVE = 1284/;"	field
DEBUG_ATTACH_FAILED	$ZIGLIB/std/os/windows/win32error.zig	/DEBUG_ATTACH_FAILED = 590/;"	field
DEBUG_STRIPPED	$ZIGLIB/std/coff.zig	/DEBUG_STRIPPED: u1 = 0/;"	field
DECNET	$ZIGLIB/std/os/linux.zig	/pub const DECNET = 261/;"	constant
DECRYPTION_FAILED	$ZIGLIB/std/os/windows/ntstatus.zig	/DECRYPTION_FAILED = 0xC000028B/;"	field
DECnet	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const DECnet = 12/;"	constant
DEFAULT	$ZIGLIB/std/os/windows/sublang.zig	/^pub const DEFAULT = 0x01/;"	constant
DEFAULT_MULTICAST_LOOP	$ZIGLIB/std/os/linux.zig	/pub const DEFAULT_MULTICAST_LOOP = 1/;"	constant
DEFAULT_MULTICAST_TTL	$ZIGLIB/std/os/linux.zig	/pub const DEFAULT_MULTICAST_TTL = 1/;"	constant
DEFAULT_SET	$ZIGLIB/std/c/darwin.zig	/DEFAULT_SET = 31/;"	field
DEFER_ACCEPT	$ZIGLIB/std/os/linux.zig	/pub const DEFER_ACCEPT = 9/;"	constant
DELAY_FIN_ACK	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const DELAY_FIN_ACK = 13/;"	constant
DELAY_IMPORT	$ZIGLIB/std/coff.zig	/DELAY_IMPORT = 13/;"	field
DELAY_LOAD_FAILED	$ZIGLIB/std/os/windows/win32error.zig	/DELAY_LOAD_FAILED = 1285/;"	field
DELETE	$ZIGLIB/std/os/windows.zig	/^pub const DELETE = 0x00010000/;"	constant
DELETE_PENDING	$ZIGLIB/std/os/windows/win32error.zig	/DELETE_PENDING = 303/;"	field
DELETE_SELF	$ZIGLIB/std/os/linux.zig	/pub const DELETE_SELF = 0x00000400/;"	constant
DELETING_ICM_XFORM	$ZIGLIB/std/os/windows/win32error.zig	/DELETING_ICM_XFORM = 2019/;"	field
DENIED	$ZIGLIB/std/c/darwin.zig	/DENIED = 53/;"	field
DENYWRITE	$ZIGLIB/std/os/linux/x86_64.zig	/pub const DENYWRITE = 0x0800/;"	constant
DEPENDENT_SERVICES_RUNNING	$ZIGLIB/std/os/windows/win32error.zig	/DEPENDENT_SERVICES_RUNNING = 1051/;"	field
DERIVE_KEY_CONTEXT	$ZIGLIB/std/crypto/blake3.zig	/^const DERIVE_KEY_CONTEXT: u8 = 1 << 5/;"	constant
DERIVE_KEY_MATERIAL	$ZIGLIB/std/crypto/blake3.zig	/^const DERIVE_KEY_MATERIAL: u8 = 1 << 6/;"	constant
DESTADDRREQ	$ZIGLIB/std/os/wasi.zig	/DESTADDRREQ = 17/;"	field
DESTINATION_ELEMENT_FULL	$ZIGLIB/std/os/windows/win32error.zig	/DESTINATION_ELEMENT_FULL = 1161/;"	field
DESTROY_OBJECT_OF_OTHER_THREAD	$ZIGLIB/std/os/windows/win32error.zig	/DESTROY_OBJECT_OF_OTHER_THREAD = 1435/;"	field
DETACH	$ZIGLIB/std/os/linux.zig	/pub const DETACH = 2/;"	constant
DETACHED	$ZIGLIB/std/os/linux.zig	/pub const DETACHED = 0x00400000/;"	constant
DETACH_BPF	$ZIGLIB/std/os/linux.zig	/pub const DETACH_BPF = DETACH_FILTER/;"	constant
DETACH_FILTER	$ZIGLIB/std/os/linux.zig	/pub const DETACH_FILTER = 27/;"	constant
DETACH_REUSEPORT_BPF	$ZIGLIB/std/os/linux.zig	/pub const DETACH_REUSEPORT_BPF = 71/;"	constant
DEVERR	$ZIGLIB/std/c/darwin.zig	/DEVERR = 83/;"	field
DEVICE_ALREADY_ATTACHED	$ZIGLIB/std/os/windows/win32error.zig	/DEVICE_ALREADY_ATTACHED = 548/;"	field
DEVICE_ALREADY_REMEMBERED	$ZIGLIB/std/os/windows/win32error.zig	/DEVICE_ALREADY_REMEMBERED = 1202/;"	field
DEVICE_BUSY	$ZIGLIB/std/os/windows/ntstatus.zig	/DEVICE_BUSY = 0x80000011/;"	field
DEVICE_CONFIGURATION_ERROR	$ZIGLIB/std/os/windows/ntstatus.zig	/DEVICE_CONFIGURATION_ERROR = 0xC0000182/;"	field
DEVICE_DATA_ERROR	$ZIGLIB/std/os/windows/ntstatus.zig	/DEVICE_DATA_ERROR = 0xC000009C/;"	field
DEVICE_DOES_NOT_EXIST	$ZIGLIB/std/os/windows/ntstatus.zig	/DEVICE_DOES_NOT_EXIST = 0xC00000C0/;"	field
DEVICE_DOOR_OPEN	$ZIGLIB/std/os/windows/win32error.zig	/DEVICE_DOOR_OPEN = 1166/;"	field
DEVICE_ENUMERATION_ERROR	$ZIGLIB/std/os/windows/win32error.zig	/DEVICE_ENUMERATION_ERROR = 648/;"	field
DEVICE_FEATURE_NOT_SUPPORTED	$ZIGLIB/std/os/windows/win32error.zig	/DEVICE_FEATURE_NOT_SUPPORTED = 316/;"	field
DEVICE_IN_USE	$ZIGLIB/std/os/windows/win32error.zig	/DEVICE_IN_USE = 2404/;"	field
DEVICE_NOT_CONNECTED	$ZIGLIB/std/os/windows/win32error.zig	/DEVICE_NOT_CONNECTED = 1167/;"	field
DEVICE_NOT_PARTITIONED	$ZIGLIB/std/os/windows/win32error.zig	/DEVICE_NOT_PARTITIONED = 1107/;"	field
DEVICE_NOT_READY	$ZIGLIB/std/os/windows/ntstatus.zig	/DEVICE_NOT_READY = 0xC00000A3/;"	field
DEVICE_NO_RESOURCES	$ZIGLIB/std/os/windows/win32error.zig	/DEVICE_NO_RESOURCES = 322/;"	field
DEVICE_OFF_LINE	$ZIGLIB/std/os/windows/ntstatus.zig	/DEVICE_OFF_LINE = 0x80000010/;"	field
DEVICE_PAPER_EMPTY	$ZIGLIB/std/os/windows/ntstatus.zig	/DEVICE_PAPER_EMPTY = 0x8000000E/;"	field
DEVICE_POWERED_OFF	$ZIGLIB/std/os/windows/ntstatus.zig	/DEVICE_POWERED_OFF = 0x8000000F/;"	field
DEVICE_PROTOCOL_ERROR	$ZIGLIB/std/os/windows/ntstatus.zig	/DEVICE_PROTOCOL_ERROR = 0xC0000186/;"	field
DEVICE_REINITIALIZATION_NEEDED	$ZIGLIB/std/os/windows/win32error.zig	/DEVICE_REINITIALIZATION_NEEDED = 1164/;"	field
DEVICE_REMOVED	$ZIGLIB/std/os/windows/win32error.zig	/DEVICE_REMOVED = 1617/;"	field
DEVICE_REQUIRES_CLEANING	$ZIGLIB/std/os/windows/win32error.zig	/DEVICE_REQUIRES_CLEANING = 1165/;"	field
DEVICE_SUPPORT_IN_PROGRESS	$ZIGLIB/std/os/windows/win32error.zig	/DEVICE_SUPPORT_IN_PROGRESS = 171/;"	field
DEVICE_TYPE	$ZIGLIB/std/os/windows.zig	/^pub const DEVICE_TYPE = ULONG/;"	constant
DEVICE_UNREACHABLE	$ZIGLIB/std/os/windows/win32error.zig	/DEVICE_UNREACHABLE = 321/;"	field
DEV_NOT_EXIST	$ZIGLIB/std/os/windows/win32error.zig	/DEV_NOT_EXIST = 55/;"	field
DFS_EXIT_PATH_FOUND	$ZIGLIB/std/os/windows/ntstatus.zig	/DFS_EXIT_PATH_FOUND = 0xC000009B/;"	field
DFS_UNAVAILABLE	$ZIGLIB/std/os/windows/ntstatus.zig	/DFS_UNAVAILABLE = 0xC000026D/;"	field
DGRAM	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const DGRAM = 2/;"	constant
DGRAM_ERRIND	$ZIGLIB/std/c/solaris.zig	/pub const DGRAM_ERRIND = 0x0200/;"	constant
DIFFERENT_SERVICE_ACCOUNT	$ZIGLIB/std/os/windows/win32error.zig	/DIFFERENT_SERVICE_ACCOUNT = 1079/;"	field
DIR64	$ZIGLIB/std/coff.zig	/DIR64 = 10/;"	field
DIRCOOKIE_START	$ZIGLIB/std/os/wasi.zig	/^pub const DIRCOOKIE_START: dircookie_t = 0/;"	constant
DIRECT	$ZIGLIB/std/os/linux/x86_64.zig	/pub const DIRECT = 0o40000/;"	constant
DIRECTORY	$ZIGLIB/std/os/windows/win32error.zig	/DIRECTORY = 267/;"	field
DIRECTORY_IS_A_REPARSE_POINT	$ZIGLIB/std/os/windows/ntstatus.zig	/DIRECTORY_IS_A_REPARSE_POINT = 0xC0000281/;"	field
DIRECTORY_NOT_EMPTY	$ZIGLIB/std/os/windows/ntstatus.zig	/DIRECTORY_NOT_EMPTY = 0xC0000101/;"	field
DIRECTORY_NOT_RM	$ZIGLIB/std/os/windows/ntstatus.zig	/DIRECTORY_NOT_RM = 0xC0190008/;"	field
DIRECTORY_NOT_SUPPORTED	$ZIGLIB/std/os/windows/win32error.zig	/DIRECTORY_NOT_SUPPORTED = 336/;"	field
DIRECTORY_SERVICE_REQUIRED	$ZIGLIB/std/os/windows/ntstatus.zig	/DIRECTORY_SERVICE_REQUIRED = 0xC00002B1/;"	field
DIRECT_ACCESS_HANDLE	$ZIGLIB/std/os/windows/win32error.zig	/DIRECT_ACCESS_HANDLE = 130/;"	field
DIRSYNC	$ZIGLIB/std/os/linux.zig	/pub const DIRSYNC = 128/;"	constant
DIR_NOT_EMPTY	$ZIGLIB/std/os/windows/win32error.zig	/DIR_NOT_EMPTY = 145/;"	field
DIR_NOT_ROOT	$ZIGLIB/std/os/windows/win32error.zig	/DIR_NOT_ROOT = 144/;"	field
DISABLE	$ZIGLIB/std/os/linux.zig	/pub const DISABLE = 9217/;"	constant
DISABLED	$ZIGLIB/std/os/linux/seccomp.zig	/pub const DISABLED = 0/;"	constant
DISABLE_IDN_ENCODING	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const DISABLE_IDN_ENCODING = 524288/;"	constant
DISCARD	$ZIGLIB/std/zig/c_translation.zig	/pub inline fn DISCARD(x: anytype) void {$/;"	function
DISCARDED	$ZIGLIB/std/os/windows/win32error.zig	/DISCARDED = 157/;"	field
DISCDATA	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const DISCDATA = 28674/;"	constant
DISCDATALEN	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const DISCDATALEN = 28678/;"	constant
DISCOPT	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const DISCOPT = 28675/;"	constant
DISCOPTLEN	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const DISCOPTLEN = 28679/;"	constant
DISK_CHANGE	$ZIGLIB/std/os/windows/win32error.zig	/DISK_CHANGE = 107/;"	field
DISK_CORRUPT	$ZIGLIB/std/os/windows/win32error.zig	/DISK_CORRUPT = 1393/;"	field
DISK_CORRUPT_ERROR	$ZIGLIB/std/os/windows/ntstatus.zig	/DISK_CORRUPT_ERROR = 0xC0000032/;"	field
DISK_FULL	$ZIGLIB/std/os/windows/win32error.zig	/DISK_FULL = 112/;"	field
DISK_OPERATION_FAILED	$ZIGLIB/std/os/windows/win32error.zig	/DISK_OPERATION_FAILED = 1127/;"	field
DISK_QUOTA_EXCEEDED	$ZIGLIB/std/os/windows/win32error.zig	/DISK_QUOTA_EXCEEDED = 1295/;"	field
DISK_RECALIBRATE_FAILED	$ZIGLIB/std/os/windows/win32error.zig	/DISK_RECALIBRATE_FAILED = 1126/;"	field
DISK_REPAIR_DISABLED	$ZIGLIB/std/os/windows/win32error.zig	/DISK_REPAIR_DISABLED = 780/;"	field
DISK_REPAIR_REDIRECTED	$ZIGLIB/std/os/windows/win32error.zig	/DISK_REPAIR_REDIRECTED = 792/;"	field
DISK_REPAIR_UNSUCCESSFUL	$ZIGLIB/std/os/windows/win32error.zig	/DISK_REPAIR_UNSUCCESSFUL = 793/;"	field
DISK_RESET_FAILED	$ZIGLIB/std/os/windows/win32error.zig	/DISK_RESET_FAILED = 1128/;"	field
DISK_RESOURCES_EXHAUSTED	$ZIGLIB/std/os/windows/win32error.zig	/DISK_RESOURCES_EXHAUSTED = 314/;"	field
DISK_TOO_FRAGMENTED	$ZIGLIB/std/os/windows/win32error.zig	/DISK_TOO_FRAGMENTED = 302/;"	field
DISPATCH_TIME_FOREVER	$ZIGLIB/std/c/darwin.zig	/^pub const DISPATCH_TIME_FOREVER = ~@as(dispatch_time_t, 0)/;"	constant
DISPATCH_TIME_NOW	$ZIGLIB/std/c/darwin.zig	/^pub const DISPATCH_TIME_NOW = @as(dispatch_time_t, 0)/;"	constant
DISPOSE_RECEIVE	$ZIGLIB/std/c/darwin.zig	/DISPOSE_RECEIVE = 24/;"	field
DISPOSE_SEND	$ZIGLIB/std/c/darwin.zig	/DISPOSE_SEND = 25/;"	field
DISPOSE_SEND_ONCE	$ZIGLIB/std/c/darwin.zig	/DISPOSE_SEND_ONCE = 26/;"	field
DIVEHI	$ZIGLIB/std/os/windows/lang.zig	/^pub const DIVEHI = 0x65/;"	constant
DIVEHI_MALDIVES	$ZIGLIB/std/os/windows/sublang.zig	/^pub const DIVEHI_MALDIVES = 0x01/;"	constant
DIVERT	$ZIGLIB/std/c/dragonfly.zig	/pub const DIVERT = 254/;"	constant
DLCurrentDirectory	$ZIGLIB/std/os/windows.zig	/DLCurrentDirectory: [0x20]RTL_DRIVE_LETTER_CURDIR/;"	field
DLL_INIT_FAILED	$ZIGLIB/std/os/windows/win32error.zig	/DLL_INIT_FAILED = 1114/;"	field
DLL_INIT_FAILED_LOGOFF	$ZIGLIB/std/os/windows/win32error.zig	/DLL_INIT_FAILED_LOGOFF = 624/;"	field
DLL_MIGHT_BE_INCOMPATIBLE	$ZIGLIB/std/os/windows/win32error.zig	/DLL_MIGHT_BE_INCOMPATIBLE = 687/;"	field
DLL_MIGHT_BE_INSECURE	$ZIGLIB/std/os/windows/win32error.zig	/DLL_MIGHT_BE_INSECURE = 686/;"	field
DLL_NOT_FOUND	$ZIGLIB/std/os/windows/win32error.zig	/DLL_NOT_FOUND = 1157/;"	field
DL_BEGINDRAG	$ZIGLIB/std/os/windows/user32.zig	/^pub const DL_BEGINDRAG = 0x0485/;"	constant
DL_CANCELDRAG	$ZIGLIB/std/os/windows/user32.zig	/^pub const DL_CANCELDRAG = 0x0488/;"	constant
DL_DRAGGING	$ZIGLIB/std/os/windows/user32.zig	/^pub const DL_DRAGGING = 0x0486/;"	constant
DL_DROPPED	$ZIGLIB/std/os/windows/user32.zig	/^pub const DL_DROPPED = 0x0487/;"	constant
DM_GETDEFID	$ZIGLIB/std/os/windows/user32.zig	/^pub const DM_GETDEFID = 0x0400/;"	constant
DM_REPOSITION	$ZIGLIB/std/os/windows/user32.zig	/^pub const DM_REPOSITION = 0x0402/;"	constant
DM_SETDEFID	$ZIGLIB/std/os/windows/user32.zig	/^pub const DM_SETDEFID = 0x0401/;"	constant
DNRTMSG	$ZIGLIB/std/os/linux.zig	/pub const DNRTMSG = 14/;"	constant
DNS_ONLY	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const DNS_ONLY = 16/;"	constant
DODUMP	$ZIGLIB/std/os/linux.zig	/pub const DODUMP = 17/;"	constant
DOFORK	$ZIGLIB/std/os/linux.zig	/pub const DOFORK = 11/;"	constant
DOMAIN	$ZIGLIB/std/os/linux.zig	/pub const DOMAIN = 4137/;"	constant
DOMAINNAME	$ZIGLIB/std/c/openbsd.zig	/pub const DOMAINNAME = 22/;"	constant
DOMAIN_CONTROLLER_EXISTS	$ZIGLIB/std/os/windows/win32error.zig	/DOMAIN_CONTROLLER_EXISTS = 1250/;"	field
DOMAIN_CONTROLLER_NOT_FOUND	$ZIGLIB/std/os/windows/win32error.zig	/DOMAIN_CONTROLLER_NOT_FOUND = 1908/;"	field
DOMAIN_CTRLR_CONFIG_ERROR	$ZIGLIB/std/os/windows/win32error.zig	/DOMAIN_CTRLR_CONFIG_ERROR = 581/;"	field
DOMAIN_EXISTS	$ZIGLIB/std/os/windows/win32error.zig	/DOMAIN_EXISTS = 1356/;"	field
DOMAIN_LIMIT_EXCEEDED	$ZIGLIB/std/os/windows/win32error.zig	/DOMAIN_LIMIT_EXCEEDED = 1357/;"	field
DOMAIN_TRUST_INCONSISTENT	$ZIGLIB/std/os/windows/win32error.zig	/DOMAIN_TRUST_INCONSISTENT = 1810/;"	field
DONE	$ZIGLIB/std/os/linux.zig	/DONE = 0x3/;"	field
DONTDUMP	$ZIGLIB/std/os/linux.zig	/pub const DONTDUMP = 16/;"	constant
DONTFORK	$ZIGLIB/std/os/linux.zig	/pub const DONTFORK = 10/;"	constant
DONTFRAG	$ZIGLIB/std/os/linux.zig	/pub const DONTFRAG = 62/;"	constant
DONTNEED	$ZIGLIB/std/os/linux.zig	/pub const DONTNEED = 6/;"	constant
DONTROUTE	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const DONTROUTE = 16/;"	constant
DONTWAIT	$ZIGLIB/std/os/linux.zig	/pub const DONTWAIT = 0x0040/;"	constant
DONT_FOLLOW	$ZIGLIB/std/os/linux.zig	/pub const DONT_FOLLOW = 0x02000000/;"	constant
DOOFUS	$ZIGLIB/std/c/freebsd.zig	/DOOFUS = 88/;"	field
DOTDOT	$ZIGLIB/std/os/linux/errno/sparc.zig	/DOTDOT = 88/;"	field
DOUBLE	$ZIGLIB/std/coff.zig	/DOUBLE = 7/;"	field
DOWNGRADE_DETECTED	$ZIGLIB/std/os/windows/win32error.zig	/DOWNGRADE_DETECTED = 1265/;"	field
DP_GETRAWENCRYPTED	$ZIGLIB/std/c/darwin.zig	/pub const DP_GETRAWENCRYPTED = 1/;"	constant
DP_GETRAWUNENCRYPTED	$ZIGLIB/std/c/darwin.zig	/pub const DP_GETRAWUNENCRYPTED = 2/;"	constant
DQUOT	$ZIGLIB/std/os/wasi.zig	/DQUOT = 19/;"	field
DRAIN	$ZIGLIB/std/os/linux.zig	/DRAIN/;"	field
DRIVERKIT	$ZIGLIB/std/macho.zig	/DRIVERKIT = 0x10/;"	field
DRIVERS_LEAKING_LOCKED_PAGES	$ZIGLIB/std/os/windows/win32error.zig	/DRIVERS_LEAKING_LOCKED_PAGES = 729/;"	field
DRIVER_BLOCKED	$ZIGLIB/std/os/windows/win32error.zig	/DRIVER_BLOCKED = 1275/;"	field
DRIVER_BLOCKED_CRITICAL	$ZIGLIB/std/os/windows/ntstatus.zig	/DRIVER_BLOCKED_CRITICAL = 0xC000036B/;"	field
DRIVER_CANCEL_TIMEOUT	$ZIGLIB/std/os/windows/win32error.zig	/DRIVER_CANCEL_TIMEOUT = 594/;"	field
DRIVER_DATABASE_ERROR	$ZIGLIB/std/os/windows/win32error.zig	/DRIVER_DATABASE_ERROR = 652/;"	field
DRIVER_ENTRYPOINT_NOT_FOUND	$ZIGLIB/std/os/windows/ntstatus.zig	/DRIVER_ENTRYPOINT_NOT_FOUND = 0xC0000263/;"	field
DRIVER_FAILED_PRIOR_UNLOAD	$ZIGLIB/std/os/windows/win32error.zig	/DRIVER_FAILED_PRIOR_UNLOAD = 654/;"	field
DRIVER_FAILED_SLEEP	$ZIGLIB/std/os/windows/win32error.zig	/DRIVER_FAILED_SLEEP = 633/;"	field
DRIVER_INTERNAL_ERROR	$ZIGLIB/std/os/windows/ntstatus.zig	/DRIVER_INTERNAL_ERROR = 0xC0000183/;"	field
DRIVER_ORDINAL_NOT_FOUND	$ZIGLIB/std/os/windows/ntstatus.zig	/DRIVER_ORDINAL_NOT_FOUND = 0xC0000262/;"	field
DRIVER_PROCESS_TERMINATED	$ZIGLIB/std/os/windows/win32error.zig	/DRIVER_PROCESS_TERMINATED = 1291/;"	field
DRIVER_UNABLE_TO_LOAD	$ZIGLIB/std/os/windows/ntstatus.zig	/DRIVER_UNABLE_TO_LOAD = 0xC000026C/;"	field
DRIVE_LOCKED	$ZIGLIB/std/os/windows/win32error.zig	/DRIVE_LOCKED = 108/;"	field
DROP_MEMBERSHIP	$ZIGLIB/std/os/linux.zig	/pub const DROP_MEMBERSHIP = 36/;"	constant
DROP_SOURCE_MEMBERSHIP	$ZIGLIB/std/os/linux.zig	/pub const DROP_SOURCE_MEMBERSHIP = 40/;"	constant
DSP24	$ZIGLIB/std/elf.zig	/DSP24 = 136/;"	field
DSPIC30F	$ZIGLIB/std/elf.zig	/DSPIC30F = 118/;"	field
DSTOPTS	$ZIGLIB/std/os/linux.zig	/pub const DSTOPTS = 60/;"	constant
DSUSP	$ZIGLIB/std/os/linux.zig	/pub const DSUSP = 11/;"	constant
DSYNC	$ZIGLIB/std/os/wasi.zig	/pub const DSYNC: fdflags_t = 0x0002/;"	constant
DS_ADMIN_LIMIT_EXCEEDED	$ZIGLIB/std/os/windows/ntstatus.zig	/DS_ADMIN_LIMIT_EXCEEDED = 0xC00002C1/;"	field
DS_AG_CANT_HAVE_UNIVERSAL_MEMBER	$ZIGLIB/std/os/windows/ntstatus.zig	/DS_AG_CANT_HAVE_UNIVERSAL_MEMBER = 0xC0000358/;"	field
DS_ATTRIBUTE_OR_VALUE_EXISTS	$ZIGLIB/std/os/windows/ntstatus.zig	/DS_ATTRIBUTE_OR_VALUE_EXISTS = 0xC00002A4/;"	field
DS_ATTRIBUTE_TYPE_UNDEFINED	$ZIGLIB/std/os/windows/ntstatus.zig	/DS_ATTRIBUTE_TYPE_UNDEFINED = 0xC00002A3/;"	field
DS_BUSY	$ZIGLIB/std/os/windows/ntstatus.zig	/DS_BUSY = 0xC00002A5/;"	field
DS_CANT_MOD_OBJ_CLASS	$ZIGLIB/std/os/windows/ntstatus.zig	/DS_CANT_MOD_OBJ_CLASS = 0xC00002AE/;"	field
DS_CANT_MOD_PRIMARYGROUPID	$ZIGLIB/std/os/windows/ntstatus.zig	/DS_CANT_MOD_PRIMARYGROUPID = 0xC00002D0/;"	field
DS_CANT_ON_NON_LEAF	$ZIGLIB/std/os/windows/ntstatus.zig	/DS_CANT_ON_NON_LEAF = 0xC00002AC/;"	field
DS_CANT_ON_RDN	$ZIGLIB/std/os/windows/ntstatus.zig	/DS_CANT_ON_RDN = 0xC00002AD/;"	field
DS_CANT_START	$ZIGLIB/std/os/windows/ntstatus.zig	/DS_CANT_START = 0xC00002E1/;"	field
DS_CROSS_DOM_MOVE_FAILED	$ZIGLIB/std/os/windows/ntstatus.zig	/DS_CROSS_DOM_MOVE_FAILED = 0xC00002AF/;"	field
DS_DOMAIN_NAME_EXISTS_IN_FOREST	$ZIGLIB/std/os/windows/ntstatus.zig	/DS_DOMAIN_NAME_EXISTS_IN_FOREST = 0xC000041A/;"	field
DS_DOMAIN_RENAME_IN_PROGRESS	$ZIGLIB/std/os/windows/ntstatus.zig	/DS_DOMAIN_RENAME_IN_PROGRESS = 0xC0000801/;"	field
DS_DUPLICATE_ID_FOUND	$ZIGLIB/std/os/windows/ntstatus.zig	/DS_DUPLICATE_ID_FOUND = 0xC0000405/;"	field
DS_FLAT_NAME_EXISTS_IN_FOREST	$ZIGLIB/std/os/windows/ntstatus.zig	/DS_FLAT_NAME_EXISTS_IN_FOREST = 0xC000041B/;"	field
DS_GC_NOT_AVAILABLE	$ZIGLIB/std/os/windows/ntstatus.zig	/DS_GC_NOT_AVAILABLE = 0xC00002B0/;"	field
DS_GC_REQUIRED	$ZIGLIB/std/os/windows/ntstatus.zig	/DS_GC_REQUIRED = 0xC00002E4/;"	field
DS_GLOBAL_CANT_HAVE_CROSSDOMAIN_MEMBER	$ZIGLIB/std/os/windows/ntstatus.zig	/DS_GLOBAL_CANT_HAVE_CROSSDOMAIN_MEMBER = 0xC00002DA/;"	field
DS_GLOBAL_CANT_HAVE_LOCAL_MEMBER	$ZIGLIB/std/os/windows/ntstatus.zig	/DS_GLOBAL_CANT_HAVE_LOCAL_MEMBER = 0xC00002D7/;"	field
DS_GLOBAL_CANT_HAVE_UNIVERSAL_MEMBER	$ZIGLIB/std/os/windows/ntstatus.zig	/DS_GLOBAL_CANT_HAVE_UNIVERSAL_MEMBER = 0xC00002D8/;"	field
DS_GROUP_CONVERSION_ERROR	$ZIGLIB/std/os/windows/ntstatus.zig	/DS_GROUP_CONVERSION_ERROR = 0xC0000406/;"	field
DS_HAVE_PRIMARY_MEMBERS	$ZIGLIB/std/os/windows/ntstatus.zig	/DS_HAVE_PRIMARY_MEMBERS = 0xC00002DC/;"	field
DS_INCORRECT_ROLE_OWNER	$ZIGLIB/std/os/windows/ntstatus.zig	/DS_INCORRECT_ROLE_OWNER = 0xC00002A9/;"	field
DS_INIT_FAILURE	$ZIGLIB/std/os/windows/ntstatus.zig	/DS_INIT_FAILURE = 0xC00002E2/;"	field
DS_INIT_FAILURE_CONSOLE	$ZIGLIB/std/os/windows/ntstatus.zig	/DS_INIT_FAILURE_CONSOLE = 0xC00002EC/;"	field
DS_INVALID_ATTRIBUTE_SYNTAX	$ZIGLIB/std/os/windows/ntstatus.zig	/DS_INVALID_ATTRIBUTE_SYNTAX = 0xC00002A2/;"	field
DS_INVALID_GROUP_TYPE	$ZIGLIB/std/os/windows/ntstatus.zig	/DS_INVALID_GROUP_TYPE = 0xC00002D4/;"	field
DS_LOCAL_CANT_HAVE_CROSSDOMAIN_LOCAL_MEMBER	$ZIGLIB/std/os/windows/ntstatus.zig	/DS_LOCAL_CANT_HAVE_CROSSDOMAIN_LOCAL_MEMBER = 0xC00002DB/;"	field
DS_LOCAL_MEMBER_OF_LOCAL_ONLY	$ZIGLIB/std/os/windows/ntstatus.zig	/DS_LOCAL_MEMBER_OF_LOCAL_ONLY = 0xC00002E5/;"	field
DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED	$ZIGLIB/std/os/windows/ntstatus.zig	/DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED = 0xC00002E7/;"	field
DS_MEMBERSHIP_EVALUATED_LOCALLY	$ZIGLIB/std/os/windows/ntstatus.zig	/DS_MEMBERSHIP_EVALUATED_LOCALLY = 0x00000121/;"	field
DS_NAME_NOT_UNIQUE	$ZIGLIB/std/os/windows/ntstatus.zig	/DS_NAME_NOT_UNIQUE = 0xC0000404/;"	field
DS_NO_ATTRIBUTE_OR_VALUE	$ZIGLIB/std/os/windows/ntstatus.zig	/DS_NO_ATTRIBUTE_OR_VALUE = 0xC00002A1/;"	field
DS_NO_FPO_IN_UNIVERSAL_GROUPS	$ZIGLIB/std/os/windows/ntstatus.zig	/DS_NO_FPO_IN_UNIVERSAL_GROUPS = 0xC00002E6/;"	field
DS_NO_MORE_RIDS	$ZIGLIB/std/os/windows/ntstatus.zig	/DS_NO_MORE_RIDS = 0xC00002A8/;"	field
DS_NO_NEST_GLOBALGROUP_IN_MIXEDDOMAIN	$ZIGLIB/std/os/windows/ntstatus.zig	/DS_NO_NEST_GLOBALGROUP_IN_MIXEDDOMAIN = 0xC00002D5/;"	field
DS_NO_NEST_LOCALGROUP_IN_MIXEDDOMAIN	$ZIGLIB/std/os/windows/ntstatus.zig	/DS_NO_NEST_LOCALGROUP_IN_MIXEDDOMAIN = 0xC00002D6/;"	field
DS_NO_RIDS_ALLOCATED	$ZIGLIB/std/os/windows/ntstatus.zig	/DS_NO_RIDS_ALLOCATED = 0xC00002A7/;"	field
DS_OBJ_CLASS_VIOLATION	$ZIGLIB/std/os/windows/ntstatus.zig	/DS_OBJ_CLASS_VIOLATION = 0xC00002AB/;"	field
DS_OID_MAPPED_GROUP_CANT_HAVE_MEMBERS	$ZIGLIB/std/os/windows/ntstatus.zig	/DS_OID_MAPPED_GROUP_CANT_HAVE_MEMBERS = 0xC000A087/;"	field
DS_OID_NOT_FOUND	$ZIGLIB/std/os/windows/ntstatus.zig	/DS_OID_NOT_FOUND = 0xC000A088/;"	field
DS_RIDMGR_INIT_ERROR	$ZIGLIB/std/os/windows/ntstatus.zig	/DS_RIDMGR_INIT_ERROR = 0xC00002AA/;"	field
DS_SAM_INIT_FAILURE	$ZIGLIB/std/os/windows/ntstatus.zig	/DS_SAM_INIT_FAILURE = 0xC00002CB/;"	field
DS_SAM_INIT_FAILURE_CONSOLE	$ZIGLIB/std/os/windows/ntstatus.zig	/DS_SAM_INIT_FAILURE_CONSOLE = 0xC00002ED/;"	field
DS_SENSITIVE_GROUP_VIOLATION	$ZIGLIB/std/os/windows/ntstatus.zig	/DS_SENSITIVE_GROUP_VIOLATION = 0xC00002CD/;"	field
DS_SHUTTING_DOWN	$ZIGLIB/std/os/windows/ntstatus.zig	/DS_SHUTTING_DOWN = 0x40000370/;"	field
DS_SRC_SID_EXISTS_IN_FOREST	$ZIGLIB/std/os/windows/ntstatus.zig	/DS_SRC_SID_EXISTS_IN_FOREST = 0xC0000419/;"	field
DS_UNAVAILABLE	$ZIGLIB/std/os/windows/ntstatus.zig	/DS_UNAVAILABLE = 0xC00002A6/;"	field
DS_UNIVERSAL_CANT_HAVE_LOCAL_MEMBER	$ZIGLIB/std/os/windows/ntstatus.zig	/DS_UNIVERSAL_CANT_HAVE_LOCAL_MEMBER = 0xC00002D9/;"	field
DS_VERSION_CHECK_FAILURE	$ZIGLIB/std/os/windows/win32error.zig	/DS_VERSION_CHECK_FAILURE = 643/;"	field
DTLB	$ZIGLIB/std/os/linux.zig	/DTLB/;"	field
DT_ADDRNUM	$ZIGLIB/std/elf.zig	/^pub const DT_ADDRNUM = 11/;"	constant
DT_ADDRRNGHI	$ZIGLIB/std/elf.zig	/^pub const DT_ADDRRNGHI = 0x6ffffeff/;"	constant
DT_ADDRRNGLO	$ZIGLIB/std/elf.zig	/^pub const DT_ADDRRNGLO = 0x6ffffe00/;"	constant
DT_ALPHA_NUM	$ZIGLIB/std/elf.zig	/^pub const DT_ALPHA_NUM = 1/;"	constant
DT_ALPHA_PLTRO	$ZIGLIB/std/elf.zig	/^pub const DT_ALPHA_PLTRO = (DT_LOPROC + 0)/;"	constant
DT_AUDIT	$ZIGLIB/std/elf.zig	/^pub const DT_AUDIT = 0x6ffffefc/;"	constant
DT_AUXILIARY	$ZIGLIB/std/elf.zig	/^pub const DT_AUXILIARY = 0x7ffffffd/;"	constant
DT_BIND_NOW	$ZIGLIB/std/elf.zig	/^pub const DT_BIND_NOW = 24/;"	constant
DT_CHECKSUM	$ZIGLIB/std/elf.zig	/^pub const DT_CHECKSUM = 0x6ffffdf8/;"	constant
DT_CONFIG	$ZIGLIB/std/elf.zig	/^pub const DT_CONFIG = 0x6ffffefa/;"	constant
DT_DEBUG	$ZIGLIB/std/elf.zig	/^pub const DT_DEBUG = 21/;"	constant
DT_DEPAUDIT	$ZIGLIB/std/elf.zig	/^pub const DT_DEPAUDIT = 0x6ffffefb/;"	constant
DT_ENCODING	$ZIGLIB/std/elf.zig	/^pub const DT_ENCODING = 32/;"	constant
DT_EXTRANUM	$ZIGLIB/std/elf.zig	/^pub const DT_EXTRANUM = 3/;"	constant
DT_FEATURE_1	$ZIGLIB/std/elf.zig	/^pub const DT_FEATURE_1 = 0x6ffffdfc/;"	constant
DT_FILTER	$ZIGLIB/std/elf.zig	/^pub const DT_FILTER = 0x7fffffff/;"	constant
DT_FINI	$ZIGLIB/std/elf.zig	/^pub const DT_FINI = 13/;"	constant
DT_FINI_ARRAY	$ZIGLIB/std/elf.zig	/^pub const DT_FINI_ARRAY = 26/;"	constant
DT_FINI_ARRAYSZ	$ZIGLIB/std/elf.zig	/^pub const DT_FINI_ARRAYSZ = 28/;"	constant
DT_FLAGS	$ZIGLIB/std/elf.zig	/^pub const DT_FLAGS = 30/;"	constant
DT_FLAGS_1	$ZIGLIB/std/elf.zig	/^pub const DT_FLAGS_1 = 0x6ffffffb/;"	constant
DT_GNU_CONFLICT	$ZIGLIB/std/elf.zig	/^pub const DT_GNU_CONFLICT = 0x6ffffef8/;"	constant
DT_GNU_CONFLICTSZ	$ZIGLIB/std/elf.zig	/^pub const DT_GNU_CONFLICTSZ = 0x6ffffdf6/;"	constant
DT_GNU_HASH	$ZIGLIB/std/elf.zig	/^pub const DT_GNU_HASH = 0x6ffffef5/;"	constant
DT_GNU_LIBLIST	$ZIGLIB/std/elf.zig	/^pub const DT_GNU_LIBLIST = 0x6ffffef9/;"	constant
DT_GNU_LIBLISTSZ	$ZIGLIB/std/elf.zig	/^pub const DT_GNU_LIBLISTSZ = 0x6ffffdf7/;"	constant
DT_GNU_PRELINKED	$ZIGLIB/std/elf.zig	/^pub const DT_GNU_PRELINKED = 0x6ffffdf5/;"	constant
DT_HASH	$ZIGLIB/std/elf.zig	/^pub const DT_HASH = 4/;"	constant
DT_HIOS	$ZIGLIB/std/elf.zig	/^pub const DT_HIOS = 0x6ffff000/;"	constant
DT_HIPROC	$ZIGLIB/std/elf.zig	/^pub const DT_HIPROC = 0x7fffffff/;"	constant
DT_IA_64_NUM	$ZIGLIB/std/elf.zig	/^pub const DT_IA_64_NUM = 1/;"	constant
DT_IA_64_PLT_RESERVE	$ZIGLIB/std/elf.zig	/^pub const DT_IA_64_PLT_RESERVE = (DT_LOPROC + 0)/;"	constant
DT_INIT	$ZIGLIB/std/elf.zig	/^pub const DT_INIT = 12/;"	constant
DT_INIT_ARRAY	$ZIGLIB/std/elf.zig	/^pub const DT_INIT_ARRAY = 25/;"	constant
DT_INIT_ARRAYSZ	$ZIGLIB/std/elf.zig	/^pub const DT_INIT_ARRAYSZ = 27/;"	constant
DT_JMPREL	$ZIGLIB/std/elf.zig	/^pub const DT_JMPREL = 23/;"	constant
DT_LOOS	$ZIGLIB/std/elf.zig	/^pub const DT_LOOS = 0x6000000d/;"	constant
DT_LOPROC	$ZIGLIB/std/elf.zig	/^pub const DT_LOPROC = 0x70000000/;"	constant
DT_MIPS_AUX_DYNAMIC	$ZIGLIB/std/elf.zig	/^pub const DT_MIPS_AUX_DYNAMIC = 0x70000031/;"	constant
DT_MIPS_BASE_ADDRESS	$ZIGLIB/std/elf.zig	/^pub const DT_MIPS_BASE_ADDRESS = 0x70000006/;"	constant
DT_MIPS_COMPACT_SIZE	$ZIGLIB/std/elf.zig	/^pub const DT_MIPS_COMPACT_SIZE = 0x7000002f/;"	constant
DT_MIPS_CONFLICT	$ZIGLIB/std/elf.zig	/^pub const DT_MIPS_CONFLICT = 0x70000008/;"	constant
DT_MIPS_CONFLICTNO	$ZIGLIB/std/elf.zig	/^pub const DT_MIPS_CONFLICTNO = 0x7000000b/;"	constant
DT_MIPS_CXX_FLAGS	$ZIGLIB/std/elf.zig	/^pub const DT_MIPS_CXX_FLAGS = 0x70000022/;"	constant
DT_MIPS_DELTA_CLASS	$ZIGLIB/std/elf.zig	/^pub const DT_MIPS_DELTA_CLASS = 0x70000017/;"	constant
DT_MIPS_DELTA_CLASSSYM	$ZIGLIB/std/elf.zig	/^pub const DT_MIPS_DELTA_CLASSSYM = 0x70000020/;"	constant
DT_MIPS_DELTA_CLASSSYM_NO	$ZIGLIB/std/elf.zig	/^pub const DT_MIPS_DELTA_CLASSSYM_NO = 0x70000021/;"	constant
DT_MIPS_DELTA_CLASS_NO	$ZIGLIB/std/elf.zig	/^pub const DT_MIPS_DELTA_CLASS_NO = 0x70000018/;"	constant
DT_MIPS_DELTA_INSTANCE	$ZIGLIB/std/elf.zig	/^pub const DT_MIPS_DELTA_INSTANCE = 0x70000019/;"	constant
DT_MIPS_DELTA_INSTANCE_NO	$ZIGLIB/std/elf.zig	/^pub const DT_MIPS_DELTA_INSTANCE_NO = 0x7000001a/;"	constant
DT_MIPS_DELTA_RELOC	$ZIGLIB/std/elf.zig	/^pub const DT_MIPS_DELTA_RELOC = 0x7000001b/;"	constant
DT_MIPS_DELTA_RELOC_NO	$ZIGLIB/std/elf.zig	/^pub const DT_MIPS_DELTA_RELOC_NO = 0x7000001c/;"	constant
DT_MIPS_DELTA_SYM	$ZIGLIB/std/elf.zig	/^pub const DT_MIPS_DELTA_SYM = 0x7000001d/;"	constant
DT_MIPS_DELTA_SYM_NO	$ZIGLIB/std/elf.zig	/^pub const DT_MIPS_DELTA_SYM_NO = 0x7000001e/;"	constant
DT_MIPS_DYNSTR_ALIGN	$ZIGLIB/std/elf.zig	/^pub const DT_MIPS_DYNSTR_ALIGN = 0x7000002b/;"	constant
DT_MIPS_FLAGS	$ZIGLIB/std/elf.zig	/^pub const DT_MIPS_FLAGS = 0x70000005/;"	constant
DT_MIPS_GOTSYM	$ZIGLIB/std/elf.zig	/^pub const DT_MIPS_GOTSYM = 0x70000013/;"	constant
DT_MIPS_GP_VALUE	$ZIGLIB/std/elf.zig	/^pub const DT_MIPS_GP_VALUE = 0x70000030/;"	constant
DT_MIPS_HIDDEN_GOTIDX	$ZIGLIB/std/elf.zig	/^pub const DT_MIPS_HIDDEN_GOTIDX = 0x70000027/;"	constant
DT_MIPS_HIPAGENO	$ZIGLIB/std/elf.zig	/^pub const DT_MIPS_HIPAGENO = 0x70000014/;"	constant
DT_MIPS_ICHECKSUM	$ZIGLIB/std/elf.zig	/^pub const DT_MIPS_ICHECKSUM = 0x70000003/;"	constant
DT_MIPS_INTERFACE	$ZIGLIB/std/elf.zig	/^pub const DT_MIPS_INTERFACE = 0x7000002a/;"	constant
DT_MIPS_INTERFACE_SIZE	$ZIGLIB/std/elf.zig	/^pub const DT_MIPS_INTERFACE_SIZE = 0x7000002c/;"	constant
DT_MIPS_IVERSION	$ZIGLIB/std/elf.zig	/^pub const DT_MIPS_IVERSION = 0x70000004/;"	constant
DT_MIPS_LIBLIST	$ZIGLIB/std/elf.zig	/^pub const DT_MIPS_LIBLIST = 0x70000009/;"	constant
DT_MIPS_LIBLISTNO	$ZIGLIB/std/elf.zig	/^pub const DT_MIPS_LIBLISTNO = 0x70000010/;"	constant
DT_MIPS_LOCALPAGE_GOTIDX	$ZIGLIB/std/elf.zig	/^pub const DT_MIPS_LOCALPAGE_GOTIDX = 0x70000025/;"	constant
DT_MIPS_LOCAL_GOTIDX	$ZIGLIB/std/elf.zig	/^pub const DT_MIPS_LOCAL_GOTIDX = 0x70000026/;"	constant
DT_MIPS_LOCAL_GOTNO	$ZIGLIB/std/elf.zig	/^pub const DT_MIPS_LOCAL_GOTNO = 0x7000000a/;"	constant
DT_MIPS_MSYM	$ZIGLIB/std/elf.zig	/^pub const DT_MIPS_MSYM = 0x70000007/;"	constant
DT_MIPS_NUM	$ZIGLIB/std/elf.zig	/^pub const DT_MIPS_NUM = 0x36/;"	constant
DT_MIPS_OPTIONS	$ZIGLIB/std/elf.zig	/^pub const DT_MIPS_OPTIONS = 0x70000029/;"	constant
DT_MIPS_PERF_SUFFIX	$ZIGLIB/std/elf.zig	/^pub const DT_MIPS_PERF_SUFFIX = 0x7000002e/;"	constant
DT_MIPS_PIXIE_INIT	$ZIGLIB/std/elf.zig	/^pub const DT_MIPS_PIXIE_INIT = 0x70000023/;"	constant
DT_MIPS_PLTGOT	$ZIGLIB/std/elf.zig	/^pub const DT_MIPS_PLTGOT = 0x70000032/;"	constant
DT_MIPS_PROTECTED_GOTIDX	$ZIGLIB/std/elf.zig	/^pub const DT_MIPS_PROTECTED_GOTIDX = 0x70000028/;"	constant
DT_MIPS_RLD_MAP	$ZIGLIB/std/elf.zig	/^pub const DT_MIPS_RLD_MAP = 0x70000016/;"	constant
DT_MIPS_RLD_MAP_REL	$ZIGLIB/std/elf.zig	/^pub const DT_MIPS_RLD_MAP_REL = 0x70000035/;"	constant
DT_MIPS_RLD_TEXT_RESOLVE_ADDR	$ZIGLIB/std/elf.zig	/^pub const DT_MIPS_RLD_TEXT_RESOLVE_ADDR = 0x7000002d/;"	constant
DT_MIPS_RLD_VERSION	$ZIGLIB/std/elf.zig	/^pub const DT_MIPS_RLD_VERSION = 0x70000001/;"	constant
DT_MIPS_RWPLT	$ZIGLIB/std/elf.zig	/^pub const DT_MIPS_RWPLT = 0x70000034/;"	constant
DT_MIPS_SYMBOL_LIB	$ZIGLIB/std/elf.zig	/^pub const DT_MIPS_SYMBOL_LIB = 0x70000024/;"	constant
DT_MIPS_SYMTABNO	$ZIGLIB/std/elf.zig	/^pub const DT_MIPS_SYMTABNO = 0x70000011/;"	constant
DT_MIPS_TIME_STAMP	$ZIGLIB/std/elf.zig	/^pub const DT_MIPS_TIME_STAMP = 0x70000002/;"	constant
DT_MIPS_UNREFEXTNO	$ZIGLIB/std/elf.zig	/^pub const DT_MIPS_UNREFEXTNO = 0x70000012/;"	constant
DT_MOVEENT	$ZIGLIB/std/elf.zig	/^pub const DT_MOVEENT = 0x6ffffdfa/;"	constant
DT_MOVESZ	$ZIGLIB/std/elf.zig	/^pub const DT_MOVESZ = 0x6ffffdfb/;"	constant
DT_MOVETAB	$ZIGLIB/std/elf.zig	/^pub const DT_MOVETAB = 0x6ffffefe/;"	constant
DT_NEEDED	$ZIGLIB/std/elf.zig	/^pub const DT_NEEDED = 1/;"	constant
DT_NIOS2_GP	$ZIGLIB/std/elf.zig	/^pub const DT_NIOS2_GP = 0x70000002/;"	constant
DT_NULL	$ZIGLIB/std/elf.zig	/^pub const DT_NULL = 0/;"	constant
DT_NUM	$ZIGLIB/std/elf.zig	/^pub const DT_NUM = 35/;"	constant
DT_PLTGOT	$ZIGLIB/std/elf.zig	/^pub const DT_PLTGOT = 3/;"	constant
DT_PLTPAD	$ZIGLIB/std/elf.zig	/^pub const DT_PLTPAD = 0x6ffffefd/;"	constant
DT_PLTPADSZ	$ZIGLIB/std/elf.zig	/^pub const DT_PLTPADSZ = 0x6ffffdf9/;"	constant
DT_PLTREL	$ZIGLIB/std/elf.zig	/^pub const DT_PLTREL = 20/;"	constant
DT_PLTRELSZ	$ZIGLIB/std/elf.zig	/^pub const DT_PLTRELSZ = 2/;"	constant
DT_POSFLAG_1	$ZIGLIB/std/elf.zig	/^pub const DT_POSFLAG_1 = 0x6ffffdfd/;"	constant
DT_PPC64_GLINK	$ZIGLIB/std/elf.zig	/^pub const DT_PPC64_GLINK = (DT_LOPROC + 0)/;"	constant
DT_PPC64_NUM	$ZIGLIB/std/elf.zig	/^pub const DT_PPC64_NUM = 4/;"	constant
DT_PPC64_OPD	$ZIGLIB/std/elf.zig	/^pub const DT_PPC64_OPD = (DT_LOPROC + 1)/;"	constant
DT_PPC64_OPDSZ	$ZIGLIB/std/elf.zig	/^pub const DT_PPC64_OPDSZ = (DT_LOPROC + 2)/;"	constant
DT_PPC64_OPT	$ZIGLIB/std/elf.zig	/^pub const DT_PPC64_OPT = (DT_LOPROC + 3)/;"	constant
DT_PPC_GOT	$ZIGLIB/std/elf.zig	/^pub const DT_PPC_GOT = (DT_LOPROC + 0)/;"	constant
DT_PPC_NUM	$ZIGLIB/std/elf.zig	/^pub const DT_PPC_NUM = 2/;"	constant
DT_PPC_OPT	$ZIGLIB/std/elf.zig	/^pub const DT_PPC_OPT = (DT_LOPROC + 1)/;"	constant
DT_PREINIT_ARRAY	$ZIGLIB/std/elf.zig	/^pub const DT_PREINIT_ARRAY = 32/;"	constant
DT_PREINIT_ARRAYSZ	$ZIGLIB/std/elf.zig	/^pub const DT_PREINIT_ARRAYSZ = 33/;"	constant
DT_PROCNUM	$ZIGLIB/std/elf.zig	/^pub const DT_PROCNUM = DT_MIPS_NUM/;"	constant
DT_REL	$ZIGLIB/std/elf.zig	/^pub const DT_REL = 17/;"	constant
DT_RELA	$ZIGLIB/std/elf.zig	/^pub const DT_RELA = 7/;"	constant
DT_RELACOUNT	$ZIGLIB/std/elf.zig	/^pub const DT_RELACOUNT = 0x6ffffff9/;"	constant
DT_RELAENT	$ZIGLIB/std/elf.zig	/^pub const DT_RELAENT = 9/;"	constant
DT_RELASZ	$ZIGLIB/std/elf.zig	/^pub const DT_RELASZ = 8/;"	constant
DT_RELCOUNT	$ZIGLIB/std/elf.zig	/^pub const DT_RELCOUNT = 0x6ffffffa/;"	constant
DT_RELENT	$ZIGLIB/std/elf.zig	/^pub const DT_RELENT = 19/;"	constant
DT_RELSZ	$ZIGLIB/std/elf.zig	/^pub const DT_RELSZ = 18/;"	constant
DT_RPATH	$ZIGLIB/std/elf.zig	/^pub const DT_RPATH = 15/;"	constant
DT_RUNPATH	$ZIGLIB/std/elf.zig	/^pub const DT_RUNPATH = 29/;"	constant
DT_SONAME	$ZIGLIB/std/elf.zig	/^pub const DT_SONAME = 14/;"	constant
DT_SPARC_NUM	$ZIGLIB/std/elf.zig	/^pub const DT_SPARC_NUM = 2/;"	constant
DT_SPARC_REGISTER	$ZIGLIB/std/elf.zig	/^pub const DT_SPARC_REGISTER = 0x70000001/;"	constant
DT_STRSZ	$ZIGLIB/std/elf.zig	/^pub const DT_STRSZ = 10/;"	constant
DT_STRTAB	$ZIGLIB/std/elf.zig	/^pub const DT_STRTAB = 5/;"	constant
DT_SYMBOLIC	$ZIGLIB/std/elf.zig	/^pub const DT_SYMBOLIC = 16/;"	constant
DT_SYMENT	$ZIGLIB/std/elf.zig	/^pub const DT_SYMENT = 11/;"	constant
DT_SYMINENT	$ZIGLIB/std/elf.zig	/^pub const DT_SYMINENT = 0x6ffffdff/;"	constant
DT_SYMINFO	$ZIGLIB/std/elf.zig	/^pub const DT_SYMINFO = 0x6ffffeff/;"	constant
DT_SYMINSZ	$ZIGLIB/std/elf.zig	/^pub const DT_SYMINSZ = 0x6ffffdfe/;"	constant
DT_SYMTAB	$ZIGLIB/std/elf.zig	/^pub const DT_SYMTAB = 6/;"	constant
DT_SYMTAB_SHNDX	$ZIGLIB/std/elf.zig	/^pub const DT_SYMTAB_SHNDX = 34/;"	constant
DT_TEXTREL	$ZIGLIB/std/elf.zig	/^pub const DT_TEXTREL = 22/;"	constant
DT_TLSDESC_GOT	$ZIGLIB/std/elf.zig	/^pub const DT_TLSDESC_GOT = 0x6ffffef7/;"	constant
DT_TLSDESC_PLT	$ZIGLIB/std/elf.zig	/^pub const DT_TLSDESC_PLT = 0x6ffffef6/;"	constant
DT_VALNUM	$ZIGLIB/std/elf.zig	/^pub const DT_VALNUM = 12/;"	constant
DT_VALRNGHI	$ZIGLIB/std/elf.zig	/^pub const DT_VALRNGHI = 0x6ffffdff/;"	constant
DT_VALRNGLO	$ZIGLIB/std/elf.zig	/^pub const DT_VALRNGLO = 0x6ffffd00/;"	constant
DT_VERDEF	$ZIGLIB/std/elf.zig	/^pub const DT_VERDEF = 0x6ffffffc/;"	constant
DT_VERDEFNUM	$ZIGLIB/std/elf.zig	/^pub const DT_VERDEFNUM = 0x6ffffffd/;"	constant
DT_VERNEED	$ZIGLIB/std/elf.zig	/^pub const DT_VERNEED = 0x6ffffffe/;"	constant
DT_VERNEEDNUM	$ZIGLIB/std/elf.zig	/^pub const DT_VERNEEDNUM = 0x6fffffff/;"	constant
DT_VERSIONTAGNUM	$ZIGLIB/std/elf.zig	/^pub const DT_VERSIONTAGNUM = 16/;"	constant
DT_VERSYM	$ZIGLIB/std/elf.zig	/^pub const DT_VERSYM = 0x6ffffff0/;"	constant
DUMMY	$ZIGLIB/std/os/linux.zig	/DUMMY/;"	field
DUMMYSTRUCTNAME	$ZIGLIB/std/os/windows.zig	/DUMMYSTRUCTNAME: packed struct {$/;"	field
DUMMYUNIONNAME	$ZIGLIB/std/os/windows.zig	/DUMMYUNIONNAME: extern union {$/;"	field
DUMPDEV	$ZIGLIB/std/c/dragonfly.zig	/pub const DUMPDEV = 29/;"	constant
DUP2FD	$ZIGLIB/std/c/solaris.zig	/pub const DUP2FD = 9/;"	constant
DUP2FD_CLOEXEC	$ZIGLIB/std/c/solaris.zig	/pub const DUP2FD_CLOEXEC = 36/;"	constant
DUPFD	$ZIGLIB/std/os/linux/x86_64.zig	/pub const DUPFD = 0/;"	constant
DUPFD_CLOEXEC	$ZIGLIB/std/c/solaris.zig	/pub const DUPFD_CLOEXEC = 37/;"	constant
DUPLICATE_NAME	$ZIGLIB/std/os/windows/ntstatus.zig	/DUPLICATE_NAME = 0xC00000BD/;"	field
DUPLICATE_OBJECTID	$ZIGLIB/std/os/windows/ntstatus.zig	/DUPLICATE_OBJECTID = 0xC000022A/;"	field
DUPLICATE_PRIVILEGES	$ZIGLIB/std/os/windows/win32error.zig	/DUPLICATE_PRIVILEGES = 311/;"	field
DUPLICATE_SAME_ACCESS	$ZIGLIB/std/os/windows.zig	/^pub const DUPLICATE_SAME_ACCESS = 2/;"	constant
DUPLICATE_SERVICE_NAME	$ZIGLIB/std/os/windows/win32error.zig	/DUPLICATE_SERVICE_NAME = 1078/;"	field
DUPLICATE_TAG	$ZIGLIB/std/os/windows/win32error.zig	/DUPLICATE_TAG = 2014/;"	field
DUP_DOMAINNAME	$ZIGLIB/std/os/windows/win32error.zig	/DUP_DOMAINNAME = 1221/;"	field
DUP_NAME	$ZIGLIB/std/os/windows/win32error.zig	/DUP_NAME = 52/;"	field
DUTCH	$ZIGLIB/std/os/windows/sublang.zig	/^pub const DUTCH = 0x01/;"	constant
DUTCH_BELGIAN	$ZIGLIB/std/os/windows/sublang.zig	/^pub const DUTCH_BELGIAN = 0x02/;"	constant
DWARF	$ZIGLIB/std/macho.zig	/DWARF = 4/;"	field
DWORD	$ZIGLIB/std/os/windows.zig	/pub const DWORD: ULONG = 4/;"	constant
DWORD64	$ZIGLIB/std/os/windows.zig	/^pub const DWORD64 = u64/;"	constant
DWORD_BIG_ENDIAN	$ZIGLIB/std/os/windows.zig	/pub const DWORD_BIG_ENDIAN: ULONG = 5/;"	constant
DWORD_LITTLE_ENDIAN	$ZIGLIB/std/os/windows.zig	/pub const DWORD_LITTLE_ENDIAN: ULONG = 4/;"	constant
DWORD_PTR	$ZIGLIB/std/os/windows.zig	/^pub const DWORD_PTR = ULONG_PTR/;"	constant
DYLD_ENVIRONMENT	$ZIGLIB/std/macho.zig	/DYLD_ENVIRONMENT = 0x27/;"	field
DYLD_INFO	$ZIGLIB/std/macho.zig	/DYLD_INFO = 0x22/;"	field
DYLD_INFO_ONLY	$ZIGLIB/std/macho.zig	/DYLD_INFO_ONLY = (0x22 | LC_REQ_DYLD)/;"	field
DYLIB_CODE_SIGN_DRS	$ZIGLIB/std/macho.zig	/DYLIB_CODE_SIGN_DRS = 0x2B/;"	field
DYNAMIC_BASE	$ZIGLIB/std/coff.zig	/DYNAMIC_BASE: u1 = 0/;"	field
DYNLINK_FROM_INVALID_RING	$ZIGLIB/std/os/windows/win32error.zig	/DYNLINK_FROM_INVALID_RING = 196/;"	field
DYSYMTAB	$ZIGLIB/std/macho.zig	/DYSYMTAB = 0xb/;"	field
DarwinImpl	$ZIGLIB/std/Thread/Mutex.zig	/^const DarwinImpl = struct {$/;"	struct
DarwinSDK	$ZIGLIB/std/zig/system/darwin.zig	/^pub const DarwinSDK = struct {$/;"	struct
Data	$ZIGLIB/std/zig/Ast.zig	/pub const Data = struct {$/;"	struct
Data1	$ZIGLIB/std/os/windows.zig	/Data1: u32/;"	field
Data2	$ZIGLIB/std/os/windows.zig	/Data2: u16/;"	field
Data3	$ZIGLIB/std/os/windows.zig	/Data3: u16/;"	field
Data4	$ZIGLIB/std/os/windows.zig	/Data4: [8]u8/;"	field
DataBuffer	$ZIGLIB/std/os/windows.zig	/DataBuffer: [1]UCHAR/;"	field
DataCrc	$ZIGLIB/std/pdb.zig	/DataCrc: u32/;"	field
DataFlagsPad	$ZIGLIB/std/os/windows.zig	/DataFlagsPad: [1]ULONG/;"	field
DataList	$ZIGLIB/std/array_hash_map.zig	/pub const DataList = std.MultiArrayList(Data)/;"	constant
DataOffset	$ZIGLIB/std/os/windows.zig	/DataOffset: DWORD/;"	field
DataSelector	$ZIGLIB/std/os/windows.zig	/DataSelector: WORD/;"	field
Date	$ZIGLIB/std/crypto/Certificate.zig	/^const Date = struct {$/;"	struct
DaySeconds	$ZIGLIB/std/time/epoch.zig	/^pub const DaySeconds = struct {$/;"	struct
DbgConsoleBrokerEnabled	$ZIGLIB/std/os/windows.zig	/DbgConsoleBrokerEnabled: u1/;"	field
DbgDynProcessorEnabled	$ZIGLIB/std/os/windows.zig	/DbgDynProcessorEnabled: u1/;"	field
DbgElevationEnabled	$ZIGLIB/std/os/windows.zig	/DbgElevationEnabled: u1/;"	field
DbgEnd	$ZIGLIB/std/pdb.zig	/DbgEnd: u32/;"	field
DbgErrorPortPresent	$ZIGLIB/std/os/windows.zig	/DbgErrorPortPresent: u1/;"	field
DbgInstallerDetectEnabled	$ZIGLIB/std/os/windows.zig	/DbgInstallerDetectEnabled: u1/;"	field
DbgLkgEnabled	$ZIGLIB/std/os/windows.zig	/DbgLkgEnabled: u1/;"	field
DbgMultiSessionSku	$ZIGLIB/std/os/windows.zig	/DbgMultiSessionSku: u1/;"	field
DbgMultiUsersInSessionSku	$ZIGLIB/std/os/windows.zig	/DbgMultiUsersInSessionSku: u1/;"	field
DbgSecureBootEnabled	$ZIGLIB/std/os/windows.zig	/DbgSecureBootEnabled: u1/;"	field
DbgStart	$ZIGLIB/std/pdb.zig	/DbgStart: u32/;"	field
DbgStateSeparationEnabled	$ZIGLIB/std/os/windows.zig	/DbgStateSeparationEnabled: u1/;"	field
DbgVirtEnabled	$ZIGLIB/std/os/windows.zig	/DbgVirtEnabled: u1/;"	field
DbiStreamHeader	$ZIGLIB/std/pdb.zig	/^pub const DbiStreamHeader = extern struct {$/;"	struct
Deadline	$ZIGLIB/std/Thread/Futex.zig	/^pub const Deadline = struct {$/;"	struct
Debug	$ZIGLIB/std/builtin.zig	/Debug/;"	field
DebugControl	$ZIGLIB/std/os/windows.zig	/DebugControl: DWORD64/;"	field
DebugDirectoryEntry	$ZIGLIB/std/coff.zig	/^pub const DebugDirectoryEntry = extern struct {$/;"	struct
DebugFlags	$ZIGLIB/std/os/windows.zig	/DebugFlags: ULONG/;"	field
DebugImpl	$ZIGLIB/std/Thread/Mutex.zig	/^const DebugImpl = struct {$/;"	struct
DebugInfo	$ZIGLIB/std/os/windows.zig	/DebugInfo: *RTL_CRITICAL_SECTION_DEBUG/;"	field
DebugInfoDefinition	$ZIGLIB/std/coff.zig	/^pub const DebugInfoDefinition = struct {$/;"	struct
DebugSubsectionHeader	$ZIGLIB/std/pdb.zig	/^pub const DebugSubsectionHeader = extern struct {$/;"	struct
DebugSubsectionKind	$ZIGLIB/std/pdb.zig	/^pub const DebugSubsectionKind = enum(u32) {$/;"	enum
DebugType	$ZIGLIB/std/coff.zig	/^pub const DebugType = enum(u32) {$/;"	enum
Decimal	$ZIGLIB/std/fmt/parse_float/decimal.zig	/^pub fn Decimal(comptime T: type) type {$/;"	function
DeclEnum	$ZIGLIB/std/meta.zig	/^pub fn DeclEnum(comptime T: type) type {$/;"	function
DeclTag	$ZIGLIB/std/os/linux/bpf/btf.zig	/^pub const DeclTag = extern struct {$/;"	struct
DeclType	$ZIGLIB/std/meta/trait.zig	/const DeclType = @TypeOf(@field(T, name))/;"	constant
Declaration	$ZIGLIB/std/builtin.zig	/pub const Declaration = struct {$/;"	struct
DecodeError	$ZIGLIB/std/compress/xz/block.zig	/^const DecodeError = error{$/;"	constant
Decoder	$ZIGLIB/std/crypto/tls.zig	/^pub const Decoder = struct {$/;"	struct
DecoderState	$ZIGLIB/std/compress/lzma/decode.zig	/^pub const DecoderState = struct {$/;"	struct
Decompress	$ZIGLIB/std/compress/xz.zig	/^pub fn Decompress(comptime ReaderType: type) type {$/;"	function
Decompressor	$ZIGLIB/std/compress/deflate/decompressor.zig	/^pub fn Decompressor(comptime ReaderType: type) type {$/;"	function
DecompressorState	$ZIGLIB/std/compress/deflate/decompressor.zig	/^const DecompressorState = enum {$/;"	enum
DecryptCtx	$ZIGLIB/std/crypto/aes_ocb.zig	/const DecryptCtx = aes.AesDecryptCtx(Aes)/;"	constant
Deep	$ZIGLIB/std/hash/auto_hash.zig	/Deep/;"	field
DeepRecursive	$ZIGLIB/std/hash/auto_hash.zig	/DeepRecursive/;"	field
Default	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/Default = 0/;"	field
DefaultCsprng	$ZIGLIB/std/rand.zig	/^pub const DefaultCsprng = Xoodoo/;"	constant
DefaultData	$ZIGLIB/std/os/windows.zig	/DefaultData: ?*anyopaque/;"	field
DefaultLength	$ZIGLIB/std/os/windows.zig	/DefaultLength: ULONG/;"	field
DefaultPrng	$ZIGLIB/std/rand.zig	/^pub const DefaultPrng = Xoshiro256/;"	constant
DefaultRwLock	$ZIGLIB/std/Thread/RwLock.zig	/^pub const DefaultRwLock = struct {$/;"	struct
DefaultType	$ZIGLIB/std/os/windows.zig	/DefaultType: ULONG/;"	field
DeflateFast	$ZIGLIB/std/compress/deflate/deflate_fast.zig	/^pub const DeflateFast = struct {$/;"	struct
DeflateTest	$ZIGLIB/std/compress/deflate/compressor.zig	/^const DeflateTest = struct {$/;"	struct
Delay	$ZIGLIB/std/os/uefi/protocols/ip6_protocol.zig	/Delay/;"	field
DelayQueue	$ZIGLIB/std/event/loop.zig	/const DelayQueue = struct {$/;"	struct
DelayVariation	$ZIGLIB/std/os/windows/ws2_32.zig	/DelayVariation: u32/;"	field
Delete	$ZIGLIB/std/fs/watch.zig	/Delete/;"	field
DeleteDirError	$ZIGLIB/std/os.zig	/^pub const DeleteDirError = error{$/;"	constant
DeleteFile	$ZIGLIB/std/os/windows.zig	/^pub fn DeleteFile(sub_path_w: []const u16, options: DeleteFileOptions) DeleteFileError!void {$/;"	function
DeleteFileError	$ZIGLIB/std/os/windows.zig	/^pub const DeleteFileError = error{$/;"	constant
DeleteFileOptions	$ZIGLIB/std/os/windows.zig	/^pub const DeleteFileOptions = struct {$/;"	struct
DeletePending	$ZIGLIB/std/os/windows.zig	/DeletePending: BOOLEAN/;"	field
DeleteTreeError	$ZIGLIB/std/fs.zig	/pub const DeleteTreeError = error{$/;"	constant
DemoteToHelperInvocationEXT	$ZIGLIB/std/target/spirv.zig	/DemoteToHelperInvocationEXT/;"	field
DenormFlushToZero	$ZIGLIB/std/target/spirv.zig	/DenormFlushToZero/;"	field
DenormPreserve	$ZIGLIB/std/target/spirv.zig	/DenormPreserve/;"	field
Dependency	$ZIGLIB/std/Build.zig	/^pub const Dependency = struct {$/;"	struct
DerivativeControl	$ZIGLIB/std/target/spirv.zig	/DerivativeControl/;"	field
Desktop	$ZIGLIB/std/os/windows.zig	/Desktop: UNICODE_STRING/;"	field
DestroyMempool	$ZIGLIB/std/valgrind.zig	/DestroyMempool = 4868/;"	field
DetectError	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/^pub const DetectError = error{$/;"	constant
DeviceEnqueue	$ZIGLIB/std/target/spirv.zig	/DeviceEnqueue/;"	field
DeviceError	$ZIGLIB/std/os/uefi/status.zig	/DeviceError = high_bit | 7/;"	field
DeviceGroup	$ZIGLIB/std/target/spirv.zig	/DeviceGroup/;"	field
DeviceIoControl	$ZIGLIB/std/os/windows.zig	/^pub fn DeviceIoControl($/;"	function
DeviceIoControlError	$ZIGLIB/std/os/windows.zig	/^pub const DeviceIoControlError = error{ AccessDenied, Unexpected }/;"	constant
DeviceLogicalUnitDevicePath	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/pub const DeviceLogicalUnitDevicePath = extern struct {$/;"	struct
DeviceNameLength	$ZIGLIB/std/os/windows.zig	/DeviceNameLength: USHORT/;"	field
DeviceNameOffset	$ZIGLIB/std/os/windows.zig	/DeviceNameOffset: ULONG/;"	field
DevicePath	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/^pub const DevicePath = union(DevicePathType) {$/;"	union
DevicePathProtocol	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/^pub const DevicePathProtocol = extern struct {$/;"	struct
DevicePathType	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/^pub const DevicePathType = enum(u8) {$/;"	enum
Dhcp	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/Dhcp = 0/;"	field
Diagnostics	$ZIGLIB/std/zig/CrossTarget.zig	/pub const Diagnostics = struct {$/;"	struct
DictDecoder	$ZIGLIB/std/compress/deflate/dict_decoder.zig	/^pub const DictDecoder = struct {$/;"	struct
DirList	$ZIGLIB/std/Build.zig	/^pub const DirList = struct {$/;"	struct
DirTable	$ZIGLIB/std/fs/watch.zig	/const DirTable = std.StringHashMapUnmanaged(*Dir)/;"	constant
Direction	$ZIGLIB/std/os/linux/ioctl.zig	/^const Direction = std.meta.Int(.unsigned, bits.dir)/;"	constant
Directory	$ZIGLIB/std/os/windows.zig	/Directory: BOOLEAN/;"	field
DirectoryEntry	$ZIGLIB/std/coff.zig	/^pub const DirectoryEntry = enum(u16) {$/;"	enum
DisableAddrErrorReportingInRange	$ZIGLIB/std/valgrind/memcheck.zig	/DisableAddrErrorReportingInRange/;"	field
Discard	$ZIGLIB/std/valgrind/memcheck.zig	/Discard/;"	field
DiscardTranslations	$ZIGLIB/std/valgrind.zig	/DiscardTranslations = 4098/;"	field
DismountCount	$ZIGLIB/std/os/windows.zig	/DismountCount: ULONG/;"	field
DlDynlib	$ZIGLIB/std/dynamic_library.zig	/^pub const DlDynlib = struct {$/;"	struct
DllBase	$ZIGLIB/std/os/windows.zig	/DllBase: PVOID/;"	field
DllFlags	$ZIGLIB/std/coff.zig	/^pub const DllFlags = packed struct {$/;"	struct
DllPath	$ZIGLIB/std/os/windows.zig	/DllPath: UNICODE_STRING/;"	field
DnExpandError	$ZIGLIB/std/os.zig	/^pub const DnExpandError = error{InvalidDnsPacket}/;"	constant
DnsServer	$ZIGLIB/std/os/uefi/protocols/ip6_config_protocol.zig	/DnsServer/;"	field
DoLeakCheck	$ZIGLIB/std/valgrind/memcheck.zig	/DoLeakCheck/;"	field
Door	$ZIGLIB/std/fs/file.zig	/Door/;"	field
DosPath	$ZIGLIB/std/os/windows.zig	/DosPath: UNICODE_STRING/;"	field
DoubleLimb	$ZIGLIB/std/math/big.zig	/^pub const DoubleLimb = std.meta.Int(.unsigned, 2 * limb_info.bits)/;"	constant
DragonflyImpl	$ZIGLIB/std/Thread/Futex.zig	/^const DragonflyImpl = struct {$/;"	struct
DrawParameters	$ZIGLIB/std/target/spirv.zig	/DrawParameters/;"	field
Drive	$ZIGLIB/std/fs/path.zig	/Drive/;"	field
DstShift	$ZIGLIB/compiler_rt/extendf.zig	/const DstShift = std.math.Log2Int(dst_rep_t)/;"	constant
DummyMutex	$ZIGLIB/std/heap/general_purpose_allocator.zig	/const DummyMutex = struct {$/;"	struct
DummyUnion1	$ZIGLIB/std/os/windows.zig	/DummyUnion1: extern union {$/;"	field
DummyUnion2	$ZIGLIB/std/os/windows.zig	/DummyUnion2: extern union {$/;"	field
DummyUnion3	$ZIGLIB/std/os/windows.zig	/DummyUnion3: extern union {$/;"	field
DummyUnion4	$ZIGLIB/std/os/windows.zig	/DummyUnion4: extern union {$/;"	field
DummyUnion5	$ZIGLIB/std/os/windows.zig	/DummyUnion5: extern union {$/;"	field
DumpStats	$ZIGLIB/std/valgrind/callgrind.zig	/DumpStats = valgrind.ToolBase("CT".*)/;"	field
DumpStatsAt	$ZIGLIB/std/valgrind/callgrind.zig	/DumpStatsAt/;"	field
DupAddrDetectTransmits	$ZIGLIB/std/os/uefi/protocols/ip6_config_protocol.zig	/DupAddrDetectTransmits/;"	field
DwarfInfo	$ZIGLIB/std/dwarf.zig	/^pub const DwarfInfo = struct {$/;"	struct
Dwords	$ZIGLIB/compiler_rt/shift.zig	/^fn Dwords(comptime T: type, comptime signed_half: bool) type {$/;"	function
Dylan	$ZIGLIB/std/dwarf/LANG.zig	/^pub const Dylan = 0x0020/;"	constant
DynLib	$ZIGLIB/std/dynamic_library.zig	/^pub const DynLib = switch (builtin.os.tag) {$/;"	constant
Dynamic	$ZIGLIB/std/fifo.zig	/Dynamic/;"	field
DynamicBitSet	$ZIGLIB/std/bit_set.zig	/^pub const DynamicBitSet = struct {$/;"	struct
DynamicBitSetUnmanaged	$ZIGLIB/std/bit_set.zig	/^pub const DynamicBitSetUnmanaged = struct {$/;"	struct
DynamicLinker	$ZIGLIB/std/target.zig	/pub const DynamicLinker = struct {$/;"	struct
DynamicSize	$ZIGLIB/std/compress/deflate/huffman_bit_writer.zig	/^const DynamicSize = struct {$/;"	struct
E164	$ZIGLIB/std/c/netbsd.zig	/pub const E164 = ISDN/;"	constant
EACCESS	$ZIGLIB/std/c/solaris.zig	/pub const EACCESS = 0x4/;"	constant
EAI_MAX	$ZIGLIB/std/c/solaris.zig	/^pub const EAI_MAX = 14/;"	constant
EAS_DIDNT_FIT	$ZIGLIB/std/os/windows/win32error.zig	/EAS_DIDNT_FIT = 275/;"	field
EAS_NOT_SUPPORTED	$ZIGLIB/std/os/windows/win32error.zig	/EAS_NOT_SUPPORTED = 282/;"	field
EA_ACCESS_DENIED	$ZIGLIB/std/os/windows/win32error.zig	/EA_ACCESS_DENIED = 994/;"	field
EA_CORRUPT_ERROR	$ZIGLIB/std/os/windows/ntstatus.zig	/EA_CORRUPT_ERROR = 0xC0000053/;"	field
EA_FILE_CORRUPT	$ZIGLIB/std/os/windows/win32error.zig	/EA_FILE_CORRUPT = 276/;"	field
EA_LIST_INCONSISTENT	$ZIGLIB/std/os/windows/win32error.zig	/EA_LIST_INCONSISTENT = 255/;"	field
EA_TABLE_FULL	$ZIGLIB/std/os/windows/win32error.zig	/EA_TABLE_FULL = 277/;"	field
EA_TOO_LARGE	$ZIGLIB/std/os/windows/ntstatus.zig	/EA_TOO_LARGE = 0xC0000050/;"	field
ECHO	$ZIGLIB/std/os/linux.zig	/^pub const ECHO: tcflag_t = 8/;"	constant
ECHOCTL	$ZIGLIB/std/c/darwin.zig	/^pub const ECHOCTL: tcflag_t = 0x00000040/;"	constant
ECHOE	$ZIGLIB/std/os/linux.zig	/^pub const ECHOE: tcflag_t = 16/;"	constant
ECHOK	$ZIGLIB/std/os/linux.zig	/^pub const ECHOK: tcflag_t = 32/;"	constant
ECHOKE	$ZIGLIB/std/c/darwin.zig	/^pub const ECHOKE: tcflag_t = 0x00000001/;"	constant
ECHONL	$ZIGLIB/std/os/linux.zig	/^pub const ECHONL: tcflag_t = 64/;"	constant
ECHOPRT	$ZIGLIB/std/c/darwin.zig	/^pub const ECHOPRT: tcflag_t = 0x00000020/;"	constant
ECMA	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const ECMA = 8/;"	constant
ECOG16	$ZIGLIB/std/elf.zig	/ECOG16 = 176/;"	field
ECOG1X	$ZIGLIB/std/elf.zig	/ECOG1X = 168/;"	field
ECOG2	$ZIGLIB/std/elf.zig	/ECOG2 = 134/;"	field
ECONET	$ZIGLIB/std/os/linux.zig	/pub const ECONET = 19/;"	constant
ECRYPTFS	$ZIGLIB/std/os/linux.zig	/pub const ECRYPTFS = 19/;"	constant
ECSubstreamSize	$ZIGLIB/std/pdb.zig	/ECSubstreamSize: i32/;"	field
EDSP	$ZIGLIB/std/os/linux/arm-eabi.zig	/pub const EDSP = 1 << 7/;"	constant
EFI_APPLICATION	$ZIGLIB/std/coff.zig	/EFI_APPLICATION = 10/;"	field
EFI_BOOT_SERVICE_DRIVER	$ZIGLIB/std/coff.zig	/EFI_BOOT_SERVICE_DRIVER = 11/;"	field
EFI_ROM	$ZIGLIB/std/coff.zig	/EFI_ROM = 13/;"	field
EFI_RUNTIME_DRIVER	$ZIGLIB/std/coff.zig	/EFI_RUNTIME_DRIVER = 12/;"	field
EFS_ALG_BLOB_TOO_BIG	$ZIGLIB/std/os/windows/ntstatus.zig	/EFS_ALG_BLOB_TOO_BIG = 0xC0000352/;"	field
EFS_NOT_ALLOWED_IN_TRANSACTION	$ZIGLIB/std/os/windows/ntstatus.zig	/EFS_NOT_ALLOWED_IN_TRANSACTION = 0xC019003E/;"	field
EFlags	$ZIGLIB/std/os/windows.zig	/EFlags: DWORD/;"	field
EI_CLASS	$ZIGLIB/std/elf.zig	/^pub const EI_CLASS = 4/;"	constant
EI_DATA	$ZIGLIB/std/elf.zig	/^pub const EI_DATA = 5/;"	constant
EI_NIDENT	$ZIGLIB/std/elf.zig	/^pub const EI_NIDENT = 16/;"	constant
EI_VERSION	$ZIGLIB/std/elf.zig	/^pub const EI_VERSION = 6/;"	constant
ELEVATION_REQUIRED	$ZIGLIB/std/os/windows/win32error.zig	/ELEVATION_REQUIRED = 740/;"	field
ELFCLASS32	$ZIGLIB/std/elf.zig	/^pub const ELFCLASS32 = 1/;"	constant
ELFCLASS64	$ZIGLIB/std/elf.zig	/^pub const ELFCLASS64 = 2/;"	constant
ELFCLASSNONE	$ZIGLIB/std/elf.zig	/^pub const ELFCLASSNONE = 0/;"	constant
ELFCLASSNUM	$ZIGLIB/std/elf.zig	/^pub const ELFCLASSNUM = 3/;"	constant
ELFDATA2LSB	$ZIGLIB/std/elf.zig	/^pub const ELFDATA2LSB = 1/;"	constant
ELFDATA2MSB	$ZIGLIB/std/elf.zig	/^pub const ELFDATA2MSB = 2/;"	constant
ELFDATANONE	$ZIGLIB/std/elf.zig	/^pub const ELFDATANONE = 0/;"	constant
ELFDATANUM	$ZIGLIB/std/elf.zig	/^pub const ELFDATANUM = 3/;"	constant
EMCON	$ZIGLIB/std/c/freebsd.zig	/pub const EMCON = 14/;"	constant
EMERG	$ZIGLIB/std/os.zig	/pub const EMERG = 0/;"	constant
EMPTY_PATH	$ZIGLIB/std/os/linux.zig	/pub const EMPTY_PATH = 0x1000/;"	constant
EMSA_PSS_VERIFY	$ZIGLIB/std/crypto/Certificate.zig	/fn EMSA_PSS_VERIFY(msg: []const u8, em: []const u8, emBit: usize, sLen: usize, comptime Hash: type, allocator: std.mem.Allocator) !void {$/;"	function
EMULATION	$ZIGLIB/std/c/darwin.zig	/EMULATION = 4/;"	field
EMULATION_FAULTS	$ZIGLIB/std/os/linux.zig	/EMULATION_FAULTS/;"	field
EMULATOR	$ZIGLIB/std/c/solaris.zig	/pub const EMULATOR = 2018/;"	constant
EM_AUTOURLDETECT	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_AUTOURLDETECT = 0x045B/;"	constant
EM_CANPASTE	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_CANPASTE = 0x0432/;"	constant
EM_CANREDO	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_CANREDO = 0x0455/;"	constant
EM_CANUNDO	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_CANUNDO = 0x00C6/;"	constant
EM_CHARFROMPOS	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_CHARFROMPOS = 0x00D7/;"	constant
EM_CONVPOSITION	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_CONVPOSITION = 0x046C/;"	constant
EM_DISPLAYBAND	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_DISPLAYBAND = 0x0433/;"	constant
EM_EMPTYUNDOBUFFER	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_EMPTYUNDOBUFFER = 0x00CD/;"	constant
EM_EXGETSEL	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_EXGETSEL = 0x0434/;"	constant
EM_EXLIMITTEXT	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_EXLIMITTEXT = 0x0435/;"	constant
EM_EXLINEFROMCHAR	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_EXLINEFROMCHAR = 0x0436/;"	constant
EM_EXSETSEL	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_EXSETSEL = 0x0437/;"	constant
EM_FINDTEXT	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_FINDTEXT = 0x0438/;"	constant
EM_FINDTEXTEX	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_FINDTEXTEX = 0x044F/;"	constant
EM_FINDTEXTEXW	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_FINDTEXTEXW = 0x047C/;"	constant
EM_FINDTEXTW	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_FINDTEXTW = 0x047B/;"	constant
EM_FINDWORDBREAK	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_FINDWORDBREAK = 0x044C/;"	constant
EM_FMTLINES	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_FMTLINES = 0x00C8/;"	constant
EM_FORMATRANGE	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_FORMATRANGE = 0x0439/;"	constant
EM_GETAUTOURLDETECT	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_GETAUTOURLDETECT = 0x045C/;"	constant
EM_GETBIDIOPTIONS	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_GETBIDIOPTIONS = 0x04C9/;"	constant
EM_GETCHARFORMAT	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_GETCHARFORMAT = 0x043A/;"	constant
EM_GETCTFMODEBIAS	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_GETCTFMODEBIAS = 0x04ED/;"	constant
EM_GETCTFOPENSTATUS	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_GETCTFOPENSTATUS = 0x04F0/;"	constant
EM_GETEDITSTYLE	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_GETEDITSTYLE = 0x04CD/;"	constant
EM_GETEVENTMASK	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_GETEVENTMASK = 0x043B/;"	constant
EM_GETFIRSTVISIBLELINE	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_GETFIRSTVISIBLELINE = 0x00CE/;"	constant
EM_GETHANDLE	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_GETHANDLE = 0x00BD/;"	constant
EM_GETHYPHENATEINFO	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_GETHYPHENATEINFO = 0x04E6/;"	constant
EM_GETIMECOLOR	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_GETIMECOLOR = 0x0469/;"	constant
EM_GETIMECOMPMODE	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_GETIMECOMPMODE = 0x047A/;"	constant
EM_GETIMECOMPTEXT	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_GETIMECOMPTEXT = 0x04F2/;"	constant
EM_GETIMEMODEBIAS	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_GETIMEMODEBIAS = 0x047F/;"	constant
EM_GETIMEOPTIONS	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_GETIMEOPTIONS = 0x046B/;"	constant
EM_GETIMEPROPERTY	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_GETIMEPROPERTY = 0x04F4/;"	constant
EM_GETIMESTATUS	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_GETIMESTATUS = 0x00D9/;"	constant
EM_GETLANGOPTIONS	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_GETLANGOPTIONS = 0x0479/;"	constant
EM_GETLIMITTEXT	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_GETLIMITTEXT = 0x00D5/;"	constant
EM_GETLINE	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_GETLINE = 0x00C4/;"	constant
EM_GETLINECOUNT	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_GETLINECOUNT = 0x00BA/;"	constant
EM_GETMARGINS	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_GETMARGINS = 0x00D4/;"	constant
EM_GETMODIFY	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_GETMODIFY = 0x00B8/;"	constant
EM_GETOLEINTERFACE	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_GETOLEINTERFACE = 0x043C/;"	constant
EM_GETOPTIONS	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_GETOPTIONS = 0x044E/;"	constant
EM_GETPAGE	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_GETPAGE = 0x04E4/;"	constant
EM_GETPAGEROTATE	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_GETPAGEROTATE = 0x04EB/;"	constant
EM_GETPARAFORMAT	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_GETPARAFORMAT = 0x043D/;"	constant
EM_GETPASSWORDCHAR	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_GETPASSWORDCHAR = 0x00D2/;"	constant
EM_GETPUNCTUATION	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_GETPUNCTUATION = 0x0465/;"	constant
EM_GETQUERYRTFOBJ	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_GETQUERYRTFOBJ = 0x050D/;"	constant
EM_GETRECT	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_GETRECT = 0x00B2/;"	constant
EM_GETREDONAME	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_GETREDONAME = 0x0457/;"	constant
EM_GETSCROLLPOS	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_GETSCROLLPOS = 0x04DD/;"	constant
EM_GETSEL	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_GETSEL = 0x00B0/;"	constant
EM_GETSELTEXT	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_GETSELTEXT = 0x043E/;"	constant
EM_GETTEXTEX	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_GETTEXTEX = 0x045E/;"	constant
EM_GETTEXTLENGTHEX	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_GETTEXTLENGTHEX = 0x045F/;"	constant
EM_GETTEXTMODE	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_GETTEXTMODE = 0x045A/;"	constant
EM_GETTEXTRANGE	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_GETTEXTRANGE = 0x044B/;"	constant
EM_GETTHUMB	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_GETTHUMB = 0x00BE/;"	constant
EM_GETTYPOGRAPHYOPTIONS	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_GETTYPOGRAPHYOPTIONS = 0x04CB/;"	constant
EM_GETUNDONAME	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_GETUNDONAME = 0x0456/;"	constant
EM_GETVIEWKIND	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_GETVIEWKIND = 0x04E2/;"	constant
EM_GETWORDBREAKPROC	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_GETWORDBREAKPROC = 0x00D1/;"	constant
EM_GETWORDBREAKPROCEX	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_GETWORDBREAKPROCEX = 0x0450/;"	constant
EM_GETWORDWRAPMODE	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_GETWORDWRAPMODE = 0x0467/;"	constant
EM_GETZOOM	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_GETZOOM = 0x04E0/;"	constant
EM_HIDESELECTION	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_HIDESELECTION = 0x043F/;"	constant
EM_ISIME	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_ISIME = 0x04F3/;"	constant
EM_LIMITTEXT	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_LIMITTEXT = 0x00C5/;"	constant
EM_LINEFROMCHAR	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_LINEFROMCHAR = 0x00C9/;"	constant
EM_LINEINDEX	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_LINEINDEX = 0x00BB/;"	constant
EM_LINELENGTH	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_LINELENGTH = 0x00C1/;"	constant
EM_LINESCROLL	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_LINESCROLL = 0x00B6/;"	constant
EM_OUTLINE	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_OUTLINE = 0x04DC/;"	constant
EM_PASTESPECIAL	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_PASTESPECIAL = 0x0440/;"	constant
EM_POSFROMCHAR	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_POSFROMCHAR = 0x00D6/;"	constant
EM_RECONVERSION	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_RECONVERSION = 0x047D/;"	constant
EM_REDO	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_REDO = 0x0454/;"	constant
EM_REPLACESEL	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_REPLACESEL = 0x00C2/;"	constant
EM_REQUESTRESIZE	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_REQUESTRESIZE = 0x0441/;"	constant
EM_SCROLL	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_SCROLL = 0x00B5/;"	constant
EM_SCROLLCARET	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_SCROLLCARET = 0x00B7/;"	constant
EM_SELECTIONTYPE	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_SELECTIONTYPE = 0x0442/;"	constant
EM_SETBIDIOPTIONS	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_SETBIDIOPTIONS = 0x04C8/;"	constant
EM_SETBKGNDCOLOR	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_SETBKGNDCOLOR = 0x0443/;"	constant
EM_SETCHARFORMAT	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_SETCHARFORMAT = 0x0444/;"	constant
EM_SETCTFMODEBIAS	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_SETCTFMODEBIAS = 0x04EE/;"	constant
EM_SETCTFOPENSTATUS	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_SETCTFOPENSTATUS = 0x04F1/;"	constant
EM_SETEDITSTYLE	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_SETEDITSTYLE = 0x04CC/;"	constant
EM_SETEVENTMASK	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_SETEVENTMASK = 0x0445/;"	constant
EM_SETFONT	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_SETFONT = 0x00C3/;"	constant
EM_SETFONTSIZE	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_SETFONTSIZE = 0x04DF/;"	constant
EM_SETHANDLE	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_SETHANDLE = 0x00BC/;"	constant
EM_SETHYPHENATEINFO	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_SETHYPHENATEINFO = 0x04E7/;"	constant
EM_SETIMECOLOR	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_SETIMECOLOR = 0x0468/;"	constant
EM_SETIMEMODEBIAS	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_SETIMEMODEBIAS = 0x047E/;"	constant
EM_SETIMEOPTIONS	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_SETIMEOPTIONS = 0x046A/;"	constant
EM_SETIMESTATUS	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_SETIMESTATUS = 0x00D8/;"	constant
EM_SETLANGOPTIONS	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_SETLANGOPTIONS = 0x0478/;"	constant
EM_SETLIMITTEXT	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_SETLIMITTEXT = 0x00C5/;"	constant
EM_SETMARGINS	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_SETMARGINS = 0x00D3/;"	constant
EM_SETMODIFY	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_SETMODIFY = 0x00B9/;"	constant
EM_SETOLECALLBACK	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_SETOLECALLBACK = 0x0446/;"	constant
EM_SETOPTIONS	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_SETOPTIONS = 0x044D/;"	constant
EM_SETPAGE	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_SETPAGE = 0x04E5/;"	constant
EM_SETPAGEROTATE	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_SETPAGEROTATE = 0x04EC/;"	constant
EM_SETPALETTE	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_SETPALETTE = 0x045D/;"	constant
EM_SETPARAFORMAT	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_SETPARAFORMAT = 0x0447/;"	constant
EM_SETPASSWORDCHAR	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_SETPASSWORDCHAR = 0x00CC/;"	constant
EM_SETPUNCTUATION	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_SETPUNCTUATION = 0x0464/;"	constant
EM_SETQUERYRTFOBJ	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_SETQUERYRTFOBJ = 0x050E/;"	constant
EM_SETREADONLY	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_SETREADONLY = 0x00CF/;"	constant
EM_SETRECT	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_SETRECT = 0x00B3/;"	constant
EM_SETRECTNP	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_SETRECTNP = 0x00B4/;"	constant
EM_SETSCROLLPOS	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_SETSCROLLPOS = 0x04DE/;"	constant
EM_SETSEL	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_SETSEL = 0x00B1/;"	constant
EM_SETTABSTOPS	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_SETTABSTOPS = 0x00CB/;"	constant
EM_SETTARGETDEVICE	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_SETTARGETDEVICE = 0x0448/;"	constant
EM_SETTEXTEX	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_SETTEXTEX = 0x0461/;"	constant
EM_SETTEXTMODE	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_SETTEXTMODE = 0x0459/;"	constant
EM_SETTYPOGRAPHYOPTIONS	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_SETTYPOGRAPHYOPTIONS = 0x04CA/;"	constant
EM_SETUNDOLIMIT	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_SETUNDOLIMIT = 0x0452/;"	constant
EM_SETVIEWKIND	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_SETVIEWKIND = 0x04E3/;"	constant
EM_SETWORDBREAK	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_SETWORDBREAK = 0x00CA/;"	constant
EM_SETWORDBREAKPROC	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_SETWORDBREAKPROC = 0x00D0/;"	constant
EM_SETWORDBREAKPROCEX	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_SETWORDBREAKPROCEX = 0x0451/;"	constant
EM_SETWORDWRAPMODE	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_SETWORDWRAPMODE = 0x0466/;"	constant
EM_SETZOOM	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_SETZOOM = 0x04E1/;"	constant
EM_SHOWSCROLLBAR	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_SHOWSCROLLBAR = 0x0460/;"	constant
EM_STOPGROUPTYPING	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_STOPGROUPTYPING = 0x0458/;"	constant
EM_STREAMIN	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_STREAMIN = 0x0449/;"	constant
EM_STREAMOUT	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_STREAMOUT = 0x044A/;"	constant
EM_UNDO	$ZIGLIB/std/os/windows/user32.zig	/^pub const EM_UNDO = 0x00C7/;"	constant
ENABLE	$ZIGLIB/std/os/linux.zig	/pub const ENABLE = 9216/;"	constant
ENCAP	$ZIGLIB/std/os/linux.zig	/pub const ENCAP = 98/;"	constant
ENCOUNTERED_WRITE_IN_PROGRESS	$ZIGLIB/std/os/windows/ntstatus.zig	/ENCOUNTERED_WRITE_IN_PROGRESS = 0xC0000433/;"	field
ENCRYPTION_FAILED	$ZIGLIB/std/os/windows/ntstatus.zig	/ENCRYPTION_FAILED = 0xC000028A/;"	field
ENCRYPTION_INFO	$ZIGLIB/std/macho.zig	/ENCRYPTION_INFO = 0x21/;"	field
ENCRYPTION_INFO_64	$ZIGLIB/std/macho.zig	/ENCRYPTION_INFO_64 = 0x2C/;"	field
ENDIAN_BIG	$ZIGLIB/std/os/linux.zig	/pub const ENDIAN_BIG = 0/;"	constant
ENDIAN_LITTLE	$ZIGLIB/std/os/linux.zig	/pub const ENDIAN_LITTLE = 1/;"	constant
ENDIAN_PPC_LITTLE	$ZIGLIB/std/os/linux.zig	/pub const ENDIAN_PPC_LITTLE = 2/;"	constant
END_OF_FILE	$ZIGLIB/std/os/windows/ntstatus.zig	/END_OF_FILE = 0xC0000011/;"	field
END_OF_FUNCTION	$ZIGLIB/std/coff.zig	/END_OF_FUNCTION = 0xff/;"	field
END_OF_MEDIA	$ZIGLIB/std/os/windows/win32error.zig	/END_OF_MEDIA = 1100/;"	field
END_OF_STRUCT	$ZIGLIB/std/coff.zig	/END_OF_STRUCT = 102/;"	field
ENGLISH	$ZIGLIB/std/os/windows/lang.zig	/^pub const ENGLISH = 0x09/;"	constant
ENGLISH_AUS	$ZIGLIB/std/os/windows/sublang.zig	/^pub const ENGLISH_AUS = 0x03/;"	constant
ENGLISH_BELIZE	$ZIGLIB/std/os/windows/sublang.zig	/^pub const ENGLISH_BELIZE = 0x0a/;"	constant
ENGLISH_CAN	$ZIGLIB/std/os/windows/sublang.zig	/^pub const ENGLISH_CAN = 0x04/;"	constant
ENGLISH_CARIBBEAN	$ZIGLIB/std/os/windows/sublang.zig	/^pub const ENGLISH_CARIBBEAN = 0x09/;"	constant
ENGLISH_EIRE	$ZIGLIB/std/os/windows/sublang.zig	/^pub const ENGLISH_EIRE = 0x06/;"	constant
ENGLISH_INDIA	$ZIGLIB/std/os/windows/sublang.zig	/^pub const ENGLISH_INDIA = 0x10/;"	constant
ENGLISH_JAMAICA	$ZIGLIB/std/os/windows/sublang.zig	/^pub const ENGLISH_JAMAICA = 0x08/;"	constant
ENGLISH_MALAYSIA	$ZIGLIB/std/os/windows/sublang.zig	/^pub const ENGLISH_MALAYSIA = 0x11/;"	constant
ENGLISH_NZ	$ZIGLIB/std/os/windows/sublang.zig	/^pub const ENGLISH_NZ = 0x05/;"	constant
ENGLISH_PHILIPPINES	$ZIGLIB/std/os/windows/sublang.zig	/^pub const ENGLISH_PHILIPPINES = 0x0d/;"	constant
ENGLISH_SINGAPORE	$ZIGLIB/std/os/windows/sublang.zig	/^pub const ENGLISH_SINGAPORE = 0x12/;"	constant
ENGLISH_SOUTH_AFRICA	$ZIGLIB/std/os/windows/sublang.zig	/^pub const ENGLISH_SOUTH_AFRICA = 0x07/;"	constant
ENGLISH_TRINIDAD	$ZIGLIB/std/os/windows/sublang.zig	/^pub const ENGLISH_TRINIDAD = 0x0b/;"	constant
ENGLISH_UK	$ZIGLIB/std/os/windows/sublang.zig	/^pub const ENGLISH_UK = 0x02/;"	constant
ENGLISH_US	$ZIGLIB/std/os/windows/sublang.zig	/^pub const ENGLISH_US = 0x01/;"	constant
ENGLISH_ZIMBABWE	$ZIGLIB/std/os/windows/sublang.zig	/^pub const ENGLISH_ZIMBABWE = 0x0c/;"	constant
ENLISTMENT_NOT_FOUND	$ZIGLIB/std/os/windows/ntstatus.zig	/ENLISTMENT_NOT_FOUND = 0xC0190050/;"	field
ENLISTMENT_NOT_SUPERIOR	$ZIGLIB/std/os/windows/ntstatus.zig	/ENLISTMENT_NOT_SUPERIOR = 0xC0190033/;"	field
ENTRYPOINT_NOT_FOUND	$ZIGLIB/std/os/windows/ntstatus.zig	/ENTRYPOINT_NOT_FOUND = 0xC0000139/;"	field
ENUM	$ZIGLIB/std/coff.zig	/ENUM = 10/;"	field
ENUM_PAGE_FILE_INFORMATION	$ZIGLIB/std/os/windows.zig	/^pub const ENUM_PAGE_FILE_INFORMATION = extern struct {$/;"	struct
ENUM_TAG	$ZIGLIB/std/coff.zig	/ENUM_TAG = 15/;"	field
ENVVAR_NOT_FOUND	$ZIGLIB/std/os/windows/win32error.zig	/ENVVAR_NOT_FOUND = 203/;"	field
EOL2	$ZIGLIB/std/os/linux.zig	/pub const EOL2 = 8/;"	constant
EOM_OVERFLOW	$ZIGLIB/std/os/windows/win32error.zig	/EOM_OVERFLOW = 1129/;"	field
EPOLL	$ZIGLIB/std/os/linux.zig	/^pub const EPOLL = struct {$/;"	struct
EPOLL_CTL	$ZIGLIB/std/os/linux.zig	/EPOLL_CTL/;"	field
EPT_NT_CANT_CREATE	$ZIGLIB/std/os/windows/ntstatus.zig	/EPT_NT_CANT_CREATE = 0xC002004C/;"	field
EPT_NT_CANT_PERFORM_OP	$ZIGLIB/std/os/windows/ntstatus.zig	/EPT_NT_CANT_PERFORM_OP = 0xC0020035/;"	field
EPT_NT_INVALID_ENTRY	$ZIGLIB/std/os/windows/ntstatus.zig	/EPT_NT_INVALID_ENTRY = 0xC0020034/;"	field
EPT_NT_NOT_REGISTERED	$ZIGLIB/std/os/windows/ntstatus.zig	/EPT_NT_NOT_REGISTERED = 0xC0020036/;"	field
EPT_S_CANT_CREATE	$ZIGLIB/std/os/windows/win32error.zig	/EPT_S_CANT_CREATE = 1899/;"	field
EPT_S_CANT_PERFORM_OP	$ZIGLIB/std/os/windows/win32error.zig	/EPT_S_CANT_PERFORM_OP = 1752/;"	field
EPT_S_INVALID_ENTRY	$ZIGLIB/std/os/windows/win32error.zig	/EPT_S_INVALID_ENTRY = 1751/;"	field
EPT_S_NOT_REGISTERED	$ZIGLIB/std/os/windows/win32error.zig	/EPT_S_NOT_REGISTERED = 1753/;"	field
ERASE	$ZIGLIB/std/os/linux.zig	/pub const ERASE = 2/;"	constant
ERMS_AVAILABLE	$ZIGLIB/std/os/windows.zig	/ERMS_AVAILABLE = 42/;"	field
ERRNO	$ZIGLIB/std/os/linux/seccomp.zig	/pub const ERRNO = 0x00050000/;"	constant
ERROR	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const ERROR = 4103/;"	constant
ERRORS_ENCOUNTERED	$ZIGLIB/std/os/windows/win32error.zig	/ERRORS_ENCOUNTERED = 774/;"	field
ERRQUEUE	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const ERRQUEUE = 4096/;"	constant
ERRSTR	$ZIGLIB/std/os/plan9.zig	/ERRSTR = 41/;"	field
ESTONIAN	$ZIGLIB/std/os/windows/lang.zig	/^pub const ESTONIAN = 0x25/;"	constant
ESTONIAN_ESTONIA	$ZIGLIB/std/os/windows/sublang.zig	/^pub const ESTONIAN_ESTONIA = 0x01/;"	constant
ETHER	$ZIGLIB/std/c/netbsd.zig	/pub const ETHER = 36/;"	constant
ETHERIP	$ZIGLIB/std/c/openbsd.zig	/pub const ETHERIP = 97/;"	constant
ETPU	$ZIGLIB/std/elf.zig	/ETPU = 178/;"	field
EVALUATION_EXPIRATION	$ZIGLIB/std/os/windows/win32error.zig	/EVALUATION_EXPIRATION = 622/;"	field
EVCOUNT	$ZIGLIB/std/c/openbsd.zig	/pub const EVCOUNT = 68/;"	constant
EVENT	$ZIGLIB/std/os/linux.zig	/EVENT/;"	field
EVENTLOG_CANT_START	$ZIGLIB/std/os/windows/win32error.zig	/EVENTLOG_CANT_START = 1501/;"	field
EVENTLOG_FILE_CHANGED	$ZIGLIB/std/os/windows/win32error.zig	/EVENTLOG_FILE_CHANGED = 1503/;"	field
EVENTLOG_FILE_CORRUPT	$ZIGLIB/std/os/windows/win32error.zig	/EVENTLOG_FILE_CORRUPT = 1500/;"	field
EVENTTYPE_CLOCK	$ZIGLIB/std/os/wasi.zig	/^pub const EVENTTYPE_CLOCK: eventtype_t = 0/;"	constant
EVENTTYPE_FD_READ	$ZIGLIB/std/os/wasi.zig	/^pub const EVENTTYPE_FD_READ: eventtype_t = 1/;"	constant
EVENTTYPE_FD_WRITE	$ZIGLIB/std/os/wasi.zig	/^pub const EVENTTYPE_FD_WRITE: eventtype_t = 2/;"	constant
EVENT_ALL_ACCESS	$ZIGLIB/std/os/windows.zig	/^pub const EVENT_ALL_ACCESS = 0x1F0003/;"	constant
EVENT_DONE	$ZIGLIB/std/os/windows/win32error.zig	/EVENT_DONE = 710/;"	field
EVENT_FD_READWRITE_HANGUP	$ZIGLIB/std/os/wasi.zig	/^pub const EVENT_FD_READWRITE_HANGUP: eventrwflags_t = 0x0001/;"	constant
EVENT_IOC	$ZIGLIB/std/os/linux.zig	/pub const EVENT_IOC = struct {$/;"	struct
EVENT_MODIFY_STATE	$ZIGLIB/std/os/windows.zig	/^pub const EVENT_MODIFY_STATE = 0x0002/;"	constant
EVENT_PENDING	$ZIGLIB/std/os/windows/win32error.zig	/EVENT_PENDING = 711/;"	field
EVFILT_AIO	$ZIGLIB/std/c/openbsd.zig	/^pub const EVFILT_AIO = -3/;"	constant
EVFILT_EMPTY	$ZIGLIB/std/c/haiku.zig	/^pub const EVFILT_EMPTY = -13/;"	constant
EVFILT_EXCEPT	$ZIGLIB/std/c/openbsd.zig	/^pub const EVFILT_EXCEPT = -9/;"	constant
EVFILT_FS	$ZIGLIB/std/c/netbsd.zig	/^pub const EVFILT_FS = 7/;"	constant
EVFILT_LIO	$ZIGLIB/std/c/haiku.zig	/^pub const EVFILT_LIO = -10/;"	constant
EVFILT_MACHPORT	$ZIGLIB/std/c/darwin.zig	/^pub const EVFILT_MACHPORT = -8/;"	constant
EVFILT_MARKER	$ZIGLIB/std/c/dragonfly.zig	/^pub const EVFILT_MARKER = 15/;"	constant
EVFILT_PROC	$ZIGLIB/std/c/openbsd.zig	/^pub const EVFILT_PROC = -5/;"	constant
EVFILT_PROCDESC	$ZIGLIB/std/c/haiku.zig	/^pub const EVFILT_PROCDESC = -8/;"	constant
EVFILT_READ	$ZIGLIB/std/c/openbsd.zig	/^pub const EVFILT_READ = -1/;"	constant
EVFILT_SENDFILE	$ZIGLIB/std/c/haiku.zig	/^pub const EVFILT_SENDFILE = -12/;"	constant
EVFILT_SIGNAL	$ZIGLIB/std/c/openbsd.zig	/^pub const EVFILT_SIGNAL = -6/;"	constant
EVFILT_SYSCOUNT	$ZIGLIB/std/c/dragonfly.zig	/^pub const EVFILT_SYSCOUNT = 10/;"	constant
EVFILT_TIMER	$ZIGLIB/std/c/openbsd.zig	/^pub const EVFILT_TIMER = -7/;"	constant
EVFILT_USER	$ZIGLIB/std/c/netbsd.zig	/^pub const EVFILT_USER = 1/;"	constant
EVFILT_VM	$ZIGLIB/std/c/darwin.zig	/^pub const EVFILT_VM = -12/;"	constant
EVFILT_VNODE	$ZIGLIB/std/c/openbsd.zig	/^pub const EVFILT_VNODE = -4/;"	constant
EVFILT_WRITE	$ZIGLIB/std/c/openbsd.zig	/^pub const EVFILT_WRITE = -2/;"	constant
EVTONLY	$ZIGLIB/std/c/darwin.zig	/pub const EVTONLY = 0x8000/;"	constant
EVTSTRM	$ZIGLIB/std/os/linux/arm-eabi.zig	/pub const EVTSTRM = 1 << 21/;"	constant
EV_ADD	$ZIGLIB/std/c/openbsd.zig	/^pub const EV_ADD = 0x0001/;"	constant
EV_CLEAR	$ZIGLIB/std/c/openbsd.zig	/^pub const EV_CLEAR = 0x0020/;"	constant
EV_DELETE	$ZIGLIB/std/c/openbsd.zig	/^pub const EV_DELETE = 0x0002/;"	constant
EV_DISABLE	$ZIGLIB/std/c/openbsd.zig	/^pub const EV_DISABLE = 0x0008/;"	constant
EV_DISPATCH	$ZIGLIB/std/c/openbsd.zig	/^pub const EV_DISPATCH = 0x0080/;"	constant
EV_DISPATCH2	$ZIGLIB/std/c/darwin.zig	/^pub const EV_DISPATCH2 = EV_DISPATCH | EV_UDATA_SPECIFIC/;"	constant
EV_ENABLE	$ZIGLIB/std/c/openbsd.zig	/^pub const EV_ENABLE = 0x0004/;"	constant
EV_EOF	$ZIGLIB/std/c/openbsd.zig	/^pub const EV_EOF = 0x8000/;"	constant
EV_ERROR	$ZIGLIB/std/c/openbsd.zig	/^pub const EV_ERROR = 0x4000/;"	constant
EV_FLAG0	$ZIGLIB/std/c/darwin.zig	/^pub const EV_FLAG0 = 0x1000/;"	constant
EV_FLAG1	$ZIGLIB/std/c/openbsd.zig	/^pub const EV_FLAG1 = 0x2000/;"	constant
EV_NODATA	$ZIGLIB/std/c/dragonfly.zig	/^pub const EV_NODATA = 4096/;"	constant
EV_ONESHOT	$ZIGLIB/std/c/openbsd.zig	/^pub const EV_ONESHOT = 0x0010/;"	constant
EV_OOBAND	$ZIGLIB/std/c/darwin.zig	/^pub const EV_OOBAND = EV_FLAG1/;"	constant
EV_POLL	$ZIGLIB/std/c/darwin.zig	/^pub const EV_POLL = EV_FLAG0/;"	constant
EV_RECEIPT	$ZIGLIB/std/c/openbsd.zig	/^pub const EV_RECEIPT = 0x0040/;"	constant
EV_SYSFLAGS	$ZIGLIB/std/c/dragonfly.zig	/^pub const EV_SYSFLAGS = 61440/;"	constant
EV_UDATA_SPECIFIC	$ZIGLIB/std/c/darwin.zig	/^pub const EV_UDATA_SPECIFIC = 0x0100/;"	constant
EV_VANISHED	$ZIGLIB/std/c/darwin.zig	/^pub const EV_VANISHED = 0x0200/;"	constant
EXACT_MATCH	$ZIGLIB/std/coff.zig	/EXACT_MATCH = 4/;"	field
EXCEPTION	$ZIGLIB/std/coff.zig	/EXCEPTION = 5/;"	field
EXCEPTION_ACCESS_VIOLATION	$ZIGLIB/std/os/windows.zig	/^pub const EXCEPTION_ACCESS_VIOLATION = 0xc0000005/;"	constant
EXCEPTION_CONTINUE_SEARCH	$ZIGLIB/std/os/windows.zig	/^pub const EXCEPTION_CONTINUE_SEARCH = 0/;"	constant
EXCEPTION_DATATYPE_MISALIGNMENT	$ZIGLIB/std/os/windows.zig	/^pub const EXCEPTION_DATATYPE_MISALIGNMENT = 0x80000002/;"	constant
EXCEPTION_DEFAULT	$ZIGLIB/std/c/darwin.zig	/^pub const EXCEPTION_DEFAULT = 1/;"	constant
EXCEPTION_DISPOSITION	$ZIGLIB/std/os/windows.zig	/^pub const EXCEPTION_DISPOSITION = i32/;"	constant
EXCEPTION_IDENTITY_PROTECTED	$ZIGLIB/std/c/darwin.zig	/^pub const EXCEPTION_IDENTITY_PROTECTED = 4/;"	constant
EXCEPTION_ILLEGAL_INSTRUCTION	$ZIGLIB/std/os/windows.zig	/^pub const EXCEPTION_ILLEGAL_INSTRUCTION = 0xc000001d/;"	constant
EXCEPTION_IN_SERVICE	$ZIGLIB/std/os/windows/win32error.zig	/EXCEPTION_IN_SERVICE = 1064/;"	field
EXCEPTION_POINTERS	$ZIGLIB/std/os/windows.zig	/^pub const EXCEPTION_POINTERS = extern struct {$/;"	struct
EXCEPTION_PROTECTED	$ZIGLIB/std/c/darwin.zig	/EXCEPTION_PROTECTED = 32/;"	field
EXCEPTION_RECORD	$ZIGLIB/std/os/windows.zig	/^pub const EXCEPTION_RECORD = extern struct {$/;"	struct
EXCEPTION_REGISTRATION_RECORD	$ZIGLIB/std/os/windows.zig	/^pub const EXCEPTION_REGISTRATION_RECORD = extern struct {$/;"	struct
EXCEPTION_ROUTINE	$ZIGLIB/std/os/windows.zig	/^pub const EXCEPTION_ROUTINE = *const fn ($/;"	constant
EXCEPTION_STACK_OVERFLOW	$ZIGLIB/std/os/windows.zig	/^pub const EXCEPTION_STACK_OVERFLOW = 0xc00000fd/;"	constant
EXCEPTION_STATE	$ZIGLIB/std/c/darwin.zig	/^pub const EXCEPTION_STATE = 2/;"	constant
EXCEPTION_STATE_IDENTITY	$ZIGLIB/std/c/darwin.zig	/^pub const EXCEPTION_STATE_IDENTITY = 3/;"	constant
EXCESS	$ZIGLIB/std/elf.zig	/EXCESS = 111/;"	field
EXCL	$ZIGLIB/std/os/wasi.zig	/pub const EXCL: oflags_t = 0x0004/;"	constant
EXCLBIND	$ZIGLIB/std/c/solaris.zig	/pub const EXCLBIND = 0x1015/;"	constant
EXCLUSIVE	$ZIGLIB/std/os/linux.zig	/pub const EXCLUSIVE = (@as(u32, 1) << 28)/;"	constant
EXCL_SEM_ALREADY_OWNED	$ZIGLIB/std/os/windows/win32error.zig	/EXCL_SEM_ALREADY_OWNED = 101/;"	field
EXCL_UNLINK	$ZIGLIB/std/os/linux.zig	/pub const EXCL_UNLINK = 0x04000000/;"	constant
EXC_MASK_ALL	$ZIGLIB/std/c/darwin.zig	/^pub const EXC_MASK_ALL = EXC_MASK_BAD_ACCESS |$/;"	constant
EXC_MASK_ARITHMETIC	$ZIGLIB/std/c/darwin.zig	/^pub const EXC_MASK_ARITHMETIC = 1 << @enumToInt(EXC.ARITHMETIC)/;"	constant
EXC_MASK_BAD_ACCESS	$ZIGLIB/std/c/darwin.zig	/^pub const EXC_MASK_BAD_ACCESS = 1 << @enumToInt(EXC.BAD_ACCESS)/;"	constant
EXC_MASK_BAD_INSTRUCTION	$ZIGLIB/std/c/darwin.zig	/^pub const EXC_MASK_BAD_INSTRUCTION = 1 << @enumToInt(EXC.BAD_INSTRUCTION)/;"	constant
EXC_MASK_BREAKPOINT	$ZIGLIB/std/c/darwin.zig	/^pub const EXC_MASK_BREAKPOINT = 1 << @enumToInt(EXC.BREAKPOINT)/;"	constant
EXC_MASK_CORPSE_NOTIFY	$ZIGLIB/std/c/darwin.zig	/^pub const EXC_MASK_CORPSE_NOTIFY = 1 << @enumToInt(EXC.CORPSE_NOTIFY)/;"	constant
EXC_MASK_CRASH	$ZIGLIB/std/c/darwin.zig	/^pub const EXC_MASK_CRASH = 1 << @enumToInt(EXC.CRASH)/;"	constant
EXC_MASK_EMULATION	$ZIGLIB/std/c/darwin.zig	/^pub const EXC_MASK_EMULATION = 1 << @enumToInt(EXC.EMULATION)/;"	constant
EXC_MASK_GUARD	$ZIGLIB/std/c/darwin.zig	/^pub const EXC_MASK_GUARD = 1 << @enumToInt(EXC.GUARD)/;"	constant
EXC_MASK_MACHINE	$ZIGLIB/std/c/darwin/x86_64.zig	/^pub const EXC_MASK_MACHINE = 0/;"	constant
EXC_MASK_MACH_SYSCALL	$ZIGLIB/std/c/darwin.zig	/^pub const EXC_MASK_MACH_SYSCALL = 1 << @enumToInt(EXC.MACH_SYSCALL)/;"	constant
EXC_MASK_RESOURCE	$ZIGLIB/std/c/darwin.zig	/^pub const EXC_MASK_RESOURCE = 1 << @enumToInt(EXC.RESOURCE)/;"	constant
EXC_MASK_RPC_ALERT	$ZIGLIB/std/c/darwin.zig	/^pub const EXC_MASK_RPC_ALERT = 1 << @enumToInt(EXC.RPC_ALERT)/;"	constant
EXC_MASK_SOFTWARE	$ZIGLIB/std/c/darwin.zig	/^pub const EXC_MASK_SOFTWARE = 1 << @enumToInt(EXC.SOFTWARE)/;"	constant
EXC_MASK_SYSCALL	$ZIGLIB/std/c/darwin.zig	/^pub const EXC_MASK_SYSCALL = 1 << @enumToInt(EXC.SYSCALL)/;"	constant
EXC_SOFT_SIGNAL	$ZIGLIB/std/c/darwin.zig	/^pub const EXC_SOFT_SIGNAL = 0x10003/;"	constant
EXC_TYPES_COUNT	$ZIGLIB/std/c/darwin/x86_64.zig	/^pub const EXC_TYPES_COUNT = 14/;"	constant
EXEC	$ZIGLIB/std/os/plan9.zig	/EXEC = 7/;"	field
EXECNAME	$ZIGLIB/std/c/solaris.zig	/pub const EXECNAME = 2014/;"	constant
EXECUTABLE	$ZIGLIB/std/os/linux/x86_64.zig	/pub const EXECUTABLE = 0x1000/;"	constant
EXECUTABLE_IMAGE	$ZIGLIB/std/coff.zig	/EXECUTABLE_IMAGE: u1 = 0/;"	field
EXE_CANNOT_MODIFY_SIGNED_BINARY	$ZIGLIB/std/os/windows/win32error.zig	/EXE_CANNOT_MODIFY_SIGNED_BINARY = 217/;"	field
EXE_CANNOT_MODIFY_STRONG_SIGNED_BINARY	$ZIGLIB/std/os/windows/win32error.zig	/EXE_CANNOT_MODIFY_STRONG_SIGNED_BINARY = 218/;"	field
EXE_MACHINE_TYPE_MISMATCH	$ZIGLIB/std/os/windows/win32error.zig	/EXE_MACHINE_TYPE_MISMATCH = 216/;"	field
EXE_MARKED_INVALID	$ZIGLIB/std/os/windows/win32error.zig	/EXE_MARKED_INVALID = 192/;"	field
EXIST	$ZIGLIB/std/os/wasi.zig	/EXIST = 20/;"	field
EXIT	$ZIGLIB/std/os/linux/bpf.zig	/^pub const EXIT = 0x90/;"	constant
EXITED	$ZIGLIB/std/os/linux.zig	/pub const EXITED = 4/;"	constant
EXITS	$ZIGLIB/std/os/plan9.zig	/EXITS = 8/;"	field
EXITSTATUS	$ZIGLIB/std/os/linux.zig	/pub fn EXITSTATUS(s: u32) u8 {$/;"	function
EXLOCK	$ZIGLIB/std/c/openbsd.zig	/pub const EXLOCK = 0x00000020/;"	constant
EXPAND_SZ	$ZIGLIB/std/os/windows.zig	/pub const EXPAND_SZ: ULONG = 2/;"	constant
EXPEDITED_1122	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const EXPEDITED_1122 = 2/;"	constant
EXPIRE	$ZIGLIB/std/os/linux.zig	/pub const EXPIRE = 4/;"	constant
EXPIRED	$ZIGLIB/std/c/openbsd.zig	/pub const EXPIRED: c_int = 0x20/;"	constant
EXPIRED_HANDLE	$ZIGLIB/std/os/windows/ntstatus.zig	/EXPIRED_HANDLE = 0xC0190060/;"	field
EXPORT	$ZIGLIB/std/coff.zig	/EXPORT = 0/;"	field
EXPORT_SYMBOL_FLAGS_KIND_ABSOLUTE	$ZIGLIB/std/macho.zig	/^pub const EXPORT_SYMBOL_FLAGS_KIND_ABSOLUTE: u8 = 0x02/;"	constant
EXPORT_SYMBOL_FLAGS_KIND_MASK	$ZIGLIB/std/macho.zig	/^pub const EXPORT_SYMBOL_FLAGS_KIND_MASK: u8 = 0x03/;"	constant
EXPORT_SYMBOL_FLAGS_KIND_REGULAR	$ZIGLIB/std/macho.zig	/^pub const EXPORT_SYMBOL_FLAGS_KIND_REGULAR: u8 = 0x00/;"	constant
EXPORT_SYMBOL_FLAGS_KIND_THREAD_LOCAL	$ZIGLIB/std/macho.zig	/^pub const EXPORT_SYMBOL_FLAGS_KIND_THREAD_LOCAL: u8 = 0x01/;"	constant
EXPORT_SYMBOL_FLAGS_KIND_WEAK_DEFINITION	$ZIGLIB/std/macho.zig	/^pub const EXPORT_SYMBOL_FLAGS_KIND_WEAK_DEFINITION: u8 = 0x04/;"	constant
EXPORT_SYMBOL_FLAGS_REEXPORT	$ZIGLIB/std/macho.zig	/^pub const EXPORT_SYMBOL_FLAGS_REEXPORT: u8 = 0x08/;"	constant
EXPORT_SYMBOL_FLAGS_STUB_AND_RESOLVER	$ZIGLIB/std/macho.zig	/^pub const EXPORT_SYMBOL_FLAGS_STUB_AND_RESOLVER: u8 = 0x10/;"	constant
EXTA	$ZIGLIB/std/c/openbsd.zig	/^pub const EXTA = 19200/;"	constant
EXTB	$ZIGLIB/std/c/openbsd.zig	/^pub const EXTB = 38400/;"	constant
EXTEND	$ZIGLIB/std/c/darwin.zig	/pub const EXTEND = 0x0200/;"	constant
EXTENDED	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const EXTENDED = 2147483648/;"	constant
EXTENDED_ATTRIBUTE	$ZIGLIB/std/os/darwin/cssm.zig	/EXTENDED_ATTRIBUTE/;"	field
EXTENDED_ERROR	$ZIGLIB/std/os/windows/win32error.zig	/EXTENDED_ERROR = 1208/;"	field
EXTERNAL	$ZIGLIB/std/coff.zig	/EXTERNAL = 2/;"	field
EXTERNAL_DEF	$ZIGLIB/std/coff.zig	/EXTERNAL_DEF = 5/;"	field
EXTPROC	$ZIGLIB/std/c/darwin.zig	/^pub const EXTPROC: tcflag_t = 0x00000800/;"	constant
EXTRANEOUS_INFORMATION	$ZIGLIB/std/os/windows/win32error.zig	/EXTRANEOUS_INFORMATION = 677/;"	field
EXT_MASK	$ZIGLIB/std/os/linux.zig	/EXT_MASK/;"	field
EX_DLLCHARACTERISTICS	$ZIGLIB/std/coff.zig	/EX_DLLCHARACTERISTICS = 20/;"	field
E_ABORT	$ZIGLIB/std/os/windows.zig	/^pub const E_ABORT = @bitCast(c_long, @as(c_ulong, 0x80004004))/;"	constant
E_ACCESSDENIED	$ZIGLIB/std/os/windows.zig	/^pub const E_ACCESSDENIED = @bitCast(c_long, @as(c_ulong, 0x80070005))/;"	constant
E_FAIL	$ZIGLIB/std/os/windows.zig	/^pub const E_FAIL = @bitCast(c_long, @as(c_ulong, 0x80004005))/;"	constant
E_HANDLE	$ZIGLIB/std/os/windows.zig	/^pub const E_HANDLE = @bitCast(c_long, @as(c_ulong, 0x80070006))/;"	constant
E_INVALIDARG	$ZIGLIB/std/os/windows.zig	/^pub const E_INVALIDARG = @bitCast(c_long, @as(c_ulong, 0x80070057))/;"	constant
E_NOINTERFACE	$ZIGLIB/std/os/windows.zig	/^pub const E_NOINTERFACE = @bitCast(c_long, @as(c_ulong, 0x80004002))/;"	constant
E_NOTIMPL	$ZIGLIB/std/os/windows.zig	/^pub const E_NOTIMPL = @bitCast(c_long, @as(c_ulong, 0x80004001))/;"	constant
E_OUTOFMEMORY	$ZIGLIB/std/os/windows.zig	/^pub const E_OUTOFMEMORY = @bitCast(c_long, @as(c_ulong, 0x8007000E))/;"	constant
E_POINTER	$ZIGLIB/std/os/windows.zig	/^pub const E_POINTER = @bitCast(c_long, @as(c_ulong, 0x80004003))/;"	constant
E_UNEXPECTED	$ZIGLIB/std/os/windows.zig	/^pub const E_UNEXPECTED = @bitCast(c_long, @as(c_ulong, 0x8000FFFF))/;"	constant
EaInformation	$ZIGLIB/std/os/windows.zig	/EaInformation: FILE_EA_INFORMATION/;"	field
EaSize	$ZIGLIB/std/os/windows.zig	/EaSize: ULONG/;"	field
Ecdsa	$ZIGLIB/std/crypto/tls/Client.zig	/const Ecdsa = SchemeEcdsa(comptime_scheme)/;"	constant
EcdsaP256Sha256	$ZIGLIB/std/crypto/ecdsa.zig	/^pub const EcdsaP256Sha256 = Ecdsa(crypto.ecc.P256, crypto.hash.sha2.Sha256)/;"	constant
EcdsaP256Sha3_256	$ZIGLIB/std/crypto/ecdsa.zig	/^pub const EcdsaP256Sha3_256 = Ecdsa(crypto.ecc.P256, crypto.hash.sha3.Sha3_256)/;"	constant
EcdsaP256Sha3_384	$ZIGLIB/std/crypto/ecdsa.zig	/^pub const EcdsaP256Sha3_384 = Ecdsa(crypto.ecc.P384, crypto.hash.sha3.Sha3_384)/;"	constant
EcdsaP384Sha384	$ZIGLIB/std/crypto/ecdsa.zig	/^pub const EcdsaP384Sha384 = Ecdsa(crypto.ecc.P384, crypto.hash.sha2.Sha384)/;"	constant
EcdsaSecp256k1Sha256	$ZIGLIB/std/crypto/ecdsa.zig	/^pub const EcdsaSecp256k1Sha256 = Ecdsa(crypto.ecc.Secp256k1, crypto.hash.sha2.Sha256)/;"	constant
EcdsaSecp256k1Sha256oSha256	$ZIGLIB/std/crypto/ecdsa.zig	/^pub const EcdsaSecp256k1Sha256oSha256 = Ecdsa(crypto.ecc.Secp256k1, crypto.hash.composition.Sha256oSha256)/;"	constant
Ed25519	$ZIGLIB/std/crypto/25519/ed25519.zig	/^pub const Ed25519 = struct {$/;"	struct
EdidActiveProtocol	$ZIGLIB/std/os/uefi/protocols/edid_active_protocol.zig	/^pub const EdidActiveProtocol = extern struct {$/;"	struct
EdidDiscoveredProtocol	$ZIGLIB/std/os/uefi/protocols/edid_discovered_protocol.zig	/^pub const EdidDiscoveredProtocol = extern struct {$/;"	struct
EdidOverrideProtocol	$ZIGLIB/std/os/uefi/protocols/edid_override_protocol.zig	/^pub const EdidOverrideProtocol = extern struct {$/;"	struct
EdidOverrideProtocolAttributes	$ZIGLIB/std/os/uefi/protocols/edid_override_protocol.zig	/^pub const EdidOverrideProtocolAttributes = packed struct(u32) {$/;"	struct
Edwards25519	$ZIGLIB/std/crypto/25519/edwards25519.zig	/^pub const Edwards25519 = struct {$/;"	struct
EfiApplication	$ZIGLIB/std/target.zig	/EfiApplication/;"	field
EfiBlockMedia	$ZIGLIB/std/os/uefi/protocols/block_io_protocol.zig	/^pub const EfiBlockMedia = extern struct {$/;"	struct
EfiBootServiceDriver	$ZIGLIB/std/target.zig	/EfiBootServiceDriver/;"	field
EfiError	$ZIGLIB/std/os/uefi/status.zig	/pub const EfiError = error{$/;"	constant
EfiEventNotify	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/^pub const EfiEventNotify = *const fn (event: Event, ctx: *anyopaque) callconv(.C) void/;"	constant
EfiInterfaceType	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/^pub const EfiInterfaceType = enum(u32) {$/;"	enum
EfiMain	$ZIGLIB/std/start.zig	/^fn EfiMain(handle: uefi.Handle, system_table: *uefi.tables.SystemTable) callconv(.C) usize {$/;"	function
EfiNativeInterface	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/EfiNativeInterface/;"	field
EfiPhysicalAddress	$ZIGLIB/std/os/uefi/tables/runtime_services.zig	/^const EfiPhysicalAddress = u64/;"	constant
EfiRom	$ZIGLIB/std/target.zig	/EfiRom/;"	field
EfiRuntimeDriver	$ZIGLIB/std/target.zig	/EfiRuntimeDriver/;"	field
Ehdr	$ZIGLIB/std/elf.zig	/^pub const Ehdr = switch (@sizeOf(usize)) {$/;"	constant
EightTimesTrueMin	$ZIGLIB/std/math/ldexp.zig	/const EightTimesTrueMin = @bitCast(T, @as(Z, 8))/;"	constant
Elem	$ZIGLIB/std/multi_array_list.zig	/pub const Elem = S/;"	constant
Element	$ZIGLIB/std/wasm.zig	/^pub const Element = struct {$/;"	struct
ElementShiftAmountType	$ZIGLIB/std/json.zig	/const ElementShiftAmountType = std.math.Log2Int(ElementType)/;"	constant
ElementType	$ZIGLIB/std/json.zig	/const ElementType = @Type(.{ .Int = .{ .signedness = .unsigned, .bits = element_bitcount } })/;"	constant
Elf32_Addr	$ZIGLIB/std/elf.zig	/^pub const Elf32_Addr = u32/;"	constant
Elf32_Chdr	$ZIGLIB/std/elf.zig	/^pub const Elf32_Chdr = extern struct {$/;"	struct
Elf32_Conflict	$ZIGLIB/std/elf.zig	/^pub const Elf32_Conflict = Elf32_Addr/;"	constant
Elf32_Dyn	$ZIGLIB/std/elf.zig	/^pub const Elf32_Dyn = extern struct {$/;"	struct
Elf32_Ehdr	$ZIGLIB/std/elf.zig	/^pub const Elf32_Ehdr = extern struct {$/;"	struct
Elf32_Half	$ZIGLIB/std/elf.zig	/^pub const Elf32_Half = u16/;"	constant
Elf32_Lib	$ZIGLIB/std/elf.zig	/^pub const Elf32_Lib = extern struct {$/;"	struct
Elf32_Move	$ZIGLIB/std/elf.zig	/^pub const Elf32_Move = extern struct {$/;"	struct
Elf32_Nhdr	$ZIGLIB/std/elf.zig	/^pub const Elf32_Nhdr = extern struct {$/;"	struct
Elf32_Off	$ZIGLIB/std/elf.zig	/^pub const Elf32_Off = u32/;"	constant
Elf32_Phdr	$ZIGLIB/std/elf.zig	/^pub const Elf32_Phdr = extern struct {$/;"	struct
Elf32_RegInfo	$ZIGLIB/std/elf.zig	/^pub const Elf32_RegInfo = extern struct {$/;"	struct
Elf32_Rel	$ZIGLIB/std/elf.zig	/^pub const Elf32_Rel = extern struct {$/;"	struct
Elf32_Rela	$ZIGLIB/std/elf.zig	/^pub const Elf32_Rela = extern struct {$/;"	struct
Elf32_Section	$ZIGLIB/std/elf.zig	/^pub const Elf32_Section = u16/;"	constant
Elf32_Shdr	$ZIGLIB/std/elf.zig	/^pub const Elf32_Shdr = extern struct {$/;"	struct
Elf32_Sword	$ZIGLIB/std/elf.zig	/^pub const Elf32_Sword = i32/;"	constant
Elf32_Sxword	$ZIGLIB/std/elf.zig	/^pub const Elf32_Sxword = i64/;"	constant
Elf32_Sym	$ZIGLIB/std/elf.zig	/^pub const Elf32_Sym = extern struct {$/;"	struct
Elf32_Syminfo	$ZIGLIB/std/elf.zig	/^pub const Elf32_Syminfo = extern struct {$/;"	struct
Elf32_Verdaux	$ZIGLIB/std/elf.zig	/^pub const Elf32_Verdaux = extern struct {$/;"	struct
Elf32_Verdef	$ZIGLIB/std/elf.zig	/^pub const Elf32_Verdef = extern struct {$/;"	struct
Elf32_Vernaux	$ZIGLIB/std/elf.zig	/^pub const Elf32_Vernaux = extern struct {$/;"	struct
Elf32_Verneed	$ZIGLIB/std/elf.zig	/^pub const Elf32_Verneed = extern struct {$/;"	struct
Elf32_Versym	$ZIGLIB/std/elf.zig	/^pub const Elf32_Versym = Elf32_Half/;"	constant
Elf32_Word	$ZIGLIB/std/elf.zig	/^pub const Elf32_Word = u32/;"	constant
Elf32_Xword	$ZIGLIB/std/elf.zig	/^pub const Elf32_Xword = u64/;"	constant
Elf32_auxv_t	$ZIGLIB/std/elf.zig	/^pub const Elf32_auxv_t = extern struct {$/;"	struct
Elf32_gptab	$ZIGLIB/std/elf.zig	/^pub const Elf32_gptab = extern union {$/;"	union
Elf64_Addr	$ZIGLIB/std/elf.zig	/^pub const Elf64_Addr = u64/;"	constant
Elf64_Chdr	$ZIGLIB/std/elf.zig	/^pub const Elf64_Chdr = extern struct {$/;"	struct
Elf64_Dyn	$ZIGLIB/std/elf.zig	/^pub const Elf64_Dyn = extern struct {$/;"	struct
Elf64_Ehdr	$ZIGLIB/std/elf.zig	/^pub const Elf64_Ehdr = extern struct {$/;"	struct
Elf64_Half	$ZIGLIB/std/elf.zig	/^pub const Elf64_Half = u16/;"	constant
Elf64_Lib	$ZIGLIB/std/elf.zig	/^pub const Elf64_Lib = extern struct {$/;"	struct
Elf64_Move	$ZIGLIB/std/elf.zig	/^pub const Elf64_Move = extern struct {$/;"	struct
Elf64_Nhdr	$ZIGLIB/std/elf.zig	/^pub const Elf64_Nhdr = extern struct {$/;"	struct
Elf64_Off	$ZIGLIB/std/elf.zig	/^pub const Elf64_Off = u64/;"	constant
Elf64_Phdr	$ZIGLIB/std/elf.zig	/^pub const Elf64_Phdr = extern struct {$/;"	struct
Elf64_Rel	$ZIGLIB/std/elf.zig	/^pub const Elf64_Rel = extern struct {$/;"	struct
Elf64_Rela	$ZIGLIB/std/elf.zig	/^pub const Elf64_Rela = extern struct {$/;"	struct
Elf64_Section	$ZIGLIB/std/elf.zig	/^pub const Elf64_Section = u16/;"	constant
Elf64_Shdr	$ZIGLIB/std/elf.zig	/^pub const Elf64_Shdr = extern struct {$/;"	struct
Elf64_Sword	$ZIGLIB/std/elf.zig	/^pub const Elf64_Sword = i32/;"	constant
Elf64_Sxword	$ZIGLIB/std/elf.zig	/^pub const Elf64_Sxword = i64/;"	constant
Elf64_Sym	$ZIGLIB/std/elf.zig	/^pub const Elf64_Sym = extern struct {$/;"	struct
Elf64_Syminfo	$ZIGLIB/std/elf.zig	/^pub const Elf64_Syminfo = extern struct {$/;"	struct
Elf64_Verdaux	$ZIGLIB/std/elf.zig	/^pub const Elf64_Verdaux = extern struct {$/;"	struct
Elf64_Verdef	$ZIGLIB/std/elf.zig	/^pub const Elf64_Verdef = extern struct {$/;"	struct
Elf64_Vernaux	$ZIGLIB/std/elf.zig	/^pub const Elf64_Vernaux = extern struct {$/;"	struct
Elf64_Verneed	$ZIGLIB/std/elf.zig	/^pub const Elf64_Verneed = extern struct {$/;"	struct
Elf64_Versym	$ZIGLIB/std/elf.zig	/^pub const Elf64_Versym = Elf64_Half/;"	constant
Elf64_Word	$ZIGLIB/std/elf.zig	/^pub const Elf64_Word = u32/;"	constant
Elf64_Xword	$ZIGLIB/std/elf.zig	/^pub const Elf64_Xword = u64/;"	constant
Elf64_auxv_t	$ZIGLIB/std/elf.zig	/^pub const Elf64_auxv_t = extern struct {$/;"	struct
ElfDynLib	$ZIGLIB/std/dynamic_library.zig	/^pub const ElfDynLib = struct {$/;"	struct
Elf_MIPS_ABIFlags_v0	$ZIGLIB/std/elf.zig	/^pub const Elf_MIPS_ABIFlags_v0 = extern struct {$/;"	struct
Elf_Options	$ZIGLIB/std/elf.zig	/^pub const Elf_Options = extern struct {$/;"	struct
Elf_Options_Hw	$ZIGLIB/std/elf.zig	/^pub const Elf_Options_Hw = extern struct {$/;"	struct
Elf_Symndx	$ZIGLIB/std/os/linux/x86_64.zig	/^pub const Elf_Symndx = u32/;"	constant
Ellipsis	$ZIGLIB/std/c/tokenizer.zig	/Ellipsis/;"	field
EmitOption	$ZIGLIB/std/Build/CompileStep.zig	/^pub const EmitOption = union(enum) {$/;"	union
EmulatableRunStep	$ZIGLIB/std/Build/EmulatableRunStep.zig	/^const EmulatableRunStep = @This()/;"	constant
EnableAddrErrorReportingInRange	$ZIGLIB/std/valgrind/memcheck.zig	/EnableAddrErrorReportingInRange/;"	field
EnableStatsAttr	$ZIGLIB/std/os/linux/bpf.zig	/^pub const EnableStatsAttr = extern struct {$/;"	struct
EnabledFeatures	$ZIGLIB/std/os/windows.zig	/EnabledFeatures: ULONG64/;"	field
EnclaveFeatureMask	$ZIGLIB/std/os/windows.zig	/EnclaveFeatureMask: [4]ULONG/;"	field
Encoder	$ZIGLIB/std/crypto/bcrypt.zig	/Encoder: base64.Base64Encoder/;"	field
Encoding	$ZIGLIB/std/crypto.zig	/pub const Encoding = enum {$/;"	enum
EncodingError	$ZIGLIB/std/crypto/scrypt.zig	/^const EncodingError = phc_format.Error/;"	constant
EncryptCtx	$ZIGLIB/std/crypto/aes_ocb.zig	/const EncryptCtx = aes.AesEncryptCtx(Aes)/;"	constant
EndAddress	$ZIGLIB/std/os/windows.zig	/EndAddress: DWORD/;"	field
EndAddressOfRawData	$ZIGLIB/std/start_windows_tls.zig	/EndAddressOfRawData: *anyopaque/;"	field
EndAlternatives	$ZIGLIB/std/os/windows.zig	/EndAlternatives/;"	field
EndColumn	$ZIGLIB/std/pdb.zig	/EndColumn: u16/;"	field
EndDevicePath	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/^pub const EndDevicePath = union(Subtype) {$/;"	union
EndEntire	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/EndEntire: *const EndEntireDevicePath/;"	field
EndEntireDevicePath	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/pub const EndEntireDevicePath = extern struct {$/;"	struct
EndOfFile	$ZIGLIB/std/os/windows.zig	/EndOfFile: LARGE_INTEGER/;"	field
EndOfMedia	$ZIGLIB/std/os/uefi/status.zig	/EndOfMedia = high_bit | 28/;"	field
EndThisInstance	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/EndThisInstance: *const EndThisInstanceDevicePath/;"	field
EndThisInstanceDevicePath	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/pub const EndThisInstanceDevicePath = extern struct {$/;"	struct
Endian	$ZIGLIB/std/builtin.zig	/^pub const Endian = enum {$/;"	enum
Endormorphism	$ZIGLIB/std/crypto/pcurves/secp256k1.zig	/pub const Endormorphism = struct {$/;"	struct
Entry	$ZIGLIB/std/treap.zig	/pub const Entry = struct {$/;"	struct
EntryContext	$ZIGLIB/std/os/windows.zig	/EntryContext: ?*anyopaque/;"	field
EntryCount	$ZIGLIB/std/os/windows.zig	/EntryCount: DWORD/;"	field
EntryInProgress	$ZIGLIB/std/os/windows.zig	/EntryInProgress: PVOID/;"	field
EntryPoint	$ZIGLIB/std/os/windows.zig	/EntryPoint: PVOID/;"	field
Enum	$ZIGLIB/std/os/linux/bpf/btf.zig	/^pub const Enum = extern struct {$/;"	struct
Enum64	$ZIGLIB/std/os/linux/bpf/btf.zig	/^pub const Enum64 = extern struct {$/;"	struct
EnumArray	$ZIGLIB/std/enums.zig	/^pub fn EnumArray(comptime E: type, comptime V: type) type {$/;"	function
EnumArrayExt	$ZIGLIB/std/enums.zig	/fn EnumArrayExt(comptime Self: type) type {$/;"	function
EnumField	$ZIGLIB/std/builtin.zig	/pub const EnumField = struct {$/;"	struct
EnumFieldStruct	$ZIGLIB/std/enums.zig	/^pub fn EnumFieldStruct(comptime E: type, comptime Data: type, comptime field_default: ?Data) type {$/;"	function
EnumIndexer	$ZIGLIB/std/enums.zig	/^pub fn EnumIndexer(comptime E: type) type {$/;"	function
EnumKV	$ZIGLIB/std/meta.zig	/const EnumKV = struct { []const u8, T }/;"	struct
EnumLiteral	$ZIGLIB/std/builtin.zig	/EnumLiteral: void/;"	field
EnumMap	$ZIGLIB/std/enums.zig	/^pub fn EnumMap(comptime E: type, comptime V: type) type {$/;"	function
EnumMapExt	$ZIGLIB/std/enums.zig	/fn EnumMapExt(comptime Self: type) type {$/;"	function
EnumMultiset	$ZIGLIB/std/enums.zig	/^pub fn EnumMultiset(comptime E: type) type {$/;"	function
EnumSet	$ZIGLIB/std/enums.zig	/^pub fn EnumSet(comptime E: type) type {$/;"	function
EnumSetExt	$ZIGLIB/std/enums.zig	/fn EnumSetExt(comptime Self: type) type {$/;"	function
EnumType	$ZIGLIB/std/meta.zig	/const EnumType = enum { a, b }/;"	enum
EnvMap	$ZIGLIB/std/process.zig	/^pub const EnvMap = struct {$/;"	struct
EnvNameHashContext	$ZIGLIB/std/process.zig	/pub const EnvNameHashContext = struct {$/;"	struct
Environment	$ZIGLIB/std/os/windows.zig	/Environment: [*:0]WCHAR/;"	field
EpochDay	$ZIGLIB/std/time/epoch.zig	/^pub const EpochDay = struct {$/;"	struct
EpochSeconds	$ZIGLIB/std/time/epoch.zig	/^pub const EpochSeconds = struct {$/;"	struct
EpollCreateError	$ZIGLIB/std/os.zig	/^pub const EpollCreateError = error{$/;"	constant
EpollCtlError	$ZIGLIB/std/os.zig	/^pub const EpollCtlError = error{$/;"	constant
Equal	$ZIGLIB/std/c/tokenizer.zig	/Equal/;"	field
EqualEqual	$ZIGLIB/std/c/tokenizer.zig	/EqualEqual/;"	field
ErrInt	$ZIGLIB/std/child_process.zig	/^const ErrInt = std.meta.Int(.unsigned, @sizeOf(anyerror) * 8)/;"	constant
ErrSet	$ZIGLIB/std/io/multi_writer.zig	/comptime var ErrSet = error{}/;"	variable
Error	$ZIGLIB/std/zig/string_literal.zig	/^pub const Error = union(enum) {$/;"	union
ErrorLinux	$ZIGLIB/std/fs.zig	/pub const ErrorLinux = error{DirNotFound} || IteratorError/;"	constant
ErrorOffset	$ZIGLIB/std/os/windows.zig	/ErrorOffset: DWORD/;"	field
ErrorOpcode	$ZIGLIB/std/os/windows.zig	/ErrorOpcode: WORD/;"	field
ErrorSelector	$ZIGLIB/std/os/windows.zig	/ErrorSelector: WORD/;"	field
ErrorSet	$ZIGLIB/std/builtin.zig	/pub const ErrorSet = ?[]const Error/;"	constant
ErrorUnion	$ZIGLIB/std/builtin.zig	/pub const ErrorUnion = struct {$/;"	struct
ErrorWasi	$ZIGLIB/std/fs.zig	/pub const ErrorWasi = error{DirNotFound} || IteratorError/;"	constant
Errors	$ZIGLIB/std/hash/auto_hash.zig	/const Errors = error{Test}/;"	constant
EscapeSequence	$ZIGLIB/std/c/tokenizer.zig	/EscapeSequence/;"	field
Even	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/Even = 2/;"	field
Event	$ZIGLIB/std/os/uefi.zig	/^pub const Event = *opaque {}/;"	constant
EventFd	$ZIGLIB/std/event/loop.zig	/pub const EventFd = switch (builtin.os.tag) {$/;"	constant
EventFdError	$ZIGLIB/std/os.zig	/^pub const EventFdError = error{$/;"	constant
EventPort	$ZIGLIB/std/fs/file.zig	/EventPort/;"	field
ExceptionAddress	$ZIGLIB/std/os/windows.zig	/ExceptionAddress: *anyopaque/;"	field
ExceptionCode	$ZIGLIB/std/os/windows.zig	/ExceptionCode: u32/;"	field
ExceptionFlags	$ZIGLIB/std/os/windows.zig	/ExceptionFlags: u32/;"	field
ExceptionInformation	$ZIGLIB/std/os/windows.zig	/ExceptionInformation: [15]usize/;"	field
ExceptionList	$ZIGLIB/std/os/windows.zig	/ExceptionList: ?*EXCEPTION_REGISTRATION_RECORD/;"	field
ExceptionRecord	$ZIGLIB/std/os/windows.zig	/ExceptionRecord: *EXCEPTION_RECORD/;"	field
Exclusive	$ZIGLIB/std/fs/file.zig	/Exclusive/;"	field
ExecError	$ZIGLIB/std/Build.zig	/^pub const ExecError = error{$/;"	constant
ExecResult	$ZIGLIB/std/child_process.zig	/pub const ExecResult = struct {$/;"	struct
ExecutableOptions	$ZIGLIB/std/Build.zig	/^pub const ExecutableOptions = struct {$/;"	struct
Executor	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/^pub const Executor = union(enum) {$/;"	union
ExecvError	$ZIGLIB/std/process.zig	/^pub const ExecvError = std.os.ExecveError || error{OutOfMemory}/;"	constant
ExecveError	$ZIGLIB/std/os.zig	/^pub const ExecveError = error{$/;"	constant
ExitData	$ZIGLIB/std/builtin.zig	/const ExitData = struct {$/;"	struct
ExitStatus	$ZIGLIB/std/os/windows.zig	/ExitStatus: NTSTATUS/;"	field
Exited	$ZIGLIB/std/child_process.zig	/Exited: u8/;"	field
ExpDist	$ZIGLIB/std/rand/ziggurat.zig	/^pub const ExpDist = blk: {$/;"	constant
ExpandedAcpi	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/ExpandedAcpi: *const ExpandedAcpiDevicePath/;"	field
ExpandedAcpiDevicePath	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/pub const ExpandedAcpiDevicePath = extern struct {$/;"	struct
ExpectAssumeKHR	$ZIGLIB/std/target/spirv.zig	/ExpectAssumeKHR/;"	field
Export	$ZIGLIB/std/wasm.zig	/^pub const Export = struct {$/;"	struct
ExportOptions	$ZIGLIB/std/builtin.zig	/^pub const ExportOptions = struct {$/;"	struct
ExprLoc	$ZIGLIB/std/dwarf.zig	/ExprLoc: []u8/;"	field
ExtendedRegisters	$ZIGLIB/std/os/windows.zig	/ExtendedRegisters: [512]BYTE/;"	field
ExtensionId	$ZIGLIB/std/crypto/Certificate.zig	/^pub const ExtensionId = enum {$/;"	enum
ExtensionType	$ZIGLIB/std/crypto/tls.zig	/^pub const ExtensionType = enum(u16) {$/;"	enum
Extern	$ZIGLIB/std/builtin.zig	/Extern/;"	field
ExternOptions	$ZIGLIB/std/builtin.zig	/^pub const ExternOptions = struct {$/;"	struct
ExternalKind	$ZIGLIB/std/wasm.zig	/^pub const ExternalKind = enum(u8) {$/;"	enum
F1394DevicePath	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/pub const F1394DevicePath = extern struct {$/;"	struct
F16T	$ZIGLIB/compiler_rt/common.zig	/^pub const F16T = switch (builtin.cpu.arch) {$/;"	constant
F2MC16	$ZIGLIB/std/elf.zig	/F2MC16 = 104/;"	field
FADVISE	$ZIGLIB/std/os/linux.zig	/FADVISE/;"	field
FAEROESE	$ZIGLIB/std/os/windows/lang.zig	/^pub const FAEROESE = 0x38/;"	constant
FAEROESE_FAROE_ISLANDS	$ZIGLIB/std/os/windows/sublang.zig	/^pub const FAEROESE_FAROE_ISLANDS = 0x01/;"	constant
FAIL	$ZIGLIB/std/c/solaris.zig	/FAIL = 4/;"	field
FAILED	$ZIGLIB/std/c/solaris.zig	/pub const FAILED = @intToPtr(*anyopaque, maxInt(usize))/;"	constant
FAILED_DRIVER_ENTRY	$ZIGLIB/std/os/windows/win32error.zig	/FAILED_DRIVER_ENTRY = 647/;"	field
FAILED_SERVICE_CONTROLLER_CONNECT	$ZIGLIB/std/os/windows/win32error.zig	/FAILED_SERVICE_CONTROLLER_CONNECT = 1063/;"	field
FAILED_STACK_SWITCH	$ZIGLIB/std/os/windows/ntstatus.zig	/FAILED_STACK_SWITCH = 0xC0000373/;"	field
FAILURE	$ZIGLIB/std/c/darwin.zig	/FAILURE = 5/;"	field
FAIL_CHECK	$ZIGLIB/std/os/windows/ntstatus.zig	/FAIL_CHECK = 0xC0000229/;"	field
FAIL_CONNECT_ON_ICMP_ERROR	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const FAIL_CONNECT_ON_ICMP_ERROR = 18/;"	constant
FAIL_FAST_EXCEPTION	$ZIGLIB/std/os/windows/win32error.zig	/FAIL_FAST_EXCEPTION = 1653/;"	field
FAIL_I24	$ZIGLIB/std/os/windows/win32error.zig	/FAIL_I24 = 83/;"	field
FAIL_NOACTION_REBOOT	$ZIGLIB/std/os/windows/win32error.zig	/FAIL_NOACTION_REBOOT = 350/;"	field
FAIL_REBOOT_INITIATED	$ZIGLIB/std/os/windows/win32error.zig	/FAIL_REBOOT_INITIATED = 3018/;"	field
FAIL_REBOOT_REQUIRED	$ZIGLIB/std/os/windows/win32error.zig	/FAIL_REBOOT_REQUIRED = 3017/;"	field
FAIL_RESTART	$ZIGLIB/std/os/windows/win32error.zig	/FAIL_RESTART = 352/;"	field
FAIL_SHUTDOWN	$ZIGLIB/std/os/windows/win32error.zig	/FAIL_SHUTDOWN = 351/;"	field
FALLOC	$ZIGLIB/std/os/linux.zig	/^pub const FALLOC = struct {$/;"	struct
FALLOCATE	$ZIGLIB/std/os/linux.zig	/FALLOCATE/;"	field
FALSE	$ZIGLIB/std/os/windows.zig	/^pub const FALSE = 0/;"	constant
FAMILY	$ZIGLIB/std/c/solaris.zig	/FAMILY = 5/;"	field
FAPPEND	$ZIGLIB/std/c/dragonfly.zig	/pub const FAPPEND = 1048576/;"	constant
FARPROC	$ZIGLIB/std/os/windows.zig	/^pub const FARPROC = *opaque {}/;"	constant
FARSI	$ZIGLIB/std/os/windows/lang.zig	/^pub const FARSI = 0x29/;"	constant
FASTFAIL_AVAILABLE	$ZIGLIB/std/os/windows.zig	/FASTFAIL_AVAILABLE = 23/;"	field
FASTOPEN	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const FASTOPEN = 15/;"	constant
FASTOPEN_CONNECT	$ZIGLIB/std/os/linux.zig	/pub const FASTOPEN_CONNECT = 30/;"	constant
FASTOPEN_KEY	$ZIGLIB/std/os/linux.zig	/pub const FASTOPEN_KEY = 33/;"	constant
FASTOPEN_NO_COOKIE	$ZIGLIB/std/os/linux.zig	/pub const FASTOPEN_NO_COOKIE = 34/;"	constant
FAST_MULT	$ZIGLIB/std/os/linux/arm-eabi.zig	/pub const FAST_MULT = 1 << 4/;"	constant
FASYNCWRITE	$ZIGLIB/std/c/dragonfly.zig	/pub const FASYNCWRITE = 8388608/;"	constant
FATAL_APP_EXIT	$ZIGLIB/std/os/windows/win32error.zig	/FATAL_APP_EXIT = 713/;"	field
FAT_CIGAM	$ZIGLIB/std/macho.zig	/^pub const FAT_CIGAM = 0xbebafeca/;"	constant
FAT_CIGAM_64	$ZIGLIB/std/macho.zig	/^pub const FAT_CIGAM_64 = 0xbfbafeca/;"	constant
FAT_MAGIC	$ZIGLIB/std/macho.zig	/^pub const FAT_MAGIC = 0xcafebabe/;"	constant
FAT_MAGIC_64	$ZIGLIB/std/macho.zig	/^pub const FAT_MAGIC_64 = 0xcafebabf/;"	constant
FAULT	$ZIGLIB/std/os/wasi.zig	/FAULT = 21/;"	field
FAUTH	$ZIGLIB/std/os/plan9.zig	/FAUTH = 10/;"	field
FAccessAt	$ZIGLIB/std/event/loop.zig	/pub const FAccessAt = struct {$/;"	struct
FBIG	$ZIGLIB/std/os/wasi.zig	/FBIG = 22/;"	field
FBLOCKING	$ZIGLIB/std/c/dragonfly.zig	/pub const FBLOCKING = 262144/;"	constant
FCHECK	$ZIGLIB/std/compress/zlib.zig	/const FCHECK = @truncate(u5, header[1])/;"	constant
FCNTL_FS_SPECIFIC_BASE	$ZIGLIB/std/c/darwin.zig	/^pub const FCNTL_FS_SPECIFIC_BASE = 0x00010000/;"	constant
FCOMMENT	$ZIGLIB/std/compress/gzip.zig	/^const FCOMMENT = 1 << 4/;"	constant
FChmodError	$ZIGLIB/std/os.zig	/^pub const FChmodError = error{$/;"	constant
FChownError	$ZIGLIB/std/os.zig	/^pub const FChownError = error{$/;"	constant
FD2PATH	$ZIGLIB/std/os/plan9.zig	/FD2PATH = 23/;"	field
FDCWD	$ZIGLIB/std/os/wasi.zig	/pub const FDCWD: fd_t = if (builtin.link_libc) -2 else 3/;"	constant
FDFLAG	$ZIGLIB/std/os/wasi.zig	/^pub const FDFLAG = struct {$/;"	struct
FDICT	$ZIGLIB/std/compress/zlib.zig	/const FDICT = @truncate(u1, header[1] >> 5)/;"	constant
FDPASS	$ZIGLIB/std/c/openbsd.zig	/pub const FDPASS = "fd"/;"	constant
FD_ACCEPT	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const FD_ACCEPT = 8/;"	constant
FD_ACCEPT_BIT	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const FD_ACCEPT_BIT = 3/;"	constant
FD_ADDRESS_LIST_CHANGE_BIT	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const FD_ADDRESS_LIST_CHANGE_BIT = 9/;"	constant
FD_ADVISE	$ZIGLIB/std/os/wasi.zig	/pub const FD_ADVISE: rights_t = 0x0000000000000080/;"	constant
FD_ALLOCATE	$ZIGLIB/std/os/wasi.zig	/pub const FD_ALLOCATE: rights_t = 0x0000000000000100/;"	constant
FD_CLOEXEC	$ZIGLIB/std/os/linux.zig	/pub const FD_CLOEXEC = 1 << 3/;"	constant
FD_CLOSE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const FD_CLOSE = 32/;"	constant
FD_CLOSE_BIT	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const FD_CLOSE_BIT = 5/;"	constant
FD_CONNECT	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const FD_CONNECT = 16/;"	constant
FD_CONNECT_BIT	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const FD_CONNECT_BIT = 4/;"	constant
FD_DATASYNC	$ZIGLIB/std/os/wasi.zig	/pub const FD_DATASYNC: rights_t = 0x0000000000000001/;"	constant
FD_FDSTAT_SET_FLAGS	$ZIGLIB/std/os/wasi.zig	/pub const FD_FDSTAT_SET_FLAGS: rights_t = 0x0000000000000008/;"	constant
FD_FILESTAT_GET	$ZIGLIB/std/os/wasi.zig	/pub const FD_FILESTAT_GET: rights_t = 0x0000000000200000/;"	constant
FD_FILESTAT_SET_SIZE	$ZIGLIB/std/os/wasi.zig	/pub const FD_FILESTAT_SET_SIZE: rights_t = 0x0000000000400000/;"	constant
FD_FILESTAT_SET_TIMES	$ZIGLIB/std/os/wasi.zig	/pub const FD_FILESTAT_SET_TIMES: rights_t = 0x0000000000800000/;"	constant
FD_GROUP_QOS_BIT	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const FD_GROUP_QOS_BIT = 7/;"	constant
FD_MAX_EVENTS	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const FD_MAX_EVENTS = 10/;"	constant
FD_NO_GROUP	$ZIGLIB/std/os/linux.zig	/pub const FD_NO_GROUP = 1 << 0/;"	constant
FD_OOB	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const FD_OOB = 4/;"	constant
FD_OOB_BIT	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const FD_OOB_BIT = 2/;"	constant
FD_OUTPUT	$ZIGLIB/std/os/linux.zig	/pub const FD_OUTPUT = 1 << 1/;"	constant
FD_QOS_BIT	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const FD_QOS_BIT = 6/;"	constant
FD_READ	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const FD_READ = 1/;"	constant
FD_READDIR	$ZIGLIB/std/os/wasi.zig	/pub const FD_READDIR: rights_t = 0x0000000000004000/;"	constant
FD_READ_BIT	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const FD_READ_BIT = 0/;"	constant
FD_ROUTING_INTERFACE_CHANGE_BIT	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const FD_ROUTING_INTERFACE_CHANGE_BIT = 8/;"	constant
FD_SEEK	$ZIGLIB/std/os/wasi.zig	/pub const FD_SEEK: rights_t = 0x0000000000000004/;"	constant
FD_SETSIZE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const FD_SETSIZE = 64/;"	constant
FD_SYNC	$ZIGLIB/std/os/wasi.zig	/pub const FD_SYNC: rights_t = 0x0000000000000010/;"	constant
FD_TELL	$ZIGLIB/std/os/wasi.zig	/pub const FD_TELL: rights_t = 0x0000000000000020/;"	constant
FD_WRITE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const FD_WRITE = 2/;"	constant
FD_WRITE_BIT	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const FD_WRITE_BIT = 1/;"	constant
FEXTRA	$ZIGLIB/std/compress/gzip.zig	/^const FEXTRA = 1 << 2/;"	constant
FFDLY	$ZIGLIB/std/c/darwin.zig	/^pub const FFDLY: tcflag_t = 0x00004000/;"	constant
FHCRC	$ZIGLIB/std/compress/gzip.zig	/^const FHCRC = 1 << 1/;"	constant
FIB_LOOKUP	$ZIGLIB/std/os/linux.zig	/pub const FIB_LOOKUP = 10/;"	constant
FIFO	$ZIGLIB/std/os/linux.zig	/pub const FIFO = 1/;"	constant
FILE	$ZIGLIB/std/os/linux.zig	/pub const FILE = LOCAL/;"	constant
FILEMARK_DETECTED	$ZIGLIB/std/os/windows/win32error.zig	/FILEMARK_DETECTED = 1101/;"	field
FILENAME_EXCED_RANGE	$ZIGLIB/std/os/windows/win32error.zig	/FILENAME_EXCED_RANGE = 206/;"	field
FILES	$ZIGLIB/std/os/linux.zig	/pub const FILES = 0x00000400/;"	constant
FILESERVER	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const FILESERVER = 262144/;"	constant
FILESTAT_SET_ATIM	$ZIGLIB/std/os/wasi.zig	/^pub const FILESTAT_SET_ATIM: fstflags_t = 0x0001/;"	constant
FILESTAT_SET_ATIM_NOW	$ZIGLIB/std/os/wasi.zig	/^pub const FILESTAT_SET_ATIM_NOW: fstflags_t = 0x0002/;"	constant
FILESTAT_SET_MTIM	$ZIGLIB/std/os/wasi.zig	/^pub const FILESTAT_SET_MTIM: fstflags_t = 0x0004/;"	constant
FILESTAT_SET_MTIM_NOW	$ZIGLIB/std/os/wasi.zig	/^pub const FILESTAT_SET_MTIM_NOW: fstflags_t = 0x0008/;"	constant
FILES_OPEN	$ZIGLIB/std/os/windows/ntstatus.zig	/FILES_OPEN = 0xC0000107/;"	field
FILES_UPDATE	$ZIGLIB/std/os/linux.zig	/FILES_UPDATE/;"	field
FILETIME	$ZIGLIB/std/os/windows.zig	/^pub const FILETIME = extern struct {$/;"	struct
FILE_ACCESS_INFORMATION	$ZIGLIB/std/os/windows.zig	/^pub const FILE_ACCESS_INFORMATION = extern struct {$/;"	struct
FILE_ACTION_ADDED	$ZIGLIB/std/os/windows.zig	/^pub const FILE_ACTION_ADDED = 0x00000001/;"	constant
FILE_ACTION_MODIFIED	$ZIGLIB/std/os/windows.zig	/^pub const FILE_ACTION_MODIFIED = 0x00000003/;"	constant
FILE_ACTION_REMOVED	$ZIGLIB/std/os/windows.zig	/^pub const FILE_ACTION_REMOVED = 0x00000002/;"	constant
FILE_ACTION_RENAMED_NEW_NAME	$ZIGLIB/std/os/windows.zig	/^pub const FILE_ACTION_RENAMED_NEW_NAME = 0x00000005/;"	constant
FILE_ACTION_RENAMED_OLD_NAME	$ZIGLIB/std/os/windows.zig	/^pub const FILE_ACTION_RENAMED_OLD_NAME = 0x00000004/;"	constant
FILE_ADD_FILE	$ZIGLIB/std/os/windows.zig	/^pub const FILE_ADD_FILE = 0x00000002/;"	constant
FILE_ADD_SUBDIRECTORY	$ZIGLIB/std/os/windows.zig	/^pub const FILE_ADD_SUBDIRECTORY = 0x00000004/;"	constant
FILE_ALIGNMENT_INFORMATION	$ZIGLIB/std/os/windows.zig	/^pub const FILE_ALIGNMENT_INFORMATION = extern struct {$/;"	struct
FILE_ALL_INFORMATION	$ZIGLIB/std/os/windows.zig	/^pub const FILE_ALL_INFORMATION = extern struct {$/;"	struct
FILE_ANY_ACCESS	$ZIGLIB/std/os/windows.zig	/^pub const FILE_ANY_ACCESS = 0/;"	constant
FILE_APPEND_DATA	$ZIGLIB/std/os/windows.zig	/^pub const FILE_APPEND_DATA = 0x00000004/;"	constant
FILE_ATTRIBUTE_ARCHIVE	$ZIGLIB/std/os/windows.zig	/^pub const FILE_ATTRIBUTE_ARCHIVE = 0x20/;"	constant
FILE_ATTRIBUTE_COMPRESSED	$ZIGLIB/std/os/windows.zig	/^pub const FILE_ATTRIBUTE_COMPRESSED = 0x800/;"	constant
FILE_ATTRIBUTE_DEVICE	$ZIGLIB/std/os/windows.zig	/^pub const FILE_ATTRIBUTE_DEVICE = 0x40/;"	constant
FILE_ATTRIBUTE_DIRECTORY	$ZIGLIB/std/os/windows.zig	/^pub const FILE_ATTRIBUTE_DIRECTORY = 0x10/;"	constant
FILE_ATTRIBUTE_ENCRYPTED	$ZIGLIB/std/os/windows.zig	/^pub const FILE_ATTRIBUTE_ENCRYPTED = 0x4000/;"	constant
FILE_ATTRIBUTE_HIDDEN	$ZIGLIB/std/os/windows.zig	/^pub const FILE_ATTRIBUTE_HIDDEN = 0x2/;"	constant
FILE_ATTRIBUTE_INTEGRITY_STREAM	$ZIGLIB/std/os/windows.zig	/^pub const FILE_ATTRIBUTE_INTEGRITY_STREAM = 0x8000/;"	constant
FILE_ATTRIBUTE_NORMAL	$ZIGLIB/std/os/windows.zig	/^pub const FILE_ATTRIBUTE_NORMAL = 0x80/;"	constant
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED	$ZIGLIB/std/os/windows.zig	/^pub const FILE_ATTRIBUTE_NOT_CONTENT_INDEXED = 0x2000/;"	constant
FILE_ATTRIBUTE_NO_SCRUB_DATA	$ZIGLIB/std/os/windows.zig	/^pub const FILE_ATTRIBUTE_NO_SCRUB_DATA = 0x20000/;"	constant
FILE_ATTRIBUTE_OFFLINE	$ZIGLIB/std/os/windows.zig	/^pub const FILE_ATTRIBUTE_OFFLINE = 0x1000/;"	constant
FILE_ATTRIBUTE_READONLY	$ZIGLIB/std/os/windows.zig	/^pub const FILE_ATTRIBUTE_READONLY = 0x1/;"	constant
FILE_ATTRIBUTE_RECALL_ON_DATA_ACCESS	$ZIGLIB/std/os/windows.zig	/^pub const FILE_ATTRIBUTE_RECALL_ON_DATA_ACCESS = 0x400000/;"	constant
FILE_ATTRIBUTE_RECALL_ON_OPEN	$ZIGLIB/std/os/windows.zig	/^pub const FILE_ATTRIBUTE_RECALL_ON_OPEN = 0x40000/;"	constant
FILE_ATTRIBUTE_REPARSE_POINT	$ZIGLIB/std/os/windows.zig	/^pub const FILE_ATTRIBUTE_REPARSE_POINT = 0x400/;"	constant
FILE_ATTRIBUTE_SPARSE_FILE	$ZIGLIB/std/os/windows.zig	/^pub const FILE_ATTRIBUTE_SPARSE_FILE = 0x200/;"	constant
FILE_ATTRIBUTE_SYSTEM	$ZIGLIB/std/os/windows.zig	/^pub const FILE_ATTRIBUTE_SYSTEM = 0x4/;"	constant
FILE_ATTRIBUTE_TEMPORARY	$ZIGLIB/std/os/windows.zig	/^pub const FILE_ATTRIBUTE_TEMPORARY = 0x100/;"	constant
FILE_ATTRIBUTE_VIRTUAL	$ZIGLIB/std/os/windows.zig	/^pub const FILE_ATTRIBUTE_VIRTUAL = 0x10000/;"	constant
FILE_BASIC_INFORMATION	$ZIGLIB/std/os/windows.zig	/^pub const FILE_BASIC_INFORMATION = extern struct {$/;"	struct
FILE_BEGIN	$ZIGLIB/std/os/windows.zig	/^pub const FILE_BEGIN = 0/;"	constant
FILE_BOTH_DIRECTORY_INFORMATION	$ZIGLIB/std/os/windows.zig	/^pub const FILE_BOTH_DIRECTORY_INFORMATION = FILE_BOTH_DIR_INFORMATION/;"	constant
FILE_BOTH_DIR_INFORMATION	$ZIGLIB/std/os/windows.zig	/^pub const FILE_BOTH_DIR_INFORMATION = extern struct {$/;"	struct
FILE_CHECKED_OUT	$ZIGLIB/std/os/windows/win32error.zig	/FILE_CHECKED_OUT = 220/;"	field
FILE_CLOSED	$ZIGLIB/std/os/windows/ntstatus.zig	/FILE_CLOSED = 0xC0000128/;"	field
FILE_COMPLETE_IF_OPLOCKED	$ZIGLIB/std/os/windows.zig	/^pub const FILE_COMPLETE_IF_OPLOCKED = 0x00000100/;"	constant
FILE_CORRUPT	$ZIGLIB/std/os/windows/win32error.zig	/FILE_CORRUPT = 1392/;"	field
FILE_CORRUPT_ERROR	$ZIGLIB/std/os/windows/ntstatus.zig	/FILE_CORRUPT_ERROR = 0xC0000102/;"	field
FILE_CREATE	$ZIGLIB/std/os/windows.zig	/^pub const FILE_CREATE = 2/;"	constant
FILE_CREATE_PIPE_INSTANCE	$ZIGLIB/std/os/windows.zig	/^pub const FILE_CREATE_PIPE_INSTANCE = 0x00000004/;"	constant
FILE_CREATE_TREE_CONNECTION	$ZIGLIB/std/os/windows.zig	/^pub const FILE_CREATE_TREE_CONNECTION = 0x00000080/;"	constant
FILE_CURRENT	$ZIGLIB/std/os/windows.zig	/^pub const FILE_CURRENT = 1/;"	constant
FILE_DELETED	$ZIGLIB/std/os/windows/ntstatus.zig	/FILE_DELETED = 0xC0000123/;"	field
FILE_DELETE_CHILD	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DELETE_CHILD = 0x00000040/;"	constant
FILE_DELETE_ON_CLOSE	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DELETE_ON_CLOSE = 0x00001000/;"	constant
FILE_DEVICE_8042_PORT	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DEVICE_8042_PORT: DEVICE_TYPE = 0x0027/;"	constant
FILE_DEVICE_ACPI	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DEVICE_ACPI: DEVICE_TYPE = 0x0032/;"	constant
FILE_DEVICE_BATTERY	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DEVICE_BATTERY: DEVICE_TYPE = 0x0029/;"	constant
FILE_DEVICE_BEEP	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DEVICE_BEEP: DEVICE_TYPE = 0x0001/;"	constant
FILE_DEVICE_BIOMETRIC	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DEVICE_BIOMETRIC: DEVICE_TYPE = 0x0044/;"	constant
FILE_DEVICE_BLUETOOTH	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DEVICE_BLUETOOTH: DEVICE_TYPE = 0x0041/;"	constant
FILE_DEVICE_BUS_EXTENDER	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DEVICE_BUS_EXTENDER: DEVICE_TYPE = 0x002a/;"	constant
FILE_DEVICE_CD_ROM	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DEVICE_CD_ROM: DEVICE_TYPE = 0x0002/;"	constant
FILE_DEVICE_CD_ROM_FILE_SYSTEM	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DEVICE_CD_ROM_FILE_SYSTEM: DEVICE_TYPE = 0x0003/;"	constant
FILE_DEVICE_CHANGER	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DEVICE_CHANGER: DEVICE_TYPE = 0x0030/;"	constant
FILE_DEVICE_CONSOLE	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DEVICE_CONSOLE: DEVICE_TYPE = 0x0050/;"	constant
FILE_DEVICE_CONTROLLER	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DEVICE_CONTROLLER: DEVICE_TYPE = 0x0004/;"	constant
FILE_DEVICE_CRYPT_PROVIDER	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DEVICE_CRYPT_PROVIDER: DEVICE_TYPE = 0x003f/;"	constant
FILE_DEVICE_DATALINK	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DEVICE_DATALINK: DEVICE_TYPE = 0x0005/;"	constant
FILE_DEVICE_DEVAPI	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DEVICE_DEVAPI: DEVICE_TYPE = 0x0047/;"	constant
FILE_DEVICE_DFS	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DEVICE_DFS: DEVICE_TYPE = 0x0006/;"	constant
FILE_DEVICE_DFS_FILE_SYSTEM	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DEVICE_DFS_FILE_SYSTEM: DEVICE_TYPE = 0x0035/;"	constant
FILE_DEVICE_DFS_VOLUME	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DEVICE_DFS_VOLUME: DEVICE_TYPE = 0x0036/;"	constant
FILE_DEVICE_DISK	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DEVICE_DISK: DEVICE_TYPE = 0x0007/;"	constant
FILE_DEVICE_DISK_FILE_SYSTEM	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DEVICE_DISK_FILE_SYSTEM: DEVICE_TYPE = 0x0008/;"	constant
FILE_DEVICE_DVD	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DEVICE_DVD: DEVICE_TYPE = 0x0033/;"	constant
FILE_DEVICE_EHSTOR	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DEVICE_EHSTOR: DEVICE_TYPE = 0x0046/;"	constant
FILE_DEVICE_FILE_SYSTEM	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DEVICE_FILE_SYSTEM: DEVICE_TYPE = 0x0009/;"	constant
FILE_DEVICE_FIPS	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DEVICE_FIPS: DEVICE_TYPE = 0x003a/;"	constant
FILE_DEVICE_FULLSCREEN_VIDEO	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DEVICE_FULLSCREEN_VIDEO: DEVICE_TYPE = 0x0034/;"	constant
FILE_DEVICE_GPIO	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DEVICE_GPIO: DEVICE_TYPE = 0x0048/;"	constant
FILE_DEVICE_HOLOGRAPHIC	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DEVICE_HOLOGRAPHIC: DEVICE_TYPE = 0x005b/;"	constant
FILE_DEVICE_INFINIBAND	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DEVICE_INFINIBAND: DEVICE_TYPE = 0x003b/;"	constant
FILE_DEVICE_INPORT_PORT	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DEVICE_INPORT_PORT: DEVICE_TYPE = 0x000a/;"	constant
FILE_DEVICE_KEYBOARD	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DEVICE_KEYBOARD: DEVICE_TYPE = 0x000b/;"	constant
FILE_DEVICE_KS	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DEVICE_KS: DEVICE_TYPE = 0x002f/;"	constant
FILE_DEVICE_KSEC	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DEVICE_KSEC: DEVICE_TYPE = 0x0039/;"	constant
FILE_DEVICE_MAILSLOT	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DEVICE_MAILSLOT: DEVICE_TYPE = 0x000c/;"	constant
FILE_DEVICE_MASS_STORAGE	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DEVICE_MASS_STORAGE: DEVICE_TYPE = 0x002d/;"	constant
FILE_DEVICE_MIDI_IN	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DEVICE_MIDI_IN: DEVICE_TYPE = 0x000d/;"	constant
FILE_DEVICE_MIDI_OUT	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DEVICE_MIDI_OUT: DEVICE_TYPE = 0x000e/;"	constant
FILE_DEVICE_MODEM	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DEVICE_MODEM: DEVICE_TYPE = 0x002b/;"	constant
FILE_DEVICE_MOUSE	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DEVICE_MOUSE: DEVICE_TYPE = 0x000f/;"	constant
FILE_DEVICE_MT_COMPOSITE	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DEVICE_MT_COMPOSITE: DEVICE_TYPE = 0x0042/;"	constant
FILE_DEVICE_MT_TRANSPORT	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DEVICE_MT_TRANSPORT: DEVICE_TYPE = 0x0043/;"	constant
FILE_DEVICE_MULTI_UNC_PROVIDER	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DEVICE_MULTI_UNC_PROVIDER: DEVICE_TYPE = 0x0010/;"	constant
FILE_DEVICE_NAMED_PIPE	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DEVICE_NAMED_PIPE: DEVICE_TYPE = 0x0011/;"	constant
FILE_DEVICE_NETWORK	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DEVICE_NETWORK: DEVICE_TYPE = 0x0012/;"	constant
FILE_DEVICE_NETWORK_BROWSER	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DEVICE_NETWORK_BROWSER: DEVICE_TYPE = 0x0013/;"	constant
FILE_DEVICE_NETWORK_FILE_SYSTEM	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DEVICE_NETWORK_FILE_SYSTEM: DEVICE_TYPE = 0x0014/;"	constant
FILE_DEVICE_NETWORK_REDIRECTOR	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DEVICE_NETWORK_REDIRECTOR: DEVICE_TYPE = 0x0028/;"	constant
FILE_DEVICE_NFP	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DEVICE_NFP: DEVICE_TYPE = 0x0051/;"	constant
FILE_DEVICE_NULL	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DEVICE_NULL: DEVICE_TYPE = 0x0015/;"	constant
FILE_DEVICE_NVDIMM	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DEVICE_NVDIMM: DEVICE_TYPE = 0x005a/;"	constant
FILE_DEVICE_PARALLEL_PORT	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DEVICE_PARALLEL_PORT: DEVICE_TYPE = 0x0016/;"	constant
FILE_DEVICE_PERSISTENT_MEMORY	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DEVICE_PERSISTENT_MEMORY: DEVICE_TYPE = 0x0059/;"	constant
FILE_DEVICE_PHYSICAL_NETCARD	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DEVICE_PHYSICAL_NETCARD: DEVICE_TYPE = 0x0017/;"	constant
FILE_DEVICE_PMI	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DEVICE_PMI: DEVICE_TYPE = 0x0045/;"	constant
FILE_DEVICE_POINT_OF_SERVICE	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DEVICE_POINT_OF_SERVICE: DEVICE_TYPE = 0x0054/;"	constant
FILE_DEVICE_PRINTER	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DEVICE_PRINTER: DEVICE_TYPE = 0x0018/;"	constant
FILE_DEVICE_SCANNER	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DEVICE_SCANNER: DEVICE_TYPE = 0x0019/;"	constant
FILE_DEVICE_SCREEN	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DEVICE_SCREEN: DEVICE_TYPE = 0x001c/;"	constant
FILE_DEVICE_SDFXHCI	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DEVICE_SDFXHCI: DEVICE_TYPE = 0x005c/;"	constant
FILE_DEVICE_SERENUM	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DEVICE_SERENUM: DEVICE_TYPE = 0x0037/;"	constant
FILE_DEVICE_SERIAL_MOUSE_PORT	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DEVICE_SERIAL_MOUSE_PORT: DEVICE_TYPE = 0x001a/;"	constant
FILE_DEVICE_SERIAL_PORT	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DEVICE_SERIAL_PORT: DEVICE_TYPE = 0x001b/;"	constant
FILE_DEVICE_SMARTCARD	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DEVICE_SMARTCARD: DEVICE_TYPE = 0x0031/;"	constant
FILE_DEVICE_SMB	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DEVICE_SMB: DEVICE_TYPE = 0x002e/;"	constant
FILE_DEVICE_SOUND	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DEVICE_SOUND: DEVICE_TYPE = 0x001d/;"	constant
FILE_DEVICE_STORAGE_REPLICATION	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DEVICE_STORAGE_REPLICATION: DEVICE_TYPE = 0x0055/;"	constant
FILE_DEVICE_STREAMS	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DEVICE_STREAMS: DEVICE_TYPE = 0x001e/;"	constant
FILE_DEVICE_SYSENV	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DEVICE_SYSENV: DEVICE_TYPE = 0x0052/;"	constant
FILE_DEVICE_TAPE	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DEVICE_TAPE: DEVICE_TYPE = 0x001f/;"	constant
FILE_DEVICE_TAPE_FILE_SYSTEM	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DEVICE_TAPE_FILE_SYSTEM: DEVICE_TYPE = 0x0020/;"	constant
FILE_DEVICE_TERMSRV	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DEVICE_TERMSRV: DEVICE_TYPE = 0x0038/;"	constant
FILE_DEVICE_TRANSPORT	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DEVICE_TRANSPORT: DEVICE_TYPE = 0x0021/;"	constant
FILE_DEVICE_TRUST_ENV	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DEVICE_TRUST_ENV: DEVICE_TYPE = 0x0056/;"	constant
FILE_DEVICE_UCM	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DEVICE_UCM: DEVICE_TYPE = 0x0057/;"	constant
FILE_DEVICE_UCMTCPCI	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DEVICE_UCMTCPCI: DEVICE_TYPE = 0x0058/;"	constant
FILE_DEVICE_UNKNOWN	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DEVICE_UNKNOWN: DEVICE_TYPE = 0x0022/;"	constant
FILE_DEVICE_USBEX	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DEVICE_USBEX: DEVICE_TYPE = 0x0049/;"	constant
FILE_DEVICE_VDM	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DEVICE_VDM: DEVICE_TYPE = 0x002c/;"	constant
FILE_DEVICE_VIDEO	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DEVICE_VIDEO: DEVICE_TYPE = 0x0023/;"	constant
FILE_DEVICE_VIRTUAL_BLOCK	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DEVICE_VIRTUAL_BLOCK: DEVICE_TYPE = 0x0053/;"	constant
FILE_DEVICE_VIRTUAL_DISK	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DEVICE_VIRTUAL_DISK: DEVICE_TYPE = 0x0024/;"	constant
FILE_DEVICE_VMBUS	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DEVICE_VMBUS: DEVICE_TYPE = 0x003e/;"	constant
FILE_DEVICE_WAVE_IN	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DEVICE_WAVE_IN: DEVICE_TYPE = 0x0025/;"	constant
FILE_DEVICE_WAVE_OUT	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DEVICE_WAVE_OUT: DEVICE_TYPE = 0x0026/;"	constant
FILE_DEVICE_WPD	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DEVICE_WPD: DEVICE_TYPE = 0x0040/;"	constant
FILE_DIRECTORY_FILE	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DIRECTORY_FILE = 0x00000001/;"	constant
FILE_DIRECTORY_INFORMATION	$ZIGLIB/std/os/windows.zig	/^pub const FILE_DIRECTORY_INFORMATION = extern struct {$/;"	struct
FILE_EA_INFORMATION	$ZIGLIB/std/os/windows.zig	/^pub const FILE_EA_INFORMATION = extern struct {$/;"	struct
FILE_ENCRYPTED	$ZIGLIB/std/os/windows/ntstatus.zig	/FILE_ENCRYPTED = 0xC0000293/;"	field
FILE_END	$ZIGLIB/std/os/windows.zig	/^pub const FILE_END = 2/;"	constant
FILE_END_OF_FILE_INFORMATION	$ZIGLIB/std/os/windows.zig	/^pub const FILE_END_OF_FILE_INFORMATION = extern struct {$/;"	struct
FILE_EVENT	$ZIGLIB/std/c/solaris.zig	/^pub const FILE_EVENT = struct {$/;"	struct
FILE_EXECUTE	$ZIGLIB/std/os/windows.zig	/^pub const FILE_EXECUTE = 0x00000020/;"	constant
FILE_EXISTS	$ZIGLIB/std/os/windows/win32error.zig	/FILE_EXISTS = 80/;"	field
FILE_FLAG_BACKUP_SEMANTICS	$ZIGLIB/std/os/windows.zig	/^pub const FILE_FLAG_BACKUP_SEMANTICS = 0x02000000/;"	constant
FILE_FLAG_DELETE_ON_CLOSE	$ZIGLIB/std/os/windows.zig	/^pub const FILE_FLAG_DELETE_ON_CLOSE = 0x04000000/;"	constant
FILE_FLAG_NO_BUFFERING	$ZIGLIB/std/os/windows.zig	/^pub const FILE_FLAG_NO_BUFFERING = 0x20000000/;"	constant
FILE_FLAG_OPEN_NO_RECALL	$ZIGLIB/std/os/windows.zig	/^pub const FILE_FLAG_OPEN_NO_RECALL = 0x00100000/;"	constant
FILE_FLAG_OPEN_REPARSE_POINT	$ZIGLIB/std/os/windows.zig	/^pub const FILE_FLAG_OPEN_REPARSE_POINT = 0x00200000/;"	constant
FILE_FLAG_OVERLAPPED	$ZIGLIB/std/os/windows.zig	/^pub const FILE_FLAG_OVERLAPPED = 0x40000000/;"	constant
FILE_FLAG_POSIX_SEMANTICS	$ZIGLIB/std/os/windows.zig	/^pub const FILE_FLAG_POSIX_SEMANTICS = 0x0100000/;"	constant
FILE_FLAG_RANDOM_ACCESS	$ZIGLIB/std/os/windows.zig	/^pub const FILE_FLAG_RANDOM_ACCESS = 0x10000000/;"	constant
FILE_FLAG_SEQUENTIAL_SCAN	$ZIGLIB/std/os/windows.zig	/^pub const FILE_FLAG_SEQUENTIAL_SCAN = 0x08000000/;"	constant
FILE_FLAG_SESSION_AWARE	$ZIGLIB/std/os/windows.zig	/^pub const FILE_FLAG_SESSION_AWARE = 0x00800000/;"	constant
FILE_FLAG_WRITE_THROUGH	$ZIGLIB/std/os/windows.zig	/^pub const FILE_FLAG_WRITE_THROUGH = 0x80000000/;"	constant
FILE_FORCED_CLOSED	$ZIGLIB/std/os/windows/ntstatus.zig	/FILE_FORCED_CLOSED = 0xC00000B6/;"	field
FILE_HANDLE_REVOKED	$ZIGLIB/std/os/windows/win32error.zig	/FILE_HANDLE_REVOKED = 806/;"	field
FILE_IDENTITY_NOT_PERSISTENT	$ZIGLIB/std/os/windows/ntstatus.zig	/FILE_IDENTITY_NOT_PERSISTENT = 0xC0190036/;"	field
FILE_INFORMATION_CLASS	$ZIGLIB/std/os/windows.zig	/^pub const FILE_INFORMATION_CLASS = enum(c_int) {$/;"	enum
FILE_INFO_BY_HANDLE_CLASS	$ZIGLIB/std/os/windows.zig	/^pub const FILE_INFO_BY_HANDLE_CLASS = u32/;"	constant
FILE_INTERNAL_INFORMATION	$ZIGLIB/std/os/windows.zig	/^pub const FILE_INTERNAL_INFORMATION = extern struct {$/;"	struct
FILE_INVALID	$ZIGLIB/std/os/windows/win32error.zig	/FILE_INVALID = 1006/;"	field
FILE_IS_A_DIRECTORY	$ZIGLIB/std/os/windows/ntstatus.zig	/FILE_IS_A_DIRECTORY = 0xC00000BA/;"	field
FILE_IS_OFFLINE	$ZIGLIB/std/os/windows/ntstatus.zig	/FILE_IS_OFFLINE = 0xC0000267/;"	field
FILE_LEVEL_TRIM_NOT_SUPPORTED	$ZIGLIB/std/os/windows/win32error.zig	/FILE_LEVEL_TRIM_NOT_SUPPORTED = 326/;"	field
FILE_LIST_DIRECTORY	$ZIGLIB/std/os/windows.zig	/^pub const FILE_LIST_DIRECTORY = 0x00000001/;"	constant
FILE_LOCKED_WITH_ONLY_READERS	$ZIGLIB/std/os/windows/ntstatus.zig	/FILE_LOCKED_WITH_ONLY_READERS = 0x0000012A/;"	field
FILE_LOCKED_WITH_WRITERS	$ZIGLIB/std/os/windows/ntstatus.zig	/FILE_LOCKED_WITH_WRITERS = 0x0000012B/;"	field
FILE_LOCK_CONFLICT	$ZIGLIB/std/os/windows/ntstatus.zig	/FILE_LOCK_CONFLICT = 0xC0000054/;"	field
FILE_MAXIMUM_DISPOSITION	$ZIGLIB/std/os/windows.zig	/^pub const FILE_MAXIMUM_DISPOSITION = 5/;"	constant
FILE_MODE_INFORMATION	$ZIGLIB/std/os/windows.zig	/^pub const FILE_MODE_INFORMATION = extern struct {$/;"	struct
FILE_NAME_INFO	$ZIGLIB/std/os/windows.zig	/^pub const FILE_NAME_INFO = extern struct {$/;"	struct
FILE_NAME_INFORMATION	$ZIGLIB/std/os/windows.zig	/^pub const FILE_NAME_INFORMATION = extern struct {$/;"	struct
FILE_NAME_NORMALIZED	$ZIGLIB/std/os/windows.zig	/^pub const FILE_NAME_NORMALIZED = 0x0/;"	constant
FILE_NAME_OPENED	$ZIGLIB/std/os/windows.zig	/^pub const FILE_NAME_OPENED = 0x8/;"	constant
FILE_NON_DIRECTORY_FILE	$ZIGLIB/std/os/windows.zig	/^pub const FILE_NON_DIRECTORY_FILE = 0x00000040/;"	constant
FILE_NOTIFY_CHANGE_ATTRIBUTES	$ZIGLIB/std/os/windows.zig	/^pub const FILE_NOTIFY_CHANGE_ATTRIBUTES = 4/;"	constant
FILE_NOTIFY_CHANGE_CREATION	$ZIGLIB/std/os/windows.zig	/^pub const FILE_NOTIFY_CHANGE_CREATION = 64/;"	constant
FILE_NOTIFY_CHANGE_DIR_NAME	$ZIGLIB/std/os/windows.zig	/^pub const FILE_NOTIFY_CHANGE_DIR_NAME = 2/;"	constant
FILE_NOTIFY_CHANGE_FILE_NAME	$ZIGLIB/std/os/windows.zig	/^pub const FILE_NOTIFY_CHANGE_FILE_NAME = 1/;"	constant
FILE_NOTIFY_CHANGE_LAST_ACCESS	$ZIGLIB/std/os/windows.zig	/^pub const FILE_NOTIFY_CHANGE_LAST_ACCESS = 32/;"	constant
FILE_NOTIFY_CHANGE_LAST_WRITE	$ZIGLIB/std/os/windows.zig	/^pub const FILE_NOTIFY_CHANGE_LAST_WRITE = 16/;"	constant
FILE_NOTIFY_CHANGE_SECURITY	$ZIGLIB/std/os/windows.zig	/^pub const FILE_NOTIFY_CHANGE_SECURITY = 256/;"	constant
FILE_NOTIFY_CHANGE_SIZE	$ZIGLIB/std/os/windows.zig	/^pub const FILE_NOTIFY_CHANGE_SIZE = 8/;"	constant
FILE_NOTIFY_INFORMATION	$ZIGLIB/std/os/windows.zig	/^pub const FILE_NOTIFY_INFORMATION = extern struct {$/;"	struct
FILE_NOT_AVAILABLE	$ZIGLIB/std/os/windows/ntstatus.zig	/FILE_NOT_AVAILABLE = 0xC0000467/;"	field
FILE_NOT_ENCRYPTED	$ZIGLIB/std/os/windows/ntstatus.zig	/FILE_NOT_ENCRYPTED = 0xC0000291/;"	field
FILE_NOT_FOUND	$ZIGLIB/std/os/windows/win32error.zig	/FILE_NOT_FOUND = 2/;"	field
FILE_NO_COMPRESSION	$ZIGLIB/std/os/windows.zig	/^pub const FILE_NO_COMPRESSION = 0x00008000/;"	constant
FILE_NO_EA_KNOWLEDGE	$ZIGLIB/std/os/windows.zig	/^pub const FILE_NO_EA_KNOWLEDGE = 0x00000200/;"	constant
FILE_NO_INTERMEDIATE_BUFFERING	$ZIGLIB/std/os/windows.zig	/^pub const FILE_NO_INTERMEDIATE_BUFFERING = 0x00000008/;"	constant
FILE_OPEN	$ZIGLIB/std/os/windows.zig	/^pub const FILE_OPEN = 1/;"	constant
FILE_OPEN_BY_FILE_ID	$ZIGLIB/std/os/windows.zig	/^pub const FILE_OPEN_BY_FILE_ID = 0x00002000/;"	constant
FILE_OPEN_FOR_BACKUP_INTENT	$ZIGLIB/std/os/windows.zig	/^pub const FILE_OPEN_FOR_BACKUP_INTENT = 0x00004000/;"	constant
FILE_OPEN_FOR_FREE_SPACE_QUERY	$ZIGLIB/std/os/windows.zig	/^pub const FILE_OPEN_FOR_FREE_SPACE_QUERY = 0x00800000/;"	constant
FILE_OPEN_FOR_RECOVERY	$ZIGLIB/std/os/windows.zig	/^pub const FILE_OPEN_FOR_RECOVERY = 0x00000400/;"	constant
FILE_OPEN_IF	$ZIGLIB/std/os/windows.zig	/^pub const FILE_OPEN_IF = 3/;"	constant
FILE_OPEN_OFFLINE_FILE	$ZIGLIB/std/os/windows.zig	/^pub const FILE_OPEN_OFFLINE_FILE = 0x00400000/;"	constant
FILE_OPEN_REPARSE_POINT	$ZIGLIB/std/os/windows.zig	/^pub const FILE_OPEN_REPARSE_POINT = 0x00200000/;"	constant
FILE_OVERWRITE	$ZIGLIB/std/os/windows.zig	/^pub const FILE_OVERWRITE = 4/;"	constant
FILE_OVERWRITE_IF	$ZIGLIB/std/os/windows.zig	/^pub const FILE_OVERWRITE_IF = 5/;"	constant
FILE_POSITION_INFORMATION	$ZIGLIB/std/os/windows.zig	/^pub const FILE_POSITION_INFORMATION = extern struct {$/;"	struct
FILE_RANDOM_ACCESS	$ZIGLIB/std/os/windows.zig	/^pub const FILE_RANDOM_ACCESS = 0x00000800/;"	constant
FILE_READ_ACCESS	$ZIGLIB/std/os/windows.zig	/^pub const FILE_READ_ACCESS = 1/;"	constant
FILE_READ_ATTRIBUTES	$ZIGLIB/std/os/windows.zig	/^pub const FILE_READ_ATTRIBUTES = 0x00000080/;"	constant
FILE_READ_DATA	$ZIGLIB/std/os/windows.zig	/^pub const FILE_READ_DATA = 0x00000001/;"	constant
FILE_READ_EA	$ZIGLIB/std/os/windows.zig	/^pub const FILE_READ_EA = 0x00000008/;"	constant
FILE_RENAMED	$ZIGLIB/std/os/windows/ntstatus.zig	/FILE_RENAMED = 0xC00000D5/;"	field
FILE_RENAME_INFORMATION	$ZIGLIB/std/os/windows.zig	/^pub const FILE_RENAME_INFORMATION = extern struct {$/;"	struct
FILE_RESERVE_OPFILTER	$ZIGLIB/std/os/windows.zig	/^pub const FILE_RESERVE_OPFILTER = 0x00100000/;"	constant
FILE_SEQUENTIAL_ONLY	$ZIGLIB/std/os/windows.zig	/^pub const FILE_SEQUENTIAL_ONLY = 0x00000004/;"	constant
FILE_SHARE_DELETE	$ZIGLIB/std/os/windows.zig	/^pub const FILE_SHARE_DELETE = 0x00000004/;"	constant
FILE_SHARE_READ	$ZIGLIB/std/os/windows.zig	/^pub const FILE_SHARE_READ = 0x00000001/;"	constant
FILE_SHARE_WRITE	$ZIGLIB/std/os/windows.zig	/^pub const FILE_SHARE_WRITE = 0x00000002/;"	constant
FILE_SKIP_COMPLETION_PORT_ON_SUCCESS	$ZIGLIB/std/os/windows.zig	/^pub const FILE_SKIP_COMPLETION_PORT_ON_SUCCESS = 0x1/;"	constant
FILE_SKIP_SET_EVENT_ON_HANDLE	$ZIGLIB/std/os/windows.zig	/^pub const FILE_SKIP_SET_EVENT_ON_HANDLE = 0x2/;"	constant
FILE_STANDARD_INFORMATION	$ZIGLIB/std/os/windows.zig	/^pub const FILE_STANDARD_INFORMATION = extern struct {$/;"	struct
FILE_SUPERSEDE	$ZIGLIB/std/os/windows.zig	/^pub const FILE_SUPERSEDE = 0/;"	constant
FILE_SYNCHRONOUS_IO_ALERT	$ZIGLIB/std/os/windows.zig	/^pub const FILE_SYNCHRONOUS_IO_ALERT = 0x00000010/;"	constant
FILE_SYNCHRONOUS_IO_NONALERT	$ZIGLIB/std/os/windows.zig	/^pub const FILE_SYNCHRONOUS_IO_NONALERT = 0x00000020/;"	constant
FILE_SYSTEM_LIMITATION	$ZIGLIB/std/os/windows/win32error.zig	/FILE_SYSTEM_LIMITATION = 665/;"	field
FILE_TOO_LARGE	$ZIGLIB/std/os/windows/win32error.zig	/FILE_TOO_LARGE = 223/;"	field
FILE_TRAVERSE	$ZIGLIB/std/os/windows.zig	/^pub const FILE_TRAVERSE = 0x00000020/;"	constant
FILE_WRITE_ACCESS	$ZIGLIB/std/os/windows.zig	/^pub const FILE_WRITE_ACCESS = 2/;"	constant
FILE_WRITE_ATTRIBUTES	$ZIGLIB/std/os/windows.zig	/^pub const FILE_WRITE_ATTRIBUTES = 0x00000100/;"	constant
FILE_WRITE_DATA	$ZIGLIB/std/os/windows.zig	/^pub const FILE_WRITE_DATA = 0x00000002/;"	constant
FILE_WRITE_EA	$ZIGLIB/std/os/windows.zig	/^pub const FILE_WRITE_EA = 0x00000010/;"	constant
FILE_WRITE_THROUGH	$ZIGLIB/std/os/windows.zig	/^pub const FILE_WRITE_THROUGH = 0x00000002/;"	constant
FILIPINO	$ZIGLIB/std/os/windows/lang.zig	/^pub const FILIPINO = 0x64/;"	constant
FILIPINO_PHILIPPINES	$ZIGLIB/std/os/windows/sublang.zig	/^pub const FILIPINO_PHILIPPINES = 0x01/;"	constant
FILTER	$ZIGLIB/std/os/linux/seccomp.zig	/pub const FILTER = 2/;"	constant
FILTER_FLAG	$ZIGLIB/std/os/linux/seccomp.zig	/^pub const FILTER_FLAG = struct {$/;"	struct
FINDSIGS	$ZIGLIB/std/c/darwin.zig	/pub const FINDSIGS = 78/;"	constant
FINNISH	$ZIGLIB/std/os/windows/lang.zig	/^pub const FINNISH = 0x0b/;"	constant
FINNISH_FINLAND	$ZIGLIB/std/os/windows/sublang.zig	/^pub const FINNISH_FINLAND = 0x01/;"	constant
FIONBIO	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const FIONBIO = -2147195266/;"	constant
FIONREAD	$ZIGLIB/std/os/linux.zig	/pub const FIONREAD = if (is_mips) 0x467F else 0x541B/;"	constant
FIREFOX	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const FIREFOX = 19/;"	constant
FIREPATH	$ZIGLIB/std/elf.zig	/FIREPATH = 78/;"	field
FIREWALL	$ZIGLIB/std/os/linux.zig	/pub const FIREWALL = 3/;"	constant
FIRMWARE_UPDATED	$ZIGLIB/std/os/windows/win32error.zig	/FIRMWARE_UPDATED = 728/;"	field
FIRST	$ZIGLIB/std/c/solaris.zig	/pub const FIRST = 0x02000/;"	constant
FIXED	$ZIGLIB/std/os/linux.zig	/pub const FIXED = 0x10/;"	constant
FIXED_FILE	$ZIGLIB/std/os/linux.zig	/FIXED_FILE/;"	field
FIXED_NOREPLACE	$ZIGLIB/std/os/linux.zig	/pub const FIXED_NOREPLACE = 0x100000/;"	constant
FIXUP	$ZIGLIB/std/coff.zig	/FIXUP = 6/;"	field
FLAG	$ZIGLIB/std/os/linux.zig	/pub const FLAG = struct {$/;"	struct
FLAGS_MASK	$ZIGLIB/std/c/netbsd.zig	/pub const FLAGS_MASK = 0xf0000000/;"	constant
FLOAT	$ZIGLIB/std/os/windows.zig	/^pub const FLOAT = f32/;"	constant
FLOATED_SECTION	$ZIGLIB/std/os/windows/ntstatus.zig	/FLOATED_SECTION = 0xC019004B/;"	field
FLOATING_POINT_EMULATED	$ZIGLIB/std/os/windows.zig	/FLOATING_POINT_EMULATED = 1/;"	field
FLOATING_POINT_PRECISION_ERRATA	$ZIGLIB/std/os/windows.zig	/FLOATING_POINT_PRECISION_ERRATA = 0/;"	field
FLOATING_SAVE_AREA	$ZIGLIB/std/os/windows.zig	/pub const FLOATING_SAVE_AREA = extern struct {$/;"	struct
FLOAT_DENORMAL_OPERAND	$ZIGLIB/std/os/windows/ntstatus.zig	/FLOAT_DENORMAL_OPERAND = 0xC000008D/;"	field
FLOAT_DIVIDE_BY_ZERO	$ZIGLIB/std/os/windows/ntstatus.zig	/FLOAT_DIVIDE_BY_ZERO = 0xC000008E/;"	field
FLOAT_INEXACT_RESULT	$ZIGLIB/std/os/windows/ntstatus.zig	/FLOAT_INEXACT_RESULT = 0xC000008F/;"	field
FLOAT_INVALID_OPERATION	$ZIGLIB/std/os/windows/ntstatus.zig	/FLOAT_INVALID_OPERATION = 0xC0000090/;"	field
FLOAT_MULTIPLE_FAULTS	$ZIGLIB/std/os/windows/win32error.zig	/FLOAT_MULTIPLE_FAULTS = 630/;"	field
FLOAT_MULTIPLE_TRAPS	$ZIGLIB/std/os/windows/win32error.zig	/FLOAT_MULTIPLE_TRAPS = 631/;"	field
FLOAT_OVERFLOW	$ZIGLIB/std/os/windows/ntstatus.zig	/FLOAT_OVERFLOW = 0xC0000091/;"	field
FLOAT_STACK_CHECK	$ZIGLIB/std/os/windows/ntstatus.zig	/FLOAT_STACK_CHECK = 0xC0000092/;"	field
FLOAT_UNDERFLOW	$ZIGLIB/std/os/windows/ntstatus.zig	/FLOAT_UNDERFLOW = 0xC0000093/;"	field
FLOPPY_BAD_REGISTERS	$ZIGLIB/std/os/windows/win32error.zig	/FLOPPY_BAD_REGISTERS = 1125/;"	field
FLOPPY_ID_MARK_NOT_FOUND	$ZIGLIB/std/os/windows/win32error.zig	/FLOPPY_ID_MARK_NOT_FOUND = 1122/;"	field
FLOPPY_UNKNOWN_ERROR	$ZIGLIB/std/os/windows/win32error.zig	/FLOPPY_UNKNOWN_ERROR = 1124/;"	field
FLOPPY_VOLUME	$ZIGLIB/std/os/windows/win32error.zig	/FLOPPY_VOLUME = 584/;"	field
FLOPPY_WRONG_CYLINDER	$ZIGLIB/std/os/windows/win32error.zig	/FLOPPY_WRONG_CYLINDER = 1123/;"	field
FLOWINFO	$ZIGLIB/std/os/linux.zig	/pub const FLOWINFO = 11/;"	constant
FLOWINFO_SEND	$ZIGLIB/std/os/linux.zig	/pub const FLOWINFO_SEND = 33/;"	constant
FLOWLABEL_MGR	$ZIGLIB/std/os/linux.zig	/pub const FLOWLABEL_MGR = 32/;"	constant
FLOWSPEC	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const FLOWSPEC = extern struct {$/;"	struct
FLT_ALREADY_ENLISTED	$ZIGLIB/std/os/windows/ntstatus.zig	/FLT_ALREADY_ENLISTED = 0xC01C001B/;"	field
FLT_BUFFER_TOO_SMALL	$ZIGLIB/std/os/windows/ntstatus.zig	/FLT_BUFFER_TOO_SMALL = 0x801C0001/;"	field
FLT_CBDQ_DISABLED	$ZIGLIB/std/os/windows/ntstatus.zig	/FLT_CBDQ_DISABLED = 0xC01C000E/;"	field
FLT_CONTEXT_ALLOCATION_NOT_FOUND	$ZIGLIB/std/os/windows/ntstatus.zig	/FLT_CONTEXT_ALLOCATION_NOT_FOUND = 0xC01C0016/;"	field
FLT_CONTEXT_ALREADY_DEFINED	$ZIGLIB/std/os/windows/ntstatus.zig	/FLT_CONTEXT_ALREADY_DEFINED = 0xC01C0002/;"	field
FLT_CONTEXT_ALREADY_LINKED	$ZIGLIB/std/os/windows/ntstatus.zig	/FLT_CONTEXT_ALREADY_LINKED = 0xC01C001C/;"	field
FLT_DELETING_OBJECT	$ZIGLIB/std/os/windows/ntstatus.zig	/FLT_DELETING_OBJECT = 0xC01C000B/;"	field
FLT_DISALLOW_FAST_IO	$ZIGLIB/std/os/windows/ntstatus.zig	/FLT_DISALLOW_FAST_IO = 0xC01C0004/;"	field
FLT_DO_NOT_ATTACH	$ZIGLIB/std/os/windows/ntstatus.zig	/FLT_DO_NOT_ATTACH = 0xC01C000F/;"	field
FLT_DO_NOT_DETACH	$ZIGLIB/std/os/windows/ntstatus.zig	/FLT_DO_NOT_DETACH = 0xC01C0010/;"	field
FLT_DUPLICATE_ENTRY	$ZIGLIB/std/os/windows/ntstatus.zig	/FLT_DUPLICATE_ENTRY = 0xC01C000D/;"	field
FLT_FILTER_NOT_FOUND	$ZIGLIB/std/os/windows/ntstatus.zig	/FLT_FILTER_NOT_FOUND = 0xC01C0013/;"	field
FLT_FILTER_NOT_READY	$ZIGLIB/std/os/windows/ntstatus.zig	/FLT_FILTER_NOT_READY = 0xC01C0008/;"	field
FLT_INSTANCE_ALTITUDE_COLLISION	$ZIGLIB/std/os/windows/ntstatus.zig	/FLT_INSTANCE_ALTITUDE_COLLISION = 0xC01C0011/;"	field
FLT_INSTANCE_NAME_COLLISION	$ZIGLIB/std/os/windows/ntstatus.zig	/FLT_INSTANCE_NAME_COLLISION = 0xC01C0012/;"	field
FLT_INSTANCE_NOT_FOUND	$ZIGLIB/std/os/windows/ntstatus.zig	/FLT_INSTANCE_NOT_FOUND = 0xC01C0015/;"	field
FLT_INTERNAL_ERROR	$ZIGLIB/std/os/windows/ntstatus.zig	/FLT_INTERNAL_ERROR = 0xC01C000A/;"	field
FLT_INVALID_ASYNCHRONOUS_REQUEST	$ZIGLIB/std/os/windows/ntstatus.zig	/FLT_INVALID_ASYNCHRONOUS_REQUEST = 0xC01C0003/;"	field
FLT_INVALID_CONTEXT_REGISTRATION	$ZIGLIB/std/os/windows/ntstatus.zig	/FLT_INVALID_CONTEXT_REGISTRATION = 0xC01C0017/;"	field
FLT_INVALID_NAME_REQUEST	$ZIGLIB/std/os/windows/ntstatus.zig	/FLT_INVALID_NAME_REQUEST = 0xC01C0005/;"	field
FLT_IO_COMPLETE	$ZIGLIB/std/os/windows/ntstatus.zig	/FLT_IO_COMPLETE = 0x001C0001/;"	field
FLT_MUST_BE_NONPAGED_POOL	$ZIGLIB/std/os/windows/ntstatus.zig	/FLT_MUST_BE_NONPAGED_POOL = 0xC01C000C/;"	field
FLT_NAME_CACHE_MISS	$ZIGLIB/std/os/windows/ntstatus.zig	/FLT_NAME_CACHE_MISS = 0xC01C0018/;"	field
FLT_NOT_INITIALIZED	$ZIGLIB/std/os/windows/ntstatus.zig	/FLT_NOT_INITIALIZED = 0xC01C0007/;"	field
FLT_NOT_SAFE_TO_POST_OPERATION	$ZIGLIB/std/os/windows/ntstatus.zig	/FLT_NOT_SAFE_TO_POST_OPERATION = 0xC01C0006/;"	field
FLT_NO_DEVICE_OBJECT	$ZIGLIB/std/os/windows/ntstatus.zig	/FLT_NO_DEVICE_OBJECT = 0xC01C0019/;"	field
FLT_NO_HANDLER_DEFINED	$ZIGLIB/std/os/windows/ntstatus.zig	/FLT_NO_HANDLER_DEFINED = 0xC01C0001/;"	field
FLT_NO_WAITER_FOR_REPLY	$ZIGLIB/std/os/windows/ntstatus.zig	/FLT_NO_WAITER_FOR_REPLY = 0xC01C0020/;"	field
FLT_POST_OPERATION_CLEANUP	$ZIGLIB/std/os/windows/ntstatus.zig	/FLT_POST_OPERATION_CLEANUP = 0xC01C0009/;"	field
FLT_VOLUME_ALREADY_MOUNTED	$ZIGLIB/std/os/windows/ntstatus.zig	/FLT_VOLUME_ALREADY_MOUNTED = 0xC01C001A/;"	field
FLT_VOLUME_NOT_FOUND	$ZIGLIB/std/os/windows/ntstatus.zig	/FLT_VOLUME_NOT_FOUND = 0xC01C0014/;"	field
FLUSH	$ZIGLIB/std/os/linux.zig	/FLUSH/;"	field
FLUSHO	$ZIGLIB/std/c/darwin.zig	/^pub const FLUSHO: tcflag_t = 0x00800000/;"	constant
FLUSH_DATA	$ZIGLIB/std/c/darwin.zig	/pub const FLUSH_DATA = 40/;"	constant
FL_COLLAPSE_RANGE	$ZIGLIB/std/os/linux.zig	/pub const FL_COLLAPSE_RANGE = 0x08/;"	constant
FL_INSERT_RANGE	$ZIGLIB/std/os/linux.zig	/pub const FL_INSERT_RANGE = 0x20/;"	constant
FL_KEEP_SIZE	$ZIGLIB/std/os/linux.zig	/pub const FL_KEEP_SIZE = 0x01/;"	constant
FL_NO_HIDE_STALE	$ZIGLIB/std/os/linux.zig	/pub const FL_NO_HIDE_STALE = 0x04/;"	constant
FL_PUNCH_HOLE	$ZIGLIB/std/os/linux.zig	/pub const FL_PUNCH_HOLE = 0x02/;"	constant
FL_UNSHARE_RANGE	$ZIGLIB/std/os/linux.zig	/pub const FL_UNSHARE_RANGE = 0x40/;"	constant
FL_ZERO_RANGE	$ZIGLIB/std/os/linux.zig	/pub const FL_ZERO_RANGE = 0x10/;"	constant
FM_GETDRIVEINFOA	$ZIGLIB/std/os/windows/user32.zig	/^pub const FM_GETDRIVEINFOA = 0x0601/;"	constant
FM_GETDRIVEINFOW	$ZIGLIB/std/os/windows/user32.zig	/^pub const FM_GETDRIVEINFOW = 0x0611/;"	constant
FM_GETFILESELA	$ZIGLIB/std/os/windows/user32.zig	/^pub const FM_GETFILESELA = 0x0604/;"	constant
FM_GETFILESELLFNA	$ZIGLIB/std/os/windows/user32.zig	/^pub const FM_GETFILESELLFNA = 0x0605/;"	constant
FM_GETFILESELLFNW	$ZIGLIB/std/os/windows/user32.zig	/^pub const FM_GETFILESELLFNW = 0x0615/;"	constant
FM_GETFILESELW	$ZIGLIB/std/os/windows/user32.zig	/^pub const FM_GETFILESELW = 0x0614/;"	constant
FM_GETFOCUS	$ZIGLIB/std/os/windows/user32.zig	/^pub const FM_GETFOCUS = 0x0600/;"	constant
FM_GETSELCOUNT	$ZIGLIB/std/os/windows/user32.zig	/^pub const FM_GETSELCOUNT = 0x0602/;"	constant
FM_GETSELCOUNTLFN	$ZIGLIB/std/os/windows/user32.zig	/^pub const FM_GETSELCOUNTLFN = 0x0603/;"	constant
FM_REFRESH_WINDOWS	$ZIGLIB/std/os/windows/user32.zig	/^pub const FM_REFRESH_WINDOWS = 0x0606/;"	constant
FM_RELOAD_EXTENSIONS	$ZIGLIB/std/os/windows/user32.zig	/^pub const FM_RELOAD_EXTENSIONS = 0x0607/;"	constant
FNAME	$ZIGLIB/std/compress/gzip.zig	/^const FNAME = 1 << 3/;"	constant
FNONBLOCKING	$ZIGLIB/std/c/dragonfly.zig	/pub const FNONBLOCKING = 524288/;"	constant
FOFFSET	$ZIGLIB/std/c/dragonfly.zig	/pub const FOFFSET = 2097152/;"	constant
FOLDERID_LocalAppData	$ZIGLIB/std/os/windows.zig	/^pub const FOLDERID_LocalAppData = GUID.parse("{F1B32785-6FBA-4FCF-9D55-7B8E7F157091}")/;"	constant
FORCE	$ZIGLIB/std/os/linux.zig	/pub const FORCE = 1/;"	constant
FORCE_INTEGRITY	$ZIGLIB/std/coff.zig	/FORCE_INTEGRITY: u1 = 0/;"	field
FOREGROUND_BLUE	$ZIGLIB/std/os/windows.zig	/^pub const FOREGROUND_BLUE = 1/;"	constant
FOREGROUND_GREEN	$ZIGLIB/std/os/windows.zig	/^pub const FOREGROUND_GREEN = 2/;"	constant
FOREGROUND_INTENSITY	$ZIGLIB/std/os/windows.zig	/^pub const FOREGROUND_INTENSITY = 8/;"	constant
FOREGROUND_RED	$ZIGLIB/std/os/windows.zig	/^pub const FOREGROUND_RED = 4/;"	constant
FORKSTAT	$ZIGLIB/std/c/openbsd.zig	/pub const FORKSTAT = 42/;"	constant
FORMAT_MESSAGE_ALLOCATE_BUFFER	$ZIGLIB/std/os/windows.zig	/^pub const FORMAT_MESSAGE_ALLOCATE_BUFFER = 0x00000100/;"	constant
FORMAT_MESSAGE_ARGUMENT_ARRAY	$ZIGLIB/std/os/windows.zig	/^pub const FORMAT_MESSAGE_ARGUMENT_ARRAY = 0x00002000/;"	constant
FORMAT_MESSAGE_FROM_HMODULE	$ZIGLIB/std/os/windows.zig	/^pub const FORMAT_MESSAGE_FROM_HMODULE = 0x00000800/;"	constant
FORMAT_MESSAGE_FROM_STRING	$ZIGLIB/std/os/windows.zig	/^pub const FORMAT_MESSAGE_FROM_STRING = 0x00000400/;"	constant
FORMAT_MESSAGE_FROM_SYSTEM	$ZIGLIB/std/os/windows.zig	/^pub const FORMAT_MESSAGE_FROM_SYSTEM = 0x00001000/;"	constant
FORMAT_MESSAGE_IGNORE_INSERTS	$ZIGLIB/std/os/windows.zig	/^pub const FORMAT_MESSAGE_IGNORE_INSERTS = 0x00000200/;"	constant
FORMAT_MESSAGE_MAX_WIDTH_MASK	$ZIGLIB/std/os/windows.zig	/^pub const FORMAT_MESSAGE_MAX_WIDTH_MASK = 0x000000FF/;"	constant
FORMS_AUTH_REQUIRED	$ZIGLIB/std/os/windows/win32error.zig	/FORMS_AUTH_REQUIRED = 224/;"	field
FOUND_OUT_OF_SCOPE	$ZIGLIB/std/os/windows/win32error.zig	/FOUND_OUT_OF_SCOPE = 601/;"	field
FOWNER	$ZIGLIB/std/os/linux.zig	/pub const FOWNER = 3/;"	constant
FPEMU_NOPRINT	$ZIGLIB/std/os/linux.zig	/pub const FPEMU_NOPRINT = 1/;"	constant
FPEMU_SIGFPE	$ZIGLIB/std/os/linux.zig	/pub const FPEMU_SIGFPE = 2/;"	constant
FPFastMathModeINTEL	$ZIGLIB/std/target/spirv.zig	/FPFastMathModeINTEL/;"	field
FPGABufferLocationINTEL	$ZIGLIB/std/target/spirv.zig	/FPGABufferLocationINTEL/;"	field
FPGAClusterAttributesINTEL	$ZIGLIB/std/target/spirv.zig	/FPGAClusterAttributesINTEL/;"	field
FPGAKernelAttributesINTEL	$ZIGLIB/std/target/spirv.zig	/FPGAKernelAttributesINTEL/;"	field
FPGALoopControlsINTEL	$ZIGLIB/std/target/spirv.zig	/FPGALoopControlsINTEL/;"	field
FPGAMemoryAccessesINTEL	$ZIGLIB/std/target/spirv.zig	/FPGAMemoryAccessesINTEL/;"	field
FPGAMemoryAttributesINTEL	$ZIGLIB/std/target/spirv.zig	/FPGAMemoryAttributesINTEL/;"	field
FPGARegINTEL	$ZIGLIB/std/target/spirv.zig	/FPGARegINTEL/;"	field
FPOS	$ZIGLIB/std/c/haiku.zig	/FPOS = B_POSIX_ERROR_BASE + 14/;"	field
FPSIZE	$ZIGLIB/std/c/solaris.zig	/pub const FPSIZE = 2028/;"	constant
FPTYPE	$ZIGLIB/std/c/solaris.zig	/pub const FPTYPE = 2027/;"	constant
FP_EXC_ASYNC	$ZIGLIB/std/os/linux.zig	/pub const FP_EXC_ASYNC = 2/;"	constant
FP_EXC_DISABLED	$ZIGLIB/std/os/linux.zig	/pub const FP_EXC_DISABLED = 0/;"	constant
FP_EXC_DIV	$ZIGLIB/std/os/linux.zig	/pub const FP_EXC_DIV = 0x010000/;"	constant
FP_EXC_INV	$ZIGLIB/std/os/linux.zig	/pub const FP_EXC_INV = 0x100000/;"	constant
FP_EXC_NONRECOV	$ZIGLIB/std/os/linux.zig	/pub const FP_EXC_NONRECOV = 1/;"	constant
FP_EXC_OVF	$ZIGLIB/std/os/linux.zig	/pub const FP_EXC_OVF = 0x020000/;"	constant
FP_EXC_PRECISE	$ZIGLIB/std/os/linux.zig	/pub const FP_EXC_PRECISE = 3/;"	constant
FP_EXC_RES	$ZIGLIB/std/os/linux.zig	/pub const FP_EXC_RES = 0x080000/;"	constant
FP_EXC_SW_ENABLE	$ZIGLIB/std/os/linux.zig	/pub const FP_EXC_SW_ENABLE = 0x80/;"	constant
FP_EXC_UND	$ZIGLIB/std/os/linux.zig	/pub const FP_EXC_UND = 0x040000/;"	constant
FP_MODE_FR	$ZIGLIB/std/os/linux.zig	/pub const FP_MODE_FR = 1 << 0/;"	constant
FP_MODE_FRE	$ZIGLIB/std/os/linux.zig	/pub const FP_MODE_FRE = 1 << 1/;"	constant
FQDN	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const FQDN = 131072/;"	constant
FR20	$ZIGLIB/std/elf.zig	/FR20 = 37/;"	field
FR30	$ZIGLIB/std/elf.zig	/FR30 = 84/;"	field
FRAGMENT	$ZIGLIB/std/os/linux.zig	/pub const FRAGMENT = 44/;"	constant
FRAME	$ZIGLIB/std/macho.zig	/FRAME = 4/;"	field
FRAMELESS	$ZIGLIB/std/macho.zig	/FRAMELESS = 2/;"	field
FREE	$ZIGLIB/std/os/linux.zig	/pub const FREE = 8/;"	constant
FREEBIND	$ZIGLIB/std/os/linux.zig	/pub const FREEBIND = 78/;"	constant
FREESP	$ZIGLIB/std/c/solaris.zig	/pub const FREESP = 11/;"	constant
FREEZE	$ZIGLIB/std/c/solaris.zig	/pub const FREEZE = 34/;"	constant
FREEZE_FS	$ZIGLIB/std/c/darwin.zig	/pub const FREEZE_FS = 53/;"	constant
FREE_VM_NOT_AT_BASE	$ZIGLIB/std/os/windows/ntstatus.zig	/FREE_VM_NOT_AT_BASE = 0xC000009F/;"	field
FRENCH	$ZIGLIB/std/os/windows/sublang.zig	/^pub const FRENCH = 0x01/;"	constant
FRENCH_BELGIAN	$ZIGLIB/std/os/windows/sublang.zig	/^pub const FRENCH_BELGIAN = 0x02/;"	constant
FRENCH_CANADIAN	$ZIGLIB/std/os/windows/sublang.zig	/^pub const FRENCH_CANADIAN = 0x03/;"	constant
FRENCH_LUXEMBOURG	$ZIGLIB/std/os/windows/sublang.zig	/^pub const FRENCH_LUXEMBOURG = 0x05/;"	constant
FRENCH_MONACO	$ZIGLIB/std/os/windows/sublang.zig	/^pub const FRENCH_MONACO = 0x06/;"	constant
FRENCH_SWISS	$ZIGLIB/std/os/windows/sublang.zig	/^pub const FRENCH_SWISS = 0x04/;"	constant
FRISIAN	$ZIGLIB/std/os/windows/lang.zig	/^pub const FRISIAN = 0x62/;"	constant
FRISIAN_NETHERLANDS	$ZIGLIB/std/os/windows/sublang.zig	/^pub const FRISIAN_NETHERLANDS = 0x01/;"	constant
FROM_BE	$ZIGLIB/std/os/linux/bpf.zig	/^pub const FROM_BE = TO_BE/;"	constant
FROM_LE	$ZIGLIB/std/os/linux/bpf.zig	/^pub const FROM_LE = TO_LE/;"	constant
FROM_PROTOCOL_INFO	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const FROM_PROTOCOL_INFO = -1/;"	constant
FSCALE	$ZIGLIB/std/c/openbsd.zig	/pub const FSCALE = 46/;"	constant
FSCTL_GET_REPARSE_POINT	$ZIGLIB/std/os/windows.zig	/^pub const FSCTL_GET_REPARSE_POINT: DWORD = 0x900a8/;"	constant
FSCTL_SET_REPARSE_POINT	$ZIGLIB/std/os/windows.zig	/^pub const FSCTL_SET_REPARSE_POINT: DWORD = 0x900a4/;"	constant
FSETID	$ZIGLIB/std/os/linux.zig	/pub const FSETID = 4/;"	constant
FSFILTER_OP_COMPLETED_SUCCESSFULLY	$ZIGLIB/std/os/windows/win32error.zig	/FSFILTER_OP_COMPLETED_SUCCESSFULLY = 762/;"	field
FSIZE	$ZIGLIB/std/os/linux/sparc64.zig	/FSIZE/;"	field
FSTAT	$ZIGLIB/std/os/plan9.zig	/FSTAT = 43/;"	field
FSYNC	$ZIGLIB/std/os/linux.zig	/FSYNC/;"	field
FSYNCWRITE	$ZIGLIB/std/c/dragonfly.zig	/pub const FSYNCWRITE = 4194304/;"	constant
FS_DRIVER_REQUIRED	$ZIGLIB/std/os/windows/win32error.zig	/FS_DRIVER_REQUIRED = 588/;"	field
FStatAtError	$ZIGLIB/std/os.zig	/^pub const FStatAtError = FStatError || error{ NameTooLong, FileNotFound, SymLinkLoop }/;"	constant
FStatError	$ZIGLIB/std/os.zig	/^pub const FStatError = error{$/;"	constant
FTEXT	$ZIGLIB/std/compress/gzip.zig	/^const FTEXT = 1 << 0/;"	constant
FTYPE	$ZIGLIB/std/c/openbsd.zig	/FTYPE = 79/;"	field
FT_MISSING_MEMBER	$ZIGLIB/std/os/windows/ntstatus.zig	/FT_MISSING_MEMBER = 0xC000015F/;"	field
FT_ORPHANING	$ZIGLIB/std/os/windows/ntstatus.zig	/FT_ORPHANING = 0xC000016D/;"	field
FT_READ_RECOVERY_FROM_BACKUP	$ZIGLIB/std/os/windows/win32error.zig	/FT_READ_RECOVERY_FROM_BACKUP = 704/;"	field
FT_WRITE_RECOVERY	$ZIGLIB/std/os/windows/win32error.zig	/FT_WRITE_RECOVERY = 705/;"	field
FULAH	$ZIGLIB/std/os/windows/lang.zig	/^pub const FULAH = 0x67/;"	constant
FULAH_SENEGAL	$ZIGLIB/std/os/windows/sublang.zig	/^pub const FULAH_SENEGAL = 0x02/;"	constant
FULLFSYNC	$ZIGLIB/std/c/darwin.zig	/pub const FULLFSYNC = 51/;"	constant
FULLSCREEN_MODE	$ZIGLIB/std/os/windows/win32error.zig	/FULLSCREEN_MODE = 1007/;"	field
FULL_RESOURCE_DESCRIPTOR	$ZIGLIB/std/os/windows.zig	/pub const FULL_RESOURCE_DESCRIPTOR: ULONG = 9/;"	constant
FUNCTION	$ZIGLIB/std/coff.zig	/FUNCTION = 32/;"	field
FUNCTION_FAILED	$ZIGLIB/std/os/windows/win32error.zig	/FUNCTION_FAILED = 1627/;"	field
FUNCTION_NOT_CALLED	$ZIGLIB/std/os/windows/win32error.zig	/FUNCTION_NOT_CALLED = 1626/;"	field
FUNCTION_STARTS	$ZIGLIB/std/macho.zig	/FUNCTION_STARTS = 0x26/;"	field
FUTEX	$ZIGLIB/std/os/linux.zig	/^pub const FUTEX = struct {$/;"	struct
FUTEX_PRIVATE_FLAG	$ZIGLIB/std/c/openbsd.zig	/^pub const FUTEX_PRIVATE_FLAG = 128/;"	constant
FUTEX_REQUEUE	$ZIGLIB/std/c/openbsd.zig	/^pub const FUTEX_REQUEUE = 3/;"	constant
FUTEX_WAIT	$ZIGLIB/std/c/openbsd.zig	/^pub const FUTEX_WAIT = 1/;"	constant
FUTEX_WAKE	$ZIGLIB/std/c/openbsd.zig	/^pub const FUTEX_WAKE = 2/;"	constant
FVERSION	$ZIGLIB/std/os/plan9.zig	/FVERSION = 40/;"	field
FVE_ACTION_NOT_ALLOWED	$ZIGLIB/std/os/windows/ntstatus.zig	/FVE_ACTION_NOT_ALLOWED = 0xC0210009/;"	field
FVE_AUTH_INVALID_APPLICATION	$ZIGLIB/std/os/windows/ntstatus.zig	/FVE_AUTH_INVALID_APPLICATION = 0xC021001B/;"	field
FVE_AUTH_INVALID_CONFIG	$ZIGLIB/std/os/windows/ntstatus.zig	/FVE_AUTH_INVALID_CONFIG = 0xC021001C/;"	field
FVE_BAD_DATA	$ZIGLIB/std/os/windows/ntstatus.zig	/FVE_BAD_DATA = 0xC021000A/;"	field
FVE_BAD_INFORMATION	$ZIGLIB/std/os/windows/ntstatus.zig	/FVE_BAD_INFORMATION = 0xC0210002/;"	field
FVE_BAD_METADATA_POINTER	$ZIGLIB/std/os/windows/ntstatus.zig	/FVE_BAD_METADATA_POINTER = 0xC021001F/;"	field
FVE_CONV_READ_ERROR	$ZIGLIB/std/os/windows/ntstatus.zig	/FVE_CONV_READ_ERROR = 0xC021000D/;"	field
FVE_CONV_RECOVERY_FAILED	$ZIGLIB/std/os/windows/ntstatus.zig	/FVE_CONV_RECOVERY_FAILED = 0xC0210028/;"	field
FVE_CONV_WRITE_ERROR	$ZIGLIB/std/os/windows/ntstatus.zig	/FVE_CONV_WRITE_ERROR = 0xC021000E/;"	field
FVE_DEBUGGER_ENABLED	$ZIGLIB/std/os/windows/ntstatus.zig	/FVE_DEBUGGER_ENABLED = 0xC021001D/;"	field
FVE_DRY_RUN_FAILED	$ZIGLIB/std/os/windows/ntstatus.zig	/FVE_DRY_RUN_FAILED = 0xC021001E/;"	field
FVE_FAILED_AUTHENTICATION	$ZIGLIB/std/os/windows/ntstatus.zig	/FVE_FAILED_AUTHENTICATION = 0xC0210011/;"	field
FVE_FAILED_BAD_FS	$ZIGLIB/std/os/windows/ntstatus.zig	/FVE_FAILED_BAD_FS = 0xC0210005/;"	field
FVE_FAILED_SECTOR_SIZE	$ZIGLIB/std/os/windows/ntstatus.zig	/FVE_FAILED_SECTOR_SIZE = 0xC0210010/;"	field
FVE_FAILED_WRONG_FS	$ZIGLIB/std/os/windows/ntstatus.zig	/FVE_FAILED_WRONG_FS = 0xC0210004/;"	field
FVE_FS_MOUNTED	$ZIGLIB/std/os/windows/ntstatus.zig	/FVE_FS_MOUNTED = 0xC0210007/;"	field
FVE_FS_NOT_EXTENDED	$ZIGLIB/std/os/windows/ntstatus.zig	/FVE_FS_NOT_EXTENDED = 0xC0210006/;"	field
FVE_KEYFILE_INVALID	$ZIGLIB/std/os/windows/ntstatus.zig	/FVE_KEYFILE_INVALID = 0xC0210014/;"	field
FVE_KEYFILE_NOT_FOUND	$ZIGLIB/std/os/windows/ntstatus.zig	/FVE_KEYFILE_NOT_FOUND = 0xC0210013/;"	field
FVE_KEYFILE_NO_VMK	$ZIGLIB/std/os/windows/ntstatus.zig	/FVE_KEYFILE_NO_VMK = 0xC0210015/;"	field
FVE_LOCKED_VOLUME	$ZIGLIB/std/os/windows/ntstatus.zig	/FVE_LOCKED_VOLUME = 0xC0210000/;"	field
FVE_NOT_DATA_VOLUME	$ZIGLIB/std/os/windows/ntstatus.zig	/FVE_NOT_DATA_VOLUME = 0xC021000C/;"	field
FVE_NOT_ENCRYPTED	$ZIGLIB/std/os/windows/ntstatus.zig	/FVE_NOT_ENCRYPTED = 0xC0210001/;"	field
FVE_NOT_OS_VOLUME	$ZIGLIB/std/os/windows/ntstatus.zig	/FVE_NOT_OS_VOLUME = 0xC0210012/;"	field
FVE_NO_FEATURE_LICENSE	$ZIGLIB/std/os/windows/ntstatus.zig	/FVE_NO_FEATURE_LICENSE = 0xC0210026/;"	field
FVE_NO_LICENSE	$ZIGLIB/std/os/windows/ntstatus.zig	/FVE_NO_LICENSE = 0xC0210008/;"	field
FVE_OLD_METADATA_COPY	$ZIGLIB/std/os/windows/ntstatus.zig	/FVE_OLD_METADATA_COPY = 0xC0210020/;"	field
FVE_OVERLAPPED_UPDATE	$ZIGLIB/std/os/windows/ntstatus.zig	/FVE_OVERLAPPED_UPDATE = 0xC021000F/;"	field
FVE_PARTIAL_METADATA	$ZIGLIB/std/os/windows/ntstatus.zig	/FVE_PARTIAL_METADATA = 0x80210001/;"	field
FVE_PIN_INVALID	$ZIGLIB/std/os/windows/ntstatus.zig	/FVE_PIN_INVALID = 0xC021001A/;"	field
FVE_POLICY_USER_DISABLE_RDV_NOT_ALLOWED	$ZIGLIB/std/os/windows/ntstatus.zig	/FVE_POLICY_USER_DISABLE_RDV_NOT_ALLOWED = 0xC0210027/;"	field
FVE_RAW_ACCESS	$ZIGLIB/std/os/windows/ntstatus.zig	/FVE_RAW_ACCESS = 0xC0210022/;"	field
FVE_RAW_BLOCKED	$ZIGLIB/std/os/windows/ntstatus.zig	/FVE_RAW_BLOCKED = 0xC0210023/;"	field
FVE_REBOOT_REQUIRED	$ZIGLIB/std/os/windows/ntstatus.zig	/FVE_REBOOT_REQUIRED = 0xC0210021/;"	field
FVE_TOO_SMALL	$ZIGLIB/std/os/windows/ntstatus.zig	/FVE_TOO_SMALL = 0xC0210003/;"	field
FVE_TPM_DISABLED	$ZIGLIB/std/os/windows/ntstatus.zig	/FVE_TPM_DISABLED = 0xC0210016/;"	field
FVE_TPM_INVALID_PCR	$ZIGLIB/std/os/windows/ntstatus.zig	/FVE_TPM_INVALID_PCR = 0xC0210018/;"	field
FVE_TPM_NO_VMK	$ZIGLIB/std/os/windows/ntstatus.zig	/FVE_TPM_NO_VMK = 0xC0210019/;"	field
FVE_TPM_SRK_AUTH_NOT_ZERO	$ZIGLIB/std/os/windows/ntstatus.zig	/FVE_TPM_SRK_AUTH_NOT_ZERO = 0xC0210017/;"	field
FVE_TRANSIENT_STATE	$ZIGLIB/std/os/windows/ntstatus.zig	/FVE_TRANSIENT_STATE = 0x80210002/;"	field
FVE_VIRTUALIZED_SPACE_TOO_BIG	$ZIGLIB/std/os/windows/ntstatus.zig	/FVE_VIRTUALIZED_SPACE_TOO_BIG = 0xC0210029/;"	field
FVE_VOLUME_NOT_BOUND	$ZIGLIB/std/os/windows/ntstatus.zig	/FVE_VOLUME_NOT_BOUND = 0xC021000B/;"	field
FVE_VOLUME_TOO_SMALL	$ZIGLIB/std/os/windows/ntstatus.zig	/FVE_VOLUME_TOO_SMALL = 0xC0210030/;"	field
FVMFILE	$ZIGLIB/std/macho.zig	/FVMFILE = 0x9/;"	field
FWP_ACTION_INCOMPATIBLE_WITH_LAYER	$ZIGLIB/std/os/windows/ntstatus.zig	/FWP_ACTION_INCOMPATIBLE_WITH_LAYER = 0xC022002C/;"	field
FWP_ACTION_INCOMPATIBLE_WITH_SUBLAYER	$ZIGLIB/std/os/windows/ntstatus.zig	/FWP_ACTION_INCOMPATIBLE_WITH_SUBLAYER = 0xC022002D/;"	field
FWP_ALREADY_EXISTS	$ZIGLIB/std/os/windows/ntstatus.zig	/FWP_ALREADY_EXISTS = 0xC0220009/;"	field
FWP_BUILTIN_OBJECT	$ZIGLIB/std/os/windows/ntstatus.zig	/FWP_BUILTIN_OBJECT = 0xC0220017/;"	field
FWP_CALLOUT_NOTIFICATION_FAILED	$ZIGLIB/std/os/windows/ntstatus.zig	/FWP_CALLOUT_NOTIFICATION_FAILED = 0xC0220037/;"	field
FWP_CALLOUT_NOT_FOUND	$ZIGLIB/std/os/windows/ntstatus.zig	/FWP_CALLOUT_NOT_FOUND = 0xC0220001/;"	field
FWP_CANNOT_PEND	$ZIGLIB/std/os/windows/ntstatus.zig	/FWP_CANNOT_PEND = 0xC0220103/;"	field
FWP_CONDITION_NOT_FOUND	$ZIGLIB/std/os/windows/ntstatus.zig	/FWP_CONDITION_NOT_FOUND = 0xC0220002/;"	field
FWP_CONTEXT_INCOMPATIBLE_WITH_CALLOUT	$ZIGLIB/std/os/windows/ntstatus.zig	/FWP_CONTEXT_INCOMPATIBLE_WITH_CALLOUT = 0xC022002F/;"	field
FWP_CONTEXT_INCOMPATIBLE_WITH_LAYER	$ZIGLIB/std/os/windows/ntstatus.zig	/FWP_CONTEXT_INCOMPATIBLE_WITH_LAYER = 0xC022002E/;"	field
FWP_DUPLICATE_AUTH_METHOD	$ZIGLIB/std/os/windows/ntstatus.zig	/FWP_DUPLICATE_AUTH_METHOD = 0xC022003C/;"	field
FWP_DUPLICATE_CONDITION	$ZIGLIB/std/os/windows/ntstatus.zig	/FWP_DUPLICATE_CONDITION = 0xC022002A/;"	field
FWP_DUPLICATE_KEYMOD	$ZIGLIB/std/os/windows/ntstatus.zig	/FWP_DUPLICATE_KEYMOD = 0xC022002B/;"	field
FWP_DYNAMIC_SESSION_IN_PROGRESS	$ZIGLIB/std/os/windows/ntstatus.zig	/FWP_DYNAMIC_SESSION_IN_PROGRESS = 0xC022000B/;"	field
FWP_EM_NOT_SUPPORTED	$ZIGLIB/std/os/windows/ntstatus.zig	/FWP_EM_NOT_SUPPORTED = 0xC0220032/;"	field
FWP_FILTER_NOT_FOUND	$ZIGLIB/std/os/windows/ntstatus.zig	/FWP_FILTER_NOT_FOUND = 0xC0220003/;"	field
FWP_INCOMPATIBLE_AUTH_CONFIG	$ZIGLIB/std/os/windows/ntstatus.zig	/FWP_INCOMPATIBLE_AUTH_CONFIG = 0xC0220038/;"	field
FWP_INCOMPATIBLE_AUTH_METHOD	$ZIGLIB/std/os/windows/ntstatus.zig	/FWP_INCOMPATIBLE_AUTH_METHOD = 0xC0220030/;"	field
FWP_INCOMPATIBLE_CIPHER_CONFIG	$ZIGLIB/std/os/windows/ntstatus.zig	/FWP_INCOMPATIBLE_CIPHER_CONFIG = 0xC0220039/;"	field
FWP_INCOMPATIBLE_DH_GROUP	$ZIGLIB/std/os/windows/ntstatus.zig	/FWP_INCOMPATIBLE_DH_GROUP = 0xC0220031/;"	field
FWP_INCOMPATIBLE_LAYER	$ZIGLIB/std/os/windows/ntstatus.zig	/FWP_INCOMPATIBLE_LAYER = 0xC0220014/;"	field
FWP_INCOMPATIBLE_SA_STATE	$ZIGLIB/std/os/windows/ntstatus.zig	/FWP_INCOMPATIBLE_SA_STATE = 0xC022001B/;"	field
FWP_INCOMPATIBLE_TXN	$ZIGLIB/std/os/windows/ntstatus.zig	/FWP_INCOMPATIBLE_TXN = 0xC0220011/;"	field
FWP_INJECT_HANDLE_CLOSING	$ZIGLIB/std/os/windows/ntstatus.zig	/FWP_INJECT_HANDLE_CLOSING = 0xC0220101/;"	field
FWP_INJECT_HANDLE_STALE	$ZIGLIB/std/os/windows/ntstatus.zig	/FWP_INJECT_HANDLE_STALE = 0xC0220102/;"	field
FWP_INVALID_ACTION_TYPE	$ZIGLIB/std/os/windows/ntstatus.zig	/FWP_INVALID_ACTION_TYPE = 0xC0220024/;"	field
FWP_INVALID_ENUMERATOR	$ZIGLIB/std/os/windows/ntstatus.zig	/FWP_INVALID_ENUMERATOR = 0xC022001D/;"	field
FWP_INVALID_FLAGS	$ZIGLIB/std/os/windows/ntstatus.zig	/FWP_INVALID_FLAGS = 0xC022001E/;"	field
FWP_INVALID_INTERVAL	$ZIGLIB/std/os/windows/ntstatus.zig	/FWP_INVALID_INTERVAL = 0xC0220021/;"	field
FWP_INVALID_NET_MASK	$ZIGLIB/std/os/windows/ntstatus.zig	/FWP_INVALID_NET_MASK = 0xC022001F/;"	field
FWP_INVALID_PARAMETER	$ZIGLIB/std/os/windows/ntstatus.zig	/FWP_INVALID_PARAMETER = 0xC0220035/;"	field
FWP_INVALID_RANGE	$ZIGLIB/std/os/windows/ntstatus.zig	/FWP_INVALID_RANGE = 0xC0220020/;"	field
FWP_INVALID_WEIGHT	$ZIGLIB/std/os/windows/ntstatus.zig	/FWP_INVALID_WEIGHT = 0xC0220025/;"	field
FWP_IN_USE	$ZIGLIB/std/os/windows/ntstatus.zig	/FWP_IN_USE = 0xC022000A/;"	field
FWP_KM_CLIENTS_ONLY	$ZIGLIB/std/os/windows/ntstatus.zig	/FWP_KM_CLIENTS_ONLY = 0xC0220015/;"	field
FWP_LAYER_NOT_FOUND	$ZIGLIB/std/os/windows/ntstatus.zig	/FWP_LAYER_NOT_FOUND = 0xC0220004/;"	field
FWP_LIFETIME_MISMATCH	$ZIGLIB/std/os/windows/ntstatus.zig	/FWP_LIFETIME_MISMATCH = 0xC0220016/;"	field
FWP_MATCH_TYPE_MISMATCH	$ZIGLIB/std/os/windows/ntstatus.zig	/FWP_MATCH_TYPE_MISMATCH = 0xC0220026/;"	field
FWP_NET_EVENTS_DISABLED	$ZIGLIB/std/os/windows/ntstatus.zig	/FWP_NET_EVENTS_DISABLED = 0xC0220013/;"	field
FWP_NEVER_MATCH	$ZIGLIB/std/os/windows/ntstatus.zig	/FWP_NEVER_MATCH = 0xC0220033/;"	field
FWP_NOTIFICATION_DROPPED	$ZIGLIB/std/os/windows/ntstatus.zig	/FWP_NOTIFICATION_DROPPED = 0xC0220019/;"	field
FWP_NOT_FOUND	$ZIGLIB/std/os/windows/ntstatus.zig	/FWP_NOT_FOUND = 0xC0220008/;"	field
FWP_NO_TXN_IN_PROGRESS	$ZIGLIB/std/os/windows/ntstatus.zig	/FWP_NO_TXN_IN_PROGRESS = 0xC022000D/;"	field
FWP_NULL_DISPLAY_NAME	$ZIGLIB/std/os/windows/ntstatus.zig	/FWP_NULL_DISPLAY_NAME = 0xC0220023/;"	field
FWP_NULL_POINTER	$ZIGLIB/std/os/windows/ntstatus.zig	/FWP_NULL_POINTER = 0xC022001C/;"	field
FWP_OUT_OF_BOUNDS	$ZIGLIB/std/os/windows/ntstatus.zig	/FWP_OUT_OF_BOUNDS = 0xC0220028/;"	field
FWP_PROVIDER_CONTEXT_MISMATCH	$ZIGLIB/std/os/windows/ntstatus.zig	/FWP_PROVIDER_CONTEXT_MISMATCH = 0xC0220034/;"	field
FWP_PROVIDER_CONTEXT_NOT_FOUND	$ZIGLIB/std/os/windows/ntstatus.zig	/FWP_PROVIDER_CONTEXT_NOT_FOUND = 0xC0220006/;"	field
FWP_PROVIDER_NOT_FOUND	$ZIGLIB/std/os/windows/ntstatus.zig	/FWP_PROVIDER_NOT_FOUND = 0xC0220005/;"	field
FWP_RESERVED	$ZIGLIB/std/os/windows/ntstatus.zig	/FWP_RESERVED = 0xC0220029/;"	field
FWP_SESSION_ABORTED	$ZIGLIB/std/os/windows/ntstatus.zig	/FWP_SESSION_ABORTED = 0xC0220010/;"	field
FWP_SUBLAYER_NOT_FOUND	$ZIGLIB/std/os/windows/ntstatus.zig	/FWP_SUBLAYER_NOT_FOUND = 0xC0220007/;"	field
FWP_TCPIP_NOT_READY	$ZIGLIB/std/os/windows/ntstatus.zig	/FWP_TCPIP_NOT_READY = 0xC0220100/;"	field
FWP_TIMEOUT	$ZIGLIB/std/os/windows/ntstatus.zig	/FWP_TIMEOUT = 0xC0220012/;"	field
FWP_TOO_MANY_BOOTTIME_FILTERS	$ZIGLIB/std/os/windows/ntstatus.zig	/pub const FWP_TOO_MANY_BOOTTIME_FILTERS: NTSTATUS = .FWP_TOO_MANY_CALLOUTS/;"	constant
FWP_TOO_MANY_CALLOUTS	$ZIGLIB/std/os/windows/ntstatus.zig	/FWP_TOO_MANY_CALLOUTS = 0xC0220018/;"	field
FWP_TOO_MANY_SUBLAYERS	$ZIGLIB/std/os/windows/ntstatus.zig	/FWP_TOO_MANY_SUBLAYERS = 0xC0220036/;"	field
FWP_TRAFFIC_MISMATCH	$ZIGLIB/std/os/windows/ntstatus.zig	/FWP_TRAFFIC_MISMATCH = 0xC022001A/;"	field
FWP_TXN_ABORTED	$ZIGLIB/std/os/windows/ntstatus.zig	/FWP_TXN_ABORTED = 0xC022000F/;"	field
FWP_TXN_IN_PROGRESS	$ZIGLIB/std/os/windows/ntstatus.zig	/FWP_TXN_IN_PROGRESS = 0xC022000E/;"	field
FWP_TYPE_MISMATCH	$ZIGLIB/std/os/windows/ntstatus.zig	/FWP_TYPE_MISMATCH = 0xC0220027/;"	field
FWP_WRONG_SESSION	$ZIGLIB/std/os/windows/ntstatus.zig	/FWP_WRONG_SESSION = 0xC022000C/;"	field
FWP_ZERO_LENGTH_ARRAY	$ZIGLIB/std/os/windows/ntstatus.zig	/FWP_ZERO_LENGTH_ARRAY = 0xC0220022/;"	field
FWSTAT	$ZIGLIB/std/os/plan9.zig	/FWSTAT = 45/;"	field
FX66	$ZIGLIB/std/elf.zig	/FX66 = 66/;"	field
F_ALLOW_MULTI	$ZIGLIB/std/os/linux/bpf.zig	/^pub const F_ALLOW_MULTI = 0x2/;"	constant
F_ALLOW_OVERRIDE	$ZIGLIB/std/os/linux/bpf.zig	/^pub const F_ALLOW_OVERRIDE = 0x1/;"	constant
F_ANY_ALIGNMENT	$ZIGLIB/std/os/linux/bpf.zig	/^pub const F_ANY_ALIGNMENT = 0x2/;"	constant
F_LOCK	$ZIGLIB/std/os/linux/bpf.zig	/^pub const F_LOCK = 4/;"	constant
F_OK	$ZIGLIB/std/os/wasi.zig	/^pub const F_OK = 0/;"	constant
F_REPLACE	$ZIGLIB/std/os/linux/bpf.zig	/^pub const F_REPLACE = 0x4/;"	constant
F_STRICT_ALIGNMENT	$ZIGLIB/std/os/linux/bpf.zig	/^pub const F_STRICT_ALIGNMENT = 0x1/;"	constant
F_SUFFIX	$ZIGLIB/std/zig/c_translation.zig	/pub fn F_SUFFIX(comptime f: comptime_float) f32 {$/;"	function
F_TEST_RND_HI32	$ZIGLIB/std/os/linux/bpf.zig	/^pub const F_TEST_RND_HI32 = 0x4/;"	constant
FailingAllocator	$ZIGLIB/std/testing/failing_allocator.zig	/^pub const FailingAllocator = struct {$/;"	struct
False	$ZIGLIB/std/json.zig	/False/;"	field
FalseLiteral1	$ZIGLIB/std/json.zig	/FalseLiteral1/;"	field
FalseLiteral2	$ZIGLIB/std/json.zig	/FalseLiteral2/;"	field
FalseLiteral3	$ZIGLIB/std/json.zig	/FalseLiteral3/;"	field
FalseLiteral4	$ZIGLIB/std/json.zig	/FalseLiteral4/;"	field
FastPebLock	$ZIGLIB/std/os/windows.zig	/FastPebLock: *RTL_CRITICAL_SECTION/;"	field
Fastcall	$ZIGLIB/std/builtin.zig	/Fastcall/;"	field
FaultingPc	$ZIGLIB/std/os/windows.zig	/FaultingPc: LPVOID/;"	field
FaultingThreadId	$ZIGLIB/std/os/windows.zig	/FaultingThreadId: ULONG_PTR/;"	field
FaultingVa	$ZIGLIB/std/os/windows.zig	/FaultingVa: LPVOID/;"	field
FchdirError	$ZIGLIB/std/os.zig	/^pub const FchdirError = error{$/;"	constant
FcntlError	$ZIGLIB/std/os.zig	/^pub const FcntlError = error{$/;"	constant
Feature	$ZIGLIB/std/target/x86.zig	/^pub const Feature = enum {$/;"	enum
FeatureConfigurationChangeStamp	$ZIGLIB/std/os/windows.zig	/FeatureConfigurationChangeStamp: KSYSTEM_TIME/;"	field
Features	$ZIGLIB/std/os/windows.zig	/Features: [MAXIMUM_XSTATE_FEATURES]XSTATE_FEATURE/;"	field
FiberData	$ZIGLIB/std/os/windows.zig	/FiberData: PVOID/;"	field
FibreChannel	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/FibreChannel: *const FibreChannelDevicePath/;"	field
FibreChannelDevicePath	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/pub const FibreChannelDevicePath = extern struct {$/;"	struct
FibreChannelEx	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/FibreChannelEx: *const FibreChannelExDevicePath/;"	field
FibreChannelExDevicePath	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/pub const FibreChannelExDevicePath = extern struct {$/;"	struct
Field	$ZIGLIB/std/multi_array_list.zig	/pub const Field = meta.FieldEnum(S)/;"	constant
FieldEnum	$ZIGLIB/std/meta/trailer_flags.zig	/pub const FieldEnum = std.meta.FieldEnum(Fields)/;"	constant
FieldIterator	$ZIGLIB/std/hash_map.zig	/fn FieldIterator(comptime T: type) type {$/;"	function
FieldParams	$ZIGLIB/std/crypto/pcurves/common.zig	/^pub const FieldParams = struct {$/;"	struct
FieldType	$ZIGLIB/std/multi_array_list.zig	/fn FieldType(comptime field: Field) type {$/;"	function
FieldValues	$ZIGLIB/std/meta/trailer_flags.zig	/pub const FieldValues = blk: {$/;"	constant
FifoType	$ZIGLIB/std/io/peek_stream.zig	/const FifoType = std.fifo.LinearFifo(u8, buffer_type)/;"	constant
File	$ZIGLIB/std/fs/file.zig	/^pub const File = struct {$/;"	struct
FileAccessInformation	$ZIGLIB/std/os/windows.zig	/FileAccessInformation/;"	field
FileAlignmentInfo	$ZIGLIB/std/os/windows.zig	/^pub const FileAlignmentInfo = 17/;"	constant
FileAlignmentInformation	$ZIGLIB/std/os/windows.zig	/FileAlignmentInformation/;"	field
FileAllInformation	$ZIGLIB/std/os/windows.zig	/FileAllInformation/;"	field
FileAllocationInfo	$ZIGLIB/std/os/windows.zig	/^pub const FileAllocationInfo = 5/;"	constant
FileAllocationInformation	$ZIGLIB/std/os/windows.zig	/FileAllocationInformation/;"	field
FileAlternateNameInformation	$ZIGLIB/std/os/windows.zig	/FileAlternateNameInformation/;"	field
FileAttributeTagInfo	$ZIGLIB/std/os/windows.zig	/^pub const FileAttributeTagInfo = 9/;"	constant
FileAttributeTagInformation	$ZIGLIB/std/os/windows.zig	/FileAttributeTagInformation/;"	field
FileAttributes	$ZIGLIB/std/os/windows.zig	/FileAttributes: ULONG/;"	field
FileBasicInfo	$ZIGLIB/std/os/windows.zig	/^pub const FileBasicInfo = 0/;"	constant
FileBasicInformation	$ZIGLIB/std/os/windows.zig	/FileBasicInformation/;"	field
FileBothDirectoryInformation	$ZIGLIB/std/os/windows.zig	/FileBothDirectoryInformation/;"	field
FileCaseSensitiveInformation	$ZIGLIB/std/os/windows.zig	/FileCaseSensitiveInformation/;"	field
FileCaseSensitiveInformationForceAccessCheck	$ZIGLIB/std/os/windows.zig	/FileCaseSensitiveInformationForceAccessCheck/;"	field
FileChecksumEntryHeader	$ZIGLIB/std/pdb.zig	/^pub const FileChecksumEntryHeader = extern struct {$/;"	struct
FileChecksums	$ZIGLIB/std/pdb.zig	/FileChecksums = 0xf4/;"	field
FileCompletionInformation	$ZIGLIB/std/os/windows.zig	/FileCompletionInformation/;"	field
FileCompressionInfo	$ZIGLIB/std/os/windows.zig	/^pub const FileCompressionInfo = 8/;"	constant
FileCompressionInformation	$ZIGLIB/std/os/windows.zig	/FileCompressionInformation/;"	field
FileDefinition	$ZIGLIB/std/coff.zig	/^pub const FileDefinition = struct {$/;"	struct
FileDesiredStorageClassInformation	$ZIGLIB/std/os/windows.zig	/FileDesiredStorageClassInformation/;"	field
FileDirectoryInformation	$ZIGLIB/std/os/windows.zig	/FileDirectoryInformation = 1/;"	field
FileDispositionInfo	$ZIGLIB/std/os/windows.zig	/^pub const FileDispositionInfo = 4/;"	constant
FileDispositionInformation	$ZIGLIB/std/os/windows.zig	/FileDispositionInformation/;"	field
FileDispositionInformationEx	$ZIGLIB/std/os/windows.zig	/FileDispositionInformationEx/;"	field
FileEaInformation	$ZIGLIB/std/os/windows.zig	/FileEaInformation/;"	field
FileEndOfFileInfo	$ZIGLIB/std/os/windows.zig	/^pub const FileEndOfFileInfo = 6/;"	constant
FileEndOfFileInformation	$ZIGLIB/std/os/windows.zig	/FileEndOfFileInformation/;"	field
FileEntFmt	$ZIGLIB/std/dwarf.zig	/const FileEntFmt = struct {$/;"	struct
FileEntry	$ZIGLIB/std/dwarf.zig	/^const FileEntry = struct {$/;"	struct
FileFullDirectoryInfo	$ZIGLIB/std/os/windows.zig	/^pub const FileFullDirectoryInfo = 14/;"	constant
FileFullDirectoryInformation	$ZIGLIB/std/os/windows.zig	/FileFullDirectoryInformation/;"	field
FileFullDirectoryRestartInfo	$ZIGLIB/std/os/windows.zig	/^pub const FileFullDirectoryRestartInfo = 15/;"	constant
FileFullEaInformation	$ZIGLIB/std/os/windows.zig	/FileFullEaInformation/;"	field
FileHandle	$ZIGLIB/std/os/uefi.zig	/^pub const FileHandle = *opaque {}/;"	constant
FileHardLinkFullIdInformation	$ZIGLIB/std/os/windows.zig	/FileHardLinkFullIdInformation/;"	field
FileHardLinkInformation	$ZIGLIB/std/os/windows.zig	/FileHardLinkInformation/;"	field
FileIdBothDirectoryInfo	$ZIGLIB/std/os/windows.zig	/^pub const FileIdBothDirectoryInfo = 10/;"	constant
FileIdBothDirectoryInformation	$ZIGLIB/std/os/windows.zig	/FileIdBothDirectoryInformation/;"	field
FileIdBothDirectoryRestartInfo	$ZIGLIB/std/os/windows.zig	/^pub const FileIdBothDirectoryRestartInfo = 11/;"	constant
FileIdExtdBothDirectoryInformation	$ZIGLIB/std/os/windows.zig	/FileIdExtdBothDirectoryInformation/;"	field
FileIdExtdDirectoryInfo	$ZIGLIB/std/os/windows.zig	/^pub const FileIdExtdDirectoryInfo = 19/;"	constant
FileIdExtdDirectoryInformation	$ZIGLIB/std/os/windows.zig	/FileIdExtdDirectoryInformation/;"	field
FileIdExtdDirectoryRestartInfo	$ZIGLIB/std/os/windows.zig	/^pub const FileIdExtdDirectoryRestartInfo = 20/;"	constant
FileIdFullDirectoryInformation	$ZIGLIB/std/os/windows.zig	/FileIdFullDirectoryInformation/;"	field
FileIdGlobalTxDirectoryInformation	$ZIGLIB/std/os/windows.zig	/FileIdGlobalTxDirectoryInformation/;"	field
FileIdInfo	$ZIGLIB/std/os/windows.zig	/^pub const FileIdInfo = 18/;"	constant
FileIdInformation	$ZIGLIB/std/os/windows.zig	/FileIdInformation/;"	field
FileIndex	$ZIGLIB/std/os/windows.zig	/FileIndex: ULONG/;"	field
FileInfo	$ZIGLIB/std/os/uefi/protocols/file_protocol.zig	/^pub const FileInfo = extern struct {$/;"	struct
FileInternalInformation	$ZIGLIB/std/os/windows.zig	/FileInternalInformation/;"	field
FileIoCompletionNotificationInformation	$ZIGLIB/std/os/windows.zig	/FileIoCompletionNotificationInformation/;"	field
FileIoPriorityHintInfo	$ZIGLIB/std/os/windows.zig	/^pub const FileIoPriorityHintInfo = 12/;"	constant
FileIoPriorityHintInformation	$ZIGLIB/std/os/windows.zig	/FileIoPriorityHintInformation/;"	field
FileIoStatusBlockRangeInformation	$ZIGLIB/std/os/windows.zig	/FileIoStatusBlockRangeInformation/;"	field
FileIsRemoteDeviceInformation	$ZIGLIB/std/os/windows.zig	/FileIsRemoteDeviceInformation/;"	field
FileLinkInformation	$ZIGLIB/std/os/windows.zig	/FileLinkInformation/;"	field
FileLinkInformationBypassAccessCheck	$ZIGLIB/std/os/windows.zig	/FileLinkInformationBypassAccessCheck/;"	field
FileLinkInformationEx	$ZIGLIB/std/os/windows.zig	/FileLinkInformationEx/;"	field
FileLinkInformationExBypassAccessCheck	$ZIGLIB/std/os/windows.zig	/FileLinkInformationExBypassAccessCheck/;"	field
FileMagic	$ZIGLIB/std/pdb.zig	/FileMagic: [file_magic.len]u8/;"	field
FileMailslotQueryInformation	$ZIGLIB/std/os/windows.zig	/FileMailslotQueryInformation/;"	field
FileMailslotSetInformation	$ZIGLIB/std/os/windows.zig	/FileMailslotSetInformation/;"	field
FileMaximumInformation	$ZIGLIB/std/os/windows.zig	/FileMaximumInformation/;"	field
FileMemoryPartitionInformation	$ZIGLIB/std/os/windows.zig	/FileMemoryPartitionInformation/;"	field
FileModeInformation	$ZIGLIB/std/os/windows.zig	/FileModeInformation/;"	field
FileMoveClusterInformation	$ZIGLIB/std/os/windows.zig	/FileMoveClusterInformation/;"	field
FileName	$ZIGLIB/std/os/windows.zig	/FileName: [1]WCHAR/;"	field
FileNameInfo	$ZIGLIB/std/os/windows.zig	/^pub const FileNameInfo = 2/;"	constant
FileNameInformation	$ZIGLIB/std/os/windows.zig	/FileNameInformation/;"	field
FileNameLength	$ZIGLIB/std/os/windows.zig	/FileNameLength: ULONG/;"	field
FileNameOffset	$ZIGLIB/std/pdb.zig	/FileNameOffset: u32/;"	field
FileNamesInformation	$ZIGLIB/std/os/windows.zig	/FileNamesInformation/;"	field
FileNetworkOpenInformation	$ZIGLIB/std/os/windows.zig	/FileNetworkOpenInformation/;"	field
FileNetworkPhysicalNameInformation	$ZIGLIB/std/os/windows.zig	/FileNetworkPhysicalNameInformation/;"	field
FileNormalizedNameInformation	$ZIGLIB/std/os/windows.zig	/FileNormalizedNameInformation/;"	field
FileNumaNodeInformation	$ZIGLIB/std/os/windows.zig	/FileNumaNodeInformation/;"	field
FileObjectIdInformation	$ZIGLIB/std/os/windows.zig	/FileObjectIdInformation/;"	field
FilePath	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/FilePath: *const FilePathDevicePath/;"	field
FilePathDevicePath	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/pub const FilePathDevicePath = extern struct {$/;"	struct
FilePipeInformation	$ZIGLIB/std/os/windows.zig	/FilePipeInformation/;"	field
FilePipeLocalInformation	$ZIGLIB/std/os/windows.zig	/FilePipeLocalInformation/;"	field
FilePipeRemoteInformation	$ZIGLIB/std/os/windows.zig	/FilePipeRemoteInformation/;"	field
FilePositionInformation	$ZIGLIB/std/os/windows.zig	/FilePositionInformation/;"	field
FileProcessIdsUsingFileInformation	$ZIGLIB/std/os/windows.zig	/FileProcessIdsUsingFileInformation/;"	field
FileProtocol	$ZIGLIB/std/os/uefi/protocols/file_protocol.zig	/^pub const FileProtocol = extern struct {$/;"	struct
FileQuotaInformation	$ZIGLIB/std/os/windows.zig	/FileQuotaInformation/;"	field
FileRemoteProtocolInfo	$ZIGLIB/std/os/windows.zig	/^pub const FileRemoteProtocolInfo = 13/;"	constant
FileRemoteProtocolInformation	$ZIGLIB/std/os/windows.zig	/FileRemoteProtocolInformation/;"	field
FileRenameInfo	$ZIGLIB/std/os/windows.zig	/^pub const FileRenameInfo = 3/;"	constant
FileRenameInformation	$ZIGLIB/std/os/windows.zig	/FileRenameInformation/;"	field
FileRenameInformationBypassAccessCheck	$ZIGLIB/std/os/windows.zig	/FileRenameInformationBypassAccessCheck/;"	field
FileRenameInformationEx	$ZIGLIB/std/os/windows.zig	/FileRenameInformationEx/;"	field
FileRenameInformationExBypassAccessCheck	$ZIGLIB/std/os/windows.zig	/FileRenameInformationExBypassAccessCheck/;"	field
FileReparsePointInformation	$ZIGLIB/std/os/windows.zig	/FileReparsePointInformation/;"	field
FileReplaceCompletionInformation	$ZIGLIB/std/os/windows.zig	/FileReplaceCompletionInformation/;"	field
FileSfioReserveInformation	$ZIGLIB/std/os/windows.zig	/FileSfioReserveInformation/;"	field
FileSfioVolumeInformation	$ZIGLIB/std/os/windows.zig	/FileSfioVolumeInformation/;"	field
FileShortNameInformation	$ZIGLIB/std/os/windows.zig	/FileShortNameInformation/;"	field
FileSource	$ZIGLIB/std/Build.zig	/^pub const FileSource = union(enum) {$/;"	union
FileStandardInfo	$ZIGLIB/std/os/windows.zig	/^pub const FileStandardInfo = 1/;"	constant
FileStandardInformation	$ZIGLIB/std/os/windows.zig	/FileStandardInformation/;"	field
FileStandardLinkInformation	$ZIGLIB/std/os/windows.zig	/FileStandardLinkInformation/;"	field
FileStatInformation	$ZIGLIB/std/os/windows.zig	/FileStatInformation/;"	field
FileStatLxInformation	$ZIGLIB/std/os/windows.zig	/FileStatLxInformation/;"	field
FileStorageInfo	$ZIGLIB/std/os/windows.zig	/^pub const FileStorageInfo = 16/;"	constant
FileStorageReserveIdInformation	$ZIGLIB/std/os/windows.zig	/FileStorageReserveIdInformation/;"	field
FileStreamInfo	$ZIGLIB/std/os/windows.zig	/^pub const FileStreamInfo = 7/;"	constant
FileStreamInformation	$ZIGLIB/std/os/windows.zig	/FileStreamInformation/;"	field
FileSystemInfo	$ZIGLIB/std/os/uefi/protocols/file_protocol.zig	/^pub const FileSystemInfo = extern struct {$/;"	struct
FileTable	$ZIGLIB/std/fs/watch.zig	/const FileTable = std.StringHashMapUnmanaged(V)/;"	constant
FileTrackingInformation	$ZIGLIB/std/os/windows.zig	/FileTrackingInformation/;"	field
FileType	$ZIGLIB/std/tar.zig	/pub const FileType = enum(u8) {$/;"	enum
FileUnusedInformation	$ZIGLIB/std/os/windows.zig	/FileUnusedInformation/;"	field
FileValidDataLengthInformation	$ZIGLIB/std/os/windows.zig	/FileValidDataLengthInformation/;"	field
FileVolumeNameInformation	$ZIGLIB/std/os/windows.zig	/FileVolumeNameInformation/;"	field
FilesUpdate	$ZIGLIB/std/os/linux/io_uring.zig	/const FilesUpdate = extern struct {$/;"	struct
Filter	$ZIGLIB/std/os/windows.zig	/pub const Filter = enum {$/;"	enum
FilterId	$ZIGLIB/std/compress/xz/block.zig	/const FilterId = enum(u64) {$/;"	enum
FindByteOutStream	$ZIGLIB/std/io.zig	/^pub const FindByteOutStream = @compileError("deprecated; use `FindByteWriter`")/;"	constant
FindByteWriter	$ZIGLIB/std/io/find_byte_writer.zig	/^pub fn FindByteWriter(comptime UnderlyingWriter: type) type {$/;"	function
FindClose	$ZIGLIB/std/os/windows.zig	/^pub fn FindClose(hFindFile: HANDLE) void {$/;"	function
FingerPrint	$ZIGLIB/std/hash_map.zig	/const FingerPrint = u7/;"	constant
Finish	$ZIGLIB/std/event/loop.zig	/pub const Finish = union(enum) {$/;"	union
FinishError	$ZIGLIB/std/fs.zig	/pub const FinishError = std.os.RenameError/;"	constant
Finished	$ZIGLIB/std/event/future.zig	/Finished/;"	field
FixedBufferAllocator	$ZIGLIB/std/heap.zig	/^pub const FixedBufferAllocator = struct {$/;"	struct
FixedBufferStream	$ZIGLIB/std/io/fixed_buffer_stream.zig	/^pub fn FixedBufferStream(comptime Buffer: type) type {$/;"	function
FixedMaskType	$ZIGLIB/std/bit_set.zig	/const FixedMaskType = std.meta.Int(.unsigned, desired_bits)/;"	constant
Flag	$ZIGLIB/std/os/windows.zig	/Flag: u2/;"	field
Flags	$ZIGLIB/std/pdb.zig	/pub const Flags = packed struct {$/;"	struct
FlexibleArrayType	$ZIGLIB/std/zig/c_translation.zig	/^pub fn FlexibleArrayType(comptime SelfType: type, comptime ElementType: type) type {$/;"	function
Flink	$ZIGLIB/std/os/windows.zig	/Flink: *LIST_ENTRY/;"	field
Float	$ZIGLIB/std/meta.zig	/^pub fn Float(comptime bit_count: u8) type {$/;"	function
Float16	$ZIGLIB/std/target/spirv.zig	/Float16/;"	field
Float16Buffer	$ZIGLIB/std/target/spirv.zig	/Float16Buffer/;"	field
Float16ImageAMD	$ZIGLIB/std/target/spirv.zig	/Float16ImageAMD/;"	field
Float64	$ZIGLIB/std/target/spirv.zig	/Float64/;"	field
FloatAbi	$ZIGLIB/std/target.zig	/pub const FloatAbi = enum {$/;"	enum
FloatBase	$ZIGLIB/std/zig/number_literal.zig	/^pub const FloatBase = enum(u8) { decimal = 10, hex = 16 }/;"	enum
FloatDecimal	$ZIGLIB/std/fmt/errol.zig	/^pub const FloatDecimal = struct {$/;"	struct
FloatExponent	$ZIGLIB/std/c/tokenizer.zig	/FloatExponent/;"	field
FloatExponentDigits	$ZIGLIB/std/c/tokenizer.zig	/FloatExponentDigits/;"	field
FloatFraction	$ZIGLIB/std/c/tokenizer.zig	/FloatFraction/;"	field
FloatFractionHex	$ZIGLIB/std/c/tokenizer.zig	/FloatFractionHex/;"	field
FloatLiteral	$ZIGLIB/std/c/tokenizer.zig	/FloatLiteral: NumSuffix/;"	field
FloatMode	$ZIGLIB/std/builtin.zig	/^pub const FloatMode = enum {$/;"	enum
FloatRegisters	$ZIGLIB/std/os/windows.zig	/FloatRegisters: [8]M128A/;"	field
FloatSave	$ZIGLIB/std/os/windows.zig	/FloatSave: XMM_SAVE_AREA32/;"	field
FloatStream	$ZIGLIB/std/fmt/parse_float/FloatStream.zig	/^const FloatStream = @This()/;"	constant
FloatSuffix	$ZIGLIB/std/c/tokenizer.zig	/FloatSuffix/;"	field
FloatingContext	$ZIGLIB/std/os/windows.zig	/FloatingContext: [16]?*M128A/;"	field
FloatingPointModeINTEL	$ZIGLIB/std/target/spirv.zig	/FloatingPointModeINTEL/;"	field
Flock	$ZIGLIB/std/os/linux/x86_64.zig	/^pub const Flock = extern struct {$/;"	struct
FlockError	$ZIGLIB/std/os.zig	/^pub const FlockError = error{$/;"	constant
FlsBitmap	$ZIGLIB/std/os/windows.zig	/FlsBitmap: *RTL_BITMAP/;"	field
FlsBitmapBits	$ZIGLIB/std/os/windows.zig	/FlsBitmapBits: [4]ULONG/;"	field
FlsCallback	$ZIGLIB/std/os/windows.zig	/FlsCallback: *FLS_CALLBACK_INFO/;"	field
FlsHighIndex	$ZIGLIB/std/os/windows.zig	/FlsHighIndex: ULONG/;"	field
FlsListHead	$ZIGLIB/std/os/windows.zig	/FlsListHead: LIST_ENTRY/;"	field
FltSave	$ZIGLIB/std/os/windows.zig	/FltSave: XMM_SAVE_AREA32/;"	field
FmtStep	$ZIGLIB/std/Build/FmtStep.zig	/^const FmtStep = @This()/;"	constant
FnArg	$ZIGLIB/std/builtin.zig	/pub const FnArg = @compileError("deprecated; use Fn.Param")/;"	constant
FnProto	$ZIGLIB/std/zig/Ast.zig	/pub const FnProto = struct {$/;"	struct
FnProtoOne	$ZIGLIB/std/zig/Ast.zig	/pub const FnProtoOne = struct {$/;"	struct
FnPtr	$ZIGLIB/std/zig/c_translation.zig	/const FnPtr = ?*align(1) const fn (*anyopaque) void/;"	constant
Fnv1a	$ZIGLIB/std/hash/fnv.zig	/^fn Fnv1a(comptime T: type, comptime prime: T, comptime offset: T) type {$/;"	function
Fnv1a_128	$ZIGLIB/std/hash/fnv.zig	/^pub const Fnv1a_128 = Fnv1a(u128, 0x1000000000000000000013b, 0x6c62272e07bb014262b821756295c58d)/;"	constant
Fnv1a_32	$ZIGLIB/std/hash/fnv.zig	/^pub const Fnv1a_32 = Fnv1a(u32, 0x01000193, 0x811c9dc5)/;"	constant
Fnv1a_64	$ZIGLIB/std/hash/fnv.zig	/^pub const Fnv1a_64 = Fnv1a(u64, 0x100000001b3, 0xcbf29ce484222325)/;"	constant
ForkError	$ZIGLIB/std/os.zig	/^pub const ForkError = error{SystemResources} || UnexpectedError/;"	constant
FormValue	$ZIGLIB/std/dwarf.zig	/^const FormValue = union(enum) {$/;"	union
Format	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/pub const Format = enum(u8) {$/;"	enum
FormatDurationData	$ZIGLIB/std/fmt.zig	/^const FormatDurationData = struct {$/;"	struct
FormatOptions	$ZIGLIB/std/fmt.zig	/^pub const FormatOptions = struct {$/;"	struct
Formatter	$ZIGLIB/std/fmt.zig	/^pub fn Formatter(comptime format_fn: anytype) type {$/;"	function
Fortran03	$ZIGLIB/std/dwarf/LANG.zig	/^pub const Fortran03 = 0x0022/;"	constant
Fortran08	$ZIGLIB/std/dwarf/LANG.zig	/^pub const Fortran08 = 0x0023/;"	constant
Fortran77	$ZIGLIB/std/dwarf/LANG.zig	/^pub const Fortran77 = 0x0007/;"	constant
Fortran90	$ZIGLIB/std/dwarf/LANG.zig	/^pub const Fortran90 = 0x0008/;"	constant
Fortran95	$ZIGLIB/std/dwarf/LANG.zig	/^pub const Fortran95 = 0x000e/;"	constant
Fpcr	$ZIGLIB/std/os/windows.zig	/Fpcr: DWORD/;"	field
Fpsr	$ZIGLIB/std/os/windows.zig	/Fpsr: DWORD/;"	field
Fractional	$ZIGLIB/std/math/big/rational.zig	/Fractional/;"	field
FragmentBarycentricNV	$ZIGLIB/std/target/spirv.zig	/FragmentBarycentricNV/;"	field
FragmentDensityEXT	$ZIGLIB/std/target/spirv.zig	/FragmentDensityEXT/;"	field
FragmentFullyCoveredEXT	$ZIGLIB/std/target/spirv.zig	/FragmentFullyCoveredEXT/;"	field
FragmentMaskAMD	$ZIGLIB/std/target/spirv.zig	/FragmentMaskAMD/;"	field
FragmentShaderPixelInterlockEXT	$ZIGLIB/std/target/spirv.zig	/FragmentShaderPixelInterlockEXT/;"	field
FragmentShaderSampleInterlockEXT	$ZIGLIB/std/target/spirv.zig	/FragmentShaderSampleInterlockEXT/;"	field
FragmentShaderShadingRateInterlockEXT	$ZIGLIB/std/target/spirv.zig	/FragmentShaderShadingRateInterlockEXT/;"	field
FragmentShadingRateKHR	$ZIGLIB/std/target/spirv.zig	/FragmentShadingRateKHR/;"	field
Frame	$ZIGLIB/std/pdb.zig	/Frame: u16/;"	field
FrameData	$ZIGLIB/std/pdb.zig	/FrameData = 0xf5/;"	field
FrameSize	$ZIGLIB/std/os/windows.zig	/FrameSize: u9/;"	field
FrameworkLinkInfo	$ZIGLIB/std/Build/CompileStep.zig	/^const FrameworkLinkInfo = struct {$/;"	struct
FreeBlock	$ZIGLIB/std/heap/WasmPageAllocator.zig	/^const FreeBlock = struct {$/;"	struct
FreeBlockMapBlock	$ZIGLIB/std/pdb.zig	/FreeBlockMapBlock: u32/;"	field
FreeEnvironmentStringsW	$ZIGLIB/std/os/windows.zig	/^pub fn FreeEnvironmentStringsW(penv: [*:0]u16) void {$/;"	function
FreeLibrary	$ZIGLIB/std/os/windows.zig	/^pub fn FreeLibrary(hModule: HMODULE) void {$/;"	function
FreebsdImpl	$ZIGLIB/std/Thread/Futex.zig	/^const FreebsdImpl = struct {$/;"	struct
FreelikeBlock	$ZIGLIB/std/valgrind.zig	/FreelikeBlock = 4866/;"	field
Frexp	$ZIGLIB/std/math/frexp.zig	/^pub fn Frexp(comptime T: type) type {$/;"	function
Fujitsu	$ZIGLIB/std/zig/system/arm.zig	/const Fujitsu = [_]E{$/;"	constant
FullDllName	$ZIGLIB/std/os/windows.zig	/FullDllName: UNICODE_STRING/;"	field
Func	$ZIGLIB/std/wasm.zig	/^pub const Func = struct {$/;"	struct
FuncLinkage	$ZIGLIB/std/os/linux/bpf/btf.zig	/^pub const FuncLinkage = enum {$/;"	enum
FuncMDTokenMap	$ZIGLIB/std/pdb.zig	/FuncMDTokenMap = 0xfa/;"	field
FunctionDefinition	$ZIGLIB/std/coff.zig	/^pub const FunctionDefinition = struct {$/;"	struct
FunctionEntry	$ZIGLIB/std/os/windows.zig	/FunctionEntry: *Self.RUNTIME_FUNCTION/;"	field
FunctionFloatControlINTEL	$ZIGLIB/std/target/spirv.zig	/FunctionFloatControlINTEL/;"	field
FunctionLength	$ZIGLIB/std/os/windows.zig	/FunctionLength: u11/;"	field
FunctionPointersINTEL	$ZIGLIB/std/target/spirv.zig	/FunctionPointersINTEL/;"	field
FunctionType	$ZIGLIB/std/pdb.zig	/FunctionType: TypeIndex/;"	field
Futex	$ZIGLIB/std/Thread/Futex.zig	/^const Futex = @This()/;"	constant
FutexImpl	$ZIGLIB/std/Thread/ResetEvent.zig	/^const FutexImpl = struct {$/;"	struct
FutimensError	$ZIGLIB/std/os.zig	/^pub const FutimensError = error{$/;"	constant
Future	$ZIGLIB/std/event/future.zig	/^pub fn Future(comptime T: type) type {$/;"	function
GAI_STRERROR_BUFFER_SIZE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const GAI_STRERROR_BUFFER_SIZE = 1024/;"	constant
GALICIAN	$ZIGLIB/std/os/windows/lang.zig	/^pub const GALICIAN = 0x56/;"	constant
GALICIAN_GALICIAN	$ZIGLIB/std/os/windows/sublang.zig	/^pub const GALICIAN_GALICIAN = 0x01/;"	constant
GENERIC	$ZIGLIB/std/os/linux.zig	/pub const GENERIC = 16/;"	constant
GENERIC_ALL	$ZIGLIB/std/os/windows.zig	/^pub const GENERIC_ALL = 0x10000000/;"	constant
GENERIC_COMMAND_FAILED	$ZIGLIB/std/os/windows/ntstatus.zig	/GENERIC_COMMAND_FAILED = 0xC0150026/;"	field
GENERIC_EXECUTE	$ZIGLIB/std/os/windows.zig	/^pub const GENERIC_EXECUTE = 0x20000000/;"	constant
GENERIC_NOT_MAPPED	$ZIGLIB/std/os/windows/win32error.zig	/GENERIC_NOT_MAPPED = 1360/;"	field
GENERIC_PASSWORD	$ZIGLIB/std/os/darwin/cssm.zig	/GENERIC_PASSWORD = DB_RECORDTYPE_APP_DEFINED_START + 0/;"	field
GENERIC_READ	$ZIGLIB/std/os/windows.zig	/^pub const GENERIC_READ = 0x80000000/;"	constant
GENERIC_WRITE	$ZIGLIB/std/os/windows.zig	/^pub const GENERIC_WRITE = 0x40000000/;"	constant
GEN_FAILURE	$ZIGLIB/std/os/windows/win32error.zig	/GEN_FAILURE = 31/;"	field
GEORGIAN	$ZIGLIB/std/os/windows/lang.zig	/^pub const GEORGIAN = 0x37/;"	constant
GEORGIAN_GEORGIA	$ZIGLIB/std/os/windows/sublang.zig	/^pub const GEORGIAN_GEORGIA = 0x01/;"	constant
GERMAN	$ZIGLIB/std/os/windows/sublang.zig	/^pub const GERMAN = 0x01/;"	constant
GERMAN_AUSTRIAN	$ZIGLIB/std/os/windows/sublang.zig	/^pub const GERMAN_AUSTRIAN = 0x03/;"	constant
GERMAN_LIECHTENSTEIN	$ZIGLIB/std/os/windows/sublang.zig	/^pub const GERMAN_LIECHTENSTEIN = 0x05/;"	constant
GERMAN_LUXEMBOURG	$ZIGLIB/std/os/windows/sublang.zig	/^pub const GERMAN_LUXEMBOURG = 0x04/;"	constant
GERMAN_SWISS	$ZIGLIB/std/os/windows/sublang.zig	/^pub const GERMAN_SWISS = 0x02/;"	constant
GETCODEDIR	$ZIGLIB/std/c/darwin.zig	/pub const GETCODEDIR = 72/;"	constant
GETCONTEXT	$ZIGLIB/std/c/solaris.zig	/^pub const GETCONTEXT = 0/;"	constant
GETCPU_SYM	$ZIGLIB/std/os/linux/x86_64.zig	/pub const GETCPU_SYM = "__vdso_getcpu"/;"	constant
GETCPU_VER	$ZIGLIB/std/os/linux/x86_64.zig	/pub const GETCPU_VER = "LINUX_2.6"/;"	constant
GETFD	$ZIGLIB/std/os/linux/x86_64.zig	/pub const GETFD = 1/;"	constant
GETFL	$ZIGLIB/std/os/linux/x86_64.zig	/pub const GETFL = 3/;"	constant
GETLK	$ZIGLIB/std/os/linux/x86_64.zig	/pub const GETLK = 5/;"	constant
GETLKPID	$ZIGLIB/std/c/darwin.zig	/pub const GETLKPID = 66/;"	constant
GETNOSIGPIPE	$ZIGLIB/std/c/netbsd.zig	/pub const GETNOSIGPIPE = 13/;"	constant
GETOWN	$ZIGLIB/std/os/linux/x86_64.zig	/pub const GETOWN = 9/;"	constant
GETOWNER_UIDS	$ZIGLIB/std/os/linux/x86_64.zig	/pub const GETOWNER_UIDS = 17/;"	constant
GETOWN_EX	$ZIGLIB/std/os/linux/x86_64.zig	/pub const GETOWN_EX = 16/;"	constant
GETPATH	$ZIGLIB/std/c/netbsd.zig	/pub const GETPATH = 15/;"	constant
GETPATH_MTMINFO	$ZIGLIB/std/c/darwin.zig	/pub const GETPATH_MTMINFO = 71/;"	constant
GETPROTECTIONCLASS	$ZIGLIB/std/c/darwin.zig	/pub const GETPROTECTIONCLASS = 63/;"	constant
GETPROTECTIONLEVEL	$ZIGLIB/std/c/darwin.zig	/pub const GETPROTECTIONLEVEL = 77/;"	constant
GETSIG	$ZIGLIB/std/os/linux/x86_64.zig	/pub const GETSIG = 11/;"	constant
GETUSTACK	$ZIGLIB/std/c/solaris.zig	/^pub const GETUSTACK = 2/;"	constant
GETXFL	$ZIGLIB/std/c/solaris.zig	/pub const GETXFL = 45/;"	constant
GET_ACTION_AVAIL	$ZIGLIB/std/os/linux/seccomp.zig	/^pub const GET_ACTION_AVAIL = 2/;"	constant
GET_CHILD_SUBREAPER	$ZIGLIB/std/os/linux.zig	/GET_CHILD_SUBREAPER = 37/;"	field
GET_DUMPABLE	$ZIGLIB/std/os/linux.zig	/GET_DUMPABLE = 3/;"	field
GET_ENDIAN	$ZIGLIB/std/os/linux.zig	/GET_ENDIAN = 19/;"	field
GET_FILTER	$ZIGLIB/std/os/linux.zig	/pub const GET_FILTER = ATTACH_FILTER/;"	constant
GET_FPEMU	$ZIGLIB/std/os/linux.zig	/GET_FPEMU = 9/;"	field
GET_FPEXC	$ZIGLIB/std/os/linux.zig	/GET_FPEXC = 11/;"	field
GET_FP_MODE	$ZIGLIB/std/os/linux.zig	/GET_FP_MODE = 46/;"	field
GET_FS	$ZIGLIB/std/os/linux/x86_64.zig	/pub const GET_FS = 0x1003/;"	constant
GET_GS	$ZIGLIB/std/os/linux/x86_64.zig	/pub const GET_GS = 0x1004/;"	constant
GET_KEEPCAPS	$ZIGLIB/std/os/linux.zig	/GET_KEEPCAPS = 7/;"	field
GET_NAME	$ZIGLIB/std/os/linux.zig	/GET_NAME = 16/;"	field
GET_NOTIF_SIZES	$ZIGLIB/std/os/linux/seccomp.zig	/^pub const GET_NOTIF_SIZES = 3/;"	constant
GET_NO_NEW_PRIVS	$ZIGLIB/std/os/linux.zig	/GET_NO_NEW_PRIVS = 39/;"	field
GET_PDEATHSIG	$ZIGLIB/std/os/linux.zig	/GET_PDEATHSIG = 2/;"	field
GET_SEALS	$ZIGLIB/std/c/freebsd.zig	/pub const GET_SEALS = 20/;"	constant
GET_SECCOMP	$ZIGLIB/std/os/linux.zig	/GET_SECCOMP = 21/;"	field
GET_SECUREBITS	$ZIGLIB/std/os/linux.zig	/GET_SECUREBITS = 27/;"	field
GET_SPECULATION_CTRL	$ZIGLIB/std/os/linux.zig	/GET_SPECULATION_CTRL = 52/;"	field
GET_THP_DISABLE	$ZIGLIB/std/os/linux.zig	/GET_THP_DISABLE = 42/;"	field
GET_TID_ADDRESS	$ZIGLIB/std/os/linux.zig	/GET_TID_ADDRESS = 40/;"	field
GET_TIMERSLACK	$ZIGLIB/std/os/linux.zig	/GET_TIMERSLACK = 30/;"	field
GET_TIMING	$ZIGLIB/std/os/linux.zig	/GET_TIMING = 13/;"	field
GET_TSC	$ZIGLIB/std/os/linux.zig	/GET_TSC = 25/;"	field
GET_UNALIGN	$ZIGLIB/std/os/linux.zig	/GET_UNALIGN = 5/;"	field
GLOBAL	$ZIGLIB/std/c/solaris.zig	/pub const GLOBAL = 0x00100/;"	constant
GLOBALPTR	$ZIGLIB/std/coff.zig	/GLOBALPTR = 8/;"	field
GLOBAL_NOCACHE	$ZIGLIB/std/c/darwin.zig	/pub const GLOBAL_NOCACHE = 55/;"	constant
GLOBAL_ONLY_HOOK	$ZIGLIB/std/os/windows/win32error.zig	/GLOBAL_ONLY_HOOK = 1429/;"	field
GLOBAL_PTRACE	$ZIGLIB/std/c/openbsd.zig	/pub const GLOBAL_PTRACE = 81/;"	constant
GMTP	$ZIGLIB/std/c/freebsd.zig	/pub const GMTP = 100/;"	constant
GNAT_descriptive_type	$ZIGLIB/std/dwarf/AT.zig	/^pub const GNAT_descriptive_type = 0x2302/;"	constant
GNU_BINCL	$ZIGLIB/std/dwarf/TAG.zig	/^pub const GNU_BINCL = 0x4104/;"	constant
GNU_EINCL	$ZIGLIB/std/dwarf/TAG.zig	/^pub const GNU_EINCL = 0x4105/;"	constant
GNU_addr_base	$ZIGLIB/std/dwarf/AT.zig	/^pub const GNU_addr_base = 0x2133/;"	constant
GNU_addr_index	$ZIGLIB/std/dwarf/OP.zig	/^pub const GNU_addr_index = 0xfb/;"	constant
GNU_all_call_sites	$ZIGLIB/std/dwarf/AT.zig	/^pub const GNU_all_call_sites = 0x2117/;"	constant
GNU_all_source_call_sites	$ZIGLIB/std/dwarf/AT.zig	/^pub const GNU_all_source_call_sites = 0x2118/;"	constant
GNU_all_tail_call_sites	$ZIGLIB/std/dwarf/AT.zig	/^pub const GNU_all_tail_call_sites = 0x2116/;"	constant
GNU_args_size	$ZIGLIB/std/dwarf.zig	/pub const GNU_args_size = 0x2e/;"	constant
GNU_borland_fastcall_i386	$ZIGLIB/std/dwarf.zig	/GNU_borland_fastcall_i386 = 0x41/;"	field
GNU_call_site	$ZIGLIB/std/dwarf/TAG.zig	/^pub const GNU_call_site = 0x4109/;"	constant
GNU_call_site_data_value	$ZIGLIB/std/dwarf/AT.zig	/^pub const GNU_call_site_data_value = 0x2112/;"	constant
GNU_call_site_parameter	$ZIGLIB/std/dwarf/TAG.zig	/^pub const GNU_call_site_parameter = 0x410a/;"	constant
GNU_call_site_target	$ZIGLIB/std/dwarf/AT.zig	/^pub const GNU_call_site_target = 0x2113/;"	constant
GNU_call_site_target_clobbered	$ZIGLIB/std/dwarf/AT.zig	/^pub const GNU_call_site_target_clobbered = 0x2114/;"	constant
GNU_call_site_value	$ZIGLIB/std/dwarf/AT.zig	/^pub const GNU_call_site_value = 0x2111/;"	constant
GNU_const_index	$ZIGLIB/std/dwarf/OP.zig	/^pub const GNU_const_index = 0xfc/;"	constant
GNU_const_type	$ZIGLIB/std/dwarf/OP.zig	/^pub const GNU_const_type = 0xf4/;"	constant
GNU_convert	$ZIGLIB/std/dwarf/OP.zig	/^pub const GNU_convert = 0xf7/;"	constant
GNU_deref_type	$ZIGLIB/std/dwarf/OP.zig	/^pub const GNU_deref_type = 0xf6/;"	constant
GNU_dwo_id	$ZIGLIB/std/dwarf/AT.zig	/^pub const GNU_dwo_id = 0x2131/;"	constant
GNU_dwo_name	$ZIGLIB/std/dwarf/AT.zig	/^pub const GNU_dwo_name = 0x2130/;"	constant
GNU_encoded_addr	$ZIGLIB/std/dwarf/OP.zig	/^pub const GNU_encoded_addr = 0xf1/;"	constant
GNU_entry_value	$ZIGLIB/std/dwarf/OP.zig	/^pub const GNU_entry_value = 0xf3/;"	constant
GNU_exclusive_locks_required	$ZIGLIB/std/dwarf/AT.zig	/^pub const GNU_exclusive_locks_required = 0x210d/;"	constant
GNU_formal_parameter_pack	$ZIGLIB/std/dwarf/TAG.zig	/^pub const GNU_formal_parameter_pack = 0x4108/;"	constant
GNU_guarded	$ZIGLIB/std/dwarf/AT.zig	/^pub const GNU_guarded = 0x210a/;"	constant
GNU_guarded_by	$ZIGLIB/std/dwarf/AT.zig	/^pub const GNU_guarded_by = 0x2108/;"	constant
GNU_implicit_pointer	$ZIGLIB/std/dwarf/OP.zig	/^pub const GNU_implicit_pointer = 0xf2/;"	constant
GNU_locks_excluded	$ZIGLIB/std/dwarf/AT.zig	/^pub const GNU_locks_excluded = 0x210c/;"	constant
GNU_macros	$ZIGLIB/std/dwarf/AT.zig	/^pub const GNU_macros = 0x2119/;"	constant
GNU_negative_offset_extended	$ZIGLIB/std/dwarf.zig	/pub const GNU_negative_offset_extended = 0x2f/;"	constant
GNU_odr_signature	$ZIGLIB/std/dwarf/AT.zig	/^pub const GNU_odr_signature = 0x210f/;"	constant
GNU_parameter_ref	$ZIGLIB/std/dwarf/OP.zig	/^pub const GNU_parameter_ref = 0xfa/;"	constant
GNU_pt_guarded	$ZIGLIB/std/dwarf/AT.zig	/^pub const GNU_pt_guarded = 0x210b/;"	constant
GNU_pt_guarded_by	$ZIGLIB/std/dwarf/AT.zig	/^pub const GNU_pt_guarded_by = 0x2109/;"	constant
GNU_pubnames	$ZIGLIB/std/dwarf/AT.zig	/^pub const GNU_pubnames = 0x2134/;"	constant
GNU_pubtypes	$ZIGLIB/std/dwarf/AT.zig	/^pub const GNU_pubtypes = 0x2135/;"	constant
GNU_push_tls_address	$ZIGLIB/std/dwarf/OP.zig	/^pub const GNU_push_tls_address = 0xe0/;"	constant
GNU_ranges_base	$ZIGLIB/std/dwarf/AT.zig	/^pub const GNU_ranges_base = 0x2132/;"	constant
GNU_ref_alt	$ZIGLIB/std/dwarf/FORM.zig	/^pub const GNU_ref_alt = 0x1f20/;"	constant
GNU_regval_type	$ZIGLIB/std/dwarf/OP.zig	/^pub const GNU_regval_type = 0xf5/;"	constant
GNU_reinterpret	$ZIGLIB/std/dwarf/OP.zig	/^pub const GNU_reinterpret = 0xf9/;"	constant
GNU_renesas_sh	$ZIGLIB/std/dwarf.zig	/GNU_renesas_sh = 0x40/;"	field
GNU_shared_locks_required	$ZIGLIB/std/dwarf/AT.zig	/^pub const GNU_shared_locks_required = 0x210e/;"	constant
GNU_str_index	$ZIGLIB/std/dwarf/FORM.zig	/^pub const GNU_str_index = 0x1f02/;"	constant
GNU_strp_alt	$ZIGLIB/std/dwarf/FORM.zig	/^pub const GNU_strp_alt = 0x1f21/;"	constant
GNU_tail_call	$ZIGLIB/std/dwarf/AT.zig	/^pub const GNU_tail_call = 0x2115/;"	constant
GNU_template_name	$ZIGLIB/std/dwarf/AT.zig	/^pub const GNU_template_name = 0x2110/;"	constant
GNU_template_parameter_pack	$ZIGLIB/std/dwarf/TAG.zig	/^pub const GNU_template_parameter_pack = 0x4107/;"	constant
GNU_template_template_param	$ZIGLIB/std/dwarf/TAG.zig	/^pub const GNU_template_template_param = 0x4106/;"	constant
GNU_uninit	$ZIGLIB/std/dwarf/OP.zig	/^pub const GNU_uninit = 0xf0/;"	constant
GNU_vector	$ZIGLIB/std/dwarf/AT.zig	/^pub const GNU_vector = 0x2107/;"	constant
GNU_window_save	$ZIGLIB/std/dwarf.zig	/pub const GNU_window_save = 0x2d/;"	constant
GOSIP	$ZIGLIB/std/c/solaris.zig	/pub const GOSIP = 22/;"	constant
GPREL	$ZIGLIB/std/coff.zig	/GPREL: u1 = 0/;"	field
GRACEFUL_DISCONNECT	$ZIGLIB/std/os/windows/win32error.zig	/GRACEFUL_DISCONNECT = 1226/;"	field
GRAPHICS_ADAPTER_ACCESS_NOT_EXCLUDED	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_ADAPTER_ACCESS_NOT_EXCLUDED = 0xC01E043B/;"	field
GRAPHICS_ADAPTER_CHAIN_NOT_READY	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_ADAPTER_CHAIN_NOT_READY = 0xC01E0433/;"	field
GRAPHICS_ADAPTER_MUST_HAVE_AT_LEAST_ONE_SOURCE	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_ADAPTER_MUST_HAVE_AT_LEAST_ONE_SOURCE = 0xC01E0328/;"	field
GRAPHICS_ADAPTER_MUST_HAVE_AT_LEAST_ONE_TARGET	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_ADAPTER_MUST_HAVE_AT_LEAST_ONE_TARGET = 0xC01E0329/;"	field
GRAPHICS_ADAPTER_WAS_RESET	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_ADAPTER_WAS_RESET = 0xC01E0003/;"	field
GRAPHICS_ALLOCATION_BUSY	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_ALLOCATION_BUSY = 0xC01E0102/;"	field
GRAPHICS_ALLOCATION_CLOSED	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_ALLOCATION_CLOSED = 0xC01E0112/;"	field
GRAPHICS_ALLOCATION_CONTENT_LOST	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_ALLOCATION_CONTENT_LOST = 0xC01E0116/;"	field
GRAPHICS_ALLOCATION_INVALID	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_ALLOCATION_INVALID = 0xC01E0106/;"	field
GRAPHICS_CANCEL_VIDPN_TOPOLOGY_AUGMENTATION	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_CANCEL_VIDPN_TOPOLOGY_AUGMENTATION = 0xC01E035A/;"	field
GRAPHICS_CANNOTCOLORCONVERT	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_CANNOTCOLORCONVERT = 0xC01E0008/;"	field
GRAPHICS_CANT_ACCESS_ACTIVE_VIDPN	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_CANT_ACCESS_ACTIVE_VIDPN = 0xC01E0343/;"	field
GRAPHICS_CANT_EVICT_PINNED_ALLOCATION	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_CANT_EVICT_PINNED_ALLOCATION = 0xC01E0109/;"	field
GRAPHICS_CANT_LOCK_MEMORY	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_CANT_LOCK_MEMORY = 0xC01E0101/;"	field
GRAPHICS_CANT_RENDER_LOCKED_ALLOCATION	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_CANT_RENDER_LOCKED_ALLOCATION = 0xC01E0111/;"	field
GRAPHICS_CHAINLINKS_NOT_ENUMERATED	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_CHAINLINKS_NOT_ENUMERATED = 0xC01E0432/;"	field
GRAPHICS_CHAINLINKS_NOT_POWERED_ON	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_CHAINLINKS_NOT_POWERED_ON = 0xC01E0435/;"	field
GRAPHICS_CHAINLINKS_NOT_STARTED	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_CHAINLINKS_NOT_STARTED = 0xC01E0434/;"	field
GRAPHICS_CHILD_DESCRIPTOR_NOT_SUPPORTED	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_CHILD_DESCRIPTOR_NOT_SUPPORTED = 0xC01E0401/;"	field
GRAPHICS_CLIENTVIDPN_NOT_SET	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_CLIENTVIDPN_NOT_SET = 0xC01E035C/;"	field
GRAPHICS_COPP_NOT_SUPPORTED	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_COPP_NOT_SUPPORTED = 0xC01E0501/;"	field
GRAPHICS_DATASET_IS_EMPTY	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_DATASET_IS_EMPTY = 0x401E034B/;"	field
GRAPHICS_DDCCI_INVALID_CAPABILITIES_STRING	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_DDCCI_INVALID_CAPABILITIES_STRING = 0xC01E0587/;"	field
GRAPHICS_DDCCI_INVALID_DATA	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_DDCCI_INVALID_DATA = 0xC01E0585/;"	field
GRAPHICS_DDCCI_INVALID_MESSAGE_CHECKSUM	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_DDCCI_INVALID_MESSAGE_CHECKSUM = 0xC01E058B/;"	field
GRAPHICS_DDCCI_INVALID_MESSAGE_COMMAND	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_DDCCI_INVALID_MESSAGE_COMMAND = 0xC01E0589/;"	field
GRAPHICS_DDCCI_INVALID_MESSAGE_LENGTH	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_DDCCI_INVALID_MESSAGE_LENGTH = 0xC01E058A/;"	field
GRAPHICS_DDCCI_MONITOR_RETURNED_INVALID_TIMING_STATUS_BYTE	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_DDCCI_MONITOR_RETURNED_INVALID_TIMING_STATUS_BYTE = 0xC01E0586/;"	field
GRAPHICS_DDCCI_VCP_NOT_SUPPORTED	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_DDCCI_VCP_NOT_SUPPORTED = 0xC01E0584/;"	field
GRAPHICS_DISPLAY_DEVICE_NOT_ATTACHED_TO_DESKTOP	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_DISPLAY_DEVICE_NOT_ATTACHED_TO_DESKTOP = 0xC01E05E2/;"	field
GRAPHICS_DRIVER_MISMATCH	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_DRIVER_MISMATCH = 0x401E0117/;"	field
GRAPHICS_EMPTY_ADAPTER_MONITOR_MODE_SUPPORT_INTERSECTION	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_EMPTY_ADAPTER_MONITOR_MODE_SUPPORT_INTERSECTION = 0xC01E0325/;"	field
GRAPHICS_FREQUENCYRANGE_ALREADY_IN_SET	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_FREQUENCYRANGE_ALREADY_IN_SET = 0xC01E031F/;"	field
GRAPHICS_FREQUENCYRANGE_NOT_IN_SET	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_FREQUENCYRANGE_NOT_IN_SET = 0xC01E031D/;"	field
GRAPHICS_GAMMA_RAMP_NOT_SUPPORTED	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_GAMMA_RAMP_NOT_SUPPORTED = 0xC01E0348/;"	field
GRAPHICS_GPU_EXCEPTION_ON_DEVICE	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_GPU_EXCEPTION_ON_DEVICE = 0xC01E0200/;"	field
GRAPHICS_I2C_DEVICE_DOES_NOT_EXIST	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_I2C_DEVICE_DOES_NOT_EXIST = 0xC01E0581/;"	field
GRAPHICS_I2C_ERROR_RECEIVING_DATA	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_I2C_ERROR_RECEIVING_DATA = 0xC01E0583/;"	field
GRAPHICS_I2C_ERROR_TRANSMITTING_DATA	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_I2C_ERROR_TRANSMITTING_DATA = 0xC01E0582/;"	field
GRAPHICS_I2C_NOT_SUPPORTED	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_I2C_NOT_SUPPORTED = 0xC01E0580/;"	field
GRAPHICS_INCOMPATIBLE_PRIVATE_FORMAT	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_INCOMPATIBLE_PRIVATE_FORMAT = 0xC01E0355/;"	field
GRAPHICS_INCONSISTENT_DEVICE_LINK_STATE	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_INCONSISTENT_DEVICE_LINK_STATE = 0xC01E0436/;"	field
GRAPHICS_INSUFFICIENT_DMA_BUFFER	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_INSUFFICIENT_DMA_BUFFER = 0xC01E0001/;"	field
GRAPHICS_INTERNAL_ERROR	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_INTERNAL_ERROR = 0xC01E05E7/;"	field
GRAPHICS_INVALID_ACTIVE_REGION	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_INVALID_ACTIVE_REGION = 0xC01E030B/;"	field
GRAPHICS_INVALID_ALLOCATION_HANDLE	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_INVALID_ALLOCATION_HANDLE = 0xC01E0114/;"	field
GRAPHICS_INVALID_ALLOCATION_INSTANCE	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_INVALID_ALLOCATION_INSTANCE = 0xC01E0113/;"	field
GRAPHICS_INVALID_ALLOCATION_USAGE	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_INVALID_ALLOCATION_USAGE = 0xC01E0110/;"	field
GRAPHICS_INVALID_CLIENT_TYPE	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_INVALID_CLIENT_TYPE = 0xC01E035B/;"	field
GRAPHICS_INVALID_COLORBASIS	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_INVALID_COLORBASIS = 0xC01E033E/;"	field
GRAPHICS_INVALID_COPYPROTECTION_TYPE	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_INVALID_COPYPROTECTION_TYPE = 0xC01E034F/;"	field
GRAPHICS_INVALID_DISPLAY_ADAPTER	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_INVALID_DISPLAY_ADAPTER = 0xC01E0002/;"	field
GRAPHICS_INVALID_DRIVER_MODEL	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_INVALID_DRIVER_MODEL = 0xC01E0004/;"	field
GRAPHICS_INVALID_FREQUENCY	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_INVALID_FREQUENCY = 0xC01E030A/;"	field
GRAPHICS_INVALID_GAMMA_RAMP	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_INVALID_GAMMA_RAMP = 0xC01E0347/;"	field
GRAPHICS_INVALID_MODE_PRUNING_ALGORITHM	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_INVALID_MODE_PRUNING_ALGORITHM = 0xC01E0356/;"	field
GRAPHICS_INVALID_MONITORDESCRIPTOR	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_INVALID_MONITORDESCRIPTOR = 0xC01E032B/;"	field
GRAPHICS_INVALID_MONITORDESCRIPTORSET	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_INVALID_MONITORDESCRIPTORSET = 0xC01E032A/;"	field
GRAPHICS_INVALID_MONITOR_CAPABILITY_ORIGIN	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_INVALID_MONITOR_CAPABILITY_ORIGIN = 0xC01E0357/;"	field
GRAPHICS_INVALID_MONITOR_FREQUENCYRANGE	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_INVALID_MONITOR_FREQUENCYRANGE = 0xC01E031C/;"	field
GRAPHICS_INVALID_MONITOR_FREQUENCYRANGESET	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_INVALID_MONITOR_FREQUENCYRANGESET = 0xC01E031B/;"	field
GRAPHICS_INVALID_MONITOR_FREQUENCYRANGE_CONSTRAINT	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_INVALID_MONITOR_FREQUENCYRANGE_CONSTRAINT = 0xC01E0358/;"	field
GRAPHICS_INVALID_MONITOR_SOURCEMODESET	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_INVALID_MONITOR_SOURCEMODESET = 0xC01E0321/;"	field
GRAPHICS_INVALID_MONITOR_SOURCE_MODE	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_INVALID_MONITOR_SOURCE_MODE = 0xC01E0322/;"	field
GRAPHICS_INVALID_PATH_CONTENT_GEOMETRY_TRANSFORMATION	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_INVALID_PATH_CONTENT_GEOMETRY_TRANSFORMATION = 0xC01E0345/;"	field
GRAPHICS_INVALID_PATH_CONTENT_TYPE	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_INVALID_PATH_CONTENT_TYPE = 0xC01E034E/;"	field
GRAPHICS_INVALID_PATH_IMPORTANCE_ORDINAL	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_INVALID_PATH_IMPORTANCE_ORDINAL = 0xC01E0344/;"	field
GRAPHICS_INVALID_PHYSICAL_MONITOR_HANDLE	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_INVALID_PHYSICAL_MONITOR_HANDLE = 0xC01E058C/;"	field
GRAPHICS_INVALID_PIXELFORMAT	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_INVALID_PIXELFORMAT = 0xC01E033D/;"	field
GRAPHICS_INVALID_PIXELVALUEACCESSMODE	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_INVALID_PIXELVALUEACCESSMODE = 0xC01E033F/;"	field
GRAPHICS_INVALID_POINTER	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_INVALID_POINTER = 0xC01E05E4/;"	field
GRAPHICS_INVALID_PRIMARYSURFACE_SIZE	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_INVALID_PRIMARYSURFACE_SIZE = 0xC01E033A/;"	field
GRAPHICS_INVALID_SCANLINE_ORDERING	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_INVALID_SCANLINE_ORDERING = 0xC01E0352/;"	field
GRAPHICS_INVALID_STRIDE	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_INVALID_STRIDE = 0xC01E033C/;"	field
GRAPHICS_INVALID_TOTAL_REGION	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_INVALID_TOTAL_REGION = 0xC01E030C/;"	field
GRAPHICS_INVALID_VIDEOPRESENTSOURCESET	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_INVALID_VIDEOPRESENTSOURCESET = 0xC01E0315/;"	field
GRAPHICS_INVALID_VIDEOPRESENTTARGETSET	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_INVALID_VIDEOPRESENTTARGETSET = 0xC01E0316/;"	field
GRAPHICS_INVALID_VIDEO_PRESENT_SOURCE	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_INVALID_VIDEO_PRESENT_SOURCE = 0xC01E0304/;"	field
GRAPHICS_INVALID_VIDEO_PRESENT_SOURCE_MODE	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_INVALID_VIDEO_PRESENT_SOURCE_MODE = 0xC01E0310/;"	field
GRAPHICS_INVALID_VIDEO_PRESENT_TARGET	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_INVALID_VIDEO_PRESENT_TARGET = 0xC01E0305/;"	field
GRAPHICS_INVALID_VIDEO_PRESENT_TARGET_MODE	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_INVALID_VIDEO_PRESENT_TARGET_MODE = 0xC01E0311/;"	field
GRAPHICS_INVALID_VIDPN	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_INVALID_VIDPN = 0xC01E0303/;"	field
GRAPHICS_INVALID_VIDPN_PRESENT_PATH	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_INVALID_VIDPN_PRESENT_PATH = 0xC01E0319/;"	field
GRAPHICS_INVALID_VIDPN_SOURCEMODESET	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_INVALID_VIDPN_SOURCEMODESET = 0xC01E0308/;"	field
GRAPHICS_INVALID_VIDPN_TARGETMODESET	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_INVALID_VIDPN_TARGETMODESET = 0xC01E0309/;"	field
GRAPHICS_INVALID_VIDPN_TARGET_SUBSET_TYPE	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_INVALID_VIDPN_TARGET_SUBSET_TYPE = 0xC01E032F/;"	field
GRAPHICS_INVALID_VIDPN_TOPOLOGY	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_INVALID_VIDPN_TOPOLOGY = 0xC01E0300/;"	field
GRAPHICS_INVALID_VIDPN_TOPOLOGY_RECOMMENDATION_REASON	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_INVALID_VIDPN_TOPOLOGY_RECOMMENDATION_REASON = 0xC01E034D/;"	field
GRAPHICS_INVALID_VISIBLEREGION_SIZE	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_INVALID_VISIBLEREGION_SIZE = 0xC01E033B/;"	field
GRAPHICS_LEADLINK_NOT_ENUMERATED	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_LEADLINK_NOT_ENUMERATED = 0xC01E0431/;"	field
GRAPHICS_LEADLINK_START_DEFERRED	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_LEADLINK_START_DEFERRED = 0x401E0437/;"	field
GRAPHICS_MAX_NUM_PATHS_REACHED	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_MAX_NUM_PATHS_REACHED = 0xC01E0359/;"	field
GRAPHICS_MCA_INTERNAL_ERROR	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_MCA_INTERNAL_ERROR = 0xC01E0588/;"	field
GRAPHICS_MIRRORING_DEVICES_NOT_SUPPORTED	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_MIRRORING_DEVICES_NOT_SUPPORTED = 0xC01E05E3/;"	field
GRAPHICS_MODE_ALREADY_IN_MODESET	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_MODE_ALREADY_IN_MODESET = 0xC01E0314/;"	field
GRAPHICS_MODE_ID_MUST_BE_UNIQUE	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_MODE_ID_MUST_BE_UNIQUE = 0xC01E0324/;"	field
GRAPHICS_MODE_NOT_IN_MODESET	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_MODE_NOT_IN_MODESET = 0xC01E034A/;"	field
GRAPHICS_MODE_NOT_PINNED	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_MODE_NOT_PINNED = 0x401E0307/;"	field
GRAPHICS_MONITORDESCRIPTOR_ALREADY_IN_SET	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_MONITORDESCRIPTOR_ALREADY_IN_SET = 0xC01E032D/;"	field
GRAPHICS_MONITORDESCRIPTOR_ID_MUST_BE_UNIQUE	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_MONITORDESCRIPTOR_ID_MUST_BE_UNIQUE = 0xC01E032E/;"	field
GRAPHICS_MONITORDESCRIPTOR_NOT_IN_SET	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_MONITORDESCRIPTOR_NOT_IN_SET = 0xC01E032C/;"	field
GRAPHICS_MONITOR_COULD_NOT_BE_ASSOCIATED_WITH_ADAPTER	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_MONITOR_COULD_NOT_BE_ASSOCIATED_WITH_ADAPTER = 0xC01E0334/;"	field
GRAPHICS_MONITOR_NOT_CONNECTED	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_MONITOR_NOT_CONNECTED = 0xC01E0338/;"	field
GRAPHICS_MONITOR_NO_LONGER_EXISTS	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_MONITOR_NO_LONGER_EXISTS = 0xC01E058D/;"	field
GRAPHICS_MULTISAMPLING_NOT_SUPPORTED	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_MULTISAMPLING_NOT_SUPPORTED = 0xC01E0349/;"	field
GRAPHICS_NOT_A_LINKED_ADAPTER	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_NOT_A_LINKED_ADAPTER = 0xC01E0430/;"	field
GRAPHICS_NOT_EXCLUSIVE_MODE_OWNER	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_NOT_EXCLUSIVE_MODE_OWNER = 0xC01E0000/;"	field
GRAPHICS_NOT_POST_DEVICE_DRIVER	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_NOT_POST_DEVICE_DRIVER = 0xC01E0438/;"	field
GRAPHICS_NO_ACTIVE_VIDPN	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_NO_ACTIVE_VIDPN = 0xC01E0336/;"	field
GRAPHICS_NO_AVAILABLE_IMPORTANCE_ORDINALS	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_NO_AVAILABLE_IMPORTANCE_ORDINALS = 0xC01E0354/;"	field
GRAPHICS_NO_AVAILABLE_VIDPN_TARGET	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_NO_AVAILABLE_VIDPN_TARGET = 0xC01E0333/;"	field
GRAPHICS_NO_DISPLAY_DEVICE_CORRESPONDS_TO_NAME	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_NO_DISPLAY_DEVICE_CORRESPONDS_TO_NAME = 0xC01E05E1/;"	field
GRAPHICS_NO_DISPLAY_MODE_MANAGEMENT_SUPPORT	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_NO_DISPLAY_MODE_MANAGEMENT_SUPPORT = 0xC01E0341/;"	field
GRAPHICS_NO_MONITORS_CORRESPOND_TO_DISPLAY_DEVICE	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_NO_MONITORS_CORRESPOND_TO_DISPLAY_DEVICE = 0xC01E05E5/;"	field
GRAPHICS_NO_MORE_ELEMENTS_IN_DATASET	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_NO_MORE_ELEMENTS_IN_DATASET = 0x401E034C/;"	field
GRAPHICS_NO_PREFERRED_MODE	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_NO_PREFERRED_MODE = 0x401E031E/;"	field
GRAPHICS_NO_RECOMMENDED_FUNCTIONAL_VIDPN	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_NO_RECOMMENDED_FUNCTIONAL_VIDPN = 0xC01E0323/;"	field
GRAPHICS_NO_RECOMMENDED_VIDPN_TOPOLOGY	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_NO_RECOMMENDED_VIDPN_TOPOLOGY = 0xC01E031A/;"	field
GRAPHICS_NO_VIDEO_MEMORY	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_NO_VIDEO_MEMORY = 0xC01E0100/;"	field
GRAPHICS_NO_VIDPNMGR	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_NO_VIDPNMGR = 0xC01E0335/;"	field
GRAPHICS_ONLY_CONSOLE_SESSION_SUPPORTED	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_ONLY_CONSOLE_SESSION_SUPPORTED = 0xC01E05E0/;"	field
GRAPHICS_OPM_ALL_HDCP_HARDWARE_ALREADY_IN_USE	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_OPM_ALL_HDCP_HARDWARE_ALREADY_IN_USE = 0xC01E0518/;"	field
GRAPHICS_OPM_DRIVER_INTERNAL_ERROR	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_OPM_DRIVER_INTERNAL_ERROR = 0xC01E051E/;"	field
GRAPHICS_OPM_HDCP_SRM_NEVER_SET	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_OPM_HDCP_SRM_NEVER_SET = 0xC01E0516/;"	field
GRAPHICS_OPM_INTERNAL_ERROR	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_OPM_INTERNAL_ERROR = 0xC01E050B/;"	field
GRAPHICS_OPM_INVALID_CONFIGURATION_REQUEST	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_OPM_INVALID_CONFIGURATION_REQUEST = 0xC01E0521/;"	field
GRAPHICS_OPM_INVALID_ENCRYPTED_PARAMETERS	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_OPM_INVALID_ENCRYPTED_PARAMETERS = 0xC01E0503/;"	field
GRAPHICS_OPM_INVALID_HANDLE	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_OPM_INVALID_HANDLE = 0xC01E050C/;"	field
GRAPHICS_OPM_INVALID_INFORMATION_REQUEST	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_OPM_INVALID_INFORMATION_REQUEST = 0xC01E051D/;"	field
GRAPHICS_OPM_INVALID_POINTER	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_OPM_INVALID_POINTER = 0xC01E050A/;"	field
GRAPHICS_OPM_INVALID_SRM	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_OPM_INVALID_SRM = 0xC01E0512/;"	field
GRAPHICS_OPM_NOT_SUPPORTED	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_OPM_NOT_SUPPORTED = 0xC01E0500/;"	field
GRAPHICS_OPM_NO_PROTECTED_OUTPUTS_EXIST	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_OPM_NO_PROTECTED_OUTPUTS_EXIST = 0xC01E0505/;"	field
GRAPHICS_OPM_OUTPUT_DOES_NOT_SUPPORT_ACP	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_OPM_OUTPUT_DOES_NOT_SUPPORT_ACP = 0xC01E0514/;"	field
GRAPHICS_OPM_OUTPUT_DOES_NOT_SUPPORT_CGMSA	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_OPM_OUTPUT_DOES_NOT_SUPPORT_CGMSA = 0xC01E0515/;"	field
GRAPHICS_OPM_OUTPUT_DOES_NOT_SUPPORT_HDCP	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_OPM_OUTPUT_DOES_NOT_SUPPORT_HDCP = 0xC01E0513/;"	field
GRAPHICS_OPM_PARAMETER_ARRAY_TOO_SMALL	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_OPM_PARAMETER_ARRAY_TOO_SMALL = 0xC01E0504/;"	field
GRAPHICS_OPM_PROTECTED_OUTPUT_DOES_NOT_HAVE_COPP_SEMANTICS	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_OPM_PROTECTED_OUTPUT_DOES_NOT_HAVE_COPP_SEMANTICS = 0xC01E051C/;"	field
GRAPHICS_OPM_PROTECTED_OUTPUT_DOES_NOT_HAVE_OPM_SEMANTICS	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_OPM_PROTECTED_OUTPUT_DOES_NOT_HAVE_OPM_SEMANTICS = 0xC01E051F/;"	field
GRAPHICS_OPM_PROTECTED_OUTPUT_NO_LONGER_EXISTS	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_OPM_PROTECTED_OUTPUT_NO_LONGER_EXISTS = 0xC01E051A/;"	field
GRAPHICS_OPM_RESOLUTION_TOO_HIGH	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_OPM_RESOLUTION_TOO_HIGH = 0xC01E0517/;"	field
GRAPHICS_OPM_SESSION_TYPE_CHANGE_IN_PROGRESS	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_OPM_SESSION_TYPE_CHANGE_IN_PROGRESS = 0xC01E051B/;"	field
GRAPHICS_OPM_SIGNALING_NOT_SUPPORTED	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_OPM_SIGNALING_NOT_SUPPORTED = 0xC01E0520/;"	field
GRAPHICS_OPM_SPANNING_MODE_ENABLED	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_OPM_SPANNING_MODE_ENABLED = 0xC01E050F/;"	field
GRAPHICS_OPM_THEATER_MODE_ENABLED	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_OPM_THEATER_MODE_ENABLED = 0xC01E0510/;"	field
GRAPHICS_PARAMETER_ARRAY_TOO_SMALL	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_PARAMETER_ARRAY_TOO_SMALL = 0xC01E05E6/;"	field
GRAPHICS_PARTIAL_DATA_POPULATED	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_PARTIAL_DATA_POPULATED = 0x401E000A/;"	field
GRAPHICS_PATH_ALREADY_IN_TOPOLOGY	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_PATH_ALREADY_IN_TOPOLOGY = 0xC01E0313/;"	field
GRAPHICS_PATH_CONTENT_GEOMETRY_TRANSFORMATION_NOT_PINNED	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_PATH_CONTENT_GEOMETRY_TRANSFORMATION_NOT_PINNED = 0x401E0351/;"	field
GRAPHICS_PATH_CONTENT_GEOMETRY_TRANSFORMATION_NOT_SUPPORTED	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_PATH_CONTENT_GEOMETRY_TRANSFORMATION_NOT_SUPPORTED = 0xC01E0346/;"	field
GRAPHICS_PATH_NOT_IN_TOPOLOGY	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_PATH_NOT_IN_TOPOLOGY = 0xC01E0327/;"	field
GRAPHICS_PINNED_MODE_MUST_REMAIN_IN_SET	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_PINNED_MODE_MUST_REMAIN_IN_SET = 0xC01E0312/;"	field
GRAPHICS_POLLING_TOO_FREQUENTLY	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_POLLING_TOO_FREQUENTLY = 0x401E0439/;"	field
GRAPHICS_PRESENT_DENIED	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_PRESENT_DENIED = 0xC01E0007/;"	field
GRAPHICS_PRESENT_MODE_CHANGED	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_PRESENT_MODE_CHANGED = 0xC01E0005/;"	field
GRAPHICS_PRESENT_OCCLUDED	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_PRESENT_OCCLUDED = 0xC01E0006/;"	field
GRAPHICS_PRESENT_REDIRECTION_DISABLED	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_PRESENT_REDIRECTION_DISABLED = 0xC01E000B/;"	field
GRAPHICS_PRESENT_UNOCCLUDED	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_PRESENT_UNOCCLUDED = 0xC01E000C/;"	field
GRAPHICS_PVP_DISPLAY_DEVICE_NOT_ATTACHED_TO_DESKTOP	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_PVP_DISPLAY_DEVICE_NOT_ATTACHED_TO_DESKTOP = 0xC01E0507/;"	field
GRAPHICS_PVP_HFS_FAILED	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_PVP_HFS_FAILED = 0xC01E0511/;"	field
GRAPHICS_PVP_INVALID_CERTIFICATE_LENGTH	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_PVP_INVALID_CERTIFICATE_LENGTH = 0xC01E050E/;"	field
GRAPHICS_PVP_MIRRORING_DEVICES_NOT_SUPPORTED	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_PVP_MIRRORING_DEVICES_NOT_SUPPORTED = 0xC01E0508/;"	field
GRAPHICS_PVP_NO_DISPLAY_DEVICE_CORRESPONDS_TO_NAME	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_PVP_NO_DISPLAY_DEVICE_CORRESPONDS_TO_NAME = 0xC01E0506/;"	field
GRAPHICS_PVP_NO_MONITORS_CORRESPOND_TO_DISPLAY_DEVICE	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_PVP_NO_MONITORS_CORRESPOND_TO_DISPLAY_DEVICE = 0xC01E050D/;"	field
GRAPHICS_RESOURCES_NOT_RELATED	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_RESOURCES_NOT_RELATED = 0xC01E0330/;"	field
GRAPHICS_SESSION_TYPE_CHANGE_IN_PROGRESS	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_SESSION_TYPE_CHANGE_IN_PROGRESS = 0xC01E05E8/;"	field
GRAPHICS_SOURCE_ALREADY_IN_SET	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_SOURCE_ALREADY_IN_SET = 0xC01E0317/;"	field
GRAPHICS_SOURCE_ID_MUST_BE_UNIQUE	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_SOURCE_ID_MUST_BE_UNIQUE = 0xC01E0331/;"	field
GRAPHICS_SOURCE_NOT_IN_TOPOLOGY	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_SOURCE_NOT_IN_TOPOLOGY = 0xC01E0339/;"	field
GRAPHICS_SPECIFIED_CHILD_ALREADY_CONNECTED	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_SPECIFIED_CHILD_ALREADY_CONNECTED = 0xC01E0400/;"	field
GRAPHICS_STALE_MODESET	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_STALE_MODESET = 0xC01E0320/;"	field
GRAPHICS_STALE_VIDPN_TOPOLOGY	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_STALE_VIDPN_TOPOLOGY = 0xC01E0337/;"	field
GRAPHICS_START_DEFERRED	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_START_DEFERRED = 0x401E043A/;"	field
GRAPHICS_TARGET_ALREADY_IN_SET	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_TARGET_ALREADY_IN_SET = 0xC01E0318/;"	field
GRAPHICS_TARGET_ID_MUST_BE_UNIQUE	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_TARGET_ID_MUST_BE_UNIQUE = 0xC01E0332/;"	field
GRAPHICS_TARGET_NOT_IN_TOPOLOGY	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_TARGET_NOT_IN_TOPOLOGY = 0xC01E0340/;"	field
GRAPHICS_TOO_MANY_REFERENCES	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_TOO_MANY_REFERENCES = 0xC01E0103/;"	field
GRAPHICS_TOPOLOGY_CHANGES_NOT_ALLOWED	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_TOPOLOGY_CHANGES_NOT_ALLOWED = 0xC01E0353/;"	field
GRAPHICS_TRY_AGAIN_LATER	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_TRY_AGAIN_LATER = 0xC01E0104/;"	field
GRAPHICS_TRY_AGAIN_NOW	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_TRY_AGAIN_NOW = 0xC01E0105/;"	field
GRAPHICS_UAB_NOT_SUPPORTED	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_UAB_NOT_SUPPORTED = 0xC01E0502/;"	field
GRAPHICS_UNASSIGNED_MODESET_ALREADY_EXISTS	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_UNASSIGNED_MODESET_ALREADY_EXISTS = 0xC01E0350/;"	field
GRAPHICS_UNKNOWN_CHILD_STATUS	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_UNKNOWN_CHILD_STATUS = 0x401E042F/;"	field
GRAPHICS_UNSWIZZLING_APERTURE_UNAVAILABLE	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_UNSWIZZLING_APERTURE_UNAVAILABLE = 0xC01E0107/;"	field
GRAPHICS_UNSWIZZLING_APERTURE_UNSUPPORTED	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_UNSWIZZLING_APERTURE_UNSUPPORTED = 0xC01E0108/;"	field
GRAPHICS_VIDEO_PRESENT_TARGETS_LESS_THAN_SOURCES	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_VIDEO_PRESENT_TARGETS_LESS_THAN_SOURCES = 0xC01E0326/;"	field
GRAPHICS_VIDPN_MODALITY_NOT_SUPPORTED	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_VIDPN_MODALITY_NOT_SUPPORTED = 0xC01E0306/;"	field
GRAPHICS_VIDPN_SOURCE_IN_USE	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_VIDPN_SOURCE_IN_USE = 0xC01E0342/;"	field
GRAPHICS_VIDPN_TOPOLOGY_CURRENTLY_NOT_SUPPORTED	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_VIDPN_TOPOLOGY_CURRENTLY_NOT_SUPPORTED = 0xC01E0302/;"	field
GRAPHICS_VIDPN_TOPOLOGY_NOT_SUPPORTED	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_VIDPN_TOPOLOGY_NOT_SUPPORTED = 0xC01E0301/;"	field
GRAPHICS_WRONG_ALLOCATION_DEVICE	$ZIGLIB/std/os/windows/ntstatus.zig	/GRAPHICS_WRONG_ALLOCATION_DEVICE = 0xC01E0115/;"	field
GREEK	$ZIGLIB/std/os/windows/lang.zig	/^pub const GREEK = 0x08/;"	constant
GREEK_GREECE	$ZIGLIB/std/os/windows/sublang.zig	/^pub const GREEK_GREECE = 0x01/;"	constant
GREENLANDIC	$ZIGLIB/std/os/windows/lang.zig	/^pub const GREENLANDIC = 0x6f/;"	constant
GREENLANDIC_GREENLAND	$ZIGLIB/std/os/windows/sublang.zig	/^pub const GREENLANDIC_GREENLAND = 0x01/;"	constant
GROUP	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const GROUP = u32/;"	constant
GROUP_EXISTS	$ZIGLIB/std/os/windows/win32error.zig	/GROUP_EXISTS = 1318/;"	field
GROUP_ID	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const GROUP_ID = 8193/;"	constant
GROUP_PRIORITY	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const GROUP_PRIORITY = 8194/;"	constant
GROWSDOWN	$ZIGLIB/std/os/linux/x86_64.zig	/pub const GROWSDOWN = 0x0100/;"	constant
GROWSUP	$ZIGLIB/std/os/linux.zig	/pub const GROWSUP = 0x02000000/;"	constant
GSO_MAX_SEGS	$ZIGLIB/std/os/linux.zig	/GSO_MAX_SEGS/;"	field
GSO_MAX_SIZE	$ZIGLIB/std/os/linux.zig	/GSO_MAX_SIZE/;"	field
GUARD	$ZIGLIB/std/c/freebsd.zig	/pub const GUARD = 0x00002000/;"	constant
GUARD_CF	$ZIGLIB/std/coff.zig	/GUARD_CF: u1 = 0/;"	field
GUARD_PAGE_VIOLATION	$ZIGLIB/std/os/windows/ntstatus.zig	/GUARD_PAGE_VIOLATION = 0x80000001/;"	field
GUID	$ZIGLIB/std/os/windows.zig	/^pub const GUID = extern struct {$/;"	struct
GUIDS_EXHAUSTED	$ZIGLIB/std/os/windows/ntstatus.zig	/GUIDS_EXHAUSTED = 0xC0000083/;"	field
GUID_SUBSTITUTION_MADE	$ZIGLIB/std/os/windows/win32error.zig	/GUID_SUBSTITUTION_MADE = 680/;"	field
GUJARATI	$ZIGLIB/std/os/windows/lang.zig	/^pub const GUJARATI = 0x47/;"	constant
GUJARATI_INDIA	$ZIGLIB/std/os/windows/sublang.zig	/^pub const GUJARATI_INDIA = 0x01/;"	constant
GWL_EXSTYLE	$ZIGLIB/std/os/windows/user32.zig	/^pub const GWL_EXSTYLE = -20/;"	constant
GWL_HINSTANCE	$ZIGLIB/std/os/windows/user32.zig	/^pub const GWL_HINSTANCE = -6/;"	constant
GWL_HWNDPARENT	$ZIGLIB/std/os/windows/user32.zig	/^pub const GWL_HWNDPARENT = -8/;"	constant
GWL_ID	$ZIGLIB/std/os/windows/user32.zig	/^pub const GWL_ID = -12/;"	constant
GWL_STYLE	$ZIGLIB/std/os/windows/user32.zig	/^pub const GWL_STYLE = -16/;"	constant
GWL_USERDATA	$ZIGLIB/std/os/windows/user32.zig	/^pub const GWL_USERDATA = -21/;"	constant
GWL_WNDPROC	$ZIGLIB/std/os/windows/user32.zig	/^pub const GWL_WNDPROC = -4/;"	constant
Gateway	$ZIGLIB/std/os/uefi/protocols/ip6_config_protocol.zig	/Gateway/;"	field
GdbMonitorCommand	$ZIGLIB/std/valgrind.zig	/GdbMonitorCommand = 4610/;"	field
GdiDCAttributeList	$ZIGLIB/std/os/windows.zig	/GdiDCAttributeList: ULONG/;"	field
GdiHandleBuffer	$ZIGLIB/std/os/windows.zig	/GdiHandleBuffer: [$/;"	field
GdiSharedHandleTable	$ZIGLIB/std/os/windows.zig	/GdiSharedHandleTable: PVOID/;"	field
GeneralNameTag	$ZIGLIB/std/crypto/Certificate.zig	/^pub const GeneralNameTag = enum(u5) {$/;"	enum
GeneralPurposeAllocator	$ZIGLIB/std/heap/general_purpose_allocator.zig	/^pub fn GeneralPurposeAllocator(comptime config: Config) type {$/;"	function
GeneratedFile	$ZIGLIB/std/Build.zig	/^pub const GeneratedFile = struct {$/;"	struct
GenericBlob	$ZIGLIB/std/macho.zig	/^pub const GenericBlob = extern struct {$/;"	struct
GenericPointer	$ZIGLIB/std/target/spirv.zig	/GenericPointer/;"	field
Geometry	$ZIGLIB/std/target/spirv.zig	/Geometry/;"	field
GeometryPointSize	$ZIGLIB/std/target/spirv.zig	/GeometryPointSize/;"	field
GeometryShaderPassthroughNV	$ZIGLIB/std/target/spirv.zig	/GeometryShaderPassthroughNV/;"	field
GeometryStreams	$ZIGLIB/std/target/spirv.zig	/GeometryStreams/;"	field
GetAppDataDirError	$ZIGLIB/std/fs/get_app_data_dir.zig	/^pub const GetAppDataDirError = error{$/;"	constant
GetCurrentDirectory	$ZIGLIB/std/os/windows.zig	/^pub fn GetCurrentDirectory(buffer: []u8) GetCurrentDirectoryError![]u8 {$/;"	function
GetCurrentDirectoryError	$ZIGLIB/std/os/windows.zig	/^pub const GetCurrentDirectoryError = error{$/;"	constant
GetCwdError	$ZIGLIB/std/os.zig	/^pub const GetCwdError = error{$/;"	constant
GetEnvVarOwnedError	$ZIGLIB/std/process.zig	/^pub const GetEnvVarOwnedError = error{$/;"	constant
GetEnvironmentStringsError	$ZIGLIB/std/os/windows.zig	/^pub const GetEnvironmentStringsError = error{OutOfMemory}/;"	constant
GetEnvironmentStringsW	$ZIGLIB/std/os/windows.zig	/^pub fn GetEnvironmentStringsW() GetEnvironmentStringsError![*:0]u16 {$/;"	function
GetEnvironmentVariableError	$ZIGLIB/std/os/windows.zig	/^pub const GetEnvironmentVariableError = error{$/;"	constant
GetEnvironmentVariableW	$ZIGLIB/std/os/windows.zig	/^pub fn GetEnvironmentVariableW(lpName: LPWSTR, lpBuffer: [*]u16, nSize: DWORD) GetEnvironmentVariableError!DWORD {$/;"	function
GetExternalExecutorOptions	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/^pub const GetExternalExecutorOptions = struct {$/;"	struct
GetFileAttributes	$ZIGLIB/std/os/windows.zig	/^pub fn GetFileAttributes(filename: []const u8) GetFileAttributesError!DWORD {$/;"	function
GetFileAttributesError	$ZIGLIB/std/os/windows.zig	/^pub const GetFileAttributesError = error{$/;"	constant
GetFileAttributesW	$ZIGLIB/std/os/windows.zig	/^pub fn GetFileAttributesW(lpFileName: [*:0]const u16) GetFileAttributesError!DWORD {$/;"	function
GetFileInformationByHandle	$ZIGLIB/std/os/windows.zig	/^pub fn GetFileInformationByHandle($/;"	function
GetFileInformationByHandleError	$ZIGLIB/std/os/windows.zig	/^pub const GetFileInformationByHandleError = error{Unexpected}/;"	constant
GetFileSizeError	$ZIGLIB/std/os/windows.zig	/^pub const GetFileSizeError = error{Unexpected}/;"	constant
GetFileSizeEx	$ZIGLIB/std/os/windows.zig	/^pub fn GetFileSizeEx(hFile: HANDLE) GetFileSizeError!u64 {$/;"	function
GetFinalPathNameByHandle	$ZIGLIB/std/os/windows.zig	/^pub fn GetFinalPathNameByHandle($/;"	function
GetFinalPathNameByHandleError	$ZIGLIB/std/os/windows.zig	/^pub const GetFinalPathNameByHandleError = error{$/;"	constant
GetFinalPathNameByHandleFormat	$ZIGLIB/std/os/windows.zig	/^pub const GetFinalPathNameByHandleFormat = struct {$/;"	struct
GetHostNameError	$ZIGLIB/std/os.zig	/^pub const GetHostNameError = error{PermissionDenied} || UnexpectedError/;"	constant
GetIdAttr	$ZIGLIB/std/os/linux/bpf.zig	/^pub const GetIdAttr = extern struct {$/;"	struct
GetModuleFileNameError	$ZIGLIB/std/os/windows.zig	/^const GetModuleFileNameError = error{Unexpected}/;"	constant
GetModuleFileNameW	$ZIGLIB/std/os/windows.zig	/^pub fn GetModuleFileNameW(hModule: ?HMODULE, buf_ptr: [*]u16, buf_len: DWORD) GetModuleFileNameError![:0]u16 {$/;"	function
GetNameError	$ZIGLIB/std/Thread.zig	/^pub const GetNameError = error{$/;"	constant
GetNode	$ZIGLIB/std/event/channel.zig	/const GetNode = struct {$/;"	struct
GetOrPutResult	$ZIGLIB/std/hash_map.zig	/pub const GetOrPutResult = struct {$/;"	struct
GetOverlappedResult	$ZIGLIB/std/os/windows.zig	/^pub fn GetOverlappedResult(h: HANDLE, overlapped: *OVERLAPPED, wait: bool) !DWORD {$/;"	function
GetQueuedCompletionStatus	$ZIGLIB/std/os/windows.zig	/^pub fn GetQueuedCompletionStatus($/;"	function
GetQueuedCompletionStatusError	$ZIGLIB/std/os/windows.zig	/^pub const GetQueuedCompletionStatusError = error{$/;"	constant
GetQueuedCompletionStatusEx	$ZIGLIB/std/os/windows.zig	/^pub fn GetQueuedCompletionStatusEx($/;"	function
GetQueuedCompletionStatusResult	$ZIGLIB/std/os/windows.zig	/^pub const GetQueuedCompletionStatusResult = enum {$/;"	enum
GetRandomError	$ZIGLIB/std/os.zig	/^pub const GetRandomError = OpenError/;"	constant
GetSeekPosError	$ZIGLIB/std/os/uefi/protocols/file_protocol.zig	/pub const GetSeekPosError = error{GetSeekPosError}/;"	constant
GetSockNameError	$ZIGLIB/std/os.zig	/^pub const GetSockNameError = error{$/;"	constant
GetStdHandle	$ZIGLIB/std/os/windows.zig	/^pub fn GetStdHandle(handle_id: DWORD) GetStdHandleError!HANDLE {$/;"	function
GetStdHandleError	$ZIGLIB/std/os/windows.zig	/^pub const GetStdHandleError = error{$/;"	constant
GetVbits	$ZIGLIB/std/valgrind/memcheck.zig	/GetVbits/;"	field
GetrlimitError	$ZIGLIB/std/os.zig	/^pub const GetrlimitError = UnexpectedError/;"	constant
Ghash	$ZIGLIB/std/crypto/ghash_polyval.zig	/^pub const Ghash = Hash(.Big, true)/;"	constant
Gimli	$ZIGLIB/std/crypto.zig	/pub const Gimli = @import("crypto\/gimli.zig").State/;"	constant
GlblcntUsage	$ZIGLIB/std/os/windows.zig	/GlblcntUsage: DWORD/;"	field
Global	$ZIGLIB/std/wasm.zig	/^pub const Global = struct {$/;"	struct
GlobalHint	$ZIGLIB/std/os/windows.zig	/GlobalHint: BYTE/;"	field
GlobalLinkage	$ZIGLIB/std/builtin.zig	/^pub const GlobalLinkage = enum {$/;"	enum
GlobalStreamIndex	$ZIGLIB/std/pdb.zig	/GlobalStreamIndex: u16/;"	field
GlobalType	$ZIGLIB/std/wasm.zig	/^pub const GlobalType = struct {$/;"	struct
GlobalValidationRunlevel	$ZIGLIB/std/os/windows.zig	/GlobalValidationRunlevel: ULONG/;"	field
GlobalVarDecl	$ZIGLIB/std/zig/Ast.zig	/pub const GlobalVarDecl = struct {$/;"	struct
GraphicsOutputBltOperation	$ZIGLIB/std/os/uefi/protocols/graphics_output_protocol.zig	/^pub const GraphicsOutputBltOperation = enum(u32) {$/;"	enum
GraphicsOutputBltOperationMax	$ZIGLIB/std/os/uefi/protocols/graphics_output_protocol.zig	/GraphicsOutputBltOperationMax/;"	field
GraphicsOutputBltPixel	$ZIGLIB/std/os/uefi/protocols/graphics_output_protocol.zig	/^pub const GraphicsOutputBltPixel = extern struct {$/;"	struct
GraphicsOutputModeInformation	$ZIGLIB/std/os/uefi/protocols/graphics_output_protocol.zig	/^pub const GraphicsOutputModeInformation = extern struct {$/;"	struct
GraphicsOutputProtocol	$ZIGLIB/std/os/uefi/protocols/graphics_output_protocol.zig	/^pub const GraphicsOutputProtocol = extern struct {$/;"	struct
GraphicsOutputProtocolMode	$ZIGLIB/std/os/uefi/protocols/graphics_output_protocol.zig	/^pub const GraphicsOutputProtocolMode = extern struct {$/;"	struct
GraphicsPixelFormat	$ZIGLIB/std/os/uefi/protocols/graphics_output_protocol.zig	/^pub const GraphicsPixelFormat = enum(u32) {$/;"	enum
Greater	$ZIGLIB/compiler_rt/comparef.zig	/Greater = 1/;"	field
Green	$ZIGLIB/std/debug.zig	/Green/;"	field
Group	$ZIGLIB/std/pdb.zig	/Group: u16/;"	field
GroupNonUniform	$ZIGLIB/std/target/spirv.zig	/GroupNonUniform/;"	field
GroupNonUniformArithmetic	$ZIGLIB/std/target/spirv.zig	/GroupNonUniformArithmetic/;"	field
GroupNonUniformBallot	$ZIGLIB/std/target/spirv.zig	/GroupNonUniformBallot/;"	field
GroupNonUniformClustered	$ZIGLIB/std/target/spirv.zig	/GroupNonUniformClustered/;"	field
GroupNonUniformPartitionedNV	$ZIGLIB/std/target/spirv.zig	/GroupNonUniformPartitionedNV/;"	field
GroupNonUniformQuad	$ZIGLIB/std/target/spirv.zig	/GroupNonUniformQuad/;"	field
GroupNonUniformShuffle	$ZIGLIB/std/target/spirv.zig	/GroupNonUniformShuffle/;"	field
GroupNonUniformShuffleRelative	$ZIGLIB/std/target/spirv.zig	/GroupNonUniformShuffleRelative/;"	field
GroupNonUniformVote	$ZIGLIB/std/target/spirv.zig	/GroupNonUniformVote/;"	field
Groups	$ZIGLIB/std/target/spirv.zig	/Groups/;"	field
Guid	$ZIGLIB/std/os/uefi.zig	/^pub const Guid = extern struct {$/;"	struct
GuidPartitionTable	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/GuidPartitionTable = 0x02/;"	field
GuidSignature	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/GuidSignature = 0x02/;"	field
H2_digest	$ZIGLIB/std/crypto/hash_composition.zig	/var H2_digest: [H2.digest_length]u8 = undefined/;"	variable
H8_300	$ZIGLIB/std/elf.zig	/H8_300 = 46/;"	field
H8_300H	$ZIGLIB/std/elf.zig	/H8_300H = 47/;"	field
H8_500	$ZIGLIB/std/elf.zig	/H8_500 = 49/;"	field
HAIKU_MAX_COUNT	$ZIGLIB/std/fs.zig	/const HAIKU_MAX_COUNT = 10000/;"	constant
HALF	$ZIGLIB/std/os/linux/arm-eabi.zig	/pub const HALF = 1 << 1/;"	constant
HALT	$ZIGLIB/std/os/linux.zig	/HALT = 0xCDEF0123/;"	field
HANDLE	$ZIGLIB/std/os/windows.zig	/^pub const HANDLE = *anyopaque/;"	constant
HANDLER_ROUTINE	$ZIGLIB/std/os/windows.zig	/^pub const HANDLER_ROUTINE = *const fn (dwCtrlType: DWORD) callconv(WINAPI) BOOL/;"	constant
HANDLES_CLOSED	$ZIGLIB/std/os/windows/win32error.zig	/HANDLES_CLOSED = 676/;"	field
HANDLE_DISK_FULL	$ZIGLIB/std/os/windows/win32error.zig	/HANDLE_DISK_FULL = 39/;"	field
HANDLE_EOF	$ZIGLIB/std/os/windows/win32error.zig	/HANDLE_EOF = 38/;"	field
HANDLE_FLAG_INHERIT	$ZIGLIB/std/os/windows.zig	/^pub const HANDLE_FLAG_INHERIT = 0x00000001/;"	constant
HANDLE_FLAG_PROTECT_FROM_CLOSE	$ZIGLIB/std/os/windows.zig	/^pub const HANDLE_FLAG_PROTECT_FROM_CLOSE = 0x00000002/;"	constant
HANDLE_NOT_CLOSABLE	$ZIGLIB/std/os/windows/ntstatus.zig	/HANDLE_NOT_CLOSABLE = 0xC0000235/;"	field
HANDLE_NO_LONGER_VALID	$ZIGLIB/std/os/windows/ntstatus.zig	/HANDLE_NO_LONGER_VALID = 0xC0190028/;"	field
HARDWARE	$ZIGLIB/std/os/linux.zig	/HARDWARE/;"	field
HARDWARE_MEMORY_ERROR	$ZIGLIB/std/os/windows/ntstatus.zig	/HARDWARE_MEMORY_ERROR = 0xC0000709/;"	field
HASH_NOT_PRESENT	$ZIGLIB/std/os/windows/ntstatus.zig	/HASH_NOT_PRESENT = 0xC000A101/;"	field
HASH_NOT_SUPPORTED	$ZIGLIB/std/os/windows/ntstatus.zig	/HASH_NOT_SUPPORTED = 0xC000A100/;"	field
HASREMOTELOCKS	$ZIGLIB/std/c/solaris.zig	/pub const HASREMOTELOCKS = 26/;"	constant
HASSEMAPHORE	$ZIGLIB/std/c/openbsd.zig	/pub const HASSEMAPHORE = 0/;"	constant
HAUSA	$ZIGLIB/std/os/windows/lang.zig	/^pub const HAUSA = 0x68/;"	constant
HAUSA_NIGERIA_LATIN	$ZIGLIB/std/os/windows/sublang.zig	/^pub const HAUSA_NIGERIA_LATIN = 0x01/;"	constant
HAWAIIAN	$ZIGLIB/std/os/windows/lang.zig	/^pub const HAWAIIAN = 0x75/;"	constant
HAWAIIAN_US	$ZIGLIB/std/os/windows/sublang.zig	/^pub const HAWAIIAN_US = 0x01/;"	constant
HBRUSH	$ZIGLIB/std/os/windows.zig	/^pub const HBRUSH = *opaque {}/;"	constant
HCERTSTORE	$ZIGLIB/std/os/windows/crypt32.zig	/^pub const HCERTSTORE = *opaque {}/;"	constant
HCRYPTPROV	$ZIGLIB/std/os/windows.zig	/^pub const HCRYPTPROV = ULONG_PTR/;"	constant
HCURSOR	$ZIGLIB/std/os/windows.zig	/^pub const HCURSOR = *opaque {}/;"	constant
HDRINCL	$ZIGLIB/std/os/linux.zig	/pub const HDRINCL = 36/;"	constant
HEAD	$ZIGLIB/std/http.zig	/HEAD/;"	field
HEAP_CORRUPTION	$ZIGLIB/std/os/windows/ntstatus.zig	/HEAP_CORRUPTION = 0xC0000374/;"	field
HEAP_CREATE_ENABLE_EXECUTE	$ZIGLIB/std/os/windows.zig	/^pub const HEAP_CREATE_ENABLE_EXECUTE = 0x00040000/;"	constant
HEAP_GENERATE_EXCEPTIONS	$ZIGLIB/std/os/windows.zig	/^pub const HEAP_GENERATE_EXCEPTIONS = 0x00000004/;"	constant
HEAP_NO_SERIALIZE	$ZIGLIB/std/os/windows.zig	/^pub const HEAP_NO_SERIALIZE = 0x00000001/;"	constant
HEAP_REALLOC_IN_PLACE_ONLY	$ZIGLIB/std/os/windows.zig	/^pub const HEAP_REALLOC_IN_PLACE_ONLY = 0x00000010/;"	constant
HEBREW	$ZIGLIB/std/os/windows/lang.zig	/^pub const HEBREW = 0x0d/;"	constant
HEBREW_ISRAEL	$ZIGLIB/std/os/windows/sublang.zig	/^pub const HEBREW_ISRAEL = 0x01/;"	constant
HELLO	$ZIGLIB/std/c/solaris.zig	/pub const HELLO = 63/;"	constant
HEXAGON	$ZIGLIB/std/os/linux.zig	/HEXAGON = @enumToInt(std.elf.EM.HEXAGON)/;"	field
HGLRC	$ZIGLIB/std/os/windows.zig	/^pub const HGLRC = *opaque {}/;"	constant
HIBERNATED	$ZIGLIB/std/os/windows/win32error.zig	/HIBERNATED = 726/;"	field
HIBERNATION_FAILURE	$ZIGLIB/std/os/windows/win32error.zig	/HIBERNATION_FAILURE = 656/;"	field
HICON	$ZIGLIB/std/os/windows.zig	/^pub const HICON = *opaque {}/;"	constant
HIDDEN	$ZIGLIB/std/elf.zig	/HIDDEN = 2/;"	field
HIGH	$ZIGLIB/std/coff.zig	/HIGH = 1/;"	field
HIGHADJ	$ZIGLIB/std/coff.zig	/HIGHADJ = 4/;"	field
HIGHLOW	$ZIGLIB/std/coff.zig	/HIGHLOW = 3/;"	field
HIGHRES	$ZIGLIB/std/c/solaris.zig	/pub const HIGHRES = MONOTONIC/;"	constant
HIGH_ENTROPY_VA	$ZIGLIB/std/coff.zig	/HIGH_ENTROPY_VA: u1 = 0/;"	field
HIIDatabaseProtocol	$ZIGLIB/std/os/uefi/protocols/hii_database_protocol.zig	/^pub const HIIDatabaseProtocol = extern struct {$/;"	struct
HIIHandle	$ZIGLIB/std/os/uefi/protocols/hii.zig	/^pub const HIIHandle = *opaque {}/;"	constant
HIIPackageHeader	$ZIGLIB/std/os/uefi/protocols/hii.zig	/^pub const HIIPackageHeader = packed struct(u32) {$/;"	struct
HIIPackageList	$ZIGLIB/std/os/uefi/protocols/hii.zig	/^pub const HIIPackageList = extern struct {$/;"	struct
HIIPopupProtocol	$ZIGLIB/std/os/uefi/protocols/hii_popup_protocol.zig	/^pub const HIIPopupProtocol = extern struct {$/;"	struct
HIIPopupSelection	$ZIGLIB/std/os/uefi/protocols/hii_popup_protocol.zig	/^pub const HIIPopupSelection = enum(u32) {$/;"	enum
HIIPopupStyle	$ZIGLIB/std/os/uefi/protocols/hii_popup_protocol.zig	/^pub const HIIPopupStyle = enum(u32) {$/;"	enum
HIIPopupType	$ZIGLIB/std/os/uefi/protocols/hii_popup_protocol.zig	/^pub const HIIPopupType = enum(u32) {$/;"	enum
HIISimplifiedFontPackage	$ZIGLIB/std/os/uefi/protocols/hii.zig	/^pub const HIISimplifiedFontPackage = extern struct {$/;"	struct
HIIStringPackage	$ZIGLIB/std/os/uefi/protocols/hii.zig	/^pub const HIIStringPackage = extern struct {$/;"	struct
HINDI	$ZIGLIB/std/os/windows/lang.zig	/^pub const HINDI = 0x39/;"	constant
HINDI_INDIA	$ZIGLIB/std/os/windows/sublang.zig	/^pub const HINDI_INDIA = 0x01/;"	constant
HINSTANCE	$ZIGLIB/std/os/windows.zig	/^pub const HINSTANCE = *opaque {}/;"	constant
HIPRI	$ZIGLIB/std/os/linux.zig	/pub const HIPRI: kernel_rwf = 0x00000001/;"	constant
HIPROC	$ZIGLIB/std/elf.zig	/pub const HIPROC = 0xffff/;"	constant
HIVE_UNLOADED	$ZIGLIB/std/os/windows/ntstatus.zig	/HIVE_UNLOADED = 0xC0000425/;"	field
HKEY	$ZIGLIB/std/os/windows.zig	/^pub const HKEY = *opaque {}/;"	constant
HKEY_LOCAL_MACHINE	$ZIGLIB/std/os/windows.zig	/^pub const HKEY_LOCAL_MACHINE: HKEY = @intToPtr(HKEY, 0x80000002)/;"	constant
HKM_GETHOTKEY	$ZIGLIB/std/os/windows/user32.zig	/^pub const HKM_GETHOTKEY = 0x0402/;"	constant
HKM_SETHOTKEY	$ZIGLIB/std/os/windows/user32.zig	/^pub const HKM_SETHOTKEY = 0x0401/;"	constant
HKM_SETRULES	$ZIGLIB/std/os/windows/user32.zig	/^pub const HKM_SETRULES = 0x0403/;"	constant
HLOCAL	$ZIGLIB/std/os/windows.zig	/^pub const HLOCAL = HANDLE/;"	constant
HMAC_NOT_SUPPORTED	$ZIGLIB/std/os/windows/ntstatus.zig	/HMAC_NOT_SUPPORTED = 0xC000A001/;"	field
HMENU	$ZIGLIB/std/os/windows.zig	/^pub const HMENU = *opaque {}/;"	constant
HMODULE	$ZIGLIB/std/os/windows.zig	/^pub const HMODULE = *opaque {}/;"	constant
HOLD	$ZIGLIB/std/c/solaris.zig	/pub const HOLD = @intToPtr(?Sigaction.handler_fn, 2)/;"	constant
HOLE	$ZIGLIB/std/c/solaris.zig	/pub const HOLE = 4/;"	constant
HOOK_NEEDS_HMOD	$ZIGLIB/std/os/windows/win32error.zig	/HOOK_NEEDS_HMOD = 1428/;"	field
HOOK_NOT_INSTALLED	$ZIGLIB/std/os/windows/win32error.zig	/HOOK_NOT_INSTALLED = 1431/;"	field
HOOK_TYPE_NOT_ALLOWED	$ZIGLIB/std/os/windows/win32error.zig	/HOOK_TYPE_NOT_ALLOWED = 1458/;"	field
HOPLIMIT	$ZIGLIB/std/os/linux.zig	/pub const HOPLIMIT = 52/;"	constant
HOPLIMIT_EXCEEDED	$ZIGLIB/std/os/windows/ntstatus.zig	/HOPLIMIT_EXCEEDED = 0xC000A012/;"	field
HOPOPTS	$ZIGLIB/std/os/linux.zig	/pub const HOPOPTS = 54/;"	constant
HOSTDOWN	$ZIGLIB/std/os/linux/errno/sparc.zig	/HOSTDOWN = 64/;"	field
HOSTID	$ZIGLIB/std/c/openbsd.zig	/pub const HOSTID = 11/;"	constant
HOSTNAME	$ZIGLIB/std/c/openbsd.zig	/pub const HOSTNAME = 10/;"	constant
HOSTUNREACH	$ZIGLIB/std/os/wasi.zig	/HOSTUNREACH = 23/;"	field
HOST_DOWN	$ZIGLIB/std/os/windows/win32error.zig	/HOST_DOWN = 1256/;"	field
HOST_NAME_MAX	$ZIGLIB/std/os/linux.zig	/^pub const HOST_NAME_MAX = 64/;"	constant
HOST_UNREACHABLE	$ZIGLIB/std/os/windows/win32error.zig	/HOST_UNREACHABLE = 1232/;"	field
HOTKEY_ALREADY_REGISTERED	$ZIGLIB/std/os/windows/win32error.zig	/HOTKEY_ALREADY_REGISTERED = 1409/;"	field
HOTKEY_NOT_REGISTERED	$ZIGLIB/std/os/windows/win32error.zig	/HOTKEY_NOT_REGISTERED = 1419/;"	field
HP_Assembler	$ZIGLIB/std/dwarf/LANG.zig	/^pub const HP_Assembler = 0x8007/;"	constant
HP_Basic91	$ZIGLIB/std/dwarf/LANG.zig	/^pub const HP_Basic91 = 0x8004/;"	constant
HP_Bliss	$ZIGLIB/std/dwarf/LANG.zig	/^pub const HP_Bliss = 0x8003/;"	constant
HP_Bliss_field	$ZIGLIB/std/dwarf/TAG.zig	/^pub const HP_Bliss_field = 0x4091/;"	constant
HP_Bliss_field_set	$ZIGLIB/std/dwarf/TAG.zig	/^pub const HP_Bliss_field_set = 0x4092/;"	constant
HP_IMacro	$ZIGLIB/std/dwarf/LANG.zig	/^pub const HP_IMacro = 0x8006/;"	constant
HP_Pascal91	$ZIGLIB/std/dwarf/LANG.zig	/^pub const HP_Pascal91 = 0x8005/;"	constant
HP_VAX_complex_float	$ZIGLIB/std/dwarf/ATE.zig	/^pub const HP_VAX_complex_float = 0x8f/;"	constant
HP_VAX_complex_float_d	$ZIGLIB/std/dwarf/ATE.zig	/^pub const HP_VAX_complex_float_d = 0x90/;"	constant
HP_VAX_float	$ZIGLIB/std/dwarf/ATE.zig	/^pub const HP_VAX_float = 0x88/;"	constant
HP_VAX_float_d	$ZIGLIB/std/dwarf/ATE.zig	/^pub const HP_VAX_float_d = 0x89/;"	constant
HP_actuals_stmt_list	$ZIGLIB/std/dwarf/AT.zig	/^pub const HP_actuals_stmt_list = 0x2010/;"	constant
HP_all_variables_modifiable	$ZIGLIB/std/dwarf/AT.zig	/^pub const HP_all_variables_modifiable = 0x2019/;"	constant
HP_array_descriptor	$ZIGLIB/std/dwarf/TAG.zig	/^pub const HP_array_descriptor = 0x4090/;"	constant
HP_block_index	$ZIGLIB/std/dwarf/AT.zig	/^pub const HP_block_index = 0x2000/;"	constant
HP_cold_region_high_pc	$ZIGLIB/std/dwarf/AT.zig	/^pub const HP_cold_region_high_pc = 0x2018/;"	constant
HP_cold_region_low_pc	$ZIGLIB/std/dwarf/AT.zig	/^pub const HP_cold_region_low_pc = 0x2017/;"	constant
HP_complex_float128	$ZIGLIB/std/dwarf/ATE.zig	/^pub const HP_complex_float128 = 0x83/;"	constant
HP_complex_float80	$ZIGLIB/std/dwarf/ATE.zig	/^pub const HP_complex_float80 = 0x81/;"	constant
HP_default_location	$ZIGLIB/std/dwarf/AT.zig	/^pub const HP_default_location = 0x2023/;"	constant
HP_definition_points	$ZIGLIB/std/dwarf/AT.zig	/^pub const HP_definition_points = 0x2022/;"	constant
HP_edited	$ZIGLIB/std/dwarf/ATE.zig	/^pub const HP_edited = 0x8c/;"	constant
HP_epilogue	$ZIGLIB/std/dwarf/AT.zig	/^pub const HP_epilogue = 0x2008/;"	constant
HP_float128	$ZIGLIB/std/dwarf/ATE.zig	/^pub const HP_float128 = 0x82/;"	constant
HP_float80	$ZIGLIB/std/dwarf/ATE.zig	/^pub const HP_float80 = 0x80/;"	constant
HP_floathpintel	$ZIGLIB/std/dwarf/ATE.zig	/^pub const HP_floathpintel = 0x84/;"	constant
HP_fltconst4	$ZIGLIB/std/dwarf/OP.zig	/^pub const HP_fltconst4 = 0xe2/;"	constant
HP_fltconst8	$ZIGLIB/std/dwarf/OP.zig	/^pub const HP_fltconst8 = 0xe3/;"	constant
HP_imaginary_float128	$ZIGLIB/std/dwarf/ATE.zig	/^pub const HP_imaginary_float128 = 0x86/;"	constant
HP_imaginary_float80	$ZIGLIB/std/dwarf/ATE.zig	/^pub const HP_imaginary_float80 = 0x85/;"	constant
HP_is_result_param	$ZIGLIB/std/dwarf/AT.zig	/^pub const HP_is_result_param = 0x2029/;"	constant
HP_is_value	$ZIGLIB/std/dwarf/OP.zig	/^pub const HP_is_value = 0xe1/;"	constant
HP_linkage_name	$ZIGLIB/std/dwarf/AT.zig	/^pub const HP_linkage_name = 0x201a/;"	constant
HP_mod_range	$ZIGLIB/std/dwarf/OP.zig	/^pub const HP_mod_range = 0xe4/;"	constant
HP_opt_flags	$ZIGLIB/std/dwarf/AT.zig	/^pub const HP_opt_flags = 0x2016/;"	constant
HP_opt_level	$ZIGLIB/std/dwarf/AT.zig	/^pub const HP_opt_level = 0x2014/;"	constant
HP_packed_decimal	$ZIGLIB/std/dwarf/ATE.zig	/^pub const HP_packed_decimal = 0x8a/;"	constant
HP_pass_by_reference	$ZIGLIB/std/dwarf/AT.zig	/^pub const HP_pass_by_reference = 0x2013/;"	constant
HP_proc_per_section	$ZIGLIB/std/dwarf/AT.zig	/^pub const HP_proc_per_section = 0x2011/;"	constant
HP_prof_flags	$ZIGLIB/std/dwarf/AT.zig	/^pub const HP_prof_flags = 0x201b/;"	constant
HP_prof_version_id	$ZIGLIB/std/dwarf/AT.zig	/^pub const HP_prof_version_id = 0x2015/;"	constant
HP_prologue	$ZIGLIB/std/dwarf/AT.zig	/^pub const HP_prologue = 0x2005/;"	constant
HP_raw_data_ptr	$ZIGLIB/std/dwarf/AT.zig	/^pub const HP_raw_data_ptr = 0x2012/;"	constant
HP_signed_fixed	$ZIGLIB/std/dwarf/ATE.zig	/^pub const HP_signed_fixed = 0x8d/;"	constant
HP_tls	$ZIGLIB/std/dwarf/OP.zig	/^pub const HP_tls = 0xe6/;"	constant
HP_unit_name	$ZIGLIB/std/dwarf/AT.zig	/^pub const HP_unit_name = 0x201f/;"	constant
HP_unit_size	$ZIGLIB/std/dwarf/AT.zig	/^pub const HP_unit_size = 0x2020/;"	constant
HP_unknown	$ZIGLIB/std/dwarf/OP.zig	/^pub const HP_unknown = 0xe0/;"	constant
HP_unmod_range	$ZIGLIB/std/dwarf/OP.zig	/^pub const HP_unmod_range = 0xe5/;"	constant
HP_unmodifiable	$ZIGLIB/std/dwarf/AT.zig	/^pub const HP_unmodifiable = 0x2001/;"	constant
HP_unsigned_fixed	$ZIGLIB/std/dwarf/ATE.zig	/^pub const HP_unsigned_fixed = 0x8e/;"	constant
HP_widened_byte_size	$ZIGLIB/std/dwarf/AT.zig	/^pub const HP_widened_byte_size = 0x2021/;"	constant
HP_zoned_decimal	$ZIGLIB/std/dwarf/ATE.zig	/^pub const HP_zoned_decimal = 0x8b/;"	constant
HRESULT	$ZIGLIB/std/os/windows.zig	/^pub const HRESULT = c_long/;"	constant
HTTP/1.0	$ZIGLIB/std/http.zig	/@"HTTP\/1.0"/;"	field
HTTP/1.1	$ZIGLIB/std/http.zig	/@"HTTP\/1.1"/;"	field
HUANY	$ZIGLIB/std/elf.zig	/HUANY = 81/;"	field
HUGEPAGE	$ZIGLIB/std/os/linux.zig	/pub const HUGEPAGE = 14/;"	constant
HUGETLB	$ZIGLIB/std/os/linux.zig	/pub const HUGETLB = if (is_mips) 0x80000 else 0x40000/;"	constant
HUGETLB_FLAG_ENCODE_16GB	$ZIGLIB/std/os/linux.zig	/^pub const HUGETLB_FLAG_ENCODE_16GB = 34 << HUGETLB_FLAG_ENCODE_SHIFT/;"	constant
HUGETLB_FLAG_ENCODE_16MB	$ZIGLIB/std/os/linux.zig	/^pub const HUGETLB_FLAG_ENCODE_16MB = 24 << HUGETLB_FLAG_ENCODE_SHIFT/;"	constant
HUGETLB_FLAG_ENCODE_1GB	$ZIGLIB/std/os/linux.zig	/^pub const HUGETLB_FLAG_ENCODE_1GB = 30 << HUGETLB_FLAG_ENCODE_SHIFT/;"	constant
HUGETLB_FLAG_ENCODE_1MB	$ZIGLIB/std/os/linux.zig	/^pub const HUGETLB_FLAG_ENCODE_1MB = 20 << HUGETLB_FLAG_ENCODE_SHIFT/;"	constant
HUGETLB_FLAG_ENCODE_256MB	$ZIGLIB/std/os/linux.zig	/^pub const HUGETLB_FLAG_ENCODE_256MB = 28 << HUGETLB_FLAG_ENCODE_SHIFT/;"	constant
HUGETLB_FLAG_ENCODE_2GB	$ZIGLIB/std/os/linux.zig	/^pub const HUGETLB_FLAG_ENCODE_2GB = 31 << HUGETLB_FLAG_ENCODE_SHIFT/;"	constant
HUGETLB_FLAG_ENCODE_2MB	$ZIGLIB/std/os/linux.zig	/^pub const HUGETLB_FLAG_ENCODE_2MB = 21 << HUGETLB_FLAG_ENCODE_SHIFT/;"	constant
HUGETLB_FLAG_ENCODE_32MB	$ZIGLIB/std/os/linux.zig	/^pub const HUGETLB_FLAG_ENCODE_32MB = 25 << HUGETLB_FLAG_ENCODE_SHIFT/;"	constant
HUGETLB_FLAG_ENCODE_512KB	$ZIGLIB/std/os/linux.zig	/^pub const HUGETLB_FLAG_ENCODE_512KB = 19 << HUGETLB_FLAG_ENCODE_SHIFT/;"	constant
HUGETLB_FLAG_ENCODE_512MB	$ZIGLIB/std/os/linux.zig	/^pub const HUGETLB_FLAG_ENCODE_512MB = 29 << HUGETLB_FLAG_ENCODE_SHIFT/;"	constant
HUGETLB_FLAG_ENCODE_64KB	$ZIGLIB/std/os/linux.zig	/^pub const HUGETLB_FLAG_ENCODE_64KB = 16 << HUGETLB_FLAG_ENCODE_SHIFT/;"	constant
HUGETLB_FLAG_ENCODE_8MB	$ZIGLIB/std/os/linux.zig	/^pub const HUGETLB_FLAG_ENCODE_8MB = 23 << HUGETLB_FLAG_ENCODE_SHIFT/;"	constant
HUGETLB_FLAG_ENCODE_MASK	$ZIGLIB/std/os/linux.zig	/^pub const HUGETLB_FLAG_ENCODE_MASK = 0x3f/;"	constant
HUGETLB_FLAG_ENCODE_SHIFT	$ZIGLIB/std/os/linux.zig	/^pub const HUGETLB_FLAG_ENCODE_SHIFT = 26/;"	constant
HUGE_16GB	$ZIGLIB/std/os/linux.zig	/pub const HUGE_16GB = HUGETLB_FLAG_ENCODE_16GB/;"	constant
HUGE_16MB	$ZIGLIB/std/os/linux.zig	/pub const HUGE_16MB = HUGETLB_FLAG_ENCODE_16MB/;"	constant
HUGE_1GB	$ZIGLIB/std/os/linux.zig	/pub const HUGE_1GB = HUGETLB_FLAG_ENCODE_1GB/;"	constant
HUGE_1MB	$ZIGLIB/std/os/linux.zig	/pub const HUGE_1MB = HUGETLB_FLAG_ENCODE_1MB/;"	constant
HUGE_256MB	$ZIGLIB/std/os/linux.zig	/pub const HUGE_256MB = HUGETLB_FLAG_ENCODE_256MB/;"	constant
HUGE_2GB	$ZIGLIB/std/os/linux.zig	/pub const HUGE_2GB = HUGETLB_FLAG_ENCODE_2GB/;"	constant
HUGE_2MB	$ZIGLIB/std/os/linux.zig	/pub const HUGE_2MB = HUGETLB_FLAG_ENCODE_2MB/;"	constant
HUGE_32MB	$ZIGLIB/std/os/linux.zig	/pub const HUGE_32MB = HUGETLB_FLAG_ENCODE_32MB/;"	constant
HUGE_512KB	$ZIGLIB/std/os/linux.zig	/pub const HUGE_512KB = HUGETLB_FLAG_ENCODE_512KB/;"	constant
HUGE_512MB	$ZIGLIB/std/os/linux.zig	/pub const HUGE_512MB = HUGETLB_FLAG_ENCODE_512MB/;"	constant
HUGE_64KB	$ZIGLIB/std/os/linux.zig	/pub const HUGE_64KB = HUGETLB_FLAG_ENCODE_64KB/;"	constant
HUGE_8MB	$ZIGLIB/std/os/linux.zig	/pub const HUGE_8MB = HUGETLB_FLAG_ENCODE_8MB/;"	constant
HUGE_MASK	$ZIGLIB/std/os/linux.zig	/pub const HUGE_MASK = HUGETLB_FLAG_ENCODE_MASK/;"	constant
HUGE_SHIFT	$ZIGLIB/std/os/linux.zig	/pub const HUGE_SHIFT = HUGETLB_FLAG_ENCODE_SHIFT/;"	constant
HUNGARIAN	$ZIGLIB/std/os/windows/lang.zig	/^pub const HUNGARIAN = 0x0e/;"	constant
HUNGARIAN_HUNGARY	$ZIGLIB/std/os/windows/sublang.zig	/^pub const HUNGARIAN_HUNGARY = 0x01/;"	constant
HUNG_DISPLAY_DRIVER_THREAD	$ZIGLIB/std/os/windows/ntstatus.zig	/HUNG_DISPLAY_DRIVER_THREAD = 0xC0000415/;"	field
HUPCL	$ZIGLIB/std/os/linux.zig	/^pub const HUPCL: tcflag_t = 1024/;"	constant
HWCAP	$ZIGLIB/std/os/linux/arm-eabi.zig	/^pub const HWCAP = struct {$/;"	struct
HWCAP2	$ZIGLIB/std/c/solaris.zig	/pub const HWCAP2 = 2023/;"	constant
HWCAPVERIFY	$ZIGLIB/std/c/solaris.zig	/pub const HWCAPVERIFY = 0x00000002/;"	constant
HWND	$ZIGLIB/std/os/windows.zig	/^pub const HWND = *opaque {}/;"	constant
HWNDS_HAVE_DIFF_PARENT	$ZIGLIB/std/os/windows/win32error.zig	/HWNDS_HAVE_DIFF_PARENT = 1441/;"	field
HWPOISON	$ZIGLIB/std/os/linux/errno/sparc.zig	/HWPOISON = 135/;"	field
HW_ALLOWPOWERDOWN	$ZIGLIB/std/c/openbsd.zig	/^pub const HW_ALLOWPOWERDOWN = 22/;"	constant
HW_BYTEORDER	$ZIGLIB/std/c/openbsd.zig	/^pub const HW_BYTEORDER = 4/;"	constant
HW_CACHE	$ZIGLIB/std/os/linux.zig	/HW_CACHE/;"	field
HW_CPUSPEED	$ZIGLIB/std/c/openbsd.zig	/^pub const HW_CPUSPEED = 12/;"	constant
HW_DISKCOUNT	$ZIGLIB/std/c/openbsd.zig	/^pub const HW_DISKCOUNT = 10/;"	constant
HW_DISKNAMES	$ZIGLIB/std/c/openbsd.zig	/^pub const HW_DISKNAMES = 8/;"	constant
HW_DISKSTATS	$ZIGLIB/std/c/openbsd.zig	/^pub const HW_DISKSTATS = 9/;"	constant
HW_MACHINE	$ZIGLIB/std/c/openbsd.zig	/^pub const HW_MACHINE = 1/;"	constant
HW_MODEL	$ZIGLIB/std/c/openbsd.zig	/^pub const HW_MODEL = 2/;"	constant
HW_NCPU	$ZIGLIB/std/c/openbsd.zig	/^pub const HW_NCPU = 3/;"	constant
HW_NCPUFOUND	$ZIGLIB/std/c/openbsd.zig	/^pub const HW_NCPUFOUND = 21/;"	constant
HW_NCPUONLINE	$ZIGLIB/std/c/openbsd.zig	/^pub const HW_NCPUONLINE = 25/;"	constant
HW_PAGESIZE	$ZIGLIB/std/c/openbsd.zig	/^pub const HW_PAGESIZE = 7/;"	constant
HW_PERFPOLICY	$ZIGLIB/std/c/openbsd.zig	/^pub const HW_PERFPOLICY = 23/;"	constant
HW_PHYSMEM	$ZIGLIB/std/c/openbsd.zig	/^pub const HW_PHYSMEM = 5/;"	constant
HW_PHYSMEM64	$ZIGLIB/std/c/openbsd.zig	/^pub const HW_PHYSMEM64 = 19/;"	constant
HW_PRODUCT	$ZIGLIB/std/c/openbsd.zig	/^pub const HW_PRODUCT = 15/;"	constant
HW_SENSORS	$ZIGLIB/std/c/openbsd.zig	/^pub const HW_SENSORS = 11/;"	constant
HW_SERIALNO	$ZIGLIB/std/c/openbsd.zig	/^pub const HW_SERIALNO = 17/;"	constant
HW_SETPERF	$ZIGLIB/std/c/openbsd.zig	/^pub const HW_SETPERF = 13/;"	constant
HW_SMT	$ZIGLIB/std/c/openbsd.zig	/^pub const HW_SMT = 24/;"	constant
HW_USERMEM	$ZIGLIB/std/c/openbsd.zig	/^pub const HW_USERMEM = 6/;"	constant
HW_USERMEM64	$ZIGLIB/std/c/openbsd.zig	/^pub const HW_USERMEM64 = 20/;"	constant
HW_UUID	$ZIGLIB/std/c/openbsd.zig	/^pub const HW_UUID = 18/;"	constant
HW_VENDOR	$ZIGLIB/std/c/openbsd.zig	/^pub const HW_VENDOR = 14/;"	constant
HW_VERSION	$ZIGLIB/std/c/openbsd.zig	/^pub const HW_VERSION = 16/;"	constant
HYLINK	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const HYLINK = 15/;"	constant
HYPERV	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const HYPERV = 34/;"	constant
Half	$ZIGLIB/std/elf.zig	/^pub const Half = switch (@sizeOf(usize)) {$/;"	constant
HalfLimb	$ZIGLIB/std/math/big.zig	/^pub const HalfLimb = std.meta.Int(.unsigned, limb_info.bits \/ 2)/;"	constant
HalfT	$ZIGLIB/compiler_rt/shift.zig	/const HalfT = if (signed_half) HalfTS else HalfTU/;"	constant
HalfTS	$ZIGLIB/compiler_rt/shift.zig	/const HalfTS = std.meta.Int(.signed, bits)/;"	constant
HalfTU	$ZIGLIB/compiler_rt/shift.zig	/const HalfTU = std.meta.Int(.unsigned, bits)/;"	constant
Halves	$ZIGLIB/std/crypto/bcrypt.zig	/const Halves = struct { l: u32, r: u32 }/;"	struct
Handle	$ZIGLIB/std/os/windows.zig	/Handle: HANDLE/;"	field
HandleCount	$ZIGLIB/std/os/windows.zig	/HandleCount: DWORD/;"	field
Handler	$ZIGLIB/std/os/windows.zig	/Handler: ?*EXCEPTION_DISPOSITION/;"	field
HandshakeCipher	$ZIGLIB/std/crypto/tls.zig	/^pub const HandshakeCipher = union(enum) {$/;"	union
HandshakeCipherT	$ZIGLIB/std/crypto/tls.zig	/^pub fn HandshakeCipherT(comptime AeadType: type, comptime HashType: type) type {$/;"	function
HandshakeState	$ZIGLIB/std/crypto/tls/Client.zig	/const HandshakeState = enum {$/;"	enum
HandshakeType	$ZIGLIB/std/crypto/tls.zig	/^pub const HandshakeType = enum(u8) {$/;"	enum
HardDrive	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/HardDrive: *const HardDriveDevicePath/;"	field
HardDriveDevicePath	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/pub const HardDriveDevicePath = extern struct {$/;"	struct
Hardware	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/Hardware: HardwareDevicePath/;"	field
HardwareDevicePath	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/^pub const HardwareDevicePath = union(Subtype) {$/;"	union
HasCheapEql	$ZIGLIB/std/array_hash_map.zig	/const HasCheapEql = AutoArrayHashMap(i32, i32)/;"	constant
HasCheapEqlUn	$ZIGLIB/std/array_hash_map.zig	/const HasCheapEqlUn = AutoArrayHashMapUnmanaged(i32, i32)/;"	constant
HasCustomCallingConv	$ZIGLIB/std/pdb.zig	/HasCustomCallingConv: bool/;"	field
HasExpensiveEql	$ZIGLIB/std/array_hash_map.zig	/const HasExpensiveEql = AutoArrayHashMap([32]i32, i32)/;"	constant
HasExpensiveEqlUn	$ZIGLIB/std/array_hash_map.zig	/const HasExpensiveEqlUn = AutoArrayHashMapUnmanaged([32]i32, i32)/;"	constant
HasFP	$ZIGLIB/std/pdb.zig	/HasFP: bool/;"	field
HasFRET	$ZIGLIB/std/pdb.zig	/HasFRET: bool/;"	field
HasIRET	$ZIGLIB/std/pdb.zig	/HasIRET: bool/;"	field
HasOptimizedDebugInfo	$ZIGLIB/std/pdb.zig	/HasOptimizedDebugInfo: bool/;"	field
Hash	$ZIGLIB/std/hash_map.zig	/pub const Hash = u64/;"	constant
HashHash	$ZIGLIB/std/c/tokenizer.zig	/HashHash/;"	field
HashMap	$ZIGLIB/std/process.zig	/const HashMap = std.HashMap($/;"	constant
HashMapUnmanaged	$ZIGLIB/std/hash_map.zig	/^pub fn HashMapUnmanaged($/;"	function
HashOptions	$ZIGLIB/std/crypto/scrypt.zig	/^pub const HashOptions = struct {$/;"	struct
HashResult	$ZIGLIB/std/hash/cityhash.zig	/const HashResult = @typeInfo(@TypeOf(hash_fn)).Fn.return_type.?/;"	constant
HashStrategy	$ZIGLIB/std/hash/auto_hash.zig	/^pub const HashStrategy = enum {$/;"	enum
HashTableHeader	$ZIGLIB/std/pdb.zig	/const HashTableHeader = extern struct {$/;"	struct
HashVersion	$ZIGLIB/std/pdb.zig	/HashVersion: u32/;"	field
HashedReader	$ZIGLIB/std/compress.zig	/^pub fn HashedReader($/;"	function
Hasher	$ZIGLIB/std/Build/WriteFileStep.zig	/const Hasher = std.crypto.auth.siphash.SipHash128(1, 3)/;"	constant
HasherError	$ZIGLIB/std/crypto.zig	/pub const HasherError = KdfError || phc_format.Error/;"	constant
Haskell	$ZIGLIB/std/dwarf/LANG.zig	/^pub const Haskell = 0x0018/;"	constant
Head	$ZIGLIB/std/os/windows/ws2_32.zig	/Head: *anyopaque/;"	field
HeadLength	$ZIGLIB/std/os/windows/ws2_32.zig	/HeadLength: u32/;"	field
Header	$ZIGLIB/std/tz.zig	/const Header = extern struct {$/;"	struct
HeaderStrategy	$ZIGLIB/std/http/Client.zig	/pub const HeaderStrategy = union(enum) {$/;"	union
Headers	$ZIGLIB/std/http/Client.zig	/pub const Headers = struct {$/;"	struct
HeapAllocator	$ZIGLIB/std/heap.zig	/^pub const HeapAllocator = switch (builtin.os.tag) {$/;"	constant
HeapDeCommitFreeBlockThreshold	$ZIGLIB/std/os/windows.zig	/HeapDeCommitFreeBlockThreshold: ULONG_PTR/;"	field
HeapDeCommitTotalFreeThreshold	$ZIGLIB/std/os/windows.zig	/HeapDeCommitTotalFreeThreshold: ULONG_PTR/;"	field
HeapDestroy	$ZIGLIB/std/os/windows.zig	/^pub fn HeapDestroy(hHeap: HANDLE) void {$/;"	function
HeapFree	$ZIGLIB/std/os/windows.zig	/^pub fn HeapFree(hHeap: HANDLE, dwFlags: DWORD, lpMem: *anyopaque) void {$/;"	function
HeapHandle	$ZIGLIB/std/heap.zig	/const HeapHandle = os.windows.HANDLE/;"	constant
HeapSegmentCommit	$ZIGLIB/std/os/windows.zig	/HeapSegmentCommit: ULONG_PTR/;"	field
HeapSegmentReserve	$ZIGLIB/std/os/windows.zig	/HeapSegmentReserve: ULONG_PTR/;"	field
Held	$ZIGLIB/std/event/lock.zig	/pub const Held = struct {$/;"	struct
HeldLock	$ZIGLIB/std/event/locked.zig	/pub const HeldLock = struct {$/;"	struct
HeldRead	$ZIGLIB/std/event/rwlock.zig	/pub const HeldRead = struct {$/;"	struct
HeldReadLock	$ZIGLIB/std/event/rwlocked.zig	/pub const HeldReadLock = struct {$/;"	struct
HeldWrite	$ZIGLIB/std/event/rwlock.zig	/pub const HeldWrite = struct {$/;"	struct
HeldWriteLock	$ZIGLIB/std/event/rwlocked.zig	/pub const HeldWriteLock = struct {$/;"	struct
Helper	$ZIGLIB/std/zig/c_translation.zig	/const Helper = struct {$/;"	struct
HexEscape	$ZIGLIB/std/c/tokenizer.zig	/HexEscape/;"	field
HiSilicon	$ZIGLIB/std/zig/system/arm.zig	/const HiSilicon = [_]E{$/;"	constant
High	$ZIGLIB/std/os/windows.zig	/High: LONGLONG/;"	field
High1Time	$ZIGLIB/std/os/windows.zig	/High1Time: LONG/;"	field
High2Time	$ZIGLIB/std/os/windows.zig	/High2Time: LONG/;"	field
HighAddress	$ZIGLIB/std/os/windows.zig	/HighAddress: ULONG64/;"	field
Hkdf	$ZIGLIB/std/crypto/tls.zig	/pub const Hkdf = crypto.kdf.hkdf.Hkdf(Hmac)/;"	constant
HkdfSha256	$ZIGLIB/std/crypto/hkdf.zig	/^pub const HkdfSha256 = Hkdf(hmac.sha2.HmacSha256)/;"	constant
HkdfSha512	$ZIGLIB/std/crypto/hkdf.zig	/^pub const HkdfSha512 = Hkdf(hmac.sha2.HmacSha512)/;"	constant
Hmac	$ZIGLIB/std/crypto/tls.zig	/pub const Hmac = crypto.auth.hmac.Hmac(Hash)/;"	constant
HmacMd5	$ZIGLIB/std/crypto/hmac.zig	/^pub const HmacMd5 = Hmac(crypto.hash.Md5)/;"	constant
HmacSha1	$ZIGLIB/std/crypto/hmac.zig	/^pub const HmacSha1 = Hmac(crypto.hash.Sha1)/;"	constant
HmacSha224	$ZIGLIB/std/crypto/hmac.zig	/pub const HmacSha224 = Hmac(crypto.hash.sha2.Sha224)/;"	constant
HmacSha256	$ZIGLIB/std/crypto/hmac.zig	/pub const HmacSha256 = Hmac(crypto.hash.sha2.Sha256)/;"	constant
HmacSha384	$ZIGLIB/std/crypto/hmac.zig	/pub const HmacSha384 = Hmac(crypto.hash.sha2.Sha384)/;"	constant
HmacSha512	$ZIGLIB/std/crypto/hmac.zig	/pub const HmacSha512 = Hmac(crypto.hash.sha2.Sha512)/;"	constant
HostUnreachable	$ZIGLIB/std/os/uefi/status.zig	/HostUnreachable = high_bit | 101/;"	field
HttpError	$ZIGLIB/std/os/uefi/status.zig	/HttpError = high_bit | 35/;"	field
HuffCode	$ZIGLIB/std/compress/deflate/huffman_code.zig	/^pub const HuffCode = struct {$/;"	struct
HuffTest	$ZIGLIB/std/compress/deflate/huffman_bit_writer.zig	/^const HuffTest = struct {$/;"	struct
HuffmanBitWriter	$ZIGLIB/std/compress/deflate/huffman_bit_writer.zig	/^pub fn HuffmanBitWriter(comptime WriterType: type) type {$/;"	function
HuffmanDecoder	$ZIGLIB/std/compress/deflate/decompressor.zig	/^const HuffmanDecoder = struct {$/;"	struct
HuffmanEncoder	$ZIGLIB/std/compress/deflate/huffman_code.zig	/^pub const HuffmanEncoder = struct {$/;"	struct
I256	$ZIGLIB/std/crypto/ghash_polyval.zig	/const I256 = struct {$/;"	struct
I2oDevicePath	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/pub const I2oDevicePath = extern struct {$/;"	struct
I386	$ZIGLIB/std/coff.zig	/I386 = 0x14c/;"	field
IA64	$ZIGLIB/std/coff.zig	/IA64 = 0x200/;"	field
IAMCU	$ZIGLIB/std/elf.zig	/IAMCU = 6/;"	field
IAS_ATTRIB_INT	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IAS_ATTRIB_INT = 1/;"	constant
IAS_ATTRIB_NO_ATTRIB	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IAS_ATTRIB_NO_ATTRIB = 0/;"	constant
IAS_ATTRIB_NO_CLASS	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IAS_ATTRIB_NO_CLASS = 16/;"	constant
IAS_ATTRIB_OCTETSEQ	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IAS_ATTRIB_OCTETSEQ = 2/;"	constant
IAS_ATTRIB_STR	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IAS_ATTRIB_STR = 3/;"	constant
IAS_MAX_ATTRIBNAME	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IAS_MAX_ATTRIBNAME = 256/;"	constant
IAS_MAX_CLASSNAME	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IAS_MAX_CLASSNAME = 64/;"	constant
IAS_MAX_OCTET_STRING	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IAS_MAX_OCTET_STRING = 1024/;"	constant
IAS_MAX_USER_STRING	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IAS_MAX_USER_STRING = 256/;"	constant
IA_64	$ZIGLIB/std/elf.zig	/IA_64 = 50/;"	field
ICANON	$ZIGLIB/std/os/linux.zig	/^pub const ICANON: tcflag_t = 2/;"	constant
ICELANDIC	$ZIGLIB/std/os/windows/lang.zig	/^pub const ICELANDIC = 0x0f/;"	constant
ICELANDIC_ICELAND	$ZIGLIB/std/os/windows/sublang.zig	/^pub const ICELANDIC_ICELAND = 0x01/;"	constant
ICLFXBM	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const ICLFXBM = 31/;"	constant
ICMP	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const ICMP = 1/;"	constant
ICMPV6	$ZIGLIB/std/os/linux.zig	/pub const ICMPV6 = 58/;"	constant
ICMP_ERROR_INFO	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const ICMP_ERROR_INFO = 19/;"	constant
ICM_NOT_ENABLED	$ZIGLIB/std/os/windows/win32error.zig	/ICM_NOT_ENABLED = 2018/;"	field
ICRNL	$ZIGLIB/std/os/linux.zig	/^pub const ICRNL: tcflag_t = 256/;"	constant
IDABORT	$ZIGLIB/std/os/windows/user32.zig	/^pub const IDABORT = 3/;"	constant
IDCANCEL	$ZIGLIB/std/os/windows/user32.zig	/^pub const IDCANCEL = 2/;"	constant
IDCLOSE	$ZIGLIB/std/os/windows/user32.zig	/^pub const IDCLOSE = 8/;"	constant
IDCONTINUE	$ZIGLIB/std/os/windows/user32.zig	/^pub const IDCONTINUE = 11/;"	constant
IDENT	$ZIGLIB/std/macho.zig	/IDENT = 0x8/;"	field
IDENTIFIER	$ZIGLIB/std/os/linux.zig	/pub const IDENTIFIER = 65536/;"	constant
IDFVMLIB	$ZIGLIB/std/macho.zig	/IDFVMLIB = 0x7/;"	field
IDHELP	$ZIGLIB/std/os/windows/user32.zig	/^pub const IDHELP = 9/;"	constant
IDIGNORE	$ZIGLIB/std/os/windows/user32.zig	/^pub const IDIGNORE = 5/;"	constant
IDIV	$ZIGLIB/std/os/linux/arm-eabi.zig	/pub const IDIV = IDIVA | IDIVT/;"	constant
IDIVA	$ZIGLIB/std/os/linux/arm-eabi.zig	/pub const IDIVA = 1 << 17/;"	constant
IDIVT	$ZIGLIB/std/os/linux/arm-eabi.zig	/pub const IDIVT = 1 << 18/;"	constant
IDNO	$ZIGLIB/std/os/windows/user32.zig	/^pub const IDNO = 7/;"	constant
IDN_ENCODE	$ZIGLIB/std/c/linux.zig	/IDN_ENCODE = -105/;"	field
IDOK	$ZIGLIB/std/os/windows/user32.zig	/^pub const IDOK = 1/;"	constant
IDPR	$ZIGLIB/std/c/freebsd.zig	/pub const IDPR = 35/;"	constant
IDRETRY	$ZIGLIB/std/os/windows/user32.zig	/^pub const IDRETRY = 4/;"	constant
IDRM	$ZIGLIB/std/os/wasi.zig	/IDRM = 24/;"	field
IDRP	$ZIGLIB/std/c/freebsd.zig	/pub const IDRP = 45/;"	constant
IDTRYAGAIN	$ZIGLIB/std/os/windows/user32.zig	/^pub const IDTRYAGAIN = 10/;"	constant
IDYES	$ZIGLIB/std/os/windows/user32.zig	/^pub const IDYES = 6/;"	constant
ID_DYLIB	$ZIGLIB/std/macho.zig	/ID_DYLIB = 0xd/;"	field
ID_DYLINKER	$ZIGLIB/std/macho.zig	/ID_DYLINKER = 0xf/;"	field
ID_VALID	$ZIGLIB/std/os/linux/seccomp.zig	/pub const ID_VALID = IOCTL.IOW('!', 2, u64)/;"	constant
IEEE	$ZIGLIB/std/hash/crc.zig	/IEEE = 0xedb88320/;"	field
IEEE80211	$ZIGLIB/std/c/netbsd.zig	/pub const IEEE80211 = 32/;"	constant
IEEE802154	$ZIGLIB/std/os/linux.zig	/pub const IEEE802154 = 36/;"	constant
IEXEC	$ZIGLIB/std/os/wasi.zig	/pub const IEXEC = @compileError("TODO audit this")/;"	constant
IEXTEN	$ZIGLIB/std/os/linux.zig	/^pub const IEXTEN: tcflag_t = 32768/;"	constant
IE_DOCOMMAND	$ZIGLIB/std/os/windows/user32.zig	/^pub const IE_DOCOMMAND = 0x04C8/;"	constant
IE_GETAPPDATA	$ZIGLIB/std/os/windows/user32.zig	/^pub const IE_GETAPPDATA = 0x04B8/;"	constant
IE_GETBKGND	$ZIGLIB/std/os/windows/user32.zig	/^pub const IE_GETBKGND = 0x049C/;"	constant
IE_GETCOMMAND	$ZIGLIB/std/os/windows/user32.zig	/^pub const IE_GETCOMMAND = 0x04C9/;"	constant
IE_GETCOUNT	$ZIGLIB/std/os/windows/user32.zig	/^pub const IE_GETCOUNT = 0x04CA/;"	constant
IE_GETDRAWOPTS	$ZIGLIB/std/os/windows/user32.zig	/^pub const IE_GETDRAWOPTS = 0x04BA/;"	constant
IE_GETERASERTIP	$ZIGLIB/std/os/windows/user32.zig	/^pub const IE_GETERASERTIP = 0x049A/;"	constant
IE_GETFORMAT	$ZIGLIB/std/os/windows/user32.zig	/^pub const IE_GETFORMAT = 0x04BC/;"	constant
IE_GETGESTURE	$ZIGLIB/std/os/windows/user32.zig	/^pub const IE_GETGESTURE = 0x04CB/;"	constant
IE_GETGRIDORIGIN	$ZIGLIB/std/os/windows/user32.zig	/^pub const IE_GETGRIDORIGIN = 0x049E/;"	constant
IE_GETGRIDPEN	$ZIGLIB/std/os/windows/user32.zig	/^pub const IE_GETGRIDPEN = 0x04A0/;"	constant
IE_GETGRIDSIZE	$ZIGLIB/std/os/windows/user32.zig	/^pub const IE_GETGRIDSIZE = 0x04A2/;"	constant
IE_GETINK	$ZIGLIB/std/os/windows/user32.zig	/^pub const IE_GETINK = 0x0496/;"	constant
IE_GETINKINPUT	$ZIGLIB/std/os/windows/user32.zig	/^pub const IE_GETINKINPUT = 0x04BE/;"	constant
IE_GETINKRECT	$ZIGLIB/std/os/windows/user32.zig	/^pub const IE_GETINKRECT = 0x04A6/;"	constant
IE_GETMENU	$ZIGLIB/std/os/windows/user32.zig	/^pub const IE_GETMENU = 0x04CC/;"	constant
IE_GETMODE	$ZIGLIB/std/os/windows/user32.zig	/^pub const IE_GETMODE = 0x04A4/;"	constant
IE_GETNOTIFY	$ZIGLIB/std/os/windows/user32.zig	/^pub const IE_GETNOTIFY = 0x04C0/;"	constant
IE_GETPAINTDC	$ZIGLIB/std/os/windows/user32.zig	/^pub const IE_GETPAINTDC = 0x04CD/;"	constant
IE_GETPDEVENT	$ZIGLIB/std/os/windows/user32.zig	/^pub const IE_GETPDEVENT = 0x04CE/;"	constant
IE_GETPENTIP	$ZIGLIB/std/os/windows/user32.zig	/^pub const IE_GETPENTIP = 0x0498/;"	constant
IE_GETRECOG	$ZIGLIB/std/os/windows/user32.zig	/^pub const IE_GETRECOG = 0x04C2/;"	constant
IE_GETSECURITY	$ZIGLIB/std/os/windows/user32.zig	/^pub const IE_GETSECURITY = 0x04C4/;"	constant
IE_GETSEL	$ZIGLIB/std/os/windows/user32.zig	/^pub const IE_GETSEL = 0x04C6/;"	constant
IE_GETSELCOUNT	$ZIGLIB/std/os/windows/user32.zig	/^pub const IE_GETSELCOUNT = 0x04CF/;"	constant
IE_GETSELITEMS	$ZIGLIB/std/os/windows/user32.zig	/^pub const IE_GETSELITEMS = 0x04D0/;"	constant
IE_GETSTYLE	$ZIGLIB/std/os/windows/user32.zig	/^pub const IE_GETSTYLE = 0x04D1/;"	constant
IE_SETAPPDATA	$ZIGLIB/std/os/windows/user32.zig	/^pub const IE_SETAPPDATA = 0x04B9/;"	constant
IE_SETBKGND	$ZIGLIB/std/os/windows/user32.zig	/^pub const IE_SETBKGND = 0x049D/;"	constant
IE_SETDRAWOPTS	$ZIGLIB/std/os/windows/user32.zig	/^pub const IE_SETDRAWOPTS = 0x04BB/;"	constant
IE_SETERASERTIP	$ZIGLIB/std/os/windows/user32.zig	/^pub const IE_SETERASERTIP = 0x049B/;"	constant
IE_SETFORMAT	$ZIGLIB/std/os/windows/user32.zig	/^pub const IE_SETFORMAT = 0x04BD/;"	constant
IE_SETGRIDORIGIN	$ZIGLIB/std/os/windows/user32.zig	/^pub const IE_SETGRIDORIGIN = 0x049F/;"	constant
IE_SETGRIDPEN	$ZIGLIB/std/os/windows/user32.zig	/^pub const IE_SETGRIDPEN = 0x04A1/;"	constant
IE_SETGRIDSIZE	$ZIGLIB/std/os/windows/user32.zig	/^pub const IE_SETGRIDSIZE = 0x04A3/;"	constant
IE_SETINK	$ZIGLIB/std/os/windows/user32.zig	/^pub const IE_SETINK = 0x0497/;"	constant
IE_SETINKINPUT	$ZIGLIB/std/os/windows/user32.zig	/^pub const IE_SETINKINPUT = 0x04BF/;"	constant
IE_SETMODE	$ZIGLIB/std/os/windows/user32.zig	/^pub const IE_SETMODE = 0x04A5/;"	constant
IE_SETNOTIFY	$ZIGLIB/std/os/windows/user32.zig	/^pub const IE_SETNOTIFY = 0x04C1/;"	constant
IE_SETPENTIP	$ZIGLIB/std/os/windows/user32.zig	/^pub const IE_SETPENTIP = 0x0499/;"	constant
IE_SETRECOG	$ZIGLIB/std/os/windows/user32.zig	/^pub const IE_SETRECOG = 0x04C3/;"	constant
IE_SETSECURITY	$ZIGLIB/std/os/windows/user32.zig	/^pub const IE_SETSECURITY = 0x04C5/;"	constant
IE_SETSEL	$ZIGLIB/std/os/windows/user32.zig	/^pub const IE_SETSEL = 0x04C7/;"	constant
IFALIAS	$ZIGLIB/std/os/linux.zig	/IFALIAS/;"	field
IFBLK	$ZIGLIB/std/os/wasi.zig	/pub const IFBLK = 0x6000/;"	constant
IFCHR	$ZIGLIB/std/os/wasi.zig	/pub const IFCHR = 0x2000/;"	constant
IFCONTINUED	$ZIGLIB/std/c/solaris.zig	/pub fn IFCONTINUED(s: u32) bool {$/;"	function
IFDB	$ZIGLIB/std/c/dragonfly.zig	/pub const IFDB = 36864/;"	constant
IFDIR	$ZIGLIB/std/os/wasi.zig	/pub const IFDIR = 0x4000/;"	constant
IFDOOR	$ZIGLIB/std/c/solaris.zig	/pub const IFDOOR = 0o150000/;"	constant
IFEOKey	$ZIGLIB/std/os/windows.zig	/IFEOKey: PVOID/;"	field
IFEXITED	$ZIGLIB/std/os/linux.zig	/pub fn IFEXITED(s: u32) bool {$/;"	function
IFF_BROADCAST	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IFF_BROADCAST = 2/;"	constant
IFF_LOOPBACK	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IFF_LOOPBACK = 4/;"	constant
IFF_MULTICAST	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IFF_MULTICAST = 16/;"	constant
IFF_POINTTOPOINT	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IFF_POINTTOPOINT = 8/;"	constant
IFF_UP	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IFF_UP = 1/;"	constant
IFIFO	$ZIGLIB/std/os/wasi.zig	/pub const IFIFO = 0xc000/;"	constant
IFLA	$ZIGLIB/std/os/linux.zig	/^pub const IFLA = enum(c_ushort) {$/;"	enum
IFLNK	$ZIGLIB/std/os/wasi.zig	/pub const IFLNK = 0xa000/;"	constant
IFLUSH	$ZIGLIB/std/c/solaris.zig	/pub const IFLUSH = 2010/;"	constant
IFMT	$ZIGLIB/std/os/wasi.zig	/pub const IFMT = IFBLK | IFCHR | IFDIR | IFIFO | IFLNK | IFREG | IFSOCK/;"	constant
IFNAME	$ZIGLIB/std/os/linux.zig	/IFNAME/;"	field
IFNAMESIZE	$ZIGLIB/std/os/linux.zig	/^pub const IFNAMESIZE = 16/;"	constant
IFPORT	$ZIGLIB/std/c/solaris.zig	/pub const IFPORT = 0o160000/;"	constant
IFREG	$ZIGLIB/std/os/wasi.zig	/pub const IFREG = 0x8000/;"	constant
IFSIGNALED	$ZIGLIB/std/os/linux.zig	/pub fn IFSIGNALED(s: u32) bool {$/;"	function
IFSOCK	$ZIGLIB/std/os/wasi.zig	/pub const IFSOCK = 0x1/;"	constant
IFSTOPPED	$ZIGLIB/std/os/linux.zig	/pub fn IFSTOPPED(s: u32) bool {$/;"	function
IFWHT	$ZIGLIB/std/c/netbsd.zig	/pub const IFWHT = 0o160000/;"	constant
IF_NETNSID	$ZIGLIB/std/os/linux.zig	/IF_NETNSID/;"	field
IGBO	$ZIGLIB/std/os/windows/lang.zig	/^pub const IGBO = 0x70/;"	constant
IGBO_NIGERIA	$ZIGLIB/std/os/windows/sublang.zig	/^pub const IGBO_NIGERIA = 0x01/;"	constant
IGMP	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const IGMP = 2/;"	constant
IGNBRK	$ZIGLIB/std/os/linux.zig	/^pub const IGNBRK: tcflag_t = 1/;"	constant
IGNCR	$ZIGLIB/std/os/linux.zig	/^pub const IGNCR: tcflag_t = 128/;"	constant
IGNORED	$ZIGLIB/std/os/linux.zig	/pub const IGNORED = 0x00008000/;"	constant
IGNPAR	$ZIGLIB/std/os/linux.zig	/^pub const IGNPAR: tcflag_t = 4/;"	constant
IGRP	$ZIGLIB/std/c/freebsd.zig	/pub const IGRP = 88/;"	constant
ILLEGAL_CHARACTER	$ZIGLIB/std/os/windows/win32error.zig	/ILLEGAL_CHARACTER = 582/;"	field
ILLEGAL_DLL_RELOCATION	$ZIGLIB/std/os/windows/win32error.zig	/ILLEGAL_DLL_RELOCATION = 623/;"	field
ILLEGAL_ELEMENT_ADDRESS	$ZIGLIB/std/os/windows/win32error.zig	/ILLEGAL_ELEMENT_ADDRESS = 1162/;"	field
ILLEGAL_FLOAT_CONTEXT	$ZIGLIB/std/os/windows/win32error.zig	/ILLEGAL_FLOAT_CONTEXT = 579/;"	field
ILLEGAL_FUNCTION	$ZIGLIB/std/os/windows/ntstatus.zig	/ILLEGAL_FUNCTION = 0xC00000AF/;"	field
ILLEGAL_INSTRUCTION	$ZIGLIB/std/os/windows/ntstatus.zig	/ILLEGAL_INSTRUCTION = 0xC000001D/;"	field
ILL_FORMED_PASSWORD	$ZIGLIB/std/os/windows/win32error.zig	/ILL_FORMED_PASSWORD = 1324/;"	field
ILL_FORMED_SERVICE_ENTRY	$ZIGLIB/std/os/windows/ntstatus.zig	/ILL_FORMED_SERVICE_ENTRY = 0xC0000160/;"	field
ILLines	$ZIGLIB/std/pdb.zig	/ILLines = 0xf9/;"	field
ILSEQ	$ZIGLIB/std/os/wasi.zig	/ILSEQ = 25/;"	field
ILTCG	$ZIGLIB/std/coff.zig	/ILTCG = 14/;"	field
IMAGE_ALREADY_LOADED	$ZIGLIB/std/os/windows/ntstatus.zig	/IMAGE_ALREADY_LOADED = 0xC000010E/;"	field
IMAGE_ALREADY_LOADED_AS_DLL	$ZIGLIB/std/os/windows/ntstatus.zig	/IMAGE_ALREADY_LOADED_AS_DLL = 0xC000019D/;"	field
IMAGE_AT_DIFFERENT_BASE	$ZIGLIB/std/os/windows/win32error.zig	/IMAGE_AT_DIFFERENT_BASE = 807/;"	field
IMAGE_CERT_REVOKED	$ZIGLIB/std/os/windows/ntstatus.zig	/IMAGE_CERT_REVOKED = 0xC0000603/;"	field
IMAGE_CHECKSUM_MISMATCH	$ZIGLIB/std/os/windows/ntstatus.zig	/IMAGE_CHECKSUM_MISMATCH = 0xC0000221/;"	field
IMAGE_MACHINE_TYPE_MISMATCH	$ZIGLIB/std/os/windows/win32error.zig	/IMAGE_MACHINE_TYPE_MISMATCH = 706/;"	field
IMAGE_MACHINE_TYPE_MISMATCH_EXE	$ZIGLIB/std/os/windows/win32error.zig	/IMAGE_MACHINE_TYPE_MISMATCH_EXE = 720/;"	field
IMAGE_MP_UP_MISMATCH	$ZIGLIB/std/os/windows/ntstatus.zig	/IMAGE_MP_UP_MISMATCH = 0xC0000249/;"	field
IMAGE_NOT_AT_BASE	$ZIGLIB/std/os/windows/win32error.zig	/IMAGE_NOT_AT_BASE = 700/;"	field
IMAGE_NT_OPTIONAL_HDR32_MAGIC	$ZIGLIB/std/coff.zig	/^pub const IMAGE_NT_OPTIONAL_HDR32_MAGIC = 0x10b/;"	constant
IMAGE_NT_OPTIONAL_HDR64_MAGIC	$ZIGLIB/std/coff.zig	/^pub const IMAGE_NT_OPTIONAL_HDR64_MAGIC = 0x20b/;"	constant
IMAGE_NUMBEROF_DIRECTORY_ENTRIES	$ZIGLIB/std/coff.zig	/^pub const IMAGE_NUMBEROF_DIRECTORY_ENTRIES = 16/;"	constant
IMAGE_SUBSYSTEM_NOT_PRESENT	$ZIGLIB/std/os/windows/win32error.zig	/IMAGE_SUBSYSTEM_NOT_PRESENT = 308/;"	field
IMAGE_TLS_DIRECTORY	$ZIGLIB/std/start_windows_tls.zig	/^pub const IMAGE_TLS_DIRECTORY = extern struct {$/;"	struct
IMAGE_TLS_DIRECTORY32	$ZIGLIB/std/os/windows.zig	/^pub const IMAGE_TLS_DIRECTORY32 = IMAGE_TLS_DIRECTORY/;"	constant
IMAGE_TLS_DIRECTORY64	$ZIGLIB/std/os/windows.zig	/^pub const IMAGE_TLS_DIRECTORY64 = IMAGE_TLS_DIRECTORY/;"	constant
IMAXBEL	$ZIGLIB/std/os/linux.zig	/^pub const IMAXBEL: tcflag_t = 8192/;"	constant
IMEOUT	$ZIGLIB/std/os/windows/win32error.zig	/IMEOUT = 258/;"	field
IMPLEMENTATION_LIMIT	$ZIGLIB/std/os/windows/win32error.zig	/IMPLEMENTATION_LIMIT = 1292/;"	field
IMPLINK	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const IMPLINK = 3/;"	constant
IMPLINK_HIGHEXPER	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IMPLINK_HIGHEXPER = 158/;"	constant
IMPLINK_IP	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IMPLINK_IP = 155/;"	constant
IMPLINK_LOWEXPER	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IMPLINK_LOWEXPER = 156/;"	constant
IMPORT	$ZIGLIB/std/coff.zig	/IMPORT = 1/;"	field
IN4ADDR_LINKLOCALPREFIX_LENGTH	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IN4ADDR_LINKLOCALPREFIX_LENGTH = 16/;"	constant
IN4ADDR_LOOPBACK	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IN4ADDR_LOOPBACK = 16777343/;"	constant
IN4ADDR_LOOPBACKPREFIX_LENGTH	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IN4ADDR_LOOPBACKPREFIX_LENGTH = 8/;"	constant
IN4ADDR_MULTICASTPREFIX_LENGTH	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IN4ADDR_MULTICASTPREFIX_LENGTH = 4/;"	constant
IN6ADDR_6TO4PREFIX_LENGTH	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IN6ADDR_6TO4PREFIX_LENGTH = 16/;"	constant
IN6ADDR_LINKLOCALPREFIX_LENGTH	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IN6ADDR_LINKLOCALPREFIX_LENGTH = 64/;"	constant
IN6ADDR_MULTICASTPREFIX_LENGTH	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IN6ADDR_MULTICASTPREFIX_LENGTH = 8/;"	constant
IN6ADDR_SOLICITEDNODEMULTICASTPREFIX_LENGTH	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IN6ADDR_SOLICITEDNODEMULTICASTPREFIX_LENGTH = 104/;"	constant
IN6ADDR_TEREDOPREFIX_LENGTH	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IN6ADDR_TEREDOPREFIX_LENGTH = 32/;"	constant
IN6ADDR_V4MAPPEDPREFIX_LENGTH	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IN6ADDR_V4MAPPEDPREFIX_LENGTH = 96/;"	constant
IN6_IS_ADDR_LINKLOCAL	$ZIGLIB/std/net.zig	/^fn IN6_IS_ADDR_LINKLOCAL(a: [16]u8) bool {$/;"	function
IN6_IS_ADDR_LOOPBACK	$ZIGLIB/std/net.zig	/^fn IN6_IS_ADDR_LOOPBACK(a: [16]u8) bool {$/;"	function
IN6_IS_ADDR_MULTICAST	$ZIGLIB/std/net.zig	/^fn IN6_IS_ADDR_MULTICAST(a: [16]u8) bool {$/;"	function
IN6_IS_ADDR_SITELOCAL	$ZIGLIB/std/net.zig	/^fn IN6_IS_ADDR_SITELOCAL(a: [16]u8) bool {$/;"	function
INADDR_LOOPBACK	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const INADDR_LOOPBACK = 2130706433/;"	constant
INADDR_NONE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const INADDR_NONE = 4294967295/;"	constant
INCL_WINSOCK_API_PROTOTYPES	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const INCL_WINSOCK_API_PROTOTYPES = 1/;"	constant
INCL_WINSOCK_API_TYPEDEFS	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const INCL_WINSOCK_API_TYPEDEFS = 0/;"	constant
INCOMING_CPU	$ZIGLIB/std/os/linux.zig	/pub const INCOMING_CPU = 51/;"	constant
INCOMING_NAPI_ID	$ZIGLIB/std/os/linux.zig	/pub const INCOMING_NAPI_ID = 58/;"	constant
INCOMPATIBLE_DRIVER_BLOCKED	$ZIGLIB/std/os/windows/ntstatus.zig	/INCOMPATIBLE_DRIVER_BLOCKED = 0xC0000424/;"	field
INCOMPATIBLE_FILE_MAP	$ZIGLIB/std/os/windows/ntstatus.zig	/INCOMPATIBLE_FILE_MAP = 0xC000004D/;"	field
INCOMPATIBLE_SERVICE_PRIVILEGE	$ZIGLIB/std/os/windows/win32error.zig	/INCOMPATIBLE_SERVICE_PRIVILEGE = 1297/;"	field
INCOMPATIBLE_SERVICE_SID_TYPE	$ZIGLIB/std/os/windows/win32error.zig	/INCOMPATIBLE_SERVICE_SID_TYPE = 1290/;"	field
INCOMPATIBLE_WITH_GLOBAL_SHORT_NAME_REGISTRY_SETTING	$ZIGLIB/std/os/windows/win32error.zig	/INCOMPATIBLE_WITH_GLOBAL_SHORT_NAME_REGISTRY_SETTING = 304/;"	field
INCORRECT_ADDRESS	$ZIGLIB/std/os/windows/win32error.zig	/INCORRECT_ADDRESS = 1241/;"	field
INCORRECT_SIZE	$ZIGLIB/std/os/windows/win32error.zig	/INCORRECT_SIZE = 1462/;"	field
INDEX_ABSENT	$ZIGLIB/std/os/windows/win32error.zig	/INDEX_ABSENT = 1611/;"	field
INDEX_DIR	$ZIGLIB/std/c/haiku.zig	/pub const INDEX_DIR = 0o4000000000/;"	constant
INDIRECT_SYMBOL_ABS	$ZIGLIB/std/macho.zig	/^pub const INDIRECT_SYMBOL_ABS: u32 = 0x40000000/;"	constant
INDIRECT_SYMBOL_LOCAL	$ZIGLIB/std/macho.zig	/^pub const INDIRECT_SYMBOL_LOCAL: u32 = 0x80000000/;"	constant
INDONESIAN	$ZIGLIB/std/os/windows/lang.zig	/^pub const INDONESIAN = 0x21/;"	constant
INDONESIAN_INDONESIA	$ZIGLIB/std/os/windows/sublang.zig	/^pub const INDONESIAN_INDONESIA = 0x01/;"	constant
INDOUBT_TRANSACTIONS_EXIST	$ZIGLIB/std/os/windows/ntstatus.zig	/INDOUBT_TRANSACTIONS_EXIST = 0xC019003A/;"	field
IND_CALL	$ZIGLIB/std/os/linux.zig	/pub const IND_CALL = 1 << 6/;"	constant
IND_JUMP	$ZIGLIB/std/os/linux.zig	/pub const IND_JUMP = 1 << 12/;"	constant
INET	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const INET = 2/;"	constant
INET6	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const INET6 = 23/;"	constant
INET6_ADDRSTRLEN	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const INET6_ADDRSTRLEN = 65/;"	constant
INET6_SDP	$ZIGLIB/std/c/freebsd.zig	/pub const INET6_SDP = 42/;"	constant
INET_ADDRSTRLEN	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const INET_ADDRSTRLEN = 22/;"	constant
INET_OFFLOAD	$ZIGLIB/std/c/solaris.zig	/pub const INET_OFFLOAD = 30/;"	constant
INET_SDP	$ZIGLIB/std/c/freebsd.zig	/pub const INET_SDP = 40/;"	constant
INFINITE	$ZIGLIB/std/os/windows.zig	/^pub const INFINITE = 4294967295/;"	constant
INFINITY	$ZIGLIB/std/os/linux.zig	/pub const INFINITY = ~@as(rlim_t, 0)/;"	constant
INFLOOP_IN_RELOC_CHAIN	$ZIGLIB/std/os/windows/win32error.zig	/INFLOOP_IN_RELOC_CHAIN = 202/;"	field
INFO	$ZIGLIB/std/os/linux.zig	/pub const INFO = 11/;"	constant
INFO_LENGTH_MISMATCH	$ZIGLIB/std/os/windows/ntstatus.zig	/INFO_LENGTH_MISMATCH = 0xC0000004/;"	field
INHERIT	$ZIGLIB/std/c/openbsd.zig	/pub const INHERIT = 0/;"	constant
INIGNEOF	$ZIGLIB/std/c/freebsd.zig	/pub const INIGNEOF = 0x2000/;"	constant
INITDATA	$ZIGLIB/std/c/solaris.zig	/pub const INITDATA = 0x0800/;"	constant
INIT_ONCE	$ZIGLIB/std/os/windows.zig	/^pub const INIT_ONCE = RTL_RUN_ONCE/;"	constant
INIT_ONCE_FN	$ZIGLIB/std/os/windows.zig	/^pub const INIT_ONCE_FN = *const fn (InitOnce: *INIT_ONCE, Parameter: ?*anyopaque, Context: ?*anyopaque) callconv(.C) BOOL/;"	constant
INIT_ONCE_STATIC_INIT	$ZIGLIB/std/os/windows.zig	/^pub const INIT_ONCE_STATIC_INIT = RTL_RUN_ONCE_INIT/;"	constant
INLCR	$ZIGLIB/std/os/linux.zig	/^pub const INLCR: tcflag_t = 64/;"	constant
INLSP	$ZIGLIB/std/c/freebsd.zig	/pub const INLSP = 52/;"	constant
INPCK	$ZIGLIB/std/os/linux.zig	/^pub const INPCK: tcflag_t = 16/;"	constant
INPROGRESS	$ZIGLIB/std/os/wasi.zig	/INPROGRESS = 26/;"	field
INSTALL_ALREADY_RUNNING	$ZIGLIB/std/os/windows/win32error.zig	/INSTALL_ALREADY_RUNNING = 1618/;"	field
INSTALL_FAILURE	$ZIGLIB/std/os/windows/win32error.zig	/INSTALL_FAILURE = 1603/;"	field
INSTALL_LANGUAGE_UNSUPPORTED	$ZIGLIB/std/os/windows/win32error.zig	/INSTALL_LANGUAGE_UNSUPPORTED = 1623/;"	field
INSTALL_LOG_FAILURE	$ZIGLIB/std/os/windows/win32error.zig	/INSTALL_LOG_FAILURE = 1622/;"	field
INSTALL_NOTUSED	$ZIGLIB/std/os/windows/win32error.zig	/INSTALL_NOTUSED = 1634/;"	field
INSTALL_PACKAGE_INVALID	$ZIGLIB/std/os/windows/win32error.zig	/INSTALL_PACKAGE_INVALID = 1620/;"	field
INSTALL_PACKAGE_OPEN_FAILED	$ZIGLIB/std/os/windows/win32error.zig	/INSTALL_PACKAGE_OPEN_FAILED = 1619/;"	field
INSTALL_PACKAGE_REJECTED	$ZIGLIB/std/os/windows/win32error.zig	/INSTALL_PACKAGE_REJECTED = 1625/;"	field
INSTALL_PACKAGE_VERSION	$ZIGLIB/std/os/windows/win32error.zig	/INSTALL_PACKAGE_VERSION = 1613/;"	field
INSTALL_PLATFORM_UNSUPPORTED	$ZIGLIB/std/os/windows/win32error.zig	/INSTALL_PLATFORM_UNSUPPORTED = 1633/;"	field
INSTALL_REJECTED	$ZIGLIB/std/os/windows/win32error.zig	/INSTALL_REJECTED = 1654/;"	field
INSTALL_REMOTE_DISALLOWED	$ZIGLIB/std/os/windows/win32error.zig	/INSTALL_REMOTE_DISALLOWED = 1640/;"	field
INSTALL_REMOTE_PROHIBITED	$ZIGLIB/std/os/windows/win32error.zig	/INSTALL_REMOTE_PROHIBITED = 1645/;"	field
INSTALL_SERVICE_FAILURE	$ZIGLIB/std/os/windows/win32error.zig	/INSTALL_SERVICE_FAILURE = 1601/;"	field
INSTALL_SERVICE_SAFEBOOT	$ZIGLIB/std/os/windows/win32error.zig	/INSTALL_SERVICE_SAFEBOOT = 1652/;"	field
INSTALL_SOURCE_ABSENT	$ZIGLIB/std/os/windows/win32error.zig	/INSTALL_SOURCE_ABSENT = 1612/;"	field
INSTALL_SUSPEND	$ZIGLIB/std/os/windows/win32error.zig	/INSTALL_SUSPEND = 1604/;"	field
INSTALL_TEMP_UNWRITABLE	$ZIGLIB/std/os/windows/win32error.zig	/INSTALL_TEMP_UNWRITABLE = 1632/;"	field
INSTALL_TRANSFORM_FAILURE	$ZIGLIB/std/os/windows/win32error.zig	/INSTALL_TRANSFORM_FAILURE = 1624/;"	field
INSTALL_TRANSFORM_REJECTED	$ZIGLIB/std/os/windows/win32error.zig	/INSTALL_TRANSFORM_REJECTED = 1644/;"	field
INSTALL_UI_FAILURE	$ZIGLIB/std/os/windows/win32error.zig	/INSTALL_UI_FAILURE = 1621/;"	field
INSTALL_USEREXIT	$ZIGLIB/std/os/windows/win32error.zig	/INSTALL_USEREXIT = 1602/;"	field
INSTANCE_NOT_AVAILABLE	$ZIGLIB/std/os/windows/ntstatus.zig	/INSTANCE_NOT_AVAILABLE = 0xC00000AB/;"	field
INSTRUCTIONS	$ZIGLIB/std/os/linux.zig	/INSTRUCTIONS/;"	field
INSTRUCTION_MISALIGNMENT	$ZIGLIB/std/os/windows/win32error.zig	/INSTRUCTION_MISALIGNMENT = 549/;"	field
INSUFFICIENT_BUFFER	$ZIGLIB/std/os/windows/win32error.zig	/INSUFFICIENT_BUFFER = 122/;"	field
INSUFFICIENT_BUFFER_SIZE	$ZIGLIB/std/c/darwin.zig	/INSUFFICIENT_BUFFER_SIZE = 52/;"	field
INSUFFICIENT_LOGON_INFO	$ZIGLIB/std/os/windows/win32error.zig	/INSUFFICIENT_LOGON_INFO = 608/;"	field
INSUFFICIENT_NVRAM_RESOURCES	$ZIGLIB/std/os/windows/ntstatus.zig	/INSUFFICIENT_NVRAM_RESOURCES = 0xC0000454/;"	field
INSUFFICIENT_POWER	$ZIGLIB/std/os/windows/win32error.zig	/INSUFFICIENT_POWER = 639/;"	field
INSUFFICIENT_RESOURCES	$ZIGLIB/std/os/windows/ntstatus.zig	/INSUFFICIENT_RESOURCES = 0xC000009A/;"	field
INSUFFICIENT_RESOURCE_FOR_SPECIFIED_SHARED_SECTION_SIZE	$ZIGLIB/std/os/windows/win32error.zig	/INSUFFICIENT_RESOURCE_FOR_SPECIFIED_SHARED_SECTION_SIZE = 781/;"	field
INSUFF_SERVER_RESOURCES	$ZIGLIB/std/os/windows/ntstatus.zig	/INSUFF_SERVER_RESOURCES = 0xC0000205/;"	field
INTEGER_DIVIDE_BY_ZERO	$ZIGLIB/std/os/windows/ntstatus.zig	/INTEGER_DIVIDE_BY_ZERO = 0xC0000094/;"	field
INTEGER_OVERFLOW	$ZIGLIB/std/os/windows/ntstatus.zig	/INTEGER_OVERFLOW = 0xC0000095/;"	field
INTEGRITY	$ZIGLIB/std/c/freebsd.zig	/INTEGRITY = 97/;"	field
INTEL205	$ZIGLIB/std/elf.zig	/INTEL205 = 205/;"	field
INTEL206	$ZIGLIB/std/elf.zig	/INTEL206 = 206/;"	field
INTEL207	$ZIGLIB/std/elf.zig	/INTEL207 = 207/;"	field
INTEL208	$ZIGLIB/std/elf.zig	/INTEL208 = 208/;"	field
INTEL209	$ZIGLIB/std/elf.zig	/INTEL209 = 209/;"	field
INTEL_6_13	$ZIGLIB/std/c/darwin.zig	/INTEL_6_13 = 0xaa33392b/;"	field
INTEL_BROADWELL	$ZIGLIB/std/c/darwin.zig	/INTEL_BROADWELL = 0x582ed09c/;"	field
INTEL_HASWELL	$ZIGLIB/std/c/darwin.zig	/INTEL_HASWELL = 0x10b282dc/;"	field
INTEL_IVYBRIDGE	$ZIGLIB/std/c/darwin.zig	/INTEL_IVYBRIDGE = 0x1f65e835/;"	field
INTEL_KABYLAKE	$ZIGLIB/std/c/darwin.zig	/INTEL_KABYLAKE = 0x0f817246/;"	field
INTEL_NEHALEM	$ZIGLIB/std/c/darwin.zig	/INTEL_NEHALEM = 0x6b5a4cd2/;"	field
INTEL_PENRYN	$ZIGLIB/std/c/darwin.zig	/INTEL_PENRYN = 0x78ea4fbc/;"	field
INTEL_SANDYBRIDGE	$ZIGLIB/std/c/darwin.zig	/INTEL_SANDYBRIDGE = 0x5490b78c/;"	field
INTEL_SKYLAKE	$ZIGLIB/std/c/darwin.zig	/INTEL_SKYLAKE = 0x37fc219f/;"	field
INTEL_WESTMERE	$ZIGLIB/std/c/darwin.zig	/INTEL_WESTMERE = 0x573b5eec/;"	field
INTERACTIVE	$ZIGLIB/std/c/openbsd.zig	/pub const INTERACTIVE: auth_item_t = 6/;"	constant
INTERMIXED_KERNEL_EA_OPERATION	$ZIGLIB/std/os/windows/win32error.zig	/INTERMIXED_KERNEL_EA_OPERATION = 324/;"	field
INTERNAL	$ZIGLIB/std/elf.zig	/INTERNAL = 1/;"	field
INTERNAL_DB_CORRUPTION	$ZIGLIB/std/os/windows/win32error.zig	/INTERNAL_DB_CORRUPTION = 1358/;"	field
INTERNAL_DB_ERROR	$ZIGLIB/std/os/windows/win32error.zig	/INTERNAL_DB_ERROR = 1383/;"	field
INTERNAL_ERROR	$ZIGLIB/std/os/windows/win32error.zig	/INTERNAL_ERROR = 1359/;"	field
INTERNET_PASSWORD	$ZIGLIB/std/os/darwin/cssm.zig	/INTERNET_PASSWORD = DB_RECORDTYPE_APP_DEFINED_START + 1/;"	field
INTERRUPT	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const INTERRUPT = 16/;"	constant
INTERRUPT_STILL_CONNECTED	$ZIGLIB/std/os/windows/win32error.zig	/INTERRUPT_STILL_CONNECTED = 764/;"	field
INTERRUPT_VECTOR_ALREADY_CONNECTED	$ZIGLIB/std/os/windows/win32error.zig	/INTERRUPT_VECTOR_ALREADY_CONNECTED = 763/;"	field
INTO_CGROUP	$ZIGLIB/std/os/linux.zig	/pub const INTO_CGROUP = 0x200000000/;"	constant
INTR	$ZIGLIB/std/os/wasi.zig	/INTR = 27/;"	field
INTRCNT	$ZIGLIB/std/c/openbsd.zig	/pub const INTRCNT = 63/;"	constant
INUKTITUT	$ZIGLIB/std/os/windows/lang.zig	/^pub const INUKTITUT = 0x5d/;"	constant
INUKTITUT_CANADA	$ZIGLIB/std/os/windows/sublang.zig	/^pub const INUKTITUT_CANADA = 0x01/;"	constant
INUKTITUT_CANADA_LATIN	$ZIGLIB/std/os/windows/sublang.zig	/^pub const INUKTITUT_CANADA_LATIN = 0x02/;"	constant
INVAL	$ZIGLIB/std/os/wasi.zig	/INVAL = 28/;"	field
INVALIDATE	$ZIGLIB/std/os/linux.zig	/pub const INVALIDATE = 2/;"	constant
INVALID_ACCEL_HANDLE	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_ACCEL_HANDLE = 1403/;"	field
INVALID_ACCESS	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_ACCESS = 12/;"	field
INVALID_ACCOUNT_NAME	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_ACCOUNT_NAME = 1315/;"	field
INVALID_ACE_CONDITION	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_ACE_CONDITION = 805/;"	field
INVALID_ACL	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_ACL = 1336/;"	field
INVALID_ADDRESS	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_ADDRESS = 487/;"	field
INVALID_ADDRESS_COMPONENT	$ZIGLIB/std/os/windows/ntstatus.zig	/INVALID_ADDRESS_COMPONENT = 0xC0000207/;"	field
INVALID_ADDRESS_WILDCARD	$ZIGLIB/std/os/windows/ntstatus.zig	/INVALID_ADDRESS_WILDCARD = 0xC0000208/;"	field
INVALID_ARGUMENT	$ZIGLIB/std/c/darwin.zig	/INVALID_ARGUMENT = 4/;"	field
INVALID_AT_INTERRUPT_TIME	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_AT_INTERRUPT_TIME = 104/;"	field
INVALID_BLOCK	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_BLOCK = 9/;"	field
INVALID_BLOCK_LENGTH	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_BLOCK_LENGTH = 1106/;"	field
INVALID_BUFFER_SIZE	$ZIGLIB/std/os/windows/ntstatus.zig	/INVALID_BUFFER_SIZE = 0xC0000206/;"	field
INVALID_CAP	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_CAP = 320/;"	field
INVALID_CAPABILITY	$ZIGLIB/std/c/darwin.zig	/INVALID_CAPABILITY = 20/;"	field
INVALID_CATEGORY	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_CATEGORY = 117/;"	field
INVALID_CID	$ZIGLIB/std/os/windows/ntstatus.zig	/INVALID_CID = 0xC000000B/;"	field
INVALID_CMM	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_CMM = 2010/;"	field
INVALID_COLORINDEX	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_COLORINDEX = 2022/;"	field
INVALID_COLORSPACE	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_COLORSPACE = 2017/;"	field
INVALID_COMBOBOX_MESSAGE	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_COMBOBOX_MESSAGE = 1422/;"	field
INVALID_COMMAND_LINE	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_COMMAND_LINE = 1639/;"	field
INVALID_COMPUTERNAME	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_COMPUTERNAME = 1210/;"	field
INVALID_COMPUTER_NAME	$ZIGLIB/std/os/windows/ntstatus.zig	/INVALID_COMPUTER_NAME = 0xC0000122/;"	field
INVALID_CONNECTION	$ZIGLIB/std/os/windows/ntstatus.zig	/INVALID_CONNECTION = 0xC0000140/;"	field
INVALID_CRUNTIME_PARAMETER	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_CRUNTIME_PARAMETER = 1288/;"	field
INVALID_CURSOR_HANDLE	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_CURSOR_HANDLE = 1402/;"	field
INVALID_DATA	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_DATA = 13/;"	field
INVALID_DATATYPE	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_DATATYPE = 1804/;"	field
INVALID_DEVICE_OBJECT_PARAMETER	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_DEVICE_OBJECT_PARAMETER = 650/;"	field
INVALID_DEVICE_REQUEST	$ZIGLIB/std/os/windows/ntstatus.zig	/INVALID_DEVICE_REQUEST = 0xC0000010/;"	field
INVALID_DEVICE_STATE	$ZIGLIB/std/os/windows/ntstatus.zig	/INVALID_DEVICE_STATE = 0xC0000184/;"	field
INVALID_DISPOSITION	$ZIGLIB/std/os/windows/ntstatus.zig	/INVALID_DISPOSITION = 0xC0000026/;"	field
INVALID_DLL	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_DLL = 1154/;"	field
INVALID_DOMAINNAME	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_DOMAINNAME = 1212/;"	field
INVALID_DOMAIN_ROLE	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_DOMAIN_ROLE = 1354/;"	field
INVALID_DOMAIN_STATE	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_DOMAIN_STATE = 1353/;"	field
INVALID_DRIVE	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_DRIVE = 15/;"	field
INVALID_DWP_HANDLE	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_DWP_HANDLE = 1405/;"	field
INVALID_EA_FLAG	$ZIGLIB/std/os/windows/ntstatus.zig	/INVALID_EA_FLAG = 0x80000015/;"	field
INVALID_EA_HANDLE	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_EA_HANDLE = 278/;"	field
INVALID_EA_NAME	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_EA_NAME = 254/;"	field
INVALID_EDIT_HEIGHT	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_EDIT_HEIGHT = 1424/;"	field
INVALID_ENVIRONMENT	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_ENVIRONMENT = 1805/;"	field
INVALID_EVENTNAME	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_EVENTNAME = 1211/;"	field
INVALID_EVENT_COUNT	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_EVENT_COUNT = 151/;"	field
INVALID_EXCEPTION_HANDLER	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_EXCEPTION_HANDLER = 310/;"	field
INVALID_EXE_SIGNATURE	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_EXE_SIGNATURE = 191/;"	field
INVALID_FIELD	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_FIELD = 1616/;"	field
INVALID_FIELD_IN_PARAMETER_LIST	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_FIELD_IN_PARAMETER_LIST = 328/;"	field
INVALID_FILE_ATTRIBUTES	$ZIGLIB/std/os/windows.zig	/^pub const INVALID_FILE_ATTRIBUTES = @as(DWORD, maxInt(DWORD))/;"	constant
INVALID_FILE_FOR_SECTION	$ZIGLIB/std/os/windows/ntstatus.zig	/INVALID_FILE_FOR_SECTION = 0xC0000020/;"	field
INVALID_FILTER_PROC	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_FILTER_PROC = 1427/;"	field
INVALID_FLAGS	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_FLAGS = 1004/;"	field
INVALID_FLAG_NUMBER	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_FLAG_NUMBER = 186/;"	field
INVALID_FORM_NAME	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_FORM_NAME = 1902/;"	field
INVALID_FORM_SIZE	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_FORM_SIZE = 1903/;"	field
INVALID_FUNCTION	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_FUNCTION = 1/;"	field
INVALID_GROUPNAME	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_GROUPNAME = 1209/;"	field
INVALID_GROUP_ATTRIBUTES	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_GROUP_ATTRIBUTES = 1345/;"	field
INVALID_GW_COMMAND	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_GW_COMMAND = 1443/;"	field
INVALID_HANDLE	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_HANDLE = 6/;"	field
INVALID_HANDLE_STATE	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_HANDLE_STATE = 1609/;"	field
INVALID_HANDLE_VALUE	$ZIGLIB/std/os/windows.zig	/^pub const INVALID_HANDLE_VALUE = @intToPtr(HANDLE, maxInt(usize))/;"	constant
INVALID_HOOK_FILTER	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_HOOK_FILTER = 1426/;"	field
INVALID_HOOK_HANDLE	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_HOOK_HANDLE = 1404/;"	field
INVALID_HOST	$ZIGLIB/std/c/darwin.zig	/INVALID_HOST = 22/;"	field
INVALID_HW_PROFILE	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_HW_PROFILE = 619/;"	field
INVALID_ICON_HANDLE	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_ICON_HANDLE = 1414/;"	field
INVALID_IDN_NORMALIZATION	$ZIGLIB/std/os/windows/ntstatus.zig	/INVALID_IDN_NORMALIZATION = 0xC0000716/;"	field
INVALID_ID_AUTHORITY	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_ID_AUTHORITY = 1343/;"	field
INVALID_IMAGE_FORMAT	$ZIGLIB/std/os/windows/ntstatus.zig	/INVALID_IMAGE_FORMAT = 0xC000007B/;"	field
INVALID_IMAGE_HASH	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_IMAGE_HASH = 577/;"	field
INVALID_IMAGE_LE_FORMAT	$ZIGLIB/std/os/windows/ntstatus.zig	/INVALID_IMAGE_LE_FORMAT = 0xC000012E/;"	field
INVALID_IMAGE_NE_FORMAT	$ZIGLIB/std/os/windows/ntstatus.zig	/INVALID_IMAGE_NE_FORMAT = 0xC000011B/;"	field
INVALID_IMAGE_NOT_MZ	$ZIGLIB/std/os/windows/ntstatus.zig	/INVALID_IMAGE_NOT_MZ = 0xC000012F/;"	field
INVALID_IMAGE_PROTECT	$ZIGLIB/std/os/windows/ntstatus.zig	/INVALID_IMAGE_PROTECT = 0xC0000130/;"	field
INVALID_IMAGE_WIN_16	$ZIGLIB/std/os/windows/ntstatus.zig	/INVALID_IMAGE_WIN_16 = 0xC0000131/;"	field
INVALID_IMAGE_WIN_32	$ZIGLIB/std/os/windows/ntstatus.zig	/INVALID_IMAGE_WIN_32 = 0xC0000359/;"	field
INVALID_IMAGE_WIN_64	$ZIGLIB/std/os/windows/ntstatus.zig	/INVALID_IMAGE_WIN_64 = 0xC000035A/;"	field
INVALID_IMPORT_OF_NON_DLL	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_IMPORT_OF_NON_DLL = 1276/;"	field
INVALID_INDEX	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_INDEX = 1413/;"	field
INVALID_INFO_CLASS	$ZIGLIB/std/os/windows/ntstatus.zig	/INVALID_INFO_CLASS = 0xC0000003/;"	field
INVALID_KC	$ZIGLIB/std/c/darwin.zig	/INVALID_KC = 55/;"	field
INVALID_KEYBOARD_HANDLE	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_KEYBOARD_HANDLE = 1457/;"	field
INVALID_LABEL	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_LABEL = 1299/;"	field
INVALID_LB_MESSAGE	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_LB_MESSAGE = 1432/;"	field
INVALID_LDT_DESCRIPTOR	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_LDT_DESCRIPTOR = 564/;"	field
INVALID_LDT_OFFSET	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_LDT_OFFSET = 563/;"	field
INVALID_LDT_SIZE	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_LDT_SIZE = 561/;"	field
INVALID_LEDGER	$ZIGLIB/std/c/darwin.zig	/INVALID_LEDGER = 33/;"	field
INVALID_LEVEL	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_LEVEL = 124/;"	field
INVALID_LIST_FORMAT	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_LIST_FORMAT = 153/;"	field
INVALID_LOCK_RANGE	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_LOCK_RANGE = 307/;"	field
INVALID_LOCK_SEQUENCE	$ZIGLIB/std/os/windows/ntstatus.zig	/INVALID_LOCK_SEQUENCE = 0xC000001E/;"	field
INVALID_LOGON_HOURS	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_LOGON_HOURS = 1328/;"	field
INVALID_LOGON_TYPE	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_LOGON_TYPE = 1367/;"	field
INVALID_MEMBER	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_MEMBER = 1388/;"	field
INVALID_MEMORY_CONTROL	$ZIGLIB/std/c/darwin.zig	/INVALID_MEMORY_CONTROL = 34/;"	field
INVALID_MENU_HANDLE	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_MENU_HANDLE = 1401/;"	field
INVALID_MESSAGE	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_MESSAGE = 1002/;"	field
INVALID_MESSAGEDEST	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_MESSAGEDEST = 1218/;"	field
INVALID_MESSAGENAME	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_MESSAGENAME = 1217/;"	field
INVALID_MINALLOCSIZE	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_MINALLOCSIZE = 195/;"	field
INVALID_MODULETYPE	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_MODULETYPE = 190/;"	field
INVALID_MONITOR_HANDLE	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_MONITOR_HANDLE = 1461/;"	field
INVALID_MSGBOX_STYLE	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_MSGBOX_STYLE = 1438/;"	field
INVALID_NAME	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_NAME = 123/;"	field
INVALID_NETNAME	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_NETNAME = 1214/;"	field
INVALID_NETWORK_RESPONSE	$ZIGLIB/std/os/windows/ntstatus.zig	/INVALID_NETWORK_RESPONSE = 0xC00000C3/;"	field
INVALID_OBJECT	$ZIGLIB/std/c/darwin.zig	/INVALID_OBJECT = 29/;"	field
INVALID_OPLOCK_PROTOCOL	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_OPLOCK_PROTOCOL = 301/;"	field
INVALID_ORDINAL	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_ORDINAL = 182/;"	field
INVALID_OWNER	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_OWNER = 1307/;"	field
INVALID_PAGE_PROTECTION	$ZIGLIB/std/os/windows/ntstatus.zig	/INVALID_PAGE_PROTECTION = 0xC0000045/;"	field
INVALID_PARAMETER	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_PARAMETER = 87/;"	field
INVALID_PARAMETER_1	$ZIGLIB/std/os/windows/ntstatus.zig	/INVALID_PARAMETER_1 = 0xC00000EF/;"	field
INVALID_PARAMETER_10	$ZIGLIB/std/os/windows/ntstatus.zig	/INVALID_PARAMETER_10 = 0xC00000F8/;"	field
INVALID_PARAMETER_11	$ZIGLIB/std/os/windows/ntstatus.zig	/INVALID_PARAMETER_11 = 0xC00000F9/;"	field
INVALID_PARAMETER_12	$ZIGLIB/std/os/windows/ntstatus.zig	/INVALID_PARAMETER_12 = 0xC00000FA/;"	field
INVALID_PARAMETER_2	$ZIGLIB/std/os/windows/ntstatus.zig	/INVALID_PARAMETER_2 = 0xC00000F0/;"	field
INVALID_PARAMETER_3	$ZIGLIB/std/os/windows/ntstatus.zig	/INVALID_PARAMETER_3 = 0xC00000F1/;"	field
INVALID_PARAMETER_4	$ZIGLIB/std/os/windows/ntstatus.zig	/INVALID_PARAMETER_4 = 0xC00000F2/;"	field
INVALID_PARAMETER_5	$ZIGLIB/std/os/windows/ntstatus.zig	/INVALID_PARAMETER_5 = 0xC00000F3/;"	field
INVALID_PARAMETER_6	$ZIGLIB/std/os/windows/ntstatus.zig	/INVALID_PARAMETER_6 = 0xC00000F4/;"	field
INVALID_PARAMETER_7	$ZIGLIB/std/os/windows/ntstatus.zig	/INVALID_PARAMETER_7 = 0xC00000F5/;"	field
INVALID_PARAMETER_8	$ZIGLIB/std/os/windows/ntstatus.zig	/INVALID_PARAMETER_8 = 0xC00000F6/;"	field
INVALID_PARAMETER_9	$ZIGLIB/std/os/windows/ntstatus.zig	/INVALID_PARAMETER_9 = 0xC00000F7/;"	field
INVALID_PARAMETER_MIX	$ZIGLIB/std/os/windows/ntstatus.zig	/INVALID_PARAMETER_MIX = 0xC0000030/;"	field
INVALID_PASSWORD	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_PASSWORD = 86/;"	field
INVALID_PASSWORDNAME	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_PASSWORDNAME = 1216/;"	field
INVALID_PATCH_XML	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_PATCH_XML = 1650/;"	field
INVALID_PIPE_STATE	$ZIGLIB/std/os/windows/ntstatus.zig	/INVALID_PIPE_STATE = 0xC00000AD/;"	field
INVALID_PIXEL_FORMAT	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_PIXEL_FORMAT = 2000/;"	field
INVALID_PLUGPLAY_DEVICE_PATH	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_PLUGPLAY_DEVICE_PATH = 620/;"	field
INVALID_POLICY	$ZIGLIB/std/c/darwin.zig	/INVALID_POLICY = 28/;"	field
INVALID_PORT_ATTRIBUTES	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_PORT_ATTRIBUTES = 545/;"	field
INVALID_PORT_HANDLE	$ZIGLIB/std/os/windows/ntstatus.zig	/INVALID_PORT_HANDLE = 0xC0000042/;"	field
INVALID_PRIMARY_GROUP	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_PRIMARY_GROUP = 1308/;"	field
INVALID_PRINTER_COMMAND	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_PRINTER_COMMAND = 1803/;"	field
INVALID_PRINTER_DRIVER_MANIFEST	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_PRINTER_DRIVER_MANIFEST = 3021/;"	field
INVALID_PRINTER_NAME	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_PRINTER_NAME = 1801/;"	field
INVALID_PRINTER_STATE	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_PRINTER_STATE = 1906/;"	field
INVALID_PRINT_MONITOR	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_PRINT_MONITOR = 3007/;"	field
INVALID_PRIORITY	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_PRIORITY = 1800/;"	field
INVALID_PROCESSOR_SET	$ZIGLIB/std/c/darwin.zig	/INVALID_PROCESSOR_SET = 26/;"	field
INVALID_PROFILE	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_PROFILE = 2011/;"	field
INVALID_QUOTA_LOWER	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_QUOTA_LOWER = 547/;"	field
INVALID_READ_MODE	$ZIGLIB/std/os/windows/ntstatus.zig	/INVALID_READ_MODE = 0xC00000B4/;"	field
INVALID_RIGHT	$ZIGLIB/std/c/darwin.zig	/INVALID_RIGHT = 17/;"	field
INVALID_SCROLLBAR_RANGE	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_SCROLLBAR_RANGE = 1448/;"	field
INVALID_SECURITY	$ZIGLIB/std/c/darwin.zig	/INVALID_SECURITY = 35/;"	field
INVALID_SECURITY_DESCR	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_SECURITY_DESCR = 1338/;"	field
INVALID_SEGDPL	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_SEGDPL = 198/;"	field
INVALID_SEGMENT_NUMBER	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_SEGMENT_NUMBER = 180/;"	field
INVALID_SEPARATOR_FILE	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_SEPARATOR_FILE = 1799/;"	field
INVALID_SERVER_STATE	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_SERVER_STATE = 1352/;"	field
INVALID_SERVICENAME	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_SERVICENAME = 1213/;"	field
INVALID_SERVICE_ACCOUNT	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_SERVICE_ACCOUNT = 1057/;"	field
INVALID_SERVICE_CONTROL	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_SERVICE_CONTROL = 1052/;"	field
INVALID_SERVICE_LOCK	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_SERVICE_LOCK = 1071/;"	field
INVALID_SHARENAME	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_SHARENAME = 1215/;"	field
INVALID_SHOWWIN_COMMAND	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_SHOWWIN_COMMAND = 1449/;"	field
INVALID_SID	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_SID = 1337/;"	field
INVALID_SIGNAL_NUMBER	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_SIGNAL_NUMBER = 209/;"	field
INVALID_SIGNATURE	$ZIGLIB/std/os/windows/ntstatus.zig	/INVALID_SIGNATURE = 0xC000A000/;"	field
INVALID_SOCKET	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const INVALID_SOCKET = @intToPtr(SOCKET, ~@as(usize, 0))/;"	constant
INVALID_SPI_VALUE	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_SPI_VALUE = 1439/;"	field
INVALID_STACKSEG	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_STACKSEG = 189/;"	field
INVALID_STARTING_CODESEG	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_STARTING_CODESEG = 188/;"	field
INVALID_SUB_AUTHORITY	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_SUB_AUTHORITY = 1335/;"	field
INVALID_SYSTEM_SERVICE	$ZIGLIB/std/os/windows/ntstatus.zig	/INVALID_SYSTEM_SERVICE = 0xC000001C/;"	field
INVALID_TABLE	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_TABLE = 1628/;"	field
INVALID_TARGET_HANDLE	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_TARGET_HANDLE = 114/;"	field
INVALID_TASK	$ZIGLIB/std/c/darwin.zig	/INVALID_TASK = 16/;"	field
INVALID_TASK_INDEX	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_TASK_INDEX = 1551/;"	field
INVALID_TASK_NAME	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_TASK_NAME = 1550/;"	field
INVALID_THREAD	$ZIGLIB/std/os/windows/ntstatus.zig	/INVALID_THREAD = 0xC000071C/;"	field
INVALID_THREAD_ID	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_THREAD_ID = 1444/;"	field
INVALID_TIME	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_TIME = 1901/;"	field
INVALID_TOKEN	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_TOKEN = 315/;"	field
INVALID_TRANSACTION	$ZIGLIB/std/os/windows/ntstatus.zig	/INVALID_TRANSACTION = 0xC0190002/;"	field
INVALID_TRANSFORM	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_TRANSFORM = 2020/;"	field
INVALID_UNWIND_TARGET	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_UNWIND_TARGET = 544/;"	field
INVALID_USER_BUFFER	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_USER_BUFFER = 1784/;"	field
INVALID_USER_PRINCIPAL_NAME	$ZIGLIB/std/os/windows/ntstatus.zig	/INVALID_USER_PRINCIPAL_NAME = 0xC000041C/;"	field
INVALID_VALUE	$ZIGLIB/std/c/darwin.zig	/INVALID_VALUE = 18/;"	field
INVALID_VARIANT	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_VARIANT = 604/;"	field
INVALID_VERIFY_SWITCH	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_VERIFY_SWITCH = 118/;"	field
INVALID_VIEW_SIZE	$ZIGLIB/std/os/windows/ntstatus.zig	/INVALID_VIEW_SIZE = 0xC000001F/;"	field
INVALID_VOLUME_LABEL	$ZIGLIB/std/os/windows/ntstatus.zig	/INVALID_VOLUME_LABEL = 0xC0000086/;"	field
INVALID_WINDOW_HANDLE	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_WINDOW_HANDLE = 1400/;"	field
INVALID_WINDOW_STYLE	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_WINDOW_STYLE = 2002/;"	field
INVALID_WORKSTATION	$ZIGLIB/std/os/windows/win32error.zig	/INVALID_WORKSTATION = 1329/;"	field
INVARIANT	$ZIGLIB/std/os/windows/lang.zig	/^pub const INVARIANT = 0x7f/;"	constant
IN_CLASSA_HOST	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IN_CLASSA_HOST = 16777215/;"	constant
IN_CLASSA_MAX	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IN_CLASSA_MAX = 128/;"	constant
IN_CLASSA_NET	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IN_CLASSA_NET = 4278190080/;"	constant
IN_CLASSA_NSHIFT	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IN_CLASSA_NSHIFT = 24/;"	constant
IN_CLASSB_HOST	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IN_CLASSB_HOST = 65535/;"	constant
IN_CLASSB_MAX	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IN_CLASSB_MAX = 65536/;"	constant
IN_CLASSB_NET	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IN_CLASSB_NET = 4294901760/;"	constant
IN_CLASSB_NSHIFT	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IN_CLASSB_NSHIFT = 16/;"	constant
IN_CLASSC_HOST	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IN_CLASSC_HOST = 255/;"	constant
IN_CLASSC_NET	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IN_CLASSC_NET = 4294967040/;"	constant
IN_CLASSC_NSHIFT	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IN_CLASSC_NSHIFT = 8/;"	constant
IN_CLASSD_HOST	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IN_CLASSD_HOST = 268435455/;"	constant
IN_CLASSD_NET	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IN_CLASSD_NET = 4026531840/;"	constant
IN_CLASSD_NSHIFT	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IN_CLASSD_NSHIFT = 28/;"	constant
IN_PAGE_ERROR	$ZIGLIB/std/os/windows/ntstatus.zig	/IN_PAGE_ERROR = 0xC0000006/;"	field
IN_TX	$ZIGLIB/std/os/linux.zig	/pub const IN_TX = 1 << 8/;"	constant
INode	$ZIGLIB/std/fs/file.zig	/pub const INode = os.ino_t/;"	constant
INotifyAddWatchError	$ZIGLIB/std/os.zig	/^pub const INotifyAddWatchError = error{$/;"	constant
INotifyInitError	$ZIGLIB/std/os.zig	/^pub const INotifyInitError = error{$/;"	constant
IOCCBRK	$ZIGLIB/std/os/linux.zig	/pub const IOCCBRK = 0x5428/;"	constant
IOCCDTR	$ZIGLIB/std/c/solaris.zig	/pub const IOCCDTR = tioc('t', 120)/;"	constant
IOCCONS	$ZIGLIB/std/os/linux.zig	/pub const IOCCONS = if (is_mips) IOCTL.IOW('t', 120, c_int) else 0x541D/;"	constant
IOCDCDTIMESTAMP	$ZIGLIB/std/c/openbsd.zig	/pub const IOCDCDTIMESTAMP = 0x40107458/;"	constant
IOCDRAIN	$ZIGLIB/std/c/openbsd.zig	/pub const IOCDRAIN = 0x2000745e/;"	constant
IOCEXCL	$ZIGLIB/std/os/linux.zig	/pub const IOCEXCL = if (is_mips) 0x740d else 0x540C/;"	constant
IOCEXT	$ZIGLIB/std/c/openbsd.zig	/pub const IOCEXT = 0x80047460/;"	constant
IOCFLAG_CDTRCTS	$ZIGLIB/std/c/openbsd.zig	/pub const IOCFLAG_CDTRCTS = 0x10/;"	constant
IOCFLAG_CLOCAL	$ZIGLIB/std/c/openbsd.zig	/pub const IOCFLAG_CLOCAL = 0x2/;"	constant
IOCFLAG_CRTSCTS	$ZIGLIB/std/c/openbsd.zig	/pub const IOCFLAG_CRTSCTS = 0x4/;"	constant
IOCFLAG_MDMBUF	$ZIGLIB/std/c/openbsd.zig	/pub const IOCFLAG_MDMBUF = 0x8/;"	constant
IOCFLAG_SOFTCAR	$ZIGLIB/std/c/openbsd.zig	/pub const IOCFLAG_SOFTCAR = 0x1/;"	constant
IOCFLUSH	$ZIGLIB/std/c/solaris.zig	/pub const IOCFLUSH = tioc('t', 16)/;"	constant
IOCGDEV	$ZIGLIB/std/os/linux.zig	/pub const IOCGDEV = IOCTL.IOR('T', 0x32, c_uint)/;"	constant
IOCGETA	$ZIGLIB/std/c/openbsd.zig	/pub const IOCGETA = 0x402c7413/;"	constant
IOCGETC	$ZIGLIB/std/c/solaris.zig	/pub const IOCGETC = tioc('t', 18)/;"	constant
IOCGETD	$ZIGLIB/std/os/linux.zig	/pub const IOCGETD = if (is_mips) 0x7400 else 0x5424/;"	constant
IOCGETLD	$ZIGLIB/std/c/solaris.zig	/pub const IOCGETLD = tioc('T', 124)/;"	constant
IOCGETP	$ZIGLIB/std/c/solaris.zig	/pub const IOCGETP = tioc('t', 8)/;"	constant
IOCGEXCL	$ZIGLIB/std/os/linux.zig	/pub const IOCGEXCL = IOCTL.IOR('T', 0x40, c_int)/;"	constant
IOCGFLAGS	$ZIGLIB/std/c/openbsd.zig	/pub const IOCGFLAGS = 0x4004745d/;"	constant
IOCGLINED	$ZIGLIB/std/c/openbsd.zig	/pub const IOCGLINED = 0x40207442/;"	constant
IOCGLTC	$ZIGLIB/std/c/solaris.zig	/pub const IOCGLTC = tioc('t', 116)/;"	constant
IOCGPGRP	$ZIGLIB/std/os/linux.zig	/pub const IOCGPGRP = if (is_mips) 0x5472 else 0x540F/;"	constant
IOCGPKT	$ZIGLIB/std/os/linux.zig	/pub const IOCGPKT = IOCTL.IOR('T', 0x38, c_int)/;"	constant
IOCGPPS	$ZIGLIB/std/c/solaris.zig	/pub const IOCGPPS = tioc('T', 125)/;"	constant
IOCGPPSEV	$ZIGLIB/std/c/solaris.zig	/pub const IOCGPPSEV = tioc('T', 127)/;"	constant
IOCGPTLCK	$ZIGLIB/std/os/linux.zig	/pub const IOCGPTLCK = IOCTL.IOR('T', 0x39, c_int)/;"	constant
IOCGPTN	$ZIGLIB/std/os/linux.zig	/pub const IOCGPTN = IOCTL.IOR('T', 0x30, c_uint)/;"	constant
IOCGQSIZE	$ZIGLIB/std/c/openbsd.zig	/pub const IOCGQSIZE = 0x40047481/;"	constant
IOCGRANTPT	$ZIGLIB/std/c/openbsd.zig	/pub const IOCGRANTPT = 0x20007447/;"	constant
IOCGRS485	$ZIGLIB/std/os/linux.zig	/pub const IOCGRS485 = 0x542E/;"	constant
IOCGSERIAL	$ZIGLIB/std/os/linux.zig	/pub const IOCGSERIAL = if (is_mips) 0x5484 else 0x541E/;"	constant
IOCGSID	$ZIGLIB/std/os/linux.zig	/pub const IOCGSID = if (is_mips) 0x7416 else 0x5429/;"	constant
IOCGSIZE	$ZIGLIB/std/c/openbsd.zig	/pub const IOCGSIZE = 0x40087468/;"	constant
IOCGSOFTCAR	$ZIGLIB/std/os/linux.zig	/pub const IOCGSOFTCAR = if (is_mips) 0x5481 else 0x5419/;"	constant
IOCGWINSZ	$ZIGLIB/std/os/linux.zig	/pub const IOCGWINSZ = if (is_mips or is_ppc64) 0x40087468 else 0x5413/;"	constant
IOCHPCL	$ZIGLIB/std/c/solaris.zig	/pub const IOCHPCL = tioc('t', 2)/;"	constant
IOCINQ	$ZIGLIB/std/os/linux.zig	/pub const IOCINQ = FIONREAD/;"	constant
IOCLBIC	$ZIGLIB/std/c/solaris.zig	/pub const IOCLBIC = tioc('t', 126)/;"	constant
IOCLBIS	$ZIGLIB/std/c/solaris.zig	/pub const IOCLBIS = tioc('t', 127)/;"	constant
IOCLGET	$ZIGLIB/std/c/solaris.zig	/pub const IOCLGET = tioc('t', 124)/;"	constant
IOCLINUX	$ZIGLIB/std/os/linux.zig	/pub const IOCLINUX = if (is_mips) 0x5483 else 0x541C/;"	constant
IOCLSET	$ZIGLIB/std/c/solaris.zig	/pub const IOCLSET = tioc('t', 125)/;"	constant
IOCMBIC	$ZIGLIB/std/os/linux.zig	/pub const IOCMBIC = if (is_mips) 0x741c else 0x5417/;"	constant
IOCMBIS	$ZIGLIB/std/os/linux.zig	/pub const IOCMBIS = if (is_mips) 0x741b else 0x5416/;"	constant
IOCMGET	$ZIGLIB/std/os/linux.zig	/pub const IOCMGET = if (is_mips) 0x741d else 0x5415/;"	constant
IOCMSET	$ZIGLIB/std/os/linux.zig	/pub const IOCMSET = if (is_mips) 0x741a else 0x5418/;"	constant
IOCM_CAR	$ZIGLIB/std/c/openbsd.zig	/pub const IOCM_CAR = 0x40/;"	constant
IOCM_CD	$ZIGLIB/std/c/openbsd.zig	/pub const IOCM_CD = 0x40/;"	constant
IOCM_CTS	$ZIGLIB/std/c/openbsd.zig	/pub const IOCM_CTS = 0x20/;"	constant
IOCM_DSR	$ZIGLIB/std/c/openbsd.zig	/pub const IOCM_DSR = 0x100/;"	constant
IOCM_DTR	$ZIGLIB/std/c/openbsd.zig	/pub const IOCM_DTR = 0x2/;"	constant
IOCM_LE	$ZIGLIB/std/c/openbsd.zig	/pub const IOCM_LE = 0x1/;"	constant
IOCM_RI	$ZIGLIB/std/c/openbsd.zig	/pub const IOCM_RI = 0x80/;"	constant
IOCM_RNG	$ZIGLIB/std/c/openbsd.zig	/pub const IOCM_RNG = 0x80/;"	constant
IOCM_RTS	$ZIGLIB/std/c/openbsd.zig	/pub const IOCM_RTS = 0x4/;"	constant
IOCM_SR	$ZIGLIB/std/c/openbsd.zig	/pub const IOCM_SR = 0x10/;"	constant
IOCM_ST	$ZIGLIB/std/c/openbsd.zig	/pub const IOCM_ST = 0x8/;"	constant
IOCNOTTY	$ZIGLIB/std/os/linux.zig	/pub const IOCNOTTY = if (is_mips) 0x5471 else 0x5422/;"	constant
IOCNXCL	$ZIGLIB/std/os/linux.zig	/pub const IOCNXCL = if (is_mips) 0x740e else 0x540D/;"	constant
IOCOUTQ	$ZIGLIB/std/os/linux.zig	/pub const IOCOUTQ = if (is_mips) 0x7472 else 0x5411/;"	constant
IOCPARM_MASK	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IOCPARM_MASK = 127/;"	constant
IOCPKT	$ZIGLIB/std/os/linux.zig	/pub const IOCPKT = if (is_mips) 0x5470 else 0x5420/;"	constant
IOCPKT_DATA	$ZIGLIB/std/c/openbsd.zig	/pub const IOCPKT_DATA = 0x0/;"	constant
IOCPKT_DOSTOP	$ZIGLIB/std/c/openbsd.zig	/pub const IOCPKT_DOSTOP = 0x20/;"	constant
IOCPKT_FLUSHREAD	$ZIGLIB/std/c/openbsd.zig	/pub const IOCPKT_FLUSHREAD = 0x1/;"	constant
IOCPKT_FLUSHWRITE	$ZIGLIB/std/c/openbsd.zig	/pub const IOCPKT_FLUSHWRITE = 0x2/;"	constant
IOCPKT_IOCTL	$ZIGLIB/std/c/openbsd.zig	/pub const IOCPKT_IOCTL = 0x40/;"	constant
IOCPKT_NOSTOP	$ZIGLIB/std/c/openbsd.zig	/pub const IOCPKT_NOSTOP = 0x10/;"	constant
IOCPKT_START	$ZIGLIB/std/c/openbsd.zig	/pub const IOCPKT_START = 0x8/;"	constant
IOCPKT_STOP	$ZIGLIB/std/c/openbsd.zig	/pub const IOCPKT_STOP = 0x4/;"	constant
IOCPTMGET	$ZIGLIB/std/c/openbsd.zig	/pub const IOCPTMGET = 0x40287446/;"	constant
IOCPTSNAME	$ZIGLIB/std/c/openbsd.zig	/pub const IOCPTSNAME = 0x40287448/;"	constant
IOCRCVFRAME	$ZIGLIB/std/c/openbsd.zig	/pub const IOCRCVFRAME = 0x80087445/;"	constant
IOCREMOTE	$ZIGLIB/std/c/openbsd.zig	/pub const IOCREMOTE = 0x80047469/;"	constant
IOCSBRK	$ZIGLIB/std/os/linux.zig	/pub const IOCSBRK = 0x5427/;"	constant
IOCSCTTY	$ZIGLIB/std/os/linux.zig	/pub const IOCSCTTY = if (is_mips) 0x7472 else 0x540E/;"	constant
IOCSDTR	$ZIGLIB/std/c/solaris.zig	/pub const IOCSDTR = tioc('t', 121)/;"	constant
IOCSETA	$ZIGLIB/std/c/openbsd.zig	/pub const IOCSETA = 0x802c7414/;"	constant
IOCSETAF	$ZIGLIB/std/c/openbsd.zig	/pub const IOCSETAF = 0x802c7416/;"	constant
IOCSETAW	$ZIGLIB/std/c/openbsd.zig	/pub const IOCSETAW = 0x802c7415/;"	constant
IOCSETC	$ZIGLIB/std/c/solaris.zig	/pub const IOCSETC = tioc('t', 17)/;"	constant
IOCSETD	$ZIGLIB/std/os/linux.zig	/pub const IOCSETD = if (is_mips) 0x7401 else 0x5423/;"	constant
IOCSETLD	$ZIGLIB/std/c/solaris.zig	/pub const IOCSETLD = tioc('T', 123)/;"	constant
IOCSETN	$ZIGLIB/std/c/solaris.zig	/pub const IOCSETN = tioc('t', 10)/;"	constant
IOCSETP	$ZIGLIB/std/c/solaris.zig	/pub const IOCSETP = tioc('t', 9)/;"	constant
IOCSFLAGS	$ZIGLIB/std/c/openbsd.zig	/pub const IOCSFLAGS = 0x8004745c/;"	constant
IOCSIG	$ZIGLIB/std/os/linux.zig	/pub const IOCSIG = IOCTL.IOW('T', 0x36, c_int)/;"	constant
IOCSLINED	$ZIGLIB/std/c/openbsd.zig	/pub const IOCSLINED = 0x80207443/;"	constant
IOCSLTC	$ZIGLIB/std/c/solaris.zig	/pub const IOCSLTC = tioc('t', 117)/;"	constant
IOCSPGRP	$ZIGLIB/std/os/linux.zig	/pub const IOCSPGRP = if (is_mips) 0x741d else 0x5410/;"	constant
IOCSPPS	$ZIGLIB/std/c/solaris.zig	/pub const IOCSPPS = tioc('T', 126)/;"	constant
IOCSPTLCK	$ZIGLIB/std/os/linux.zig	/pub const IOCSPTLCK = IOCTL.IOW('T', 0x31, c_int)/;"	constant
IOCSQSIZE	$ZIGLIB/std/c/openbsd.zig	/pub const IOCSQSIZE = 0x80047480/;"	constant
IOCSRS485	$ZIGLIB/std/os/linux.zig	/pub const IOCSRS485 = 0x542F/;"	constant
IOCSSERIAL	$ZIGLIB/std/os/linux.zig	/pub const IOCSSERIAL = if (is_mips) 0x5485 else 0x541F/;"	constant
IOCSSIZE	$ZIGLIB/std/c/openbsd.zig	/pub const IOCSSIZE = 0x80087467/;"	constant
IOCSSOFTCAR	$ZIGLIB/std/os/linux.zig	/pub const IOCSSOFTCAR = if (is_mips) 0x5482 else 0x541A/;"	constant
IOCSTART	$ZIGLIB/std/c/solaris.zig	/pub const IOCSTART = tioc('t', 110)/;"	constant
IOCSTAT	$ZIGLIB/std/c/openbsd.zig	/pub const IOCSTAT = 0x80047465/;"	constant
IOCSTI	$ZIGLIB/std/os/linux.zig	/pub const IOCSTI = if (is_mips) 0x5472 else 0x5412/;"	constant
IOCSTOP	$ZIGLIB/std/c/solaris.zig	/pub const IOCSTOP = tioc('t', 111)/;"	constant
IOCSWINSZ	$ZIGLIB/std/os/linux.zig	/pub const IOCSWINSZ = if (is_mips or is_ppc64) 0x80087467 else 0x5414/;"	constant
IOCTL_MOUNTMGR_QUERY_POINTS	$ZIGLIB/std/os/windows.zig	/^pub const IOCTL_MOUNTMGR_QUERY_POINTS: ULONG = 0x6d0008/;"	constant
IOCTL_NOTIF	$ZIGLIB/std/os/linux/seccomp.zig	/^pub const IOCTL_NOTIF = struct {$/;"	struct
IOCUCNTL	$ZIGLIB/std/c/openbsd.zig	/pub const IOCUCNTL = 0x80047466/;"	constant
IOCVHANGUP	$ZIGLIB/std/os/linux.zig	/pub const IOCVHANGUP = 0x5437/;"	constant
IOCXMTFRAME	$ZIGLIB/std/c/openbsd.zig	/pub const IOCXMTFRAME = 0x80087444/;"	constant
IOC_FLAG_GROUP	$ZIGLIB/std/os/linux.zig	/pub const IOC_FLAG_GROUP = 1/;"	constant
IOC_IN	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IOC_IN = 2147483648/;"	constant
IOC_OUT	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IOC_OUT = 1073741824/;"	constant
IOC_PROTOCOL	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IOC_PROTOCOL = 268435456/;"	constant
IOC_UNIX	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IOC_UNIX = 0/;"	constant
IOC_VENDOR	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IOC_VENDOR = 402653184/;"	constant
IOC_VOID	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IOC_VOID = 536870912/;"	constant
IOC_WS2	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IOC_WS2 = 134217728/;"	constant
IOPL_NOT_ENABLED	$ZIGLIB/std/os/windows/win32error.zig	/IOPL_NOT_ENABLED = 197/;"	field
IOPipesINTEL	$ZIGLIB/std/target/spirv.zig	/IOPipesINTEL/;"	field
IORING_ACCEPT_MULTISHOT	$ZIGLIB/std/os/linux.zig	/^pub const IORING_ACCEPT_MULTISHOT = 1 << 0/;"	constant
IORING_ASYNC_CANCEL_ALL	$ZIGLIB/std/os/linux.zig	/^pub const IORING_ASYNC_CANCEL_ALL = 1 << 0/;"	constant
IORING_ASYNC_CANCEL_ANY	$ZIGLIB/std/os/linux.zig	/^pub const IORING_ASYNC_CANCEL_ANY = 1 << 2/;"	constant
IORING_ASYNC_CANCEL_FD	$ZIGLIB/std/os/linux.zig	/^pub const IORING_ASYNC_CANCEL_FD = 1 << 1/;"	constant
IORING_CQE_F_BUFFER	$ZIGLIB/std/os/linux.zig	/^pub const IORING_CQE_F_BUFFER = 1 << 0/;"	constant
IORING_CQE_F_MORE	$ZIGLIB/std/os/linux.zig	/^pub const IORING_CQE_F_MORE = 1 << 1/;"	constant
IORING_CQE_F_NOTIF	$ZIGLIB/std/os/linux.zig	/^pub const IORING_CQE_F_NOTIF = 1 << 3/;"	constant
IORING_CQE_F_SOCK_NONEMPTY	$ZIGLIB/std/os/linux.zig	/^pub const IORING_CQE_F_SOCK_NONEMPTY = 1 << 2/;"	constant
IORING_ENTER_EXT_ARG	$ZIGLIB/std/os/linux.zig	/^pub const IORING_ENTER_EXT_ARG = 1 << 3/;"	constant
IORING_ENTER_GETEVENTS	$ZIGLIB/std/os/linux.zig	/^pub const IORING_ENTER_GETEVENTS = 1 << 0/;"	constant
IORING_ENTER_REGISTERED_RING	$ZIGLIB/std/os/linux.zig	/^pub const IORING_ENTER_REGISTERED_RING = 1 << 4/;"	constant
IORING_ENTER_SQ_WAIT	$ZIGLIB/std/os/linux.zig	/^pub const IORING_ENTER_SQ_WAIT = 1 << 2/;"	constant
IORING_ENTER_SQ_WAKEUP	$ZIGLIB/std/os/linux.zig	/^pub const IORING_ENTER_SQ_WAKEUP = 1 << 1/;"	constant
IORING_FEAT_CQE_SKIP	$ZIGLIB/std/os/linux.zig	/^pub const IORING_FEAT_CQE_SKIP = 1 << 11/;"	constant
IORING_FEAT_CUR_PERSONALITY	$ZIGLIB/std/os/linux.zig	/^pub const IORING_FEAT_CUR_PERSONALITY = 1 << 4/;"	constant
IORING_FEAT_EXT_ARG	$ZIGLIB/std/os/linux.zig	/^pub const IORING_FEAT_EXT_ARG = 1 << 8/;"	constant
IORING_FEAT_FAST_POLL	$ZIGLIB/std/os/linux.zig	/^pub const IORING_FEAT_FAST_POLL = 1 << 5/;"	constant
IORING_FEAT_LINKED_FILE	$ZIGLIB/std/os/linux.zig	/^pub const IORING_FEAT_LINKED_FILE = 1 << 12/;"	constant
IORING_FEAT_NATIVE_WORKERS	$ZIGLIB/std/os/linux.zig	/^pub const IORING_FEAT_NATIVE_WORKERS = 1 << 9/;"	constant
IORING_FEAT_NODROP	$ZIGLIB/std/os/linux.zig	/^pub const IORING_FEAT_NODROP = 1 << 1/;"	constant
IORING_FEAT_POLL_32BITS	$ZIGLIB/std/os/linux.zig	/^pub const IORING_FEAT_POLL_32BITS = 1 << 6/;"	constant
IORING_FEAT_RSRC_TAGS	$ZIGLIB/std/os/linux.zig	/^pub const IORING_FEAT_RSRC_TAGS = 1 << 10/;"	constant
IORING_FEAT_RW_CUR_POS	$ZIGLIB/std/os/linux.zig	/^pub const IORING_FEAT_RW_CUR_POS = 1 << 3/;"	constant
IORING_FEAT_SINGLE_MMAP	$ZIGLIB/std/os/linux.zig	/^pub const IORING_FEAT_SINGLE_MMAP = 1 << 0/;"	constant
IORING_FEAT_SQPOLL_NONFIXED	$ZIGLIB/std/os/linux.zig	/^pub const IORING_FEAT_SQPOLL_NONFIXED = 1 << 7/;"	constant
IORING_FEAT_SUBMIT_STABLE	$ZIGLIB/std/os/linux.zig	/^pub const IORING_FEAT_SUBMIT_STABLE = 1 << 2/;"	constant
IORING_FSYNC_DATASYNC	$ZIGLIB/std/os/linux.zig	/^pub const IORING_FSYNC_DATASYNC = 1 << 0/;"	constant
IORING_LINK_TIMEOUT_UPDATE	$ZIGLIB/std/os/linux.zig	/^pub const IORING_LINK_TIMEOUT_UPDATE = 1 << 4/;"	constant
IORING_OFF_CQ_RING	$ZIGLIB/std/os/linux.zig	/^pub const IORING_OFF_CQ_RING = 0x8000000/;"	constant
IORING_OFF_SQES	$ZIGLIB/std/os/linux.zig	/^pub const IORING_OFF_SQES = 0x10000000/;"	constant
IORING_OFF_SQ_RING	$ZIGLIB/std/os/linux.zig	/^pub const IORING_OFF_SQ_RING = 0/;"	constant
IORING_OP	$ZIGLIB/std/os/linux.zig	/^pub const IORING_OP = enum(u8) {$/;"	enum
IORING_POLL_ADD_MULTI	$ZIGLIB/std/os/linux.zig	/^pub const IORING_POLL_ADD_MULTI = 1 << 0/;"	constant
IORING_POLL_UPDATE_EVENTS	$ZIGLIB/std/os/linux.zig	/^pub const IORING_POLL_UPDATE_EVENTS = 1 << 1/;"	constant
IORING_POLL_UPDATE_USER_DATA	$ZIGLIB/std/os/linux.zig	/^pub const IORING_POLL_UPDATE_USER_DATA = 1 << 2/;"	constant
IORING_RECVSEND_POLL_FIRST	$ZIGLIB/std/os/linux.zig	/^pub const IORING_RECVSEND_POLL_FIRST = 1 << 0/;"	constant
IORING_RECV_MULTISHOT	$ZIGLIB/std/os/linux.zig	/^pub const IORING_RECV_MULTISHOT = 1 << 1/;"	constant
IORING_REGISTER	$ZIGLIB/std/os/linux.zig	/^pub const IORING_REGISTER = enum(u8) {$/;"	enum
IORING_REGISTER_BUFFERS2	$ZIGLIB/std/os/linux.zig	/IORING_REGISTER_BUFFERS2/;"	field
IORING_REGISTER_BUFFERS_UPDATE	$ZIGLIB/std/os/linux.zig	/IORING_REGISTER_BUFFERS_UPDATE/;"	field
IORING_REGISTER_FILES2	$ZIGLIB/std/os/linux.zig	/IORING_REGISTER_FILES2/;"	field
IORING_REGISTER_FILES_UPDATE2	$ZIGLIB/std/os/linux.zig	/IORING_REGISTER_FILES_UPDATE2/;"	field
IORING_REGISTER_FILE_ALLOC_RANGE	$ZIGLIB/std/os/linux.zig	/IORING_REGISTER_FILE_ALLOC_RANGE/;"	field
IORING_REGISTER_IOWQ_AFF	$ZIGLIB/std/os/linux.zig	/IORING_REGISTER_IOWQ_AFF/;"	field
IORING_REGISTER_IOWQ_MAX_WORKERS	$ZIGLIB/std/os/linux.zig	/IORING_REGISTER_IOWQ_MAX_WORKERS/;"	field
IORING_REGISTER_PBUF_RING	$ZIGLIB/std/os/linux.zig	/IORING_REGISTER_PBUF_RING/;"	field
IORING_REGISTER_RING_FDS	$ZIGLIB/std/os/linux.zig	/IORING_REGISTER_RING_FDS/;"	field
IORING_REGISTER_SYNC_CANCEL	$ZIGLIB/std/os/linux.zig	/IORING_REGISTER_SYNC_CANCEL/;"	field
IORING_RESTRICTION	$ZIGLIB/std/os/linux.zig	/^pub const IORING_RESTRICTION = enum(u8) {$/;"	enum
IORING_SETUP_ATTACH_WQ	$ZIGLIB/std/os/linux.zig	/^pub const IORING_SETUP_ATTACH_WQ = 1 << 5/;"	constant
IORING_SETUP_CLAMP	$ZIGLIB/std/os/linux.zig	/^pub const IORING_SETUP_CLAMP = 1 << 4/;"	constant
IORING_SETUP_COOP_TASKRUN	$ZIGLIB/std/os/linux.zig	/^pub const IORING_SETUP_COOP_TASKRUN = 1 << 8/;"	constant
IORING_SETUP_CQE32	$ZIGLIB/std/os/linux.zig	/^pub const IORING_SETUP_CQE32 = 1 << 11/;"	constant
IORING_SETUP_CQSIZE	$ZIGLIB/std/os/linux.zig	/^pub const IORING_SETUP_CQSIZE = 1 << 3/;"	constant
IORING_SETUP_IOPOLL	$ZIGLIB/std/os/linux.zig	/^pub const IORING_SETUP_IOPOLL = 1 << 0/;"	constant
IORING_SETUP_R_DISABLED	$ZIGLIB/std/os/linux.zig	/^pub const IORING_SETUP_R_DISABLED = 1 << 6/;"	constant
IORING_SETUP_SQE128	$ZIGLIB/std/os/linux.zig	/^pub const IORING_SETUP_SQE128 = 1 << 10/;"	constant
IORING_SETUP_SQPOLL	$ZIGLIB/std/os/linux.zig	/^pub const IORING_SETUP_SQPOLL = 1 << 1/;"	constant
IORING_SETUP_SQ_AFF	$ZIGLIB/std/os/linux.zig	/^pub const IORING_SETUP_SQ_AFF = 1 << 2/;"	constant
IORING_SETUP_SUBMIT_ALL	$ZIGLIB/std/os/linux.zig	/^pub const IORING_SETUP_SUBMIT_ALL = 1 << 7/;"	constant
IORING_SETUP_TASKRUN_FLAG	$ZIGLIB/std/os/linux.zig	/^pub const IORING_SETUP_TASKRUN_FLAG = 1 << 9/;"	constant
IORING_SPLICE_F_FD_IN_FIXED	$ZIGLIB/std/os/linux.zig	/^pub const IORING_SPLICE_F_FD_IN_FIXED = 1 << 31/;"	constant
IORING_SQ_CQ_OVERFLOW	$ZIGLIB/std/os/linux.zig	/^pub const IORING_SQ_CQ_OVERFLOW = 1 << 1/;"	constant
IORING_SQ_NEED_WAKEUP	$ZIGLIB/std/os/linux.zig	/^pub const IORING_SQ_NEED_WAKEUP = 1 << 0/;"	constant
IORING_SQ_TASKRUN	$ZIGLIB/std/os/linux.zig	/^pub const IORING_SQ_TASKRUN = 1 << 2/;"	constant
IORING_TIMEOUT_ABS	$ZIGLIB/std/os/linux.zig	/^pub const IORING_TIMEOUT_ABS = 1 << 0/;"	constant
IORING_TIMEOUT_BOOTTIME	$ZIGLIB/std/os/linux.zig	/^pub const IORING_TIMEOUT_BOOTTIME = 1 << 2/;"	constant
IORING_TIMEOUT_CLOCK_MASK	$ZIGLIB/std/os/linux.zig	/^pub const IORING_TIMEOUT_CLOCK_MASK = IORING_TIMEOUT_BOOTTIME | IORING_TIMEOUT_REALTIME/;"	constant
IORING_TIMEOUT_ETIME_SUCCESS	$ZIGLIB/std/os/linux.zig	/^pub const IORING_TIMEOUT_ETIME_SUCCESS = 1 << 5/;"	constant
IORING_TIMEOUT_REALTIME	$ZIGLIB/std/os/linux.zig	/^pub const IORING_TIMEOUT_REALTIME = 1 << 3/;"	constant
IORING_TIMEOUT_UPDATE	$ZIGLIB/std/os/linux.zig	/^pub const IORING_TIMEOUT_UPDATE = 1 << 1/;"	constant
IORING_TIMEOUT_UPDATE_MASK	$ZIGLIB/std/os/linux.zig	/^pub const IORING_TIMEOUT_UPDATE_MASK = IORING_TIMEOUT_UPDATE | IORING_LINK_TIMEOUT_UPDATE/;"	constant
IORING_UNREGISTER_IOWQ_AFF	$ZIGLIB/std/os/linux.zig	/IORING_UNREGISTER_IOWQ_AFF/;"	field
IORING_UNREGISTER_PBUF_RING	$ZIGLIB/std/os/linux.zig	/IORING_UNREGISTER_PBUF_RING/;"	field
IORING_UNREGISTER_RING_FDS	$ZIGLIB/std/os/linux.zig	/IORING_UNREGISTER_RING_FDS/;"	field
IOSQE_ASYNC	$ZIGLIB/std/os/linux.zig	/^pub const IOSQE_ASYNC = 1 << @enumToInt(IOSQE_BIT.ASYNC)/;"	constant
IOSQE_BIT	$ZIGLIB/std/os/linux.zig	/^pub const IOSQE_BIT = enum(u8) {$/;"	enum
IOSQE_BUFFER_SELECT	$ZIGLIB/std/os/linux.zig	/^pub const IOSQE_BUFFER_SELECT = 1 << @enumToInt(IOSQE_BIT.BUFFER_SELECT)/;"	constant
IOSQE_CQE_SKIP_SUCCESS	$ZIGLIB/std/os/linux.zig	/^pub const IOSQE_CQE_SKIP_SUCCESS = 1 << @enumToInt(IOSQE_BIT.CQE_SKIP_SUCCESS)/;"	constant
IOSQE_FIXED_FILE	$ZIGLIB/std/os/linux.zig	/^pub const IOSQE_FIXED_FILE = 1 << @enumToInt(IOSQE_BIT.FIXED_FILE)/;"	constant
IOSQE_IO_DRAIN	$ZIGLIB/std/os/linux.zig	/^pub const IOSQE_IO_DRAIN = 1 << @enumToInt(IOSQE_BIT.IO_DRAIN)/;"	constant
IOSQE_IO_HARDLINK	$ZIGLIB/std/os/linux.zig	/^pub const IOSQE_IO_HARDLINK = 1 << @enumToInt(IOSQE_BIT.IO_HARDLINK)/;"	constant
IOSQE_IO_LINK	$ZIGLIB/std/os/linux.zig	/^pub const IOSQE_IO_LINK = 1 << @enumToInt(IOSQE_BIT.IO_LINK)/;"	constant
IOSSIMULATOR	$ZIGLIB/std/macho.zig	/IOSSIMULATOR = 0x7/;"	field
IOV_MAX	$ZIGLIB/std/os/wasi.zig	/^pub const IOV_MAX = 1024/;"	constant
IOWR	$ZIGLIB/std/os/linux/ioctl.zig	/^pub fn IOWR(io_type: u8, nr: u8, comptime T: type) u32 {$/;"	function
IO_APC_ROUTINE	$ZIGLIB/std/os/windows.zig	/^pub const IO_APC_ROUTINE = *const fn (PVOID, *IO_STATUS_BLOCK, ULONG) callconv(.C) void/;"	constant
IO_DEVICE	$ZIGLIB/std/os/windows/win32error.zig	/IO_DEVICE = 1117/;"	field
IO_DEVICE_ERROR	$ZIGLIB/std/os/windows/ntstatus.zig	/IO_DEVICE_ERROR = 0xC0000185/;"	field
IO_DRAIN	$ZIGLIB/std/os/linux.zig	/IO_DRAIN/;"	field
IO_HARDLINK	$ZIGLIB/std/os/linux.zig	/IO_HARDLINK/;"	field
IO_INCOMPLETE	$ZIGLIB/std/os/windows/win32error.zig	/IO_INCOMPLETE = 996/;"	field
IO_LINK	$ZIGLIB/std/os/linux.zig	/IO_LINK/;"	field
IO_PENDING	$ZIGLIB/std/os/windows/win32error.zig	/IO_PENDING = 997/;"	field
IO_PRIVILEGE_FAILED	$ZIGLIB/std/os/windows/win32error.zig	/IO_PRIVILEGE_FAILED = 571/;"	field
IO_REISSUE_AS_CACHED	$ZIGLIB/std/os/windows/win32error.zig	/IO_REISSUE_AS_CACHED = 3950/;"	field
IO_REPARSE_DATA_INVALID	$ZIGLIB/std/os/windows/ntstatus.zig	/IO_REPARSE_DATA_INVALID = 0xC0000278/;"	field
IO_REPARSE_TAG_INVALID	$ZIGLIB/std/os/windows/ntstatus.zig	/IO_REPARSE_TAG_INVALID = 0xC0000276/;"	field
IO_REPARSE_TAG_MISMATCH	$ZIGLIB/std/os/windows/ntstatus.zig	/IO_REPARSE_TAG_MISMATCH = 0xC0000277/;"	field
IO_REPARSE_TAG_MOUNT_POINT	$ZIGLIB/std/os/windows.zig	/^pub const IO_REPARSE_TAG_MOUNT_POINT: ULONG = 0xa0000003/;"	constant
IO_REPARSE_TAG_NOT_HANDLED	$ZIGLIB/std/os/windows/ntstatus.zig	/IO_REPARSE_TAG_NOT_HANDLED = 0xC0000279/;"	field
IO_REPARSE_TAG_SYMLINK	$ZIGLIB/std/os/windows.zig	/^pub const IO_REPARSE_TAG_SYMLINK: ULONG = 0xa000000c/;"	constant
IO_STATUS_BLOCK	$ZIGLIB/std/os/windows.zig	/^pub const IO_STATUS_BLOCK = extern struct {$/;"	struct
IO_TIMEOUT	$ZIGLIB/std/os/windows/ntstatus.zig	/IO_TIMEOUT = 0xC00000B5/;"	field
IO_URING_OP_SUPPORTED	$ZIGLIB/std/os/linux.zig	/^pub const IO_URING_OP_SUPPORTED = 1 << 0/;"	constant
IO_Uring	$ZIGLIB/std/os/linux/io_uring.zig	/^pub const IO_Uring = struct {$/;"	struct
IP2K	$ZIGLIB/std/elf.zig	/IP2K = 101/;"	field
IP6_FW	$ZIGLIB/std/os/linux.zig	/pub const IP6_FW = 13/;"	constant
IPCOMP	$ZIGLIB/std/c/openbsd.zig	/pub const IPCOMP = 108/;"	constant
IPCV	$ZIGLIB/std/c/freebsd.zig	/pub const IPCV = 71/;"	constant
IPC_LOCK	$ZIGLIB/std/os/linux.zig	/pub const IPC_LOCK = 14/;"	constant
IPC_OWNER	$ZIGLIB/std/os/linux.zig	/pub const IPC_OWNER = 15/;"	constant
IPEIP	$ZIGLIB/std/c/freebsd.zig	/pub const IPEIP = 94/;"	constant
IPIP	$ZIGLIB/std/os/linux.zig	/pub const IPIP = 4/;"	constant
IPM_CLEARADDRESS	$ZIGLIB/std/os/windows/user32.zig	/^pub const IPM_CLEARADDRESS = 0x0464/;"	constant
IPM_GETADDRESS	$ZIGLIB/std/os/windows/user32.zig	/^pub const IPM_GETADDRESS = 0x0466/;"	constant
IPM_ISBLANK	$ZIGLIB/std/os/windows/user32.zig	/^pub const IPM_ISBLANK = 0x0469/;"	constant
IPM_SETADDRESS	$ZIGLIB/std/os/windows/user32.zig	/^pub const IPM_SETADDRESS = 0x0465/;"	constant
IPM_SETFOCUS	$ZIGLIB/std/os/windows/user32.zig	/^pub const IPM_SETFOCUS = 0x0468/;"	constant
IPM_SETRANGE	$ZIGLIB/std/os/windows/user32.zig	/^pub const IPM_SETRANGE = 0x0467/;"	constant
IPPC	$ZIGLIB/std/c/freebsd.zig	/pub const IPPC = 67/;"	constant
IPPORT_BIFFUDP	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPPORT_BIFFUDP = 512/;"	constant
IPPORT_CHARGEN	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPPORT_CHARGEN = 19/;"	constant
IPPORT_CMDSERVER	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPPORT_CMDSERVER = 514/;"	constant
IPPORT_DAYTIME	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPPORT_DAYTIME = 13/;"	constant
IPPORT_DISCARD	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPPORT_DISCARD = 9/;"	constant
IPPORT_DYNAMIC_MAX	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPPORT_DYNAMIC_MAX = 65535/;"	constant
IPPORT_DYNAMIC_MIN	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPPORT_DYNAMIC_MIN = 49152/;"	constant
IPPORT_ECHO	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPPORT_ECHO = 7/;"	constant
IPPORT_EFSSERVER	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPPORT_EFSSERVER = 520/;"	constant
IPPORT_EPMAP	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPPORT_EPMAP = 135/;"	constant
IPPORT_EXECSERVER	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPPORT_EXECSERVER = 512/;"	constant
IPPORT_FINGER	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPPORT_FINGER = 79/;"	constant
IPPORT_FTP	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPPORT_FTP = 21/;"	constant
IPPORT_FTP_DATA	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPPORT_FTP_DATA = 20/;"	constant
IPPORT_HTTPS	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPPORT_HTTPS = 443/;"	constant
IPPORT_IMAP	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPPORT_IMAP = 143/;"	constant
IPPORT_IMAP3	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPPORT_IMAP3 = 220/;"	constant
IPPORT_LDAP	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPPORT_LDAP = 389/;"	constant
IPPORT_LOGINSERVER	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPPORT_LOGINSERVER = 513/;"	constant
IPPORT_MICROSOFT_DS	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPPORT_MICROSOFT_DS = 445/;"	constant
IPPORT_MSP	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPPORT_MSP = 18/;"	constant
IPPORT_MTP	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPPORT_MTP = 57/;"	constant
IPPORT_NAMESERVER	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPPORT_NAMESERVER = 42/;"	constant
IPPORT_NETBIOS_DGM	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPPORT_NETBIOS_DGM = 138/;"	constant
IPPORT_NETBIOS_NS	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPPORT_NETBIOS_NS = 137/;"	constant
IPPORT_NETBIOS_SSN	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPPORT_NETBIOS_SSN = 139/;"	constant
IPPORT_NETSTAT	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPPORT_NETSTAT = 15/;"	constant
IPPORT_NTP	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPPORT_NTP = 123/;"	constant
IPPORT_POP3	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPPORT_POP3 = 110/;"	constant
IPPORT_QOTD	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPPORT_QOTD = 17/;"	constant
IPPORT_REGISTERED_MAX	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPPORT_REGISTERED_MAX = 49151/;"	constant
IPPORT_RESERVED	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPPORT_RESERVED = 1024/;"	constant
IPPORT_RJE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPPORT_RJE = 77/;"	constant
IPPORT_ROUTESERVER	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPPORT_ROUTESERVER = 520/;"	constant
IPPORT_SMTP	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPPORT_SMTP = 25/;"	constant
IPPORT_SNMP	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPPORT_SNMP = 161/;"	constant
IPPORT_SNMP_TRAP	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPPORT_SNMP_TRAP = 162/;"	constant
IPPORT_SUPDUP	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPPORT_SUPDUP = 95/;"	constant
IPPORT_SYSTAT	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPPORT_SYSTAT = 11/;"	constant
IPPORT_TCPMUX	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPPORT_TCPMUX = 1/;"	constant
IPPORT_TELNET	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPPORT_TELNET = 23/;"	constant
IPPORT_TFTP	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPPORT_TFTP = 69/;"	constant
IPPORT_TIMESERVER	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPPORT_TIMESERVER = 37/;"	constant
IPPORT_TTYLINK	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPPORT_TTYLINK = 87/;"	constant
IPPORT_WHOIS	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPPORT_WHOIS = 43/;"	constant
IPPORT_WHOSERVER	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPPORT_WHOSERVER = 513/;"	constant
IPPROTO	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPPROTO = struct {$/;"	struct
IPSEC	$ZIGLIB/std/c/openbsd.zig	/IPSEC = 82/;"	field
IPSEC_AUTH_FIREWALL_DROP	$ZIGLIB/std/os/windows/ntstatus.zig	/IPSEC_AUTH_FIREWALL_DROP = 0xC0360008/;"	field
IPSEC_BAD_SPI	$ZIGLIB/std/os/windows/ntstatus.zig	/IPSEC_BAD_SPI = 0xC0360001/;"	field
IPSEC_CLEAR_TEXT_DROP	$ZIGLIB/std/os/windows/ntstatus.zig	/IPSEC_CLEAR_TEXT_DROP = 0xC0360007/;"	field
IPSEC_DOSP_BLOCK	$ZIGLIB/std/os/windows/ntstatus.zig	/IPSEC_DOSP_BLOCK = 0xC0368000/;"	field
IPSEC_DOSP_INVALID_PACKET	$ZIGLIB/std/os/windows/ntstatus.zig	/IPSEC_DOSP_INVALID_PACKET = 0xC0368002/;"	field
IPSEC_DOSP_KEYMOD_NOT_ALLOWED	$ZIGLIB/std/os/windows/ntstatus.zig	/IPSEC_DOSP_KEYMOD_NOT_ALLOWED = 0xC0368005/;"	field
IPSEC_DOSP_MAX_ENTRIES	$ZIGLIB/std/os/windows/ntstatus.zig	/IPSEC_DOSP_MAX_ENTRIES = 0xC0368004/;"	field
IPSEC_DOSP_MAX_PER_IP_RATELIMIT_QUEUES	$ZIGLIB/std/os/windows/ntstatus.zig	/IPSEC_DOSP_MAX_PER_IP_RATELIMIT_QUEUES = 0xC0368006/;"	field
IPSEC_DOSP_RECEIVED_MULTICAST	$ZIGLIB/std/os/windows/ntstatus.zig	/IPSEC_DOSP_RECEIVED_MULTICAST = 0xC0368001/;"	field
IPSEC_DOSP_STATE_LOOKUP_FAILED	$ZIGLIB/std/os/windows/ntstatus.zig	/IPSEC_DOSP_STATE_LOOKUP_FAILED = 0xC0368003/;"	field
IPSEC_INTEGRITY_CHECK_FAILED	$ZIGLIB/std/os/windows/ntstatus.zig	/IPSEC_INTEGRITY_CHECK_FAILED = 0xC0360006/;"	field
IPSEC_INVALID_PACKET	$ZIGLIB/std/os/windows/ntstatus.zig	/IPSEC_INVALID_PACKET = 0xC0360005/;"	field
IPSEC_POLICY	$ZIGLIB/std/os/linux.zig	/pub const IPSEC_POLICY = 34/;"	constant
IPSEC_QUEUE_OVERFLOW	$ZIGLIB/std/os/windows/ntstatus.zig	/IPSEC_QUEUE_OVERFLOW = 0xC000A010/;"	field
IPSEC_REPLAY_CHECK_FAILED	$ZIGLIB/std/os/windows/ntstatus.zig	/IPSEC_REPLAY_CHECK_FAILED = 0xC0360004/;"	field
IPSEC_SA_LIFETIME_EXPIRED	$ZIGLIB/std/os/windows/ntstatus.zig	/IPSEC_SA_LIFETIME_EXPIRED = 0xC0360002/;"	field
IPSEC_THROTTLE_DROP	$ZIGLIB/std/os/windows/ntstatus.zig	/IPSEC_THROTTLE_DROP = 0xC0360009/;"	field
IPSEC_WRONG_SA	$ZIGLIB/std/os/windows/ntstatus.zig	/IPSEC_WRONG_SA = 0xC0360003/;"	field
IPV4	$ZIGLIB/std/c/openbsd.zig	/pub const IPV4 = IPIP/;"	constant
IPV6	$ZIGLIB/std/os/linux.zig	/pub const IPV6 = 41/;"	constant
IPV6_ADD_IFLIST	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPV6_ADD_IFLIST = 29/;"	constant
IPV6_ADD_MEMBERSHIP	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPV6_ADD_MEMBERSHIP = 12/;"	constant
IPV6_CHECKSUM	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPV6_CHECKSUM = 26/;"	constant
IPV6_DEL_IFLIST	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPV6_DEL_IFLIST = 30/;"	constant
IPV6_DONTFRAG	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPV6_DONTFRAG = 14/;"	constant
IPV6_DROP_MEMBERSHIP	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPV6_DROP_MEMBERSHIP = 13/;"	constant
IPV6_ECN	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPV6_ECN = 50/;"	constant
IPV6_GET_IFLIST	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPV6_GET_IFLIST = 33/;"	constant
IPV6_HDRINCL	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPV6_HDRINCL = 2/;"	constant
IPV6_HOPLIMIT	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPV6_HOPLIMIT = 21/;"	constant
IPV6_HOPOPTS	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPV6_HOPOPTS = 1/;"	constant
IPV6_ICMP	$ZIGLIB/std/c/openbsd.zig	/pub const IPV6_ICMP = 58/;"	constant
IPV6_IFLIST	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPV6_IFLIST = 28/;"	constant
IPV6_MTU	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPV6_MTU = 72/;"	constant
IPV6_MTU_DISCOVER	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPV6_MTU_DISCOVER = 71/;"	constant
IPV6_MULTICAST_HOPS	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPV6_MULTICAST_HOPS = 10/;"	constant
IPV6_MULTICAST_IF	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPV6_MULTICAST_IF = 9/;"	constant
IPV6_MULTICAST_LOOP	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPV6_MULTICAST_LOOP = 11/;"	constant
IPV6_NRT_INTERFACE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPV6_NRT_INTERFACE = 74/;"	constant
IPV6_PKTINFO	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPV6_PKTINFO = 19/;"	constant
IPV6_PKTINFO_EX	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPV6_PKTINFO_EX = 51/;"	constant
IPV6_PROTECTION_LEVEL	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPV6_PROTECTION_LEVEL = 23/;"	constant
IPV6_RECVDSTADDR	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPV6_RECVDSTADDR = 25/;"	constant
IPV6_RECVERR	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPV6_RECVERR = 75/;"	constant
IPV6_RECVIF	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPV6_RECVIF = 24/;"	constant
IPV6_RECVRTHDR	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPV6_RECVRTHDR = 38/;"	constant
IPV6_RECVTCLASS	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPV6_RECVTCLASS = 40/;"	constant
IPV6_RTHDR	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPV6_RTHDR = 32/;"	constant
IPV6_TCLASS	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPV6_TCLASS = 39/;"	constant
IPV6_UNICAST_HOPS	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPV6_UNICAST_HOPS = 4/;"	constant
IPV6_UNICAST_IF	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPV6_UNICAST_IF = 31/;"	constant
IPV6_USER_MTU	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPV6_USER_MTU = 76/;"	constant
IPV6_V6ONLY	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPV6_V6ONLY = 27/;"	constant
IPV6_WFP_REDIRECT_CONTEXT	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPV6_WFP_REDIRECT_CONTEXT = 70/;"	constant
IPV6_WFP_REDIRECT_RECORDS	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPV6_WFP_REDIRECT_RECORDS = 60/;"	constant
IPX_ADDRESS	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPX_ADDRESS = 16391/;"	constant
IPX_ADDRESS_NOTIFY	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPX_ADDRESS_NOTIFY = 16396/;"	constant
IPX_DSTYPE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPX_DSTYPE = 16386/;"	constant
IPX_EXTENDED_ADDRESS	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPX_EXTENDED_ADDRESS = 16388/;"	constant
IPX_FILTERPTYPE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPX_FILTERPTYPE = 16385/;"	constant
IPX_GETNETINFO	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPX_GETNETINFO = 16392/;"	constant
IPX_GETNETINFO_NORIP	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPX_GETNETINFO_NORIP = 16393/;"	constant
IPX_IMMEDIATESPXACK	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPX_IMMEDIATESPXACK = 16400/;"	constant
IPX_MAXSIZE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPX_MAXSIZE = 16390/;"	constant
IPX_MAX_ADAPTER_NUM	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPX_MAX_ADAPTER_NUM = 16397/;"	constant
IPX_PTYPE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPX_PTYPE = 16384/;"	constant
IPX_RECEIVE_BROADCAST	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPX_RECEIVE_BROADCAST = 16399/;"	constant
IPX_RECVHDR	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPX_RECVHDR = 16389/;"	constant
IPX_RERIPNETNUMBER	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPX_RERIPNETNUMBER = 16398/;"	constant
IPX_SPXGETCONNECTIONSTATUS	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPX_SPXGETCONNECTIONSTATUS = 16395/;"	constant
IPX_STOPFILTERPTYPE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IPX_STOPFILTERPTYPE = 16387/;"	constant
IP_ADDRESS_CONFLICT1	$ZIGLIB/std/os/windows/win32error.zig	/IP_ADDRESS_CONFLICT1 = 611/;"	field
IP_ADDRESS_CONFLICT2	$ZIGLIB/std/os/windows/win32error.zig	/IP_ADDRESS_CONFLICT2 = 612/;"	field
IP_ADD_IFLIST	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IP_ADD_IFLIST = 29/;"	constant
IP_ADD_MEMBERSHIP	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IP_ADD_MEMBERSHIP = 12/;"	constant
IP_ADD_SOURCE_MEMBERSHIP	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IP_ADD_SOURCE_MEMBERSHIP = 15/;"	constant
IP_BLOCK_SOURCE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IP_BLOCK_SOURCE = 17/;"	constant
IP_DEFAULT_MULTICAST_LOOP	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IP_DEFAULT_MULTICAST_LOOP = 1/;"	constant
IP_DEFAULT_MULTICAST_TTL	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IP_DEFAULT_MULTICAST_TTL = 1/;"	constant
IP_DEL_IFLIST	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IP_DEL_IFLIST = 30/;"	constant
IP_DONTFRAGMENT	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IP_DONTFRAGMENT = 14/;"	constant
IP_DROP_MEMBERSHIP	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IP_DROP_MEMBERSHIP = 13/;"	constant
IP_DROP_SOURCE_MEMBERSHIP	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IP_DROP_SOURCE_MEMBERSHIP = 16/;"	constant
IP_ECN	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IP_ECN = 50/;"	constant
IP_GET_IFLIST	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IP_GET_IFLIST = 33/;"	constant
IP_HDRINCL	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IP_HDRINCL = 2/;"	constant
IP_HOPLIMIT	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IP_HOPLIMIT = 21/;"	constant
IP_IFLIST	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IP_IFLIST = 28/;"	constant
IP_MAX_MEMBERSHIPS	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IP_MAX_MEMBERSHIPS = 20/;"	constant
IP_MTU	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IP_MTU = 73/;"	constant
IP_MTU_DISCOVER	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IP_MTU_DISCOVER = 71/;"	constant
IP_MULTICAST_IF	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IP_MULTICAST_IF = 9/;"	constant
IP_MULTICAST_LOOP	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IP_MULTICAST_LOOP = 11/;"	constant
IP_MULTICAST_TTL	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IP_MULTICAST_TTL = 10/;"	constant
IP_NRT_INTERFACE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IP_NRT_INTERFACE = 74/;"	constant
IP_OPTIONS	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IP_OPTIONS = 1/;"	constant
IP_ORIGINAL_ARRIVAL_IF	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IP_ORIGINAL_ARRIVAL_IF = 47/;"	constant
IP_PKTINFO	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IP_PKTINFO = 19/;"	constant
IP_PKTINFO_EX	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IP_PKTINFO_EX = 51/;"	constant
IP_RECEIVE_BROADCAST	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IP_RECEIVE_BROADCAST = 22/;"	constant
IP_RECVDSTADDR	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IP_RECVDSTADDR = 25/;"	constant
IP_RECVERR	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IP_RECVERR = 75/;"	constant
IP_RECVIF	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IP_RECVIF = 24/;"	constant
IP_RECVRTHDR	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IP_RECVRTHDR = 38/;"	constant
IP_RECVTCLASS	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IP_RECVTCLASS = 40/;"	constant
IP_RECVTOS	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IP_RECVTOS = 40/;"	constant
IP_RECVTTL	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IP_RECVTTL = 21/;"	constant
IP_RTHDR	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IP_RTHDR = 32/;"	constant
IP_TCLASS	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IP_TCLASS = 39/;"	constant
IP_TOS	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IP_TOS = 3/;"	constant
IP_TTL	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IP_TTL = 4/;"	constant
IP_UNBLOCK_SOURCE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IP_UNBLOCK_SOURCE = 18/;"	constant
IP_UNICAST_IF	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IP_UNICAST_IF = 31/;"	constant
IP_UNSPECIFIED_HOP_LIMIT	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IP_UNSPECIFIED_HOP_LIMIT = -1/;"	constant
IP_UNSPECIFIED_TYPE_OF_SERVICE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IP_UNSPECIFIED_TYPE_OF_SERVICE = -1/;"	constant
IP_USER_MTU	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IP_USER_MTU = 76/;"	constant
IP_WFP_REDIRECT_CONTEXT	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IP_WFP_REDIRECT_CONTEXT = 70/;"	constant
IP_WFP_REDIRECT_RECORDS	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IP_WFP_REDIRECT_RECORDS = 60/;"	constant
IRDA	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const IRDA = 26/;"	constant
IRDA_PROTO_SOCK_STREAM	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IRDA_PROTO_SOCK_STREAM = 1/;"	constant
IREAD	$ZIGLIB/std/c/dragonfly.zig	/pub const IREAD = IRUSR/;"	constant
IRGRP	$ZIGLIB/std/os/linux.zig	/pub const IRGRP = 0o040/;"	constant
IRISH	$ZIGLIB/std/os/windows/lang.zig	/^pub const IRISH = 0x3c/;"	constant
IRISH_IRELAND	$ZIGLIB/std/os/windows/sublang.zig	/^pub const IRISH_IRELAND = 0x02/;"	constant
IRLMP	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const IRLMP = 255/;"	constant
IRLMP_9WIRE_MODE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IRLMP_9WIRE_MODE = 22/;"	constant
IRLMP_DISCOVERY_MODE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IRLMP_DISCOVERY_MODE = 25/;"	constant
IRLMP_ENUMDEVICES	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IRLMP_ENUMDEVICES = 16/;"	constant
IRLMP_EXCLUSIVE_MODE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IRLMP_EXCLUSIVE_MODE = 20/;"	constant
IRLMP_IAS_QUERY	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IRLMP_IAS_QUERY = 18/;"	constant
IRLMP_IAS_SET	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IRLMP_IAS_SET = 17/;"	constant
IRLMP_IRLPT_MODE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IRLMP_IRLPT_MODE = 21/;"	constant
IRLMP_PARAMETERS	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IRLMP_PARAMETERS = 24/;"	constant
IRLMP_SEND_PDU_LEN	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IRLMP_SEND_PDU_LEN = 19/;"	constant
IRLMP_SHARP_MODE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IRLMP_SHARP_MODE = 32/;"	constant
IRLMP_TINYTP_MODE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const IRLMP_TINYTP_MODE = 23/;"	constant
IROTH	$ZIGLIB/std/os/linux.zig	/pub const IROTH = 0o004/;"	constant
IRQ_BUSY	$ZIGLIB/std/os/windows/win32error.zig	/IRQ_BUSY = 1119/;"	field
IRTP	$ZIGLIB/std/c/freebsd.zig	/pub const IRTP = 28/;"	constant
IRUSR	$ZIGLIB/std/os/linux.zig	/pub const IRUSR = 0o400/;"	constant
IRWXG	$ZIGLIB/std/os/linux.zig	/pub const IRWXG = 0o070/;"	constant
IRWXO	$ZIGLIB/std/os/linux.zig	/pub const IRWXO = 0o007/;"	constant
IRWXU	$ZIGLIB/std/os/linux.zig	/pub const IRWXU = 0o700/;"	constant
ISBLK	$ZIGLIB/std/os/linux.zig	/pub fn ISBLK(m: mode_t) bool {$/;"	function
ISCHR	$ZIGLIB/std/os/linux.zig	/pub fn ISCHR(m: mode_t) bool {$/;"	function
ISCONN	$ZIGLIB/std/os/wasi.zig	/ISCONN = 30/;"	field
ISCSI	$ZIGLIB/std/os/linux.zig	/pub const ISCSI = 8/;"	constant
ISDIR	$ZIGLIB/std/os/wasi.zig	/ISDIR = 31/;"	field
ISDN	$ZIGLIB/std/os/linux.zig	/pub const ISDN = 34/;"	constant
ISDOOR	$ZIGLIB/std/c/solaris.zig	/pub fn ISDOOR(m: u32) bool {$/;"	function
ISFIFO	$ZIGLIB/std/os/linux.zig	/pub fn ISFIFO(m: mode_t) bool {$/;"	function
ISGID	$ZIGLIB/std/os/linux.zig	/pub const ISGID = 0o2000/;"	constant
ISIG	$ZIGLIB/std/os/linux.zig	/^pub const ISIG: tcflag_t = 1/;"	constant
ISINDEX	$ZIGLIB/std/c/haiku.zig	/pub fn ISINDEX(m: u32) bool {$/;"	function
ISLNK	$ZIGLIB/std/os/linux.zig	/pub fn ISLNK(m: mode_t) bool {$/;"	function
ISNAM	$ZIGLIB/std/os/linux/errno/sparc.zig	/ISNAM = 120/;"	field
ISPORT	$ZIGLIB/std/c/solaris.zig	/pub fn ISPORT(m: u32) bool {$/;"	function
ISREG	$ZIGLIB/std/os/linux.zig	/pub fn ISREG(m: mode_t) bool {$/;"	function
ISSOCK	$ZIGLIB/std/os/linux.zig	/pub fn ISSOCK(m: mode_t) bool {$/;"	function
ISSTREAM	$ZIGLIB/std/c/solaris.zig	/pub const ISSTREAM = 13/;"	constant
ISSUING_CA_UNTRUSTED	$ZIGLIB/std/os/windows/ntstatus.zig	/ISSUING_CA_UNTRUSTED = 0xC000038A/;"	field
ISSUING_CA_UNTRUSTED_KDC	$ZIGLIB/std/os/windows/ntstatus.zig	/ISSUING_CA_UNTRUSTED_KDC = 0xC000040D/;"	field
ISTRIP	$ZIGLIB/std/os/linux.zig	/^pub const ISTRIP: tcflag_t = 32/;"	constant
ISTXT	$ZIGLIB/std/c/dragonfly.zig	/pub const ISTXT = 512/;"	constant
ISUID	$ZIGLIB/std/os/linux.zig	/pub const ISUID = 0o4000/;"	constant
ISVTX	$ZIGLIB/std/os/linux.zig	/pub const ISVTX = 0o1000/;"	constant
IS_JOINED	$ZIGLIB/std/os/windows/win32error.zig	/IS_JOINED = 134/;"	field
IS_JOIN_PATH	$ZIGLIB/std/os/windows/win32error.zig	/IS_JOIN_PATH = 147/;"	field
IS_JOIN_TARGET	$ZIGLIB/std/os/windows/win32error.zig	/IS_JOIN_TARGET = 133/;"	field
IS_SUBSTED	$ZIGLIB/std/os/windows/win32error.zig	/IS_SUBSTED = 135/;"	field
IS_SUBST_PATH	$ZIGLIB/std/os/windows/win32error.zig	/IS_SUBST_PATH = 146/;"	field
IS_SUBST_TARGET	$ZIGLIB/std/os/windows/win32error.zig	/IS_SUBST_TARGET = 149/;"	field
IS_WRITING	$ZIGLIB/std/Thread/RwLock.zig	/const IS_WRITING: usize = 1/;"	constant
ITALIAN	$ZIGLIB/std/os/windows/sublang.zig	/^pub const ITALIAN = 0x01/;"	constant
ITALIAN_SWISS	$ZIGLIB/std/os/windows/sublang.zig	/^pub const ITALIAN_SWISS = 0x02/;"	constant
ITERATED_DATA_EXCEEDS_64k	$ZIGLIB/std/os/windows/win32error.zig	/ITERATED_DATA_EXCEEDS_64k = 194/;"	field
ITIMER	$ZIGLIB/std/os/linux.zig	/^pub const ITIMER = enum(i32) {$/;"	enum
ITLB	$ZIGLIB/std/os/linux.zig	/ITLB/;"	field
IUCLC	$ZIGLIB/std/os/linux.zig	/^pub const IUCLC: tcflag_t = 512/;"	constant
IUCV	$ZIGLIB/std/os/linux.zig	/pub const IUCV = 32/;"	constant
IUMSK	$ZIGLIB/std/c/haiku.zig	/pub const IUMSK = 0o7777/;"	constant
IUTF8	$ZIGLIB/std/os/linux.zig	/^pub const IUTF8: tcflag_t = 16384/;"	constant
IWGRP	$ZIGLIB/std/os/linux.zig	/pub const IWGRP = 0o020/;"	constant
IWHT	$ZIGLIB/std/c/netbsd.zig	/pub fn IWHT(m: u32) bool {$/;"	function
IWMMXT	$ZIGLIB/std/os/linux/arm-eabi.zig	/pub const IWMMXT = 1 << 9/;"	constant
IWOTH	$ZIGLIB/std/os/linux.zig	/pub const IWOTH = 0o002/;"	constant
IWRITE	$ZIGLIB/std/c/dragonfly.zig	/pub const IWRITE = IWUSR/;"	constant
IWUSR	$ZIGLIB/std/os/linux.zig	/pub const IWUSR = 0o200/;"	constant
IXANY	$ZIGLIB/std/os/linux.zig	/^pub const IXANY: tcflag_t = 2048/;"	constant
IXGRP	$ZIGLIB/std/os/linux.zig	/pub const IXGRP = 0o010/;"	constant
IXOFF	$ZIGLIB/std/os/linux.zig	/^pub const IXOFF: tcflag_t = 4096/;"	constant
IXON	$ZIGLIB/std/os/linux.zig	/^pub const IXON: tcflag_t = 1024/;"	constant
IXOTH	$ZIGLIB/std/os/linux.zig	/pub const IXOTH = 0o001/;"	constant
IXUSR	$ZIGLIB/std/os/linux.zig	/pub const IXUSR = 0o100/;"	constant
I_VERSION	$ZIGLIB/std/os/linux.zig	/pub const I_VERSION = (1 << 23)/;"	constant
IcmpError	$ZIGLIB/std/os/uefi/status.zig	/IcmpError = high_bit | 22/;"	field
IdAndValue	$ZIGLIB/std/sort.zig	/^const IdAndValue = struct {$/;"	struct
Identifier	$ZIGLIB/std/crypto/Certificate.zig	/pub const Identifier = packed struct(u8) {$/;"	struct
IdentityElementError	$ZIGLIB/std/crypto/errors.zig	/^pub const IdentityElementError = error{IdentityElement}/;"	constant
Ignore	$ZIGLIB/std/child_process.zig	/Ignore/;"	field
Image1D	$ZIGLIB/std/target/spirv.zig	/Image1D/;"	field
ImageBase	$ZIGLIB/std/os/windows.zig	/ImageBase: ULONG64/;"	field
ImageBaseAddress	$ZIGLIB/std/os/windows.zig	/ImageBaseAddress: HMODULE/;"	field
ImageBasic	$ZIGLIB/std/target/spirv.zig	/ImageBasic/;"	field
ImageBuffer	$ZIGLIB/std/target/spirv.zig	/ImageBuffer/;"	field
ImageCubeArray	$ZIGLIB/std/target/spirv.zig	/ImageCubeArray/;"	field
ImageDataDirectory	$ZIGLIB/std/coff.zig	/^pub const ImageDataDirectory = extern struct {$/;"	struct
ImageFileExecutionOptions	$ZIGLIB/std/os/windows.zig	/ImageFileExecutionOptions: ULONG/;"	field
ImageFootprintNV	$ZIGLIB/std/target/spirv.zig	/ImageFootprintNV/;"	field
ImageGatherBiasLodAMD	$ZIGLIB/std/target/spirv.zig	/ImageGatherBiasLodAMD/;"	field
ImageGatherExtended	$ZIGLIB/std/target/spirv.zig	/ImageGatherExtended/;"	field
ImageMSArray	$ZIGLIB/std/target/spirv.zig	/ImageMSArray/;"	field
ImageMipmap	$ZIGLIB/std/target/spirv.zig	/ImageMipmap/;"	field
ImageNumberHigh	$ZIGLIB/std/os/windows.zig	/ImageNumberHigh: USHORT/;"	field
ImageNumberLow	$ZIGLIB/std/os/windows.zig	/ImageNumberLow: USHORT/;"	field
ImagePathName	$ZIGLIB/std/os/windows.zig	/ImagePathName: UNICODE_STRING/;"	field
ImageQuery	$ZIGLIB/std/target/spirv.zig	/ImageQuery/;"	field
ImageReadWrite	$ZIGLIB/std/target/spirv.zig	/ImageReadWrite/;"	field
ImageReadWriteLodAMD	$ZIGLIB/std/target/spirv.zig	/ImageReadWriteLodAMD/;"	field
ImageRect	$ZIGLIB/std/target/spirv.zig	/ImageRect/;"	field
ImageSubSystem	$ZIGLIB/std/os/windows.zig	/ImageSubSystem: ULONG/;"	field
ImageSubSystemMajorVersion	$ZIGLIB/std/os/windows.zig	/ImageSubSystemMajorVersion: ULONG/;"	field
ImageSubSystemMinorVersion	$ZIGLIB/std/os/windows.zig	/ImageSubSystemMinorVersion: ULONG/;"	field
ImmOrReg	$ZIGLIB/std/os/linux/bpf.zig	/const ImmOrReg = union(Source) {$/;"	union
Impl	$ZIGLIB/std/Thread/RwLock.zig	/^pub const Impl = if (builtin.single_threaded)$/;"	constant
Import	$ZIGLIB/std/wasm.zig	/^pub const Import = struct {$/;"	struct
ImportDirectoryEntry	$ZIGLIB/std/coff.zig	/^pub const ImportDirectoryEntry = extern struct {$/;"	struct
ImportHintNameEntry	$ZIGLIB/std/coff.zig	/^pub const ImportHintNameEntry = extern struct {$/;"	struct
ImportLookupEntry32	$ZIGLIB/std/coff.zig	/^pub const ImportLookupEntry32 = struct {$/;"	struct
ImportLookupEntry64	$ZIGLIB/std/coff.zig	/^pub const ImportLookupEntry64 = struct {$/;"	struct
InInitializationOrderModuleList	$ZIGLIB/std/os/windows.zig	/InInitializationOrderModuleList: LIST_ENTRY/;"	field
InLoadOrderModuleList	$ZIGLIB/std/os/windows.zig	/InLoadOrderModuleList: LIST_ENTRY/;"	field
InMemoryOrderLinks	$ZIGLIB/std/os/windows.zig	/InMemoryOrderLinks: LIST_ENTRY/;"	field
InMemoryOrderModuleList	$ZIGLIB/std/os/windows.zig	/InMemoryOrderModuleList: LIST_ENTRY/;"	field
IncludeDir	$ZIGLIB/std/Build/CompileStep.zig	/^pub const IncludeDir = union(enum) {$/;"	union
IncompatibleVersion	$ZIGLIB/std/os/uefi/status.zig	/IncompatibleVersion = high_bit | 25/;"	field
Incomplete	$ZIGLIB/std/os/uefi/protocols/ip6_protocol.zig	/Incomplete/;"	field
Index	$ZIGLIB/std/zig/Ast.zig	/pub const Index = u32/;"	constant
IndexHeader	$ZIGLIB/std/array_hash_map.zig	/^const IndexHeader = struct {$/;"	struct
IndexInt	$ZIGLIB/std/simd.zig	/const IndexInt = VectorIndex(@TypeOf(vec))/;"	constant
IndexNumber	$ZIGLIB/std/os/windows.zig	/IndexNumber: LARGE_INTEGER/;"	field
IndexedArray	$ZIGLIB/std/enums.zig	/^pub fn IndexedArray(comptime I: type, comptime V: type, comptime Ext: fn (type) type) type {$/;"	function
IndexedMap	$ZIGLIB/std/enums.zig	/^pub fn IndexedMap(comptime I: type, comptime V: type, comptime Ext: fn (type) type) type {$/;"	function
IndexedSet	$ZIGLIB/std/enums.zig	/^pub fn IndexedSet(comptime I: type, comptime Ext: fn (type) type) type {$/;"	function
Indexer	$ZIGLIB/std/enums.zig	/pub const Indexer = I/;"	constant
IndirectReferencesINTEL	$ZIGLIB/std/target/spirv.zig	/IndirectReferencesINTEL/;"	field
InfiniBand	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/InfiniBand: *const InfiniBandDevicePath/;"	field
InfiniBandDevicePath	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/pub const InfiniBandDevicePath = extern struct {$/;"	struct
InflateError	$ZIGLIB/std/compress/deflate/decompressor.zig	/^const InflateError = error{$/;"	constant
Info	$ZIGLIB/std/os/uefi/protocols/hii_popup_protocol.zig	/Info/;"	field
InfoAttr	$ZIGLIB/std/os/linux/bpf.zig	/^pub const InfoAttr = extern struct {$/;"	struct
InfoSec	$ZIGLIB/std/os/linux/bpf/btf_ext.zig	/^pub const InfoSec = packed struct {$/;"	struct
Information	$ZIGLIB/std/os/windows.zig	/Information: ULONG_PTR/;"	field
Inherit	$ZIGLIB/std/child_process.zig	/Inherit/;"	field
InheritedAddressSpace	$ZIGLIB/std/os/windows.zig	/InheritedAddressSpace: BOOLEAN/;"	field
Init	$ZIGLIB/std/mem.zig	/const Init = @TypeOf(init)/;"	constant
InitError	$ZIGLIB/std/process.zig	/pub const InitError = switch (builtin.os.tag) {$/;"	constant
InitExpression	$ZIGLIB/std/wasm.zig	/^pub const InitExpression = union(enum) {$/;"	union
InitOnceExecuteOnce	$ZIGLIB/std/os/windows.zig	/^pub fn InitOnceExecuteOnce(InitOnce: *INIT_ONCE, InitFn: INIT_ONCE_FN, Parameter: ?*anyopaque, Context: ?*anyopaque) void {$/;"	function
InitOsDataError	$ZIGLIB/std/event/loop.zig	/const InitOsDataError = os.EpollCreateError || mem.Allocator.Error || os.EventFdError ||$/;"	constant
InitUtf16leError	$ZIGLIB/std/process.zig	/pub const InitUtf16leError = error{ OutOfMemory, InvalidCmdLine }/;"	constant
Initialized	$ZIGLIB/std/os/windows.zig	/Initialized: BOOLEAN/;"	field
Inline	$ZIGLIB/std/builtin.zig	/Inline/;"	field
InlineeLines	$ZIGLIB/std/pdb.zig	/InlineeLines = 0xf6/;"	field
InnerThreads	$ZIGLIB/std/valgrind.zig	/InnerThreads = 6402/;"	field
InnerType	$ZIGLIB/std/process.zig	/const InnerType = switch (builtin.os.tag) {$/;"	constant
Input	$ZIGLIB/std/crypto/phc_encoding.zig	/const Input = struct {$/;"	struct
InputAttachment	$ZIGLIB/std/target/spirv.zig	/InputAttachment/;"	field
InputAttachmentArrayDynamicIndexing	$ZIGLIB/std/target/spirv.zig	/InputAttachmentArrayDynamicIndexing/;"	field
InputAttachmentArrayDynamicIndexingEXT	$ZIGLIB/std/target/spirv.zig	/InputAttachmentArrayDynamicIndexingEXT/;"	field
InputAttachmentArrayNonUniformIndexing	$ZIGLIB/std/target/spirv.zig	/InputAttachmentArrayNonUniformIndexing/;"	field
InputAttachmentArrayNonUniformIndexingEXT	$ZIGLIB/std/target/spirv.zig	/InputAttachmentArrayNonUniformIndexingEXT/;"	field
InputKey	$ZIGLIB/std/os/uefi/protocols/simple_text_input_ex_protocol.zig	/^pub const InputKey = extern struct {$/;"	struct
Insn	$ZIGLIB/std/os/linux/bpf.zig	/^pub const Insn = packed struct {$/;"	struct
InstallArtifactStep	$ZIGLIB/std/Build/InstallArtifactStep.zig	/^const InstallArtifactStep = @This()/;"	constant
InstallConfigHeaderOptions	$ZIGLIB/std/Build/CompileStep.zig	/^pub const InstallConfigHeaderOptions = struct {$/;"	struct
InstallDir	$ZIGLIB/std/Build.zig	/^pub const InstallDir = union(enum) {$/;"	union
InstallDirStep	$ZIGLIB/std/Build/InstallDirStep.zig	/^const InstallDirStep = @This()/;"	constant
InstallDirectoryOptions	$ZIGLIB/std/Build.zig	/^pub const InstallDirectoryOptions = InstallDirStep.Options/;"	constant
InstallFileStep	$ZIGLIB/std/Build/InstallFileStep.zig	/^const InstallFileStep = @This()/;"	constant
InstallRawStep	$ZIGLIB/std/Build/InstallRawStep.zig	/^const InstallRawStep = @This()/;"	constant
InstalledFile	$ZIGLIB/std/Build.zig	/^pub const InstalledFile = struct {$/;"	struct
Instance	$ZIGLIB/std/event/loop.zig	/pub const Instance = switch (std.options.io_mode) {$/;"	constant
Instant	$ZIGLIB/std/time.zig	/^pub const Instant = struct {$/;"	struct
Int16	$ZIGLIB/std/target/spirv.zig	/Int16/;"	field
Int64	$ZIGLIB/std/target/spirv.zig	/Int64/;"	field
Int64Atomics	$ZIGLIB/std/target/spirv.zig	/Int64Atomics/;"	field
Int64ImageEXT	$ZIGLIB/std/target/spirv.zig	/Int64ImageEXT/;"	field
Int8	$ZIGLIB/std/target/spirv.zig	/Int8/;"	field
IntConst	$ZIGLIB/std/math/big/rational.zig	/^const IntConst = std.math.big.int.Const/;"	constant
IntFittingRange	$ZIGLIB/std/math.zig	/^pub fn IntFittingRange(comptime from: comptime_int, comptime to: comptime_int) type {$/;"	function
IntInfo	$ZIGLIB/std/os/linux/bpf/btf.zig	/^pub const IntInfo = packed struct(u32) {$/;"	struct
IntRepr	$ZIGLIB/std/crypto/pcurves/common.zig	/pub const IntRepr = meta.Int(.unsigned, params.field_bits)/;"	constant
IntToEnumError	$ZIGLIB/std/meta.zig	/^pub const IntToEnumError = error{InvalidEnumTag}/;"	constant
IntType	$ZIGLIB/std/meta.zig	/^pub const IntType = @compileError("replaced by std.meta.Int")/;"	constant
Integer	$ZIGLIB/std/math/big/rational.zig	/Integer/;"	field
IntegerBitSet	$ZIGLIB/std/bit_set.zig	/^pub fn IntegerBitSet(comptime size: u16) type {$/;"	function
IntegerContext	$ZIGLIB/std/os/windows.zig	/IntegerContext: [16]?*ULONG64/;"	field
IntegerFunctions2INTEL	$ZIGLIB/std/target/spirv.zig	/IntegerFunctions2INTEL/;"	field
IntegerLiteral	$ZIGLIB/std/c/tokenizer.zig	/IntegerLiteral: NumSuffix/;"	field
IntegerLiteralBinary	$ZIGLIB/std/c/tokenizer.zig	/IntegerLiteralBinary/;"	field
IntegerLiteralBinaryFirst	$ZIGLIB/std/c/tokenizer.zig	/IntegerLiteralBinaryFirst/;"	field
IntegerLiteralHex	$ZIGLIB/std/c/tokenizer.zig	/IntegerLiteralHex/;"	field
IntegerLiteralHexFirst	$ZIGLIB/std/c/tokenizer.zig	/IntegerLiteralHexFirst/;"	field
IntegerLiteralOct	$ZIGLIB/std/c/tokenizer.zig	/IntegerLiteralOct/;"	field
IntegerSuffix	$ZIGLIB/std/c/tokenizer.zig	/IntegerSuffix/;"	field
IntegerSuffixL	$ZIGLIB/std/c/tokenizer.zig	/IntegerSuffixL/;"	field
IntegerSuffixLL	$ZIGLIB/std/c/tokenizer.zig	/IntegerSuffixLL/;"	field
IntegerSuffixU	$ZIGLIB/std/c/tokenizer.zig	/IntegerSuffixU/;"	field
IntegerSuffixUL	$ZIGLIB/std/c/tokenizer.zig	/IntegerSuffixUL/;"	field
InterfaceInfo	$ZIGLIB/std/os/uefi/protocols/ip6_config_protocol.zig	/InterfaceInfo/;"	field
Internal	$ZIGLIB/std/os/windows.zig	/Internal: ULONG_PTR/;"	field
InternalHigh	$ZIGLIB/std/os/windows.zig	/InternalHigh: ULONG_PTR/;"	field
InternalInformation	$ZIGLIB/std/os/windows.zig	/InternalInformation: FILE_INTERNAL_INFORMATION/;"	field
InterpolationFunction	$ZIGLIB/std/target/spirv.zig	/InterpolationFunction/;"	field
Interrupt	$ZIGLIB/std/builtin.zig	/Interrupt/;"	field
InterruptTime	$ZIGLIB/std/os/windows.zig	/InterruptTime: KSYSTEM_TIME/;"	field
InterruptTimeBias	$ZIGLIB/std/os/windows.zig	/InterruptTimeBias: ULONGLONG/;"	field
Invalid	$ZIGLIB/std/c/tokenizer.zig	/Invalid/;"	field
InvalidLanguage	$ZIGLIB/std/os/uefi/status.zig	/InvalidLanguage = high_bit | 32/;"	field
InvalidParameter	$ZIGLIB/std/os/uefi/status.zig	/InvalidParameter = high_bit | 2/;"	field
IoCtlCommand	$ZIGLIB/std/c/solaris.zig	/^const IoCtlCommand = enum(u32) {$/;"	enum
IoCtl_SIOCGIFINDEX_Error	$ZIGLIB/std/os.zig	/^pub const IoCtl_SIOCGIFINDEX_Error = error{$/;"	constant
Ip4Address	$ZIGLIB/std/net.zig	/^pub const Ip4Address = extern struct {$/;"	struct
Ip6Address	$ZIGLIB/std/os/uefi/protocols/ip6_protocol.zig	/^pub const Ip6Address = [16]u8/;"	constant
Ip6AddressInfo	$ZIGLIB/std/os/uefi/protocols/ip6_protocol.zig	/^pub const Ip6AddressInfo = extern struct {$/;"	struct
Ip6CompletionToken	$ZIGLIB/std/os/uefi/protocols/ip6_protocol.zig	/^pub const Ip6CompletionToken = extern struct {$/;"	struct
Ip6ConfigData	$ZIGLIB/std/os/uefi/protocols/ip6_protocol.zig	/^pub const Ip6ConfigData = extern struct {$/;"	struct
Ip6ConfigDataType	$ZIGLIB/std/os/uefi/protocols/ip6_config_protocol.zig	/^pub const Ip6ConfigDataType = enum(u32) {$/;"	enum
Ip6ConfigProtocol	$ZIGLIB/std/os/uefi/protocols/ip6_config_protocol.zig	/^pub const Ip6ConfigProtocol = extern struct {$/;"	struct
Ip6IcmpType	$ZIGLIB/std/os/uefi/protocols/ip6_protocol.zig	/^pub const Ip6IcmpType = extern struct {$/;"	struct
Ip6ModeData	$ZIGLIB/std/os/uefi/protocols/ip6_protocol.zig	/^pub const Ip6ModeData = extern struct {$/;"	struct
Ip6NeighborCache	$ZIGLIB/std/os/uefi/protocols/ip6_protocol.zig	/^pub const Ip6NeighborCache = extern struct {$/;"	struct
Ip6NeighborState	$ZIGLIB/std/os/uefi/protocols/ip6_protocol.zig	/^pub const Ip6NeighborState = enum(u32) {$/;"	enum
Ip6Protocol	$ZIGLIB/std/os/uefi/protocols/ip6_protocol.zig	/^pub const Ip6Protocol = extern struct {$/;"	struct
Ip6RouteTable	$ZIGLIB/std/os/uefi/protocols/ip6_protocol.zig	/^pub const Ip6RouteTable = extern struct {$/;"	struct
Ip6ServiceBindingProtocol	$ZIGLIB/std/os/uefi/protocols/ip6_service_binding_protocol.zig	/^pub const Ip6ServiceBindingProtocol = extern struct {$/;"	struct
IpAddressConflict	$ZIGLIB/std/os/uefi/status.zig	/IpAddressConflict = high_bit | 34/;"	field
IpType	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/pub const IpType = enum(u8) {$/;"	enum
Ipv4	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/Ipv4: *const Ipv4DevicePath/;"	field
Ipv4Address	$ZIGLIB/std/os/uefi.zig	/^pub const Ipv4Address = extern struct {$/;"	struct
Ipv4DevicePath	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/pub const Ipv4DevicePath = extern struct {$/;"	struct
Ipv6	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/Ipv6: *const Ipv6DevicePath/;"	field
Ipv6Address	$ZIGLIB/std/os/uefi.zig	/^pub const Ipv6Address = extern struct {$/;"	struct
Ipv6DevicePath	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/pub const Ipv6DevicePath = extern struct {$/;"	struct
IsNoInline	$ZIGLIB/std/pdb.zig	/IsNoInline: bool/;"	field
IsNoReturn	$ZIGLIB/std/pdb.zig	/IsNoReturn: bool/;"	field
IsProcessorFeaturePresent	$ZIGLIB/std/os/windows.zig	/^pub fn IsProcessorFeaturePresent(feature: PF) bool {$/;"	function
IsStatement	$ZIGLIB/std/pdb.zig	/IsStatement: bool/;"	field
IsTool	$ZIGLIB/std/valgrind.zig	/^pub fn IsTool(base: [2]u8, code: usize) bool {$/;"	function
IsUnreachable	$ZIGLIB/std/pdb.zig	/IsUnreachable: bool/;"	field
Isaac64	$ZIGLIB/std/rand/Isaac64.zig	/^const Isaac64 = @This()/;"	constant
IsapA128A	$ZIGLIB/std/crypto/isap.zig	/^pub const IsapA128A = struct {$/;"	struct
Item	$ZIGLIB/std/array_list.zig	/^const Item = struct {$/;"	struct
ItemAndIndex	$ZIGLIB/std/priority_dequeue.zig	/const ItemAndIndex = struct {$/;"	struct
ItemPtr	$ZIGLIB/std/heap/memory_pool.zig	/const ItemPtr = *align(item_alignment) Item/;"	constant
ItemUnmanaged	$ZIGLIB/std/array_list.zig	/^const ItemUnmanaged = struct {$/;"	struct
IterCreateAttr	$ZIGLIB/std/os/linux/bpf.zig	/^pub const IterCreateAttr = extern struct {$/;"	struct
IterSelf	$ZIGLIB/std/bit_set.zig	/const IterSelf = @This()/;"	constant
IterableDir	$ZIGLIB/std/fs.zig	/^pub const IterableDir = struct {$/;"	struct
Iterator	$ZIGLIB/std/zig/Ast.zig	/pub const Iterator = struct {$/;"	struct
IteratorError	$ZIGLIB/std/fs.zig	/const IteratorError = error{ AccessDenied, SystemResources } || os.UnexpectedError/;"	constant
IteratorOptions	$ZIGLIB/std/bit_set.zig	/^pub const IteratorOptions = struct {$/;"	struct
JAPANESE	$ZIGLIB/std/os/windows/lang.zig	/^pub const JAPANESE = 0x11/;"	constant
JAPANESE_JAPAN	$ZIGLIB/std/os/windows/sublang.zig	/^pub const JAPANESE_JAPAN = 0x01/;"	constant
JAVA	$ZIGLIB/std/os/linux/arm-eabi.zig	/pub const JAVA = 1 << 8/;"	constant
JAVELIN	$ZIGLIB/std/elf.zig	/JAVELIN = 77/;"	field
JL_BOTH	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const JL_BOTH = 4/;"	constant
JL_RECEIVER_ONLY	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const JL_RECEIVER_ONLY = 2/;"	constant
JL_SENDER_ONLY	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const JL_SENDER_ONLY = 1/;"	constant
JMP32	$ZIGLIB/std/os/linux/bpf.zig	/^pub const JMP32 = 0x06/;"	constant
JOB_CONTROL	$ZIGLIB/std/c/openbsd.zig	/pub const JOB_CONTROL = 19/;"	constant
JOIN_ANYCAST	$ZIGLIB/std/os/linux.zig	/pub const JOIN_ANYCAST = 27/;"	constant
JOIN_TO_JOIN	$ZIGLIB/std/os/windows/win32error.zig	/JOIN_TO_JOIN = 138/;"	field
JOIN_TO_SUBST	$ZIGLIB/std/os/windows/win32error.zig	/JOIN_TO_SUBST = 140/;"	field
JOURNAL_DELETE_IN_PROGRESS	$ZIGLIB/std/os/windows/win32error.zig	/JOURNAL_DELETE_IN_PROGRESS = 1178/;"	field
JOURNAL_ENTRY_DELETED	$ZIGLIB/std/os/windows/win32error.zig	/JOURNAL_ENTRY_DELETED = 1181/;"	field
JOURNAL_HOOK_SET	$ZIGLIB/std/os/windows/win32error.zig	/JOURNAL_HOOK_SET = 1430/;"	field
JOURNAL_NOT_ACTIVE	$ZIGLIB/std/os/windows/win32error.zig	/JOURNAL_NOT_ACTIVE = 1179/;"	field
JSET	$ZIGLIB/std/os/linux/bpf.zig	/^pub const JSET = 0x40/;"	constant
JSGE	$ZIGLIB/std/os/linux/bpf.zig	/^pub const JSGE = 0x70/;"	constant
JSGT	$ZIGLIB/std/os/linux/bpf.zig	/^pub const JSGT = 0x60/;"	constant
JSLE	$ZIGLIB/std/os/linux/bpf.zig	/^pub const JSLE = 0xd0/;"	constant
JSLT	$ZIGLIB/std/os/linux/bpf.zig	/^pub const JSLT = 0xc0/;"	constant
JVM1	$ZIGLIB/std/c/solaris.zig	/pub const JVM1 = 39/;"	constant
JVM2	$ZIGLIB/std/c/solaris.zig	/pub const JVM2 = 40/;"	constant
Java	$ZIGLIB/std/dwarf/LANG.zig	/^pub const Java = 0x000b/;"	constant
JmpOp	$ZIGLIB/std/os/linux/bpf.zig	/pub const JmpOp = enum(u8) {$/;"	enum
Julia	$ZIGLIB/std/dwarf/LANG.zig	/^pub const Julia = 0x001f/;"	constant
K10M	$ZIGLIB/std/elf.zig	/K10M = 181/;"	field
KAFFINITY	$ZIGLIB/std/os/windows.zig	/^pub const KAFFINITY = usize/;"	constant
KANNADA	$ZIGLIB/std/os/windows/lang.zig	/^pub const KANNADA = 0x4b/;"	constant
KANNADA_INDIA	$ZIGLIB/std/os/windows/sublang.zig	/^pub const KANNADA_INDIA = 0x01/;"	constant
KASHMIRI	$ZIGLIB/std/os/windows/lang.zig	/^pub const KASHMIRI = 0x60/;"	constant
KASHMIRI_INDIA	$ZIGLIB/std/os/windows/sublang.zig	/^pub const KASHMIRI_INDIA = 0x02/;"	constant
KASHMIRI_SASIA	$ZIGLIB/std/os/windows/sublang.zig	/^pub const KASHMIRI_SASIA = 0x02/;"	constant
KAZAK	$ZIGLIB/std/os/windows/lang.zig	/^pub const KAZAK = 0x3f/;"	constant
KAZAK_KAZAKHSTAN	$ZIGLIB/std/os/windows/sublang.zig	/^pub const KAZAK_KAZAKHSTAN = 0x01/;"	constant
KDC_CERT_EXPIRED	$ZIGLIB/std/os/windows/ntstatus.zig	/KDC_CERT_EXPIRED = 0xC000040E/;"	field
KDC_CERT_REVOKED	$ZIGLIB/std/os/windows/ntstatus.zig	/KDC_CERT_REVOKED = 0xC000040F/;"	field
KDC_INVALID_REQUEST	$ZIGLIB/std/os/windows/ntstatus.zig	/KDC_INVALID_REQUEST = 0xC00002FB/;"	field
KDC_UNABLE_TO_REFER	$ZIGLIB/std/os/windows/ntstatus.zig	/KDC_UNABLE_TO_REFER = 0xC00002FC/;"	field
KDC_UNKNOWN_ETYPE	$ZIGLIB/std/os/windows/ntstatus.zig	/KDC_UNKNOWN_ETYPE = 0xC00002FD/;"	field
KEEPALIVE	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const KEEPALIVE = 8/;"	constant
KEEPCNT	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const KEEPCNT = 16/;"	constant
KEEPIDLE	$ZIGLIB/std/os/linux.zig	/pub const KEEPIDLE = 4/;"	constant
KEEPINTVL	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const KEEPINTVL = 17/;"	constant
KEEPONFORK	$ZIGLIB/std/os/linux.zig	/pub const KEEPONFORK = 19/;"	constant
KERN	$ZIGLIB/std/c/openbsd.zig	/pub const KERN = 1/;"	constant
KERNEL	$ZIGLIB/std/os/linux.zig	/pub const KERNEL = 1 << 1/;"	constant
KERNEL_APC	$ZIGLIB/std/os/windows/win32error.zig	/KERNEL_APC = 738/;"	field
KERNMOUNT	$ZIGLIB/std/os/linux.zig	/pub const KERNMOUNT = (1 << 22)/;"	constant
KEVENT_FLAG_ERROR_EVENTS	$ZIGLIB/std/c/darwin.zig	/^pub const KEVENT_FLAG_ERROR_EVENTS = 0x002/;"	constant
KEVENT_FLAG_IMMEDIATE	$ZIGLIB/std/c/darwin.zig	/^pub const KEVENT_FLAG_IMMEDIATE = 0x001/;"	constant
KEVENT_FLAG_NONE	$ZIGLIB/std/c/darwin.zig	/^pub const KEVENT_FLAG_NONE = 0x000/;"	constant
KEXEC	$ZIGLIB/std/os/linux.zig	/KEXEC = 0x45584543/;"	field
KEYED_HASH	$ZIGLIB/std/crypto/blake3.zig	/^const KEYED_HASH: u8 = 1 << 4/;"	constant
KEYEXPIRED	$ZIGLIB/std/os/linux/errno/sparc.zig	/KEYEXPIRED = 129/;"	field
KEYREJECTED	$ZIGLIB/std/os/linux/errno/sparc.zig	/KEYREJECTED = 131/;"	field
KEYREVOKED	$ZIGLIB/std/os/linux/errno/sparc.zig	/KEYREVOKED = 130/;"	field
KEY_ALL_ACCESS	$ZIGLIB/std/os/windows.zig	/^pub const KEY_ALL_ACCESS = 0xF003F/;"	constant
KEY_CREATE_LINK	$ZIGLIB/std/os/windows.zig	/^pub const KEY_CREATE_LINK = 0x0020/;"	constant
KEY_CREATE_SUB_KEY	$ZIGLIB/std/os/windows.zig	/^pub const KEY_CREATE_SUB_KEY = 0x0004/;"	constant
KEY_DELETED	$ZIGLIB/std/os/windows/win32error.zig	/KEY_DELETED = 1018/;"	field
KEY_ENUMERATE_SUB_KEYS	$ZIGLIB/std/os/windows.zig	/^pub const KEY_ENUMERATE_SUB_KEYS = 0x0008/;"	constant
KEY_EXECUTE	$ZIGLIB/std/os/windows.zig	/^pub const KEY_EXECUTE = 0x20019/;"	constant
KEY_HAS_CHILDREN	$ZIGLIB/std/os/windows/win32error.zig	/KEY_HAS_CHILDREN = 1020/;"	field
KEY_LEN	$ZIGLIB/std/crypto/blake3.zig	/^const KEY_LEN: usize = 32/;"	constant
KEY_NOTIFY	$ZIGLIB/std/os/windows.zig	/^pub const KEY_NOTIFY = 0x0010/;"	constant
KEY_QUERY_VALUE	$ZIGLIB/std/os/windows.zig	/^pub const KEY_QUERY_VALUE = 0x0001/;"	constant
KEY_READ	$ZIGLIB/std/os/windows.zig	/^pub const KEY_READ = 0x20019/;"	constant
KEY_SET_VALUE	$ZIGLIB/std/os/windows.zig	/^pub const KEY_SET_VALUE = 0x0002/;"	constant
KEY_WOW64_32KEY	$ZIGLIB/std/os/windows.zig	/^pub const KEY_WOW64_32KEY = 0x0200/;"	constant
KEY_WOW64_64KEY	$ZIGLIB/std/os/windows.zig	/^pub const KEY_WOW64_64KEY = 0x0100/;"	constant
KEY_WRITE	$ZIGLIB/std/os/windows.zig	/^pub const KEY_WRITE = 0x20006/;"	constant
KEventBasic	$ZIGLIB/std/event/loop.zig	/const KEventBasic = struct {$/;"	struct
KEventData	$ZIGLIB/std/event/loop.zig	/const KEventData = struct {$/;"	struct
KEventError	$ZIGLIB/std/os.zig	/^pub const KEventError = error{$/;"	constant
KEventFd	$ZIGLIB/std/event/loop.zig	/const KEventFd = struct {$/;"	struct
KF_FLAG_ALIAS_ONLY	$ZIGLIB/std/os/windows.zig	/^pub const KF_FLAG_ALIAS_ONLY = -2147483648/;"	constant
KF_FLAG_CREATE	$ZIGLIB/std/os/windows.zig	/^pub const KF_FLAG_CREATE = 32768/;"	constant
KF_FLAG_DEFAULT	$ZIGLIB/std/os/windows.zig	/^pub const KF_FLAG_DEFAULT = 0/;"	constant
KF_FLAG_DEFAULT_PATH	$ZIGLIB/std/os/windows.zig	/^pub const KF_FLAG_DEFAULT_PATH = 1024/;"	constant
KF_FLAG_DONT_UNEXPAND	$ZIGLIB/std/os/windows.zig	/^pub const KF_FLAG_DONT_UNEXPAND = 8192/;"	constant
KF_FLAG_DONT_VERIFY	$ZIGLIB/std/os/windows.zig	/^pub const KF_FLAG_DONT_VERIFY = 16384/;"	constant
KF_FLAG_INIT	$ZIGLIB/std/os/windows.zig	/^pub const KF_FLAG_INIT = 2048/;"	constant
KF_FLAG_NOT_PARENT_RELATIVE	$ZIGLIB/std/os/windows.zig	/^pub const KF_FLAG_NOT_PARENT_RELATIVE = 512/;"	constant
KF_FLAG_NO_ALIAS	$ZIGLIB/std/os/windows.zig	/^pub const KF_FLAG_NO_ALIAS = 4096/;"	constant
KF_FLAG_NO_APPCONTAINER_REDIRECTION	$ZIGLIB/std/os/windows.zig	/^pub const KF_FLAG_NO_APPCONTAINER_REDIRECTION = 65536/;"	constant
KF_FLAG_SIMPLE_IDLIST	$ZIGLIB/std/os/windows.zig	/^pub const KF_FLAG_SIMPLE_IDLIST = 256/;"	constant
KHMER	$ZIGLIB/std/os/windows/lang.zig	/^pub const KHMER = 0x53/;"	constant
KHMER_CAMBODIA	$ZIGLIB/std/os/windows/sublang.zig	/^pub const KHMER_CAMBODIA = 0x01/;"	constant
KICHE	$ZIGLIB/std/os/windows/lang.zig	/^pub const KICHE = 0x86/;"	constant
KICHE_GUATEMALA	$ZIGLIB/std/os/windows/sublang.zig	/^pub const KICHE_GUATEMALA = 0x01/;"	constant
KILL	$ZIGLIB/std/os/linux/seccomp.zig	/pub const KILL = KILL_THREAD/;"	constant
KILLPAGES	$ZIGLIB/std/c/darwin.zig	/pub const KILLPAGES = 0x4/;"	constant
KILLTHR	$ZIGLIB/std/c/haiku.zig	/pub const KILLTHR = 21/;"	constant
KILL_PROCESS	$ZIGLIB/std/os/linux/seccomp.zig	/pub const KILL_PROCESS = 0x80000000/;"	constant
KILL_THREAD	$ZIGLIB/std/os/linux/seccomp.zig	/pub const KILL_THREAD = 0x00000000/;"	constant
KINFO	$ZIGLIB/std/c/freebsd.zig	/pub const KINFO = 22/;"	constant
KINFO_FILE_SIZE	$ZIGLIB/std/c/freebsd.zig	/^pub const KINFO_FILE_SIZE = 1392/;"	constant
KINYARWANDA	$ZIGLIB/std/os/windows/lang.zig	/^pub const KINYARWANDA = 0x87/;"	constant
KINYARWANDA_RWANDA	$ZIGLIB/std/os/windows/sublang.zig	/^pub const KINYARWANDA_RWANDA = 0x01/;"	constant
KM32	$ZIGLIB/std/elf.zig	/KM32 = 210/;"	field
KMX16	$ZIGLIB/std/elf.zig	/KMX16 = 212/;"	field
KMX32	$ZIGLIB/std/elf.zig	/KMX32 = 211/;"	field
KMX8	$ZIGLIB/std/elf.zig	/KMX8 = 213/;"	field
KM_DRIVER_BLOCKED	$ZIGLIB/std/os/windows/win32error.zig	/KM_DRIVER_BLOCKED = 1930/;"	field
KNONVOLATILE_CONTEXT_POINTERS	$ZIGLIB/std/os/windows.zig	/pub const KNONVOLATILE_CONTEXT_POINTERS = extern struct {$/;"	struct
KNOWNFOLDERID	$ZIGLIB/std/os/windows.zig	/^pub const KNOWNFOLDERID = GUID/;"	constant
KOBJECT_UEVENT	$ZIGLIB/std/os/linux.zig	/pub const KOBJECT_UEVENT = 15/;"	constant
KONKANI	$ZIGLIB/std/os/windows/lang.zig	/^pub const KONKANI = 0x57/;"	constant
KONKANI_INDIA	$ZIGLIB/std/os/windows/sublang.zig	/^pub const KONKANI_INDIA = 0x01/;"	constant
KOREAN	$ZIGLIB/std/os/windows/sublang.zig	/^pub const KOREAN = 0x01/;"	constant
KPRIORITY	$ZIGLIB/std/os/windows.zig	/^pub const KPRIORITY = i32/;"	constant
KQUEUES	$ZIGLIB/std/c/freebsd.zig	/KQUEUES = 13/;"	field
KQueueError	$ZIGLIB/std/os.zig	/^pub const KQueueError = error{$/;"	constant
KRYPTOLAN	$ZIGLIB/std/c/freebsd.zig	/pub const KRYPTOLAN = 65/;"	constant
KSYSTEM_TIME	$ZIGLIB/std/os/windows.zig	/^pub const KSYSTEM_TIME = extern struct {$/;"	struct
KUSER_SHARED_DATA	$ZIGLIB/std/os/windows.zig	/^pub const KUSER_SHARED_DATA = extern struct {$/;"	struct
KVARC	$ZIGLIB/std/elf.zig	/KVARC = 214/;"	field
KYRGYZ	$ZIGLIB/std/os/windows/lang.zig	/^pub const KYRGYZ = 0x40/;"	constant
KYRGYZ_KYRGYZSTAN	$ZIGLIB/std/os/windows/sublang.zig	/^pub const KYRGYZ_KYRGYZSTAN = 0x01/;"	constant
KdDebuggerEnabled	$ZIGLIB/std/os/windows.zig	/KdDebuggerEnabled: BOOLEAN/;"	field
KdfError	$ZIGLIB/std/crypto.zig	/pub const KdfError = errors.Error || std.mem.Allocator.Error || std.Thread.SpawnError/;"	constant
KdfOptions	$ZIGLIB/std/crypto/blake3.zig	/pub const KdfOptions = struct {}/;"	struct
Keccak	$ZIGLIB/std/crypto/sha3.zig	/^fn Keccak(comptime bits: usize, comptime delim: u8) type {$/;"	function
Keccak_256	$ZIGLIB/std/crypto/sha3.zig	/^pub const Keccak_256 = Keccak(256, 0x01)/;"	constant
Keccak_512	$ZIGLIB/std/crypto/sha3.zig	/^pub const Keccak_512 = Keccak(512, 0x01)/;"	constant
KernE	$ZIGLIB/std/c/darwin.zig	/^pub const KernE = enum(u32) {$/;"	enum
Kernel	$ZIGLIB/std/target/spirv.zig	/Kernel/;"	field
KernelAttributesINTEL	$ZIGLIB/std/target/spirv.zig	/KernelAttributesINTEL/;"	field
KernelCallbackTable	$ZIGLIB/std/os/windows.zig	/KernelCallbackTable: PVOID/;"	field
KernelNonpaged	$ZIGLIB/std/os/windows.zig	/KernelNonpaged: SIZE_T/;"	field
KernelPaged	$ZIGLIB/std/os/windows.zig	/KernelPaged: SIZE_T/;"	field
KernelTotal	$ZIGLIB/std/os/windows.zig	/KernelTotal: SIZE_T/;"	field
Kevent	$ZIGLIB/std/c/openbsd.zig	/^pub const Kevent = extern struct {$/;"	struct
KeyData	$ZIGLIB/std/os/uefi/protocols/simple_text_input_ex_protocol.zig	/^pub const KeyData = extern struct {$/;"	struct
KeyIterator	$ZIGLIB/std/hash_map.zig	/pub const KeyIterator = FieldIterator(K)/;"	constant
KeyMismatchError	$ZIGLIB/std/crypto/errors.zig	/^pub const KeyMismatchError = error{KeyMismatch}/;"	constant
KeyPair	$ZIGLIB/std/crypto/ecdsa.zig	/pub const KeyPair = struct {$/;"	struct
KeySchedule	$ZIGLIB/std/crypto/aes/soft.zig	/^fn KeySchedule(comptime Aes: type) type {$/;"	function
KeyShiftState	$ZIGLIB/std/os/uefi/protocols/simple_text_input_ex_protocol.zig	/^pub const KeyShiftState = packed struct(u32) {$/;"	struct
KeyState	$ZIGLIB/std/os/uefi/protocols/simple_text_input_ex_protocol.zig	/^pub const KeyState = extern struct {$/;"	struct
KeyToggleState	$ZIGLIB/std/os/uefi/protocols/simple_text_input_ex_protocol.zig	/^pub const KeyToggleState = packed struct(u8) {$/;"	struct
KeyUpdateRequest	$ZIGLIB/std/crypto/tls.zig	/^pub const KeyUpdateRequest = enum(u8) {$/;"	enum
Keyword_alignas	$ZIGLIB/std/c/tokenizer.zig	/Keyword_alignas/;"	field
Keyword_alignof	$ZIGLIB/std/c/tokenizer.zig	/Keyword_alignof/;"	field
Keyword_atomic	$ZIGLIB/std/c/tokenizer.zig	/Keyword_atomic/;"	field
Keyword_auto	$ZIGLIB/std/c/tokenizer.zig	/Keyword_auto/;"	field
Keyword_bool	$ZIGLIB/std/c/tokenizer.zig	/Keyword_bool/;"	field
Keyword_break	$ZIGLIB/std/c/tokenizer.zig	/Keyword_break/;"	field
Keyword_case	$ZIGLIB/std/c/tokenizer.zig	/Keyword_case/;"	field
Keyword_char	$ZIGLIB/std/c/tokenizer.zig	/Keyword_char/;"	field
Keyword_complex	$ZIGLIB/std/c/tokenizer.zig	/Keyword_complex/;"	field
Keyword_const	$ZIGLIB/std/c/tokenizer.zig	/Keyword_const/;"	field
Keyword_continue	$ZIGLIB/std/c/tokenizer.zig	/Keyword_continue/;"	field
Keyword_default	$ZIGLIB/std/c/tokenizer.zig	/Keyword_default/;"	field
Keyword_define	$ZIGLIB/std/c/tokenizer.zig	/Keyword_define/;"	field
Keyword_do	$ZIGLIB/std/c/tokenizer.zig	/Keyword_do/;"	field
Keyword_double	$ZIGLIB/std/c/tokenizer.zig	/Keyword_double/;"	field
Keyword_else	$ZIGLIB/std/c/tokenizer.zig	/Keyword_else/;"	field
Keyword_enum	$ZIGLIB/std/c/tokenizer.zig	/Keyword_enum/;"	field
Keyword_error	$ZIGLIB/std/c/tokenizer.zig	/Keyword_error/;"	field
Keyword_extern	$ZIGLIB/std/c/tokenizer.zig	/Keyword_extern/;"	field
Keyword_float	$ZIGLIB/std/c/tokenizer.zig	/Keyword_float/;"	field
Keyword_for	$ZIGLIB/std/c/tokenizer.zig	/Keyword_for/;"	field
Keyword_generic	$ZIGLIB/std/c/tokenizer.zig	/Keyword_generic/;"	field
Keyword_goto	$ZIGLIB/std/c/tokenizer.zig	/Keyword_goto/;"	field
Keyword_if	$ZIGLIB/std/c/tokenizer.zig	/Keyword_if/;"	field
Keyword_ifdef	$ZIGLIB/std/c/tokenizer.zig	/Keyword_ifdef/;"	field
Keyword_ifndef	$ZIGLIB/std/c/tokenizer.zig	/Keyword_ifndef/;"	field
Keyword_imaginary	$ZIGLIB/std/c/tokenizer.zig	/Keyword_imaginary/;"	field
Keyword_include	$ZIGLIB/std/c/tokenizer.zig	/Keyword_include/;"	field
Keyword_inline	$ZIGLIB/std/c/tokenizer.zig	/Keyword_inline/;"	field
Keyword_int	$ZIGLIB/std/c/tokenizer.zig	/Keyword_int/;"	field
Keyword_long	$ZIGLIB/std/c/tokenizer.zig	/Keyword_long/;"	field
Keyword_noreturn	$ZIGLIB/std/c/tokenizer.zig	/Keyword_noreturn/;"	field
Keyword_pragma	$ZIGLIB/std/c/tokenizer.zig	/Keyword_pragma/;"	field
Keyword_register	$ZIGLIB/std/c/tokenizer.zig	/Keyword_register/;"	field
Keyword_restrict	$ZIGLIB/std/c/tokenizer.zig	/Keyword_restrict/;"	field
Keyword_return	$ZIGLIB/std/c/tokenizer.zig	/Keyword_return/;"	field
Keyword_short	$ZIGLIB/std/c/tokenizer.zig	/Keyword_short/;"	field
Keyword_signed	$ZIGLIB/std/c/tokenizer.zig	/Keyword_signed/;"	field
Keyword_sizeof	$ZIGLIB/std/c/tokenizer.zig	/Keyword_sizeof/;"	field
Keyword_static	$ZIGLIB/std/c/tokenizer.zig	/Keyword_static/;"	field
Keyword_static_assert	$ZIGLIB/std/c/tokenizer.zig	/Keyword_static_assert/;"	field
Keyword_struct	$ZIGLIB/std/c/tokenizer.zig	/Keyword_struct/;"	field
Keyword_switch	$ZIGLIB/std/c/tokenizer.zig	/Keyword_switch/;"	field
Keyword_thread_local	$ZIGLIB/std/c/tokenizer.zig	/Keyword_thread_local/;"	field
Keyword_typedef	$ZIGLIB/std/c/tokenizer.zig	/Keyword_typedef/;"	field
Keyword_union	$ZIGLIB/std/c/tokenizer.zig	/Keyword_union/;"	field
Keyword_unsigned	$ZIGLIB/std/c/tokenizer.zig	/Keyword_unsigned/;"	field
Keyword_void	$ZIGLIB/std/c/tokenizer.zig	/Keyword_void/;"	field
Keyword_volatile	$ZIGLIB/std/c/tokenizer.zig	/Keyword_volatile/;"	field
Keyword_while	$ZIGLIB/std/c/tokenizer.zig	/Keyword_while/;"	field
KillError	$ZIGLIB/std/os.zig	/^pub const KillError = error{PermissionDenied} || UnexpectedError/;"	constant
Kind	$ZIGLIB/std/zig/system/darwin/macos.zig	/const Kind = enum { unknown, start, end, empty }/;"	enum
Koopman	$ZIGLIB/std/hash/crc.zig	/Koopman = 0xeb31d82e/;"	field
KqOsData	$ZIGLIB/std/fs/watch.zig	/const KqOsData = struct {$/;"	struct
L10M	$ZIGLIB/std/elf.zig	/L10M = 180/;"	field
L2HLT	$ZIGLIB/std/os/linux/errno/sparc.zig	/L2HLT = 101/;"	field
L2NSYNC	$ZIGLIB/std/os/linux/errno/sparc.zig	/L2NSYNC = 95/;"	field
L2TP	$ZIGLIB/std/c/netbsd.zig	/pub const L2TP = 115/;"	constant
L3HLT	$ZIGLIB/std/os/linux/errno/sparc.zig	/L3HLT = 96/;"	field
L3RST	$ZIGLIB/std/os/linux/errno/sparc.zig	/L3RST = 97/;"	field
LABEL	$ZIGLIB/std/coff.zig	/LABEL = 6/;"	field
LABELH	$ZIGLIB/std/c/darwin.zig	/LABELH = 5/;"	field
LABEL_TOO_LONG	$ZIGLIB/std/os/windows/win32error.zig	/LABEL_TOO_LONG = 154/;"	field
LANAI	$ZIGLIB/std/elf.zig	/LANAI = 244/;"	field
LANGID	$ZIGLIB/std/os/windows.zig	/^pub const LANGID = c_ushort/;"	constant
LAO_LAO	$ZIGLIB/std/os/windows/sublang.zig	/^pub const LAO_LAO = 0x01/;"	constant
LARGEFILE	$ZIGLIB/std/os/linux/x86_64.zig	/pub const LARGEFILE = 0/;"	constant
LARGEST	$ZIGLIB/std/coff.zig	/LARGEST = 6/;"	field
LARGE_ADDRESS_AWARE	$ZIGLIB/std/coff.zig	/LARGE_ADDRESS_AWARE: u1 = 0/;"	field
LARGE_INTEGER	$ZIGLIB/std/os/windows.zig	/^pub const LARGE_INTEGER = i64/;"	constant
LARP	$ZIGLIB/std/c/freebsd.zig	/pub const LARP = 91/;"	constant
LAST_ADMIN	$ZIGLIB/std/os/windows/win32error.zig	/LAST_ADMIN = 1322/;"	field
LAST_CAP	$ZIGLIB/std/os/linux.zig	/pub const LAST_CAP = AUDIT_READ/;"	constant
LATTICEMICO32	$ZIGLIB/std/elf.zig	/LATTICEMICO32 = 138/;"	field
LATVIAN	$ZIGLIB/std/os/windows/lang.zig	/^pub const LATVIAN = 0x26/;"	constant
LATVIAN_LATVIA	$ZIGLIB/std/os/windows/sublang.zig	/^pub const LATVIAN_LATVIA = 0x01/;"	constant
LAYERED_PROTOCOL	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const LAYERED_PROTOCOL = 0/;"	constant
LAZY	$ZIGLIB/std/c/solaris.zig	/pub const LAZY = 0x00001/;"	constant
LAZYTIME	$ZIGLIB/std/os/linux.zig	/pub const LAZYTIME = (1 << 25)/;"	constant
LAZY_LOAD_DYLIB	$ZIGLIB/std/macho.zig	/LAZY_LOAD_DYLIB = 0x20/;"	field
LB_WITHOUT_TABSTOPS	$ZIGLIB/std/os/windows/win32error.zig	/LB_WITHOUT_TABSTOPS = 1434/;"	field
LBrace	$ZIGLIB/std/c/tokenizer.zig	/LBrace/;"	field
LBracket	$ZIGLIB/std/c/tokenizer.zig	/LBracket/;"	field
LC_REQ_DYLD	$ZIGLIB/std/macho.zig	/^pub const LC_REQ_DYLD = 0x80000000/;"	constant
LDDATA	$ZIGLIB/std/c/solaris.zig	/pub const LDDATA = 2016/;"	constant
LDELF	$ZIGLIB/std/c/solaris.zig	/pub const LDELF = 2004/;"	constant
LDNAME	$ZIGLIB/std/c/solaris.zig	/pub const LDNAME = 2006/;"	constant
LDR_DATA_TABLE_ENTRY	$ZIGLIB/std/os/windows.zig	/^pub const LDR_DATA_TABLE_ENTRY = extern struct {$/;"	struct
LDSHDR	$ZIGLIB/std/c/solaris.zig	/pub const LDSHDR = 2005/;"	constant
LEAF1	$ZIGLIB/std/c/freebsd.zig	/pub const LEAF1 = 25/;"	constant
LEAF2	$ZIGLIB/std/c/freebsd.zig	/pub const LEAF2 = 26/;"	constant
LEASE	$ZIGLIB/std/os/linux.zig	/pub const LEASE = 28/;"	constant
LEAVE_ANYCAST	$ZIGLIB/std/os/linux.zig	/pub const LEAVE_ANYCAST = 28/;"	constant
LF_HaveColumns	$ZIGLIB/std/pdb.zig	/LF_HaveColumns: bool/;"	field
LIBACC	$ZIGLIB/std/os/linux/errno/sparc.zig	/LIBACC = 114/;"	field
LIBBAD	$ZIGLIB/std/os/linux/errno/sparc.zig	/LIBBAD = 112/;"	field
LIBEXEC	$ZIGLIB/std/os/linux/errno/sparc.zig	/LIBEXEC = 110/;"	field
LIBMAX	$ZIGLIB/std/os/linux/errno/sparc.zig	/LIBMAX = 123/;"	field
LIBRT	$ZIGLIB/std/c/freebsd.zig	/pub const LIBRT = 33/;"	constant
LIBSCN	$ZIGLIB/std/os/linux/errno/sparc.zig	/LIBSCN = 124/;"	field
LICENSE_QUOTA_EXCEEDED	$ZIGLIB/std/os/windows/win32error.zig	/LICENSE_QUOTA_EXCEEDED = 1395/;"	field
LICENSE_VIOLATION	$ZIGLIB/std/os/windows/ntstatus.zig	/LICENSE_VIOLATION = 0xC000026A/;"	field
LINE_NUMS_STRIPPED	$ZIGLIB/std/coff.zig	/LINE_NUMS_STRIPPED: u1 = 0/;"	field
LINGER	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const LINGER = 128/;"	constant
LINGER2	$ZIGLIB/std/os/linux.zig	/pub const LINGER2 = 8/;"	constant
LINK	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const LINK = 33/;"	constant
LINKAT	$ZIGLIB/std/os/linux.zig	/LINKAT/;"	field
LINKER_OPTIMIZATION_HINT	$ZIGLIB/std/macho.zig	/LINKER_OPTIMIZATION_HINT = 0x2E/;"	field
LINKER_OPTION	$ZIGLIB/std/macho.zig	/LINKER_OPTION = 0x2D/;"	field
LINKINFO	$ZIGLIB/std/os/linux.zig	/LINKINFO/;"	field
LINKMODE	$ZIGLIB/std/os/linux.zig	/LINKMODE/;"	field
LINK_FAILED	$ZIGLIB/std/os/windows/ntstatus.zig	/LINK_FAILED = 0xC000013E/;"	field
LINK_NETNSID	$ZIGLIB/std/os/linux.zig	/LINK_NETNSID/;"	field
LINK_TIMEOUT	$ZIGLIB/std/os/windows/ntstatus.zig	/LINK_TIMEOUT = 0xC000013F/;"	field
LINUX_IMMUTABLE	$ZIGLIB/std/os/linux.zig	/pub const LINUX_IMMUTABLE = 9/;"	constant
LINUX_REBOOT	$ZIGLIB/std/os/linux.zig	/^pub const LINUX_REBOOT = struct {$/;"	struct
LISTBOX_ID_NOT_FOUND	$ZIGLIB/std/os/windows/win32error.zig	/LISTBOX_ID_NOT_FOUND = 1416/;"	field
LISTENINCQLEN	$ZIGLIB/std/c/freebsd.zig	/pub const LISTENINCQLEN = 0x1013/;"	constant
LISTENQLEN	$ZIGLIB/std/c/freebsd.zig	/pub const LISTENQLEN = 0x1012/;"	constant
LISTENQLIMIT	$ZIGLIB/std/c/freebsd.zig	/pub const LISTENQLIMIT = 0x1011/;"	constant
LIST_ENTRY	$ZIGLIB/std/os/windows.zig	/^pub const LIST_ENTRY = extern struct {$/;"	struct
LITHUANIAN	$ZIGLIB/std/os/windows/sublang.zig	/^pub const LITHUANIAN = 0x01/;"	constant
LITTLEENDIAN	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const LITTLEENDIAN = 1/;"	constant
LL_SUFFIX	$ZIGLIB/std/zig/c_translation.zig	/pub fn LL_SUFFIX(comptime n: comptime_int) @TypeOf(promoteIntLiteral(c_longlong, n, .decimal)) {$/;"	function
LM_BAUD_115200	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const LM_BAUD_115200 = 115200/;"	constant
LM_BAUD_1152K	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const LM_BAUD_1152K = 1152000/;"	constant
LM_BAUD_1200	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const LM_BAUD_1200 = 1200/;"	constant
LM_BAUD_16M	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const LM_BAUD_16M = 16000000/;"	constant
LM_BAUD_19200	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const LM_BAUD_19200 = 19200/;"	constant
LM_BAUD_2400	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const LM_BAUD_2400 = 2400/;"	constant
LM_BAUD_38400	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const LM_BAUD_38400 = 38400/;"	constant
LM_BAUD_4M	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const LM_BAUD_4M = 4000000/;"	constant
LM_BAUD_57600	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const LM_BAUD_57600 = 57600/;"	constant
LM_BAUD_576K	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const LM_BAUD_576K = 576000/;"	constant
LM_BAUD_9600	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const LM_BAUD_9600 = 9600/;"	constant
LM_CROSS_ENCRYPTION_REQUIRED	$ZIGLIB/std/os/windows/win32error.zig	/LM_CROSS_ENCRYPTION_REQUIRED = 1390/;"	field
LM_HB1_Computer	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const LM_HB1_Computer = 4/;"	constant
LM_HB1_Fax	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const LM_HB1_Fax = 32/;"	constant
LM_HB1_LANAccess	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const LM_HB1_LANAccess = 64/;"	constant
LM_HB1_Modem	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const LM_HB1_Modem = 16/;"	constant
LM_HB1_PDA_Palmtop	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const LM_HB1_PDA_Palmtop = 2/;"	constant
LM_HB1_PnP	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const LM_HB1_PnP = 1/;"	constant
LM_HB1_Printer	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const LM_HB1_Printer = 8/;"	constant
LM_HB2_FileServer	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const LM_HB2_FileServer = 2/;"	constant
LM_HB2_Telephony	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const LM_HB2_Telephony = 1/;"	constant
LM_HB_Extension	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const LM_HB_Extension = 128/;"	constant
LNCT	$ZIGLIB/std/dwarf.zig	/^pub const LNCT = struct {$/;"	struct
LNEXT	$ZIGLIB/std/os/linux.zig	/pub const LNEXT = 15/;"	constant
LNK_COMDAT	$ZIGLIB/std/coff.zig	/LNK_COMDAT: u1 = 0/;"	field
LNK_INFO	$ZIGLIB/std/coff.zig	/LNK_INFO: u1 = 0/;"	field
LNK_NRELOC_OVFL	$ZIGLIB/std/coff.zig	/LNK_NRELOC_OVFL: u1 = 0/;"	field
LNK_OTHER	$ZIGLIB/std/coff.zig	/LNK_OTHER: u1 = 0/;"	field
LNK_REMOVE	$ZIGLIB/std/coff.zig	/LNK_REMOVE: u1 = 0/;"	field
LNRNG	$ZIGLIB/std/os/linux/errno/sparc.zig	/LNRNG = 98/;"	field
LOADFVMLIB	$ZIGLIB/std/macho.zig	/LOADFVMLIB = 0x6/;"	field
LOAD_CONFIG	$ZIGLIB/std/coff.zig	/LOAD_CONFIG = 10/;"	field
LOAD_DYLIB	$ZIGLIB/std/macho.zig	/LOAD_DYLIB = 0xc/;"	field
LOAD_DYLINKER	$ZIGLIB/std/macho.zig	/LOAD_DYLINKER = 0xe/;"	field
LOAD_UPWARD_DYLIB	$ZIGLIB/std/macho.zig	/LOAD_UPWARD_DYLIB = (0x23 | LC_REQ_DYLD)/;"	field
LOAD_WEAK_DYLIB	$ZIGLIB/std/macho.zig	/LOAD_WEAK_DYLIB = (0x18 | LC_REQ_DYLD)/;"	field
LOCAL	$ZIGLIB/std/os/linux.zig	/pub const LOCAL = 1/;"	constant
LOCAL_DISCONNECT	$ZIGLIB/std/os/windows/ntstatus.zig	/LOCAL_DISCONNECT = 0xC000013B/;"	field
LOCAL_SYMS_STRIPPED	$ZIGLIB/std/coff.zig	/LOCAL_SYMS_STRIPPED: u1 = 0/;"	field
LOCAL_USER_SESSION_KEY	$ZIGLIB/std/os/windows/win32error.zig	/LOCAL_USER_SESSION_KEY = 1303/;"	field
LOCK	$ZIGLIB/std/os/wasi.zig	/^pub const LOCK = struct {$/;"	struct
LOCKED	$ZIGLIB/std/os/windows/win32error.zig	/LOCKED = 212/;"	field
LOCKS	$ZIGLIB/std/os/linux/sparc64.zig	/LOCKS/;"	field
LOCKUNMAPPED	$ZIGLIB/std/c/solaris.zig	/LOCKUNMAPPED = 72/;"	field
LOCK_FAILED	$ZIGLIB/std/os/windows/win32error.zig	/LOCK_FAILED = 167/;"	field
LOCK_FILTER	$ZIGLIB/std/os/linux.zig	/pub const LOCK_FILTER = 44/;"	constant
LOCK_NOT_GRANTED	$ZIGLIB/std/os/windows/ntstatus.zig	/LOCK_NOT_GRANTED = 0xC0000055/;"	field
LOCK_OWNED	$ZIGLIB/std/c/darwin.zig	/LOCK_OWNED = 40/;"	field
LOCK_OWNED_SELF	$ZIGLIB/std/c/darwin.zig	/LOCK_OWNED_SELF = 41/;"	field
LOCK_PI	$ZIGLIB/std/os/linux.zig	/pub const LOCK_PI = 6/;"	constant
LOCK_SET_DESTROYED	$ZIGLIB/std/c/darwin.zig	/LOCK_SET_DESTROYED = 38/;"	field
LOCK_UNSTABLE	$ZIGLIB/std/c/darwin.zig	/LOCK_UNSTABLE = 39/;"	field
LOCK_VIOLATION	$ZIGLIB/std/os/windows/win32error.zig	/LOCK_VIOLATION = 33/;"	field
LOG2PHYS	$ZIGLIB/std/c/darwin.zig	/pub const LOG2PHYS = 49/;"	constant
LOG2PHYS_EXT	$ZIGLIB/std/c/darwin.zig	/pub const LOG2PHYS_EXT = 65/;"	constant
LOG2_BITS_PER_BYTE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const LOG2_BITS_PER_BYTE = 3/;"	constant
LOGIN_TIME_RESTRICTION	$ZIGLIB/std/os/windows/win32error.zig	/LOGIN_TIME_RESTRICTION = 1239/;"	field
LOGIN_WKSTA_RESTRICTION	$ZIGLIB/std/os/windows/win32error.zig	/LOGIN_WKSTA_RESTRICTION = 1240/;"	field
LOGON_FAILURE	$ZIGLIB/std/os/windows/win32error.zig	/LOGON_FAILURE = 1326/;"	field
LOGON_NOT_GRANTED	$ZIGLIB/std/os/windows/win32error.zig	/LOGON_NOT_GRANTED = 1380/;"	field
LOGON_SERVER_CONFLICT	$ZIGLIB/std/os/windows/win32error.zig	/LOGON_SERVER_CONFLICT = 568/;"	field
LOGON_SESSION_COLLISION	$ZIGLIB/std/os/windows/win32error.zig	/LOGON_SESSION_COLLISION = 1366/;"	field
LOGON_SESSION_EXISTS	$ZIGLIB/std/os/windows/win32error.zig	/LOGON_SESSION_EXISTS = 1363/;"	field
LOGON_TYPE_NOT_GRANTED	$ZIGLIB/std/os/windows/win32error.zig	/LOGON_TYPE_NOT_GRANTED = 1385/;"	field
LOGSIGEXIT	$ZIGLIB/std/c/dragonfly.zig	/pub const LOGSIGEXIT = 34/;"	constant
LOG_APPENDED_FLUSH_FAILED	$ZIGLIB/std/os/windows/ntstatus.zig	/LOG_APPENDED_FLUSH_FAILED = 0xC01A002F/;"	field
LOG_ARCHIVE_IN_PROGRESS	$ZIGLIB/std/os/windows/ntstatus.zig	/LOG_ARCHIVE_IN_PROGRESS = 0xC01A0021/;"	field
LOG_ARCHIVE_NOT_IN_PROGRESS	$ZIGLIB/std/os/windows/ntstatus.zig	/LOG_ARCHIVE_NOT_IN_PROGRESS = 0xC01A0020/;"	field
LOG_BLOCKS_EXHAUSTED	$ZIGLIB/std/os/windows/ntstatus.zig	/LOG_BLOCKS_EXHAUSTED = 0xC01A0006/;"	field
LOG_BLOCK_INCOMPLETE	$ZIGLIB/std/os/windows/ntstatus.zig	/LOG_BLOCK_INCOMPLETE = 0xC01A0004/;"	field
LOG_BLOCK_INVALID	$ZIGLIB/std/os/windows/ntstatus.zig	/LOG_BLOCK_INVALID = 0xC01A000A/;"	field
LOG_BLOCK_VERSION	$ZIGLIB/std/os/windows/ntstatus.zig	/LOG_BLOCK_VERSION = 0xC01A0009/;"	field
LOG_CANT_DELETE	$ZIGLIB/std/os/windows/ntstatus.zig	/LOG_CANT_DELETE = 0xC01A0011/;"	field
LOG_CLIENT_ALREADY_REGISTERED	$ZIGLIB/std/os/windows/ntstatus.zig	/LOG_CLIENT_ALREADY_REGISTERED = 0xC01A0024/;"	field
LOG_CLIENT_NOT_REGISTERED	$ZIGLIB/std/os/windows/ntstatus.zig	/LOG_CLIENT_NOT_REGISTERED = 0xC01A0025/;"	field
LOG_CONTAINER_LIMIT_EXCEEDED	$ZIGLIB/std/os/windows/ntstatus.zig	/LOG_CONTAINER_LIMIT_EXCEEDED = 0xC01A0012/;"	field
LOG_CONTAINER_OPEN_FAILED	$ZIGLIB/std/os/windows/ntstatus.zig	/LOG_CONTAINER_OPEN_FAILED = 0xC01A0029/;"	field
LOG_CONTAINER_READ_FAILED	$ZIGLIB/std/os/windows/ntstatus.zig	/LOG_CONTAINER_READ_FAILED = 0xC01A0027/;"	field
LOG_CONTAINER_STATE_INVALID	$ZIGLIB/std/os/windows/ntstatus.zig	/LOG_CONTAINER_STATE_INVALID = 0xC01A002A/;"	field
LOG_CONTAINER_WRITE_FAILED	$ZIGLIB/std/os/windows/ntstatus.zig	/LOG_CONTAINER_WRITE_FAILED = 0xC01A0028/;"	field
LOG_CORRUPTION_DETECTED	$ZIGLIB/std/os/windows/ntstatus.zig	/LOG_CORRUPTION_DETECTED = 0xC0190030/;"	field
LOG_DEDICATED	$ZIGLIB/std/os/windows/ntstatus.zig	/LOG_DEDICATED = 0xC01A001F/;"	field
LOG_EPHEMERAL	$ZIGLIB/std/os/windows/ntstatus.zig	/LOG_EPHEMERAL = 0xC01A0022/;"	field
LOG_FILE_FULL	$ZIGLIB/std/os/windows/win32error.zig	/LOG_FILE_FULL = 1502/;"	field
LOG_FULL	$ZIGLIB/std/os/windows/ntstatus.zig	/LOG_FULL = 0xC01A001D/;"	field
LOG_FULL_HANDLER_IN_PROGRESS	$ZIGLIB/std/os/windows/ntstatus.zig	/LOG_FULL_HANDLER_IN_PROGRESS = 0xC01A0026/;"	field
LOG_GROWTH_FAILED	$ZIGLIB/std/os/windows/ntstatus.zig	/LOG_GROWTH_FAILED = 0xC0190019/;"	field
LOG_HARD_ERROR	$ZIGLIB/std/os/windows/win32error.zig	/LOG_HARD_ERROR = 718/;"	field
LOG_INCONSISTENT_SECURITY	$ZIGLIB/std/os/windows/ntstatus.zig	/LOG_INCONSISTENT_SECURITY = 0xC01A002E/;"	field
LOG_INVALID_RANGE	$ZIGLIB/std/os/windows/ntstatus.zig	/LOG_INVALID_RANGE = 0xC01A0005/;"	field
LOG_METADATA_CORRUPT	$ZIGLIB/std/os/windows/ntstatus.zig	/LOG_METADATA_CORRUPT = 0xC01A000D/;"	field
LOG_METADATA_FLUSH_FAILED	$ZIGLIB/std/os/windows/ntstatus.zig	/LOG_METADATA_FLUSH_FAILED = 0xC01A002D/;"	field
LOG_METADATA_INCONSISTENT	$ZIGLIB/std/os/windows/ntstatus.zig	/LOG_METADATA_INCONSISTENT = 0xC01A000F/;"	field
LOG_METADATA_INVALID	$ZIGLIB/std/os/windows/ntstatus.zig	/LOG_METADATA_INVALID = 0xC01A000E/;"	field
LOG_MULTIPLEXED	$ZIGLIB/std/os/windows/ntstatus.zig	/LOG_MULTIPLEXED = 0xC01A001E/;"	field
LOG_NOT_ENOUGH_CONTAINERS	$ZIGLIB/std/os/windows/ntstatus.zig	/LOG_NOT_ENOUGH_CONTAINERS = 0xC01A0023/;"	field
LOG_NO_RESTART	$ZIGLIB/std/os/windows/ntstatus.zig	/LOG_NO_RESTART = 0x401A000C/;"	field
LOG_PINNED	$ZIGLIB/std/os/windows/ntstatus.zig	/LOG_PINNED = 0xC01A002C/;"	field
LOG_PINNED_ARCHIVE_TAIL	$ZIGLIB/std/os/windows/ntstatus.zig	/LOG_PINNED_ARCHIVE_TAIL = 0xC01A0018/;"	field
LOG_PINNED_RESERVATION	$ZIGLIB/std/os/windows/ntstatus.zig	/LOG_PINNED_RESERVATION = 0xC01A0030/;"	field
LOG_POLICY_ALREADY_INSTALLED	$ZIGLIB/std/os/windows/ntstatus.zig	/LOG_POLICY_ALREADY_INSTALLED = 0xC01A0014/;"	field
LOG_POLICY_CONFLICT	$ZIGLIB/std/os/windows/ntstatus.zig	/LOG_POLICY_CONFLICT = 0xC01A0017/;"	field
LOG_POLICY_INVALID	$ZIGLIB/std/os/windows/ntstatus.zig	/LOG_POLICY_INVALID = 0xC01A0016/;"	field
LOG_POLICY_NOT_INSTALLED	$ZIGLIB/std/os/windows/ntstatus.zig	/LOG_POLICY_NOT_INSTALLED = 0xC01A0015/;"	field
LOG_READ_CONTEXT_INVALID	$ZIGLIB/std/os/windows/ntstatus.zig	/LOG_READ_CONTEXT_INVALID = 0xC01A0007/;"	field
LOG_READ_MODE_INVALID	$ZIGLIB/std/os/windows/ntstatus.zig	/LOG_READ_MODE_INVALID = 0xC01A000B/;"	field
LOG_RECORDS_RESERVED_INVALID	$ZIGLIB/std/os/windows/ntstatus.zig	/LOG_RECORDS_RESERVED_INVALID = 0xC01A001A/;"	field
LOG_RECORD_NONEXISTENT	$ZIGLIB/std/os/windows/ntstatus.zig	/LOG_RECORD_NONEXISTENT = 0xC01A0019/;"	field
LOG_RESERVATION_INVALID	$ZIGLIB/std/os/windows/ntstatus.zig	/LOG_RESERVATION_INVALID = 0xC01A0010/;"	field
LOG_RESIZE_INVALID_SIZE	$ZIGLIB/std/os/windows/ntstatus.zig	/LOG_RESIZE_INVALID_SIZE = 0xC019000B/;"	field
LOG_RESTART_INVALID	$ZIGLIB/std/os/windows/ntstatus.zig	/LOG_RESTART_INVALID = 0xC01A0008/;"	field
LOG_SECTOR_INVALID	$ZIGLIB/std/os/windows/ntstatus.zig	/LOG_SECTOR_INVALID = 0xC01A0001/;"	field
LOG_SECTOR_PARITY_INVALID	$ZIGLIB/std/os/windows/ntstatus.zig	/LOG_SECTOR_PARITY_INVALID = 0xC01A0002/;"	field
LOG_SECTOR_REMAPPED	$ZIGLIB/std/os/windows/ntstatus.zig	/LOG_SECTOR_REMAPPED = 0xC01A0003/;"	field
LOG_SPACE_RESERVED_INVALID	$ZIGLIB/std/os/windows/ntstatus.zig	/LOG_SPACE_RESERVED_INVALID = 0xC01A001B/;"	field
LOG_START_OF_LOG	$ZIGLIB/std/os/windows/ntstatus.zig	/LOG_START_OF_LOG = 0xC01A0013/;"	field
LOG_STATE_INVALID	$ZIGLIB/std/os/windows/ntstatus.zig	/LOG_STATE_INVALID = 0xC01A002B/;"	field
LOG_TAIL_INVALID	$ZIGLIB/std/os/windows/ntstatus.zig	/LOG_TAIL_INVALID = 0xC01A001C/;"	field
LONG	$ZIGLIB/std/os/windows.zig	/^pub const LONG = i32/;"	constant
LONGJUMP	$ZIGLIB/std/os/windows/win32error.zig	/LONGJUMP = 682/;"	field
LONGLONG	$ZIGLIB/std/os/windows.zig	/^pub const LONGLONG = i64/;"	constant
LONG_PTR	$ZIGLIB/std/os/windows.zig	/^pub const LONG_PTR = isize/;"	constant
LOOKUP_SYMLINK_FOLLOW	$ZIGLIB/std/os/wasi.zig	/^pub const LOOKUP_SYMLINK_FOLLOW: lookupflags_t = 0x00000001/;"	constant
LOOP	$ZIGLIB/std/os/wasi.zig	/LOOP = 32/;"	field
LOPROC	$ZIGLIB/std/elf.zig	/pub const LOPROC = 0xff00/;"	constant
LOST	$ZIGLIB/std/os/linux.zig	/pub const LOST = 29/;"	constant
LOST_WRITEBEHIND_DATA	$ZIGLIB/std/os/windows/win32error.zig	/LOST_WRITEBEHIND_DATA = 596/;"	field
LOST_WRITEBEHIND_DATA_LOCAL_DISK_ERROR	$ZIGLIB/std/os/windows/win32error.zig	/LOST_WRITEBEHIND_DATA_LOCAL_DISK_ERROR = 790/;"	field
LOST_WRITEBEHIND_DATA_NETWORK_DISCONNECTED	$ZIGLIB/std/os/windows/win32error.zig	/LOST_WRITEBEHIND_DATA_NETWORK_DISCONNECTED = 788/;"	field
LOST_WRITEBEHIND_DATA_NETWORK_SERVER_ERROR	$ZIGLIB/std/os/windows/win32error.zig	/LOST_WRITEBEHIND_DATA_NETWORK_SERVER_ERROR = 789/;"	field
LOWER_SORBIAN	$ZIGLIB/std/os/windows/lang.zig	/^pub const LOWER_SORBIAN = 0x2e/;"	constant
LOWER_SORBIAN_GERMANY	$ZIGLIB/std/os/windows/sublang.zig	/^pub const LOWER_SORBIAN_GERMANY = 0x02/;"	constant
LPAE	$ZIGLIB/std/os/linux/arm-eabi.zig	/pub const LPAE = 1 << 20/;"	constant
LPAGESZ	$ZIGLIB/std/c/solaris.zig	/pub const LPAGESZ = 2007/;"	constant
LPARAM	$ZIGLIB/std/os/windows.zig	/^pub const LPARAM = LONG_PTR/;"	constant
LPCONDITIONPROC	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const LPCONDITIONPROC = *const fn ($/;"	constant
LPCSTR	$ZIGLIB/std/os/windows.zig	/^pub const LPCSTR = [*:0]const CHAR/;"	constant
LPCVOID	$ZIGLIB/std/os/windows.zig	/^pub const LPCVOID = *const anyopaque/;"	constant
LPCWSTR	$ZIGLIB/std/os/windows.zig	/^pub const LPCWSTR = [*:0]const WCHAR/;"	constant
LPC_INVALID_CONNECTION_USAGE	$ZIGLIB/std/os/windows/ntstatus.zig	/LPC_INVALID_CONNECTION_USAGE = 0xC0000706/;"	field
LPC_RECEIVE_BUFFER_EXPECTED	$ZIGLIB/std/os/windows/ntstatus.zig	/LPC_RECEIVE_BUFFER_EXPECTED = 0xC0000705/;"	field
LPC_REPLY_LOST	$ZIGLIB/std/os/windows/ntstatus.zig	/LPC_REPLY_LOST = 0xC0000253/;"	field
LPC_REQUESTS_NOT_ALLOWED	$ZIGLIB/std/os/windows/ntstatus.zig	/LPC_REQUESTS_NOT_ALLOWED = 0xC0000707/;"	field
LPFN_ACCEPTEX	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const LPFN_ACCEPTEX = *const fn ($/;"	constant
LPFN_GETACCEPTEXSOCKADDRS	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const LPFN_GETACCEPTEXSOCKADDRS = *const fn ($/;"	constant
LPFN_TRANSMITFILE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const LPFN_TRANSMITFILE = *const fn ($/;"	constant
LPFN_WSARECVMSG	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const LPFN_WSARECVMSG = *const fn ($/;"	constant
LPFN_WSASENDMSG	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const LPFN_WSASENDMSG = *const fn ($/;"	constant
LPLOOKUPSERVICE_COMPLETION_ROUTINE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const LPLOOKUPSERVICE_COMPLETION_ROUTINE = *const fn ($/;"	constant
LPMMTIME	$ZIGLIB/std/os/windows/winmm.zig	/^pub const LPMMTIME = *MMTIME/;"	constant
LPOVERLAPPED_COMPLETION_ROUTINE	$ZIGLIB/std/os/windows.zig	/^pub const LPOVERLAPPED_COMPLETION_ROUTINE = ?*const fn (DWORD, DWORD, *OVERLAPPED) callconv(.C) void/;"	constant
LPSERVICE_CALLBACK_PROC	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const LPSERVICE_CALLBACK_PROC = *const fn ($/;"	constant
LPSTR	$ZIGLIB/std/os/windows.zig	/^pub const LPSTR = [*:0]CHAR/;"	constant
LPTHREAD_START_ROUTINE	$ZIGLIB/std/os/windows.zig	/^pub const LPTHREAD_START_ROUTINE = PTHREAD_START_ROUTINE/;"	constant
LPTIMECAPS	$ZIGLIB/std/os/windows/winmm.zig	/^pub const LPTIMECAPS = *TIMECAPS/;"	constant
LPVOID	$ZIGLIB/std/os/windows.zig	/^pub const LPVOID = *anyopaque/;"	constant
LPWSAOVERLAPPED_COMPLETION_ROUTINE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const LPWSAOVERLAPPED_COMPLETION_ROUTINE = *const fn ($/;"	constant
LPWSTR	$ZIGLIB/std/os/windows.zig	/^pub const LPWSTR = [*:0]WCHAR/;"	constant
LParen	$ZIGLIB/std/c/tokenizer.zig	/LParen/;"	field
LRESULT	$ZIGLIB/std/os/windows.zig	/^pub const LRESULT = LONG_PTR/;"	constant
LSP_CRYPTO_COMPRESS	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const LSP_CRYPTO_COMPRESS = 64/;"	constant
LSP_FIREWALL	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const LSP_FIREWALL = 8/;"	constant
LSP_INBOUND_MODIFY	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const LSP_INBOUND_MODIFY = 16/;"	constant
LSP_INSPECTOR	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const LSP_INSPECTOR = 1/;"	constant
LSP_LOCAL_CACHE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const LSP_LOCAL_CACHE = 128/;"	constant
LSP_OUTBOUND_MODIFY	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const LSP_OUTBOUND_MODIFY = 32/;"	constant
LSP_PROXY	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const LSP_PROXY = 4/;"	constant
LSP_REDIRECTOR	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const LSP_REDIRECTOR = 2/;"	constant
LSP_SYSTEM	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const LSP_SYSTEM = 2147483648/;"	constant
LSTATUS	$ZIGLIB/std/os/windows.zig	/^pub const LSTATUS = LONG/;"	constant
LUIDS_EXHAUSTED	$ZIGLIB/std/os/windows/win32error.zig	/LUIDS_EXHAUSTED = 1334/;"	field
LUP_ADDRCONFIG	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const LUP_ADDRCONFIG = 1048576/;"	constant
LUP_API_ANSI	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const LUP_API_ANSI = 16777216/;"	constant
LUP_CONTAINERS	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const LUP_CONTAINERS = 2/;"	constant
LUP_DEEP	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const LUP_DEEP = 1/;"	constant
LUP_DISABLE_IDN_ENCODING	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const LUP_DISABLE_IDN_ENCODING = 8388608/;"	constant
LUP_DNS_ONLY	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const LUP_DNS_ONLY = 131072/;"	constant
LUP_DUAL_ADDR	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const LUP_DUAL_ADDR = 2097152/;"	constant
LUP_FILESERVER	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const LUP_FILESERVER = 4194304/;"	constant
LUP_FLUSHCACHE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const LUP_FLUSHCACHE = 4096/;"	constant
LUP_FLUSHPREVIOUS	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const LUP_FLUSHPREVIOUS = 8192/;"	constant
LUP_NEAREST	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const LUP_NEAREST = 8/;"	constant
LUP_NOCONTAINERS	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const LUP_NOCONTAINERS = 4/;"	constant
LUP_NON_AUTHORITATIVE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const LUP_NON_AUTHORITATIVE = 16384/;"	constant
LUP_RESOLUTION_HANDLE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const LUP_RESOLUTION_HANDLE = 2147483648/;"	constant
LUP_RES_SERVICE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const LUP_RES_SERVICE = 32768/;"	constant
LUP_RETURN_ADDR	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const LUP_RETURN_ADDR = 256/;"	constant
LUP_RETURN_ALIASES	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const LUP_RETURN_ALIASES = 1024/;"	constant
LUP_RETURN_ALL	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const LUP_RETURN_ALL = 4080/;"	constant
LUP_RETURN_BLOB	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const LUP_RETURN_BLOB = 512/;"	constant
LUP_RETURN_COMMENT	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const LUP_RETURN_COMMENT = 128/;"	constant
LUP_RETURN_NAME	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const LUP_RETURN_NAME = 16/;"	constant
LUP_RETURN_PREFERRED_NAMES	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const LUP_RETURN_PREFERRED_NAMES = 65536/;"	constant
LUP_RETURN_QUERY_STRING	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const LUP_RETURN_QUERY_STRING = 2048/;"	constant
LUP_RETURN_TYPE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const LUP_RETURN_TYPE = 32/;"	constant
LUP_RETURN_VERSION	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const LUP_RETURN_VERSION = 64/;"	constant
LUP_SECURE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const LUP_SECURE = 32768/;"	constant
LUXEMBOURGISH	$ZIGLIB/std/os/windows/lang.zig	/^pub const LUXEMBOURGISH = 0x6e/;"	constant
LUXEMBOURGISH_LUXEMBOURG	$ZIGLIB/std/os/windows/sublang.zig	/^pub const LUXEMBOURGISH_LUXEMBOURG = 0x01/;"	constant
LVM_APPROXIMATEVIEWRECT	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_APPROXIMATEVIEWRECT = 0x1040/;"	constant
LVM_ARRANGE	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_ARRANGE = 0x1016/;"	constant
LVM_CANCELEDITLABEL	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_CANCELEDITLABEL = 0x10B3/;"	constant
LVM_CREATEDRAGIMAGE	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_CREATEDRAGIMAGE = 0x1021/;"	constant
LVM_DELETEALLITEMS	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_DELETEALLITEMS = 0x1009/;"	constant
LVM_DELETECOLUMN	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_DELETECOLUMN = 0x101C/;"	constant
LVM_DELETEITEM	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_DELETEITEM = 0x1008/;"	constant
LVM_EDITLABELA	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_EDITLABELA = 0x1017/;"	constant
LVM_EDITLABELW	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_EDITLABELW = 0x1076/;"	constant
LVM_ENABLEGROUPVIEW	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_ENABLEGROUPVIEW = 0x109D/;"	constant
LVM_ENSUREVISIBLE	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_ENSUREVISIBLE = 0x1013/;"	constant
LVM_FINDITEMA	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_FINDITEMA = 0x100D/;"	constant
LVM_FINDITEMW	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_FINDITEMW = 0x1053/;"	constant
LVM_GETBKCOLOR	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_GETBKCOLOR = 0x1000/;"	constant
LVM_GETBKIMAGEA	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_GETBKIMAGEA = 0x1045/;"	constant
LVM_GETBKIMAGEW	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_GETBKIMAGEW = 0x108B/;"	constant
LVM_GETCALLBACKMASK	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_GETCALLBACKMASK = 0x100A/;"	constant
LVM_GETCOLUMNA	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_GETCOLUMNA = 0x1019/;"	constant
LVM_GETCOLUMNORDERARRAY	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_GETCOLUMNORDERARRAY = 0x103B/;"	constant
LVM_GETCOLUMNW	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_GETCOLUMNW = 0x105F/;"	constant
LVM_GETCOLUMNWIDTH	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_GETCOLUMNWIDTH = 0x101D/;"	constant
LVM_GETCOUNTPERPAGE	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_GETCOUNTPERPAGE = 0x1028/;"	constant
LVM_GETEDITCONTROL	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_GETEDITCONTROL = 0x1018/;"	constant
LVM_GETEXTENDEDLISTVIEWSTYLE	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_GETEXTENDEDLISTVIEWSTYLE = 0x1037/;"	constant
LVM_GETGROUPINFO	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_GETGROUPINFO = 0x1095/;"	constant
LVM_GETGROUPMETRICS	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_GETGROUPMETRICS = 0x109C/;"	constant
LVM_GETHEADER	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_GETHEADER = 0x101F/;"	constant
LVM_GETHOTCURSOR	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_GETHOTCURSOR = 0x103F/;"	constant
LVM_GETHOTITEM	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_GETHOTITEM = 0x103D/;"	constant
LVM_GETHOVERTIME	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_GETHOVERTIME = 0x1048/;"	constant
LVM_GETIMAGELIST	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_GETIMAGELIST = 0x1002/;"	constant
LVM_GETINSERTMARK	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_GETINSERTMARK = 0x10A7/;"	constant
LVM_GETINSERTMARKCOLOR	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_GETINSERTMARKCOLOR = 0x10AB/;"	constant
LVM_GETINSERTMARKRECT	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_GETINSERTMARKRECT = 0x10A9/;"	constant
LVM_GETISEARCHSTRINGA	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_GETISEARCHSTRINGA = 0x1034/;"	constant
LVM_GETISEARCHSTRINGW	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_GETISEARCHSTRINGW = 0x1075/;"	constant
LVM_GETITEMA	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_GETITEMA = 0x1005/;"	constant
LVM_GETITEMCOUNT	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_GETITEMCOUNT = 0x1004/;"	constant
LVM_GETITEMPOSITION	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_GETITEMPOSITION = 0x1010/;"	constant
LVM_GETITEMRECT	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_GETITEMRECT = 0x100E/;"	constant
LVM_GETITEMSPACING	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_GETITEMSPACING = 0x1033/;"	constant
LVM_GETITEMSTATE	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_GETITEMSTATE = 0x102C/;"	constant
LVM_GETITEMTEXTA	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_GETITEMTEXTA = 0x102D/;"	constant
LVM_GETITEMTEXTW	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_GETITEMTEXTW = 0x1073/;"	constant
LVM_GETITEMW	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_GETITEMW = 0x104B/;"	constant
LVM_GETNEXTITEM	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_GETNEXTITEM = 0x100C/;"	constant
LVM_GETNUMBEROFWORKAREAS	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_GETNUMBEROFWORKAREAS = 0x1049/;"	constant
LVM_GETORIGIN	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_GETORIGIN = 0x1029/;"	constant
LVM_GETOUTLINECOLOR	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_GETOUTLINECOLOR = 0x10B0/;"	constant
LVM_GETSELECTEDCOLUMN	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_GETSELECTEDCOLUMN = 0x10AE/;"	constant
LVM_GETSELECTEDCOUNT	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_GETSELECTEDCOUNT = 0x1032/;"	constant
LVM_GETSELECTIONMARK	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_GETSELECTIONMARK = 0x1042/;"	constant
LVM_GETSTRINGWIDTHA	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_GETSTRINGWIDTHA = 0x1011/;"	constant
LVM_GETSTRINGWIDTHW	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_GETSTRINGWIDTHW = 0x1057/;"	constant
LVM_GETSUBITEMRECT	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_GETSUBITEMRECT = 0x1038/;"	constant
LVM_GETTEXTBKCOLOR	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_GETTEXTBKCOLOR = 0x1025/;"	constant
LVM_GETTEXTCOLOR	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_GETTEXTCOLOR = 0x1023/;"	constant
LVM_GETTILEINFO	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_GETTILEINFO = 0x10A5/;"	constant
LVM_GETTILEVIEWINFO	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_GETTILEVIEWINFO = 0x10A3/;"	constant
LVM_GETTOOLTIPS	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_GETTOOLTIPS = 0x104E/;"	constant
LVM_GETTOPINDEX	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_GETTOPINDEX = 0x1027/;"	constant
LVM_GETUNICODEFORMAT	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_GETUNICODEFORMAT = 0x2006/;"	constant
LVM_GETVIEW	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_GETVIEW = 0x108F/;"	constant
LVM_GETVIEWRECT	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_GETVIEWRECT = 0x1022/;"	constant
LVM_GETWORKAREAS	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_GETWORKAREAS = 0x1046/;"	constant
LVM_HASGROUP	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_HASGROUP = 0x10A1/;"	constant
LVM_HITTEST	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_HITTEST = 0x1012/;"	constant
LVM_INSERTCOLUMNA	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_INSERTCOLUMNA = 0x101B/;"	constant
LVM_INSERTCOLUMNW	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_INSERTCOLUMNW = 0x1061/;"	constant
LVM_INSERTGROUP	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_INSERTGROUP = 0x1091/;"	constant
LVM_INSERTGROUPSORTED	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_INSERTGROUPSORTED = 0x109F/;"	constant
LVM_INSERTITEMA	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_INSERTITEMA = 0x1007/;"	constant
LVM_INSERTITEMW	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_INSERTITEMW = 0x104D/;"	constant
LVM_INSERTMARKHITTEST	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_INSERTMARKHITTEST = 0x10A8/;"	constant
LVM_ISGROUPVIEWENABLED	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_ISGROUPVIEWENABLED = 0x10AF/;"	constant
LVM_ISITEMVISIBLE	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_ISITEMVISIBLE = 0x10B6/;"	constant
LVM_MAPIDTOINDEX	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_MAPIDTOINDEX = 0x10B5/;"	constant
LVM_MAPINDEXTOID	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_MAPINDEXTOID = 0x10B4/;"	constant
LVM_MOVEGROUP	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_MOVEGROUP = 0x1097/;"	constant
LVM_MOVEITEMTOGROUP	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_MOVEITEMTOGROUP = 0x109A/;"	constant
LVM_REDRAWITEMS	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_REDRAWITEMS = 0x1015/;"	constant
LVM_REMOVEALLGROUPS	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_REMOVEALLGROUPS = 0x10A0/;"	constant
LVM_REMOVEGROUP	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_REMOVEGROUP = 0x1096/;"	constant
LVM_SCROLL	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_SCROLL = 0x1014/;"	constant
LVM_SETBKCOLOR	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_SETBKCOLOR = 0x1001/;"	constant
LVM_SETBKIMAGEA	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_SETBKIMAGEA = 0x1044/;"	constant
LVM_SETCALLBACKMASK	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_SETCALLBACKMASK = 0x100B/;"	constant
LVM_SETCOLUMNA	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_SETCOLUMNA = 0x101A/;"	constant
LVM_SETCOLUMNORDERARRAY	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_SETCOLUMNORDERARRAY = 0x103A/;"	constant
LVM_SETCOLUMNW	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_SETCOLUMNW = 0x1060/;"	constant
LVM_SETCOLUMNWIDTH	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_SETCOLUMNWIDTH = 0x101E/;"	constant
LVM_SETEXTENDEDLISTVIEWSTYLE	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_SETEXTENDEDLISTVIEWSTYLE = 0x1036/;"	constant
LVM_SETGROUPINFO	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_SETGROUPINFO = 0x1093/;"	constant
LVM_SETGROUPMETRICS	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_SETGROUPMETRICS = 0x109B/;"	constant
LVM_SETHOTCURSOR	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_SETHOTCURSOR = 0x103E/;"	constant
LVM_SETHOTITEM	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_SETHOTITEM = 0x103C/;"	constant
LVM_SETHOVERTIME	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_SETHOVERTIME = 0x1047/;"	constant
LVM_SETICONSPACING	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_SETICONSPACING = 0x1035/;"	constant
LVM_SETIMAGELIST	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_SETIMAGELIST = 0x1003/;"	constant
LVM_SETINFOTIP	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_SETINFOTIP = 0x10AD/;"	constant
LVM_SETINSERTMARK	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_SETINSERTMARK = 0x10A6/;"	constant
LVM_SETINSERTMARKCOLOR	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_SETINSERTMARKCOLOR = 0x10AA/;"	constant
LVM_SETITEMA	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_SETITEMA = 0x1006/;"	constant
LVM_SETITEMCOUNT	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_SETITEMCOUNT = 0x102F/;"	constant
LVM_SETITEMPOSITION	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_SETITEMPOSITION = 0x100F/;"	constant
LVM_SETITEMPOSITION32	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_SETITEMPOSITION32 = 0x1031/;"	constant
LVM_SETITEMSTATE	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_SETITEMSTATE = 0x102B/;"	constant
LVM_SETITEMTEXTA	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_SETITEMTEXTA = 0x102E/;"	constant
LVM_SETITEMTEXTW	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_SETITEMTEXTW = 0x1074/;"	constant
LVM_SETITEMW	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_SETITEMW = 0x104C/;"	constant
LVM_SETOUTLINECOLOR	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_SETOUTLINECOLOR = 0x10B1/;"	constant
LVM_SETSELECTEDCOLUMN	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_SETSELECTEDCOLUMN = 0x108C/;"	constant
LVM_SETSELECTIONMARK	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_SETSELECTIONMARK = 0x1043/;"	constant
LVM_SETTEXTBKCOLOR	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_SETTEXTBKCOLOR = 0x1026/;"	constant
LVM_SETTEXTCOLOR	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_SETTEXTCOLOR = 0x1024/;"	constant
LVM_SETTILEINFO	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_SETTILEINFO = 0x10A4/;"	constant
LVM_SETTILEVIEWINFO	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_SETTILEVIEWINFO = 0x10A2/;"	constant
LVM_SETTILEWIDTH	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_SETTILEWIDTH = 0x108D/;"	constant
LVM_SETTOOLTIPS	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_SETTOOLTIPS = 0x104A/;"	constant
LVM_SETUNICODEFORMAT	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_SETUNICODEFORMAT = 0x2005/;"	constant
LVM_SETVIEW	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_SETVIEW = 0x108E/;"	constant
LVM_SETWORKAREAS	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_SETWORKAREAS = 0x1041/;"	constant
LVM_SORTGROUPS	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_SORTGROUPS = 0x109E/;"	constant
LVM_SORTITEMS	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_SORTITEMS = 0x1030/;"	constant
LVM_SUBITEMHITTEST	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_SUBITEMHITTEST = 0x1039/;"	constant
LVM_UPDATE	$ZIGLIB/std/os/windows/user32.zig	/^pub const LVM_UPDATE = 0x102A/;"	constant
LWKT	$ZIGLIB/std/c/dragonfly.zig	/pub const LWKT = 10/;"	constant
LX_NETLINK	$ZIGLIB/std/c/solaris.zig	/pub const LX_NETLINK = 33/;"	constant
L_SUFFIX	$ZIGLIB/std/zig/c_translation.zig	/pub fn L_SUFFIX(comptime number: anytype) L_SUFFIX_ReturnType(number) {$/;"	function
L_SUFFIX_ReturnType	$ZIGLIB/std/zig/c_translation.zig	/fn L_SUFFIX_ReturnType(comptime number: anytype) type {$/;"	function
Lane	$ZIGLIB/std/crypto/xoodoo.zig	/const Lane = @Vector(4, u32)/;"	constant
LangGenerationCount	$ZIGLIB/std/os/windows.zig	/LangGenerationCount: ULONG/;"	field
Large	$ZIGLIB/std/rand.zig	/const Large = std.meta.Int(.unsigned, small_bits * 2)/;"	constant
LargeAlloc	$ZIGLIB/std/heap/general_purpose_allocator.zig	/const LargeAlloc = struct {$/;"	struct
LargeAllocTable	$ZIGLIB/std/heap/general_purpose_allocator.zig	/const LargeAllocTable = std.AutoHashMapUnmanaged(usize, LargeAlloc)/;"	constant
LargePageMinimum	$ZIGLIB/std/os/windows.zig	/LargePageMinimum: ULONG/;"	field
LastAccessTime	$ZIGLIB/std/os/windows.zig	/LastAccessTime: LARGE_INTEGER/;"	field
LastBranchFromRip	$ZIGLIB/std/os/windows.zig	/LastBranchFromRip: DWORD64/;"	field
LastBranchToRip	$ZIGLIB/std/os/windows.zig	/LastBranchToRip: DWORD64/;"	field
LastExceptionFromRip	$ZIGLIB/std/os/windows.zig	/LastExceptionFromRip: DWORD64/;"	field
LastExceptionToRip	$ZIGLIB/std/os/windows.zig	/LastExceptionToRip: DWORD64/;"	field
LastSystemRITEventTickCount	$ZIGLIB/std/os/windows.zig	/LastSystemRITEventTickCount: ULONG/;"	field
LastWriteTime	$ZIGLIB/std/os/windows.zig	/LastWriteTime: LARGE_INTEGER/;"	field
Latency	$ZIGLIB/std/os/windows/ws2_32.zig	/Latency: u32/;"	field
LdInfo	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/^pub const LdInfo = struct {$/;"	struct
Leaf	$ZIGLIB/std/fmt.zig	/Leaf: i32/;"	field
Leapsecond	$ZIGLIB/std/tz.zig	/^pub const Leapsecond = struct {$/;"	struct
Left	$ZIGLIB/std/os/windows.zig	/Left: SHORT/;"	field
LeftShift	$ZIGLIB/std/rand/Sfc64.zig	/^const LeftShift = 3/;"	constant
Legacy	$ZIGLIB/std/os/windows.zig	/Legacy: [8]M128A/;"	field
LegacyMbr	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/LegacyMbr = 0x01/;"	field
LenDecoder	$ZIGLIB/std/compress/lzma/decode/rangecoder.zig	/^pub const LenDecoder = struct {$/;"	struct
Length	$ZIGLIB/std/pdb.zig	/Length: u32/;"	field
Less	$ZIGLIB/compiler_rt/comparef.zig	/Less = -1/;"	field
Level	$ZIGLIB/std/log.zig	/^pub const Level = enum {$/;"	enum
LevelInfo	$ZIGLIB/std/compress/deflate/huffman_code.zig	/^const LevelInfo = struct {$/;"	struct
LibExeObjStep	$ZIGLIB/std/Build.zig	/^pub const LibExeObjStep = CompileStep/;"	constant
Limb	$ZIGLIB/std/math/big.zig	/^pub const Limb = usize/;"	constant
Limbs	$ZIGLIB/std/crypto/pcurves/common.zig	/const Limbs = @TypeOf(a.limbs)/;"	constant
LimitedReader	$ZIGLIB/std/io/limited_reader.zig	/^pub fn LimitedReader(comptime ReaderType: type) type {$/;"	function
Limits	$ZIGLIB/std/wasm.zig	/^pub const Limits = struct {$/;"	struct
LineBlockFragmentHeader	$ZIGLIB/std/pdb.zig	/^pub const LineBlockFragmentHeader = extern struct {$/;"	struct
LineComment	$ZIGLIB/std/c/tokenizer.zig	/LineComment/;"	field
LineFlags	$ZIGLIB/std/pdb.zig	/^pub const LineFlags = packed struct {$/;"	struct
LineFragmentHeader	$ZIGLIB/std/pdb.zig	/^pub const LineFragmentHeader = extern struct {$/;"	struct
LineInfo	$ZIGLIB/std/debug.zig	/^pub const LineInfo = struct {$/;"	struct
LineNumberEntry	$ZIGLIB/std/pdb.zig	/^pub const LineNumberEntry = extern struct {$/;"	struct
LineNumberProgram	$ZIGLIB/std/dwarf.zig	/^const LineNumberProgram = struct {$/;"	struct
LineStrPtr	$ZIGLIB/std/dwarf.zig	/LineStrPtr: u64/;"	field
LinearFifo	$ZIGLIB/std/fifo.zig	/^pub fn LinearFifo($/;"	function
LinearFifoBufferType	$ZIGLIB/std/fifo.zig	/^pub const LinearFifoBufferType = union(enum) {$/;"	union
Lines	$ZIGLIB/std/pdb.zig	/Lines = 0xf2/;"	field
LinkCreateAttr	$ZIGLIB/std/os/linux/bpf.zig	/^pub const LinkCreateAttr = extern struct {$/;"	struct
LinkError	$ZIGLIB/std/os.zig	/^pub const LinkError = UnexpectedError || error{$/;"	constant
LinkMap	$ZIGLIB/std/dynamic_library.zig	/^const LinkMap = extern struct {$/;"	struct
LinkMode	$ZIGLIB/std/builtin.zig	/^pub const LinkMode = enum {$/;"	enum
LinkObject	$ZIGLIB/std/Build/CompileStep.zig	/^pub const LinkObject = union(enum) {$/;"	union
LinkOnce	$ZIGLIB/std/builtin.zig	/LinkOnce/;"	field
LinkUpdateAttr	$ZIGLIB/std/os/linux/bpf.zig	/^pub const LinkUpdateAttr = extern struct {$/;"	struct
Linkage	$ZIGLIB/std/target/spirv.zig	/Linkage/;"	field
LinkatError	$ZIGLIB/std/os.zig	/^pub const LinkatError = LinkError || error{NotDir}/;"	constant
Linux	$ZIGLIB/std/os/linux/syscalls.zig	/pub const Linux = 5000/;"	constant
LinuxImpl	$ZIGLIB/std/Thread/Futex.zig	/^const LinuxImpl = struct {$/;"	struct
LinuxOsData	$ZIGLIB/std/fs/watch.zig	/const LinuxOsData = struct {$/;"	struct
LinuxThreadImpl	$ZIGLIB/std/Thread.zig	/^const LinuxThreadImpl = struct {$/;"	struct
LinuxVersionRange	$ZIGLIB/std/target.zig	/pub const LinuxVersionRange = struct {$/;"	struct
ListenError	$ZIGLIB/std/os.zig	/^pub const ListenError = error{$/;"	constant
LiteralNode	$ZIGLIB/std/compress/deflate/huffman_code.zig	/^const LiteralNode = struct {$/;"	struct
LiteralSampler	$ZIGLIB/std/target/spirv.zig	/LiteralSampler/;"	field
Little	$ZIGLIB/std/builtin.zig	/Little/;"	field
LmCharSetASCII	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const LmCharSetASCII = 0/;"	constant
LmCharSetISO_8859_1	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const LmCharSetISO_8859_1 = 1/;"	constant
LmCharSetISO_8859_2	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const LmCharSetISO_8859_2 = 2/;"	constant
LmCharSetISO_8859_3	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const LmCharSetISO_8859_3 = 3/;"	constant
LmCharSetISO_8859_4	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const LmCharSetISO_8859_4 = 4/;"	constant
LmCharSetISO_8859_5	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const LmCharSetISO_8859_5 = 5/;"	constant
LmCharSetISO_8859_6	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const LmCharSetISO_8859_6 = 6/;"	constant
LmCharSetISO_8859_7	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const LmCharSetISO_8859_7 = 7/;"	constant
LmCharSetISO_8859_8	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const LmCharSetISO_8859_8 = 8/;"	constant
LmCharSetISO_8859_9	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const LmCharSetISO_8859_9 = 9/;"	constant
LmCharSetUNICODE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const LmCharSetUNICODE = 255/;"	constant
LoadCommand	$ZIGLIB/std/macho.zig	/pub const LoadCommand = struct {$/;"	struct
LoadCommandIterator	$ZIGLIB/std/macho.zig	/^pub const LoadCommandIterator = struct {$/;"	struct
LoadError	$ZIGLIB/std/os/uefi/status.zig	/LoadError = high_bit | 1/;"	field
LoadInt	$ZIGLIB/std/mem.zig	/const LoadInt = std.meta.Int(.unsigned, load_size * 8)/;"	constant
LoadLibraryError	$ZIGLIB/std/os/windows.zig	/^pub const LoadLibraryError = error{$/;"	constant
LoadLibraryW	$ZIGLIB/std/os/windows.zig	/^pub fn LoadLibraryW(lpLibFileName: [*:0]const u16) LoadLibraryError!HMODULE {$/;"	function
LoadPdbDebuginfo	$ZIGLIB/std/valgrind.zig	/LoadPdbDebuginfo = 5633/;"	field
LoadedImageProtocol	$ZIGLIB/std/os/uefi/protocols/loaded_image_protocol.zig	/^pub const LoadedImageProtocol = extern struct {$/;"	struct
LoaderCode	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/LoaderCode/;"	field
LoaderData	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/LoaderData/;"	field
LoaderLock	$ZIGLIB/std/os/windows.zig	/LoaderLock: *RTL_CRITICAL_SECTION/;"	field
LocListOffset	$ZIGLIB/std/dwarf.zig	/LocListOffset: u64/;"	field
LocalFree	$ZIGLIB/std/os/windows.zig	/^pub fn LocalFree(hMem: HLOCAL) void {$/;"	function
LocalHint	$ZIGLIB/std/os/windows.zig	/LocalHint: BYTE/;"	field
LocalVarDecl	$ZIGLIB/std/zig/Ast.zig	/pub const LocalVarDecl = struct {$/;"	struct
LocateSearchType	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/^pub const LocateSearchType = enum(u32) {$/;"	enum
Location	$ZIGLIB/std/zig/Ast.zig	/^pub const Location = struct {$/;"	struct
Lock	$ZIGLIB/std/fs/file.zig	/pub const Lock = enum { None, Shared, Exclusive }/;"	enum
LockCount	$ZIGLIB/std/os/windows.zig	/LockCount: LONG/;"	field
LockError	$ZIGLIB/std/fs/file.zig	/pub const LockError = error{$/;"	constant
LockFile	$ZIGLIB/std/os/windows.zig	/^pub fn LockFile($/;"	function
LockFileError	$ZIGLIB/std/os/windows.zig	/^pub const LockFileError = error{$/;"	constant
LockSemaphore	$ZIGLIB/std/os/windows.zig	/LockSemaphore: HANDLE/;"	field
Locked	$ZIGLIB/std/event/locked.zig	/^pub fn Locked(comptime T: type) type {$/;"	function
Log2Align	$ZIGLIB/std/mem/Allocator.zig	/^pub const Log2Align = math.Log2Int(usize)/;"	constant
Log2Int	$ZIGLIB/std/math.zig	/^pub fn Log2Int(comptime T: type) type {$/;"	function
Log2IntCeil	$ZIGLIB/std/math.zig	/^pub fn Log2IntCeil(comptime T: type) type {$/;"	function
Log2Limb	$ZIGLIB/std/math/big.zig	/^pub const Log2Limb = std.math.Log2Int(Limb)/;"	constant
Log2N	$ZIGLIB/std/mem.zig	/const Log2N = std.math.Log2Int(T)/;"	constant
Log2SingleInt	$ZIGLIB/compiler_rt/udivmod.zig	/const Log2SingleInt = std.math.Log2Int(SingleInt)/;"	constant
Log2T	$ZIGLIB/std/mem.zig	/const Log2T = std.math.Log2Int(BackingType)/;"	constant
LogCount	$ZIGLIB/std/pdb.zig	/LogCount: u16/;"	field
LogStep	$ZIGLIB/std/Build/LogStep.zig	/^const LogStep = @This()/;"	constant
LogToWriterAllocator	$ZIGLIB/std/heap/log_to_writer_allocator.zig	/^pub fn LogToWriterAllocator(comptime Writer: type) type {$/;"	function
LoggingAllocator	$ZIGLIB/std/heap/logging_allocator.zig	/^pub fn LoggingAllocator($/;"	function
LongConstantCompositeINTEL	$ZIGLIB/std/target/spirv.zig	/LongConstantCompositeINTEL/;"	field
LookupAddr	$ZIGLIB/std/net.zig	/^const LookupAddr = struct {$/;"	struct
Loop	$ZIGLIB/std/event/loop.zig	/^pub const Loop = struct {$/;"	struct
LoopFuseINTEL	$ZIGLIB/std/target/spirv.zig	/LoopFuseINTEL/;"	field
LowAddress	$ZIGLIB/std/os/windows.zig	/LowAddress: ULONG64/;"	field
LowPart	$ZIGLIB/std/os/windows.zig	/LowPart: ULONG/;"	field
LzAccumBuffer	$ZIGLIB/std/compress/lzma/decode/lzbuffer.zig	/^pub const LzAccumBuffer = struct {$/;"	struct
LzCircularBuffer	$ZIGLIB/std/compress/lzma/decode/lzbuffer.zig	/^pub const LzCircularBuffer = struct {$/;"	struct
M128A	$ZIGLIB/std/os/windows.zig	/pub const M128A = extern struct {$/;"	struct
M16C	$ZIGLIB/std/elf.zig	/M16C = 117/;"	field
M32C	$ZIGLIB/std/elf.zig	/M32C = 120/;"	field
M32R	$ZIGLIB/std/elf.zig	/M32R = 88/;"	field
M68000	$ZIGLIB/std/target/m68k.zig	/pub const M68000 = CpuModel{$/;"	constant
M68010	$ZIGLIB/std/target/m68k.zig	/pub const M68010 = CpuModel{$/;"	constant
M68020	$ZIGLIB/std/target/m68k.zig	/pub const M68020 = CpuModel{$/;"	constant
M68030	$ZIGLIB/std/target/m68k.zig	/pub const M68030 = CpuModel{$/;"	constant
M68040	$ZIGLIB/std/target/m68k.zig	/pub const M68040 = CpuModel{$/;"	constant
M68060	$ZIGLIB/std/target/m68k.zig	/pub const M68060 = CpuModel{$/;"	constant
M68K	$ZIGLIB/std/os/linux.zig	/M68K = toAudit(.m68k)/;"	field
MACCATALYST	$ZIGLIB/std/macho.zig	/MACCATALYST = 0x6/;"	field
MACEDONIAN	$ZIGLIB/std/os/windows/lang.zig	/^pub const MACEDONIAN = 0x2f/;"	constant
MACEDONIAN_MACEDONIA	$ZIGLIB/std/os/windows/sublang.zig	/^pub const MACEDONIAN_MACEDONIA = 0x01/;"	constant
MACHDEP	$ZIGLIB/std/c/openbsd.zig	/pub const MACHDEP = 7/;"	constant
MACHINE_LOCKED	$ZIGLIB/std/os/windows/win32error.zig	/MACHINE_LOCKED = 1271/;"	field
MACH_EXCEPTION_BACKTRACE_PREFERRED	$ZIGLIB/std/c/darwin.zig	/^pub const MACH_EXCEPTION_BACKTRACE_PREFERRED = 0x20000000/;"	constant
MACH_EXCEPTION_CODES	$ZIGLIB/std/c/darwin.zig	/^pub const MACH_EXCEPTION_CODES = 0x80000000/;"	constant
MACH_EXCEPTION_ERRORS	$ZIGLIB/std/c/darwin.zig	/^pub const MACH_EXCEPTION_ERRORS = 0x40000000/;"	constant
MACH_EXCEPTION_MASK	$ZIGLIB/std/c/darwin.zig	/^pub const MACH_EXCEPTION_MASK = MACH_EXCEPTION_CODES |$/;"	constant
MACH_MSG_IPC_KERNEL	$ZIGLIB/std/c/darwin.zig	/^pub const MACH_MSG_IPC_KERNEL: u32 = 0x800/;"	constant
MACH_MSG_IPC_SPACE	$ZIGLIB/std/c/darwin.zig	/^pub const MACH_MSG_IPC_SPACE: u32 = 0x2000/;"	constant
MACH_MSG_MASK	$ZIGLIB/std/c/darwin.zig	/^pub const MACH_MSG_MASK: u32 = 0x3e00/;"	constant
MACH_MSG_OPTION_NONE	$ZIGLIB/std/c/darwin.zig	/^pub const MACH_MSG_OPTION_NONE = 0x00000000/;"	constant
MACH_MSG_STRICT_REPLY	$ZIGLIB/std/c/darwin.zig	/^pub const MACH_MSG_STRICT_REPLY = 0x00000200/;"	constant
MACH_MSG_TIMEOUT_NONE	$ZIGLIB/std/c/darwin.zig	/^pub const MACH_MSG_TIMEOUT_NONE: mach_msg_timeout_t = 0/;"	constant
MACH_MSG_TYPE	$ZIGLIB/std/c/darwin.zig	/^pub const MACH_MSG_TYPE = enum(mach_msg_type_name_t) {$/;"	enum
MACH_MSG_VM_KERNEL	$ZIGLIB/std/c/darwin.zig	/^pub const MACH_MSG_VM_KERNEL: u32 = 0x400/;"	constant
MACH_MSG_VM_SPACE	$ZIGLIB/std/c/darwin.zig	/^pub const MACH_MSG_VM_SPACE: u32 = 0x1000/;"	constant
MACH_PORT_NULL	$ZIGLIB/std/c/darwin.zig	/^pub const MACH_PORT_NULL: mach_port_t = 0/;"	constant
MACH_PORT_RIGHT	$ZIGLIB/std/c/darwin.zig	/^pub const MACH_PORT_RIGHT = enum(mach_port_right_t) {$/;"	enum
MACH_RCV_GUARDED_DESC	$ZIGLIB/std/c/darwin.zig	/^pub const MACH_RCV_GUARDED_DESC = 0x00001000/;"	constant
MACH_RCV_INTERRUPT	$ZIGLIB/std/c/darwin.zig	/^pub const MACH_RCV_INTERRUPT = 0x00000400/;"	constant
MACH_RCV_LARGE	$ZIGLIB/std/c/darwin.zig	/^pub const MACH_RCV_LARGE = 0x00000004/;"	constant
MACH_RCV_LARGE_IDENTITY	$ZIGLIB/std/c/darwin.zig	/^pub const MACH_RCV_LARGE_IDENTITY = 0x00000008/;"	constant
MACH_RCV_MSG	$ZIGLIB/std/c/darwin.zig	/^pub const MACH_RCV_MSG = 0x00000002/;"	constant
MACH_RCV_NOTIFY	$ZIGLIB/std/c/darwin.zig	/^pub const MACH_RCV_NOTIFY = 0x00000000/;"	constant
MACH_RCV_OVERWRITE	$ZIGLIB/std/c/darwin.zig	/^pub const MACH_RCV_OVERWRITE = 0x00000000/;"	constant
MACH_RCV_SYNC_PEEK	$ZIGLIB/std/c/darwin.zig	/^pub const MACH_RCV_SYNC_PEEK = 0x00008000/;"	constant
MACH_RCV_SYNC_WAIT	$ZIGLIB/std/c/darwin.zig	/^pub const MACH_RCV_SYNC_WAIT = 0x00004000/;"	constant
MACH_RCV_TIMEOUT	$ZIGLIB/std/c/darwin.zig	/^pub const MACH_RCV_TIMEOUT = 0x00000100/;"	constant
MACH_RCV_VOUCHER	$ZIGLIB/std/c/darwin.zig	/^pub const MACH_RCV_VOUCHER = 0x00000800/;"	constant
MACH_SEND_ALWAYS	$ZIGLIB/std/c/darwin.zig	/^pub const MACH_SEND_ALWAYS = 0x00010000/;"	constant
MACH_SEND_FILTER_NONFATAL	$ZIGLIB/std/c/darwin.zig	/^pub const MACH_SEND_FILTER_NONFATAL = 0x00010000/;"	constant
MACH_SEND_IMPORTANCE	$ZIGLIB/std/c/darwin.zig	/^pub const MACH_SEND_IMPORTANCE = 0x00080000/;"	constant
MACH_SEND_INTERRUPT	$ZIGLIB/std/c/darwin.zig	/^pub const MACH_SEND_INTERRUPT = 0x00000040/;"	constant
MACH_SEND_KERNEL	$ZIGLIB/std/c/darwin.zig	/^pub const MACH_SEND_KERNEL = 0x00400000/;"	constant
MACH_SEND_MSG	$ZIGLIB/std/c/darwin.zig	/^pub const MACH_SEND_MSG = 0x00000001/;"	constant
MACH_SEND_NODENAP	$ZIGLIB/std/c/darwin.zig	/^pub const MACH_SEND_NODENAP = MACH_SEND_NOIMPORTANCE/;"	constant
MACH_SEND_NOIMPORTANCE	$ZIGLIB/std/c/darwin.zig	/^pub const MACH_SEND_NOIMPORTANCE = 0x00040000/;"	constant
MACH_SEND_NOTIFY	$ZIGLIB/std/c/darwin.zig	/^pub const MACH_SEND_NOTIFY = 0x00000080/;"	constant
MACH_SEND_OVERRIDE	$ZIGLIB/std/c/darwin.zig	/^pub const MACH_SEND_OVERRIDE = 0x00000020/;"	constant
MACH_SEND_PROPAGATE_QOS	$ZIGLIB/std/c/darwin.zig	/^pub const MACH_SEND_PROPAGATE_QOS = 0x00200000/;"	constant
MACH_SEND_SYNC_BOOTSTRAP_CHECKIN	$ZIGLIB/std/c/darwin.zig	/^pub const MACH_SEND_SYNC_BOOTSTRAP_CHECKIN = 0x00800000/;"	constant
MACH_SEND_SYNC_OVERRIDE	$ZIGLIB/std/c/darwin.zig	/^pub const MACH_SEND_SYNC_OVERRIDE = 0x00100000/;"	constant
MACH_SEND_SYNC_USE_THRPRI	$ZIGLIB/std/c/darwin.zig	/^pub const MACH_SEND_SYNC_USE_THRPRI = MACH_SEND_PROPAGATE_QOS/;"	constant
MACH_SEND_TIMEOUT	$ZIGLIB/std/c/darwin.zig	/^pub const MACH_SEND_TIMEOUT = 0x00000010/;"	constant
MACH_SEND_TRAILER	$ZIGLIB/std/c/darwin.zig	/^pub const MACH_SEND_TRAILER = 0x00020000/;"	constant
MACH_SYSCALL	$ZIGLIB/std/c/darwin.zig	/MACH_SYSCALL = 8/;"	field
MACH_TASK_BASIC_INFO	$ZIGLIB/std/c/darwin.zig	/^pub const MACH_TASK_BASIC_INFO = 20/;"	constant
MACH_TASK_BASIC_INFO_COUNT	$ZIGLIB/std/c/darwin.zig	/^pub const MACH_TASK_BASIC_INFO_COUNT: mach_msg_type_number_t = @sizeOf(mach_task_basic_info) \/ @sizeOf(natural_t)/;"	constant
MACOS	$ZIGLIB/std/macho.zig	/MACOS = 0x1/;"	field
MAC_ADMIN	$ZIGLIB/std/os/linux.zig	/pub const MAC_ADMIN = 33/;"	constant
MAC_EXEMPT	$ZIGLIB/std/c/solaris.zig	/pub const MAC_EXEMPT = 0x100b/;"	constant
MAC_IMPLICIT	$ZIGLIB/std/c/solaris.zig	/pub const MAC_IMPLICIT = 0x1016/;"	constant
MAC_OVERRIDE	$ZIGLIB/std/os/linux.zig	/pub const MAC_OVERRIDE = 32/;"	constant
MADV	$ZIGLIB/std/os/linux.zig	/^pub const MADV = struct {$/;"	struct
MADVISE	$ZIGLIB/std/os/linux.zig	/MADVISE/;"	field
MAGAZINE_NOT_PRESENT	$ZIGLIB/std/os/windows/win32error.zig	/MAGAZINE_NOT_PRESENT = 1163/;"	field
MAGIC	$ZIGLIB/std/elf.zig	/^pub const MAGIC = "\\x7fELF"/;"	constant
MAGIC1	$ZIGLIB/std/os/linux.zig	/pub const MAGIC1 = enum(u32) {$/;"	enum
MAGIC2	$ZIGLIB/std/os/linux.zig	/pub const MAGIC2 = enum(u32) {$/;"	enum
MAGIC2A	$ZIGLIB/std/os/linux.zig	/MAGIC2A = 85072278/;"	field
MAGIC2B	$ZIGLIB/std/os/linux.zig	/MAGIC2B = 369367448/;"	field
MAGIC2C	$ZIGLIB/std/os/linux.zig	/MAGIC2C = 537993216/;"	field
MAIN	$ZIGLIB/std/macho.zig	/MAIN = (0x28 | LC_REQ_DYLD)/;"	field
MAIN_HINSTANCE	$ZIGLIB/std/start.zig	/const MAIN_HINSTANCE = @typeInfo(@TypeOf(root.wWinMain)).Fn.params[0].type.?/;"	constant
MAIN_ONLY	$ZIGLIB/std/c/darwin.zig	/pub const MAIN_ONLY = @intToPtr(*anyopaque, @bitCast(usize, @as(isize, -5)))/;"	constant
MAKELANGID	$ZIGLIB/std/os/windows.zig	/^inline fn MAKELANGID(p: c_ushort, s: c_ushort) LANGID {$/;"	function
MAKE_SEND	$ZIGLIB/std/c/darwin.zig	/MAKE_SEND = 20/;"	field
MAKE_SEND_ONCE	$ZIGLIB/std/c/darwin.zig	/MAKE_SEND_ONCE = 21/;"	field
MALAY	$ZIGLIB/std/os/windows/lang.zig	/^pub const MALAY = 0x3e/;"	constant
MALAYALAM	$ZIGLIB/std/os/windows/lang.zig	/^pub const MALAYALAM = 0x4c/;"	constant
MALAYALAM_INDIA	$ZIGLIB/std/os/windows/sublang.zig	/^pub const MALAYALAM_INDIA = 0x01/;"	constant
MALAY_BRUNEI_DARUSSALAM	$ZIGLIB/std/os/windows/sublang.zig	/^pub const MALAY_BRUNEI_DARUSSALAM = 0x02/;"	constant
MALAY_MALAYSIA	$ZIGLIB/std/os/windows/sublang.zig	/^pub const MALAY_MALAYSIA = 0x01/;"	constant
MALLOCSTATS	$ZIGLIB/std/c/openbsd.zig	/pub const MALLOCSTATS = 39/;"	constant
MALTESE	$ZIGLIB/std/os/windows/lang.zig	/^pub const MALTESE = 0x3a/;"	constant
MALTESE_MALTA	$ZIGLIB/std/os/windows/sublang.zig	/^pub const MALTESE_MALTA = 0x01/;"	constant
MANDLOCK	$ZIGLIB/std/os/linux.zig	/pub const MANDLOCK = 64/;"	constant
MANIK	$ZIGLIB/std/elf.zig	/MANIK = 171/;"	field
MANIPURI	$ZIGLIB/std/os/windows/lang.zig	/^pub const MANIPURI = 0x58/;"	constant
MAORI	$ZIGLIB/std/os/windows/lang.zig	/^pub const MAORI = 0x81/;"	constant
MAORI_NEW_ZEALAND	$ZIGLIB/std/os/windows/sublang.zig	/^pub const MAORI_NEW_ZEALAND = 0x01/;"	constant
MAPPED_ALIGNMENT	$ZIGLIB/std/os/windows/win32error.zig	/MAPPED_ALIGNMENT = 1132/;"	field
MAPPED_FILE_SIZE_ZERO	$ZIGLIB/std/os/windows/ntstatus.zig	/MAPPED_FILE_SIZE_ZERO = 0xC000011E/;"	field
MAPUDUNGUN	$ZIGLIB/std/os/windows/lang.zig	/^pub const MAPUDUNGUN = 0x7a/;"	constant
MAPUDUNGUN_CHILE	$ZIGLIB/std/os/windows/sublang.zig	/^pub const MAPUDUNGUN_CHILE = 0x01/;"	constant
MARATHI	$ZIGLIB/std/os/windows/lang.zig	/^pub const MARATHI = 0x4e/;"	constant
MARATHI_INDIA	$ZIGLIB/std/os/windows/sublang.zig	/^pub const MARATHI_INDIA = 0x01/;"	constant
MARK	$ZIGLIB/std/os/linux.zig	/pub const MARK = 36/;"	constant
MARSHALL_OVERFLOW	$ZIGLIB/std/os/windows/win32error.zig	/MARSHALL_OVERFLOW = 603/;"	field
MASK	$ZIGLIB/std/unicode.zig	/const MASK = 0x80 * (std.math.maxInt(usize) \/ 0xff)/;"	constant
MASK51	$ZIGLIB/std/crypto/25519/field.zig	/const MASK51: u64 = 0x7ffffffffffff/;"	constant
MASK_ADD	$ZIGLIB/std/os/linux.zig	/pub const MASK_ADD = 0x20000000/;"	constant
MASK_CREATE	$ZIGLIB/std/os/linux.zig	/pub const MASK_CREATE = 0x10000000/;"	constant
MASTER	$ZIGLIB/std/os/linux.zig	/MASTER/;"	field
MATTR_CACHE	$ZIGLIB/std/c/darwin.zig	/^pub const MATTR_CACHE = 1/;"	constant
MATTR_MIGRATE	$ZIGLIB/std/c/darwin.zig	/^pub const MATTR_MIGRATE = 2/;"	constant
MATTR_REPLICATE	$ZIGLIB/std/c/darwin.zig	/^pub const MATTR_REPLICATE = 4/;"	constant
MATTR_VAL_CACHE_FLUSH	$ZIGLIB/std/c/darwin.zig	/^pub const MATTR_VAL_CACHE_FLUSH = 6/;"	constant
MATTR_VAL_CACHE_SYNC	$ZIGLIB/std/c/darwin.zig	/^pub const MATTR_VAL_CACHE_SYNC = 9/;"	constant
MATTR_VAL_DCACHE_FLUSH	$ZIGLIB/std/c/darwin.zig	/^pub const MATTR_VAL_DCACHE_FLUSH = 7/;"	constant
MATTR_VAL_GET	$ZIGLIB/std/c/darwin.zig	/^pub const MATTR_VAL_GET = 2/;"	constant
MATTR_VAL_GET_INFO	$ZIGLIB/std/c/darwin.zig	/^pub const MATTR_VAL_GET_INFO = 10/;"	constant
MATTR_VAL_ICACHE_FLUSH	$ZIGLIB/std/c/darwin.zig	/^pub const MATTR_VAL_ICACHE_FLUSH = 8/;"	constant
MATTR_VAL_OFF	$ZIGLIB/std/c/darwin.zig	/^pub const MATTR_VAL_OFF = 0/;"	constant
MATTR_VAL_ON	$ZIGLIB/std/c/darwin.zig	/^pub const MATTR_VAL_ON = 1/;"	constant
MAXADDRLEN	$ZIGLIB/std/c/dragonfly.zig	/pub const MAXADDRLEN = 255/;"	constant
MAXADDRS	$ZIGLIB/std/net.zig	/const MAXADDRS = 3/;"	constant
MAXCLUSTERS	$ZIGLIB/std/c/openbsd.zig	/pub const MAXCLUSTERS = 67/;"	constant
MAXDG	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const MAXDG = 28681/;"	constant
MAXFD	$ZIGLIB/std/c/netbsd.zig	/pub const MAXFD = 11/;"	constant
MAXFILES	$ZIGLIB/std/c/openbsd.zig	/pub const MAXFILES = 7/;"	constant
MAXFILESPERPROC	$ZIGLIB/std/c/dragonfly.zig	/pub const MAXFILESPERPROC = 27/;"	constant
MAXGETHOSTSTRUCT	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const MAXGETHOSTSTRUCT = 1024/;"	constant
MAXHOST	$ZIGLIB/std/c/solaris.zig	/pub const MAXHOST = 1025/;"	constant
MAXID	$ZIGLIB/std/c/dragonfly.zig	/pub const MAXID = 37/;"	constant
MAXIMUM_ALLOWED	$ZIGLIB/std/os/windows.zig	/^pub const MAXIMUM_ALLOWED = 0x02000000/;"	constant
MAXIMUM_REPARSE_DATA_BUFFER_SIZE	$ZIGLIB/std/os/windows.zig	/^pub const MAXIMUM_REPARSE_DATA_BUFFER_SIZE: ULONG = 16 * 1024/;"	constant
MAXIMUM_WAIT_OBJECTS	$ZIGLIB/std/os/windows.zig	/^pub const MAXIMUM_WAIT_OBJECTS = 64/;"	constant
MAXIMUM_XSTATE_FEATURES	$ZIGLIB/std/os/windows.zig	/^pub const MAXIMUM_XSTATE_FEATURES = 64/;"	constant
MAXINSNS	$ZIGLIB/std/os/linux/bpf.zig	/^pub const MAXINSNS = 4096/;"	constant
MAXIOVLEN	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const MAXIOVLEN = 16/;"	constant
MAXLOCKSPERUID	$ZIGLIB/std/c/openbsd.zig	/pub const MAXLOCKSPERUID = 70/;"	constant
MAXNAME	$ZIGLIB/std/c/dragonfly.zig	/pub const MAXNAME = 12/;"	constant
MAXNAMLEN	$ZIGLIB/std/c/solaris.zig	/^pub const MAXNAMLEN = 511/;"	constant
MAXPARTITIONS	$ZIGLIB/std/c/openbsd.zig	/pub const MAXPARTITIONS = 23/;"	constant
MAXPATHDG	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const MAXPATHDG = 28682/;"	constant
MAXPATHLEN	$ZIGLIB/std/c/haiku.zig	/^pub const MAXPATHLEN = PATH_MAX/;"	constant
MAXPOSIXLOCKSPERUID	$ZIGLIB/std/c/dragonfly.zig	/pub const MAXPOSIXLOCKSPERUID = 36/;"	constant
MAXPROC	$ZIGLIB/std/c/openbsd.zig	/pub const MAXPROC = 6/;"	constant
MAXPROCPERUID	$ZIGLIB/std/c/dragonfly.zig	/pub const MAXPROCPERUID = 28/;"	constant
MAXQ30	$ZIGLIB/std/elf.zig	/MAXQ30 = 169/;"	field
MAXRT	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const MAXRT = 5/;"	constant
MAXRTMS	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const MAXRTMS = 14/;"	constant
MAXSEG	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const MAXSEG = 4/;"	constant
MAXSERV	$ZIGLIB/std/c/solaris.zig	/pub const MAXSERV = 32/;"	constant
MAXSIG	$ZIGLIB/std/c/solaris.zig	/pub const MAXSIG = 75/;"	constant
MAXTHREAD	$ZIGLIB/std/c/openbsd.zig	/pub const MAXTHREAD = 25/;"	constant
MAXVNODES	$ZIGLIB/std/c/openbsd.zig	/pub const MAXVNODES = 5/;"	constant
MAX_ADDR_LEN	$ZIGLIB/std/os/linux.zig	/^pub const MAX_ADDR_LEN = 32/;"	constant
MAX_HDW_LEN	$ZIGLIB/std/c/solaris.zig	/^pub const MAX_HDW_LEN = 64/;"	constant
MAX_MCAST_TTL	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const MAX_MCAST_TTL = 255/;"	constant
MAX_MEMBERSHIPS	$ZIGLIB/std/os/linux.zig	/pub const MAX_MEMBERSHIPS = 20/;"	constant
MAX_MODULE_NAME32	$ZIGLIB/std/os/windows.zig	/^pub const MAX_MODULE_NAME32 = 255/;"	constant
MAX_MSG_SIZE	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const MAX_MSG_SIZE = 8195/;"	constant
MAX_MTU	$ZIGLIB/std/os/linux.zig	/MAX_MTU/;"	field
MAX_NAME_BYTES	$ZIGLIB/std/fs.zig	/^pub const MAX_NAME_BYTES = switch (builtin.os.tag) {$/;"	constant
MAX_PACING_RATE	$ZIGLIB/std/os/linux.zig	/pub const MAX_PACING_RATE = 49/;"	constant
MAX_PATH	$ZIGLIB/std/os/windows.zig	/^pub const MAX_PATH = 260/;"	constant
MAX_PATH_BYTES	$ZIGLIB/std/fs.zig	/^pub const MAX_PATH_BYTES = switch (builtin.os.tag) {$/;"	constant
MAX_PROTOCOL_CHAIN	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const MAX_PROTOCOL_CHAIN = 7/;"	constant
MAX_REFERRALS_EXCEEDED	$ZIGLIB/std/os/windows/ntstatus.zig	/MAX_REFERRALS_EXCEEDED = 0xC00002F4/;"	field
MAX_SESSIONS_REACHED	$ZIGLIB/std/os/windows/win32error.zig	/MAX_SESSIONS_REACHED = 353/;"	field
MAX_THRDS_REACHED	$ZIGLIB/std/os/windows/win32error.zig	/MAX_THRDS_REACHED = 164/;"	field
MAX_WINDOW_INCREMENT_PERCENTAGE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const MAX_WINDOW_INCREMENT_PERCENTAGE = 25/;"	constant
MAX_WOW64_SHARED_ENTRIES	$ZIGLIB/std/os/windows.zig	/^pub const MAX_WOW64_SHARED_ENTRIES = 16/;"	constant
MBSTAT	$ZIGLIB/std/c/openbsd.zig	/pub const MBSTAT = 59/;"	constant
MB_ABORTRETRYIGNORE	$ZIGLIB/std/os/windows/user32.zig	/^pub const MB_ABORTRETRYIGNORE = 0x00000002/;"	constant
MB_APPLMODAL	$ZIGLIB/std/os/windows/user32.zig	/^pub const MB_APPLMODAL = 0x00000000/;"	constant
MB_CANCELTRYCONTINUE	$ZIGLIB/std/os/windows/user32.zig	/^pub const MB_CANCELTRYCONTINUE = 0x00000006/;"	constant
MB_DEFAULT_DESKTOP_ONLY	$ZIGLIB/std/os/windows/user32.zig	/^pub const MB_DEFAULT_DESKTOP_ONLY = 0x00020000/;"	constant
MB_DEFBUTTON1	$ZIGLIB/std/os/windows/user32.zig	/^pub const MB_DEFBUTTON1 = 0x00000000/;"	constant
MB_DEFBUTTON2	$ZIGLIB/std/os/windows/user32.zig	/^pub const MB_DEFBUTTON2 = 0x00000100/;"	constant
MB_DEFBUTTON3	$ZIGLIB/std/os/windows/user32.zig	/^pub const MB_DEFBUTTON3 = 0x00000200/;"	constant
MB_DEFBUTTON4	$ZIGLIB/std/os/windows/user32.zig	/^pub const MB_DEFBUTTON4 = 0x00000300/;"	constant
MB_DEFMASK	$ZIGLIB/std/os/windows/user32.zig	/^pub const MB_DEFMASK = 0x00000F00/;"	constant
MB_HELP	$ZIGLIB/std/os/windows/user32.zig	/^pub const MB_HELP = 0x00004000/;"	constant
MB_ICONASTERISK	$ZIGLIB/std/os/windows/user32.zig	/^pub const MB_ICONASTERISK = 0x00000040/;"	constant
MB_ICONERROR	$ZIGLIB/std/os/windows/user32.zig	/^pub const MB_ICONERROR = MB_ICONHAND/;"	constant
MB_ICONEXCLAMATION	$ZIGLIB/std/os/windows/user32.zig	/^pub const MB_ICONEXCLAMATION = 0x00000030/;"	constant
MB_ICONHAND	$ZIGLIB/std/os/windows/user32.zig	/^pub const MB_ICONHAND = 0x00000010/;"	constant
MB_ICONINFORMATION	$ZIGLIB/std/os/windows/user32.zig	/^pub const MB_ICONINFORMATION = MB_ICONASTERISK/;"	constant
MB_ICONMASK	$ZIGLIB/std/os/windows/user32.zig	/^pub const MB_ICONMASK = 0x000000F0/;"	constant
MB_ICONQUESTION	$ZIGLIB/std/os/windows/user32.zig	/^pub const MB_ICONQUESTION = 0x00000020/;"	constant
MB_ICONSTOP	$ZIGLIB/std/os/windows/user32.zig	/^pub const MB_ICONSTOP = MB_ICONHAND/;"	constant
MB_ICONWARNING	$ZIGLIB/std/os/windows/user32.zig	/^pub const MB_ICONWARNING = MB_ICONEXCLAMATION/;"	constant
MB_MISCMASK	$ZIGLIB/std/os/windows/user32.zig	/^pub const MB_MISCMASK = 0x0000C000/;"	constant
MB_MODEMASK	$ZIGLIB/std/os/windows/user32.zig	/^pub const MB_MODEMASK = 0x00003000/;"	constant
MB_NOFOCUS	$ZIGLIB/std/os/windows/user32.zig	/^pub const MB_NOFOCUS = 0x00008000/;"	constant
MB_OK	$ZIGLIB/std/os/windows/user32.zig	/^pub const MB_OK = 0x00000000/;"	constant
MB_OKCANCEL	$ZIGLIB/std/os/windows/user32.zig	/^pub const MB_OKCANCEL = 0x00000001/;"	constant
MB_RETRYCANCEL	$ZIGLIB/std/os/windows/user32.zig	/^pub const MB_RETRYCANCEL = 0x00000005/;"	constant
MB_RIGHT	$ZIGLIB/std/os/windows/user32.zig	/^pub const MB_RIGHT = 0x00080000/;"	constant
MB_RTLREADING	$ZIGLIB/std/os/windows/user32.zig	/^pub const MB_RTLREADING = 0x00100000/;"	constant
MB_SETFOREGROUND	$ZIGLIB/std/os/windows/user32.zig	/^pub const MB_SETFOREGROUND = 0x00010000/;"	constant
MB_SYSTEMMODAL	$ZIGLIB/std/os/windows/user32.zig	/^pub const MB_SYSTEMMODAL = 0x00001000/;"	constant
MB_TASKMODAL	$ZIGLIB/std/os/windows/user32.zig	/^pub const MB_TASKMODAL = 0x00002000/;"	constant
MB_TOPMOST	$ZIGLIB/std/os/windows/user32.zig	/^pub const MB_TOPMOST = 0x00040000/;"	constant
MB_TYPEMASK	$ZIGLIB/std/os/windows/user32.zig	/^pub const MB_TYPEMASK = 0x0000000F/;"	constant
MB_USERICON	$ZIGLIB/std/os/windows/user32.zig	/^pub const MB_USERICON = 0x00000080/;"	constant
MB_YESNO	$ZIGLIB/std/os/windows/user32.zig	/^pub const MB_YESNO = 0x00000004/;"	constant
MB_YESNOCANCEL	$ZIGLIB/std/os/windows/user32.zig	/^pub const MB_YESNOCANCEL = 0x00000003/;"	constant
MCAST	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const MCAST = 2048/;"	constant
MCAST_BLOCK_SOURCE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const MCAST_BLOCK_SOURCE = 43/;"	constant
MCAST_JOIN_GROUP	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const MCAST_JOIN_GROUP = 41/;"	constant
MCAST_JOIN_SOURCE_GROUP	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const MCAST_JOIN_SOURCE_GROUP = 45/;"	constant
MCAST_LEAVE_GROUP	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const MCAST_LEAVE_GROUP = 42/;"	constant
MCAST_LEAVE_SOURCE_GROUP	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const MCAST_LEAVE_SOURCE_GROUP = 46/;"	constant
MCAST_UNBLOCK_SOURCE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const MCAST_UNBLOCK_SOURCE = 44/;"	constant
MCA_EXCEPTION	$ZIGLIB/std/os/windows/win32error.zig	/MCA_EXCEPTION = 784/;"	field
MCA_OCCURED	$ZIGLIB/std/os/windows/win32error.zig	/MCA_OCCURED = 651/;"	field
MCE_KILL	$ZIGLIB/std/os/linux.zig	/MCE_KILL = 33/;"	field
MCE_KILL_CLEAR	$ZIGLIB/std/os/linux.zig	/pub const MCE_KILL_CLEAR = 0/;"	constant
MCE_KILL_DEFAULT	$ZIGLIB/std/os/linux.zig	/pub const MCE_KILL_DEFAULT = 2/;"	constant
MCE_KILL_EARLY	$ZIGLIB/std/os/linux.zig	/pub const MCE_KILL_EARLY = 1/;"	constant
MCE_KILL_GET	$ZIGLIB/std/os/linux.zig	/MCE_KILL_GET = 34/;"	field
MCE_KILL_LATE	$ZIGLIB/std/os/linux.zig	/pub const MCE_KILL_LATE = 0/;"	constant
MCE_KILL_SET	$ZIGLIB/std/os/linux.zig	/pub const MCE_KILL_SET = 1/;"	constant
MCHP_PIC	$ZIGLIB/std/elf.zig	/MCHP_PIC = 204/;"	field
MCIWNDM_CAN_CONFIG	$ZIGLIB/std/os/windows/user32.zig	/^pub const MCIWNDM_CAN_CONFIG = 0x0495/;"	constant
MCIWNDM_CAN_EJECT	$ZIGLIB/std/os/windows/user32.zig	/^pub const MCIWNDM_CAN_EJECT = 0x0494/;"	constant
MCIWNDM_CAN_PLAY	$ZIGLIB/std/os/windows/user32.zig	/^pub const MCIWNDM_CAN_PLAY = 0x0490/;"	constant
MCIWNDM_CAN_RECORD	$ZIGLIB/std/os/windows/user32.zig	/^pub const MCIWNDM_CAN_RECORD = 0x0492/;"	constant
MCIWNDM_CAN_SAVE	$ZIGLIB/std/os/windows/user32.zig	/^pub const MCIWNDM_CAN_SAVE = 0x0493/;"	constant
MCIWNDM_CAN_WINDOW	$ZIGLIB/std/os/windows/user32.zig	/^pub const MCIWNDM_CAN_WINDOW = 0x0491/;"	constant
MCIWNDM_GETDEVICEA	$ZIGLIB/std/os/windows/user32.zig	/^pub const MCIWNDM_GETDEVICEA = 0x047D/;"	constant
MCIWNDM_GETDEVICEW	$ZIGLIB/std/os/windows/user32.zig	/^pub const MCIWNDM_GETDEVICEW = 0x04E1/;"	constant
MCIWNDM_GETERRORA	$ZIGLIB/std/os/windows/user32.zig	/^pub const MCIWNDM_GETERRORA = 0x0480/;"	constant
MCIWNDM_GETERRORW	$ZIGLIB/std/os/windows/user32.zig	/^pub const MCIWNDM_GETERRORW = 0x04E4/;"	constant
MCIWNDM_GETFILENAMEA	$ZIGLIB/std/os/windows/user32.zig	/^pub const MCIWNDM_GETFILENAMEA = 0x047C/;"	constant
MCIWNDM_GETFILENAMEW	$ZIGLIB/std/os/windows/user32.zig	/^pub const MCIWNDM_GETFILENAMEW = 0x04E0/;"	constant
MCIWNDM_GETINACTIVETIMER	$ZIGLIB/std/os/windows/user32.zig	/^pub const MCIWNDM_GETINACTIVETIMER = 0x0485/;"	constant
MCIWNDM_GETPALETTE	$ZIGLIB/std/os/windows/user32.zig	/^pub const MCIWNDM_GETPALETTE = 0x047E/;"	constant
MCIWNDM_GETTIMEFORMATA	$ZIGLIB/std/os/windows/user32.zig	/^pub const MCIWNDM_GETTIMEFORMATA = 0x0478/;"	constant
MCIWNDM_GETTIMEFORMATW	$ZIGLIB/std/os/windows/user32.zig	/^pub const MCIWNDM_GETTIMEFORMATW = 0x04DC/;"	constant
MCIWNDM_GETZOOM	$ZIGLIB/std/os/windows/user32.zig	/^pub const MCIWNDM_GETZOOM = 0x046D/;"	constant
MCIWNDM_GET_DEST	$ZIGLIB/std/os/windows/user32.zig	/^pub const MCIWNDM_GET_DEST = 0x048E/;"	constant
MCIWNDM_GET_SOURCE	$ZIGLIB/std/os/windows/user32.zig	/^pub const MCIWNDM_GET_SOURCE = 0x048C/;"	constant
MCIWNDM_NOTIFYERROR	$ZIGLIB/std/os/windows/user32.zig	/^pub const MCIWNDM_NOTIFYERROR = 0x04CD/;"	constant
MCIWNDM_NOTIFYMEDIA	$ZIGLIB/std/os/windows/user32.zig	/^pub const MCIWNDM_NOTIFYMEDIA = 0x04CB/;"	constant
MCIWNDM_NOTIFYMODE	$ZIGLIB/std/os/windows/user32.zig	/^pub const MCIWNDM_NOTIFYMODE = 0x04C8/;"	constant
MCIWNDM_PALETTEKICK	$ZIGLIB/std/os/windows/user32.zig	/^pub const MCIWNDM_PALETTEKICK = 0x0496/;"	constant
MCIWNDM_PLAYTO	$ZIGLIB/std/os/windows/user32.zig	/^pub const MCIWNDM_PLAYTO = 0x047B/;"	constant
MCIWNDM_PUT_DEST	$ZIGLIB/std/os/windows/user32.zig	/^pub const MCIWNDM_PUT_DEST = 0x048F/;"	constant
MCIWNDM_PUT_SOURCE	$ZIGLIB/std/os/windows/user32.zig	/^pub const MCIWNDM_PUT_SOURCE = 0x048D/;"	constant
MCIWNDM_REALIZE	$ZIGLIB/std/os/windows/user32.zig	/^pub const MCIWNDM_REALIZE = 0x0476/;"	constant
MCIWNDM_SETINACTIVETIMER	$ZIGLIB/std/os/windows/user32.zig	/^pub const MCIWNDM_SETINACTIVETIMER = 0x0483/;"	constant
MCIWNDM_SETPALETTE	$ZIGLIB/std/os/windows/user32.zig	/^pub const MCIWNDM_SETPALETTE = 0x047F/;"	constant
MCIWNDM_SETTIMEFORMATA	$ZIGLIB/std/os/windows/user32.zig	/^pub const MCIWNDM_SETTIMEFORMATA = 0x0477/;"	constant
MCIWNDM_SETTIMEFORMATW	$ZIGLIB/std/os/windows/user32.zig	/^pub const MCIWNDM_SETTIMEFORMATW = 0x04DB/;"	constant
MCIWNDM_VALIDATEMEDIA	$ZIGLIB/std/os/windows/user32.zig	/^pub const MCIWNDM_VALIDATEMEDIA = 0x0479/;"	constant
MCST_ELBRUS	$ZIGLIB/std/elf.zig	/MCST_ELBRUS = 175/;"	field
MD5SIG	$ZIGLIB/std/os/linux.zig	/pub const MD5SIG = 14/;"	constant
MD5SIG_EXT	$ZIGLIB/std/os/linux.zig	/pub const MD5SIG_EXT = 32/;"	constant
MDMBUF	$ZIGLIB/std/c/openbsd.zig	/^pub const MDMBUF: tcflag_t = 0x00100000/;"	constant
ME16	$ZIGLIB/std/elf.zig	/ME16 = 59/;"	field
MEAS	$ZIGLIB/std/c/freebsd.zig	/pub const MEAS = 19/;"	constant
MEDIA_CHANGED	$ZIGLIB/std/os/windows/win32error.zig	/MEDIA_CHANGED = 1110/;"	field
MEDIA_CHECK	$ZIGLIB/std/os/windows/win32error.zig	/MEDIA_CHECK = 679/;"	field
MEDIA_WRITE_PROTECTED	$ZIGLIB/std/os/windows/ntstatus.zig	/MEDIA_WRITE_PROTECTED = 0xC00000A2/;"	field
MEDIUMTYPE	$ZIGLIB/std/os/linux/errno/sparc.zig	/MEDIUMTYPE = 126/;"	field
MEMBERS_PRIMARY_GROUP	$ZIGLIB/std/os/windows/win32error.zig	/MEMBERS_PRIMARY_GROUP = 1374/;"	field
MEMBER_IN_ALIAS	$ZIGLIB/std/os/windows/win32error.zig	/MEMBER_IN_ALIAS = 1378/;"	field
MEMBER_IN_GROUP	$ZIGLIB/std/os/windows/win32error.zig	/MEMBER_IN_GROUP = 1320/;"	field
MEMBER_NOT_IN_ALIAS	$ZIGLIB/std/os/windows/win32error.zig	/MEMBER_NOT_IN_ALIAS = 1377/;"	field
MEMBER_NOT_IN_GROUP	$ZIGLIB/std/os/windows/win32error.zig	/MEMBER_NOT_IN_GROUP = 1321/;"	field
MEMBER_OF_ENUM	$ZIGLIB/std/coff.zig	/MEMBER_OF_ENUM = 16/;"	field
MEMBER_OF_STRUCT	$ZIGLIB/std/coff.zig	/MEMBER_OF_STRUCT = 8/;"	field
MEMBER_OF_UNION	$ZIGLIB/std/coff.zig	/MEMBER_OF_UNION = 11/;"	field
MEMINFO	$ZIGLIB/std/os/linux.zig	/pub const MEMINFO = 57/;"	constant
MEMLOCK	$ZIGLIB/std/os/linux/sparc64.zig	/MEMLOCK/;"	field
MEMORY	$ZIGLIB/std/c/solaris.zig	/MEMORY = 6/;"	field
MEMORY_BASIC_INFORMATION	$ZIGLIB/std/os/windows.zig	/^pub const MEMORY_BASIC_INFORMATION = extern struct {$/;"	struct
MEMORY_DATA_MOVED	$ZIGLIB/std/c/darwin.zig	/MEMORY_DATA_MOVED = 24/;"	field
MEMORY_ERROR	$ZIGLIB/std/c/darwin.zig	/MEMORY_ERROR = 10/;"	field
MEMORY_FAILURE	$ZIGLIB/std/c/darwin.zig	/MEMORY_FAILURE = 9/;"	field
MEMORY_HARDWARE	$ZIGLIB/std/os/windows/win32error.zig	/MEMORY_HARDWARE = 779/;"	field
MEMORY_NOT_ALLOCATED	$ZIGLIB/std/os/windows/ntstatus.zig	/MEMORY_NOT_ALLOCATED = 0xC00000A0/;"	field
MEMORY_PRESENT	$ZIGLIB/std/c/darwin.zig	/MEMORY_PRESENT = 23/;"	field
MEMORY_RESTART_COPY	$ZIGLIB/std/c/darwin.zig	/MEMORY_RESTART_COPY = 25/;"	field
MEM_16BIT	$ZIGLIB/std/coff.zig	/MEM_16BIT: u1 = 0/;"	field
MEM_COALESCE_PLACEHOLDERS	$ZIGLIB/std/os/windows.zig	/^pub const MEM_COALESCE_PLACEHOLDERS = 0x1/;"	constant
MEM_COMMIT	$ZIGLIB/std/os/windows.zig	/^pub const MEM_COMMIT = 0x1000/;"	constant
MEM_DECOMMIT	$ZIGLIB/std/os/windows.zig	/^pub const MEM_DECOMMIT = 0x4000/;"	constant
MEM_DISCARDABLE	$ZIGLIB/std/coff.zig	/MEM_DISCARDABLE: u1 = 0/;"	field
MEM_EXECUTE	$ZIGLIB/std/coff.zig	/MEM_EXECUTE: u1 = 0/;"	field
MEM_FREE	$ZIGLIB/std/os/windows.zig	/^pub const MEM_FREE = 0x10000/;"	constant
MEM_IMAGE	$ZIGLIB/std/os/windows.zig	/^pub const MEM_IMAGE = 0x1000000/;"	constant
MEM_LARGE_PAGES	$ZIGLIB/std/os/windows.zig	/^pub const MEM_LARGE_PAGES = 0x20000000/;"	constant
MEM_LOCKED	$ZIGLIB/std/coff.zig	/MEM_LOCKED: u1 = 0/;"	field
MEM_MAPPED	$ZIGLIB/std/os/windows.zig	/^pub const MEM_MAPPED = 0x40000/;"	constant
MEM_NOT_CACHED	$ZIGLIB/std/coff.zig	/MEM_NOT_CACHED: u1 = 0/;"	field
MEM_NOT_PAGED	$ZIGLIB/std/coff.zig	/MEM_NOT_PAGED: u1 = 0/;"	field
MEM_PHYSICAL	$ZIGLIB/std/os/windows.zig	/^pub const MEM_PHYSICAL = 0x400000/;"	constant
MEM_PRELOAD	$ZIGLIB/std/coff.zig	/MEM_PRELOAD: u1 = 0/;"	field
MEM_PRIVATE	$ZIGLIB/std/os/windows.zig	/^pub const MEM_PRIVATE = 0x20000/;"	constant
MEM_PURGEABLE	$ZIGLIB/std/coff.zig	/MEM_PURGEABLE: u1 = 0/;"	field
MEM_READ	$ZIGLIB/std/coff.zig	/MEM_READ: u1 = 0/;"	field
MEM_RELEASE	$ZIGLIB/std/os/windows.zig	/^pub const MEM_RELEASE = 0x8000/;"	constant
MEM_RESERVE	$ZIGLIB/std/os/windows.zig	/^pub const MEM_RESERVE = 0x2000/;"	constant
MEM_RESERVE_PLACEHOLDERS	$ZIGLIB/std/os/windows.zig	/^pub const MEM_RESERVE_PLACEHOLDERS = 0x2/;"	constant
MEM_RESET	$ZIGLIB/std/os/windows.zig	/^pub const MEM_RESET = 0x80000/;"	constant
MEM_RESET_UNDO	$ZIGLIB/std/os/windows.zig	/^pub const MEM_RESET_UNDO = 0x1000000/;"	constant
MEM_SHARED	$ZIGLIB/std/coff.zig	/MEM_SHARED: u1 = 0/;"	field
MEM_TOP_DOWN	$ZIGLIB/std/os/windows.zig	/^pub const MEM_TOP_DOWN = 0x100000/;"	constant
MEM_WRITE	$ZIGLIB/std/coff.zig	/MEM_WRITE: u1 = 0/;"	field
MEM_WRITE_WATCH	$ZIGLIB/std/os/windows.zig	/^pub const MEM_WRITE_WATCH = 0x200000/;"	constant
MENU_ITEM_NOT_FOUND	$ZIGLIB/std/os/windows/win32error.zig	/MENU_ITEM_NOT_FOUND = 1456/;"	field
MERGEABLE	$ZIGLIB/std/os/linux.zig	/pub const MERGEABLE = 12/;"	constant
MESSAGE_LOST	$ZIGLIB/std/os/windows/ntstatus.zig	/MESSAGE_LOST = 0xC0000701/;"	field
MESSAGE_NOT_FOUND	$ZIGLIB/std/os/windows/ntstatus.zig	/MESSAGE_NOT_FOUND = 0xC0000109/;"	field
MESSAGE_RETRIEVED	$ZIGLIB/std/os/windows/ntstatus.zig	/MESSAGE_RETRIEVED = 0x4000002E/;"	field
MESSAGE_SYNC_ONLY	$ZIGLIB/std/os/windows/win32error.zig	/MESSAGE_SYNC_ONLY = 1159/;"	field
METADATA	$ZIGLIB/std/os/darwin/cssm.zig	/METADATA = DB_RECORDTYPE_APP_DEFINED_START + 0x8000/;"	field
METAFILE_NOT_SUPPORTED	$ZIGLIB/std/os/windows/win32error.zig	/METAFILE_NOT_SUPPORTED = 2003/;"	field
METAG	$ZIGLIB/std/elf.zig	/METAG = 174/;"	field
META_EXPANSION_TOO_LONG	$ZIGLIB/std/os/windows/win32error.zig	/META_EXPANSION_TOO_LONG = 208/;"	field
METHOD_BUFFERED	$ZIGLIB/std/os/windows.zig	/METHOD_BUFFERED = 0/;"	field
METHOD_IN_DIRECT	$ZIGLIB/std/os/windows.zig	/METHOD_IN_DIRECT = 1/;"	field
METHOD_NEITHER	$ZIGLIB/std/os/windows.zig	/METHOD_NEITHER = 3/;"	field
METHOD_OUT_DIRECT	$ZIGLIB/std/os/windows.zig	/METHOD_OUT_DIRECT = 2/;"	field
MFCTypeServerIndex	$ZIGLIB/std/pdb.zig	/MFCTypeServerIndex: u32/;"	field
MFD_MAX_NAME_LEN	$ZIGLIB/std/os.zig	/^pub const MFD_MAX_NAME_LEN = NAME_MAX - MFD_NAME_PREFIX.len/;"	constant
MFD_NAME_PREFIX	$ZIGLIB/std/os.zig	/^pub const MFD_NAME_PREFIX = "memfd:"/;"	constant
MFILE	$ZIGLIB/std/os/wasi.zig	/MFILE = 33/;"	field
MFT_TOO_FRAGMENTED	$ZIGLIB/std/os/windows/ntstatus.zig	/MFT_TOO_FRAGMENTED = 0xC0000304/;"	field
MGC_MSK	$ZIGLIB/std/os/linux.zig	/pub const MGC_MSK = 0xffff0000/;"	constant
MGC_VAL	$ZIGLIB/std/os/linux.zig	/pub const MGC_VAL = 0xc0ed0000/;"	constant
MGF1	$ZIGLIB/std/crypto/Certificate.zig	/fn MGF1(out: []u8, seed: []const u8, len: usize, comptime Hash: type, allocator: std.mem.Allocator) ![]u8 {$/;"	function
MHRP	$ZIGLIB/std/c/freebsd.zig	/pub const MHRP = 48/;"	constant
MH_ALLMODSBOUND	$ZIGLIB/std/macho.zig	/^pub const MH_ALLMODSBOUND = 0x1000/;"	constant
MH_ALLOW_STACK_EXECUTION	$ZIGLIB/std/macho.zig	/^pub const MH_ALLOW_STACK_EXECUTION = 0x20000/;"	constant
MH_APP_EXTENSION_SAFE	$ZIGLIB/std/macho.zig	/^pub const MH_APP_EXTENSION_SAFE = 0x02000000/;"	constant
MH_BINDATLOAD	$ZIGLIB/std/macho.zig	/^pub const MH_BINDATLOAD = 0x8/;"	constant
MH_BINDS_TO_WEAK	$ZIGLIB/std/macho.zig	/^pub const MH_BINDS_TO_WEAK = 0x10000/;"	constant
MH_BUNDLE	$ZIGLIB/std/macho.zig	/^pub const MH_BUNDLE = 0x8/;"	constant
MH_CANONICAL	$ZIGLIB/std/macho.zig	/^pub const MH_CANONICAL = 0x4000/;"	constant
MH_CIGAM	$ZIGLIB/std/macho.zig	/^pub const MH_CIGAM = 0xcefaedfe/;"	constant
MH_CIGAM_64	$ZIGLIB/std/macho.zig	/^pub const MH_CIGAM_64 = 0xcffaedfe/;"	constant
MH_CORE	$ZIGLIB/std/macho.zig	/^pub const MH_CORE = 0x4/;"	constant
MH_DEAD_STRIPPABLE_DYLIB	$ZIGLIB/std/macho.zig	/^pub const MH_DEAD_STRIPPABLE_DYLIB = 0x400000/;"	constant
MH_DSYM	$ZIGLIB/std/macho.zig	/^pub const MH_DSYM = 0xa/;"	constant
MH_DYLDLINK	$ZIGLIB/std/macho.zig	/^pub const MH_DYLDLINK = 0x4/;"	constant
MH_DYLIB	$ZIGLIB/std/macho.zig	/^pub const MH_DYLIB = 0x6/;"	constant
MH_DYLIB_STUB	$ZIGLIB/std/macho.zig	/^pub const MH_DYLIB_STUB = 0x9/;"	constant
MH_DYLINKER	$ZIGLIB/std/macho.zig	/^pub const MH_DYLINKER = 0x7/;"	constant
MH_EXECUTE	$ZIGLIB/std/macho.zig	/^pub const MH_EXECUTE = 0x2/;"	constant
MH_FORCE_FLAT	$ZIGLIB/std/macho.zig	/^pub const MH_FORCE_FLAT = 0x100/;"	constant
MH_FVMLIB	$ZIGLIB/std/macho.zig	/^pub const MH_FVMLIB = 0x3/;"	constant
MH_HAS_TLV_DESCRIPTORS	$ZIGLIB/std/macho.zig	/^pub const MH_HAS_TLV_DESCRIPTORS = 0x800000/;"	constant
MH_INCRLINK	$ZIGLIB/std/macho.zig	/^pub const MH_INCRLINK = 0x2/;"	constant
MH_KEXT_BUNDLE	$ZIGLIB/std/macho.zig	/^pub const MH_KEXT_BUNDLE = 0xb/;"	constant
MH_LAZY_INIT	$ZIGLIB/std/macho.zig	/^pub const MH_LAZY_INIT = 0x40/;"	constant
MH_MAGIC	$ZIGLIB/std/macho.zig	/^pub const MH_MAGIC = 0xfeedface/;"	constant
MH_MAGIC_64	$ZIGLIB/std/macho.zig	/^pub const MH_MAGIC_64 = 0xfeedfacf/;"	constant
MH_NLIST_OUTOFSYNC_WITH_DYLDINFO	$ZIGLIB/std/macho.zig	/^pub const MH_NLIST_OUTOFSYNC_WITH_DYLDINFO = 0x04000000/;"	constant
MH_NOFIXPREBINDING	$ZIGLIB/std/macho.zig	/^pub const MH_NOFIXPREBINDING = 0x400/;"	constant
MH_NOMULTIDEFS	$ZIGLIB/std/macho.zig	/^pub const MH_NOMULTIDEFS = 0x200/;"	constant
MH_NOUNDEFS	$ZIGLIB/std/macho.zig	/^pub const MH_NOUNDEFS = 0x1/;"	constant
MH_NO_HEAP_EXECUTION	$ZIGLIB/std/macho.zig	/^pub const MH_NO_HEAP_EXECUTION = 0x1000000/;"	constant
MH_NO_REEXPORTED_DYLIBS	$ZIGLIB/std/macho.zig	/^pub const MH_NO_REEXPORTED_DYLIBS = 0x100000/;"	constant
MH_OBJECT	$ZIGLIB/std/macho.zig	/^pub const MH_OBJECT = 0x1/;"	constant
MH_PIE	$ZIGLIB/std/macho.zig	/^pub const MH_PIE = 0x200000/;"	constant
MH_PREBINDABLE	$ZIGLIB/std/macho.zig	/^pub const MH_PREBINDABLE = 0x800/;"	constant
MH_PREBOUND	$ZIGLIB/std/macho.zig	/^pub const MH_PREBOUND = 0x10/;"	constant
MH_PRELOAD	$ZIGLIB/std/macho.zig	/^pub const MH_PRELOAD = 0x5/;"	constant
MH_ROOT_SAFE	$ZIGLIB/std/macho.zig	/^pub const MH_ROOT_SAFE = 0x40000/;"	constant
MH_SETUID_SAFE	$ZIGLIB/std/macho.zig	/^pub const MH_SETUID_SAFE = 0x80000/;"	constant
MH_SPLIT_SEGS	$ZIGLIB/std/macho.zig	/^pub const MH_SPLIT_SEGS = 0x20/;"	constant
MH_SUBSECTIONS_VIA_SYMBOLS	$ZIGLIB/std/macho.zig	/^pub const MH_SUBSECTIONS_VIA_SYMBOLS = 0x2000/;"	constant
MH_TWOLEVEL	$ZIGLIB/std/macho.zig	/^pub const MH_TWOLEVEL = 0x80/;"	constant
MH_WEAK_DEFINES	$ZIGLIB/std/macho.zig	/^pub const MH_WEAK_DEFINES = 0x8000/;"	constant
MICP	$ZIGLIB/std/c/freebsd.zig	/pub const MICP = 95/;"	constant
MINHOPCOUNT	$ZIGLIB/std/os/linux.zig	/pub const MINHOPCOUNT = 73/;"	constant
MINIVERSION_INACCESSIBLE_FROM_SPECIFIED_TRANSACTION	$ZIGLIB/std/os/windows/ntstatus.zig	/MINIVERSION_INACCESSIBLE_FROM_SPECIFIED_TRANSACTION = 0xC0190024/;"	field
MINSIGSTKSZ	$ZIGLIB/std/os/linux.zig	/^pub const MINSIGSTKSZ = switch (native_arch) {$/;"	constant
MINTTL	$ZIGLIB/std/os/linux.zig	/pub const MINTTL = 21/;"	constant
MIN_MTU	$ZIGLIB/std/os/linux.zig	/MIN_MTU/;"	field
MIN_SIZE	$ZIGLIB/std/os/windows.zig	/const MIN_SIZE = @sizeOf(MOUNTMGR_MOUNT_POINT) + MAX_PATH/;"	constant
MIN_TYPE	$ZIGLIB/std/os/linux.zig	/pub const MIN_TYPE = 0x10/;"	constant
MIPS	$ZIGLIB/std/os/linux.zig	/MIPS = toAudit(.mips)/;"	field
MIPS16	$ZIGLIB/std/coff.zig	/MIPS16 = 0x266/;"	field
MIPS64	$ZIGLIB/std/os/linux.zig	/MIPS64 = toAudit(.mips64)/;"	field
MIPSEL	$ZIGLIB/std/os/linux.zig	/MIPSEL = toAudit(.mips) | LE/;"	field
MIPSEL64	$ZIGLIB/std/os/linux.zig	/MIPSEL64 = toAudit(.mips64) | LE/;"	field
MIPSFPU	$ZIGLIB/std/coff.zig	/MIPSFPU = 0x366/;"	field
MIPSFPU16	$ZIGLIB/std/coff.zig	/MIPSFPU16 = 0x466/;"	field
MIPS_JMPADDR	$ZIGLIB/std/coff.zig	/MIPS_JMPADDR = 5/;"	field
MIPS_JMPADDR16	$ZIGLIB/std/coff.zig	/MIPS_JMPADDR16 = 9/;"	field
MIPS_RS3_LE	$ZIGLIB/std/elf.zig	/MIPS_RS3_LE = 10/;"	field
MIPS_X	$ZIGLIB/std/elf.zig	/MIPS_X = 51/;"	field
MIPS_abstract_name	$ZIGLIB/std/dwarf/AT.zig	/^pub const MIPS_abstract_name = 0x2009/;"	constant
MIPS_advance_loc8	$ZIGLIB/std/dwarf.zig	/pub const MIPS_advance_loc8 = 0x1d/;"	constant
MIPS_clone_origin	$ZIGLIB/std/dwarf/AT.zig	/^pub const MIPS_clone_origin = 0x200a/;"	constant
MIPS_epilog_begin	$ZIGLIB/std/dwarf/AT.zig	/^pub const MIPS_epilog_begin = 0x2004/;"	constant
MIPS_fde	$ZIGLIB/std/dwarf/AT.zig	/^pub const MIPS_fde = 0x2001/;"	constant
MIPS_has_inlines	$ZIGLIB/std/dwarf/AT.zig	/^pub const MIPS_has_inlines = 0x200b/;"	constant
MIPS_linkage_name	$ZIGLIB/std/dwarf/AT.zig	/^pub const MIPS_linkage_name = 0x2007/;"	constant
MIPS_loop	$ZIGLIB/std/dwarf/TAG.zig	/^pub const MIPS_loop = 0x4081/;"	constant
MIPS_loop_begin	$ZIGLIB/std/dwarf/AT.zig	/^pub const MIPS_loop_begin = 0x2002/;"	constant
MIPS_loop_unroll_factor	$ZIGLIB/std/dwarf/AT.zig	/^pub const MIPS_loop_unroll_factor = 0x2005/;"	constant
MIPS_software_pipeline_depth	$ZIGLIB/std/dwarf/AT.zig	/^pub const MIPS_software_pipeline_depth = 0x2006/;"	constant
MIPS_stride	$ZIGLIB/std/dwarf/AT.zig	/^pub const MIPS_stride = 0x2008/;"	constant
MIPS_tail_loop_begin	$ZIGLIB/std/dwarf/AT.zig	/^pub const MIPS_tail_loop_begin = 0x2003/;"	constant
MISC	$ZIGLIB/std/os/linux/bpf.zig	/^pub const MISC = 0x07/;"	constant
MISS	$ZIGLIB/std/os/linux.zig	/MISS/;"	field
MISSING_KC	$ZIGLIB/std/c/darwin.zig	/MISSING_KC = 54/;"	field
MISSING_SYSTEMFILE	$ZIGLIB/std/os/windows/win32error.zig	/MISSING_SYSTEMFILE = 573/;"	field
MKDIRAT	$ZIGLIB/std/os/linux.zig	/MKDIRAT/;"	field
MKNOD	$ZIGLIB/std/os/linux.zig	/pub const MKNOD = 27/;"	constant
MLINK	$ZIGLIB/std/os/wasi.zig	/MLINK = 34/;"	field
MMAP2_UNIT	$ZIGLIB/std/os/linux/x86.zig	/^pub const MMAP2_UNIT = 4096/;"	constant
MMAP_OFFSETS	$ZIGLIB/std/os/linux.zig	/pub const MMAP_OFFSETS = 1/;"	constant
MMDSP_PLUS	$ZIGLIB/std/elf.zig	/MMDSP_PLUS = 160/;"	field
MMIX	$ZIGLIB/std/elf.zig	/MMIX = 80/;"	field
MMRESULT	$ZIGLIB/std/os/windows/winmm.zig	/^pub const MMRESULT = UINT/;"	constant
MMSYSERR_ALLOCATED	$ZIGLIB/std/os/windows/winmm.zig	/^pub const MMSYSERR_ALLOCATED = MMSYSERR_BASE + 4/;"	constant
MMSYSERR_BADDB	$ZIGLIB/std/os/windows/winmm.zig	/^pub const MMSYSERR_BADDB = MMSYSERR_BASE + 14/;"	constant
MMSYSERR_BADDEVICEID	$ZIGLIB/std/os/windows/winmm.zig	/^pub const MMSYSERR_BADDEVICEID = MMSYSERR_BASE + 2/;"	constant
MMSYSERR_BADERRNUM	$ZIGLIB/std/os/windows/winmm.zig	/^pub const MMSYSERR_BADERRNUM = MMSYSERR_BASE + 9/;"	constant
MMSYSERR_BASE	$ZIGLIB/std/os/windows/winmm.zig	/^pub const MMSYSERR_BASE = 0/;"	constant
MMSYSERR_DELETEERROR	$ZIGLIB/std/os/windows/winmm.zig	/^pub const MMSYSERR_DELETEERROR = MMSYSERR_BASE + 18/;"	constant
MMSYSERR_ERROR	$ZIGLIB/std/os/windows/winmm.zig	/^pub const MMSYSERR_ERROR = MMSYSERR_BASE + 1/;"	constant
MMSYSERR_HANDLEBUSY	$ZIGLIB/std/os/windows/winmm.zig	/^pub const MMSYSERR_HANDLEBUSY = MMSYSERR_BASE + 12/;"	constant
MMSYSERR_INVALFLAG	$ZIGLIB/std/os/windows/winmm.zig	/^pub const MMSYSERR_INVALFLAG = MMSYSERR_BASE + 10/;"	constant
MMSYSERR_INVALHANDLE	$ZIGLIB/std/os/windows/winmm.zig	/^pub const MMSYSERR_INVALHANDLE = MMSYSERR_BASE + 5/;"	constant
MMSYSERR_INVALIDALIAS	$ZIGLIB/std/os/windows/winmm.zig	/^pub const MMSYSERR_INVALIDALIAS = MMSYSERR_BASE + 13/;"	constant
MMSYSERR_INVALPARAM	$ZIGLIB/std/os/windows/winmm.zig	/^pub const MMSYSERR_INVALPARAM = MMSYSERR_BASE + 11/;"	constant
MMSYSERR_KEYNOTFOUND	$ZIGLIB/std/os/windows/winmm.zig	/^pub const MMSYSERR_KEYNOTFOUND = MMSYSERR_BASE + 15/;"	constant
MMSYSERR_LASTERROR	$ZIGLIB/std/os/windows/winmm.zig	/^pub const MMSYSERR_LASTERROR = MMSYSERR_BASE + 21/;"	constant
MMSYSERR_MOREDATA	$ZIGLIB/std/os/windows/winmm.zig	/^pub const MMSYSERR_MOREDATA = MMSYSERR_BASE + 21/;"	constant
MMSYSERR_NODRIVER	$ZIGLIB/std/os/windows/winmm.zig	/^pub const MMSYSERR_NODRIVER = MMSYSERR_BASE + 6/;"	constant
MMSYSERR_NODRIVERCB	$ZIGLIB/std/os/windows/winmm.zig	/^pub const MMSYSERR_NODRIVERCB = MMSYSERR_BASE + 20/;"	constant
MMSYSERR_NOMEM	$ZIGLIB/std/os/windows/winmm.zig	/^pub const MMSYSERR_NOMEM = MMSYSERR_BASE + 7/;"	constant
MMSYSERR_NOTENABLED	$ZIGLIB/std/os/windows/winmm.zig	/^pub const MMSYSERR_NOTENABLED = MMSYSERR_BASE + 3/;"	constant
MMSYSERR_NOTSUPPORTED	$ZIGLIB/std/os/windows/winmm.zig	/^pub const MMSYSERR_NOTSUPPORTED = MMSYSERR_BASE + 8/;"	constant
MMSYSERR_READERROR	$ZIGLIB/std/os/windows/winmm.zig	/^pub const MMSYSERR_READERROR = MMSYSERR_BASE + 16/;"	constant
MMSYSERR_VALNOTFOUND	$ZIGLIB/std/os/windows/winmm.zig	/^pub const MMSYSERR_VALNOTFOUND = MMSYSERR_BASE + 19/;"	constant
MMSYSERR_WRITEERROR	$ZIGLIB/std/os/windows/winmm.zig	/^pub const MMSYSERR_WRITEERROR = MMSYSERR_BASE + 17/;"	constant
MMTIME	$ZIGLIB/std/os/windows/winmm.zig	/^pub const MMTIME = extern struct {$/;"	struct
MMX_INSTRUCTIONS_AVAILABLE	$ZIGLIB/std/os/windows.zig	/MMX_INSTRUCTIONS_AVAILABLE = 3/;"	field
MMapError	$ZIGLIB/std/os.zig	/^pub const MMapError = error{$/;"	constant
MN10200	$ZIGLIB/std/elf.zig	/MN10200 = 90/;"	field
MN10300	$ZIGLIB/std/elf.zig	/MN10300 = 89/;"	field
MOBILE	$ZIGLIB/std/c/openbsd.zig	/pub const MOBILE = 55/;"	constant
MODE	$ZIGLIB/std/os/linux/seccomp.zig	/^pub const MODE = struct {$/;"	struct
MODEMASK	$ZIGLIB/std/c/freebsd.zig	/pub const MODEMASK = 0x3/;"	constant
MODIFIED	$ZIGLIB/std/c/solaris.zig	/pub const MODIFIED = 0x00000002/;"	constant
MODIFY	$ZIGLIB/std/os/linux.zig	/pub const MODIFY = 0x00000002/;"	constant
MODIFY_ATTRIBUTES	$ZIGLIB/std/os/linux.zig	/pub const MODIFY_ATTRIBUTES = 1074275339/;"	constant
MODULEENTRY32	$ZIGLIB/std/os/windows.zig	/^pub const MODULEENTRY32 = extern struct {$/;"	struct
MODULEINFO	$ZIGLIB/std/os/windows.zig	/^pub const MODULEINFO = extern struct {$/;"	struct
MOD_NOT_FOUND	$ZIGLIB/std/os/windows/win32error.zig	/MOD_NOT_FOUND = 126/;"	field
MOHAWK	$ZIGLIB/std/os/windows/lang.zig	/^pub const MOHAWK = 0x7c/;"	constant
MOHAWK_MOHAWK	$ZIGLIB/std/os/windows/sublang.zig	/^pub const MOHAWK_MOHAWK = 0x01/;"	constant
MONGOLIAN	$ZIGLIB/std/os/windows/lang.zig	/^pub const MONGOLIAN = 0x50/;"	constant
MONGOLIAN_CYRILLIC_MONGOLIA	$ZIGLIB/std/os/windows/sublang.zig	/^pub const MONGOLIAN_CYRILLIC_MONGOLIA = 0x01/;"	constant
MONGOLIAN_PRC	$ZIGLIB/std/os/windows/sublang.zig	/^pub const MONGOLIAN_PRC = 0x02/;"	constant
MONITORX_INSTRUCTION_AVAILABLE	$ZIGLIB/std/os/windows.zig	/MONITORX_INSTRUCTION_AVAILABLE = 35/;"	field
MONITOR_INVALID_DESCRIPTOR_CHECKSUM	$ZIGLIB/std/os/windows/ntstatus.zig	/MONITOR_INVALID_DESCRIPTOR_CHECKSUM = 0xC01D0003/;"	field
MONITOR_INVALID_DETAILED_TIMING_BLOCK	$ZIGLIB/std/os/windows/ntstatus.zig	/MONITOR_INVALID_DETAILED_TIMING_BLOCK = 0xC01D0009/;"	field
MONITOR_INVALID_MANUFACTURE_DATE	$ZIGLIB/std/os/windows/ntstatus.zig	/MONITOR_INVALID_MANUFACTURE_DATE = 0xC01D000A/;"	field
MONITOR_INVALID_SERIAL_NUMBER_MONDSC_BLOCK	$ZIGLIB/std/os/windows/ntstatus.zig	/MONITOR_INVALID_SERIAL_NUMBER_MONDSC_BLOCK = 0xC01D0006/;"	field
MONITOR_INVALID_STANDARD_TIMING_BLOCK	$ZIGLIB/std/os/windows/ntstatus.zig	/MONITOR_INVALID_STANDARD_TIMING_BLOCK = 0xC01D0004/;"	field
MONITOR_INVALID_USER_FRIENDLY_MONDSC_BLOCK	$ZIGLIB/std/os/windows/ntstatus.zig	/MONITOR_INVALID_USER_FRIENDLY_MONDSC_BLOCK = 0xC01D0007/;"	field
MONITOR_NO_DESCRIPTOR	$ZIGLIB/std/os/windows/ntstatus.zig	/MONITOR_NO_DESCRIPTOR = 0xC01D0001/;"	field
MONITOR_NO_MORE_DESCRIPTOR_DATA	$ZIGLIB/std/os/windows/ntstatus.zig	/MONITOR_NO_MORE_DESCRIPTOR_DATA = 0xC01D0008/;"	field
MONITOR_UNKNOWN_DESCRIPTOR_FORMAT	$ZIGLIB/std/os/windows/ntstatus.zig	/MONITOR_UNKNOWN_DESCRIPTOR_FORMAT = 0xC01D0002/;"	field
MONITOR_WMI_DATABLOCK_REGISTRATION_FAILED	$ZIGLIB/std/os/windows/ntstatus.zig	/MONITOR_WMI_DATABLOCK_REGISTRATION_FAILED = 0xC01D0005/;"	field
MONOTONIC	$ZIGLIB/std/os/wasi.zig	/pub const MONOTONIC: clockid_t = 1/;"	constant
MONOTONIC_COARSE	$ZIGLIB/std/os/linux.zig	/pub const MONOTONIC_COARSE = 6/;"	constant
MONOTONIC_FAST	$ZIGLIB/std/c/freebsd.zig	/pub const MONOTONIC_FAST = 12/;"	constant
MONOTONIC_PRECISE	$ZIGLIB/std/c/freebsd.zig	/pub const MONOTONIC_PRECISE = 11/;"	constant
MONOTONIC_RAW	$ZIGLIB/std/os/linux.zig	/pub const MONOTONIC_RAW = 4/;"	constant
MONOTONIC_RAW_APPROX	$ZIGLIB/std/c/darwin.zig	/pub const MONOTONIC_RAW_APPROX = 5/;"	constant
MORE	$ZIGLIB/std/os/linux.zig	/pub const MORE = 0x8000/;"	constant
MORE_DATA	$ZIGLIB/std/os/windows/win32error.zig	/MORE_DATA = 234/;"	field
MORE_ENTRIES	$ZIGLIB/std/os/windows/ntstatus.zig	/MORE_ENTRIES = 0x00000105/;"	field
MORE_PROCESSING_REQUIRED	$ZIGLIB/std/os/windows/ntstatus.zig	/MORE_PROCESSING_REQUIRED = 0xC0000016/;"	field
MORE_WRITES	$ZIGLIB/std/os/windows/win32error.zig	/MORE_WRITES = 1120/;"	field
MOUNT	$ZIGLIB/std/os/plan9.zig	/MOUNT = 46/;"	field
MOUNTEDOVER	$ZIGLIB/std/c/solaris.zig	/pub const MOUNTEDOVER = 0x40000000/;"	constant
MOUNTMGR_MOUNT_POINT	$ZIGLIB/std/os/windows.zig	/^pub const MOUNTMGR_MOUNT_POINT = extern struct {$/;"	struct
MOUNTMGR_MOUNT_POINTS	$ZIGLIB/std/os/windows.zig	/^pub const MOUNTMGR_MOUNT_POINTS = extern struct {$/;"	struct
MOUNT_POINT_NOT_RESOLVED	$ZIGLIB/std/os/windows/win32error.zig	/MOUNT_POINT_NOT_RESOLVED = 649/;"	field
MOUNT_POINT_REPARSE_BUFFER	$ZIGLIB/std/os/windows.zig	/^pub const MOUNT_POINT_REPARSE_BUFFER = extern struct {$/;"	struct
MOVE	$ZIGLIB/std/os/linux.zig	/pub const MOVE = MOVED_FROM | MOVED_TO/;"	constant
MOVED_FROM	$ZIGLIB/std/os/linux.zig	/pub const MOVED_FROM = 0x00000040/;"	constant
MOVED_TO	$ZIGLIB/std/os/linux.zig	/pub const MOVED_TO = 0x00000080/;"	constant
MOVEFILE_COPY_ALLOWED	$ZIGLIB/std/os/windows.zig	/^pub const MOVEFILE_COPY_ALLOWED = 2/;"	constant
MOVEFILE_CREATE_HARDLINK	$ZIGLIB/std/os/windows.zig	/^pub const MOVEFILE_CREATE_HARDLINK = 16/;"	constant
MOVEFILE_DELAY_UNTIL_REBOOT	$ZIGLIB/std/os/windows.zig	/^pub const MOVEFILE_DELAY_UNTIL_REBOOT = 4/;"	constant
MOVEFILE_FAIL_IF_NOT_TRACKABLE	$ZIGLIB/std/os/windows.zig	/^pub const MOVEFILE_FAIL_IF_NOT_TRACKABLE = 32/;"	constant
MOVEFILE_REPLACE_EXISTING	$ZIGLIB/std/os/windows.zig	/^pub const MOVEFILE_REPLACE_EXISTING = 1/;"	constant
MOVEFILE_WRITE_THROUGH	$ZIGLIB/std/os/windows.zig	/^pub const MOVEFILE_WRITE_THROUGH = 8/;"	constant
MOVE_RECEIVE	$ZIGLIB/std/c/darwin.zig	/MOVE_RECEIVE = 16/;"	field
MOVE_SELF	$ZIGLIB/std/os/linux.zig	/pub const MOVE_SELF = 0x00000800/;"	constant
MOVE_SEND	$ZIGLIB/std/c/darwin.zig	/MOVE_SEND = 17/;"	field
MOVE_SEND_ONCE	$ZIGLIB/std/c/darwin.zig	/MOVE_SEND_ONCE = 18/;"	field
MPLS	$ZIGLIB/std/os/linux.zig	/pub const MPLS = 28/;"	constant
MPX_DISABLE_MANAGEMENT	$ZIGLIB/std/os/linux.zig	/MPX_DISABLE_MANAGEMENT = 44/;"	field
MPX_ENABLE_MANAGEMENT	$ZIGLIB/std/os/linux.zig	/MPX_ENABLE_MANAGEMENT = 43/;"	field
MP_PROCESSOR_MISMATCH	$ZIGLIB/std/os/windows/win32error.zig	/MP_PROCESSOR_MISMATCH = 725/;"	field
MProtectError	$ZIGLIB/std/os.zig	/^pub const MProtectError = error{$/;"	constant
MR_MID_NOT_FOUND	$ZIGLIB/std/os/windows/win32error.zig	/MR_MID_NOT_FOUND = 317/;"	field
MSFILTER	$ZIGLIB/std/os/linux.zig	/pub const MSFILTER = 41/;"	constant
MSGBUF	$ZIGLIB/std/c/openbsd.zig	/pub const MSGBUF = 48/;"	constant
MSGBUFSIZE	$ZIGLIB/std/c/openbsd.zig	/pub const MSGBUFSIZE = 38/;"	constant
MSGQUEUE	$ZIGLIB/std/os/linux/sparc64.zig	/MSGQUEUE/;"	field
MSGSIZE	$ZIGLIB/std/os/wasi.zig	/MSGSIZE = 35/;"	field
MSG_FTS_JUMP_QWORD	$ZIGLIB/std/os/windows/user32.zig	/^pub const MSG_FTS_JUMP_QWORD = 0x0423/;"	constant
MSG_FTS_JUMP_VA	$ZIGLIB/std/os/windows/user32.zig	/^pub const MSG_FTS_JUMP_VA = 0x0421/;"	constant
MSG_FTS_WHERE_IS_IT	$ZIGLIB/std/os/windows/user32.zig	/^pub const MSG_FTS_WHERE_IS_IT = 0x0425/;"	constant
MSG_GET_DEFFONT	$ZIGLIB/std/os/windows/user32.zig	/^pub const MSG_GET_DEFFONT = 0x042D/;"	constant
MSG_NOSIGNAL	$ZIGLIB/std/c/haiku.zig	/^pub const MSG_NOSIGNAL = 0x0800/;"	constant
MSG_REINDEX_REQUEST	$ZIGLIB/std/os/windows/user32.zig	/^pub const MSG_REINDEX_REQUEST = 0x0424/;"	constant
MSG_SCHEDULE	$ZIGLIB/std/crypto/blake3.zig	/^const MSG_SCHEDULE = [7][16]u8{$/;"	constant
MSP430	$ZIGLIB/std/elf.zig	/MSP430 = 105/;"	field
MS_ASYNC	$ZIGLIB/std/c/dragonfly.zig	/^pub const MS_ASYNC = 1/;"	constant
MS_INVALIDATE	$ZIGLIB/std/c/dragonfly.zig	/^pub const MS_INVALIDATE = 2/;"	constant
MS_SYNC	$ZIGLIB/std/c/dragonfly.zig	/^pub const MS_SYNC = 0/;"	constant
MSyncError	$ZIGLIB/std/os.zig	/^pub const MSyncError = error{$/;"	constant
MTIME	$ZIGLIB/std/compress/gzip.zig	/const MTIME = mem.readIntLittle(u32, header[4..8])/;"	constant
MTU_DISCOVER	$ZIGLIB/std/os/linux.zig	/pub const MTU_DISCOVER = 23/;"	constant
MUI_FILE_NOT_FOUND	$ZIGLIB/std/os/windows/ntstatus.zig	/MUI_FILE_NOT_FOUND = 0xC00B0001/;"	field
MUI_FILE_NOT_LOADED	$ZIGLIB/std/os/windows/ntstatus.zig	/MUI_FILE_NOT_LOADED = 0xC00B0006/;"	field
MUI_INVALID_FILE	$ZIGLIB/std/os/windows/ntstatus.zig	/MUI_INVALID_FILE = 0xC00B0002/;"	field
MUI_INVALID_LOCALE_NAME	$ZIGLIB/std/os/windows/ntstatus.zig	/MUI_INVALID_LOCALE_NAME = 0xC00B0004/;"	field
MUI_INVALID_RC_CONFIG	$ZIGLIB/std/os/windows/ntstatus.zig	/MUI_INVALID_RC_CONFIG = 0xC00B0003/;"	field
MUI_INVALID_ULTIMATEFALLBACK_NAME	$ZIGLIB/std/os/windows/ntstatus.zig	/MUI_INVALID_ULTIMATEFALLBACK_NAME = 0xC00B0005/;"	field
MULTICAST_ALL	$ZIGLIB/std/os/linux.zig	/pub const MULTICAST_ALL = 49/;"	constant
MULTICAST_HOPS	$ZIGLIB/std/os/linux.zig	/pub const MULTICAST_HOPS = 18/;"	constant
MULTICAST_IF	$ZIGLIB/std/os/linux.zig	/pub const MULTICAST_IF = 32/;"	constant
MULTICAST_LOOP	$ZIGLIB/std/os/linux.zig	/pub const MULTICAST_LOOP = 34/;"	constant
MULTICAST_TTL	$ZIGLIB/std/os/linux.zig	/pub const MULTICAST_TTL = 33/;"	constant
MULTIHOP	$ZIGLIB/std/os/wasi.zig	/MULTIHOP = 36/;"	field
MULTIPLE_FAULT_VIOLATION	$ZIGLIB/std/os/windows/win32error.zig	/MULTIPLE_FAULT_VIOLATION = 640/;"	field
MULTI_SZ	$ZIGLIB/std/os/windows.zig	/pub const MULTI_SZ: ULONG = 7/;"	constant
MUST_BE_KDC	$ZIGLIB/std/os/windows/ntstatus.zig	/MUST_BE_KDC = 0xC00002F5/;"	field
MUTANT_LIMIT_EXCEEDED	$ZIGLIB/std/os/windows/win32error.zig	/MUTANT_LIMIT_EXCEEDED = 587/;"	field
MUTANT_NOT_OWNED	$ZIGLIB/std/os/windows/ntstatus.zig	/MUTANT_NOT_OWNED = 0xC0000046/;"	field
MUTEX_LOCK	$ZIGLIB/std/c/freebsd.zig	/MUTEX_LOCK = 5/;"	field
MUTEX_TRYLOCK	$ZIGLIB/std/c/freebsd.zig	/MUTEX_TRYLOCK = 4/;"	field
MUTEX_UNLOCK	$ZIGLIB/std/c/freebsd.zig	/MUTEX_UNLOCK = 6/;"	field
MUTEX_WAIT	$ZIGLIB/std/c/freebsd.zig	/MUTEX_WAIT = 17/;"	field
MUTEX_WAKE	$ZIGLIB/std/c/freebsd.zig	/MUTEX_WAKE = 18/;"	field
MUTEX_WAKE2	$ZIGLIB/std/c/freebsd.zig	/MUTEX_WAKE2 = 22/;"	field
MUTUAL_AUTHENTICATION_FAILED	$ZIGLIB/std/os/windows/ntstatus.zig	/MUTUAL_AUTHENTICATION_FAILED = 0xC00002C3/;"	field
MUTUAL_AUTH_FAILED	$ZIGLIB/std/os/windows/win32error.zig	/MUTUAL_AUTH_FAILED = 1397/;"	field
MacAddress	$ZIGLIB/std/os/uefi/protocols/simple_network_protocol.zig	/^pub const MacAddress = [32]u8/;"	constant
MacAddressDevicePath	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/pub const MacAddressDevicePath = extern struct {$/;"	struct
MachError	$ZIGLIB/std/os/darwin.zig	/pub const MachError = error{$/;"	constant
MachMsgE	$ZIGLIB/std/c/darwin.zig	/^pub const MachMsgE = enum(u32) {$/;"	enum
MachODumper	$ZIGLIB/std/Build/CheckObjectStep.zig	/^const MachODumper = struct {$/;"	struct
MachTask	$ZIGLIB/std/os/darwin.zig	/pub const MachTask = extern struct {$/;"	struct
MachThread	$ZIGLIB/std/os/darwin.zig	/pub const MachThread = extern struct {$/;"	struct
Machine	$ZIGLIB/std/pdb.zig	/Machine: u16/;"	field
MachineType	$ZIGLIB/std/coff.zig	/^pub const MachineType = enum(u16) {$/;"	enum
MachoSymbol	$ZIGLIB/std/debug.zig	/^const MachoSymbol = struct {$/;"	struct
MacroArithmetic	$ZIGLIB/std/zig/c_translation.zig	/^pub const MacroArithmetic = struct {$/;"	struct
MacroString	$ZIGLIB/std/c/tokenizer.zig	/MacroString/;"	field
Macros	$ZIGLIB/std/zig/c_translation.zig	/^pub const Macros = struct {$/;"	struct
MadviseError	$ZIGLIB/std/os.zig	/^pub const MadviseError = error{$/;"	constant
MakeDirError	$ZIGLIB/std/os.zig	/^pub const MakeDirError = error{$/;"	constant
MakeMemDefined	$ZIGLIB/std/valgrind/memcheck.zig	/MakeMemDefined/;"	field
MakeMemDefinedIfAddressable	$ZIGLIB/std/valgrind/memcheck.zig	/MakeMemDefinedIfAddressable/;"	field
MakeMemNoAccess	$ZIGLIB/std/valgrind/memcheck.zig	/MakeMemNoAccess = valgrind.ToolBase("MC".*)/;"	field
MakeMemUndefined	$ZIGLIB/std/valgrind/memcheck.zig	/MakeMemUndefined/;"	field
MalloclikeBlock	$ZIGLIB/std/valgrind.zig	/MalloclikeBlock = 4865/;"	field
Managed	$ZIGLIB/std/math/big/int.zig	/^pub const Managed = struct {$/;"	struct
ManagedNetworkCompletionToken	$ZIGLIB/std/os/uefi/protocols/managed_network_protocol.zig	/^pub const ManagedNetworkCompletionToken = extern struct {$/;"	struct
ManagedNetworkConfigData	$ZIGLIB/std/os/uefi/protocols/managed_network_protocol.zig	/^pub const ManagedNetworkConfigData = extern struct {$/;"	struct
ManagedNetworkFragmentData	$ZIGLIB/std/os/uefi/protocols/managed_network_protocol.zig	/^pub const ManagedNetworkFragmentData = extern struct {$/;"	struct
ManagedNetworkProtocol	$ZIGLIB/std/os/uefi/protocols/managed_network_protocol.zig	/^pub const ManagedNetworkProtocol = extern struct {$/;"	struct
ManagedNetworkReceiveData	$ZIGLIB/std/os/uefi/protocols/managed_network_protocol.zig	/^pub const ManagedNetworkReceiveData = extern struct {$/;"	struct
ManagedNetworkServiceBindingProtocol	$ZIGLIB/std/os/uefi/protocols/managed_network_service_binding_protocol.zig	/^pub const ManagedNetworkServiceBindingProtocol = extern struct {$/;"	struct
ManagedNetworkTransmitData	$ZIGLIB/std/os/uefi/protocols/managed_network_protocol.zig	/^pub const ManagedNetworkTransmitData = extern struct {$/;"	struct
MantissaT	$ZIGLIB/std/fmt/parse_float/parse.zig	/const MantissaT = common.mantissaType(T)/;"	constant
Manual	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/Manual = 0/;"	field
ManualAddress	$ZIGLIB/std/os/uefi/protocols/ip6_config_protocol.zig	/ManualAddress/;"	field
Many	$ZIGLIB/std/builtin.zig	/Many/;"	field
MapBatchAttr	$ZIGLIB/std/os/linux/bpf.zig	/^pub const MapBatchAttr = extern struct {$/;"	struct
MapContext	$ZIGLIB/std/crypto/Certificate/Bundle.zig	/^const MapContext = struct {$/;"	struct
MapCreateAttr	$ZIGLIB/std/os/linux/bpf.zig	/^pub const MapCreateAttr = extern struct {$/;"	struct
MapElemAttr	$ZIGLIB/std/os/linux/bpf.zig	/^pub const MapElemAttr = extern struct {$/;"	struct
MapIpToSrcloc	$ZIGLIB/std/valgrind.zig	/MapIpToSrcloc = 5889/;"	field
MapType	$ZIGLIB/std/os/linux/bpf.zig	/^pub const MapType = enum(u32) {$/;"	enum
Mark	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/Mark = 4/;"	field
MaskInt	$ZIGLIB/std/bit_set.zig	/pub const MaskInt = usize/;"	constant
Master	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/Master = 0/;"	field
Match	$ZIGLIB/std/compress/deflate/compressor.zig	/const Match = struct {$/;"	struct
Matrix	$ZIGLIB/std/target/spirv.zig	/Matrix/;"	field
MaxIo	$ZIGLIB/std/packed_int_array.zig	/const MaxIo = std.meta.Int(.unsigned, max_io_bits)/;"	constant
MaxMemoryType	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/MaxMemoryType/;"	field
MaxObjectInfoClass	$ZIGLIB/std/os/windows.zig	/MaxObjectInfoClass/;"	field
MaxSduSize	$ZIGLIB/std/os/windows/ws2_32.zig	/MaxSduSize: u32/;"	field
MaxStackTraceDepth	$ZIGLIB/std/os/windows.zig	/MaxStackTraceDepth: ULONG/;"	field
MaximumLength	$ZIGLIB/std/os/windows.zig	/MaximumLength: c_ushort/;"	field
MaximumNumberOfHeaps	$ZIGLIB/std/os/windows.zig	/MaximumNumberOfHeaps: ULONG/;"	field
MbrSignature	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/MbrSignature = 0x01/;"	field
Media	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/Media: MediaDevicePath/;"	field
MediaChanged	$ZIGLIB/std/os/uefi/status.zig	/MediaChanged = high_bit | 13/;"	field
MediaDevicePath	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/^pub const MediaDevicePath = union(Subtype) {$/;"	union
MediaProtocol	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/MediaProtocol: *const MediaProtocolDevicePath/;"	field
MediaProtocolDevicePath	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/pub const MediaProtocolDevicePath = extern struct {$/;"	struct
MemCheckClientRequest	$ZIGLIB/std/valgrind/memcheck.zig	/^pub const MemCheckClientRequest = enum(usize) {$/;"	enum
MemFdCreateError	$ZIGLIB/std/os.zig	/^pub const MemFdCreateError = error{$/;"	constant
Member	$ZIGLIB/std/os/linux/bpf/btf.zig	/^pub const Member = extern struct {$/;"	struct
Members	$ZIGLIB/std/zig/Parse.zig	/^const Members = struct {$/;"	struct
Memory	$ZIGLIB/std/wasm.zig	/^pub const Memory = struct {$/;"	struct
MemoryDescriptor	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/^pub const MemoryDescriptor = extern struct {$/;"	struct
MemoryDescriptorAttribute	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/^pub const MemoryDescriptorAttribute = packed struct(u64) {$/;"	struct
MemoryMapped	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/MemoryMapped: *const MemoryMappedDevicePath/;"	field
MemoryMappedDevicePath	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/pub const MemoryMappedDevicePath = extern struct {$/;"	struct
MemoryMappedIO	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/MemoryMappedIO/;"	field
MemoryMappedIOPortSpace	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/MemoryMappedIOPortSpace/;"	field
MemoryPool	$ZIGLIB/std/heap/memory_pool.zig	/^pub fn MemoryPool(comptime Item: type) type {$/;"	function
MemoryPoolAligned	$ZIGLIB/std/heap/memory_pool.zig	/^pub fn MemoryPoolAligned(comptime Item: type, comptime alignment: u29) type {$/;"	function
MemoryPoolError	$ZIGLIB/std/heap/memory_pool.zig	/^pub const MemoryPoolError = error{OutOfMemory}/;"	constant
MemoryPoolExtra	$ZIGLIB/std/heap/memory_pool.zig	/^pub fn MemoryPoolExtra(comptime Item: type, comptime pool_options: Options) type {$/;"	function
MemoryPoolOptions	$ZIGLIB/std/heap.zig	/^pub const MemoryPoolOptions = memory_pool.Options/;"	constant
MemoryType	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/^pub const MemoryType = enum(u32) {$/;"	enum
MempoolAlloc	$ZIGLIB/std/valgrind.zig	/MempoolAlloc = 4869/;"	field
MempoolChange	$ZIGLIB/std/valgrind.zig	/MempoolChange = 4873/;"	field
MempoolExists	$ZIGLIB/std/valgrind.zig	/MempoolExists = 4874/;"	field
MempoolFlags	$ZIGLIB/std/valgrind.zig	/^pub const MempoolFlags = struct {$/;"	struct
MempoolFree	$ZIGLIB/std/valgrind.zig	/MempoolFree = 4870/;"	field
MempoolTrim	$ZIGLIB/std/valgrind.zig	/MempoolTrim = 4871/;"	field
MergedAssemblyInput	$ZIGLIB/std/pdb.zig	/MergedAssemblyInput = 0xfc/;"	field
MeshShadingNV	$ZIGLIB/std/target/spirv.zig	/MeshShadingNV/;"	field
Messaging	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/Messaging: MessagingDevicePath/;"	field
MessagingDevicePath	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/^pub const MessagingDevicePath = union(Subtype) {$/;"	union
MetaPool	$ZIGLIB/std/valgrind.zig	/pub const MetaPool = 2/;"	constant
Metadata	$ZIGLIB/std/hash_map.zig	/const Metadata = packed struct {$/;"	struct
MetadataError	$ZIGLIB/std/fs/file.zig	/pub const MetadataError = os.FStatError/;"	constant
MetadataLinux	$ZIGLIB/std/fs/file.zig	/pub const MetadataLinux = struct {$/;"	struct
MetadataUnix	$ZIGLIB/std/fs/file.zig	/pub const MetadataUnix = struct {$/;"	struct
MetadataWindows	$ZIGLIB/std/fs/file.zig	/pub const MetadataWindows = struct {$/;"	struct
Method	$ZIGLIB/std/http.zig	/^pub const Method = enum {$/;"	enum
MinArrayIndex	$ZIGLIB/std/rand.zig	/fn MinArrayIndex(comptime Index: type) type {$/;"	function
MinInt	$ZIGLIB/std/rand.zig	/const MinInt = MinArrayIndex(Index)/;"	constant
MinIo	$ZIGLIB/std/packed_int_array.zig	/const MinIo = std.meta.Int(.unsigned, min_io_bits)/;"	constant
MinLod	$ZIGLIB/std/target/spirv.zig	/MinLod/;"	field
MinimumPolicedSize	$ZIGLIB/std/os/windows/ws2_32.zig	/MinimumPolicedSize: u32/;"	field
MinimumStackCommit	$ZIGLIB/std/os/windows.zig	/MinimumStackCommit: ULONG_PTR/;"	field
Minus	$ZIGLIB/std/c/tokenizer.zig	/Minus/;"	field
MinusEqual	$ZIGLIB/std/c/tokenizer.zig	/MinusEqual/;"	field
MinusMinus	$ZIGLIB/std/c/tokenizer.zig	/MinusMinus/;"	field
Mips	$ZIGLIB/std/os/linux/syscalls.zig	/^pub const Mips = enum(usize) {$/;"	enum
Mips64	$ZIGLIB/std/os/linux/syscalls.zig	/^pub const Mips64 = enum(usize) {$/;"	enum
Mips_Assembler	$ZIGLIB/std/dwarf/LANG.zig	/^pub const Mips_Assembler = 0x8001/;"	constant
MitigationPolicies	$ZIGLIB/std/os/windows.zig	/MitigationPolicies: UCHAR/;"	field
ModInfo	$ZIGLIB/std/pdb.zig	/^pub const ModInfo = extern struct {$/;"	struct
ModInfoSize	$ZIGLIB/std/pdb.zig	/ModInfoSize: u32/;"	field
Mode	$ZIGLIB/std/zig/Ast.zig	/^pub const Mode = enum { zig, zon }/;"	enum
ModeError	$ZIGLIB/std/fs/file.zig	/pub const ModeError = os.FStatError/;"	constant
ModeInformation	$ZIGLIB/std/os/windows.zig	/ModeInformation: FILE_MODE_INFORMATION/;"	field
ModeMode	$ZIGLIB/std/tar.zig	/const ModeMode = enum {$/;"	enum
ModeOverride	$ZIGLIB/std/io.zig	/^pub const ModeOverride = if (is_async) Mode else enum { blocking }/;"	constant
Model	$ZIGLIB/std/target.zig	/pub const Model = struct {$/;"	struct
Modula2	$ZIGLIB/std/dwarf/LANG.zig	/^pub const Modula2 = 0x000a/;"	constant
Modula3	$ZIGLIB/std/dwarf/LANG.zig	/^pub const Modula3 = 0x0017/;"	constant
Module	$ZIGLIB/std/pdb.zig	/pub const Module = struct {$/;"	struct
ModuleDebugInfo	$ZIGLIB/std/debug.zig	/^pub const ModuleDebugInfo = switch (native_os) {$/;"	constant
ModuleDependency	$ZIGLIB/std/Build.zig	/^pub const ModuleDependency = struct {$/;"	struct
ModuleIndex	$ZIGLIB/std/pdb.zig	/ModuleIndex: u16/;"	field
ModuleInfo	$ZIGLIB/std/debug.zig	/^pub const ModuleInfo = struct {$/;"	struct
ModuleSymStream	$ZIGLIB/std/pdb.zig	/ModuleSymStream: u16/;"	field
Monotonic	$ZIGLIB/std/builtin.zig	/Monotonic/;"	field
MontgomeryDomainFieldElement	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/^pub const MontgomeryDomainFieldElement = [4]u64/;"	constant
Month	$ZIGLIB/std/time/epoch.zig	/^pub const Month = enum(u4) {$/;"	enum
MonthAndDay	$ZIGLIB/std/time/epoch.zig	/^pub const MonthAndDay = struct {$/;"	struct
MountPoints	$ZIGLIB/std/os/windows.zig	/MountPoints: [1]MOUNTMGR_MOUNT_POINT/;"	field
MoveFileError	$ZIGLIB/std/os/windows.zig	/^pub const MoveFileError = error{ FileNotFound, AccessDenied, Unexpected }/;"	constant
MoveFileEx	$ZIGLIB/std/os/windows.zig	/^pub fn MoveFileEx(old_path: []const u8, new_path: []const u8, flags: DWORD) MoveFileError!void {$/;"	function
MoveFileExW	$ZIGLIB/std/os/windows.zig	/^pub fn MoveFileExW(old_path: [*:0]const u16, new_path: [*:0]const u16, flags: DWORD) MoveFileError!void {$/;"	function
MoveMempool	$ZIGLIB/std/valgrind.zig	/MoveMempool = 4872/;"	field
Moved	$ZIGLIB/std/meta.zig	/Moved: struct {$/;"	field
MovedEvent	$ZIGLIB/std/meta.zig	/const MovedEvent = TagPayload(Event, Event.Moved)/;"	constant
MsfStream	$ZIGLIB/std/pdb.zig	/^const MsfStream = struct {$/;"	struct
MultiArrayList	$ZIGLIB/std/multi_array_list.zig	/^pub fn MultiArrayList(comptime S: type) type {$/;"	function
MultiLineComment	$ZIGLIB/std/c/tokenizer.zig	/MultiLineComment/;"	field
MultiLineCommentAsterisk	$ZIGLIB/std/c/tokenizer.zig	/MultiLineCommentAsterisk/;"	field
MultiView	$ZIGLIB/std/target/spirv.zig	/MultiView/;"	field
MultiViewport	$ZIGLIB/std/target/spirv.zig	/MultiViewport/;"	field
MultiWait	$ZIGLIB/std/Thread/Condition.zig	/const MultiWait = struct {$/;"	struct
MultiWriter	$ZIGLIB/std/io/multi_writer.zig	/^pub fn MultiWriter(comptime Writers: type) type {$/;"	function
Murmur2_32	$ZIGLIB/std/hash/murmur.zig	/^pub const Murmur2_32 = struct {$/;"	struct
Murmur2_64	$ZIGLIB/std/hash/murmur.zig	/^pub const Murmur2_64 = struct {$/;"	struct
Murmur3_32	$ZIGLIB/std/hash/murmur.zig	/^pub const Murmur3_32 = struct {$/;"	struct
Mutable	$ZIGLIB/std/math/big/int.zig	/^pub const Mutable = struct {$/;"	struct
Mutant	$ZIGLIB/std/os/windows.zig	/Mutant: HANDLE/;"	field
Mutex	$ZIGLIB/std/Thread/Mutex.zig	/^const Mutex = @This()/;"	constant
MutexType	$ZIGLIB/std/heap/general_purpose_allocator.zig	/MutexType: ?type = null/;"	field
MxCsr	$ZIGLIB/std/os/windows.zig	/MxCsr: DWORD/;"	field
MxCsr_Mask	$ZIGLIB/std/os/windows.zig	/MxCsr_Mask: DWORD/;"	field
MyStruct	$ZIGLIB/std/json.zig	/const MyStruct = struct {$/;"	struct
MyType	$ZIGLIB/std/meta/trait.zig	/const MyType = @This()/;"	constant
NAME	$ZIGLIB/std/c/openbsd.zig	/pub const NAME: auth_item_t = 3/;"	constant
NAMEREQD	$ZIGLIB/std/c/solaris.zig	/pub const NAMEREQD = 0x0004/;"	constant
NAMETOOLONG	$ZIGLIB/std/os/wasi.zig	/NAMETOOLONG = 37/;"	field
NAME_EXISTS	$ZIGLIB/std/c/darwin.zig	/NAME_EXISTS = 13/;"	field
NAME_MAX	$ZIGLIB/std/os/windows.zig	/^pub const NAME_MAX = 255/;"	constant
NAME_TOO_LONG	$ZIGLIB/std/os/windows/ntstatus.zig	/NAME_TOO_LONG = 0xC0000106/;"	field
NATIVE	$ZIGLIB/std/coff.zig	/NATIVE = 1/;"	field
NATIVE_WINDOWS	$ZIGLIB/std/coff.zig	/NATIVE_WINDOWS = 8/;"	field
NATM	$ZIGLIB/std/c/netbsd.zig	/pub const NATM = 27/;"	constant
NAVAIL	$ZIGLIB/std/os/linux/errno/sparc.zig	/NAVAIL = 119/;"	field
NCCS	$ZIGLIB/std/os/linux.zig	/^pub const NCCS = 32/;"	constant
NCHSTATS	$ZIGLIB/std/c/openbsd.zig	/pub const NCHSTATS = 41/;"	constant
NCPU	$ZIGLIB/std/elf.zig	/NCPU = 56/;"	field
NDELAY	$ZIGLIB/std/os/linux/x86_64.zig	/pub const NDELAY = NONBLOCK/;"	constant
NDIS_ADAPTER_NOT_FOUND	$ZIGLIB/std/os/windows/ntstatus.zig	/NDIS_ADAPTER_NOT_FOUND = 0xC0230006/;"	field
NDIS_ADAPTER_NOT_READY	$ZIGLIB/std/os/windows/ntstatus.zig	/NDIS_ADAPTER_NOT_READY = 0xC0230011/;"	field
NDIS_ADAPTER_REMOVED	$ZIGLIB/std/os/windows/ntstatus.zig	/NDIS_ADAPTER_REMOVED = 0xC0230018/;"	field
NDIS_ALREADY_MAPPED	$ZIGLIB/std/os/windows/ntstatus.zig	/NDIS_ALREADY_MAPPED = 0xC023001D/;"	field
NDIS_BAD_CHARACTERISTICS	$ZIGLIB/std/os/windows/ntstatus.zig	/NDIS_BAD_CHARACTERISTICS = 0xC0230005/;"	field
NDIS_BAD_VERSION	$ZIGLIB/std/os/windows/ntstatus.zig	/NDIS_BAD_VERSION = 0xC0230004/;"	field
NDIS_BUFFER_TOO_SHORT	$ZIGLIB/std/os/windows/ntstatus.zig	/NDIS_BUFFER_TOO_SHORT = 0xC0230016/;"	field
NDIS_CLOSING	$ZIGLIB/std/os/windows/ntstatus.zig	/NDIS_CLOSING = 0xC0230002/;"	field
NDIS_DEVICE_FAILED	$ZIGLIB/std/os/windows/ntstatus.zig	/NDIS_DEVICE_FAILED = 0xC0230008/;"	field
NDIS_DOT11_AUTO_CONFIG_ENABLED	$ZIGLIB/std/os/windows/ntstatus.zig	/NDIS_DOT11_AUTO_CONFIG_ENABLED = 0xC0232000/;"	field
NDIS_DOT11_MEDIA_IN_USE	$ZIGLIB/std/os/windows/ntstatus.zig	/NDIS_DOT11_MEDIA_IN_USE = 0xC0232001/;"	field
NDIS_DOT11_POWER_STATE_INVALID	$ZIGLIB/std/os/windows/ntstatus.zig	/NDIS_DOT11_POWER_STATE_INVALID = 0xC0232002/;"	field
NDIS_ERROR_READING_FILE	$ZIGLIB/std/os/windows/ntstatus.zig	/NDIS_ERROR_READING_FILE = 0xC023001C/;"	field
NDIS_FILE_NOT_FOUND	$ZIGLIB/std/os/windows/ntstatus.zig	/NDIS_FILE_NOT_FOUND = 0xC023001B/;"	field
NDIS_GROUP_ADDRESS_IN_USE	$ZIGLIB/std/os/windows/ntstatus.zig	/NDIS_GROUP_ADDRESS_IN_USE = 0xC023001A/;"	field
NDIS_INDICATION_REQUIRED	$ZIGLIB/std/os/windows/ntstatus.zig	/NDIS_INDICATION_REQUIRED = 0x40230001/;"	field
NDIS_INTERFACE_NOT_FOUND	$ZIGLIB/std/os/windows/ntstatus.zig	/NDIS_INTERFACE_NOT_FOUND = 0xC023002B/;"	field
NDIS_INVALID_ADDRESS	$ZIGLIB/std/os/windows/ntstatus.zig	/NDIS_INVALID_ADDRESS = 0xC0230022/;"	field
NDIS_INVALID_DATA	$ZIGLIB/std/os/windows/ntstatus.zig	/NDIS_INVALID_DATA = 0xC0230015/;"	field
NDIS_INVALID_DEVICE_REQUEST	$ZIGLIB/std/os/windows/ntstatus.zig	/NDIS_INVALID_DEVICE_REQUEST = 0xC0230010/;"	field
NDIS_INVALID_LENGTH	$ZIGLIB/std/os/windows/ntstatus.zig	/NDIS_INVALID_LENGTH = 0xC0230014/;"	field
NDIS_INVALID_OID	$ZIGLIB/std/os/windows/ntstatus.zig	/NDIS_INVALID_OID = 0xC0230017/;"	field
NDIS_INVALID_PACKET	$ZIGLIB/std/os/windows/ntstatus.zig	/NDIS_INVALID_PACKET = 0xC023000F/;"	field
NDIS_INVALID_PORT	$ZIGLIB/std/os/windows/ntstatus.zig	/NDIS_INVALID_PORT = 0xC023002D/;"	field
NDIS_INVALID_PORT_STATE	$ZIGLIB/std/os/windows/ntstatus.zig	/NDIS_INVALID_PORT_STATE = 0xC023002E/;"	field
NDIS_LOW_POWER_STATE	$ZIGLIB/std/os/windows/ntstatus.zig	/NDIS_LOW_POWER_STATE = 0xC023002F/;"	field
NDIS_MEDIA_DISCONNECTED	$ZIGLIB/std/os/windows/ntstatus.zig	/NDIS_MEDIA_DISCONNECTED = 0xC023001F/;"	field
NDIS_MULTICAST_EXISTS	$ZIGLIB/std/os/windows/ntstatus.zig	/NDIS_MULTICAST_EXISTS = 0xC023000A/;"	field
NDIS_MULTICAST_FULL	$ZIGLIB/std/os/windows/ntstatus.zig	/NDIS_MULTICAST_FULL = 0xC0230009/;"	field
NDIS_MULTICAST_NOT_FOUND	$ZIGLIB/std/os/windows/ntstatus.zig	/NDIS_MULTICAST_NOT_FOUND = 0xC023000B/;"	field
NDIS_NOT_SUPPORTED	$ZIGLIB/std/os/windows/ntstatus.zig	/NDIS_NOT_SUPPORTED = 0xC02300BB/;"	field
NDIS_OFFLOAD_CONNECTION_REJECTED	$ZIGLIB/std/os/windows/ntstatus.zig	/NDIS_OFFLOAD_CONNECTION_REJECTED = 0xC0231012/;"	field
NDIS_OFFLOAD_PATH_REJECTED	$ZIGLIB/std/os/windows/ntstatus.zig	/NDIS_OFFLOAD_PATH_REJECTED = 0xC0231013/;"	field
NDIS_OFFLOAD_POLICY	$ZIGLIB/std/os/windows/ntstatus.zig	/NDIS_OFFLOAD_POLICY = 0xC023100F/;"	field
NDIS_OPEN_FAILED	$ZIGLIB/std/os/windows/ntstatus.zig	/NDIS_OPEN_FAILED = 0xC0230007/;"	field
NDIS_PAUSED	$ZIGLIB/std/os/windows/ntstatus.zig	/NDIS_PAUSED = 0xC023002A/;"	field
NDIS_PM_PROTOCOL_OFFLOAD_LIST_FULL	$ZIGLIB/std/os/windows/ntstatus.zig	/NDIS_PM_PROTOCOL_OFFLOAD_LIST_FULL = 0xC0232004/;"	field
NDIS_PM_WOL_PATTERN_LIST_FULL	$ZIGLIB/std/os/windows/ntstatus.zig	/NDIS_PM_WOL_PATTERN_LIST_FULL = 0xC0232003/;"	field
NDIS_REQUEST_ABORTED	$ZIGLIB/std/os/windows/ntstatus.zig	/NDIS_REQUEST_ABORTED = 0xC023000C/;"	field
NDIS_RESET_IN_PROGRESS	$ZIGLIB/std/os/windows/ntstatus.zig	/NDIS_RESET_IN_PROGRESS = 0xC023000D/;"	field
NDIS_RESOURCE_CONFLICT	$ZIGLIB/std/os/windows/ntstatus.zig	/NDIS_RESOURCE_CONFLICT = 0xC023001E/;"	field
NDIS_UNSUPPORTED_MEDIA	$ZIGLIB/std/os/windows/ntstatus.zig	/NDIS_UNSUPPORTED_MEDIA = 0xC0230019/;"	field
NDIS_UNSUPPORTED_REVISION	$ZIGLIB/std/os/windows/ntstatus.zig	/NDIS_UNSUPPORTED_REVISION = 0xC023002C/;"	field
NDR1	$ZIGLIB/std/elf.zig	/NDR1 = 57/;"	field
NDS32	$ZIGLIB/std/elf.zig	/NDS32 = 167/;"	field
ND_QUEUE_OVERFLOW	$ZIGLIB/std/os/windows/ntstatus.zig	/ND_QUEUE_OVERFLOW = 0xC000A011/;"	field
NEC98x86	$ZIGLIB/std/os/windows.zig	/NEC98x86/;"	field
NEEDAUTH	$ZIGLIB/std/c/openbsd.zig	/NEEDAUTH = 81/;"	field
NEGATIVE_SEEK	$ZIGLIB/std/os/windows/win32error.zig	/NEGATIVE_SEEK = 131/;"	field
NEON	$ZIGLIB/std/os/linux/arm-eabi.zig	/pub const NEON = 1 << 12/;"	constant
NEON128	$ZIGLIB/std/os/windows.zig	/pub const NEON128 = extern union {$/;"	union
NEPALI	$ZIGLIB/std/os/windows/lang.zig	/^pub const NEPALI = 0x61/;"	constant
NEPALI_INDIA	$ZIGLIB/std/os/windows/sublang.zig	/^pub const NEPALI_INDIA = 0x02/;"	constant
NEPALI_NEPAL	$ZIGLIB/std/os/windows/sublang.zig	/^pub const NEPALI_NEPAL = 0x01/;"	constant
NESTING_NOT_ALLOWED	$ZIGLIB/std/os/windows/win32error.zig	/NESTING_NOT_ALLOWED = 215/;"	field
NETBEUI	$ZIGLIB/std/os/linux.zig	/pub const NETBEUI = 267/;"	constant
NETBIOS	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const NETBIOS = 17/;"	constant
NETDES	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const NETDES = 28/;"	constant
NETDOWN	$ZIGLIB/std/os/wasi.zig	/NETDOWN = 38/;"	field
NETFILTER	$ZIGLIB/std/os/linux.zig	/pub const NETFILTER = 12/;"	constant
NETGRAPH	$ZIGLIB/std/c/freebsd.zig	/pub const NETGRAPH = 32/;"	constant
NETLINK	$ZIGLIB/std/os/linux.zig	/pub const NETLINK = 270/;"	constant
NETLIVELOCKS	$ZIGLIB/std/c/openbsd.zig	/pub const NETLIVELOCKS = 76/;"	constant
NETLOGON_NOT_STARTED	$ZIGLIB/std/os/windows/win32error.zig	/NETLOGON_NOT_STARTED = 1792/;"	field
NETNAME_DELETED	$ZIGLIB/std/os/windows/win32error.zig	/NETNAME_DELETED = 64/;"	field
NETPROC	$ZIGLIB/std/c/openbsd.zig	/pub const NETPROC = 0x1020/;"	constant
NETRESET	$ZIGLIB/std/os/wasi.zig	/NETRESET = 39/;"	field
NETROM	$ZIGLIB/std/os/linux.zig	/pub const NETROM = 6/;"	constant
NETUNREACH	$ZIGLIB/std/os/wasi.zig	/NETUNREACH = 40/;"	field
NETWORK_ACCESS_DENIED	$ZIGLIB/std/os/windows/win32error.zig	/NETWORK_ACCESS_DENIED = 65/;"	field
NETWORK_BUSY	$ZIGLIB/std/os/windows/win32error.zig	/NETWORK_BUSY = 54/;"	field
NETWORK_CREDENTIAL_CONFLICT	$ZIGLIB/std/os/windows/ntstatus.zig	/NETWORK_CREDENTIAL_CONFLICT = 0xC0000195/;"	field
NETWORK_NAME_DELETED	$ZIGLIB/std/os/windows/ntstatus.zig	/NETWORK_NAME_DELETED = 0xC00000C9/;"	field
NETWORK_OPEN_RESTRICTION	$ZIGLIB/std/os/windows/ntstatus.zig	/NETWORK_OPEN_RESTRICTION = 0xC0000201/;"	field
NETWORK_SESSION_EXPIRED	$ZIGLIB/std/os/windows/ntstatus.zig	/NETWORK_SESSION_EXPIRED = 0xC000035C/;"	field
NETWORK_UNREACHABLE	$ZIGLIB/std/os/windows/win32error.zig	/NETWORK_UNREACHABLE = 1231/;"	field
NET_ADMIN	$ZIGLIB/std/os/linux.zig	/pub const NET_ADMIN = 12/;"	constant
NET_BIND_SERVICE	$ZIGLIB/std/os/linux.zig	/pub const NET_BIND_SERVICE = 10/;"	constant
NET_BROADCAST	$ZIGLIB/std/os/linux.zig	/pub const NET_BROADCAST = 11/;"	constant
NET_NS_FD	$ZIGLIB/std/os/linux.zig	/NET_NS_FD/;"	field
NET_NS_PID	$ZIGLIB/std/os/linux.zig	/NET_NS_PID/;"	field
NET_OPEN_FAILED	$ZIGLIB/std/os/windows/win32error.zig	/NET_OPEN_FAILED = 570/;"	field
NET_RAW	$ZIGLIB/std/os/linux.zig	/pub const NET_RAW = 13/;"	constant
NET_RUN_FROM_SWAP	$ZIGLIB/std/coff.zig	/NET_RUN_FROM_SWAP: u1 = 0/;"	field
NET_WRITE_FAULT	$ZIGLIB/std/os/windows/win32error.zig	/NET_WRITE_FAULT = 88/;"	field
NEUTRAL	$ZIGLIB/std/os/windows/sublang.zig	/pub const NEUTRAL = 0x00/;"	constant
NEWCGROUP	$ZIGLIB/std/os/linux.zig	/pub const NEWCGROUP = 0x02000000/;"	constant
NEWIPC	$ZIGLIB/std/os/linux.zig	/pub const NEWIPC = 0x08000000/;"	constant
NEWNET	$ZIGLIB/std/os/linux.zig	/pub const NEWNET = 0x40000000/;"	constant
NEWNS	$ZIGLIB/std/os/linux.zig	/pub const NEWNS = 0x00020000/;"	constant
NEWPID	$ZIGLIB/std/os/linux.zig	/pub const NEWPID = 0x20000000/;"	constant
NEWTIME	$ZIGLIB/std/os/linux.zig	/pub const NEWTIME = 0x00000080/;"	constant
NEWUSER	$ZIGLIB/std/os/linux.zig	/pub const NEWUSER = 0x10000000/;"	constant
NEWUTS	$ZIGLIB/std/os/linux.zig	/pub const NEWUTS = 0x04000000/;"	constant
NEW_IFINDEX	$ZIGLIB/std/os/linux.zig	/NEW_IFINDEX/;"	field
NEW_LISTENER	$ZIGLIB/std/os/linux/seccomp.zig	/pub const NEW_LISTENER = 1 << 3/;"	constant
NEW_NETNSID	$ZIGLIB/std/os/linux.zig	/NEW_NETNSID/;"	field
NEXT	$ZIGLIB/std/c/solaris.zig	/pub const NEXT = @intToPtr(*anyopaque, @bitCast(usize, @as(isize, -1)))/;"	constant
NEXTHOP	$ZIGLIB/std/os/linux.zig	/pub const NEXTHOP = 9/;"	constant
NFILE	$ZIGLIB/std/os/wasi.zig	/NFILE = 41/;"	field
NFILES	$ZIGLIB/std/c/openbsd.zig	/pub const NFILES = 56/;"	constant
NFLOG	$ZIGLIB/std/os/linux.zig	/pub const NFLOG = 5/;"	constant
NGROUPS	$ZIGLIB/std/c/openbsd.zig	/pub const NGROUPS = 18/;"	constant
NHRP	$ZIGLIB/std/c/freebsd.zig	/pub const NHRP = 54/;"	constant
NICE	$ZIGLIB/std/os/linux/sparc64.zig	/NICE/;"	field
NIN_SELECT	$ZIGLIB/std/os/windows/user32.zig	/^pub const NIN_SELECT = 0x0400/;"	constant
NISDOMAINNAME	$ZIGLIB/std/c/dragonfly.zig	/pub const NISDOMAINNAME = 22/;"	constant
NI_DGRAM	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const NI_DGRAM = 16/;"	constant
NI_MAXHOST	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const NI_MAXHOST = 1025/;"	constant
NI_MAXSERV	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const NI_MAXSERV = 32/;"	constant
NI_NAMEREQD	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const NI_NAMEREQD = 4/;"	constant
NI_NOFQDN	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const NI_NOFQDN = 1/;"	constant
NI_NUMERICHOST	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const NI_NUMERICHOST = 2/;"	constant
NI_NUMERICSERV	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const NI_NUMERICSERV = 8/;"	constant
NLA_ALLUSERS_NETWORK	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const NLA_ALLUSERS_NETWORK = 1/;"	constant
NLA_FRIENDLY_NAME	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const NLA_FRIENDLY_NAME = 2/;"	constant
NLDLY	$ZIGLIB/std/c/darwin.zig	/^pub const NLDLY: tcflag_t = 0x00000300/;"	constant
NLINK	$ZIGLIB/std/c/darwin.zig	/pub const NLINK = 0x0800/;"	constant
NLM_F_ACK	$ZIGLIB/std/os/linux.zig	/^pub const NLM_F_ACK = 0x04/;"	constant
NLM_F_ACK_TLVS	$ZIGLIB/std/os/linux.zig	/^pub const NLM_F_ACK_TLVS = 0x200/;"	constant
NLM_F_APPEND	$ZIGLIB/std/os/linux.zig	/^pub const NLM_F_APPEND = 0x800/;"	constant
NLM_F_ATOMIC	$ZIGLIB/std/os/linux.zig	/^pub const NLM_F_ATOMIC = 0x400/;"	constant
NLM_F_CAPPED	$ZIGLIB/std/os/linux.zig	/^pub const NLM_F_CAPPED = 0x100/;"	constant
NLM_F_CREATE	$ZIGLIB/std/os/linux.zig	/^pub const NLM_F_CREATE = 0x400/;"	constant
NLM_F_DUMP	$ZIGLIB/std/os/linux.zig	/^pub const NLM_F_DUMP = NLM_F_ROOT | NLM_F_MATCH/;"	constant
NLM_F_DUMP_FILTERED	$ZIGLIB/std/os/linux.zig	/^pub const NLM_F_DUMP_FILTERED = 0x20/;"	constant
NLM_F_DUMP_INTR	$ZIGLIB/std/os/linux.zig	/^pub const NLM_F_DUMP_INTR = 0x10/;"	constant
NLM_F_ECHO	$ZIGLIB/std/os/linux.zig	/^pub const NLM_F_ECHO = 0x08/;"	constant
NLM_F_EXCL	$ZIGLIB/std/os/linux.zig	/^pub const NLM_F_EXCL = 0x200/;"	constant
NLM_F_MATCH	$ZIGLIB/std/os/linux.zig	/^pub const NLM_F_MATCH = 0x200/;"	constant
NLM_F_MULTI	$ZIGLIB/std/os/linux.zig	/^pub const NLM_F_MULTI = 0x02/;"	constant
NLM_F_NONREC	$ZIGLIB/std/os/linux.zig	/^pub const NLM_F_NONREC = 0x100/;"	constant
NLM_F_REPLACE	$ZIGLIB/std/os/linux.zig	/^pub const NLM_F_REPLACE = 0x100/;"	constant
NLM_F_REQUEST	$ZIGLIB/std/os/linux.zig	/^pub const NLM_F_REQUEST = 0x01/;"	constant
NLM_F_ROOT	$ZIGLIB/std/os/linux.zig	/^pub const NLM_F_ROOT = 0x100/;"	constant
NOACCESS	$ZIGLIB/std/os/windows/win32error.zig	/NOACCESS = 998/;"	field
NOADDRERR	$ZIGLIB/std/c/darwin.zig	/pub const NOADDRERR = 0x1023/;"	constant
NOANO	$ZIGLIB/std/os/linux/errno/sparc.zig	/NOANO = 105/;"	field
NOATIME	$ZIGLIB/std/os/linux/x86_64.zig	/pub const NOATIME = 0o1000000/;"	constant
NOATTR	$ZIGLIB/std/c/openbsd.zig	/NOATTR = 83/;"	field
NOBUFS	$ZIGLIB/std/os/wasi.zig	/NOBUFS = 42/;"	field
NOCACHE	$ZIGLIB/std/c/haiku.zig	/pub const NOCACHE = DIRECT/;"	constant
NOCLDSTOP	$ZIGLIB/std/os/linux.zig	/pub const NOCLDSTOP = 1/;"	constant
NOCLDWAIT	$ZIGLIB/std/os/linux.zig	/pub const NOCLDWAIT = 2/;"	constant
NOCORE	$ZIGLIB/std/c/freebsd.zig	/pub const NOCORE = 0x00020000/;"	constant
NOCSI	$ZIGLIB/std/os/linux/errno/sparc.zig	/NOCSI = 100/;"	field
NOCTTY	$ZIGLIB/std/os/linux/x86_64.zig	/pub const NOCTTY = 0o400/;"	constant
NODATA	$ZIGLIB/std/os/linux/errno/sparc.zig	/NODATA = 111/;"	field
NODE	$ZIGLIB/std/os/linux.zig	/NODE/;"	field
NODEFER	$ZIGLIB/std/os/linux.zig	/pub const NODEFER = 0x40000000/;"	constant
NODEFRAG	$ZIGLIB/std/os/linux.zig	/pub const NODEFRAG = 22/;"	constant
NODELAY	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const NODELAY = 1/;"	constant
NODELETE	$ZIGLIB/std/c/solaris.zig	/pub const NODELETE = 0x01000/;"	constant
NODEV	$ZIGLIB/std/os/wasi.zig	/NODEV = 43/;"	field
NODE_DOWN	$ZIGLIB/std/c/darwin.zig	/NODE_DOWN = 47/;"	field
NODIRATIME	$ZIGLIB/std/os/linux.zig	/pub const NODIRATIME = 2048/;"	constant
NODIRECT	$ZIGLIB/std/c/darwin.zig	/pub const NODIRECT = 62/;"	constant
NODNY	$ZIGLIB/std/c/solaris.zig	/pub const NODNY = 0x0/;"	constant
NODUPLICATES	$ZIGLIB/std/coff.zig	/NODUPLICATES = 1/;"	field
NOENT	$ZIGLIB/std/os/wasi.zig	/NOENT = 44/;"	field
NOEXEC	$ZIGLIB/std/os/wasi.zig	/NOEXEC = 45/;"	field
NOEXIST	$ZIGLIB/std/os/linux/bpf.zig	/^pub const NOEXIST = 1/;"	constant
NOEXTEND	$ZIGLIB/std/c/dragonfly.zig	/pub const NOEXTEND = 256/;"	constant
NOFCS	$ZIGLIB/std/os/linux.zig	/pub const NOFCS = 43/;"	constant
NOFILE	$ZIGLIB/std/os/linux/sparc64.zig	/NOFILE/;"	field
NOFLSH	$ZIGLIB/std/os/linux.zig	/^pub const NOFLSH: tcflag_t = 128/;"	constant
NOFOLLOW	$ZIGLIB/std/os/linux/x86_64.zig	/pub const NOFOLLOW = 0o400000/;"	constant
NOFQDN	$ZIGLIB/std/c/solaris.zig	/pub const NOFQDN = 0x0001/;"	constant
NOHANG	$ZIGLIB/std/os/linux.zig	/pub const NOHANG = 1/;"	constant
NOHEADER	$ZIGLIB/std/c/netbsd.zig	/pub const NOHEADER = 0x100a/;"	constant
NOHUGEPAGE	$ZIGLIB/std/os/linux.zig	/pub const NOHUGEPAGE = 15/;"	constant
NOINTERFACE	$ZIGLIB/std/os/windows/win32error.zig	/NOINTERFACE = 632/;"	field
NOKERNINFO	$ZIGLIB/std/c/darwin.zig	/^pub const NOKERNINFO: tcflag_t = 0x02000000/;"	constant
NOKEY	$ZIGLIB/std/os/linux/errno/sparc.zig	/NOKEY = 128/;"	field
NOLCK	$ZIGLIB/std/os/wasi.zig	/NOLCK = 46/;"	field
NOLINK	$ZIGLIB/std/os/wasi.zig	/NOLINK = 47/;"	field
NOLINKS	$ZIGLIB/std/c/solaris.zig	/pub const NOLINKS = 0x40000/;"	constant
NOLOAD	$ZIGLIB/std/c/solaris.zig	/pub const NOLOAD = 0x00004/;"	constant
NOLOGON_INTERDOMAIN_TRUST_ACCOUNT	$ZIGLIB/std/os/windows/win32error.zig	/NOLOGON_INTERDOMAIN_TRUST_ACCOUNT = 1807/;"	field
NOLOGON_SERVER_TRUST_ACCOUNT	$ZIGLIB/std/os/windows/win32error.zig	/NOLOGON_SERVER_TRUST_ACCOUNT = 1809/;"	field
NOLOGON_WORKSTATION_TRUST_ACCOUNT	$ZIGLIB/std/os/windows/win32error.zig	/NOLOGON_WORKSTATION_TRUST_ACCOUNT = 1808/;"	field
NOMASK	$ZIGLIB/std/c/haiku.zig	/pub const NOMASK = NODEFER/;"	constant
NOMEDIUM	$ZIGLIB/std/os/linux/errno/sparc.zig	/NOMEDIUM = 125/;"	field
NOMEM	$ZIGLIB/std/os/wasi.zig	/NOMEM = 48/;"	field
NOMSG	$ZIGLIB/std/os/wasi.zig	/NOMSG = 49/;"	field
NONAME	$ZIGLIB/std/c/solaris.zig	/NONAME = 8/;"	field
NONBLOCK	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const NONBLOCK = 0x20000/;"	constant
NONCONTINUABLE_EXCEPTION	$ZIGLIB/std/os/windows/ntstatus.zig	/NONCONTINUABLE_EXCEPTION = 0xC0000025/;"	field
NONE	$ZIGLIB/std/os/windows.zig	/pub const NONE: ULONG = 0/;"	constant
NONET	$ZIGLIB/std/os/linux/errno/sparc.zig	/NONET = 80/;"	field
NONEXISTENT_EA_ENTRY	$ZIGLIB/std/os/windows/ntstatus.zig	/NONEXISTENT_EA_ENTRY = 0xC0000051/;"	field
NONEXISTENT_SECTOR	$ZIGLIB/std/os/windows/ntstatus.zig	/NONEXISTENT_SECTOR = 0xC0000015/;"	field
NONE_MAPPED	$ZIGLIB/std/os/windows/win32error.zig	/NONE_MAPPED = 1332/;"	field
NONPAGED_SYSTEM_RESOURCES	$ZIGLIB/std/os/windows/win32error.zig	/NONPAGED_SYSTEM_RESOURCES = 1451/;"	field
NON_ACCOUNT_SID	$ZIGLIB/std/os/windows/win32error.zig	/NON_ACCOUNT_SID = 1257/;"	field
NON_AUTHORITATIVE	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const NON_AUTHORITATIVE = 16384/;"	constant
NON_DOMAIN_SID	$ZIGLIB/std/os/windows/win32error.zig	/NON_DOMAIN_SID = 1258/;"	field
NON_MDICHILD_WINDOW	$ZIGLIB/std/os/windows/win32error.zig	/NON_MDICHILD_WINDOW = 1445/;"	field
NOOP	$ZIGLIB/std/os/linux.zig	/NOOP = 0x1/;"	field
NOPKG	$ZIGLIB/std/os/linux/errno/sparc.zig	/NOPKG = 113/;"	field
NOPLM	$ZIGLIB/std/c/solaris.zig	/pub const NOPLM = 0x00000004/;"	constant
NOPOLICY	$ZIGLIB/std/c/darwin.zig	/NOPOLICY = 103/;"	field
NOPROTOOPT	$ZIGLIB/std/os/wasi.zig	/NOPROTOOPT = 50/;"	field
NORC	$ZIGLIB/std/elf.zig	/NORC = 218/;"	field
NOREMOTELOCK	$ZIGLIB/std/os/linux.zig	/pub const NOREMOTELOCK = (1 << 27)/;"	constant
NORESERVE	$ZIGLIB/std/os/linux/x86_64.zig	/pub const NORESERVE = 0x4000/;"	constant
NOREUSE	$ZIGLIB/std/os/linux.zig	/pub const NOREUSE = 7/;"	constant
NORM	$ZIGLIB/std/c/openbsd.zig	/pub const NORM = RDNORM/;"	constant
NORMAL	$ZIGLIB/std/os/linux.zig	/pub const NORMAL = 0/;"	constant
NORWEGIAN	$ZIGLIB/std/os/windows/lang.zig	/^pub const NORWEGIAN = 0x14/;"	constant
NORWEGIAN_BOKMAL	$ZIGLIB/std/os/windows/sublang.zig	/^pub const NORWEGIAN_BOKMAL = 0x01/;"	constant
NORWEGIAN_NYNORSK	$ZIGLIB/std/os/windows/sublang.zig	/^pub const NORWEGIAN_NYNORSK = 0x02/;"	constant
NOSEC	$ZIGLIB/std/os/linux.zig	/pub const NOSEC = (1 << 28)/;"	constant
NOSIGNAL	$ZIGLIB/std/os/linux.zig	/pub const NOSIGNAL = 0x4000/;"	constant
NOSIGPIPE	$ZIGLIB/std/c/netbsd.zig	/pub const NOSIGPIPE = 0x40000000/;"	constant
NOSPC	$ZIGLIB/std/os/wasi.zig	/NOSPC = 51/;"	field
NOSR	$ZIGLIB/std/os/linux/errno/sparc.zig	/NOSR = 74/;"	field
NOSTR	$ZIGLIB/std/os/linux/errno/sparc.zig	/NOSTR = 72/;"	field
NOSUID	$ZIGLIB/std/os/linux.zig	/pub const NOSUID = 2/;"	constant
NOSUIDCOREDUMP	$ZIGLIB/std/c/openbsd.zig	/pub const NOSUIDCOREDUMP = 32/;"	constant
NOSYNC	$ZIGLIB/std/c/netbsd.zig	/pub const NOSYNC = 0x0800/;"	constant
NOSYNRETRIES	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const NOSYNRETRIES = 9/;"	constant
NOSYS	$ZIGLIB/std/os/wasi.zig	/NOSYS = 52/;"	field
NOTACTIVE	$ZIGLIB/std/c/solaris.zig	/NOTACTIVE = 73/;"	field
NOTBLK	$ZIGLIB/std/os/linux/errno/sparc.zig	/NOTBLK = 15/;"	field
NOTCANCELED	$ZIGLIB/std/c/linux.zig	/NOTCANCELED = -102/;"	field
NOTCAPABLE	$ZIGLIB/std/os/wasi.zig	/NOTCAPABLE = 76/;"	field
NOTCONN	$ZIGLIB/std/os/wasi.zig	/NOTCONN = 53/;"	field
NOTDIR	$ZIGLIB/std/os/wasi.zig	/NOTDIR = 54/;"	field
NOTE	$ZIGLIB/std/macho.zig	/NOTE = 0x31/;"	field
NOTED	$ZIGLIB/std/os/plan9.zig	/NOTED = 29/;"	field
NOTEMPTY	$ZIGLIB/std/os/wasi.zig	/NOTEMPTY = 55/;"	field
NOTE_ABSOLUTE	$ZIGLIB/std/c/darwin.zig	/^pub const NOTE_ABSOLUTE = 0x00000008/;"	constant
NOTE_ABSTIME	$ZIGLIB/std/c/freebsd.zig	/^pub const NOTE_ABSTIME = 0x00000010/;"	constant
NOTE_ATTRIB	$ZIGLIB/std/c/openbsd.zig	/^pub const NOTE_ATTRIB = 0x0008/;"	constant
NOTE_BACKGROUND	$ZIGLIB/std/c/darwin.zig	/^pub const NOTE_BACKGROUND = 0x00000040/;"	constant
NOTE_CHANGE	$ZIGLIB/std/c/openbsd.zig	/^pub const NOTE_CHANGE = 0x00000001/;"	constant
NOTE_CHILD	$ZIGLIB/std/c/openbsd.zig	/^pub const NOTE_CHILD = 0x00000004/;"	constant
NOTE_CLOSE	$ZIGLIB/std/c/freebsd.zig	/^pub const NOTE_CLOSE = 0x00000100/;"	constant
NOTE_CLOSE_WRITE	$ZIGLIB/std/c/freebsd.zig	/^pub const NOTE_CLOSE_WRITE = 0x00000200/;"	constant
NOTE_CRITICAL	$ZIGLIB/std/c/darwin.zig	/^pub const NOTE_CRITICAL = 0x00000020/;"	constant
NOTE_DELETE	$ZIGLIB/std/c/openbsd.zig	/^pub const NOTE_DELETE = 0x0001/;"	constant
NOTE_EOF	$ZIGLIB/std/c/openbsd.zig	/^pub const NOTE_EOF = 0x0002/;"	constant
NOTE_EXEC	$ZIGLIB/std/c/openbsd.zig	/^pub const NOTE_EXEC = 0x20000000/;"	constant
NOTE_EXIT	$ZIGLIB/std/c/openbsd.zig	/^pub const NOTE_EXIT = 0x80000000/;"	constant
NOTE_EXITSTATUS	$ZIGLIB/std/c/darwin.zig	/^pub const NOTE_EXITSTATUS = 0x04000000/;"	constant
NOTE_EXIT_CSERROR	$ZIGLIB/std/c/darwin.zig	/^pub const NOTE_EXIT_CSERROR = 0x00040000/;"	constant
NOTE_EXIT_DECRYPTFAIL	$ZIGLIB/std/c/darwin.zig	/^pub const NOTE_EXIT_DECRYPTFAIL = 0x00010000/;"	constant
NOTE_EXIT_DETAIL	$ZIGLIB/std/c/darwin.zig	/^pub const NOTE_EXIT_DETAIL = 0x02000000/;"	constant
NOTE_EXIT_DETAIL_MASK	$ZIGLIB/std/c/darwin.zig	/^pub const NOTE_EXIT_DETAIL_MASK = 0x00070000/;"	constant
NOTE_EXIT_MEMORY	$ZIGLIB/std/c/darwin.zig	/^pub const NOTE_EXIT_MEMORY = 0x00020000/;"	constant
NOTE_EXTEND	$ZIGLIB/std/c/openbsd.zig	/^pub const NOTE_EXTEND = 0x0004/;"	constant
NOTE_FFAND	$ZIGLIB/std/c/freebsd.zig	/^pub const NOTE_FFAND = 0x40000000/;"	constant
NOTE_FFCOPY	$ZIGLIB/std/c/freebsd.zig	/^pub const NOTE_FFCOPY = 0xc0000000/;"	constant
NOTE_FFCTRLMASK	$ZIGLIB/std/c/freebsd.zig	/^pub const NOTE_FFCTRLMASK = 0xc0000000/;"	constant
NOTE_FFLAGSMASK	$ZIGLIB/std/c/freebsd.zig	/^pub const NOTE_FFLAGSMASK = 0x00ffffff/;"	constant
NOTE_FFNOP	$ZIGLIB/std/c/freebsd.zig	/^pub const NOTE_FFNOP = 0x00000000/;"	constant
NOTE_FFOR	$ZIGLIB/std/c/freebsd.zig	/^pub const NOTE_FFOR = 0x80000000/;"	constant
NOTE_FILE_POLL	$ZIGLIB/std/c/freebsd.zig	/^pub const NOTE_FILE_POLL = 0x00000002/;"	constant
NOTE_FORK	$ZIGLIB/std/c/openbsd.zig	/^pub const NOTE_FORK = 0x40000000/;"	constant
NOTE_FUNLOCK	$ZIGLIB/std/c/darwin.zig	/^pub const NOTE_FUNLOCK = 0x00000100/;"	constant
NOTE_LEEWAY	$ZIGLIB/std/c/darwin.zig	/^pub const NOTE_LEEWAY = 0x00000010/;"	constant
NOTE_LINK	$ZIGLIB/std/c/openbsd.zig	/^pub const NOTE_LINK = 0x0010/;"	constant
NOTE_LOWAT	$ZIGLIB/std/c/openbsd.zig	/^pub const NOTE_LOWAT = 0x0001/;"	constant
NOTE_MACHTIME	$ZIGLIB/std/c/darwin.zig	/^pub const NOTE_MACHTIME = 0x00000100/;"	constant
NOTE_MACH_CONTINUOUS_TIME	$ZIGLIB/std/c/darwin.zig	/^pub const NOTE_MACH_CONTINUOUS_TIME = 0x00000080/;"	constant
NOTE_MSECONDS	$ZIGLIB/std/c/freebsd.zig	/^pub const NOTE_MSECONDS = 0x00000002/;"	constant
NOTE_NONE	$ZIGLIB/std/c/darwin.zig	/^pub const NOTE_NONE = 0x00000080/;"	constant
NOTE_NSECONDS	$ZIGLIB/std/c/freebsd.zig	/^pub const NOTE_NSECONDS = 0x00000008/;"	constant
NOTE_OOB	$ZIGLIB/std/c/openbsd.zig	/^pub const NOTE_OOB = 0x0004/;"	constant
NOTE_OPEN	$ZIGLIB/std/c/freebsd.zig	/^pub const NOTE_OPEN = 0x00000080/;"	constant
NOTE_PCTRLMASK	$ZIGLIB/std/c/openbsd.zig	/^pub const NOTE_PCTRLMASK = 0xf0000000/;"	constant
NOTE_PDATAMASK	$ZIGLIB/std/c/openbsd.zig	/^pub const NOTE_PDATAMASK = 0x000fffff/;"	constant
NOTE_READ	$ZIGLIB/std/c/freebsd.zig	/^pub const NOTE_READ = 0x00000400/;"	constant
NOTE_RENAME	$ZIGLIB/std/c/openbsd.zig	/^pub const NOTE_RENAME = 0x0020/;"	constant
NOTE_REVOKE	$ZIGLIB/std/c/openbsd.zig	/^pub const NOTE_REVOKE = 0x0040/;"	constant
NOTE_SECONDS	$ZIGLIB/std/c/freebsd.zig	/^pub const NOTE_SECONDS = 0x00000001/;"	constant
NOTE_SIGNAL	$ZIGLIB/std/c/darwin.zig	/^pub const NOTE_SIGNAL = 0x08000000/;"	constant
NOTE_TRACK	$ZIGLIB/std/c/openbsd.zig	/^pub const NOTE_TRACK = 0x00000001/;"	constant
NOTE_TRACKERR	$ZIGLIB/std/c/openbsd.zig	/^pub const NOTE_TRACKERR = 0x00000002/;"	constant
NOTE_TRIGGER	$ZIGLIB/std/c/netbsd.zig	/^pub const NOTE_TRIGGER = 0x08000000/;"	constant
NOTE_TRUNCATE	$ZIGLIB/std/c/openbsd.zig	/^pub const NOTE_TRUNCATE = 0x0080/;"	constant
NOTE_USECONDS	$ZIGLIB/std/c/freebsd.zig	/^pub const NOTE_USECONDS = 0x00000004/;"	constant
NOTE_VM_ERROR	$ZIGLIB/std/c/darwin.zig	/^pub const NOTE_VM_ERROR = 0x10000000/;"	constant
NOTE_VM_PRESSURE	$ZIGLIB/std/c/darwin.zig	/^pub const NOTE_VM_PRESSURE = 0x80000000/;"	constant
NOTE_VM_PRESSURE_SUDDEN_TERMINATE	$ZIGLIB/std/c/darwin.zig	/^pub const NOTE_VM_PRESSURE_SUDDEN_TERMINATE = 0x20000000/;"	constant
NOTE_VM_PRESSURE_TERMINATE	$ZIGLIB/std/c/darwin.zig	/^pub const NOTE_VM_PRESSURE_TERMINATE = 0x40000000/;"	constant
NOTE_WRITE	$ZIGLIB/std/c/openbsd.zig	/^pub const NOTE_WRITE = 0x0002/;"	constant
NOTHING_TO_TERMINATE	$ZIGLIB/std/os/windows/win32error.zig	/NOTHING_TO_TERMINATE = 758/;"	field
NOTICE	$ZIGLIB/std/os.zig	/pub const NOTICE = 5/;"	constant
NOTIFICATION_GUID_ALREADY_DEFINED	$ZIGLIB/std/os/windows/win32error.zig	/NOTIFICATION_GUID_ALREADY_DEFINED = 309/;"	field
NOTIFY	$ZIGLIB/std/os/plan9.zig	/NOTIFY = 28/;"	field
NOTIFY_CLEANUP	$ZIGLIB/std/os/windows/win32error.zig	/NOTIFY_CLEANUP = 745/;"	field
NOTIFY_ENUM_DIR	$ZIGLIB/std/os/windows/win32error.zig	/NOTIFY_ENUM_DIR = 1022/;"	field
NOTNAM	$ZIGLIB/std/os/linux/errno/sparc.zig	/NOTNAM = 118/;"	field
NOTRAVERSE	$ZIGLIB/std/c/haiku.zig	/pub const NOTRAVERSE = 0x2000/;"	constant
NOTRECOVERABLE	$ZIGLIB/std/os/wasi.zig	/NOTRECOVERABLE = 56/;"	field
NOTSENT_LOWAT	$ZIGLIB/std/os/linux.zig	/pub const NOTSENT_LOWAT = 25/;"	constant
NOTSOCK	$ZIGLIB/std/os/wasi.zig	/NOTSOCK = 57/;"	field
NOTSUP	$ZIGLIB/std/c/windows.zig	/NOTSUP = 129/;"	field
NOTTY	$ZIGLIB/std/os/wasi.zig	/NOTTY = 59/;"	field
NOTUNIQ	$ZIGLIB/std/os/linux/errno/sparc.zig	/NOTUNIQ = 115/;"	field
NOT_ALLOWED_ON_SYSTEM_FILE	$ZIGLIB/std/os/windows/win32error.zig	/NOT_ALLOWED_ON_SYSTEM_FILE = 313/;"	field
NOT_ALL_ASSIGNED	$ZIGLIB/std/os/windows/win32error.zig	/NOT_ALL_ASSIGNED = 1300/;"	field
NOT_AUTHENTICATED	$ZIGLIB/std/os/windows/win32error.zig	/NOT_AUTHENTICATED = 1244/;"	field
NOT_A_DIRECTORY	$ZIGLIB/std/os/windows/ntstatus.zig	/NOT_A_DIRECTORY = 0xC0000103/;"	field
NOT_A_REPARSE_POINT	$ZIGLIB/std/os/windows/ntstatus.zig	/NOT_A_REPARSE_POINT = 0xC0000275/;"	field
NOT_CAPABLE	$ZIGLIB/std/os/windows/win32error.zig	/NOT_CAPABLE = 775/;"	field
NOT_CHILD_WINDOW	$ZIGLIB/std/os/windows/win32error.zig	/NOT_CHILD_WINDOW = 1442/;"	field
NOT_CLIENT_SESSION	$ZIGLIB/std/os/windows/ntstatus.zig	/NOT_CLIENT_SESSION = 0xC0000217/;"	field
NOT_COMMITTED	$ZIGLIB/std/os/windows/ntstatus.zig	/NOT_COMMITTED = 0xC000002D/;"	field
NOT_CONNECTED	$ZIGLIB/std/os/windows/win32error.zig	/NOT_CONNECTED = 2250/;"	field
NOT_CONTAINER	$ZIGLIB/std/os/windows/win32error.zig	/NOT_CONTAINER = 1207/;"	field
NOT_DEPRESSED	$ZIGLIB/std/c/darwin.zig	/NOT_DEPRESSED = 36/;"	field
NOT_DOS_DISK	$ZIGLIB/std/os/windows/win32error.zig	/NOT_DOS_DISK = 26/;"	field
NOT_ENOUGH_MEMORY	$ZIGLIB/std/os/windows/win32error.zig	/NOT_ENOUGH_MEMORY = 8/;"	field
NOT_ENOUGH_QUOTA	$ZIGLIB/std/os/windows/win32error.zig	/NOT_ENOUGH_QUOTA = 1816/;"	field
NOT_ENOUGH_SERVER_MEMORY	$ZIGLIB/std/os/windows/win32error.zig	/NOT_ENOUGH_SERVER_MEMORY = 1130/;"	field
NOT_EXPORT_FORMAT	$ZIGLIB/std/os/windows/ntstatus.zig	/NOT_EXPORT_FORMAT = 0xC0000292/;"	field
NOT_FOUND	$ZIGLIB/std/os/windows/win32error.zig	/NOT_FOUND = 1168/;"	field
NOT_GUI_PROCESS	$ZIGLIB/std/os/windows/win32error.zig	/NOT_GUI_PROCESS = 1471/;"	field
NOT_IMPLEMENTED	$ZIGLIB/std/os/windows/ntstatus.zig	/NOT_IMPLEMENTED = 0xC0000002/;"	field
NOT_IN_SET	$ZIGLIB/std/c/darwin.zig	/NOT_IN_SET = 12/;"	field
NOT_JOINED	$ZIGLIB/std/os/windows/win32error.zig	/NOT_JOINED = 136/;"	field
NOT_LOCKED	$ZIGLIB/std/os/windows/win32error.zig	/NOT_LOCKED = 158/;"	field
NOT_LOGGED_ON	$ZIGLIB/std/os/windows/win32error.zig	/NOT_LOGGED_ON = 1245/;"	field
NOT_LOGON_PROCESS	$ZIGLIB/std/os/windows/win32error.zig	/NOT_LOGON_PROCESS = 1362/;"	field
NOT_MAPPED_DATA	$ZIGLIB/std/os/windows/ntstatus.zig	/NOT_MAPPED_DATA = 0xC0000088/;"	field
NOT_MAPPED_VIEW	$ZIGLIB/std/os/windows/ntstatus.zig	/NOT_MAPPED_VIEW = 0xC0000019/;"	field
NOT_OWNER	$ZIGLIB/std/os/windows/win32error.zig	/NOT_OWNER = 288/;"	field
NOT_READY	$ZIGLIB/std/os/windows/win32error.zig	/NOT_READY = 21/;"	field
NOT_READ_FROM_COPY	$ZIGLIB/std/os/windows/win32error.zig	/NOT_READ_FROM_COPY = 337/;"	field
NOT_RECEIVER	$ZIGLIB/std/c/darwin.zig	/NOT_RECEIVER = 7/;"	field
NOT_REDUNDANT_STORAGE	$ZIGLIB/std/os/windows/win32error.zig	/NOT_REDUNDANT_STORAGE = 333/;"	field
NOT_REGISTRY_FILE	$ZIGLIB/std/os/windows/win32error.zig	/NOT_REGISTRY_FILE = 1017/;"	field
NOT_SAFEBOOT_SERVICE	$ZIGLIB/std/os/windows/win32error.zig	/NOT_SAFEBOOT_SERVICE = 1084/;"	field
NOT_SAFE_MODE_DRIVER	$ZIGLIB/std/os/windows/win32error.zig	/NOT_SAFE_MODE_DRIVER = 646/;"	field
NOT_SAME_DEVICE	$ZIGLIB/std/os/windows/win32error.zig	/NOT_SAME_DEVICE = 17/;"	field
NOT_SERVER_SESSION	$ZIGLIB/std/os/windows/ntstatus.zig	/NOT_SERVER_SESSION = 0xC0000216/;"	field
NOT_SNAPSHOT_VOLUME	$ZIGLIB/std/os/windows/ntstatus.zig	/NOT_SNAPSHOT_VOLUME = 0xC0190047/;"	field
NOT_SUBSTED	$ZIGLIB/std/os/windows/win32error.zig	/NOT_SUBSTED = 137/;"	field
NOT_SUPPORTED	$ZIGLIB/std/os/windows/win32error.zig	/NOT_SUPPORTED = 50/;"	field
NOT_SUPPORTED_ON_SBS	$ZIGLIB/std/os/windows/win32error.zig	/NOT_SUPPORTED_ON_SBS = 1254/;"	field
NOT_TINY_STREAM	$ZIGLIB/std/os/windows/win32error.zig	/NOT_TINY_STREAM = 598/;"	field
NOT_WAITING	$ZIGLIB/std/c/darwin.zig	/NOT_WAITING = 48/;"	field
NOURG	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const NOURG = 7/;"	constant
NOUSER	$ZIGLIB/std/os/linux.zig	/pub const NOUSER = (1 << 31)/;"	constant
NOVMON	$ZIGLIB/std/c/haiku.zig	/NOVMON = 7/;"	field
NOWAIT	$ZIGLIB/std/os/linux.zig	/pub const NOWAIT: kernel_rwf = 0x00000008/;"	constant
NO_ACCESS	$ZIGLIB/std/c/darwin.zig	/NO_ACCESS = 8/;"	field
NO_ACE_CONDITION	$ZIGLIB/std/os/windows/win32error.zig	/NO_ACE_CONDITION = 804/;"	field
NO_ASSOCIATION	$ZIGLIB/std/os/windows/win32error.zig	/NO_ASSOCIATION = 1155/;"	field
NO_AUTOMOUNT	$ZIGLIB/std/os/linux.zig	/pub const NO_AUTOMOUNT = 0x800/;"	constant
NO_BIND	$ZIGLIB/std/coff.zig	/NO_BIND: u1 = 0/;"	field
NO_BROWSER_SERVERS_FOUND	$ZIGLIB/std/os/windows/ntstatus.zig	/NO_BROWSER_SERVERS_FOUND = 0xC000021C/;"	field
NO_CALLBACK_ACTIVE	$ZIGLIB/std/os/windows/win32error.zig	/NO_CALLBACK_ACTIVE = 614/;"	field
NO_CHECK	$ZIGLIB/std/os/linux.zig	/pub const NO_CHECK = 11/;"	constant
NO_CYCLES	$ZIGLIB/std/os/linux.zig	/pub const NO_CYCLES = 1 << 15/;"	constant
NO_DATA	$ZIGLIB/std/os/windows/win32error.zig	/NO_DATA = 232/;"	field
NO_DATA_DETECTED	$ZIGLIB/std/os/windows/win32error.zig	/NO_DATA_DETECTED = 1104/;"	field
NO_DDP	$ZIGLIB/std/c/freebsd.zig	/pub const NO_DDP = 0x00008000/;"	constant
NO_EAS_ON_FILE	$ZIGLIB/std/os/windows/ntstatus.zig	/NO_EAS_ON_FILE = 0xC0000052/;"	field
NO_EFS	$ZIGLIB/std/os/windows/ntstatus.zig	/NO_EFS = 0xC000028E/;"	field
NO_EVENT_PAIR	$ZIGLIB/std/os/windows/win32error.zig	/NO_EVENT_PAIR = 580/;"	field
NO_FLAGS	$ZIGLIB/std/os/linux.zig	/pub const NO_FLAGS = 1 << 14/;"	constant
NO_GUID_TRANSLATION	$ZIGLIB/std/os/windows/win32error.zig	/NO_GUID_TRANSLATION = 560/;"	field
NO_IMPERSONATION_TOKEN	$ZIGLIB/std/os/windows/win32error.zig	/NO_IMPERSONATION_TOKEN = 1309/;"	field
NO_INHERITANCE	$ZIGLIB/std/os/windows/win32error.zig	/NO_INHERITANCE = 1391/;"	field
NO_IP_ADDRESSES	$ZIGLIB/std/os/windows/ntstatus.zig	/NO_IP_ADDRESSES = 0xC00002F1/;"	field
NO_ISOLATION	$ZIGLIB/std/coff.zig	/NO_ISOLATION: u1 = 0/;"	field
NO_KERB_KEY	$ZIGLIB/std/os/windows/ntstatus.zig	/NO_KERB_KEY = 0xC0000322/;"	field
NO_LDT	$ZIGLIB/std/os/windows/ntstatus.zig	/NO_LDT = 0xC0000117/;"	field
NO_LINK_TRACKING_IN_TRANSACTION	$ZIGLIB/std/os/windows/ntstatus.zig	/NO_LINK_TRACKING_IN_TRANSACTION = 0xC0190059/;"	field
NO_LOGON_SERVERS	$ZIGLIB/std/os/windows/win32error.zig	/NO_LOGON_SERVERS = 1311/;"	field
NO_LOG_SPACE	$ZIGLIB/std/os/windows/win32error.zig	/NO_LOG_SPACE = 1019/;"	field
NO_MATCH	$ZIGLIB/std/os/windows/win32error.zig	/NO_MATCH = 1169/;"	field
NO_MEDIA	$ZIGLIB/std/os/windows/ntstatus.zig	/NO_MEDIA = 0xC0000178/;"	field
NO_MEDIA_IN_DEVICE	$ZIGLIB/std/os/windows/ntstatus.zig	/NO_MEDIA_IN_DEVICE = 0xC0000013/;"	field
NO_MEDIA_IN_DRIVE	$ZIGLIB/std/os/windows/win32error.zig	/NO_MEDIA_IN_DRIVE = 1112/;"	field
NO_MEMORY	$ZIGLIB/std/os/windows/ntstatus.zig	/NO_MEMORY = 0xC0000017/;"	field
NO_MORE_DEVICES	$ZIGLIB/std/os/windows/win32error.zig	/NO_MORE_DEVICES = 1248/;"	field
NO_MORE_EAS	$ZIGLIB/std/os/windows/ntstatus.zig	/NO_MORE_EAS = 0x80000012/;"	field
NO_MORE_ENTRIES	$ZIGLIB/std/os/windows/ntstatus.zig	/NO_MORE_ENTRIES = 0x8000001A/;"	field
NO_MORE_FILES	$ZIGLIB/std/os/windows/win32error.zig	/NO_MORE_FILES = 18/;"	field
NO_MORE_ITEMS	$ZIGLIB/std/os/windows/win32error.zig	/NO_MORE_ITEMS = 259/;"	field
NO_MORE_MATCHES	$ZIGLIB/std/os/windows/win32error.zig	/NO_MORE_MATCHES = 626/;"	field
NO_MORE_SEARCH_HANDLES	$ZIGLIB/std/os/windows/win32error.zig	/NO_MORE_SEARCH_HANDLES = 113/;"	field
NO_MORE_USER_HANDLES	$ZIGLIB/std/os/windows/win32error.zig	/NO_MORE_USER_HANDLES = 1158/;"	field
NO_NETWORK	$ZIGLIB/std/os/windows/win32error.zig	/NO_NETWORK = 1222/;"	field
NO_NET_OR_BAD_PATH	$ZIGLIB/std/os/windows/win32error.zig	/NO_NET_OR_BAD_PATH = 1203/;"	field
NO_NVRAM_RESOURCES	$ZIGLIB/std/os/windows/win32error.zig	/NO_NVRAM_RESOURCES = 1470/;"	field
NO_OFFLOAD	$ZIGLIB/std/c/freebsd.zig	/pub const NO_OFFLOAD = 0x00004000/;"	constant
NO_PAGEFILE	$ZIGLIB/std/os/windows/win32error.zig	/NO_PAGEFILE = 578/;"	field
NO_PA_DATA	$ZIGLIB/std/os/windows/ntstatus.zig	/NO_PA_DATA = 0xC00002F8/;"	field
NO_PROC_SLOTS	$ZIGLIB/std/os/windows/win32error.zig	/NO_PROC_SLOTS = 89/;"	field
NO_QUOTAS_FOR_ACCOUNT	$ZIGLIB/std/os/windows/win32error.zig	/NO_QUOTAS_FOR_ACCOUNT = 1302/;"	field
NO_RANGES_PROCESSED	$ZIGLIB/std/os/windows/win32error.zig	/NO_RANGES_PROCESSED = 312/;"	field
NO_RECOVERY_POLICY	$ZIGLIB/std/os/windows/ntstatus.zig	/NO_RECOVERY_POLICY = 0xC000028D/;"	field
NO_RECOVERY_PROGRAM	$ZIGLIB/std/os/windows/win32error.zig	/NO_RECOVERY_PROGRAM = 1082/;"	field
NO_S4U_PROT_SUPPORT	$ZIGLIB/std/os/windows/ntstatus.zig	/NO_S4U_PROT_SUPPORT = 0xC000040A/;"	field
NO_SAVEPOINT_WITH_OPEN_FILES	$ZIGLIB/std/os/windows/ntstatus.zig	/NO_SAVEPOINT_WITH_OPEN_FILES = 0xC0190048/;"	field
NO_SCROLLBARS	$ZIGLIB/std/os/windows/win32error.zig	/NO_SCROLLBARS = 1447/;"	field
NO_SECRETS	$ZIGLIB/std/os/windows/ntstatus.zig	/NO_SECRETS = 0xC0000371/;"	field
NO_SECURITY_CONTEXT	$ZIGLIB/std/os/windows/ntstatus.zig	/NO_SECURITY_CONTEXT = 0xC000042D/;"	field
NO_SECURITY_ON_OBJECT	$ZIGLIB/std/os/windows/win32error.zig	/NO_SECURITY_ON_OBJECT = 1350/;"	field
NO_SEH	$ZIGLIB/std/coff.zig	/NO_SEH: u1 = 0/;"	field
NO_SHUTDOWN_IN_PROGRESS	$ZIGLIB/std/os/windows/win32error.zig	/NO_SHUTDOWN_IN_PROGRESS = 1116/;"	field
NO_SIGNAL_SENT	$ZIGLIB/std/os/windows/win32error.zig	/NO_SIGNAL_SENT = 205/;"	field
NO_SITENAME	$ZIGLIB/std/os/windows/win32error.zig	/NO_SITENAME = 1919/;"	field
NO_SPACE	$ZIGLIB/std/c/darwin.zig	/NO_SPACE = 3/;"	field
NO_SPOOL_SPACE	$ZIGLIB/std/os/windows/win32error.zig	/NO_SPOOL_SPACE = 62/;"	field
NO_SUCH_ALIAS	$ZIGLIB/std/os/windows/win32error.zig	/NO_SUCH_ALIAS = 1376/;"	field
NO_SUCH_DEVICE	$ZIGLIB/std/os/windows/ntstatus.zig	/NO_SUCH_DEVICE = 0xC000000E/;"	field
NO_SUCH_DOMAIN	$ZIGLIB/std/os/windows/win32error.zig	/NO_SUCH_DOMAIN = 1355/;"	field
NO_SUCH_FILE	$ZIGLIB/std/os/windows/ntstatus.zig	/NO_SUCH_FILE = 0xC000000F/;"	field
NO_SUCH_GROUP	$ZIGLIB/std/os/windows/win32error.zig	/NO_SUCH_GROUP = 1319/;"	field
NO_SUCH_LOGON_SESSION	$ZIGLIB/std/os/windows/win32error.zig	/NO_SUCH_LOGON_SESSION = 1312/;"	field
NO_SUCH_MEMBER	$ZIGLIB/std/os/windows/win32error.zig	/NO_SUCH_MEMBER = 1387/;"	field
NO_SUCH_PACKAGE	$ZIGLIB/std/os/windows/win32error.zig	/NO_SUCH_PACKAGE = 1364/;"	field
NO_SUCH_PRIVILEGE	$ZIGLIB/std/os/windows/win32error.zig	/NO_SUCH_PRIVILEGE = 1313/;"	field
NO_SUCH_SITE	$ZIGLIB/std/os/windows/win32error.zig	/NO_SUCH_SITE = 1249/;"	field
NO_SUCH_USER	$ZIGLIB/std/os/windows/win32error.zig	/NO_SUCH_USER = 1317/;"	field
NO_SYSTEM_MENU	$ZIGLIB/std/os/windows/win32error.zig	/NO_SYSTEM_MENU = 1437/;"	field
NO_SYSTEM_RESOURCES	$ZIGLIB/std/os/windows/win32error.zig	/NO_SYSTEM_RESOURCES = 1450/;"	field
NO_TGT_REPLY	$ZIGLIB/std/os/windows/ntstatus.zig	/NO_TGT_REPLY = 0xC00002EF/;"	field
NO_TOKEN	$ZIGLIB/std/os/windows/win32error.zig	/NO_TOKEN = 1008/;"	field
NO_TRACKING_SERVICE	$ZIGLIB/std/os/windows/win32error.zig	/NO_TRACKING_SERVICE = 1172/;"	field
NO_TRUST_LSA_SECRET	$ZIGLIB/std/os/windows/win32error.zig	/NO_TRUST_LSA_SECRET = 1786/;"	field
NO_TRUST_SAM_ACCOUNT	$ZIGLIB/std/os/windows/win32error.zig	/NO_TRUST_SAM_ACCOUNT = 1787/;"	field
NO_TX	$ZIGLIB/std/os/linux.zig	/pub const NO_TX = 1 << 9/;"	constant
NO_TXF_METADATA	$ZIGLIB/std/os/windows/ntstatus.zig	/NO_TXF_METADATA = 0x80190029/;"	field
NO_UNICODE_TRANSLATION	$ZIGLIB/std/os/windows/win32error.zig	/NO_UNICODE_TRANSLATION = 1113/;"	field
NO_USER_KEYS	$ZIGLIB/std/os/windows/ntstatus.zig	/NO_USER_KEYS = 0xC0000290/;"	field
NO_USER_SESSION_KEY	$ZIGLIB/std/os/windows/win32error.zig	/NO_USER_SESSION_KEY = 1394/;"	field
NO_VOLUME_ID	$ZIGLIB/std/os/windows/win32error.zig	/NO_VOLUME_ID = 1173/;"	field
NO_VOLUME_LABEL	$ZIGLIB/std/os/windows/win32error.zig	/NO_VOLUME_LABEL = 125/;"	field
NO_WILDCARD_CHARACTERS	$ZIGLIB/std/os/windows/win32error.zig	/NO_WILDCARD_CHARACTERS = 1417/;"	field
NO_YIELD_PERFORMED	$ZIGLIB/std/os/windows/win32error.zig	/NO_YIELD_PERFORMED = 721/;"	field
NPRIV	$ZIGLIB/std/c/solaris.zig	/pub const NPRIV = 16/;"	constant
NPROC	$ZIGLIB/std/os/linux/sparc64.zig	/NPROC/;"	field
NPROCESSORS_ONLN	$ZIGLIB/std/c/solaris.zig	/pub const NPROCESSORS_ONLN = 15/;"	constant
NPROCS	$ZIGLIB/std/c/openbsd.zig	/pub const NPROCS = 47/;"	constant
NPTS	$ZIGLIB/std/c/freebsd.zig	/NPTS = 11/;"	field
NREAD	$ZIGLIB/std/c/darwin.zig	/pub const NREAD = 0x1020/;"	constant
NS32K	$ZIGLIB/std/elf.zig	/NS32K = 97/;"	field
NSELCOLL	$ZIGLIB/std/c/openbsd.zig	/pub const NSELCOLL = 43/;"	constant
NSIG	$ZIGLIB/std/os/linux.zig	/^pub const NSIG = if (is_mips) 128 else 65/;"	constant
NSRBADFAMILY	$ZIGLIB/std/os/linux/errno/generic.zig	/NSRBADFAMILY = 168/;"	field
NSRBADNAME	$ZIGLIB/std/os/linux/errno/generic.zig	/NSRBADNAME = 167/;"	field
NSRBADQUERY	$ZIGLIB/std/os/linux/errno/generic.zig	/NSRBADQUERY = 166/;"	field
NSRBADRESP	$ZIGLIB/std/os/linux/errno/generic.zig	/NSRBADRESP = 169/;"	field
NSRCNAMELOOP	$ZIGLIB/std/os/linux/errno/generic.zig	/NSRCNAMELOOP = 177/;"	field
NSRCONNREFUSED	$ZIGLIB/std/os/linux/errno/generic.zig	/NSRCONNREFUSED = 170/;"	field
NSRDESTRUCTION	$ZIGLIB/std/os/linux/errno/generic.zig	/NSRDESTRUCTION = 175/;"	field
NSRFILE	$ZIGLIB/std/os/linux/errno/generic.zig	/NSRFILE = 173/;"	field
NSRFORMERR	$ZIGLIB/std/os/linux/errno/generic.zig	/NSRFORMERR = 161/;"	field
NSRNODATA	$ZIGLIB/std/os/linux/errno/generic.zig	/NSRNODATA = 160/;"	field
NSRNOMEM	$ZIGLIB/std/os/linux/errno/generic.zig	/NSRNOMEM = 174/;"	field
NSRNOTFOUND	$ZIGLIB/std/os/linux/errno/generic.zig	/NSRNOTFOUND = 163/;"	field
NSRNOTIMP	$ZIGLIB/std/os/linux/errno/generic.zig	/NSRNOTIMP = 164/;"	field
NSROF	$ZIGLIB/std/os/linux/errno/generic.zig	/NSROF = 172/;"	field
NSRQUERYDOMAINTOOLONG	$ZIGLIB/std/os/linux/errno/generic.zig	/NSRQUERYDOMAINTOOLONG = 176/;"	field
NSRREFUSED	$ZIGLIB/std/os/linux/errno/generic.zig	/NSRREFUSED = 165/;"	field
NSRSERVFAIL	$ZIGLIB/std/os/linux/errno/generic.zig	/NSRSERVFAIL = 162/;"	field
NSRTIMEOUT	$ZIGLIB/std/os/linux/errno/generic.zig	/NSRTIMEOUT = 171/;"	field
NSTYPE_DYNAMIC	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const NSTYPE_DYNAMIC = 2/;"	constant
NSTYPE_ENUMERABLE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const NSTYPE_ENUMERABLE = 4/;"	constant
NSTYPE_HIERARCHICAL	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const NSTYPE_HIERARCHICAL = 1/;"	constant
NSTYPE_WORKGROUP	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const NSTYPE_WORKGROUP = 8/;"	constant
NS_ALL	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const NS_ALL = 0/;"	constant
NS_DEFAULT	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const NS_DEFAULT = 0/;"	constant
NS_DHCP	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const NS_DHCP = 6/;"	constant
NS_DNS	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const NS_DNS = 12/;"	constant
NS_EMAIL	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const NS_EMAIL = 37/;"	constant
NS_LOCALNAME	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const NS_LOCALNAME = 19/;"	constant
NS_MS	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const NS_MS = 30/;"	constant
NS_NBP	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const NS_NBP = 20/;"	constant
NS_NDS	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const NS_NDS = 2/;"	constant
NS_NETBT	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const NS_NETBT = 13/;"	constant
NS_NETDES	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const NS_NETDES = 60/;"	constant
NS_NIS	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const NS_NIS = 41/;"	constant
NS_NISPLUS	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const NS_NISPLUS = 42/;"	constant
NS_NLA	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const NS_NLA = 15/;"	constant
NS_NTDS	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const NS_NTDS = 32/;"	constant
NS_PEER_BROWSE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const NS_PEER_BROWSE = 3/;"	constant
NS_SAP	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const NS_SAP = 1/;"	constant
NS_SLP	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const NS_SLP = 5/;"	constant
NS_STDA	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const NS_STDA = 31/;"	constant
NS_TCPIP_HOSTS	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const NS_TCPIP_HOSTS = 11/;"	constant
NS_TCPIP_LOCAL	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const NS_TCPIP_LOCAL = 10/;"	constant
NS_VNS	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const NS_VNS = 50/;"	constant
NS_WINS	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const NS_WINS = 14/;"	constant
NS_WRQ	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const NS_WRQ = 50/;"	constant
NS_X500	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const NS_X500 = 40/;"	constant
NTHR	$ZIGLIB/std/c/netbsd.zig	/NTHR = 11/;"	field
NTHREADS	$ZIGLIB/std/c/openbsd.zig	/pub const NTHREADS = 26/;"	constant
NTLM_BLOCKED	$ZIGLIB/std/os/windows/win32error.zig	/NTLM_BLOCKED = 1937/;"	field
NTP_PLL	$ZIGLIB/std/c/dragonfly.zig	/pub const NTP_PLL = 25/;"	constant
NTSTATUS	$ZIGLIB/std/os/windows/ntstatus.zig	/^pub const NTSTATUS = enum(u32) {$/;"	enum
NT_CROSS_ENCRYPTION_REQUIRED	$ZIGLIB/std/os/windows/win32error.zig	/NT_CROSS_ENCRYPTION_REQUIRED = 1386/;"	field
NT_PRODUCT_TYPE	$ZIGLIB/std/os/windows.zig	/^pub const NT_PRODUCT_TYPE = enum(INT) {$/;"	enum
NT_TIB	$ZIGLIB/std/os/windows.zig	/^pub const NT_TIB = extern struct {$/;"	struct
NULL	$ZIGLIB/std/coff.zig	/NULL = 0/;"	field
NULL_LM_PASSWORD	$ZIGLIB/std/os/windows/win32error.zig	/NULL_LM_PASSWORD = 1304/;"	field
NUMBER	$ZIGLIB/std/c/darwin.zig	/NUMBER = 6/;"	field
NUMERICHOST	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const NUMERICHOST = 4/;"	constant
NUMERICSCOPE	$ZIGLIB/std/c/solaris.zig	/pub const NUMERICSCOPE = 0x0040/;"	constant
NUMERICSERV	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const NUMERICSERV = 8/;"	constant
NUMVNODES	$ZIGLIB/std/c/openbsd.zig	/pub const NUMVNODES = 58/;"	constant
NUM_RX_QUEUES	$ZIGLIB/std/os/linux.zig	/NUM_RX_QUEUES/;"	field
NUM_TX_QUEUES	$ZIGLIB/std/os/linux.zig	/NUM_TX_QUEUES/;"	field
NUM_VF	$ZIGLIB/std/os/linux.zig	/NUM_VF/;"	field
NVAL	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const NVAL = 4/;"	constant
NVPII	$ZIGLIB/std/c/freebsd.zig	/pub const NVPII = 11/;"	constant
NWAKE_PRIVATE	$ZIGLIB/std/c/freebsd.zig	/NWAKE_PRIVATE = 31/;"	field
NWRITE	$ZIGLIB/std/c/darwin.zig	/pub const NWRITE = 0x1024/;"	constant
NXIO	$ZIGLIB/std/os/wasi.zig	/NXIO = 60/;"	field
NXSupportPolicy	$ZIGLIB/std/os/windows.zig	/NXSupportPolicy: u2/;"	field
NX_COMPAT	$ZIGLIB/std/coff.zig	/NX_COMPAT: u1 = 0/;"	field
NX_ENABLED	$ZIGLIB/std/os/windows.zig	/NX_ENABLED = 12/;"	field
N_ABS	$ZIGLIB/std/macho.zig	/^pub const N_ABS = 0x2/;"	constant
N_AST	$ZIGLIB/std/macho.zig	/^pub const N_AST = 0x32/;"	constant
N_BCOMM	$ZIGLIB/std/macho.zig	/^pub const N_BCOMM = 0xe2/;"	constant
N_BINCL	$ZIGLIB/std/macho.zig	/^pub const N_BINCL = 0x82/;"	constant
N_BNSYM	$ZIGLIB/std/macho.zig	/^pub const N_BNSYM = 0x2e/;"	constant
N_DESC_DISCARDED	$ZIGLIB/std/macho.zig	/^pub const N_DESC_DISCARDED: u16 = 0x20/;"	constant
N_ECOML	$ZIGLIB/std/macho.zig	/^pub const N_ECOML = 0xe8/;"	constant
N_ECOMM	$ZIGLIB/std/macho.zig	/^pub const N_ECOMM = 0xe4/;"	constant
N_EINCL	$ZIGLIB/std/macho.zig	/^pub const N_EINCL = 0xa2/;"	constant
N_ENSYM	$ZIGLIB/std/macho.zig	/^pub const N_ENSYM = 0x4e/;"	constant
N_ENTRY	$ZIGLIB/std/macho.zig	/^pub const N_ENTRY = 0xa4/;"	constant
N_EXCL	$ZIGLIB/std/macho.zig	/^pub const N_EXCL = 0xc2/;"	constant
N_EXT	$ZIGLIB/std/macho.zig	/^pub const N_EXT = 0x01/;"	constant
N_FNAME	$ZIGLIB/std/macho.zig	/^pub const N_FNAME = 0x22/;"	constant
N_FUN	$ZIGLIB/std/macho.zig	/^pub const N_FUN = 0x24/;"	constant
N_GSYM	$ZIGLIB/std/macho.zig	/^pub const N_GSYM = 0x20/;"	constant
N_INDR	$ZIGLIB/std/macho.zig	/^pub const N_INDR = 0xa/;"	constant
N_LBRAC	$ZIGLIB/std/macho.zig	/^pub const N_LBRAC = 0xc0/;"	constant
N_LCSYM	$ZIGLIB/std/macho.zig	/^pub const N_LCSYM = 0x28/;"	constant
N_LENG	$ZIGLIB/std/macho.zig	/^pub const N_LENG = 0xfe/;"	constant
N_LSYM	$ZIGLIB/std/macho.zig	/^pub const N_LSYM = 0x80/;"	constant
N_OLEVEL	$ZIGLIB/std/macho.zig	/^pub const N_OLEVEL = 0x8A/;"	constant
N_OPT	$ZIGLIB/std/macho.zig	/^pub const N_OPT = 0x3c/;"	constant
N_OSO	$ZIGLIB/std/macho.zig	/^pub const N_OSO = 0x66/;"	constant
N_PARAMS	$ZIGLIB/std/macho.zig	/^pub const N_PARAMS = 0x86/;"	constant
N_PBUD	$ZIGLIB/std/macho.zig	/^pub const N_PBUD = 0xc/;"	constant
N_PEXT	$ZIGLIB/std/macho.zig	/^pub const N_PEXT = 0x10/;"	constant
N_PSYM	$ZIGLIB/std/macho.zig	/^pub const N_PSYM = 0xa0/;"	constant
N_RBRAC	$ZIGLIB/std/macho.zig	/^pub const N_RBRAC = 0xe0/;"	constant
N_RSYM	$ZIGLIB/std/macho.zig	/^pub const N_RSYM = 0x40/;"	constant
N_SECT	$ZIGLIB/std/macho.zig	/^pub const N_SECT = 0xe/;"	constant
N_SLINE	$ZIGLIB/std/macho.zig	/^pub const N_SLINE = 0x44/;"	constant
N_SO	$ZIGLIB/std/macho.zig	/^pub const N_SO = 0x64/;"	constant
N_SOL	$ZIGLIB/std/macho.zig	/^pub const N_SOL = 0x84/;"	constant
N_SSYM	$ZIGLIB/std/macho.zig	/^pub const N_SSYM = 0x60/;"	constant
N_STAB	$ZIGLIB/std/macho.zig	/^pub const N_STAB = 0xe0/;"	constant
N_STSYM	$ZIGLIB/std/macho.zig	/^pub const N_STSYM = 0x26/;"	constant
N_SYMBOL_RESOLVER	$ZIGLIB/std/macho.zig	/^pub const N_SYMBOL_RESOLVER: u16 = 0x100/;"	constant
N_TYPE	$ZIGLIB/std/macho.zig	/^pub const N_TYPE = 0x0e/;"	constant
N_UNDF	$ZIGLIB/std/macho.zig	/^pub const N_UNDF = 0x0/;"	constant
N_VERSION	$ZIGLIB/std/macho.zig	/^pub const N_VERSION = 0x88/;"	constant
N_WEAK_DEF	$ZIGLIB/std/macho.zig	/^pub const N_WEAK_DEF: u16 = 0x80/;"	constant
N_WEAK_REF	$ZIGLIB/std/macho.zig	/^pub const N_WEAK_REF: u16 = 0x40/;"	constant
Naked	$ZIGLIB/std/builtin.zig	/Naked/;"	field
Name	$ZIGLIB/std/pdb.zig	/Name: [1]u8/;"	field
NameIndex	$ZIGLIB/std/pdb.zig	/NameIndex: u32/;"	field
NameInformation	$ZIGLIB/std/os/windows.zig	/NameInformation: FILE_NAME_INFORMATION/;"	field
NameSubsection	$ZIGLIB/std/wasm.zig	/^pub const NameSubsection = enum(u8) {$/;"	enum
NamedBarrier	$ZIGLIB/std/target/spirv.zig	/NamedBarrier/;"	field
NamedCurve	$ZIGLIB/std/crypto/Certificate.zig	/^pub const NamedCurve = enum {$/;"	enum
NamedGroup	$ZIGLIB/std/crypto/tls.zig	/^pub const NamedGroup = enum(u16) {$/;"	enum
NamedPipe	$ZIGLIB/std/fs/file.zig	/NamedPipe/;"	field
Nand	$ZIGLIB/std/builtin.zig	/Nand/;"	field
NarrowGlyph	$ZIGLIB/std/os/uefi/protocols/hii.zig	/^pub const NarrowGlyph = extern struct {$/;"	struct
NarrowGlyphAttributes	$ZIGLIB/std/os/uefi/protocols/hii.zig	/^pub const NarrowGlyphAttributes = packed struct(u8) {$/;"	struct
Native	$ZIGLIB/std/target.zig	/Native/;"	field
NativePaths	$ZIGLIB/std/zig/system/NativePaths.zig	/^const NativePaths = @This()/;"	constant
NativeProcessorArchitecture	$ZIGLIB/std/os/windows.zig	/NativeProcessorArchitecture: USHORT/;"	field
NativeTargetInfo	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/^const NativeTargetInfo = @This()/;"	constant
NestedBaz	$ZIGLIB/std/mem.zig	/const NestedBaz = struct {$/;"	struct
NetlinkMessageType	$ZIGLIB/std/os/linux.zig	/^pub const NetlinkMessageType = enum(u16) {$/;"	enum
NetworkShare	$ZIGLIB/std/fs/path.zig	/NetworkShare/;"	field
NetworkStatistics	$ZIGLIB/std/os/uefi/protocols/simple_network_protocol.zig	/^pub const NetworkStatistics = extern struct {$/;"	struct
NetworkUnreachable	$ZIGLIB/std/os/uefi/status.zig	/NetworkUnreachable = high_bit | 100/;"	field
Next	$ZIGLIB/std/pdb.zig	/Next: u32/;"	field
NextEntryOffset	$ZIGLIB/std/os/windows.zig	/NextEntryOffset: ULONG/;"	field
NextPowerOfTwoInt	$ZIGLIB/std/mem.zig	/const NextPowerOfTwoInt = std.meta.Int(signedness, comptime try std.math.ceilPowerOfTwo(u16, @bitSizeOf(PackedType)))/;"	constant
NextTickNode	$ZIGLIB/std/event/loop.zig	/pub const NextTickNode = std.atomic.Queue(anyframe).Node/;"	constant
NoAction	$ZIGLIB/std/event/loop.zig	/NoAction/;"	field
NoExt	$ZIGLIB/std/enums.zig	/^const NoExt = struct {}/;"	struct
NoExtension	$ZIGLIB/std/enums.zig	/^pub fn NoExtension(comptime Self: type) type {$/;"	function
NoMapping	$ZIGLIB/std/os/uefi/status.zig	/NoMapping = high_bit | 17/;"	field
NoMedia	$ZIGLIB/std/os/uefi/status.zig	/NoMedia = high_bit | 12/;"	field
NoResponse	$ZIGLIB/std/os/uefi/status.zig	/NoResponse = high_bit | 16/;"	field
NoReturn	$ZIGLIB/std/builtin.zig	/NoReturn: void/;"	field
NoSignature	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/NoSignature = 0x00/;"	field
Node	$ZIGLIB/std/zig/Ast.zig	/^pub const Node = struct {$/;"	struct
NodeList	$ZIGLIB/std/zig/Ast.zig	/^pub const NodeList = std.MultiArrayList(Node)/;"	constant
NodePtr	$ZIGLIB/std/heap/memory_pool.zig	/const NodePtr = *align(item_alignment) Node/;"	constant
NonAtomicCounter	$ZIGLIB/std/Thread/Mutex.zig	/^const NonAtomicCounter = struct {$/;"	struct
NonCanonicalError	$ZIGLIB/std/crypto/errors.zig	/^pub const NonCanonicalError = error{NonCanonical}/;"	constant
NonMontgomeryDomainFieldElement	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/^pub const NonMontgomeryDomainFieldElement = [4]u64/;"	constant
None	$ZIGLIB/std/pdb.zig	/None = 0/;"	field
NormDist	$ZIGLIB/std/rand/ziggurat.zig	/^pub const NormDist = blk: {$/;"	constant
Normal	$ZIGLIB/std/os/windows.zig	/Normal/;"	field
NotANumber	$ZIGLIB/std/meta/trait.zig	/const NotANumber = struct {$/;"	struct
NotFound	$ZIGLIB/std/os/uefi/status.zig	/NotFound = high_bit | 14/;"	field
NotReady	$ZIGLIB/std/os/uefi/status.zig	/NotReady = high_bit | 6/;"	field
NotSquareError	$ZIGLIB/std/crypto/errors.zig	/^pub const NotSquareError = error{NotSquare}/;"	constant
NotStarted	$ZIGLIB/std/os/uefi/status.zig	/NotStarted = high_bit | 19/;"	field
Notify	$ZIGLIB/std/Thread/Condition.zig	/^const Notify = enum {$/;"	enum
NtBuildNumber	$ZIGLIB/std/os/windows.zig	/NtBuildNumber: ULONG/;"	field
NtGlobalFlag	$ZIGLIB/std/os/windows.zig	/NtGlobalFlag: ULONG/;"	field
NtMajorVersion	$ZIGLIB/std/os/windows.zig	/NtMajorVersion: ULONG/;"	field
NtMinorVersion	$ZIGLIB/std/os/windows.zig	/NtMinorVersion: ULONG/;"	field
NtProductLanManNt	$ZIGLIB/std/os/windows.zig	/NtProductLanManNt/;"	field
NtProductServer	$ZIGLIB/std/os/windows.zig	/NtProductServer/;"	field
NtProductType	$ZIGLIB/std/os/windows.zig	/NtProductType: NT_PRODUCT_TYPE/;"	field
NtProductWinNt	$ZIGLIB/std/os/windows.zig	/NtProductWinNt = 1/;"	field
NtSystemRoot	$ZIGLIB/std/os/windows.zig	/NtSystemRoot: [260]WCHAR/;"	field
Null	$ZIGLIB/std/json.zig	/Null/;"	field
NullLiteral1	$ZIGLIB/std/json.zig	/NullLiteral1/;"	field
NullLiteral2	$ZIGLIB/std/json.zig	/NullLiteral2/;"	field
NullLiteral3	$ZIGLIB/std/json.zig	/NullLiteral3/;"	field
NullTerminated2DArray	$ZIGLIB/std/cstr.zig	/^pub const NullTerminated2DArray = struct {$/;"	struct
NullWriter	$ZIGLIB/std/io.zig	/^const NullWriter = Writer(void, error{}, dummyWrite)/;"	constant
NumBlocks	$ZIGLIB/std/pdb.zig	/NumBlocks: u32/;"	field
NumDirectoryBytes	$ZIGLIB/std/pdb.zig	/NumDirectoryBytes: u32/;"	field
NumLines	$ZIGLIB/std/pdb.zig	/NumLines: u32/;"	field
NumSuffix	$ZIGLIB/std/c/tokenizer.zig	/pub const NumSuffix = enum {$/;"	enum
Number	$ZIGLIB/std/json.zig	/Number: struct {$/;"	field
NumberExponent	$ZIGLIB/std/json.zig	/NumberExponent/;"	field
NumberExponentDigits	$ZIGLIB/std/json.zig	/NumberExponentDigits/;"	field
NumberExponentDigitsRequired	$ZIGLIB/std/json.zig	/NumberExponentDigitsRequired/;"	field
NumberFractional	$ZIGLIB/std/json.zig	/NumberFractional/;"	field
NumberFractionalRequired	$ZIGLIB/std/json.zig	/NumberFractionalRequired/;"	field
NumberMaybeDigitOrDotOrExponent	$ZIGLIB/std/json.zig	/NumberMaybeDigitOrDotOrExponent/;"	field
NumberMaybeDotOrExponent	$ZIGLIB/std/json.zig	/NumberMaybeDotOrExponent/;"	field
NumberMaybeExponent	$ZIGLIB/std/json.zig	/NumberMaybeExponent/;"	field
NumberOfHeaps	$ZIGLIB/std/os/windows.zig	/NumberOfHeaps: ULONG/;"	field
NumberOfLinks	$ZIGLIB/std/os/windows.zig	/NumberOfLinks: ULONG/;"	field
NumberOfMountPoints	$ZIGLIB/std/os/windows.zig	/NumberOfMountPoints: ULONG/;"	field
NumberOfPhysicalPages	$ZIGLIB/std/os/windows.zig	/NumberOfPhysicalPages: ULONG/;"	field
NumberOfProcessors	$ZIGLIB/std/os/windows.zig	/NumberOfProcessors: ULONG/;"	field
NumberParameters	$ZIGLIB/std/os/windows.zig	/NumberParameters: u32/;"	field
NumberString	$ZIGLIB/std/json.zig	/NumberString: []const u8/;"	field
Nvidia	$ZIGLIB/std/zig/system/arm.zig	/const Nvidia = [_]E{$/;"	constant
OBJECTID_EXISTS	$ZIGLIB/std/os/windows/ntstatus.zig	/OBJECTID_EXISTS = 0xC000022B/;"	field
OBJECTID_NOT_FOUND	$ZIGLIB/std/os/windows/ntstatus.zig	/OBJECTID_NOT_FOUND = 0xC00002F0/;"	field
OBJECT_ATTRIBUTES	$ZIGLIB/std/os/windows.zig	/^pub const OBJECT_ATTRIBUTES = extern struct {$/;"	struct
OBJECT_INFORMATION_CLASS	$ZIGLIB/std/os/windows.zig	/^pub const OBJECT_INFORMATION_CLASS = enum(c_int) {$/;"	enum
OBJECT_NAME_COLLISION	$ZIGLIB/std/os/windows/ntstatus.zig	/OBJECT_NAME_COLLISION = 0xC0000035/;"	field
OBJECT_NAME_EXISTS	$ZIGLIB/std/os/windows/win32error.zig	/OBJECT_NAME_EXISTS = 698/;"	field
OBJECT_NAME_INFORMATION	$ZIGLIB/std/os/windows.zig	/^pub const OBJECT_NAME_INFORMATION = extern struct {$/;"	struct
OBJECT_NAME_INVALID	$ZIGLIB/std/os/windows/ntstatus.zig	/OBJECT_NAME_INVALID = 0xC0000033/;"	field
OBJECT_NAME_NOT_FOUND	$ZIGLIB/std/os/windows/ntstatus.zig	/OBJECT_NAME_NOT_FOUND = 0xC0000034/;"	field
OBJECT_NO_LONGER_EXISTS	$ZIGLIB/std/os/windows/ntstatus.zig	/OBJECT_NO_LONGER_EXISTS = 0xC0190021/;"	field
OBJECT_PATH_INVALID	$ZIGLIB/std/os/windows/ntstatus.zig	/OBJECT_PATH_INVALID = 0xC0000039/;"	field
OBJECT_PATH_NOT_FOUND	$ZIGLIB/std/os/windows/ntstatus.zig	/OBJECT_PATH_NOT_FOUND = 0xC000003A/;"	field
OBJECT_PATH_SYNTAX_BAD	$ZIGLIB/std/os/windows/ntstatus.zig	/OBJECT_PATH_SYNTAX_BAD = 0xC000003B/;"	field
OBJECT_TYPE_MISMATCH	$ZIGLIB/std/os/windows/ntstatus.zig	/OBJECT_TYPE_MISMATCH = 0xC0000024/;"	field
OBJ_CASE_INSENSITIVE	$ZIGLIB/std/os/windows.zig	/^pub const OBJ_CASE_INSENSITIVE = 0x00000040/;"	constant
OBJ_EXCLUSIVE	$ZIGLIB/std/os/windows.zig	/^pub const OBJ_EXCLUSIVE = 0x00000020/;"	constant
OBJ_INHERIT	$ZIGLIB/std/os/windows.zig	/^pub const OBJ_INHERIT = 0x00000002/;"	constant
OBJ_KERNEL_HANDLE	$ZIGLIB/std/os/windows.zig	/^pub const OBJ_KERNEL_HANDLE = 0x00000200/;"	constant
OBJ_OPENIF	$ZIGLIB/std/os/windows.zig	/^pub const OBJ_OPENIF = 0x00000080/;"	constant
OBJ_OPENLINK	$ZIGLIB/std/os/windows.zig	/^pub const OBJ_OPENLINK = 0x00000100/;"	constant
OBJ_PERMANENT	$ZIGLIB/std/os/windows.zig	/^pub const OBJ_PERMANENT = 0x00000010/;"	constant
OBJ_VALID_ATTRIBUTES	$ZIGLIB/std/os/windows.zig	/^pub const OBJ_VALID_ATTRIBUTES = 0x000003F2/;"	constant
OCCITAN	$ZIGLIB/std/os/windows/lang.zig	/^pub const OCCITAN = 0x82/;"	constant
OCCITAN_FRANCE	$ZIGLIB/std/os/windows/sublang.zig	/^pub const OCCITAN_FRANCE = 0x01/;"	constant
OCEXEC	$ZIGLIB/std/os/plan9.zig	/OCEXEC = 32/;"	field
OCM_CHARTOITEM	$ZIGLIB/std/os/windows/user32.zig	/^pub const OCM_CHARTOITEM = 0x202F/;"	constant
OCM_COMMAND	$ZIGLIB/std/os/windows/user32.zig	/^pub const OCM_COMMAND = 0x2111/;"	constant
OCM_COMPAREITEM	$ZIGLIB/std/os/windows/user32.zig	/^pub const OCM_COMPAREITEM = 0x2039/;"	constant
OCM_CTLCOLOR	$ZIGLIB/std/os/windows/user32.zig	/^pub const OCM_CTLCOLOR = 0x2019/;"	constant
OCM_CTLCOLORBTN	$ZIGLIB/std/os/windows/user32.zig	/^pub const OCM_CTLCOLORBTN = 0x2135/;"	constant
OCM_CTLCOLORDLG	$ZIGLIB/std/os/windows/user32.zig	/^pub const OCM_CTLCOLORDLG = 0x2136/;"	constant
OCM_CTLCOLOREDIT	$ZIGLIB/std/os/windows/user32.zig	/^pub const OCM_CTLCOLOREDIT = 0x2133/;"	constant
OCM_CTLCOLORLISTBOX	$ZIGLIB/std/os/windows/user32.zig	/^pub const OCM_CTLCOLORLISTBOX = 0x2134/;"	constant
OCM_CTLCOLORMSGBOX	$ZIGLIB/std/os/windows/user32.zig	/^pub const OCM_CTLCOLORMSGBOX = 0x2132/;"	constant
OCM_CTLCOLORSCROLLBAR	$ZIGLIB/std/os/windows/user32.zig	/^pub const OCM_CTLCOLORSCROLLBAR = 0x2137/;"	constant
OCM_CTLCOLORSTATIC	$ZIGLIB/std/os/windows/user32.zig	/^pub const OCM_CTLCOLORSTATIC = 0x2138/;"	constant
OCM_DELETEITEM	$ZIGLIB/std/os/windows/user32.zig	/^pub const OCM_DELETEITEM = 0x202D/;"	constant
OCM_DRAWITEM	$ZIGLIB/std/os/windows/user32.zig	/^pub const OCM_DRAWITEM = 0x202B/;"	constant
OCM_HSCROLL	$ZIGLIB/std/os/windows/user32.zig	/^pub const OCM_HSCROLL = 0x2114/;"	constant
OCM_MEASUREITEM	$ZIGLIB/std/os/windows/user32.zig	/^pub const OCM_MEASUREITEM = 0x202C/;"	constant
OCM_NOTIFY	$ZIGLIB/std/os/windows/user32.zig	/^pub const OCM_NOTIFY = 0x204E/;"	constant
OCM_PARENTNOTIFY	$ZIGLIB/std/os/windows/user32.zig	/^pub const OCM_PARENTNOTIFY = 0x2210/;"	constant
OCM_VKEYTOITEM	$ZIGLIB/std/os/windows/user32.zig	/^pub const OCM_VKEYTOITEM = 0x202E/;"	constant
OCM_VSCROLL	$ZIGLIB/std/os/windows/user32.zig	/^pub const OCM_VSCROLL = 0x2115/;"	constant
OCM__BASE	$ZIGLIB/std/os/windows/user32.zig	/^pub const OCM__BASE = 0x2000/;"	constant
OCRNL	$ZIGLIB/std/os/linux.zig	/^pub const OCRNL: tcflag_t = 8/;"	constant
OCaml	$ZIGLIB/std/dwarf/LANG.zig	/^pub const OCaml = 0x001b/;"	constant
ODIA	$ZIGLIB/std/os/windows/lang.zig	/^pub const ODIA = 0x48/;"	constant
ODIA_INDIA	$ZIGLIB/std/os/windows/sublang.zig	/^pub const ODIA_INDIA = 0x01/;"	constant
OEXCL	$ZIGLIB/std/os/plan9.zig	/OEXCL = 0x1000/;"	field
OEXEC	$ZIGLIB/std/os/plan9.zig	/OEXEC = 3/;"	field
OFDEL	$ZIGLIB/std/os/linux.zig	/^pub const OFDEL: tcflag_t = 128/;"	constant
OFD_GETLK	$ZIGLIB/std/c/solaris.zig	/pub const OFD_GETLK = 47/;"	constant
OFD_SETLK	$ZIGLIB/std/c/solaris.zig	/pub const OFD_SETLK = 48/;"	constant
OFD_SETLKW	$ZIGLIB/std/c/solaris.zig	/pub const OFD_SETLKW = 49/;"	constant
OFFLOAD_NOT_PREFERRED	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const OFFLOAD_NOT_PREFERRED = 1/;"	constant
OFFLOAD_NO_PREFERENCE	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const OFFLOAD_NO_PREFERENCE = 0/;"	constant
OFFLOAD_PREFERENCE	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const OFFLOAD_PREFERENCE = 11/;"	constant
OFFLOAD_PREFERRED	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const OFFLOAD_PREFERRED = 2/;"	constant
OFFLOAD_READ_FILE_NOT_SUPPORTED	$ZIGLIB/std/os/windows/ntstatus.zig	/OFFLOAD_READ_FILE_NOT_SUPPORTED = 0xC000A2A3/;"	field
OFFLOAD_READ_FLT_NOT_SUPPORTED	$ZIGLIB/std/os/windows/ntstatus.zig	/OFFLOAD_READ_FLT_NOT_SUPPORTED = 0xC000A2A1/;"	field
OFFLOAD_WRITE_FILE_NOT_SUPPORTED	$ZIGLIB/std/os/windows/ntstatus.zig	/OFFLOAD_WRITE_FILE_NOT_SUPPORTED = 0xC000A2A4/;"	field
OFFLOAD_WRITE_FLT_NOT_SUPPORTED	$ZIGLIB/std/os/windows/ntstatus.zig	/OFFLOAD_WRITE_FLT_NOT_SUPPORTED = 0xC000A2A2/;"	field
OFFSET_ALIGNMENT_VIOLATION	$ZIGLIB/std/os/windows/win32error.zig	/OFFSET_ALIGNMENT_VIOLATION = 327/;"	field
OFILL	$ZIGLIB/std/os/linux.zig	/^pub const OFILL: tcflag_t = 64/;"	constant
OFileInfo	$ZIGLIB/std/debug.zig	/const OFileInfo = struct {$/;"	struct
OFileTable	$ZIGLIB/std/debug.zig	/const OFileTable = std.StringHashMap(OFileInfo)/;"	constant
OKAY	$ZIGLIB/std/c/openbsd.zig	/pub const OKAY: c_int = 0x01/;"	constant
OK_BINDS	$ZIGLIB/std/os/linux/vdso.zig	/const OK_BINDS = (1 << elf.STB_GLOBAL | 1 << elf.STB_WEAK | 1 << elf.STB_GNU_UNIQUE)/;"	constant
OK_TYPES	$ZIGLIB/std/os/linux/vdso.zig	/const OK_TYPES = (1 << elf.STT_NOTYPE | 1 << elf.STT_OBJECT | 1 << elf.STT_FUNC | 1 << elf.STT_COMMON)/;"	constant
OLCUC	$ZIGLIB/std/os/linux.zig	/^pub const OLCUC: tcflag_t = 2/;"	constant
OLDMASK	$ZIGLIB/std/os/linux/x86_64.zig	/pub const OLDMASK = 21/;"	constant
OLD_WIN_VERSION	$ZIGLIB/std/os/windows/win32error.zig	/OLD_WIN_VERSION = 1150/;"	field
OMAP_FROM_SRC	$ZIGLIB/std/coff.zig	/OMAP_FROM_SRC = 8/;"	field
OMAP_TO_SRC	$ZIGLIB/std/coff.zig	/OMAP_TO_SRC = 7/;"	field
OMIT	$ZIGLIB/std/os/linux.zig	/pub const OMIT = 0x3ffffffe/;"	constant
ONESHOT	$ZIGLIB/std/os/linux.zig	/pub const ONESHOT = 0x80000000/;"	constant
ONLCR	$ZIGLIB/std/os/linux.zig	/^pub const ONLCR: tcflag_t = 4/;"	constant
ONLRET	$ZIGLIB/std/os/linux.zig	/^pub const ONLRET: tcflag_t = 32/;"	constant
ONLYDIR	$ZIGLIB/std/os/linux.zig	/pub const ONLYDIR = 0x01000000/;"	constant
ONLY_IF_CONNECTED	$ZIGLIB/std/os/windows/win32error.zig	/ONLY_IF_CONNECTED = 1251/;"	field
ONOCR	$ZIGLIB/std/os/linux.zig	/^pub const ONOCR: tcflag_t = 16/;"	constant
ONOEOT	$ZIGLIB/std/c/openbsd.zig	/^pub const ONOEOT: tcflag_t = 0x00000008/;"	constant
ONSTACK	$ZIGLIB/std/os/linux.zig	/pub const ONSTACK = 0x1/;"	constant
OOBINLINE	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const OOBINLINE = 256/;"	constant
OPEN	$ZIGLIB/std/os/plan9.zig	/OPEN = 14/;"	field
OPEN8	$ZIGLIB/std/elf.zig	/OPEN8 = 196/;"	field
OPENAT	$ZIGLIB/std/os/linux.zig	/OPENAT/;"	field
OPENAT2	$ZIGLIB/std/os/linux.zig	/OPENAT2/;"	field
OPENRISC	$ZIGLIB/std/elf.zig	/OPENRISC = 92/;"	field
OPENTYPE	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const OPENTYPE = 28680/;"	constant
OPEN_ALWAYS	$ZIGLIB/std/os/windows.zig	/^pub const OPEN_ALWAYS = 4/;"	constant
OPEN_EXISTING	$ZIGLIB/std/os/windows.zig	/^pub const OPEN_EXISTING = 3/;"	constant
OPEN_FAILED	$ZIGLIB/std/os/windows/win32error.zig	/OPEN_FAILED = 110/;"	field
OPEN_FILES	$ZIGLIB/std/os/windows/win32error.zig	/OPEN_FILES = 2401/;"	field
OPEN_MAX	$ZIGLIB/std/c/darwin.zig	/^pub const OPEN_MAX = 10240/;"	constant
OPERATION_ABORTED	$ZIGLIB/std/os/windows/win32error.zig	/OPERATION_ABORTED = 995/;"	field
OPERATION_IN_PROGRESS	$ZIGLIB/std/os/windows/win32error.zig	/OPERATION_IN_PROGRESS = 329/;"	field
OPERATION_NOT_SUPPORTED_IN_TRANSACTION	$ZIGLIB/std/os/windows/ntstatus.zig	/OPERATION_NOT_SUPPORTED_IN_TRANSACTION = 0xC019005A/;"	field
OPERATION_TIMED_OUT	$ZIGLIB/std/c/darwin.zig	/OPERATION_TIMED_OUT = 49/;"	field
OPERSTATE	$ZIGLIB/std/os/linux.zig	/OPERSTATE/;"	field
OPLOCK_BREAK_IN_PROGRESS	$ZIGLIB/std/os/windows/win32error.zig	/OPLOCK_BREAK_IN_PROGRESS = 742/;"	field
OPLOCK_HANDLE_CLOSED	$ZIGLIB/std/os/windows/win32error.zig	/OPLOCK_HANDLE_CLOSED = 803/;"	field
OPLOCK_NOT_GRANTED	$ZIGLIB/std/os/windows/win32error.zig	/OPLOCK_NOT_GRANTED = 300/;"	field
OPLOCK_SWITCHED_TO_NEW_HANDLE	$ZIGLIB/std/os/windows/win32error.zig	/OPLOCK_SWITCHED_TO_NEW_HANDLE = 800/;"	field
OPNOTSUPP	$ZIGLIB/std/os/wasi.zig	/OPNOTSUPP = 58/;"	field
OPOST	$ZIGLIB/std/os/linux.zig	/^pub const OPOST: tcflag_t = 1/;"	constant
OPTIONS	$ZIGLIB/std/os/linux.zig	/pub const OPTIONS = 8/;"	constant
OPTIONS_ZEROCOPY	$ZIGLIB/std/os/linux.zig	/pub const OPTIONS_ZEROCOPY = (1 << 0)/;"	constant
ORCLOSE	$ZIGLIB/std/os/plan9.zig	/ORCLOSE = 64/;"	field
ORDINAL_NOT_FOUND	$ZIGLIB/std/os/windows/ntstatus.zig	/ORDINAL_NOT_FOUND = 0xC0000138/;"	field
ORDWR	$ZIGLIB/std/os/plan9.zig	/ORDWR = 2/;"	field
OREAD	$ZIGLIB/std/os/plan9.zig	/OREAD = 0/;"	field
ORIGDSTADDR	$ZIGLIB/std/os/linux.zig	/pub const ORIGDSTADDR = 74/;"	constant
ORIGINAL_DST	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const ORIGINAL_DST = 12303/;"	constant
ORIYA	$ZIGLIB/std/os/windows/lang.zig	/^pub const ORIYA = 0x48/;"	constant
ORIYA_INDIA	$ZIGLIB/std/os/windows/sublang.zig	/^pub const ORIYA_INDIA = 0x01/;"	constant
OROUTE	$ZIGLIB/std/c/netbsd.zig	/pub const OROUTE = 17/;"	constant
ORPHAN_NAME_EXHAUSTED	$ZIGLIB/std/os/windows/win32error.zig	/ORPHAN_NAME_EXHAUSTED = 799/;"	field
OR_INVALID_OID	$ZIGLIB/std/os/windows/win32error.zig	/OR_INVALID_OID = 1911/;"	field
OR_INVALID_OXID	$ZIGLIB/std/os/windows/win32error.zig	/OR_INVALID_OXID = 1910/;"	field
OR_INVALID_SET	$ZIGLIB/std/os/windows/win32error.zig	/OR_INVALID_SET = 1912/;"	field
OS2_CUI	$ZIGLIB/std/coff.zig	/OS2_CUI = 5/;"	field
OSBuildNumber	$ZIGLIB/std/os/windows.zig	/OSBuildNumber: USHORT/;"	field
OSCSDVersion	$ZIGLIB/std/os/windows.zig	/OSCSDVersion: USHORT/;"	field
OSEEK	$ZIGLIB/std/os/plan9.zig	/OSEEK = 16/;"	field
OSINET	$ZIGLIB/std/c/solaris.zig	/pub const OSINET = 21/;"	constant
OSMajorVersion	$ZIGLIB/std/os/windows.zig	/OSMajorVersion: ULONG/;"	field
OSMinorVersion	$ZIGLIB/std/os/windows.zig	/OSMinorVersion: ULONG/;"	field
OSPF	$ZIGLIB/std/c/solaris.zig	/pub const OSPF = 89/;"	constant
OSPFIGP	$ZIGLIB/std/c/freebsd.zig	/pub const OSPFIGP = 89/;"	constant
OSPlatformId	$ZIGLIB/std/os/windows.zig	/OSPlatformId: ULONG/;"	field
OSRELDATE	$ZIGLIB/std/c/dragonfly.zig	/pub const OSRELDATE = 24/;"	constant
OSRELEASE	$ZIGLIB/std/c/openbsd.zig	/pub const OSRELEASE = 2/;"	constant
OSREV	$ZIGLIB/std/c/openbsd.zig	/pub const OSREV = 3/;"	constant
OSTYPE	$ZIGLIB/std/c/openbsd.zig	/pub const OSTYPE = 1/;"	constant
OSVERSION	$ZIGLIB/std/c/openbsd.zig	/pub const OSVERSION = 27/;"	constant
OSVERSIONINFOW	$ZIGLIB/std/os/windows.zig	/^pub const OSVERSIONINFOW = extern struct {$/;"	struct
OS_UNFAIR_LOCK_INIT	$ZIGLIB/std/c/darwin.zig	/^pub const OS_UNFAIR_LOCK_INIT = os_unfair_lock{}/;"	constant
OTHER	$ZIGLIB/std/c/windows.zig	/OTHER = 131/;"	field
OTRUNC	$ZIGLIB/std/os/plan9.zig	/OTRUNC = 16/;"	field
OUTOFMEMORY	$ZIGLIB/std/os/windows/win32error.zig	/OUTOFMEMORY = 14/;"	field
OUT_LEN	$ZIGLIB/std/crypto/blake3.zig	/^const OUT_LEN: usize = 32/;"	constant
OUT_OF_PAPER	$ZIGLIB/std/os/windows/win32error.zig	/OUT_OF_PAPER = 28/;"	field
OUT_OF_STRUCTURES	$ZIGLIB/std/os/windows/win32error.zig	/OUT_OF_STRUCTURES = 84/;"	field
OVERFLOW	$ZIGLIB/std/os/wasi.zig	/OVERFLOW = 61/;"	field
OVERFLOWED	$ZIGLIB/std/c/netbsd.zig	/pub const OVERFLOWED = 0x1009/;"	constant
OVERLAPPED	$ZIGLIB/std/os/windows.zig	/^pub const OVERLAPPED = extern struct {$/;"	struct
OVERLAPPED_ENTRY	$ZIGLIB/std/os/windows.zig	/^pub const OVERLAPPED_ENTRY = extern struct {$/;"	struct
OVERRIDE_NOCHANGES	$ZIGLIB/std/os/windows/win32error.zig	/OVERRIDE_NOCHANGES = 1252/;"	field
OVERRUN	$ZIGLIB/std/os/linux.zig	/OVERRUN = 0x4/;"	field
OWNERDEAD	$ZIGLIB/std/os/wasi.zig	/OWNERDEAD = 62/;"	field
OWRITE	$ZIGLIB/std/os/plan9.zig	/OWRITE = 1/;"	field
OXTABS	$ZIGLIB/std/c/openbsd.zig	/^pub const OXTABS: tcflag_t = 0x00000004/;"	constant
O_LARGEFILE	$ZIGLIB/std/fs.zig	/const O_LARGEFILE = if (@hasDecl(os.O, "LARGEFILE")) os.O.LARGEFILE else 0/;"	constant
O_PATH	$ZIGLIB/std/fs.zig	/const O_PATH = if (@hasDecl(os.O, "PATH")) os.O.PATH else 0/;"	constant
ObjAttr	$ZIGLIB/std/os/linux/bpf.zig	/^pub const ObjAttr = extern struct {$/;"	struct
ObjC	$ZIGLIB/std/dwarf/LANG.zig	/^pub const ObjC = 0x0010/;"	constant
ObjC_plus_plus	$ZIGLIB/std/dwarf/LANG.zig	/^pub const ObjC_plus_plus = 0x0011/;"	constant
Object	$ZIGLIB/std/json/write_stream.zig	/Object/;"	field
ObjectArray	$ZIGLIB/compiler_rt/emutls.zig	/^const ObjectArray = struct {$/;"	struct
ObjectBasicInformation	$ZIGLIB/std/os/windows.zig	/ObjectBasicInformation = 0/;"	field
ObjectBegin	$ZIGLIB/std/json.zig	/ObjectBegin/;"	field
ObjectEnd	$ZIGLIB/std/json.zig	/ObjectEnd/;"	field
ObjectFormat	$ZIGLIB/std/target.zig	/pub const ObjectFormat = enum {$/;"	enum
ObjectHandleFlagInformation	$ZIGLIB/std/os/windows.zig	/ObjectHandleFlagInformation = 4/;"	field
ObjectKey	$ZIGLIB/std/json.zig	/ObjectKey/;"	field
ObjectMap	$ZIGLIB/std/json.zig	/^pub const ObjectMap = StringArrayHashMap(Value)/;"	constant
ObjectName	$ZIGLIB/std/os/windows.zig	/ObjectName: *UNICODE_STRING/;"	field
ObjectNameInformation	$ZIGLIB/std/os/windows.zig	/ObjectNameInformation = 1/;"	field
ObjectOptions	$ZIGLIB/std/Build.zig	/^pub const ObjectOptions = struct {$/;"	struct
ObjectPointer	$ZIGLIB/compiler_rt/emutls.zig	/const ObjectPointer = *anyopaque/;"	constant
ObjectSeparator	$ZIGLIB/std/json.zig	/ObjectSeparator = 0/;"	field
ObjectSessionInformation	$ZIGLIB/std/os/windows.zig	/ObjectSessionInformation = 5/;"	field
ObjectStart	$ZIGLIB/std/json/write_stream.zig	/ObjectStart/;"	field
ObjectTypeInformation	$ZIGLIB/std/os/windows.zig	/ObjectTypeInformation = 2/;"	field
ObjectTypesInformation	$ZIGLIB/std/os/windows.zig	/ObjectTypesInformation = 3/;"	field
ObjectValue	$ZIGLIB/std/json.zig	/ObjectValue/;"	field
OctalEscape	$ZIGLIB/std/c/tokenizer.zig	/OctalEscape/;"	field
OemCodePageData	$ZIGLIB/std/os/windows.zig	/OemCodePageData: PVOID/;"	field
Offset	$ZIGLIB/std/pdb.zig	/Offset: u32/;"	field
OffsetHigh	$ZIGLIB/std/os/windows.zig	/OffsetHigh: DWORD/;"	field
Once	$ZIGLIB/std/os/windows.zig	/Once: BYTE/;"	field
OneAndAHalf	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/OneAndAHalf = 2/;"	field
OneByteReadReader	$ZIGLIB/std/io/buffered_reader.zig	/const OneByteReadReader = struct {$/;"	struct
Opaque	$ZIGLIB/std/builtin.zig	/pub const Opaque = struct {$/;"	struct
Opcode	$ZIGLIB/std/wasm.zig	/^pub const Opcode = enum(u8) {$/;"	enum
Open	$ZIGLIB/std/event/loop.zig	/pub const Open = struct {$/;"	struct
OpenAt	$ZIGLIB/std/event/loop.zig	/pub const OpenAt = struct {$/;"	struct
OpenCL	$ZIGLIB/std/dwarf/LANG.zig	/^pub const OpenCL = 0x0015/;"	constant
OpenDirOptions	$ZIGLIB/std/fs.zig	/pub const OpenDirOptions = struct {$/;"	struct
OpenError	$ZIGLIB/std/os/windows.zig	/^pub const OpenError = error{$/;"	constant
OpenFile	$ZIGLIB/std/os/windows.zig	/^pub fn OpenFile(sub_path_w: []const u16, options: OpenFileOptions) OpenError!HANDLE {$/;"	function
OpenFileOptions	$ZIGLIB/std/os/windows.zig	/^pub const OpenFileOptions = struct {$/;"	struct
OpenFlags	$ZIGLIB/std/fs/file.zig	/pub const OpenFlags = struct {$/;"	struct
OpenMode	$ZIGLIB/std/os/plan9.zig	/^pub const OpenMode = enum(usize) {$/;"	enum
OpenProtocolAttributes	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/^pub const OpenProtocolAttributes = packed struct(u32) {$/;"	struct
OpenSelfDebugInfoError	$ZIGLIB/std/debug.zig	/^pub const OpenSelfDebugInfoError = error{$/;"	constant
OpenSelfExeError	$ZIGLIB/std/fs.zig	/^pub const OpenSelfExeError = error{$/;"	constant
OpenbsdImpl	$ZIGLIB/std/Thread/Futex.zig	/^const OpenbsdImpl = struct {$/;"	struct
OperInfo	$ZIGLIB/std/zig/Parse.zig	/^const OperInfo = struct {$/;"	struct
OptimizeMode	$ZIGLIB/std/builtin.zig	/^pub const OptimizeMode = enum {$/;"	enum
Optimized	$ZIGLIB/std/builtin.zig	/Optimized/;"	field
OptimizedSave	$ZIGLIB/std/os/windows.zig	/OptimizedSave: ULONG/;"	field
OptionArtifactArg	$ZIGLIB/std/Build/OptionsStep.zig	/^const OptionArtifactArg = struct {$/;"	struct
OptionFileSourceArg	$ZIGLIB/std/Build/OptionsStep.zig	/^const OptionFileSourceArg = struct {$/;"	struct
Optional	$ZIGLIB/std/builtin.zig	/pub const Optional = struct {$/;"	struct
OptionalDbgHeaderSize	$ZIGLIB/std/pdb.zig	/OptionalDbgHeaderSize: i32/;"	field
OptionalHeader	$ZIGLIB/std/coff.zig	/^pub const OptionalHeader = extern struct {$/;"	struct
OptionalHeaderPE32	$ZIGLIB/std/coff.zig	/^pub const OptionalHeaderPE32 = extern struct {$/;"	struct
OptionalHeaderPE64	$ZIGLIB/std/coff.zig	/^pub const OptionalHeaderPE64 = extern struct {$/;"	struct
Options	$ZIGLIB/std/tar.zig	/pub const Options = struct {$/;"	struct
OptionsStep	$ZIGLIB/std/Build/OptionsStep.zig	/^const OptionsStep = @This()/;"	constant
Opts	$ZIGLIB/std/Build/CheckObjectStep.zig	/^const Opts = struct {$/;"	struct
OrNull	$ZIGLIB/std/event/channel.zig	/const OrNull = struct {$/;"	struct
Order	$ZIGLIB/std/math.zig	/^pub const Order = enum {$/;"	enum
Ordering	$ZIGLIB/std/atomic.zig	/^pub const Ordering = std.builtin.AtomicOrder/;"	constant
Origin	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/pub const Origin = enum(u8) {$/;"	enum
OsData	$ZIGLIB/std/fs/watch.zig	/const OsData = switch (builtin.os.tag) {$/;"	constant
OsVersion	$ZIGLIB/std/zig/CrossTarget.zig	/^pub const OsVersion = union(enum) {$/;"	union
OutOfResources	$ZIGLIB/std/os/uefi/status.zig	/OutOfResources = high_bit | 9/;"	field
Output	$ZIGLIB/std/crypto/blake3.zig	/^const Output = struct {$/;"	struct
OutputMode	$ZIGLIB/std/builtin.zig	/^pub const OutputMode = enum {$/;"	enum
OutputTooLongError	$ZIGLIB/std/crypto/errors.zig	/^pub const OutputTooLongError = error{OutputTooLong}/;"	constant
Overlapped	$ZIGLIB/std/event/loop.zig	/pub const Overlapped = @TypeOf(overlapped_init)/;"	constant
OwningThread	$ZIGLIB/std/os/windows.zig	/OwningThread: HANDLE/;"	field
P1Home	$ZIGLIB/std/os/windows.zig	/P1Home: DWORD64 align(16)/;"	field
P256	$ZIGLIB/std/crypto/pcurves/p256.zig	/^pub const P256 = struct {$/;"	struct
P2Home	$ZIGLIB/std/os/windows.zig	/P2Home: DWORD64/;"	field
P384	$ZIGLIB/std/crypto/pcurves/p384.zig	/^pub const P384 = struct {$/;"	struct
P3Home	$ZIGLIB/std/os/windows.zig	/P3Home: DWORD64/;"	field
P4Home	$ZIGLIB/std/os/windows.zig	/P4Home: DWORD64/;"	field
P5Home	$ZIGLIB/std/os/windows.zig	/P5Home: DWORD64/;"	field
P6Home	$ZIGLIB/std/os/windows.zig	/P6Home: DWORD64/;"	field
PACKET	$ZIGLIB/std/os/linux.zig	/pub const PACKET = 263/;"	constant
PAE_ENABLED	$ZIGLIB/std/os/windows.zig	/PAE_ENABLED = 9/;"	field
PAGED_SYSTEM_RESOURCES	$ZIGLIB/std/os/windows/win32error.zig	/PAGED_SYSTEM_RESOURCES = 1452/;"	field
PAGEFILE_CREATE_FAILED	$ZIGLIB/std/os/windows/win32error.zig	/PAGEFILE_CREATE_FAILED = 576/;"	field
PAGEFILE_QUOTA	$ZIGLIB/std/os/windows/win32error.zig	/PAGEFILE_QUOTA = 1454/;"	field
PAGEFILE_QUOTA_EXCEEDED	$ZIGLIB/std/os/windows/win32error.zig	/PAGEFILE_QUOTA_EXCEEDED = 567/;"	field
PAGEOUT	$ZIGLIB/std/os/linux.zig	/pub const PAGEOUT = 21/;"	constant
PAGE_EXECUTE	$ZIGLIB/std/os/windows.zig	/^pub const PAGE_EXECUTE = 0x10/;"	constant
PAGE_EXECUTE_READ	$ZIGLIB/std/os/windows.zig	/^pub const PAGE_EXECUTE_READ = 0x20/;"	constant
PAGE_EXECUTE_READWRITE	$ZIGLIB/std/os/windows.zig	/^pub const PAGE_EXECUTE_READWRITE = 0x40/;"	constant
PAGE_EXECUTE_WRITECOPY	$ZIGLIB/std/os/windows.zig	/^pub const PAGE_EXECUTE_WRITECOPY = 0x80/;"	constant
PAGE_FAULTS	$ZIGLIB/std/os/linux.zig	/PAGE_FAULTS/;"	field
PAGE_FAULTS_MAJ	$ZIGLIB/std/os/linux.zig	/PAGE_FAULTS_MAJ/;"	field
PAGE_FAULTS_MIN	$ZIGLIB/std/os/linux.zig	/PAGE_FAULTS_MIN/;"	field
PAGE_FAULT_COPY_ON_WRITE	$ZIGLIB/std/os/windows/win32error.zig	/PAGE_FAULT_COPY_ON_WRITE = 749/;"	field
PAGE_FAULT_DEMAND_ZERO	$ZIGLIB/std/os/windows/win32error.zig	/PAGE_FAULT_DEMAND_ZERO = 748/;"	field
PAGE_FAULT_GUARD_PAGE	$ZIGLIB/std/os/windows/win32error.zig	/PAGE_FAULT_GUARD_PAGE = 750/;"	field
PAGE_FAULT_PAGING_FILE	$ZIGLIB/std/os/windows/win32error.zig	/PAGE_FAULT_PAGING_FILE = 751/;"	field
PAGE_FAULT_TRANSITION	$ZIGLIB/std/os/windows/win32error.zig	/PAGE_FAULT_TRANSITION = 747/;"	field
PAGE_GUARD	$ZIGLIB/std/os/windows.zig	/^pub const PAGE_GUARD = 0x100/;"	constant
PAGE_NOACCESS	$ZIGLIB/std/os/windows.zig	/^pub const PAGE_NOACCESS = 0x01/;"	constant
PAGE_NOCACHE	$ZIGLIB/std/os/windows.zig	/^pub const PAGE_NOCACHE = 0x200/;"	constant
PAGE_READONLY	$ZIGLIB/std/os/windows.zig	/^pub const PAGE_READONLY = 0x02/;"	constant
PAGE_READWRITE	$ZIGLIB/std/os/windows.zig	/^pub const PAGE_READWRITE = 0x04/;"	constant
PAGE_TARGETS_INVALID	$ZIGLIB/std/os/windows.zig	/^pub const PAGE_TARGETS_INVALID = 0x40000000/;"	constant
PAGE_TARGETS_NO_UPDATE	$ZIGLIB/std/os/windows.zig	/^pub const PAGE_TARGETS_NO_UPDATE = 0x40000000/;"	constant
PAGE_WRITECOMBINE	$ZIGLIB/std/os/windows.zig	/^pub const PAGE_WRITECOMBINE = 0x400/;"	constant
PAGE_WRITECOPY	$ZIGLIB/std/os/windows.zig	/^pub const PAGE_WRITECOPY = 0x08/;"	constant
PARAMETER_QUOTA_EXCEEDED	$ZIGLIB/std/os/windows/win32error.zig	/PARAMETER_QUOTA_EXCEEDED = 1283/;"	field
PARENB	$ZIGLIB/std/os/linux.zig	/^pub const PARENB: tcflag_t = 256/;"	constant
PARENT	$ZIGLIB/std/os/linux.zig	/pub const PARENT = 0x00008000/;"	constant
PARENT_SETTID	$ZIGLIB/std/os/linux.zig	/pub const PARENT_SETTID = 0x00100000/;"	constant
PARISC	$ZIGLIB/std/elf.zig	/PARISC = 15/;"	field
PARITY_ERROR	$ZIGLIB/std/os/windows/ntstatus.zig	/PARITY_ERROR = 0xC000002B/;"	field
PARMRK	$ZIGLIB/std/os/linux.zig	/^pub const PARMRK: tcflag_t = 8/;"	constant
PARODD	$ZIGLIB/std/os/linux.zig	/^pub const PARODD: tcflag_t = 512/;"	constant
PARTIAL	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const PARTIAL = 32768/;"	constant
PARTIAL_COPY	$ZIGLIB/std/os/windows/win32error.zig	/PARTIAL_COPY = 299/;"	field
PARTITION_FAILURE	$ZIGLIB/std/os/windows/win32error.zig	/PARTITION_FAILURE = 1105/;"	field
PASHTO	$ZIGLIB/std/os/windows/lang.zig	/^pub const PASHTO = 0x63/;"	constant
PASHTO_AFGHANISTAN	$ZIGLIB/std/os/windows/sublang.zig	/^pub const PASHTO_AFGHANISTAN = 0x01/;"	constant
PASSCRED	$ZIGLIB/std/os/linux.zig	/pub const PASSCRED = 20/;"	constant
PASSIVE	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const PASSIVE = 1/;"	constant
PASSSEC	$ZIGLIB/std/os/linux.zig	/pub const PASSSEC = 34/;"	constant
PASSWORD_CHANGE_REQUIRED	$ZIGLIB/std/os/windows/win32error.zig	/PASSWORD_CHANGE_REQUIRED = 1938/;"	field
PASSWORD_EXPIRED	$ZIGLIB/std/os/windows/win32error.zig	/PASSWORD_EXPIRED = 1330/;"	field
PASSWORD_MUST_CHANGE	$ZIGLIB/std/os/windows/win32error.zig	/PASSWORD_MUST_CHANGE = 1907/;"	field
PASSWORD_RESTRICTION	$ZIGLIB/std/os/windows/win32error.zig	/PASSWORD_RESTRICTION = 1325/;"	field
PATCH	$ZIGLIB/std/http.zig	/PATCH/;"	field
PATCH_MANAGED_ADVERTISED_PRODUCT	$ZIGLIB/std/os/windows/win32error.zig	/PATCH_MANAGED_ADVERTISED_PRODUCT = 1651/;"	field
PATCH_NO_SEQUENCE	$ZIGLIB/std/os/windows/win32error.zig	/PATCH_NO_SEQUENCE = 1648/;"	field
PATCH_PACKAGE_INVALID	$ZIGLIB/std/os/windows/win32error.zig	/PATCH_PACKAGE_INVALID = 1636/;"	field
PATCH_PACKAGE_OPEN_FAILED	$ZIGLIB/std/os/windows/win32error.zig	/PATCH_PACKAGE_OPEN_FAILED = 1635/;"	field
PATCH_PACKAGE_REJECTED	$ZIGLIB/std/os/windows/win32error.zig	/PATCH_PACKAGE_REJECTED = 1643/;"	field
PATCH_PACKAGE_UNSUPPORTED	$ZIGLIB/std/os/windows/win32error.zig	/PATCH_PACKAGE_UNSUPPORTED = 1637/;"	field
PATCH_REMOVAL_DISALLOWED	$ZIGLIB/std/os/windows/win32error.zig	/PATCH_REMOVAL_DISALLOWED = 1649/;"	field
PATCH_REMOVAL_UNSUPPORTED	$ZIGLIB/std/os/windows/win32error.zig	/PATCH_REMOVAL_UNSUPPORTED = 1646/;"	field
PATCH_TARGET_NOT_FOUND	$ZIGLIB/std/os/windows/win32error.zig	/PATCH_TARGET_NOT_FOUND = 1642/;"	field
PATH	$ZIGLIB/std/os/linux/x86_64.zig	/pub const PATH = 0o10000000/;"	constant
PATHEXT	$ZIGLIB/std/child_process.zig	/const PATHEXT: [:0]const u16 = std.os.getenvW(unicode.utf8ToUtf16LeStringLiteral("PATHEXT")) orelse &[_:0]u16{}/;"	constant
PATHMTU	$ZIGLIB/std/os/linux.zig	/pub const PATHMTU = 61/;"	constant
PATHPKG_CHECK	$ZIGLIB/std/c/darwin.zig	/pub const PATHPKG_CHECK = 52/;"	constant
PATH_BUSY	$ZIGLIB/std/os/windows/win32error.zig	/PATH_BUSY = 148/;"	field
PATH_CREATE_DIRECTORY	$ZIGLIB/std/os/wasi.zig	/pub const PATH_CREATE_DIRECTORY: rights_t = 0x0000000000000200/;"	constant
PATH_CREATE_FILE	$ZIGLIB/std/os/wasi.zig	/pub const PATH_CREATE_FILE: rights_t = 0x0000000000000400/;"	constant
PATH_FILESTAT_GET	$ZIGLIB/std/os/wasi.zig	/pub const PATH_FILESTAT_GET: rights_t = 0x0000000000040000/;"	constant
PATH_FILESTAT_SET_SIZE	$ZIGLIB/std/os/wasi.zig	/pub const PATH_FILESTAT_SET_SIZE: rights_t = 0x0000000000080000/;"	constant
PATH_FILESTAT_SET_TIMES	$ZIGLIB/std/os/wasi.zig	/pub const PATH_FILESTAT_SET_TIMES: rights_t = 0x0000000000100000/;"	constant
PATH_LINK_SOURCE	$ZIGLIB/std/os/wasi.zig	/pub const PATH_LINK_SOURCE: rights_t = 0x0000000000000800/;"	constant
PATH_LINK_TARGET	$ZIGLIB/std/os/wasi.zig	/pub const PATH_LINK_TARGET: rights_t = 0x0000000000001000/;"	constant
PATH_MAX	$ZIGLIB/std/os/linux.zig	/^pub const PATH_MAX = 4096/;"	constant
PATH_MAX_WIDE	$ZIGLIB/std/os/windows.zig	/^pub const PATH_MAX_WIDE = 32767/;"	constant
PATH_NOT_COVERED	$ZIGLIB/std/os/windows/ntstatus.zig	/PATH_NOT_COVERED = 0xC0000257/;"	field
PATH_NOT_FOUND	$ZIGLIB/std/os/windows/win32error.zig	/PATH_NOT_FOUND = 3/;"	field
PATH_OPEN	$ZIGLIB/std/os/wasi.zig	/pub const PATH_OPEN: rights_t = 0x0000000000002000/;"	constant
PATH_READLINK	$ZIGLIB/std/os/wasi.zig	/pub const PATH_READLINK: rights_t = 0x0000000000008000/;"	constant
PATH_REMOVE_DIRECTORY	$ZIGLIB/std/os/wasi.zig	/pub const PATH_REMOVE_DIRECTORY: rights_t = 0x0000000002000000/;"	constant
PATH_RENAME_SOURCE	$ZIGLIB/std/os/wasi.zig	/pub const PATH_RENAME_SOURCE: rights_t = 0x0000000000010000/;"	constant
PATH_RENAME_TARGET	$ZIGLIB/std/os/wasi.zig	/pub const PATH_RENAME_TARGET: rights_t = 0x0000000000020000/;"	constant
PATH_SYMLINK	$ZIGLIB/std/os/wasi.zig	/pub const PATH_SYMLINK: rights_t = 0x0000000001000000/;"	constant
PATH_UNLINK_FILE	$ZIGLIB/std/os/wasi.zig	/pub const PATH_UNLINK_FILE: rights_t = 0x0000000004000000/;"	constant
PAUSE_ACCEPT	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const PAUSE_ACCEPT = 12291/;"	constant
PAUSE_OUTPUT	$ZIGLIB/std/os/linux.zig	/pub const PAUSE_OUTPUT = 1074013193/;"	constant
PBM_DELTAPOS	$ZIGLIB/std/os/windows/user32.zig	/^pub const PBM_DELTAPOS = 0x0403/;"	constant
PBM_GETPOS	$ZIGLIB/std/os/windows/user32.zig	/^pub const PBM_GETPOS = 0x0408/;"	constant
PBM_GETRANGE	$ZIGLIB/std/os/windows/user32.zig	/^pub const PBM_GETRANGE = 0x0407/;"	constant
PBM_SETBARCOLOR	$ZIGLIB/std/os/windows/user32.zig	/^pub const PBM_SETBARCOLOR = 0x0409/;"	constant
PBM_SETPOS	$ZIGLIB/std/os/windows/user32.zig	/^pub const PBM_SETPOS = 0x0402/;"	constant
PBM_SETRANGE	$ZIGLIB/std/os/windows/user32.zig	/^pub const PBM_SETRANGE = 0x0401/;"	constant
PBM_SETRANGE32	$ZIGLIB/std/os/windows/user32.zig	/^pub const PBM_SETRANGE32 = 0x0406/;"	constant
PBM_SETSTEP	$ZIGLIB/std/os/windows/user32.zig	/^pub const PBM_SETSTEP = 0x0404/;"	constant
PBM_STEPIT	$ZIGLIB/std/os/windows/user32.zig	/^pub const PBM_STEPIT = 0x0405/;"	constant
PCWSTR	$ZIGLIB/std/os/windows.zig	/^pub const PCWSTR = [*:0]const WCHAR/;"	constant
PDBStringTableHeader	$ZIGLIB/std/pdb.zig	/^pub const PDBStringTableHeader = extern struct {$/;"	struct
PDP10	$ZIGLIB/std/elf.zig	/PDP10 = 64/;"	field
PDP11	$ZIGLIB/std/elf.zig	/PDP11 = 65/;"	field
PDSP	$ZIGLIB/std/elf.zig	/PDSP = 63/;"	field
PEB_LDR_DATA	$ZIGLIB/std/os/windows.zig	/^pub const PEB_LDR_DATA = extern struct {$/;"	struct
PEEK	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const PEEK = 2/;"	constant
PEEK_OFF	$ZIGLIB/std/os/linux.zig	/pub const PEEK_OFF = 42/;"	constant
PEERCRED	$ZIGLIB/std/os/linux.zig	/pub const PEERCRED = 64/;"	constant
PEERGROUPS	$ZIGLIB/std/os/linux.zig	/pub const PEERGROUPS = 61/;"	constant
PEERLABEL	$ZIGLIB/std/c/freebsd.zig	/pub const PEERLABEL = 0x1010/;"	constant
PEERNAME	$ZIGLIB/std/os/linux.zig	/pub const PEERNAME = 28/;"	constant
PEERSEC	$ZIGLIB/std/os/linux.zig	/pub const PEERSEC = 31/;"	constant
PENDIN	$ZIGLIB/std/c/darwin.zig	/^pub const PENDIN: tcflag_t = 0x20000000/;"	constant
PENDING	$ZIGLIB/std/os/windows/ntstatus.zig	/PENDING = 0x00000103/;"	field
PENUM_PAGE_FILE_CALLBACKA	$ZIGLIB/std/os/windows.zig	/^pub const PENUM_PAGE_FILE_CALLBACKA = ?*const fn (?LPVOID, *ENUM_PAGE_FILE_INFORMATION, LPCSTR) callconv(.C) BOOL/;"	constant
PENUM_PAGE_FILE_CALLBACKW	$ZIGLIB/std/os/windows.zig	/^pub const PENUM_PAGE_FILE_CALLBACKW = ?*const fn (?LPVOID, *ENUM_PAGE_FILE_INFORMATION, LPCWSTR) callconv(.C) BOOL/;"	constant
PERF	$ZIGLIB/std/os/linux.zig	/^pub const PERF = struct {$/;"	struct
PERFORMANCE_INFORMATION	$ZIGLIB/std/os/windows.zig	/^pub const PERFORMANCE_INFORMATION = extern struct {$/;"	struct
PERIOD	$ZIGLIB/std/os/linux.zig	/pub const PERIOD = 256/;"	constant
PERM	$ZIGLIB/std/os/wasi.zig	/PERM = 63/;"	field
PERSIAN	$ZIGLIB/std/os/windows/lang.zig	/^pub const PERSIAN = 0x29/;"	constant
PERSIAN_IRAN	$ZIGLIB/std/os/windows/sublang.zig	/^pub const PERSIAN_IRAN = 0x01/;"	constant
PER_USER_TRUST_QUOTA_EXCEEDED	$ZIGLIB/std/os/windows/win32error.zig	/PER_USER_TRUST_QUOTA_EXCEEDED = 1932/;"	field
PFL_HIDDEN	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const PFL_HIDDEN = 4/;"	constant
PFL_MATCHES_PROTOCOL_ZERO	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const PFL_MATCHES_PROTOCOL_ZERO = 8/;"	constant
PFL_MULTIPLE_PROTO_ENTRIES	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const PFL_MULTIPLE_PROTO_ENTRIES = 1/;"	constant
PFL_NETWORKDIRECT_PROVIDER	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const PFL_NETWORKDIRECT_PROVIDER = 16/;"	constant
PFL_RECOMMENDED_PROTO_ENTRY	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const PFL_RECOMMENDED_PROTO_ENTRY = 2/;"	constant
PFNOSUPPORT	$ZIGLIB/std/os/linux/errno/sparc.zig	/PFNOSUPPORT = 46/;"	field
PFSTATUS	$ZIGLIB/std/c/openbsd.zig	/pub const PFSTATUS = 86/;"	constant
PFSYNC	$ZIGLIB/std/c/openbsd.zig	/pub const PFSYNC = 240/;"	constant
PF_MASKOS	$ZIGLIB/std/elf.zig	/^pub const PF_MASKOS = 0x0ff00000/;"	constant
PF_MASKPROC	$ZIGLIB/std/elf.zig	/^pub const PF_MASKPROC = 0xf0000000/;"	constant
PF_R	$ZIGLIB/std/elf.zig	/^pub const PF_R = 4/;"	constant
PF_W	$ZIGLIB/std/elf.zig	/^pub const PF_W = 2/;"	constant
PF_X	$ZIGLIB/std/elf.zig	/^pub const PF_X = 1/;"	constant
PGID	$ZIGLIB/std/os/linux.zig	/PGID = 2/;"	field
PGI_interface_block	$ZIGLIB/std/dwarf/TAG.zig	/^pub const PGI_interface_block = 0xA020/;"	constant
PGI_kanji_type	$ZIGLIB/std/dwarf/TAG.zig	/^pub const PGI_kanji_type = 0xA000/;"	constant
PGI_lbase	$ZIGLIB/std/dwarf/AT.zig	/^pub const PGI_lbase = 0x3a00/;"	constant
PGI_lstride	$ZIGLIB/std/dwarf/AT.zig	/^pub const PGI_lstride = 0x3a02/;"	constant
PGI_omp_thread_num	$ZIGLIB/std/dwarf/OP.zig	/^pub const PGI_omp_thread_num = 0xf8/;"	constant
PGI_soffset	$ZIGLIB/std/dwarf/AT.zig	/^pub const PGI_soffset = 0x3a01/;"	constant
PGOFF_RX_RING	$ZIGLIB/std/os/linux.zig	/pub const PGOFF_RX_RING = 0/;"	constant
PGOFF_TX_RING	$ZIGLIB/std/os/linux.zig	/pub const PGOFF_TX_RING = 0x80000000/;"	constant
PGRP	$ZIGLIB/std/c/solaris.zig	/PGRP = 1/;"	field
PHONET	$ZIGLIB/std/os/linux.zig	/pub const PHONET = 35/;"	constant
PHYS_ADDR	$ZIGLIB/std/os/linux.zig	/pub const PHYS_ADDR = 524288/;"	constant
PHYS_PORT_ID	$ZIGLIB/std/os/linux.zig	/PHYS_PORT_ID/;"	field
PHYS_PORT_NAME	$ZIGLIB/std/os/linux.zig	/PHYS_PORT_NAME/;"	field
PHYS_SWITCH_ID	$ZIGLIB/std/os/linux.zig	/PHYS_SWITCH_ID/;"	field
PIDFD	$ZIGLIB/std/os/linux.zig	/pub const PIDFD = 0x00001000/;"	constant
PID_CGROUP	$ZIGLIB/std/os/linux.zig	/pub const PID_CGROUP = 1 << 2/;"	constant
PIGP	$ZIGLIB/std/c/freebsd.zig	/pub const PIGP = 9/;"	constant
PIMAGE_TLS_CALLBACK	$ZIGLIB/std/os/windows.zig	/^pub const PIMAGE_TLS_CALLBACK = ?*const fn (PVOID, DWORD, PVOID) callconv(.C) void/;"	constant
PIPE	$ZIGLIB/std/os/wasi.zig	/PIPE = 64/;"	field
PIPE_ACCESS_DUPLEX	$ZIGLIB/std/os/windows.zig	/^pub const PIPE_ACCESS_DUPLEX = 0x00000003/;"	constant
PIPE_ACCESS_INBOUND	$ZIGLIB/std/os/windows.zig	/^pub const PIPE_ACCESS_INBOUND = 0x00000001/;"	constant
PIPE_ACCESS_OUTBOUND	$ZIGLIB/std/os/windows.zig	/^pub const PIPE_ACCESS_OUTBOUND = 0x00000002/;"	constant
PIPE_BROKEN	$ZIGLIB/std/os/windows/ntstatus.zig	/PIPE_BROKEN = 0xC000014B/;"	field
PIPE_BUSY	$ZIGLIB/std/os/windows/win32error.zig	/PIPE_BUSY = 231/;"	field
PIPE_CLOSING	$ZIGLIB/std/os/windows/ntstatus.zig	/PIPE_CLOSING = 0xC00000B1/;"	field
PIPE_CONNECTED	$ZIGLIB/std/os/windows/win32error.zig	/PIPE_CONNECTED = 535/;"	field
PIPE_DISCONNECTED	$ZIGLIB/std/os/windows/ntstatus.zig	/PIPE_DISCONNECTED = 0xC00000B0/;"	field
PIPE_EMPTY	$ZIGLIB/std/os/windows/ntstatus.zig	/PIPE_EMPTY = 0xC00000D9/;"	field
PIPE_LISTENING	$ZIGLIB/std/os/windows/win32error.zig	/PIPE_LISTENING = 536/;"	field
PIPE_LOCAL	$ZIGLIB/std/os/windows/win32error.zig	/PIPE_LOCAL = 229/;"	field
PIPE_NOT_AVAILABLE	$ZIGLIB/std/os/windows/ntstatus.zig	/PIPE_NOT_AVAILABLE = 0xC00000AC/;"	field
PIPE_NOT_CONNECTED	$ZIGLIB/std/os/windows/win32error.zig	/PIPE_NOT_CONNECTED = 233/;"	field
PIPE_NOWAIT	$ZIGLIB/std/os/windows.zig	/^pub const PIPE_NOWAIT = 0x00000001/;"	constant
PIPE_READMODE_BYTE	$ZIGLIB/std/os/windows.zig	/^pub const PIPE_READMODE_BYTE = 0x00000000/;"	constant
PIPE_READMODE_MESSAGE	$ZIGLIB/std/os/windows.zig	/^pub const PIPE_READMODE_MESSAGE = 0x00000002/;"	constant
PIPE_TYPE_BYTE	$ZIGLIB/std/os/windows.zig	/^pub const PIPE_TYPE_BYTE = 0x00000000/;"	constant
PIPE_TYPE_MESSAGE	$ZIGLIB/std/os/windows.zig	/^pub const PIPE_TYPE_MESSAGE = 0x00000004/;"	constant
PIPE_WAIT	$ZIGLIB/std/os/windows.zig	/^pub const PIPE_WAIT = 0x00000000/;"	constant
PIXELFORMATDESCRIPTOR	$ZIGLIB/std/os/windows/gdi32.zig	/^pub const PIXELFORMATDESCRIPTOR = extern struct {$/;"	struct
PI_ALLOWED	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const PI_ALLOWED = 0/;"	constant
PI_NUMBER_NOT_AVAILABLE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const PI_NUMBER_NOT_AVAILABLE = 128/;"	constant
PI_RESTRICTED	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const PI_RESTRICTED = 64/;"	constant
PIo2	$ZIGLIB/compiler_rt/rem_pio2_large.zig	/^const PIo2 = [_]f64{$/;"	constant
PKINIT_CLIENT_FAILURE	$ZIGLIB/std/os/windows/ntstatus.zig	/PKINIT_CLIENT_FAILURE = 0xC000038C/;"	field
PKINIT_FAILURE	$ZIGLIB/std/os/windows/win32error.zig	/PKINIT_FAILURE = 1263/;"	field
PKINIT_NAME_MISMATCH	$ZIGLIB/std/os/windows/ntstatus.zig	/PKINIT_NAME_MISMATCH = 0xC00002F9/;"	field
PKTINFO	$ZIGLIB/std/os/linux.zig	/pub const PKTINFO = 8/;"	constant
PKTOPTIONS	$ZIGLIB/std/os/linux.zig	/pub const PKTOPTIONS = 9/;"	constant
PKU2U_CERT_FAILURE	$ZIGLIB/std/os/windows/ntstatus.zig	/PKU2U_CERT_FAILURE = 0xC000042E/;"	field
PLATFORM	$ZIGLIB/std/macho.zig	/^pub const PLATFORM = enum(u32) {$/;"	enum
PLUGPLAY_NO_DEVICE	$ZIGLIB/std/os/windows/ntstatus.zig	/PLUGPLAY_NO_DEVICE = 0xC000025E/;"	field
PLUGPLAY_QUERY_VETOED	$ZIGLIB/std/os/windows/win32error.zig	/PLUGPLAY_QUERY_VETOED = 683/;"	field
PMEMORY_BASIC_INFORMATION	$ZIGLIB/std/os/windows.zig	/^pub const PMEMORY_BASIC_INFORMATION = *MEMORY_BASIC_INFORMATION/;"	constant
PMTUDISC	$ZIGLIB/std/os/linux.zig	/pub const PMTUDISC = 10/;"	constant
PMTUDISC_DO	$ZIGLIB/std/os/linux.zig	/pub const PMTUDISC_DO = 2/;"	constant
PMTUDISC_DONT	$ZIGLIB/std/os/linux.zig	/pub const PMTUDISC_DONT = 0/;"	constant
PMTUDISC_INTERFACE	$ZIGLIB/std/os/linux.zig	/pub const PMTUDISC_INTERFACE = 4/;"	constant
PMTUDISC_OMIT	$ZIGLIB/std/os/linux.zig	/pub const PMTUDISC_OMIT = 5/;"	constant
PMTUDISC_PROBE	$ZIGLIB/std/os/linux.zig	/pub const PMTUDISC_PROBE = 3/;"	constant
PMTUDISC_WANT	$ZIGLIB/std/os/linux.zig	/pub const PMTUDISC_WANT = 1/;"	constant
PM_NOREMOVE	$ZIGLIB/std/os/windows/user32.zig	/^pub const PM_NOREMOVE = 0x0000/;"	constant
PM_NOYIELD	$ZIGLIB/std/os/windows/user32.zig	/^pub const PM_NOYIELD = 0x0002/;"	constant
PM_REMOVE	$ZIGLIB/std/os/windows/user32.zig	/^pub const PM_REMOVE = 0x0001/;"	constant
PNPIPE	$ZIGLIB/std/os/linux.zig	/pub const PNPIPE = 275/;"	constant
PNP_BAD_MPS_TABLE	$ZIGLIB/std/os/windows/win32error.zig	/PNP_BAD_MPS_TABLE = 671/;"	field
PNP_INVALID_ID	$ZIGLIB/std/os/windows/win32error.zig	/PNP_INVALID_ID = 674/;"	field
PNP_IRQ_TRANSLATION_FAILED	$ZIGLIB/std/os/windows/win32error.zig	/PNP_IRQ_TRANSLATION_FAILED = 673/;"	field
PNP_REBOOT_REQUIRED	$ZIGLIB/std/os/windows/win32error.zig	/PNP_REBOOT_REQUIRED = 638/;"	field
PNP_RESTART_ENUMERATION	$ZIGLIB/std/os/windows/win32error.zig	/PNP_RESTART_ENUMERATION = 636/;"	field
PNP_TRANSLATION_FAILED	$ZIGLIB/std/os/windows/win32error.zig	/PNP_TRANSLATION_FAILED = 672/;"	field
POGO	$ZIGLIB/std/coff.zig	/POGO = 13/;"	field
POINT	$ZIGLIB/std/os/windows.zig	/^pub const POINT = extern struct {$/;"	struct
POINTER	$ZIGLIB/std/coff.zig	/POINTER = 16/;"	field
POINT_NOT_FOUND	$ZIGLIB/std/os/windows/win32error.zig	/POINT_NOT_FOUND = 1171/;"	field
POLICY	$ZIGLIB/std/os/darwin/cssm.zig	/POLICY = DB_RECORDTYPE_OPEN_GROUP_START + 3/;"	field
POLICY_LIMIT	$ZIGLIB/std/c/darwin.zig	/POLICY_LIMIT = 27/;"	field
POLICY_OBJECT_NOT_FOUND	$ZIGLIB/std/os/windows/ntstatus.zig	/POLICY_OBJECT_NOT_FOUND = 0xC000029A/;"	field
POLICY_ONLY_IN_DS	$ZIGLIB/std/os/windows/ntstatus.zig	/POLICY_ONLY_IN_DS = 0xC000029B/;"	field
POLICY_STATIC	$ZIGLIB/std/c/darwin.zig	/POLICY_STATIC = 51/;"	field
POLISH	$ZIGLIB/std/os/windows/lang.zig	/^pub const POLISH = 0x15/;"	constant
POLISH_POLAND	$ZIGLIB/std/os/windows/sublang.zig	/^pub const POLISH_POLAND = 0x01/;"	constant
POLL	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const POLL = struct {$/;"	struct
POLL_ADD	$ZIGLIB/std/os/linux.zig	/POLL_ADD/;"	field
POLL_FD_READWRITE	$ZIGLIB/std/os/wasi.zig	/pub const POLL_FD_READWRITE: rights_t = 0x0000000008000000/;"	constant
POLL_REMOVE	$ZIGLIB/std/os/linux.zig	/POLL_REMOVE/;"	field
POOL	$ZIGLIB/std/c/openbsd.zig	/pub const POOL = 49/;"	constant
POOL_DEBUG	$ZIGLIB/std/c/openbsd.zig	/pub const POOL_DEBUG = 77/;"	constant
POPULATE	$ZIGLIB/std/os/linux.zig	/pub const POPULATE = if (is_mips) 0x10000 else 0x8000/;"	constant
POPUP	$ZIGLIB/std/c/darwin.zig	/pub const POPUP = 2147483648/;"	constant
POPUP_ALREADY_ACTIVE	$ZIGLIB/std/os/windows/win32error.zig	/POPUP_ALREADY_ACTIVE = 1446/;"	field
PORTUGUESE	$ZIGLIB/std/os/windows/sublang.zig	/^pub const PORTUGUESE = 0x02/;"	constant
PORTUGUESE_BRAZILIAN	$ZIGLIB/std/os/windows/sublang.zig	/^pub const PORTUGUESE_BRAZILIAN = 0x01/;"	constant
PORT_ALERT	$ZIGLIB/std/c/solaris.zig	/^pub const PORT_ALERT = struct {$/;"	struct
PORT_ALREADY_HAS_COMPLETION_LIST	$ZIGLIB/std/os/windows/ntstatus.zig	/PORT_ALREADY_HAS_COMPLETION_LIST = 0xC000071A/;"	field
PORT_ALREADY_SET	$ZIGLIB/std/os/windows/ntstatus.zig	/PORT_ALREADY_SET = 0xC0000048/;"	field
PORT_CLOSED	$ZIGLIB/std/os/windows/ntstatus.zig	/PORT_CLOSED = 0xC0000700/;"	field
PORT_CONNECTION_REFUSED	$ZIGLIB/std/os/windows/ntstatus.zig	/PORT_CONNECTION_REFUSED = 0xC0000041/;"	field
PORT_DISCONNECTED	$ZIGLIB/std/os/windows/ntstatus.zig	/PORT_DISCONNECTED = 0xC0000037/;"	field
PORT_MESSAGE_TOO_LONG	$ZIGLIB/std/os/windows/win32error.zig	/PORT_MESSAGE_TOO_LONG = 546/;"	field
PORT_NOT_SET	$ZIGLIB/std/os/windows/win32error.zig	/PORT_NOT_SET = 642/;"	field
PORT_SCALABILITY	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const PORT_SCALABILITY = 12294/;"	constant
PORT_SELF	$ZIGLIB/std/os/linux.zig	/PORT_SELF/;"	field
PORT_SET	$ZIGLIB/std/c/darwin.zig	/PORT_SET = 3/;"	field
PORT_SOURCE	$ZIGLIB/std/c/solaris.zig	/^pub const PORT_SOURCE = struct {$/;"	struct
PORT_UNREACHABLE	$ZIGLIB/std/os/windows/win32error.zig	/PORT_UNREACHABLE = 1234/;"	field
POSIX1	$ZIGLIB/std/c/openbsd.zig	/pub const POSIX1 = 17/;"	constant
POSIXACL	$ZIGLIB/std/os/linux.zig	/pub const POSIXACL = (1 << 16)/;"	constant
POSIXLOCKS	$ZIGLIB/std/c/dragonfly.zig	/POSIXLOCKS = 11/;"	field
POSIX_CUI	$ZIGLIB/std/coff.zig	/POSIX_CUI = 7/;"	field
POSIX_FADV	$ZIGLIB/std/os/linux.zig	/^pub const POSIX_FADV = switch (native_arch) {$/;"	constant
POSIX_MADV_DONTNEED	$ZIGLIB/std/c/dragonfly.zig	/^pub const POSIX_MADV_DONTNEED = 4/;"	constant
POSIX_MADV_NORMAL	$ZIGLIB/std/c/dragonfly.zig	/^pub const POSIX_MADV_NORMAL = 0/;"	constant
POSIX_MADV_RANDOM	$ZIGLIB/std/c/dragonfly.zig	/^pub const POSIX_MADV_RANDOM = 1/;"	constant
POSIX_MADV_SEQUENTIAL	$ZIGLIB/std/c/dragonfly.zig	/^pub const POSIX_MADV_SEQUENTIAL = 2/;"	constant
POSIX_MADV_WILLNEED	$ZIGLIB/std/c/dragonfly.zig	/^pub const POSIX_MADV_WILLNEED = 3/;"	constant
POSIX_SPAWN_CLOEXEC_DEFAULT	$ZIGLIB/std/c/darwin.zig	/^pub const POSIX_SPAWN_CLOEXEC_DEFAULT = 0x4000/;"	constant
POSIX_SPAWN_RESETIDS	$ZIGLIB/std/c/darwin.zig	/^pub const POSIX_SPAWN_RESETIDS = 0x0001/;"	constant
POSIX_SPAWN_SETEXEC	$ZIGLIB/std/c/darwin.zig	/^pub const POSIX_SPAWN_SETEXEC = 0x0040/;"	constant
POSIX_SPAWN_SETPGROUP	$ZIGLIB/std/c/darwin.zig	/^pub const POSIX_SPAWN_SETPGROUP = 0x0002/;"	constant
POSIX_SPAWN_SETSID	$ZIGLIB/std/c/darwin.zig	/^pub const POSIX_SPAWN_SETSID = 0x0400/;"	constant
POSIX_SPAWN_SETSIGDEF	$ZIGLIB/std/c/darwin.zig	/^pub const POSIX_SPAWN_SETSIGDEF = 0x0004/;"	constant
POSIX_SPAWN_SETSIGMASK	$ZIGLIB/std/c/darwin.zig	/^pub const POSIX_SPAWN_SETSIGMASK = 0x0008/;"	constant
POSIX_SPAWN_START_SUSPENDED	$ZIGLIB/std/c/darwin.zig	/^pub const POSIX_SPAWN_START_SUSPENDED = 0x0080/;"	constant
POSSIBLE_DEADLOCK	$ZIGLIB/std/os/windows/win32error.zig	/POSSIBLE_DEADLOCK = 1131/;"	field
POST	$ZIGLIB/std/http.zig	/POST/;"	field
POTENTIAL_FILE_FOUND	$ZIGLIB/std/os/windows/win32error.zig	/POTENTIAL_FILE_FOUND = 1180/;"	field
POWERPC	$ZIGLIB/std/coff.zig	/POWERPC = 0x1f0/;"	field
POWERPCFP	$ZIGLIB/std/coff.zig	/POWERPCFP = 0x1f1/;"	field
POWERPC_G3	$ZIGLIB/std/c/darwin.zig	/POWERPC_G3 = 0xcee41549/;"	field
POWERPC_G4	$ZIGLIB/std/c/darwin.zig	/POWERPC_G4 = 0x77c184ae/;"	field
POWERPC_G5	$ZIGLIB/std/c/darwin.zig	/POWERPC_G5 = 0xed76d8aa/;"	field
POWER_OFF	$ZIGLIB/std/os/linux.zig	/POWER_OFF = 0x4321FEDC/;"	field
POWER_STATE_INVALID	$ZIGLIB/std/os/windows/ntstatus.zig	/POWER_STATE_INVALID = 0xC00002D3/;"	field
PPC64	$ZIGLIB/std/os/linux.zig	/PPC64 = toAudit(.powerpc64)/;"	field
PPC64LE	$ZIGLIB/std/os/linux.zig	/PPC64LE = toAudit(.powerpc64le)/;"	field
PPC_MOVEMEM_64BIT_OK	$ZIGLIB/std/os/windows.zig	/PPC_MOVEMEM_64BIT_OK = 4/;"	field
PPPOL2TP	$ZIGLIB/std/os/linux.zig	/pub const PPPOL2TP = 273/;"	constant
PPPOX	$ZIGLIB/std/os/linux.zig	/pub const PPPOX = 24/;"	constant
PPS_POST_PROCESS_INIT_ROUTINE	$ZIGLIB/std/os/windows.zig	/^pub const PPS_POST_PROCESS_INIT_ROUTINE = ?*const fn () callconv(.C) void/;"	constant
PPollError	$ZIGLIB/std/os.zig	/^pub const PPollError = error{$/;"	constant
PQgt	$ZIGLIB/std/priority_queue.zig	/^const PQgt = PriorityQueue(u32, void, greaterThan)/;"	constant
PQlt	$ZIGLIB/std/priority_queue.zig	/^const PQlt = PriorityQueue(u32, void, lessThan)/;"	constant
PREAD	$ZIGLIB/std/os/plan9.zig	/PREAD = 50/;"	field
PREALLOCATE	$ZIGLIB/std/c/darwin.zig	/pub const PREALLOCATE = 42/;"	constant
PREBIND_CKSUM	$ZIGLIB/std/macho.zig	/PREBIND_CKSUM = 0x17/;"	field
PREBOUND_DYLIB	$ZIGLIB/std/macho.zig	/PREBOUND_DYLIB = 0x10/;"	field
PREDEFINED_HANDLE	$ZIGLIB/std/os/windows/win32error.zig	/PREDEFINED_HANDLE = 714/;"	field
PREFAULT_READ	$ZIGLIB/std/c/freebsd.zig	/pub const PREFAULT_READ = 0x00040000/;"	constant
PREFER_SRC_CGA	$ZIGLIB/std/os/linux.zig	/pub const PREFER_SRC_CGA = 0x0008/;"	constant
PREFER_SRC_COA	$ZIGLIB/std/os/linux.zig	/pub const PREFER_SRC_COA = 0x0004/;"	constant
PREFER_SRC_HOME	$ZIGLIB/std/os/linux.zig	/pub const PREFER_SRC_HOME = 0x0400/;"	constant
PREFER_SRC_NONCGA	$ZIGLIB/std/os/linux.zig	/pub const PREFER_SRC_NONCGA = 0x0800/;"	constant
PREFER_SRC_PUBLIC	$ZIGLIB/std/os/linux.zig	/pub const PREFER_SRC_PUBLIC = 0x0002/;"	constant
PREFER_SRC_PUBTMP_DEFAULT	$ZIGLIB/std/os/linux.zig	/pub const PREFER_SRC_PUBTMP_DEFAULT = 0x0100/;"	constant
PREFER_SRC_TMP	$ZIGLIB/std/os/linux.zig	/pub const PREFER_SRC_TMP = 0x0001/;"	constant
PREFETCH	$ZIGLIB/std/os/linux.zig	/PREFETCH/;"	field
PRENT4_MACHINE_ACCOUNT	$ZIGLIB/std/os/windows/ntstatus.zig	/PRENT4_MACHINE_ACCOUNT = 0xC0000357/;"	field
PREOPENTYPE_DIR	$ZIGLIB/std/os/wasi.zig	/^pub const PREOPENTYPE_DIR: preopentype_t = 0/;"	constant
PREPAGE	$ZIGLIB/std/macho.zig	/PREPAGE = 0xa/;"	field
PRIMARY_TRANSPORT_CONNECT_FAILED	$ZIGLIB/std/os/windows/win32error.zig	/PRIMARY_TRANSPORT_CONNECT_FAILED = 746/;"	field
PRINTER_ALREADY_EXISTS	$ZIGLIB/std/os/windows/win32error.zig	/PRINTER_ALREADY_EXISTS = 1802/;"	field
PRINTER_DELETED	$ZIGLIB/std/os/windows/win32error.zig	/PRINTER_DELETED = 1905/;"	field
PRINTER_DRIVER_ALREADY_INSTALLED	$ZIGLIB/std/os/windows/win32error.zig	/PRINTER_DRIVER_ALREADY_INSTALLED = 1795/;"	field
PRINTER_DRIVER_BLOCKED	$ZIGLIB/std/os/windows/win32error.zig	/PRINTER_DRIVER_BLOCKED = 3014/;"	field
PRINTER_DRIVER_DOWNLOAD_NEEDED	$ZIGLIB/std/os/windows/win32error.zig	/PRINTER_DRIVER_DOWNLOAD_NEEDED = 3019/;"	field
PRINTER_DRIVER_IN_USE	$ZIGLIB/std/os/windows/win32error.zig	/PRINTER_DRIVER_IN_USE = 3001/;"	field
PRINTER_DRIVER_PACKAGE_IN_USE	$ZIGLIB/std/os/windows/win32error.zig	/PRINTER_DRIVER_PACKAGE_IN_USE = 3015/;"	field
PRINTER_DRIVER_WARNED	$ZIGLIB/std/os/windows/win32error.zig	/PRINTER_DRIVER_WARNED = 3013/;"	field
PRINTER_HAS_JOBS_QUEUED	$ZIGLIB/std/os/windows/win32error.zig	/PRINTER_HAS_JOBS_QUEUED = 3009/;"	field
PRINTER_NOT_FOUND	$ZIGLIB/std/os/windows/win32error.zig	/PRINTER_NOT_FOUND = 3012/;"	field
PRINTER_NOT_SHAREABLE	$ZIGLIB/std/os/windows/win32error.zig	/PRINTER_NOT_SHAREABLE = 3022/;"	field
PRINTQ_FULL	$ZIGLIB/std/os/windows/win32error.zig	/PRINTQ_FULL = 61/;"	field
PRINT_CANCELLED	$ZIGLIB/std/os/windows/win32error.zig	/PRINT_CANCELLED = 63/;"	field
PRINT_JOB_RESTART_REQUIRED	$ZIGLIB/std/os/windows/win32error.zig	/PRINT_JOB_RESTART_REQUIRED = 3020/;"	field
PRINT_MONITOR_ALREADY_INSTALLED	$ZIGLIB/std/os/windows/win32error.zig	/PRINT_MONITOR_ALREADY_INSTALLED = 3006/;"	field
PRINT_MONITOR_IN_USE	$ZIGLIB/std/os/windows/win32error.zig	/PRINT_MONITOR_IN_USE = 3008/;"	field
PRINT_PROCESSOR_ALREADY_INSTALLED	$ZIGLIB/std/os/windows/win32error.zig	/PRINT_PROCESSOR_ALREADY_INSTALLED = 3005/;"	field
PRINT_QUEUE_FULL	$ZIGLIB/std/os/windows/ntstatus.zig	/PRINT_QUEUE_FULL = 0xC00000C6/;"	field
PRIORITY	$ZIGLIB/std/os/linux.zig	/pub const PRIORITY = 12/;"	constant
PRISM	$ZIGLIB/std/elf.zig	/PRISM = 82/;"	field
PRIV	$ZIGLIB/std/c/solaris.zig	/pub const PRIV = 15/;"	constant
PRIVATE	$ZIGLIB/std/os/linux.zig	/pub const PRIVATE = 0x02/;"	constant
PRIVATE_DIALOG_INDEX	$ZIGLIB/std/os/windows/win32error.zig	/PRIVATE_DIALOG_INDEX = 1415/;"	field
PRIVATE_FLAG	$ZIGLIB/std/os/linux.zig	/pub const PRIVATE_FLAG = 128/;"	constant
PRIVATE_KEY	$ZIGLIB/std/os/darwin/cssm.zig	/PRIVATE_KEY = DB_RECORDTYPE_OPEN_GROUP_START + 6/;"	field
PRIVILEGED_INSTRUCTION	$ZIGLIB/std/os/windows/ntstatus.zig	/PRIVILEGED_INSTRUCTION = 0xC0000096/;"	field
PRIVILEGE_NOT_HELD	$ZIGLIB/std/os/windows/win32error.zig	/PRIVILEGE_NOT_HELD = 1314/;"	field
PROBE	$ZIGLIB/std/c/solaris.zig	/pub const PROBE = @intToPtr(*anyopaque, @bitCast(usize, @as(isize, -4)))/;"	constant
PROC	$ZIGLIB/std/c/openbsd.zig	/pub const PROC = 66/;"	constant
PROCEDURE_NOT_FOUND	$ZIGLIB/std/os/windows/ntstatus.zig	/PROCEDURE_NOT_FOUND = 0xC000007A/;"	field
PROCESS	$ZIGLIB/std/c/solaris.zig	/PROCESS = 0/;"	field
PROCESSOR_FEATURE_MAX	$ZIGLIB/std/os/windows.zig	/^pub const PROCESSOR_FEATURE_MAX = 64/;"	constant
PROCESS_ABORTED	$ZIGLIB/std/os/windows/win32error.zig	/PROCESS_ABORTED = 1067/;"	field
PROCESS_CLONED	$ZIGLIB/std/os/windows/ntstatus.zig	/PROCESS_CLONED = 0x00000129/;"	field
PROCESS_CPUTIME_ID	$ZIGLIB/std/os/wasi.zig	/pub const PROCESS_CPUTIME_ID: clockid_t = 2/;"	constant
PROCESS_INFORMATION	$ZIGLIB/std/os/windows.zig	/^pub const PROCESS_INFORMATION = extern struct {$/;"	struct
PROCESS_IN_JOB	$ZIGLIB/std/os/windows/win32error.zig	/PROCESS_IN_JOB = 760/;"	field
PROCESS_IS_PROTECTED	$ZIGLIB/std/os/windows/win32error.zig	/PROCESS_IS_PROTECTED = 1293/;"	field
PROCESS_IS_TERMINATING	$ZIGLIB/std/os/windows/ntstatus.zig	/PROCESS_IS_TERMINATING = 0xC000010A/;"	field
PROCESS_MEMORY_COUNTERS	$ZIGLIB/std/os/windows.zig	/^pub const PROCESS_MEMORY_COUNTERS = extern struct {$/;"	struct
PROCESS_MEMORY_COUNTERS_EX	$ZIGLIB/std/os/windows.zig	/^pub const PROCESS_MEMORY_COUNTERS_EX = extern struct {$/;"	struct
PROCESS_MODE_ALREADY_BACKGROUND	$ZIGLIB/std/os/windows/win32error.zig	/PROCESS_MODE_ALREADY_BACKGROUND = 402/;"	field
PROCESS_MODE_NOT_BACKGROUND	$ZIGLIB/std/os/windows/win32error.zig	/PROCESS_MODE_NOT_BACKGROUND = 403/;"	field
PROCESS_NOT_IN_JOB	$ZIGLIB/std/os/windows/win32error.zig	/PROCESS_NOT_IN_JOB = 759/;"	field
PROCLIM	$ZIGLIB/std/os/linux/errno/sparc.zig	/PROCLIM = 67/;"	field
PROCUNAVAIL	$ZIGLIB/std/c/openbsd.zig	/PROCUNAVAIL = 76/;"	field
PROC_ALL	$ZIGLIB/std/c/openbsd.zig	/pub const PROC_ALL = 0/;"	constant
PROC_ARGS	$ZIGLIB/std/c/openbsd.zig	/pub const PROC_ARGS = 55/;"	constant
PROC_ARGV	$ZIGLIB/std/c/openbsd.zig	/pub const PROC_ARGV = 1/;"	constant
PROC_CWD	$ZIGLIB/std/c/openbsd.zig	/pub const PROC_CWD = 78/;"	constant
PROC_ENV	$ZIGLIB/std/c/openbsd.zig	/pub const PROC_ENV = 3/;"	constant
PROC_FILEDESC	$ZIGLIB/std/c/freebsd.zig	/pub const PROC_FILEDESC = 33/;"	constant
PROC_FLAGMASK	$ZIGLIB/std/c/dragonfly.zig	/pub const PROC_FLAGMASK = 16/;"	constant
PROC_FLAG_LWP	$ZIGLIB/std/c/dragonfly.zig	/pub const PROC_FLAG_LWP = 16/;"	constant
PROC_KTHREAD	$ZIGLIB/std/c/openbsd.zig	/pub const PROC_KTHREAD = 7/;"	constant
PROC_NARGV	$ZIGLIB/std/c/openbsd.zig	/pub const PROC_NARGV = 2/;"	constant
PROC_NENV	$ZIGLIB/std/c/openbsd.zig	/pub const PROC_NENV = 4/;"	constant
PROC_NOBROADCASTKILL	$ZIGLIB/std/c/openbsd.zig	/pub const PROC_NOBROADCASTKILL = 79/;"	constant
PROC_NOT_FOUND	$ZIGLIB/std/os/windows/win32error.zig	/PROC_NOT_FOUND = 127/;"	field
PROC_PATHNAME	$ZIGLIB/std/c/netbsd.zig	/pub const PROC_PATHNAME = 5/;"	constant
PROC_PGRP	$ZIGLIB/std/c/openbsd.zig	/pub const PROC_PGRP = 2/;"	constant
PROC_PID	$ZIGLIB/std/c/openbsd.zig	/pub const PROC_PID = 1/;"	constant
PROC_RUID	$ZIGLIB/std/c/openbsd.zig	/pub const PROC_RUID = 6/;"	constant
PROC_SESSION	$ZIGLIB/std/c/openbsd.zig	/pub const PROC_SESSION = 3/;"	constant
PROC_SHOW_THREADS	$ZIGLIB/std/c/openbsd.zig	/pub const PROC_SHOW_THREADS = 0x40000000/;"	constant
PROC_SIGTRAMP	$ZIGLIB/std/c/dragonfly.zig	/pub const PROC_SIGTRAMP = 10/;"	constant
PROC_TTY	$ZIGLIB/std/c/openbsd.zig	/pub const PROC_TTY = 4/;"	constant
PROC_UID	$ZIGLIB/std/c/openbsd.zig	/pub const PROC_UID = 5/;"	constant
PROC_VMMAP	$ZIGLIB/std/c/openbsd.zig	/pub const PROC_VMMAP = 80/;"	constant
PRODUCT_UNINSTALLED	$ZIGLIB/std/os/windows/win32error.zig	/PRODUCT_UNINSTALLED = 1614/;"	field
PRODUCT_VERSION	$ZIGLIB/std/os/windows/win32error.zig	/PRODUCT_VERSION = 1638/;"	field
PROF	$ZIGLIB/std/os/linux.zig	/pub const PROF = 27/;"	constant
PROFILE_DOES_NOT_MATCH_DEVICE	$ZIGLIB/std/os/windows/win32error.zig	/PROFILE_DOES_NOT_MATCH_DEVICE = 2023/;"	field
PROFILE_NOT_ASSOCIATED_WITH_DEVICE	$ZIGLIB/std/os/windows/win32error.zig	/PROFILE_NOT_ASSOCIATED_WITH_DEVICE = 2015/;"	field
PROFILE_NOT_FOUND	$ZIGLIB/std/os/windows/win32error.zig	/PROFILE_NOT_FOUND = 2016/;"	field
PROFILING_AT_LIMIT	$ZIGLIB/std/os/windows/win32error.zig	/PROFILING_AT_LIMIT = 553/;"	field
PROFILING_NOT_STARTED	$ZIGLIB/std/os/windows/win32error.zig	/PROFILING_NOT_STARTED = 550/;"	field
PROFILING_NOT_STOPPED	$ZIGLIB/std/os/windows/win32error.zig	/PROFILING_NOT_STOPPED = 551/;"	field
PROGMISMATCH	$ZIGLIB/std/c/openbsd.zig	/PROGMISMATCH = 75/;"	field
PROGUNAVAIL	$ZIGLIB/std/c/openbsd.zig	/PROGUNAVAIL = 74/;"	field
PROJECT	$ZIGLIB/std/c/solaris.zig	/PROJECT = 7/;"	field
PROMISCUITY	$ZIGLIB/std/os/linux.zig	/PROMISCUITY/;"	field
PROPSET_NOT_FOUND	$ZIGLIB/std/os/windows/ntstatus.zig	/PROPSET_NOT_FOUND = 0xC0000230/;"	field
PROP_ADDRESSES	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const PROP_ADDRESSES = 256/;"	constant
PROP_ALL	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const PROP_ALL = 2147483648/;"	constant
PROP_COMMENT	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const PROP_COMMENT = 1/;"	constant
PROP_DISPLAY_HINT	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const PROP_DISPLAY_HINT = 4/;"	constant
PROP_LOCALE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const PROP_LOCALE = 2/;"	constant
PROP_MACHINE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const PROP_MACHINE = 32/;"	constant
PROP_SD	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const PROP_SD = 512/;"	constant
PROP_START_TIME	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const PROP_START_TIME = 16/;"	constant
PROP_VERSION	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const PROP_VERSION = 8/;"	constant
PROT	$ZIGLIB/std/os/linux.zig	/^pub const PROT = struct {$/;"	struct
PROTECTED	$ZIGLIB/std/elf.zig	/PROTECTED = 3/;"	field
PROTECTION_FAILURE	$ZIGLIB/std/c/darwin.zig	/PROTECTION_FAILURE = 2/;"	field
PROTECTION_LEVEL_EDGERESTRICTED	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const PROTECTION_LEVEL_EDGERESTRICTED = 20/;"	constant
PROTECTION_LEVEL_RESTRICTED	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const PROTECTION_LEVEL_RESTRICTED = 30/;"	constant
PROTECTION_LEVEL_UNRESTRICTED	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const PROTECTION_LEVEL_UNRESTRICTED = 10/;"	constant
PROTINFO	$ZIGLIB/std/os/linux.zig	/PROTINFO/;"	field
PROTO	$ZIGLIB/std/os/wasi.zig	/PROTO = 65/;"	field
PROTOCOL	$ZIGLIB/std/os/linux.zig	/pub const PROTOCOL = 4136/;"	constant
PROTOCOL_INFOA	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const PROTOCOL_INFOA = 8196/;"	constant
PROTOCOL_INFOW	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const PROTOCOL_INFOW = 8197/;"	constant
PROTOCOL_NOT_SUPPORTED	$ZIGLIB/std/os/windows/ntstatus.zig	/PROTOCOL_NOT_SUPPORTED = 0xC000A013/;"	field
PROTOCOL_UNREACHABLE	$ZIGLIB/std/os/windows/win32error.zig	/PROTOCOL_UNREACHABLE = 1233/;"	field
PROTONOSUPPORT	$ZIGLIB/std/os/wasi.zig	/PROTONOSUPPORT = 66/;"	field
PROTOTYPE	$ZIGLIB/std/os/wasi.zig	/PROTOTYPE = 67/;"	field
PROTO_DOWN	$ZIGLIB/std/os/linux.zig	/PROTO_DOWN/;"	field
PROTO_SDP	$ZIGLIB/std/c/solaris.zig	/pub const PROTO_SDP = 257/;"	constant
PROVIDE_BUFFERS	$ZIGLIB/std/os/linux.zig	/PROVIDE_BUFFERS/;"	field
PROV_RSA_FULL	$ZIGLIB/std/os/windows.zig	/^pub const PROV_RSA_FULL = 1/;"	constant
PROXY	$ZIGLIB/std/os/linux.zig	/pub const PROXY = 0x0010/;"	constant
PRead	$ZIGLIB/std/event/loop.zig	/pub const PRead = struct {$/;"	struct
PReadError	$ZIGLIB/std/os.zig	/^pub const PReadError = ReadError || error{Unseekable}/;"	constant
PReadV	$ZIGLIB/std/event/loop.zig	/pub const PReadV = struct {$/;"	struct
PSAPI_WS_WATCH_INFORMATION	$ZIGLIB/std/os/windows.zig	/^pub const PSAPI_WS_WATCH_INFORMATION = extern struct {$/;"	struct
PSAPI_WS_WATCH_INFORMATION_EX	$ZIGLIB/std/os/windows.zig	/^pub const PSAPI_WS_WATCH_INFORMATION_EX = extern struct {$/;"	struct
PSEUDO_CALL	$ZIGLIB/std/os/linux/bpf.zig	/^pub const PSEUDO_CALL = 1/;"	constant
PSEUDO_MAP_FD	$ZIGLIB/std/os/linux/bpf.zig	/^pub const PSEUDO_MAP_FD = 1/;"	constant
PSEUDO_MAP_VALUE	$ZIGLIB/std/os/linux/bpf.zig	/^pub const PSEUDO_MAP_VALUE = 2/;"	constant
PSM_ADDPAGE	$ZIGLIB/std/os/windows/user32.zig	/^pub const PSM_ADDPAGE = 0x0467/;"	constant
PSM_APPLY	$ZIGLIB/std/os/windows/user32.zig	/^pub const PSM_APPLY = 0x046E/;"	constant
PSM_CANCELTOCLOSE	$ZIGLIB/std/os/windows/user32.zig	/^pub const PSM_CANCELTOCLOSE = 0x046B/;"	constant
PSM_CHANGED	$ZIGLIB/std/os/windows/user32.zig	/^pub const PSM_CHANGED = 0x0468/;"	constant
PSM_GETCURRENTPAGEHWND	$ZIGLIB/std/os/windows/user32.zig	/^pub const PSM_GETCURRENTPAGEHWND = 0x0476/;"	constant
PSM_GETRESULT	$ZIGLIB/std/os/windows/user32.zig	/^pub const PSM_GETRESULT = 0x0487/;"	constant
PSM_GETTABCONTROL	$ZIGLIB/std/os/windows/user32.zig	/^pub const PSM_GETTABCONTROL = 0x0474/;"	constant
PSM_HWNDTOINDEX	$ZIGLIB/std/os/windows/user32.zig	/^pub const PSM_HWNDTOINDEX = 0x0481/;"	constant
PSM_IDTOINDEX	$ZIGLIB/std/os/windows/user32.zig	/^pub const PSM_IDTOINDEX = 0x0485/;"	constant
PSM_INDEXTOHWND	$ZIGLIB/std/os/windows/user32.zig	/^pub const PSM_INDEXTOHWND = 0x0482/;"	constant
PSM_INDEXTOID	$ZIGLIB/std/os/windows/user32.zig	/^pub const PSM_INDEXTOID = 0x0486/;"	constant
PSM_INDEXTOPAGE	$ZIGLIB/std/os/windows/user32.zig	/^pub const PSM_INDEXTOPAGE = 0x0484/;"	constant
PSM_INSERTPAGE	$ZIGLIB/std/os/windows/user32.zig	/^pub const PSM_INSERTPAGE = 0x0477/;"	constant
PSM_ISDIALOGMESSAGE	$ZIGLIB/std/os/windows/user32.zig	/^pub const PSM_ISDIALOGMESSAGE = 0x0475/;"	constant
PSM_PAGETOINDEX	$ZIGLIB/std/os/windows/user32.zig	/^pub const PSM_PAGETOINDEX = 0x0483/;"	constant
PSM_PRESSBUTTON	$ZIGLIB/std/os/windows/user32.zig	/^pub const PSM_PRESSBUTTON = 0x0471/;"	constant
PSM_QUERYSIBLINGS	$ZIGLIB/std/os/windows/user32.zig	/^pub const PSM_QUERYSIBLINGS = 0x046C/;"	constant
PSM_REBOOTSYSTEM	$ZIGLIB/std/os/windows/user32.zig	/^pub const PSM_REBOOTSYSTEM = 0x046A/;"	constant
PSM_RECALCPAGESIZES	$ZIGLIB/std/os/windows/user32.zig	/^pub const PSM_RECALCPAGESIZES = 0x0488/;"	constant
PSM_REMOVEPAGE	$ZIGLIB/std/os/windows/user32.zig	/^pub const PSM_REMOVEPAGE = 0x0466/;"	constant
PSM_RESTARTWINDOWS	$ZIGLIB/std/os/windows/user32.zig	/^pub const PSM_RESTARTWINDOWS = 0x0469/;"	constant
PSM_SETCURSEL	$ZIGLIB/std/os/windows/user32.zig	/^pub const PSM_SETCURSEL = 0x0465/;"	constant
PSM_SETCURSELID	$ZIGLIB/std/os/windows/user32.zig	/^pub const PSM_SETCURSELID = 0x0472/;"	constant
PSM_SETFINISHTEXTA	$ZIGLIB/std/os/windows/user32.zig	/^pub const PSM_SETFINISHTEXTA = 0x0473/;"	constant
PSM_SETFINISHTEXTW	$ZIGLIB/std/os/windows/user32.zig	/^pub const PSM_SETFINISHTEXTW = 0x0479/;"	constant
PSM_SETHEADERSUBTITLEA	$ZIGLIB/std/os/windows/user32.zig	/^pub const PSM_SETHEADERSUBTITLEA = 0x047F/;"	constant
PSM_SETHEADERSUBTITLEW	$ZIGLIB/std/os/windows/user32.zig	/^pub const PSM_SETHEADERSUBTITLEW = 0x0480/;"	constant
PSM_SETHEADERTITLEA	$ZIGLIB/std/os/windows/user32.zig	/^pub const PSM_SETHEADERTITLEA = 0x047D/;"	constant
PSM_SETHEADERTITLEW	$ZIGLIB/std/os/windows/user32.zig	/^pub const PSM_SETHEADERTITLEW = 0x047E/;"	constant
PSM_SETTITLEA	$ZIGLIB/std/os/windows/user32.zig	/^pub const PSM_SETTITLEA = 0x046F/;"	constant
PSM_SETTITLEW	$ZIGLIB/std/os/windows/user32.zig	/^pub const PSM_SETTITLEW = 0x0478/;"	constant
PSM_SETWIZBUTTONS	$ZIGLIB/std/os/windows/user32.zig	/^pub const PSM_SETWIZBUTTONS = 0x0470/;"	constant
PSM_UNCHANGED	$ZIGLIB/std/os/windows/user32.zig	/^pub const PSM_UNCHANGED = 0x046D/;"	constant
PSSSignature	$ZIGLIB/std/crypto/Certificate.zig	/pub const PSSSignature = struct {$/;"	struct
PS_STRINGS	$ZIGLIB/std/c/dragonfly.zig	/pub const PS_STRINGS = 32/;"	constant
PTE_CHANGED	$ZIGLIB/std/os/windows/ntstatus.zig	/PTE_CHANGED = 0xC0000434/;"	field
PTHREAD_COND_INITIALIZER	$ZIGLIB/std/c.zig	/^pub const PTHREAD_COND_INITIALIZER = c.pthread_cond_t{}/;"	constant
PTHREAD_MUTEX_INITIALIZER	$ZIGLIB/std/c.zig	/^pub const PTHREAD_MUTEX_INITIALIZER = c.pthread_mutex_t{}/;"	constant
PTHREAD_START_ROUTINE	$ZIGLIB/std/os/windows.zig	/^pub const PTHREAD_START_ROUTINE = *const fn (LPVOID) callconv(.C) DWORD/;"	constant
PTRACE	$ZIGLIB/std/os/linux.zig	/pub const PTRACE = 0x00002000/;"	constant
PT_ATTACHEXC	$ZIGLIB/std/c/darwin.zig	/^pub const PT_ATTACHEXC = 14/;"	constant
PT_CONTINUE	$ZIGLIB/std/c/darwin.zig	/^pub const PT_CONTINUE = 7/;"	constant
PT_DENY_ATTACH	$ZIGLIB/std/c/darwin.zig	/^pub const PT_DENY_ATTACH = 31/;"	constant
PT_DETACH	$ZIGLIB/std/c/darwin.zig	/^pub const PT_DETACH = 11/;"	constant
PT_DYNAMIC	$ZIGLIB/std/elf.zig	/^pub const PT_DYNAMIC = 2/;"	constant
PT_FORCEQUOTA	$ZIGLIB/std/c/darwin.zig	/^pub const PT_FORCEQUOTA = 30/;"	constant
PT_GNU_EH_FRAME	$ZIGLIB/std/elf.zig	/^pub const PT_GNU_EH_FRAME = 0x6474e550/;"	constant
PT_GNU_RELRO	$ZIGLIB/std/elf.zig	/^pub const PT_GNU_RELRO = 0x6474e552/;"	constant
PT_GNU_STACK	$ZIGLIB/std/elf.zig	/^pub const PT_GNU_STACK = 0x6474e551/;"	constant
PT_HIOS	$ZIGLIB/std/elf.zig	/^pub const PT_HIOS = 0x6fffffff/;"	constant
PT_HIPROC	$ZIGLIB/std/elf.zig	/^pub const PT_HIPROC = 0x7fffffff/;"	constant
PT_HISUNW	$ZIGLIB/std/elf.zig	/^pub const PT_HISUNW = 0x6fffffff/;"	constant
PT_INTERP	$ZIGLIB/std/elf.zig	/^pub const PT_INTERP = 3/;"	constant
PT_KILL	$ZIGLIB/std/c/darwin.zig	/^pub const PT_KILL = 8/;"	constant
PT_LOAD	$ZIGLIB/std/elf.zig	/^pub const PT_LOAD = 1/;"	constant
PT_LOOS	$ZIGLIB/std/elf.zig	/^pub const PT_LOOS = 0x60000000/;"	constant
PT_LOPROC	$ZIGLIB/std/elf.zig	/^pub const PT_LOPROC = 0x70000000/;"	constant
PT_LOSUNW	$ZIGLIB/std/elf.zig	/^pub const PT_LOSUNW = 0x6ffffffa/;"	constant
PT_NOTE	$ZIGLIB/std/elf.zig	/^pub const PT_NOTE = 4/;"	constant
PT_NULL	$ZIGLIB/std/elf.zig	/^pub const PT_NULL = 0/;"	constant
PT_NUM	$ZIGLIB/std/elf.zig	/^pub const PT_NUM = 8/;"	constant
PT_PHDR	$ZIGLIB/std/elf.zig	/^pub const PT_PHDR = 6/;"	constant
PT_READ_D	$ZIGLIB/std/c/darwin.zig	/^pub const PT_READ_D = 2/;"	constant
PT_READ_I	$ZIGLIB/std/c/darwin.zig	/^pub const PT_READ_I = 1/;"	constant
PT_READ_U	$ZIGLIB/std/c/darwin.zig	/^pub const PT_READ_U = 3/;"	constant
PT_SHLIB	$ZIGLIB/std/elf.zig	/^pub const PT_SHLIB = 5/;"	constant
PT_SIGEXC	$ZIGLIB/std/c/darwin.zig	/^pub const PT_SIGEXC = 12/;"	constant
PT_STEP	$ZIGLIB/std/c/darwin.zig	/^pub const PT_STEP = 9/;"	constant
PT_SUNWBSS	$ZIGLIB/std/elf.zig	/^pub const PT_SUNWBSS = 0x6ffffffa/;"	constant
PT_SUNWSTACK	$ZIGLIB/std/elf.zig	/^pub const PT_SUNWSTACK = 0x6ffffffb/;"	constant
PT_THUPDATE	$ZIGLIB/std/c/darwin.zig	/^pub const PT_THUPDATE = 13/;"	constant
PT_TLS	$ZIGLIB/std/elf.zig	/^pub const PT_TLS = 7/;"	constant
PT_TRACE_ME	$ZIGLIB/std/c/darwin.zig	/^pub const PT_TRACE_ME = 0/;"	constant
PT_WRITE_D	$ZIGLIB/std/c/darwin.zig	/^pub const PT_WRITE_D = 5/;"	constant
PT_WRITE_I	$ZIGLIB/std/c/darwin.zig	/^pub const PT_WRITE_I = 4/;"	constant
PT_WRITE_U	$ZIGLIB/std/c/darwin.zig	/^pub const PT_WRITE_U = 6/;"	constant
PUBLIC_KEY	$ZIGLIB/std/os/darwin/cssm.zig	/PUBLIC_KEY = DB_RECORDTYPE_OPEN_GROUP_START + 5/;"	field
PULAR	$ZIGLIB/std/os/windows/lang.zig	/^pub const PULAR = 0x67/;"	constant
PULAR_SENEGAL	$ZIGLIB/std/os/windows/sublang.zig	/^pub const PULAR_SENEGAL = 0x02/;"	constant
PUNCHHOLE	$ZIGLIB/std/c/darwin.zig	/pub const PUNCHHOLE = 99/;"	constant
PUNJABI	$ZIGLIB/std/os/windows/lang.zig	/^pub const PUNJABI = 0x46/;"	constant
PUNJABI_INDIA	$ZIGLIB/std/os/windows/sublang.zig	/^pub const PUNJABI_INDIA = 0x01/;"	constant
PUNJABI_PAKISTAN	$ZIGLIB/std/os/windows/sublang.zig	/^pub const PUNJABI_PAKISTAN = 0x02/;"	constant
PURGE	$ZIGLIB/std/c/solaris.zig	/pub const PURGE = 9/;"	constant
PURGE_FAILED	$ZIGLIB/std/os/windows/ntstatus.zig	/PURGE_FAILED = 0xC0000435/;"	field
PUSH_IMMEDIATE	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const PUSH_IMMEDIATE = 32/;"	constant
PVD_CONFIG	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const PVD_CONFIG = 12289/;"	constant
PVOID	$ZIGLIB/std/os/windows.zig	/^pub const PVOID = *anyopaque/;"	constant
PWD_HISTORY_CONFLICT	$ZIGLIB/std/os/windows/win32error.zig	/PWD_HISTORY_CONFLICT = 617/;"	field
PWD_TOO_LONG	$ZIGLIB/std/os/windows/win32error.zig	/PWD_TOO_LONG = 657/;"	field
PWD_TOO_RECENT	$ZIGLIB/std/os/windows/win32error.zig	/PWD_TOO_RECENT = 616/;"	field
PWD_TOO_SHORT	$ZIGLIB/std/os/windows/win32error.zig	/PWD_TOO_SHORT = 615/;"	field
PWEXPIRED	$ZIGLIB/std/c/openbsd.zig	/pub const PWEXPIRED: c_int = 0x40/;"	constant
PWRITE	$ZIGLIB/std/os/plan9.zig	/PWRITE = 51/;"	field
PWROFF	$ZIGLIB/std/c/darwin.zig	/PWROFF = 82/;"	field
PWSTR	$ZIGLIB/std/os/windows.zig	/^pub const PWSTR = [*:0]WCHAR/;"	constant
PWrite	$ZIGLIB/std/event/loop.zig	/pub const PWrite = struct {$/;"	struct
PWriteError	$ZIGLIB/std/os.zig	/^pub const PWriteError = WriteError || error{Unseekable}/;"	constant
PWriteV	$ZIGLIB/std/event/loop.zig	/pub const PWriteV = struct {$/;"	struct
Packed	$ZIGLIB/std/builtin.zig	/Packed/;"	field
PackedArray	$ZIGLIB/std/packed_int_array.zig	/const PackedArray = PackedIntArray(u3, 8)/;"	constant
PackedArrayBe	$ZIGLIB/std/packed_int_array.zig	/const PackedArrayBe = PackedIntArrayEndian(u4, .Big, 8)/;"	constant
PackedIntArray	$ZIGLIB/std/packed_int_array.zig	/^pub fn PackedIntArray(comptime Int: type, comptime int_count: usize) type {$/;"	function
PackedIntArrayEndian	$ZIGLIB/std/packed_int_array.zig	/^pub fn PackedIntArrayEndian(comptime Int: type, comptime endian: Endian, comptime int_count: usize) type {$/;"	function
PackedIntIo	$ZIGLIB/std/packed_int_array.zig	/^pub fn PackedIntIo(comptime Int: type, comptime endian: Endian) type {$/;"	function
PackedIntSlice	$ZIGLIB/std/packed_int_array.zig	/^pub fn PackedIntSlice(comptime Int: type) type {$/;"	function
PackedIntSliceEndian	$ZIGLIB/std/packed_int_array.zig	/^pub fn PackedIntSliceEndian(comptime Int: type, comptime endian: Endian) type {$/;"	function
PackedSlice	$ZIGLIB/std/packed_int_array.zig	/const PackedSlice = PackedIntSlice(u11)/;"	constant
Padded	$ZIGLIB/std/packed_int_array.zig	/const Padded = struct {$/;"	struct
Padding	$ZIGLIB/std/pdb.zig	/Padding: u32/;"	field
Padding1	$ZIGLIB/std/pdb.zig	/Padding1: [2]u8/;"	field
Padding2	$ZIGLIB/std/pdb.zig	/Padding2: [2]u8/;"	field
Paddle	$ZIGLIB/std/Thread/Futex.zig	/const Paddle = struct {$/;"	struct
PageFaultCount	$ZIGLIB/std/os/windows.zig	/PageFaultCount: DWORD/;"	field
PageSize	$ZIGLIB/std/os/windows.zig	/PageSize: SIZE_T/;"	field
PageStatus	$ZIGLIB/std/heap/WasmPageAllocator.zig	/^const PageStatus = enum(u1) {$/;"	enum
PagefileUsage	$ZIGLIB/std/os/windows.zig	/PagefileUsage: SIZE_T/;"	field
PalCode	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/PalCode/;"	field
PanicFn	$ZIGLIB/std/builtin.zig	/^pub const PanicFn = fn ([]const u8, ?*StackTrace, ?usize) noreturn/;"	constant
Param	$ZIGLIB/std/zig/Ast.zig	/pub const Param = struct {$/;"	struct
Params	$ZIGLIB/std/crypto/scrypt.zig	/^pub const Params = struct {$/;"	struct
Parent	$ZIGLIB/std/pdb.zig	/Parent: u32/;"	field
Parity	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/pub const Parity = enum(u8) {$/;"	enum
Parse	$ZIGLIB/std/zig/Parse.zig	/^const Parse = @This()/;"	constant
ParseError	$ZIGLIB/std/zig/string_literal.zig	/^pub const ParseError = error{$/;"	constant
ParseFloatError	$ZIGLIB/std/fmt/parse_float/parse_float.zig	/^pub const ParseFloatError = error{$/;"	constant
ParseInfo	$ZIGLIB/std/fmt/parse_float/parse.zig	/^const ParseInfo = struct {$/;"	struct
ParseIntError	$ZIGLIB/std/fmt.zig	/^pub const ParseIntError = error{$/;"	constant
ParseInternalError	$ZIGLIB/std/json.zig	/^fn ParseInternalError(comptime T: type) type {$/;"	function
ParseInternalErrorImpl	$ZIGLIB/std/json.zig	/^fn ParseInternalErrorImpl(comptime T: type, comptime inferred_types: []const type) type {$/;"	function
ParseOptions	$ZIGLIB/std/zig/CrossTarget.zig	/^pub const ParseOptions = struct {$/;"	struct
Parsed	$ZIGLIB/std/crypto/Certificate.zig	/^pub const Parsed = struct {$/;"	struct
ParsedCharLiteral	$ZIGLIB/std/zig/string_literal.zig	/^pub const ParsedCharLiteral = union(enum) {$/;"	union
Parser	$ZIGLIB/std/json.zig	/^pub const Parser = struct {$/;"	struct
PartitionId	$ZIGLIB/std/os/windows.zig	/PartitionId: WORD/;"	field
Pascal83	$ZIGLIB/std/dwarf/LANG.zig	/^pub const Pascal83 = 0x0009/;"	constant
PasswordVerificationError	$ZIGLIB/std/crypto/errors.zig	/^pub const PasswordVerificationError = error{PasswordVerificationFailed}/;"	constant
PathBuffer	$ZIGLIB/std/os/windows.zig	/PathBuffer: [1]WCHAR/;"	field
PathSpace	$ZIGLIB/std/os/windows.zig	/^pub const PathSpace = struct {$/;"	struct
Pathname	$ZIGLIB/std/c/solaris.zig	/Pathname/;"	field
PcCard	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/PcCard: *const PcCardDevicePath/;"	field
PcCardDevicePath	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/pub const PcCardDevicePath = extern struct {$/;"	struct
PcRange	$ZIGLIB/std/dwarf.zig	/^const PcRange = struct {$/;"	struct
PciDevicePath	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/pub const PciDevicePath = extern struct {$/;"	struct
PdbDllRbld	$ZIGLIB/std/pdb.zig	/PdbDllRbld: u16/;"	field
PdbDllVersion	$ZIGLIB/std/pdb.zig	/PdbDllVersion: u16/;"	field
PdbFilePathNameIndex	$ZIGLIB/std/pdb.zig	/PdbFilePathNameIndex: u32/;"	field
PdbOrDwarf	$ZIGLIB/std/debug.zig	/^const PdbOrDwarf = union(enum) {$/;"	union
PeakBandwidth	$ZIGLIB/std/os/windows/ws2_32.zig	/PeakBandwidth: u32/;"	field
PeakPagefileUsage	$ZIGLIB/std/os/windows.zig	/PeakPagefileUsage: SIZE_T/;"	field
PeakUsage	$ZIGLIB/std/os/windows.zig	/PeakUsage: SIZE_T/;"	field
PeakWorkingSetSize	$ZIGLIB/std/os/windows.zig	/PeakWorkingSetSize: SIZE_T/;"	field
PeekStream	$ZIGLIB/std/io/peek_stream.zig	/^pub fn PeekStream($/;"	function
Peersockname	$ZIGLIB/std/c/solaris.zig	/Peersockname/;"	field
PerViewAttributesNV	$ZIGLIB/std/target/spirv.zig	/PerViewAttributesNV/;"	field
Percent	$ZIGLIB/std/c/tokenizer.zig	/Percent/;"	field
PercentEqual	$ZIGLIB/std/c/tokenizer.zig	/PercentEqual/;"	field
PerfEventOpenError	$ZIGLIB/std/os.zig	/^pub const PerfEventOpenError = error{$/;"	constant
Period	$ZIGLIB/std/c/tokenizer.zig	/Period/;"	field
Period2	$ZIGLIB/std/c/tokenizer.zig	/Period2/;"	field
Permission	$ZIGLIB/std/fs/file.zig	/pub const Permission = enum(u3) {$/;"	enum
Permissions	$ZIGLIB/std/fs/file.zig	/pub const Permissions = struct {$/;"	struct
PermissionsUnix	$ZIGLIB/std/fs/file.zig	/pub const PermissionsUnix = struct {$/;"	struct
PermissionsWindows	$ZIGLIB/std/fs/file.zig	/pub const PermissionsWindows = struct {$/;"	struct
PersistentMemory	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/PersistentMemory/;"	field
PhcFormatHasher	$ZIGLIB/std/crypto/scrypt.zig	/^const PhcFormatHasher = struct {$/;"	struct
Phdr	$ZIGLIB/std/elf.zig	/^pub const Phdr = switch (@sizeOf(usize)) {$/;"	constant
PhysicalAvailable	$ZIGLIB/std/os/windows.zig	/PhysicalAvailable: SIZE_T/;"	field
PhysicalStorageBufferAddresses	$ZIGLIB/std/target/spirv.zig	/PhysicalStorageBufferAddresses/;"	field
PhysicalStorageBufferAddressesEXT	$ZIGLIB/std/target/spirv.zig	/PhysicalStorageBufferAddressesEXT/;"	field
PhysicalTotal	$ZIGLIB/std/os/windows.zig	/PhysicalTotal: SIZE_T/;"	field
Pipe	$ZIGLIB/std/child_process.zig	/Pipe/;"	field
PipeEqual	$ZIGLIB/std/c/tokenizer.zig	/PipeEqual/;"	field
PipeError	$ZIGLIB/std/os.zig	/^pub const PipeError = error{$/;"	constant
PipePipe	$ZIGLIB/std/c/tokenizer.zig	/PipePipe/;"	field
PipeStorage	$ZIGLIB/std/target/spirv.zig	/PipeStorage/;"	field
Pipes	$ZIGLIB/std/target/spirv.zig	/Pipes/;"	field
PiwgFirmwareFile	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/PiwgFirmwareFile: *const PiwgFirmwareFileDevicePath/;"	field
PiwgFirmwareFileDevicePath	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/pub const PiwgFirmwareFileDevicePath = extern struct {$/;"	struct
PiwgFirmwareVolume	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/PiwgFirmwareVolume: *const PiwgFirmwareVolumeDevicePath/;"	field
PiwgFirmwareVolumeDevicePath	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/pub const PiwgFirmwareVolumeDevicePath = extern struct {$/;"	struct
PixelBitmask	$ZIGLIB/std/os/uefi/protocols/graphics_output_protocol.zig	/^pub const PixelBitmask = extern struct {$/;"	struct
PixelBltOnly	$ZIGLIB/std/os/uefi/protocols/graphics_output_protocol.zig	/PixelBltOnly/;"	field
PixelBlueGreenRedReserved8BitPerColor	$ZIGLIB/std/os/uefi/protocols/graphics_output_protocol.zig	/PixelBlueGreenRedReserved8BitPerColor/;"	field
PixelFormatMax	$ZIGLIB/std/os/uefi/protocols/graphics_output_protocol.zig	/PixelFormatMax/;"	field
PixelRedGreenBlueReserved8BitPerColor	$ZIGLIB/std/os/uefi/protocols/graphics_output_protocol.zig	/PixelRedGreenBlueReserved8BitPerColor/;"	field
PkgConfigError	$ZIGLIB/std/Build.zig	/^pub const PkgConfigError = error{$/;"	constant
PkgConfigPkg	$ZIGLIB/std/Build.zig	/^pub const PkgConfigPkg = struct {$/;"	struct
Placeholder	$ZIGLIB/std/fmt.zig	/^const Placeholder = struct {$/;"	struct
Plus	$ZIGLIB/std/c/tokenizer.zig	/Plus/;"	field
PlusEqual	$ZIGLIB/std/c/tokenizer.zig	/PlusEqual/;"	field
PlusPlus	$ZIGLIB/std/c/tokenizer.zig	/PlusPlus/;"	field
PoemRefs	$ZIGLIB/std/compress/deflate/dict_decoder.zig	/const PoemRefs = struct {$/;"	struct
Pointer	$ZIGLIB/std/os/windows.zig	/Pointer: ?PVOID/;"	field
Policy	$ZIGLIB/std/os/uefi/protocols/ip6_config_protocol.zig	/Policy/;"	field
PollError	$ZIGLIB/std/os.zig	/^pub const PollError = error{$/;"	constant
Poly1305	$ZIGLIB/std/crypto/poly1305.zig	/^pub const Poly1305 = struct {$/;"	struct
Polynomial	$ZIGLIB/std/hash/crc.zig	/^pub const Polynomial = enum(u32) {$/;"	enum
Polyval	$ZIGLIB/std/crypto/ghash_polyval.zig	/^pub const Polyval = Hash(.Little, false)/;"	constant
Pool	$ZIGLIB/std/heap/memory_pool.zig	/const Pool = @This()/;"	constant
PortInfo	$ZIGLIB/std/os/darwin.zig	/pub const PortInfo = struct {$/;"	struct
PortUnreachable	$ZIGLIB/std/os/uefi/status.zig	/PortUnreachable = high_bit | 103/;"	field
PositionInformation	$ZIGLIB/std/os/windows.zig	/PositionInformation: FILE_POSITION_INFORMATION/;"	field
Posix	$ZIGLIB/std/target.zig	/Posix/;"	field
PosixImpl	$ZIGLIB/std/Thread/Futex.zig	/^const PosixImpl = struct {$/;"	struct
PosixThreadImpl	$ZIGLIB/std/Thread.zig	/^const PosixThreadImpl = struct {$/;"	struct
PostProcessInitRoutine	$ZIGLIB/std/os/windows.zig	/PostProcessInitRoutine: PVOID/;"	field
PostQueuedCompletionStatus	$ZIGLIB/std/os/windows.zig	/^pub fn PostQueuedCompletionStatus($/;"	function
PostQueuedCompletionStatusError	$ZIGLIB/std/os/windows.zig	/^pub const PostQueuedCompletionStatusError = error{Unexpected}/;"	constant
PowerOfTwoSignificandZ	$ZIGLIB/compiler_rt/mulf3.zig	/^fn PowerOfTwoSignificandZ(comptime T: type) type {$/;"	function
PowerPC	$ZIGLIB/std/os/linux/syscalls.zig	/^pub const PowerPC = enum(usize) {$/;"	enum
PowerPC64	$ZIGLIB/std/os/linux/syscalls.zig	/^pub const PowerPC64 = enum(usize) {$/;"	enum
PowerpcCpuinfoImpl	$ZIGLIB/std/zig/system/linux.zig	/^const PowerpcCpuinfoImpl = struct {$/;"	struct
PowerpcCpuinfoParser	$ZIGLIB/std/zig/system/linux.zig	/^const PowerpcCpuinfoParser = CpuinfoParser(PowerpcCpuinfoImpl)/;"	constant
PrctlError	$ZIGLIB/std/os.zig	/^pub const PrctlError = error{$/;"	constant
Precomp	$ZIGLIB/std/crypto/ghash_polyval.zig	/^const Precomp = u128/;"	constant
PrefetchOptions	$ZIGLIB/std/builtin.zig	/^pub const PrefetchOptions = struct {$/;"	struct
PrefixedOpcode	$ZIGLIB/std/wasm.zig	/^pub const PrefixedOpcode = enum(u32) {$/;"	enum
Preopens	$ZIGLIB/std/fs/wasi.zig	/^pub const Preopens = struct {$/;"	struct
PrevStatus	$ZIGLIB/std/fs.zig	/^pub const PrevStatus = enum {$/;"	enum
Primary	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/Primary = 0/;"	field
PrintNameLength	$ZIGLIB/std/os/windows.zig	/PrintNameLength: USHORT/;"	field
PrintNameOffset	$ZIGLIB/std/os/windows.zig	/PrintNameOffset: USHORT/;"	field
Printf	$ZIGLIB/std/valgrind.zig	/Printf = 5121/;"	field
PrintfBacktrace	$ZIGLIB/std/valgrind.zig	/PrintfBacktrace = 5122/;"	field
PrintfBacktraceValistByRef	$ZIGLIB/std/valgrind.zig	/PrintfBacktraceValistByRef = 5124/;"	field
PrintfValistByRef	$ZIGLIB/std/valgrind.zig	/PrintfValistByRef = 5123/;"	field
Priority	$ZIGLIB/std/os/windows.zig	/Priority: KPRIORITY/;"	field
PriorityDequeue	$ZIGLIB/std/priority_dequeue.zig	/^pub fn PriorityDequeue(comptime T: type, comptime Context: type, comptime compareFn: fn (context: Context, a: T, b: T) Order) type {$/;"	function
PriorityQueue	$ZIGLIB/std/priority_queue.zig	/^pub fn PriorityQueue(comptime T: type, comptime Context: type, comptime compareFn: fn (context: Context, a: T, b: T) Order) type {$/;"	function
PrivateUsage	$ZIGLIB/std/os/windows.zig	/PrivateUsage: SIZE_T/;"	field
Prng	$ZIGLIB/std/treap.zig	/const Prng = struct {$/;"	struct
Probe	$ZIGLIB/std/os/uefi/protocols/ip6_protocol.zig	/Probe/;"	field
ProcSym	$ZIGLIB/std/pdb.zig	/^pub const ProcSym = extern struct {$/;"	struct
ProcSymFlags	$ZIGLIB/std/pdb.zig	/^pub const ProcSymFlags = packed struct {$/;"	struct
ProccntUsage	$ZIGLIB/std/os/windows.zig	/ProccntUsage: DWORD/;"	field
ProcessAssemblyStorageMap	$ZIGLIB/std/os/windows.zig	/ProcessAssemblyStorageMap: *ASSEMBLY_STORAGE_MAP/;"	field
ProcessCount	$ZIGLIB/std/os/windows.zig	/ProcessCount: DWORD/;"	field
ProcessEnvironmentBlock	$ZIGLIB/std/os/windows.zig	/ProcessEnvironmentBlock: *PEB/;"	field
ProcessHeap	$ZIGLIB/std/os/windows.zig	/ProcessHeap: HANDLE/;"	field
ProcessHeaps	$ZIGLIB/std/os/windows.zig	/ProcessHeaps: *PVOID/;"	field
ProcessLocksList	$ZIGLIB/std/os/windows.zig	/ProcessLocksList: LIST_ENTRY/;"	field
ProcessParameters	$ZIGLIB/std/os/windows.zig	/ProcessParameters: *RTL_USER_PROCESS_PARAMETERS/;"	field
ProcessStarterHelper	$ZIGLIB/std/os/windows.zig	/ProcessStarterHelper: PVOID/;"	field
ProcessingStatus	$ZIGLIB/std/compress/lzma/decode.zig	/^const ProcessingStatus = enum {$/;"	enum
ProcessorFeatures	$ZIGLIB/std/os/windows.zig	/ProcessorFeatures: [PROCESSOR_FEATURE_MAX]BOOLEAN/;"	field
ProductTypeIsValid	$ZIGLIB/std/os/windows.zig	/ProductTypeIsValid: BOOLEAN/;"	field
ProgAttachAttr	$ZIGLIB/std/os/linux/bpf.zig	/^pub const ProgAttachAttr = extern struct {$/;"	struct
ProgLoadAttr	$ZIGLIB/std/os/linux/bpf.zig	/^pub const ProgLoadAttr = extern struct {$/;"	struct
ProgType	$ZIGLIB/std/os/linux/bpf.zig	/^pub const ProgType = enum(u32) {$/;"	enum
ProgramHeaderIterator	$ZIGLIB/std/elf.zig	/^pub fn ProgramHeaderIterator(comptime ParseSource: anytype) type {$/;"	function
Progress	$ZIGLIB/std/Progress.zig	/^const Progress = @This()/;"	constant
PromoteIntLiteralReturnType	$ZIGLIB/std/zig/c_translation.zig	/^fn PromoteIntLiteralReturnType(comptime SuffixType: type, comptime number: comptime_int, comptime radix: CIntLiteralRadix) type {$/;"	function
PromotedIntType	$ZIGLIB/std/zig/c_translation.zig	/^fn PromotedIntType(comptime T: type) type {$/;"	function
PromotedType	$ZIGLIB/std/math.zig	/const PromotedType = std.meta.Int(info.signedness, info.bits + 1)/;"	constant
Properties	$ZIGLIB/std/compress/lzma/decode.zig	/^pub const Properties = struct {$/;"	struct
Protect	$ZIGLIB/std/os/windows.zig	/Protect: DWORD/;"	field
Protocol	$ZIGLIB/std/http/Client.zig	/pub const Protocol = enum { plain, tls }/;"	enum
ProtocolChain	$ZIGLIB/std/os/windows/ws2_32.zig	/ProtocolChain: WSAPROTOCOLCHAIN/;"	field
ProtocolError	$ZIGLIB/std/os/uefi/status.zig	/ProtocolError = high_bit | 24/;"	field
ProtocolInformationEntry	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/^pub const ProtocolInformationEntry = extern struct {$/;"	struct
ProtocolUnreachable	$ZIGLIB/std/os/uefi/status.zig	/ProtocolUnreachable = high_bit | 102/;"	field
ProtocolVersion	$ZIGLIB/std/crypto/tls.zig	/^pub const ProtocolVersion = enum(u16) {$/;"	enum
ProviderId	$ZIGLIB/std/os/windows/ws2_32.zig	/ProviderId: GUID/;"	field
ProviderSpecific	$ZIGLIB/std/os/windows/ws2_32.zig	/ProviderSpecific: WSABUF/;"	field
PtRegs	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^const PtRegs = @compileError("TODO missing os bits: PtRegs")/;"	constant
PthreadRwLock	$ZIGLIB/std/Thread/RwLock.zig	/^pub const PthreadRwLock = struct {$/;"	struct
PtrModifiers	$ZIGLIB/std/zig/Parse.zig	/^const PtrModifiers = struct {$/;"	struct
PtrType	$ZIGLIB/std/zig/Ast.zig	/pub const PtrType = struct {$/;"	struct
PtrTypeBitRange	$ZIGLIB/std/zig/Ast.zig	/pub const PtrTypeBitRange = struct {$/;"	struct
PtraceError	$ZIGLIB/std/os/ptrace.zig	/pub const PtraceError = error{$/;"	constant
PtxKernel	$ZIGLIB/std/builtin.zig	/PtxKernel/;"	field
PubKeyAlgo	$ZIGLIB/std/crypto/Certificate.zig	/pub const PubKeyAlgo = union(AlgorithmCategory) {$/;"	union
PublicKey	$ZIGLIB/std/crypto/ecdsa.zig	/pub const PublicKey = struct {$/;"	struct
PublicStreamIndex	$ZIGLIB/std/pdb.zig	/PublicStreamIndex: u16/;"	field
Pull	$ZIGLIB/std/sort.zig	/^const Pull = struct {$/;"	struct
PutNode	$ZIGLIB/std/event/channel.zig	/const PutNode = struct {$/;"	struct
Python	$ZIGLIB/std/dwarf/LANG.zig	/^pub const Python = 0x0014/;"	constant
QDISC	$ZIGLIB/std/os/linux.zig	/QDISC/;"	field
QFULL	$ZIGLIB/std/c/darwin.zig	/QFULL = 106/;"	field
QIPCRTR	$ZIGLIB/std/os/linux.zig	/pub const QIPCRTR = 42/;"	constant
QOS_CLASS0	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const QOS_CLASS0 = 0/;"	constant
QOS_CLASS1	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const QOS_CLASS1 = 1/;"	constant
QOS_CLASS2	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const QOS_CLASS2 = 2/;"	constant
QOS_CLASS3	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const QOS_CLASS3 = 3/;"	constant
QOS_CLASS4	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const QOS_CLASS4 = 4/;"	constant
QUECHUA	$ZIGLIB/std/os/windows/lang.zig	/^pub const QUECHUA = 0x6b/;"	constant
QUECHUA_BOLIVIA	$ZIGLIB/std/os/windows/sublang.zig	/^pub const QUECHUA_BOLIVIA = 0x01/;"	constant
QUECHUA_ECUADOR	$ZIGLIB/std/os/windows/sublang.zig	/^pub const QUECHUA_ECUADOR = 0x02/;"	constant
QUECHUA_PERU	$ZIGLIB/std/os/windows/sublang.zig	/^pub const QUECHUA_PERU = 0x03/;"	constant
QUERY_BPF	$ZIGLIB/std/os/linux.zig	/pub const QUERY_BPF = 3221758986/;"	constant
QUEUE_SEQ	$ZIGLIB/std/os/linux.zig	/pub const QUEUE_SEQ = 21/;"	constant
QUICKACK	$ZIGLIB/std/os/linux.zig	/pub const QUICKACK = 12/;"	constant
QUIT	$ZIGLIB/std/os/linux.zig	/pub const QUIT = 3/;"	constant
QUOTACTL	$ZIGLIB/std/c/solaris.zig	/pub const QUOTACTL = 17/;"	constant
QUOTA_EXCEEDED	$ZIGLIB/std/os/windows/ntstatus.zig	/QUOTA_EXCEEDED = 0xC0000044/;"	field
QUOTA_LIST_INCONSISTENT	$ZIGLIB/std/os/windows/win32error.zig	/QUOTA_LIST_INCONSISTENT = 621/;"	field
QWORD	$ZIGLIB/std/os/windows.zig	/pub const QWORD: ULONG = 11/;"	constant
QWORD_LITTLE_ENDIAN	$ZIGLIB/std/os/windows.zig	/pub const QWORD_LITTLE_ENDIAN: ULONG = 11/;"	constant
Q_OVERFLOW	$ZIGLIB/std/os/linux.zig	/pub const Q_OVERFLOW = 0x00004000/;"	constant
QcSlIsSupported	$ZIGLIB/std/os/windows.zig	/QcSlIsSupported: u1/;"	field
QpcBias	$ZIGLIB/std/os/windows.zig	/QpcBias: ULONGLONG/;"	field
QpcBypassEnabled	$ZIGLIB/std/os/windows.zig	/QpcBypassEnabled: UCHAR/;"	field
QpcData	$ZIGLIB/std/os/windows.zig	/QpcData: USHORT/;"	field
QpcFrequency	$ZIGLIB/std/os/windows.zig	/QpcFrequency: LONGLONG/;"	field
QpcInterruptTimeIncrement	$ZIGLIB/std/os/windows.zig	/QpcInterruptTimeIncrement: ULONGLONG/;"	field
QpcInterruptTimeIncrementShift	$ZIGLIB/std/os/windows.zig	/QpcInterruptTimeIncrementShift: UCHAR/;"	field
QpcShift	$ZIGLIB/std/os/windows.zig	/QpcShift: UCHAR/;"	field
QpcSystemTimeIncrement	$ZIGLIB/std/os/windows.zig	/QpcSystemTimeIncrement: ULONGLONG/;"	field
QpcSystemTimeIncrementShift	$ZIGLIB/std/os/windows.zig	/QpcSystemTimeIncrementShift: UCHAR/;"	field
Qualcomm	$ZIGLIB/std/zig/system/arm.zig	/const Qualcomm = [_]E{$/;"	constant
QuarterRound	$ZIGLIB/std/crypto/scrypt.zig	/^const QuarterRound = struct { a: usize, b: usize, c: usize, d: u6 }/;"	struct
QueryAttr	$ZIGLIB/std/os/linux/bpf.zig	/^pub const QueryAttr = extern struct {$/;"	struct
QueryInformationFile	$ZIGLIB/std/os/windows.zig	/^pub fn QueryInformationFile($/;"	function
QueryInformationFileError	$ZIGLIB/std/os/windows.zig	/^pub const QueryInformationFileError = error{Unexpected}/;"	constant
QueryObjectName	$ZIGLIB/std/os/windows.zig	/^pub fn QueryObjectName($/;"	function
QueryPerformanceCounter	$ZIGLIB/std/os/windows.zig	/^pub fn QueryPerformanceCounter() u64 {$/;"	function
QueryPerformanceFrequency	$ZIGLIB/std/os/windows.zig	/^pub fn QueryPerformanceFrequency() u64 {$/;"	function
QueryRoutine	$ZIGLIB/std/os/windows.zig	/QueryRoutine: RTL_QUERY_REGISTRY_ROUTINE/;"	field
QuestionMark	$ZIGLIB/std/c/tokenizer.zig	/QuestionMark/;"	field
Queue	$ZIGLIB/std/event/rwlock.zig	/const Queue = std.atomic.Queue(anyframe)/;"	constant
QuotaNonPagedPoolUsage	$ZIGLIB/std/os/windows.zig	/QuotaNonPagedPoolUsage: SIZE_T/;"	field
QuotaPagedPoolUsage	$ZIGLIB/std/os/windows.zig	/QuotaPagedPoolUsage: SIZE_T/;"	field
QuotaPeakNonPagedPoolUsage	$ZIGLIB/std/os/windows.zig	/QuotaPeakNonPagedPoolUsage: SIZE_T/;"	field
QuotaPeakPagedPoolUsage	$ZIGLIB/std/os/windows.zig	/QuotaPeakPagedPoolUsage: SIZE_T/;"	field
QuoteBehavior	$ZIGLIB/std/zig/render.zig	/^const QuoteBehavior = enum {$/;"	enum
R32C	$ZIGLIB/std/elf.zig	/R32C = 162/;"	field
R4000	$ZIGLIB/std/coff.zig	/R4000 = 0x166/;"	field
RANDOM	$ZIGLIB/std/os/linux.zig	/pub const RANDOM = 1/;"	constant
RANDOMIZE_PORT	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const RANDOMIZE_PORT = 12293/;"	constant
RANDOM_BYTES	$ZIGLIB/std/fs.zig	/const RANDOM_BYTES = 12/;"	constant
RANGE	$ZIGLIB/std/os/wasi.zig	/RANGE = 68/;"	field
RANGE_LIST_CONFLICT	$ZIGLIB/std/os/windows/win32error.zig	/RANGE_LIST_CONFLICT = 627/;"	field
RANGE_NOT_FOUND	$ZIGLIB/std/os/windows/win32error.zig	/RANGE_NOT_FOUND = 644/;"	field
RANGE_NOT_LOCKED	$ZIGLIB/std/os/windows/ntstatus.zig	/RANGE_NOT_LOCKED = 0xC000007E/;"	field
RATE	$ZIGLIB/std/crypto/gimli.zig	/pub const RATE = 16/;"	constant
RAWPARTITION	$ZIGLIB/std/c/openbsd.zig	/pub const RAWPARTITION = 24/;"	constant
RBP_FRAME	$ZIGLIB/std/macho.zig	/RBP_FRAME = 1/;"	field
RB_BEGINDRAG	$ZIGLIB/std/os/windows/user32.zig	/^pub const RB_BEGINDRAG = 0x0418/;"	constant
RB_DELETEBAND	$ZIGLIB/std/os/windows/user32.zig	/^pub const RB_DELETEBAND = 0x0402/;"	constant
RB_DRAGMOVE	$ZIGLIB/std/os/windows/user32.zig	/^pub const RB_DRAGMOVE = 0x041A/;"	constant
RB_ENDDRAG	$ZIGLIB/std/os/windows/user32.zig	/^pub const RB_ENDDRAG = 0x0419/;"	constant
RB_GETBANDBORDERS	$ZIGLIB/std/os/windows/user32.zig	/^pub const RB_GETBANDBORDERS = 0x0422/;"	constant
RB_GETBANDCOUNT	$ZIGLIB/std/os/windows/user32.zig	/^pub const RB_GETBANDCOUNT = 0x040C/;"	constant
RB_GETBANDINFOA	$ZIGLIB/std/os/windows/user32.zig	/^pub const RB_GETBANDINFOA = 0x041D/;"	constant
RB_GETBANDINFOW	$ZIGLIB/std/os/windows/user32.zig	/^pub const RB_GETBANDINFOW = 0x041C/;"	constant
RB_GETBARHEIGHT	$ZIGLIB/std/os/windows/user32.zig	/^pub const RB_GETBARHEIGHT = 0x041B/;"	constant
RB_GETBARINFO	$ZIGLIB/std/os/windows/user32.zig	/^pub const RB_GETBARINFO = 0x0403/;"	constant
RB_GETBKCOLOR	$ZIGLIB/std/os/windows/user32.zig	/^pub const RB_GETBKCOLOR = 0x0414/;"	constant
RB_GETPALETTE	$ZIGLIB/std/os/windows/user32.zig	/^pub const RB_GETPALETTE = 0x0426/;"	constant
RB_GETRECT	$ZIGLIB/std/os/windows/user32.zig	/^pub const RB_GETRECT = 0x0409/;"	constant
RB_GETROWCOUNT	$ZIGLIB/std/os/windows/user32.zig	/^pub const RB_GETROWCOUNT = 0x040D/;"	constant
RB_GETROWHEIGHT	$ZIGLIB/std/os/windows/user32.zig	/^pub const RB_GETROWHEIGHT = 0x040E/;"	constant
RB_GETTEXTCOLOR	$ZIGLIB/std/os/windows/user32.zig	/^pub const RB_GETTEXTCOLOR = 0x0416/;"	constant
RB_GETTOOLTIPS	$ZIGLIB/std/os/windows/user32.zig	/^pub const RB_GETTOOLTIPS = 0x0411/;"	constant
RB_HITTEST	$ZIGLIB/std/os/windows/user32.zig	/^pub const RB_HITTEST = 0x0408/;"	constant
RB_IDTOINDEX	$ZIGLIB/std/os/windows/user32.zig	/^pub const RB_IDTOINDEX = 0x0410/;"	constant
RB_INSERTBANDA	$ZIGLIB/std/os/windows/user32.zig	/^pub const RB_INSERTBANDA = 0x0401/;"	constant
RB_INSERTBANDW	$ZIGLIB/std/os/windows/user32.zig	/^pub const RB_INSERTBANDW = 0x040A/;"	constant
RB_MAXIMIZEBAND	$ZIGLIB/std/os/windows/user32.zig	/^pub const RB_MAXIMIZEBAND = 0x041F/;"	constant
RB_MINIMIZEBAND	$ZIGLIB/std/os/windows/user32.zig	/^pub const RB_MINIMIZEBAND = 0x041E/;"	constant
RB_MOVEBAND	$ZIGLIB/std/os/windows/user32.zig	/^pub const RB_MOVEBAND = 0x0427/;"	constant
RB_PUSHCHEVRON	$ZIGLIB/std/os/windows/user32.zig	/^pub const RB_PUSHCHEVRON = 0x042B/;"	constant
RB_SETBANDINFOA	$ZIGLIB/std/os/windows/user32.zig	/^pub const RB_SETBANDINFOA = 0x0406/;"	constant
RB_SETBANDINFOW	$ZIGLIB/std/os/windows/user32.zig	/^pub const RB_SETBANDINFOW = 0x040B/;"	constant
RB_SETBARINFO	$ZIGLIB/std/os/windows/user32.zig	/^pub const RB_SETBARINFO = 0x0404/;"	constant
RB_SETBKCOLOR	$ZIGLIB/std/os/windows/user32.zig	/^pub const RB_SETBKCOLOR = 0x0413/;"	constant
RB_SETPALETTE	$ZIGLIB/std/os/windows/user32.zig	/^pub const RB_SETPALETTE = 0x0425/;"	constant
RB_SETPARENT	$ZIGLIB/std/os/windows/user32.zig	/^pub const RB_SETPARENT = 0x0407/;"	constant
RB_SETTEXTCOLOR	$ZIGLIB/std/os/windows/user32.zig	/^pub const RB_SETTEXTCOLOR = 0x0415/;"	constant
RB_SETTOOLTIPS	$ZIGLIB/std/os/windows/user32.zig	/^pub const RB_SETTOOLTIPS = 0x0412/;"	constant
RB_SHOWBAND	$ZIGLIB/std/os/windows/user32.zig	/^pub const RB_SHOWBAND = 0x0423/;"	constant
RB_SIZETORECT	$ZIGLIB/std/os/windows/user32.zig	/^pub const RB_SIZETORECT = 0x0417/;"	constant
RBrace	$ZIGLIB/std/c/tokenizer.zig	/RBrace/;"	field
RBracket	$ZIGLIB/std/c/tokenizer.zig	/RBracket/;"	field
RCCMON	$ZIGLIB/std/c/freebsd.zig	/pub const RCCMON = 10/;"	constant
RCVBUF	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const RCVBUF = 4098/;"	constant
RCVBUFFORCE	$ZIGLIB/std/os/linux.zig	/pub const RCVBUFFORCE = 4107/;"	constant
RCVLOWAT	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const RCVLOWAT = 4100/;"	constant
RCVPSH	$ZIGLIB/std/c/solaris.zig	/pub const RCVPSH = 0x100d/;"	constant
RCVTIMEO	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const RCVTIMEO = 4102/;"	constant
RCVTIMEO_NEW	$ZIGLIB/std/os/linux.zig	/pub const RCVTIMEO_NEW = 68/;"	constant
RCV_BODY_ERROR	$ZIGLIB/std/c/darwin.zig	/RCV_BODY_ERROR = 0x1000400c/;"	field
RCV_HEADER_ERROR	$ZIGLIB/std/c/darwin.zig	/RCV_HEADER_ERROR = 0x1000400b/;"	field
RCV_INTERRUPTED	$ZIGLIB/std/c/darwin.zig	/RCV_INTERRUPTED = 0x10004005/;"	field
RCV_INVALID_DATA	$ZIGLIB/std/c/darwin.zig	/RCV_INVALID_DATA = 0x10004008/;"	field
RCV_INVALID_NAME	$ZIGLIB/std/c/darwin.zig	/RCV_INVALID_NAME = 0x10004002/;"	field
RCV_INVALID_NOTIFY	$ZIGLIB/std/c/darwin.zig	/RCV_INVALID_NOTIFY = 0x10004007/;"	field
RCV_INVALID_REPLY	$ZIGLIB/std/c/darwin.zig	/RCV_INVALID_REPLY = 0x10004012/;"	field
RCV_INVALID_TRAILER	$ZIGLIB/std/c/darwin.zig	/RCV_INVALID_TRAILER = 0x1000400f/;"	field
RCV_INVALID_TYPE	$ZIGLIB/std/c/darwin.zig	/RCV_INVALID_TYPE = 0x1000400d/;"	field
RCV_IN_PROGRESS	$ZIGLIB/std/c/darwin.zig	/RCV_IN_PROGRESS = 0x10004001/;"	field
RCV_IN_PROGRESS_TIMED	$ZIGLIB/std/c/darwin.zig	/RCV_IN_PROGRESS_TIMED = 0x10004011/;"	field
RCV_IN_SET	$ZIGLIB/std/c/darwin.zig	/RCV_IN_SET = 0x1000400a/;"	field
RCV_PORT_CHANGED	$ZIGLIB/std/c/darwin.zig	/RCV_PORT_CHANGED = 0x10004006/;"	field
RCV_PORT_DIED	$ZIGLIB/std/c/darwin.zig	/RCV_PORT_DIED = 0x10004009/;"	field
RCV_SCATTER_SMALL	$ZIGLIB/std/c/darwin.zig	/RCV_SCATTER_SMALL = 0x1000400e/;"	field
RCV_TIMED_OUT	$ZIGLIB/std/c/darwin.zig	/RCV_TIMED_OUT = 0x10004003/;"	field
RCV_TOO_LARGE	$ZIGLIB/std/c/darwin.zig	/RCV_TOO_LARGE = 0x10004004/;"	field
RDACC	$ZIGLIB/std/c/solaris.zig	/pub const RDACC = 0x1/;"	constant
RDADVISE	$ZIGLIB/std/c/darwin.zig	/pub const RDADVISE = 44/;"	constant
RDAHEAD	$ZIGLIB/std/c/darwin.zig	/pub const RDAHEAD = 45/;"	constant
RDBAND	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const RDBAND = 512/;"	constant
RDDNY	$ZIGLIB/std/c/solaris.zig	/pub const RDDNY = 0x1/;"	constant
RDHUP	$ZIGLIB/std/os/linux.zig	/pub const RDHUP = 0x2000/;"	constant
RDLCK	$ZIGLIB/std/os/linux/x86_64.zig	/pub const RDLCK = 0/;"	constant
RDMA	$ZIGLIB/std/os/linux.zig	/pub const RDMA = 20/;"	constant
RDNORM	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const RDNORM = 256/;"	constant
RDONLY	$ZIGLIB/std/os/linux.zig	/pub const RDONLY = 1/;"	constant
RDPID_INSTRUCTION_AVAILABLE	$ZIGLIB/std/os/windows.zig	/RDPID_INSTRUCTION_AVAILABLE = 33/;"	field
RDP_PROTOCOL_ERROR	$ZIGLIB/std/os/windows/ntstatus.zig	/RDP_PROTOCOL_ERROR = 0xC00A0032/;"	field
RDRAND_INSTRUCTION_AVAILABLE	$ZIGLIB/std/os/windows.zig	/RDRAND_INSTRUCTION_AVAILABLE = 28/;"	field
RDTSCP_INSTRUCTION_AVAILABLE	$ZIGLIB/std/os/windows.zig	/RDTSCP_INSTRUCTION_AVAILABLE = 32/;"	field
RDTSC_INSTRUCTION_AVAILABLE	$ZIGLIB/std/os/windows.zig	/RDTSC_INSTRUCTION_AVAILABLE = 8/;"	field
RDWR	$ZIGLIB/std/os/linux.zig	/pub const RDWR = 2/;"	constant
RDWRFSGBASE_AVAILABLE	$ZIGLIB/std/os/windows.zig	/RDWRFSGBASE_AVAILABLE = 22/;"	field
RDebug	$ZIGLIB/std/dynamic_library.zig	/^const RDebug = extern struct {$/;"	struct
READ	$ZIGLIB/std/os/linux.zig	/pub const READ = 16/;"	constant
READAHEAD	$ZIGLIB/std/c/freebsd.zig	/pub const READAHEAD = 15/;"	constant
READER	$ZIGLIB/std/Thread/RwLock.zig	/const READER: usize = 1 << (1 + @bitSizeOf(Count))/;"	constant
READER_MASK	$ZIGLIB/std/Thread/RwLock.zig	/const READER_MASK: usize = std.math.maxInt(Count) << @ctz(READER)/;"	constant
READV	$ZIGLIB/std/os/linux.zig	/READV/;"	field
READ_CONTROL	$ZIGLIB/std/os/windows.zig	/^pub const READ_CONTROL = 0x00020000/;"	constant
READ_FAULT	$ZIGLIB/std/os/windows/win32error.zig	/READ_FAULT = 30/;"	field
READ_FIXED	$ZIGLIB/std/os/linux.zig	/READ_FIXED/;"	field
REAL	$ZIGLIB/std/os/linux.zig	/REAL = 0/;"	field
REALTIME	$ZIGLIB/std/os/wasi.zig	/pub const REALTIME: clockid_t = 0/;"	constant
REALTIME_ALARM	$ZIGLIB/std/os/linux.zig	/pub const REALTIME_ALARM = 8/;"	constant
REALTIME_COARSE	$ZIGLIB/std/os/linux.zig	/pub const REALTIME_COARSE = 5/;"	constant
REALTIME_FAST	$ZIGLIB/std/c/freebsd.zig	/pub const REALTIME_FAST = 10/;"	constant
REALTIME_PRECISE	$ZIGLIB/std/c/freebsd.zig	/pub const REALTIME_PRECISE = 9/;"	constant
REAL_TIME_NOTIFICATION_CAPABILITY	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const REAL_TIME_NOTIFICATION_CAPABILITY = GUID.parse("{6b59819a-5cae-492d-a901-2a3c2c50164f}")/;"	constant
REAL_TIME_NOTIFICATION_CAPABILITY_EX	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const REAL_TIME_NOTIFICATION_CAPABILITY_EX = GUID.parse("{6843da03-154a-4616-a508-44371295f96b}")/;"	constant
REBASE_IMMEDIATE_MASK	$ZIGLIB/std/macho.zig	/^pub const REBASE_IMMEDIATE_MASK: u8 = 0x0F/;"	constant
REBASE_OPCODE_ADD_ADDR_IMM_SCALED	$ZIGLIB/std/macho.zig	/^pub const REBASE_OPCODE_ADD_ADDR_IMM_SCALED: u8 = 0x40/;"	constant
REBASE_OPCODE_ADD_ADDR_ULEB	$ZIGLIB/std/macho.zig	/^pub const REBASE_OPCODE_ADD_ADDR_ULEB: u8 = 0x30/;"	constant
REBASE_OPCODE_DONE	$ZIGLIB/std/macho.zig	/^pub const REBASE_OPCODE_DONE: u8 = 0x00/;"	constant
REBASE_OPCODE_DO_REBASE_ADD_ADDR_ULEB	$ZIGLIB/std/macho.zig	/^pub const REBASE_OPCODE_DO_REBASE_ADD_ADDR_ULEB: u8 = 0x70/;"	constant
REBASE_OPCODE_DO_REBASE_IMM_TIMES	$ZIGLIB/std/macho.zig	/^pub const REBASE_OPCODE_DO_REBASE_IMM_TIMES: u8 = 0x50/;"	constant
REBASE_OPCODE_DO_REBASE_ULEB_TIMES	$ZIGLIB/std/macho.zig	/^pub const REBASE_OPCODE_DO_REBASE_ULEB_TIMES: u8 = 0x60/;"	constant
REBASE_OPCODE_DO_REBASE_ULEB_TIMES_SKIPPING_ULEB	$ZIGLIB/std/macho.zig	/^pub const REBASE_OPCODE_DO_REBASE_ULEB_TIMES_SKIPPING_ULEB: u8 = 0x80/;"	constant
REBASE_OPCODE_MASK	$ZIGLIB/std/macho.zig	/^pub const REBASE_OPCODE_MASK: u8 = 0xF0/;"	constant
REBASE_OPCODE_SET_SEGMENT_AND_OFFSET_ULEB	$ZIGLIB/std/macho.zig	/^pub const REBASE_OPCODE_SET_SEGMENT_AND_OFFSET_ULEB: u8 = 0x20/;"	constant
REBASE_OPCODE_SET_TYPE_IMM	$ZIGLIB/std/macho.zig	/^pub const REBASE_OPCODE_SET_TYPE_IMM: u8 = 0x10/;"	constant
REBASE_TYPE_POINTER	$ZIGLIB/std/macho.zig	/^pub const REBASE_TYPE_POINTER: u8 = 1/;"	constant
REBASE_TYPE_TEXT_ABSOLUTE32	$ZIGLIB/std/macho.zig	/^pub const REBASE_TYPE_TEXT_ABSOLUTE32: u8 = 2/;"	constant
REBASE_TYPE_TEXT_PCREL32	$ZIGLIB/std/macho.zig	/^pub const REBASE_TYPE_TEXT_PCREL32: u8 = 3/;"	constant
RECEIVE	$ZIGLIB/std/c/darwin.zig	/RECEIVE = 1/;"	field
RECEIVE_EXPEDITED	$ZIGLIB/std/os/windows/win32error.zig	/RECEIVE_EXPEDITED = 708/;"	field
RECEIVE_PARTIAL	$ZIGLIB/std/os/windows/win32error.zig	/RECEIVE_PARTIAL = 707/;"	field
RECEIVE_PARTIAL_EXPEDITED	$ZIGLIB/std/os/windows/win32error.zig	/RECEIVE_PARTIAL_EXPEDITED = 709/;"	field
RECOVERY_FAILURE	$ZIGLIB/std/os/windows/win32error.zig	/RECOVERY_FAILURE = 1279/;"	field
RECOVERY_NOT_NEEDED	$ZIGLIB/std/os/windows/ntstatus.zig	/RECOVERY_NOT_NEEDED = 0x40190034/;"	field
RECT	$ZIGLIB/std/os/windows.zig	/^pub const RECT = extern struct {$/;"	struct
RECURSIVE	$ZIGLIB/std/os/linux.zig	/pub const RECURSIVE = 0x8000/;"	constant
RECURSIVE_DISPATCH	$ZIGLIB/std/os/windows/ntstatus.zig	/RECURSIVE_DISPATCH = 0xC0000704/;"	field
RECV	$ZIGLIB/std/os/linux/seccomp.zig	/pub const RECV = IOCTL.IOWR('!', 0, notif)/;"	constant
RECVDSTOPTS	$ZIGLIB/std/os/linux.zig	/pub const RECVDSTOPTS = 58/;"	constant
RECVERR	$ZIGLIB/std/os/linux.zig	/pub const RECVERR = 25/;"	constant
RECVFRAGSIZE	$ZIGLIB/std/os/linux.zig	/pub const RECVFRAGSIZE = 77/;"	constant
RECVHOPLIMIT	$ZIGLIB/std/os/linux.zig	/pub const RECVHOPLIMIT = 51/;"	constant
RECVHOPOPTS	$ZIGLIB/std/os/linux.zig	/pub const RECVHOPOPTS = 53/;"	constant
RECVMSG	$ZIGLIB/std/os/linux.zig	/RECVMSG/;"	field
RECVOPTS	$ZIGLIB/std/os/linux.zig	/pub const RECVOPTS = 6/;"	constant
RECVORIGDSTADDR	$ZIGLIB/std/os/linux.zig	/pub const RECVORIGDSTADDR = IPV6.ORIGDSTADDR/;"	constant
RECVPATHMTU	$ZIGLIB/std/os/linux.zig	/pub const RECVPATHMTU = 60/;"	constant
RECVPKTINFO	$ZIGLIB/std/os/linux.zig	/pub const RECVPKTINFO = 49/;"	constant
RECVRETOPTS	$ZIGLIB/std/os/linux.zig	/pub const RECVRETOPTS = IP.RETOPTS/;"	constant
RECVRTHDR	$ZIGLIB/std/os/linux.zig	/pub const RECVRTHDR = 56/;"	constant
RECVTCLASS	$ZIGLIB/std/os/linux.zig	/pub const RECVTCLASS = 66/;"	constant
RECVTOS	$ZIGLIB/std/os/linux.zig	/pub const RECVTOS = 13/;"	constant
RECVTTL	$ZIGLIB/std/os/linux.zig	/pub const RECVTTL = 12/;"	constant
RECVUCRED	$ZIGLIB/std/c/solaris.zig	/pub const RECVUCRED = 0x0400/;"	constant
RECV_DATA_TRUNCATED	$ZIGLIB/std/os/wasi.zig	/pub const RECV_DATA_TRUNCATED: roflags_t = 0x0001/;"	constant
RECV_PEEK	$ZIGLIB/std/os/wasi.zig	/pub const RECV_PEEK: riflags_t = 0x0001/;"	constant
RECV_WAITALL	$ZIGLIB/std/os/wasi.zig	/pub const RECV_WAITALL: riflags_t = 0x0002/;"	constant
REDIRECTOR_HAS_OPEN_HANDLES	$ZIGLIB/std/os/windows/win32error.zig	/REDIRECTOR_HAS_OPEN_HANDLES = 1794/;"	field
REDIRECTOR_NOT_STARTED	$ZIGLIB/std/os/windows/ntstatus.zig	/REDIRECTOR_NOT_STARTED = 0xC00000FB/;"	field
REDIRECTOR_PAUSED	$ZIGLIB/std/os/windows/ntstatus.zig	/REDIRECTOR_PAUSED = 0xC00000D1/;"	field
REDIRECTOR_STARTED	$ZIGLIB/std/os/windows/ntstatus.zig	/REDIRECTOR_STARTED = 0xC00000FC/;"	field
REDIR_PAUSED	$ZIGLIB/std/os/windows/win32error.zig	/REDIR_PAUSED = 72/;"	field
REEXPORT_DYLIB	$ZIGLIB/std/macho.zig	/REEXPORT_DYLIB = (0x1f | LC_REQ_DYLD)/;"	field
REFERENCED_DYNAMICALLY	$ZIGLIB/std/macho.zig	/^pub const REFERENCED_DYNAMICALLY: u16 = 0x10/;"	constant
REFERENCE_FLAG_DEFINED	$ZIGLIB/std/macho.zig	/^pub const REFERENCE_FLAG_DEFINED: u16 = 0x2/;"	constant
REFERENCE_FLAG_PRIVATE_DEFINED	$ZIGLIB/std/macho.zig	/^pub const REFERENCE_FLAG_PRIVATE_DEFINED: u16 = 3/;"	constant
REFERENCE_FLAG_PRIVATE_UNDEFINED_LAZY	$ZIGLIB/std/macho.zig	/^pub const REFERENCE_FLAG_PRIVATE_UNDEFINED_LAZY: u16 = 5/;"	constant
REFERENCE_FLAG_PRIVATE_UNDEFINED_NON_LAZY	$ZIGLIB/std/macho.zig	/^pub const REFERENCE_FLAG_PRIVATE_UNDEFINED_NON_LAZY: u16 = 4/;"	constant
REFERENCE_FLAG_UNDEFINED_LAZY	$ZIGLIB/std/macho.zig	/^pub const REFERENCE_FLAG_UNDEFINED_LAZY: u16 = 0x1/;"	constant
REFERENCE_FLAG_UNDEFINED_NON_LAZY	$ZIGLIB/std/macho.zig	/^pub const REFERENCE_FLAG_UNDEFINED_NON_LAZY: u16 = 0x0/;"	constant
REFRESH	$ZIGLIB/std/os/linux.zig	/pub const REFRESH = 9218/;"	constant
REF_CPU_CYCLES	$ZIGLIB/std/os/linux.zig	/REF_CPU_CYCLES/;"	field
REGISTER	$ZIGLIB/std/coff.zig	/REGISTER = 4/;"	field
REGISTER_BUFFERS	$ZIGLIB/std/os/linux.zig	/REGISTER_BUFFERS/;"	field
REGISTER_ENABLE_RINGS	$ZIGLIB/std/os/linux.zig	/REGISTER_ENABLE_RINGS/;"	field
REGISTER_EVENTFD	$ZIGLIB/std/os/linux.zig	/REGISTER_EVENTFD/;"	field
REGISTER_EVENTFD_ASYNC	$ZIGLIB/std/os/linux.zig	/REGISTER_EVENTFD_ASYNC/;"	field
REGISTER_FILES	$ZIGLIB/std/os/linux.zig	/REGISTER_FILES/;"	field
REGISTER_FILES_UPDATE	$ZIGLIB/std/os/linux.zig	/REGISTER_FILES_UPDATE/;"	field
REGISTER_OP	$ZIGLIB/std/os/linux.zig	/REGISTER_OP = 0/;"	field
REGISTER_PARAM	$ZIGLIB/std/coff.zig	/REGISTER_PARAM = 17/;"	field
REGISTER_PERSONALITY	$ZIGLIB/std/os/linux.zig	/REGISTER_PERSONALITY/;"	field
REGISTER_PROBE	$ZIGLIB/std/os/linux.zig	/REGISTER_PROBE/;"	field
REGISTER_RESTRICTIONS	$ZIGLIB/std/os/linux.zig	/REGISTER_RESTRICTIONS/;"	field
REGISTRY_CORRUPT	$ZIGLIB/std/os/windows/win32error.zig	/REGISTRY_CORRUPT = 1015/;"	field
REGISTRY_HIVE_RECOVERED	$ZIGLIB/std/os/windows/win32error.zig	/REGISTRY_HIVE_RECOVERED = 685/;"	field
REGISTRY_IO_FAILED	$ZIGLIB/std/os/windows/win32error.zig	/REGISTRY_IO_FAILED = 1016/;"	field
REGISTRY_QUOTA_LIMIT	$ZIGLIB/std/os/windows/win32error.zig	/REGISTRY_QUOTA_LIMIT = 613/;"	field
REGISTRY_RECOVERED	$ZIGLIB/std/os/windows/win32error.zig	/REGISTRY_RECOVERED = 1014/;"	field
REGSAM	$ZIGLIB/std/os/windows.zig	/^pub const REGSAM = ACCESS_MASK/;"	constant
REGS_INTR	$ZIGLIB/std/os/linux.zig	/pub const REGS_INTR = 262144/;"	constant
REGS_USER	$ZIGLIB/std/os/linux.zig	/pub const REGS_USER = 4096/;"	constant
REGULAR	$ZIGLIB/std/macho.zig	/REGULAR = 2/;"	field
REGULAR_FILE	$ZIGLIB/std/os/wasi.zig	/REGULAR_FILE/;"	field
REG_NAT_CONSUMPTION	$ZIGLIB/std/os/windows/win32error.zig	/REG_NAT_CONSUMPTION = 1261/;"	field
REG_OPTION_OPEN_LINK	$ZIGLIB/std/os/windows.zig	/^pub const REG_OPTION_OPEN_LINK: DWORD = 0x8/;"	constant
REINITIALIZATION_NEEDED	$ZIGLIB/std/os/windows/ntstatus.zig	/REINITIALIZATION_NEEDED = 0xC0000287/;"	field
REJECT	$ZIGLIB/std/c/openbsd.zig	/pub const REJECT = "reject"/;"	constant
RELATIME	$ZIGLIB/std/os/linux.zig	/pub const RELATIME = (1 << 21)/;"	constant
RELOCS_STRIPPED	$ZIGLIB/std/coff.zig	/RELOCS_STRIPPED: u1 = 0/;"	field
RELOC_CHAIN_XEEDS_SEGLIM	$ZIGLIB/std/os/windows/win32error.zig	/RELOC_CHAIN_XEEDS_SEGLIM = 201/;"	field
REMAPDUP	$ZIGLIB/std/c/netbsd.zig	/pub const REMAPDUP = 0x0004/;"	constant
REMCHG	$ZIGLIB/std/os/linux/errno/sparc.zig	/REMCHG = 89/;"	field
REMOTE	$ZIGLIB/std/os/linux/errno/sparc.zig	/REMOTE = 71/;"	field
REMOTEIO	$ZIGLIB/std/os/linux/errno/sparc.zig	/REMOTEIO = 121/;"	field
REMOTE_DISCONNECT	$ZIGLIB/std/os/windows/ntstatus.zig	/REMOTE_DISCONNECT = 0xC000013C/;"	field
REMOTE_FILE_VERSION_MISMATCH	$ZIGLIB/std/os/windows/ntstatus.zig	/REMOTE_FILE_VERSION_MISMATCH = 0xC019000C/;"	field
REMOTE_NOT_LISTENING	$ZIGLIB/std/os/windows/ntstatus.zig	/REMOTE_NOT_LISTENING = 0xC00000BC/;"	field
REMOTE_PRINT_CONNECTIONS_BLOCKED	$ZIGLIB/std/os/windows/win32error.zig	/REMOTE_PRINT_CONNECTIONS_BLOCKED = 1936/;"	field
REMOTE_RESOURCES	$ZIGLIB/std/os/windows/ntstatus.zig	/REMOTE_RESOURCES = 0xC000013D/;"	field
REMOTE_SESSION_LIMIT	$ZIGLIB/std/os/windows/ntstatus.zig	/REMOTE_SESSION_LIMIT = 0xC0000196/;"	field
REMOTE_SESSION_LIMIT_EXCEEDED	$ZIGLIB/std/os/windows/win32error.zig	/REMOTE_SESSION_LIMIT_EXCEEDED = 1220/;"	field
REMOTE_STORAGE_MEDIA_ERROR	$ZIGLIB/std/os/windows/ntstatus.zig	/REMOTE_STORAGE_MEDIA_ERROR = 0xC000029E/;"	field
REMOTE_STORAGE_NOT_ACTIVE	$ZIGLIB/std/os/windows/ntstatus.zig	/REMOTE_STORAGE_NOT_ACTIVE = 0xC000029D/;"	field
REMOUNT	$ZIGLIB/std/os/linux.zig	/pub const REMOUNT = 32/;"	constant
REMOVABLE_RUN_FROM_SWAP	$ZIGLIB/std/coff.zig	/REMOVABLE_RUN_FROM_SWAP: u1 = 0/;"	field
REMOVE	$ZIGLIB/std/os/plan9.zig	/REMOVE = 25/;"	field
REMOVEDIR	$ZIGLIB/std/os/wasi.zig	/pub const REMOVEDIR: u32 = 0x4/;"	constant
REMOVE_BUFFERS	$ZIGLIB/std/os/linux.zig	/REMOVE_BUFFERS/;"	field
REM_NOT_LIST	$ZIGLIB/std/os/windows/win32error.zig	/REM_NOT_LIST = 51/;"	field
RENAME	$ZIGLIB/std/c/solaris.zig	/pub const RENAME = 0x0020/;"	constant
RENAMEAT	$ZIGLIB/std/os/linux.zig	/RENAMEAT/;"	field
RENAME_FROM	$ZIGLIB/std/c/solaris.zig	/pub const RENAME_FROM = 0x00000040/;"	constant
RENAME_TO	$ZIGLIB/std/c/solaris.zig	/pub const RENAME_TO = 0x00000020/;"	constant
RENDEZVOUS	$ZIGLIB/std/os/plan9.zig	/RENDEZVOUS = 34/;"	field
REPAIR	$ZIGLIB/std/os/linux.zig	/pub const REPAIR = 19/;"	constant
REPAIR_OFF	$ZIGLIB/std/os/linux.zig	/pub const REPAIR_OFF = 0/;"	constant
REPAIR_OFF_NO_WP	$ZIGLIB/std/os/linux.zig	/pub const REPAIR_OFF_NO_WP = -1/;"	constant
REPAIR_ON	$ZIGLIB/std/os/linux.zig	/pub const REPAIR_ON = 1/;"	constant
REPAIR_OPTIONS	$ZIGLIB/std/os/linux.zig	/pub const REPAIR_OPTIONS = 22/;"	constant
REPAIR_QUEUE	$ZIGLIB/std/os/linux.zig	/pub const REPAIR_QUEUE = 20/;"	constant
REPAIR_WINDOW	$ZIGLIB/std/os/linux.zig	/pub const REPAIR_WINDOW = 29/;"	constant
REPARSE	$ZIGLIB/std/os/windows/win32error.zig	/REPARSE = 741/;"	field
REPARSE_ATTRIBUTE_CONFLICT	$ZIGLIB/std/os/windows/ntstatus.zig	/REPARSE_ATTRIBUTE_CONFLICT = 0xC00002B2/;"	field
REPARSE_DATA_BUFFER	$ZIGLIB/std/os/windows.zig	/^pub const REPARSE_DATA_BUFFER = extern struct {$/;"	struct
REPARSE_OBJECT	$ZIGLIB/std/os/windows/win32error.zig	/REPARSE_OBJECT = 755/;"	field
REPARSE_POINT_NOT_RESOLVED	$ZIGLIB/std/os/windows/ntstatus.zig	/REPARSE_POINT_NOT_RESOLVED = 0xC0000280/;"	field
REPLY_MESSAGE_MISMATCH	$ZIGLIB/std/os/windows/win32error.zig	/REPLY_MESSAGE_MISMATCH = 595/;"	field
REPRINT	$ZIGLIB/std/os/linux.zig	/pub const REPRINT = 12/;"	constant
REPRO	$ZIGLIB/std/coff.zig	/REPRO = 16/;"	field
REQUEST_ABORTED	$ZIGLIB/std/os/windows/win32error.zig	/REQUEST_ABORTED = 1235/;"	field
REQUEST_CANCELED	$ZIGLIB/std/os/windows/ntstatus.zig	/REQUEST_CANCELED = 0xC0000703/;"	field
REQUEST_NOT_ACCEPTED	$ZIGLIB/std/os/windows/ntstatus.zig	/REQUEST_NOT_ACCEPTED = 0xC00000D0/;"	field
REQUEST_OUT_OF_SEQUENCE	$ZIGLIB/std/os/windows/win32error.zig	/REQUEST_OUT_OF_SEQUENCE = 776/;"	field
REQUEST_PAUSED	$ZIGLIB/std/os/windows/win32error.zig	/REQUEST_PAUSED = 3050/;"	field
REQUEUE	$ZIGLIB/std/os/linux.zig	/pub const REQUEUE = 3/;"	constant
REQUIRES_INTERACTIVE_WINDOWSTATION	$ZIGLIB/std/os/windows/win32error.zig	/REQUIRES_INTERACTIVE_WINDOWSTATION = 1459/;"	field
REQ_NOT_ACCEP	$ZIGLIB/std/os/windows/win32error.zig	/REQ_NOT_ACCEP = 71/;"	field
RERROR	$ZIGLIB/std/c/netbsd.zig	/pub const RERROR = 0x4000/;"	constant
RESERVED	$ZIGLIB/std/coff.zig	/RESERVED: u1 = 0/;"	field
RESERVED1	$ZIGLIB/std/c/haiku.zig	/pub const RESERVED1 = 31/;"	constant
RESERVED10	$ZIGLIB/std/coff.zig	/RESERVED10 = 10/;"	field
RESERVED2	$ZIGLIB/std/c/haiku.zig	/pub const RESERVED2 = 32/;"	constant
RESERVED_253	$ZIGLIB/std/c/freebsd.zig	/pub const RESERVED_253 = 253/;"	constant
RESERVED_254	$ZIGLIB/std/c/freebsd.zig	/pub const RESERVED_254 = 254/;"	constant
RESET	$ZIGLIB/std/os/linux.zig	/pub const RESET = 9219/;"	constant
RESETHAND	$ZIGLIB/std/os/linux.zig	/pub const RESETHAND = 0x80000000/;"	constant
RESIDENT_FILE_NOT_SUPPORTED	$ZIGLIB/std/os/windows/win32error.zig	/RESIDENT_FILE_NOT_SUPPORTED = 334/;"	field
RESOLUTION_HANDLE	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const RESOLUTION_HANDLE = 1073741824/;"	constant
RESOURCE	$ZIGLIB/std/coff.zig	/RESOURCE = 2/;"	field
RESOURCEMANAGER_NOT_FOUND	$ZIGLIB/std/os/windows/ntstatus.zig	/RESOURCEMANAGER_NOT_FOUND = 0xC019004F/;"	field
RESOURCEMANAGER_READ_ONLY	$ZIGLIB/std/os/windows/ntstatus.zig	/RESOURCEMANAGER_READ_ONLY = 0x00000202/;"	field
RESOURCE_DATA_NOT_FOUND	$ZIGLIB/std/os/windows/win32error.zig	/RESOURCE_DATA_NOT_FOUND = 1812/;"	field
RESOURCE_ENUM_USER_STOP	$ZIGLIB/std/os/windows/ntstatus.zig	/RESOURCE_ENUM_USER_STOP = 0xC00B0007/;"	field
RESOURCE_IN_USE	$ZIGLIB/std/os/windows/ntstatus.zig	/RESOURCE_IN_USE = 0xC0000708/;"	field
RESOURCE_LANG_NOT_FOUND	$ZIGLIB/std/os/windows/win32error.zig	/RESOURCE_LANG_NOT_FOUND = 1815/;"	field
RESOURCE_LIST	$ZIGLIB/std/os/windows.zig	/pub const RESOURCE_LIST: ULONG = 8/;"	constant
RESOURCE_NAME_NOT_FOUND	$ZIGLIB/std/os/windows/win32error.zig	/RESOURCE_NAME_NOT_FOUND = 1814/;"	field
RESOURCE_NOT_OWNED	$ZIGLIB/std/os/windows/ntstatus.zig	/RESOURCE_NOT_OWNED = 0xC0000264/;"	field
RESOURCE_REQUIREMENTS_CHANGED	$ZIGLIB/std/os/windows/win32error.zig	/RESOURCE_REQUIREMENTS_CHANGED = 756/;"	field
RESOURCE_REQUIREMENTS_LIST	$ZIGLIB/std/os/windows.zig	/pub const RESOURCE_REQUIREMENTS_LIST: ULONG = 10/;"	constant
RESOURCE_SHORTAGE	$ZIGLIB/std/c/darwin.zig	/RESOURCE_SHORTAGE = 6/;"	field
RESOURCE_TYPE_NOT_FOUND	$ZIGLIB/std/os/windows/win32error.zig	/RESOURCE_TYPE_NOT_FOUND = 1813/;"	field
RESTART	$ZIGLIB/std/os/linux/errno/sparc.zig	/RESTART = 116/;"	field
RESTART2	$ZIGLIB/std/os/linux.zig	/RESTART2 = 0xA1B2C3D4/;"	field
RESTART_APPLICATION	$ZIGLIB/std/os/windows/win32error.zig	/RESTART_APPLICATION = 1467/;"	field
RESTART_BOOT_APPLICATION	$ZIGLIB/std/os/windows/ntstatus.zig	/RESTART_BOOT_APPLICATION = 0xC0000453/;"	field
RESTORER	$ZIGLIB/std/os/linux.zig	/pub const RESTORER = 0x04000000/;"	constant
RESULT	$ZIGLIB/std/os/linux.zig	/pub const RESULT = enum(u32) {$/;"	enum
RESULT_IS_ADDED	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const RESULT_IS_ADDED = 16/;"	constant
RESULT_IS_ALIAS	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const RESULT_IS_ALIAS = 1/;"	constant
RESULT_IS_CHANGED	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const RESULT_IS_CHANGED = 32/;"	constant
RESULT_IS_DELETED	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const RESULT_IS_DELETED = 64/;"	constant
RESUME_HIBERNATION	$ZIGLIB/std/os/windows/win32error.zig	/RESUME_HIBERNATION = 727/;"	field
RES_FIND_MULTIPLE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const RES_FIND_MULTIPLE = 2/;"	constant
RES_FLUSH_CACHE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const RES_FLUSH_CACHE = 2/;"	constant
RES_SERVICE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const RES_SERVICE = 4/;"	constant
RES_SOFT_SEARCH	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const RES_SOFT_SEARCH = 1/;"	constant
RES_UNUSED_1	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const RES_UNUSED_1 = 1/;"	constant
RETOPTS	$ZIGLIB/std/os/linux.zig	/pub const RETOPTS = 7/;"	constant
RETRY	$ZIGLIB/std/os/windows/win32error.zig	/RETRY = 1237/;"	field
RETURN_PREFERRED_NAMES	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const RETURN_PREFERRED_NAMES = 65536/;"	constant
REUSEADDR	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const REUSEADDR = 4/;"	constant
REUSEPORT	$ZIGLIB/std/os/linux.zig	/pub const REUSEPORT = 512/;"	constant
REUSEPORT_LB	$ZIGLIB/std/c/freebsd.zig	/pub const REUSEPORT_LB = 0x00010000/;"	constant
REUSESHAREUID	$ZIGLIB/std/c/darwin.zig	/pub const REUSESHAREUID = 0x1025/;"	constant
REUSE_MULTICASTPORT	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const REUSE_MULTICASTPORT = 12296/;"	constant
REUSE_UNICASTPORT	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const REUSE_UNICASTPORT = 12295/;"	constant
REVISION_MISMATCH	$ZIGLIB/std/os/windows/win32error.zig	/REVISION_MISMATCH = 1306/;"	field
REVOCATION_OFFLINE_C	$ZIGLIB/std/os/windows/ntstatus.zig	/REVOCATION_OFFLINE_C = 0xC000038B/;"	field
REVOCATION_OFFLINE_KDC	$ZIGLIB/std/os/windows/ntstatus.zig	/REVOCATION_OFFLINE_KDC = 0xC000040C/;"	field
REVOKE	$ZIGLIB/std/c/solaris.zig	/pub const REVOKE = 25/;"	constant
RFKILL	$ZIGLIB/std/os/linux/errno/sparc.zig	/RFKILL = 134/;"	field
RFORK	$ZIGLIB/std/os/plan9.zig	/RFORK = 19/;"	field
RGID	$ZIGLIB/std/c/solaris.zig	/pub const RGID = 2003/;"	constant
RH32	$ZIGLIB/std/elf.zig	/RH32 = 38/;"	field
RIGHT	$ZIGLIB/std/os/wasi.zig	/^pub const RIGHT = struct {$/;"	struct
RIGHTS	$ZIGLIB/std/c/solaris.zig	/pub const RIGHTS = 0x1010/;"	constant
RIGHT_EXISTS	$ZIGLIB/std/c/darwin.zig	/RIGHT_EXISTS = 21/;"	field
RING2SEG_MUST_BE_MOVABLE	$ZIGLIB/std/os/windows/win32error.zig	/RING2SEG_MUST_BE_MOVABLE = 200/;"	field
RING2_STACK_IN_USE	$ZIGLIB/std/os/windows/win32error.zig	/RING2_STACK_IN_USE = 207/;"	field
RIO_CORRUPT_CQ	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const RIO_CORRUPT_CQ = 4294967295/;"	constant
RIO_MAX_CQ_SIZE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const RIO_MAX_CQ_SIZE = 134217728/;"	constant
RIO_MSG_COMMIT_ONLY	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const RIO_MSG_COMMIT_ONLY = 8/;"	constant
RIO_MSG_DEFER	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const RIO_MSG_DEFER = 2/;"	constant
RIO_MSG_DONT_NOTIFY	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const RIO_MSG_DONT_NOTIFY = 1/;"	constant
RIO_MSG_WAITALL	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const RIO_MSG_WAITALL = 4/;"	constant
RISCV	$ZIGLIB/std/elf.zig	/RISCV = 243/;"	field
RISCV128	$ZIGLIB/std/coff.zig	/RISCV128 = 0x5128/;"	field
RISCV32	$ZIGLIB/std/os/linux.zig	/RISCV32 = toAudit(.riscv32)/;"	field
RISCV64	$ZIGLIB/std/os/linux.zig	/RISCV64 = toAudit(.riscv64)/;"	field
RISCV_LOW12S	$ZIGLIB/std/coff.zig	/RISCV_LOW12S = 8/;"	field
RL78	$ZIGLIB/std/elf.zig	/RL78 = 197/;"	field
RLIM	$ZIGLIB/std/os/linux.zig	/^pub const RLIM = struct {$/;"	struct
RMDNY	$ZIGLIB/std/c/solaris.zig	/pub const RMDNY = 0x4/;"	constant
RMODE_APP	$ZIGLIB/std/os/windows/win32error.zig	/RMODE_APP = 1153/;"	field
RMT_MASK	$ZIGLIB/std/os/linux.zig	/pub const RMT_MASK = (RDONLY | SYNCHRONOUS | MANDLOCK | I_VERSION | LAZYTIME)/;"	constant
RM_ADD_RECEIVE_IF	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const RM_ADD_RECEIVE_IF = 1008/;"	constant
RM_ALREADY_STARTED	$ZIGLIB/std/os/windows/ntstatus.zig	/RM_ALREADY_STARTED = 0x40190035/;"	field
RM_DEL_RECEIVE_IF	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const RM_DEL_RECEIVE_IF = 1009/;"	constant
RM_DISCONNECTED	$ZIGLIB/std/os/windows/ntstatus.zig	/RM_DISCONNECTED = 0xC0190032/;"	field
RM_FLUSHCACHE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const RM_FLUSHCACHE = 1003/;"	constant
RM_HIGH_SPEED_INTRANET_OPT	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const RM_HIGH_SPEED_INTRANET_OPT = 1014/;"	constant
RM_LATEJOIN	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const RM_LATEJOIN = 1006/;"	constant
RM_METADATA_CORRUPT	$ZIGLIB/std/os/windows/ntstatus.zig	/RM_METADATA_CORRUPT = 0xC0190006/;"	field
RM_NOT_ACTIVE	$ZIGLIB/std/os/windows/ntstatus.zig	/RM_NOT_ACTIVE = 0xC0190005/;"	field
RM_OPTIONSBASE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const RM_OPTIONSBASE = 1000/;"	constant
RM_RATE_WINDOW_SIZE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const RM_RATE_WINDOW_SIZE = 1001/;"	constant
RM_RECEIVER_STATISTICS	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const RM_RECEIVER_STATISTICS = 1013/;"	constant
RM_SENDER_STATISTICS	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const RM_SENDER_STATISTICS = 1005/;"	constant
RM_SENDER_WINDOW_ADVANCE_METHOD	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const RM_SENDER_WINDOW_ADVANCE_METHOD = 1004/;"	constant
RM_SEND_WINDOW_ADV_RATE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const RM_SEND_WINDOW_ADV_RATE = 1010/;"	constant
RM_SET_MCAST_TTL	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const RM_SET_MCAST_TTL = 1012/;"	constant
RM_SET_MESSAGE_BOUNDARY	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const RM_SET_MESSAGE_BOUNDARY = 1002/;"	constant
RM_SET_SEND_IF	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const RM_SET_SEND_IF = 1007/;"	constant
RM_USE_FEC	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const RM_USE_FEC = 1011/;"	constant
RNGProtocol	$ZIGLIB/std/os/uefi/protocols/rng_protocol.zig	/^pub const RNGProtocol = extern struct {$/;"	struct
RNGSeedVersion	$ZIGLIB/std/os/windows.zig	/RNGSeedVersion: ULONGLONG/;"	field
ROBUST_LISTS	$ZIGLIB/std/c/freebsd.zig	/ROBUST_LISTS = 26/;"	field
ROFS	$ZIGLIB/std/os/wasi.zig	/ROFS = 69/;"	field
ROLLBACK_TIMER_EXPIRED	$ZIGLIB/std/os/windows/ntstatus.zig	/ROLLBACK_TIMER_EXPIRED = 0xC019003C/;"	field
ROMANIAN	$ZIGLIB/std/os/windows/lang.zig	/^pub const ROMANIAN = 0x18/;"	constant
ROMANIAN_ROMANIA	$ZIGLIB/std/os/windows/sublang.zig	/^pub const ROMANIAN_ROMANIA = 0x01/;"	constant
ROMANSH	$ZIGLIB/std/os/windows/lang.zig	/^pub const ROMANSH = 0x17/;"	constant
ROMANSH_SWITZERLAND	$ZIGLIB/std/os/windows/sublang.zig	/^pub const ROMANSH_SWITZERLAND = 0x01/;"	constant
ROOT	$ZIGLIB/std/crypto/blake3.zig	/^const ROOT: u8 = 1 << 3/;"	constant
ROOTOKAY	$ZIGLIB/std/c/openbsd.zig	/pub const ROOTOKAY: c_int = 0x02/;"	constant
ROSE	$ZIGLIB/std/os/linux.zig	/pub const ROSE = 11/;"	constant
ROTC	$ZIGLIB/std/crypto/sha3.zig	/^const ROTC = [_]usize{$/;"	constant
ROUTE	$ZIGLIB/std/os/linux.zig	/pub const ROUTE = PF.NETLINK/;"	constant
ROUTER_ALERT	$ZIGLIB/std/os/linux.zig	/pub const ROUTER_ALERT = 5/;"	constant
ROUTINES	$ZIGLIB/std/macho.zig	/ROUTINES = 0x11/;"	field
ROUTINES_64	$ZIGLIB/std/macho.zig	/ROUTINES_64 = 0x1a/;"	field
ROUTING	$ZIGLIB/std/os/linux.zig	/pub const ROUTING = 43/;"	constant
ROWSNOTRELEASED	$ZIGLIB/std/os/windows/win32error.zig	/ROWSNOTRELEASED = 772/;"	field
RPATH	$ZIGLIB/std/macho.zig	/RPATH = (0x1c | LC_REQ_DYLD)/;"	field
RPCMISMATCH	$ZIGLIB/std/c/openbsd.zig	/RPCMISMATCH = 73/;"	field
RPC_ALERT	$ZIGLIB/std/c/darwin.zig	/RPC_ALERT = 9/;"	field
RPC_CONTINUE_ORPHAN	$ZIGLIB/std/c/darwin.zig	/RPC_CONTINUE_ORPHAN = 45/;"	field
RPC_NT_ADDRESS_ERROR	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_ADDRESS_ERROR = 0xC0020045/;"	field
RPC_NT_ALREADY_LISTENING	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_ALREADY_LISTENING = 0xC002000E/;"	field
RPC_NT_ALREADY_REGISTERED	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_ALREADY_REGISTERED = 0xC002000C/;"	field
RPC_NT_BAD_STUB_DATA	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_BAD_STUB_DATA = 0xC003000C/;"	field
RPC_NT_BINDING_HAS_NO_AUTH	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_BINDING_HAS_NO_AUTH = 0xC002002F/;"	field
RPC_NT_BINDING_INCOMPLETE	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_BINDING_INCOMPLETE = 0xC0020051/;"	field
RPC_NT_BYTE_COUNT_TOO_SMALL	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_BYTE_COUNT_TOO_SMALL = 0xC003000B/;"	field
RPC_NT_CALL_CANCELLED	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_CALL_CANCELLED = 0xC0020050/;"	field
RPC_NT_CALL_FAILED	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_CALL_FAILED = 0xC002001B/;"	field
RPC_NT_CALL_FAILED_DNE	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_CALL_FAILED_DNE = 0xC002001C/;"	field
RPC_NT_CALL_IN_PROGRESS	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_CALL_IN_PROGRESS = 0xC0020049/;"	field
RPC_NT_CANNOT_SUPPORT	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_CANNOT_SUPPORT = 0xC0020041/;"	field
RPC_NT_CANT_CREATE_ENDPOINT	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_CANT_CREATE_ENDPOINT = 0xC0020015/;"	field
RPC_NT_COMM_FAILURE	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_COMM_FAILURE = 0xC0020052/;"	field
RPC_NT_DUPLICATE_ENDPOINT	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_DUPLICATE_ENDPOINT = 0xC0020029/;"	field
RPC_NT_ENTRY_ALREADY_EXISTS	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_ENTRY_ALREADY_EXISTS = 0xC002003D/;"	field
RPC_NT_ENTRY_NOT_FOUND	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_ENTRY_NOT_FOUND = 0xC002003E/;"	field
RPC_NT_ENUM_VALUE_OUT_OF_RANGE	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_ENUM_VALUE_OUT_OF_RANGE = 0xC003000A/;"	field
RPC_NT_FP_DIV_ZERO	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_FP_DIV_ZERO = 0xC0020046/;"	field
RPC_NT_FP_OVERFLOW	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_FP_OVERFLOW = 0xC0020048/;"	field
RPC_NT_FP_UNDERFLOW	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_FP_UNDERFLOW = 0xC0020047/;"	field
RPC_NT_GROUP_MEMBER_NOT_FOUND	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_GROUP_MEMBER_NOT_FOUND = 0xC002004B/;"	field
RPC_NT_INCOMPLETE_NAME	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_INCOMPLETE_NAME = 0xC0020038/;"	field
RPC_NT_INTERFACE_NOT_FOUND	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_INTERFACE_NOT_FOUND = 0xC002003C/;"	field
RPC_NT_INTERNAL_ERROR	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_INTERNAL_ERROR = 0xC0020043/;"	field
RPC_NT_INVALID_ASYNC_CALL	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_INVALID_ASYNC_CALL = 0xC0020063/;"	field
RPC_NT_INVALID_ASYNC_HANDLE	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_INVALID_ASYNC_HANDLE = 0xC0020062/;"	field
RPC_NT_INVALID_AUTH_IDENTITY	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_INVALID_AUTH_IDENTITY = 0xC0020032/;"	field
RPC_NT_INVALID_BINDING	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_INVALID_BINDING = 0xC0020003/;"	field
RPC_NT_INVALID_BOUND	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_INVALID_BOUND = 0xC0020023/;"	field
RPC_NT_INVALID_ENDPOINT_FORMAT	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_INVALID_ENDPOINT_FORMAT = 0xC0020007/;"	field
RPC_NT_INVALID_ES_ACTION	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_INVALID_ES_ACTION = 0xC0030059/;"	field
RPC_NT_INVALID_NAF_ID	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_INVALID_NAF_ID = 0xC0020040/;"	field
RPC_NT_INVALID_NAME_SYNTAX	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_INVALID_NAME_SYNTAX = 0xC0020025/;"	field
RPC_NT_INVALID_NETWORK_OPTIONS	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_INVALID_NETWORK_OPTIONS = 0xC0020019/;"	field
RPC_NT_INVALID_NET_ADDR	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_INVALID_NET_ADDR = 0xC0020008/;"	field
RPC_NT_INVALID_OBJECT	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_INVALID_OBJECT = 0xC002004D/;"	field
RPC_NT_INVALID_PIPE_OBJECT	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_INVALID_PIPE_OBJECT = 0xC003005C/;"	field
RPC_NT_INVALID_PIPE_OPERATION	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_INVALID_PIPE_OPERATION = 0xC003005D/;"	field
RPC_NT_INVALID_RPC_PROTSEQ	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_INVALID_RPC_PROTSEQ = 0xC0020005/;"	field
RPC_NT_INVALID_STRING_BINDING	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_INVALID_STRING_BINDING = 0xC0020001/;"	field
RPC_NT_INVALID_STRING_UUID	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_INVALID_STRING_UUID = 0xC0020006/;"	field
RPC_NT_INVALID_TAG	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_INVALID_TAG = 0xC0020022/;"	field
RPC_NT_INVALID_TIMEOUT	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_INVALID_TIMEOUT = 0xC002000A/;"	field
RPC_NT_INVALID_VERS_OPTION	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_INVALID_VERS_OPTION = 0xC0020039/;"	field
RPC_NT_MAX_CALLS_TOO_SMALL	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_MAX_CALLS_TOO_SMALL = 0xC002002B/;"	field
RPC_NT_NAME_SERVICE_UNAVAILABLE	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_NAME_SERVICE_UNAVAILABLE = 0xC002003F/;"	field
RPC_NT_NOTHING_TO_EXPORT	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_NOTHING_TO_EXPORT = 0xC0020037/;"	field
RPC_NT_NOT_ALL_OBJS_UNEXPORTED	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_NOT_ALL_OBJS_UNEXPORTED = 0xC002003B/;"	field
RPC_NT_NOT_CANCELLED	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_NOT_CANCELLED = 0xC0020058/;"	field
RPC_NT_NOT_LISTENING	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_NOT_LISTENING = 0xC0020010/;"	field
RPC_NT_NOT_RPC_ERROR	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_NOT_RPC_ERROR = 0xC0020055/;"	field
RPC_NT_NO_BINDINGS	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_NO_BINDINGS = 0xC0020013/;"	field
RPC_NT_NO_CALL_ACTIVE	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_NO_CALL_ACTIVE = 0xC002001A/;"	field
RPC_NT_NO_CONTEXT_AVAILABLE	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_NO_CONTEXT_AVAILABLE = 0xC0020042/;"	field
RPC_NT_NO_ENDPOINT_FOUND	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_NO_ENDPOINT_FOUND = 0xC0020009/;"	field
RPC_NT_NO_ENTRY_NAME	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_NO_ENTRY_NAME = 0xC0020024/;"	field
RPC_NT_NO_INTERFACES	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_NO_INTERFACES = 0xC002004F/;"	field
RPC_NT_NO_MORE_BINDINGS	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_NO_MORE_BINDINGS = 0xC002004A/;"	field
RPC_NT_NO_MORE_ENTRIES	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_NO_MORE_ENTRIES = 0xC0030001/;"	field
RPC_NT_NO_MORE_MEMBERS	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_NO_MORE_MEMBERS = 0xC002003A/;"	field
RPC_NT_NO_PRINC_NAME	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_NO_PRINC_NAME = 0xC0020054/;"	field
RPC_NT_NO_PROTSEQS	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_NO_PROTSEQS = 0xC0020014/;"	field
RPC_NT_NO_PROTSEQS_REGISTERED	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_NO_PROTSEQS_REGISTERED = 0xC002000F/;"	field
RPC_NT_NULL_REF_POINTER	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_NULL_REF_POINTER = 0xC0030009/;"	field
RPC_NT_OBJECT_NOT_FOUND	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_OBJECT_NOT_FOUND = 0xC002000B/;"	field
RPC_NT_OUT_OF_RESOURCES	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_OUT_OF_RESOURCES = 0xC0020016/;"	field
RPC_NT_PIPE_CLOSED	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_PIPE_CLOSED = 0xC003005F/;"	field
RPC_NT_PIPE_DISCIPLINE_ERROR	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_PIPE_DISCIPLINE_ERROR = 0xC0030060/;"	field
RPC_NT_PIPE_EMPTY	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_PIPE_EMPTY = 0xC0030061/;"	field
RPC_NT_PROCNUM_OUT_OF_RANGE	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_PROCNUM_OUT_OF_RANGE = 0xC002002E/;"	field
RPC_NT_PROTOCOL_ERROR	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_PROTOCOL_ERROR = 0xC002001D/;"	field
RPC_NT_PROTSEQ_NOT_FOUND	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_PROTSEQ_NOT_FOUND = 0xC002002D/;"	field
RPC_NT_PROTSEQ_NOT_SUPPORTED	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_PROTSEQ_NOT_SUPPORTED = 0xC0020004/;"	field
RPC_NT_PROXY_ACCESS_DENIED	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_PROXY_ACCESS_DENIED = 0xC0020064/;"	field
RPC_NT_SEC_PKG_ERROR	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_SEC_PKG_ERROR = 0xC0020057/;"	field
RPC_NT_SEND_INCOMPLETE	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_SEND_INCOMPLETE = 0x400200AF/;"	field
RPC_NT_SERVER_TOO_BUSY	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_SERVER_TOO_BUSY = 0xC0020018/;"	field
RPC_NT_SERVER_UNAVAILABLE	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_SERVER_UNAVAILABLE = 0xC0020017/;"	field
RPC_NT_SS_CANNOT_GET_CALL_HANDLE	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_SS_CANNOT_GET_CALL_HANDLE = 0xC0030008/;"	field
RPC_NT_SS_CHAR_TRANS_OPEN_FAIL	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_SS_CHAR_TRANS_OPEN_FAIL = 0xC0030002/;"	field
RPC_NT_SS_CHAR_TRANS_SHORT_FILE	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_SS_CHAR_TRANS_SHORT_FILE = 0xC0030003/;"	field
RPC_NT_SS_CONTEXT_DAMAGED	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_SS_CONTEXT_DAMAGED = 0xC0030006/;"	field
RPC_NT_SS_CONTEXT_MISMATCH	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_SS_CONTEXT_MISMATCH = 0xC0030005/;"	field
RPC_NT_SS_HANDLES_MISMATCH	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_SS_HANDLES_MISMATCH = 0xC0030007/;"	field
RPC_NT_SS_IN_NULL_CONTEXT	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_SS_IN_NULL_CONTEXT = 0xC0030004/;"	field
RPC_NT_STRING_TOO_LONG	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_STRING_TOO_LONG = 0xC002002C/;"	field
RPC_NT_TYPE_ALREADY_REGISTERED	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_TYPE_ALREADY_REGISTERED = 0xC002000D/;"	field
RPC_NT_UNKNOWN_AUTHN_LEVEL	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_UNKNOWN_AUTHN_LEVEL = 0xC0020031/;"	field
RPC_NT_UNKNOWN_AUTHN_SERVICE	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_UNKNOWN_AUTHN_SERVICE = 0xC0020030/;"	field
RPC_NT_UNKNOWN_AUTHN_TYPE	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_UNKNOWN_AUTHN_TYPE = 0xC002002A/;"	field
RPC_NT_UNKNOWN_AUTHZ_SERVICE	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_UNKNOWN_AUTHZ_SERVICE = 0xC0020033/;"	field
RPC_NT_UNKNOWN_IF	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_UNKNOWN_IF = 0xC0020012/;"	field
RPC_NT_UNKNOWN_MGR_TYPE	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_UNKNOWN_MGR_TYPE = 0xC0020011/;"	field
RPC_NT_UNSUPPORTED_AUTHN_LEVEL	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_UNSUPPORTED_AUTHN_LEVEL = 0xC0020053/;"	field
RPC_NT_UNSUPPORTED_NAME_SYNTAX	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_UNSUPPORTED_NAME_SYNTAX = 0xC0020026/;"	field
RPC_NT_UNSUPPORTED_TRANS_SYN	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_UNSUPPORTED_TRANS_SYN = 0xC002001F/;"	field
RPC_NT_UNSUPPORTED_TYPE	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_UNSUPPORTED_TYPE = 0xC0020021/;"	field
RPC_NT_UUID_LOCAL_ONLY	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_UUID_LOCAL_ONLY = 0x40020056/;"	field
RPC_NT_UUID_NO_ADDRESS	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_UUID_NO_ADDRESS = 0xC0020028/;"	field
RPC_NT_WRONG_ES_VERSION	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_WRONG_ES_VERSION = 0xC003005A/;"	field
RPC_NT_WRONG_KIND_OF_BINDING	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_WRONG_KIND_OF_BINDING = 0xC0020002/;"	field
RPC_NT_WRONG_PIPE_VERSION	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_WRONG_PIPE_VERSION = 0xC003005E/;"	field
RPC_NT_WRONG_STUB_VERSION	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_WRONG_STUB_VERSION = 0xC003005B/;"	field
RPC_NT_ZERO_DIVIDE	$ZIGLIB/std/os/windows/ntstatus.zig	/RPC_NT_ZERO_DIVIDE = 0xC0020044/;"	field
RPC_SERVER_TERMINATED	$ZIGLIB/std/c/darwin.zig	/RPC_SERVER_TERMINATED = 43/;"	field
RPC_S_ADDRESS_ERROR	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_ADDRESS_ERROR = 1768/;"	field
RPC_S_ALREADY_LISTENING	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_ALREADY_LISTENING = 1713/;"	field
RPC_S_ALREADY_REGISTERED	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_ALREADY_REGISTERED = 1711/;"	field
RPC_S_BINDING_HAS_NO_AUTH	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_BINDING_HAS_NO_AUTH = 1746/;"	field
RPC_S_BINDING_INCOMPLETE	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_BINDING_INCOMPLETE = 1819/;"	field
RPC_S_CALL_CANCELLED	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_CALL_CANCELLED = 1818/;"	field
RPC_S_CALL_FAILED	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_CALL_FAILED = 1726/;"	field
RPC_S_CALL_FAILED_DNE	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_CALL_FAILED_DNE = 1727/;"	field
RPC_S_CALL_IN_PROGRESS	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_CALL_IN_PROGRESS = 1791/;"	field
RPC_S_CANNOT_SUPPORT	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_CANNOT_SUPPORT = 1764/;"	field
RPC_S_CANT_CREATE_ENDPOINT	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_CANT_CREATE_ENDPOINT = 1720/;"	field
RPC_S_COMM_FAILURE	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_COMM_FAILURE = 1820/;"	field
RPC_S_COOKIE_AUTH_FAILED	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_COOKIE_AUTH_FAILED = 1833/;"	field
RPC_S_DUPLICATE_ENDPOINT	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_DUPLICATE_ENDPOINT = 1740/;"	field
RPC_S_ENTRY_ALREADY_EXISTS	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_ENTRY_ALREADY_EXISTS = 1760/;"	field
RPC_S_ENTRY_NOT_FOUND	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_ENTRY_NOT_FOUND = 1761/;"	field
RPC_S_ENTRY_TYPE_MISMATCH	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_ENTRY_TYPE_MISMATCH = 1922/;"	field
RPC_S_FP_DIV_ZERO	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_FP_DIV_ZERO = 1769/;"	field
RPC_S_FP_OVERFLOW	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_FP_OVERFLOW = 1771/;"	field
RPC_S_FP_UNDERFLOW	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_FP_UNDERFLOW = 1770/;"	field
RPC_S_GROUP_MEMBER_NOT_FOUND	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_GROUP_MEMBER_NOT_FOUND = 1898/;"	field
RPC_S_GRP_ELT_NOT_ADDED	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_GRP_ELT_NOT_ADDED = 1928/;"	field
RPC_S_GRP_ELT_NOT_REMOVED	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_GRP_ELT_NOT_REMOVED = 1929/;"	field
RPC_S_INCOMPLETE_NAME	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_INCOMPLETE_NAME = 1755/;"	field
RPC_S_INTERFACE_NOT_EXPORTED	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_INTERFACE_NOT_EXPORTED = 1924/;"	field
RPC_S_INTERFACE_NOT_FOUND	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_INTERFACE_NOT_FOUND = 1759/;"	field
RPC_S_INTERNAL_ERROR	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_INTERNAL_ERROR = 1766/;"	field
RPC_S_INVALID_ASYNC_CALL	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_INVALID_ASYNC_CALL = 1915/;"	field
RPC_S_INVALID_ASYNC_HANDLE	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_INVALID_ASYNC_HANDLE = 1914/;"	field
RPC_S_INVALID_AUTH_IDENTITY	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_INVALID_AUTH_IDENTITY = 1749/;"	field
RPC_S_INVALID_BINDING	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_INVALID_BINDING = 1702/;"	field
RPC_S_INVALID_BOUND	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_INVALID_BOUND = 1734/;"	field
RPC_S_INVALID_ENDPOINT_FORMAT	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_INVALID_ENDPOINT_FORMAT = 1706/;"	field
RPC_S_INVALID_NAF_ID	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_INVALID_NAF_ID = 1763/;"	field
RPC_S_INVALID_NAME_SYNTAX	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_INVALID_NAME_SYNTAX = 1736/;"	field
RPC_S_INVALID_NETWORK_OPTIONS	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_INVALID_NETWORK_OPTIONS = 1724/;"	field
RPC_S_INVALID_NET_ADDR	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_INVALID_NET_ADDR = 1707/;"	field
RPC_S_INVALID_OBJECT	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_INVALID_OBJECT = 1900/;"	field
RPC_S_INVALID_RPC_PROTSEQ	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_INVALID_RPC_PROTSEQ = 1704/;"	field
RPC_S_INVALID_STRING_BINDING	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_INVALID_STRING_BINDING = 1700/;"	field
RPC_S_INVALID_STRING_UUID	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_INVALID_STRING_UUID = 1705/;"	field
RPC_S_INVALID_TAG	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_INVALID_TAG = 1733/;"	field
RPC_S_INVALID_TIMEOUT	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_INVALID_TIMEOUT = 1709/;"	field
RPC_S_INVALID_VERS_OPTION	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_INVALID_VERS_OPTION = 1756/;"	field
RPC_S_MAX_CALLS_TOO_SMALL	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_MAX_CALLS_TOO_SMALL = 1742/;"	field
RPC_S_NAME_SERVICE_UNAVAILABLE	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_NAME_SERVICE_UNAVAILABLE = 1762/;"	field
RPC_S_NOTHING_TO_EXPORT	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_NOTHING_TO_EXPORT = 1754/;"	field
RPC_S_NOT_ALL_OBJS_EXPORTED	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_NOT_ALL_OBJS_EXPORTED = 1923/;"	field
RPC_S_NOT_ALL_OBJS_UNEXPORTED	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_NOT_ALL_OBJS_UNEXPORTED = 1758/;"	field
RPC_S_NOT_CANCELLED	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_NOT_CANCELLED = 1826/;"	field
RPC_S_NOT_LISTENING	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_NOT_LISTENING = 1715/;"	field
RPC_S_NOT_RPC_ERROR	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_NOT_RPC_ERROR = 1823/;"	field
RPC_S_NO_BINDINGS	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_NO_BINDINGS = 1718/;"	field
RPC_S_NO_CALL_ACTIVE	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_NO_CALL_ACTIVE = 1725/;"	field
RPC_S_NO_CONTEXT_AVAILABLE	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_NO_CONTEXT_AVAILABLE = 1765/;"	field
RPC_S_NO_ENDPOINT_FOUND	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_NO_ENDPOINT_FOUND = 1708/;"	field
RPC_S_NO_ENTRY_NAME	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_NO_ENTRY_NAME = 1735/;"	field
RPC_S_NO_INTERFACES	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_NO_INTERFACES = 1817/;"	field
RPC_S_NO_MORE_BINDINGS	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_NO_MORE_BINDINGS = 1806/;"	field
RPC_S_NO_MORE_MEMBERS	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_NO_MORE_MEMBERS = 1757/;"	field
RPC_S_NO_PRINC_NAME	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_NO_PRINC_NAME = 1822/;"	field
RPC_S_NO_PROTSEQS	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_NO_PROTSEQS = 1719/;"	field
RPC_S_NO_PROTSEQS_REGISTERED	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_NO_PROTSEQS_REGISTERED = 1714/;"	field
RPC_S_OBJECT_NOT_FOUND	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_OBJECT_NOT_FOUND = 1710/;"	field
RPC_S_OUT_OF_RESOURCES	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_OUT_OF_RESOURCES = 1721/;"	field
RPC_S_PRF_ELT_NOT_ADDED	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_PRF_ELT_NOT_ADDED = 1926/;"	field
RPC_S_PRF_ELT_NOT_REMOVED	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_PRF_ELT_NOT_REMOVED = 1927/;"	field
RPC_S_PROCNUM_OUT_OF_RANGE	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_PROCNUM_OUT_OF_RANGE = 1745/;"	field
RPC_S_PROFILE_NOT_ADDED	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_PROFILE_NOT_ADDED = 1925/;"	field
RPC_S_PROTOCOL_ERROR	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_PROTOCOL_ERROR = 1728/;"	field
RPC_S_PROTSEQ_NOT_FOUND	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_PROTSEQ_NOT_FOUND = 1744/;"	field
RPC_S_PROTSEQ_NOT_SUPPORTED	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_PROTSEQ_NOT_SUPPORTED = 1703/;"	field
RPC_S_PROXY_ACCESS_DENIED	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_PROXY_ACCESS_DENIED = 1729/;"	field
RPC_S_SEC_PKG_ERROR	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_SEC_PKG_ERROR = 1825/;"	field
RPC_S_SEND_INCOMPLETE	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_SEND_INCOMPLETE = 1913/;"	field
RPC_S_SERVER_TOO_BUSY	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_SERVER_TOO_BUSY = 1723/;"	field
RPC_S_SERVER_UNAVAILABLE	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_SERVER_UNAVAILABLE = 1722/;"	field
RPC_S_STRING_TOO_LONG	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_STRING_TOO_LONG = 1743/;"	field
RPC_S_TYPE_ALREADY_REGISTERED	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_TYPE_ALREADY_REGISTERED = 1712/;"	field
RPC_S_UNKNOWN_AUTHN_LEVEL	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_UNKNOWN_AUTHN_LEVEL = 1748/;"	field
RPC_S_UNKNOWN_AUTHN_SERVICE	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_UNKNOWN_AUTHN_SERVICE = 1747/;"	field
RPC_S_UNKNOWN_AUTHN_TYPE	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_UNKNOWN_AUTHN_TYPE = 1741/;"	field
RPC_S_UNKNOWN_AUTHZ_SERVICE	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_UNKNOWN_AUTHZ_SERVICE = 1750/;"	field
RPC_S_UNKNOWN_IF	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_UNKNOWN_IF = 1717/;"	field
RPC_S_UNKNOWN_MGR_TYPE	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_UNKNOWN_MGR_TYPE = 1716/;"	field
RPC_S_UNSUPPORTED_AUTHN_LEVEL	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_UNSUPPORTED_AUTHN_LEVEL = 1821/;"	field
RPC_S_UNSUPPORTED_NAME_SYNTAX	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_UNSUPPORTED_NAME_SYNTAX = 1737/;"	field
RPC_S_UNSUPPORTED_TRANS_SYN	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_UNSUPPORTED_TRANS_SYN = 1730/;"	field
RPC_S_UNSUPPORTED_TYPE	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_UNSUPPORTED_TYPE = 1732/;"	field
RPC_S_UUID_LOCAL_ONLY	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_UUID_LOCAL_ONLY = 1824/;"	field
RPC_S_UUID_NO_ADDRESS	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_UUID_NO_ADDRESS = 1739/;"	field
RPC_S_WRONG_KIND_OF_BINDING	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_WRONG_KIND_OF_BINDING = 1701/;"	field
RPC_S_ZERO_DIVIDE	$ZIGLIB/std/os/windows/win32error.zig	/RPC_S_ZERO_DIVIDE = 1767/;"	field
RPC_TERMINATE_ORPHAN	$ZIGLIB/std/c/darwin.zig	/RPC_TERMINATE_ORPHAN = 44/;"	field
RPC_X_BAD_STUB_DATA	$ZIGLIB/std/os/windows/win32error.zig	/RPC_X_BAD_STUB_DATA = 1783/;"	field
RPC_X_BYTE_COUNT_TOO_SMALL	$ZIGLIB/std/os/windows/win32error.zig	/RPC_X_BYTE_COUNT_TOO_SMALL = 1782/;"	field
RPC_X_ENUM_VALUE_OUT_OF_RANGE	$ZIGLIB/std/os/windows/win32error.zig	/RPC_X_ENUM_VALUE_OUT_OF_RANGE = 1781/;"	field
RPC_X_INVALID_ES_ACTION	$ZIGLIB/std/os/windows/win32error.zig	/RPC_X_INVALID_ES_ACTION = 1827/;"	field
RPC_X_INVALID_PIPE_OBJECT	$ZIGLIB/std/os/windows/win32error.zig	/RPC_X_INVALID_PIPE_OBJECT = 1830/;"	field
RPC_X_NO_MORE_ENTRIES	$ZIGLIB/std/os/windows/win32error.zig	/RPC_X_NO_MORE_ENTRIES = 1772/;"	field
RPC_X_NULL_REF_POINTER	$ZIGLIB/std/os/windows/win32error.zig	/RPC_X_NULL_REF_POINTER = 1780/;"	field
RPC_X_PIPE_CLOSED	$ZIGLIB/std/os/windows/win32error.zig	/RPC_X_PIPE_CLOSED = 1916/;"	field
RPC_X_PIPE_DISCIPLINE_ERROR	$ZIGLIB/std/os/windows/win32error.zig	/RPC_X_PIPE_DISCIPLINE_ERROR = 1917/;"	field
RPC_X_PIPE_EMPTY	$ZIGLIB/std/os/windows/win32error.zig	/RPC_X_PIPE_EMPTY = 1918/;"	field
RPC_X_SS_CANNOT_GET_CALL_HANDLE	$ZIGLIB/std/os/windows/win32error.zig	/RPC_X_SS_CANNOT_GET_CALL_HANDLE = 1779/;"	field
RPC_X_SS_CHAR_TRANS_OPEN_FAIL	$ZIGLIB/std/os/windows/win32error.zig	/RPC_X_SS_CHAR_TRANS_OPEN_FAIL = 1773/;"	field
RPC_X_SS_CHAR_TRANS_SHORT_FILE	$ZIGLIB/std/os/windows/win32error.zig	/RPC_X_SS_CHAR_TRANS_SHORT_FILE = 1774/;"	field
RPC_X_SS_CONTEXT_DAMAGED	$ZIGLIB/std/os/windows/win32error.zig	/RPC_X_SS_CONTEXT_DAMAGED = 1777/;"	field
RPC_X_SS_HANDLES_MISMATCH	$ZIGLIB/std/os/windows/win32error.zig	/RPC_X_SS_HANDLES_MISMATCH = 1778/;"	field
RPC_X_SS_IN_NULL_CONTEXT	$ZIGLIB/std/os/windows/win32error.zig	/RPC_X_SS_IN_NULL_CONTEXT = 1775/;"	field
RPC_X_WRONG_ES_VERSION	$ZIGLIB/std/os/windows/win32error.zig	/RPC_X_WRONG_ES_VERSION = 1828/;"	field
RPC_X_WRONG_PIPE_ORDER	$ZIGLIB/std/os/windows/win32error.zig	/RPC_X_WRONG_PIPE_ORDER = 1831/;"	field
RPC_X_WRONG_PIPE_VERSION	$ZIGLIB/std/os/windows/win32error.zig	/RPC_X_WRONG_PIPE_VERSION = 1832/;"	field
RPC_X_WRONG_STUB_VERSION	$ZIGLIB/std/os/windows/win32error.zig	/RPC_X_WRONG_STUB_VERSION = 1829/;"	field
RParen	$ZIGLIB/std/c/tokenizer.zig	/RParen/;"	field
RREMOTE	$ZIGLIB/std/os/linux/errno/sparc.zig	/RREMOTE = 81/;"	field
RS08	$ZIGLIB/std/elf.zig	/RS08 = 132/;"	field
RSVP	$ZIGLIB/std/os/linux.zig	/pub const RSVP = 46/;"	constant
RSYNC	$ZIGLIB/std/os/wasi.zig	/pub const RSYNC: fdflags_t = 0x0008/;"	constant
RTABLE	$ZIGLIB/std/c/openbsd.zig	/pub const RTABLE = 0x1021/;"	constant
RTHDR	$ZIGLIB/std/os/linux.zig	/pub const RTHDR = 57/;"	constant
RTHDRDSTOPTS	$ZIGLIB/std/os/linux.zig	/pub const RTHDRDSTOPTS = 55/;"	constant
RTIP	$ZIGLIB/std/c/freebsd.zig	/pub const RTIP = AF.pseudo_RTIP/;"	constant
RTLD	$ZIGLIB/std/c/solaris.zig	/^pub const RTLD = struct {$/;"	struct
RTL_CRITICAL_SECTION	$ZIGLIB/std/os/windows.zig	/^pub const RTL_CRITICAL_SECTION = extern struct {$/;"	struct
RTL_CRITICAL_SECTION_DEBUG	$ZIGLIB/std/os/windows.zig	/^pub const RTL_CRITICAL_SECTION_DEBUG = extern struct {$/;"	struct
RTL_DRIVE_LETTER_CURDIR	$ZIGLIB/std/os/windows.zig	/^pub const RTL_DRIVE_LETTER_CURDIR = extern struct {$/;"	struct
RTL_OSVERSIONINFOW	$ZIGLIB/std/os/windows.zig	/^pub const RTL_OSVERSIONINFOW = OSVERSIONINFOW/;"	constant
RTL_QUERY_REGISTRY_DELETE	$ZIGLIB/std/os/windows.zig	/^pub const RTL_QUERY_REGISTRY_DELETE = 0x00000040/;"	constant
RTL_QUERY_REGISTRY_DIRECT	$ZIGLIB/std/os/windows.zig	/^pub const RTL_QUERY_REGISTRY_DIRECT = 0x00000020/;"	constant
RTL_QUERY_REGISTRY_NOEXPAND	$ZIGLIB/std/os/windows.zig	/^pub const RTL_QUERY_REGISTRY_NOEXPAND = 0x00000010/;"	constant
RTL_QUERY_REGISTRY_NOVALUE	$ZIGLIB/std/os/windows.zig	/^pub const RTL_QUERY_REGISTRY_NOVALUE = 0x00000008/;"	constant
RTL_QUERY_REGISTRY_REQUIRED	$ZIGLIB/std/os/windows.zig	/^pub const RTL_QUERY_REGISTRY_REQUIRED = 0x00000004/;"	constant
RTL_QUERY_REGISTRY_ROUTINE	$ZIGLIB/std/os/windows.zig	/^pub const RTL_QUERY_REGISTRY_ROUTINE = ?*const fn ($/;"	constant
RTL_QUERY_REGISTRY_SUBKEY	$ZIGLIB/std/os/windows.zig	/^pub const RTL_QUERY_REGISTRY_SUBKEY = 0x00000001/;"	constant
RTL_QUERY_REGISTRY_TABLE	$ZIGLIB/std/os/windows.zig	/^pub const RTL_QUERY_REGISTRY_TABLE = extern struct {$/;"	struct
RTL_QUERY_REGISTRY_TOPKEY	$ZIGLIB/std/os/windows.zig	/^pub const RTL_QUERY_REGISTRY_TOPKEY = 0x00000002/;"	constant
RTL_QUERY_REGISTRY_TYPECHECK	$ZIGLIB/std/os/windows.zig	/^pub const RTL_QUERY_REGISTRY_TYPECHECK = 0x00000100/;"	constant
RTL_REGISTRY_ABSOLUTE	$ZIGLIB/std/os/windows.zig	/^pub const RTL_REGISTRY_ABSOLUTE = 0/;"	constant
RTL_REGISTRY_CONTROL	$ZIGLIB/std/os/windows.zig	/^pub const RTL_REGISTRY_CONTROL = 2/;"	constant
RTL_REGISTRY_DEVICEMAP	$ZIGLIB/std/os/windows.zig	/^pub const RTL_REGISTRY_DEVICEMAP = 4/;"	constant
RTL_REGISTRY_HANDLE	$ZIGLIB/std/os/windows.zig	/^pub const RTL_REGISTRY_HANDLE = 0x40000000/;"	constant
RTL_REGISTRY_MAXIMUM	$ZIGLIB/std/os/windows.zig	/^pub const RTL_REGISTRY_MAXIMUM = 6/;"	constant
RTL_REGISTRY_OPTIONAL	$ZIGLIB/std/os/windows.zig	/^pub const RTL_REGISTRY_OPTIONAL = 0x80000000/;"	constant
RTL_REGISTRY_SERVICES	$ZIGLIB/std/os/windows.zig	/^pub const RTL_REGISTRY_SERVICES = 1/;"	constant
RTL_REGISTRY_USER	$ZIGLIB/std/os/windows.zig	/^pub const RTL_REGISTRY_USER = 5/;"	constant
RTL_REGISTRY_WINDOWS_NT	$ZIGLIB/std/os/windows.zig	/^pub const RTL_REGISTRY_WINDOWS_NT = 3/;"	constant
RTL_RUN_ONCE	$ZIGLIB/std/os/windows.zig	/^pub const RTL_RUN_ONCE = extern struct {$/;"	struct
RTL_RUN_ONCE_INIT	$ZIGLIB/std/os/windows.zig	/^pub const RTL_RUN_ONCE_INIT = RTL_RUN_ONCE{ .Ptr = null }/;"	constant
RTL_USER_PROCESS_PARAMETERS	$ZIGLIB/std/os/windows.zig	/^pub const RTL_USER_PROCESS_PARAMETERS = extern struct {$/;"	struct
RTMAX	$ZIGLIB/std/c/solaris.zig	/pub const RTMAX = 74/;"	constant
RTMIN	$ZIGLIB/std/c/solaris.zig	/pub const RTMIN = 42/;"	constant
RTM_DELACTION	$ZIGLIB/std/os/linux.zig	/RTM_DELACTION/;"	field
RTM_DELADDR	$ZIGLIB/std/os/linux.zig	/RTM_DELADDR/;"	field
RTM_DELADDRLABEL	$ZIGLIB/std/os/linux.zig	/RTM_DELADDRLABEL/;"	field
RTM_DELCHAIN	$ZIGLIB/std/os/linux.zig	/RTM_DELCHAIN/;"	field
RTM_DELLINK	$ZIGLIB/std/os/linux.zig	/RTM_DELLINK/;"	field
RTM_DELMDB	$ZIGLIB/std/os/linux.zig	/RTM_DELMDB = 85/;"	field
RTM_DELNEIGH	$ZIGLIB/std/os/linux.zig	/RTM_DELNEIGH/;"	field
RTM_DELNETCONF	$ZIGLIB/std/os/linux.zig	/RTM_DELNETCONF/;"	field
RTM_DELNEXTHOP	$ZIGLIB/std/os/linux.zig	/RTM_DELNEXTHOP/;"	field
RTM_DELNSID	$ZIGLIB/std/os/linux.zig	/RTM_DELNSID = 89/;"	field
RTM_DELQDISC	$ZIGLIB/std/os/linux.zig	/RTM_DELQDISC/;"	field
RTM_DELROUTE	$ZIGLIB/std/os/linux.zig	/RTM_DELROUTE/;"	field
RTM_DELRULE	$ZIGLIB/std/os/linux.zig	/RTM_DELRULE/;"	field
RTM_DELTCLASS	$ZIGLIB/std/os/linux.zig	/RTM_DELTCLASS/;"	field
RTM_DELTFILTER	$ZIGLIB/std/os/linux.zig	/RTM_DELTFILTER/;"	field
RTM_GETACTION	$ZIGLIB/std/os/linux.zig	/RTM_GETACTION/;"	field
RTM_GETADDR	$ZIGLIB/std/os/linux.zig	/RTM_GETADDR/;"	field
RTM_GETADDRLABEL	$ZIGLIB/std/os/linux.zig	/RTM_GETADDRLABEL/;"	field
RTM_GETANYCAST	$ZIGLIB/std/os/linux.zig	/RTM_GETANYCAST = 62/;"	field
RTM_GETCHAIN	$ZIGLIB/std/os/linux.zig	/RTM_GETCHAIN/;"	field
RTM_GETDCB	$ZIGLIB/std/os/linux.zig	/RTM_GETDCB = 78/;"	field
RTM_GETLINK	$ZIGLIB/std/os/linux.zig	/RTM_GETLINK/;"	field
RTM_GETMDB	$ZIGLIB/std/os/linux.zig	/RTM_GETMDB = 86/;"	field
RTM_GETMULTICAST	$ZIGLIB/std/os/linux.zig	/RTM_GETMULTICAST = 58/;"	field
RTM_GETNEIGH	$ZIGLIB/std/os/linux.zig	/RTM_GETNEIGH/;"	field
RTM_GETNEIGHTBL	$ZIGLIB/std/os/linux.zig	/RTM_GETNEIGHTBL = 66/;"	field
RTM_GETNETCONF	$ZIGLIB/std/os/linux.zig	/RTM_GETNETCONF = 82/;"	field
RTM_GETNEXTHOP	$ZIGLIB/std/os/linux.zig	/RTM_GETNEXTHOP/;"	field
RTM_GETNSID	$ZIGLIB/std/os/linux.zig	/RTM_GETNSID = 90/;"	field
RTM_GETQDISC	$ZIGLIB/std/os/linux.zig	/RTM_GETQDISC/;"	field
RTM_GETROUTE	$ZIGLIB/std/os/linux.zig	/RTM_GETROUTE/;"	field
RTM_GETRULE	$ZIGLIB/std/os/linux.zig	/RTM_GETRULE/;"	field
RTM_GETSTATS	$ZIGLIB/std/os/linux.zig	/RTM_GETSTATS = 94/;"	field
RTM_GETTCLASS	$ZIGLIB/std/os/linux.zig	/RTM_GETTCLASS/;"	field
RTM_GETTFILTER	$ZIGLIB/std/os/linux.zig	/RTM_GETTFILTER/;"	field
RTM_NEWACTION	$ZIGLIB/std/os/linux.zig	/RTM_NEWACTION = 48/;"	field
RTM_NEWADDR	$ZIGLIB/std/os/linux.zig	/RTM_NEWADDR = 20/;"	field
RTM_NEWADDRLABEL	$ZIGLIB/std/os/linux.zig	/RTM_NEWADDRLABEL = 72/;"	field
RTM_NEWCACHEREPORT	$ZIGLIB/std/os/linux.zig	/RTM_NEWCACHEREPORT = 96/;"	field
RTM_NEWCHAIN	$ZIGLIB/std/os/linux.zig	/RTM_NEWCHAIN = 100/;"	field
RTM_NEWLINK	$ZIGLIB/std/os/linux.zig	/RTM_NEWLINK = 16/;"	field
RTM_NEWMDB	$ZIGLIB/std/os/linux.zig	/RTM_NEWMDB = 84/;"	field
RTM_NEWNDUSEROPT	$ZIGLIB/std/os/linux.zig	/RTM_NEWNDUSEROPT = 68/;"	field
RTM_NEWNEIGH	$ZIGLIB/std/os/linux.zig	/RTM_NEWNEIGH = 28/;"	field
RTM_NEWNEIGHTBL	$ZIGLIB/std/os/linux.zig	/RTM_NEWNEIGHTBL = 64/;"	field
RTM_NEWNETCONF	$ZIGLIB/std/os/linux.zig	/RTM_NEWNETCONF = 80/;"	field
RTM_NEWNEXTHOP	$ZIGLIB/std/os/linux.zig	/RTM_NEWNEXTHOP = 104/;"	field
RTM_NEWNSID	$ZIGLIB/std/os/linux.zig	/RTM_NEWNSID = 88/;"	field
RTM_NEWPREFIX	$ZIGLIB/std/os/linux.zig	/RTM_NEWPREFIX = 52/;"	field
RTM_NEWQDISC	$ZIGLIB/std/os/linux.zig	/RTM_NEWQDISC = 36/;"	field
RTM_NEWROUTE	$ZIGLIB/std/os/linux.zig	/RTM_NEWROUTE = 24/;"	field
RTM_NEWRULE	$ZIGLIB/std/os/linux.zig	/RTM_NEWRULE = 32/;"	field
RTM_NEWSTATS	$ZIGLIB/std/os/linux.zig	/RTM_NEWSTATS = 92/;"	field
RTM_NEWTCLASS	$ZIGLIB/std/os/linux.zig	/RTM_NEWTCLASS = 40/;"	field
RTM_NEWTFILTER	$ZIGLIB/std/os/linux.zig	/RTM_NEWTFILTER = 44/;"	field
RTM_SETDCB	$ZIGLIB/std/os/linux.zig	/RTM_SETDCB/;"	field
RTM_SETLINK	$ZIGLIB/std/os/linux.zig	/RTM_SETLINK/;"	field
RTM_SETNEIGHTBL	$ZIGLIB/std/os/linux.zig	/RTM_SETNEIGHTBL/;"	field
RTPRIO	$ZIGLIB/std/os/linux/sparc64.zig	/RTPRIO/;"	field
RTTIME	$ZIGLIB/std/os/linux/sparc64.zig	/RTTIME/;"	field
RUID	$ZIGLIB/std/c/solaris.zig	/pub const RUID = 2001/;"	constant
RUNTIME_FUNCTION	$ZIGLIB/std/os/windows.zig	/pub const RUNTIME_FUNCTION = extern struct {$/;"	struct
RUSSIAN	$ZIGLIB/std/os/windows/lang.zig	/^pub const RUSSIAN = 0x19/;"	constant
RUSSIAN_RUSSIA	$ZIGLIB/std/os/windows/sublang.zig	/^pub const RUSSIAN_RUSSIA = 0x01/;"	constant
RWACC	$ZIGLIB/std/c/solaris.zig	/pub const RWACC = 0x3/;"	constant
RWDNY	$ZIGLIB/std/c/solaris.zig	/pub const RWDNY = 0x3/;"	constant
RWMASK	$ZIGLIB/std/c/haiku.zig	/pub const RWMASK = ACCMODE/;"	constant
RW_RDLOCK	$ZIGLIB/std/c/freebsd.zig	/RW_RDLOCK = 12/;"	field
RW_UNLOCK	$ZIGLIB/std/c/freebsd.zig	/RW_UNLOCK = 14/;"	field
RW_WRLOCK	$ZIGLIB/std/c/freebsd.zig	/RW_WRLOCK = 13/;"	field
RXACT_COMMITTED	$ZIGLIB/std/os/windows/win32error.zig	/RXACT_COMMITTED = 744/;"	field
RXACT_COMMIT_FAILURE	$ZIGLIB/std/os/windows/win32error.zig	/RXACT_COMMIT_FAILURE = 1370/;"	field
RXACT_COMMIT_NECESSARY	$ZIGLIB/std/os/windows/win32error.zig	/RXACT_COMMIT_NECESSARY = 678/;"	field
RXACT_INVALID_STATE	$ZIGLIB/std/os/windows/win32error.zig	/RXACT_INVALID_STATE = 1369/;"	field
RXACT_STATE_CREATED	$ZIGLIB/std/os/windows/win32error.zig	/RXACT_STATE_CREATED = 701/;"	field
RXQ_OVFL	$ZIGLIB/std/os/linux.zig	/pub const RXQ_OVFL = 40/;"	constant
RXRPC	$ZIGLIB/std/os/linux.zig	/pub const RXRPC = 33/;"	constant
RX_RING	$ZIGLIB/std/os/linux.zig	/pub const RX_RING = 2/;"	constant
R_386_RELATIVE	$ZIGLIB/std/os/linux/start_pie.zig	/^const R_386_RELATIVE = 8/;"	constant
R_AARCH64_RELATIVE	$ZIGLIB/std/os/linux/start_pie.zig	/^const R_AARCH64_RELATIVE = 1027/;"	constant
R_AMD64_RELATIVE	$ZIGLIB/std/os/linux/start_pie.zig	/^const R_AMD64_RELATIVE = 8/;"	constant
R_ARM_RELATIVE	$ZIGLIB/std/os/linux/start_pie.zig	/^const R_ARM_RELATIVE = 23/;"	constant
R_OK	$ZIGLIB/std/os/wasi.zig	/^pub const R_OK = 4/;"	constant
R_RELATIVE	$ZIGLIB/std/os/linux/start_pie.zig	/^const R_RELATIVE = switch (builtin.cpu.arch) {$/;"	constant
R_RISCV_RELATIVE	$ZIGLIB/std/os/linux/start_pie.zig	/^const R_RISCV_RELATIVE = 3/;"	constant
R_SPARC_RELATIVE	$ZIGLIB/std/os/linux/start_pie.zig	/^const R_SPARC_RELATIVE = 22/;"	constant
R_X86_64_16	$ZIGLIB/std/elf.zig	/^pub const R_X86_64_16 = 12/;"	constant
R_X86_64_32	$ZIGLIB/std/elf.zig	/^pub const R_X86_64_32 = 10/;"	constant
R_X86_64_32S	$ZIGLIB/std/elf.zig	/^pub const R_X86_64_32S = 11/;"	constant
R_X86_64_64	$ZIGLIB/std/elf.zig	/^pub const R_X86_64_64 = 1/;"	constant
R_X86_64_8	$ZIGLIB/std/elf.zig	/^pub const R_X86_64_8 = 14/;"	constant
R_X86_64_COPY	$ZIGLIB/std/elf.zig	/^pub const R_X86_64_COPY = 5/;"	constant
R_X86_64_DTPMOD64	$ZIGLIB/std/elf.zig	/^pub const R_X86_64_DTPMOD64 = 16/;"	constant
R_X86_64_DTPOFF32	$ZIGLIB/std/elf.zig	/^pub const R_X86_64_DTPOFF32 = 21/;"	constant
R_X86_64_DTPOFF64	$ZIGLIB/std/elf.zig	/^pub const R_X86_64_DTPOFF64 = 17/;"	constant
R_X86_64_GLOB_DAT	$ZIGLIB/std/elf.zig	/^pub const R_X86_64_GLOB_DAT = 6/;"	constant
R_X86_64_GOT32	$ZIGLIB/std/elf.zig	/^pub const R_X86_64_GOT32 = 3/;"	constant
R_X86_64_GOT64	$ZIGLIB/std/elf.zig	/^pub const R_X86_64_GOT64 = 27/;"	constant
R_X86_64_GOTOFF64	$ZIGLIB/std/elf.zig	/^pub const R_X86_64_GOTOFF64 = 25/;"	constant
R_X86_64_GOTPC32	$ZIGLIB/std/elf.zig	/^pub const R_X86_64_GOTPC32 = 26/;"	constant
R_X86_64_GOTPC32_TLSDESC	$ZIGLIB/std/elf.zig	/^pub const R_X86_64_GOTPC32_TLSDESC = 34/;"	constant
R_X86_64_GOTPC64	$ZIGLIB/std/elf.zig	/^pub const R_X86_64_GOTPC64 = 29/;"	constant
R_X86_64_GOTPCREL	$ZIGLIB/std/elf.zig	/^pub const R_X86_64_GOTPCREL = 9/;"	constant
R_X86_64_GOTPCREL64	$ZIGLIB/std/elf.zig	/^pub const R_X86_64_GOTPCREL64 = 28/;"	constant
R_X86_64_GOTPCRELX	$ZIGLIB/std/elf.zig	/^pub const R_X86_64_GOTPCRELX = 41/;"	constant
R_X86_64_GOTPLT64	$ZIGLIB/std/elf.zig	/^pub const R_X86_64_GOTPLT64 = 30/;"	constant
R_X86_64_GOTTPOFF	$ZIGLIB/std/elf.zig	/^pub const R_X86_64_GOTTPOFF = 22/;"	constant
R_X86_64_IRELATIVE	$ZIGLIB/std/elf.zig	/^pub const R_X86_64_IRELATIVE = 37/;"	constant
R_X86_64_JUMP_SLOT	$ZIGLIB/std/elf.zig	/^pub const R_X86_64_JUMP_SLOT = 7/;"	constant
R_X86_64_NONE	$ZIGLIB/std/elf.zig	/^pub const R_X86_64_NONE = 0/;"	constant
R_X86_64_NUM	$ZIGLIB/std/elf.zig	/^pub const R_X86_64_NUM = 43/;"	constant
R_X86_64_PC16	$ZIGLIB/std/elf.zig	/^pub const R_X86_64_PC16 = 13/;"	constant
R_X86_64_PC32	$ZIGLIB/std/elf.zig	/^pub const R_X86_64_PC32 = 2/;"	constant
R_X86_64_PC64	$ZIGLIB/std/elf.zig	/^pub const R_X86_64_PC64 = 24/;"	constant
R_X86_64_PC8	$ZIGLIB/std/elf.zig	/^pub const R_X86_64_PC8 = 15/;"	constant
R_X86_64_PLT32	$ZIGLIB/std/elf.zig	/^pub const R_X86_64_PLT32 = 4/;"	constant
R_X86_64_PLTOFF64	$ZIGLIB/std/elf.zig	/^pub const R_X86_64_PLTOFF64 = 31/;"	constant
R_X86_64_RELATIVE	$ZIGLIB/std/elf.zig	/^pub const R_X86_64_RELATIVE = 8/;"	constant
R_X86_64_RELATIVE64	$ZIGLIB/std/elf.zig	/^pub const R_X86_64_RELATIVE64 = 38/;"	constant
R_X86_64_REX_GOTPCRELX	$ZIGLIB/std/elf.zig	/^pub const R_X86_64_REX_GOTPCRELX = 42/;"	constant
R_X86_64_SIZE32	$ZIGLIB/std/elf.zig	/^pub const R_X86_64_SIZE32 = 32/;"	constant
R_X86_64_SIZE64	$ZIGLIB/std/elf.zig	/^pub const R_X86_64_SIZE64 = 33/;"	constant
R_X86_64_TLSDESC	$ZIGLIB/std/elf.zig	/^pub const R_X86_64_TLSDESC = 36/;"	constant
R_X86_64_TLSDESC_CALL	$ZIGLIB/std/elf.zig	/^pub const R_X86_64_TLSDESC_CALL = 35/;"	constant
R_X86_64_TLSGD	$ZIGLIB/std/elf.zig	/^pub const R_X86_64_TLSGD = 19/;"	constant
R_X86_64_TLSLD	$ZIGLIB/std/elf.zig	/^pub const R_X86_64_TLSLD = 20/;"	constant
R_X86_64_TPOFF32	$ZIGLIB/std/elf.zig	/^pub const R_X86_64_TPOFF32 = 23/;"	constant
R_X86_64_TPOFF64	$ZIGLIB/std/elf.zig	/^pub const R_X86_64_TPOFF64 = 18/;"	constant
RaiseError	$ZIGLIB/std/os.zig	/^pub const RaiseError = UnexpectedError/;"	constant
RamDisk	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/RamDisk: *const RamDiskDevicePath/;"	field
RamDiskDevicePath	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/pub const RamDiskDevicePath = extern struct {$/;"	struct
Random	$ZIGLIB/std/rand.zig	/^pub const Random = struct {$/;"	struct
Range	$ZIGLIB/std/target.zig	/pub const Range = struct {$/;"	struct
RangeDecoder	$ZIGLIB/std/compress/lzma/decode/rangecoder.zig	/^pub const RangeDecoder = struct {$/;"	struct
RangeListOffset	$ZIGLIB/std/dwarf.zig	/RangeListOffset: u64/;"	field
Rank	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/const Rank = enum(u8) {$/;"	enum
Rational	$ZIGLIB/std/math/big/rational.zig	/^pub const Rational = struct {$/;"	struct
RawFormat	$ZIGLIB/std/Build/InstallRawStep.zig	/^pub const RawFormat = enum {$/;"	enum
RawPublicKey	$ZIGLIB/std/crypto/tls.zig	/RawPublicKey = 2/;"	field
RawTracepointAttr	$ZIGLIB/std/os/linux/bpf.zig	/^pub const RawTracepointAttr = extern struct {$/;"	struct
RayQueryKHR	$ZIGLIB/std/target/spirv.zig	/RayQueryKHR/;"	field
RayQueryProvisionalKHR	$ZIGLIB/std/target/spirv.zig	/RayQueryProvisionalKHR/;"	field
RayTracingKHR	$ZIGLIB/std/target/spirv.zig	/RayTracingKHR/;"	field
RayTracingNV	$ZIGLIB/std/target/spirv.zig	/RayTracingNV/;"	field
RayTracingProvisionalKHR	$ZIGLIB/std/target/spirv.zig	/RayTracingProvisionalKHR/;"	field
RayTraversalPrimitiveCullingKHR	$ZIGLIB/std/target/spirv.zig	/RayTraversalPrimitiveCullingKHR/;"	field
Reachable	$ZIGLIB/std/os/uefi/protocols/ip6_protocol.zig	/Reachable/;"	field
Read	$ZIGLIB/std/event/loop.zig	/pub const Read = struct {$/;"	struct
ReadBuffer	$ZIGLIB/std/os/linux/io_uring.zig	/pub const ReadBuffer = union(enum) {$/;"	union
ReadError	$ZIGLIB/std/os/uefi/protocols/file_protocol.zig	/pub const ReadError = error{ReadError}/;"	constant
ReadFile	$ZIGLIB/std/os/windows.zig	/^pub fn ReadFile(in_hFile: HANDLE, buffer: []u8, offset: ?u64, io_mode: std.io.ModeOverride) ReadFileError!usize {$/;"	function
ReadFileError	$ZIGLIB/std/os/windows.zig	/^pub const ReadFileError = error{$/;"	constant
ReadGroupId	$ZIGLIB/std/process.zig	/ReadGroupId/;"	field
ReadImageFileExecOptions	$ZIGLIB/std/os/windows.zig	/ReadImageFileExecOptions: BOOLEAN/;"	field
ReadLink	$ZIGLIB/std/os/windows.zig	/^pub fn ReadLink(dir: ?HANDLE, sub_path_w: []const u16, out_buffer: []u8) ReadLinkError![]u8 {$/;"	function
ReadLinkError	$ZIGLIB/std/os/windows.zig	/^pub const ReadLinkError = error{$/;"	constant
ReadLock	$ZIGLIB/std/event/rwlock.zig	/ReadLock/;"	field
ReadOnlySharedMemoryBase	$ZIGLIB/std/os/windows.zig	/ReadOnlySharedMemoryBase: PVOID/;"	field
ReadOnlyStaticServerData	$ZIGLIB/std/os/windows.zig	/ReadOnlyStaticServerData: *PVOID/;"	field
ReadUserId	$ZIGLIB/std/process.zig	/ReadUserId/;"	field
ReadV	$ZIGLIB/std/event/loop.zig	/pub const ReadV = struct {$/;"	struct
Reader	$ZIGLIB/std/os/uefi/protocols/file_protocol.zig	/pub const Reader = io.Reader(*const FileProtocol, ReadError, readFn)/;"	constant
RealPathError	$ZIGLIB/std/os.zig	/^pub const RealPathError = error{$/;"	constant
RebootCommand	$ZIGLIB/std/os.zig	/^pub const RebootCommand = switch (builtin.os.tag) {$/;"	constant
RebootError	$ZIGLIB/std/os.zig	/^pub const RebootError = error{$/;"	constant
ReceivingFlowspec	$ZIGLIB/std/os/windows/ws2_32.zig	/ReceivingFlowspec: FLOWSPEC/;"	field
Record	$ZIGLIB/std/coff.zig	/pub const Record = union(Tag) {$/;"	union
RecordKind	$ZIGLIB/std/pdb.zig	/RecordKind: SymbolKind/;"	field
RecordLen	$ZIGLIB/std/pdb.zig	/RecordLen: u16/;"	field
RecordPrefix	$ZIGLIB/std/pdb.zig	/^pub const RecordPrefix = extern struct {$/;"	struct
RecursionCount	$ZIGLIB/std/os/windows.zig	/RecursionCount: LONG/;"	field
RecvBuffer	$ZIGLIB/std/os/linux/io_uring.zig	/pub const RecvBuffer = union(enum) {$/;"	union
RecvFromError	$ZIGLIB/std/os.zig	/^pub const RecvFromError = error{$/;"	constant
ReduceOp	$ZIGLIB/std/builtin.zig	/^pub const ReduceOp = enum {$/;"	enum
RefAddr	$ZIGLIB/std/dwarf.zig	/RefAddr: u64/;"	field
RefType	$ZIGLIB/std/wasm.zig	/^pub const RefType = enum(u8) {$/;"	enum
ReferenceTest	$ZIGLIB/std/crypto/blake3.zig	/^const ReferenceTest = struct {$/;"	struct
ReferenceTestCase	$ZIGLIB/std/crypto/blake3.zig	/^const ReferenceTestCase = struct {$/;"	struct
RegF	$ZIGLIB/std/os/windows.zig	/RegF: u3/;"	field
RegI	$ZIGLIB/std/os/windows.zig	/RegI: u4/;"	field
RegionInfo	$ZIGLIB/std/os/darwin.zig	/pub const RegionInfo = struct {$/;"	struct
RegionSize	$ZIGLIB/std/os/windows.zig	/RegionSize: SIZE_T/;"	field
RegionSubmapInfo	$ZIGLIB/std/os/darwin.zig	/pub const RegionSubmapInfo = struct {$/;"	struct
RegisterArea	$ZIGLIB/std/os/windows.zig	/RegisterArea: [80]BYTE/;"	field
Rela	$ZIGLIB/std/elf.zig	/^pub const Rela = switch (@sizeOf(usize)) {$/;"	constant
RelativeOffsetRange	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/RelativeOffsetRange: *const RelativeOffsetRangeDevicePath/;"	field
RelativeOffsetRangeDevicePath	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/pub const RelativeOffsetRangeDevicePath = extern struct {$/;"	struct
RelativePathWasi	$ZIGLIB/std/os.zig	/^pub const RelativePathWasi = struct {$/;"	struct
Release	$ZIGLIB/std/builtin.zig	/Release/;"	field
ReleaseFast	$ZIGLIB/std/builtin.zig	/ReleaseFast/;"	field
ReleaseImpl	$ZIGLIB/std/Thread/Mutex.zig	/^const ReleaseImpl = if (builtin.single_threaded)$/;"	constant
ReleaseSafe	$ZIGLIB/std/builtin.zig	/ReleaseSafe/;"	field
ReleaseSmall	$ZIGLIB/std/builtin.zig	/ReleaseSmall/;"	field
RelocCrc	$ZIGLIB/std/pdb.zig	/RelocCrc: u32/;"	field
RelocOffset	$ZIGLIB/std/pdb.zig	/RelocOffset: u32/;"	field
RelocSegment	$ZIGLIB/std/pdb.zig	/RelocSegment: u16/;"	field
RemovalType	$ZIGLIB/std/array_hash_map.zig	/const RemovalType = enum {$/;"	enum
RemoveDirStep	$ZIGLIB/std/Build/RemoveDirStep.zig	/^const RemoveDirStep = @This()/;"	constant
RemoveDotDirsError	$ZIGLIB/std/os/windows.zig	/^pub const RemoveDotDirsError = error{TooManyParentDirs}/;"	constant
RenameError	$ZIGLIB/std/os.zig	/^pub const RenameError = error{$/;"	constant
RenderError	$ZIGLIB/std/zig/Ast.zig	/^pub const RenderError = error{$/;"	constant
RenderScript	$ZIGLIB/std/dwarf/LANG.zig	/^pub const RenderScript = 0x0024/;"	constant
ReparseDataLength	$ZIGLIB/std/os/windows.zig	/ReparseDataLength: USHORT/;"	field
ReparseTag	$ZIGLIB/std/os/windows.zig	/ReparseTag: ULONG/;"	field
ReplaceIfExists	$ZIGLIB/std/os/windows.zig	/ReplaceIfExists: BOOLEAN/;"	field
Request	$ZIGLIB/std/os/linux/ioctl.zig	/^pub const Request = packed struct {$/;"	struct
ResType	$ZIGLIB/std/zig/c_translation.zig	/const ResType = ArithmeticConversion(@TypeOf(a), @TypeOf(b))/;"	constant
Reserved	$ZIGLIB/std/os/windows.zig	/Reserved: u2/;"	field
Reserved0	$ZIGLIB/std/os/windows.zig	/Reserved0: [1]BOOLEAN/;"	field
Reserved1	$ZIGLIB/std/os/windows.zig	/Reserved1: [2]PVOID/;"	field
Reserved12	$ZIGLIB/std/os/windows.zig	/Reserved12: [2]UCHAR/;"	field
Reserved2	$ZIGLIB/std/os/windows.zig	/Reserved2: [399]PVOID/;"	field
Reserved3	$ZIGLIB/std/os/windows.zig	/Reserved3: [1952]u8/;"	field
Reserved4	$ZIGLIB/std/os/windows.zig	/Reserved4: [96]BYTE/;"	field
Reserved5	$ZIGLIB/std/os/windows.zig	/Reserved5: [3]PVOID/;"	field
Reserved6	$ZIGLIB/std/os/windows.zig	/Reserved6: [4]PVOID/;"	field
Reserved9	$ZIGLIB/std/os/windows.zig	/Reserved9: UCHAR/;"	field
ReservedForOle	$ZIGLIB/std/os/windows.zig	/ReservedForOle: PVOID/;"	field
ReservedMemoryType	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/ReservedMemoryType/;"	field
ReservedTickCountOverlay	$ZIGLIB/std/os/windows.zig	/ReservedTickCountOverlay: [3]ULONG/;"	field
Reset	$ZIGLIB/std/debug.zig	/Reset/;"	field
ResetCold	$ZIGLIB/std/os/uefi/tables/runtime_services.zig	/ResetCold/;"	field
ResetEvent	$ZIGLIB/std/Thread/ResetEvent.zig	/^const ResetEvent = @This()/;"	constant
ResetMode	$ZIGLIB/std/heap/arena_allocator.zig	/pub const ResetMode = union(enum) {$/;"	union
ResetPlatformSpecific	$ZIGLIB/std/os/uefi/tables/runtime_services.zig	/ResetPlatformSpecific/;"	field
ResetShutdown	$ZIGLIB/std/os/uefi/tables/runtime_services.zig	/ResetShutdown/;"	field
ResetType	$ZIGLIB/std/os/uefi/tables/runtime_services.zig	/^pub const ResetType = enum(u32) {$/;"	enum
ResetWarm	$ZIGLIB/std/os/uefi/tables/runtime_services.zig	/ResetWarm/;"	field
ResizeinplaceBlock	$ZIGLIB/std/valgrind.zig	/ResizeinplaceBlock = 4875/;"	field
ResolvConf	$ZIGLIB/std/net.zig	/^const ResolvConf = struct {$/;"	struct
ResourceFlags	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/pub const ResourceFlags = packed struct(u32) {$/;"	struct
Response	$ZIGLIB/std/http/Client.zig	/pub const Response = struct {$/;"	struct
Result	$ZIGLIB/std/zig/string_literal.zig	/^pub const Result = union(enum) {$/;"	union
ResultInt	$ZIGLIB/std/math.zig	/const ResultInt = std.meta.Int($/;"	constant
ResumeNode	$ZIGLIB/std/event/loop.zig	/pub const ResumeNode = struct {$/;"	struct
ReverseBitsTest	$ZIGLIB/std/compress/deflate/bits_utils.zig	/const ReverseBitsTest = struct {$/;"	struct
ReverseIterator	$ZIGLIB/std/mem.zig	/^fn ReverseIterator(comptime T: type) type {$/;"	function
Right	$ZIGLIB/std/os/windows.zig	/Right: SHORT/;"	field
RightShift	$ZIGLIB/std/rand/Sfc64.zig	/^const RightShift = 11/;"	constant
RiscV64	$ZIGLIB/std/os/linux/syscalls.zig	/^pub const RiscV64 = enum(usize) {$/;"	enum
Ristretto255	$ZIGLIB/std/crypto/25519/ristretto255.zig	/^pub const Ristretto255 = struct {$/;"	struct
RndGen	$ZIGLIB/compiler_rt/udivmodei4.zig	/const RndGen = std.rand.DefaultPrng/;"	constant
Role	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/const Role = enum(u8) {$/;"	enum
RomuTrio	$ZIGLIB/std/rand/RomuTrio.zig	/^const RomuTrio = @This()/;"	constant
RootDirectory	$ZIGLIB/std/os/windows.zig	/RootDirectory: ?HANDLE/;"	field
Rotation	$ZIGLIB/std/rand/Sfc64.zig	/^const Rotation = 24/;"	constant
RoundMode	$ZIGLIB/std/fmt/errol.zig	/^pub const RoundMode = enum {$/;"	enum
RoundParam	$ZIGLIB/std/crypto/sha1.zig	/^const RoundParam = struct {$/;"	struct
RoundParam256	$ZIGLIB/std/crypto/sha2.zig	/^const RoundParam256 = struct {$/;"	struct
RoundParam512	$ZIGLIB/std/crypto/sha2.zig	/^const RoundParam512 = struct {$/;"	struct
RoundToInfinityINTEL	$ZIGLIB/std/target/spirv.zig	/RoundToInfinityINTEL/;"	field
RoundingModeRTE	$ZIGLIB/std/target/spirv.zig	/RoundingModeRTE/;"	field
RoundingModeRTZ	$ZIGLIB/std/target/spirv.zig	/RoundingModeRTZ/;"	field
Rows	$ZIGLIB/std/crypto/blake3.zig	/const Rows = [4]Lane/;"	constant
RtlGenRandom	$ZIGLIB/std/os/windows/advapi32.zig	/^pub const RtlGenRandom = SystemFunction036/;"	constant
RtlGenRandomError	$ZIGLIB/std/os/windows.zig	/^pub const RtlGenRandomError = error{Unexpected}/;"	constant
RunStep	$ZIGLIB/std/Build/RunStep.zig	/^const RunStep = @This()/;"	constant
Runner	$ZIGLIB/std/Thread/RwLock.zig	/const Runner = struct {$/;"	struct
RunningOnValgrind	$ZIGLIB/std/valgrind.zig	/RunningOnValgrind = 4097/;"	field
RuntimeDescriptorArray	$ZIGLIB/std/target/spirv.zig	/RuntimeDescriptorArray/;"	field
RuntimeDescriptorArrayEXT	$ZIGLIB/std/target/spirv.zig	/RuntimeDescriptorArrayEXT/;"	field
RuntimeInfo	$ZIGLIB/std/os/windows.zig	/RuntimeInfo: UNICODE_STRING/;"	field
RuntimeServices	$ZIGLIB/std/os/uefi/tables/runtime_services.zig	/^pub const RuntimeServices = extern struct {$/;"	struct
RuntimeServicesCode	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/RuntimeServicesCode/;"	field
RuntimeServicesData	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/RuntimeServicesData/;"	field
Rust	$ZIGLIB/std/dwarf/LANG.zig	/^pub const Rust = 0x001c/;"	constant
RwLock	$ZIGLIB/std/event/rwlock.zig	/^pub const RwLock = struct {$/;"	struct
RwLocked	$ZIGLIB/std/event/rwlocked.zig	/^pub fn RwLocked(comptime T: type) type {$/;"	function
RxData	$ZIGLIB/std/os/uefi/protocols/udp6_protocol.zig	/RxData: *Udp6ReceiveData/;"	field
S370	$ZIGLIB/std/elf.zig	/S370 = 9/;"	field
S390	$ZIGLIB/std/elf.zig	/S390 = 22/;"	field
S390X	$ZIGLIB/std/os/linux.zig	/S390X = toAudit(.s390x)/;"	field
SAKHA	$ZIGLIB/std/os/windows/lang.zig	/^pub const SAKHA = 0x85/;"	constant
SAKHA_RUSSIA	$ZIGLIB/std/os/windows/sublang.zig	/^pub const SAKHA_RUSSIA = 0x01/;"	constant
SAME_DRIVE	$ZIGLIB/std/os/windows/win32error.zig	/SAME_DRIVE = 143/;"	field
SAME_SIZE	$ZIGLIB/std/coff.zig	/SAME_SIZE = 3/;"	field
SAMI	$ZIGLIB/std/os/windows/lang.zig	/^pub const SAMI = 0x3b/;"	constant
SAMI_INARI_FINLAND	$ZIGLIB/std/os/windows/sublang.zig	/^pub const SAMI_INARI_FINLAND = 0x09/;"	constant
SAMI_LULE_NORWAY	$ZIGLIB/std/os/windows/sublang.zig	/^pub const SAMI_LULE_NORWAY = 0x04/;"	constant
SAMI_LULE_SWEDEN	$ZIGLIB/std/os/windows/sublang.zig	/^pub const SAMI_LULE_SWEDEN = 0x05/;"	constant
SAMI_NORTHERN_FINLAND	$ZIGLIB/std/os/windows/sublang.zig	/^pub const SAMI_NORTHERN_FINLAND = 0x03/;"	constant
SAMI_NORTHERN_NORWAY	$ZIGLIB/std/os/windows/sublang.zig	/^pub const SAMI_NORTHERN_NORWAY = 0x01/;"	constant
SAMI_NORTHERN_SWEDEN	$ZIGLIB/std/os/windows/sublang.zig	/^pub const SAMI_NORTHERN_SWEDEN = 0x02/;"	constant
SAMI_SKOLT_FINLAND	$ZIGLIB/std/os/windows/sublang.zig	/^pub const SAMI_SKOLT_FINLAND = 0x08/;"	constant
SAMI_SOUTHERN_NORWAY	$ZIGLIB/std/os/windows/sublang.zig	/^pub const SAMI_SOUTHERN_NORWAY = 0x06/;"	constant
SAMI_SOUTHERN_SWEDEN	$ZIGLIB/std/os/windows/sublang.zig	/^pub const SAMI_SOUTHERN_SWEDEN = 0x07/;"	constant
SAMPLE	$ZIGLIB/std/os/linux.zig	/pub const SAMPLE = struct {$/;"	struct
SAM_INIT_FAILURE	$ZIGLIB/std/os/windows/ntstatus.zig	/SAM_INIT_FAILURE = 0xC00002E3/;"	field
SAM_NEED_BOOTKEY_FLOPPY	$ZIGLIB/std/os/windows/ntstatus.zig	/SAM_NEED_BOOTKEY_FLOPPY = 0xC00002E0/;"	field
SAM_NEED_BOOTKEY_PASSWORD	$ZIGLIB/std/os/windows/ntstatus.zig	/SAM_NEED_BOOTKEY_PASSWORD = 0xC00002DF/;"	field
SANSKRIT	$ZIGLIB/std/os/windows/lang.zig	/^pub const SANSKRIT = 0x4f/;"	constant
SANSKRIT_INDIA	$ZIGLIB/std/os/windows/sublang.zig	/^pub const SANSKRIT_INDIA = 0x01/;"	constant
SAP_FIELD_ABSENT	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const SAP_FIELD_ABSENT = 4294967294/;"	constant
SAP_FIELD_ANY	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const SAP_FIELD_ANY = 4294967295/;"	constant
SAP_FIELD_ANY_AESA_REST	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const SAP_FIELD_ANY_AESA_REST = 4294967291/;"	constant
SAP_FIELD_ANY_AESA_SEL	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const SAP_FIELD_ANY_AESA_SEL = 4294967290/;"	constant
SATEXPAK	$ZIGLIB/std/c/freebsd.zig	/pub const SATEXPAK = 64/;"	constant
SATMON	$ZIGLIB/std/c/freebsd.zig	/pub const SATMON = 69/;"	constant
SAVED_CUR	$ZIGLIB/std/os/linux.zig	/pub const SAVED_CUR = INFINITY/;"	constant
SAVED_IDS	$ZIGLIB/std/c/openbsd.zig	/pub const SAVED_IDS = 20/;"	constant
SAVED_MAX	$ZIGLIB/std/os/linux.zig	/pub const SAVED_MAX = INFINITY/;"	constant
SAVED_SYN	$ZIGLIB/std/os/linux.zig	/pub const SAVED_SYN = 28/;"	constant
SAVE_SYN	$ZIGLIB/std/os/linux.zig	/pub const SAVE_SYN = 27/;"	constant
SBM_ENABLE_ARROWS	$ZIGLIB/std/os/windows/user32.zig	/^pub const SBM_ENABLE_ARROWS = 0x00E4/;"	constant
SBM_GETPOS	$ZIGLIB/std/os/windows/user32.zig	/^pub const SBM_GETPOS = 0x00E1/;"	constant
SBM_GETRANGE	$ZIGLIB/std/os/windows/user32.zig	/^pub const SBM_GETRANGE = 0x00E3/;"	constant
SBM_GETSCROLLBARINFO	$ZIGLIB/std/os/windows/user32.zig	/^pub const SBM_GETSCROLLBARINFO = 0x00EB/;"	constant
SBM_GETSCROLLINFO	$ZIGLIB/std/os/windows/user32.zig	/^pub const SBM_GETSCROLLINFO = 0x00EA/;"	constant
SBM_SETPOS	$ZIGLIB/std/os/windows/user32.zig	/^pub const SBM_SETPOS = 0x00E0/;"	constant
SBM_SETRANGE	$ZIGLIB/std/os/windows/user32.zig	/^pub const SBM_SETRANGE = 0x00E2/;"	constant
SBM_SETRANGEREDRAW	$ZIGLIB/std/os/windows/user32.zig	/^pub const SBM_SETRANGEREDRAW = 0x00E6/;"	constant
SBM_SETSCROLLINFO	$ZIGLIB/std/os/windows/user32.zig	/^pub const SBM_SETSCROLLINFO = 0x00E9/;"	constant
SBSIZE	$ZIGLIB/std/c/netbsd.zig	/SBSIZE = 9/;"	field
SB_GETBORDERS	$ZIGLIB/std/os/windows/user32.zig	/^pub const SB_GETBORDERS = 0x0407/;"	constant
SB_GETICON	$ZIGLIB/std/os/windows/user32.zig	/^pub const SB_GETICON = 0x0414/;"	constant
SB_GETPARTS	$ZIGLIB/std/os/windows/user32.zig	/^pub const SB_GETPARTS = 0x0406/;"	constant
SB_GETRECT	$ZIGLIB/std/os/windows/user32.zig	/^pub const SB_GETRECT = 0x040A/;"	constant
SB_GETTEXTA	$ZIGLIB/std/os/windows/user32.zig	/^pub const SB_GETTEXTA = 0x0402/;"	constant
SB_GETTEXTLENGTHA	$ZIGLIB/std/os/windows/user32.zig	/^pub const SB_GETTEXTLENGTHA = 0x0403/;"	constant
SB_GETTEXTLENGTHW	$ZIGLIB/std/os/windows/user32.zig	/^pub const SB_GETTEXTLENGTHW = 0x040C/;"	constant
SB_GETTEXTW	$ZIGLIB/std/os/windows/user32.zig	/^pub const SB_GETTEXTW = 0x040D/;"	constant
SB_GETTIPTEXTA	$ZIGLIB/std/os/windows/user32.zig	/^pub const SB_GETTIPTEXTA = 0x0412/;"	constant
SB_GETTIPTEXTW	$ZIGLIB/std/os/windows/user32.zig	/^pub const SB_GETTIPTEXTW = 0x0413/;"	constant
SB_ISSIMPLE	$ZIGLIB/std/os/windows/user32.zig	/^pub const SB_ISSIMPLE = 0x040E/;"	constant
SB_SETICON	$ZIGLIB/std/os/windows/user32.zig	/^pub const SB_SETICON = 0x040F/;"	constant
SB_SETMINHEIGHT	$ZIGLIB/std/os/windows/user32.zig	/^pub const SB_SETMINHEIGHT = 0x0408/;"	constant
SB_SETPARTS	$ZIGLIB/std/os/windows/user32.zig	/^pub const SB_SETPARTS = 0x0404/;"	constant
SB_SETTEXTA	$ZIGLIB/std/os/windows/user32.zig	/^pub const SB_SETTEXTA = 0x0401/;"	constant
SB_SETTEXTW	$ZIGLIB/std/os/windows/user32.zig	/^pub const SB_SETTEXTW = 0x040B/;"	constant
SB_SETTIPTEXTA	$ZIGLIB/std/os/windows/user32.zig	/^pub const SB_SETTIPTEXTA = 0x0410/;"	constant
SB_SETTIPTEXTW	$ZIGLIB/std/os/windows/user32.zig	/^pub const SB_SETTIPTEXTW = 0x0411/;"	constant
SB_SIMPLE	$ZIGLIB/std/os/windows/user32.zig	/^pub const SB_SIMPLE = 0x0409/;"	constant
SCCSP	$ZIGLIB/std/c/freebsd.zig	/pub const SCCSP = 96/;"	constant
SCHEMA_ATTRIBUTES	$ZIGLIB/std/os/darwin/cssm.zig	/SCHEMA_ATTRIBUTES = DB_RECORDTYPE_SCHEMA_START + 2/;"	field
SCHEMA_INDEXES	$ZIGLIB/std/os/darwin/cssm.zig	/SCHEMA_INDEXES = DB_RECORDTYPE_SCHEMA_START + 1/;"	field
SCHEMA_INFO	$ZIGLIB/std/os/darwin/cssm.zig	/SCHEMA_INFO = DB_RECORDTYPE_SCHEMA_START + 0/;"	field
SCHEMA_PARSING_MODULE	$ZIGLIB/std/os/darwin/cssm.zig	/SCHEMA_PARSING_MODULE = DB_RECORDTYPE_SCHEMA_START + 3/;"	field
SCLUSTER	$ZIGLIB/std/c/freebsd.zig	/pub const SCLUSTER = 34/;"	constant
SCOPE_NOT_FOUND	$ZIGLIB/std/os/windows/win32error.zig	/SCOPE_NOT_FOUND = 318/;"	field
SCORE7	$ZIGLIB/std/elf.zig	/SCORE7 = 135/;"	field
SCOTTISH_GAELIC	$ZIGLIB/std/os/windows/sublang.zig	/^pub const SCOTTISH_GAELIC = 0x01/;"	constant
SCREEN_ALREADY_LOCKED	$ZIGLIB/std/os/windows/win32error.zig	/SCREEN_ALREADY_LOCKED = 1440/;"	field
SCRUB_DATA_DISABLED	$ZIGLIB/std/os/windows/win32error.zig	/SCRUB_DATA_DISABLED = 332/;"	field
SCSITRANSPORT	$ZIGLIB/std/os/linux.zig	/pub const SCSITRANSPORT = 18/;"	constant
SCTP	$ZIGLIB/std/os/linux.zig	/pub const SCTP = 132/;"	constant
SDRP	$ZIGLIB/std/c/freebsd.zig	/pub const SDRP = 42/;"	constant
SD_BOTH	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const SD_BOTH = 2/;"	constant
SD_RECEIVE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const SD_RECEIVE = 0/;"	constant
SD_SEND	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const SD_SEND = 1/;"	constant
SEAL_GROW	$ZIGLIB/std/c/freebsd.zig	/pub const SEAL_GROW = 0x0004/;"	constant
SEAL_SEAL	$ZIGLIB/std/c/freebsd.zig	/pub const SEAL_SEAL = 0x0001/;"	constant
SEAL_SHRINK	$ZIGLIB/std/c/freebsd.zig	/pub const SEAL_SHRINK = 0x0002/;"	constant
SEAL_WRITE	$ZIGLIB/std/c/freebsd.zig	/pub const SEAL_WRITE = 0x0008/;"	constant
SEARCH	$ZIGLIB/std/c/wasi.zig	/pub const SEARCH = (0x08000000)/;"	constant
SEARCH_ALIAS	$ZIGLIB/std/coff.zig	/SEARCH_ALIAS = 3/;"	field
SEARCH_LIBRARY	$ZIGLIB/std/coff.zig	/SEARCH_LIBRARY = 2/;"	field
SEARCH_NOLIBRARY	$ZIGLIB/std/coff.zig	/SEARCH_NOLIBRARY = 1/;"	field
SECATTR	$ZIGLIB/std/c/solaris.zig	/pub const SECATTR = 0x1011/;"	constant
SECBIT_KEEP_CAPS	$ZIGLIB/std/os/linux.zig	/^pub const SECBIT_KEEP_CAPS = issecure_mask(SECURE_KEEP_CAPS)/;"	constant
SECBIT_KEEP_CAPS_LOCKED	$ZIGLIB/std/os/linux.zig	/^pub const SECBIT_KEEP_CAPS_LOCKED = issecure_mask(SECURE_KEEP_CAPS_LOCKED)/;"	constant
SECBIT_NOROOT	$ZIGLIB/std/os/linux.zig	/^pub const SECBIT_NOROOT = issecure_mask(SECURE_NOROOT)/;"	constant
SECBIT_NOROOT_LOCKED	$ZIGLIB/std/os/linux.zig	/^pub const SECBIT_NOROOT_LOCKED = issecure_mask(SECURE_NOROOT_LOCKED)/;"	constant
SECBIT_NO_CAP_AMBIENT_RAISE	$ZIGLIB/std/os/linux.zig	/^pub const SECBIT_NO_CAP_AMBIENT_RAISE = issecure_mask(SECURE_NO_CAP_AMBIENT_RAISE)/;"	constant
SECBIT_NO_CAP_AMBIENT_RAISE_LOCKED	$ZIGLIB/std/os/linux.zig	/^pub const SECBIT_NO_CAP_AMBIENT_RAISE_LOCKED = issecure_mask(SECURE_NO_CAP_AMBIENT_RAISE_LOCKED)/;"	constant
SECBIT_NO_SETUID_FIXUP	$ZIGLIB/std/os/linux.zig	/^pub const SECBIT_NO_SETUID_FIXUP = issecure_mask(SECURE_NO_SETUID_FIXUP)/;"	constant
SECBIT_NO_SETUID_FIXUP_LOCKED	$ZIGLIB/std/os/linux.zig	/^pub const SECBIT_NO_SETUID_FIXUP_LOCKED = issecure_mask(SECURE_NO_SETUID_FIXUP_LOCKED)/;"	constant
SECOND	$ZIGLIB/std/c/freebsd.zig	/pub const SECOND = 13/;"	constant
SECOND_LEVEL_ADDRESS_TRANSLATION	$ZIGLIB/std/os/windows.zig	/SECOND_LEVEL_ADDRESS_TRANSLATION = 20/;"	field
SECRET_TOO_LONG	$ZIGLIB/std/os/windows/win32error.zig	/SECRET_TOO_LONG = 1382/;"	field
SECTION	$ZIGLIB/std/coff.zig	/SECTION = 104/;"	field
SECTION_ATTRIBUTES	$ZIGLIB/std/macho.zig	/^pub const SECTION_ATTRIBUTES = 0xffffff00/;"	constant
SECTION_NOT_EXTENDED	$ZIGLIB/std/os/windows/ntstatus.zig	/SECTION_NOT_EXTENDED = 0xC0000087/;"	field
SECTION_NOT_IMAGE	$ZIGLIB/std/os/windows/ntstatus.zig	/SECTION_NOT_IMAGE = 0xC0000049/;"	field
SECTION_PROTECTION	$ZIGLIB/std/os/windows/ntstatus.zig	/SECTION_PROTECTION = 0xC000004E/;"	field
SECTION_TOO_BIG	$ZIGLIB/std/os/windows/ntstatus.zig	/SECTION_TOO_BIG = 0xC0000040/;"	field
SECTION_TYPE	$ZIGLIB/std/macho.zig	/^pub const SECTION_TYPE = 0x000000ff/;"	constant
SECTOR_NOT_FOUND	$ZIGLIB/std/os/windows/win32error.zig	/SECTOR_NOT_FOUND = 27/;"	field
SECURE	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const SECURE = 32768/;"	constant
SECUREBITS_DEFAULT	$ZIGLIB/std/os/linux.zig	/^pub const SECUREBITS_DEFAULT = 0x00000000/;"	constant
SECURELVL	$ZIGLIB/std/c/openbsd.zig	/pub const SECURELVL = 9/;"	constant
SECURE_ALL_BITS	$ZIGLIB/std/os/linux.zig	/^pub const SECURE_ALL_BITS = issecure_mask(SECURE_NOROOT) |$/;"	constant
SECURE_ALL_LOCKS	$ZIGLIB/std/os/linux.zig	/^pub const SECURE_ALL_LOCKS = SECURE_ALL_BITS << 1/;"	constant
SECURE_KEEP_CAPS	$ZIGLIB/std/os/linux.zig	/^pub const SECURE_KEEP_CAPS = 4/;"	constant
SECURE_KEEP_CAPS_LOCKED	$ZIGLIB/std/os/linux.zig	/^pub const SECURE_KEEP_CAPS_LOCKED = 5/;"	constant
SECURE_NOROOT	$ZIGLIB/std/os/linux.zig	/^pub const SECURE_NOROOT = 0/;"	constant
SECURE_NOROOT_LOCKED	$ZIGLIB/std/os/linux.zig	/^pub const SECURE_NOROOT_LOCKED = 1/;"	constant
SECURE_NO_CAP_AMBIENT_RAISE	$ZIGLIB/std/os/linux.zig	/^pub const SECURE_NO_CAP_AMBIENT_RAISE = 6/;"	constant
SECURE_NO_CAP_AMBIENT_RAISE_LOCKED	$ZIGLIB/std/os/linux.zig	/^pub const SECURE_NO_CAP_AMBIENT_RAISE_LOCKED = 7/;"	constant
SECURE_NO_SETUID_FIXUP	$ZIGLIB/std/os/linux.zig	/^pub const SECURE_NO_SETUID_FIXUP = 2/;"	constant
SECURE_NO_SETUID_FIXUP_LOCKED	$ZIGLIB/std/os/linux.zig	/^pub const SECURE_NO_SETUID_FIXUP_LOCKED = 3/;"	constant
SECURITY	$ZIGLIB/std/os/linux.zig	/pub const SECURITY = 14/;"	constant
SECURITY_ATTRIBUTES	$ZIGLIB/std/os/windows.zig	/^pub const SECURITY_ATTRIBUTES = extern struct {$/;"	struct
SECURITY_AUTHENTICATION	$ZIGLIB/std/os/linux.zig	/pub const SECURITY_AUTHENTICATION = 22/;"	constant
SECURITY_ENCRYPTION_NETWORK	$ZIGLIB/std/os/linux.zig	/pub const SECURITY_ENCRYPTION_NETWORK = 24/;"	constant
SECURITY_ENCRYPTION_TRANSPORT	$ZIGLIB/std/os/linux.zig	/pub const SECURITY_ENCRYPTION_TRANSPORT = 23/;"	constant
SECURITY_PROTOCOL_NONE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const SECURITY_PROTOCOL_NONE = 0/;"	constant
SECURITY_STREAM_IS_INCONSISTENT	$ZIGLIB/std/os/windows/win32error.zig	/SECURITY_STREAM_IS_INCONSISTENT = 306/;"	field
SEEK	$ZIGLIB/std/os/windows/win32error.zig	/SEEK = 25/;"	field
SEEK_ON_DEVICE	$ZIGLIB/std/os/windows/win32error.zig	/SEEK_ON_DEVICE = 132/;"	field
SEGATTACH	$ZIGLIB/std/os/plan9.zig	/SEGATTACH = 30/;"	field
SEGBRK	$ZIGLIB/std/os/plan9.zig	/SEGBRK = 12/;"	field
SEGDETACH	$ZIGLIB/std/os/plan9.zig	/SEGDETACH = 31/;"	field
SEGFLUSH	$ZIGLIB/std/os/plan9.zig	/SEGFLUSH = 33/;"	field
SEGFREE	$ZIGLIB/std/os/plan9.zig	/SEGFREE = 32/;"	field
SEGMENT	$ZIGLIB/std/macho.zig	/SEGMENT = 0x1/;"	field
SEGMENT_64	$ZIGLIB/std/macho.zig	/SEGMENT_64 = 0x19/;"	field
SEGMENT_NOTIFICATION	$ZIGLIB/std/os/windows/win32error.zig	/SEGMENT_NOTIFICATION = 702/;"	field
SEGMENT_SPLIT_INFO	$ZIGLIB/std/macho.zig	/SEGMENT_SPLIT_INFO = 0x1e/;"	field
SEGV	$ZIGLIB/std/os/linux.zig	/pub const SEGV = 11/;"	constant
SEHValidationPolicy	$ZIGLIB/std/os/windows.zig	/SEHValidationPolicy: u2/;"	field
SELECT_ERR_QUEUE	$ZIGLIB/std/os/linux.zig	/pub const SELECT_ERR_QUEUE = 45/;"	constant
SELF	$ZIGLIB/std/os/linux.zig	/pub const SELF = 0/;"	constant
SELINUX	$ZIGLIB/std/os/linux.zig	/pub const SELINUX = 7/;"	constant
SEM2_WAIT	$ZIGLIB/std/c/freebsd.zig	/SEM2_WAIT = 23/;"	field
SEM2_WAKE	$ZIGLIB/std/c/freebsd.zig	/SEM2_WAKE = 24/;"	field
SEMACQUIRE	$ZIGLIB/std/os/plan9.zig	/SEMACQUIRE = 37/;"	field
SEMAPHORE	$ZIGLIB/std/os/linux.zig	/pub const SEMAPHORE = 1/;"	constant
SEMAPHORE_DESTROYED	$ZIGLIB/std/c/darwin.zig	/SEMAPHORE_DESTROYED = 42/;"	field
SEMAPHORE_LIMIT_EXCEEDED	$ZIGLIB/std/os/windows/ntstatus.zig	/SEMAPHORE_LIMIT_EXCEEDED = 0xC0000047/;"	field
SEMINFO	$ZIGLIB/std/c/openbsd.zig	/pub const SEMINFO = 61/;"	constant
SEMRELEASE	$ZIGLIB/std/os/plan9.zig	/SEMRELEASE = 38/;"	field
SEM_IS_SET	$ZIGLIB/std/os/windows/win32error.zig	/SEM_IS_SET = 102/;"	field
SEM_NOT_FOUND	$ZIGLIB/std/os/windows/win32error.zig	/SEM_NOT_FOUND = 187/;"	field
SEM_OWNER_DIED	$ZIGLIB/std/os/windows/win32error.zig	/SEM_OWNER_DIED = 105/;"	field
SEM_TIMEOUT	$ZIGLIB/std/os/windows/win32error.zig	/SEM_TIMEOUT = 121/;"	field
SEM_USER_LIMIT	$ZIGLIB/std/os/windows/win32error.zig	/SEM_USER_LIMIT = 106/;"	field
SEM_WAIT	$ZIGLIB/std/c/freebsd.zig	/SEM_WAIT = 19/;"	field
SEM_WAKE	$ZIGLIB/std/c/freebsd.zig	/SEM_WAKE = 20/;"	field
SEND	$ZIGLIB/std/os/linux/seccomp.zig	/pub const SEND = IOCTL.IOWR('!', 1, notif_resp)/;"	constant
SENDER_DEFAULT_LATE_JOINER_PERCENTAGE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const SENDER_DEFAULT_LATE_JOINER_PERCENTAGE = 0/;"	constant
SENDER_DEFAULT_RATE_KBITS_PER_SEC	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const SENDER_DEFAULT_RATE_KBITS_PER_SEC = 56/;"	constant
SENDER_DEFAULT_WINDOW_ADV_PERCENTAGE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const SENDER_DEFAULT_WINDOW_ADV_PERCENTAGE = 15/;"	constant
SENDER_MAX_LATE_JOINER_PERCENTAGE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const SENDER_MAX_LATE_JOINER_PERCENTAGE = 75/;"	constant
SENDMSG	$ZIGLIB/std/os/linux.zig	/SENDMSG/;"	field
SEND_INTERRUPTED	$ZIGLIB/std/c/darwin.zig	/SEND_INTERRUPTED = 0x10000007/;"	field
SEND_INVALID_CONTEXT	$ZIGLIB/std/c/darwin.zig	/SEND_INVALID_CONTEXT = 0x10000012/;"	field
SEND_INVALID_DATA	$ZIGLIB/std/c/darwin.zig	/SEND_INVALID_DATA = 0x10000002/;"	field
SEND_INVALID_DEST	$ZIGLIB/std/c/darwin.zig	/SEND_INVALID_DEST = 0x10000003/;"	field
SEND_INVALID_HEADER	$ZIGLIB/std/c/darwin.zig	/SEND_INVALID_HEADER = 0x10000010/;"	field
SEND_INVALID_MEMORY	$ZIGLIB/std/c/darwin.zig	/SEND_INVALID_MEMORY = 0x1000000c/;"	field
SEND_INVALID_NOTIFY	$ZIGLIB/std/c/darwin.zig	/SEND_INVALID_NOTIFY = 0x1000000b/;"	field
SEND_INVALID_REPLY	$ZIGLIB/std/c/darwin.zig	/SEND_INVALID_REPLY = 0x10000009/;"	field
SEND_INVALID_RIGHT	$ZIGLIB/std/c/darwin.zig	/SEND_INVALID_RIGHT = 0x1000000a/;"	field
SEND_INVALID_RT_OOL_SIZE	$ZIGLIB/std/c/darwin.zig	/SEND_INVALID_RT_OOL_SIZE = 0x10000015/;"	field
SEND_INVALID_TRAILER	$ZIGLIB/std/c/darwin.zig	/SEND_INVALID_TRAILER = 0x10000011/;"	field
SEND_INVALID_TYPE	$ZIGLIB/std/c/darwin.zig	/SEND_INVALID_TYPE = 0x1000000f/;"	field
SEND_INVALID_VOUCHER	$ZIGLIB/std/c/darwin.zig	/SEND_INVALID_VOUCHER = 0x10000005/;"	field
SEND_IN_PROGRESS	$ZIGLIB/std/c/darwin.zig	/SEND_IN_PROGRESS = 0x10000001/;"	field
SEND_MSG_FILTERED	$ZIGLIB/std/c/darwin.zig	/SEND_MSG_FILTERED = 0x10000017/;"	field
SEND_MSG_TOO_SMALL	$ZIGLIB/std/c/darwin.zig	/SEND_MSG_TOO_SMALL = 0x10000008/;"	field
SEND_NO_BUFFER	$ZIGLIB/std/c/darwin.zig	/SEND_NO_BUFFER = 0x1000000d/;"	field
SEND_NO_GRANT_DEST	$ZIGLIB/std/c/darwin.zig	/SEND_NO_GRANT_DEST = 0x10000016/;"	field
SEND_ONCE	$ZIGLIB/std/c/darwin.zig	/SEND_ONCE = 2/;"	field
SEND_TIMED_OUT	$ZIGLIB/std/c/darwin.zig	/SEND_TIMED_OUT = 0x10000004/;"	field
SEND_TOO_LARGE	$ZIGLIB/std/c/darwin.zig	/SEND_TOO_LARGE = 0x1000000e/;"	field
SEQPACKET	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const SEQPACKET = 5/;"	constant
SEQUENTIAL	$ZIGLIB/std/os/linux.zig	/pub const SEQUENTIAL = 2/;"	constant
SERBIAN	$ZIGLIB/std/os/windows/lang.zig	/^pub const SERBIAN = 0x1a/;"	constant
SERBIAN_BOSNIA_HERZEGOVINA_CYRILLIC	$ZIGLIB/std/os/windows/sublang.zig	/^pub const SERBIAN_BOSNIA_HERZEGOVINA_CYRILLIC = 0x07/;"	constant
SERBIAN_BOSNIA_HERZEGOVINA_LATIN	$ZIGLIB/std/os/windows/sublang.zig	/^pub const SERBIAN_BOSNIA_HERZEGOVINA_LATIN = 0x06/;"	constant
SERBIAN_CROATIA	$ZIGLIB/std/os/windows/sublang.zig	/^pub const SERBIAN_CROATIA = 0x01/;"	constant
SERBIAN_CYRILLIC	$ZIGLIB/std/os/windows/sublang.zig	/^pub const SERBIAN_CYRILLIC = 0x03/;"	constant
SERBIAN_LATIN	$ZIGLIB/std/os/windows/sublang.zig	/^pub const SERBIAN_LATIN = 0x02/;"	constant
SERBIAN_MONTENEGRO_CYRILLIC	$ZIGLIB/std/os/windows/sublang.zig	/^pub const SERBIAN_MONTENEGRO_CYRILLIC = 0x0c/;"	constant
SERBIAN_MONTENEGRO_LATIN	$ZIGLIB/std/os/windows/sublang.zig	/^pub const SERBIAN_MONTENEGRO_LATIN = 0x0b/;"	constant
SERBIAN_NEUTRAL	$ZIGLIB/std/os/windows/lang.zig	/^pub const SERBIAN_NEUTRAL = 0x7c1a/;"	constant
SERBIAN_SERBIA_CYRILLIC	$ZIGLIB/std/os/windows/sublang.zig	/^pub const SERBIAN_SERBIA_CYRILLIC = 0x0a/;"	constant
SERBIAN_SERBIA_LATIN	$ZIGLIB/std/os/windows/sublang.zig	/^pub const SERBIAN_SERBIA_LATIN = 0x09/;"	constant
SERIAL_COUNTER_TIMEOUT	$ZIGLIB/std/os/windows/ntstatus.zig	/SERIAL_COUNTER_TIMEOUT = 0x4000000C/;"	field
SERIAL_MORE_WRITES	$ZIGLIB/std/os/windows/ntstatus.zig	/SERIAL_MORE_WRITES = 0x40000008/;"	field
SERIAL_NO_DEVICE	$ZIGLIB/std/os/windows/win32error.zig	/SERIAL_NO_DEVICE = 1118/;"	field
SERIAL_NO_DEVICE_INITED	$ZIGLIB/std/os/windows/ntstatus.zig	/SERIAL_NO_DEVICE_INITED = 0xC0000150/;"	field
SERVER_DISABLED	$ZIGLIB/std/os/windows/win32error.zig	/SERVER_DISABLED = 1341/;"	field
SERVER_HAS_OPEN_HANDLES	$ZIGLIB/std/os/windows/win32error.zig	/SERVER_HAS_OPEN_HANDLES = 1811/;"	field
SERVER_NOT_DISABLED	$ZIGLIB/std/os/windows/win32error.zig	/SERVER_NOT_DISABLED = 1342/;"	field
SERVER_SHUTDOWN_IN_PROGRESS	$ZIGLIB/std/os/windows/win32error.zig	/SERVER_SHUTDOWN_IN_PROGRESS = 1255/;"	field
SERVER_SID_MISMATCH	$ZIGLIB/std/os/windows/win32error.zig	/SERVER_SID_MISMATCH = 628/;"	field
SERVER_UNAVAILABLE	$ZIGLIB/std/os/windows/ntstatus.zig	/SERVER_UNAVAILABLE = 0xC0000466/;"	field
SERVICE	$ZIGLIB/std/c/solaris.zig	/SERVICE = 9/;"	field
SERVICE_ADDRESS_FLAG_RPC_CN	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const SERVICE_ADDRESS_FLAG_RPC_CN = 1/;"	constant
SERVICE_ADDRESS_FLAG_RPC_DG	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const SERVICE_ADDRESS_FLAG_RPC_DG = 2/;"	constant
SERVICE_ADDRESS_FLAG_RPC_NB	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const SERVICE_ADDRESS_FLAG_RPC_NB = 4/;"	constant
SERVICE_ALREADY_RUNNING	$ZIGLIB/std/os/windows/win32error.zig	/SERVICE_ALREADY_RUNNING = 1056/;"	field
SERVICE_ASYNC_INFO	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const SERVICE_ASYNC_INFO = extern struct {$/;"	struct
SERVICE_CANNOT_ACCEPT_CTRL	$ZIGLIB/std/os/windows/win32error.zig	/SERVICE_CANNOT_ACCEPT_CTRL = 1061/;"	field
SERVICE_DATABASE_LOCKED	$ZIGLIB/std/os/windows/win32error.zig	/SERVICE_DATABASE_LOCKED = 1055/;"	field
SERVICE_DEPENDENCY_DELETED	$ZIGLIB/std/os/windows/win32error.zig	/SERVICE_DEPENDENCY_DELETED = 1075/;"	field
SERVICE_DEPENDENCY_FAIL	$ZIGLIB/std/os/windows/win32error.zig	/SERVICE_DEPENDENCY_FAIL = 1068/;"	field
SERVICE_DISABLED	$ZIGLIB/std/os/windows/win32error.zig	/SERVICE_DISABLED = 1058/;"	field
SERVICE_DOES_NOT_EXIST	$ZIGLIB/std/os/windows/win32error.zig	/SERVICE_DOES_NOT_EXIST = 1060/;"	field
SERVICE_EXISTS	$ZIGLIB/std/os/windows/win32error.zig	/SERVICE_EXISTS = 1073/;"	field
SERVICE_FLAG_DEFER	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const SERVICE_FLAG_DEFER = 1/;"	constant
SERVICE_FLAG_HARD	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const SERVICE_FLAG_HARD = 2/;"	constant
SERVICE_LOCAL	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const SERVICE_LOCAL = 4/;"	constant
SERVICE_LOGON_FAILED	$ZIGLIB/std/os/windows/win32error.zig	/SERVICE_LOGON_FAILED = 1069/;"	field
SERVICE_MARKED_FOR_DELETE	$ZIGLIB/std/os/windows/win32error.zig	/SERVICE_MARKED_FOR_DELETE = 1072/;"	field
SERVICE_MULTIPLE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const SERVICE_MULTIPLE = 1/;"	constant
SERVICE_NEVER_STARTED	$ZIGLIB/std/os/windows/win32error.zig	/SERVICE_NEVER_STARTED = 1077/;"	field
SERVICE_NOTIFICATION	$ZIGLIB/std/os/windows/win32error.zig	/SERVICE_NOTIFICATION = 716/;"	field
SERVICE_NOTIFY_CLIENT_LAGGING	$ZIGLIB/std/os/windows/win32error.zig	/SERVICE_NOTIFY_CLIENT_LAGGING = 1294/;"	field
SERVICE_NOT_ACTIVE	$ZIGLIB/std/os/windows/win32error.zig	/SERVICE_NOT_ACTIVE = 1062/;"	field
SERVICE_NOT_FOUND	$ZIGLIB/std/os/windows/win32error.zig	/SERVICE_NOT_FOUND = 1243/;"	field
SERVICE_NOT_IN_EXE	$ZIGLIB/std/os/windows/win32error.zig	/SERVICE_NOT_IN_EXE = 1083/;"	field
SERVICE_NO_THREAD	$ZIGLIB/std/os/windows/win32error.zig	/SERVICE_NO_THREAD = 1054/;"	field
SERVICE_REQUEST_TIMEOUT	$ZIGLIB/std/os/windows/win32error.zig	/SERVICE_REQUEST_TIMEOUT = 1053/;"	field
SERVICE_RESOURCE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const SERVICE_RESOURCE = 1/;"	constant
SERVICE_SERVICE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const SERVICE_SERVICE = 2/;"	constant
SERVICE_SPECIFIC_ERROR	$ZIGLIB/std/os/windows/win32error.zig	/SERVICE_SPECIFIC_ERROR = 1066/;"	field
SERVICE_START_HANG	$ZIGLIB/std/os/windows/win32error.zig	/SERVICE_START_HANG = 1070/;"	field
SESSION	$ZIGLIB/std/c/solaris.zig	/SESSION = 4/;"	field
SESSION_CREDENTIAL_CONFLICT	$ZIGLIB/std/os/windows/win32error.zig	/SESSION_CREDENTIAL_CONFLICT = 1219/;"	field
SETBACKINGSTORE	$ZIGLIB/std/c/darwin.zig	/pub const SETBACKINGSTORE = 70/;"	constant
SETCONTEXT	$ZIGLIB/std/c/solaris.zig	/^pub const SETCONTEXT = 1/;"	constant
SETCOUNT_ON_BAD_LB	$ZIGLIB/std/os/windows/win32error.zig	/SETCOUNT_ON_BAD_LB = 1433/;"	field
SETENV	$ZIGLIB/std/c/openbsd.zig	/pub const SETENV = "setenv"/;"	constant
SETFCAP	$ZIGLIB/std/os/linux.zig	/pub const SETFCAP = 31/;"	constant
SETFD	$ZIGLIB/std/os/linux/x86_64.zig	/pub const SETFD = 2/;"	constant
SETFIB	$ZIGLIB/std/c/freebsd.zig	/pub const SETFIB = 0x1014/;"	constant
SETFL	$ZIGLIB/std/os/linux/x86_64.zig	/pub const SETFL = 4/;"	constant
SETGID	$ZIGLIB/std/os/linux.zig	/pub const SETGID = 6/;"	constant
SETLK	$ZIGLIB/std/os/linux/x86_64.zig	/pub const SETLK = 6/;"	constant
SETLKW	$ZIGLIB/std/os/linux/x86_64.zig	/pub const SETLKW = 7/;"	constant
SETLKWTIMEOUT	$ZIGLIB/std/c/darwin.zig	/pub const SETLKWTIMEOUT = 10/;"	constant
SETLK_REMOTE	$ZIGLIB/std/c/freebsd.zig	/pub const SETLK_REMOTE = 14/;"	constant
SETMAP	$ZIGLIB/std/c/dragonfly.zig	/pub const SETMAP = 11/;"	constant
SETMARK_DETECTED	$ZIGLIB/std/os/windows/win32error.zig	/SETMARK_DETECTED = 1103/;"	field
SETMASK	$ZIGLIB/std/os/linux.zig	/pub const SETMASK = 4/;"	constant
SETNOSIGPIPE	$ZIGLIB/std/c/netbsd.zig	/pub const SETNOSIGPIPE = 14/;"	constant
SETOWN	$ZIGLIB/std/os/linux/x86_64.zig	/pub const SETOWN = 8/;"	constant
SETOWN_EX	$ZIGLIB/std/os/linux/x86_64.zig	/pub const SETOWN_EX = 15/;"	constant
SETPCAP	$ZIGLIB/std/os/linux.zig	/pub const SETPCAP = 8/;"	constant
SETPROTECTIONCLASS	$ZIGLIB/std/c/darwin.zig	/pub const SETPROTECTIONCLASS = 64/;"	constant
SETSIG	$ZIGLIB/std/os/linux/x86_64.zig	/pub const SETSIG = 10/;"	constant
SETSIZE	$ZIGLIB/std/c/darwin.zig	/pub const SETSIZE = 43/;"	constant
SETTLS	$ZIGLIB/std/os/linux.zig	/pub const SETTLS = 0x00080000/;"	constant
SETUGID	$ZIGLIB/std/c/solaris.zig	/pub const SETUGID = 0x00000001/;"	constant
SETUID	$ZIGLIB/std/os/linux.zig	/pub const SETUID = 7/;"	constant
SETUSTACK	$ZIGLIB/std/c/solaris.zig	/^pub const SETUSTACK = 3/;"	constant
SET_BPF	$ZIGLIB/std/os/linux.zig	/pub const SET_BPF = 1074013192/;"	constant
SET_CEILING	$ZIGLIB/std/c/freebsd.zig	/SET_CEILING = 7/;"	field
SET_CHILD_SUBREAPER	$ZIGLIB/std/os/linux.zig	/SET_CHILD_SUBREAPER = 36/;"	field
SET_DUMPABLE	$ZIGLIB/std/os/linux.zig	/SET_DUMPABLE = 4/;"	field
SET_ENDIAN	$ZIGLIB/std/os/linux.zig	/SET_ENDIAN = 20/;"	field
SET_FILTER	$ZIGLIB/std/os/linux.zig	/pub const SET_FILTER = 1074275334/;"	constant
SET_FPEMU	$ZIGLIB/std/os/linux.zig	/SET_FPEMU = 10/;"	field
SET_FPEXC	$ZIGLIB/std/os/linux.zig	/SET_FPEXC = 12/;"	field
SET_FP_MODE	$ZIGLIB/std/os/linux.zig	/SET_FP_MODE = 45/;"	field
SET_FS	$ZIGLIB/std/os/linux/x86_64.zig	/pub const SET_FS = 0x1002/;"	constant
SET_GS	$ZIGLIB/std/os/linux/x86_64.zig	/pub const SET_GS = 0x1001/;"	constant
SET_KEEPCAPS	$ZIGLIB/std/os/linux.zig	/SET_KEEPCAPS = 8/;"	field
SET_MM	$ZIGLIB/std/os/linux.zig	/SET_MM = 35/;"	field
SET_MM_ARG_END	$ZIGLIB/std/os/linux.zig	/pub const SET_MM_ARG_END = 9/;"	constant
SET_MM_ARG_START	$ZIGLIB/std/os/linux.zig	/pub const SET_MM_ARG_START = 8/;"	constant
SET_MM_AUXV	$ZIGLIB/std/os/linux.zig	/pub const SET_MM_AUXV = 12/;"	constant
SET_MM_BRK	$ZIGLIB/std/os/linux.zig	/pub const SET_MM_BRK = 7/;"	constant
SET_MM_END_CODE	$ZIGLIB/std/os/linux.zig	/pub const SET_MM_END_CODE = 2/;"	constant
SET_MM_END_DATA	$ZIGLIB/std/os/linux.zig	/pub const SET_MM_END_DATA = 4/;"	constant
SET_MM_ENV_END	$ZIGLIB/std/os/linux.zig	/pub const SET_MM_ENV_END = 11/;"	constant
SET_MM_ENV_START	$ZIGLIB/std/os/linux.zig	/pub const SET_MM_ENV_START = 10/;"	constant
SET_MM_EXE_FILE	$ZIGLIB/std/os/linux.zig	/pub const SET_MM_EXE_FILE = 13/;"	constant
SET_MM_MAP	$ZIGLIB/std/os/linux.zig	/pub const SET_MM_MAP = 14/;"	constant
SET_MM_MAP_SIZE	$ZIGLIB/std/os/linux.zig	/pub const SET_MM_MAP_SIZE = 15/;"	constant
SET_MM_START_BRK	$ZIGLIB/std/os/linux.zig	/pub const SET_MM_START_BRK = 6/;"	constant
SET_MM_START_CODE	$ZIGLIB/std/os/linux.zig	/pub const SET_MM_START_CODE = 1/;"	constant
SET_MM_START_DATA	$ZIGLIB/std/os/linux.zig	/pub const SET_MM_START_DATA = 3/;"	constant
SET_MM_START_STACK	$ZIGLIB/std/os/linux.zig	/pub const SET_MM_START_STACK = 5/;"	constant
SET_MODE_FILTER	$ZIGLIB/std/os/linux/seccomp.zig	/^pub const SET_MODE_FILTER = 1/;"	constant
SET_MODE_STRICT	$ZIGLIB/std/os/linux/seccomp.zig	/^pub const SET_MODE_STRICT = 0/;"	constant
SET_NAME	$ZIGLIB/std/os/linux.zig	/SET_NAME = 15/;"	field
SET_NOT_FOUND	$ZIGLIB/std/os/windows/win32error.zig	/SET_NOT_FOUND = 1170/;"	field
SET_NO_NEW_PRIVS	$ZIGLIB/std/os/linux.zig	/SET_NO_NEW_PRIVS = 38/;"	field
SET_OUTPUT	$ZIGLIB/std/os/linux.zig	/pub const SET_OUTPUT = 9221/;"	constant
SET_PDEATHSIG	$ZIGLIB/std/os/linux.zig	/SET_PDEATHSIG = 1/;"	field
SET_POWER_STATE_FAILED	$ZIGLIB/std/os/windows/win32error.zig	/SET_POWER_STATE_FAILED = 1141/;"	field
SET_POWER_STATE_VETOED	$ZIGLIB/std/os/windows/win32error.zig	/SET_POWER_STATE_VETOED = 1140/;"	field
SET_PTRACER	$ZIGLIB/std/os/linux.zig	/SET_PTRACER = 0x59616d61/;"	field
SET_PTRACER_ANY	$ZIGLIB/std/os/linux.zig	/pub const SET_PTRACER_ANY = std.math.maxInt(c_ulong)/;"	constant
SET_SECCOMP	$ZIGLIB/std/os/linux.zig	/SET_SECCOMP = 22/;"	field
SET_SECUREBITS	$ZIGLIB/std/os/linux.zig	/SET_SECUREBITS = 28/;"	field
SET_SERVICE_PARTIAL_SUCCESS	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const SET_SERVICE_PARTIAL_SUCCESS = 1/;"	constant
SET_SPECULATION_CTRL	$ZIGLIB/std/os/linux.zig	/SET_SPECULATION_CTRL = 53/;"	field
SET_THP_DISABLE	$ZIGLIB/std/os/linux.zig	/SET_THP_DISABLE = 41/;"	field
SET_TIMERSLACK	$ZIGLIB/std/os/linux.zig	/SET_TIMERSLACK = 29/;"	field
SET_TIMING	$ZIGLIB/std/os/linux.zig	/SET_TIMING = 14/;"	field
SET_TSC	$ZIGLIB/std/os/linux.zig	/SET_TSC = 26/;"	field
SET_UNALIGN	$ZIGLIB/std/os/linux.zig	/SET_UNALIGN = 6/;"	field
SE_C17	$ZIGLIB/std/elf.zig	/SE_C17 = 139/;"	field
SE_C33	$ZIGLIB/std/elf.zig	/SE_C33 = 107/;"	field
SGI_CYCLE	$ZIGLIB/std/os/linux.zig	/pub const SGI_CYCLE = 10/;"	constant
SG_CONSTRAINED_GROUP	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const SG_CONSTRAINED_GROUP = 2/;"	constant
SG_UNCONSTRAINED_GROUP	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const SG_UNCONSTRAINED_GROUP = 1/;"	constant
SH3DSP	$ZIGLIB/std/coff.zig	/SH3DSP = 0x1a3/;"	field
SHARC	$ZIGLIB/std/elf.zig	/SHARC = 133/;"	field
SHARE	$ZIGLIB/std/c/solaris.zig	/pub const SHARE = 40/;"	constant
SHARED	$ZIGLIB/std/os/linux.zig	/pub const SHARED = 0x01/;"	constant
SHARED_IRQ_BUSY	$ZIGLIB/std/os/windows/ntstatus.zig	/SHARED_IRQ_BUSY = 0xC000016C/;"	field
SHARED_POLICY	$ZIGLIB/std/os/windows/ntstatus.zig	/SHARED_POLICY = 0xC0000299/;"	field
SHARED_UMEM	$ZIGLIB/std/os/linux.zig	/pub const SHARED_UMEM = (1 << 0)/;"	constant
SHARED_VALIDATE	$ZIGLIB/std/os/linux.zig	/pub const SHARED_VALIDATE = 0x03/;"	constant
SHARE_UNAVAILABLE	$ZIGLIB/std/os/windows/ntstatus.zig	/SHARE_UNAVAILABLE = 0xC0000480/;"	field
SHARING_BUFFER_EXCEEDED	$ZIGLIB/std/os/windows/win32error.zig	/SHARING_BUFFER_EXCEEDED = 36/;"	field
SHARING_PAUSED	$ZIGLIB/std/os/windows/win32error.zig	/SHARING_PAUSED = 70/;"	field
SHARING_VIOLATION	$ZIGLIB/std/os/windows/win32error.zig	/SHARING_VIOLATION = 32/;"	field
SHF_ALLOC	$ZIGLIB/std/elf.zig	/^pub const SHF_ALLOC = 0x2/;"	constant
SHF_ARM_PURECODE	$ZIGLIB/std/elf.zig	/^pub const SHF_ARM_PURECODE = 0x2000000/;"	constant
SHF_COMPRESSED	$ZIGLIB/std/elf.zig	/^pub const SHF_COMPRESSED = 0x800/;"	constant
SHF_EXCLUDE	$ZIGLIB/std/elf.zig	/^pub const SHF_EXCLUDE = 0x80000000/;"	constant
SHF_EXECINSTR	$ZIGLIB/std/elf.zig	/^pub const SHF_EXECINSTR = 0x4/;"	constant
SHF_GROUP	$ZIGLIB/std/elf.zig	/^pub const SHF_GROUP = 0x200/;"	constant
SHF_HEX_GPREL	$ZIGLIB/std/elf.zig	/^pub const SHF_HEX_GPREL = 0x10000000/;"	constant
SHF_INFO_LINK	$ZIGLIB/std/elf.zig	/^pub const SHF_INFO_LINK = 0x40/;"	constant
SHF_LINK_ORDER	$ZIGLIB/std/elf.zig	/^pub const SHF_LINK_ORDER = 0x80/;"	constant
SHF_MASKOS	$ZIGLIB/std/elf.zig	/^pub const SHF_MASKOS = 0x0ff00000/;"	constant
SHF_MASKPROC	$ZIGLIB/std/elf.zig	/^pub const SHF_MASKPROC = 0xf0000000/;"	constant
SHF_MERGE	$ZIGLIB/std/elf.zig	/^pub const SHF_MERGE = 0x10/;"	constant
SHF_MIPS_ADDR	$ZIGLIB/std/elf.zig	/^pub const SHF_MIPS_ADDR = 0x40000000/;"	constant
SHF_MIPS_GPREL	$ZIGLIB/std/elf.zig	/^pub const SHF_MIPS_GPREL = 0x10000000/;"	constant
SHF_MIPS_LOCAL	$ZIGLIB/std/elf.zig	/^pub const SHF_MIPS_LOCAL = 0x04000000/;"	constant
SHF_MIPS_MERGE	$ZIGLIB/std/elf.zig	/^pub const SHF_MIPS_MERGE = 0x20000000/;"	constant
SHF_MIPS_NAMES	$ZIGLIB/std/elf.zig	/^pub const SHF_MIPS_NAMES = 0x02000000/;"	constant
SHF_MIPS_NODUPES	$ZIGLIB/std/elf.zig	/^pub const SHF_MIPS_NODUPES = 0x01000000/;"	constant
SHF_MIPS_NOSTRIP	$ZIGLIB/std/elf.zig	/^pub const SHF_MIPS_NOSTRIP = 0x08000000/;"	constant
SHF_MIPS_STRING	$ZIGLIB/std/elf.zig	/^pub const SHF_MIPS_STRING = 0x80000000/;"	constant
SHF_OS_NONCONFORMING	$ZIGLIB/std/elf.zig	/^pub const SHF_OS_NONCONFORMING = 0x100/;"	constant
SHF_STRINGS	$ZIGLIB/std/elf.zig	/^pub const SHF_STRINGS = 0x20/;"	constant
SHF_TLS	$ZIGLIB/std/elf.zig	/^pub const SHF_TLS = 0x400/;"	constant
SHF_WRITE	$ZIGLIB/std/elf.zig	/^pub const SHF_WRITE = 0x1/;"	constant
SHF_X86_64_LARGE	$ZIGLIB/std/elf.zig	/^pub const SHF_X86_64_LARGE = 0x10000000/;"	constant
SHIM6	$ZIGLIB/std/c/freebsd.zig	/pub const SHIM6 = 140/;"	constant
SHLIBVERS	$ZIGLIB/std/c/darwin.zig	/SHLIBVERS = 87/;"	field
SHLOCK	$ZIGLIB/std/c/openbsd.zig	/pub const SHLOCK = 0x00000010/;"	constant
SHMINFO	$ZIGLIB/std/c/openbsd.zig	/pub const SHMINFO = 62/;"	constant
SHN_ABS	$ZIGLIB/std/elf.zig	/^pub const SHN_ABS = 0xfff1/;"	constant
SHN_COMMON	$ZIGLIB/std/elf.zig	/^pub const SHN_COMMON = 0xfff2/;"	constant
SHN_HIPROC	$ZIGLIB/std/elf.zig	/^pub const SHN_HIPROC = 0xff1f/;"	constant
SHN_HIRESERVE	$ZIGLIB/std/elf.zig	/^pub const SHN_HIRESERVE = 0xffff/;"	constant
SHN_LIVEPATCH	$ZIGLIB/std/elf.zig	/^pub const SHN_LIVEPATCH = 0xff20/;"	constant
SHN_LOPROC	$ZIGLIB/std/elf.zig	/^pub const SHN_LOPROC = 0xff00/;"	constant
SHN_LORESERVE	$ZIGLIB/std/elf.zig	/^pub const SHN_LORESERVE = 0xff00/;"	constant
SHN_UNDEF	$ZIGLIB/std/elf.zig	/^pub const SHN_UNDEF = 0/;"	constant
SHORT	$ZIGLIB/std/os/windows.zig	/^pub const SHORT = i16/;"	constant
SHORT_NAMES_NOT_ENABLED_ON_VOLUME	$ZIGLIB/std/os/windows/win32error.zig	/SHORT_NAMES_NOT_ENABLED_ON_VOLUME = 305/;"	field
SHT_DYNAMIC	$ZIGLIB/std/elf.zig	/^pub const SHT_DYNAMIC = 6/;"	constant
SHT_DYNSYM	$ZIGLIB/std/elf.zig	/^pub const SHT_DYNSYM = 11/;"	constant
SHT_FINI_ARRAY	$ZIGLIB/std/elf.zig	/^pub const SHT_FINI_ARRAY = 15/;"	constant
SHT_GROUP	$ZIGLIB/std/elf.zig	/^pub const SHT_GROUP = 17/;"	constant
SHT_HASH	$ZIGLIB/std/elf.zig	/^pub const SHT_HASH = 5/;"	constant
SHT_HIOS	$ZIGLIB/std/elf.zig	/^pub const SHT_HIOS = 0x6fffffff/;"	constant
SHT_HIPROC	$ZIGLIB/std/elf.zig	/^pub const SHT_HIPROC = 0x7fffffff/;"	constant
SHT_HIUSER	$ZIGLIB/std/elf.zig	/^pub const SHT_HIUSER = 0xffffffff/;"	constant
SHT_INIT_ARRAY	$ZIGLIB/std/elf.zig	/^pub const SHT_INIT_ARRAY = 14/;"	constant
SHT_LOOS	$ZIGLIB/std/elf.zig	/^pub const SHT_LOOS = 0x60000000/;"	constant
SHT_LOPROC	$ZIGLIB/std/elf.zig	/^pub const SHT_LOPROC = 0x70000000/;"	constant
SHT_LOUSER	$ZIGLIB/std/elf.zig	/^pub const SHT_LOUSER = 0x80000000/;"	constant
SHT_NOBITS	$ZIGLIB/std/elf.zig	/^pub const SHT_NOBITS = 8/;"	constant
SHT_NOTE	$ZIGLIB/std/elf.zig	/^pub const SHT_NOTE = 7/;"	constant
SHT_NULL	$ZIGLIB/std/elf.zig	/^pub const SHT_NULL = 0/;"	constant
SHT_PREINIT_ARRAY	$ZIGLIB/std/elf.zig	/^pub const SHT_PREINIT_ARRAY = 16/;"	constant
SHT_PROGBITS	$ZIGLIB/std/elf.zig	/^pub const SHT_PROGBITS = 1/;"	constant
SHT_REL	$ZIGLIB/std/elf.zig	/^pub const SHT_REL = 9/;"	constant
SHT_RELA	$ZIGLIB/std/elf.zig	/^pub const SHT_RELA = 4/;"	constant
SHT_SHLIB	$ZIGLIB/std/elf.zig	/^pub const SHT_SHLIB = 10/;"	constant
SHT_STRTAB	$ZIGLIB/std/elf.zig	/^pub const SHT_STRTAB = 3/;"	constant
SHT_SYMTAB	$ZIGLIB/std/elf.zig	/^pub const SHT_SYMTAB = 2/;"	constant
SHT_SYMTAB_SHNDX	$ZIGLIB/std/elf.zig	/^pub const SHT_SYMTAB_SHNDX = 18/;"	constant
SHUT	$ZIGLIB/std/os/wasi.zig	/^pub const SHUT = struct {$/;"	struct
SHUTDOWN	$ZIGLIB/std/os/linux/errno/sparc.zig	/SHUTDOWN = 58/;"	field
SHUTDOWN_IN_PROGRESS	$ZIGLIB/std/os/windows/win32error.zig	/SHUTDOWN_IN_PROGRESS = 1115/;"	field
SHUTDOWN_IS_SCHEDULED	$ZIGLIB/std/os/windows/win32error.zig	/SHUTDOWN_IS_SCHEDULED = 1190/;"	field
SHUTDOWN_USERS_LOGGED_ON	$ZIGLIB/std/os/windows/win32error.zig	/SHUTDOWN_USERS_LOGGED_ON = 1191/;"	field
SIGABRT	$ZIGLIB/std/os/wasi.zig	/^pub const SIGABRT: signal_t = 6/;"	constant
SIGALRM	$ZIGLIB/std/os/wasi.zig	/^pub const SIGALRM: signal_t = 14/;"	constant
SIGBUS	$ZIGLIB/std/os/wasi.zig	/^pub const SIGBUS: signal_t = 7/;"	constant
SIGCHLD	$ZIGLIB/std/os/wasi.zig	/^pub const SIGCHLD: signal_t = 16/;"	constant
SIGCONT	$ZIGLIB/std/os/wasi.zig	/^pub const SIGCONT: signal_t = 17/;"	constant
SIGFPE	$ZIGLIB/std/os/wasi.zig	/^pub const SIGFPE: signal_t = 8/;"	constant
SIGHAND	$ZIGLIB/std/os/linux.zig	/pub const SIGHAND = 0x00000800/;"	constant
SIGHUP	$ZIGLIB/std/os/wasi.zig	/^pub const SIGHUP: signal_t = 1/;"	constant
SIGILL	$ZIGLIB/std/os/wasi.zig	/^pub const SIGILL: signal_t = 4/;"	constant
SIGINFO	$ZIGLIB/std/os/linux.zig	/pub const SIGINFO = 8/;"	constant
SIGINT	$ZIGLIB/std/os/wasi.zig	/^pub const SIGINT: signal_t = 2/;"	constant
SIGKILL	$ZIGLIB/std/os/wasi.zig	/^pub const SIGKILL: signal_t = 9/;"	constant
SIGNAL_PENDING	$ZIGLIB/std/os/windows/win32error.zig	/SIGNAL_PENDING = 162/;"	field
SIGNAL_REFUSED	$ZIGLIB/std/os/windows/win32error.zig	/SIGNAL_REFUSED = 156/;"	field
SIGNONE	$ZIGLIB/std/os/wasi.zig	/^pub const SIGNONE: signal_t = 0/;"	constant
SIGPARM	$ZIGLIB/std/c/haiku.zig	/SIGPARM = B_POSIX_ERROR_BASE + 15/;"	field
SIGPENDING	$ZIGLIB/std/os/linux/sparc64.zig	/SIGPENDING/;"	field
SIGPIPE	$ZIGLIB/std/os/wasi.zig	/^pub const SIGPIPE: signal_t = 13/;"	constant
SIGPOLL	$ZIGLIB/std/os/wasi.zig	/^pub const SIGPOLL: signal_t = 28/;"	constant
SIGPROF	$ZIGLIB/std/os/wasi.zig	/^pub const SIGPROF: signal_t = 26/;"	constant
SIGPWR	$ZIGLIB/std/os/wasi.zig	/^pub const SIGPWR: signal_t = 29/;"	constant
SIGQUIT	$ZIGLIB/std/os/wasi.zig	/^pub const SIGQUIT: signal_t = 3/;"	constant
SIGSEGV	$ZIGLIB/std/os/wasi.zig	/^pub const SIGSEGV: signal_t = 11/;"	constant
SIGSTKSZ	$ZIGLIB/std/os/linux.zig	/^pub const SIGSTKSZ = switch (native_arch) {$/;"	constant
SIGSTOP	$ZIGLIB/std/os/wasi.zig	/^pub const SIGSTOP: signal_t = 18/;"	constant
SIGSYS	$ZIGLIB/std/os/wasi.zig	/^pub const SIGSYS: signal_t = 30/;"	constant
SIGTERM	$ZIGLIB/std/os/wasi.zig	/^pub const SIGTERM: signal_t = 15/;"	constant
SIGTRAP	$ZIGLIB/std/os/wasi.zig	/^pub const SIGTRAP: signal_t = 5/;"	constant
SIGTSTP	$ZIGLIB/std/os/wasi.zig	/^pub const SIGTSTP: signal_t = 19/;"	constant
SIGTTIN	$ZIGLIB/std/os/wasi.zig	/^pub const SIGTTIN: signal_t = 20/;"	constant
SIGTTOU	$ZIGLIB/std/os/wasi.zig	/^pub const SIGTTOU: signal_t = 21/;"	constant
SIGURG	$ZIGLIB/std/os/wasi.zig	/^pub const SIGURG: signal_t = 22/;"	constant
SIGUSR1	$ZIGLIB/std/os/wasi.zig	/^pub const SIGUSR1: signal_t = 10/;"	constant
SIGUSR2	$ZIGLIB/std/os/wasi.zig	/^pub const SIGUSR2: signal_t = 12/;"	constant
SIGVTALRM	$ZIGLIB/std/os/wasi.zig	/^pub const SIGVTALRM: signal_t = 25/;"	constant
SIGWINCH	$ZIGLIB/std/os/wasi.zig	/^pub const SIGWINCH: signal_t = 27/;"	constant
SIGXCPU	$ZIGLIB/std/os/wasi.zig	/^pub const SIGXCPU: signal_t = 23/;"	constant
SIGXFSZ	$ZIGLIB/std/os/wasi.zig	/^pub const SIGXFSZ: signal_t = 24/;"	constant
SIG_BLOCK	$ZIGLIB/std/c/solaris.zig	/pub const SIG_BLOCK = 1/;"	constant
SIG_SETMASK	$ZIGLIB/std/c/solaris.zig	/pub const SIG_SETMASK = 3/;"	constant
SIG_UNBLOCK	$ZIGLIB/std/c/solaris.zig	/pub const SIG_UNBLOCK = 2/;"	constant
SILENT	$ZIGLIB/std/os/linux.zig	/pub const SILENT = 32768/;"	constant
SINDHI	$ZIGLIB/std/os/windows/lang.zig	/^pub const SINDHI = 0x59/;"	constant
SINDHI_AFGHANISTAN	$ZIGLIB/std/os/windows/sublang.zig	/^pub const SINDHI_AFGHANISTAN = 0x02/;"	constant
SINDHI_INDIA	$ZIGLIB/std/os/windows/sublang.zig	/^pub const SINDHI_INDIA = 0x01/;"	constant
SINDHI_PAKISTAN	$ZIGLIB/std/os/windows/sublang.zig	/^pub const SINDHI_PAKISTAN = 0x02/;"	constant
SINGLE_INSTANCE_APP	$ZIGLIB/std/os/windows/win32error.zig	/SINGLE_INSTANCE_APP = 1152/;"	field
SINGLE_STEP	$ZIGLIB/std/os/windows/ntstatus.zig	/SINGLE_STEP = 0x80000004/;"	field
SINGLE_WRITER	$ZIGLIB/std/c/darwin.zig	/pub const SINGLE_WRITER = 76/;"	constant
SINHALESE	$ZIGLIB/std/os/windows/lang.zig	/^pub const SINHALESE = 0x5b/;"	constant
SINHALESE_SRI_LANKA	$ZIGLIB/std/os/windows/sublang.zig	/^pub const SINHALESE_SRI_LANKA = 0x01/;"	constant
SIOCGIFINDEX	$ZIGLIB/std/os/linux.zig	/^pub const SIOCGIFINDEX = 0x8933/;"	constant
SIOCGLIFINDEX	$ZIGLIB/std/c/solaris.zig	/^pub const SIOCGLIFINDEX = IOWR('i', 133, lifreq)/;"	constant
SIO_ASSOCIATE_PVC	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const SIO_ASSOCIATE_PVC = 2417360899/;"	constant
SIO_BASE_HANDLE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const SIO_BASE_HANDLE = IOC_OUT | IOC_WS2 | 34/;"	constant
SIO_BSP_HANDLE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const SIO_BSP_HANDLE = IOC_OUT | IOC_WS2 | 27/;"	constant
SIO_BSP_HANDLE_POLL	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const SIO_BSP_HANDLE_POLL = IOC_OUT | IOC_WS2 | 29/;"	constant
SIO_BSP_HANDLE_SELECT	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const SIO_BSP_HANDLE_SELECT = IOC_OUT | IOC_WS2 | 28/;"	constant
SIO_GET_ATM_ADDRESS	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const SIO_GET_ATM_ADDRESS = 3491102722/;"	constant
SIO_GET_ATM_CONNECTION_ID	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const SIO_GET_ATM_CONNECTION_ID = 1343619076/;"	constant
SIO_GET_EXTENSION_FUNCTION_POINTER	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const SIO_GET_EXTENSION_FUNCTION_POINTER = IOC_OUT | IOC_IN | IOC_WS2 | 6/;"	constant
SIO_GET_NUMBER_OF_ATM_DEVICES	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const SIO_GET_NUMBER_OF_ATM_DEVICES = 1343619073/;"	constant
SIZEALIGN	$ZIGLIB/std/c/dragonfly.zig	/pub const SIZEALIGN = 262144/;"	constant
SIZE_T	$ZIGLIB/std/os/windows.zig	/^pub const SIZE_T = usize/;"	constant
SI_NETWORK	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const SI_NETWORK = 3/;"	constant
SI_USER_FAILED	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const SI_USER_FAILED = 2/;"	constant
SI_USER_NOT_SCREENED	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const SI_USER_NOT_SCREENED = 0/;"	constant
SI_USER_PASSED	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const SI_USER_PASSED = 1/;"	constant
SKIP	$ZIGLIB/std/c/freebsd.zig	/pub const SKIP = 57/;"	constant
SLAVE	$ZIGLIB/std/os/linux.zig	/pub const SLAVE = (1 << 19)/;"	constant
SLE9X	$ZIGLIB/std/elf.zig	/SLE9X = 179/;"	field
SLEEP	$ZIGLIB/std/os/plan9.zig	/SLEEP = 17/;"	field
SLOVAK	$ZIGLIB/std/os/windows/lang.zig	/^pub const SLOVAK = 0x1b/;"	constant
SLOVAK_SLOVAKIA	$ZIGLIB/std/os/windows/sublang.zig	/^pub const SLOVAK_SLOVAKIA = 0x01/;"	constant
SLOVENIAN	$ZIGLIB/std/os/windows/lang.zig	/^pub const SLOVENIAN = 0x24/;"	constant
SLOVENIAN_SLOVENIA	$ZIGLIB/std/os/windows/sublang.zig	/^pub const SLOVENIAN_SLOVENIA = 0x01/;"	constant
SLOW	$ZIGLIB/std/c/freebsd.zig	/pub const SLOW = 33/;"	constant
SLimb	$ZIGLIB/std/math/big/int.zig	/const SLimb = std.meta.Int(.signed, @bitSizeOf(Limb))/;"	constant
SMALL_RECT	$ZIGLIB/std/os/windows.zig	/^pub const SMALL_RECT = extern struct {$/;"	struct
SMARTCARD_CARD_BLOCKED	$ZIGLIB/std/os/windows/ntstatus.zig	/SMARTCARD_CARD_BLOCKED = 0xC0000381/;"	field
SMARTCARD_CARD_NOT_AUTHENTICATED	$ZIGLIB/std/os/windows/ntstatus.zig	/SMARTCARD_CARD_NOT_AUTHENTICATED = 0xC0000382/;"	field
SMARTCARD_CERT_EXPIRED	$ZIGLIB/std/os/windows/ntstatus.zig	/SMARTCARD_CERT_EXPIRED = 0xC000038D/;"	field
SMARTCARD_CERT_REVOKED	$ZIGLIB/std/os/windows/ntstatus.zig	/SMARTCARD_CERT_REVOKED = 0xC0000389/;"	field
SMARTCARD_IO_ERROR	$ZIGLIB/std/os/windows/ntstatus.zig	/SMARTCARD_IO_ERROR = 0xC0000387/;"	field
SMARTCARD_LOGON_REQUIRED	$ZIGLIB/std/os/windows/ntstatus.zig	/SMARTCARD_LOGON_REQUIRED = 0xC00002FA/;"	field
SMARTCARD_NO_CARD	$ZIGLIB/std/os/windows/ntstatus.zig	/SMARTCARD_NO_CARD = 0xC0000383/;"	field
SMARTCARD_NO_CERTIFICATE	$ZIGLIB/std/os/windows/ntstatus.zig	/SMARTCARD_NO_CERTIFICATE = 0xC0000385/;"	field
SMARTCARD_NO_KEYSET	$ZIGLIB/std/os/windows/ntstatus.zig	/SMARTCARD_NO_KEYSET = 0xC0000386/;"	field
SMARTCARD_NO_KEY_CONTAINER	$ZIGLIB/std/os/windows/ntstatus.zig	/SMARTCARD_NO_KEY_CONTAINER = 0xC0000384/;"	field
SMARTCARD_SILENT_CONTEXT	$ZIGLIB/std/os/windows/ntstatus.zig	/SMARTCARD_SILENT_CONTEXT = 0xC000038F/;"	field
SMARTCARD_SUBSYSTEM_FAILURE	$ZIGLIB/std/os/windows/win32error.zig	/SMARTCARD_SUBSYSTEM_FAILURE = 1264/;"	field
SMARTCARD_WRONG_PIN	$ZIGLIB/std/os/windows/ntstatus.zig	/SMARTCARD_WRONG_PIN = 0xC0000380/;"	field
SMHasherTest	$ZIGLIB/std/hash/murmur.zig	/^fn SMHasherTest(comptime hash_fn: anytype, comptime hashbits: u32) u32 {$/;"	function
SMI_PRIMITIVE_INSTALLER_FAILED	$ZIGLIB/std/os/windows/ntstatus.zig	/SMI_PRIMITIVE_INSTALLER_FAILED = 0xC0150025/;"	field
SM_GETCURFOCUSA	$ZIGLIB/std/os/windows/user32.zig	/^pub const SM_GETCURFOCUSA = 0x07EB/;"	constant
SM_GETCURFOCUSW	$ZIGLIB/std/os/windows/user32.zig	/^pub const SM_GETCURFOCUSW = 0x07EC/;"	constant
SM_GETOPTIONS	$ZIGLIB/std/os/windows/user32.zig	/^pub const SM_GETOPTIONS = 0x07ED/;"	constant
SM_GETSELCOUNT	$ZIGLIB/std/os/windows/user32.zig	/^pub const SM_GETSELCOUNT = 0x07E8/;"	constant
SM_GETSERVERSELA	$ZIGLIB/std/os/windows/user32.zig	/^pub const SM_GETSERVERSELA = 0x07E9/;"	constant
SM_GETSERVERSELW	$ZIGLIB/std/os/windows/user32.zig	/^pub const SM_GETSERVERSELW = 0x07EA/;"	constant
SNDBUF	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const SNDBUF = 4097/;"	constant
SNDBUFFORCE	$ZIGLIB/std/os/linux.zig	/pub const SNDBUFFORCE = 4106/;"	constant
SNDLOWAT	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const SNDLOWAT = 4099/;"	constant
SNDSPACE	$ZIGLIB/std/c/dragonfly.zig	/pub const SNDSPACE = 0x100a/;"	constant
SNDTIMEO	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const SNDTIMEO = 4101/;"	constant
SNDTIMEO_NEW	$ZIGLIB/std/os/linux.zig	/pub const SNDTIMEO_NEW = 69/;"	constant
SNP1K	$ZIGLIB/std/elf.zig	/SNP1K = 99/;"	field
SOCK	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const SOCK = struct {$/;"	struct
SOCKET	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const SOCKET = 65535/;"	constant
SOCKET_ADDRESS	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const SOCKET_ADDRESS = extern struct {$/;"	struct
SOCKET_ADDRESS_LIST	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const SOCKET_ADDRESS_LIST = extern struct {$/;"	struct
SOCKET_DEFAULT2_QM_POLICY	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const SOCKET_DEFAULT2_QM_POLICY = GUID.parse("{aec2ef9c-3a4d-4d3e-8842-239942e39a47}")/;"	constant
SOCKET_DGRAM	$ZIGLIB/std/os/wasi.zig	/SOCKET_DGRAM/;"	field
SOCKET_ERROR	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const SOCKET_ERROR = -1/;"	constant
SOCKET_INFO_CONNECTION_ENCRYPTED	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const SOCKET_INFO_CONNECTION_ENCRYPTED = 2/;"	constant
SOCKET_INFO_CONNECTION_IMPERSONATED	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const SOCKET_INFO_CONNECTION_IMPERSONATED = 4/;"	constant
SOCKET_INFO_CONNECTION_SECURED	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const SOCKET_INFO_CONNECTION_SECURED = 1/;"	constant
SOCKET_QUERY_IPSEC2_ABORT_CONNECTION_ON_FIELD_CHANGE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const SOCKET_QUERY_IPSEC2_ABORT_CONNECTION_ON_FIELD_CHANGE = 1/;"	constant
SOCKET_QUERY_IPSEC2_FIELD_MASK_MM_SA_ID	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const SOCKET_QUERY_IPSEC2_FIELD_MASK_MM_SA_ID = 1/;"	constant
SOCKET_QUERY_IPSEC2_FIELD_MASK_QM_SA_ID	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const SOCKET_QUERY_IPSEC2_FIELD_MASK_QM_SA_ID = 2/;"	constant
SOCKET_SETTINGS_ALLOW_INSECURE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const SOCKET_SETTINGS_ALLOW_INSECURE = 2/;"	constant
SOCKET_SETTINGS_GUARANTEE_ENCRYPTION	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const SOCKET_SETTINGS_GUARANTEE_ENCRYPTION = 1/;"	constant
SOCKET_SETTINGS_IPSEC_ALLOW_FIRST_INBOUND_PKT_UNENCRYPTED	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const SOCKET_SETTINGS_IPSEC_ALLOW_FIRST_INBOUND_PKT_UNENCRYPTED = 4/;"	constant
SOCKET_SETTINGS_IPSEC_OPTIONAL_PEER_NAME_VERIFICATION	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const SOCKET_SETTINGS_IPSEC_OPTIONAL_PEER_NAME_VERIFICATION = 2/;"	constant
SOCKET_SETTINGS_IPSEC_PEER_NAME_IS_RAW_FORMAT	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const SOCKET_SETTINGS_IPSEC_PEER_NAME_IS_RAW_FORMAT = 8/;"	constant
SOCKET_SETTINGS_IPSEC_SKIP_FILTER_INSTANTIATION	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const SOCKET_SETTINGS_IPSEC_SKIP_FILTER_INSTANTIATION = 1/;"	constant
SOCKET_STREAM	$ZIGLIB/std/os/wasi.zig	/SOCKET_STREAM/;"	field
SOCKTNOSUPPORT	$ZIGLIB/std/os/linux/errno/sparc.zig	/SOCKTNOSUPPORT = 44/;"	field
SOCKTYPE	$ZIGLIB/std/c/solaris.zig	/SOCKTYPE = 10/;"	field
SOCK_ACCEPT	$ZIGLIB/std/os/wasi.zig	/pub const SOCK_ACCEPT: rights_t = 0x0000000020000000/;"	constant
SOCK_DIAG	$ZIGLIB/std/os/linux.zig	/pub const SOCK_DIAG = 4/;"	constant
SOCK_SHUTDOWN	$ZIGLIB/std/os/wasi.zig	/pub const SOCK_SHUTDOWN: rights_t = 0x0000000010000000/;"	constant
SOFT	$ZIGLIB/std/c/openbsd.zig	/pub const SOFT = 0x10/;"	constant
SOFTWARE	$ZIGLIB/std/os/linux.zig	/SOFTWARE/;"	field
SOFT_OFFLINE	$ZIGLIB/std/os/linux.zig	/pub const SOFT_OFFLINE = 101/;"	constant
SOMAXCONN	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const SOMAXCONN = 2147483647/;"	constant
SOME_NOT_MAPPED	$ZIGLIB/std/os/windows/win32error.zig	/SOME_NOT_MAPPED = 1301/;"	field
SOMINCONN	$ZIGLIB/std/c/openbsd.zig	/pub const SOMINCONN = 29/;"	constant
SOTHO	$ZIGLIB/std/os/windows/lang.zig	/^pub const SOTHO = 0x6c/;"	constant
SOTHO_NORTHERN_SOUTH_AFRICA	$ZIGLIB/std/os/windows/sublang.zig	/^pub const SOTHO_NORTHERN_SOUTH_AFRICA = 0x01/;"	constant
SOURCE_ELEMENT_EMPTY	$ZIGLIB/std/os/windows/win32error.zig	/SOURCE_ELEMENT_EMPTY = 1160/;"	field
SOURCE_VERSION	$ZIGLIB/std/macho.zig	/SOURCE_VERSION = 0x2A/;"	field
SPANISH	$ZIGLIB/std/os/windows/sublang.zig	/^pub const SPANISH = 0x01/;"	constant
SPANISH_ARGENTINA	$ZIGLIB/std/os/windows/sublang.zig	/^pub const SPANISH_ARGENTINA = 0x0b/;"	constant
SPANISH_BOLIVIA	$ZIGLIB/std/os/windows/sublang.zig	/^pub const SPANISH_BOLIVIA = 0x10/;"	constant
SPANISH_CHILE	$ZIGLIB/std/os/windows/sublang.zig	/^pub const SPANISH_CHILE = 0x0d/;"	constant
SPANISH_COLOMBIA	$ZIGLIB/std/os/windows/sublang.zig	/^pub const SPANISH_COLOMBIA = 0x09/;"	constant
SPANISH_COSTA_RICA	$ZIGLIB/std/os/windows/sublang.zig	/^pub const SPANISH_COSTA_RICA = 0x05/;"	constant
SPANISH_DOMINICAN_REPUBLIC	$ZIGLIB/std/os/windows/sublang.zig	/^pub const SPANISH_DOMINICAN_REPUBLIC = 0x07/;"	constant
SPANISH_ECUADOR	$ZIGLIB/std/os/windows/sublang.zig	/^pub const SPANISH_ECUADOR = 0x0c/;"	constant
SPANISH_EL_SALVADOR	$ZIGLIB/std/os/windows/sublang.zig	/^pub const SPANISH_EL_SALVADOR = 0x11/;"	constant
SPANISH_GUATEMALA	$ZIGLIB/std/os/windows/sublang.zig	/^pub const SPANISH_GUATEMALA = 0x04/;"	constant
SPANISH_HONDURAS	$ZIGLIB/std/os/windows/sublang.zig	/^pub const SPANISH_HONDURAS = 0x12/;"	constant
SPANISH_MEXICAN	$ZIGLIB/std/os/windows/sublang.zig	/^pub const SPANISH_MEXICAN = 0x02/;"	constant
SPANISH_MODERN	$ZIGLIB/std/os/windows/sublang.zig	/^pub const SPANISH_MODERN = 0x03/;"	constant
SPANISH_NICARAGUA	$ZIGLIB/std/os/windows/sublang.zig	/^pub const SPANISH_NICARAGUA = 0x13/;"	constant
SPANISH_PANAMA	$ZIGLIB/std/os/windows/sublang.zig	/^pub const SPANISH_PANAMA = 0x06/;"	constant
SPANISH_PARAGUAY	$ZIGLIB/std/os/windows/sublang.zig	/^pub const SPANISH_PARAGUAY = 0x0f/;"	constant
SPANISH_PERU	$ZIGLIB/std/os/windows/sublang.zig	/^pub const SPANISH_PERU = 0x0a/;"	constant
SPANISH_PUERTO_RICO	$ZIGLIB/std/os/windows/sublang.zig	/^pub const SPANISH_PUERTO_RICO = 0x14/;"	constant
SPANISH_URUGUAY	$ZIGLIB/std/os/windows/sublang.zig	/^pub const SPANISH_URUGUAY = 0x0e/;"	constant
SPANISH_US	$ZIGLIB/std/os/windows/sublang.zig	/^pub const SPANISH_US = 0x15/;"	constant
SPANISH_VENEZUELA	$ZIGLIB/std/os/windows/sublang.zig	/^pub const SPANISH_VENEZUELA = 0x08/;"	constant
SPARC	$ZIGLIB/std/os/linux.zig	/SPARC = toAudit(.sparc)/;"	field
SPARC32PLUS	$ZIGLIB/std/elf.zig	/SPARC32PLUS = 18/;"	field
SPARC64	$ZIGLIB/std/os/linux.zig	/SPARC64 = toAudit(.sparc64)/;"	field
SPARCV9	$ZIGLIB/std/elf.zig	/SPARCV9 = 43/;"	field
SPARSE_NOT_ALLOWED_IN_TRANSACTION	$ZIGLIB/std/os/windows/ntstatus.zig	/SPARSE_NOT_ALLOWED_IN_TRANSACTION = 0xC0190049/;"	field
SPECIAL_ACCOUNT	$ZIGLIB/std/os/windows/win32error.zig	/SPECIAL_ACCOUNT = 1371/;"	field
SPECIAL_GROUP	$ZIGLIB/std/os/windows/win32error.zig	/SPECIAL_GROUP = 1372/;"	field
SPECIAL_USER	$ZIGLIB/std/os/windows/win32error.zig	/SPECIAL_USER = 1373/;"	field
SPEC_ALLOW	$ZIGLIB/std/os/linux/seccomp.zig	/pub const SPEC_ALLOW = 1 << 2/;"	constant
SPEC_DISABLE	$ZIGLIB/std/os/linux.zig	/pub const SPEC_DISABLE = 1 << 2/;"	constant
SPEC_ENABLE	$ZIGLIB/std/os/linux.zig	/pub const SPEC_ENABLE = 1 << 1/;"	constant
SPEC_FORCE_DISABLE	$ZIGLIB/std/os/linux.zig	/pub const SPEC_FORCE_DISABLE = 1 << 3/;"	constant
SPEC_NOT_AFFECTED	$ZIGLIB/std/os/linux.zig	/pub const SPEC_NOT_AFFECTED = 0/;"	constant
SPEC_PRCTL	$ZIGLIB/std/os/linux.zig	/pub const SPEC_PRCTL = 1 << 0/;"	constant
SPEC_STORE_BYPASS	$ZIGLIB/std/os/linux.zig	/pub const SPEC_STORE_BYPASS = 0/;"	constant
SPIPE	$ZIGLIB/std/os/wasi.zig	/SPIPE = 70/;"	field
SPLASSERT	$ZIGLIB/std/c/openbsd.zig	/pub const SPLASSERT = 54/;"	constant
SPLICE	$ZIGLIB/std/os/linux.zig	/SPLICE/;"	field
SPL_NO_ADDJOB	$ZIGLIB/std/os/windows/win32error.zig	/SPL_NO_ADDJOB = 3004/;"	field
SPL_NO_STARTDOC	$ZIGLIB/std/os/windows/win32error.zig	/SPL_NO_STARTDOC = 3003/;"	field
SPOOL_FILE_NOT_FOUND	$ZIGLIB/std/os/windows/win32error.zig	/SPOOL_FILE_NOT_FOUND = 3002/;"	field
SPU_2	$ZIGLIB/std/elf.zig	/SPU_2 = 13/;"	field
SPV_AMD_gcn_shader	$ZIGLIB/std/target/spirv.zig	/SPV_AMD_gcn_shader/;"	field
SPV_AMD_gpu_shader_half_float	$ZIGLIB/std/target/spirv.zig	/SPV_AMD_gpu_shader_half_float/;"	field
SPV_AMD_gpu_shader_half_float_fetch	$ZIGLIB/std/target/spirv.zig	/SPV_AMD_gpu_shader_half_float_fetch/;"	field
SPV_AMD_gpu_shader_int16	$ZIGLIB/std/target/spirv.zig	/SPV_AMD_gpu_shader_int16/;"	field
SPV_AMD_shader_ballot	$ZIGLIB/std/target/spirv.zig	/SPV_AMD_shader_ballot/;"	field
SPV_AMD_shader_explicit_vertex_parameter	$ZIGLIB/std/target/spirv.zig	/SPV_AMD_shader_explicit_vertex_parameter/;"	field
SPV_AMD_shader_fragment_mask	$ZIGLIB/std/target/spirv.zig	/SPV_AMD_shader_fragment_mask/;"	field
SPV_AMD_shader_image_load_store_lod	$ZIGLIB/std/target/spirv.zig	/SPV_AMD_shader_image_load_store_lod/;"	field
SPV_AMD_shader_trinary_minmax	$ZIGLIB/std/target/spirv.zig	/SPV_AMD_shader_trinary_minmax/;"	field
SPV_AMD_texture_gather_bias_lod	$ZIGLIB/std/target/spirv.zig	/SPV_AMD_texture_gather_bias_lod/;"	field
SPV_EXT_demote_to_helper_invocation	$ZIGLIB/std/target/spirv.zig	/SPV_EXT_demote_to_helper_invocation/;"	field
SPV_EXT_descriptor_indexing	$ZIGLIB/std/target/spirv.zig	/SPV_EXT_descriptor_indexing/;"	field
SPV_EXT_fragment_fully_covered	$ZIGLIB/std/target/spirv.zig	/SPV_EXT_fragment_fully_covered/;"	field
SPV_EXT_fragment_invocation_density	$ZIGLIB/std/target/spirv.zig	/SPV_EXT_fragment_invocation_density/;"	field
SPV_EXT_fragment_shader_interlock	$ZIGLIB/std/target/spirv.zig	/SPV_EXT_fragment_shader_interlock/;"	field
SPV_EXT_physical_storage_buffer	$ZIGLIB/std/target/spirv.zig	/SPV_EXT_physical_storage_buffer/;"	field
SPV_EXT_shader_atomic_float_add	$ZIGLIB/std/target/spirv.zig	/SPV_EXT_shader_atomic_float_add/;"	field
SPV_EXT_shader_atomic_float_min_max	$ZIGLIB/std/target/spirv.zig	/SPV_EXT_shader_atomic_float_min_max/;"	field
SPV_EXT_shader_image_int64	$ZIGLIB/std/target/spirv.zig	/SPV_EXT_shader_image_int64/;"	field
SPV_EXT_shader_stencil_export	$ZIGLIB/std/target/spirv.zig	/SPV_EXT_shader_stencil_export/;"	field
SPV_EXT_shader_viewport_index_layer	$ZIGLIB/std/target/spirv.zig	/SPV_EXT_shader_viewport_index_layer/;"	field
SPV_GOOGLE_decorate_string	$ZIGLIB/std/target/spirv.zig	/SPV_GOOGLE_decorate_string/;"	field
SPV_GOOGLE_hlsl_functionality1	$ZIGLIB/std/target/spirv.zig	/SPV_GOOGLE_hlsl_functionality1/;"	field
SPV_GOOGLE_user_type	$ZIGLIB/std/target/spirv.zig	/SPV_GOOGLE_user_type/;"	field
SPV_INTEL_arbitrary_precision_integers	$ZIGLIB/std/target/spirv.zig	/SPV_INTEL_arbitrary_precision_integers/;"	field
SPV_INTEL_blocking_pipes	$ZIGLIB/std/target/spirv.zig	/SPV_INTEL_blocking_pipes/;"	field
SPV_INTEL_device_side_avc_motion_estimation	$ZIGLIB/std/target/spirv.zig	/SPV_INTEL_device_side_avc_motion_estimation/;"	field
SPV_INTEL_fp_fast_math_mode	$ZIGLIB/std/target/spirv.zig	/SPV_INTEL_fp_fast_math_mode/;"	field
SPV_INTEL_fpga_cluster_attributes	$ZIGLIB/std/target/spirv.zig	/SPV_INTEL_fpga_cluster_attributes/;"	field
SPV_INTEL_fpga_dsp_control	$ZIGLIB/std/target/spirv.zig	/SPV_INTEL_fpga_dsp_control/;"	field
SPV_INTEL_fpga_loop_controls	$ZIGLIB/std/target/spirv.zig	/SPV_INTEL_fpga_loop_controls/;"	field
SPV_INTEL_fpga_memory_accesses	$ZIGLIB/std/target/spirv.zig	/SPV_INTEL_fpga_memory_accesses/;"	field
SPV_INTEL_fpga_memory_attributes	$ZIGLIB/std/target/spirv.zig	/SPV_INTEL_fpga_memory_attributes/;"	field
SPV_INTEL_fpga_reg	$ZIGLIB/std/target/spirv.zig	/SPV_INTEL_fpga_reg/;"	field
SPV_INTEL_io_pipes	$ZIGLIB/std/target/spirv.zig	/SPV_INTEL_io_pipes/;"	field
SPV_INTEL_kernel_attributes	$ZIGLIB/std/target/spirv.zig	/SPV_INTEL_kernel_attributes/;"	field
SPV_INTEL_loop_fuse	$ZIGLIB/std/target/spirv.zig	/SPV_INTEL_loop_fuse/;"	field
SPV_INTEL_media_block_io	$ZIGLIB/std/target/spirv.zig	/SPV_INTEL_media_block_io/;"	field
SPV_INTEL_shader_integer_functions2	$ZIGLIB/std/target/spirv.zig	/SPV_INTEL_shader_integer_functions2/;"	field
SPV_INTEL_subgroups	$ZIGLIB/std/target/spirv.zig	/SPV_INTEL_subgroups/;"	field
SPV_INTEL_unstructured_loop_controls	$ZIGLIB/std/target/spirv.zig	/SPV_INTEL_unstructured_loop_controls/;"	field
SPV_KHR_16bit_storage	$ZIGLIB/std/target/spirv.zig	/SPV_KHR_16bit_storage/;"	field
SPV_KHR_8bit_storage	$ZIGLIB/std/target/spirv.zig	/SPV_KHR_8bit_storage/;"	field
SPV_KHR_device_group	$ZIGLIB/std/target/spirv.zig	/SPV_KHR_device_group/;"	field
SPV_KHR_expect_assume	$ZIGLIB/std/target/spirv.zig	/SPV_KHR_expect_assume/;"	field
SPV_KHR_float_controls	$ZIGLIB/std/target/spirv.zig	/SPV_KHR_float_controls/;"	field
SPV_KHR_fragment_shading_rate	$ZIGLIB/std/target/spirv.zig	/SPV_KHR_fragment_shading_rate/;"	field
SPV_KHR_linkonce_odr	$ZIGLIB/std/target/spirv.zig	/SPV_KHR_linkonce_odr/;"	field
SPV_KHR_multiview	$ZIGLIB/std/target/spirv.zig	/SPV_KHR_multiview/;"	field
SPV_KHR_no_integer_wrap_decoration	$ZIGLIB/std/target/spirv.zig	/SPV_KHR_no_integer_wrap_decoration/;"	field
SPV_KHR_non_semantic_info	$ZIGLIB/std/target/spirv.zig	/SPV_KHR_non_semantic_info/;"	field
SPV_KHR_physical_storage_buffer	$ZIGLIB/std/target/spirv.zig	/SPV_KHR_physical_storage_buffer/;"	field
SPV_KHR_post_depth_coverage	$ZIGLIB/std/target/spirv.zig	/SPV_KHR_post_depth_coverage/;"	field
SPV_KHR_ray_query	$ZIGLIB/std/target/spirv.zig	/SPV_KHR_ray_query/;"	field
SPV_KHR_ray_tracing	$ZIGLIB/std/target/spirv.zig	/SPV_KHR_ray_tracing/;"	field
SPV_KHR_shader_atomic_counter_ops	$ZIGLIB/std/target/spirv.zig	/SPV_KHR_shader_atomic_counter_ops/;"	field
SPV_KHR_shader_ballot	$ZIGLIB/std/target/spirv.zig	/SPV_KHR_shader_ballot/;"	field
SPV_KHR_shader_clock	$ZIGLIB/std/target/spirv.zig	/SPV_KHR_shader_clock/;"	field
SPV_KHR_shader_draw_parameters	$ZIGLIB/std/target/spirv.zig	/SPV_KHR_shader_draw_parameters/;"	field
SPV_KHR_storage_buffer_storage_class	$ZIGLIB/std/target/spirv.zig	/SPV_KHR_storage_buffer_storage_class/;"	field
SPV_KHR_subgroup_vote	$ZIGLIB/std/target/spirv.zig	/SPV_KHR_subgroup_vote/;"	field
SPV_KHR_terminate_invocation	$ZIGLIB/std/target/spirv.zig	/SPV_KHR_terminate_invocation/;"	field
SPV_KHR_variable_pointers	$ZIGLIB/std/target/spirv.zig	/SPV_KHR_variable_pointers/;"	field
SPV_KHR_vulkan_memory_model	$ZIGLIB/std/target/spirv.zig	/SPV_KHR_vulkan_memory_model/;"	field
SPV_KHR_workgroup_memory_explicit_layout	$ZIGLIB/std/target/spirv.zig	/SPV_KHR_workgroup_memory_explicit_layout/;"	field
SPV_NVX_multiview_per_view_attributes	$ZIGLIB/std/target/spirv.zig	/SPV_NVX_multiview_per_view_attributes/;"	field
SPV_NV_compute_shader_derivatives	$ZIGLIB/std/target/spirv.zig	/SPV_NV_compute_shader_derivatives/;"	field
SPV_NV_cooperative_matrix	$ZIGLIB/std/target/spirv.zig	/SPV_NV_cooperative_matrix/;"	field
SPV_NV_fragment_shader_barycentric	$ZIGLIB/std/target/spirv.zig	/SPV_NV_fragment_shader_barycentric/;"	field
SPV_NV_geometry_shader_passthrough	$ZIGLIB/std/target/spirv.zig	/SPV_NV_geometry_shader_passthrough/;"	field
SPV_NV_mesh_shader	$ZIGLIB/std/target/spirv.zig	/SPV_NV_mesh_shader/;"	field
SPV_NV_ray_tracing	$ZIGLIB/std/target/spirv.zig	/SPV_NV_ray_tracing/;"	field
SPV_NV_sample_mask_override_coverage	$ZIGLIB/std/target/spirv.zig	/SPV_NV_sample_mask_override_coverage/;"	field
SPV_NV_shader_image_footprint	$ZIGLIB/std/target/spirv.zig	/SPV_NV_shader_image_footprint/;"	field
SPV_NV_shader_sm_builtins	$ZIGLIB/std/target/spirv.zig	/SPV_NV_shader_sm_builtins/;"	field
SPV_NV_shader_subgroup_partitioned	$ZIGLIB/std/target/spirv.zig	/SPV_NV_shader_subgroup_partitioned/;"	field
SPV_NV_shading_rate	$ZIGLIB/std/target/spirv.zig	/SPV_NV_shading_rate/;"	field
SPV_NV_stereo_view_rendering	$ZIGLIB/std/target/spirv.zig	/SPV_NV_stereo_view_rendering/;"	field
SPV_NV_viewport_array2	$ZIGLIB/std/target/spirv.zig	/SPV_NV_viewport_array2/;"	field
SQE_FLAGS_ALLOWED	$ZIGLIB/std/os/linux.zig	/SQE_FLAGS_ALLOWED = 2/;"	field
SQE_FLAGS_REQUIRED	$ZIGLIB/std/os/linux.zig	/SQE_FLAGS_REQUIRED = 3/;"	field
SQE_OP	$ZIGLIB/std/os/linux.zig	/SQE_OP = 1/;"	field
SRCH	$ZIGLIB/std/os/wasi.zig	/SRCH = 71/;"	field
SRMNT	$ZIGLIB/std/os/linux/errno/sparc.zig	/SRMNT = 84/;"	field
SRPC	$ZIGLIB/std/c/freebsd.zig	/pub const SRPC = 90/;"	constant
SRWLOCK	$ZIGLIB/std/os/windows.zig	/^pub const SRWLOCK = extern struct {$/;"	struct
SRWLOCK_INIT	$ZIGLIB/std/os/windows.zig	/^pub const SRWLOCK_INIT = SRWLOCK{}/;"	constant
SSE3_INSTRUCTIONS_AVAILABLE	$ZIGLIB/std/os/windows.zig	/SSE3_INSTRUCTIONS_AVAILABLE = 13/;"	field
SSE4_1_INSTRUCTIONS_AVAILABLE	$ZIGLIB/std/os/windows.zig	/SSE4_1_INSTRUCTIONS_AVAILABLE = 37/;"	field
SSE4_2_INSTRUCTIONS_AVAILABLE	$ZIGLIB/std/os/windows.zig	/SSE4_2_INSTRUCTIONS_AVAILABLE = 38/;"	field
SSE_DAZ_MODE_AVAILABLE	$ZIGLIB/std/os/windows.zig	/SSE_DAZ_MODE_AVAILABLE = 11/;"	field
SSSE3_INSTRUCTIONS_AVAILABLE	$ZIGLIB/std/os/windows.zig	/SSSE3_INSTRUCTIONS_AVAILABLE = 36/;"	field
SS_AUTODISARM	$ZIGLIB/std/os/linux.zig	/^pub const SS_AUTODISARM = 1 << 31/;"	constant
SS_DISABLE	$ZIGLIB/std/os/linux.zig	/^pub const SS_DISABLE = 2/;"	constant
SS_MAXSIZE	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const SS_MAXSIZE = 128/;"	constant
SS_ONSTACK	$ZIGLIB/std/os/linux.zig	/^pub const SS_ONSTACK = 1/;"	constant
ST100	$ZIGLIB/std/elf.zig	/ST100 = 60/;"	field
ST19	$ZIGLIB/std/elf.zig	/ST19 = 74/;"	field
ST200	$ZIGLIB/std/elf.zig	/ST200 = 100/;"	field
ST9PLUS	$ZIGLIB/std/elf.zig	/ST9PLUS = 67/;"	field
STACK	$ZIGLIB/std/os/linux/sparc64.zig	/STACK/;"	field
STACKGAPRANDOM	$ZIGLIB/std/c/openbsd.zig	/pub const STACKGAPRANDOM = 50/;"	constant
STACK_BUFFER_OVERRUN	$ZIGLIB/std/os/windows/win32error.zig	/STACK_BUFFER_OVERRUN = 1282/;"	field
STACK_IMMD	$ZIGLIB/std/macho.zig	/STACK_IMMD = 2/;"	field
STACK_IND	$ZIGLIB/std/macho.zig	/STACK_IND = 3/;"	field
STACK_OVERFLOW	$ZIGLIB/std/os/windows/win32error.zig	/STACK_OVERFLOW = 1001/;"	field
STACK_OVERFLOW_READ	$ZIGLIB/std/os/windows/win32error.zig	/STACK_OVERFLOW_READ = 599/;"	field
STACK_USER	$ZIGLIB/std/os/linux.zig	/pub const STACK_USER = 8192/;"	constant
STALE	$ZIGLIB/std/os/wasi.zig	/STALE = 72/;"	field
STALLED_CYCLES_BACKEND	$ZIGLIB/std/os/linux.zig	/STALLED_CYCLES_BACKEND/;"	field
STALLED_CYCLES_FRONTEND	$ZIGLIB/std/os/linux.zig	/STALLED_CYCLES_FRONTEND/;"	field
STANDARD	$ZIGLIB/std/c/freebsd.zig	/pub const STANDARD = IN | PRI | OUT | RDNORM | RDBAND | WRBAND | ERR | HUP | NVAL/;"	constant
STANDARD_RIGHTS_EXECUTE	$ZIGLIB/std/os/windows.zig	/^pub const STANDARD_RIGHTS_EXECUTE = READ_CONTROL/;"	constant
STANDARD_RIGHTS_READ	$ZIGLIB/std/os/windows.zig	/^pub const STANDARD_RIGHTS_READ = READ_CONTROL/;"	constant
STANDARD_RIGHTS_REQUIRED	$ZIGLIB/std/os/windows.zig	/^pub const STANDARD_RIGHTS_REQUIRED = DELETE | READ_CONTROL | WRITE_DAC | WRITE_OWNER/;"	constant
STANDARD_RIGHTS_WRITE	$ZIGLIB/std/os/windows.zig	/^pub const STANDARD_RIGHTS_WRITE = READ_CONTROL/;"	constant
STARCORE	$ZIGLIB/std/elf.zig	/STARCORE = 58/;"	field
START	$ZIGLIB/std/os/linux.zig	/pub const START = 8/;"	constant
STARTF_FORCEOFFFEEDBACK	$ZIGLIB/std/os/windows.zig	/^pub const STARTF_FORCEOFFFEEDBACK = 0x00000080/;"	constant
STARTF_FORCEONFEEDBACK	$ZIGLIB/std/os/windows.zig	/^pub const STARTF_FORCEONFEEDBACK = 0x00000040/;"	constant
STARTF_PREVENTPINNING	$ZIGLIB/std/os/windows.zig	/^pub const STARTF_PREVENTPINNING = 0x00002000/;"	constant
STARTF_RUNFULLSCREEN	$ZIGLIB/std/os/windows.zig	/^pub const STARTF_RUNFULLSCREEN = 0x00000020/;"	constant
STARTF_TITLEISAPPID	$ZIGLIB/std/os/windows.zig	/^pub const STARTF_TITLEISAPPID = 0x00001000/;"	constant
STARTF_TITLEISLINKNAME	$ZIGLIB/std/os/windows.zig	/^pub const STARTF_TITLEISLINKNAME = 0x00000800/;"	constant
STARTF_UNTRUSTEDSOURCE	$ZIGLIB/std/os/windows.zig	/^pub const STARTF_UNTRUSTEDSOURCE = 0x00008000/;"	constant
STARTF_USECOUNTCHARS	$ZIGLIB/std/os/windows.zig	/^pub const STARTF_USECOUNTCHARS = 0x00000008/;"	constant
STARTF_USEFILLATTRIBUTE	$ZIGLIB/std/os/windows.zig	/^pub const STARTF_USEFILLATTRIBUTE = 0x00000010/;"	constant
STARTF_USEHOTKEY	$ZIGLIB/std/os/windows.zig	/^pub const STARTF_USEHOTKEY = 0x00000200/;"	constant
STARTF_USEPOSITION	$ZIGLIB/std/os/windows.zig	/^pub const STARTF_USEPOSITION = 0x00000004/;"	constant
STARTF_USESHOWWINDOW	$ZIGLIB/std/os/windows.zig	/^pub const STARTF_USESHOWWINDOW = 0x00000001/;"	constant
STARTF_USESIZE	$ZIGLIB/std/os/windows.zig	/^pub const STARTF_USESIZE = 0x00000002/;"	constant
STARTF_USESTDHANDLES	$ZIGLIB/std/os/windows.zig	/^pub const STARTF_USESTDHANDLES = 0x00000100/;"	constant
STARTUPINFOW	$ZIGLIB/std/os/windows.zig	/^pub const STARTUPINFOW = extern struct {$/;"	struct
STAT	$ZIGLIB/std/os/plan9.zig	/STAT = 42/;"	field
STATIC	$ZIGLIB/std/coff.zig	/STATIC = 3/;"	field
STATISTICS	$ZIGLIB/std/os/linux.zig	/pub const STATISTICS = 7/;"	constant
STATS	$ZIGLIB/std/os/linux.zig	/STATS/;"	field
STATS64	$ZIGLIB/std/os/linux.zig	/STATS64/;"	field
STATUS	$ZIGLIB/std/c/openbsd.zig	/pub const STATUS = 18/;"	constant
STATX	$ZIGLIB/std/os/linux.zig	/STATX/;"	field
STATX_ATIME	$ZIGLIB/std/os/linux.zig	/^pub const STATX_ATIME = 0x0020/;"	constant
STATX_ATTR_APPEND	$ZIGLIB/std/os/linux.zig	/^pub const STATX_ATTR_APPEND = 0x0020/;"	constant
STATX_ATTR_AUTOMOUNT	$ZIGLIB/std/os/linux.zig	/^pub const STATX_ATTR_AUTOMOUNT = 0x1000/;"	constant
STATX_ATTR_COMPRESSED	$ZIGLIB/std/os/linux.zig	/^pub const STATX_ATTR_COMPRESSED = 0x0004/;"	constant
STATX_ATTR_ENCRYPTED	$ZIGLIB/std/os/linux.zig	/^pub const STATX_ATTR_ENCRYPTED = 0x0800/;"	constant
STATX_ATTR_IMMUTABLE	$ZIGLIB/std/os/linux.zig	/^pub const STATX_ATTR_IMMUTABLE = 0x0010/;"	constant
STATX_ATTR_NODUMP	$ZIGLIB/std/os/linux.zig	/^pub const STATX_ATTR_NODUMP = 0x0040/;"	constant
STATX_BASIC_STATS	$ZIGLIB/std/os/linux.zig	/^pub const STATX_BASIC_STATS = 0x07ff/;"	constant
STATX_BLOCKS	$ZIGLIB/std/os/linux.zig	/^pub const STATX_BLOCKS = 0x0400/;"	constant
STATX_BTIME	$ZIGLIB/std/os/linux.zig	/^pub const STATX_BTIME = 0x0800/;"	constant
STATX_CTIME	$ZIGLIB/std/os/linux.zig	/^pub const STATX_CTIME = 0x0080/;"	constant
STATX_DONT_SYNC	$ZIGLIB/std/os/linux.zig	/pub const STATX_DONT_SYNC = 0x4000/;"	constant
STATX_FORCE_SYNC	$ZIGLIB/std/os/linux.zig	/pub const STATX_FORCE_SYNC = 0x2000/;"	constant
STATX_GID	$ZIGLIB/std/os/linux.zig	/^pub const STATX_GID = 0x0010/;"	constant
STATX_INO	$ZIGLIB/std/os/linux.zig	/^pub const STATX_INO = 0x0100/;"	constant
STATX_MODE	$ZIGLIB/std/os/linux.zig	/^pub const STATX_MODE = 0x0002/;"	constant
STATX_MTIME	$ZIGLIB/std/os/linux.zig	/^pub const STATX_MTIME = 0x0040/;"	constant
STATX_NLINK	$ZIGLIB/std/os/linux.zig	/^pub const STATX_NLINK = 0x0004/;"	constant
STATX_SIZE	$ZIGLIB/std/os/linux.zig	/^pub const STATX_SIZE = 0x0200/;"	constant
STATX_SYNC_AS_STAT	$ZIGLIB/std/os/linux.zig	/pub const STATX_SYNC_AS_STAT = 0x0000/;"	constant
STATX_SYNC_TYPE	$ZIGLIB/std/os/linux.zig	/pub const STATX_SYNC_TYPE = 0x6000/;"	constant
STATX_TYPE	$ZIGLIB/std/os/linux.zig	/^pub const STATX_TYPE = 0x0001/;"	constant
STATX_UID	$ZIGLIB/std/os/linux.zig	/^pub const STATX_UID = 0x0008/;"	constant
STB_GLOBAL	$ZIGLIB/std/elf.zig	/^pub const STB_GLOBAL = 1/;"	constant
STB_GNU_UNIQUE	$ZIGLIB/std/elf.zig	/^pub const STB_GNU_UNIQUE = 10/;"	constant
STB_HIOS	$ZIGLIB/std/elf.zig	/^pub const STB_HIOS = 12/;"	constant
STB_HIPROC	$ZIGLIB/std/elf.zig	/^pub const STB_HIPROC = 15/;"	constant
STB_LOCAL	$ZIGLIB/std/elf.zig	/^pub const STB_LOCAL = 0/;"	constant
STB_LOOS	$ZIGLIB/std/elf.zig	/^pub const STB_LOOS = 10/;"	constant
STB_LOPROC	$ZIGLIB/std/elf.zig	/^pub const STB_LOPROC = 13/;"	constant
STB_MIPS_SPLIT_COMMON	$ZIGLIB/std/elf.zig	/^pub const STB_MIPS_SPLIT_COMMON = 13/;"	constant
STB_NUM	$ZIGLIB/std/elf.zig	/^pub const STB_NUM = 3/;"	constant
STB_WEAK	$ZIGLIB/std/elf.zig	/^pub const STB_WEAK = 2/;"	constant
STDERR_FILENO	$ZIGLIB/std/os/wasi.zig	/^pub const STDERR_FILENO = 2/;"	constant
STDIN_FILENO	$ZIGLIB/std/os/wasi.zig	/^pub const STDIN_FILENO = 0/;"	constant
STDOUT_FILENO	$ZIGLIB/std/os/wasi.zig	/^pub const STDOUT_FILENO = 1/;"	constant
STDURG	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const STDURG = 6/;"	constant
STD_ERROR_HANDLE	$ZIGLIB/std/os/windows.zig	/^pub const STD_ERROR_HANDLE = maxInt(DWORD) - 12 + 1/;"	constant
STD_INPUT_HANDLE	$ZIGLIB/std/os/windows.zig	/^pub const STD_INPUT_HANDLE = maxInt(DWORD) - 10 + 1/;"	constant
STD_OUTPUT_HANDLE	$ZIGLIB/std/os/windows.zig	/^pub const STD_OUTPUT_HANDLE = maxInt(DWORD) - 11 + 1/;"	constant
STKFLT	$ZIGLIB/std/os/linux.zig	/pub const STKFLT = 16/;"	constant
STM8	$ZIGLIB/std/elf.zig	/STM8 = 186/;"	field
STOP	$ZIGLIB/std/os/linux.zig	/pub const STOP = 9/;"	constant
STOPPED	$ZIGLIB/std/os/linux.zig	/pub const STOPPED = 2/;"	constant
STOPPED_ON_SYMLINK	$ZIGLIB/std/os/windows/win32error.zig	/STOPPED_ON_SYMLINK = 681/;"	field
STOPSIG	$ZIGLIB/std/os/linux.zig	/pub fn STOPSIG(s: u32) u32 {$/;"	function
STREAM	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const STREAM = 1/;"	constant
STREAM_ID	$ZIGLIB/std/os/linux.zig	/pub const STREAM_ID = 512/;"	constant
STREAM_MINIVERSION_NOT_FOUND	$ZIGLIB/std/os/windows/ntstatus.zig	/STREAM_MINIVERSION_NOT_FOUND = 0xC0190022/;"	field
STREAM_MINIVERSION_NOT_VALID	$ZIGLIB/std/os/windows/ntstatus.zig	/STREAM_MINIVERSION_NOT_VALID = 0xC0190023/;"	field
STRICT	$ZIGLIB/std/os/linux/seccomp.zig	/pub const STRICT = 1/;"	constant
STRICTATIME	$ZIGLIB/std/os/linux.zig	/pub const STRICTATIME = (1 << 24)/;"	constant
STRONG_CRYPTO_NOT_SUPPORTED	$ZIGLIB/std/os/windows/ntstatus.zig	/STRONG_CRYPTO_NOT_SUPPORTED = 0xC00002F6/;"	field
STRPIPE	$ZIGLIB/std/os/linux/errno/sparc.zig	/STRPIPE = 91/;"	field
STRUCT	$ZIGLIB/std/coff.zig	/STRUCT = 8/;"	field
STRUCT_TAG	$ZIGLIB/std/coff.zig	/STRUCT_TAG = 10/;"	field
STRUNCATE	$ZIGLIB/std/c/windows.zig	/^pub const STRUNCATE = 80/;"	constant
STT_ARM_16BIT	$ZIGLIB/std/elf.zig	/^pub const STT_ARM_16BIT = STT_HIPROC/;"	constant
STT_ARM_TFUNC	$ZIGLIB/std/elf.zig	/^pub const STT_ARM_TFUNC = STT_LOPROC/;"	constant
STT_COMMON	$ZIGLIB/std/elf.zig	/^pub const STT_COMMON = 5/;"	constant
STT_FILE	$ZIGLIB/std/elf.zig	/^pub const STT_FILE = 4/;"	constant
STT_FUNC	$ZIGLIB/std/elf.zig	/^pub const STT_FUNC = 2/;"	constant
STT_GNU_IFUNC	$ZIGLIB/std/elf.zig	/^pub const STT_GNU_IFUNC = 10/;"	constant
STT_HIOS	$ZIGLIB/std/elf.zig	/^pub const STT_HIOS = 12/;"	constant
STT_HIPROC	$ZIGLIB/std/elf.zig	/^pub const STT_HIPROC = 15/;"	constant
STT_HP_OPAQUE	$ZIGLIB/std/elf.zig	/^pub const STT_HP_OPAQUE = (STT_LOOS + 0x1)/;"	constant
STT_HP_STUB	$ZIGLIB/std/elf.zig	/^pub const STT_HP_STUB = (STT_LOOS + 0x2)/;"	constant
STT_LOOS	$ZIGLIB/std/elf.zig	/^pub const STT_LOOS = 10/;"	constant
STT_LOPROC	$ZIGLIB/std/elf.zig	/^pub const STT_LOPROC = 13/;"	constant
STT_NOTYPE	$ZIGLIB/std/elf.zig	/^pub const STT_NOTYPE = 0/;"	constant
STT_NUM	$ZIGLIB/std/elf.zig	/^pub const STT_NUM = 7/;"	constant
STT_OBJECT	$ZIGLIB/std/elf.zig	/^pub const STT_OBJECT = 1/;"	constant
STT_PARISC_MILLICODE	$ZIGLIB/std/elf.zig	/^pub const STT_PARISC_MILLICODE = 13/;"	constant
STT_SECTION	$ZIGLIB/std/elf.zig	/^pub const STT_SECTION = 3/;"	constant
STT_SPARC_REGISTER	$ZIGLIB/std/elf.zig	/^pub const STT_SPARC_REGISTER = 13/;"	constant
STT_TLS	$ZIGLIB/std/elf.zig	/^pub const STT_TLS = 6/;"	constant
STXP7X	$ZIGLIB/std/elf.zig	/STXP7X = 166/;"	field
STYLE	$ZIGLIB/std/c/openbsd.zig	/pub const STYLE: auth_item_t = 5/;"	constant
SUBSCRIPTION_CLOCK_ABSTIME	$ZIGLIB/std/os/wasi.zig	/^pub const SUBSCRIPTION_CLOCK_ABSTIME: subclockflags_t = 0x0001/;"	constant
SUBST_TO_JOIN	$ZIGLIB/std/os/windows/win32error.zig	/SUBST_TO_JOIN = 141/;"	field
SUBST_TO_SUBST	$ZIGLIB/std/os/windows/win32error.zig	/SUBST_TO_SUBST = 139/;"	field
SUB_CLIENT	$ZIGLIB/std/macho.zig	/SUB_CLIENT = 0x14/;"	field
SUB_FRAMEWORK	$ZIGLIB/std/macho.zig	/SUB_FRAMEWORK = 0x12/;"	field
SUB_LIBRARY	$ZIGLIB/std/macho.zig	/SUB_LIBRARY = 0x15/;"	field
SUB_UMBRELLA	$ZIGLIB/std/macho.zig	/SUB_UMBRELLA = 0x13/;"	field
SUCCESS	$ZIGLIB/std/os/windows/win32error.zig	/SUCCESS = 0/;"	field
SUCCESS_REBOOT_INITIATED	$ZIGLIB/std/os/windows/win32error.zig	/SUCCESS_REBOOT_INITIATED = 1641/;"	field
SUCCESS_REBOOT_REQUIRED	$ZIGLIB/std/os/windows/win32error.zig	/SUCCESS_REBOOT_REQUIRED = 3010/;"	field
SUCCESS_RESTART_REQUIRED	$ZIGLIB/std/os/windows/win32error.zig	/SUCCESS_RESTART_REQUIRED = 3011/;"	field
SUSP	$ZIGLIB/std/os/linux.zig	/pub const SUSP = 12/;"	constant
SUSPEND_COUNT_EXCEEDED	$ZIGLIB/std/os/windows/ntstatus.zig	/SUSPEND_COUNT_EXCEEDED = 0xC000004A/;"	field
SVE_GET_VL	$ZIGLIB/std/os/linux.zig	/SVE_GET_VL = 51/;"	field
SVE_SET_VL	$ZIGLIB/std/os/linux.zig	/SVE_SET_VL = 50/;"	field
SVE_SET_VL_ONEXEC	$ZIGLIB/std/os/linux.zig	/pub const SVE_SET_VL_ONEXEC = 1 << 18/;"	constant
SVE_VL_INHERIT	$ZIGLIB/std/os/linux.zig	/pub const SVE_VL_INHERIT = 1 << 17/;"	constant
SVE_VL_LEN_MASK	$ZIGLIB/std/os/linux.zig	/pub const SVE_VL_LEN_MASK = 0xffff/;"	constant
SVMTP	$ZIGLIB/std/c/freebsd.zig	/pub const SVMTP = 82/;"	constant
SWAHILI	$ZIGLIB/std/os/windows/lang.zig	/^pub const SWAHILI = 0x41/;"	constant
SWAHILI_KENYA	$ZIGLIB/std/os/windows/sublang.zig	/^pub const SWAHILI_KENYA = 0x01/;"	constant
SWAP	$ZIGLIB/std/c/freebsd.zig	/SWAP = 12/;"	field
SWAPERROR	$ZIGLIB/std/os/windows/win32error.zig	/SWAPERROR = 999/;"	field
SWEDISH	$ZIGLIB/std/os/windows/sublang.zig	/^pub const SWEDISH = 0x01/;"	constant
SWEDISH_FINLAND	$ZIGLIB/std/os/windows/sublang.zig	/^pub const SWEDISH_FINLAND = 0x02/;"	constant
SWIFT	$ZIGLIB/std/macho.zig	/SWIFT = 0x2/;"	field
SWIPE	$ZIGLIB/std/c/freebsd.zig	/pub const SWIPE = 53/;"	constant
SWTC	$ZIGLIB/std/os/linux.zig	/pub const SWTC = 9/;"	constant
SWTCH	$ZIGLIB/std/os/linux.zig	/pub const SWTCH = 7/;"	constant
SW_FORCEMINIMIZE	$ZIGLIB/std/os/windows/user32.zig	/^pub const SW_FORCEMINIMIZE = 11/;"	constant
SW_HIDE	$ZIGLIB/std/os/windows/user32.zig	/^pub const SW_HIDE = 0/;"	constant
SW_MAX	$ZIGLIB/std/os/windows/user32.zig	/^pub const SW_MAX = 11/;"	constant
SW_MAXIMIZE	$ZIGLIB/std/os/windows/user32.zig	/^pub const SW_MAXIMIZE = 3/;"	constant
SW_MINIMIZE	$ZIGLIB/std/os/windows/user32.zig	/^pub const SW_MINIMIZE = 6/;"	constant
SW_NORMAL	$ZIGLIB/std/os/windows/user32.zig	/^pub const SW_NORMAL = 1/;"	constant
SW_RESTORE	$ZIGLIB/std/os/windows/user32.zig	/^pub const SW_RESTORE = 9/;"	constant
SW_SHOW	$ZIGLIB/std/os/windows/user32.zig	/^pub const SW_SHOW = 5/;"	constant
SW_SHOWDEFAULT	$ZIGLIB/std/os/windows/user32.zig	/^pub const SW_SHOWDEFAULT = 10/;"	constant
SW_SHOWMAXIMIZED	$ZIGLIB/std/os/windows/user32.zig	/^pub const SW_SHOWMAXIMIZED = 3/;"	constant
SW_SHOWMINIMIZED	$ZIGLIB/std/os/windows/user32.zig	/^pub const SW_SHOWMINIMIZED = 2/;"	constant
SW_SHOWMINNOACTIVE	$ZIGLIB/std/os/windows/user32.zig	/^pub const SW_SHOWMINNOACTIVE = 7/;"	constant
SW_SHOWNA	$ZIGLIB/std/os/windows/user32.zig	/^pub const SW_SHOWNA = 8/;"	constant
SW_SHOWNOACTIVATE	$ZIGLIB/std/os/windows/user32.zig	/^pub const SW_SHOWNOACTIVATE = 4/;"	constant
SW_SHOWNORMAL	$ZIGLIB/std/os/windows/user32.zig	/^pub const SW_SHOWNORMAL = 1/;"	constant
SW_SUSPEND	$ZIGLIB/std/os/linux.zig	/SW_SUSPEND = 0xD000FCE2/;"	field
SXS_ACTIVATION_CONTEXT_DISABLED	$ZIGLIB/std/os/windows/ntstatus.zig	/SXS_ACTIVATION_CONTEXT_DISABLED = 0xC0150007/;"	field
SXS_ASSEMBLY_IS_NOT_A_DEPLOYMENT	$ZIGLIB/std/os/windows/ntstatus.zig	/SXS_ASSEMBLY_IS_NOT_A_DEPLOYMENT = 0xC015001E/;"	field
SXS_ASSEMBLY_MISSING	$ZIGLIB/std/os/windows/ntstatus.zig	/SXS_ASSEMBLY_MISSING = 0xC015000C/;"	field
SXS_ASSEMBLY_NOT_FOUND	$ZIGLIB/std/os/windows/ntstatus.zig	/SXS_ASSEMBLY_NOT_FOUND = 0xC0150004/;"	field
SXS_CANT_GEN_ACTCTX	$ZIGLIB/std/os/windows/ntstatus.zig	/SXS_CANT_GEN_ACTCTX = 0xC0150002/;"	field
SXS_COMPONENT_STORE_CORRUPT	$ZIGLIB/std/os/windows/ntstatus.zig	/SXS_COMPONENT_STORE_CORRUPT = 0xC015001A/;"	field
SXS_CORRUPTION	$ZIGLIB/std/os/windows/ntstatus.zig	/SXS_CORRUPTION = 0xC0150015/;"	field
SXS_CORRUPT_ACTIVATION_STACK	$ZIGLIB/std/os/windows/ntstatus.zig	/SXS_CORRUPT_ACTIVATION_STACK = 0xC0150014/;"	field
SXS_EARLY_DEACTIVATION	$ZIGLIB/std/os/windows/ntstatus.zig	/SXS_EARLY_DEACTIVATION = 0xC015000F/;"	field
SXS_FILE_HASH_MISMATCH	$ZIGLIB/std/os/windows/ntstatus.zig	/SXS_FILE_HASH_MISMATCH = 0xC015001B/;"	field
SXS_FILE_HASH_MISSING	$ZIGLIB/std/os/windows/ntstatus.zig	/SXS_FILE_HASH_MISSING = 0xC0150027/;"	field
SXS_FILE_NOT_PART_OF_ASSEMBLY	$ZIGLIB/std/os/windows/ntstatus.zig	/SXS_FILE_NOT_PART_OF_ASSEMBLY = 0xC015001F/;"	field
SXS_IDENTITIES_DIFFERENT	$ZIGLIB/std/os/windows/ntstatus.zig	/SXS_IDENTITIES_DIFFERENT = 0xC015001D/;"	field
SXS_IDENTITY_DUPLICATE_ATTRIBUTE	$ZIGLIB/std/os/windows/ntstatus.zig	/SXS_IDENTITY_DUPLICATE_ATTRIBUTE = 0xC0150018/;"	field
SXS_IDENTITY_PARSE_ERROR	$ZIGLIB/std/os/windows/ntstatus.zig	/SXS_IDENTITY_PARSE_ERROR = 0xC0150019/;"	field
SXS_INVALID_ACTCTXDATA_FORMAT	$ZIGLIB/std/os/windows/ntstatus.zig	/SXS_INVALID_ACTCTXDATA_FORMAT = 0xC0150003/;"	field
SXS_INVALID_DEACTIVATION	$ZIGLIB/std/os/windows/ntstatus.zig	/SXS_INVALID_DEACTIVATION = 0xC0150010/;"	field
SXS_INVALID_IDENTITY_ATTRIBUTE_NAME	$ZIGLIB/std/os/windows/ntstatus.zig	/SXS_INVALID_IDENTITY_ATTRIBUTE_NAME = 0xC0150017/;"	field
SXS_INVALID_IDENTITY_ATTRIBUTE_VALUE	$ZIGLIB/std/os/windows/ntstatus.zig	/SXS_INVALID_IDENTITY_ATTRIBUTE_VALUE = 0xC0150016/;"	field
SXS_KEY_NOT_FOUND	$ZIGLIB/std/os/windows/ntstatus.zig	/SXS_KEY_NOT_FOUND = 0xC0150008/;"	field
SXS_MANIFEST_FORMAT_ERROR	$ZIGLIB/std/os/windows/ntstatus.zig	/SXS_MANIFEST_FORMAT_ERROR = 0xC0150005/;"	field
SXS_MANIFEST_IDENTITY_SAME_BUT_CONTENTS_DIFFERENT	$ZIGLIB/std/os/windows/ntstatus.zig	/SXS_MANIFEST_IDENTITY_SAME_BUT_CONTENTS_DIFFERENT = 0xC015001C/;"	field
SXS_MANIFEST_PARSE_ERROR	$ZIGLIB/std/os/windows/ntstatus.zig	/SXS_MANIFEST_PARSE_ERROR = 0xC0150006/;"	field
SXS_MANIFEST_TOO_BIG	$ZIGLIB/std/os/windows/ntstatus.zig	/SXS_MANIFEST_TOO_BIG = 0xC0150022/;"	field
SXS_MULTIPLE_DEACTIVATION	$ZIGLIB/std/os/windows/ntstatus.zig	/SXS_MULTIPLE_DEACTIVATION = 0xC0150011/;"	field
SXS_PROCESS_DEFAULT_ALREADY_SET	$ZIGLIB/std/os/windows/ntstatus.zig	/SXS_PROCESS_DEFAULT_ALREADY_SET = 0xC015000E/;"	field
SXS_PROCESS_TERMINATION_REQUESTED	$ZIGLIB/std/os/windows/ntstatus.zig	/SXS_PROCESS_TERMINATION_REQUESTED = 0xC0150013/;"	field
SXS_RELEASE_ACTIVATION_CONTEXT	$ZIGLIB/std/os/windows/ntstatus.zig	/SXS_RELEASE_ACTIVATION_CONTEXT = 0x4015000D/;"	field
SXS_SECTION_NOT_FOUND	$ZIGLIB/std/os/windows/ntstatus.zig	/SXS_SECTION_NOT_FOUND = 0xC0150001/;"	field
SXS_SETTING_NOT_REGISTERED	$ZIGLIB/std/os/windows/ntstatus.zig	/SXS_SETTING_NOT_REGISTERED = 0xC0150023/;"	field
SXS_SYSTEM_DEFAULT_ACTIVATION_CONTEXT_EMPTY	$ZIGLIB/std/os/windows/ntstatus.zig	/SXS_SYSTEM_DEFAULT_ACTIVATION_CONTEXT_EMPTY = 0xC0150012/;"	field
SXS_THREAD_QUERIES_DISABLED	$ZIGLIB/std/os/windows/ntstatus.zig	/SXS_THREAD_QUERIES_DISABLED = 0xC015000B/;"	field
SXS_TRANSACTION_CLOSURE_INCOMPLETE	$ZIGLIB/std/os/windows/ntstatus.zig	/SXS_TRANSACTION_CLOSURE_INCOMPLETE = 0xC0150024/;"	field
SXS_VERSION_CONFLICT	$ZIGLIB/std/os/windows/ntstatus.zig	/SXS_VERSION_CONFLICT = 0xC0150009/;"	field
SXS_WRONG_SECTION_TYPE	$ZIGLIB/std/os/windows/ntstatus.zig	/SXS_WRONG_SECTION_TYPE = 0xC015000A/;"	field
SYMBOLIC_LINK	$ZIGLIB/std/os/wasi.zig	/SYMBOLIC_LINK/;"	field
SYMBOLIC_LINK_FLAG_ALLOW_UNPRIVILEGED_CREATE	$ZIGLIB/std/os/windows.zig	/^pub const SYMBOLIC_LINK_FLAG_ALLOW_UNPRIVILEGED_CREATE: DWORD = 0x2/;"	constant
SYMBOLIC_LINK_FLAG_DIRECTORY	$ZIGLIB/std/os/windows.zig	/^pub const SYMBOLIC_LINK_FLAG_DIRECTORY: DWORD = 0x1/;"	constant
SYMBOLIC_LINK_REPARSE_BUFFER	$ZIGLIB/std/os/windows.zig	/^pub const SYMBOLIC_LINK_REPARSE_BUFFER = extern struct {$/;"	struct
SYMLINK	$ZIGLIB/std/c/darwin.zig	/pub const SYMLINK = 0x200000/;"	constant
SYMLINKAT	$ZIGLIB/std/os/linux.zig	/SYMLINKAT/;"	field
SYMLINK_CLASS_DISABLED	$ZIGLIB/std/os/windows/win32error.zig	/SYMLINK_CLASS_DISABLED = 1463/;"	field
SYMLINK_DATA	$ZIGLIB/std/os/windows.zig	/const SYMLINK_DATA = extern struct {$/;"	struct
SYMLINK_FLAG_RELATIVE	$ZIGLIB/std/os/windows.zig	/^pub const SYMLINK_FLAG_RELATIVE: ULONG = 0x1/;"	constant
SYMLINK_FOLLOW	$ZIGLIB/std/os/linux.zig	/pub const SYMLINK_FOLLOW = 0x400/;"	constant
SYMLINK_NOFOLLOW	$ZIGLIB/std/os/linux.zig	/pub const SYMLINK_NOFOLLOW = 0x100/;"	constant
SYMLINK_NOT_SUPPORTED	$ZIGLIB/std/os/windows/win32error.zig	/SYMLINK_NOT_SUPPORTED = 1464/;"	field
SYMMETRIC_KEY	$ZIGLIB/std/os/darwin/cssm.zig	/SYMMETRIC_KEY = DB_RECORDTYPE_OPEN_GROUP_START + 7/;"	field
SYMSEG	$ZIGLIB/std/macho.zig	/SYMSEG = 0x3/;"	field
SYMTAB	$ZIGLIB/std/macho.zig	/SYMTAB = 0x2/;"	field
SYNC	$ZIGLIB/std/os/wasi.zig	/pub const SYNC: fdflags_t = 0x0010/;"	constant
SYNCHRONIZATION_REQUIRED	$ZIGLIB/std/os/windows/win32error.zig	/SYNCHRONIZATION_REQUIRED = 569/;"	field
SYNCHRONIZE	$ZIGLIB/std/os/windows.zig	/^pub const SYNCHRONIZE = 0x00100000/;"	constant
SYNCHRONOUS	$ZIGLIB/std/os/linux.zig	/pub const SYNCHRONOUS = 16/;"	constant
SYNCHRONOUS_ALERT	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const SYNCHRONOUS_ALERT = 16/;"	constant
SYNCHRONOUS_NONALERT	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const SYNCHRONOUS_NONALERT = 32/;"	constant
SYNCNT	$ZIGLIB/std/os/linux.zig	/pub const SYNCNT = 7/;"	constant
SYNC_FILE_RANGE	$ZIGLIB/std/os/linux.zig	/SYNC_FILE_RANGE/;"	field
SYNC_FOREGROUND_REFRESH_REQUIRED	$ZIGLIB/std/os/windows/win32error.zig	/SYNC_FOREGROUND_REFRESH_REQUIRED = 1274/;"	field
SYRIAC	$ZIGLIB/std/os/windows/lang.zig	/^pub const SYRIAC = 0x5a/;"	constant
SYRIAC_SYRIA	$ZIGLIB/std/os/windows/sublang.zig	/^pub const SYRIAC_SYRIA = 0x01/;"	constant
SYSCALL	$ZIGLIB/std/c/darwin.zig	/SYSCALL = 7/;"	field
SYSLOG	$ZIGLIB/std/os/linux.zig	/pub const SYSLOG = 34/;"	constant
SYSPROTO_CONTROL	$ZIGLIB/std/c/darwin.zig	/^pub const SYSPROTO_CONTROL = 2/;"	constant
SYSPROTO_EVENT	$ZIGLIB/std/c/darwin.zig	/^pub const SYSPROTO_EVENT = 1/;"	constant
SYSR1	$ZIGLIB/std/os/plan9.zig	/SYSR1 = 0/;"	field
SYSTEM	$ZIGLIB/std/coff.zig	/SYSTEM: u1 = 0/;"	field
SYSTEM_DEVICE_NOT_FOUND	$ZIGLIB/std/os/windows/ntstatus.zig	/SYSTEM_DEVICE_NOT_FOUND = 0xC0000452/;"	field
SYSTEM_HIVE_TOO_LARGE	$ZIGLIB/std/os/windows/win32error.zig	/SYSTEM_HIVE_TOO_LARGE = 653/;"	field
SYSTEM_IMAGE_BAD_SIGNATURE	$ZIGLIB/std/os/windows/win32error.zig	/SYSTEM_IMAGE_BAD_SIGNATURE = 637/;"	field
SYSTEM_INFO	$ZIGLIB/std/os/windows.zig	/^pub const SYSTEM_INFO = extern struct {$/;"	struct
SYSTEM_POWERSTATE_COMPLEX_TRANSITION	$ZIGLIB/std/os/windows/win32error.zig	/SYSTEM_POWERSTATE_COMPLEX_TRANSITION = 783/;"	field
SYSTEM_POWERSTATE_TRANSITION	$ZIGLIB/std/os/windows/win32error.zig	/SYSTEM_POWERSTATE_TRANSITION = 782/;"	field
SYSTEM_PROCESS_TERMINATED	$ZIGLIB/std/os/windows/win32error.zig	/SYSTEM_PROCESS_TERMINATED = 591/;"	field
SYSTEM_SHUTDOWN	$ZIGLIB/std/os/windows/win32error.zig	/SYSTEM_SHUTDOWN = 641/;"	field
SYSTEM_TRACE	$ZIGLIB/std/os/windows/win32error.zig	/SYSTEM_TRACE = 150/;"	field
SYSVIPC_INFO	$ZIGLIB/std/c/openbsd.zig	/pub const SYSVIPC_INFO = 51/;"	constant
SYSVMSG	$ZIGLIB/std/c/openbsd.zig	/pub const SYSVMSG = 34/;"	constant
SYSVSEM	$ZIGLIB/std/os/linux.zig	/pub const SYSVSEM = 0x00040000/;"	constant
SYSVSHM	$ZIGLIB/std/c/openbsd.zig	/pub const SYSVSHM = 36/;"	constant
SYS_ADMIN	$ZIGLIB/std/os/linux.zig	/pub const SYS_ADMIN = 21/;"	constant
SYS_BOOT	$ZIGLIB/std/os/linux.zig	/pub const SYS_BOOT = 22/;"	constant
SYS_CHROOT	$ZIGLIB/std/os/linux.zig	/pub const SYS_CHROOT = 18/;"	constant
SYS_CONTROL	$ZIGLIB/std/c/darwin.zig	/pub const SYS_CONTROL = 2/;"	constant
SYS_DEFAULT	$ZIGLIB/std/os/windows/sublang.zig	/^pub const SYS_DEFAULT = 0x02/;"	constant
SYS_MODULE	$ZIGLIB/std/os/linux.zig	/pub const SYS_MODULE = 16/;"	constant
SYS_NICE	$ZIGLIB/std/os/linux.zig	/pub const SYS_NICE = 23/;"	constant
SYS_PACCT	$ZIGLIB/std/os/linux.zig	/pub const SYS_PACCT = 20/;"	constant
SYS_PTRACE	$ZIGLIB/std/os/linux.zig	/pub const SYS_PTRACE = 19/;"	constant
SYS_RAWIO	$ZIGLIB/std/os/linux.zig	/pub const SYS_RAWIO = 17/;"	constant
SYS_RESOURCE	$ZIGLIB/std/os/linux.zig	/pub const SYS_RESOURCE = 24/;"	constant
SYS_TIME	$ZIGLIB/std/os/linux.zig	/pub const SYS_TIME = 25/;"	constant
SYS_TTY_CONFIG	$ZIGLIB/std/os/linux.zig	/pub const SYS_TTY_CONFIG = 26/;"	constant
S_16BYTE_LITERALS	$ZIGLIB/std/macho.zig	/^pub const S_16BYTE_LITERALS = 0xe/;"	constant
S_4BYTE_LITERALS	$ZIGLIB/std/macho.zig	/^pub const S_4BYTE_LITERALS = 0x3/;"	constant
S_8BYTE_LITERALS	$ZIGLIB/std/macho.zig	/^pub const S_8BYTE_LITERALS = 0x4/;"	constant
S_ALIGN	$ZIGLIB/std/pdb.zig	/S_ALIGN = 1026/;"	field
S_ANNOTATION	$ZIGLIB/std/pdb.zig	/S_ANNOTATION = 4121/;"	field
S_ANNOTATIONREF	$ZIGLIB/std/pdb.zig	/S_ANNOTATIONREF = 4392/;"	field
S_ARMSWITCHTABLE	$ZIGLIB/std/pdb.zig	/S_ARMSWITCHTABLE = 4441/;"	field
S_ATTR_DEBUG	$ZIGLIB/std/macho.zig	/^pub const S_ATTR_DEBUG = 0x02000000/;"	constant
S_ATTR_EXT_RELOC	$ZIGLIB/std/macho.zig	/^pub const S_ATTR_EXT_RELOC = 0x200/;"	constant
S_ATTR_FRAMEREL	$ZIGLIB/std/pdb.zig	/S_ATTR_FRAMEREL = 4398/;"	field
S_ATTR_LIVE_SUPPORT	$ZIGLIB/std/macho.zig	/^pub const S_ATTR_LIVE_SUPPORT = 0x8000000/;"	constant
S_ATTR_LOC_RELOC	$ZIGLIB/std/macho.zig	/^pub const S_ATTR_LOC_RELOC = 0x100/;"	constant
S_ATTR_MANYREG	$ZIGLIB/std/pdb.zig	/S_ATTR_MANYREG = 4401/;"	field
S_ATTR_NO_DEAD_STRIP	$ZIGLIB/std/macho.zig	/^pub const S_ATTR_NO_DEAD_STRIP = 0x10000000/;"	constant
S_ATTR_NO_TOC	$ZIGLIB/std/macho.zig	/^pub const S_ATTR_NO_TOC = 0x40000000/;"	constant
S_ATTR_PURE_INSTRUCTIONS	$ZIGLIB/std/macho.zig	/^pub const S_ATTR_PURE_INSTRUCTIONS = 0x80000000/;"	constant
S_ATTR_REGISTER	$ZIGLIB/std/pdb.zig	/S_ATTR_REGISTER = 4399/;"	field
S_ATTR_REGREL	$ZIGLIB/std/pdb.zig	/S_ATTR_REGREL = 4400/;"	field
S_ATTR_SELF_MODIFYING_CODE	$ZIGLIB/std/macho.zig	/^pub const S_ATTR_SELF_MODIFYING_CODE = 0x4000000/;"	constant
S_ATTR_SOME_INSTRUCTIONS	$ZIGLIB/std/macho.zig	/^pub const S_ATTR_SOME_INSTRUCTIONS = 0x400/;"	constant
S_ATTR_STRIP_STATIC_SYMS	$ZIGLIB/std/macho.zig	/^pub const S_ATTR_STRIP_STATIC_SYMS = 0x20000000/;"	constant
S_BLOCK16	$ZIGLIB/std/pdb.zig	/S_BLOCK16 = 263/;"	field
S_BLOCK32	$ZIGLIB/std/pdb.zig	/S_BLOCK32 = 4355/;"	field
S_BLOCK32_ST	$ZIGLIB/std/pdb.zig	/S_BLOCK32_ST = 519/;"	field
S_BPREL16	$ZIGLIB/std/pdb.zig	/S_BPREL16 = 256/;"	field
S_BPREL32	$ZIGLIB/std/pdb.zig	/S_BPREL32 = 4363/;"	field
S_BPREL32_16t	$ZIGLIB/std/pdb.zig	/S_BPREL32_16t = 512/;"	field
S_BPREL32_ST	$ZIGLIB/std/pdb.zig	/S_BPREL32_ST = 4102/;"	field
S_BUILDINFO	$ZIGLIB/std/pdb.zig	/S_BUILDINFO = 4428/;"	field
S_CALLEES	$ZIGLIB/std/pdb.zig	/S_CALLEES = 4442/;"	field
S_CALLERS	$ZIGLIB/std/pdb.zig	/S_CALLERS = 4443/;"	field
S_CALLSITEINFO	$ZIGLIB/std/pdb.zig	/S_CALLSITEINFO = 4409/;"	field
S_CEXMODEL16	$ZIGLIB/std/pdb.zig	/S_CEXMODEL16 = 266/;"	field
S_CEXMODEL32	$ZIGLIB/std/pdb.zig	/S_CEXMODEL32 = 522/;"	field
S_COALESCED	$ZIGLIB/std/macho.zig	/^pub const S_COALESCED = 0xb/;"	constant
S_COBOLUDT	$ZIGLIB/std/pdb.zig	/S_COBOLUDT = 4361/;"	field
S_COBOLUDT_16t	$ZIGLIB/std/pdb.zig	/S_COBOLUDT_16t = 11/;"	field
S_COBOLUDT_ST	$ZIGLIB/std/pdb.zig	/S_COBOLUDT_ST = 4100/;"	field
S_COFFGROUP	$ZIGLIB/std/pdb.zig	/S_COFFGROUP = 4407/;"	field
S_COMPILE	$ZIGLIB/std/pdb.zig	/S_COMPILE = 1/;"	field
S_COMPILE2	$ZIGLIB/std/pdb.zig	/S_COMPILE2 = 4374/;"	field
S_COMPILE2_ST	$ZIGLIB/std/pdb.zig	/S_COMPILE2_ST = 4115/;"	field
S_COMPILE3	$ZIGLIB/std/pdb.zig	/S_COMPILE3 = 4412/;"	field
S_CONSTANT	$ZIGLIB/std/pdb.zig	/S_CONSTANT = 4359/;"	field
S_CONSTANT_16t	$ZIGLIB/std/pdb.zig	/S_CONSTANT_16t = 3/;"	field
S_CONSTANT_ST	$ZIGLIB/std/pdb.zig	/S_CONSTANT_ST = 4098/;"	field
S_CSTRING_LITERALS	$ZIGLIB/std/macho.zig	/^pub const S_CSTRING_LITERALS = 0x2/;"	constant
S_CVRESERVE	$ZIGLIB/std/pdb.zig	/S_CVRESERVE = 8/;"	field
S_DATAREF	$ZIGLIB/std/pdb.zig	/S_DATAREF = 4390/;"	field
S_DATAREF_ST	$ZIGLIB/std/pdb.zig	/S_DATAREF_ST = 1025/;"	field
S_DEFRANGE	$ZIGLIB/std/pdb.zig	/S_DEFRANGE = 4415/;"	field
S_DEFRANGE2_2005	$ZIGLIB/std/pdb.zig	/S_DEFRANGE2_2005 = 4405/;"	field
S_DEFRANGE_2005	$ZIGLIB/std/pdb.zig	/S_DEFRANGE_2005 = 4404/;"	field
S_DEFRANGE_DPC_PTR_TAG	$ZIGLIB/std/pdb.zig	/S_DEFRANGE_DPC_PTR_TAG = 4439/;"	field
S_DEFRANGE_FRAMEPOINTER_REL	$ZIGLIB/std/pdb.zig	/S_DEFRANGE_FRAMEPOINTER_REL = 4418/;"	field
S_DEFRANGE_FRAMEPOINTER_REL_FULL_SCOPE	$ZIGLIB/std/pdb.zig	/S_DEFRANGE_FRAMEPOINTER_REL_FULL_SCOPE = 4420/;"	field
S_DEFRANGE_HLSL	$ZIGLIB/std/pdb.zig	/S_DEFRANGE_HLSL = 4432/;"	field
S_DEFRANGE_REGISTER	$ZIGLIB/std/pdb.zig	/S_DEFRANGE_REGISTER = 4417/;"	field
S_DEFRANGE_REGISTER_REL	$ZIGLIB/std/pdb.zig	/S_DEFRANGE_REGISTER_REL = 4421/;"	field
S_DEFRANGE_SUBFIELD	$ZIGLIB/std/pdb.zig	/S_DEFRANGE_SUBFIELD = 4416/;"	field
S_DEFRANGE_SUBFIELD_REGISTER	$ZIGLIB/std/pdb.zig	/S_DEFRANGE_SUBFIELD_REGISTER = 4419/;"	field
S_DISCARDED	$ZIGLIB/std/pdb.zig	/S_DISCARDED = 4411/;"	field
S_DPC_SYM_TAG_MAP	$ZIGLIB/std/pdb.zig	/S_DPC_SYM_TAG_MAP = 4440/;"	field
S_DTRACE_DOF	$ZIGLIB/std/macho.zig	/^pub const S_DTRACE_DOF = 0xf/;"	constant
S_END	$ZIGLIB/std/pdb.zig	/S_END = 6/;"	field
S_ENDARG	$ZIGLIB/std/pdb.zig	/S_ENDARG = 10/;"	field
S_ENTRYTHIS	$ZIGLIB/std/pdb.zig	/S_ENTRYTHIS = 14/;"	field
S_ENVBLOCK	$ZIGLIB/std/pdb.zig	/S_ENVBLOCK = 4413/;"	field
S_EXPORT	$ZIGLIB/std/pdb.zig	/S_EXPORT = 4408/;"	field
S_FASTLINK	$ZIGLIB/std/pdb.zig	/S_FASTLINK = 4455/;"	field
S_FILESTATIC	$ZIGLIB/std/pdb.zig	/S_FILESTATIC = 4435/;"	field
S_FRAMECOOKIE	$ZIGLIB/std/pdb.zig	/S_FRAMECOOKIE = 4410/;"	field
S_FRAMEPROC	$ZIGLIB/std/pdb.zig	/S_FRAMEPROC = 4114/;"	field
S_GB_ZEROFILL	$ZIGLIB/std/macho.zig	/^pub const S_GB_ZEROFILL = 0xc/;"	constant
S_GDATA16	$ZIGLIB/std/pdb.zig	/S_GDATA16 = 258/;"	field
S_GDATA32	$ZIGLIB/std/pdb.zig	/S_GDATA32 = 4365/;"	field
S_GDATA32_16t	$ZIGLIB/std/pdb.zig	/S_GDATA32_16t = 514/;"	field
S_GDATA32_ST	$ZIGLIB/std/pdb.zig	/S_GDATA32_ST = 4104/;"	field
S_GDATA_HLSL	$ZIGLIB/std/pdb.zig	/S_GDATA_HLSL = 4433/;"	field
S_GDATA_HLSL32	$ZIGLIB/std/pdb.zig	/S_GDATA_HLSL32 = 4450/;"	field
S_GDATA_HLSL32_EX	$ZIGLIB/std/pdb.zig	/S_GDATA_HLSL32_EX = 4452/;"	field
S_GMANDATA	$ZIGLIB/std/pdb.zig	/S_GMANDATA = 4381/;"	field
S_GMANDATA_ST	$ZIGLIB/std/pdb.zig	/S_GMANDATA_ST = 4129/;"	field
S_GMANPROC	$ZIGLIB/std/pdb.zig	/S_GMANPROC = 4394/;"	field
S_GMANPROC_ST	$ZIGLIB/std/pdb.zig	/S_GMANPROC_ST = 4122/;"	field
S_GPROC16	$ZIGLIB/std/pdb.zig	/S_GPROC16 = 261/;"	field
S_GPROC32	$ZIGLIB/std/pdb.zig	/S_GPROC32 = 4368/;"	field
S_GPROC32_16t	$ZIGLIB/std/pdb.zig	/S_GPROC32_16t = 517/;"	field
S_GPROC32_ID	$ZIGLIB/std/pdb.zig	/S_GPROC32_ID = 4423/;"	field
S_GPROC32_ST	$ZIGLIB/std/pdb.zig	/S_GPROC32_ST = 4107/;"	field
S_GPROCIA64	$ZIGLIB/std/pdb.zig	/S_GPROCIA64 = 4377/;"	field
S_GPROCIA64_ID	$ZIGLIB/std/pdb.zig	/S_GPROCIA64_ID = 4427/;"	field
S_GPROCIA64_ST	$ZIGLIB/std/pdb.zig	/S_GPROCIA64_ST = 4118/;"	field
S_GPROCMIPS	$ZIGLIB/std/pdb.zig	/S_GPROCMIPS = 4373/;"	field
S_GPROCMIPS_16t	$ZIGLIB/std/pdb.zig	/S_GPROCMIPS_16t = 769/;"	field
S_GPROCMIPS_ID	$ZIGLIB/std/pdb.zig	/S_GPROCMIPS_ID = 4425/;"	field
S_GPROCMIPS_ST	$ZIGLIB/std/pdb.zig	/S_GPROCMIPS_ST = 4113/;"	field
S_GTHREAD32	$ZIGLIB/std/pdb.zig	/S_GTHREAD32 = 4371/;"	field
S_GTHREAD32_16t	$ZIGLIB/std/pdb.zig	/S_GTHREAD32_16t = 526/;"	field
S_GTHREAD32_ST	$ZIGLIB/std/pdb.zig	/S_GTHREAD32_ST = 4111/;"	field
S_HEAPALLOCSITE	$ZIGLIB/std/pdb.zig	/S_HEAPALLOCSITE = 4446/;"	field
S_INIT_FUNC_OFFSETS	$ZIGLIB/std/macho.zig	/^pub const S_INIT_FUNC_OFFSETS = 0x16/;"	constant
S_INLINEES	$ZIGLIB/std/pdb.zig	/S_INLINEES = 4456/;"	field
S_INLINESITE	$ZIGLIB/std/pdb.zig	/S_INLINESITE = 4429/;"	field
S_INLINESITE2	$ZIGLIB/std/pdb.zig	/S_INLINESITE2 = 4445/;"	field
S_INLINESITE_END	$ZIGLIB/std/pdb.zig	/S_INLINESITE_END = 4430/;"	field
S_INTERPOSING	$ZIGLIB/std/macho.zig	/^pub const S_INTERPOSING = 0xd/;"	constant
S_LABEL16	$ZIGLIB/std/pdb.zig	/S_LABEL16 = 265/;"	field
S_LABEL32	$ZIGLIB/std/pdb.zig	/S_LABEL32 = 4357/;"	field
S_LABEL32_ST	$ZIGLIB/std/pdb.zig	/S_LABEL32_ST = 521/;"	field
S_LAZY_DYLIB_SYMBOL_POINTERS	$ZIGLIB/std/macho.zig	/^pub const S_LAZY_DYLIB_SYMBOL_POINTERS = 0x10/;"	constant
S_LAZY_SYMBOL_POINTERS	$ZIGLIB/std/macho.zig	/^pub const S_LAZY_SYMBOL_POINTERS = 0x7/;"	constant
S_LDATA16	$ZIGLIB/std/pdb.zig	/S_LDATA16 = 257/;"	field
S_LDATA32	$ZIGLIB/std/pdb.zig	/S_LDATA32 = 4364/;"	field
S_LDATA32_16t	$ZIGLIB/std/pdb.zig	/S_LDATA32_16t = 513/;"	field
S_LDATA32_ST	$ZIGLIB/std/pdb.zig	/S_LDATA32_ST = 4103/;"	field
S_LDATA_HLSL	$ZIGLIB/std/pdb.zig	/S_LDATA_HLSL = 4434/;"	field
S_LDATA_HLSL32	$ZIGLIB/std/pdb.zig	/S_LDATA_HLSL32 = 4451/;"	field
S_LDATA_HLSL32_EX	$ZIGLIB/std/pdb.zig	/S_LDATA_HLSL32_EX = 4453/;"	field
S_LITERAL_POINTERS	$ZIGLIB/std/macho.zig	/^pub const S_LITERAL_POINTERS = 0x5/;"	constant
S_LMANDATA	$ZIGLIB/std/pdb.zig	/S_LMANDATA = 4380/;"	field
S_LMANDATA_ST	$ZIGLIB/std/pdb.zig	/S_LMANDATA_ST = 4128/;"	field
S_LMANPROC	$ZIGLIB/std/pdb.zig	/S_LMANPROC = 4395/;"	field
S_LMANPROC_ST	$ZIGLIB/std/pdb.zig	/S_LMANPROC_ST = 4123/;"	field
S_LOCAL	$ZIGLIB/std/pdb.zig	/S_LOCAL = 4414/;"	field
S_LOCALSLOT	$ZIGLIB/std/pdb.zig	/S_LOCALSLOT = 4378/;"	field
S_LOCALSLOT_ST	$ZIGLIB/std/pdb.zig	/S_LOCALSLOT_ST = 4119/;"	field
S_LOCAL_2005	$ZIGLIB/std/pdb.zig	/S_LOCAL_2005 = 4403/;"	field
S_LOCAL_DPC_GROUPSHARED	$ZIGLIB/std/pdb.zig	/S_LOCAL_DPC_GROUPSHARED = 4436/;"	field
S_LPROC16	$ZIGLIB/std/pdb.zig	/S_LPROC16 = 260/;"	field
S_LPROC32	$ZIGLIB/std/pdb.zig	/S_LPROC32 = 4367/;"	field
S_LPROC32_16t	$ZIGLIB/std/pdb.zig	/S_LPROC32_16t = 516/;"	field
S_LPROC32_DPC	$ZIGLIB/std/pdb.zig	/S_LPROC32_DPC = 4437/;"	field
S_LPROC32_DPC_ID	$ZIGLIB/std/pdb.zig	/S_LPROC32_DPC_ID = 4438/;"	field
S_LPROC32_ID	$ZIGLIB/std/pdb.zig	/S_LPROC32_ID = 4422/;"	field
S_LPROC32_ST	$ZIGLIB/std/pdb.zig	/S_LPROC32_ST = 4106/;"	field
S_LPROCIA64	$ZIGLIB/std/pdb.zig	/S_LPROCIA64 = 4376/;"	field
S_LPROCIA64_ID	$ZIGLIB/std/pdb.zig	/S_LPROCIA64_ID = 4426/;"	field
S_LPROCIA64_ST	$ZIGLIB/std/pdb.zig	/S_LPROCIA64_ST = 4117/;"	field
S_LPROCMIPS	$ZIGLIB/std/pdb.zig	/S_LPROCMIPS = 4372/;"	field
S_LPROCMIPS_16t	$ZIGLIB/std/pdb.zig	/S_LPROCMIPS_16t = 768/;"	field
S_LPROCMIPS_ID	$ZIGLIB/std/pdb.zig	/S_LPROCMIPS_ID = 4424/;"	field
S_LPROCMIPS_ST	$ZIGLIB/std/pdb.zig	/S_LPROCMIPS_ST = 4112/;"	field
S_LPROCREF	$ZIGLIB/std/pdb.zig	/S_LPROCREF = 4391/;"	field
S_LPROCREF_ST	$ZIGLIB/std/pdb.zig	/S_LPROCREF_ST = 1027/;"	field
S_LTHREAD32	$ZIGLIB/std/pdb.zig	/S_LTHREAD32 = 4370/;"	field
S_LTHREAD32_16t	$ZIGLIB/std/pdb.zig	/S_LTHREAD32_16t = 525/;"	field
S_LTHREAD32_ST	$ZIGLIB/std/pdb.zig	/S_LTHREAD32_ST = 4110/;"	field
S_MANCONSTANT	$ZIGLIB/std/pdb.zig	/S_MANCONSTANT = 4397/;"	field
S_MANFRAMEREL	$ZIGLIB/std/pdb.zig	/S_MANFRAMEREL = 4382/;"	field
S_MANFRAMEREL_ST	$ZIGLIB/std/pdb.zig	/S_MANFRAMEREL_ST = 4130/;"	field
S_MANMANYREG	$ZIGLIB/std/pdb.zig	/S_MANMANYREG = 4385/;"	field
S_MANMANYREG2	$ZIGLIB/std/pdb.zig	/S_MANMANYREG2 = 4387/;"	field
S_MANMANYREG2_ST	$ZIGLIB/std/pdb.zig	/S_MANMANYREG2_ST = 4135/;"	field
S_MANMANYREG_ST	$ZIGLIB/std/pdb.zig	/S_MANMANYREG_ST = 4133/;"	field
S_MANREGISTER	$ZIGLIB/std/pdb.zig	/S_MANREGISTER = 4383/;"	field
S_MANREGISTER_ST	$ZIGLIB/std/pdb.zig	/S_MANREGISTER_ST = 4131/;"	field
S_MANREGREL	$ZIGLIB/std/pdb.zig	/S_MANREGREL = 4386/;"	field
S_MANREGREL_ST	$ZIGLIB/std/pdb.zig	/S_MANREGREL_ST = 4134/;"	field
S_MANSLOT	$ZIGLIB/std/pdb.zig	/S_MANSLOT = 4384/;"	field
S_MANSLOT_ST	$ZIGLIB/std/pdb.zig	/S_MANSLOT_ST = 4132/;"	field
S_MANTYPREF	$ZIGLIB/std/pdb.zig	/S_MANTYPREF = 4136/;"	field
S_MANYREG	$ZIGLIB/std/pdb.zig	/S_MANYREG = 4362/;"	field
S_MANYREG2	$ZIGLIB/std/pdb.zig	/S_MANYREG2 = 4375/;"	field
S_MANYREG2_ST	$ZIGLIB/std/pdb.zig	/S_MANYREG2_ST = 4116/;"	field
S_MANYREG_16t	$ZIGLIB/std/pdb.zig	/S_MANYREG_16t = 12/;"	field
S_MANYREG_ST	$ZIGLIB/std/pdb.zig	/S_MANYREG_ST = 4101/;"	field
S_MOD_INIT_FUNC_POINTERS	$ZIGLIB/std/macho.zig	/^pub const S_MOD_INIT_FUNC_POINTERS = 0x9/;"	constant
S_MOD_TERM_FUNC_POINTERS	$ZIGLIB/std/macho.zig	/^pub const S_MOD_TERM_FUNC_POINTERS = 0xa/;"	constant
S_MOD_TYPEREF	$ZIGLIB/std/pdb.zig	/S_MOD_TYPEREF = 4447/;"	field
S_NON_LAZY_SYMBOL_POINTERS	$ZIGLIB/std/macho.zig	/^pub const S_NON_LAZY_SYMBOL_POINTERS = 0x6/;"	constant
S_OBJNAME	$ZIGLIB/std/pdb.zig	/S_OBJNAME = 4353/;"	field
S_OBJNAME_ST	$ZIGLIB/std/pdb.zig	/S_OBJNAME_ST = 9/;"	field
S_OEM	$ZIGLIB/std/pdb.zig	/S_OEM = 1028/;"	field
S_OK	$ZIGLIB/std/os/windows.zig	/^pub const S_OK = 0/;"	constant
S_PARAMSLOT	$ZIGLIB/std/pdb.zig	/S_PARAMSLOT = 4379/;"	field
S_PARAMSLOT_ST	$ZIGLIB/std/pdb.zig	/S_PARAMSLOT_ST = 4120/;"	field
S_PDBMAP	$ZIGLIB/std/pdb.zig	/S_PDBMAP = 4449/;"	field
S_POGODATA	$ZIGLIB/std/pdb.zig	/S_POGODATA = 4444/;"	field
S_PROCREF	$ZIGLIB/std/pdb.zig	/S_PROCREF = 4389/;"	field
S_PROCREF_ST	$ZIGLIB/std/pdb.zig	/S_PROCREF_ST = 1024/;"	field
S_PROC_ID_END	$ZIGLIB/std/pdb.zig	/S_PROC_ID_END = 4431/;"	field
S_PUB16	$ZIGLIB/std/pdb.zig	/S_PUB16 = 259/;"	field
S_PUB32	$ZIGLIB/std/pdb.zig	/S_PUB32 = 4366/;"	field
S_PUB32_16t	$ZIGLIB/std/pdb.zig	/S_PUB32_16t = 515/;"	field
S_PUB32_ST	$ZIGLIB/std/pdb.zig	/S_PUB32_ST = 4105/;"	field
S_REF_MINIPDB	$ZIGLIB/std/pdb.zig	/S_REF_MINIPDB = 4448/;"	field
S_REGISTER	$ZIGLIB/std/pdb.zig	/S_REGISTER = 4358/;"	field
S_REGISTER_16t	$ZIGLIB/std/pdb.zig	/S_REGISTER_16t = 2/;"	field
S_REGISTER_ST	$ZIGLIB/std/pdb.zig	/S_REGISTER_ST = 4097/;"	field
S_REGREL16	$ZIGLIB/std/pdb.zig	/S_REGREL16 = 268/;"	field
S_REGREL32	$ZIGLIB/std/pdb.zig	/S_REGREL32 = 4369/;"	field
S_REGREL32_16t	$ZIGLIB/std/pdb.zig	/S_REGREL32_16t = 524/;"	field
S_REGREL32_ST	$ZIGLIB/std/pdb.zig	/S_REGREL32_ST = 4109/;"	field
S_REGULAR	$ZIGLIB/std/macho.zig	/^pub const S_REGULAR = 0x0/;"	constant
S_RESERVED1	$ZIGLIB/std/pdb.zig	/S_RESERVED1 = 4124/;"	field
S_RESERVED2	$ZIGLIB/std/pdb.zig	/S_RESERVED2 = 4125/;"	field
S_RESERVED3	$ZIGLIB/std/pdb.zig	/S_RESERVED3 = 4126/;"	field
S_RESERVED4	$ZIGLIB/std/pdb.zig	/S_RESERVED4 = 4127/;"	field
S_RETURN	$ZIGLIB/std/pdb.zig	/S_RETURN = 13/;"	field
S_SECTION	$ZIGLIB/std/pdb.zig	/S_SECTION = 4406/;"	field
S_SEPCODE	$ZIGLIB/std/pdb.zig	/S_SEPCODE = 4402/;"	field
S_SKIP	$ZIGLIB/std/pdb.zig	/S_SKIP = 7/;"	field
S_SLINK32	$ZIGLIB/std/pdb.zig	/S_SLINK32 = 527/;"	field
S_SSEARCH	$ZIGLIB/std/pdb.zig	/S_SSEARCH = 5/;"	field
S_ST_MAX	$ZIGLIB/std/pdb.zig	/S_ST_MAX = 4352/;"	field
S_SYMBOL_STUBS	$ZIGLIB/std/macho.zig	/^pub const S_SYMBOL_STUBS = 0x8/;"	constant
S_THREAD_LOCAL_INIT_FUNCTION_POINTERS	$ZIGLIB/std/macho.zig	/^pub const S_THREAD_LOCAL_INIT_FUNCTION_POINTERS = 0x15/;"	constant
S_THREAD_LOCAL_REGULAR	$ZIGLIB/std/macho.zig	/^pub const S_THREAD_LOCAL_REGULAR = 0x11/;"	constant
S_THREAD_LOCAL_VARIABLES	$ZIGLIB/std/macho.zig	/^pub const S_THREAD_LOCAL_VARIABLES = 0x13/;"	constant
S_THREAD_LOCAL_VARIABLE_POINTERS	$ZIGLIB/std/macho.zig	/^pub const S_THREAD_LOCAL_VARIABLE_POINTERS = 0x14/;"	constant
S_THREAD_LOCAL_ZEROFILL	$ZIGLIB/std/macho.zig	/^pub const S_THREAD_LOCAL_ZEROFILL = 0x12/;"	constant
S_THUNK16	$ZIGLIB/std/pdb.zig	/S_THUNK16 = 262/;"	field
S_THUNK32	$ZIGLIB/std/pdb.zig	/S_THUNK32 = 4354/;"	field
S_THUNK32_ST	$ZIGLIB/std/pdb.zig	/S_THUNK32_ST = 518/;"	field
S_TI16_MAX	$ZIGLIB/std/pdb.zig	/S_TI16_MAX = 4096/;"	field
S_TOKENREF	$ZIGLIB/std/pdb.zig	/S_TOKENREF = 4393/;"	field
S_TRAMPOLINE	$ZIGLIB/std/pdb.zig	/S_TRAMPOLINE = 4396/;"	field
S_UDT	$ZIGLIB/std/pdb.zig	/S_UDT = 4360/;"	field
S_UDT_16t	$ZIGLIB/std/pdb.zig	/S_UDT_16t = 4/;"	field
S_UDT_ST	$ZIGLIB/std/pdb.zig	/S_UDT_ST = 4099/;"	field
S_UNAMESPACE	$ZIGLIB/std/pdb.zig	/S_UNAMESPACE = 4388/;"	field
S_UNAMESPACE_ST	$ZIGLIB/std/pdb.zig	/S_UNAMESPACE_ST = 4137/;"	field
S_VFTABLE16	$ZIGLIB/std/pdb.zig	/S_VFTABLE16 = 267/;"	field
S_VFTABLE32	$ZIGLIB/std/pdb.zig	/S_VFTABLE32 = 4108/;"	field
S_VFTABLE32_16t	$ZIGLIB/std/pdb.zig	/S_VFTABLE32_16t = 523/;"	field
S_WITH16	$ZIGLIB/std/pdb.zig	/S_WITH16 = 264/;"	field
S_WITH32	$ZIGLIB/std/pdb.zig	/S_WITH32 = 4356/;"	field
S_WITH32_ST	$ZIGLIB/std/pdb.zig	/S_WITH32_ST = 520/;"	field
S_ZEROFILL	$ZIGLIB/std/macho.zig	/^pub const S_ZEROFILL = 0x1/;"	constant
SafeBootMode	$ZIGLIB/std/os/windows.zig	/SafeBootMode: BOOLEAN/;"	field
Salsa	$ZIGLIB/std/crypto/salsa20.zig	/^pub fn Salsa(comptime rounds: comptime_int) type {$/;"	function
Salsa20	$ZIGLIB/std/crypto/salsa20.zig	/^pub const Salsa20 = Salsa(20)/;"	constant
SalsaImpl	$ZIGLIB/std/crypto/salsa20.zig	/^const SalsaImpl = if (builtin.cpu.arch == .x86_64) SalsaVecImpl else SalsaNonVecImpl/;"	constant
SalsaNonVecImpl	$ZIGLIB/std/crypto/salsa20.zig	/^fn SalsaNonVecImpl(comptime rounds: comptime_int) type {$/;"	function
SalsaVecImpl	$ZIGLIB/std/crypto/salsa20.zig	/^fn SalsaVecImpl(comptime rounds: comptime_int) type {$/;"	function
SampleMaskOverrideCoverageNV	$ZIGLIB/std/target/spirv.zig	/SampleMaskOverrideCoverageNV/;"	field
SampleMaskPostDepthCoverage	$ZIGLIB/std/target/spirv.zig	/SampleMaskPostDepthCoverage/;"	field
SampleRateShading	$ZIGLIB/std/target/spirv.zig	/SampleRateShading/;"	field
Sampled1D	$ZIGLIB/std/target/spirv.zig	/Sampled1D/;"	field
SampledBuffer	$ZIGLIB/std/target/spirv.zig	/SampledBuffer/;"	field
SampledCubeArray	$ZIGLIB/std/target/spirv.zig	/SampledCubeArray/;"	field
SampledImageArrayDynamicIndexing	$ZIGLIB/std/target/spirv.zig	/SampledImageArrayDynamicIndexing/;"	field
SampledImageArrayNonUniformIndexing	$ZIGLIB/std/target/spirv.zig	/SampledImageArrayNonUniformIndexing/;"	field
SampledImageArrayNonUniformIndexingEXT	$ZIGLIB/std/target/spirv.zig	/SampledImageArrayNonUniformIndexingEXT/;"	field
SampledRect	$ZIGLIB/std/target/spirv.zig	/SampledRect/;"	field
Sata	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/Sata: *const SataDevicePath/;"	field
SataDevicePath	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/pub const SataDevicePath = extern struct {$/;"	struct
Scalar	$ZIGLIB/std/crypto/pcurves/secp256k1/scalar.zig	/^pub const Scalar = struct {$/;"	struct
ScalarDouble	$ZIGLIB/std/crypto/pcurves/secp256k1/scalar.zig	/^const ScalarDouble = struct {$/;"	struct
SchedGetAffinityError	$ZIGLIB/std/os.zig	/^pub const SchedGetAffinityError = error{PermissionDenied} || UnexpectedError/;"	constant
Scheme	$ZIGLIB/std/crypto/ecdsa.zig	/const Scheme = EcdsaSecp256k1Sha256oSha256/;"	constant
SchemeEcdsa	$ZIGLIB/std/crypto/tls/Client.zig	/^fn SchemeEcdsa(comptime scheme: tls.SignatureScheme) type {$/;"	function
Scientific	$ZIGLIB/std/fmt/errol.zig	/Scientific/;"	field
ScopeLevel	$ZIGLIB/std/log.zig	/^pub const ScopeLevel = struct {$/;"	struct
ScopedLoggingAllocator	$ZIGLIB/std/heap/logging_allocator.zig	/^pub fn ScopedLoggingAllocator($/;"	function
Scsi	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/Scsi: *const ScsiDevicePath/;"	field
ScsiDevicePath	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/pub const ScsiDevicePath = extern struct {$/;"	struct
SealedBox	$ZIGLIB/std/crypto/salsa20.zig	/^pub const SealedBox = struct {$/;"	struct
Search	$ZIGLIB/std/os/windows.zig	/Search: BYTE/;"	field
SecOffset	$ZIGLIB/std/dwarf.zig	/SecOffset: u64/;"	field
Secondary	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/Secondary = 1/;"	field
Secp256k1	$ZIGLIB/std/crypto/pcurves/secp256k1.zig	/^pub const Secp256k1 = struct {$/;"	struct
SecretBox	$ZIGLIB/std/crypto/salsa20.zig	/^pub const SecretBox = struct {$/;"	struct
SecretKey	$ZIGLIB/std/crypto/ecdsa.zig	/pub const SecretKey = struct {$/;"	struct
Section	$ZIGLIB/std/wasm.zig	/^pub const Section = enum(u8) {$/;"	enum
SectionContr	$ZIGLIB/std/pdb.zig	/SectionContr: SectionContribEntry/;"	field
SectionContrSubstreamVersion	$ZIGLIB/std/pdb.zig	/^pub const SectionContrSubstreamVersion = enum(u32) {$/;"	enum
SectionContribEntry	$ZIGLIB/std/pdb.zig	/^pub const SectionContribEntry = extern struct {$/;"	struct
SectionContributionSize	$ZIGLIB/std/pdb.zig	/SectionContributionSize: u32/;"	field
SectionDefinition	$ZIGLIB/std/coff.zig	/^pub const SectionDefinition = struct {$/;"	struct
SectionHeader	$ZIGLIB/std/coff.zig	/^pub const SectionHeader = extern struct {$/;"	struct
SectionHeaderFlags	$ZIGLIB/std/coff.zig	/^pub const SectionHeaderFlags = packed struct {$/;"	struct
SectionHeaderIterator	$ZIGLIB/std/elf.zig	/^pub fn SectionHeaderIterator(comptime ParseSource: anytype) type {$/;"	function
SectionIterator	$ZIGLIB/std/Ini.zig	/^pub const SectionIterator = struct {$/;"	struct
SectionLength	$ZIGLIB/std/pdb.zig	/SectionLength: u32/;"	field
SectionMapEntry	$ZIGLIB/std/pdb.zig	/^pub const SectionMapEntry = extern struct {$/;"	struct
SectionMapHeader	$ZIGLIB/std/pdb.zig	/^pub const SectionMapHeader = extern struct {$/;"	struct
SectionMapSize	$ZIGLIB/std/pdb.zig	/SectionMapSize: u32/;"	field
SectionName	$ZIGLIB/std/pdb.zig	/SectionName: u16/;"	field
SectionNumber	$ZIGLIB/std/coff.zig	/^pub const SectionNumber = enum(u16) {$/;"	enum
SecurityDescriptor	$ZIGLIB/std/os/windows.zig	/SecurityDescriptor: ?*anyopaque/;"	field
SecurityQualityOfService	$ZIGLIB/std/os/windows.zig	/SecurityQualityOfService: ?*anyopaque/;"	field
SecurityViolation	$ZIGLIB/std/os/uefi/status.zig	/SecurityViolation = high_bit | 26/;"	field
SeekError	$ZIGLIB/std/os/uefi/protocols/file_protocol.zig	/pub const SeekError = error{SeekError}/;"	constant
SeekableStream	$ZIGLIB/std/os/uefi/protocols/file_protocol.zig	/pub const SeekableStream = io.SeekableStream(*const FileProtocol, SeekError, GetSeekPosError, seekTo, seekBy, getPos, getEndPos)/;"	constant
SegCs	$ZIGLIB/std/os/windows.zig	/SegCs: WORD/;"	field
SegDs	$ZIGLIB/std/os/windows.zig	/SegDs: WORD/;"	field
SegEs	$ZIGLIB/std/os/windows.zig	/SegEs: WORD/;"	field
SegFs	$ZIGLIB/std/os/windows.zig	/SegFs: WORD/;"	field
SegGs	$ZIGLIB/std/os/windows.zig	/SegGs: WORD/;"	field
SegSs	$ZIGLIB/std/os/windows.zig	/SegSs: WORD/;"	field
Segment	$ZIGLIB/std/pdb.zig	/Segment: u16/;"	field
SegmentedList	$ZIGLIB/std/segmented_list.zig	/^pub fn SegmentedList(comptime T: type, comptime prealloc_item_count: usize) type {$/;"	function
Selector	$ZIGLIB/std/crypto/ghash_polyval.zig	/const Selector = enum { lo, hi, hi_lo }/;"	enum
Self	$ZIGLIB/std/zig/render.zig	/const Self = @This()/;"	constant
SelfChannel	$ZIGLIB/std/event/channel.zig	/const SelfChannel = @This()/;"	constant
SelfExePathError	$ZIGLIB/std/fs.zig	/^pub const SelfExePathError = os.ReadLinkError || os.SysCtlError || os.RealPathError/;"	constant
SelfType	$ZIGLIB/std/fmt.zig	/const SelfType = @This()/;"	constant
SemVer	$ZIGLIB/std/zig/CrossTarget.zig	/^pub const SemVer = std.builtin.Version/;"	constant
Semaphore	$ZIGLIB/std/Thread/Semaphore.zig	/^const Semaphore = @This()/;"	constant
Semicolon	$ZIGLIB/std/c/tokenizer.zig	/Semicolon/;"	field
SendError	$ZIGLIB/std/os.zig	/^pub const SendError = error{$/;"	constant
SendFileError	$ZIGLIB/std/os.zig	/^pub const SendFileError = PReadError || WriteError || SendError/;"	constant
SendMsgError	$ZIGLIB/std/os.zig	/^pub const SendMsgError = SendError || error{$/;"	constant
SendToError	$ZIGLIB/std/os.zig	/^pub const SendToError = SendMsgError || error{$/;"	constant
SendingFlowspec	$ZIGLIB/std/os/windows/ws2_32.zig	/SendingFlowspec: FLOWSPEC/;"	field
Sentinel	$ZIGLIB/std/meta.zig	/^pub fn Sentinel(comptime T: type, comptime sentinel_val: Elem(T)) type {$/;"	function
SentinelSlice	$ZIGLIB/std/array_list.zig	/pub fn SentinelSlice(comptime s: T) type {$/;"	function
SeqCst	$ZIGLIB/std/builtin.zig	/SeqCst/;"	field
Service	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/Service = 1/;"	field
ServiceType	$ZIGLIB/std/os/windows/ws2_32.zig	/ServiceType: u32/;"	field
SessionId	$ZIGLIB/std/os/windows.zig	/SessionId: ULONG/;"	field
SetConsoleCtrlHandler	$ZIGLIB/std/os/windows.zig	/^pub fn SetConsoleCtrlHandler(handler_routine: ?HANDLER_ROUTINE, add: bool) !void {$/;"	function
SetConsoleTextAttribute	$ZIGLIB/std/os/windows.zig	/^pub fn SetConsoleTextAttribute(hConsoleOutput: HANDLE, wAttributes: WORD) SetConsoleTextAttributeError!void {$/;"	function
SetConsoleTextAttributeError	$ZIGLIB/std/os/windows.zig	/^pub const SetConsoleTextAttributeError = error{Unexpected}/;"	constant
SetCurrentDirectory	$ZIGLIB/std/os/windows.zig	/^pub fn SetCurrentDirectory(path_name: []const u16) SetCurrentDirectoryError!void {$/;"	function
SetCurrentDirectoryError	$ZIGLIB/std/os/windows.zig	/^pub const SetCurrentDirectoryError = error{$/;"	constant
SetEidError	$ZIGLIB/std/os.zig	/^pub const SetEidError = error{$/;"	constant
SetEndPosError	$ZIGLIB/std/fs/file.zig	/pub const SetEndPosError = os.TruncateError/;"	constant
SetFileCompletionNotificationModes	$ZIGLIB/std/os/windows.zig	/^pub fn SetFileCompletionNotificationModes(handle: HANDLE, flags: UCHAR) !void {$/;"	function
SetFilePointerError	$ZIGLIB/std/os/windows.zig	/^pub const SetFilePointerError = error{Unexpected}/;"	constant
SetFilePointerEx_BEGIN	$ZIGLIB/std/os/windows.zig	/^pub fn SetFilePointerEx_BEGIN(handle: HANDLE, offset: u64) SetFilePointerError!void {$/;"	function
SetFilePointerEx_CURRENT	$ZIGLIB/std/os/windows.zig	/^pub fn SetFilePointerEx_CURRENT(handle: HANDLE, offset: i64) SetFilePointerError!void {$/;"	function
SetFilePointerEx_CURRENT_get	$ZIGLIB/std/os/windows.zig	/^pub fn SetFilePointerEx_CURRENT_get(handle: HANDLE) SetFilePointerError!u64 {$/;"	function
SetFilePointerEx_END	$ZIGLIB/std/os/windows.zig	/^pub fn SetFilePointerEx_END(handle: HANDLE, offset: i64) SetFilePointerError!void {$/;"	function
SetFileTime	$ZIGLIB/std/os/windows.zig	/^pub fn SetFileTime($/;"	function
SetFileTimeError	$ZIGLIB/std/os/windows.zig	/^pub const SetFileTimeError = error{Unexpected}/;"	constant
SetHandleInformation	$ZIGLIB/std/os/windows.zig	/^pub fn SetHandleInformation(h: HANDLE, mask: DWORD, flags: DWORD) SetHandleInformationError!void {$/;"	function
SetHandleInformationError	$ZIGLIB/std/os/windows.zig	/^pub const SetHandleInformationError = error{Unexpected}/;"	constant
SetIdError	$ZIGLIB/std/os.zig	/^pub const SetIdError = error{ResourceLimitReached} || SetEidError/;"	constant
SetNameError	$ZIGLIB/std/Thread.zig	/^pub const SetNameError = error{$/;"	constant
SetPermissionsError	$ZIGLIB/std/fs/file.zig	/pub const SetPermissionsError = ChmodError/;"	constant
SetSockOptError	$ZIGLIB/std/os.zig	/^pub const SetSockOptError = error{$/;"	constant
SetVbits	$ZIGLIB/std/valgrind/memcheck.zig	/SetVbits/;"	field
SetrlimitError	$ZIGLIB/std/os.zig	/^pub const SetrlimitError = error{ PermissionDenied, LimitTooBig } || UnexpectedError/;"	constant
Sfc64	$ZIGLIB/std/rand/Sfc64.zig	/^const Sfc64 = @This()/;"	constant
Sha1	$ZIGLIB/std/crypto/sha1.zig	/^pub const Sha1 = struct {$/;"	struct
Sha224	$ZIGLIB/std/crypto/sha2.zig	/^pub const Sha224 = Sha2x32(Sha224Params)/;"	constant
Sha224Params	$ZIGLIB/std/crypto/sha2.zig	/^const Sha224Params = Sha2Params32{$/;"	constant
Sha256	$ZIGLIB/std/crypto/sha2.zig	/^pub const Sha256 = Sha2x32(Sha256Params)/;"	constant
Sha256Params	$ZIGLIB/std/crypto/sha2.zig	/^const Sha256Params = Sha2Params32{$/;"	constant
Sha256oSha256	$ZIGLIB/std/crypto/hash_composition.zig	/^pub const Sha256oSha256 = Composition(sha2.Sha256, sha2.Sha256)/;"	constant
Sha2Params32	$ZIGLIB/std/crypto/sha2.zig	/^const Sha2Params32 = struct {$/;"	struct
Sha2Params64	$ZIGLIB/std/crypto/sha2.zig	/^const Sha2Params64 = struct {$/;"	struct
Sha2x32	$ZIGLIB/std/crypto/sha2.zig	/^fn Sha2x32(comptime params: Sha2Params32) type {$/;"	function
Sha2x64	$ZIGLIB/std/crypto/sha2.zig	/^fn Sha2x64(comptime params: Sha2Params64) type {$/;"	function
Sha384	$ZIGLIB/std/crypto/sha2.zig	/^pub const Sha384 = Sha2x64(Sha384Params)/;"	constant
Sha384Params	$ZIGLIB/std/crypto/sha2.zig	/^const Sha384Params = Sha2Params64{$/;"	constant
Sha384oSha384	$ZIGLIB/std/crypto/hash_composition.zig	/^pub const Sha384oSha384 = Composition(sha2.Sha384, sha2.Sha384)/;"	constant
Sha3_224	$ZIGLIB/std/crypto/sha3.zig	/^pub const Sha3_224 = Keccak(224, 0x06)/;"	constant
Sha3_256	$ZIGLIB/std/crypto/sha3.zig	/^pub const Sha3_256 = Keccak(256, 0x06)/;"	constant
Sha3_384	$ZIGLIB/std/crypto/sha3.zig	/^pub const Sha3_384 = Keccak(384, 0x06)/;"	constant
Sha3_512	$ZIGLIB/std/crypto/sha3.zig	/^pub const Sha3_512 = Keccak(512, 0x06)/;"	constant
Sha512	$ZIGLIB/std/crypto/sha2.zig	/^pub const Sha512 = Sha2x64(Sha512Params)/;"	constant
Sha512256	$ZIGLIB/std/crypto/sha2.zig	/^pub const Sha512256 = Sha2x64(Sha512256Params)/;"	constant
Sha512256Params	$ZIGLIB/std/crypto/sha2.zig	/^const Sha512256Params = Sha2Params64{$/;"	constant
Sha512Params	$ZIGLIB/std/crypto/sha2.zig	/^const Sha512Params = Sha2Params64{$/;"	constant
Sha512T256	$ZIGLIB/std/crypto/sha2.zig	/^pub const Sha512T256 = Sha2x64(Sha512T256Params)/;"	constant
Sha512T256Params	$ZIGLIB/std/crypto/sha2.zig	/^const Sha512T256Params = Sha2Params64{$/;"	constant
Sha512oSha512	$ZIGLIB/std/crypto/hash_composition.zig	/^pub const Sha512oSha512 = Composition(sha2.Sha512, sha2.Sha512)/;"	constant
Shader	$ZIGLIB/std/target/spirv.zig	/Shader/;"	field
ShaderClockKHR	$ZIGLIB/std/target/spirv.zig	/ShaderClockKHR/;"	field
ShaderLayer	$ZIGLIB/std/target/spirv.zig	/ShaderLayer/;"	field
ShaderNonUniform	$ZIGLIB/std/target/spirv.zig	/ShaderNonUniform/;"	field
ShaderNonUniformEXT	$ZIGLIB/std/target/spirv.zig	/ShaderNonUniformEXT/;"	field
ShaderSMBuiltinsNV	$ZIGLIB/std/target/spirv.zig	/ShaderSMBuiltinsNV/;"	field
ShaderStereoViewNV	$ZIGLIB/std/target/spirv.zig	/ShaderStereoViewNV/;"	field
ShaderViewportIndex	$ZIGLIB/std/target/spirv.zig	/ShaderViewportIndex/;"	field
ShaderViewportIndexLayerEXT	$ZIGLIB/std/target/spirv.zig	/ShaderViewportIndexLayerEXT/;"	field
ShaderViewportIndexLayerNV	$ZIGLIB/std/target/spirv.zig	/ShaderViewportIndexLayerNV/;"	field
ShaderViewportMaskNV	$ZIGLIB/std/target/spirv.zig	/ShaderViewportMaskNV/;"	field
ShadingRateNV	$ZIGLIB/std/target/spirv.zig	/ShadingRateNV/;"	field
Shallow	$ZIGLIB/std/hash/auto_hash.zig	/Shallow/;"	field
Shared	$ZIGLIB/std/fs/file.zig	/Shared/;"	field
SharedData	$ZIGLIB/std/os/windows.zig	/SharedData: PVOID/;"	field
SharedDataFlags	$ZIGLIB/std/os/windows.zig	/SharedDataFlags: ULONG/;"	field
SharedLibraryOptions	$ZIGLIB/std/Build.zig	/^pub const SharedLibraryOptions = struct {$/;"	struct
SharedUserData	$ZIGLIB/std/os/windows.zig	/^pub const SharedUserData: *const KUSER_SHARED_DATA = @intToPtr(*const KUSER_SHARED_DATA, 0x7FFE0000)/;"	constant
Shdr	$ZIGLIB/std/elf.zig	/^pub const Shdr = switch (@sizeOf(usize)) {$/;"	constant
ShelfIndex	$ZIGLIB/std/segmented_list.zig	/const ShelfIndex = std.math.Log2Int(usize)/;"	constant
ShellInfo	$ZIGLIB/std/os/windows.zig	/ShellInfo: UNICODE_STRING/;"	field
ShellParametersProtocol	$ZIGLIB/std/os/uefi/protocols/shell_parameters_protocol.zig	/^pub const ShellParametersProtocol = extern struct {$/;"	struct
Shift	$ZIGLIB/std/packed_int_array.zig	/const Shift = std.math.Log2Int(Container)/;"	constant
ShiftCutoff	$ZIGLIB/std/fmt/parse_float/decimal.zig	/const ShiftCutoff = struct {$/;"	struct
ShiftInt	$ZIGLIB/std/target.zig	/pub const ShiftInt = std.math.Log2Int(usize)/;"	constant
ShiftT	$ZIGLIB/std/leb128.zig	/const ShiftT = std.math.Log2Int(U)/;"	constant
ShiftType	$ZIGLIB/std/mem.zig	/const ShiftType = math.Log2Int(ReturnType)/;"	constant
ShiftU	$ZIGLIB/std/leb128.zig	/const ShiftU = std.math.Log2Int(U)/;"	constant
ShimData	$ZIGLIB/std/os/windows.zig	/ShimData: PVOID/;"	field
ShortName	$ZIGLIB/std/os/windows.zig	/ShortName: [12]WCHAR/;"	field
ShortNameLength	$ZIGLIB/std/os/windows.zig	/ShortNameLength: CHAR/;"	field
ShutdownError	$ZIGLIB/std/os.zig	/^pub const ShutdownError = error{$/;"	constant
ShutdownHow	$ZIGLIB/std/os.zig	/^pub const ShutdownHow = enum { recv, send, both }/;"	enum
ShutdownInProgress	$ZIGLIB/std/os/windows.zig	/ShutdownInProgress: BOOLEAN/;"	field
ShutdownThreadId	$ZIGLIB/std/os/windows.zig	/ShutdownThreadId: HANDLE/;"	field
Sigaction	$ZIGLIB/std/os/linux.zig	/^pub const Sigaction = extern struct {$/;"	struct
SigaltstackError	$ZIGLIB/std/os.zig	/^pub const SigaltstackError = error{$/;"	constant
Signal	$ZIGLIB/std/child_process.zig	/Signal: u32/;"	field
SignalTest	$ZIGLIB/std/Thread/Condition.zig	/const SignalTest = struct {$/;"	struct
Signature	$ZIGLIB/std/pdb.zig	/Signature: u32/;"	field
SignatureScheme	$ZIGLIB/std/crypto/tls.zig	/^pub const SignatureScheme = enum(u16) {$/;"	enum
SignatureType	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/pub const SignatureType = enum(u8) {$/;"	enum
SignatureVerificationError	$ZIGLIB/std/crypto/errors.zig	/^pub const SignatureVerificationError = error{SignatureVerificationFailed}/;"	constant
SignedDoubleInt	$ZIGLIB/compiler_rt/udivmod.zig	/const SignedDoubleInt = std.meta.Int(.signed, double_int_bits)/;"	constant
SignedDoubleLimb	$ZIGLIB/std/math/big.zig	/^pub const SignedDoubleLimb = std.meta.Int(.signed, 2 * limb_info.bits)/;"	constant
SignedLimb	$ZIGLIB/std/math/big.zig	/^pub const SignedLimb = std.meta.Int(.signed, limb_info.bits)/;"	constant
SignedType	$ZIGLIB/std/zig/c_translation.zig	/const SignedType = if (a_signed) A_Promoted else B_Promoted/;"	constant
SignedZ	$ZIGLIB/compiler_rt/divdf3.zig	/const SignedZ = std.meta.Int(.signed, 64)/;"	constant
SignedZeroInfNanPreserve	$ZIGLIB/std/target/spirv.zig	/SignedZeroInfNanPreserve/;"	field
Signedness	$ZIGLIB/std/builtin.zig	/^pub const Signedness = enum {$/;"	enum
Signer	$ZIGLIB/std/crypto/ecdsa.zig	/pub const Signer = struct {$/;"	struct
SimdOpcode	$ZIGLIB/std/wasm.zig	/^pub const SimdOpcode = enum(u32) {$/;"	enum
Simple	$ZIGLIB/std/json.zig	/Simple/;"	field
SimpleFileSystemProtocol	$ZIGLIB/std/os/uefi/protocols/simple_file_system_protocol.zig	/^pub const SimpleFileSystemProtocol = extern struct {$/;"	struct
SimpleNetworkInterruptStatus	$ZIGLIB/std/os/uefi/protocols/simple_network_protocol.zig	/^pub const SimpleNetworkInterruptStatus = packed struct(u32) {$/;"	struct
SimpleNetworkMode	$ZIGLIB/std/os/uefi/protocols/simple_network_protocol.zig	/^pub const SimpleNetworkMode = extern struct {$/;"	struct
SimpleNetworkProtocol	$ZIGLIB/std/os/uefi/protocols/simple_network_protocol.zig	/^pub const SimpleNetworkProtocol = extern struct {$/;"	struct
SimpleNetworkReceiveFilter	$ZIGLIB/std/os/uefi/protocols/simple_network_protocol.zig	/^pub const SimpleNetworkReceiveFilter = packed struct(u32) {$/;"	struct
SimpleNetworkState	$ZIGLIB/std/os/uefi/protocols/simple_network_protocol.zig	/^pub const SimpleNetworkState = enum(u32) {$/;"	enum
SimplePointerMode	$ZIGLIB/std/os/uefi/protocols/simple_pointer_protocol.zig	/^pub const SimplePointerMode = struct {$/;"	struct
SimplePointerProtocol	$ZIGLIB/std/os/uefi/protocols/simple_pointer_protocol.zig	/^pub const SimplePointerProtocol = struct {$/;"	struct
SimplePointerState	$ZIGLIB/std/os/uefi/protocols/simple_pointer_protocol.zig	/^pub const SimplePointerState = struct {$/;"	struct
SimpleTextInputExProtocol	$ZIGLIB/std/os/uefi/protocols/simple_text_input_ex_protocol.zig	/^pub const SimpleTextInputExProtocol = extern struct {$/;"	struct
SimpleTextInputProtocol	$ZIGLIB/std/os/uefi/protocols/simple_text_input_protocol.zig	/^pub const SimpleTextInputProtocol = extern struct {$/;"	struct
SimpleTextOutputMode	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/^pub const SimpleTextOutputMode = extern struct {$/;"	struct
SimpleTextOutputProtocol	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/^pub const SimpleTextOutputProtocol = extern struct {$/;"	struct
SingleInt	$ZIGLIB/compiler_rt/udivmod.zig	/const SingleInt = std.meta.Int(.unsigned, single_int_bits)/;"	constant
SingleThreadedImpl	$ZIGLIB/std/Thread/ResetEvent.zig	/^const SingleThreadedImpl = struct {$/;"	struct
SingleThreadedRwLock	$ZIGLIB/std/Thread/RwLock.zig	/^pub const SingleThreadedRwLock = struct {$/;"	struct
SingleWordIterator	$ZIGLIB/std/bit_set.zig	/fn SingleWordIterator(comptime direction: IteratorOptions.Direction) type {$/;"	function
SinglyLinkedList	$ZIGLIB/std/linked_list.zig	/^pub fn SinglyLinkedList(comptime T: type) type {$/;"	function
SipHash	$ZIGLIB/std/crypto/siphash.zig	/^fn SipHash(comptime T: type, comptime c_rounds: usize, comptime d_rounds: usize) type {$/;"	function
SipHash128	$ZIGLIB/std/crypto/siphash.zig	/^pub fn SipHash128(comptime c_rounds: usize, comptime d_rounds: usize) type {$/;"	function
SipHash64	$ZIGLIB/std/crypto/siphash.zig	/^pub fn SipHash64(comptime c_rounds: usize, comptime d_rounds: usize) type {$/;"	function
SipHashStateless	$ZIGLIB/std/crypto/siphash.zig	/^fn SipHashStateless(comptime T: type, comptime c_rounds: usize, comptime d_rounds: usize) type {$/;"	function
Siphash	$ZIGLIB/std/crypto/siphash.zig	/const Siphash = SipHash64(2, 4)/;"	constant
Size	$ZIGLIB/std/pdb.zig	/Size: u32/;"	field
SizeOfImage	$ZIGLIB/std/os/windows.zig	/SizeOfImage: ULONG/;"	field
SizeOfZeroFill	$ZIGLIB/std/start_windows_tls.zig	/SizeOfZeroFill: u32/;"	field
SkFullSock	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^const SkFullSock = @compileError("TODO missing os bits: SkFullSock")/;"	constant
SkipBytesOptions	$ZIGLIB/std/io/reader.zig	/pub const SkipBytesOptions = struct {$/;"	struct
SkipPassword	$ZIGLIB/std/process.zig	/SkipPassword/;"	field
SkipValueError	$ZIGLIB/std/json.zig	/^const SkipValueError = error{UnexpectedJsonDepth} || TokenStream.Error/;"	constant
Slab	$ZIGLIB/std/fmt/errol/enum3.zig	/^const Slab = struct {$/;"	struct
Slash	$ZIGLIB/std/c/tokenizer.zig	/Slash/;"	field
SlashEqual	$ZIGLIB/std/c/tokenizer.zig	/SlashEqual/;"	field
Slave	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/Slave = 1/;"	field
Slice	$ZIGLIB/std/zig/Ast.zig	/pub const Slice = struct {$/;"	struct
SliceAsBytesReturnType	$ZIGLIB/std/mem.zig	/^fn SliceAsBytesReturnType(comptime sliceType: type) type {$/;"	function
SliceDiffer	$ZIGLIB/std/testing.zig	/^fn SliceDiffer(comptime T: type) type {$/;"	function
SliceIterRandomOrder	$ZIGLIB/std/treap.zig	/^fn SliceIterRandomOrder(comptime T: type) type {$/;"	function
SliceReader	$ZIGLIB/std/Uri.zig	/^const SliceReader = struct {$/;"	struct
SliceSelfArg	$ZIGLIB/std/fifo.zig	/const SliceSelfArg = if (buffer_type == .Static) *Self else Self/;"	constant
SliceSentinel	$ZIGLIB/std/zig/Ast.zig	/pub const SliceSentinel = struct {$/;"	struct
SliceTo	$ZIGLIB/std/mem.zig	/^fn SliceTo(comptime T: type, comptime end: meta.Elem(T)) type {$/;"	function
SlotIndex	$ZIGLIB/std/heap/general_purpose_allocator.zig	/^const SlotIndex = std.meta.Int(.unsigned, math.log2(page_size) + 1)/;"	constant
Small	$ZIGLIB/std/rand.zig	/const Small = std.meta.Int(.unsigned, small_bits)/;"	constant
SmallSpan	$ZIGLIB/std/zig/Parse.zig	/^const SmallSpan = union(enum) {$/;"	union
SocketError	$ZIGLIB/std/os.zig	/^pub const SocketError = error{$/;"	constant
SocketTestHarness	$ZIGLIB/std/os/linux/io_uring.zig	/^const SocketTestHarness = struct {$/;"	struct
Socketname	$ZIGLIB/std/c/solaris.zig	/Socketname/;"	field
SockfiltersPriv	$ZIGLIB/std/c/solaris.zig	/SockfiltersPriv = 14/;"	field
SockoptIpNexthop	$ZIGLIB/std/c/solaris.zig	/SockoptIpNexthop/;"	field
SockoptIpv6Nexthop	$ZIGLIB/std/c/solaris.zig	/SockoptIpv6Nexthop/;"	field
SockoptLinger	$ZIGLIB/std/c/solaris.zig	/SockoptLinger/;"	field
SockoptRcvbuf	$ZIGLIB/std/c/solaris.zig	/SockoptRcvbuf/;"	field
SockoptSndbuf	$ZIGLIB/std/c/solaris.zig	/SockoptSndbuf/;"	field
SockoptTcpCongestion	$ZIGLIB/std/c/solaris.zig	/SockoptTcpCongestion/;"	field
SockoptType	$ZIGLIB/std/c/solaris.zig	/SockoptType/;"	field
SockoptsBoolOpts	$ZIGLIB/std/c/solaris.zig	/SockoptsBoolOpts/;"	field
Some	$ZIGLIB/std/json.zig	/Some: struct {$/;"	field
Sort	$ZIGLIB/std/multi_array_list.zig	/const Sort = struct {$/;"	struct
SortContext	$ZIGLIB/std/multi_array_list.zig	/const SortContext = struct {$/;"	struct
Source	$ZIGLIB/std/os/linux/bpf.zig	/const Source = enum(u1) { reg, imm }/;"	enum
SourceFileCount	$ZIGLIB/std/pdb.zig	/SourceFileCount: u16/;"	field
SourceFileNameIndex	$ZIGLIB/std/pdb.zig	/SourceFileNameIndex: u32/;"	field
SourceInfoSize	$ZIGLIB/std/pdb.zig	/SourceInfoSize: i32/;"	field
SourceLocation	$ZIGLIB/std/builtin.zig	/^pub const SourceLocation = struct {$/;"	struct
SourceType	$ZIGLIB/std/zig/c_translation.zig	/const SourceType = @TypeOf(target)/;"	constant
Space	$ZIGLIB/std/zig/render.zig	/^const Space = enum {$/;"	enum
Span	$ZIGLIB/std/mem.zig	/^fn Span(comptime T: type) type {$/;"	function
Sparc64	$ZIGLIB/std/os/linux/syscalls.zig	/^pub const Sparc64 = enum(usize) {$/;"	enum
SparcCpuinfoImpl	$ZIGLIB/std/zig/system/linux.zig	/^const SparcCpuinfoImpl = struct {$/;"	struct
SparcCpuinfoParser	$ZIGLIB/std/zig/system/linux.zig	/^const SparcCpuinfoParser = CpuinfoParser(SparcCpuinfoImpl)/;"	constant
SparcFCMP	$ZIGLIB/compiler_rt/cmptf2.zig	/^const SparcFCMP = enum(i32) {$/;"	enum
Spare	$ZIGLIB/std/os/windows.zig	/Spare: ULONG/;"	field
SpareBits	$ZIGLIB/std/os/windows.zig	/SpareBits: u6/;"	field
SpareWORD	$ZIGLIB/std/os/windows.zig	/SpareWORD: WORD/;"	field
SparseResidency	$ZIGLIB/std/target/spirv.zig	/SparseResidency/;"	field
SpawnConfig	$ZIGLIB/std/Thread.zig	/^pub const SpawnConfig = struct {$/;"	struct
SpawnError	$ZIGLIB/std/child_process.zig	/pub const SpawnError = error{$/;"	constant
Specifier	$ZIGLIB/std/fmt.zig	/^const Specifier = union(enum) {$/;"	union
SpinCount	$ZIGLIB/std/os/windows.zig	/SpinCount: ULONG_PTR/;"	field
Spinlock	$ZIGLIB/compiler_rt/atomics.zig	/const Spinlock = struct {$/;"	struct
SpinlockTable	$ZIGLIB/compiler_rt/atomics.zig	/^const SpinlockTable = struct {$/;"	struct
SplitBackwardsIterator	$ZIGLIB/std/mem.zig	/^pub fn SplitBackwardsIterator(comptime T: type) type {$/;"	function
SplitIterator	$ZIGLIB/std/mem.zig	/^pub fn SplitIterator(comptime T: type) type {$/;"	function
SplitMix64	$ZIGLIB/std/rand.zig	/^pub const SplitMix64 = struct {$/;"	struct
SplitScalar	$ZIGLIB/std/crypto/pcurves/secp256k1.zig	/pub const SplitScalar = struct {$/;"	struct
Sqrt	$ZIGLIB/std/math/sqrt.zig	/^pub fn Sqrt(comptime T: type) type {$/;"	function
SrcHash	$ZIGLIB/std/zig.zig	/^pub const SrcHash = [16]u8/;"	constant
SrcShift	$ZIGLIB/compiler_rt/truncf.zig	/const SrcShift = std.math.Log2Int(src_rep_t)/;"	constant
SsHandle	$ZIGLIB/std/os/windows.zig	/SsHandle: PVOID/;"	field
Stack	$ZIGLIB/std/event/group.zig	/const Stack = std.atomic.Stack(anyframe->ReturnType)/;"	constant
StackBase	$ZIGLIB/std/os/windows.zig	/StackBase: PVOID/;"	field
StackChange	$ZIGLIB/std/valgrind.zig	/StackChange = 5379/;"	field
StackDeregister	$ZIGLIB/std/valgrind.zig	/StackDeregister = 5378/;"	field
StackFallbackAllocator	$ZIGLIB/std/heap.zig	/^pub fn StackFallbackAllocator(comptime size: usize) type {$/;"	function
StackItem	$ZIGLIB/std/fs.zig	/const StackItem = struct {$/;"	struct
StackIterator	$ZIGLIB/std/debug.zig	/^pub const StackIterator = struct {$/;"	struct
StackLimit	$ZIGLIB/std/os/windows.zig	/StackLimit: PVOID/;"	field
StackRegister	$ZIGLIB/std/valgrind.zig	/StackRegister = 5377/;"	field
StackTrace	$ZIGLIB/std/builtin.zig	/^pub const StackTrace = struct {$/;"	struct
Stale	$ZIGLIB/std/os/uefi/protocols/ip6_protocol.zig	/Stale/;"	field
StandardDesign	$ZIGLIB/std/os/windows.zig	/StandardDesign/;"	field
StandardInformation	$ZIGLIB/std/os/windows.zig	/StandardInformation: FILE_STANDARD_INFORMATION/;"	field
StandardOptimizeOptionOptions	$ZIGLIB/std/Build.zig	/^pub const StandardOptimizeOptionOptions = struct {$/;"	struct
StandardTargetOptionsArgs	$ZIGLIB/std/Build.zig	/^pub const StandardTargetOptionsArgs = struct {$/;"	struct
Start	$ZIGLIB/std/process.zig	/Start/;"	field
StartAddressOfRawData	$ZIGLIB/std/start_windows_tls.zig	/StartAddressOfRawData: *anyopaque/;"	field
StartColumn	$ZIGLIB/std/pdb.zig	/StartColumn: u16/;"	field
StartIndexAndLayer	$ZIGLIB/std/priority_dequeue.zig	/const StartIndexAndLayer = struct {$/;"	struct
StartInstrumentation	$ZIGLIB/std/valgrind/callgrind.zig	/StartInstrumentation/;"	field
Started	$ZIGLIB/std/os/uefi/protocols/simple_network_protocol.zig	/Started/;"	field
Stat	$ZIGLIB/std/os/wasi.zig	/^pub const Stat = struct {$/;"	struct
StatError	$ZIGLIB/std/fs/file.zig	/pub const StatError = os.FStatError/;"	constant
StatFileError	$ZIGLIB/std/fs.zig	/pub const StatFileError = File.OpenError || File.StatError || os.FStatAtError/;"	constant
State	$ZIGLIB/std/zig/tokenizer.zig	/const State = enum {$/;"	enum
State128L	$ZIGLIB/std/crypto/aegis.zig	/^const State128L = struct {$/;"	struct
State256	$ZIGLIB/std/crypto/aegis.zig	/^const State256 = struct {$/;"	struct
Static	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/Static = 1/;"	field
StaticBitSet	$ZIGLIB/std/bit_set.zig	/^pub fn StaticBitSet(comptime size: usize) type {$/;"	function
StaticLibraryOptions	$ZIGLIB/std/Build.zig	/^pub const StaticLibraryOptions = struct {$/;"	struct
Status	$ZIGLIB/std/os/windows.zig	/Status: NTSTATUS/;"	field
StatusWord	$ZIGLIB/std/os/windows.zig	/StatusWord: WORD/;"	field
Statx	$ZIGLIB/std/os/linux.zig	/^pub const Statx = extern struct {$/;"	struct
StdIo	$ZIGLIB/std/child_process.zig	/pub const StdIo = enum {$/;"	enum
StdIoAction	$ZIGLIB/std/Build/RunStep.zig	/^pub const StdIoAction = union(enum) {$/;"	union
Stdcall	$ZIGLIB/std/builtin.zig	/Stdcall/;"	field
StencilExportEXT	$ZIGLIB/std/target/spirv.zig	/StencilExportEXT/;"	field
Step	$ZIGLIB/std/Build/Step.zig	/^const Step = @This()/;"	constant
Stop	$ZIGLIB/std/event/loop.zig	/Stop/;"	field
StopBits	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/pub const StopBits = enum(u8) {$/;"	enum
StopInstrumentation	$ZIGLIB/std/valgrind/callgrind.zig	/StopInstrumentation/;"	field
Stopped	$ZIGLIB/std/os/uefi/protocols/simple_network_protocol.zig	/Stopped/;"	field
StorageBuffer16BitAccess	$ZIGLIB/std/target/spirv.zig	/StorageBuffer16BitAccess/;"	field
StorageBuffer8BitAccess	$ZIGLIB/std/target/spirv.zig	/StorageBuffer8BitAccess/;"	field
StorageBufferArrayDynamicIndexing	$ZIGLIB/std/target/spirv.zig	/StorageBufferArrayDynamicIndexing/;"	field
StorageBufferArrayNonUniformIndexing	$ZIGLIB/std/target/spirv.zig	/StorageBufferArrayNonUniformIndexing/;"	field
StorageBufferArrayNonUniformIndexingEXT	$ZIGLIB/std/target/spirv.zig	/StorageBufferArrayNonUniformIndexingEXT/;"	field
StorageClass	$ZIGLIB/std/coff.zig	/^pub const StorageClass = enum(u8) {$/;"	enum
StorageImageArrayDynamicIndexing	$ZIGLIB/std/target/spirv.zig	/StorageImageArrayDynamicIndexing/;"	field
StorageImageArrayNonUniformIndexing	$ZIGLIB/std/target/spirv.zig	/StorageImageArrayNonUniformIndexing/;"	field
StorageImageArrayNonUniformIndexingEXT	$ZIGLIB/std/target/spirv.zig	/StorageImageArrayNonUniformIndexingEXT/;"	field
StorageImageExtendedFormats	$ZIGLIB/std/target/spirv.zig	/StorageImageExtendedFormats/;"	field
StorageImageMultisample	$ZIGLIB/std/target/spirv.zig	/StorageImageMultisample/;"	field
StorageImageReadWithoutFormat	$ZIGLIB/std/target/spirv.zig	/StorageImageReadWithoutFormat/;"	field
StorageImageWriteWithoutFormat	$ZIGLIB/std/target/spirv.zig	/StorageImageWriteWithoutFormat/;"	field
StorageInputOutput16	$ZIGLIB/std/target/spirv.zig	/StorageInputOutput16/;"	field
StoragePushConstant16	$ZIGLIB/std/target/spirv.zig	/StoragePushConstant16/;"	field
StoragePushConstant8	$ZIGLIB/std/target/spirv.zig	/StoragePushConstant8/;"	field
StorageTexelBufferArrayDynamicIndexing	$ZIGLIB/std/target/spirv.zig	/StorageTexelBufferArrayDynamicIndexing/;"	field
StorageTexelBufferArrayDynamicIndexingEXT	$ZIGLIB/std/target/spirv.zig	/StorageTexelBufferArrayDynamicIndexingEXT/;"	field
StorageTexelBufferArrayNonUniformIndexing	$ZIGLIB/std/target/spirv.zig	/StorageTexelBufferArrayNonUniformIndexing/;"	field
StorageTexelBufferArrayNonUniformIndexingEXT	$ZIGLIB/std/target/spirv.zig	/StorageTexelBufferArrayNonUniformIndexingEXT/;"	field
StorageUniform16	$ZIGLIB/std/target/spirv.zig	/StorageUniform16/;"	field
StorageUniformBufferBlock16	$ZIGLIB/std/target/spirv.zig	/StorageUniformBufferBlock16/;"	field
StoreInt	$ZIGLIB/std/mem.zig	/const StoreInt = std.meta.Int(.unsigned, store_size * 8)/;"	constant
StoredSize	$ZIGLIB/std/compress/deflate/huffman_bit_writer.zig	/^const StoredSize = struct {$/;"	struct
StrKind	$ZIGLIB/std/c/tokenizer.zig	/pub const StrKind = enum {$/;"	enum
StrOffset	$ZIGLIB/std/dwarf.zig	/StrOffset: usize/;"	field
StrPtr	$ZIGLIB/std/dwarf.zig	/StrPtr: u64/;"	field
Strategy	$ZIGLIB/std/hash.zig	/^pub const Strategy = auto_hash.HashStrategy/;"	constant
Stream	$ZIGLIB/std/net.zig	/^pub const Stream = struct {$/;"	struct
StreamInterface	$ZIGLIB/std/crypto/tls/Client.zig	/^pub const StreamInterface = struct {$/;"	struct
StreamServer	$ZIGLIB/std/net.zig	/^pub const StreamServer = struct {$/;"	struct
StreamSource	$ZIGLIB/std/io/stream_source.zig	/^pub const StreamSource = union(enum) {$/;"	union
StreamType	$ZIGLIB/std/pdb.zig	/^pub const StreamType = enum(u16) {$/;"	enum
StreamingParser	$ZIGLIB/std/json.zig	/^pub const StreamingParser = struct {$/;"	struct
Strict	$ZIGLIB/std/builtin.zig	/Strict/;"	field
String	$ZIGLIB/std/json.zig	/String: struct {$/;"	field
StringArrayHashMap	$ZIGLIB/std/array_hash_map.zig	/^pub fn StringArrayHashMap(comptime V: type) type {$/;"	function
StringArrayHashMapUnmanaged	$ZIGLIB/std/array_hash_map.zig	/^pub fn StringArrayHashMapUnmanaged(comptime V: type) type {$/;"	function
StringContext	$ZIGLIB/std/hash_map.zig	/^pub const StringContext = struct {$/;"	struct
StringEscapeCharacter	$ZIGLIB/std/json.zig	/StringEscapeCharacter/;"	field
StringEscapeHexUnicode1	$ZIGLIB/std/json.zig	/StringEscapeHexUnicode1/;"	field
StringEscapeHexUnicode2	$ZIGLIB/std/json.zig	/StringEscapeHexUnicode2/;"	field
StringEscapeHexUnicode3	$ZIGLIB/std/json.zig	/StringEscapeHexUnicode3/;"	field
StringEscapeHexUnicode4	$ZIGLIB/std/json.zig	/StringEscapeHexUnicode4/;"	field
StringEscapes	$ZIGLIB/std/json.zig	/^const StringEscapes = union(enum) {$/;"	union
StringHashMap	$ZIGLIB/std/hash_map.zig	/^pub fn StringHashMap(comptime V: type) type {$/;"	function
StringHashMapUnmanaged	$ZIGLIB/std/hash_map.zig	/^pub fn StringHashMapUnmanaged(comptime V: type) type {$/;"	function
StringIndexAdapter	$ZIGLIB/std/hash_map.zig	/^pub const StringIndexAdapter = struct {$/;"	struct
StringIndexContext	$ZIGLIB/std/hash_map.zig	/^pub const StringIndexContext = struct {$/;"	struct
StringLiteral	$ZIGLIB/std/c/tokenizer.zig	/StringLiteral: StrKind/;"	field
StringOptions	$ZIGLIB/std/json.zig	/pub const StringOptions = union(enum) {$/;"	union
StringOutputOptions	$ZIGLIB/std/json.zig	/const StringOutputOptions = struct {$/;"	struct
StringTable	$ZIGLIB/std/pdb.zig	/StringTable = 0xf3/;"	field
StringUtf8Byte2Of2	$ZIGLIB/std/json.zig	/StringUtf8Byte2Of2/;"	field
StringUtf8Byte2Of3	$ZIGLIB/std/json.zig	/StringUtf8Byte2Of3/;"	field
StringUtf8Byte2Of4	$ZIGLIB/std/json.zig	/StringUtf8Byte2Of4/;"	field
StringUtf8Byte3Of3	$ZIGLIB/std/json.zig	/StringUtf8Byte3Of3/;"	field
StringUtf8Byte3Of4	$ZIGLIB/std/json.zig	/StringUtf8Byte3Of4/;"	field
StringUtf8Byte4Of4	$ZIGLIB/std/json.zig	/StringUtf8Byte4Of4/;"	field
StringifyOptions	$ZIGLIB/std/json.zig	/^pub const StringifyOptions = struct {$/;"	struct
Strong	$ZIGLIB/std/builtin.zig	/Strong/;"	field
Strtab	$ZIGLIB/std/coff.zig	/^pub const Strtab = struct {$/;"	struct
Struct	$ZIGLIB/std/fmt.zig	/const Struct = struct {$/;"	struct
StructField	$ZIGLIB/std/builtin.zig	/pub const StructField = struct {$/;"	struct
StructInit	$ZIGLIB/std/zig/Ast.zig	/pub const StructInit = struct {$/;"	struct
Style	$ZIGLIB/std/Build/ConfigHeaderStep.zig	/^pub const Style = union(enum) {$/;"	union
SubRange	$ZIGLIB/std/zig/Ast.zig	/pub const SubRange = struct {$/;"	struct
SubSystem	$ZIGLIB/std/target.zig	/pub const SubSystem = enum {$/;"	enum
SubSystemData	$ZIGLIB/std/os/windows.zig	/SubSystemData: PVOID/;"	field
SubSystemTib	$ZIGLIB/std/os/windows.zig	/SubSystemTib: PVOID/;"	field
SubgroupAvcMotionEstimationChromaINTEL	$ZIGLIB/std/target/spirv.zig	/SubgroupAvcMotionEstimationChromaINTEL/;"	field
SubgroupAvcMotionEstimationINTEL	$ZIGLIB/std/target/spirv.zig	/SubgroupAvcMotionEstimationINTEL/;"	field
SubgroupAvcMotionEstimationIntraINTEL	$ZIGLIB/std/target/spirv.zig	/SubgroupAvcMotionEstimationIntraINTEL/;"	field
SubgroupBallotKHR	$ZIGLIB/std/target/spirv.zig	/SubgroupBallotKHR/;"	field
SubgroupBufferBlockIOINTEL	$ZIGLIB/std/target/spirv.zig	/SubgroupBufferBlockIOINTEL/;"	field
SubgroupDispatch	$ZIGLIB/std/target/spirv.zig	/SubgroupDispatch/;"	field
SubgroupImageBlockIOINTEL	$ZIGLIB/std/target/spirv.zig	/SubgroupImageBlockIOINTEL/;"	field
SubgroupImageMediaBlockIOINTEL	$ZIGLIB/std/target/spirv.zig	/SubgroupImageMediaBlockIOINTEL/;"	field
SubgroupShuffleINTEL	$ZIGLIB/std/target/spirv.zig	/SubgroupShuffleINTEL/;"	field
SubgroupVoteKHR	$ZIGLIB/std/target/spirv.zig	/SubgroupVoteKHR/;"	field
SubmissionQueue	$ZIGLIB/std/os/linux/io_uring.zig	/^pub const SubmissionQueue = struct {$/;"	struct
SubstituteNameLength	$ZIGLIB/std/os/windows.zig	/SubstituteNameLength: USHORT/;"	field
SubstituteNameOffset	$ZIGLIB/std/os/windows.zig	/SubstituteNameOffset: USHORT/;"	field
Subsystem	$ZIGLIB/std/coff.zig	/^pub const Subsystem = enum(u16) {$/;"	enum
Subtype	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/pub const Subtype = enum(u8) {$/;"	enum
Success	$ZIGLIB/std/os/uefi/status.zig	/Success = 0/;"	field
Suit	$ZIGLIB/std/enums.zig	/const Suit = enum { spades, hearts, clubs, diamonds }/;"	enum
SuiteMaskY	$ZIGLIB/std/os/windows.zig	/SuiteMaskY: ULONG/;"	field
SuperBlob	$ZIGLIB/std/macho.zig	/^pub const SuperBlob = extern struct {$/;"	struct
SuperBlock	$ZIGLIB/std/pdb.zig	/^pub const SuperBlock = extern struct {$/;"	struct
Swift	$ZIGLIB/std/dwarf/LANG.zig	/^pub const Swift = 0x001e/;"	constant
SwitchCase	$ZIGLIB/std/zig/Ast.zig	/pub const SwitchCase = struct {$/;"	struct
SymByteSize	$ZIGLIB/std/pdb.zig	/SymByteSize: u32/;"	field
SymLink	$ZIGLIB/std/fs/file.zig	/SymLink/;"	field
SymLinkError	$ZIGLIB/std/os.zig	/^pub const SymLinkError = error{$/;"	constant
SymLinkFlags	$ZIGLIB/std/fs.zig	/^pub const SymLinkFlags = struct {$/;"	struct
SymRecordStream	$ZIGLIB/std/pdb.zig	/SymRecordStream: u16/;"	field
SymType	$ZIGLIB/std/coff.zig	/^pub const SymType = packed struct {$/;"	struct
Symbol	$ZIGLIB/std/coff.zig	/^pub const Symbol = struct {$/;"	struct
SymbolInfo	$ZIGLIB/std/debug.zig	/^pub const SymbolInfo = struct {$/;"	struct
SymbolKind	$ZIGLIB/std/pdb.zig	/^pub const SymbolKind = enum(u16) {$/;"	enum
SymbolVisibility	$ZIGLIB/std/builtin.zig	/^pub const SymbolVisibility = enum {$/;"	enum
SymbolicLinkNameLength	$ZIGLIB/std/os/windows.zig	/SymbolicLinkNameLength: USHORT/;"	field
SymbolicLinkNameOffset	$ZIGLIB/std/os/windows.zig	/SymbolicLinkNameOffset: ULONG/;"	field
Symbols	$ZIGLIB/std/pdb.zig	/Symbols = 0xf1/;"	field
Symtab	$ZIGLIB/std/coff.zig	/^pub const Symtab = struct {$/;"	struct
SyncError	$ZIGLIB/std/os.zig	/^pub const SyncError = error{$/;"	constant
SysCtlError	$ZIGLIB/std/os.zig	/^pub const SysCtlError = error{$/;"	constant
SysV	$ZIGLIB/std/builtin.zig	/SysV/;"	field
SystemAssemblyStorageMap	$ZIGLIB/std/os/windows.zig	/SystemAssemblyStorageMap: *ASSEMBLY_STORAGE_MAP/;"	field
SystemCache	$ZIGLIB/std/os/windows.zig	/SystemCache: SIZE_T/;"	field
SystemCall	$ZIGLIB/std/os/windows.zig	/SystemCall: ULONG/;"	field
SystemCallPad	$ZIGLIB/std/os/windows.zig	/SystemCallPad: [2]ULONGLONG/;"	field
SystemDefaultActivationData	$ZIGLIB/std/os/windows.zig	/SystemDefaultActivationData: *const ACTIVATION_CONTEXT_DATA/;"	field
SystemExpirationDate	$ZIGLIB/std/os/windows.zig	/SystemExpirationDate: LARGE_INTEGER/;"	field
SystemLib	$ZIGLIB/std/Build/CompileStep.zig	/^pub const SystemLib = struct {$/;"	struct
SystemReserved	$ZIGLIB/std/os/windows.zig	/SystemReserved: ULONG/;"	field
SystemTable	$ZIGLIB/std/os/uefi/tables/system_table.zig	/^pub const SystemTable = extern struct {$/;"	struct
SystemTime	$ZIGLIB/std/os/windows.zig	/SystemTime: KSYSTEM_TIME/;"	field
SystemVersionTokenizer	$ZIGLIB/std/zig/system/darwin/macos.zig	/^const SystemVersionTokenizer = struct {$/;"	struct
TAB0	$ZIGLIB/std/c/darwin.zig	/^pub const TAB0: tcflag_t = 0x00000000/;"	constant
TAB1	$ZIGLIB/std/c/darwin.zig	/^pub const TAB1: tcflag_t = 0x00000400/;"	constant
TAB2	$ZIGLIB/std/c/darwin.zig	/^pub const TAB2: tcflag_t = 0x00000800/;"	constant
TAB3	$ZIGLIB/std/c/darwin.zig	/^pub const TAB3: tcflag_t = 0x00000004/;"	constant
TABDLY	$ZIGLIB/std/c/darwin.zig	/^pub const TABDLY: tcflag_t = 0x00000c04/;"	constant
TAG_NOT_FOUND	$ZIGLIB/std/os/windows/win32error.zig	/TAG_NOT_FOUND = 2012/;"	field
TAG_NOT_PRESENT	$ZIGLIB/std/os/windows/win32error.zig	/TAG_NOT_PRESENT = 2013/;"	field
TAJIK	$ZIGLIB/std/os/windows/lang.zig	/^pub const TAJIK = 0x28/;"	constant
TAJIK_TAJIKISTAN	$ZIGLIB/std/os/windows/sublang.zig	/^pub const TAJIK_TAJIKISTAN = 0x01/;"	constant
TAMAZIGHT	$ZIGLIB/std/os/windows/lang.zig	/^pub const TAMAZIGHT = 0x5f/;"	constant
TAMAZIGHT_ALGERIA_LATIN	$ZIGLIB/std/os/windows/sublang.zig	/^pub const TAMAZIGHT_ALGERIA_LATIN = 0x02/;"	constant
TAMAZIGHT_MOROCCO_TIFINAGH	$ZIGLIB/std/os/windows/sublang.zig	/^pub const TAMAZIGHT_MOROCCO_TIFINAGH = 0x04/;"	constant
TAMIL	$ZIGLIB/std/os/windows/lang.zig	/^pub const TAMIL = 0x49/;"	constant
TAMIL_INDIA	$ZIGLIB/std/os/windows/sublang.zig	/^pub const TAMIL_INDIA = 0x01/;"	constant
TAMIL_SRI_LANKA	$ZIGLIB/std/os/windows/sublang.zig	/^pub const TAMIL_SRI_LANKA = 0x02/;"	constant
TAPI_REPLY	$ZIGLIB/std/os/windows/user32.zig	/^pub const TAPI_REPLY = 0x0463/;"	constant
TARGET_NETNSID	$ZIGLIB/std/os/linux.zig	/pub const TARGET_NETNSID: IFLA = .IF_NETNSID/;"	constant
TASK	$ZIGLIB/std/c/solaris.zig	/TASK = 6/;"	field
TASK_CLOCK	$ZIGLIB/std/os/linux.zig	/TASK_CLOCK/;"	field
TASK_NULL	$ZIGLIB/std/c/darwin.zig	/^pub const TASK_NULL: task_t = 0/;"	constant
TASK_PERF_EVENTS_DISABLE	$ZIGLIB/std/os/linux.zig	/TASK_PERF_EVENTS_DISABLE = 31/;"	field
TASK_PERF_EVENTS_ENABLE	$ZIGLIB/std/os/linux.zig	/TASK_PERF_EVENTS_ENABLE = 32/;"	field
TASK_VM_INFO	$ZIGLIB/std/c/darwin.zig	/^pub const TASK_VM_INFO = 22/;"	constant
TASK_VM_INFO_COUNT	$ZIGLIB/std/c/darwin.zig	/^pub const TASK_VM_INFO_COUNT: mach_msg_type_number_t = @sizeOf(task_vm_info_data_t) \/ @sizeOf(natural_t)/;"	constant
TATAR	$ZIGLIB/std/os/windows/lang.zig	/^pub const TATAR = 0x44/;"	constant
TATAR_RUSSIA	$ZIGLIB/std/os/windows/sublang.zig	/^pub const TATAR_RUSSIA = 0x01/;"	constant
TBM_CLEARSEL	$ZIGLIB/std/os/windows/user32.zig	/^pub const TBM_CLEARSEL = 0x0413/;"	constant
TBM_CLEARTICS	$ZIGLIB/std/os/windows/user32.zig	/^pub const TBM_CLEARTICS = 0x0409/;"	constant
TBM_GETBUDDY	$ZIGLIB/std/os/windows/user32.zig	/^pub const TBM_GETBUDDY = 0x0421/;"	constant
TBM_GETCHANNELRECT	$ZIGLIB/std/os/windows/user32.zig	/^pub const TBM_GETCHANNELRECT = 0x041A/;"	constant
TBM_GETLINESIZE	$ZIGLIB/std/os/windows/user32.zig	/^pub const TBM_GETLINESIZE = 0x0418/;"	constant
TBM_GETNUMTICS	$ZIGLIB/std/os/windows/user32.zig	/^pub const TBM_GETNUMTICS = 0x0410/;"	constant
TBM_GETPAGESIZE	$ZIGLIB/std/os/windows/user32.zig	/^pub const TBM_GETPAGESIZE = 0x0416/;"	constant
TBM_GETPOS	$ZIGLIB/std/os/windows/user32.zig	/^pub const TBM_GETPOS = 0x0400/;"	constant
TBM_GETPTICS	$ZIGLIB/std/os/windows/user32.zig	/^pub const TBM_GETPTICS = 0x040E/;"	constant
TBM_GETRANGEMAX	$ZIGLIB/std/os/windows/user32.zig	/^pub const TBM_GETRANGEMAX = 0x0402/;"	constant
TBM_GETRANGEMIN	$ZIGLIB/std/os/windows/user32.zig	/^pub const TBM_GETRANGEMIN = 0x0401/;"	constant
TBM_GETSELEND	$ZIGLIB/std/os/windows/user32.zig	/^pub const TBM_GETSELEND = 0x0412/;"	constant
TBM_GETSELSTART	$ZIGLIB/std/os/windows/user32.zig	/^pub const TBM_GETSELSTART = 0x0411/;"	constant
TBM_GETTHUMBLENGTH	$ZIGLIB/std/os/windows/user32.zig	/^pub const TBM_GETTHUMBLENGTH = 0x041C/;"	constant
TBM_GETTHUMBRECT	$ZIGLIB/std/os/windows/user32.zig	/^pub const TBM_GETTHUMBRECT = 0x0419/;"	constant
TBM_GETTIC	$ZIGLIB/std/os/windows/user32.zig	/^pub const TBM_GETTIC = 0x0403/;"	constant
TBM_GETTICPOS	$ZIGLIB/std/os/windows/user32.zig	/^pub const TBM_GETTICPOS = 0x040F/;"	constant
TBM_GETTOOLTIPS	$ZIGLIB/std/os/windows/user32.zig	/^pub const TBM_GETTOOLTIPS = 0x041E/;"	constant
TBM_SETBUDDY	$ZIGLIB/std/os/windows/user32.zig	/^pub const TBM_SETBUDDY = 0x0420/;"	constant
TBM_SETLINESIZE	$ZIGLIB/std/os/windows/user32.zig	/^pub const TBM_SETLINESIZE = 0x0417/;"	constant
TBM_SETPAGESIZE	$ZIGLIB/std/os/windows/user32.zig	/^pub const TBM_SETPAGESIZE = 0x0415/;"	constant
TBM_SETPOS	$ZIGLIB/std/os/windows/user32.zig	/^pub const TBM_SETPOS = 0x0405/;"	constant
TBM_SETRANGE	$ZIGLIB/std/os/windows/user32.zig	/^pub const TBM_SETRANGE = 0x0406/;"	constant
TBM_SETRANGEMAX	$ZIGLIB/std/os/windows/user32.zig	/^pub const TBM_SETRANGEMAX = 0x0408/;"	constant
TBM_SETRANGEMIN	$ZIGLIB/std/os/windows/user32.zig	/^pub const TBM_SETRANGEMIN = 0x0407/;"	constant
TBM_SETSEL	$ZIGLIB/std/os/windows/user32.zig	/^pub const TBM_SETSEL = 0x040A/;"	constant
TBM_SETSELEND	$ZIGLIB/std/os/windows/user32.zig	/^pub const TBM_SETSELEND = 0x040C/;"	constant
TBM_SETSELSTART	$ZIGLIB/std/os/windows/user32.zig	/^pub const TBM_SETSELSTART = 0x040B/;"	constant
TBM_SETTHUMBLENGTH	$ZIGLIB/std/os/windows/user32.zig	/^pub const TBM_SETTHUMBLENGTH = 0x041B/;"	constant
TBM_SETTIC	$ZIGLIB/std/os/windows/user32.zig	/^pub const TBM_SETTIC = 0x0404/;"	constant
TBM_SETTICFREQ	$ZIGLIB/std/os/windows/user32.zig	/^pub const TBM_SETTICFREQ = 0x0414/;"	constant
TBM_SETTIPSIDE	$ZIGLIB/std/os/windows/user32.zig	/^pub const TBM_SETTIPSIDE = 0x041F/;"	constant
TBM_SETTOOLTIPS	$ZIGLIB/std/os/windows/user32.zig	/^pub const TBM_SETTOOLTIPS = 0x041D/;"	constant
TB_ADDBITMAP	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_ADDBITMAP = 0x0413/;"	constant
TB_ADDBUTTONSA	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_ADDBUTTONSA = 0x0414/;"	constant
TB_ADDBUTTONSW	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_ADDBUTTONSW = 0x0444/;"	constant
TB_ADDSTRINGA	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_ADDSTRINGA = 0x041C/;"	constant
TB_ADDSTRINGW	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_ADDSTRINGW = 0x044D/;"	constant
TB_AUTOSIZE	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_AUTOSIZE = 0x0421/;"	constant
TB_BUTTONCOUNT	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_BUTTONCOUNT = 0x0418/;"	constant
TB_BUTTONSTRUCTSIZE	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_BUTTONSTRUCTSIZE = 0x041E/;"	constant
TB_CHANGEBITMAP	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_CHANGEBITMAP = 0x042B/;"	constant
TB_CHECKBUTTON	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_CHECKBUTTON = 0x0402/;"	constant
TB_COMMANDTOINDEX	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_COMMANDTOINDEX = 0x0419/;"	constant
TB_CUSTOMIZE	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_CUSTOMIZE = 0x041B/;"	constant
TB_DELETEBUTTON	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_DELETEBUTTON = 0x0416/;"	constant
TB_ENABLEBUTTON	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_ENABLEBUTTON = 0x0401/;"	constant
TB_GETANCHORHIGHLIGHT	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_GETANCHORHIGHLIGHT = 0x044A/;"	constant
TB_GETBITMAP	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_GETBITMAP = 0x042C/;"	constant
TB_GETBITMAPFLAGS	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_GETBITMAPFLAGS = 0x0429/;"	constant
TB_GETBUTTON	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_GETBUTTON = 0x0417/;"	constant
TB_GETBUTTONINFOA	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_GETBUTTONINFOA = 0x0441/;"	constant
TB_GETBUTTONINFOW	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_GETBUTTONINFOW = 0x043F/;"	constant
TB_GETBUTTONSIZE	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_GETBUTTONSIZE = 0x043A/;"	constant
TB_GETBUTTONTEXTA	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_GETBUTTONTEXTA = 0x042D/;"	constant
TB_GETBUTTONTEXTW	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_GETBUTTONTEXTW = 0x044B/;"	constant
TB_GETDISABLEDIMAGELIST	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_GETDISABLEDIMAGELIST = 0x0437/;"	constant
TB_GETEXTENDEDSTYLE	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_GETEXTENDEDSTYLE = 0x0455/;"	constant
TB_GETHOTIMAGELIST	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_GETHOTIMAGELIST = 0x0435/;"	constant
TB_GETHOTITEM	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_GETHOTITEM = 0x0447/;"	constant
TB_GETIMAGELIST	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_GETIMAGELIST = 0x0431/;"	constant
TB_GETINSERTMARK	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_GETINSERTMARK = 0x044F/;"	constant
TB_GETINSERTMARKCOLOR	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_GETINSERTMARKCOLOR = 0x0459/;"	constant
TB_GETITEMRECT	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_GETITEMRECT = 0x041D/;"	constant
TB_GETMAXSIZE	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_GETMAXSIZE = 0x0453/;"	constant
TB_GETOBJECT	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_GETOBJECT = 0x043E/;"	constant
TB_GETPADDING	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_GETPADDING = 0x0456/;"	constant
TB_GETRECT	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_GETRECT = 0x0433/;"	constant
TB_GETROWS	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_GETROWS = 0x0428/;"	constant
TB_GETSTATE	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_GETSTATE = 0x0412/;"	constant
TB_GETSTRINGA	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_GETSTRINGA = 0x045C/;"	constant
TB_GETSTRINGW	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_GETSTRINGW = 0x045B/;"	constant
TB_GETSTYLE	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_GETSTYLE = 0x0439/;"	constant
TB_GETTEXTROWS	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_GETTEXTROWS = 0x043D/;"	constant
TB_GETTOOLTIPS	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_GETTOOLTIPS = 0x0423/;"	constant
TB_HIDEBUTTON	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_HIDEBUTTON = 0x0404/;"	constant
TB_HITTEST	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_HITTEST = 0x0445/;"	constant
TB_INDETERMINATE	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_INDETERMINATE = 0x0405/;"	constant
TB_INSERTBUTTONA	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_INSERTBUTTONA = 0x0415/;"	constant
TB_INSERTBUTTONW	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_INSERTBUTTONW = 0x0443/;"	constant
TB_INSERTMARKHITTEST	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_INSERTMARKHITTEST = 0x0451/;"	constant
TB_ISBUTTONCHECKED	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_ISBUTTONCHECKED = 0x040A/;"	constant
TB_ISBUTTONENABLED	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_ISBUTTONENABLED = 0x0409/;"	constant
TB_ISBUTTONHIDDEN	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_ISBUTTONHIDDEN = 0x040C/;"	constant
TB_ISBUTTONHIGHLIGHTED	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_ISBUTTONHIGHLIGHTED = 0x040E/;"	constant
TB_ISBUTTONINDETERMINATE	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_ISBUTTONINDETERMINATE = 0x040D/;"	constant
TB_ISBUTTONPRESSED	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_ISBUTTONPRESSED = 0x040B/;"	constant
TB_LOADIMAGES	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_LOADIMAGES = 0x0432/;"	constant
TB_MAPACCELERATORA	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_MAPACCELERATORA = 0x044E/;"	constant
TB_MAPACCELERATORW	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_MAPACCELERATORW = 0x045A/;"	constant
TB_MARKBUTTON	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_MARKBUTTON = 0x0406/;"	constant
TB_MOVEBUTTON	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_MOVEBUTTON = 0x0452/;"	constant
TB_PRESSBUTTON	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_PRESSBUTTON = 0x0403/;"	constant
TB_REPLACEBITMAP	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_REPLACEBITMAP = 0x042E/;"	constant
TB_SAVERESTOREA	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_SAVERESTOREA = 0x041A/;"	constant
TB_SAVERESTOREW	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_SAVERESTOREW = 0x044C/;"	constant
TB_SETANCHORHIGHLIGHT	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_SETANCHORHIGHLIGHT = 0x0449/;"	constant
TB_SETBITMAPSIZE	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_SETBITMAPSIZE = 0x0420/;"	constant
TB_SETBUTTONINFOA	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_SETBUTTONINFOA = 0x0442/;"	constant
TB_SETBUTTONINFOW	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_SETBUTTONINFOW = 0x0440/;"	constant
TB_SETBUTTONSIZE	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_SETBUTTONSIZE = 0x041F/;"	constant
TB_SETBUTTONWIDTH	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_SETBUTTONWIDTH = 0x043B/;"	constant
TB_SETCMDID	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_SETCMDID = 0x042A/;"	constant
TB_SETDISABLEDIMAGELIST	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_SETDISABLEDIMAGELIST = 0x0436/;"	constant
TB_SETDRAWTEXTFLAGS	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_SETDRAWTEXTFLAGS = 0x0446/;"	constant
TB_SETEXTENDEDSTYLE	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_SETEXTENDEDSTYLE = 0x0454/;"	constant
TB_SETHOTIMAGELIST	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_SETHOTIMAGELIST = 0x0434/;"	constant
TB_SETHOTITEM	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_SETHOTITEM = 0x0448/;"	constant
TB_SETIMAGELIST	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_SETIMAGELIST = 0x0430/;"	constant
TB_SETINDENT	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_SETINDENT = 0x042F/;"	constant
TB_SETINSERTMARK	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_SETINSERTMARK = 0x0450/;"	constant
TB_SETINSERTMARKCOLOR	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_SETINSERTMARKCOLOR = 0x0458/;"	constant
TB_SETMAXTEXTROWS	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_SETMAXTEXTROWS = 0x043C/;"	constant
TB_SETPADDING	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_SETPADDING = 0x0457/;"	constant
TB_SETPARENT	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_SETPARENT = 0x0425/;"	constant
TB_SETROWS	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_SETROWS = 0x0427/;"	constant
TB_SETSTATE	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_SETSTATE = 0x0411/;"	constant
TB_SETSTYLE	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_SETSTYLE = 0x0438/;"	constant
TB_SETTOOLTIPS	$ZIGLIB/std/os/windows/user32.zig	/^pub const TB_SETTOOLTIPS = 0x0424/;"	constant
TBits	$ZIGLIB/std/math/signbit.zig	/const TBits = std.meta.Int(.unsigned, @typeInfo(T).Float.bits)/;"	constant
TCIFLUSH	$ZIGLIB/std/c/openbsd.zig	/^pub const TCIFLUSH = 1/;"	constant
TCIOFF	$ZIGLIB/std/c/openbsd.zig	/^pub const TCIOFF = 3/;"	constant
TCIOFLUSH	$ZIGLIB/std/c/openbsd.zig	/^pub const TCIOFLUSH = 3/;"	constant
TCION	$ZIGLIB/std/c/openbsd.zig	/^pub const TCION = 4/;"	constant
TCLASS	$ZIGLIB/std/os/linux.zig	/pub const TCLASS = 67/;"	constant
TCNMESSAGE	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const TCNMESSAGE = 30/;"	constant
TCNPROCESS	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const TCNPROCESS = 29/;"	constant
TCOFLUSH	$ZIGLIB/std/c/openbsd.zig	/^pub const TCOFLUSH = 2/;"	constant
TCOOFF	$ZIGLIB/std/c/openbsd.zig	/^pub const TCOOFF = 1/;"	constant
TCOON	$ZIGLIB/std/c/openbsd.zig	/^pub const TCOON = 2/;"	constant
TCPI_OPT_ECN	$ZIGLIB/std/os/linux.zig	/^pub const TCPI_OPT_ECN = 8/;"	constant
TCPI_OPT_ECN_SEEN	$ZIGLIB/std/os/linux.zig	/^pub const TCPI_OPT_ECN_SEEN = 16/;"	constant
TCPI_OPT_SACK	$ZIGLIB/std/os/linux.zig	/^pub const TCPI_OPT_SACK = 2/;"	constant
TCPI_OPT_SYN_DATA	$ZIGLIB/std/os/linux.zig	/^pub const TCPI_OPT_SYN_DATA = 32/;"	constant
TCPI_OPT_TIMESTAMPS	$ZIGLIB/std/os/linux.zig	/^pub const TCPI_OPT_TIMESTAMPS = 1/;"	constant
TCPI_OPT_WSCALE	$ZIGLIB/std/os/linux.zig	/^pub const TCPI_OPT_WSCALE = 4/;"	constant
TCP_INITIAL_RTO_DEFAULT_MAX_SYN_RETRANSMISSIONS	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const TCP_INITIAL_RTO_DEFAULT_MAX_SYN_RETRANSMISSIONS = 0/;"	constant
TCP_INITIAL_RTO_DEFAULT_RTT	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const TCP_INITIAL_RTO_DEFAULT_RTT = 0/;"	constant
TCP_NO_QUEUE	$ZIGLIB/std/os/linux.zig	/TCP_NO_QUEUE/;"	field
TCP_QUEUES_NR	$ZIGLIB/std/os/linux.zig	/TCP_QUEUES_NR/;"	field
TCP_RECV_QUEUE	$ZIGLIB/std/os/linux.zig	/TCP_RECV_QUEUE/;"	field
TCP_SEND_QUEUE	$ZIGLIB/std/os/linux.zig	/TCP_SEND_QUEUE/;"	field
TCSA	$ZIGLIB/std/os/linux.zig	/^pub const TCSA = enum(c_uint) {$/;"	enum
TCSADRAIN	$ZIGLIB/std/c/darwin.zig	/^pub const TCSADRAIN: tcflag_t = 1/;"	constant
TCSAFLUSH	$ZIGLIB/std/c/darwin.zig	/^pub const TCSAFLUSH: tcflag_t = 2/;"	constant
TCSANOW	$ZIGLIB/std/c/darwin.zig	/^pub const TCSANOW: tcflag_t = 0/;"	constant
TCSASOFT	$ZIGLIB/std/c/darwin.zig	/^pub const TCSASOFT: tcflag_t = 0x10/;"	constant
TELUGU	$ZIGLIB/std/os/windows/lang.zig	/^pub const TELUGU = 0x4a/;"	constant
TELUGU_INDIA	$ZIGLIB/std/os/windows/sublang.zig	/^pub const TELUGU_INDIA = 0x01/;"	constant
TERM	$ZIGLIB/std/os/linux.zig	/pub const TERM = 15/;"	constant
TERMINAL_SERVER_AWARE	$ZIGLIB/std/coff.zig	/TERMINAL_SERVER_AWARE: u1 = 0/;"	field
TERMINATED	$ZIGLIB/std/c/darwin.zig	/TERMINATED = 37/;"	field
TERMSIG	$ZIGLIB/std/os/linux.zig	/pub fn TERMSIG(s: u32) u32 {$/;"	function
TEST	$ZIGLIB/std/c/solaris.zig	/pub const TEST = 3/;"	constant
TEXT	$ZIGLIB/std/c/solaris.zig	/pub const TEXT = 0x0400/;"	constant
TFO_COOKIE_UNAVAILABLE	$ZIGLIB/std/os/linux.zig	/TFO_COOKIE_UNAVAILABLE/;"	field
TFO_DATA_NOT_ACKED	$ZIGLIB/std/os/linux.zig	/TFO_DATA_NOT_ACKED/;"	field
TFO_STATUS_UNSPEC	$ZIGLIB/std/os/linux.zig	/TFO_STATUS_UNSPEC/;"	field
TFO_SYN_RETRANSMITTED	$ZIGLIB/std/os/linux.zig	/TFO_SYN_RETRANSMITTED/;"	field
TF_DISCONNECT	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const TF_DISCONNECT = 1/;"	constant
TF_REUSE_SOCKET	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const TF_REUSE_SOCKET = 2/;"	constant
TF_USE_DEFAULT_WORKER	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const TF_USE_DEFAULT_WORKER = 0/;"	constant
TF_USE_KERNEL_APC	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const TF_USE_KERNEL_APC = 32/;"	constant
TF_USE_SYSTEM_THREAD	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const TF_USE_SYSTEM_THREAD = 16/;"	constant
TF_WRITE_BEHIND	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const TF_WRITE_BEHIND = 4/;"	constant
TH32CS_INHERIT	$ZIGLIB/std/os/windows.zig	/^pub const TH32CS_INHERIT = 0x80000000/;"	constant
TH32CS_SNAPALL	$ZIGLIB/std/os/windows.zig	/^pub const TH32CS_SNAPALL = TH32CS_SNAPHEAPLIST | TH32CS_SNAPPROCESS | TH32CS_SNAPTHREAD | TH32CS_SNAPMODULE/;"	constant
TH32CS_SNAPHEAPLIST	$ZIGLIB/std/os/windows.zig	/^pub const TH32CS_SNAPHEAPLIST = 0x00000001/;"	constant
TH32CS_SNAPMODULE	$ZIGLIB/std/os/windows.zig	/^pub const TH32CS_SNAPMODULE = 0x00000008/;"	constant
TH32CS_SNAPMODULE32	$ZIGLIB/std/os/windows.zig	/^pub const TH32CS_SNAPMODULE32 = 0x00000010/;"	constant
TH32CS_SNAPPROCESS	$ZIGLIB/std/os/windows.zig	/^pub const TH32CS_SNAPPROCESS = 0x00000002/;"	constant
TH32CS_SNAPTHREAD	$ZIGLIB/std/os/windows.zig	/^pub const TH32CS_SNAPTHREAD = 0x00000004/;"	constant
THAI	$ZIGLIB/std/os/windows/lang.zig	/^pub const THAI = 0x1e/;"	constant
THAI_THAILAND	$ZIGLIB/std/os/windows/sublang.zig	/^pub const THAI_THAILAND = 0x01/;"	constant
THAW	$ZIGLIB/std/c/solaris.zig	/pub const THAW = 35/;"	constant
THAW_FS	$ZIGLIB/std/c/darwin.zig	/pub const THAW_FS = 54/;"	constant
THIN_DUPACK	$ZIGLIB/std/os/linux.zig	/pub const THIN_DUPACK = 17/;"	constant
THIN_LINEAR_TIMEOUTS	$ZIGLIB/std/os/linux.zig	/pub const THIN_LINEAR_TIMEOUTS = 16/;"	constant
THREAD	$ZIGLIB/std/os/linux.zig	/pub const THREAD = 1/;"	constant
THREADINFOCLASS	$ZIGLIB/std/os/windows/ntdll.zig	/^pub const THREADINFOCLASS = enum(c_int) {$/;"	enum
THREADPOOL_FREE_LIBRARY_ON_COMPLETION_FAILED	$ZIGLIB/std/os/windows/ntstatus.zig	/THREADPOOL_FREE_LIBRARY_ON_COMPLETION_FAILED = 0xC000070E/;"	field
THREADPOOL_HANDLE_EXCEPTION	$ZIGLIB/std/os/windows/ntstatus.zig	/THREADPOOL_HANDLE_EXCEPTION = 0xC000070A/;"	field
THREADPOOL_RELEASED_DURING_OPERATION	$ZIGLIB/std/os/windows/ntstatus.zig	/THREADPOOL_RELEASED_DURING_OPERATION = 0xC000070F/;"	field
THREADPOOL_RELEASE_MUTEX_ON_COMPLETION_FAILED	$ZIGLIB/std/os/windows/ntstatus.zig	/THREADPOOL_RELEASE_MUTEX_ON_COMPLETION_FAILED = 0xC000070D/;"	field
THREADPOOL_RELEASE_SEMAPHORE_ON_COMPLETION_FAILED	$ZIGLIB/std/os/windows/ntstatus.zig	/THREADPOOL_RELEASE_SEMAPHORE_ON_COMPLETION_FAILED = 0xC000070C/;"	field
THREADPOOL_SET_EVENT_ON_COMPLETION_FAILED	$ZIGLIB/std/os/windows/ntstatus.zig	/THREADPOOL_SET_EVENT_ON_COMPLETION_FAILED = 0xC000070B/;"	field
THREAD_1_INACTIVE	$ZIGLIB/std/os/windows/win32error.zig	/THREAD_1_INACTIVE = 210/;"	field
THREAD_ALREADY_IN_TASK	$ZIGLIB/std/os/windows/win32error.zig	/THREAD_ALREADY_IN_TASK = 1552/;"	field
THREAD_BASIC_INFO	$ZIGLIB/std/c/darwin.zig	/^pub const THREAD_BASIC_INFO = 3/;"	constant
THREAD_BASIC_INFORMATION	$ZIGLIB/std/os/windows.zig	/^pub const THREAD_BASIC_INFORMATION = extern struct {$/;"	struct
THREAD_BASIC_INFO_COUNT	$ZIGLIB/std/c/darwin.zig	/^pub const THREAD_BASIC_INFO_COUNT: mach_msg_type_number_t = @sizeOf(thread_basic_info) \/ @sizeOf(natural_t)/;"	constant
THREAD_CPUTIME_ID	$ZIGLIB/std/os/wasi.zig	/pub const THREAD_CPUTIME_ID: clockid_t = 3/;"	constant
THREAD_IDENTIFIER_INFO	$ZIGLIB/std/c/darwin.zig	/^pub const THREAD_IDENTIFIER_INFO = 4/;"	constant
THREAD_IDENTIFIER_INFO_COUNT	$ZIGLIB/std/c/darwin.zig	/^pub const THREAD_IDENTIFIER_INFO_COUNT: mach_msg_type_number_t = @sizeOf(thread_identifier_info) \/ @sizeOf(natural_t)/;"	constant
THREAD_IS_TERMINATING	$ZIGLIB/std/os/windows/ntstatus.zig	/THREAD_IS_TERMINATING = 0xC000004B/;"	field
THREAD_MODE_ALREADY_BACKGROUND	$ZIGLIB/std/os/windows/win32error.zig	/THREAD_MODE_ALREADY_BACKGROUND = 400/;"	field
THREAD_MODE_NOT_BACKGROUND	$ZIGLIB/std/os/windows/win32error.zig	/THREAD_MODE_NOT_BACKGROUND = 401/;"	field
THREAD_NOT_IN_PROCESS	$ZIGLIB/std/os/windows/win32error.zig	/THREAD_NOT_IN_PROCESS = 566/;"	field
THREAD_NULL	$ZIGLIB/std/c/darwin.zig	/^pub const THREAD_NULL: thread_t = 0/;"	constant
THREAD_STATE	$ZIGLIB/std/c/darwin/x86_64.zig	/^pub const THREAD_STATE = 4/;"	constant
THREAD_STATE_COUNT	$ZIGLIB/std/c/darwin/x86_64.zig	/^pub const THREAD_STATE_COUNT: c.mach_msg_type_number_t = @sizeOf(thread_state) \/ @sizeOf(c_int)/;"	constant
THREAD_STATE_NONE	$ZIGLIB/std/c/darwin/x86_64.zig	/^pub const THREAD_STATE_NONE = 13/;"	constant
THREAD_WAS_SUSPENDED	$ZIGLIB/std/os/windows/win32error.zig	/THREAD_WAS_SUSPENDED = 699/;"	field
THUMB	$ZIGLIB/std/os/linux/arm-eabi.zig	/pub const THUMB = 1 << 2/;"	constant
THUMBEE	$ZIGLIB/std/os/linux/arm-eabi.zig	/pub const THUMBEE = 1 << 11/;"	constant
THUMB_MOV32	$ZIGLIB/std/coff.zig	/THUMB_MOV32 = 7/;"	field
TH_NETDEV	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const TH_NETDEV = 1/;"	constant
TH_TAPI	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const TH_TAPI = 2/;"	constant
TIBETAN	$ZIGLIB/std/os/windows/lang.zig	/^pub const TIBETAN = 0x51/;"	constant
TIBETAN_PRC	$ZIGLIB/std/os/windows/sublang.zig	/^pub const TIBETAN_PRC = 0x01/;"	constant
TIGRIGNA	$ZIGLIB/std/os/windows/lang.zig	/^pub const TIGRIGNA = 0x73/;"	constant
TIGRIGNA_ERITREA	$ZIGLIB/std/os/windows/sublang.zig	/^pub const TIGRIGNA_ERITREA = 0x02/;"	constant
TIGRINYA	$ZIGLIB/std/os/windows/lang.zig	/^pub const TIGRINYA = 0x73/;"	constant
TIGRINYA_ERITREA	$ZIGLIB/std/os/windows/sublang.zig	/^pub const TIGRINYA_ERITREA = 0x02/;"	constant
TIGRINYA_ETHIOPIA	$ZIGLIB/std/os/windows/sublang.zig	/^pub const TIGRINYA_ETHIOPIA = 0x01/;"	constant
TILE64	$ZIGLIB/std/elf.zig	/TILE64 = 187/;"	field
TILEGX	$ZIGLIB/std/elf.zig	/TILEGX = 191/;"	field
TILEPRO	$ZIGLIB/std/elf.zig	/TILEPRO = 188/;"	field
TIME	$ZIGLIB/std/os/linux/errno/sparc.zig	/TIME = 73/;"	field
TIMECAPS	$ZIGLIB/std/os/windows/winmm.zig	/^pub const TIMECAPS = extern struct { wPeriodMin: UINT, wPeriodMax: UINT }/;"	struct
TIMECOUNTER	$ZIGLIB/std/c/openbsd.zig	/pub const TIMECOUNTER = 69/;"	constant
TIMEDOUT	$ZIGLIB/std/os/wasi.zig	/TIMEDOUT = 73/;"	field
TIMEOUT	$ZIGLIB/std/os/windows/win32error.zig	/TIMEOUT = 1460/;"	field
TIMEOUT_REMOVE	$ZIGLIB/std/os/linux.zig	/TIMEOUT_REMOVE/;"	field
TIMEOUT_STATS	$ZIGLIB/std/c/openbsd.zig	/pub const TIMEOUT_STATS = 87/;"	constant
TIMER	$ZIGLIB/std/c/solaris.zig	/pub const TIMER = 2/;"	constant
TIMERR_BASE	$ZIGLIB/std/os/windows/winmm.zig	/^pub const TIMERR_BASE = 96/;"	constant
TIMERR_NOCANDO	$ZIGLIB/std/os/windows/winmm.zig	/^pub const TIMERR_NOCANDO = TIMERR_BASE + 1/;"	constant
TIMERR_NOERROR	$ZIGLIB/std/os/windows/winmm.zig	/^pub const TIMERR_NOERROR = 0/;"	constant
TIMERR_STRUCT	$ZIGLIB/std/os/windows/winmm.zig	/^pub const TIMERR_STRUCT = TIMERR_BASE + 33/;"	constant
TIMER_ABSTIME	$ZIGLIB/std/os/linux.zig	/pub const TIMER_ABSTIME = 1/;"	constant
TIMER_CANCEL_ON_SET	$ZIGLIB/std/os/linux.zig	/pub const TIMER_CANCEL_ON_SET = (1 << 1)/;"	constant
TIMER_NOT_CANCELED	$ZIGLIB/std/os/windows/win32error.zig	/TIMER_NOT_CANCELED = 541/;"	field
TIMER_RESOLUTION_NOT_SET	$ZIGLIB/std/os/windows/win32error.zig	/TIMER_RESOLUTION_NOT_SET = 607/;"	field
TIMER_RESUME_IGNORED	$ZIGLIB/std/os/windows/win32error.zig	/TIMER_RESUME_IGNORED = 722/;"	field
TIMESTAMP	$ZIGLIB/std/os/linux.zig	/pub const TIMESTAMP = 24/;"	constant
TIMESTAMPING_NEW	$ZIGLIB/std/os/linux.zig	/pub const TIMESTAMPING_NEW = 67/;"	constant
TIMESTAMPING_OLD	$ZIGLIB/std/os/linux.zig	/pub const TIMESTAMPING_OLD = 37/;"	constant
TIMESTAMPING_OPT_STATS	$ZIGLIB/std/os/linux.zig	/pub const TIMESTAMPING_OPT_STATS = 54/;"	constant
TIMESTAMPING_PKTINFO	$ZIGLIB/std/os/linux.zig	/pub const TIMESTAMPING_PKTINFO = 58/;"	constant
TIMESTAMPNS_NEW	$ZIGLIB/std/os/linux.zig	/pub const TIMESTAMPNS_NEW = 66/;"	constant
TIMESTAMPNS_OLD	$ZIGLIB/std/os/linux.zig	/pub const TIMESTAMPNS_OLD = 35/;"	constant
TIMESTAMPS	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const TIMESTAMPS = 10/;"	constant
TIMESTAMP_NEW	$ZIGLIB/std/os/linux.zig	/pub const TIMESTAMP_NEW = 70/;"	constant
TIMESTAMP_OLD	$ZIGLIB/std/os/linux.zig	/pub const TIMESTAMP_OLD = 29/;"	constant
TIME_BYTES	$ZIGLIB/std/os/windows/winmm.zig	/^pub const TIME_BYTES = 0x0004/;"	constant
TIME_DIFFERENCE_AT_DC	$ZIGLIB/std/os/windows/ntstatus.zig	/TIME_DIFFERENCE_AT_DC = 0xC0000133/;"	field
TIME_MIDI	$ZIGLIB/std/os/windows/winmm.zig	/^pub const TIME_MIDI = 0x0010/;"	constant
TIME_MS	$ZIGLIB/std/os/windows/winmm.zig	/^pub const TIME_MS = 0x0001/;"	constant
TIME_SAMPLES	$ZIGLIB/std/os/windows/winmm.zig	/^pub const TIME_SAMPLES = 0x0002/;"	constant
TIME_SKEW	$ZIGLIB/std/os/windows/win32error.zig	/TIME_SKEW = 1398/;"	field
TIME_SMPTE	$ZIGLIB/std/os/windows/winmm.zig	/^pub const TIME_SMPTE = 0x0008/;"	constant
TIME_TICKS	$ZIGLIB/std/os/windows/winmm.zig	/^pub const TIME_TICKS = 0x0020/;"	constant
TIMING_STATISTICAL	$ZIGLIB/std/os/linux.zig	/pub const TIMING_STATISTICAL = 0/;"	constant
TIMING_TIMESTAMP	$ZIGLIB/std/os/linux.zig	/pub const TIMING_TIMESTAMP = 1/;"	constant
TINYJ	$ZIGLIB/std/elf.zig	/TINYJ = 61/;"	field
TIPC	$ZIGLIB/std/os/linux.zig	/pub const TIPC = 30/;"	constant
TI_C2000	$ZIGLIB/std/elf.zig	/TI_C2000 = 141/;"	field
TI_C5500	$ZIGLIB/std/elf.zig	/TI_C5500 = 142/;"	field
TI_C6000	$ZIGLIB/std/elf.zig	/TI_C6000 = 140/;"	field
TLOCK	$ZIGLIB/std/c/solaris.zig	/pub const TLOCK = 2/;"	constant
TLSImage	$ZIGLIB/std/os/linux/tls.zig	/^const TLSImage = struct {$/;"	struct
TLSP	$ZIGLIB/std/c/freebsd.zig	/pub const TLSP = 56/;"	constant
TLSVariant	$ZIGLIB/std/os/linux/tls.zig	/^const TLSVariant = enum {$/;"	enum
TLS_OUT_OF_INDEXES	$ZIGLIB/std/os/windows.zig	/^pub const TLS_OUT_OF_INDEXES = 4294967295/;"	constant
TLW_WITH_WSCHILD	$ZIGLIB/std/os/windows/win32error.zig	/TLW_WITH_WSCHILD = 1406/;"	field
TMM_GPP	$ZIGLIB/std/elf.zig	/TMM_GPP = 96/;"	field
TMPFILE	$ZIGLIB/std/os/linux/x86_64.zig	/pub const TMPFILE = 0o20200000/;"	constant
TMP_PATH_LEN	$ZIGLIB/std/fs.zig	/const TMP_PATH_LEN = base64_encoder.calcSize(RANDOM_BYTES)/;"	constant
TM_IDENTITY_MISMATCH	$ZIGLIB/std/os/windows/ntstatus.zig	/TM_IDENTITY_MISMATCH = 0xC019004A/;"	field
TM_INITIALIZATION_FAILED	$ZIGLIB/std/os/windows/ntstatus.zig	/TM_INITIALIZATION_FAILED = 0xC0190004/;"	field
TM_VOLATILE	$ZIGLIB/std/os/windows/ntstatus.zig	/TM_VOLATILE = 0xC019003B/;"	field
TNS_PLAN_CARRIER_ID_CODE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const TNS_PLAN_CARRIER_ID_CODE = 1/;"	constant
TNS_TYPE_NATIONAL	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const TNS_TYPE_NATIONAL = 64/;"	constant
TOKEN_ALREADY_IN_USE	$ZIGLIB/std/os/windows/win32error.zig	/TOKEN_ALREADY_IN_USE = 1375/;"	field
TOOL	$ZIGLIB/std/macho.zig	/^pub const TOOL = enum(u32) {$/;"	enum
TOOMANYREFS	$ZIGLIB/std/os/linux/errno/sparc.zig	/TOOMANYREFS = 59/;"	field
TOO_LATE	$ZIGLIB/std/os/windows/ntstatus.zig	/TOO_LATE = 0xC0000189/;"	field
TOO_MANY_ADDRESSES	$ZIGLIB/std/os/windows/ntstatus.zig	/TOO_MANY_ADDRESSES = 0xC0000209/;"	field
TOO_MANY_CMDS	$ZIGLIB/std/os/windows/win32error.zig	/TOO_MANY_CMDS = 56/;"	field
TOO_MANY_COMMANDS	$ZIGLIB/std/os/windows/ntstatus.zig	/TOO_MANY_COMMANDS = 0xC00000C1/;"	field
TOO_MANY_CONTEXT_IDS	$ZIGLIB/std/os/windows/win32error.zig	/TOO_MANY_CONTEXT_IDS = 1384/;"	field
TOO_MANY_DESCRIPTORS	$ZIGLIB/std/os/windows/win32error.zig	/TOO_MANY_DESCRIPTORS = 331/;"	field
TOO_MANY_GUIDS_REQUESTED	$ZIGLIB/std/os/windows/ntstatus.zig	/TOO_MANY_GUIDS_REQUESTED = 0xC0000082/;"	field
TOO_MANY_LINKS	$ZIGLIB/std/os/windows/win32error.zig	/TOO_MANY_LINKS = 1142/;"	field
TOO_MANY_LUIDS_REQUESTED	$ZIGLIB/std/os/windows/win32error.zig	/TOO_MANY_LUIDS_REQUESTED = 1333/;"	field
TOO_MANY_MODULES	$ZIGLIB/std/os/windows/win32error.zig	/TOO_MANY_MODULES = 214/;"	field
TOO_MANY_MUXWAITERS	$ZIGLIB/std/os/windows/win32error.zig	/TOO_MANY_MUXWAITERS = 152/;"	field
TOO_MANY_NAMES	$ZIGLIB/std/os/windows/win32error.zig	/TOO_MANY_NAMES = 68/;"	field
TOO_MANY_NODES	$ZIGLIB/std/os/windows/ntstatus.zig	/TOO_MANY_NODES = 0xC000020E/;"	field
TOO_MANY_OPENED_FILES	$ZIGLIB/std/os/windows/ntstatus.zig	/TOO_MANY_OPENED_FILES = 0xC000011F/;"	field
TOO_MANY_OPEN_FILES	$ZIGLIB/std/os/windows/win32error.zig	/TOO_MANY_OPEN_FILES = 4/;"	field
TOO_MANY_PAGING_FILES	$ZIGLIB/std/os/windows/ntstatus.zig	/TOO_MANY_PAGING_FILES = 0xC0000097/;"	field
TOO_MANY_POSTS	$ZIGLIB/std/os/windows/win32error.zig	/TOO_MANY_POSTS = 298/;"	field
TOO_MANY_PRINCIPALS	$ZIGLIB/std/os/windows/ntstatus.zig	/TOO_MANY_PRINCIPALS = 0xC00002F7/;"	field
TOO_MANY_SECRETS	$ZIGLIB/std/os/windows/win32error.zig	/TOO_MANY_SECRETS = 1381/;"	field
TOO_MANY_SEMAPHORES	$ZIGLIB/std/os/windows/win32error.zig	/TOO_MANY_SEMAPHORES = 100/;"	field
TOO_MANY_SEM_REQUESTS	$ZIGLIB/std/os/windows/win32error.zig	/TOO_MANY_SEM_REQUESTS = 103/;"	field
TOO_MANY_SESS	$ZIGLIB/std/os/windows/win32error.zig	/TOO_MANY_SESS = 69/;"	field
TOO_MANY_SESSIONS	$ZIGLIB/std/os/windows/ntstatus.zig	/TOO_MANY_SESSIONS = 0xC00000CE/;"	field
TOO_MANY_SIDS	$ZIGLIB/std/os/windows/win32error.zig	/TOO_MANY_SIDS = 1389/;"	field
TOO_MANY_TCBS	$ZIGLIB/std/os/windows/win32error.zig	/TOO_MANY_TCBS = 155/;"	field
TOO_MANY_THREADS	$ZIGLIB/std/os/windows/win32error.zig	/TOO_MANY_THREADS = 565/;"	field
TOSTOP	$ZIGLIB/std/os/linux.zig	/^pub const TOSTOP: tcflag_t = 256/;"	constant
TO_BE	$ZIGLIB/std/os/linux/bpf.zig	/^pub const TO_BE = 0x08/;"	constant
TO_INDEX	$ZIGLIB/std/os/linux.zig	/pub fn TO_INDEX(cap: u8) u8 {$/;"	function
TO_LE	$ZIGLIB/std/os/linux/bpf.zig	/^pub const TO_LE = 0x00/;"	constant
TO_MASK	$ZIGLIB/std/os/linux.zig	/pub fn TO_MASK(cap: u8) u32 {$/;"	function
TPXX	$ZIGLIB/std/c/freebsd.zig	/pub const TPXX = 39/;"	constant
TP_ELEMENT_EOP	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const TP_ELEMENT_EOP = 4/;"	constant
TP_ELEMENT_FILE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const TP_ELEMENT_FILE = 2/;"	constant
TP_ELEMENT_MEMORY	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const TP_ELEMENT_MEMORY = 1/;"	constant
TRACE	$ZIGLIB/std/os/linux/seccomp.zig	/pub const TRACE = 0x7ff00000/;"	constant
TRACEPOINT	$ZIGLIB/std/os/linux.zig	/TRACEPOINT/;"	field
TRANSACTED_MAPPING_UNSUPPORTED_REMOTE	$ZIGLIB/std/os/windows/ntstatus.zig	/TRANSACTED_MAPPING_UNSUPPORTED_REMOTE = 0xC0190040/;"	field
TRANSACTION	$ZIGLIB/std/os/linux.zig	/pub const TRANSACTION = 131072/;"	constant
TRANSACTIONAL_CONFLICT	$ZIGLIB/std/os/windows/ntstatus.zig	/TRANSACTIONAL_CONFLICT = 0xC0190001/;"	field
TRANSACTIONAL_OPEN_NOT_ALLOWED	$ZIGLIB/std/os/windows/ntstatus.zig	/TRANSACTIONAL_OPEN_NOT_ALLOWED = 0xC019003F/;"	field
TRANSACTIONMANAGER_NOT_FOUND	$ZIGLIB/std/os/windows/ntstatus.zig	/TRANSACTIONMANAGER_NOT_FOUND = 0xC0190051/;"	field
TRANSACTIONMANAGER_NOT_ONLINE	$ZIGLIB/std/os/windows/ntstatus.zig	/TRANSACTIONMANAGER_NOT_ONLINE = 0xC0190052/;"	field
TRANSACTIONMANAGER_RECOVERY_NAME_COLLISION	$ZIGLIB/std/os/windows/ntstatus.zig	/TRANSACTIONMANAGER_RECOVERY_NAME_COLLISION = 0xC0190053/;"	field
TRANSACTIONS_NOT_FROZEN	$ZIGLIB/std/os/windows/ntstatus.zig	/TRANSACTIONS_NOT_FROZEN = 0xC0190045/;"	field
TRANSACTIONS_UNSUPPORTED_REMOTE	$ZIGLIB/std/os/windows/ntstatus.zig	/TRANSACTIONS_UNSUPPORTED_REMOTE = 0xC019000A/;"	field
TRANSACTION_ABORTED	$ZIGLIB/std/os/windows/ntstatus.zig	/TRANSACTION_ABORTED = 0xC000020F/;"	field
TRANSACTION_ALREADY_ABORTED	$ZIGLIB/std/os/windows/ntstatus.zig	/TRANSACTION_ALREADY_ABORTED = 0xC0190015/;"	field
TRANSACTION_ALREADY_COMMITTED	$ZIGLIB/std/os/windows/ntstatus.zig	/TRANSACTION_ALREADY_COMMITTED = 0xC0190016/;"	field
TRANSACTION_FREEZE_IN_PROGRESS	$ZIGLIB/std/os/windows/ntstatus.zig	/TRANSACTION_FREEZE_IN_PROGRESS = 0xC0190046/;"	field
TRANSACTION_INTEGRITY_VIOLATED	$ZIGLIB/std/os/windows/ntstatus.zig	/TRANSACTION_INTEGRITY_VIOLATED = 0xC019005B/;"	field
TRANSACTION_INVALID_ID	$ZIGLIB/std/os/windows/ntstatus.zig	/TRANSACTION_INVALID_ID = 0xC0000214/;"	field
TRANSACTION_INVALID_MARSHALL_BUFFER	$ZIGLIB/std/os/windows/ntstatus.zig	/TRANSACTION_INVALID_MARSHALL_BUFFER = 0xC0190017/;"	field
TRANSACTION_INVALID_TYPE	$ZIGLIB/std/os/windows/ntstatus.zig	/TRANSACTION_INVALID_TYPE = 0xC0000215/;"	field
TRANSACTION_NOT_ACTIVE	$ZIGLIB/std/os/windows/ntstatus.zig	/TRANSACTION_NOT_ACTIVE = 0xC0190003/;"	field
TRANSACTION_NOT_ENLISTED	$ZIGLIB/std/os/windows/ntstatus.zig	/TRANSACTION_NOT_ENLISTED = 0xC0190061/;"	field
TRANSACTION_NOT_FOUND	$ZIGLIB/std/os/windows/ntstatus.zig	/TRANSACTION_NOT_FOUND = 0xC019004E/;"	field
TRANSACTION_NOT_JOINED	$ZIGLIB/std/os/windows/ntstatus.zig	/TRANSACTION_NOT_JOINED = 0xC0190007/;"	field
TRANSACTION_NOT_REQUESTED	$ZIGLIB/std/os/windows/ntstatus.zig	/TRANSACTION_NOT_REQUESTED = 0xC0190014/;"	field
TRANSACTION_NOT_ROOT	$ZIGLIB/std/os/windows/ntstatus.zig	/TRANSACTION_NOT_ROOT = 0xC0190054/;"	field
TRANSACTION_NO_MATCH	$ZIGLIB/std/os/windows/ntstatus.zig	/TRANSACTION_NO_MATCH = 0xC0000212/;"	field
TRANSACTION_NO_RELEASE	$ZIGLIB/std/os/windows/ntstatus.zig	/TRANSACTION_NO_RELEASE = 0xC0000211/;"	field
TRANSACTION_OBJECT_EXPIRED	$ZIGLIB/std/os/windows/ntstatus.zig	/TRANSACTION_OBJECT_EXPIRED = 0xC0190055/;"	field
TRANSACTION_PROPAGATION_FAILED	$ZIGLIB/std/os/windows/ntstatus.zig	/TRANSACTION_PROPAGATION_FAILED = 0xC0190010/;"	field
TRANSACTION_RECORD_TOO_LONG	$ZIGLIB/std/os/windows/ntstatus.zig	/TRANSACTION_RECORD_TOO_LONG = 0xC0190058/;"	field
TRANSACTION_REQUEST_NOT_VALID	$ZIGLIB/std/os/windows/ntstatus.zig	/TRANSACTION_REQUEST_NOT_VALID = 0xC0190013/;"	field
TRANSACTION_REQUIRED_PROMOTION	$ZIGLIB/std/os/windows/ntstatus.zig	/TRANSACTION_REQUIRED_PROMOTION = 0xC0190043/;"	field
TRANSACTION_RESPONDED	$ZIGLIB/std/os/windows/ntstatus.zig	/TRANSACTION_RESPONDED = 0xC0000213/;"	field
TRANSACTION_RESPONSE_NOT_ENLISTED	$ZIGLIB/std/os/windows/ntstatus.zig	/TRANSACTION_RESPONSE_NOT_ENLISTED = 0xC0190057/;"	field
TRANSACTION_SCOPE_CALLBACKS_NOT_SET	$ZIGLIB/std/os/windows/ntstatus.zig	/TRANSACTION_SCOPE_CALLBACKS_NOT_SET = 0x80190042/;"	field
TRANSACTION_SUPERIOR_EXISTS	$ZIGLIB/std/os/windows/ntstatus.zig	/TRANSACTION_SUPERIOR_EXISTS = 0xC0190012/;"	field
TRANSACTION_TIMED_OUT	$ZIGLIB/std/os/windows/ntstatus.zig	/TRANSACTION_TIMED_OUT = 0xC0000210/;"	field
TRANSCODEKEY	$ZIGLIB/std/c/darwin.zig	/pub const TRANSCODEKEY = 75/;"	constant
TRANSFORM_NOT_SUPPORTED	$ZIGLIB/std/os/windows/win32error.zig	/TRANSFORM_NOT_SUPPORTED = 2004/;"	field
TRANSLATION_COMPLETE	$ZIGLIB/std/os/windows/win32error.zig	/TRANSLATION_COMPLETE = 757/;"	field
TRANSMIT_FILE_BUFFERS	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const TRANSMIT_FILE_BUFFERS = extern struct {$/;"	struct
TRANSPARENT	$ZIGLIB/std/os/linux.zig	/pub const TRANSPARENT = 75/;"	constant
TRANSPORT_FULL	$ZIGLIB/std/os/windows/ntstatus.zig	/TRANSPORT_FULL = 0xC00002CA/;"	field
TRAP	$ZIGLIB/std/os/linux/seccomp.zig	/pub const TRAP = 0x00030000/;"	constant
TRAPNO	$ZIGLIB/std/os/linux/x86_64.zig	/pub const TRAPNO = 20/;"	constant
TRAPPED	$ZIGLIB/std/c/solaris.zig	/pub const TRAPPED = 0o002/;"	constant
TRICORE	$ZIGLIB/std/elf.zig	/TRICORE = 44/;"	field
TRIGGER	$ZIGLIB/std/c/solaris.zig	/pub const TRIGGER = 0x2/;"	constant
TRILL	$ZIGLIB/std/c/solaris.zig	/pub const TRILL = 31/;"	constant
TRIMEDIA	$ZIGLIB/std/elf.zig	/TRIMEDIA = 163/;"	field
TRIM_ACTIVE_FILE	$ZIGLIB/std/c/darwin.zig	/pub const TRIM_ACTIVE_FILE = 100/;"	constant
TRUE	$ZIGLIB/std/os/windows.zig	/^pub const TRUE = 1/;"	constant
TRUNC	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const TRUNC = 256/;"	constant
TRUNCATE_EXISTING	$ZIGLIB/std/os/windows.zig	/^pub const TRUNCATE_EXISTING = 5/;"	constant
TRUNK1	$ZIGLIB/std/c/freebsd.zig	/pub const TRUNK1 = 23/;"	constant
TRUNK2	$ZIGLIB/std/c/freebsd.zig	/pub const TRUNK2 = 24/;"	constant
TRUSTED_DOMAIN_FAILURE	$ZIGLIB/std/os/windows/win32error.zig	/TRUSTED_DOMAIN_FAILURE = 1788/;"	field
TRUSTED_RELATIONSHIP_FAILURE	$ZIGLIB/std/os/windows/win32error.zig	/TRUSTED_RELATIONSHIP_FAILURE = 1789/;"	field
TRUST_FAILURE	$ZIGLIB/std/os/windows/win32error.zig	/TRUST_FAILURE = 1790/;"	field
TRYFIXED	$ZIGLIB/std/c/openbsd.zig	/pub const TRYFIXED = 0/;"	constant
TRYLOCK_PI	$ZIGLIB/std/os/linux.zig	/pub const TRYLOCK_PI = 8/;"	constant
TR_END_TO_END	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const TR_END_TO_END = 1/;"	constant
TR_NOIND	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const TR_NOIND = 0/;"	constant
TR_NO_END_TO_END	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const TR_NO_END_TO_END = 2/;"	constant
TSC_ENABLE	$ZIGLIB/std/os/linux.zig	/pub const TSC_ENABLE = 1/;"	constant
TSC_SIGSEGV	$ZIGLIB/std/os/linux.zig	/pub const TSC_SIGSEGV = 2/;"	constant
TSEMACQUIRE	$ZIGLIB/std/os/plan9.zig	/TSEMACQUIRE = 52/;"	field
TSK3000	$ZIGLIB/std/elf.zig	/TSK3000 = 131/;"	field
TSTP	$ZIGLIB/std/os/linux.zig	/pub const TSTP = 20/;"	constant
TSWANA	$ZIGLIB/std/os/windows/lang.zig	/^pub const TSWANA = 0x32/;"	constant
TSWANA_BOTSWANA	$ZIGLIB/std/os/windows/sublang.zig	/^pub const TSWANA_BOTSWANA = 0x02/;"	constant
TSWANA_SOUTH_AFRICA	$ZIGLIB/std/os/windows/sublang.zig	/^pub const TSWANA_SOUTH_AFRICA = 0x01/;"	constant
TSYNC	$ZIGLIB/std/os/linux/seccomp.zig	/pub const TSYNC = 1 << 0/;"	constant
TSYNC_ESRCH	$ZIGLIB/std/os/linux/seccomp.zig	/pub const TSYNC_ESRCH = 1 << 4/;"	constant
TS_CLOCK	$ZIGLIB/std/c/freebsd.zig	/pub const TS_CLOCK = 0x1017/;"	constant
TS_INCOMPATIBLE_SESSIONS	$ZIGLIB/std/os/windows/ntstatus.zig	/TS_INCOMPATIBLE_SESSIONS = 0xC00A0039/;"	field
TTIN	$ZIGLIB/std/os/linux.zig	/pub const TTIN = 21/;"	constant
TTM_ACTIVATE	$ZIGLIB/std/os/windows/user32.zig	/^pub const TTM_ACTIVATE = 0x0401/;"	constant
TTM_ADDTOOLA	$ZIGLIB/std/os/windows/user32.zig	/^pub const TTM_ADDTOOLA = 0x0404/;"	constant
TTM_ADDTOOLW	$ZIGLIB/std/os/windows/user32.zig	/^pub const TTM_ADDTOOLW = 0x0432/;"	constant
TTM_ADJUSTRECT	$ZIGLIB/std/os/windows/user32.zig	/^pub const TTM_ADJUSTRECT = 0x041F/;"	constant
TTM_DELTOOLA	$ZIGLIB/std/os/windows/user32.zig	/^pub const TTM_DELTOOLA = 0x0405/;"	constant
TTM_DELTOOLW	$ZIGLIB/std/os/windows/user32.zig	/^pub const TTM_DELTOOLW = 0x0433/;"	constant
TTM_ENUMTOOLSA	$ZIGLIB/std/os/windows/user32.zig	/^pub const TTM_ENUMTOOLSA = 0x040E/;"	constant
TTM_ENUMTOOLSW	$ZIGLIB/std/os/windows/user32.zig	/^pub const TTM_ENUMTOOLSW = 0x043A/;"	constant
TTM_GETBUBBLESIZE	$ZIGLIB/std/os/windows/user32.zig	/^pub const TTM_GETBUBBLESIZE = 0x041E/;"	constant
TTM_GETCURRENTTOOLA	$ZIGLIB/std/os/windows/user32.zig	/^pub const TTM_GETCURRENTTOOLA = 0x040F/;"	constant
TTM_GETCURRENTTOOLW	$ZIGLIB/std/os/windows/user32.zig	/^pub const TTM_GETCURRENTTOOLW = 0x043B/;"	constant
TTM_GETDELAYTIME	$ZIGLIB/std/os/windows/user32.zig	/^pub const TTM_GETDELAYTIME = 0x0415/;"	constant
TTM_GETMARGIN	$ZIGLIB/std/os/windows/user32.zig	/^pub const TTM_GETMARGIN = 0x041B/;"	constant
TTM_GETMAXTIPWIDTH	$ZIGLIB/std/os/windows/user32.zig	/^pub const TTM_GETMAXTIPWIDTH = 0x0419/;"	constant
TTM_GETTEXTA	$ZIGLIB/std/os/windows/user32.zig	/^pub const TTM_GETTEXTA = 0x040B/;"	constant
TTM_GETTEXTW	$ZIGLIB/std/os/windows/user32.zig	/^pub const TTM_GETTEXTW = 0x0438/;"	constant
TTM_GETTIPBKCOLOR	$ZIGLIB/std/os/windows/user32.zig	/^pub const TTM_GETTIPBKCOLOR = 0x0416/;"	constant
TTM_GETTIPTEXTCOLOR	$ZIGLIB/std/os/windows/user32.zig	/^pub const TTM_GETTIPTEXTCOLOR = 0x0417/;"	constant
TTM_GETTOOLCOUNT	$ZIGLIB/std/os/windows/user32.zig	/^pub const TTM_GETTOOLCOUNT = 0x040D/;"	constant
TTM_GETTOOLINFOA	$ZIGLIB/std/os/windows/user32.zig	/^pub const TTM_GETTOOLINFOA = 0x0408/;"	constant
TTM_GETTOOLINFOW	$ZIGLIB/std/os/windows/user32.zig	/^pub const TTM_GETTOOLINFOW = 0x0435/;"	constant
TTM_HITTESTA	$ZIGLIB/std/os/windows/user32.zig	/^pub const TTM_HITTESTA = 0x040A/;"	constant
TTM_HITTESTW	$ZIGLIB/std/os/windows/user32.zig	/^pub const TTM_HITTESTW = 0x0437/;"	constant
TTM_NEWTOOLRECTA	$ZIGLIB/std/os/windows/user32.zig	/^pub const TTM_NEWTOOLRECTA = 0x0406/;"	constant
TTM_NEWTOOLRECTW	$ZIGLIB/std/os/windows/user32.zig	/^pub const TTM_NEWTOOLRECTW = 0x0434/;"	constant
TTM_POP	$ZIGLIB/std/os/windows/user32.zig	/^pub const TTM_POP = 0x041C/;"	constant
TTM_RELAYEVENT	$ZIGLIB/std/os/windows/user32.zig	/^pub const TTM_RELAYEVENT = 0x0407/;"	constant
TTM_SETDELAYTIME	$ZIGLIB/std/os/windows/user32.zig	/^pub const TTM_SETDELAYTIME = 0x0403/;"	constant
TTM_SETMARGIN	$ZIGLIB/std/os/windows/user32.zig	/^pub const TTM_SETMARGIN = 0x041A/;"	constant
TTM_SETMAXTIPWIDTH	$ZIGLIB/std/os/windows/user32.zig	/^pub const TTM_SETMAXTIPWIDTH = 0x0418/;"	constant
TTM_SETTIPBKCOLOR	$ZIGLIB/std/os/windows/user32.zig	/^pub const TTM_SETTIPBKCOLOR = 0x0413/;"	constant
TTM_SETTIPTEXTCOLOR	$ZIGLIB/std/os/windows/user32.zig	/^pub const TTM_SETTIPTEXTCOLOR = 0x0414/;"	constant
TTM_SETTITLEA	$ZIGLIB/std/os/windows/user32.zig	/^pub const TTM_SETTITLEA = 0x0420/;"	constant
TTM_SETTITLEW	$ZIGLIB/std/os/windows/user32.zig	/^pub const TTM_SETTITLEW = 0x0421/;"	constant
TTM_SETTOOLINFOA	$ZIGLIB/std/os/windows/user32.zig	/^pub const TTM_SETTOOLINFOA = 0x0409/;"	constant
TTM_SETTOOLINFOW	$ZIGLIB/std/os/windows/user32.zig	/^pub const TTM_SETTOOLINFOW = 0x0436/;"	constant
TTM_TRACKACTIVATE	$ZIGLIB/std/os/windows/user32.zig	/^pub const TTM_TRACKACTIVATE = 0x0411/;"	constant
TTM_TRACKPOSITION	$ZIGLIB/std/os/windows/user32.zig	/^pub const TTM_TRACKPOSITION = 0x0412/;"	constant
TTM_UPDATE	$ZIGLIB/std/os/windows/user32.zig	/^pub const TTM_UPDATE = 0x041D/;"	constant
TTM_UPDATETIPTEXTA	$ZIGLIB/std/os/windows/user32.zig	/^pub const TTM_UPDATETIPTEXTA = 0x040C/;"	constant
TTM_UPDATETIPTEXTW	$ZIGLIB/std/os/windows/user32.zig	/^pub const TTM_UPDATETIPTEXTW = 0x0439/;"	constant
TTM_WINDOWFROMPOINT	$ZIGLIB/std/os/windows/user32.zig	/^pub const TTM_WINDOWFROMPOINT = 0x0410/;"	constant
TTOU	$ZIGLIB/std/os/linux.zig	/pub const TTOU = 22/;"	constant
TTYCOUNT	$ZIGLIB/std/c/openbsd.zig	/pub const TTYCOUNT = 57/;"	constant
TTY_INIT	$ZIGLIB/std/c/wasi.zig	/pub const TTY_INIT = (0)/;"	constant
TT_CBR	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const TT_CBR = 4/;"	constant
TT_NOIND	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const TT_NOIND = 0/;"	constant
TT_VBR	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const TT_VBR = 8/;"	constant
TTag	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/const TTag = type_info.tag_type.?/;"	constant
TURKISH	$ZIGLIB/std/os/windows/lang.zig	/^pub const TURKISH = 0x1f/;"	constant
TURKISH_TURKEY	$ZIGLIB/std/os/windows/sublang.zig	/^pub const TURKISH_TURKEY = 0x01/;"	constant
TURKMEN	$ZIGLIB/std/os/windows/lang.zig	/^pub const TURKMEN = 0x42/;"	constant
TURKMEN_TURKMENISTAN	$ZIGLIB/std/os/windows/sublang.zig	/^pub const TURKMEN_TURKMENISTAN = 0x01/;"	constant
TVOS	$ZIGLIB/std/macho.zig	/TVOS = 0x3/;"	field
TVOSSIMULATOR	$ZIGLIB/std/macho.zig	/TVOSSIMULATOR = 0x8/;"	field
TWOLEVEL_HINTS	$ZIGLIB/std/macho.zig	/TWOLEVEL_HINTS = 0x16/;"	field
TXF_ATTRIBUTE_CORRUPT	$ZIGLIB/std/os/windows/ntstatus.zig	/TXF_ATTRIBUTE_CORRUPT = 0xC019003D/;"	field
TXF_DIR_NOT_EMPTY	$ZIGLIB/std/os/windows/ntstatus.zig	/TXF_DIR_NOT_EMPTY = 0xC0190039/;"	field
TXF_METADATA_ALREADY_PRESENT	$ZIGLIB/std/os/windows/ntstatus.zig	/TXF_METADATA_ALREADY_PRESENT = 0x80190041/;"	field
TXQLEN	$ZIGLIB/std/os/linux.zig	/TXQLEN/;"	field
TXTBSY	$ZIGLIB/std/os/wasi.zig	/TXTBSY = 74/;"	field
TXTIME	$ZIGLIB/std/os/linux.zig	/pub const TXTIME = 63/;"	constant
TX_DELAY	$ZIGLIB/std/os/linux.zig	/pub const TX_DELAY = 37/;"	constant
TX_RING	$ZIGLIB/std/os/linux.zig	/pub const TX_RING = 3/;"	constant
TYPE	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const TYPE = 4104/;"	constant
TYPE_DEFINITION	$ZIGLIB/std/coff.zig	/TYPE_DEFINITION = 13/;"	field
TYPE_NO_PAD	$ZIGLIB/std/coff.zig	/TYPE_NO_PAD: u1 = 0/;"	field
TYPE_SAVE	$ZIGLIB/std/os/linux.zig	/pub const TYPE_SAVE = 1 << 16/;"	constant
Table	$ZIGLIB/std/wasm.zig	/^pub const Table = struct {$/;"	struct
TableEntry	$ZIGLIB/std/compress/deflate/deflate_fast.zig	/^const TableEntry = struct {$/;"	struct
TableHeader	$ZIGLIB/std/os/uefi/tables/table_header.zig	/pub const TableHeader = extern struct {$/;"	struct
Tag2	$ZIGLIB/std/meta.zig	/const Tag2 = enum { b, c, a }/;"	enum
Tag3	$ZIGLIB/std/meta.zig	/const Tag3 = enum(u8) { a, b, c = 7 }/;"	enum
TagPayload	$ZIGLIB/std/meta.zig	/^pub fn TagPayload(comptime U: type, comptime tag: Tag(U)) type {$/;"	function
TagPayloadByName	$ZIGLIB/std/meta.zig	/^pub fn TagPayloadByName(comptime U: type, comptime tag_name: []const u8) type {$/;"	function
TagPayloadType	$ZIGLIB/std/meta.zig	/^const TagPayloadType = TagPayload/;"	constant
TagType	$ZIGLIB/std/meta.zig	/^pub const TagType = @compileError("deprecated; use Tag")/;"	constant
TagWord	$ZIGLIB/std/os/windows.zig	/TagWord: DWORD/;"	field
Tagged	$ZIGLIB/std/meta.zig	/const Tagged = union(enum) { a: u8, b: void, c: f32 }/;"	union
Tagged2	$ZIGLIB/std/meta.zig	/const Tagged2 = union(Tag2) { a: u8, b: void, c: f32 }/;"	union
Tagged3	$ZIGLIB/std/meta.zig	/const Tagged3 = union(Tag3) { a: u8, b: void, c: f32 }/;"	union
TaggedUnionEnum	$ZIGLIB/std/meta.zig	/const TaggedUnionEnum = enum { int, flt }/;"	enum
TaggedUnionType	$ZIGLIB/std/meta.zig	/const TaggedUnionType = union(TaggedUnionEnum) {$/;"	union
TaggedVersionRange	$ZIGLIB/std/target.zig	/pub const TaggedVersionRange = union(enum) {$/;"	union
Tail	$ZIGLIB/std/os/windows/ws2_32.zig	/Tail: *anyopaque/;"	field
TailLength	$ZIGLIB/std/os/windows/ws2_32.zig	/TailLength: u32/;"	field
TailQueue	$ZIGLIB/std/linked_list.zig	/^pub fn TailQueue(comptime T: type) type {$/;"	function
Target	$ZIGLIB/std/target.zig	/^pub const Target = struct {$/;"	struct
TaskFdQueryAttr	$ZIGLIB/std/os/linux/bpf.zig	/^pub const TaskFdQueryAttr = extern struct {$/;"	struct
TcpHdr	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^const TcpHdr = @compileError("TODO missing os bits: TcpHdr")/;"	constant
TcpRepairOption	$ZIGLIB/std/os/linux.zig	/^pub const TcpRepairOption = enum {$/;"	enum
TebBaseAddress	$ZIGLIB/std/os/windows.zig	/TebBaseAddress: PVOID/;"	field
TelemetryCoverageHeader	$ZIGLIB/std/os/windows.zig	/TelemetryCoverageHeader: PVOID/;"	field
TelemetryCoverageRound	$ZIGLIB/std/os/windows.zig	/TelemetryCoverageRound: ULONG/;"	field
Term	$ZIGLIB/std/child_process.zig	/pub const Term = union(enum) {$/;"	union
TerminateProcess	$ZIGLIB/std/os/windows.zig	/^pub fn TerminateProcess(hProcess: HANDLE, uExitCode: UINT) TerminateProcessError!void {$/;"	function
TerminateProcessError	$ZIGLIB/std/os/windows.zig	/^pub const TerminateProcessError = error{Unexpected}/;"	constant
TermiosGetError	$ZIGLIB/std/os.zig	/^pub const TermiosGetError = error{NotATerminal} || UnexpectedError/;"	constant
TermiosSetError	$ZIGLIB/std/os.zig	/^pub const TermiosSetError = TermiosGetError || error{ProcessOrphaned}/;"	constant
Tessellation	$ZIGLIB/std/target/spirv.zig	/Tessellation/;"	field
TessellationPointSize	$ZIGLIB/std/target/spirv.zig	/TessellationPointSize/;"	field
Test	$ZIGLIB/std/zig/c_translation.zig	/const Test = struct {$/;"	struct
TestContext	$ZIGLIB/std/Thread/Semaphore.zig	/const TestContext = struct {$/;"	struct
TestEnum	$ZIGLIB/std/meta/trait.zig	/const TestEnum = enum {$/;"	enum
TestExStruct	$ZIGLIB/std/meta/trait.zig	/const TestExStruct = extern struct {}/;"	struct
TestFn	$ZIGLIB/std/builtin.zig	/^pub const TestFn = struct {$/;"	struct
TestNode	$ZIGLIB/std/treap.zig	/^const TestNode = TestTreap.Node/;"	constant
TestOptions	$ZIGLIB/std/Build.zig	/^pub const TestOptions = struct {$/;"	struct
TestPStruct	$ZIGLIB/std/meta/trait.zig	/const TestPStruct = packed struct {}/;"	struct
TestRetInstruction	$ZIGLIB/std/os/windows.zig	/TestRetInstruction: ULONGLONG/;"	field
TestRunAttr	$ZIGLIB/std/os/linux/bpf.zig	/^pub const TestRunAttr = extern struct {$/;"	struct
TestStruct	$ZIGLIB/std/testing.zig	/const TestStruct = struct { s: []const u8 }/;"	struct
TestStruct1	$ZIGLIB/std/meta/trait.zig	/const TestStruct1 = struct {}/;"	struct
TestStruct2	$ZIGLIB/std/meta/trait.zig	/const TestStruct2 = struct {$/;"	struct
TestStruct3	$ZIGLIB/std/meta/trait.zig	/const TestStruct3 = struct {$/;"	struct
TestStruct4	$ZIGLIB/std/meta/trait.zig	/const TestStruct4 = struct { a: []const u8 }/;"	struct
TestStruct5	$ZIGLIB/std/meta/trait.zig	/const TestStruct5 = struct { a: TestStruct4 }/;"	struct
TestTreap	$ZIGLIB/std/treap.zig	/^const TestTreap = Treap(u64, std.math.order)/;"	constant
TestType	$ZIGLIB/std/compress/deflate/huffman_bit_writer.zig	/^const TestType = enum {$/;"	enum
TestUnion	$ZIGLIB/std/meta/trait.zig	/const TestUnion = union {$/;"	union
TestUnion1	$ZIGLIB/std/meta/trait.zig	/const TestUnion1 = packed union {$/;"	union
TestUnion2	$ZIGLIB/std/meta/trait.zig	/const TestUnion2 = extern union {$/;"	union
TestUnion3	$ZIGLIB/std/meta/trait.zig	/const TestUnion3 = union {$/;"	union
TestUnion4	$ZIGLIB/std/meta/trait.zig	/const TestUnion4 = union(enum) {$/;"	union
TestVector	$ZIGLIB/std/crypto/scrypt.zig	/const TestVector = struct {$/;"	struct
TftpError	$ZIGLIB/std/os/uefi/status.zig	/TftpError = high_bit | 23/;"	field
Thiscall	$ZIGLIB/std/builtin.zig	/Thiscall/;"	field
Thread	$ZIGLIB/std/Thread.zig	/^const Thread = @This()/;"	constant
ThreadActualBasePriority	$ZIGLIB/std/os/windows/ntdll.zig	/ThreadActualBasePriority/;"	field
ThreadActualGroupAffinity	$ZIGLIB/std/os/windows/ntdll.zig	/ThreadActualGroupAffinity/;"	field
ThreadAffinityMask	$ZIGLIB/std/os/windows/ntdll.zig	/ThreadAffinityMask/;"	field
ThreadAmILastThread	$ZIGLIB/std/os/windows/ntdll.zig	/ThreadAmILastThread/;"	field
ThreadBasePriority	$ZIGLIB/std/os/windows/ntdll.zig	/ThreadBasePriority/;"	field
ThreadBasicInformation	$ZIGLIB/std/os/windows/ntdll.zig	/ThreadBasicInformation/;"	field
ThreadBreakOnTermination	$ZIGLIB/std/os/windows/ntdll.zig	/ThreadBreakOnTermination/;"	field
ThreadCSwitchMon	$ZIGLIB/std/os/windows/ntdll.zig	/ThreadCSwitchMon/;"	field
ThreadCSwitchPmu	$ZIGLIB/std/os/windows/ntdll.zig	/ThreadCSwitchPmu/;"	field
ThreadCompletion	$ZIGLIB/std/Thread.zig	/const ThreadCompletion = struct {$/;"	struct
ThreadContainerId	$ZIGLIB/std/os/windows/ntdll.zig	/ThreadContainerId/;"	field
ThreadCount	$ZIGLIB/std/os/windows.zig	/ThreadCount: DWORD/;"	field
ThreadCounterProfiling	$ZIGLIB/std/os/windows/ntdll.zig	/ThreadCounterProfiling/;"	field
ThreadCpuAccountingInformation	$ZIGLIB/std/os/windows/ntdll.zig	/ThreadCpuAccountingInformation/;"	field
ThreadCycleTime	$ZIGLIB/std/os/windows/ntdll.zig	/ThreadCycleTime/;"	field
ThreadDescriptorTableEntry	$ZIGLIB/std/os/windows/ntdll.zig	/ThreadDescriptorTableEntry/;"	field
ThreadEnableAlignmentFaultFixup	$ZIGLIB/std/os/windows/ntdll.zig	/ThreadEnableAlignmentFaultFixup/;"	field
ThreadEventPair_Reusable	$ZIGLIB/std/os/windows/ntdll.zig	/ThreadEventPair_Reusable/;"	field
ThreadGroupInformation	$ZIGLIB/std/os/windows/ntdll.zig	/ThreadGroupInformation/;"	field
ThreadHandle	$ZIGLIB/std/Thread.zig	/pub const ThreadHandle = windows.HANDLE/;"	constant
ThreadHeterogeneousCpuPolicy	$ZIGLIB/std/os/windows/ntdll.zig	/ThreadHeterogeneousCpuPolicy/;"	field
ThreadHideFromDebugger	$ZIGLIB/std/os/windows/ntdll.zig	/ThreadHideFromDebugger/;"	field
ThreadIdealProcessor	$ZIGLIB/std/os/windows/ntdll.zig	/ThreadIdealProcessor/;"	field
ThreadIdealProcessorEx	$ZIGLIB/std/os/windows/ntdll.zig	/ThreadIdealProcessorEx/;"	field
ThreadImpersonationToken	$ZIGLIB/std/os/windows/ntdll.zig	/ThreadImpersonationToken/;"	field
ThreadIoPriority	$ZIGLIB/std/os/windows/ntdll.zig	/ThreadIoPriority/;"	field
ThreadIsIoPending	$ZIGLIB/std/os/windows/ntdll.zig	/ThreadIsIoPending/;"	field
ThreadIsTerminated	$ZIGLIB/std/os/windows/ntdll.zig	/ThreadIsTerminated/;"	field
ThreadLastSystemCall	$ZIGLIB/std/os/windows/ntdll.zig	/ThreadLastSystemCall/;"	field
ThreadList	$ZIGLIB/std/os/darwin.zig	/const ThreadList = struct {$/;"	struct
ThreadNameInformation	$ZIGLIB/std/os/windows/ntdll.zig	/ThreadNameInformation/;"	field
ThreadPagePriority	$ZIGLIB/std/os/windows/ntdll.zig	/ThreadPagePriority/;"	field
ThreadPerformanceCount	$ZIGLIB/std/os/windows/ntdll.zig	/ThreadPerformanceCount/;"	field
ThreadPriority	$ZIGLIB/std/os/windows/ntdll.zig	/ThreadPriority/;"	field
ThreadPriorityBoost	$ZIGLIB/std/os/windows/ntdll.zig	/ThreadPriorityBoost/;"	field
ThreadQuerySetWin32StartAddress	$ZIGLIB/std/os/windows/ntdll.zig	/ThreadQuerySetWin32StartAddress/;"	field
ThreadSafeFixedBufferAllocator	$ZIGLIB/std/heap.zig	/^pub const ThreadSafeFixedBufferAllocator = @compileError("ThreadSafeFixedBufferAllocator has been replaced with `threadSafeAllocator` on FixedBufferAllocator")/;"	constant
ThreadSelectedCpuSets	$ZIGLIB/std/os/windows/ntdll.zig	/ThreadSelectedCpuSets/;"	field
ThreadSetTlsArrayAddress	$ZIGLIB/std/os/windows/ntdll.zig	/ThreadSetTlsArrayAddress/;"	field
ThreadSuspendCount	$ZIGLIB/std/os/windows/ntdll.zig	/ThreadSuspendCount/;"	field
ThreadSwitchLegacyState	$ZIGLIB/std/os/windows/ntdll.zig	/ThreadSwitchLegacyState/;"	field
ThreadSystemThreadInformation	$ZIGLIB/std/os/windows/ntdll.zig	/ThreadSystemThreadInformation/;"	field
ThreadTebInformation	$ZIGLIB/std/os/windows/ntdll.zig	/ThreadTebInformation/;"	field
ThreadTimes	$ZIGLIB/std/os/windows/ntdll.zig	/ThreadTimes/;"	field
ThreadUmsInformation	$ZIGLIB/std/os/windows/ntdll.zig	/ThreadUmsInformation/;"	field
ThreadWow64Context	$ZIGLIB/std/os/windows/ntdll.zig	/ThreadWow64Context/;"	field
ThreadZeroTlsCell	$ZIGLIB/std/os/windows/ntdll.zig	/ThreadZeroTlsCell/;"	field
Three	$ZIGLIB/std/fmt.zig	/Three/;"	field
Thumb	$ZIGLIB/std/coff.zig	/Thumb = 0x1c2/;"	field
TickCount	$ZIGLIB/std/os/windows.zig	/TickCount: KSYSTEM_TIME/;"	field
TickCountLowDeprecated	$ZIGLIB/std/os/windows.zig	/TickCountLowDeprecated: ULONG/;"	field
TickCountMultiplier	$ZIGLIB/std/os/windows.zig	/TickCountMultiplier: ULONG/;"	field
TickCountPad	$ZIGLIB/std/os/windows.zig	/TickCountPad: [1]ULONG/;"	field
TickCountQuad	$ZIGLIB/std/os/windows.zig	/TickCountQuad: ULONG64/;"	field
TickNode	$ZIGLIB/std/event/loop.zig	/TickNode: Loop.NextTickNode/;"	field
Tilde	$ZIGLIB/std/c/tokenizer.zig	/Tilde/;"	field
Time	$ZIGLIB/std/os/uefi.zig	/^pub const Time = extern struct {$/;"	struct
TimeCapabilities	$ZIGLIB/std/os/uefi.zig	/^pub const TimeCapabilities = extern struct {$/;"	struct
TimeDateStamp	$ZIGLIB/std/os/windows.zig	/TimeDateStamp: ULONG/;"	field
TimeSlip	$ZIGLIB/std/os/windows.zig	/TimeSlip: ULONG/;"	field
TimeStamp	$ZIGLIB/std/os/windows.zig	/TimeStamp: ULONG/;"	field
TimeUpdateLock	$ZIGLIB/std/os/windows.zig	/TimeUpdateLock: ULONGLONG/;"	field
TimeZoneBias	$ZIGLIB/std/os/windows.zig	/TimeZoneBias: KSYSTEM_TIME/;"	field
TimeZoneBiasEffectiveEnd	$ZIGLIB/std/os/windows.zig	/TimeZoneBiasEffectiveEnd: LARGE_INTEGER/;"	field
TimeZoneBiasEffectiveStart	$ZIGLIB/std/os/windows.zig	/TimeZoneBiasEffectiveStart: LARGE_INTEGER/;"	field
TimeZoneBiasStamp	$ZIGLIB/std/os/windows.zig	/TimeZoneBiasStamp: LONG/;"	field
TimeZoneId	$ZIGLIB/std/os/windows.zig	/TimeZoneId: ULONG/;"	field
Timeout	$ZIGLIB/std/os/uefi/status.zig	/Timeout = high_bit | 18/;"	field
Timer	$ZIGLIB/std/time.zig	/^pub const Timer = struct {$/;"	struct
TimerCancel	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/TimerCancel/;"	field
TimerDelay	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/^pub const TimerDelay = enum(u32) {$/;"	enum
TimerFdCreateError	$ZIGLIB/std/os.zig	/^pub const TimerFdCreateError = error{$/;"	constant
TimerFdGetError	$ZIGLIB/std/os.zig	/^pub const TimerFdGetError = error{InvalidHandle} || UnexpectedError/;"	constant
TimerFdSetError	$ZIGLIB/std/os.zig	/^pub const TimerFdSetError = TimerFdGetError || error{Canceled}/;"	constant
TimerPeriodic	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/TimerPeriodic/;"	field
TimerRelative	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/TimerRelative/;"	field
Timetype	$ZIGLIB/std/tz.zig	/^pub const Timetype = struct {$/;"	struct
TlsBitmap	$ZIGLIB/std/os/windows.zig	/TlsBitmap: *RTL_BITMAP/;"	field
TlsBitmapBits	$ZIGLIB/std/os/windows.zig	/TlsBitmapBits: [2]ULONG/;"	field
TlsExpansionBitmap	$ZIGLIB/std/os/windows.zig	/TlsExpansionBitmap: *RTL_BITMAP/;"	field
TlsExpansionBitmapBits	$ZIGLIB/std/os/windows.zig	/TlsExpansionBitmapBits: [32]ULONG/;"	field
TlsExpansionCounter	$ZIGLIB/std/os/windows.zig	/TlsExpansionCounter: ULONG/;"	field
TlsExpansionSlots	$ZIGLIB/std/os/windows.zig	/TlsExpansionSlots: PVOID/;"	field
TlsSlots	$ZIGLIB/std/os/windows.zig	/TlsSlots: [64]PVOID/;"	field
TmpDir	$ZIGLIB/std/testing.zig	/^pub const TmpDir = struct {$/;"	struct
TmpIterableDir	$ZIGLIB/std/testing.zig	/^pub const TmpIterableDir = struct {$/;"	struct
ToUnsigned	$ZIGLIB/std/zig/c_translation.zig	/^fn ToUnsigned(comptime T: type) type {$/;"	function
Toggle	$ZIGLIB/std/atomic/Atomic.zig	/Toggle/;"	field
ToggleCollect	$ZIGLIB/std/valgrind/callgrind.zig	/ToggleCollect/;"	field
Token	$ZIGLIB/std/zig/tokenizer.zig	/^pub const Token = struct {$/;"	struct
TokenBucketSize	$ZIGLIB/std/os/windows/ws2_32.zig	/TokenBucketSize: u32/;"	field
TokenIndex	$ZIGLIB/std/zig/Ast.zig	/^pub const TokenIndex = u32/;"	constant
TokenIterator	$ZIGLIB/std/mem.zig	/^pub fn TokenIterator(comptime T: type) type {$/;"	function
TokenList	$ZIGLIB/std/zig/Ast.zig	/^pub const TokenList = std.MultiArrayList(struct {$/;"	constant
TokenRate	$ZIGLIB/std/os/windows/ws2_32.zig	/TokenRate: u32/;"	field
TokenStream	$ZIGLIB/std/json.zig	/^pub const TokenStream = struct {$/;"	struct
Tokenizer	$ZIGLIB/std/zig/tokenizer.zig	/^pub const Tokenizer = struct {$/;"	struct
ToolBase	$ZIGLIB/std/valgrind.zig	/^pub fn ToolBase(base: [2]u8) u32 {$/;"	function
TopLevelBegin	$ZIGLIB/std/json.zig	/TopLevelBegin/;"	field
TopLevelEnd	$ZIGLIB/std/json.zig	/TopLevelEnd/;"	field
TopLevelStep	$ZIGLIB/std/Build.zig	/^const TopLevelStep = struct {$/;"	struct
TotalInUse	$ZIGLIB/std/os/windows.zig	/TotalInUse: SIZE_T/;"	field
TotalIndexedTokens	$ZIGLIB/std/compress/deflate/huffman_bit_writer.zig	/const TotalIndexedTokens = struct {$/;"	struct
TotalSize	$ZIGLIB/std/os/windows.zig	/TotalSize: SIZE_T/;"	field
TppWorkerpList	$ZIGLIB/std/os/windows.zig	/TppWorkerpList: LIST_ENTRY/;"	field
TppWorkerpListLock	$ZIGLIB/std/os/windows.zig	/TppWorkerpListLock: ULONG/;"	field
Trace	$ZIGLIB/std/debug.zig	/^pub const Trace = ConfigurableTrace(2, 4, builtin.mode == .Debug)/;"	constant
TraceKind	$ZIGLIB/std/heap/general_purpose_allocator.zig	/^const TraceKind = enum {$/;"	enum
TracingFlags	$ZIGLIB/std/os/windows.zig	/TracingFlags: ULONG/;"	field
TrailerFlags	$ZIGLIB/std/meta/trailer_flags.zig	/^pub fn TrailerFlags(comptime Fields: type) type {$/;"	function
TraitFn	$ZIGLIB/std/meta/trait.zig	/^pub const TraitFn = fn (type) bool/;"	constant
TransferEncoding	$ZIGLIB/std/http.zig	/^pub const TransferEncoding = enum {$/;"	enum
TransferType	$ZIGLIB/std/os/windows.zig	/^pub const TransferType = enum(u2) {$/;"	enum
TransformFeedback	$ZIGLIB/std/target/spirv.zig	/TransformFeedback/;"	field
Transition	$ZIGLIB/std/tz.zig	/^pub const Transition = struct {$/;"	struct
TransitiveDeps	$ZIGLIB/std/Build/CompileStep.zig	/^const TransitiveDeps = struct {$/;"	struct
TranslateCStep	$ZIGLIB/std/Build/TranslateCStep.zig	/^const TranslateCStep = @This()/;"	constant
Treap	$ZIGLIB/std/treap.zig	/^pub fn Treap(comptime Key: type, comptime compareFn: anytype) type {$/;"	function
True	$ZIGLIB/std/json.zig	/True/;"	field
TrueLiteral1	$ZIGLIB/std/json.zig	/TrueLiteral1/;"	field
TrueLiteral2	$ZIGLIB/std/json.zig	/TrueLiteral2/;"	field
TrueLiteral3	$ZIGLIB/std/json.zig	/TrueLiteral3/;"	field
TruncateError	$ZIGLIB/std/os.zig	/^pub const TruncateError = error{$/;"	constant
TruncatedTest	$ZIGLIB/std/compress/deflate/decompressor.zig	/const TruncatedTest = struct {$/;"	struct
Tuple	$ZIGLIB/std/meta.zig	/^pub fn Tuple(comptime types: []const type) type {$/;"	function
TupleTester	$ZIGLIB/std/meta.zig	/^const TupleTester = struct {$/;"	struct
TwoTimesTrueMin	$ZIGLIB/std/math/ldexp.zig	/const TwoTimesTrueMin = @bitCast(T, @as(Z, 2))/;"	constant
TwosCompIntLimit	$ZIGLIB/std/math/big/int.zig	/^pub const TwosCompIntLimit = enum {$/;"	enum
TxData	$ZIGLIB/std/os/uefi/protocols/udp6_protocol.zig	/TxData: *Udp6TransmitData/;"	field
Type	$ZIGLIB/std/wasm.zig	/^pub const Type = struct {$/;"	struct
TypeId	$ZIGLIB/std/builtin.zig	/^pub const TypeId = std.meta.Tag(Type)/;"	constant
TypeIndex	$ZIGLIB/std/pdb.zig	/^pub const TypeIndex = u32/;"	constant
TypeInfo	$ZIGLIB/std/builtin.zig	/^pub const TypeInfo = @compileError("deprecated; use Type")/;"	constant
TypeMDTokenMap	$ZIGLIB/std/pdb.zig	/TypeMDTokenMap = 0xfb/;"	field
TypeServerSize	$ZIGLIB/std/pdb.zig	/TypeServerSize: i32/;"	field
U128	$ZIGLIB/std/fmt/parse_float/convert_eisel_lemire.zig	/^const U128 = struct {$/;"	struct
UCHAR	$ZIGLIB/std/os/windows.zig	/^pub const UCHAR = u8/;"	constant
UCLEAN	$ZIGLIB/std/os/linux/errno/sparc.zig	/UCLEAN = 117/;"	field
UCRED	$ZIGLIB/std/c/solaris.zig	/pub const UCRED = 0x1012/;"	constant
UDM_GETACCEL	$ZIGLIB/std/os/windows/user32.zig	/^pub const UDM_GETACCEL = 0x046C/;"	constant
UDM_GETBASE	$ZIGLIB/std/os/windows/user32.zig	/^pub const UDM_GETBASE = 0x046E/;"	constant
UDM_GETBUDDY	$ZIGLIB/std/os/windows/user32.zig	/^pub const UDM_GETBUDDY = 0x046A/;"	constant
UDM_GETPOS	$ZIGLIB/std/os/windows/user32.zig	/^pub const UDM_GETPOS = 0x0468/;"	constant
UDM_GETPOS32	$ZIGLIB/std/os/windows/user32.zig	/^pub const UDM_GETPOS32 = 0x0472/;"	constant
UDM_GETRANGE	$ZIGLIB/std/os/windows/user32.zig	/^pub const UDM_GETRANGE = 0x0466/;"	constant
UDM_GETRANGE32	$ZIGLIB/std/os/windows/user32.zig	/^pub const UDM_GETRANGE32 = 0x0470/;"	constant
UDM_SETACCEL	$ZIGLIB/std/os/windows/user32.zig	/^pub const UDM_SETACCEL = 0x046B/;"	constant
UDM_SETBASE	$ZIGLIB/std/os/windows/user32.zig	/^pub const UDM_SETBASE = 0x046D/;"	constant
UDM_SETBUDDY	$ZIGLIB/std/os/windows/user32.zig	/^pub const UDM_SETBUDDY = 0x0469/;"	constant
UDM_SETPOS	$ZIGLIB/std/os/windows/user32.zig	/^pub const UDM_SETPOS = 0x0467/;"	constant
UDM_SETPOS32	$ZIGLIB/std/os/windows/user32.zig	/^pub const UDM_SETPOS32 = 0x0471/;"	constant
UDM_SETRANGE	$ZIGLIB/std/os/windows/user32.zig	/^pub const UDM_SETRANGE = 0x0465/;"	constant
UDM_SETRANGE32	$ZIGLIB/std/os/windows/user32.zig	/^pub const UDM_SETRANGE32 = 0x046F/;"	constant
UDPLITE	$ZIGLIB/std/os/linux.zig	/pub const UDPLITE = 136/;"	constant
UDP_CHECKSUM_COVERAGE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const UDP_CHECKSUM_COVERAGE = 20/;"	constant
UDP_COALESCED_INFO	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const UDP_COALESCED_INFO = 3/;"	constant
UDP_NOCHECKSUM	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const UDP_NOCHECKSUM = 1/;"	constant
UDP_RECV_MAX_COALESCED_SIZE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const UDP_RECV_MAX_COALESCED_SIZE = 3/;"	constant
UDP_SEND_MSG_SIZE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const UDP_SEND_MSG_SIZE = 2/;"	constant
UESP	$ZIGLIB/std/os/linux/x86.zig	/pub const UESP = 17/;"	constant
UIGHUR	$ZIGLIB/std/os/windows/lang.zig	/^pub const UIGHUR = 0x80/;"	constant
UIGHUR_PRC	$ZIGLIB/std/os/windows/sublang.zig	/^pub const UIGHUR_PRC = 0x01/;"	constant
UINT	$ZIGLIB/std/os/windows.zig	/^pub const UINT = c_uint/;"	constant
UI_CUSTOM_DEFAULT	$ZIGLIB/std/os/windows/sublang.zig	/^pub const UI_CUSTOM_DEFAULT = 0x05/;"	constant
UInt	$ZIGLIB/std/os.zig	/const UInt = std.meta.Int(.unsigned, @bitSizeOf(@TypeOf(ts.tv_nsec)))/;"	constant
UKRAINIAN	$ZIGLIB/std/os/windows/lang.zig	/^pub const UKRAINIAN = 0x22/;"	constant
UKRAINIAN_UKRAINE	$ZIGLIB/std/os/windows/sublang.zig	/^pub const UKRAINIAN_UKRAINE = 0x01/;"	constant
ULARGE_INTEGER	$ZIGLIB/std/os/windows.zig	/^pub const ULARGE_INTEGER = u64/;"	constant
ULF_NO_ERRNO	$ZIGLIB/std/c/darwin.zig	/^pub const ULF_NO_ERRNO = 0x1000000/;"	constant
ULF_WAIT_ADAPTIVE_SPIN	$ZIGLIB/std/c/darwin.zig	/^pub const ULF_WAIT_ADAPTIVE_SPIN = 0x40000/;"	constant
ULF_WAIT_CANCEL_POINT	$ZIGLIB/std/c/darwin.zig	/^pub const ULF_WAIT_CANCEL_POINT = 0x20000/;"	constant
ULF_WAIT_WORKQ_DATA_CONTENTION	$ZIGLIB/std/c/darwin.zig	/^pub const ULF_WAIT_WORKQ_DATA_CONTENTION = 0x10000/;"	constant
ULF_WAKE_ALL	$ZIGLIB/std/c/darwin.zig	/^pub const ULF_WAKE_ALL = 0x100/;"	constant
ULF_WAKE_THREAD	$ZIGLIB/std/c/darwin.zig	/^pub const ULF_WAKE_THREAD = 0x200/;"	constant
ULL_SUFFIX	$ZIGLIB/std/zig/c_translation.zig	/pub fn ULL_SUFFIX(comptime n: comptime_int) @TypeOf(promoteIntLiteral(c_ulonglong, n, .decimal)) {$/;"	function
ULOCK	$ZIGLIB/std/c/solaris.zig	/pub const ULOCK = 0/;"	constant
ULONG	$ZIGLIB/std/os/windows.zig	/^pub const ULONG = u32/;"	constant
ULONG64	$ZIGLIB/std/os/windows.zig	/^pub const ULONG64 = u64/;"	constant
ULONGLONG	$ZIGLIB/std/os/windows.zig	/^pub const ULONGLONG = u64/;"	constant
ULONG_PTR	$ZIGLIB/std/os/windows.zig	/^pub const ULONG_PTR = usize/;"	constant
UL_COMPARE_AND_WAIT	$ZIGLIB/std/c/darwin.zig	/^pub const UL_COMPARE_AND_WAIT = 1/;"	constant
UL_COMPARE_AND_WAIT64	$ZIGLIB/std/c/darwin.zig	/^pub const UL_COMPARE_AND_WAIT64 = 5/;"	constant
UL_COMPARE_AND_WAIT64_SHARED	$ZIGLIB/std/c/darwin.zig	/^pub const UL_COMPARE_AND_WAIT64_SHARED = 6/;"	constant
UL_COMPARE_AND_WAIT_SHARED	$ZIGLIB/std/c/darwin.zig	/^pub const UL_COMPARE_AND_WAIT_SHARED = 3/;"	constant
UL_HANDOFFLOCK	$ZIGLIB/std/c/darwin.zig	/^pub const UL_HANDOFFLOCK = UL_UNFAIR_LOCK/;"	constant
UL_OSSPINLOCK	$ZIGLIB/std/c/darwin.zig	/^pub const UL_OSSPINLOCK = UL_COMPARE_AND_WAIT/;"	constant
UL_SUFFIX	$ZIGLIB/std/zig/c_translation.zig	/pub fn UL_SUFFIX(comptime n: comptime_int) @TypeOf(promoteIntLiteral(c_ulong, n, .decimal)) {$/;"	function
UL_UNFAIR_LOCK	$ZIGLIB/std/c/darwin.zig	/^pub const UL_UNFAIR_LOCK = 2/;"	constant
UL_UNFAIR_LOCK64_SHARED	$ZIGLIB/std/c/darwin.zig	/^pub const UL_UNFAIR_LOCK64_SHARED = 4/;"	constant
UMEM_COMPLETION_RING	$ZIGLIB/std/os/linux.zig	/pub const UMEM_COMPLETION_RING = 6/;"	constant
UMEM_FILL_RING	$ZIGLIB/std/os/linux.zig	/pub const UMEM_FILL_RING = 5/;"	constant
UMEM_PGOFF_COMPLETION_RING	$ZIGLIB/std/os/linux.zig	/pub const UMEM_PGOFF_COMPLETION_RING = 0x180000000/;"	constant
UMEM_PGOFF_FILL_RING	$ZIGLIB/std/os/linux.zig	/pub const UMEM_PGOFF_FILL_RING = 0x100000000/;"	constant
UMEM_REG	$ZIGLIB/std/os/linux.zig	/pub const UMEM_REG = 4/;"	constant
UMEM_UNALIGNED_CHUNK_FLAG	$ZIGLIB/std/os/linux.zig	/pub const UMEM_UNALIGNED_CHUNK_FLAG = (1 << 0)/;"	constant
UMOUNT_NOFOLLOW	$ZIGLIB/std/os/linux.zig	/^pub const UMOUNT_NOFOLLOW = 8/;"	constant
UMTXP	$ZIGLIB/std/c/freebsd.zig	/UMTXP = 14/;"	field
UMTX_ABSTIME	$ZIGLIB/std/c/freebsd.zig	/^pub const UMTX_ABSTIME = 0x01/;"	constant
UMTX_OP	$ZIGLIB/std/c/freebsd.zig	/^pub const UMTX_OP = enum(c_int) {$/;"	enum
UM_GETCURFOCUSA	$ZIGLIB/std/os/windows/user32.zig	/^pub const UM_GETCURFOCUSA = 0x07ED/;"	constant
UM_GETCURFOCUSW	$ZIGLIB/std/os/windows/user32.zig	/^pub const UM_GETCURFOCUSW = 0x07EE/;"	constant
UM_GETGROUPSELA	$ZIGLIB/std/os/windows/user32.zig	/^pub const UM_GETGROUPSELA = 0x07EB/;"	constant
UM_GETGROUPSELW	$ZIGLIB/std/os/windows/user32.zig	/^pub const UM_GETGROUPSELW = 0x07EC/;"	constant
UM_GETOPTIONS	$ZIGLIB/std/os/windows/user32.zig	/^pub const UM_GETOPTIONS = 0x07EF/;"	constant
UM_GETOPTIONS2	$ZIGLIB/std/os/windows/user32.zig	/^pub const UM_GETOPTIONS2 = 0x07F0/;"	constant
UM_GETSELCOUNT	$ZIGLIB/std/os/windows/user32.zig	/^pub const UM_GETSELCOUNT = 0x07E8/;"	constant
UM_GETUSERSELA	$ZIGLIB/std/os/windows/user32.zig	/^pub const UM_GETUSERSELA = 0x07E9/;"	constant
UM_GETUSERSELW	$ZIGLIB/std/os/windows/user32.zig	/^pub const UM_GETUSERSELW = 0x07EA/;"	constant
UNABLE_TO_DECOMMIT_VM	$ZIGLIB/std/os/windows/ntstatus.zig	/UNABLE_TO_DECOMMIT_VM = 0xC000002C/;"	field
UNABLE_TO_DELETE_SECTION	$ZIGLIB/std/os/windows/ntstatus.zig	/UNABLE_TO_DELETE_SECTION = 0xC000001B/;"	field
UNABLE_TO_FREE_VM	$ZIGLIB/std/os/windows/ntstatus.zig	/UNABLE_TO_FREE_VM = 0xC000001A/;"	field
UNABLE_TO_LOCK_MEDIA	$ZIGLIB/std/os/windows/win32error.zig	/UNABLE_TO_LOCK_MEDIA = 1108/;"	field
UNABLE_TO_MOVE_REPLACEMENT	$ZIGLIB/std/os/windows/win32error.zig	/UNABLE_TO_MOVE_REPLACEMENT = 1176/;"	field
UNABLE_TO_MOVE_REPLACEMENT_2	$ZIGLIB/std/os/windows/win32error.zig	/UNABLE_TO_MOVE_REPLACEMENT_2 = 1177/;"	field
UNABLE_TO_REMOVE_REPLACED	$ZIGLIB/std/os/windows/win32error.zig	/UNABLE_TO_REMOVE_REPLACED = 1175/;"	field
UNABLE_TO_UNLOAD_MEDIA	$ZIGLIB/std/os/windows/win32error.zig	/UNABLE_TO_UNLOAD_MEDIA = 1109/;"	field
UNALIGN_NOPRINT	$ZIGLIB/std/os/linux.zig	/pub const UNALIGN_NOPRINT = 1/;"	constant
UNALIGN_SIGBUS	$ZIGLIB/std/os/linux.zig	/pub const UNALIGN_SIGBUS = 2/;"	constant
UNATCH	$ZIGLIB/std/os/linux/errno/sparc.zig	/UNATCH = 99/;"	field
UNBINDABLE	$ZIGLIB/std/os/linux.zig	/pub const UNBINDABLE = (1 << 17)/;"	constant
UNBLOCK	$ZIGLIB/std/os/linux.zig	/pub const UNBLOCK = 2/;"	constant
UNBLOCK_SOURCE	$ZIGLIB/std/os/linux.zig	/pub const UNBLOCK_SOURCE = 37/;"	constant
UNDEFINED	$ZIGLIB/std/coff.zig	/UNDEFINED = 0/;"	field
UNDEFINED_CHARACTER	$ZIGLIB/std/os/windows/win32error.zig	/UNDEFINED_CHARACTER = 583/;"	field
UNDEFINED_LABEL	$ZIGLIB/std/coff.zig	/UNDEFINED_LABEL = 7/;"	field
UNDEFINED_SCOPE	$ZIGLIB/std/os/windows/win32error.zig	/UNDEFINED_SCOPE = 319/;"	field
UNDEFINED_STATIC	$ZIGLIB/std/coff.zig	/UNDEFINED_STATIC = 14/;"	field
UNEXPECTED_IO_ERROR	$ZIGLIB/std/os/windows/ntstatus.zig	/UNEXPECTED_IO_ERROR = 0xC00000E9/;"	field
UNEXPECTED_MM_CREATE_ERR	$ZIGLIB/std/os/windows/win32error.zig	/UNEXPECTED_MM_CREATE_ERR = 556/;"	field
UNEXPECTED_MM_EXTEND_ERR	$ZIGLIB/std/os/windows/win32error.zig	/UNEXPECTED_MM_EXTEND_ERR = 558/;"	field
UNEXPECTED_MM_MAP_ERROR	$ZIGLIB/std/os/windows/win32error.zig	/UNEXPECTED_MM_MAP_ERROR = 557/;"	field
UNEXPECTED_NETWORK_ERROR	$ZIGLIB/std/os/windows/ntstatus.zig	/UNEXPECTED_NETWORK_ERROR = 0xC00000C4/;"	field
UNEXP_NET_ERR	$ZIGLIB/std/os/windows/win32error.zig	/UNEXP_NET_ERR = 59/;"	field
UNFINISHED_CONTEXT_DELETED	$ZIGLIB/std/os/windows/ntstatus.zig	/UNFINISHED_CONTEXT_DELETED = 0xC00002EE/;"	field
UNHANDLED_EXCEPTION	$ZIGLIB/std/os/windows/win32error.zig	/UNHANDLED_EXCEPTION = 574/;"	field
UNICAST_HOPS	$ZIGLIB/std/os/linux.zig	/pub const UNICAST_HOPS = 16/;"	constant
UNICAST_IF	$ZIGLIB/std/os/linux.zig	/pub const UNICAST_IF = 76/;"	constant
UNICODE_STRING	$ZIGLIB/std/os/windows.zig	/^pub const UNICODE_STRING = extern struct {$/;"	struct
UNICORE	$ZIGLIB/std/elf.zig	/UNICORE = 110/;"	field
UNIDENTIFIED_ERROR	$ZIGLIB/std/os/windows/win32error.zig	/UNIDENTIFIED_ERROR = 1287/;"	field
UNINITIALIZED	$ZIGLIB/std/os/linux.zig	/pub const UNINITIALIZED = 0x4000000/;"	constant
UNION	$ZIGLIB/std/coff.zig	/UNION = 9/;"	field
UNION_TAG	$ZIGLIB/std/coff.zig	/UNION_TAG = 12/;"	field
UNIX	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const UNIX = 1/;"	constant
UNIXTHREAD	$ZIGLIB/std/macho.zig	/UNIXTHREAD = 0x5/;"	field
UNKNOWN	$ZIGLIB/std/os/wasi.zig	/UNKNOWN/;"	field
UNKNOWN1	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const UNKNOWN1 = 20/;"	constant
UNKNOWN_COMPONENT	$ZIGLIB/std/os/windows/win32error.zig	/UNKNOWN_COMPONENT = 1607/;"	field
UNKNOWN_FEATURE	$ZIGLIB/std/os/windows/win32error.zig	/UNKNOWN_FEATURE = 1606/;"	field
UNKNOWN_PATCH	$ZIGLIB/std/os/windows/win32error.zig	/UNKNOWN_PATCH = 1647/;"	field
UNKNOWN_PORT	$ZIGLIB/std/os/windows/win32error.zig	/UNKNOWN_PORT = 1796/;"	field
UNKNOWN_PRINTER_DRIVER	$ZIGLIB/std/os/windows/win32error.zig	/UNKNOWN_PRINTER_DRIVER = 1797/;"	field
UNKNOWN_PRINTPROCESSOR	$ZIGLIB/std/os/windows/win32error.zig	/UNKNOWN_PRINTPROCESSOR = 1798/;"	field
UNKNOWN_PRINT_MONITOR	$ZIGLIB/std/os/windows/win32error.zig	/UNKNOWN_PRINT_MONITOR = 3000/;"	field
UNKNOWN_PRODUCT	$ZIGLIB/std/os/windows/win32error.zig	/UNKNOWN_PRODUCT = 1605/;"	field
UNKNOWN_PROPERTY	$ZIGLIB/std/os/windows/win32error.zig	/UNKNOWN_PROPERTY = 1608/;"	field
UNKNOWN_REVISION	$ZIGLIB/std/os/windows/win32error.zig	/UNKNOWN_REVISION = 1305/;"	field
UNLCK	$ZIGLIB/std/os/linux/x86_64.zig	/pub const UNLCK = 2/;"	constant
UNLCKSYS	$ZIGLIB/std/c/freebsd.zig	/pub const UNLCKSYS = 4/;"	constant
UNLINKAT	$ZIGLIB/std/os/linux.zig	/UNLINKAT/;"	field
UNLKSYS	$ZIGLIB/std/c/solaris.zig	/pub const UNLKSYS = 4/;"	constant
UNLOCK	$ZIGLIB/std/c/freebsd.zig	/UNLOCK = 1/;"	field
UNLOCKED	$ZIGLIB/std/event/lock.zig	/const UNLOCKED = 0/;"	constant
UNLOCK_PI	$ZIGLIB/std/os/linux.zig	/pub const UNLOCK_PI = 7/;"	constant
UNLOCK_REFERRAL	$ZIGLIB/std/os/darwin/cssm.zig	/UNLOCK_REFERRAL/;"	field
UNMAPPABLE_CHARACTER	$ZIGLIB/std/os/windows/ntstatus.zig	/UNMAPPABLE_CHARACTER = 0xC0000162/;"	field
UNMERGEABLE	$ZIGLIB/std/os/linux.zig	/pub const UNMERGEABLE = 13/;"	constant
UNMOUNT	$ZIGLIB/std/os/plan9.zig	/UNMOUNT = 35/;"	field
UNMOUNTED	$ZIGLIB/std/c/solaris.zig	/pub const UNMOUNTED = 0x20000000/;"	constant
UNRECOGNIZED_MEDIA	$ZIGLIB/std/os/windows/win32error.zig	/UNRECOGNIZED_MEDIA = 1785/;"	field
UNRECOGNIZED_VOLUME	$ZIGLIB/std/os/windows/win32error.zig	/UNRECOGNIZED_VOLUME = 1005/;"	field
UNREGISTER_BUFFERS	$ZIGLIB/std/os/linux.zig	/UNREGISTER_BUFFERS/;"	field
UNREGISTER_EVENTFD	$ZIGLIB/std/os/linux.zig	/UNREGISTER_EVENTFD/;"	field
UNREGISTER_FILES	$ZIGLIB/std/os/linux.zig	/UNREGISTER_FILES/;"	field
UNREGISTER_PERSONALITY	$ZIGLIB/std/os/linux.zig	/UNREGISTER_PERSONALITY/;"	field
UNSETENV	$ZIGLIB/std/c/openbsd.zig	/pub const UNSETENV = "unsetenv"/;"	constant
UNSHARE	$ZIGLIB/std/c/solaris.zig	/pub const UNSHARE = 41/;"	constant
UNSPEC	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const UNSPEC = 0/;"	constant
UNSUCCESSFUL	$ZIGLIB/std/os/windows/ntstatus.zig	/UNSUCCESSFUL = 0xC0000001/;"	field
UNSUPPORTED_COMPRESSION	$ZIGLIB/std/os/windows/win32error.zig	/UNSUPPORTED_COMPRESSION = 618/;"	field
UNSUPPORTED_PREAUTH	$ZIGLIB/std/os/windows/ntstatus.zig	/UNSUPPORTED_PREAUTH = 0xC0000351/;"	field
UNSUPPORTED_TYPE	$ZIGLIB/std/os/windows/win32error.zig	/UNSUPPORTED_TYPE = 1630/;"	field
UNTRACED	$ZIGLIB/std/os/linux.zig	/pub const UNTRACED = 2/;"	constant
UNUSED	$ZIGLIB/std/os/linux.zig	/pub const UNUSED = SIG.SYS/;"	constant
UNWIND	$ZIGLIB/std/os/windows/win32error.zig	/UNWIND = 542/;"	field
UNWIND_ARM64_DWARF_SECTION_OFFSET	$ZIGLIB/std/macho.zig	/^pub const UNWIND_ARM64_DWARF_SECTION_OFFSET: u32 = 0x00FFFFFF/;"	constant
UNWIND_ARM64_FRAMELESS_STACK_SIZE_MASK	$ZIGLIB/std/macho.zig	/^pub const UNWIND_ARM64_FRAMELESS_STACK_SIZE_MASK: u32 = 0x00FFF000/;"	constant
UNWIND_ARM64_FRAME_D10_D11_PAIR	$ZIGLIB/std/macho.zig	/^pub const UNWIND_ARM64_FRAME_D10_D11_PAIR: u32 = 0x00000200/;"	constant
UNWIND_ARM64_FRAME_D12_D13_PAIR	$ZIGLIB/std/macho.zig	/^pub const UNWIND_ARM64_FRAME_D12_D13_PAIR: u32 = 0x00000400/;"	constant
UNWIND_ARM64_FRAME_D14_D15_PAIR	$ZIGLIB/std/macho.zig	/^pub const UNWIND_ARM64_FRAME_D14_D15_PAIR: u32 = 0x00000800/;"	constant
UNWIND_ARM64_FRAME_D8_D9_PAIR	$ZIGLIB/std/macho.zig	/^pub const UNWIND_ARM64_FRAME_D8_D9_PAIR: u32 = 0x00000100/;"	constant
UNWIND_ARM64_FRAME_X19_X20_PAIR	$ZIGLIB/std/macho.zig	/^pub const UNWIND_ARM64_FRAME_X19_X20_PAIR: u32 = 0x00000001/;"	constant
UNWIND_ARM64_FRAME_X21_X22_PAIR	$ZIGLIB/std/macho.zig	/^pub const UNWIND_ARM64_FRAME_X21_X22_PAIR: u32 = 0x00000002/;"	constant
UNWIND_ARM64_FRAME_X23_X24_PAIR	$ZIGLIB/std/macho.zig	/^pub const UNWIND_ARM64_FRAME_X23_X24_PAIR: u32 = 0x00000004/;"	constant
UNWIND_ARM64_FRAME_X25_X26_PAIR	$ZIGLIB/std/macho.zig	/^pub const UNWIND_ARM64_FRAME_X25_X26_PAIR: u32 = 0x00000008/;"	constant
UNWIND_ARM64_FRAME_X27_X28_PAIR	$ZIGLIB/std/macho.zig	/^pub const UNWIND_ARM64_FRAME_X27_X28_PAIR: u32 = 0x00000010/;"	constant
UNWIND_ARM64_MODE	$ZIGLIB/std/macho.zig	/^pub const UNWIND_ARM64_MODE = enum(u4) {$/;"	enum
UNWIND_ARM64_MODE_MASK	$ZIGLIB/std/macho.zig	/^pub const UNWIND_ARM64_MODE_MASK: u32 = 0x0F000000/;"	constant
UNWIND_CONSOLIDATE	$ZIGLIB/std/os/windows/win32error.zig	/UNWIND_CONSOLIDATE = 684/;"	field
UNWIND_HAS_LSDA	$ZIGLIB/std/macho.zig	/^pub const UNWIND_HAS_LSDA: u32 = 0x40000000/;"	constant
UNWIND_HISTORY_TABLE	$ZIGLIB/std/os/windows.zig	/^pub const UNWIND_HISTORY_TABLE = extern struct {$/;"	struct
UNWIND_HISTORY_TABLE_ENTRY	$ZIGLIB/std/os/windows.zig	/^pub const UNWIND_HISTORY_TABLE_ENTRY = extern struct {$/;"	struct
UNWIND_HISTORY_TABLE_SIZE	$ZIGLIB/std/os/windows.zig	/^pub const UNWIND_HISTORY_TABLE_SIZE = 12/;"	constant
UNWIND_IS_NOT_FUNCTION_START	$ZIGLIB/std/macho.zig	/^pub const UNWIND_IS_NOT_FUNCTION_START: u32 = 0x80000000/;"	constant
UNWIND_PERSONALITY_MASK	$ZIGLIB/std/macho.zig	/^pub const UNWIND_PERSONALITY_MASK: u32 = 0x30000000/;"	constant
UNWIND_SECOND_LEVEL	$ZIGLIB/std/macho.zig	/^pub const UNWIND_SECOND_LEVEL = enum(u32) {$/;"	enum
UNWIND_SECTION_VERSION	$ZIGLIB/std/macho.zig	/^pub const UNWIND_SECTION_VERSION = 1/;"	constant
UNWIND_X86_64_DWARF_SECTION_OFFSET	$ZIGLIB/std/macho.zig	/^pub const UNWIND_X86_64_DWARF_SECTION_OFFSET: u32 = 0x00FFFFFF/;"	constant
UNWIND_X86_64_FRAMELESS_STACK_ADJUST	$ZIGLIB/std/macho.zig	/^pub const UNWIND_X86_64_FRAMELESS_STACK_ADJUST: u32 = 0x0000E000/;"	constant
UNWIND_X86_64_FRAMELESS_STACK_REG_COUNT	$ZIGLIB/std/macho.zig	/^pub const UNWIND_X86_64_FRAMELESS_STACK_REG_COUNT: u32 = 0x00001C00/;"	constant
UNWIND_X86_64_FRAMELESS_STACK_REG_PERMUTATION	$ZIGLIB/std/macho.zig	/^pub const UNWIND_X86_64_FRAMELESS_STACK_REG_PERMUTATION: u32 = 0x000003FF/;"	constant
UNWIND_X86_64_FRAMELESS_STACK_SIZE	$ZIGLIB/std/macho.zig	/^pub const UNWIND_X86_64_FRAMELESS_STACK_SIZE: u32 = 0x00FF0000/;"	constant
UNWIND_X86_64_MODE	$ZIGLIB/std/macho.zig	/^pub const UNWIND_X86_64_MODE = enum(u4) {$/;"	enum
UNWIND_X86_64_MODE_MASK	$ZIGLIB/std/macho.zig	/^pub const UNWIND_X86_64_MODE_MASK: u32 = 0x0F000000/;"	constant
UNWIND_X86_64_RBP_FRAME_OFFSET	$ZIGLIB/std/macho.zig	/^pub const UNWIND_X86_64_RBP_FRAME_OFFSET: u32 = 0x00FF0000/;"	constant
UNWIND_X86_64_RBP_FRAME_REGISTERS	$ZIGLIB/std/macho.zig	/^pub const UNWIND_X86_64_RBP_FRAME_REGISTERS: u32 = 0x00007FFF/;"	constant
UNWIND_X86_64_REG	$ZIGLIB/std/macho.zig	/^pub const UNWIND_X86_64_REG = enum(u3) {$/;"	enum
UNW_FLAG_CHAININFO	$ZIGLIB/std/os/windows.zig	/^pub const UNW_FLAG_CHAININFO = 0x4/;"	constant
UNW_FLAG_EHANDLER	$ZIGLIB/std/os/windows.zig	/^pub const UNW_FLAG_EHANDLER = 0x1/;"	constant
UNW_FLAG_NHANDLER	$ZIGLIB/std/os/windows.zig	/^pub const UNW_FLAG_NHANDLER = 0x0/;"	constant
UNW_FLAG_UHANDLER	$ZIGLIB/std/os/windows.zig	/^pub const UNW_FLAG_UHANDLER = 0x2/;"	constant
UPDATE	$ZIGLIB/std/c/solaris.zig	/pub const UPDATE = 0x02/;"	constant
UPDATEINTERVAL	$ZIGLIB/std/c/dragonfly.zig	/pub const UPDATEINTERVAL = 23/;"	constant
UPDATE_ACCEPT_CONTEXT	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const UPDATE_ACCEPT_CONTEXT = 28683/;"	constant
UPDATE_CONNECT_CONTEXT	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const UPDATE_CONNECT_CONTEXT = 28688/;"	constant
UPPER_SORBIAN	$ZIGLIB/std/os/windows/lang.zig	/^pub const UPPER_SORBIAN = 0x2e/;"	constant
UPPER_SORBIAN_GERMANY	$ZIGLIB/std/os/windows/sublang.zig	/^pub const UPPER_SORBIAN_GERMANY = 0x01/;"	constant
UPTIME	$ZIGLIB/std/c/freebsd.zig	/pub const UPTIME = 5/;"	constant
UPTIME_FAST	$ZIGLIB/std/c/freebsd.zig	/pub const UPTIME_FAST = 8/;"	constant
UPTIME_PRECISE	$ZIGLIB/std/c/freebsd.zig	/pub const UPTIME_PRECISE = 7/;"	constant
UPTIME_RAW	$ZIGLIB/std/c/darwin.zig	/pub const UPTIME_RAW = 8/;"	constant
UPTIME_RAW_APPROX	$ZIGLIB/std/c/darwin.zig	/pub const UPTIME_RAW_APPROX = 9/;"	constant
UP_P2MP	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const UP_P2MP = 1/;"	constant
UP_P2P	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const UP_P2P = 0/;"	constant
UP_SYSTEM_ONLY	$ZIGLIB/std/coff.zig	/UP_SYSTEM_ONLY: u1 = 0/;"	field
URDU	$ZIGLIB/std/os/windows/lang.zig	/^pub const URDU = 0x20/;"	constant
URDU_INDIA	$ZIGLIB/std/os/windows/sublang.zig	/^pub const URDU_INDIA = 0x02/;"	constant
URDU_PAKISTAN	$ZIGLIB/std/os/windows/sublang.zig	/^pub const URDU_PAKISTAN = 0x01/;"	constant
UREFS_OVERFLOW	$ZIGLIB/std/c/darwin.zig	/UREFS_OVERFLOW = 19/;"	field
USELOOPBACK	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const USELOOPBACK = 64/;"	constant
USER	$ZIGLIB/std/os/linux.zig	/pub const USER = 1 << 0/;"	constant
USER2USER_REQUIRED	$ZIGLIB/std/os/windows/ntstatus.zig	/USER2USER_REQUIRED = 0xC0000408/;"	field
USERS	$ZIGLIB/std/os/linux/errno/sparc.zig	/USERS = 68/;"	field
USERSOCK	$ZIGLIB/std/os/linux.zig	/pub const USERSOCK = 2/;"	constant
USERTRAMP	$ZIGLIB/std/c/darwin.zig	/pub const USERTRAMP = 0x0100/;"	constant
USER_APC	$ZIGLIB/std/os/windows/win32error.zig	/USER_APC = 737/;"	field
USER_COOKIE	$ZIGLIB/std/c/freebsd.zig	/pub const USER_COOKIE = 0x1015/;"	constant
USER_DELETE_TRUST_QUOTA_EXCEEDED	$ZIGLIB/std/os/windows/win32error.zig	/USER_DELETE_TRUST_QUOTA_EXCEEDED = 1934/;"	field
USER_EXISTS	$ZIGLIB/std/os/windows/win32error.zig	/USER_EXISTS = 1316/;"	field
USER_MAPPED_FILE	$ZIGLIB/std/os/windows/win32error.zig	/USER_MAPPED_FILE = 1224/;"	field
USER_NOTIF	$ZIGLIB/std/os/linux/seccomp.zig	/pub const USER_NOTIF = 0x7fc00000/;"	constant
USER_NOTIF_FLAG_CONTINUE	$ZIGLIB/std/os/linux/seccomp.zig	/^pub const USER_NOTIF_FLAG_CONTINUE = 1 << 0/;"	constant
USER_PROFILE_LOAD	$ZIGLIB/std/os/windows/win32error.zig	/USER_PROFILE_LOAD = 500/;"	field
USER_SESSION_DELETED	$ZIGLIB/std/os/windows/ntstatus.zig	/USER_SESSION_DELETED = 0xC0000203/;"	field
USER_TIMEOUT	$ZIGLIB/std/os/linux.zig	/pub const USER_TIMEOUT = 18/;"	constant
USER_TRUST	$ZIGLIB/std/os/darwin/cssm.zig	/USER_TRUST/;"	field
USE_NEED_WAKEUP	$ZIGLIB/std/os/linux.zig	/pub const USE_NEED_WAKEUP = (1 << 3)/;"	constant
USHORT	$ZIGLIB/std/os/windows.zig	/^pub const USHORT = u16/;"	constant
USMStorageClassesINTEL	$ZIGLIB/std/target/spirv.zig	/USMStorageClassesINTEL/;"	field
USR1	$ZIGLIB/std/os/linux.zig	/pub const USR1 = 30/;"	constant
USR2	$ZIGLIB/std/os/linux.zig	/pub const USR2 = 31/;"	constant
USRSTACK	$ZIGLIB/std/c/dragonfly.zig	/pub const USRSTACK = 33/;"	constant
UTC_OFFSET	$ZIGLIB/std/c/openbsd.zig	/pub const UTC_OFFSET = 88/;"	constant
UTIME	$ZIGLIB/std/os/linux.zig	/^pub const UTIME = struct {$/;"	struct
UUID	$ZIGLIB/std/macho.zig	/UUID = 0x1b/;"	field
UZBEK	$ZIGLIB/std/os/windows/lang.zig	/^pub const UZBEK = 0x43/;"	constant
UZBEK_CYRILLIC	$ZIGLIB/std/os/windows/sublang.zig	/^pub const UZBEK_CYRILLIC = 0x02/;"	constant
UZBEK_LATIN	$ZIGLIB/std/os/windows/sublang.zig	/^pub const UZBEK_LATIN = 0x01/;"	constant
U_SUFFIX	$ZIGLIB/std/zig/c_translation.zig	/pub fn U_SUFFIX(comptime n: comptime_int) @TypeOf(promoteIntLiteral(c_uint, n, .decimal)) {$/;"	function
Uart	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/Uart: *const UartDevicePath/;"	field
UartDevicePath	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/pub const UartDevicePath = extern struct {$/;"	struct
Udp6CompletionToken	$ZIGLIB/std/os/uefi/protocols/udp6_protocol.zig	/^pub const Udp6CompletionToken = extern struct {$/;"	struct
Udp6ConfigData	$ZIGLIB/std/os/uefi/protocols/udp6_protocol.zig	/^pub const Udp6ConfigData = extern struct {$/;"	struct
Udp6FragmentData	$ZIGLIB/std/os/uefi/protocols/udp6_protocol.zig	/^pub const Udp6FragmentData = extern struct {$/;"	struct
Udp6Protocol	$ZIGLIB/std/os/uefi/protocols/udp6_protocol.zig	/^pub const Udp6Protocol = extern struct {$/;"	struct
Udp6ReceiveData	$ZIGLIB/std/os/uefi/protocols/udp6_protocol.zig	/^pub const Udp6ReceiveData = extern struct {$/;"	struct
Udp6ServiceBindingProtocol	$ZIGLIB/std/os/uefi/protocols/udp6_service_binding_protocol.zig	/^pub const Udp6ServiceBindingProtocol = extern struct {$/;"	struct
Udp6SessionData	$ZIGLIB/std/os/uefi/protocols/udp6_protocol.zig	/^pub const Udp6SessionData = extern struct {$/;"	struct
Udp6TransmitData	$ZIGLIB/std/os/uefi/protocols/udp6_protocol.zig	/^pub const Udp6TransmitData = extern struct {$/;"	struct
UefiCapsuleBlockDescriptor	$ZIGLIB/std/os/uefi/tables/runtime_services.zig	/^pub const UefiCapsuleBlockDescriptor = extern struct {$/;"	struct
UefiPoolAllocator	$ZIGLIB/std/os/uefi/pool_allocator.zig	/^const UefiPoolAllocator = struct {$/;"	struct
Uint	$ZIGLIB/std/math.zig	/const Uint = std.meta.Int(.unsigned, int_info.bits)/;"	constant
UnInt	$ZIGLIB/std/packed_int_array.zig	/const UnInt = std.meta.Int(.unsigned, int_bits)/;"	constant
Undefined	$ZIGLIB/std/builtin.zig	/Undefined: void/;"	field
UnescapeValidStringError	$ZIGLIB/std/json.zig	/^pub const UnescapeValidStringError = error{InvalidUnicodeHexSymbol}/;"	constant
UnexpectedError	$ZIGLIB/std/os.zig	/^pub const UnexpectedError = error{$/;"	constant
UnicodeCaseTableData	$ZIGLIB/std/os/windows.zig	/UnicodeCaseTableData: PVOID/;"	field
UnicodeEscape	$ZIGLIB/std/c/tokenizer.zig	/UnicodeEscape/;"	field
UniformAndStorageBuffer16BitAccess	$ZIGLIB/std/target/spirv.zig	/UniformAndStorageBuffer16BitAccess/;"	field
UniformAndStorageBuffer8BitAccess	$ZIGLIB/std/target/spirv.zig	/UniformAndStorageBuffer8BitAccess/;"	field
UniformBufferArrayDynamicIndexing	$ZIGLIB/std/target/spirv.zig	/UniformBufferArrayDynamicIndexing/;"	field
UniformBufferArrayNonUniformIndexing	$ZIGLIB/std/target/spirv.zig	/UniformBufferArrayNonUniformIndexing/;"	field
UniformBufferArrayNonUniformIndexingEXT	$ZIGLIB/std/target/spirv.zig	/UniformBufferArrayNonUniformIndexingEXT/;"	field
UniformTexelBufferArrayDynamicIndexing	$ZIGLIB/std/target/spirv.zig	/UniformTexelBufferArrayDynamicIndexing/;"	field
UniformTexelBufferArrayDynamicIndexingEXT	$ZIGLIB/std/target/spirv.zig	/UniformTexelBufferArrayDynamicIndexingEXT/;"	field
UniformTexelBufferArrayNonUniformIndexing	$ZIGLIB/std/target/spirv.zig	/UniformTexelBufferArrayNonUniformIndexing/;"	field
UniformTexelBufferArrayNonUniformIndexingEXT	$ZIGLIB/std/target/spirv.zig	/UniformTexelBufferArrayNonUniformIndexingEXT/;"	field
Union	$ZIGLIB/std/builtin.zig	/pub const Union = struct {$/;"	struct
UnionField	$ZIGLIB/std/builtin.zig	/pub const UnionField = struct {$/;"	struct
UniqueIdLength	$ZIGLIB/std/os/windows.zig	/UniqueIdLength: USHORT/;"	field
UniqueIdOffset	$ZIGLIB/std/os/windows.zig	/UniqueIdOffset: ULONG/;"	field
UniqueProcess	$ZIGLIB/std/os/windows.zig	/UniqueProcess: HANDLE/;"	field
UniqueThread	$ZIGLIB/std/os/windows.zig	/UniqueThread: HANDLE/;"	field
UnixDomainSocket	$ZIGLIB/std/fs/file.zig	/UnixDomainSocket/;"	field
Unknown	$ZIGLIB/std/pdb.zig	/Unknown: u32/;"	field
UnlinkError	$ZIGLIB/std/os.zig	/^pub const UnlinkError = error{$/;"	constant
UnlinkatError	$ZIGLIB/std/os.zig	/^pub const UnlinkatError = UnlinkError || error{$/;"	constant
UnlockFile	$ZIGLIB/std/os/windows.zig	/^pub fn UnlockFile($/;"	function
UnlockFileError	$ZIGLIB/std/os/windows.zig	/^pub const UnlockFileError = error{$/;"	constant
Unlocked	$ZIGLIB/std/event/rwlock.zig	/Unlocked/;"	field
Unmanaged	$ZIGLIB/std/hash_map.zig	/pub const Unmanaged = HashMapUnmanaged(K, V, Context, max_load_percentage)/;"	constant
Unordered	$ZIGLIB/std/builtin.zig	/Unordered/;"	field
UnpackedSize	$ZIGLIB/std/compress/lzma/decode.zig	/^pub const UnpackedSize = union(enum) {$/;"	union
UnparkedProcessorCount	$ZIGLIB/std/os/windows.zig	/UnparkedProcessorCount: USHORT/;"	field
UnsignedInt	$ZIGLIB/std/math/big/rational.zig	/const UnsignedInt = std.meta.Int(.unsigned, @typeInfo(T).Float.bits)/;"	constant
UnsignedT	$ZIGLIB/std/rand.zig	/const UnsignedT = std.meta.Int(.unsigned, info.bits)/;"	constant
UnsignedType	$ZIGLIB/std/zig/c_translation.zig	/const UnsignedType = if (!a_signed) A_Promoted else B_Promoted/;"	constant
Unspecified	$ZIGLIB/std/builtin.zig	/Unspecified/;"	field
UnstructuredLoopControlsINTEL	$ZIGLIB/std/target/spirv.zig	/UnstructuredLoopControlsINTEL/;"	field
Unsupported	$ZIGLIB/std/os/uefi/status.zig	/Unsupported = high_bit | 3/;"	field
UnsupportedImpl	$ZIGLIB/std/Thread/Futex.zig	/^const UnsupportedImpl = struct {$/;"	struct
UnusableMemory	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/UnusableMemory/;"	field
Unused1	$ZIGLIB/std/pdb.zig	/Unused1: u32/;"	field
Unused2	$ZIGLIB/std/pdb.zig	/Unused2: u32/;"	field
UnwindData	$ZIGLIB/std/os/windows.zig	/UnwindData: DWORD/;"	field
UnwindInfoCompressedEntry	$ZIGLIB/std/macho.zig	/^pub const UnwindInfoCompressedEntry = packed struct {$/;"	struct
UpdateTimesError	$ZIGLIB/std/fs/file.zig	/pub const UpdateTimesError = os.FutimensError || windows.SetFileTimeError/;"	constant
Updater	$ZIGLIB/compiler_rt/atomics.zig	/const Updater = struct {$/;"	struct
UsbClass	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/UsbClass: *const UsbClassDevicePath/;"	field
UsbClassDevicePath	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/pub const UsbClassDevicePath = extern struct {$/;"	struct
UsbDevicePath	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/pub const UsbDevicePath = extern struct {$/;"	struct
UsbWwid	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/UsbWwid: *const UsbWwidDevicePath/;"	field
UsbWwidDevicePath	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/pub const UsbWwidDevicePath = extern struct {$/;"	struct
UseFirst	$ZIGLIB/std/json.zig	/UseFirst/;"	field
UseLast	$ZIGLIB/std/json.zig	/UseLast/;"	field
UserInfo	$ZIGLIB/std/process.zig	/^pub const UserInfo = struct {$/;"	struct
UserInputOption	$ZIGLIB/std/Build.zig	/^const UserInputOption = struct {$/;"	struct
UserInputOptionsMap	$ZIGLIB/std/Build.zig	/^const UserInputOptionsMap = StringHashMap(UserInputOption)/;"	constant
UserModeGlobalLogger	$ZIGLIB/std/os/windows.zig	/UserModeGlobalLogger: [16]USHORT/;"	field
UserPointerAuthMask	$ZIGLIB/std/os/windows.zig	/UserPointerAuthMask: ULONG64/;"	field
UserSharedInfoPtr	$ZIGLIB/std/os/windows.zig	/UserSharedInfoPtr: PVOID/;"	field
UserValue	$ZIGLIB/std/Build.zig	/^const UserValue = union(enum) {$/;"	union
Utf16LeIterator	$ZIGLIB/std/unicode.zig	/^pub const Utf16LeIterator = struct {$/;"	struct
Utf8Decode2Error	$ZIGLIB/std/unicode.zig	/^const Utf8Decode2Error = error{$/;"	constant
Utf8Decode3Error	$ZIGLIB/std/unicode.zig	/^const Utf8Decode3Error = error{$/;"	constant
Utf8Decode4Error	$ZIGLIB/std/unicode.zig	/^const Utf8Decode4Error = error{$/;"	constant
Utf8DecodeError	$ZIGLIB/std/unicode.zig	/^const Utf8DecodeError = Utf8Decode2Error || Utf8Decode3Error || Utf8Decode4Error/;"	constant
Utf8Iterator	$ZIGLIB/std/unicode.zig	/^pub const Utf8Iterator = struct {$/;"	struct
Utf8View	$ZIGLIB/std/unicode.zig	/^pub const Utf8View = struct {$/;"	struct
V4MAPPED	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const V4MAPPED = 2048/;"	constant
V4MAPPED_CFG	$ZIGLIB/std/c/freebsd.zig	/pub const V4MAPPED_CFG = 0x00000200/;"	constant
V6ONLY	$ZIGLIB/std/os/linux.zig	/pub const V6ONLY = 26/;"	constant
V800	$ZIGLIB/std/elf.zig	/V800 = 36/;"	field
V850	$ZIGLIB/std/elf.zig	/V850 = 87/;"	field
VALENCIAN	$ZIGLIB/std/os/windows/lang.zig	/^pub const VALENCIAN = 0x03/;"	constant
VALENCIAN_VALENCIA	$ZIGLIB/std/os/windows/sublang.zig	/^pub const VALENCIAN_VALENCIA = 0x02/;"	constant
VALID	$ZIGLIB/std/c/solaris.zig	/pub inline fn VALID(sig: usize) usize {$/;"	function
VALIDATE_CONTINUE	$ZIGLIB/std/os/windows/win32error.zig	/VALIDATE_CONTINUE = 625/;"	field
VALUE	$ZIGLIB/std/c/openbsd.zig	/pub const VALUE = "value"/;"	constant
VARIABLE_NOT_FOUND	$ZIGLIB/std/os/windows/ntstatus.zig	/VARIABLE_NOT_FOUND = 0xC0000100/;"	field
VC_DISCONNECTED	$ZIGLIB/std/os/windows/win32error.zig	/VC_DISCONNECTED = 240/;"	field
VC_FEATURE	$ZIGLIB/std/coff.zig	/VC_FEATURE = 12/;"	field
VDM_DISALLOWED	$ZIGLIB/std/os/windows/win32error.zig	/VDM_DISALLOWED = 1286/;"	field
VDM_HARD_ERROR	$ZIGLIB/std/os/windows/win32error.zig	/VDM_HARD_ERROR = 593/;"	field
VDSO	$ZIGLIB/std/os/linux/x86_64.zig	/^pub const VDSO = struct {$/;"	struct
VECTORED_EXCEPTION_HANDLER	$ZIGLIB/std/os/windows.zig	/^pub const VECTORED_EXCEPTION_HANDLER = *const fn (ExceptionInfo: *EXCEPTION_POINTERS) callconv(WINAPI) c_long/;"	constant
VERIFIER_STOP	$ZIGLIB/std/os/windows/win32error.zig	/VERIFIER_STOP = 537/;"	field
VERIFY_REQUIRED	$ZIGLIB/std/os/windows/ntstatus.zig	/VERIFY_REQUIRED = 0x80000016/;"	field
VERSION	$ZIGLIB/std/c/openbsd.zig	/pub const VERSION = 4/;"	constant
VERSION_MIN_IPHONEOS	$ZIGLIB/std/macho.zig	/VERSION_MIN_IPHONEOS = 0x25/;"	field
VERSION_MIN_MACOSX	$ZIGLIB/std/macho.zig	/VERSION_MIN_MACOSX = 0x24/;"	field
VERSION_MIN_TVOS	$ZIGLIB/std/macho.zig	/VERSION_MIN_TVOS = 0x2F/;"	field
VERSION_MIN_WATCHOS	$ZIGLIB/std/macho.zig	/VERSION_MIN_WATCHOS = 0x30/;"	field
VERSION_PARSE_ERROR	$ZIGLIB/std/os/windows/win32error.zig	/VERSION_PARSE_ERROR = 777/;"	field
VER_FLG_BASE	$ZIGLIB/std/elf.zig	/^pub const VER_FLG_BASE = 0x1/;"	constant
VER_FLG_WEAK	$ZIGLIB/std/elf.zig	/^pub const VER_FLG_WEAK = 0x2/;"	constant
VFINFO_LIST	$ZIGLIB/std/os/linux.zig	/VFINFO_LIST/;"	field
VFORK	$ZIGLIB/std/os/linux.zig	/pub const VFORK = 0x00004000/;"	constant
VFPD32	$ZIGLIB/std/os/linux/arm-eabi.zig	/pub const VFPD32 = 1 << 19/;"	constant
VFPv3	$ZIGLIB/std/os/linux/arm-eabi.zig	/pub const VFPv3 = 1 << 13/;"	constant
VFPv3D16	$ZIGLIB/std/os/linux/arm-eabi.zig	/pub const VFPv3D16 = 1 << 14/;"	constant
VFPv4	$ZIGLIB/std/os/linux/arm-eabi.zig	/pub const VFPv4 = 1 << 16/;"	constant
VFS_CAP_FLAGS_EFFECTIVE	$ZIGLIB/std/os/linux.zig	/^pub const VFS_CAP_FLAGS_EFFECTIVE = 0x000001/;"	constant
VFS_CAP_FLAGS_MASK	$ZIGLIB/std/os/linux.zig	/^pub const VFS_CAP_FLAGS_MASK = ~VFS_CAP_REVISION_MASK/;"	constant
VFS_CAP_REVISION	$ZIGLIB/std/os/linux.zig	/^pub const VFS_CAP_REVISION = VFS_CAP_REVISION_2/;"	constant
VFS_CAP_REVISION_1	$ZIGLIB/std/os/linux.zig	/^pub const VFS_CAP_REVISION_1 = 0x01000000/;"	constant
VFS_CAP_REVISION_2	$ZIGLIB/std/os/linux.zig	/^pub const VFS_CAP_REVISION_2 = 0x02000000/;"	constant
VFS_CAP_REVISION_MASK	$ZIGLIB/std/os/linux.zig	/^pub const VFS_CAP_REVISION_MASK = 0xFF000000/;"	constant
VFS_CAP_REVISION_SHIFT	$ZIGLIB/std/os/linux.zig	/^pub const VFS_CAP_REVISION_SHIFT = 24/;"	constant
VFS_CAP_U32	$ZIGLIB/std/os/linux.zig	/^pub const VFS_CAP_U32 = VFS_CAP_U32_2/;"	constant
VFS_CAP_U32_1	$ZIGLIB/std/os/linux.zig	/^pub const VFS_CAP_U32_1 = 1/;"	constant
VFS_CAP_U32_2	$ZIGLIB/std/os/linux.zig	/^pub const VFS_CAP_U32_2 = 2/;"	constant
VF_PORTS	$ZIGLIB/std/os/linux.zig	/VF_PORTS/;"	field
VHD_CHILD_PARENT_SIZE_MISMATCH	$ZIGLIB/std/os/windows/ntstatus.zig	/VHD_CHILD_PARENT_SIZE_MISMATCH = 0xC03A0017/;"	field
VHD_DIFFERENCING_CHAIN_CYCLE_DETECTED	$ZIGLIB/std/os/windows/ntstatus.zig	/VHD_DIFFERENCING_CHAIN_CYCLE_DETECTED = 0xC03A0018/;"	field
VHD_DIFFERENCING_CHAIN_ERROR_IN_PARENT	$ZIGLIB/std/os/windows/ntstatus.zig	/VHD_DIFFERENCING_CHAIN_ERROR_IN_PARENT = 0xC03A0019/;"	field
VHD_PARENT_VHD_ACCESS_DENIED	$ZIGLIB/std/os/windows/ntstatus.zig	/VHD_PARENT_VHD_ACCESS_DENIED = 0xC03A0016/;"	field
VIDEO	$ZIGLIB/std/c/openbsd.zig	/pub const VIDEO = 89/;"	constant
VIDEOCORE	$ZIGLIB/std/elf.zig	/VIDEOCORE = 95/;"	field
VIDEOCORE3	$ZIGLIB/std/elf.zig	/VIDEOCORE3 = 137/;"	field
VIDEOCORE5	$ZIGLIB/std/elf.zig	/VIDEOCORE5 = 198/;"	field
VIDEO_DRIVER_DEBUG_REPORT_REQUEST	$ZIGLIB/std/os/windows/ntstatus.zig	/VIDEO_DRIVER_DEBUG_REPORT_REQUEST = 0x401B00EC/;"	field
VIDEO_HUNG_DISPLAY_DRIVER_THREAD	$ZIGLIB/std/os/windows/ntstatus.zig	/VIDEO_HUNG_DISPLAY_DRIVER_THREAD = 0xC01B00EA/;"	field
VIDEO_HUNG_DISPLAY_DRIVER_THREAD_RECOVERED	$ZIGLIB/std/os/windows/ntstatus.zig	/VIDEO_HUNG_DISPLAY_DRIVER_THREAD_RECOVERED = 0x801B00EB/;"	field
VIETNAMESE	$ZIGLIB/std/os/windows/lang.zig	/^pub const VIETNAMESE = 0x2a/;"	constant
VIETNAMESE_VIETNAM	$ZIGLIB/std/os/windows/sublang.zig	/^pub const VIETNAMESE_VIETNAM = 0x01/;"	constant
VINES	$ZIGLIB/std/c/freebsd.zig	/pub const VINES = 83/;"	constant
VIRTDISK_NOT_VIRTUAL_DISK	$ZIGLIB/std/os/windows/ntstatus.zig	/VIRTDISK_NOT_VIRTUAL_DISK = 0xC03A0015/;"	field
VIRTDISK_PROVIDER_NOT_FOUND	$ZIGLIB/std/os/windows/ntstatus.zig	/VIRTDISK_PROVIDER_NOT_FOUND = 0xC03A0014/;"	field
VIRTUAL	$ZIGLIB/std/os/linux.zig	/VIRTUAL = 1/;"	field
VIRTUAL_CIRCUIT_CLOSED	$ZIGLIB/std/os/windows/ntstatus.zig	/VIRTUAL_CIRCUIT_CLOSED = 0xC00000D6/;"	field
VIRT_FIRMWARE_ENABLED	$ZIGLIB/std/os/windows.zig	/VIRT_FIRMWARE_ENABLED = 21/;"	field
VIRUS_DELETED	$ZIGLIB/std/os/windows/win32error.zig	/VIRUS_DELETED = 226/;"	field
VIRUS_INFECTED	$ZIGLIB/std/os/windows/win32error.zig	/VIRUS_INFECTED = 225/;"	field
VISA	$ZIGLIB/std/c/freebsd.zig	/pub const VISA = 70/;"	constant
VMEM	$ZIGLIB/std/c/solaris.zig	/VMEM = 6/;"	field
VMS_rtnbeg_pd_address	$ZIGLIB/std/dwarf/AT.zig	/^pub const VMS_rtnbeg_pd_address = 0x2201/;"	constant
VMTP	$ZIGLIB/std/c/freebsd.zig	/pub const VMTP = 81/;"	constant
VM_BEHAVIOR_CAN_REUSE	$ZIGLIB/std/c/darwin.zig	/^pub const VM_BEHAVIOR_CAN_REUSE: vm_behavior_t = 10/;"	constant
VM_BEHAVIOR_DEFAULT	$ZIGLIB/std/c/darwin.zig	/^pub const VM_BEHAVIOR_DEFAULT: vm_behavior_t = 0/;"	constant
VM_BEHAVIOR_DONTNEED	$ZIGLIB/std/c/darwin.zig	/^pub const VM_BEHAVIOR_DONTNEED: vm_behavior_t = 5/;"	constant
VM_BEHAVIOR_FREE	$ZIGLIB/std/c/darwin.zig	/^pub const VM_BEHAVIOR_FREE: vm_behavior_t = 6/;"	constant
VM_BEHAVIOR_PAGEOUT	$ZIGLIB/std/c/darwin.zig	/^pub const VM_BEHAVIOR_PAGEOUT: vm_behavior_t = 11/;"	constant
VM_BEHAVIOR_RANDOM	$ZIGLIB/std/c/darwin.zig	/^pub const VM_BEHAVIOR_RANDOM: vm_behavior_t = 1/;"	constant
VM_BEHAVIOR_REUSABLE	$ZIGLIB/std/c/darwin.zig	/^pub const VM_BEHAVIOR_REUSABLE: vm_behavior_t = 8/;"	constant
VM_BEHAVIOR_REUSE	$ZIGLIB/std/c/darwin.zig	/^pub const VM_BEHAVIOR_REUSE: vm_behavior_t = 9/;"	constant
VM_BEHAVIOR_RSEQNTL	$ZIGLIB/std/c/darwin.zig	/^pub const VM_BEHAVIOR_RSEQNTL: vm_behavior_t = 3/;"	constant
VM_BEHAVIOR_SEQUENTIAL	$ZIGLIB/std/c/darwin.zig	/^pub const VM_BEHAVIOR_SEQUENTIAL: vm_behavior_t = 2/;"	constant
VM_BEHAVIOR_WILLNEED	$ZIGLIB/std/c/darwin.zig	/^pub const VM_BEHAVIOR_WILLNEED: vm_behavior_t = 4/;"	constant
VM_BEHAVIOR_ZERO_WIRED_PAGES	$ZIGLIB/std/c/darwin.zig	/^pub const VM_BEHAVIOR_ZERO_WIRED_PAGES: vm_behavior_t = 7/;"	constant
VM_INHERIT_COPY	$ZIGLIB/std/c/darwin.zig	/^pub const VM_INHERIT_COPY: vm_inherit_t = 1/;"	constant
VM_INHERIT_DEFAULT	$ZIGLIB/std/c/darwin.zig	/^pub const VM_INHERIT_DEFAULT = VM_INHERIT_COPY/;"	constant
VM_INHERIT_DONATE_COPY	$ZIGLIB/std/c/darwin.zig	/^pub const VM_INHERIT_DONATE_COPY: vm_inherit_t = 3/;"	constant
VM_INHERIT_NONE	$ZIGLIB/std/c/darwin.zig	/^pub const VM_INHERIT_NONE: vm_inherit_t = 2/;"	constant
VM_INHERIT_SHARE	$ZIGLIB/std/c/darwin.zig	/^pub const VM_INHERIT_SHARE: vm_inherit_t = 0/;"	constant
VM_REGION_BASIC_INFO_64	$ZIGLIB/std/c/darwin.zig	/^pub const VM_REGION_BASIC_INFO_64 = 9/;"	constant
VM_REGION_BASIC_INFO_COUNT	$ZIGLIB/std/c/darwin.zig	/^pub const VM_REGION_BASIC_INFO_COUNT: mach_msg_type_number_t = @sizeOf(vm_region_basic_info_64) \/ @sizeOf(c_int)/;"	constant
VM_REGION_EXTENDED_INFO	$ZIGLIB/std/c/darwin.zig	/^pub const VM_REGION_EXTENDED_INFO = 13/;"	constant
VM_REGION_EXTENDED_INFO_COUNT	$ZIGLIB/std/c/darwin.zig	/^pub const VM_REGION_EXTENDED_INFO_COUNT: mach_msg_type_number_t = @sizeOf(vm_region_extended_info) \/ @sizeOf(natural_t)/;"	constant
VM_REGION_SUBMAP_INFO_COUNT_64	$ZIGLIB/std/c/darwin.zig	/^pub const VM_REGION_SUBMAP_INFO_COUNT_64: mach_msg_type_number_t = @sizeOf(vm_region_submap_info_64) \/ @sizeOf(natural_t)/;"	constant
VM_REGION_SUBMAP_SHORT_INFO_COUNT_64	$ZIGLIB/std/c/darwin.zig	/^pub const VM_REGION_SUBMAP_SHORT_INFO_COUNT_64: mach_msg_type_number_t = @sizeOf(vm_region_submap_short_info_64) \/ @sizeOf(natural_t)/;"	constant
VM_REGION_TOP_INFO	$ZIGLIB/std/c/darwin.zig	/^pub const VM_REGION_TOP_INFO = 12/;"	constant
VM_REGION_TOP_INFO_COUNT	$ZIGLIB/std/c/darwin.zig	/^pub const VM_REGION_TOP_INFO_COUNT: mach_msg_type_number_t = @sizeOf(vm_region_top_info) \/ @sizeOf(natural_t)/;"	constant
VNODE	$ZIGLIB/std/c/dragonfly.zig	/pub const VNODE = 13/;"	constant
VOICEVIEW	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const VOICEVIEW = 18/;"	constant
VOID	$ZIGLIB/std/coff.zig	/VOID = 1/;"	field
VOLMGR_MIRROR_NOT_SUPPORTED	$ZIGLIB/std/os/windows/ntstatus.zig	/VOLMGR_MIRROR_NOT_SUPPORTED = 0xC038005B/;"	field
VOLMGR_RAID5_NOT_SUPPORTED	$ZIGLIB/std/os/windows/ntstatus.zig	/VOLMGR_RAID5_NOT_SUPPORTED = 0xC038005C/;"	field
VOLSNAP_HIBERNATE_READY	$ZIGLIB/std/os/windows/win32error.zig	/VOLSNAP_HIBERNATE_READY = 761/;"	field
VOLSNAP_PREPARE_HIBERNATE	$ZIGLIB/std/os/windows/win32error.zig	/VOLSNAP_PREPARE_HIBERNATE = 655/;"	field
VOLUME_DIRTY	$ZIGLIB/std/os/windows/ntstatus.zig	/VOLUME_DIRTY = 0xC0000806/;"	field
VOLUME_DISMOUNTED	$ZIGLIB/std/os/windows/ntstatus.zig	/VOLUME_DISMOUNTED = 0xC000026E/;"	field
VOLUME_MOUNTED	$ZIGLIB/std/os/windows/win32error.zig	/VOLUME_MOUNTED = 743/;"	field
VOLUME_NAME_DOS	$ZIGLIB/std/os/windows.zig	/^pub const VOLUME_NAME_DOS = 0x0/;"	constant
VOLUME_NAME_GUID	$ZIGLIB/std/os/windows.zig	/^pub const VOLUME_NAME_GUID = 0x1/;"	constant
VOLUME_NAME_NONE	$ZIGLIB/std/os/windows.zig	/^pub const VOLUME_NAME_NONE = 0x4/;"	constant
VOLUME_NAME_NT	$ZIGLIB/std/os/windows.zig	/^pub const VOLUME_NAME_NT = 0x2/;"	constant
VOLUME_NOT_UPGRADED	$ZIGLIB/std/os/windows/ntstatus.zig	/VOLUME_NOT_UPGRADED = 0xC000029C/;"	field
VPAGETABLE	$ZIGLIB/std/c/dragonfly.zig	/pub const VPAGETABLE = 8192/;"	constant
VPP500	$ZIGLIB/std/elf.zig	/VPP500 = 17/;"	field
VRRP	$ZIGLIB/std/c/solaris.zig	/pub const VRRP = 0x1017/;"	constant
VSOCK	$ZIGLIB/std/os/linux.zig	/pub const VSOCK = 40/;"	constant
VTALRM	$ZIGLIB/std/os/linux.zig	/pub const VTALRM = 26/;"	constant
VTDLY	$ZIGLIB/std/os/linux.zig	/^pub const VTDLY: tcflag_t = 16384/;"	constant
VTable	$ZIGLIB/std/mem/Allocator.zig	/^pub const VTable = struct {$/;"	struct
VaList	$ZIGLIB/std/builtin.zig	/^pub const VaList = switch (builtin.cpu.arch) {$/;"	constant
VaListAarch64	$ZIGLIB/std/builtin.zig	/^pub const VaListAarch64 = extern struct {$/;"	struct
VaListHexagon	$ZIGLIB/std/builtin.zig	/^pub const VaListHexagon = extern struct {$/;"	struct
VaListPowerPc	$ZIGLIB/std/builtin.zig	/^pub const VaListPowerPc = extern struct {$/;"	struct
VaListS390x	$ZIGLIB/std/builtin.zig	/^pub const VaListS390x = extern struct {$/;"	struct
VaListX86_64	$ZIGLIB/std/builtin.zig	/^pub const VaListX86_64 = extern struct {$/;"	struct
ValidationAllocator	$ZIGLIB/std/mem.zig	/^pub fn ValidationAllocator(comptime T: type) type {$/;"	function
ValidationWriter	$ZIGLIB/std/json.zig	/const ValidationWriter = struct {$/;"	struct
Validity	$ZIGLIB/std/crypto/Certificate.zig	/pub const Validity = struct {$/;"	struct
Valtype	$ZIGLIB/std/wasm.zig	/^pub const Valtype = enum(u8) {$/;"	enum
Value	$ZIGLIB/std/json/write_stream.zig	/Value/;"	field
ValueBegin	$ZIGLIB/std/json.zig	/ValueBegin/;"	field
ValueBeginNoClosing	$ZIGLIB/std/json.zig	/ValueBeginNoClosing/;"	field
ValueEnd	$ZIGLIB/std/json.zig	/ValueEnd = 1/;"	field
ValueIterator	$ZIGLIB/std/hash_map.zig	/pub const ValueIterator = FieldIterator(V)/;"	constant
ValueTree	$ZIGLIB/std/json.zig	/^pub const ValueTree = struct {$/;"	struct
VarDecl	$ZIGLIB/std/zig/Ast.zig	/pub const VarDecl = struct {$/;"	struct
VarLinkage	$ZIGLIB/std/os/linux/bpf/btf.zig	/^pub const VarLinkage = enum {$/;"	enum
VarSecInfo	$ZIGLIB/std/os/linux/bpf/btf.zig	/^pub const VarSecInfo = extern struct {$/;"	struct
VariableLengthArrayINTEL	$ZIGLIB/std/target/spirv.zig	/VariableLengthArrayINTEL/;"	field
VariablePointers	$ZIGLIB/std/target/spirv.zig	/VariablePointers/;"	field
VariablePointersStorageBuffer	$ZIGLIB/std/target/spirv.zig	/VariablePointersStorageBuffer/;"	field
VariantI	$ZIGLIB/std/os/linux/tls.zig	/VariantI/;"	field
VariantII	$ZIGLIB/std/os/linux/tls.zig	/VariantII/;"	field
VcpkgLinkage	$ZIGLIB/std/zig/CrossTarget.zig	/^pub const VcpkgLinkage = std.builtin.LinkMode/;"	constant
VcpkgRoot	$ZIGLIB/std/Build.zig	/^pub const VcpkgRoot = union(VcpkgRootStatus) {$/;"	union
VcpkgRootStatus	$ZIGLIB/std/Build.zig	/^pub const VcpkgRootStatus = enum {$/;"	enum
Vec2	$ZIGLIB/std/fmt.zig	/const Vec2 = struct {$/;"	struct
Vec2D	$ZIGLIB/std/compress/lzma/vec2d.zig	/^pub fn Vec2D(comptime T: type) type {$/;"	function
VecPut	$ZIGLIB/std/crypto/tls/Client.zig	/^const VecPut = struct {$/;"	struct
VecType	$ZIGLIB/std/simd.zig	/const VecType = @TypeOf(vecs[0])/;"	constant
Vector	$ZIGLIB/std/meta.zig	/^pub fn Vector(comptime len: u32, comptime child: type) type {$/;"	function
Vector16	$ZIGLIB/std/target/spirv.zig	/Vector16/;"	field
Vector2	$ZIGLIB/std/meta/trait.zig	/const Vector2 = struct {$/;"	struct
VectorAnyINTEL	$ZIGLIB/std/target/spirv.zig	/VectorAnyINTEL/;"	field
VectorComputeINTEL	$ZIGLIB/std/target/spirv.zig	/VectorComputeINTEL/;"	field
VectorControl	$ZIGLIB/std/os/windows.zig	/VectorControl: DWORD64/;"	field
VectorCount	$ZIGLIB/std/simd.zig	/^pub fn VectorCount(comptime VectorType: type) type {$/;"	function
VectorIndex	$ZIGLIB/std/simd.zig	/^pub fn VectorIndex(comptime VectorType: type) type {$/;"	function
VectorRegister	$ZIGLIB/std/os/windows.zig	/VectorRegister: [26]M128A/;"	field
Vectorcall	$ZIGLIB/std/builtin.zig	/Vectorcall/;"	field
Vendor	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/Vendor: *const VendorDevicePath/;"	field
VendorDefinedDevicePath	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/pub const VendorDefinedDevicePath = extern struct {$/;"	struct
VendorDevicePath	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/pub const VendorDevicePath = extern struct {$/;"	struct
Ver60	$ZIGLIB/std/pdb.zig	/Ver60 = 0xeffe0000 + 19970605/;"	field
Verdaux	$ZIGLIB/std/elf.zig	/^pub const Verdaux = switch (@sizeOf(usize)) {$/;"	constant
Verdef	$ZIGLIB/std/elf.zig	/^pub const Verdef = switch (@sizeOf(usize)) {$/;"	constant
Verifier	$ZIGLIB/std/crypto/ecdsa.zig	/pub const Verifier = struct {$/;"	struct
VerifyError	$ZIGLIB/std/crypto/Certificate/Bundle.zig	/^pub const VerifyError = Certificate.Parsed.VerifyError || error{$/;"	constant
VerifyHostNameError	$ZIGLIB/std/crypto/Certificate.zig	/pub const VerifyHostNameError = error{$/;"	constant
VerifyOptions	$ZIGLIB/std/crypto/scrypt.zig	/^pub const VerifyOptions = struct {$/;"	struct
Version	$ZIGLIB/std/os/windows.zig	/Version: DWORD/;"	field
VersionHeader	$ZIGLIB/std/pdb.zig	/VersionHeader: u32/;"	field
VersionRange	$ZIGLIB/std/target.zig	/pub const VersionRange = union {$/;"	union
VersionSignature	$ZIGLIB/std/pdb.zig	/VersionSignature: i32/;"	field
VexInitForIri	$ZIGLIB/std/valgrind.zig	/VexInitForIri = 6401/;"	field
VirtualAlloc	$ZIGLIB/std/os/windows.zig	/^pub fn VirtualAlloc(addr: ?LPVOID, size: usize, alloc_type: DWORD, flProtect: DWORD) VirtualAllocError!LPVOID {$/;"	function
VirtualAllocError	$ZIGLIB/std/os/windows.zig	/^pub const VirtualAllocError = error{Unexpected}/;"	constant
VirtualFree	$ZIGLIB/std/os/windows.zig	/^pub fn VirtualFree(lpAddress: ?LPVOID, dwSize: usize, dwFreeType: DWORD) void {$/;"	function
VirtualProtect	$ZIGLIB/std/os/windows.zig	/^pub fn VirtualProtect(lpAddress: ?LPVOID, dwSize: SIZE_T, flNewProtect: DWORD, lpflOldProtect: *DWORD) VirtualProtectError!void {$/;"	function
VirtualProtectError	$ZIGLIB/std/os/windows.zig	/^pub const VirtualProtectError = error{$/;"	constant
VirtualQuery	$ZIGLIB/std/os/windows.zig	/^pub fn VirtualQuery(lpAddress: ?LPVOID, lpBuffer: PMEMORY_BASIC_INFORMATION, dwLength: SIZE_T) VirtualQueryError!SIZE_T {$/;"	function
VirtualQueryError	$ZIGLIB/std/os/windows.zig	/^pub const VirtualQueryError = error{Unexpected}/;"	constant
VirtualizationFlags	$ZIGLIB/std/os/windows.zig	/VirtualizationFlags: UCHAR/;"	field
Vlan	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/Vlan: *const VlanDevicePath/;"	field
VlanDevicePath	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/pub const VlanDevicePath = extern struct {$/;"	struct
Void	$ZIGLIB/std/builtin.zig	/Void: void/;"	field
VolumeCorrupted	$ZIGLIB/std/os/uefi/status.zig	/VolumeCorrupted = high_bit | 10/;"	field
VolumeFull	$ZIGLIB/std/os/uefi/status.zig	/VolumeFull = high_bit | 11/;"	field
VulkanMemoryModel	$ZIGLIB/std/target/spirv.zig	/VulkanMemoryModel/;"	field
VulkanMemoryModelDeviceScope	$ZIGLIB/std/target/spirv.zig	/VulkanMemoryModelDeviceScope/;"	field
VulkanMemoryModelDeviceScopeKHR	$ZIGLIB/std/target/spirv.zig	/VulkanMemoryModelDeviceScopeKHR/;"	field
VulkanMemoryModelKHR	$ZIGLIB/std/target/spirv.zig	/VulkanMemoryModelKHR/;"	field
WAIT	$ZIGLIB/std/os/linux.zig	/pub const WAIT = 0/;"	constant
WAITALL	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const WAITALL = 8/;"	constant
WAITFORONE	$ZIGLIB/std/os/linux.zig	/pub const WAITFORONE = 0x10000/;"	constant
WAITING	$ZIGLIB/std/c/solaris.zig	/pub const WAITING = 32/;"	constant
WAIT_0	$ZIGLIB/std/os/windows/ntstatus.zig	/pub const WAIT_0: NTSTATUS = .SUCCESS/;"	constant
WAIT_1	$ZIGLIB/std/os/windows/win32error.zig	/WAIT_1 = 731/;"	field
WAIT_2	$ZIGLIB/std/os/windows/win32error.zig	/WAIT_2 = 732/;"	field
WAIT_3	$ZIGLIB/std/os/windows/win32error.zig	/WAIT_3 = 733/;"	field
WAIT_63	$ZIGLIB/std/os/windows/win32error.zig	/WAIT_63 = 734/;"	field
WAIT_ABANDONED	$ZIGLIB/std/os/windows.zig	/^pub const WAIT_ABANDONED = 0x00000080/;"	constant
WAIT_ABANDONED_0	$ZIGLIB/std/os/windows.zig	/^pub const WAIT_ABANDONED_0 = WAIT_ABANDONED + 0/;"	constant
WAIT_BITSET	$ZIGLIB/std/os/linux.zig	/pub const WAIT_BITSET = 9/;"	constant
WAIT_FAILED	$ZIGLIB/std/os/windows.zig	/^pub const WAIT_FAILED = 0xFFFFFFFF/;"	constant
WAIT_FOR_OPLOCK	$ZIGLIB/std/os/windows/win32error.zig	/WAIT_FOR_OPLOCK = 765/;"	field
WAIT_NO_CHILDREN	$ZIGLIB/std/os/windows/win32error.zig	/WAIT_NO_CHILDREN = 128/;"	field
WAIT_OBJECT_0	$ZIGLIB/std/os/windows.zig	/^pub const WAIT_OBJECT_0 = 0x00000000/;"	constant
WAIT_REQUEUE_PI	$ZIGLIB/std/os/linux.zig	/pub const WAIT_REQUEUE_PI = 11/;"	constant
WAIT_TIMEOUT	$ZIGLIB/std/os/windows.zig	/^pub const WAIT_TIMEOUT = 0x00000102/;"	constant
WAIT_UINT	$ZIGLIB/std/c/freebsd.zig	/WAIT_UINT = 11/;"	field
WAIT_UINT_PRIVATE	$ZIGLIB/std/c/freebsd.zig	/WAIT_UINT_PRIVATE = 15/;"	field
WAKE	$ZIGLIB/std/os/linux.zig	/pub const WAKE = 1/;"	constant
WAKEUP	$ZIGLIB/std/os/linux.zig	/pub const WAKEUP = (@as(u32, 1) << 29)/;"	constant
WAKE_ALARM	$ZIGLIB/std/os/linux.zig	/pub const WAKE_ALARM = 35/;"	constant
WAKE_BITSET	$ZIGLIB/std/os/linux.zig	/pub const WAKE_BITSET = 10/;"	constant
WAKE_OP	$ZIGLIB/std/os/linux.zig	/pub const WAKE_OP = 5/;"	constant
WAKE_PRIVATE	$ZIGLIB/std/c/freebsd.zig	/WAKE_PRIVATE = 16/;"	field
WAKE_SYSTEM	$ZIGLIB/std/os/windows/win32error.zig	/WAKE_SYSTEM = 730/;"	field
WAKE_SYSTEM_DEBUGGER	$ZIGLIB/std/os/windows/win32error.zig	/WAKE_SYSTEM_DEBUGGER = 675/;"	field
WANPIPE	$ZIGLIB/std/os/linux.zig	/pub const WANPIPE = 25/;"	constant
WARNING	$ZIGLIB/std/os.zig	/pub const WARNING = 4/;"	constant
WASM_global	$ZIGLIB/std/dwarf/OP.zig	/^pub const WASM_global = 0x01/;"	constant
WASM_global_u32	$ZIGLIB/std/dwarf/OP.zig	/^pub const WASM_global_u32 = 0x03/;"	constant
WASM_local	$ZIGLIB/std/dwarf/OP.zig	/^pub const WASM_local = 0x00/;"	constant
WASM_location	$ZIGLIB/std/dwarf/OP.zig	/^pub const WASM_location = 0xed/;"	constant
WASM_operand_stack	$ZIGLIB/std/dwarf/OP.zig	/^pub const WASM_operand_stack = 0x02/;"	constant
WAS_LOCKED	$ZIGLIB/std/os/windows/win32error.zig	/WAS_LOCKED = 717/;"	field
WAS_UNLOCKED	$ZIGLIB/std/os/windows/win32error.zig	/WAS_UNLOCKED = 715/;"	field
WATCHDOG	$ZIGLIB/std/c/openbsd.zig	/pub const WATCHDOG = 64/;"	constant
WATCHOS	$ZIGLIB/std/macho.zig	/WATCHOS = 0x4/;"	field
WATCHOSSIMULATOR	$ZIGLIB/std/macho.zig	/WATCHOSSIMULATOR = 0x9/;"	field
WBEXPAK	$ZIGLIB/std/c/freebsd.zig	/pub const WBEXPAK = 79/;"	constant
WBMON	$ZIGLIB/std/c/freebsd.zig	/pub const WBMON = 78/;"	constant
WCEMIPSV2	$ZIGLIB/std/coff.zig	/WCEMIPSV2 = 0x169/;"	field
WCE_AF_IRDA	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const WCE_AF_IRDA = 22/;"	constant
WCHAR	$ZIGLIB/std/os/windows.zig	/^pub const WCHAR = u16/;"	constant
WDM_DRIVER	$ZIGLIB/std/coff.zig	/WDM_DRIVER: u1 = 0/;"	field
WEAK_EXTERNAL	$ZIGLIB/std/coff.zig	/WEAK_EXTERNAL = 105/;"	field
WEIGHT	$ZIGLIB/std/os/linux.zig	/pub const WEIGHT = 16384/;"	constant
WELSH	$ZIGLIB/std/os/windows/lang.zig	/^pub const WELSH = 0x52/;"	constant
WELSH_UNITED_KINGDOM	$ZIGLIB/std/os/windows/sublang.zig	/^pub const WELSH_UNITED_KINGDOM = 0x01/;"	constant
WERASE	$ZIGLIB/std/os/linux.zig	/pub const WERASE = 14/;"	constant
WIFI_STATUS	$ZIGLIB/std/os/linux.zig	/pub const WIFI_STATUS = 41/;"	constant
WILLNEED	$ZIGLIB/std/os/linux.zig	/pub const WILLNEED = 3/;"	constant
WIN32_FIND_DATAW	$ZIGLIB/std/os/windows.zig	/^pub const WIN32_FIND_DATAW = extern struct {$/;"	struct
WINAPI	$ZIGLIB/std/os/windows.zig	/^pub const WINAPI: std.builtin.CallingConvention = if (native_arch == .x86)$/;"	constant
WINCH	$ZIGLIB/std/os/linux.zig	/pub const WINCH = 28/;"	constant
WINDOWS_AF_IRDA	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const WINDOWS_AF_IRDA = 26/;"	constant
WINDOWS_BOOT_APPLICATION	$ZIGLIB/std/coff.zig	/WINDOWS_BOOT_APPLICATION = 16/;"	field
WINDOWS_CE_GUI	$ZIGLIB/std/coff.zig	/WINDOWS_CE_GUI = 9/;"	field
WINDOWS_CUI	$ZIGLIB/std/coff.zig	/WINDOWS_CUI = 3/;"	field
WINDOWS_GUI	$ZIGLIB/std/coff.zig	/WINDOWS_GUI = 2/;"	field
WINDOW_CLAMP	$ZIGLIB/std/os/linux.zig	/pub const WINDOW_CLAMP = 10/;"	constant
WINDOW_NOT_COMBOBOX	$ZIGLIB/std/os/windows/win32error.zig	/WINDOW_NOT_COMBOBOX = 1423/;"	field
WINDOW_NOT_DIALOG	$ZIGLIB/std/os/windows/win32error.zig	/WINDOW_NOT_DIALOG = 1420/;"	field
WINDOW_OF_OTHER_THREAD	$ZIGLIB/std/os/windows/win32error.zig	/WINDOW_OF_OTHER_THREAD = 1408/;"	field
WIPEONFORK	$ZIGLIB/std/os/linux.zig	/pub const WIPEONFORK = 18/;"	constant
WIRED	$ZIGLIB/std/c/netbsd.zig	/pub const WIRED = 0x0800/;"	constant
WIRELESS	$ZIGLIB/std/os/linux.zig	/WIRELESS/;"	field
WITHSCOPEID	$ZIGLIB/std/c/solaris.zig	/pub const WITHSCOPEID = 0x0020/;"	constant
WITNESS	$ZIGLIB/std/c/openbsd.zig	/pub const WITNESS = 60/;"	constant
WITNESSWATCH	$ZIGLIB/std/c/openbsd.zig	/pub const WITNESSWATCH = 53/;"	constant
WIZ_NEXT	$ZIGLIB/std/os/windows/user32.zig	/^pub const WIZ_NEXT = 0x040B/;"	constant
WIZ_PREV	$ZIGLIB/std/os/windows/user32.zig	/^pub const WIZ_PREV = 0x040C/;"	constant
WIZ_QUERYNUMPAGES	$ZIGLIB/std/os/windows/user32.zig	/^pub const WIZ_QUERYNUMPAGES = 0x040A/;"	constant
WLX_WM_SAS	$ZIGLIB/std/os/windows/user32.zig	/^pub const WLX_WM_SAS = 0x0659/;"	constant
WL_CONTAINER_OF	$ZIGLIB/std/zig/c_translation.zig	/pub fn WL_CONTAINER_OF(ptr: anytype, sample: anytype, comptime member: []const u8) @TypeOf(sample) {$/;"	function
WMI_ALREADY_DISABLED	$ZIGLIB/std/os/windows/ntstatus.zig	/WMI_ALREADY_DISABLED = 0xC0000302/;"	field
WMI_ALREADY_ENABLED	$ZIGLIB/std/os/windows/ntstatus.zig	/WMI_ALREADY_ENABLED = 0xC0000303/;"	field
WMI_GUID_DISCONNECTED	$ZIGLIB/std/os/windows/ntstatus.zig	/WMI_GUID_DISCONNECTED = 0xC0000301/;"	field
WMI_GUID_NOT_FOUND	$ZIGLIB/std/os/windows/ntstatus.zig	/WMI_GUID_NOT_FOUND = 0xC0000295/;"	field
WMI_INSTANCE_NOT_FOUND	$ZIGLIB/std/os/windows/ntstatus.zig	/WMI_INSTANCE_NOT_FOUND = 0xC0000296/;"	field
WMI_ITEMID_NOT_FOUND	$ZIGLIB/std/os/windows/ntstatus.zig	/WMI_ITEMID_NOT_FOUND = 0xC0000297/;"	field
WMI_NOT_SUPPORTED	$ZIGLIB/std/os/windows/ntstatus.zig	/WMI_NOT_SUPPORTED = 0xC00002DD/;"	field
WMI_READ_ONLY	$ZIGLIB/std/os/windows/ntstatus.zig	/WMI_READ_ONLY = 0xC00002C6/;"	field
WMI_SET_FAILURE	$ZIGLIB/std/os/windows/ntstatus.zig	/WMI_SET_FAILURE = 0xC00002C7/;"	field
WMI_TRY_AGAIN	$ZIGLIB/std/os/windows/ntstatus.zig	/WMI_TRY_AGAIN = 0xC0000298/;"	field
WM_ACTIVATE	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_ACTIVATE = 0x0006/;"	constant
WM_ACTIVATEAPP	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_ACTIVATEAPP = 0x001C/;"	constant
WM_APP	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_APP = 0x8000/;"	constant
WM_APPCOMMAND	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_APPCOMMAND = 0x0319/;"	constant
WM_ASKCBFORMATNAME	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_ASKCBFORMATNAME = 0x030C/;"	constant
WM_CANCELJOURNAL	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_CANCELJOURNAL = 0x004B/;"	constant
WM_CANCELMODE	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_CANCELMODE = 0x001F/;"	constant
WM_CAPTURECHANGED	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_CAPTURECHANGED = 0x0215/;"	constant
WM_CAP_DRIVER_GET_NAMEW	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_CAP_DRIVER_GET_NAMEW = 0x0470/;"	constant
WM_CAP_DRIVER_GET_VERSIONW	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_CAP_DRIVER_GET_VERSIONW = 0x0471/;"	constant
WM_CAP_FILE_GET_CAPTURE_FILEW	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_CAP_FILE_GET_CAPTURE_FILEW = 0x0479/;"	constant
WM_CAP_FILE_SAVEASW	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_CAP_FILE_SAVEASW = 0x047B/;"	constant
WM_CAP_FILE_SAVEDIBW	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_CAP_FILE_SAVEDIBW = 0x047D/;"	constant
WM_CAP_FILE_SET_CAPTURE_FILEW	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_CAP_FILE_SET_CAPTURE_FILEW = 0x0478/;"	constant
WM_CAP_GET_MCI_DEVICEW	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_CAP_GET_MCI_DEVICEW = 0x04A7/;"	constant
WM_CAP_PAL_OPENW	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_CAP_PAL_OPENW = 0x04B4/;"	constant
WM_CAP_PAL_SAVEW	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_CAP_PAL_SAVEW = 0x04B5/;"	constant
WM_CAP_SET_CALLBACK_ERRORW	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_CAP_SET_CALLBACK_ERRORW = 0x0466/;"	constant
WM_CAP_SET_CALLBACK_STATUSW	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_CAP_SET_CALLBACK_STATUSW = 0x0467/;"	constant
WM_CAP_SET_MCI_DEVICEW	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_CAP_SET_MCI_DEVICEW = 0x04A6/;"	constant
WM_CAP_UNICODE_START	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_CAP_UNICODE_START = 0x0464/;"	constant
WM_CARET_BLINK	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_CARET_BLINK = 0x03E2/;"	constant
WM_CARET_CREATE	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_CARET_CREATE = 0x03E0/;"	constant
WM_CARET_DESTROY	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_CARET_DESTROY = 0x03E1/;"	constant
WM_CHANGECBCHAIN	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_CHANGECBCHAIN = 0x030D/;"	constant
WM_CHANGEUISTATE	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_CHANGEUISTATE = 0x0127/;"	constant
WM_CHAR	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_CHAR = 0x0102/;"	constant
WM_CHARTOITEM	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_CHARTOITEM = 0x002F/;"	constant
WM_CHILDACTIVATE	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_CHILDACTIVATE = 0x0022/;"	constant
WM_CHOOSEFONT_GETLOGFONT	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_CHOOSEFONT_GETLOGFONT = 0x0401/;"	constant
WM_CHOOSEFONT_SETFLAGS	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_CHOOSEFONT_SETFLAGS = 0x0466/;"	constant
WM_CHOOSEFONT_SETLOGFONT	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_CHOOSEFONT_SETLOGFONT = 0x0465/;"	constant
WM_CLEAR	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_CLEAR = 0x0303/;"	constant
WM_CLOSE	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_CLOSE = 0x0010/;"	constant
WM_COMMAND	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_COMMAND = 0x0111/;"	constant
WM_COMMNOTIFY	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_COMMNOTIFY = 0x0044/;"	constant
WM_COMPACTING	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_COMPACTING = 0x0041/;"	constant
WM_COMPAREITEM	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_COMPAREITEM = 0x0039/;"	constant
WM_CONTEXTMENU	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_CONTEXTMENU = 0x007B/;"	constant
WM_CONVERTREQUEST	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_CONVERTREQUEST = 0x010A/;"	constant
WM_CONVERTRESULT	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_CONVERTRESULT = 0x010B/;"	constant
WM_COPY	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_COPY = 0x0301/;"	constant
WM_COPYDATA	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_COPYDATA = 0x004A/;"	constant
WM_COPYGLOBALDATA	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_COPYGLOBALDATA = 0x0049/;"	constant
WM_CPL_LAUNCH	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_CPL_LAUNCH = 0x07E8/;"	constant
WM_CPL_LAUNCHED	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_CPL_LAUNCHED = 0x07E9/;"	constant
WM_CREATE	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_CREATE = 0x0001/;"	constant
WM_CTLCOLOR	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_CTLCOLOR = 0x0019/;"	constant
WM_CTLCOLORBTN	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_CTLCOLORBTN = 0x0135/;"	constant
WM_CTLCOLORDLG	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_CTLCOLORDLG = 0x0136/;"	constant
WM_CTLCOLOREDIT	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_CTLCOLOREDIT = 0x0133/;"	constant
WM_CTLCOLORLISTBOX	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_CTLCOLORLISTBOX = 0x0134/;"	constant
WM_CTLCOLORMSGBOX	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_CTLCOLORMSGBOX = 0x0132/;"	constant
WM_CTLCOLORSCROLLBAR	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_CTLCOLORSCROLLBAR = 0x0137/;"	constant
WM_CTLCOLORSTATIC	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_CTLCOLORSTATIC = 0x0138/;"	constant
WM_CTLINIT	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_CTLINIT = 0x0387/;"	constant
WM_CUT	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_CUT = 0x0300/;"	constant
WM_DEADCHAR	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_DEADCHAR = 0x0103/;"	constant
WM_DELETEITEM	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_DELETEITEM = 0x002D/;"	constant
WM_DESTROY	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_DESTROY = 0x0002/;"	constant
WM_DESTROYCLIPBOARD	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_DESTROYCLIPBOARD = 0x0307/;"	constant
WM_DEVICECHANGE	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_DEVICECHANGE = 0x0219/;"	constant
WM_DEVMODECHANGE	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_DEVMODECHANGE = 0x001B/;"	constant
WM_DISPLAYCHANGE	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_DISPLAYCHANGE = 0x007E/;"	constant
WM_DRAWCLIPBOARD	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_DRAWCLIPBOARD = 0x0308/;"	constant
WM_DRAWITEM	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_DRAWITEM = 0x002B/;"	constant
WM_DROPFILES	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_DROPFILES = 0x0233/;"	constant
WM_ENABLE	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_ENABLE = 0x000A/;"	constant
WM_ENDSESSION	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_ENDSESSION = 0x0016/;"	constant
WM_ENTERIDLE	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_ENTERIDLE = 0x0121/;"	constant
WM_ENTERMENULOOP	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_ENTERMENULOOP = 0x0211/;"	constant
WM_ENTERSIZEMOVE	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_ENTERSIZEMOVE = 0x0231/;"	constant
WM_ERASEBKGND	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_ERASEBKGND = 0x0014/;"	constant
WM_EXITMENULOOP	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_EXITMENULOOP = 0x0212/;"	constant
WM_EXITSIZEMOVE	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_EXITSIZEMOVE = 0x0232/;"	constant
WM_FDEXCEPT	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_FDEXCEPT = 0x03F2/;"	constant
WM_FDINPUT	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_FDINPUT = 0x03F0/;"	constant
WM_FDOUTPUT	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_FDOUTPUT = 0x03F1/;"	constant
WM_FONTCHANGE	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_FONTCHANGE = 0x001D/;"	constant
WM_GETDLGCODE	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_GETDLGCODE = 0x0087/;"	constant
WM_GETFONT	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_GETFONT = 0x0031/;"	constant
WM_GETHOTKEY	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_GETHOTKEY = 0x0033/;"	constant
WM_GETICON	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_GETICON = 0x007F/;"	constant
WM_GETMINMAXINFO	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_GETMINMAXINFO = 0x0024/;"	constant
WM_GETOBJECT	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_GETOBJECT = 0x003D/;"	constant
WM_GETTEXT	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_GETTEXT = 0x000D/;"	constant
WM_GETTEXTLENGTH	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_GETTEXTLENGTH = 0x000E/;"	constant
WM_GLOBALRCCHANGE	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_GLOBALRCCHANGE = 0x0383/;"	constant
WM_HEDITCTL	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_HEDITCTL = 0x0385/;"	constant
WM_HELP	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_HELP = 0x0053/;"	constant
WM_HOOKRCRESULT	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_HOOKRCRESULT = 0x0382/;"	constant
WM_HOTKEY	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_HOTKEY = 0x0312/;"	constant
WM_HSCROLL	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_HSCROLL = 0x0114/;"	constant
WM_HSCROLLCLIPBOARD	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_HSCROLLCLIPBOARD = 0x030E/;"	constant
WM_ICONERASEBKGND	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_ICONERASEBKGND = 0x0027/;"	constant
WM_IMEKEYDOWN	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_IMEKEYDOWN = 0x0290/;"	constant
WM_IMEKEYUP	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_IMEKEYUP = 0x0291/;"	constant
WM_IME_CHAR	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_IME_CHAR = 0x0286/;"	constant
WM_IME_COMPOSITION	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_IME_COMPOSITION = 0x010F/;"	constant
WM_IME_COMPOSITIONFULL	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_IME_COMPOSITIONFULL = 0x0284/;"	constant
WM_IME_CONTROL	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_IME_CONTROL = 0x0283/;"	constant
WM_IME_ENDCOMPOSITION	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_IME_ENDCOMPOSITION = 0x010E/;"	constant
WM_IME_KEYDOWN	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_IME_KEYDOWN = 0x0290/;"	constant
WM_IME_KEYUP	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_IME_KEYUP = 0x0291/;"	constant
WM_IME_NOTIFY	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_IME_NOTIFY = 0x0282/;"	constant
WM_IME_REPORT	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_IME_REPORT = 0x0280/;"	constant
WM_IME_REQUEST	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_IME_REQUEST = 0x0288/;"	constant
WM_IME_SELECT	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_IME_SELECT = 0x0285/;"	constant
WM_IME_SETCONTEXT	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_IME_SETCONTEXT = 0x0281/;"	constant
WM_IME_STARTCOMPOSITION	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_IME_STARTCOMPOSITION = 0x010D/;"	constant
WM_INITDIALOG	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_INITDIALOG = 0x0110/;"	constant
WM_INITMENU	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_INITMENU = 0x0116/;"	constant
WM_INITMENUPOPUP	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_INITMENUPOPUP = 0x0117/;"	constant
WM_INPUT	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_INPUT = 0x00FF/;"	constant
WM_INPUTLANGCHANGE	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_INPUTLANGCHANGE = 0x0051/;"	constant
WM_INPUTLANGCHANGEREQUEST	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_INPUTLANGCHANGEREQUEST = 0x0050/;"	constant
WM_INTERIM	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_INTERIM = 0x010C/;"	constant
WM_KEYDOWN	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_KEYDOWN = 0x0100/;"	constant
WM_KEYUP	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_KEYUP = 0x0101/;"	constant
WM_KILLFOCUS	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_KILLFOCUS = 0x0008/;"	constant
WM_LBUTTONDBLCLK	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_LBUTTONDBLCLK = 0x0203/;"	constant
WM_LBUTTONDOWN	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_LBUTTONDOWN = 0x0201/;"	constant
WM_LBUTTONUP	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_LBUTTONUP = 0x0202/;"	constant
WM_MBUTTONDBLCLK	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_MBUTTONDBLCLK = 0x0209/;"	constant
WM_MBUTTONDOWN	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_MBUTTONDOWN = 0x0207/;"	constant
WM_MBUTTONUP	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_MBUTTONUP = 0x0208/;"	constant
WM_MDIACTIVATE	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_MDIACTIVATE = 0x0222/;"	constant
WM_MDICASCADE	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_MDICASCADE = 0x0227/;"	constant
WM_MDICREATE	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_MDICREATE = 0x0220/;"	constant
WM_MDIDESTROY	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_MDIDESTROY = 0x0221/;"	constant
WM_MDIGETACTIVE	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_MDIGETACTIVE = 0x0229/;"	constant
WM_MDIICONARRANGE	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_MDIICONARRANGE = 0x0228/;"	constant
WM_MDIMAXIMIZE	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_MDIMAXIMIZE = 0x0225/;"	constant
WM_MDINEXT	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_MDINEXT = 0x0224/;"	constant
WM_MDIREFRESHMENU	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_MDIREFRESHMENU = 0x0234/;"	constant
WM_MDIRESTORE	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_MDIRESTORE = 0x0223/;"	constant
WM_MDISETMENU	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_MDISETMENU = 0x0230/;"	constant
WM_MDITILE	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_MDITILE = 0x0226/;"	constant
WM_MEASUREITEM	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_MEASUREITEM = 0x002C/;"	constant
WM_MENUCHAR	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_MENUCHAR = 0x0120/;"	constant
WM_MENUCOMMAND	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_MENUCOMMAND = 0x0126/;"	constant
WM_MENUDRAG	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_MENUDRAG = 0x0123/;"	constant
WM_MENUGETOBJECT	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_MENUGETOBJECT = 0x0124/;"	constant
WM_MENURBUTTONUP	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_MENURBUTTONUP = 0x0122/;"	constant
WM_MENUSELECT	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_MENUSELECT = 0x011F/;"	constant
WM_MOUSEACTIVATE	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_MOUSEACTIVATE = 0x0021/;"	constant
WM_MOUSEHOVER	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_MOUSEHOVER = 0x02A1/;"	constant
WM_MOUSEHWHEEL	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_MOUSEHWHEEL = 0x020E/;"	constant
WM_MOUSELEAVE	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_MOUSELEAVE = 0x02A3/;"	constant
WM_MOUSEMOVE	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_MOUSEMOVE = 0x0200/;"	constant
WM_MOUSEWHEEL	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_MOUSEWHEEL = 0x020A/;"	constant
WM_MOVE	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_MOVE = 0x0003/;"	constant
WM_MOVING	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_MOVING = 0x0216/;"	constant
WM_NCACTIVATE	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_NCACTIVATE = 0x0086/;"	constant
WM_NCCALCSIZE	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_NCCALCSIZE = 0x0083/;"	constant
WM_NCCREATE	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_NCCREATE = 0x0081/;"	constant
WM_NCDESTROY	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_NCDESTROY = 0x0082/;"	constant
WM_NCHITTEST	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_NCHITTEST = 0x0084/;"	constant
WM_NCLBUTTONDBLCLK	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_NCLBUTTONDBLCLK = 0x00A3/;"	constant
WM_NCLBUTTONDOWN	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_NCLBUTTONDOWN = 0x00A1/;"	constant
WM_NCLBUTTONUP	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_NCLBUTTONUP = 0x00A2/;"	constant
WM_NCMBUTTONDBLCLK	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_NCMBUTTONDBLCLK = 0x00A9/;"	constant
WM_NCMBUTTONDOWN	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_NCMBUTTONDOWN = 0x00A7/;"	constant
WM_NCMBUTTONUP	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_NCMBUTTONUP = 0x00A8/;"	constant
WM_NCMOUSEHOVER	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_NCMOUSEHOVER = 0x02A0/;"	constant
WM_NCMOUSELEAVE	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_NCMOUSELEAVE = 0x02A2/;"	constant
WM_NCMOUSEMOVE	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_NCMOUSEMOVE = 0x00A0/;"	constant
WM_NCPAINT	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_NCPAINT = 0x0085/;"	constant
WM_NCRBUTTONDBLCLK	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_NCRBUTTONDBLCLK = 0x00A6/;"	constant
WM_NCRBUTTONDOWN	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_NCRBUTTONDOWN = 0x00A4/;"	constant
WM_NCRBUTTONUP	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_NCRBUTTONUP = 0x00A5/;"	constant
WM_NCXBUTTONDBLCLK	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_NCXBUTTONDBLCLK = 0x00AD/;"	constant
WM_NCXBUTTONDOWN	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_NCXBUTTONDOWN = 0x00AB/;"	constant
WM_NCXBUTTONUP	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_NCXBUTTONUP = 0x00AC/;"	constant
WM_NEXTDLGCTL	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_NEXTDLGCTL = 0x0028/;"	constant
WM_NEXTMENU	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_NEXTMENU = 0x0213/;"	constant
WM_NOTIFY	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_NOTIFY = 0x004E/;"	constant
WM_NOTIFYFORMAT	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_NOTIFYFORMAT = 0x0055/;"	constant
WM_NULL	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_NULL = 0x0000/;"	constant
WM_PAINT	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_PAINT = 0x000F/;"	constant
WM_PAINTCLIPBOARD	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_PAINTCLIPBOARD = 0x0309/;"	constant
WM_PAINTICON	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_PAINTICON = 0x0026/;"	constant
WM_PALETTECHANGED	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_PALETTECHANGED = 0x0311/;"	constant
WM_PALETTEISCHANGING	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_PALETTEISCHANGING = 0x0310/;"	constant
WM_PARENTNOTIFY	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_PARENTNOTIFY = 0x0210/;"	constant
WM_PASTE	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_PASTE = 0x0302/;"	constant
WM_PENCTL	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_PENCTL = 0x0385/;"	constant
WM_PENEVENT	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_PENEVENT = 0x0388/;"	constant
WM_PENMISC	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_PENMISC = 0x0386/;"	constant
WM_PENMISCINFO	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_PENMISCINFO = 0x0383/;"	constant
WM_POWER	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_POWER = 0x0048/;"	constant
WM_POWERBROADCAST	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_POWERBROADCAST = 0x0218/;"	constant
WM_PRINT	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_PRINT = 0x0317/;"	constant
WM_PRINTCLIENT	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_PRINTCLIENT = 0x0318/;"	constant
WM_PSD_ENVSTAMPRECT	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_PSD_ENVSTAMPRECT = 0x0405/;"	constant
WM_PSD_FULLPAGERECT	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_PSD_FULLPAGERECT = 0x0401/;"	constant
WM_PSD_GREEKTEXTRECT	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_PSD_GREEKTEXTRECT = 0x0404/;"	constant
WM_PSD_MARGINRECT	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_PSD_MARGINRECT = 0x0403/;"	constant
WM_PSD_MINMARGINRECT	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_PSD_MINMARGINRECT = 0x0402/;"	constant
WM_PSD_PAGESETUPDLG	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_PSD_PAGESETUPDLG = 0x0400/;"	constant
WM_PSD_YAFULLPAGERECT	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_PSD_YAFULLPAGERECT = 0x0406/;"	constant
WM_QUERYDRAGICON	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_QUERYDRAGICON = 0x0037/;"	constant
WM_QUERYENDSESSION	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_QUERYENDSESSION = 0x0011/;"	constant
WM_QUERYNEWPALETTE	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_QUERYNEWPALETTE = 0x030F/;"	constant
WM_QUERYOPEN	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_QUERYOPEN = 0x0013/;"	constant
WM_QUERYUISTATE	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_QUERYUISTATE = 0x0129/;"	constant
WM_QUEUESYNC	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_QUEUESYNC = 0x0023/;"	constant
WM_QUIT	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_QUIT = 0x0012/;"	constant
WM_RASDIALEVENT	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_RASDIALEVENT = 0xCCCD/;"	constant
WM_RBUTTONDBLCLK	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_RBUTTONDBLCLK = 0x0206/;"	constant
WM_RBUTTONDOWN	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_RBUTTONDOWN = 0x0204/;"	constant
WM_RBUTTONUP	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_RBUTTONUP = 0x0205/;"	constant
WM_RCRESULT	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_RCRESULT = 0x0381/;"	constant
WM_RENDERALLFORMATS	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_RENDERALLFORMATS = 0x0306/;"	constant
WM_RENDERFORMAT	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_RENDERFORMAT = 0x0305/;"	constant
WM_SETCURSOR	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_SETCURSOR = 0x0020/;"	constant
WM_SETFOCUS	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_SETFOCUS = 0x0007/;"	constant
WM_SETFONT	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_SETFONT = 0x0030/;"	constant
WM_SETHOTKEY	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_SETHOTKEY = 0x0032/;"	constant
WM_SETICON	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_SETICON = 0x0080/;"	constant
WM_SETREDRAW	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_SETREDRAW = 0x000B/;"	constant
WM_SETTEXT	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_SETTEXT = 0x000C/;"	constant
WM_SHOWWINDOW	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_SHOWWINDOW = 0x0018/;"	constant
WM_SIZE	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_SIZE = 0x0005/;"	constant
WM_SIZECLIPBOARD	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_SIZECLIPBOARD = 0x030B/;"	constant
WM_SIZING	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_SIZING = 0x0214/;"	constant
WM_SKB	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_SKB = 0x0384/;"	constant
WM_SPOOLERSTATUS	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_SPOOLERSTATUS = 0x002A/;"	constant
WM_STYLECHANGED	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_STYLECHANGED = 0x007D/;"	constant
WM_STYLECHANGING	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_STYLECHANGING = 0x007C/;"	constant
WM_SYNCPAINT	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_SYNCPAINT = 0x0088/;"	constant
WM_SYSCHAR	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_SYSCHAR = 0x0106/;"	constant
WM_SYSCOLORCHANGE	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_SYSCOLORCHANGE = 0x0015/;"	constant
WM_SYSCOMMAND	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_SYSCOMMAND = 0x0112/;"	constant
WM_SYSDEADCHAR	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_SYSDEADCHAR = 0x0107/;"	constant
WM_SYSKEYDOWN	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_SYSKEYDOWN = 0x0104/;"	constant
WM_SYSKEYUP	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_SYSKEYUP = 0x0105/;"	constant
WM_SYSTIMER	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_SYSTIMER = 0x0118/;"	constant
WM_TCARD	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_TCARD = 0x0052/;"	constant
WM_TIMECHANGE	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_TIMECHANGE = 0x001E/;"	constant
WM_TIMER	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_TIMER = 0x0113/;"	constant
WM_UNDO	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_UNDO = 0x0304/;"	constant
WM_UNICHAR	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_UNICHAR = 0x0109/;"	constant
WM_UNINITMENUPOPUP	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_UNINITMENUPOPUP = 0x0125/;"	constant
WM_UPDATEUISTATE	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_UPDATEUISTATE = 0x0128/;"	constant
WM_USER	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_USER = 0x0400/;"	constant
WM_USERCHANGED	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_USERCHANGED = 0x0054/;"	constant
WM_VKEYTOITEM	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_VKEYTOITEM = 0x002E/;"	constant
WM_VSCROLL	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_VSCROLL = 0x0115/;"	constant
WM_VSCROLLCLIPBOARD	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_VSCROLLCLIPBOARD = 0x030A/;"	constant
WM_WINDOWPOSCHANGED	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_WINDOWPOSCHANGED = 0x0047/;"	constant
WM_WINDOWPOSCHANGING	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_WINDOWPOSCHANGING = 0x0046/;"	constant
WM_WININICHANGE	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_WININICHANGE = 0x001A/;"	constant
WM_WNT_CONVERTREQUESTEX	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_WNT_CONVERTREQUESTEX = 0x0109/;"	constant
WM_XBUTTONDBLCLK	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_XBUTTONDBLCLK = 0x020D/;"	constant
WM_XBUTTONDOWN	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_XBUTTONDOWN = 0x020B/;"	constant
WM_XBUTTONUP	$ZIGLIB/std/os/windows/user32.zig	/^pub const WM_XBUTTONUP = 0x020C/;"	constant
WNDCLASSEXA	$ZIGLIB/std/os/windows/user32.zig	/^pub const WNDCLASSEXA = extern struct {$/;"	struct
WNDCLASSEXW	$ZIGLIB/std/os/windows/user32.zig	/^pub const WNDCLASSEXW = extern struct {$/;"	struct
WNDPROC	$ZIGLIB/std/os/windows/user32.zig	/^pub const WNDPROC = *const fn (hwnd: HWND, uMsg: UINT, wParam: WPARAM, lParam: LPARAM) callconv(WINAPI) LRESULT/;"	constant
WOLOF	$ZIGLIB/std/os/windows/lang.zig	/^pub const WOLOF = 0x88/;"	constant
WOLOF_SENEGAL	$ZIGLIB/std/os/windows/sublang.zig	/^pub const WOLOF_SENEGAL = 0x01/;"	constant
WORD	$ZIGLIB/std/os/windows.zig	/^pub const WORD = u16/;"	constant
WORDS	$ZIGLIB/std/c/solaris.zig	/pub const WORDS = 4/;"	constant
WORKING_SET_LIMIT_RANGE	$ZIGLIB/std/os/windows/ntstatus.zig	/WORKING_SET_LIMIT_RANGE = 0x40000002/;"	field
WORKING_SET_QUOTA	$ZIGLIB/std/os/windows/win32error.zig	/WORKING_SET_QUOTA = 1453/;"	field
WORLD	$ZIGLIB/std/c/solaris.zig	/pub const WORLD = 0x00800/;"	constant
WOULDBLOCK	$ZIGLIB/std/c/windows.zig	/WOULDBLOCK = 140/;"	field
WOW_ASSERTION	$ZIGLIB/std/os/windows/win32error.zig	/WOW_ASSERTION = 670/;"	field
WPARAM	$ZIGLIB/std/os/windows.zig	/^pub const WPARAM = usize/;"	constant
WRACC	$ZIGLIB/std/c/solaris.zig	/pub const WRACC = 0x2/;"	constant
WRBAND	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const WRBAND = 32/;"	constant
WRDNY	$ZIGLIB/std/c/solaris.zig	/pub const WRDNY = 0x2/;"	constant
WRITE	$ZIGLIB/std/os/linux.zig	/pub const WRITE = 0x2/;"	constant
WRITER	$ZIGLIB/std/Thread/RwLock.zig	/const WRITER: usize = 1 << 1/;"	constant
WRITER_MASK	$ZIGLIB/std/Thread/RwLock.zig	/const WRITER_MASK: usize = std.math.maxInt(Count) << @ctz(WRITER)/;"	constant
WRITEV	$ZIGLIB/std/os/linux.zig	/WRITEV/;"	field
WRITE_DAC	$ZIGLIB/std/os/windows.zig	/^pub const WRITE_DAC = 0x00040000/;"	constant
WRITE_FAULT	$ZIGLIB/std/os/windows/win32error.zig	/WRITE_FAULT = 29/;"	field
WRITE_FIXED	$ZIGLIB/std/os/linux.zig	/WRITE_FIXED/;"	field
WRITE_OWNER	$ZIGLIB/std/os/windows.zig	/^pub const WRITE_OWNER = 0x00080000/;"	constant
WRITE_PROTECT	$ZIGLIB/std/os/windows/win32error.zig	/WRITE_PROTECT = 19/;"	field
WRLCK	$ZIGLIB/std/os/linux/x86_64.zig	/pub const WRLCK = 1/;"	constant
WRNORM	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const WRNORM = 16/;"	constant
WRONG_COMPARTMENT	$ZIGLIB/std/os/windows/win32error.zig	/WRONG_COMPARTMENT = 1468/;"	field
WRONG_CREDENTIAL_HANDLE	$ZIGLIB/std/os/windows/ntstatus.zig	/WRONG_CREDENTIAL_HANDLE = 0xC00002F2/;"	field
WRONG_DISK	$ZIGLIB/std/os/windows/win32error.zig	/WRONG_DISK = 34/;"	field
WRONG_EFS	$ZIGLIB/std/os/windows/ntstatus.zig	/WRONG_EFS = 0xC000028F/;"	field
WRONG_PASSWORD	$ZIGLIB/std/os/windows/win32error.zig	/WRONG_PASSWORD = 1323/;"	field
WRONG_PASSWORD_CORE	$ZIGLIB/std/os/windows/ntstatus.zig	/WRONG_PASSWORD_CORE = 0xC0000149/;"	field
WRONG_TARGET_NAME	$ZIGLIB/std/os/windows/win32error.zig	/WRONG_TARGET_NAME = 1396/;"	field
WRONG_VOLUME	$ZIGLIB/std/os/windows/ntstatus.zig	/WRONG_VOLUME = 0xC0000012/;"	field
WRONLY	$ZIGLIB/std/os/linux.zig	/pub const WRONLY = 0o1/;"	constant
WSABUF	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const WSABUF = extern struct {$/;"	struct
WSACleanup	$ZIGLIB/std/os/windows.zig	/^pub fn WSACleanup() !void {$/;"	function
WSADATA	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const WSADATA = if (@sizeOf(usize) == @sizeOf(u64))$/;"	constant
WSADESCRIPTION_LEN	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const WSADESCRIPTION_LEN = 256/;"	constant
WSAEACCES	$ZIGLIB/std/os/windows/ws2_32.zig	/WSAEACCES = 10013/;"	field
WSAEADDRINUSE	$ZIGLIB/std/os/windows/ws2_32.zig	/WSAEADDRINUSE = 10048/;"	field
WSAEADDRNOTAVAIL	$ZIGLIB/std/os/windows/ws2_32.zig	/WSAEADDRNOTAVAIL = 10049/;"	field
WSAEAFNOSUPPORT	$ZIGLIB/std/os/windows/ws2_32.zig	/WSAEAFNOSUPPORT = 10047/;"	field
WSAEALREADY	$ZIGLIB/std/os/windows/ws2_32.zig	/WSAEALREADY = 10037/;"	field
WSAEBADF	$ZIGLIB/std/os/windows/ws2_32.zig	/WSAEBADF = 10009/;"	field
WSAECANCELLED	$ZIGLIB/std/os/windows/ws2_32.zig	/WSAECANCELLED = 10103/;"	field
WSAECONNABORTED	$ZIGLIB/std/os/windows/ws2_32.zig	/WSAECONNABORTED = 10053/;"	field
WSAECONNREFUSED	$ZIGLIB/std/os/windows/ws2_32.zig	/WSAECONNREFUSED = 10061/;"	field
WSAECONNRESET	$ZIGLIB/std/os/windows/ws2_32.zig	/WSAECONNRESET = 10054/;"	field
WSAEDESTADDRREQ	$ZIGLIB/std/os/windows/ws2_32.zig	/WSAEDESTADDRREQ = 10039/;"	field
WSAEDISCON	$ZIGLIB/std/os/windows/ws2_32.zig	/WSAEDISCON = 10101/;"	field
WSAEDQUOT	$ZIGLIB/std/os/windows/ws2_32.zig	/WSAEDQUOT = 10069/;"	field
WSAEFAULT	$ZIGLIB/std/os/windows/ws2_32.zig	/WSAEFAULT = 10014/;"	field
WSAEHOSTDOWN	$ZIGLIB/std/os/windows/ws2_32.zig	/WSAEHOSTDOWN = 10064/;"	field
WSAEHOSTUNREACH	$ZIGLIB/std/os/windows/ws2_32.zig	/WSAEHOSTUNREACH = 10065/;"	field
WSAEINPROGRESS	$ZIGLIB/std/os/windows/ws2_32.zig	/WSAEINPROGRESS = 10036/;"	field
WSAEINTR	$ZIGLIB/std/os/windows/ws2_32.zig	/WSAEINTR = 10004/;"	field
WSAEINVAL	$ZIGLIB/std/os/windows/ws2_32.zig	/WSAEINVAL = 10022/;"	field
WSAEINVALIDPROCTABLE	$ZIGLIB/std/os/windows/ws2_32.zig	/WSAEINVALIDPROCTABLE = 10104/;"	field
WSAEINVALIDPROVIDER	$ZIGLIB/std/os/windows/ws2_32.zig	/WSAEINVALIDPROVIDER = 10105/;"	field
WSAEISCONN	$ZIGLIB/std/os/windows/ws2_32.zig	/WSAEISCONN = 10056/;"	field
WSAELOOP	$ZIGLIB/std/os/windows/ws2_32.zig	/WSAELOOP = 10062/;"	field
WSAEMFILE	$ZIGLIB/std/os/windows/ws2_32.zig	/WSAEMFILE = 10024/;"	field
WSAEMSGSIZE	$ZIGLIB/std/os/windows/ws2_32.zig	/WSAEMSGSIZE = 10040/;"	field
WSAENAMETOOLONG	$ZIGLIB/std/os/windows/ws2_32.zig	/WSAENAMETOOLONG = 10063/;"	field
WSAENETDOWN	$ZIGLIB/std/os/windows/ws2_32.zig	/WSAENETDOWN = 10050/;"	field
WSAENETRESET	$ZIGLIB/std/os/windows/ws2_32.zig	/WSAENETRESET = 10052/;"	field
WSAENETUNREACH	$ZIGLIB/std/os/windows/ws2_32.zig	/WSAENETUNREACH = 10051/;"	field
WSAENOBUFS	$ZIGLIB/std/os/windows/ws2_32.zig	/WSAENOBUFS = 10055/;"	field
WSAENOMORE	$ZIGLIB/std/os/windows/ws2_32.zig	/WSAENOMORE = 10102/;"	field
WSAENOPROTOOPT	$ZIGLIB/std/os/windows/ws2_32.zig	/WSAENOPROTOOPT = 10042/;"	field
WSAENOTCONN	$ZIGLIB/std/os/windows/ws2_32.zig	/WSAENOTCONN = 10057/;"	field
WSAENOTEMPTY	$ZIGLIB/std/os/windows/ws2_32.zig	/WSAENOTEMPTY = 10066/;"	field
WSAENOTSOCK	$ZIGLIB/std/os/windows/ws2_32.zig	/WSAENOTSOCK = 10038/;"	field
WSAEOPNOTSUPP	$ZIGLIB/std/os/windows/ws2_32.zig	/WSAEOPNOTSUPP = 10045/;"	field
WSAEPFNOSUPPORT	$ZIGLIB/std/os/windows/ws2_32.zig	/WSAEPFNOSUPPORT = 10046/;"	field
WSAEPROCLIM	$ZIGLIB/std/os/windows/ws2_32.zig	/WSAEPROCLIM = 10067/;"	field
WSAEPROTONOSUPPORT	$ZIGLIB/std/os/windows/ws2_32.zig	/WSAEPROTONOSUPPORT = 10043/;"	field
WSAEPROTOTYPE	$ZIGLIB/std/os/windows/ws2_32.zig	/WSAEPROTOTYPE = 10041/;"	field
WSAEPROVIDERFAILEDINIT	$ZIGLIB/std/os/windows/ws2_32.zig	/WSAEPROVIDERFAILEDINIT = 10106/;"	field
WSAEREFUSED	$ZIGLIB/std/os/windows/ws2_32.zig	/WSAEREFUSED = 10112/;"	field
WSAEREMOTE	$ZIGLIB/std/os/windows/ws2_32.zig	/WSAEREMOTE = 10071/;"	field
WSAESHUTDOWN	$ZIGLIB/std/os/windows/ws2_32.zig	/WSAESHUTDOWN = 10058/;"	field
WSAESOCKTNOSUPPORT	$ZIGLIB/std/os/windows/ws2_32.zig	/WSAESOCKTNOSUPPORT = 10044/;"	field
WSAESTALE	$ZIGLIB/std/os/windows/ws2_32.zig	/WSAESTALE = 10070/;"	field
WSAETIMEDOUT	$ZIGLIB/std/os/windows/ws2_32.zig	/WSAETIMEDOUT = 10060/;"	field
WSAETOOMANYREFS	$ZIGLIB/std/os/windows/ws2_32.zig	/WSAETOOMANYREFS = 10059/;"	field
WSAEUSERS	$ZIGLIB/std/os/windows/ws2_32.zig	/WSAEUSERS = 10068/;"	field
WSAEVENT	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const WSAEVENT = HANDLE/;"	constant
WSAEWOULDBLOCK	$ZIGLIB/std/os/windows/ws2_32.zig	/WSAEWOULDBLOCK = 10035/;"	field
WSAHOST_NOT_FOUND	$ZIGLIB/std/os/windows/ws2_32.zig	/WSAHOST_NOT_FOUND = 11001/;"	field
WSAID_ACCEPTEX	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const WSAID_ACCEPTEX = GUID{$/;"	constant
WSAID_CONNECTEX	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const WSAID_CONNECTEX = GUID{$/;"	constant
WSAID_GETACCEPTEXSOCKADDRS	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const WSAID_GETACCEPTEXSOCKADDRS = GUID{$/;"	constant
WSAID_WSAPOLL	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const WSAID_WSAPOLL = GUID{$/;"	constant
WSAID_WSARECVMSG	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const WSAID_WSARECVMSG = GUID{$/;"	constant
WSAID_WSASENDMSG	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const WSAID_WSASENDMSG = GUID{$/;"	constant
WSAIoctl	$ZIGLIB/std/os/windows.zig	/^pub fn WSAIoctl($/;"	function
WSAMSG	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const WSAMSG = extern struct {$/;"	struct
WSAMSG_const	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const WSAMSG_const = extern struct {$/;"	struct
WSANETWORKEVENTS	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const WSANETWORKEVENTS = extern struct {$/;"	struct
WSANOTINITIALISED	$ZIGLIB/std/os/windows/ws2_32.zig	/WSANOTINITIALISED = 10093/;"	field
WSANO_DATA	$ZIGLIB/std/os/windows/ws2_32.zig	/WSANO_DATA = 11004/;"	field
WSANO_RECOVERY	$ZIGLIB/std/os/windows/ws2_32.zig	/WSANO_RECOVERY = 11003/;"	field
WSAPOLLFD	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const WSAPOLLFD = pollfd/;"	constant
WSAPROTOCOLCHAIN	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const WSAPROTOCOLCHAIN = extern struct {$/;"	struct
WSAPROTOCOL_INFOA	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const WSAPROTOCOL_INFOA = extern struct {$/;"	struct
WSAPROTOCOL_INFOW	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const WSAPROTOCOL_INFOW = extern struct {$/;"	struct
WSAPROTOCOL_LEN	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const WSAPROTOCOL_LEN = 255/;"	constant
WSASERVICE_NOT_FOUND	$ZIGLIB/std/os/windows/ws2_32.zig	/WSASERVICE_NOT_FOUND = 10108/;"	field
WSASYSCALLFAILURE	$ZIGLIB/std/os/windows/ws2_32.zig	/WSASYSCALLFAILURE = 10107/;"	field
WSASYSNOTREADY	$ZIGLIB/std/os/windows/ws2_32.zig	/WSASYSNOTREADY = 10091/;"	field
WSASYS_STATUS_LEN	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const WSASYS_STATUS_LEN = 128/;"	constant
WSASocketW	$ZIGLIB/std/os/windows.zig	/^pub fn WSASocketW($/;"	function
WSAStartup	$ZIGLIB/std/os/windows.zig	/^pub fn WSAStartup(majorVersion: u8, minorVersion: u8) !ws2_32.WSADATA {$/;"	function
WSATRY_AGAIN	$ZIGLIB/std/os/windows/ws2_32.zig	/WSATRY_AGAIN = 11002/;"	field
WSATYPE_NOT_FOUND	$ZIGLIB/std/os/windows/ws2_32.zig	/WSATYPE_NOT_FOUND = 10109/;"	field
WSAVERNOTSUPPORTED	$ZIGLIB/std/os/windows/ws2_32.zig	/WSAVERNOTSUPPORTED = 10092/;"	field
WSA_E_CANCELLED	$ZIGLIB/std/os/windows/ws2_32.zig	/WSA_E_CANCELLED = 10111/;"	field
WSA_E_NO_MORE	$ZIGLIB/std/os/windows/ws2_32.zig	/WSA_E_NO_MORE = 10110/;"	field
WSA_FLAG_ACCESS_SYSTEM_SECURITY	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const WSA_FLAG_ACCESS_SYSTEM_SECURITY = 64/;"	constant
WSA_FLAG_MULTIPOINT_C_LEAF	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const WSA_FLAG_MULTIPOINT_C_LEAF = 4/;"	constant
WSA_FLAG_MULTIPOINT_C_ROOT	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const WSA_FLAG_MULTIPOINT_C_ROOT = 2/;"	constant
WSA_FLAG_MULTIPOINT_D_LEAF	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const WSA_FLAG_MULTIPOINT_D_LEAF = 16/;"	constant
WSA_FLAG_MULTIPOINT_D_ROOT	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const WSA_FLAG_MULTIPOINT_D_ROOT = 8/;"	constant
WSA_FLAG_NO_HANDLE_INHERIT	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const WSA_FLAG_NO_HANDLE_INHERIT = 128/;"	constant
WSA_FLAG_OVERLAPPED	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const WSA_FLAG_OVERLAPPED = 1/;"	constant
WSA_FLAG_REGISTERED_IO	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const WSA_FLAG_REGISTERED_IO = 256/;"	constant
WSA_INVALID_HANDLE	$ZIGLIB/std/os/windows/ws2_32.zig	/WSA_INVALID_HANDLE = 6/;"	field
WSA_INVALID_PARAMETER	$ZIGLIB/std/os/windows/ws2_32.zig	/WSA_INVALID_PARAMETER = 87/;"	field
WSA_IO_INCOMPLETE	$ZIGLIB/std/os/windows/ws2_32.zig	/WSA_IO_INCOMPLETE = 996/;"	field
WSA_IO_PENDING	$ZIGLIB/std/os/windows/ws2_32.zig	/WSA_IO_PENDING = 997/;"	field
WSA_NOT_ENOUGH_MEMORY	$ZIGLIB/std/os/windows/ws2_32.zig	/WSA_NOT_ENOUGH_MEMORY = 8/;"	field
WSA_OPERATION_ABORTED	$ZIGLIB/std/os/windows/ws2_32.zig	/WSA_OPERATION_ABORTED = 995/;"	field
WSA_QOS_ADMISSION_FAILURE	$ZIGLIB/std/os/windows/ws2_32.zig	/WSA_QOS_ADMISSION_FAILURE = 11010/;"	field
WSA_QOS_BAD_OBJECT	$ZIGLIB/std/os/windows/ws2_32.zig	/WSA_QOS_BAD_OBJECT = 11013/;"	field
WSA_QOS_BAD_STYLE	$ZIGLIB/std/os/windows/ws2_32.zig	/WSA_QOS_BAD_STYLE = 11012/;"	field
WSA_QOS_EFILTERCOUNT	$ZIGLIB/std/os/windows/ws2_32.zig	/WSA_QOS_EFILTERCOUNT = 11021/;"	field
WSA_QOS_EFILTERSTYLE	$ZIGLIB/std/os/windows/ws2_32.zig	/WSA_QOS_EFILTERSTYLE = 11019/;"	field
WSA_QOS_EFILTERTYPE	$ZIGLIB/std/os/windows/ws2_32.zig	/WSA_QOS_EFILTERTYPE = 11020/;"	field
WSA_QOS_EFLOWCOUNT	$ZIGLIB/std/os/windows/ws2_32.zig	/WSA_QOS_EFLOWCOUNT = 11023/;"	field
WSA_QOS_EFLOWDESC	$ZIGLIB/std/os/windows/ws2_32.zig	/WSA_QOS_EFLOWDESC = 11026/;"	field
WSA_QOS_EFLOWSPEC	$ZIGLIB/std/os/windows/ws2_32.zig	/WSA_QOS_EFLOWSPEC = 11017/;"	field
WSA_QOS_EOBJLENGTH	$ZIGLIB/std/os/windows/ws2_32.zig	/WSA_QOS_EOBJLENGTH = 11022/;"	field
WSA_QOS_EPOLICYOBJ	$ZIGLIB/std/os/windows/ws2_32.zig	/WSA_QOS_EPOLICYOBJ = 11025/;"	field
WSA_QOS_EPROVSPECBUF	$ZIGLIB/std/os/windows/ws2_32.zig	/WSA_QOS_EPROVSPECBUF = 11018/;"	field
WSA_QOS_EPSFILTERSPEC	$ZIGLIB/std/os/windows/ws2_32.zig	/WSA_QOS_EPSFILTERSPEC = 11028/;"	field
WSA_QOS_EPSFLOWSPEC	$ZIGLIB/std/os/windows/ws2_32.zig	/WSA_QOS_EPSFLOWSPEC = 11027/;"	field
WSA_QOS_ESDMODEOBJ	$ZIGLIB/std/os/windows/ws2_32.zig	/WSA_QOS_ESDMODEOBJ = 11029/;"	field
WSA_QOS_ESERVICETYPE	$ZIGLIB/std/os/windows/ws2_32.zig	/WSA_QOS_ESERVICETYPE = 11016/;"	field
WSA_QOS_ESHAPERATEOBJ	$ZIGLIB/std/os/windows/ws2_32.zig	/WSA_QOS_ESHAPERATEOBJ = 11030/;"	field
WSA_QOS_EUNKOWNPSOBJ	$ZIGLIB/std/os/windows/ws2_32.zig	/WSA_QOS_EUNKOWNPSOBJ = 11024/;"	field
WSA_QOS_GENERIC_ERROR	$ZIGLIB/std/os/windows/ws2_32.zig	/WSA_QOS_GENERIC_ERROR = 11015/;"	field
WSA_QOS_NO_RECEIVERS	$ZIGLIB/std/os/windows/ws2_32.zig	/WSA_QOS_NO_RECEIVERS = 11008/;"	field
WSA_QOS_NO_SENDERS	$ZIGLIB/std/os/windows/ws2_32.zig	/WSA_QOS_NO_SENDERS = 11007/;"	field
WSA_QOS_POLICY_FAILURE	$ZIGLIB/std/os/windows/ws2_32.zig	/WSA_QOS_POLICY_FAILURE = 11011/;"	field
WSA_QOS_RECEIVERS	$ZIGLIB/std/os/windows/ws2_32.zig	/WSA_QOS_RECEIVERS = 11005/;"	field
WSA_QOS_REQUEST_CONFIRMED	$ZIGLIB/std/os/windows/ws2_32.zig	/WSA_QOS_REQUEST_CONFIRMED = 11009/;"	field
WSA_QOS_RESERVED_PETYPE	$ZIGLIB/std/os/windows/ws2_32.zig	/WSA_QOS_RESERVED_PETYPE = 11031/;"	field
WSA_QOS_SENDERS	$ZIGLIB/std/os/windows/ws2_32.zig	/WSA_QOS_SENDERS = 11006/;"	field
WSA_QOS_TRAFFIC_CTRL_ERROR	$ZIGLIB/std/os/windows/ws2_32.zig	/WSA_QOS_TRAFFIC_CTRL_ERROR = 11014/;"	field
WSK_SO_BASE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const WSK_SO_BASE = 16384/;"	constant
WSPDESCRIPTION_LEN	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const WSPDESCRIPTION_LEN = 255/;"	constant
WSS_OPERATION_IN_PROGRESS	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const WSS_OPERATION_IN_PROGRESS = 259/;"	constant
WSTAT	$ZIGLIB/std/os/plan9.zig	/WSTAT = 44/;"	field
WS_BORDER	$ZIGLIB/std/os/windows/user32.zig	/^pub const WS_BORDER = 0x00800000/;"	constant
WS_CAPTION	$ZIGLIB/std/os/windows/user32.zig	/^pub const WS_CAPTION = WS_BORDER | WS_DLGFRAME/;"	constant
WS_CHILD	$ZIGLIB/std/os/windows/user32.zig	/^pub const WS_CHILD = 0x40000000/;"	constant
WS_CHILDWINDOW	$ZIGLIB/std/os/windows/user32.zig	/^pub const WS_CHILDWINDOW = WS_CHILD/;"	constant
WS_CLIPCHILDREN	$ZIGLIB/std/os/windows/user32.zig	/^pub const WS_CLIPCHILDREN = 0x02000000/;"	constant
WS_CLIPSIBLINGS	$ZIGLIB/std/os/windows/user32.zig	/^pub const WS_CLIPSIBLINGS = 0x04000000/;"	constant
WS_DISABLED	$ZIGLIB/std/os/windows/user32.zig	/^pub const WS_DISABLED = 0x08000000/;"	constant
WS_DLGFRAME	$ZIGLIB/std/os/windows/user32.zig	/^pub const WS_DLGFRAME = 0x00400000/;"	constant
WS_EX_ACCEPTFILES	$ZIGLIB/std/os/windows/user32.zig	/^pub const WS_EX_ACCEPTFILES = 0x00000010/;"	constant
WS_EX_APPWINDOW	$ZIGLIB/std/os/windows/user32.zig	/^pub const WS_EX_APPWINDOW = 0x00040000/;"	constant
WS_EX_CLIENTEDGE	$ZIGLIB/std/os/windows/user32.zig	/^pub const WS_EX_CLIENTEDGE = 0x00000200/;"	constant
WS_EX_CONTEXTHELP	$ZIGLIB/std/os/windows/user32.zig	/^pub const WS_EX_CONTEXTHELP = 0x00000400/;"	constant
WS_EX_CONTROLPARENT	$ZIGLIB/std/os/windows/user32.zig	/^pub const WS_EX_CONTROLPARENT = 0x00010000/;"	constant
WS_EX_DLGMODALFRAME	$ZIGLIB/std/os/windows/user32.zig	/^pub const WS_EX_DLGMODALFRAME = 0x00000001/;"	constant
WS_EX_LAYERED	$ZIGLIB/std/os/windows/user32.zig	/^pub const WS_EX_LAYERED = 0x00080000/;"	constant
WS_EX_LEFT	$ZIGLIB/std/os/windows/user32.zig	/^pub const WS_EX_LEFT = 0x00000000/;"	constant
WS_EX_LEFTSCROLLBAR	$ZIGLIB/std/os/windows/user32.zig	/^pub const WS_EX_LEFTSCROLLBAR = 0x00004000/;"	constant
WS_EX_LTRREADING	$ZIGLIB/std/os/windows/user32.zig	/^pub const WS_EX_LTRREADING = 0x00000000/;"	constant
WS_EX_MDICHILD	$ZIGLIB/std/os/windows/user32.zig	/^pub const WS_EX_MDICHILD = 0x00000040/;"	constant
WS_EX_NOPARENTNOTIFY	$ZIGLIB/std/os/windows/user32.zig	/^pub const WS_EX_NOPARENTNOTIFY = 0x00000004/;"	constant
WS_EX_OVERLAPPEDWINDOW	$ZIGLIB/std/os/windows/user32.zig	/^pub const WS_EX_OVERLAPPEDWINDOW = WS_EX_WINDOWEDGE | WS_EX_CLIENTEDGE/;"	constant
WS_EX_PALETTEWINDOW	$ZIGLIB/std/os/windows/user32.zig	/^pub const WS_EX_PALETTEWINDOW = WS_EX_WINDOWEDGE | WS_EX_TOOLWINDOW | WS_EX_TOPMOST/;"	constant
WS_EX_RIGHT	$ZIGLIB/std/os/windows/user32.zig	/^pub const WS_EX_RIGHT = 0x00001000/;"	constant
WS_EX_RIGHTSCROLLBAR	$ZIGLIB/std/os/windows/user32.zig	/^pub const WS_EX_RIGHTSCROLLBAR = 0x00000000/;"	constant
WS_EX_RTLREADING	$ZIGLIB/std/os/windows/user32.zig	/^pub const WS_EX_RTLREADING = 0x00002000/;"	constant
WS_EX_STATICEDGE	$ZIGLIB/std/os/windows/user32.zig	/^pub const WS_EX_STATICEDGE = 0x00020000/;"	constant
WS_EX_TOOLWINDOW	$ZIGLIB/std/os/windows/user32.zig	/^pub const WS_EX_TOOLWINDOW = 0x00000080/;"	constant
WS_EX_TOPMOST	$ZIGLIB/std/os/windows/user32.zig	/^pub const WS_EX_TOPMOST = 0x00000008/;"	constant
WS_EX_TRANSPARENT	$ZIGLIB/std/os/windows/user32.zig	/^pub const WS_EX_TRANSPARENT = 0x00000020/;"	constant
WS_EX_WINDOWEDGE	$ZIGLIB/std/os/windows/user32.zig	/^pub const WS_EX_WINDOWEDGE = 0x00000100/;"	constant
WS_GROUP	$ZIGLIB/std/os/windows/user32.zig	/^pub const WS_GROUP = 0x00020000/;"	constant
WS_HSCROLL	$ZIGLIB/std/os/windows/user32.zig	/^pub const WS_HSCROLL = 0x00100000/;"	constant
WS_ICONIC	$ZIGLIB/std/os/windows/user32.zig	/^pub const WS_ICONIC = WS_MINIMIZE/;"	constant
WS_MAXIMIZE	$ZIGLIB/std/os/windows/user32.zig	/^pub const WS_MAXIMIZE = 0x01000000/;"	constant
WS_MAXIMIZEBOX	$ZIGLIB/std/os/windows/user32.zig	/^pub const WS_MAXIMIZEBOX = 0x00010000/;"	constant
WS_MINIMIZE	$ZIGLIB/std/os/windows/user32.zig	/^pub const WS_MINIMIZE = 0x20000000/;"	constant
WS_MINIMIZEBOX	$ZIGLIB/std/os/windows/user32.zig	/^pub const WS_MINIMIZEBOX = 0x00020000/;"	constant
WS_OVERLAPPED	$ZIGLIB/std/os/windows/user32.zig	/^pub const WS_OVERLAPPED = 0x00000000/;"	constant
WS_OVERLAPPEDWINDOW	$ZIGLIB/std/os/windows/user32.zig	/^pub const WS_OVERLAPPEDWINDOW = WS_OVERLAPPED | WS_CAPTION | WS_SYSMENU | WS_THICKFRAME | WS_MINIMIZEBOX | WS_MAXIMIZEBOX/;"	constant
WS_POPUP	$ZIGLIB/std/os/windows/user32.zig	/^pub const WS_POPUP = 0x80000000/;"	constant
WS_POPUPWINDOW	$ZIGLIB/std/os/windows/user32.zig	/^pub const WS_POPUPWINDOW = WS_POPUP | WS_BORDER | WS_SYSMENU/;"	constant
WS_SIZEBOX	$ZIGLIB/std/os/windows/user32.zig	/^pub const WS_SIZEBOX = WS_THICKFRAME/;"	constant
WS_SYSMENU	$ZIGLIB/std/os/windows/user32.zig	/^pub const WS_SYSMENU = 0x00080000/;"	constant
WS_TABSTOP	$ZIGLIB/std/os/windows/user32.zig	/^pub const WS_TABSTOP = 0x00010000/;"	constant
WS_THICKFRAME	$ZIGLIB/std/os/windows/user32.zig	/^pub const WS_THICKFRAME = 0x00040000/;"	constant
WS_TILED	$ZIGLIB/std/os/windows/user32.zig	/^pub const WS_TILED = WS_OVERLAPPED/;"	constant
WS_TILEDWINDOW	$ZIGLIB/std/os/windows/user32.zig	/^pub const WS_TILEDWINDOW = WS_OVERLAPPEDWINDOW/;"	constant
WS_VISIBLE	$ZIGLIB/std/os/windows/user32.zig	/^pub const WS_VISIBLE = 0x10000000/;"	constant
WS_VSCROLL	$ZIGLIB/std/os/windows/user32.zig	/^pub const WS_VSCROLL = 0x00200000/;"	constant
WX86_BREAKPOINT	$ZIGLIB/std/os/windows/ntstatus.zig	/WX86_BREAKPOINT = 0x4000001F/;"	field
WX86_CONTINUE	$ZIGLIB/std/os/windows/ntstatus.zig	/WX86_CONTINUE = 0x4000001D/;"	field
WX86_CREATEWX86TIB	$ZIGLIB/std/os/windows/ntstatus.zig	/WX86_CREATEWX86TIB = 0x40000028/;"	field
WX86_ERROR	$ZIGLIB/std/os/windows/win32error.zig	/WX86_ERROR = 540/;"	field
WX86_EXCEPTION_CHAIN	$ZIGLIB/std/os/windows/ntstatus.zig	/WX86_EXCEPTION_CHAIN = 0x40000022/;"	field
WX86_EXCEPTION_CONTINUE	$ZIGLIB/std/os/windows/ntstatus.zig	/WX86_EXCEPTION_CONTINUE = 0x40000020/;"	field
WX86_EXCEPTION_LASTCHANCE	$ZIGLIB/std/os/windows/ntstatus.zig	/WX86_EXCEPTION_LASTCHANCE = 0x40000021/;"	field
WX86_FLOAT_STACK_CHECK	$ZIGLIB/std/os/windows/ntstatus.zig	/WX86_FLOAT_STACK_CHECK = 0xC0000270/;"	field
WX86_INTERNAL_ERROR	$ZIGLIB/std/os/windows/ntstatus.zig	/WX86_INTERNAL_ERROR = 0xC000026F/;"	field
WX86_SINGLE_STEP	$ZIGLIB/std/os/windows/ntstatus.zig	/WX86_SINGLE_STEP = 0x4000001E/;"	field
WX86_UNSIMULATE	$ZIGLIB/std/os/windows/ntstatus.zig	/WX86_UNSIMULATE = 0x4000001C/;"	field
WX86_WARNING	$ZIGLIB/std/os/windows/win32error.zig	/WX86_WARNING = 539/;"	field
WXABORT	$ZIGLIB/std/c/openbsd.zig	/pub const WXABORT = 74/;"	constant
W_OK	$ZIGLIB/std/os/wasi.zig	/^pub const W_OK = 2/;"	constant
WaitForMultipleObjectsEx	$ZIGLIB/std/os/windows.zig	/^pub fn WaitForMultipleObjectsEx(handles: []const HANDLE, waitAll: bool, milliseconds: DWORD, alertable: bool) !u32 {$/;"	function
WaitForNextLine	$ZIGLIB/std/process.zig	/WaitForNextLine/;"	field
WaitForSingleObject	$ZIGLIB/std/os/windows.zig	/^pub fn WaitForSingleObject(handle: HANDLE, milliseconds: DWORD) WaitForSingleObjectError!void {$/;"	function
WaitForSingleObjectError	$ZIGLIB/std/os/windows.zig	/^pub const WaitForSingleObjectError = error{$/;"	constant
WaitForSingleObjectEx	$ZIGLIB/std/os/windows.zig	/^pub fn WaitForSingleObjectEx(handle: HANDLE, milliseconds: DWORD, alertable: bool) WaitForSingleObjectError!void {$/;"	function
WaitGroup	$ZIGLIB/std/event/wait_group.zig	/^pub const WaitGroup = WaitGroupGeneric(@bitSizeOf(usize))/;"	constant
WaitGroupGeneric	$ZIGLIB/std/event/wait_group.zig	/^pub fn WaitGroupGeneric(comptime counter_size: u16) type {$/;"	function
WaitList	$ZIGLIB/std/Thread/Futex.zig	/const WaitList = struct {$/;"	struct
WaitOnAddressHashTable	$ZIGLIB/std/os/windows.zig	/WaitOnAddressHashTable: [0x80]PVOID/;"	field
WaitPidResult	$ZIGLIB/std/os.zig	/^pub const WaitPidResult = struct {$/;"	struct
WaitQueue	$ZIGLIB/std/Thread/Futex.zig	/const WaitQueue = struct {$/;"	struct
Waiter	$ZIGLIB/std/event/wait_group.zig	/const Waiter = struct {$/;"	struct
Waiters	$ZIGLIB/std/event/loop.zig	/const Waiters = struct {$/;"	struct
Walker	$ZIGLIB/std/fs.zig	/pub const Walker = struct {$/;"	struct
WalkerEntry	$ZIGLIB/std/fs.zig	/pub const WalkerEntry = struct {$/;"	struct
WarnBufferTooSmall	$ZIGLIB/std/os/uefi/status.zig	/WarnBufferTooSmall = 4/;"	field
WarnDeleteFailure	$ZIGLIB/std/os/uefi/status.zig	/WarnDeleteFailure = 2/;"	field
WarnFileSystem	$ZIGLIB/std/os/uefi/status.zig	/WarnFileSystem = 6/;"	field
WarnResetRequired	$ZIGLIB/std/os/uefi/status.zig	/WarnResetRequired = 7/;"	field
WarnStaleData	$ZIGLIB/std/os/uefi/status.zig	/WarnStaleData = 5/;"	field
WarnUnknownGlyph	$ZIGLIB/std/os/uefi/status.zig	/WarnUnknownGlyph = 1/;"	field
WarnWriteFailure	$ZIGLIB/std/os/uefi/status.zig	/WarnWriteFailure = 3/;"	field
Warning	$ZIGLIB/std/os/uefi/protocols/hii_popup_protocol.zig	/Warning/;"	field
WasiExecModel	$ZIGLIB/std/builtin.zig	/^pub const WasiExecModel = enum {$/;"	enum
WasiOpenOptions	$ZIGLIB/std/os.zig	/^const WasiOpenOptions = struct {$/;"	struct
WasmDumper	$ZIGLIB/std/Build/CheckObjectStep.zig	/^const WasmDumper = struct {$/;"	struct
WasmPageAllocator	$ZIGLIB/std/heap/WasmPageAllocator.zig	/const WasmPageAllocator = @This()/;"	constant
Watch	$ZIGLIB/std/fs/watch.zig	/^pub fn Watch(comptime V: type) type {$/;"	function
WatchEventError	$ZIGLIB/std/fs/watch.zig	/^const WatchEventError = error{$/;"	constant
WatchEventId	$ZIGLIB/std/fs/watch.zig	/^const WatchEventId = enum {$/;"	enum
WdTable	$ZIGLIB/std/fs/watch.zig	/const WdTable = std.AutoHashMapUnmanaged(i32, Dir)/;"	constant
Weak	$ZIGLIB/std/builtin.zig	/Weak/;"	field
WeakExternalDefinition	$ZIGLIB/std/coff.zig	/^pub const WeakExternalDefinition = struct {$/;"	struct
WeakExternalFlag	$ZIGLIB/std/coff.zig	/^pub const WeakExternalFlag = enum(u32) {$/;"	enum
WeakPair	$ZIGLIB/std/hash/cityhash.zig	/const WeakPair = struct {$/;"	struct
WeakParametersError	$ZIGLIB/std/crypto/errors.zig	/^pub const WeakParametersError = error{WeakParameters}/;"	constant
WeakPublicKeyError	$ZIGLIB/std/crypto/errors.zig	/^pub const WeakPublicKeyError = error{WeakPublicKey}/;"	constant
WerRegistrationData	$ZIGLIB/std/os/windows.zig	/WerRegistrationData: PVOID/;"	field
WerShipAssertPtr	$ZIGLIB/std/os/windows.zig	/WerShipAssertPtr: PVOID/;"	field
While	$ZIGLIB/std/zig/Ast.zig	/pub const While = struct {$/;"	struct
WhileCont	$ZIGLIB/std/zig/Ast.zig	/pub const WhileCont = struct {$/;"	struct
White	$ZIGLIB/std/debug.zig	/White/;"	field
Whiteout	$ZIGLIB/std/fs/file.zig	/Whiteout/;"	field
Whitespace	$ZIGLIB/std/json.zig	/pub const Whitespace = struct {$/;"	struct
WideAtomic	$ZIGLIB/compiler_rt/atomics.zig	/const WideAtomic = std.meta.Int(.unsigned, smallest_atomic_fetch_exch_size * 8)/;"	constant
WideGlyph	$ZIGLIB/std/os/uefi/protocols/hii.zig	/^pub const WideGlyph = extern struct {$/;"	struct
WideGlyphAttributes	$ZIGLIB/std/os/uefi/protocols/hii.zig	/^pub const WideGlyphAttributes = packed struct(u8) {$/;"	struct
Win32Error	$ZIGLIB/std/os/windows/win32error.zig	/^pub const Win32Error = enum(u16) {$/;"	enum
Win64	$ZIGLIB/std/builtin.zig	/Win64/;"	field
WinStartup	$ZIGLIB/std/start.zig	/^fn WinStartup() callconv(std.os.windows.WINAPI) noreturn {$/;"	function
WindowIterator	$ZIGLIB/std/mem.zig	/^pub fn WindowIterator(comptime T: type) type {$/;"	function
WindowTitle	$ZIGLIB/std/os/windows.zig	/WindowTitle: UNICODE_STRING/;"	field
Windows	$ZIGLIB/std/target.zig	/Windows/;"	field
WindowsAsyncReadResult	$ZIGLIB/std/child_process.zig	/const WindowsAsyncReadResult = enum {$/;"	enum
WindowsContext	$ZIGLIB/std/debug.zig	/pub const WindowsContext = struct {$/;"	struct
WindowsDynLib	$ZIGLIB/std/dynamic_library.zig	/^pub const WindowsDynLib = struct {$/;"	struct
WindowsImpl	$ZIGLIB/std/Thread/Mutex.zig	/^const WindowsImpl = struct {$/;"	struct
WindowsOsData	$ZIGLIB/std/fs/watch.zig	/const WindowsOsData = struct {$/;"	struct
WindowsPath	$ZIGLIB/std/fs/path.zig	/^pub const WindowsPath = struct {$/;"	struct
WindowsThreadImpl	$ZIGLIB/std/Thread.zig	/^const WindowsThreadImpl = struct {$/;"	struct
WindowsVersion	$ZIGLIB/std/target.zig	/pub const WindowsVersion = enum(u32) {$/;"	enum
WinsockError	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const WinsockError = enum(u16) {$/;"	enum
Word	$ZIGLIB/std/crypto/pcurves/common.zig	/const Word = @TypeOf(a.limbs[0])/;"	constant
Word_1	$ZIGLIB/compiler_rt/common.zig	/fn Word_1(x: u128) u64 {$/;"	function
Word_2	$ZIGLIB/compiler_rt/common.zig	/fn Word_2(x: u128) u64 {$/;"	function
Word_3	$ZIGLIB/compiler_rt/common.zig	/fn Word_3(x: u128) u64 {$/;"	function
Word_4	$ZIGLIB/compiler_rt/common.zig	/fn Word_4(x: u128) u64 {$/;"	function
Word_FullMask	$ZIGLIB/compiler_rt/common.zig	/const Word_FullMask = @as(u64, 0xffffffffffffffff)/;"	constant
Word_HiMask	$ZIGLIB/compiler_rt/common.zig	/const Word_HiMask = @as(u64, 0xffffffff00000000)/;"	constant
Word_LoMask	$ZIGLIB/compiler_rt/common.zig	/const Word_LoMask = @as(u64, 0x00000000ffffffff)/;"	constant
WorkgroupMemoryExplicitLayout16BitAccessKHR	$ZIGLIB/std/target/spirv.zig	/WorkgroupMemoryExplicitLayout16BitAccessKHR/;"	field
WorkgroupMemoryExplicitLayout8BitAccessKHR	$ZIGLIB/std/target/spirv.zig	/WorkgroupMemoryExplicitLayout8BitAccessKHR/;"	field
WorkgroupMemoryExplicitLayoutKHR	$ZIGLIB/std/target/spirv.zig	/WorkgroupMemoryExplicitLayoutKHR/;"	field
WorkingSetSize	$ZIGLIB/std/os/windows.zig	/WorkingSetSize: SIZE_T/;"	field
Wrapper	$ZIGLIB/std/event/loop.zig	/const Wrapper = struct {$/;"	struct
Write	$ZIGLIB/std/event/loop.zig	/pub const Write = struct {$/;"	struct
WriteError	$ZIGLIB/std/zig/render.zig	/pub const WriteError = UnderlyingWriter.Error/;"	constant
WriteFile	$ZIGLIB/std/os/windows.zig	/^pub fn WriteFile($/;"	function
WriteFileError	$ZIGLIB/std/os/windows.zig	/^pub const WriteFileError = error{$/;"	constant
WriteFileOptions	$ZIGLIB/std/fs/file.zig	/pub const WriteFileOptions = struct {$/;"	struct
WriteFileStep	$ZIGLIB/std/Build/WriteFileStep.zig	/^const WriteFileStep = @This()/;"	constant
WriteLock	$ZIGLIB/std/event/rwlock.zig	/WriteLock/;"	field
WriteProtected	$ZIGLIB/std/os/uefi/status.zig	/WriteProtected = high_bit | 8/;"	field
WriteStream	$ZIGLIB/std/json/write_stream.zig	/^pub fn WriteStream(comptime OutStream: type, comptime max_depth: usize) type {$/;"	function
WriteV	$ZIGLIB/std/event/loop.zig	/pub const WriteV = struct {$/;"	struct
Writer	$ZIGLIB/std/zig/render.zig	/pub const Writer = std.io.Writer(*Self, WriteError, write)/;"	constant
WriterContext	$ZIGLIB/std/array_list.zig	/pub const WriterContext = struct {$/;"	struct
Wyhash	$ZIGLIB/std/hash/wyhash.zig	/^pub const Wyhash = struct {$/;"	struct
WyhashStateless	$ZIGLIB/std/hash/wyhash.zig	/^const WyhashStateless = struct {$/;"	struct
X25519	$ZIGLIB/std/crypto/25519/x25519.zig	/^pub const X25519 = struct {$/;"	struct
X509	$ZIGLIB/std/crypto/tls.zig	/X509 = 0/;"	field
X509CertHeader	$ZIGLIB/std/crypto/Certificate/Bundle/macos.zig	/^const X509CertHeader = extern struct {$/;"	struct
X509_CERTIFICATE	$ZIGLIB/std/os/darwin/cssm.zig	/X509_CERTIFICATE = DB_RECORDTYPE_APP_DEFINED_START + 0x1000/;"	field
X509_CRL	$ZIGLIB/std/os/darwin/cssm.zig	/X509_CRL/;"	field
X86_64	$ZIGLIB/std/os/linux.zig	/X86_64 = toAudit(.x86_64)/;"	field
X86_64_RELOC_BRANCH	$ZIGLIB/std/macho.zig	/X86_64_RELOC_BRANCH/;"	field
X86_64_RELOC_GOT	$ZIGLIB/std/macho.zig	/X86_64_RELOC_GOT/;"	field
X86_64_RELOC_GOT_LOAD	$ZIGLIB/std/macho.zig	/X86_64_RELOC_GOT_LOAD/;"	field
X86_64_RELOC_SIGNED	$ZIGLIB/std/macho.zig	/X86_64_RELOC_SIGNED/;"	field
X86_64_RELOC_SIGNED_1	$ZIGLIB/std/macho.zig	/X86_64_RELOC_SIGNED_1/;"	field
X86_64_RELOC_SIGNED_2	$ZIGLIB/std/macho.zig	/X86_64_RELOC_SIGNED_2/;"	field
X86_64_RELOC_SIGNED_4	$ZIGLIB/std/macho.zig	/X86_64_RELOC_SIGNED_4/;"	field
X86_64_RELOC_SUBTRACTOR	$ZIGLIB/std/macho.zig	/X86_64_RELOC_SUBTRACTOR/;"	field
X86_64_RELOC_TLV	$ZIGLIB/std/macho.zig	/X86_64_RELOC_TLV/;"	field
X86_64_RELOC_UNSIGNED	$ZIGLIB/std/macho.zig	/X86_64_RELOC_UNSIGNED = 0/;"	field
X9_62_id_ecPublicKey	$ZIGLIB/std/crypto/Certificate.zig	/X9_62_id_ecPublicKey: NamedCurve/;"	field
X9_62_prime256v1	$ZIGLIB/std/crypto/Certificate.zig	/X9_62_prime256v1/;"	field
XADD	$ZIGLIB/std/os/linux/bpf.zig	/^pub const XADD = 0xc0/;"	constant
XATTR	$ZIGLIB/std/c/solaris.zig	/pub const XATTR = 0x4000/;"	constant
XATTR_CAPS_SZ	$ZIGLIB/std/os/linux.zig	/^pub const XATTR_CAPS_SZ = XATTR_CAPS_SZ_2/;"	constant
XATTR_CAPS_SZ_1	$ZIGLIB/std/os/linux.zig	/^pub const XATTR_CAPS_SZ_1 = @sizeOf(u32) * (1 + 2 * VFS_CAP_U32_1)/;"	constant
XATTR_CAPS_SZ_2	$ZIGLIB/std/os/linux.zig	/^pub const XATTR_CAPS_SZ_2 = @sizeOf(u32) * (1 + 2 * VFS_CAP_U32_2)/;"	constant
XBOX	$ZIGLIB/std/coff.zig	/XBOX = 14/;"	field
XCORE	$ZIGLIB/std/elf.zig	/XCORE = 203/;"	field
XCORE_SHF_CP_SECTION	$ZIGLIB/std/elf.zig	/^pub const XCORE_SHF_CP_SECTION = 0x20000000/;"	constant
XCORE_SHF_DP_SECTION	$ZIGLIB/std/elf.zig	/^pub const XCORE_SHF_DP_SECTION = 0x10000000/;"	constant
XCPU	$ZIGLIB/std/os/linux.zig	/pub const XCPU = 24/;"	constant
XCR0_MASKREG	$ZIGLIB/std/zig/system/x86.zig	/^const XCR0_MASKREG = 0x20/;"	constant
XCR0_XMM	$ZIGLIB/std/zig/system/x86.zig	/^const XCR0_XMM = 0x02/;"	constant
XCR0_YMM	$ZIGLIB/std/zig/system/x86.zig	/^const XCR0_YMM = 0x04/;"	constant
XCR0_ZMM0_15	$ZIGLIB/std/zig/system/x86.zig	/^const XCR0_ZMM0_15 = 0x40/;"	constant
XCR0_ZMM16_31	$ZIGLIB/std/zig/system/x86.zig	/^const XCR0_ZMM16_31 = 0x80/;"	constant
XChaCha12IETF	$ZIGLIB/std/crypto/chacha20.zig	/^pub const XChaCha12IETF = XChaChaIETF(12)/;"	constant
XChaCha12Poly1305	$ZIGLIB/std/crypto/chacha20.zig	/^pub const XChaCha12Poly1305 = XChaChaPoly1305(12)/;"	constant
XChaCha20IETF	$ZIGLIB/std/crypto/chacha20.zig	/^pub const XChaCha20IETF = XChaChaIETF(20)/;"	constant
XChaCha20Poly1305	$ZIGLIB/std/crypto/chacha20.zig	/^pub const XChaCha20Poly1305 = XChaChaPoly1305(20)/;"	constant
XChaCha8IETF	$ZIGLIB/std/crypto/chacha20.zig	/^pub const XChaCha8IETF = XChaChaIETF(8)/;"	constant
XChaCha8Poly1305	$ZIGLIB/std/crypto/chacha20.zig	/^pub const XChaCha8Poly1305 = XChaChaPoly1305(8)/;"	constant
XChaChaIETF	$ZIGLIB/std/crypto/chacha20.zig	/^fn XChaChaIETF(comptime rounds_nb: usize) type {$/;"	function
XChaChaPoly1305	$ZIGLIB/std/crypto/chacha20.zig	/^fn XChaChaPoly1305(comptime rounds_nb: usize) type {$/;"	function
XDEV	$ZIGLIB/std/os/wasi.zig	/XDEV = 75/;"	field
XFRM	$ZIGLIB/std/os/linux.zig	/pub const XFRM = 6/;"	constant
XFRM_POLICY	$ZIGLIB/std/os/linux.zig	/pub const XFRM_POLICY = 35/;"	constant
XFSZ	$ZIGLIB/std/os/linux.zig	/pub const XFSZ = 25/;"	constant
XFULL	$ZIGLIB/std/os/linux/errno/sparc.zig	/XFULL = 104/;"	field
XGATE	$ZIGLIB/std/elf.zig	/XGATE = 115/;"	field
XHOSA	$ZIGLIB/std/os/windows/lang.zig	/^pub const XHOSA = 0x34/;"	constant
XHOSA_SOUTH_AFRICA	$ZIGLIB/std/os/windows/sublang.zig	/^pub const XHOSA_SOUTH_AFRICA = 0x01/;"	constant
XIMO16	$ZIGLIB/std/elf.zig	/XIMO16 = 170/;"	field
XLimbs	$ZIGLIB/std/crypto/pcurves/common.zig	/const XLimbs = [a.limbs.len + 1]Word/;"	constant
XMLDSIG_ERROR	$ZIGLIB/std/os/windows/win32error.zig	/XMLDSIG_ERROR = 1466/;"	field
XML_ENCODING_MISMATCH	$ZIGLIB/std/os/windows/ntstatus.zig	/XML_ENCODING_MISMATCH = 0xC0150021/;"	field
XML_PARSE_ERROR	$ZIGLIB/std/os/windows/win32error.zig	/XML_PARSE_ERROR = 1465/;"	field
XMMI64_INSTRUCTIONS_AVAILABLE	$ZIGLIB/std/os/windows.zig	/XMMI64_INSTRUCTIONS_AVAILABLE = 10/;"	field
XMMI_INSTRUCTIONS_AVAILABLE	$ZIGLIB/std/os/windows.zig	/XMMI_INSTRUCTIONS_AVAILABLE = 6/;"	field
XMM_SAVE_AREA32	$ZIGLIB/std/os/windows.zig	/pub const XMM_SAVE_AREA32 = extern struct {$/;"	struct
XNET	$ZIGLIB/std/c/freebsd.zig	/pub const XNET = 15/;"	constant
XP1_CONNECTIONLESS	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const XP1_CONNECTIONLESS = 1/;"	constant
XP1_CONNECT_DATA	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const XP1_CONNECT_DATA = 128/;"	constant
XP1_DISCONNECT_DATA	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const XP1_DISCONNECT_DATA = 256/;"	constant
XP1_EXPEDITED_DATA	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const XP1_EXPEDITED_DATA = 64/;"	constant
XP1_GRACEFUL_CLOSE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const XP1_GRACEFUL_CLOSE = 32/;"	constant
XP1_GUARANTEED_DELIVERY	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const XP1_GUARANTEED_DELIVERY = 2/;"	constant
XP1_GUARANTEED_ORDER	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const XP1_GUARANTEED_ORDER = 4/;"	constant
XP1_IFS_HANDLES	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const XP1_IFS_HANDLES = 131072/;"	constant
XP1_INTERRUPT	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const XP1_INTERRUPT = 16384/;"	constant
XP1_MESSAGE_ORIENTED	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const XP1_MESSAGE_ORIENTED = 8/;"	constant
XP1_MULTIPOINT_CONTROL_PLANE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const XP1_MULTIPOINT_CONTROL_PLANE = 2048/;"	constant
XP1_MULTIPOINT_DATA_PLANE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const XP1_MULTIPOINT_DATA_PLANE = 4096/;"	constant
XP1_PARTIAL_MESSAGE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const XP1_PARTIAL_MESSAGE = 262144/;"	constant
XP1_PSEUDO_STREAM	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const XP1_PSEUDO_STREAM = 16/;"	constant
XP1_QOS_SUPPORTED	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const XP1_QOS_SUPPORTED = 8192/;"	constant
XP1_SAN_SUPPORT_SDP	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const XP1_SAN_SUPPORT_SDP = 524288/;"	constant
XP1_SUPPORT_BROADCAST	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const XP1_SUPPORT_BROADCAST = 512/;"	constant
XP1_SUPPORT_MULTIPOINT	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const XP1_SUPPORT_MULTIPOINT = 1024/;"	constant
XP1_UNI_RECV	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const XP1_UNI_RECV = 65536/;"	constant
XP1_UNI_SEND	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const XP1_UNI_SEND = 32768/;"	constant
XP_BANDWIDTH_ALLOCATION	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const XP_BANDWIDTH_ALLOCATION = 2048/;"	constant
XP_CONNECTIONLESS	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const XP_CONNECTIONLESS = 1/;"	constant
XP_CONNECT_DATA	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const XP_CONNECT_DATA = 128/;"	constant
XP_DISCONNECT_DATA	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const XP_DISCONNECT_DATA = 256/;"	constant
XP_ENCRYPTS	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const XP_ENCRYPTS = 8192/;"	constant
XP_EXPEDITED_DATA	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const XP_EXPEDITED_DATA = 64/;"	constant
XP_FRAGMENTATION	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const XP_FRAGMENTATION = 4096/;"	constant
XP_GRACEFUL_CLOSE	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const XP_GRACEFUL_CLOSE = 32/;"	constant
XP_GUARANTEED_DELIVERY	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const XP_GUARANTEED_DELIVERY = 2/;"	constant
XP_GUARANTEED_ORDER	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const XP_GUARANTEED_ORDER = 4/;"	constant
XP_MESSAGE_ORIENTED	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const XP_MESSAGE_ORIENTED = 8/;"	constant
XP_PSEUDO_STREAM	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const XP_PSEUDO_STREAM = 16/;"	constant
XP_SUPPORTS_BROADCAST	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const XP_SUPPORTS_BROADCAST = 512/;"	constant
XP_SUPPORTS_MULTICAST	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const XP_SUPPORTS_MULTICAST = 1024/;"	constant
XRES	$ZIGLIB/std/c/solaris.zig	/pub const XRES = 38/;"	constant
XSAVE_ENABLED	$ZIGLIB/std/os/windows.zig	/XSAVE_ENABLED = 17/;"	field
XSK_UNALIGNED_BUF_ADDR_MASK	$ZIGLIB/std/os/linux.zig	/^pub const XSK_UNALIGNED_BUF_ADDR_MASK = (1 << XSK_UNALIGNED_BUF_OFFSET_SHIFT) - 1/;"	constant
XSK_UNALIGNED_BUF_OFFSET_SHIFT	$ZIGLIB/std/os/linux.zig	/^pub const XSK_UNALIGNED_BUF_OFFSET_SHIFT = 48/;"	constant
XSTATE_CONFIGURATION	$ZIGLIB/std/os/windows.zig	/^pub const XSTATE_CONFIGURATION = extern struct {$/;"	struct
XSTATE_FEATURE	$ZIGLIB/std/os/windows.zig	/^pub const XSTATE_FEATURE = extern struct {$/;"	struct
XSalsa	$ZIGLIB/std/crypto/salsa20.zig	/^pub fn XSalsa(comptime rounds: comptime_int) type {$/;"	function
XSalsa20	$ZIGLIB/std/crypto/salsa20.zig	/^pub const XSalsa20 = XSalsa(20)/;"	constant
XSalsa20Poly1305	$ZIGLIB/std/crypto/salsa20.zig	/^pub const XSalsa20Poly1305 = struct {$/;"	struct
XState	$ZIGLIB/std/os/windows.zig	/XState: XSTATE_CONFIGURATION/;"	field
XTENSA	$ZIGLIB/std/elf.zig	/XTENSA = 94/;"	field
X_OK	$ZIGLIB/std/os/wasi.zig	/^pub const X_OK = 1/;"	constant
Xchg	$ZIGLIB/std/builtin.zig	/Xchg/;"	field
XcmpXi2	$ZIGLIB/compiler_rt/cmp.zig	/^inline fn XcmpXi2(comptime T: type, a: T, b: T) i32 {$/;"	function
Xmm0	$ZIGLIB/std/os/windows.zig	/Xmm0: M128A/;"	field
Xmm1	$ZIGLIB/std/os/windows.zig	/Xmm1: M128A/;"	field
Xmm10	$ZIGLIB/std/os/windows.zig	/Xmm10: M128A/;"	field
Xmm11	$ZIGLIB/std/os/windows.zig	/Xmm11: M128A/;"	field
Xmm12	$ZIGLIB/std/os/windows.zig	/Xmm12: M128A/;"	field
Xmm13	$ZIGLIB/std/os/windows.zig	/Xmm13: M128A/;"	field
Xmm14	$ZIGLIB/std/os/windows.zig	/Xmm14: M128A/;"	field
Xmm15	$ZIGLIB/std/os/windows.zig	/Xmm15: M128A/;"	field
Xmm2	$ZIGLIB/std/os/windows.zig	/Xmm2: M128A/;"	field
Xmm3	$ZIGLIB/std/os/windows.zig	/Xmm3: M128A/;"	field
Xmm4	$ZIGLIB/std/os/windows.zig	/Xmm4: M128A/;"	field
Xmm5	$ZIGLIB/std/os/windows.zig	/Xmm5: M128A/;"	field
Xmm6	$ZIGLIB/std/os/windows.zig	/Xmm6: M128A/;"	field
Xmm7	$ZIGLIB/std/os/windows.zig	/Xmm7: M128A/;"	field
Xmm8	$ZIGLIB/std/os/windows.zig	/Xmm8: M128A/;"	field
Xmm9	$ZIGLIB/std/os/windows.zig	/Xmm9: M128A/;"	field
XmmRegisters	$ZIGLIB/std/os/windows.zig	/XmmRegisters: [16]M128A/;"	field
Xoodoo	$ZIGLIB/std/rand/Xoodoo.zig	/^const Xoodoo = @This()/;"	constant
Xoroshiro128	$ZIGLIB/std/rand/Xoroshiro128.zig	/^const Xoroshiro128 = @This()/;"	constant
Xoshiro256	$ZIGLIB/std/rand/Xoshiro256.zig	/^const Xoshiro256 = @This()/;"	constant
Y3_4	$ZIGLIB/std/crypto/pcurves/secp256k1.zig	/const Y3_4 = Y3.dbl().dbl()/;"	constant
YAKUT	$ZIGLIB/std/os/windows/lang.zig	/^pub const YAKUT = 0x85/;"	constant
YAKUT_RUSSIA	$ZIGLIB/std/os/windows/sublang.zig	/^pub const YAKUT_RUSSIA = 0x01/;"	constant
YI_PRC	$ZIGLIB/std/os/windows/sublang.zig	/^pub const YI_PRC = 0x01/;"	constant
YORUBA	$ZIGLIB/std/os/windows/lang.zig	/^pub const YORUBA = 0x6a/;"	constant
YORUBA_NIGERIA	$ZIGLIB/std/os/windows/sublang.zig	/^pub const YORUBA_NIGERIA = 0x01/;"	constant
Year	$ZIGLIB/std/time/epoch.zig	/^pub const Year = u16/;"	constant
YearAndDay	$ZIGLIB/std/time/epoch.zig	/^pub const YearAndDay = struct {$/;"	struct
YearLeapKind	$ZIGLIB/std/time/epoch.zig	/^pub const YearLeapKind = enum(u1) { not_leap, leap }/;"	enum
YesNo	$ZIGLIB/std/os/uefi/protocols/hii_popup_protocol.zig	/YesNo/;"	field
YesNoCancel	$ZIGLIB/std/os/uefi/protocols/hii_popup_protocol.zig	/YesNoCancel/;"	field
YieldError	$ZIGLIB/std/Thread.zig	/^pub const YieldError = error{$/;"	constant
ZEROCOPY	$ZIGLIB/std/os/linux.zig	/pub const ZEROCOPY = 62/;"	constant
ZEROCOPY_RECEIVE	$ZIGLIB/std/os/linux.zig	/pub const ZEROCOPY_RECEIVE = 35/;"	constant
ZEROIZE	$ZIGLIB/std/c/openbsd.zig	/pub const ZEROIZE = 0x2000/;"	constant
ZExp	$ZIGLIB/compiler_rt/mulf3.zig	/const ZExp = if (typeWidth >= 32) u32 else Z/;"	constant
ZONE	$ZIGLIB/std/c/solaris.zig	/ZONE = 8/;"	field
ZSignificand	$ZIGLIB/compiler_rt/mulf3.zig	/const ZSignificand = PowerOfTwoSignificandZ(T)/;"	constant
ZSignificandBits	$ZIGLIB/compiler_rt/mulf3.zig	/const ZSignificandBits = @typeInfo(ZSignificand).Int.bits/;"	constant
ZULU	$ZIGLIB/std/os/windows/lang.zig	/^pub const ZULU = 0x35/;"	constant
ZULU_SOUTH_AFRICA	$ZIGLIB/std/os/windows/sublang.zig	/^pub const ZULU_SOUTH_AFRICA = 0x01/;"	constant
Zero	$ZIGLIB/std/c/tokenizer.zig	/Zero/;"	field
ZeroStats	$ZIGLIB/std/valgrind/callgrind.zig	/ZeroStats/;"	field
ZigStruct	$ZIGLIB/std/mem.zig	/const ZigStruct = struct {$/;"	struct
ZigTable	$ZIGLIB/std/rand/ziggurat.zig	/^pub const ZigTable = struct {$/;"	struct
ZigTableGen	$ZIGLIB/std/rand/ziggurat.zig	/^fn ZigTableGen($/;"	function
ZlibStream	$ZIGLIB/std/compress/zlib.zig	/^pub fn ZlibStream(comptime ReaderType: type) type {$/;"	function
_100	$ZIGLIB/std/crypto/25519/scalar.zig	/const _100 = x.mul(_11)/;"	constant
_1000	$ZIGLIB/std/crypto/25519/scalar.zig	/const _1000 = _100.sq()/;"	constant
_10000	$ZIGLIB/std/crypto/25519/scalar.zig	/const _10000 = _1000.sq()/;"	constant
_100000	$ZIGLIB/std/crypto/25519/scalar.zig	/const _100000 = _1010.mul(_10110)/;"	constant
_1000000	$ZIGLIB/std/crypto/25519/scalar.zig	/const _1000000 = _100000.sq()/;"	constant
_10010011	$ZIGLIB/std/crypto/25519/scalar.zig	/const _10010011 = _1000000.mul(_1010011)/;"	constant
_10010111	$ZIGLIB/std/crypto/25519/scalar.zig	/const _10010111 = _100.mul(_10010011)/;"	constant
_100110	$ZIGLIB/std/crypto/25519/scalar.zig	/const _100110 = _10000.mul(_10110)/;"	constant
_1010	$ZIGLIB/std/crypto/25519/scalar.zig	/const _1010 = _10.mul(_1000)/;"	constant
_1010000	$ZIGLIB/std/crypto/25519/scalar.zig	/const _1010000 = _10000.mul(_1000000)/;"	constant
_1010011	$ZIGLIB/std/crypto/25519/scalar.zig	/const _1010011 = _11.mul(_1010000)/;"	constant
_1011	$ZIGLIB/std/crypto/25519/scalar.zig	/const _1011 = x.mul(_1010)/;"	constant
_10110	$ZIGLIB/std/crypto/25519/scalar.zig	/const _10110 = _1011.sq()/;"	constant
_10111101	$ZIGLIB/std/crypto/25519/scalar.zig	/const _10111101 = _100110.mul(_10010111)/;"	constant
_1100011	$ZIGLIB/std/crypto/25519/scalar.zig	/const _1100011 = _10000.mul(_1010011)/;"	constant
_1100111	$ZIGLIB/std/crypto/25519/scalar.zig	/const _1100111 = _100.mul(_1100011)/;"	constant
_11010011	$ZIGLIB/std/crypto/25519/scalar.zig	/const _11010011 = _10110.mul(_10111101)/;"	constant
_1101011	$ZIGLIB/std/crypto/25519/scalar.zig	/const _1101011 = _100.mul(_1100111)/;"	constant
_11100111	$ZIGLIB/std/crypto/25519/scalar.zig	/const _11100111 = _1010000.mul(_10010111)/;"	constant
_11101011	$ZIGLIB/std/crypto/25519/scalar.zig	/const _11101011 = _100.mul(_11100111)/;"	constant
_1111	$ZIGLIB/std/crypto/25519/field.zig	/const _1111 = _11.mul(_11.sq().sq())/;"	constant
_11110101	$ZIGLIB/std/crypto/25519/scalar.zig	/const _11110101 = _1010.mul(_11101011)/;"	constant
_11111111	$ZIGLIB/std/crypto/25519/field.zig	/const _11111111 = _1111.mul(_1111.sq().sq().sq().sq())/;"	constant
_BLOCK	$ZIGLIB/std/c/darwin.zig	/pub const _BLOCK = 1/;"	constant
_DYNAMIC	$ZIGLIB/std/dynamic_library.zig	/const _DYNAMIC = get_DYNAMIC() orelse {$/;"	constant
_DllMainCRTStartup	$ZIGLIB/std/start.zig	/^fn _DllMainCRTStartup($/;"	function
_ERRSTR	$ZIGLIB/std/os/plan9.zig	/_ERRSTR = 1/;"	field
_FSESSION	$ZIGLIB/std/os/plan9.zig	/_FSESSION = 9/;"	field
_FSTAT	$ZIGLIB/std/os/plan9.zig	/_FSTAT = 11/;"	field
_FWSTAT	$ZIGLIB/std/os/plan9.zig	/_FWSTAT = 27/;"	field
_MAX_PAGE_SHIFT	$ZIGLIB/std/c/openbsd.zig	/^const _MAX_PAGE_SHIFT = switch (builtin.cpu.arch) {$/;"	constant
_MOUNT	$ZIGLIB/std/os/plan9.zig	/_MOUNT = 13/;"	field
_NSEC	$ZIGLIB/std/os/plan9.zig	/_NSEC = 53/;"	field
_POSIX_SPAWN_DISABLE_ASLR	$ZIGLIB/std/c/darwin.zig	/^pub const _POSIX_SPAWN_DISABLE_ASLR = 0x0100/;"	constant
_POSIX_SPAWN_RESLIDE	$ZIGLIB/std/c/darwin.zig	/^pub const _POSIX_SPAWN_RESLIDE = 0x0800/;"	constant
_Qp_add	$ZIGLIB/compiler_rt/addtf3.zig	/^fn _Qp_add(c: *f128, a: *f128, b: *f128) callconv(.C) void {$/;"	function
_Qp_cmp	$ZIGLIB/compiler_rt/cmptf2.zig	/^fn _Qp_cmp(a: *const f128, b: *const f128) callconv(.C) i32 {$/;"	function
_Qp_div	$ZIGLIB/compiler_rt/divtf3.zig	/^fn _Qp_div(c: *f128, a: *const f128, b: *const f128) callconv(.C) void {$/;"	function
_Qp_dtoq	$ZIGLIB/compiler_rt/extenddftf2.zig	/^fn _Qp_dtoq(c: *f128, a: f64) callconv(.C) void {$/;"	function
_Qp_feq	$ZIGLIB/compiler_rt/cmptf2.zig	/^fn _Qp_feq(a: *const f128, b: *const f128) callconv(.C) bool {$/;"	function
_Qp_fge	$ZIGLIB/compiler_rt/cmptf2.zig	/^fn _Qp_fge(a: *const f128, b: *const f128) callconv(.C) bool {$/;"	function
_Qp_fgt	$ZIGLIB/compiler_rt/cmptf2.zig	/^fn _Qp_fgt(a: *const f128, b: *const f128) callconv(.C) bool {$/;"	function
_Qp_fle	$ZIGLIB/compiler_rt/cmptf2.zig	/^fn _Qp_fle(a: *const f128, b: *const f128) callconv(.C) bool {$/;"	function
_Qp_flt	$ZIGLIB/compiler_rt/cmptf2.zig	/^fn _Qp_flt(a: *const f128, b: *const f128) callconv(.C) bool {$/;"	function
_Qp_fne	$ZIGLIB/compiler_rt/cmptf2.zig	/^fn _Qp_fne(a: *const f128, b: *const f128) callconv(.C) bool {$/;"	function
_Qp_itoq	$ZIGLIB/compiler_rt/floatsitf.zig	/^fn _Qp_itoq(c: *f128, a: i32) callconv(.C) void {$/;"	function
_Qp_mul	$ZIGLIB/compiler_rt/multf3.zig	/^fn _Qp_mul(c: *f128, a: *const f128, b: *const f128) callconv(.C) void {$/;"	function
_Qp_qtod	$ZIGLIB/compiler_rt/trunctfdf2.zig	/^fn _Qp_qtod(a: *const f128) callconv(.C) f64 {$/;"	function
_Qp_qtoi	$ZIGLIB/compiler_rt/fixtfsi.zig	/^fn _Qp_qtoi(a: *const f128) callconv(.C) i32 {$/;"	function
_Qp_qtos	$ZIGLIB/compiler_rt/trunctfsf2.zig	/^fn _Qp_qtos(a: *const f128) callconv(.C) f32 {$/;"	function
_Qp_qtoui	$ZIGLIB/compiler_rt/fixunstfsi.zig	/^fn _Qp_qtoui(a: *const f128) callconv(.C) u32 {$/;"	function
_Qp_qtoux	$ZIGLIB/compiler_rt/fixunstfdi.zig	/^fn _Qp_qtoux(a: *const f128) callconv(.C) u64 {$/;"	function
_Qp_qtox	$ZIGLIB/compiler_rt/fixtfdi.zig	/^fn _Qp_qtox(a: *const f128) callconv(.C) i64 {$/;"	function
_Qp_stoq	$ZIGLIB/compiler_rt/extendsftf2.zig	/^fn _Qp_stoq(c: *f128, a: f32) callconv(.C) void {$/;"	function
_Qp_sub	$ZIGLIB/compiler_rt/subtf3.zig	/^fn _Qp_sub(c: *f128, a: *const f128, b: *const f128) callconv(.C) void {$/;"	function
_Qp_uitoq	$ZIGLIB/compiler_rt/floatunsitf.zig	/^fn _Qp_uitoq(c: *f128, a: u32) callconv(.C) void {$/;"	function
_Qp_uxtoq	$ZIGLIB/compiler_rt/floatunditf.zig	/^fn _Qp_uxtoq(c: *f128, a: u64) callconv(.C) void {$/;"	function
_Qp_xtoq	$ZIGLIB/compiler_rt/floatditf.zig	/^fn _Qp_xtoq(c: *f128, a: i64) callconv(.C) void {$/;"	function
_READ	$ZIGLIB/std/os/plan9.zig	/_READ = 15/;"	field
_SETMASK	$ZIGLIB/std/c/darwin.zig	/pub const _SETMASK = 3/;"	constant
_SIG_WORDS	$ZIGLIB/std/c/dragonfly.zig	/^pub const _SIG_WORDS = 4/;"	constant
_STAT	$ZIGLIB/std/os/plan9.zig	/_STAT = 18/;"	field
_UNBLOCK	$ZIGLIB/std/c/darwin.zig	/pub const _UNBLOCK = 2/;"	constant
_WAIT	$ZIGLIB/std/os/plan9.zig	/_WAIT = 36/;"	field
_WRITE	$ZIGLIB/std/os/plan9.zig	/_WRITE = 20/;"	field
_WSTAT	$ZIGLIB/std/os/plan9.zig	/_WSTAT = 26/;"	field
__PTHREAD_COND_SIZE__	$ZIGLIB/std/c/darwin.zig	/^const __PTHREAD_COND_SIZE__ = if (@sizeOf(usize) == 8) 40 else 24/;"	constant
__PTHREAD_MUTEX_SIZE__	$ZIGLIB/std/c/darwin.zig	/^const __PTHREAD_MUTEX_SIZE__ = if (@sizeOf(usize) == 8) 56 else 40/;"	constant
__SIZEOF_PTHREAD_COND_T	$ZIGLIB/std/c/minix.zig	/^const __SIZEOF_PTHREAD_COND_T = 48/;"	constant
__SIZEOF_PTHREAD_MUTEX_T	$ZIGLIB/std/c/minix.zig	/^const __SIZEOF_PTHREAD_MUTEX_T = switch (builtin.abi) {$/;"	constant
__SIZEOF_SEM_T	$ZIGLIB/std/c/linux.zig	/^const __SIZEOF_SEM_T = 4 * @sizeOf(usize)/;"	constant
___chkstk	$ZIGLIB/compiler_rt/stack_probe.zig	/^pub fn ___chkstk() callconv(.Naked) void {$/;"	function
___chkstk_ms	$ZIGLIB/compiler_rt/stack_probe.zig	/^pub fn ___chkstk_ms() callconv(.Naked) void {$/;"	function
__aarch64_cas16_acq	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_cas16_acq() align(16) callconv(.Naked) void {$/;"	function
__aarch64_cas16_acq_rel	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_cas16_acq_rel() align(16) callconv(.Naked) void {$/;"	function
__aarch64_cas16_rel	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_cas16_rel() align(16) callconv(.Naked) void {$/;"	function
__aarch64_cas16_relax	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_cas16_relax() align(16) callconv(.Naked) void {$/;"	function
__aarch64_cas1_acq	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_cas1_acq() align(16) callconv(.Naked) void {$/;"	function
__aarch64_cas1_acq_rel	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_cas1_acq_rel() align(16) callconv(.Naked) void {$/;"	function
__aarch64_cas1_rel	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_cas1_rel() align(16) callconv(.Naked) void {$/;"	function
__aarch64_cas1_relax	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_cas1_relax() align(16) callconv(.Naked) void {$/;"	function
__aarch64_cas2_acq	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_cas2_acq() align(16) callconv(.Naked) void {$/;"	function
__aarch64_cas2_acq_rel	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_cas2_acq_rel() align(16) callconv(.Naked) void {$/;"	function
__aarch64_cas2_rel	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_cas2_rel() align(16) callconv(.Naked) void {$/;"	function
__aarch64_cas2_relax	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_cas2_relax() align(16) callconv(.Naked) void {$/;"	function
__aarch64_cas4_acq	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_cas4_acq() align(16) callconv(.Naked) void {$/;"	function
__aarch64_cas4_acq_rel	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_cas4_acq_rel() align(16) callconv(.Naked) void {$/;"	function
__aarch64_cas4_rel	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_cas4_rel() align(16) callconv(.Naked) void {$/;"	function
__aarch64_cas4_relax	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_cas4_relax() align(16) callconv(.Naked) void {$/;"	function
__aarch64_cas8_acq	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_cas8_acq() align(16) callconv(.Naked) void {$/;"	function
__aarch64_cas8_acq_rel	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_cas8_acq_rel() align(16) callconv(.Naked) void {$/;"	function
__aarch64_cas8_rel	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_cas8_rel() align(16) callconv(.Naked) void {$/;"	function
__aarch64_cas8_relax	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_cas8_relax() align(16) callconv(.Naked) void {$/;"	function
__aarch64_have_lse_atomics	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^var __aarch64_have_lse_atomics: u8 = @boolToInt(always_has_lse)/;"	variable
__aarch64_ldadd1_acq	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_ldadd1_acq() align(16) callconv(.Naked) void {$/;"	function
__aarch64_ldadd1_acq_rel	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_ldadd1_acq_rel() align(16) callconv(.Naked) void {$/;"	function
__aarch64_ldadd1_rel	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_ldadd1_rel() align(16) callconv(.Naked) void {$/;"	function
__aarch64_ldadd1_relax	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_ldadd1_relax() align(16) callconv(.Naked) void {$/;"	function
__aarch64_ldadd2_acq	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_ldadd2_acq() align(16) callconv(.Naked) void {$/;"	function
__aarch64_ldadd2_acq_rel	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_ldadd2_acq_rel() align(16) callconv(.Naked) void {$/;"	function
__aarch64_ldadd2_rel	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_ldadd2_rel() align(16) callconv(.Naked) void {$/;"	function
__aarch64_ldadd2_relax	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_ldadd2_relax() align(16) callconv(.Naked) void {$/;"	function
__aarch64_ldadd4_acq	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_ldadd4_acq() align(16) callconv(.Naked) void {$/;"	function
__aarch64_ldadd4_acq_rel	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_ldadd4_acq_rel() align(16) callconv(.Naked) void {$/;"	function
__aarch64_ldadd4_rel	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_ldadd4_rel() align(16) callconv(.Naked) void {$/;"	function
__aarch64_ldadd4_relax	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_ldadd4_relax() align(16) callconv(.Naked) void {$/;"	function
__aarch64_ldadd8_acq	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_ldadd8_acq() align(16) callconv(.Naked) void {$/;"	function
__aarch64_ldadd8_acq_rel	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_ldadd8_acq_rel() align(16) callconv(.Naked) void {$/;"	function
__aarch64_ldadd8_rel	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_ldadd8_rel() align(16) callconv(.Naked) void {$/;"	function
__aarch64_ldadd8_relax	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_ldadd8_relax() align(16) callconv(.Naked) void {$/;"	function
__aarch64_ldclr1_acq	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_ldclr1_acq() align(16) callconv(.Naked) void {$/;"	function
__aarch64_ldclr1_acq_rel	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_ldclr1_acq_rel() align(16) callconv(.Naked) void {$/;"	function
__aarch64_ldclr1_rel	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_ldclr1_rel() align(16) callconv(.Naked) void {$/;"	function
__aarch64_ldclr1_relax	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_ldclr1_relax() align(16) callconv(.Naked) void {$/;"	function
__aarch64_ldclr2_acq	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_ldclr2_acq() align(16) callconv(.Naked) void {$/;"	function
__aarch64_ldclr2_acq_rel	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_ldclr2_acq_rel() align(16) callconv(.Naked) void {$/;"	function
__aarch64_ldclr2_rel	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_ldclr2_rel() align(16) callconv(.Naked) void {$/;"	function
__aarch64_ldclr2_relax	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_ldclr2_relax() align(16) callconv(.Naked) void {$/;"	function
__aarch64_ldclr4_acq	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_ldclr4_acq() align(16) callconv(.Naked) void {$/;"	function
__aarch64_ldclr4_acq_rel	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_ldclr4_acq_rel() align(16) callconv(.Naked) void {$/;"	function
__aarch64_ldclr4_rel	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_ldclr4_rel() align(16) callconv(.Naked) void {$/;"	function
__aarch64_ldclr4_relax	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_ldclr4_relax() align(16) callconv(.Naked) void {$/;"	function
__aarch64_ldclr8_acq	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_ldclr8_acq() align(16) callconv(.Naked) void {$/;"	function
__aarch64_ldclr8_acq_rel	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_ldclr8_acq_rel() align(16) callconv(.Naked) void {$/;"	function
__aarch64_ldclr8_rel	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_ldclr8_rel() align(16) callconv(.Naked) void {$/;"	function
__aarch64_ldclr8_relax	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_ldclr8_relax() align(16) callconv(.Naked) void {$/;"	function
__aarch64_ldeor1_acq	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_ldeor1_acq() align(16) callconv(.Naked) void {$/;"	function
__aarch64_ldeor1_acq_rel	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_ldeor1_acq_rel() align(16) callconv(.Naked) void {$/;"	function
__aarch64_ldeor1_rel	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_ldeor1_rel() align(16) callconv(.Naked) void {$/;"	function
__aarch64_ldeor1_relax	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_ldeor1_relax() align(16) callconv(.Naked) void {$/;"	function
__aarch64_ldeor2_acq	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_ldeor2_acq() align(16) callconv(.Naked) void {$/;"	function
__aarch64_ldeor2_acq_rel	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_ldeor2_acq_rel() align(16) callconv(.Naked) void {$/;"	function
__aarch64_ldeor2_rel	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_ldeor2_rel() align(16) callconv(.Naked) void {$/;"	function
__aarch64_ldeor2_relax	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_ldeor2_relax() align(16) callconv(.Naked) void {$/;"	function
__aarch64_ldeor4_acq	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_ldeor4_acq() align(16) callconv(.Naked) void {$/;"	function
__aarch64_ldeor4_acq_rel	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_ldeor4_acq_rel() align(16) callconv(.Naked) void {$/;"	function
__aarch64_ldeor4_rel	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_ldeor4_rel() align(16) callconv(.Naked) void {$/;"	function
__aarch64_ldeor4_relax	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_ldeor4_relax() align(16) callconv(.Naked) void {$/;"	function
__aarch64_ldeor8_acq	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_ldeor8_acq() align(16) callconv(.Naked) void {$/;"	function
__aarch64_ldeor8_acq_rel	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_ldeor8_acq_rel() align(16) callconv(.Naked) void {$/;"	function
__aarch64_ldeor8_rel	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_ldeor8_rel() align(16) callconv(.Naked) void {$/;"	function
__aarch64_ldeor8_relax	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_ldeor8_relax() align(16) callconv(.Naked) void {$/;"	function
__aarch64_ldset1_acq	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_ldset1_acq() align(16) callconv(.Naked) void {$/;"	function
__aarch64_ldset1_acq_rel	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_ldset1_acq_rel() align(16) callconv(.Naked) void {$/;"	function
__aarch64_ldset1_rel	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_ldset1_rel() align(16) callconv(.Naked) void {$/;"	function
__aarch64_ldset1_relax	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_ldset1_relax() align(16) callconv(.Naked) void {$/;"	function
__aarch64_ldset2_acq	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_ldset2_acq() align(16) callconv(.Naked) void {$/;"	function
__aarch64_ldset2_acq_rel	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_ldset2_acq_rel() align(16) callconv(.Naked) void {$/;"	function
__aarch64_ldset2_rel	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_ldset2_rel() align(16) callconv(.Naked) void {$/;"	function
__aarch64_ldset2_relax	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_ldset2_relax() align(16) callconv(.Naked) void {$/;"	function
__aarch64_ldset4_acq	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_ldset4_acq() align(16) callconv(.Naked) void {$/;"	function
__aarch64_ldset4_acq_rel	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_ldset4_acq_rel() align(16) callconv(.Naked) void {$/;"	function
__aarch64_ldset4_rel	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_ldset4_rel() align(16) callconv(.Naked) void {$/;"	function
__aarch64_ldset4_relax	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_ldset4_relax() align(16) callconv(.Naked) void {$/;"	function
__aarch64_ldset8_acq	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_ldset8_acq() align(16) callconv(.Naked) void {$/;"	function
__aarch64_ldset8_acq_rel	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_ldset8_acq_rel() align(16) callconv(.Naked) void {$/;"	function
__aarch64_ldset8_rel	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_ldset8_rel() align(16) callconv(.Naked) void {$/;"	function
__aarch64_ldset8_relax	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_ldset8_relax() align(16) callconv(.Naked) void {$/;"	function
__aarch64_swp1_acq	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_swp1_acq() align(16) callconv(.Naked) void {$/;"	function
__aarch64_swp1_acq_rel	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_swp1_acq_rel() align(16) callconv(.Naked) void {$/;"	function
__aarch64_swp1_rel	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_swp1_rel() align(16) callconv(.Naked) void {$/;"	function
__aarch64_swp1_relax	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_swp1_relax() align(16) callconv(.Naked) void {$/;"	function
__aarch64_swp2_acq	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_swp2_acq() align(16) callconv(.Naked) void {$/;"	function
__aarch64_swp2_acq_rel	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_swp2_acq_rel() align(16) callconv(.Naked) void {$/;"	function
__aarch64_swp2_rel	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_swp2_rel() align(16) callconv(.Naked) void {$/;"	function
__aarch64_swp2_relax	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_swp2_relax() align(16) callconv(.Naked) void {$/;"	function
__aarch64_swp4_acq	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_swp4_acq() align(16) callconv(.Naked) void {$/;"	function
__aarch64_swp4_acq_rel	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_swp4_acq_rel() align(16) callconv(.Naked) void {$/;"	function
__aarch64_swp4_rel	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_swp4_rel() align(16) callconv(.Naked) void {$/;"	function
__aarch64_swp4_relax	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_swp4_relax() align(16) callconv(.Naked) void {$/;"	function
__aarch64_swp8_acq	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_swp8_acq() align(16) callconv(.Naked) void {$/;"	function
__aarch64_swp8_acq_rel	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_swp8_acq_rel() align(16) callconv(.Naked) void {$/;"	function
__aarch64_swp8_rel	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_swp8_rel() align(16) callconv(.Naked) void {$/;"	function
__aarch64_swp8_relax	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^fn __aarch64_swp8_relax() align(16) callconv(.Naked) void {$/;"	function
__absvdi2	$ZIGLIB/compiler_rt/absvdi2.zig	/^pub fn __absvdi2(a: i64) callconv(.C) i64 {$/;"	function
__absvsi2	$ZIGLIB/compiler_rt/absvsi2.zig	/^pub fn __absvsi2(a: i32) callconv(.C) i32 {$/;"	function
__absvti2	$ZIGLIB/compiler_rt/absvti2.zig	/^pub fn __absvti2(a: i128) callconv(.C) i128 {$/;"	function
__adddf3	$ZIGLIB/compiler_rt/adddf3.zig	/^fn __adddf3(a: f64, b: f64) callconv(.C) f64 {$/;"	function
__addhf3	$ZIGLIB/compiler_rt/addhf3.zig	/^fn __addhf3(a: f16, b: f16) callconv(.C) f16 {$/;"	function
__addodi4	$ZIGLIB/compiler_rt/addo.zig	/^pub fn __addodi4(a: i64, b: i64, overflow: *c_int) callconv(.C) i64 {$/;"	function
__addosi4	$ZIGLIB/compiler_rt/addo.zig	/^pub fn __addosi4(a: i32, b: i32, overflow: *c_int) callconv(.C) i32 {$/;"	function
__addoti4	$ZIGLIB/compiler_rt/addo.zig	/^pub fn __addoti4(a: i128, b: i128, overflow: *c_int) callconv(.C) i128 {$/;"	function
__addsf3	$ZIGLIB/compiler_rt/addsf3.zig	/^fn __addsf3(a: f32, b: f32) callconv(.C) f32 {$/;"	function
__addtf3	$ZIGLIB/compiler_rt/addtf3.zig	/^pub fn __addtf3(a: f128, b: f128) callconv(.C) f128 {$/;"	function
__addxf3	$ZIGLIB/compiler_rt/addxf3.zig	/^pub fn __addxf3(a: f80, b: f80) callconv(.C) f80 {$/;"	function
__aeabi_d2f	$ZIGLIB/compiler_rt/truncdfsf2.zig	/^fn __aeabi_d2f(a: f64) callconv(.AAPCS) f32 {$/;"	function
__aeabi_d2h	$ZIGLIB/compiler_rt/truncdfhf2.zig	/^fn __aeabi_d2h(a: f64) callconv(.AAPCS) u16 {$/;"	function
__aeabi_d2iz	$ZIGLIB/compiler_rt/fixdfsi.zig	/^fn __aeabi_d2iz(a: f64) callconv(.AAPCS) i32 {$/;"	function
__aeabi_d2lz	$ZIGLIB/compiler_rt/fixdfdi.zig	/^fn __aeabi_d2lz(a: f64) callconv(.AAPCS) i64 {$/;"	function
__aeabi_d2uiz	$ZIGLIB/compiler_rt/fixunsdfsi.zig	/^fn __aeabi_d2uiz(a: f64) callconv(.AAPCS) u32 {$/;"	function
__aeabi_d2ulz	$ZIGLIB/compiler_rt/fixunsdfdi.zig	/^fn __aeabi_d2ulz(a: f64) callconv(.AAPCS) u64 {$/;"	function
__aeabi_dadd	$ZIGLIB/compiler_rt/adddf3.zig	/^fn __aeabi_dadd(a: f64, b: f64) callconv(.AAPCS) f64 {$/;"	function
__aeabi_dcmpeq	$ZIGLIB/compiler_rt/cmpdf2.zig	/^fn __aeabi_dcmpeq(a: f64, b: f64) callconv(.AAPCS) i32 {$/;"	function
__aeabi_dcmpge	$ZIGLIB/compiler_rt/gedf2.zig	/^fn __aeabi_dcmpge(a: f64, b: f64) callconv(.AAPCS) i32 {$/;"	function
__aeabi_dcmpgt	$ZIGLIB/compiler_rt/gedf2.zig	/^fn __aeabi_dcmpgt(a: f64, b: f64) callconv(.AAPCS) i32 {$/;"	function
__aeabi_dcmple	$ZIGLIB/compiler_rt/cmpdf2.zig	/^fn __aeabi_dcmple(a: f64, b: f64) callconv(.AAPCS) i32 {$/;"	function
__aeabi_dcmplt	$ZIGLIB/compiler_rt/cmpdf2.zig	/^fn __aeabi_dcmplt(a: f64, b: f64) callconv(.AAPCS) i32 {$/;"	function
__aeabi_dcmpun	$ZIGLIB/compiler_rt/unorddf2.zig	/^fn __aeabi_dcmpun(a: f64, b: f64) callconv(.AAPCS) i32 {$/;"	function
__aeabi_ddiv	$ZIGLIB/compiler_rt/divdf3.zig	/^fn __aeabi_ddiv(a: f64, b: f64) callconv(.AAPCS) f64 {$/;"	function
__aeabi_dmul	$ZIGLIB/compiler_rt/muldf3.zig	/^fn __aeabi_dmul(a: f64, b: f64) callconv(.AAPCS) f64 {$/;"	function
__aeabi_dneg	$ZIGLIB/compiler_rt/negdf2.zig	/^fn __aeabi_dneg(a: f64) callconv(.AAPCS) f64 {$/;"	function
__aeabi_dsub	$ZIGLIB/compiler_rt/subdf3.zig	/^fn __aeabi_dsub(a: f64, b: f64) callconv(.AAPCS) f64 {$/;"	function
__aeabi_f2d	$ZIGLIB/compiler_rt/extendsfdf2.zig	/^fn __aeabi_f2d(a: f32) callconv(.AAPCS) f64 {$/;"	function
__aeabi_f2h	$ZIGLIB/compiler_rt/truncsfhf2.zig	/^fn __aeabi_f2h(a: f32) callconv(.AAPCS) u16 {$/;"	function
__aeabi_f2iz	$ZIGLIB/compiler_rt/fixsfsi.zig	/^fn __aeabi_f2iz(a: f32) callconv(.AAPCS) i32 {$/;"	function
__aeabi_f2lz	$ZIGLIB/compiler_rt/fixsfdi.zig	/^fn __aeabi_f2lz(a: f32) callconv(.AAPCS) i64 {$/;"	function
__aeabi_f2uiz	$ZIGLIB/compiler_rt/fixunssfsi.zig	/^fn __aeabi_f2uiz(a: f32) callconv(.AAPCS) u32 {$/;"	function
__aeabi_f2ulz	$ZIGLIB/compiler_rt/fixunssfdi.zig	/^fn __aeabi_f2ulz(a: f32) callconv(.AAPCS) u64 {$/;"	function
__aeabi_fadd	$ZIGLIB/compiler_rt/addsf3.zig	/^fn __aeabi_fadd(a: f32, b: f32) callconv(.AAPCS) f32 {$/;"	function
__aeabi_fcmpeq	$ZIGLIB/compiler_rt/cmpsf2.zig	/^fn __aeabi_fcmpeq(a: f32, b: f32) callconv(.AAPCS) i32 {$/;"	function
__aeabi_fcmpge	$ZIGLIB/compiler_rt/gesf2.zig	/^fn __aeabi_fcmpge(a: f32, b: f32) callconv(.AAPCS) i32 {$/;"	function
__aeabi_fcmpgt	$ZIGLIB/compiler_rt/gesf2.zig	/^fn __aeabi_fcmpgt(a: f32, b: f32) callconv(.AAPCS) i32 {$/;"	function
__aeabi_fcmple	$ZIGLIB/compiler_rt/cmpsf2.zig	/^fn __aeabi_fcmple(a: f32, b: f32) callconv(.AAPCS) i32 {$/;"	function
__aeabi_fcmplt	$ZIGLIB/compiler_rt/cmpsf2.zig	/^fn __aeabi_fcmplt(a: f32, b: f32) callconv(.AAPCS) i32 {$/;"	function
__aeabi_fcmpun	$ZIGLIB/compiler_rt/unordsf2.zig	/^fn __aeabi_fcmpun(a: f32, b: f32) callconv(.AAPCS) i32 {$/;"	function
__aeabi_fdiv	$ZIGLIB/compiler_rt/divsf3.zig	/^fn __aeabi_fdiv(a: f32, b: f32) callconv(.AAPCS) f32 {$/;"	function
__aeabi_fmul	$ZIGLIB/compiler_rt/mulsf3.zig	/^fn __aeabi_fmul(a: f32, b: f32) callconv(.AAPCS) f32 {$/;"	function
__aeabi_fneg	$ZIGLIB/compiler_rt/negsf2.zig	/^fn __aeabi_fneg(a: f32) callconv(.AAPCS) f32 {$/;"	function
__aeabi_fsub	$ZIGLIB/compiler_rt/subsf3.zig	/^fn __aeabi_fsub(a: f32, b: f32) callconv(.AAPCS) f32 {$/;"	function
__aeabi_h2f	$ZIGLIB/compiler_rt/extendhfsf2.zig	/^fn __aeabi_h2f(a: u16) callconv(.AAPCS) f32 {$/;"	function
__aeabi_i2d	$ZIGLIB/compiler_rt/floatsidf.zig	/^fn __aeabi_i2d(a: i32) callconv(.AAPCS) f64 {$/;"	function
__aeabi_i2f	$ZIGLIB/compiler_rt/floatsisf.zig	/^fn __aeabi_i2f(a: i32) callconv(.AAPCS) f32 {$/;"	function
__aeabi_idiv	$ZIGLIB/compiler_rt/int.zig	/^fn __aeabi_idiv(n: i32, d: i32) callconv(.AAPCS) i32 {$/;"	function
__aeabi_idivmod	$ZIGLIB/compiler_rt/arm.zig	/^pub fn __aeabi_idivmod() callconv(.Naked) void {$/;"	function
__aeabi_l2d	$ZIGLIB/compiler_rt/floatdidf.zig	/^fn __aeabi_l2d(a: i64) callconv(.AAPCS) f64 {$/;"	function
__aeabi_l2f	$ZIGLIB/compiler_rt/floatdisf.zig	/^fn __aeabi_l2f(a: i64) callconv(.AAPCS) f32 {$/;"	function
__aeabi_lasr	$ZIGLIB/compiler_rt/shift.zig	/^fn __aeabi_lasr(a: i64, b: i32) callconv(.AAPCS) i64 {$/;"	function
__aeabi_ldivmod	$ZIGLIB/compiler_rt/arm.zig	/^pub fn __aeabi_ldivmod() callconv(.Naked) void {$/;"	function
__aeabi_llsl	$ZIGLIB/compiler_rt/shift.zig	/^fn __aeabi_llsl(a: i64, b: i32) callconv(.AAPCS) i64 {$/;"	function
__aeabi_llsr	$ZIGLIB/compiler_rt/shift.zig	/^fn __aeabi_llsr(a: i64, b: i32) callconv(.AAPCS) i64 {$/;"	function
__aeabi_lmul	$ZIGLIB/compiler_rt/muldi3.zig	/^fn __aeabi_lmul(a: i64, b: i64) callconv(.AAPCS) i64 {$/;"	function
__aeabi_memclr	$ZIGLIB/compiler_rt/arm.zig	/^pub fn __aeabi_memclr(dest: [*]u8, n: usize) callconv(.AAPCS) void {$/;"	function
__aeabi_memclr4	$ZIGLIB/compiler_rt/arm.zig	/^pub fn __aeabi_memclr4(dest: [*]u8, n: usize) callconv(.AAPCS) void {$/;"	function
__aeabi_memclr8	$ZIGLIB/compiler_rt/arm.zig	/^pub fn __aeabi_memclr8(dest: [*]u8, n: usize) callconv(.AAPCS) void {$/;"	function
__aeabi_memcpy	$ZIGLIB/compiler_rt/arm.zig	/^pub fn __aeabi_memcpy(dest: [*]u8, src: [*]u8, n: usize) callconv(.AAPCS) void {$/;"	function
__aeabi_memcpy4	$ZIGLIB/compiler_rt/arm.zig	/^pub fn __aeabi_memcpy4(dest: [*]u8, src: [*]u8, n: usize) callconv(.AAPCS) void {$/;"	function
__aeabi_memcpy8	$ZIGLIB/compiler_rt/arm.zig	/^pub fn __aeabi_memcpy8(dest: [*]u8, src: [*]u8, n: usize) callconv(.AAPCS) void {$/;"	function
__aeabi_memmove	$ZIGLIB/compiler_rt/arm.zig	/^pub fn __aeabi_memmove(dest: [*]u8, src: [*]u8, n: usize) callconv(.AAPCS) void {$/;"	function
__aeabi_memmove4	$ZIGLIB/compiler_rt/arm.zig	/^pub fn __aeabi_memmove4(dest: [*]u8, src: [*]u8, n: usize) callconv(.AAPCS) void {$/;"	function
__aeabi_memmove8	$ZIGLIB/compiler_rt/arm.zig	/^pub fn __aeabi_memmove8(dest: [*]u8, src: [*]u8, n: usize) callconv(.AAPCS) void {$/;"	function
__aeabi_memset	$ZIGLIB/compiler_rt/arm.zig	/^pub fn __aeabi_memset(dest: [*]u8, n: usize, c: u8) callconv(.AAPCS) void {$/;"	function
__aeabi_memset4	$ZIGLIB/compiler_rt/arm.zig	/^pub fn __aeabi_memset4(dest: [*]u8, n: usize, c: u8) callconv(.AAPCS) void {$/;"	function
__aeabi_memset8	$ZIGLIB/compiler_rt/arm.zig	/^pub fn __aeabi_memset8(dest: [*]u8, n: usize, c: u8) callconv(.AAPCS) void {$/;"	function
__aeabi_read_tp	$ZIGLIB/compiler_rt/arm.zig	/^pub fn __aeabi_read_tp() callconv(.Naked) void {$/;"	function
__aeabi_ui2d	$ZIGLIB/compiler_rt/floatunsidf.zig	/^fn __aeabi_ui2d(a: u32) callconv(.AAPCS) f64 {$/;"	function
__aeabi_ui2f	$ZIGLIB/compiler_rt/floatunsisf.zig	/^fn __aeabi_ui2f(a: u32) callconv(.AAPCS) f32 {$/;"	function
__aeabi_uidiv	$ZIGLIB/compiler_rt/int.zig	/^fn __aeabi_uidiv(n: u32, d: u32) callconv(.AAPCS) u32 {$/;"	function
__aeabi_uidivmod	$ZIGLIB/compiler_rt/arm.zig	/^pub fn __aeabi_uidivmod() callconv(.Naked) void {$/;"	function
__aeabi_ul2d	$ZIGLIB/compiler_rt/floatundidf.zig	/^fn __aeabi_ul2d(a: u64) callconv(.AAPCS) f64 {$/;"	function
__aeabi_ul2f	$ZIGLIB/compiler_rt/floatundisf.zig	/^fn __aeabi_ul2f(a: u64) callconv(.AAPCS) f32 {$/;"	function
__aeabi_uldivmod	$ZIGLIB/compiler_rt/arm.zig	/^pub fn __aeabi_uldivmod() callconv(.Naked) void {$/;"	function
__aeabi_unwind_cpp_pr0	$ZIGLIB/compiler_rt/arm.zig	/^pub fn __aeabi_unwind_cpp_pr0() callconv(.AAPCS) void {}$/;"	function
__aeabi_unwind_cpp_pr1	$ZIGLIB/compiler_rt/arm.zig	/^pub fn __aeabi_unwind_cpp_pr1() callconv(.AAPCS) void {}$/;"	function
__aeabi_unwind_cpp_pr2	$ZIGLIB/compiler_rt/arm.zig	/^pub fn __aeabi_unwind_cpp_pr2() callconv(.AAPCS) void {}$/;"	function
__align	$ZIGLIB/std/c/linux.zig	/__align: c_long/;"	field
__ashldi3	$ZIGLIB/compiler_rt/shift.zig	/^pub fn __ashldi3(a: i64, b: i32) callconv(.C) i64 {$/;"	function
__ashlti3	$ZIGLIB/compiler_rt/shift.zig	/^pub fn __ashlti3(a: i128, b: i32) callconv(.C) i128 {$/;"	function
__ashrdi3	$ZIGLIB/compiler_rt/shift.zig	/^pub fn __ashrdi3(a: i64, b: i32) callconv(.C) i64 {$/;"	function
__ashrti3	$ZIGLIB/compiler_rt/shift.zig	/^pub fn __ashrti3(a: i128, b: i32) callconv(.C) i128 {$/;"	function
__atomic_compare_exchange	$ZIGLIB/compiler_rt/atomics.zig	/^fn __atomic_compare_exchange($/;"	function
__atomic_compare_exchange_1	$ZIGLIB/compiler_rt/atomics.zig	/^fn __atomic_compare_exchange_1(ptr: *u8, expected: *u8, desired: u8, success: i32, failure: i32) callconv(.C) i32 {$/;"	function
__atomic_compare_exchange_16	$ZIGLIB/compiler_rt/atomics.zig	/^fn __atomic_compare_exchange_16(ptr: *u128, expected: *u128, desired: u128, success: i32, failure: i32) callconv(.C) i32 {$/;"	function
__atomic_compare_exchange_2	$ZIGLIB/compiler_rt/atomics.zig	/^fn __atomic_compare_exchange_2(ptr: *u16, expected: *u16, desired: u16, success: i32, failure: i32) callconv(.C) i32 {$/;"	function
__atomic_compare_exchange_4	$ZIGLIB/compiler_rt/atomics.zig	/^fn __atomic_compare_exchange_4(ptr: *u32, expected: *u32, desired: u32, success: i32, failure: i32) callconv(.C) i32 {$/;"	function
__atomic_compare_exchange_8	$ZIGLIB/compiler_rt/atomics.zig	/^fn __atomic_compare_exchange_8(ptr: *u64, expected: *u64, desired: u64, success: i32, failure: i32) callconv(.C) i32 {$/;"	function
__atomic_exchange	$ZIGLIB/compiler_rt/atomics.zig	/^fn __atomic_exchange(size: u32, ptr: [*]u8, val: [*]u8, old: [*]u8, model: i32) callconv(.C) void {$/;"	function
__atomic_exchange_1	$ZIGLIB/compiler_rt/atomics.zig	/^fn __atomic_exchange_1(ptr: *u8, val: u8, model: i32) callconv(.C) u8 {$/;"	function
__atomic_exchange_16	$ZIGLIB/compiler_rt/atomics.zig	/^fn __atomic_exchange_16(ptr: *u128, val: u128, model: i32) callconv(.C) u128 {$/;"	function
__atomic_exchange_2	$ZIGLIB/compiler_rt/atomics.zig	/^fn __atomic_exchange_2(ptr: *u16, val: u16, model: i32) callconv(.C) u16 {$/;"	function
__atomic_exchange_4	$ZIGLIB/compiler_rt/atomics.zig	/^fn __atomic_exchange_4(ptr: *u32, val: u32, model: i32) callconv(.C) u32 {$/;"	function
__atomic_exchange_8	$ZIGLIB/compiler_rt/atomics.zig	/^fn __atomic_exchange_8(ptr: *u64, val: u64, model: i32) callconv(.C) u64 {$/;"	function
__atomic_fetch_add_1	$ZIGLIB/compiler_rt/atomics.zig	/^fn __atomic_fetch_add_1(ptr: *u8, val: u8, model: i32) callconv(.C) u8 {$/;"	function
__atomic_fetch_add_16	$ZIGLIB/compiler_rt/atomics.zig	/^fn __atomic_fetch_add_16(ptr: *u128, val: u128, model: i32) callconv(.C) u128 {$/;"	function
__atomic_fetch_add_2	$ZIGLIB/compiler_rt/atomics.zig	/^fn __atomic_fetch_add_2(ptr: *u16, val: u16, model: i32) callconv(.C) u16 {$/;"	function
__atomic_fetch_add_4	$ZIGLIB/compiler_rt/atomics.zig	/^fn __atomic_fetch_add_4(ptr: *u32, val: u32, model: i32) callconv(.C) u32 {$/;"	function
__atomic_fetch_add_8	$ZIGLIB/compiler_rt/atomics.zig	/^fn __atomic_fetch_add_8(ptr: *u64, val: u64, model: i32) callconv(.C) u64 {$/;"	function
__atomic_fetch_and_1	$ZIGLIB/compiler_rt/atomics.zig	/^fn __atomic_fetch_and_1(ptr: *u8, val: u8, model: i32) callconv(.C) u8 {$/;"	function
__atomic_fetch_and_16	$ZIGLIB/compiler_rt/atomics.zig	/^fn __atomic_fetch_and_16(ptr: *u128, val: u128, model: i32) callconv(.C) u128 {$/;"	function
__atomic_fetch_and_2	$ZIGLIB/compiler_rt/atomics.zig	/^fn __atomic_fetch_and_2(ptr: *u16, val: u16, model: i32) callconv(.C) u16 {$/;"	function
__atomic_fetch_and_4	$ZIGLIB/compiler_rt/atomics.zig	/^fn __atomic_fetch_and_4(ptr: *u32, val: u32, model: i32) callconv(.C) u32 {$/;"	function
__atomic_fetch_and_8	$ZIGLIB/compiler_rt/atomics.zig	/^fn __atomic_fetch_and_8(ptr: *u64, val: u64, model: i32) callconv(.C) u64 {$/;"	function
__atomic_fetch_nand_1	$ZIGLIB/compiler_rt/atomics.zig	/^fn __atomic_fetch_nand_1(ptr: *u8, val: u8, model: i32) callconv(.C) u8 {$/;"	function
__atomic_fetch_nand_16	$ZIGLIB/compiler_rt/atomics.zig	/^fn __atomic_fetch_nand_16(ptr: *u128, val: u128, model: i32) callconv(.C) u128 {$/;"	function
__atomic_fetch_nand_2	$ZIGLIB/compiler_rt/atomics.zig	/^fn __atomic_fetch_nand_2(ptr: *u16, val: u16, model: i32) callconv(.C) u16 {$/;"	function
__atomic_fetch_nand_4	$ZIGLIB/compiler_rt/atomics.zig	/^fn __atomic_fetch_nand_4(ptr: *u32, val: u32, model: i32) callconv(.C) u32 {$/;"	function
__atomic_fetch_nand_8	$ZIGLIB/compiler_rt/atomics.zig	/^fn __atomic_fetch_nand_8(ptr: *u64, val: u64, model: i32) callconv(.C) u64 {$/;"	function
__atomic_fetch_or_1	$ZIGLIB/compiler_rt/atomics.zig	/^fn __atomic_fetch_or_1(ptr: *u8, val: u8, model: i32) callconv(.C) u8 {$/;"	function
__atomic_fetch_or_16	$ZIGLIB/compiler_rt/atomics.zig	/^fn __atomic_fetch_or_16(ptr: *u128, val: u128, model: i32) callconv(.C) u128 {$/;"	function
__atomic_fetch_or_2	$ZIGLIB/compiler_rt/atomics.zig	/^fn __atomic_fetch_or_2(ptr: *u16, val: u16, model: i32) callconv(.C) u16 {$/;"	function
__atomic_fetch_or_4	$ZIGLIB/compiler_rt/atomics.zig	/^fn __atomic_fetch_or_4(ptr: *u32, val: u32, model: i32) callconv(.C) u32 {$/;"	function
__atomic_fetch_or_8	$ZIGLIB/compiler_rt/atomics.zig	/^fn __atomic_fetch_or_8(ptr: *u64, val: u64, model: i32) callconv(.C) u64 {$/;"	function
__atomic_fetch_sub_1	$ZIGLIB/compiler_rt/atomics.zig	/^fn __atomic_fetch_sub_1(ptr: *u8, val: u8, model: i32) callconv(.C) u8 {$/;"	function
__atomic_fetch_sub_16	$ZIGLIB/compiler_rt/atomics.zig	/^fn __atomic_fetch_sub_16(ptr: *u128, val: u128, model: i32) callconv(.C) u128 {$/;"	function
__atomic_fetch_sub_2	$ZIGLIB/compiler_rt/atomics.zig	/^fn __atomic_fetch_sub_2(ptr: *u16, val: u16, model: i32) callconv(.C) u16 {$/;"	function
__atomic_fetch_sub_4	$ZIGLIB/compiler_rt/atomics.zig	/^fn __atomic_fetch_sub_4(ptr: *u32, val: u32, model: i32) callconv(.C) u32 {$/;"	function
__atomic_fetch_sub_8	$ZIGLIB/compiler_rt/atomics.zig	/^fn __atomic_fetch_sub_8(ptr: *u64, val: u64, model: i32) callconv(.C) u64 {$/;"	function
__atomic_fetch_umax_1	$ZIGLIB/compiler_rt/atomics.zig	/^fn __atomic_fetch_umax_1(ptr: *u8, val: u8, model: i32) callconv(.C) u8 {$/;"	function
__atomic_fetch_umax_16	$ZIGLIB/compiler_rt/atomics.zig	/^fn __atomic_fetch_umax_16(ptr: *u128, val: u128, model: i32) callconv(.C) u128 {$/;"	function
__atomic_fetch_umax_2	$ZIGLIB/compiler_rt/atomics.zig	/^fn __atomic_fetch_umax_2(ptr: *u16, val: u16, model: i32) callconv(.C) u16 {$/;"	function
__atomic_fetch_umax_4	$ZIGLIB/compiler_rt/atomics.zig	/^fn __atomic_fetch_umax_4(ptr: *u32, val: u32, model: i32) callconv(.C) u32 {$/;"	function
__atomic_fetch_umax_8	$ZIGLIB/compiler_rt/atomics.zig	/^fn __atomic_fetch_umax_8(ptr: *u64, val: u64, model: i32) callconv(.C) u64 {$/;"	function
__atomic_fetch_umin_1	$ZIGLIB/compiler_rt/atomics.zig	/^fn __atomic_fetch_umin_1(ptr: *u8, val: u8, model: i32) callconv(.C) u8 {$/;"	function
__atomic_fetch_umin_16	$ZIGLIB/compiler_rt/atomics.zig	/^fn __atomic_fetch_umin_16(ptr: *u128, val: u128, model: i32) callconv(.C) u128 {$/;"	function
__atomic_fetch_umin_2	$ZIGLIB/compiler_rt/atomics.zig	/^fn __atomic_fetch_umin_2(ptr: *u16, val: u16, model: i32) callconv(.C) u16 {$/;"	function
__atomic_fetch_umin_4	$ZIGLIB/compiler_rt/atomics.zig	/^fn __atomic_fetch_umin_4(ptr: *u32, val: u32, model: i32) callconv(.C) u32 {$/;"	function
__atomic_fetch_umin_8	$ZIGLIB/compiler_rt/atomics.zig	/^fn __atomic_fetch_umin_8(ptr: *u64, val: u64, model: i32) callconv(.C) u64 {$/;"	function
__atomic_fetch_xor_1	$ZIGLIB/compiler_rt/atomics.zig	/^fn __atomic_fetch_xor_1(ptr: *u8, val: u8, model: i32) callconv(.C) u8 {$/;"	function
__atomic_fetch_xor_16	$ZIGLIB/compiler_rt/atomics.zig	/^fn __atomic_fetch_xor_16(ptr: *u128, val: u128, model: i32) callconv(.C) u128 {$/;"	function
__atomic_fetch_xor_2	$ZIGLIB/compiler_rt/atomics.zig	/^fn __atomic_fetch_xor_2(ptr: *u16, val: u16, model: i32) callconv(.C) u16 {$/;"	function
__atomic_fetch_xor_4	$ZIGLIB/compiler_rt/atomics.zig	/^fn __atomic_fetch_xor_4(ptr: *u32, val: u32, model: i32) callconv(.C) u32 {$/;"	function
__atomic_fetch_xor_8	$ZIGLIB/compiler_rt/atomics.zig	/^fn __atomic_fetch_xor_8(ptr: *u64, val: u64, model: i32) callconv(.C) u64 {$/;"	function
__atomic_load	$ZIGLIB/compiler_rt/atomics.zig	/^fn __atomic_load(size: u32, src: [*]u8, dest: [*]u8, model: i32) callconv(.C) void {$/;"	function
__atomic_load_1	$ZIGLIB/compiler_rt/atomics.zig	/^fn __atomic_load_1(src: *u8, model: i32) callconv(.C) u8 {$/;"	function
__atomic_load_16	$ZIGLIB/compiler_rt/atomics.zig	/^fn __atomic_load_16(src: *u128, model: i32) callconv(.C) u128 {$/;"	function
__atomic_load_2	$ZIGLIB/compiler_rt/atomics.zig	/^fn __atomic_load_2(src: *u16, model: i32) callconv(.C) u16 {$/;"	function
__atomic_load_4	$ZIGLIB/compiler_rt/atomics.zig	/^fn __atomic_load_4(src: *u32, model: i32) callconv(.C) u32 {$/;"	function
__atomic_load_8	$ZIGLIB/compiler_rt/atomics.zig	/^fn __atomic_load_8(src: *u64, model: i32) callconv(.C) u64 {$/;"	function
__atomic_store	$ZIGLIB/compiler_rt/atomics.zig	/^fn __atomic_store(size: u32, dest: [*]u8, src: [*]u8, model: i32) callconv(.C) void {$/;"	function
__atomic_store_1	$ZIGLIB/compiler_rt/atomics.zig	/^fn __atomic_store_1(dst: *u8, value: u8, model: i32) callconv(.C) void {$/;"	function
__atomic_store_16	$ZIGLIB/compiler_rt/atomics.zig	/^fn __atomic_store_16(dst: *u128, value: u128, model: i32) callconv(.C) void {$/;"	function
__atomic_store_2	$ZIGLIB/compiler_rt/atomics.zig	/^fn __atomic_store_2(dst: *u16, value: u16, model: i32) callconv(.C) void {$/;"	function
__atomic_store_4	$ZIGLIB/compiler_rt/atomics.zig	/^fn __atomic_store_4(dst: *u32, value: u32, model: i32) callconv(.C) void {$/;"	function
__atomic_store_8	$ZIGLIB/compiler_rt/atomics.zig	/^fn __atomic_store_8(dst: *u64, value: u64, model: i32) callconv(.C) void {$/;"	function
__bits	$ZIGLIB/std/c/solaris.zig	/__bits: [SIG.WORDS]u32/;"	field
__bswapdi2	$ZIGLIB/compiler_rt/bswap.zig	/^pub fn __bswapdi2(a: u64) callconv(.C) u64 {$/;"	function
__bswapsi2	$ZIGLIB/compiler_rt/bswap.zig	/^pub fn __bswapsi2(a: u32) callconv(.C) u32 {$/;"	function
__bswapti2	$ZIGLIB/compiler_rt/bswap.zig	/^pub fn __bswapti2(a: u128) callconv(.C) u128 {$/;"	function
__builtin___memcpy_chk	$ZIGLIB/std/zig/c_builtins.zig	/^pub inline fn __builtin___memcpy_chk($/;"	function
__builtin___memset_chk	$ZIGLIB/std/zig/c_builtins.zig	/^pub inline fn __builtin___memset_chk($/;"	function
__builtin_abs	$ZIGLIB/std/zig/c_builtins.zig	/^pub inline fn __builtin_abs(val: c_int) c_int {$/;"	function
__builtin_assume	$ZIGLIB/std/zig/c_builtins.zig	/^pub inline fn __builtin_assume(cond: bool) void {$/;"	function
__builtin_bswap16	$ZIGLIB/std/zig/c_builtins.zig	/^pub inline fn __builtin_bswap16(val: u16) u16 {$/;"	function
__builtin_bswap32	$ZIGLIB/std/zig/c_builtins.zig	/^pub inline fn __builtin_bswap32(val: u32) u32 {$/;"	function
__builtin_bswap64	$ZIGLIB/std/zig/c_builtins.zig	/^pub inline fn __builtin_bswap64(val: u64) u64 {$/;"	function
__builtin_ceil	$ZIGLIB/std/zig/c_builtins.zig	/^pub inline fn __builtin_ceil(val: f64) f64 {$/;"	function
__builtin_ceilf	$ZIGLIB/std/zig/c_builtins.zig	/^pub inline fn __builtin_ceilf(val: f32) f32 {$/;"	function
__builtin_clz	$ZIGLIB/std/zig/c_builtins.zig	/^pub inline fn __builtin_clz(val: c_uint) c_int {$/;"	function
__builtin_constant_p	$ZIGLIB/std/zig/c_builtins.zig	/^pub inline fn __builtin_constant_p(expr: anytype) c_int {$/;"	function
__builtin_cos	$ZIGLIB/std/zig/c_builtins.zig	/^pub inline fn __builtin_cos(val: f64) f64 {$/;"	function
__builtin_cosf	$ZIGLIB/std/zig/c_builtins.zig	/^pub inline fn __builtin_cosf(val: f32) f32 {$/;"	function
__builtin_ctz	$ZIGLIB/std/zig/c_builtins.zig	/^pub inline fn __builtin_ctz(val: c_uint) c_int {$/;"	function
__builtin_exp	$ZIGLIB/std/zig/c_builtins.zig	/^pub inline fn __builtin_exp(val: f64) f64 {$/;"	function
__builtin_exp2	$ZIGLIB/std/zig/c_builtins.zig	/^pub inline fn __builtin_exp2(val: f64) f64 {$/;"	function
__builtin_exp2f	$ZIGLIB/std/zig/c_builtins.zig	/^pub inline fn __builtin_exp2f(val: f32) f32 {$/;"	function
__builtin_expect	$ZIGLIB/std/zig/c_builtins.zig	/^pub inline fn __builtin_expect(expr: c_long, c: c_long) c_long {$/;"	function
__builtin_expf	$ZIGLIB/std/zig/c_builtins.zig	/^pub inline fn __builtin_expf(val: f32) f32 {$/;"	function
__builtin_fabs	$ZIGLIB/std/zig/c_builtins.zig	/^pub inline fn __builtin_fabs(val: f64) f64 {$/;"	function
__builtin_fabsf	$ZIGLIB/std/zig/c_builtins.zig	/^pub inline fn __builtin_fabsf(val: f32) f32 {$/;"	function
__builtin_floor	$ZIGLIB/std/zig/c_builtins.zig	/^pub inline fn __builtin_floor(val: f64) f64 {$/;"	function
__builtin_floorf	$ZIGLIB/std/zig/c_builtins.zig	/^pub inline fn __builtin_floorf(val: f32) f32 {$/;"	function
__builtin_huge_valf	$ZIGLIB/std/zig/c_builtins.zig	/^pub inline fn __builtin_huge_valf() f32 {$/;"	function
__builtin_inff	$ZIGLIB/std/zig/c_builtins.zig	/^pub inline fn __builtin_inff() f32 {$/;"	function
__builtin_isinf	$ZIGLIB/std/zig/c_builtins.zig	/^pub inline fn __builtin_isinf(x: anytype) c_int {$/;"	function
__builtin_isinf_sign	$ZIGLIB/std/zig/c_builtins.zig	/^pub inline fn __builtin_isinf_sign(x: anytype) c_int {$/;"	function
__builtin_isnan	$ZIGLIB/std/zig/c_builtins.zig	/^pub inline fn __builtin_isnan(x: anytype) c_int {$/;"	function
__builtin_log	$ZIGLIB/std/zig/c_builtins.zig	/^pub inline fn __builtin_log(val: f64) f64 {$/;"	function
__builtin_log10	$ZIGLIB/std/zig/c_builtins.zig	/^pub inline fn __builtin_log10(val: f64) f64 {$/;"	function
__builtin_log10f	$ZIGLIB/std/zig/c_builtins.zig	/^pub inline fn __builtin_log10f(val: f32) f32 {$/;"	function
__builtin_log2	$ZIGLIB/std/zig/c_builtins.zig	/^pub inline fn __builtin_log2(val: f64) f64 {$/;"	function
__builtin_log2f	$ZIGLIB/std/zig/c_builtins.zig	/^pub inline fn __builtin_log2f(val: f32) f32 {$/;"	function
__builtin_logf	$ZIGLIB/std/zig/c_builtins.zig	/^pub inline fn __builtin_logf(val: f32) f32 {$/;"	function
__builtin_memcpy	$ZIGLIB/std/zig/c_builtins.zig	/^pub inline fn __builtin_memcpy($/;"	function
__builtin_memset	$ZIGLIB/std/zig/c_builtins.zig	/^pub inline fn __builtin_memset(dst: ?*anyopaque, val: c_int, len: usize) ?*anyopaque {$/;"	function
__builtin_mul_overflow	$ZIGLIB/std/zig/c_builtins.zig	/^pub fn __builtin_mul_overflow(a: anytype, b: anytype, result: *@TypeOf(a, b)) c_int {$/;"	function
__builtin_nanf	$ZIGLIB/std/zig/c_builtins.zig	/^pub inline fn __builtin_nanf(tagp: []const u8) f32 {$/;"	function
__builtin_object_size	$ZIGLIB/std/zig/c_builtins.zig	/^pub inline fn __builtin_object_size(ptr: ?*const anyopaque, ty: c_int) usize {$/;"	function
__builtin_popcount	$ZIGLIB/std/zig/c_builtins.zig	/^pub inline fn __builtin_popcount(val: c_uint) c_int {$/;"	function
__builtin_round	$ZIGLIB/std/zig/c_builtins.zig	/^pub inline fn __builtin_round(val: f64) f64 {$/;"	function
__builtin_roundf	$ZIGLIB/std/zig/c_builtins.zig	/^pub inline fn __builtin_roundf(val: f32) f32 {$/;"	function
__builtin_signbit	$ZIGLIB/std/zig/c_builtins.zig	/^pub inline fn __builtin_signbit(val: f64) c_int {$/;"	function
__builtin_signbitf	$ZIGLIB/std/zig/c_builtins.zig	/^pub inline fn __builtin_signbitf(val: f32) c_int {$/;"	function
__builtin_sin	$ZIGLIB/std/zig/c_builtins.zig	/^pub inline fn __builtin_sin(val: f64) f64 {$/;"	function
__builtin_sinf	$ZIGLIB/std/zig/c_builtins.zig	/^pub inline fn __builtin_sinf(val: f32) f32 {$/;"	function
__builtin_sqrt	$ZIGLIB/std/zig/c_builtins.zig	/^pub inline fn __builtin_sqrt(val: f64) f64 {$/;"	function
__builtin_sqrtf	$ZIGLIB/std/zig/c_builtins.zig	/^pub inline fn __builtin_sqrtf(val: f32) f32 {$/;"	function
__builtin_strcmp	$ZIGLIB/std/zig/c_builtins.zig	/^pub inline fn __builtin_strcmp(s1: [*c]const u8, s2: [*c]const u8) c_int {$/;"	function
__builtin_strlen	$ZIGLIB/std/zig/c_builtins.zig	/^pub inline fn __builtin_strlen(s: [*c]const u8) usize {$/;"	function
__builtin_trunc	$ZIGLIB/std/zig/c_builtins.zig	/^pub inline fn __builtin_trunc(val: f64) f64 {$/;"	function
__builtin_truncf	$ZIGLIB/std/zig/c_builtins.zig	/^pub inline fn __builtin_truncf(val: f32) f32 {$/;"	function
__builtin_unreachable	$ZIGLIB/std/zig/c_builtins.zig	/^pub inline fn __builtin_unreachable() noreturn {$/;"	function
__ceilh	$ZIGLIB/compiler_rt/ceil.zig	/^pub fn __ceilh(x: f16) callconv(.C) f16 {$/;"	function
__ceilx	$ZIGLIB/compiler_rt/ceil.zig	/^pub fn __ceilx(x: f80) callconv(.C) f80 {$/;"	function
__chkstk	$ZIGLIB/compiler_rt/stack_probe.zig	/^pub fn __chkstk() callconv(.Naked) void {$/;"	function
__chkstk_ms	$ZIGLIB/compiler_rt/stack_probe.zig	/^pub fn __chkstk_ms() callconv(.Naked) void {$/;"	function
__clzdi2	$ZIGLIB/compiler_rt/count0bits.zig	/^pub fn __clzdi2(a: i64) callconv(.C) i32 {$/;"	function
__clzsi2	$ZIGLIB/compiler_rt/count0bits.zig	/^pub const __clzsi2 = switch (builtin.cpu.arch) {$/;"	constant
__clzsi2_arm32	$ZIGLIB/compiler_rt/count0bits.zig	/^fn __clzsi2_arm32() callconv(.Naked) void {$/;"	function
__clzsi2_thumb1	$ZIGLIB/compiler_rt/count0bits.zig	/^fn __clzsi2_thumb1() callconv(.Naked) void {$/;"	function
__clzti2	$ZIGLIB/compiler_rt/count0bits.zig	/^pub fn __clzti2(a: i128) callconv(.C) i32 {$/;"	function
__cmpdf2	$ZIGLIB/compiler_rt/cmpdf2.zig	/^fn __cmpdf2(a: f64, b: f64) callconv(.C) i32 {$/;"	function
__cmpdi2	$ZIGLIB/compiler_rt/cmp.zig	/^pub fn __cmpdi2(a: i64, b: i64) callconv(.C) i32 {$/;"	function
__cmphf2	$ZIGLIB/compiler_rt/cmphf2.zig	/^fn __cmphf2(a: f16, b: f16) callconv(.C) i32 {$/;"	function
__cmpsf2	$ZIGLIB/compiler_rt/cmpsf2.zig	/^fn __cmpsf2(a: f32, b: f32) callconv(.C) i32 {$/;"	function
__cmpsi2	$ZIGLIB/compiler_rt/cmp.zig	/^pub fn __cmpsi2(a: i32, b: i32) callconv(.C) i32 {$/;"	function
__cmptf2	$ZIGLIB/compiler_rt/cmptf2.zig	/^fn __cmptf2(a: f128, b: f128) callconv(.C) i32 {$/;"	function
__cmpti2	$ZIGLIB/compiler_rt/cmp.zig	/^pub fn __cmpti2(a: i128, b: i128) callconv(.C) i32 {$/;"	function
__cmpxf2	$ZIGLIB/compiler_rt/cmpxf2.zig	/^fn __cmpxf2(a: f80, b: f80) callconv(.C) i32 {$/;"	function
__cos	$ZIGLIB/compiler_rt/trig.zig	/^pub fn __cos(x: f64, y: f64) f64 {$/;"	function
__cosdf	$ZIGLIB/compiler_rt/trig.zig	/^pub fn __cosdf(x: f64) f32 {$/;"	function
__cosh	$ZIGLIB/compiler_rt/cos.zig	/^pub fn __cosh(a: f16) callconv(.C) f16 {$/;"	function
__cosx	$ZIGLIB/compiler_rt/cos.zig	/^pub fn __cosx(a: f80) callconv(.C) f80 {$/;"	function
__ctzdi2	$ZIGLIB/compiler_rt/count0bits.zig	/^pub fn __ctzdi2(a: i64) callconv(.C) i32 {$/;"	function
__ctzsi2	$ZIGLIB/compiler_rt/count0bits.zig	/^pub fn __ctzsi2(a: i32) callconv(.C) i32 {$/;"	function
__ctzti2	$ZIGLIB/compiler_rt/count0bits.zig	/^pub fn __ctzti2(a: i128) callconv(.C) i32 {$/;"	function
__current_saved_reg_area_pointer	$ZIGLIB/std/builtin.zig	/__current_saved_reg_area_pointer: *anyopaque/;"	field
__d_padding	$ZIGLIB/std/c/openbsd.zig	/__d_padding: [4]u8/;"	field
__detach_state	$ZIGLIB/std/c/haiku.zig	/__detach_state: i32/;"	field
__dev_padding	$ZIGLIB/std/os/linux/x86.zig	/__dev_padding: u32/;"	field
__divdc3	$ZIGLIB/compiler_rt/divdc3.zig	/^pub fn __divdc3(a: f64, b: f64, c: f64, d: f64) callconv(.C) Complex(f64) {$/;"	function
__divdf3	$ZIGLIB/compiler_rt/divdf3.zig	/^pub fn __divdf3(a: f64, b: f64) callconv(.C) f64 {$/;"	function
__divdi3	$ZIGLIB/compiler_rt/int.zig	/^pub fn __divdi3(a: i64, b: i64) callconv(.C) i64 {$/;"	function
__divhc3	$ZIGLIB/compiler_rt/divhc3.zig	/^pub fn __divhc3(a: f16, b: f16, c: f16, d: f16) callconv(.C) Complex(f16) {$/;"	function
__divhf3	$ZIGLIB/compiler_rt/divhf3.zig	/^pub fn __divhf3(a: f16, b: f16) callconv(.C) f16 {$/;"	function
__divmoddi4	$ZIGLIB/compiler_rt/int.zig	/^pub fn __divmoddi4(a: i64, b: i64, rem: *i64) callconv(.C) i64 {$/;"	function
__divmodsi4	$ZIGLIB/compiler_rt/int.zig	/^pub fn __divmodsi4(a: i32, b: i32, rem: *i32) callconv(.C) i32 {$/;"	function
__divsc3	$ZIGLIB/compiler_rt/divsc3.zig	/^pub fn __divsc3(a: f32, b: f32, c: f32, d: f32) callconv(.C) Complex(f32) {$/;"	function
__divsf3	$ZIGLIB/compiler_rt/divsf3.zig	/^pub fn __divsf3(a: f32, b: f32) callconv(.C) f32 {$/;"	function
__divsi3	$ZIGLIB/compiler_rt/int.zig	/^pub fn __divsi3(n: i32, d: i32) callconv(.C) i32 {$/;"	function
__divtc3	$ZIGLIB/compiler_rt/divtc3.zig	/^pub fn __divtc3(a: f128, b: f128, c: f128, d: f128) callconv(.C) Complex(f128) {$/;"	function
__divtf3	$ZIGLIB/compiler_rt/divtf3.zig	/^pub fn __divtf3(a: f128, b: f128) callconv(.C) f128 {$/;"	function
__divti3	$ZIGLIB/compiler_rt/divti3.zig	/^pub fn __divti3(a: i128, b: i128) callconv(.C) i128 {$/;"	function
__divti3_windows_x86_64	$ZIGLIB/compiler_rt/divti3.zig	/^fn __divti3_windows_x86_64(a: v128, b: v128) callconv(.C) v128 {$/;"	function
__divxc3	$ZIGLIB/compiler_rt/divxc3.zig	/^pub fn __divxc3(a: f80, b: f80, c: f80, d: f80) callconv(.C) Complex(f80) {$/;"	function
__divxf3	$ZIGLIB/compiler_rt/divxf3.zig	/^pub fn __divxf3(a: f80, b: f80) callconv(.C) f80 {$/;"	function
__emutls_get_address	$ZIGLIB/compiler_rt/emutls.zig	/^pub fn __emutls_get_address(control: *emutls_control) callconv(.C) *anyopaque {$/;"	function
__eqdf2	$ZIGLIB/compiler_rt/cmpdf2.zig	/^pub fn __eqdf2(a: f64, b: f64) callconv(.C) i32 {$/;"	function
__eqhf2	$ZIGLIB/compiler_rt/cmphf2.zig	/^pub fn __eqhf2(a: f16, b: f16) callconv(.C) i32 {$/;"	function
__eqsf2	$ZIGLIB/compiler_rt/cmpsf2.zig	/^pub fn __eqsf2(a: f32, b: f32) callconv(.C) i32 {$/;"	function
__eqtf2	$ZIGLIB/compiler_rt/cmptf2.zig	/^fn __eqtf2(a: f128, b: f128) callconv(.C) i32 {$/;"	function
__eqxf2	$ZIGLIB/compiler_rt/cmpxf2.zig	/^fn __eqxf2(a: f80, b: f80) callconv(.C) i32 {$/;"	function
__exp2h	$ZIGLIB/compiler_rt/exp2.zig	/^pub fn __exp2h(x: f16) callconv(.C) f16 {$/;"	function
__exp2x	$ZIGLIB/compiler_rt/exp2.zig	/^pub fn __exp2x(x: f80) callconv(.C) f80 {$/;"	function
__exph	$ZIGLIB/compiler_rt/exp.zig	/^pub fn __exph(a: f16) callconv(.C) f16 {$/;"	function
__expx	$ZIGLIB/compiler_rt/exp.zig	/^pub fn __expx(a: f80) callconv(.C) f80 {$/;"	function
__extenddftf2	$ZIGLIB/compiler_rt/extenddftf2.zig	/^pub fn __extenddftf2(a: f64) callconv(.C) f128 {$/;"	function
__extenddfxf2	$ZIGLIB/compiler_rt/extenddfxf2.zig	/^pub fn __extenddfxf2(a: f64) callconv(.C) f80 {$/;"	function
__extendhfdf2	$ZIGLIB/compiler_rt/extendhfdf2.zig	/^pub fn __extendhfdf2(a: common.F16T) callconv(.C) f64 {$/;"	function
__extendhfsf2	$ZIGLIB/compiler_rt/extendhfsf2.zig	/^pub fn __extendhfsf2(a: common.F16T) callconv(.C) f32 {$/;"	function
__extendhftf2	$ZIGLIB/compiler_rt/extendhftf2.zig	/^pub fn __extendhftf2(a: common.F16T) callconv(.C) f128 {$/;"	function
__extendhfxf2	$ZIGLIB/compiler_rt/extendhfxf2.zig	/^fn __extendhfxf2(a: common.F16T) callconv(.C) f80 {$/;"	function
__extendsfdf2	$ZIGLIB/compiler_rt/extendsfdf2.zig	/^fn __extendsfdf2(a: f32) callconv(.C) f64 {$/;"	function
__extendsftf2	$ZIGLIB/compiler_rt/extendsftf2.zig	/^pub fn __extendsftf2(a: f32) callconv(.C) f128 {$/;"	function
__extendsfxf2	$ZIGLIB/compiler_rt/extendsfxf2.zig	/^fn __extendsfxf2(a: f32) callconv(.C) f80 {$/;"	function
__extendxftf2	$ZIGLIB/compiler_rt/extendxftf2.zig	/^fn __extendxftf2(a: f80) callconv(.C) f128 {$/;"	function
__fabsh	$ZIGLIB/compiler_rt/fabs.zig	/^pub fn __fabsh(a: f16) callconv(.C) f16 {$/;"	function
__fabsx	$ZIGLIB/compiler_rt/fabs.zig	/^pub fn __fabsx(a: f80) callconv(.C) f80 {$/;"	function
__ffsdi2	$ZIGLIB/compiler_rt/count0bits.zig	/^pub fn __ffsdi2(a: i64) callconv(.C) i32 {$/;"	function
__ffssi2	$ZIGLIB/compiler_rt/count0bits.zig	/^pub fn __ffssi2(a: i32) callconv(.C) i32 {$/;"	function
__ffsti2	$ZIGLIB/compiler_rt/count0bits.zig	/^pub fn __ffsti2(a: i128) callconv(.C) i32 {$/;"	function
__filler	$ZIGLIB/std/c/solaris.zig	/__filler: [25]c_int/;"	field
__fixdfdi	$ZIGLIB/compiler_rt/fixdfdi.zig	/^pub fn __fixdfdi(a: f64) callconv(.C) i64 {$/;"	function
__fixdfsi	$ZIGLIB/compiler_rt/fixdfsi.zig	/^pub fn __fixdfsi(a: f64) callconv(.C) i32 {$/;"	function
__fixdfti	$ZIGLIB/compiler_rt/fixdfti.zig	/^pub fn __fixdfti(a: f64) callconv(.C) i128 {$/;"	function
__fixdfti_windows_x86_64	$ZIGLIB/compiler_rt/fixdfti.zig	/^fn __fixdfti_windows_x86_64(a: f64) callconv(.C) v2u64 {$/;"	function
__fixhfdi	$ZIGLIB/compiler_rt/fixhfdi.zig	/^fn __fixhfdi(a: f16) callconv(.C) i64 {$/;"	function
__fixhfsi	$ZIGLIB/compiler_rt/fixhfsi.zig	/^fn __fixhfsi(a: f16) callconv(.C) i32 {$/;"	function
__fixhfti	$ZIGLIB/compiler_rt/fixhfti.zig	/^pub fn __fixhfti(a: f16) callconv(.C) i128 {$/;"	function
__fixhfti_windows_x86_64	$ZIGLIB/compiler_rt/fixhfti.zig	/^fn __fixhfti_windows_x86_64(a: f16) callconv(.C) v2u64 {$/;"	function
__fixsfdi	$ZIGLIB/compiler_rt/fixsfdi.zig	/^pub fn __fixsfdi(a: f32) callconv(.C) i64 {$/;"	function
__fixsfsi	$ZIGLIB/compiler_rt/fixsfsi.zig	/^pub fn __fixsfsi(a: f32) callconv(.C) i32 {$/;"	function
__fixsfti	$ZIGLIB/compiler_rt/fixsfti.zig	/^pub fn __fixsfti(a: f32) callconv(.C) i128 {$/;"	function
__fixsfti_windows_x86_64	$ZIGLIB/compiler_rt/fixsfti.zig	/^fn __fixsfti_windows_x86_64(a: f32) callconv(.C) v2u64 {$/;"	function
__fixtfdi	$ZIGLIB/compiler_rt/fixtfdi.zig	/^pub fn __fixtfdi(a: f128) callconv(.C) i64 {$/;"	function
__fixtfsi	$ZIGLIB/compiler_rt/fixtfsi.zig	/^pub fn __fixtfsi(a: f128) callconv(.C) i32 {$/;"	function
__fixtfti	$ZIGLIB/compiler_rt/fixtfti.zig	/^pub fn __fixtfti(a: f128) callconv(.C) i128 {$/;"	function
__fixtfti_windows_x86_64	$ZIGLIB/compiler_rt/fixtfti.zig	/^fn __fixtfti_windows_x86_64(a: f128) callconv(.C) v2u64 {$/;"	function
__fixunsdfdi	$ZIGLIB/compiler_rt/fixunsdfdi.zig	/^pub fn __fixunsdfdi(a: f64) callconv(.C) u64 {$/;"	function
__fixunsdfsi	$ZIGLIB/compiler_rt/fixunsdfsi.zig	/^pub fn __fixunsdfsi(a: f64) callconv(.C) u32 {$/;"	function
__fixunsdfti	$ZIGLIB/compiler_rt/fixunsdfti.zig	/^pub fn __fixunsdfti(a: f64) callconv(.C) u128 {$/;"	function
__fixunsdfti_windows_x86_64	$ZIGLIB/compiler_rt/fixunsdfti.zig	/^fn __fixunsdfti_windows_x86_64(a: f64) callconv(.C) v2u64 {$/;"	function
__fixunshfdi	$ZIGLIB/compiler_rt/fixunshfdi.zig	/^fn __fixunshfdi(a: f16) callconv(.C) u64 {$/;"	function
__fixunshfsi	$ZIGLIB/compiler_rt/fixunshfsi.zig	/^fn __fixunshfsi(a: f16) callconv(.C) u32 {$/;"	function
__fixunshfti	$ZIGLIB/compiler_rt/fixunshfti.zig	/^pub fn __fixunshfti(a: f16) callconv(.C) u128 {$/;"	function
__fixunshfti_windows_x86_64	$ZIGLIB/compiler_rt/fixunshfti.zig	/^fn __fixunshfti_windows_x86_64(a: f16) callconv(.C) v2u64 {$/;"	function
__fixunssfdi	$ZIGLIB/compiler_rt/fixunssfdi.zig	/^pub fn __fixunssfdi(a: f32) callconv(.C) u64 {$/;"	function
__fixunssfsi	$ZIGLIB/compiler_rt/fixunssfsi.zig	/^pub fn __fixunssfsi(a: f32) callconv(.C) u32 {$/;"	function
__fixunssfti	$ZIGLIB/compiler_rt/fixunssfti.zig	/^pub fn __fixunssfti(a: f32) callconv(.C) u128 {$/;"	function
__fixunssfti_windows_x86_64	$ZIGLIB/compiler_rt/fixunssfti.zig	/^fn __fixunssfti_windows_x86_64(a: f32) callconv(.C) v2u64 {$/;"	function
__fixunstfdi	$ZIGLIB/compiler_rt/fixunstfdi.zig	/^pub fn __fixunstfdi(a: f128) callconv(.C) u64 {$/;"	function
__fixunstfsi	$ZIGLIB/compiler_rt/fixunstfsi.zig	/^pub fn __fixunstfsi(a: f128) callconv(.C) u32 {$/;"	function
__fixunstfti	$ZIGLIB/compiler_rt/fixunstfti.zig	/^pub fn __fixunstfti(a: f128) callconv(.C) u128 {$/;"	function
__fixunstfti_windows_x86_64	$ZIGLIB/compiler_rt/fixunstfti.zig	/^fn __fixunstfti_windows_x86_64(a: f128) callconv(.C) v2u64 {$/;"	function
__fixunsxfdi	$ZIGLIB/compiler_rt/fixunsxfdi.zig	/^fn __fixunsxfdi(a: f80) callconv(.C) u64 {$/;"	function
__fixunsxfsi	$ZIGLIB/compiler_rt/fixunsxfsi.zig	/^fn __fixunsxfsi(a: f80) callconv(.C) u32 {$/;"	function
__fixunsxfti	$ZIGLIB/compiler_rt/fixunsxfti.zig	/^pub fn __fixunsxfti(a: f80) callconv(.C) u128 {$/;"	function
__fixunsxfti_windows_x86_64	$ZIGLIB/compiler_rt/fixunsxfti.zig	/^fn __fixunsxfti_windows_x86_64(a: f80) callconv(.C) v2u64 {$/;"	function
__fixxfdi	$ZIGLIB/compiler_rt/fixxfdi.zig	/^fn __fixxfdi(a: f80) callconv(.C) i64 {$/;"	function
__fixxfsi	$ZIGLIB/compiler_rt/fixxfsi.zig	/^fn __fixxfsi(a: f80) callconv(.C) i32 {$/;"	function
__fixxfti	$ZIGLIB/compiler_rt/fixxfti.zig	/^pub fn __fixxfti(a: f80) callconv(.C) i128 {$/;"	function
__fixxfti_windows_x86_64	$ZIGLIB/compiler_rt/fixxfti.zig	/^fn __fixxfti_windows_x86_64(a: f80) callconv(.C) v2u64 {$/;"	function
__floatdidf	$ZIGLIB/compiler_rt/floatdidf.zig	/^pub fn __floatdidf(a: i64) callconv(.C) f64 {$/;"	function
__floatdihf	$ZIGLIB/compiler_rt/floatdihf.zig	/^fn __floatdihf(a: i64) callconv(.C) f16 {$/;"	function
__floatdisf	$ZIGLIB/compiler_rt/floatdisf.zig	/^pub fn __floatdisf(a: i64) callconv(.C) f32 {$/;"	function
__floatditf	$ZIGLIB/compiler_rt/floatditf.zig	/^pub fn __floatditf(a: i64) callconv(.C) f128 {$/;"	function
__floatdixf	$ZIGLIB/compiler_rt/floatdixf.zig	/^fn __floatdixf(a: i64) callconv(.C) f80 {$/;"	function
__floatsidf	$ZIGLIB/compiler_rt/floatsidf.zig	/^pub fn __floatsidf(a: i32) callconv(.C) f64 {$/;"	function
__floatsihf	$ZIGLIB/compiler_rt/floatsihf.zig	/^fn __floatsihf(a: i32) callconv(.C) f16 {$/;"	function
__floatsisf	$ZIGLIB/compiler_rt/floatsisf.zig	/^pub fn __floatsisf(a: i32) callconv(.C) f32 {$/;"	function
__floatsitf	$ZIGLIB/compiler_rt/floatsitf.zig	/^pub fn __floatsitf(a: i32) callconv(.C) f128 {$/;"	function
__floatsixf	$ZIGLIB/compiler_rt/floatsixf.zig	/^fn __floatsixf(a: i32) callconv(.C) f80 {$/;"	function
__floattidf	$ZIGLIB/compiler_rt/floattidf.zig	/^pub fn __floattidf(a: i128) callconv(.C) f64 {$/;"	function
__floattidf_windows_x86_64	$ZIGLIB/compiler_rt/floattidf.zig	/^fn __floattidf_windows_x86_64(a: @Vector(2, u64)) callconv(.C) f64 {$/;"	function
__floattihf	$ZIGLIB/compiler_rt/floattihf.zig	/^pub fn __floattihf(a: i128) callconv(.C) f16 {$/;"	function
__floattihf_windows_x86_64	$ZIGLIB/compiler_rt/floattihf.zig	/^fn __floattihf_windows_x86_64(a: @Vector(2, u64)) callconv(.C) f16 {$/;"	function
__floattisf	$ZIGLIB/compiler_rt/floattisf.zig	/^pub fn __floattisf(a: i128) callconv(.C) f32 {$/;"	function
__floattisf_windows_x86_64	$ZIGLIB/compiler_rt/floattisf.zig	/^fn __floattisf_windows_x86_64(a: @Vector(2, u64)) callconv(.C) f32 {$/;"	function
__floattitf	$ZIGLIB/compiler_rt/floattitf.zig	/^pub fn __floattitf(a: i128) callconv(.C) f128 {$/;"	function
__floattitf_windows_x86_64	$ZIGLIB/compiler_rt/floattitf.zig	/^fn __floattitf_windows_x86_64(a: @Vector(2, u64)) callconv(.C) f128 {$/;"	function
__floattixf	$ZIGLIB/compiler_rt/floattixf.zig	/^pub fn __floattixf(a: i128) callconv(.C) f80 {$/;"	function
__floattixf_windows_x86_64	$ZIGLIB/compiler_rt/floattixf.zig	/^fn __floattixf_windows_x86_64(a: @Vector(2, u64)) callconv(.C) f80 {$/;"	function
__floatundidf	$ZIGLIB/compiler_rt/floatundidf.zig	/^pub fn __floatundidf(a: u64) callconv(.C) f64 {$/;"	function
__floatundihf	$ZIGLIB/compiler_rt/floatundihf.zig	/^fn __floatundihf(a: u64) callconv(.C) f16 {$/;"	function
__floatundisf	$ZIGLIB/compiler_rt/floatundisf.zig	/^pub fn __floatundisf(a: u64) callconv(.C) f32 {$/;"	function
__floatunditf	$ZIGLIB/compiler_rt/floatunditf.zig	/^pub fn __floatunditf(a: u64) callconv(.C) f128 {$/;"	function
__floatundixf	$ZIGLIB/compiler_rt/floatundixf.zig	/^fn __floatundixf(a: u64) callconv(.C) f80 {$/;"	function
__floatunsidf	$ZIGLIB/compiler_rt/floatunsidf.zig	/^pub fn __floatunsidf(a: u32) callconv(.C) f64 {$/;"	function
__floatunsihf	$ZIGLIB/compiler_rt/floatunsihf.zig	/^pub fn __floatunsihf(a: u32) callconv(.C) f16 {$/;"	function
__floatunsisf	$ZIGLIB/compiler_rt/floatunsisf.zig	/^pub fn __floatunsisf(a: u32) callconv(.C) f32 {$/;"	function
__floatunsitf	$ZIGLIB/compiler_rt/floatunsitf.zig	/^pub fn __floatunsitf(a: u32) callconv(.C) f128 {$/;"	function
__floatunsixf	$ZIGLIB/compiler_rt/floatunsixf.zig	/^fn __floatunsixf(a: u32) callconv(.C) f80 {$/;"	function
__floatuntidf	$ZIGLIB/compiler_rt/floatuntidf.zig	/^pub fn __floatuntidf(a: u128) callconv(.C) f64 {$/;"	function
__floatuntidf_windows_x86_64	$ZIGLIB/compiler_rt/floatuntidf.zig	/^fn __floatuntidf_windows_x86_64(a: @Vector(2, u64)) callconv(.C) f64 {$/;"	function
__floatuntihf	$ZIGLIB/compiler_rt/floatuntihf.zig	/^pub fn __floatuntihf(a: u128) callconv(.C) f16 {$/;"	function
__floatuntihf_windows_x86_64	$ZIGLIB/compiler_rt/floatuntihf.zig	/^fn __floatuntihf_windows_x86_64(a: @Vector(2, u64)) callconv(.C) f16 {$/;"	function
__floatuntisf	$ZIGLIB/compiler_rt/floatuntisf.zig	/^pub fn __floatuntisf(a: u128) callconv(.C) f32 {$/;"	function
__floatuntisf_windows_x86_64	$ZIGLIB/compiler_rt/floatuntisf.zig	/^fn __floatuntisf_windows_x86_64(a: @Vector(2, u64)) callconv(.C) f32 {$/;"	function
__floatuntitf	$ZIGLIB/compiler_rt/floatuntitf.zig	/^pub fn __floatuntitf(a: u128) callconv(.C) f128 {$/;"	function
__floatuntitf_windows_x86_64	$ZIGLIB/compiler_rt/floatuntitf.zig	/^fn __floatuntitf_windows_x86_64(a: @Vector(2, u64)) callconv(.C) f128 {$/;"	function
__floatuntixf	$ZIGLIB/compiler_rt/floatuntixf.zig	/^pub fn __floatuntixf(a: u128) callconv(.C) f80 {$/;"	function
__floatuntixf_windows_x86_64	$ZIGLIB/compiler_rt/floatuntixf.zig	/^fn __floatuntixf_windows_x86_64(a: @Vector(2, u64)) callconv(.C) f80 {$/;"	function
__floorh	$ZIGLIB/compiler_rt/floor.zig	/^pub fn __floorh(x: f16) callconv(.C) f16 {$/;"	function
__floorx	$ZIGLIB/compiler_rt/floor.zig	/^pub fn __floorx(x: f80) callconv(.C) f80 {$/;"	function
__fmah	$ZIGLIB/compiler_rt/fma.zig	/^pub fn __fmah(x: f16, y: f16, z: f16) callconv(.C) f16 {$/;"	function
__fmax	$ZIGLIB/compiler_rt/fma.zig	/^pub fn __fmax(a: f80, b: f80, c: f80) callconv(.C) f80 {$/;"	function
__fmaxh	$ZIGLIB/compiler_rt/fmax.zig	/^pub fn __fmaxh(x: f16, y: f16) callconv(.C) f16 {$/;"	function
__fmaxx	$ZIGLIB/compiler_rt/fmax.zig	/^pub fn __fmaxx(x: f80, y: f80) callconv(.C) f80 {$/;"	function
__fminh	$ZIGLIB/compiler_rt/fmin.zig	/^pub fn __fminh(x: f16, y: f16) callconv(.C) f16 {$/;"	function
__fminx	$ZIGLIB/compiler_rt/fmin.zig	/^pub fn __fminx(x: f80, y: f80) callconv(.C) f80 {$/;"	function
__fmodh	$ZIGLIB/compiler_rt/fmod.zig	/^pub fn __fmodh(x: f16, y: f16) callconv(.C) f16 {$/;"	function
__fmodx	$ZIGLIB/compiler_rt/fmod.zig	/^pub fn __fmodx(a: f80, b: f80) callconv(.C) f80 {$/;"	function
__fpq	$ZIGLIB/std/os/linux/sparc64.zig	/^pub const __fpq = extern struct {$/;"	struct
__fpr	$ZIGLIB/std/builtin.zig	/__fpr: c_long/;"	field
__fpr_pad	$ZIGLIB/std/c/solaris.zig	/__fpr_pad: u128/;"	field
__fq	$ZIGLIB/std/os/linux/sparc64.zig	/^pub const __fq = extern struct {$/;"	struct
__fx_ign2	$ZIGLIB/std/c/solaris.zig	/__fx_ign2: [6]u128/;"	field
__fx_rsvd	$ZIGLIB/std/c/solaris.zig	/__fx_rsvd: u8/;"	field
__gedf2	$ZIGLIB/compiler_rt/gedf2.zig	/^pub fn __gedf2(a: f64, b: f64) callconv(.C) i32 {$/;"	function
__gehf2	$ZIGLIB/compiler_rt/gehf2.zig	/^pub fn __gehf2(a: f16, b: f16) callconv(.C) i32 {$/;"	function
__gesf2	$ZIGLIB/compiler_rt/gesf2.zig	/^pub fn __gesf2(a: f32, b: f32) callconv(.C) i32 {$/;"	function
__getf2	$ZIGLIB/compiler_rt/getf2.zig	/^fn __getf2(a: f128, b: f128) callconv(.C) i32 {$/;"	function
__gexf2	$ZIGLIB/compiler_rt/gexf2.zig	/^fn __gexf2(a: f80, b: f80) callconv(.C) i32 {$/;"	function
__gnu_f2h_ieee	$ZIGLIB/compiler_rt/truncsfhf2.zig	/^fn __gnu_f2h_ieee(a: f32) callconv(.C) common.F16T {$/;"	function
__gnu_h2f_ieee	$ZIGLIB/compiler_rt/extendhfsf2.zig	/^fn __gnu_h2f_ieee(a: common.F16T) callconv(.C) f32 {$/;"	function
__gpr	$ZIGLIB/std/builtin.zig	/__gpr: c_long/;"	field
__gr_offs	$ZIGLIB/std/builtin.zig	/__gr_offs: c_int/;"	field
__gr_top	$ZIGLIB/std/builtin.zig	/__gr_top: *anyopaque/;"	field
__gtdf2	$ZIGLIB/compiler_rt/gedf2.zig	/^pub fn __gtdf2(a: f64, b: f64) callconv(.C) i32 {$/;"	function
__gthf2	$ZIGLIB/compiler_rt/gehf2.zig	/^pub fn __gthf2(a: f16, b: f16) callconv(.C) i32 {$/;"	function
__gtsf2	$ZIGLIB/compiler_rt/gesf2.zig	/^pub fn __gtsf2(a: f32, b: f32) callconv(.C) i32 {$/;"	function
__gttf2	$ZIGLIB/compiler_rt/getf2.zig	/^fn __gttf2(a: f128, b: f128) callconv(.C) i32 {$/;"	function
__gtxf2	$ZIGLIB/compiler_rt/gexf2.zig	/^fn __gtxf2(a: f80, b: f80) callconv(.C) i32 {$/;"	function
__guard_size	$ZIGLIB/std/c/haiku.zig	/__guard_size: i32/;"	field
__has_builtin	$ZIGLIB/std/zig/c_builtins.zig	/^pub inline fn __has_builtin(func: anytype) c_int {$/;"	function
__ino_truncated	$ZIGLIB/std/os/linux/x86.zig	/__ino_truncated: u32/;"	field
__io_uring_prep_poll_mask	$ZIGLIB/std/os/linux/io_uring.zig	/^pub inline fn __io_uring_prep_poll_mask(poll_mask: u32) u32 {$/;"	function
__isPlatformVersionAtLeast	$ZIGLIB/compiler_rt/os_version_check.zig	/fn __isPlatformVersionAtLeast(platform: u32, major: u32, minor: u32, subminor: u32) callconv(.C) i32 {$/;"	function
__ledf2	$ZIGLIB/compiler_rt/cmpdf2.zig	/^pub fn __ledf2(a: f64, b: f64) callconv(.C) i32 {$/;"	function
__lehf2	$ZIGLIB/compiler_rt/cmphf2.zig	/^pub fn __lehf2(a: f16, b: f16) callconv(.C) i32 {$/;"	function
__lesf2	$ZIGLIB/compiler_rt/cmpsf2.zig	/^pub fn __lesf2(a: f32, b: f32) callconv(.C) i32 {$/;"	function
__letf2	$ZIGLIB/compiler_rt/cmptf2.zig	/^fn __letf2(a: f128, b: f128) callconv(.C) i32 {$/;"	function
__lexf2	$ZIGLIB/compiler_rt/cmpxf2.zig	/^fn __lexf2(a: f80, b: f80) callconv(.C) i32 {$/;"	function
__log10h	$ZIGLIB/compiler_rt/log10.zig	/^pub fn __log10h(a: f16) callconv(.C) f16 {$/;"	function
__log10x	$ZIGLIB/compiler_rt/log10.zig	/^pub fn __log10x(a: f80) callconv(.C) f80 {$/;"	function
__log2h	$ZIGLIB/compiler_rt/log2.zig	/^pub fn __log2h(a: f16) callconv(.C) f16 {$/;"	function
__log2x	$ZIGLIB/compiler_rt/log2.zig	/^pub fn __log2x(a: f80) callconv(.C) f80 {$/;"	function
__logh	$ZIGLIB/compiler_rt/log.zig	/^pub fn __logh(a: f16) callconv(.C) f16 {$/;"	function
__logx	$ZIGLIB/compiler_rt/log.zig	/^pub fn __logx(a: f80) callconv(.C) f80 {$/;"	function
__lshrdi3	$ZIGLIB/compiler_rt/shift.zig	/^pub fn __lshrdi3(a: i64, b: i32) callconv(.C) i64 {$/;"	function
__lshrti3	$ZIGLIB/compiler_rt/shift.zig	/^pub fn __lshrti3(a: i128, b: i32) callconv(.C) i128 {$/;"	function
__ltdf2	$ZIGLIB/compiler_rt/cmpdf2.zig	/^pub fn __ltdf2(a: f64, b: f64) callconv(.C) i32 {$/;"	function
__lthf2	$ZIGLIB/compiler_rt/cmphf2.zig	/^pub fn __lthf2(a: f16, b: f16) callconv(.C) i32 {$/;"	function
__ltsf2	$ZIGLIB/compiler_rt/cmpsf2.zig	/^pub fn __ltsf2(a: f32, b: f32) callconv(.C) i32 {$/;"	function
__lttf2	$ZIGLIB/compiler_rt/cmptf2.zig	/^fn __lttf2(a: f128, b: f128) callconv(.C) i32 {$/;"	function
__ltxf2	$ZIGLIB/compiler_rt/cmpxf2.zig	/^fn __ltxf2(a: f80, b: f80) callconv(.C) i32 {$/;"	function
__memset	$ZIGLIB/compiler_rt/memset.zig	/^pub fn __memset(dest: ?[*]u8, c: u8, n: usize, dest_n: usize) callconv(.C) ?[*]u8 {$/;"	function
__moddi3	$ZIGLIB/compiler_rt/int.zig	/^pub fn __moddi3(a: i64, b: i64) callconv(.C) i64 {$/;"	function
__modsi3	$ZIGLIB/compiler_rt/int.zig	/^pub fn __modsi3(n: i32, d: i32) callconv(.C) i32 {$/;"	function
__modti3	$ZIGLIB/compiler_rt/modti3.zig	/^pub fn __modti3(a: i128, b: i128) callconv(.C) i128 {$/;"	function
__modti3_windows_x86_64	$ZIGLIB/compiler_rt/modti3.zig	/^fn __modti3_windows_x86_64(a: v2u64, b: v2u64) callconv(.C) v2u64 {$/;"	function
__muldc3	$ZIGLIB/compiler_rt/muldc3.zig	/^pub fn __muldc3(a: f64, b: f64, c: f64, d: f64) callconv(.C) mulc3.Complex(f64) {$/;"	function
__muldf3	$ZIGLIB/compiler_rt/muldf3.zig	/^pub fn __muldf3(a: f64, b: f64) callconv(.C) f64 {$/;"	function
__muldi3	$ZIGLIB/compiler_rt/muldi3.zig	/^pub fn __muldi3(a: i64, b: i64) callconv(.C) i64 {$/;"	function
__mulhc3	$ZIGLIB/compiler_rt/mulhc3.zig	/^pub fn __mulhc3(a: f16, b: f16, c: f16, d: f16) callconv(.C) mulc3.Complex(f16) {$/;"	function
__mulhf3	$ZIGLIB/compiler_rt/mulhf3.zig	/^pub fn __mulhf3(a: f16, b: f16) callconv(.C) f16 {$/;"	function
__mulodi4	$ZIGLIB/compiler_rt/mulo.zig	/^pub fn __mulodi4(a: i64, b: i64, overflow: *c_int) callconv(.C) i64 {$/;"	function
__mulosi4	$ZIGLIB/compiler_rt/mulo.zig	/^pub fn __mulosi4(a: i32, b: i32, overflow: *c_int) callconv(.C) i32 {$/;"	function
__muloti4	$ZIGLIB/compiler_rt/mulo.zig	/^pub fn __muloti4(a: i128, b: i128, overflow: *c_int) callconv(.C) i128 {$/;"	function
__mulsc3	$ZIGLIB/compiler_rt/mulsc3.zig	/^pub fn __mulsc3(a: f32, b: f32, c: f32, d: f32) callconv(.C) mulc3.Complex(f32) {$/;"	function
__mulsf3	$ZIGLIB/compiler_rt/mulsf3.zig	/^pub fn __mulsf3(a: f32, b: f32) callconv(.C) f32 {$/;"	function
__mulsi3	$ZIGLIB/compiler_rt/int.zig	/^pub fn __mulsi3(a: i32, b: i32) callconv(.C) i32 {$/;"	function
__multc3	$ZIGLIB/compiler_rt/multc3.zig	/^pub fn __multc3(a: f128, b: f128, c: f128, d: f128) callconv(.C) mulc3.Complex(f128) {$/;"	function
__multf3	$ZIGLIB/compiler_rt/multf3.zig	/^pub fn __multf3(a: f128, b: f128) callconv(.C) f128 {$/;"	function
__multi3	$ZIGLIB/compiler_rt/multi3.zig	/^pub fn __multi3(a: i128, b: i128) callconv(.C) i128 {$/;"	function
__multi3_windows_x86_64	$ZIGLIB/compiler_rt/multi3.zig	/^fn __multi3_windows_x86_64(a: v2u64, b: v2u64) callconv(.C) v2u64 {$/;"	function
__mulxc3	$ZIGLIB/compiler_rt/mulxc3.zig	/^pub fn __mulxc3(a: f80, b: f80, c: f80, d: f80) callconv(.C) mulc3.Complex(f80) {$/;"	function
__mulxf3	$ZIGLIB/compiler_rt/mulxf3.zig	/^pub fn __mulxf3(a: f80, b: f80) callconv(.C) f80 {$/;"	function
__nedf2	$ZIGLIB/compiler_rt/cmpdf2.zig	/^pub fn __nedf2(a: f64, b: f64) callconv(.C) i32 {$/;"	function
__negdf2	$ZIGLIB/compiler_rt/negdf2.zig	/^fn __negdf2(a: f64) callconv(.C) f64 {$/;"	function
__negdi2	$ZIGLIB/compiler_rt/negXi2.zig	/^pub fn __negdi2(a: i64) callconv(.C) i64 {$/;"	function
__neghf2	$ZIGLIB/compiler_rt/neghf2.zig	/^fn __neghf2(a: f16) callconv(.C) f16 {$/;"	function
__negsf2	$ZIGLIB/compiler_rt/negsf2.zig	/^fn __negsf2(a: f32) callconv(.C) f32 {$/;"	function
__negsi2	$ZIGLIB/compiler_rt/negXi2.zig	/^pub fn __negsi2(a: i32) callconv(.C) i32 {$/;"	function
__negtf2	$ZIGLIB/compiler_rt/negtf2.zig	/^fn __negtf2(a: f128) callconv(.C) f128 {$/;"	function
__negti2	$ZIGLIB/compiler_rt/negXi2.zig	/^pub fn __negti2(a: i128) callconv(.C) i128 {$/;"	function
__negvdi2	$ZIGLIB/compiler_rt/negv.zig	/^pub fn __negvdi2(a: i64) callconv(.C) i64 {$/;"	function
__negvsi2	$ZIGLIB/compiler_rt/negv.zig	/^pub fn __negvsi2(a: i32) callconv(.C) i32 {$/;"	function
__negvti2	$ZIGLIB/compiler_rt/negv.zig	/^pub fn __negvti2(a: i128) callconv(.C) i128 {$/;"	function
__negxf2	$ZIGLIB/compiler_rt/negxf2.zig	/^fn __negxf2(a: f80) callconv(.C) f80 {$/;"	function
__nehf2	$ZIGLIB/compiler_rt/cmphf2.zig	/^pub fn __nehf2(a: f16, b: f16) callconv(.C) i32 {$/;"	function
__nesf2	$ZIGLIB/compiler_rt/cmpsf2.zig	/^pub fn __nesf2(a: f32, b: f32) callconv(.C) i32 {$/;"	function
__netf2	$ZIGLIB/compiler_rt/cmptf2.zig	/^fn __netf2(a: f128, b: f128) callconv(.C) i32 {$/;"	function
__nexf2	$ZIGLIB/compiler_rt/cmpxf2.zig	/^fn __nexf2(a: f80, b: f80) callconv(.C) i32 {$/;"	function
__opaque	$ZIGLIB/std/c/darwin.zig	/__opaque: [__PTHREAD_MUTEX_SIZE__]u8 = [_]u8{0} ** __PTHREAD_MUTEX_SIZE__/;"	field
__overflow_area_pointer	$ZIGLIB/std/builtin.zig	/__overflow_area_pointer: *anyopaque/;"	field
__overflow_arg_area	$ZIGLIB/std/builtin.zig	/__overflow_arg_area: *anyopaque/;"	field
__pad	$ZIGLIB/std/os/linux/riscv64.zig	/__pad: usize/;"	field
__pad0	$ZIGLIB/std/os/linux/x86_64.zig	/__pad0: u32/;"	field
__pad1	$ZIGLIB/std/os/linux/x86_64.zig	/__pad1: i32 = 0/;"	field
__pad2	$ZIGLIB/std/os/linux/x86_64.zig	/__pad2: socklen_t = 0/;"	field
__pad3	$ZIGLIB/std/os/linux/mips64.zig	/__pad3: u32/;"	field
__pad4	$ZIGLIB/std/os/linux/mips64.zig	/__pad4: [14]usize/;"	field
__paritydi2	$ZIGLIB/compiler_rt/parity.zig	/^pub fn __paritydi2(a: i64) callconv(.C) i32 {$/;"	function
__paritysi2	$ZIGLIB/compiler_rt/parity.zig	/^pub fn __paritysi2(a: i32) callconv(.C) i32 {$/;"	function
__parityti2	$ZIGLIB/compiler_rt/parity.zig	/^pub fn __parityti2(a: i128) callconv(.C) i32 {$/;"	function
__popcountdi2	$ZIGLIB/compiler_rt/popcount.zig	/^pub fn __popcountdi2(a: i64) callconv(.C) i32 {$/;"	function
__popcountsi2	$ZIGLIB/compiler_rt/popcount.zig	/^pub fn __popcountsi2(a: i32) callconv(.C) i32 {$/;"	function
__popcountti2	$ZIGLIB/compiler_rt/popcount.zig	/^pub fn __popcountti2(a: i128) callconv(.C) i32 {$/;"	function
__rdev_padding	$ZIGLIB/std/os/linux/x86.zig	/__rdev_padding: u32/;"	field
__reg_save_area	$ZIGLIB/std/builtin.zig	/__reg_save_area: *anyopaque/;"	field
__reserved	$ZIGLIB/std/os/linux.zig	/__reserved: [16]isize = [1]isize{0} ** 16/;"	field
__reserved_1	$ZIGLIB/std/os/linux.zig	/__reserved_1: u35 = 0/;"	field
__reserved_2	$ZIGLIB/std/os/linux.zig	/__reserved_2: u16 = 0/;"	field
__roundh	$ZIGLIB/compiler_rt/round.zig	/^pub fn __roundh(x: f16) callconv(.C) f16 {$/;"	function
__roundx	$ZIGLIB/compiler_rt/round.zig	/^pub fn __roundx(x: f80) callconv(.C) f80 {$/;"	function
__sa_handler	$ZIGLIB/std/c/haiku.zig	/__sa_handler: handler_fn/;"	field
__saved_reg_area_end_pointer	$ZIGLIB/std/builtin.zig	/__saved_reg_area_end_pointer: *anyopaque/;"	field
__sc_unused	$ZIGLIB/std/c/openbsd.zig	/__sc_unused: c_int/;"	field
__sched_priority	$ZIGLIB/std/c/haiku.zig	/__sched_priority: i32/;"	field
__sig	$ZIGLIB/std/c/darwin.zig	/__sig: c_long = 0x3CB0B1BB/;"	field
__sigaction_u	$ZIGLIB/std/c/haiku.zig	/__sigaction_u: extern union {$/;"	field
__sin	$ZIGLIB/compiler_rt/trig.zig	/^pub fn __sin(x: f64, y: f64, iy: i32) f64 {$/;"	function
__sincosh	$ZIGLIB/compiler_rt/sincos.zig	/^pub fn __sincosh(x: f16, r_sin: *f16, r_cos: *f16) callconv(.C) void {$/;"	function
__sincosx	$ZIGLIB/compiler_rt/sincos.zig	/^pub fn __sincosx(x: f80, r_sin: *f80, r_cos: *f80) callconv(.C) void {$/;"	function
__sindf	$ZIGLIB/compiler_rt/trig.zig	/^pub fn __sindf(x: f64) f32 {$/;"	function
__sinh	$ZIGLIB/compiler_rt/sin.zig	/^pub fn __sinh(x: f16) callconv(.C) f16 {$/;"	function
__sinx	$ZIGLIB/compiler_rt/sin.zig	/^pub fn __sinx(x: f80) callconv(.C) f80 {$/;"	function
__size	$ZIGLIB/std/c/linux.zig	/__size: [__SIZEOF_SEM_T]u8 align(@alignOf(usize))/;"	field
__spare	$ZIGLIB/std/c/netbsd.zig	/__spare: [2]u32/;"	field
__spare__	$ZIGLIB/std/c/freebsd.zig	/__spare__: [4]c_int/;"	field
__sqrth	$ZIGLIB/compiler_rt/sqrt.zig	/^pub fn __sqrth(x: f16) callconv(.C) f16 {$/;"	function
__sqrtx	$ZIGLIB/compiler_rt/sqrt.zig	/^pub fn __sqrtx(x: f80) callconv(.C) f80 {$/;"	function
__src_id	$ZIGLIB/std/c/solaris.zig	/__src_id: u32 = 0/;"	field
__stack	$ZIGLIB/std/builtin.zig	/__stack: *anyopaque/;"	field
__stack_address	$ZIGLIB/std/c/haiku.zig	/__stack_address: ?*anyopaque/;"	field
__stack_size	$ZIGLIB/std/c/haiku.zig	/__stack_size: i32/;"	field
__subdf3	$ZIGLIB/compiler_rt/subdf3.zig	/^fn __subdf3(a: f64, b: f64) callconv(.C) f64 {$/;"	function
__subhf3	$ZIGLIB/compiler_rt/subhf3.zig	/^fn __subhf3(a: f16, b: f16) callconv(.C) f16 {$/;"	function
__subodi4	$ZIGLIB/compiler_rt/subo.zig	/^pub fn __subodi4(a: i64, b: i64, overflow: *c_int) callconv(.C) i64 {$/;"	function
__subosi4	$ZIGLIB/compiler_rt/subo.zig	/^pub fn __subosi4(a: i32, b: i32, overflow: *c_int) callconv(.C) i32 {$/;"	function
__suboti4	$ZIGLIB/compiler_rt/subo.zig	/^pub fn __suboti4(a: i128, b: i128, overflow: *c_int) callconv(.C) i128 {$/;"	function
__subsf3	$ZIGLIB/compiler_rt/subsf3.zig	/^fn __subsf3(a: f32, b: f32) callconv(.C) f32 {$/;"	function
__subtf3	$ZIGLIB/compiler_rt/subtf3.zig	/^pub fn __subtf3(a: f128, b: f128) callconv(.C) f128 {$/;"	function
__subxf3	$ZIGLIB/compiler_rt/subxf3.zig	/^fn __subxf3(a: f80, b: f80) callconv(.C) f80 {$/;"	function
__tan	$ZIGLIB/compiler_rt/trig.zig	/^pub fn __tan(x_: f64, y_: f64, odd: bool) f64 {$/;"	function
__tandf	$ZIGLIB/compiler_rt/trig.zig	/^pub fn __tandf(x: f64, odd: bool) f32 {$/;"	function
__tanh	$ZIGLIB/compiler_rt/tan.zig	/^pub fn __tanh(x: f16) callconv(.C) f16 {$/;"	function
__tanx	$ZIGLIB/compiler_rt/tan.zig	/^pub fn __tanx(x: f80) callconv(.C) f80 {$/;"	function
__truncdfhf2	$ZIGLIB/compiler_rt/truncdfhf2.zig	/^pub fn __truncdfhf2(a: f64) callconv(.C) common.F16T {$/;"	function
__truncdfsf2	$ZIGLIB/compiler_rt/truncdfsf2.zig	/^pub fn __truncdfsf2(a: f64) callconv(.C) f32 {$/;"	function
__trunch	$ZIGLIB/compiler_rt/trunc.zig	/^pub fn __trunch(x: f16) callconv(.C) f16 {$/;"	function
__truncsfhf2	$ZIGLIB/compiler_rt/truncsfhf2.zig	/^pub fn __truncsfhf2(a: f32) callconv(.C) common.F16T {$/;"	function
__trunctfdf2	$ZIGLIB/compiler_rt/trunctfdf2.zig	/^pub fn __trunctfdf2(a: f128) callconv(.C) f64 {$/;"	function
__trunctfhf2	$ZIGLIB/compiler_rt/trunctfhf2.zig	/^pub fn __trunctfhf2(a: f128) callconv(.C) common.F16T {$/;"	function
__trunctfsf2	$ZIGLIB/compiler_rt/trunctfsf2.zig	/^pub fn __trunctfsf2(a: f128) callconv(.C) f32 {$/;"	function
__trunctfxf2	$ZIGLIB/compiler_rt/trunctfxf2.zig	/^pub fn __trunctfxf2(a: f128) callconv(.C) f80 {$/;"	function
__truncx	$ZIGLIB/compiler_rt/trunc.zig	/^pub fn __truncx(x: f80) callconv(.C) f80 {$/;"	function
__truncxfdf2	$ZIGLIB/compiler_rt/truncxfdf2.zig	/^fn __truncxfdf2(a: f80) callconv(.C) f64 {$/;"	function
__truncxfhf2	$ZIGLIB/compiler_rt/truncxfhf2.zig	/^fn __truncxfhf2(a: f80) callconv(.C) common.F16T {$/;"	function
__truncxfsf2	$ZIGLIB/compiler_rt/truncxfsf2.zig	/^fn __truncxfsf2(a: f80) callconv(.C) f32 {$/;"	function
__ucmpdi2	$ZIGLIB/compiler_rt/cmp.zig	/^pub fn __ucmpdi2(a: u64, b: u64) callconv(.C) i32 {$/;"	function
__ucmpsi2	$ZIGLIB/compiler_rt/cmp.zig	/^pub fn __ucmpsi2(a: u32, b: u32) callconv(.C) i32 {$/;"	function
__ucmpti2	$ZIGLIB/compiler_rt/cmp.zig	/^pub fn __ucmpti2(a: u128, b: u128) callconv(.C) i32 {$/;"	function
__udivdi3	$ZIGLIB/compiler_rt/int.zig	/^pub fn __udivdi3(a: u64, b: u64) callconv(.C) u64 {$/;"	function
__udivei4	$ZIGLIB/compiler_rt/udivmodei4.zig	/^pub fn __udivei4(r_q: [*c]u32, u_p: [*c]const u32, v_p: [*c]const u32, bits: usize) callconv(.C) void {$/;"	function
__udivmoddi4	$ZIGLIB/compiler_rt/int.zig	/^pub fn __udivmoddi4(a: u64, b: u64, maybe_rem: ?*u64) callconv(.C) u64 {$/;"	function
__udivmodsi4	$ZIGLIB/compiler_rt/int.zig	/^pub fn __udivmodsi4(a: u32, b: u32, rem: *u32) callconv(.C) u32 {$/;"	function
__udivmodti4	$ZIGLIB/compiler_rt/udivmodti4.zig	/^pub fn __udivmodti4(a: u128, b: u128, maybe_rem: ?*u128) callconv(.C) u128 {$/;"	function
__udivmodti4_windows_x86_64	$ZIGLIB/compiler_rt/udivmodti4.zig	/^fn __udivmodti4_windows_x86_64(a: v2u64, b: v2u64, maybe_rem: ?*u128) callconv(.C) v2u64 {$/;"	function
__udivsi3	$ZIGLIB/compiler_rt/int.zig	/^pub fn __udivsi3(n: u32, d: u32) callconv(.C) u32 {$/;"	function
__udivti3	$ZIGLIB/compiler_rt/udivti3.zig	/^pub fn __udivti3(a: u128, b: u128) callconv(.C) u128 {$/;"	function
__udivti3_windows_x86_64	$ZIGLIB/compiler_rt/udivti3.zig	/^fn __udivti3_windows_x86_64(a: v2u64, b: v2u64) callconv(.C) v2u64 {$/;"	function
__umoddi3	$ZIGLIB/compiler_rt/int.zig	/^pub fn __umoddi3(a: u64, b: u64) callconv(.C) u64 {$/;"	function
__umodei4	$ZIGLIB/compiler_rt/udivmodei4.zig	/^pub fn __umodei4(r_p: [*c]u32, u_p: [*c]const u32, v_p: [*c]const u32, bits: usize) callconv(.C) void {$/;"	function
__umodsi3	$ZIGLIB/compiler_rt/int.zig	/^pub fn __umodsi3(n: u32, d: u32) callconv(.C) u32 {$/;"	function
__umodti3	$ZIGLIB/compiler_rt/umodti3.zig	/^pub fn __umodti3(a: u128, b: u128) callconv(.C) u128 {$/;"	function
__umodti3_windows_x86_64	$ZIGLIB/compiler_rt/umodti3.zig	/^fn __umodti3_windows_x86_64(a: v2u64, b: v2u64) callconv(.C) v2u64 {$/;"	function
__unorddf2	$ZIGLIB/compiler_rt/unorddf2.zig	/^pub fn __unorddf2(a: f64, b: f64) callconv(.C) i32 {$/;"	function
__unordhf2	$ZIGLIB/compiler_rt/unordhf2.zig	/^pub fn __unordhf2(a: f16, b: f16) callconv(.C) i32 {$/;"	function
__unordsf2	$ZIGLIB/compiler_rt/unordsf2.zig	/^pub fn __unordsf2(a: f32, b: f32) callconv(.C) i32 {$/;"	function
__unordtf2	$ZIGLIB/compiler_rt/unordtf2.zig	/^fn __unordtf2(a: f128, b: f128) callconv(.C) i32 {$/;"	function
__unordxf2	$ZIGLIB/compiler_rt/unordxf2.zig	/^pub fn __unordxf2(a: f80, b: f80) callconv(.C) i32 {$/;"	function
__unused	$ZIGLIB/std/os/linux/x86_64.zig	/__unused: [3]isize/;"	field
__vr_offs	$ZIGLIB/std/builtin.zig	/__vr_offs: c_int/;"	field
__vr_top	$ZIGLIB/std/builtin.zig	/__vr_top: *anyopaque/;"	field
__xl_a	$ZIGLIB/std/start_windows_tls.zig	/^export var __xl_a: std.os.windows.PIMAGE_TLS_CALLBACK linksection(".CRT$XLA") = null/;"	variable
__xl_z	$ZIGLIB/std/start_windows_tls.zig	/^export var __xl_z: std.os.windows.PIMAGE_TLS_CALLBACK linksection(".CRT$XLZ") = null/;"	variable
_alldiv	$ZIGLIB/compiler_rt/aulldiv.zig	/^pub fn _alldiv(a: i64, b: i64) callconv(.Stdcall) i64 {$/;"	function
_allrem	$ZIGLIB/compiler_rt/aullrem.zig	/^pub fn _allrem(a: i64, b: i64) callconv(.Stdcall) i64 {$/;"	function
_aulldiv	$ZIGLIB/compiler_rt/aulldiv.zig	/^pub fn _aulldiv() callconv(.Naked) void {$/;"	function
_aullrem	$ZIGLIB/compiler_rt/aullrem.zig	/^pub fn _aullrem() callconv(.Naked) void {$/;"	function
_blt	$ZIGLIB/std/os/uefi/protocols/graphics_output_protocol.zig	/_blt: *const fn (*const GraphicsOutputProtocol, ?[*]GraphicsOutputBltPixel, GraphicsOutputBltOperation, usize, usize, usize, usize, usize, usize, usize) callconv(.C) Status/;"	field
_cancel	$ZIGLIB/std/os/uefi/protocols/udp6_protocol.zig	/_cancel: *const fn (*const Udp6Protocol, ?*Udp6CompletionToken) callconv(.C) Status/;"	field
_cap_spare	$ZIGLIB/std/c/freebsd.zig	/_cap_spare: u64/;"	field
_carry128	$ZIGLIB/std/crypto/25519/field.zig	/inline fn _carry128(r: *[5]u128) Fe {$/;"	function
_chkstk	$ZIGLIB/compiler_rt/stack_probe.zig	/^pub fn _chkstk() callconv(.Naked) void {$/;"	function
_clear_screen	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/_clear_screen: *const fn (*const SimpleTextOutputProtocol) callconv(.C) Status/;"	field
_clockid	$ZIGLIB/std/c/freebsd.zig	/_clockid: u32/;"	field
_close	$ZIGLIB/std/os/uefi/protocols/file_protocol.zig	/_close: *const fn (*const FileProtocol) callconv(.C) Status/;"	field
_configure	$ZIGLIB/std/os/uefi/protocols/udp6_protocol.zig	/_configure: *const fn (*const Udp6Protocol, ?*const Udp6ConfigData) callconv(.C) Status/;"	field
_conventional_data	$ZIGLIB/std/heap/WasmPageAllocator.zig	/^var _conventional_data = [_]u128{0} ** 16/;"	variable
_count	$ZIGLIB/std/c/freebsd.zig	/_count: u32/;"	field
_create_child	$ZIGLIB/std/os/uefi/protocols/udp6_service_binding_protocol.zig	/_create_child: *const fn (*const Udp6ServiceBindingProtocol, *?Handle) callconv(.C) Status/;"	field
_create_popup	$ZIGLIB/std/os/uefi/protocols/hii_popup_protocol.zig	/_create_popup: *const fn (*const HIIPopupProtocol, HIIPopupStyle, HIIPopupType, hii.HIIHandle, u16, ?*HIIPopupSelection) callconv(.C) Status/;"	field
_d_pad0	$ZIGLIB/std/c/freebsd.zig	/_d_pad0: u8/;"	field
_d_pad1	$ZIGLIB/std/c/freebsd.zig	/_d_pad1: u16/;"	field
_delete	$ZIGLIB/std/os/uefi/protocols/file_protocol.zig	/_delete: *const fn (*const FileProtocol) callconv(.C) Status/;"	field
_destroy_child	$ZIGLIB/std/os/uefi/protocols/udp6_service_binding_protocol.zig	/_destroy_child: *const fn (*const Udp6ServiceBindingProtocol, Handle) callconv(.C) Status/;"	field
_enable_cursor	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/_enable_cursor: *const fn (*const SimpleTextOutputProtocol, bool) callconv(.C) Status/;"	field
_errno	$ZIGLIB/std/c/wasi.zig	/^pub fn _errno() *c_int {$/;"	function
_export_package_lists	$ZIGLIB/std/os/uefi/protocols/hii_database_protocol.zig	/_export_package_lists: *const fn (*const HIIDatabaseProtocol, ?hii.HIIHandle, *usize, *hii.HIIPackageList) callconv(.C) Status/;"	field
_ext	$ZIGLIB/std/c/freebsd.zig	/_ext: [4]u64 = [_]u64{0} ** 4/;"	field
_f32	$ZIGLIB/std/wasm.zig	/const _f32 = valtype(.f32)/;"	constant
_f64	$ZIGLIB/std/wasm.zig	/const _f64 = valtype(.f64)/;"	constant
_find_keyboard_layouts	$ZIGLIB/std/os/uefi/protocols/hii_database_protocol.zig	/_find_keyboard_layouts: Status/;"	field
_flags	$ZIGLIB/std/c/freebsd.zig	/_flags: u32/;"	field
_flush	$ZIGLIB/std/os/uefi/protocols/file_protocol.zig	/_flush: *const fn (*const FileProtocol) callconv(.C) Status/;"	field
_flush_blocks	$ZIGLIB/std/os/uefi/protocols/block_io_protocol.zig	/_flush_blocks: *const fn (*BlockIoProtocol) callconv(.C) Status/;"	field
_get	$ZIGLIB/std/compress/lzma/vec2d.zig	/inline fn _get(self: Self, row: usize) ![]T {$/;"	function
_get_data	$ZIGLIB/std/os/uefi/protocols/ip6_config_protocol.zig	/_get_data: *const fn (*const Ip6ConfigProtocol, Ip6ConfigDataType, *usize, ?*const anyopaque) callconv(.C) Status/;"	field
_get_edid	$ZIGLIB/std/os/uefi/protocols/edid_override_protocol.zig	/_get_edid: *const fn (*const EdidOverrideProtocol, Handle, *EdidOverrideProtocolAttributes, *usize, *?[*]u8) callconv(.C) Status/;"	field
_get_info	$ZIGLIB/std/os/uefi/protocols/rng_protocol.zig	/_get_info: *const fn (*const RNGProtocol, *usize, [*]align(8) Guid) callconv(.C) Status/;"	field
_get_keyboard_layout	$ZIGLIB/std/os/uefi/protocols/hii_database_protocol.zig	/_get_keyboard_layout: Status/;"	field
_get_mode_data	$ZIGLIB/std/os/uefi/protocols/udp6_protocol.zig	/_get_mode_data: *const fn (*const Udp6Protocol, ?*Udp6ConfigData, ?*Ip6ModeData, ?*ManagedNetworkConfigData, ?*SimpleNetworkMode) callconv(.C) Status/;"	field
_get_package_list_handle	$ZIGLIB/std/os/uefi/protocols/hii_database_protocol.zig	/_get_package_list_handle: Status/;"	field
_get_position	$ZIGLIB/std/os/uefi/protocols/file_protocol.zig	/_get_position: *const fn (*const FileProtocol, *u64) callconv(.C) Status/;"	field
_get_rng	$ZIGLIB/std/os/uefi/protocols/rng_protocol.zig	/_get_rng: *const fn (*const RNGProtocol, ?*align(8) const Guid, usize, [*]u8) callconv(.C) Status/;"	field
_get_state	$ZIGLIB/std/os/uefi/protocols/simple_pointer_protocol.zig	/_get_state: *const fn (*const SimplePointerProtocol, *SimplePointerState) callconv(.C) Status/;"	field
_get_status	$ZIGLIB/std/os/uefi/protocols/simple_network_protocol.zig	/_get_status: *const fn (*const SimpleNetworkProtocol, *SimpleNetworkInterruptStatus, ?*?[*]u8) callconv(.C) Status/;"	field
_groups	$ZIGLIB/std/os/uefi/protocols/udp6_protocol.zig	/_groups: *const fn (*const Udp6Protocol, bool, ?*const Ip6Address) callconv(.C) Status/;"	field
_i32	$ZIGLIB/std/wasm.zig	/const _i32 = valtype(.i32)/;"	constant
_i64	$ZIGLIB/std/wasm.zig	/const _i64 = valtype(.i64)/;"	constant
_initialize	$ZIGLIB/std/os/uefi/protocols/simple_network_protocol.zig	/_initialize: *const fn (*const SimpleNetworkProtocol, usize, usize) callconv(.C) Status/;"	field
_kern	$ZIGLIB/std/c/freebsd.zig	/_kern: extern struct {$/;"	field
_ksiginfo	$ZIGLIB/std/c/netbsd.zig	/^pub const _ksiginfo = extern struct {$/;"	struct
_list_package_lists	$ZIGLIB/std/os/uefi/protocols/hii_database_protocol.zig	/_list_package_lists: *const fn (*const HIIDatabaseProtocol, u8, ?*const Guid, *usize, [*]hii.HIIHandle) callconv(.C) Status/;"	field
_llseek	$ZIGLIB/std/os/linux/syscalls.zig	/_llseek = Linux + 140/;"	field
_magic	$ZIGLIB/std/c/freebsd.zig	/_magic: u32/;"	field
_mcast_ip_to_mac	$ZIGLIB/std/os/uefi/protocols/simple_network_protocol.zig	/_mcast_ip_to_mac: *const fn (*const SimpleNetworkProtocol, bool, *const anyopaque, *MacAddress) callconv(.C) Status/;"	field
_mh_execute_header	$ZIGLIB/std/c/darwin.zig	/^pub extern var _mh_execute_header: mach_hdr/;"	variable
_neighbors	$ZIGLIB/std/os/uefi/protocols/ip6_protocol.zig	/_neighbors: *const fn (*const Ip6Protocol, bool, *const Ip6Address, ?*const MacAddress, u32, bool) callconv(.C) Status/;"	field
_new_package_list	$ZIGLIB/std/os/uefi/protocols/hii_database_protocol.zig	/_new_package_list: Status/;"	field
_newselect	$ZIGLIB/std/os/linux/syscalls.zig	/_newselect = Linux + 22/;"	field
_nvdata	$ZIGLIB/std/os/uefi/protocols/simple_network_protocol.zig	/_nvdata: *const fn (*const SimpleNetworkProtocol, bool, usize, usize, [*]u8) callconv(.C) Status/;"	field
_open	$ZIGLIB/std/os/uefi/protocols/file_protocol.zig	/_open: *const fn (*const FileProtocol, **const FileProtocol, [*:0]const u16, u64, u64) callconv(.C) Status/;"	field
_open_volume	$ZIGLIB/std/os/uefi/protocols/simple_file_system_protocol.zig	/_open_volume: *const fn (*const SimpleFileSystemProtocol, **const FileProtocol) callconv(.C) Status/;"	field
_os_unfair_lock_opaque	$ZIGLIB/std/c/darwin.zig	/_os_unfair_lock_opaque: u32 = 0/;"	field
_output_string	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/_output_string: *const fn (*const SimpleTextOutputProtocol, [*:0]const u16) callconv(.C) Status/;"	field
_pad	$ZIGLIB/std/os/uefi/protocols/simple_text_input_ex_protocol.zig	/_pad: u3 = 0/;"	field
_pad0	$ZIGLIB/std/os/linux/powerpc64.zig	/_pad0: i32/;"	field
_pad1	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/_pad1: u7 = 0/;"	field
_pad2	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/_pad2: u43 = 0/;"	field
_padding	$ZIGLIB/std/c/freebsd.zig	/_padding: u32/;"	field
_poll	$ZIGLIB/std/os/uefi/protocols/udp6_protocol.zig	/_poll: *const fn (*const Udp6Protocol) callconv(.C) Status/;"	field
_query_mode	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/_query_mode: *const fn (*const SimpleTextOutputProtocol, usize, *usize, *usize) callconv(.C) Status/;"	field
_read	$ZIGLIB/std/os/uefi/protocols/file_protocol.zig	/_read: *const fn (*const FileProtocol, *usize, [*]u8) callconv(.C) Status/;"	field
_read_blocks	$ZIGLIB/std/os/uefi/protocols/block_io_protocol.zig	/_read_blocks: *const fn (*BlockIoProtocol, media_id: u32, lba: u64, buffer_size: usize, buf: [*]u8) callconv(.C) Status/;"	field
_read_key_stroke	$ZIGLIB/std/os/uefi/protocols/simple_text_input_protocol.zig	/_read_key_stroke: *const fn (*const SimpleTextInputProtocol, *InputKey) callconv(.C) Status/;"	field
_read_key_stroke_ex	$ZIGLIB/std/os/uefi/protocols/simple_text_input_ex_protocol.zig	/_read_key_stroke_ex: *const fn (*const SimpleTextInputExProtocol, *KeyData) callconv(.C) Status/;"	field
_receive	$ZIGLIB/std/os/uefi/protocols/udp6_protocol.zig	/_receive: *const fn (*const Udp6Protocol, *Udp6CompletionToken) callconv(.C) Status/;"	field
_receive_filters	$ZIGLIB/std/os/uefi/protocols/simple_network_protocol.zig	/_receive_filters: *const fn (*const SimpleNetworkProtocol, SimpleNetworkReceiveFilter, SimpleNetworkReceiveFilter, bool, usize, ?[*]const MacAddress) callconv(.C) Status/;"	field
_register_data_notify	$ZIGLIB/std/os/uefi/protocols/ip6_config_protocol.zig	/_register_data_notify: *const fn (*const Ip6ConfigProtocol, Ip6ConfigDataType, Event) callconv(.C) Status/;"	field
_register_key_notify	$ZIGLIB/std/os/uefi/protocols/simple_text_input_ex_protocol.zig	/_register_key_notify: *const fn (*const SimpleTextInputExProtocol, *const KeyData, *const fn (*const KeyData) callconv(.C) usize, **anyopaque) callconv(.C) Status/;"	field
_register_package_notify	$ZIGLIB/std/os/uefi/protocols/hii_database_protocol.zig	/_register_package_notify: Status/;"	field
_remove_package_list	$ZIGLIB/std/os/uefi/protocols/hii_database_protocol.zig	/_remove_package_list: *const fn (*const HIIDatabaseProtocol, hii.HIIHandle) callconv(.C) Status/;"	field
_reserved_0	$ZIGLIB/std/coff.zig	/_reserved_0: u5 = 0/;"	field
_reserved_1	$ZIGLIB/std/coff.zig	/_reserved_1: u1 = 0/;"	field
_reserved_3	$ZIGLIB/std/coff.zig	/_reserved_3: u2 = 0/;"	field
_reserverd_2	$ZIGLIB/std/coff.zig	/_reserverd_2: u1 = 0/;"	field
_reset	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/_reset: *const fn (*const SimpleTextOutputProtocol, bool) callconv(.C) Status/;"	field
_routes	$ZIGLIB/std/os/uefi/protocols/ip6_protocol.zig	/_routes: *const fn (*const Ip6Protocol, bool, ?*const Ip6Address, u8, ?*const Ip6Address) callconv(.C) Status/;"	field
_set_attribute	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/_set_attribute: *const fn (*const SimpleTextOutputProtocol, usize) callconv(.C) Status/;"	field
_set_cursor_position	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/_set_cursor_position: *const fn (*const SimpleTextOutputProtocol, usize, usize) callconv(.C) Status/;"	field
_set_data	$ZIGLIB/std/os/uefi/protocols/ip6_config_protocol.zig	/_set_data: *const fn (*const Ip6ConfigProtocol, Ip6ConfigDataType, usize, *const anyopaque) callconv(.C) Status/;"	field
_set_info	$ZIGLIB/std/os/uefi/protocols/file_protocol.zig	/_set_info: *const fn (*const FileProtocol, *align(8) const Guid, usize, [*]const u8) callconv(.C) Status/;"	field
_set_keyboard_layout	$ZIGLIB/std/os/uefi/protocols/hii_database_protocol.zig	/_set_keyboard_layout: Status/;"	field
_set_mode	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/_set_mode: *const fn (*const SimpleTextOutputProtocol, usize) callconv(.C) Status/;"	field
_set_position	$ZIGLIB/std/os/uefi/protocols/file_protocol.zig	/_set_position: *const fn (*const FileProtocol, u64) callconv(.C) Status/;"	field
_set_state	$ZIGLIB/std/os/uefi/protocols/simple_text_input_ex_protocol.zig	/_set_state: *const fn (*const SimpleTextInputExProtocol, *const u8) callconv(.C) Status/;"	field
_shutdown	$ZIGLIB/std/os/uefi/protocols/simple_network_protocol.zig	/_shutdown: *const fn (*const SimpleNetworkProtocol) callconv(.C) Status/;"	field
_size	$ZIGLIB/std/fs/file.zig	/_size: u64/;"	field
_spare	$ZIGLIB/std/c/freebsd.zig	/_spare: c_int/;"	field
_spare0	$ZIGLIB/std/c/freebsd.zig	/_spare0: [4]u32/;"	field
_spare1	$ZIGLIB/std/c/freebsd.zig	/_spare1: [4]u32/;"	field
_spare2	$ZIGLIB/std/c/freebsd.zig	/_spare2: [32]u64/;"	field
_start	$ZIGLIB/std/start.zig	/^fn _start() callconv(.Naked) noreturn {$/;"	function
_start2	$ZIGLIB/std/start.zig	/^fn _start2() callconv(.Naked) noreturn {$/;"	function
_station_address	$ZIGLIB/std/os/uefi/protocols/simple_network_protocol.zig	/_station_address: *const fn (*const SimpleNetworkProtocol, bool, ?*const MacAddress) callconv(.C) Status/;"	field
_statistics	$ZIGLIB/std/os/uefi/protocols/simple_network_protocol.zig	/_statistics: *const fn (*const SimpleNetworkProtocol, bool, ?*usize, ?*NetworkStatistics) callconv(.C) Status/;"	field
_stop	$ZIGLIB/std/os/uefi/protocols/simple_network_protocol.zig	/_stop: *const fn (*const SimpleNetworkProtocol) callconv(.C) Status/;"	field
_sysctl	$ZIGLIB/std/os/linux/syscalls.zig	/_sysctl = Linux + 153/;"	field
_testType	$ZIGLIB/compiler_rt/emutls.zig	/fn _testType(comptime T: type, value: T) !void {$/;"	function
_test_string	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/_test_string: *const fn (*const SimpleTextOutputProtocol, [*:0]const u16) callconv(.C) Status/;"	field
_timeout	$ZIGLIB/std/c/freebsd.zig	/_timeout: timespec/;"	field
_tls_end	$ZIGLIB/std/start_windows_tls.zig	/^export var _tls_end: u8 linksection(".tls$ZZZ") = 0/;"	variable
_tls_index	$ZIGLIB/std/start_windows_tls.zig	/^export var _tls_index: u32 = std.os.windows.TLS_OUT_OF_INDEXES/;"	variable
_tls_start	$ZIGLIB/std/start_windows_tls.zig	/^export var _tls_start: u8 linksection(".tls") = 0/;"	variable
_tls_used	$ZIGLIB/std/start_windows_tls.zig	/^export const _tls_used linksection(".rdata$T") = IMAGE_TLS_DIRECTORY{$/;"	constant
_transmit	$ZIGLIB/std/os/uefi/protocols/udp6_protocol.zig	/_transmit: *const fn (*const Udp6Protocol, *Udp6CompletionToken) callconv(.C) Status/;"	field
_umtx_time	$ZIGLIB/std/c/freebsd.zig	/^pub const _umtx_time = extern struct {$/;"	struct
_unload	$ZIGLIB/std/os/uefi/protocols/loaded_image_protocol.zig	/_unload: *const fn (*const LoadedImageProtocol, Handle) callconv(.C) Status/;"	field
_unregister_data_notify	$ZIGLIB/std/os/uefi/protocols/ip6_config_protocol.zig	/_unregister_data_notify: *const fn (*const Ip6ConfigProtocol, Ip6ConfigDataType, Event) callconv(.C) Status/;"	field
_unregister_key_notify	$ZIGLIB/std/os/uefi/protocols/simple_text_input_ex_protocol.zig	/_unregister_key_notify: *const fn (*const SimpleTextInputExProtocol, *const anyopaque) callconv(.C) Status/;"	field
_unregister_package_notify	$ZIGLIB/std/os/uefi/protocols/hii_database_protocol.zig	/_unregister_package_notify: Status/;"	field
_update_package_list	$ZIGLIB/std/os/uefi/protocols/hii_database_protocol.zig	/_update_package_list: *const fn (*const HIIDatabaseProtocol, hii.HIIHandle, *const hii.HIIPackageList) callconv(.C) Status/;"	field
_volume_label	$ZIGLIB/std/os/uefi/protocols/file_protocol.zig	/_volume_label: u16/;"	field
_write	$ZIGLIB/std/os/uefi/protocols/file_protocol.zig	/_write: *const fn (*const FileProtocol, *usize, [*]const u8) callconv(.C) Status/;"	field
_write_blocks	$ZIGLIB/std/os/uefi/protocols/block_io_protocol.zig	/_write_blocks: *const fn (*BlockIoProtocol, media_id: u32, lba: u64, buffer_size: usize, buf: [*]u8) callconv(.C) Status/;"	field
a0_2	$ZIGLIB/std/crypto/25519/field.zig	/const a0_2 = 2 * ax[0]/;"	constant
a1_2	$ZIGLIB/std/crypto/25519/field.zig	/const a1_2 = 2 * ax[1]/;"	constant
a1_38	$ZIGLIB/std/crypto/25519/field.zig	/const a1_38 = 38 * ax[1]/;"	constant
a2_38	$ZIGLIB/std/crypto/25519/field.zig	/const a2_38 = 38 * ax[2]/;"	constant
a3_19	$ZIGLIB/std/crypto/25519/field.zig	/const a3_19 = 19 * ax[3]/;"	constant
a3_38	$ZIGLIB/std/crypto/25519/field.zig	/const a3_38 = 38 * ax[3]/;"	constant
a4_19	$ZIGLIB/std/crypto/25519/field.zig	/const a4_19 = 19 * ax[4]/;"	constant
a510	$ZIGLIB/std/target/aarch64.zig	/a510/;"	field
a64fx	$ZIGLIB/std/target/aarch64.zig	/pub const a64fx = CpuModel{$/;"	constant
a710	$ZIGLIB/std/target/aarch64.zig	/a710/;"	field
a78c	$ZIGLIB/std/target/aarch64.zig	/a78c/;"	field
aAbs	$ZIGLIB/compiler_rt/truncf.zig	/const aAbs: src_rep_t = aRep & srcAbsMask/;"	constant
aExp	$ZIGLIB/compiler_rt/truncf.zig	/const aExp = @intCast(u32, aAbs >> srcSigBits)/;"	constant
aExponent	$ZIGLIB/compiler_rt/mulf3.zig	/const aExponent = @truncate(ZExp, (@bitCast(Z, a) >> significandBits) & maxExponent)/;"	constant
aInt	$ZIGLIB/compiler_rt/comparef.zig	/const aInt = @bitCast(srep_t, a)/;"	constant
aPtr_u16	$ZIGLIB/compiler_rt/fmod.zig	/const aPtr_u16 = @ptrCast([*]u16, &amod)/;"	constant
aPtr_u64	$ZIGLIB/compiler_rt/fmod.zig	/const aPtr_u64 = @ptrCast([*]u64, &amod)/;"	constant
aRep	$ZIGLIB/compiler_rt/truncf.zig	/const aRep: src_rep_t = @bitCast(src_rep_t, a)/;"	constant
aSignificand	$ZIGLIB/compiler_rt/mulf3.zig	/var aSignificand: ZSignificand = @intCast(ZSignificand, @bitCast(Z, a) & significandMask)/;"	variable
a_abs	$ZIGLIB/compiler_rt/trunctfxf2.zig	/const a_abs = a_rep & src_abs_mask/;"	constant
a_batch	$ZIGLIB/std/crypto/25519/ed25519.zig	/var a_batch: [count]Curve = undefined/;"	variable
a_borrow	$ZIGLIB/std/math/big/int.zig	/var a_borrow: u1 = 1/;"	variable
a_bytes	$ZIGLIB/std/os/windows.zig	/const a_bytes = @intCast(u16, a.len * 2)/;"	constant
a_casted	$ZIGLIB/std/zig/c_translation.zig	/const a_casted = cast(ResType, a)/;"	constant
a_copy	$ZIGLIB/std/math/big/int.zig	/const a_copy = if (rma.limbs.ptr == a.limbs.ptr) blk: {$/;"	constant
a_fraction	$ZIGLIB/compiler_rt/comparef.zig	/const a_fraction = a_rep.fraction | (@as(u80, a_rep.exp) << sig_bits)/;"	constant
a_hi	$ZIGLIB/std/math/big/int.zig	/var a_hi = acc[split..]/;"	variable
a_indices	$ZIGLIB/std/simd.zig	/const a_indices = count_up - cycle * @splat(len, @intCast(i32, b_vec_count))/;"	constant
a_len	$ZIGLIB/std/simd.zig	/const a_len = vectorLength(@TypeOf(a))/;"	constant
a_limbs	$ZIGLIB/std/math/big/int.zig	/const a_limbs = a.limbs[0..math.min(req_limbs, a.limbs.len)]/;"	constant
a_lo	$ZIGLIB/std/math/big/int.zig	/var a_lo = acc[0..split]/;"	variable
a_rep	$ZIGLIB/compiler_rt/trunctfxf2.zig	/const a_rep = @bitCast(u128, a)/;"	constant
a_signed	$ZIGLIB/std/zig/c_translation.zig	/const a_signed = @typeInfo(A_Promoted).Int.signedness == .signed/;"	constant
a_string	$ZIGLIB/std/os/windows.zig	/const a_string = UNICODE_STRING{$/;"	constant
a_type	$ZIGLIB/std/meta.zig	/var a_type: EnumType = .a/;"	variable
a_un	$ZIGLIB/std/elf.zig	/a_un: extern union {$/;"	field
a_val	$ZIGLIB/std/elf.zig	/a_val: u64/;"	field
a_vec_count	$ZIGLIB/std/simd.zig	/const a_vec_count = (1 + vecs_arr.len) >> 1/;"	constant
aapcs_frame_chain	$ZIGLIB/std/target/arm.zig	/aapcs_frame_chain/;"	field
aapcs_frame_chain_leaf	$ZIGLIB/std/target/arm.zig	/aapcs_frame_chain_leaf/;"	field
aarch64	$ZIGLIB/std/zig/system/arm.zig	/^pub const aarch64 = struct {$/;"	struct
aarch64_32	$ZIGLIB/std/target.zig	/aarch64_32/;"	field
aarch64_be	$ZIGLIB/std/target.zig	/aarch64_be/;"	field
abbrev_code	$ZIGLIB/std/dwarf.zig	/const abbrev_code = try leb.readULEB128(u64, in_stream)/;"	constant
abbrev_table	$ZIGLIB/std/dwarf.zig	/const abbrev_table = try di.getAbbrevTable(allocator, debug_abbrev_offset)/;"	constant
abbrev_table_list	$ZIGLIB/std/dwarf.zig	/abbrev_table_list: std.ArrayListUnmanaged(AbbrevTableHeader) = .{}/;"	field
abbrv	$ZIGLIB/std/net.zig	/var abbrv = false/;"	variable
abiAndDynamicLinkerFromFile	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/^pub fn abiAndDynamicLinkerFromFile($/;"	function
abi_it	$ZIGLIB/std/zig/CrossTarget.zig	/var abi_it = mem.split(u8, abi_text, ".")/;"	variable
abi_ver_text	$ZIGLIB/std/zig/CrossTarget.zig	/const abi_ver_text = abi_it.rest()/;"	constant
abort	$ZIGLIB/std/os.zig	/^pub fn abort() noreturn {$/;"	function
abort_entered	$ZIGLIB/std/os.zig	/var abort_entered: bool = false/;"	variable
abs2008	$ZIGLIB/std/target/mips.zig	/abs2008/;"	field
absCast	$ZIGLIB/std/math.zig	/^pub fn absCast(x: anytype) switch (@typeInfo(@TypeOf(x))) {$/;"	function
absInt	$ZIGLIB/std/math.zig	/^pub fn absInt(x: anytype) !@TypeOf(x) {$/;"	function
absMask	$ZIGLIB/std/math/ilogb.zig	/const absMask = signBit - 1/;"	constant
absResult	$ZIGLIB/compiler_rt/truncf.zig	/var absResult: dst_rep_t = undefined/;"	variable
abs_a	$ZIGLIB/compiler_rt/int.zig	/const abs_a = (a ^ (a >> 63)) -% (a >> 63)/;"	constant
abs_amt	$ZIGLIB/std/io/fixed_buffer_stream.zig	/const abs_amt = std.math.absCast(amt)/;"	constant
abs_amt_usize	$ZIGLIB/std/io/fixed_buffer_stream.zig	/const abs_amt_usize = std.math.cast(usize, abs_amt) orelse std.math.maxInt(usize)/;"	constant
abs_b	$ZIGLIB/compiler_rt/int.zig	/const abs_b = (b ^ (b >> 63)) -% (b >> 63)/;"	constant
abs_d	$ZIGLIB/compiler_rt/int.zig	/const abs_d = (d ^ (d >> 31)) -% (d >> 31)/;"	constant
abs_hop	$ZIGLIB/std/simd.zig	/const abs_hop = if (hop < 0) -hop else hop/;"	constant
abs_n	$ZIGLIB/compiler_rt/int.zig	/const abs_n = (n ^ (n >> 31)) -% (n >> 31)/;"	constant
abs_result	$ZIGLIB/compiler_rt/truncf.zig	/var abs_result: dst_rep_t = undefined/;"	variable
abs_shift_amt	$ZIGLIB/std/math.zig	/const abs_shift_amt = absCast(shift_amt)/;"	constant
abs_val	$ZIGLIB/compiler_rt/int_to_float.zig	/var abs_val = math.absCast(x)/;"	variable
abs_value	$ZIGLIB/std/fmt.zig	/const abs_value = math.absCast(int_value)/;"	constant
absolute_byte_index	$ZIGLIB/std/testing.zig	/var absolute_byte_index = (expected_iterator.index - chunk.len) + i/;"	variable
absolute_max_x	$ZIGLIB/std/os/uefi/protocols/absolute_pointer_protocol.zig	/absolute_max_x: u64/;"	field
absolute_max_y	$ZIGLIB/std/os/uefi/protocols/absolute_pointer_protocol.zig	/absolute_max_y: u64/;"	field
absolute_max_z	$ZIGLIB/std/os/uefi/protocols/absolute_pointer_protocol.zig	/absolute_max_z: u64/;"	field
absolute_min_x	$ZIGLIB/std/os/uefi/protocols/absolute_pointer_protocol.zig	/absolute_min_x: u64/;"	field
absolute_min_y	$ZIGLIB/std/os/uefi/protocols/absolute_pointer_protocol.zig	/absolute_min_y: u64/;"	field
absolute_min_z	$ZIGLIB/std/os/uefi/protocols/absolute_pointer_protocol.zig	/absolute_min_z: u64/;"	field
absorb	$ZIGLIB/std/crypto/isap.zig	/fn absorb(isap: *IsapA128A, m: []const u8) void {$/;"	function
abstract_origin	$ZIGLIB/std/dwarf/AT.zig	/^pub const abstract_origin = 0x31/;"	constant
absv	$ZIGLIB/compiler_rt/absv.zig	/^pub inline fn absv(comptime ST: type, a: ST) ST {$/;"	function
abuf	$ZIGLIB/std/net.zig	/var abuf: [2][512]u8 = undefined/;"	variable
acc_len	$ZIGLIB/std/base64.zig	/var acc_len: u4 = 0/;"	variable
accept	$ZIGLIB/std/os/windows.zig	/^pub fn accept(s: ws2_32.SOCKET, name: ?*ws2_32.sockaddr, namelen: ?*ws2_32.socklen_t) ws2_32.SOCKET {$/;"	function
accept4	$ZIGLIB/std/os/linux/x86.zig	/pub const accept4 = 18/;"	constant
accept_addr	$ZIGLIB/std/os/linux/io_uring.zig	/var accept_addr: os.sockaddr = undefined/;"	variable
accept_addr_len	$ZIGLIB/std/os/linux/io_uring.zig	/var accept_addr_len: os.socklen_t = @sizeOf(@TypeOf(accept_addr))/;"	variable
accept_any_port	$ZIGLIB/std/os/uefi/protocols/udp6_protocol.zig	/accept_any_port: bool/;"	field
accept_any_protocol	$ZIGLIB/std/os/uefi/protocols/ip6_protocol.zig	/accept_any_protocol: bool/;"	field
accept_icmp_errors	$ZIGLIB/std/os/uefi/protocols/ip6_protocol.zig	/accept_icmp_errors: bool/;"	field
accept_promiscuous	$ZIGLIB/std/os/uefi/protocols/udp6_protocol.zig	/accept_promiscuous: bool/;"	field
accept_result	$ZIGLIB/std/net.zig	/const accept_result = blk: {$/;"	constant
acceptable	$ZIGLIB/std/crypto/ecdsa.zig	/acceptable/;"	field
accepted	$ZIGLIB/std/http.zig	/accepted = 202/;"	field
accepted_addr	$ZIGLIB/std/net.zig	/var accepted_addr: Address = undefined/;"	variable
accepted_sock	$ZIGLIB/std/os.zig	/const accepted_sock = while (true) {$/;"	constant
access	$ZIGLIB/std/os/linux/syscalls.zig	/access = Linux + 33/;"	field
accessAbsolute	$ZIGLIB/std/fs.zig	/^pub fn accessAbsolute(absolute_path: []const u8, flags: File.OpenFlags) Dir.AccessError!void {$/;"	function
accessAbsoluteW	$ZIGLIB/std/fs.zig	/^pub fn accessAbsoluteW(absolute_path: [*:0]const 16, flags: File.OpenFlags) Dir.AccessError!void {$/;"	function
accessAbsoluteZ	$ZIGLIB/std/fs.zig	/^pub fn accessAbsoluteZ(absolute_path: [*:0]const u8, flags: File.OpenFlags) Dir.AccessError!void {$/;"	function
accessW	$ZIGLIB/std/os.zig	/^pub fn accessW(path: [*:0]const u16, mode: u32) windows.GetFileAttributesError!void {$/;"	function
accessZ	$ZIGLIB/std/os.zig	/^pub fn accessZ(path: [*:0]const u8, mode: u32) AccessError!void {$/;"	function
access_declaration	$ZIGLIB/std/dwarf/TAG.zig	/^pub const access_declaration = 0x23/;"	constant
access_denied	$ZIGLIB/std/crypto/tls.zig	/access_denied = 49/;"	field
access_mask	$ZIGLIB/std/os/windows.zig	/access_mask: ACCESS_MASK/;"	field
access_sub_paths	$ZIGLIB/std/fs.zig	/access_sub_paths: bool = true/;"	field
access_time	$ZIGLIB/std/fs/file.zig	/access_time: i128/;"	field
accessed	$ZIGLIB/std/fs/file.zig	/pub fn accessed(self: Self) i128 {$/;"	function
accessibility	$ZIGLIB/std/dwarf/AT.zig	/^pub const accessibility = 0x32/;"	constant
acct	$ZIGLIB/std/os/linux/syscalls.zig	/acct = Linux + 51/;"	field
accum	$ZIGLIB/std/compress/lzma2/decode.zig	/var accum = LzAccumBuffer.init(std.math.maxInt(usize))/;"	variable
accumulator	$ZIGLIB/std/rand.zig	/var accumulator: T = 0/;"	variable
accuracy	$ZIGLIB/std/os/uefi.zig	/accuracy: u32/;"	field
aclass	$ZIGLIB/std/target/arm.zig	/aclass/;"	field
acos	$ZIGLIB/std/math/complex/acos.zig	/^pub fn acos(z: anytype) Complex(@TypeOf(z.re)) {$/;"	function
acos32	$ZIGLIB/std/math/acos.zig	/^fn acos32(x: f32) f32 {$/;"	function
acos64	$ZIGLIB/std/math/acos.zig	/^fn acos64(x: f64) f64 {$/;"	function
acosh	$ZIGLIB/std/math/complex/acosh.zig	/^pub fn acosh(z: anytype) Complex(@TypeOf(z.re)) {$/;"	function
acosh32	$ZIGLIB/std/math/acosh.zig	/^fn acosh32(x: f32) f32 {$/;"	function
acosh64	$ZIGLIB/std/math/acosh.zig	/^fn acosh64(x: f64) f64 {$/;"	function
acpi_10_table_guid	$ZIGLIB/std/os/uefi/tables/configuration_table.zig	/pub const acpi_10_table_guid align(8) = Guid{$/;"	constant
acpi_20_table_guid	$ZIGLIB/std/os/uefi/tables/configuration_table.zig	/pub const acpi_20_table_guid align(8) = Guid{$/;"	constant
acquire	$ZIGLIB/std/event/locked.zig	/pub fn acquire(self: *Self) callconv(.Async) HeldLock {$/;"	function
acquireRead	$ZIGLIB/std/event/rwlocked.zig	/pub fn acquireRead(self: *Self) callconv(.Async) HeldReadLock {$/;"	function
acquireWrite	$ZIGLIB/std/event/rwlocked.zig	/pub fn acquireWrite(self: *Self) callconv(.Async) HeldWriteLock {$/;"	function
acquire_release	$ZIGLIB/std/target/arm.zig	/acquire_release/;"	field
actions	$ZIGLIB/std/os/posix_spawn.zig	/var actions: system.posix_spawn_file_actions_t = undefined/;"	variable
activate	$ZIGLIB/std/Progress.zig	/pub fn activate(self: *Node) void {$/;"	function
active	$ZIGLIB/std/meta/trailer_flags.zig	/const active = (self.bits & (1 << i)) != 0/;"	constant
activeTag	$ZIGLIB/std/meta.zig	/^pub fn activeTag(u: anytype) Tag(@TypeOf(u)) {$/;"	function
active_buttons	$ZIGLIB/std/os/uefi/protocols/absolute_pointer_protocol.zig	/active_buttons: AbsolutePointerStateActiveButtons/;"	field
actual	$ZIGLIB/std/testing.zig	/actual: []const u8/;"	field
actualTag	$ZIGLIB/std/testing.zig	/const actualTag = @as(Tag, actual)/;"	constant
actual_amt	$ZIGLIB/std/crypto/tls.zig	/const actual_amt = try stream.readAtLeast(dest, request_amt)/;"	constant
actual_bytes	$ZIGLIB/std/crypto/blake3.zig	/var actual_bytes: [expected_hex.len \/ 2]u8 = undefined/;"	variable
actual_decl	$ZIGLIB/std/meta.zig	/const actual_decl = actual_decls[i]/;"	constant
actual_decls	$ZIGLIB/std/meta.zig	/const actual_decls = @typeInfo(actual).Enum.decls/;"	constant
actual_field	$ZIGLIB/std/meta.zig	/const actual_field = actual_fields[i]/;"	constant
actual_fields	$ZIGLIB/std/meta.zig	/const actual_fields = @typeInfo(actual).Enum.fields/;"	constant
actual_fmt	$ZIGLIB/std/fmt.zig	/const actual_fmt = comptime if (std.mem.eql(u8, fmt, ANY))$/;"	constant
actual_len	$ZIGLIB/std/heap/WasmAllocator.zig	/const actual_len = @max(len +| @sizeOf(usize), alignment)/;"	constant
actual_min_size	$ZIGLIB/std/heap/arena_allocator.zig	/const actual_min_size = minimum_size + (@sizeOf(BufNode) + 16)/;"	constant
actual_mode	$ZIGLIB/std/fs.zig	/const actual_mode = options.override_mode orelse src_stat.mode/;"	constant
actual_read_len	$ZIGLIB/std/crypto/tls/Client.zig	/const actual_read_len = try stream.readv(ask_iovecs)/;"	constant
actual_size	$ZIGLIB/std/debug.zig	/const actual_size = if (enabled) size else 0/;"	constant
actual_truncated	$ZIGLIB/std/testing.zig	/const actual_truncated = window_start + actual_window.len < actual.len/;"	constant
actual_value_sentinel	$ZIGLIB/std/testing.zig	/const actual_value_sentinel = blk: {$/;"	constant
actual_window	$ZIGLIB/std/testing.zig	/const actual_window = actual[window_start..@min(actual.len, window_start + max_window_size)]/;"	constant
addAddr	$ZIGLIB/std/debug.zig	/pub fn addAddr(t: *@This(), addr: usize, note: []const u8) void {$/;"	function
addAnonymousModule	$ZIGLIB/std/Build/CompileStep.zig	/^pub fn addAnonymousModule(cs: *CompileStep, name: []const u8, options: std.Build.CreateModuleOptions) void {$/;"	function
addArg	$ZIGLIB/std/Build/RunStep.zig	/^pub fn addArg(self: *RunStep, arg: []const u8) void {$/;"	function
addArgs	$ZIGLIB/std/Build/RunStep.zig	/^pub fn addArgs(self: *RunStep, args: []const []const u8) void {$/;"	function
addArtifactArg	$ZIGLIB/std/Build/RunStep.zig	/^pub fn addArtifactArg(self: *RunStep, artifact: *CompileStep) void {$/;"	function
addAssembly	$ZIGLIB/std/Build.zig	/^pub fn addAssembly(b: *Build, options: AssemblyOptions) *CompileStep {$/;"	function
addAssemblyFile	$ZIGLIB/std/Build/CompileStep.zig	/^pub fn addAssemblyFile(self: *CompileStep, path: []const u8) void {$/;"	function
addAssemblyFileSource	$ZIGLIB/std/Build/CompileStep.zig	/^pub fn addAssemblyFileSource(self: *CompileStep, source: FileSource) void {$/;"	function
addAssertSafe	$ZIGLIB/std/enums.zig	/pub fn addAssertSafe(self: *Self, key: E, c: CountSize) void {$/;"	function
addByte	$ZIGLIB/std/crypto/xoodoo.zig	/pub fn addByte(self: *State, byte: u8, offset: usize) void {$/;"	function
addBytes	$ZIGLIB/std/crypto/xoodoo.zig	/pub fn addBytes(self: *State, bytes: []const u8) void {$/;"	function
addCSourceFile	$ZIGLIB/std/Build/CompileStep.zig	/^pub fn addCSourceFile(self: *CompileStep, file: []const u8, flags: []const []const u8) void {$/;"	function
addCSourceFileSource	$ZIGLIB/std/Build/CompileStep.zig	/^pub fn addCSourceFileSource(self: *CompileStep, source: CSourceFile) void {$/;"	function
addCSourceFiles	$ZIGLIB/std/Build/CompileStep.zig	/^pub fn addCSourceFiles(self: *CompileStep, files: []const []const u8, flags: []const []const u8) void {$/;"	function
addCarry	$ZIGLIB/std/math/big/int.zig	/fn addCarry(r: *Mutable, a: Const, b: Const) bool {$/;"	function
addCertsFromDir	$ZIGLIB/std/crypto/Certificate/Bundle.zig	/^pub fn addCertsFromDir(cb: *Bundle, gpa: Allocator, iterable_dir: fs.IterableDir) !void {$/;"	function
addCertsFromDirPath	$ZIGLIB/std/crypto/Certificate/Bundle.zig	/^pub fn addCertsFromDirPath($/;"	function
addCertsFromDirPathAbsolute	$ZIGLIB/std/crypto/Certificate/Bundle.zig	/^pub fn addCertsFromDirPathAbsolute($/;"	function
addCertsFromFile	$ZIGLIB/std/crypto/Certificate/Bundle.zig	/^pub fn addCertsFromFile(cb: *Bundle, gpa: Allocator, file: fs.File) !void {$/;"	function
addCertsFromFilePath	$ZIGLIB/std/crypto/Certificate/Bundle.zig	/^pub fn addCertsFromFilePath($/;"	function
addCertsFromFilePathAbsolute	$ZIGLIB/std/crypto/Certificate/Bundle.zig	/^pub fn addCertsFromFilePathAbsolute($/;"	function
addCheckFile	$ZIGLIB/std/Build/TranslateCStep.zig	/^pub fn addCheckFile(self: *TranslateCStep, expected_matches: []const []const u8) *CheckFileStep {$/;"	function
addChunkChainingValue	$ZIGLIB/std/crypto/blake3.zig	/fn addChunkChainingValue(self: *Blake3, first_cv: [8]u32, total_chunks: u64) void {$/;"	function
addConfigHeader	$ZIGLIB/std/Build/CompileStep.zig	/^pub fn addConfigHeader(self: *CompileStep, config_header: *ConfigHeaderStep) void {$/;"	function
addErrRetTraceAddr	$ZIGLIB/std/builtin.zig	/^pub inline fn addErrRetTraceAddr(st: *StackTrace, addr: usize) void {$/;"	function
addExecutable	$ZIGLIB/std/Build/TranslateCStep.zig	/^pub fn addExecutable(self: *TranslateCStep, options: AddExecutableOptions) *CompileStep {$/;"	function
addExtra	$ZIGLIB/std/zig/Parse.zig	/^fn addExtra(p: *Parse, extra: anytype) Allocator.Error!Node.Index {$/;"	function
addFeature	$ZIGLIB/std/target.zig	/pub fn addFeature(set: *Set, arch_feature_index: Index) void {$/;"	function
addFeatureSet	$ZIGLIB/std/target.zig	/pub fn addFeatureSet(set: *Set, other_set: Set) void {$/;"	function
addFile	$ZIGLIB/std/fs/watch.zig	/pub fn addFile(self: *Self, file_path: []const u8, value: V) !?V {$/;"	function
addFileKEvent	$ZIGLIB/std/fs/watch.zig	/fn addFileKEvent(self: *Self, file_path: []const u8, value: V) !?V {$/;"	function
addFileLinux	$ZIGLIB/std/fs/watch.zig	/fn addFileLinux(self: *Self, file_path: []const u8, value: V) !?V {$/;"	function
addFileSourceArg	$ZIGLIB/std/Build/RunStep.zig	/^pub fn addFileSourceArg(self: *RunStep, file_source: std.Build.FileSource) void {$/;"	function
addFileWindows	$ZIGLIB/std/fs/watch.zig	/fn addFileWindows(self: *Self, file_path: []const u8, value: V) !?V {$/;"	function
addFlag	$ZIGLIB/std/Build/CompileStep.zig	/^fn addFlag(args: *ArrayList([]const u8), comptime name: []const u8, opt: ?bool) !void {$/;"	function
addFmt	$ZIGLIB/std/Build.zig	/^pub fn addFmt(self: *Build, paths: []const []const u8) *FmtStep {$/;"	function
addFrameworkDir	$ZIGLIB/std/zig/system/NativePaths.zig	/^pub fn addFrameworkDir(self: *NativePaths, s: []const u8) !void {$/;"	function
addFrameworkDirFmt	$ZIGLIB/std/zig/system/NativePaths.zig	/^pub fn addFrameworkDirFmt(self: *NativePaths, comptime fmt: []const u8, args: anytype) !void {$/;"	function
addFrameworkPath	$ZIGLIB/std/Build/CompileStep.zig	/^pub fn addFrameworkPath(self: *CompileStep, dir_path: []const u8) void {$/;"	function
addIncludeDir	$ZIGLIB/std/zig/system/NativePaths.zig	/^pub fn addIncludeDir(self: *NativePaths, s: []const u8) !void {$/;"	function
addIncludeDirFmt	$ZIGLIB/std/zig/system/NativePaths.zig	/^pub fn addIncludeDirFmt(self: *NativePaths, comptime fmt: []const u8, args: anytype) !void {$/;"	function
addIncludePath	$ZIGLIB/std/Build/CompileStep.zig	/^pub fn addIncludePath(self: *CompileStep, path: []const u8) void {$/;"	function
addInner	$ZIGLIB/std/Build/CompileStep.zig	/fn addInner(td: *TransitiveDeps, other: *CompileStep, dyn: bool) !void {$/;"	function
addInstallArtifact	$ZIGLIB/std/Build.zig	/^pub fn addInstallArtifact(self: *Build, artifact: *CompileStep) *InstallArtifactStep {$/;"	function
addInstallBinFile	$ZIGLIB/std/Build.zig	/^pub fn addInstallBinFile(self: *Build, source: FileSource, dest_rel_path: []const u8) *InstallFileStep {$/;"	function
addInstallDirectory	$ZIGLIB/std/Build.zig	/^pub fn addInstallDirectory(self: *Build, options: InstallDirectoryOptions) *InstallDirStep {$/;"	function
addInstallFile	$ZIGLIB/std/Build.zig	/^pub fn addInstallFile(self: *Build, source: FileSource, dest_rel_path: []const u8) *InstallFileStep {$/;"	function
addInstallFileWithDir	$ZIGLIB/std/Build.zig	/^pub fn addInstallFileWithDir($/;"	function
addInstallHeaderFile	$ZIGLIB/std/Build.zig	/^pub fn addInstallHeaderFile(b: *Build, src_path: []const u8, dest_rel_path: []const u8) *InstallFileStep {$/;"	function
addInstallLibFile	$ZIGLIB/std/Build.zig	/^pub fn addInstallLibFile(self: *Build, source: FileSource, dest_rel_path: []const u8) *InstallFileStep {$/;"	function
addInstallRaw	$ZIGLIB/std/Build.zig	/^pub fn addInstallRaw(self: *Build, artifact: *CompileStep, dest_filename: []const u8, options: InstallRawStep.CreateOptions) *InstallRawStep {$/;"	function
addInstructionFusions	$ZIGLIB/std/zig/system/arm.zig	/fn addInstructionFusions(cpu: *Target.Cpu, info: CoreInfo) void {$/;"	function
addLibDir	$ZIGLIB/std/zig/system/NativePaths.zig	/^pub fn addLibDir(self: *NativePaths, s: []const u8) !void {$/;"	function
addLibDirFmt	$ZIGLIB/std/zig/system/NativePaths.zig	/^pub fn addLibDirFmt(self: *NativePaths, comptime fmt: []const u8, args: anytype) !void {$/;"	function
addLibPath	$ZIGLIB/std/Build/CompileStep.zig	/^pub const addLibPath = @compileError("deprecated, use addLibraryPath")/;"	constant
addLibraryPath	$ZIGLIB/std/Build/CompileStep.zig	/^pub fn addLibraryPath(self: *CompileStep, path: []const u8) void {$/;"	function
addLog	$ZIGLIB/std/Build.zig	/^pub fn addLog(self: *Build, comptime format: []const u8, args: anytype) *LogStep {$/;"	function
addManyAsArray	$ZIGLIB/std/bounded_array.zig	/pub fn addManyAsArray(self: *Self, comptime n: usize) error{Overflow}!*[n]T {$/;"	function
addManyAsArrayAssumeCapacity	$ZIGLIB/std/array_list.zig	/pub fn addManyAsArrayAssumeCapacity(self: *Self, comptime n: usize) *[n]T {$/;"	function
addMixed	$ZIGLIB/std/crypto/pcurves/secp256k1.zig	/pub fn addMixed(p: Secp256k1, q: AffineCoordinates) Secp256k1 {$/;"	function
addModule	$ZIGLIB/std/Build/CompileStep.zig	/^pub fn addModule(cs: *CompileStep, name: []const u8, module: *Module) void {$/;"	function
addMulLimbWithCarry	$ZIGLIB/std/math/big/int.zig	/^pub fn addMulLimbWithCarry(a: Limb, b: Limb, c: Limb, carry: *Limb) Limb {$/;"	function
addNoInline	$ZIGLIB/std/debug.zig	/pub noinline fn addNoInline(t: *@This(), note: []const u8) void {$/;"	function
addNoOp	$ZIGLIB/std/debug.zig	/pub inline fn addNoOp(t: *@This(), note: []const u8) void {$/;"	function
addNode	$ZIGLIB/std/zig/Parse.zig	/^fn addNode(p: *Parse, elem: Ast.NodeList.Elem) Allocator.Error!Node.Index {$/;"	function
addNullByte	$ZIGLIB/std/cstr.zig	/^pub fn addNullByte(allocator: mem.Allocator, slice: []const u8) ![:0]u8 {$/;"	function
addObject	$ZIGLIB/std/Build/CompileStep.zig	/^pub fn addObject(self: *CompileStep, obj: *CompileStep) void {$/;"	function
addObjectFile	$ZIGLIB/std/Build/CompileStep.zig	/^pub fn addObjectFile(self: *CompileStep, source_file: []const u8) void {$/;"	function
addObjectFileSource	$ZIGLIB/std/Build/CompileStep.zig	/^pub fn addObjectFileSource(self: *CompileStep, source: FileSource) void {$/;"	function
addOne	$ZIGLIB/std/zig/system/linux.zig	/fn addOne(self: *ArmCpuinfoImpl) void {$/;"	function
addOneAssumeCapacity	$ZIGLIB/std/multi_array_list.zig	/pub fn addOneAssumeCapacity(self: *Self) usize {$/;"	function
addOption	$ZIGLIB/std/Build/OptionsStep.zig	/^pub fn addOption(self: *OptionsStep, comptime T: type, name: []const u8, value: T) void {$/;"	function
addOptionArtifact	$ZIGLIB/std/Build/OptionsStep.zig	/^pub fn addOptionArtifact(self: *OptionsStep, name: []const u8, artifact: *CompileStep) void {$/;"	function
addOptionFallible	$ZIGLIB/std/Build/OptionsStep.zig	/^fn addOptionFallible(self: *OptionsStep, comptime T: type, name: []const u8, value: T) !void {$/;"	function
addOptionFileSource	$ZIGLIB/std/Build/OptionsStep.zig	/^pub fn addOptionFileSource($/;"	function
addOptions	$ZIGLIB/std/Build/CompileStep.zig	/^pub fn addOptions(cs: *CompileStep, module_name: []const u8, options: *OptionsStep) void {$/;"	function
addPathDir	$ZIGLIB/std/Build/RunStep.zig	/^pub fn addPathDir(self: *RunStep, search_path: []const u8) void {$/;"	function
addPathDirInternal	$ZIGLIB/std/Build/RunStep.zig	/^pub fn addPathDirInternal(step: *Step, builder: *std.Build, search_path: []const u8) void {$/;"	function
addPathForDynLibs	$ZIGLIB/std/Build/RunStep.zig	/^fn addPathForDynLibs(self: *RunStep, artifact: *CompileStep) void {$/;"	function
addPathForDynLibsInternal	$ZIGLIB/std/Build/RunStep.zig	/^pub fn addPathForDynLibsInternal(step: *Step, builder: *std.Build, artifact: *CompileStep) void {$/;"	function
addRPath	$ZIGLIB/std/zig/system/NativePaths.zig	/^pub fn addRPath(self: *NativePaths, s: []const u8) !void {$/;"	function
addRecursiveBuildDeps	$ZIGLIB/std/Build/CompileStep.zig	/^fn addRecursiveBuildDeps(cs: *CompileStep, module: *Module) void {$/;"	function
addRemoveDirTree	$ZIGLIB/std/Build.zig	/^pub fn addRemoveDirTree(self: *Build, dir_path: []const u8) *RemoveDirStep {$/;"	function
addSat	$ZIGLIB/std/math/big/int.zig	/pub fn addSat(r: *Mutable, a: Const, b: Const, signedness: Signedness, bit_count: usize) void {$/;"	function
addScalar	$ZIGLIB/std/math/big/int.zig	/pub fn addScalar(r: *Mutable, a: Const, scalar: anytype) void {$/;"	function
addSearchPrefix	$ZIGLIB/std/Build.zig	/^pub fn addSearchPrefix(self: *Build, search_prefix: []const u8) void {$/;"	function
addSet	$ZIGLIB/std/enums.zig	/pub fn addSet(self: *Self, other: Self) error{Overflow}!void {$/;"	function
addSetAssertSafe	$ZIGLIB/std/enums.zig	/pub fn addSetAssertSafe(self: *Self, other: Self) void {$/;"	function
addSharedLibrary	$ZIGLIB/std/Build.zig	/^pub fn addSharedLibrary(b: *Build, options: SharedLibraryOptions) *CompileStep {$/;"	function
addSlice	$ZIGLIB/std/priority_queue.zig	/pub fn addSlice(self: *Self, items: []const T) !void {$/;"	function
addStaticLibrary	$ZIGLIB/std/Build.zig	/^pub fn addStaticLibrary(b: *Build, options: StaticLibraryOptions) *CompileStep {$/;"	function
addStepDependencies	$ZIGLIB/std/Build.zig	/pub fn addStepDependencies(self: FileSource, other_step: *Step) void {$/;"	function
addSystemCommand	$ZIGLIB/std/Build.zig	/^pub fn addSystemCommand(self: *Build, argv: []const []const u8) *RunStep {$/;"	function
addSystemIncludeDir	$ZIGLIB/std/Build/CompileStep.zig	/^pub const addSystemIncludeDir = @compileError("deprecated; use addSystemIncludePath")/;"	constant
addSystemIncludePath	$ZIGLIB/std/Build/CompileStep.zig	/^pub fn addSystemIncludePath(self: *CompileStep, path: []const u8) void {$/;"	function
addTest	$ZIGLIB/std/Build.zig	/^pub fn addTest(b: *Build, options: TestOptions) *CompileStep {$/;"	function
addTranslateC	$ZIGLIB/std/Build.zig	/^pub fn addTranslateC(self: *Build, options: TranslateCStep.Options) *TranslateCStep {$/;"	function
addUnchecked	$ZIGLIB/std/priority_queue.zig	/fn addUnchecked(self: *Self, elem: T) void {$/;"	function
addUserInputFlag	$ZIGLIB/std/Build.zig	/^pub fn addUserInputFlag(self: *Build, name_raw: []const u8) !bool {$/;"	function
addUserInputOption	$ZIGLIB/std/Build.zig	/^pub fn addUserInputOption(self: *Build, name_raw: []const u8, value_raw: []const u8) !bool {$/;"	function
addValues	$ZIGLIB/std/Build/ConfigHeaderStep.zig	/^pub fn addValues(self: *ConfigHeaderStep, values: anytype) void {$/;"	function
addValuesInner	$ZIGLIB/std/Build/ConfigHeaderStep.zig	/^fn addValuesInner(self: *ConfigHeaderStep, values: anytype) !void {$/;"	function
addVcpkgPaths	$ZIGLIB/std/Build/CompileStep.zig	/^pub fn addVcpkgPaths(self: *CompileStep, linkage: CompileStep.Linkage) !void {$/;"	function
addWarning	$ZIGLIB/std/zig/system/NativePaths.zig	/^pub fn addWarning(self: *NativePaths, s: []const u8) !void {$/;"	function
addWarningFmt	$ZIGLIB/std/zig/system/NativePaths.zig	/^pub fn addWarningFmt(self: *NativePaths, comptime fmt: []const u8, args: anytype) !void {$/;"	function
addWrap	$ZIGLIB/std/math/big/int.zig	/pub fn addWrap(r: *Mutable, a: Const, b: Const, signedness: Signedness, bit_count: usize) bool {$/;"	function
addWriteFile	$ZIGLIB/std/Build.zig	/^pub fn addWriteFile(self: *Build, file_path: []const u8, data: []const u8) *WriteFileStep {$/;"	function
addWriteFiles	$ZIGLIB/std/Build.zig	/^pub fn addWriteFiles(self: *Build) *WriteFileStep {$/;"	function
add_adjusted	$ZIGLIB/compiler_rt/fma.zig	/^fn add_adjusted(a: f64, b: f64) f64 {$/;"	function
add_adjusted128	$ZIGLIB/compiler_rt/fma.zig	/^fn add_adjusted128(a: f128, b: f128) f128 {$/;"	function
add_and_denorm	$ZIGLIB/compiler_rt/fma.zig	/^fn add_and_denorm(a: f64, b: f64, scale: i32) f64 {$/;"	function
add_and_denorm128	$ZIGLIB/compiler_rt/fma.zig	/^fn add_and_denorm128(a: f128, b: f128, scale: i32) f128 {$/;"	function
add_key	$ZIGLIB/std/os/linux/syscalls.zig	/add_key = Linux + 280/;"	field
add_no_carry_insts	$ZIGLIB/std/target/amdgpu.zig	/add_no_carry_insts/;"	field
add_res	$ZIGLIB/std/math/big/int.zig	/var add_res: Limb = undefined/;"	variable
add_sat	$ZIGLIB/std/zig/Ast.zig	/add_sat/;"	field
add_set	$ZIGLIB/std/zig/CrossTarget.zig	/const add_set = &result.cpu_features_add/;"	constant
add_wrap	$ZIGLIB/std/zig/Ast.zig	/add_wrap/;"	field
addcarryxU64	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/^inline fn addcarryxU64(out1: *u64, out2: *u1, arg1: u1, arg2: u64, arg3: u64) void {$/;"	function
addf3	$ZIGLIB/compiler_rt/addf3.zig	/^pub inline fn addf3(comptime T: type, a: T, b: T) T {$/;"	function
addl_rand_lz	$ZIGLIB/std/rand.zig	/const addl_rand_lz = @clz(r.int(u64))/;"	constant
addoXi4_generic	$ZIGLIB/compiler_rt/addo.zig	/^inline fn addoXi4_generic(comptime ST: type, a: ST, b: ST, overflow: *c_int) ST {$/;"	function
addr	$ZIGLIB/std/os/windows/ws2_32.zig	/addr: u32/;"	field
addrCmpLessThan	$ZIGLIB/std/net.zig	/^fn addrCmpLessThan(context: void, b: LookupAddr, a: LookupAddr) bool {$/;"	function
addr_base	$ZIGLIB/std/dwarf/AT.zig	/^pub const addr_base = 0x73/;"	constant
addr_bnd	$ZIGLIB/std/os/linux.zig	/addr_bnd: extern struct {$/;"	field
addr_buf	$ZIGLIB/std/debug.zig	/var addr_buf: [1024]usize = undefined/;"	variable
addr_buf_stack	$ZIGLIB/std/debug.zig	/var addr_buf_stack: [32]usize = undefined/;"	variable
addr_count	$ZIGLIB/std/net.zig	/const addr_count = blk: {$/;"	constant
addr_lsb	$ZIGLIB/std/os/linux.zig	/addr_lsb: u16/;"	field
addr_off	$ZIGLIB/std/debug.zig	/const addr_off = relocated_address - symbol.addr/;"	constant
addr_size	$ZIGLIB/std/dwarf.zig	/var addr_size: u8 = if (is_64) 8 else 4/;"	variable
addr_table	$ZIGLIB/std/debug.zig	/var addr_table = std.StringHashMap(u64).init(allocator)/;"	variable
addr_usize	$ZIGLIB/std/os/linux.zig	/const addr_usize = @ptrToInt(addr)/;"	constant
address	$ZIGLIB/std/os/uefi/tables/runtime_services.zig	/address: extern union {$/;"	field
addressLessThan	$ZIGLIB/std/debug.zig	/fn addressLessThan(context: void, lhs: MachoSymbol, rhs: MachoSymbol) bool {$/;"	function
address_class	$ZIGLIB/std/dwarf/AT.zig	/^pub const address_class = 0x33/;"	constant
address_count	$ZIGLIB/std/os/uefi/protocols/ip6_protocol.zig	/address_count: u32/;"	field
address_length	$ZIGLIB/std/os/uefi/protocols/managed_network_protocol.zig	/address_length: u32/;"	field
address_list	$ZIGLIB/std/os/uefi/protocols/ip6_protocol.zig	/address_list: [*]Ip6AddressInfo/;"	field
address_map	$ZIGLIB/std/debug.zig	/address_map: std.AutoHashMap(usize, *ModuleDebugInfo)/;"	field
address_of	$ZIGLIB/std/zig/Ast.zig	/address_of/;"	field
address_of_entry_point	$ZIGLIB/std/coff.zig	/address_of_entry_point: u32/;"	field
address_of_raw_data	$ZIGLIB/std/coff.zig	/address_of_raw_data: u32/;"	field
address_recv	$ZIGLIB/std/os/linux/io_uring.zig	/var address_recv = net.Address.initIp4(addr, 0)/;"	variable
address_server	$ZIGLIB/std/os/linux/io_uring.zig	/const address_server = try net.Address.parseIp4("127.0.0.1", 3131)/;"	constant
address_size	$ZIGLIB/std/dwarf.zig	/var address_size: u8 = undefined/;"	variable
address_space	$ZIGLIB/std/builtin.zig	/address_space: AddressSpace/;"	field
addresses	$ZIGLIB/std/heap/general_purpose_allocator.zig	/var addresses: [stack_n]usize = [1]usize{0} ** stack_n/;"	variable
addrinfo	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const addrinfo = addrinfoa/;"	constant
addrinfoa	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const addrinfoa = extern struct {$/;"	struct
addrinfoexA	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const addrinfoexA = extern struct {$/;"	struct
addrlen	$ZIGLIB/std/os/windows/ws2_32.zig	/addrlen: usize/;"	field
addrs	$ZIGLIB/std/net.zig	/addrs: []Address/;"	field
addrspace_expr	$ZIGLIB/std/zig/Parse.zig	/const addrspace_expr = try p.parseAddrSpace()/;"	constant
addrspace_first	$ZIGLIB/std/zig/render.zig	/const addrspace_first = tree.firstToken(ptr_type.ast.addrspace_node)/;"	constant
addrspace_kw	$ZIGLIB/std/zig/render.zig	/const addrspace_kw = lparen - 1/;"	constant
addrspace_node	$ZIGLIB/std/zig/Parse.zig	/const addrspace_node = try p.parseAddrSpace()/;"	constant
addrx	$ZIGLIB/std/dwarf/OP.zig	/^pub const addrx = 0xa1/;"	constant
addrx1	$ZIGLIB/std/dwarf/FORM.zig	/^pub const addrx1 = 0x29/;"	constant
addrx2	$ZIGLIB/std/dwarf/FORM.zig	/^pub const addrx2 = 0x2a/;"	constant
addrx3	$ZIGLIB/std/dwarf/FORM.zig	/^pub const addrx3 = 0x2b/;"	constant
addrx4	$ZIGLIB/std/dwarf/FORM.zig	/^pub const addrx4 = 0x2c/;"	constant
addsubiw	$ZIGLIB/std/target/avr.zig	/addsubiw/;"	field
adjacent	$ZIGLIB/std/treap.zig	/const adjacent = target.children[@boolToInt(right)]/;"	constant
adjtimex	$ZIGLIB/std/os/linux/syscalls.zig	/adjtimex = Linux + 154/;"	field
adjustWindowRectEx	$ZIGLIB/std/os/windows/user32.zig	/^pub fn adjustWindowRectEx(lpRect: *RECT, dwStyle: u32, bMenu: bool, dwExStyle: u32) !void {$/;"	function
adjust_daylight	$ZIGLIB/std/os/uefi.zig	/adjust_daylight: bool/;"	field
adjust_off	$ZIGLIB/std/mem.zig	/const adjust_off = alignPointerOffset(ptr, align_to) orelse return null/;"	constant
adjusted	$ZIGLIB/std/os/windows.zig	/const adjusted = @bitCast(u64, toSysTime(ns))/;"	constant
adjusted_addr	$ZIGLIB/std/heap/arena_allocator.zig	/const adjusted_addr = mem.alignForward(addr, ptr_align)/;"	constant
adjusted_baseline	$ZIGLIB/std/zig/CrossTarget.zig	/var adjusted_baseline = Target.Cpu.baseline(self.getCpuArch())/;"	variable
adjusted_count	$ZIGLIB/std/os.zig	/const adjusted_count = @min(in_len, max_count)/;"	constant
adjusted_count_temporary	$ZIGLIB/std/os.zig	/const adjusted_count_temporary = @min(in_len, @as(u63, max_count))/;"	constant
adjusted_count_tmp	$ZIGLIB/std/os.zig	/const adjusted_count_tmp = if (in_len == 0) max_count else @min(in_len, @as(size_t, max_count))/;"	constant
adjusted_epoch	$ZIGLIB/std/os/windows.zig	/const adjusted_epoch: i128 = hns + std.time.epoch.windows * (std.time.ns_per_s \/ 100)/;"	constant
adjusted_index	$ZIGLIB/std/heap/arena_allocator.zig	/const adjusted_index = self.state.end_index + (adjusted_addr - addr)/;"	constant
adjusted_len	$ZIGLIB/std/os/windows.zig	/const adjusted_len = math.cast(u32, bytes.len) orelse maxInt(u32)/;"	constant
adjusted_model	$ZIGLIB/std/zig/CrossTarget.zig	/var adjusted_model = model.toCpu(self.getCpuArch())/;"	variable
adjusted_opcode	$ZIGLIB/std/dwarf.zig	/const adjusted_opcode = opcode - opcode_base/;"	constant
adjusted_os	$ZIGLIB/std/zig/CrossTarget.zig	/var adjusted_os = if (self.os_tag) |os_tag| os_tag.defaultVersionRange(self.getCpuArch()) else builtin.os/;"	variable
adjusted_path	$ZIGLIB/std/fs/path.zig	/const adjusted_path = if (prev_sep and this_sep) this_path[1..] else this_path/;"	constant
adler	$ZIGLIB/std/hash/adler.zig	/adler: u32/;"	field
adr_len	$ZIGLIB/std/net.zig	/var adr_len: os.socklen_t = @sizeOf(Address)/;"	variable
adrs	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/pub fn adrs(self: *const AdrDevicePath) []align(1) const u32 {$/;"	function
advance	$ZIGLIB/std/mem.zig	/advance: usize/;"	field
advance_line	$ZIGLIB/std/dwarf.zig	/pub const advance_line = 0x03/;"	constant
advance_loc	$ZIGLIB/std/dwarf.zig	/pub const advance_loc = 0x40/;"	constant
advance_loc1	$ZIGLIB/std/dwarf.zig	/pub const advance_loc1 = 0x02/;"	constant
advance_loc2	$ZIGLIB/std/dwarf.zig	/pub const advance_loc2 = 0x03/;"	constant
advance_loc4	$ZIGLIB/std/dwarf.zig	/pub const advance_loc4 = 0x04/;"	constant
advance_pc	$ZIGLIB/std/dwarf.zig	/pub const advance_pc = 0x02/;"	constant
advancedAlloc	$ZIGLIB/compiler_rt/emutls.zig	/pub fn advancedAlloc(alignment: u29, size: usize) [*]u8 {$/;"	function
advice_t	$ZIGLIB/std/os/wasi.zig	/^pub const advice_t = u8/;"	constant
aead	$ZIGLIB/std/crypto.zig	/^pub const aead = struct {$/;"	struct
aeads	$ZIGLIB/std/crypto/chacha20.zig	/const aeads = [_]type{ ChaCha20Poly1305, XChaCha20Poly1305 }/;"	constant
aegis	$ZIGLIB/std/crypto.zig	/pub const aegis = struct {$/;"	struct
aes_dec_ctx	$ZIGLIB/std/crypto/aes_ocb.zig	/const aes_dec_ctx = DecryptCtx.initFromEnc(aes_enc_ctx)/;"	constant
aes_enc_ctx	$ZIGLIB/std/crypto/aes_ocb.zig	/const aes_enc_ctx = Aes.initEnc(key)/;"	constant
aes_gcm	$ZIGLIB/std/crypto.zig	/pub const aes_gcm = struct {$/;"	struct
aes_ocb	$ZIGLIB/std/crypto.zig	/pub const aes_ocb = struct {$/;"	struct
affineCoordinates	$ZIGLIB/std/crypto/pcurves/secp256k1.zig	/pub fn affineCoordinates(p: Secp256k1) AffineCoordinates {$/;"	function
afrrs	$ZIGLIB/std/net.zig	/const afrrs = [_]AfRr{$/;"	constant
afs_syscall	$ZIGLIB/std/os/linux/syscalls.zig	/afs_syscall = Linux + 176/;"	field
after_arrow_space	$ZIGLIB/std/zig/render.zig	/const after_arrow_space: Space = if (switch_case.payload_token == null) pre_target_space else .space/;"	constant
after_colon	$ZIGLIB/std/zig/Parse.zig	/const after_colon = p.tok_i/;"	constant
after_die_offset	$ZIGLIB/std/dwarf.zig	/const after_die_offset = try seekable.getPos()/;"	constant
after_dot	$ZIGLIB/std/os/windows.zig	/const after_dot = path[read_idx + 1]/;"	constant
after_dots_space	$ZIGLIB/std/zig/render.zig	/const after_dots_space = if (slice.ast.end != 0)$/;"	constant
after_end_space	$ZIGLIB/std/zig/render.zig	/const after_end_space = if (slice.ast.sentinel != 0) Space.space else Space.none/;"	constant
after_fn_token	$ZIGLIB/std/zig/render.zig	/const after_fn_token = fn_proto.ast.fn_token + 1/;"	constant
after_last_param_tok	$ZIGLIB/std/zig/render.zig	/const after_last_param_tok = tree.lastToken(last_param) + 1/;"	constant
after_last_param_token	$ZIGLIB/std/zig/render.zig	/const after_last_param_token = tree.lastToken(last_param) + 1/;"	constant
after_op_space	$ZIGLIB/std/zig/render.zig	/const after_op_space = if (same_line) Space.space else Space.newline/;"	constant
after_range	$ZIGLIB/std/bounded_array.zig	/const after_range = start + len/;"	constant
after_start_space	$ZIGLIB/std/zig/render.zig	/const after_start_space = if (after_start_space_bool) Space.space else Space.none/;"	constant
after_start_space_bool	$ZIGLIB/std/zig/render.zig	/const after_start_space_bool = nodeCausesSliceOpSpace(node_tags[slice.ast.start]) or$/;"	constant
after_string_state	$ZIGLIB/std/json.zig	/after_string_state: State/;"	field
after_subrange	$ZIGLIB/std/bounded_array.zig	/const after_subrange = start + new_items.len/;"	constant
after_value_state	$ZIGLIB/std/json.zig	/after_value_state: State/;"	field
agent_handle	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/agent_handle: ?Handle/;"	field
agg_16_threshold	$ZIGLIB/std/crypto/ghash_polyval.zig	/const agg_16_threshold = 328/;"	constant
agg_4_threshold	$ZIGLIB/std/crypto/ghash_polyval.zig	/const agg_4_threshold = 22/;"	constant
agg_8_threshold	$ZIGLIB/std/crypto/ghash_polyval.zig	/const agg_8_threshold = 84/;"	constant
aggressive_fma	$ZIGLIB/std/target/aarch64.zig	/aggressive_fma/;"	field
ai_addr	$ZIGLIB/std/os/windows/ws2_32.zig	/ai_addr: *sockaddr/;"	field
ai_addrlen	$ZIGLIB/std/os/windows/ws2_32.zig	/ai_addrlen: usize/;"	field
ai_blob	$ZIGLIB/std/os/windows/ws2_32.zig	/ai_blob: *anyopaque/;"	field
ai_bloblen	$ZIGLIB/std/os/windows/ws2_32.zig	/ai_bloblen: usize/;"	field
ai_canonname	$ZIGLIB/std/os/windows/ws2_32.zig	/ai_canonname: [*:0]u8/;"	field
ai_family	$ZIGLIB/std/os/windows/ws2_32.zig	/ai_family: i32/;"	field
ai_flags	$ZIGLIB/std/os/windows/ws2_32.zig	/ai_flags: i32/;"	field
ai_high	$ZIGLIB/std/math/big/int.zig	/const ai_high = a[i] >> half_limb_bits/;"	constant
ai_high_quo	$ZIGLIB/std/math/big/int.zig	/const ai_high_quo = ai_high_with_carry \/ b/;"	constant
ai_high_with_carry	$ZIGLIB/std/math/big/int.zig	/const ai_high_with_carry = (rem.* << half_limb_bits) | ai_high/;"	constant
ai_low	$ZIGLIB/std/math/big/int.zig	/const ai_low = a[i] & ((1 << half_limb_bits) - 1)/;"	constant
ai_low_quo	$ZIGLIB/std/math/big/int.zig	/const ai_low_quo = ai_low_with_carry \/ b/;"	constant
ai_low_with_carry	$ZIGLIB/std/math/big/int.zig	/const ai_low_with_carry = (rem.* << half_limb_bits) | ai_low/;"	constant
ai_next	$ZIGLIB/std/os/windows/ws2_32.zig	/ai_next: *addrinfoexA/;"	field
ai_protocol	$ZIGLIB/std/os/windows/ws2_32.zig	/ai_protocol: i32/;"	field
ai_provider	$ZIGLIB/std/os/windows/ws2_32.zig	/ai_provider: *GUID/;"	field
ai_socktype	$ZIGLIB/std/os/windows/ws2_32.zig	/ai_socktype: i32/;"	field
alarm	$ZIGLIB/std/os/linux/syscalls.zig	/alarm = Linux + 37/;"	field
alderlake	$ZIGLIB/std/target/x86.zig	/pub const alderlake = CpuModel{$/;"	constant
alen_usize	$ZIGLIB/std/os/linux.zig	/const alen_usize = @ptrToInt(alen)/;"	constant
alert	$ZIGLIB/std/crypto/tls.zig	/alert = 21/;"	field
alg_id	$ZIGLIB/std/crypto/scrypt.zig	/const alg_id = "scrypt"/;"	constant
alg_version	$ZIGLIB/std/crypto/phc_encoding.zig	/alg_version: u16/;"	field
algo_elem	$ZIGLIB/std/crypto/Certificate.zig	/const algo_elem = try der.Element.parse(cert_bytes, sig_algo.slice.start)/;"	constant
algorithm_raw	$ZIGLIB/std/os/uefi/protocols/rng_protocol.zig	/pub const algorithm_raw align(8) = Guid{$/;"	constant
algorithm_sp800_90_ctr_256	$ZIGLIB/std/os/uefi/protocols/rng_protocol.zig	/pub const algorithm_sp800_90_ctr_256 align(8) = Guid{$/;"	constant
algorithm_sp800_90_hash_256	$ZIGLIB/std/os/uefi/protocols/rng_protocol.zig	/pub const algorithm_sp800_90_hash_256 align(8) = Guid{$/;"	constant
algorithm_sp800_90_hmac_256	$ZIGLIB/std/os/uefi/protocols/rng_protocol.zig	/pub const algorithm_sp800_90_hmac_256 align(8) = Guid{$/;"	constant
algorithm_x9_31_3des	$ZIGLIB/std/os/uefi/protocols/rng_protocol.zig	/pub const algorithm_x9_31_3des align(8) = Guid{$/;"	constant
algorithm_x9_31_aes	$ZIGLIB/std/os/uefi/protocols/rng_protocol.zig	/pub const algorithm_x9_31_aes align(8) = Guid{$/;"	constant
alias	$ZIGLIB/std/crypto/Certificate/Bundle/macos.zig	/alias: u32/;"	field
alias_count	$ZIGLIB/std/math/big/int.zig	/var alias_count: usize = 0/;"	variable
aliased	$ZIGLIB/std/math/big/rational.zig	/var aliased = rma.p.limbs.ptr == a.p.limbs.ptr or rma.p.limbs.ptr == b.p.limbs.ptr/;"	variable
align	$ZIGLIB/std/macho.zig	/@"align": u32 = 0/;"	field
alignAllocLen	$ZIGLIB/std/mem.zig	/^pub fn alignAllocLen(full_len: usize, alloc_len: usize, len_align: u29) usize {$/;"	function
alignBackward	$ZIGLIB/std/mem.zig	/^pub fn alignBackward(addr: usize, alignment: usize) usize {$/;"	function
alignBackwardAnyAlign	$ZIGLIB/std/mem.zig	/^pub fn alignBackwardAnyAlign(i: usize, alignment: usize) usize {$/;"	function
alignBackwardGeneric	$ZIGLIB/std/mem.zig	/^pub fn alignBackwardGeneric(comptime T: type, addr: T, alignment: T) T {$/;"	function
alignCast	$ZIGLIB/std/math.zig	/^pub fn alignCast(comptime alignment: u29, ptr: anytype) AlignCastError!@TypeOf(@alignCast(alignment, ptr)) {$/;"	function
alignForward	$ZIGLIB/std/mem.zig	/^pub fn alignForward(addr: usize, alignment: usize) usize {$/;"	function
alignForwardGeneric	$ZIGLIB/std/mem.zig	/^pub fn alignForwardGeneric(comptime T: type, addr: T, alignment: T) T {$/;"	function
alignForwardLog2	$ZIGLIB/std/mem.zig	/^pub fn alignForwardLog2(addr: usize, log2_alignment: u8) usize {$/;"	function
alignInBytes	$ZIGLIB/std/mem.zig	/^pub fn alignInBytes(bytes: []u8, comptime new_alignment: usize) ?[]align(new_alignment) u8 {$/;"	function
alignInSlice	$ZIGLIB/std/mem.zig	/^pub fn alignInSlice(slice: anytype, comptime new_alignment: usize) ?AlignedSlice(@TypeOf(slice), new_alignment) {$/;"	function
alignPageAllocLen	$ZIGLIB/std/heap.zig	/^pub fn alignPageAllocLen(full_len: usize, len: usize) usize {$/;"	function
alignPointer	$ZIGLIB/std/mem.zig	/^pub fn alignPointer(ptr: anytype, align_to: usize) ?@TypeOf(ptr) {$/;"	function
alignPointerOffset	$ZIGLIB/std/mem.zig	/^pub fn alignPointerOffset(ptr: anytype, align_to: usize) ?usize {$/;"	function
alignPtrCast	$ZIGLIB/std/os/linux/tls.zig	/^inline fn alignPtrCast(comptime T: type, ptr: [*]u8) *T {$/;"	function
alignToByte	$ZIGLIB/std/io/bit_reader.zig	/pub fn alignToByte(self: *Self) void {$/;"	function
align_bits	$ZIGLIB/std/heap/arena_allocator.zig	/const align_bits = std.math.log2_int(usize, @alignOf(BufNode))/;"	constant
align_decoder	$ZIGLIB/std/compress/lzma/decode.zig	/align_decoder: BitTree(4)/;"	field
align_expr	$ZIGLIB/std/zig/Parse.zig	/var align_expr: Node.Index = 0/;"	variable
align_first	$ZIGLIB/std/zig/render.zig	/const align_first = tree.firstToken(ptr_type.ast.align_node)/;"	constant
align_kw	$ZIGLIB/std/zig/render.zig	/const align_kw = lparen_token - 1/;"	constant
align_lparen	$ZIGLIB/std/zig/render.zig	/const align_lparen = tree.firstToken(fn_proto.ast.align_expr) - 1/;"	constant
align_mask	$ZIGLIB/std/heap.zig	/var align_mask: usize = undefined/;"	variable
align_node	$ZIGLIB/std/zig/Parse.zig	/const align_node = try p.parseByteAlign()/;"	constant
align_offset	$ZIGLIB/std/heap.zig	/const align_offset = @ptrToInt(buf.ptr) - root_addr/;"	constant
align_rparen	$ZIGLIB/std/zig/render.zig	/const align_rparen = tree.lastToken(fn_proto.ast.align_expr) + 1/;"	constant
align_token	$ZIGLIB/std/zig/render.zig	/const align_token = tree.firstToken(field.ast.align_expr) - 2/;"	constant
aligned	$ZIGLIB/std/mem.zig	/var aligned = alignPointer(ptr, align_to)/;"	variable
alignedAlloc	$ZIGLIB/std/mem/Allocator.zig	/^pub fn alignedAlloc($/;"	function
alignedAllocSize	$ZIGLIB/std/heap.zig	/fn alignedAllocSize(ptr: [*]u8) usize {$/;"	function
alignedFree	$ZIGLIB/std/heap.zig	/fn alignedFree(ptr: [*]u8) void {$/;"	function
alignedVarDecl	$ZIGLIB/std/zig/Ast.zig	/^pub fn alignedVarDecl(tree: Ast, node: Node.Index) full.VarDecl {$/;"	function
aligned_addr	$ZIGLIB/std/os/uefi/pool_allocator.zig	/const aligned_addr = mem.alignForward(unaligned_addr + @sizeOf(usize), ptr_align)/;"	constant
aligned_address	$ZIGLIB/std/debug.zig	/const aligned_address = address & ~@intCast(usize, (mem.page_size - 1))/;"	constant
aligned_allocated_buf	$ZIGLIB/std/process.zig	/const aligned_allocated_buf = @alignCast(@alignOf([]u8), unaligned_allocated_buf)/;"	constant
aligned_bytes	$ZIGLIB/std/mem.zig	/const aligned_bytes = alignInBytes(bytes, new_alignment) orelse return null/;"	constant
aligned_len	$ZIGLIB/std/rand/Xoshiro256.zig	/const aligned_len = buf.len - (buf.len & 7)/;"	constant
aligned_memory	$ZIGLIB/std/debug.zig	/const aligned_memory = @intToPtr([*]align(mem.page_size) u8, aligned_address)[0..mem.page_size]/;"	constant
aligned_page_idx	$ZIGLIB/std/heap/WasmPageAllocator.zig	/const aligned_page_idx = next_page_idx + drop_page_count/;"	constant
aligned_ptr	$ZIGLIB/std/os/uefi/pool_allocator.zig	/var aligned_ptr = unaligned_ptr + (aligned_addr - unaligned_addr)/;"	variable
aligned_size	$ZIGLIB/std/heap/general_purpose_allocator.zig	/const aligned_size = @max(old_mem.len, @as(usize, 1) << log2_old_align)/;"	constant
aligned_slice	$ZIGLIB/std/mem.zig	/const aligned_slice = bytesAsSlice(Element, aligned_bytes[0..slice_length_bytes])/;"	constant
aligned_var_decl	$ZIGLIB/std/zig/Ast.zig	/aligned_var_decl/;"	field
alignment	$ZIGLIB/std/testing.zig	/const alignment = if (T == u8) 16 else 2/;"	constant
alignment_offset	$ZIGLIB/std/mem.zig	/const alignment_offset = begin_address_aligned - begin_address/;"	constant
all1s_mantissa	$ZIGLIB/std/math/float.zig	/const all1s_mantissa = (1 << floatMantissaBits(T)) - 1/;"	constant
allCpuModels	$ZIGLIB/std/target.zig	/pub fn allCpuModels(arch: Arch) []const *const Cpu.Model {$/;"	function
allCpusFromDecls	$ZIGLIB/std/target.zig	/fn allCpusFromDecls(comptime cpus: type) []const *const Cpu.Model {$/;"	function
allEqual	$ZIGLIB/std/mem.zig	/^pub fn allEqual(comptime T: type, slice: []const T, scalar: T) bool {$/;"	function
allFeaturesList	$ZIGLIB/std/target.zig	/pub fn allFeaturesList(arch: Arch) []const Cpu.Feature {$/;"	function
all_abis	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/const all_abis = comptime blk: {$/;"	constant
all_extd	$ZIGLIB/std/crypto/tls/Client.zig	/var all_extd = try hsd.sub(total_ext_size)/;"	variable
all_features	$ZIGLIB/std/zig/CrossTarget.zig	/const all_features = target.cpu.arch.allFeaturesList()/;"	constant
all_ip4	$ZIGLIB/std/net.zig	/const all_ip4 = for (addrs.items) |addr| {$/;"	constant
all_loaded_mem	$ZIGLIB/std/dynamic_library.zig	/const all_loaded_mem = try os.mmap($/;"	constant
all_mask	$ZIGLIB/std/os/linux.zig	/^pub const all_mask: sigset_t = [_]u32{0xffffffff} ** @typeInfo(sigset_t).Array.len/;"	constant
alloc	$ZIGLIB/std/zig/string_literal.zig	/var alloc = fixed_buf_alloc.allocator()/;"	variable
allocAdvancedWithRetAddr	$ZIGLIB/std/mem/Allocator.zig	/^pub fn allocAdvancedWithRetAddr($/;"	function
allocBigPages	$ZIGLIB/std/heap/WasmAllocator.zig	/^fn allocBigPages(n: usize) usize {$/;"	function
allocDescription	$ZIGLIB/std/zig/CrossTarget.zig	/^pub fn allocDescription(self: CrossTarget, allocator: mem.Allocator) ![]u8 {$/;"	function
allocInner	$ZIGLIB/std/heap/general_purpose_allocator.zig	/fn allocInner($/;"	function
allocLowerString	$ZIGLIB/std/ascii.zig	/^pub fn allocLowerString(allocator: std.mem.Allocator, ascii_string: []const u8) ![]u8 {$/;"	function
allocNew	$ZIGLIB/std/heap/memory_pool.zig	/fn allocNew(pool: *Pool) MemoryPoolError!*align(item_alignment) [item_size]u8 {$/;"	function
allocPages	$ZIGLIB/std/heap/WasmPageAllocator.zig	/^fn allocPages(page_count: usize, log2_align: u8) !usize {$/;"	function
allocPrint	$ZIGLIB/std/fmt.zig	/^pub fn allocPrint(allocator: mem.Allocator, comptime fmt: []const u8, args: anytype) AllocPrintError![]u8 {$/;"	function
allocPrintZ	$ZIGLIB/std/fmt.zig	/^pub fn allocPrintZ(allocator: mem.Allocator, comptime fmt: []const u8, args: anytype) AllocPrintError![:0]u8 {$/;"	function
allocSentinel	$ZIGLIB/std/mem/Allocator.zig	/^pub fn allocSentinel($/;"	function
allocSlice	$ZIGLIB/compiler_rt/emutls.zig	/pub fn allocSlice(comptime T: type, len: usize) []T {$/;"	function
allocSlot	$ZIGLIB/std/heap/general_purpose_allocator.zig	/fn allocSlot(self: *Self, size_class: usize, trace_addr: usize) Error![*]u8 {$/;"	function
allocUpperString	$ZIGLIB/std/ascii.zig	/^pub fn allocUpperString(allocator: std.mem.Allocator, ascii_string: []const u8) ![]u8 {$/;"	function
allocWithOptions	$ZIGLIB/std/mem/Allocator.zig	/^pub fn allocWithOptions($/;"	function
allocWithOptionsRetAddr	$ZIGLIB/std/mem/Allocator.zig	/^pub fn allocWithOptionsRetAddr($/;"	function
alloc_align	$ZIGLIB/std/os/linux/tls.zig	/alloc_align: usize/;"	field
alloc_bytes	$ZIGLIB/std/Thread.zig	/const alloc_bytes = @alignOf(Instance) + @sizeOf(Instance)/;"	constant
alloc_cursor	$ZIGLIB/std/heap/general_purpose_allocator.zig	/alloc_cursor: SlotIndex/;"	field
alloc_ptr	$ZIGLIB/std/Thread.zig	/const alloc_ptr = windows.kernel32.HeapAlloc(heap_handle, 0, alloc_bytes) orelse return error.OutOfMemory/;"	constant
alloc_size	$ZIGLIB/std/os/linux/tls.zig	/const alloc_size = switch (tls_variant) {$/;"	constant
alloc_stack	$ZIGLIB/std/event/group.zig	/alloc_stack: AllocStack/;"	field
alloc_tls_area	$ZIGLIB/std/os/linux/tls.zig	/const alloc_tls_area = os.mmap($/;"	constant
allocate	$ZIGLIB/std/hash_map.zig	/fn allocate(self: *Self, allocator: Allocator, new_capacity: Size) Allocator.Error!void {$/;"	function
allocatePages	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/allocatePages: *const fn (alloc_type: AllocateType, mem_type: MemoryType, pages: usize, memory: *[*]align(4096) u8) callconv(.C) Status/;"	field
allocatePool	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/allocatePool: *const fn (pool_type: MemoryType, size: usize, buffer: *[*]align(8) u8) callconv(.C) Status/;"	field
allocatePort	$ZIGLIB/std/os/darwin.zig	/pub fn allocatePort(self: MachTask, right: std.c.MACH_PORT_RIGHT) MachError!MachTask {$/;"	function
allocated	$ZIGLIB/std/dwarf/AT.zig	/^pub const allocated = 0x4e/;"	constant
allocatedBytes	$ZIGLIB/std/multi_array_list.zig	/fn allocatedBytes(self: Self) []align(@alignOf(S)) u8 {$/;"	function
allocatedSlice	$ZIGLIB/std/array_list.zig	/pub fn allocatedSlice(self: Self) Slice {$/;"	function
allocated_bytes	$ZIGLIB/std/testing/failing_allocator.zig	/allocated_bytes: usize/;"	field
allocations	$ZIGLIB/std/testing/failing_allocator.zig	/allocations: usize/;"	field
allocator	$ZIGLIB/std/tz.zig	/allocator: std.mem.Allocator/;"	field
allocator_buf	$ZIGLIB/std/heap/log_to_writer_allocator.zig	/var allocator_buf: [10]u8 = undefined/;"	variable
allocator_instance	$ZIGLIB/std/testing.zig	/^pub var allocator_instance = b: {$/;"	variable
allocator_state	$ZIGLIB/std/heap/log_to_writer_allocator.zig	/var allocator_state = logToWriterAllocator(fixedBufferAllocator.allocator(), fbs.writer())/;"	variable
alloced_bytes	$ZIGLIB/std/heap/arena_allocator.zig	/var alloced_bytes: usize = 0/;"	variable
allow_const_ptr	$ZIGLIB/std/hash_map.zig	/var allow_const_ptr = false/;"	variable
allow_ctty	$ZIGLIB/std/fs/file.zig	/allow_ctty: bool = false/;"	field
allow_darling	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/allow_darling: bool = true/;"	field
allow_duplicate_port	$ZIGLIB/std/os/uefi/protocols/udp6_protocol.zig	/allow_duplicate_port: bool/;"	field
allow_incomplete	$ZIGLIB/std/compress/lzma/decode.zig	/allow_incomplete: bool = false/;"	field
allow_mutable_ptr	$ZIGLIB/std/hash_map.zig	/var allow_mutable_ptr = false/;"	variable
allow_qemu	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/allow_qemu: bool = true/;"	field
allow_rosetta	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/allow_rosetta: bool = true/;"	field
allow_trailing_data	$ZIGLIB/std/json.zig	/allow_trailing_data: bool = false/;"	field
allow_truncation_attacks	$ZIGLIB/std/crypto/tls/Client.zig	/^allow_truncation_attacks: bool = false/;"	field
allow_unaligned_fp_access	$ZIGLIB/std/target/powerpc.zig	/allow_unaligned_fp_access/;"	field
allow_wasmtime	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/allow_wasmtime: bool = true/;"	field
allow_wine	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/allow_wine: bool = true/;"	field
allowed_str	$ZIGLIB/std/enums.zig	/const allowed_str = std.fmt.comptimePrint("{d}", .{max_unused_slots})/;"	constant
allowzero_token	$ZIGLIB/std/zig/Ast.zig	/allowzero_token: ?TokenIndex/;"	field
ally	$ZIGLIB/std/multi_array_list.zig	/const ally = testing.allocator/;"	constant
alphabet_chars	$ZIGLIB/std/base64.zig	/alphabet_chars: [64]u8/;"	field
already_reported	$ZIGLIB/std/http.zig	/already_reported = 208/;"	field
alt_active	$ZIGLIB/std/os/uefi/protocols/absolute_pointer_protocol.zig	/alt_active: bool/;"	field
alternate_sextload_cvt_f32_pattern	$ZIGLIB/std/target/aarch64.zig	/alternate_sextload_cvt_f32_pattern/;"	field
altivec	$ZIGLIB/std/target/powerpc.zig	/altivec/;"	field
altnzcv	$ZIGLIB/std/target/aarch64.zig	/altnzcv/;"	field
alu32	$ZIGLIB/std/target/bpf.zig	/alu32/;"	field
alu_and	$ZIGLIB/std/os/linux/bpf.zig	/pub fn alu_and(dst: Reg, src: anytype) Insn {$/;"	function
alu_or	$ZIGLIB/std/os/linux/bpf.zig	/pub fn alu_or(dst: Reg, src: anytype) Insn {$/;"	function
always_async	$ZIGLIB/std/event/batch.zig	/always_async/;"	field
always_has_lse	$ZIGLIB/compiler_rt/aarch64_outline_atomics.zig	/^const always_has_lse = std.Target.aarch64.featureSetHas(builtin.cpu.features, .lse)/;"	constant
always_inline	$ZIGLIB/std/builtin.zig	/always_inline/;"	field
always_tail	$ZIGLIB/std/builtin.zig	/always_tail/;"	field
amdfam10	$ZIGLIB/std/target/x86.zig	/pub const amdfam10 = CpuModel{$/;"	constant
amdgcn	$ZIGLIB/std/target.zig	/amdgcn/;"	field
amdhsa	$ZIGLIB/std/target.zig	/amdhsa/;"	field
amdil	$ZIGLIB/std/target.zig	/amdil/;"	field
amdil64	$ZIGLIB/std/target.zig	/amdil64/;"	field
amdpal	$ZIGLIB/std/target.zig	/amdpal/;"	field
amiga	$ZIGLIB/std/time/epoch.zig	/^pub const amiga = 252460800/;"	constant
amod	$ZIGLIB/compiler_rt/fmod.zig	/var amod = a/;"	variable
amount	$ZIGLIB/std/sort.zig	/const amount = mid - A.end/;"	constant
ampere1	$ZIGLIB/std/target/aarch64.zig	/pub const ampere1 = CpuModel{$/;"	constant
ampersand	$ZIGLIB/std/zig/tokenizer.zig	/ampersand/;"	field
ampersand_equal	$ZIGLIB/std/zig/tokenizer.zig	/ampersand_equal/;"	field
amplification	$ZIGLIB/std/target.zig	/amplification/;"	field
amt_copied	$ZIGLIB/std/fs/file.zig	/const amt_copied = try copyRange(in, in_off, out, out_off, len - total_bytes_copied)/;"	constant
amt_read	$ZIGLIB/std/process.zig	/const amt_read = try reader.read(buf[0..])/;"	constant
amt_usize	$ZIGLIB/std/io/fixed_buffer_stream.zig	/const amt_usize = std.math.cast(usize, amt) orelse std.math.maxInt(usize)/;"	constant
amt_written	$ZIGLIB/std/os.zig	/const amt_written = try write(out_fd, buf[0..amt_read])/;"	constant
amvs	$ZIGLIB/std/target/aarch64.zig	/amvs/;"	field
amx_bf16	$ZIGLIB/std/target/x86.zig	/amx_bf16/;"	field
amx_int8	$ZIGLIB/std/target/x86.zig	/amx_int8/;"	field
amx_tile	$ZIGLIB/std/target/x86.zig	/amx_tile/;"	field
ananas	$ZIGLIB/std/target.zig	/ananas/;"	field
ancount	$ZIGLIB/std/net.zig	/var ancount = r[6] * @as(usize, 256) + r[7]/;"	variable
andBlocks	$ZIGLIB/std/crypto/aes/soft.zig	/pub inline fn andBlocks(block1: Block, block2: Block) Block {$/;"	function
android	$ZIGLIB/std/time/epoch.zig	/^pub const android = posix/;"	constant
angle_bracket_angle_bracket_left	$ZIGLIB/std/zig/tokenizer.zig	/angle_bracket_angle_bracket_left/;"	field
angle_bracket_angle_bracket_left_equal	$ZIGLIB/std/zig/tokenizer.zig	/angle_bracket_angle_bracket_left_equal/;"	field
angle_bracket_angle_bracket_left_pipe	$ZIGLIB/std/zig/tokenizer.zig	/angle_bracket_angle_bracket_left_pipe/;"	field
angle_bracket_angle_bracket_left_pipe_equal	$ZIGLIB/std/zig/tokenizer.zig	/angle_bracket_angle_bracket_left_pipe_equal/;"	field
angle_bracket_angle_bracket_right	$ZIGLIB/std/zig/tokenizer.zig	/angle_bracket_angle_bracket_right/;"	field
angle_bracket_angle_bracket_right_equal	$ZIGLIB/std/zig/tokenizer.zig	/angle_bracket_angle_bracket_right_equal/;"	field
angle_bracket_left	$ZIGLIB/std/zig/tokenizer.zig	/angle_bracket_left/;"	field
angle_bracket_left_equal	$ZIGLIB/std/zig/tokenizer.zig	/angle_bracket_left_equal/;"	field
angle_bracket_right	$ZIGLIB/std/zig/tokenizer.zig	/angle_bracket_right/;"	field
angle_bracket_right_equal	$ZIGLIB/std/zig/tokenizer.zig	/angle_bracket_right_equal/;"	field
animations	$ZIGLIB/std/os/uefi/protocols/hii.zig	/pub const animations: u8 = 0xa/;"	constant
anon1	$ZIGLIB/std/os/windows.zig	/anon1: extern union {$/;"	field
anon2	$ZIGLIB/std/os/windows.zig	/anon2: extern struct {$/;"	field
another	$ZIGLIB/std/event/group.zig	/var another = Group(anyerror!void).init(allocator)/;"	variable
another_optional	$ZIGLIB/std/json.zig	/another_optional: ?[]const u8 = null/;"	field
another_required	$ZIGLIB/std/json.zig	/another_required: []const u8 = "something else"/;"	field
answer	$ZIGLIB/std/mem.zig	/const answer = readInt(u32, &buf, Endian.Little)/;"	constant
any_errors	$ZIGLIB/std/Build/ConfigHeaderStep.zig	/var any_errors = false/;"	variable
any_ignore	$ZIGLIB/std/child_process.zig	/const any_ignore = (self.stdin_behavior == StdIo.Ignore or self.stdout_behavior == StdIo.Ignore or self.stderr_behavior == StdIo.Ignore)/;"	constant
anyframe_literal	$ZIGLIB/std/zig/Ast.zig	/anyframe_literal/;"	field
anyframe_type	$ZIGLIB/std/zig/Ast.zig	/anyframe_type/;"	field
anyhit	$ZIGLIB/std/target.zig	/anyhit/;"	field
anythingBetween	$ZIGLIB/std/zig/render.zig	/^fn anythingBetween(tree: Ast, start_token: Ast.TokenIndex, end_token: Ast.TokenIndex) bool {$/;"	function
anything_changed	$ZIGLIB/std/io/change_detection_stream.zig	/anything_changed: bool/;"	field
anytype_ellipsis3	$ZIGLIB/std/zig/Ast.zig	/anytype_ellipsis3: ?TokenIndex/;"	field
ap_base	$ZIGLIB/std/math/big/int.zig	/const ap_base: Const = .{ .limbs = &[_]Limb{base}, .positive = true }/;"	constant
ap_d	$ZIGLIB/std/math/big/int.zig	/const ap_d: Const = .{ .limbs = &[_]Limb{d}, .positive = true }/;"	constant
ap_derived_secret	$ZIGLIB/std/crypto/tls/Client.zig	/const ap_derived_secret = hkdfExpandLabel(P.Hkdf, p.handshake_secret, "derived", &empty_hash, P.Hash.digest_length)/;"	constant
apbuf	$ZIGLIB/std/net.zig	/const apbuf = [2][]u8{ &abuf[0], &abuf[1] }/;"	constant
aperture_regs	$ZIGLIB/std/target/amdgpu.zig	/aperture_regs/;"	field
api_version	$ZIGLIB/std/c/haiku.zig	/api_version: i32/;"	field
app_basename_utf8	$ZIGLIB/std/child_process.zig	/const app_basename_utf8 = fs.path.basename(app_name_utf8)/;"	constant
app_buf	$ZIGLIB/std/child_process.zig	/var app_buf = std.ArrayListUnmanaged(u16){}/;"	variable
app_cipher	$ZIGLIB/std/crypto/tls/Client.zig	/const app_cipher = switch (handshake_cipher) {$/;"	constant
app_dirname_w	$ZIGLIB/std/child_process.zig	/const app_dirname_w: ?[:0]u16 = x: {$/;"	constant
app_mask	$ZIGLIB/std/os/linux.zig	/^pub const app_mask: sigset_t = [2]u32{ 0xfffffffc, 0x7fffffff } ++ [_]u32{0xffffffff} ** 30/;"	constant
app_name	$ZIGLIB/std/child_process.zig	/const app_name = app_buf.items[0..app_name_len]/;"	constant
app_name_appended	$ZIGLIB/std/child_process.zig	/const app_name_appended = app_buf.items[0 .. app_buf.items.len - 1 :0]/;"	constant
app_name_is_absolute	$ZIGLIB/std/child_process.zig	/const app_name_is_absolute = fs.path.isAbsolute(app_name_utf8)/;"	constant
app_name_len	$ZIGLIB/std/child_process.zig	/const app_name_len = app_buf.items.len/;"	constant
app_name_len_bytes	$ZIGLIB/std/child_process.zig	/const app_name_len_bytes = math.cast(u16, app_name_wildcard.len * 2) orelse return error.NameTooLong/;"	constant
app_name_unicode_string	$ZIGLIB/std/child_process.zig	/var app_name_unicode_string = windows.UNICODE_STRING{$/;"	variable
app_name_utf8	$ZIGLIB/std/child_process.zig	/const app_name_utf8 = self.argv[0]/;"	constant
app_name_w	$ZIGLIB/std/child_process.zig	/const app_name_w = try unicode.utf8ToUtf16LeWithNull(self.allocator, app_basename_utf8)/;"	constant
app_name_wildcard	$ZIGLIB/std/child_process.zig	/const app_name_wildcard = app_buf.items[0 .. app_buf.items.len - 1 :0]/;"	constant
appdata_path	$ZIGLIB/std/Build/CompileStep.zig	/const appdata_path = try fs.getAppDataDir(allocator, "vcpkg")/;"	constant
append	$ZIGLIB/std/segmented_list.zig	/pub fn append(self: *Self, allocator: Allocator, item: T) Allocator.Error!void {$/;"	function
appendArray	$ZIGLIB/std/zig/system/NativePaths.zig	/^fn appendArray(self: *NativePaths, array: *ArrayList([:0]u8), s: []const u8) !void {$/;"	function
appendAssumeCapacity	$ZIGLIB/std/multi_array_list.zig	/pub fn appendAssumeCapacity(self: *Self, elem: S) void {$/;"	function
appendByte	$ZIGLIB/std/compress/lzma/decode/lzbuffer.zig	/pub fn appendByte(self: *Self, allocator: Allocator, byte: u8) !void {$/;"	function
appendLiteral	$ZIGLIB/std/compress/lzma/decode/lzbuffer.zig	/pub fn appendLiteral($/;"	function
appendLz	$ZIGLIB/std/compress/lzma/decode/lzbuffer.zig	/pub fn appendLz($/;"	function
appendModuleArgs	$ZIGLIB/std/Build/CompileStep.zig	/^fn appendModuleArgs($/;"	function
appendNTimes	$ZIGLIB/std/bounded_array.zig	/pub fn appendNTimes(self: *Self, value: T, n: usize) error{Overflow}!void {$/;"	function
appendNTimesAssumeCapacity	$ZIGLIB/std/bounded_array.zig	/pub fn appendNTimesAssumeCapacity(self: *Self, value: T, n: usize) void {$/;"	function
appendSlice	$ZIGLIB/std/segmented_list.zig	/pub fn appendSlice(self: *Self, allocator: Allocator, items: []const T) Allocator.Error!void {$/;"	function
appendSliceAssumeCapacity	$ZIGLIB/std/bounded_array.zig	/pub fn appendSliceAssumeCapacity(self: *Self, items: []const T) void {$/;"	function
appendUnalignedSlice	$ZIGLIB/std/array_list.zig	/pub fn appendUnalignedSlice(self: *Self, items: []align(1) const T) Allocator.Error!void {$/;"	function
appendUnalignedSliceAssumeCapacity	$ZIGLIB/std/array_list.zig	/pub fn appendUnalignedSliceAssumeCapacity(self: *Self, items: []align(1) const T) void {$/;"	function
appendWrite	$ZIGLIB/std/fifo.zig	/fn appendWrite(self: *Self, bytes: []const u8) error{OutOfMemory}!usize {$/;"	function
apple	$ZIGLIB/compiler_rt/clear_cache.zig	/const apple = switch (os) {$/;"	constant
apple_a10	$ZIGLIB/std/target/aarch64.zig	/pub const apple_a10 = CpuModel{$/;"	constant
apple_a11	$ZIGLIB/std/target/aarch64.zig	/pub const apple_a11 = CpuModel{$/;"	constant
apple_a12	$ZIGLIB/std/target/aarch64.zig	/pub const apple_a12 = CpuModel{$/;"	constant
apple_a13	$ZIGLIB/std/target/aarch64.zig	/pub const apple_a13 = CpuModel{$/;"	constant
apple_a14	$ZIGLIB/std/target/aarch64.zig	/pub const apple_a14 = CpuModel{$/;"	constant
apple_a7	$ZIGLIB/std/target/aarch64.zig	/pub const apple_a7 = CpuModel{$/;"	constant
apple_a8	$ZIGLIB/std/target/aarch64.zig	/pub const apple_a8 = CpuModel{$/;"	constant
apple_a9	$ZIGLIB/std/target/aarch64.zig	/pub const apple_a9 = CpuModel{$/;"	constant
apple_latest	$ZIGLIB/std/target/aarch64.zig	/pub const apple_latest = CpuModel{$/;"	constant
apple_m1	$ZIGLIB/std/target/aarch64.zig	/pub const apple_m1 = CpuModel{$/;"	constant
apple_s4	$ZIGLIB/std/target/aarch64.zig	/pub const apple_s4 = CpuModel{$/;"	constant
apple_s5	$ZIGLIB/std/target/aarch64.zig	/pub const apple_s5 = CpuModel{$/;"	constant
application	$ZIGLIB/std/crypto/Certificate.zig	/application/;"	field
application_cipher	$ZIGLIB/std/crypto/tls/Client.zig	/^application_cipher: tls.ApplicationCipher/;"	field
application_data	$ZIGLIB/std/crypto/tls.zig	/application_data = 23/;"	field
application_layer_protocol_negotiation	$ZIGLIB/std/crypto/tls.zig	/application_layer_protocol_negotiation = 16/;"	field
applied_indent	$ZIGLIB/std/zig/render.zig	/applied_indent: usize = 0/;"	field
applyArgs	$ZIGLIB/std/Build.zig	/^fn applyArgs(b: *Build, args: anytype) !void {$/;"	function
applyIndent	$ZIGLIB/std/zig/render.zig	/fn applyIndent(self: *Self) WriteError!void {$/;"	function
approxEqAbs	$ZIGLIB/std/math.zig	/^pub fn approxEqAbs(comptime T: type, x: T, y: T, tolerance: T) bool {$/;"	function
approxEqRel	$ZIGLIB/std/math.zig	/^pub fn approxEqRel(comptime T: type, x: T, y: T, tolerance: T) bool {$/;"	function
arch	$ZIGLIB/std/zig/CrossTarget.zig	/const arch = switch (self.getCpuArch()) {$/;"	constant
arch10	$ZIGLIB/std/target/s390x.zig	/pub const arch10 = CpuModel{$/;"	constant
arch11	$ZIGLIB/std/target/s390x.zig	/pub const arch11 = CpuModel{$/;"	constant
arch12	$ZIGLIB/std/target/s390x.zig	/pub const arch12 = CpuModel{$/;"	constant
arch13	$ZIGLIB/std/target/s390x.zig	/pub const arch13 = CpuModel{$/;"	constant
arch14	$ZIGLIB/std/target/s390x.zig	/pub const arch14 = CpuModel{$/;"	constant
arch8	$ZIGLIB/std/target/s390x.zig	/pub const arch8 = CpuModel{$/;"	constant
arch9	$ZIGLIB/std/target/s390x.zig	/pub const arch9 = CpuModel{$/;"	constant
arch_bits	$ZIGLIB/std/os/linux.zig	/^const arch_bits = switch (native_arch) {$/;"	constant
arch_is_native	$ZIGLIB/std/zig/CrossTarget.zig	/const arch_is_native = mem.eql(u8, arch_name, "native")/;"	constant
arch_name	$ZIGLIB/std/zig/CrossTarget.zig	/const arch_name = it.first()/;"	constant
arch_os_abi	$ZIGLIB/std/zig/CrossTarget.zig	/arch_os_abi: []const u8 = "native"/;"	field
arch_part	$ZIGLIB/std/target.zig	/const arch_part = switch (self.cpu.arch) {$/;"	constant
arch_prctl	$ZIGLIB/std/os/linux/syscalls.zig	/arch_prctl = 384/;"	field
arch_specific_syscall	$ZIGLIB/std/os/linux/syscalls.zig	/pub const arch_specific_syscall = 244/;"	constant
arch_suffix	$ZIGLIB/std/target.zig	/const arch_suffix = if (is_arm and self.abi.floatAbi() == .hard) "hf" else ""/;"	constant
architected_flat_scratch	$ZIGLIB/std/target/amdgpu.zig	/architected_flat_scratch/;"	field
architecture	$ZIGLIB/std/zig/system/linux.zig	/architecture: u8 = 0/;"	field
area	$ZIGLIB/std/c/haiku.zig	/area: u32/;"	field
area_count	$ZIGLIB/std/c/haiku.zig	/area_count: i32/;"	field
area_info	$ZIGLIB/std/c/haiku.zig	/^pub const area_info = extern struct {$/;"	struct
arena	$ZIGLIB/std/process.zig	/const arena = arena_allocator.allocator()/;"	constant
arena_allocator	$ZIGLIB/std/process.zig	/var arena_allocator = std.heap.ArenaAllocator.init(allocator)/;"	variable
arg0	$ZIGLIB/std/os/linux/seccomp.zig	/arg0: u64/;"	field
arg1	$ZIGLIB/std/os/linux/seccomp.zig	/arg1: u64/;"	field
arg2	$ZIGLIB/std/os/linux/seccomp.zig	/arg2: u64/;"	field
arg3	$ZIGLIB/std/os/linux/seccomp.zig	/arg3: u64/;"	field
arg4	$ZIGLIB/std/os/linux/seccomp.zig	/arg4: u64/;"	field
arg5	$ZIGLIB/std/os/linux/seccomp.zig	/arg5: u64/;"	field
argMax	$ZIGLIB/std/sort.zig	/^pub fn argMax($/;"	function
argMin	$ZIGLIB/std/sort.zig	/^pub fn argMin($/;"	function
arg_end	$ZIGLIB/std/os/linux.zig	/arg_end: u64/;"	field
arg_expr	$ZIGLIB/std/zig/Parse.zig	/const arg_expr = switch (p.token_tags[main_token]) {$/;"	constant
arg_i	$ZIGLIB/std/fmt.zig	/const arg_i = comptime meta.fieldIndex(ArgsType, arg_name) orelse$/;"	constant
arg_i_str	$ZIGLIB/std/testing.zig	/const arg_i_str = comptime str: {$/;"	constant
arg_name	$ZIGLIB/std/fmt.zig	/const arg_name = self.until(']')/;"	constant
arg_pos	$ZIGLIB/std/fmt.zig	/const arg_pos = comptime switch (placeholder.arg) {$/;"	constant
arg_start	$ZIGLIB/std/os/linux.zig	/arg_start: u64/;"	field
arg_state	$ZIGLIB/std/fmt.zig	/comptime var arg_state: ArgState = .{ .args_len = fields_info.len }/;"	variable
arg_to_print	$ZIGLIB/std/fmt.zig	/const arg_to_print = comptime arg_state.nextArg(arg_pos) orelse$/;"	constant
argc	$ZIGLIB/std/start.zig	/const argc = argc_argv_ptr[0]/;"	constant
argc_argv_ptr	$ZIGLIB/std/start.zig	/^var argc_argv_ptr: [*]usize = undefined/;"	variable
argon2d	$ZIGLIB/std/crypto/argon2.zig	/argon2d/;"	field
argon2i	$ZIGLIB/std/crypto/argon2.zig	/argon2i/;"	field
argon2id	$ZIGLIB/std/crypto/argon2.zig	/argon2id/;"	field
args	$ZIGLIB/std/testing.zig	/var args: ArgsTuple = undefined/;"	variable
argsAlloc	$ZIGLIB/std/process.zig	/^pub fn argsAlloc(allocator: Allocator) ![][:0]u8 {$/;"	function
argsFree	$ZIGLIB/std/process.zig	/^pub fn argsFree(allocator: Allocator, args_alloc: []const [:0]u8) void {$/;"	function
argsWithAllocator	$ZIGLIB/std/process.zig	/^pub fn argsWithAllocator(allocator: Allocator) ArgIterator.InitError!ArgIterator {$/;"	function
args_arena	$ZIGLIB/std/Build/CompileStep.zig	/var args_arena = std.heap.ArenaAllocator.init(builder.allocator)/;"	variable
args_dir	$ZIGLIB/std/Build/CompileStep.zig	/const args_dir = try fs.path.join($/;"	constant
args_file	$ZIGLIB/std/Build/CompileStep.zig	/const args_file = try fs.path.join(builder.allocator, &[_][]const u8{ args_dir, args_hex_hash[0..] })/;"	constant
args_hash	$ZIGLIB/std/Build/CompileStep.zig	/var args_hash: [Sha256.digest_length]u8 = undefined/;"	variable
args_hex_hash	$ZIGLIB/std/Build/CompileStep.zig	/var args_hex_hash: [Sha256.digest_length * 2]u8 = undefined/;"	variable
args_i	$ZIGLIB/std/testing.zig	/const args_i = i + 1/;"	constant
args_len	$ZIGLIB/std/hash_map.zig	/const args_len = if (is_array) 4 else 3/;"	constant
args_length	$ZIGLIB/std/Build/CompileStep.zig	/var args_length: usize = 0/;"	variable
args_ptr	$ZIGLIB/std/Thread.zig	/const args_ptr = try allocator.create(Args)/;"	constant
args_to_escape	$ZIGLIB/std/Build/CompileStep.zig	/const args_to_escape = zig_args.items[2..]/;"	constant
args_type_info	$ZIGLIB/std/zig/system/windows.zig	/const args_type_info = @typeInfo(ArgsType)/;"	constant
argument_field_list	$ZIGLIB/std/meta.zig	/var argument_field_list: [function_info.params.len]type = undefined/;"	variable
argv	.\/xcrun", "--sdk", sdk, "--show-sdk-version" }/;"	constant
argv0	$ZIGLIB/std/fs.zig	/const argv0 = mem.span(os.argv[0])/;"	constant
argv_buf	$ZIGLIB/std/process.zig	/var argv_buf = try allocator.alloc(u8, buf_size)/;"	variable
argv_list	$ZIGLIB/std/Build/TranslateCStep.zig	/var argv_list = std.ArrayList([]const u8).init(self.builder.allocator)/;"	variable
arith_bcc_fusion	$ZIGLIB/std/target/aarch64.zig	/arith_bcc_fusion/;"	field
arith_cbz_fusion	$ZIGLIB/std/target/aarch64.zig	/arith_cbz_fusion/;"	field
arm1020e	$ZIGLIB/std/target/arm.zig	/pub const arm1020e = CpuModel{$/;"	constant
arm1020t	$ZIGLIB/std/target/arm.zig	/pub const arm1020t = CpuModel{$/;"	constant
arm1022e	$ZIGLIB/std/target/arm.zig	/pub const arm1022e = CpuModel{$/;"	constant
arm10e	$ZIGLIB/std/target/arm.zig	/pub const arm10e = CpuModel{$/;"	constant
arm10tdmi	$ZIGLIB/std/target/arm.zig	/pub const arm10tdmi = CpuModel{$/;"	constant
arm1136j_s	$ZIGLIB/std/target/arm.zig	/pub const arm1136j_s = CpuModel{$/;"	constant
arm1136jf_s	$ZIGLIB/std/target/arm.zig	/pub const arm1136jf_s = CpuModel{$/;"	constant
arm1156t2_s	$ZIGLIB/std/target/arm.zig	/pub const arm1156t2_s = CpuModel{$/;"	constant
arm1156t2f_s	$ZIGLIB/std/target/arm.zig	/pub const arm1156t2f_s = CpuModel{$/;"	constant
arm1176jz_s	$ZIGLIB/std/target/arm.zig	/pub const arm1176jz_s = CpuModel{$/;"	constant
arm1176jzf_s	$ZIGLIB/std/target/arm.zig	/pub const arm1176jzf_s = CpuModel{$/;"	constant
arm32	$ZIGLIB/compiler_rt/clear_cache.zig	/const arm32 = switch (arch) {$/;"	constant
arm64	$ZIGLIB/compiler_rt/clear_cache.zig	/const arm64 = switch (arch) {$/;"	constant
arm710t	$ZIGLIB/std/target/arm.zig	/pub const arm710t = CpuModel{$/;"	constant
arm720t	$ZIGLIB/std/target/arm.zig	/pub const arm720t = CpuModel{$/;"	constant
arm7tdmi	$ZIGLIB/std/target/arm.zig	/pub const arm7tdmi = CpuModel{$/;"	constant
arm7tdmi_s	$ZIGLIB/std/target/arm.zig	/pub const arm7tdmi_s = CpuModel{$/;"	constant
arm8	$ZIGLIB/std/target/arm.zig	/pub const arm8 = CpuModel{$/;"	constant
arm810	$ZIGLIB/std/target/arm.zig	/pub const arm810 = CpuModel{$/;"	constant
arm9	$ZIGLIB/std/target/arm.zig	/pub const arm9 = CpuModel{$/;"	constant
arm920	$ZIGLIB/std/target/arm.zig	/pub const arm920 = CpuModel{$/;"	constant
arm920t	$ZIGLIB/std/target/arm.zig	/pub const arm920t = CpuModel{$/;"	constant
arm922t	$ZIGLIB/std/target/arm.zig	/pub const arm922t = CpuModel{$/;"	constant
arm926ej_s	$ZIGLIB/std/target/arm.zig	/pub const arm926ej_s = CpuModel{$/;"	constant
arm940t	$ZIGLIB/std/target/arm.zig	/pub const arm940t = CpuModel{$/;"	constant
arm946e_s	$ZIGLIB/std/target/arm.zig	/pub const arm946e_s = CpuModel{$/;"	constant
arm966e_s	$ZIGLIB/std/target/arm.zig	/pub const arm966e_s = CpuModel{$/;"	constant
arm968e_s	$ZIGLIB/std/target/arm.zig	/pub const arm968e_s = CpuModel{$/;"	constant
arm9e	$ZIGLIB/std/target/arm.zig	/pub const arm9e = CpuModel{$/;"	constant
arm9tdmi	$ZIGLIB/std/target/arm.zig	/pub const arm9tdmi = CpuModel{$/;"	constant
arm_base	$ZIGLIB/std/os/linux/syscalls.zig	/const arm_base = 0x0f0000/;"	constant
arm_cpsr	$ZIGLIB/std/os/linux/arm-eabi.zig	/arm_cpsr: usize/;"	field
arm_fp	$ZIGLIB/std/os/linux/arm-eabi.zig	/arm_fp: usize/;"	field
arm_ip	$ZIGLIB/std/os/linux/arm-eabi.zig	/arm_ip: usize/;"	field
arm_lr	$ZIGLIB/std/os/linux/arm-eabi.zig	/arm_lr: usize/;"	field
arm_pc	$ZIGLIB/std/os/linux/arm-eabi.zig	/arm_pc: usize/;"	field
arm_r0	$ZIGLIB/std/os/linux/arm-eabi.zig	/arm_r0: usize/;"	field
arm_r1	$ZIGLIB/std/os/linux/arm-eabi.zig	/arm_r1: usize/;"	field
arm_r10	$ZIGLIB/std/os/linux/arm-eabi.zig	/arm_r10: usize/;"	field
arm_r2	$ZIGLIB/std/os/linux/arm-eabi.zig	/arm_r2: usize/;"	field
arm_r3	$ZIGLIB/std/os/linux/arm-eabi.zig	/arm_r3: usize/;"	field
arm_r4	$ZIGLIB/std/os/linux/arm-eabi.zig	/arm_r4: usize/;"	field
arm_r5	$ZIGLIB/std/os/linux/arm-eabi.zig	/arm_r5: usize/;"	field
arm_r6	$ZIGLIB/std/os/linux/arm-eabi.zig	/arm_r6: usize/;"	field
arm_r7	$ZIGLIB/std/os/linux/arm-eabi.zig	/arm_r7: usize/;"	field
arm_r8	$ZIGLIB/std/os/linux/arm-eabi.zig	/arm_r8: usize/;"	field
arm_r9	$ZIGLIB/std/os/linux/arm-eabi.zig	/arm_r9: usize/;"	field
arm_sp	$ZIGLIB/std/os/linux/arm-eabi.zig	/arm_sp: usize/;"	field
arm_sync_icache_args	$ZIGLIB/compiler_rt/clear_cache.zig	/^const arm_sync_icache_args = extern struct {$/;"	struct
armeb	$ZIGLIB/std/target.zig	/armeb/;"	field
aros	$ZIGLIB/std/time/epoch.zig	/^pub const aros = amiga/;"	constant
arr0	$ZIGLIB/compiler_rt/memcmp.zig	/const arr0 = &[_]u8{ 1, 1, 1 }/;"	constant
arr1	$ZIGLIB/compiler_rt/memcmp.zig	/const arr1 = &[_]u8{ 1, 1, 1 }/;"	constant
arr2	$ZIGLIB/compiler_rt/memcmp.zig	/const arr2 = &[_]u8{ 1, 0, 1 }/;"	constant
arr3	$ZIGLIB/compiler_rt/memcmp.zig	/const arr3 = &[_]u8{ 1, 2, 1 }/;"	constant
arr4	$ZIGLIB/compiler_rt/memcmp.zig	/const arr4 = &[_]u8{ 1, 0xff, 1 }/;"	constant
array	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/var array: [fields.len]Target.Abi = undefined/;"	variable
array1	$ZIGLIB/std/hash/auto_hash.zig	/const array1 = try std.testing.allocator.create([6]u32)/;"	constant
array2	$ZIGLIB/std/hash/auto_hash.zig	/const array2 = [_]u32{ 1, 2, 3, 4, 5, 6 }/;"	constant
arrayElem	$ZIGLIB/std/json/write_stream.zig	/pub fn arrayElem(self: *Self) !void {$/;"	function
arrayInit	$ZIGLIB/std/zig/Ast.zig	/^pub fn arrayInit(tree: Ast, node: Node.Index) full.ArrayInit {$/;"	function
arrayInitDot	$ZIGLIB/std/zig/Ast.zig	/^pub fn arrayInitDot(tree: Ast, node: Node.Index) full.ArrayInit {$/;"	function
arrayInitDotTwo	$ZIGLIB/std/zig/Ast.zig	/^pub fn arrayInitDotTwo(tree: Ast, buffer: *[2]Node.Index, node: Node.Index) full.ArrayInit {$/;"	function
arrayInitOne	$ZIGLIB/std/zig/Ast.zig	/^pub fn arrayInitOne(tree: Ast, buffer: *[1]Node.Index, node: Node.Index) full.ArrayInit {$/;"	function
arrayType	$ZIGLIB/std/zig/Ast.zig	/^pub fn arrayType(tree: Ast, node: Node.Index) full.ArrayType {$/;"	function
arrayTypeSentinel	$ZIGLIB/std/zig/Ast.zig	/^pub fn arrayTypeSentinel(tree: Ast, node: Node.Index) full.ArrayType {$/;"	function
array_access	$ZIGLIB/std/zig/Ast.zig	/array_access/;"	field
array_cat	$ZIGLIB/std/zig/Ast.zig	/array_cat/;"	field
array_expr	$ZIGLIB/std/zig/Parse.zig	/const array_expr = try p.expectExpr()/;"	constant
array_info	$ZIGLIB/std/zig/c_translation.zig	/const array_info = @typeInfo(ptr.child).Array/;"	constant
array_init	$ZIGLIB/std/zig/Ast.zig	/array_init/;"	field
array_init_comma	$ZIGLIB/std/zig/Ast.zig	/array_init_comma/;"	field
array_init_dot	$ZIGLIB/std/zig/Ast.zig	/array_init_dot/;"	field
array_init_dot_comma	$ZIGLIB/std/zig/Ast.zig	/array_init_dot_comma/;"	field
array_init_dot_two	$ZIGLIB/std/zig/Ast.zig	/array_init_dot_two/;"	field
array_init_dot_two_comma	$ZIGLIB/std/zig/Ast.zig	/array_init_dot_two_comma/;"	field
array_init_one	$ZIGLIB/std/zig/Ast.zig	/array_init_one/;"	field
array_init_one_comma	$ZIGLIB/std/zig/Ast.zig	/array_init_one_comma/;"	field
array_list	$ZIGLIB/std/io/reader.zig	/var array_list = std.ArrayList(u8).init(allocator)/;"	variable
array_mult	$ZIGLIB/std/zig/Ast.zig	/array_mult/;"	field
array_of_maps	$ZIGLIB/std/os/linux/bpf.zig	/array_of_maps/;"	field
array_size	$ZIGLIB/std/sort.zig	/const array_size = rng.intRangeLessThan(usize, 0, 1000)/;"	constant
array_type	$ZIGLIB/std/zig/Ast.zig	/array_type/;"	field
array_type_sentinel	$ZIGLIB/std/zig/Ast.zig	/array_type_sentinel/;"	field
arraylist	$ZIGLIB/std/json.zig	/var arraylist = std.ArrayList(ptrInfo.child).init(allocator)/;"	variable
arrow	$ZIGLIB/std/zig/tokenizer.zig	/arrow/;"	field
arrow_down	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/pub const arrow_down: u16 = 0x2593/;"	constant
arrow_token	$ZIGLIB/std/zig/Parse.zig	/const arrow_token = try p.expectToken(.equal_angle_bracket_right)/;"	constant
arrow_up	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/pub const arrow_up: u16 = 0x2591/;"	constant
arsh	$ZIGLIB/std/os/linux/bpf.zig	/pub fn arsh(dst: Reg, src: anytype) Insn {$/;"	function
artifact	$ZIGLIB/std/Build/RunStep.zig	/artifact: *CompileStep/;"	field
artifact_args	$ZIGLIB/std/Build/OptionsStep.zig	/^artifact_args: std.ArrayList(OptionArtifactArg)/;"	field
artificial	$ZIGLIB/std/dwarf/AT.zig	/^pub const artificial = 0x34/;"	constant
arx_steps	$ZIGLIB/std/crypto/scrypt.zig	/const arx_steps = comptime [_]QuarterRound{$/;"	constant
asBytes	$ZIGLIB/std/target.zig	/pub fn asBytes(set: *const Set) *const [byte_count]u8 {$/;"	function
asDebugInfo	$ZIGLIB/std/coff.zig	/fn asDebugInfo(raw: []const u8) DebugInfoDefinition {$/;"	function
asFileDef	$ZIGLIB/std/coff.zig	/fn asFileDef(raw: []const u8) FileDefinition {$/;"	function
asFuncDef	$ZIGLIB/std/coff.zig	/fn asFuncDef(raw: []const u8) FunctionDefinition {$/;"	function
asSectDef	$ZIGLIB/std/coff.zig	/fn asSectDef(raw: []const u8) SectionDefinition {$/;"	function
asSymbol	$ZIGLIB/std/coff.zig	/fn asSymbol(raw: []const u8) Symbol {$/;"	function
asText	$ZIGLIB/std/log.zig	/pub fn asText(comptime self: Level) []const u8 {$/;"	function
asUnsignedLe	$ZIGLIB/std/dwarf.zig	/fn asUnsignedLe(self: Constant) !u64 {$/;"	function
asWeakExtDef	$ZIGLIB/std/coff.zig	/fn asWeakExtDef(raw: []const u8) WeakExternalDefinition {$/;"	function
asWords	$ZIGLIB/std/crypto/xoodoo.zig	/fn asWords(self: *State) *[12]u32 {$/;"	function
as_bits	$ZIGLIB/std/fmt.zig	/const as_bits = @bitCast(TU, value)/;"	constant
ascByValue	$ZIGLIB/std/enums.zig	/^fn ascByValue(ctx: void, comptime a: EnumField, comptime b: EnumField) bool {$/;"	function
asc_i32	$ZIGLIB/std/sort.zig	/^const asc_i32 = asc(i32)/;"	constant
asc_u8	$ZIGLIB/std/sort.zig	/^const asc_u8 = asc(u8)/;"	constant
ascend_store_address	$ZIGLIB/std/target/aarch64.zig	/ascend_store_address/;"	field
ases	$ZIGLIB/std/elf.zig	/ases: Elf32_Word/;"	field
ashlXi3	$ZIGLIB/compiler_rt/shift.zig	/^inline fn ashlXi3(comptime T: type, a: T, b: i32) T {$/;"	function
ashrXi3	$ZIGLIB/compiler_rt/shift.zig	/^inline fn ashrXi3(comptime T: type, a: T, b: i32) T {$/;"	function
asin	$ZIGLIB/std/math/complex/asin.zig	/^pub fn asin(z: anytype) Complex(@TypeOf(z.re)) {$/;"	function
asin32	$ZIGLIB/std/math/asin.zig	/^fn asin32(x: f32) f32 {$/;"	function
asin64	$ZIGLIB/std/math/asin.zig	/^fn asin64(x: f64) f64 {$/;"	function
asinh	$ZIGLIB/std/math/complex/asinh.zig	/^pub fn asinh(z: anytype) Complex(@TypeOf(z.re)) {$/;"	function
asinh32	$ZIGLIB/std/math/asinh.zig	/^fn asinh32(x: f32) f32 {$/;"	function
asinh64	$ZIGLIB/std/math/asinh.zig	/^fn asinh64(x: f64) f64 {$/;"	function
ask_header	$ZIGLIB/std/tar.zig	/const ask_header = @min(buffer.len - end, 1024 -| (end - start))/;"	constant
ask_iovecs	$ZIGLIB/std/crypto/tls/Client.zig	/const ask_iovecs = limitVecs(&ask_iovecs_buf, ask_len)/;"	constant
ask_iovecs_buf	$ZIGLIB/std/crypto/tls/Client.zig	/var ask_iovecs_buf: [2]std.os.iovec = .{$/;"	variable
ask_len	$ZIGLIB/std/crypto/tls/Client.zig	/const ask_len = @max(wanted_read_len, cleartext_stack_buffer.len)/;"	constant
asmFull	$ZIGLIB/std/zig/Ast.zig	/^pub fn asmFull(tree: Ast, node: Node.Index) full.Asm {$/;"	function
asmSimple	$ZIGLIB/std/zig/Ast.zig	/^pub fn asmSimple(tree: Ast, node: Node.Index) full.Asm {$/;"	function
asm_indent_delta	$ZIGLIB/std/zig/render.zig	/^const asm_indent_delta = 2/;"	constant
asm_input	$ZIGLIB/std/zig/Ast.zig	/asm_input/;"	field
asm_output	$ZIGLIB/std/zig/Ast.zig	/asm_output/;"	field
asm_simple	$ZIGLIB/std/zig/Ast.zig	/asm_simple/;"	field
asm_token	$ZIGLIB/std/zig/Parse.zig	/const asm_token = p.assertToken(.keyword_asm)/;"	constant
assembly_file	$ZIGLIB/std/Build/CompileStep.zig	/assembly_file: FileSource/;"	field
assert	$ZIGLIB/std/debug.zig	/^pub fn assert(ok: bool) void {$/;"	function
assertToken	$ZIGLIB/std/zig/Parse.zig	/^fn assertToken(p: *Parse, tag: Token.Tag) TokenIndex {$/;"	function
assertTuple	$ZIGLIB/std/meta.zig	/fn assertTuple(comptime expected: anytype, comptime Actual: type) void {$/;"	function
assertTypeEqual	$ZIGLIB/std/meta.zig	/fn assertTypeEqual(comptime Expected: type, comptime Actual: type) void {$/;"	function
assign	$ZIGLIB/std/zig/Ast.zig	/assign/;"	field
assignEncodingAndSize	$ZIGLIB/std/compress/deflate/huffman_code.zig	/fn assignEncodingAndSize(self: *HuffmanEncoder, bit_count: []u32, list_arg: []LiteralNode) void {$/;"	function
assign_add	$ZIGLIB/std/zig/Ast.zig	/assign_add/;"	field
assign_add_sat	$ZIGLIB/std/zig/Ast.zig	/assign_add_sat/;"	field
assign_add_wrap	$ZIGLIB/std/zig/Ast.zig	/assign_add_wrap/;"	field
assign_bit_and	$ZIGLIB/std/zig/Ast.zig	/assign_bit_and/;"	field
assign_bit_or	$ZIGLIB/std/zig/Ast.zig	/assign_bit_or/;"	field
assign_bit_xor	$ZIGLIB/std/zig/Ast.zig	/assign_bit_xor/;"	field
assign_div	$ZIGLIB/std/zig/Ast.zig	/assign_div/;"	field
assign_expr	$ZIGLIB/std/zig/Parse.zig	/const assign_expr = try p.parseAssignExpr()/;"	constant
assign_mod	$ZIGLIB/std/zig/Ast.zig	/assign_mod/;"	field
assign_mul	$ZIGLIB/std/zig/Ast.zig	/assign_mul/;"	field
assign_mul_sat	$ZIGLIB/std/zig/Ast.zig	/assign_mul_sat/;"	field
assign_mul_wrap	$ZIGLIB/std/zig/Ast.zig	/assign_mul_wrap/;"	field
assign_shl	$ZIGLIB/std/zig/Ast.zig	/assign_shl/;"	field
assign_shl_sat	$ZIGLIB/std/zig/Ast.zig	/assign_shl_sat/;"	field
assign_shr	$ZIGLIB/std/zig/Ast.zig	/assign_shr/;"	field
assign_sub	$ZIGLIB/std/zig/Ast.zig	/assign_sub/;"	field
assign_sub_sat	$ZIGLIB/std/zig/Ast.zig	/assign_sub_sat/;"	field
assign_sub_wrap	$ZIGLIB/std/zig/Ast.zig	/assign_sub_wrap/;"	field
assoc	$ZIGLIB/std/zig/Parse.zig	/assoc: Assoc = Assoc.left/;"	field
associated	$ZIGLIB/std/dwarf/AT.zig	/^pub const associated = 0x4f/;"	constant
assumeSentinel	$ZIGLIB/std/meta.zig	/^pub const assumeSentinel = @compileError("This function has been removed, consider using std.mem.sliceTo() or if needed a @ptrCast()")/;"	constant
asterisk	$ZIGLIB/std/zig/tokenizer.zig	/asterisk/;"	field
asterisk_after_ptr_deref	$ZIGLIB/std/zig/Ast.zig	/asterisk_after_ptr_deref/;"	field
asterisk_asterisk	$ZIGLIB/std/zig/tokenizer.zig	/asterisk_asterisk/;"	field
asterisk_equal	$ZIGLIB/std/zig/tokenizer.zig	/asterisk_equal/;"	field
asterisk_percent	$ZIGLIB/std/zig/tokenizer.zig	/asterisk_percent/;"	field
asterisk_percent_equal	$ZIGLIB/std/zig/tokenizer.zig	/asterisk_percent_equal/;"	field
asterisk_pipe	$ZIGLIB/std/zig/tokenizer.zig	/asterisk_pipe/;"	field
asterisk_pipe_equal	$ZIGLIB/std/zig/tokenizer.zig	/asterisk_pipe_equal/;"	field
async_call	$ZIGLIB/std/zig/Ast.zig	/async_call/;"	field
async_call_comma	$ZIGLIB/std/zig/Ast.zig	/async_call_comma/;"	field
async_call_one	$ZIGLIB/std/zig/Ast.zig	/async_call_one/;"	field
async_call_one_comma	$ZIGLIB/std/zig/Ast.zig	/async_call_one_comma/;"	field
async_frame_size	$ZIGLIB/std/builtin.zig	/async_frame_size: ?usize/;"	field
async_kw	$ZIGLIB/std/builtin.zig	/async_kw/;"	field
async_ok	$ZIGLIB/std/event/batch.zig	/const async_ok = switch (async_behavior) {$/;"	constant
async_token	$ZIGLIB/std/zig/Ast.zig	/async_token: ?TokenIndex/;"	field
at43usb320	$ZIGLIB/std/target/avr.zig	/pub const at43usb320 = CpuModel{$/;"	constant
at43usb355	$ZIGLIB/std/target/avr.zig	/pub const at43usb355 = CpuModel{$/;"	constant
at697e	$ZIGLIB/std/target/sparc.zig	/pub const at697e = CpuModel{$/;"	constant
at697f	$ZIGLIB/std/target/sparc.zig	/pub const at697f = CpuModel{$/;"	constant
at76c711	$ZIGLIB/std/target/avr.zig	/pub const at76c711 = CpuModel{$/;"	constant
at86rf401	$ZIGLIB/std/target/avr.zig	/pub const at86rf401 = CpuModel{$/;"	constant
at90c8534	$ZIGLIB/std/target/avr.zig	/pub const at90c8534 = CpuModel{$/;"	constant
at90can128	$ZIGLIB/std/target/avr.zig	/pub const at90can128 = CpuModel{$/;"	constant
at90can32	$ZIGLIB/std/target/avr.zig	/pub const at90can32 = CpuModel{$/;"	constant
at90can64	$ZIGLIB/std/target/avr.zig	/pub const at90can64 = CpuModel{$/;"	constant
at90pwm1	$ZIGLIB/std/target/avr.zig	/pub const at90pwm1 = CpuModel{$/;"	constant
at90pwm161	$ZIGLIB/std/target/avr.zig	/pub const at90pwm161 = CpuModel{$/;"	constant
at90pwm2	$ZIGLIB/std/target/avr.zig	/pub const at90pwm2 = CpuModel{$/;"	constant
at90pwm216	$ZIGLIB/std/target/avr.zig	/pub const at90pwm216 = CpuModel{$/;"	constant
at90pwm2b	$ZIGLIB/std/target/avr.zig	/pub const at90pwm2b = CpuModel{$/;"	constant
at90pwm3	$ZIGLIB/std/target/avr.zig	/pub const at90pwm3 = CpuModel{$/;"	constant
at90pwm316	$ZIGLIB/std/target/avr.zig	/pub const at90pwm316 = CpuModel{$/;"	constant
at90pwm3b	$ZIGLIB/std/target/avr.zig	/pub const at90pwm3b = CpuModel{$/;"	constant
at90pwm81	$ZIGLIB/std/target/avr.zig	/pub const at90pwm81 = CpuModel{$/;"	constant
at90s1200	$ZIGLIB/std/target/avr.zig	/pub const at90s1200 = CpuModel{$/;"	constant
at90s2313	$ZIGLIB/std/target/avr.zig	/pub const at90s2313 = CpuModel{$/;"	constant
at90s2323	$ZIGLIB/std/target/avr.zig	/pub const at90s2323 = CpuModel{$/;"	constant
at90s2333	$ZIGLIB/std/target/avr.zig	/pub const at90s2333 = CpuModel{$/;"	constant
at90s2343	$ZIGLIB/std/target/avr.zig	/pub const at90s2343 = CpuModel{$/;"	constant
at90s4414	$ZIGLIB/std/target/avr.zig	/pub const at90s4414 = CpuModel{$/;"	constant
at90s4433	$ZIGLIB/std/target/avr.zig	/pub const at90s4433 = CpuModel{$/;"	constant
at90s4434	$ZIGLIB/std/target/avr.zig	/pub const at90s4434 = CpuModel{$/;"	constant
at90s8515	$ZIGLIB/std/target/avr.zig	/pub const at90s8515 = CpuModel{$/;"	constant
at90s8535	$ZIGLIB/std/target/avr.zig	/pub const at90s8535 = CpuModel{$/;"	constant
at90scr100	$ZIGLIB/std/target/avr.zig	/pub const at90scr100 = CpuModel{$/;"	constant
at90usb1286	$ZIGLIB/std/target/avr.zig	/pub const at90usb1286 = CpuModel{$/;"	constant
at90usb1287	$ZIGLIB/std/target/avr.zig	/pub const at90usb1287 = CpuModel{$/;"	constant
at90usb162	$ZIGLIB/std/target/avr.zig	/pub const at90usb162 = CpuModel{$/;"	constant
at90usb646	$ZIGLIB/std/target/avr.zig	/pub const at90usb646 = CpuModel{$/;"	constant
at90usb647	$ZIGLIB/std/target/avr.zig	/pub const at90usb647 = CpuModel{$/;"	constant
at90usb82	$ZIGLIB/std/target/avr.zig	/pub const at90usb82 = CpuModel{$/;"	constant
at94k	$ZIGLIB/std/target/avr.zig	/pub const at94k = CpuModel{$/;"	constant
atUnchecked	$ZIGLIB/std/fmt/parse_float/FloatStream.zig	/^pub fn atUnchecked(self: *FloatStream, i: usize) u8 {$/;"	function
at_hwcap	$ZIGLIB/std/start.zig	/var at_hwcap: usize = 0/;"	variable
at_phdr	$ZIGLIB/std/start.zig	/var at_phdr: usize = 0/;"	variable
at_phnum	$ZIGLIB/std/start.zig	/var at_phnum: usize = 0/;"	variable
ata5272	$ZIGLIB/std/target/avr.zig	/pub const ata5272 = CpuModel{$/;"	constant
ata5505	$ZIGLIB/std/target/avr.zig	/pub const ata5505 = CpuModel{$/;"	constant
ata5702m322	$ZIGLIB/std/target/avr.zig	/pub const ata5702m322 = CpuModel{$/;"	constant
ata5782	$ZIGLIB/std/target/avr.zig	/pub const ata5782 = CpuModel{$/;"	constant
ata5790	$ZIGLIB/std/target/avr.zig	/pub const ata5790 = CpuModel{$/;"	constant
ata5790n	$ZIGLIB/std/target/avr.zig	/pub const ata5790n = CpuModel{$/;"	constant
ata5791	$ZIGLIB/std/target/avr.zig	/pub const ata5791 = CpuModel{$/;"	constant
ata5795	$ZIGLIB/std/target/avr.zig	/pub const ata5795 = CpuModel{$/;"	constant
ata5831	$ZIGLIB/std/target/avr.zig	/pub const ata5831 = CpuModel{$/;"	constant
ata6285	$ZIGLIB/std/target/avr.zig	/pub const ata6285 = CpuModel{$/;"	constant
ata6286	$ZIGLIB/std/target/avr.zig	/pub const ata6286 = CpuModel{$/;"	constant
ata6289	$ZIGLIB/std/target/avr.zig	/pub const ata6289 = CpuModel{$/;"	constant
ata6612c	$ZIGLIB/std/target/avr.zig	/pub const ata6612c = CpuModel{$/;"	constant
ata6613c	$ZIGLIB/std/target/avr.zig	/pub const ata6613c = CpuModel{$/;"	constant
ata6614q	$ZIGLIB/std/target/avr.zig	/pub const ata6614q = CpuModel{$/;"	constant
ata6616c	$ZIGLIB/std/target/avr.zig	/pub const ata6616c = CpuModel{$/;"	constant
ata6617c	$ZIGLIB/std/target/avr.zig	/pub const ata6617c = CpuModel{$/;"	constant
ata664251	$ZIGLIB/std/target/avr.zig	/pub const ata664251 = CpuModel{$/;"	constant
ata8210	$ZIGLIB/std/target/avr.zig	/pub const ata8210 = CpuModel{$/;"	constant
ata8510	$ZIGLIB/std/target/avr.zig	/pub const ata8510 = CpuModel{$/;"	constant
atan	$ZIGLIB/std/math/complex/atan.zig	/^pub fn atan(z: anytype) @TypeOf(z) {$/;"	function
atan2	$ZIGLIB/std/math/atan2.zig	/^pub fn atan2(comptime T: type, y: T, x: T) T {$/;"	function
atan2_32	$ZIGLIB/std/math/atan2.zig	/^fn atan2_32(y: f32, x: f32) f32 {$/;"	function
atan2_64	$ZIGLIB/std/math/atan2.zig	/^fn atan2_64(y: f64, x: f64) f64 {$/;"	function
atan32	$ZIGLIB/std/math/complex/atan.zig	/^fn atan32(z: Complex(f32)) Complex(f32) {$/;"	function
atan64	$ZIGLIB/std/math/complex/atan.zig	/^fn atan64(z: Complex(f64)) Complex(f64) {$/;"	function
atanh	$ZIGLIB/std/math/complex/atanh.zig	/^pub fn atanh(z: anytype) Complex(@TypeOf(z.re)) {$/;"	function
atanh_32	$ZIGLIB/std/math/atanh.zig	/^fn atanh_32(x: f32) f32 {$/;"	function
atanh_64	$ZIGLIB/std/math/atanh.zig	/^fn atanh_64(x: f64) f64 {$/;"	function
atanhi	$ZIGLIB/std/math/atan.zig	/const atanhi = [_]f64{$/;"	constant
atanlo	$ZIGLIB/std/math/atan.zig	/const atanlo = [_]f64{$/;"	constant
atav	$ZIGLIB/std/crypto/Certificate.zig	/const atav = try der.Element.parse(cert_bytes, rdn_i)/;"	constant
atav_i	$ZIGLIB/std/crypto/Certificate.zig	/var atav_i = atav.slice.start/;"	variable
athlon	$ZIGLIB/std/target/x86.zig	/pub const athlon = CpuModel{$/;"	constant
athlon64	$ZIGLIB/std/target/x86.zig	/pub const athlon64 = CpuModel{$/;"	constant
athlon64_sse3	$ZIGLIB/std/target/x86.zig	/pub const athlon64_sse3 = CpuModel{$/;"	constant
athlon_4	$ZIGLIB/std/target/x86.zig	/pub const athlon_4 = CpuModel{$/;"	constant
athlon_fx	$ZIGLIB/std/target/x86.zig	/pub const athlon_fx = CpuModel{$/;"	constant
athlon_mp	$ZIGLIB/std/target/x86.zig	/pub const athlon_mp = CpuModel{$/;"	constant
athlon_tbird	$ZIGLIB/std/target/x86.zig	/pub const athlon_tbird = CpuModel{$/;"	constant
athlon_xp	$ZIGLIB/std/target/x86.zig	/pub const athlon_xp = CpuModel{$/;"	constant
atim	$ZIGLIB/std/os/wasi.zig	/atim: timestamp_t/;"	field
atime	$ZIGLIB/std/os/wasi.zig	/pub fn atime(self: filestat_t) timespec {$/;"	function
atime_ft	$ZIGLIB/std/fs/file.zig	/const atime_ft = windows.nanoSecondsToFileTime(atime)/;"	constant
atimespec	$ZIGLIB/std/c/darwin.zig	/atimespec: timespec/;"	field
atmega103	$ZIGLIB/std/target/avr.zig	/pub const atmega103 = CpuModel{$/;"	constant
atmega128	$ZIGLIB/std/target/avr.zig	/pub const atmega128 = CpuModel{$/;"	constant
atmega1280	$ZIGLIB/std/target/avr.zig	/pub const atmega1280 = CpuModel{$/;"	constant
atmega1281	$ZIGLIB/std/target/avr.zig	/pub const atmega1281 = CpuModel{$/;"	constant
atmega1284	$ZIGLIB/std/target/avr.zig	/pub const atmega1284 = CpuModel{$/;"	constant
atmega1284p	$ZIGLIB/std/target/avr.zig	/pub const atmega1284p = CpuModel{$/;"	constant
atmega1284rfr2	$ZIGLIB/std/target/avr.zig	/pub const atmega1284rfr2 = CpuModel{$/;"	constant
atmega128a	$ZIGLIB/std/target/avr.zig	/pub const atmega128a = CpuModel{$/;"	constant
atmega128rfa1	$ZIGLIB/std/target/avr.zig	/pub const atmega128rfa1 = CpuModel{$/;"	constant
atmega128rfr2	$ZIGLIB/std/target/avr.zig	/pub const atmega128rfr2 = CpuModel{$/;"	constant
atmega16	$ZIGLIB/std/target/avr.zig	/pub const atmega16 = CpuModel{$/;"	constant
atmega1608	$ZIGLIB/std/target/avr.zig	/pub const atmega1608 = CpuModel{$/;"	constant
atmega1609	$ZIGLIB/std/target/avr.zig	/pub const atmega1609 = CpuModel{$/;"	constant
atmega161	$ZIGLIB/std/target/avr.zig	/pub const atmega161 = CpuModel{$/;"	constant
atmega162	$ZIGLIB/std/target/avr.zig	/pub const atmega162 = CpuModel{$/;"	constant
atmega163	$ZIGLIB/std/target/avr.zig	/pub const atmega163 = CpuModel{$/;"	constant
atmega164a	$ZIGLIB/std/target/avr.zig	/pub const atmega164a = CpuModel{$/;"	constant
atmega164p	$ZIGLIB/std/target/avr.zig	/pub const atmega164p = CpuModel{$/;"	constant
atmega164pa	$ZIGLIB/std/target/avr.zig	/pub const atmega164pa = CpuModel{$/;"	constant
atmega165	$ZIGLIB/std/target/avr.zig	/pub const atmega165 = CpuModel{$/;"	constant
atmega165a	$ZIGLIB/std/target/avr.zig	/pub const atmega165a = CpuModel{$/;"	constant
atmega165p	$ZIGLIB/std/target/avr.zig	/pub const atmega165p = CpuModel{$/;"	constant
atmega165pa	$ZIGLIB/std/target/avr.zig	/pub const atmega165pa = CpuModel{$/;"	constant
atmega168	$ZIGLIB/std/target/avr.zig	/pub const atmega168 = CpuModel{$/;"	constant
atmega168a	$ZIGLIB/std/target/avr.zig	/pub const atmega168a = CpuModel{$/;"	constant
atmega168p	$ZIGLIB/std/target/avr.zig	/pub const atmega168p = CpuModel{$/;"	constant
atmega168pa	$ZIGLIB/std/target/avr.zig	/pub const atmega168pa = CpuModel{$/;"	constant
atmega168pb	$ZIGLIB/std/target/avr.zig	/pub const atmega168pb = CpuModel{$/;"	constant
atmega169	$ZIGLIB/std/target/avr.zig	/pub const atmega169 = CpuModel{$/;"	constant
atmega169a	$ZIGLIB/std/target/avr.zig	/pub const atmega169a = CpuModel{$/;"	constant
atmega169p	$ZIGLIB/std/target/avr.zig	/pub const atmega169p = CpuModel{$/;"	constant
atmega169pa	$ZIGLIB/std/target/avr.zig	/pub const atmega169pa = CpuModel{$/;"	constant
atmega16a	$ZIGLIB/std/target/avr.zig	/pub const atmega16a = CpuModel{$/;"	constant
atmega16hva	$ZIGLIB/std/target/avr.zig	/pub const atmega16hva = CpuModel{$/;"	constant
atmega16hva2	$ZIGLIB/std/target/avr.zig	/pub const atmega16hva2 = CpuModel{$/;"	constant
atmega16hvb	$ZIGLIB/std/target/avr.zig	/pub const atmega16hvb = CpuModel{$/;"	constant
atmega16hvbrevb	$ZIGLIB/std/target/avr.zig	/pub const atmega16hvbrevb = CpuModel{$/;"	constant
atmega16m1	$ZIGLIB/std/target/avr.zig	/pub const atmega16m1 = CpuModel{$/;"	constant
atmega16u2	$ZIGLIB/std/target/avr.zig	/pub const atmega16u2 = CpuModel{$/;"	constant
atmega16u4	$ZIGLIB/std/target/avr.zig	/pub const atmega16u4 = CpuModel{$/;"	constant
atmega2560	$ZIGLIB/std/target/avr.zig	/pub const atmega2560 = CpuModel{$/;"	constant
atmega2561	$ZIGLIB/std/target/avr.zig	/pub const atmega2561 = CpuModel{$/;"	constant
atmega2564rfr2	$ZIGLIB/std/target/avr.zig	/pub const atmega2564rfr2 = CpuModel{$/;"	constant
atmega256rfr2	$ZIGLIB/std/target/avr.zig	/pub const atmega256rfr2 = CpuModel{$/;"	constant
atmega32	$ZIGLIB/std/target/avr.zig	/pub const atmega32 = CpuModel{$/;"	constant
atmega3208	$ZIGLIB/std/target/avr.zig	/pub const atmega3208 = CpuModel{$/;"	constant
atmega3209	$ZIGLIB/std/target/avr.zig	/pub const atmega3209 = CpuModel{$/;"	constant
atmega323	$ZIGLIB/std/target/avr.zig	/pub const atmega323 = CpuModel{$/;"	constant
atmega324a	$ZIGLIB/std/target/avr.zig	/pub const atmega324a = CpuModel{$/;"	constant
atmega324p	$ZIGLIB/std/target/avr.zig	/pub const atmega324p = CpuModel{$/;"	constant
atmega324pa	$ZIGLIB/std/target/avr.zig	/pub const atmega324pa = CpuModel{$/;"	constant
atmega324pb	$ZIGLIB/std/target/avr.zig	/pub const atmega324pb = CpuModel{$/;"	constant
atmega325	$ZIGLIB/std/target/avr.zig	/pub const atmega325 = CpuModel{$/;"	constant
atmega3250	$ZIGLIB/std/target/avr.zig	/pub const atmega3250 = CpuModel{$/;"	constant
atmega3250a	$ZIGLIB/std/target/avr.zig	/pub const atmega3250a = CpuModel{$/;"	constant
atmega3250p	$ZIGLIB/std/target/avr.zig	/pub const atmega3250p = CpuModel{$/;"	constant
atmega3250pa	$ZIGLIB/std/target/avr.zig	/pub const atmega3250pa = CpuModel{$/;"	constant
atmega325a	$ZIGLIB/std/target/avr.zig	/pub const atmega325a = CpuModel{$/;"	constant
atmega325p	$ZIGLIB/std/target/avr.zig	/pub const atmega325p = CpuModel{$/;"	constant
atmega325pa	$ZIGLIB/std/target/avr.zig	/pub const atmega325pa = CpuModel{$/;"	constant
atmega328	$ZIGLIB/std/target/avr.zig	/pub const atmega328 = CpuModel{$/;"	constant
atmega328p	$ZIGLIB/std/target/avr.zig	/pub const atmega328p = CpuModel{$/;"	constant
atmega328pb	$ZIGLIB/std/target/avr.zig	/pub const atmega328pb = CpuModel{$/;"	constant
atmega329	$ZIGLIB/std/target/avr.zig	/pub const atmega329 = CpuModel{$/;"	constant
atmega3290	$ZIGLIB/std/target/avr.zig	/pub const atmega3290 = CpuModel{$/;"	constant
atmega3290a	$ZIGLIB/std/target/avr.zig	/pub const atmega3290a = CpuModel{$/;"	constant
atmega3290p	$ZIGLIB/std/target/avr.zig	/pub const atmega3290p = CpuModel{$/;"	constant
atmega3290pa	$ZIGLIB/std/target/avr.zig	/pub const atmega3290pa = CpuModel{$/;"	constant
atmega329a	$ZIGLIB/std/target/avr.zig	/pub const atmega329a = CpuModel{$/;"	constant
atmega329p	$ZIGLIB/std/target/avr.zig	/pub const atmega329p = CpuModel{$/;"	constant
atmega329pa	$ZIGLIB/std/target/avr.zig	/pub const atmega329pa = CpuModel{$/;"	constant
atmega32a	$ZIGLIB/std/target/avr.zig	/pub const atmega32a = CpuModel{$/;"	constant
atmega32c1	$ZIGLIB/std/target/avr.zig	/pub const atmega32c1 = CpuModel{$/;"	constant
atmega32hvb	$ZIGLIB/std/target/avr.zig	/pub const atmega32hvb = CpuModel{$/;"	constant
atmega32hvbrevb	$ZIGLIB/std/target/avr.zig	/pub const atmega32hvbrevb = CpuModel{$/;"	constant
atmega32m1	$ZIGLIB/std/target/avr.zig	/pub const atmega32m1 = CpuModel{$/;"	constant
atmega32u2	$ZIGLIB/std/target/avr.zig	/pub const atmega32u2 = CpuModel{$/;"	constant
atmega32u4	$ZIGLIB/std/target/avr.zig	/pub const atmega32u4 = CpuModel{$/;"	constant
atmega32u6	$ZIGLIB/std/target/avr.zig	/pub const atmega32u6 = CpuModel{$/;"	constant
atmega406	$ZIGLIB/std/target/avr.zig	/pub const atmega406 = CpuModel{$/;"	constant
atmega48	$ZIGLIB/std/target/avr.zig	/pub const atmega48 = CpuModel{$/;"	constant
atmega4808	$ZIGLIB/std/target/avr.zig	/pub const atmega4808 = CpuModel{$/;"	constant
atmega4809	$ZIGLIB/std/target/avr.zig	/pub const atmega4809 = CpuModel{$/;"	constant
atmega48a	$ZIGLIB/std/target/avr.zig	/pub const atmega48a = CpuModel{$/;"	constant
atmega48p	$ZIGLIB/std/target/avr.zig	/pub const atmega48p = CpuModel{$/;"	constant
atmega48pa	$ZIGLIB/std/target/avr.zig	/pub const atmega48pa = CpuModel{$/;"	constant
atmega48pb	$ZIGLIB/std/target/avr.zig	/pub const atmega48pb = CpuModel{$/;"	constant
atmega64	$ZIGLIB/std/target/avr.zig	/pub const atmega64 = CpuModel{$/;"	constant
atmega640	$ZIGLIB/std/target/avr.zig	/pub const atmega640 = CpuModel{$/;"	constant
atmega644	$ZIGLIB/std/target/avr.zig	/pub const atmega644 = CpuModel{$/;"	constant
atmega644a	$ZIGLIB/std/target/avr.zig	/pub const atmega644a = CpuModel{$/;"	constant
atmega644p	$ZIGLIB/std/target/avr.zig	/pub const atmega644p = CpuModel{$/;"	constant
atmega644pa	$ZIGLIB/std/target/avr.zig	/pub const atmega644pa = CpuModel{$/;"	constant
atmega644rfr2	$ZIGLIB/std/target/avr.zig	/pub const atmega644rfr2 = CpuModel{$/;"	constant
atmega645	$ZIGLIB/std/target/avr.zig	/pub const atmega645 = CpuModel{$/;"	constant
atmega6450	$ZIGLIB/std/target/avr.zig	/pub const atmega6450 = CpuModel{$/;"	constant
atmega6450a	$ZIGLIB/std/target/avr.zig	/pub const atmega6450a = CpuModel{$/;"	constant
atmega6450p	$ZIGLIB/std/target/avr.zig	/pub const atmega6450p = CpuModel{$/;"	constant
atmega645a	$ZIGLIB/std/target/avr.zig	/pub const atmega645a = CpuModel{$/;"	constant
atmega645p	$ZIGLIB/std/target/avr.zig	/pub const atmega645p = CpuModel{$/;"	constant
atmega649	$ZIGLIB/std/target/avr.zig	/pub const atmega649 = CpuModel{$/;"	constant
atmega6490	$ZIGLIB/std/target/avr.zig	/pub const atmega6490 = CpuModel{$/;"	constant
atmega6490a	$ZIGLIB/std/target/avr.zig	/pub const atmega6490a = CpuModel{$/;"	constant
atmega6490p	$ZIGLIB/std/target/avr.zig	/pub const atmega6490p = CpuModel{$/;"	constant
atmega649a	$ZIGLIB/std/target/avr.zig	/pub const atmega649a = CpuModel{$/;"	constant
atmega649p	$ZIGLIB/std/target/avr.zig	/pub const atmega649p = CpuModel{$/;"	constant
atmega64a	$ZIGLIB/std/target/avr.zig	/pub const atmega64a = CpuModel{$/;"	constant
atmega64c1	$ZIGLIB/std/target/avr.zig	/pub const atmega64c1 = CpuModel{$/;"	constant
atmega64hve	$ZIGLIB/std/target/avr.zig	/pub const atmega64hve = CpuModel{$/;"	constant
atmega64hve2	$ZIGLIB/std/target/avr.zig	/pub const atmega64hve2 = CpuModel{$/;"	constant
atmega64m1	$ZIGLIB/std/target/avr.zig	/pub const atmega64m1 = CpuModel{$/;"	constant
atmega64rfr2	$ZIGLIB/std/target/avr.zig	/pub const atmega64rfr2 = CpuModel{$/;"	constant
atmega8	$ZIGLIB/std/target/avr.zig	/pub const atmega8 = CpuModel{$/;"	constant
atmega808	$ZIGLIB/std/target/avr.zig	/pub const atmega808 = CpuModel{$/;"	constant
atmega809	$ZIGLIB/std/target/avr.zig	/pub const atmega809 = CpuModel{$/;"	constant
atmega8515	$ZIGLIB/std/target/avr.zig	/pub const atmega8515 = CpuModel{$/;"	constant
atmega8535	$ZIGLIB/std/target/avr.zig	/pub const atmega8535 = CpuModel{$/;"	constant
atmega88	$ZIGLIB/std/target/avr.zig	/pub const atmega88 = CpuModel{$/;"	constant
atmega88a	$ZIGLIB/std/target/avr.zig	/pub const atmega88a = CpuModel{$/;"	constant
atmega88p	$ZIGLIB/std/target/avr.zig	/pub const atmega88p = CpuModel{$/;"	constant
atmega88pa	$ZIGLIB/std/target/avr.zig	/pub const atmega88pa = CpuModel{$/;"	constant
atmega88pb	$ZIGLIB/std/target/avr.zig	/pub const atmega88pb = CpuModel{$/;"	constant
atmega8a	$ZIGLIB/std/target/avr.zig	/pub const atmega8a = CpuModel{$/;"	constant
atmega8hva	$ZIGLIB/std/target/avr.zig	/pub const atmega8hva = CpuModel{$/;"	constant
atmega8u2	$ZIGLIB/std/target/avr.zig	/pub const atmega8u2 = CpuModel{$/;"	constant
atom	$ZIGLIB/std/target/x86.zig	/pub const atom = CpuModel{$/;"	constant
atomicFile	$ZIGLIB/std/fs.zig	/pub fn atomicFile(self: Dir, dest_path: []const u8, options: AtomicFileOptions) !AtomicFile {$/;"	function
atomicIntTypes	$ZIGLIB/std/atomic/Atomic.zig	/^fn atomicIntTypes() []const type {$/;"	function
atomicSymLink	$ZIGLIB/std/fs.zig	/^pub fn atomicSymLink(allocator: Allocator, existing_path: []const u8, new_path: []const u8) !void {$/;"	function
atomic_cmpxchg_orderings	$ZIGLIB/std/atomic/Atomic.zig	/^const atomic_cmpxchg_orderings = [_][2]Ordering{$/;"	constant
atomic_compare_exchange_N	$ZIGLIB/compiler_rt/atomics.zig	/^inline fn atomic_compare_exchange_N($/;"	function
atomic_exchange_N	$ZIGLIB/compiler_rt/atomics.zig	/^inline fn atomic_exchange_N(comptime T: type, ptr: *T, val: T, model: i32) T {$/;"	function
atomic_fadd_no_rtn_insts	$ZIGLIB/std/target/amdgpu.zig	/atomic_fadd_no_rtn_insts/;"	field
atomic_fadd_rtn_insts	$ZIGLIB/std/target/amdgpu.zig	/atomic_fadd_rtn_insts/;"	field
atomic_file	$ZIGLIB/std/io/buffered_atomic_file.zig	/atomic_file: fs.AtomicFile/;"	field
atomic_load_N	$ZIGLIB/compiler_rt/atomics.zig	/^inline fn atomic_load_N(comptime T: type, src: *T, model: i32) T {$/;"	function
atomic_pk_fadd_no_rtn_insts	$ZIGLIB/std/target/amdgpu.zig	/atomic_pk_fadd_no_rtn_insts/;"	field
atomic_rmw_orderings	$ZIGLIB/std/atomic/Atomic.zig	/^const atomic_rmw_orderings = [_]Ordering{$/;"	constant
atomic_store_N	$ZIGLIB/compiler_rt/atomics.zig	/^inline fn atomic_store_N(comptime T: type, dst: *T, value: T, model: i32) void {$/;"	function
atomic_type	$ZIGLIB/std/dwarf/TAG.zig	/^pub const atomic_type = 0x47/;"	constant
atomics	$ZIGLIB/std/target/wasm.zig	/atomics/;"	field
atomics_32	$ZIGLIB/std/target/arm.zig	/atomics_32/;"	field
atsc	$ZIGLIB/std/time/epoch.zig	/^pub const atsc = gps/;"	constant
attachSegfaultHandler	$ZIGLIB/std/debug.zig	/^pub fn attachSegfaultHandler() void {$/;"	function
attach_bpf_fd	$ZIGLIB/std/os/linux/bpf.zig	/attach_bpf_fd: fd_t/;"	field
attach_flags	$ZIGLIB/std/os/linux/bpf.zig	/attach_flags: u32/;"	field
attach_prog_id	$ZIGLIB/std/os/linux/bpf.zig	/attach_prog_id: u32/;"	field
attach_type	$ZIGLIB/std/os/linux/bpf.zig	/attach_type: u32/;"	field
attact_btf_id	$ZIGLIB/std/os/linux/bpf.zig	/attact_btf_id: u32/;"	field
attempts	$ZIGLIB/std/net.zig	/attempts: u32/;"	field
attiny10	$ZIGLIB/std/target/avr.zig	/pub const attiny10 = CpuModel{$/;"	constant
attiny102	$ZIGLIB/std/target/avr.zig	/pub const attiny102 = CpuModel{$/;"	constant
attiny104	$ZIGLIB/std/target/avr.zig	/pub const attiny104 = CpuModel{$/;"	constant
attiny11	$ZIGLIB/std/target/avr.zig	/pub const attiny11 = CpuModel{$/;"	constant
attiny12	$ZIGLIB/std/target/avr.zig	/pub const attiny12 = CpuModel{$/;"	constant
attiny13	$ZIGLIB/std/target/avr.zig	/pub const attiny13 = CpuModel{$/;"	constant
attiny13a	$ZIGLIB/std/target/avr.zig	/pub const attiny13a = CpuModel{$/;"	constant
attiny15	$ZIGLIB/std/target/avr.zig	/pub const attiny15 = CpuModel{$/;"	constant
attiny1604	$ZIGLIB/std/target/avr.zig	/pub const attiny1604 = CpuModel{$/;"	constant
attiny1606	$ZIGLIB/std/target/avr.zig	/pub const attiny1606 = CpuModel{$/;"	constant
attiny1607	$ZIGLIB/std/target/avr.zig	/pub const attiny1607 = CpuModel{$/;"	constant
attiny1614	$ZIGLIB/std/target/avr.zig	/pub const attiny1614 = CpuModel{$/;"	constant
attiny1616	$ZIGLIB/std/target/avr.zig	/pub const attiny1616 = CpuModel{$/;"	constant
attiny1617	$ZIGLIB/std/target/avr.zig	/pub const attiny1617 = CpuModel{$/;"	constant
attiny1624	$ZIGLIB/std/target/avr.zig	/pub const attiny1624 = CpuModel{$/;"	constant
attiny1626	$ZIGLIB/std/target/avr.zig	/pub const attiny1626 = CpuModel{$/;"	constant
attiny1627	$ZIGLIB/std/target/avr.zig	/pub const attiny1627 = CpuModel{$/;"	constant
attiny1634	$ZIGLIB/std/target/avr.zig	/pub const attiny1634 = CpuModel{$/;"	constant
attiny167	$ZIGLIB/std/target/avr.zig	/pub const attiny167 = CpuModel{$/;"	constant
attiny20	$ZIGLIB/std/target/avr.zig	/pub const attiny20 = CpuModel{$/;"	constant
attiny202	$ZIGLIB/std/target/avr.zig	/pub const attiny202 = CpuModel{$/;"	constant
attiny204	$ZIGLIB/std/target/avr.zig	/pub const attiny204 = CpuModel{$/;"	constant
attiny212	$ZIGLIB/std/target/avr.zig	/pub const attiny212 = CpuModel{$/;"	constant
attiny214	$ZIGLIB/std/target/avr.zig	/pub const attiny214 = CpuModel{$/;"	constant
attiny22	$ZIGLIB/std/target/avr.zig	/pub const attiny22 = CpuModel{$/;"	constant
attiny2313	$ZIGLIB/std/target/avr.zig	/pub const attiny2313 = CpuModel{$/;"	constant
attiny2313a	$ZIGLIB/std/target/avr.zig	/pub const attiny2313a = CpuModel{$/;"	constant
attiny24	$ZIGLIB/std/target/avr.zig	/pub const attiny24 = CpuModel{$/;"	constant
attiny24a	$ZIGLIB/std/target/avr.zig	/pub const attiny24a = CpuModel{$/;"	constant
attiny25	$ZIGLIB/std/target/avr.zig	/pub const attiny25 = CpuModel{$/;"	constant
attiny26	$ZIGLIB/std/target/avr.zig	/pub const attiny26 = CpuModel{$/;"	constant
attiny261	$ZIGLIB/std/target/avr.zig	/pub const attiny261 = CpuModel{$/;"	constant
attiny261a	$ZIGLIB/std/target/avr.zig	/pub const attiny261a = CpuModel{$/;"	constant
attiny28	$ZIGLIB/std/target/avr.zig	/pub const attiny28 = CpuModel{$/;"	constant
attiny3216	$ZIGLIB/std/target/avr.zig	/pub const attiny3216 = CpuModel{$/;"	constant
attiny3217	$ZIGLIB/std/target/avr.zig	/pub const attiny3217 = CpuModel{$/;"	constant
attiny4	$ZIGLIB/std/target/avr.zig	/pub const attiny4 = CpuModel{$/;"	constant
attiny40	$ZIGLIB/std/target/avr.zig	/pub const attiny40 = CpuModel{$/;"	constant
attiny402	$ZIGLIB/std/target/avr.zig	/pub const attiny402 = CpuModel{$/;"	constant
attiny404	$ZIGLIB/std/target/avr.zig	/pub const attiny404 = CpuModel{$/;"	constant
attiny406	$ZIGLIB/std/target/avr.zig	/pub const attiny406 = CpuModel{$/;"	constant
attiny412	$ZIGLIB/std/target/avr.zig	/pub const attiny412 = CpuModel{$/;"	constant
attiny414	$ZIGLIB/std/target/avr.zig	/pub const attiny414 = CpuModel{$/;"	constant
attiny416	$ZIGLIB/std/target/avr.zig	/pub const attiny416 = CpuModel{$/;"	constant
attiny417	$ZIGLIB/std/target/avr.zig	/pub const attiny417 = CpuModel{$/;"	constant
attiny4313	$ZIGLIB/std/target/avr.zig	/pub const attiny4313 = CpuModel{$/;"	constant
attiny43u	$ZIGLIB/std/target/avr.zig	/pub const attiny43u = CpuModel{$/;"	constant
attiny44	$ZIGLIB/std/target/avr.zig	/pub const attiny44 = CpuModel{$/;"	constant
attiny441	$ZIGLIB/std/target/avr.zig	/pub const attiny441 = CpuModel{$/;"	constant
attiny44a	$ZIGLIB/std/target/avr.zig	/pub const attiny44a = CpuModel{$/;"	constant
attiny45	$ZIGLIB/std/target/avr.zig	/pub const attiny45 = CpuModel{$/;"	constant
attiny461	$ZIGLIB/std/target/avr.zig	/pub const attiny461 = CpuModel{$/;"	constant
attiny461a	$ZIGLIB/std/target/avr.zig	/pub const attiny461a = CpuModel{$/;"	constant
attiny48	$ZIGLIB/std/target/avr.zig	/pub const attiny48 = CpuModel{$/;"	constant
attiny5	$ZIGLIB/std/target/avr.zig	/pub const attiny5 = CpuModel{$/;"	constant
attiny804	$ZIGLIB/std/target/avr.zig	/pub const attiny804 = CpuModel{$/;"	constant
attiny806	$ZIGLIB/std/target/avr.zig	/pub const attiny806 = CpuModel{$/;"	constant
attiny807	$ZIGLIB/std/target/avr.zig	/pub const attiny807 = CpuModel{$/;"	constant
attiny814	$ZIGLIB/std/target/avr.zig	/pub const attiny814 = CpuModel{$/;"	constant
attiny816	$ZIGLIB/std/target/avr.zig	/pub const attiny816 = CpuModel{$/;"	constant
attiny817	$ZIGLIB/std/target/avr.zig	/pub const attiny817 = CpuModel{$/;"	constant
attiny828	$ZIGLIB/std/target/avr.zig	/pub const attiny828 = CpuModel{$/;"	constant
attiny84	$ZIGLIB/std/target/avr.zig	/pub const attiny84 = CpuModel{$/;"	constant
attiny841	$ZIGLIB/std/target/avr.zig	/pub const attiny841 = CpuModel{$/;"	constant
attiny84a	$ZIGLIB/std/target/avr.zig	/pub const attiny84a = CpuModel{$/;"	constant
attiny85	$ZIGLIB/std/target/avr.zig	/pub const attiny85 = CpuModel{$/;"	constant
attiny861	$ZIGLIB/std/target/avr.zig	/pub const attiny861 = CpuModel{$/;"	constant
attiny861a	$ZIGLIB/std/target/avr.zig	/pub const attiny861a = CpuModel{$/;"	constant
attiny87	$ZIGLIB/std/target/avr.zig	/pub const attiny87 = CpuModel{$/;"	constant
attiny88	$ZIGLIB/std/target/avr.zig	/pub const attiny88 = CpuModel{$/;"	constant
attiny9	$ZIGLIB/std/target/avr.zig	/pub const attiny9 = CpuModel{$/;"	constant
attr	$ZIGLIB/std/os/windows.zig	/var attr = OBJECT_ATTRIBUTES{$/;"	variable
attr_id	$ZIGLIB/std/dwarf.zig	/const attr_id = try leb.readULEB128(u64, in)/;"	constant
attribute	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/attribute: MemoryDescriptorAttribute/;"	field
attributes	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/attributes: OpenProtocolAttributes/;"	field
attributes_mask	$ZIGLIB/std/os/linux.zig	/attributes_mask: u64/;"	field
attrs	$ZIGLIB/std/macho.zig	/pub fn attrs(sect: section_64) u32 {$/;"	function
atxmega128a1	$ZIGLIB/std/target/avr.zig	/pub const atxmega128a1 = CpuModel{$/;"	constant
atxmega128a1u	$ZIGLIB/std/target/avr.zig	/pub const atxmega128a1u = CpuModel{$/;"	constant
atxmega128a3	$ZIGLIB/std/target/avr.zig	/pub const atxmega128a3 = CpuModel{$/;"	constant
atxmega128a3u	$ZIGLIB/std/target/avr.zig	/pub const atxmega128a3u = CpuModel{$/;"	constant
atxmega128a4u	$ZIGLIB/std/target/avr.zig	/pub const atxmega128a4u = CpuModel{$/;"	constant
atxmega128b1	$ZIGLIB/std/target/avr.zig	/pub const atxmega128b1 = CpuModel{$/;"	constant
atxmega128b3	$ZIGLIB/std/target/avr.zig	/pub const atxmega128b3 = CpuModel{$/;"	constant
atxmega128c3	$ZIGLIB/std/target/avr.zig	/pub const atxmega128c3 = CpuModel{$/;"	constant
atxmega128d3	$ZIGLIB/std/target/avr.zig	/pub const atxmega128d3 = CpuModel{$/;"	constant
atxmega128d4	$ZIGLIB/std/target/avr.zig	/pub const atxmega128d4 = CpuModel{$/;"	constant
atxmega16a4	$ZIGLIB/std/target/avr.zig	/pub const atxmega16a4 = CpuModel{$/;"	constant
atxmega16a4u	$ZIGLIB/std/target/avr.zig	/pub const atxmega16a4u = CpuModel{$/;"	constant
atxmega16c4	$ZIGLIB/std/target/avr.zig	/pub const atxmega16c4 = CpuModel{$/;"	constant
atxmega16d4	$ZIGLIB/std/target/avr.zig	/pub const atxmega16d4 = CpuModel{$/;"	constant
atxmega16e5	$ZIGLIB/std/target/avr.zig	/pub const atxmega16e5 = CpuModel{$/;"	constant
atxmega192a3	$ZIGLIB/std/target/avr.zig	/pub const atxmega192a3 = CpuModel{$/;"	constant
atxmega192a3u	$ZIGLIB/std/target/avr.zig	/pub const atxmega192a3u = CpuModel{$/;"	constant
atxmega192c3	$ZIGLIB/std/target/avr.zig	/pub const atxmega192c3 = CpuModel{$/;"	constant
atxmega192d3	$ZIGLIB/std/target/avr.zig	/pub const atxmega192d3 = CpuModel{$/;"	constant
atxmega256a3	$ZIGLIB/std/target/avr.zig	/pub const atxmega256a3 = CpuModel{$/;"	constant
atxmega256a3b	$ZIGLIB/std/target/avr.zig	/pub const atxmega256a3b = CpuModel{$/;"	constant
atxmega256a3bu	$ZIGLIB/std/target/avr.zig	/pub const atxmega256a3bu = CpuModel{$/;"	constant
atxmega256a3u	$ZIGLIB/std/target/avr.zig	/pub const atxmega256a3u = CpuModel{$/;"	constant
atxmega256c3	$ZIGLIB/std/target/avr.zig	/pub const atxmega256c3 = CpuModel{$/;"	constant
atxmega256d3	$ZIGLIB/std/target/avr.zig	/pub const atxmega256d3 = CpuModel{$/;"	constant
atxmega32a4	$ZIGLIB/std/target/avr.zig	/pub const atxmega32a4 = CpuModel{$/;"	constant
atxmega32a4u	$ZIGLIB/std/target/avr.zig	/pub const atxmega32a4u = CpuModel{$/;"	constant
atxmega32c3	$ZIGLIB/std/target/avr.zig	/pub const atxmega32c3 = CpuModel{$/;"	constant
atxmega32c4	$ZIGLIB/std/target/avr.zig	/pub const atxmega32c4 = CpuModel{$/;"	constant
atxmega32d3	$ZIGLIB/std/target/avr.zig	/pub const atxmega32d3 = CpuModel{$/;"	constant
atxmega32d4	$ZIGLIB/std/target/avr.zig	/pub const atxmega32d4 = CpuModel{$/;"	constant
atxmega32e5	$ZIGLIB/std/target/avr.zig	/pub const atxmega32e5 = CpuModel{$/;"	constant
atxmega384c3	$ZIGLIB/std/target/avr.zig	/pub const atxmega384c3 = CpuModel{$/;"	constant
atxmega384d3	$ZIGLIB/std/target/avr.zig	/pub const atxmega384d3 = CpuModel{$/;"	constant
atxmega64a1	$ZIGLIB/std/target/avr.zig	/pub const atxmega64a1 = CpuModel{$/;"	constant
atxmega64a1u	$ZIGLIB/std/target/avr.zig	/pub const atxmega64a1u = CpuModel{$/;"	constant
atxmega64a3	$ZIGLIB/std/target/avr.zig	/pub const atxmega64a3 = CpuModel{$/;"	constant
atxmega64a3u	$ZIGLIB/std/target/avr.zig	/pub const atxmega64a3u = CpuModel{$/;"	constant
atxmega64a4u	$ZIGLIB/std/target/avr.zig	/pub const atxmega64a4u = CpuModel{$/;"	constant
atxmega64b1	$ZIGLIB/std/target/avr.zig	/pub const atxmega64b1 = CpuModel{$/;"	constant
atxmega64b3	$ZIGLIB/std/target/avr.zig	/pub const atxmega64b3 = CpuModel{$/;"	constant
atxmega64c3	$ZIGLIB/std/target/avr.zig	/pub const atxmega64c3 = CpuModel{$/;"	constant
atxmega64d3	$ZIGLIB/std/target/avr.zig	/pub const atxmega64d3 = CpuModel{$/;"	constant
atxmega64d4	$ZIGLIB/std/target/avr.zig	/pub const atxmega64d4 = CpuModel{$/;"	constant
atxmega8e5	$ZIGLIB/std/target/avr.zig	/pub const atxmega8e5 = CpuModel{$/;"	constant
audio	$ZIGLIB/std/target/hexagon.zig	/audio/;"	field
auth	$ZIGLIB/std/crypto.zig	/^pub const auth = struct {$/;"	struct
auth_item_t	$ZIGLIB/std/c/openbsd.zig	/^pub const auth_item_t = c_int/;"	constant
auth_offset	$ZIGLIB/std/crypto/Certificate/Bundle/macos.zig	/auth_offset: u32/;"	field
auth_tag	$ZIGLIB/std/crypto/tls/Client.zig	/const auth_tag = record_decoder.array(P.AEAD.tag_length).*/;"	constant
authority	$ZIGLIB/std/Uri.zig	/const authority = reader.readUntil(isAuthoritySeparator)/;"	constant
authority_key_identifier	$ZIGLIB/std/crypto/Certificate.zig	/authority_key_identifier/;"	field
auto	$ZIGLIB/std/builtin.zig	/auto/;"	field
autoEqlIsCheap	$ZIGLIB/std/array_hash_map.zig	/^pub fn autoEqlIsCheap(comptime K: type) bool {$/;"	function
autoHash	$ZIGLIB/std/hash/auto_hash.zig	/^pub fn autoHash(hasher: anytype, key: anytype) void {$/;"	function
autoHashStrat	$ZIGLIB/std/hash.zig	/^pub const autoHashStrat = auto_hash.hash/;"	constant
auto_async	$ZIGLIB/std/event/batch.zig	/auto_async/;"	field
auto_indenting_stream	$ZIGLIB/std/zig/render.zig	/var auto_indenting_stream = Ais{$/;"	variable
auto_waitcnt_before_barrier	$ZIGLIB/std/target/amdgpu.zig	/auto_waitcnt_before_barrier/;"	field
autoalign	$ZIGLIB/std/fifo.zig	/const autoalign = false/;"	constant
autoconf	$ZIGLIB/std/Build/ConfigHeaderStep.zig	/autoconf: std.Build.FileSource/;"	field
aux_watermark	$ZIGLIB/std/os/linux.zig	/aux_watermark: u32 = 0/;"	field
auxv	$ZIGLIB/std/start.zig	/const auxv = @ptrCast([*]elf.Auxv, @alignCast(@alignOf(usize), envp.ptr + envp_count + 1))/;"	constant
auxv_size	$ZIGLIB/std/os/linux.zig	/auxv_size: u32/;"	field
availRead	$ZIGLIB/std/compress/deflate/dict_decoder.zig	/pub fn availRead(self: *Self) u32 {$/;"	function
availWrite	$ZIGLIB/std/compress/deflate/dict_decoder.zig	/pub fn availWrite(self: *Self) u32 {$/;"	function
available	$ZIGLIB/std/hash_map.zig	/available: Size = 0/;"	field
available_eventfd_resume_nodes	$ZIGLIB/std/event/loop.zig	/available_eventfd_resume_nodes: std.atomic.Stack(ResumeNode.EventFd)/;"	field
available_len	$ZIGLIB/std/math/big/int.zig	/const available_len = (limbs.len \/ 3) - 2/;"	constant
available_option	$ZIGLIB/std/Build.zig	/const available_option = AvailableOption{$/;"	constant
available_options_list	$ZIGLIB/std/Build.zig	/^available_options_list: ArrayList(AvailableOption)/;"	field
available_options_map	$ZIGLIB/std/Build.zig	/^available_options_map: AvailableOptionsMap/;"	field
avoid_movs_shop	$ZIGLIB/std/target/arm.zig	/avoid_movs_shop/;"	field
avoid_partial_cpsr	$ZIGLIB/std/target/arm.zig	/avoid_partial_cpsr/;"	field
avr0	$ZIGLIB/std/target/avr.zig	/avr0/;"	field
avr1	$ZIGLIB/std/target/avr.zig	/pub const avr1 = CpuModel{$/;"	constant
avr2	$ZIGLIB/std/target/avr.zig	/pub const avr2 = CpuModel{$/;"	constant
avr25	$ZIGLIB/std/target/avr.zig	/pub const avr25 = CpuModel{$/;"	constant
avr3	$ZIGLIB/std/target/avr.zig	/pub const avr3 = CpuModel{$/;"	constant
avr31	$ZIGLIB/std/target/avr.zig	/pub const avr31 = CpuModel{$/;"	constant
avr35	$ZIGLIB/std/target/avr.zig	/pub const avr35 = CpuModel{$/;"	constant
avr4	$ZIGLIB/std/target/avr.zig	/pub const avr4 = CpuModel{$/;"	constant
avr5	$ZIGLIB/std/target/avr.zig	/pub const avr5 = CpuModel{$/;"	constant
avr51	$ZIGLIB/std/target/avr.zig	/pub const avr51 = CpuModel{$/;"	constant
avr6	$ZIGLIB/std/target/avr.zig	/pub const avr6 = CpuModel{$/;"	constant
avrtiny	$ZIGLIB/std/target/avr.zig	/pub const avrtiny = CpuModel{$/;"	constant
avrxmega1	$ZIGLIB/std/target/avr.zig	/pub const avrxmega1 = CpuModel{$/;"	constant
avrxmega2	$ZIGLIB/std/target/avr.zig	/pub const avrxmega2 = CpuModel{$/;"	constant
avrxmega3	$ZIGLIB/std/target/avr.zig	/pub const avrxmega3 = CpuModel{$/;"	constant
avrxmega4	$ZIGLIB/std/target/avr.zig	/pub const avrxmega4 = CpuModel{$/;"	constant
avrxmega5	$ZIGLIB/std/target/avr.zig	/pub const avrxmega5 = CpuModel{$/;"	constant
avrxmega6	$ZIGLIB/std/target/avr.zig	/pub const avrxmega6 = CpuModel{$/;"	constant
avrxmega7	$ZIGLIB/std/target/avr.zig	/pub const avrxmega7 = CpuModel{$/;"	constant
avx2	$ZIGLIB/std/target/x86.zig	/avx2/;"	field
avx512bf16	$ZIGLIB/std/target/x86.zig	/avx512bf16/;"	field
avx512bitalg	$ZIGLIB/std/target/x86.zig	/avx512bitalg/;"	field
avx512bw	$ZIGLIB/std/target/x86.zig	/avx512bw/;"	field
avx512cd	$ZIGLIB/std/target/x86.zig	/avx512cd/;"	field
avx512dq	$ZIGLIB/std/target/x86.zig	/avx512dq/;"	field
avx512er	$ZIGLIB/std/target/x86.zig	/avx512er/;"	field
avx512f	$ZIGLIB/std/target/x86.zig	/avx512f/;"	field
avx512fp16	$ZIGLIB/std/target/x86.zig	/avx512fp16/;"	field
avx512ifma	$ZIGLIB/std/target/x86.zig	/avx512ifma/;"	field
avx512pf	$ZIGLIB/std/target/x86.zig	/avx512pf/;"	field
avx512vbmi	$ZIGLIB/std/target/x86.zig	/avx512vbmi/;"	field
avx512vbmi2	$ZIGLIB/std/target/x86.zig	/avx512vbmi2/;"	field
avx512vl	$ZIGLIB/std/target/x86.zig	/avx512vl/;"	field
avx512vnni	$ZIGLIB/std/target/x86.zig	/avx512vnni/;"	field
avx512vp2intersect	$ZIGLIB/std/target/x86.zig	/avx512vp2intersect/;"	field
avx512vpopcntdq	$ZIGLIB/std/target/x86.zig	/avx512vpopcntdq/;"	field
avxvnni	$ZIGLIB/std/target/x86.zig	/avxvnni/;"	field
await	$ZIGLIB/std/zig/Ast.zig	/@"await"/;"	field
b1_neg_s	$ZIGLIB/std/crypto/pcurves/secp256k1.zig	/const b1_neg_s = comptime s: {$/;"	constant
b2_neg_s	$ZIGLIB/std/crypto/pcurves/secp256k1.zig	/const b2_neg_s = comptime s: {$/;"	constant
bAbs	$ZIGLIB/compiler_rt/mulf3.zig	/const bAbs: Z = @bitCast(Z, b) & absMask/;"	constant
bExponent	$ZIGLIB/compiler_rt/mulf3.zig	/const bExponent = @truncate(ZExp, (@bitCast(Z, b) >> significandBits) & maxExponent)/;"	constant
bInheritHandle	.heritHandle: BOOL/;"	field
bInt	$ZIGLIB/compiler_rt/comparef.zig	/const bInt = @bitCast(srep_t, b)/;"	constant
bPtr_u16	$ZIGLIB/compiler_rt/fmod.zig	/const bPtr_u16 = @ptrCast([*]u16, &bmod)/;"	constant
bPtr_u64	$ZIGLIB/compiler_rt/fmod.zig	/const bPtr_u64 = @ptrCast([*]u64, &bmod)/;"	constant
bRep	$ZIGLIB/compiler_rt/fmod.zig	/var bRep = @bitCast(Z, b)/;"	variable
bReserved	$ZIGLIB/std/os/windows/gdi32.zig	/bReserved: BYTE/;"	field
bSignificand	$ZIGLIB/compiler_rt/mulf3.zig	/var bSignificand: ZSignificand = @intCast(ZSignificand, @bitCast(Z, b) & significandMask)/;"	variable
b_borrow	$ZIGLIB/std/math/big/int.zig	/var b_borrow: u1 = 1/;"	variable
b_bytes	$ZIGLIB/std/os/windows.zig	/const b_bytes = @intCast(u16, b.len * 2)/;"	constant
b_casted	$ZIGLIB/std/zig/c_translation.zig	/const b_casted = cast(ResType, b)/;"	constant
b_copy	$ZIGLIB/std/math/big/int.zig	/const b_copy = if (rma.limbs.ptr == b.limbs.ptr) blk: {$/;"	constant
b_expected	$ZIGLIB/std/zig/system/darwin/macos.zig	/var b_expected: [64]u8 = undefined/;"	variable
b_fraction	$ZIGLIB/compiler_rt/comparef.zig	/const b_fraction = b_rep.fraction | (@as(u80, b_rep.exp) << sig_bits)/;"	constant
b_got	$ZIGLIB/std/zig/system/darwin/macos.zig	/var b_got: [64]u8 = undefined/;"	variable
b_index	$ZIGLIB/std/zig/c_translation.zig	/const b_index = positive_index - source_vector_len/;"	constant
b_indices	$ZIGLIB/std/simd.zig	/const b_indices = shiftElementsRight(count_up - cycle * @splat(len, @intCast(i32, a_vec_count)), a_vec_count, 0)/;"	constant
b_leading_zeros	$ZIGLIB/std/math/big/int.zig	/const b_leading_zeros = @clz(b)/;"	constant
b_len	$ZIGLIB/std/simd.zig	/const b_len = vectorLength(@TypeOf(b))/;"	constant
b_limbs	$ZIGLIB/std/math/big/int.zig	/const b_limbs = b.limbs[0..math.min(req_limbs, b.limbs.len)]/;"	constant
b_rep	$ZIGLIB/compiler_rt/subxf3.zig	/var b_rep = std.math.break_f80(b)/;"	variable
b_signed	$ZIGLIB/std/zig/c_translation.zig	/const b_signed = @typeInfo(B_Promoted).Int.signedness == .signed/;"	constant
b_slice	$ZIGLIB/std/hash_map.zig	/const b_slice = mem.sliceTo(@ptrCast([*:0]const u8, self.bytes.items.ptr) + b, 0)/;"	constant
b_string	$ZIGLIB/std/os/windows.zig	/const b_string = UNICODE_STRING{$/;"	constant
b_type	$ZIGLIB/std/meta.zig	/var b_type: EnumType = .b/;"	variable
b_vec_count	$ZIGLIB/std/simd.zig	/const b_vec_count = vecs_arr.len >> 1/;"	constant
background_black	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/pub const background_black: u8 = 0x00/;"	constant
background_blue	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/pub const background_blue: u8 = 0x10/;"	constant
background_brown	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/pub const background_brown: u8 = 0x60/;"	constant
background_cyan	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/pub const background_cyan: u8 = 0x30/;"	constant
background_green	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/pub const background_green: u8 = 0x20/;"	constant
background_lightgray	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/pub const background_lightgray: u8 = 0x70/;"	constant
background_magenta	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/pub const background_magenta: u8 = 0x50/;"	constant
background_red	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/pub const background_red: u8 = 0x40/;"	constant
backing_allocator	$ZIGLIB/std/heap/general_purpose_allocator.zig	/backing_allocator: Allocator = std.heap.page_allocator/;"	field
backing_gpa	$ZIGLIB/std/heap/general_purpose_allocator.zig	/var backing_gpa = GeneralPurposeAllocator(.{ .safety = true }){}/;"	variable
backing_integer	$ZIGLIB/std/builtin.zig	/backing_integer: ?type = null/;"	field
backslash	$ZIGLIB/std/zig/tokenizer.zig	/backslash/;"	field
backslash_count	$ZIGLIB/std/process.zig	/var backslash_count: usize = 0/;"	variable
backward_size	$ZIGLIB/std/compress/xz.zig	/const backward_size = (@as(u64, try hashed_reader.readIntLittle(u32)) + 1) * 4/;"	constant
badDwarf	$ZIGLIB/std/dwarf.zig	/^fn badDwarf() error{InvalidDebugInfo} {$/;"	function
bad_ad	$ZIGLIB/std/crypto/chacha20.zig	/var bad_ad = ad/;"	variable
bad_c	$ZIGLIB/std/crypto/chacha20.zig	/var bad_c = c/;"	variable
bad_certificate	$ZIGLIB/std/crypto/tls.zig	/bad_certificate = 42/;"	field
bad_certificate_status_response	$ZIGLIB/std/crypto/tls.zig	/bad_certificate_status_response = 113/;"	field
bad_code	$ZIGLIB/std/compress/deflate/huffman_bit_writer.zig	/^const bad_code = 255/;"	constant
bad_dl	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/bad_dl: []const u8/;"	field
bad_fn_ret	$ZIGLIB/std/Thread.zig	/const bad_fn_ret = "expected return type of startFn to be 'u8', 'noreturn', 'void', or '!void'"/;"	constant
bad_gateway	$ZIGLIB/std/http.zig	/bad_gateway = 502/;"	field
bad_key	$ZIGLIB/std/crypto/chacha20.zig	/var bad_key = key/;"	variable
bad_main_ret	$ZIGLIB/std/start.zig	/^const bad_main_ret = "expected return type of main to be 'void', '!void', 'noreturn', 'u8', or '!u8'"/;"	constant
bad_nonce	$ZIGLIB/std/crypto/chacha20.zig	/var bad_nonce = nonce/;"	variable
bad_os_or_cpu	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/bad_os_or_cpu/;"	field
bad_prog	$ZIGLIB/std/os/linux/bpf.zig	/const bad_prog = [_]Insn{$/;"	constant
bad_record_mac	$ZIGLIB/std/crypto/tls.zig	/bad_record_mac = 20/;"	field
bad_request	$ZIGLIB/std/http.zig	/bad_request = 400/;"	field
bad_result	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/var bad_result: Executor = .bad_os_or_cpu/;"	variable
balance_fp_ops	$ZIGLIB/std/target/aarch64.zig	/balance_fp_ops/;"	field
band	$ZIGLIB/std/os/linux.zig	/band: u32/;"	field
bang	$ZIGLIB/std/zig/tokenizer.zig	/bang/;"	field
bang_equal	$ZIGLIB/std/zig/tokenizer.zig	/bang_equal/;"	field
banned_prec	$ZIGLIB/std/zig/Parse.zig	/var banned_prec: i8 = -1/;"	variable
barcelona	$ZIGLIB/std/target/x86.zig	/pub const barcelona = CpuModel{$/;"	constant
barriers	$ZIGLIB/std/Thread/Futex.zig	/barriers: [num_iterations]Barrier = [_]Barrier{.{}} ** num_iterations/;"	field
base	$ZIGLIB/std/zig/number_literal.zig	/var base: u8 = 10/;"	variable
base64	$ZIGLIB/std/crypto/Certificate/Bundle.zig	/^const base64 = std.base64.standard.decoderWithIgnore(" \\t\\r\\n")/;"	constant
base64_alphabet	$ZIGLIB/std/fs.zig	/^pub const base64_alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_".*/;"	constant
base64_decoder	$ZIGLIB/std/fs.zig	/^pub const base64_decoder = base64.Base64Decoder.init(base64_alphabet, null)/;"	constant
base64_encoder	$ZIGLIB/std/fs.zig	/^pub const base64_encoder = base64.Base64Encoder.init(base64_alphabet, null)/;"	constant
basePoint	$ZIGLIB/std/crypto/pcurves/secp256k1.zig	/pub const basePoint = Secp256k1{$/;"	constant
basePointPc	$ZIGLIB/std/crypto/pcurves/secp256k1.zig	/const basePointPc = pc: {$/;"	constant
base_addr	$ZIGLIB/std/os/linux/x86.zig	/base_addr: u32/;"	field
base_address	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/base_address: u64 align(1)/;"	field
base_addressx	$ZIGLIB/std/dwarf.zig	/pub const base_addressx = 0x01/;"	constant
base_allocator_instance	$ZIGLIB/std/testing.zig	/^pub var base_allocator_instance = std.heap.FixedBufferAllocator.init("")/;"	variable
base_arr	$ZIGLIB/compiler_rt/bcmp.zig	/const base_arr = &[_]u8{ 1, 1, 1 }/;"	constant
base_dir	$ZIGLIB/std/Build.zig	/const base_dir = switch (dir) {$/;"	constant
base_flags	$ZIGLIB/std/fs.zig	/const base_flags = w.STANDARD_RIGHTS_READ | w.FILE_READ_ATTRIBUTES | w.FILE_READ_EA |$/;"	constant
base_id	$ZIGLIB/std/Build/WriteFileStep.zig	/^pub const base_id = .write_file/;"	constant
base_len	$ZIGLIB/std/os/darwin.zig	/var base_len: std.c.mach_vm_size_t = if (len == 1) 2 else len/;"	variable
base_managed	$ZIGLIB/std/math/big/rational.zig	/const base_managed = try base.toManaged(fba.allocator())/;"	constant
base_match_length	$ZIGLIB/std/compress/deflate/deflate_const.zig	/^pub const base_match_length = 3/;"	constant
base_match_offset	$ZIGLIB/std/compress/deflate/deflate_const.zig	/^pub const base_match_offset = 1/;"	constant
base_of_code	$ZIGLIB/std/coff.zig	/base_of_code: u32/;"	field
base_of_data	$ZIGLIB/std/coff.zig	/base_of_data: u32/;"	field
base_replace	$ZIGLIB/std/mem.zig	/const base_replace = replaceOwned(u8, gpa, "All your base are belong to us", "base", "Zig") catch @panic("out of memory")/;"	constant
base_shift	$ZIGLIB/std/math/big/int.zig	/const base_shift = math.log2_int(Limb, base)/;"	constant
base_type	$ZIGLIB/std/dwarf/TAG.zig	/^pub const base_type = 0x24/;"	constant
base_types	$ZIGLIB/std/dwarf/AT.zig	/^pub const base_types = 0x35/;"	constant
baseline	$ZIGLIB/std/zig/CrossTarget.zig	/baseline/;"	field
baseline_rv32	$ZIGLIB/std/target/riscv.zig	/pub const baseline_rv32 = CpuModel{$/;"	constant
baseline_rv64	$ZIGLIB/std/target/riscv.zig	/pub const baseline_rv64 = CpuModel{$/;"	constant
basename	$ZIGLIB/std/fs/watch.zig	/const basename = std.mem.span(@ptrCast([*:0]u8, basename_ptr))/;"	constant
basenamePosix	$ZIGLIB/std/fs/path.zig	/^pub fn basenamePosix(path: []const u8) []const u8 {$/;"	function
basenameWindows	$ZIGLIB/std/fs/path.zig	/^pub fn basenameWindows(path: []const u8) []const u8 {$/;"	function
basename_data	$ZIGLIB/std/fs/watch.zig	/var basename_data: [std.fs.MAX_PATH_BYTES]u8 = undefined/;"	variable
basename_path_space	$ZIGLIB/std/fs/watch.zig	/var basename_path_space: windows.PathSpace = undefined/;"	variable
basename_ptr	$ZIGLIB/std/fs/watch.zig	/const basename_ptr = ptr + @sizeOf(os.linux.inotify_event)/;"	constant
basename_utf16le	$ZIGLIB/std/fs/watch.zig	/const basename_utf16le = basename_ptr[0 .. ev.FileNameLength \/ 2]/;"	constant
basic	$ZIGLIB/std/os/darwin.zig	/basic: std.c.vm_region_basic_info_64/;"	field
basicTaskInfo	$ZIGLIB/std/os/darwin.zig	/pub fn basicTaskInfo(task: MachTask) MachError!std.c.mach_task_basic_info {$/;"	function
basic_block	$ZIGLIB/std/dwarf.zig	/basic_block: bool/;"	field
basic_constraints	$ZIGLIB/std/crypto/Certificate.zig	/basic_constraints/;"	field
basic_info	$ZIGLIB/std/os.zig	/var basic_info: windows.FILE_BASIC_INFORMATION = undefined/;"	variable
basic_node	$ZIGLIB/std/event/loop.zig	/const basic_node = @fieldParentPtr(ResumeNode.Basic, "base", resume_node)/;"	constant
batch	$ZIGLIB/std/io/multi_writer.zig	/var batch = std.event.Batch(Error!void, self.streams.len, .auto_async).init()/;"	variable
batch_size	$ZIGLIB/std/os/linux.zig	/const batch_size = kvlen - next_unsent/;"	constant
baud_rate	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/baud_rate: u64 align(1)/;"	field
baz1	$ZIGLIB/std/mem.zig	/const baz1 = zeroInit(Baz, .{})/;"	constant
baz2	$ZIGLIB/std/mem.zig	/const baz2 = zeroInit(Baz, .{ .foo = "zab" })/;"	constant
bcmp	$ZIGLIB/compiler_rt/bcmp.zig	/^pub fn bcmp(vl: [*]allowzero const u8, vr: [*]allowzero const u8, n: usize) callconv(.C) c_int {$/;"	function
bcrypt	$ZIGLIB/std/crypto/bcrypt.zig	/^pub fn bcrypt($/;"	function
bcrypt_alphabet	$ZIGLIB/std/crypto/bcrypt.zig	/const bcrypt_alphabet = ".\/ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".*/;"	constant
bdflush	$ZIGLIB/std/os/linux/syscalls.zig	/bdflush = Linux + 134/;"	field
bdver1	$ZIGLIB/std/target/x86.zig	/pub const bdver1 = CpuModel{$/;"	constant
bdver2	$ZIGLIB/std/target/x86.zig	/pub const bdver2 = CpuModel{$/;"	constant
bdver3	$ZIGLIB/std/target/x86.zig	/pub const bdver3 = CpuModel{$/;"	constant
bdver4	$ZIGLIB/std/target/x86.zig	/pub const bdver4 = CpuModel{$/;"	constant
be_user_settings	$ZIGLIB/std/fs/get_app_data_dir.zig	/const be_user_settings = 0xbbe/;"	constant
bear_enhancement	$ZIGLIB/std/target/s390x.zig	/bear_enhancement/;"	field
begin	$ZIGLIB/std/zig/system/darwin/macos.zig	/begin/;"	field
beginArray	$ZIGLIB/std/json/write_stream.zig	/pub fn beginArray(self: *Self) !void {$/;"	function
beginObject	$ZIGLIB/std/json/write_stream.zig	/pub fn beginObject(self: *Self) !void {$/;"	function
beginOneEvent	$ZIGLIB/std/event/loop.zig	/pub fn beginOneEvent(self: *Loop) void {$/;"	function
begin_addr	$ZIGLIB/std/os/linux/tls.zig	/const begin_addr = @ptrToInt(alloc_tls_area.ptr)/;"	constant
begin_address	$ZIGLIB/std/mem.zig	/const begin_address = @ptrToInt(bytes.ptr)/;"	constant
begin_address_aligned	$ZIGLIB/std/mem.zig	/const begin_address_aligned = mem.alignForward(begin_address, new_alignment)/;"	constant
begin_aligned_addr	$ZIGLIB/std/os/linux/tls.zig	/const begin_aligned_addr = mem.alignForward(begin_addr, tls_image.alloc_align)/;"	constant
begin_marker	$ZIGLIB/std/crypto/Certificate/Bundle.zig	/const begin_marker = "-----BEGIN CERTIFICATE-----"/;"	constant
behavior	$ZIGLIB/std/c/darwin.zig	/behavior: vm_behavior_t/;"	field
behaviors	$ZIGLIB/std/os/darwin.zig	/behaviors: [std.c.EXC_TYPES_COUNT]std.c.exception_behavior_t/;"	field
best	$ZIGLIB/std/mem.zig	/var best = slice[0]/;"	variable
bestDescendent	$ZIGLIB/std/priority_dequeue.zig	/fn bestDescendent(self: Self, first_child_index: usize, first_grandchild_index: usize, target_order: Order) ItemAndIndex {$/;"	function
bestItem	$ZIGLIB/std/priority_dequeue.zig	/fn bestItem(self: Self, item1: ItemAndIndex, item2: ItemAndIndex, target_order: Order) ItemAndIndex {$/;"	function
bestItemAtIndices	$ZIGLIB/std/priority_dequeue.zig	/fn bestItemAtIndices(self: Self, index1: usize, index2: usize, target_order: Order) ItemAndIndex {$/;"	function
best_compression	$ZIGLIB/std/compress/deflate/compressor.zig	/best_compression = 9/;"	field
best_descendent	$ZIGLIB/std/priority_dequeue.zig	/const best_descendent = self.bestDescendent(first_child_index, first_grandchild_index, target_order)/;"	constant
best_grandchild	$ZIGLIB/std/priority_dequeue.zig	/const best_grandchild = self.bestItem(best_left, best_right, target_order)/;"	constant
best_left	$ZIGLIB/std/priority_dequeue.zig	/const best_left = self.bestItemAtIndices(first_grandchild_index, index2, target_order)/;"	constant
best_left_grandchild_index	$ZIGLIB/std/priority_dequeue.zig	/const best_left_grandchild_index = self.bestItemAtIndices(first_grandchild_index, second_grandchild_index, target_order).index/;"	constant
best_right	$ZIGLIB/std/priority_dequeue.zig	/const best_right = self.bestItemAtIndices(index3, last_grandchild_index, target_order)/;"	constant
best_speed	$ZIGLIB/std/compress/deflate/compressor.zig	/best_speed = 1/;"	field
best_speed_enc	$ZIGLIB/std/compress/deflate/compressor.zig	/best_speed_enc: *fast.DeflateFast/;"	field
beta	$ZIGLIB/std/math/complex/tanh.zig	/const beta = 1.0 + t * t/;"	constant
better_capacity	$ZIGLIB/std/priority_queue.zig	/var better_capacity = self.capacity()/;"	variable
between_source	$ZIGLIB/std/zig/render.zig	/const between_source = tree.source[token_starts[token_index]..token_starts[token_index + 1]]/;"	constant
bf16	$ZIGLIB/std/target/arm.zig	/bf16/;"	field
biased_exponent	$ZIGLIB/std/math/float.zig	/const biased_exponent = @as(TBits, exponent + floatExponentMax(T))/;"	constant
bigPagesNeeded	$ZIGLIB/std/heap/WasmAllocator.zig	/^inline fn bigPagesNeeded(byte_count: usize) usize {$/;"	function
bigToNative	$ZIGLIB/std/mem.zig	/^pub fn bigToNative(comptime T: type, x: T) T {$/;"	function
big_alignment	$ZIGLIB/std/heap/general_purpose_allocator.zig	/const big_alignment: usize = switch (builtin.os.tag) {$/;"	constant
big_block	$ZIGLIB/std/crypto/chacha20.zig	/const big_block = if (@sizeOf(usize) > 4) (block_length << 32) else maxInt(usize)/;"	constant
big_class	$ZIGLIB/std/heap/WasmAllocator.zig	/const big_class = math.log2(pow2_pages)/;"	constant
big_cos	$ZIGLIB/compiler_rt/sincos.zig	/var big_cos: f32 = undefined/;"	variable
big_endian_parts	$ZIGLIB/std/net.zig	/const big_endian_parts = @ptrCast(*align(1) const [8]u16, &self.sa.addr)/;"	constant
big_enough_len	$ZIGLIB/std/heap/arena_allocator.zig	/const big_enough_len = prev_len + actual_min_size/;"	constant
big_frees	$ZIGLIB/std/heap/WasmAllocator.zig	/^var big_frees = [1]usize{0} ** big_size_class_count/;"	variable
big_int	$ZIGLIB/std/zig/number_literal.zig	/big_int: Base/;"	field
big_invalid	$ZIGLIB/std/SemanticVersion.zig	/const big_invalid = "99999999999999999999999.999999999999999999.99999999999999999----RC-SNAPSHOT.12.09.1--------------------------------..12"/;"	constant
big_ms_from_ns	$ZIGLIB/std/time.zig	/const big_ms_from_ns = nanoseconds \/ ns_per_ms/;"	constant
big_sin	$ZIGLIB/compiler_rt/sincos.zig	/var big_sin: f32 = undefined/;"	variable
big_size_class_count	$ZIGLIB/std/heap/WasmAllocator.zig	/^const big_size_class_count = math.log2(bigpage_count)/;"	constant
big_slot_size_bytes	$ZIGLIB/std/heap/WasmAllocator.zig	/const big_slot_size_bytes = pow2_pages * bigpage_size/;"	constant
big_thing_again	$ZIGLIB/std/mem.zig	/const big_thing_again = bytesAsSlice(i32, bytes)/;"	constant
big_thing_array	$ZIGLIB/std/mem.zig	/var big_thing_array = [_]i32{ 1, 2, 3, 4 }/;"	variable
big_thing_slice	$ZIGLIB/std/mem.zig	/const big_thing_slice: []i32 = big_thing_array[0..]/;"	constant
big_valid	$ZIGLIB/std/SemanticVersion.zig	/const big_valid = "99999999999999999999999.999999999999999999.99999999999999999"/;"	constant
bigger_buf_size	$ZIGLIB/std/heap/arena_allocator.zig	/const bigger_buf_size = @sizeOf(BufNode) + new_end_index/;"	constant
biggest	$ZIGLIB/std/sort.zig	/var biggest = items[0]/;"	variable
biggest_index	$ZIGLIB/std/sort.zig	/var biggest_index: usize = 0/;"	variable
bigpage_count	$ZIGLIB/std/heap/WasmAllocator.zig	/^const bigpage_count = max_usize \/ bigpage_size/;"	constant
bigpage_size	$ZIGLIB/std/heap/WasmAllocator.zig	/^const bigpage_size = 64 * 1024/;"	constant
bigpages_needed	$ZIGLIB/std/heap/WasmAllocator.zig	/const bigpages_needed = bigPagesNeeded(actual_len)/;"	constant
binNameAlloc	$ZIGLIB/std/zig.zig	/^pub fn binNameAlloc(allocator: std.mem.Allocator, options: BinNameOptions) error{OutOfMemory}![]u8 {$/;"	function
bin_raw	$ZIGLIB/std/crypto/Certificate.zig	/var bin_raw: [512]u8 = undefined/;"	variable
bin_value	$ZIGLIB/std/crypto/scrypt.zig	/var bin_value: Self = undefined/;"	variable
binary	.ary = 2/;"	field
binaryFirst	$ZIGLIB/std/sort.zig	/^fn binaryFirst($/;"	function
binaryLast	$ZIGLIB/std/sort.zig	/^fn binaryLast($/;"	function
binarySearch	$ZIGLIB/std/sort.zig	/^pub fn binarySearch($/;"	function
binary_scale	$ZIGLIB/std/dwarf/AT.zig	/^pub const binary_scale = 0x5b/;"	constant
bind	$ZIGLIB/std/os/windows.zig	/^pub fn bind(s: ws2_32.SOCKET, name: *const ws2_32.sockaddr, namelen: ws2_32.socklen_t) i32 {$/;"	function
bind_off	.d_off: u32 = 0/;"	field
bind_size	.d_size: u32 = 0/;"	field
binding	.ding: [IFNAMESIZE]u8/;"	field
bios	$ZIGLIB/std/time/epoch.zig	/^pub const bios = dos/;"	constant
birthtim	$ZIGLIB/std/c/openbsd.zig	/birthtim: timespec/;"	field
birthtime	$ZIGLIB/std/fs/file.zig	/const birthtime = self.stat.birthtime()/;"	constant
birthtimespec	$ZIGLIB/std/c/darwin.zig	/birthtimespec: timespec/;"	field
bitAnd	$ZIGLIB/std/math/big/int.zig	/pub fn bitAnd(r: *Mutable, a: Const, b: Const) void {$/;"	function
bitCountAbs	$ZIGLIB/std/math/big/int.zig	/pub fn bitCountAbs(self: Managed) usize {$/;"	function
bitCountTwosComp	$ZIGLIB/std/math/big/int.zig	/pub fn bitCountTwosComp(self: Managed) usize {$/;"	function
bitCounts	$ZIGLIB/std/compress/deflate/huffman_code.zig	/fn bitCounts(self: *HuffmanEncoder, list: []LiteralNode, max_bits_to_use: usize) []u32 {$/;"	function
bitField	$ZIGLIB/std/zig/system/arm.zig	/inline fn bitField(input: u64, offset: u6) u4 {$/;"	function
bitLength	$ZIGLIB/std/compress/deflate/huffman_code.zig	/pub fn bitLength(self: *HuffmanEncoder, freq: []u16) u32 {$/;"	function
bitNotWrap	$ZIGLIB/std/math/big/int.zig	/pub fn bitNotWrap(r: *Mutable, a: Const, signedness: Signedness, bit_count: usize) void {$/;"	function
bitOr	$ZIGLIB/std/math/big/int.zig	/pub fn bitOr(r: *Mutable, a: Const, b: Const) void {$/;"	function
bitReader	$ZIGLIB/std/io/bit_reader.zig	/^pub fn bitReader($/;"	function
bitReset	$ZIGLIB/std/atomic/Atomic.zig	/pub inline fn bitReset(self: *Self, bit: Bit, comptime ordering: Ordering) u1 {$/;"	function
bitReverse	$ZIGLIB/std/math/big/int.zig	/pub fn bitReverse(r: *Mutable, a: Const, signedness: Signedness, bit_count: usize) void {$/;"	function
bitRmw	$ZIGLIB/std/atomic/Atomic.zig	/inline fn bitRmw(self: *Self, comptime op: BitRmwOp, bit: Bit, comptime ordering: Ordering) u1 {$/;"	function
bitSet	$ZIGLIB/std/atomic/Atomic.zig	/pub inline fn bitSet(self: *Self, bit: Bit, comptime ordering: Ordering) u1 {$/;"	function
bitToggle	$ZIGLIB/std/atomic/Atomic.zig	/pub inline fn bitToggle(self: *Self, bit: Bit, comptime ordering: Ordering) u1 {$/;"	function
bitWriter	$ZIGLIB/std/io/bit_writer.zig	/^pub fn bitWriter($/;"	function
bitXor	$ZIGLIB/std/math/big/int.zig	/pub fn bitXor(r: *Mutable, a: Const, b: Const) void {$/;"	function
bit_and	$ZIGLIB/std/zig/Ast.zig	/bit_and/;"	field
bit_array	$ZIGLIB/std/atomic/Atomic.zig	/const bit_array = @as([@bitSizeOf(Int)]void, undefined)/;"	constant
bit_buffer	$ZIGLIB/std/io/bit_writer.zig	/bit_buffer: u8/;"	field
bit_count	$ZIGLIB/std/meta/trailer_flags.zig	/pub const bit_count = @typeInfo(Fields).Struct.fields.len/;"	constant
bit_i	$ZIGLIB/std/pdb.zig	/var bit_i: u5 = 0/;"	variable
bit_index	$ZIGLIB/std/target.zig	/const bit_index = @intCast(ShiftInt, arch_feature_index % @bitSizeOf(usize))/;"	constant
bit_length	$ZIGLIB/std/bit_set.zig	/pub const bit_length: usize = size/;"	constant
bit_not	$ZIGLIB/std/zig/Ast.zig	/bit_not/;"	field
bit_offset	$ZIGLIB/std/packed_int_array.zig	/bit_offset: u3/;"	field
bit_or	$ZIGLIB/std/zig/Ast.zig	/bit_or/;"	field
bit_piece	$ZIGLIB/std/dwarf/OP.zig	/^pub const bit_piece = 0x9d/;"	constant
bit_range_end	$ZIGLIB/std/zig/Parse.zig	/bit_range_end: Node.Index/;"	field
bit_range_start	$ZIGLIB/std/zig/Parse.zig	/bit_range_start: Node.Index/;"	field
bit_reader	$ZIGLIB/std/compress/xz.zig	/var bit_reader = std.io.bitReader(.Little, reader)/;"	variable
bit_rev_i	$ZIGLIB/std/math/big/int.zig	/const bit_rev_i = bits.get(rev_i)/;"	constant
bit_set	$ZIGLIB/std/bit_set.zig	/var bit_set = Set.initEmpty()/;"	variable
bit_shift	$ZIGLIB/std/mem.zig	/const bit_shift = @intCast(u3, bit_offset % 8)/;"	constant
bit_size	$ZIGLIB/std/math/powi.zig	/const bit_size = @typeInfo(T).Int.bits/;"	constant
bit_stream_be	$ZIGLIB/std/io/bit_writer.zig	/var bit_stream_be = bitWriter(.Big, mem_out_be.writer())/;"	variable
bit_stream_le	$ZIGLIB/std/io/bit_writer.zig	/var bit_stream_le = bitWriter(.Little, mem_out_le.writer())/;"	variable
bit_stride	$ZIGLIB/std/dwarf/AT.zig	/^pub const bit_stride = 0x2e/;"	constant
bit_to_extract	$ZIGLIB/std/json.zig	/const bit_to_extract = self.len - 1/;"	constant
bit_xor	$ZIGLIB/std/zig/Ast.zig	/bit_xor/;"	field
bitfield_size	$ZIGLIB/std/os/linux/bpf/btf.zig	/bitfield_size: u8/;"	field
bits	$ZIGLIB/std/zig/c_builtins.zig	/const bits = @truncate(u23, parsed)/;"	constant
bits_in_dword_2	$ZIGLIB/compiler_rt/multi3.zig	/const bits_in_dword_2 = (@sizeOf(i64) * 8) \/ 2/;"	constant
bits_in_word_2	$ZIGLIB/compiler_rt/muldi3.zig	/const bits_in_word_2 = @sizeOf(i32) * 8 \/ 2/;"	constant
bits_lost	$ZIGLIB/compiler_rt/fma.zig	/const bits_lost = -@intCast(i32, (uhii >> 52) & 0x7FF) - scale + 1/;"	constant
bits_minus_1	$ZIGLIB/compiler_rt/fmod.zig	/const bits_minus_1 = bits - 1/;"	constant
bits_per_limb	$ZIGLIB/std/math/big/int.zig	/const bits_per_limb = @sizeOf(Limb) * 8/;"	constant
bits_remain	$ZIGLIB/std/bit_set.zig	/bits_remain: MaskInt/;"	field
bits_remaining	$ZIGLIB/std/io/bit_writer.zig	/const bits_remaining = u8_bit_count - self.bit_count/;"	constant
bitstring	$ZIGLIB/std/crypto/Certificate.zig	/bitstring = 3/;"	field
black	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/pub const black: u8 = 0x00/;"	constant
blake2bLong	$ZIGLIB/std/crypto/argon2.zig	/^fn blake2bLong(out: []u8, in: []const u8) void {$/;"	function
blamkaGeneric	$ZIGLIB/std/crypto/argon2.zig	/^fn blamkaGeneric(x: *[16]u64) void {$/;"	function
blank	$ZIGLIB/std/Build/ConfigHeaderStep.zig	/blank/;"	field
blank_extensions	$ZIGLIB/std/Build/InstallDirStep.zig	/blank_extensions: []const []const u8 = &.{}/;"	field
bleeding_edge	$ZIGLIB/std/target/wasm.zig	/pub const bleeding_edge = CpuModel{$/;"	constant
blind	$ZIGLIB/std/crypto/25519/ed25519.zig	/var blind: [32]u8 = undefined/;"	variable
blindCtx	$ZIGLIB/std/crypto/25519/ed25519.zig	/fn blindCtx(blind_seed: [blind_seed_length]u8, ctx: []const u8) [Sha512.digest_length]u8 {$/;"	function
blind_factor	$ZIGLIB/std/crypto/25519/ed25519.zig	/const blind_factor = Curve.scalar.reduce(blind_h[0..32].*)/;"	constant
blind_h	$ZIGLIB/std/crypto/25519/ed25519.zig	/var blind_h: [Sha512.digest_length]u8 = undefined/;"	variable
blind_kp	$ZIGLIB/std/crypto/25519/ed25519.zig	/const blind_kp = try BlindKeyPair.init(kp, blind, "ctx")/;"	constant
blind_public_key	$ZIGLIB/std/crypto/25519/ed25519.zig	/const blind_public_key = BlindPublicKey{$/;"	constant
blind_scalar	$ZIGLIB/std/crypto/25519/ed25519.zig	/const blind_scalar = Curve.scalar.mul(scalar, blind_factor)/;"	constant
blind_secret_key	$ZIGLIB/std/crypto/25519/ed25519.zig	/const blind_secret_key = BlindSecretKey{$/;"	constant
blind_seed_length	$ZIGLIB/std/crypto/25519/ed25519.zig	/pub const blind_seed_length = 32/;"	constant
blkcnt_t	$ZIGLIB/std/os/linux/x86_64.zig	/^pub const blkcnt_t = isize/;"	constant
blksize	$ZIGLIB/std/os/linux/x86_64.zig	/blksize: isize/;"	field
blksize_t	$ZIGLIB/std/os/linux/x86_64.zig	/^pub const blksize_t = isize/;"	constant
blob	$ZIGLIB/std/crypto/siphash.zig	/const blob = b[off..][0..8].*/;"	constant
block	$ZIGLIB/std/zig/render.zig	/const block = datas[node].lhs/;"	constant
block0	$ZIGLIB/std/crypto/salsa20.zig	/var block0 = [_]u8{0} ** 64/;"	variable
block1	$ZIGLIB/std/dwarf/FORM.zig	/^pub const block1 = 0x0a/;"	constant
block2	$ZIGLIB/std/dwarf/FORM.zig	/^pub const block2 = 0x03/;"	constant
block4	$ZIGLIB/std/dwarf/FORM.zig	/^pub const block4 = 0x04/;"	constant
blockA	$ZIGLIB/std/sort.zig	/var blockA = Range.init(A.start, A.end)/;"	variable
blockB	$ZIGLIB/std/sort.zig	/var blockB = Range.init(B.start, B.start + math.min(block_size, B.length()))/;"	variable
blockCopy	$ZIGLIB/std/crypto/scrypt.zig	/^fn blockCopy(dst: []align(16) u32, src: []align(16) const u32, n: usize) void {$/;"	function
blockCountFromSize	$ZIGLIB/std/pdb.zig	/^fn blockCountFromSize(size: u32, block_size: u32) u32 {$/;"	function
blockMix	$ZIGLIB/std/crypto/scrypt.zig	/^fn blockMix(tmp: *align(16) [16]u32, in: []align(16) const u32, out: []align(16) u32, r: u30) void {$/;"	function
blockSwap	$ZIGLIB/std/sort.zig	/^fn blockSwap(comptime T: type, items: []T, start1: usize, start2: usize, block_size: usize) void {$/;"	function
blockXor	$ZIGLIB/std/crypto/scrypt.zig	/^fn blockXor(dst: []align(16) u32, src: []align(16) const u32, n: usize) void {$/;"	function
block_bytes	$ZIGLIB/std/crypto/xoodoo.zig	/pub const block_bytes = 48/;"	constant
block_cache_pages	$ZIGLIB/std/c/haiku.zig	/block_cache_pages: u64/;"	field
block_count	$ZIGLIB/std/crypto/aes_gcm.zig	/const block_count = (math.divCeil(usize, ad.len, Ghash.block_length) catch unreachable) + (math.divCeil(usize, c.len, Ghash.block_length) catch unreachable) + 1/;"	constant
block_counter	$ZIGLIB/std/compress/xz/block.zig	/var block_counter = std.io.countingReader(self.inner_reader)/;"	variable
block_decoder	$ZIGLIB/std/compress/xz.zig	/block_decoder: block.Decoder(ReaderType)/;"	field
block_empty	$ZIGLIB/std/wasm.zig	/^pub const block_empty: u8 = 0x40/;"	constant
block_expr	$ZIGLIB/std/zig/Parse.zig	/const block_expr = try p.parseBlockExpr()/;"	constant
block_hdr	$ZIGLIB/std/pdb.zig	/const block_hdr = @ptrCast(*align(1) LineBlockFragmentHeader, &subsect_info[line_index])/;"	constant
block_id	$ZIGLIB/std/pdb.zig	/var block_id = @intCast(usize, self.pos \/ self.block_size)/;"	variable
block_index	$ZIGLIB/std/crypto/pbkdf2.zig	/const block_index = mem.toBytes(mem.nativeToBig(u32, block + 1))/;"	constant
block_len	$ZIGLIB/std/dwarf.zig	/const block_len = try nosuspend leb.readULEB128(usize, in_stream)/;"	constant
block_length	$ZIGLIB/std/crypto/siphash.zig	/pub const block_length = 8/;"	constant
block_node	$ZIGLIB/std/zig/Parse.zig	/const block_node = try p.parseBlock()/;"	constant
block_reader	$ZIGLIB/std/io/buffered_reader.zig	/var block_reader = BlockReader.init(block, 2)/;"	variable
block_semicolon	$ZIGLIB/std/zig/Ast.zig	/block_semicolon/;"	field
block_size	$ZIGLIB/std/sort.zig	/var block_size: usize = math.sqrt(iterator.length())/;"	variable
block_special	$ZIGLIB/std/tar.zig	/block_special = '4'/;"	field
block_start	$ZIGLIB/std/compress/deflate/compressor.zig	/block_start: usize/;"	field
block_two	$ZIGLIB/std/zig/Ast.zig	/block_two/;"	field
block_two_semicolon	$ZIGLIB/std/zig/Ast.zig	/block_two_semicolon/;"	field
block_words	$ZIGLIB/std/crypto/blake3.zig	/var block_words: [16]u32 align(16) = undefined/;"	variable
blockelement_full_block	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/pub const blockelement_full_block: u16 = 0x2588/;"	constant
blockelement_light_shade	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/pub const blockelement_light_shade: u16 = 0x2591/;"	constant
blocking	$ZIGLIB/std/io.zig	/blocking/;"	field
blocking_flag	$ZIGLIB/std/os/windows.zig	/const blocking_flag: ULONG = if (options.io_mode == .blocking) FILE_SYNCHRONOUS_IO_NONALERT else 0/;"	constant
blocks	$ZIGLIB/std/pdb.zig	/var blocks = try allocator.alloc(u32, size)/;"	variable
blocks_compressed	$ZIGLIB/std/crypto/blake3.zig	/blocks_compressed: u8 = 0/;"	field
blocks_count	$ZIGLIB/std/crypto/pbkdf2.zig	/const blocks_count = @intCast(u32, std.math.divCeil(usize, dk_len, h_len) catch unreachable)/;"	constant
blue	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/pub const blue: u8 = 0x01/;"	constant
blue_mask	$ZIGLIB/std/os/uefi/protocols/graphics_output_protocol.zig	/blue_mask: u32/;"	field
bmi2	$ZIGLIB/std/target/x86.zig	/bmi2/;"	field
bmod	$ZIGLIB/compiler_rt/fmod.zig	/var bmod = b/;"	variable
bnsym	$ZIGLIB/std/debug.zig	/bnsym/;"	field
body	$ZIGLIB/std/zig/render.zig	/const body = datas[node].lhs/;"	constant
body_begin	$ZIGLIB/std/dwarf/AT.zig	/^pub const body_begin = 0x2105/;"	constant
body_block	$ZIGLIB/std/zig/Parse.zig	/const body_block = try p.parseBlock()/;"	constant
body_end	$ZIGLIB/std/dwarf/AT.zig	/^pub const body_end = 0x2106/;"	constant
bonaire	$ZIGLIB/std/target/amdgpu.zig	/pub const bonaire = CpuModel{$/;"	constant
bonnell	$ZIGLIB/std/target/x86.zig	/pub const bonnell = CpuModel{$/;"	constant
booke	$ZIGLIB/std/target/powerpc.zig	/booke/;"	field
bool	$ZIGLIB/std/Build.zig	/bool/;"	field
boolMask	$ZIGLIB/std/math.zig	/^pub inline fn boolMask(comptime MaskInt: type, value: bool) MaskInt {$/;"	function
boolMaskBit	$ZIGLIB/std/bit_set.zig	/fn boolMaskBit(index: usize, value: bool) MaskInt {$/;"	function
bool_and	$ZIGLIB/std/zig/Ast.zig	/bool_and/;"	field
bool_base	$ZIGLIB/std/simd.zig	/const bool_base = @Vector(4, bool){ true, false, true, false }/;"	constant
bool_not	$ZIGLIB/std/zig/Ast.zig	/bool_not/;"	field
bool_or	$ZIGLIB/std/zig/Ast.zig	/bool_or/;"	field
boolean	$ZIGLIB/std/rand.zig	/pub fn boolean(r: Random) bool {$/;"	function
boolean_t	$ZIGLIB/std/c/darwin.zig	/^pub const boolean_t = c_int/;"	constant
boot_entry	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/boot_entry: u32 align(1)/;"	field
boot_services	$ZIGLIB/std/os/uefi/tables/system_table.zig	/boot_services: ?*BootServices/;"	field
boot_time	$ZIGLIB/std/c/haiku.zig	/boot_time: i64/;"	field
borrow	$ZIGLIB/std/math/big/int.zig	/var borrow: Limb = 0/;"	variable
both	$ZIGLIB/std/os.zig	/both/;"	field
both_msgs	$ZIGLIB/std/crypto/tls/Client.zig	/const both_msgs = client_change_cipher_spec_msg ++ finished_msg/;"	constant
bottom	$ZIGLIB/std/os/windows.zig	/bottom: LONG/;"	field
bound	$ZIGLIB/std/fmt/errol.zig	/const bound = buffer.len - 1/;"	constant
bounded_a	$ZIGLIB/std/compress/deflate/compressor.zig	/var bounded_a = a[0..max]/;"	variable
bounded_b	$ZIGLIB/std/compress/deflate/compressor.zig	/var bounded_b = b[0..max]/;"	variable
boxIndex	$ZIGLIB/std/segmented_list.zig	/fn boxIndex(list_index: usize, shelf_index: ShelfIndex) usize {$/;"	function
box_index	$ZIGLIB/std/segmented_list.zig	/const box_index = boxIndex(index, shelf_index)/;"	constant
boxdraw_double_down_horizontal	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/pub const boxdraw_double_down_horizontal: u16 = 0x2566/;"	constant
boxdraw_double_down_left	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/pub const boxdraw_double_down_left: u16 = 0x2557/;"	constant
boxdraw_double_down_right	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/pub const boxdraw_double_down_right: u16 = 0x2554/;"	constant
boxdraw_double_horizontal	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/pub const boxdraw_double_horizontal: u16 = 0x2550/;"	constant
boxdraw_double_up_horizontal	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/pub const boxdraw_double_up_horizontal: u16 = 0x2569/;"	constant
boxdraw_double_up_left	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/pub const boxdraw_double_up_left: u16 = 0x255d/;"	constant
boxdraw_double_up_right	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/pub const boxdraw_double_up_right: u16 = 0x255a/;"	constant
boxdraw_double_vertical	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/pub const boxdraw_double_vertical: u16 = 0x2551/;"	constant
boxdraw_double_vertical_horizontal	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/pub const boxdraw_double_vertical_horizontal: u16 = 0x256c/;"	constant
boxdraw_double_vertical_left	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/pub const boxdraw_double_vertical_left: u16 = 0x2563/;"	constant
boxdraw_double_vertical_right	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/pub const boxdraw_double_vertical_right: u16 = 0x2560/;"	constant
boxdraw_down_double_horizontal	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/pub const boxdraw_down_double_horizontal: u16 = 0x2565/;"	constant
boxdraw_down_double_left	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/pub const boxdraw_down_double_left: u16 = 0x2556/;"	constant
boxdraw_down_double_right	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/pub const boxdraw_down_double_right: u16 = 0x2553/;"	constant
boxdraw_down_horizontal	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/pub const boxdraw_down_horizontal: u16 = 0x252c/;"	constant
boxdraw_down_horizontal_double	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/pub const boxdraw_down_horizontal_double: u16 = 0x2564/;"	constant
boxdraw_down_left	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/pub const boxdraw_down_left: u16 = 0x2510/;"	constant
boxdraw_down_left_double	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/pub const boxdraw_down_left_double: u16 = 0x2555/;"	constant
boxdraw_down_right	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/pub const boxdraw_down_right: u16 = 0x250c/;"	constant
boxdraw_down_right_double	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/pub const boxdraw_down_right_double: u16 = 0x2552/;"	constant
boxdraw_horizontal	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/pub const boxdraw_horizontal: u16 = 0x2500/;"	constant
boxdraw_up_double_horizontal	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/pub const boxdraw_up_double_horizontal: u16 = 0x2568/;"	constant
boxdraw_up_double_left	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/pub const boxdraw_up_double_left: u16 = 0x255c/;"	constant
boxdraw_up_double_right	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/pub const boxdraw_up_double_right: u16 = 0x2559/;"	constant
boxdraw_up_horizontal	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/pub const boxdraw_up_horizontal: u16 = 0x2534/;"	constant
boxdraw_up_horizontal_double	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/pub const boxdraw_up_horizontal_double: u16 = 0x2567/;"	constant
boxdraw_up_left	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/pub const boxdraw_up_left: u16 = 0x2518/;"	constant
boxdraw_up_left_double	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/pub const boxdraw_up_left_double: u16 = 0x255b/;"	constant
boxdraw_up_right	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/pub const boxdraw_up_right: u16 = 0x2514/;"	constant
boxdraw_up_right_double	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/pub const boxdraw_up_right_double: u16 = 0x2558/;"	constant
boxdraw_vertical	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/pub const boxdraw_vertical: u16 = 0x2502/;"	constant
boxdraw_vertical_double_horizontal	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/pub const boxdraw_vertical_double_horizontal: u16 = 0x256b/;"	constant
boxdraw_vertical_double_left	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/pub const boxdraw_vertical_double_left: u16 = 0x2562/;"	constant
boxdraw_vertical_double_right	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/pub const boxdraw_vertical_double_right: u16 = 0x255f/;"	constant
boxdraw_vertical_horizontal	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/pub const boxdraw_vertical_horizontal: u16 = 0x253c/;"	constant
boxdraw_vertical_horizontal_double	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/pub const boxdraw_vertical_horizontal_double: u16 = 0x256a/;"	constant
boxdraw_vertical_left	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/pub const boxdraw_vertical_left: u16 = 0x2524/;"	constant
boxdraw_vertical_left_double	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/pub const boxdraw_vertical_left_double: u16 = 0x2561/;"	constant
boxdraw_vertical_right	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/pub const boxdraw_vertical_right: u16 = 0x251c/;"	constant
boxdraw_vertical_right_double	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/pub const boxdraw_vertical_right_double: u16 = 0x255e/;"	constant
boxed	$ZIGLIB/std/crypto/salsa20.zig	/var boxed: [msg.len + SealedBox.seal_length]u8 = undefined/;"	variable
boxed_a	$ZIGLIB/compiler_rt/divc3.zig	/const boxed_a = copysign(if (isInf(a)) one else zero, a)/;"	constant
boxed_b	$ZIGLIB/compiler_rt/divc3.zig	/const boxed_b = copysign(if (isInf(b)) one else zero, b)/;"	constant
boxed_c	$ZIGLIB/compiler_rt/divc3.zig	/const boxed_c = copysign(if (isInf(c)) one else zero, c)/;"	constant
boxed_d	$ZIGLIB/compiler_rt/divc3.zig	/const boxed_d = copysign(if (isInf(d)) one else zero, d)/;"	constant
boyerMooreHorspoolPreprocess	$ZIGLIB/std/mem.zig	/^fn boyerMooreHorspoolPreprocess(pattern: []const u8, table: *[256]usize) void {$/;"	function
boyerMooreHorspoolPreprocessIgnoreCase	$ZIGLIB/std/ascii.zig	/^fn boyerMooreHorspoolPreprocessIgnoreCase(pattern: []const u8, table: *[256]usize) void {$/;"	function
boyerMooreHorspoolPreprocessReverse	$ZIGLIB/std/mem.zig	/^fn boyerMooreHorspoolPreprocessReverse(pattern: []const u8, table: *[256]usize) void {$/;"	function
bp_type	$ZIGLIB/std/os/linux.zig	/bp_type: u32 = 0/;"	field
bpermd	$ZIGLIB/std/target/powerpc.zig	/bpermd/;"	field
bpf_fd	$ZIGLIB/std/os/linux/bpf.zig	/bpf_fd: fd_t/;"	field
bpf_value_type_id	$ZIGLIB/std/os/linux/bpf.zig	/bpf_value_type_id: u32/;"	field
bpfeb	$ZIGLIB/std/target.zig	/bpfeb/;"	field
bpfel	$ZIGLIB/std/target.zig	/bpfel/;"	field
br_if	$ZIGLIB/std/wasm.zig	/br_if = 0x0D/;"	field
br_table	$ZIGLIB/std/wasm.zig	/br_table = 0x0E/;"	field
branch_sample_type	$ZIGLIB/std/os/linux.zig	/branch_sample_type: u64 = 0/;"	field
branchfusion	$ZIGLIB/std/target/x86.zig	/branchfusion/;"	field
brand_data	$ZIGLIB/std/c/solaris.zig	/brand_data: [3]?*anyopaque/;"	field
brand_id	$ZIGLIB/std/zig/system/x86.zig	/const brand_id = leaf.ebx & 0xff/;"	constant
brbe	$ZIGLIB/std/target/aarch64.zig	/brbe/;"	field
break	$ZIGLIB/std/zig/Ast.zig	/@"break"/;"	field
break_f80	$ZIGLIB/std/math.zig	/^pub fn break_f80(x: f80) F80 {$/;"	function
breakpoint	$ZIGLIB/std/os/linux/syscalls.zig	/breakpoint = arm_base + 1/;"	field
breg0	$ZIGLIB/std/dwarf/OP.zig	/^pub const breg0 = 0x70/;"	constant
breg1	$ZIGLIB/std/dwarf/OP.zig	/^pub const breg1 = 0x71/;"	constant
breg10	$ZIGLIB/std/dwarf/OP.zig	/^pub const breg10 = 0x7a/;"	constant
breg11	$ZIGLIB/std/dwarf/OP.zig	/^pub const breg11 = 0x7b/;"	constant
breg12	$ZIGLIB/std/dwarf/OP.zig	/^pub const breg12 = 0x7c/;"	constant
breg13	$ZIGLIB/std/dwarf/OP.zig	/^pub const breg13 = 0x7d/;"	constant
breg14	$ZIGLIB/std/dwarf/OP.zig	/^pub const breg14 = 0x7e/;"	constant
breg15	$ZIGLIB/std/dwarf/OP.zig	/^pub const breg15 = 0x7f/;"	constant
breg16	$ZIGLIB/std/dwarf/OP.zig	/^pub const breg16 = 0x80/;"	constant
breg17	$ZIGLIB/std/dwarf/OP.zig	/^pub const breg17 = 0x81/;"	constant
breg18	$ZIGLIB/std/dwarf/OP.zig	/^pub const breg18 = 0x82/;"	constant
breg19	$ZIGLIB/std/dwarf/OP.zig	/^pub const breg19 = 0x83/;"	constant
breg2	$ZIGLIB/std/dwarf/OP.zig	/^pub const breg2 = 0x72/;"	constant
breg20	$ZIGLIB/std/dwarf/OP.zig	/^pub const breg20 = 0x84/;"	constant
breg21	$ZIGLIB/std/dwarf/OP.zig	/^pub const breg21 = 0x85/;"	constant
breg22	$ZIGLIB/std/dwarf/OP.zig	/^pub const breg22 = 0x86/;"	constant
breg23	$ZIGLIB/std/dwarf/OP.zig	/^pub const breg23 = 0x87/;"	constant
breg24	$ZIGLIB/std/dwarf/OP.zig	/^pub const breg24 = 0x88/;"	constant
breg25	$ZIGLIB/std/dwarf/OP.zig	/^pub const breg25 = 0x89/;"	constant
breg26	$ZIGLIB/std/dwarf/OP.zig	/^pub const breg26 = 0x8a/;"	constant
breg27	$ZIGLIB/std/dwarf/OP.zig	/^pub const breg27 = 0x8b/;"	constant
breg28	$ZIGLIB/std/dwarf/OP.zig	/^pub const breg28 = 0x8c/;"	constant
breg29	$ZIGLIB/std/dwarf/OP.zig	/^pub const breg29 = 0x8d/;"	constant
breg3	$ZIGLIB/std/dwarf/OP.zig	/^pub const breg3 = 0x73/;"	constant
breg30	$ZIGLIB/std/dwarf/OP.zig	/^pub const breg30 = 0x8e/;"	constant
breg31	$ZIGLIB/std/dwarf/OP.zig	/^pub const breg31 = 0x8f/;"	constant
breg4	$ZIGLIB/std/dwarf/OP.zig	/^pub const breg4 = 0x74/;"	constant
breg5	$ZIGLIB/std/dwarf/OP.zig	/^pub const breg5 = 0x75/;"	constant
breg6	$ZIGLIB/std/dwarf/OP.zig	/^pub const breg6 = 0x76/;"	constant
breg7	$ZIGLIB/std/dwarf/OP.zig	/^pub const breg7 = 0x77/;"	constant
breg8	$ZIGLIB/std/dwarf/OP.zig	/^pub const breg8 = 0x78/;"	constant
breg9	$ZIGLIB/std/dwarf/OP.zig	/^pub const breg9 = 0x79/;"	constant
bregx	$ZIGLIB/std/dwarf/OP.zig	/^pub const bregx = 0x92/;"	constant
brew	$ZIGLIB/std/time/epoch.zig	/^pub const brew = gps/;"	constant
bright	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/pub const bright: u8 = 0x08/;"	constant
broadaddr	$ZIGLIB/std/os/linux.zig	/broadaddr: sockaddr/;"	field
broadcast	$ZIGLIB/std/Thread/Futex.zig	/var broadcast = Broadcast{}/;"	variable
broadcast_address	$ZIGLIB/std/os/uefi/protocols/simple_network_protocol.zig	/broadcast_address: MacAddress/;"	field
broadcast_flag	$ZIGLIB/std/os/uefi/protocols/managed_network_protocol.zig	/broadcast_flag: bool/;"	field
broadcast_test	$ZIGLIB/std/Thread/Condition.zig	/var broadcast_test = BroadcastTest{}/;"	variable
broadwell	$ZIGLIB/std/target/x86.zig	/pub const broadwell = CpuModel{$/;"	constant
brown	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/pub const brown: u8 = 0x06/;"	constant
bsdAddKev	$ZIGLIB/std/event/loop.zig	/pub fn bsdAddKev(self: *Loop, resume_node: *ResumeNode.Basic, ident: usize, filter: i16, flags: u16) !void {$/;"	function
bsdRemoveKev	$ZIGLIB/std/event/loop.zig	/pub fn bsdRemoveKev(self: *Loop, ident: usize, filter: i16) void {$/;"	function
bsdWaitKev	$ZIGLIB/std/event/loop.zig	/pub fn bsdWaitKev(self: *Loop, ident: usize, filter: i16, flags: u16) void {$/;"	function
bsd_entry	$ZIGLIB/std/fs.zig	/const bsd_entry = @ptrCast(*align(1) os.system.dirent, &self.buf[self.index])/;"	constant
bswapXi2	$ZIGLIB/compiler_rt/bswap.zig	/^inline fn bswapXi2(comptime T: type, a: T) T {$/;"	function
btf_fd	$ZIGLIB/std/os/linux/bpf.zig	/btf_fd: fd_t/;"	field
btf_get_fd_by_id	$ZIGLIB/std/os/linux/bpf.zig	/btf_get_fd_by_id/;"	field
btf_get_next_id	$ZIGLIB/std/os/linux/bpf.zig	/btf_get_next_id/;"	field
btf_id	$ZIGLIB/std/os/linux/bpf.zig	/btf_id: u32/;"	field
btf_key_type_id	$ZIGLIB/std/os/linux/bpf.zig	/btf_key_type_id: u32/;"	field
btf_load	$ZIGLIB/std/os/linux/bpf.zig	/btf_load: BtfLoadAttr/;"	field
btf_log_buf	$ZIGLIB/std/os/linux/bpf.zig	/btf_log_buf: u64/;"	field
btf_log_level	$ZIGLIB/std/os/linux/bpf.zig	/btf_log_level: u32/;"	field
btf_log_size	$ZIGLIB/std/os/linux/bpf.zig	/btf_log_size: u32/;"	field
btf_size	$ZIGLIB/std/os/linux/bpf.zig	/btf_size: u32/;"	field
btf_vmlinux_value_type_id	$ZIGLIB/std/os/linux/bpf.zig	/btf_vmlinux_value_type_id: u32/;"	field
btime	$ZIGLIB/std/os/linux.zig	/btime: statx_timestamp/;"	field
btst16	$ZIGLIB/std/target/csky.zig	/btst16/;"	field
btver1	$ZIGLIB/std/target/x86.zig	/pub const btver1 = CpuModel{$/;"	constant
btver2	$ZIGLIB/std/target/x86.zig	/pub const btver2 = CpuModel{$/;"	constant
bucket	$ZIGLIB/std/heap/general_purpose_allocator.zig	/var bucket = first_bucket/;"	variable
bucketSize	$ZIGLIB/std/heap/general_purpose_allocator.zig	/fn bucketSize(size_class: usize) usize {$/;"	function
bucketStackFramesStart	$ZIGLIB/std/heap/general_purpose_allocator.zig	/fn bucketStackFramesStart(size_class: usize) usize {$/;"	function
bucketStackTrace	$ZIGLIB/std/heap/general_purpose_allocator.zig	/fn bucketStackTrace($/;"	function
bucket_bytes	$ZIGLIB/std/heap/general_purpose_allocator.zig	/const bucket_bytes = try self.backing_allocator.alignedAlloc(u8, @alignOf(BucketHeader), bucket_size)/;"	constant
bucket_index	$ZIGLIB/std/heap/general_purpose_allocator.zig	/var bucket_index = math.log2(size_class_hint)/;"	variable
bucket_size	$ZIGLIB/std/heap/general_purpose_allocator.zig	/const bucket_size = bucketSize(size_class)/;"	constant
bucket_slice	$ZIGLIB/std/heap/general_purpose_allocator.zig	/const bucket_slice = @ptrCast([*]align(@alignOf(BucketHeader)) u8, bucket)[0..bucket_size]/;"	constant
buckets	$ZIGLIB/std/heap/general_purpose_allocator.zig	/buckets: [small_bucket_count]?*BucketHeader = [1]?*BucketHeader{null} ** small_bucket_count/;"	field
buf0	$ZIGLIB/std/rand/Xoshiro256.zig	/var buf0: [8]u8 = undefined/;"	variable
buf1	$ZIGLIB/std/rand/Xoshiro256.zig	/var buf1: [7]u8 = undefined/;"	variable
buf2	$ZIGLIB/std/mem.zig	/var buf2: [2]u8 = undefined/;"	variable
buf9	$ZIGLIB/std/mem.zig	/var buf9: [9]u8 = undefined/;"	variable
bufPrint	$ZIGLIB/std/fmt.zig	/^pub fn bufPrint(buf: []u8, comptime fmt: []const u8, args: anytype) BufPrintError![]u8 {$/;"	function
bufPrintIntToSlice	$ZIGLIB/std/fmt.zig	/^pub fn bufPrintIntToSlice(buf: []u8, value: anytype, base: u8, case: Case, options: FormatOptions) []u8 {$/;"	function
bufPrintZ	$ZIGLIB/std/fmt.zig	/^pub fn bufPrintZ(buf: []u8, comptime fmt: []const u8, args: anytype) BufPrintError![:0]u8 {$/;"	function
bufWrite	$ZIGLIB/std/Progress.zig	/^fn bufWrite(self: *Progress, end: *usize, comptime format: []const u8, args: anytype) void {$/;"	function
buf_after_reset	$ZIGLIB/std/compress/deflate/huffman_bit_writer.zig	/var buf_after_reset = ArrayList(u8).init(testing.allocator)/;"	variable
buf_align	$ZIGLIB/std/heap/WasmAllocator.zig	/const buf_align = @as(usize, 1) << @intCast(Allocator.Log2Align, log2_buf_align)/;"	constant
buf_aligned_len	$ZIGLIB/std/heap/PageAllocator.zig	/const buf_aligned_len = mem.alignForward(slice.len, mem.page_size)/;"	constant
buf_bit_count	$ZIGLIB/std/io/bit_writer.zig	/const buf_bit_count = bc: {$/;"	constant
buf_cap	$ZIGLIB/std/crypto/tls/Client.zig	/const buf_cap = (cleartext_buf_len +| (max_ciphertext_len - 1)) \/ max_ciphertext_len/;"	constant
buf_capacity	$ZIGLIB/std/Thread.zig	/const buf_capacity = @sizeOf(os.windows.UNICODE_STRING) + (@sizeOf(u16) * max_name_len)/;"	constant
buf_i	$ZIGLIB/std/zig/render.zig	/var buf_i: usize = 0/;"	variable
buf_index	$ZIGLIB/std/os/linux.zig	/buf_index: u16/;"	field
buf_len	$ZIGLIB/std/os/windows.zig	/const buf_len = @sizeOf(SYMLINK_DATA) + target_path.len * 4/;"	constant
buf_node	$ZIGLIB/std/heap/arena_allocator.zig	/const buf_node = @ptrCast(*BufNode, @alignCast(@alignOf(BufNode), ptr))/;"	constant
buf_off	$ZIGLIB/std/crypto/gimli.zig	/buf_off: usize/;"	field
buf_radix	$ZIGLIB/std/fmt.zig	/var buf_radix = radix/;"	variable
buf_reader	$ZIGLIB/std/net.zig	/var buf_reader = std.io.bufferedReader(file.reader())/;"	variable
buf_size	$ZIGLIB/std/process.zig	/var buf_size: usize = undefined/;"	variable
buf_start	$ZIGLIB/std/fmt.zig	/var buf_start = buf/;"	variable
buf_stream	$ZIGLIB/std/fmt.zig	/var buf_stream = std.io.fixedBufferStream(&buf)/;"	variable
buf_usize	$ZIGLIB/std/os/linux.zig	/const buf_usize = @ptrToInt(buf)/;"	constant
buf_utf8	$ZIGLIB/std/os/windows.zig	/var buf_utf8: [614]u8 = undefined/;"	variable
buf_value	$ZIGLIB/std/io/bit_writer.zig	/const buf_value = @intCast(Buf, value)/;"	constant
buf_writer	$ZIGLIB/std/fmt.zig	/var buf_writer = fbs.writer()/;"	variable
buf_wstr	$ZIGLIB/std/os/windows.zig	/var buf_wstr: [614]WCHAR = undefined/;"	variable
buff	$ZIGLIB/std/os/windows.zig	/var buff: []u8 = output[0..]/;"	variable
buffer	$ZIGLIB/std/zig/tokenizer.zig	/buffer: [:0]const u8/;"	field
buffer1	$ZIGLIB/std/sort.zig	/var buffer1 = Range.init(0, 0)/;"	variable
buffer2	$ZIGLIB/std/sort.zig	/var buffer2 = Range.init(0, 0)/;"	variable
buffer_cnt	$ZIGLIB/std/c/freebsd.zig	/buffer_cnt: u32/;"	field
buffer_flush_size	$ZIGLIB/std/compress/deflate/huffman_bit_writer.zig	/^const buffer_flush_size = 240/;"	constant
buffer_id	$ZIGLIB/std/os/linux/io_uring.zig	/const buffer_id = 0/;"	constant
buffer_index	$ZIGLIB/std/event/channel.zig	/buffer_index: usize/;"	field
buffer_len	$ZIGLIB/std/os/linux/io_uring.zig	/const buffer_len = 128/;"	constant
buffer_list	$ZIGLIB/std/heap/arena_allocator.zig	/buffer_list: std.SinglyLinkedList([]u8) = @as(std.SinglyLinkedList([]u8), .{})/;"	field
buffer_nodes	$ZIGLIB/std/event/channel.zig	/buffer_nodes: []T/;"	field
buffer_read	$ZIGLIB/std/os/linux/io_uring.zig	/var buffer_read = [_]u8{98} ** 20/;"	variable
buffer_recv	$ZIGLIB/std/os/linux/io_uring.zig	/var buffer_recv = [_]u8{0} ** 128/;"	variable
buffer_reset	$ZIGLIB/std/compress/deflate/deflate_fast.zig	/^const buffer_reset = math.maxInt(i32) - max_store_block_size * 2/;"	constant
buffer_selection	$ZIGLIB/std/os/linux/io_uring.zig	/buffer_selection: struct {$/;"	field
buffer_send	$ZIGLIB/std/os/linux/io_uring.zig	/const buffer_send = [_]u8{42} ** 128/;"	constant
buffer_size	$ZIGLIB/std/sort.zig	/var buffer_size = iterator.length() \/ block_size + 1/;"	variable
buffer_write	$ZIGLIB/std/os/linux/io_uring.zig	/const buffer_write = [_]u8{97} ** 20/;"	constant
bufferedReader	$ZIGLIB/std/io/buffered_reader.zig	/^pub fn bufferedReader(reader: anytype) BufferedReader(4096, @TypeOf(reader)) {$/;"	function
bufferedReaderSize	$ZIGLIB/std/io/buffered_reader.zig	/^pub fn bufferedReaderSize(comptime size: usize, reader: anytype) BufferedReader(size, @TypeOf(reader)) {$/;"	function
bufferedWriter	$ZIGLIB/std/io/buffered_writer.zig	/^pub fn bufferedWriter(underlying_stream: anytype) BufferedWriter(4096, @TypeOf(underlying_stream)) {$/;"	function
buffered_reader	$ZIGLIB/std/net.zig	/var buffered_reader = std.io.bufferedReader(file.reader())/;"	variable
buffered_writer	$ZIGLIB/std/io/buffered_atomic_file.zig	/buffered_writer: BufferedWriter/;"	field
buffers	$ZIGLIB/std/os/linux/io_uring.zig	/var buffers: [4][buffer_len]u8 = undefined/;"	variable
bufmap	$ZIGLIB/std/buf_map.zig	/var bufmap = BufMap.init(allocator)/;"	variable
bufset	$ZIGLIB/std/buf_set.zig	/var bufset = BufSet.init(std.testing.allocator)/;"	variable
bufstream	$ZIGLIB/std/fmt.zig	/var bufstream = io.fixedBufferStream(buf[0..])/;"	variable
bufused	$ZIGLIB/std/os.zig	/var bufused: usize = undefined/;"	variable
build	$ZIGLIB/std/std.zig	/^pub const build = Build/;"	constant
build_id	$ZIGLIB/std/Build/CompileStep.zig	/^build_id: ?bool = null/;"	field
build_index	$ZIGLIB/std/SemanticVersion.zig	/const build_index = std.mem.indexOfScalar(u8, extra, '+')/;"	constant
build_output_dir	$ZIGLIB/std/Build/CompileStep.zig	/const build_output_dir = mem.trimRight(u8, output_dir_nl, "\\r\\n")/;"	constant
build_root	$ZIGLIB/std/Build.zig	/const build_root = @field(deps.build_root, decl.name)/;"	constant
build_tool_version	$ZIGLIB/std/macho.zig	/^pub const build_tool_version = extern struct {$/;"	struct
build_version	$ZIGLIB/compiler_rt/os_version_check.zig	/const build_version = dyld_build_version_t{$/;"	constant
build_version_command	$ZIGLIB/std/macho.zig	/^pub const build_version_command = extern struct {$/;"	struct
build_zig	$ZIGLIB/std/Build.zig	/const build_zig = @field(deps.imports, decl.name)/;"	constant
builder	$ZIGLIB/std/Build/WriteFileStep.zig	/^builder: *std.Build/;"	field
builtin	$ZIGLIB/std/zig/tokenizer.zig	/builtin/;"	field
builtin_call	$ZIGLIB/std/zig/Ast.zig	/builtin_call/;"	field
builtin_call_comma	$ZIGLIB/std/zig/Ast.zig	/builtin_call_comma/;"	field
builtin_call_two	$ZIGLIB/std/zig/Ast.zig	/builtin_call_two/;"	field
builtin_call_two_comma	$ZIGLIB/std/zig/Ast.zig	/builtin_call_two_comma/;"	field
builtin_token	$ZIGLIB/std/zig/Parse.zig	/const builtin_token = p.assertToken(.builtin)/;"	constant
bulkHash4	$ZIGLIB/std/compress/deflate/compressor.zig	/^fn bulkHash4(b: []u8, dst: []u32) u32 {$/;"	function
bulk_hasher	$ZIGLIB/std/compress/deflate/compressor.zig	/bulk_hasher: *const fn ([]u8, []u32) u32/;"	field
bulk_mask_index	$ZIGLIB/std/bit_set.zig	/var bulk_mask_index: usize = undefined/;"	variable
bulk_memory	$ZIGLIB/std/target/wasm.zig	/bulk_memory/;"	field
bump_amt	$ZIGLIB/std/child_process.zig	/const bump_amt = 512/;"	constant
bundle	$ZIGLIB/std/crypto/Certificate/Bundle.zig	/var bundle: Bundle = .{}/;"	variable
bundle_compiler_rt	$ZIGLIB/std/Build/CompileStep.zig	/^bundle_compiler_rt: ?bool = null/;"	field
byFreq	$ZIGLIB/std/compress/deflate/huffman_code.zig	/^fn byFreq(context: void, a: LiteralNode, b: LiteralNode) bool {$/;"	function
byLiteral	$ZIGLIB/std/compress/deflate/huffman_code.zig	/^fn byLiteral(context: void, a: LiteralNode, b: LiteralNode) bool {$/;"	function
by_child_controller	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/by_child_controller: bool = false/;"	field
by_driver	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/by_driver: bool = false/;"	field
by_handle_protocol	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/by_handle_protocol: bool = false/;"	field
by_line	$ZIGLIB/std/zig/render.zig	/var by_line = std.mem.split(u8, expr_text, "\\n")/;"	variable
byte	$ZIGLIB/std/zig/render.zig	/const byte = bytes[pos]/;"	constant
byteSwap	$ZIGLIB/std/math/big/int.zig	/pub fn byteSwap(r: *Mutable, a: Const, signedness: Signedness, byte_count: usize) void {$/;"	function
byteSwapAllFields	$ZIGLIB/std/mem.zig	/^pub fn byteSwapAllFields(comptime S: type, ptr: *S) void {$/;"	function
byte_aligned_result	$ZIGLIB/std/rand.zig	/const byte_aligned_result = mem.readIntSliceLittle(ByteAlignedT, &rand_bytes)/;"	constant
byte_available	$ZIGLIB/std/compress/deflate/compressor.zig	/byte_available: bool/;"	field
byte_count	$ZIGLIB/std/target.zig	/pub const byte_count = (needed_bit_count + 7) \/ 8/;"	constant
byte_found	$ZIGLIB/std/io/find_byte_writer.zig	/byte_found: bool/;"	field
byte_i	$ZIGLIB/std/math/big/int.zig	/const byte_i = bytes[i]/;"	constant
byte_len	$ZIGLIB/std/Thread.zig	/const byte_len = math.cast(c_ushort, len * 2) orelse return error.NameTooLong/;"	constant
byte_offset	$ZIGLIB/std/heap/general_purpose_allocator.zig	/const byte_offset = @ptrToInt(old_mem.ptr) - @ptrToInt(bucket.page)/;"	constant
byte_ptr	$ZIGLIB/std/multi_array_list.zig	/const byte_ptr = self.ptrs[@enumToInt(field)]/;"	constant
byte_rev_i	$ZIGLIB/std/math/big/int.zig	/const byte_rev_i = bytes[rev_i]/;"	constant
byte_size	$ZIGLIB/std/hash/auto_hash.zig	/const byte_size = comptime std.math.divCeil(comptime_int, @bitSizeOf(Key), 8) catch unreachable/;"	constant
byte_size_in_bits	$ZIGLIB/std/mem.zig	/^pub const byte_size_in_bits = 8/;"	constant
byte_slice	$ZIGLIB/std/mem/Allocator.zig	/const byte_slice = byte_ptr[0..byte_count]/;"	constant
byte_stride	$ZIGLIB/std/dwarf/AT.zig	/^pub const byte_stride = 0x51/;"	constant
byte_to_print	$ZIGLIB/std/testing.zig	/const byte_to_print = if (std.ascii.isPrint(byte)) byte else '.'/;"	constant
bytes	$ZIGLIB/std/zig/tokenizer.zig	/const bytes = self.buffer[self.index .. self.index + length]/;"	constant
bytesAsSlice	$ZIGLIB/std/mem.zig	/^pub fn bytesAsSlice(comptime T: type, bytes: anytype) BytesAsSliceReturnType(T, @TypeOf(bytes)) {$/;"	function
bytesAsValue	$ZIGLIB/std/mem.zig	/^pub fn bytesAsValue(comptime T: type, bytes: anytype) BytesAsValueReturnType(T, @TypeOf(bytes)) {$/;"	function
bytesRequired	$ZIGLIB/std/packed_int_array.zig	/pub fn bytesRequired(int_count: usize) usize {$/;"	function
bytesToValue	$ZIGLIB/std/mem.zig	/^pub fn bytesToValue(comptime T: type, bytes: anytype) T {$/;"	function
bytesWritten	$ZIGLIB/std/compress/deflate/compressor.zig	/pub fn bytesWritten(self: *Self) usize {$/;"	function
bytes_between_hash_lookups	$ZIGLIB/std/compress/deflate/deflate_fast.zig	/var bytes_between_hash_lookups = skip >> 5/;"	variable
bytes_buf	$ZIGLIB/std/io/reader.zig	/var bytes_buf: [@sizeOf(ReturnType)]u8 = undefined/;"	variable
bytes_i	$ZIGLIB/std/crypto/tls/Client.zig	/var bytes_i: usize = 0/;"	variable
bytes_index	$ZIGLIB/std/crypto/Certificate/Bundle.zig	/const bytes_index = cb.find(subject.issuer()) orelse return error.CertificateIssuerNotFound/;"	constant
bytes_left	$ZIGLIB/std/io/limited_reader.zig	/bytes_left: u64/;"	field
bytes_left_in_page	$ZIGLIB/std/os/darwin.zig	/const bytes_left_in_page = page_size - page_offset/;"	constant
bytes_len	$ZIGLIB/std/mem/Allocator.zig	/const bytes_len = bytes.len + if (Slice.sentinel != null) @sizeOf(Slice.child) else 0/;"	constant
bytes_needed	$ZIGLIB/std/leb128.zig	/const bytes_needed = bn: {$/;"	constant
bytes_read	$ZIGLIB/std/io/reader.zig	/const bytes_read = try self.readAll(dest_slice)/;"	constant
bytes_received	$ZIGLIB/std/os/windows.zig	/var bytes_received: DWORD = undefined/;"	variable
bytes_send	$ZIGLIB/std/os/windows.zig	/var bytes_send: DWORD = undefined/;"	variable
bytes_transferred	$ZIGLIB/std/os/windows.zig	/var bytes_transferred: DWORD = undefined/;"	variable
bytes_with_zeros	$ZIGLIB/std/fmt.zig	/const bytes_with_zeros = "\\x00\\x0E\\xBA\\xBE"/;"	constant
bytes_written	$ZIGLIB/std/os/windows.zig	/var bytes_written: DWORD = undefined/;"	variable
c1pio2	$ZIGLIB/compiler_rt/cos.zig	/const c1pio2: f64 = 1.0 * math.pi \/ 2.0/;"	constant
c2pio2	$ZIGLIB/compiler_rt/cos.zig	/const c2pio2: f64 = 2.0 * math.pi \/ 2.0/;"	constant
c3_2	$ZIGLIB/std/target/x86.zig	/pub const c3_2 = CpuModel{$/;"	constant
c3pio2	$ZIGLIB/compiler_rt/cos.zig	/const c3pio2: f64 = 3.0 * math.pi \/ 2.0/;"	constant
c4pio2	$ZIGLIB/compiler_rt/cos.zig	/const c4pio2: f64 = 4.0 * math.pi \/ 2.0/;"	constant
c807	$ZIGLIB/std/target/csky.zig	/pub const c807 = CpuModel{$/;"	constant
c807f	$ZIGLIB/std/target/csky.zig	/pub const c807f = CpuModel{$/;"	constant
c810	$ZIGLIB/std/target/csky.zig	/pub const c810 = CpuModel{$/;"	constant
c810t	$ZIGLIB/std/target/csky.zig	/pub const c810t = CpuModel{$/;"	constant
c810tv	$ZIGLIB/std/target/csky.zig	/pub const c810tv = CpuModel{$/;"	constant
c810v	$ZIGLIB/std/target/csky.zig	/pub const c810v = CpuModel{$/;"	constant
c860	$ZIGLIB/std/target/csky.zig	/pub const c860 = CpuModel{$/;"	constant
c860v	$ZIGLIB/std/target/csky.zig	/pub const c860v = CpuModel{$/;"	constant
cAccumAlphaBits	$ZIGLIB/std/os/windows/gdi32.zig	/cAccumAlphaBits: BYTE/;"	field
cAccumBits	$ZIGLIB/std/os/windows/gdi32.zig	/cAccumBits: BYTE/;"	field
cAccumBlueBits	$ZIGLIB/std/os/windows/gdi32.zig	/cAccumBlueBits: BYTE/;"	field
cAccumGreenBits	$ZIGLIB/std/os/windows/gdi32.zig	/cAccumGreenBits: BYTE/;"	field
cAccumRedBits	$ZIGLIB/std/os/windows/gdi32.zig	/cAccumRedBits: BYTE/;"	field
cAlphaBits	$ZIGLIB/std/os/windows/gdi32.zig	/cAlphaBits: BYTE/;"	field
cAlphaShift	$ZIGLIB/std/os/windows/gdi32.zig	/cAlphaShift: BYTE/;"	field
cAlternateFileName	$ZIGLIB/std/os/windows.zig	/cAlternateFileName: [14]u16/;"	field
cAuxBuffers	$ZIGLIB/std/os/windows/gdi32.zig	/cAuxBuffers: BYTE/;"	field
cBlueBits	$ZIGLIB/std/os/windows/gdi32.zig	/cBlueBits: BYTE/;"	field
cBlueShift	$ZIGLIB/std/os/windows/gdi32.zig	/cBlueShift: BYTE/;"	field
cColorBits	$ZIGLIB/std/os/windows/gdi32.zig	/cColorBits: BYTE/;"	field
cDepthBits	$ZIGLIB/std/os/windows/gdi32.zig	/cDepthBits: BYTE/;"	field
cFileName	$ZIGLIB/std/os/windows.zig	/cFileName: [260]u16/;"	field
cGreenBits	$ZIGLIB/std/os/windows/gdi32.zig	/cGreenBits: BYTE/;"	field
cGreenShift	$ZIGLIB/std/os/windows/gdi32.zig	/cGreenShift: BYTE/;"	field
cMov	$ZIGLIB/std/crypto/pcurves/secp256k1.zig	/fn cMov(p: *Secp256k1, a: Secp256k1, c: u1) void {$/;"	function
cRedBits	$ZIGLIB/std/os/windows/gdi32.zig	/cRedBits: BYTE/;"	field
cRedShift	$ZIGLIB/std/os/windows/gdi32.zig	/cRedShift: BYTE/;"	field
cStencilBits	$ZIGLIB/std/os/windows/gdi32.zig	/cStencilBits: BYTE/;"	field
cStrToPrefixedFileW	$ZIGLIB/std/os/windows.zig	/^pub fn cStrToPrefixedFileW(s: [*:0]const u8) !PathSpace {$/;"	function
cSwap2	$ZIGLIB/std/crypto/25519/field.zig	/pub fn cSwap2(a0: *Fe, b0: *Fe, a1: *Fe, b1: *Fe, c: u64) void {$/;"	function
cWriter	$ZIGLIB/std/io/c_writer.zig	/^pub fn cWriter(c_file: *std.c.FILE) CWriter {$/;"	function
cWriterWrite	$ZIGLIB/std/io/c_writer.zig	/^fn cWriterWrite(c_file: *std.c.FILE, bytes: []const u8) std.fs.File.WriteError!usize {$/;"	function
c_allocator	$ZIGLIB/std/heap.zig	/^pub const c_allocator = Allocator{$/;"	constant
c_allocator_vtable	$ZIGLIB/std/heap.zig	/^const c_allocator_vtable = Allocator.VTable{$/;"	constant
c_cc	$ZIGLIB/std/c/solaris.zig	/c_cc: [NCCS]cc_t/;"	field
c_cflag	$ZIGLIB/std/c/solaris.zig	/c_cflag: tcflag_t/;"	field
c_container	$ZIGLIB/std/zig/Parse.zig	/const c_container = p.parseCStyleContainer() catch |err| switch (err) {$/;"	constant
c_digits_lut	$ZIGLIB/std/fmt/errol.zig	/^pub const c_digits_lut = [_]u8{$/;"	constant
c_err	$ZIGLIB/std/os.zig	/const c_err = if (std.c.getcwd(out_buffer.ptr, out_buffer.len)) |_| 0 else std.c._errno().*/;"	constant
c_iflag	$ZIGLIB/std/c/solaris.zig	/c_iflag: tcflag_t/;"	field
c_ispeed	$ZIGLIB/std/c/haiku.zig	/c_ispeed: speed_t/;"	field
c_lflag	$ZIGLIB/std/c/solaris.zig	/c_lflag: tcflag_t/;"	field
c_line	$ZIGLIB/std/c/haiku.zig	/c_line: cc_t/;"	field
c_macros	$ZIGLIB/std/Build/TranslateCStep.zig	/^c_macros: std.ArrayList([]const u8)/;"	field
c_oflag	$ZIGLIB/std/c/solaris.zig	/c_oflag: tcflag_t/;"	field
c_ospeed	$ZIGLIB/std/c/haiku.zig	/c_ospeed: speed_t/;"	field
c_pointer	$ZIGLIB/std/mem.zig	/c_pointer: [*c]u8/;"	field
c_ptr	$ZIGLIB/std/mem.zig	/const c_ptr = @as([*c]u16, ptr)/;"	constant
c_source_file	$ZIGLIB/std/Build/CompileStep.zig	/const c_source_file = self.builder.allocator.create(CSourceFile) catch @panic("OOM")/;"	constant
c_source_files	$ZIGLIB/std/Build/CompileStep.zig	/const c_source_files = self.builder.allocator.create(CSourceFiles) catch @panic("OOM")/;"	constant
c_std	$ZIGLIB/std/Build/CompileStep.zig	/^c_std: std.Build.CStd/;"	field
c_style_container	$ZIGLIB/std/zig/Ast.zig	/c_style_container/;"	field
c_type_alignment	$ZIGLIB/std/target.zig	/pub fn c_type_alignment(target: Target, c_type: CType) u16 {$/;"	function
c_type_bit_size	$ZIGLIB/std/target.zig	/pub fn c_type_bit_size(target: Target, c_type: CType) u16 {$/;"	function
c_type_byte_size	$ZIGLIB/std/target.zig	/pub fn c_type_byte_size(t: Target, c_type: CType) u16 {$/;"	function
c_type_preferred_alignment	$ZIGLIB/std/target.zig	/pub fn c_type_preferred_alignment(target: Target, c_type: CType) u16 {$/;"	function
ca_bundle	$ZIGLIB/std/http/Client.zig	/^ca_bundle: std.crypto.Certificate.Bundle = .{}/;"	field
cabac	$ZIGLIB/std/target/hexagon.zig	/cabac/;"	field
cache	$ZIGLIB/std/target/csky.zig	/cache/;"	field
cacheString	$ZIGLIB/std/fmt.zig	/^fn cacheString(str: anytype) []const u8 {$/;"	function
cache_dir	$ZIGLIB/std/testing.zig	/var cache_dir = cwd.makeOpenPath("zig-cache", .{}) catch$/;"	variable
cache_line	$ZIGLIB/std/atomic.zig	/^pub const cache_line = switch (builtin.cpu.arch) {$/;"	constant
cache_line_size	$ZIGLIB/compiler_rt/atomics.zig	/^const cache_line_size = 64/;"	constant
cache_root	$ZIGLIB/std/Build.zig	/^cache_root: []const u8/;"	field
cacheable	$ZIGLIB/std/http.zig	/pub fn cacheable(self: Method) bool {$/;"	function
cachectl	$ZIGLIB/std/os/linux/syscalls.zig	/cachectl = Linux + 198/;"	field
cached_pages	$ZIGLIB/std/c/haiku.zig	/cached_pages: u64/;"	field
cacheflush	$ZIGLIB/std/os/linux/syscalls.zig	/cacheflush = arm_base + 2/;"	field
caddr_t	$ZIGLIB/std/c/darwin.zig	/^pub const caddr_t = ?[*]u8/;"	constant
calcDivLimbsBufferLen	$ZIGLIB/std/math/big/int.zig	/^pub fn calcDivLimbsBufferLen(a_len: usize, b_len: usize) usize {$/;"	function
calcLimbLen	$ZIGLIB/std/math/big/int.zig	/^pub fn calcLimbLen(scalar: anytype) usize {$/;"	function
calcMulLimbsBufferLen	$ZIGLIB/std/math/big/int.zig	/^pub fn calcMulLimbsBufferLen(a_len: usize, b_len: usize, aliases: usize) usize {$/;"	function
calcMulWrapLimbsBufferLen	$ZIGLIB/std/math/big/int.zig	/^pub fn calcMulWrapLimbsBufferLen(bit_count: usize, a_len: usize, b_len: usize, aliases: usize) usize {$/;"	function
calcPowLimbsBufferLen	$ZIGLIB/std/math/big/int.zig	/^pub fn calcPowLimbsBufferLen(a_bit_count: usize, y: usize) usize {$/;"	function
calcSetStringLimbCount	$ZIGLIB/std/math/big/int.zig	/^pub fn calcSetStringLimbCount(base: u8, string_len: usize) usize {$/;"	function
calcSetStringLimbsBufferLen	$ZIGLIB/std/math/big/int.zig	/^pub fn calcSetStringLimbsBufferLen(base: u8, string_len: usize) usize {$/;"	function
calcSize	$ZIGLIB/std/crypto/scrypt.zig	/pub fn calcSize(params: anytype) usize {$/;"	function
calcSizeForSlice	$ZIGLIB/std/base64.zig	/pub fn calcSizeForSlice(decoder: *const Base64Decoder, source: []const u8) Error!usize {$/;"	function
calcSizeUpperBound	$ZIGLIB/std/base64.zig	/pub fn calcSizeUpperBound(decoder_with_ignore: *const Base64DecoderWithIgnore, source_len: usize) Error!usize {$/;"	function
calcToStringLimbsBufferLen	$ZIGLIB/std/math/big/int.zig	/^pub fn calcToStringLimbsBufferLen(a_len: usize, base: u8) usize {$/;"	function
calcTwosCompLimbCount	$ZIGLIB/std/math/big/int.zig	/^pub fn calcTwosCompLimbCount(bit_count: usize) usize {$/;"	function
calcUtf16LeLen	$ZIGLIB/std/unicode.zig	/^pub fn calcUtf16LeLen(utf8: []const u8) CalcUtf16LeLenError!usize {$/;"	function
calculateCrc32	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/calculateCrc32: *const fn (data: [*]const u8, data_size: usize, *u32) callconv(.C) Status/;"	field
calculateMonthDay	$ZIGLIB/std/time/epoch.zig	/pub fn calculateMonthDay(self: YearAndDay) MonthAndDay {$/;"	function
calculateYearDay	$ZIGLIB/std/time/epoch.zig	/pub fn calculateYearDay(self: EpochDay) YearAndDay {$/;"	function
call	$ZIGLIB/std/zig/Ast.zig	/call/;"	field
call2	$ZIGLIB/std/dwarf/OP.zig	/^pub const call2 = 0x98/;"	constant
call4	$ZIGLIB/std/dwarf/OP.zig	/^pub const call4 = 0x99/;"	constant
callFn	$ZIGLIB/std/Thread.zig	/^fn callFn(comptime f: anytype, args: anytype) switch (Impl) {$/;"	function
callFull	$ZIGLIB/std/zig/Ast.zig	/^pub fn callFull(tree: Ast, node: Node.Index) full.Call {$/;"	function
callMain	$ZIGLIB/std/start.zig	/^pub fn callMain() u8 {$/;"	function
callMain2	$ZIGLIB/std/start.zig	/^fn callMain2() noreturn {$/;"	function
callMainAsync	$ZIGLIB/std/start.zig	/^fn callMainAsync(loop: *std.event.Loop) callconv(.Async) u8 {$/;"	function
callMainWithArgs	$ZIGLIB/std/start.zig	/^fn callMainWithArgs(argc: usize, argv: [*][*:0]u8, envp: [][*:0]u8) u8 {$/;"	function
callOne	$ZIGLIB/std/zig/Ast.zig	/^pub fn callOne(tree: Ast, buffer: *[1]Node.Index, node: Node.Index) full.Call {$/;"	function
callSlow	$ZIGLIB/std/once.zig	/fn callSlow(self: *@This()) void {$/;"	function
callWSAStartup	$ZIGLIB/std/os/windows.zig	/^pub fn callWSAStartup() !void {$/;"	function
callWinMainAsync	$ZIGLIB/std/start.zig	/^fn callWinMainAsync(loop: *std.event.Loop) callconv(.Async) std.os.windows.INT {$/;"	function
call_addr	$ZIGLIB/std/os/linux.zig	/call_addr: u64/;"	field
call_all_calls	$ZIGLIB/std/dwarf/AT.zig	/^pub const call_all_calls = 0x7a/;"	constant
call_all_source_calls	$ZIGLIB/std/dwarf/AT.zig	/^pub const call_all_source_calls = 0x7b/;"	constant
call_all_tail_calls	$ZIGLIB/std/dwarf/AT.zig	/^pub const call_all_tail_calls = 0x7c/;"	constant
call_column	$ZIGLIB/std/dwarf/AT.zig	/^pub const call_column = 0x57/;"	constant
call_comma	$ZIGLIB/std/zig/Ast.zig	/call_comma/;"	field
call_data_location	$ZIGLIB/std/dwarf/AT.zig	/^pub const call_data_location = 0x85/;"	constant
call_data_value	$ZIGLIB/std/dwarf/AT.zig	/^pub const call_data_value = 0x86/;"	constant
call_file	$ZIGLIB/std/dwarf/AT.zig	/^pub const call_file = 0x58/;"	constant
call_frame_cfa	$ZIGLIB/std/dwarf/OP.zig	/^pub const call_frame_cfa = 0x9c/;"	constant
call_indirect	$ZIGLIB/std/wasm.zig	/call_indirect = 0x11/;"	field
call_line	$ZIGLIB/std/dwarf/AT.zig	/^pub const call_line = 0x59/;"	constant
call_one	$ZIGLIB/std/zig/Ast.zig	/call_one/;"	field
call_one_comma	$ZIGLIB/std/zig/Ast.zig	/call_one_comma/;"	field
call_origin	$ZIGLIB/std/dwarf/AT.zig	/^pub const call_origin = 0x7f/;"	constant
call_parameter	$ZIGLIB/std/dwarf/AT.zig	/^pub const call_parameter = 0x80/;"	constant
call_pc	$ZIGLIB/std/dwarf/AT.zig	/^pub const call_pc = 0x81/;"	constant
call_ref	$ZIGLIB/std/dwarf/OP.zig	/^pub const call_ref = 0x9a/;"	constant
call_return_pc	$ZIGLIB/std/dwarf/AT.zig	/^pub const call_return_pc = 0x7d/;"	constant
call_saved_x10	$ZIGLIB/std/target/aarch64.zig	/call_saved_x10/;"	field
call_saved_x11	$ZIGLIB/std/target/aarch64.zig	/call_saved_x11/;"	field
call_saved_x12	$ZIGLIB/std/target/aarch64.zig	/call_saved_x12/;"	field
call_saved_x13	$ZIGLIB/std/target/aarch64.zig	/call_saved_x13/;"	field
call_saved_x14	$ZIGLIB/std/target/aarch64.zig	/call_saved_x14/;"	field
call_saved_x15	$ZIGLIB/std/target/aarch64.zig	/call_saved_x15/;"	field
call_saved_x18	$ZIGLIB/std/target/aarch64.zig	/call_saved_x18/;"	field
call_saved_x8	$ZIGLIB/std/target/aarch64.zig	/call_saved_x8/;"	field
call_saved_x9	$ZIGLIB/std/target/aarch64.zig	/call_saved_x9/;"	field
call_sf	$ZIGLIB/std/os.zig	/const call_sf = comptime if (builtin.link_libc)$/;"	constant
call_site	$ZIGLIB/std/dwarf/TAG.zig	/^pub const call_site = 0x48/;"	constant
call_site_parameter	$ZIGLIB/std/dwarf/TAG.zig	/^pub const call_site_parameter = 0x49/;"	constant
call_tail_call	$ZIGLIB/std/dwarf/AT.zig	/^pub const call_tail_call = 0x82/;"	constant
call_target	$ZIGLIB/std/dwarf/AT.zig	/^pub const call_target = 0x83/;"	constant
call_target_clobbered	$ZIGLIB/std/dwarf/AT.zig	/^pub const call_target_clobbered = 0x84/;"	constant
call_value	$ZIGLIB/std/dwarf/AT.zig	/^pub const call_value = 0x7e/;"	constant
call_wWinMain	$ZIGLIB/std/start.zig	/^pub fn call_wWinMain() std.os.windows.INT {$/;"	function
callable	$ZIGLIB/std/target.zig	/callable/;"	field
callback	$ZIGLIB/std/debug.zig	/fn callback(info: *os.dl_phdr_info, size: usize, context: *CtxTy) !void {$/;"	function
callbackC	$ZIGLIB/std/os.zig	/fn callbackC(info: *dl_phdr_info, size: usize, data: ?*anyopaque) callconv(.C) c_int {$/;"	function
callconv_expr	$ZIGLIB/std/zig/render.zig	/const callconv_expr = if (tree.nodes.items(.tag)[fn_proto] == .fn_proto_one)$/;"	constant
callconv_lparen	$ZIGLIB/std/zig/render.zig	/const callconv_lparen = tree.firstToken(fn_proto.ast.callconv_expr) - 1/;"	constant
callconv_rparen	$ZIGLIB/std/zig/render.zig	/const callconv_rparen = tree.lastToken(fn_proto.ast.callconv_expr) + 1/;"	constant
calling_convention	$ZIGLIB/std/dwarf/AT.zig	/^pub const calling_convention = 0x36/;"	constant
can_execv	$ZIGLIB/std/process.zig	/^pub const can_execv = switch (builtin.os.tag) {$/;"	constant
can_spawn	$ZIGLIB/std/process.zig	/^pub const can_spawn = switch (builtin.os.tag) {$/;"	constant
can_yield	$ZIGLIB/std/atomic.zig	/const can_yield = comptime std.Target.arm.featureSetHasAny(builtin.target.cpu.features, .{$/;"	constant
cancel	$ZIGLIB/std/os/uefi/protocols/udp6_protocol.zig	/pub fn cancel(self: *const Udp6Protocol, token: ?*Udp6CompletionToken) Status {$/;"	function
cancelOnNextTick	$ZIGLIB/std/event/loop.zig	/pub fn cancelOnNextTick(self: *Loop, node: *NextTickNode) void {$/;"	function
cancelled	$ZIGLIB/std/fs/watch.zig	/cancelled: bool = false/;"	field
candidate	$ZIGLIB/std/compress/deflate/deflate_fast.zig	/var candidate: TableEntry = undefined/;"	variable
candidate_var	$ZIGLIB/std/Build/CheckObjectStep.zig	/var candidate_var: ?struct { name: []const u8, value: u64 } = null/;"	variable
cannonlake	$ZIGLIB/std/target/x86.zig	/pub const cannonlake = CpuModel{$/;"	constant
canon	$ZIGLIB/std/net.zig	/var canon = std.ArrayList(u8).init(arena)/;"	variable
canon_name	$ZIGLIB/std/net.zig	/var canon_name = name/;"	variable
canonname	$ZIGLIB/std/os/windows/ws2_32.zig	/canonname: ?[*:0]u8/;"	field
cap_rights	$ZIGLIB/std/c/freebsd.zig	/cap_rights: cap_rights/;"	field
cap_t	$ZIGLIB/std/os/linux.zig	/^pub const cap_t = extern struct {$/;"	struct
cap_user_data_t	$ZIGLIB/std/os/linux.zig	/^pub const cap_user_data_t = extern struct {$/;"	struct
cap_user_header_t	$ZIGLIB/std/os/linux.zig	/^pub const cap_user_header_t = extern struct {$/;"	struct
capable_io_mode	$ZIGLIB/std/fs/file.zig	/capable_io_mode: io.ModeOverride = io.default_mode/;"	field
capacity	$ZIGLIB/std/priority_queue.zig	/pub fn capacity(self: Self) usize {$/;"	function
capacityForSize	$ZIGLIB/std/hash_map.zig	/fn capacityForSize(size: Size) Size {$/;"	function
capacityInBytes	$ZIGLIB/std/multi_array_list.zig	/fn capacityInBytes(capacity: usize) usize {$/;"	function
capacityIndexSize	$ZIGLIB/std/array_hash_map.zig	/^fn capacityIndexSize(bit_index: u8) usize {$/;"	function
capacityIndexType	$ZIGLIB/std/array_hash_map.zig	/fn capacityIndexType(header: IndexHeader) CapacityIndexType {$/;"	function
capacity_vector	$ZIGLIB/std/multi_array_list.zig	/const capacity_vector = @splat(sizes.bytes.len, capacity)/;"	constant
capget	$ZIGLIB/std/os/linux/syscalls.zig	/capget = Linux + 204/;"	field
caps	$ZIGLIB/std/array_hash_map.zig	/var caps: [max_bit_index + 1]u32 = undefined/;"	variable
caps_lock_active	$ZIGLIB/std/os/uefi/protocols/simple_text_input_ex_protocol.zig	/caps_lock_active: bool/;"	field
capset	$ZIGLIB/std/os/linux/syscalls.zig	/capset = Linux + 205/;"	field
capsuleGuid	$ZIGLIB/std/os/uefi/tables/runtime_services.zig	/capsuleGuid: Guid align(8)/;"	field
capsuleImageSize	$ZIGLIB/std/os/uefi/tables/runtime_services.zig	/capsuleImageSize: u32/;"	field
captureStackTrace	$ZIGLIB/std/heap/general_purpose_allocator.zig	/fn captureStackTrace(self: *LargeAlloc, ret_addr: usize, trace_kind: TraceKind) void {$/;"	function
caret	$ZIGLIB/std/zig/tokenizer.zig	/caret/;"	field
caret_equal	$ZIGLIB/std/zig/tokenizer.zig	/caret_equal/;"	field
carmel	$ZIGLIB/std/target/aarch64.zig	/pub const carmel = CpuModel{$/;"	constant
carrizo	$ZIGLIB/std/target/amdgpu.zig	/pub const carrizo = CpuModel{$/;"	constant
carry	$ZIGLIB/std/math/big/int.zig	/var carry: u1 = 1/;"	variable
carry0	$ZIGLIB/std/crypto/25519/scalar.zig	/const carry0 = z01 >> 56/;"	constant
carry1	$ZIGLIB/std/crypto/25519/scalar.zig	/const carry1 = (z11 + c00) >> 56/;"	constant
carry10	$ZIGLIB/std/crypto/25519/scalar.zig	/const carry10 = (z12 + c01) >> 56/;"	constant
carry11	$ZIGLIB/std/crypto/25519/scalar.zig	/const carry11 = (z22 + c11) >> 56/;"	constant
carry12	$ZIGLIB/std/crypto/25519/scalar.zig	/const carry12 = (z32 + c21) >> 56/;"	constant
carry13	$ZIGLIB/std/crypto/25519/scalar.zig	/const carry13 = (z42 + c31) >> 56/;"	constant
carry14	$ZIGLIB/std/crypto/25519/scalar.zig	/const carry14 = (z5 + c41) >> 56/;"	constant
carry15	$ZIGLIB/std/crypto/25519/scalar.zig	/const carry15 = (z6 + c5) >> 56/;"	constant
carry16	$ZIGLIB/std/crypto/25519/scalar.zig	/const carry16 = (z7 + c6) >> 56/;"	constant
carry17	$ZIGLIB/std/crypto/25519/scalar.zig	/const carry17 = (z8 + c7) >> 56/;"	constant
carry18	$ZIGLIB/std/crypto/25519/scalar.zig	/const carry18 = xy00 >> 56/;"	constant
carry19	$ZIGLIB/std/crypto/25519/scalar.zig	/const carry19 = (xy01 + xy10 + c0) >> 56/;"	constant
carry2	$ZIGLIB/std/crypto/25519/scalar.zig	/const carry2 = (z21 + c10) >> 56/;"	constant
carry20	$ZIGLIB/std/crypto/25519/scalar.zig	/const carry20 = (xy02 + xy11 + xy20 + c12) >> 56/;"	constant
carry3	$ZIGLIB/std/crypto/25519/scalar.zig	/const carry3 = (z31 + c20) >> 56/;"	constant
carry4	$ZIGLIB/std/crypto/25519/scalar.zig	/const carry4 = (z41 + c30) >> 56/;"	constant
carry5	$ZIGLIB/std/crypto/25519/scalar.zig	/const carry5 = (z50 + c40) >> 56/;"	constant
carry6	$ZIGLIB/std/crypto/25519/scalar.zig	/const carry6 = (z60 + c50) >> 56/;"	constant
carry7	$ZIGLIB/std/crypto/25519/scalar.zig	/const carry7 = (z70 + c60) >> 56/;"	constant
carry8	$ZIGLIB/std/crypto/25519/scalar.zig	/const carry8 = (z80 + c70) >> 56/;"	constant
carry9	$ZIGLIB/std/crypto/25519/scalar.zig	/const carry9 = z02 >> 56/;"	constant
carry_truncated	$ZIGLIB/std/math/big/int.zig	/var carry_truncated = false/;"	variable
cascadelake	$ZIGLIB/std/target/x86.zig	/pub const cascadelake = CpuModel{$/;"	constant
case	$ZIGLIB/std/math/big/int.zig	/comptime var case: std.fmt.Case = .lower/;"	variable
cases	$ZIGLIB/std/zig/system/darwin/macos.zig	/const cases = .{$/;"	constant
cast	$ZIGLIB/std/zig/c_translation.zig	/^pub fn cast(comptime DestType: type, target: anytype) DestType {$/;"	function
castInt	$ZIGLIB/std/zig/c_translation.zig	/^fn castInt(comptime DestType: type, target: anytype) DestType {$/;"	function
castPtr	$ZIGLIB/std/zig/c_translation.zig	/^fn castPtr(comptime DestType: type, target: anytype) DestType {$/;"	function
castToPtr	$ZIGLIB/std/zig/c_translation.zig	/^fn castToPtr(comptime DestType: type, comptime SourceType: type, target: anytype) DestType {$/;"	function
cast_target	$ZIGLIB/std/mem.zig	/const cast_target = CopyPtrAttrs(Slice, .Many, u8)/;"	constant
cast_to_null	$ZIGLIB/std/builtin.zig	/pub const cast_to_null = "cast causes pointer to be null"/;"	constant
cast_truncated_data	$ZIGLIB/std/builtin.zig	/pub const cast_truncated_data = "integer cast truncated bits"/;"	constant
casted	$ZIGLIB/std/zig/c_translation.zig	/var casted = Macros.CAST_OR_CALL(u8, arg)/;"	variable
casted_offset	$ZIGLIB/std/dwarf.zig	/const casted_offset = math.cast(usize, offset) orelse return badDwarf()/;"	constant
casted_ptr	$ZIGLIB/std/zig/c_translation.zig	/var casted_ptr = Macros.CAST_OR_CALL(*u8, &s)/;"	variable
casted_shift_amt	$ZIGLIB/std/math.zig	/const casted_shift_amt = blk: {$/;"	constant
catch	$ZIGLIB/std/zig/Ast.zig	/@"catch"/;"	field
catch_block	$ZIGLIB/std/dwarf/TAG.zig	/^pub const catch_block = 0x25/;"	constant
cbCertEncoded	$ZIGLIB/std/os/windows/crypt32.zig	/cbCertEncoded: DWORD/;"	field
cbClsExtra	$ZIGLIB/std/os/windows/user32.zig	/cbClsExtra: i32 = 0/;"	field
cbReserved2	$ZIGLIB/std/os/windows.zig	/cbReserved2: WORD/;"	field
cbSize	$ZIGLIB/std/os/windows/user32.zig	/cbSize: UINT = @sizeOf(WNDCLASSEXW)/;"	field
cbWndExtra	$ZIGLIB/std/os/windows/user32.zig	/cbWndExtra: i32 = 0/;"	field
cbrt	$ZIGLIB/std/math/cbrt.zig	/^pub fn cbrt(x: anytype) @TypeOf(x) {$/;"	function
cbrt32	$ZIGLIB/std/math/cbrt.zig	/^fn cbrt32(x: f32) f32 {$/;"	function
cbrt64	$ZIGLIB/std/math/cbrt.zig	/^fn cbrt64(x: f64) f64 {$/;"	function
cc_t	$ZIGLIB/std/os/linux.zig	/^pub const cc_t = u8/;"	constant
ccdp	$ZIGLIB/std/target/aarch64.zig	/ccdp/;"	field
ccidx	$ZIGLIB/std/target/aarch64.zig	/ccidx/;"	field
ccpp	$ZIGLIB/std/target/aarch64.zig	/ccpp/;"	field
ccrt	$ZIGLIB/std/target/csky.zig	/ccrt/;"	field
cdata	$ZIGLIB/std/crypto/bcrypt.zig	/var cdata: [8]u32 = undefined/;"	variable
cdecp0	$ZIGLIB/std/target/arm.zig	/cdecp0/;"	field
cdecp1	$ZIGLIB/std/target/arm.zig	/cdecp1/;"	field
cdecp2	$ZIGLIB/std/target/arm.zig	/cdecp2/;"	field
cdecp3	$ZIGLIB/std/target/arm.zig	/cdecp3/;"	field
cdecp4	$ZIGLIB/std/target/arm.zig	/cdecp4/;"	field
cdecp5	$ZIGLIB/std/target/arm.zig	/cdecp5/;"	field
cdecp6	$ZIGLIB/std/target/arm.zig	/cdecp6/;"	field
cdecp7	$ZIGLIB/std/target/arm.zig	/cdecp7/;"	field
ceil	$ZIGLIB/std/math.zig	/^pub inline fn ceil(value: anytype) @TypeOf(value) {$/;"	function
ceilPowerOfTwo	$ZIGLIB/std/math.zig	/^pub fn ceilPowerOfTwo(comptime T: type, value: T) (error{Overflow}!T) {$/;"	function
ceilPowerOfTwoAssert	$ZIGLIB/std/math.zig	/^pub fn ceilPowerOfTwoAssert(comptime T: type, value: T) T {$/;"	function
ceilPowerOfTwoPromote	$ZIGLIB/std/math.zig	/^pub fn ceilPowerOfTwoPromote(comptime T: type, value: T) std.meta.Int(@typeInfo(T).Int.signedness, @typeInfo(T).Int.bits + 1) {$/;"	function
ceilf	$ZIGLIB/compiler_rt/ceil.zig	/^pub fn ceilf(x: f32) callconv(.C) f32 {$/;"	function
ceiling	$ZIGLIB/std/c/solaris.zig	/ceiling: u8 = 0/;"	field
ceill	$ZIGLIB/compiler_rt/ceil.zig	/^pub fn ceill(x: c_longdouble) callconv(.C) c_longdouble {$/;"	function
ceilq	$ZIGLIB/compiler_rt/ceil.zig	/^pub fn ceilq(x: f128) callconv(.C) f128 {$/;"	function
cert_bytes	$ZIGLIB/std/crypto/Certificate.zig	/const cert_bytes = cert.buffer/;"	constant
cert_dir_paths	$ZIGLIB/std/crypto/Certificate/Bundle.zig	/const cert_dir_paths = [_][]const u8{$/;"	constant
cert_encoding	$ZIGLIB/std/crypto/Certificate/Bundle/macos.zig	/cert_encoding: u32/;"	field
cert_end	$ZIGLIB/std/crypto/Certificate/Bundle.zig	/const cert_end = mem.indexOfPos(u8, encoded_bytes, cert_start, end_marker) orelse$/;"	constant
cert_file_paths	$ZIGLIB/std/crypto/Certificate/Bundle.zig	/const cert_file_paths = [_][]const u8{$/;"	constant
cert_header	$ZIGLIB/std/crypto/Certificate/Bundle/macos.zig	/const cert_header = try reader.readStructBig(X509CertHeader)/;"	constant
cert_index	$ZIGLIB/std/crypto/tls/Client.zig	/var cert_index: usize = 0/;"	variable
cert_req_ctx_len	$ZIGLIB/std/crypto/tls/Client.zig	/const cert_req_ctx_len = hsd.decode(u8)/;"	constant
cert_size	$ZIGLIB/std/crypto/tls/Client.zig	/const cert_size = certs_decoder.decode(u24)/;"	constant
cert_start	$ZIGLIB/std/crypto/Certificate/Bundle/macos.zig	/const cert_start = @intCast(u32, cb.bytes.items.len)/;"	constant
cert_type	$ZIGLIB/std/crypto/Certificate/Bundle/macos.zig	/cert_type: u32/;"	field
certd	$ZIGLIB/std/crypto/tls/Client.zig	/var certd = try certs_decoder.sub(cert_size)/;"	variable
certificate	$ZIGLIB/std/crypto/tls/Client.zig	/certificate/;"	field
certificate_authorities	$ZIGLIB/std/crypto/tls.zig	/certificate_authorities = 47/;"	field
certificate_expired	$ZIGLIB/std/crypto/tls.zig	/certificate_expired = 45/;"	field
certificate_policies	$ZIGLIB/std/crypto/Certificate.zig	/certificate_policies/;"	field
certificate_request	$ZIGLIB/std/crypto/tls.zig	/certificate_request = 13/;"	field
certificate_required	$ZIGLIB/std/crypto/tls.zig	/certificate_required = 116/;"	field
certificate_revoked	$ZIGLIB/std/crypto/tls.zig	/certificate_revoked = 44/;"	field
certificate_unknown	$ZIGLIB/std/crypto/tls.zig	/certificate_unknown = 46/;"	field
certificate_verify	$ZIGLIB/std/crypto/tls.zig	/certificate_verify = 15/;"	field
certs_decoder	$ZIGLIB/std/crypto/tls/Client.zig	/var certs_decoder = try hsd.sub(certs_size)/;"	variable
certs_size	$ZIGLIB/std/crypto/tls/Client.zig	/const certs_size = hsd.decode(u24)/;"	constant
cexp_overflow	$ZIGLIB/std/math/complex/exp.zig	/const cexp_overflow = 0x43400074/;"	constant
cflag	$ZIGLIB/std/os/linux.zig	/cflag: tcflag_t/;"	field
cgnl	$ZIGLIB/std/compress/deflate/huffman_bit_writer.zig	/var cgnl = codegen[0..num_literals]/;"	variable
cgroup_array	$ZIGLIB/std/os/linux/bpf.zig	/cgroup_array/;"	field
cgroup_device	$ZIGLIB/std/os/linux/bpf.zig	/cgroup_device/;"	field
cgroup_getsockopt	$ZIGLIB/std/os/linux/bpf.zig	/cgroup_getsockopt/;"	field
cgroup_inet4_bind	$ZIGLIB/std/os/linux/bpf.zig	/cgroup_inet4_bind/;"	field
cgroup_inet4_connect	$ZIGLIB/std/os/linux/bpf.zig	/cgroup_inet4_connect/;"	field
cgroup_inet4_getpeername	$ZIGLIB/std/os/linux/bpf.zig	/cgroup_inet4_getpeername/;"	field
cgroup_inet4_getsockname	$ZIGLIB/std/os/linux/bpf.zig	/cgroup_inet4_getsockname/;"	field
cgroup_inet4_post_bind	$ZIGLIB/std/os/linux/bpf.zig	/cgroup_inet4_post_bind/;"	field
cgroup_inet6_bind	$ZIGLIB/std/os/linux/bpf.zig	/cgroup_inet6_bind/;"	field
cgroup_inet6_connect	$ZIGLIB/std/os/linux/bpf.zig	/cgroup_inet6_connect/;"	field
cgroup_inet6_getpeername	$ZIGLIB/std/os/linux/bpf.zig	/cgroup_inet6_getpeername/;"	field
cgroup_inet6_getsockname	$ZIGLIB/std/os/linux/bpf.zig	/cgroup_inet6_getsockname/;"	field
cgroup_inet6_post_bind	$ZIGLIB/std/os/linux/bpf.zig	/cgroup_inet6_post_bind/;"	field
cgroup_inet_egress	$ZIGLIB/std/os/linux/bpf.zig	/cgroup_inet_egress/;"	field
cgroup_inet_ingress	$ZIGLIB/std/os/linux/bpf.zig	/cgroup_inet_ingress/;"	field
cgroup_inet_sock_create	$ZIGLIB/std/os/linux/bpf.zig	/cgroup_inet_sock_create/;"	field
cgroup_inet_sock_release	$ZIGLIB/std/os/linux/bpf.zig	/cgroup_inet_sock_release/;"	field
cgroup_setsockopt	$ZIGLIB/std/os/linux/bpf.zig	/cgroup_setsockopt/;"	field
cgroup_skb	$ZIGLIB/std/os/linux/bpf.zig	/cgroup_skb/;"	field
cgroup_sock	$ZIGLIB/std/os/linux/bpf.zig	/cgroup_sock/;"	field
cgroup_sock_addr	$ZIGLIB/std/os/linux/bpf.zig	/cgroup_sock_addr/;"	field
cgroup_sock_ops	$ZIGLIB/std/os/linux/bpf.zig	/cgroup_sock_ops/;"	field
cgroup_sockopt	$ZIGLIB/std/os/linux/bpf.zig	/cgroup_sockopt/;"	field
cgroup_storage	$ZIGLIB/std/os/linux/bpf.zig	/cgroup_storage/;"	field
cgroup_sysctl	$ZIGLIB/std/os/linux/bpf.zig	/cgroup_sysctl/;"	field
cgroup_udp4_recvmsg	$ZIGLIB/std/os/linux/bpf.zig	/cgroup_udp4_recvmsg/;"	field
cgroup_udp4_sendmsg	$ZIGLIB/std/os/linux/bpf.zig	/cgroup_udp4_sendmsg/;"	field
cgroup_udp6_recvmsg	$ZIGLIB/std/os/linux/bpf.zig	/cgroup_udp6_recvmsg/;"	field
cgroup_udp6_sendmsg	$ZIGLIB/std/os/linux/bpf.zig	/cgroup_udp6_sendmsg/;"	field
ch_addralign	$ZIGLIB/std/elf.zig	/ch_addralign: Elf64_Xword/;"	field
ch_reserved	$ZIGLIB/std/elf.zig	/ch_reserved: Elf64_Word/;"	field
ch_size	$ZIGLIB/std/elf.zig	/ch_size: Elf64_Xword/;"	field
ch_type	$ZIGLIB/std/elf.zig	/ch_type: Elf64_Word/;"	field
chacha	$ZIGLIB/std/crypto.zig	/pub const chacha = struct {$/;"	struct
chacha20Core	$ZIGLIB/std/crypto/chacha20.zig	/inline fn chacha20Core(x: *BlockVec, input: BlockVec) void {$/;"	function
chacha20Xor	$ZIGLIB/std/crypto/chacha20.zig	/fn chacha20Xor(out: []u8, in: []const u8, key: [8]u32, counter: [4]u32) void {$/;"	function
chacha_poly	$ZIGLIB/std/crypto.zig	/pub const chacha_poly = struct {$/;"	struct
chain	$ZIGLIB/std/compress/deflate/compressor.zig	/chain: u16/;"	field
chain_head	$ZIGLIB/std/compress/deflate/compressor.zig	/chain_head: u32/;"	field
chained_comparison_operators	$ZIGLIB/std/zig/Ast.zig	/chained_comparison_operators/;"	field
chainingValue	$ZIGLIB/std/crypto/blake3.zig	/fn chainingValue(self: *const Output) [8]u32 {$/;"	function
chaining_value	$ZIGLIB/std/crypto/blake3.zig	/chaining_value: [8]u32 align(16)/;"	field
change	$ZIGLIB/std/os/linux.zig	/change: c_uint/;"	field
changeCurDir	$ZIGLIB/std/process.zig	/^pub const changeCurDir = os.chdir/;"	constant
changeCurDirC	$ZIGLIB/std/process.zig	/^pub const changeCurDirC = os.chdirC/;"	constant
changeDetected	$ZIGLIB/std/io/change_detection_stream.zig	/pub fn changeDetected(self: *Self) bool {$/;"	function
changeDetectionStream	$ZIGLIB/std/io/change_detection_stream.zig	/^pub fn changeDetectionStream($/;"	function
change_cipher_spec	$ZIGLIB/std/crypto/tls.zig	/change_cipher_spec = 20/;"	field
channel	$ZIGLIB/std/fs/watch.zig	/channel: event.Channel(Event.Error!Event)/;"	field
channel_size	$ZIGLIB/std/event/channel.zig	/const channel_size = 2/;"	constant
char	$ZIGLIB/std/zig/system/darwin/macos.zig	/const char = self.bytes[self.index]/;"	constant
charToDigit	$ZIGLIB/std/fmt.zig	/^pub fn charToDigit(c: u8, radix: u8) (error{InvalidCharacter}!u8) {$/;"	function
char_after	$ZIGLIB/std/zig/Parse.zig	/const char_after = p.source[p.token_starts[oper_token] + tok_len]/;"	constant
char_before	$ZIGLIB/std/zig/Parse.zig	/const char_before = p.source[p.token_starts[oper_token] - 1]/;"	constant
char_in_alphabet	$ZIGLIB/std/base64.zig	/var char_in_alphabet = [_]bool{false} ** 256/;"	variable
char_is_ignored	$ZIGLIB/std/base64.zig	/char_is_ignored: [256]bool/;"	field
char_literal	$ZIGLIB/std/zig/tokenizer.zig	/char_literal/;"	field
char_literal_backslash	$ZIGLIB/std/zig/tokenizer.zig	/char_literal_backslash/;"	field
char_literal_end	$ZIGLIB/std/zig/tokenizer.zig	/char_literal_end/;"	field
char_literal_hex_escape	$ZIGLIB/std/zig/tokenizer.zig	/char_literal_hex_escape/;"	field
char_literal_unicode	$ZIGLIB/std/zig/tokenizer.zig	/char_literal_unicode/;"	field
char_literal_unicode_escape	$ZIGLIB/std/zig/tokenizer.zig	/char_literal_unicode_escape/;"	field
char_literal_unicode_escape_saw_u	$ZIGLIB/std/zig/tokenizer.zig	/char_literal_unicode_escape_saw_u/;"	field
char_literal_unicode_invalid	$ZIGLIB/std/zig/tokenizer.zig	/char_literal_unicode_invalid/;"	field
char_to_index	$ZIGLIB/std/base64.zig	/char_to_index: [256]u8/;"	field
character	$ZIGLIB/std/process.zig	/const character = if (self.index != self.cmd_line.len) self.cmd_line[self.index] else 0/;"	constant
character_special	$ZIGLIB/std/tar.zig	/character_special = '3'/;"	field
characteristics	$ZIGLIB/std/coff.zig	/characteristics: u32/;"	field
charcnt	$ZIGLIB/std/tz.zig	/charcnt: u32/;"	field
charset	$ZIGLIB/std/fmt.zig	/const charset = "0123456789" ++ if (case == .upper) "ABCDEF" else "abcdef"/;"	constant
chdir	$ZIGLIB/std/os/posix_spawn.zig	/pub fn chdir(self: *Actions, path: []const u8) Error!void {$/;"	function
chdirW	$ZIGLIB/std/os.zig	/^pub fn chdirW(dir_path: []const u16) ChangeCurDirError!void {$/;"	function
chdirZ	$ZIGLIB/std/os/posix_spawn.zig	/pub fn chdirZ(self: *Actions, path: [*:0]const u8) Error!void {$/;"	function
cheap_predicable_cpsr	$ZIGLIB/std/target/arm.zig	/cheap_predicable_cpsr/;"	field
check	$ZIGLIB/std/crypto/25519/field.zig	/const check = x.sq().sub(x2_copy)/;"	constant
checkAlign	$ZIGLIB/std/mem.zig	/fn checkAlign(comptime T: type, base: usize, align_to: usize, expected: usize) !void {$/;"	function
checkAllAllocationFailures	$ZIGLIB/std/testing.zig	/^pub fn checkAllAllocationFailures(backing_allocator: std.mem.Allocator, comptime test_fn: anytype, extra_args: anytype) !void {$/;"	function
checkComputeCompare	$ZIGLIB/std/Build/CheckObjectStep.zig	/^pub fn checkComputeCompare($/;"	function
checkEvent	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/checkEvent: *const fn (event: Event) callconv(.C) Status/;"	field
checkHostName	$ZIGLIB/std/crypto/Certificate.zig	/fn checkHostName(host_name: []const u8, dns_name: []const u8) bool {$/;"	function
checkInSymtab	$ZIGLIB/std/Build/CheckObjectStep.zig	/^pub fn checkInSymtab(self: *CheckObjectStep) void {$/;"	function
checkLineMatch	$ZIGLIB/std/dwarf.zig	/pub fn checkLineMatch($/;"	function
checkLiteralCharacter	$ZIGLIB/std/zig/tokenizer.zig	/fn checkLiteralCharacter(self: *Tokenizer) void {$/;"	function
checkMemIsAddressable	$ZIGLIB/std/valgrind/memcheck.zig	/^pub fn checkMemIsAddressable(qzz: []u8) usize {$/;"	function
checkMemIsDefined	$ZIGLIB/std/valgrind/memcheck.zig	/^pub fn checkMemIsDefined(qzz: []u8) usize {$/;"	function
checkNext	$ZIGLIB/std/Build/CheckObjectStep.zig	/^pub fn checkNext(self: *CheckObjectStep, phrase: []const u8) void {$/;"	function
checkNonScalarSentinel	$ZIGLIB/std/builtin.zig	/^pub fn checkNonScalarSentinel(expected: anytype, actual: @TypeOf(expected)) void {$/;"	function
checkNotPresent	$ZIGLIB/std/Build/CheckObjectStep.zig	/^pub fn checkNotPresent(self: *CheckObjectStep, phrase: []const u8) void {$/;"	function
checkObject	$ZIGLIB/std/Build/CompileStep.zig	/^pub fn checkObject(self: *CompileStep, obj_format: std.Target.ObjectFormat) *CheckObjectStep {$/;"	function
checkPromotion	$ZIGLIB/std/zig/c_translation.zig	/fn checkPromotion(comptime A: type, comptime B: type, comptime Expected: type) !void {$/;"	function
checkStart	$ZIGLIB/std/Build/CheckObjectStep.zig	/^pub fn checkStart(self: *CheckObjectStep, phrase: []const u8) void {$/;"	function
checkTextFmt	$ZIGLIB/std/fmt.zig	/^fn checkTextFmt(comptime fmt: []const u8) void {$/;"	function
check_file	$ZIGLIB/std/Build/Step.zig	/check_file/;"	field
check_object	$ZIGLIB/std/Build/Step.zig	/check_object/;"	field
checkbit	$ZIGLIB/std/math/big/int.zig	/const checkbit = bit_count - shift - @boolToInt(signedness == .signed)/;"	constant
checkedEql	$ZIGLIB/std/array_hash_map.zig	/inline fn checkedEql(ctx: anytype, a: anytype, b: K, b_index: usize) bool {$/;"	function
checkedHash	$ZIGLIB/std/array_hash_map.zig	/inline fn checkedHash(ctx: anytype, key: anytype) u32 {$/;"	function
checks	$ZIGLIB/std/Build/CheckObjectStep.zig	/^checks: std.ArrayList(Check)/;"	field
checksum	$ZIGLIB/std/coff.zig	/checksum: u32/;"	field
checksum_offset	$ZIGLIB/std/pdb.zig	/const checksum_offset = module.checksum_offset orelse return error.MissingDebugInfo/;"	constant
checkver	$ZIGLIB/std/os/linux/vdso.zig	/^fn checkver(def_arg: *elf.Verdef, vsym_arg: i32, vername: []const u8, strings: [*]u8) bool {$/;"	function
child	$ZIGLIB/std/treap.zig	/const child = child_node orelse continue/;"	constant
childAtForkHandler	$ZIGLIB/std/crypto/tlcsprng.zig	/^fn childAtForkHandler() callconv(.C) void {$/;"	function
child_allocator	$ZIGLIB/std/heap/arena_allocator.zig	/child_allocator: Allocator/;"	field
child_form_id	$ZIGLIB/std/dwarf.zig	/const child_form_id = try nosuspend leb.readULEB128(u64, in_stream)/;"	constant
child_index	$ZIGLIB/std/priority_queue.zig	/var child_index = start_index/;"	variable
child_options	$ZIGLIB/std/json.zig	/var child_options = options/;"	variable
child_reader	$ZIGLIB/std/io/counting_reader.zig	/child_reader: ReaderType/;"	field
child_stream	$ZIGLIB/std/io/counting_writer.zig	/child_stream: WriterType/;"	field
child_tid	$ZIGLIB/std/Thread.zig	/child_tid: Atomic(i32) = Atomic(i32).init(1)/;"	field
child_type	$ZIGLIB/std/zig/Ast.zig	/child_type: Node.Index/;"	field
children	$ZIGLIB/std/treap.zig	/children: [2]?*Node/;"	field
chip_state	$ZIGLIB/std/c/solaris.zig	/chip_state: extern struct {$/;"	field
chksum_hdr	$ZIGLIB/std/pdb.zig	/const chksum_hdr = @ptrCast(*align(1) FileChecksumEntryHeader, &module.subsect_info[subsect_index])/;"	constant
chmod	$ZIGLIB/std/os/linux/syscalls.zig	/chmod = Linux + 88/;"	field
choice	$ZIGLIB/std/compress/lzma/decode/rangecoder.zig	/choice: u16 = 0x400/;"	field
choice2	$ZIGLIB/std/compress/lzma/decode/rangecoder.zig	/choice2: u16 = 0x400/;"	field
chopSlice	$ZIGLIB/std/debug.zig	/^fn chopSlice(ptr: []const u8, offset: u64, size: u64) error{Overflow}![]const u8 {$/;"	function
chopped	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/const chopped = s["GLIBC_".len..]/;"	constant
chown	$ZIGLIB/std/os/linux/syscalls.zig	/chown = Linux + 90/;"	field
chown32	$ZIGLIB/std/os/linux/syscalls.zig	/chown32 = 212/;"	field
chroot	$ZIGLIB/std/os/linux/syscalls.zig	/chroot = Linux + 61/;"	field
chunk	$ZIGLIB/std/http/Client.zig	/const chunk = bytes[index..][0..16]/;"	constant
chunk_counter	$ZIGLIB/std/crypto/blake3.zig	/var chunk_counter = total_chunks/;"	variable
chunk_cv	$ZIGLIB/std/crypto/blake3.zig	/const chunk_cv = self.chunk_state.output().chainingValue()/;"	constant
chunk_data	$ZIGLIB/std/http/Client.zig	/chunk_data/;"	field
chunk_len	$ZIGLIB/std/crypto/blake3.zig	/chunk_len: usize/;"	field
chunk_r	$ZIGLIB/std/http/Client.zig	/chunk_r/;"	field
chunk_size	$ZIGLIB/std/os/linux.zig	/chunk_size: u32/;"	field
chunk_size_prefix_n	$ZIGLIB/std/http/Client.zig	/chunk_size_prefix_n/;"	field
chunk_size_prefix_r	$ZIGLIB/std/http/Client.zig	/chunk_size_prefix_r/;"	field
chunk_state	$ZIGLIB/std/crypto/blake3.zig	/chunk_state: ChunkState/;"	field
chunked	$ZIGLIB/std/http.zig	/chunked/;"	field
chunks	$ZIGLIB/std/compress/deflate/decompressor.zig	/chunks: [huffman_num_chunks]u16 = [1]u16{0} ** huffman_num_chunks/;"	field
ci_insts	$ZIGLIB/std/target/amdgpu.zig	/ci_insts/;"	field
ciovec_t	$ZIGLIB/std/os/wasi.zig	/^pub const ciovec_t = std.os.iovec_const/;"	constant
ciovs	$ZIGLIB/std/os.zig	/const ciovs = [_]iovec_const{iovec_const{$/;"	constant
cipher_suite_tag	$ZIGLIB/std/crypto/tls/Client.zig	/const cipher_suite_tag = hsd.decode(tls.CipherSuite)/;"	constant
cipher_suites	$ZIGLIB/std/crypto/tls/Client.zig	/^const cipher_suites = enum_array(tls.CipherSuite, &.{$/;"	constant
ciphertext	$ZIGLIB/std/crypto/tls/Client.zig	/const ciphertext = record_decoder.slice(ciphertext_len)/;"	constant
ciphertext_buf	$ZIGLIB/std/crypto/tls/Client.zig	/var ciphertext_buf: [tls.max_ciphertext_record_len * 4]u8 = undefined/;"	variable
ciphertext_buf_len	$ZIGLIB/std/crypto/tls/Client.zig	/const ciphertext_buf_len = (free_size \/ 2) -| in_stack_buffer.len/;"	constant
ciphertext_end	$ZIGLIB/std/crypto/tls/Client.zig	/var ciphertext_end: usize = 0/;"	variable
ciphertext_len	$ZIGLIB/std/crypto/tls/Client.zig	/const ciphertext_len = record_len - P.AEAD.tag_length/;"	constant
ck801	$ZIGLIB/std/target/csky.zig	/pub const ck801 = CpuModel{$/;"	constant
ck801t	$ZIGLIB/std/target/csky.zig	/pub const ck801t = CpuModel{$/;"	constant
ck802	$ZIGLIB/std/target/csky.zig	/pub const ck802 = CpuModel{$/;"	constant
ck802j	$ZIGLIB/std/target/csky.zig	/pub const ck802j = CpuModel{$/;"	constant
ck802t	$ZIGLIB/std/target/csky.zig	/pub const ck802t = CpuModel{$/;"	constant
ck803	$ZIGLIB/std/target/csky.zig	/pub const ck803 = CpuModel{$/;"	constant
ck803e	$ZIGLIB/std/target/csky.zig	/pub const ck803e = CpuModel{$/;"	constant
ck803ef	$ZIGLIB/std/target/csky.zig	/pub const ck803ef = CpuModel{$/;"	constant
ck803efh	$ZIGLIB/std/target/csky.zig	/pub const ck803efh = CpuModel{$/;"	constant
ck803efhr1	$ZIGLIB/std/target/csky.zig	/pub const ck803efhr1 = CpuModel{$/;"	constant
ck803efhr2	$ZIGLIB/std/target/csky.zig	/pub const ck803efhr2 = CpuModel{$/;"	constant
ck803efhr3	$ZIGLIB/std/target/csky.zig	/pub const ck803efhr3 = CpuModel{$/;"	constant
ck803efht	$ZIGLIB/std/target/csky.zig	/pub const ck803efht = CpuModel{$/;"	constant
ck803efhtr1	$ZIGLIB/std/target/csky.zig	/pub const ck803efhtr1 = CpuModel{$/;"	constant
ck803efhtr2	$ZIGLIB/std/target/csky.zig	/pub const ck803efhtr2 = CpuModel{$/;"	constant
ck803efhtr3	$ZIGLIB/std/target/csky.zig	/pub const ck803efhtr3 = CpuModel{$/;"	constant
ck803efr1	$ZIGLIB/std/target/csky.zig	/pub const ck803efr1 = CpuModel{$/;"	constant
ck803efr2	$ZIGLIB/std/target/csky.zig	/pub const ck803efr2 = CpuModel{$/;"	constant
ck803efr3	$ZIGLIB/std/target/csky.zig	/pub const ck803efr3 = CpuModel{$/;"	constant
ck803eft	$ZIGLIB/std/target/csky.zig	/pub const ck803eft = CpuModel{$/;"	constant
ck803eftr1	$ZIGLIB/std/target/csky.zig	/pub const ck803eftr1 = CpuModel{$/;"	constant
ck803eftr2	$ZIGLIB/std/target/csky.zig	/pub const ck803eftr2 = CpuModel{$/;"	constant
ck803eftr3	$ZIGLIB/std/target/csky.zig	/pub const ck803eftr3 = CpuModel{$/;"	constant
ck803eh	$ZIGLIB/std/target/csky.zig	/pub const ck803eh = CpuModel{$/;"	constant
ck803ehr1	$ZIGLIB/std/target/csky.zig	/pub const ck803ehr1 = CpuModel{$/;"	constant
ck803ehr2	$ZIGLIB/std/target/csky.zig	/pub const ck803ehr2 = CpuModel{$/;"	constant
ck803ehr3	$ZIGLIB/std/target/csky.zig	/pub const ck803ehr3 = CpuModel{$/;"	constant
ck803eht	$ZIGLIB/std/target/csky.zig	/pub const ck803eht = CpuModel{$/;"	constant
ck803ehtr1	$ZIGLIB/std/target/csky.zig	/pub const ck803ehtr1 = CpuModel{$/;"	constant
ck803ehtr2	$ZIGLIB/std/target/csky.zig	/pub const ck803ehtr2 = CpuModel{$/;"	constant
ck803ehtr3	$ZIGLIB/std/target/csky.zig	/pub const ck803ehtr3 = CpuModel{$/;"	constant
ck803er1	$ZIGLIB/std/target/csky.zig	/pub const ck803er1 = CpuModel{$/;"	constant
ck803er2	$ZIGLIB/std/target/csky.zig	/pub const ck803er2 = CpuModel{$/;"	constant
ck803er3	$ZIGLIB/std/target/csky.zig	/pub const ck803er3 = CpuModel{$/;"	constant
ck803et	$ZIGLIB/std/target/csky.zig	/pub const ck803et = CpuModel{$/;"	constant
ck803etr1	$ZIGLIB/std/target/csky.zig	/pub const ck803etr1 = CpuModel{$/;"	constant
ck803etr2	$ZIGLIB/std/target/csky.zig	/pub const ck803etr2 = CpuModel{$/;"	constant
ck803etr3	$ZIGLIB/std/target/csky.zig	/pub const ck803etr3 = CpuModel{$/;"	constant
ck803f	$ZIGLIB/std/target/csky.zig	/pub const ck803f = CpuModel{$/;"	constant
ck803fh	$ZIGLIB/std/target/csky.zig	/pub const ck803fh = CpuModel{$/;"	constant
ck803fhr1	$ZIGLIB/std/target/csky.zig	/pub const ck803fhr1 = CpuModel{$/;"	constant
ck803fhr2	$ZIGLIB/std/target/csky.zig	/pub const ck803fhr2 = CpuModel{$/;"	constant
ck803fhr3	$ZIGLIB/std/target/csky.zig	/pub const ck803fhr3 = CpuModel{$/;"	constant
ck803fr1	$ZIGLIB/std/target/csky.zig	/pub const ck803fr1 = CpuModel{$/;"	constant
ck803fr2	$ZIGLIB/std/target/csky.zig	/pub const ck803fr2 = CpuModel{$/;"	constant
ck803fr3	$ZIGLIB/std/target/csky.zig	/pub const ck803fr3 = CpuModel{$/;"	constant
ck803ft	$ZIGLIB/std/target/csky.zig	/pub const ck803ft = CpuModel{$/;"	constant
ck803ftr1	$ZIGLIB/std/target/csky.zig	/pub const ck803ftr1 = CpuModel{$/;"	constant
ck803ftr2	$ZIGLIB/std/target/csky.zig	/pub const ck803ftr2 = CpuModel{$/;"	constant
ck803ftr3	$ZIGLIB/std/target/csky.zig	/pub const ck803ftr3 = CpuModel{$/;"	constant
ck803h	$ZIGLIB/std/target/csky.zig	/pub const ck803h = CpuModel{$/;"	constant
ck803hr1	$ZIGLIB/std/target/csky.zig	/pub const ck803hr1 = CpuModel{$/;"	constant
ck803hr2	$ZIGLIB/std/target/csky.zig	/pub const ck803hr2 = CpuModel{$/;"	constant
ck803hr3	$ZIGLIB/std/target/csky.zig	/pub const ck803hr3 = CpuModel{$/;"	constant
ck803ht	$ZIGLIB/std/target/csky.zig	/pub const ck803ht = CpuModel{$/;"	constant
ck803htr1	$ZIGLIB/std/target/csky.zig	/pub const ck803htr1 = CpuModel{$/;"	constant
ck803htr2	$ZIGLIB/std/target/csky.zig	/pub const ck803htr2 = CpuModel{$/;"	constant
ck803htr3	$ZIGLIB/std/target/csky.zig	/pub const ck803htr3 = CpuModel{$/;"	constant
ck803r1	$ZIGLIB/std/target/csky.zig	/pub const ck803r1 = CpuModel{$/;"	constant
ck803r2	$ZIGLIB/std/target/csky.zig	/pub const ck803r2 = CpuModel{$/;"	constant
ck803r3	$ZIGLIB/std/target/csky.zig	/pub const ck803r3 = CpuModel{$/;"	constant
ck803s	$ZIGLIB/std/target/csky.zig	/pub const ck803s = CpuModel{$/;"	constant
ck803se	$ZIGLIB/std/target/csky.zig	/pub const ck803se = CpuModel{$/;"	constant
ck803sef	$ZIGLIB/std/target/csky.zig	/pub const ck803sef = CpuModel{$/;"	constant
ck803sefn	$ZIGLIB/std/target/csky.zig	/pub const ck803sefn = CpuModel{$/;"	constant
ck803sefnt	$ZIGLIB/std/target/csky.zig	/pub const ck803sefnt = CpuModel{$/;"	constant
ck803seft	$ZIGLIB/std/target/csky.zig	/pub const ck803seft = CpuModel{$/;"	constant
ck803sen	$ZIGLIB/std/target/csky.zig	/pub const ck803sen = CpuModel{$/;"	constant
ck803sf	$ZIGLIB/std/target/csky.zig	/pub const ck803sf = CpuModel{$/;"	constant
ck803sfn	$ZIGLIB/std/target/csky.zig	/pub const ck803sfn = CpuModel{$/;"	constant
ck803sn	$ZIGLIB/std/target/csky.zig	/pub const ck803sn = CpuModel{$/;"	constant
ck803snt	$ZIGLIB/std/target/csky.zig	/pub const ck803snt = CpuModel{$/;"	constant
ck803st	$ZIGLIB/std/target/csky.zig	/pub const ck803st = CpuModel{$/;"	constant
ck803t	$ZIGLIB/std/target/csky.zig	/pub const ck803t = CpuModel{$/;"	constant
ck803tr1	$ZIGLIB/std/target/csky.zig	/pub const ck803tr1 = CpuModel{$/;"	constant
ck803tr2	$ZIGLIB/std/target/csky.zig	/pub const ck803tr2 = CpuModel{$/;"	constant
ck803tr3	$ZIGLIB/std/target/csky.zig	/pub const ck803tr3 = CpuModel{$/;"	constant
ck804	$ZIGLIB/std/target/csky.zig	/pub const ck804 = CpuModel{$/;"	constant
ck804e	$ZIGLIB/std/target/csky.zig	/pub const ck804e = CpuModel{$/;"	constant
ck804ef	$ZIGLIB/std/target/csky.zig	/pub const ck804ef = CpuModel{$/;"	constant
ck804efh	$ZIGLIB/std/target/csky.zig	/pub const ck804efh = CpuModel{$/;"	constant
ck804efht	$ZIGLIB/std/target/csky.zig	/pub const ck804efht = CpuModel{$/;"	constant
ck804eft	$ZIGLIB/std/target/csky.zig	/pub const ck804eft = CpuModel{$/;"	constant
ck804eh	$ZIGLIB/std/target/csky.zig	/pub const ck804eh = CpuModel{$/;"	constant
ck804eht	$ZIGLIB/std/target/csky.zig	/pub const ck804eht = CpuModel{$/;"	constant
ck804et	$ZIGLIB/std/target/csky.zig	/pub const ck804et = CpuModel{$/;"	constant
ck804f	$ZIGLIB/std/target/csky.zig	/pub const ck804f = CpuModel{$/;"	constant
ck804fh	$ZIGLIB/std/target/csky.zig	/pub const ck804fh = CpuModel{$/;"	constant
ck804ft	$ZIGLIB/std/target/csky.zig	/pub const ck804ft = CpuModel{$/;"	constant
ck804h	$ZIGLIB/std/target/csky.zig	/pub const ck804h = CpuModel{$/;"	constant
ck804ht	$ZIGLIB/std/target/csky.zig	/pub const ck804ht = CpuModel{$/;"	constant
ck804t	$ZIGLIB/std/target/csky.zig	/pub const ck804t = CpuModel{$/;"	constant
ck805	$ZIGLIB/std/target/csky.zig	/pub const ck805 = CpuModel{$/;"	constant
ck805e	$ZIGLIB/std/target/csky.zig	/pub const ck805e = CpuModel{$/;"	constant
ck805ef	$ZIGLIB/std/target/csky.zig	/pub const ck805ef = CpuModel{$/;"	constant
ck805eft	$ZIGLIB/std/target/csky.zig	/pub const ck805eft = CpuModel{$/;"	constant
ck805et	$ZIGLIB/std/target/csky.zig	/pub const ck805et = CpuModel{$/;"	constant
ck805f	$ZIGLIB/std/target/csky.zig	/pub const ck805f = CpuModel{$/;"	constant
ck805ft	$ZIGLIB/std/target/csky.zig	/pub const ck805ft = CpuModel{$/;"	constant
ck805t	$ZIGLIB/std/target/csky.zig	/pub const ck805t = CpuModel{$/;"	constant
ck807	$ZIGLIB/std/target/csky.zig	/pub const ck807 = CpuModel{$/;"	constant
ck807e	$ZIGLIB/std/target/csky.zig	/pub const ck807e = CpuModel{$/;"	constant
ck807ef	$ZIGLIB/std/target/csky.zig	/pub const ck807ef = CpuModel{$/;"	constant
ck807f	$ZIGLIB/std/target/csky.zig	/pub const ck807f = CpuModel{$/;"	constant
ck810	$ZIGLIB/std/target/csky.zig	/pub const ck810 = CpuModel{$/;"	constant
ck810e	$ZIGLIB/std/target/csky.zig	/pub const ck810e = CpuModel{$/;"	constant
ck810ef	$ZIGLIB/std/target/csky.zig	/pub const ck810ef = CpuModel{$/;"	constant
ck810eft	$ZIGLIB/std/target/csky.zig	/pub const ck810eft = CpuModel{$/;"	constant
ck810eftv	$ZIGLIB/std/target/csky.zig	/pub const ck810eftv = CpuModel{$/;"	constant
ck810efv	$ZIGLIB/std/target/csky.zig	/pub const ck810efv = CpuModel{$/;"	constant
ck810et	$ZIGLIB/std/target/csky.zig	/pub const ck810et = CpuModel{$/;"	constant
ck810etv	$ZIGLIB/std/target/csky.zig	/pub const ck810etv = CpuModel{$/;"	constant
ck810ev	$ZIGLIB/std/target/csky.zig	/pub const ck810ev = CpuModel{$/;"	constant
ck810f	$ZIGLIB/std/target/csky.zig	/pub const ck810f = CpuModel{$/;"	constant
ck810ft	$ZIGLIB/std/target/csky.zig	/pub const ck810ft = CpuModel{$/;"	constant
ck810ftv	$ZIGLIB/std/target/csky.zig	/pub const ck810ftv = CpuModel{$/;"	constant
ck810fv	$ZIGLIB/std/target/csky.zig	/pub const ck810fv = CpuModel{$/;"	constant
ck810t	$ZIGLIB/std/target/csky.zig	/pub const ck810t = CpuModel{$/;"	constant
ck810tv	$ZIGLIB/std/target/csky.zig	/pub const ck810tv = CpuModel{$/;"	constant
ck810v	$ZIGLIB/std/target/csky.zig	/pub const ck810v = CpuModel{$/;"	constant
ck860	$ZIGLIB/std/target/csky.zig	/pub const ck860 = CpuModel{$/;"	constant
ck860f	$ZIGLIB/std/target/csky.zig	/pub const ck860f = CpuModel{$/;"	constant
ck860fv	$ZIGLIB/std/target/csky.zig	/pub const ck860fv = CpuModel{$/;"	constant
ck860v	$ZIGLIB/std/target/csky.zig	/pub const ck860v = CpuModel{$/;"	constant
clamp	$ZIGLIB/std/math.zig	/^pub fn clamp(val: anytype, lower: anytype, upper: anytype) @TypeOf(val, lower, upper) {$/;"	function
clampedMul	$ZIGLIB/std/crypto/25519/edwards25519.zig	/pub fn clampedMul(p: Edwards25519, s: [32]u8) (IdentityElementError || WeakPublicKeyError)!Edwards25519 {$/;"	function
clamped_start	$ZIGLIB/std/heap/WasmPageAllocator.zig	/const clamped_start = @max(extendedOffset(), start)/;"	constant
clamped_timeout	$ZIGLIB/std/net.zig	/const clamped_timeout = std.math.min(@as(u31, std.math.maxInt(u31)), t1 + retry_interval - t2)/;"	constant
class	$ZIGLIB/std/http.zig	/pub fn class(self: Status) Class {$/;"	function
class_template	$ZIGLIB/std/dwarf/TAG.zig	/^pub const class_template = 0x4103/;"	constant
class_type	$ZIGLIB/std/dwarf/TAG.zig	/^pub const class_type = 0x02/;"	constant
cldemote	$ZIGLIB/std/target/x86.zig	/cldemote/;"	field
clean_comp	$ZIGLIB/std/compress/deflate/deflate_fast.zig	/var clean_comp = try deflate.compressor($/;"	variable
clean_up_resolved_to	$ZIGLIB/std/fs/path.zig	/var clean_up_resolved_to = true/;"	variable
cleanup	$ZIGLIB/std/testing.zig	/pub fn cleanup(self: *TmpIterableDir) void {$/;"	function
cleanupAfterWait	$ZIGLIB/std/child_process.zig	/fn cleanupAfterWait(self: *ChildProcess, status: u32) !Term {$/;"	function
cleanupStreams	$ZIGLIB/std/child_process.zig	/fn cleanupStreams(self: *ChildProcess) void {$/;"	function
cleanup_dir	$ZIGLIB/std/fs.zig	/var cleanup_dir = true/;"	variable
cleanup_dir_parent	$ZIGLIB/std/fs.zig	/var cleanup_dir_parent: ?IterableDir = null/;"	variable
clear	$ZIGLIB/std/crypto/xoodoo.zig	/pub fn clear(self: *State, from: usize, to: usize) void {$/;"	function
clearAndFree	$ZIGLIB/std/segmented_list.zig	/pub fn clearAndFree(self: *Self, allocator: Allocator) void {$/;"	function
clearCofactor	$ZIGLIB/std/crypto/25519/edwards25519.zig	/pub fn clearCofactor(p: Edwards25519) Edwards25519 {$/;"	function
clearEnvironment	$ZIGLIB/std/Build/RunStep.zig	/^pub fn clearEnvironment(self: *RunStep) void {$/;"	function
clearRetainingCapacity	$ZIGLIB/std/segmented_list.zig	/pub fn clearRetainingCapacity(self: *Self) void {$/;"	function
clearScreen	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/pub fn clearScreen(self: *const SimpleTextOutputProtocol) Status {$/;"	function
clear_cache	$ZIGLIB/compiler_rt/clear_cache.zig	/^fn clear_cache(start: usize, end: usize) callconv(.C) void {$/;"	function
clear_mask	$ZIGLIB/std/json.zig	/const clear_mask = ~(@as(ElementType, 1) << sub_index)/;"	constant
cleartext	$ZIGLIB/std/crypto/tls/Client.zig	/const cleartext = switch (handshake_cipher) {$/;"	constant
cleartext_buf	$ZIGLIB/std/crypto/tls/Client.zig	/var cleartext_buf: [max_ciphertext_len]u8 = undefined/;"	variable
cleartext_buf_len	$ZIGLIB/std/crypto/tls/Client.zig	/const cleartext_buf_len = free_size - ciphertext_buf_len/;"	constant
cleartext_bufs	$ZIGLIB/std/crypto/tls/Client.zig	/var cleartext_bufs: [2][8000]u8 = undefined/;"	variable
cleartext_stack_buffer	$ZIGLIB/std/crypto/tls/Client.zig	/var cleartext_stack_buffer: [max_ciphertext_len]u8 = undefined/;"	variable
clflushopt	$ZIGLIB/std/target/x86.zig	/clflushopt/;"	field
client	$ZIGLIB/std/os/linux/io_uring.zig	/const client = try os.socket(address_server.any.family, os.SOCK.DGRAM, 0)/;"	constant
client_certificate_type	$ZIGLIB/std/crypto/tls.zig	/client_certificate_type = 19/;"	field
client_change_cipher_spec_msg	$ZIGLIB/std/crypto/tls/Client.zig	/const client_change_cipher_spec_msg = [_]u8{$/;"	constant
client_error	$ZIGLIB/std/http.zig	/client_error/;"	field
client_finished_key	$ZIGLIB/std/crypto/tls.zig	/client_finished_key: [Hmac.key_length]u8/;"	field
client_handshake_iv	$ZIGLIB/std/crypto/tls.zig	/client_handshake_iv: [AEAD.nonce_length]u8/;"	field
client_handshake_key	$ZIGLIB/std/crypto/tls.zig	/client_handshake_key: [AEAD.key_length]u8/;"	field
client_hello	$ZIGLIB/std/crypto/tls/Client.zig	/const client_hello =$/;"	constant
client_hello_bytes1	$ZIGLIB/std/crypto/tls/Client.zig	/const client_hello_bytes1 = plaintext_header[5..]/;"	constant
client_iv	$ZIGLIB/std/crypto/tls.zig	/client_iv: [AEAD.nonce_length]u8/;"	field
client_key	$ZIGLIB/std/crypto/tls.zig	/client_key: [AEAD.key_length]u8/;"	field
client_secret	$ZIGLIB/std/crypto/tls/Client.zig	/const client_secret = hkdfExpandLabel(P.Hkdf, p.master_secret, "c ap traffic", &handshake_hash, P.Hash.digest_length)/;"	constant
clmul	$ZIGLIB/std/crypto/ghash_polyval.zig	/const clmul = if (builtin.cpu.arch == .x86_64 and has_pclmul and has_avx) impl: {$/;"	constant
clmul128	$ZIGLIB/std/crypto/ghash_polyval.zig	/inline fn clmul128(x: u128, y: u128) I256 {$/;"	function
clmulPclmul	$ZIGLIB/std/crypto/ghash_polyval.zig	/inline fn clmulPclmul(x: u128, y: u128, comptime half: Selector) u128 {$/;"	function
clmulPmull	$ZIGLIB/std/crypto/ghash_polyval.zig	/inline fn clmulPmull(x: u128, y: u128, comptime half: Selector) u128 {$/;"	function
clmulSoft	$ZIGLIB/std/crypto/ghash_polyval.zig	/fn clmulSoft(x_: u128, y_: u128, comptime half: Selector) u128 {$/;"	function
clock	$ZIGLIB/std/time.zig	/const clock = w.subscription_clock_t{$/;"	constant
clock_adjtime	$ZIGLIB/std/os/linux/syscalls.zig	/clock_adjtime = Linux + 341/;"	field
clock_adjtime64	$ZIGLIB/std/os/linux/syscalls.zig	/clock_adjtime64 = Linux + 405/;"	field
clock_getres	$ZIGLIB/std/os/linux/syscalls.zig	/clock_getres = Linux + 264/;"	field
clock_getres_time64	$ZIGLIB/std/os/linux/syscalls.zig	/clock_getres_time64 = Linux + 406/;"	field
clock_gettime	$ZIGLIB/std/os/linux/syscalls.zig	/clock_gettime = Linux + 263/;"	field
clock_gettime64	$ZIGLIB/std/os/linux/syscalls.zig	/clock_gettime64 = Linux + 403/;"	field
clock_id	$ZIGLIB/std/time.zig	/const clock_id = switch (builtin.os.tag) {$/;"	constant
clock_nanosleep	$ZIGLIB/std/os/linux/syscalls.zig	/clock_nanosleep = Linux + 265/;"	field
clock_nanosleep_time64	$ZIGLIB/std/os/linux/syscalls.zig	/clock_nanosleep_time64 = Linux + 407/;"	field
clock_res_t	$ZIGLIB/std/c/darwin.zig	/^pub const clock_res_t = c_int/;"	constant
clock_seq_high_and_reserved	$ZIGLIB/std/os/uefi.zig	/clock_seq_high_and_reserved: u8/;"	field
clock_seq_low	$ZIGLIB/std/os/uefi.zig	/clock_seq_low: u8/;"	field
clock_serv_t	$ZIGLIB/std/c/darwin.zig	/^pub const clock_serv_t = mach_port_t/;"	constant
clock_settime	$ZIGLIB/std/os/linux/syscalls.zig	/clock_settime = Linux + 262/;"	field
clock_settime64	$ZIGLIB/std/os/linux/syscalls.zig	/clock_settime64 = Linux + 404/;"	field
clock_t	$ZIGLIB/std/os/linux.zig	/^pub const clock_t = isize/;"	constant
clockid	$ZIGLIB/std/os/linux.zig	/clockid: i32 = 0/;"	field
clockid_t	$ZIGLIB/std/os/wasi.zig	/^pub const clockid_t = u32/;"	constant
clone	$ZIGLIB/std/os/linux/syscalls.zig	/clone = Linux + 55/;"	field
clone2	$ZIGLIB/std/os/linux.zig	/^pub fn clone2(flags: u32, child_stack_ptr: usize) usize {$/;"	function
clone3	$ZIGLIB/std/os/linux/syscalls.zig	/clone3 = Linux + 435/;"	field
clone5	$ZIGLIB/std/os/linux.zig	/^pub fn clone5(flags: usize, child_stack_ptr: usize, parent_tid: *i32, child_tid: *i32, newtls: usize) usize {$/;"	function
cloneContext	$ZIGLIB/std/hash_map.zig	/pub fn cloneContext(self: Self, allocator: Allocator, new_ctx: anytype) Allocator.Error!HashMapUnmanaged(K, V, @TypeOf(new_ctx), max_load_percentage) {$/;"	function
cloneWithAllocator	$ZIGLIB/std/hash_map.zig	/pub fn cloneWithAllocator(self: Self, new_allocator: Allocator) Allocator.Error!Self {$/;"	function
cloneWithAllocatorAndContext	$ZIGLIB/std/hash_map.zig	/pub fn cloneWithAllocatorAndContext($/;"	function
cloneWithContext	$ZIGLIB/std/hash_map.zig	/pub fn cloneWithContext(self: Self, new_ctx: anytype) Allocator.Error!HashMap(K, V, @TypeOf(new_ctx), max_load_percentage) {$/;"	function
cloneWithDifferentAllocator	$ZIGLIB/std/math/big/int.zig	/pub fn cloneWithDifferentAllocator(other: Managed, allocator: Allocator) !Managed {$/;"	function
clone_redirect	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const clone_redirect = @intToPtr(fn (skb: *kern.SkBuff, ifindex: u32, flags: u64) c_long, 13)/;"	constant
cloned	$ZIGLIB/std/buf_set.zig	/var cloned = try original.clone()/;"	variable
cloned_hashmap	$ZIGLIB/std/buf_set.zig	/var cloned_hashmap = try self.hash_map.cloneWithAllocator(new_allocator)/;"	variable
close	$ZIGLIB/std/os/uefi/protocols/file_protocol.zig	/pub fn close(self: *const FileProtocol) Status {$/;"	function
closeEvent	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/closeEvent: *const fn (event: Event) callconv(.C) Status/;"	field
closeProtocol	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/closeProtocol: *const fn (handle: Handle, protocol: *align(8) const Guid, agentHandle: Handle, controller_handle: ?Handle) callconv(.C) Status/;"	field
closeSocket	$ZIGLIB/std/os.zig	/^pub fn closeSocket(sock: socket_t) void {$/;"	function
close_dir_on_deinit	$ZIGLIB/std/fs.zig	/close_dir_on_deinit: bool/;"	field
close_notify	$ZIGLIB/std/crypto/tls.zig	/close_notify = 0/;"	field
close_notify_alert	$ZIGLIB/std/crypto/tls.zig	/^pub const close_notify_alert = [_]u8{$/;"	constant
close_notify_alert_reserved	$ZIGLIB/std/crypto/tls/Client.zig	/const close_notify_alert_reserved = tls.close_notify_alert.len + overhead_len/;"	constant
close_range	$ZIGLIB/std/os/linux/syscalls.zig	/close_range = Linux + 436/;"	field
closed	$ZIGLIB/std/child_process.zig	/closed/;"	field
closesocket	$ZIGLIB/std/os/windows.zig	/^pub fn closesocket(s: ws2_32.SOCKET) !void {$/;"	function
closesthit	$ZIGLIB/std/target.zig	/closesthit/;"	field
closing_brace	$ZIGLIB/std/Build/CheckObjectStep.zig	/const closing_brace = mem.indexOf(u8, needle_tok, "}") orelse return error.MissingClosingBrace/;"	constant
cloudabi	$ZIGLIB/std/target.zig	/cloudabi/;"	field
clsq128	$ZIGLIB/std/crypto/ghash_polyval.zig	/fn clsq128(x: u128) I256 {$/;"	function
clubs	$ZIGLIB/std/enums.zig	/clubs/;"	field
clwb	$ZIGLIB/std/target/x86.zig	/clwb/;"	field
clzXi2	$ZIGLIB/compiler_rt/count0bits.zig	/^inline fn clzXi2(comptime T: type, a: T) i32 {$/;"	function
clzero	$ZIGLIB/std/target/x86.zig	/clzero/;"	field
clzsi2_generic	$ZIGLIB/compiler_rt/count0bits.zig	/^fn clzsi2_generic(a: i32) callconv(.C) i32 {$/;"	function
cmake	$ZIGLIB/std/Build/ConfigHeaderStep.zig	/cmake: std.Build.FileSource/;"	field
cmakedefine	$ZIGLIB/std/Build/ConfigHeaderStep.zig	/const cmakedefine = it.next().?/;"	constant
cmath	$ZIGLIB/std/math/complex/tanh.zig	/^const cmath = math.complex/;"	constant
cmcred_euid	$ZIGLIB/std/c/dragonfly.zig	/cmcred_euid: uid_t/;"	field
cmcred_gid	$ZIGLIB/std/c/dragonfly.zig	/cmcred_gid: gid_t/;"	field
cmcred_groups	$ZIGLIB/std/c/dragonfly.zig	/cmcred_groups: [16]gid_t/;"	field
cmcred_ngroups	$ZIGLIB/std/c/dragonfly.zig	/cmcred_ngroups: c_short/;"	field
cmcred_pid	$ZIGLIB/std/c/dragonfly.zig	/cmcred_pid: pid_t/;"	field
cmcred_uid	$ZIGLIB/std/c/dragonfly.zig	/cmcred_uid: uid_t/;"	field
cmd_line	$ZIGLIB/std/process.zig	/var cmd_line = std.unicode.utf16leToUtf8Alloc(allocator, utf16le_slice) catch |err| switch (err) {$/;"	variable
cmd_line_w	$ZIGLIB/std/process.zig	/const cmd_line_w = os.windows.kernel32.GetCommandLineW()/;"	constant
cmdsize	$ZIGLIB/std/macho.zig	/pub fn cmdsize(lc: LoadCommand) u32 {$/;"	function
cmov	$ZIGLIB/std/target/x86.zig	/cmov/;"	field
cmovznzU64	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/^inline fn cmovznzU64(out1: *u64, arg1: u1, arg2: u64, arg3: u64) void {$/;"	function
cmp1	$ZIGLIB/compiler_rt/cmp.zig	/var cmp1: i32 = 0/;"	variable
cmp2	$ZIGLIB/compiler_rt/cmp.zig	/var cmp2: i32 = 0/;"	variable
cmpByValue	$ZIGLIB/std/sort.zig	/^fn cmpByValue(context: void, a: IdAndValue, b: IdAndValue) bool {$/;"	function
cmpInternal	$ZIGLIB/std/math/big/rational.zig	/fn cmpInternal(a: Rational, b: Rational, is_abs: bool) !math.Order {$/;"	function
cmp_bcc_fusion	$ZIGLIB/std/target/aarch64.zig	/cmp_bcc_fusion/;"	field
cmp_f80	$ZIGLIB/compiler_rt/comparef.zig	/^pub inline fn cmp_f80(comptime RT: type, a: f80, b: f80) RT {$/;"	function
cmpb	$ZIGLIB/std/target/powerpc.zig	/cmpb/;"	field
cmpf2	$ZIGLIB/compiler_rt/comparef.zig	/^pub inline fn cmpf2(comptime T: type, comptime RT: type, a: T, b: T) RT {$/;"	function
cmpxchg	$ZIGLIB/std/atomic/Atomic.zig	/inline fn cmpxchg($/;"	function
cmsg_len	$ZIGLIB/std/c/solaris.zig	/cmsg_len: socklen_t/;"	field
cmsg_level	$ZIGLIB/std/c/solaris.zig	/cmsg_level: i32/;"	field
cmsg_type	$ZIGLIB/std/c/solaris.zig	/cmsg_type: i32/;"	field
cmsgcred	$ZIGLIB/std/c/dragonfly.zig	/^pub const cmsgcred = extern struct {$/;"	struct
cmsghdr	$ZIGLIB/std/c/solaris.zig	/^pub const cmsghdr = extern struct {$/;"	struct
cnmips	$ZIGLIB/std/target/mips.zig	/cnmips/;"	field
cnmipsp	$ZIGLIB/std/target/mips.zig	/cnmipsp/;"	field
co_prime	$ZIGLIB/std/treap.zig	/co_prime: usize/;"	field
coarray_type	$ZIGLIB/std/dwarf/TAG.zig	/^pub const coarray_type = 0x44/;"	constant
code	$ZIGLIB/std/wasm.zig	/code/;"	field
code16	$ZIGLIB/std/target.zig	/code16/;"	field
codeLimit	$ZIGLIB/std/macho.zig	/codeLimit: u32/;"	field
codeLimit64	$ZIGLIB/std/macho.zig	/codeLimit64: u64/;"	field
code_model	$ZIGLIB/std/Build/CompileStep.zig	/^code_model: std.builtin.CodeModel = .default/;"	field
code_order	$ZIGLIB/std/compress/deflate/decompressor.zig	/const code_order = [_]u32{ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 }/;"	constant
code_word	$ZIGLIB/std/compress/deflate/huffman_bit_writer.zig	/var code_word: u32 = @intCast(u32, self.codegen[i])/;"	variable
codebits	$ZIGLIB/std/compress/deflate/decompressor.zig	/var codebits = try allocator.create([num_codes]u32)/;"	variable
codecs	$ZIGLIB/std/base64.zig	/const codecs = url_safe_no_pad/;"	constant
codeface	$ZIGLIB/std/mem.zig	/var codeface = bytesAsValue(u32, &codeface_bytes)/;"	variable
codeface_bytes	$ZIGLIB/std/mem.zig	/var codeface_bytes: [4]u8 = switch (native_endian) {$/;"	variable
codegen	$ZIGLIB/std/compress/deflate/huffman_bit_writer.zig	/codegen: []u8/;"	field
codegen_code_count	$ZIGLIB/std/compress/deflate/huffman_bit_writer.zig	/^const codegen_code_count = 19/;"	constant
codegen_encoding	$ZIGLIB/std/compress/deflate/huffman_bit_writer.zig	/codegen_encoding: hm_code.HuffmanEncoder/;"	field
codegen_freq	$ZIGLIB/std/compress/deflate/huffman_bit_writer.zig	/codegen_freq: [codegen_code_count]u16/;"	field
codegen_order	$ZIGLIB/std/compress/deflate/huffman_bit_writer.zig	/^var codegen_order = [_]u32{ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 }/;"	variable
codepoint	$ZIGLIB/std/zig/string_literal.zig	/const codepoint = utf8Decode(slice[1 .. slice.len - 1]) catch unreachable/;"	constant
codes	$ZIGLIB/std/compress/deflate/huffman_code.zig	/codes: []HuffCode/;"	field
cofactor	$ZIGLIB/std/crypto/25519/curve25519.zig	/const cofactor = [_]u8{8} ++ [_]u8{0} ** 31/;"	constant
coff	$ZIGLIB/std/target.zig	/coff/;"	field
coff_header	$ZIGLIB/std/coff.zig	/const coff_header = self.getCoffHeader()/;"	constant
coff_header_offset	$ZIGLIB/std/coff.zig	/var coff_header_offset = try reader.readIntLittle(u32)/;"	variable
coff_image_base	$ZIGLIB/std/debug.zig	/coff_image_base: u64/;"	field
coff_obj	$ZIGLIB/std/debug.zig	/const coff_obj = try allocator.create(coff.Coff)/;"	constant
coff_section	$ZIGLIB/std/debug.zig	/var coff_section: *align(1) const coff.SectionHeader = undefined/;"	variable
coff_section_headers	$ZIGLIB/std/debug.zig	/coff_section_headers: []coff.SectionHeader/;"	field
col_index	$ZIGLIB/std/pdb.zig	/const col_index = start_col_index + @sizeOf(ColumnNumberEntry) * line_entry_idx/;"	constant
col_num_entry	$ZIGLIB/std/pdb.zig	/const col_num_entry = @ptrCast(*align(1) ColumnNumberEntry, &subsect_info[col_index])/;"	constant
collapseRepeats	$ZIGLIB/std/mem.zig	/^pub fn collapseRepeats(comptime T: type, slice: []T, elem: T) []T {$/;"	function
collapseRepeatsLen	$ZIGLIB/std/mem.zig	/^pub fn collapseRepeatsLen(comptime T: type, slice: []T, elem: T) usize {$/;"	function
collectOutputPosix	$ZIGLIB/std/child_process.zig	/fn collectOutputPosix($/;"	function
collectOutputWindows	$ZIGLIB/std/child_process.zig	/fn collectOutputWindows(child: ChildProcess, outs: [2]*std.ArrayList(u8), max_output_bytes: usize) !void {$/;"	function
collectStackTrace	$ZIGLIB/std/heap/general_purpose_allocator.zig	/fn collectStackTrace(first_trace_addr: usize, addresses: *[stack_n]usize) void {$/;"	function
collected_result	$ZIGLIB/std/event/batch.zig	/collected_result: CollectedResult/;"	field
collisions	$ZIGLIB/std/os/uefi/protocols/simple_network_protocol.zig	/collisions: u64/;"	field
colon	$ZIGLIB/std/zig/tokenizer.zig	/colon/;"	field
colon1	$ZIGLIB/std/zig/render.zig	/const colon1 = tree.lastToken(asm_node.ast.template) + 1/;"	constant
colon2	$ZIGLIB/std/zig/render.zig	/const colon2 = if (asm_node.outputs.len == 0) colon2: {$/;"	constant
colon3	$ZIGLIB/std/zig/render.zig	/const colon3 = if (asm_node.inputs.len == 0) colon3: {$/;"	constant
colon_it	$ZIGLIB/std/net.zig	/var colon_it = mem.split(u8, sub_tok, ":")/;"	variable
colon_pos	$ZIGLIB/std/zig/system/linux.zig	/const colon_pos = mem.indexOfScalar(u8, line, ':') orelse continue/;"	constant
color	$ZIGLIB/std/Build.zig	/^color: enum { auto, on, off } = .auto/;"	field
color_string	$ZIGLIB/std/debug.zig	/const color_string = switch (color) {$/;"	constant
cols	$ZIGLIB/std/compress/lzma/vec2d.zig	/cols: usize/;"	field
column	$ZIGLIB/std/zig/render.zig	/const column = column_counter % row_size/;"	constant
column_counter	$ZIGLIB/std/zig/render.zig	/var column_counter: usize = 0/;"	variable
column_widths	$ZIGLIB/std/zig/render.zig	/const column_widths = widths[row_exprs.len..]/;"	constant
columns_written	$ZIGLIB/std/Progress.zig	/^columns_written: usize = undefined/;"	field
comm	$ZIGLIB/std/os/linux.zig	/comm: bool = false/;"	field
comm_exec	$ZIGLIB/std/os/linux.zig	/comm_exec: bool = false/;"	field
comma	$ZIGLIB/std/zig/tokenizer.zig	/comma/;"	field
comma_or_colon	$ZIGLIB/std/zig/render.zig	/const comma_or_colon = tree.lastToken(asm_output) + 1/;"	constant
comma_space	$ZIGLIB/std/zig/render.zig	/const comma_space: Space = if (next_multiline_string) .none else .space/;"	constant
comma_token	$ZIGLIB/std/zig/render.zig	/const comma_token = tree.lastToken(param_node) + 1/;"	constant
command	$ZIGLIB/std/builtin.zig	/command/;"	field
command_interrupt	$ZIGLIB/std/os/uefi/protocols/simple_network_protocol.zig	/command_interrupt: bool/;"	field
comment	$ZIGLIB/std/zig/render.zig	/const comment = try renderComments(ais, tree, token_start + lexeme_len, token_starts[token_index + 1])/;"	constant
comment_content	$ZIGLIB/std/zig/render.zig	/const comment_content = mem.trimLeft(u8, trimmed_comment["\/\/".len..], &std.ascii.whitespace)/;"	constant
comment_end_loc	$ZIGLIB/std/zig/render.zig	/const comment_end_loc = tree.tokens.items(.start)[0]/;"	constant
comment_start	$ZIGLIB/std/zig/render.zig	/const comment_start = token_starts[last_token] + tokenSliceForRender(tree, last_token).len/;"	constant
comments	$ZIGLIB/std/process.zig	/comments: bool = false/;"	field
common	$ZIGLIB/std/os/linux.zig	/common: extern struct {$/;"	field
commonEncodingsArrayCount	$ZIGLIB/std/macho.zig	/commonEncodingsArrayCount: u32/;"	field
commonEncodingsArraySectionOffset	$ZIGLIB/std/macho.zig	/commonEncodingsArraySectionOffset: u32/;"	field
commonName	$ZIGLIB/std/crypto/Certificate.zig	/pub fn commonName(p: Parsed) []const u8 {$/;"	function
commonPostUnlock	$ZIGLIB/std/event/rwlock.zig	/fn commonPostUnlock(self: *RwLock) void {$/;"	function
common_block	$ZIGLIB/std/dwarf/TAG.zig	/^pub const common_block = 0x1a/;"	constant
common_include_path	$ZIGLIB/std/Build/CompileStep.zig	/const common_include_path = if (builtin.os.tag == .windows and builder.sysroot != null and fs.path.isAbsolute(resolved_include_path)) blk: {$/;"	constant
common_inclusion	$ZIGLIB/std/dwarf/TAG.zig	/^pub const common_inclusion = 0x1b/;"	constant
common_name	$ZIGLIB/std/crypto/Certificate.zig	/var common_name = der.Element.Slice.empty/;"	variable
common_name_slice	$ZIGLIB/std/crypto/Certificate.zig	/common_name_slice: Slice/;"	field
common_qpf	$ZIGLIB/std/time.zig	/const common_qpf = 10_000_000/;"	constant
common_reference	$ZIGLIB/std/dwarf/AT.zig	/^pub const common_reference = 0x1a/;"	constant
comp	$ZIGLIB/std/compress/deflate/deflate_fast.zig	/var comp = try deflate.compressor($/;"	variable
comp_dir	$ZIGLIB/std/dwarf/AT.zig	/^pub const comp_dir = 0x1b/;"	constant
compactUnwindEncoding	$ZIGLIB/std/macho.zig	/compactUnwindEncoding: u32/;"	field
compact_unwind_encoding_t	$ZIGLIB/std/macho.zig	/^pub const compact_unwind_encoding_t = u32/;"	constant
compact_unwind_entry	$ZIGLIB/std/macho.zig	/^pub const compact_unwind_entry = extern struct {$/;"	struct
compare	$ZIGLIB/std/treap.zig	/fn compare(a: Key, b: Key) Order {$/;"	function
compareAndSwap	$ZIGLIB/std/atomic/Atomic.zig	/pub inline fn compareAndSwap($/;"	function
compareDiskDesignators	$ZIGLIB/std/fs/path.zig	/^fn compareDiskDesignators(kind: WindowsPath.Kind, p1: []const u8, p2: []const u8) bool {$/;"	function
compared	$ZIGLIB/compiler_rt/memcmp.zig	/const compared = @as(c_int, vl[i]) -% @as(c_int, vr[i])/;"	constant
compatibility_version	$ZIGLIB/std/macho.zig	/compatibility_version: u32/;"	field
compatible	$ZIGLIB/std/SemanticVersion.zig	/const compatible = comptime @import("builtin").zig_version.order(older_version) == .gt/;"	constant
compile	$ZIGLIB/std/dwarf.zig	/pub const compile = 0x01/;"	constant
compile_time	$ZIGLIB/std/builtin.zig	/compile_time/;"	field
compile_unit	$ZIGLIB/std/dwarf/TAG.zig	/^pub const compile_unit = 0x11/;"	constant
compile_unit_cwd	$ZIGLIB/std/dwarf.zig	/const compile_unit_cwd = try compile_unit.die.getAttrString(di, AT.comp_dir, di.debug_line_str, compile_unit)/;"	constant
compile_unit_die	$ZIGLIB/std/dwarf.zig	/const compile_unit_die = try allocator.create(Die)/;"	constant
compile_unit_list	$ZIGLIB/std/dwarf.zig	/compile_unit_list: std.ArrayListUnmanaged(CompileUnit) = .{}/;"	field
compile_unit_name	$ZIGLIB/std/debug.zig	/compile_unit_name: []const u8 = "???"/;"	field
compile_unit_pos	$ZIGLIB/std/dwarf.zig	/const compile_unit_pos = try seekable.getPos()/;"	constant
compilerFence	$ZIGLIB/std/atomic.zig	/^pub inline fn compilerFence(comptime ordering: Ordering) void {$/;"	function
complement	$ZIGLIB/std/enums.zig	/pub fn complement(self: Self) Self {$/;"	function
complete	$ZIGLIB/std/json.zig	/complete: bool/;"	field
completeOne	$ZIGLIB/std/Progress.zig	/pub fn completeOne(self: *Node) void {$/;"	function
completed	$ZIGLIB/std/Thread/Condition.zig	/completed: Condition = .{}/;"	field
completed_items	$ZIGLIB/std/Progress.zig	/const completed_items = @atomicLoad(usize, &node.unprotected_completed_items, .Monotonic)/;"	constant
completion	$ZIGLIB/std/Thread.zig	/completion: Completion = Completion.init(.running)/;"	field
completion_key	$ZIGLIB/std/event/loop.zig	/var completion_key: usize = undefined/;"	variable
complex_float	$ZIGLIB/std/dwarf/ATE.zig	/^pub const complex_float = 0x3/;"	constant
complex_type	$ZIGLIB/std/coff.zig	/complex_type: ComplexType/;"	field
complxnum	$ZIGLIB/std/target/aarch64.zig	/complxnum/;"	field
component_idx	$ZIGLIB/std/os/linux/bpf/btf.zig	/component_idx: u32/;"	field
components	$ZIGLIB/std/crypto/tls/Client.zig	/const components = try rsa.PublicKey.parseDer(main_cert_pub_key)/;"	constant
compound	$ZIGLIB/std/target/hexagon.zig	/compound/;"	field
compress	$ZIGLIB/std/http.zig	/compress/;"	field
compress_debug_sections	$ZIGLIB/std/Build/CompileStep.zig	/^compress_debug_sections: enum { none, zlib } = .none/;"	field
compressed	$ZIGLIB/std/compress/lzma2.zig	/const compressed = &[_]u8{ 0x01, 0x00, 0x05, 0x48, 0x65, 0x6C, 0x6C, 0x6F, 0x0A, 0x02, 0x00, 0x06, 0x57, 0x6F, 0x72, 0x6C, 0x64, 0x21, 0x0A, 0x00 }/;"	constant
compressed_lifetime	$ZIGLIB/std/c/darwin.zig	/compressed_lifetime: mach_vm_size_t/;"	field
compressed_peak	$ZIGLIB/std/c/darwin.zig	/compressed_peak: mach_vm_size_t/;"	field
compressed_sec1_encoded_length	$ZIGLIB/std/crypto/ecdsa.zig	/pub const compressed_sec1_encoded_length = 1 + Curve.Fe.encoded_length/;"	constant
compression	$ZIGLIB/std/compress/deflate/compressor.zig	/compression: Compression/;"	field
compression_level	$ZIGLIB/std/compress/deflate/compressor.zig	/compression_level: CompressionLevel/;"	field
compressor	$ZIGLIB/std/compress/deflate/compressor.zig	/^pub fn compressor($/;"	function
comptime	$ZIGLIB/std/zig/Ast.zig	/@"comptime"/;"	field
comptimeMod	$ZIGLIB/std/math.zig	/^pub fn comptimeMod(num: anytype, comptime denom: comptime_int) IntFittingRange(0, denom - 1) {$/;"	function
comptimePrint	$ZIGLIB/std/fmt.zig	/^pub fn comptimePrint(comptime fmt: []const u8, args: anytype) *const [count(fmt, args):0]u8 {$/;"	function
comptime_doc_comment	$ZIGLIB/std/zig/Ast.zig	/comptime_doc_comment/;"	field
comptime_field	$ZIGLIB/std/mem.zig	/comptime comptime_field: u8 = 5/;"	field
comptime_noalias	$ZIGLIB/std/zig/Ast.zig	/var comptime_noalias: ?TokenIndex = null/;"	variable
comptime_node	$ZIGLIB/std/zig/Parse.zig	/const comptime_node = try p.addNode(.{$/;"	constant
comptime_token	$ZIGLIB/std/zig/render.zig	/const comptime_token = main_tokens[node]/;"	constant
comptime_union	$ZIGLIB/std/mem.zig	/comptime var comptime_union = zeroes(C_union)/;"	variable
compute	$ZIGLIB/std/target.zig	/compute/;"	field
computeCmp	$ZIGLIB/std/Build/CheckObjectStep.zig	/fn computeCmp(self: *Check, phrase: []const u8, expected: ComputeCompareExpected) void {$/;"	function
computeNonceAndSign	$ZIGLIB/std/crypto/25519/ed25519.zig	/fn computeNonceAndSign(public_key: PublicKey, msg: []const u8, noise: ?[noise_length]u8, scalar: CompressedScalar, prefix: []const u8) (IdentityElementError || NonCanonicalError || KeyMismatchError || WeakPublicKeyError)!Signature {$/;"	function
computeOutFileNames	$ZIGLIB/std/Build/CompileStep.zig	/^fn computeOutFileNames(self: *CompileStep) void {$/;"	function
computeProductApprox	$ZIGLIB/std/fmt/parse_float/convert_eisel_lemire.zig	/^fn computeProductApprox(q: i64, w: u64, comptime precision: usize) U128 {$/;"	function
compute_cmp	$ZIGLIB/std/Build/CheckObjectStep.zig	/compute_cmp/;"	field
computedTag	$ZIGLIB/std/crypto/salsa20.zig	/var computedTag: [tag_length]u8 = undefined/;"	variable
computed_tag	$ZIGLIB/std/crypto/isap.zig	/var computed_tag = mac(c, ad, npub, key)/;"	variable
con_in	$ZIGLIB/std/os/uefi/tables/system_table.zig	/con_in: ?*SimpleTextInputProtocol/;"	field
con_out	$ZIGLIB/std/os/uefi/tables/system_table.zig	/con_out: ?*SimpleTextOutputProtocol/;"	field
concat	$ZIGLIB/std/mem.zig	/^pub fn concat(allocator: Allocator, comptime T: type, slices: []const []const T) ![]T {$/;"	function
concatByMoving	$ZIGLIB/std/linked_list.zig	/pub fn concatByMoving(list1: *Self, list2: *Self) void {$/;"	function
concatMaybeSentinel	$ZIGLIB/std/mem.zig	/^pub fn concatMaybeSentinel(allocator: Allocator, comptime T: type, slices: []const []const T, comptime s: ?T) ![]T {$/;"	function
concatWithSentinel	$ZIGLIB/std/mem.zig	/^pub fn concatWithSentinel(allocator: Allocator, comptime T: type, slices: []const []const T, comptime s: T) ![:s]T {$/;"	function
cond	$ZIGLIB/std/Thread/Semaphore.zig	/^cond: Condition = .{}/;"	field
cond_expr	$ZIGLIB/std/zig/Ast.zig	/cond_expr: Node.Index/;"	field
condition	$ZIGLIB/std/zig/render.zig	/const condition = datas[node].lhs/;"	constant
config	$ZIGLIB/std/os/linux.zig	/config: u64 = 0/;"	field
config1	$ZIGLIB/std/os/linux.zig	/config1: u64 = 0/;"	field
config2	$ZIGLIB/std/os/linux.zig	/config2: u64 = 0/;"	field
config_data	$ZIGLIB/std/os/uefi/protocols/ip6_protocol.zig	/config_data: Ip6ConfigData/;"	field
config_header	$ZIGLIB/std/Build/Step.zig	/config_header/;"	field
config_header_step	$ZIGLIB/std/Build/CompileStep.zig	/config_header_step: *ConfigHeaderStep/;"	field
configuration_table	$ZIGLIB/std/os/uefi/tables/system_table.zig	/configuration_table: [*]ConfigurationTable/;"	field
configure	$ZIGLIB/std/os/uefi/protocols/udp6_protocol.zig	/pub fn configure(self: *const Udp6Protocol, udp6_config_data: ?*const Udp6ConfigData) Status {$/;"	function
conflict	$ZIGLIB/std/http.zig	/conflict = 409/;"	field
conj	$ZIGLIB/std/math/complex/conj.zig	/^pub fn conj(z: anytype) Complex(@TypeOf(z.re)) {$/;"	function
conjugate	$ZIGLIB/std/math/complex.zig	/pub fn conjugate(self: Self) Self {$/;"	function
conn	$ZIGLIB/std/http/Client.zig	/var conn: Connection = .{$/;"	variable
connect	$ZIGLIB/std/os/linux/x86.zig	/pub const connect = 3/;"	constant
connectController	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/connectController: *const fn (controller_handle: Handle, driver_image_handle: ?Handle, remaining_device_path: ?*DevicePathProtocol, recursive: bool) callconv(.C) Status/;"	field
connectUnixSocket	$ZIGLIB/std/net.zig	/^pub fn connectUnixSocket(path: []const u8) !Stream {$/;"	function
connection	$ZIGLIB/std/http/Client.zig	/connection: Connection/;"	field
console_in_handle	$ZIGLIB/std/os/uefi/tables/system_table.zig	/console_in_handle: ?Handle/;"	field
console_out_handle	$ZIGLIB/std/os/uefi/tables/system_table.zig	/console_out_handle: ?Handle/;"	field
console_protocol	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/console_protocol: bool/;"	field
const	$ZIGLIB/std/os/linux/bpf/btf.zig	/@"const"/;"	field
const1s	$ZIGLIB/std/dwarf/OP.zig	/^pub const const1s = 0x09/;"	constant
const1u	$ZIGLIB/std/dwarf/OP.zig	/^pub const const1u = 0x08/;"	constant
const2s	$ZIGLIB/std/dwarf/OP.zig	/^pub const const2s = 0x0b/;"	constant
const2u	$ZIGLIB/std/dwarf/OP.zig	/^pub const const2u = 0x0a/;"	constant
const4s	$ZIGLIB/std/dwarf/OP.zig	/^pub const const4s = 0x0d/;"	constant
const4u	$ZIGLIB/std/dwarf/OP.zig	/^pub const const4u = 0x0c/;"	constant
const8s	$ZIGLIB/std/dwarf/OP.zig	/^pub const const8s = 0x0f/;"	constant
const8u	$ZIGLIB/std/dwarf/OP.zig	/^pub const const8u = 0x0e/;"	constant
constIterator	$ZIGLIB/std/segmented_list.zig	/pub fn constIterator(self: *const Self, start_index: usize) ConstIterator {$/;"	function
constSlice	$ZIGLIB/std/crypto/scrypt.zig	/pub fn constSlice(self: *const Self) []const u8 {$/;"	function
const_add_pc	$ZIGLIB/std/dwarf.zig	/pub const const_add_pc = 0x08/;"	constant
const_buffer	$ZIGLIB/std/io/stream_source.zig	/const_buffer: io.FixedBufferStream([]const u8)/;"	field
const_expr	$ZIGLIB/std/dwarf/AT.zig	/^pub const const_expr = 0x6c/;"	constant
const_fields	$ZIGLIB/std/enums.zig	/const const_fields = std.meta.fields(E)/;"	constant
const_list	$ZIGLIB/std/array_list.zig	/const const_list = list/;"	constant
const_token	$ZIGLIB/std/zig/Ast.zig	/const_token: ?TokenIndex/;"	field
const_type	$ZIGLIB/std/dwarf/TAG.zig	/^pub const const_type = 0x26/;"	constant
const_value	$ZIGLIB/std/dwarf/AT.zig	/^pub const const_value = 0x1c/;"	constant
constant	$ZIGLIB/std/dwarf/TAG.zig	/^pub const constant = 0x27/;"	constant
constant_le	$ZIGLIB/std/crypto/salsa20.zig	/const constant_le = comptime [4]u32{$/;"	constant
constpool	$ZIGLIB/std/target/csky.zig	/constpool/;"	field
constrainIndex	$ZIGLIB/std/array_hash_map.zig	/fn constrainIndex(header: IndexHeader, i: usize) usize {$/;"	function
constructCMacro	$ZIGLIB/std/Build.zig	/^pub fn constructCMacro(allocator: Allocator, name: []const u8, value: ?[]const u8) []const u8 {$/;"	function
constructVersion	$ZIGLIB/compiler_rt/os_version_check.zig	/inline fn constructVersion(major: u32, minor: u32, subminor: u32) u32 {$/;"	function
constructed	$ZIGLIB/std/crypto/Certificate.zig	/constructed/;"	field
consts	$ZIGLIB/std/dwarf/OP.zig	/^pub const consts = 0x11/;"	constant
constu	$ZIGLIB/std/dwarf/OP.zig	/^pub const constu = 0x10/;"	constant
constx	$ZIGLIB/std/dwarf/OP.zig	/^pub const constx = 0xa2/;"	constant
consumed	$ZIGLIB/std/fmt/parse_float/parse.zig	/var consumed: usize = 0/;"	variable
consumer	$ZIGLIB/std/os/linux.zig	/consumer: u64/;"	field
cont_expr	$ZIGLIB/std/zig/Parse.zig	/const cont_expr = try p.parseWhileContinueExpr()/;"	constant
containerDecl	$ZIGLIB/std/zig/Ast.zig	/^pub fn containerDecl(tree: Ast, node: Node.Index) full.ContainerDecl {$/;"	function
containerDeclArg	$ZIGLIB/std/zig/Ast.zig	/^pub fn containerDeclArg(tree: Ast, node: Node.Index) full.ContainerDecl {$/;"	function
containerDeclRoot	$ZIGLIB/std/zig/Ast.zig	/^pub fn containerDeclRoot(tree: Ast) full.ContainerDecl {$/;"	function
containerDeclTwo	$ZIGLIB/std/zig/Ast.zig	/^pub fn containerDeclTwo(tree: Ast, buffer: *[2]Node.Index, node: Node.Index) full.ContainerDecl {$/;"	function
containerField	$ZIGLIB/std/zig/Ast.zig	/^pub fn containerField(tree: Ast, node: Node.Index) full.ContainerField {$/;"	function
containerFieldAlign	$ZIGLIB/std/zig/Ast.zig	/^pub fn containerFieldAlign(tree: Ast, node: Node.Index) full.ContainerField {$/;"	function
containerFieldInit	$ZIGLIB/std/zig/Ast.zig	/^pub fn containerFieldInit(tree: Ast, node: Node.Index) full.ContainerField {$/;"	function
containerLayout	$ZIGLIB/std/meta.zig	/^pub fn containerLayout(comptime T: type) Type.ContainerLayout {$/;"	function
container_bits	$ZIGLIB/std/packed_int_array.zig	/const container_bits = @bitSizeOf(Container)/;"	constant
container_decl	$ZIGLIB/std/zig/Ast.zig	/container_decl/;"	field
container_decl_arg	$ZIGLIB/std/zig/Ast.zig	/container_decl_arg/;"	field
container_decl_arg_trailing	$ZIGLIB/std/zig/Ast.zig	/container_decl_arg_trailing/;"	field
container_decl_trailing	$ZIGLIB/std/zig/Ast.zig	/container_decl_trailing/;"	field
container_decl_two	$ZIGLIB/std/zig/Ast.zig	/container_decl_two/;"	field
container_decl_two_trailing	$ZIGLIB/std/zig/Ast.zig	/container_decl_two_trailing/;"	field
container_doc_comment	$ZIGLIB/std/zig/tokenizer.zig	/container_doc_comment/;"	field
container_field	$ZIGLIB/std/zig/render.zig	/const container_field = tree.fullContainerField(member) orelse continue/;"	constant
container_field_align	$ZIGLIB/std/zig/Ast.zig	/container_field_align/;"	field
container_field_init	$ZIGLIB/std/zig/Ast.zig	/container_field_init/;"	field
containing	$ZIGLIB/std/fs.zig	/var containing = top/;"	variable
containing_type	$ZIGLIB/std/dwarf/AT.zig	/^pub const containing_type = 0x1d/;"	constant
contains	$ZIGLIB/std/hash_map.zig	/pub fn contains(self: Self, key: K) bool {$/;"	function
containsAdapted	$ZIGLIB/std/hash_map.zig	/pub fn containsAdapted(self: Self, key: anytype, ctx: anytype) bool {$/;"	function
containsAtLeast	$ZIGLIB/std/mem.zig	/^pub fn containsAtLeast(comptime T: type, haystack: []const T, expected_count: usize, needle: []const T) bool {$/;"	function
containsContext	$ZIGLIB/std/hash_map.zig	/pub fn containsContext(self: *const Self, key: K, ctx: Context) bool {$/;"	function
contains_comment	$ZIGLIB/std/zig/render.zig	/const contains_comment = hasComment(tree, array_init.ast.lbrace, rbrace)/;"	constant
contains_multiline_string	$ZIGLIB/std/zig/render.zig	/const contains_multiline_string = hasMultilineString(tree, array_init.ast.lbrace, rbrace)/;"	constant
contains_newline	$ZIGLIB/std/zig/render.zig	/var contains_newline = false/;"	variable
contended	$ZIGLIB/std/Thread/Mutex.zig	/const contended = 0b11/;"	constant
content	$ZIGLIB/std/zig/system/darwin/macos.zig	/var content: []const u8 = ""/;"	variable
content_length	$ZIGLIB/std/http/Client.zig	/content_length: ?u64 = null/;"	field
content_type_code	$ZIGLIB/std/dwarf.zig	/content_type_code: u8/;"	field
contents	$ZIGLIB/std/zig/render.zig	/const contents = lexeme[2 .. lexeme.len - 1]/;"	constant
contents_i	$ZIGLIB/std/zig/render.zig	/var contents_i: usize = 0/;"	variable
contents_index	$ZIGLIB/std/process.zig	/var contents_index: usize = 0/;"	variable
contents_slice	$ZIGLIB/std/process.zig	/const contents_slice = contents.items/;"	constant
contents_updated	$ZIGLIB/std/fs/watch.zig	/const contents_updated = try std.fs.cwd().readFileAlloc(allocator, file_path, 1024 * 1024)/;"	constant
context	$ZIGLIB/std/treap.zig	/context: union(enum) {$/;"	field
contextFeedback	$ZIGLIB/std/crypto/chacha20.zig	/inline fn contextFeedback(x: *BlockVec, ctx: BlockVec) void {$/;"	function
contextLessThan	$ZIGLIB/std/priority_queue.zig	/^fn contextLessThan(context: []const u32, a: usize, b: usize) Order {$/;"	function
contextLessThanComparison	$ZIGLIB/std/priority_dequeue.zig	/^fn contextLessThanComparison(context: []const u32, a: usize, b: usize) Order {$/;"	function
context_hasher	$ZIGLIB/std/crypto/blake3.zig	/var context_hasher = Blake3.init_internal(IV, DERIVE_KEY_CONTEXT)/;"	variable
context_key	$ZIGLIB/std/crypto/blake3.zig	/var context_key: [KEY_LEN]u8 = undefined/;"	variable
context_key_words	$ZIGLIB/std/crypto/blake3.zig	/const context_key_words = wordsFromLittleEndianBytes(8, context_key)/;"	constant
context_ptr	$ZIGLIB/std/os.zig	/const context_ptr = @ptrCast(*const Context, @alignCast(@alignOf(*const Context), data))/;"	constant
context_specific	$ZIGLIB/std/crypto/Certificate.zig	/context_specific/;"	field
context_string	$ZIGLIB/std/crypto/blake3.zig	/context_string: []const u8/;"	field
context_switch	$ZIGLIB/std/os/linux.zig	/context_switch: bool = false/;"	field
contextidr_el2	$ZIGLIB/std/target/aarch64.zig	/contextidr_el2/;"	field
contiguous	$ZIGLIB/std/tar.zig	/contiguous = '7'/;"	field
contiki	$ZIGLIB/std/target.zig	/contiki/;"	field
continuationPointer	$ZIGLIB/std/os/uefi/tables/runtime_services.zig	/continuationPointer: EfiPhysicalAddress/;"	field
continue	$ZIGLIB/std/zig/Ast.zig	/@"continue"/;"	field
continue_	$ZIGLIB/std/compress/lzma/decode.zig	/continue_/;"	field
contract	$ZIGLIB/std/c/solaris.zig	/contract: ctid_t/;"	field
control	$ZIGLIB/std/segmented_list.zig	/var control: [100]i32 = undefined/;"	variable
control_code	$ZIGLIB/std/ascii.zig	/^pub const control_code = struct {$/;"	struct
controllen	$ZIGLIB/std/os/linux/x86_64.zig	/controllen: socklen_t/;"	field
controller_handle	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/controller_handle: ?Handle/;"	field
controller_number	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/controller_number: u32 align(1)/;"	field
conventional	$ZIGLIB/std/heap/WasmPageAllocator.zig	/^const conventional = FreeBlock{ .data = &_conventional_data }/;"	constant
conventional_memsize	$ZIGLIB/std/heap/WasmPageAllocator.zig	/const conventional_memsize = WasmPageAllocator.conventional.totalPages() * mem.page_size/;"	constant
convert	$ZIGLIB/std/dwarf/OP.zig	/^pub const convert = 0xa8/;"	constant
convertEiselLemire	$ZIGLIB/std/fmt/parse_float/convert_eisel_lemire.zig	/^pub fn convertEiselLemire(comptime T: type, q: i64, w_: u64) ?BiasedFp(f64) {$/;"	function
convertFast	$ZIGLIB/std/fmt/parse_float/convert_fast.zig	/^pub fn convertFast(comptime T: type, n: Number(T)) ?T {$/;"	function
convertHex	$ZIGLIB/std/fmt/parse_float/convert_hex.zig	/^pub fn convertHex(comptime T: type, n_: Number(T)) T {$/;"	function
convertPointer	$ZIGLIB/std/os/uefi/tables/runtime_services.zig	/convertPointer: *const fn (debug_disposition: usize, address: **anyopaque) callconv(.C) Status/;"	field
convertSlow	$ZIGLIB/std/fmt/parse_float/convert_slow.zig	/^pub fn convertSlow(comptime T: type, s: []const u8) BiasedFp(T) {$/;"	function
convertToNonTupleLike	$ZIGLIB/std/zig/Ast.zig	/pub fn convertToNonTupleLike(cf: *ContainerField, nodes: NodeList.Slice) void {$/;"	function
convertToTwosComplement	$ZIGLIB/std/math/big/int.zig	/pub fn convertToTwosComplement(r: *Mutable, a: Const, signedness: Signedness, bit_count: usize) void {$/;"	function
cookie	$ZIGLIB/std/os/linux.zig	/cookie: u32/;"	field
cooperlake	$ZIGLIB/std/target/x86.zig	/pub const cooperlake = CpuModel{$/;"	constant
copy	$ZIGLIB/std/zig/Parse.zig	/var copy = msg/;"	variable
copyBackwards	$ZIGLIB/std/mem.zig	/^pub fn copyBackwards(comptime T: type, dest: []T, source: []const T) void {$/;"	function
copyData	$ZIGLIB/std/compress/deflate/decompressor.zig	/fn copyData(self: *Self) Error!void {$/;"	function
copyFile	$ZIGLIB/std/fs.zig	/pub fn copyFile(source_dir: Dir, source_path: []const u8, dest_dir: Dir, dest_path: []const u8, options: CopyFileOptions) CopyFileError!void {$/;"	function
copyFileAbsolute	$ZIGLIB/std/fs.zig	/^pub fn copyFileAbsolute(source_path: []const u8, dest_path: []const u8, args: CopyFileOptions) !void {$/;"	function
copyInt	$ZIGLIB/std/math/big/rational.zig	/pub fn copyInt(self: *Rational, a: Int) !void {$/;"	function
copyMem	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/copyMem: *const fn (dest: [*]u8, src: [*]const u8, len: usize) callconv(.C) void/;"	field
copyRange	$ZIGLIB/std/fs/file.zig	/pub fn copyRange(in: File, in_offset: u64, out: File, out_offset: u64, len: u64) CopyRangeError!u64 {$/;"	function
copyRangeAll	$ZIGLIB/std/fs/file.zig	/pub fn copyRangeAll(in: File, in_offset: u64, out: File, out_offset: u64, len: u64) CopyRangeError!u64 {$/;"	function
copyRatio	$ZIGLIB/std/math/big/rational.zig	/pub fn copyRatio(self: *Rational, a: Int, b: Int) !void {$/;"	function
copy_count	$ZIGLIB/std/c/haiku.zig	/copy_count: u32/;"	field
copy_cqe	$ZIGLIB/std/os/linux/io_uring.zig	/pub fn copy_cqe(ring: *IO_Uring) !linux.io_uring_cqe {$/;"	function
copy_cqes	$ZIGLIB/std/os/linux/io_uring.zig	/pub fn copy_cqes(self: *IO_Uring, cqes: []linux.io_uring_cqe, wait_nr: u32) !u32 {$/;"	function
copy_cqes_ready	$ZIGLIB/std/os/linux/io_uring.zig	/fn copy_cqes_ready(self: *IO_Uring, cqes: []linux.io_uring_cqe, wait_nr: u32) u32 {$/;"	function
copy_dist	$ZIGLIB/std/compress/deflate/decompressor.zig	/copy_dist: u32/;"	field
copy_end	$ZIGLIB/std/segmented_list.zig	/const copy_end = std.math.min(shelfSize(shelf_index), copy_start + end - i)/;"	constant
copy_file	$ZIGLIB/std/fs.zig	/^fn copy_file(fd_in: os.fd_t, fd_out: os.fd_t, maybe_size: ?u64) CopyFileRawError!void {$/;"	function
copy_file_range	$ZIGLIB/std/os/linux/syscalls.zig	/copy_file_range = Linux + 360/;"	field
copy_len	$ZIGLIB/std/compress/deflate/decompressor.zig	/copy_len: u32/;"	field
copy_start	$ZIGLIB/std/segmented_list.zig	/const copy_start = boxIndex(i, shelf_index)/;"	constant
copy_strings	$ZIGLIB/std/json.zig	/copy_strings: bool/;"	field
copyfile_state_t	$ZIGLIB/std/c/darwin.zig	/^pub const copyfile_state_t = *opaque {}/;"	constant
copysign	$ZIGLIB/std/math/copysign.zig	/^pub fn copysign(magnitude: anytype, sign: @TypeOf(magnitude)) @TypeOf(magnitude) {$/;"	function
core	$ZIGLIB/std/crypto.zig	/^pub const core = struct {$/;"	struct
core2	$ZIGLIB/std/target/x86.zig	/pub const core2 = CpuModel{$/;"	constant
core_avx2	$ZIGLIB/std/target/x86.zig	/pub const core_avx2 = CpuModel{$/;"	constant
core_avx_i	$ZIGLIB/std/target/x86.zig	/pub const core_avx_i = CpuModel{$/;"	constant
core_count	$ZIGLIB/std/zig/system/windows.zig	/const core_count = getCpuCount()/;"	constant
core_no	$ZIGLIB/std/zig/system/linux.zig	/core_no: usize = 0/;"	field
coreclr	$ZIGLIB/std/target.zig	/coreclr/;"	field
corei7	$ZIGLIB/std/target/x86.zig	/pub const corei7 = CpuModel{$/;"	constant
corei7_avx	$ZIGLIB/std/target/x86.zig	/pub const corei7_avx = CpuModel{$/;"	constant
cores	$ZIGLIB/std/zig/system/windows.zig	/var cores: [128]Target.Cpu = undefined/;"	variable
corr	$ZIGLIB/std/tz.zig	/const corr = try reader.readIntBig(i32)/;"	constant
correct_disk_designator	$ZIGLIB/std/fs/path.zig	/var correct_disk_designator = true/;"	variable
correction	$ZIGLIB/std/tz.zig	/correction: i16/;"	field
correction32	$ZIGLIB/compiler_rt/divdf3.zig	/var correction32: u32 = undefined/;"	variable
correction64	$ZIGLIB/compiler_rt/divxf3.zig	/var correction64: u64 = undefined/;"	variable
corrupt_input_error_offset	$ZIGLIB/std/compress/deflate/decompressor.zig	/^var corrupt_input_error_offset: u64 = undefined/;"	variable
corrupt_switch	$ZIGLIB/std/builtin.zig	/pub const corrupt_switch = "switch on corrupt value"/;"	constant
cortex_a12	$ZIGLIB/std/target/arm.zig	/pub const cortex_a12 = CpuModel{$/;"	constant
cortex_a15	$ZIGLIB/std/target/arm.zig	/pub const cortex_a15 = CpuModel{$/;"	constant
cortex_a17	$ZIGLIB/std/target/arm.zig	/pub const cortex_a17 = CpuModel{$/;"	constant
cortex_a32	$ZIGLIB/std/target/arm.zig	/pub const cortex_a32 = CpuModel{$/;"	constant
cortex_a34	$ZIGLIB/std/target/aarch64.zig	/pub const cortex_a34 = CpuModel{$/;"	constant
cortex_a35	$ZIGLIB/std/target/arm.zig	/pub const cortex_a35 = CpuModel{$/;"	constant
cortex_a5	$ZIGLIB/std/target/arm.zig	/pub const cortex_a5 = CpuModel{$/;"	constant
cortex_a510	$ZIGLIB/std/target/aarch64.zig	/pub const cortex_a510 = CpuModel{$/;"	constant
cortex_a53	$ZIGLIB/std/target/arm.zig	/pub const cortex_a53 = CpuModel{$/;"	constant
cortex_a55	$ZIGLIB/std/target/arm.zig	/pub const cortex_a55 = CpuModel{$/;"	constant
cortex_a57	$ZIGLIB/std/target/arm.zig	/pub const cortex_a57 = CpuModel{$/;"	constant
cortex_a65	$ZIGLIB/std/target/aarch64.zig	/pub const cortex_a65 = CpuModel{$/;"	constant
cortex_a65ae	$ZIGLIB/std/target/aarch64.zig	/pub const cortex_a65ae = CpuModel{$/;"	constant
cortex_a7	$ZIGLIB/std/target/arm.zig	/pub const cortex_a7 = CpuModel{$/;"	constant
cortex_a710	$ZIGLIB/std/target/arm.zig	/pub const cortex_a710 = CpuModel{$/;"	constant
cortex_a72	$ZIGLIB/std/target/arm.zig	/pub const cortex_a72 = CpuModel{$/;"	constant
cortex_a73	$ZIGLIB/std/target/arm.zig	/pub const cortex_a73 = CpuModel{$/;"	constant
cortex_a75	$ZIGLIB/std/target/arm.zig	/pub const cortex_a75 = CpuModel{$/;"	constant
cortex_a76	$ZIGLIB/std/target/arm.zig	/pub const cortex_a76 = CpuModel{$/;"	constant
cortex_a76ae	$ZIGLIB/std/target/arm.zig	/pub const cortex_a76ae = CpuModel{$/;"	constant
cortex_a77	$ZIGLIB/std/target/arm.zig	/pub const cortex_a77 = CpuModel{$/;"	constant
cortex_a78	$ZIGLIB/std/target/arm.zig	/pub const cortex_a78 = CpuModel{$/;"	constant
cortex_a78c	$ZIGLIB/std/target/arm.zig	/pub const cortex_a78c = CpuModel{$/;"	constant
cortex_a8	$ZIGLIB/std/target/arm.zig	/pub const cortex_a8 = CpuModel{$/;"	constant
cortex_a9	$ZIGLIB/std/target/arm.zig	/pub const cortex_a9 = CpuModel{$/;"	constant
cortex_m0	$ZIGLIB/std/target/arm.zig	/pub const cortex_m0 = CpuModel{$/;"	constant
cortex_m0plus	$ZIGLIB/std/target/arm.zig	/pub const cortex_m0plus = CpuModel{$/;"	constant
cortex_m1	$ZIGLIB/std/target/arm.zig	/pub const cortex_m1 = CpuModel{$/;"	constant
cortex_m23	$ZIGLIB/std/target/arm.zig	/pub const cortex_m23 = CpuModel{$/;"	constant
cortex_m3	$ZIGLIB/std/target/arm.zig	/pub const cortex_m3 = CpuModel{$/;"	constant
cortex_m33	$ZIGLIB/std/target/arm.zig	/pub const cortex_m33 = CpuModel{$/;"	constant
cortex_m35p	$ZIGLIB/std/target/arm.zig	/pub const cortex_m35p = CpuModel{$/;"	constant
cortex_m4	$ZIGLIB/std/target/arm.zig	/pub const cortex_m4 = CpuModel{$/;"	constant
cortex_m55	$ZIGLIB/std/target/arm.zig	/pub const cortex_m55 = CpuModel{$/;"	constant
cortex_m7	$ZIGLIB/std/target/arm.zig	/pub const cortex_m7 = CpuModel{$/;"	constant
cortex_m85	$ZIGLIB/std/target/arm.zig	/pub const cortex_m85 = CpuModel{$/;"	constant
cortex_r4	$ZIGLIB/std/target/arm.zig	/pub const cortex_r4 = CpuModel{$/;"	constant
cortex_r4f	$ZIGLIB/std/target/arm.zig	/pub const cortex_r4f = CpuModel{$/;"	constant
cortex_r5	$ZIGLIB/std/target/arm.zig	/pub const cortex_r5 = CpuModel{$/;"	constant
cortex_r52	$ZIGLIB/std/target/arm.zig	/pub const cortex_r52 = CpuModel{$/;"	constant
cortex_r7	$ZIGLIB/std/target/arm.zig	/pub const cortex_r7 = CpuModel{$/;"	constant
cortex_r8	$ZIGLIB/std/target/arm.zig	/pub const cortex_r8 = CpuModel{$/;"	constant
cortex_r82	$ZIGLIB/std/target/aarch64.zig	/pub const cortex_r82 = CpuModel{$/;"	constant
cortex_x1	$ZIGLIB/std/target/arm.zig	/pub const cortex_x1 = CpuModel{$/;"	constant
cortex_x1c	$ZIGLIB/std/target/arm.zig	/pub const cortex_x1c = CpuModel{$/;"	constant
cortex_x2	$ZIGLIB/std/target/aarch64.zig	/pub const cortex_x2 = CpuModel{$/;"	constant
cosf	$ZIGLIB/compiler_rt/cos.zig	/^pub fn cosf(x: f32) callconv(.C) f32 {$/;"	function
cosh	$ZIGLIB/std/math/cosh.zig	/^pub fn cosh(x: anytype) @TypeOf(x) {$/;"	function
cosh32	$ZIGLIB/std/math/cosh.zig	/^fn cosh32(x: f32) f32 {$/;"	function
cosh64	$ZIGLIB/std/math/cosh.zig	/^fn cosh64(x: f64) f64 {$/;"	function
cosl	$ZIGLIB/compiler_rt/cos.zig	/^pub fn cosl(x: c_longdouble) callconv(.C) c_longdouble {$/;"	function
cosq	$ZIGLIB/compiler_rt/cos.zig	/^pub fn cosq(a: f128) callconv(.C) f128 {$/;"	function
count	$ZIGLIB/std/zig/render.zig	/var count: usize = 1/;"	variable
countBits	$ZIGLIB/std/crypto/Certificate.zig	/fn countBits(a: std.math.big.int.Const, allocator: std.mem.Allocator) !usize {$/;"	function
countChildren	$ZIGLIB/std/linked_list.zig	/pub fn countChildren(node: *const Node) usize {$/;"	function
countElementsWithValue	$ZIGLIB/std/simd.zig	/^pub fn countElementsWithValue(vec: anytype, value: std.meta.Child(@TypeOf(vec))) VectorCount(@TypeOf(vec)) {$/;"	function
countErrors	$ZIGLIB/std/valgrind.zig	/^pub fn countErrors() usize {$/;"	function
countLeakBlocks	$ZIGLIB/std/valgrind/memcheck.zig	/^pub fn countLeakBlocks() CountResult {$/;"	function
countLeaks	$ZIGLIB/std/valgrind/memcheck.zig	/^pub fn countLeaks() CountResult {$/;"	function
countTrues	$ZIGLIB/std/simd.zig	/^pub fn countTrues(vec: anytype) VectorCount(@TypeOf(vec)) {$/;"	function
count_completions	$ZIGLIB/std/os/linux/io_uring.zig	/const count_completions: u64 = 1/;"	constant
count_iovec_bytes	$ZIGLIB/std/os.zig	/^fn count_iovec_bytes(iovs: []const iovec_const) usize {$/;"	function
count_len	$ZIGLIB/std/Thread.zig	/var count_len: usize = @sizeOf(c_int)/;"	variable
count_size	$ZIGLIB/std/Thread.zig	/var count_size: usize = @sizeOf(c_int)/;"	variable
count_up	$ZIGLIB/std/simd.zig	/const count_up = iota(i32, len)/;"	constant
counter	$ZIGLIB/std/rand/Sfc64.zig	/^counter: u64 = undefined/;"	field
counterInt	$ZIGLIB/std/crypto/modes.zig	/var counterInt = mem.readInt(u128, &iv, endian)/;"	variable
counter_reader	$ZIGLIB/std/compress/lzma2/decode.zig	/const counter_reader = counter.reader()/;"	constant
counters	$ZIGLIB/std/crypto/modes.zig	/var counters: [parallel_count * 16]u8 = undefined/;"	variable
countingReader	$ZIGLIB/std/io/counting_reader.zig	/^pub fn countingReader(reader: anytype) CountingReader(@TypeOf(reader)) {$/;"	function
countingWriter	$ZIGLIB/std/io/counting_writer.zig	/^pub fn countingWriter(child_stream: anytype) CountingWriter(@TypeOf(child_stream)) {$/;"	function
counting_reader	$ZIGLIB/std/compress/xz.zig	/const counting_reader = counter.reader()/;"	constant
counting_stream	$ZIGLIB/std/io/counting_writer.zig	/var counting_stream = countingWriter(std.io.null_writer)/;"	variable
counting_writer	$ZIGLIB/std/fmt.zig	/var counting_writer = std.io.countingWriter(std.io.null_writer)/;"	variable
countryName	$ZIGLIB/std/crypto/Certificate.zig	/countryName/;"	field
counts	$ZIGLIB/std/tz.zig	/counts: extern struct {$/;"	field
cp_len	$ZIGLIB/std/unicode.zig	/const cp_len = utf8ByteSequenceLength(it.bytes[it.i]) catch unreachable/;"	constant
cp_upper	$ZIGLIB/std/process.zig	/const cp_upper = upcase(cp)/;"	constant
cpr1_size	$ZIGLIB/std/elf.zig	/cpr1_size: u8/;"	field
cpr2_size	$ZIGLIB/std/elf.zig	/cpr2_size: u8/;"	field
cpsr	$ZIGLIB/std/c/darwin/aarch64.zig	/cpsr: u32/;"	field
cpu_arch	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/const cpu_arch = cross_target.getCpuArch()/;"	constant
cpu_arch_name	$ZIGLIB/std/Build/EmulatableRunStep.zig	/const cpu_arch_name: []const u8 = if (cpu_arch == .x86)$/;"	constant
cpu_count	$ZIGLIB/std/c/haiku.zig	/cpu_count: u32/;"	field
cpu_count_t	$ZIGLIB/std/os/linux.zig	/^pub const cpu_count_t = std.meta.Int(.unsigned, std.math.log2(CPU_SETSIZE * 8))/;"	constant
cpu_crypto	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/cpu_crypto: bool/;"	field
cpu_family	$ZIGLIB/std/zig/system/darwin/macos.zig	/var cpu_family: std.c.CPUFAMILY = undefined/;"	variable
cpu_features	$ZIGLIB/std/zig/CrossTarget.zig	/cpu_features: ?[]const u8 = null/;"	field
cpu_features_add	$ZIGLIB/std/zig/CrossTarget.zig	/^cpu_features_add: Target.Cpu.Feature.Set = Target.Cpu.Feature.Set.empty/;"	field
cpu_features_sub	$ZIGLIB/std/zig/CrossTarget.zig	/^cpu_features_sub: Target.Cpu.Feature.Set = Target.Cpu.Feature.Set.empty/;"	field
cpu_model	$ZIGLIB/std/zig/CrossTarget.zig	/^cpu_model: CpuModel = CpuModel.determined_by_cpu_arch/;"	field
cpu_model_set	$ZIGLIB/std/zig/CrossTarget.zig	/var cpu_model_set = target.cpu.model.features/;"	variable
cpu_models	$ZIGLIB/std/zig/system/arm.zig	/^pub const cpu_models = struct {$/;"	struct
cpu_name	$ZIGLIB/std/zig/CrossTarget.zig	/cpu_name: ?[]const u8 = null/;"	field
cpu_names	$ZIGLIB/std/zig/system/linux.zig	/const cpu_names = .{$/;"	constant
cpu_ok	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/const cpu_ok = cpu_ok: {$/;"	constant
cpu_set	$ZIGLIB/std/Thread.zig	/const cpu_set = try os.sched_getaffinity(0)/;"	constant
cpu_set_t	$ZIGLIB/std/os/linux.zig	/^pub const cpu_set_t = [CPU_SETSIZE \/ @sizeOf(usize)]usize/;"	constant
cpu_subtype_t	$ZIGLIB/std/macho.zig	/^pub const cpu_subtype_t = c_int/;"	constant
cpu_type_t	$ZIGLIB/std/macho.zig	/^pub const cpu_type_t = c_int/;"	constant
cpu_usage	$ZIGLIB/std/c/darwin.zig	/cpu_usage: integer_t/;"	field
cpuid	$ZIGLIB/std/zig/system/x86.zig	/^fn cpuid(leaf_id: u32, subid: u32) CpuidLeaf {$/;"	function
cpumap	$ZIGLIB/std/os/linux/bpf.zig	/cpumap/;"	field
cpusubtype	$ZIGLIB/std/macho.zig	/cpusubtype: cpu_subtype_t = 0/;"	field
cputype	$ZIGLIB/std/macho.zig	/cputype: cpu_type_t = 0/;"	field
cq_advance	$ZIGLIB/std/os/linux/io_uring.zig	/pub fn cq_advance(self: *IO_Uring, count: u32) void {$/;"	function
cq_entries	$ZIGLIB/std/os/linux.zig	/cq_entries: u32/;"	field
cq_off	$ZIGLIB/std/os/linux.zig	/cq_off: io_cqring_offsets/;"	field
cq_ready	$ZIGLIB/std/os/linux/io_uring.zig	/pub fn cq_ready(self: *IO_Uring) u32 {$/;"	function
cq_ring_needs_flush	$ZIGLIB/std/os/linux/io_uring.zig	/pub fn cq_ring_needs_flush(self: *IO_Uring) bool {$/;"	function
cqe_accept	$ZIGLIB/std/os/linux/io_uring.zig	/var cqe_accept = try ring.copy_cqe()/;"	variable
cqe_cancel	$ZIGLIB/std/os/linux/io_uring.zig	/var cqe_cancel = try ring.copy_cqe()/;"	variable
cqe_close	$ZIGLIB/std/os/linux/io_uring.zig	/const cqe_close = try ring.copy_cqe()/;"	constant
cqe_connect	$ZIGLIB/std/os/linux/io_uring.zig	/var cqe_connect = try ring.copy_cqe()/;"	variable
cqe_nop	$ZIGLIB/std/os/linux/io_uring.zig	/const cqe_nop = try ring.copy_cqe()/;"	constant
cqe_openat	$ZIGLIB/std/os/linux/io_uring.zig	/const cqe_openat = try ring.copy_cqe()/;"	constant
cqe_read	$ZIGLIB/std/os/linux/io_uring.zig	/const cqe_read = try ring.copy_cqe()/;"	constant
cqe_recv	$ZIGLIB/std/os/linux/io_uring.zig	/var cqe_recv = try ring.copy_cqe()/;"	variable
cqe_recvmsg	$ZIGLIB/std/os/linux/io_uring.zig	/const cqe_recvmsg = try ring.copy_cqe()/;"	constant
cqe_seen	$ZIGLIB/std/os/linux/io_uring.zig	/pub fn cqe_seen(self: *IO_Uring, cqe: *linux.io_uring_cqe) void {$/;"	function
cqe_send	$ZIGLIB/std/os/linux/io_uring.zig	/const cqe_send = try ring.copy_cqe()/;"	constant
cqe_sendmsg	$ZIGLIB/std/os/linux/io_uring.zig	/const cqe_sendmsg = try ring.copy_cqe()/;"	constant
cqe_timeout	$ZIGLIB/std/os/linux/io_uring.zig	/const cqe_timeout = try ring.copy_cqe()/;"	constant
cqe_write	$ZIGLIB/std/os/linux/io_uring.zig	/const cqe_write = try ring.copy_cqe()/;"	constant
cqes	$ZIGLIB/std/os/linux/io_uring.zig	/var cqes: [4]linux.io_uring_cqe = undefined/;"	variable
crbits	$ZIGLIB/std/target/powerpc.zig	/crbits/;"	field
crc32	$ZIGLIB/std/target/x86.zig	/crc32/;"	field
crc64	$ZIGLIB/std/compress/xz.zig	/crc64 = 0x04/;"	field
creat	$ZIGLIB/std/os/linux/syscalls.zig	/creat = Linux + 83/;"	field
create	$ZIGLIB/std/os/plan9.zig	/^pub fn create(path: [*:0]const u8, omode: OpenMode, perms: usize) usize {$/;"	function
createBlock	$ZIGLIB/std/valgrind/memcheck.zig	/^pub fn createBlock(qzz: []u8, desc: [*]u8) usize {$/;"	function
createBucket	$ZIGLIB/std/heap/general_purpose_allocator.zig	/fn createBucket(self: *Self, size_class: usize, bucket_index: usize) Error!*BucketHeader {$/;"	function
createChild	$ZIGLIB/std/os/uefi/protocols/udp6_service_binding_protocol.zig	/pub fn createChild(self: *const Udp6ServiceBindingProtocol, handle: *?Handle) Status {$/;"	function
createChildOnly	$ZIGLIB/std/Build.zig	/^fn createChildOnly(parent: *Build, dep_name: []const u8, build_root: []const u8) !*Build {$/;"	function
createEvent	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/createEvent: *const fn (type: u32, notify_tpl: usize, notify_func: ?*const fn (Event, ?*anyopaque) callconv(.C) void, notifyCtx: ?*const anyopaque, event: *Event) callconv(.C) Status/;"	field
createEventEx	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/createEventEx: *const fn (type: u32, notify_tpl: usize, notify_func: EfiEventNotify, notify_ctx: *const anyopaque, event_group: *align(8) const Guid, event: *Event) callconv(.C) Status/;"	field
createFile	$ZIGLIB/std/fs.zig	/pub fn createFile(self: Dir, sub_path: []const u8, flags: File.CreateFlags) File.OpenError!File {$/;"	function
createFileAbsolute	$ZIGLIB/std/fs.zig	/^pub fn createFileAbsolute(absolute_path: []const u8, flags: File.CreateFlags) File.OpenError!File {$/;"	function
createFileAbsoluteW	$ZIGLIB/std/fs.zig	/^pub fn createFileAbsoluteW(absolute_path_w: [*:0]const u16, flags: File.CreateFlags) File.OpenError!File {$/;"	function
createFileAbsoluteZ	$ZIGLIB/std/fs.zig	/^pub fn createFileAbsoluteZ(absolute_path_c: [*:0]const u8, flags: File.CreateFlags) File.OpenError!File {$/;"	function
createFileW	$ZIGLIB/std/fs.zig	/pub fn createFileW(self: Dir, sub_path_w: []const u16, flags: File.CreateFlags) File.OpenError!File {$/;"	function
createFileWasi	$ZIGLIB/std/fs.zig	/pub fn createFileWasi(self: Dir, sub_path: []const u8, flags: File.CreateFlags) File.OpenError!File {$/;"	function
createFileZ	$ZIGLIB/std/fs.zig	/pub fn createFileZ(self: Dir, sub_path_c: [*:0]const u8, flags: File.CreateFlags) File.OpenError!File {$/;"	function
createMempool	$ZIGLIB/std/valgrind.zig	/^pub fn createMempool(pool: [*]u8, rzB: usize, is_zeroed: bool, flags: usize) void {$/;"	function
createModule	$ZIGLIB/std/Build/OptionsStep.zig	/^pub fn createModule(self: *OptionsStep) *std.Build.Module {$/;"	function
createNode	$ZIGLIB/std/heap/arena_allocator.zig	/fn createNode(self: *ArenaAllocator, prev_len: usize, minimum_size: usize) ?*BufNode {$/;"	function
createNonce	$ZIGLIB/std/crypto/salsa20.zig	/fn createNonce(pk1: [public_length]u8, pk2: [public_length]u8) [Box.nonce_length]u8 {$/;"	function
createNullDelimitedEnvMap	$ZIGLIB/std/child_process.zig	/^pub fn createNullDelimitedEnvMap(arena: mem.Allocator, env_map: *const EnvMap) ![:null]?[*:0]u8 {$/;"	function
createPopup	$ZIGLIB/std/os/uefi/protocols/hii_popup_protocol.zig	/pub fn createPopup(self: *const HIIPopupProtocol, style: HIIPopupStyle, popup_type: HIIPopupType, handle: hii.HIIHandle, msg: u16, user_selection: ?*HIIPopupSelection) Status {$/;"	function
createSharedSecret	$ZIGLIB/std/crypto/salsa20.zig	/pub fn createSharedSecret(public_key: [public_length]u8, secret_key: [secret_length]u8) (IdentityElementError || WeakPublicKeyError)![shared_length]u8 {$/;"	function
createSocketTestHarness	$ZIGLIB/std/os/linux/io_uring.zig	/^fn createSocketTestHarness(ring: *IO_Uring) !SocketTestHarness {$/;"	function
createWindowExA	$ZIGLIB/std/os/windows/user32.zig	/^pub fn createWindowExA(dwExStyle: u32, lpClassName: [*:0]const u8, lpWindowName: [*:0]const u8, dwStyle: u32, X: i32, Y: i32, nWidth: i32, nHeight: i32, hWindParent: ?HWND, hMenu: ?HMENU, hInstance: HINSTANCE, lpParam: ?*anyopaque) !HWND {$/;"	function
createWindowExW	$ZIGLIB/std/os/windows/user32.zig	/^pub fn createWindowExW(dwExStyle: u32, lpClassName: [*:0]const u16, lpWindowName: [*:0]const u16, dwStyle: u32, X: i32, Y: i32, nWidth: i32, nHeight: i32, hWindParent: ?HWND, hMenu: ?HMENU, hInstance: HINSTANCE, lpParam: ?*anyopaque) !HWND {$/;"	function
createWindowsEnvBlock	$ZIGLIB/std/child_process.zig	/^pub fn createWindowsEnvBlock(allocator: mem.Allocator, env_map: *const EnvMap) ![]u16 {$/;"	function
create_exit_data	$ZIGLIB/std/builtin.zig	/pub fn create_exit_data(exit_msg: []const u8, exit_size: *usize) ![*:0]u16 {$/;"	function
create_file_device_path	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/pub fn create_file_device_path(self: *DevicePathProtocol, allocator: Allocator, path: [:0]align(1) const u16) !*DevicePathProtocol {$/;"	function
create_module	$ZIGLIB/std/os/linux/syscalls.zig	/create_module = Linux + 167/;"	field
create_options_flags	$ZIGLIB/std/os/windows.zig	/const create_options_flags: ULONG = if (options.remove_dir)$/;"	constant
create_time	$ZIGLIB/std/os/uefi/protocols/file_protocol.zig	/create_time: Time/;"	field
created	$ZIGLIB/std/http.zig	/created = 201/;"	field
creation	$ZIGLIB/std/os/windows.zig	/creation: ULONG/;"	field
creation_time	$ZIGLIB/std/fs/file.zig	/creation_time: i128/;"	field
critical_elem	$ZIGLIB/std/crypto/Certificate.zig	/const critical_elem = try der.Element.parse(cert_bytes, oid_elem.slice.end)/;"	constant
crl_distribution_points	$ZIGLIB/std/crypto/Certificate.zig	/crl_distribution_points/;"	field
crl_number	$ZIGLIB/std/crypto/Certificate.zig	/crl_number/;"	field
cross_target	$ZIGLIB/std/zig/CrossTarget.zig	/var cross_target = try CrossTarget.parse(.{})/;"	variable
crtim	$ZIGLIB/std/c/haiku.zig	/crtim: timespec/;"	field
crypt	$ZIGLIB/std/crypto.zig	/crypt/;"	field
crypt_format	$ZIGLIB/std/crypto/scrypt.zig	/^const crypt_format = struct {$/;"	struct
crypto	$ZIGLIB/std/target/powerpc.zig	/crypto/;"	field
cryptoRandomSeed	$ZIGLIB/std/std.zig	/pub const cryptoRandomSeed: fn (buffer: []u8) void = if (@hasDecl(options_override, "cryptoRandomSeed"))$/;"	constant
crypto_always_getrandom	$ZIGLIB/std/std.zig	/pub const crypto_always_getrandom: bool = if (@hasDecl(options_override, "crypto_always_getrandom"))$/;"	constant
csky	$ZIGLIB/std/target.zig	/csky/;"	field
csum_diff	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const csum_diff = @intToPtr(fn (from: *u32, from_size: u32, to: *u32, to_size: u32, seed: u32) i64, 28)/;"	constant
csum_level	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const csum_level = @intToPtr(fn (skb: *kern.SkBuff, level: u64) c_long, 135)/;"	constant
csum_update	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const csum_update = @intToPtr(fn (skb: *kern.SkBuff, csum: u32) i64, 40)/;"	constant
ct_i	$ZIGLIB/std/crypto/tls/Client.zig	/var ct_i: usize = 0/;"	variable
ct_length	$ZIGLIB/std/crypto/bcrypt.zig	/^const ct_length: usize = 24/;"	constant
ct_str	$ZIGLIB/std/crypto/bcrypt.zig	/var ct_str: [ct_str_length]u8 = undefined/;"	variable
ct_str_length	$ZIGLIB/std/crypto/bcrypt.zig	/^const ct_str_length: usize = 31/;"	constant
ctid_t	$ZIGLIB/std/c/solaris.zig	/^pub const ctid_t = id_t/;"	constant
ctim	$ZIGLIB/std/os/wasi.zig	/ctim: timestamp_t/;"	field
ctime	$ZIGLIB/std/os/wasi.zig	/pub fn ctime(self: filestat_t) timespec {$/;"	function
ctimespec	$ZIGLIB/std/c/darwin.zig	/ctimespec: timespec/;"	field
ctr_el0	$ZIGLIB/compiler_rt/clear_cache.zig	/var ctr_el0: u64 = 0/;"	variable
ctx_in	$ZIGLIB/std/os/linux/bpf.zig	/ctx_in: u64/;"	field
ctx_out	$ZIGLIB/std/os/linux/bpf.zig	/ctx_out: u64/;"	field
ctx_size_in	$ZIGLIB/std/os/linux/bpf.zig	/ctx_size_in: u32/;"	field
ctx_size_out	$ZIGLIB/std/os/linux/bpf.zig	/ctx_size_out: u32/;"	field
ctzXi2	$ZIGLIB/compiler_rt/count0bits.zig	/^inline fn ctzXi2(comptime T: type, a: T) i32 {$/;"	function
cuda	$ZIGLIB/std/target.zig	/cuda/;"	field
cumode	$ZIGLIB/std/target/amdgpu.zig	/cumode/;"	field
cur_bit	$ZIGLIB/std/crypto/isap.zig	/const cur_bit = @as(u64, (y[y.len - 1] & 1) << 7)/;"	constant
cur_bit_pos	$ZIGLIB/std/crypto/isap.zig	/const cur_bit_pos = @truncate(u3, 7 - (i % 8))/;"	constant
cur_buf	$ZIGLIB/std/heap/arena_allocator.zig	/const cur_buf = cur_node.data[@sizeOf(BufNode)..]/;"	constant
cur_byte_pos	$ZIGLIB/std/crypto/isap.zig	/const cur_byte_pos = i \/ 8/;"	constant
cur_node	$ZIGLIB/std/heap/arena_allocator.zig	/var cur_node = if (self.state.buffer_list.first) |first_node|$/;"	variable
curr	$ZIGLIB/std/sort.zig	/var curr = range.start/;"	variable
curr_addr	$ZIGLIB/std/os/darwin.zig	/var curr_addr = address/;"	variable
curr_bytes_read	$ZIGLIB/std/os/darwin.zig	/var curr_bytes_read: std.c.mach_msg_type_number_t = 0/;"	variable
curr_hash	$ZIGLIB/std/compress/deflate/deflate_fast.zig	/var curr_hash = hash(@truncate(u32, x))/;"	variable
curr_prot	$ZIGLIB/std/os/darwin.zig	/const curr_prot = try task.getCurrProtection(address, buf.len)/;"	constant
curr_read	$ZIGLIB/std/io/buffered_reader.zig	/curr_read: usize/;"	field
curr_size	$ZIGLIB/std/os/darwin.zig	/const curr_size = maxBytesLeftInPage(page_size, curr_addr, count - total_written)/;"	constant
curr_value	$ZIGLIB/std/os.zig	/var curr_value: linux.itimerspec = undefined/;"	variable
current	$ZIGLIB/std/time.zig	/const current = self.sample()/;"	constant
currentIndent	$ZIGLIB/std/zig/render.zig	/fn currentIndent(self: *Self) usize {$/;"	function
current_address	$ZIGLIB/std/os/uefi/protocols/simple_network_protocol.zig	/current_address: MacAddress/;"	field
current_arch	$ZIGLIB/std/zig/system/windows.zig	/const current_arch = builtin.cpu.arch/;"	constant
current_buf	$ZIGLIB/std/process.zig	/var current_buf: []u8 = &stack_buf/;"	variable
current_capacity	$ZIGLIB/std/heap/arena_allocator.zig	/const current_capacity = if (mode != .free_all)$/;"	constant
current_elm	$ZIGLIB/std/linked_list.zig	/var current_elm = list.first.?/;"	variable
current_field	$ZIGLIB/std/Build/CheckObjectStep.zig	/var current_field: u32 = 0/;"	variable
current_id	$ZIGLIB/std/Thread/Mutex.zig	/const current_id = Thread.getCurrentId()/;"	constant
current_indent	$ZIGLIB/std/zig/render.zig	/const current_indent = self.currentIndent()/;"	constant
current_item	$ZIGLIB/std/Progress.zig	/const current_item = completed_items + 1/;"	constant
current_line_empty	$ZIGLIB/std/zig/render.zig	/current_line_empty: bool = true/;"	field
current_n	$ZIGLIB/std/heap/WasmPageAllocator.zig	/const current_n = nPages(aligned_len)/;"	constant
current_regs	$ZIGLIB/std/debug.zig	/const current_regs = context.getRegs()/;"	constant
current_task_under_cgroup	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const current_task_under_cgroup = @intToPtr(fn (map: *const kern.MapDef, index: u32) c_long, 37)/;"	constant
current_thread_id	$ZIGLIB/std/debug.zig	/const current_thread_id = std.Thread.getCurrentId()/;"	constant
current_thread_storage	$ZIGLIB/compiler_rt/emutls.zig	/^const current_thread_storage = struct {$/;"	struct
current_value	$ZIGLIB/std/Build/CheckObjectStep.zig	/var current_value: u32 = 0/;"	variable
current_version	$ZIGLIB/std/macho.zig	/current_version: u32/;"	field
current_x	$ZIGLIB/std/os/uefi/protocols/absolute_pointer_protocol.zig	/current_x: u64/;"	field
current_y	$ZIGLIB/std/os/uefi/protocols/absolute_pointer_protocol.zig	/current_y: u64/;"	field
current_z	$ZIGLIB/std/os/uefi/protocols/absolute_pointer_protocol.zig	/current_z: u64/;"	field
cursor	$ZIGLIB/std/crypto/chacha20.zig	/var cursor: usize = 0/;"	variable
cursor_column	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/cursor_column: i32/;"	field
cursor_pos	$ZIGLIB/std/Progress.zig	/var cursor_pos = windows.COORD{$/;"	variable
cursor_row	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/cursor_row: i32/;"	field
cursor_visible	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/cursor_visible: bool/;"	field
curve25519BasePoint	$ZIGLIB/std/crypto/25519/field.zig	/pub const curve25519BasePoint = Fe{ .limbs = .{ 9, 0, 0, 0, 0 } }/;"	constant
custom	$ZIGLIB/std/wasm.zig	/custom/;"	field
custom_cheap_as_move	$ZIGLIB/std/target/aarch64.zig	/custom_cheap_as_move/;"	field
cutoff	$ZIGLIB/std/fmt/parse_float/decimal.zig	/cutoff: []const u8/;"	field
cv_signature	$ZIGLIB/std/coff.zig	/var cv_signature: [4]u8 = undefined/;"	variable
cv_stack	$ZIGLIB/std/crypto/blake3.zig	/cv_stack: [54][8]u32 = undefined/;"	field
cv_stack_len	$ZIGLIB/std/crypto/blake3.zig	/cv_stack_len: u8 = 0/;"	field
cwd_dir	$ZIGLIB/std/child_process.zig	/cwd_dir: ?fs.Dir = null/;"	field
cwd_path_w	$ZIGLIB/std/child_process.zig	/const cwd_path_w = x: {$/;"	constant
cwd_path_w_needs_free	$ZIGLIB/std/child_process.zig	/var cwd_path_w_needs_free = false/;"	variable
cwd_w	$ZIGLIB/std/child_process.zig	/const cwd_w = if (self.cwd) |cwd| try unicode.utf8ToUtf16LeWithNull(self.allocator, cwd) else null/;"	constant
cwd_w_ptr	$ZIGLIB/std/child_process.zig	/const cwd_w_ptr = if (cwd_w) |cwd| cwd.ptr else null/;"	constant
cx16	$ZIGLIB/std/target/x86.zig	/cx16/;"	field
cyan	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/pub const cyan: u8 = 0x03/;"	constant
cycle	$ZIGLIB/std/simd.zig	/const cycle = @divFloor(count_up, @splat(len, @intCast(i32, vecs_arr.len)))/;"	constant
cyclone	$ZIGLIB/std/target/arm.zig	/pub const cyclone = CpuModel{$/;"	constant
cygnus	$ZIGLIB/std/target.zig	/cygnus/;"	field
dNSName	$ZIGLIB/std/crypto/Certificate.zig	/dNSName = 2/;"	field
d_dev	$ZIGLIB/std/c/haiku.zig	/d_dev: i32/;"	field
d_fileno	$ZIGLIB/std/c/openbsd.zig	/d_fileno: ino_t/;"	field
d_ino	$ZIGLIB/std/os/wasi.zig	/d_ino: inode_t/;"	field
d_name	$ZIGLIB/std/os/linux.zig	/d_name: u8/;"	field
d_namlen	$ZIGLIB/std/os/wasi.zig	/d_namlen: dirnamlen_t/;"	field
d_next	$ZIGLIB/std/os/wasi.zig	/d_next: dircookie_t/;"	field
d_off	$ZIGLIB/std/os/linux.zig	/d_off: u64/;"	field
d_pdev	$ZIGLIB/std/c/haiku.zig	/d_pdev: i32/;"	field
d_pino	$ZIGLIB/std/c/haiku.zig	/d_pino: i64/;"	field
d_reclen	$ZIGLIB/std/os/linux.zig	/d_reclen: u16/;"	field
d_seekoff	$ZIGLIB/std/c/darwin.zig	/d_seekoff: u64/;"	field
d_tag	$ZIGLIB/std/elf.zig	/d_tag: Elf64_Sxword/;"	field
d_type	$ZIGLIB/std/os/wasi.zig	/d_type: filetype_t/;"	field
d_unused1	$ZIGLIB/std/c/dragonfly.zig	/d_unused1: u8/;"	field
d_unused2	$ZIGLIB/std/c/dragonfly.zig	/d_unused2: u32/;"	field
d_val	$ZIGLIB/std/elf.zig	/d_val: Elf64_Addr/;"	field
dadstate	$ZIGLIB/std/c/solaris.zig	/dadstate: u32/;"	field
dalen	$ZIGLIB/std/net.zig	/var dalen: os.socklen_t = undefined/;"	variable
darkgray	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/pub const darkgray: u8 = 0x08/;"	constant
darling	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/darling: []const u8/;"	field
darwin_entry	$ZIGLIB/std/fs.zig	/const darwin_entry = @ptrCast(*align(1) os.system.dirent, &self.buf[self.index])/;"	constant
data	$ZIGLIB/std/zig/Ast.zig	/data: Data/;"	field
data1	$ZIGLIB/std/dwarf/FORM.zig	/^pub const data1 = 0x0b/;"	constant
data16	$ZIGLIB/std/dwarf/FORM.zig	/^pub const data16 = 0x1e/;"	constant
data2	$ZIGLIB/std/dwarf/FORM.zig	/^pub const data2 = 0x05/;"	constant
data4	$ZIGLIB/std/dwarf/FORM.zig	/^pub const data4 = 0x06/;"	constant
data8	$ZIGLIB/std/dwarf/FORM.zig	/^pub const data8 = 0x07/;"	constant
dataBlock	$ZIGLIB/std/os/uefi/tables/runtime_services.zig	/dataBlock: EfiPhysicalAddress/;"	field
data_bit_offset	$ZIGLIB/std/dwarf/AT.zig	/^pub const data_bit_offset = 0x6b/;"	constant
data_bits	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/data_bits: u8/;"	field
data_count	$ZIGLIB/std/wasm.zig	/data_count/;"	field
data_dirs	$ZIGLIB/std/coff.zig	/const data_dirs = self.getDataDirectories()/;"	constant
data_drop	$ZIGLIB/std/wasm.zig	/data_drop = 0x09/;"	field
data_in	$ZIGLIB/std/os/linux/bpf.zig	/data_in: u64/;"	field
data_in_code_entry	$ZIGLIB/std/macho.zig	/^pub const data_in_code_entry = extern struct {$/;"	struct
data_len	$ZIGLIB/std/Thread.zig	/const data_len = try file.reader().readAll(buffer_ptr[0 .. max_name_len + 1])/;"	constant
data_length	$ZIGLIB/std/os/uefi/protocols/udp6_protocol.zig	/data_length: u32/;"	field
data_location	$ZIGLIB/std/dwarf/AT.zig	/^pub const data_location = 0x50/;"	constant
data_member_location	$ZIGLIB/std/dwarf/AT.zig	/^pub const data_member_location = 0x38/;"	constant
data_offset	$ZIGLIB/std/os/linux/tls.zig	/var data_offset: usize = undefined/;"	variable
data_out	$ZIGLIB/std/os/linux/bpf.zig	/data_out: u64/;"	field
data_segment	$ZIGLIB/std/wasm.zig	/data_segment/;"	field
data_size	$ZIGLIB/std/os/linux/tls.zig	/data_size: usize/;"	field
data_size_in	$ZIGLIB/std/os/linux/bpf.zig	/data_size_in: u32/;"	field
data_size_out	$ZIGLIB/std/os/linux/bpf.zig	/data_size_out: u32/;"	field
dataoff	$ZIGLIB/std/macho.zig	/dataoff: u32 = 0/;"	field
datap	$ZIGLIB/std/os/linux.zig	/datap: *cap_user_data_t/;"	field
datas	$ZIGLIB/std/zig/render.zig	/const datas = tree.nodes.items(.data)/;"	constant
datasec	$ZIGLIB/std/os/linux/bpf/btf.zig	/datasec/;"	field
datasize	$ZIGLIB/std/macho.zig	/datasize: u32 = 0/;"	field
day_index	$ZIGLIB/std/time/epoch.zig	/day_index: u5/;"	field
day_seconds	$ZIGLIB/std/time/epoch.zig	/const day_seconds = epoch_seconds.getDaySeconds()/;"	constant
daylight	$ZIGLIB/std/os/uefi.zig	/daylight: packed struct {$/;"	field
days	$ZIGLIB/std/crypto/Certificate.zig	/const days: u64 = std.time.epoch.getDaysInYear(year)/;"	constant
days_in_month	$ZIGLIB/std/time/epoch.zig	/const days_in_month = getDaysInMonth(leap_kind, month)/;"	constant
days_left	$ZIGLIB/std/time/epoch.zig	/var days_left = self.day/;"	variable
dbMask	$ZIGLIB/std/crypto/Certificate.zig	/var dbMask = try MGF1(mgf_out, h, mgf_len, Hash, allocator)/;"	variable
db_header	$ZIGLIB/std/crypto/Certificate/Bundle/macos.zig	/const db_header = try reader.readStructBig(ApplDbHeader)/;"	constant
db_schema	$ZIGLIB/std/crypto/Certificate/Bundle/macos.zig	/const db_schema = try reader.readStructBig(ApplDbSchema)/;"	constant
dcache_line_size	$ZIGLIB/compiler_rt/clear_cache.zig	/const dcache_line_size: usize = @as(usize, 4) << @intCast(u6, (ctr_el0 >> 16) & 15)/;"	constant
dd128	$ZIGLIB/compiler_rt/fma.zig	/^const dd128 = struct {$/;"	struct
dd_add	$ZIGLIB/compiler_rt/fma.zig	/^fn dd_add(a: f64, b: f64) dd {$/;"	function
dd_add128	$ZIGLIB/compiler_rt/fma.zig	/^fn dd_add128(a: f128, b: f128) dd128 {$/;"	function
dd_mul	$ZIGLIB/compiler_rt/fma.zig	/^fn dd_mul(a: f64, b: f64) dd {$/;"	function
dd_mul128	$ZIGLIB/compiler_rt/fma.zig	/^fn dd_mul128(a: f128, b: f128) dd128 {$/;"	function
dead_fds	$ZIGLIB/std/child_process.zig	/var dead_fds: usize = 0/;"	variable
dead_strip_dylibs	$ZIGLIB/std/Build/CompileStep.zig	/^dead_strip_dylibs: bool = false/;"	field
deadbeef	$ZIGLIB/std/mem.zig	/const deadbeef = bytesToValue(u32, deadbeef_bytes)/;"	constant
deadbeef_bytes	$ZIGLIB/std/mem.zig	/const deadbeef_bytes = switch (native_endian) {$/;"	constant
deadline	$ZIGLIB/std/Thread/Futex.zig	/var deadline: Deadline = undefined/;"	variable
deallocate	$ZIGLIB/std/hash_map.zig	/fn deallocate(self: *Self, allocator: Allocator) void {$/;"	function
deallocatePort	$ZIGLIB/std/os/darwin.zig	/pub fn deallocatePort(self: MachTask, port: MachTask) void {$/;"	function
deallocations	$ZIGLIB/std/testing/failing_allocator.zig	/deallocations: usize/;"	field
debug	$ZIGLIB/std/log.zig	/pub fn debug($/;"	function
debug_abbrev	$ZIGLIB/std/dwarf.zig	/debug_abbrev: []const u8/;"	field
debug_abbrev_offset	$ZIGLIB/std/dwarf.zig	/var debug_abbrev_offset: u64 = undefined/;"	variable
debug_addr	$ZIGLIB/std/dwarf.zig	/debug_addr: ?[]const u8/;"	field
debug_allocator	$ZIGLIB/std/heap/general_purpose_allocator.zig	/const debug_allocator = fba.allocator()/;"	constant
debug_buffer	$ZIGLIB/std/heap/general_purpose_allocator.zig	/var debug_buffer: [1000]u8 = undefined/;"	variable
debug_compile_errors	$ZIGLIB/std/Build.zig	/^debug_compile_errors: bool = false/;"	field
debug_data	$ZIGLIB/std/debug.zig	/debug_data: PdbOrDwarf/;"	field
debug_dir	$ZIGLIB/std/coff.zig	/const debug_dir = data_dirs[@enumToInt(DirectoryEntry.DEBUG)]/;"	constant
debug_dir_entry	$ZIGLIB/std/coff.zig	/const debug_dir_entry = try reader.readStruct(DebugDirectoryEntry)/;"	constant
debug_dir_entry_count	$ZIGLIB/std/coff.zig	/const debug_dir_entry_count = debug_dir.size \/ @sizeOf(DebugDirectoryEntry)/;"	constant
debug_frame	$ZIGLIB/std/dwarf.zig	/debug_frame: ?[]const u8/;"	field
debug_info	$ZIGLIB/std/dwarf.zig	/debug_info: []const u8/;"	field
debug_info_allocator	$ZIGLIB/std/debug.zig	/^var debug_info_allocator: ?mem.Allocator = null/;"	variable
debug_info_arena_allocator	$ZIGLIB/std/debug.zig	/^var debug_info_arena_allocator: std.heap.ArenaAllocator = undefined/;"	variable
debug_line	$ZIGLIB/std/dwarf.zig	/debug_line: []const u8/;"	field
debug_line_str	$ZIGLIB/std/dwarf.zig	/debug_line_str: ?[]const u8/;"	field
debug_loclists	$ZIGLIB/std/dwarf.zig	/debug_loclists: ?[]const u8/;"	field
debug_log_scopes	$ZIGLIB/std/Build.zig	/^debug_log_scopes: []const []const u8 = &.{}/;"	field
debug_mode	$ZIGLIB/std/heap/memory_pool.zig	/^const debug_mode = @import("builtin").mode == .Debug/;"	constant
debug_names	$ZIGLIB/std/dwarf.zig	/debug_names: ?[]const u8/;"	field
debug_ranges	$ZIGLIB/std/dwarf.zig	/debug_ranges: ?[]const u8/;"	field
debug_rnglists	$ZIGLIB/std/dwarf.zig	/debug_rnglists: ?[]const u8/;"	field
debug_safety	$ZIGLIB/std/math/big/int.zig	/^const debug_safety = false/;"	constant
debug_str	$ZIGLIB/std/dwarf.zig	/debug_str: []const u8/;"	field
debug_str_offsets	$ZIGLIB/std/dwarf.zig	/debug_str_offsets: ?[]const u8/;"	field
debugger_nub_port	$ZIGLIB/std/c/haiku.zig	/debugger_nub_port: i32/;"	field
debugger_nub_thread	$ZIGLIB/std/c/haiku.zig	/debugger_nub_thread: i32/;"	field
decimal	$ZIGLIB/std/zig/number_literal.zig	/decimal = 10/;"	field
decimal_buf	$ZIGLIB/std/fmt.zig	/var decimal_buf = [_]u8{ '.', 0, 0, 0 }/;"	variable
decimal_float	$ZIGLIB/std/dwarf/ATE.zig	/^pub const decimal_float = 0xf/;"	constant
decimal_point	$ZIGLIB/std/fmt/parse_float/decimal.zig	/decimal_point: i32/;"	field
decimal_point_range	$ZIGLIB/std/fmt/parse_float/decimal.zig	/pub const decimal_point_range = if (MantissaT == u64) 2047 else 32767/;"	constant
decimal_scale	$ZIGLIB/std/dwarf/AT.zig	/^pub const decimal_scale = 0x5c/;"	constant
decimal_sign	$ZIGLIB/std/dwarf/AT.zig	/^pub const decimal_sign = 0x5e/;"	constant
decimal_step	$ZIGLIB/std/sort.zig	/decimal_step: usize/;"	field
declList	$ZIGLIB/std/meta.zig	/^pub fn declList(comptime Namespace: type, comptime Decl: type) []const *const Decl {$/;"	function
declNameLessThan	$ZIGLIB/std/meta.zig	/fn declNameLessThan(context: void, lhs: *const Decl, rhs: *const Decl) bool {$/;"	function
decl_between_fields	$ZIGLIB/std/zig/Ast.zig	/decl_between_fields/;"	field
decl_column	$ZIGLIB/std/dwarf/AT.zig	/^pub const decl_column = 0x39/;"	constant
decl_file	$ZIGLIB/std/dwarf/AT.zig	/^pub const decl_file = 0x3a/;"	constant
decl_line	$ZIGLIB/std/dwarf/AT.zig	/^pub const decl_line = 0x3b/;"	constant
decl_tag	$ZIGLIB/std/os/linux/bpf/btf.zig	/decl_tag/;"	field
declaration	$ZIGLIB/std/dwarf/AT.zig	/^pub const declaration = 0x3c/;"	constant
declarationInfo	$ZIGLIB/std/meta.zig	/^pub fn declarationInfo(comptime T: type, comptime decl_name: []const u8) Type.Declaration {$/;"	function
declarations	$ZIGLIB/std/meta.zig	/^pub fn declarations(comptime T: type) []const Type.Declaration {$/;"	function
decls	$ZIGLIB/std/meta.zig	/var decls = [_]std.builtin.Type.Declaration{}/;"	variable
decode	$ZIGLIB/std/crypto/tls.zig	/pub fn decode(d: *Decoder, comptime T: type) T {$/;"	function
decodeBit	$ZIGLIB/std/compress/lzma/decode/rangecoder.zig	/pub inline fn decodeBit(self: *RangeDecoder, reader: anytype, prob: *u16, update: bool) !bool {$/;"	function
decodeDistance	$ZIGLIB/std/compress/lzma/decode.zig	/fn decodeDistance($/;"	function
decodeLiteral	$ZIGLIB/std/compress/lzma/decode.zig	/fn decodeLiteral($/;"	function
decode_error	$ZIGLIB/std/crypto/tls.zig	/decode_error = 50/;"	field
decoded	$ZIGLIB/std/base64.zig	/var decoded = buffer[0..try decoder_ignore_space.calcSizeUpperBound(encoded.len)]/;"	variable
decodedLen	$ZIGLIB/std/crypto/scrypt.zig	/fn decodedLen(len: usize) usize {$/;"	function
decodedLength	$ZIGLIB/std/json.zig	/pub fn decodedLength(self: @This()) usize {$/;"	function
decoded_size_upper_bound	$ZIGLIB/std/crypto/Certificate/Bundle.zig	/const decoded_size_upper_bound = size \/ 4 * 3/;"	constant
decoded_start	$ZIGLIB/std/crypto/Certificate/Bundle.zig	/const decoded_start = @intCast(u32, cb.bytes.items.len)/;"	constant
decoder	$ZIGLIB/std/compress/xz/block.zig	/^pub fn decoder(allocator: Allocator, reader: anytype, check: xz.Check) !Decoder(@TypeOf(reader)) {$/;"	function
decoderWithIgnore	$ZIGLIB/std/base64.zig	/decoderWithIgnore: decoderWithIgnoreProto/;"	field
decoderWithIgnoreProto	$ZIGLIB/std/base64.zig	/^const decoderWithIgnoreProto = *const fn (ignore: []const u8) Base64DecoderWithIgnore/;"	constant
decoder_ignore_nothing	$ZIGLIB/std/base64.zig	/const decoder_ignore_nothing = codecs.decoderWithIgnore("")/;"	constant
decoder_ignore_space	$ZIGLIB/std/base64.zig	/const decoder_ignore_space = codecs.decoderWithIgnore(" ")/;"	constant
decomp	$ZIGLIB/std/compress/lzma2.zig	/var decomp = std.ArrayList(u8).init(allocator)/;"	variable
decompress	$ZIGLIB/std/compress/xz.zig	/^pub fn decompress(allocator: Allocator, reader: anytype) !Decompress(@TypeOf(reader)) {$/;"	function
decompressWithOptions	$ZIGLIB/std/compress/lzma.zig	/^pub fn decompressWithOptions($/;"	function
decompressions	$ZIGLIB/std/c/darwin.zig	/decompressions: integer_t/;"	field
decompressor	$ZIGLIB/std/compress/deflate/decompressor.zig	/^pub fn decompressor(allocator: Allocator, reader: anytype, dictionary: ?[]const u8) !Decompressor(@TypeOf(reader)) {$/;"	function
decrypt	$ZIGLIB/std/crypto/salsa20.zig	/pub fn decrypt(m: []u8, c: []const u8, tag: [tag_length]u8, ad: []const u8, npub: [nonce_length]u8, k: [key_length]u8) AuthenticationError!void {$/;"	function
decryptLast	$ZIGLIB/std/crypto/aes/soft.zig	/pub inline fn decryptLast(block: Block, round_key: Block) Block {$/;"	function
decryptLastWide	$ZIGLIB/std/crypto/aes/soft.zig	/pub fn decryptLastWide(comptime count: usize, blocks: [count]Block, round_key: Block) [count]Block {$/;"	function
decryptParallel	$ZIGLIB/std/crypto/aes/soft.zig	/pub fn decryptParallel(comptime count: usize, blocks: [count]Block, round_keys: [count]Block) [count]Block {$/;"	function
decryptWide	$ZIGLIB/std/crypto/aes/soft.zig	/pub fn decryptWide(ctx: Self, comptime count: usize, dst: *[16 * count]u8, src: *const [16 * count]u8) void {$/;"	function
decrypt_error	$ZIGLIB/std/crypto/tls.zig	/decrypt_error = 51/;"	field
deep_prefix	$ZIGLIB/std/hash_map.zig	/const deep_prefix = prefix ++ "  "/;"	constant
deeply_nested_array	$ZIGLIB/std/json.zig	/const deeply_nested_array = "[" ** nestings ++ "0.118, 999, 881.99, 911.9, 725, 3" ++ "]" ** nestings/;"	constant
defWindowProcA	$ZIGLIB/std/os/windows/user32.zig	/^pub fn defWindowProcA(hWnd: HWND, Msg: UINT, wParam: WPARAM, lParam: LPARAM) LRESULT {$/;"	function
defWindowProcW	$ZIGLIB/std/os/windows/user32.zig	/^pub fn defWindowProcW(hWnd: HWND, Msg: UINT, wParam: WPARAM, lParam: LPARAM) LRESULT {$/;"	function
def_cfa	$ZIGLIB/std/dwarf.zig	/pub const def_cfa = 0x0c/;"	constant
def_cfa_expression	$ZIGLIB/std/dwarf.zig	/pub const def_cfa_expression = 0x0f/;"	constant
def_cfa_offset	$ZIGLIB/std/dwarf.zig	/pub const def_cfa_offset = 0x0e/;"	constant
def_cfa_offset_sf	$ZIGLIB/std/dwarf.zig	/pub const def_cfa_offset_sf = 0x13/;"	constant
def_cfa_register	$ZIGLIB/std/dwarf.zig	/pub const def_cfa_register = 0x0d/;"	constant
def_cfa_sf	$ZIGLIB/std/dwarf.zig	/pub const def_cfa_sf = 0x12/;"	constant
def_prev_byte	$ZIGLIB/std/compress/lzma/decode.zig	/const def_prev_byte = 0/;"	constant
default	$ZIGLIB/std/target.zig	/pub fn default(tag: Tag, arch: Cpu.Arch) VersionRange {$/;"	function
defaultAbiAndDynamicLinker	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/^fn defaultAbiAndDynamicLinker(cpu: Target.Cpu, os: Target.Os, cross_target: CrossTarget) !NativeTargetInfo {$/;"	function
defaultLog	$ZIGLIB/std/log.zig	/^pub fn defaultLog($/;"	function
defaultLogEnabled	$ZIGLIB/std/log.zig	/^pub fn defaultLogEnabled(comptime message_level: Level) bool {$/;"	function
defaultRandomSeed	$ZIGLIB/std/crypto/tlcsprng.zig	/^pub fn defaultRandomSeed(buffer: []u8) void {$/;"	function
defaultSpec	$ZIGLIB/std/fmt.zig	/^fn defaultSpec(comptime T: type) [:0]const u8 {$/;"	function
defaultVersionRange	$ZIGLIB/std/target.zig	/pub fn defaultVersionRange(tag: Tag, arch: Cpu.Arch) Os {$/;"	function
defaultWasiCwd	$ZIGLIB/std/fs.zig	/^pub fn defaultWasiCwd() Dir {$/;"	function
default_capacity	$ZIGLIB/std/math/big/int.zig	/pub const default_capacity = 4/;"	constant
default_compression	$ZIGLIB/std/compress/deflate/compressor.zig	/default_compression = -1/;"	field
default_enable_segfault_handler	$ZIGLIB/std/debug.zig	/^pub const default_enable_segfault_handler = runtime_safety and have_segfault_handling_support/;"	constant
default_hash_len	$ZIGLIB/std/crypto/scrypt.zig	/^const default_hash_len = 32/;"	constant
default_instance	$ZIGLIB/std/event/loop.zig	/pub const default_instance = switch (std.options.io_mode) {$/;"	constant
default_is_stmt	$ZIGLIB/std/dwarf.zig	/default_is_stmt: bool/;"	field
default_level	$ZIGLIB/std/log.zig	/^pub const default_level: Level = switch (builtin.mode) {$/;"	constant
default_location	$ZIGLIB/std/dwarf.zig	/pub const default_location = 0x05/;"	constant
default_log_scope	$ZIGLIB/std/log.zig	/^pub const default_log_scope = .default/;"	constant
default_max_depth	$ZIGLIB/std/fmt.zig	/^pub const default_max_depth = 3/;"	constant
default_max_load_percentage	$ZIGLIB/std/hash_map.zig	/^pub const default_max_load_percentage = 80/;"	constant
default_max_nestings	$ZIGLIB/std/json.zig	/const default_max_nestings = 256/;"	constant
default_mode	$ZIGLIB/std/io.zig	/^pub const default_mode: ModeOverride = if (is_async) Mode.evented else .blocking/;"	constant
default_multiplier	$ZIGLIB/std/rand/Pcg.zig	/^const default_multiplier = 6364136223846793005/;"	constant
default_new_dir_mode	$ZIGLIB/std/fs.zig	/^const default_new_dir_mode = 0o755/;"	constant
default_panic	$ZIGLIB/std/builtin.zig	/^pub fn default_panic(msg: []const u8, error_return_trace: ?*StackTrace, ret_addr: ?usize) noreturn {$/;"	function
default_protocol	$ZIGLIB/std/os/uefi/protocols/ip6_protocol.zig	/default_protocol: u8/;"	field
default_salt_len	$ZIGLIB/std/crypto/scrypt.zig	/^const default_salt_len = 32/;"	constant
default_seed	$ZIGLIB/std/hash/murmur.zig	/^const default_seed: u32 = 0xc70f6907/;"	constant
default_stack_trace_frames	$ZIGLIB/std/heap/general_purpose_allocator.zig	/^const default_stack_trace_frames: usize = switch (builtin.mode) {$/;"	constant
default_step	$ZIGLIB/std/Build.zig	/^default_step: *Step/;"	field
default_sys_stack_trace_frames	$ZIGLIB/std/heap/general_purpose_allocator.zig	/^const default_sys_stack_trace_frames: usize = if (std.debug.sys_can_stack_trace) default_test_stack_trace_frames else 0/;"	constant
default_target	$ZIGLIB/std/Build.zig	/default_target: CrossTarget = CrossTarget{}/;"	field
default_test_stack_trace_frames	$ZIGLIB/std/heap/general_purpose_allocator.zig	/^const default_test_stack_trace_frames: usize = if (builtin.is_test) 8 else 4/;"	constant
default_value	$ZIGLIB/std/mem.zig	/const default_value = @ptrCast(*align(1) const field.type, default_value_ptr).*/;"	constant
defaulted	$ZIGLIB/std/dwarf/AT.zig	/^pub const defaulted = 0x8b/;"	constant
defer	$ZIGLIB/std/zig/Ast.zig	/@"defer"/;"	field
defer_token	$ZIGLIB/std/zig/render.zig	/const defer_token = main_tokens[node]/;"	constant
defineCMacro	$ZIGLIB/std/Build/TranslateCStep.zig	/^pub fn defineCMacro(self: *TranslateCStep, name: []const u8, value: ?[]const u8) void {$/;"	function
defineCMacroRaw	$ZIGLIB/std/Build/TranslateCStep.zig	/^pub fn defineCMacroRaw(self: *TranslateCStep, name_and_value: []const u8) void {$/;"	function
define_file	$ZIGLIB/std/dwarf.zig	/pub const define_file = 0x03/;"	constant
defined	$ZIGLIB/std/Build/ConfigHeaderStep.zig	/defined/;"	field
defined_policies	$ZIGLIB/std/net.zig	/^const defined_policies = [_]Policy{$/;"	constant
deflate	$ZIGLIB/std/http.zig	/deflate/;"	field
deflateFast	$ZIGLIB/std/compress/deflate/deflate_fast.zig	/^pub fn deflateFast() DeflateFast {$/;"	function
deflate_conversion	$ZIGLIB/std/target/s390x.zig	/deflate_conversion/;"	field
deflate_tests	$ZIGLIB/std/compress/deflate/compressor.zig	/^var deflate_tests = [_]DeflateTest{$/;"	variable
degreesToRadians	$ZIGLIB/std/math.zig	/^pub fn degreesToRadians(comptime T: type, angle_in_degrees: T) T {$/;"	function
deinit	$ZIGLIB/std/zig/system/darwin.zig	/pub fn deinit(self: DarwinSDK, allocator: Allocator) void {$/;"	function
deinitArray	$ZIGLIB/std/zig/system/NativePaths.zig	/^fn deinitArray(array: *ArrayList([:0]u8)) void {$/;"	function
deinitOsData	$ZIGLIB/std/event/loop.zig	/fn deinitOsData(self: *Loop) void {$/;"	function
deinterlace	$ZIGLIB/std/simd.zig	/^pub fn deinterlace($/;"	function
delay	$ZIGLIB/std/Thread/Futex.zig	/const delay = timeout orelse {$/;"	constant
delay_queue	$ZIGLIB/std/event/loop.zig	/delay_queue: DelayQueue/;"	field
delete	$ZIGLIB/std/os/uefi/protocols/file_protocol.zig	/pub fn delete(self: *const FileProtocol) Status {$/;"	function
deleteDir	$ZIGLIB/std/fs.zig	/pub fn deleteDir(self: Dir, sub_path: []const u8) DeleteDirError!void {$/;"	function
deleteDirAbsolute	$ZIGLIB/std/fs.zig	/^pub fn deleteDirAbsolute(dir_path: []const u8) !void {$/;"	function
deleteDirAbsoluteW	$ZIGLIB/std/fs.zig	/^pub fn deleteDirAbsoluteW(dir_path: [*:0]const u16) !void {$/;"	function
deleteDirAbsoluteZ	$ZIGLIB/std/fs.zig	/^pub fn deleteDirAbsoluteZ(dir_path: [*:0]const u8) !void {$/;"	function
deleteDirW	$ZIGLIB/std/fs.zig	/pub fn deleteDirW(self: Dir, sub_path_w: []const u16) DeleteDirError!void {$/;"	function
deleteDirZ	$ZIGLIB/std/fs.zig	/pub fn deleteDirZ(self: Dir, sub_path_c: [*:0]const u8) DeleteDirError!void {$/;"	function
deleteFile	$ZIGLIB/std/fs.zig	/pub fn deleteFile(self: Dir, sub_path: []const u8) DeleteFileError!void {$/;"	function
deleteFileAbsolute	$ZIGLIB/std/fs.zig	/^pub fn deleteFileAbsolute(absolute_path: []const u8) Dir.DeleteFileError!void {$/;"	function
deleteFileAbsoluteW	$ZIGLIB/std/fs.zig	/^pub fn deleteFileAbsoluteW(absolute_path_w: [*:0]const u16) Dir.DeleteFileError!void {$/;"	function
deleteFileAbsoluteZ	$ZIGLIB/std/fs.zig	/^pub fn deleteFileAbsoluteZ(absolute_path_c: [*:0]const u8) Dir.DeleteFileError!void {$/;"	function
deleteFileW	$ZIGLIB/std/fs.zig	/pub fn deleteFileW(self: Dir, sub_path_w: []const u16) DeleteFileError!void {$/;"	function
deleteFileZ	$ZIGLIB/std/fs.zig	/pub fn deleteFileZ(self: Dir, sub_path_c: [*:0]const u8) DeleteFileError!void {$/;"	function
deleteTree	$ZIGLIB/std/fs.zig	/pub fn deleteTree(self: Dir, sub_path: []const u8) DeleteTreeError!void {$/;"	function
deleteTreeAbsolute	$ZIGLIB/std/fs.zig	/^pub fn deleteTreeAbsolute(absolute_path: []const u8) !void {$/;"	function
deleteTreeMinStackSize	$ZIGLIB/std/fs.zig	/pub fn deleteTreeMinStackSize(self: Dir, sub_path: []const u8) DeleteTreeError!void {$/;"	function
deleteTreeMinStackSizeWithKindHint	$ZIGLIB/std/fs.zig	/fn deleteTreeMinStackSizeWithKindHint(self: Dir, sub_path: []const u8, kind_hint: File.Kind) DeleteTreeError!void {$/;"	function
deleteTreeOpenInitialSubpath	$ZIGLIB/std/fs.zig	/fn deleteTreeOpenInitialSubpath(self: Dir, sub_path: []const u8, kind_hint: File.Kind) !?IterableDir {$/;"	function
delete_module	$ZIGLIB/std/os/linux/syscalls.zig	/delete_module = Linux + 169/;"	field
deleted	$ZIGLIB/std/pdb.zig	/const deleted = try readSparseBitVector(&reader, self.allocator)/;"	constant
delimiter	$ZIGLIB/std/mem.zig	/delimiter: []const T/;"	field
delimiter_bytes	$ZIGLIB/std/mem.zig	/delimiter_bytes: []const T/;"	field
delimiter_posix	$ZIGLIB/std/fs/path.zig	/^pub const delimiter_posix = ':'/;"	constant
delimiter_windows	$ZIGLIB/std/fs/path.zig	/^pub const delimiter_windows = ';'/;"	constant
delta	$ZIGLIB/std/os/linux/tls.zig	/const delta = (l + @sizeOf(CustomData)) & (tls_align_factor - 1)/;"	constant
den1	$ZIGLIB/std/crypto/25519/ristretto255.zig	/const den1 = inv_sqrt.root.mul(u1_)/;"	constant
den2	$ZIGLIB/std/crypto/25519/ristretto255.zig	/const den2 = inv_sqrt.root.mul(u2_)/;"	constant
den_inv	$ZIGLIB/std/crypto/25519/ristretto255.zig	/var den_inv = den2/;"	variable
dend	$ZIGLIB/std/os.zig	/const dend = dest + @min(exp_dn.len, 254)/;"	constant
denom	$ZIGLIB/std/c/darwin.zig	/denom: u32/;"	field
denominator	$ZIGLIB/std/sort.zig	/denominator: usize/;"	field
denormalizedSignificand	$ZIGLIB/compiler_rt/truncf.zig	/const denormalizedSignificand: src_rep_t = significand >> @intCast(SrcShift, shift) | sticky/;"	constant
denormalized_significand	$ZIGLIB/compiler_rt/truncf.zig	/const denormalized_significand = a_rep.fraction >> @intCast(u6, shift) | sticky/;"	constant
deopt_target	$ZIGLIB/std/mem.zig	/^var deopt_target: if (builtin.zig_backend == .stage2_c) u8 else void = undefined/;"	variable
dep_prefix	$ZIGLIB/std/Build.zig	/^dep_prefix: []const u8 = ""/;"	field
dependOn	$ZIGLIB/std/Build/Step.zig	/^pub fn dependOn(self: *Step, other: *Step) void {$/;"	function
dependencies	$ZIGLIB/std/target.zig	/dependencies: Set/;"	field
dependencies_len	$ZIGLIB/std/Build/CheckObjectStep.zig	/const dependencies_len = self.step.dependencies.items.len/;"	constant
dependency	$ZIGLIB/std/Build.zig	/^pub fn dependency(b: *Build, name: []const u8, args: anytype) *Dependency {$/;"	function
dependencyInner	$ZIGLIB/std/Build.zig	/^fn dependencyInner($/;"	function
dependsOnSystemLibrary	$ZIGLIB/std/Build/CompileStep.zig	/^pub fn dependsOnSystemLibrary(self: CompileStep, name: []const u8) bool {$/;"	function
deprecated_v8	$ZIGLIB/std/target/sparc.zig	/deprecated_v8/;"	field
deps	$ZIGLIB/std/Build.zig	/const deps = build_runner.dependencies/;"	constant
depth	$ZIGLIB/std/dwarf.zig	/var depth: i32 = 3/;"	variable
der_encoded_max_length	$ZIGLIB/std/crypto/ecdsa.zig	/pub const der_encoded_max_length = encoded_length + 2 + 2 * 3/;"	constant
deref	$ZIGLIB/std/zig/Ast.zig	/deref/;"	field
deref_size	$ZIGLIB/std/dwarf/OP.zig	/^pub const deref_size = 0x94/;"	constant
deref_type	$ZIGLIB/std/dwarf/OP.zig	/^pub const deref_type = 0xa6/;"	constant
derive_key	$ZIGLIB/std/crypto/blake3.zig	/derive_key: *const [262]u8/;"	field
derive_key_state	$ZIGLIB/std/crypto/blake3.zig	/var derive_key_state = Blake3.initKdf(reference_test.context_string, .{})/;"	variable
desc	$ZIGLIB/std/sort.zig	/^pub fn desc(comptime T: type) fn (void, T, T) bool {$/;"	function
desc_i32	$ZIGLIB/std/sort.zig	/^const desc_i32 = desc(i32)/;"	constant
desc_u8	$ZIGLIB/std/sort.zig	/^const desc_u8 = desc(u8)/;"	constant
description	$ZIGLIB/std/target.zig	/description: []const u8/;"	field
deserialize	$ZIGLIB/std/crypto/scrypt.zig	/pub fn deserialize(comptime T: type, str: []const u8) EncodingError!T {$/;"	function
designators	$ZIGLIB/std/tz.zig	/const designators = designators_data[0..header.counts.charcnt]/;"	constant
designators_data	$ZIGLIB/std/tz.zig	/var designators_data: [256 + 6]u8 = undefined/;"	variable
desired_bits	$ZIGLIB/std/bit_set.zig	/var desired_bits = std.math.ceilPowerOfTwoAssert(usize, @bitSizeOf(MaskIntType))/;"	variable
dest	$ZIGLIB/std/zig/c_translation.zig	/const dest = ptrInfo(DestType)/;"	constant
dest_basename	$ZIGLIB/std/fs.zig	/dest_basename: []const u8/;"	field
dest_buf	$ZIGLIB/std/crypto/Certificate/Bundle/macos.zig	/const dest_buf = cb.bytes.allocatedSlice()[cert_start..]/;"	constant
dest_dir	$ZIGLIB/std/Build/InstallRawStep.zig	/dest_dir: ?InstallDir = null/;"	field
dest_file	$ZIGLIB/std/fs.zig	/var dest_file = dest_dir.openFile(dest_path, .{}) catch |err| switch (err) {$/;"	variable
dest_filename	$ZIGLIB/std/Build/InstallRawStep.zig	/^dest_filename: []const u8/;"	field
dest_i	$ZIGLIB/std/unicode.zig	/var dest_i: usize = 0/;"	variable
dest_idx	$ZIGLIB/std/base64.zig	/var dest_idx: usize = 0/;"	variable
dest_index	$ZIGLIB/std/io/peek_stream.zig	/var dest_index = self.fifo.read(dest)/;"	variable
dest_len	$ZIGLIB/std/unicode.zig	/var dest_len: usize = 0/;"	variable
dest_path	$ZIGLIB/std/Build/InstallDirStep.zig	/const dest_path = self.builder.pathJoin(&.{ dest_prefix, entry.path })/;"	constant
dest_prefix	$ZIGLIB/std/Build/InstallDirStep.zig	/const dest_prefix = self.builder.getInstallPath(self.options.install_dir, self.options.install_subdir)/;"	constant
dest_rel_path	$ZIGLIB/std/Build/InstallFileStep.zig	/^dest_rel_path: []const u8/;"	field
dest_slice	$ZIGLIB/std/multi_array_list.zig	/const dest_slice = self_slice.items(field)[new_len..]/;"	constant
dest_stat	$ZIGLIB/std/fs.zig	/const dest_stat = blk: {$/;"	constant
destination	$ZIGLIB/std/os/uefi/protocols/ip6_protocol.zig	/destination: Ip6Address/;"	field
destination_address	$ZIGLIB/std/os/uefi/protocols/udp6_protocol.zig	/destination_address: Ip6Address/;"	field
destination_port	$ZIGLIB/std/os/uefi/protocols/udp6_protocol.zig	/destination_port: u16/;"	field
destroy	$ZIGLIB/std/mem/Allocator.zig	/^pub fn destroy(self: Allocator, ptr: anytype) void {$/;"	function
destroyChild	$ZIGLIB/std/os/uefi/protocols/udp6_service_binding_protocol.zig	/pub fn destroyChild(self: *const Udp6ServiceBindingProtocol, handle: Handle) Status {$/;"	function
destroyMempool	$ZIGLIB/std/valgrind.zig	/^pub fn destroyMempool(pool: [*]u8) void {$/;"	function
destroyPipe	$ZIGLIB/std/child_process.zig	/^fn destroyPipe(pipe: [2]os.fd_t) void {$/;"	function
destroyWindow	$ZIGLIB/std/os/windows/user32.zig	/^pub fn destroyWindow(hWnd: HWND) !void {$/;"	function
detach	$ZIGLIB/std/Thread.zig	/fn detach(self: Impl) void {$/;"	function
detached	$ZIGLIB/std/Thread.zig	/detached/;"	field
detect	$ZIGLIB/std/zig/system/darwin/macos.zig	/^pub fn detect(target_os: *Target.Os) !void {$/;"	function
detectAMDProcessor	$ZIGLIB/std/zig/system/x86.zig	/^fn detectAMDProcessor(cpu: *Target.Cpu, family: u32, model: u32) void {$/;"	function
detectAbiAndDynamicLinker	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/^fn detectAbiAndDynamicLinker($/;"	function
detectIntelProcessor	$ZIGLIB/std/zig/system/x86.zig	/^fn detectIntelProcessor(cpu: *Target.Cpu, family: u32, model: u32, brand_id: u32) void {$/;"	function
detectLeaks	$ZIGLIB/std/heap/general_purpose_allocator.zig	/pub fn detectLeaks(self: *Self) bool {$/;"	function
detectLeaksInBucket	$ZIGLIB/std/heap/general_purpose_allocator.zig	/fn detectLeaksInBucket($/;"	function
detectNativeCoreInfo	$ZIGLIB/std/zig/system/arm.zig	/fn detectNativeCoreInfo(midr: u64) CoreInfo {$/;"	function
detectNativeCpuAndFeatures	$ZIGLIB/std/zig/system/x86.zig	/^pub fn detectNativeCpuAndFeatures(arch: Target.Cpu.Arch, os: Target.Os, cross_target: CrossTarget) Target.Cpu {$/;"	function
detectNativeCpuFeatures	$ZIGLIB/std/zig/system/arm.zig	/fn detectNativeCpuFeatures(cpu: *Target.Cpu, registers: *const [11]u64) void {$/;"	function
detectNativeFeatures	$ZIGLIB/std/zig/system/x86.zig	/^fn detectNativeFeatures(cpu: *Target.Cpu, os_tag: Target.Os.Tag) void {$/;"	function
detectRuntimeVersion	$ZIGLIB/std/zig/system/windows.zig	/^pub fn detectRuntimeVersion() WindowsVersion {$/;"	function
detectTTYConfig	$ZIGLIB/std/debug.zig	/^pub fn detectTTYConfig(file: std.fs.File) TTY.Config {$/;"	function
detected_version	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/const detected_version = windows.detectRuntimeVersion()/;"	constant
detectroundchange	$ZIGLIB/std/target/sparc.zig	/detectroundchange/;"	field
determined_by_cpu_arch	$ZIGLIB/std/zig/CrossTarget.zig	/determined_by_cpu_arch/;"	field
deterministicScalar	$ZIGLIB/std/crypto/ecdsa.zig	/fn deterministicScalar(h: [Hash.digest_length]u8, secret_key: Curve.scalar.CompressedScalar, noise: ?[noise_length]u8) Curve.scalar.Scalar {$/;"	function
dev_major	$ZIGLIB/std/os/linux.zig	/dev_major: u32/;"	field
dev_minor	$ZIGLIB/std/os/linux.zig	/dev_minor: u32/;"	field
dev_null_fd	$ZIGLIB/std/child_process.zig	/const dev_null_fd = if (any_ignore)$/;"	constant
dev_t	$ZIGLIB/std/os/linux/x86_64.zig	/^pub const dev_t = u64/;"	constant
device	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/device: u8/;"	field
device_class	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/device_class: u8/;"	field
device_handle	$ZIGLIB/std/os/uefi/protocols/loaded_image_protocol.zig	/device_handle: ?Handle/;"	field
device_id	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/device_id: u64 align(1)/;"	field
device_path	$ZIGLIB/std/os/uefi/protocols/hii.zig	/pub const device_path: u8 = 0x8/;"	constant
device_peak	$ZIGLIB/std/c/darwin.zig	/device_peak: mach_vm_size_t/;"	field
device_product_id	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/device_product_id: u16 align(1)/;"	field
device_protocol	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/device_protocol: u8/;"	field
device_subclass	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/device_subclass: u8/;"	field
device_t	$ZIGLIB/std/os/wasi.zig	/^pub const device_t = u64/;"	constant
device_type	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/device_type: u16 align(1)/;"	field
device_vendor_id	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/device_vendor_id: u16 align(1)/;"	field
devmap	$ZIGLIB/std/os/linux/bpf.zig	/devmap/;"	field
devmap_hash	$ZIGLIB/std/os/linux/bpf.zig	/devmap_hash/;"	field
dfp_packed_conversion	$ZIGLIB/std/target/s390x.zig	/dfp_packed_conversion/;"	field
dfp_zoned_conversion	$ZIGLIB/std/target/s390x.zig	/dfp_zoned_conversion/;"	field
diag0	$ZIGLIB/std/crypto/salsa20.zig	/var diag0 = input[2]/;"	variable
diag1	$ZIGLIB/std/crypto/salsa20.zig	/var diag1 = @shuffle(u32, k4k5k0n0, undefined, [_]i32{ 1, 2, 3, 0 })/;"	variable
diag2	$ZIGLIB/std/crypto/salsa20.zig	/var diag2 = @shuffle(u32, n1n2k6k1, undefined, [_]i32{ 1, 2, 3, 0 })/;"	variable
diag3	$ZIGLIB/std/crypto/salsa20.zig	/var diag3 = @shuffle(u32, k2k3n3k7, undefined, [_]i32{ 1, 2, 3, 0 })/;"	variable
diag_move	$ZIGLIB/std/enums.zig	/const diag_move = init: {$/;"	constant
diagnostics	$ZIGLIB/std/zig/CrossTarget.zig	/diagnostics: ?*Diagnostics = null/;"	field
diagonalize	$ZIGLIB/std/crypto/blake3.zig	/inline fn diagonalize(rows: *Rows) void {$/;"	function
diags	$ZIGLIB/std/zig/CrossTarget.zig	/const diags = args.diagnostics orelse &dummy_diags/;"	constant
diamonds	$ZIGLIB/std/enums.zig	/diamonds/;"	field
dict	$ZIGLIB/std/compress/lzma2/decode.zig	/dict: bool/;"	field
dict_size	$ZIGLIB/std/compress/lzma/decode/lzbuffer.zig	/dict_size: usize/;"	field
dict_size_provided	$ZIGLIB/std/compress/lzma/decode.zig	/const dict_size_provided = try reader.readIntLittle(u32)/;"	constant
dictionary	$ZIGLIB/std/compress/zlib.zig	/const dictionary = null/;"	constant
die_obj	$ZIGLIB/std/dwarf.zig	/var die_obj = (try di.parseDie(arena, in, abbrev_table, is_64)) orelse continue/;"	variable
diff	$ZIGLIB/std/testing.zig	/const diff = if (i < self.actual.len) !std.meta.eql(self.actual[i], value) else true/;"	constant
diff_bits	$ZIGLIB/std/mem.zig	/const diff_bits = init_value ^ value/;"	constant
diff_index	$ZIGLIB/std/testing.zig	/const diff_index: usize = diff_index: {$/;"	constant
diff_line_number	$ZIGLIB/std/testing.zig	/var diff_line_number: usize = 1/;"	variable
differ	$ZIGLIB/std/testing.zig	/var differ = if (T == u8) BytesDiffer{$/;"	variable
differenceWith	$ZIGLIB/std/enums.zig	/pub fn differenceWith(self: Self, other: Self) Self {$/;"	function
diffs	$ZIGLIB/std/testing.zig	/var diffs: std.bit_set.IntegerBitSet(16) = .{ .mask = 0 }/;"	variable
digest	$ZIGLIB/std/Build/WriteFileStep.zig	/var digest: [16]u8 = undefined/;"	variable
digest_bits	$ZIGLIB/std/crypto/sha2.zig	/digest_bits: usize/;"	field
digest_length	$ZIGLIB/std/crypto/siphash.zig	/const digest_length = 64/;"	constant
digit	$ZIGLIB/std/zig/number_literal.zig	/const digit = switch (c) {$/;"	constant
digitToChar	$ZIGLIB/std/fmt.zig	/^pub fn digitToChar(digit: u8, case: Case) u8 {$/;"	function
digit_after_base	$ZIGLIB/std/zig/number_literal.zig	/digit_after_base/;"	field
digit_count	$ZIGLIB/std/dwarf/AT.zig	/^pub const digit_count = 0x5f/;"	constant
digits	$ZIGLIB/std/fmt/parse_float/decimal.zig	/digits: [max_digits]u8/;"	field
digits2	$ZIGLIB/std/fmt.zig	/^fn digits2(value: usize) [2]u8 {$/;"	function
digits_len	$ZIGLIB/std/math/big/int.zig	/var digits_len: usize = 0/;"	variable
digits_per_limb	$ZIGLIB/std/math/big/int.zig	/const digits_per_limb = math.log(HalfLimb, base, maxInt(HalfLimb))/;"	constant
dir_block_count	$ZIGLIB/std/pdb.zig	/const dir_block_count = blockCountFromSize(superblock.NumDirectoryBytes, superblock.BlockSize)/;"	constant
dir_blocks	$ZIGLIB/std/pdb.zig	/var dir_blocks = try allocator.alloc(u32, dir_block_count)/;"	variable
dir_buf	$ZIGLIB/std/child_process.zig	/var dir_buf = std.ArrayListUnmanaged(u16){}/;"	variable
dir_ent_fmt_buf	$ZIGLIB/std/dwarf.zig	/var dir_ent_fmt_buf: [10]FileEntFmt = undefined/;"	variable
dir_fd	$ZIGLIB/std/os.zig	/dir_fd: fd_t/;"	field
dir_handle	$ZIGLIB/std/fs/watch.zig	/dir_handle: os.windows.HANDLE/;"	field
dir_index	$ZIGLIB/std/dwarf.zig	/dir_index: u32 = 0/;"	field
dir_info	$ZIGLIB/std/fs.zig	/const dir_info = @ptrCast(*w.FILE_BOTH_DIR_INFORMATION, aligned_ptr)/;"	constant
dir_it	$ZIGLIB/std/fs/watch.zig	/var dir_it = self.os_data.wd_table.keyIterator()/;"	variable
dir_name	$ZIGLIB/std/fs.zig	/var dir_name: []const u8 = sub_path/;"	variable
dir_name_buf	$ZIGLIB/std/fs.zig	/var dir_name_buf: [MAX_PATH_BYTES]u8 = undefined/;"	variable
dir_only	$ZIGLIB/std/os/windows.zig	/dir_only/;"	field
dir_path	$ZIGLIB/std/fs.zig	/var dir_path = try os.windows.GetFinalPathNameByHandle(self.fd, .{}, &dir_path_buffer)/;"	variable
dir_path_buffer	$ZIGLIB/std/fs.zig	/var dir_path_buffer: [os.windows.PATH_MAX_WIDE]u16 = undefined/;"	variable
dir_path_c	$ZIGLIB/std/os.zig	/const dir_path_c = try toPosixPath(dir_path)/;"	constant
dir_path_len	$ZIGLIB/std/child_process.zig	/const dir_path_len = dir_buf.items.len/;"	constant
dir_path_ptr	$ZIGLIB/std/fs/get_app_data_dir.zig	/var dir_path_ptr: [*:0]u8 = undefined/;"	variable
dir_path_w	$ZIGLIB/std/os.zig	/const dir_path_w = try windows.sliceToPrefixedFileW(dir_path)/;"	constant
dir_path_z	$ZIGLIB/std/child_process.zig	/const dir_path_z = dir_buf.items[0 .. dir_buf.items.len - 1 :0]/;"	constant
dir_table	$ZIGLIB/std/fs/watch.zig	/dir_table: DirTable/;"	field
dircookie_t	$ZIGLIB/std/os/wasi.zig	/^pub const dircookie_t = u64/;"	constant
directEnumArray	$ZIGLIB/std/enums.zig	/^pub fn directEnumArray($/;"	function
directEnumArrayDefault	$ZIGLIB/std/enums.zig	/^pub fn directEnumArrayDefault($/;"	function
directEnumArrayLen	$ZIGLIB/std/enums.zig	/^pub fn directEnumArrayLen(comptime E: type, comptime max_unused_slots: comptime_int) comptime_int {$/;"	function
direct_move	$ZIGLIB/std/target/powerpc.zig	/direct_move/;"	field
direction	$ZIGLIB/std/bit_set.zig	/direction: Direction = .forward/;"	field
directories_count	$ZIGLIB/std/dwarf.zig	/const directories_count = try leb.readULEB128(usize, in)/;"	constant
directory	$ZIGLIB/std/tar.zig	/directory = '5'/;"	field
directoryName	$ZIGLIB/std/crypto/Certificate.zig	/directoryName = 4/;"	field
directory_entry_format_count	$ZIGLIB/std/dwarf.zig	/const directory_entry_format_count = try in.readByte()/;"	constant
directory_index	$ZIGLIB/std/dwarf.zig	/pub const directory_index = 0x2/;"	constant
directory_which	$ZIGLIB/std/c/haiku.zig	/^pub const directory_which = enum(c_int) {$/;"	enum
dirent	$ZIGLIB/std/c/solaris.zig	/^pub const dirent = extern struct {$/;"	struct
dirent64	$ZIGLIB/std/os/linux.zig	/^pub const dirent64 = extern struct {$/;"	struct
dirent_t	$ZIGLIB/std/os/wasi.zig	/^pub const dirent_t = extern struct {$/;"	struct
dirfd	$ZIGLIB/std/event/loop.zig	/dirfd: os.fd_t/;"	field
dirname	$ZIGLIB/std/fs/watch.zig	/dirname: []const u8/;"	field
dirnamePosix	$ZIGLIB/std/fs/path.zig	/^pub fn dirnamePosix(path: []const u8) ?[]const u8 {$/;"	function
dirnameWindows	$ZIGLIB/std/fs/path.zig	/^pub fn dirnameWindows(path: []const u8) ?[]const u8 {$/;"	function
dirname_len	$ZIGLIB/std/fs.zig	/dirname_len: usize/;"	field
dirname_path_space	$ZIGLIB/std/fs/watch.zig	/var dirname_path_space: windows.PathSpace = undefined/;"	variable
dirnamlen_t	$ZIGLIB/std/os/wasi.zig	/^pub const dirnamlen_t = u32/;"	constant
disable	$ZIGLIB/std/Progress.zig	/var disable = true/;"	variable
disableAddrErrorReportingInRange	$ZIGLIB/std/valgrind/memcheck.zig	/^pub fn disableAddrErrorReportingInRange(qzz: []u8) usize {$/;"	function
disableErrorReporting	$ZIGLIB/std/valgrind.zig	/^pub fn disableErrorReporting() void {$/;"	function
disable_aslr	$ZIGLIB/std/child_process.zig	/disable_aslr: bool = false/;"	field
disable_background_polling	$ZIGLIB/std/os/uefi/protocols/managed_network_protocol.zig	/disable_background_polling: bool/;"	field
disable_latency_sched_heuristic	$ZIGLIB/std/target/aarch64.zig	/disable_latency_sched_heuristic/;"	field
disable_postra_scheduler	$ZIGLIB/std/target/arm.zig	/disable_postra_scheduler/;"	field
disable_reads	$ZIGLIB/std/crypto/tls.zig	/disable_reads: bool = false/;"	field
disable_sanitize_c	$ZIGLIB/std/Build/CompileStep.zig	/^disable_sanitize_c: bool/;"	field
disable_stack_probing	$ZIGLIB/std/Build/CompileStep.zig	/^disable_stack_probing: bool/;"	field
disabled	$ZIGLIB/std/os/linux.zig	/disabled: bool = false/;"	field
disabled_offset	$ZIGLIB/std/zig/render.zig	/disabled_offset: ?usize = null/;"	field
disabled_source	$ZIGLIB/std/zig/render.zig	/const disabled_source = tree.source[ais.disabled_offset.?..comment_start]/;"	constant
discard	$ZIGLIB/std/valgrind/memcheck.zig	/^pub fn discard(blkindex: usize) bool {$/;"	function
discardTranslations	$ZIGLIB/std/valgrind.zig	/^pub fn discardTranslations(qzz: []const u8) void {$/;"	function
discarded	$ZIGLIB/std/macho.zig	/pub fn discarded(sym: nlist_64) bool {$/;"	function
disconnectController	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/disconnectController: *const fn (controller_handle: Handle, driver_image_handle: ?Handle, child_handle: ?Handle) callconv(.C) Status/;"	field
discr	$ZIGLIB/std/dwarf/AT.zig	/^pub const discr = 0x15/;"	constant
discr_list	$ZIGLIB/std/dwarf/AT.zig	/^pub const discr_list = 0x3d/;"	constant
discr_value	$ZIGLIB/std/dwarf/AT.zig	/^pub const discr_value = 0x16/;"	constant
diskDesignator	$ZIGLIB/std/fs/path.zig	/^pub fn diskDesignator(path: []const u8) []const u8 {$/;"	function
diskDesignatorWindows	$ZIGLIB/std/fs/path.zig	/^pub fn diskDesignatorWindows(path: []const u8) []const u8 {$/;"	function
disk_designator	$ZIGLIB/std/fs/path.zig	/var disk_designator: []const u8 = ""/;"	variable
disk_designator_len	$ZIGLIB/std/fs/path.zig	/const disk_designator_len: usize = l: {$/;"	constant
disk_type	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/disk_type: Guid align(1)/;"	field
dispatch	$ZIGLIB/std/event/loop.zig	/fn dispatch(self: *Loop) void {$/;"	function
dispatchMessageA	$ZIGLIB/std/os/windows/user32.zig	/^pub fn dispatchMessageA(lpMsg: *const MSG) LRESULT {$/;"	function
dispatchMessageW	$ZIGLIB/std/os/windows/user32.zig	/^pub fn dispatchMessageW(lpMsg: *const MSG) LRESULT {$/;"	function
dispatch_function_t	$ZIGLIB/std/c/darwin.zig	/^const dispatch_function_t = fn (?*anyopaque) callconv(.C) void/;"	constant
dispatch_lock	$ZIGLIB/std/event/channel.zig	/dispatch_lock: bool/;"	field
dispatch_once_t	$ZIGLIB/std/c/darwin.zig	/^const dispatch_once_t = usize/;"	constant
dispatch_qaddr	$ZIGLIB/std/c/darwin.zig	/dispatch_qaddr: u64/;"	field
dispatch_semaphore_t	$ZIGLIB/std/c/darwin.zig	/^pub const dispatch_semaphore_t = *opaque {}/;"	constant
dispatch_time_t	$ZIGLIB/std/c/darwin.zig	/^pub const dispatch_time_t = u64/;"	constant
displaced_index	$ZIGLIB/std/array_hash_map.zig	/var displaced_index = slot_data.entry_index/;"	variable
dist	$ZIGLIB/std/compress/lzma/decode.zig	/const dist = self.rep[idx]/;"	constant
distance_from_start_index	$ZIGLIB/std/array_hash_map.zig	/var distance_from_start_index: I = 0/;"	variable
distinct_ops	$ZIGLIB/std/target/s390x.zig	/distinct_ops/;"	field
divCeil	$ZIGLIB/std/math.zig	/^pub fn divCeil(comptime T: type, numerator: T, denominator: T) !T {$/;"	function
divExact	$ZIGLIB/std/math.zig	/^pub fn divExact(comptime T: type, numerator: T, denominator: T) !T {$/;"	function
divFloor	$ZIGLIB/std/math/big/int.zig	/pub fn divFloor(q: *Managed, r: *Managed, a: *const Managed, b: *const Managed) !void {$/;"	function
divTrunc	$ZIGLIB/std/math/big/int.zig	/pub fn divTrunc(q: *Managed, r: *Managed, a: *const Managed, b: *const Managed) !void {$/;"	function
div_i32	$ZIGLIB/compiler_rt/int.zig	/^inline fn div_i32(n: i32, d: i32) i32 {$/;"	function
div_u32	$ZIGLIB/compiler_rt/int.zig	/^inline fn div_u32(n: u32, d: u32) u32 {$/;"	function
divc3	$ZIGLIB/compiler_rt/divc3.zig	/^pub inline fn divc3(comptime T: type, a: T, b: T, c_in: T, d_in: T) Complex(T) {$/;"	function
divide_by_zero	$ZIGLIB/std/builtin.zig	/pub const divide_by_zero = "division by zero"/;"	constant
divisor	$ZIGLIB/std/math/big/int.zig	/const divisor = y.limbs[y.len - 1]/;"	constant
divmod	$ZIGLIB/std/math/big/int.zig	/fn divmod($/;"	function
divstep	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/^pub fn divstep(out1: *u64, out2: *[5]u64, out3: *[5]u64, out4: *[4]u64, out5: *[4]u64, arg1: u64, arg2: [5]u64, arg3: [5]u64, arg4: [4]u64, arg5: [4]u64) void {$/;"	function
divstepPrecomp	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/^pub fn divstepPrecomp(out1: *[4]u64) void {$/;"	function
dk_block	$ZIGLIB/std/crypto/pbkdf2.zig	/const dk_block: []u8 = dk[offset..][0..block_len]/;"	constant
dk_len	$ZIGLIB/std/crypto/pbkdf2.zig	/const dk_len = dk.len/;"	constant
dk_length	$ZIGLIB/std/crypto/bcrypt.zig	/^const dk_length: usize = ct_length - 1/;"	constant
dl_insts	$ZIGLIB/std/target/amdgpu.zig	/dl_insts/;"	field
dl_iterate_phdr	$ZIGLIB/std/os.zig	/^pub fn dl_iterate_phdr($/;"	function
dl_iterate_phdr_callback	$ZIGLIB/std/c/solaris.zig	/^pub const dl_iterate_phdr_callback = *const fn (info: *dl_phdr_info, size: usize, data: ?*anyopaque) callconv(.C) c_int/;"	constant
dl_phdr_info	$ZIGLIB/std/os/linux.zig	/^pub const dl_phdr_info = extern struct {$/;"	struct
dlabel	$ZIGLIB/std/net.zig	/const dlabel = dpolicy.label/;"	constant
dll_export_fns	$ZIGLIB/std/Build/CompileStep.zig	/^dll_export_fns: ?bool = null/;"	field
dll_flags	$ZIGLIB/std/coff.zig	/dll_flags: DllFlags/;"	field
dlpi_addr	$ZIGLIB/std/os/linux.zig	/dlpi_addr: usize/;"	field
dlpi_adds	$ZIGLIB/std/c/solaris.zig	/dlpi_adds: u64/;"	field
dlpi_name	$ZIGLIB/std/os/linux.zig	/dlpi_name: ?[*:0]const u8/;"	field
dlpi_phdr	$ZIGLIB/std/os/linux.zig	/dlpi_phdr: [*]std.elf.Phdr/;"	field
dlpi_phnum	$ZIGLIB/std/os/linux.zig	/dlpi_phnum: u16/;"	field
dlpi_subs	$ZIGLIB/std/c/solaris.zig	/dlpi_subs: u64/;"	field
dlpi_tls_data	$ZIGLIB/std/c/freebsd.zig	/dlpi_tls_data: ?*anyopaque/;"	field
dlpi_tls_modid	$ZIGLIB/std/c/freebsd.zig	/dlpi_tls_modid: usize/;"	field
dn_expand	$ZIGLIB/std/os.zig	/^pub fn dn_expand($/;"	function
dnsParse	$ZIGLIB/std/net.zig	/^fn dnsParse($/;"	function
dnsParseCallback	$ZIGLIB/std/net.zig	/^fn dnsParseCallback(ctx: dpc_ctx, rr: u8, data: []const u8, packet: []const u8) !void {$/;"	function
dns_name	$ZIGLIB/std/crypto/Certificate.zig	/const dns_name = subject_alt_name[general_name.slice.start..general_name.slice.end]/;"	constant
doAddedLeakCheck	$ZIGLIB/std/valgrind/memcheck.zig	/^pub fn doAddedLeakCheck() void {$/;"	function
doAtomicSymLinks	$ZIGLIB/std/Build/CompileStep.zig	/^pub fn doAtomicSymLinks($/;"	function
doCallgrindClientRequestExpr	$ZIGLIB/std/valgrind/callgrind.zig	/^fn doCallgrindClientRequestExpr(default: usize, request: CallgrindClientRequest, a1: usize, a2: usize, a3: usize, a4: usize, a5: usize) usize {$/;"	function
doCallgrindClientRequestStmt	$ZIGLIB/std/valgrind/callgrind.zig	/^fn doCallgrindClientRequestStmt(request: CallgrindClientRequest, a1: usize, a2: usize, a3: usize, a4: usize, a5: usize) void {$/;"	function
doChangedLeakCheck	$ZIGLIB/std/valgrind/memcheck.zig	/^pub fn doChangedLeakCheck() void {$/;"	function
doClientRequest	$ZIGLIB/std/valgrind.zig	/^pub fn doClientRequest(default: usize, request: usize, a1: usize, a2: usize, a3: usize, a4: usize, a5: usize) usize {$/;"	function
doClientRequestExpr	$ZIGLIB/std/valgrind.zig	/^fn doClientRequestExpr(default: usize, request: ClientRequest, a1: usize, a2: usize, a3: usize, a4: usize, a5: usize) usize {$/;"	function
doClientRequestStmt	$ZIGLIB/std/valgrind.zig	/^fn doClientRequestStmt(request: ClientRequest, a1: usize, a2: usize, a3: usize, a4: usize, a5: usize) void {$/;"	function
doLeakCheck	$ZIGLIB/std/valgrind/memcheck.zig	/^pub fn doLeakCheck() void {$/;"	function
doMemCheckClientRequestExpr	$ZIGLIB/std/valgrind/memcheck.zig	/^fn doMemCheckClientRequestExpr(default: usize, request: MemCheckClientRequest, a1: usize, a2: usize, a3: usize, a4: usize, a5: usize) usize {$/;"	function
doMemCheckClientRequestStmt	$ZIGLIB/std/valgrind/memcheck.zig	/^fn doMemCheckClientRequestStmt(request: MemCheckClientRequest, a1: usize, a2: usize, a3: usize, a4: usize, a5: usize) void {$/;"	function
doNotOptimizeAway	$ZIGLIB/std/mem.zig	/^pub fn doNotOptimizeAway(val: anytype) void {$/;"	function
doNotOptimizeAwayC	$ZIGLIB/std/mem.zig	/^fn doNotOptimizeAwayC(ptr: anytype) void {$/;"	function
doQuickLeakCheck	$ZIGLIB/std/valgrind/memcheck.zig	/^pub fn doQuickLeakCheck() void {$/;"	function
doSiftDown	$ZIGLIB/std/priority_dequeue.zig	/fn doSiftDown(self: *Self, start_index: usize, target_order: Order) void {$/;"	function
doSiftUp	$ZIGLIB/std/priority_dequeue.zig	/fn doSiftUp(self: *Self, start_index: usize, target_order: Order) void {$/;"	function
doSomethingThatFails	$ZIGLIB/std/event/group.zig	/^fn doSomethingThatFails() callconv(.Async) anyerror!void {}$/;"	function
doTest	$ZIGLIB/std/hash/cityhash.zig	/fn doTest() !void {$/;"	function
doTheTest	$ZIGLIB/std/mem.zig	/fn doTheTest() !void {$/;"	function
doc_comment	$ZIGLIB/std/zig/tokenizer.zig	/doc_comment/;"	field
doc_comment_start	$ZIGLIB/std/zig/tokenizer.zig	/doc_comment_start/;"	field
does_one_overflow	$ZIGLIB/std/math/powi.zig	/const does_one_overflow = math.maxInt(T) < 1/;"	constant
doloop	$ZIGLIB/std/target/csky.zig	/doloop/;"	field
domain	$ZIGLIB/std/target.zig	/domain/;"	field
domainComponent	$ZIGLIB/std/crypto/Certificate.zig	/domainComponent/;"	field
domainname	$ZIGLIB/std/os/linux.zig	/domainname: [64:0]u8/;"	field
done	$ZIGLIB/std/once.zig	/done: bool = false/;"	field
done_flag	$ZIGLIB/std/Build/Step.zig	/^done_flag: bool/;"	field
dont_override	$ZIGLIB/std/os/uefi/protocols/edid_override_protocol.zig	/dont_override: bool/;"	field
dont_print_on_dumb	$ZIGLIB/std/Progress.zig	/^dont_print_on_dumb: bool = false/;"	field
dont_widen_vmovs	$ZIGLIB/std/target/arm.zig	/dont_widen_vmovs/;"	field
dot1_insts	$ZIGLIB/std/target/amdgpu.zig	/dot1_insts/;"	field
dot2_insts	$ZIGLIB/std/target/amdgpu.zig	/dot2_insts/;"	field
dot3_insts	$ZIGLIB/std/target/amdgpu.zig	/dot3_insts/;"	field
dot4_insts	$ZIGLIB/std/target/amdgpu.zig	/dot4_insts/;"	field
dot5_insts	$ZIGLIB/std/target/amdgpu.zig	/dot5_insts/;"	field
dot6_insts	$ZIGLIB/std/target/amdgpu.zig	/dot6_insts/;"	field
dot7_insts	$ZIGLIB/std/target/amdgpu.zig	/dot7_insts/;"	field
dot8_insts	$ZIGLIB/std/target/amdgpu.zig	/dot8_insts/;"	field
dotprod	$ZIGLIB/std/target/arm.zig	/dotprod/;"	field
dots	$ZIGLIB/std/net.zig	/var dots: usize = 0/;"	variable
double	$ZIGLIB/std/target.zig	/double/;"	field
double_int_bits	$ZIGLIB/compiler_rt/udivmod.zig	/const double_int_bits = @typeInfo(DoubleInt).Int.bits/;"	constant
double_word	$ZIGLIB/std/os/linux/bpf.zig	/double_word = DW/;"	field
down	$ZIGLIB/std/enums.zig	/down/;"	field
downgradeLock	$ZIGLIB/std/fs/file.zig	/pub fn downgradeLock(file: File) LockError!void {$/;"	function
dpc_ctx	$ZIGLIB/std/net.zig	/^const dpc_ctx = struct {$/;"	struct
dpolicy	$ZIGLIB/std/net.zig	/const dpolicy = policyOf(da6.addr)/;"	constant
dpp8	$ZIGLIB/std/target/amdgpu.zig	/dpp8/;"	field
dpp_64bit	$ZIGLIB/std/target/amdgpu.zig	/dpp_64bit/;"	field
dprec	$ZIGLIB/std/net.zig	/const dprec: i32 = dpolicy.prec/;"	constant
dragonfly	$ZIGLIB/std/target.zig	/dragonfly/;"	field
drc128	$ZIGLIB/std/crypto/aes/armcrypto.zig	/fn drc128(comptime rc: u8, t: BlockVec) BlockVec {$/;"	function
drc256	$ZIGLIB/std/crypto/aes/armcrypto.zig	/fn drc256(comptime second: bool, comptime rc: u8, t: BlockVec, tx: BlockVec) BlockVec {$/;"	function
dregs	$ZIGLIB/std/os/linux/sparc64.zig	/dregs: [32]u64/;"	field
drive_kind	$ZIGLIB/std/fs/path.zig	/var drive_kind = WindowsPath.Kind.None/;"	variable
drive_letter	$ZIGLIB/std/os/windows.zig	/const drive_letter = symlink[prefix.len..]/;"	constant
driverkit	$ZIGLIB/std/target.zig	/driverkit/;"	field
drop	$ZIGLIB/std/wasm.zig	/drop = 0x1A/;"	field
drop_page_count	$ZIGLIB/std/heap/WasmPageAllocator.zig	/const drop_page_count = @divExact(aligned_addr - next_page_addr, mem.page_size)/;"	constant
dropped	$ZIGLIB/std/os/linux/io_uring.zig	/dropped: *u32/;"	field
dropped_frames	$ZIGLIB/std/debug.zig	/const dropped_frames = stack_trace.index - stack_trace.instruction_addresses.len/;"	constant
ds128	$ZIGLIB/std/target/amdgpu.zig	/ds128/;"	field
ds_src2_insts	$ZIGLIB/std/target/amdgpu.zig	/ds_src2_insts/;"	field
dscope	$ZIGLIB/std/net.zig	/const dscope: i32 = scopeOf(da6.addr)/;"	constant
dsp1e2	$ZIGLIB/std/target/csky.zig	/dsp1e2/;"	field
dsp_silan	$ZIGLIB/std/target/csky.zig	/dsp_silan/;"	field
dspe60	$ZIGLIB/std/target/csky.zig	/dspe60/;"	field
dspr2	$ZIGLIB/std/target/mips.zig	/dspr2/;"	field
dspr3	$ZIGLIB/std/target/mips.zig	/dspr3/;"	field
dspv2	$ZIGLIB/std/target/csky.zig	/dspv2/;"	field
dstBits	$ZIGLIB/compiler_rt/truncf.zig	/const dstBits = @typeInfo(dst_t).Float.bits/;"	constant
dstExpBias	$ZIGLIB/compiler_rt/truncf.zig	/const dstExpBias = dstInfExp >> 1/;"	constant
dstExpBits	$ZIGLIB/compiler_rt/truncf.zig	/const dstExpBits = dstBits - dstSigBits - 1/;"	constant
dstInfExp	$ZIGLIB/compiler_rt/truncf.zig	/const dstInfExp = (1 << dstExpBits) - 1/;"	constant
dstMinNormal	$ZIGLIB/compiler_rt/extendf.zig	/const dstMinNormal: dst_rep_t = @as(dst_rep_t, 1) << dstSigBits/;"	constant
dstNaNCode	$ZIGLIB/compiler_rt/truncf.zig	/const dstNaNCode = dstQNaN - 1/;"	constant
dstQNaN	$ZIGLIB/compiler_rt/truncf.zig	/const dstQNaN = 1 << (dstSigBits - 1)/;"	constant
dstSigBits	$ZIGLIB/compiler_rt/truncf.zig	/const dstSigBits = std.math.floatMantissaBits(dst_t)/;"	constant
dst_base	$ZIGLIB/std/compress/deflate/dict_decoder.zig	/var dst_base = self.wr_pos/;"	variable
dst_bits	$ZIGLIB/compiler_rt/truncf.zig	/const dst_bits = @typeInfo(dst_t).Float.bits/;"	constant
dst_buffer	$ZIGLIB/std/io/stream_source.zig	/var dst_buffer: [13]u8 = undefined/;"	variable
dst_cast	$ZIGLIB/std/zig/c_builtins.zig	/const dst_cast = @ptrCast([*c]u8, dst)/;"	constant
dst_exp_bias	$ZIGLIB/compiler_rt/truncf.zig	/const dst_exp_bias = dst_inf_exp >> 1/;"	constant
dst_exp_bits	$ZIGLIB/compiler_rt/truncf.zig	/const dst_exp_bits = dst_bits - dst_sig_bits - 1/;"	constant
dst_i	$ZIGLIB/std/math/big/int.zig	/const dst_i = src_i - limb_shift/;"	constant
dst_inf_exp	$ZIGLIB/compiler_rt/truncf.zig	/const dst_inf_exp = (1 << dst_exp_bits) - 1/;"	constant
dst_int_bit	$ZIGLIB/compiler_rt/extendf.zig	/const dst_int_bit = 0x8000000000000000/;"	constant
dst_left	$ZIGLIB/std/fifo.zig	/var dst_left = dst/;"	variable
dst_min_normal	$ZIGLIB/compiler_rt/extendxftf2.zig	/const dst_min_normal = @as(u128, 1) << dst_sig_bits/;"	constant
dst_nan_mask	$ZIGLIB/compiler_rt/truncf.zig	/const dst_nan_mask = dst_qnan - 1/;"	constant
dst_pos	$ZIGLIB/std/compress/deflate/dict_decoder.zig	/var dst_pos = self.wr_pos/;"	variable
dst_qnan	$ZIGLIB/compiler_rt/truncf.zig	/const dst_qnan = 1 << (dst_sig_bits - 1)/;"	constant
dst_rep_t	$ZIGLIB/compiler_rt/truncf.zig	/const dst_rep_t = std.meta.Int(.unsigned, @typeInfo(dst_t).Float.bits)/;"	constant
dst_sig_bits	$ZIGLIB/compiler_rt/trunctfxf2.zig	/const dst_sig_bits = math.floatMantissaBits(f80) - 1/;"	constant
dst_size	$ZIGLIB/std/compress/deflate/compressor.zig	/var dst_size = to_check.len - min_match_length + 1/;"	variable
dstaddr	$ZIGLIB/std/os/linux.zig	/dstaddr: sockaddr/;"	field
dtv_offset	$ZIGLIB/std/os/linux/tls.zig	/var dtv_offset: usize = undefined/;"	variable
dubious	$ZIGLIB/std/valgrind/memcheck.zig	/dubious: usize/;"	field
dummy	$ZIGLIB/std/target/bpf.zig	/dummy/;"	field
dummyWrite	$ZIGLIB/std/io.zig	/^fn dummyWrite(context: void, data: []const u8) error{}!usize {$/;"	function
dummy_diags	$ZIGLIB/std/zig/CrossTarget.zig	/var dummy_diags: ParseOptions.Diagnostics = undefined/;"	variable
dummy_execute_header	$ZIGLIB/std/c/darwin.zig	/^var dummy_execute_header: mach_hdr = undefined/;"	variable
dump	$ZIGLIB/std/zig/tokenizer.zig	/pub fn dump(self: *Tokenizer, token: *const Token) void {$/;"	function
dumpCurrentStackTrace	$ZIGLIB/std/debug.zig	/^pub fn dumpCurrentStackTrace(start_addr: ?usize) void {$/;"	function
dumpIndex	$ZIGLIB/std/array_hash_map.zig	/fn dumpIndex(header: *IndexHeader, comptime I: type) void {$/;"	function
dumpLoadCommand	$ZIGLIB/std/Build/CheckObjectStep.zig	/fn dumpLoadCommand(lc: macho.LoadCommandIterator.LoadCommand, index: usize, writer: anytype) !void {$/;"	function
dumpRecursive	$ZIGLIB/std/atomic/queue.zig	/fn dumpRecursive($/;"	function
dumpSection	$ZIGLIB/std/Build/CheckObjectStep.zig	/fn dumpSection(section: std.wasm.Section, data: []const u8, entries: u32, writer: anytype) !void {$/;"	function
dumpStackPointerAddr	$ZIGLIB/std/debug.zig	/^pub fn dumpStackPointerAddr(prefix: []const u8) void {$/;"	function
dumpStackTrace	$ZIGLIB/std/heap/general_purpose_allocator.zig	/fn dumpStackTrace(self: *LargeAlloc, trace_kind: TraceKind) void {$/;"	function
dumpStackTraceFromBase	$ZIGLIB/std/debug.zig	/^pub fn dumpStackTraceFromBase(bp: usize, ip: usize) void {$/;"	function
dumpState	$ZIGLIB/std/array_hash_map.zig	/fn dumpState(self: Self, comptime keyFmt: []const u8, comptime valueFmt: []const u8) void {$/;"	function
dumpStateContext	$ZIGLIB/std/array_hash_map.zig	/fn dumpStateContext(self: Self, comptime keyFmt: []const u8, comptime valueFmt: []const u8, ctx: Context) void {$/;"	function
dumpStats	$ZIGLIB/std/valgrind/callgrind.zig	/^pub fn dumpStats() void {$/;"	function
dumpStatsAt	$ZIGLIB/std/valgrind/callgrind.zig	/^pub fn dumpStatsAt(pos_str: [*]u8) void {$/;"	function
dumpToStream	$ZIGLIB/std/atomic/queue.zig	/pub fn dumpToStream(self: *Self, stream: anytype) !void {$/;"	function
dump_symtab	$ZIGLIB/std/Build/CheckObjectStep.zig	/dump_symtab: bool = false/;"	field
dup2	$ZIGLIB/std/os/posix_spawn.zig	/pub fn dup2(self: *Actions, fd: fd_t, newfd: fd_t) Error!void {$/;"	function
dup3	$ZIGLIB/std/os/linux/syscalls.zig	/dup3 = Linux + 327/;"	field
dupe	$ZIGLIB/std/mem/Allocator.zig	/^pub fn dupe(allocator: Allocator, comptime T: type, m: []const T) ![]T {$/;"	function
dupePath	$ZIGLIB/std/Build.zig	/^pub fn dupePath(self: *Build, bytes: []const u8) []u8 {$/;"	function
dupeStrings	$ZIGLIB/std/Build.zig	/^pub fn dupeStrings(self: *Build, strings: []const []const u8) [][]u8 {$/;"	function
dupeZ	$ZIGLIB/std/mem/Allocator.zig	/^pub fn dupeZ(allocator: Allocator, comptime T: type, m: []const T) ![:0]T {$/;"	function
duped_args	$ZIGLIB/std/Build/CompileStep.zig	/const duped_args = self.builder.allocator.alloc(?[]u8, args.len) catch @panic("OOM")/;"	constant
duped_path	$ZIGLIB/std/Build.zig	/const duped_path = builder.dupe(self.custom)/;"	constant
duplex	$ZIGLIB/std/target/hexagon.zig	/duplex/;"	field
duplicate_exponent	$ZIGLIB/std/zig/number_literal.zig	/duplicate_exponent: usize/;"	field
duplicate_field_behavior	$ZIGLIB/std/json.zig	/duplicate_field_behavior: enum {$/;"	field
duplicate_period	$ZIGLIB/std/zig/number_literal.zig	/duplicate_period/;"	field
duration	$ZIGLIB/std/os/linux/bpf.zig	/duration: u32/;"	field
dwActiveProcessorMask	$ZIGLIB/std/os/windows.zig	/dwActiveProcessorMask: DWORD_PTR/;"	field
dwAllocationGranularity	$ZIGLIB/std/os/windows.zig	/dwAllocationGranularity: DWORD/;"	field
dwBufferCount	$ZIGLIB/std/os/windows/ws2_32.zig	/dwBufferCount: DWORD/;"	field
dwBuildNumber	$ZIGLIB/std/os/windows.zig	/dwBuildNumber: ULONG/;"	field
dwCatalogEntryId	$ZIGLIB/std/os/windows/ws2_32.zig	/dwCatalogEntryId: DWORD/;"	field
dwCertEncodingType	$ZIGLIB/std/os/windows/crypt32.zig	/dwCertEncodingType: DWORD/;"	field
dwCursorPosition	$ZIGLIB/std/os/windows.zig	/dwCursorPosition: COORD/;"	field
dwDamageMask	$ZIGLIB/std/os/windows/gdi32.zig	/dwDamageMask: DWORD/;"	field
dwFileAttributes	$ZIGLIB/std/os/windows.zig	/dwFileAttributes: DWORD/;"	field
dwFillAttribute	$ZIGLIB/std/os/windows.zig	/dwFillAttribute: ULONG/;"	field
dwFlags	$ZIGLIB/std/os/windows/ws2_32.zig	/dwFlags: DWORD/;"	field
dwHighDateTime	$ZIGLIB/std/os/windows.zig	/dwHighDateTime: DWORD/;"	field
dwLayerMask	$ZIGLIB/std/os/windows/gdi32.zig	/dwLayerMask: DWORD/;"	field
dwLowDateTime	$ZIGLIB/std/os/windows.zig	/dwLowDateTime: DWORD/;"	field
dwMajorVersion	$ZIGLIB/std/os/windows.zig	/dwMajorVersion: ULONG/;"	field
dwMaximumWindowSize	$ZIGLIB/std/os/windows.zig	/dwMaximumWindowSize: COORD/;"	field
dwMessageSize	$ZIGLIB/std/os/windows/ws2_32.zig	/dwMessageSize: DWORD/;"	field
dwMinorVersion	$ZIGLIB/std/os/windows.zig	/dwMinorVersion: ULONG/;"	field
dwNumberOfBytesTransferred	$ZIGLIB/std/os/windows.zig	/dwNumberOfBytesTransferred: DWORD/;"	field
dwNumberOfProcessors	$ZIGLIB/std/os/windows.zig	/dwNumberOfProcessors: DWORD/;"	field
dwOSVersionInfoSize	$ZIGLIB/std/os/windows.zig	/dwOSVersionInfoSize: ULONG/;"	field
dwOemId	$ZIGLIB/std/os/windows.zig	/dwOemId: DWORD/;"	field
dwPageSize	$ZIGLIB/std/os/windows.zig	/dwPageSize: DWORD/;"	field
dwPlatformId	$ZIGLIB/std/os/windows.zig	/dwPlatformId: ULONG/;"	field
dwProcessId	$ZIGLIB/std/os/windows.zig	/dwProcessId: DWORD/;"	field
dwProcessorType	$ZIGLIB/std/os/windows.zig	/dwProcessorType: DWORD/;"	field
dwProviderFlags	$ZIGLIB/std/os/windows/ws2_32.zig	/dwProviderFlags: DWORD/;"	field
dwProviderReserved	$ZIGLIB/std/os/windows/ws2_32.zig	/dwProviderReserved: DWORD/;"	field
dwReserved0	$ZIGLIB/std/os/windows.zig	/dwReserved0: DWORD/;"	field
dwReserved1	$ZIGLIB/std/os/windows.zig	/dwReserved1: DWORD/;"	field
dwServiceFlags1	$ZIGLIB/std/os/windows/ws2_32.zig	/dwServiceFlags1: DWORD/;"	field
dwServiceFlags2	$ZIGLIB/std/os/windows/ws2_32.zig	/dwServiceFlags2: DWORD/;"	field
dwServiceFlags3	$ZIGLIB/std/os/windows/ws2_32.zig	/dwServiceFlags3: DWORD/;"	field
dwServiceFlags4	$ZIGLIB/std/os/windows/ws2_32.zig	/dwServiceFlags4: DWORD/;"	field
dwShowWindow	$ZIGLIB/std/os/windows.zig	/dwShowWindow: ULONG/;"	field
dwSize	$ZIGLIB/std/os/windows.zig	/dwSize: DWORD/;"	field
dwThreadId	$ZIGLIB/std/os/windows.zig	/dwThreadId: DWORD/;"	field
dwVisibleMask	$ZIGLIB/std/os/windows/gdi32.zig	/dwVisibleMask: DWORD/;"	field
dwVolumeSerialNumber	$ZIGLIB/std/os/windows.zig	/dwVolumeSerialNumber: DWORD/;"	field
dwXCountChars	$ZIGLIB/std/os/windows.zig	/dwXCountChars: ULONG/;"	field
dwXSize	$ZIGLIB/std/os/windows.zig	/dwXSize: ULONG/;"	field
dwYCountChars	$ZIGLIB/std/os/windows.zig	/dwYCountChars: ULONG/;"	field
dwYSize	$ZIGLIB/std/os/windows.zig	/dwYSize: ULONG/;"	field
dwarf	$ZIGLIB/std/debug.zig	/var dwarf = DW.DwarfInfo{$/;"	variable
dwarf_address	$ZIGLIB/std/debug.zig	/const dwarf_address = relocated_address + self.coff_image_base/;"	constant
dwarf_procedure	$ZIGLIB/std/dwarf/TAG.zig	/^pub const dwarf_procedure = 0x36/;"	constant
dwarfris	$ZIGLIB/std/target/bpf.zig	/dwarfris/;"	field
dwo_name	$ZIGLIB/std/dwarf/AT.zig	/^pub const dwo_name = 0x76/;"	constant
dwords	$ZIGLIB/compiler_rt/shift.zig	/const dwords = Dwords(T, true)/;"	constant
dxcontainer	$ZIGLIB/std/target.zig	/dxcontainer/;"	field
dxil	$ZIGLIB/std/target.zig	/dxil/;"	field
dyld_build_version_t	$ZIGLIB/compiler_rt/os_version_check.zig	/const dyld_build_version_t = extern struct {$/;"	struct
dyld_info_command	$ZIGLIB/std/macho.zig	/^pub const dyld_info_command = extern struct {$/;"	struct
dyld_platform_t	$ZIGLIB/compiler_rt/os_version_check.zig	/const dyld_platform_t = u32/;"	constant
dylib	$ZIGLIB/std/macho.zig	/dylib: dylib/;"	field
dylib_command	$ZIGLIB/std/macho.zig	/^pub const dylib_command = extern struct {$/;"	struct
dylib_lc	$ZIGLIB/std/macho.zig	/const dylib_lc = lc.cast(dylib_command).?/;"	constant
dylibs_first	$ZIGLIB/std/Build/CompileStep.zig	/dylibs_first/;"	field
dylinker_command	$ZIGLIB/std/macho.zig	/^pub const dylinker_command = extern struct {$/;"	struct
dyn32	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/const dyn32 = @ptrCast($/;"	constant
dyn64	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/const dyn64 = @ptrCast($/;"	constant
dyn_buf	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/var dyn_buf: [16 * @sizeOf(elf.Elf64_Dyn)]u8 align(@alignOf(elf.Elf64_Dyn)) = undefined/;"	variable
dyn_buf_i	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/var dyn_buf_i: usize = 0/;"	variable
dyn_i	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/var dyn_i: usize = 0/;"	variable
dyn_num	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/const dyn_num = p_filesz \/ dyn_size/;"	constant
dyn_off	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/var dyn_off = elfInt(is_64, need_bswap, ph32.p_offset, ph64.p_offset)/;"	variable
dyn_read_byte_len	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/const dyn_read_byte_len = try preadMin($/;"	constant
dyn_reserve	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/const dyn_reserve: usize = @sizeOf(elf.Elf64_Dyn) - @sizeOf(elf.Elf32_Dyn)/;"	constant
dyn_size	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/const dyn_size: usize = if (is_64) @sizeOf(elf.Elf64_Dyn) else @sizeOf(elf.Elf32_Dyn)/;"	constant
dynamic	$ZIGLIB/std/http/Client.zig	/dynamic: usize/;"	field
dynamicLibSuffix	$ZIGLIB/std/zig/CrossTarget.zig	/^pub fn dynamicLibSuffix(self: CrossTarget) [:0]const u8 {$/;"	function
dynamicSize	$ZIGLIB/std/compress/deflate/huffman_bit_writer.zig	/fn dynamicSize($/;"	function
dynamic_linker	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/^dynamic_linker: DynamicLinker = DynamicLinker{}/;"	field
dynamic_segments	$ZIGLIB/std/segmented_list.zig	/dynamic_segments: [][*]T = &[_][*]T{}/;"	field
dynamic_size	$ZIGLIB/std/compress/deflate/huffman_bit_writer.zig	/var dynamic_size = self.dynamicSize(&self.literal_encoding, &self.offset_encoding, 0)/;"	variable
dynamic_type	$ZIGLIB/std/dwarf/TAG.zig	/^pub const dynamic_type = 0x46/;"	constant
dynstr	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/const dynstr: struct { offset: u64, size: u64 } = find_dyn_str: while (sh_i < shnum) {$/;"	constant
dynstr_bytes	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/const dynstr_bytes = buf[0..dynstr_size]/;"	constant
dynstr_size	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/const dynstr_size = @intCast(usize, dynstr.size)/;"	constant
dynv	$ZIGLIB/std/os/linux/vdso.zig	/const dynv = maybe_dynv orelse return 0/;"	constant
dysymtab_command	$ZIGLIB/std/macho.zig	/^pub const dysymtab_command = extern struct {$/;"	struct
e1_tags	$ZIGLIB/std/meta.zig	/const e1_tags = tags(E1)/;"	constant
e1names	$ZIGLIB/std/meta.zig	/const e1names = fieldNames(E1)/;"	constant
e2_tags	$ZIGLIB/std/meta.zig	/const e2_tags = tags(E2)/;"	constant
e2names	$ZIGLIB/std/meta.zig	/const e2names = fieldNames(E2)/;"	constant
e500	$ZIGLIB/std/target/powerpc.zig	/pub const e500 = CpuModel{$/;"	constant
e500mc	$ZIGLIB/std/target/powerpc.zig	/pub const e500mc = CpuModel{$/;"	constant
e5500	$ZIGLIB/std/target/powerpc.zig	/pub const e5500 = CpuModel{$/;"	constant
e801	$ZIGLIB/std/target/csky.zig	/pub const e801 = CpuModel{$/;"	constant
e802	$ZIGLIB/std/target/csky.zig	/pub const e802 = CpuModel{$/;"	constant
e802t	$ZIGLIB/std/target/csky.zig	/pub const e802t = CpuModel{$/;"	constant
e803	$ZIGLIB/std/target/csky.zig	/pub const e803 = CpuModel{$/;"	constant
e803t	$ZIGLIB/std/target/csky.zig	/pub const e803t = CpuModel{$/;"	constant
e804d	$ZIGLIB/std/target/csky.zig	/pub const e804d = CpuModel{$/;"	constant
e804df	$ZIGLIB/std/target/csky.zig	/pub const e804df = CpuModel{$/;"	constant
e804dft	$ZIGLIB/std/target/csky.zig	/pub const e804dft = CpuModel{$/;"	constant
e804dt	$ZIGLIB/std/target/csky.zig	/pub const e804dt = CpuModel{$/;"	constant
e804f	$ZIGLIB/std/target/csky.zig	/pub const e804f = CpuModel{$/;"	constant
e804ft	$ZIGLIB/std/target/csky.zig	/pub const e804ft = CpuModel{$/;"	constant
e_ehsize	$ZIGLIB/std/elf.zig	/e_ehsize: Elf64_Half/;"	field
e_entry	$ZIGLIB/std/elf.zig	/e_entry: Elf64_Addr/;"	field
e_flags	$ZIGLIB/std/elf.zig	/e_flags: Elf64_Word/;"	field
e_ident	$ZIGLIB/std/elf.zig	/e_ident: [EI_NIDENT]u8/;"	field
e_machine	$ZIGLIB/std/elf.zig	/e_machine: EM/;"	field
e_phentsize	$ZIGLIB/std/elf.zig	/e_phentsize: Elf64_Half/;"	field
e_phnum	$ZIGLIB/std/elf.zig	/e_phnum: Elf64_Half/;"	field
e_phoff	$ZIGLIB/std/elf.zig	/e_phoff: Elf64_Off/;"	field
e_shentsize	$ZIGLIB/std/elf.zig	/e_shentsize: Elf64_Half/;"	field
e_shnum	$ZIGLIB/std/elf.zig	/e_shnum: Elf64_Half/;"	field
e_shoff	$ZIGLIB/std/elf.zig	/e_shoff: Elf64_Off/;"	field
e_shstrndx	$ZIGLIB/std/elf.zig	/e_shstrndx: Elf64_Half/;"	field
e_type	$ZIGLIB/std/elf.zig	/e_type: ET/;"	field
e_version	$ZIGLIB/std/elf.zig	/e_version: Elf64_Word/;"	field
eabi	$ZIGLIB/std/target.zig	/eabi/;"	field
eabihf	$ZIGLIB/std/target.zig	/eabihf/;"	field
each_lib_rpath	$ZIGLIB/std/Build/CompileStep.zig	/^each_lib_rpath: ?bool = null/;"	field
eagerly_unquote	$ZIGLIB/std/zig/render.zig	/eagerly_unquote/;"	field
early_data	$ZIGLIB/std/crypto/tls.zig	/early_data = 42/;"	field
early_hints	$ZIGLIB/std/http.zig	/early_hints = 103/;"	field
early_secret	$ZIGLIB/std/crypto/tls/Client.zig	/const early_secret = P.Hkdf.extract(&[1]u8{0}, &zeroes)/;"	constant
early_stream	$ZIGLIB/std/io/limited_reader.zig	/var early_stream = limitedReader(fbs.reader(), 3)/;"	variable
eatDocComments	$ZIGLIB/std/zig/Parse.zig	/^fn eatDocComments(p: *Parse) !?TokenIndex {$/;"	function
eatToken	$ZIGLIB/std/zig/Parse.zig	/^fn eatToken(p: *Parse, tag: Token.Tag) ?TokenIndex {$/;"	function
ebias	$ZIGLIB/std/math/big/rational.zig	/const ebias = (1 << (esize - 1)) - 1/;"	constant
ecdsa_secp256r1_sha256	$ZIGLIB/std/crypto/tls.zig	/ecdsa_secp256r1_sha256 = 0x0403/;"	field
ecdsa_secp384r1_sha384	$ZIGLIB/std/crypto/tls.zig	/ecdsa_secp384r1_sha384 = 0x0503/;"	field
ecdsa_secp521r1_sha512	$ZIGLIB/std/crypto/tls.zig	/ecdsa_secp521r1_sha512 = 0x0603/;"	field
ecdsa_sha1	$ZIGLIB/std/crypto/tls.zig	/ecdsa_sha1 = 0x0203/;"	field
ecdsa_with_SHA224	$ZIGLIB/std/crypto/Certificate.zig	/ecdsa_with_SHA224/;"	field
ecdsa_with_SHA256	$ZIGLIB/std/crypto/Certificate.zig	/ecdsa_with_SHA256/;"	field
ecdsa_with_SHA384	$ZIGLIB/std/crypto/Certificate.zig	/ecdsa_with_SHA384/;"	field
ecdsa_with_SHA512	$ZIGLIB/std/crypto/Certificate.zig	/ecdsa_with_SHA512/;"	field
ed25519	$ZIGLIB/std/crypto/tls.zig	/ed25519 = 0x0807/;"	field
ed448	$ZIGLIB/std/crypto/tls.zig	/ed448 = 0x0808/;"	field
ed_kp	$ZIGLIB/std/crypto/25519/x25519.zig	/const ed_kp = try crypto.sign.Ed25519.KeyPair.create([_]u8{0x42} ** 32)/;"	constant
eden	$ZIGLIB/std/crypto/25519/ristretto255.zig	/const eden = den1.mul(Fe.edwards25519sqrtamd)/;"	constant
ediPartyName	$ZIGLIB/std/crypto/Certificate.zig	/ediPartyName = 5/;"	field
edid	$ZIGLIB/std/os/uefi/protocols/edid_discovered_protocol.zig	/edid: ?[*]u8/;"	field
edited	$ZIGLIB/std/dwarf/ATE.zig	/^pub const edited = 0xc/;"	constant
edsp	$ZIGLIB/std/target/csky.zig	/edsp/;"	field
edwards25519a	$ZIGLIB/std/crypto/25519/field.zig	/pub const edwards25519a = Fe{ .limbs = .{ @as(u64, edwards25519a_32), 0, 0, 0, 0 } }/;"	constant
edwards25519a_32	$ZIGLIB/std/crypto/25519/field.zig	/pub const edwards25519a_32: u32 = 486662/;"	constant
edwards25519d	$ZIGLIB/std/crypto/25519/field.zig	/pub const edwards25519d = Fe{ .limbs = .{ 929955233495203, 466365720129213, 1662059464998953, 2033849074728123, 1442794654840575 } }/;"	constant
edwards25519d2	$ZIGLIB/std/crypto/25519/field.zig	/pub const edwards25519d2 = Fe{ .limbs = .{ 1859910466990425, 932731440258426, 1072319116312658, 1815898335770999, 633789495995903 } }/;"	constant
edwards25519eonemsqd	$ZIGLIB/std/crypto/25519/field.zig	/pub const edwards25519eonemsqd = Fe{ .limbs = .{ 1136626929484150, 1998550399581263, 496427632559748, 118527312129759, 45110755273534 } }/;"	constant
edwards25519sqdmone	$ZIGLIB/std/crypto/25519/field.zig	/pub const edwards25519sqdmone = Fe{ .limbs = .{ 1507062230895904, 1572317787530805, 683053064812840, 317374165784489, 1572899562415810 } }/;"	constant
edwards25519sqrtadm1	$ZIGLIB/std/crypto/25519/field.zig	/pub const edwards25519sqrtadm1 = Fe{ .limbs = .{ 2241493124984347, 425987919032274, 2207028919301688, 1220490630685848, 974799131293748 } }/;"	constant
edwards25519sqrtam2	$ZIGLIB/std/crypto/25519/field.zig	/pub const edwards25519sqrtam2 = Fe{ .limbs = .{ 1693982333959686, 608509411481997, 2235573344831311, 947681270984193, 266558006233600 } }/;"	constant
edwards25519sqrtamd	$ZIGLIB/std/crypto/25519/field.zig	/pub const edwards25519sqrtamd = Fe{ .limbs = .{ 278908739862762, 821645201101625, 8113234426968, 1777959178193151, 2118520810568447 } }/;"	constant
eff_alignment	$ZIGLIB/std/heap.zig	/const eff_alignment = @max(alignment, @sizeOf(usize))/;"	constant
effective	$ZIGLIB/std/os/linux.zig	/effective: u32/;"	field
efi_file_archive	$ZIGLIB/std/os/uefi/protocols/file_protocol.zig	/pub const efi_file_archive: u64 = 0x0000000000000020/;"	constant
efi_file_directory	$ZIGLIB/std/os/uefi/protocols/file_protocol.zig	/pub const efi_file_directory: u64 = 0x0000000000000010/;"	constant
efi_file_hidden	$ZIGLIB/std/os/uefi/protocols/file_protocol.zig	/pub const efi_file_hidden: u64 = 0x0000000000000002/;"	constant
efi_file_mode_create	$ZIGLIB/std/os/uefi/protocols/file_protocol.zig	/pub const efi_file_mode_create: u64 = 0x8000000000000000/;"	constant
efi_file_mode_read	$ZIGLIB/std/os/uefi/protocols/file_protocol.zig	/pub const efi_file_mode_read: u64 = 0x0000000000000001/;"	constant
efi_file_mode_write	$ZIGLIB/std/os/uefi/protocols/file_protocol.zig	/pub const efi_file_mode_write: u64 = 0x0000000000000002/;"	constant
efi_file_position_end_of_file	$ZIGLIB/std/os/uefi/protocols/file_protocol.zig	/pub const efi_file_position_end_of_file: u64 = 0xffffffffffffffff/;"	constant
efi_file_read_only	$ZIGLIB/std/os/uefi/protocols/file_protocol.zig	/pub const efi_file_read_only: u64 = 0x0000000000000001/;"	constant
efi_file_reserved	$ZIGLIB/std/os/uefi/protocols/file_protocol.zig	/pub const efi_file_reserved: u64 = 0x0000000000000008/;"	constant
efi_file_system	$ZIGLIB/std/os/uefi/protocols/file_protocol.zig	/pub const efi_file_system: u64 = 0x0000000000000004/;"	constant
efi_file_valid_attr	$ZIGLIB/std/os/uefi/protocols/file_protocol.zig	/pub const efi_file_valid_attr: u64 = 0x0000000000000037/;"	constant
efi_pool_memory_type	$ZIGLIB/std/os/uefi.zig	/^pub var efi_pool_memory_type: tables.MemoryType = .LoaderData/;"	variable
eflags	$ZIGLIB/std/os/linux/x86_64.zig	/eflags: usize/;"	field
efpu2	$ZIGLIB/std/target/powerpc.zig	/efpu2/;"	field
ehdr	$ZIGLIB/std/os.zig	/const ehdr = @intToPtr(*elf.Ehdr, elf_base)/;"	constant
eijmpcall	$ZIGLIB/std/target/avr.zig	/eijmpcall/;"	field
eisel_lemire_largest_power_of_five	$ZIGLIB/std/fmt/parse_float/convert_eisel_lemire.zig	/^const eisel_lemire_largest_power_of_five = 308/;"	constant
eisel_lemire_smallest_power_of_five	$ZIGLIB/std/fmt/parse_float/convert_eisel_lemire.zig	/^const eisel_lemire_smallest_power_of_five = -342/;"	constant
eisel_lemire_table_powers_of_five_128	$ZIGLIB/std/fmt/parse_float/convert_eisel_lemire.zig	/^const eisel_lemire_table_powers_of_five_128 = [_]U128{$/;"	constant
el2vmsa	$ZIGLIB/std/target/aarch64.zig	/el2vmsa/;"	field
elapsed	$ZIGLIB/std/time.zig	/const elapsed = (seconds * ns_per_s) + @intCast(u32, self.timestamp.tv_nsec)/;"	constant
elapsed_ns	$ZIGLIB/std/Thread/Futex.zig	/const elapsed_ns = self.started.read()/;"	constant
elem	$ZIGLIB/std/priority_dequeue.zig	/var elem = it.next()/;"	variable
elem_count	$ZIGLIB/std/zig/Ast.zig	/elem_count: Node.Index/;"	field
elem_drop	$ZIGLIB/std/wasm.zig	/elem_drop = 0x0D/;"	field
elem_flags	$ZIGLIB/std/os/linux/bpf.zig	/elem_flags: u64/;"	field
elem_init	$ZIGLIB/std/zig/Parse.zig	/const elem_init = try p.expectExpr()/;"	constant
elem_range	$ZIGLIB/std/zig/Ast.zig	/const elem_range = tree.extraData(data.rhs, Node.SubRange)/;"	constant
elem_segment	$ZIGLIB/std/wasm.zig	/elem_segment/;"	field
elem_type	$ZIGLIB/std/zig/Parse.zig	/const elem_type = try p.expectTypeExpr()/;"	constant
element	$ZIGLIB/std/wasm.zig	/element/;"	field
element_bit_size	$ZIGLIB/std/simd.zig	/const element_bit_size = @max(8, std.math.ceilPowerOfTwo(u16, @bitSizeOf(T)) catch unreachable)/;"	constant
element_bitcount	$ZIGLIB/std/json.zig	/const element_bitcount = 8 * @sizeOf(usize)/;"	constant
element_count	$ZIGLIB/std/json.zig	/const element_count = n \/ element_bitcount/;"	constant
element_list	$ZIGLIB/std/dwarf/AT.zig	/^pub const element_list = 0x0f/;"	constant
element_type	$ZIGLIB/std/wasm.zig	/^pub const element_type: u8 = 0x70/;"	constant
elemental	$ZIGLIB/std/dwarf/AT.zig	/^pub const elemental = 0x66/;"	constant
elements	$ZIGLIB/std/zig/render.zig	/var elements: [2]Ast.Node.Index = undefined/;"	variable
elfInt	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/^pub fn elfInt(is_64: bool, need_bswap: bool, int_32: anytype, int_64: anytype) @TypeOf(int_64) {$/;"	function
elfToMmapProt	$ZIGLIB/std/dynamic_library.zig	/fn elfToMmapProt(elf_prot: u64) u32 {$/;"	function
elf_addr	$ZIGLIB/std/dynamic_library.zig	/const elf_addr = @ptrToInt(file_bytes.ptr)/;"	constant
elf_aux_maybe	$ZIGLIB/std/os/linux.zig	/^pub var elf_aux_maybe: ?[*]std.elf.Auxv = null/;"	variable
elf_base	$ZIGLIB/std/os.zig	/const elf_base = std.process.getBaseAddress()/;"	constant
elf_endian	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/const elf_endian: std.builtin.Endian = switch (hdr32.e_ident[elf.EI_DATA]) {$/;"	constant
elf_file	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/const elf_file = blk: {$/;"	constant
elf_header	$ZIGLIB/std/os.zig	/const elf_header = @intToPtr(*elf.Ehdr, entry.l_addr)/;"	constant
elfiamcu	$ZIGLIB/std/target.zig	/elfiamcu/;"	field
elligator	$ZIGLIB/std/crypto/25519/ristretto255.zig	/fn elligator(t: Fe) Curve {$/;"	function
elligator2	$ZIGLIB/std/crypto/25519/edwards25519.zig	/pub fn elligator2(r: Fe) struct { x: Fe, y: Fe, not_square: bool } {$/;"	function
ellipsis2	$ZIGLIB/std/zig/tokenizer.zig	/ellipsis2/;"	field
ellipsis3	$ZIGLIB/std/zig/tokenizer.zig	/ellipsis3/;"	field
elpm	$ZIGLIB/std/target/avr.zig	/elpm/;"	field
elpmx	$ZIGLIB/std/target/avr.zig	/elpmx/;"	field
elrw	$ZIGLIB/std/target/csky.zig	/elrw/;"	field
else	$ZIGLIB/std/wasm.zig	/@"else" = 0x05/;"	field
else_expr	$ZIGLIB/std/zig/Parse.zig	/const else_expr = try p.expectTypeExpr()/;"	constant
else_required	$ZIGLIB/std/zig/Parse.zig	/var else_required = false/;"	variable
else_token	$ZIGLIB/std/zig/Ast.zig	/else_token: TokenIndex/;"	field
emLen	$ZIGLIB/std/crypto/Certificate.zig	/const emLen = ((emBit - 1) \/ 8) + 1/;"	constant
em_dec	$ZIGLIB/std/crypto/Certificate.zig	/const em_dec = try encrypt(modulus_len, sig, public_key, allocator)/;"	constant
emag	$ZIGLIB/std/target/aarch64.zig	/pub const emag = CpuModel{$/;"	constant
emin	$ZIGLIB/std/math/big/rational.zig	/const emin = 1 - ebias/;"	constant
emit	$ZIGLIB/std/fs/watch.zig	/const emit = switch (ev.Action) {$/;"	constant
emitBackslashes	$ZIGLIB/std/process.zig	/fn emitBackslashes(self: *Self, emit_count: usize) void {$/;"	function
emitBool	$ZIGLIB/std/json/write_stream.zig	/pub fn emitBool(self: *Self, value: bool) !void {$/;"	function
emitCharacter	$ZIGLIB/std/process.zig	/fn emitCharacter(self: *Self, char: u8) void {$/;"	function
emitJson	$ZIGLIB/std/json/write_stream.zig	/pub fn emitJson(self: *Self, json: std.json.Value) Stream.Error!void {$/;"	function
emitLiteral	$ZIGLIB/std/compress/deflate/deflate_fast.zig	/fn emitLiteral(dst: []token.Token, tokens_count: *u16, lit: []u8) void {$/;"	function
emitNull	$ZIGLIB/std/json/write_stream.zig	/pub fn emitNull(self: *Self) !void {$/;"	function
emitNumber	$ZIGLIB/std/json/write_stream.zig	/pub fn emitNumber($/;"	function
emitString	$ZIGLIB/std/json/write_stream.zig	/pub fn emitString(self: *Self, string: []const u8) !void {$/;"	function
emit_analysis	$ZIGLIB/std/Build/CompileStep.zig	/^emit_analysis: EmitOption = .default/;"	field
emit_asm	$ZIGLIB/std/Build/CompileStep.zig	/^emit_asm: EmitOption = .default/;"	field
emit_bin	$ZIGLIB/std/Build/CompileStep.zig	/^emit_bin: EmitOption = .default/;"	field
emit_docs	$ZIGLIB/std/Build/CompileStep.zig	/^emit_docs: EmitOption = .default/;"	field
emit_field	$ZIGLIB/std/json.zig	/var emit_field = true/;"	variable
emit_h	$ZIGLIB/std/Build/CompileStep.zig	/^emit_h: bool = false/;"	field
emit_implib	$ZIGLIB/std/Build/CompileStep.zig	/^emit_implib: EmitOption = .default/;"	field
emit_llvm_bc	$ZIGLIB/std/Build/CompileStep.zig	/^emit_llvm_bc: EmitOption = .default/;"	field
emit_llvm_ir	$ZIGLIB/std/Build/CompileStep.zig	/^emit_llvm_ir: EmitOption = .default/;"	field
emit_null_optional_fields	$ZIGLIB/std/json.zig	/emit_null_optional_fields: bool = true/;"	field
emit_to	$ZIGLIB/std/Build/CompileStep.zig	/emit_to: []const u8/;"	field
emitted_signature	$ZIGLIB/std/hash_map.zig	/var emitted_signature = false/;"	variable
empty	$ZIGLIB/std/zig/system/darwin/macos.zig	/empty/;"	field
emptyHash	$ZIGLIB/std/crypto/tls.zig	/^pub fn emptyHash(comptime Hash: type) [Hash.digest_length]u8 {$/;"	function
empty_array	$ZIGLIB/std/json.zig	/var empty_array = TokenStream.init("[]")/;"	variable
empty_block	$ZIGLIB/std/crypto/25519/edwards25519.zig	/const empty_block = [_]u8{0} ** H.block_length/;"	constant
empty_buckets	$ZIGLIB/std/heap/general_purpose_allocator.zig	/empty_buckets: if (config.retain_metadata) ?*BucketHeader else void =$/;"	field
empty_hash	$ZIGLIB/std/crypto/tls/Client.zig	/const empty_hash = tls.emptyHash(P.Hash)/;"	constant
empty_iovec	$ZIGLIB/std/fs.zig	/const empty_iovec = [0]os.iovec_const{}/;"	constant
empty_kevs	$ZIGLIB/std/fs/watch.zig	/const empty_kevs = &[0]os.Kevent{}/;"	constant
empty_masks_data	$ZIGLIB/std/bit_set.zig	/var empty_masks_data = [_]MaskInt{ 0, undefined }/;"	variable
empty_masks_ptr	$ZIGLIB/std/bit_set.zig	/const empty_masks_ptr = empty_masks_data[1..2]/;"	constant
empty_object	$ZIGLIB/std/json.zig	/var empty_object = TokenStream.init("{}")/;"	variable
empty_sentinel	$ZIGLIB/std/array_hash_map.zig	/const empty_sentinel = ~@as(I, 0)/;"	constant
empty_sigset	$ZIGLIB/std/os/linux.zig	/^pub const empty_sigset = [_]u32{0} ** @typeInfo(sigset_t).Array.len/;"	constant
empty_string	$ZIGLIB/std/mem.zig	/const empty_string: [:0]const u8 = ""/;"	constant
empty_unicode_escape_sequence	$ZIGLIB/std/zig/string_literal.zig	/empty_unicode_escape_sequence: usize/;"	field
emscripten	$ZIGLIB/std/target.zig	/emscripten/;"	field
emulatable_run	$ZIGLIB/std/Build/Step.zig	/emulatable_run/;"	field
emulatable_step	$ZIGLIB/std/Build/CheckObjectStep.zig	/const emulatable_step = EmulatableRunStep.create(self.builder, "EmulatableRun", exe)/;"	constant
emutls_control	$ZIGLIB/compiler_rt/emutls.zig	/^const emutls_control = extern struct {$/;"	struct
enab	$ZIGLIB/std/os/linux/sparc64.zig	/enab: u8/;"	field
enableAddrErrorReportingInRange	$ZIGLIB/std/valgrind/memcheck.zig	/^pub fn enableAddrErrorReportingInRange(qzz: []u8) usize {$/;"	function
enableCursor	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/pub fn enableCursor(self: *const SimpleTextOutputProtocol, visible: bool) Status {$/;"	function
enableErrorReporting	$ZIGLIB/std/valgrind.zig	/^pub fn enableErrorReporting() void {$/;"	function
enable_broadcast_receive	$ZIGLIB/std/os/uefi/protocols/managed_network_protocol.zig	/enable_broadcast_receive: bool/;"	field
enable_darling	$ZIGLIB/std/Build.zig	/^enable_darling: bool = false/;"	field
enable_hot_plug	$ZIGLIB/std/os/uefi/protocols/edid_override_protocol.zig	/enable_hot_plug: bool/;"	field
enable_memory_limit	$ZIGLIB/std/heap/general_purpose_allocator.zig	/enable_memory_limit: bool = false/;"	field
enable_multicast_receive	$ZIGLIB/std/os/uefi/protocols/managed_network_protocol.zig	/enable_multicast_receive: bool/;"	field
enable_on_exec	$ZIGLIB/std/os/linux.zig	/enable_on_exec: bool = false/;"	field
enable_promiscuous_receive	$ZIGLIB/std/os/uefi/protocols/managed_network_protocol.zig	/enable_promiscuous_receive: bool/;"	field
enable_qemu	$ZIGLIB/std/Build.zig	/^enable_qemu: bool = false/;"	field
enable_receive_timestamps	$ZIGLIB/std/os/uefi/protocols/managed_network_protocol.zig	/enable_receive_timestamps: bool/;"	field
enable_rosetta	$ZIGLIB/std/Build.zig	/^enable_rosetta: bool = false/;"	field
enable_segfault_handler	$ZIGLIB/std/std.zig	/pub const enable_segfault_handler: bool = if (@hasDecl(options_override, "enable_segfault_handler"))$/;"	constant
enable_stats	$ZIGLIB/std/os/linux/bpf.zig	/enable_stats: EnableStatsAttr/;"	field
enable_unicast_receive	$ZIGLIB/std/os/uefi/protocols/managed_network_protocol.zig	/enable_unicast_receive: bool/;"	field
enable_wasmtime	$ZIGLIB/std/Build.zig	/^enable_wasmtime: bool = false/;"	field
enable_wine	$ZIGLIB/std/Build.zig	/^enable_wine: bool = false/;"	field
enabled	$ZIGLIB/std/debug.zig	/pub const enabled = is_enabled/;"	constant
encSpeed	$ZIGLIB/std/compress/deflate/compressor.zig	/fn encSpeed(self: *Self) !void {$/;"	function
enc_ctx	$ZIGLIB/std/crypto/aes/soft.zig	/const enc_ctx = AesEncryptCtx(Aes).init(key)/;"	constant
encipher	$ZIGLIB/std/crypto/bcrypt.zig	/fn encipher(state: *const State, halves: *Halves) void {$/;"	function
encode	$ZIGLIB/std/crypto/scrypt.zig	/fn encode(dst: []u8, src: []const u8) void {$/;"	function
encodeJsonString	$ZIGLIB/std/json.zig	/^pub fn encodeJsonString(string: []const u8, options: StringifyOptions, writer: anytype) !void {$/;"	function
encodeJsonStringChars	$ZIGLIB/std/json.zig	/^pub fn encodeJsonStringChars(chars: []const u8, options: StringifyOptions, writer: anytype) !void {$/;"	function
encoded	$ZIGLIB/std/crypto/scrypt.zig	/var encoded = buf[0..len]/;"	variable
encodedLen	$ZIGLIB/std/crypto/scrypt.zig	/fn encodedLen(len: usize) usize {$/;"	function
encoded_bytes	$ZIGLIB/std/crypto/Certificate/Bundle.zig	/const encoded_bytes = buffer[0..end_index]/;"	constant
encoded_cert	$ZIGLIB/std/crypto/Certificate/Bundle.zig	/const encoded_cert = mem.trim(u8, encoded_bytes[cert_start..cert_end], " \\t\\r\\n")/;"	constant
encoded_length	$ZIGLIB/std/crypto/pcurves/secp256k1/scalar.zig	/^pub const encoded_length = 32/;"	constant
encoded_sig	$ZIGLIB/std/crypto/tls/Client.zig	/const encoded_sig = hsd.slice(sig_len)/;"	constant
encoded_version	$ZIGLIB/std/crypto/Certificate.zig	/const encoded_version = bytes[version_elem.slice.start..version_elem.slice.end]/;"	constant
encodesTo	$ZIGLIB/std/json.zig	/^fn encodesTo(decoded: []const u8, encoded: []const u8) bool {$/;"	function
encoding	$ZIGLIB/std/os/linux/bpf/btf.zig	/encoding: enum(u4) {$/;"	field
encodingIndex	$ZIGLIB/std/macho.zig	/encodingIndex: u8/;"	field
encoding_type	$ZIGLIB/std/crypto/pcurves/secp256k1.zig	/const encoding_type = s[0]/;"	constant
encodingsCount	$ZIGLIB/std/macho.zig	/encodingsCount: u16/;"	field
encodingsPageOffset	$ZIGLIB/std/macho.zig	/encodingsPageOffset: u16/;"	field
encrypt	$ZIGLIB/std/crypto/salsa20.zig	/pub fn encrypt(c: []u8, tag: *[tag_length]u8, m: []const u8, ad: []const u8, npub: [nonce_length]u8, k: [key_length]u8) void {$/;"	function
encryptLast	$ZIGLIB/std/crypto/aes/soft.zig	/pub inline fn encryptLast(block: Block, round_key: Block) Block {$/;"	function
encryptLastWide	$ZIGLIB/std/crypto/aes/soft.zig	/pub fn encryptLastWide(comptime count: usize, blocks: [count]Block, round_key: Block) [count]Block {$/;"	function
encryptParallel	$ZIGLIB/std/crypto/aes/soft.zig	/pub fn encryptParallel(comptime count: usize, blocks: [count]Block, round_keys: [count]Block) [count]Block {$/;"	function
encryptWide	$ZIGLIB/std/crypto/aes/soft.zig	/pub fn encryptWide(ctx: Self, comptime count: usize, dst: *[16 * count]u8, src: *const [16 * count]u8) void {$/;"	function
encrypted_amt	$ZIGLIB/std/crypto/tls/Client.zig	/const encrypted_amt = iovecs_buf[i].iov_len/;"	constant
encrypted_content_len	$ZIGLIB/std/crypto/tls/Client.zig	/const encrypted_content_len = @intCast(u16, @min($/;"	constant
encrypted_extensions	$ZIGLIB/std/crypto/tls/Client.zig	/encrypted_extensions/;"	field
endArray	$ZIGLIB/std/json/write_stream.zig	/pub fn endArray(self: *Self) !void {$/;"	function
endObject	$ZIGLIB/std/json/write_stream.zig	/pub fn endObject(self: *Self) !void {$/;"	function
end_addr	$ZIGLIB/std/dwarf.zig	/const end_addr = try in.readInt(usize, di.endian)/;"	constant
end_address	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/end_address: u64 align(1)/;"	field
end_bit	$ZIGLIB/std/bit_set.zig	/const end_bit = @truncate(ShiftInt, range.end)/;"	constant
end_block_marker	$ZIGLIB/std/compress/deflate/deflate_const.zig	/^pub const end_block_marker = 256/;"	constant
end_byte	$ZIGLIB/std/packed_int_array.zig	/const end_byte = (bit_index + (length * int_bits) + 7) \/ 8/;"	constant
end_code	$ZIGLIB/std/os/linux.zig	/end_code: u64/;"	field
end_data	$ZIGLIB/std/os/linux.zig	/end_data: u64/;"	field
end_expr	$ZIGLIB/std/zig/Parse.zig	/const end_expr = try p.parseExpr()/;"	constant
end_i	$ZIGLIB/std/process.zig	/var end_i: usize = line_i/;"	variable
end_index	$ZIGLIB/std/zig/system/linux.zig	/const end_index = mem.indexOfAny(u8, value, ", ") orelse value.len/;"	constant
end_ix	$ZIGLIB/std/unicode.zig	/var end_ix = original_i/;"	variable
end_marker	$ZIGLIB/std/crypto/Certificate/Bundle.zig	/const end_marker = "-----END CERTIFICATE-----"/;"	constant
end_mask_index	$ZIGLIB/std/bit_set.zig	/const end_mask_index = maskIndex(range.end)/;"	constant
end_of_early_data	$ZIGLIB/std/crypto/tls.zig	/end_of_early_data = 5/;"	field
end_of_host	$ZIGLIB/std/Uri.zig	/var end_of_host: usize = authority.len/;"	variable
end_of_list	$ZIGLIB/std/dwarf.zig	/pub const end_of_list = 0x00/;"	constant
end_offset	$ZIGLIB/std/zig/Ast.zig	/var end_offset: TokenIndex = 0/;"	variable
end_opcode	$ZIGLIB/std/Build/CheckObjectStep.zig	/const end_opcode = try std.leb.readULEB128(u8, reader)/;"	constant
end_pos	$ZIGLIB/std/compress/deflate/dict_decoder.zig	/var end_pos = dst_pos + length/;"	variable
end_ptr	$ZIGLIB/std/fs/watch.zig	/const end_ptr = ptr + bytes_transferred/;"	constant
end_reserved	$ZIGLIB/std/crypto/Certificate/Bundle.zig	/const end_reserved = @intCast(u32, cb.bytes.items.len + decoded_size_upper_bound)/;"	constant
end_row	$ZIGLIB/std/compress/lzma/vec2d.zig	/const end_row = try math.add(usize, start_row, self.cols)/;"	constant
end_sequence	$ZIGLIB/std/dwarf.zig	/pub const end_sequence = 0x01/;"	constant
end_with_sep	$ZIGLIB/std/fs/path.zig	/const end_with_sep = switch (result.items[result.items.len - 1]) {$/;"	constant
endian	$ZIGLIB/std/target.zig	/pub fn endian(arch: Arch) std.builtin.Endian {$/;"	function
endianSwap	$ZIGLIB/std/crypto/xoodoo.zig	/pub fn endianSwap(self: *State) void {$/;"	function
endianSwapPartial	$ZIGLIB/std/crypto/xoodoo.zig	/pub fn endianSwapPartial(self: *State, from: usize, to: usize) void {$/;"	function
endian_mask	$ZIGLIB/std/math/big/int.zig	/const endian_mask: usize = @sizeOf(Limb) - 1/;"	constant
endian_swap	$ZIGLIB/std/os/linux/bpf.zig	/fn endian_swap(endian: std.builtin.Endian, comptime size: Size, dst: Reg) Insn {$/;"	function
endianity	$ZIGLIB/std/dwarf/AT.zig	/^pub const endianity = 0x65/;"	constant
endsWith	$ZIGLIB/std/mem.zig	/^pub fn endsWith(comptime T: type, haystack: []const T, needle: []const T) bool {$/;"	function
endsWithIgnoreCase	$ZIGLIB/std/ascii.zig	/^pub fn endsWithIgnoreCase(haystack: []const u8, needle: []const u8) bool {$/;"	function
ends_with_slash	$ZIGLIB/std/fs/path.zig	/const ends_with_slash = result.items[result.items.len - 1] == '\/'/;"	constant
enhanced_dat_2	$ZIGLIB/std/target/s390x.zig	/enhanced_dat_2/;"	field
enhanced_sort	$ZIGLIB/std/target/s390x.zig	/enhanced_sort/;"	field
enqcmd	$ZIGLIB/std/target/x86.zig	/enqcmd/;"	field
enroll_certtype	$ZIGLIB/std/crypto/Certificate.zig	/enroll_certtype/;"	field
ensure	$ZIGLIB/std/crypto/tls.zig	/pub fn ensure(d: *Decoder, amt: usize) !void {$/;"	function
ensureAddCapacity	$ZIGLIB/std/math/big/int.zig	/pub fn ensureAddCapacity(r: *Managed, a: Const, b: Const) !void {$/;"	function
ensureAddScalarCapacity	$ZIGLIB/std/math/big/int.zig	/pub fn ensureAddScalarCapacity(r: *Managed, a: Const, scalar: anytype) !void {$/;"	function
ensureCapacity	$ZIGLIB/std/math/big/int.zig	/pub fn ensureCapacity(self: *Managed, capacity: usize) !void {$/;"	function
ensureIndexer	$ZIGLIB/std/enums.zig	/^pub fn ensureIndexer(comptime T: type) void {$/;"	function
ensureLength	$ZIGLIB/compiler_rt/emutls.zig	/pub fn ensureLength(self: *ObjectArray, new_len: usize) *ObjectArray {$/;"	function
ensureMulCapacity	$ZIGLIB/std/math/big/int.zig	/pub fn ensureMulCapacity(rma: *Managed, a: Const, b: Const) !void {$/;"	function
ensureTotalCapacity	$ZIGLIB/std/priority_queue.zig	/pub fn ensureTotalCapacity(self: *Self, new_capacity: usize) !void {$/;"	function
ensureTotalCapacityContext	$ZIGLIB/std/hash_map.zig	/pub fn ensureTotalCapacityContext(self: *Self, allocator: Allocator, new_size: Size, ctx: Context) Allocator.Error!void {$/;"	function
ensureTotalCapacityPrecise	$ZIGLIB/std/array_list.zig	/pub fn ensureTotalCapacityPrecise(self: *Self, new_capacity: usize) Allocator.Error!void {$/;"	function
ensureTwosCompCapacity	$ZIGLIB/std/math/big/int.zig	/pub fn ensureTwosCompCapacity(r: *Managed, bit_count: usize) !void {$/;"	function
ensureUnusedCapacity	$ZIGLIB/std/priority_queue.zig	/pub fn ensureUnusedCapacity(self: *Self, additional_count: usize) !void {$/;"	function
ensureUnusedCapacityContext	$ZIGLIB/std/hash_map.zig	/pub fn ensureUnusedCapacityContext(self: *Self, allocator: Allocator, additional_size: Size, ctx: Context) Allocator.Error!void {$/;"	function
ensym	$ZIGLIB/std/debug.zig	/ensym/;"	field
enter	$ZIGLIB/std/os/linux/io_uring.zig	/pub fn enter(self: *IO_Uring, to_submit: u32, min_complete: u32, flags: u32) !u32 {$/;"	function
entitlements	$ZIGLIB/std/Build/CompileStep.zig	/^entitlements: ?[]const u8 = null/;"	field
entity	$ZIGLIB/std/c/solaris.zig	/entity: i32/;"	field
entries	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/var entries = (self.length - 4) \/ @sizeOf(u32)/;"	variable
entrustVersInfo	$ZIGLIB/std/crypto/Certificate.zig	/entrustVersInfo/;"	field
entry	$ZIGLIB/std/zig/system/windows.zig	/const entry = @ptrCast([*]align(1) const u8, table[i + 1].EntryContext)/;"	constant
entryCount	$ZIGLIB/std/macho.zig	/entryCount: u16/;"	field
entryFn	$ZIGLIB/std/Thread.zig	/fn entryFn(raw_ptr: windows.PVOID) callconv(.C) windows.DWORD {$/;"	function
entryPageOffset	$ZIGLIB/std/macho.zig	/entryPageOffset: u16/;"	field
entry_cap	$ZIGLIB/std/array_hash_map.zig	/const entry_cap = self.entries.capacity/;"	constant
entry_index	$ZIGLIB/std/array_hash_map.zig	/var entry_index = @intCast(I, i)/;"	variable
entry_kind	$ZIGLIB/std/fs.zig	/const entry_kind = switch (statmode) {$/;"	constant
entry_node	$ZIGLIB/std/Thread/Futex.zig	/const entry_node = entry.node orelse {$/;"	constant
entry_number	$ZIGLIB/std/os/linux/x86.zig	/entry_number: u32/;"	field
entry_pc	$ZIGLIB/std/dwarf/AT.zig	/^pub const entry_pc = 0x52/;"	constant
entry_point	$ZIGLIB/std/dwarf/TAG.zig	/^pub const entry_point = 0x03/;"	constant
entry_point_command	$ZIGLIB/std/macho.zig	/^pub const entry_point_command = extern struct {$/;"	struct
entry_size	$ZIGLIB/std/fs.zig	/const entry_size = @sizeOf(w.dirent_t)/;"	constant
entry_symbol_name	$ZIGLIB/std/Build/CompileStep.zig	/^entry_symbol_name: ?[]const u8 = null/;"	field
entry_value	$ZIGLIB/std/dwarf/OP.zig	/^pub const entry_value = 0xa3/;"	constant
entryoff	$ZIGLIB/std/macho.zig	/entryoff: u64 = 0/;"	field
enum	$ZIGLIB/std/os/linux/bpf/btf.zig	/@"enum"/;"	field
enum3	$ZIGLIB/std/fmt/errol/enum3.zig	/pub const enum3 = [_]u64{$/;"	constant
enum3_data	$ZIGLIB/std/fmt/errol/enum3.zig	/^pub const enum3_data = [_]Slab{$/;"	constant
enum64	$ZIGLIB/std/os/linux/bpf/btf.zig	/enum64/;"	field
enumDecls	$ZIGLIB/std/meta.zig	/var enumDecls: [fieldInfos.len]std.builtin.Type.EnumField = undefined/;"	variable
enumFields	$ZIGLIB/std/meta.zig	/var enumFields: [field_infos.len]std.builtin.Type.EnumField = undefined/;"	variable
enumValue	$ZIGLIB/std/rand.zig	/pub inline fn enumValue(r: Random, comptime EnumType: type) EnumType {$/;"	function
enumValueWithIndex	$ZIGLIB/std/rand.zig	/pub fn enumValueWithIndex(r: Random, comptime EnumType: type, comptime Index: type) EnumType {$/;"	function
enum_array	$ZIGLIB/std/crypto/tls.zig	/^pub inline fn enum_array(comptime E: type, comptime tags: []const E) [2 + @sizeOf(E) * tags.len]u8 {$/;"	function
enum_class	$ZIGLIB/std/dwarf/AT.zig	/^pub const enum_class = 0x6d/;"	constant
enum_literal	$ZIGLIB/std/zig/Ast.zig	/enum_literal/;"	field
enum_options	$ZIGLIB/std/Build.zig	/enum_options: ?[]const []const u8/;"	field
enum_tag_expr	$ZIGLIB/std/zig/Parse.zig	/const enum_tag_expr = try p.expectExpr()/;"	constant
enum_token	$ZIGLIB/std/zig/Ast.zig	/enum_token: ?TokenIndex/;"	field
enum_value	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/const enum_value = std.meta.stringToEnum(DevicePathType, ufield.name)/;"	constant
enumeration_type	$ZIGLIB/std/dwarf/TAG.zig	/^pub const enumeration_type = 0x04/;"	constant
enumerator	$ZIGLIB/std/dwarf/TAG.zig	/^pub const enumerator = 0x28/;"	constant
env_buf	$ZIGLIB/std/child_process.zig	/const env_buf = try arena.allocSentinel(u8, pair.key_ptr.len + pair.value_ptr.len + 1, 0)/;"	constant
env_count	$ZIGLIB/std/start.zig	/var env_count: usize = 0/;"	variable
env_end	$ZIGLIB/std/os/linux.zig	/env_end: u64/;"	field
env_map	$ZIGLIB/std/child_process.zig	/env_map: ?*const EnvMap = null/;"	field
env_start	$ZIGLIB/std/os/linux.zig	/env_start: u64/;"	field
environ	$ZIGLIB/std/process.zig	/var environ = try allocator.alloc([*:0]u8, environ_count)/;"	variable
environ_buf	$ZIGLIB/std/process.zig	/var environ_buf = try allocator.alloc(u8, environ_buf_size)/;"	variable
environ_buf_size	$ZIGLIB/std/process.zig	/var environ_buf_size: usize = undefined/;"	variable
environ_count	$ZIGLIB/std/process.zig	/var environ_count: usize = undefined/;"	variable
environ_get_ret	$ZIGLIB/std/process.zig	/const environ_get_ret = os.wasi.environ_get(environ.ptr, environ_buf.ptr)/;"	constant
environ_sizes_get_ret	$ZIGLIB/std/process.zig	/const environ_sizes_get_ret = os.wasi.environ_sizes_get(&environ_count, &environ_buf_size)/;"	constant
envmap	$ZIGLIB/std/process.zig	/var envmap = getEnvMap(allocator) catch return error.OutOfMemory/;"	variable
envp	$ZIGLIB/std/start.zig	/const envp = @ptrCast([*][*:0]u8, envp_optional)[0..envp_count]/;"	constant
envp_buf	$ZIGLIB/std/process.zig	/const envp_buf = try child_process.createNullDelimitedEnvMap(arena, m)/;"	constant
envp_count	$ZIGLIB/std/start.zig	/var envp_count: usize = 0/;"	variable
envp_optional	$ZIGLIB/std/start.zig	/const envp_optional = @ptrCast([*:null]?[*:0]u8, @alignCast(@alignOf(usize), argv + argc + 1))/;"	constant
envp_ptr	$ZIGLIB/std/child_process.zig	/const envp_ptr = if (maybe_envp_buf) |envp_buf| envp_buf.ptr else null/;"	constant
eof_info	$ZIGLIB/std/os.zig	/var eof_info = windows.FILE_END_OF_FILE_INFORMATION{$/;"	variable
ep9312	$ZIGLIB/std/target/arm.zig	/pub const ep9312 = CpuModel{$/;"	constant
epoch	$ZIGLIB/std/Thread/Condition.zig	/var epoch = self.epoch.load(.Acquire)/;"	variable
epoch_adj	$ZIGLIB/std/time.zig	/const epoch_adj = epoch.windows * (ns_per_s \/ 100)/;"	constant
epoch_day	$ZIGLIB/std/time/epoch.zig	/const epoch_day = epoch_seconds.getEpochDay()/;"	constant
epoch_seconds	$ZIGLIB/std/time/epoch.zig	/const epoch_seconds = EpochSeconds{ .secs = secs }/;"	constant
epoch_year	$ZIGLIB/std/time/epoch.zig	/^pub const epoch_year = 1970/;"	constant
epoll_create	$ZIGLIB/std/os/linux/syscalls.zig	/epoll_create = Linux + 248/;"	field
epoll_create1	$ZIGLIB/std/os/linux/syscalls.zig	/epoll_create1 = Linux + 326/;"	field
epoll_ctl	$ZIGLIB/std/os/linux/syscalls.zig	/epoll_ctl = Linux + 249/;"	field
epoll_ctl_old	$ZIGLIB/std/os/linux/syscalls.zig	/epoll_ctl_old = 214/;"	field
epoll_data	$ZIGLIB/std/os/linux.zig	/^pub const epoll_data = extern union {$/;"	union
epoll_event	$ZIGLIB/std/os/linux.zig	/^pub const epoll_event = extern struct {$/;"	struct
epoll_events	$ZIGLIB/std/event/loop.zig	/const epoll_events = os.linux.EPOLL.ONESHOT | os.linux.EPOLL.IN | os.linux.EPOLL.OUT |$/;"	constant
epoll_op	$ZIGLIB/std/event/loop.zig	/epoll_op: u32/;"	field
epoll_pwait	$ZIGLIB/std/os/linux/syscalls.zig	/epoll_pwait = Linux + 313/;"	field
epoll_pwait2	$ZIGLIB/std/os/linux/syscalls.zig	/epoll_pwait2 = Linux + 441/;"	field
epoll_wait	$ZIGLIB/std/os/linux/syscalls.zig	/epoll_wait = Linux + 250/;"	field
epoll_wait_old	$ZIGLIB/std/os/linux/syscalls.zig	/epoll_wait_old = 215/;"	field
epollfd	$ZIGLIB/std/event/loop.zig	/epollfd: i32/;"	field
eps_value	$ZIGLIB/std/testing.zig	/const eps_value = comptime math.epsilon(T)/;"	constant
epsilon	$ZIGLIB/std/math/tanh.zig	/const epsilon = 0.000001/;"	constant
eqAbs	$ZIGLIB/std/math/big/int.zig	/pub fn eqAbs(a: Managed, b: Managed) bool {$/;"	function
eqZero	$ZIGLIB/std/math/big/int.zig	/pub fn eqZero(self: Mutable) bool {$/;"	function
eq_space	$ZIGLIB/std/zig/render.zig	/const eq_space: Space = if (tree.tokensOnSameLine(eq_token, eq_token + 1)) .space else .newline/;"	constant
eq_token	$ZIGLIB/std/zig/render.zig	/const eq_token = tree.firstToken(var_decl.ast.init_node) - 1/;"	constant
eqlIgnoreCase	$ZIGLIB/std/ascii.zig	/^pub fn eqlIgnoreCase(a: []const u8, b: []const u8) bool {$/;"	function
eqlIgnoreCaseWTF16	$ZIGLIB/std/os/windows.zig	/^pub fn eqlIgnoreCaseWTF16(a: []const u16, b: []const u16) bool {$/;"	function
eqlString	$ZIGLIB/std/hash_map.zig	/^pub fn eqlString(a: []const u8, b: []const u8) bool {$/;"	function
eql_signature	$ZIGLIB/std/hash_map.zig	/const eql_signature = "fn (self, " ++ @typeName(PseudoKey) ++ ", " ++$/;"	constant
equal	$ZIGLIB/std/zig/tokenizer.zig	/equal/;"	field
equal_angle_bracket_right	$ZIGLIB/std/zig/tokenizer.zig	/equal_angle_bracket_right/;"	field
equal_equal	$ZIGLIB/std/zig/tokenizer.zig	/equal_equal/;"	field
equivalent	$ZIGLIB/std/crypto/pcurves/secp256k1/scalar.zig	/pub fn equivalent(a: Scalar, b: Scalar) bool {$/;"	function
ermsb	$ZIGLIB/std/target/x86.zig	/ermsb/;"	field
err_code	$ZIGLIB/std/os.zig	/var err_code: i32 = undefined/;"	variable
err_int	$ZIGLIB/std/child_process.zig	/const err_int = try readIntFd(err_pipe[0])/;"	constant
err_invalid_eql_signature	$ZIGLIB/std/hash_map.zig	/const err_invalid_eql_signature = prefix ++ @typeName(Context) ++ ".eql must be " ++ eql_signature ++$/;"	constant
err_invalid_hash_signature	$ZIGLIB/std/hash_map.zig	/const err_invalid_hash_signature = prefix ++ @typeName(Context) ++ ".hash must be " ++ hash_signature ++$/;"	constant
err_mask	$ZIGLIB/std/child_process.zig	/const err_mask = os.POLL.ERR | os.POLL.NVAL | os.POLL.HUP/;"	constant
err_pipe	$ZIGLIB/std/child_process.zig	/err_pipe: ?if (builtin.os.tag == .windows) void else [2]os.fd_t/;"	field
errdefer	$ZIGLIB/std/zig/Ast.zig	/@"errdefer"/;"	field
errno	$ZIGLIB/std/os/ptrace.zig	/^const errno = system.getErrno/;"	constant
errno_t	$ZIGLIB/std/os/wasi.zig	/^pub const errno_t = enum(u16) {$/;"	enum
errol3	$ZIGLIB/std/fmt/errol.zig	/^pub fn errol3(value: f64, buffer: []u8) FloatDecimal {$/;"	function
errol3u	$ZIGLIB/std/fmt/errol.zig	/^fn errol3u(val: f64, buffer: []u8) FloatDecimal {$/;"	function
errolFixed	$ZIGLIB/std/fmt/errol.zig	/^fn errolFixed(val: f64, buffer: []u8) FloatDecimal {$/;"	function
errolInt	$ZIGLIB/std/fmt/errol.zig	/^fn errolInt(val: f64, buffer: []u8) FloatDecimal {$/;"	function
errolSlow	$ZIGLIB/std/fmt/errol.zig	/^fn errolSlow(val: f64, buffer: []u8) FloatDecimal {$/;"	function
error	$ZIGLIB/std/os/wasi.zig	/@"error": errno_t/;"	field
errorOffset	$ZIGLIB/std/zig/Ast.zig	/^pub fn errorOffset(tree: Ast, parse_error: Error) u32 {$/;"	function
error_code	$ZIGLIB/std/os/linux/arm-eabi.zig	/error_code: usize/;"	field
error_set	$ZIGLIB/std/builtin.zig	/error_set: type/;"	field
error_set_decl	$ZIGLIB/std/zig/Ast.zig	/error_set_decl/;"	field
error_token	$ZIGLIB/std/zig/render.zig	/const error_token = main_tokens[node]/;"	constant
error_union	$ZIGLIB/std/zig/Ast.zig	/error_union/;"	field
error_value	$ZIGLIB/std/zig/Ast.zig	/error_value/;"	field
errorcheck	$ZIGLIB/std/c/netbsd.zig	/errorcheck: padded_pthread_spin_t = 0/;"	field
errors	$ZIGLIB/std/zig/Parse.zig	/^errors: std.ArrayListUnmanaged(AstError)/;"	field
esc_offset	$ZIGLIB/std/zig/render.zig	/var esc_offset = contents_i/;"	variable
escapeString	$ZIGLIB/std/Uri.zig	/^pub fn escapeString(allocator: std.mem.Allocator, input: []const u8) error{OutOfMemory}![]const u8 {$/;"	function
escape_char_index	$ZIGLIB/std/zig/string_literal.zig	/const escape_char_index = index + 1/;"	constant
escape_codes	$ZIGLIB/std/debug.zig	/escape_codes/;"	field
escape_sequence	$ZIGLIB/std/zig/render.zig	/const escape_sequence = bytes[old_pos..pos]/;"	constant
escape_solidus	$ZIGLIB/std/json.zig	/escape_solidus: bool = false/;"	field
escape_type	$ZIGLIB/std/json.zig	/const escape_type = encoded[j + 1]/;"	constant
escape_unicode	$ZIGLIB/std/json.zig	/escape_unicode: bool = false/;"	field
escaped	$ZIGLIB/std/Build/CompileStep.zig	/var escaped = try ArrayList(u8).initCapacity(args_arena.allocator(), arg.len + 1)/;"	variable
escaped_args	$ZIGLIB/std/Build/CompileStep.zig	/var escaped_args = try ArrayList([]const u8).initCapacity(args_arena.allocator(), args_to_escape.len)/;"	variable
escapes	$ZIGLIB/std/json.zig	/escapes: StringEscapes/;"	field
esize	$ZIGLIB/std/math/big/rational.zig	/const esize = math.floatExponentBits(T)/;"	constant
establisher_frame	$ZIGLIB/std/debug.zig	/var establisher_frame: u64 = undefined/;"	variable
estimated_node_count	$ZIGLIB/std/zig/Ast.zig	/const estimated_node_count = (tokens.len + 2) \/ 2/;"	constant
estimated_token_count	$ZIGLIB/std/zig/Ast.zig	/const estimated_token_count = source.len \/ 8/;"	constant
eu_inst	$ZIGLIB/std/fmt.zig	/const eu_inst = EU{ .float = 321.123 }/;"	constant
eu_result	$ZIGLIB/std/fmt.zig	/const eu_result = try bufPrint(buf[0..], "{}", .{eu_inst})/;"	constant
ev_consumed	$ZIGLIB/std/fs/watch.zig	/var ev_consumed = false/;"	variable
even	$ZIGLIB/std/bit_set.zig	/var even = try DynamicBitSetUnmanaged.initEmpty(allocator, size)/;"	variable
event	$ZIGLIB/std/time.zig	/var event: w.event_t = undefined/;"	variable
event_buf	$ZIGLIB/std/fs/watch.zig	/var event_buf: [4096]u8 align(@alignOf(windows.FILE_NOTIFY_INFORMATION)) = undefined/;"	variable
event_fd_node	$ZIGLIB/std/event/loop.zig	/const event_fd_node = @fieldParentPtr(ResumeNode.EventFd, "base", resume_node)/;"	constant
event_loop	$ZIGLIB/std/std.zig	/pub const event_loop: event.Loop.Instance = if (@hasDecl(options_override, "event_loop"))$/;"	constant
event_loop_mode	$ZIGLIB/std/std.zig	/pub const event_loop_mode: event.Loop.Mode = if (@hasDecl(options_override, "event_loop_mode"))$/;"	constant
event_notify_signal	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/pub const event_notify_signal: u32 = 0x00000200/;"	constant
event_notify_wait	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/pub const event_notify_wait: u32 = 0x00000100/;"	constant
event_runtime	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/pub const event_runtime: u32 = 0x40000000/;"	constant
event_signal_exit_boot_services	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/pub const event_signal_exit_boot_services: u32 = 0x00000201/;"	constant
event_signal_virtual_address_change	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/pub const event_signal_virtual_address_change: u32 = 0x00000202/;"	constant
event_t	$ZIGLIB/std/os/wasi.zig	/^pub const event_t = extern struct {$/;"	struct
event_timer	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/pub const event_timer: u32 = 0x80000000/;"	constant
evented	$ZIGLIB/std/io.zig	/evented/;"	field
eventfd	$ZIGLIB/std/os/linux/syscalls.zig	/eventfd = Linux + 319/;"	field
eventfd2	$ZIGLIB/std/os/linux/syscalls.zig	/eventfd2 = Linux + 325/;"	field
eventfd_node	$ZIGLIB/std/event/loop.zig	/const eventfd_node = &resume_stack_node.data/;"	constant
eventfd_resume_nodes	$ZIGLIB/std/event/loop.zig	/eventfd_resume_nodes: []std.atomic.Stack(ResumeNode.EventFd).Node/;"	field
eventfdreadwrite_t	$ZIGLIB/std/os/wasi.zig	/^pub const eventfdreadwrite_t = extern struct {$/;"	struct
eventlist	$ZIGLIB/std/event/loop.zig	/var eventlist: [1]os.Kevent = undefined/;"	variable
eventrwflags_t	$ZIGLIB/std/os/wasi.zig	/^pub const eventrwflags_t = u16/;"	constant
events	$ZIGLIB/std/os/windows/ws2_32.zig	/events: SHORT/;"	field
eventtype_t	$ZIGLIB/std/os/wasi.zig	/^pub const eventtype_t = u8/;"	constant
ex_expt	$ZIGLIB/std/math/complex/ldexp.zig	/var ex_expt: i32 = undefined/;"	variable
exact	$ZIGLIB/std/math/big/rational.zig	/var exact = !have_rem/;"	variable
exact_division_remainder	$ZIGLIB/std/builtin.zig	/pub const exact_division_remainder = "exact division produced remainder"/;"	constant
exact_tie	$ZIGLIB/std/math/ldexp.zig	/const exact_tie: bool = @ctz(repr) == shift - 1/;"	constant
example	$ZIGLIB/std/http/Client.zig	/const example =$/;"	constant
exception	$ZIGLIB/std/c/darwin/aarch64.zig	/exception: u32/;"	field
exception_address	$ZIGLIB/std/debug.zig	/const exception_address = @ptrToInt(info.ExceptionRecord.ExceptionAddress)/;"	constant
exception_behavior_array_t	$ZIGLIB/std/c/darwin.zig	/^pub const exception_behavior_array_t = [*]exception_behavior_t/;"	constant
exception_behavior_t	$ZIGLIB/std/c/darwin.zig	/^pub const exception_behavior_t = c_uint/;"	constant
exception_data_t	$ZIGLIB/std/c/darwin.zig	/^pub const exception_data_t = ?*mach_exception_data_type_t/;"	constant
exception_data_type_t	$ZIGLIB/std/c/darwin.zig	/^pub const exception_data_type_t = integer_t/;"	constant
exception_flavor_array_t	$ZIGLIB/std/c/darwin.zig	/^pub const exception_flavor_array_t = [*]thread_state_flavor_t/;"	constant
exception_handler_array_t	$ZIGLIB/std/c/darwin.zig	/^pub const exception_handler_array_t = [*]exception_handler_t/;"	constant
exception_handler_t	$ZIGLIB/std/c/darwin.zig	/^pub const exception_handler_t = mach_port_t/;"	constant
exception_handling	$ZIGLIB/std/target/wasm.zig	/exception_handling/;"	field
exception_mask_array_t	$ZIGLIB/std/c/darwin.zig	/^pub const exception_mask_array_t = [*]exception_mask_t/;"	constant
exception_mask_t	$ZIGLIB/std/c/darwin.zig	/^pub const exception_mask_t = c_uint/;"	constant
exception_port_array_t	$ZIGLIB/std/c/darwin.zig	/^pub const exception_port_array_t = exception_handler_array_t/;"	constant
exception_port_t	$ZIGLIB/std/c/darwin.zig	/^pub const exception_port_t = exception_handler_t/;"	constant
exception_state	$ZIGLIB/std/c/darwin/x86_64.zig	/^pub const exception_state = extern struct {$/;"	struct
exception_type_t	$ZIGLIB/std/c/darwin.zig	/^pub const exception_type_t = c_int/;"	constant
exclude_callchain_kernel	$ZIGLIB/std/os/linux.zig	/exclude_callchain_kernel: bool = false/;"	field
exclude_callchain_user	$ZIGLIB/std/os/linux.zig	/exclude_callchain_user: bool = false/;"	field
exclude_extensions	$ZIGLIB/std/Build/InstallDirStep.zig	/exclude_extensions: []const []const u8 = &.{}/;"	field
exclude_guest	$ZIGLIB/std/os/linux.zig	/exclude_guest: bool = false/;"	field
exclude_host	$ZIGLIB/std/os/linux.zig	/exclude_host: bool = false/;"	field
exclude_hv	$ZIGLIB/std/os/linux.zig	/exclude_hv: bool = false/;"	field
exclude_idle	$ZIGLIB/std/os/linux.zig	/exclude_idle: bool = false/;"	field
exclude_kernel	$ZIGLIB/std/os/linux.zig	/exclude_kernel: bool = false/;"	field
exclude_user	$ZIGLIB/std/os/linux.zig	/exclude_user: bool = false/;"	field
exclusive	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/exclusive: bool = false/;"	field
exeFileExt	$ZIGLIB/std/zig/CrossTarget.zig	/^pub fn exeFileExt(self: CrossTarget) [:0]const u8 {$/;"	function
exeFileExtSimple	$ZIGLIB/std/target.zig	/pub fn exeFileExtSimple(cpu_arch: Cpu.Arch, os_tag: Os.Tag) [:0]const u8 {$/;"	function
exe_dir	$ZIGLIB/std/Build.zig	/exe_dir: ?[]const u8 = null/;"	field
exe_extension	$ZIGLIB/std/Build.zig	/const exe_extension = @as(CrossTarget, .{}).exeFileExt()/;"	constant
exe_fd	$ZIGLIB/std/os/linux.zig	/exe_fd: u32/;"	field
exe_list	$ZIGLIB/std/Build.zig	/var exe_list = [_][]const u8{ self.install_path, "bin" }/;"	variable
exe_step	$ZIGLIB/std/Build/CheckObjectStep.zig	/const exe_step = self.step.dependencies.items[dependencies_len - 1]/;"	constant
exe_tests	$ZIGLIB/init-exe/build.zig	/const exe_tests = b.addTest(.{$/;"	constant
exec	$ZIGLIB/std/child_process.zig	/pub fn exec(args: struct {$/;"	function
execAllowFail	$ZIGLIB/std/Build.zig	/^pub fn execAllowFail($/;"	function
execFromStep	$ZIGLIB/std/Build.zig	/^pub fn execFromStep(self: *Build, argv: []const []const u8, src_step: ?*Step) ![]u8 {$/;"	function
execPkgConfigList	$ZIGLIB/std/Build/CompileStep.zig	/^fn execPkgConfigList(self: *std.Build, out_code: *u8) (PkgConfigError || ExecError)![]const PkgConfigPkg {$/;"	function
execSegBase	$ZIGLIB/std/macho.zig	/execSegBase: u64/;"	field
execSegFlags	$ZIGLIB/std/macho.zig	/execSegFlags: u64/;"	field
execSegLimit	$ZIGLIB/std/macho.zig	/execSegLimit: u64/;"	field
exec_cmd_args	$ZIGLIB/std/Build/CompileStep.zig	/^exec_cmd_args: ?[]const ?[]const u8/;"	field
executable_bit_only	$ZIGLIB/std/tar.zig	/executable_bit_only/;"	field
executable_path	$ZIGLIB/std/Build/RunStep.zig	/const executable_path = artifact.installed_path orelse artifact.getOutputSource().getPath(self.builder)/;"	constant
execute	$ZIGLIB/std/fs/file.zig	/execute: ?bool = null/;"	field
execute_only	$ZIGLIB/std/target/arm.zig	/execute_only/;"	field
execution_hint	$ZIGLIB/std/target/s390x.zig	/execution_hint/;"	field
execv	$ZIGLIB/std/process.zig	/^pub fn execv(allocator: Allocator, argv: []const []const u8) ExecvError {$/;"	function
execve	$ZIGLIB/std/process.zig	/^pub fn execve($/;"	function
execveZ	$ZIGLIB/std/os.zig	/^pub fn execveZ($/;"	function
execveat	$ZIGLIB/std/os/linux/syscalls.zig	/execveat = Linux + 356/;"	field
execvpeZ	$ZIGLIB/std/os.zig	/^pub fn execvpeZ($/;"	function
execvpeZ_expandArg0	$ZIGLIB/std/os.zig	/^pub fn execvpeZ_expandArg0($/;"	function
existing_amt	$ZIGLIB/std/crypto/tls.zig	/const existing_amt = d.cap - d.idx/;"	constant
exit	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/exit: *const fn (image_handle: Handle, exit_status: Status, exit_data_size: usize, exit_data: ?*const anyopaque) callconv(.C) Status/;"	field
exit2	$ZIGLIB/std/start.zig	/^fn exit2(code: usize) noreturn {$/;"	function
exitBootServices	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/exitBootServices: *const fn (image_handle: Handle, map_key: usize) callconv(.C) Status/;"	field
exit_code	$ZIGLIB/std/child_process.zig	/var exit_code: windows.DWORD = undefined/;"	variable
exit_data	$ZIGLIB/std/builtin.zig	/var exit_data = ExitData.create_exit_data(msg, &exit_size) catch null/;"	variable
exit_group	$ZIGLIB/std/os/linux/syscalls.zig	/exit_group = Linux + 246/;"	field
exit_size	$ZIGLIB/std/builtin.zig	/var exit_size: usize = 0/;"	variable
exitcode_t	$ZIGLIB/std/os/wasi.zig	/^pub const exitcode_t = u32/;"	constant
exits	$ZIGLIB/std/os/plan9.zig	/^pub fn exits(status: ?[*:0]const u8) void {$/;"	function
exp2	$ZIGLIB/std/math.zig	/^pub inline fn exp2(value: anytype) @TypeOf(value) {$/;"	function
exp2dt	$ZIGLIB/compiler_rt/exp2.zig	/^const exp2dt = [_]f64{$/;"	constant
exp2f	$ZIGLIB/compiler_rt/exp2.zig	/^pub fn exp2f(x: f32) callconv(.C) f32 {$/;"	function
exp2ft	$ZIGLIB/compiler_rt/exp2.zig	/^const exp2ft = [_]f64{$/;"	constant
exp2l	$ZIGLIB/compiler_rt/exp2.zig	/^pub fn exp2l(x: c_longdouble) callconv(.C) c_longdouble {$/;"	function
exp2q	$ZIGLIB/compiler_rt/exp2.zig	/^pub fn exp2q(x: f128) callconv(.C) f128 {$/;"	function
exp32	$ZIGLIB/std/math/complex/exp.zig	/^fn exp32(z: Complex(f32)) Complex(f32) {$/;"	function
exp64	$ZIGLIB/std/math/complex/exp.zig	/^fn exp64(z: Complex(f64)) Complex(f64) {$/;"	function
expA	$ZIGLIB/compiler_rt/fmod.zig	/var expA = @intCast(i32, (aPtr_u16[exp_and_sign_index] & 0x7fff))/;"	variable
expB	$ZIGLIB/compiler_rt/fmod.zig	/var expB = @intCast(i32, (bPtr_u16[exp_and_sign_index] & 0x7fff))/;"	variable
exp_and_sign_index	$ZIGLIB/compiler_rt/fmod.zig	/const exp_and_sign_index = comptime switch (builtin.target.cpu.arch.endian()) {$/;"	constant
exp_bias	$ZIGLIB/std/fmt/parse_float/convert_hex.zig	/const exp_bias = min_exp - 1/;"	constant
exp_bits	$ZIGLIB/std/math/big/int.zig	/var exp_bits = 32 - 1 - b_leading_zeros/;"	variable
exp_char_lower	$ZIGLIB/std/fmt/parse_float/parse.zig	/exp_char_lower: u8/;"	field
exp_dec	$ZIGLIB/std/crypto/aes.zig	/const exp_dec = [_]*const [32:0]u8{$/;"	constant
exp_enc	$ZIGLIB/std/crypto/aes.zig	/const exp_enc = [_]*const [32:0]u8{$/;"	constant
exp_f	$ZIGLIB/std/rand/ziggurat.zig	/^fn exp_f(x: f64) f64 {$/;"	function
exp_f_inv	$ZIGLIB/std/rand/ziggurat.zig	/^fn exp_f_inv(y: f64) f64 {$/;"	function
exp_mx	$ZIGLIB/std/math/complex/tanh.zig	/const exp_mx = @exp(-@fabs(x))/;"	constant
exp_num	$ZIGLIB/std/fmt/parse_float/decimal.zig	/var exp_num: i32 = 0/;"	variable
exp_number	$ZIGLIB/std/fmt/parse_float/parse.zig	/var exp_number: i64 = 0/;"	variable
exp_out	$ZIGLIB/std/crypto/chacha20.zig	/const exp_out = [_]u8{$/;"	constant
exp_overflow	$ZIGLIB/std/math/complex/exp.zig	/const exp_overflow = 0x42b17218/;"	constant
exp_r	$ZIGLIB/std/rand/ziggurat.zig	/^const exp_r = 7.69711747013104972/;"	constant
exp_v	$ZIGLIB/std/rand/ziggurat.zig	/^const exp_v = 0.0039496598225815571993/;"	constant
exp_value	$ZIGLIB/std/Build/CheckObjectStep.zig	/const exp_value = switch (act.expected.?.value) {$/;"	constant
exp_x	$ZIGLIB/std/math/complex/ldexp.zig	/const exp_x = frexp_exp64(z.re, &ex_expt)/;"	constant
exp_zero_case	$ZIGLIB/std/rand/ziggurat.zig	/^fn exp_zero_case(random: Random, _: f64) f64 {$/;"	function
exp_zeros	$ZIGLIB/std/math/big/int.zig	/const exp_zeros = @popCount(~b) - b_leading_zeros/;"	constant
expand	$ZIGLIB/std/os.zig	/expand/;"	field
expand0	$ZIGLIB/std/crypto/bcrypt.zig	/fn expand0(state: *State, key: []const u8) void {$/;"	function
expand128	$ZIGLIB/std/crypto/aes/armcrypto.zig	/fn expand128(t1: *Block) Self {$/;"	function
expand256	$ZIGLIB/std/crypto/aes/armcrypto.zig	/fn expand256(t1: *Block, t2: *Block) Self {$/;"	function
expandKey	$ZIGLIB/std/crypto/aes/soft.zig	/fn expandKey(key: [key_length]u8) Self {$/;"	function
expandStackSize	$ZIGLIB/std/start.zig	/^fn expandStackSize(phdrs: []elf.Phdr) void {$/;"	function
expandToCapacity	$ZIGLIB/std/array_list.zig	/pub fn expandToCapacity(self: *Self) void {$/;"	function
expand_arg0	$ZIGLIB/std/child_process.zig	/expand_arg0: Arg0Expand = .no_expand/;"	field
expand_fp_mlx	$ZIGLIB/std/target/arm.zig	/expand_fp_mlx/;"	field
expect	$ZIGLIB/std/testing.zig	/^pub fn expect(ok: bool) !void {$/;"	function
expectApproxEqAbs	$ZIGLIB/std/testing.zig	/^pub fn expectApproxEqAbs(expected: anytype, actual: @TypeOf(expected), tolerance: @TypeOf(expected)) !void {$/;"	function
expectApproxEqRel	$ZIGLIB/std/testing.zig	/^pub fn expectApproxEqRel(expected: anytype, actual: @TypeOf(expected), tolerance: @TypeOf(expected)) !void {$/;"	function
expectAsmExpr	$ZIGLIB/std/zig/Parse.zig	/^fn expectAsmExpr(p: *Parse) !Node.Index {$/;"	function
expectAssignExpr	$ZIGLIB/std/zig/Parse.zig	/^fn expectAssignExpr(p: *Parse) !Node.Index {$/;"	function
expectBlockExprStatement	$ZIGLIB/std/zig/Parse.zig	/^fn expectBlockExprStatement(p: *Parse) !Node.Index {$/;"	function
expectContainerField	$ZIGLIB/std/zig/Parse.zig	/^fn expectContainerField(p: *Parse) !Node.Index {$/;"	function
expectContent	$ZIGLIB/std/zig/system/darwin/macos.zig	/fn expectContent(self: *@This()) ![]const u8 {$/;"	function
expectEqual	$ZIGLIB/std/testing.zig	/^pub fn expectEqual(expected: anytype, actual: @TypeOf(expected)) !void {$/;"	function
expectEqualDeep	$ZIGLIB/std/testing.zig	/^pub fn expectEqualDeep(expected: anytype, actual: @TypeOf(expected)) !void {$/;"	function
expectEqualEnum	$ZIGLIB/std/meta.zig	/^fn expectEqualEnum(expected: anytype, actual: @TypeOf(expected)) !void {$/;"	function
expectEqualSentinel	$ZIGLIB/std/testing.zig	/^pub fn expectEqualSentinel(comptime T: type, comptime sentinel: T, expected: [:sentinel]const T, actual: [:sentinel]const T) !void {$/;"	function
expectEqualSlices	$ZIGLIB/std/testing.zig	/^pub fn expectEqualSlices(comptime T: type, expected: []const T, actual: []const T) !void {$/;"	function
expectEqualStrings	$ZIGLIB/std/testing.zig	/^pub fn expectEqualStrings(expected: []const u8, actual: []const u8) !void {$/;"	function
expectError	$ZIGLIB/std/testing.zig	/^pub fn expectError(expected_error: anyerror, actual_error_union: anytype) !void {$/;"	function
expectExpr	$ZIGLIB/std/zig/Parse.zig	/^fn expectExpr(p: *Parse) Error!Node.Index {$/;"	function
expectFieldInit	$ZIGLIB/std/zig/Parse.zig	/^fn expectFieldInit(p: *Parse) !Node.Index {$/;"	function
expectFmt	$ZIGLIB/std/testing.zig	/^pub fn expectFmt(expected: []const u8, comptime template: []const u8, args: anytype) !void {$/;"	function
expectIfStatement	$ZIGLIB/std/zig/Parse.zig	/^fn expectIfStatement(p: *Parse) !Node.Index {$/;"	function
expectParamDecl	$ZIGLIB/std/zig/Parse.zig	/^fn expectParamDecl(p: *Parse) !Node.Index {$/;"	function
expectPrefixExpr	$ZIGLIB/std/zig/Parse.zig	/^fn expectPrefixExpr(p: *Parse) Error!Node.Index {$/;"	function
expectPrimaryTypeExpr	$ZIGLIB/std/zig/Parse.zig	/^fn expectPrimaryTypeExpr(p: *Parse) !Node.Index {$/;"	function
expectSemicolon	$ZIGLIB/std/zig/Parse.zig	/^fn expectSemicolon(p: *Parse, error_tag: AstError.Tag, recoverable: bool) Error!void {$/;"	function
expectStatement	$ZIGLIB/std/zig/Parse.zig	/^fn expectStatement(p: *Parse, allow_defer_var: bool) !Node.Index {$/;"	function
expectStatementRecoverable	$ZIGLIB/std/zig/Parse.zig	/^fn expectStatementRecoverable(p: *Parse) Error!Node.Index {$/;"	function
expectStdErrEqual	$ZIGLIB/std/Build/RunStep.zig	/^pub fn expectStdErrEqual(self: *RunStep, bytes: []const u8) void {$/;"	function
expectStdOutEqual	$ZIGLIB/std/Build/RunStep.zig	/^pub fn expectStdOutEqual(self: *RunStep, bytes: []const u8) void {$/;"	function
expectStringEndsWith	$ZIGLIB/std/testing.zig	/^pub fn expectStringEndsWith(actual: []const u8, expected_ends_with: []const u8) !void {$/;"	function
expectStringStartsWith	$ZIGLIB/std/testing.zig	/^pub fn expectStringStartsWith(actual: []const u8, expected_starts_with: []const u8) !void {$/;"	function
expectSwitchExpr	$ZIGLIB/std/zig/Parse.zig	/^fn expectSwitchExpr(p: *Parse) !Node.Index {$/;"	function
expectTestDecl	$ZIGLIB/std/zig/Parse.zig	/^fn expectTestDecl(p: *Parse) !Node.Index {$/;"	function
expectTestDeclRecoverable	$ZIGLIB/std/zig/Parse.zig	/^fn expectTestDeclRecoverable(p: *Parse) error{OutOfMemory}!Node.Index {$/;"	function
expectToken	$ZIGLIB/std/zig/Parse.zig	/^fn expectToken(p: *Parse, tag: Token.Tag) Error!TokenIndex {$/;"	function
expectTokens	$ZIGLIB/std/c/tokenizer.zig	/^fn expectTokens(source: []const u8, expected_tokens: []const Token.Id) !void {$/;"	function
expectTopLevelDecl	$ZIGLIB/std/zig/Parse.zig	/^fn expectTopLevelDecl(p: *Parse) !Node.Index {$/;"	function
expectTopLevelDeclRecoverable	$ZIGLIB/std/zig/Parse.zig	/^fn expectTopLevelDeclRecoverable(p: *Parse) error{OutOfMemory}!Node.Index {$/;"	function
expectTypeExpr	$ZIGLIB/std/zig/Parse.zig	/^fn expectTypeExpr(p: *Parse) Error!Node.Index {$/;"	function
expectUsingNamespace	$ZIGLIB/std/zig/Parse.zig	/^fn expectUsingNamespace(p: *Parse) !Node.Index {$/;"	function
expectUsingNamespaceRecoverable	$ZIGLIB/std/zig/Parse.zig	/^fn expectUsingNamespaceRecoverable(p: *Parse) error{OutOfMemory}!Node.Index {$/;"	function
expect_exact	$ZIGLIB/std/Build/RunStep.zig	/expect_exact: []const u8/;"	field
expect_fn	$ZIGLIB/std/zig/Parse.zig	/var expect_fn: bool = false/;"	variable
expect_matches	$ZIGLIB/std/Build/RunStep.zig	/expect_matches: []const []const u8/;"	field
expect_opcode	$ZIGLIB/std/os/linux/bpf.zig	/^fn expect_opcode(code: u8, insn: Insn) !void {$/;"	function
expect_var_or_fn	$ZIGLIB/std/zig/Parse.zig	/var expect_var_or_fn: bool = false/;"	variable
expectation_failed	$ZIGLIB/std/http.zig	/expectation_failed = 417/;"	field
expected	$ZIGLIB/std/testing.zig	/expected: []const u8/;"	field
expected1	$ZIGLIB/std/crypto/xoodoo.zig	/const expected1 = [_]u8{ 51, 240, 163, 117, 43, 238, 62, 200, 114, 52, 79, 41, 48, 108, 150, 181, 24, 5, 252, 185, 235, 179, 28, 3, 116, 170, 36, 15, 232, 35, 116, 61, 110, 4, 109, 227, 91, 205, 0, 180, 179, 146, 112, 235, 96, 212, 206, 205 }/;"	constant
expected2	$ZIGLIB/std/crypto/xoodoo.zig	/const expected2 = [_]u8{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 108, 150, 181, 24, 5, 252, 185, 235, 179, 28, 3, 116, 170, 36, 15, 232, 35, 116, 61, 110, 4, 109, 227, 91, 205, 0, 180, 179, 146, 112, 235, 96, 212, 206, 205 }/;"	constant
expected3	$ZIGLIB/std/crypto/xoodoo.zig	/const expected3 = [_]u8{ 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 48, 108, 150, 181, 24, 5, 252, 185, 235, 179, 28, 3, 116, 170, 36, 15, 232, 35, 116, 61, 110, 4, 109, 227, 91, 205, 0, 180, 179, 146, 112, 235, 96, 212, 206, 205 }/;"	constant
expected4	$ZIGLIB/std/crypto/xoodoo.zig	/const expected4 = [_]u8{ 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 49, 109, 151, 180, 25, 4, 253, 184, 234, 178, 29, 2, 117, 171, 37, 14, 233, 34, 117, 60, 111, 5, 108, 226, 90, 204, 1, 181, 178, 147, 113, 234, 97, 213, 207, 204 }/;"	constant
expectedTag	$ZIGLIB/std/testing.zig	/const expectedTag = @as(Tag, expected)/;"	constant
expected_args_tuple_len	$ZIGLIB/std/testing.zig	/const expected_args_tuple_len = fn_args_fields.len - 1/;"	constant
expected_attach_type	$ZIGLIB/std/os/linux/bpf.zig	/expected_attach_type: u32/;"	field
expected_block	$ZIGLIB/std/zig/Ast.zig	/expected_block/;"	field
expected_block_or_assignment	$ZIGLIB/std/zig/Ast.zig	/expected_block_or_assignment/;"	field
expected_block_or_expr	$ZIGLIB/std/zig/Ast.zig	/expected_block_or_expr/;"	field
expected_block_or_field	$ZIGLIB/std/zig/Ast.zig	/expected_block_or_field/;"	field
expected_buffer	$ZIGLIB/std/atomic/queue.zig	/var expected_buffer: [1024]u8 = undefined/;"	variable
expected_bytes	$ZIGLIB/std/packed_int_array.zig	/const expected_bytes = ((bits * int_count) + 7) \/ 8/;"	constant
expected_c	$ZIGLIB/std/crypto/aes_ocb.zig	/var expected_c: [c.len]u8 = undefined/;"	variable
expected_code	$ZIGLIB/std/Build/RunStep.zig	/const expected_code = expected_exit_code orelse break :blk/;"	constant
expected_comma_after_arg	$ZIGLIB/std/zig/Ast.zig	/expected_comma_after_arg/;"	field
expected_comma_after_field	$ZIGLIB/std/zig/Ast.zig	/expected_comma_after_field/;"	field
expected_comma_after_initializer	$ZIGLIB/std/zig/Ast.zig	/expected_comma_after_initializer/;"	field
expected_comma_after_param	$ZIGLIB/std/zig/Ast.zig	/expected_comma_after_param/;"	field
expected_comma_after_switch_prong	$ZIGLIB/std/zig/Ast.zig	/expected_comma_after_switch_prong/;"	field
expected_container	$ZIGLIB/std/zig/Ast.zig	/expected_container/;"	field
expected_container_members	$ZIGLIB/std/zig/Ast.zig	/expected_container_members/;"	field
expected_continue_expr	$ZIGLIB/std/zig/Ast.zig	/expected_continue_expr/;"	field
expected_decls	$ZIGLIB/std/meta.zig	/const expected_decls = @typeInfo(expected).Enum.decls/;"	constant
expected_exit_code	$ZIGLIB/std/Build/RunStep.zig	/^expected_exit_code: ?u8 = 0/;"	field
expected_expr	$ZIGLIB/std/zig/Ast.zig	/expected_expr/;"	field
expected_expr_or_assignment	$ZIGLIB/std/zig/Ast.zig	/expected_expr_or_assignment/;"	field
expected_fields	$ZIGLIB/std/meta.zig	/const expected_fields = @typeInfo(expected).Enum.fields/;"	constant
expected_fn	$ZIGLIB/std/zig/Ast.zig	/expected_fn/;"	field
expected_hash	$ZIGLIB/std/crypto/scrypt.zig	/const expected_hash = hash_result.hash.constSlice()/;"	constant
expected_hex_digit	$ZIGLIB/std/zig/string_literal.zig	/expected_hex_digit: usize/;"	field
expected_hex_digit_or_rbrace	$ZIGLIB/std/zig/string_literal.zig	/expected_hex_digit_or_rbrace: usize/;"	field
expected_initializer	$ZIGLIB/std/zig/Ast.zig	/expected_initializer/;"	field
expected_inlinable	$ZIGLIB/std/zig/Ast.zig	/expected_inlinable/;"	field
expected_iterator	$ZIGLIB/std/testing.zig	/var expected_iterator = ChunkIterator{ .bytes = self.expected }/;"	variable
expected_labelable	$ZIGLIB/std/zig/Ast.zig	/expected_labelable/;"	field
expected_lbrace	$ZIGLIB/std/zig/string_literal.zig	/expected_lbrace: usize/;"	field
expected_len	$ZIGLIB/std/crypto/ecdsa.zig	/var expected_len = @as(usize, buf[1])/;"	variable
expected_loop_payload	$ZIGLIB/std/zig/Ast.zig	/expected_loop_payload/;"	field
expected_mac	$ZIGLIB/std/crypto/poly1305.zig	/const expected_mac = "\\xa8\\x06\\x1d\\xc1\\x30\\x51\\x36\\xc6\\xc2\\x2b\\x8b\\xaf\\x0c\\x01\\x27\\xa9"/;"	constant
expected_matches	$ZIGLIB/std/Build/CheckFileStep.zig	/^expected_matches: []const []const u8/;"	field
expected_out_bits	$ZIGLIB/std/crypto/blake2.zig	/expected_out_bits: usize = out_bits/;"	field
expected_output	$ZIGLIB/std/crypto/gimli.zig	/var expected_output: [48]u8 = undefined/;"	variable
expected_param_list	$ZIGLIB/std/zig/Ast.zig	/expected_param_list/;"	field
expected_prefix	$ZIGLIB/std/os/windows.zig	/const expected_prefix = std.unicode.utf8ToUtf16LeStringLiteral("\\\\Device\\\\")/;"	constant
expected_prefix_expr	$ZIGLIB/std/zig/Ast.zig	/expected_prefix_expr/;"	field
expected_primary_type_expr	$ZIGLIB/std/zig/Ast.zig	/expected_primary_type_expr/;"	field
expected_pub_item	$ZIGLIB/std/zig/Ast.zig	/expected_pub_item/;"	field
expected_r	$ZIGLIB/std/crypto/25519/ed25519.zig	/expected_r: Curve/;"	field
expected_r_batch	$ZIGLIB/std/crypto/25519/ed25519.zig	/var expected_r_batch: [count]Curve = undefined/;"	variable
expected_rbrace	$ZIGLIB/std/zig/string_literal.zig	/expected_rbrace: usize/;"	field
expected_remaining	$ZIGLIB/std/json.zig	/expected_remaining: []const u8/;"	field
expected_result	$ZIGLIB/std/event/rwlock.zig	/const expected_result = [1]i32{shared_it_count * @intCast(i32, shared_test_data.len)} ** shared_test_data.len/;"	constant
expected_return_type	$ZIGLIB/std/zig/Ast.zig	/expected_return_type/;"	field
expected_semi_after_decl	$ZIGLIB/std/zig/Ast.zig	/expected_semi_after_decl/;"	field
expected_semi_after_stmt	$ZIGLIB/std/zig/Ast.zig	/expected_semi_after_stmt/;"	field
expected_semi_or_else	$ZIGLIB/std/zig/Ast.zig	/expected_semi_or_else/;"	field
expected_semi_or_lbrace	$ZIGLIB/std/zig/Ast.zig	/expected_semi_or_lbrace/;"	field
expected_server_verify_data	$ZIGLIB/std/crypto/tls/Client.zig	/const expected_server_verify_data = tls.hmac(P.Hmac, &finished_digest, p.server_finished_key)/;"	constant
expected_single_quote	$ZIGLIB/std/zig/string_literal.zig	/expected_single_quote: usize/;"	field
expected_statement	$ZIGLIB/std/zig/Ast.zig	/expected_statement/;"	field
expected_suffix	$ZIGLIB/std/process.zig	/const expected_suffix = switch (builtin.os.tag) {$/;"	constant
expected_suffix_op	$ZIGLIB/std/zig/Ast.zig	/expected_suffix_op/;"	field
expected_symbol	$ZIGLIB/std/zig/Ast.zig	/const expected_symbol = parse_error.extra.expected_tag.symbol()/;"	constant
expected_tag	$ZIGLIB/std/zig/Ast.zig	/expected_tag: Token.Tag/;"	field
expected_token	$ZIGLIB/std/zig/Ast.zig	/expected_token/;"	field
expected_truncated	$ZIGLIB/std/testing.zig	/const expected_truncated = window_start + expected_window.len < expected.len/;"	constant
expected_type_expr	$ZIGLIB/std/zig/Ast.zig	/expected_type_expr/;"	field
expected_value_sentinel	$ZIGLIB/std/testing.zig	/const expected_value_sentinel = blk: {$/;"	constant
expected_var_const	$ZIGLIB/std/zig/Ast.zig	/expected_var_const/;"	field
expected_var_decl	$ZIGLIB/std/zig/Ast.zig	/expected_var_decl/;"	field
expected_var_decl_or_fn	$ZIGLIB/std/zig/Ast.zig	/expected_var_decl_or_fn/;"	field
expected_window	$ZIGLIB/std/testing.zig	/const expected_window = expected[window_start..@min(expected.len, window_start + max_window_size)]/;"	constant
experimental_zbe	$ZIGLIB/std/target/riscv.zig	/experimental_zbe/;"	field
experimental_zbf	$ZIGLIB/std/target/riscv.zig	/experimental_zbf/;"	field
experimental_zbm	$ZIGLIB/std/target/riscv.zig	/experimental_zbm/;"	field
experimental_zbp	$ZIGLIB/std/target/riscv.zig	/experimental_zbp/;"	field
experimental_zbr	$ZIGLIB/std/target/riscv.zig	/experimental_zbr/;"	field
experimental_zbt	$ZIGLIB/std/target/riscv.zig	/experimental_zbt/;"	field
experimental_zvfh	$ZIGLIB/std/target/riscv.zig	/experimental_zvfh/;"	field
expf	$ZIGLIB/compiler_rt/exp.zig	/^pub fn expf(x_: f32) callconv(.C) f32 {$/;"	function
expires	$ZIGLIB/std/event/loop.zig	/expires: u64/;"	field
expl	$ZIGLIB/compiler_rt/exp.zig	/^pub fn expl(x: c_longdouble) callconv(.C) c_longdouble {$/;"	function
explicit	$ZIGLIB/std/zig/CrossTarget.zig	/explicit: *const Target.Cpu.Model/;"	field
expm1	$ZIGLIB/std/math/expm1.zig	/^pub fn expm1(x: anytype) @TypeOf(x) {$/;"	function
expm1_32	$ZIGLIB/std/math/expm1.zig	/^fn expm1_32(x_: f32) f32 {$/;"	function
expm1_64	$ZIGLIB/std/math/expm1.zig	/^fn expm1_64(x_: f64) f64 {$/;"	function
expo2	$ZIGLIB/std/math/expo2.zig	/^pub fn expo2(x: anytype) @TypeOf(x) {$/;"	function
expo2d	$ZIGLIB/std/math/expo2.zig	/^fn expo2d(x: f64) f64 {$/;"	function
expo2f	$ZIGLIB/std/math/expo2.zig	/^fn expo2f(x: f32) f32 {$/;"	function
exponent	$ZIGLIB/std/zig/number_literal.zig	/var exponent = false/;"	variable
exponentBias	$ZIGLIB/std/math/ilogb.zig	/const exponentBias = (maxExponent >> 1)/;"	constant
exponentBits	$ZIGLIB/std/math/ilogb.zig	/const exponentBits = math.floatExponentBits(T)/;"	constant
exponentMask	$ZIGLIB/compiler_rt/divtf3.zig	/const exponentMask = absMask ^ significandMask/;"	constant
exponent_after_underscore	$ZIGLIB/std/zig/number_literal.zig	/exponent_after_underscore: usize/;"	field
exponent_bias	$ZIGLIB/std/math/ldexp.zig	/const exponent_bias = max_exponent/;"	constant
exponent_bits	$ZIGLIB/std/math/ldexp.zig	/const exponent_bits = math.floatExponentBits(T)/;"	constant
exponent_elem	$ZIGLIB/std/crypto/Certificate.zig	/const exponent_elem = try der.Element.parse(pub_key, modulus_elem.slice.end)/;"	constant
exponent_mask	$ZIGLIB/std/math/big/rational.zig	/const exponent_mask = (1 << exponent_bits) - 1/;"	constant
export	$ZIGLIB/std/wasm.zig	/@"export"/;"	field
exportIt	$ZIGLIB/compiler_rt/clear_cache.zig	/^fn exportIt() void {$/;"	function
exportPackageLists	$ZIGLIB/std/os/uefi/protocols/hii_database_protocol.zig	/pub fn exportPackageLists(self: *const HIIDatabaseProtocol, handle: ?hii.HIIHandle, buffer_size: *usize, buffer: *hii.HIIPackageList) Status {$/;"	function
exportWhen	$ZIGLIB/std/atomic/Atomic.zig	/fn exportWhen(comptime condition: bool, comptime functions: type) type {$/;"	function
export_off	$ZIGLIB/std/macho.zig	/export_off: u32 = 0/;"	field
export_size	$ZIGLIB/std/macho.zig	/export_size: u32 = 0/;"	field
export_symbol_names	$ZIGLIB/std/Build/CompileStep.zig	/^export_symbol_names: []const []const u8 = &.{}/;"	field
export_symbols	$ZIGLIB/std/dwarf/AT.zig	/^pub const export_symbols = 0x89/;"	constant
export_table	$ZIGLIB/std/Build/CompileStep.zig	/^export_table: bool = false/;"	field
expq	$ZIGLIB/compiler_rt/exp.zig	/^pub fn expq(a: f128) callconv(.C) f128 {$/;"	function
expr	$ZIGLIB/std/zig/render.zig	/const expr = nodes[struct_init.ast.fields[0]]/;"	constant
expr_index	$ZIGLIB/std/zig/render.zig	/var expr_index: usize = 0/;"	variable
expr_last_token	$ZIGLIB/std/zig/render.zig	/const expr_last_token = tree.lastToken(expr) + 1/;"	constant
expr_newlines	$ZIGLIB/std/zig/render.zig	/const expr_newlines = try gpa.alloc(bool, row_exprs.len)/;"	constant
expr_node	$ZIGLIB/std/zig/Parse.zig	/const expr_node = try p.expectExpr()/;"	constant
expr_text	$ZIGLIB/std/zig/render.zig	/const expr_text = sub_expr_buffer.items[start..end]/;"	constant
expr_widths	$ZIGLIB/std/zig/render.zig	/const expr_widths = widths[0..row_exprs.len]/;"	constant
expression	$ZIGLIB/std/dwarf.zig	/pub const expression = 0x10/;"	constant
exprloc	$ZIGLIB/std/dwarf/FORM.zig	/^pub const exprloc = 0x18/;"	constant
exptf	$ZIGLIB/std/math/complex/ldexp.zig	/const exptf = expt + ex_expt/;"	constant
ext_bytes_elem	$ZIGLIB/std/crypto/Certificate.zig	/const ext_bytes_elem = if (critical_elem.identifier.tag != .boolean)$/;"	constant
ext_i	$ZIGLIB/std/crypto/Certificate.zig	/var ext_i = extensions.slice.start/;"	variable
ext_id	$ZIGLIB/std/crypto/Certificate.zig	/const ext_id = parseExtensionId(cert_bytes, oid_elem) catch |err| switch (err) {$/;"	constant
ext_it	$ZIGLIB/std/child_process.zig	/var ext_it = mem.tokenize(u16, pathext, &[_]u16{';'})/;"	variable
ext_key_usage	$ZIGLIB/std/crypto/Certificate.zig	/ext_key_usage/;"	field
ext_size	$ZIGLIB/std/crypto/tls/Client.zig	/const ext_size = all_extd.decode(u16)/;"	constant
ext_start	$ZIGLIB/std/child_process.zig	/const ext_start = std.mem.lastIndexOfScalar(u16, app_name, '.') orelse break :unappended err/;"	constant
extd	$ZIGLIB/std/crypto/tls/Client.zig	/var extd = try all_extd.sub(ext_size)/;"	variable
extdiv	$ZIGLIB/std/target/powerpc.zig	/extdiv/;"	field
extend	$ZIGLIB/std/crypto/salsa20.zig	/^fn extend(comptime rounds: comptime_int, key: [32]u8, nonce: [24]u8) struct { key: [32]u8, nonce: [8]u8 } {$/;"	function
extend_boot_environment	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/extend_boot_environment: bool/;"	field
extend_f80	$ZIGLIB/compiler_rt/extendf.zig	/^pub inline fn extend_f80(comptime src_t: type, a: std.meta.Int(.unsigned, @typeInfo(src_t).Float.bits)) f80 {$/;"	function
extended	$ZIGLIB/std/os/darwin.zig	/extended: std.c.vm_region_extended_info/;"	field
extendedOffset	$ZIGLIB/std/heap/WasmPageAllocator.zig	/^fn extendedOffset() usize {$/;"	function
extended_const	$ZIGLIB/std/target/wasm.zig	/extended_const/;"	field
extended_header	$ZIGLIB/std/tar.zig	/extended_header = 'x'/;"	field
extended_image_insts	$ZIGLIB/std/target/amdgpu.zig	/extended_image_insts/;"	field
extended_memsz	$ZIGLIB/std/dynamic_library.zig	/const extended_memsz = mem.alignForward(ph.p_memsz + extra_bytes, mem.page_size)/;"	constant
extended_nonce	$ZIGLIB/std/crypto/salsa20.zig	/const extended_nonce = [_]u8{0x42} ** 24/;"	constant
extended_op	$ZIGLIB/std/dwarf.zig	/pub const extended_op = 0x00/;"	constant
extendf	$ZIGLIB/compiler_rt/extendf.zig	/^pub inline fn extendf($/;"	function
extension	$ZIGLIB/std/fs/path.zig	/^pub fn extension(path: []const u8) []const u8 {$/;"	function
extensions	$ZIGLIB/std/crypto/Certificate.zig	/const extensions = try der.Element.parse(cert_bytes, outer_extensions.slice.start)/;"	constant
extensions_header	$ZIGLIB/std/crypto/tls/Client.zig	/const extensions_header =$/;"	constant
extensions_payload	$ZIGLIB/std/crypto/tls/Client.zig	/const extensions_payload =$/;"	constant
extensions_size	$ZIGLIB/std/crypto/tls/Client.zig	/const extensions_size = hsd.decode(u16)/;"	constant
extern_export_inline_token	$ZIGLIB/std/zig/Parse.zig	/const extern_export_inline_token = p.nextToken()/;"	constant
extern_export_token	$ZIGLIB/std/zig/Ast.zig	/extern_export_token: ?TokenIndex/;"	field
extern_fn_body	$ZIGLIB/std/zig/Ast.zig	/extern_fn_body/;"	field
external	$ZIGLIB/std/os/linux/bpf/btf.zig	/external/;"	field
externalKind	$ZIGLIB/std/wasm.zig	/^pub fn externalKind(val: ExternalKind) u8 {$/;"	function
external_pager	$ZIGLIB/std/c/darwin.zig	/external_pager: u8/;"	field
external_peak	$ZIGLIB/std/c/darwin.zig	/external_peak: mach_vm_size_t/;"	field
externref	$ZIGLIB/std/wasm.zig	/externref = 0x6F/;"	field
extra	$ZIGLIB/std/zig/render.zig	/const extra = tree.extraData(datas[node].rhs, Ast.Node.SubRange)/;"	constant
extraData	$ZIGLIB/std/zig/Ast.zig	/^pub fn extraData(tree: Ast, index: usize, comptime T: type) T {$/;"	function
extra_addrspace_qualifier	$ZIGLIB/std/zig/Ast.zig	/extra_addrspace_qualifier/;"	field
extra_align_qualifier	$ZIGLIB/std/zig/Ast.zig	/extra_align_qualifier/;"	field
extra_allowzero_qualifier	$ZIGLIB/std/zig/Ast.zig	/extra_allowzero_qualifier/;"	field
extra_bits	$ZIGLIB/std/fmt.zig	/var extra_bits = (mantissa_digits - precision) * 4/;"	variable
extra_bytes	$ZIGLIB/std/dynamic_library.zig	/const extra_bytes = (base + ph.p_vaddr) - aligned_addr/;"	constant
extra_const_qualifier	$ZIGLIB/std/zig/Ast.zig	/extra_const_qualifier/;"	field
extra_data	$ZIGLIB/std/zig/Parse.zig	/^extra_data: std.ArrayListUnmanaged(Node.Index)/;"	field
extra_index	$ZIGLIB/std/SemanticVersion.zig	/const extra_index = std.mem.indexOfAny(u8, text, "-+")/;"	constant
extra_length	$ZIGLIB/std/compress/deflate/huffman_bit_writer.zig	/var extra_length = @intCast(u32, length - length_base[length_code])/;"	variable
extra_length_bits	$ZIGLIB/std/compress/deflate/huffman_bit_writer.zig	/var extra_length_bits = @intCast(u32, length_extra_bits[length_code])/;"	variable
extra_offset	$ZIGLIB/std/compress/deflate/huffman_bit_writer.zig	/var extra_offset = @intCast(u32, offset - offset_base[offset_code])/;"	variable
extra_offset_bits	$ZIGLIB/std/compress/deflate/huffman_bit_writer.zig	/var extra_offset_bits = @intCast(u32, offset_extra_bits[offset_code])/;"	variable
extra_thread_count	$ZIGLIB/std/event/loop.zig	/extra_thread_count: usize/;"	field
extra_thread_index	$ZIGLIB/std/event/loop.zig	/var extra_thread_index: usize = 0/;"	variable
extra_threads	$ZIGLIB/std/event/loop.zig	/extra_threads: []Thread/;"	field
extra_volatile_qualifier	$ZIGLIB/std/zig/Ast.zig	/extra_volatile_qualifier/;"	field
extract	$ZIGLIB/std/simd.zig	/^pub fn extract($/;"	function
extractInit	$ZIGLIB/std/crypto/hkdf.zig	/pub fn extractInit(salt: []const u8) Hmac {$/;"	function
extractLowBits	$ZIGLIB/std/math/big/rational.zig	/^fn extractLowBits(a: Int, comptime T: type) T {$/;"	function
extrefsymoff	$ZIGLIB/std/macho.zig	/extrefsymoff: u32 = 0/;"	field
extreloff	$ZIGLIB/std/macho.zig	/extreloff: u32 = 0/;"	field
exynos	$ZIGLIB/std/target/arm.zig	/exynos/;"	field
exynos_cheap_as_move	$ZIGLIB/std/target/aarch64.zig	/exynos_cheap_as_move/;"	field
exynos_m1	$ZIGLIB/std/target/arm.zig	/pub const exynos_m1 = CpuModel{$/;"	constant
exynos_m2	$ZIGLIB/std/target/arm.zig	/pub const exynos_m2 = CpuModel{$/;"	constant
exynos_m3	$ZIGLIB/std/target/arm.zig	/pub const exynos_m3 = CpuModel{$/;"	constant
exynos_m4	$ZIGLIB/std/target/arm.zig	/pub const exynos_m4 = CpuModel{$/;"	constant
exynos_m5	$ZIGLIB/std/target/arm.zig	/pub const exynos_m5 = CpuModel{$/;"	constant
f128_epsilon	$ZIGLIB/std/math.zig	/^pub const f128_epsilon = floatEps(f128)/;"	constant
f128_max	$ZIGLIB/std/math.zig	/^pub const f128_max = floatMax(f128)/;"	constant
f128_min	$ZIGLIB/std/math.zig	/^pub const f128_min = floatMin(f128)/;"	constant
f128_toint	$ZIGLIB/std/math.zig	/^pub const f128_toint = 1.0 \/ f128_epsilon/;"	constant
f128_true_min	$ZIGLIB/std/math.zig	/^pub const f128_true_min = floatTrueMin(f128)/;"	constant
f16_epsilon	$ZIGLIB/std/math.zig	/^pub const f16_epsilon: comptime_float = floatEps(f16)/;"	constant
f16_max	$ZIGLIB/std/math.zig	/^pub const f16_max: comptime_float = floatMax(f16)/;"	constant
f16_min	$ZIGLIB/std/math.zig	/^pub const f16_min: comptime_float = floatMin(f16)/;"	constant
f16_toint	$ZIGLIB/std/math.zig	/^pub const f16_toint: comptime_float = 1.0 \/ f16_epsilon/;"	constant
f16_true_min	$ZIGLIB/std/math.zig	/^pub const f16_true_min: comptime_float = floatTrueMin(f16)/;"	constant
f16c	$ZIGLIB/std/target/x86.zig	/f16c/;"	field
f32_abs	$ZIGLIB/std/wasm.zig	/f32_abs = 0x8B/;"	field
f32_add	$ZIGLIB/std/wasm.zig	/f32_add = 0x92/;"	field
f32_ceil	$ZIGLIB/std/wasm.zig	/f32_ceil = 0x8D/;"	field
f32_const	$ZIGLIB/std/wasm.zig	/f32_const: f32/;"	field
f32_convert_i32_s	$ZIGLIB/std/wasm.zig	/f32_convert_i32_s = 0xB2/;"	field
f32_convert_i32_u	$ZIGLIB/std/wasm.zig	/f32_convert_i32_u = 0xB3/;"	field
f32_convert_i64_s	$ZIGLIB/std/wasm.zig	/f32_convert_i64_s = 0xB4/;"	field
f32_convert_i64_u	$ZIGLIB/std/wasm.zig	/f32_convert_i64_u = 0xB5/;"	field
f32_copysign	$ZIGLIB/std/wasm.zig	/f32_copysign = 0x98/;"	field
f32_demote_f64	$ZIGLIB/std/wasm.zig	/f32_demote_f64 = 0xB6/;"	field
f32_div	$ZIGLIB/std/wasm.zig	/f32_div = 0x95/;"	field
f32_epsilon	$ZIGLIB/std/math.zig	/^pub const f32_epsilon: comptime_float = floatEps(f32)/;"	constant
f32_eq	$ZIGLIB/std/wasm.zig	/f32_eq = 0x5B/;"	field
f32_floor	$ZIGLIB/std/wasm.zig	/f32_floor = 0x8E/;"	field
f32_ge	$ZIGLIB/std/wasm.zig	/f32_ge = 0x60/;"	field
f32_gt	$ZIGLIB/std/wasm.zig	/f32_gt = 0x5E/;"	field
f32_le	$ZIGLIB/std/wasm.zig	/f32_le = 0x5F/;"	field
f32_load	$ZIGLIB/std/wasm.zig	/f32_load = 0x2A/;"	field
f32_lt	$ZIGLIB/std/wasm.zig	/f32_lt = 0x5D/;"	field
f32_max	$ZIGLIB/std/wasm.zig	/f32_max = 0x97/;"	field
f32_min	$ZIGLIB/std/wasm.zig	/f32_min = 0x96/;"	field
f32_mul	$ZIGLIB/std/wasm.zig	/f32_mul = 0x94/;"	field
f32_ne	$ZIGLIB/std/wasm.zig	/f32_ne = 0x5C/;"	field
f32_nearest	$ZIGLIB/std/wasm.zig	/f32_nearest = 0x90/;"	field
f32_neg	$ZIGLIB/std/wasm.zig	/f32_neg = 0x8C/;"	field
f32_reinterpret_i32	$ZIGLIB/std/wasm.zig	/f32_reinterpret_i32 = 0xBE/;"	field
f32_sqrt	$ZIGLIB/std/wasm.zig	/f32_sqrt = 0x91/;"	field
f32_store	$ZIGLIB/std/wasm.zig	/f32_store = 0x38/;"	field
f32_sub	$ZIGLIB/std/wasm.zig	/f32_sub = 0x93/;"	field
f32_toint	$ZIGLIB/std/math.zig	/^pub const f32_toint: comptime_float = 1.0 \/ f32_epsilon/;"	constant
f32_true_min	$ZIGLIB/std/math.zig	/^pub const f32_true_min: comptime_float = floatTrueMin(f32)/;"	constant
f32_trunc	$ZIGLIB/std/wasm.zig	/f32_trunc = 0x8F/;"	field
f32mm	$ZIGLIB/std/target/aarch64.zig	/f32mm/;"	field
f32x4_abs	$ZIGLIB/std/wasm.zig	/f32x4_abs = 0xE0/;"	field
f32x4_add	$ZIGLIB/std/wasm.zig	/f32x4_add = 0xE4/;"	field
f32x4_ceil	$ZIGLIB/std/wasm.zig	/f32x4_ceil = 0x67/;"	field
f32x4_convert_i32x4_s	$ZIGLIB/std/wasm.zig	/f32x4_convert_i32x4_s = 0xFA/;"	field
f32x4_convert_i32x4_u	$ZIGLIB/std/wasm.zig	/f32x4_convert_i32x4_u = 0xFB/;"	field
f32x4_demote_f64x2_zero	$ZIGLIB/std/wasm.zig	/f32x4_demote_f64x2_zero = 0x5E/;"	field
f32x4_div	$ZIGLIB/std/wasm.zig	/f32x4_div = 0xE7/;"	field
f32x4_eq	$ZIGLIB/std/wasm.zig	/f32x4_eq = 0x41/;"	field
f32x4_extract_lane	$ZIGLIB/std/wasm.zig	/f32x4_extract_lane = 0x1F/;"	field
f32x4_floor	$ZIGLIB/std/wasm.zig	/f32x4_floor = 0x68/;"	field
f32x4_ge	$ZIGLIB/std/wasm.zig	/f32x4_ge = 0x46/;"	field
f32x4_gt	$ZIGLIB/std/wasm.zig	/f32x4_gt = 0x44/;"	field
f32x4_le	$ZIGLIB/std/wasm.zig	/f32x4_le = 0x45/;"	field
f32x4_lt	$ZIGLIB/std/wasm.zig	/f32x4_lt = 0x43/;"	field
f32x4_max	$ZIGLIB/std/wasm.zig	/f32x4_max = 0xE9/;"	field
f32x4_min	$ZIGLIB/std/wasm.zig	/f32x4_min = 0xE8/;"	field
f32x4_mul	$ZIGLIB/std/wasm.zig	/f32x4_mul = 0xE6/;"	field
f32x4_ne	$ZIGLIB/std/wasm.zig	/f32x4_ne = 0x42/;"	field
f32x4_nearest	$ZIGLIB/std/wasm.zig	/f32x4_nearest = 0x6A/;"	field
f32x4_neg	$ZIGLIB/std/wasm.zig	/f32x4_neg = 0xE1/;"	field
f32x4_pmax	$ZIGLIB/std/wasm.zig	/f32x4_pmax = 0xEB/;"	field
f32x4_pmin	$ZIGLIB/std/wasm.zig	/f32x4_pmin = 0xEA/;"	field
f32x4_relaxed_dot_bf16x8_add_f32x4	$ZIGLIB/std/wasm.zig	/f32x4_relaxed_dot_bf16x8_add_f32x4 = 0x114/;"	field
f32x4_relaxed_madd	$ZIGLIB/std/wasm.zig	/f32x4_relaxed_madd = 0x105/;"	field
f32x4_relaxed_max	$ZIGLIB/std/wasm.zig	/f32x4_relaxed_max = 0x10e/;"	field
f32x4_relaxed_min	$ZIGLIB/std/wasm.zig	/f32x4_relaxed_min = 0x10d/;"	field
f32x4_relaxed_nmadd	$ZIGLIB/std/wasm.zig	/f32x4_relaxed_nmadd = 0x106/;"	field
f32x4_replace_lane	$ZIGLIB/std/wasm.zig	/f32x4_replace_lane = 0x20/;"	field
f32x4_splat	$ZIGLIB/std/wasm.zig	/f32x4_splat = 0x13/;"	field
f32x4_sqrt	$ZIGLIB/std/wasm.zig	/f32x4_sqrt = 0xE3/;"	field
f32x4_sub	$ZIGLIB/std/wasm.zig	/f32x4_sub = 0xE5/;"	field
f32x4_trunc	$ZIGLIB/std/wasm.zig	/f32x4_trunc = 0x69/;"	field
f64_abs	$ZIGLIB/std/wasm.zig	/f64_abs = 0x99/;"	field
f64_add	$ZIGLIB/std/wasm.zig	/f64_add = 0xA0/;"	field
f64_ceil	$ZIGLIB/std/wasm.zig	/f64_ceil = 0x9B/;"	field
f64_const	$ZIGLIB/std/wasm.zig	/f64_const: f64/;"	field
f64_convert_i32_s	$ZIGLIB/std/wasm.zig	/f64_convert_i32_s = 0xB7/;"	field
f64_convert_i32_u	$ZIGLIB/std/wasm.zig	/f64_convert_i32_u = 0xB8/;"	field
f64_convert_i64_s	$ZIGLIB/std/wasm.zig	/f64_convert_i64_s = 0xB9/;"	field
f64_convert_i64_u	$ZIGLIB/std/wasm.zig	/f64_convert_i64_u = 0xBA/;"	field
f64_copysign	$ZIGLIB/std/wasm.zig	/f64_copysign = 0xA6/;"	field
f64_div	$ZIGLIB/std/wasm.zig	/f64_div = 0xA3/;"	field
f64_epsilon	$ZIGLIB/std/math.zig	/^pub const f64_epsilon: comptime_float = floatEps(f64)/;"	constant
f64_eq	$ZIGLIB/std/wasm.zig	/f64_eq = 0x61/;"	field
f64_floor	$ZIGLIB/std/wasm.zig	/f64_floor = 0x9C/;"	field
f64_ge	$ZIGLIB/std/wasm.zig	/f64_ge = 0x66/;"	field
f64_gt	$ZIGLIB/std/wasm.zig	/f64_gt = 0x64/;"	field
f64_le	$ZIGLIB/std/wasm.zig	/f64_le = 0x65/;"	field
f64_load	$ZIGLIB/std/wasm.zig	/f64_load = 0x2B/;"	field
f64_lt	$ZIGLIB/std/wasm.zig	/f64_lt = 0x63/;"	field
f64_max	$ZIGLIB/std/wasm.zig	/f64_max = 0xA5/;"	field
f64_min	$ZIGLIB/std/wasm.zig	/f64_min = 0xA4/;"	field
f64_mul	$ZIGLIB/std/wasm.zig	/f64_mul = 0xA2/;"	field
f64_ne	$ZIGLIB/std/wasm.zig	/f64_ne = 0x62/;"	field
f64_nearest	$ZIGLIB/std/wasm.zig	/f64_nearest = 0x9E/;"	field
f64_neg	$ZIGLIB/std/wasm.zig	/f64_neg = 0x9A/;"	field
f64_promote_f32	$ZIGLIB/std/wasm.zig	/f64_promote_f32 = 0xBB/;"	field
f64_reinterpret_i64	$ZIGLIB/std/wasm.zig	/f64_reinterpret_i64 = 0xBF/;"	field
f64_sqrt	$ZIGLIB/std/wasm.zig	/f64_sqrt = 0x9F/;"	field
f64_store	$ZIGLIB/std/wasm.zig	/f64_store = 0x39/;"	field
f64_sub	$ZIGLIB/std/wasm.zig	/f64_sub = 0xA1/;"	field
f64_toint	$ZIGLIB/std/math.zig	/^pub const f64_toint: comptime_float = 1.0 \/ f64_epsilon/;"	constant
f64_true_min	$ZIGLIB/std/math.zig	/^pub const f64_true_min: comptime_float = floatTrueMin(f64)/;"	constant
f64_trunc	$ZIGLIB/std/wasm.zig	/f64_trunc = 0x9D/;"	field
f64mm	$ZIGLIB/std/target/aarch64.zig	/f64mm/;"	field
f64x2_abs	$ZIGLIB/std/wasm.zig	/f64x2_abs = 0xEC/;"	field
f64x2_add	$ZIGLIB/std/wasm.zig	/f64x2_add = 0xF0/;"	field
f64x2_ceil	$ZIGLIB/std/wasm.zig	/f64x2_ceil = 0x74/;"	field
f64x2_convert_low_i32x4_s	$ZIGLIB/std/wasm.zig	/f64x2_convert_low_i32x4_s = 0xFE/;"	field
f64x2_convert_low_i32x4_u	$ZIGLIB/std/wasm.zig	/f64x2_convert_low_i32x4_u = 0xFF/;"	field
f64x2_div	$ZIGLIB/std/wasm.zig	/f64x2_div = 0xF3/;"	field
f64x2_eq	$ZIGLIB/std/wasm.zig	/f64x2_eq = 0x47/;"	field
f64x2_extract_lane	$ZIGLIB/std/wasm.zig	/f64x2_extract_lane = 0x21/;"	field
f64x2_floor	$ZIGLIB/std/wasm.zig	/f64x2_floor = 0x75/;"	field
f64x2_ge	$ZIGLIB/std/wasm.zig	/f64x2_ge = 0x4C/;"	field
f64x2_gt	$ZIGLIB/std/wasm.zig	/f64x2_gt = 0x4A/;"	field
f64x2_le	$ZIGLIB/std/wasm.zig	/f64x2_le = 0x4B/;"	field
f64x2_lt	$ZIGLIB/std/wasm.zig	/f64x2_lt = 0x49/;"	field
f64x2_max	$ZIGLIB/std/wasm.zig	/f64x2_max = 0xF5/;"	field
f64x2_min	$ZIGLIB/std/wasm.zig	/f64x2_min = 0xF4/;"	field
f64x2_mul	$ZIGLIB/std/wasm.zig	/f64x2_mul = 0xF2/;"	field
f64x2_ne	$ZIGLIB/std/wasm.zig	/f64x2_ne = 0x48/;"	field
f64x2_nearest	$ZIGLIB/std/wasm.zig	/f64x2_nearest = 0x94/;"	field
f64x2_neg	$ZIGLIB/std/wasm.zig	/f64x2_neg = 0xED/;"	field
f64x2_pmax	$ZIGLIB/std/wasm.zig	/f64x2_pmax = 0xF7/;"	field
f64x2_pmin	$ZIGLIB/std/wasm.zig	/f64x2_pmin = 0xF6/;"	field
f64x2_promote_low_f32x4	$ZIGLIB/std/wasm.zig	/f64x2_promote_low_f32x4 = 0x5F/;"	field
f64x2_relaxed_madd	$ZIGLIB/std/wasm.zig	/f64x2_relaxed_madd = 0x107/;"	field
f64x2_relaxed_max	$ZIGLIB/std/wasm.zig	/f64x2_relaxed_max = 0x110/;"	field
f64x2_relaxed_min	$ZIGLIB/std/wasm.zig	/f64x2_relaxed_min = 0x10f/;"	field
f64x2_relaxed_nmadd	$ZIGLIB/std/wasm.zig	/f64x2_relaxed_nmadd = 0x108/;"	field
f64x2_replace_lane	$ZIGLIB/std/wasm.zig	/f64x2_replace_lane = 0x22/;"	field
f64x2_splat	$ZIGLIB/std/wasm.zig	/f64x2_splat = 0x14/;"	field
f64x2_sqrt	$ZIGLIB/std/wasm.zig	/f64x2_sqrt = 0xEF/;"	field
f64x2_sub	$ZIGLIB/std/wasm.zig	/f64x2_sub = 0xF1/;"	field
f64x2_trunc	$ZIGLIB/std/wasm.zig	/f64x2_trunc = 0x7A/;"	field
f80_epsilon	$ZIGLIB/std/math.zig	/^pub const f80_epsilon = floatEps(f80)/;"	constant
f80_max	$ZIGLIB/std/math.zig	/^pub const f80_max = floatMax(f80)/;"	constant
f80_min	$ZIGLIB/std/math.zig	/^pub const f80_min = floatMin(f80)/;"	constant
f80_toint	$ZIGLIB/std/math.zig	/^pub const f80_toint = 1.0 \/ f80_epsilon/;"	constant
f80_true_min	$ZIGLIB/std/math.zig	/^pub const f80_true_min = floatTrueMin(f80)/;"	constant
f934	$ZIGLIB/std/target/sparc.zig	/pub const f934 = CpuModel{$/;"	constant
fBlaMka	$ZIGLIB/std/crypto/argon2.zig	/^fn fBlaMka(x: u64, y: u64) u64 {$/;"	function
f_bits	$ZIGLIB/std/math/big/rational.zig	/const f_bits = @bitCast(UnsignedInt, f)/;"	constant
f_root_check	$ZIGLIB/std/crypto/25519/ristretto255.zig	/const f_root_check = u.mul(Fe.sqrtm1).add(vxx)/;"	constant
fabs	$ZIGLIB/std/math.zig	/^pub inline fn fabs(value: anytype) @TypeOf(value) {$/;"	function
fabsf	$ZIGLIB/compiler_rt/fabs.zig	/^pub fn fabsf(a: f32) callconv(.C) f32 {$/;"	function
fabsl	$ZIGLIB/compiler_rt/fabs.zig	/^pub fn fabsl(x: c_longdouble) callconv(.C) c_longdouble {$/;"	function
fabsq	$ZIGLIB/compiler_rt/fabs.zig	/^pub fn fabsq(a: f128) callconv(.C) f128 {$/;"	function
faccessat	$ZIGLIB/std/os/linux/syscalls.zig	/faccessat = Linux + 300/;"	field
faccessat2	$ZIGLIB/std/os/linux/syscalls.zig	/faccessat2 = Linux + 439/;"	field
faccessatW	$ZIGLIB/std/os.zig	/^pub fn faccessatW(dirfd: fd_t, sub_path_w: [*:0]const u16, mode: u32, flags: u32) AccessError!void {$/;"	function
faccessatZ	$ZIGLIB/std/os.zig	/^pub fn faccessatZ(dirfd: fd_t, path: [*:0]const u8, mode: u32, flags: u32) AccessError!void {$/;"	function
fadvise	$ZIGLIB/std/os/linux.zig	/^pub fn fadvise(fd: fd_t, offset: i64, len: i64, advice: usize) usize {$/;"	function
fadvise64	$ZIGLIB/std/os/linux/syscalls.zig	/fadvise64 = Linux + 254/;"	field
fadvise64_64	$ZIGLIB/std/os/linux/syscalls.zig	/fadvise64_64 = 272/;"	field
fail	$ZIGLIB/std/zig/Parse.zig	/^fn fail(p: *Parse, tag: Ast.Error.Tag) error{ ParseError, OutOfMemory } {$/;"	function
failAllocatorAlloc	$ZIGLIB/std/mem.zig	/^fn failAllocatorAlloc(_: *anyopaque, n: usize, log2_alignment: u8, ra: usize) ?[*]u8 {$/;"	function
failAllocator_vtable	$ZIGLIB/std/mem.zig	/^const failAllocator_vtable = Allocator.VTable{$/;"	constant
failExpected	$ZIGLIB/std/zig/Parse.zig	/^fn failExpected(p: *Parse, expected_token: Token.Tag) error{ ParseError, OutOfMemory } {$/;"	function
failMsg	$ZIGLIB/std/zig/Parse.zig	/^fn failMsg(p: *Parse, msg: Ast.Error) error{ ParseError, OutOfMemory } {$/;"	function
fail_allocator	$ZIGLIB/std/mem.zig	/^const fail_allocator = Allocator{$/;"	constant
fail_index	$ZIGLIB/std/testing/failing_allocator.zig	/fail_index: usize/;"	field
failed	$ZIGLIB/std/crypto/tlcsprng.zig	/failed/;"	field
failed_dependency	$ZIGLIB/std/http.zig	/failed_dependency = 424/;"	field
failer	$ZIGLIB/std/heap/memory_pool.zig	/var failer = std.testing.FailingAllocator.init(std.testing.allocator, 0)/;"	variable
failing_allocator	$ZIGLIB/std/testing.zig	/^pub const failing_allocator = failing_allocator_instance.allocator()/;"	constant
failing_allocator_inst	$ZIGLIB/std/testing.zig	/var failing_allocator_inst = std.testing.FailingAllocator.init(backing_allocator, std.math.maxInt(usize))/;"	variable
failing_allocator_instance	$ZIGLIB/std/testing.zig	/^pub var failing_allocator_instance = FailingAllocator.init(base_allocator_instance.allocator(), 0)/;"	variable
failure	$ZIGLIB/std/zig/string_literal.zig	/failure: Error/;"	field
falkor	$ZIGLIB/std/target/aarch64.zig	/pub const falkor = CpuModel{$/;"	constant
fallback_allocator	$ZIGLIB/std/heap.zig	/fallback_allocator: Allocator/;"	field
fallback_first	$ZIGLIB/std/zig/render.zig	/const fallback_first = tree.firstToken(datas[node].rhs)/;"	constant
fallocate	$ZIGLIB/std/os/linux/syscalls.zig	/fallocate = Linux + 320/;"	field
false_deps_getmant	$ZIGLIB/std/target/x86.zig	/false_deps_getmant/;"	field
false_deps_lzcnt_tzcnt	$ZIGLIB/std/target/x86.zig	/false_deps_lzcnt_tzcnt/;"	field
false_deps_mulc	$ZIGLIB/std/target/x86.zig	/false_deps_mulc/;"	field
false_deps_mullq	$ZIGLIB/std/target/x86.zig	/false_deps_mullq/;"	field
false_deps_perm	$ZIGLIB/std/target/x86.zig	/false_deps_perm/;"	field
false_deps_popcnt	$ZIGLIB/std/target/x86.zig	/false_deps_popcnt/;"	field
false_deps_range	$ZIGLIB/std/target/x86.zig	/false_deps_range/;"	field
family	$ZIGLIB/std/zig/system/x86.zig	/var family = (leaf.eax >> 8) & 0xf/;"	variable
fanotify_init	$ZIGLIB/std/os/linux/syscalls.zig	/fanotify_init = Linux + 336/;"	field
fanotify_mark	$ZIGLIB/std/os/linux/syscalls.zig	/fanotify_mark = Linux + 337/;"	field
fastIntPow10	$ZIGLIB/std/fmt/parse_float/convert_fast.zig	/^fn fastIntPow10(comptime T: type, i: usize) T {$/;"	function
fastPow10	$ZIGLIB/std/fmt/parse_float/convert_fast.zig	/^fn fastPow10(comptime T: type, i: usize) T {$/;"	function
fast_11bytenop	$ZIGLIB/std/target/x86.zig	/fast_11bytenop/;"	field
fast_15bytenop	$ZIGLIB/std/target/x86.zig	/fast_15bytenop/;"	field
fast_7bytenop	$ZIGLIB/std/target/x86.zig	/fast_7bytenop/;"	field
fast_bextr	$ZIGLIB/std/target/x86.zig	/fast_bextr/;"	field
fast_denormal_f32	$ZIGLIB/std/target/amdgpu.zig	/fast_denormal_f32/;"	field
fast_fmaf	$ZIGLIB/std/target/amdgpu.zig	/fast_fmaf/;"	field
fast_gather	$ZIGLIB/std/target/x86.zig	/fast_gather/;"	field
fast_hops	$ZIGLIB/std/target/x86.zig	/fast_hops/;"	field
fast_lzcnt	$ZIGLIB/std/target/x86.zig	/fast_lzcnt/;"	field
fast_movbe	$ZIGLIB/std/target/x86.zig	/fast_movbe/;"	field
fast_scalar_fsqrt	$ZIGLIB/std/target/x86.zig	/fast_scalar_fsqrt/;"	field
fast_scalar_shift_masks	$ZIGLIB/std/target/x86.zig	/fast_scalar_shift_masks/;"	field
fast_serialization	$ZIGLIB/std/target/s390x.zig	/fast_serialization/;"	field
fast_shld_rotate	$ZIGLIB/std/target/x86.zig	/fast_shld_rotate/;"	field
fast_skip_hashshing	$ZIGLIB/std/compress/deflate/compressor.zig	/fast_skip_hashshing: u32/;"	field
fast_variable_crosslane_shuffle	$ZIGLIB/std/target/x86.zig	/fast_variable_crosslane_shuffle/;"	field
fast_variable_perlane_shuffle	$ZIGLIB/std/target/x86.zig	/fast_variable_perlane_shuffle/;"	field
fast_vector_fsqrt	$ZIGLIB/std/target/x86.zig	/fast_vector_fsqrt/;"	field
fast_vector_shift_masks	$ZIGLIB/std/target/x86.zig	/fast_vector_shift_masks/;"	field
fat_arch	$ZIGLIB/std/macho.zig	/^pub const fat_arch = extern struct {$/;"	struct
fat_header	$ZIGLIB/std/macho.zig	/^pub const fat_header = extern struct {$/;"	struct
fatal	$ZIGLIB/std/crypto/tls.zig	/fatal = 2/;"	field
fault	$ZIGLIB/std/c/solaris.zig	/fault: u8/;"	field
fault_address	$ZIGLIB/std/os/linux/arm64.zig	/fault_address: usize/;"	field
faultvaddr	$ZIGLIB/std/c/darwin/x86_64.zig	/faultvaddr: u64/;"	field
fbreg	$ZIGLIB/std/dwarf/OP.zig	/^pub const fbreg = 0x91/;"	constant
fbs1	$ZIGLIB/std/io/multi_writer.zig	/var fbs1 = io.fixedBufferStream(&buf1)/;"	variable
fbs2	$ZIGLIB/std/io/multi_writer.zig	/var fbs2 = io.fixedBufferStream(&buf2)/;"	variable
fchdir	$ZIGLIB/std/os/posix_spawn.zig	/pub fn fchdir(self: *Actions, fd: fd_t) Error!void {$/;"	function
fchmod	$ZIGLIB/std/os/linux/syscalls.zig	/fchmod = Linux + 94/;"	field
fchmodat	$ZIGLIB/std/os/linux/syscalls.zig	/fchmodat = Linux + 299/;"	field
fchown	$ZIGLIB/std/os/linux/syscalls.zig	/fchown = Linux + 95/;"	field
fchown32	$ZIGLIB/std/os/linux/syscalls.zig	/fchown32 = 207/;"	field
fchownat	$ZIGLIB/std/os/linux/syscalls.zig	/fchownat = Linux + 291/;"	field
fcntl	$ZIGLIB/std/os/linux/syscalls.zig	/fcntl = Linux + 70/;"	field
fcntl64	$ZIGLIB/std/os/linux/syscalls.zig	/fcntl64 = Linux + 220/;"	field
fcpsgn	$ZIGLIB/std/target/powerpc.zig	/fcpsgn/;"	field
fctw	$ZIGLIB/std/c/solaris.zig	/fctw: u8/;"	field
fd_array	$ZIGLIB/std/os/windows/ws2_32.zig	/fd_array: [64]SOCKET/;"	field
fd_count	$ZIGLIB/std/os/windows/ws2_32.zig	/fd_count: u32/;"	field
fd_flags	$ZIGLIB/std/os.zig	/var fd_flags = fcntl(sock, F.GETFD, 0) catch |err| switch (err) {$/;"	variable
fd_index	$ZIGLIB/std/os/linux/io_uring.zig	/const fd_index = 0/;"	constant
fd_index2	$ZIGLIB/std/os/linux/io_uring.zig	/const fd_index2 = 1/;"	constant
fd_read	$ZIGLIB/std/os/wasi.zig	/fd_read: subscription_fd_readwrite_t/;"	field
fd_readwrite	$ZIGLIB/std/os/wasi.zig	/fd_readwrite: eventfdreadwrite_t/;"	field
fd_set	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const fd_set = extern struct {$/;"	struct
fd_t	$ZIGLIB/std/os/wasi.zig	/^pub const fd_t = i32/;"	constant
fd_type	$ZIGLIB/std/os/linux/bpf.zig	/fd_type: u32/;"	field
fd_usize	$ZIGLIB/std/os/linux.zig	/const fd_usize = @bitCast(usize, @as(isize, fd))/;"	constant
fd_write	$ZIGLIB/std/os/wasi.zig	/fd_write: subscription_fd_readwrite_t/;"	field
fdatasync	$ZIGLIB/std/os/linux/syscalls.zig	/fdatasync = Linux + 73/;"	field
fdflags	$ZIGLIB/std/fs.zig	/var fdflags: w.fdflags_t = 0x0/;"	variable
fdflags_t	$ZIGLIB/std/os/wasi.zig	/^pub const fdflags_t = u16/;"	constant
fdinfo	$ZIGLIB/std/c/solaris.zig	/pub const fdinfo = extern struct {$/;"	struct
fdivdu	$ZIGLIB/std/target/csky.zig	/fdivdu/;"	field
fds_count	$ZIGLIB/std/os.zig	/const fds_count = math.cast(nfds_t, fds.len) orelse return error.SystemResources/;"	constant
fdstat_t	$ZIGLIB/std/os/wasi.zig	/^pub const fdstat_t = extern struct {$/;"	struct
fe_f	$ZIGLIB/std/crypto/25519/field.zig	/var fe_f = fromBytes(fl)/;"	variable
fe_g	$ZIGLIB/std/crypto/25519/field.zig	/const fe_g = fromBytes(gl)/;"	constant
feat_index	$ZIGLIB/std/zig/CrossTarget.zig	/const feat_index = @intCast(Target.Cpu.Feature.Set.Index, feat_index_usize)/;"	constant
featureSet	$ZIGLIB/std/target.zig	/pub fn featureSet(features: []const F) Set {$/;"	function
featureSetHas	$ZIGLIB/std/target.zig	/pub fn featureSetHas(set: Set, feature: F) bool {$/;"	function
featureSetHasAll	$ZIGLIB/std/target.zig	/pub fn featureSetHasAll(set: Set, features: anytype) bool {$/;"	function
featureSetHasAny	$ZIGLIB/std/target.zig	/pub fn featureSetHasAny(set: Set, features: anytype) bool {$/;"	function
feature_count	$ZIGLIB/std/Build/CheckObjectStep.zig	/const feature_count = try std.leb.readULEB128(u32, reader)/;"	constant
feature_name	$ZIGLIB/std/zig/CrossTarget.zig	/const feature_name = cpu_features[start..index]/;"	constant
feature_set_fns	$ZIGLIB/std/target.zig	/pub fn feature_set_fns(comptime F: type) type {$/;"	function
features	$ZIGLIB/std/target.zig	/features: Feature.Set/;"	field
feed	$ZIGLIB/std/json.zig	/pub fn feed(p: *StreamingParser, c: u8, token1: *?Token, token2: *?Token) Error!void {$/;"	function
fence	$ZIGLIB/std/atomic/Atomic.zig	/pub inline fn fence(self: *Self, comptime ordering: Ordering) void {$/;"	function
fetch32	$ZIGLIB/std/hash/cityhash.zig	/^fn fetch32(ptr: [*]const u8, offset: usize) u32 {$/;"	function
fetch64	$ZIGLIB/std/hash/cityhash.zig	/^fn fetch64(ptr: [*]const u8, offset: usize) u64 {$/;"	function
fetchAdd	$ZIGLIB/std/atomic/Atomic.zig	/pub inline fn fetchAdd(self: *Self, value: T, comptime ordering: Ordering) T {$/;"	function
fetchAnd	$ZIGLIB/std/atomic/Atomic.zig	/pub inline fn fetchAnd(self: *Self, value: T, comptime ordering: Ordering) T {$/;"	function
fetchMax	$ZIGLIB/std/atomic/Atomic.zig	/pub inline fn fetchMax(self: *Self, value: T, comptime ordering: Ordering) T {$/;"	function
fetchMin	$ZIGLIB/std/atomic/Atomic.zig	/pub inline fn fetchMin(self: *Self, value: T, comptime ordering: Ordering) T {$/;"	function
fetchNand	$ZIGLIB/std/atomic/Atomic.zig	/pub inline fn fetchNand(self: *Self, value: T, comptime ordering: Ordering) T {$/;"	function
fetchOr	$ZIGLIB/std/atomic/Atomic.zig	/pub inline fn fetchOr(self: *Self, value: T, comptime ordering: Ordering) T {$/;"	function
fetchOrderedRemove	$ZIGLIB/std/array_hash_map.zig	/pub fn fetchOrderedRemove(self: *Self, key: K) ?KV {$/;"	function
fetchOrderedRemoveAdapted	$ZIGLIB/std/array_hash_map.zig	/pub fn fetchOrderedRemoveAdapted(self: *Self, key: anytype, ctx: anytype) ?KV {$/;"	function
fetchOrderedRemoveContext	$ZIGLIB/std/array_hash_map.zig	/pub fn fetchOrderedRemoveContext(self: *Self, key: K, ctx: Context) ?KV {$/;"	function
fetchOrderedRemoveContextAdapted	$ZIGLIB/std/array_hash_map.zig	/pub fn fetchOrderedRemoveContextAdapted(self: *Self, key: anytype, key_ctx: anytype, ctx: Context) ?KV {$/;"	function
fetchPut	$ZIGLIB/std/hash_map.zig	/pub fn fetchPut(self: *Self, key: K, value: V) Allocator.Error!?KV {$/;"	function
fetchPutAssumeCapacity	$ZIGLIB/std/hash_map.zig	/pub fn fetchPutAssumeCapacity(self: *Self, key: K, value: V) ?KV {$/;"	function
fetchPutAssumeCapacityContext	$ZIGLIB/std/hash_map.zig	/pub fn fetchPutAssumeCapacityContext(self: *Self, key: K, value: V, ctx: Context) ?KV {$/;"	function
fetchPutContext	$ZIGLIB/std/hash_map.zig	/pub fn fetchPutContext(self: *Self, allocator: Allocator, key: K, value: V, ctx: Context) Allocator.Error!?KV {$/;"	function
fetchRemove	$ZIGLIB/std/hash_map.zig	/pub fn fetchRemove(self: *Self, key: K) ?KV {$/;"	function
fetchRemoveAdapted	$ZIGLIB/std/hash_map.zig	/pub fn fetchRemoveAdapted(self: *Self, key: anytype, ctx: anytype) ?KV {$/;"	function
fetchRemoveByKey	$ZIGLIB/std/array_hash_map.zig	/fn fetchRemoveByKey(self: *Self, key: anytype, key_ctx: anytype, ctx: ByIndexContext, comptime removal_type: RemovalType) ?KV {$/;"	function
fetchRemoveByKeyGeneric	$ZIGLIB/std/array_hash_map.zig	/fn fetchRemoveByKeyGeneric(self: *Self, key: anytype, key_ctx: anytype, ctx: ByIndexContext, header: *IndexHeader, comptime I: type, comptime removal_type: RemovalType) ?KV {$/;"	function
fetchRemoveContext	$ZIGLIB/std/hash_map.zig	/pub fn fetchRemoveContext(self: *Self, key: K, ctx: Context) ?KV {$/;"	function
fetchSub	$ZIGLIB/std/atomic/Atomic.zig	/pub inline fn fetchSub(self: *Self, value: T, comptime ordering: Ordering) T {$/;"	function
fetchSwapRemove	$ZIGLIB/std/array_hash_map.zig	/pub fn fetchSwapRemove(self: *Self, key: K) ?KV {$/;"	function
fetchSwapRemoveAdapted	$ZIGLIB/std/array_hash_map.zig	/pub fn fetchSwapRemoveAdapted(self: *Self, key: anytype, ctx: anytype) ?KV {$/;"	function
fetchSwapRemoveContext	$ZIGLIB/std/array_hash_map.zig	/pub fn fetchSwapRemoveContext(self: *Self, key: K, ctx: Context) ?KV {$/;"	function
fetchSwapRemoveContextAdapted	$ZIGLIB/std/array_hash_map.zig	/pub fn fetchSwapRemoveContextAdapted(self: *Self, key: anytype, key_ctx: anytype, ctx: Context) ?KV {$/;"	function
fetchXor	$ZIGLIB/std/atomic/Atomic.zig	/pub inline fn fetchXor(self: *Self, value: T, comptime ordering: Ordering) T {$/;"	function
fetch_op_N	$ZIGLIB/compiler_rt/atomics.zig	/^inline fn fetch_op_N(comptime T: type, comptime op: std.builtin.AtomicRmwOp, ptr: *T, val: T, model: i32) T {$/;"	function
fetched_args	$ZIGLIB/std/process.zig	/const fetched_args = try ArgIteratorWasi.internalInit(allocator)/;"	constant
ffdhe2048	$ZIGLIB/std/crypto/tls.zig	/ffdhe2048 = 0x0100/;"	field
ffdhe3072	$ZIGLIB/std/crypto/tls.zig	/ffdhe3072 = 0x0101/;"	field
ffdhe4096	$ZIGLIB/std/crypto/tls.zig	/ffdhe4096 = 0x0102/;"	field
ffdhe6144	$ZIGLIB/std/crypto/tls.zig	/ffdhe6144 = 0x0103/;"	field
ffdhe8192	$ZIGLIB/std/crypto/tls.zig	/ffdhe8192 = 0x0104/;"	field
fflags	$ZIGLIB/std/c/openbsd.zig	/fflags: c_uint/;"	field
fflags_t	$ZIGLIB/std/c/freebsd.zig	/^pub const fflags_t = u32/;"	constant
ffsXi2	$ZIGLIB/compiler_rt/count0bits.zig	/^inline fn ffsXi2(comptime T: type, a: T) i32 {$/;"	function
fgetxattr	$ZIGLIB/std/os/linux/syscalls.zig	/fgetxattr = Linux + 229/;"	field
fiat	$ZIGLIB/std/crypto/pcurves/common.zig	/fiat: type/;"	field
fib_lookup	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const fib_lookup = @intToPtr(fn (ctx: ?*anyopaque, params: *kern.FibLookup, plen: c_int, flags: u32) c_long, 69)/;"	constant
fibonacci_multiplier	$ZIGLIB/std/Thread/Futex.zig	/const fibonacci_multiplier = 0x9E3779B97F4A7C15 >> (64 - max_multiplier_bits)/;"	constant
field	$ZIGLIB/std/zig/render.zig	/var field = field_param/;"	variable
fieldIndex	$ZIGLIB/std/meta.zig	/^pub fn fieldIndex(comptime T: type, comptime name: []const u8) ?comptime_int {$/;"	function
fieldInfo	$ZIGLIB/std/meta.zig	/^pub fn fieldInfo(comptime T: type, comptime field: FieldEnum(T)) switch (@typeInfo(T)) {$/;"	function
fieldInfos	$ZIGLIB/std/meta.zig	/const fieldInfos = std.meta.declarations(T)/;"	constant
fieldNames	$ZIGLIB/std/meta.zig	/^pub fn fieldNames(comptime T: type) *const [fields(T).len][]const u8 {$/;"	function
field_access	$ZIGLIB/std/zig/render.zig	/const field_access = datas[node]/;"	constant
field_bits	$ZIGLIB/std/crypto/pcurves/common.zig	/field_bits: comptime_int/;"	field
field_count	$ZIGLIB/std/Build/CheckObjectStep.zig	/const field_count = try std.leb.readULEB128(u32, reader)/;"	constant
field_index	$ZIGLIB/std/meta/trailer_flags.zig	/const field_index = @enumToInt(field)/;"	constant
field_indexes	$ZIGLIB/std/multi_array_list.zig	/var field_indexes: [fields.len]usize = undefined/;"	variable
field_infos	$ZIGLIB/std/meta.zig	/const field_infos = fields(T)/;"	constant
field_init	$ZIGLIB/std/zig/Parse.zig	/const field_init = try p.parseFieldInit()/;"	constant
field_name	$ZIGLIB/std/Build/CheckObjectStep.zig	/const field_name = data[reader.context.pos..][0..field_name_length]/;"	constant
field_name_length	$ZIGLIB/std/Build/CheckObjectStep.zig	/const field_name_length = try std.leb.readULEB128(u32, reader)/;"	constant
field_order	$ZIGLIB/std/crypto/pcurves/common.zig	/field_order: comptime_int/;"	field
field_order_s	$ZIGLIB/std/crypto/pcurves/common.zig	/const field_order_s = comptime fos: {$/;"	constant
field_output	$ZIGLIB/std/json.zig	/var field_output = false/;"	variable
field_slice	$ZIGLIB/std/multi_array_list.zig	/const field_slice = slices.items(@intToEnum(Field, i))/;"	constant
field_state	$ZIGLIB/std/zig/Parse.zig	/var field_state: union(enum) {$/;"	variable
fields	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/const fields = std.meta.fields(Target.Abi)[1..]/;"	constant
fields_delimiter	$ZIGLIB/std/crypto/phc_encoding.zig	/^const fields_delimiter = "$"/;"	constant
fields_info	$ZIGLIB/std/zig/system/windows.zig	/const fields_info = args_type_info.Struct.fields/;"	constant
fields_len	$ZIGLIB/std/enums.zig	/const fields_len = fields.len/;"	constant
fields_list	$ZIGLIB/std/meta.zig	/const fields_list = std.meta.fields(Actual)/;"	constant
fields_range	$ZIGLIB/std/zig/Ast.zig	/const fields_range = tree.extraData(data.rhs, Node.SubRange)/;"	constant
fields_seen	$ZIGLIB/std/json.zig	/var fields_seen = [_]bool{false} ** structInfo.fields.len/;"	variable
fifo	$ZIGLIB/std/tar.zig	/fifo = '6'/;"	field
fiji	$ZIGLIB/std/target/amdgpu.zig	/pub const fiji = CpuModel{$/;"	constant
file	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/const file = fs.openFileAbsolute(file_name, .{}) catch |err| switch (err) {$/;"	constant
fileExt	$ZIGLIB/std/target.zig	/pub fn fileExt(of: ObjectFormat, cpu_arch: Cpu.Arch) [:0]const u8 {$/;"	function
fileSize	$ZIGLIB/std/tar.zig	/pub fn fileSize(header: Header) !u64 {$/;"	function
fileTimeToNanoSeconds	$ZIGLIB/std/os/windows.zig	/^pub fn fileTimeToNanoSeconds(ft: FILETIME) i128 {$/;"	function
fileType	$ZIGLIB/std/tar.zig	/pub fn fileType(header: Header) FileType {$/;"	function
file_alignment	$ZIGLIB/std/coff.zig	/file_alignment: u32/;"	field
file_bytes	$ZIGLIB/std/dynamic_library.zig	/const file_bytes = try os.mmap($/;"	constant
file_def	$ZIGLIB/std/coff.zig	/file_def: FileDefinition/;"	field
file_ent_fmt_buf	$ZIGLIB/std/dwarf.zig	/var file_ent_fmt_buf: [10]FileEntFmt = undefined/;"	variable
file_entries	$ZIGLIB/std/dwarf.zig	/var file_entries = std.ArrayList(FileEntry).init(arena)/;"	variable
file_entry	$ZIGLIB/std/dwarf.zig	/const file_entry = &file_entries[file_index]/;"	constant
file_exists	$ZIGLIB/std/fs.zig	/file_exists: bool/;"	field
file_flags	$ZIGLIB/std/os/linux/bpf.zig	/file_flags: u32/;"	field
file_gop	$ZIGLIB/std/fs/watch.zig	/const file_gop = try dir.file_table.getOrPut(self.allocator, basename)/;"	constant
file_index	$ZIGLIB/std/dwarf.zig	/const file_index = if (self.version >= 5) self.prev_file else i: {$/;"	constant
file_info_buf_size	$ZIGLIB/std/child_process.zig	/const file_info_buf_size = @sizeOf(windows.FILE_DIRECTORY_INFORMATION) + (windows.NAME_MAX * 2)/;"	constant
file_information_buf	$ZIGLIB/std/child_process.zig	/var file_information_buf: [file_info_buf_size]u8 align(@alignOf(os.windows.FILE_DIRECTORY_INFORMATION)) = undefined/;"	variable
file_it	$ZIGLIB/std/fs/watch.zig	/var file_it = wd_entry.value.file_table.keyIterator()/;"	variable
file_len	$ZIGLIB/std/pdb.zig	/const file_len = try file.getEndPos()/;"	constant
file_magic	$ZIGLIB/std/pdb.zig	/pub const file_magic = "Microsoft C\/C++ MSF 7.00\\r\\n\\x1a\\x44\\x53\\x00\\x00\\x00"/;"	constant
file_name	.\/env"/;"	variable
file_name_buffer	$ZIGLIB/std/tar.zig	/var file_name_buffer: [255]u8 = undefined/;"	variable
file_name_entry_format_count	$ZIGLIB/std/dwarf.zig	/const file_name_entry_format_count = try in.readByte()/;"	constant
file_name_u16	$ZIGLIB/std/os/windows.zig	/const file_name_u16 = final_path[file_path_begin_index..]/;"	constant
file_names_count	$ZIGLIB/std/dwarf.zig	/const file_names_count = try leb.readULEB128(usize, in)/;"	constant
file_obj	$ZIGLIB/std/c/solaris.zig	/^pub const file_obj = extern struct {$/;"	struct
file_off	$ZIGLIB/std/tar.zig	/var file_off: usize = 0/;"	variable
file_only	$ZIGLIB/std/os/windows.zig	/file_only/;"	field
file_open	$ZIGLIB/std/fs.zig	/file_open: bool/;"	field
file_or_dir_flag	$ZIGLIB/std/os/windows.zig	/const file_or_dir_flag: ULONG = switch (options.filter) {$/;"	constant
file_path	$ZIGLIB/std/os/uefi/protocols/loaded_image_protocol.zig	/file_path: *DevicePathProtocol/;"	field
file_path_begin_index	$ZIGLIB/std/os/windows.zig	/const file_path_begin_index = mem.indexOfPos(u16, final_path, expected_prefix.len, &[_]u16{'\\\\'}) orelse unreachable/;"	constant
file_path_c	$ZIGLIB/std/os.zig	/const file_path_c = try toPosixPath(file_path)/;"	constant
file_path_w	$ZIGLIB/std/os.zig	/const file_path_w = try windows.sliceToPrefixedFileW(file_path)/;"	constant
file_size	$ZIGLIB/std/tar.zig	/const file_size = try header.fileSize()/;"	constant
file_slice	$ZIGLIB/std/os.zig	/const file_slice = mem.sliceTo(file, 0)/;"	constant
file_source	$ZIGLIB/std/Build/RunStep.zig	/file_source: std.Build.FileSource/;"	field
file_source_args	$ZIGLIB/std/Build/OptionsStep.zig	/^file_source_args: std.ArrayList(OptionFileSourceArg)/;"	field
file_table	$ZIGLIB/std/fs/watch.zig	/file_table: FileTable/;"	field
file_table_gop	$ZIGLIB/std/fs/watch.zig	/const file_table_gop = try dir.file_table.getOrPut(self.allocator, basename)/;"	constant
file_type	$ZIGLIB/std/dwarf/TAG.zig	/^pub const file_type = 0x29/;"	constant
file_writer	$ZIGLIB/std/io/buffered_atomic_file.zig	/file_writer: File.Writer/;"	field
filedelta_t	$ZIGLIB/std/os/wasi.zig	/^pub const filedelta_t = i64/;"	constant
fileflags	$ZIGLIB/std/c/solaris.zig	/fileflags: i32/;"	field
fileid	$ZIGLIB/std/c/freebsd.zig	/fileid: u64/;"	field
filename	$ZIGLIB/std/io/c_writer.zig	/const filename = "tmp_io_test_file.txt"/;"	constant
filename_w	$ZIGLIB/std/os/windows.zig	/const filename_w = try sliceToPrefixedFileW(filename)/;"	constant
fileoff	$ZIGLIB/std/macho.zig	/fileoff: u64 = 0/;"	field
files	$ZIGLIB/std/Build/WriteFileStep.zig	/^files: std.TailQueue(File)/;"	field
files_copy	$ZIGLIB/std/Build/CompileStep.zig	/const files_copy = self.builder.dupeStrings(files)/;"	constant
filesize	$ZIGLIB/std/macho.zig	/filesize: u64 = 0/;"	field
filesize_t	$ZIGLIB/std/os/wasi.zig	/^pub const filesize_t = u64/;"	constant
filestat_t	$ZIGLIB/std/os/wasi.zig	/^pub const filestat_t = extern struct {$/;"	struct
filesz	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/const filesz = @intCast(usize, p_filesz)/;"	constant
filetype	$ZIGLIB/std/os/wasi.zig	/filetype: filetype_t/;"	field
filetype_t	$ZIGLIB/std/os/wasi.zig	/^pub const filetype_t = enum(u8) {$/;"	enum
fill	$ZIGLIB/std/rand/Xoshiro256.zig	/^pub fn fill(self: *Xoshiro256, buf: []u8) void {$/;"	function
fillBlockBuf	$ZIGLIB/std/crypto/blake3.zig	/fn fillBlockBuf(self: *ChunkState, input: []const u8) []const u8 {$/;"	function
fillDeflate	$ZIGLIB/std/compress/deflate/compressor.zig	/fn fillDeflate(self: *Self, b: []const u8) u32 {$/;"	function
fillEven	$ZIGLIB/std/bit_set.zig	/^fn fillEven(set: anytype, len: usize) void {$/;"	function
fillFn	$ZIGLIB/std/rand.zig	/fillFn: *const fn (ptr: *anyopaque, buf: []u8) void/;"	field
fillOdd	$ZIGLIB/std/bit_set.zig	/^fn fillOdd(set: anytype, len: usize) void {$/;"	function
fillStore	$ZIGLIB/std/compress/deflate/compressor.zig	/fn fillStore(self: *Self, b: []const u8) u32 {$/;"	function
fillWindow	$ZIGLIB/std/compress/deflate/compressor.zig	/fn fillWindow(self: *Self, in_b: []const u8) void {$/;"	function
fillWithCsprng	$ZIGLIB/std/crypto/tlcsprng.zig	/^fn fillWithCsprng(buffer: []u8) void {$/;"	function
fill_chars	$ZIGLIB/std/Progress.zig	/const fill_chars = @intCast(windows.DWORD, info.dwSize.X - cursor_pos.X)/;"	constant
fill_value	$ZIGLIB/std/bit_set.zig	/const fill_value = std.math.boolMask(MaskInt, fill)/;"	constant
filled	$ZIGLIB/std/compress/deflate/compressor.zig	/var filled = self.fill(buf)/;"	variable
filler	$ZIGLIB/std/c/solaris.zig	/filler: [2]i64/;"	field
filter	$ZIGLIB/std/os/windows.zig	/filter: Filter = .file_only/;"	field
filter_count	$ZIGLIB/std/compress/xz/block.zig	/const filter_count = @as(u3, flags.last_filter_index) + 1/;"	constant
filter_id	$ZIGLIB/std/compress/xz/block.zig	/const filter_id = @intToEnum($/;"	constant
filtered_sock_type	$ZIGLIB/std/os.zig	/const filtered_sock_type = socket_type & ~@as(u32, SOCK.NONBLOCK | SOCK.CLOEXEC)/;"	constant
final	$ZIGLIB/std/hash/wyhash.zig	/pub fn final(self: *WyhashStateless, b: []const u8) u64 {$/;"	function
finalInt	$ZIGLIB/std/crypto/siphash.zig	/pub fn finalInt(self: *Self) T {$/;"	function
finalResult	$ZIGLIB/std/crypto/siphash.zig	/pub fn finalResult(self: *Self) [mac_length]u8 {$/;"	function
final_block	$ZIGLIB/std/crypto/aes_gcm.zig	/var final_block = h/;"	variable
final_eventfd	$ZIGLIB/std/event/loop.zig	/final_eventfd: i32/;"	field
final_eventfd_event	$ZIGLIB/std/event/loop.zig	/final_eventfd_event: os.linux.epoll_event/;"	field
final_kev_arr	$ZIGLIB/std/event/loop.zig	/const final_kev_arr = @as(*const [1]os.Kevent, &self.os_data.final_kevent)/;"	constant
final_kevent	$ZIGLIB/std/event/loop.zig	/final_kevent: os.Kevent/;"	field
final_path	$ZIGLIB/std/os/windows.zig	/const final_path = QueryObjectName(hFile, out_buffer) catch |err| switch (err) {$/;"	constant
final_resume_node	$ZIGLIB/std/event/loop.zig	/final_resume_node: ResumeNode/;"	field
final_wg	$ZIGLIB/std/event/wait_group.zig	/var final_wg = WaitGroup{}/;"	variable
finalize	$ZIGLIB/std/zig/system/linux.zig	/fn finalize(self: *const SparcCpuinfoImpl, arch: Target.Cpu.Arch) ?Target.Cpu {$/;"	function
find	$ZIGLIB/std/treap.zig	/fn find(self: Self, key: Key, parent_ref: *?*Node) ?*Node {$/;"	function
findA	$ZIGLIB/std/sort.zig	/var findA: usize = undefined/;"	variable
findBitIndex	$ZIGLIB/std/array_hash_map.zig	/fn findBitIndex(desired_capacity: usize) !u8 {$/;"	function
findByteOutStream	$ZIGLIB/std/io.zig	/^pub const findByteOutStream = @compileError("deprecated; use `findByteWriter`")/;"	constant
findByteWriter	$ZIGLIB/std/io/find_byte_writer.zig	/^pub fn findByteWriter(byte: u8, underlying_writer: anytype) FindByteWriter(@TypeOf(underlying_writer)) {$/;"	function
findChunkedLen	$ZIGLIB/std/http/Client.zig	/pub fn findChunkedLen(r: *Response, bytes: []const u8) usize {$/;"	function
findCompileUnit	$ZIGLIB/std/dwarf.zig	/pub fn findCompileUnit(di: *DwarfInfo, target_address: u64) !*const CompileUnit {$/;"	function
findFirstBackward	$ZIGLIB/std/sort.zig	/^fn findFirstBackward($/;"	function
findFirstForward	$ZIGLIB/std/sort.zig	/^fn findFirstForward($/;"	function
findFirstSet	$ZIGLIB/std/bit_set.zig	/pub fn findFirstSet(self: Self) ?usize {$/;"	function
findHeadersEnd	$ZIGLIB/std/http/Client.zig	/pub fn findHeadersEnd(r: *Response, bytes: []const u8) usize {$/;"	function
findLast	$ZIGLIB/std/linked_list.zig	/pub fn findLast(node: *Node) *Node {$/;"	function
findLastBackward	$ZIGLIB/std/sort.zig	/^fn findLastBackward($/;"	function
findLastForward	$ZIGLIB/std/sort.zig	/^fn findLastForward($/;"	function
findLineColumn	$ZIGLIB/std/zig.zig	/^pub fn findLineColumn(source: []const u8, byte_offset: usize) Loc {$/;"	function
findMatch	$ZIGLIB/std/compress/deflate/compressor.zig	/fn findMatch($/;"	function
findNextContainerMember	$ZIGLIB/std/zig/Parse.zig	/^fn findNextContainerMember(p: *Parse) void {$/;"	function
findNextStmt	$ZIGLIB/std/zig/Parse.zig	/^fn findNextStmt(p: *Parse) void {$/;"	function
findProgram	$ZIGLIB/std/Build.zig	/^pub fn findProgram(self: *Build, names: []const []const u8, paths: []const []const u8) ![]const u8 {$/;"	function
findVcpkgRoot	$ZIGLIB/std/Build/CompileStep.zig	/^fn findVcpkgRoot(allocator: Allocator) !?[]const u8 {$/;"	function
find_separately	$ZIGLIB/std/sort.zig	/var find_separately = false/;"	variable
fingerprint	$ZIGLIB/std/hash_map.zig	/fingerprint: FingerPrint = free/;"	field
finish	$ZIGLIB/std/io/buffered_atomic_file.zig	/pub fn finish(self: *BufferedAtomicFile) !void {$/;"	function
finishBlock	$ZIGLIB/std/compress/deflate/decompressor.zig	/fn finishBlock(self: *Self) void {$/;"	function
finishOneEvent	$ZIGLIB/std/event/loop.zig	/pub fn finishOneEvent(self: *Loop) void {$/;"	function
finishRead	$ZIGLIB/std/crypto/tls/Client.zig	/^fn finishRead(c: *Client, frag: []const u8, in: usize, out: usize) usize {$/;"	function
finishRead2	$ZIGLIB/std/crypto/tls/Client.zig	/^fn finishRead2(c: *Client, first: []const u8, frag1: []const u8, out: usize) usize {$/;"	function
finish_barrier	$ZIGLIB/std/Thread/ResetEvent.zig	/finish_barrier: Barrier = .{}/;"	field
finished	$ZIGLIB/std/sort.zig	/fn finished(self: *Iterator) bool {$/;"	function
finished_digest	$ZIGLIB/std/crypto/tls/Client.zig	/const finished_digest = p.transcript_hash.peek()/;"	constant
finished_msg	$ZIGLIB/std/crypto/tls/Client.zig	/var finished_msg = [_]u8{$/;"	variable
finit_module	$ZIGLIB/std/os/linux/syscalls.zig	/finit_module = Linux + 348/;"	field
firmware_revision	$ZIGLIB/std/os/uefi/tables/system_table.zig	/firmware_revision: u32/;"	field
firmware_vendor	$ZIGLIB/std/os/uefi/tables/system_table.zig	/firmware_vendor: [*:0]u16/;"	field
first	$ZIGLIB/std/os/windows.zig	/var first = true/;"	variable
first8Words	$ZIGLIB/std/crypto/blake3.zig	/^fn first8Words(words: [16]u32) [8]u32 {$/;"	function
firstA	$ZIGLIB/std/sort.zig	/var firstA = Range.init(A.start, A.start + blockA.length() % block_size)/;"	variable
firstChildIndex	$ZIGLIB/std/priority_dequeue.zig	/fn firstChildIndex(index: usize) usize {$/;"	function
firstCodeUnit	$ZIGLIB/std/json.zig	/const firstCodeUnit = std.fmt.parseInt(u16, input[inIndex + 2 .. inIndex + 6], 16) catch unreachable/;"	constant
firstGrandchildIndex	$ZIGLIB/std/priority_dequeue.zig	/fn firstGrandchildIndex(index: usize) usize {$/;"	function
firstIndexOfValue	$ZIGLIB/std/simd.zig	/^pub fn firstIndexOfValue(vec: anytype, value: std.meta.Child(@TypeOf(vec))) ?VectorIndex(@TypeOf(vec)) {$/;"	function
firstIs	$ZIGLIB/std/fmt/parse_float/FloatStream.zig	/^pub fn firstIs(self: FloatStream, c: u8) bool {$/;"	function
firstIs2	$ZIGLIB/std/fmt/parse_float/FloatStream.zig	/^pub fn firstIs2(self: FloatStream, c1: u8, c2: u8) bool {$/;"	function
firstIs3	$ZIGLIB/std/fmt/parse_float/FloatStream.zig	/^pub fn firstIs3(self: FloatStream, c1: u8, c2: u8, c3: u8) bool {$/;"	function
firstIsDigit	$ZIGLIB/std/fmt/parse_float/FloatStream.zig	/^pub fn firstIsDigit(self: FloatStream, comptime base: u8) bool {$/;"	function
firstIsLower	$ZIGLIB/std/fmt/parse_float/FloatStream.zig	/^pub fn firstIsLower(self: FloatStream, c: u8) bool {$/;"	function
firstToken	$ZIGLIB/std/zig/Ast.zig	/pub fn firstToken(var_decl: VarDecl) TokenIndex {$/;"	function
firstTrue	$ZIGLIB/std/simd.zig	/^pub fn firstTrue(vec: anytype) ?VectorIndex(@TypeOf(vec)) {$/;"	function
firstUnchecked	$ZIGLIB/std/fmt/parse_float/FloatStream.zig	/^pub fn firstUnchecked(self: FloatStream) u8 {$/;"	function
first_32_bits	$ZIGLIB/std/dwarf.zig	/const first_32_bits = try in_stream.readInt(u32, endian)/;"	constant
first_addr	$ZIGLIB/std/debug.zig	/const first_addr = first_address orelse {$/;"	constant
first_address	$ZIGLIB/std/debug.zig	/first_address: ?usize/;"	field
first_bits	$ZIGLIB/std/compress/deflate/huffman_bit_writer.zig	/var first_bits: u32 = 4/;"	variable
first_bucket	$ZIGLIB/std/heap/general_purpose_allocator.zig	/const first_bucket = self.buckets[bucket_index] orelse try self.createBucket($/;"	constant
first_buffer	$ZIGLIB/std/net.zig	/const first_buffer = iovecs[0].iov_base[0..iovecs[0].iov_len]/;"	constant
first_c	$ZIGLIB/std/zig/primitives.zig	/const first_c = name[0]/;"	constant
first_child_index	$ZIGLIB/std/priority_dequeue.zig	/const first_child_index = firstChildIndex(index)/;"	constant
first_clobber	$ZIGLIB/std/zig/render.zig	/const first_clobber = asm_node.first_clobber.?/;"	constant
first_doc_comment	$ZIGLIB/std/zig/Ast.zig	/var first_doc_comment: ?TokenIndex = null/;"	variable
first_entry	$ZIGLIB/std/array_hash_map.zig	/const first_entry = it.next().?/;"	constant
first_file	$ZIGLIB/std/os/linux/io_uring.zig	/const first_file = try std.fs.cwd().createFile(first_path, .{ .truncate = true, .mode = 0o666 })/;"	constant
first_grandchild_index	$ZIGLIB/std/priority_dequeue.zig	/const first_grandchild_index = firstGrandchildIndex(index)/;"	constant
first_header	$ZIGLIB/std/Ini.zig	/const first_header = header[1..]/;"	constant
first_index	$ZIGLIB/std/fs/path.zig	/var first_index: usize = 0/;"	variable
first_iov	$ZIGLIB/std/crypto/tls/Client.zig	/const first_iov = c.partially_read_buffer[c.partial_ciphertext_end..]/;"	constant
first_item_ptr	$ZIGLIB/std/process.zig	/const first_item_ptr = self.args[0].ptr/;"	constant
first_iter	$ZIGLIB/std/fs.zig	/first_iter: bool/;"	field
first_line	$ZIGLIB/std/zig/Parse.zig	/var first_line = tok/;"	variable
first_name_text	$ZIGLIB/std/net.zig	/var first_name_text: ?[]const u8 = null/;"	variable
first_param_token	$ZIGLIB/std/zig/render.zig	/const first_param_token = tree.firstToken(param_node)/;"	constant
first_path	$ZIGLIB/std/os/linux/io_uring.zig	/const first_path = "test_io_uring_linkat_first"/;"	constant
first_path_index	$ZIGLIB/std/fs/path.zig	/const first_path_index = blk: {$/;"	constant
first_tok	$ZIGLIB/std/zig/render.zig	/const first_tok = tok/;"	constant
first_token	$ZIGLIB/std/zig/render.zig	/const first_token = tree.firstToken(only_elem)/;"	constant
first_tombstone_idx	$ZIGLIB/std/hash_map.zig	/var first_tombstone_idx: usize = self.capacity()/;"	variable
first_trace_addr	$ZIGLIB/std/builtin.zig	/const first_trace_addr = ret_addr orelse @returnAddress()/;"	constant
fits	$ZIGLIB/std/math/big/int.zig	/pub fn fits(self: Managed, comptime T: type) bool {$/;"	function
fitsInTwosComp	$ZIGLIB/std/math/big/int.zig	/pub fn fitsInTwosComp(self: Managed, signedness: Signedness, bit_count: usize) bool {$/;"	function
five	$ZIGLIB/std/linked_list.zig	/var five = L.Node{ .data = 5 }/;"	variable
fix_cmse_cve_2021_35465	$ZIGLIB/std/target/arm.zig	/fix_cmse_cve_2021_35465/;"	field
fix_cortex_a53_835769	$ZIGLIB/std/target/aarch64.zig	/fix_cortex_a53_835769/;"	field
fix_cortex_a57_aes_1742098	$ZIGLIB/std/target/arm.zig	/fix_cortex_a57_aes_1742098/;"	field
fixallfdivsqrt	$ZIGLIB/std/target/sparc.zig	/fixallfdivsqrt/;"	field
fixedBufferAllocator	$ZIGLIB/std/heap/log_to_writer_allocator.zig	/var fixedBufferAllocator = std.mem.validationWrap(std.heap.FixedBufferAllocator.init(&allocator_buf))/;"	variable
fixedBufferStream	$ZIGLIB/std/io/fixed_buffer_stream.zig	/^pub fn fixedBufferStream(buffer: anytype) FixedBufferStream(Slice(@TypeOf(buffer))) {$/;"	function
fixedHuffmanDecoderInit	$ZIGLIB/std/compress/deflate/decompressor.zig	/^fn fixedHuffmanDecoderInit(allocator: Allocator) !HuffmanDecoder {$/;"	function
fixedIntFromSignedDoubleLimb	$ZIGLIB/std/math/big/int.zig	/^fn fixedIntFromSignedDoubleLimb(A: SignedDoubleLimb, storage: []Limb) Mutable {$/;"	function
fixedSize	$ZIGLIB/std/compress/deflate/huffman_bit_writer.zig	/fn fixedSize(self: *Self, extra_bits: u32) u32 {$/;"	function
fixed_advance_pc	$ZIGLIB/std/dwarf.zig	/pub const fixed_advance_pc = 0x09/;"	constant
fixed_buf_alloc	$ZIGLIB/std/zig/string_literal.zig	/var fixed_buf_alloc = std.heap.FixedBufferAllocator.init(&fixed_buf_mem)/;"	variable
fixed_buf_mem	$ZIGLIB/std/zig/string_literal.zig	/var fixed_buf_mem: [64]u8 = undefined/;"	variable
fixed_buffer_allocator	$ZIGLIB/std/heap.zig	/var fixed_buffer_allocator = mem.validationWrap(FixedBufferAllocator.init(test_fixed_buffer_allocator_memory[0..]))/;"	variable
fixed_buffer_mem	$ZIGLIB/std/sort.zig	/^var fixed_buffer_mem: [100 * 1024]u8 = undefined/;"	variable
fixed_huffman_decoder	$ZIGLIB/std/compress/deflate/decompressor.zig	/^var fixed_huffman_decoder: ?HuffmanDecoder = null/;"	variable
fixed_literal_encoding	$ZIGLIB/std/compress/deflate/huffman_bit_writer.zig	/fixed_literal_encoding: hm_code.HuffmanEncoder/;"	field
fixed_offset_encoding	$ZIGLIB/std/compress/deflate/huffman_bit_writer.zig	/fixed_offset_encoding: hm_code.HuffmanEncoder/;"	field
fl_flags	$ZIGLIB/std/os.zig	/var fl_flags = fcntl(sock, F.GETFL, 0) catch |err| switch (err) {$/;"	variable
flag	$ZIGLIB/std/dwarf/FORM.zig	/^pub const flag = 0x0c/;"	constant
flag1	$ZIGLIB/std/c/solaris.zig	/flag1: u16 = 0/;"	field
flag2	$ZIGLIB/std/c/solaris.zig	/flag2: u8 = 0/;"	field
flag_present	$ZIGLIB/std/dwarf/FORM.zig	/^pub const flag_present = 0x19/;"	constant
flagm	$ZIGLIB/std/target/aarch64.zig	/flagm/;"	field
flags	$ZIGLIB/std/tz.zig	/flags: u8/;"	field
flags1	$ZIGLIB/std/elf.zig	/flags1: Elf32_Word/;"	field
flags2	$ZIGLIB/std/elf.zig	/flags2: Elf32_Word/;"	field
flags_copy	$ZIGLIB/std/Build/CompileStep.zig	/const flags_copy = self.builder.dupeStrings(flags)/;"	constant
flags_inout	$ZIGLIB/std/os/windows.zig	/var flags_inout = flags/;"	variable
flash	$ZIGLIB/std/builtin.zig	/flash/;"	field
flash1	$ZIGLIB/std/builtin.zig	/flash1/;"	field
flash2	$ZIGLIB/std/builtin.zig	/flash2/;"	field
flash3	$ZIGLIB/std/builtin.zig	/flash3/;"	field
flash4	$ZIGLIB/std/builtin.zig	/flash4/;"	field
flash5	$ZIGLIB/std/builtin.zig	/flash5/;"	field
flat_address_space	$ZIGLIB/std/target/amdgpu.zig	/flat_address_space/;"	field
flat_for_global	$ZIGLIB/std/target/amdgpu.zig	/flat_for_global/;"	field
flat_global_insts	$ZIGLIB/std/target/amdgpu.zig	/flat_global_insts/;"	field
flat_inst_offsets	$ZIGLIB/std/target/amdgpu.zig	/flat_inst_offsets/;"	field
flat_scratch	$ZIGLIB/std/target/amdgpu.zig	/flat_scratch/;"	field
flat_scratch_insts	$ZIGLIB/std/target/amdgpu.zig	/flat_scratch_insts/;"	field
flat_segment_offset_bug	$ZIGLIB/std/target/amdgpu.zig	/flat_segment_offset_bug/;"	field
flavors	$ZIGLIB/std/os/darwin.zig	/flavors: [std.c.EXC_TYPES_COUNT]std.c.thread_state_flavor_t/;"	field
flistxattr	$ZIGLIB/std/os/linux/syscalls.zig	/flistxattr = Linux + 232/;"	field
float	$ZIGLIB/std/zig/tokenizer.zig	/float/;"	field
float128	$ZIGLIB/std/target/powerpc.zig	/float128/;"	field
float1e2	$ZIGLIB/std/target/csky.zig	/float1e2/;"	field
float1e3	$ZIGLIB/std/target/csky.zig	/float1e3/;"	field
float3e4	$ZIGLIB/std/target/csky.zig	/float3e4/;"	field
float7e60	$ZIGLIB/std/target/csky.zig	/float7e60/;"	field
floatAbi	$ZIGLIB/std/target.zig	/pub fn floatAbi(abi: Abi) FloatAbi {$/;"	function
floatEps	$ZIGLIB/std/math/float.zig	/^pub inline fn floatEps(comptime T: type) T {$/;"	function
floatExp	$ZIGLIB/std/rand.zig	/pub fn floatExp(r: Random, comptime T: type) T {$/;"	function
floatExponentBits	$ZIGLIB/std/math/float.zig	/^pub inline fn floatExponentBits(comptime T: type) comptime_int {$/;"	function
floatExponentMax	$ZIGLIB/std/math/float.zig	/^pub inline fn floatExponentMax(comptime T: type) comptime_int {$/;"	function
floatExponentMin	$ZIGLIB/std/math/float.zig	/^pub inline fn floatExponentMin(comptime T: type) comptime_int {$/;"	function
floatFractionalBits	$ZIGLIB/std/math/float.zig	/^pub inline fn floatFractionalBits(comptime T: type) comptime_int {$/;"	function
floatFromUnsigned	$ZIGLIB/std/fmt/parse_float/common.zig	/^pub fn floatFromUnsigned(comptime T: type, comptime MantissaT: type, v: MantissaT) T {$/;"	function
floatMantissaBits	$ZIGLIB/std/math/float.zig	/^pub inline fn floatMantissaBits(comptime T: type) comptime_int {$/;"	function
floatMax	$ZIGLIB/std/math/float.zig	/^pub inline fn floatMax(comptime T: type) T {$/;"	function
floatMin	$ZIGLIB/std/math/float.zig	/^pub inline fn floatMin(comptime T: type) T {$/;"	function
floatNorm	$ZIGLIB/std/rand.zig	/pub fn floatNorm(r: Random, comptime T: type) T {$/;"	function
floatToInt	$ZIGLIB/compiler_rt/float_to_int.zig	/^pub inline fn floatToInt(comptime I: type, a: anytype) I {$/;"	function
floatTrueMin	$ZIGLIB/std/math/float.zig	/^pub inline fn floatTrueMin(comptime T: type) T {$/;"	function
float_32	$ZIGLIB/std/mem.zig	/float_32: f32/;"	field
float_64	$ZIGLIB/std/mem.zig	/float_64: f64/;"	field
float_base	$ZIGLIB/std/simd.zig	/const float_base = @Vector(4, f32){ 2, 0.5, -10, 6.54321 }/;"	constant
float_bits	$ZIGLIB/compiler_rt/int_to_float.zig	/const float_bits = @bitSizeOf(T)/;"	constant
float_decimal	$ZIGLIB/std/fmt.zig	/var float_decimal = errol.errol3(x, buffer[0..])/;"	variable
float_exponent	$ZIGLIB/std/zig/tokenizer.zig	/float_exponent/;"	field
float_info	$ZIGLIB/std/fmt/parse_float/convert_eisel_lemire.zig	/const float_info = FloatInfo.from(T)/;"	constant
float_regs	$ZIGLIB/std/os/linux/sparc64.zig	/float_regs: [64]u32/;"	field
floate1	$ZIGLIB/std/target/csky.zig	/floate1/;"	field
flock	$ZIGLIB/std/os/linux/syscalls.zig	/flock = Linux + 71/;"	field
floor	$ZIGLIB/std/math.zig	/^pub inline fn floor(value: anytype) @TypeOf(value) {$/;"	function
floorPowerOfTwo	$ZIGLIB/std/math.zig	/^pub fn floorPowerOfTwo(comptime T: type, value: T) T {$/;"	function
floorf	$ZIGLIB/compiler_rt/floor.zig	/^pub fn floorf(x: f32) callconv(.C) f32 {$/;"	function
floorl	$ZIGLIB/compiler_rt/floor.zig	/^pub fn floorl(x: c_longdouble) callconv(.C) c_longdouble {$/;"	function
floorq	$ZIGLIB/compiler_rt/floor.zig	/^pub fn floorq(x: f128) callconv(.C) f128 {$/;"	function
flow_dissector	$ZIGLIB/std/os/linux/bpf.zig	/flow_dissector/;"	field
flow_label	$ZIGLIB/std/os/uefi/protocols/ip6_protocol.zig	/flow_label: u32/;"	field
flowinfo	$ZIGLIB/std/os/windows/ws2_32.zig	/flowinfo: u32/;"	field
flush	$ZIGLIB/std/os/uefi/protocols/file_protocol.zig	/pub fn flush(self: *const FileProtocol) Status {$/;"	function
flushBits	$ZIGLIB/std/io/bit_writer.zig	/pub fn flushBits(self: *Self) Error!void {$/;"	function
flushBlocks	$ZIGLIB/std/os/uefi/protocols/block_io_protocol.zig	/pub fn flushBlocks(self: *Self) Status {$/;"	function
flushRetainedMetadata	$ZIGLIB/std/heap/general_purpose_allocator.zig	/pub fn flushRetainedMetadata(self: *Self) void {$/;"	function
flush_queues_on_reset	$ZIGLIB/std/os/uefi/protocols/managed_network_protocol.zig	/flush_queues_on_reset: bool/;"	field
flush_sq	$ZIGLIB/std/os/linux/io_uring.zig	/pub fn flush_sq(self: *IO_Uring) u32 {$/;"	function
fma4	$ZIGLIB/std/target/x86.zig	/fma4/;"	field
fma_mix_insts	$ZIGLIB/std/target/amdgpu.zig	/fma_mix_insts/;"	field
fmaf	$ZIGLIB/std/target/amdgpu.zig	/fmaf/;"	field
fmal	$ZIGLIB/compiler_rt/fma.zig	/^pub fn fmal(x: c_longdouble, y: c_longdouble, z: c_longdouble) callconv(.C) c_longdouble {$/;"	function
fmaq	$ZIGLIB/compiler_rt/fma.zig	/^pub fn fmaq(x: f128, y: f128, z: f128) callconv(.C) f128 {$/;"	function
fmatch	$ZIGLIB/std/compress/deflate/compressor.zig	/var fmatch = self.findMatch($/;"	variable
fmax	$ZIGLIB/compiler_rt/fmax.zig	/^pub fn fmax(x: f64, y: f64) callconv(.C) f64 {$/;"	function
fmaxf	$ZIGLIB/compiler_rt/fmax.zig	/^pub fn fmaxf(x: f32, y: f32) callconv(.C) f32 {$/;"	function
fmaxl	$ZIGLIB/compiler_rt/fmax.zig	/^pub fn fmaxl(x: c_longdouble, y: c_longdouble) callconv(.C) c_longdouble {$/;"	function
fmaxq	$ZIGLIB/compiler_rt/fmax.zig	/^pub fn fmaxq(x: f128, y: f128) callconv(.C) f128 {$/;"	function
fmin	$ZIGLIB/compiler_rt/fmin.zig	/^pub fn fmin(x: f64, y: f64) callconv(.C) f64 {$/;"	function
fminf	$ZIGLIB/compiler_rt/fmin.zig	/^pub fn fminf(x: f32, y: f32) callconv(.C) f32 {$/;"	function
fminl	$ZIGLIB/compiler_rt/fmin.zig	/^pub fn fminl(x: c_longdouble, y: c_longdouble) callconv(.C) c_longdouble {$/;"	function
fminq	$ZIGLIB/compiler_rt/fmin.zig	/^pub fn fminq(x: f128, y: f128) callconv(.C) f128 {$/;"	function
fmix	$ZIGLIB/std/hash/cityhash.zig	/fn fmix(h: u32) u32 {$/;"	function
fmod	$ZIGLIB/compiler_rt/fmod.zig	/^pub fn fmod(x: f64, y: f64) callconv(.C) f64 {$/;"	function
fmodf	$ZIGLIB/compiler_rt/fmod.zig	/^pub fn fmodf(x: f32, y: f32) callconv(.C) f32 {$/;"	function
fmodl	$ZIGLIB/compiler_rt/fmod.zig	/^pub fn fmodl(a: c_longdouble, b: c_longdouble) callconv(.C) c_longdouble {$/;"	function
fmodq	$ZIGLIB/compiler_rt/fmod.zig	/^pub fn fmodq(a: f128, b: f128) callconv(.C) f128 {$/;"	function
fmtDuration	$ZIGLIB/std/fmt.zig	/^pub fn fmtDuration(ns: u64) Formatter(formatDuration) {$/;"	function
fmtDurationSigned	$ZIGLIB/std/fmt.zig	/^pub fn fmtDurationSigned(ns: i64) Formatter(formatDurationSigned) {$/;"	function
fmtEscapes	$ZIGLIB/std/zig/fmt.zig	/^pub fn fmtEscapes(bytes: []const u8) std.fmt.Formatter(formatEscapes) {$/;"	function
fmtId	$ZIGLIB/std/zig/fmt.zig	/^pub fn fmtId(bytes: []const u8) std.fmt.Formatter(formatId) {$/;"	function
fmtIntSizeBin	$ZIGLIB/std/fmt.zig	/^pub fn fmtIntSizeBin(value: u64) std.fmt.Formatter(formatSizeBin) {$/;"	function
fmtIntSizeDec	$ZIGLIB/std/fmt.zig	/^pub fn fmtIntSizeDec(value: u64) std.fmt.Formatter(formatSizeDec) {$/;"	function
fmtSliceEscapeLower	$ZIGLIB/std/fmt.zig	/^pub fn fmtSliceEscapeLower(bytes: []const u8) std.fmt.Formatter(formatSliceEscapeLower) {$/;"	function
fmtSliceEscapeUpper	$ZIGLIB/std/fmt.zig	/^pub fn fmtSliceEscapeUpper(bytes: []const u8) std.fmt.Formatter(formatSliceEscapeUpper) {$/;"	function
fmtSliceHexLower	$ZIGLIB/std/fmt.zig	/^pub fn fmtSliceHexLower(bytes: []const u8) std.fmt.Formatter(formatSliceHexLower) {$/;"	function
fmtSliceHexUpper	$ZIGLIB/std/fmt.zig	/^pub fn fmtSliceHexUpper(bytes: []const u8) std.fmt.Formatter(formatSliceHexUpper) {$/;"	function
fmtUtf16le	$ZIGLIB/std/unicode.zig	/^pub fn fmtUtf16le(utf16le: []const u16) std.fmt.Formatter(formatUtf16le) {$/;"	function
fmt_begin	$ZIGLIB/std/fmt.zig	/const fmt_begin = i/;"	constant
fmt_end	$ZIGLIB/std/fmt.zig	/const fmt_end = i/;"	constant
fmt_lib	$ZIGLIB/std/Build.zig	/^const fmt_lib = std.fmt/;"	constant
fmt_max_depth	$ZIGLIB/std/std.zig	/pub const fmt_max_depth = if (@hasDecl(options_override, "fmt_max_depth"))$/;"	constant
fmt_str	$ZIGLIB/std/Build/EmulatableRunStep.zig	/const fmt_str = "{s}" ++ fs.path.sep_str ++ "{s}-{s}-{s}"/;"	constant
fnProto	$ZIGLIB/std/zig/Ast.zig	/^pub fn fnProto(tree: Ast, node: Node.Index) full.FnProto {$/;"	function
fnProtoMulti	$ZIGLIB/std/zig/Ast.zig	/^pub fn fnProtoMulti(tree: Ast, node: Node.Index) full.FnProto {$/;"	function
fnProtoOne	$ZIGLIB/std/zig/Ast.zig	/^pub fn fnProtoOne(tree: Ast, buffer: *[1]Node.Index, node: Node.Index) full.FnProto {$/;"	function
fnProtoSimple	$ZIGLIB/std/zig/Ast.zig	/^pub fn fnProtoSimple(tree: Ast, buffer: *[1]Node.Index, node: Node.Index) full.FnProto {$/;"	function
fnType	$ZIGLIB/std/testing.zig	/const fnType = struct {$/;"	constant
fn_args	$ZIGLIB/std/Thread.zig	/fn_args: Args/;"	field
fn_args_fields	$ZIGLIB/std/testing.zig	/const fn_args_fields = @typeInfo(ArgsTuple).Struct.fields/;"	constant
fn_container	$ZIGLIB/std/simd.zig	/const fn_container = struct {$/;"	struct
fn_decl	$ZIGLIB/std/zig/Ast.zig	/fn_decl/;"	field
fn_decl_index	$ZIGLIB/std/zig/Parse.zig	/const fn_decl_index = try p.reserveNode(.fn_decl)/;"	constant
fn_expr	$ZIGLIB/std/zig/Ast.zig	/fn_expr: Node.Index/;"	field
fn_name	$ZIGLIB/std/dwarf.zig	/const fn_name = x: {$/;"	constant
fn_proto	$ZIGLIB/std/zig/render.zig	/const fn_proto = datas[decl].lhs/;"	constant
fn_proto_index	$ZIGLIB/std/zig/Parse.zig	/const fn_proto_index = try p.reserveNode(.fn_proto)/;"	constant
fn_proto_multi	$ZIGLIB/std/zig/Ast.zig	/fn_proto_multi/;"	field
fn_proto_one	$ZIGLIB/std/zig/Ast.zig	/fn_proto_one/;"	field
fn_proto_simple	$ZIGLIB/std/zig/Ast.zig	/fn_proto_simple/;"	field
fn_token	$ZIGLIB/std/zig/render.zig	/const fn_token = main_tokens[fn_proto]/;"	constant
fneg	$ZIGLIB/compiler_rt/common.zig	/^pub inline fn fneg(a: anytype) @TypeOf(a) {$/;"	function
follow_symlinks	$ZIGLIB/std/os/windows.zig	/follow_symlinks: bool = true/;"	field
following_bits	$ZIGLIB/std/mem.zig	/const following_bits = -%@truncate(u3, bit_shift + bit_count)/;"	constant
fonts	$ZIGLIB/std/os/uefi/protocols/hii.zig	/pub const fonts: u8 = 0x5/;"	constant
footer	$ZIGLIB/std/tz.zig	/var footer: ?[]u8 = null/;"	variable
footer_mem	$ZIGLIB/std/tz.zig	/const footer_mem = reader.readUntilDelimiter(&footerdata_buf, '\\n') catch |err| switch (err) {$/;"	constant
footerdata_buf	$ZIGLIB/std/tz.zig	/var footerdata_buf: [128]u8 = undefined/;"	variable
forFull	$ZIGLIB/std/zig/Ast.zig	/^pub fn forFull(tree: Ast, node: Node.Index) full.While {$/;"	function
forSimple	$ZIGLIB/std/zig/Ast.zig	/^pub fn forSimple(tree: Ast, node: Node.Index) full.While {$/;"	function
for_simple	$ZIGLIB/std/zig/Ast.zig	/for_simple/;"	field
for_statement	$ZIGLIB/std/zig/Parse.zig	/const for_statement = try p.parseForStatement()/;"	constant
for_token	$ZIGLIB/std/zig/Parse.zig	/const for_token = p.eatToken(.keyword_for) orelse return null_node/;"	constant
forbidden	$ZIGLIB/std/http.zig	/forbidden = 403/;"	field
force	$ZIGLIB/std/Build/CompileStep.zig	/force/;"	field
force_32bit_jump_tables	$ZIGLIB/std/target/aarch64.zig	/force_32bit_jump_tables/;"	field
force_pic	$ZIGLIB/std/Build/CompileStep.zig	/^force_pic: ?bool = null/;"	field
foreign_endian	$ZIGLIB/std/mem.zig	/const foreign_endian: Endian = if (native_endian == .Big) .Little else .Big/;"	constant
foreign_name	$ZIGLIB/std/Build/EmulatableRunStep.zig	/const foreign_name = artifact.target.zigTriple(builder.allocator) catch @panic("unhandled error")/;"	constant
fork	$ZIGLIB/std/os/linux/syscalls.zig	/fork = Linux + 56/;"	field
forkChildErrReport	$ZIGLIB/std/child_process.zig	/^fn forkChildErrReport(fd: i32, err: ChildProcess.SpawnError) noreturn {$/;"	function
form_code	$ZIGLIB/std/dwarf.zig	/form_code: u16/;"	field
form_id	$ZIGLIB/std/dwarf.zig	/form_id: u64/;"	field
form_tls_address	$ZIGLIB/std/dwarf/OP.zig	/^pub const form_tls_address = 0x9b/;"	constant
form_value	$ZIGLIB/std/dwarf.zig	/const form_value = try parseFormValue($/;"	constant
formal_parameter	$ZIGLIB/std/dwarf/TAG.zig	/^pub const formal_parameter = 0x05/;"	constant
format	$ZIGLIB/std/wasm.zig	/pub fn format(self: Type, comptime fmt: []const u8, opt: std.fmt.FormatOptions, writer: anytype) !void {$/;"	function
formatAddress	$ZIGLIB/std/fmt.zig	/^pub fn formatAddress(value: anytype, options: FormatOptions, writer: anytype) @TypeOf(writer).Error!void {$/;"	function
formatAsciiChar	$ZIGLIB/std/fmt.zig	/^pub fn formatAsciiChar($/;"	function
formatBuf	$ZIGLIB/std/fmt.zig	/^pub fn formatBuf($/;"	function
formatDuration	$ZIGLIB/std/fmt.zig	/^fn formatDuration(data: FormatDurationData, comptime fmt: []const u8, options: std.fmt.FormatOptions, writer: anytype) !void {$/;"	function
formatDurationSigned	$ZIGLIB/std/fmt.zig	/^fn formatDurationSigned(ns: i64, comptime fmt: []const u8, options: std.fmt.FormatOptions, writer: anytype) !void {$/;"	function
formatEscapes	$ZIGLIB/std/zig/fmt.zig	/^fn formatEscapes($/;"	function
formatFloatDecimal	$ZIGLIB/std/fmt.zig	/^pub fn formatFloatDecimal($/;"	function
formatFloatHexadecimal	$ZIGLIB/std/fmt.zig	/^pub fn formatFloatHexadecimal($/;"	function
formatFloatScientific	$ZIGLIB/std/fmt.zig	/^pub fn formatFloatScientific($/;"	function
formatFloatValue	$ZIGLIB/std/fmt.zig	/^fn formatFloatValue($/;"	function
formatId	$ZIGLIB/std/zig/fmt.zig	/^fn formatId($/;"	function
formatInt	$ZIGLIB/std/fmt.zig	/^pub fn formatInt($/;"	function
formatIntBuf	$ZIGLIB/std/fmt.zig	/^pub fn formatIntBuf(out_buf: []u8, value: anytype, base: u8, case: Case, options: FormatOptions) usize {$/;"	function
formatIntValue	$ZIGLIB/std/fmt.zig	/^pub fn formatIntValue($/;"	function
formatSizeBin	$ZIGLIB/std/fmt.zig	/^const formatSizeBin = formatSizeImpl(1024).formatSizeImpl/;"	constant
formatSizeDec	$ZIGLIB/std/fmt.zig	/^const formatSizeDec = formatSizeImpl(1000).formatSizeImpl/;"	constant
formatSizeImpl	$ZIGLIB/std/fmt.zig	/fn formatSizeImpl($/;"	function
formatSliceEscapeImpl	$ZIGLIB/std/fmt.zig	/pub fn formatSliceEscapeImpl($/;"	function
formatSliceEscapeLower	$ZIGLIB/std/fmt.zig	/^const formatSliceEscapeLower = formatSliceEscapeImpl(.lower).formatSliceEscapeImpl/;"	constant
formatSliceEscapeUpper	$ZIGLIB/std/fmt.zig	/^const formatSliceEscapeUpper = formatSliceEscapeImpl(.upper).formatSliceEscapeImpl/;"	constant
formatSliceHexImpl	$ZIGLIB/std/fmt.zig	/pub fn formatSliceHexImpl($/;"	function
formatSliceHexLower	$ZIGLIB/std/fmt.zig	/^const formatSliceHexLower = formatSliceHexImpl(.lower).formatSliceHexImpl/;"	constant
formatSliceHexUpper	$ZIGLIB/std/fmt.zig	/^const formatSliceHexUpper = formatSliceHexImpl(.upper).formatSliceHexImpl/;"	constant
formatText	$ZIGLIB/std/fmt.zig	/^pub fn formatText($/;"	function
formatType	$ZIGLIB/std/fmt.zig	/^pub fn formatType($/;"	function
formatUnicodeCodepoint	$ZIGLIB/std/fmt.zig	/^pub fn formatUnicodeCodepoint($/;"	function
formatUtf16le	$ZIGLIB/std/unicode.zig	/^fn formatUtf16le($/;"	function
formatValue	$ZIGLIB/std/fmt.zig	/^fn formatValue($/;"	function
format_item	$ZIGLIB/std/debug.zig	/const format_item = "Segmentation fault at address 0x{x}"/;"	constant
format_label	$ZIGLIB/std/dwarf/TAG.zig	/^pub const format_label = 0x4101/;"	constant
forms	$ZIGLIB/std/os/uefi/protocols/hii.zig	/pub const forms: u8 = 0x2/;"	constant
forward	$ZIGLIB/std/bit_set.zig	/forward/;"	field
forward_reader	$ZIGLIB/std/io/bit_reader.zig	/forward_reader: ReaderType/;"	field
forward_writer	$ZIGLIB/std/io/bit_writer.zig	/forward_writer: WriterType/;"	field
forwarder_chain	$ZIGLIB/std/coff.zig	/forwarder_chain: u32/;"	field
found	$ZIGLIB/std/unicode.zig	/var found: usize = 0/;"	variable
found_existing	$ZIGLIB/std/hash_map.zig	/found_existing: bool/;"	field
found_line_index	$ZIGLIB/std/pdb.zig	/const found_line_index = start_line_index + line_entry_idx * @sizeOf(LineNumberEntry)/;"	constant
found_name	$ZIGLIB/std/child_process.zig	/const found_name: ?[]const u16 = found_name: {$/;"	constant
found_payload	$ZIGLIB/std/zig/Parse.zig	/const found_payload = try p.parsePtrIndexPayload()/;"	constant
found_tag	$ZIGLIB/std/zig/Ast.zig	/const found_tag = token_tags[parse_error.token + @boolToInt(parse_error.token_is_prev)]/;"	constant
four	$ZIGLIB/std/linked_list.zig	/var four = L.Node{ .data = 4 }/;"	variable
fp16	$ZIGLIB/std/target/arm.zig	/fp16/;"	field
fp16fml	$ZIGLIB/std/target/arm.zig	/fp16fml/;"	field
fp64	$ZIGLIB/std/target/mips.zig	/fp64/;"	field
fp8_insts	$ZIGLIB/std/target/amdgpu.zig	/fp8_insts/;"	field
fp_abi	$ZIGLIB/std/elf.zig	/fp_abi: u8/;"	field
fp_armv8	$ZIGLIB/std/target/arm.zig	/fp_armv8/;"	field
fp_armv8d16	$ZIGLIB/std/target/arm.zig	/fp_armv8d16/;"	field
fp_armv8d16sp	$ZIGLIB/std/target/arm.zig	/fp_armv8d16sp/;"	field
fp_armv8sp	$ZIGLIB/std/target/arm.zig	/fp_armv8sp/;"	field
fp_bias	$ZIGLIB/std/debug.zig	/const fp_bias = if (native_arch.isSPARC())$/;"	constant
fp_bits	$ZIGLIB/std/hash_map.zig	/const fp_bits = @typeInfo(FingerPrint).Int.bits/;"	constant
fp_extension	$ZIGLIB/std/target/s390x.zig	/fp_extension/;"	field
fp_ilogb0	$ZIGLIB/std/math/ilogb.zig	/^pub const fp_ilogb0 = minInt(i32)/;"	constant
fp_ilogbnan	$ZIGLIB/std/math/ilogb.zig	/^pub const fp_ilogbnan = minInt(i32)/;"	constant
fp_offset	$ZIGLIB/std/debug.zig	/const fp_offset = if (native_arch.isRISCV())$/;"	constant
fp_regs	$ZIGLIB/std/os/linux/powerpc64.zig	/fp_regs: fpregset_t/;"	field
fpao	$ZIGLIB/std/target/arm.zig	/fpao/;"	field
fpart	$ZIGLIB/std/math/modf.zig	/fpart: T/;"	field
fpcvt	$ZIGLIB/std/target/powerpc.zig	/fpcvt/;"	field
fpeint	$ZIGLIB/std/fmt/errol.zig	/^fn fpeint(from: f64) u128 {$/;"	function
fpformat	$ZIGLIB/std/c/freebsd.zig	/fpformat: u64/;"	field
fpnext	$ZIGLIB/std/fmt/errol.zig	/^fn fpnext(val: f64) f64 {$/;"	function
fpprev	$ZIGLIB/std/fmt/errol.zig	/^fn fpprev(val: f64) f64 {$/;"	function
fpq_addr	$ZIGLIB/std/os/linux/sparc64.zig	/fpq_addr: *u32/;"	field
fpq_instr	$ZIGLIB/std/os/linux/sparc64.zig	/fpq_instr: u32/;"	field
fpr_16	$ZIGLIB/std/c/solaris.zig	/fpr_16: [5]u16/;"	field
fpregs	$ZIGLIB/std/target/arm.zig	/fpregs/;"	field
fpregs16	$ZIGLIB/std/target/arm.zig	/fpregs16/;"	field
fpregs64	$ZIGLIB/std/target/arm.zig	/fpregs64/;"	field
fpregs_mem	$ZIGLIB/std/os/linux/x86_64.zig	/fpregs_mem: [64]usize/;"	field
fpregset_t	$ZIGLIB/std/os/linux/x86_64.zig	/^pub const fpregset_t = *fpstate/;"	constant
fprnd	$ZIGLIB/std/target/powerpc.zig	/fprnd/;"	field
fprs	$ZIGLIB/std/os/linux/sparc64.zig	/fprs: u64/;"	field
fpstate	$ZIGLIB/std/os/linux/x86_64.zig	/fpstate: *fpstate/;"	field
fptoint	$ZIGLIB/std/target/aarch64.zig	/fptoint/;"	field
fpu_dregs	$ZIGLIB/std/os/linux/sparc64.zig	/fpu_dregs: [32]f64/;"	field
fpu_en	$ZIGLIB/std/os/linux/sparc64.zig	/fpu_en: u8/;"	field
fpu_fr	$ZIGLIB/std/os/linux/sparc64.zig	/fpu_fr: extern union {$/;"	field
fpu_fsr	$ZIGLIB/std/os/linux/sparc64.zig	/fpu_fsr: u64/;"	field
fpu_q	$ZIGLIB/std/os/linux/sparc64.zig	/fpu_q: *__fq/;"	field
fpu_q_entrysize	$ZIGLIB/std/os/linux/sparc64.zig	/fpu_q_entrysize: u8/;"	field
fpu_qcnt	$ZIGLIB/std/os/linux/sparc64.zig	/fpu_qcnt: u8/;"	field
fpu_qregs	$ZIGLIB/std/os/linux/sparc64.zig	/fpu_qregs: [16]c_longdouble/;"	field
fpu_regs	$ZIGLIB/std/os/linux/sparc64.zig	/fpu_regs: [32]u32/;"	field
fpu_save	$ZIGLIB/std/os/linux/sparc64.zig	/fpu_save: *siginfo_fpu_t/;"	field
fpu_t	$ZIGLIB/std/os/linux/sparc64.zig	/^pub const fpu_t = extern struct {$/;"	struct
fpuv2_df	$ZIGLIB/std/target/csky.zig	/fpuv2_df/;"	field
fpuv2_sf	$ZIGLIB/std/target/csky.zig	/fpuv2_sf/;"	field
fpuv3_df	$ZIGLIB/std/target/csky.zig	/fpuv3_df/;"	field
fpuv3_hf	$ZIGLIB/std/target/csky.zig	/fpuv3_hf/;"	field
fpuv3_hi	$ZIGLIB/std/target/csky.zig	/fpuv3_hi/;"	field
fpuv3_sf	$ZIGLIB/std/target/csky.zig	/fpuv3_sf/;"	field
fpxx	$ZIGLIB/std/target/mips.zig	/fpxx/;"	field
frac	$ZIGLIB/std/fmt.zig	/const frac = kunits % 1000/;"	constant
fraction	$ZIGLIB/std/math.zig	/fraction: u64/;"	field
fractionalBits	$ZIGLIB/compiler_rt/mulf3.zig	/const fractionalBits = math.floatFractionalBits(T)/;"	constant
fractional_bits	$ZIGLIB/std/math/ldexp.zig	/const fractional_bits = math.floatFractionalBits(T)/;"	constant
frag	$ZIGLIB/std/crypto/tls/Client.zig	/var frag = frag0/;"	variable
frag0	$ZIGLIB/std/crypto/tls/Client.zig	/const frag0 = c.partially_read_buffer[c.partial_ciphertext_idx..frag0_end]/;"	constant
frag0_end	$ZIGLIB/std/crypto/tls/Client.zig	/const frag0_end = @min(c.partially_read_buffer.len, c.partial_ciphertext_end + actual_read_len)/;"	constant
frag1	$ZIGLIB/std/crypto/tls/Client.zig	/var frag1 = in_stack_buffer[0..actual_read_len -| first_iov.len]/;"	variable
frag_vaddr_end	$ZIGLIB/std/pdb.zig	/const frag_vaddr_end = frag_vaddr_start + line_hdr.CodeSize/;"	constant
frag_vaddr_start	$ZIGLIB/std/pdb.zig	/const frag_vaddr_start = line_hdr.RelocOffset/;"	constant
fragment	$ZIGLIB/std/Uri.zig	/^fragment: ?[]const u8/;"	field
fragment_buffer	$ZIGLIB/std/os/uefi/protocols/udp6_protocol.zig	/fragment_buffer: [*]u8/;"	field
fragment_count	$ZIGLIB/std/os/uefi/protocols/udp6_protocol.zig	/fragment_count: u32/;"	field
fragment_length	$ZIGLIB/std/os/uefi/protocols/udp6_protocol.zig	/fragment_length: u32/;"	field
frame	$ZIGLIB/std/start.zig	/var frame: @Frame(callWinMainAsync) = undefined/;"	variable
frame_base	$ZIGLIB/std/dwarf/AT.zig	/^pub const frame_base = 0x40/;"	constant
frame_buffer_base	$ZIGLIB/std/os/uefi/protocols/graphics_output_protocol.zig	/frame_buffer_base: u64/;"	field
frame_buffer_size	$ZIGLIB/std/os/uefi/protocols/graphics_output_protocol.zig	/frame_buffer_size: usize/;"	field
frame_index	$ZIGLIB/std/debug.zig	/var frame_index: usize = 0/;"	variable
frame_stack	$ZIGLIB/std/event/group.zig	/frame_stack: Stack/;"	field
frames	$ZIGLIB/std/event/loop.zig	/const frames = try testing.allocator.alloc(@Frame(testSleep), 10)/;"	constant
frames_array_mutable	$ZIGLIB/std/debug.zig	/var frames_array_mutable = frames_array/;"	variable
frames_left	$ZIGLIB/std/debug.zig	/var frames_left: usize = std.math.min(stack_trace.index, stack_trace.instruction_addresses.len)/;"	variable
framework_dirs	$ZIGLIB/std/zig/system/NativePaths.zig	/^framework_dirs: ArrayList([:0]u8)/;"	field
framework_path	$ZIGLIB/std/zig/system/NativePaths.zig	/const framework_path = it.next() orelse {$/;"	constant
frameworks	$ZIGLIB/std/Build/CompileStep.zig	/frameworks: *StringHashMap(FrameworkLinkInfo)/;"	field
free	$ZIGLIB/std/testing/failing_allocator.zig	/fn free($/;"	function
freeAndExit	$ZIGLIB/std/Thread.zig	/fn freeAndExit(self: *ThreadCompletion) noreturn {$/;"	function
freeBucket	$ZIGLIB/std/heap/general_purpose_allocator.zig	/fn freeBucket(self: *Self, bucket: *BucketHeader, size_class: usize) void {$/;"	function
freeLarge	$ZIGLIB/std/heap/general_purpose_allocator.zig	/fn freeLarge($/;"	function
freeLikeBlock	$ZIGLIB/std/valgrind.zig	/^pub fn freeLikeBlock(addr: [*]u8, rzB: usize) void {$/;"	function
freePages	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/freePages: *const fn (memory: [*]align(4096) u8, pages: usize) callconv(.C) Status/;"	field
freePool	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/freePool: *const fn (buffer: [*]align(8) u8) callconv(.C) Status/;"	field
freeRetainedMetadata	$ZIGLIB/std/heap/general_purpose_allocator.zig	/fn freeRetainedMetadata(self: *Self) void {$/;"	function
freeShelves	$ZIGLIB/std/segmented_list.zig	/fn freeShelves(self: *Self, allocator: Allocator, from_count: ShelfIndex, to_count: ShelfIndex) void {$/;"	function
freeSize	$ZIGLIB/std/crypto/tls/Client.zig	/fn freeSize(vp: VecPut) usize {$/;"	function
free_all	$ZIGLIB/std/heap/arena_allocator.zig	/free_all/;"	field
free_cmd_line_on_deinit	$ZIGLIB/std/process.zig	/free_cmd_line_on_deinit: bool/;"	field
free_list	$ZIGLIB/std/heap/memory_pool.zig	/free_list: ?NodePtr = null/;"	field
free_list_head	$ZIGLIB/std/crypto/Certificate/Bundle/macos.zig	/free_list_head: u32/;"	field
free_memory	$ZIGLIB/std/c/haiku.zig	/free_memory: u64/;"	field
free_node	$ZIGLIB/std/heap/memory_pool.zig	/const free_node = @ptrCast(NodePtr, raw_mem)/;"	constant
free_size	$ZIGLIB/std/crypto/tls/Client.zig	/const free_size = vp.freeSize()/;"	constant
free_space	$ZIGLIB/std/os/uefi/protocols/file_protocol.zig	/free_space: u64/;"	field
free_stack_trace	$ZIGLIB/std/heap/general_purpose_allocator.zig	/var free_stack_trace = StackTrace{$/;"	variable
free_swap_pages	$ZIGLIB/std/c/haiku.zig	/free_swap_pages: u64/;"	field
freebsd	$ZIGLIB/std/target.zig	/freebsd/;"	field
freed	$ZIGLIB/std/heap/general_purpose_allocator.zig	/freed: if (config.retain_metadata) bool else void/;"	field
freed_bytes	$ZIGLIB/std/testing/failing_allocator.zig	/freed_bytes: usize/;"	field
frees	$ZIGLIB/std/heap/WasmAllocator.zig	/^var frees = [1]usize{0} ** size_class_count/;"	variable
freestanding	$ZIGLIB/std/target.zig	/freestanding/;"	field
fregs	$ZIGLIB/std/os/linux/sparc64.zig	/fregs: extern union {$/;"	field
fremovexattr	$ZIGLIB/std/os/linux/syscalls.zig	/fremovexattr = Linux + 235/;"	field
freq	$ZIGLIB/std/os/linux.zig	/freq: bool = false/;"	field
freq_cache	$ZIGLIB/std/compress/deflate/huffman_code.zig	/freq_cache: []LiteralNode = undefined/;"	field
freqs	$ZIGLIB/std/compress/deflate/huffman_code.zig	/var freqs: [19]u16 = [_]u16{$/;"	variable
fres	$ZIGLIB/std/target/powerpc.zig	/fres/;"	field
fresh	$ZIGLIB/std/fs.zig	/fresh/;"	field
frexp	$ZIGLIB/std/math/frexp.zig	/^pub fn frexp(x: anytype) Frexp(@TypeOf(x)) {$/;"	function
frexp128	$ZIGLIB/std/math/frexp.zig	/^fn frexp128(x: f128) Frexp(f128) {$/;"	function
frexp32	$ZIGLIB/std/math/frexp.zig	/^fn frexp32(x: f32) Frexp(f32) {$/;"	function
frexp64	$ZIGLIB/std/math/frexp.zig	/^fn frexp64(x: f64) Frexp(f64) {$/;"	function
frexp_exp32	$ZIGLIB/std/math/complex/ldexp.zig	/^fn frexp_exp32(x: f32, expt: *i32) f32 {$/;"	function
frexp_exp64	$ZIGLIB/std/math/complex/ldexp.zig	/^fn frexp_exp64(x: f64, expt: *i32) f64 {$/;"	function
friend	$ZIGLIB/std/dwarf/TAG.zig	/^pub const friend = 0x2a/;"	constant
from	$ZIGLIB/std/sort.zig	/from: usize/;"	field
fromAffineCoordinates	$ZIGLIB/std/crypto/pcurves/secp256k1.zig	/pub fn fromAffineCoordinates(p: AffineCoordinates) EncodingError!Secp256k1 {$/;"	function
fromAggregateContainerType	$ZIGLIB/std/json.zig	/pub fn fromAggregateContainerType(ty: AggregateContainerType) State {$/;"	function
fromB64	$ZIGLIB/std/crypto/scrypt.zig	/fn fromB64(self: *Self, str: []const u8) !void {$/;"	function
fromBytes	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/^pub fn fromBytes(out1: *[4]u64, arg1: [32]u8) void {$/;"	function
fromBytes32	$ZIGLIB/std/crypto/25519/scalar.zig	/fn fromBytes32(bytes: CompressedScalar) ScalarDouble {$/;"	function
fromBytes48	$ZIGLIB/std/crypto/pcurves/secp256k1/scalar.zig	/pub fn fromBytes48(s: [48]u8, endian: std.builtin.Endian) Scalar {$/;"	function
fromBytes64	$ZIGLIB/std/crypto/pcurves/secp256k1/scalar.zig	/pub fn fromBytes64(s: [64]u8, endian: std.builtin.Endian) Scalar {$/;"	function
fromDer	$ZIGLIB/std/crypto/ecdsa.zig	/pub fn fromDer(der: []const u8) EncodingError!Signature {$/;"	function
fromEd25519	$ZIGLIB/std/crypto/25519/x25519.zig	/pub fn fromEd25519(ed25519_key_pair: crypto.sign.Ed25519.KeyPair) (IdentityElementError || EncodingError)!KeyPair {$/;"	function
fromEdwards25519	$ZIGLIB/std/crypto/25519/curve25519.zig	/pub fn fromEdwards25519(p: crypto.ecc.Edwards25519) IdentityElementError!Curve25519 {$/;"	function
fromFilestat	$ZIGLIB/std/os/wasi.zig	/pub fn fromFilestat(stat: filestat_t) Self {$/;"	function
fromHash	$ZIGLIB/std/crypto/25519/edwards25519.zig	/pub fn fromHash(h: [64]u8) Edwards25519 {$/;"	function
fromInt	$ZIGLIB/std/crypto/pcurves/common.zig	/pub fn fromInt(comptime x: IntRepr) NonCanonicalError!Fe {$/;"	function
fromLimits	$ZIGLIB/std/crypto/scrypt.zig	/pub fn fromLimits(ops_limit: u64, mem_limit: usize) Self {$/;"	function
fromMontgomery	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/^pub fn fromMontgomery(out1: *NonMontgomeryDomainFieldElement, arg1: MontgomeryDomainFieldElement) void {$/;"	function
fromOwnedSlice	$ZIGLIB/std/priority_queue.zig	/pub fn fromOwnedSlice(allocator: Allocator, items: []T, context: Context) Self {$/;"	function
fromOwnedSliceSentinel	$ZIGLIB/std/array_list.zig	/pub fn fromOwnedSliceSentinel(comptime sentinel: T, slice: [:sentinel]T) Self {$/;"	function
fromParts	$ZIGLIB/std/compress/lzma/decode/rangecoder.zig	/pub fn fromParts($/;"	function
fromSec1	$ZIGLIB/std/crypto/pcurves/secp256k1.zig	/pub fn fromSec1(s: []const u8) (EncodingError || NotSquareError || NonCanonicalError)!Secp256k1 {$/;"	function
fromSecretKey	$ZIGLIB/std/crypto/ecdsa.zig	/pub fn fromSecretKey(secret_key: SecretKey) IdentityElementError!KeyPair {$/;"	function
fromSerializedAffineCoordinates	$ZIGLIB/std/crypto/pcurves/secp256k1.zig	/pub fn fromSerializedAffineCoordinates(xs: [32]u8, ys: [32]u8, endian: std.builtin.Endian) (NonCanonicalError || EncodingError)!Secp256k1 {$/;"	function
fromSlice	$ZIGLIB/std/crypto/scrypt.zig	/pub fn fromSlice(slice: []const u8) EncodingError!Self {$/;"	function
fromSlices	$ZIGLIB/std/cstr.zig	/pub fn fromSlices(allocator: mem.Allocator, slices: []const []const []const u8) !NullTerminated2DArray {$/;"	function
fromString	$ZIGLIB/std/crypto/25519/edwards25519.zig	/pub fn fromString(comptime random_oracle: bool, ctx: []const u8, s: []const u8) Edwards25519 {$/;"	function
fromSysTime	$ZIGLIB/std/os/windows.zig	/^pub fn fromSysTime(hns: i64) i128 {$/;"	function
fromSystem	$ZIGLIB/std/fs/file.zig	/pub fn fromSystem(st: os.system.Stat) Stat {$/;"	function
fromTarget	$ZIGLIB/std/zig/CrossTarget.zig	/^pub fn fromTarget(target: Target) CrossTarget {$/;"	function
fromTargetCpuArch	$ZIGLIB/std/coff.zig	/pub fn fromTargetCpuArch(arch: std.Target.Cpu.Arch) MachineType {$/;"	function
fromTheirSlice	$ZIGLIB/std/crypto/tls.zig	/pub fn fromTheirSlice(buf: []u8) Decoder {$/;"	function
fromTimestamp	$ZIGLIB/std/os/wasi.zig	/pub fn fromTimestamp(tm: timestamp_t) timespec {$/;"	function
fromUniform	$ZIGLIB/std/crypto/25519/ristretto255.zig	/pub fn fromUniform(h: [64]u8) Ristretto255 {$/;"	function
from_component	$ZIGLIB/std/fs/path.zig	/const from_component = from_it.next() orelse return allocator.dupe(u8, to_it.rest())/;"	constant
from_it	$ZIGLIB/std/fs/path.zig	/var from_it = mem.tokenize(u8, resolved_from, "\/\\\\")/;"	variable
frsqrte	$ZIGLIB/std/target/powerpc.zig	/frsqrte/;"	field
frsqrtes	$ZIGLIB/std/target/powerpc.zig	/frsqrtes/;"	field
fs_end_request	$ZIGLIB/std/event/loop.zig	/fs_end_request: Request.Node/;"	field
fs_filetype	$ZIGLIB/std/os/wasi.zig	/fs_filetype: filetype_t/;"	field
fs_flags	$ZIGLIB/std/os/wasi.zig	/fs_flags: fdflags_t/;"	field
fs_queue	$ZIGLIB/std/event/loop.zig	/fs_queue: std.atomic.Queue(Request)/;"	field
fs_rights_base	$ZIGLIB/std/os/wasi.zig	/fs_rights_base: rights_t/;"	field
fs_rights_inheriting	$ZIGLIB/std/os/wasi.zig	/fs_rights_inheriting: rights_t/;"	field
fs_thread	$ZIGLIB/std/event/loop.zig	/fs_thread: Thread/;"	field
fs_thread_wakeup	$ZIGLIB/std/event/loop.zig	/fs_thread_wakeup: std.Thread.ResetEvent/;"	field
fsb_cur	$ZIGLIB/std/os.zig	/var fsb_cur: wasi.fdstat_t = undefined/;"	variable
fsbase	$ZIGLIB/std/c/freebsd.zig	/fsbase: u64/;"	field
fsblkcnt_t	$ZIGLIB/std/c/freebsd.zig	/^pub const fsblkcnt_t = u64/;"	constant
fsconfig	$ZIGLIB/std/os/linux/syscalls.zig	/fsconfig = Linux + 431/;"	field
fsetxattr	$ZIGLIB/std/os/linux/syscalls.zig	/fsetxattr = Linux + 226/;"	field
fsfilcnt_t	$ZIGLIB/std/c/freebsd.zig	/^pub const fsfilcnt_t = u64/;"	constant
fsgsbase	$ZIGLIB/std/target/x86.zig	/fsgsbase/;"	field
fsid	$ZIGLIB/std/c/freebsd.zig	/fsid: u64/;"	field
fsid_freebsd11	$ZIGLIB/std/c/freebsd.zig	/fsid_freebsd11: u32/;"	field
fsize	$ZIGLIB/std/math/big/rational.zig	/const fsize = @typeInfo(T).Float.bits/;"	constant
fsmount	$ZIGLIB/std/os/linux/syscalls.zig	/fsmount = Linux + 432/;"	field
fsopen	$ZIGLIB/std/os/linux/syscalls.zig	/fsopen = Linux + 430/;"	field
fspick	$ZIGLIB/std/os/linux/syscalls.zig	/fspick = Linux + 433/;"	field
fsqrt	$ZIGLIB/std/target/powerpc.zig	/fsqrt/;"	field
fsrm	$ZIGLIB/std/target/x86.zig	/fsrm/;"	field
fstat	$ZIGLIB/std/os/linux/syscalls.zig	/fstat = Linux + 5/;"	field
fstat64	$ZIGLIB/std/os/linux/syscalls.zig	/fstat64 = Linux + 215/;"	field
fstat_sym	$ZIGLIB/std/os.zig	/const fstat_sym = if (builtin.os.tag == .linux and builtin.link_libc)$/;"	constant
fstatat	$ZIGLIB/std/os/linux/syscalls.zig	/fstatat = 79/;"	field
fstatat64	$ZIGLIB/std/os/linux/syscalls.zig	/fstatat64 = Linux + 293/;"	field
fstatatWasi	$ZIGLIB/std/os.zig	/^pub fn fstatatWasi(dirfd: fd_t, pathname: []const u8, flags: u32) FStatAtError!Stat {$/;"	function
fstatatZ	$ZIGLIB/std/os.zig	/^pub fn fstatatZ(dirfd: fd_t, pathname: [*:0]const u8, flags: u32) FStatAtError!Stat {$/;"	function
fstatat_sym	$ZIGLIB/std/os.zig	/const fstatat_sym = if (builtin.os.tag == .linux and builtin.link_libc)$/;"	constant
fstatfs	$ZIGLIB/std/os/linux/syscalls.zig	/fstatfs = Linux + 135/;"	field
fstatfs64	$ZIGLIB/std/os/linux/syscalls.zig	/fstatfs64 = Linux + 256/;"	field
fstflags_t	$ZIGLIB/std/os/wasi.zig	/^pub const fstflags_t = u16/;"	constant
fstype	$ZIGLIB/std/c/solaris.zig	/fstype: [16]u8/;"	field
fsync	$ZIGLIB/std/os/linux/syscalls.zig	/fsync = Linux + 72/;"	field
ft64	$ZIGLIB/std/time.zig	/const ft64 = (@as(u64, ft.dwHighDateTime) << 32) | ft.dwLowDateTime/;"	constant
ftCreationTime	$ZIGLIB/std/os/windows.zig	/ftCreationTime: FILETIME/;"	field
ftLastAccessTime	$ZIGLIB/std/os/windows.zig	/ftLastAccessTime: FILETIME/;"	field
ftLastWriteTime	$ZIGLIB/std/os/windows.zig	/ftLastWriteTime: FILETIME/;"	field
ft_per_s	$ZIGLIB/std/os.zig	/const ft_per_s = std.time.ns_per_s \/ 100/;"	constant
ftime	$ZIGLIB/std/os/linux/syscalls.zig	/ftime = Linux + 35/;"	field
ftruncate	$ZIGLIB/std/os/linux/syscalls.zig	/ftruncate = Linux + 93/;"	field
ftruncate64	$ZIGLIB/std/os/linux/syscalls.zig	/ftruncate64 = Linux + 212/;"	field
ftruncate_sym	$ZIGLIB/std/os.zig	/const ftruncate_sym = if (builtin.os.tag == .linux and builtin.link_libc)$/;"	constant
fuchsia	$ZIGLIB/std/target.zig	/fuchsia/;"	field
full	$ZIGLIB/std/zig/Ast.zig	/^pub const full = struct {$/;"	struct
fullArrayInit	$ZIGLIB/std/zig/Ast.zig	/^pub fn fullArrayInit(tree: Ast, buffer: *[2]Node.Index, node: Node.Index) ?full.ArrayInit {$/;"	function
fullArrayType	$ZIGLIB/std/zig/Ast.zig	/^pub fn fullArrayType(tree: Ast, node: Node.Index) ?full.ArrayType {$/;"	function
fullAsm	$ZIGLIB/std/zig/Ast.zig	/^pub fn fullAsm(tree: Ast, node: Node.Index) ?full.Asm {$/;"	function
fullAsmComponents	$ZIGLIB/std/zig/Ast.zig	/^fn fullAsmComponents(tree: Ast, info: full.Asm.Components) full.Asm {$/;"	function
fullCall	$ZIGLIB/std/zig/Ast.zig	/^pub fn fullCall(tree: Ast, buffer: *[1]Ast.Node.Index, node: Node.Index) ?full.Call {$/;"	function
fullCallComponents	$ZIGLIB/std/zig/Ast.zig	/^fn fullCallComponents(tree: Ast, info: full.Call.Components) full.Call {$/;"	function
fullContainerDecl	$ZIGLIB/std/zig/Ast.zig	/^pub fn fullContainerDecl(tree: Ast, buffer: *[2]Ast.Node.Index, node: Node.Index) ?full.ContainerDecl {$/;"	function
fullContainerDeclComponents	$ZIGLIB/std/zig/Ast.zig	/^fn fullContainerDeclComponents(tree: Ast, info: full.ContainerDecl.Components) full.ContainerDecl {$/;"	function
fullContainerField	$ZIGLIB/std/zig/Ast.zig	/^pub fn fullContainerField(tree: Ast, node: Node.Index) ?full.ContainerField {$/;"	function
fullContainerFieldComponents	$ZIGLIB/std/zig/Ast.zig	/^fn fullContainerFieldComponents(tree: Ast, info: full.ContainerField.Components) full.ContainerField {$/;"	function
fullFileName	$ZIGLIB/std/tar.zig	/pub fn fullFileName(header: Header, buffer: *[255]u8) ![]const u8 {$/;"	function
fullFnProto	$ZIGLIB/std/zig/Ast.zig	/^pub fn fullFnProto(tree: Ast, buffer: *[1]Ast.Node.Index, node: Node.Index) ?full.FnProto {$/;"	function
fullFnProtoComponents	$ZIGLIB/std/zig/Ast.zig	/^fn fullFnProtoComponents(tree: Ast, info: full.FnProto.Components) full.FnProto {$/;"	function
fullIf	$ZIGLIB/std/zig/Ast.zig	/^pub fn fullIf(tree: Ast, node: Node.Index) ?full.If {$/;"	function
fullIfComponents	$ZIGLIB/std/zig/Ast.zig	/^fn fullIfComponents(tree: Ast, info: full.If.Components) full.If {$/;"	function
fullPtrType	$ZIGLIB/std/zig/Ast.zig	/^pub fn fullPtrType(tree: Ast, node: Node.Index) ?full.PtrType {$/;"	function
fullPtrTypeComponents	$ZIGLIB/std/zig/Ast.zig	/^fn fullPtrTypeComponents(tree: Ast, info: full.PtrType.Components) full.PtrType {$/;"	function
fullSlice	$ZIGLIB/std/zig/Ast.zig	/^pub fn fullSlice(tree: Ast, node: Node.Index) ?full.Slice {$/;"	function
fullStructInit	$ZIGLIB/std/zig/Ast.zig	/^pub fn fullStructInit(tree: Ast, buffer: *[2]Ast.Node.Index, node: Node.Index) ?full.StructInit {$/;"	function
fullSwitchCase	$ZIGLIB/std/zig/Ast.zig	/^pub fn fullSwitchCase(tree: Ast, node: Node.Index) ?full.SwitchCase {$/;"	function
fullSwitchCaseComponents	$ZIGLIB/std/zig/Ast.zig	/^fn fullSwitchCaseComponents(tree: Ast, info: full.SwitchCase.Components, node: Node.Index) full.SwitchCase {$/;"	function
fullVarDecl	$ZIGLIB/std/zig/Ast.zig	/^pub fn fullVarDecl(tree: Ast, node: Node.Index) ?full.VarDecl {$/;"	function
fullVarDeclComponents	$ZIGLIB/std/zig/Ast.zig	/^fn fullVarDeclComponents(tree: Ast, info: full.VarDecl.Components) full.VarDecl {$/;"	function
fullWhile	$ZIGLIB/std/zig/Ast.zig	/^pub fn fullWhile(tree: Ast, node: Node.Index) ?full.While {$/;"	function
fullWhileComponents	$ZIGLIB/std/zig/Ast.zig	/^fn fullWhileComponents(tree: Ast, info: full.While.Components) full.While {$/;"	function
full_app_name	$ZIGLIB/std/child_process.zig	/const full_app_name = dir_buf.items[0 .. dir_buf.items.len - 1 :0]/;"	constant
full_blocks	$ZIGLIB/std/crypto/aes_ocb.zig	/const full_blocks: usize = m.len \/ 16/;"	constant
full_dest_path	$ZIGLIB/std/Build/InstallRawStep.zig	/const full_dest_path = b.getInstallPath(self.dest_dir, self.dest_filename)/;"	constant
full_dir	$ZIGLIB/std/Build/EmulatableRunStep.zig	/const full_dir = try std.fmt.allocPrint(self.builder.allocator, fmt_str, .{$/;"	constant
full_file_path	$ZIGLIB/std/Build/CompileStep.zig	/const full_file_path = config_header.output_file.path.?/;"	constant
full_h_path	$ZIGLIB/std/Build/InstallArtifactStep.zig	/const full_h_path = builder.getInstallPath(h_dir, self.artifact.out_h_filename)/;"	constant
full_implib_path	$ZIGLIB/std/Build/InstallArtifactStep.zig	/const full_implib_path = builder.getInstallPath(self.dest_dir, self.artifact.out_lib_filename)/;"	constant
full_index	$ZIGLIB/std/testing.zig	/var full_index = self.start_index + i/;"	variable
full_ld_path	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/const full_ld_path = result.dynamic_linker.buffer[0..len]/;"	constant
full_len	$ZIGLIB/std/os/uefi/pool_allocator.zig	/const full_len = metadata_len + len/;"	constant
full_path	$ZIGLIB/std/os.zig	/const full_path = path_buf[0..path_len :0].ptr/;"	constant
full_path_lib	$ZIGLIB/std/Build/CompileStep.zig	/const full_path_lib = other.getOutputLibSource().getPath(builder)/;"	constant
full_pdb_path	$ZIGLIB/std/Build/InstallArtifactStep.zig	/const full_pdb_path = builder.getInstallPath(pdb_dir, self.artifact.out_pdb_filename)/;"	constant
full_rate_64_ops	$ZIGLIB/std/target/amdgpu.zig	/full_rate_64_ops/;"	field
full_record_len	$ZIGLIB/std/crypto/tls/Client.zig	/const full_record_len = record_len + tls.record_header_len/;"	constant
full_src_dir	$ZIGLIB/std/Build/InstallDirStep.zig	/const full_src_dir = src_builder.pathFromRoot(self.options.source_dir)/;"	constant
full_src_path	$ZIGLIB/std/Build/InstallRawStep.zig	/const full_src_path = self.artifact.getOutputSource().getPath(b)/;"	constant
fullfp16	$ZIGLIB/std/target/arm.zig	/fullfp16/;"	field
fun_size	$ZIGLIB/std/debug.zig	/fun_size/;"	field
fun_strx	$ZIGLIB/std/debug.zig	/fun_strx/;"	field
func	$ZIGLIB/std/os/linux/bpf/btf.zig	/func/;"	field
funcOffset	$ZIGLIB/std/macho.zig	/funcOffset: u24/;"	field
func_def	$ZIGLIB/std/coff.zig	/func_def: FunctionDefinition/;"	field
func_indexes	$ZIGLIB/std/wasm.zig	/func_indexes: []const u32/;"	field
func_info	$ZIGLIB/std/os/linux/bpf.zig	/func_info: u64/;"	field
func_info_cnt	$ZIGLIB/std/os/linux/bpf.zig	/func_info_cnt: u32/;"	field
func_info_len	$ZIGLIB/std/os/linux/bpf/btf_ext.zig	/func_info_len: u32/;"	field
func_info_off	$ZIGLIB/std/os/linux/bpf/btf_ext.zig	/func_info_off: u32/;"	field
func_info_rec_size	$ZIGLIB/std/os/linux/bpf.zig	/func_info_rec_size: u32/;"	field
func_list	$ZIGLIB/std/dwarf.zig	/func_list: std.ArrayListUnmanaged(Func) = .{}/;"	field
func_proto	$ZIGLIB/std/os/linux/bpf/btf.zig	/func_proto/;"	field
func_type	$ZIGLIB/std/Build/CheckObjectStep.zig	/const func_type = try reader.readByte()/;"	constant
funcref	$ZIGLIB/std/wasm.zig	/funcref = 0x70/;"	field
function	$ZIGLIB/std/wasm.zig	/function: u32/;"	field
functionOffset	$ZIGLIB/std/macho.zig	/functionOffset: u32/;"	field
function_index	$ZIGLIB/std/Build/CheckObjectStep.zig	/var function_index: u32 = 0/;"	variable
function_indexes	$ZIGLIB/std/Build/CheckObjectStep.zig	/const function_indexes = try std.leb.readULEB128(u32, reader)/;"	constant
function_info	$ZIGLIB/std/meta.zig	/const function_info = info.Fn/;"	constant
function_number	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/function_number: u8/;"	field
function_template	$ZIGLIB/std/dwarf/TAG.zig	/^pub const function_template = 0x4102/;"	constant
function_type	$ZIGLIB/std/wasm.zig	/^pub const function_type: u8 = 0x60/;"	constant
fuse_add_logical	$ZIGLIB/std/target/powerpc.zig	/fuse_add_logical/;"	field
fuse_addi_load	$ZIGLIB/std/target/powerpc.zig	/fuse_addi_load/;"	field
fuse_addis_load	$ZIGLIB/std/target/powerpc.zig	/fuse_addis_load/;"	field
fuse_address	$ZIGLIB/std/target/aarch64.zig	/fuse_address/;"	field
fuse_adrp_add	$ZIGLIB/std/target/aarch64.zig	/fuse_adrp_add/;"	field
fuse_aes	$ZIGLIB/std/target/arm.zig	/fuse_aes/;"	field
fuse_arith_add	$ZIGLIB/std/target/powerpc.zig	/fuse_arith_add/;"	field
fuse_arith_logic	$ZIGLIB/std/target/aarch64.zig	/fuse_arith_logic/;"	field
fuse_back2back	$ZIGLIB/std/target/powerpc.zig	/fuse_back2back/;"	field
fuse_cmp	$ZIGLIB/std/target/powerpc.zig	/fuse_cmp/;"	field
fuse_crypto_eor	$ZIGLIB/std/target/aarch64.zig	/fuse_crypto_eor/;"	field
fuse_csel	$ZIGLIB/std/target/aarch64.zig	/fuse_csel/;"	field
fuse_literals	$ZIGLIB/std/target/arm.zig	/fuse_literals/;"	field
fuse_logical	$ZIGLIB/std/target/powerpc.zig	/fuse_logical/;"	field
fuse_logical_add	$ZIGLIB/std/target/powerpc.zig	/fuse_logical_add/;"	field
fuse_sha3	$ZIGLIB/std/target/powerpc.zig	/fuse_sha3/;"	field
fuse_store	$ZIGLIB/std/target/powerpc.zig	/fuse_store/;"	field
fuse_wideimm	$ZIGLIB/std/target/powerpc.zig	/fuse_wideimm/;"	field
fuse_zeromove	$ZIGLIB/std/target/powerpc.zig	/fuse_zeromove/;"	field
fusion	$ZIGLIB/std/target/powerpc.zig	/fusion/;"	field
futex	$ZIGLIB/std/os/linux/syscalls.zig	/futex = Linux + 238/;"	field
futex_deadline	$ZIGLIB/std/Thread/ResetEvent.zig	/var futex_deadline = Futex.Deadline.init(timeout)/;"	variable
futex_time64	$ZIGLIB/std/os/linux/syscalls.zig	/futex_time64 = Linux + 422/;"	field
futex_wait	$ZIGLIB/std/os/linux.zig	/^pub fn futex_wait(uaddr: *const i32, futex_op: u32, val: i32, timeout: ?*const timespec) usize {$/;"	function
futex_waitv	$ZIGLIB/std/os/linux/syscalls.zig	/futex_waitv = Linux + 449/;"	field
futex_wake	$ZIGLIB/std/os/linux.zig	/^pub fn futex_wake(uaddr: *const i32, futex_op: u32, val: i32) usize {$/;"	function
futex_word	$ZIGLIB/std/Thread/Futex.zig	/var futex_word = Atomic(u32).init(0)/;"	variable
futimens	$ZIGLIB/std/os/linux.zig	/^pub fn futimens(fd: i32, times: *const [2]timespec) usize {$/;"	function
futimesat	$ZIGLIB/std/os/linux/syscalls.zig	/futimesat = Linux + 292/;"	field
future	$ZIGLIB/std/target/powerpc.zig	/pub const future = CpuModel{$/;"	constant
fuzzTest	$ZIGLIB/std/sort.zig	/^fn fuzzTest(rng: std.rand.Random) !void {$/;"	function
fuzzTestMax	$ZIGLIB/std/priority_dequeue.zig	/^fn fuzzTestMax(rng: std.rand.Random, queue_size: usize) !void {$/;"	function
fuzzTestMin	$ZIGLIB/std/priority_dequeue.zig	/^fn fuzzTestMin(rng: std.rand.Random, comptime queue_size: usize) !void {$/;"	function
fuzzTestMinMax	$ZIGLIB/std/priority_dequeue.zig	/^fn fuzzTestMinMax(rng: std.rand.Random, queue_size: usize) !void {$/;"	function
fv_filename	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/fv_filename: Guid align(1)/;"	field
fv_name	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/fv_name: Guid align(1)/;"	field
fwd_amt	$ZIGLIB/std/dwarf.zig	/const fwd_amt = math.cast(isize, op_size - 1) orelse return badDwarf()/;"	constant
fxsr	$ZIGLIB/std/target/x86.zig	/fxsr/;"	field
g_hChildStd_ERR_Rd	$ZIGLIB/std/child_process.zig	/var g_hChildStd_ERR_Rd: ?windows.HANDLE = null/;"	variable
g_hChildStd_ERR_Wr	$ZIGLIB/std/child_process.zig	/var g_hChildStd_ERR_Wr: ?windows.HANDLE = null/;"	variable
g_hChildStd_IN_Rd	$ZIGLIB/std/child_process.zig	/var g_hChildStd_IN_Rd: ?windows.HANDLE = null/;"	variable
g_hChildStd_IN_Wr	$ZIGLIB/std/child_process.zig	/var g_hChildStd_IN_Wr: ?windows.HANDLE = null/;"	variable
g_hChildStd_OUT_Rd	$ZIGLIB/std/child_process.zig	/var g_hChildStd_OUT_Rd: ?windows.HANDLE = null/;"	variable
g_hChildStd_OUT_Wr	$ZIGLIB/std/child_process.zig	/var g_hChildStd_OUT_Wr: ?windows.HANDLE = null/;"	variable
gateway	$ZIGLIB/std/os/uefi/protocols/ip6_protocol.zig	/gateway: Ip6Address/;"	field
gateway_ip_address	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/gateway_ip_address: uefi.Ipv6Address/;"	field
gateway_timeout	$ZIGLIB/std/http.zig	/gateway_timeout = 504/;"	field
gcc_word	$ZIGLIB/compiler_rt/emutls.zig	/^const gcc_word = usize/;"	constant
gcdLehmer	$ZIGLIB/std/math/big/int.zig	/fn gcdLehmer(result: *Mutable, xa: Const, ya: Const, limbs_buffer: *std.ArrayList(Limb)) !void {$/;"	function
gcdNoAlias	$ZIGLIB/std/math/big/int.zig	/pub fn gcdNoAlias(rma: *Mutable, x: Const, y: Const, limbs_buffer: *std.ArrayList(Limb)) !void {$/;"	function
gcn3_encoding	$ZIGLIB/std/target/amdgpu.zig	/gcn3_encoding/;"	field
gdbHelper	$ZIGLIB/std/multi_array_list.zig	/fn gdbHelper(self: *Self, child: *S) void {$/;"	function
gdt_entry_number	$ZIGLIB/std/os/linux/tls.zig	/gdt_entry_number: usize/;"	field
general_name	$ZIGLIB/std/crypto/Certificate.zig	/const general_name = try der.Element.parse(subject_alt_name, name_i)/;"	constant
general_names	$ZIGLIB/std/crypto/Certificate.zig	/const general_names = try der.Element.parse(subject_alt_name, 0)/;"	constant
generalized_time	$ZIGLIB/std/crypto/Certificate.zig	/generalized_time = 24/;"	field
generate	$ZIGLIB/std/compress/deflate/huffman_code.zig	/pub fn generate(self: *HuffmanEncoder, freq: []u16, max_bits: u32) void {$/;"	function
generateCodegen	$ZIGLIB/std/compress/deflate/huffman_bit_writer.zig	/fn generateCodegen($/;"	function
generateFixedLiteralEncoding	$ZIGLIB/std/compress/deflate/huffman_code.zig	/^pub fn generateFixedLiteralEncoding(allocator: Allocator) !HuffmanEncoder {$/;"	function
generateFixedOffsetEncoding	$ZIGLIB/std/compress/deflate/huffman_code.zig	/^pub fn generateFixedOffsetEncoding(allocator: Allocator) !HuffmanEncoder {$/;"	function
generateRandomSlice	$ZIGLIB/std/priority_dequeue.zig	/^fn generateRandomSlice(allocator: std.mem.Allocator, rng: std.rand.Random, size: usize) ![]u32 {$/;"	function
generateSbox	$ZIGLIB/std/crypto/aes/soft.zig	/^fn generateSbox(invert: bool) [256]u8 {$/;"	function
generateTable	$ZIGLIB/std/crypto/aes/soft.zig	/^fn generateTable(invert: bool) [4][256]u32 {$/;"	function
generated	$ZIGLIB/std/Build.zig	/generated: *const GeneratedFile/;"	field
generated_file	$ZIGLIB/std/Build/OptionsStep.zig	/^generated_file: GeneratedFile/;"	field
generic	$ZIGLIB/std/target/x86.zig	/pub const generic = CpuModel{$/;"	constant
genericCpuAndNativeFeatures	$ZIGLIB/std/zig/system/windows.zig	/^fn genericCpuAndNativeFeatures(arch: Target.Cpu.Arch) Target.Cpu {$/;"	function
genericName	$ZIGLIB/std/target.zig	/pub fn genericName(arch: Arch) []const u8 {$/;"	function
generic_fabs	$ZIGLIB/compiler_rt/fabs.zig	/^inline fn generic_fabs(x: anytype) @TypeOf(x) {$/;"	function
generic_fmax	$ZIGLIB/compiler_rt/fmax.zig	/^inline fn generic_fmax(comptime T: type, x: T, y: T) T {$/;"	function
generic_fmin	$ZIGLIB/compiler_rt/fmin.zig	/^inline fn generic_fmin(comptime T: type, x: T, y: T) T {$/;"	function
generic_fmod	$ZIGLIB/compiler_rt/fmod.zig	/^inline fn generic_fmod(comptime T: type, x: T, y: T) T {$/;"	function
generic_hsa	$ZIGLIB/std/target/amdgpu.zig	/pub const generic_hsa = CpuModel{$/;"	constant
generic_model	$ZIGLIB/std/target.zig	/const generic_model = Model{$/;"	constant
generic_rv32	$ZIGLIB/std/target/riscv.zig	/pub const generic_rv32 = CpuModel{$/;"	constant
generic_rv64	$ZIGLIB/std/target/riscv.zig	/pub const generic_rv64 = CpuModel{$/;"	constant
generic_subrange	$ZIGLIB/std/dwarf/TAG.zig	/^pub const generic_subrange = 0x45/;"	constant
geode	$ZIGLIB/std/target/x86.zig	/pub const geode = CpuModel{$/;"	constant
geometricshape_down_triangle	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/pub const geometricshape_down_triangle: u16 = 0x25bc/;"	constant
geometricshape_left_triangle	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/pub const geometricshape_left_triangle: u16 = 0x25c4/;"	constant
geometricshape_right_triangle	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/pub const geometricshape_right_triangle: u16 = 0x25ba/;"	constant
geometricshape_up_triangle	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/pub const geometricshape_up_triangle: u16 = 0x25b2/;"	constant
geometry	$ZIGLIB/std/target.zig	/geometry/;"	field
getAbbrevTable	$ZIGLIB/std/dwarf.zig	/fn getAbbrevTable(di: *DwarfInfo, allocator: mem.Allocator, abbrev_offset: u64) !*const AbbrevTable {$/;"	function
getAbbrevTableEntry	$ZIGLIB/std/dwarf.zig	/^fn getAbbrevTableEntry(abbrev_table: *const AbbrevTable, abbrev_code: u64) ?*const AbbrevTableEntry {$/;"	function
getAbi	$ZIGLIB/std/zig/CrossTarget.zig	/^pub fn getAbi(self: CrossTarget) Target.Abi {$/;"	function
getAdapted	$ZIGLIB/std/hash_map.zig	/pub fn getAdapted(self: Self, key: anytype, ctx: anytype) ?V {$/;"	function
getAddressList	$ZIGLIB/std/net.zig	/^pub fn getAddressList(allocator: mem.Allocator, name: []const u8, port: u16) !*AddressList {$/;"	function
getAlignment	$ZIGLIB/std/coff.zig	/pub fn getAlignment(self: SectionHeader) ?u16 {$/;"	function
getAppDataDir	$ZIGLIB/std/fs/get_app_data_dir.zig	/^pub fn getAppDataDir(allocator: mem.Allocator, appname: []const u8) GetAppDataDirError![]u8 {$/;"	function
getArg	$ZIGLIB/std/Build/CompileStep.zig	/fn getArg(self: @This(), b: *std.Build, arg_name: []const u8) ?[]const u8 {$/;"	function
getArray	$ZIGLIB/compiler_rt/emutls.zig	/pub fn getArray(index: usize) *ObjectArray {$/;"	function
getAssertContains	$ZIGLIB/std/enums.zig	/pub fn getAssertContains(self: Self, key: Key) Value {$/;"	function
getAttr	$ZIGLIB/std/dwarf.zig	/fn getAttr(self: *const Die, id: u64) ?*const FormValue {$/;"	function
getAttrAddr	$ZIGLIB/std/dwarf.zig	/fn getAttrAddr($/;"	function
getAttrRef	$ZIGLIB/std/dwarf.zig	/fn getAttrRef(self: *const Die, id: u64) !u64 {$/;"	function
getAttrSecOffset	$ZIGLIB/std/dwarf.zig	/fn getAttrSecOffset(self: *const Die, id: u64) !u64 {$/;"	function
getAttrString	$ZIGLIB/std/dwarf.zig	/pub fn getAttrString($/;"	function
getAttrUnsignedLe	$ZIGLIB/std/dwarf.zig	/fn getAttrUnsignedLe(self: *const Die, id: u64) !u64 {$/;"	function
getAutoEqlFn	$ZIGLIB/std/hash_map.zig	/^pub fn getAutoEqlFn(comptime K: type, comptime Context: type) (fn (Context, K, K) bool) {$/;"	function
getAutoHashFn	$ZIGLIB/std/hash_map.zig	/^pub fn getAutoHashFn(comptime K: type, comptime Context: type) (fn (Context, K) u64) {$/;"	function
getAutoHashStratFn	$ZIGLIB/std/array_hash_map.zig	/^pub fn getAutoHashStratFn(comptime K: type, comptime Context: type, comptime strategy: std.hash.Strategy) (fn (Context, K) u32) {$/;"	function
getBaseAddress	$ZIGLIB/std/process.zig	/^pub fn getBaseAddress() usize {$/;"	function
getBasicInfo	$ZIGLIB/std/os/darwin.zig	/pub fn getBasicInfo(thread: MachThread) MachError!std.c.thread_basic_info {$/;"	function
getBit	$ZIGLIB/std/heap/WasmPageAllocator.zig	/fn getBit(self: FreeBlock, idx: usize) PageStatus {$/;"	function
getBits	$ZIGLIB/std/packed_int_array.zig	/fn getBits(bytes: []const u8, comptime Container: type, bit_index: usize) Int {$/;"	function
getCoffHeader	$ZIGLIB/std/coff.zig	/pub fn getCoffHeader(self: Coff) CoffHeader {$/;"	function
getContext	$ZIGLIB/std/hash_map.zig	/pub fn getContext(self: Self, key: K, ctx: Context) ?V {$/;"	function
getCount	$ZIGLIB/std/enums.zig	/pub fn getCount(self: Self, key: E) CountSize {$/;"	function
getCpu	$ZIGLIB/std/zig/CrossTarget.zig	/^pub fn getCpu(self: CrossTarget) Target.Cpu {$/;"	function
getCpuArch	$ZIGLIB/std/zig/CrossTarget.zig	/^pub fn getCpuArch(self: CrossTarget) Target.Cpu.Arch {$/;"	function
getCpuCount	$ZIGLIB/std/zig/system/windows.zig	/^fn getCpuCount() usize {$/;"	function
getCpuFeatures	$ZIGLIB/std/zig/CrossTarget.zig	/^pub fn getCpuFeatures(self: CrossTarget) Target.Cpu.Feature.Set {$/;"	function
getCpuInfoFromRegistry	$ZIGLIB/std/zig/system/windows.zig	/^fn getCpuInfoFromRegistry(core: usize, args: anytype) !void {$/;"	function
getCpuModel	$ZIGLIB/std/zig/CrossTarget.zig	/^pub fn getCpuModel(self: CrossTarget) *const Target.Cpu.Model {$/;"	function
getCurrProtection	$ZIGLIB/std/os/darwin.zig	/pub fn getCurrProtection(task: MachTask, address: u64, len: usize) MachError!std.c.vm_prot_t {$/;"	function
getCurrentId	$ZIGLIB/std/Thread.zig	/fn getCurrentId() windows.DWORD {$/;"	function
getCwd	$ZIGLIB/std/process.zig	/^pub fn getCwd(out_buffer: []u8) ![]u8 {$/;"	function
getCwdAlloc	$ZIGLIB/std/process.zig	/^pub fn getCwdAlloc(allocator: Allocator) ![]u8 {$/;"	function
getDC	$ZIGLIB/std/os/windows/user32.zig	/^pub fn getDC(hWnd: ?HWND) !HDC {$/;"	function
getDarwinSDK	$ZIGLIB/std/zig/system/darwin.zig	/^pub fn getDarwinSDK(allocator: Allocator, target: Target) ?DarwinSDK {$/;"	function
getData	$ZIGLIB/std/os/uefi/protocols/ip6_config_protocol.zig	/pub fn getData(self: *const Ip6ConfigProtocol, data_type: Ip6ConfigDataType, data_size: *usize, data: ?*const anyopaque) Status {$/;"	function
getData16	$ZIGLIB/std/dwarf.zig	/fn getData16(fv: FormValue) ![16]u8 {$/;"	function
getDataDirectories	$ZIGLIB/std/coff.zig	/pub fn getDataDirectories(self: *const Coff) []align(1) const ImageDataDirectory {$/;"	function
getDaySeconds	$ZIGLIB/std/time/epoch.zig	/pub fn getDaySeconds(self: EpochSeconds) DaySeconds {$/;"	function
getDaysInMonth	$ZIGLIB/std/time/epoch.zig	/^pub fn getDaysInMonth(leap_year: YearLeapKind, month: Month) u5 {$/;"	function
getDaysInYear	$ZIGLIB/std/time/epoch.zig	/^pub fn getDaysInYear(year: Year) u9 {$/;"	function
getDebugInfoAllocator	$ZIGLIB/std/debug.zig	/^fn getDebugInfoAllocator() mem.Allocator {$/;"	function
getDescription	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/pub fn getDescription(self: *const BBS101DevicePath) [*:0]const u8 {$/;"	function
getDevicePath	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/pub fn getDevicePath(self: *const DevicePathProtocol) ?DevicePath {$/;"	function
getDisplayName	$ZIGLIB/std/Build.zig	/pub fn getDisplayName(self: FileSource) []const u8 {$/;"	function
getDylibPathName	$ZIGLIB/std/macho.zig	/pub fn getDylibPathName(lc: LoadCommand) []const u8 {$/;"	function
getDynamicSymbol	$ZIGLIB/std/os/linux/start_pie.zig	/^fn getDynamicSymbol() [*]elf.Dyn {$/;"	function
getEdid	$ZIGLIB/std/os/uefi/protocols/edid_override_protocol.zig	/pub fn getEdid($/;"	function
getEndPos	$ZIGLIB/std/os/uefi/protocols/file_protocol.zig	/fn getEndPos(self: *const FileProtocol) GetSeekPosError!u64 {$/;"	function
getEntry	$ZIGLIB/std/hash_map.zig	/pub fn getEntry(self: Self, key: K) ?Entry {$/;"	function
getEntryAdapted	$ZIGLIB/std/hash_map.zig	/pub fn getEntryAdapted(self: Self, key: anytype, ctx: anytype) ?Entry {$/;"	function
getEntryContext	$ZIGLIB/std/hash_map.zig	/pub fn getEntryContext(self: Self, key: K, ctx: Context) ?Entry {$/;"	function
getEntryFor	$ZIGLIB/std/treap.zig	/pub fn getEntryFor(self: *Self, key: Key) Entry {$/;"	function
getEntryForExisting	$ZIGLIB/std/treap.zig	/pub fn getEntryForExisting(self: *Self, node: *Node) Entry {$/;"	function
getEnvMap	$ZIGLIB/std/process.zig	/^pub fn getEnvMap(allocator: Allocator) !EnvMap {$/;"	function
getEnvMapInternal	$ZIGLIB/std/Build/RunStep.zig	/^fn getEnvMapInternal(step: *Step, allocator: Allocator) *EnvMap {$/;"	function
getEnvVarOwned	$ZIGLIB/std/process.zig	/^pub fn getEnvVarOwned(allocator: Allocator, key: []const u8) GetEnvVarOwnedError![]u8 {$/;"	function
getEpochDay	$ZIGLIB/std/time/epoch.zig	/pub fn getEpochDay(self: EpochSeconds) EpochDay {$/;"	function
getErrno	$ZIGLIB/std/os/wasi.zig	/^pub fn getErrno(r: errno_t) errno_t {$/;"	function
getExceptionPorts	$ZIGLIB/std/os/darwin.zig	/pub fn getExceptionPorts(self: MachTask, mask: std.c.exception_mask_t) !PortInfo {$/;"	function
getExternalExecutor	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/^pub fn getExternalExecutor($/;"	function
getFdPath	$ZIGLIB/std/os.zig	/^pub fn getFdPath(fd: fd_t, out_buffer: *[MAX_PATH_BYTES]u8) RealPathError![]u8 {$/;"	function
getFileName	$ZIGLIB/std/os/uefi/protocols/file_protocol.zig	/pub fn getFileName(self: *const FileInfo) [*:0]const u16 {$/;"	function
getFilePos	$ZIGLIB/std/pdb.zig	/fn getFilePos(self: MsfStream) u64 {$/;"	function
getFileSource	$ZIGLIB/std/Build/WriteFileStep.zig	/^pub fn getFileSource(step: *WriteFileStep, basename: []const u8) ?std.Build.FileSource {$/;"	function
getFloatAbi	$ZIGLIB/std/target.zig	/pub fn getFloatAbi(self: Target) FloatAbi {$/;"	function
getFragments	$ZIGLIB/std/os/uefi/protocols/udp6_protocol.zig	/pub fn getFragments(self: *Udp6TransmitData) []Udp6FragmentData {$/;"	function
getFullPathNameW	$ZIGLIB/std/os/windows.zig	/^fn getFullPathNameW(path: [*:0]const u16, out: []u16) !usize {$/;"	function
getHandle	$ZIGLIB/std/Thread.zig	/fn getHandle(self: Impl) ThreadHandle {$/;"	function
getHashPtrAddrFn	$ZIGLIB/std/array_hash_map.zig	/^pub fn getHashPtrAddrFn(comptime K: type, comptime Context: type) (fn (Context, K) u32) {$/;"	function
getHeader	$ZIGLIB/std/os/uefi/pool_allocator.zig	/fn getHeader(ptr: [*]u8) *[*]align(8) u8 {$/;"	function
getHoursIntoDay	$ZIGLIB/std/time/epoch.zig	/pub fn getHoursIntoDay(self: DaySeconds) u5 {$/;"	function
getIdentifierInfo	$ZIGLIB/std/os/darwin.zig	/pub fn getIdentifierInfo(thread: MachThread) MachError!std.c.thread_identifier_info {$/;"	function
getImageBase	$ZIGLIB/std/coff.zig	/pub fn getImageBase(self: Coff) u64 {$/;"	function
getImportByName	$ZIGLIB/std/coff.zig	/pub fn getImportByName(raw: u64) ?ByName {$/;"	function
getImportByOrdinal	$ZIGLIB/std/coff.zig	/pub fn getImportByOrdinal(raw: u64) ?ByOrdinal {$/;"	function
getIndex	$ZIGLIB/std/hash_map.zig	/inline fn getIndex(self: Self, key: anytype, ctx: anytype) ?usize {$/;"	function
getIndexAdapted	$ZIGLIB/std/array_hash_map.zig	/pub fn getIndexAdapted(self: Self, key: anytype, ctx: anytype) ?usize {$/;"	function
getIndexContext	$ZIGLIB/std/array_hash_map.zig	/pub fn getIndexContext(self: Self, key: K, ctx: Context) ?usize {$/;"	function
getIndexWithHeaderGeneric	$ZIGLIB/std/array_hash_map.zig	/fn getIndexWithHeaderGeneric(self: Self, key: anytype, ctx: anytype, header: *IndexHeader, comptime I: type) ?usize {$/;"	function
getInfo	$ZIGLIB/std/os/uefi/protocols/rng_protocol.zig	/pub fn getInfo(self: *const RNGProtocol, list_size: *usize, list: [*]align(8) Guid) Status {$/;"	function
getInstallPath	$ZIGLIB/std/Build.zig	/^pub fn getInstallPath(self: *Build, dir: InstallDir, dest_rel_path: []const u8) []const u8 {$/;"	function
getInstallStep	$ZIGLIB/std/Build.zig	/^pub fn getInstallStep(self: *Build) *Step {$/;"	function
getInvalidCharacterLength	$ZIGLIB/std/zig/tokenizer.zig	/fn getInvalidCharacterLength(self: *Tokenizer) u3 {$/;"	function
getItem	$ZIGLIB/std/priority_dequeue.zig	/fn getItem(self: Self, index: usize) ItemAndIndex {$/;"	function
getJsonObject	$ZIGLIB/std/json/write_stream.zig	/^fn getJsonObject(allocator: std.mem.Allocator) !std.json.Value {$/;"	function
getKernError	$ZIGLIB/std/c/darwin.zig	/^pub fn getKernError(err: kern_return_t) KernE {$/;"	function
getKey	$ZIGLIB/std/hash_map.zig	/pub fn getKey(self: Self, key: K) ?K {$/;"	function
getKeyAdapted	$ZIGLIB/std/hash_map.zig	/pub fn getKeyAdapted(self: Self, key: anytype, ctx: anytype) ?K {$/;"	function
getKeyContext	$ZIGLIB/std/hash_map.zig	/pub fn getKeyContext(self: Self, key: K, ctx: Context) ?K {$/;"	function
getKeyPtr	$ZIGLIB/std/hash_map.zig	/pub fn getKeyPtr(self: Self, key: K) ?*K {$/;"	function
getKeyPtrAdapted	$ZIGLIB/std/hash_map.zig	/pub fn getKeyPtrAdapted(self: Self, key: anytype, ctx: anytype) ?*K {$/;"	function
getKeyPtrContext	$ZIGLIB/std/hash_map.zig	/pub fn getKeyPtrContext(self: Self, key: K, ctx: Context) ?*K {$/;"	function
getKeyword	$ZIGLIB/std/zig/tokenizer.zig	/pub fn getKeyword(bytes: []const u8) ?Tag {$/;"	function
getLast	$ZIGLIB/std/array_list.zig	/pub fn getLast(self: Self) T {$/;"	function
getLastOrNull	$ZIGLIB/std/array_list.zig	/pub fn getLastOrNull(self: Self) ?T {$/;"	function
getLineNumberInfo	$ZIGLIB/std/pdb.zig	/pub fn getLineNumberInfo(self: *Pdb, module: *Module, address: u64) !debug.LineInfo {$/;"	function
getLineString	$ZIGLIB/std/dwarf.zig	/fn getLineString(di: DwarfInfo, offset: u64) ![]const u8 {$/;"	function
getMachMsgError	$ZIGLIB/std/c/darwin.zig	/^pub fn getMachMsgError(err: mach_msg_return_t) MachMsgE {$/;"	function
getMax	$ZIGLIB/std/treap.zig	/pub fn getMax(self: Self) ?*Node {$/;"	function
getMemoryMap	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/getMemoryMap: *const fn (mmap_size: *usize, mmap: ?[*]MemoryDescriptor, mapKey: *usize, descriptor_size: *usize, descriptor_version: *u32) callconv(.C) Status/;"	field
getMessageA	$ZIGLIB/std/os/windows/user32.zig	/^pub fn getMessageA(lpMsg: *MSG, hWnd: ?HWND, wMsgFilterMin: u32, wMsgFilterMax: u32) !void {$/;"	function
getMessageW	$ZIGLIB/std/os/windows/user32.zig	/^pub fn getMessageW(lpMsg: *MSG, hWnd: ?HWND, wMsgFilterMin: u32, wMsgFilterMax: u32) !void {$/;"	function
getMin	$ZIGLIB/std/treap.zig	/pub fn getMin(self: Self) ?*Node {$/;"	function
getMinutesIntoHour	$ZIGLIB/std/time/epoch.zig	/pub fn getMinutesIntoHour(self: DaySeconds) u6 {$/;"	function
getModeData	$ZIGLIB/std/os/uefi/protocols/udp6_protocol.zig	/pub fn getModeData(self: *const Udp6Protocol, udp6_config_data: ?*Udp6ConfigData, ip6_mode_data: ?*Ip6ModeData, mnp_config_data: ?*ManagedNetworkConfigData, snp_mode_data: ?*SimpleNetworkMode) Status {$/;"	function
getModule	$ZIGLIB/std/pdb.zig	/pub fn getModule(self: *Pdb, index: usize) !?*Module {$/;"	function
getModuleForAddress	$ZIGLIB/std/debug.zig	/pub fn getModuleForAddress(self: *DebugInfo, address: usize) !*ModuleDebugInfo {$/;"	function
getMut	$ZIGLIB/std/compress/lzma/vec2d.zig	/pub fn getMut(self: *Self, row: usize) ![]T {$/;"	function
getName	$ZIGLIB/std/coff.zig	/pub fn getName(self: *const Symbol) ?[]const u8 {$/;"	function
getNameOffset	$ZIGLIB/std/coff.zig	/pub fn getNameOffset(self: Symbol) ?u32 {$/;"	function
getNarrowGlyphs	$ZIGLIB/std/os/uefi/protocols/hii.zig	/pub fn getNarrowGlyphs(self: *HIISimplifiedFontPackage) []NarrowGlyph {$/;"	function
getNextHighMonotonicCount	$ZIGLIB/std/os/uefi/tables/runtime_services.zig	/getNextHighMonotonicCount: *const fn (high_count: *u32) callconv(.C) Status/;"	field
getNextMonotonicCount	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/getNextMonotonicCount: *const fn (count: *u64) callconv(.C) Status/;"	field
getNextVariableName	$ZIGLIB/std/os/uefi/tables/runtime_services.zig	/getNextVariableName: *const fn (var_name_size: *usize, var_name: [*:0]u16, vendor_guid: *align(8) Guid) callconv(.C) Status/;"	field
getNodeSource	$ZIGLIB/std/zig/Ast.zig	/^pub fn getNodeSource(tree: Ast, node: Node.Index) []const u8 {$/;"	function
getNumberOfDataDirectories	$ZIGLIB/std/coff.zig	/pub fn getNumberOfDataDirectories(self: Coff) u32 {$/;"	function
getObjectFormat	$ZIGLIB/std/zig/CrossTarget.zig	/^pub fn getObjectFormat(self: CrossTarget) Target.ObjectFormat {$/;"	function
getOffset	$ZIGLIB/std/crypto/aes_ocb.zig	/fn getOffset(aes_enc_ctx: EncryptCtx, npub: [nonce_length]u8) Block {$/;"	function
getOptionalHeader	$ZIGLIB/std/coff.zig	/pub fn getOptionalHeader(self: Coff) OptionalHeader {$/;"	function
getOptionalHeader32	$ZIGLIB/std/coff.zig	/pub fn getOptionalHeader32(self: Coff) OptionalHeaderPE32 {$/;"	function
getOptionalHeader64	$ZIGLIB/std/coff.zig	/pub fn getOptionalHeader64(self: Coff) OptionalHeaderPE64 {$/;"	function
getOrNull	$ZIGLIB/std/event/future.zig	/pub fn getOrNull(self: *Self) ?*T {$/;"	function
getOrPut	$ZIGLIB/std/hash_map.zig	/pub fn getOrPut(self: *Self, key: K) Allocator.Error!GetOrPutResult {$/;"	function
getOrPutAdapted	$ZIGLIB/std/hash_map.zig	/pub fn getOrPutAdapted(self: *Self, key: anytype, ctx: anytype) Allocator.Error!GetOrPutResult {$/;"	function
getOrPutAssumeCapacity	$ZIGLIB/std/hash_map.zig	/pub fn getOrPutAssumeCapacity(self: *Self, key: K) GetOrPutResult {$/;"	function
getOrPutAssumeCapacityAdapted	$ZIGLIB/std/hash_map.zig	/pub fn getOrPutAssumeCapacityAdapted(self: *Self, key: anytype, ctx: anytype) GetOrPutResult {$/;"	function
getOrPutAssumeCapacityContext	$ZIGLIB/std/hash_map.zig	/pub fn getOrPutAssumeCapacityContext(self: *Self, key: K, ctx: Context) GetOrPutResult {$/;"	function
getOrPutContext	$ZIGLIB/std/hash_map.zig	/pub fn getOrPutContext(self: *Self, allocator: Allocator, key: K, ctx: Context) Allocator.Error!GetOrPutResult {$/;"	function
getOrPutContextAdapted	$ZIGLIB/std/hash_map.zig	/pub fn getOrPutContextAdapted(self: *Self, allocator: Allocator, key: anytype, key_ctx: anytype, ctx: Context) Allocator.Error!GetOrPutResult {$/;"	function
getOrPutInternal	$ZIGLIB/std/array_hash_map.zig	/fn getOrPutInternal(self: *Self, key: anytype, ctx: anytype, header: *IndexHeader, comptime I: type) GetOrPutResult {$/;"	function
getOrPutValue	$ZIGLIB/std/hash_map.zig	/pub fn getOrPutValue(self: *Self, key: K, value: V) Allocator.Error!Entry {$/;"	function
getOrPutValueContext	$ZIGLIB/std/hash_map.zig	/pub fn getOrPutValueContext(self: *Self, allocator: Allocator, key: K, value: V, ctx: Context) Allocator.Error!Entry {$/;"	function
getOs	$ZIGLIB/std/zig/CrossTarget.zig	/^pub fn getOs(self: CrossTarget) Target.Os {$/;"	function
getOsSockLen	$ZIGLIB/std/net.zig	/pub fn getOsSockLen(self: Ip6Address) os.socklen_t {$/;"	function
getOsTag	$ZIGLIB/std/zig/CrossTarget.zig	/^pub fn getOsTag(self: CrossTarget) Target.Os.Tag {$/;"	function
getOsVersionMax	$ZIGLIB/std/zig/CrossTarget.zig	/^pub fn getOsVersionMax(self: CrossTarget) OsVersion {$/;"	function
getOsVersionMin	$ZIGLIB/std/zig/CrossTarget.zig	/^pub fn getOsVersionMin(self: CrossTarget) OsVersion {$/;"	function
getOutputHSource	$ZIGLIB/std/Build/CompileStep.zig	/^pub fn getOutputHSource(self: *CompileStep) FileSource {$/;"	function
getOutputLibSource	$ZIGLIB/std/Build/CompileStep.zig	/^pub fn getOutputLibSource(self: *CompileStep) FileSource {$/;"	function
getOutputPdbSource	$ZIGLIB/std/Build/CompileStep.zig	/^pub fn getOutputPdbSource(self: *CompileStep) FileSource {$/;"	function
getOutputSource	$ZIGLIB/std/Build/InstallRawStep.zig	/^pub fn getOutputSource(self: *const InstallRawStep) std.Build.FileSource {$/;"	function
getPageSize	$ZIGLIB/std/os/darwin.zig	/fn getPageSize(task: MachTask) MachError!usize {$/;"	function
getPath	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/pub fn getPath(self: *const FilePathDevicePath) [*:0]align(1) const u16 {$/;"	function
getPdbPath	$ZIGLIB/std/coff.zig	/pub fn getPdbPath(self: *Coff, buffer: []u8) !usize {$/;"	function
getPkgConfigList	$ZIGLIB/std/Build/CompileStep.zig	/^fn getPkgConfigList(self: *std.Build) ![]const PkgConfigPkg {$/;"	function
getPointer	$ZIGLIB/compiler_rt/emutls.zig	/pub fn getPointer(self: *emutls_control) *anyopaque {$/;"	function
getPort	$ZIGLIB/std/net.zig	/pub fn getPort(self: Ip6Address) u16 {$/;"	function
getPos	$ZIGLIB/std/os/uefi/protocols/file_protocol.zig	/fn getPos(self: *const FileProtocol) GetSeekPosError!u64 {$/;"	function
getPosition	$ZIGLIB/std/os/uefi/protocols/file_protocol.zig	/pub fn getPosition(self: *const FileProtocol, position: *u64) Status {$/;"	function
getPtr	$ZIGLIB/std/process.zig	/pub fn getPtr(self: EnvMap, key: []const u8) ?*[]const u8 {$/;"	function
getPtrAdapted	$ZIGLIB/std/hash_map.zig	/pub fn getPtrAdapted(self: Self, key: anytype, ctx: anytype) ?*V {$/;"	function
getPtrAssertContains	$ZIGLIB/std/enums.zig	/pub fn getPtrAssertContains(self: *Self, key: Key) *Value {$/;"	function
getPtrConst	$ZIGLIB/std/enums.zig	/pub fn getPtrConst(self: *const Self, key: Key) ?*const Value {$/;"	function
getPtrContext	$ZIGLIB/std/hash_map.zig	/pub fn getPtrContext(self: Self, key: K, ctx: Context) ?*V {$/;"	function
getRNG	$ZIGLIB/std/os/uefi/protocols/rng_protocol.zig	/pub fn getRNG(self: *const RNGProtocol, algo: ?*align(8) const Guid, value_length: usize, value: [*]u8) Status {$/;"	function
getRandomBytesDevURandom	$ZIGLIB/std/os.zig	/^fn getRandomBytesDevURandom(buf: []u8) !void {$/;"	function
getRecordPtr	$ZIGLIB/std/heap.zig	/fn getRecordPtr(buf: []u8) *align(1) usize {$/;"	function
getRegionInfo	$ZIGLIB/std/os/darwin.zig	/pub fn getRegionInfo($/;"	function
getRegionSubmapInfo	$ZIGLIB/std/os/darwin.zig	/pub fn getRegionSubmapInfo($/;"	function
getRegs	$ZIGLIB/std/os/windows.zig	/pub fn getRegs(ctx: *const CONTEXT) struct { bp: usize, ip: usize, sp: usize } {$/;"	function
getResolvConf	$ZIGLIB/std/net.zig	/^fn getResolvConf(allocator: mem.Allocator, rc: *ResolvConf) !void {$/;"	function
getRpathPathName	$ZIGLIB/std/macho.zig	/pub fn getRpathPathName(lc: LoadCommand) []const u8 {$/;"	function
getSecondsIntoMinute	$ZIGLIB/std/time/epoch.zig	/pub fn getSecondsIntoMinute(self: DaySeconds) u6 {$/;"	function
getSectionByName	$ZIGLIB/std/coff.zig	/pub fn getSectionByName(self: *const Coff, comptime name: []const u8) ?*align(1) const SectionHeader {$/;"	function
getSectionData	$ZIGLIB/std/coff.zig	/pub fn getSectionData(self: *const Coff, comptime name: []const u8) ![]const u8 {$/;"	function
getSectionDataAlloc	$ZIGLIB/std/coff.zig	/pub fn getSectionDataAlloc(self: *const Coff, comptime name: []const u8, allocator: mem.Allocator) ![]u8 {$/;"	function
getSectionHeaders	$ZIGLIB/std/coff.zig	/pub fn getSectionHeaders(self: *const Coff) []align(1) const SectionHeader {$/;"	function
getSectionHeadersAlloc	$ZIGLIB/std/coff.zig	/pub fn getSectionHeadersAlloc(self: *const Coff, allocator: mem.Allocator) ![]SectionHeader {$/;"	function
getSectionName	$ZIGLIB/std/coff.zig	/pub fn getSectionName(self: *const Coff, sect_hdr: *align(1) const SectionHeader) []const u8 {$/;"	function
getSections	$ZIGLIB/std/macho.zig	/pub fn getSections(lc: LoadCommand) []const section_64 {$/;"	function
getSelfDebugInfo	$ZIGLIB/std/debug.zig	/^pub fn getSelfDebugInfo() !*DebugInfo {$/;"	function
getShift	$ZIGLIB/std/fmt/parse_float/convert_slow.zig	/^pub fn getShift(n: usize) usize {$/;"	function
getSize	$ZIGLIB/std/pdb.zig	/fn getSize(self: *const MsfStream) u64 {$/;"	function
getSlotByIndex	$ZIGLIB/std/array_hash_map.zig	/fn getSlotByIndex(self: *Self, entry_index: usize, ctx: ByIndexContext, header: *IndexHeader, comptime I: type, indexes: []Index(I)) usize {$/;"	function
getSlotByKey	$ZIGLIB/std/array_hash_map.zig	/fn getSlotByKey(self: Self, key: anytype, ctx: anytype, header: *IndexHeader, comptime I: type, indexes: []Index(I)) ?usize {$/;"	function
getSource	$ZIGLIB/std/Build/OptionsStep.zig	/^pub fn getSource(self: *OptionsStep) FileSource {$/;"	function
getStackTrace	$ZIGLIB/std/testing/failing_allocator.zig	/pub fn getStackTrace(self: *FailingAllocator) std.builtin.StackTrace {$/;"	function
getStartForSiftUp	$ZIGLIB/std/priority_dequeue.zig	/fn getStartForSiftUp(self: Self, child: T, index: usize) StartIndexAndLayer {$/;"	function
getState	$ZIGLIB/std/os/uefi/protocols/simple_pointer_protocol.zig	/pub fn getState(self: *const SimplePointerProtocol, state: *SimplePointerState) Status {$/;"	function
getStatus	$ZIGLIB/std/os/uefi/protocols/simple_network_protocol.zig	/pub fn getStatus(self: *const SimpleNetworkProtocol, interrupt_status: *SimpleNetworkInterruptStatus, tx_buf: ?*?[*]u8) Status {$/;"	function
getStdErr	$ZIGLIB/std/io.zig	/^pub fn getStdErr() File {$/;"	function
getStdErrHandle	$ZIGLIB/std/io.zig	/^fn getStdErrHandle() os.fd_t {$/;"	function
getStdIn	$ZIGLIB/std/io.zig	/^pub fn getStdIn() File {$/;"	function
getStdInHandle	$ZIGLIB/std/io.zig	/^fn getStdInHandle() os.fd_t {$/;"	function
getStdOut	$ZIGLIB/std/io.zig	/^pub fn getStdOut() File {$/;"	function
getStdOutHandle	$ZIGLIB/std/io.zig	/^fn getStdOutHandle() os.fd_t {$/;"	function
getStderrMutex	$ZIGLIB/std/debug.zig	/^pub fn getStderrMutex() *std.Thread.Mutex {$/;"	function
getStream	$ZIGLIB/std/pdb.zig	/pub fn getStream(self: *Pdb, stream: StreamType) ?*MsfStream {$/;"	function
getStreamById	$ZIGLIB/std/pdb.zig	/pub fn getStreamById(self: *Pdb, id: u32) ?*MsfStream {$/;"	function
getString	$ZIGLIB/std/dwarf.zig	/fn getString(fv: FormValue, di: DwarfInfo) ![]const u8 {$/;"	function
getStringGeneric	$ZIGLIB/std/dwarf.zig	/^fn getStringGeneric(opt_str: ?[]const u8, offset: u64) ![:0]const u8 {$/;"	function
getStrtab	$ZIGLIB/std/coff.zig	/pub fn getStrtab(self: *const Coff) ?Strtab {$/;"	function
getSymbolAtAddress	$ZIGLIB/std/debug.zig	/pub fn getSymbolAtAddress(self: *@This(), allocator: mem.Allocator, address: usize) !SymbolInfo {$/;"	function
getSymbolFromDwarf	$ZIGLIB/std/debug.zig	/^fn getSymbolFromDwarf(allocator: mem.Allocator, address: u64, di: *DW.DwarfInfo) !SymbolInfo {$/;"	function
getSymbolName	$ZIGLIB/std/pdb.zig	/pub fn getSymbolName(self: *Pdb, module: *Module, address: u64) ?[]const u8 {$/;"	function
getSymtab	$ZIGLIB/std/coff.zig	/pub fn getSymtab(self: *const Coff) ?Symtab {$/;"	function
getThreads	$ZIGLIB/std/os/darwin.zig	/pub fn getThreads(task: MachTask) MachError!ThreadList {$/;"	function
getTime	$ZIGLIB/std/os/uefi/tables/runtime_services.zig	/getTime: *const fn (time: *uefi.Time, capabilities: ?*TimeCapabilities) callconv(.C) Status/;"	field
getTopLevelStepByName	$ZIGLIB/std/Build.zig	/^fn getTopLevelStepByName(self: *Build, name: []const u8) !*Step {$/;"	function
getTrivialEqlFn	$ZIGLIB/std/array_hash_map.zig	/^pub fn getTrivialEqlFn(comptime K: type, comptime Context: type) (fn (Context, K, K) bool) {$/;"	function
getUInt	$ZIGLIB/std/dwarf.zig	/fn getUInt(fv: FormValue, comptime U: type) !U {$/;"	function
getUnderlyingAllocatorPtr	$ZIGLIB/std/mem.zig	/fn getUnderlyingAllocatorPtr(self: *Self) Allocator {$/;"	function
getUninstallStep	$ZIGLIB/std/Build.zig	/^pub fn getUninstallStep(self: *Build) *Step {$/;"	function
getUserInfo	$ZIGLIB/std/process.zig	/^pub fn getUserInfo(name: []const u8) !UserInfo {$/;"	function
getVariable	$ZIGLIB/std/os/uefi/tables/runtime_services.zig	/getVariable: *const fn (var_name: [*:0]const u16, vendor_guid: *align(8) const Guid, attributes: ?*u32, data_size: *usize, data: ?*anyopaque) callconv(.C) Status/;"	field
getVbits	$ZIGLIB/std/valgrind/memcheck.zig	/^pub fn getVbits(zza: []u8, zzvbits: []u8) u2 {$/;"	function
getVersionRange	$ZIGLIB/std/target.zig	/pub fn getVersionRange(self: Os) TaggedVersionRange {$/;"	function
getVolumeLabel	$ZIGLIB/std/os/uefi/protocols/file_protocol.zig	/pub fn getVolumeLabel(self: *const FileSystemInfo) [*:0]const u16 {$/;"	function
getWakeupTime	$ZIGLIB/std/os/uefi/tables/runtime_services.zig	/getWakeupTime: *const fn (enabled: *bool, pending: *bool, time: *uefi.Time) callconv(.C) Status/;"	field
getWindowLongA	$ZIGLIB/std/os/windows/user32.zig	/^pub fn getWindowLongA(hWnd: HWND, nIndex: i32) !i32 {$/;"	function
getWindowLongPtrA	$ZIGLIB/std/os/windows/user32.zig	/^pub fn getWindowLongPtrA(hWnd: HWND, nIndex: i32) !isize {$/;"	function
getWindowLongPtrW	$ZIGLIB/std/os/windows/user32.zig	/^pub fn getWindowLongPtrW(hWnd: HWND, nIndex: i32) !isize {$/;"	function
getWindowLongW	$ZIGLIB/std/os/windows/user32.zig	/^pub fn getWindowLongW(hWnd: HWND, nIndex: i32) !i32 {$/;"	function
getWritten	$ZIGLIB/std/io/fixed_buffer_stream.zig	/pub fn getWritten(self: Self) Buffer {$/;"	function
getXCR0	$ZIGLIB/std/zig/system/x86.zig	/^fn getXCR0() u32 {$/;"	function
get_DYNAMIC	$ZIGLIB/std/dynamic_library.zig	/^pub fn get_DYNAMIC() ?[*]elf.Dyn {$/;"	function
get_cgroup_classid	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const get_cgroup_classid = @intToPtr(fn (skb: *kern.SkBuff) u32, 17)/;"	constant
get_count	$ZIGLIB/std/event/channel.zig	/var get_count = @atomicRmw(usize, &self.get_count, .Sub, 1, .SeqCst)/;"	variable
get_current_ancestor_cgroup_id	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const get_current_ancestor_cgroup_id = @intToPtr(fn (ancestor_level: c_int) u64, 123)/;"	constant
get_current_cgroup_id	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const get_current_cgroup_id = @intToPtr(fn () u64, 80)/;"	constant
get_current_comm	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const get_current_comm = @intToPtr(fn (buf: ?*anyopaque, size_of_buf: u32) c_long, 16)/;"	constant
get_current_pid_tgid	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const get_current_pid_tgid = @intToPtr(fn () u64, 14)/;"	constant
get_current_task	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const get_current_task = @intToPtr(fn () u64, 35)/;"	constant
get_current_uid_gid	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const get_current_uid_gid = @intToPtr(fn () u64, 15)/;"	constant
get_hash_recalc	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const get_hash_recalc = @intToPtr(fn (skb: *kern.SkBuff) u32, 34)/;"	constant
get_id	$ZIGLIB/std/os/linux/bpf.zig	/get_id: GetIdAttr/;"	field
get_kernel_syms	$ZIGLIB/std/os/linux/syscalls.zig	/get_kernel_syms = Linux + 170/;"	field
get_listener_sock	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const get_listener_sock = @intToPtr(fn (sk: *kern.Sock) ?*kern.Sock, 98)/;"	constant
get_local_storage	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const get_local_storage = @intToPtr(fn (map: ?*anyopaque, flags: u64) ?*anyopaque, 81)/;"	constant
get_mempolicy	$ZIGLIB/std/os/linux/syscalls.zig	/get_mempolicy = Linux + 269/;"	field
get_netns_cookie	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const get_netns_cookie = @intToPtr(fn (ctx: ?*anyopaque) u64, 122)/;"	constant
get_node	$ZIGLIB/std/event/channel.zig	/const get_node = &self.getters.get().?.data/;"	constant
get_ns_current_pid_tgid	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const get_ns_current_pid_tgid = @intToPtr(fn (dev: u64, ino: u64, nsdata: *kern.PidNsInfo, size: u32) c_long, 120)/;"	constant
get_numa_node_id	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const get_numa_node_id = @intToPtr(fn () c_long, 42)/;"	constant
get_or_put	$ZIGLIB/std/process.zig	/const get_or_put = try self.hash_map.getOrPut(key)/;"	constant
get_prandom_u32	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const get_prandom_u32 = @intToPtr(fn () u32, 7)/;"	constant
get_protocol	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/get_protocol: bool = false/;"	field
get_robust_list	$ZIGLIB/std/os/linux/syscalls.zig	/get_robust_list = Linux + 310/;"	field
get_route_realm	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const get_route_realm = @intToPtr(fn (skb: *kern.SkBuff) u32, 24)/;"	constant
get_smp_processor_id	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const get_smp_processor_id = @intToPtr(fn () u32, 8)/;"	constant
get_socket_cookie	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const get_socket_cookie = @intToPtr(fn (ctx: ?*anyopaque) u64, 46)/;"	constant
get_socket_uid	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const get_socket_uid = @intToPtr(fn (skb: *kern.SkBuff) u32, 47)/;"	constant
get_sqe	$ZIGLIB/std/os/linux/io_uring.zig	/pub fn get_sqe(self: *IO_Uring) !*linux.io_uring_sqe {$/;"	function
get_stack	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const get_stack = @intToPtr(fn (ctx: ?*anyopaque, buf: ?*anyopaque, size: u32, flags: u64) c_long, 67)/;"	constant
get_stackid	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const get_stackid = @intToPtr(fn (ctx: ?*anyopaque, map: *const kern.MapDef, flags: u64) c_long, 27)/;"	constant
get_sum	$ZIGLIB/std/atomic/stack.zig	/get_sum: isize/;"	field
get_task_stack	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const get_task_stack = @intToPtr(fn (task: ?*anyopaque, buf: ?*anyopaque, size: u32, flags: u64) c_long, 141)/;"	constant
get_thread_area	$ZIGLIB/std/os/linux/syscalls.zig	/get_thread_area = 244/;"	field
get_tls	$ZIGLIB/std/os/linux/syscalls.zig	/get_tls = arm_base + 6/;"	field
get_typed_pointer	$ZIGLIB/compiler_rt/emutls.zig	/pub fn get_typed_pointer(self: *emutls_control, comptime T: type) *T {$/;"	function
get_wave_id_inst	$ZIGLIB/std/target/amdgpu.zig	/get_wave_id_inst/;"	field
getauxval	$ZIGLIB/std/os/linux.zig	/^pub fn getauxval(index: usize) usize {$/;"	function
getcpu	$ZIGLIB/std/os/linux/syscalls.zig	/getcpu = Linux + 312/;"	field
getcwd	$ZIGLIB/std/os/linux/syscalls.zig	/getcwd = Linux + 77/;"	field
getdents	$ZIGLIB/std/os/linux/syscalls.zig	/getdents = Linux + 76/;"	field
getdents64	$ZIGLIB/std/os/linux/syscalls.zig	/getdents64 = Linux + 308/;"	field
getdomainname	$ZIGLIB/std/os/linux/syscalls.zig	/getdomainname = 162/;"	field
getegid	$ZIGLIB/std/os/linux/syscalls.zig	/getegid = Linux + 50/;"	field
getegid32	$ZIGLIB/std/os/linux/syscalls.zig	/getegid32 = 202/;"	field
getenv	$ZIGLIB/std/os.zig	/^pub fn getenv(key: []const u8) ?[]const u8 {$/;"	function
getenvW	$ZIGLIB/std/os.zig	/^pub fn getenvW(key: [*:0]const u16) ?[:0]const u16 {$/;"	function
getenvZ	$ZIGLIB/std/os.zig	/^pub fn getenvZ(key: [*:0]const u8) ?[]const u8 {$/;"	function
geteuid	$ZIGLIB/std/os/linux/syscalls.zig	/geteuid = Linux + 49/;"	field
geteuid32	$ZIGLIB/std/os/linux/syscalls.zig	/geteuid32 = 201/;"	field
getgid	$ZIGLIB/std/os/linux/syscalls.zig	/getgid = Linux + 47/;"	field
getgid32	$ZIGLIB/std/os/linux/syscalls.zig	/getgid32 = 200/;"	field
getgroups	$ZIGLIB/std/os/linux/syscalls.zig	/getgroups = Linux + 80/;"	field
getgroups32	$ZIGLIB/std/os/linux/syscalls.zig	/getgroups32 = 205/;"	field
gethi	$ZIGLIB/std/fmt/errol.zig	/^fn gethi(in: f64) f64 {$/;"	function
gethostname	$ZIGLIB/std/os.zig	/^pub fn gethostname(name_buffer: *[HOST_NAME_MAX]u8) GetHostNameError![]u8 {$/;"	function
getitimer	$ZIGLIB/std/os/linux/syscalls.zig	/getitimer = Linux + 35/;"	field
getpagesize	$ZIGLIB/std/os/linux/syscalls.zig	/getpagesize = 64/;"	field
getpeername	$ZIGLIB/std/os/windows.zig	/^pub fn getpeername(s: ws2_32.SOCKET, name: *ws2_32.sockaddr, namelen: *ws2_32.socklen_t) i32 {$/;"	function
getpgid	$ZIGLIB/std/os/linux/syscalls.zig	/getpgid = Linux + 132/;"	field
getpgrp	$ZIGLIB/std/os/linux/syscalls.zig	/getpgrp = Linux + 65/;"	field
getpid	$ZIGLIB/std/os/linux/syscalls.zig	/getpid = Linux + 38/;"	field
getpmsg	$ZIGLIB/std/os/linux/syscalls.zig	/getpmsg = Linux + 208/;"	field
getppid	$ZIGLIB/std/os/linux/syscalls.zig	/getppid = Linux + 64/;"	field
getpriority	$ZIGLIB/std/os/linux/syscalls.zig	/getpriority = Linux + 96/;"	field
getrandom	$ZIGLIB/std/os/linux/syscalls.zig	/getrandom = Linux + 353/;"	field
getresgid	$ZIGLIB/std/os/linux/syscalls.zig	/getresgid = Linux + 191/;"	field
getresgid32	$ZIGLIB/std/os/linux/syscalls.zig	/getresgid32 = 211/;"	field
getresuid	$ZIGLIB/std/os/linux/syscalls.zig	/getresuid = Linux + 186/;"	field
getresuid32	$ZIGLIB/std/os/linux/syscalls.zig	/getresuid32 = 209/;"	field
getrlimit	$ZIGLIB/std/os/linux/syscalls.zig	/getrlimit = Linux + 95/;"	field
getrlimit_sym	$ZIGLIB/std/os.zig	/const getrlimit_sym = if (builtin.os.tag == .linux and builtin.link_libc)$/;"	constant
getrusage	$ZIGLIB/std/os/linux/syscalls.zig	/getrusage = Linux + 96/;"	field
getsid	$ZIGLIB/std/os/linux/syscalls.zig	/getsid = Linux + 151/;"	field
getsockname	$ZIGLIB/std/os/windows.zig	/^pub fn getsockname(s: ws2_32.SOCKET, name: *ws2_32.sockaddr, namelen: *ws2_32.socklen_t) i32 {$/;"	function
getsockopt	$ZIGLIB/std/os/linux/x86.zig	/pub const getsockopt = 15/;"	constant
getsockoptError	$ZIGLIB/std/os.zig	/^pub fn getsockoptError(sockfd: fd_t) ConnectError!void {$/;"	function
getspecific	$ZIGLIB/compiler_rt/emutls.zig	/fn getspecific() ?*ObjectArray {$/;"	function
getters	$ZIGLIB/std/event/channel.zig	/getters: std.atomic.Queue(GetNode)/;"	field
gettid	$ZIGLIB/std/os/linux/syscalls.zig	/gettid = Linux + 222/;"	field
gettimeofday	$ZIGLIB/std/os/linux/syscalls.zig	/gettimeofday = Linux + 94/;"	field
getuid	$ZIGLIB/std/os/linux/syscalls.zig	/getuid = Linux + 24/;"	field
getuid32	$ZIGLIB/std/os/linux/syscalls.zig	/getuid32 = 199/;"	field
getxattr	$ZIGLIB/std/os/linux/syscalls.zig	/getxattr = Linux + 227/;"	field
gfni	$ZIGLIB/std/target/x86.zig	/gfni/;"	field
gfx10	$ZIGLIB/std/target/amdgpu.zig	/gfx10/;"	field
gfx1010	$ZIGLIB/std/target/amdgpu.zig	/pub const gfx1010 = CpuModel{$/;"	constant
gfx1011	$ZIGLIB/std/target/amdgpu.zig	/pub const gfx1011 = CpuModel{$/;"	constant
gfx1012	$ZIGLIB/std/target/amdgpu.zig	/pub const gfx1012 = CpuModel{$/;"	constant
gfx1013	$ZIGLIB/std/target/amdgpu.zig	/pub const gfx1013 = CpuModel{$/;"	constant
gfx1030	$ZIGLIB/std/target/amdgpu.zig	/pub const gfx1030 = CpuModel{$/;"	constant
gfx1031	$ZIGLIB/std/target/amdgpu.zig	/pub const gfx1031 = CpuModel{$/;"	constant
gfx1032	$ZIGLIB/std/target/amdgpu.zig	/pub const gfx1032 = CpuModel{$/;"	constant
gfx1033	$ZIGLIB/std/target/amdgpu.zig	/pub const gfx1033 = CpuModel{$/;"	constant
gfx1034	$ZIGLIB/std/target/amdgpu.zig	/pub const gfx1034 = CpuModel{$/;"	constant
gfx1035	$ZIGLIB/std/target/amdgpu.zig	/pub const gfx1035 = CpuModel{$/;"	constant
gfx1036	$ZIGLIB/std/target/amdgpu.zig	/pub const gfx1036 = CpuModel{$/;"	constant
gfx10_3_insts	$ZIGLIB/std/target/amdgpu.zig	/gfx10_3_insts/;"	field
gfx10_a_encoding	$ZIGLIB/std/target/amdgpu.zig	/gfx10_a_encoding/;"	field
gfx10_b_encoding	$ZIGLIB/std/target/amdgpu.zig	/gfx10_b_encoding/;"	field
gfx10_insts	$ZIGLIB/std/target/amdgpu.zig	/gfx10_insts/;"	field
gfx11	$ZIGLIB/std/target/amdgpu.zig	/gfx11/;"	field
gfx1100	$ZIGLIB/std/target/amdgpu.zig	/pub const gfx1100 = CpuModel{$/;"	constant
gfx1101	$ZIGLIB/std/target/amdgpu.zig	/pub const gfx1101 = CpuModel{$/;"	constant
gfx1102	$ZIGLIB/std/target/amdgpu.zig	/pub const gfx1102 = CpuModel{$/;"	constant
gfx1103	$ZIGLIB/std/target/amdgpu.zig	/pub const gfx1103 = CpuModel{$/;"	constant
gfx11_insts	$ZIGLIB/std/target/amdgpu.zig	/gfx11_insts/;"	field
gfx600	$ZIGLIB/std/target/amdgpu.zig	/pub const gfx600 = CpuModel{$/;"	constant
gfx601	$ZIGLIB/std/target/amdgpu.zig	/pub const gfx601 = CpuModel{$/;"	constant
gfx602	$ZIGLIB/std/target/amdgpu.zig	/pub const gfx602 = CpuModel{$/;"	constant
gfx700	$ZIGLIB/std/target/amdgpu.zig	/pub const gfx700 = CpuModel{$/;"	constant
gfx701	$ZIGLIB/std/target/amdgpu.zig	/pub const gfx701 = CpuModel{$/;"	constant
gfx702	$ZIGLIB/std/target/amdgpu.zig	/pub const gfx702 = CpuModel{$/;"	constant
gfx703	$ZIGLIB/std/target/amdgpu.zig	/pub const gfx703 = CpuModel{$/;"	constant
gfx704	$ZIGLIB/std/target/amdgpu.zig	/pub const gfx704 = CpuModel{$/;"	constant
gfx705	$ZIGLIB/std/target/amdgpu.zig	/pub const gfx705 = CpuModel{$/;"	constant
gfx7_gfx8_gfx9_insts	$ZIGLIB/std/target/amdgpu.zig	/gfx7_gfx8_gfx9_insts/;"	field
gfx801	$ZIGLIB/std/target/amdgpu.zig	/pub const gfx801 = CpuModel{$/;"	constant
gfx802	$ZIGLIB/std/target/amdgpu.zig	/pub const gfx802 = CpuModel{$/;"	constant
gfx803	$ZIGLIB/std/target/amdgpu.zig	/pub const gfx803 = CpuModel{$/;"	constant
gfx805	$ZIGLIB/std/target/amdgpu.zig	/pub const gfx805 = CpuModel{$/;"	constant
gfx810	$ZIGLIB/std/target/amdgpu.zig	/pub const gfx810 = CpuModel{$/;"	constant
gfx8_insts	$ZIGLIB/std/target/amdgpu.zig	/gfx8_insts/;"	field
gfx9	$ZIGLIB/std/target/amdgpu.zig	/gfx9/;"	field
gfx900	$ZIGLIB/std/target/amdgpu.zig	/pub const gfx900 = CpuModel{$/;"	constant
gfx902	$ZIGLIB/std/target/amdgpu.zig	/pub const gfx902 = CpuModel{$/;"	constant
gfx904	$ZIGLIB/std/target/amdgpu.zig	/pub const gfx904 = CpuModel{$/;"	constant
gfx906	$ZIGLIB/std/target/amdgpu.zig	/pub const gfx906 = CpuModel{$/;"	constant
gfx908	$ZIGLIB/std/target/amdgpu.zig	/pub const gfx908 = CpuModel{$/;"	constant
gfx909	$ZIGLIB/std/target/amdgpu.zig	/pub const gfx909 = CpuModel{$/;"	constant
gfx90a	$ZIGLIB/std/target/amdgpu.zig	/pub const gfx90a = CpuModel{$/;"	constant
gfx90a_insts	$ZIGLIB/std/target/amdgpu.zig	/gfx90a_insts/;"	field
gfx90c	$ZIGLIB/std/target/amdgpu.zig	/pub const gfx90c = CpuModel{$/;"	constant
gfx940	$ZIGLIB/std/target/amdgpu.zig	/pub const gfx940 = CpuModel{$/;"	constant
gfx940_insts	$ZIGLIB/std/target/amdgpu.zig	/gfx940_insts/;"	field
gfx9_insts	$ZIGLIB/std/target/amdgpu.zig	/gfx9_insts/;"	field
gid_t	$ZIGLIB/std/os/linux.zig	/^pub const gid_t = u32/;"	constant
gimli	$ZIGLIB/std/crypto/tlcsprng.zig	/gimli: std.crypto.core.Gimli/;"	field
ginv	$ZIGLIB/std/target/mips.zig	/ginv/;"	field
given_suffix	$ZIGLIB/std/process.zig	/const given_suffix = std.fs.path.basename(prog_name)/;"	constant
glibc	$ZIGLIB/std/target.zig	/glibc: Version/;"	field
glibcVerFromLinkName	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/^fn glibcVerFromLinkName(link_name: []const u8, prefix: []const u8) !std.builtin.Version {$/;"	function
glibcVerFromRPath	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/^fn glibcVerFromRPath(rpath: []const u8) !std.builtin.Version {$/;"	function
glibcVerFromSoFile	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/^fn glibcVerFromSoFile(file: fs.File) !std.builtin.Version {$/;"	function
glibc_dir_arg	$ZIGLIB/std/Build/EmulatableRunStep.zig	/const glibc_dir_arg = if (need_cross_glibc)$/;"	constant
glibc_runtimes_dir	$ZIGLIB/std/Build.zig	/^glibc_runtimes_dir: ?[]const u8 = null/;"	field
glibc_so_basename	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/const glibc_so_basename = "libc.so.6"/;"	constant
glibc_version	$ZIGLIB/std/zig/CrossTarget.zig	/^glibc_version: ?SemVer = null/;"	field
global	$ZIGLIB/std/wasm.zig	/global: GlobalType/;"	field
globalOption	$ZIGLIB/std/meta.zig	/^pub fn globalOption(comptime name: []const u8, comptime T: type) ?T {$/;"	function
globalVarDecl	$ZIGLIB/std/zig/Ast.zig	/^pub fn globalVarDecl(tree: Ast, node: Node.Index) full.VarDecl {$/;"	function
global_allocated	$ZIGLIB/std/os/linux/bpf/btf.zig	/global_allocated/;"	field
global_base	$ZIGLIB/std/Build/CompileStep.zig	/^global_base: ?u64 = null/;"	field
global_cache_root	$ZIGLIB/std/Build.zig	/^global_cache_root: []const u8/;"	field
global_dir	$ZIGLIB/std/fs/get_app_data_dir.zig	/const global_dir = unicode.utf16leToUtf8Alloc(allocator, mem.sliceTo(dir_path_ptr, 0)) catch |err| switch (err) {$/;"	constant
global_event_loop	$ZIGLIB/std/fs/watch.zig	/^const global_event_loop = Loop.instance orelse$/;"	constant
global_extended_header	$ZIGLIB/std/tar.zig	/global_extended_header = 'g'/;"	field
global_extern	$ZIGLIB/std/os/linux/bpf/btf.zig	/global_extern/;"	field
global_get	$ZIGLIB/std/wasm.zig	/global_get: u32/;"	field
global_instance_state	$ZIGLIB/std/event/loop.zig	/var global_instance_state: Loop = undefined/;"	variable
global_number	$ZIGLIB/std/once.zig	/^var global_number: i32 = 0/;"	variable
global_once	$ZIGLIB/std/once.zig	/^var global_once = once(incr)/;"	variable
global_set	$ZIGLIB/std/wasm.zig	/global_set = 0x24/;"	field
global_type	$ZIGLIB/std/wasm.zig	/global_type: GlobalType/;"	field
global_var_decl	$ZIGLIB/std/zig/Ast.zig	/global_var_decl/;"	field
global_variable	$ZIGLIB/std/os/uefi/tables/runtime_services.zig	/^pub const global_variable align(8) = Guid{$/;"	constant
glsl450	$ZIGLIB/std/target.zig	/glsl450/;"	field
glyph_col_1	$ZIGLIB/std/os/uefi/protocols/hii.zig	/glyph_col_1: [19]u8/;"	field
glyph_col_2	$ZIGLIB/std/os/uefi/protocols/hii.zig	/glyph_col_2: [19]u8/;"	field
gnu_f16_abi	$ZIGLIB/compiler_rt/common.zig	/^pub const gnu_f16_abi = switch (builtin.cpu.arch) {$/;"	constant
gnuabi64	$ZIGLIB/std/target.zig	/gnuabi64/;"	field
gnuabin32	$ZIGLIB/std/target.zig	/gnuabin32/;"	field
gnueabi	$ZIGLIB/std/target.zig	/gnueabi/;"	field
gnueabihf	$ZIGLIB/std/target.zig	/gnueabihf/;"	field
gnuilp32	$ZIGLIB/std/target.zig	/gnuilp32/;"	field
gnux32	$ZIGLIB/std/target.zig	/gnux32/;"	field
goldmont	$ZIGLIB/std/target/x86.zig	/pub const goldmont = CpuModel{$/;"	constant
goldmont_plus	$ZIGLIB/std/target/x86.zig	/pub const goldmont_plus = CpuModel{$/;"	constant
gone	$ZIGLIB/std/http.zig	/gone = 410/;"	field
good	$ZIGLIB/std/compress/deflate/compressor.zig	/good: u16/;"	field
good_prog	$ZIGLIB/std/os/linux/bpf.zig	/const good_prog = [_]Insn{$/;"	constant
gop1	$ZIGLIB/std/hash_map.zig	/const gop1 = try map.getOrPut(5)/;"	constant
gop2	$ZIGLIB/std/hash_map.zig	/const gop2 = try map.getOrPut(99)/;"	constant
gop3	$ZIGLIB/std/hash_map.zig	/const gop3 = try map.getOrPutValue(5, 5)/;"	constant
gop4	$ZIGLIB/std/hash_map.zig	/const gop4 = try map.getOrPutValue(100, 41)/;"	constant
gop5	$ZIGLIB/std/array_hash_map.zig	/const gop5 = try map.getOrPut(5)/;"	constant
gop6	$ZIGLIB/std/array_hash_map.zig	/const gop6 = try map.getOrPut(5)/;"	constant
got_len	$ZIGLIB/std/compress/deflate/decompressor.zig	/var got_len = try decomp.reader().read(&got)/;"	variable
got_list	$ZIGLIB/std/compress/deflate/dict_decoder.zig	/var got_list = ArrayList(u8).init(testing.allocator)/;"	variable
gp64	$ZIGLIB/std/target/mips.zig	/gp64/;"	field
gp_offset	$ZIGLIB/std/builtin.zig	/gp_offset: c_uint/;"	field
gp_regs	$ZIGLIB/std/os/linux/powerpc64.zig	/gp_regs: gregset_t/;"	field
gpr_size	$ZIGLIB/std/elf.zig	/gpr_size: u8/;"	field
gpregs	$ZIGLIB/std/c/freebsd.zig	/gpregs: extern struct {$/;"	field
gr712rc	$ZIGLIB/std/target/sparc.zig	/pub const gr712rc = CpuModel{$/;"	constant
gr740	$ZIGLIB/std/target/sparc.zig	/pub const gr740 = CpuModel{$/;"	constant
grandparent	$ZIGLIB/std/priority_dequeue.zig	/const grandparent = self.items[grandparent_index]/;"	constant
grandparentIndex	$ZIGLIB/std/priority_dequeue.zig	/fn grandparentIndex(index: usize) usize {$/;"	function
grandparent_index	$ZIGLIB/std/priority_dequeue.zig	/var grandparent_index = grandparentIndex(child_index)/;"	variable
greaterThan	$ZIGLIB/std/priority_queue.zig	/^fn greaterThan(context: void, a: u32, b: u32) Order {$/;"	function
greater_or_equal	$ZIGLIB/std/zig/Ast.zig	/greater_or_equal/;"	field
greater_than	$ZIGLIB/std/zig/Ast.zig	/greater_than/;"	field
green	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/pub const green: u8 = 0x02/;"	constant
green_mask	$ZIGLIB/std/os/uefi/protocols/graphics_output_protocol.zig	/green_mask: u32/;"	field
greg_t	$ZIGLIB/std/os/linux/x86_64.zig	/^pub const greg_t = usize/;"	constant
gregs	$ZIGLIB/std/os/linux/x86_64.zig	/gregs: gregset_t/;"	field
gregset_t	$ZIGLIB/std/os/linux/x86_64.zig	/^pub const gregset_t = [23]greg_t/;"	constant
group	$ZIGLIB/std/leb128.zig	/var group = @as(ShiftU, 0)/;"	variable
group_count	$ZIGLIB/std/os/uefi/protocols/ip6_protocol.zig	/group_count: u32/;"	field
group_id	$ZIGLIB/std/os/linux/io_uring.zig	/group_id: u16/;"	field
group_table	$ZIGLIB/std/os/uefi/protocols/ip6_protocol.zig	/group_table: [*]Ip6Address/;"	field
grouped_expression	$ZIGLIB/std/zig/Ast.zig	/grouped_expression/;"	field
groupname	$ZIGLIB/std/c/solaris.zig	/groupname: [IFNAMESIZE]u8/;"	field
groups	$ZIGLIB/std/os/uefi/protocols/udp6_protocol.zig	/pub fn groups(self: *const Udp6Protocol, join_flag: bool, multicast_address: ?*const Ip6Address) Status {$/;"	function
grow	$ZIGLIB/std/hash_map.zig	/fn grow(self: *Self, allocator: Allocator, new_capacity: Size, ctx: Context) Allocator.Error!void {$/;"	function
growCapacity	$ZIGLIB/std/segmented_list.zig	/pub fn growCapacity(self: *Self, allocator: Allocator, new_capacity: usize) Allocator.Error!void {$/;"	function
growIfNeeded	$ZIGLIB/std/hash_map.zig	/fn growIfNeeded(self: *Self, allocator: Allocator, new_count: Size, ctx: Context) Allocator.Error!void {$/;"	function
growTo	$ZIGLIB/std/hash_map.zig	/const growTo = 12456/;"	constant
growable	$ZIGLIB/std/heap/memory_pool.zig	/growable: bool = true/;"	field
gsbase	$ZIGLIB/std/c/freebsd.zig	/gsbase: u64/;"	field
gt_bytes	$ZIGLIB/std/elf.zig	/gt_bytes: Elf32_Word/;"	field
gt_current_g_value	$ZIGLIB/std/elf.zig	/gt_current_g_value: Elf32_Word/;"	field
gt_entry	$ZIGLIB/std/elf.zig	/gt_entry: extern struct {$/;"	field
gt_g_value	$ZIGLIB/std/elf.zig	/gt_g_value: Elf32_Word/;"	field
gt_header	$ZIGLIB/std/elf.zig	/gt_header: extern struct {$/;"	field
gt_unused	$ZIGLIB/std/elf.zig	/gt_unused: Elf32_Word/;"	field
gtty	$ZIGLIB/std/os/linux/syscalls.zig	/gtty = Linux + 32/;"	field
guard_offset	$ZIGLIB/std/Thread.zig	/var guard_offset: usize = undefined/;"	variable
guarded_storage	$ZIGLIB/std/target/s390x.zig	/guarded_storage/;"	field
guid	$ZIGLIB/std/pdb.zig	/guid: [16]u8/;"	field
gzip	$ZIGLIB/std/http.zig	/gzip/;"	field
gzip_stream	$ZIGLIB/std/compress/gzip.zig	/var gzip_stream = try decompress(testing.allocator, in_stream.reader())/;"	variable
hAsyncTaskHandle	$ZIGLIB/std/os/windows/ws2_32.zig	/hAsyncTaskHandle: HANDLE/;"	field
hCertStore	$ZIGLIB/std/os/windows/crypt32.zig	/hCertStore: HCERTSTORE/;"	field
hCursor	$ZIGLIB/std/os/windows/user32.zig	/hCursor: ?HCURSOR/;"	field
hEvent	$ZIGLIB/std/os/windows.zig	/hEvent: ?HANDLE/;"	field
hIcon	$ZIGLIB/std/os/windows/user32.zig	/hIcon: ?HICON/;"	field
hIconSm	$ZIGLIB/std/os/windows/user32.zig	/hIconSm: ?HICON/;"	field
hInstance	$ZIGLIB/std/start.zig	/const hInstance = @ptrCast(MAIN_HINSTANCE, std.os.windows.kernel32.GetModuleHandleW(null).?)/;"	constant
hModule	$ZIGLIB/std/os/windows.zig	/hModule: HMODULE/;"	field
hProcess	$ZIGLIB/std/os/windows.zig	/hProcess: HANDLE/;"	field
hStdError	$ZIGLIB/std/os/windows.zig	/hStdError: HANDLE/;"	field
hStdInput	$ZIGLIB/std/os/windows.zig	/hStdInput: HANDLE/;"	field
hStdOutput	$ZIGLIB/std/os/windows.zig	/hStdOutput: HANDLE/;"	field
hThread	$ZIGLIB/std/os/windows.zig	/hThread: HANDLE/;"	field
hWnd	$ZIGLIB/std/os/windows/user32.zig	/hWnd: ?HWND/;"	field
h_addr_list	$ZIGLIB/std/os/windows/ws2_32.zig	/h_addr_list: **i8/;"	field
h_addrtype	$ZIGLIB/std/os/windows/ws2_32.zig	/h_addrtype: i16/;"	field
h_aliases	$ZIGLIB/std/os/windows/ws2_32.zig	/h_aliases: **i8/;"	field
h_dir	$ZIGLIB/std/Build/InstallArtifactStep.zig	/^h_dir: ?InstallDir/;"	field
h_file	$ZIGLIB/std/os.zig	/const h_file = blk: {$/;"	constant
h_len	$ZIGLIB/std/crypto/pbkdf2.zig	/const h_len = Prf.mac_length/;"	constant
h_length	$ZIGLIB/std/os/windows/ws2_32.zig	/h_length: i16/;"	field
h_list	$ZIGLIB/std/Build.zig	/var h_list = [_][]const u8{ self.install_path, "include" }/;"	variable
h_name	$ZIGLIB/std/os/windows/ws2_32.zig	/h_name: [*]u8/;"	field
h_path	$ZIGLIB/std/Build/CompileStep.zig	/const h_path = other.getOutputHSource().getPath(builder)/;"	constant
h_slice	$ZIGLIB/std/crypto/ecdsa.zig	/var h_slice = h[h_len - Hash.digest_length .. h_len]/;"	variable
h_tok	$ZIGLIB/std/Build/CheckObjectStep.zig	/var h_tok = hay_tok/;"	variable
haiku	$ZIGLIB/std/target.zig	/haiku/;"	field
haiku_entry	$ZIGLIB/std/fs.zig	/const haiku_entry = @ptrCast(*align(1) os.system.dirent, &self.buf[self.index])/;"	constant
hainan	$ZIGLIB/std/target/amdgpu.zig	/pub const hainan = CpuModel{$/;"	constant
halen	$ZIGLIB/std/os/linux.zig	/halen: u8/;"	field
half	$ZIGLIB/std/priority_queue.zig	/const half = self.len >> 1/;"	constant
halfRound	$ZIGLIB/std/crypto/bcrypt.zig	/fn halfRound(state: *const State, i: u32, j: u32, n: usize) u32 {$/;"	function
half_expt1	$ZIGLIB/std/math/complex/ldexp.zig	/const half_expt1 = @divTrunc(exptf, 2)/;"	constant
half_expt2	$ZIGLIB/std/math/complex/ldexp.zig	/const half_expt2 = exptf - half_expt1/;"	constant
half_limb_bits	$ZIGLIB/std/math/big/int.zig	/^const half_limb_bits = @typeInfo(HalfLimb).Int.bits/;"	constant
half_rate_64_ops	$ZIGLIB/std/target/amdgpu.zig	/half_rate_64_ops/;"	field
half_word	$ZIGLIB/std/os/linux/bpf.zig	/half_word = H/;"	field
halfway	$ZIGLIB/compiler_rt/trunctfxf2.zig	/const halfway = 1 << (src_sig_bits - dst_sig_bits - 1)/;"	constant
halves	$ZIGLIB/std/crypto/bcrypt.zig	/var halves = Halves{ .l = data[i], .r = data[i + 1] }/;"	variable
halves_last	$ZIGLIB/std/crypto/bcrypt.zig	/const halves_last = Halves{ .l = halves.r ^ state.subkeys[i], .r = halves.l }/;"	constant
handle	$ZIGLIB/std/os/windows.zig	/const handle = tmp.dir.fd/;"	constant
handle1	$ZIGLIB/std/event/lock.zig	/var handle1 = async lockRunner(lock)/;"	variable
handle2	$ZIGLIB/std/event/lock.zig	/var handle2 = async lockRunner(lock)/;"	variable
handle3	$ZIGLIB/std/event/lock.zig	/var handle3 = async lockRunner(lock)/;"	variable
handleProtocol	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/handleProtocol: *const fn (handle: Handle, protocol: *align(8) const Guid, interface: *?*anyopaque) callconv(.C) Status/;"	field
handleSegfaultPosix	$ZIGLIB/std/debug.zig	/^fn handleSegfaultPosix(sig: i32, info: *const os.siginfo_t, ctx_ptr: ?*const anyopaque) callconv(.C) noreturn {$/;"	function
handleSegfaultWindows	$ZIGLIB/std/debug.zig	/^fn handleSegfaultWindows(info: *windows.EXCEPTION_POINTERS) callconv(windows.WINAPI) c_long {$/;"	function
handleSegfaultWindowsExtra	$ZIGLIB/std/debug.zig	/^fn handleSegfaultWindowsExtra(info: *windows.EXCEPTION_POINTERS, comptime msg: u8, comptime format: ?[]const u8) noreturn {$/;"	function
handleWaitResult	$ZIGLIB/std/child_process.zig	/fn handleWaitResult(self: *ChildProcess, status: u32) void {$/;"	function
handle_index	$ZIGLIB/std/os/windows.zig	/const handle_index = n - WAIT_OBJECT_0/;"	constant
handle_registration_result	$ZIGLIB/std/os/linux/io_uring.zig	/fn handle_registration_result(res: usize) !void {$/;"	function
handler	$ZIGLIB/std/os/linux/powerpc64.zig	/handler: u64/;"	field
handler_data	$ZIGLIB/std/debug.zig	/var handler_data: ?*anyopaque = null/;"	variable
handler_fn	$ZIGLIB/std/os/linux.zig	/pub const handler_fn = *const fn (c_int) align(1) callconv(.C) void/;"	constant
handles	$ZIGLIB/std/child_process.zig	/const handles = [_]windows.HANDLE{$/;"	constant
handshake	$ZIGLIB/std/crypto/tls/Client.zig	/const handshake = ctd.buf[ctd.idx - handshake_len .. ctd.idx]/;"	constant
handshake_buffer	$ZIGLIB/std/crypto/tls/Client.zig	/var handshake_buffer: [8000]u8 = undefined/;"	variable
handshake_cipher	$ZIGLIB/std/crypto/tls/Client.zig	/var handshake_cipher: tls.HandshakeCipher = undefined/;"	variable
handshake_failure	$ZIGLIB/std/crypto/tls.zig	/handshake_failure = 40/;"	field
handshake_hash	$ZIGLIB/std/crypto/tls/Client.zig	/const handshake_hash = p.transcript_hash.finalResult()/;"	constant
handshake_len	$ZIGLIB/std/crypto/tls/Client.zig	/const handshake_len = mem.readIntBig(u24, cleartext[ct_i..][0..3])/;"	constant
handshake_secret	$ZIGLIB/std/crypto/tls.zig	/handshake_secret: [Hkdf.prk_length]u8/;"	field
handshake_state	$ZIGLIB/std/crypto/tls/Client.zig	/var handshake_state: HandshakeState = .encrypted_extensions/;"	variable
handshake_type	$ZIGLIB/std/crypto/tls/Client.zig	/const handshake_type = ptd.decode(tls.HandshakeType)/;"	constant
hard	$ZIGLIB/std/target.zig	/hard/;"	field
hard_float	$ZIGLIB/std/target/powerpc.zig	/hard_float/;"	field
hard_float_abi	$ZIGLIB/std/target/csky.zig	/hard_float_abi/;"	field
hard_link	$ZIGLIB/std/tar.zig	/hard_link = '1'/;"	field
hard_quad_float	$ZIGLIB/std/target/sparc.zig	/hard_quad_float/;"	field
hard_tp	$ZIGLIB/std/target/csky.zig	/hard_tp/;"	field
harden_sls_blr	$ZIGLIB/std/target/arm.zig	/harden_sls_blr/;"	field
harden_sls_ijmp	$ZIGLIB/std/target/x86.zig	/harden_sls_ijmp/;"	field
harden_sls_nocomdat	$ZIGLIB/std/target/arm.zig	/harden_sls_nocomdat/;"	field
harden_sls_ret	$ZIGLIB/std/target/x86.zig	/harden_sls_ret/;"	field
harden_sls_retbr	$ZIGLIB/std/target/arm.zig	/harden_sls_retbr/;"	field
hasComment	$ZIGLIB/std/zig/render.zig	/^fn hasComment(tree: Ast, start_token: Ast.TokenIndex, end_token: Ast.TokenIndex) bool {$/;"	function
hasDecls	$ZIGLIB/std/meta/trait.zig	/^pub fn hasDecls(comptime T: type, comptime names: anytype) bool {$/;"	function
hasDynamicLinker	$ZIGLIB/std/target.zig	/pub fn hasDynamicLinker(self: Target) bool {$/;"	function
hasEnvVar	$ZIGLIB/std/process.zig	/^pub fn hasEnvVar(allocator: Allocator, key: []const u8) error{OutOfMemory}!bool {$/;"	function
hasEnvVarConstant	$ZIGLIB/std/process.zig	/^pub fn hasEnvVarConstant(comptime key: []const u8) bool {$/;"	function
hasField	$ZIGLIB/std/meta/trait.zig	/^pub fn hasField(comptime name: []const u8) TraitFn {$/;"	function
hasFields	$ZIGLIB/std/meta/trait.zig	/^pub fn hasFields(comptime T: type, comptime names: anytype) bool {$/;"	function
hasFn	$ZIGLIB/std/meta/trait.zig	/^pub fn hasFn(comptime name: []const u8) TraitFn {$/;"	function
hasFunctions	$ZIGLIB/std/meta/trait.zig	/^pub fn hasFunctions(comptime T: type, comptime names: anytype) bool {$/;"	function
hasLen	$ZIGLIB/std/fmt/parse_float/FloatStream.zig	/^pub fn hasLen(self: FloatStream, n: usize) bool {$/;"	function
hasMask	$ZIGLIB/std/zig/system/x86.zig	/^inline fn hasMask(input: u32, mask: u32) bool {$/;"	function
hasMultilineString	$ZIGLIB/std/zig/render.zig	/^fn hasMultilineString(tree: Ast, start_token: Ast.TokenIndex, end_token: Ast.TokenIndex) bool {$/;"	function
hasSameLineComment	$ZIGLIB/std/zig/render.zig	/^fn hasSameLineComment(tree: Ast, token_index: Ast.TokenIndex) bool {$/;"	function
hasUniqueRepresentation	$ZIGLIB/std/meta/trait.zig	/^pub fn hasUniqueRepresentation(comptime T: type) bool {$/;"	function
hasUnusedArgs	$ZIGLIB/std/fmt.zig	/fn hasUnusedArgs(self: *@This()) bool {$/;"	function
has_aesni	$ZIGLIB/std/crypto/aes_ocb.zig	/const has_aesni = std.Target.x86.featureSetHas(builtin.cpu.features, .aes)/;"	constant
has_armaes	$ZIGLIB/std/crypto/ghash_polyval.zig	/const has_armaes = std.Target.aarch64.featureSetHas(builtin.cpu.features, .aes)/;"	constant
has_avx	$ZIGLIB/std/zig/system/x86.zig	/const has_avx = bit(leaf.ecx, 28)/;"	constant
has_avx512_save	$ZIGLIB/std/zig/system/x86.zig	/const has_avx512_save = switch (os_tag.isDarwin()) {$/;"	constant
has_avx_save	$ZIGLIB/std/zig/system/x86.zig	/const has_avx_save = hasMask(xcr0_eax, XCR0_XMM | XCR0_YMM)/;"	constant
has_children	$ZIGLIB/std/dwarf.zig	/has_children: bool/;"	field
has_column	$ZIGLIB/std/pdb.zig	/const has_column = line_hdr.Flags.LF_HaveColumns/;"	constant
has_comment_before_arrow	$ZIGLIB/std/zig/render.zig	/const has_comment_before_arrow = blk: {$/;"	constant
has_copy_file_range_syscall	$ZIGLIB/std/os.zig	/^var has_copy_file_range_syscall = std.atomic.Atomic(bool).init(true)/;"	variable
has_enough_bits	$ZIGLIB/std/heap/WasmPageAllocator.zig	/const has_enough_bits = @popCount(segment) >= num_pages/;"	constant
has_f_root	$ZIGLIB/std/crypto/25519/ristretto255.zig	/const has_f_root = f_root_check.isZero()/;"	constant
has_file	$ZIGLIB/std/io/stream_source.zig	/const has_file = (builtin.os.tag != .freestanding)/;"	constant
has_flock_open_flags	$ZIGLIB/std/fs.zig	/const has_flock_open_flags = @hasDecl(os.O, "EXLOCK")/;"	constant
has_induced_failure	$ZIGLIB/std/testing/failing_allocator.zig	/has_induced_failure: bool/;"	field
has_leaf_7_1	$ZIGLIB/std/zig/system/x86.zig	/const has_leaf_7_1 = max_level >= 7/;"	constant
has_m_root	$ZIGLIB/std/crypto/25519/ristretto255.zig	/const has_m_root = m_root_check.isZero()/;"	constant
has_p_root	$ZIGLIB/std/crypto/25519/ristretto255.zig	/const has_p_root = p_root_check.isZero()/;"	constant
has_packed_size	$ZIGLIB/std/compress/xz/block.zig	/has_packed_size: bool/;"	field
has_params	$ZIGLIB/std/crypto/phc_encoding.zig	/var has_params = false/;"	variable
has_pclmul	$ZIGLIB/std/crypto/ghash_polyval.zig	/const has_pclmul = std.Target.x86.featureSetHas(builtin.cpu.features, .pclmul)/;"	constant
has_salt	$ZIGLIB/std/crypto/phc_encoding.zig	/var has_salt = false/;"	variable
has_top_bit	$ZIGLIB/std/crypto/ecdsa.zig	/var has_top_bit = false/;"	variable
has_unix_sockets	$ZIGLIB/std/net.zig	/^pub const has_unix_sockets = @hasDecl(os.sockaddr, "un") and$/;"	constant
has_unpacked_size	$ZIGLIB/std/compress/xz/block.zig	/has_unpacked_size: bool/;"	field
has_v4t	$ZIGLIB/std/target/arm.zig	/has_v4t/;"	field
has_v5t	$ZIGLIB/std/target/arm.zig	/has_v5t/;"	field
has_v5te	$ZIGLIB/std/target/arm.zig	/has_v5te/;"	field
has_v6	$ZIGLIB/std/target/arm.zig	/has_v6/;"	field
has_v6k	$ZIGLIB/std/target/arm.zig	/has_v6k/;"	field
has_v6m	$ZIGLIB/std/target/arm.zig	/has_v6m/;"	field
has_v6t2	$ZIGLIB/std/target/arm.zig	/has_v6t2/;"	field
has_v7	$ZIGLIB/std/target/arm.zig	/has_v7/;"	field
has_v7clrex	$ZIGLIB/std/target/arm.zig	/has_v7clrex/;"	field
has_v8	$ZIGLIB/std/target/arm.zig	/has_v8/;"	field
has_v8_1a	$ZIGLIB/std/target/arm.zig	/has_v8_1a/;"	field
has_v8_1m_main	$ZIGLIB/std/target/arm.zig	/has_v8_1m_main/;"	field
has_v8_2a	$ZIGLIB/std/target/arm.zig	/has_v8_2a/;"	field
has_v8_3a	$ZIGLIB/std/target/arm.zig	/has_v8_3a/;"	field
has_v8_4a	$ZIGLIB/std/target/arm.zig	/has_v8_4a/;"	field
has_v8_5a	$ZIGLIB/std/target/arm.zig	/has_v8_5a/;"	field
has_v8_6a	$ZIGLIB/std/target/arm.zig	/has_v8_6a/;"	field
has_v8_7a	$ZIGLIB/std/target/arm.zig	/has_v8_7a/;"	field
has_v8_8a	$ZIGLIB/std/target/arm.zig	/has_v8_8a/;"	field
has_v8m	$ZIGLIB/std/target/arm.zig	/has_v8m/;"	field
has_v8m_main	$ZIGLIB/std/target/arm.zig	/has_v8m_main/;"	field
has_v9_1a	$ZIGLIB/std/target/arm.zig	/has_v9_1a/;"	field
has_v9_2a	$ZIGLIB/std/target/arm.zig	/has_v9_2a/;"	field
has_v9_3a	$ZIGLIB/std/target/arm.zig	/has_v9_3a/;"	field
has_v9a	$ZIGLIB/std/target/arm.zig	/has_v9a/;"	field
has_xsave	$ZIGLIB/std/zig/system/x86.zig	/const has_xsave = bit(leaf.ecx, 27)/;"	constant
has_zero_prefix	$ZIGLIB/std/net.zig	/var has_zero_prefix = false/;"	variable
hash	$ZIGLIB/std/process.zig	/pub fn hash(self: @This(), s: []const u8) u64 {$/;"	function
hash128To64	$ZIGLIB/std/hash/cityhash.zig	/fn hash128To64(low: u64, high: u64) u64 {$/;"	function
hash32Len0To4	$ZIGLIB/std/hash/cityhash.zig	/fn hash32Len0To4(str: []const u8) u32 {$/;"	function
hash32Len13To24	$ZIGLIB/std/hash/cityhash.zig	/fn hash32Len13To24(str: []const u8) u32 {$/;"	function
hash32Len5To12	$ZIGLIB/std/hash/cityhash.zig	/fn hash32Len5To12(str: []const u8) u32 {$/;"	function
hash4	$ZIGLIB/std/compress/deflate/compressor.zig	/^fn hash4(b: []u8) u32 {$/;"	function
hashArray	$ZIGLIB/std/hash/auto_hash.zig	/^pub fn hashArray(hasher: anytype, key: anytype, comptime strat: HashStrategy) void {$/;"	function
hashContentsToFileName	$ZIGLIB/std/Build/OptionsStep.zig	/^fn hashContentsToFileName(self: *OptionsStep) [64]u8 {$/;"	function
hashLen0To16	$ZIGLIB/std/hash/cityhash.zig	/fn hashLen0To16(str: []const u8) u64 {$/;"	function
hashLen16	$ZIGLIB/std/hash/cityhash.zig	/fn hashLen16(u: u64, v: u64) u64 {$/;"	function
hashLen16Mul	$ZIGLIB/std/hash/cityhash.zig	/fn hashLen16Mul(low: u64, high: u64, mul: u64) u64 {$/;"	function
hashLen17To32	$ZIGLIB/std/hash/cityhash.zig	/fn hashLen17To32(str: []const u8) u64 {$/;"	function
hashLen33To64	$ZIGLIB/std/hash/cityhash.zig	/fn hashLen33To64(str: []const u8) u64 {$/;"	function
hashName	$ZIGLIB/std/zig.zig	/^pub fn hashName(parent_hash: SrcHash, sep: []const u8, name: []const u8) SrcHash {$/;"	function
hashOffset	$ZIGLIB/std/macho.zig	/hashOffset: u32/;"	field
hashPointer	$ZIGLIB/std/hash/auto_hash.zig	/^pub fn hashPointer(hasher: anytype, key: anytype, comptime strat: HashStrategy) void {$/;"	function
hashSize	$ZIGLIB/std/macho.zig	/hashSize: u8/;"	field
hashSrc	$ZIGLIB/std/zig.zig	/^pub fn hashSrc(src: []const u8) SrcHash {$/;"	function
hashString	$ZIGLIB/std/hash_map.zig	/^pub fn hashString(s: []const u8) u64 {$/;"	function
hashToBytes	$ZIGLIB/std/crypto/salsa20.zig	/fn hashToBytes(out: *[64]u8, x: BlockVec) void {$/;"	function
hashType	$ZIGLIB/std/macho.zig	/hashType: u8/;"	field
hashUint32	$ZIGLIB/std/hash/murmur.zig	/pub fn hashUint32(v: u32) u64 {$/;"	function
hashUint32WithSeed	$ZIGLIB/std/hash/murmur.zig	/pub fn hashUint32WithSeed(v: u32, seed: u64) u64 {$/;"	function
hashUint64	$ZIGLIB/std/hash/murmur.zig	/pub fn hashUint64(v: u64) u64 {$/;"	function
hashUint64WithSeed	$ZIGLIB/std/hash/murmur.zig	/pub fn hashUint64WithSeed(v: u64, seed: u64) u64 {$/;"	function
hashWithSeed	$ZIGLIB/std/hash/murmur.zig	/pub fn hashWithSeed(str: []const u8, seed: u64) u64 {$/;"	function
hashWithSeeds	$ZIGLIB/std/hash/cityhash.zig	/pub fn hashWithSeeds(str: []const u8, seed0: u64, seed1: u64) u64 {$/;"	function
hash_a	$ZIGLIB/std/compress/xz/block.zig	/var hash_a: [Sha256.digest_length]u8 = undefined/;"	variable
hash_b	$ZIGLIB/std/compress/xz/block.zig	/var hash_b: [Sha256.digest_length]u8 = undefined/;"	variable
hash_basename	$ZIGLIB/std/Build/WriteFileStep.zig	/var hash_basename: [digest.len * 2]u8 = undefined/;"	variable
hash_bits	$ZIGLIB/std/hash_map.zig	/const hash_bits = @typeInfo(Hash).Int.bits/;"	constant
hash_buf	$ZIGLIB/std/crypto/scrypt.zig	/var hash_buf: [max_hash_len]u8 = undefined/;"	variable
hash_der	$ZIGLIB/std/crypto/Certificate.zig	/const hash_der = switch (Hash) {$/;"	constant
hash_head	$ZIGLIB/std/compress/deflate/compressor.zig	/hash_head: []u32/;"	field
hash_length	$ZIGLIB/std/crypto/bcrypt.zig	/^pub const hash_length: usize = 60/;"	constant
hash_map	$ZIGLIB/std/process.zig	/hash_map: HashMap/;"	field
hash_mask	$ZIGLIB/std/compress/deflate/compressor.zig	/^const hash_mask = (1 << hash_bits) - 1/;"	constant
hash_match	$ZIGLIB/std/compress/deflate/compressor.zig	/hash_match: []u32/;"	field
hash_mul	$ZIGLIB/std/compress/deflate/compressor.zig	/^const hash_mul = 0x1e35a7bd/;"	constant
hash_of_maps	$ZIGLIB/std/os/linux/bpf.zig	/hash_of_maps/;"	field
hash_offset	$ZIGLIB/std/compress/deflate/compressor.zig	/hash_offset: u32/;"	field
hash_options	$ZIGLIB/std/crypto/bcrypt.zig	/const hash_options = HashOptions{$/;"	constant
hash_prev	$ZIGLIB/std/compress/deflate/compressor.zig	/hash_prev: []u32/;"	field
hash_result	$ZIGLIB/std/crypto/scrypt.zig	/const hash_result = try phc_format.deserialize(HashResult, str)/;"	constant
hash_signature	$ZIGLIB/std/hash_map.zig	/const hash_signature = "fn (self, " ++ @typeName(PseudoKey) ++ ") " ++ @typeName(Hash)/;"	constant
hash_size	$ZIGLIB/std/compress/deflate/compressor.zig	/^const hash_size = 1 << hash_bits/;"	constant
hash_state	$ZIGLIB/std/crypto/blake3.zig	/var hash_state = Blake3.init(.{})/;"	variable
hash_status	$ZIGLIB/std/array_hash_map.zig	/const hash_status = if (store_hash) "stored" else "computed"/;"	constant
hash_str	$ZIGLIB/std/crypto/scrypt.zig	/const hash_str = try params.hash.toB64(&buf)/;"	constant
hash_tbl_hdr	$ZIGLIB/std/pdb.zig	/const hash_tbl_hdr = try reader.readStruct(HashTableHeader)/;"	constant
hashbytes	$ZIGLIB/std/hash/murmur.zig	/const hashbytes = hashbits \/ 8/;"	constant
hashed	$ZIGLIB/std/crypto/Certificate.zig	/var hashed: [Hash.digest_length]u8 = undefined/;"	variable
hashedReader	$ZIGLIB/std/compress.zig	/^pub fn hashedReader($/;"	function
hashed_reader	$ZIGLIB/std/compress/xz.zig	/const hashed_reader = hasher.reader()/;"	constant
hasher	$ZIGLIB/std/zig.zig	/var hasher = std.crypto.hash.Blake3.init(.{})/;"	variable
hashes	$ZIGLIB/std/hash/murmur.zig	/var hashes: [hashbytes * 256]u8 = undefined/;"	variable
hashes_array	$ZIGLIB/std/array_hash_map.zig	/const hashes_array = slice.items(.hash)/;"	constant
hashes_bytes	$ZIGLIB/std/hash/cityhash.zig	/var hashes_bytes: [256 * @sizeOf(HashResult)]u8 = undefined/;"	variable
hashtab	$ZIGLIB/std/os/linux/vdso.zig	/const hashtab = maybe_hashtab orelse return 0/;"	constant
hasleoncasa	$ZIGLIB/std/target/sparc.zig	/hasleoncasa/;"	field
hasumacsmac	$ZIGLIB/std/target/sparc.zig	/hasumacsmac/;"	field
haswell	$ZIGLIB/std/target/x86.zig	/pub const haswell = CpuModel{$/;"	constant
hatype	$ZIGLIB/std/os/linux.zig	/hatype: u16/;"	field
have_abs_path	$ZIGLIB/std/fs/path.zig	/var have_abs_path = false/;"	variable
have_accept4	$ZIGLIB/std/os.zig	/const have_accept4 = comptime !(builtin.target.isDarwin() or builtin.os.tag == .windows)/;"	constant
have_all_info	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/const have_all_info = cross_target.dynamic_linker.get() != null and$/;"	constant
have_fields	$ZIGLIB/std/zig/system/linux.zig	/have_fields: usize = 0/;"	field
have_pread_but_not_preadv	$ZIGLIB/std/os.zig	/const have_pread_but_not_preadv = switch (builtin.os.tag) {$/;"	constant
have_pwrite_but_not_pwritev	$ZIGLIB/std/os.zig	/const have_pwrite_but_not_pwritev = switch (builtin.os.tag) {$/;"	constant
have_read_lock	$ZIGLIB/std/event/rwlock.zig	/const have_read_lock = if (@cmpxchgStrong(State, &self.shared_state, .Unlocked, .ReadLock, .SeqCst, .SeqCst)) |old_state| old_state == .ReadLock else true/;"	constant
have_rem	$ZIGLIB/std/math/big/rational.zig	/var have_rem = r.len() > 0/;"	variable
have_root_slash	$ZIGLIB/std/fs/path.zig	/const have_root_slash = path.len > root_slice.len and (path[root_slice.len] == '\/' or path[root_slice.len] == '\\\\')/;"	constant
have_segfault_handling_support	$ZIGLIB/std/debug.zig	/^pub const have_segfault_handling_support = switch (native_os) {$/;"	constant
have_shared_key	$ZIGLIB/std/crypto/tls/Client.zig	/var have_shared_key = false/;"	variable
have_sock_flags	$ZIGLIB/std/os.zig	/const have_sock_flags = comptime !builtin.target.isDarwin()/;"	constant
hawaii	$ZIGLIB/std/target/amdgpu.zig	/pub const hawaii = CpuModel{$/;"	constant
hay_it	$ZIGLIB/std/Build/CheckObjectStep.zig	/var hay_it = mem.tokenize(u8, mem.trim(u8, haystack, " "), " ")/;"	variable
hay_tok	$ZIGLIB/std/Build/CheckObjectStep.zig	/const hay_tok = hay_it.next() orelse return false/;"	constant
haystack	$ZIGLIB/std/mem.zig	/const haystack = [_]u16{ 0xbbaa, 0xccbb, 0xddcc, 0xeedd, 0xffee, 0x00ff } ++ [1]u16{0} ** 100/;"	constant
haystack_bytes	$ZIGLIB/std/mem.zig	/const haystack_bytes = sliceAsBytes(haystack)/;"	constant
hba_port_number	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/hba_port_number: u16 align(1)/;"	field
hbrBackground	$ZIGLIB/std/os/windows/user32.zig	/hbrBackground: ?HBRUSH/;"	field
hchacha20	$ZIGLIB/std/crypto/chacha20.zig	/fn hchacha20(input: [16]u8, key: [32]u8) [32]u8 {$/;"	function
hctx	$ZIGLIB/std/crypto/25519/edwards25519.zig	/var hctx: [H.digest_length]u8 = undefined/;"	variable
hdig	$ZIGLIB/std/fmt/errol.zig	/var hdig = @floatToInt(u8, @floor(high.val))/;"	variable
hdr32	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/const hdr32 = @ptrCast(*elf.Elf32_Ehdr, &hdr_buf)/;"	constant
hdr64	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/const hdr64 = @ptrCast(*elf.Elf64_Ehdr, &hdr_buf)/;"	constant
hdr_buf	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/var hdr_buf: [@sizeOf(elf.Elf64_Ehdr)]u8 align(@alignOf(elf.Elf64_Ehdr)) = undefined/;"	variable
hdr_cnt	$ZIGLIB/std/os.zig	/const hdr_cnt = math.cast(u31, headers.len) orelse math.maxInt(u31)/;"	constant
hdr_len	$ZIGLIB/std/os/linux/bpf/btf_ext.zig	/hdr_len: u32/;"	field
hdr_size	$ZIGLIB/std/os/uefi/protocols/hii.zig	/hdr_size: u32/;"	field
hdrp	$ZIGLIB/std/os/linux.zig	/hdrp: *cap_user_header_t/;"	field
hdtr	$ZIGLIB/std/os.zig	/var hdtr: ?*std.c.sf_hdtr = null/;"	variable
hdtr_data	$ZIGLIB/std/os.zig	/var hdtr_data: std.c.sf_hdtr = undefined/;"	variable
hdw_addr	$ZIGLIB/std/c/solaris.zig	/hdw_addr: [MAX_HDW_LEN]u8/;"	field
hdw_len	$ZIGLIB/std/c/solaris.zig	/hdw_len: i32/;"	field
head	$ZIGLIB/std/os/linux/io_uring.zig	/var head = self.cq.head.*/;"	variable
head_keep_bits	$ZIGLIB/std/packed_int_array.zig	/const head_keep_bits = bit_index - (start_byte * 8)/;"	constant
head_mask	$ZIGLIB/std/mem.zig	/const head_mask = @as(u8, 0xff) >> bit_shift/;"	constant
header	$ZIGLIB/std/tz.zig	/var header = try reader.readStruct(Header)/;"	variable
headerSize	$ZIGLIB/std/os/uefi/tables/runtime_services.zig	/headerSize: u32/;"	field
header_align	$ZIGLIB/std/hash_map.zig	/const header_align = @alignOf(Header)/;"	constant
header_bytes	$ZIGLIB/std/http/Client.zig	/header_bytes: std.ArrayListUnmanaged(u8)/;"	field
header_bytes_owned	$ZIGLIB/std/http/Client.zig	/header_bytes_owned: bool/;"	field
header_count	$ZIGLIB/std/fs/file.zig	/header_count: usize = 0/;"	field
header_dir_path	$ZIGLIB/std/Build/CompileStep.zig	/const header_dir_path = full_file_path[0 .. full_file_path.len - config_header.include_path.len]/;"	constant
header_done	$ZIGLIB/std/os.zig	/var header_done = false/;"	variable
header_fields_too_large	$ZIGLIB/std/http.zig	/header_fields_too_large = 431/;"	field
header_hasher	$ZIGLIB/std/compress/xz/block.zig	/var header_hasher = std.compress.hashedReader(block_reader, Crc32.init())/;"	variable
header_len	$ZIGLIB/std/os/windows.zig	/const header_len = @sizeOf(ULONG) + @sizeOf(USHORT) * 2/;"	constant
header_length	$ZIGLIB/std/os/uefi/protocols/managed_network_protocol.zig	/header_length: u32/;"	field
header_name	$ZIGLIB/std/http/Client.zig	/const header_name = line_it.first()/;"	constant
header_reader	$ZIGLIB/std/compress/xz/block.zig	/const header_reader = header_hasher.reader()/;"	constant
header_size	$ZIGLIB/std/os/uefi/tables/table_header.zig	/header_size: u32/;"	field
header_strategy	$ZIGLIB/std/http/Client.zig	/header_strategy: HeaderStrategy = .{ .dynamic = 16 * 1024 }/;"	field
header_strings	$ZIGLIB/std/debug.zig	/const header_strings = mapped_mem[str_shdr.sh_offset .. str_shdr.sh_offset + str_shdr.sh_size]/;"	constant
header_value	$ZIGLIB/std/http/Client.zig	/const header_value = line_it.rest()/;"	constant
headerpad_max_install_names	$ZIGLIB/std/Build/CompileStep.zig	/^headerpad_max_install_names: bool = false/;"	field
headerpad_size	$ZIGLIB/std/Build/CompileStep.zig	/^headerpad_size: ?u32 = null/;"	field
headers	$ZIGLIB/std/http/Client.zig	/var headers: Response.Headers = .{$/;"	variable
headers_and_trailers	$ZIGLIB/std/fs/file.zig	/headers_and_trailers: []os.iovec_const = &[0]os.iovec_const{}/;"	field
headers_data	$ZIGLIB/std/http/Client.zig	/const headers_data = in[0..i]/;"	constant
headroom	$ZIGLIB/std/os/linux.zig	/headroom: u32/;"	field
heap_allocator	$ZIGLIB/std/heap.zig	/var heap_allocator = HeapAllocator.init()/;"	variable
heap_buf	$ZIGLIB/std/process.zig	/var heap_buf: ?[]u8 = null/;"	variable
heap_handle	$ZIGLIB/std/heap.zig	/heap_handle: ?HeapHandle/;"	field
heap_items	$ZIGLIB/std/priority_queue.zig	/const heap_items = try testing.allocator.dupe(u32, items[0..])/;"	constant
heap_ptr	$ZIGLIB/std/Thread.zig	/heap_ptr: windows.PVOID/;"	field
heartbeat	$ZIGLIB/std/crypto/tls.zig	/heartbeat = 15/;"	field
hearts	$ZIGLIB/std/enums.zig	/hearts/;"	field
held	$ZIGLIB/std/fs/watch.zig	/const held = self.os_data.table_lock.acquire()/;"	constant
hello_hash	$ZIGLIB/std/crypto/tls/Client.zig	/const hello_hash = p.transcript_hash.peek()/;"	constant
hello_rand	$ZIGLIB/std/crypto/tls/Client.zig	/const hello_rand = random_buffer[0..32].*/;"	constant
hello_retry_request_sequence	$ZIGLIB/std/crypto/tls.zig	/^pub const hello_retry_request_sequence = [32]u8{$/;"	constant
helpers	$ZIGLIB/std/os/linux/bpf/kern.zig	/^pub const helpers = if (in_bpf_program) @import("helpers.zig") else struct {}/;"	constant
hermit	$ZIGLIB/std/target.zig	/hermit/;"	field
hexToBytes	$ZIGLIB/std/fmt.zig	/^pub fn hexToBytes(out: []u8, input: []const u8) ![]u8 {$/;"	function
hex_offsets	$ZIGLIB/std/os/windows.zig	/const hex_offsets = switch (builtin.target.cpu.arch.endian()) {$/;"	constant
hexadecimal	$ZIGLIB/std/zig/c_translation.zig	/hexadecimal/;"	field
hexagon	$ZIGLIB/std/target.zig	/hexagon/;"	field
hexagonv5	$ZIGLIB/std/target/hexagon.zig	/pub const hexagonv5 = CpuModel{$/;"	constant
hexagonv55	$ZIGLIB/std/target/hexagon.zig	/pub const hexagonv55 = CpuModel{$/;"	constant
hexagonv60	$ZIGLIB/std/target/hexagon.zig	/pub const hexagonv60 = CpuModel{$/;"	constant
hexagonv62	$ZIGLIB/std/target/hexagon.zig	/pub const hexagonv62 = CpuModel{$/;"	constant
hexagonv65	$ZIGLIB/std/target/hexagon.zig	/pub const hexagonv65 = CpuModel{$/;"	constant
hexagonv66	$ZIGLIB/std/target/hexagon.zig	/pub const hexagonv66 = CpuModel{$/;"	constant
hexagonv67	$ZIGLIB/std/target/hexagon.zig	/pub const hexagonv67 = CpuModel{$/;"	constant
hexagonv67t	$ZIGLIB/std/target/hexagon.zig	/pub const hexagonv67t = CpuModel{$/;"	constant
hexagonv68	$ZIGLIB/std/target/hexagon.zig	/pub const hexagonv68 = CpuModel{$/;"	constant
hexagonv69	$ZIGLIB/std/target/hexagon.zig	/pub const hexagonv69 = CpuModel{$/;"	constant
hfsq	$ZIGLIB/std/math/log1p.zig	/const hfsq = 0.5 * f * f/;"	constant
hiWord	$ZIGLIB/compiler_rt/common.zig	/fn hiWord(x: u64) u64 {$/;"	function
hi_lo	$ZIGLIB/std/crypto/ghash_polyval.zig	/hi_lo/;"	field
hi_user	$ZIGLIB/std/dwarf/TAG.zig	/^pub const hi_user = 0xffff/;"	constant
hibit	$ZIGLIB/std/crypto/poly1305.zig	/const hibit: u64 = if (last) 0 else 1 << 40/;"	constant
hidden	$ZIGLIB/std/builtin.zig	/hidden/;"	field
hide_foreign_binaries_warning	$ZIGLIB/std/Build/EmulatableRunStep.zig	/^hide_foreign_binaries_warning: bool/;"	field
hide_warnings	$ZIGLIB/std/Build/EmulatableRunStep.zig	/const hide_warnings = if (builder.available_options_map.get(option_name) == null) warn: {$/;"	constant
high	$ZIGLIB/std/unicode.zig	/const high = @intCast(u16, (codepoint - 0x10000) >> 10) + 0xD800/;"	constant
highA	$ZIGLIB/compiler_rt/fmod.zig	/var highA: u64 = 0/;"	variable
highB	$ZIGLIB/compiler_rt/fmod.zig	/var highB: u64 = 0/;"	variable
high_bit	$ZIGLIB/std/os/uefi/status.zig	/^const high_bit = 1 << @typeInfo(usize).Int.bits - 1/;"	constant
high_byte_shift	$ZIGLIB/std/io/bit_writer.zig	/const high_byte_shift = @intCast(BufShift, buf_bit_count - u8_bit_count)/;"	constant
high_coder	$ZIGLIB/std/compress/lzma/decode/rangecoder.zig	/high_coder: BitTree(8) = .{}/;"	field
high_index	$ZIGLIB/compiler_rt/fmod.zig	/const high_index = comptime switch (builtin.target.cpu.arch.endian()) {$/;"	constant
high_pc	$ZIGLIB/std/dwarf/AT.zig	/^pub const high_pc = 0x12/;"	constant
high_registers	$ZIGLIB/std/target/csky.zig	/high_registers/;"	field
high_word	$ZIGLIB/std/target/s390x.zig	/high_word/;"	field
highest_set_bit	$ZIGLIB/std/priority_dequeue.zig	/const highest_set_bit = @bitSizeOf(usize) - 1 - leading_zeros/;"	constant
hint	$ZIGLIB/std/heap/PageAllocator.zig	/const hint = @atomicLoad(@TypeOf(std.heap.next_mmap_addr_hint), &std.heap.next_mmap_addr_hint, .Unordered)/;"	constant
hints	$ZIGLIB/std/net.zig	/const hints = os.addrinfo{$/;"	constant
hist	$ZIGLIB/std/compress/deflate/dict_decoder.zig	/hist: []u8 = undefined/;"	field
histSize	$ZIGLIB/std/compress/deflate/dict_decoder.zig	/pub fn histSize(self: *Self) u32 {$/;"	function
histogram	$ZIGLIB/std/compress/deflate/huffman_bit_writer.zig	/^fn histogram(b: []const u8, h: *[]u16) void {$/;"	function
history_table	$ZIGLIB/std/debug.zig	/var history_table: windows.UNWIND_HISTORY_TABLE = std.mem.zeroes(windows.UNWIND_HISTORY_TABLE)/;"	variable
hit_to	$ZIGLIB/std/Thread/Futex.zig	/const hit_to = &paddles[(i + 1) % paddles.len]/;"	constant
hkdf	$ZIGLIB/std/crypto/hkdf.zig	/var hkdf = kdf.extractInit(&salt)/;"	variable
hkdfExpandLabel	$ZIGLIB/std/crypto/tls.zig	/^pub fn hkdfExpandLabel($/;"	function
hm_bw	$ZIGLIB/std/compress/deflate/compressor.zig	/hm_bw: hm_bw.HuffmanBitWriter(WriterType) = undefined/;"	field
hmac	$ZIGLIB/std/crypto/tls.zig	/^pub fn hmac(comptime Hmac: type, message: []const u8, key: [Hmac.key_length]u8) [Hmac.mac_length]u8 {$/;"	function
home_dir	$ZIGLIB/std/fs/get_app_data_dir.zig	/const home_dir = os.getenv("HOME") orelse {$/;"	constant
hop_limit	$ZIGLIB/std/os/uefi/protocols/udp6_protocol.zig	/hop_limit: u8/;"	field
horizontal_resolution	$ZIGLIB/std/os/uefi/protocols/graphics_output_protocol.zig	/horizontal_resolution: u32 = undefined/;"	field
host	$ZIGLIB/std/http/Client.zig	/const host = uri.host orelse return error.UriMissingHost/;"	constant
host_dl	$ZIGLIB/std/Build/EmulatableRunStep.zig	/const host_dl = builder.host.dynamic_linker.get() orelse "(none)"/;"	constant
host_info	$ZIGLIB/std/Build/EmulatableRunStep.zig	/const host_info = self.builder.host/;"	constant
host_len	$ZIGLIB/std/crypto/tls/Client.zig	/const host_len = @intCast(u16, host.len)/;"	constant
host_name	$ZIGLIB/std/Build/EmulatableRunStep.zig	/const host_name = builder.host.target.zigTriple(builder.allocator) catch @panic("unhandled error")/;"	constant
host_t	$ZIGLIB/std/c/darwin.zig	/^pub const host_t = mach_port_t/;"	constant
hostent	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const hostent = extern struct {$/;"	struct
hostname	$ZIGLIB/std/os.zig	/const hostname = mem.sliceTo(&uts.nodename, 0)/;"	constant
hour	$ZIGLIB/std/os/windows/winmm.zig	/hour: BYTE/;"	field
hours_into_day	$ZIGLIB/std/time/epoch.zig	/hours_into_day: u5/;"	field
hpDiv10	$ZIGLIB/std/fmt/errol.zig	/^fn hpDiv10(hp: *HP) void {$/;"	function
hpMul10	$ZIGLIB/std/fmt/errol.zig	/^fn hpMul10(hp: *HP) void {$/;"	function
hpNormalize	$ZIGLIB/std/fmt/errol.zig	/^fn hpNormalize(hp: *HP) void {$/;"	function
hpProd	$ZIGLIB/std/fmt/errol.zig	/^fn hpProd(in: HP, val: f64) HP {$/;"	function
hram	$ZIGLIB/std/crypto/25519/ed25519.zig	/const hram = Curve.scalar.reduce64(hram64)/;"	constant
hram64	$ZIGLIB/std/crypto/25519/ed25519.zig	/var hram64: [Sha512.digest_length]u8 = undefined/;"	variable
hram_batch	$ZIGLIB/std/crypto/25519/ed25519.zig	/var hram_batch: [count]Curve.scalar.CompressedScalar = undefined/;"	variable
hreset	$ZIGLIB/std/target/x86.zig	/hreset/;"	field
hs_derived_secret	$ZIGLIB/std/crypto/tls/Client.zig	/const hs_derived_secret = hkdfExpandLabel(P.Hkdf, early_secret, "derived", &empty_hash, P.Hash.digest_length)/;"	constant
hsail	$ZIGLIB/std/target.zig	/hsail/;"	field
hsail64	$ZIGLIB/std/target.zig	/hsail64/;"	field
hsalsa	$ZIGLIB/std/crypto/salsa20.zig	/fn hsalsa(input: [16]u8, key: [32]u8) [32]u8 {$/;"	function
http_version_not_supported	$ZIGLIB/std/http.zig	/http_version_not_supported = 505/;"	field
huffSym	$ZIGLIB/std/compress/deflate/decompressor.zig	/fn huffSym(self: *Self, h: *HuffmanDecoder) InflateError!u32 {$/;"	function
huff_offset	$ZIGLIB/std/compress/deflate/huffman_bit_writer.zig	/var huff_offset = try hm_code.newHuffmanEncoder(allocator, deflate_const.offset_code_count)/;"	variable
huffmanBitWriter	$ZIGLIB/std/compress/deflate/huffman_bit_writer.zig	/^pub fn huffmanBitWriter(allocator: Allocator, writer: anytype) !HuffmanBitWriter(@TypeOf(writer)) {$/;"	function
huffmanBlock	$ZIGLIB/std/compress/deflate/decompressor.zig	/fn huffmanBlock(self: *Self) Error!void {$/;"	function
huffman_chunk_bits	$ZIGLIB/std/compress/deflate/decompressor.zig	/^const huffman_chunk_bits = 9/;"	constant
huffman_count_mask	$ZIGLIB/std/compress/deflate/decompressor.zig	/^const huffman_count_mask = 15/;"	constant
huffman_num_chunks	$ZIGLIB/std/compress/deflate/decompressor.zig	/^const huffman_num_chunks = 1 << huffman_chunk_bits/;"	constant
huffman_only	$ZIGLIB/std/compress/deflate/compressor.zig	/huffman_only = -2/;"	field
huffman_value_shift	$ZIGLIB/std/compress/deflate/decompressor.zig	/^const huffman_value_shift = 4/;"	constant
hull	$ZIGLIB/std/target.zig	/hull/;"	field
hurd	$ZIGLIB/std/target.zig	/hurd/;"	field
hvx_ieee_fp	$ZIGLIB/std/target/hexagon.zig	/hvx_ieee_fp/;"	field
hvx_length128b	$ZIGLIB/std/target/hexagon.zig	/hvx_length128b/;"	field
hvx_length64b	$ZIGLIB/std/target/hexagon.zig	/hvx_length64b/;"	field
hvx_qfloat	$ZIGLIB/std/target/hexagon.zig	/hvx_qfloat/;"	field
hvxv60	$ZIGLIB/std/target/hexagon.zig	/hvxv60/;"	field
hvxv62	$ZIGLIB/std/target/hexagon.zig	/hvxv62/;"	field
hvxv65	$ZIGLIB/std/target/hexagon.zig	/hvxv65/;"	field
hvxv66	$ZIGLIB/std/target/hexagon.zig	/hvxv66/;"	field
hvxv67	$ZIGLIB/std/target/hexagon.zig	/hvxv67/;"	field
hvxv68	$ZIGLIB/std/target/hexagon.zig	/hvxv68/;"	field
hvxv69	$ZIGLIB/std/target/hexagon.zig	/hvxv69/;"	field
hw_address_size	$ZIGLIB/std/os/uefi/protocols/simple_network_protocol.zig	/hw_address_size: u32/;"	field
hwaddr	$ZIGLIB/std/os/linux.zig	/hwaddr: sockaddr/;"	field
hwdiv	$ZIGLIB/std/target/csky.zig	/hwdiv/;"	field
hwdiv_arm	$ZIGLIB/std/target/arm.zig	/hwdiv_arm/;"	field
hwmult16	$ZIGLIB/std/target/msp430.zig	/hwmult16/;"	field
hwmult32	$ZIGLIB/std/target/msp430.zig	/hwmult32/;"	field
hwmultf5	$ZIGLIB/std/target/msp430.zig	/hwmultf5/;"	field
hwp_flags1	$ZIGLIB/std/elf.zig	/hwp_flags1: Elf32_Word/;"	field
hwp_flags2	$ZIGLIB/std/elf.zig	/hwp_flags2: Elf32_Word/;"	field
hypersparc	$ZIGLIB/std/target/sparc.zig	/pub const hypersparc = CpuModel{$/;"	constant
hypot	$ZIGLIB/std/math/hypot.zig	/^pub fn hypot(comptime T: type, x: T, y: T) T {$/;"	function
hypot32	$ZIGLIB/std/math/hypot.zig	/^fn hypot32(x: f32, y: f32) f32 {$/;"	function
hypot64	$ZIGLIB/std/math/hypot.zig	/^fn hypot64(x: f64, y: f64) f64 {$/;"	function
i16x8_abs	$ZIGLIB/std/wasm.zig	/i16x8_abs = 0x80/;"	field
i16x8_add	$ZIGLIB/std/wasm.zig	/i16x8_add = 0x8E/;"	field
i16x8_add_sat_s	$ZIGLIB/std/wasm.zig	/i16x8_add_sat_s = 0x8F/;"	field
i16x8_add_sat_u	$ZIGLIB/std/wasm.zig	/i16x8_add_sat_u = 0x90/;"	field
i16x8_all_true	$ZIGLIB/std/wasm.zig	/i16x8_all_true = 0x83/;"	field
i16x8_avgr_u	$ZIGLIB/std/wasm.zig	/i16x8_avgr_u = 0x9B/;"	field
i16x8_bitmask	$ZIGLIB/std/wasm.zig	/i16x8_bitmask = 0x84/;"	field
i16x8_eq	$ZIGLIB/std/wasm.zig	/i16x8_eq = 0x2D/;"	field
i16x8_extadd_pairwise_i8x16_s	$ZIGLIB/std/wasm.zig	/i16x8_extadd_pairwise_i8x16_s = 0x7C/;"	field
i16x8_extadd_pairwise_i8x16_u	$ZIGLIB/std/wasm.zig	/i16x8_extadd_pairwise_i8x16_u = 0x7D/;"	field
i16x8_extend_high_i8x16_s	$ZIGLIB/std/wasm.zig	/i16x8_extend_high_i8x16_s = 0x88/;"	field
i16x8_extend_high_i8x16_u	$ZIGLIB/std/wasm.zig	/i16x8_extend_high_i8x16_u = 0x8A/;"	field
i16x8_extend_low_i8x16_s	$ZIGLIB/std/wasm.zig	/i16x8_extend_low_i8x16_s = 0x87/;"	field
i16x8_extend_low_i8x16_u	$ZIGLIB/std/wasm.zig	/i16x8_extend_low_i8x16_u = 0x89/;"	field
i16x8_extmul_high_i8x16_s	$ZIGLIB/std/wasm.zig	/i16x8_extmul_high_i8x16_s = 0x9D/;"	field
i16x8_extmul_high_i8x16_u	$ZIGLIB/std/wasm.zig	/i16x8_extmul_high_i8x16_u = 0x9F/;"	field
i16x8_extmul_low_i8x16_s	$ZIGLIB/std/wasm.zig	/i16x8_extmul_low_i8x16_s = 0x9C/;"	field
i16x8_extmul_low_i8x16_u	$ZIGLIB/std/wasm.zig	/i16x8_extmul_low_i8x16_u = 0x9E/;"	field
i16x8_extract_lane_s	$ZIGLIB/std/wasm.zig	/i16x8_extract_lane_s = 0x18/;"	field
i16x8_extract_lane_u	$ZIGLIB/std/wasm.zig	/i16x8_extract_lane_u = 0x19/;"	field
i16x8_ge_s	$ZIGLIB/std/wasm.zig	/i16x8_ge_s = 0x35/;"	field
i16x8_ge_u	$ZIGLIB/std/wasm.zig	/i16x8_ge_u = 0x36/;"	field
i16x8_gt_s	$ZIGLIB/std/wasm.zig	/i16x8_gt_s = 0x31/;"	field
i16x8_gt_u	$ZIGLIB/std/wasm.zig	/i16x8_gt_u = 0x32/;"	field
i16x8_le_s	$ZIGLIB/std/wasm.zig	/i16x8_le_s = 0x33/;"	field
i16x8_le_u	$ZIGLIB/std/wasm.zig	/i16x8_le_u = 0x34/;"	field
i16x8_lt_s	$ZIGLIB/std/wasm.zig	/i16x8_lt_s = 0x2F/;"	field
i16x8_lt_u	$ZIGLIB/std/wasm.zig	/i16x8_lt_u = 0x30/;"	field
i16x8_max_s	$ZIGLIB/std/wasm.zig	/i16x8_max_s = 0x98/;"	field
i16x8_max_u	$ZIGLIB/std/wasm.zig	/i16x8_max_u = 0x99/;"	field
i16x8_min_s	$ZIGLIB/std/wasm.zig	/i16x8_min_s = 0x96/;"	field
i16x8_min_u	$ZIGLIB/std/wasm.zig	/i16x8_min_u = 0x97/;"	field
i16x8_mul	$ZIGLIB/std/wasm.zig	/i16x8_mul = 0x95/;"	field
i16x8_narrow_i32x4_s	$ZIGLIB/std/wasm.zig	/i16x8_narrow_i32x4_s = 0x85/;"	field
i16x8_narrow_i32x4_u	$ZIGLIB/std/wasm.zig	/i16x8_narrow_i32x4_u = 0x86/;"	field
i16x8_ne	$ZIGLIB/std/wasm.zig	/i16x8_ne = 0x2E/;"	field
i16x8_neg	$ZIGLIB/std/wasm.zig	/i16x8_neg = 0x81/;"	field
i16x8_q15mulr_sat_s	$ZIGLIB/std/wasm.zig	/i16x8_q15mulr_sat_s = 0x82/;"	field
i16x8_relaxed_dot_i8x16_i7x16_s	$ZIGLIB/std/wasm.zig	/i16x8_relaxed_dot_i8x16_i7x16_s = 0x112/;"	field
i16x8_relaxed_laneselect	$ZIGLIB/std/wasm.zig	/i16x8_relaxed_laneselect = 0x10a/;"	field
i16x8_relaxed_q15mulr_s	$ZIGLIB/std/wasm.zig	/i16x8_relaxed_q15mulr_s = 0x111/;"	field
i16x8_replace_lane	$ZIGLIB/std/wasm.zig	/i16x8_replace_lane = 0x1A/;"	field
i16x8_shl	$ZIGLIB/std/wasm.zig	/i16x8_shl = 0x8B/;"	field
i16x8_shr_s	$ZIGLIB/std/wasm.zig	/i16x8_shr_s = 0x8C/;"	field
i16x8_shr_u	$ZIGLIB/std/wasm.zig	/i16x8_shr_u = 0x8D/;"	field
i16x8_splat	$ZIGLIB/std/wasm.zig	/i16x8_splat = 0x10/;"	field
i16x8_sub	$ZIGLIB/std/wasm.zig	/i16x8_sub = 0x91/;"	field
i16x8_sub_sat_s	$ZIGLIB/std/wasm.zig	/i16x8_sub_sat_s = 0x92/;"	field
i16x8_sub_sat_u	$ZIGLIB/std/wasm.zig	/i16x8_sub_sat_u = 0x93/;"	field
i32_add	$ZIGLIB/std/wasm.zig	/i32_add = 0x6A/;"	field
i32_and	$ZIGLIB/std/wasm.zig	/i32_and = 0x71/;"	field
i32_clz	$ZIGLIB/std/wasm.zig	/i32_clz = 0x67/;"	field
i32_const	$ZIGLIB/std/wasm.zig	/i32_const: i32/;"	field
i32_ctz	$ZIGLIB/std/wasm.zig	/i32_ctz = 0x68/;"	field
i32_div_s	$ZIGLIB/std/wasm.zig	/i32_div_s = 0x6D/;"	field
i32_div_u	$ZIGLIB/std/wasm.zig	/i32_div_u = 0x6E/;"	field
i32_eq	$ZIGLIB/std/wasm.zig	/i32_eq = 0x46/;"	field
i32_eqz	$ZIGLIB/std/wasm.zig	/i32_eqz = 0x45/;"	field
i32_extend16_s	$ZIGLIB/std/wasm.zig	/i32_extend16_s = 0xC1/;"	field
i32_extend8_s	$ZIGLIB/std/wasm.zig	/i32_extend8_s = 0xC0/;"	field
i32_ge_s	$ZIGLIB/std/wasm.zig	/i32_ge_s = 0x4E/;"	field
i32_ge_u	$ZIGLIB/std/wasm.zig	/i32_ge_u = 0x4F/;"	field
i32_gt_s	$ZIGLIB/std/wasm.zig	/i32_gt_s = 0x4A/;"	field
i32_gt_u	$ZIGLIB/std/wasm.zig	/i32_gt_u = 0x4B/;"	field
i32_le_s	$ZIGLIB/std/wasm.zig	/i32_le_s = 0x4C/;"	field
i32_le_u	$ZIGLIB/std/wasm.zig	/i32_le_u = 0x4D/;"	field
i32_load	$ZIGLIB/std/wasm.zig	/i32_load = 0x28/;"	field
i32_load16_s	$ZIGLIB/std/wasm.zig	/i32_load16_s = 0x2E/;"	field
i32_load16_u	$ZIGLIB/std/wasm.zig	/i32_load16_u = 0x2F/;"	field
i32_load8_s	$ZIGLIB/std/wasm.zig	/i32_load8_s = 0x2C/;"	field
i32_load8_u	$ZIGLIB/std/wasm.zig	/i32_load8_u = 0x2D/;"	field
i32_lt_s	$ZIGLIB/std/wasm.zig	/i32_lt_s = 0x48/;"	field
i32_lt_u	$ZIGLIB/std/wasm.zig	/i32_lt_u = 0x49/;"	field
i32_mul	$ZIGLIB/std/wasm.zig	/i32_mul = 0x6C/;"	field
i32_ne	$ZIGLIB/std/wasm.zig	/i32_ne = 0x47/;"	field
i32_or	$ZIGLIB/std/wasm.zig	/i32_or = 0x72/;"	field
i32_popcnt	$ZIGLIB/std/wasm.zig	/i32_popcnt = 0x69/;"	field
i32_reinterpret_f32	$ZIGLIB/std/wasm.zig	/i32_reinterpret_f32 = 0xBC/;"	field
i32_rem_s	$ZIGLIB/std/wasm.zig	/i32_rem_s = 0x6F/;"	field
i32_rem_u	$ZIGLIB/std/wasm.zig	/i32_rem_u = 0x70/;"	field
i32_rotl	$ZIGLIB/std/wasm.zig	/i32_rotl = 0x77/;"	field
i32_rotr	$ZIGLIB/std/wasm.zig	/i32_rotr = 0x78/;"	field
i32_shl	$ZIGLIB/std/wasm.zig	/i32_shl = 0x74/;"	field
i32_shr_s	$ZIGLIB/std/wasm.zig	/i32_shr_s = 0x75/;"	field
i32_shr_u	$ZIGLIB/std/wasm.zig	/i32_shr_u = 0x76/;"	field
i32_store	$ZIGLIB/std/wasm.zig	/i32_store = 0x36/;"	field
i32_store16	$ZIGLIB/std/wasm.zig	/i32_store16 = 0x3B/;"	field
i32_store8	$ZIGLIB/std/wasm.zig	/i32_store8 = 0x3A/;"	field
i32_sub	$ZIGLIB/std/wasm.zig	/i32_sub = 0x6B/;"	field
i32_trunc_f32_s	$ZIGLIB/std/wasm.zig	/i32_trunc_f32_s = 0xA8/;"	field
i32_trunc_f32_u	$ZIGLIB/std/wasm.zig	/i32_trunc_f32_u = 0xA9/;"	field
i32_trunc_f64_s	$ZIGLIB/std/wasm.zig	/i32_trunc_f64_s = 0xAA/;"	field
i32_trunc_f64_u	$ZIGLIB/std/wasm.zig	/i32_trunc_f64_u = 0xAB/;"	field
i32_trunc_sat_f32_s	$ZIGLIB/std/wasm.zig	/i32_trunc_sat_f32_s = 0x00/;"	field
i32_trunc_sat_f32_u	$ZIGLIB/std/wasm.zig	/i32_trunc_sat_f32_u = 0x01/;"	field
i32_trunc_sat_f64_s	$ZIGLIB/std/wasm.zig	/i32_trunc_sat_f64_s = 0x02/;"	field
i32_trunc_sat_f64_u	$ZIGLIB/std/wasm.zig	/i32_trunc_sat_f64_u = 0x03/;"	field
i32_wrap_i64	$ZIGLIB/std/wasm.zig	/i32_wrap_i64 = 0xA7/;"	field
i32_xor	$ZIGLIB/std/wasm.zig	/i32_xor = 0x73/;"	field
i32cases	$ZIGLIB/std/sort.zig	/const i32cases = [_][]const []const i32{$/;"	constant
i32x4_abs	$ZIGLIB/std/wasm.zig	/i32x4_abs = 0xA0/;"	field
i32x4_add	$ZIGLIB/std/wasm.zig	/i32x4_add = 0xAE/;"	field
i32x4_all_true	$ZIGLIB/std/wasm.zig	/i32x4_all_true = 0xA3/;"	field
i32x4_bitmask	$ZIGLIB/std/wasm.zig	/i32x4_bitmask = 0xA4/;"	field
i32x4_dot_i16x8_s	$ZIGLIB/std/wasm.zig	/i32x4_dot_i16x8_s = 0xBA/;"	field
i32x4_eq	$ZIGLIB/std/wasm.zig	/i32x4_eq = 0x37/;"	field
i32x4_extadd_pairwise_i16x8_s	$ZIGLIB/std/wasm.zig	/i32x4_extadd_pairwise_i16x8_s = 0x7E/;"	field
i32x4_extadd_pairwise_i16x8_u	$ZIGLIB/std/wasm.zig	/i32x4_extadd_pairwise_i16x8_u = 0x7F/;"	field
i32x4_extend_high_i16x8_s	$ZIGLIB/std/wasm.zig	/i32x4_extend_high_i16x8_s = 0xA8/;"	field
i32x4_extend_high_i16x8_u	$ZIGLIB/std/wasm.zig	/i32x4_extend_high_i16x8_u = 0xAA/;"	field
i32x4_extend_low_i16x8_s	$ZIGLIB/std/wasm.zig	/i32x4_extend_low_i16x8_s = 0xA7/;"	field
i32x4_extend_low_i16x8_u	$ZIGLIB/std/wasm.zig	/i32x4_extend_low_i16x8_u = 0xA9/;"	field
i32x4_extmul_high_i16x8_s	$ZIGLIB/std/wasm.zig	/i32x4_extmul_high_i16x8_s = 0xBD/;"	field
i32x4_extmul_high_i16x8_u	$ZIGLIB/std/wasm.zig	/i32x4_extmul_high_i16x8_u = 0xBF/;"	field
i32x4_extmul_low_i16x8_s	$ZIGLIB/std/wasm.zig	/i32x4_extmul_low_i16x8_s = 0xBC/;"	field
i32x4_extmul_low_i16x8_u	$ZIGLIB/std/wasm.zig	/i32x4_extmul_low_i16x8_u = 0xBE/;"	field
i32x4_extract_lane	$ZIGLIB/std/wasm.zig	/i32x4_extract_lane = 0x1B/;"	field
i32x4_ge_s	$ZIGLIB/std/wasm.zig	/i32x4_ge_s = 0x3F/;"	field
i32x4_ge_u	$ZIGLIB/std/wasm.zig	/i32x4_ge_u = 0x40/;"	field
i32x4_gt_s	$ZIGLIB/std/wasm.zig	/i32x4_gt_s = 0x3B/;"	field
i32x4_gt_u	$ZIGLIB/std/wasm.zig	/i32x4_gt_u = 0x3C/;"	field
i32x4_le_s	$ZIGLIB/std/wasm.zig	/i32x4_le_s = 0x3D/;"	field
i32x4_le_u	$ZIGLIB/std/wasm.zig	/i32x4_le_u = 0x3E/;"	field
i32x4_lt_s	$ZIGLIB/std/wasm.zig	/i32x4_lt_s = 0x39/;"	field
i32x4_lt_u	$ZIGLIB/std/wasm.zig	/i32x4_lt_u = 0x3A/;"	field
i32x4_max_s	$ZIGLIB/std/wasm.zig	/i32x4_max_s = 0xB8/;"	field
i32x4_max_u	$ZIGLIB/std/wasm.zig	/i32x4_max_u = 0xB9/;"	field
i32x4_min_s	$ZIGLIB/std/wasm.zig	/i32x4_min_s = 0xB6/;"	field
i32x4_min_u	$ZIGLIB/std/wasm.zig	/i32x4_min_u = 0xB7/;"	field
i32x4_mul	$ZIGLIB/std/wasm.zig	/i32x4_mul = 0xB5/;"	field
i32x4_ne	$ZIGLIB/std/wasm.zig	/i32x4_ne = 0x38/;"	field
i32x4_neg	$ZIGLIB/std/wasm.zig	/i32x4_neg = 0xA1/;"	field
i32x4_relaxed_dot_i8x16_i7x16_add_s	$ZIGLIB/std/wasm.zig	/i32x4_relaxed_dot_i8x16_i7x16_add_s = 0x113/;"	field
i32x4_relaxed_laneselect	$ZIGLIB/std/wasm.zig	/i32x4_relaxed_laneselect = 0x10b/;"	field
i32x4_relaxed_trunc_f32x4_s	$ZIGLIB/std/wasm.zig	/i32x4_relaxed_trunc_f32x4_s = 0x101/;"	field
i32x4_relaxed_trunc_f32x4_u	$ZIGLIB/std/wasm.zig	/i32x4_relaxed_trunc_f32x4_u = 0x102/;"	field
i32x4_relaxed_trunc_f64x2_s_zero	$ZIGLIB/std/wasm.zig	/i32x4_relaxed_trunc_f64x2_s_zero = 0x103/;"	field
i32x4_relaxed_trunc_f64x2_u_zero	$ZIGLIB/std/wasm.zig	/i32x4_relaxed_trunc_f64x2_u_zero = 0x104/;"	field
i32x4_replace_lane	$ZIGLIB/std/wasm.zig	/i32x4_replace_lane = 0x1C/;"	field
i32x4_shl	$ZIGLIB/std/wasm.zig	/i32x4_shl = 0xAB/;"	field
i32x4_shr_s	$ZIGLIB/std/wasm.zig	/i32x4_shr_s = 0xAC/;"	field
i32x4_shr_u	$ZIGLIB/std/wasm.zig	/i32x4_shr_u = 0xAD/;"	field
i32x4_splat	$ZIGLIB/std/wasm.zig	/i32x4_splat = 0x11/;"	field
i32x4_sub	$ZIGLIB/std/wasm.zig	/i32x4_sub = 0xB1/;"	field
i32x4_trunc_sat_f32x4_s	$ZIGLIB/std/wasm.zig	/i32x4_trunc_sat_f32x4_s = 0xF8/;"	field
i32x4_trunc_sat_f32x4_u	$ZIGLIB/std/wasm.zig	/i32x4_trunc_sat_f32x4_u = 0xF9/;"	field
i32x4_trunc_sat_f64x2_s_zero	$ZIGLIB/std/wasm.zig	/i32x4_trunc_sat_f64x2_s_zero = 0xFC/;"	field
i32x4_trunc_sat_f64x2_u_zero	$ZIGLIB/std/wasm.zig	/i32x4_trunc_sat_f64x2_u_zero = 0xFD/;"	field
i386	$ZIGLIB/std/target/x86.zig	/pub const @"i386" = CpuModel{$/;"	constant
i486	$ZIGLIB/std/target/x86.zig	/pub const @"i486" = CpuModel{$/;"	constant
i586	$ZIGLIB/std/target/x86.zig	/pub const @"i586" = CpuModel{$/;"	constant
i64_add	$ZIGLIB/std/wasm.zig	/i64_add = 0x7C/;"	field
i64_and	$ZIGLIB/std/wasm.zig	/i64_and = 0x83/;"	field
i64_clz	$ZIGLIB/std/wasm.zig	/i64_clz = 0x79/;"	field
i64_const	$ZIGLIB/std/wasm.zig	/i64_const: i64/;"	field
i64_ctz	$ZIGLIB/std/wasm.zig	/i64_ctz = 0x7A/;"	field
i64_div_s	$ZIGLIB/std/wasm.zig	/i64_div_s = 0x7F/;"	field
i64_div_u	$ZIGLIB/std/wasm.zig	/i64_div_u = 0x80/;"	field
i64_eq	$ZIGLIB/std/wasm.zig	/i64_eq = 0x51/;"	field
i64_eqz	$ZIGLIB/std/wasm.zig	/i64_eqz = 0x50/;"	field
i64_extend16_s	$ZIGLIB/std/wasm.zig	/i64_extend16_s = 0xC3/;"	field
i64_extend32_s	$ZIGLIB/std/wasm.zig	/i64_extend32_s = 0xC4/;"	field
i64_extend8_s	$ZIGLIB/std/wasm.zig	/i64_extend8_s = 0xC2/;"	field
i64_extend_i32_s	$ZIGLIB/std/wasm.zig	/i64_extend_i32_s = 0xAC/;"	field
i64_extend_i32_u	$ZIGLIB/std/wasm.zig	/i64_extend_i32_u = 0xAD/;"	field
i64_ge_s	$ZIGLIB/std/wasm.zig	/i64_ge_s = 0x59/;"	field
i64_ge_u	$ZIGLIB/std/wasm.zig	/i64_ge_u = 0x5A/;"	field
i64_gt_s	$ZIGLIB/std/wasm.zig	/i64_gt_s = 0x55/;"	field
i64_gt_u	$ZIGLIB/std/wasm.zig	/i64_gt_u = 0x56/;"	field
i64_le_s	$ZIGLIB/std/wasm.zig	/i64_le_s = 0x57/;"	field
i64_le_u	$ZIGLIB/std/wasm.zig	/i64_le_u = 0x58/;"	field
i64_load	$ZIGLIB/std/wasm.zig	/i64_load = 0x29/;"	field
i64_load16_s	$ZIGLIB/std/wasm.zig	/i64_load16_s = 0x32/;"	field
i64_load16_u	$ZIGLIB/std/wasm.zig	/i64_load16_u = 0x33/;"	field
i64_load32_s	$ZIGLIB/std/wasm.zig	/i64_load32_s = 0x34/;"	field
i64_load32_u	$ZIGLIB/std/wasm.zig	/i64_load32_u = 0x35/;"	field
i64_load8_s	$ZIGLIB/std/wasm.zig	/i64_load8_s = 0x30/;"	field
i64_load8_u	$ZIGLIB/std/wasm.zig	/i64_load8_u = 0x31/;"	field
i64_lt_s	$ZIGLIB/std/wasm.zig	/i64_lt_s = 0x53/;"	field
i64_lt_u	$ZIGLIB/std/wasm.zig	/i64_lt_u = 0x54/;"	field
i64_mul	$ZIGLIB/std/wasm.zig	/i64_mul = 0x7E/;"	field
i64_ne	$ZIGLIB/std/wasm.zig	/i64_ne = 0x52/;"	field
i64_or	$ZIGLIB/std/wasm.zig	/i64_or = 0x84/;"	field
i64_popcnt	$ZIGLIB/std/wasm.zig	/i64_popcnt = 0x7B/;"	field
i64_reinterpret_f64	$ZIGLIB/std/wasm.zig	/i64_reinterpret_f64 = 0xBD/;"	field
i64_rem_s	$ZIGLIB/std/wasm.zig	/i64_rem_s = 0x81/;"	field
i64_rem_u	$ZIGLIB/std/wasm.zig	/i64_rem_u = 0x82/;"	field
i64_rotl	$ZIGLIB/std/wasm.zig	/i64_rotl = 0x89/;"	field
i64_rotr	$ZIGLIB/std/wasm.zig	/i64_rotr = 0x8A/;"	field
i64_shl	$ZIGLIB/std/wasm.zig	/i64_shl = 0x86/;"	field
i64_shr_s	$ZIGLIB/std/wasm.zig	/i64_shr_s = 0x87/;"	field
i64_shr_u	$ZIGLIB/std/wasm.zig	/i64_shr_u = 0x88/;"	field
i64_store	$ZIGLIB/std/wasm.zig	/i64_store = 0x37/;"	field
i64_store16	$ZIGLIB/std/wasm.zig	/i64_store16 = 0x3D/;"	field
i64_store32	$ZIGLIB/std/wasm.zig	/i64_store32 = 0x3E/;"	field
i64_store8	$ZIGLIB/std/wasm.zig	/i64_store8 = 0x3C/;"	field
i64_sub	$ZIGLIB/std/wasm.zig	/i64_sub = 0x7D/;"	field
i64_trunc_f32_s	$ZIGLIB/std/wasm.zig	/i64_trunc_f32_s = 0xAE/;"	field
i64_trunc_f32_u	$ZIGLIB/std/wasm.zig	/i64_trunc_f32_u = 0xAF/;"	field
i64_trunc_f64_s	$ZIGLIB/std/wasm.zig	/i64_trunc_f64_s = 0xB0/;"	field
i64_trunc_f64_u	$ZIGLIB/std/wasm.zig	/i64_trunc_f64_u = 0xB1/;"	field
i64_trunc_sat_f32_s	$ZIGLIB/std/wasm.zig	/i64_trunc_sat_f32_s = 0x04/;"	field
i64_trunc_sat_f32_u	$ZIGLIB/std/wasm.zig	/i64_trunc_sat_f32_u = 0x05/;"	field
i64_trunc_sat_f64_s	$ZIGLIB/std/wasm.zig	/i64_trunc_sat_f64_s = 0x06/;"	field
i64_trunc_sat_f64_u	$ZIGLIB/std/wasm.zig	/i64_trunc_sat_f64_u = 0x07/;"	field
i64_xor	$ZIGLIB/std/wasm.zig	/i64_xor = 0x85/;"	field
i64x2_abs	$ZIGLIB/std/wasm.zig	/i64x2_abs = 0xC0/;"	field
i64x2_add	$ZIGLIB/std/wasm.zig	/i64x2_add = 0xCE/;"	field
i64x2_all_true	$ZIGLIB/std/wasm.zig	/i64x2_all_true = 0xC3/;"	field
i64x2_bitmask	$ZIGLIB/std/wasm.zig	/i64x2_bitmask = 0xC4/;"	field
i64x2_eq	$ZIGLIB/std/wasm.zig	/i64x2_eq = 0xD6/;"	field
i64x2_extend_high_i32x4_s	$ZIGLIB/std/wasm.zig	/i64x2_extend_high_i32x4_s = 0xC8/;"	field
i64x2_extend_high_i32x4_u	$ZIGLIB/std/wasm.zig	/i64x2_extend_high_i32x4_u = 0xCA/;"	field
i64x2_extend_low_i32x4_s	$ZIGLIB/std/wasm.zig	/i64x2_extend_low_i32x4_s = 0xC7/;"	field
i64x2_extend_low_i32x4_u	$ZIGLIB/std/wasm.zig	/i64x2_extend_low_i32x4_u = 0xC9/;"	field
i64x2_extmul_high_i32x4_s	$ZIGLIB/std/wasm.zig	/i64x2_extmul_high_i32x4_s = 0xDD/;"	field
i64x2_extmul_high_i32x4_u	$ZIGLIB/std/wasm.zig	/i64x2_extmul_high_i32x4_u = 0xDF/;"	field
i64x2_extmul_low_i32x4_s	$ZIGLIB/std/wasm.zig	/i64x2_extmul_low_i32x4_s = 0xDC/;"	field
i64x2_extmul_low_i32x4_u	$ZIGLIB/std/wasm.zig	/i64x2_extmul_low_i32x4_u = 0xDE/;"	field
i64x2_extract_lane	$ZIGLIB/std/wasm.zig	/i64x2_extract_lane = 0x1D/;"	field
i64x2_ge_s	$ZIGLIB/std/wasm.zig	/i64x2_ge_s = 0xDB/;"	field
i64x2_gt_s	$ZIGLIB/std/wasm.zig	/i64x2_gt_s = 0xD9/;"	field
i64x2_le_s	$ZIGLIB/std/wasm.zig	/i64x2_le_s = 0xDA/;"	field
i64x2_lt_s	$ZIGLIB/std/wasm.zig	/i64x2_lt_s = 0xD8/;"	field
i64x2_mul	$ZIGLIB/std/wasm.zig	/i64x2_mul = 0xD5/;"	field
i64x2_ne	$ZIGLIB/std/wasm.zig	/i64x2_ne = 0xD7/;"	field
i64x2_neg	$ZIGLIB/std/wasm.zig	/i64x2_neg = 0xC1/;"	field
i64x2_relaxed_laneselect	$ZIGLIB/std/wasm.zig	/i64x2_relaxed_laneselect = 0x10c/;"	field
i64x2_replace_lane	$ZIGLIB/std/wasm.zig	/i64x2_replace_lane = 0x1E/;"	field
i64x2_shl	$ZIGLIB/std/wasm.zig	/i64x2_shl = 0xCB/;"	field
i64x2_shr_s	$ZIGLIB/std/wasm.zig	/i64x2_shr_s = 0xCC/;"	field
i64x2_shr_u	$ZIGLIB/std/wasm.zig	/i64x2_shr_u = 0xCD/;"	field
i64x2_splat	$ZIGLIB/std/wasm.zig	/i64x2_splat = 0x12/;"	field
i64x2_sub	$ZIGLIB/std/wasm.zig	/i64x2_sub = 0xD1/;"	field
i686	$ZIGLIB/std/target/x86.zig	/pub const @"i686" = CpuModel{$/;"	constant
i805	$ZIGLIB/std/target/csky.zig	/pub const @"i805" = CpuModel{$/;"	constant
i805f	$ZIGLIB/std/target/csky.zig	/pub const i805f = CpuModel{$/;"	constant
i8mm	$ZIGLIB/std/target/arm.zig	/i8mm/;"	field
i8x16_abs	$ZIGLIB/std/wasm.zig	/i8x16_abs = 0x60/;"	field
i8x16_add	$ZIGLIB/std/wasm.zig	/i8x16_add = 0x6E/;"	field
i8x16_add_sat_s	$ZIGLIB/std/wasm.zig	/i8x16_add_sat_s = 0x6F/;"	field
i8x16_add_sat_u	$ZIGLIB/std/wasm.zig	/i8x16_add_sat_u = 0x70/;"	field
i8x16_all_true	$ZIGLIB/std/wasm.zig	/i8x16_all_true = 0x63/;"	field
i8x16_avgr_u	$ZIGLIB/std/wasm.zig	/i8x16_avgr_u = 0x7B/;"	field
i8x16_bitmask	$ZIGLIB/std/wasm.zig	/i8x16_bitmask = 0x64/;"	field
i8x16_eq	$ZIGLIB/std/wasm.zig	/i8x16_eq = 0x23/;"	field
i8x16_extract_lane_s	$ZIGLIB/std/wasm.zig	/i8x16_extract_lane_s = 0x15/;"	field
i8x16_extract_lane_u	$ZIGLIB/std/wasm.zig	/i8x16_extract_lane_u = 0x16/;"	field
i8x16_ge_s	$ZIGLIB/std/wasm.zig	/i8x16_ge_s = 0x2B/;"	field
i8x16_ge_u	$ZIGLIB/std/wasm.zig	/i8x16_ge_u = 0x2C/;"	field
i8x16_gt_s	$ZIGLIB/std/wasm.zig	/i8x16_gt_s = 0x27/;"	field
i8x16_gt_u	$ZIGLIB/std/wasm.zig	/i8x16_gt_u = 0x28/;"	field
i8x16_le_s	$ZIGLIB/std/wasm.zig	/i8x16_le_s = 0x29/;"	field
i8x16_le_u	$ZIGLIB/std/wasm.zig	/i8x16_le_u = 0x2A/;"	field
i8x16_lt_s	$ZIGLIB/std/wasm.zig	/i8x16_lt_s = 0x25/;"	field
i8x16_lt_u	$ZIGLIB/std/wasm.zig	/i8x16_lt_u = 0x26/;"	field
i8x16_max_s	$ZIGLIB/std/wasm.zig	/i8x16_max_s = 0x78/;"	field
i8x16_max_u	$ZIGLIB/std/wasm.zig	/i8x16_max_u = 0x79/;"	field
i8x16_min_s	$ZIGLIB/std/wasm.zig	/i8x16_min_s = 0x76/;"	field
i8x16_min_u	$ZIGLIB/std/wasm.zig	/i8x16_min_u = 0x77/;"	field
i8x16_narrow_i16x8_s	$ZIGLIB/std/wasm.zig	/i8x16_narrow_i16x8_s = 0x65/;"	field
i8x16_narrow_i16x8_u	$ZIGLIB/std/wasm.zig	/i8x16_narrow_i16x8_u = 0x66/;"	field
i8x16_ne	$ZIGLIB/std/wasm.zig	/i8x16_ne = 0x24/;"	field
i8x16_neg	$ZIGLIB/std/wasm.zig	/i8x16_neg = 0x61/;"	field
i8x16_popcnt	$ZIGLIB/std/wasm.zig	/i8x16_popcnt = 0x62/;"	field
i8x16_relaxed_laneselect	$ZIGLIB/std/wasm.zig	/i8x16_relaxed_laneselect = 0x109/;"	field
i8x16_relaxed_swizzle	$ZIGLIB/std/wasm.zig	/i8x16_relaxed_swizzle = 0x100/;"	field
i8x16_replace_lane	$ZIGLIB/std/wasm.zig	/i8x16_replace_lane = 0x17/;"	field
i8x16_shl	$ZIGLIB/std/wasm.zig	/i8x16_shl = 0x6B/;"	field
i8x16_shr_s	$ZIGLIB/std/wasm.zig	/i8x16_shr_s = 0x6C/;"	field
i8x16_shr_u	$ZIGLIB/std/wasm.zig	/i8x16_shr_u = 0x6D/;"	field
i8x16_shuffle	$ZIGLIB/std/wasm.zig	/i8x16_shuffle = 0x0D/;"	field
i8x16_splat	$ZIGLIB/std/wasm.zig	/i8x16_splat = 0x0F/;"	field
i8x16_sub	$ZIGLIB/std/wasm.zig	/i8x16_sub = 0x71/;"	field
i8x16_sub_sat_s	$ZIGLIB/std/wasm.zig	/i8x16_sub_sat_s = 0x72/;"	field
i8x16_sub_sat_u	$ZIGLIB/std/wasm.zig	/i8x16_sub_sat_u = 0x73/;"	field
i8x16_swizzle	$ZIGLIB/std/wasm.zig	/i8x16_swizzle = 0x0E/;"	field
iAddressCount	$ZIGLIB/std/os/windows/ws2_32.zig	/iAddressCount: i32/;"	field
iAddressFamily	$ZIGLIB/std/os/windows/ws2_32.zig	/iAddressFamily: c_int/;"	field
iErrorCode	$ZIGLIB/std/os/windows/ws2_32.zig	/iErrorCode: [10]i32/;"	field
iLayerType	$ZIGLIB/std/os/windows/gdi32.zig	/iLayerType: BYTE/;"	field
iMaxSockAddr	$ZIGLIB/std/os/windows/ws2_32.zig	/iMaxSockAddr: c_int/;"	field
iMaxSockets	$ZIGLIB/std/os/windows/ws2_32.zig	/iMaxSockets: u16/;"	field
iMaxUdpDg	$ZIGLIB/std/os/windows/ws2_32.zig	/iMaxUdpDg: u16/;"	field
iMinSockAddr	$ZIGLIB/std/os/windows/ws2_32.zig	/iMinSockAddr: c_int/;"	field
iNetworkByteOrder	$ZIGLIB/std/os/windows/ws2_32.zig	/iNetworkByteOrder: c_int/;"	field
iPAddress	$ZIGLIB/std/crypto/Certificate.zig	/iPAddress = 7/;"	field
iPackedType	$ZIGLIB/std/mem.zig	/const iPackedType = std.meta.Int(.signed, @bitSizeOf(PackedType))/;"	constant
iPixelType	$ZIGLIB/std/os/windows/gdi32.zig	/iPixelType: BYTE/;"	field
iProtocol	$ZIGLIB/std/os/windows/ws2_32.zig	/iProtocol: c_int/;"	field
iProtocolMaxOffset	$ZIGLIB/std/os/windows/ws2_32.zig	/iProtocolMaxOffset: c_int/;"	field
iSecurityScheme	$ZIGLIB/std/os/windows/ws2_32.zig	/iSecurityScheme: c_int/;"	field
iSockaddrLength	$ZIGLIB/std/os/windows/ws2_32.zig	/iSockaddrLength: i32/;"	field
iSocketType	$ZIGLIB/std/os/windows/ws2_32.zig	/iSocketType: c_int/;"	field
iVersion	$ZIGLIB/std/os/windows/ws2_32.zig	/iVersion: c_int/;"	field
i_key_pad	$ZIGLIB/std/crypto/hmac.zig	/var i_key_pad: [Hash.block_length]u8 = undefined/;"	variable
icache_line_size	$ZIGLIB/compiler_rt/clear_cache.zig	/const icache_line_size: usize = @as(usize, 4) << @intCast(u6, (ctr_el0 >> 0) & 15)/;"	constant
icbt	$ZIGLIB/std/target/powerpc.zig	/icbt/;"	field
icelake_client	$ZIGLIB/std/target/x86.zig	/pub const icelake_client = CpuModel{$/;"	constant
icelake_server	$ZIGLIB/std/target/x86.zig	/pub const icelake_server = CpuModel{$/;"	constant
iceland	$ZIGLIB/std/target/amdgpu.zig	/pub const iceland = CpuModel{$/;"	constant
icmp_type_count	$ZIGLIB/std/os/uefi/protocols/ip6_protocol.zig	/icmp_type_count: u32/;"	field
icmp_type_list	$ZIGLIB/std/os/uefi/protocols/ip6_protocol.zig	/icmp_type_list: [*]Ip6IcmpType/;"	field
id_t	$ZIGLIB/std/c/solaris.zig	/^pub const id_t = i32/;"	constant
idempotent	$ZIGLIB/std/http.zig	/pub fn idempotent(self: Method) bool {$/;"	function
ident	$ZIGLIB/std/zig/render.zig	/const ident = payload_token + @boolToInt(token_tags[payload_token] == .asterisk)/;"	constant
identOffset	$ZIGLIB/std/macho.zig	/identOffset: u32/;"	field
ident_slice	$ZIGLIB/std/zig/Parse.zig	/const ident_slice = p.source[p.token_starts[ident]..p.token_starts[ident + 1]]/;"	constant
identifier	$ZIGLIB/std/zig/tokenizer.zig	/identifier/;"	field
identifier_case	$ZIGLIB/std/dwarf/AT.zig	/^pub const identifier_case = 0x42/;"	constant
identity	$ZIGLIB/std/zig/c_translation.zig	/fn identity(self: c_uint) c_uint {$/;"	function
identityElement	$ZIGLIB/std/crypto/pcurves/secp256k1.zig	/pub const identityElement = Secp256k1{ .x = Fe.zero, .y = Fe.one, .z = Fe.zero }/;"	constant
idivl_to_divb	$ZIGLIB/std/target/x86.zig	/idivl_to_divb/;"	field
idivq_to_divl	$ZIGLIB/std/target/x86.zig	/idivq_to_divl/;"	field
idle	$ZIGLIB/std/os/linux/syscalls.zig	/idle = Linux + 112/;"	field
idrss	$ZIGLIB/std/os/linux.zig	/idrss: isize/;"	field
iextdefsym	$ZIGLIB/std/macho.zig	/iextdefsym: u32 = 0/;"	field
ifFull	$ZIGLIB/std/zig/Ast.zig	/^pub fn ifFull(tree: Ast, node: Node.Index) full.If {$/;"	function
ifSimple	$ZIGLIB/std/zig/Ast.zig	/^pub fn ifSimple(tree: Ast, node: Node.Index) full.If {$/;"	function
if_name	$ZIGLIB/std/net.zig	/var if_name: [os.IFNAMESIZE:0]u8 = undefined/;"	variable
if_nametoindex	$ZIGLIB/std/net.zig	/^fn if_nametoindex(name: []const u8) !u32 {$/;"	function
if_simple	$ZIGLIB/std/zig/Ast.zig	/if_simple/;"	field
if_slice	$ZIGLIB/std/net.zig	/const if_slice = if_name[0..name.len :0]/;"	constant
if_token	$ZIGLIB/std/zig/Parse.zig	/const if_token = p.eatToken(.keyword_if) orelse return null_node/;"	constant
if_type	$ZIGLIB/std/os/uefi/protocols/simple_network_protocol.zig	/if_type: u8/;"	field
ifindex	$ZIGLIB/std/os/linux.zig	/ifindex: u32/;"	field
ifinfo_req	$ZIGLIB/std/c/solaris.zig	/ifinfo_req: lif_ifinfo_req/;"	field
ifinfomsg	$ZIGLIB/std/os/linux.zig	/^pub const ifinfomsg = extern struct {$/;"	struct
iflag	$ZIGLIB/std/os/linux.zig	/iflag: tcflag_t/;"	field
ifmap	$ZIGLIB/std/os/linux.zig	/^pub const ifmap = extern struct {$/;"	struct
ifreq	$ZIGLIB/std/os/linux.zig	/^pub const ifreq = extern struct {$/;"	struct
ifrn	$ZIGLIB/std/os/linux.zig	/ifrn: extern union {$/;"	field
ifru	$ZIGLIB/std/os/linux.zig	/ifru: extern union {$/;"	field
ignore	$ZIGLIB/std/tar.zig	/ignore/;"	field
ignore_unknown_fields	$ZIGLIB/std/json.zig	/ignore_unknown_fields: bool = false/;"	field
ignored_pages	$ZIGLIB/std/c/haiku.zig	/ignored_pages: u64/;"	field
iix0	$ZIGLIB/compiler_rt/sqrt.zig	/var iix0 = @intCast(i32, ix0)/;"	variable
ijmpcall	$ZIGLIB/std/target/avr.zig	/ijmpcall/;"	field
ilen	$ZIGLIB/std/os.zig	/const ilen = @bitCast(i64, length)/;"	constant
illegal_parameter	$ZIGLIB/std/crypto/tls.zig	/illegal_parameter = 47/;"	field
ilocalsym	$ZIGLIB/std/macho.zig	/ilocalsym: u32 = 0/;"	field
ilogb	$ZIGLIB/std/math/ilogb.zig	/^pub fn ilogb(x: anytype) i32 {$/;"	function
ilogbX	$ZIGLIB/std/math/ilogb.zig	/^fn ilogbX(comptime T: type, x: T) i32 {$/;"	function
ilogbw	$ZIGLIB/compiler_rt/divc3.zig	/const ilogbw = if (logbw_finite) b: {$/;"	constant
im_num	$ZIGLIB/std/math/complex.zig	/const im_num = self.im * other.re - self.re * other.im/;"	constant
im_used	$ZIGLIB/std/http.zig	/im_used = 226/;"	field
imag	$ZIGLIB/compiler_rt/mulc3.zig	/imag: T/;"	field
image_base	$ZIGLIB/std/os/uefi/protocols/loaded_image_protocol.zig	/image_base: [*]u8/;"	field
image_code_type	$ZIGLIB/std/os/uefi/protocols/loaded_image_protocol.zig	/image_code_type: MemoryType/;"	field
image_count	$ZIGLIB/std/debug.zig	/const image_count = std.c._dyld_image_count()/;"	constant
image_data_type	$ZIGLIB/std/os/uefi/protocols/loaded_image_protocol.zig	/image_data_type: MemoryType/;"	field
image_gather4_d16_bug	$ZIGLIB/std/target/amdgpu.zig	/image_gather4_d16_bug/;"	field
image_info	$ZIGLIB/std/c/haiku.zig	/^pub const image_info = extern struct {$/;"	struct
image_insts	$ZIGLIB/std/target/amdgpu.zig	/image_insts/;"	field
image_path_name	$ZIGLIB/std/fs.zig	/const image_path_name = &os.windows.peb().ProcessParameters.ImagePathName/;"	constant
image_size	$ZIGLIB/std/os/uefi/protocols/loaded_image_protocol.zig	/image_size: u64/;"	field
image_store_d16_bug	$ZIGLIB/std/target/amdgpu.zig	/image_store_d16_bug/;"	field
image_type	$ZIGLIB/std/c/haiku.zig	/image_type: u32/;"	field
images	$ZIGLIB/std/os/uefi/protocols/hii.zig	/pub const images: u8 = 0x6/;"	constant
imaginary_float	$ZIGLIB/std/dwarf/ATE.zig	/^pub const imaginary_float = 0x9/;"	constant
img_base	$ZIGLIB/std/os/linux/tls.zig	/var img_base: usize = 0/;"	variable
imm_or_reg	$ZIGLIB/std/os/linux/bpf.zig	/const imm_or_reg = if (@TypeOf(src) == Reg or @typeInfo(@TypeOf(src)) == .EnumLiteral)$/;"	constant
imm_reg	$ZIGLIB/std/os/linux/bpf.zig	/fn imm_reg(code: u8, dst: Reg, src: anytype, off: i16) Insn {$/;"	function
immutable_type	$ZIGLIB/std/dwarf/TAG.zig	/^pub const immutable_type = 0x4b/;"	constant
impl	$ZIGLIB/std/sort.zig	/const impl = struct {$/;"	struct
implementer	$ZIGLIB/std/zig/system/linux.zig	/implementer: u8 = 0/;"	field
implicitBit	$ZIGLIB/compiler_rt/divtf3.zig	/const implicitBit = (@as(Z, 1) << significandBits)/;"	constant
implicit_bit	$ZIGLIB/compiler_rt/int_to_float.zig	/const implicit_bit = if (T != f80) @as(uT, 1) << fractional_bits else 0/;"	constant
implicit_const	$ZIGLIB/std/dwarf/FORM.zig	/^pub const implicit_const = 0x21/;"	constant
implicit_pointer	$ZIGLIB/std/dwarf/OP.zig	/^pub const implicit_pointer = 0xa0/;"	constant
implicit_value	$ZIGLIB/std/dwarf/OP.zig	/^pub const implicit_value = 0x9e/;"	constant
import	$ZIGLIB/std/wasm.zig	/import/;"	field
import_address_table_rva	$ZIGLIB/std/coff.zig	/import_address_table_rva: u32/;"	field
import_lookup_table_rva	$ZIGLIB/std/coff.zig	/import_lookup_table_rva: u32/;"	field
import_memory	$ZIGLIB/std/Build/CompileStep.zig	/^import_memory: bool = false/;"	field
import_name	$ZIGLIB/std/Build/CheckObjectStep.zig	/const import_name = blk: {$/;"	constant
import_symbols	$ZIGLIB/std/Build/CompileStep.zig	/^import_symbols: bool = false/;"	field
import_table	$ZIGLIB/std/Build/CompileStep.zig	/^import_table: bool = false/;"	field
imported_declaration	$ZIGLIB/std/dwarf/TAG.zig	/^pub const imported_declaration = 0x08/;"	constant
imported_module	$ZIGLIB/std/dwarf/TAG.zig	/^pub const imported_module = 0x3a/;"	constant
imported_unit	$ZIGLIB/std/dwarf/TAG.zig	/^pub const imported_unit = 0x3d/;"	constant
imports	$ZIGLIB/std/Build/CheckObjectStep.zig	/var imports = std.ArrayList([]const u8).init(gpa)/;"	variable
in6_addr	$ZIGLIB/std/c/windows.zig	/^pub const in6_addr = [16]u8/;"	constant
inArr	$ZIGLIB/std/mem.zig	/const inArr: u32 align(16) = 0xDEADBEEF/;"	constant
inIndex	$ZIGLIB/std/json.zig	/var inIndex: usize = 0/;"	variable
inPtr	$ZIGLIB/std/mem.zig	/const inPtr = @ptrCast(*align(16) const volatile u32, &inArr)/;"	constant
inSlice	$ZIGLIB/std/mem.zig	/const inSlice = @ptrCast(*align(16) const volatile [4]u8, &inArr)[0..]/;"	constant
in_actual_set	$ZIGLIB/std/Build.zig	/const in_actual_set = selected_cpu.features.isEnabled(i)/;"	constant
in_addr	$ZIGLIB/std/c/windows.zig	/^pub const in_addr = u32/;"	constant
in_batch	$ZIGLIB/std/os/linux/bpf.zig	/in_batch: u64/;"	field
in_bits	$ZIGLIB/std/io/bit_writer.zig	/var in_bits = bits/;"	variable
in_bpf_program	$ZIGLIB/std/os/linux/bpf/kern.zig	/^const in_bpf_program = switch (builtin.cpu.arch) {$/;"	constant
in_bucket_range	$ZIGLIB/std/heap/general_purpose_allocator.zig	/const in_bucket_range = (addr >= @ptrToInt(bucket.page) and$/;"	constant
in_buffer	$ZIGLIB/std/io/bit_writer.zig	/var in_buffer = switch (endian) {$/;"	variable
in_count	$ZIGLIB/std/c/haiku.zig	/in_count: u32/;"	field
in_cpu_set	$ZIGLIB/std/Build.zig	/const in_cpu_set = populated_cpu_features.isEnabled(i)/;"	constant
in_daylight	$ZIGLIB/std/os/uefi.zig	/in_daylight: bool/;"	field
in_fbs	$ZIGLIB/std/fifo.zig	/var in_fbs = std.io.fixedBufferStream("pump test")/;"	variable
in_fd	$ZIGLIB/std/fs/file.zig	/const in_fd = in_file.handle/;"	constant
in_file	$ZIGLIB/std/pdb.zig	/in_file: File = undefined/;"	field
in_i	$ZIGLIB/std/fmt.zig	/var in_i: usize = 0/;"	variable
in_index	$ZIGLIB/std/compress/deflate/huffman_bit_writer.zig	/var in_index: u32 = 1/;"	variable
in_len	$ZIGLIB/std/os/windows.zig	/const in_len = if (in) |i| @intCast(ULONG, i.len) else 0/;"	constant
in_off	$ZIGLIB/std/fs/file.zig	/var in_off = in_offset/;"	variable
in_offset	$ZIGLIB/std/fs/file.zig	/in_offset: u64 = 0/;"	field
in_port_t	$ZIGLIB/std/os/linux.zig	/^pub const in_port_t = u16/;"	constant
in_ptr	$ZIGLIB/std/os/windows.zig	/const in_ptr = if (in) |i| i.ptr else null/;"	constant
in_quote	$ZIGLIB/std/process.zig	/var in_quote = false/;"	variable
in_reader	$ZIGLIB/std/compress/zlib.zig	/in_reader: ReaderType/;"	field
in_stack_buffer	$ZIGLIB/std/crypto/tls/Client.zig	/var in_stack_buffer: [max_ciphertext_len * 4]u8 = undefined/;"	variable
in_stream	$ZIGLIB/std/tz.zig	/var in_stream = std.io.fixedBufferStream(data)/;"	variable
inactive_union_field	$ZIGLIB/std/builtin.zig	/pub const inactive_union_field = "access of inactive union field"/;"	constant
inappropriate_fallback	$ZIGLIB/std/crypto/tls.zig	/inappropriate_fallback = 86/;"	field
inblock	$ZIGLIB/std/os/linux.zig	/inblock: isize/;"	field
inc_addr	$ZIGLIB/std/dwarf.zig	/const inc_addr = minimum_instruction_length * (adjusted_opcode \/ line_range)/;"	constant
inc_line	$ZIGLIB/std/dwarf.zig	/const inc_line = @as(i32, line_base) + @as(i32, adjusted_opcode % line_range)/;"	constant
include_dir	$ZIGLIB/std/Build.zig	/include_dir: ?[]const u8 = null/;"	field
include_directories	$ZIGLIB/std/dwarf.zig	/var include_directories = std.ArrayList(FileEntry).init(arena)/;"	variable
include_dirs	$ZIGLIB/std/zig/system/NativePaths.zig	/^include_dirs: ArrayList([:0]u8)/;"	field
include_guard_name	$ZIGLIB/std/Build/ConfigHeaderStep.zig	/const include_guard_name = try output.allocator.dupe(u8, include_path)/;"	constant
include_path	$ZIGLIB/std/zig/system/NativePaths.zig	/const include_path = it.next() orelse {$/;"	constant
includesVersion	$ZIGLIB/std/target.zig	/pub fn includesVersion(self: Range, ver: WindowsVersion) bool {$/;"	function
incomplete_byte	$ZIGLIB/std/io/bit_reader.zig	/const incomplete_byte = @boolToInt(out_bits_total % u8_bit_count > 0)/;"	constant
incorrect_alignment	$ZIGLIB/std/builtin.zig	/pub const incorrect_alignment = "incorrect alignment"/;"	constant
incr	$ZIGLIB/std/once.zig	/^fn incr() void {$/;"	function
increaseByTen	$ZIGLIB/std/event/group.zig	/^fn increaseByTen(count: *usize) callconv(.Async) void {$/;"	function
increase_by_ten_frame	$ZIGLIB/std/event/group.zig	/var increase_by_ten_frame = async increaseByTen(&count)/;"	variable
increment_exp	$ZIGLIB/std/math/isnormal.zig	/const increment_exp = 1 << math.floatMantissaBits(T)/;"	constant
indent	$ZIGLIB/std/json/write_stream.zig	/fn indent(self: *Self) !void {$/;"	function
indent_count	$ZIGLIB/std/zig/render.zig	/indent_count: usize = 0/;"	field
indent_current	$ZIGLIB/std/zig/render.zig	/var indent_current: usize = 0/;"	variable
indent_delta	$ZIGLIB/std/zig/render.zig	/indent_delta: usize/;"	field
indent_else_expr	$ZIGLIB/std/zig/render.zig	/const indent_else_expr = indent_then_expr and$/;"	constant
indent_level	$ZIGLIB/std/json.zig	/indent_level: usize = 0/;"	field
indent_next_line	$ZIGLIB/std/zig/render.zig	/indent_next_line: usize = 0/;"	field
indent_one_shot_count	$ZIGLIB/std/zig/render.zig	/indent_one_shot_count: usize = 0/;"	field
indent_then_expr	$ZIGLIB/std/zig/render.zig	/const indent_then_expr = !then_expr_is_block and$/;"	constant
index	$ZIGLIB/std/zig/tokenizer.zig	/index: usize/;"	field
index2	$ZIGLIB/std/priority_dequeue.zig	/const index2 = first_grandchild_index + 1/;"	constant
index3	$ZIGLIB/std/priority_dequeue.zig	/const index3 = index2 + 1/;"	constant
indexA	$ZIGLIB/std/sort.zig	/var indexA = buffer1.start/;"	variable
indexAlpha	$ZIGLIB/std/crypto/argon2.zig	/^fn indexAlpha($/;"	function
indexCount	$ZIGLIB/std/macho.zig	/indexCount: u32/;"	field
indexOf	$ZIGLIB/std/mem.zig	/^pub fn indexOf(comptime T: type, haystack: []const T, needle: []const T) ?usize {$/;"	function
indexOfAny	$ZIGLIB/std/mem.zig	/^pub fn indexOfAny(comptime T: type, slice: []const T, values: []const T) ?usize {$/;"	function
indexOfAnyPos	$ZIGLIB/std/mem.zig	/^pub fn indexOfAnyPos(comptime T: type, slice: []const T, start_index: usize, values: []const T) ?usize {$/;"	function
indexOfDiff	$ZIGLIB/std/mem.zig	/^pub fn indexOfDiff(comptime T: type, a: []const T, b: []const T) ?usize {$/;"	function
indexOfIgnoreCase	$ZIGLIB/std/ascii.zig	/^pub fn indexOfIgnoreCase(haystack: []const u8, needle: []const u8) ?usize {$/;"	function
indexOfIgnoreCasePos	$ZIGLIB/std/ascii.zig	/^pub fn indexOfIgnoreCasePos(haystack: []const u8, start_index: usize, needle: []const u8) ?usize {$/;"	function
indexOfIgnoreCasePosLinear	$ZIGLIB/std/ascii.zig	/^pub fn indexOfIgnoreCasePosLinear(haystack: []const u8, start_index: usize, needle: []const u8) ?usize {$/;"	function
indexOfMax	$ZIGLIB/std/mem.zig	/^pub fn indexOfMax(comptime T: type, slice: []const T) usize {$/;"	function
indexOfMin	$ZIGLIB/std/mem.zig	/^pub fn indexOfMin(comptime T: type, slice: []const T) usize {$/;"	function
indexOfMinMax	$ZIGLIB/std/mem.zig	/^pub fn indexOfMinMax(comptime T: type, slice: []const T) struct { index_min: usize, index_max: usize } {$/;"	function
indexOfPos	$ZIGLIB/std/mem.zig	/^pub fn indexOfPos(comptime T: type, haystack: []const T, start_index: usize, needle: []const T) ?usize {$/;"	function
indexOfPosLinear	$ZIGLIB/std/mem.zig	/^pub fn indexOfPosLinear(comptime T: type, haystack: []const T, start_index: usize, needle: []const T) ?usize {$/;"	function
indexOfScalar	$ZIGLIB/std/mem.zig	/^pub fn indexOfScalar(comptime T: type, slice: []const T, value: T) ?usize {$/;"	function
indexOfScalarPos	$ZIGLIB/std/mem.zig	/^pub fn indexOfScalarPos(comptime T: type, slice: []const T, start_index: usize, value: T) ?usize {$/;"	function
indexOfSentinel	$ZIGLIB/std/mem.zig	/^pub fn indexOfSentinel(comptime Elem: type, comptime sentinel: Elem, ptr: [*:sentinel]const Elem) usize {$/;"	function
indexSectionOffset	$ZIGLIB/std/macho.zig	/indexSectionOffset: u32/;"	field
indexTokens	$ZIGLIB/std/compress/deflate/huffman_bit_writer.zig	/fn indexTokens(self: *Self, tokens: []const token.Token) TotalIndexedTokens {$/;"	function
index_buf	$ZIGLIB/std/cstr.zig	/const index_buf = mem.bytesAsSlice(?[*]u8, buf)/;"	constant
index_capacities	$ZIGLIB/std/array_hash_map.zig	/^const index_capacities = blk: {$/;"	constant
index_expr	$ZIGLIB/std/zig/Parse.zig	/const index_expr = try p.expectExpr()/;"	constant
index_fmt	$ZIGLIB/std/testing.zig	/const index_fmt = if (T == u8) "0x{X}" else "{}"/;"	constant
index_header	$ZIGLIB/std/array_hash_map.zig	/index_header: ?*IndexHeader = null/;"	field
index_info	$ZIGLIB/std/rand.zig	/const index_info = @typeInfo(Index).Int/;"	constant
index_locked	$ZIGLIB/compiler_rt/emutls.zig	/const index_locked = self.object.index/;"	constant
index_lockless	$ZIGLIB/compiler_rt/emutls.zig	/const index_lockless = @atomicLoad(usize, &self.object.index, .Acquire)/;"	constant
index_max	$ZIGLIB/std/mem.zig	/index_max: usize/;"	field
index_min	$ZIGLIB/std/mem.zig	/index_min: usize/;"	field
index_out_of_bounds	$ZIGLIB/std/builtin.zig	/pub const index_out_of_bounds = "index out of bounds"/;"	constant
index_param	$ZIGLIB/std/hash_map.zig	/const index_param = if (is_array) ", b_index: usize" else ""/;"	constant
index_size	$ZIGLIB/std/cstr.zig	/const index_size = @sizeOf(usize) * new_len/;"	constant
index_type	$ZIGLIB/std/os/linux/bpf/btf.zig	/index_type: u32/;"	field
indexable_outside_of_bounds	$ZIGLIB/std/testing.zig	/const indexable_outside_of_bounds = @as([]const array_info.child, &expected)/;"	constant
indexes	$ZIGLIB/std/array_hash_map.zig	/fn indexes(header: *IndexHeader, comptime I: type) []Index(I) {$/;"	function
indexes_cap	$ZIGLIB/std/array_hash_map.zig	/const indexes_cap = header.capacity()/;"	constant
indexes_offset	$ZIGLIB/std/crypto/Certificate/Bundle/macos.zig	/indexes_offset: u32/;"	field
indices	$ZIGLIB/std/simd.zig	/const indices = comptime iota(i32, vec_len) * @splat(vec_len, @intCast(i32, vec_count)) + @splat(vec_len, @intCast(i32, i))/;"	constant
indirect	$ZIGLIB/std/dwarf/FORM.zig	/^pub const indirect = 0x16/;"	constant
indirectsymoff	$ZIGLIB/std/macho.zig	/indirectsymoff: u32 = 0/;"	field
indr	$ZIGLIB/std/macho.zig	/pub fn indr(sym: nlist_64) bool {$/;"	function
inexact	$ZIGLIB/compiler_rt/mulf3.zig	/var inexact = false/;"	variable
infRep	$ZIGLIB/compiler_rt/mulf3.zig	/const infRep = @bitCast(Z, math.inf(T))/;"	constant
infT	$ZIGLIB/compiler_rt/comparef.zig	/const infT = comptime std.math.inf(T)/;"	constant
inf_f128	$ZIGLIB/std/math.zig	/^pub const inf_f128 = inf(f128)/;"	constant
inf_f16	$ZIGLIB/std/math.zig	/^pub const inf_f16 = inf(f16)/;"	constant
inf_f32	$ZIGLIB/std/math.zig	/^pub const inf_f32 = inf(f32)/;"	constant
inf_f64	$ZIGLIB/std/math.zig	/^pub const inf_f64 = inf(f64)/;"	constant
inf_f80	$ZIGLIB/std/math.zig	/^pub const inf_f80 = inf(f80)/;"	constant
inf_u128	$ZIGLIB/std/math.zig	/^pub const inf_u128 = @bitCast(u128, inf_f128)/;"	constant
inf_u16	$ZIGLIB/std/math.zig	/^pub const inf_u16 = @bitCast(u16, inf_f16)/;"	constant
inf_u32	$ZIGLIB/std/math.zig	/^pub const inf_u32 = @bitCast(u32, inf_f32)/;"	constant
inf_u64	$ZIGLIB/std/math.zig	/^pub const inf_u64 = @bitCast(u64, inf_f64)/;"	constant
inf_val	$ZIGLIB/compiler_rt/fmod.zig	/const inf_val = math.inf(f64)/;"	constant
inf_value	$ZIGLIB/std/math.zig	/const inf_value = comptime inf(T)/;"	constant
inferred_types	$ZIGLIB/std/json.zig	/const inferred_types = [_]type{}/;"	constant
infinite_power	$ZIGLIB/std/fmt/parse_float/convert_slow.zig	/const infinite_power = (1 << math.floatExponentBits(T)) - 1/;"	constant
infix	$ZIGLIB/std/zig/render.zig	/const infix = datas[node]/;"	constant
inflater	$ZIGLIB/std/compress/zlib.zig	/inflater: deflate.Decompressor(ReaderType)/;"	field
info	$ZIGLIB/std/zig/system/linux.zig	/const info = &self.cores[self.core_no]/;"	constant
info_access	$ZIGLIB/std/crypto/Certificate.zig	/info_access/;"	field
info_count	$ZIGLIB/std/os/darwin.zig	/var info_count = std.c.TASK_VM_INFO_COUNT/;"	variable
info_len	$ZIGLIB/std/os/linux/bpf.zig	/info_len: u32/;"	field
informational	$ZIGLIB/std/http.zig	/informational/;"	field
infos	$ZIGLIB/std/meta.zig	/const infos = comptime [_]Type.Declaration{$/;"	constant
inherit	$ZIGLIB/std/os/posix_spawn.zig	/pub fn inherit(self: *Actions, fd: fd_t) Error!void {$/;"	function
inherit_stat	$ZIGLIB/std/os/linux.zig	/inherit_stat: bool = false/;"	field
inheritable	$ZIGLIB/std/os/linux.zig	/inheritable: u32/;"	field
inheritance	$ZIGLIB/std/dwarf/TAG.zig	/^pub const inheritance = 0x1c/;"	constant
inheriting	$ZIGLIB/std/fs.zig	/const inheriting: w.rights_t = w.RIGHT.ALL ^ w.RIGHT.SOCK_SHUTDOWN/;"	constant
init	$ZIGLIB/std/zig/tokenizer.zig	/pub fn init(buffer: [:0]const u8) Tokenizer {$/;"	function
initAllTo	$ZIGLIB/std/packed_int_array.zig	/pub fn initAllTo(int: Int) Self {$/;"	function
initAndFill	$ZIGLIB/std/crypto/tlcsprng.zig	/^fn initAndFill(buffer: []u8) void {$/;"	function
initBlocks	$ZIGLIB/std/crypto/argon2.zig	/^fn initBlocks($/;"	function
initCapacity	$ZIGLIB/std/math/big/int.zig	/pub fn initCapacity(allocator: Allocator, capacity: usize) !Managed {$/;"	function
initComptime	$ZIGLIB/std/unicode.zig	/pub fn initComptime(comptime s: []const u8) Utf8View {$/;"	function
initContext	$ZIGLIB/std/hash_map.zig	/pub fn initContext(allocator: Allocator, ctx: Context) Self {$/;"	function
initDec	$ZIGLIB/std/crypto/aes/soft.zig	/pub fn initDec(key: [key_bits \/ 8]u8) AesDecryptCtx(Aes256) {$/;"	function
initDefault	$ZIGLIB/std/enums.zig	/pub fn initDefault(comptime default: ?V, init_values: EnumFieldStruct(E, V, default)) Self {$/;"	function
initDeflate	$ZIGLIB/std/compress/deflate/compressor.zig	/fn initDeflate(self: *Self) !void {$/;"	function
initDynamic	$ZIGLIB/std/http/Client.zig	/pub fn initDynamic(max: usize) Response {$/;"	function
initEmpty	$ZIGLIB/std/enums.zig	/pub fn initEmpty() Self {$/;"	function
initEnc	$ZIGLIB/std/crypto/aes/soft.zig	/pub fn initEnc(key: [key_bits \/ 8]u8) AesEncryptCtx(Aes256) {$/;"	function
initEventLoopAndCallMain	$ZIGLIB/std/start.zig	/^inline fn initEventLoopAndCallMain() u8 {$/;"	function
initEventLoopAndCallWinMain	$ZIGLIB/std/start.zig	/^inline fn initEventLoopAndCallWinMain() std.os.windows.INT {$/;"	function
initFill	$ZIGLIB/std/enums.zig	/pub fn initFill(v: Value) Self {$/;"	function
initForBlockCount	$ZIGLIB/std/crypto/ghash_polyval.zig	/pub fn initForBlockCount(key: *const [key_length]u8, block_count: usize) Self {$/;"	function
initFromEnc	$ZIGLIB/std/crypto/aes/soft.zig	/pub fn initFromEnc(ctx: AesEncryptCtx(Aes)) Self {$/;"	function
initFull	$ZIGLIB/std/enums.zig	/pub fn initFull(value: V) Self {$/;"	function
initFullWith	$ZIGLIB/std/enums.zig	/pub fn initFullWith(init_values: EnumFieldStruct(E, V, @as(?V, null))) Self {$/;"	function
initFullWithDefault	$ZIGLIB/std/enums.zig	/pub fn initFullWithDefault(comptime default: ?V, init_values: EnumFieldStruct(E, V, default)) Self {$/;"	function
initHash	$ZIGLIB/std/crypto/argon2.zig	/^fn initHash($/;"	function
initIp4	$ZIGLIB/std/net.zig	/pub fn initIp4(addr: [4]u8, port: u16) Address {$/;"	function
initIp6	$ZIGLIB/std/net.zig	/pub fn initIp6(addr: [16]u8, port: u16, flowinfo: u32, scope_id: u32) Address {$/;"	function
initKdf	$ZIGLIB/std/crypto/blake3.zig	/pub fn initKdf(context: []const u8, options: KdfOptions) Blake3 {$/;"	function
initLocked	$ZIGLIB/std/event/lock.zig	/pub fn initLocked() Lock {$/;"	function
initMetadatas	$ZIGLIB/std/hash_map.zig	/fn initMetadatas(self: *Self) void {$/;"	function
initMultiThreaded	$ZIGLIB/std/event/loop.zig	/pub fn initMultiThreaded(self: *Loop) !void {$/;"	function
initNoOp	$ZIGLIB/std/Build/Step.zig	/^pub fn initNoOp(id: Id, name: []const u8, allocator: Allocator) Step {$/;"	function
initOsData	$ZIGLIB/std/event/loop.zig	/fn initOsData(self: *Loop, extra_thread_count: usize) InitOsDataError!void {$/;"	function
initPosix	$ZIGLIB/std/net.zig	/pub fn initPosix(addr: *align(4) const os.sockaddr) Address {$/;"	function
initPreheated	$ZIGLIB/std/heap/memory_pool.zig	/pub fn initPreheated(allocator: std.mem.Allocator, initial_size: usize) MemoryPoolError!Pool {$/;"	function
initSet	$ZIGLIB/std/math/big/int.zig	/pub fn initSet(allocator: Allocator, value: anytype) !Managed {$/;"	function
initSingleThreaded	$ZIGLIB/std/event/loop.zig	/pub fn initSingleThreaded(self: *Loop) !void {$/;"	function
initStatic	$ZIGLIB/std/http/Client.zig	/pub fn initStatic(buf: []u8) Response {$/;"	function
initStaticTLS	$ZIGLIB/std/os/linux/tls.zig	/^pub fn initStaticTLS(phdrs: []elf.Phdr) void {$/;"	function
initSubtype	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/pub fn initSubtype(self: *const DevicePathProtocol, comptime TUnion: type) ?TUnion {$/;"	function
initTLS	$ZIGLIB/std/os/linux/tls.zig	/^fn initTLS(phdrs: []elf.Phdr) void {$/;"	function
initTakeOwnership	$ZIGLIB/std/process.zig	/pub fn initTakeOwnership(allocator: Allocator, cmd_line_utf8: []const u8) InitError!Self {$/;"	function
initThreadPool	$ZIGLIB/std/event/loop.zig	/pub fn initThreadPool(self: *Loop, thread_count: usize) !void {$/;"	function
initUnchecked	$ZIGLIB/std/unicode.zig	/pub fn initUnchecked(s: []const u8) Utf8View {$/;"	function
initUndefined	$ZIGLIB/std/enums.zig	/pub fn initUndefined() Self {$/;"	function
initUnix	$ZIGLIB/std/net.zig	/pub fn initUnix(path: []const u8) !Address {$/;"	function
initUtf16le	$ZIGLIB/std/process.zig	/pub fn initUtf16le(allocator: Allocator, cmd_line_utf16le: [*:0]const u16) InitUtf16leError!Self {$/;"	function
initWithAllocator	$ZIGLIB/std/process.zig	/pub fn initWithAllocator(allocator: Allocator) InitError!ArgIterator {$/;"	function
initWithCount	$ZIGLIB/std/enums.zig	/pub fn initWithCount(comptime c: CountSize) Self {$/;"	function
init_data	$ZIGLIB/std/os/linux/tls.zig	/init_data: []const u8/;"	field
init_internal	$ZIGLIB/std/crypto/blake3.zig	/fn init_internal(key: [8]u32, flags: u8) Blake3 {$/;"	function
init_jk	$ZIGLIB/compiler_rt/rem_pio2_large.zig	/^const init_jk = [_]i32{ 3, 4, 4, 6 }/;"	constant
init_module	$ZIGLIB/std/os/linux/syscalls.zig	/init_module = Linux + 168/;"	field
init_node	$ZIGLIB/std/zig/Parse.zig	/const init_node: Node.Index = switch (p.token_tags[p.tok_i]) {$/;"	constant
init_once	$ZIGLIB/compiler_rt/emutls.zig	/var init_once = std.once(current_thread_storage.init)/;"	variable
init_order	$ZIGLIB/std/c/haiku.zig	/init_order: i32/;"	field
init_params	$ZIGLIB/std/os/linux/io_uring.zig	/pub fn init_params(entries: u13, p: *linux.io_uring_params) !IO_Uring {$/;"	function
init_routine	$ZIGLIB/std/c/haiku.zig	/init_routine: *anyopaque/;"	field
init_state	$ZIGLIB/std/crypto/tlcsprng.zig	/init_state: enum(u8) { uninitialized = 0, initialized, failed }/;"	field
init_token	$ZIGLIB/std/zig/render.zig	/const init_token = tree.firstToken(field_init)/;"	constant
init_vdso_clock_gettime	$ZIGLIB/std/os/linux.zig	/^fn init_vdso_clock_gettime(clk: i32, ts: *timespec) callconv(.C) usize {$/;"	function
initial	$ZIGLIB/std/heap/WasmPageAllocator.zig	/const initial = try page_allocator.alloc(u8, mem.page_size)/;"	constant
initial_cap	$ZIGLIB/std/fs/file.zig	/const initial_cap = (if (size > 0) size else 1024) + @boolToInt(optional_sentinel != null)/;"	constant
initial_capacity	$ZIGLIB/std/hash_map.zig	/const initial_capacity = map.capacity()/;"	constant
initial_delay_ns	$ZIGLIB/std/Progress.zig	/^initial_delay_ns: u64 = 500 * std.time.ns_per_ms/;"	field
initial_iterable_dir	$ZIGLIB/std/fs.zig	/var initial_iterable_dir = (try self.deleteTreeOpenInitialSubpath(sub_path, .File)) orelse return/;"	variable
initial_memory	$ZIGLIB/std/Build/CompileStep.zig	/^initial_memory: ?u64 = null/;"	field
initial_state	$ZIGLIB/std/rand/Xoodoo.zig	/var initial_state: [State.block_bytes]u8 = undefined/;"	variable
initial_value	$ZIGLIB/std/crypto/25519/x25519.zig	/const initial_value = [32]u8{ 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }/;"	constant
initial_wg	$ZIGLIB/std/event/wait_group.zig	/var initial_wg = WaitGroup{}/;"	variable
initialize	$ZIGLIB/std/os/uefi/protocols/simple_network_protocol.zig	/pub fn initialize(self: *const SimpleNetworkProtocol, extra_rx_buffer_size: usize, extra_tx_buffer_size: usize) Status {$/;"	function
initialized	$ZIGLIB/std/crypto/tlcsprng.zig	/initialized/;"	field
initprot	$ZIGLIB/std/macho.zig	/initprot: vm_prot_t = PROT.NONE/;"	field
inits	$ZIGLIB/std/zig/Parse.zig	/const inits = p.scratch.items[scratch_top..]/;"	constant
inline	$ZIGLIB/std/dwarf/AT.zig	/^pub const @"inline" = 0x20/;"	constant
inline_token	$ZIGLIB/std/zig/Parse.zig	/const inline_token = p.eatToken(.keyword_inline)/;"	constant
inlined_subroutine	$ZIGLIB/std/dwarf/TAG.zig	/^pub const inlined_subroutine = 0x1d/;"	constant
inner	$ZIGLIB/std/zig/Parse.zig	/const inner: Node.Index = inner: {$/;"	constant
innerThreads	$ZIGLIB/std/valgrind.zig	/^pub fn innerThreads(qzz: [*]u8) void {$/;"	function
inner_ct	$ZIGLIB/std/crypto/tls/Client.zig	/const inner_ct = @intToEnum(tls.ContentType, cleartext[cleartext.len - 1])/;"	constant
inner_map_fd	$ZIGLIB/std/os/linux/bpf.zig	/inner_map_fd: fd_t/;"	field
inner_offset	$ZIGLIB/compiler_rt/atomics.zig	/const inner_offset = addr & (@as(T, smallest_atomic_fetch_exch_size) - 1)/;"	constant
inner_reader	$ZIGLIB/std/io/limited_reader.zig	/inner_reader: ReaderType/;"	field
inner_shift	$ZIGLIB/compiler_rt/atomics.zig	/const inner_shift = @intCast(std.math.Log2Int(T), inner_offset * 8)/;"	constant
inner_space	$ZIGLIB/std/zig/render.zig	/const inner_space = if (one_line) Space.none else Space.newline/;"	constant
inner_writer	$ZIGLIB/std/compress/deflate/huffman_bit_writer.zig	/inner_writer: WriterType/;"	field
ino_t	$ZIGLIB/std/os/wasi.zig	/^pub const ino_t = inode_t/;"	constant
inode	$ZIGLIB/std/fs/file.zig	/inode: INode/;"	field
inode_t	$ZIGLIB/std/os/wasi.zig	/^pub const inode_t = u64/;"	constant
inotify_add_watch	$ZIGLIB/std/os/linux/syscalls.zig	/inotify_add_watch = Linux + 285/;"	field
inotify_add_watchZ	$ZIGLIB/std/os.zig	/^pub fn inotify_add_watchZ(inotify_fd: i32, pathname: [*:0]const u8, mask: u32) INotifyAddWatchError!i32 {$/;"	function
inotify_event	$ZIGLIB/std/os/linux.zig	/^pub const inotify_event = extern struct {$/;"	struct
inotify_fd	$ZIGLIB/std/fs/watch.zig	/inotify_fd: i32/;"	field
inotify_init	$ZIGLIB/std/os/linux/syscalls.zig	/inotify_init = Linux + 284/;"	field
inotify_init1	$ZIGLIB/std/os/linux/syscalls.zig	/inotify_init1 = Linux + 329/;"	field
inotify_rm_watch	$ZIGLIB/std/os/linux/syscalls.zig	/inotify_rm_watch = Linux + 286/;"	field
inpcb	$ZIGLIB/std/c/freebsd.zig	/inpcb: u64/;"	field
inplace	$ZIGLIB/std/heap/WasmPageAllocator.zig	/var inplace = try page_allocator.realloc(initial, 1)/;"	variable
inptr	$ZIGLIB/std/Uri.zig	/var inptr: usize = 0/;"	variable
input	$ZIGLIB/std/crypto/gimli.zig	/var input: [48]u8 = undefined/;"	variable
input_buf	$ZIGLIB/std/os/windows.zig	/var input_buf: [MIN_SIZE]u8 align(@alignOf(MOUNTMGR_MOUNT_POINT)) = [_]u8{0} ** MIN_SIZE/;"	variable
input_chaining_value	$ZIGLIB/std/crypto/blake3.zig	/input_chaining_value: [8]u32 align(16)/;"	field
input_counter	$ZIGLIB/std/crypto/blake3.zig	/var input_counter = input_len/;"	variable
input_item	$ZIGLIB/std/zig/Parse.zig	/const input_item = try p.parseAsmInputItem()/;"	constant
input_len	$ZIGLIB/std/crypto/blake3.zig	/input_len: usize/;"	field
input_margin	$ZIGLIB/std/compress/deflate/deflate_fast.zig	/^const input_margin = 16 - 1/;"	constant
input_pattern	$ZIGLIB/std/crypto/blake3.zig	/var input_pattern: [251]u8 = undefined/;"	variable
input_size	$ZIGLIB/std/compress/gzip.zig	/const input_size = try self.in_reader.readIntLittle(u32)/;"	constant
input_struct	$ZIGLIB/std/os/windows.zig	/var input_struct = @ptrCast(*MOUNTMGR_MOUNT_POINT, &input_buf[0])/;"	variable
inputs	$ZIGLIB/std/zig/Ast.zig	/inputs: []const Node.Index/;"	field
insert	$ZIGLIB/std/treap.zig	/fn insert(self: *Self, key: Key, parent: ?*Node, node: *Node) void {$/;"	function
insertAfter	$ZIGLIB/std/linked_list.zig	/pub fn insertAfter(node: *Node, new_node: *Node) void {$/;"	function
insertAllEntriesIntoNewHeader	$ZIGLIB/std/array_hash_map.zig	/fn insertAllEntriesIntoNewHeader(self: *Self, ctx: ByIndexContext, header: *IndexHeader) void {$/;"	function
insertAllEntriesIntoNewHeaderGeneric	$ZIGLIB/std/array_hash_map.zig	/fn insertAllEntriesIntoNewHeaderGeneric(self: *Self, ctx: ByIndexContext, header: *IndexHeader, comptime I: type) void {$/;"	function
insertAssumeCapacity	$ZIGLIB/std/multi_array_list.zig	/pub fn insertAssumeCapacity(self: *Self, index: usize, elem: S) void {$/;"	function
insertBefore	$ZIGLIB/std/linked_list.zig	/pub fn insertBefore(list: *Self, node: *Node, new_node: *Node) void {$/;"	function
insertNewline	$ZIGLIB/std/zig/render.zig	/pub fn insertNewline(self: *Self) WriteError!void {$/;"	function
insertRight	$ZIGLIB/std/os/darwin.zig	/pub fn insertRight(self: MachTask, port: MachTask, msg: std.c.MACH_MSG_TYPE) !void {$/;"	function
insertSlice	$ZIGLIB/std/bounded_array.zig	/pub fn insertSlice(self: *Self, i: usize, items: []const T) error{Overflow}!void {$/;"	function
insert_index	$ZIGLIB/std/sort.zig	/var insert_index: usize = A.start/;"	variable
insert_reference_bits_multiple	$ZIGLIB/std/target/s390x.zig	/insert_reference_bits_multiple/;"	field
inserted_under	$ZIGLIB/std/treap.zig	/inserted_under: ?*Node/;"	field
insertionSort	$ZIGLIB/std/sort.zig	/^pub fn insertionSort($/;"	function
insertionSortContext	$ZIGLIB/std/sort.zig	/^pub fn insertionSortContext(len: usize, context: anytype) void {$/;"	function
insertnopload	$ZIGLIB/std/target/sparc.zig	/insertnopload/;"	field
inside_safe_exponent	$ZIGLIB/std/fmt/parse_float/convert_eisel_lemire.zig	/const inside_safe_exponent = q >= -27 and q <= 55/;"	constant
insn	$ZIGLIB/std/os/linux/sparc64.zig	/insn: u32/;"	field
insn_cnt	$ZIGLIB/std/os/linux/bpf.zig	/insn_cnt: u32/;"	field
insns	$ZIGLIB/std/os/linux/bpf.zig	/insns: u64/;"	field
inst	$ZIGLIB/std/mem.zig	/const inst = S{$/;"	constant
inst2	$ZIGLIB/std/mem.zig	/const inst2 = bytesAsValue(S, inst_bytes)/;"	constant
inst_bytes	$ZIGLIB/std/mem.zig	/const inst_bytes = switch (native_endian) {$/;"	constant
inst_fwd_prefetch_bug	$ZIGLIB/std/target/amdgpu.zig	/inst_fwd_prefetch_bug/;"	field
install	$ZIGLIB/std/Build/CompileStep.zig	/^pub fn install(self: *CompileStep) void {$/;"	function
installArtifact	$ZIGLIB/std/Build.zig	/^pub fn installArtifact(self: *Build, artifact: *CompileStep) void {$/;"	function
installBinFile	$ZIGLIB/std/Build.zig	/^pub fn installBinFile(self: *Build, src_path: []const u8, dest_rel_path: []const u8) void {$/;"	function
installConfigHeader	$ZIGLIB/std/Build/CompileStep.zig	/^pub fn installConfigHeader($/;"	function
installConfigurationTable	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/installConfigurationTable: *const fn (guid: *align(8) const Guid, table: ?*anyopaque) callconv(.C) Status/;"	field
installDirectory	$ZIGLIB/std/Build.zig	/^pub fn installDirectory(self: *Build, options: InstallDirectoryOptions) void {$/;"	function
installFile	$ZIGLIB/std/Build.zig	/^pub fn installFile(self: *Build, src_path: []const u8, dest_rel_path: []const u8) void {$/;"	function
installHeader	$ZIGLIB/std/Build/CompileStep.zig	/^pub fn installHeader(a: *CompileStep, src_path: []const u8, dest_rel_path: []const u8) void {$/;"	function
installHeadersDirectory	$ZIGLIB/std/Build/CompileStep.zig	/^pub fn installHeadersDirectory($/;"	function
installHeadersDirectoryOptions	$ZIGLIB/std/Build/CompileStep.zig	/^pub fn installHeadersDirectoryOptions($/;"	function
installLibFile	$ZIGLIB/std/Build.zig	/^pub fn installLibFile(self: *Build, src_path: []const u8, dest_rel_path: []const u8) void {$/;"	function
installLibraryHeaders	$ZIGLIB/std/Build/CompileStep.zig	/^pub fn installLibraryHeaders(a: *CompileStep, l: *CompileStep) void {$/;"	function
installMultipleProtocolInterfaces	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/installMultipleProtocolInterfaces: *const fn (handle: *Handle, ...) callconv(.C) Status/;"	field
installProtocolInterface	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/installProtocolInterface: *const fn (handle: Handle, protocol: *align(8) const Guid, interface_type: EfiInterfaceType, interface: *anyopaque) callconv(.C) Status/;"	field
installRaw	$ZIGLIB/std/Build/CompileStep.zig	/^pub fn installRaw(self: *CompileStep, dest_filename: []const u8, options: InstallRawStep.CreateOptions) *InstallRawStep {$/;"	function
install_artifact	$ZIGLIB/std/Build/Step.zig	/install_artifact/;"	field
install_atfork_handler	$ZIGLIB/std/crypto/tlcsprng.zig	/^var install_atfork_handler = std.once(struct {$/;"	variable
install_dir	$ZIGLIB/std/Build/Step.zig	/install_dir/;"	field
install_file	$ZIGLIB/std/Build/Step.zig	/install_file/;"	field
install_name	$ZIGLIB/std/Build/CompileStep.zig	/const install_name = self.install_name orelse builder.fmt("@rpath\/{s}{s}{s}", .{$/;"	constant
install_path	$ZIGLIB/std/Build.zig	/^install_path: []const u8/;"	field
install_prefix	$ZIGLIB/std/Build.zig	/const install_prefix = b.pathJoin(&.{ b.cache_root, "i", &hash_basename })/;"	constant
install_raw	$ZIGLIB/std/Build/Step.zig	/install_raw/;"	field
install_step	$ZIGLIB/std/Build/CompileStep.zig	/const install_step = a.builder.getInstallStep()/;"	constant
install_subdir	$ZIGLIB/std/Build/InstallDirStep.zig	/install_subdir: []const u8/;"	field
install_tls	$ZIGLIB/std/Build.zig	/^install_tls: TopLevelStep/;"	field
installed_files	$ZIGLIB/std/Build.zig	/^installed_files: ArrayList(InstalledFile)/;"	field
installed_headers	$ZIGLIB/std/Build/CompileStep.zig	/^installed_headers: ArrayList(*Step)/;"	field
installed_path	$ZIGLIB/std/Build/CompileStep.zig	/^installed_path: ?[]const u8/;"	field
instance	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/instance: u16 align(1)/;"	field
instance_bytes	$ZIGLIB/std/Thread.zig	/const instance_bytes = @ptrCast([*]u8, alloc_ptr)[0..alloc_bytes]/;"	constant
instance_offset	$ZIGLIB/std/Thread.zig	/var instance_offset: usize = undefined/;"	variable
instruction	$ZIGLIB/std/builtin.zig	/instruction/;"	field
instruction_addresses	$ZIGLIB/std/builtin.zig	/instruction_addresses: []usize/;"	field
instruction_pointer	$ZIGLIB/std/os/linux/seccomp.zig	/instruction_pointer: u64/;"	field
insufficient_security	$ZIGLIB/std/crypto/tls.zig	/insufficient_security = 71/;"	field
insufficient_storage	$ZIGLIB/std/http.zig	/insufficient_storage = 507/;"	field
int16	$ZIGLIB/std/http/Client.zig	/inline fn int16(array: *const [2]u8) u16 {$/;"	function
int2	$ZIGLIB/std/crypto/tls.zig	/^pub inline fn int2(x: u16) [2]u8 {$/;"	function
int3	$ZIGLIB/std/crypto/tls.zig	/^pub inline fn int3(x: u24) [3]u8 {$/;"	function
int32	$ZIGLIB/std/http/Client.zig	/inline fn int32(array: *const [4]u8) u32 {$/;"	function
int64	$ZIGLIB/std/http/Client.zig	/inline fn int64(array: *const [8]u8) u64 {$/;"	function
intDecode	$ZIGLIB/std/crypto/scrypt.zig	/fn intDecode(comptime T: type, src: *const [(@bitSizeOf(T) + 5) \/ 6]u8) !T {$/;"	function
intEncode	$ZIGLIB/std/crypto/scrypt.zig	/fn intEncode(dst: []u8, src: anytype) void {$/;"	function
intRangeAtMost	$ZIGLIB/std/rand.zig	/pub fn intRangeAtMost(r: Random, comptime T: type, at_least: T, at_most: T) T {$/;"	function
intRangeAtMostBiased	$ZIGLIB/std/rand.zig	/pub fn intRangeAtMostBiased(r: Random, comptime T: type, at_least: T, at_most: T) T {$/;"	function
intRangeLessThan	$ZIGLIB/std/rand.zig	/pub fn intRangeLessThan(r: Random, comptime T: type, at_least: T, less_than: T) T {$/;"	function
intRangeLessThanBiased	$ZIGLIB/std/rand.zig	/pub fn intRangeLessThanBiased(r: Random, comptime T: type, at_least: T, less_than: T) T {$/;"	function
intToEnum	$ZIGLIB/std/meta.zig	/^pub fn intToEnum(comptime EnumTag: type, tag_int: anytype) IntToEnumError!EnumTag {$/;"	function
intToFloat	$ZIGLIB/compiler_rt/int_to_float.zig	/^pub fn intToFloat(comptime T: type, x: anytype) T {$/;"	function
int_base	$ZIGLIB/std/simd.zig	/const int_base = @Vector(4, i32){ 11, 23, 9, -21 }/;"	constant
int_bit	$ZIGLIB/compiler_rt/comparef.zig	/const int_bit = 0x8000000000000000/;"	constant
int_bits	$ZIGLIB/std/packed_int_array.zig	/const int_bits = @bitSizeOf(Int)/;"	constant
int_clamp_insts	$ZIGLIB/std/target/amdgpu.zig	/int_clamp_insts/;"	field
int_count	$ZIGLIB/std/packed_int_array.zig	/const int_count = 19/;"	constant
int_end	$ZIGLIB/std/fmt/parse_float/parse.zig	/var int_end = stream.offsetTrue()/;"	variable
int_exponent	$ZIGLIB/std/zig/tokenizer.zig	/int_exponent/;"	field
int_period	$ZIGLIB/std/zig/tokenizer.zig	/int_period/;"	field
int_slice	$ZIGLIB/std/fmt.zig	/var int_slice = [_]u32{ 1, 4096, 391891, 1111111111 }/;"	variable
int_value	$ZIGLIB/std/fmt.zig	/const int_value = if (@TypeOf(value) == comptime_int) blk: {$/;"	constant
integer	$ZIGLIB/std/crypto/Certificate.zig	/integer = 2/;"	field
integerBit	$ZIGLIB/compiler_rt/mulf3.zig	/const integerBit = @as(Z, 1) << math.floatFractionalBits(T)/;"	constant
integerRank	$ZIGLIB/std/zig/c_translation.zig	/^fn integerRank(comptime T: type) u8 {$/;"	function
integer_0	$ZIGLIB/std/mem.zig	/integer_0: i0/;"	field
integer_128	$ZIGLIB/std/mem.zig	/integer_128: i128/;"	field
integer_16	$ZIGLIB/std/mem.zig	/integer_16: i16/;"	field
integer_32	$ZIGLIB/std/mem.zig	/integer_32: i32/;"	field
integer_64	$ZIGLIB/std/mem.zig	/integer_64: i64/;"	field
integer_8	$ZIGLIB/std/mem.zig	/integer_8: i8/;"	field
integer_bit	$ZIGLIB/compiler_rt/trunctfxf2.zig	/const integer_bit = 1 << 63/;"	constant
integer_overflow	$ZIGLIB/std/builtin.zig	/pub const integer_overflow = "integer overflow"/;"	constant
integer_part_out_of_bounds	$ZIGLIB/std/builtin.zig	/pub const integer_part_out_of_bounds = "integer part of floating point value out of bounds"/;"	constant
integer_t	$ZIGLIB/std/c/darwin.zig	/^pub const integer_t = c_int/;"	constant
integerify	$ZIGLIB/std/crypto/scrypt.zig	/^fn integerify(b: []align(16) const u32, r: u30) u64 {$/;"	function
integral_types	$ZIGLIB/std/mem.zig	/integral_types: struct {$/;"	field
intended_io_mode	$ZIGLIB/std/fs/file.zig	/intended_io_mode: io.ModeOverride = io.default_mode/;"	field
interactive	$ZIGLIB/std/crypto/scrypt.zig	/pub const interactive = Self.fromLimits(524288, 16777216)/;"	constant
interactive_2i	$ZIGLIB/std/crypto/argon2.zig	/pub const interactive_2i = Self.fromLimits(4, 33554432)/;"	constant
interactive_2id	$ZIGLIB/std/crypto/argon2.zig	/pub const interactive_2id = Self.fromLimits(2, 67108864)/;"	constant
interface	$ZIGLIB/std/crypto/tlcsprng.zig	/^pub const interface = std.rand.Random{$/;"	constant
interface_number	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/interface_number: u8/;"	field
interface_type	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/interface_type: u8/;"	field
interior_limb_shift	$ZIGLIB/std/math/big/int.zig	/const interior_limb_shift = @truncate(Log2Limb, shift)/;"	constant
interlace	$ZIGLIB/std/simd.zig	/^pub fn interlace(vecs: anytype) @Vector(vectorLength(@TypeOf(vecs[0])) * vecs.len, std.meta.Child(@TypeOf(vecs[0]))) {$/;"	function
interlock	$ZIGLIB/std/c/netbsd.zig	/interlock: switch (builtin.cpu.arch) {$/;"	field
interlocked_access1	$ZIGLIB/std/target/s390x.zig	/interlocked_access1/;"	field
internal	$ZIGLIB/std/c/darwin.zig	/internal: mach_vm_size_t/;"	field
internalInit	$ZIGLIB/std/process.zig	/fn internalInit(allocator: Allocator) InitError![][:0]u8 {$/;"	function
internal_allocator	$ZIGLIB/std/testing/failing_allocator.zig	/internal_allocator: mem.Allocator/;"	field
internal_error	$ZIGLIB/std/crypto/tls.zig	/internal_error = 80/;"	field
internal_peak	$ZIGLIB/std/c/darwin.zig	/internal_peak: mach_vm_size_t/;"	field
internal_server_error	$ZIGLIB/std/http.zig	/internal_server_error = 500/;"	field
intersectWith	$ZIGLIB/std/enums.zig	/pub fn intersectWith(self: Self, other: Self) Self {$/;"	function
intersection	$ZIGLIB/std/target.zig	/intersection/;"	field
interval	$ZIGLIB/std/time.zig	/const interval = time_1 - time_0/;"	constant
ints	$ZIGLIB/std/target.zig	/ints: [usize_count]usize/;"	field
inv_2pi_inline_imm	$ZIGLIB/std/target/amdgpu.zig	/inv_2pi_inline_imm/;"	field
inv_blind_factor	$ZIGLIB/std/crypto/25519/ed25519.zig	/const inv_blind_factor = Scalar.fromBytes(blind_h[0..32].*).invert().toBytes()/;"	constant
inv_mask	$ZIGLIB/std/packed_int_array.zig	/const inv_mask = @intCast(Container, std.math.maxInt(UnInt)) << keep_shift/;"	constant
inv_round_keys	$ZIGLIB/std/crypto/aes/soft.zig	/var inv_round_keys: [rounds + 1]Block = undefined/;"	variable
inv_sqrt	$ZIGLIB/std/crypto/25519/ristretto255.zig	/const inv_sqrt = sqrtRatioM1(Fe.one, v_u2u2)/;"	constant
invalid	$ZIGLIB/std/zig/tokenizer.zig	/invalid/;"	field
invalidFmtError	$ZIGLIB/std/fmt.zig	/^pub fn invalidFmtError(comptime fmt: []const u8, value: anytype) void {$/;"	function
invalid_ampersand_ampersand	$ZIGLIB/std/zig/Ast.zig	/invalid_ampersand_ampersand/;"	field
invalid_bit_range	$ZIGLIB/std/zig/Ast.zig	/invalid_bit_range/;"	field
invalid_char	$ZIGLIB/std/base64.zig	/const invalid_char: u8 = 0xff/;"	constant
invalid_character	$ZIGLIB/std/zig/string_literal.zig	/invalid_character: usize/;"	field
invalid_digit	$ZIGLIB/std/zig/number_literal.zig	/invalid_digit: struct { i: usize, base: Base }/;"	field
invalid_digit_exponent	$ZIGLIB/std/zig/number_literal.zig	/invalid_digit_exponent: usize/;"	field
invalid_enum_value	$ZIGLIB/std/builtin.zig	/pub const invalid_enum_value = "invalid enum value"/;"	constant
invalid_error_code	$ZIGLIB/std/builtin.zig	/pub const invalid_error_code = "invalid error code"/;"	constant
invalid_escape_character	$ZIGLIB/std/zig/string_literal.zig	/invalid_escape_character: usize/;"	field
invalid_exponent_sign	$ZIGLIB/std/zig/number_literal.zig	/invalid_exponent_sign: usize/;"	field
invalid_float_base	$ZIGLIB/std/zig/number_literal.zig	/invalid_float_base: usize/;"	field
invalid_hex_exponent	$ZIGLIB/std/zig/number_literal.zig	/invalid_hex_exponent: usize/;"	field
invalid_length	$ZIGLIB/std/zig/tokenizer.zig	/const invalid_length = self.getInvalidCharacterLength()/;"	constant
invalid_periodasterisks	$ZIGLIB/std/zig/tokenizer.zig	/invalid_periodasterisks/;"	field
invalid_underscore_after_special	$ZIGLIB/std/zig/number_literal.zig	/invalid_underscore_after_special: usize/;"	field
invalid_unicode_codepoint	$ZIGLIB/std/zig/string_literal.zig	/invalid_unicode_codepoint: usize/;"	field
invalid_user_input	$ZIGLIB/std/Build.zig	/^invalid_user_input: bool/;"	field
invariant_function_descriptors	$ZIGLIB/std/target/powerpc.zig	/invariant_function_descriptors/;"	field
inverse	$ZIGLIB/std/crypto/pcurves/tests/secp256k1.zig	/const inverse = scalar.invert()/;"	constant
inverse2	$ZIGLIB/std/crypto/pcurves/tests/p384.zig	/const inverse2 = inverse.invert()/;"	constant
invert	$ZIGLIB/std/math/big/rational.zig	/pub fn invert(r: *Rational) void {$/;"	function
inverted_op	$ZIGLIB/std/math/big/int.zig	/const inverted_op = if (op == .add) .sub else .add/;"	constant
invln2	$ZIGLIB/std/math/expm1.zig	/const invln2: f64 = 1.44269504088896338700e+00/;"	constant
invpcid	$ZIGLIB/std/target/x86.zig	/invpcid/;"	field
invpio2	$ZIGLIB/compiler_rt/rem_pio2f.zig	/^const invpio2 = 6.36619772367581382433e-01/;"	constant
ioImpl	$ZIGLIB/std/c/solaris.zig	/^fn ioImpl(cmd: IoCtlCommand, io_type: u8, nr: u8, comptime IOT: type) i32 {$/;"	function
io_align	$ZIGLIB/std/os/uefi/protocols/block_io_protocol.zig	/io_align: u32/;"	field
io_cancel	$ZIGLIB/std/os/linux/syscalls.zig	/io_cancel = Linux + 245/;"	field
io_cqring_offsets	$ZIGLIB/std/os/linux.zig	/^pub const io_cqring_offsets = extern struct {$/;"	struct
io_destroy	$ZIGLIB/std/os/linux/syscalls.zig	/io_destroy = Linux + 242/;"	field
io_getevents	$ZIGLIB/std/os/linux/syscalls.zig	/io_getevents = Linux + 243/;"	field
io_impl	$ZIGLIB/std/os/linux/ioctl.zig	/^fn io_impl(dir: Direction, io_type: u8, nr: u8, comptime T: type) u32 {$/;"	function
io_mode	$ZIGLIB/std/std.zig	/pub const io_mode: io.Mode = if (@hasDecl(options_override, "io_mode"))$/;"	constant
io_pgetevents	$ZIGLIB/std/os/linux/syscalls.zig	/io_pgetevents = Linux + 368/;"	field
io_pgetevents_time64	$ZIGLIB/std/os/linux/syscalls.zig	/io_pgetevents_time64 = Linux + 416/;"	field
io_port	$ZIGLIB/std/event/loop.zig	/io_port: windows.HANDLE/;"	field
io_setup	$ZIGLIB/std/os/linux/syscalls.zig	/io_setup = Linux + 241/;"	field
io_sqring_offsets	$ZIGLIB/std/os/linux.zig	/^pub const io_sqring_offsets = extern struct {$/;"	struct
io_status	$ZIGLIB/std/child_process.zig	/var io_status: windows.IO_STATUS_BLOCK = undefined/;"	variable
io_status_block	$ZIGLIB/std/os.zig	/var io_status_block: windows.IO_STATUS_BLOCK = undefined/;"	variable
io_submit	$ZIGLIB/std/os/linux/syscalls.zig	/io_submit = Linux + 244/;"	field
io_type	$ZIGLIB/std/os/linux/ioctl.zig	/io_type: u8/;"	field
io_uring_cqe	$ZIGLIB/std/os/linux.zig	/^pub const io_uring_cqe = extern struct {$/;"	struct
io_uring_enter	$ZIGLIB/std/os/linux/syscalls.zig	/io_uring_enter = Linux + 426/;"	field
io_uring_files_update	$ZIGLIB/std/os/linux.zig	/^pub const io_uring_files_update = extern struct {$/;"	struct
io_uring_params	$ZIGLIB/std/os/linux.zig	/^pub const io_uring_params = extern struct {$/;"	struct
io_uring_prep_accept	$ZIGLIB/std/os/linux/io_uring.zig	/^pub fn io_uring_prep_accept($/;"	function
io_uring_prep_cancel	$ZIGLIB/std/os/linux/io_uring.zig	/^pub fn io_uring_prep_cancel($/;"	function
io_uring_prep_close	$ZIGLIB/std/os/linux/io_uring.zig	/^pub fn io_uring_prep_close(sqe: *linux.io_uring_sqe, fd: os.fd_t) void {$/;"	function
io_uring_prep_connect	$ZIGLIB/std/os/linux/io_uring.zig	/^pub fn io_uring_prep_connect($/;"	function
io_uring_prep_epoll_ctl	$ZIGLIB/std/os/linux/io_uring.zig	/^pub fn io_uring_prep_epoll_ctl($/;"	function
io_uring_prep_fallocate	$ZIGLIB/std/os/linux/io_uring.zig	/^pub fn io_uring_prep_fallocate($/;"	function
io_uring_prep_fsync	$ZIGLIB/std/os/linux/io_uring.zig	/^pub fn io_uring_prep_fsync(sqe: *linux.io_uring_sqe, fd: os.fd_t, flags: u32) void {$/;"	function
io_uring_prep_link_timeout	$ZIGLIB/std/os/linux/io_uring.zig	/^pub fn io_uring_prep_link_timeout($/;"	function
io_uring_prep_linkat	$ZIGLIB/std/os/linux/io_uring.zig	/^pub fn io_uring_prep_linkat($/;"	function
io_uring_prep_mkdirat	$ZIGLIB/std/os/linux/io_uring.zig	/^pub fn io_uring_prep_mkdirat($/;"	function
io_uring_prep_nop	$ZIGLIB/std/os/linux/io_uring.zig	/^pub fn io_uring_prep_nop(sqe: *linux.io_uring_sqe) void {$/;"	function
io_uring_prep_openat	$ZIGLIB/std/os/linux/io_uring.zig	/^pub fn io_uring_prep_openat($/;"	function
io_uring_prep_poll_add	$ZIGLIB/std/os/linux/io_uring.zig	/^pub fn io_uring_prep_poll_add($/;"	function
io_uring_prep_poll_remove	$ZIGLIB/std/os/linux/io_uring.zig	/^pub fn io_uring_prep_poll_remove($/;"	function
io_uring_prep_poll_update	$ZIGLIB/std/os/linux/io_uring.zig	/^pub fn io_uring_prep_poll_update($/;"	function
io_uring_prep_provide_buffers	$ZIGLIB/std/os/linux/io_uring.zig	/^pub fn io_uring_prep_provide_buffers($/;"	function
io_uring_prep_read	$ZIGLIB/std/os/linux/io_uring.zig	/^pub fn io_uring_prep_read(sqe: *linux.io_uring_sqe, fd: os.fd_t, buffer: []u8, offset: u64) void {$/;"	function
io_uring_prep_read_fixed	$ZIGLIB/std/os/linux/io_uring.zig	/^pub fn io_uring_prep_read_fixed(sqe: *linux.io_uring_sqe, fd: os.fd_t, buffer: *os.iovec, offset: u64, buffer_index: u16) void {$/;"	function
io_uring_prep_readv	$ZIGLIB/std/os/linux/io_uring.zig	/^pub fn io_uring_prep_readv($/;"	function
io_uring_prep_recv	$ZIGLIB/std/os/linux/io_uring.zig	/^pub fn io_uring_prep_recv(sqe: *linux.io_uring_sqe, fd: os.fd_t, buffer: []u8, flags: u32) void {$/;"	function
io_uring_prep_recvmsg	$ZIGLIB/std/os/linux/io_uring.zig	/^pub fn io_uring_prep_recvmsg($/;"	function
io_uring_prep_remove_buffers	$ZIGLIB/std/os/linux/io_uring.zig	/^pub fn io_uring_prep_remove_buffers($/;"	function
io_uring_prep_renameat	$ZIGLIB/std/os/linux/io_uring.zig	/^pub fn io_uring_prep_renameat($/;"	function
io_uring_prep_rw	$ZIGLIB/std/os/linux/io_uring.zig	/^pub fn io_uring_prep_rw($/;"	function
io_uring_prep_send	$ZIGLIB/std/os/linux/io_uring.zig	/^pub fn io_uring_prep_send(sqe: *linux.io_uring_sqe, fd: os.fd_t, buffer: []const u8, flags: u32) void {$/;"	function
io_uring_prep_sendmsg	$ZIGLIB/std/os/linux/io_uring.zig	/^pub fn io_uring_prep_sendmsg($/;"	function
io_uring_prep_shutdown	$ZIGLIB/std/os/linux/io_uring.zig	/^pub fn io_uring_prep_shutdown($/;"	function
io_uring_prep_statx	$ZIGLIB/std/os/linux/io_uring.zig	/^pub fn io_uring_prep_statx($/;"	function
io_uring_prep_symlinkat	$ZIGLIB/std/os/linux/io_uring.zig	/^pub fn io_uring_prep_symlinkat($/;"	function
io_uring_prep_timeout	$ZIGLIB/std/os/linux/io_uring.zig	/^pub fn io_uring_prep_timeout($/;"	function
io_uring_prep_timeout_remove	$ZIGLIB/std/os/linux/io_uring.zig	/^pub fn io_uring_prep_timeout_remove(sqe: *linux.io_uring_sqe, timeout_user_data: u64, flags: u32) void {$/;"	function
io_uring_prep_unlinkat	$ZIGLIB/std/os/linux/io_uring.zig	/^pub fn io_uring_prep_unlinkat($/;"	function
io_uring_prep_write	$ZIGLIB/std/os/linux/io_uring.zig	/^pub fn io_uring_prep_write(sqe: *linux.io_uring_sqe, fd: os.fd_t, buffer: []const u8, offset: u64) void {$/;"	function
io_uring_prep_write_fixed	$ZIGLIB/std/os/linux/io_uring.zig	/^pub fn io_uring_prep_write_fixed(sqe: *linux.io_uring_sqe, fd: os.fd_t, buffer: *os.iovec, offset: u64, buffer_index: u16) void {$/;"	function
io_uring_prep_writev	$ZIGLIB/std/os/linux/io_uring.zig	/^pub fn io_uring_prep_writev($/;"	function
io_uring_probe	$ZIGLIB/std/os/linux.zig	/^pub const io_uring_probe = extern struct {$/;"	struct
io_uring_probe_op	$ZIGLIB/std/os/linux.zig	/^pub const io_uring_probe_op = extern struct {$/;"	struct
io_uring_register	$ZIGLIB/std/os/linux/syscalls.zig	/io_uring_register = Linux + 427/;"	field
io_uring_restriction	$ZIGLIB/std/os/linux.zig	/^pub const io_uring_restriction = extern struct {$/;"	struct
io_uring_setup	$ZIGLIB/std/os/linux/syscalls.zig	/io_uring_setup = Linux + 425/;"	field
io_uring_sqe	$ZIGLIB/std/os/linux.zig	/^pub const io_uring_sqe = extern struct {$/;"	struct
ioc_or_service	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/ioc_or_service: ControllerType/;"	field
ioctl	$ZIGLIB/std/os/linux/syscalls.zig	/ioctl = Linux + 54/;"	field
ioctl_SIOCGIFINDEX	$ZIGLIB/std/os.zig	/^pub fn ioctl_SIOCGIFINDEX(fd: fd_t, ifr: *ifreq) IoCtl_SIOCGIFINDEX_Error!void {$/;"	function
ioffset	$ZIGLIB/std/os.zig	/const ioffset = @bitCast(i64, offset)/;"	constant
ioperm	$ZIGLIB/std/os/linux/syscalls.zig	/ioperm = Linux + 101/;"	field
iopl	$ZIGLIB/std/os/linux/syscalls.zig	/iopl = Linux + 110/;"	field
ioprio	$ZIGLIB/std/os/linux.zig	/ioprio: u16/;"	field
ioprio_get	$ZIGLIB/std/os/linux/syscalls.zig	/ioprio_get = Linux + 315/;"	field
ioprio_set	$ZIGLIB/std/os/linux/syscalls.zig	/ioprio_set = Linux + 314/;"	field
iota	$ZIGLIB/std/simd.zig	/^pub inline fn iota(comptime T: type, comptime len: usize) @Vector(len, T) {$/;"	function
iov_base	$ZIGLIB/std/os.zig	/iov_base: [*]u8/;"	field
iov_count	$ZIGLIB/std/os.zig	/const iov_count = math.cast(u31, iov.len) orelse math.maxInt(u31)/;"	constant
iov_len	$ZIGLIB/std/os.zig	/iov_len: usize/;"	field
iovec	$ZIGLIB/std/os.zig	/^pub const iovec = extern struct {$/;"	struct
iovec_const	$ZIGLIB/std/os.zig	/^pub const iovec_const = extern struct {$/;"	struct
iovec_end	$ZIGLIB/std/crypto/tls/Client.zig	/var iovec_end: usize = 0/;"	variable
iovec_t	$ZIGLIB/std/os/wasi.zig	/^pub const iovec_t = std.os.iovec/;"	constant
iovecs	$ZIGLIB/std/os/linux/io_uring.zig	/var iovecs = [_]os.iovec{os.iovec{ .iov_base = &buffer, .iov_len = buffer.len }}/;"	variable
iovecs_buf	$ZIGLIB/std/crypto/tls/Client.zig	/var iovecs_buf: [6]std.os.iovec_const = undefined/;"	variable
iovecs_read	$ZIGLIB/std/os/linux/io_uring.zig	/var iovecs_read = [_]os.iovec{$/;"	variable
iovecs_recv	$ZIGLIB/std/os/linux/io_uring.zig	/var iovecs_recv = [_]os.iovec{$/;"	variable
iovecs_send	$ZIGLIB/std/os/linux/io_uring.zig	/const iovecs_send = [_]os.iovec_const{$/;"	constant
iovecs_write	$ZIGLIB/std/os/linux/io_uring.zig	/const iovecs_write = [_]os.iovec_const{$/;"	constant
iovlen	$ZIGLIB/std/os/linux/x86_64.zig	/iovlen: i32/;"	field
iovs	$ZIGLIB/std/os.zig	/const iovs = [1]iovec{iovec{$/;"	constant
ip_address_origin	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/ip_address_origin: Origin/;"	field
ip_slice	$ZIGLIB/std/net.zig	/var ip_slice = result.sa.addr[0..]/;"	variable
ip_text	$ZIGLIB/std/net.zig	/const ip_text = line_it.next() orelse continue/;"	constant
ip_txt	$ZIGLIB/std/net.zig	/const ip_txt = line_it.next() orelse continue/;"	constant
ipart	$ZIGLIB/std/math/modf.zig	/ipart: T/;"	field
ipc_space_port_t	$ZIGLIB/std/c/darwin.zig	/^pub const ipc_space_port_t = ipc_space_t/;"	constant
ipc_space_t	$ZIGLIB/std/c/darwin.zig	/^pub const ipc_space_t = mach_port_t/;"	constant
ipio2	$ZIGLIB/compiler_rt/rem_pio2_large.zig	/^const ipio2 = [_]i32{$/;"	constant
ipos	$ZIGLIB/std/os/windows.zig	/const ipos = @bitCast(LARGE_INTEGER, offset)/;"	constant
isAARCH64	$ZIGLIB/std/target.zig	/pub fn isAARCH64(arch: Arch) bool {$/;"	function
isARM	$ZIGLIB/std/target.zig	/pub fn isARM(arch: Arch) bool {$/;"	function
isASCII	$ZIGLIB/std/ascii.zig	/^pub fn isASCII(c: u8) bool {$/;"	function
isAbsolute	$ZIGLIB/std/fs/path.zig	/^pub fn isAbsolute(path: []const u8) bool {$/;"	function
isAbsolutePosix	$ZIGLIB/std/fs/path.zig	/^pub fn isAbsolutePosix(path: []const u8) bool {$/;"	function
isAbsolutePosixZ	$ZIGLIB/std/fs/path.zig	/^pub fn isAbsolutePosixZ(path_c: [*:0]const u8) bool {$/;"	function
isAbsoluteWindows	$ZIGLIB/std/fs/path.zig	/^pub fn isAbsoluteWindows(path: []const u8) bool {$/;"	function
isAbsoluteWindowsImpl	$ZIGLIB/std/fs/path.zig	/^fn isAbsoluteWindowsImpl(comptime T: type, path: []const T) bool {$/;"	function
isAbsoluteWindowsW	$ZIGLIB/std/fs/path.zig	/^pub fn isAbsoluteWindowsW(path_w: [*:0]const u16) bool {$/;"	function
isAbsoluteWindowsWTF16	$ZIGLIB/std/fs/path.zig	/^pub fn isAbsoluteWindowsWTF16(path: []const u16) bool {$/;"	function
isAbsoluteWindowsZ	$ZIGLIB/std/fs/path.zig	/^pub fn isAbsoluteWindowsZ(path_c: [*:0]const u8) bool {$/;"	function
isAbsoluteZ	$ZIGLIB/std/fs/path.zig	/^pub fn isAbsoluteZ(path_c: [*:0]const u8) bool {$/;"	function
isAligned	$ZIGLIB/std/mem.zig	/^pub fn isAligned(addr: usize, alignment: usize) bool {$/;"	function
isAlignedAnyAlign	$ZIGLIB/std/mem.zig	/^pub fn isAlignedAnyAlign(i: usize, alignment: usize) bool {$/;"	function
isAlignedGeneric	$ZIGLIB/std/mem.zig	/^pub fn isAlignedGeneric(comptime T: type, addr: T, alignment: T) bool {$/;"	function
isAlignedLog2	$ZIGLIB/std/mem.zig	/^pub fn isAlignedLog2(addr: usize, log2_alignment: u8) bool {$/;"	function
isAllocationAllowed	$ZIGLIB/std/heap/general_purpose_allocator.zig	/fn isAllocationAllowed(self: *Self, size: usize) bool {$/;"	function
isAlphabetic	$ZIGLIB/std/ascii.zig	/^pub fn isAlphabetic(c: u8) bool {$/;"	function
isAlphanumeric	$ZIGLIB/std/ascii.zig	/^pub fn isAlphanumeric(c: u8) bool {$/;"	function
isAndroid	$ZIGLIB/std/target.zig	/pub fn isAndroid(self: Target) bool {$/;"	function
isAtLeast	$ZIGLIB/std/target.zig	/pub fn isAtLeast(self: WindowsVersion, ver: WindowsVersion) bool {$/;"	function
isAuthoritySeparator	$ZIGLIB/std/Uri.zig	/^fn isAuthoritySeparator(c: u8) bool {$/;"	function
isBSD	$ZIGLIB/std/target.zig	/pub fn isBSD(tag: Tag) bool {$/;"	function
isBpf	$ZIGLIB/std/target.zig	/pub fn isBpf(arch: Arch) bool {$/;"	function
isBpfFreestanding	$ZIGLIB/std/target.zig	/pub fn isBpfFreestanding(self: Target) bool {$/;"	function
isBytes	$ZIGLIB/std/io/reader.zig	/pub fn isBytes(self: Self, slice: []const u8) !bool {$/;"	function
isCode	$ZIGLIB/std/macho.zig	/pub fn isCode(sect: section_64) bool {$/;"	function
isComdat	$ZIGLIB/std/coff.zig	/pub fn isComdat(self: SectionHeader) bool {$/;"	function
isComptime	$ZIGLIB/std/fmt.zig	/^fn isComptime() bool {$/;"	function
isConstPtr	$ZIGLIB/std/meta/trait.zig	/^pub fn isConstPtr(comptime T: type) bool {$/;"	function
isContainer	$ZIGLIB/std/meta/trait.zig	/^pub fn isContainer(comptime T: type) bool {$/;"	function
isContainerField	$ZIGLIB/std/zig/Ast.zig	/pub fn isContainerField(tag: Tag) bool {$/;"	function
isControl	$ZIGLIB/std/ascii.zig	/^pub fn isControl(c: u8) bool {$/;"	function
isCygwinPty	$ZIGLIB/std/os.zig	/^pub fn isCygwinPty(handle: fd_t) bool {$/;"	function
isDarwin	$ZIGLIB/std/zig/CrossTarget.zig	/^pub fn isDarwin(self: CrossTarget) bool {$/;"	function
isDarwinSDKInstalled	$ZIGLIB/std/zig/system/darwin.zig	/^pub fn isDarwinSDKInstalled(allocator: Allocator) bool {$/;"	function
isDebug	$ZIGLIB/std/macho.zig	/pub fn isDebug(sect: section_64) bool {$/;"	function
isDigit	$ZIGLIB/std/fmt/parse_float/common.zig	/^pub fn isDigit(c: u8, comptime base: u8) bool {$/;"	function
isDontDeadStrip	$ZIGLIB/std/macho.zig	/pub fn isDontDeadStrip(sect: section_64) bool {$/;"	function
isDontDeadStripIfReferencesLive	$ZIGLIB/std/macho.zig	/pub fn isDontDeadStripIfReferencesLive(sect: section_64) bool {$/;"	function
isDragonFlyBSD	$ZIGLIB/std/zig/CrossTarget.zig	/^pub fn isDragonFlyBSD(self: CrossTarget) bool {$/;"	function
isDst	$ZIGLIB/std/tz.zig	/pub fn isDst(self: Timetype) bool {$/;"	function
isDynamicLibrary	$ZIGLIB/std/Build/CompileStep.zig	/^pub fn isDynamicLibrary(self: *CompileStep) bool {$/;"	function
isEightDigits	$ZIGLIB/std/fmt/parse_float/common.zig	/^pub fn isEightDigits(v: u64) bool {$/;"	function
isEmpty	$ZIGLIB/std/target.zig	/pub fn isEmpty(set: Set) bool {$/;"	function
isEnabled	$ZIGLIB/std/target.zig	/pub fn isEnabled(set: Set, arch_feature_index: Index) bool {$/;"	function
isError	$ZIGLIB/std/meta.zig	/^pub fn isError(error_union: anytype) bool {$/;"	function
isEven	$ZIGLIB/std/math/big/int.zig	/pub fn isEven(self: Managed) bool {$/;"	function
isException	$ZIGLIB/std/c/solaris.zig	/pub fn isException(event: u32) bool {$/;"	function
isExtern	$ZIGLIB/std/meta/trait.zig	/^pub fn isExtern(comptime T: type) bool {$/;"	function
isFastPath	$ZIGLIB/std/fmt/parse_float/convert_fast.zig	/^fn isFastPath(comptime T: type, n: Number(T)) bool {$/;"	function
isFinished	$ZIGLIB/std/compress/lzma/decode/rangecoder.zig	/pub inline fn isFinished(self: RangeDecoder) bool {$/;"	function
isFinite	$ZIGLIB/std/math/isfinite.zig	/^pub fn isFinite(x: anytype) bool {$/;"	function
isFloat	$ZIGLIB/std/meta/trait.zig	/^pub fn isFloat(comptime T: type) bool {$/;"	function
isFree	$ZIGLIB/std/hash_map.zig	/pub fn isFree(self: Metadata) bool {$/;"	function
isFreeBSD	$ZIGLIB/std/zig/CrossTarget.zig	/^pub fn isFreeBSD(self: CrossTarget) bool {$/;"	function
isGenLimit	$ZIGLIB/std/Uri.zig	/^fn isGenLimit(c: u8) bool {$/;"	function
isGnu	$ZIGLIB/std/target.zig	/pub fn isGnu(self: Target) bool {$/;"	function
isGnuLibC	$ZIGLIB/std/zig/CrossTarget.zig	/^pub fn isGnuLibC(self: CrossTarget) bool {$/;"	function
isGnuLibC_os_tag_abi	$ZIGLIB/std/target.zig	/pub fn isGnuLibC_os_tag_abi(os_tag: Os.Tag, abi: Abi) bool {$/;"	function
isHex	$ZIGLIB/std/ascii.zig	/^pub fn isHex(c: u8) bool {$/;"	function
isIndexable	$ZIGLIB/std/meta/trait.zig	/^pub fn isIndexable(comptime T: type) bool {$/;"	function
isInf	$ZIGLIB/std/math/isinf.zig	/^pub inline fn isInf(x: anytype) bool {$/;"	function
isInitialized	$ZIGLIB/std/heap/WasmPageAllocator.zig	/fn isInitialized(self: FreeBlock) bool {$/;"	function
isIntegral	$ZIGLIB/std/meta/trait.zig	/^pub fn isIntegral(comptime T: type) bool {$/;"	function
isKnown	$ZIGLIB/std/zig/system/arm.zig	/pub fn isKnown(core: CoreInfo, is_64bit: bool) ?*const Target.Cpu.Model {$/;"	function
isLastAllocation	$ZIGLIB/std/heap.zig	/pub fn isLastAllocation(self: *FixedBufferAllocator, buf: []u8) bool {$/;"	function
isLeapYear	$ZIGLIB/std/time/epoch.zig	/^pub fn isLeapYear(year: Year) bool {$/;"	function
isLibCLibrary	$ZIGLIB/std/Build/CompileStep.zig	/^fn isLibCLibrary(name: []const u8) bool {$/;"	function
isLibCppLibrary	$ZIGLIB/std/Build/CompileStep.zig	/^fn isLibCppLibrary(name: []const u8) bool {$/;"	function
isLineOverIndented	$ZIGLIB/std/zig/render.zig	/pub fn isLineOverIndented(self: *Self) bool {$/;"	function
isLinux	$ZIGLIB/std/zig/CrossTarget.zig	/^pub fn isLinux(self: CrossTarget) bool {$/;"	function
isLower	$ZIGLIB/std/ascii.zig	/^pub fn isLower(c: u8) bool {$/;"	function
isMIPS	$ZIGLIB/std/target.zig	/pub fn isMIPS(arch: Arch) bool {$/;"	function
isManyItemPtr	$ZIGLIB/std/meta/trait.zig	/^pub fn isManyItemPtr(comptime T: type) bool {$/;"	function
isMinGW	$ZIGLIB/std/target.zig	/pub fn isMinGW(self: Target) bool {$/;"	function
isMinLayer	$ZIGLIB/std/priority_dequeue.zig	/fn isMinLayer(index: usize) bool {$/;"	function
isMusl	$ZIGLIB/std/target.zig	/pub fn isMusl(self: Target) bool {$/;"	function
isNan	$ZIGLIB/std/math/isnan.zig	/^pub fn isNan(x: anytype) bool {$/;"	function
isNative	$ZIGLIB/std/zig/CrossTarget.zig	/^pub fn isNative(self: CrossTarget) bool {$/;"	function
isNativeAbi	$ZIGLIB/std/zig/CrossTarget.zig	/^pub fn isNativeAbi(self: CrossTarget) bool {$/;"	function
isNativeCpu	$ZIGLIB/std/zig/CrossTarget.zig	/^pub fn isNativeCpu(self: CrossTarget) bool {$/;"	function
isNativeOs	$ZIGLIB/std/zig/CrossTarget.zig	/^pub fn isNativeOs(self: CrossTarget) bool {$/;"	function
isNegative	$ZIGLIB/std/crypto/25519/field.zig	/pub inline fn isNegative(a: Fe) bool {$/;"	function
isNegativeInf	$ZIGLIB/std/math/isinf.zig	/^pub inline fn isNegativeInf(x: anytype) bool {$/;"	function
isNetBSD	$ZIGLIB/std/zig/CrossTarget.zig	/^pub fn isNetBSD(self: CrossTarget) bool {$/;"	function
isNormal	$ZIGLIB/std/math/isnormal.zig	/^pub fn isNormal(x: anytype) bool {$/;"	function
isNumber	$ZIGLIB/std/meta/trait.zig	/^pub fn isNumber(comptime T: type) bool {$/;"	function
isNvptx	$ZIGLIB/std/target.zig	/pub fn isNvptx(arch: Arch) bool {$/;"	function
isOdd	$ZIGLIB/std/math/big/int.zig	/pub fn isOdd(self: Managed) bool {$/;"	function
isOddInteger	$ZIGLIB/std/math/pow.zig	/^fn isOddInteger(x: f64) bool {$/;"	function
isOpenBSD	$ZIGLIB/std/zig/CrossTarget.zig	/^pub fn isOpenBSD(self: CrossTarget) bool {$/;"	function
isPPC	$ZIGLIB/std/target.zig	/pub fn isPPC(arch: Arch) bool {$/;"	function
isPPC64	$ZIGLIB/std/target.zig	/pub fn isPPC64(arch: Arch) bool {$/;"	function
isPacked	$ZIGLIB/std/meta/trait.zig	/^pub fn isPacked(comptime T: type) bool {$/;"	function
isPathSeparator	$ZIGLIB/std/Uri.zig	/^fn isPathSeparator(c: u8) bool {$/;"	function
isPositive	$ZIGLIB/std/math/big/int.zig	/pub fn isPositive(self: Managed) bool {$/;"	function
isPositiveInf	$ZIGLIB/std/math/isinf.zig	/^pub inline fn isPositiveInf(x: anytype) bool {$/;"	function
isPowerOfTwo	$ZIGLIB/std/math.zig	/^pub fn isPowerOfTwo(v: anytype) bool {$/;"	function
isPrimitive	$ZIGLIB/std/zig/primitives.zig	/^pub fn isPrimitive(name: []const u8) bool {$/;"	function
isPrint	$ZIGLIB/std/ascii.zig	/^pub fn isPrint(c: u8) bool {$/;"	function
isPtrTo	$ZIGLIB/std/meta/trait.zig	/^pub fn isPtrTo(comptime id: std.builtin.TypeId) TraitFn {$/;"	function
isQuerySeparator	$ZIGLIB/std/Uri.zig	/^fn isQuerySeparator(c: u8) bool {$/;"	function
isRISCV	$ZIGLIB/std/target.zig	/pub fn isRISCV(arch: Arch) bool {$/;"	function
isRead	$ZIGLIB/std/fs/file.zig	/pub fn isRead(self: OpenFlags) bool {$/;"	function
isReserved	$ZIGLIB/std/Uri.zig	/^fn isReserved(c: u8) bool {$/;"	function
isSPARC	$ZIGLIB/std/target.zig	/pub fn isSPARC(arch: Arch) bool {$/;"	function
isSPIRV	$ZIGLIB/std/target.zig	/pub fn isSPIRV(arch: Arch) bool {$/;"	function
isSchemeChar	$ZIGLIB/std/Uri.zig	/^fn isSchemeChar(c: u8) bool {$/;"	function
isSep	$ZIGLIB/std/fs/path.zig	/fn isSep(byte: u8) bool {$/;"	function
isSet	$ZIGLIB/std/bit_set.zig	/pub fn isSet(self: Self, index: usize) bool {$/;"	function
isSignalNan	$ZIGLIB/std/math/isnan.zig	/^pub fn isSignalNan(x: anytype) bool {$/;"	function
isSignedInt	$ZIGLIB/std/meta/trait.zig	/^pub fn isSignedInt(comptime T: type) bool {$/;"	function
isSingleItemPtr	$ZIGLIB/std/meta/trait.zig	/^pub fn isSingleItemPtr(comptime T: type) bool {$/;"	function
isSlice	$ZIGLIB/std/meta/trait.zig	/^pub fn isSlice(comptime T: type) bool {$/;"	function
isSliceOf	$ZIGLIB/std/meta/trait.zig	/^pub fn isSliceOf(comptime id: std.builtin.TypeId) TraitFn {$/;"	function
isSorted	$ZIGLIB/std/sort.zig	/^pub fn isSorted($/;"	function
isSplitByte	$ZIGLIB/std/mem.zig	/fn isSplitByte(self: Self, byte: T) bool {$/;"	function
isSquare	$ZIGLIB/std/crypto/pcurves/secp256k1/scalar.zig	/pub fn isSquare(n: Scalar) Scalar {$/;"	function
isStaticLibrary	$ZIGLIB/std/Build/CompileStep.zig	/^pub fn isStaticLibrary(self: *CompileStep) bool {$/;"	function
isSubLimit	$ZIGLIB/std/Uri.zig	/^fn isSubLimit(c: u8) bool {$/;"	function
isSuperSetOf	$ZIGLIB/std/target.zig	/pub fn isSuperSetOf(set: Set, other_set: Set) bool {$/;"	function
isSymbolStubs	$ZIGLIB/std/macho.zig	/pub fn isSymbolStubs(sect: section_64) bool {$/;"	function
isTag	$ZIGLIB/std/meta.zig	/^pub fn isTag(tagged_value: anytype, comptime tag_name: []const u8) bool {$/;"	function
isThumb	$ZIGLIB/std/target.zig	/pub fn isThumb(arch: Arch) bool {$/;"	function
isTombstone	$ZIGLIB/std/hash_map.zig	/pub fn isTombstone(self: Metadata) bool {$/;"	function
isTty	$ZIGLIB/std/fs/file.zig	/pub fn isTty(self: File) bool {$/;"	function
isTuple	$ZIGLIB/std/meta/trait.zig	/^pub fn isTuple(comptime T: type) bool {$/;"	function
isUefi	$ZIGLIB/std/zig/CrossTarget.zig	/^pub fn isUefi(self: CrossTarget) bool {$/;"	function
isUnderMaxLoadPercentage	$ZIGLIB/std/hash_map.zig	/fn isUnderMaxLoadPercentage(size: Size, cap: Size) bool {$/;"	function
isUnreserved	$ZIGLIB/std/Uri.zig	/^fn isUnreserved(c: u8) bool {$/;"	function
isUnsignedInt	$ZIGLIB/std/meta/trait.zig	/^pub fn isUnsignedInt(comptime T: type) bool {$/;"	function
isUpper	$ZIGLIB/std/ascii.zig	/^pub fn isUpper(c: u8) bool {$/;"	function
isUsed	$ZIGLIB/std/hash_map.zig	/pub fn isUsed(self: Metadata) bool {$/;"	function
isValid	$ZIGLIB/std/os/darwin.zig	/pub fn isValid(thread: MachThread) bool {$/;"	function
isValidAlign	$ZIGLIB/std/mem.zig	/^pub fn isValidAlign(alignment: usize) bool {$/;"	function
isValidAlignGeneric	$ZIGLIB/std/mem.zig	/^pub fn isValidAlignGeneric(comptime T: type, alignment: T) bool {$/;"	function
isValidHostName	$ZIGLIB/std/net.zig	/^pub fn isValidHostName(hostname: []const u8) bool {$/;"	function
isValidId	$ZIGLIB/std/zig/fmt.zig	/^pub fn isValidId(bytes: []const u8) bool {$/;"	function
isValidMemory	$ZIGLIB/std/debug.zig	/fn isValidMemory(address: usize) bool {$/;"	function
isVector	$ZIGLIB/std/meta/trait.zig	/const isVector = multiTrait(.{$/;"	constant
isWasm	$ZIGLIB/std/target.zig	/pub fn isWasm(self: Target) bool {$/;"	function
isWhitespace	$ZIGLIB/std/ascii.zig	/^pub fn isWhitespace(c: u8) bool {$/;"	function
isWindows	$ZIGLIB/std/zig/CrossTarget.zig	/^pub fn isWindows(self: CrossTarget) bool {$/;"	function
isWrite	$ZIGLIB/std/fs/file.zig	/pub fn isWrite(self: OpenFlags) bool {$/;"	function
isX86	$ZIGLIB/std/target.zig	/pub fn isX86(arch: Arch) bool {$/;"	function
isZero	$ZIGLIB/std/crypto/pcurves/secp256k1/scalar.zig	/pub fn isZero(n: Scalar) bool {$/;"	function
isZerofill	$ZIGLIB/std/macho.zig	/pub fn isZerofill(sect: section_64) bool {$/;"	function
isZigString	$ZIGLIB/std/meta/trait.zig	/^pub fn isZigString(comptime T: type) bool {$/;"	function
is_64	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/const is_64 = switch (hdr32.e_ident[elf.EI_CLASS]) {$/;"	constant
is_64bit	$ZIGLIB/std/zig/system/linux.zig	/is_64bit: bool = false/;"	field
is_abs	$ZIGLIB/std/fs/path.zig	/var is_abs = false/;"	variable
is_allowzero	$ZIGLIB/std/builtin.zig	/is_allowzero: bool/;"	field
is_an_expected_name	$ZIGLIB/std/process.zig	/const is_an_expected_name = std.mem.eql(u8, "SOMETHING_NEW", entry.key_ptr.*) or std.mem.eql(u8, "SOMETHING_NEW_AND_LONGER", entry.key_ptr.*)/;"	constant
is_arm	$ZIGLIB/std/target.zig	/const is_arm = switch (self.cpu.arch) {$/;"	constant
is_async	$ZIGLIB/std/io.zig	/^pub const is_async = mode != .blocking/;"	constant
is_base	$ZIGLIB/std/crypto/pcurves/secp256k1.zig	/is_base: bool = false/;"	field
is_callconv_inline	$ZIGLIB/std/zig/render.zig	/const is_callconv_inline = mem.eql(u8, "Inline", tree.tokenSlice(tree.nodes.items(.main_token)[fn_proto.ast.callconv_expr]))/;"	constant
is_comptime	$ZIGLIB/std/math.zig	/const is_comptime = @TypeOf(x) == comptime_int/;"	constant
is_configured	$ZIGLIB/std/os/uefi/protocols/ip6_protocol.zig	/is_configured: bool/;"	field
is_const	$ZIGLIB/std/builtin.zig	/is_const: bool/;"	field
is_darwin	$ZIGLIB/std/fs.zig	/^const is_darwin = builtin.os.tag.isDarwin()/;"	constant
is_declaration	$ZIGLIB/std/zig/render.zig	/const is_declaration = fn_proto.name_token != null/;"	constant
is_denormal	$ZIGLIB/std/fmt.zig	/const is_denormal = exponent == 0 and mantissa != 0/;"	constant
is_dir	$ZIGLIB/std/fs.zig	/const is_dir = fstat.mode & os.S.IFMT == os.S.IFDIR/;"	constant
is_directory	$ZIGLIB/std/fs.zig	/is_directory: bool = false/;"	field
is_dumb	$ZIGLIB/std/Progress.zig	/const is_dumb = !self.supports_ansi_escape_codes and !self.is_windows_terminal/;"	constant
is_empty	$ZIGLIB/std/array_hash_map.zig	/var is_empty = false/;"	variable
is_exhaustive	$ZIGLIB/std/builtin.zig	/is_exhaustive: bool/;"	field
is_extern	$ZIGLIB/std/zig/Parse.zig	/var is_extern: bool = false/;"	variable
is_fsctl	$ZIGLIB/std/os/windows.zig	/const is_fsctl = (ioControlCode >> 16) == FILE_DEVICE_FILE_SYSTEM/;"	constant
is_generic	$ZIGLIB/std/builtin.zig	/is_generic: bool/;"	field
is_gnu	$ZIGLIB/std/Thread.zig	/^const is_gnu = target.abi.isGnu()/;"	constant
is_gpu	$ZIGLIB/std/target.zig	/const is_gpu = is_nvptx or is_spirv or arch == .amdgcn/;"	constant
is_haiku	$ZIGLIB/std/crypto/tlcsprng.zig	/^const is_haiku = builtin.os.tag == .haiku/;"	constant
is_identity	$ZIGLIB/std/crypto/pcurves/secp256k1.zig	/const is_identity = @boolToInt(x.equivalent(AffineCoordinates.identityElement.x)) & @boolToInt(y.equivalent(AffineCoordinates.identityElement.y))/;"	constant
is_image	$ZIGLIB/std/coff.zig	/is_image: bool/;"	field
is_inline	$ZIGLIB/std/zig/Parse.zig	/const is_inline = p.eatToken(.keyword_inline) != null/;"	constant
is_integer	$ZIGLIB/std/json.zig	/is_integer: bool/;"	field
is_leap	$ZIGLIB/std/crypto/Certificate.zig	/const is_leap = std.time.epoch.isLeapYear(date.year)/;"	constant
is_linking_libc	$ZIGLIB/std/Build/CompileStep.zig	/is_linking_libc: bool/;"	field
is_linking_libcpp	$ZIGLIB/std/Build/CompileStep.zig	/is_linking_libcpp: bool/;"	field
is_linux	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/const is_linux = builtin.target.os.tag == .linux/;"	constant
is_locked	$ZIGLIB/std/Thread/Mutex.zig	/is_locked: bool = false/;"	field
is_match	$ZIGLIB/std/compress/lzma/decode.zig	/is_match: [192]u16/;"	field
is_mingw	$ZIGLIB/compiler_rt/stack_probe.zig	/^const is_mingw = os_tag == .windows and is_gnu/;"	constant
is_mips	$ZIGLIB/std/os/linux.zig	/^const is_mips = native_arch.isMIPS()/;"	constant
is_multiline_string	$ZIGLIB/std/zig/render.zig	/const is_multiline_string =$/;"	constant
is_nan_2008	$ZIGLIB/std/target.zig	/const is_nan_2008 = mips.featureSetHas(self.cpu.features, .nan2008)/;"	constant
is_nix	$ZIGLIB/std/zig/system/NativePaths.zig	/var is_nix = false/;"	variable
is_noalias	$ZIGLIB/std/builtin.zig	/is_noalias: bool/;"	field
is_note	$ZIGLIB/std/zig/Ast.zig	/is_note: bool = false/;"	field
is_num	$ZIGLIB/std/SemanticVersion.zig	/const is_num = for (id) |c| {$/;"	constant
is_nvptx	$ZIGLIB/std/target.zig	/const is_nvptx = arch == .nvptx or arch == .nvptx64/;"	constant
is_optional	$ZIGLIB/std/dwarf/AT.zig	/^pub const is_optional = 0x21/;"	constant
is_posix	$ZIGLIB/std/time.zig	/const is_posix = switch (builtin.os.tag) {$/;"	constant
is_ppc	$ZIGLIB/std/os/linux.zig	/^const is_ppc = native_arch.isPPC()/;"	constant
is_ppc64	$ZIGLIB/std/os/linux.zig	/^const is_ppc64 = native_arch.isPPC64()/;"	constant
is_pub	$ZIGLIB/std/builtin.zig	/is_pub: bool/;"	field
is_queued	$ZIGLIB/std/Thread/Futex.zig	/is_queued: bool/;"	field
is_really_v6	$ZIGLIB/std/zig/system/linux.zig	/is_really_v6: bool = false/;"	field
is_relative	$ZIGLIB/std/os/windows.zig	/const is_relative = buf.Flags & SYMLINK_FLAG_RELATIVE != 0/;"	constant
is_rep	$ZIGLIB/std/compress/lzma/decode.zig	/is_rep: [12]u16/;"	field
is_rep_0long	$ZIGLIB/std/compress/lzma/decode.zig	/is_rep_0long: [192]u16/;"	field
is_rep_g0	$ZIGLIB/std/compress/lzma/decode.zig	/is_rep_g0: [12]u16/;"	field
is_rep_g1	$ZIGLIB/std/compress/lzma/decode.zig	/is_rep_g1: [12]u16/;"	field
is_rep_g2	$ZIGLIB/std/compress/lzma/decode.zig	/is_rep_g2: [12]u16/;"	field
is_right	$ZIGLIB/std/treap.zig	/const is_right = p.children[1] == node/;"	constant
is_running	$ZIGLIB/std/event/loop.zig	/is_running: Atomic(bool)/;"	field
is_set	$ZIGLIB/std/Thread/ResetEvent.zig	/is_set: bool = false/;"	field
is_simulator_abi	$ZIGLIB/std/zig/system/darwin.zig	/const is_simulator_abi = target.abi == .simulator/;"	constant
is_sparc	$ZIGLIB/std/os/linux.zig	/^const is_sparc = native_arch.isSPARC()/;"	constant
is_spirv	$ZIGLIB/std/target.zig	/const is_spirv = arch == .spirv32 or arch == .spirv64/;"	constant
is_started	$ZIGLIB/std/os/uefi/protocols/ip6_protocol.zig	/is_started: bool/;"	field
is_stmt	$ZIGLIB/std/dwarf.zig	/is_stmt: bool/;"	field
is_submap	$ZIGLIB/std/c/darwin.zig	/is_submap: boolean_t/;"	field
is_symmetric	$ZIGLIB/std/rand/ziggurat.zig	/is_symmetric: bool/;"	field
is_thread_local	$ZIGLIB/std/builtin.zig	/is_thread_local: bool = false/;"	field
is_tuple	$ZIGLIB/std/zig/render.zig	/var is_tuple = true/;"	variable
is_used	$ZIGLIB/std/heap/general_purpose_allocator.zig	/const is_used = @truncate(u1, used_byte.* >> used_bit_index) != 0/;"	constant
is_ustar	$ZIGLIB/std/tar.zig	/pub fn is_ustar(header: Header) bool {$/;"	function
is_var_args	$ZIGLIB/std/builtin.zig	/is_var_args: bool/;"	field
is_volatile	$ZIGLIB/std/builtin.zig	/is_volatile: bool/;"	field
is_windows	$ZIGLIB/std/os.zig	/^const is_windows = builtin.os.tag == .windows/;"	constant
is_windows_terminal	$ZIGLIB/std/Progress.zig	/^is_windows_terminal: bool = false/;"	field
is_y_even	$ZIGLIB/std/math/powi.zig	/const is_y_even = !does_one_overflow and y & 1 == 0/;"	constant
is_zero	$ZIGLIB/std/fmt.zig	/const is_zero = exponent == 0 and mantissa == 0/;"	constant
isa_68000	$ZIGLIB/std/target/m68k.zig	/isa_68000/;"	field
isa_68010	$ZIGLIB/std/target/m68k.zig	/isa_68010/;"	field
isa_68020	$ZIGLIB/std/target/m68k.zig	/isa_68020/;"	field
isa_68030	$ZIGLIB/std/target/m68k.zig	/isa_68030/;"	field
isa_68040	$ZIGLIB/std/target/m68k.zig	/isa_68040/;"	field
isa_68060	$ZIGLIB/std/target/m68k.zig	/isa_68060/;"	field
isa_ext	$ZIGLIB/std/elf.zig	/isa_ext: Elf32_Word/;"	field
isa_future_instructions	$ZIGLIB/std/target/powerpc.zig	/isa_future_instructions/;"	field
isa_level	$ZIGLIB/std/elf.zig	/isa_level: u8/;"	field
isa_rev	$ZIGLIB/std/elf.zig	/isa_rev: u8/;"	field
isa_v206_instructions	$ZIGLIB/std/target/powerpc.zig	/isa_v206_instructions/;"	field
isa_v207_instructions	$ZIGLIB/std/target/powerpc.zig	/isa_v207_instructions/;"	field
isa_v30_instructions	$ZIGLIB/std/target/powerpc.zig	/isa_v30_instructions/;"	field
isa_v31_instructions	$ZIGLIB/std/target/powerpc.zig	/isa_v31_instructions/;"	field
isaac	$ZIGLIB/std/rand/Isaac64.zig	/var isaac = Isaac64{$/;"	variable
isap	$ZIGLIB/std/crypto/isap.zig	/var isap = IsapA128A{$/;"	variable
isatty	$ZIGLIB/std/os.zig	/^pub fn isatty(handle: fd_t) bool {$/;"	function
isel	$ZIGLIB/std/target/powerpc.zig	/isel/;"	field
ispeed	$ZIGLIB/std/os/linux.zig	/ispeed: speed_t/;"	field
isrss	$ZIGLIB/std/os/linux.zig	/isrss: isize/;"	field
issecure_mask	$ZIGLIB/std/os/linux.zig	/^fn issecure_mask(comptime x: comptime_int) comptime_int {$/;"	function
isstdcnt	$ZIGLIB/std/tz.zig	/isstdcnt: u32/;"	field
issuer	$ZIGLIB/std/crypto/Certificate/Bundle/macos.zig	/issuer: u32/;"	field
issuer_alt_name	$ZIGLIB/std/crypto/Certificate.zig	/issuer_alt_name/;"	field
issuer_cert	$ZIGLIB/std/crypto/Certificate/Bundle.zig	/const issuer_cert: Certificate = .{$/;"	constant
issuer_slice	$ZIGLIB/std/crypto/Certificate.zig	/issuer_slice: Slice/;"	field
istack	$ZIGLIB/std/target/csky.zig	/istack/;"	field
isutcnt	$ZIGLIB/std/tz.zig	/isutcnt: u32/;"	field
it16	$ZIGLIB/std/mem.zig	/var it16 = window(u16, std.unicode.utf8ToUtf16LeStringLiteral("abcdefg"), 3, 1)/;"	variable
it_a	$ZIGLIB/std/process.zig	/var it_a = std.unicode.Utf8View.initUnchecked(a).iterator()/;"	variable
it_b	$ZIGLIB/std/process.zig	/var it_b = std.unicode.Utf8View.initUnchecked(b).iterator()/;"	variable
it_dns	$ZIGLIB/std/crypto/Certificate.zig	/var it_dns = std.mem.split(u8, dns_name, ".")/;"	variable
it_host	$ZIGLIB/std/crypto/Certificate.zig	/var it_host = std.mem.split(u8, host_name, ".")/;"	variable
it_interval	$ZIGLIB/std/os/linux.zig	/it_interval: timespec/;"	field
it_params	$ZIGLIB/std/crypto/phc_encoding.zig	/var it_params = mem.split(u8, field, params_delimiter)/;"	variable
it_value	$ZIGLIB/std/os/linux.zig	/it_value: timespec/;"	field
itanium	$ZIGLIB/std/target.zig	/itanium/;"	field
item	$ZIGLIB/std/zig/system/NativePaths.zig	/const item = try std.fmt.allocPrintZ(self.warnings.allocator, fmt, args)/;"	constant
item1	$ZIGLIB/std/priority_dequeue.zig	/var item1 = self.getItem(index1)/;"	variable
item2	$ZIGLIB/std/priority_dequeue.zig	/var item2 = self.getItem(index2)/;"	variable
item_alignment	$ZIGLIB/std/heap/memory_pool.zig	/pub const item_alignment = std.math.max(@alignOf(Node), pool_options.alignment orelse 0)/;"	constant
item_size	$ZIGLIB/std/heap/memory_pool.zig	/pub const item_size = std.math.max(@sizeOf(Node), @sizeOf(Item))/;"	constant
items	$ZIGLIB/std/zig/Parse.zig	/const items = p.scratch.items[scratch_top..]/;"	constant
items_end	$ZIGLIB/std/zig/Ast.zig	/items_end: Index/;"	field
items_start	$ZIGLIB/std/zig/Ast.zig	/items_start: Index/;"	field
iter	$ZIGLIB/std/treap.zig	/var iter = SliceIterRandomOrder(TestNode).init(&nodes, prng.random())/;"	variable
iter_create	$ZIGLIB/std/os/linux/bpf.zig	/iter_create: IterCreateAttr/;"	field
iterable_dir	$ZIGLIB/std/testing.zig	/iterable_dir: std.fs.IterableDir/;"	field
iterate	$ZIGLIB/std/zig/Ast.zig	/pub fn iterate(fn_proto: *const FnProto, tree: *const Ast) Iterator {$/;"	function
iterateAssumeFirstIteration	$ZIGLIB/std/fs.zig	/pub fn iterateAssumeFirstIteration(self: IterableDir) Iterator {$/;"	function
iterateImpl	$ZIGLIB/std/fs.zig	/fn iterateImpl(self: IterableDir, first_iter_start_value: bool) Iterator {$/;"	function
iterateSection	$ZIGLIB/std/Ini.zig	/^pub fn iterateSection(ini: Ini, header: []const u8) SectionIterator {$/;"	function
iterations	$ZIGLIB/std/hash_map.zig	/const iterations = 100/;"	constant
iterative_hash	$ZIGLIB/std/hash/wyhash.zig	/const iterative_hash = wy.final()/;"	constant
iterator	$ZIGLIB/std/unicode.zig	/pub fn iterator(s: Utf8View) Utf8Iterator {$/;"	function
iters	$ZIGLIB/std/hash/cityhash.zig	/var iters = (str.len - 1) \/ 20/;"	variable
itimerspec	$ZIGLIB/std/os/linux.zig	/^pub const itimerspec = extern struct {$/;"	struct
iundefsym	$ZIGLIB/std/macho.zig	/iundefsym: u32 = 0/;"	field
ivalue	$ZIGLIB/std/os/linux.zig	/ivalue: i32/;"	field
ivln10hi	$ZIGLIB/compiler_rt/log10.zig	/const ivln10hi: f64 = 4.34294481878168880939e-01/;"	constant
ivln10lo	$ZIGLIB/compiler_rt/log10.zig	/const ivln10lo: f64 = 2.50829467116452752298e-11/;"	constant
ivln2hi	$ZIGLIB/compiler_rt/log2.zig	/const ivln2hi: f64 = 1.44269504072144627571e+00/;"	constant
ivln2lo	$ZIGLIB/compiler_rt/log2.zig	/const ivln2lo: f64 = 1.67517131648865118353e-10/;"	constant
ivybridge	$ZIGLIB/std/target/x86.zig	/pub const ivybridge = CpuModel{$/;"	constant
iwmmxt	$ZIGLIB/std/target/arm.zig	/pub const iwmmxt = CpuModel{$/;"	constant
iwmmxt2	$ZIGLIB/std/target/arm.zig	/iwmmxt2/;"	field
ixrss	$ZIGLIB/std/os/linux.zig	/ixrss: isize/;"	field
j0_sign	$ZIGLIB/std/math/big/int.zig	/const j0_sign = llcmp(a0x, a1)/;"	constant
j1_sign	$ZIGLIB/std/math/big/int.zig	/const j1_sign = llcmp(b1, b0x)/;"	constant
java	$ZIGLIB/std/target/csky.zig	/java/;"	field
jbase	$ZIGLIB/std/time/epoch.zig	/^pub const jbase = pickos/;"	constant
jiffies64	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const jiffies64 = @intToPtr(fn () u64, 118)/;"	constant
jmpcall	$ZIGLIB/std/target/avr.zig	/jmpcall/;"	field
jobs	$ZIGLIB/std/event/batch.zig	/jobs: [max_jobs]Job/;"	field
join	$ZIGLIB/std/simd.zig	/^pub fn join(a: anytype, b: anytype) @Vector(vectorLength(@TypeOf(a)) + vectorLength(@TypeOf(b)), std.meta.Child(@TypeOf(a))) {$/;"	function
joinMaybeZ	$ZIGLIB/std/mem.zig	/^fn joinMaybeZ(allocator: Allocator, separator: []const u8, slices: []const []const u8, zero: bool) ![]u8 {$/;"	function
joinSepMaybeZ	$ZIGLIB/std/fs/path.zig	/^fn joinSepMaybeZ(allocator: Allocator, separator: u8, comptime sepPredicate: fn (u8) bool, paths: []const []const u8, zero: bool) ![]u8 {$/;"	function
joinZ	$ZIGLIB/std/mem.zig	/^pub fn joinZ(allocator: Allocator, separator: []const u8, slices: []const []const u8) ![:0]u8 {$/;"	function
jsconv	$ZIGLIB/std/target/aarch64.zig	/jsconv/;"	field
jset	$ZIGLIB/std/os/linux/bpf.zig	/pub fn jset(dst: Reg, src: anytype, off: i16) Insn {$/;"	function
jsge	$ZIGLIB/std/os/linux/bpf.zig	/pub fn jsge(dst: Reg, src: anytype, off: i16) Insn {$/;"	function
jsgt	$ZIGLIB/std/os/linux/bpf.zig	/pub fn jsgt(dst: Reg, src: anytype, off: i16) Insn {$/;"	function
jsle	$ZIGLIB/std/os/linux/bpf.zig	/pub fn jsle(dst: Reg, src: anytype, off: i16) Insn {$/;"	function
jslt	$ZIGLIB/std/os/linux/bpf.zig	/pub fn jslt(dst: Reg, src: anytype, off: i16) Insn {$/;"	function
jsonStringify	$ZIGLIB/std/json.zig	/pub fn jsonStringify($/;"	function
json_capsule_data_table_guid	$ZIGLIB/std/os/uefi/tables/configuration_table.zig	/pub const json_capsule_data_table_guid align(8) = Guid{$/;"	constant
json_capsule_result_table_guid	$ZIGLIB/std/os/uefi/tables/configuration_table.zig	/pub const json_capsule_result_table_guid align(8) = Guid{$/;"	constant
json_config_data_table_guid	$ZIGLIB/std/os/uefi/tables/configuration_table.zig	/pub const json_config_data_table_guid align(8) = Guid{$/;"	constant
jump	$ZIGLIB/std/rand/Xoshiro256.zig	/^pub fn jump(self: *Xoshiro256) void {$/;"	function
k0k1	$ZIGLIB/std/crypto/salsa20.zig	/const k0k1 = Half{ input[0][0], input[0][1] }/;"	constant
k0n0	$ZIGLIB/std/crypto/salsa20.zig	/const k0n0 = Half{ n0k0[1], n0k0[0] }/;"	constant
k1k6	$ZIGLIB/std/crypto/salsa20.zig	/const k1k6 = Half{ k0k1[1], k6k7[0] }/;"	constant
k2k3	$ZIGLIB/std/crypto/salsa20.zig	/const k2k3 = Half{ input[0][2], input[0][3] }/;"	constant
k2k3n3k7	$ZIGLIB/std/crypto/salsa20.zig	/const k2k3n3k7 = Lane{ k2k3[0], k2k3[1], n3k7[0], n3k7[1] }/;"	constant
k4k5	$ZIGLIB/std/crypto/salsa20.zig	/const k4k5 = Half{ input[1][0], input[1][1] }/;"	constant
k4k5k0n0	$ZIGLIB/std/crypto/salsa20.zig	/const k4k5k0n0 = Lane{ k4k5[0], k4k5[1], k0n0[0], k0n0[1] }/;"	constant
k6_2	$ZIGLIB/std/target/x86.zig	/pub const k6_2 = CpuModel{$/;"	constant
k6_3	$ZIGLIB/std/target/x86.zig	/pub const k6_3 = CpuModel{$/;"	constant
k6k1	$ZIGLIB/std/crypto/salsa20.zig	/const k6k1 = Half{ k1k6[1], k1k6[0] }/;"	constant
k6k7	$ZIGLIB/std/crypto/salsa20.zig	/const k6k7 = Half{ input[1][2], input[1][3] }/;"	constant
k7n3	$ZIGLIB/std/crypto/salsa20.zig	/const k7n3 = Half{ k6k7[1], n3n0[0] }/;"	constant
k8_sse3	$ZIGLIB/std/target/x86.zig	/pub const k8_sse3 = CpuModel{$/;"	constant
kTen10	$ZIGLIB/std/fmt/errol.zig	/const kTen10: u64 = kTen8 * 100/;"	constant
kTen11	$ZIGLIB/std/fmt/errol.zig	/const kTen11: u64 = kTen8 * 1000/;"	constant
kTen12	$ZIGLIB/std/fmt/errol.zig	/const kTen12: u64 = kTen8 * 10000/;"	constant
kTen13	$ZIGLIB/std/fmt/errol.zig	/const kTen13: u64 = kTen8 * 100000/;"	constant
kTen14	$ZIGLIB/std/fmt/errol.zig	/const kTen14: u64 = kTen8 * 1000000/;"	constant
kTen15	$ZIGLIB/std/fmt/errol.zig	/const kTen15: u64 = kTen8 * 10000000/;"	constant
kTen16	$ZIGLIB/std/fmt/errol.zig	/const kTen16: u64 = kTen8 * kTen8/;"	constant
kTen8	$ZIGLIB/std/fmt/errol.zig	/const kTen8: u64 = 100000000/;"	constant
kTen9	$ZIGLIB/std/fmt/errol.zig	/const kTen9: u64 = kTen8 * 10/;"	constant
k_inv	$ZIGLIB/std/crypto/ecdsa.zig	/const k_inv = k.invert()/;"	constant
k_sigaction	$ZIGLIB/std/os/linux.zig	/^pub const k_sigaction = switch (native_arch) {$/;"	constant
k_sigaction_funcs	$ZIGLIB/std/os/linux.zig	/^const k_sigaction_funcs = struct {$/;"	struct
kabini	$ZIGLIB/std/target/amdgpu.zig	/pub const kabini = CpuModel{$/;"	constant
kalimba	$ZIGLIB/std/target.zig	/kalimba/;"	field
kaveri	$ZIGLIB/std/target/amdgpu.zig	/pub const kaveri = CpuModel{$/;"	constant
kcmp	$ZIGLIB/std/os/linux/syscalls.zig	/kcmp = Linux + 347/;"	field
keccakF	$ZIGLIB/std/crypto/sha3.zig	/^fn keccakF(comptime F: usize, d: *[F \/ 8]u8) void {$/;"	function
keep_shift	$ZIGLIB/std/packed_int_array.zig	/const keep_shift = switch (endian) {$/;"	constant
kern_features	$ZIGLIB/std/os/linux/syscalls.zig	/kern_features = 340/;"	field
kern_return_t	$ZIGLIB/std/c/darwin.zig	/^pub const kern_return_t = c_int/;"	constant
kern_version	$ZIGLIB/std/os/linux/bpf.zig	/kern_version: u32/;"	field
kernel	$ZIGLIB/std/builtin.zig	/kernel/;"	field
kernel_backlog	$ZIGLIB/std/os/linux/io_uring.zig	/const kernel_backlog = 1/;"	constant
kernel_build_date	$ZIGLIB/std/c/haiku.zig	/kernel_build_date: [32]u8/;"	field
kernel_build_time	$ZIGLIB/std/c/haiku.zig	/kernel_build_time: [32]u8/;"	field
kernel_name	$ZIGLIB/std/c/haiku.zig	/kernel_name: [256]u8/;"	field
kernel_rwf	$ZIGLIB/std/os/linux.zig	/^pub const kernel_rwf = u32/;"	constant
kernel_timespec	$ZIGLIB/std/os/linux.zig	/^pub const kernel_timespec = if (@sizeOf(usize) >= 8) timespec else extern struct {$/;"	constant
kernel_version	$ZIGLIB/std/c/haiku.zig	/kernel_version: i64/;"	field
kevent	$ZIGLIB/std/os.zig	/^pub fn kevent($/;"	function
kevent64_s	$ZIGLIB/std/c/darwin.zig	/^pub const kevent64_s = extern struct {$/;"	struct
kevent_array	$ZIGLIB/std/event/loop.zig	/const kevent_array = @as(*const [1]os.Kevent, &eventfd_node.kevent)/;"	constant
kevs	$ZIGLIB/std/fs/watch.zig	/var kevs = [1]os.Kevent{undefined}/;"	variable
kexec_file_load	$ZIGLIB/std/os/linux/syscalls.zig	/kexec_file_load = 401/;"	field
kexec_load	$ZIGLIB/std/os/linux/syscalls.zig	/kexec_load = Linux + 311/;"	field
key0	$ZIGLIB/std/os.zig	/const key0 = small_key_buf[0..key.len :0]/;"	constant
keyForIndex	$ZIGLIB/std/enums.zig	/pub fn keyForIndex(index: usize) Key {$/;"	function
keyIterator	$ZIGLIB/std/hash_map.zig	/pub fn keyIterator(self: *const Self) KeyIterator {$/;"	function
keyPtr	$ZIGLIB/std/hash_map.zig	/const keyPtr = map.getKeyPtr(i)/;"	constant
keyToWords	$ZIGLIB/std/crypto/salsa20.zig	/^fn keyToWords(key: [32]u8) [8]u32 {$/;"	function
key_align	$ZIGLIB/std/hash_map.zig	/const key_align = if (@sizeOf(K) == 0) 1 else @alignOf(K)/;"	constant
key_bits	$ZIGLIB/std/crypto/aes/soft.zig	/pub const key_bits: usize = 256/;"	constant
key_blinding	$ZIGLIB/std/crypto/25519/ed25519.zig	/pub const key_blinding = struct {$/;"	struct
key_block	$ZIGLIB/std/crypto/aegis.zig	/const key_block = AesBlock.fromBytes(&key)/;"	constant
key_block1	$ZIGLIB/std/crypto/aegis.zig	/const key_block1 = AesBlock.fromBytes(key[0..16])/;"	constant
key_block2	$ZIGLIB/std/crypto/aegis.zig	/const key_block2 = AesBlock.fromBytes(key[16..32])/;"	constant
key_buf	$ZIGLIB/std/zig/system/windows.zig	/var key_buf: [max_value_len \/ 2 + 1]u16 = undefined/;"	variable
key_hash	$ZIGLIB/std/array_hash_map.zig	/const key_hash = if (store_hash) key_ctx.hash(key) else {}/;"	constant
key_len	$ZIGLIB/std/zig/system/windows.zig	/const key_len = try std.unicode.utf8ToUtf16Le(&key_buf, @field(args, field.name).key)/;"	constant
key_length	$ZIGLIB/std/crypto/siphash.zig	/pub const key_length = 16/;"	constant
key_length_max	$ZIGLIB/std/crypto/blake2.zig	/pub const key_length_max = 64/;"	constant
key_length_min	$ZIGLIB/std/crypto/hmac.zig	/pub const key_length_min = 0/;"	constant
key_pair	$ZIGLIB/std/crypto/25519/ed25519.zig	/const key_pair = try Ed25519.KeyPair.create(seed)/;"	constant
key_ptr	$ZIGLIB/std/hash_map.zig	/key_ptr: *K/;"	field
key_schedule	$ZIGLIB/std/crypto/aes/soft.zig	/key_schedule: KeySchedule(Aes)/;"	field
key_sec1	$ZIGLIB/std/crypto/ecdsa.zig	/const key_sec1 = try fmt.hexToBytes(&key_sec1_, vector.key)/;"	constant
key_sec1_	$ZIGLIB/std/crypto/ecdsa.zig	/var key_sec1_: [Scheme.PublicKey.uncompressed_sec1_encoded_length]u8 = undefined/;"	variable
key_share	$ZIGLIB/std/crypto/tls.zig	/key_share = 51/;"	field
key_shift_state	$ZIGLIB/std/os/uefi/protocols/simple_text_input_ex_protocol.zig	/key_shift_state: KeyShiftState/;"	field
key_size	$ZIGLIB/std/os/linux/bpf.zig	/key_size: u32/;"	field
key_slice	$ZIGLIB/std/os.zig	/const key_slice = mem.sliceTo(key, 0)/;"	constant
key_source_slice	$ZIGLIB/std/json.zig	/const key_source_slice = stringToken.slice(tokens.slice, tokens.i - 1)/;"	constant
key_start	$ZIGLIB/std/process.zig	/const key_start = i/;"	constant
key_state	$ZIGLIB/std/os/uefi/protocols/simple_text_input_ex_protocol.zig	/key_state: KeyState = undefined/;"	field
key_state_exposed	$ZIGLIB/std/os/uefi/protocols/simple_text_input_ex_protocol.zig	/key_state_exposed: bool/;"	field
key_toggle_state	$ZIGLIB/std/os/uefi/protocols/simple_text_input_ex_protocol.zig	/key_toggle_state: KeyToggleState/;"	field
key_update	$ZIGLIB/std/crypto/tls.zig	/key_update = 24/;"	field
key_usage	$ZIGLIB/std/crypto/Certificate.zig	/key_usage/;"	field
key_w	$ZIGLIB/std/process.zig	/const key_w = try std.unicode.utf8ToUtf16LeWithNull(stack_alloc.get(), key)/;"	constant
key_words	$ZIGLIB/std/crypto/blake3.zig	/const key_words = wordsFromLittleEndianBytes(8, key)/;"	constant
keyboard_layout	$ZIGLIB/std/os/uefi/protocols/hii.zig	/pub const keyboard_layout: u8 = 0x9/;"	constant
keyctl	$ZIGLIB/std/os/linux/syscalls.zig	/keyctl = Linux + 282/;"	field
keyed_hash	$ZIGLIB/std/crypto/blake3.zig	/keyed_hash: *const [262]u8/;"	field
keyed_hash_state	$ZIGLIB/std/crypto/blake3.zig	/var keyed_hash_state = Blake3.init(.{ .key = reference_test.key.* })/;"	variable
keys	$ZIGLIB/std/os/linux/bpf.zig	/keys: u64/;"	field
keys_array	$ZIGLIB/std/array_hash_map.zig	/const keys_array = slice.items(.key)/;"	constant
keys_end	$ZIGLIB/std/hash_map.zig	/const keys_end = keys_start + new_capacity * @sizeOf(K)/;"	constant
keys_ptr	$ZIGLIB/std/hash_map.zig	/var keys_ptr = self.keys()/;"	variable
keys_start	$ZIGLIB/std/hash_map.zig	/const keys_start = std.mem.alignForward(meta_size, key_align)/;"	constant
keyword_addrspace	$ZIGLIB/std/zig/tokenizer.zig	/keyword_addrspace/;"	field
keyword_align	$ZIGLIB/std/zig/tokenizer.zig	/keyword_align/;"	field
keyword_allowzero	$ZIGLIB/std/zig/tokenizer.zig	/keyword_allowzero/;"	field
keyword_and	$ZIGLIB/std/zig/tokenizer.zig	/keyword_and/;"	field
keyword_anyframe	$ZIGLIB/std/zig/tokenizer.zig	/keyword_anyframe/;"	field
keyword_anytype	$ZIGLIB/std/zig/tokenizer.zig	/keyword_anytype/;"	field
keyword_asm	$ZIGLIB/std/zig/tokenizer.zig	/keyword_asm/;"	field
keyword_async	$ZIGLIB/std/zig/tokenizer.zig	/keyword_async/;"	field
keyword_await	$ZIGLIB/std/zig/tokenizer.zig	/keyword_await/;"	field
keyword_break	$ZIGLIB/std/zig/tokenizer.zig	/keyword_break/;"	field
keyword_callconv	$ZIGLIB/std/zig/tokenizer.zig	/keyword_callconv/;"	field
keyword_catch	$ZIGLIB/std/zig/tokenizer.zig	/keyword_catch/;"	field
keyword_comptime	$ZIGLIB/std/zig/tokenizer.zig	/keyword_comptime/;"	field
keyword_const	$ZIGLIB/std/zig/tokenizer.zig	/keyword_const/;"	field
keyword_continue	$ZIGLIB/std/zig/tokenizer.zig	/keyword_continue/;"	field
keyword_defer	$ZIGLIB/std/zig/tokenizer.zig	/keyword_defer/;"	field
keyword_else	$ZIGLIB/std/zig/tokenizer.zig	/keyword_else/;"	field
keyword_enum	$ZIGLIB/std/zig/tokenizer.zig	/keyword_enum/;"	field
keyword_errdefer	$ZIGLIB/std/zig/tokenizer.zig	/keyword_errdefer/;"	field
keyword_error	$ZIGLIB/std/zig/tokenizer.zig	/keyword_error/;"	field
keyword_export	$ZIGLIB/std/zig/tokenizer.zig	/keyword_export/;"	field
keyword_extern	$ZIGLIB/std/zig/tokenizer.zig	/keyword_extern/;"	field
keyword_fn	$ZIGLIB/std/zig/tokenizer.zig	/keyword_fn/;"	field
keyword_for	$ZIGLIB/std/zig/tokenizer.zig	/keyword_for/;"	field
keyword_if	$ZIGLIB/std/zig/tokenizer.zig	/keyword_if/;"	field
keyword_inline	$ZIGLIB/std/zig/tokenizer.zig	/keyword_inline/;"	field
keyword_linksection	$ZIGLIB/std/zig/tokenizer.zig	/keyword_linksection/;"	field
keyword_noalias	$ZIGLIB/std/zig/tokenizer.zig	/keyword_noalias/;"	field
keyword_noinline	$ZIGLIB/std/zig/tokenizer.zig	/keyword_noinline/;"	field
keyword_nosuspend	$ZIGLIB/std/zig/tokenizer.zig	/keyword_nosuspend/;"	field
keyword_opaque	$ZIGLIB/std/zig/tokenizer.zig	/keyword_opaque/;"	field
keyword_or	$ZIGLIB/std/zig/tokenizer.zig	/keyword_or/;"	field
keyword_orelse	$ZIGLIB/std/zig/tokenizer.zig	/keyword_orelse/;"	field
keyword_packed	$ZIGLIB/std/zig/tokenizer.zig	/keyword_packed/;"	field
keyword_pub	$ZIGLIB/std/zig/tokenizer.zig	/keyword_pub/;"	field
keyword_resume	$ZIGLIB/std/zig/tokenizer.zig	/keyword_resume/;"	field
keyword_return	$ZIGLIB/std/zig/tokenizer.zig	/keyword_return/;"	field
keyword_struct	$ZIGLIB/std/zig/tokenizer.zig	/keyword_struct/;"	field
keyword_suspend	$ZIGLIB/std/zig/tokenizer.zig	/keyword_suspend/;"	field
keyword_switch	$ZIGLIB/std/zig/tokenizer.zig	/keyword_switch/;"	field
keyword_test	$ZIGLIB/std/zig/tokenizer.zig	/keyword_test/;"	field
keyword_threadlocal	$ZIGLIB/std/zig/tokenizer.zig	/keyword_threadlocal/;"	field
keyword_try	$ZIGLIB/std/zig/tokenizer.zig	/keyword_try/;"	field
keyword_union	$ZIGLIB/std/zig/tokenizer.zig	/keyword_union/;"	field
keyword_unreachable	$ZIGLIB/std/zig/tokenizer.zig	/keyword_unreachable/;"	field
keyword_usingnamespace	$ZIGLIB/std/zig/tokenizer.zig	/keyword_usingnamespace/;"	field
keyword_var	$ZIGLIB/std/zig/tokenizer.zig	/keyword_var/;"	field
keyword_volatile	$ZIGLIB/std/zig/tokenizer.zig	/keyword_volatile/;"	field
keyword_while	$ZIGLIB/std/zig/tokenizer.zig	/keyword_while/;"	field
keywords	$ZIGLIB/std/zig/tokenizer.zig	/pub const keywords = std.ComptimeStringMap(Tag, .{$/;"	constant
kf_pipe_pad0	$ZIGLIB/std/c/freebsd.zig	/kf_pipe_pad0: [3]u32/;"	field
kfile	$ZIGLIB/std/os.zig	/var kfile: system.kinfo_file = undefined/;"	variable
kfreebsd	$ZIGLIB/std/target.zig	/kfreebsd/;"	field
kill	$ZIGLIB/std/os/linux/syscalls.zig	/kill = Linux + 60/;"	field
killPosix	$ZIGLIB/std/child_process.zig	/pub fn killPosix(self: *ChildProcess) !Term {$/;"	function
killWindows	$ZIGLIB/std/child_process.zig	/pub fn killWindows(self: *ChildProcess, exit_code: windows.UINT) !Term {$/;"	function
kind	$ZIGLIB/std/zig/system/darwin/macos.zig	/kind: Kind = .unknown/;"	field
kind_byte	$ZIGLIB/std/Build/CheckObjectStep.zig	/const kind_byte = try std.leb.readULEB128(u8, reader)/;"	constant
kind_flag	$ZIGLIB/std/os/linux/bpf/btf.zig	/kind_flag: bool/;"	field
kinfo_file	$ZIGLIB/std/c/freebsd.zig	/^pub const kinfo_file = extern struct {$/;"	struct
kln2	$ZIGLIB/std/math/expo2.zig	/const kln2 = 0x1.62066151ADD8BP+10/;"	constant
known_models	$ZIGLIB/std/zig/system/linux.zig	/var known_models: [self.cores.len]?*const Target.Cpu.Model = undefined/;"	variable
known_win10_build_numbers	$ZIGLIB/std/target.zig	/pub const known_win10_build_numbers = [_]u32{$/;"	constant
kprobe	$ZIGLIB/std/os/linux/bpf.zig	/kprobe/;"	field
kqPutEvents	$ZIGLIB/std/fs/watch.zig	/fn kqPutEvents(self: *Self, fd: os.fd_t, file_path: []const u8, put: *OsData.Put) void {$/;"	function
kqfd	$ZIGLIB/std/event/loop.zig	/kqfd: i32/;"	field
kqueue	$ZIGLIB/std/os.zig	/^pub fn kqueue() KQueueError!i32 {$/;"	function
krait	$ZIGLIB/std/target/arm.zig	/pub const krait = CpuModel{$/;"	constant
kryo	$ZIGLIB/std/target/arm.zig	/pub const kryo = CpuModel{$/;"	constant
ksa_arg	$ZIGLIB/std/os/linux.zig	/const ksa_arg = if (act != null) @ptrToInt(&ksa) else 0/;"	constant
ktime_get_boot_ns	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const ktime_get_boot_ns = @intToPtr(fn () u64, 125)/;"	constant
ktime_get_ns	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const ktime_get_ns = @intToPtr(fn () u64, 5)/;"	constant
ktop	$ZIGLIB/std/crypto/aes_ocb.zig	/const ktop = mem.readIntBig(u128, &ktop_)/;"	constant
ktop_	$ZIGLIB/std/crypto/aes_ocb.zig	/var ktop_: Block = undefined/;"	variable
kunits	$ZIGLIB/std/fmt.zig	/const kunits = ns_remaining * 1000 \/ unit.ns/;"	constant
kvSplit	$ZIGLIB/std/crypto/phc_encoding.zig	/^fn kvSplit(str: []const u8) !struct { key: []const u8, value: []const u8 } {$/;"	function
kv_delimiter	$ZIGLIB/std/crypto/phc_encoding.zig	/^const kv_delimiter = "="/;"	constant
kvlen	$ZIGLIB/std/os/linux.zig	/const kvlen = if (vlen > IOV_MAX) IOV_MAX else vlen/;"	constant
kvs_array	$ZIGLIB/std/meta.zig	/var kvs_array: [@typeInfo(T).Enum.fields.len]EnumKV = undefined/;"	variable
kxn1	$ZIGLIB/std/crypto/aegis.zig	/const kxn1 = key_block1.xorBlocks(nonce_block1)/;"	constant
kxn2	$ZIGLIB/std/crypto/aegis.zig	/const kxn2 = key_block2.xorBlocks(nonce_block2)/;"	constant
l2_first	$ZIGLIB/std/linked_list.zig	/const l2_first = list2.first orelse return/;"	constant
l3_csum_replace	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const l3_csum_replace = @intToPtr(fn (skb: *kern.SkBuff, offset: u32, from: u64, to: u64, size: u64) c_long, 10)/;"	constant
l4_csum_replace	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const l4_csum_replace = @intToPtr(fn (skb: *kern.SkBuff, offset: u32, from: u64, to: u64, flags: u64) c_long, 11)/;"	constant
lNetworkEvents	$ZIGLIB/std/os/windows/ws2_32.zig	/lNetworkEvents: i32/;"	field
lParam	$ZIGLIB/std/os/windows/ws2_32.zig	/lParam: LPARAM/;"	field
lPrivate	$ZIGLIB/std/os/windows/user32.zig	/lPrivate: DWORD/;"	field
l_addr	$ZIGLIB/std/dynamic_library.zig	/l_addr: usize/;"	field
l_brace	$ZIGLIB/std/zig/tokenizer.zig	/l_brace/;"	field
l_bracket	$ZIGLIB/std/zig/tokenizer.zig	/l_bracket/;"	field
l_checksum	$ZIGLIB/std/elf.zig	/l_checksum: Elf64_Word/;"	field
l_flags	$ZIGLIB/std/elf.zig	/l_flags: Elf64_Word/;"	field
l_ld	$ZIGLIB/std/dynamic_library.zig	/l_ld: ?*elf.Dyn/;"	field
l_linger	$ZIGLIB/std/os/windows/ws2_32.zig	/l_linger: u16/;"	field
l_name	$ZIGLIB/std/elf.zig	/l_name: Elf64_Word/;"	field
l_next	$ZIGLIB/std/dynamic_library.zig	/l_next: ?*LinkMap/;"	field
l_onoff	$ZIGLIB/std/os/windows/ws2_32.zig	/l_onoff: u16/;"	field
l_paren	$ZIGLIB/std/zig/tokenizer.zig	/l_paren/;"	field
l_prev	$ZIGLIB/std/dynamic_library.zig	/l_prev: ?*LinkMap/;"	field
l_time_stamp	$ZIGLIB/std/elf.zig	/l_time_stamp: Elf64_Word/;"	field
l_version	$ZIGLIB/std/elf.zig	/l_version: Elf64_Word/;"	field
label	$ZIGLIB/std/zig/render.zig	/const label = datas[node].lhs/;"	constant
labelOf	$ZIGLIB/std/net.zig	/^fn labelOf(a: [16]u8) u8 {$/;"	function
label_token	$ZIGLIB/std/zig/render.zig	/const label_token = datas[node].lhs/;"	constant
labeled_statement	$ZIGLIB/std/zig/Parse.zig	/const labeled_statement = try p.parseLabeledStatement()/;"	constant
ladder	$ZIGLIB/std/crypto/25519/curve25519.zig	/fn ladder(p: Curve25519, s: [32]u8, comptime bits: usize) IdentityElementError!Curve25519 {$/;"	function
lakemont	$ZIGLIB/std/target/x86.zig	/pub const lakemont = CpuModel{$/;"	constant
lambda	$ZIGLIB/std/crypto/pcurves/secp256k1.zig	/const lambda: u256 = 37718080363155996902926221483475020450927657555482586988616620542887997980018/;"	constant
lambda_p	$ZIGLIB/std/crypto/pcurves/secp256k1.zig	/var lambda_p = try pcMul(&pc, Endormorphism.lambda_s, true)/;"	variable
lambda_s	$ZIGLIB/std/crypto/pcurves/secp256k1.zig	/const lambda_s = s: {$/;"	constant
lanai	$ZIGLIB/std/target.zig	/lanai/;"	field
landlock_add_rule	$ZIGLIB/std/os/linux/syscalls.zig	/landlock_add_rule = Linux + 445/;"	field
landlock_create_ruleset	$ZIGLIB/std/os/linux/syscalls.zig	/landlock_create_ruleset = Linux + 444/;"	field
landlock_restrict_self	$ZIGLIB/std/os/linux/syscalls.zig	/landlock_restrict_self = Linux + 446/;"	field
lane	$ZIGLIB/std/crypto/argon2.zig	/var lane: u24 = 0/;"	variable
lanes	$ZIGLIB/std/crypto/argon2.zig	/const lanes = memory \/ threads/;"	constant
language	$ZIGLIB/std/os/uefi/protocols/hii.zig	/language: [3]u8/;"	field
language_name	$ZIGLIB/std/os/uefi/protocols/hii.zig	/language_name: u16/;"	field
language_window	$ZIGLIB/std/os/uefi/protocols/hii.zig	/language_window: [16]u16/;"	field
large	$ZIGLIB/std/heap/general_purpose_allocator.zig	/const large = try allocator.alloc(u8, 2 * page_size)/;"	constant
large_align	$ZIGLIB/std/heap.zig	/const large_align: usize = mem.page_size \/ 2/;"	constant
large_allocations	$ZIGLIB/std/heap/general_purpose_allocator.zig	/large_allocations: LargeAllocTable = .{}/;"	field
large_object_size	$ZIGLIB/std/heap/general_purpose_allocator.zig	/const large_object_size = page_size * 2 + 50/;"	constant
larger_type_bits	$ZIGLIB/std/leb128.zig	/const larger_type_bits = ((@typeInfo(T).Int.bits + 8) \/ 8) * 8/;"	constant
largest_atomic_size	$ZIGLIB/compiler_rt/atomics.zig	/^const largest_atomic_size = switch (arch) {$/;"	constant
largest_bucket_object_size	$ZIGLIB/std/heap/general_purpose_allocator.zig	/const largest_bucket_object_size = 1 << (small_bucket_count - 1)/;"	constant
largest_positive_integer	$ZIGLIB/std/math.zig	/const largest_positive_integer = max(if (from < 0) (-from) - 1 else from, to)/;"	constant
largest_power_of_ten	$ZIGLIB/std/fmt/parse_float/FloatInfo.zig	/^largest_power_of_ten: comptime_int/;"	field
last	$ZIGLIB/std/sort.zig	/var last: usize = 0/;"	variable
lastA	$ZIGLIB/std/sort.zig	/var lastA = firstA/;"	variable
lastB	$ZIGLIB/std/sort.zig	/var lastB = Range.init(0, 0)/;"	variable
lastIndexOf	$ZIGLIB/std/mem.zig	/^pub fn lastIndexOf(comptime T: type, haystack: []const T, needle: []const T) ?usize {$/;"	function
lastIndexOfAny	$ZIGLIB/std/mem.zig	/^pub fn lastIndexOfAny(comptime T: type, slice: []const T, values: []const T) ?usize {$/;"	function
lastIndexOfLinear	$ZIGLIB/std/mem.zig	/^pub fn lastIndexOfLinear(comptime T: type, haystack: []const T, needle: []const T) ?usize {$/;"	function
lastIndexOfScalar	$ZIGLIB/std/mem.zig	/^pub fn lastIndexOfScalar(comptime T: type, slice: []const T, value: T) ?usize {$/;"	function
lastIndexOfValue	$ZIGLIB/std/simd.zig	/^pub fn lastIndexOfValue(vec: anytype, value: std.meta.Child(@TypeOf(vec))) ?VectorIndex(@TypeOf(vec)) {$/;"	function
lastN	$ZIGLIB/std/compress/lzma/decode/lzbuffer.zig	/pub fn lastN(self: Self, dist: usize) !u8 {$/;"	function
lastOr	$ZIGLIB/std/compress/lzma/decode/lzbuffer.zig	/pub fn lastOr(self: Self, lit: u8) u8 {$/;"	function
lastToken	$ZIGLIB/std/zig/Ast.zig	/^pub fn lastToken(tree: Ast, node: Node.Index) TokenIndex {$/;"	function
lastTrue	$ZIGLIB/std/simd.zig	/^pub fn lastTrue(vec: anytype) ?VectorIndex(@TypeOf(vec)) {$/;"	function
last_access_time	$ZIGLIB/std/os/uefi/protocols/file_protocol.zig	/last_access_time: Time/;"	field
last_bit	$ZIGLIB/std/math/big/int.zig	/const last_bit = switch (native_endian) {$/;"	constant
last_block	$ZIGLIB/std/os/uefi/protocols/block_io_protocol.zig	/last_block: u64/;"	field
last_byte	$ZIGLIB/std/math/big/int.zig	/var last_byte = switch (endian) {$/;"	variable
last_byte_addr	$ZIGLIB/std/process.zig	/const last_byte_addr = @ptrToInt(last_item.ptr) + last_item.len + 1/;"	constant
last_cond_token	$ZIGLIB/std/zig/Ast.zig	/const last_cond_token = tree.lastToken(info.cond_expr)/;"	constant
last_elem	$ZIGLIB/std/zig/render.zig	/const last_elem = array_init.ast.elements[array_init.ast.elements.len - 1]/;"	constant
last_elem_token	$ZIGLIB/std/zig/render.zig	/const last_elem_token = tree.lastToken(last_elem)/;"	constant
last_else_token	$ZIGLIB/std/zig/render.zig	/var last_else_token = while_node.else_token/;"	variable
last_field	$ZIGLIB/std/zig/Parse.zig	/var last_field: TokenIndex = undefined/;"	variable
last_filter_index	$ZIGLIB/std/compress/xz/block.zig	/last_filter_index: u2/;"	field
last_freq	$ZIGLIB/std/compress/deflate/huffman_code.zig	/last_freq: u32/;"	field
last_grandchild_index	$ZIGLIB/std/priority_dequeue.zig	/const last_grandchild_index = first_grandchild_index + 3/;"	constant
last_idx	$ZIGLIB/std/zig/system/windows.zig	/var last_idx: usize = 0/;"	variable
last_index	$ZIGLIB/std/array_hash_map.zig	/const last_index = self.entries.len - 1/;"	constant
last_input	$ZIGLIB/std/zig/Ast.zig	/const last_input = result.inputs[result.inputs.len - 1]/;"	constant
last_item	$ZIGLIB/std/process.zig	/const last_item = self.args[self.args.len - 1]/;"	constant
last_item_mask	$ZIGLIB/std/bit_set.zig	/pub const last_item_mask = ~@as(MaskInt, 0) >> last_pad_bits/;"	constant
last_line_was_empty	$ZIGLIB/std/zig/render.zig	/var last_line_was_empty = false/;"	variable
last_max	$ZIGLIB/std/priority_dequeue.zig	/var last_max: ?u32 = null/;"	variable
last_min	$ZIGLIB/std/priority_dequeue.zig	/var last_min: ?u32 = null/;"	variable
last_op	$ZIGLIB/std/os/linux.zig	/last_op: IORING_OP/;"	field
last_output	$ZIGLIB/std/zig/Ast.zig	/const last_output = result.outputs[result.outputs.len - 1]/;"	constant
last_pad_bits	$ZIGLIB/std/bit_set.zig	/const last_pad_bits = mask_len * num_masks - size/;"	constant
last_param	$ZIGLIB/std/zig/render.zig	/const last_param = params[params.len - 1]/;"	constant
last_param_token	$ZIGLIB/std/zig/render.zig	/var last_param_token = lparen/;"	variable
last_prefix_token	$ZIGLIB/std/zig/render.zig	/var last_prefix_token = tree.lastToken(while_node.ast.cond_expr) + 1/;"	variable
last_put	$ZIGLIB/std/event/channel.zig	/var last_put = async testPut(channel, 4444)/;"	variable
last_removed	$ZIGLIB/std/priority_dequeue.zig	/var last_removed: ?u32 = null/;"	variable
last_slot	$ZIGLIB/std/array_hash_map.zig	/var last_slot = removed_slot/;"	variable
last_sym	$ZIGLIB/std/debug.zig	/var last_sym: MachoSymbol = undefined/;"	variable
last_token	$ZIGLIB/std/zig/tokenizer.zig	/const last_token = tokenizer.next()/;"	constant
last_type	$ZIGLIB/std/json.zig	/const last_type = p.stack.peek() orelse unreachable/;"	constant
last_val	$ZIGLIB/std/zig/c_translation.zig	/var last_val: bool = false/;"	variable
last_word_mask	$ZIGLIB/std/bit_set.zig	/last_word_mask: MaskInt/;"	field
latest	$ZIGLIB/std/target.zig	/pub const latest = WindowsVersion.win10_fe/;"	constant
layout	$ZIGLIB/std/builtin.zig	/layout: ContainerLayout/;"	field
layout_token	$ZIGLIB/std/zig/Ast.zig	/layout_token: ?TokenIndex/;"	field
lazy	$ZIGLIB/std/hash_map.zig	/const lazy = struct {$/;"	struct
lazy_bind_off	$ZIGLIB/std/macho.zig	/lazy_bind_off: u32 = 0/;"	field
lazy_bind_size	$ZIGLIB/std/macho.zig	/lazy_bind_size: u32 = 0/;"	field
lbrace	$ZIGLIB/std/zig/render.zig	/var lbrace: Ast.TokenIndex = undefined/;"	variable
lbracket	$ZIGLIB/std/zig/render.zig	/const lbracket = tree.firstToken(suffix.rhs) - 1/;"	constant
lc_cap	$ZIGLIB/std/c/openbsd.zig	/lc_cap: ?[*:0]const u8/;"	field
lc_class	$ZIGLIB/std/c/openbsd.zig	/lc_class: ?[*:0]const u8/;"	field
lc_style	$ZIGLIB/std/c/openbsd.zig	/lc_style: ?[*:0]const u8/;"	field
lchown	$ZIGLIB/std/os/linux/syscalls.zig	/lchown = Linux + 92/;"	field
lchown32	$ZIGLIB/std/os/linux/syscalls.zig	/lchown32 = 198/;"	field
ld_abs	$ZIGLIB/std/os/linux/bpf.zig	/pub fn ld_abs(size: Size, dst: Reg, src: Reg, imm: i32) Insn {$/;"	function
ld_dw1	$ZIGLIB/std/os/linux/bpf.zig	/pub fn ld_dw1(dst: Reg, imm: u64) Insn {$/;"	function
ld_dw2	$ZIGLIB/std/os/linux/bpf.zig	/pub fn ld_dw2(imm: u64) Insn {$/;"	function
ld_imm_impl1	$ZIGLIB/std/os/linux/bpf.zig	/fn ld_imm_impl1(dst: Reg, src: Reg, imm: u64) Insn {$/;"	function
ld_imm_impl2	$ZIGLIB/std/os/linux/bpf.zig	/fn ld_imm_impl2(imm: u64) Insn {$/;"	function
ld_ind	$ZIGLIB/std/os/linux/bpf.zig	/pub fn ld_ind(size: Size, dst: Reg, src: Reg, imm: i32) Insn {$/;"	function
ld_info_list	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/const ld_info_list = ld_info_list_buffer[0..ld_info_list_len]/;"	constant
ld_info_list_buffer	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/var ld_info_list_buffer: [all_abis.len]LdInfo = undefined/;"	variable
ld_info_list_len	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/var ld_info_list_len: usize = 0/;"	variable
ld_map_fd1	$ZIGLIB/std/os/linux/bpf.zig	/pub fn ld_map_fd1(dst: Reg, map_fd: fd_t) Insn {$/;"	function
ld_map_fd2	$ZIGLIB/std/os/linux/bpf.zig	/pub fn ld_map_fd2(map_fd: fd_t) Insn {$/;"	function
ldapr	$ZIGLIB/std/target/aarch64.zig	/ldapr/;"	field
ldbrx	$ZIGLIB/std/target/powerpc.zig	/ldbrx/;"	field
ldexp	$ZIGLIB/std/math/ldexp.zig	/^pub fn ldexp(x: anytype, n: i32) @TypeOf(x) {$/;"	function
ldexp_cexp	$ZIGLIB/std/math/complex/ldexp.zig	/^pub fn ldexp_cexp(z: anytype, expt: i32) @TypeOf(z) {$/;"	function
ldexp_cexp32	$ZIGLIB/std/math/complex/ldexp.zig	/^fn ldexp_cexp32(z: Complex(f32), expt: i32) Complex(f32) {$/;"	function
ldexp_cexp64	$ZIGLIB/std/math/complex/ldexp.zig	/^fn ldexp_cexp64(z: Complex(f64), expt: i32) Complex(f64) {$/;"	function
ldig	$ZIGLIB/std/fmt/errol.zig	/var ldig = @floatToInt(u8, @floor(low.val))/;"	variable
lds_branch_vmem_war_hazard	$ZIGLIB/std/target/amdgpu.zig	/lds_branch_vmem_war_hazard/;"	field
lds_misaligned_bug	$ZIGLIB/std/target/amdgpu.zig	/lds_misaligned_bug/;"	field
ldsbankcount16	$ZIGLIB/std/target/amdgpu.zig	/ldsbankcount16/;"	field
ldsbankcount32	$ZIGLIB/std/target/amdgpu.zig	/ldsbankcount32/;"	field
le32	$ZIGLIB/std/target.zig	/le32/;"	field
le64	$ZIGLIB/std/target.zig	/le64/;"	field
lea_sp	$ZIGLIB/std/target/x86.zig	/lea_sp/;"	field
lea_uses_ag	$ZIGLIB/std/target/x86.zig	/lea_uses_ag/;"	field
leading_zero	$ZIGLIB/std/zig/number_literal.zig	/leading_zero/;"	field
leading_zeroes	$ZIGLIB/std/math/big/int.zig	/const leading_zeroes = @clz(limb)/;"	constant
leading_zeros	$ZIGLIB/std/priority_dequeue.zig	/const leading_zeros = @clz(index + 1)/;"	constant
leaf	$ZIGLIB/std/zig/system/x86.zig	/var leaf = cpuid(0, 0)/;"	variable
leaf_counts	$ZIGLIB/std/compress/deflate/huffman_code.zig	/var leaf_counts: [max_bits_limit][max_bits_limit]u32 = mem.zeroes([max_bits_limit][max_bits_limit]u32)/;"	variable
leaked	$ZIGLIB/std/valgrind/memcheck.zig	/leaked: usize/;"	field
leaks	$ZIGLIB/std/heap/general_purpose_allocator.zig	/var leaks = false/;"	variable
leap	$ZIGLIB/std/time/epoch.zig	/leap/;"	field
leap_kind	$ZIGLIB/std/time/epoch.zig	/const leap_kind: YearLeapKind = if (isLeapYear(self.year)) .leap else .not_leap/;"	constant
leapcnt	$ZIGLIB/std/tz.zig	/leapcnt: u32/;"	field
leapseconds	$ZIGLIB/std/tz.zig	/var leapseconds = try allocator.alloc(Leapsecond, header.counts.leapcnt)/;"	variable
ledger_phys_footprint_peak	$ZIGLIB/std/c/darwin.zig	/ledger_phys_footprint_peak: i64/;"	field
ledger_purgeable_nonvolatile	$ZIGLIB/std/c/darwin.zig	/ledger_purgeable_nonvolatile: i64/;"	field
ledger_purgeable_novolatile_compressed	$ZIGLIB/std/c/darwin.zig	/ledger_purgeable_novolatile_compressed: i64/;"	field
ledger_purgeable_volatile	$ZIGLIB/std/c/darwin.zig	/ledger_purgeable_volatile: i64/;"	field
ledger_purgeable_volatile_compressed	$ZIGLIB/std/c/darwin.zig	/ledger_purgeable_volatile_compressed: i64/;"	field
ledger_tag_graphics_footprint	$ZIGLIB/std/c/darwin.zig	/ledger_tag_graphics_footprint: i64/;"	field
ledger_tag_graphics_footprint_compressed	$ZIGLIB/std/c/darwin.zig	/ledger_tag_graphics_footprint_compressed: i64/;"	field
ledger_tag_graphics_nofootprint	$ZIGLIB/std/c/darwin.zig	/ledger_tag_graphics_nofootprint: i64/;"	field
ledger_tag_graphics_nofootprint_compressed	$ZIGLIB/std/c/darwin.zig	/ledger_tag_graphics_nofootprint_compressed: i64/;"	field
ledger_tag_media_footprint	$ZIGLIB/std/c/darwin.zig	/ledger_tag_media_footprint: i64/;"	field
ledger_tag_media_footprint_compressed	$ZIGLIB/std/c/darwin.zig	/ledger_tag_media_footprint_compressed: i64/;"	field
ledger_tag_media_nofootprint	$ZIGLIB/std/c/darwin.zig	/ledger_tag_media_nofootprint: i64/;"	field
ledger_tag_media_nofootprint_compressed	$ZIGLIB/std/c/darwin.zig	/ledger_tag_media_nofootprint_compressed: i64/;"	field
ledger_tag_network_nonvolatile	$ZIGLIB/std/c/darwin.zig	/ledger_tag_network_nonvolatile: i64/;"	field
ledger_tag_network_nonvolatile_compressed	$ZIGLIB/std/c/darwin.zig	/ledger_tag_network_nonvolatile_compressed: i64/;"	field
ledger_tag_network_volatile	$ZIGLIB/std/c/darwin.zig	/ledger_tag_network_volatile: i64/;"	field
ledger_tag_network_volatile_compressed	$ZIGLIB/std/c/darwin.zig	/ledger_tag_network_volatile_compressed: i64/;"	field
ledger_tag_neural_footprint	$ZIGLIB/std/c/darwin.zig	/ledger_tag_neural_footprint: i64/;"	field
ledger_tag_neural_footprint_compressed	$ZIGLIB/std/c/darwin.zig	/ledger_tag_neural_footprint_compressed: i64/;"	field
ledger_tag_neural_nofootprint	$ZIGLIB/std/c/darwin.zig	/ledger_tag_neural_nofootprint: i64/;"	field
ledger_tag_neural_nofootprint_compressed	$ZIGLIB/std/c/darwin.zig	/ledger_tag_neural_nofootprint_compressed: i64/;"	field
left	$ZIGLIB/std/zig/Parse.zig	/left/;"	field
leftShift	$ZIGLIB/std/fmt/parse_float/decimal.zig	/pub fn leftShift(self: *Self, shift: usize) void {$/;"	function
left_align_shift	$ZIGLIB/compiler_rt/mulf3.zig	/const left_align_shift = ZSignificandBits - fractionalBits - 1/;"	constant
left_alt_pressed	$ZIGLIB/std/os/uefi/protocols/simple_text_input_ex_protocol.zig	/left_alt_pressed: bool/;"	field
left_button	$ZIGLIB/std/os/uefi/protocols/simple_pointer_protocol.zig	/left_button: bool = undefined/;"	field
left_control_pressed	$ZIGLIB/std/os/uefi/protocols/simple_text_input_ex_protocol.zig	/left_control_pressed: bool/;"	field
left_index	$ZIGLIB/std/priority_queue.zig	/var left_index = (index << 1) + 1/;"	variable
left_logo_pressed	$ZIGLIB/std/os/uefi/protocols/simple_text_input_ex_protocol.zig	/left_logo_pressed: bool/;"	field
left_padding	$ZIGLIB/std/fmt.zig	/const left_padding = padding \/ 2/;"	constant
left_shift_pressed	$ZIGLIB/std/os/uefi/protocols/simple_text_input_ex_protocol.zig	/left_shift_pressed: bool/;"	field
leftover	$ZIGLIB/std/crypto/tls/Client.zig	/const leftover = d.rest()/;"	constant
leftover_idx	$ZIGLIB/std/base64.zig	/var leftover_idx: ?usize = null/;"	variable
legacy_compression_methods	$ZIGLIB/std/crypto/tls/Client.zig	/const legacy_compression_methods = 0x0100/;"	constant
legacy_header	$ZIGLIB/std/tz.zig	/var legacy_header = try reader.readStruct(Header)/;"	variable
legacy_session_id	$ZIGLIB/std/crypto/tls/Client.zig	/const legacy_session_id = random_buffer[32..64].*/;"	constant
legacy_session_id_echo	$ZIGLIB/std/crypto/tls/Client.zig	/const legacy_session_id_echo = hsd.array(32)/;"	constant
legacy_session_id_echo_len	$ZIGLIB/std/crypto/tls/Client.zig	/const legacy_session_id_echo_len = hsd.decode(u8)/;"	constant
legacy_version	$ZIGLIB/std/crypto/tls/Client.zig	/const legacy_version = mem.readIntBig(u16, frag[in..][0..2])/;"	constant
lenAsc	$ZIGLIB/std/comptime_string_map.zig	/fn lenAsc(context: void, a: KV, b: KV) bool {$/;"	function
lenSliceTo	$ZIGLIB/std/mem.zig	/^fn lenSliceTo(ptr: anytype, comptime end: meta.Elem(@TypeOf(ptr))) usize {$/;"	function
len_bytes	$ZIGLIB/std/os/windows.zig	/const len_bytes = std.math.cast(u32, out_buffer.len) orelse unreachable/;"	constant
len_decoder	$ZIGLIB/std/compress/lzma/decode.zig	/len_decoder: LenDecoder/;"	field
len_expr	$ZIGLIB/std/zig/Parse.zig	/const len_expr = try p.parseExpr()/;"	constant
len_indexes	$ZIGLIB/std/comptime_string_map.zig	/var len_indexes: [max_len + 1]usize = undefined/;"	variable
len_match	$ZIGLIB/std/crypto/Certificate.zig	/const len_match = while (true) {$/;"	constant
len_partial	$ZIGLIB/std/crypto/aegis.zig	/const len_partial = @min(b.len, block_length - self.off)/;"	constant
len_size	$ZIGLIB/std/crypto/Certificate.zig	/const len_size = @truncate(u7, size_byte)/;"	constant
len_state	$ZIGLIB/std/compress/lzma/decode.zig	/const len_state = if (length > 3) 3 else length/;"	constant
length	$ZIGLIB/std/zig/tokenizer.zig	/const length = std.unicode.utf8ByteSequenceLength(c0) catch return 1/;"	constant
lengthCode	$ZIGLIB/std/compress/deflate/token.zig	/^pub fn lengthCode(len: u32) u32 {$/;"	function
length_base	$ZIGLIB/std/compress/deflate/huffman_bit_writer.zig	/^var length_base = [_]u32{$/;"	variable
length_code	$ZIGLIB/std/compress/deflate/huffman_bit_writer.zig	/var length_code: u32 = length_codes_start + 8/;"	variable
length_codes	$ZIGLIB/std/compress/deflate/token.zig	/^var length_codes = [_]u32{$/;"	variable
length_codes_start	$ZIGLIB/std/compress/deflate/huffman_bit_writer.zig	/^const length_codes_start = 257/;"	constant
length_extra_bits	$ZIGLIB/std/compress/deflate/huffman_bit_writer.zig	/^var length_extra_bits = [_]u8{$/;"	variable
length_halves	$ZIGLIB/std/os/linux.zig	/const length_halves = splitValue64(length)/;"	constant
length_required	$ZIGLIB/std/http.zig	/length_required = 411/;"	field
length_shift	$ZIGLIB/std/compress/deflate/token.zig	/^const length_shift = 22/;"	constant
lens	$ZIGLIB/std/crypto/chacha20.zig	/var lens: [16]u8 = undefined/;"	variable
leon	$ZIGLIB/std/target/sparc.zig	/leon/;"	field
leon2	$ZIGLIB/std/target/sparc.zig	/pub const leon2 = CpuModel{$/;"	constant
leon3	$ZIGLIB/std/target/sparc.zig	/pub const leon3 = CpuModel{$/;"	constant
leon4	$ZIGLIB/std/target/sparc.zig	/pub const leon4 = CpuModel{$/;"	constant
leoncyclecounter	$ZIGLIB/std/target/sparc.zig	/leoncyclecounter/;"	field
leonpwrpsr	$ZIGLIB/std/target/sparc.zig	/leonpwrpsr/;"	field
lessThan	$ZIGLIB/std/priority_queue.zig	/^fn lessThan(context: void, a: u32, b: u32) Order {$/;"	function
lessThanComparison	$ZIGLIB/std/priority_dequeue.zig	/^fn lessThanComparison(context: void, a: u32, b: u32) Order {$/;"	function
lessThanIgnoreCase	$ZIGLIB/std/ascii.zig	/^pub fn lessThanIgnoreCase(lhs: []const u8, rhs: []const u8) bool {$/;"	function
less_or_equal	$ZIGLIB/std/zig/Ast.zig	/less_or_equal/;"	field
less_than	$ZIGLIB/std/zig/Ast.zig	/less_than/;"	field
level	$ZIGLIB/std/zig/Parse.zig	/var level: u32 = 0/;"	variable
level_2	$ZIGLIB/std/compress/deflate/compressor.zig	/level_2 = 2/;"	field
level_3	$ZIGLIB/std/compress/deflate/compressor.zig	/level_3 = 3/;"	field
level_4	$ZIGLIB/std/compress/deflate/compressor.zig	/level_4 = 4/;"	field
level_5	$ZIGLIB/std/compress/deflate/compressor.zig	/level_5 = 5/;"	field
level_6	$ZIGLIB/std/compress/deflate/compressor.zig	/level_6 = 6/;"	field
level_7	$ZIGLIB/std/compress/deflate/compressor.zig	/level_7 = 7/;"	field
level_8	$ZIGLIB/std/compress/deflate/compressor.zig	/level_8 = 8/;"	field
level_txt	$ZIGLIB/std/log.zig	/const level_txt = comptime message_level.asText()/;"	constant
levels	$ZIGLIB/std/compress/deflate/huffman_code.zig	/var levels: [max_bits_limit]LevelInfo = mem.zeroes([max_bits_limit]LevelInfo)/;"	variable
lexeme	$ZIGLIB/std/zig/tokenizer.zig	/pub fn lexeme(tag: Tag) ?[]const u8 {$/;"	function
lexical_block	$ZIGLIB/std/dwarf/TAG.zig	/^pub const lexical_block = 0x0b/;"	constant
lfiwax	$ZIGLIB/std/target/powerpc.zig	/lfiwax/;"	field
lflag	$ZIGLIB/std/os/linux.zig	/lflag: tcflag_t/;"	field
lgetxattr	$ZIGLIB/std/os/linux/syscalls.zig	/lgetxattr = Linux + 228/;"	field
lhs_last_token	$ZIGLIB/std/zig/render.zig	/const lhs_last_token = tree.lastToken(field_access.lhs)/;"	constant
lhs_pre_it	$ZIGLIB/std/SemanticVersion.zig	/var lhs_pre_it = std.mem.split(u8, lhs.pre.?, ".")/;"	variable
libPrefix	$ZIGLIB/std/zig/CrossTarget.zig	/^pub fn libPrefix(self: CrossTarget) [:0]const u8 {$/;"	function
libPrefix_os_abi	$ZIGLIB/std/target.zig	/pub fn libPrefix_os_abi(os_tag: Os.Tag, abi: Abi) [:0]const u8 {$/;"	function
lib_dir	$ZIGLIB/std/Build.zig	/lib_dir: ?[]const u8 = null/;"	field
lib_dirs	$ZIGLIB/std/zig/system/NativePaths.zig	/^lib_dirs: ArrayList([:0]u8)/;"	field
lib_list	$ZIGLIB/std/Build.zig	/var lib_list = [_][]const u8{ self.install_path, "lib" }/;"	variable
lib_name	$ZIGLIB/std/zig/Ast.zig	/lib_name: ?TokenIndex/;"	field
lib_path	$ZIGLIB/std/zig/system/NativePaths.zig	/const lib_path = word[2..]/;"	constant
lib_paths	$ZIGLIB/std/Build/CompileStep.zig	/^lib_paths: ArrayList([]const u8)/;"	field
lib_suffix	$ZIGLIB/std/target.zig	/const lib_suffix = switch (self.abi) {$/;"	constant
libc_file	$ZIGLIB/std/Build/CompileStep.zig	/^libc_file: ?FileSource = null/;"	field
libc_libraries	$ZIGLIB/std/Build/CompileStep.zig	/const libc_libraries = [_][]const u8{ "c", "m", "dl", "rt", "pthread" }/;"	constant
libcpp_libraries	$ZIGLIB/std/Build/CompileStep.zig	/const libcpp_libraries = [_][]const u8{ "c++", "stdc++" }/;"	constant
libname	$ZIGLIB/std/dynamic_library.zig	/const libname = switch (builtin.os.tag) {$/;"	constant
library	$ZIGLIB/std/target.zig	/library/;"	field
library_name	$ZIGLIB/std/builtin.zig	/library_name: ?[]const u8 = null/;"	field
license	$ZIGLIB/std/os/linux/bpf.zig	/license: u64/;"	field
lif_ifinfo_req	$ZIGLIB/std/c/solaris.zig	/^pub const lif_ifinfo_req = extern struct {$/;"	struct
lif_nd_req	$ZIGLIB/std/c/solaris.zig	/^pub const lif_nd_req = extern struct {$/;"	struct
lifreq	$ZIGLIB/std/c/solaris.zig	/^pub const lifreq = extern struct {$/;"	struct
lightblue	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/pub const lightblue: u8 = 0x09/;"	constant
lightcyan	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/pub const lightcyan: u8 = 0x0b/;"	constant
lightgray	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/pub const lightgray: u8 = 0x07/;"	constant
lightgreen	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/pub const lightgreen: u8 = 0x0a/;"	constant
lightmagenta	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/pub const lightmagenta: u8 = 0x0d/;"	constant
lightred	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/pub const lightred: u8 = 0x0c/;"	constant
limb	$ZIGLIB/std/math/big/int.zig	/var limb: Limb = if (limb_index < x.limbs.len) x.limbs[limb_index] else 0/;"	variable
limb_base	$ZIGLIB/std/math/big/int.zig	/var limb_base: Limb = 1/;"	variable
limb_bits	$ZIGLIB/std/math/big/rational.zig	/const limb_bits = @typeInfo(Limb).Int.bits/;"	constant
limb_count	$ZIGLIB/std/math/big/int.zig	/const limb_count = calcSetStringLimbCount(base, string_len)/;"	constant
limb_index	$ZIGLIB/std/math/big/int.zig	/var limb_index: usize = 0/;"	variable
limb_info	$ZIGLIB/std/math/big.zig	/^const limb_info = @typeInfo(Limb).Int/;"	constant
limb_len	$ZIGLIB/std/math/big/int.zig	/const limb_len = comptime switch (@typeInfo(@TypeOf(scalar))) {$/;"	constant
limb_set	$ZIGLIB/compiler_rt/udivmodei4.zig	/^inline fn limb_set(x: []u32, i: usize, v: u32) void {$/;"	function
limb_shift	$ZIGLIB/std/math/big/int.zig	/const limb_shift = shift \/ limb_bits + 1/;"	constant
limb_tz	$ZIGLIB/std/math/big/int.zig	/const limb_tz = @ctz(limb)/;"	constant
limbs	$ZIGLIB/std/math/big/int.zig	/var limbs: [limb_len]Limb = undefined/;"	variable
limbs_after_split	$ZIGLIB/std/math/big/int.zig	/const limbs_after_split = r.len - split/;"	constant
limbs_after_split2	$ZIGLIB/std/math/big/int.zig	/const limbs_after_split2 = r.len - split * 2/;"	constant
limbs_buffer	$ZIGLIB/std/math/big/int.zig	/var limbs_buffer = std.ArrayList(Limb).init(rma.allocator)/;"	variable
limbs_required	$ZIGLIB/std/math/big/int.zig	/const limbs_required = calcTwosCompLimbCount(bit_count)/;"	constant
limbs_z	$ZIGLIB/std/crypto/pcurves/common.zig	/var limbs_z: NonMontgomeryDomainFieldElement = undefined/;"	variable
limit	$ZIGLIB/std/packed_int_array.zig	/const limit = (1 << bits)/;"	constant
limitRangeBiased	$ZIGLIB/std/rand.zig	/^pub fn limitRangeBiased(comptime T: type, random_int: T, less_than: T) T {$/;"	function
limitVecs	$ZIGLIB/std/crypto/tls/Client.zig	/^fn limitVecs(iovecs: []std.os.iovec, len: usize) []std.os.iovec {$/;"	function
limit_bytes_remaining	$ZIGLIB/std/c/darwin.zig	/limit_bytes_remaining: u64/;"	field
limit_in_pages	$ZIGLIB/std/os/linux/x86.zig	/limit_in_pages: u1/;"	field
limitedReader	$ZIGLIB/std/io/limited_reader.zig	/^pub fn limitedReader(inner_reader: anytype, bytes_left: u64) LimitedReader(@TypeOf(inner_reader)) {$/;"	function
limits	$ZIGLIB/std/wasm.zig	/limits: Limits/;"	field
line	$ZIGLIB/std/zig/system/linux.zig	/const line = (try reader.readUntilDelimiterOrEof(&line_buf, '\\n')) orelse break/;"	constant
line2_offset	$ZIGLIB/std/fs/watch.zig	/const line2_offset = 7/;"	constant
lineDelta	$ZIGLIB/std/zig.zig	/^pub fn lineDelta(source: []const u8, start: usize, end: usize) isize {$/;"	function
line_base	$ZIGLIB/std/dwarf.zig	/const line_base = try in.readByteSigned()/;"	constant
line_begin_index	$ZIGLIB/std/testing.zig	/const line_begin_index = if (std.mem.lastIndexOfScalar(u8, source[0..indicator_index], '\\n')) |line_begin|$/;"	constant
line_buf	$ZIGLIB/std/zig/system/linux.zig	/var line_buf: [1024]u8 = undefined/;"	variable
line_comment	$ZIGLIB/std/zig/tokenizer.zig	/line_comment/;"	field
line_comment_start	$ZIGLIB/std/zig/tokenizer.zig	/line_comment_start/;"	field
line_end	$ZIGLIB/std/zig/Ast.zig	/line_end: usize/;"	field
line_end_index	$ZIGLIB/std/testing.zig	/const line_end_index = if (std.mem.indexOfScalar(u8, source[indicator_index..], '\\n')) |line_end|$/;"	constant
line_entry_idx	$ZIGLIB/std/pdb.zig	/const line_entry_idx = line_i - 1/;"	constant
line_hdr	$ZIGLIB/std/pdb.zig	/const line_hdr = @ptrCast(*align(1) LineFragmentHeader, &subsect_info[line_index])/;"	constant
line_hook	$ZIGLIB/std/zig/system/linux.zig	/fn line_hook(self: *SparcCpuinfoImpl, key: []const u8, value: []const u8) !bool {$/;"	function
line_i	$ZIGLIB/std/process.zig	/var line_i: usize = 0/;"	variable
line_index	$ZIGLIB/std/pdb.zig	/var line_index = sect_offset/;"	variable
line_info	$ZIGLIB/std/os/linux/bpf.zig	/line_info: u64/;"	field
line_info_cnt	$ZIGLIB/std/os/linux/bpf.zig	/line_info_cnt: u32/;"	field
line_info_len	$ZIGLIB/std/os/linux/bpf/btf_ext.zig	/line_info_len: u32/;"	field
line_info_off	$ZIGLIB/std/os/linux/bpf/btf_ext.zig	/line_info_off: u32/;"	field
line_info_offset	$ZIGLIB/std/dwarf.zig	/const line_info_offset = try compile_unit.die.getAttrSecOffset(AT.stmt_list)/;"	constant
line_info_rec_size	$ZIGLIB/std/os/linux/bpf.zig	/line_info_rec_size: u32/;"	field
line_it	$ZIGLIB/std/net.zig	/var line_it = mem.tokenize(u8, no_comment_line, " \\t")/;"	variable
line_num_entry	$ZIGLIB/std/pdb.zig	/const line_num_entry = @ptrCast(*align(1) LineNumberEntry, &subsect_info[line_index])/;"	constant
line_range	$ZIGLIB/std/dwarf.zig	/const line_range = try in.readByte()/;"	constant
line_sep	$ZIGLIB/std/cstr.zig	/^pub const line_sep = switch (builtin.os.tag) {$/;"	constant
line_start	$ZIGLIB/std/zig/Ast.zig	/line_start: usize/;"	field
line_strp	$ZIGLIB/std/dwarf/FORM.zig	/^pub const line_strp = 0x1f/;"	constant
linear_scan_max	$ZIGLIB/std/array_hash_map.zig	/const linear_scan_max = 8/;"	constant
linenumber	$ZIGLIB/std/coff.zig	/linenumber: u16/;"	field
linger	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const linger = extern struct {$/;"	struct
link	$ZIGLIB/std/treap.zig	/const link = if (parent) |p| &p.children[@boolToInt(p.children[1] == node)] else &self.root/;"	constant
linkFramework	$ZIGLIB/std/Build/CompileStep.zig	/^pub fn linkFramework(self: *CompileStep, framework_name: []const u8) void {$/;"	function
linkFrameworkNeeded	$ZIGLIB/std/Build/CompileStep.zig	/^pub fn linkFrameworkNeeded(self: *CompileStep, framework_name: []const u8) void {$/;"	function
linkFrameworkWeak	$ZIGLIB/std/Build/CompileStep.zig	/^pub fn linkFrameworkWeak(self: *CompileStep, framework_name: []const u8) void {$/;"	function
linkLibC	$ZIGLIB/std/Build/CompileStep.zig	/^pub fn linkLibC(self: *CompileStep) void {$/;"	function
linkLibCpp	$ZIGLIB/std/Build/CompileStep.zig	/^pub fn linkLibCpp(self: *CompileStep) void {$/;"	function
linkLibrary	$ZIGLIB/std/Build/CompileStep.zig	/^pub fn linkLibrary(self: *CompileStep, lib: *CompileStep) void {$/;"	function
linkLibraryOrObject	$ZIGLIB/std/Build/CompileStep.zig	/^fn linkLibraryOrObject(self: *CompileStep, other: *CompileStep) void {$/;"	function
linkSystemLibrary	$ZIGLIB/std/Build/CompileStep.zig	/^pub fn linkSystemLibrary(self: *CompileStep, name: []const u8) void {$/;"	function
linkSystemLibraryInner	$ZIGLIB/std/Build/CompileStep.zig	/^fn linkSystemLibraryInner(self: *CompileStep, name: []const u8, opts: struct {$/;"	function
linkSystemLibraryName	$ZIGLIB/std/Build/CompileStep.zig	/^pub fn linkSystemLibraryName(self: *CompileStep, name: []const u8) void {$/;"	function
linkSystemLibraryNeeded	$ZIGLIB/std/Build/CompileStep.zig	/^pub fn linkSystemLibraryNeeded(self: *CompileStep, name: []const u8) void {$/;"	function
linkSystemLibraryNeededName	$ZIGLIB/std/Build/CompileStep.zig	/^pub fn linkSystemLibraryNeededName(self: *CompileStep, name: []const u8) void {$/;"	function
linkSystemLibraryNeededPkgConfigOnly	$ZIGLIB/std/Build/CompileStep.zig	/^pub fn linkSystemLibraryNeededPkgConfigOnly(self: *CompileStep, lib_name: []const u8) void {$/;"	function
linkSystemLibraryPkgConfigOnly	$ZIGLIB/std/Build/CompileStep.zig	/^pub fn linkSystemLibraryPkgConfigOnly(self: *CompileStep, lib_name: []const u8) void {$/;"	function
linkSystemLibraryWeak	$ZIGLIB/std/Build/CompileStep.zig	/^pub fn linkSystemLibraryWeak(self: *CompileStep, name: []const u8) void {$/;"	function
linkSystemLibraryWeakName	$ZIGLIB/std/Build/CompileStep.zig	/^pub fn linkSystemLibraryWeakName(self: *CompileStep, name: []const u8) void {$/;"	function
linkZ	$ZIGLIB/std/os.zig	/^pub fn linkZ(oldpath: [*:0]const u8, newpath: [*:0]const u8, flags: i32) LinkError!void {$/;"	function
link_address	$ZIGLIB/std/os/uefi/protocols/ip6_protocol.zig	/link_address: MacAddress/;"	field
link_buf	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/var link_buf: [std.os.PATH_MAX]u8 = undefined/;"	variable
link_create	$ZIGLIB/std/os/linux/bpf.zig	/link_create: LinkCreateAttr/;"	field
link_detach	$ZIGLIB/std/os/linux/bpf.zig	/link_detach/;"	field
link_eh_frame_hdr	$ZIGLIB/std/Build/CompileStep.zig	/^link_eh_frame_hdr: bool = false/;"	field
link_emit_relocs	$ZIGLIB/std/Build/CompileStep.zig	/^link_emit_relocs: bool = false/;"	field
link_fd	$ZIGLIB/std/os/linux/bpf.zig	/link_fd: fd_t/;"	field
link_function_sections	$ZIGLIB/std/Build/CompileStep.zig	/^link_function_sections: bool = false/;"	field
link_gc_sections	$ZIGLIB/std/Build/CompileStep.zig	/^link_gc_sections: ?bool = null/;"	field
link_get_fd_by_id	$ZIGLIB/std/os/linux/bpf.zig	/link_get_fd_by_id/;"	field
link_get_next_id	$ZIGLIB/std/os/linux/bpf.zig	/link_get_next_id/;"	field
link_id	$ZIGLIB/std/os/linux/bpf.zig	/link_id: u32/;"	field
link_libc	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/link_libc: bool = false/;"	field
link_map_ptr	$ZIGLIB/std/dynamic_library.zig	/const link_map_ptr = init: {$/;"	constant
link_mask	$ZIGLIB/std/compress/deflate/decompressor.zig	/link_mask: u32 = 0/;"	field
link_mode	$ZIGLIB/std/zig.zig	/link_mode: ?std.builtin.LinkMode = null/;"	field
link_name	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/const link_name = std.os.readlink(dl_path, &link_buf) catch |err| switch (err) {$/;"	constant
link_name_chopped	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/const link_name_chopped = link_name[prefix.len .. link_name.len - suffix.len]/;"	constant
link_objects	$ZIGLIB/std/Build/CompileStep.zig	/link_objects: ArrayList(LinkObject)/;"	field
link_path	$ZIGLIB/std/os/linux/io_uring.zig	/const link_path = "test_io_uring_symlinkat_link"/;"	constant
link_tab	$ZIGLIB/std/compress/deflate/decompressor.zig	/var link_tab = self.links[value]/;"	variable
link_timeout	$ZIGLIB/std/os/linux/io_uring.zig	/pub fn link_timeout($/;"	function
link_update	$ZIGLIB/std/os/linux/bpf.zig	/link_update: LinkUpdateAttr/;"	field
link_z_common_page_size	$ZIGLIB/std/Build/CompileStep.zig	/^link_z_common_page_size: ?u64 = null/;"	field
link_z_lazy	$ZIGLIB/std/Build/CompileStep.zig	/^link_z_lazy: bool = false/;"	field
link_z_max_page_size	$ZIGLIB/std/Build/CompileStep.zig	/^link_z_max_page_size: ?u64 = null/;"	field
link_z_notext	$ZIGLIB/std/Build/CompileStep.zig	/^link_z_notext: bool = false/;"	field
link_z_relro	$ZIGLIB/std/Build/CompileStep.zig	/^link_z_relro: bool = true/;"	field
linkage	$ZIGLIB/std/os/linux/bpf/btf.zig	/linkage: u32/;"	field
linkage_name	$ZIGLIB/std/dwarf/AT.zig	/^pub const linkage_name = 0x6e/;"	constant
linkat	$ZIGLIB/std/os/linux/syscalls.zig	/linkat = Linux + 296/;"	field
linkatWasi	$ZIGLIB/std/os.zig	/^pub fn linkatWasi(old: RelativePathWasi, new: RelativePathWasi, flags: i32) LinkatError!void {$/;"	function
linkatZ	$ZIGLIB/std/os.zig	/^pub fn linkatZ($/;"	function
linkcount_t	$ZIGLIB/std/os/wasi.zig	/^pub const linkcount_t = u64/;"	constant
linkedit_data_command	$ZIGLIB/std/macho.zig	/^pub const linkedit_data_command = extern struct {$/;"	struct
linker_allow_shlib_undefined	$ZIGLIB/std/Build/CompileStep.zig	/^linker_allow_shlib_undefined: ?bool = null/;"	field
linker_script	$ZIGLIB/std/Build/CompileStep.zig	/^linker_script: ?FileSource = null/;"	field
linkmap_iterator	$ZIGLIB/std/dynamic_library.zig	/^pub fn linkmap_iterator(phdrs: []elf.Phdr) !LinkMap.Iterator {$/;"	function
links	$ZIGLIB/std/compress/deflate/decompressor.zig	/links: [][]u16 = undefined/;"	field
linux	$ZIGLIB/std/target.zig	/linux: LinuxVersionRange/;"	field
linuxAddFd	$ZIGLIB/std/event/loop.zig	/pub fn linuxAddFd(self: *Loop, fd: i32, resume_node: *ResumeNode, flags: u32) !void {$/;"	function
linuxEventPutter	$ZIGLIB/std/fs/watch.zig	/fn linuxEventPutter(self: *Self) void {$/;"	function
linuxLookupName	$ZIGLIB/std/net.zig	/^fn linuxLookupName($/;"	function
linuxLookupNameFromDns	$ZIGLIB/std/net.zig	/^fn linuxLookupNameFromDns($/;"	function
linuxLookupNameFromDnsSearch	$ZIGLIB/std/net.zig	/^fn linuxLookupNameFromDnsSearch($/;"	function
linuxLookupNameFromHosts	$ZIGLIB/std/net.zig	/^fn linuxLookupNameFromHosts($/;"	function
linuxLookupNameFromNull	$ZIGLIB/std/net.zig	/^fn linuxLookupNameFromNull($/;"	function
linuxLookupNameFromNumericUnspec	$ZIGLIB/std/net.zig	/^fn linuxLookupNameFromNumericUnspec($/;"	function
linuxModFd	$ZIGLIB/std/event/loop.zig	/pub fn linuxModFd(self: *Loop, fd: i32, op: u32, flags: u32, resume_node: *ResumeNode) !void {$/;"	function
linuxRemoveFd	$ZIGLIB/std/event/loop.zig	/pub fn linuxRemoveFd(self: *Loop, fd: i32) void {$/;"	function
linuxTriple	$ZIGLIB/std/zig/CrossTarget.zig	/^pub fn linuxTriple(self: CrossTarget, allocator: mem.Allocator) ![]u8 {$/;"	function
linuxTripleSimple	$ZIGLIB/std/target.zig	/pub fn linuxTripleSimple(allocator: mem.Allocator, cpu_arch: Cpu.Arch, os_tag: Os.Tag, abi: Abi) ![]u8 {$/;"	function
linuxWaitFd	$ZIGLIB/std/event/loop.zig	/pub fn linuxWaitFd(self: *Loop, fd: i32, flags: u32) void {$/;"	function
linux_entry	$ZIGLIB/std/fs.zig	/const linux_entry = @ptrCast(*align(1) linux.dirent64, &self.buf[self.index])/;"	constant
lirc_mode2	$ZIGLIB/std/os/linux/bpf.zig	/lirc_mode2/;"	field
list	$ZIGLIB/std/zig/c_translation.zig	/const list: []const type = if (@typeInfo(SuffixType).Int.signedness == .unsigned)$/;"	constant
list1	$ZIGLIB/std/linked_list.zig	/var list1 = L{}/;"	variable
list2	$ZIGLIB/std/linked_list.zig	/var list2 = L{}/;"	variable
listPackageLists	$ZIGLIB/std/os/uefi/protocols/hii_database_protocol.zig	/pub fn listPackageLists(self: *const HIIDatabaseProtocol, package_type: u8, package_guid: ?*const Guid, buffer_length: *usize, handles: [*]hii.HIIHandle) Status {$/;"	function
listToSpan	$ZIGLIB/std/zig/Parse.zig	/^fn listToSpan(p: *Parse, list: []const Node.Index) !Node.SubRange {$/;"	function
list_eq	$ZIGLIB/std/array_list.zig	/var list_eq = ArrayListUnmanaged(i32){}/;"	variable
list_gt	$ZIGLIB/std/array_list.zig	/var list_gt = ArrayListUnmanaged(i32){}/;"	variable
list_lt	$ZIGLIB/std/array_list.zig	/var list_lt = ArrayListUnmanaged(i32){}/;"	variable
list_zero	$ZIGLIB/std/array_list.zig	/var list_zero = ArrayListUnmanaged(i32){}/;"	variable
listen	$ZIGLIB/std/os/windows.zig	/^pub fn listen(s: ws2_32.SOCKET, backlog: u31) i32 {$/;"	function
listen_address	$ZIGLIB/std/net.zig	/listen_address: Address/;"	field
listener	$ZIGLIB/std/os/linux/io_uring.zig	/listener: os.socket_t/;"	field
listener_socket	$ZIGLIB/std/os/linux/io_uring.zig	/const listener_socket = try os.socket(address.any.family, os.SOCK.STREAM | os.SOCK.CLOEXEC, 0)/;"	constant
listxattr	$ZIGLIB/std/os/linux/syscalls.zig	/listxattr = Linux + 230/;"	field
lit0	$ZIGLIB/std/dwarf/OP.zig	/^pub const lit0 = 0x30/;"	constant
lit1	$ZIGLIB/std/dwarf/OP.zig	/^pub const lit1 = 0x31/;"	constant
lit10	$ZIGLIB/std/dwarf/OP.zig	/^pub const lit10 = 0x3a/;"	constant
lit11	$ZIGLIB/std/dwarf/OP.zig	/^pub const lit11 = 0x3b/;"	constant
lit12	$ZIGLIB/std/dwarf/OP.zig	/^pub const lit12 = 0x3c/;"	constant
lit13	$ZIGLIB/std/dwarf/OP.zig	/^pub const lit13 = 0x3d/;"	constant
lit14	$ZIGLIB/std/dwarf/OP.zig	/^pub const lit14 = 0x3e/;"	constant
lit15	$ZIGLIB/std/dwarf/OP.zig	/^pub const lit15 = 0x3f/;"	constant
lit16	$ZIGLIB/std/dwarf/OP.zig	/^pub const lit16 = 0x40/;"	constant
lit17	$ZIGLIB/std/dwarf/OP.zig	/^pub const lit17 = 0x41/;"	constant
lit18	$ZIGLIB/std/dwarf/OP.zig	/^pub const lit18 = 0x42/;"	constant
lit19	$ZIGLIB/std/dwarf/OP.zig	/^pub const lit19 = 0x43/;"	constant
lit2	$ZIGLIB/std/dwarf/OP.zig	/^pub const lit2 = 0x32/;"	constant
lit20	$ZIGLIB/std/dwarf/OP.zig	/^pub const lit20 = 0x44/;"	constant
lit21	$ZIGLIB/std/dwarf/OP.zig	/^pub const lit21 = 0x45/;"	constant
lit22	$ZIGLIB/std/dwarf/OP.zig	/^pub const lit22 = 0x46/;"	constant
lit23	$ZIGLIB/std/dwarf/OP.zig	/^pub const lit23 = 0x47/;"	constant
lit24	$ZIGLIB/std/dwarf/OP.zig	/^pub const lit24 = 0x48/;"	constant
lit25	$ZIGLIB/std/dwarf/OP.zig	/^pub const lit25 = 0x49/;"	constant
lit26	$ZIGLIB/std/dwarf/OP.zig	/^pub const lit26 = 0x4a/;"	constant
lit27	$ZIGLIB/std/dwarf/OP.zig	/^pub const lit27 = 0x4b/;"	constant
lit28	$ZIGLIB/std/dwarf/OP.zig	/^pub const lit28 = 0x4c/;"	constant
lit29	$ZIGLIB/std/dwarf/OP.zig	/^pub const lit29 = 0x4d/;"	constant
lit3	$ZIGLIB/std/dwarf/OP.zig	/^pub const lit3 = 0x33/;"	constant
lit30	$ZIGLIB/std/dwarf/OP.zig	/^pub const lit30 = 0x4e/;"	constant
lit31	$ZIGLIB/std/dwarf/OP.zig	/^pub const lit31 = 0x4f/;"	constant
lit4	$ZIGLIB/std/dwarf/OP.zig	/^pub const lit4 = 0x34/;"	constant
lit5	$ZIGLIB/std/dwarf/OP.zig	/^pub const lit5 = 0x35/;"	constant
lit6	$ZIGLIB/std/dwarf/OP.zig	/^pub const lit6 = 0x36/;"	constant
lit7	$ZIGLIB/std/dwarf/OP.zig	/^pub const lit7 = 0x37/;"	constant
lit8	$ZIGLIB/std/dwarf/OP.zig	/^pub const lit8 = 0x38/;"	constant
lit9	$ZIGLIB/std/dwarf/OP.zig	/^pub const lit9 = 0x39/;"	constant
lit_and_off	$ZIGLIB/std/compress/deflate/huffman_bit_writer.zig	/var lit_and_off = self.indexTokens(tokens)/;"	variable
lit_state	$ZIGLIB/std/compress/lzma/decode.zig	/const lit_state = ((buffer.len & ((@as(usize, 1) << self.lzma_props.lp) - 1)) << self.lzma_props.lc) +$/;"	constant
literal	$ZIGLIB/std/compress/deflate/token.zig	/^pub fn literal(t: Token) u32 {$/;"	function
literalToken	$ZIGLIB/std/compress/deflate/token.zig	/^pub fn literalToken(lit: u32) Token {$/;"	function
literal_encoding	$ZIGLIB/std/compress/deflate/huffman_bit_writer.zig	/var literal_encoding = &self.fixed_literal_encoding/;"	variable
literal_freq	$ZIGLIB/std/compress/deflate/huffman_bit_writer.zig	/literal_freq: []u16/;"	field
literal_probs	$ZIGLIB/std/compress/lzma/decode.zig	/literal_probs: Vec2D(u16)/;"	field
literal_type	$ZIGLIB/std/compress/deflate/token.zig	/^const literal_type = 0 << 30/;"	constant
littleToNative	$ZIGLIB/std/mem.zig	/^pub fn littleToNative(comptime T: type, x: T) T {$/;"	function
llaccum	$ZIGLIB/std/math/big/int.zig	/^fn llaccum(comptime op: AccOp, r: []Limb, a: []const Limb) void {$/;"	function
lladd	$ZIGLIB/std/math/big/int.zig	/^fn lladd(r: []Limb, a: []const Limb, b: []const Limb) void {$/;"	function
lladdcarry	$ZIGLIB/std/math/big/int.zig	/^fn lladdcarry(r: []Limb, a: []const Limb, b: []const Limb) Limb {$/;"	function
llcmp	$ZIGLIB/std/math/big/int.zig	/^pub fn llcmp(a: []const Limb, b: []const Limb) i8 {$/;"	function
lldiv0p5	$ZIGLIB/std/math/big/int.zig	/^fn lldiv0p5(quo: []Limb, rem: *Limb, a: []const Limb, b: HalfLimb) void {$/;"	function
lldiv1	$ZIGLIB/std/math/big/int.zig	/^fn lldiv1(quo: []Limb, rem: *Limb, a: []const Limb, b: Limb) void {$/;"	function
llen	$ZIGLIB/std/coff.zig	/const llen = if (end) |e| e * Symbol.sizeOf() else self.buffer.len/;"	constant
llistxattr	$ZIGLIB/std/os/linux/syscalls.zig	/llistxattr = Linux + 231/;"	field
llmulLimb	$ZIGLIB/std/math/big/int.zig	/^fn llmulLimb(comptime op: AccOp, acc: []Limb, y: []const Limb, xi: Limb) bool {$/;"	function
llmulacc	$ZIGLIB/std/math/big/int.zig	/^fn llmulacc(comptime op: AccOp, opt_allocator: ?Allocator, r: []Limb, a: []const Limb, b: []const Limb) void {$/;"	function
llmulaccKaratsuba	$ZIGLIB/std/math/big/int.zig	/^fn llmulaccKaratsuba($/;"	function
llmulaccLong	$ZIGLIB/std/math/big/int.zig	/^fn llmulaccLong(comptime op: AccOp, r: []Limb, a: []const Limb, b: []const Limb) void {$/;"	function
llnormalize	$ZIGLIB/std/math/big/int.zig	/^fn llnormalize(a: []const Limb) usize {$/;"	function
llnot	$ZIGLIB/std/math/big/int.zig	/^fn llnot(r: []Limb) void {$/;"	function
llpow	$ZIGLIB/std/math/big/int.zig	/^fn llpow(r: []Limb, a: []const Limb, b: u32, tmp_limbs: []Limb) void {$/;"	function
llseek	$ZIGLIB/std/os/linux.zig	/^pub fn llseek(fd: i32, offset: u64, result: ?*u64, whence: usize) usize {$/;"	function
llshl	$ZIGLIB/std/math/big/int.zig	/^fn llshl(r: []Limb, a: []const Limb, shift: usize) void {$/;"	function
llshr	$ZIGLIB/std/math/big/int.zig	/^fn llshr(r: []Limb, a: []const Limb, shift: usize) void {$/;"	function
llsignedand	$ZIGLIB/std/math/big/int.zig	/^fn llsignedand(r: []Limb, a: []const Limb, a_positive: bool, b: []const Limb, b_positive: bool) bool {$/;"	function
llsignedor	$ZIGLIB/std/math/big/int.zig	/^fn llsignedor(r: []Limb, a: []const Limb, a_positive: bool, b: []const Limb, b_positive: bool) bool {$/;"	function
llsignedxor	$ZIGLIB/std/math/big/int.zig	/^fn llsignedxor(r: []Limb, a: []const Limb, a_positive: bool, b: []const Limb, b_positive: bool) bool {$/;"	function
llsquareBasecase	$ZIGLIB/std/math/big/int.zig	/^fn llsquareBasecase(r: []Limb, x: []const Limb) void {$/;"	function
llsub	$ZIGLIB/std/math/big/int.zig	/^fn llsub(r: []Limb, a: []const Limb, b: []const Limb) void {$/;"	function
llsubcarry	$ZIGLIB/std/math/big/int.zig	/^fn llsubcarry(r: []Limb, a: []const Limb, b: []const Limb) Limb {$/;"	function
llvm_name	$ZIGLIB/std/target.zig	/llvm_name: ?[:0]const u8/;"	field
ln10	$ZIGLIB/std/math.zig	/^pub const ln10 = 2.302585092994045684017991454684364208/;"	constant
ln2_hi	$ZIGLIB/std/math/log1p.zig	/const ln2_hi: f64 = 6.93147180369123816490e-01/;"	constant
ln2_lo	$ZIGLIB/std/math/log1p.zig	/const ln2_lo: f64 = 1.90821492927058770002e-10/;"	constant
ln2hi	$ZIGLIB/compiler_rt/exp.zig	/const ln2hi: f64 = 6.93147180369123816490e-01/;"	constant
ln2lo	$ZIGLIB/compiler_rt/exp.zig	/const ln2lo: f64 = 1.90821492927058770002e-10/;"	constant
lnum	$ZIGLIB/std/SemanticVersion.zig	/const lnum: ?usize = std.fmt.parseUnsigned(usize, lid, 10) catch |err| switch (err) {$/;"	constant
loWord	$ZIGLIB/compiler_rt/common.zig	/fn loWord(x: u64) u64 {$/;"	function
lo_user	$ZIGLIB/std/dwarf/TAG.zig	/^pub const lo_user = 0x4080/;"	constant
load	$ZIGLIB/std/hash_map.zig	/fn load(self: *const Self) Size {$/;"	function
load32	$ZIGLIB/std/compress/deflate/deflate_fast.zig	/^fn load32(b: []u8, i: i32) u32 {$/;"	function
load64	$ZIGLIB/std/compress/deflate/deflate_fast.zig	/^fn load64(b: []u8, i: i32) u64 {$/;"	function
loadImage	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/loadImage: *const fn (boot_policy: bool, parent_image_handle: Handle, device_path: ?*const DevicePathProtocol, source_buffer: ?[*]const u8, source_size: usize, imageHandle: *?Handle) callconv(.C) Status/;"	field
loadOFile	$ZIGLIB/std/debug.zig	/fn loadOFile(self: *@This(), allocator: mem.Allocator, o_file_path: []const u8) !OFileInfo {$/;"	function
loadUnchecked	$ZIGLIB/std/atomic/Atomic.zig	/pub inline fn loadUnchecked(self: Self) T {$/;"	function
loadWinsockExtensionFunction	$ZIGLIB/std/os/windows.zig	/^pub fn loadWinsockExtensionFunction(comptime T: type, sock: ws2_32.SOCKET, guid: GUID) !T {$/;"	function
load_and_trap	$ZIGLIB/std/target/s390x.zig	/load_and_trap/;"	field
load_and_zero_rightmost_byte	$ZIGLIB/std/target/s390x.zig	/load_and_zero_rightmost_byte/;"	field
load_command	$ZIGLIB/std/macho.zig	/^pub const load_command = extern struct {$/;"	struct
load_options	$ZIGLIB/std/os/uefi/protocols/loaded_image_protocol.zig	/load_options: ?*anyopaque/;"	field
load_options_size	$ZIGLIB/std/os/uefi/protocols/loaded_image_protocol.zig	/load_options_size: u32/;"	field
load_size	$ZIGLIB/std/mem.zig	/const load_size = (bit_count + 7) \/ 8/;"	constant
load_store_on_cond	$ZIGLIB/std/target/s390x.zig	/load_store_on_cond/;"	field
load_store_on_cond_2	$ZIGLIB/std/target/s390x.zig	/load_store_on_cond_2/;"	field
load_store_opt	$ZIGLIB/std/target/amdgpu.zig	/load_store_opt/;"	field
load_tail_bits	$ZIGLIB/std/mem.zig	/const load_tail_bits = @intCast(u3, (load_size * 8) - bit_count)/;"	constant
loaded_image_device_path_protocol_guid	$ZIGLIB/std/os/uefi/protocols/loaded_image_protocol.zig	/^pub const loaded_image_device_path_protocol_guid align(8) = Guid{$/;"	constant
loader	$ZIGLIB/std/target.zig	/const loader = if (is_nan_2008) "ld-linux-mipsn8.so.1" else "ld.so.1"/;"	constant
loader_flags	$ZIGLIB/std/coff.zig	/loader_flags: u32/;"	field
local	$ZIGLIB/std/wasm.zig	/local/;"	field
localVarDecl	$ZIGLIB/std/zig/Ast.zig	/^pub fn localVarDecl(tree: Ast, node: Node.Index) full.VarDecl {$/;"	function
local_buf	$ZIGLIB/std/math/big/rational.zig	/var local_buf: [@sizeOf(Limb) * Int.default_capacity]u8 align(@alignOf(Limb)) = undefined/;"	variable
local_get	$ZIGLIB/std/wasm.zig	/local_get = 0x20/;"	field
local_ip_address	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/local_ip_address: uefi.Ipv6Address/;"	field
local_port	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/local_port: u16 align(1)/;"	field
local_set	$ZIGLIB/std/wasm.zig	/local_set = 0x21/;"	field
local_tee	$ZIGLIB/std/wasm.zig	/local_tee = 0x22/;"	field
local_var_decl	$ZIGLIB/std/zig/Ast.zig	/local_var_decl/;"	field
localhost	$ZIGLIB/std/net.zig	/const localhost = if (name[name.len - 1] == '.') "localhost." else "localhost"/;"	constant
locality	$ZIGLIB/std/builtin.zig	/locality: u2 = 3/;"	field
localityName	$ZIGLIB/std/crypto/Certificate.zig	/localityName/;"	field
localmemorysize32768	$ZIGLIB/std/target/amdgpu.zig	/localmemorysize32768/;"	field
localmemorysize65536	$ZIGLIB/std/target/amdgpu.zig	/localmemorysize65536/;"	field
locateDevicePath	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/locateDevicePath: *const fn (protocols: *align(8) const Guid, device_path: **const DevicePathProtocol, device: *?Handle) callconv(.C) Status/;"	field
locateHandle	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/locateHandle: *const fn (search_type: LocateSearchType, protocol: ?*align(8) const Guid, search_key: ?*const anyopaque, bufferSize: *usize, buffer: [*]Handle) callconv(.C) Status/;"	field
locateHandleBuffer	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/locateHandleBuffer: *const fn (search_type: LocateSearchType, protocol: ?*align(8) const Guid, search_key: ?*const anyopaque, num_handles: *usize, buffer: *[*]Handle) callconv(.C) Status/;"	field
locateProtocol	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/locateProtocol: *const fn (protocol: *align(8) const Guid, registration: ?*const anyopaque, interface: *?*anyopaque) callconv(.C) Status/;"	field
location	$ZIGLIB/std/http/Client.zig	/location: ?[]const u8 = null/;"	field
lock	$ZIGLIB/std/os/linux/syscalls.zig	/lock = Linux + 53/;"	field
lockFast	$ZIGLIB/std/Thread/Mutex.zig	/inline fn lockFast(self: *@This(), comptime casFn: []const u8) bool {$/;"	function
lockOneShotIndent	$ZIGLIB/std/zig/render.zig	/pub fn lockOneShotIndent(self: *Self) usize {$/;"	function
lockRunner	$ZIGLIB/std/event/lock.zig	/^fn lockRunner(lock: *Lock) void {$/;"	function
lockShared	$ZIGLIB/std/Thread/RwLock.zig	/pub fn lockShared(rwl: *SingleThreadedRwLock) void {$/;"	function
lockSlow	$ZIGLIB/std/Thread/Mutex.zig	/fn lockSlow(self: *@This()) void {$/;"	function
lock_flag	$ZIGLIB/std/fs.zig	/const lock_flag: u32 = if (has_flock_open_flags) switch (flags.lock) {$/;"	constant
lock_init	$ZIGLIB/std/atomic/stack.zig	/const lock_init = if (builtin.single_threaded) {} else false/;"	constant
lock_nonblocking	$ZIGLIB/std/fs/file.zig	/lock_nonblocking: bool = false/;"	field
lock_promise	$ZIGLIB/std/event/rwlock.zig	/const lock_promise = async lock.acquireWrite()/;"	constant
locked	$ZIGLIB/std/http.zig	/locked = 423/;"	field
locked_bit	$ZIGLIB/std/Thread/Mutex.zig	/const locked_bit = @ctz(@as(u32, locked))/;"	constant
locked_count	$ZIGLIB/std/zig/render.zig	/var locked_count = self.indent_one_shot_count/;"	variable
locked_data	$ZIGLIB/std/event/rwlocked.zig	/locked_data: T/;"	field
locked_exclusive	$ZIGLIB/std/Thread/RwLock.zig	/locked_exclusive/;"	field
locked_indents	$ZIGLIB/std/zig/render.zig	/var locked_indents = ais.lockOneShotIndent()/;"	variable
locked_shared	$ZIGLIB/std/Thread/RwLock.zig	/locked_shared/;"	field
locking	$ZIGLIB/std/Thread/Mutex.zig	/const locking = self.impl.tryLock()/;"	constant
locking_thread	$ZIGLIB/std/Thread/Mutex.zig	/locking_thread: Atomic(Thread.Id) = Atomic(Thread.Id).init(0)/;"	field
lockpid	$ZIGLIB/std/c/solaris.zig	/lockpid: pid_t/;"	field
locksysid	$ZIGLIB/std/c/solaris.zig	/locksysid: i32/;"	field
locktype	$ZIGLIB/std/c/solaris.zig	/locktype: i16/;"	field
loclists_base	$ZIGLIB/std/dwarf/AT.zig	/^pub const loclists_base = 0x8c/;"	constant
loclistx	$ZIGLIB/std/dwarf/FORM.zig	/^pub const loclistx = 0x22/;"	constant
locreloff	$ZIGLIB/std/macho.zig	/locreloff: u32 = 0/;"	field
log10	$ZIGLIB/std/math/log10.zig	/^pub fn log10(x: anytype) @TypeOf(x) {$/;"	function
log10_2hi	$ZIGLIB/compiler_rt/log10.zig	/const log10_2hi: f64 = 3.01029995663611771306e-01/;"	constant
log10_2lo	$ZIGLIB/compiler_rt/log10.zig	/const log10_2lo: f64 = 3.69423907715893078616e-13/;"	constant
log10e	$ZIGLIB/std/math.zig	/^pub const log10e = 0.434294481903251827651128918916605082/;"	constant
log10f	$ZIGLIB/compiler_rt/log10.zig	/^pub fn log10f(x_: f32) callconv(.C) f32 {$/;"	function
log10l	$ZIGLIB/compiler_rt/log10.zig	/^pub fn log10l(x: c_longdouble) callconv(.C) c_longdouble {$/;"	function
log10q	$ZIGLIB/compiler_rt/log10.zig	/^pub fn log10q(a: f128) callconv(.C) f128 {$/;"	function
log1p	$ZIGLIB/std/math/log1p.zig	/^pub fn log1p(x: anytype) @TypeOf(x) {$/;"	function
log1p_32	$ZIGLIB/std/math/log1p.zig	/^fn log1p_32(x: f32) f32 {$/;"	function
log1p_64	$ZIGLIB/std/math/log1p.zig	/^fn log1p_64(x: f64) f64 {$/;"	function
log2	$ZIGLIB/std/math/log2.zig	/^pub fn log2(x: anytype) @TypeOf(x) {$/;"	function
log2_align	$ZIGLIB/std/heap/arena_allocator.zig	/const log2_align = comptime std.math.log2_int(usize, @alignOf(BufNode))/;"	constant
log2_int	$ZIGLIB/std/math.zig	/^pub fn log2_int(comptime T: type, x: T) Log2Int(T) {$/;"	function
log2_int_ceil	$ZIGLIB/std/segmented_list.zig	/^fn log2_int_ceil(comptime T: type, x: T) std.math.Log2Int(T) {$/;"	function
log2_old_align	$ZIGLIB/std/heap/general_purpose_allocator.zig	/const log2_old_align = @intCast(Allocator.Log2Align, log2_old_align_u8)/;"	constant
log2_ptr_align	$ZIGLIB/std/heap/general_purpose_allocator.zig	/log2_ptr_align: if (config.never_unmap and config.retain_metadata) u8 else void/;"	field
log2_val	$ZIGLIB/std/segmented_list.zig	/const log2_val = std.math.log2_int(T, x)/;"	constant
log2a	$ZIGLIB/std/mem/Allocator.zig	/^inline fn log2a(x: anytype) switch (@typeInfo(@TypeOf(x))) {$/;"	function
log2e	$ZIGLIB/std/math.zig	/^pub const log2e = 1.442695040888963407359924681001892137/;"	constant
log2f	$ZIGLIB/compiler_rt/log2.zig	/^pub fn log2f(x_: f32) callconv(.C) f32 {$/;"	function
log2l	$ZIGLIB/compiler_rt/log2.zig	/^pub fn log2l(x: c_longdouble) callconv(.C) c_longdouble {$/;"	function
log2q	$ZIGLIB/compiler_rt/log2.zig	/^pub fn log2q(a: f128) callconv(.C) f128 {$/;"	function
log2uint	$ZIGLIB/compiler_rt/fmod.zig	/const log2uint = math.Log2Int(uint)/;"	constant
logEnabled	$ZIGLIB/std/log.zig	/^pub fn logEnabled(comptime message_level: Level, comptime scope: @Type(.EnumLiteral)) bool {$/;"	function
logFn	$ZIGLIB/std/std.zig	/pub const logFn: fn ($/;"	constant
logHelper	$ZIGLIB/std/heap/logging_allocator.zig	/inline fn logHelper(comptime log_level: std.log.Level, comptime format: []const u8, args: anytype) void {$/;"	function
logToWriterAllocator	$ZIGLIB/std/heap/log_to_writer_allocator.zig	/^pub fn logToWriterAllocator($/;"	function
log_buf	$ZIGLIB/std/os/linux/bpf.zig	/log_buf: u64/;"	field
log_level	$ZIGLIB/std/testing.zig	/^pub var log_level = std.log.Level.warn/;"	variable
log_scope_levels	$ZIGLIB/std/std.zig	/pub const log_scope_levels: []const log.ScopeLevel = if (@hasDecl(options_override, "log_scope_levels"))$/;"	constant
log_size	$ZIGLIB/std/os/linux/bpf.zig	/log_size: u32/;"	field
log_step	$ZIGLIB/std/Build.zig	/const log_step = self.allocator.create(LogStep) catch @panic("OOM")/;"	constant
log_window_size	$ZIGLIB/std/compress/deflate/compressor.zig	/^const log_window_size = 15/;"	constant
logbw	$ZIGLIB/compiler_rt/divc3.zig	/const logbw = ilogb(max(fabs(c), fabs(d)))/;"	constant
logbw_finite	$ZIGLIB/compiler_rt/divc3.zig	/const logbw_finite = logbw != maxInt(i32) and logbw != minInt(i32)/;"	constant
logf	$ZIGLIB/compiler_rt/log.zig	/^pub fn logf(x_: f32) callconv(.C) f32 {$/;"	function
loggingAllocator	$ZIGLIB/std/heap/logging_allocator.zig	/^pub fn loggingAllocator(parent_allocator: Allocator) LoggingAllocator(.debug, .err) {$/;"	function
logical_blocks_per_physical_block	$ZIGLIB/std/os/uefi/protocols/block_io_protocol.zig	/logical_blocks_per_physical_block: u32/;"	field
logical_partition	$ZIGLIB/std/os/uefi/protocols/block_io_protocol.zig	/logical_partition: bool/;"	field
logical_unit_number	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/logical_unit_number: u64 align(1)/;"	field
login_cap_t	$ZIGLIB/std/c/openbsd.zig	/^pub const login_cap_t = extern struct {$/;"	struct
logl	$ZIGLIB/compiler_rt/log.zig	/^pub fn logl(x: c_longdouble) callconv(.C) c_longdouble {$/;"	function
logq	$ZIGLIB/compiler_rt/log.zig	/^pub fn logq(a: f128) callconv(.C) f128 {$/;"	function
long	$ZIGLIB/std/target.zig	/long/;"	field
long1	$ZIGLIB/std/hash/adler.zig	/const long1 = [_]u8{1} ** 1024/;"	constant
long2	$ZIGLIB/std/hash/adler.zig	/const long2 = [_]u8{1} ** 1025/;"	constant
long_buf	$ZIGLIB/std/crypto/bcrypt.zig	/var long_buf: [hash_length]u8 = undefined/;"	variable
long_calls	$ZIGLIB/std/target/mips.zig	/long_calls/;"	field
long_form_size	$ZIGLIB/std/crypto/Certificate.zig	/var long_form_size: u32 = 0/;"	variable
long_s	$ZIGLIB/std/crypto/bcrypt.zig	/const long_s = try strHash("password" ** 100, hash_options, &long_buf)/;"	constant
longcall	$ZIGLIB/std/target/powerpc.zig	/longcall/;"	field
longdouble	$ZIGLIB/std/target.zig	/longdouble/;"	field
longest	$ZIGLIB/std/zig/render.zig	/var longest = 0/;"	variable
longest_keyword_or_primitive_len	$ZIGLIB/std/zig/render.zig	/const longest_keyword_or_primitive_len = comptime blk: {$/;"	constant
longlong	$ZIGLIB/std/target.zig	/longlong/;"	field
look_for_ld	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/const look_for_ld = cross_target.dynamic_linker.get() == null/;"	constant
lookahead	$ZIGLIB/std/compress/deflate/compressor.zig	/var lookahead = self.window_end -| self.index/;"	variable
lookup	$ZIGLIB/std/os/linux/vdso.zig	/^pub fn lookup(vername: []const u8, name: []const u8) usize {$/;"	function
lookupAddress	$ZIGLIB/std/dynamic_library.zig	/pub fn lookupAddress(self: *const ElfDynLib, vername: []const u8, name: []const u8) ?usize {$/;"	function
lookupModuleDl	$ZIGLIB/std/debug.zig	/fn lookupModuleDl(self: *DebugInfo, address: usize) !*ModuleDebugInfo {$/;"	function
lookupModuleDyld	$ZIGLIB/std/debug.zig	/fn lookupModuleDyld(self: *DebugInfo, address: usize) !*ModuleDebugInfo {$/;"	function
lookupModuleHaiku	$ZIGLIB/std/debug.zig	/fn lookupModuleHaiku(self: *DebugInfo, address: usize) !*ModuleDebugInfo {$/;"	function
lookupModuleWasm	$ZIGLIB/std/debug.zig	/fn lookupModuleWasm(self: *DebugInfo, address: usize) !*ModuleDebugInfo {$/;"	function
lookupModuleWin32	$ZIGLIB/std/debug.zig	/fn lookupModuleWin32(self: *DebugInfo, address: usize) !*ModuleDebugInfo {$/;"	function
lookup_addrs	$ZIGLIB/std/net.zig	/var lookup_addrs = std.ArrayList(LookupAddr).init(allocator)/;"	variable
lookup_dcookie	$ZIGLIB/std/os/linux/syscalls.zig	/lookup_dcookie = Linux + 247/;"	field
lookup_flags	$ZIGLIB/std/os.zig	/lookup_flags: wasi.lookupflags_t/;"	field
lookup_key	$ZIGLIB/std/os/linux/bpf.zig	/var lookup_key = [_]u8{ 1, 0, 0, 0 }/;"	variable
lookup_table	$ZIGLIB/std/hash/crc.zig	/const lookup_table = block: {$/;"	constant
lookup_tables	$ZIGLIB/std/hash/crc.zig	/const lookup_tables = block: {$/;"	constant
lookupflags_t	$ZIGLIB/std/os/wasi.zig	/^pub const lookupflags_t = u32/;"	constant
loongarch32	$ZIGLIB/std/target.zig	/loongarch32/;"	field
loongarch64	$ZIGLIB/std/target.zig	/loongarch64/;"	field
loop	$ZIGLIB/std/wasm.zig	/loop = 0x03/;"	field
loop_align	$ZIGLIB/std/target/arm.zig	/loop_align/;"	field
loop_detected	$ZIGLIB/std/http.zig	/loop_detected = 508/;"	field
loop_end	$ZIGLIB/std/mem.zig	/const loop_end = start + delta * (@intCast(isize, write_size) - 1)/;"	constant
loop_flag	$ZIGLIB/std/Build/Step.zig	/^loop_flag: bool/;"	field
loop_stmt	$ZIGLIB/std/zig/Parse.zig	/const loop_stmt = try p.parseLoopStatement()/;"	constant
loops	$ZIGLIB/std/compress/deflate/compressor.zig	/var loops = (n + 256 - min_match_length) \/ 256/;"	variable
lossyCast	$ZIGLIB/std/math.zig	/^pub fn lossyCast(comptime T: type, value: anytype) T {$/;"	function
lost_bits	$ZIGLIB/std/math/big/rational.zig	/const lost_bits = mantissa & ((@intCast(BitReprType, 1) << shift1) - 1)/;"	constant
lowA	$ZIGLIB/compiler_rt/fmod.zig	/var lowA: u64 = aPtr_u64[low_index]/;"	variable
lowB	$ZIGLIB/compiler_rt/fmod.zig	/var lowB: u64 = bPtr_u64[low_index]/;"	variable
low_coder	$ZIGLIB/std/compress/lzma/decode/rangecoder.zig	/low_coder: [16]BitTree(3) = .{.{}} ** 16/;"	field
low_index	$ZIGLIB/compiler_rt/fmod.zig	/const low_index = comptime switch (builtin.target.cpu.arch.endian()) {$/;"	constant
low_pc	$ZIGLIB/std/dwarf/AT.zig	/^pub const low_pc = 0x11/;"	constant
low_surrogate	$ZIGLIB/std/json.zig	/const low_surrogate = std.fmt.parseInt(u21, encoded[j + 2 .. j + 6], 16) catch unreachable/;"	constant
lower	$ZIGLIB/std/os/linux.zig	/lower: *anyopaque/;"	field
lowerString	$ZIGLIB/std/ascii.zig	/^pub fn lowerString(output: []u8, ascii_string: []const u8) []u8 {$/;"	function
lower_bound	$ZIGLIB/std/dwarf/AT.zig	/^pub const lower_bound = 0x22/;"	constant
lower_mask	$ZIGLIB/compiler_rt/multi3.zig	/const lower_mask = ~@as(u64, 0) >> bits_in_dword_2/;"	constant
lowest_aligned_lba	$ZIGLIB/std/os/uefi/protocols/block_io_protocol.zig	/lowest_aligned_lba: u64/;"	field
lowest_byte	$ZIGLIB/std/mem.zig	/const lowest_byte = switch (endian) {$/;"	constant
lpBaseOfDll	$ZIGLIB/std/os/windows.zig	/lpBaseOfDll: LPVOID/;"	field
lpBuffers	$ZIGLIB/std/os/windows/ws2_32.zig	/lpBuffers: [*]const WSABUF/;"	field
lpCmdLine	$ZIGLIB/std/start.zig	/const lpCmdLine = std.os.windows.kernel32.GetCommandLineW()/;"	constant
lpCompletionKey	$ZIGLIB/std/os/windows.zig	/lpCompletionKey: ULONG_PTR/;"	field
lpDesktop	$ZIGLIB/std/os/windows.zig	/lpDesktop: ?LPWSTR/;"	field
lpMaximumApplicationAddress	$ZIGLIB/std/os/windows.zig	/lpMaximumApplicationAddress: LPVOID/;"	field
lpMinimumApplicationAddress	$ZIGLIB/std/os/windows.zig	/lpMinimumApplicationAddress: LPVOID/;"	field
lpOverlapped	$ZIGLIB/std/os/windows.zig	/lpOverlapped: *OVERLAPPED/;"	field
lpReserved	$ZIGLIB/std/os/windows.zig	/lpReserved: ?LPWSTR/;"	field
lpReserved2	$ZIGLIB/std/os/windows.zig	/lpReserved2: ?*BYTE/;"	field
lpSecurityDescriptor	$ZIGLIB/std/os/windows.zig	/lpSecurityDescriptor: ?*anyopaque/;"	field
lpServiceCallbackProc	$ZIGLIB/std/os/windows/ws2_32.zig	/lpServiceCallbackProc: LPSERVICE_CALLBACK_PROC/;"	field
lpSockaddr	$ZIGLIB/std/os/windows/ws2_32.zig	/lpSockaddr: *sockaddr/;"	field
lpTitle	$ZIGLIB/std/os/windows.zig	/lpTitle: ?LPWSTR/;"	field
lpVendorInfo	$ZIGLIB/std/os/windows/ws2_32.zig	/lpVendorInfo: *u8/;"	field
lparen	$ZIGLIB/std/zig/render.zig	/const lparen = tree.firstToken(while_node.ast.cont_expr) - 1/;"	constant
lparen_token	$ZIGLIB/std/zig/render.zig	/const lparen_token = tree.firstToken(field.ast.align_expr) - 1/;"	constant
lpfnWndProc	$ZIGLIB/std/os/windows/user32.zig	/lpfnWndProc: WNDPROC/;"	field
lpm_trie	$ZIGLIB/std/os/linux/bpf.zig	/lpm_trie/;"	field
lpmx	$ZIGLIB/std/target/avr.zig	/lpmx/;"	field
lpszClassName	$ZIGLIB/std/os/windows/user32.zig	/lpszClassName: [*:0]const u8/;"	field
lpszMenuName	$ZIGLIB/std/os/windows/user32.zig	/lpszMenuName: ?[*:0]const u8/;"	field
lremovexattr	$ZIGLIB/std/os/linux/syscalls.zig	/lremovexattr = Linux + 234/;"	field
lru_hash	$ZIGLIB/std/os/linux/bpf.zig	/lru_hash/;"	field
lru_percpu_hash	$ZIGLIB/std/os/linux/bpf.zig	/lru_percpu_hash/;"	field
ls64	$ZIGLIB/std/target/aarch64.zig	/ls64/;"	field
lsda	$ZIGLIB/std/macho.zig	/lsda: u64/;"	field
lsdaIndexArraySectionOffset	$ZIGLIB/std/macho.zig	/lsdaIndexArraySectionOffset: u32/;"	field
lsdaOffset	$ZIGLIB/std/macho.zig	/lsdaOffset: u32/;"	field
lse2	$ZIGLIB/std/target/aarch64.zig	/lse2/;"	field
lseek	$ZIGLIB/std/os/linux/syscalls.zig	/lseek = Linux + 8/;"	field
lseek_CUR	$ZIGLIB/std/os.zig	/^pub fn lseek_CUR(fd: fd_t, offset: i64) SeekError!void {$/;"	function
lseek_CUR_get	$ZIGLIB/std/os.zig	/^pub fn lseek_CUR_get(fd: fd_t) SeekError!u64 {$/;"	function
lseek_END	$ZIGLIB/std/os.zig	/^pub fn lseek_END(fd: fd_t, offset: i64) SeekError!void {$/;"	function
lseek_SET	$ZIGLIB/std/os.zig	/^pub fn lseek_SET(fd: fd_t, offset: u64) SeekError!void {$/;"	function
lseek_sym	$ZIGLIB/std/os.zig	/const lseek_sym = if (builtin.os.tag == .linux and builtin.link_libc)$/;"	constant
lsetxattr	$ZIGLIB/std/os/linux/syscalls.zig	/lsetxattr = Linux + 225/;"	field
lshrXi3	$ZIGLIB/compiler_rt/shift.zig	/^inline fn lshrXi3(comptime T: type, a: T, b: i32) T {$/;"	function
lsl_fast	$ZIGLIB/std/target/aarch64.zig	/lsl_fast/;"	field
lsm_mac	$ZIGLIB/std/os/linux/bpf.zig	/lsm_mac/;"	field
lspare	$ZIGLIB/std/c/dragonfly.zig	/lspare: i32/;"	field
lstat	$ZIGLIB/std/os/linux/syscalls.zig	/lstat = Linux + 6/;"	field
lstat64	$ZIGLIB/std/os/linux/syscalls.zig	/lstat64 = Linux + 214/;"	field
lten	$ZIGLIB/std/fmt/errol.zig	/const lten = lookup_table[@intCast(usize, exp)].val/;"	constant
ltrimmed	$ZIGLIB/std/tar.zig	/const ltrimmed = std.mem.trimLeft(u8, raw, "0")/;"	constant
lui_addi_fusion	$ZIGLIB/std/target/riscv.zig	/lui_addi_fusion/;"	field
lvi_cfi	$ZIGLIB/std/target/x86.zig	/lvi_cfi/;"	field
lvi_load_hardening	$ZIGLIB/std/target/x86.zig	/lvi_load_hardening/;"	field
lwpid_t	$ZIGLIB/std/c/netbsd.zig	/^pub const lwpid_t = i32/;"	constant
lwt_in	$ZIGLIB/std/os/linux/bpf.zig	/lwt_in/;"	field
lwt_out	$ZIGLIB/std/os/linux/bpf.zig	/lwt_out/;"	field
lwt_push_encap	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const lwt_push_encap = @intToPtr(fn (skb: *kern.SkBuff, typ: u32, hdr: ?*anyopaque, len: u32) c_long, 73)/;"	constant
lwt_seg6_action	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const lwt_seg6_action = @intToPtr(fn (skb: *kern.SkBuff, action: u32, param: ?*anyopaque, param_len: u32) c_long, 76)/;"	constant
lwt_seg6_adjust_srh	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const lwt_seg6_adjust_srh = @intToPtr(fn (skb: *kern.SkBuff, offset: u32, delta: i32) c_long, 75)/;"	constant
lwt_seg6_store_bytes	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const lwt_seg6_store_bytes = @intToPtr(fn (skb: *kern.SkBuff, offset: u32, from: ?*const anyopaque, len: u32) c_long, 74)/;"	constant
lwt_seg6local	$ZIGLIB/std/os/linux/bpf.zig	/lwt_seg6local/;"	field
lwt_xmit	$ZIGLIB/std/os/linux/bpf.zig	/lwt_xmit/;"	field
lzcnt	$ZIGLIB/std/target/x86.zig	/lzcnt/;"	field
lzma2	$ZIGLIB/std/compress/xz/block.zig	/lzma2 = 0x21/;"	field
lzma_props	$ZIGLIB/std/compress/lzma/decode.zig	/lzma_props: Properties/;"	field
lzma_state	$ZIGLIB/std/compress/lzma2/decode.zig	/lzma_state: DecoderState/;"	field
m3000	$ZIGLIB/std/target/avr.zig	/pub const m3000 = CpuModel{$/;"	constant
m68k	$ZIGLIB/std/target.zig	/m68k/;"	field
mHash	$ZIGLIB/std/crypto/Certificate.zig	/var mHash: [Hash.digest_length]u8 = undefined/;"	variable
m_info	$ZIGLIB/std/elf.zig	/m_info: Elf64_Xword/;"	field
m_mut	$ZIGLIB/std/math/big/int.zig	/var m_mut = m.toMutable()/;"	variable
m_poffset	$ZIGLIB/std/elf.zig	/m_poffset: Elf64_Xword/;"	field
m_repeat	$ZIGLIB/std/elf.zig	/m_repeat: Elf64_Half/;"	field
m_root	$ZIGLIB/std/crypto/25519/field.zig	/const m_root = p_root.mul(Fe.sqrtm1)/;"	constant
m_root2	$ZIGLIB/std/crypto/25519/field.zig	/const m_root2 = m_root.sq()/;"	constant
m_root_check	$ZIGLIB/std/crypto/25519/ristretto255.zig	/const m_root_check = vxx.sub(u)/;"	constant
m_stride	$ZIGLIB/std/elf.zig	/m_stride: Elf64_Half/;"	field
m_value	$ZIGLIB/std/elf.zig	/m_value: Elf64_Xword/;"	field
ma2080	$ZIGLIB/std/target/sparc.zig	/pub const ma2080 = CpuModel{$/;"	constant
ma2085	$ZIGLIB/std/target/sparc.zig	/pub const ma2085 = CpuModel{$/;"	constant
ma2100	$ZIGLIB/std/target/sparc.zig	/pub const ma2100 = CpuModel{$/;"	constant
ma2150	$ZIGLIB/std/target/sparc.zig	/pub const ma2150 = CpuModel{$/;"	constant
ma2155	$ZIGLIB/std/target/sparc.zig	/pub const ma2155 = CpuModel{$/;"	constant
ma2450	$ZIGLIB/std/target/sparc.zig	/pub const ma2450 = CpuModel{$/;"	constant
ma2455	$ZIGLIB/std/target/sparc.zig	/pub const ma2455 = CpuModel{$/;"	constant
ma2480	$ZIGLIB/std/target/sparc.zig	/pub const ma2480 = CpuModel{$/;"	constant
ma2485	$ZIGLIB/std/target/sparc.zig	/pub const ma2485 = CpuModel{$/;"	constant
ma2x5x	$ZIGLIB/std/target/sparc.zig	/pub const ma2x5x = CpuModel{$/;"	constant
ma2x8x	$ZIGLIB/std/target/sparc.zig	/pub const ma2x8x = CpuModel{$/;"	constant
mac_address	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/mac_address: uefi.MacAddress/;"	field
mac_address_changeable	$ZIGLIB/std/os/uefi/protocols/simple_network_protocol.zig	/mac_address_changeable: bool/;"	field
mac_info	$ZIGLIB/std/dwarf/AT.zig	/^pub const mac_info = 0x2103/;"	constant
mac_length	$ZIGLIB/std/crypto/siphash.zig	/pub const mac_length = @sizeOf(T)/;"	constant
macabi	$ZIGLIB/std/target.zig	/macabi/;"	field
machTaskForPid	$ZIGLIB/std/os/darwin.zig	/pub fn machTaskForPid(pid: std.os.pid_t) MachError!MachTask {$/;"	function
machTaskForSelf	$ZIGLIB/std/os/darwin.zig	/pub fn machTaskForSelf() MachTask {$/;"	function
mach_exception_data_t	$ZIGLIB/std/c/darwin.zig	/^pub const mach_exception_data_t = ?*mach_exception_data_type_t/;"	constant
mach_exception_data_type_t	$ZIGLIB/std/c/darwin.zig	/^pub const mach_exception_data_type_t = i64/;"	constant
mach_hdr	$ZIGLIB/std/c/darwin.zig	/^const mach_hdr = if (@sizeOf(usize) == 8) mach_header_64 else mach_header/;"	constant
mach_header	$ZIGLIB/std/macho.zig	/^pub const mach_header = extern struct {$/;"	struct
mach_header_64	$ZIGLIB/std/macho.zig	/^pub const mach_header_64 = extern struct {$/;"	struct
mach_msg_bits_t	$ZIGLIB/std/c/darwin.zig	/^pub const mach_msg_bits_t = c_uint/;"	constant
mach_msg_header_t	$ZIGLIB/std/c/darwin.zig	/^pub const mach_msg_header_t = extern struct {$/;"	struct
mach_msg_id_t	$ZIGLIB/std/c/darwin.zig	/^pub const mach_msg_id_t = integer_t/;"	constant
mach_msg_option_t	$ZIGLIB/std/c/darwin.zig	/^pub const mach_msg_option_t = integer_t/;"	constant
mach_msg_return_t	$ZIGLIB/std/c/darwin.zig	/^pub const mach_msg_return_t = kern_return_t/;"	constant
mach_msg_size_t	$ZIGLIB/std/c/darwin.zig	/^pub const mach_msg_size_t = natural_t/;"	constant
mach_msg_timeout_t	$ZIGLIB/std/c/darwin.zig	/^pub const mach_msg_timeout_t = natural_t/;"	constant
mach_msg_type_name_t	$ZIGLIB/std/c/darwin.zig	/^pub const mach_msg_type_name_t = c_uint/;"	constant
mach_msg_type_number_t	$ZIGLIB/std/c/darwin.zig	/^pub const mach_msg_type_number_t = natural_t/;"	constant
mach_port_array_t	$ZIGLIB/std/c/darwin.zig	/^pub const mach_port_array_t = [*]mach_port_t/;"	constant
mach_port_name_t	$ZIGLIB/std/c/darwin.zig	/^pub const mach_port_name_t = natural_t/;"	constant
mach_port_right_t	$ZIGLIB/std/c/darwin.zig	/^pub const mach_port_right_t = natural_t/;"	constant
mach_port_t	$ZIGLIB/std/c/darwin.zig	/^pub const mach_port_t = c_uint/;"	constant
mach_task	$ZIGLIB/std/os/darwin.zig	/^const mach_task = if (builtin.target.isDarwin()) struct {$/;"	constant
mach_task_basic_info	$ZIGLIB/std/c/darwin.zig	/^pub const mach_task_basic_info = extern struct {$/;"	struct
mach_task_self	$ZIGLIB/std/c/darwin.zig	/^pub fn mach_task_self() callconv(.C) mach_port_t {$/;"	function
mach_task_self_	$ZIGLIB/std/c/darwin.zig	/^extern "c" var mach_task_self_: mach_port_t/;"	variable
mach_timebase_info_data	$ZIGLIB/std/c/darwin.zig	/^pub const mach_timebase_info_data = extern struct {$/;"	struct
mach_timespec_t	$ZIGLIB/std/c/darwin.zig	/^pub const mach_timespec_t = extern struct {$/;"	struct
mach_vm_address_t	$ZIGLIB/std/c/darwin.zig	/^pub const mach_vm_address_t = usize/;"	constant
mach_vm_size_t	$ZIGLIB/std/c/darwin.zig	/^pub const mach_vm_size_t = u64/;"	constant
machine	$ZIGLIB/std/os/linux.zig	/machine: [64:0]u8/;"	field
macho	$ZIGLIB/std/target.zig	/macho/;"	field
machoSearchSymbols	$ZIGLIB/std/debug.zig	/^fn machoSearchSymbols(symbols: []const MachoSymbol, address: usize) ?*const MachoSymbol {$/;"	function
macho_file	$ZIGLIB/std/debug.zig	/const macho_file = fs.cwd().openFile(macho_path, .{$/;"	constant
macho_path	$ZIGLIB/std/debug.zig	/const macho_path = mem.sliceTo(std.c._dyld_get_image_name(i), 0)/;"	constant
macos	$ZIGLIB/std/target.zig	/macos/;"	field
macos_platform_constant	$ZIGLIB/compiler_rt/os_version_check.zig	/const macos_platform_constant = 1/;"	constant
macro	$ZIGLIB/std/Build/TranslateCStep.zig	/const macro = std.Build.constructCMacro(self.builder.allocator, name, value)/;"	constant
macro_info	$ZIGLIB/std/dwarf/AT.zig	/^pub const macro_info = 0x43/;"	constant
macrofusion	$ZIGLIB/std/target/x86.zig	/macrofusion/;"	field
macros	$ZIGLIB/std/dwarf/AT.zig	/^pub const macros = 0x79/;"	constant
mad_mac_f32_insts	$ZIGLIB/std/target/amdgpu.zig	/mad_mac_f32_insts/;"	field
mad_mix_insts	$ZIGLIB/std/target/amdgpu.zig	/mad_mix_insts/;"	field
madvise	$ZIGLIB/std/os/linux/syscalls.zig	/madvise = Linux + 27/;"	field
magenta	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/pub const magenta: u8 = 0x05/;"	constant
magic	$ZIGLIB/std/wasm.zig	/^pub const magic = [_]u8{ 0x00, 0x61, 0x73, 0x6D }/;"	constant
magic_etc	$ZIGLIB/std/os/linux.zig	/magic_etc: u32/;"	field
magnitude	$ZIGLIB/std/math/complex.zig	/pub fn magnitude(self: Self) T {$/;"	function
magnitude_bits	$ZIGLIB/std/math.zig	/var magnitude_bits = if (upper >= largest_positive_integer) base else base + 1/;"	variable
mags_iec	$ZIGLIB/std/fmt.zig	/const mags_iec = " KMGTPEZY"/;"	constant
mags_si	$ZIGLIB/std/fmt.zig	/const mags_si = " kMGTPEZY"/;"	constant
mai_insts	$ZIGLIB/std/target/amdgpu.zig	/mai_insts/;"	field
main	$ZIGLIB/std/start.zig	/^fn main(c_argc: c_int, c_argv: [*c][*c]u8, c_envp: [*c][*c]u8) callconv(.C) c_int {$/;"	function
main2	$ZIGLIB/std/start.zig	/^fn main2() callconv(.C) c_int {$/;"	function
mainWithoutEnv	$ZIGLIB/std/start.zig	/^fn mainWithoutEnv(c_argc: c_int, c_argv: [*c][*c]u8) callconv(.C) c_int {$/;"	function
main_cert_pub_key	$ZIGLIB/std/crypto/tls/Client.zig	/const main_cert_pub_key = main_cert_pub_key_buf[0..main_cert_pub_key_len]/;"	constant
main_cert_pub_key_algo	$ZIGLIB/std/crypto/tls/Client.zig	/var main_cert_pub_key_algo: Certificate.AlgorithmCategory = undefined/;"	variable
main_cert_pub_key_buf	$ZIGLIB/std/crypto/tls/Client.zig	/var main_cert_pub_key_buf: [300]u8 = undefined/;"	variable
main_cert_pub_key_len	$ZIGLIB/std/crypto/tls/Client.zig	/var main_cert_pub_key_len: u16 = undefined/;"	variable
main_pkg_path	$ZIGLIB/std/Build/CompileStep.zig	/^main_pkg_path: ?[]const u8/;"	field
main_subprogram	$ZIGLIB/std/dwarf/AT.zig	/^pub const main_subprogram = 0x6a/;"	constant
main_tests	$ZIGLIB/init-lib/build.zig	/const main_tests = b.addTest(.{$/;"	constant
main_thread_tls_buffer	$ZIGLIB/std/os/linux/tls.zig	/^var main_thread_tls_buffer: [0x2100]u8 align(mem.page_size) = undefined/;"	variable
main_token	$ZIGLIB/std/zig/render.zig	/const main_token = main_tokens[node]/;"	constant
main_tokens	$ZIGLIB/std/zig/render.zig	/const main_tokens = tree.nodes.items(.main_token)/;"	constant
majflt	$ZIGLIB/std/os/linux.zig	/majflt: isize/;"	field
major	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/const major = value \/ 100_000_000/;"	constant
major_image_version	$ZIGLIB/std/coff.zig	/major_image_version: u16/;"	field
major_linker_version	$ZIGLIB/std/coff.zig	/major_linker_version: u8/;"	field
major_only_filename	$ZIGLIB/std/Build/CompileStep.zig	/^major_only_filename: ?[]const u8/;"	field
major_only_path	$ZIGLIB/std/Build/CompileStep.zig	/const major_only_path = try fs.path.join($/;"	constant
major_operating_system_version	$ZIGLIB/std/coff.zig	/major_operating_system_version: u16/;"	field
major_subsystem_version	$ZIGLIB/std/coff.zig	/major_subsystem_version: u16/;"	field
major_t	$ZIGLIB/std/c/solaris.zig	/^pub const major_t = u32/;"	constant
major_version	$ZIGLIB/std/coff.zig	/major_version: u16/;"	field
make	$ZIGLIB/std/Build/WriteFileStep.zig	/^fn make(step: *Step) !void {$/;"	function
makeDir	$ZIGLIB/std/fs.zig	/pub fn makeDir(self: Dir, sub_path: []const u8) !void {$/;"	function
makeDirAbsolute	$ZIGLIB/std/fs.zig	/^pub fn makeDirAbsolute(absolute_path: []const u8) !void {$/;"	function
makeDirAbsoluteW	$ZIGLIB/std/fs.zig	/^pub fn makeDirAbsoluteW(absolute_path_w: [*:0]const u16) !void {$/;"	function
makeDirAbsoluteZ	$ZIGLIB/std/fs.zig	/^pub fn makeDirAbsoluteZ(absolute_path_z: [*:0]const u8) !void {$/;"	function
makeDirW	$ZIGLIB/std/fs.zig	/pub fn makeDirW(self: Dir, sub_path: [*:0]const u16) !void {$/;"	function
makeDirZ	$ZIGLIB/std/fs.zig	/pub fn makeDirZ(self: Dir, sub_path: [*:0]const u8) !void {$/;"	function
makeFn	$ZIGLIB/std/Build/Step.zig	/^makeFn: *const fn (self: *Step) anyerror!void/;"	field
makeMemDefined	$ZIGLIB/std/valgrind/memcheck.zig	/^pub fn makeMemDefined(qzz: []u8) i1 {$/;"	function
makeMemDefinedIfAddressable	$ZIGLIB/std/valgrind/memcheck.zig	/^pub fn makeMemDefinedIfAddressable(qzz: []u8) i1 {$/;"	function
makeMemNoAccess	$ZIGLIB/std/valgrind/memcheck.zig	/^pub fn makeMemNoAccess(qzz: []u8) i1 {$/;"	function
makeMemUndefined	$ZIGLIB/std/valgrind/memcheck.zig	/^pub fn makeMemUndefined(qzz: []u8) i1 {$/;"	function
makeNoOp	$ZIGLIB/std/Build/Step.zig	/^fn makeNoOp(self: *Step) anyerror!void {$/;"	function
makeOneStep	$ZIGLIB/std/Build.zig	/^fn makeOneStep(self: *Build, s: *Step) anyerror!void {$/;"	function
makeOpenPath	$ZIGLIB/std/fs.zig	/pub fn makeOpenPath(self: Dir, sub_path: []const u8, open_dir_options: OpenDirOptions) !Dir {$/;"	function
makeOpenPathIterable	$ZIGLIB/std/fs.zig	/pub fn makeOpenPathIterable(self: Dir, sub_path: []const u8, open_dir_options: OpenDirOptions) !IterableDir {$/;"	function
makePath	$ZIGLIB/std/fs.zig	/pub fn makePath(self: Dir, sub_path: []const u8) !void {$/;"	function
makeUninstall	$ZIGLIB/std/Build.zig	/^fn makeUninstall(uninstall_step: *Step) anyerror!void {$/;"	function
make_f80	$ZIGLIB/std/math.zig	/^pub fn make_f80(repr: F80) f80 {$/;"	function
mallocLikeBlock	$ZIGLIB/std/valgrind.zig	/^pub fn mallocLikeBlock(mem: []u8, rzB: usize, is_zeroed: bool) void {$/;"	function
malloc_size	$ZIGLIB/std/heap.zig	/pub const malloc_size = c.malloc_usable_size/;"	constant
managed	$ZIGLIB/std/array_list.zig	/var managed = self.toManaged(allocator)/;"	variable
mantissa	$ZIGLIB/std/rand.zig	/const mantissa = rand & 0xFFFFFFFFFFFFF/;"	constant
mantissaOne	$ZIGLIB/std/math/float.zig	/^inline fn mantissaOne(comptime T: type) comptime_int {$/;"	function
mantissaType	$ZIGLIB/std/fmt/parse_float/common.zig	/^pub fn mantissaType(comptime T: type) type {$/;"	function
mantissa_bits	$ZIGLIB/std/math/ldexp.zig	/const mantissa_bits = math.floatMantissaBits(T)/;"	constant
mantissa_digits	$ZIGLIB/std/fmt.zig	/const mantissa_digits = (fractional_bits + 3) \/ 4/;"	constant
mantissa_explicit_bits	$ZIGLIB/std/fmt/parse_float/convert_slow.zig	/const mantissa_explicit_bits = math.floatMantissaBits(T)/;"	constant
mantissa_mask	$ZIGLIB/std/math/ldexp.zig	/const mantissa_mask = @as(TBits, (1 << mantissa_bits) - 1)/;"	constant
many_digits	$ZIGLIB/std/fmt/parse_float/parse.zig	/var many_digits = false/;"	variable
map64	$ZIGLIB/std/crypto/scrypt.zig	/const map64 = map/;"	constant
mapIpToSrcloc	$ZIGLIB/std/valgrind.zig	/^pub fn mapIpToSrcloc(addr: *const u8, buf64: [64]u8) usize {$/;"	function
mapWholeFile	$ZIGLIB/std/debug.zig	/^fn mapWholeFile(file: File) ![]align(mem.page_size) const u8 {$/;"	function
map_batch	$ZIGLIB/std/os/linux/bpf.zig	/map_batch: MapBatchAttr/;"	field
map_bytes	$ZIGLIB/std/Thread.zig	/const map_bytes = blk: {$/;"	constant
map_create	$ZIGLIB/std/os/linux/bpf.zig	/map_create: MapCreateAttr/;"	field
map_delete_batch	$ZIGLIB/std/os/linux/bpf.zig	/map_delete_batch/;"	field
map_delete_elem	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const map_delete_elem = @intToPtr(fn (map: *const kern.MapDef, key: ?*const anyopaque) c_long, 3)/;"	constant
map_elem	$ZIGLIB/std/os/linux/bpf.zig	/map_elem: MapElemAttr/;"	field
map_fd	$ZIGLIB/std/os/linux/bpf.zig	/map_fd: fd_t/;"	field
map_flags	$ZIGLIB/std/os/linux/bpf.zig	/map_flags: u32/;"	field
map_freeze	$ZIGLIB/std/os/linux/bpf.zig	/map_freeze/;"	field
map_get_fd_by_id	$ZIGLIB/std/os/linux/bpf.zig	/map_get_fd_by_id/;"	field
map_get_next_id	$ZIGLIB/std/os/linux/bpf.zig	/map_get_next_id/;"	field
map_get_next_key	$ZIGLIB/std/os/linux/bpf.zig	/map_get_next_key/;"	field
map_id	$ZIGLIB/std/os/linux/bpf.zig	/map_id: u32/;"	field
map_ifindex	$ZIGLIB/std/os/linux/bpf.zig	/map_ifindex: u32/;"	field
map_lookup_and_delete_batch	$ZIGLIB/std/os/linux/bpf.zig	/map_lookup_and_delete_batch/;"	field
map_lookup_and_delete_elem	$ZIGLIB/std/os/linux/bpf.zig	/map_lookup_and_delete_elem/;"	field
map_lookup_batch	$ZIGLIB/std/os/linux/bpf.zig	/map_lookup_batch/;"	field
map_lookup_elem	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const map_lookup_elem = @intToPtr(fn (map: *const kern.MapDef, key: ?*const anyopaque) ?*anyopaque, 1)/;"	constant
map_name	$ZIGLIB/std/os/linux/bpf.zig	/map_name: [obj_name_len]u8/;"	field
map_peek_elem	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const map_peek_elem = @intToPtr(fn (map: *const kern.MapDef, value: ?*anyopaque) c_long, 89)/;"	constant
map_pop_elem	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const map_pop_elem = @intToPtr(fn (map: *const kern.MapDef, value: ?*anyopaque) c_long, 88)/;"	constant
map_push_elem	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const map_push_elem = @intToPtr(fn (map: *const kern.MapDef, value: ?*const anyopaque, flags: u64) c_long, 87)/;"	constant
map_type	$ZIGLIB/std/os/linux/bpf.zig	/map_type: u32/;"	field
map_update_batch	$ZIGLIB/std/os/linux/bpf.zig	/map_update_batch/;"	field
map_update_elem	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const map_update_elem = @intToPtr(fn (map: *const kern.MapDef, key: ?*const anyopaque, value: ?*const anyopaque, flags: u64) c_long, 2)/;"	constant
mapped	$ZIGLIB/std/Thread.zig	/mapped: []align(std.mem.page_size) u8/;"	field
mapped_mem	$ZIGLIB/std/debug.zig	/const mapped_mem = try os.mmap($/;"	constant
mapped_memory	$ZIGLIB/std/debug.zig	/mapped_memory: []align(mem.page_size) const u8/;"	field
mapped_module	$ZIGLIB/std/debug.zig	/const mapped_module = @intToPtr([*]const u8, module.base_address)[0..module.size]/;"	constant
march_forward_bytes	$ZIGLIB/std/pdb.zig	/const march_forward_bytes = round_to_next_4 - this_record_len/;"	constant
margin	$ZIGLIB/std/time.zig	/const margin = ns_per_ms * 50/;"	constant
mark	$ZIGLIB/std/zig/system/darwin/macos.zig	/var mark: usize = self.index/;"	variable
markInvalidUserInput	$ZIGLIB/std/Build.zig	/^fn markInvalidUserInput(self: *Build) void {$/;"	function
marker	$ZIGLIB/std/fmt/parse_float/parse.zig	/var marker = stream.offsetTrue()/;"	variable
marker_mandatory	$ZIGLIB/std/compress/lzma/decode.zig	/const marker_mandatory = unpacked_size_provided == 0xFFFF_FFFF_FFFF_FFFF/;"	constant
mask	$ZIGLIB/std/packed_int_array.zig	/const mask = ~inv_mask/;"	constant
mask1	$ZIGLIB/std/crypto/aes/armcrypto.zig	/const mask1 = @Vector(16, u8){ 13, 14, 15, 12, 13, 14, 15, 12, 13, 14, 15, 12, 13, 14, 15, 12 }/;"	constant
mask2	$ZIGLIB/std/crypto/aes/armcrypto.zig	/const mask2 = @Vector(16, u8){ 12, 13, 14, 15, 12, 13, 14, 15, 12, 13, 14, 15, 12, 13, 14, 15 }/;"	constant
maskBit	$ZIGLIB/std/bit_set.zig	/fn maskBit(index: usize) MaskInt {$/;"	function
maskIndex	$ZIGLIB/std/bit_set.zig	/fn maskIndex(index: usize) usize {$/;"	function
mask_index	$ZIGLIB/std/bit_set.zig	/const mask_index = maskIndex(index)/;"	constant
mask_info	$ZIGLIB/std/bit_set.zig	/const mask_info: std.builtin.Type = @typeInfo(MaskIntType)/;"	constant
mask_len	$ZIGLIB/std/bit_set.zig	/const mask_len = @bitSizeOf(MaskInt)/;"	constant
mask_size	$ZIGLIB/std/os/linux.zig	/const mask_size = @sizeOf(@TypeOf(ksa.mask))/;"	constant
maskedDB	$ZIGLIB/std/crypto/Certificate.zig	/const maskedDB = em[0..(emLen - Hash.digest_length - 1)]/;"	constant
masks	$ZIGLIB/std/os/darwin.zig	/masks: [std.c.EXC_TYPES_COUNT]std.c.exception_mask_t/;"	field
master_secret	$ZIGLIB/std/crypto/tls.zig	/master_secret: [Hkdf.prk_length]u8/;"	field
match	$ZIGLIB/std/Build/CheckObjectStep.zig	/match/;"	field
matchLen	$ZIGLIB/std/compress/deflate/deflate_fast.zig	/fn matchLen(self: *Self, s: i32, t: i32, src: []u8) i32 {$/;"	function
matchToken	$ZIGLIB/std/compress/deflate/token.zig	/^pub fn matchToken(xlength: u32, xoffset: u32) Token {$/;"	function
match_bit	$ZIGLIB/std/compress/lzma/decode.zig	/const match_bit = (match_byte >> 7) & 1/;"	constant
match_byte	$ZIGLIB/std/compress/lzma/decode.zig	/var match_byte = @as(usize, try buffer.lastN(self.rep[0] + 1))/;"	variable
match_type	$ZIGLIB/std/compress/deflate/token.zig	/^pub const match_type = 1 << 30/;"	constant
matches	$ZIGLIB/std/io/reader.zig	/var matches = true/;"	variable
matches_r	$ZIGLIB/std/http/Client.zig	/const matches_r = v == @splat(16, @as(u8, '\\r'))/;"	constant
matrix	$ZIGLIB/std/compress/lzma/vec2d.zig	/var matrix = try Vec2D(i32).init(allocator, 0, .{ 3, 5 })/;"	variable
mattr_value	$ZIGLIB/std/os/darwin.zig	/var mattr_value: std.c.vm_machine_attribute_val_t = std.c.MATTR_VAL_CACHE_FLUSH/;"	variable
max3	$ZIGLIB/std/math.zig	/^pub fn max3(x: anytype, y: anytype, z: anytype) @TypeOf(x, y, z) {$/;"	function
maxBytesLeftInPage	$ZIGLIB/std/os/darwin.zig	/fn maxBytesLeftInPage(page_size: usize, address: u64, count: usize) usize {$/;"	function
maxExponent	$ZIGLIB/std/math/ilogb.zig	/const maxExponent = ((1 << exponentBits) - 1)/;"	constant
maxIdx	$ZIGLIB/std/mem.zig	/var maxIdx: usize = 0/;"	variable
maxIndex	$ZIGLIB/std/priority_dequeue.zig	/fn maxIndex(self: Self) ?usize {$/;"	function
maxInt	$ZIGLIB/std/math.zig	/^pub fn maxInt(comptime T: type) comptime_int {$/;"	function
maxIntAlignment	$ZIGLIB/std/target.zig	/pub inline fn maxIntAlignment(target: Target) u16 {$/;"	function
maxLoad	$ZIGLIB/std/pdb.zig	/fn maxLoad(cap: u32) u32 {$/;"	function
maxNode	$ZIGLIB/std/compress/deflate/huffman_code.zig	/^fn maxNode() LiteralNode {$/;"	function
maxVal	$ZIGLIB/std/mem.zig	/var maxVal = slice[0]/;"	variable
max_address	$ZIGLIB/std/c/darwin.zig	/max_address: mach_vm_address_t/;"	field
max_align	$ZIGLIB/std/hash_map.zig	/const max_align = comptime math.max3(header_align, key_align, val_align)/;"	constant
max_align_t	$ZIGLIB/std/c.zig	/^pub const max_align_t = if (builtin.abi == .msvc)$/;"	constant
max_biased_exponent	$ZIGLIB/std/math/ldexp.zig	/const max_biased_exponent = 2 * math.floatExponentMax(T)/;"	constant
max_bit_index	$ZIGLIB/std/array_hash_map.zig	/^const max_bit_index = math.min(32, max_representable_index_len)/;"	constant
max_bits	$ZIGLIB/std/packed_int_array.zig	/const max_bits = 256/;"	constant
max_bits_limit	$ZIGLIB/std/compress/deflate/huffman_code.zig	/^const max_bits_limit = 16/;"	constant
max_bucket_bits	$ZIGLIB/std/Thread/Futex.zig	/const max_bucket_bits = @ctz(buckets.len)/;"	constant
max_byte	$ZIGLIB/std/target.zig	/max_byte: ?u8 = null/;"	field
max_bytes	$ZIGLIB/std/Build/ConfigHeaderStep.zig	/max_bytes: usize = 2 * 1024 * 1024/;"	field
max_capacity	$ZIGLIB/std/array_hash_map.zig	/^const max_capacity = (1 << max_bit_index) - 1/;"	constant
max_chars_needed	$ZIGLIB/std/child_process.zig	/var max_chars_needed: usize = 4/;"	variable
max_ciphertext_len	$ZIGLIB/std/crypto/tls.zig	/^pub const max_ciphertext_len = (1 << 14) + 256/;"	constant
max_ciphertext_record_len	$ZIGLIB/std/crypto/tls.zig	/^pub const max_ciphertext_record_len = max_ciphertext_len + record_header_len/;"	constant
max_code_len	$ZIGLIB/std/compress/deflate/decompressor.zig	/^const max_code_len = 16/;"	constant
max_context_len	$ZIGLIB/std/crypto/tls.zig	/const max_context_len = 255/;"	constant
max_count	$ZIGLIB/std/os.zig	/const max_count = switch (builtin.os.tag) {$/;"	constant
max_counter	$ZIGLIB/std/event/wait_group.zig	/max_counter: CounterType = std.math.maxInt(CounterType)/;"	field
max_cpu_buf	$ZIGLIB/std/zig/system/windows.zig	/const max_cpu_buf = 4/;"	constant
max_decimal_digits	$ZIGLIB/std/fmt/parse_float/decimal.zig	/pub const max_decimal_digits = if (MantissaT == u64) 18 else 37/;"	constant
max_digest_len	$ZIGLIB/std/crypto/tls/Client.zig	/const max_digest_len = 64/;"	constant
max_digits	$ZIGLIB/std/fmt/parse_float/decimal.zig	/pub const max_digits = if (MantissaT == u64) 768 else 11564/;"	constant
max_digits_without_overflow	$ZIGLIB/std/fmt/parse_float/decimal.zig	/pub const max_digits_without_overflow = if (MantissaT == u64) 19 else 38/;"	constant
max_encoded_length	$ZIGLIB/std/crypto/scrypt.zig	/const max_encoded_length = Codec.encodedLen(max_len)/;"	constant
max_end_byte	$ZIGLIB/std/packed_int_array.zig	/const max_end_byte = (bit_index + max_io_bits) \/ 8/;"	constant
max_entries	$ZIGLIB/std/os/linux/bpf.zig	/max_entries: u32/;"	field
max_exp	$ZIGLIB/std/fmt/parse_float/convert_hex.zig	/const max_exp = math.floatExponentMax(T)/;"	constant
max_exponent	$ZIGLIB/std/math/ldexp.zig	/const max_exponent = math.floatExponentMax(T)/;"	constant
max_exponent_fast_path	$ZIGLIB/std/fmt/parse_float/FloatInfo.zig	/^max_exponent_fast_path: comptime_int/;"	field
max_exponent_fast_path_disguised	$ZIGLIB/std/fmt/parse_float/FloatInfo.zig	/^max_exponent_fast_path_disguised: comptime_int/;"	field
max_exponent_round_to_even	$ZIGLIB/std/fmt/parse_float/FloatInfo.zig	/^max_exponent_round_to_even: comptime_int/;"	field
max_ext_level	$ZIGLIB/std/zig/system/x86.zig	/const max_ext_level = leaf.eax/;"	constant
max_flate_block_tokens	$ZIGLIB/std/compress/deflate/compressor.zig	/^const max_flate_block_tokens = 1 << 14/;"	constant
max_format_args	$ZIGLIB/std/fmt.zig	/^const max_format_args = @typeInfo(ArgSetType).Int.bits/;"	constant
max_fragment_length	$ZIGLIB/std/crypto/tls.zig	/max_fragment_length = 1/;"	field
max_gp_register_bits	$ZIGLIB/std/mem.zig	/const max_gp_register_bits = @bitSizeOf(c_long)/;"	constant
max_group	$ZIGLIB/std/leb128.zig	/const max_group = (@typeInfo(U).Int.bits + 6) \/ 7/;"	constant
max_groups	$ZIGLIB/std/leb128.zig	/const max_groups = if (@typeInfo(T).Int.bits == 0) 1 else (@typeInfo(T).Int.bits + 6) \/ 7/;"	constant
max_hash_len	$ZIGLIB/std/crypto/scrypt.zig	/^const max_hash_len = 64/;"	constant
max_hash_offset	$ZIGLIB/std/compress/deflate/compressor.zig	/^const max_hash_offset = 1 << 24/;"	constant
max_header_bytes	$ZIGLIB/std/http/Client.zig	/max_header_bytes: usize/;"	field
max_insert_index	$ZIGLIB/std/compress/deflate/compressor.zig	/max_insert_index: usize/;"	field
max_int	$ZIGLIB/std/crypto/scrypt.zig	/^const max_int = max_size >> 1/;"	constant
max_io_bits	$ZIGLIB/std/packed_int_array.zig	/const max_io_bits = switch (int_bits) {$/;"	constant
max_label_len	$ZIGLIB/std/crypto/tls.zig	/const max_label_len = 255/;"	constant
max_leaf	$ZIGLIB/std/zig/system/x86.zig	/const max_leaf = leaf.eax/;"	constant
max_len	$ZIGLIB/std/comptime_string_map.zig	/const max_len = sorted_kvs[sorted_kvs.len - 1].key.len/;"	constant
max_level	$ZIGLIB/std/zig/system/x86.zig	/const max_level = leaf.eax/;"	constant
max_limbs	$ZIGLIB/compiler_rt/udivmodei4.zig	/^const max_limbs = std.math.divCeil(usize, 65535, 32) catch unreachable/;"	constant
max_lines	$ZIGLIB/std/testing.zig	/const max_lines: usize = 16/;"	constant
max_load	$ZIGLIB/std/hash_map.zig	/const max_load = (self.capacity() * max_load_percentage) \/ 100/;"	constant
max_mantissa_digits	$ZIGLIB/std/fmt/parse_float/parse.zig	/max_mantissa_digits: usize/;"	field
max_mantissa_fast_path	$ZIGLIB/std/fmt/parse_float/FloatInfo.zig	/^max_mantissa_fast_path: comptime_int/;"	field
max_match_length	$ZIGLIB/std/compress/deflate/deflate_const.zig	/^pub const max_match_length = 258/;"	constant
max_match_offset	$ZIGLIB/std/compress/deflate/deflate_const.zig	/^pub const max_match_offset = 1 << 15/;"	constant
max_mcast_filter_count	$ZIGLIB/std/os/uefi/protocols/simple_network_protocol.zig	/max_mcast_filter_count: u32/;"	field
max_memory	$ZIGLIB/std/Build/CompileStep.zig	/^max_memory: ?u64 = null/;"	field
max_mode	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/max_mode: u32/;"	field
max_multiplier_bits	$ZIGLIB/std/Thread/Futex.zig	/const max_multiplier_bits = @bitSizeOf(usize)/;"	constant
max_n	$ZIGLIB/std/crypto/scrypt.zig	/const max_n = ops \/ (r * 4)/;"	constant
max_name_len	$ZIGLIB/std/Thread.zig	/^pub const max_name_len = switch (target.os.tag) {$/;"	constant
max_name_offset	$ZIGLIB/std/os/linux/bpf/btf.zig	/^pub const max_name_offset = 0xffffff/;"	constant
max_node	$ZIGLIB/std/zig/Ast.zig	/var max_node: Node.Index = datas[n].rhs/;"	variable
max_num_dist	$ZIGLIB/std/compress/deflate/decompressor.zig	/^const max_num_dist = 30/;"	constant
max_num_frequencies	$ZIGLIB/std/compress/deflate/deflate_const.zig	/^pub const max_num_frequencies = max_num_lit/;"	constant
max_num_lit	$ZIGLIB/std/compress/deflate/deflate_const.zig	/^pub const max_num_lit = 286/;"	constant
max_offset	$ZIGLIB/std/zig/Ast.zig	/var max_offset: TokenIndex = 0/;"	variable
max_output_bytes	$ZIGLIB/std/child_process.zig	/max_output_bytes: usize = 50 * 1024/;"	field
max_output_size	$ZIGLIB/std/Build.zig	/const max_output_size = 400 * 1024/;"	constant
max_packet_size	$ZIGLIB/std/os/uefi/protocols/simple_network_protocol.zig	/max_packet_size: u32/;"	field
max_pages	$ZIGLIB/std/c/haiku.zig	/max_pages: u64/;"	field
max_ports	$ZIGLIB/std/c/haiku.zig	/max_ports: u32/;"	field
max_private_element_size_16	$ZIGLIB/std/target/amdgpu.zig	/max_private_element_size_16/;"	field
max_private_element_size_4	$ZIGLIB/std/target/amdgpu.zig	/max_private_element_size_4/;"	field
max_private_element_size_8	$ZIGLIB/std/target/amdgpu.zig	/max_private_element_size_8/;"	field
max_protection	$ZIGLIB/std/c/darwin.zig	/max_protection: vm_prot_t/;"	field
max_read	$ZIGLIB/std/io/limited_reader.zig	/const max_read = std.math.min(self.bytes_left, dest.len)/;"	constant
max_read_size	$ZIGLIB/std/os/windows.zig	/const max_read_size: ULONG = maxInt(ULONG)/;"	constant
max_redirects	$ZIGLIB/std/http/Client.zig	/max_redirects: u32 = 3/;"	field
max_representable_index_len	$ZIGLIB/std/array_hash_map.zig	/^const max_representable_index_len = @bitSizeOf(usize) - 4/;"	constant
max_rp	$ZIGLIB/std/crypto/scrypt.zig	/const max_rp = math.min(0x3fffffff, (ops \/ 4) \/ (@as(u64, 1) << ln))/;"	constant
max_salt_len	$ZIGLIB/std/crypto/scrypt.zig	/^const max_salt_len = 64/;"	constant
max_sems	$ZIGLIB/std/c/haiku.zig	/max_sems: u32/;"	field
max_shift	$ZIGLIB/std/fmt/parse_float/convert_slow.zig	/^const max_shift = 60/;"	constant
max_size	$ZIGLIB/std/crypto/scrypt.zig	/^const max_size = math.maxInt(usize)/;"	constant
max_spinlocks	$ZIGLIB/compiler_rt/atomics.zig	/const max_spinlocks = 64/;"	constant
max_start	$ZIGLIB/std/zig/Ast.zig	/var max_start = token_starts[main_tokens[max_node]]/;"	variable
max_stdout_size	$ZIGLIB/std/Build/RunStep.zig	/^const max_stdout_size = 1 * 1024 * 1024/;"	constant
max_store_block_size	$ZIGLIB/std/compress/deflate/deflate_const.zig	/^pub const max_store_block_size = 65535/;"	constant
max_string_len	$ZIGLIB/std/compress/gzip.zig	/^const max_string_len = 1024/;"	constant
max_swap_pages	$ZIGLIB/std/c/haiku.zig	/max_swap_pages: u64/;"	field
max_sym	$ZIGLIB/std/debug.zig	/const max_sym = &symbols[symbols.len - 1]/;"	constant
max_teams	$ZIGLIB/std/c/haiku.zig	/max_teams: u32/;"	field
max_text	$ZIGLIB/std/zig/CrossTarget.zig	/const max_text = range_it.next() orelse return/;"	constant
max_threads	$ZIGLIB/std/c/haiku.zig	/max_threads: u32/;"	field
max_type	$ZIGLIB/std/os/linux/bpf/btf.zig	/^pub const max_type = 0xfffff/;"	constant
max_usize	$ZIGLIB/std/heap/WasmAllocator.zig	/^const max_usize = math.maxInt(usize)/;"	constant
max_value	$ZIGLIB/std/enums.zig	/var max_value: comptime_int = -1/;"	variable
max_value_len	$ZIGLIB/std/zig/system/windows.zig	/^const max_value_len = 2048/;"	constant
max_ver	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/var max_ver: std.builtin.Version = .{ .major = 2, .minor = 2, .patch = 5 }/;"	variable
max_vlen	$ZIGLIB/std/os/linux/bpf/btf.zig	/^pub const max_vlen = 0xffff/;"	constant
max_window	$ZIGLIB/std/os/linux.zig	/max_window: u32/;"	field
max_window_size	$ZIGLIB/std/testing.zig	/const max_window_size: usize = if (T == u8) max_lines * 16 else max_lines/;"	constant
maxhops	$ZIGLIB/std/c/solaris.zig	/maxhops: u8/;"	field
maxmtu	$ZIGLIB/std/c/solaris.zig	/maxmtu: u32/;"	field
maxnum	$ZIGLIB/std/math/complex/atan.zig	/const maxnum = 1.0e38/;"	constant
maxprot	$ZIGLIB/std/macho.zig	/maxprot: vm_prot_t = PROT.NONE/;"	field
maxrss	$ZIGLIB/std/os/linux.zig	/maxrss: isize/;"	field
maybe	$ZIGLIB/std/fmt.zig	/fn maybe(self: *@This(), val: u8) bool {$/;"	function
maybeEnableSegfaultHandler	$ZIGLIB/std/debug.zig	/^pub fn maybeEnableSegfaultHandler() void {$/;"	function
maybeInsertNewline	$ZIGLIB/std/zig/render.zig	/pub fn maybeInsertNewline(self: *Self) WriteError!void {$/;"	function
maybeRefresh	$ZIGLIB/std/Progress.zig	/^pub fn maybeRefresh(self: *Progress) void {$/;"	function
maybe_app_dirname_utf8	$ZIGLIB/std/child_process.zig	/const maybe_app_dirname_utf8 = if (!app_name_is_absolute) fs.path.dirname(app_name_utf8) else null/;"	constant
maybe_bang	$ZIGLIB/std/zig/render.zig	/const maybe_bang = tree.firstToken(fn_proto.ast.return_type) - 1/;"	constant
maybe_comma	$ZIGLIB/std/zig/render.zig	/const maybe_comma = tree.lastToken(node) + 1/;"	constant
maybe_dynv	$ZIGLIB/std/os/linux/vdso.zig	/var maybe_dynv: ?[*]usize = null/;"	variable
maybe_env_map	$ZIGLIB/std/Build/RunStep.zig	/const maybe_env_map = switch (step.id) {$/;"	constant
maybe_envp_buf	$ZIGLIB/std/child_process.zig	/const maybe_envp_buf = if (self.env_map) |env_map| try createWindowsEnvBlock(self.allocator, env_map) else null/;"	constant
maybe_first_node	$ZIGLIB/std/heap/arena_allocator.zig	/const maybe_first_node = while (it) |node| {$/;"	constant
maybe_hashtab	$ZIGLIB/std/os/linux/vdso.zig	/var maybe_hashtab: ?[*]linux.Elf_Symndx = null/;"	variable
maybe_have_wipe_on_fork	$ZIGLIB/std/crypto/tlcsprng.zig	/^const maybe_have_wipe_on_fork = builtin.os.isAtLeast(.linux, .{$/;"	constant
maybe_node	$ZIGLIB/std/Progress.zig	/var maybe_node: ?*Node = &self.root/;"	variable
maybe_strings	$ZIGLIB/std/os/linux/vdso.zig	/var maybe_strings: ?[*]u8 = null/;"	variable
maybe_syms	$ZIGLIB/std/os/linux/vdso.zig	/var maybe_syms: ?[*]elf.Sym = null/;"	variable
maybe_triple	$ZIGLIB/std/Build.zig	/const maybe_triple = self.option($/;"	constant
maybe_verdef	$ZIGLIB/std/os/linux/vdso.zig	/var maybe_verdef: ?*elf.Verdef = null/;"	variable
maybe_versym	$ZIGLIB/std/os/linux/vdso.zig	/var maybe_versym: ?[*]u16 = null/;"	variable
mbind	$ZIGLIB/std/os/linux/syscalls.zig	/mbind = Linux + 268/;"	field
mc_tlsbase	$ZIGLIB/std/c/netbsd.zig	/mc_tlsbase: u64/;"	field
mcastIpToMac	$ZIGLIB/std/os/uefi/protocols/simple_network_protocol.zig	/pub fn mcastIpToMac(self: *const SimpleNetworkProtocol, ipv6: bool, ip: *const anyopaque, mac: *MacAddress) Status {$/;"	function
mcast_filter	$ZIGLIB/std/os/uefi/protocols/simple_network_protocol.zig	/mcast_filter: [16]MacAddress/;"	field
mcast_filter_count	$ZIGLIB/std/os/uefi/protocols/simple_network_protocol.zig	/mcast_filter_count: u32/;"	field
mclass	$ZIGLIB/std/target/arm.zig	/mclass/;"	field
mcontext	$ZIGLIB/std/os/linux/x86_64.zig	/mcontext: mcontext_t/;"	field
mcontext_t	$ZIGLIB/std/os/linux/x86_64.zig	/^pub const mcontext_t = extern struct {$/;"	struct
mcpu	$ZIGLIB/std/Build.zig	/const mcpu = self.option([]const u8, "cpu", "Target CPU features to add or subtract")/;"	constant
mcpu_buffer	$ZIGLIB/std/Build.zig	/var mcpu_buffer = ArrayList(u8).init(allocator)/;"	variable
mcsize	$ZIGLIB/std/c/darwin.zig	/mcsize: u64/;"	field
md2WithRSAEncryption	$ZIGLIB/std/crypto/Certificate.zig	/md2WithRSAEncryption/;"	field
md5WithRSAEncryption	$ZIGLIB/std/crypto/Certificate.zig	/md5WithRSAEncryption/;"	field
mdig	$ZIGLIB/std/fmt/errol.zig	/var mdig = @floatToInt(u8, @floor(tmp + 0.5))/;"	variable
media	$ZIGLIB/std/os/uefi/protocols/block_io_protocol.zig	/media: *EfiBlockMedia/;"	field
media_header	$ZIGLIB/std/os/uefi/protocols/managed_network_protocol.zig	/media_header: [*]u8/;"	field
media_header_size	$ZIGLIB/std/os/uefi/protocols/simple_network_protocol.zig	/media_header_size: u32/;"	field
media_id	$ZIGLIB/std/os/uefi/protocols/block_io_protocol.zig	/media_id: u32/;"	field
media_present	$ZIGLIB/std/os/uefi/protocols/simple_network_protocol.zig	/media_present: bool/;"	field
media_present_supported	$ZIGLIB/std/os/uefi/protocols/simple_network_protocol.zig	/media_present_supported: bool/;"	field
medium	$ZIGLIB/std/builtin.zig	/medium/;"	field
mem_be	$ZIGLIB/std/io/bit_writer.zig	/var mem_be = [_]u8{0} ** 2/;"	variable
mem_end	$ZIGLIB/std/os/linux.zig	/mem_end: u64/;"	field
mem_in_be	$ZIGLIB/std/io/bit_reader.zig	/var mem_in_be = io.fixedBufferStream(&mem_be)/;"	variable
mem_in_le	$ZIGLIB/std/io/bit_reader.zig	/var mem_in_le = io.fixedBufferStream(&mem_le)/;"	variable
mem_le	$ZIGLIB/std/io/bit_writer.zig	/var mem_le = [_]u8{0} ** 2/;"	variable
mem_noshuf	$ZIGLIB/std/target/hexagon.zig	/mem_noshuf/;"	field
mem_out_be	$ZIGLIB/std/io/bit_writer.zig	/var mem_out_be = io.fixedBufferStream(&mem_be)/;"	variable
mem_out_le	$ZIGLIB/std/io/bit_writer.zig	/var mem_out_le = io.fixedBufferStream(&mem_le)/;"	variable
mem_start	$ZIGLIB/std/os/linux.zig	/mem_start: u64/;"	field
membarrier	$ZIGLIB/std/os/linux/syscalls.zig	/membarrier = Linux + 358/;"	field
member	$ZIGLIB/std/dwarf/TAG.zig	/^pub const member = 0x0d/;"	constant
members	$ZIGLIB/std/zig/Parse.zig	/const members = try p.parseContainerMembers()/;"	constant
members_range	$ZIGLIB/std/zig/Ast.zig	/const members_range = tree.extraData(data.rhs, Node.SubRange)/;"	constant
members_span	$ZIGLIB/std/zig/Parse.zig	/const members_span = try members.toSpan(p)/;"	constant
memcmp	$ZIGLIB/compiler_rt/memcmp.zig	/^pub fn memcmp(vl: [*]const u8, vr: [*]const u8, n: usize) callconv(.C) c_int {$/;"	function
memcpy	$ZIGLIB/compiler_rt/memcpy.zig	/^pub fn memcpy(noalias dest: ?[*]u8, noalias src: ?[*]const u8, len: usize) callconv(.C) ?[*]u8 {$/;"	function
memfd_create	$ZIGLIB/std/os/linux/syscalls.zig	/memfd_create = Linux + 354/;"	field
memfd_createZ	$ZIGLIB/std/os.zig	/^pub fn memfd_createZ(name: [*:0]const u8, flags: u32) MemFdCreateError!fd_t {$/;"	function
memfd_secret	$ZIGLIB/std/os/linux/syscalls.zig	/memfd_secret = 447/;"	field
memlimit	$ZIGLIB/std/compress/lzma/decode/lzbuffer.zig	/memlimit: usize/;"	field
memmappedregs	$ZIGLIB/std/target/avr.zig	/memmappedregs/;"	field
memmove	$ZIGLIB/compiler_rt/memmove.zig	/^pub fn memmove(dest: ?[*]u8, src: ?[*]const u8, n: usize) callconv(.C) ?[*]u8 {$/;"	function
memops	$ZIGLIB/std/target/hexagon.zig	/memops/;"	field
memory	$ZIGLIB/std/wasm.zig	/memory: Limits/;"	field
memory_copy	$ZIGLIB/std/wasm.zig	/memory_copy = 0x0A/;"	field
memory_fill	$ZIGLIB/std/wasm.zig	/memory_fill = 0x0B/;"	field
memory_grow	$ZIGLIB/std/wasm.zig	/memory_grow = 0x40/;"	field
memory_info	$ZIGLIB/std/debug.zig	/var memory_info: w.MEMORY_BASIC_INFORMATION = undefined/;"	variable
memory_init	$ZIGLIB/std/wasm.zig	/memory_init = 0x08/;"	field
memory_object_offset_t	$ZIGLIB/std/c/darwin.zig	/^pub const memory_object_offset_t = u64/;"	constant
memory_ordering	$ZIGLIB/std/os/linux/syscalls.zig	/memory_ordering = 52/;"	field
memory_runtime	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/memory_runtime: bool/;"	field
memory_size	$ZIGLIB/std/wasm.zig	/memory_size = 0x3F/;"	field
memory_type	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/memory_type: u32 align(1)/;"	field
mempoolAlloc	$ZIGLIB/std/valgrind.zig	/^pub fn mempoolAlloc(pool: [*]u8, mem: []u8) void {$/;"	function
mempoolChange	$ZIGLIB/std/valgrind.zig	/^pub fn mempoolChange(pool: [*]u8, addrA: [*]u8, mem: []u8) void {$/;"	function
mempoolExists	$ZIGLIB/std/valgrind.zig	/^pub fn mempoolExists(pool: [*]u8) bool {$/;"	function
mempoolFree	$ZIGLIB/std/valgrind.zig	/^pub fn mempoolFree(pool: [*]u8, addr: [*]u8) void {$/;"	function
mempoolTrim	$ZIGLIB/std/valgrind.zig	/^pub fn mempoolTrim(pool: [*]u8, mem: []u8) void {$/;"	function
memset	$ZIGLIB/compiler_rt/memset.zig	/^pub fn memset(dest: ?[*]u8, c: u8, len: usize) callconv(.C) ?[*]u8 {$/;"	function
menu_key_pressed	$ZIGLIB/std/os/uefi/protocols/simple_text_input_ex_protocol.zig	/menu_key_pressed: bool/;"	field
mergeExternal	$ZIGLIB/std/sort.zig	/^fn mergeExternal($/;"	function
mergeInPlace	$ZIGLIB/std/sort.zig	/^fn mergeInPlace($/;"	function
mergeInternal	$ZIGLIB/std/sort.zig	/^fn mergeInternal($/;"	function
mergeInto	$ZIGLIB/std/sort.zig	/^fn mergeInto($/;"	function
mergeShift	$ZIGLIB/std/simd.zig	/^pub fn mergeShift(a: anytype, b: anytype, comptime shift: VectorCount(@TypeOf(a, b))) @TypeOf(a, b) {$/;"	function
merge_error_sets	$ZIGLIB/std/zig/Ast.zig	/merge_error_sets/;"	field
mesa3d	$ZIGLIB/std/target.zig	/mesa3d/;"	field
mesgq	$ZIGLIB/std/c/freebsd.zig	/mesgq: extern struct {$/;"	field
mesh	$ZIGLIB/std/target.zig	/mesh/;"	field
message	$ZIGLIB/std/os/windows/user32.zig	/message: UINT/;"	field
messageBoxA	$ZIGLIB/std/os/windows/user32.zig	/^pub fn messageBoxA(hWnd: ?HWND, lpText: [*:0]const u8, lpCaption: [*:0]const u8, uType: u32) !i32 {$/;"	function
messageBoxW	$ZIGLIB/std/os/windows/user32.zig	/^pub fn messageBoxW(hWnd: ?HWND, lpText: [*:0]const u16, lpCaption: [*:0]const u16, uType: u32) !i32 {$/;"	function
message_hash	$ZIGLIB/std/crypto/tls.zig	/message_hash = 254/;"	field
message_security_assist_extension3	$ZIGLIB/std/target/s390x.zig	/message_security_assist_extension3/;"	field
message_security_assist_extension4	$ZIGLIB/std/target/s390x.zig	/message_security_assist_extension4/;"	field
message_security_assist_extension5	$ZIGLIB/std/target/s390x.zig	/message_security_assist_extension5/;"	field
message_security_assist_extension7	$ZIGLIB/std/target/s390x.zig	/message_security_assist_extension7/;"	field
message_security_assist_extension8	$ZIGLIB/std/target/s390x.zig	/message_security_assist_extension8/;"	field
message_security_assist_extension9	$ZIGLIB/std/target/s390x.zig	/message_security_assist_extension9/;"	field
message_slice	$ZIGLIB/std/crypto/Certificate.zig	/message_slice: Slice/;"	field
meta_size	$ZIGLIB/std/hash_map.zig	/const meta_size = @sizeOf(Header) + new_capacity * @sizeOf(Metadata)/;"	constant
metadata	$ZIGLIB/std/math/big/int.zig	/metadata: usize/;"	field
metadata_len	$ZIGLIB/std/os/uefi/pool_allocator.zig	/const metadata_len = mem.alignForward(@sizeOf(usize), ptr_align)/;"	constant
method	$ZIGLIB/std/http/Client.zig	/method: http.Method = .GET/;"	field
method_not_allowed	$ZIGLIB/std/http.zig	/method_not_allowed = 405/;"	field
metric	$ZIGLIB/std/c/solaris.zig	/metric: i32/;"	field
mfma_inline_literal_bug	$ZIGLIB/std/target/amdgpu.zig	/mfma_inline_literal_bug/;"	field
mfocrf	$ZIGLIB/std/target/powerpc.zig	/mfocrf/;"	field
mgf_len	$ZIGLIB/std/crypto/Certificate.zig	/const mgf_len = emLen - Hash.digest_length - 1/;"	constant
mgf_out	$ZIGLIB/std/crypto/Certificate.zig	/var mgf_out = try allocator.alloc(u8, ((mgf_len - 1) \/ Hash.digest_length + 1) * Hash.digest_length)/;"	variable
mgmt_handle	$ZIGLIB/std/os/windows.zig	/const mgmt_handle = OpenFile(mgmt_path_u16.span(), .{$/;"	constant
mgmt_path	$ZIGLIB/std/os/windows.zig	/const mgmt_path = "\\\\MountPointManager"/;"	constant
mgmt_path_u16	$ZIGLIB/std/os/windows.zig	/const mgmt_path_u16 = sliceToPrefixedFileW(mgmt_path) catch unreachable/;"	constant
microTimestamp	$ZIGLIB/std/time.zig	/^pub fn microTimestamp() i64 {$/;"	function
micromips	$ZIGLIB/std/target/mips.zig	/micromips/;"	field
microseconds	$ZIGLIB/std/c/darwin.zig	/microseconds: integer_t/;"	field
mid_coder	$ZIGLIB/std/compress/lzma/decode/rangecoder.zig	/mid_coder: [16]BitTree(3) = .{.{}} ** 16/;"	field
midi	$ZIGLIB/std/os/windows/winmm.zig	/midi: extern struct {$/;"	field
midpoint	$ZIGLIB/std/rand/Isaac64.zig	/const midpoint = self.r.len \/ 2/;"	constant
migrate_pages	$ZIGLIB/std/os/linux/syscalls.zig	/migrate_pages = Linux + 287/;"	field
milliTimestamp	$ZIGLIB/std/time.zig	/^pub fn milliTimestamp() i64 {$/;"	function
mimg_r128	$ZIGLIB/std/target/amdgpu.zig	/mimg_r128/;"	field
min3	$ZIGLIB/std/math.zig	/^pub fn min3(x: anytype, y: anytype, z: anytype) @TypeOf(x, y, z) {$/;"	function
minA	$ZIGLIB/std/sort.zig	/var minA = blockA.start/;"	variable
minEntry	$ZIGLIB/std/event/loop.zig	/const minEntry = @fieldParentPtr(Entry, "node", min)/;"	constant
minIdx	$ZIGLIB/std/mem.zig	/var minIdx: usize = 0/;"	variable
minInt	$ZIGLIB/std/math.zig	/^pub fn minInt(comptime T: type) comptime_int {$/;"	function
minMax	$ZIGLIB/std/mem.zig	/^pub fn minMax(comptime T: type, slice: []const T) struct { min: T, max: T } {$/;"	function
minNormalRep	$ZIGLIB/compiler_rt/mulf3.zig	/const minNormalRep = @bitCast(Z, math.floatMin(T))/;"	constant
minVal	$ZIGLIB/std/mem.zig	/var minVal = slice[0]/;"	variable
min_address	$ZIGLIB/std/c/darwin.zig	/min_address: mach_vm_address_t/;"	field
min_bit_index	$ZIGLIB/std/array_hash_map.zig	/^const min_bit_index = 5/;"	constant
min_class	$ZIGLIB/std/heap/WasmAllocator.zig	/^const min_class = math.log2(math.ceilPowerOfTwoAssert(usize, 1 + @sizeOf(usize)))/;"	constant
min_exp	$ZIGLIB/std/fmt/parse_float/convert_hex.zig	/const min_exp = math.floatExponentMin(T)/;"	constant
min_exp_required	$ZIGLIB/std/fmt/errol.zig	/const min_exp_required = @intCast(usize, -float_decimal.exp)/;"	constant
min_exponent	$ZIGLIB/std/math/ldexp.zig	/const min_exponent = math.floatExponentMin(T)/;"	constant
min_exponent_fast_path	$ZIGLIB/std/fmt/parse_float/FloatInfo.zig	/^min_exponent_fast_path: comptime_int/;"	field
min_exponent_round_to_even	$ZIGLIB/std/fmt/parse_float/FloatInfo.zig	/^min_exponent_round_to_even: comptime_int/;"	field
min_index	$ZIGLIB/std/compress/deflate/compressor.zig	/var min_index = self.index -| window_size/;"	variable
min_int_bits	$ZIGLIB/std/fmt.zig	/const min_int_bits = comptime math.max(value_info.bits, 8)/;"	constant
min_io_bits	$ZIGLIB/std/packed_int_array.zig	/const min_io_bits = ((int_bits + 7) \/ 8) * 8/;"	constant
min_layer	$ZIGLIB/std/priority_dequeue.zig	/min_layer: bool/;"	field
min_len	$ZIGLIB/std/comptime_string_map.zig	/const min_len = sorted_kvs[0].key.len/;"	constant
min_match_length	$ZIGLIB/std/compress/deflate/compressor.zig	/^const min_match_length = 4/;"	constant
min_match_look	$ZIGLIB/std/compress/deflate/compressor.zig	/var min_match_look: u32 = max_match_length/;"	variable
min_n_digit_int	$ZIGLIB/std/fmt/parse_float/parse.zig	/^fn min_n_digit_int(comptime T: type, digit_count: usize) T {$/;"	function
min_non_literal_block_size	$ZIGLIB/std/compress/deflate/deflate_fast.zig	/^const min_non_literal_block_size = 1 + 1 + input_margin/;"	constant
min_text	$ZIGLIB/std/zig/CrossTarget.zig	/const min_text = range_it.next().?/;"	constant
min_value	$ZIGLIB/std/math.zig	/const min_value = comptime floatMin(T)/;"	constant
min_ver	$ZIGLIB/std/zig/CrossTarget.zig	/const min_ver = std.meta.stringToEnum(Target.Os.WindowsVersion, min_text) orelse$/;"	constant
mincore	$ZIGLIB/std/os/linux/syscalls.zig	/mincore = Linux + 26/;"	field
minflt	$ZIGLIB/std/os/linux.zig	/minflt: isize/;"	field
minimal_alignment	$ZIGLIB/compiler_rt/emutls.zig	/const minimal_alignment = std.math.max(@alignOf(usize), alignment)/;"	constant
minimal_capacity	$ZIGLIB/std/hash_map.zig	/const minimal_capacity = 8/;"	constant
minimum_exponent	$ZIGLIB/std/fmt/parse_float/FloatInfo.zig	/^minimum_exponent: comptime_int/;"	field
minimum_instruction_length	$ZIGLIB/std/dwarf.zig	/const minimum_instruction_length = try in.readByte()/;"	constant
minix	$ZIGLIB/std/target.zig	/minix/;"	field
minor	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/const minor = value % 100_000_000 \/ 1_000_000/;"	constant
minor1	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/const minor1 = value % 100_000 \/ 10_000/;"	constant
minor2	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/const minor2 = value % 10_000 \/ 1_000/;"	constant
minor_image_version	$ZIGLIB/std/coff.zig	/minor_image_version: u16/;"	field
minor_linker_version	$ZIGLIB/std/coff.zig	/minor_linker_version: u8/;"	field
minor_operating_system_version	$ZIGLIB/std/coff.zig	/minor_operating_system_version: u16/;"	field
minor_subsystem_version	$ZIGLIB/std/coff.zig	/minor_subsystem_version: u16/;"	field
minor_t	$ZIGLIB/std/c/solaris.zig	/^pub const minor_t = u32/;"	constant
minor_version	$ZIGLIB/std/coff.zig	/minor_version: u16/;"	field
minos	$ZIGLIB/std/macho.zig	/minos: u32/;"	field
minus	$ZIGLIB/std/zig/tokenizer.zig	/minus/;"	field
minus_equal	$ZIGLIB/std/zig/tokenizer.zig	/minus_equal/;"	field
minus_percent	$ZIGLIB/std/zig/tokenizer.zig	/minus_percent/;"	field
minus_percent_equal	$ZIGLIB/std/zig/tokenizer.zig	/minus_percent_equal/;"	field
minus_pipe	$ZIGLIB/std/zig/tokenizer.zig	/minus_pipe/;"	field
minus_pipe_equal	$ZIGLIB/std/zig/tokenizer.zig	/minus_pipe_equal/;"	field
minustwo	$ZIGLIB/std/math/sqrt.zig	/const minustwo = (@as(T, 2) ^ max) + 1/;"	constant
minute	$ZIGLIB/std/os/uefi.zig	/minute: u8/;"	field
minutes_into_hour	$ZIGLIB/std/time/epoch.zig	/minutes_into_hour: u6/;"	field
mips	$ZIGLIB/std/target.zig	/mips/;"	field
mips1	$ZIGLIB/std/target/mips.zig	/pub const mips1 = CpuModel{$/;"	constant
mips16	$ZIGLIB/std/target/mips.zig	/mips16/;"	field
mips2	$ZIGLIB/std/target/mips.zig	/pub const mips2 = CpuModel{$/;"	constant
mips3	$ZIGLIB/std/target/mips.zig	/pub const mips3 = CpuModel{$/;"	constant
mips32	$ZIGLIB/std/target/mips.zig	/pub const mips32 = CpuModel{$/;"	constant
mips32r2	$ZIGLIB/std/target/mips.zig	/pub const mips32r2 = CpuModel{$/;"	constant
mips32r3	$ZIGLIB/std/target/mips.zig	/pub const mips32r3 = CpuModel{$/;"	constant
mips32r5	$ZIGLIB/std/target/mips.zig	/pub const mips32r5 = CpuModel{$/;"	constant
mips32r6	$ZIGLIB/std/target/mips.zig	/pub const mips32r6 = CpuModel{$/;"	constant
mips3_32	$ZIGLIB/std/target/mips.zig	/mips3_32/;"	field
mips3_32r2	$ZIGLIB/std/target/mips.zig	/mips3_32r2/;"	field
mips3d	$ZIGLIB/std/target/mips.zig	/mips3d/;"	field
mips4	$ZIGLIB/std/target/mips.zig	/pub const mips4 = CpuModel{$/;"	constant
mips4_32	$ZIGLIB/std/target/mips.zig	/mips4_32/;"	field
mips4_32r2	$ZIGLIB/std/target/mips.zig	/mips4_32r2/;"	field
mips5	$ZIGLIB/std/target/mips.zig	/pub const mips5 = CpuModel{$/;"	constant
mips5_32r2	$ZIGLIB/std/target/mips.zig	/mips5_32r2/;"	field
mips64	$ZIGLIB/std/target/mips.zig	/pub const mips64 = CpuModel{$/;"	constant
mips64el	$ZIGLIB/std/target.zig	/mips64el/;"	field
mips64r2	$ZIGLIB/std/target/mips.zig	/pub const mips64r2 = CpuModel{$/;"	constant
mips64r3	$ZIGLIB/std/target/mips.zig	/pub const mips64r3 = CpuModel{$/;"	constant
mips64r5	$ZIGLIB/std/target/mips.zig	/pub const mips64r5 = CpuModel{$/;"	constant
mips64r6	$ZIGLIB/std/target/mips.zig	/pub const mips64r6 = CpuModel{$/;"	constant
mipsel	$ZIGLIB/std/target.zig	/mipsel/;"	field
misc	$ZIGLIB/std/c/solaris.zig	/misc: [1]u8/;"	field
misc_header	$ZIGLIB/std/c/solaris.zig	/pub const misc_header = extern struct {$/;"	struct
miscellaneous_extensions	$ZIGLIB/std/target/s390x.zig	/miscellaneous_extensions/;"	field
miscellaneous_extensions_2	$ZIGLIB/std/target/s390x.zig	/miscellaneous_extensions_2/;"	field
miscellaneous_extensions_3	$ZIGLIB/std/target/s390x.zig	/miscellaneous_extensions_3/;"	field
misdirected_request	$ZIGLIB/std/http.zig	/misdirected_request = 421/;"	field
mismatch10	$ZIGLIB/std/fmt/errol.zig	/^fn mismatch10(a: u64, b: u64) i32 {$/;"	function
mismatch_cpu_features	$ZIGLIB/std/Build.zig	/var mismatch_cpu_features = true/;"	variable
mismatch_triple	$ZIGLIB/std/Build.zig	/var mismatch_triple = true/;"	variable
mismatched_binary_op_whitespace	$ZIGLIB/std/zig/Ast.zig	/mismatched_binary_op_whitespace/;"	field
miss	$ZIGLIB/std/target.zig	/miss/;"	field
missingDwarf	$ZIGLIB/std/dwarf.zig	/^fn missingDwarf() error{MissingDebugInfo} {$/;"	function
missing_columns	$ZIGLIB/std/testing.zig	/var missing_columns = (16 - chunk.len) * 3/;"	variable
missing_count	$ZIGLIB/std/fmt.zig	/const missing_count = arg_state.args_len - @popCount(arg_state.used_args)/;"	constant
missing_extension	$ZIGLIB/std/crypto/tls.zig	/missing_extension = 109/;"	field
mix0	$ZIGLIB/std/hash/wyhash.zig	/^fn mix0(a: u64, b: u64, seed: u64) u64 {$/;"	function
mix1	$ZIGLIB/std/hash/wyhash.zig	/^fn mix1(a: u64, b: u64, seed: u64) u64 {$/;"	function
mixin	$ZIGLIB/std/enums.zig	/const mixin = struct {$/;"	struct
mkdir	$ZIGLIB/std/os/linux/syscalls.zig	/mkdir = Linux + 81/;"	field
mkdirW	$ZIGLIB/std/os.zig	/^pub fn mkdirW(dir_path_w: []const u16, mode: u32) MakeDirError!void {$/;"	function
mkdirZ	$ZIGLIB/std/os.zig	/^pub fn mkdirZ(dir_path: [*:0]const u8, mode: u32) MakeDirError!void {$/;"	function
mkdirat	$ZIGLIB/std/os/linux/syscalls.zig	/mkdirat = Linux + 289/;"	field
mkdiratW	$ZIGLIB/std/os.zig	/^pub fn mkdiratW(dir_fd: fd_t, sub_path_w: []const u16, mode: u32) MakeDirError!void {$/;"	function
mkdiratWasi	$ZIGLIB/std/os.zig	/^pub fn mkdiratWasi(dir_fd: fd_t, sub_dir_path: []const u8, mode: u32) MakeDirError!void {$/;"	function
mkdiratZ	$ZIGLIB/std/os.zig	/^pub fn mkdiratZ(dir_fd: fd_t, sub_dir_path: [*:0]const u8, mode: u32) MakeDirError!void {$/;"	function
mknod	$ZIGLIB/std/os/linux/syscalls.zig	/mknod = Linux + 14/;"	field
mknodat	$ZIGLIB/std/os/linux/syscalls.zig	/mknodat = Linux + 290/;"	field
mlen0	$ZIGLIB/std/crypto/salsa20.zig	/const mlen0 = math.min(32, m.len)/;"	constant
mlock	$ZIGLIB/std/os/linux/syscalls.zig	/mlock = Linux + 154/;"	field
mlock2	$ZIGLIB/std/os/linux/syscalls.zig	/mlock2 = Linux + 359/;"	field
mlockall	$ZIGLIB/std/os/linux/syscalls.zig	/mlockall = Linux + 156/;"	field
mmap	$ZIGLIB/std/os/linux/syscalls.zig	/mmap = Linux + 90/;"	field
mmap2	$ZIGLIB/std/os/linux/syscalls.zig	/mmap2 = Linux + 210/;"	field
mmap_data	$ZIGLIB/std/os/linux.zig	/mmap_data: bool = false/;"	field
mmap_sqes	$ZIGLIB/std/os/linux/io_uring.zig	/mmap_sqes: []align(mem.page_size) u8/;"	field
mmap_sym	$ZIGLIB/std/os.zig	/const mmap_sym = if (builtin.os.tag == .linux and builtin.link_libc)$/;"	constant
mmmm	$ZIGLIB/std/crypto/Certificate.zig	/const mmmm: @Vector(4, u16) = .{ 1000, 100, 10, 1 }/;"	constant
mmsghdr	$ZIGLIB/std/os/linux.zig	/^pub const mmsghdr = extern struct {$/;"	struct
mmsghdr_const	$ZIGLIB/std/os/linux.zig	/^pub const mmsghdr_const = extern struct {$/;"	struct
modBaseAddr	$ZIGLIB/std/os/windows.zig	/modBaseAddr: *BYTE/;"	field
modBaseSize	$ZIGLIB/std/os/windows.zig	/modBaseSize: DWORD/;"	field
mod_bits	$ZIGLIB/std/crypto/Certificate.zig	/const mod_bits = try countBits(public_key.n.toConst(), allocator)/;"	constant
mod_index	$ZIGLIB/std/debug.zig	/const mod_index = for (self.debug_data.pdb.sect_contribs) |sect_contrib| {$/;"	constant
mod_info	$ZIGLIB/std/pdb.zig	/mod_info: ModInfo/;"	field
mod_info_offset	$ZIGLIB/std/pdb.zig	/var mod_info_offset: usize = 0/;"	variable
mod_info_size	$ZIGLIB/std/pdb.zig	/const mod_info_size = header.ModInfoSize/;"	constant
mode	$ZIGLIB/std/os/wasi.zig	/mode: mode_t/;"	field
mode_mode	$ZIGLIB/std/tar.zig	/mode_mode: ModeMode = .executable_bit_only/;"	field
mode_t	$ZIGLIB/std/os/wasi.zig	/^pub const mode_t = u32/;"	constant
model	$ZIGLIB/std/zig/system/x86.zig	/var model = (leaf.eax >> 4) & 0xf/;"	variable
models	$ZIGLIB/std/zig/system/arm.zig	/const models = switch (core.implementer) {$/;"	constant
moderate_2i	$ZIGLIB/std/crypto/argon2.zig	/pub const moderate_2i = Self.fromLimits(6, 134217728)/;"	constant
moderate_2id	$ZIGLIB/std/crypto/argon2.zig	/pub const moderate_2id = Self.fromLimits(3, 268435456)/;"	constant
modern_aix_as	$ZIGLIB/std/target/powerpc.zig	/modern_aix_as/;"	field
modf	$ZIGLIB/std/math/modf.zig	/^pub fn modf(x: anytype) modf_result(@TypeOf(x)) {$/;"	function
modf32	$ZIGLIB/std/math/modf.zig	/^fn modf32(x: f32) modf32_result {$/;"	function
modf32_result	$ZIGLIB/std/math/modf.zig	/^pub const modf32_result = modf_result(f32)/;"	constant
modf64	$ZIGLIB/std/math/modf.zig	/^fn modf64(x: f64) modf64_result {$/;"	function
modf64_result	$ZIGLIB/std/math/modf.zig	/^pub const modf64_result = modf_result(f64)/;"	constant
modf_result	$ZIGLIB/std/math/modf.zig	/^fn modf_result(comptime T: type) type {$/;"	function
modification_time	$ZIGLIB/std/os/uefi/protocols/file_protocol.zig	/modification_time: Time/;"	field
modified	$ZIGLIB/std/fs/file.zig	/pub fn modified(self: Self) i128 {$/;"	function
modified_time	$ZIGLIB/std/fs/file.zig	/modified_time: i128/;"	field
modify_ldt	$ZIGLIB/std/os/linux/syscalls.zig	/modify_ldt = Linux + 123/;"	field
modify_return	$ZIGLIB/std/os/linux/bpf.zig	/modify_return/;"	field
mods	$ZIGLIB/std/zig/Parse.zig	/const mods = try p.parsePtrModifiers()/;"	constant
modtaboff	$ZIGLIB/std/macho.zig	/modtaboff: u32 = 0/;"	field
module	$ZIGLIB/std/wasm.zig	/module/;"	field
moduleDependenciesToArrayHashMap	$ZIGLIB/std/Build.zig	/^fn moduleDependenciesToArrayHashMap(arena: Allocator, deps: []const ModuleDependency) std.StringArrayHashMap(*Module) {$/;"	function
module_entry	$ZIGLIB/std/debug.zig	/var module_entry: windows.MODULEENTRY32 = undefined/;"	variable
module_info	$ZIGLIB/std/debug.zig	/const module_info = try debug_info.modules.addOne(allocator)/;"	constant
module_name	$ZIGLIB/std/wasm.zig	/module_name: []const u8/;"	field
module_name_len	$ZIGLIB/std/Build/CheckObjectStep.zig	/const module_name_len = try std.leb.readULEB128(u32, reader)/;"	constant
module_valid	$ZIGLIB/std/debug.zig	/var module_valid = true/;"	variable
modules	$ZIGLIB/std/pdb.zig	/var modules = ArrayList(Module).init(self.allocator)/;"	variable
modulus	$ZIGLIB/std/crypto/Certificate.zig	/modulus: []const u8/;"	field
modulus_elem	$ZIGLIB/std/crypto/Certificate.zig	/const modulus_elem = try der.Element.parse(pub_key, pub_key_seq.slice.start)/;"	constant
modulus_offset	$ZIGLIB/std/crypto/Certificate.zig	/const modulus_offset = for (modulus_raw) |byte, i| {$/;"	constant
modulus_raw	$ZIGLIB/std/crypto/Certificate.zig	/const modulus_raw = pub_key[modulus_elem.slice.start..modulus_elem.slice.end]/;"	constant
monitorCommand	$ZIGLIB/std/valgrind.zig	/^pub fn monitorCommand(command: [*]u8) bool {$/;"	function
montToEd	$ZIGLIB/std/crypto/25519/edwards25519.zig	/fn montToEd(x: Fe, y: Fe) Edwards25519 {$/;"	function
mont_kp	$ZIGLIB/std/crypto/25519/x25519.zig	/const mont_kp = try X25519.KeyPair.fromEd25519(ed_kp)/;"	constant
month	$ZIGLIB/std/time/epoch.zig	/var month: Month = .jan/;"	variable
mops	$ZIGLIB/std/target/aarch64.zig	/mops/;"	field
moreBits	$ZIGLIB/std/compress/deflate/decompressor.zig	/fn moreBits(self: *Self) InflateError!void {$/;"	function
more_reliable	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/more_reliable: bool/;"	field
morphos	$ZIGLIB/std/time/epoch.zig	/^pub const morphos = amiga/;"	constant
mount	$ZIGLIB/std/os/linux/syscalls.zig	/mount = Linux + 21/;"	field
mount_points	$ZIGLIB/std/os/windows.zig	/const mount_points = @ptrCast($/;"	constant
mount_points_struct	$ZIGLIB/std/os/windows.zig	/const mount_points_struct = @ptrCast(*const MOUNTMGR_MOUNT_POINTS, &output_buf[0])/;"	constant
mount_setattr	$ZIGLIB/std/os/linux/syscalls.zig	/mount_setattr = Linux + 442/;"	field
movbe	$ZIGLIB/std/target/x86.zig	/movbe/;"	field
movdir64b	$ZIGLIB/std/target/x86.zig	/movdir64b/;"	field
movdiri	$ZIGLIB/std/target/x86.zig	/movdiri/;"	field
move	$ZIGLIB/std/hash_map.zig	/pub fn move(self: *Self) Self {$/;"	function
moveMempool	$ZIGLIB/std/valgrind.zig	/^pub fn moveMempool(poolA: [*]u8, poolB: [*]u8) void {$/;"	function
moveToUnmanaged	$ZIGLIB/std/array_list.zig	/pub fn moveToUnmanaged(self: *Self) ArrayListAlignedUnmanaged(T, alignment) {$/;"	function
move_mount	$ZIGLIB/std/os/linux/syscalls.zig	/move_mount = Linux + 429/;"	field
move_pages	$ZIGLIB/std/os/linux/syscalls.zig	/move_pages = Linux + 308/;"	field
moved_permanently	$ZIGLIB/std/http.zig	/moved_permanently = 301/;"	field
movrel	$ZIGLIB/std/target/amdgpu.zig	/movrel/;"	field
movw	$ZIGLIB/std/target/avr.zig	/movw/;"	field
mp1e2	$ZIGLIB/std/target/csky.zig	/mp1e2/;"	field
mpam	$ZIGLIB/std/target/aarch64.zig	/mpam/;"	field
mpcore	$ZIGLIB/std/target/arm.zig	/pub const mpcore = CpuModel{$/;"	constant
mpcorenovfp	$ZIGLIB/std/target/arm.zig	/pub const mpcorenovfp = CpuModel{$/;"	constant
mprotect	$ZIGLIB/std/os/linux/syscalls.zig	/mprotect = Linux + 125/;"	field
mps_table_guid	$ZIGLIB/std/os/uefi/tables/configuration_table.zig	/pub const mps_table_guid align(8) = Guid{$/;"	constant
mq_getsetattr	$ZIGLIB/std/os/linux/syscalls.zig	/mq_getsetattr = Linux + 276/;"	field
mq_notify	$ZIGLIB/std/os/linux/syscalls.zig	/mq_notify = Linux + 275/;"	field
mq_open	$ZIGLIB/std/os/linux/syscalls.zig	/mq_open = Linux + 271/;"	field
mq_timedreceive	$ZIGLIB/std/os/linux/syscalls.zig	/mq_timedreceive = Linux + 274/;"	field
mq_timedreceive_time64	$ZIGLIB/std/os/linux/syscalls.zig	/mq_timedreceive_time64 = Linux + 419/;"	field
mq_timedsend	$ZIGLIB/std/os/linux/syscalls.zig	/mq_timedsend = Linux + 273/;"	field
mq_timedsend_time64	$ZIGLIB/std/os/linux/syscalls.zig	/mq_timedsend_time64 = Linux + 418/;"	field
mq_unlink	$ZIGLIB/std/os/linux/syscalls.zig	/mq_unlink = Linux + 272/;"	field
mremap	$ZIGLIB/std/os/linux/syscalls.zig	/mremap = Linux + 24/;"	field
msCertsrvCAVersion	$ZIGLIB/std/crypto/Certificate.zig	/msCertsrvCAVersion/;"	field
ms_per_day	$ZIGLIB/std/time.zig	/^pub const ms_per_day = 24 * ms_per_hour/;"	constant
ms_per_hour	$ZIGLIB/std/time.zig	/^pub const ms_per_hour = 60 * ms_per_min/;"	constant
ms_per_min	$ZIGLIB/std/time.zig	/^pub const ms_per_min = 60 * ms_per_s/;"	constant
ms_per_s	$ZIGLIB/std/time.zig	/^pub const ms_per_s = 1000/;"	constant
ms_per_week	$ZIGLIB/std/time.zig	/^pub const ms_per_week = 7 * ms_per_day/;"	constant
msat	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/^pub fn msat(out1: *[5]u64) void {$/;"	function
msg0	$ZIGLIB/std/crypto/aegis.zig	/var msg0 = AesBlock.fromBytes(src[0..16]).xorBlocks(blocks[6]).xorBlocks(blocks[1])/;"	variable
msg1	$ZIGLIB/std/crypto/aegis.zig	/var msg1 = AesBlock.fromBytes(src[16..32]).xorBlocks(blocks[2]).xorBlocks(blocks[5])/;"	variable
msg2	$ZIGLIB/std/crypto/salsa20.zig	/var msg2: [msg.len]u8 = undefined/;"	variable
msg_	$ZIGLIB/std/crypto/ecdsa.zig	/var msg_: [20]u8 = undefined/;"	variable
msg_apply_bytes	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const msg_apply_bytes = @intToPtr(fn (msg: *kern.SkMsgMd, bytes: u32) c_long, 61)/;"	constant
msg_control	$ZIGLIB/std/c/solaris.zig	/msg_control: ?*const anyopaque/;"	field
msg_controllen	$ZIGLIB/std/c/solaris.zig	/msg_controllen: socklen_t/;"	field
msg_cork_bytes	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const msg_cork_bytes = @intToPtr(fn (msg: *kern.SkMsgMd, bytes: u32) c_long, 62)/;"	constant
msg_flags	$ZIGLIB/std/c/solaris.zig	/msg_flags: i32/;"	field
msg_hashed	$ZIGLIB/std/crypto/Certificate.zig	/var msg_hashed: [Hash.digest_length]u8 = undefined/;"	variable
msg_hdr	$ZIGLIB/std/os/linux.zig	/msg_hdr: msghdr_const/;"	field
msg_hex	$ZIGLIB/std/crypto/25519/ed25519.zig	/msg_hex: *const [64:0]u8/;"	field
msg_iov	$ZIGLIB/std/c/solaris.zig	/msg_iov: [*]iovec/;"	field
msg_iovlen	$ZIGLIB/std/os/linux.zig	/const msg_iovlen = @intCast(usize, msg.msg_hdr.msg_iovlen)/;"	constant
msg_len	$ZIGLIB/std/os/linux.zig	/msg_len: u32/;"	field
msg_name	$ZIGLIB/std/c/solaris.zig	/msg_name: ?*sockaddr/;"	field
msg_namelen	$ZIGLIB/std/c/solaris.zig	/msg_namelen: socklen_t/;"	field
msg_pop_data	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const msg_pop_data = @intToPtr(fn (msg: *kern.SkMsgMd, start: u32, len: u32, flags: u64) c_long, 91)/;"	constant
msg_pull_data	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const msg_pull_data = @intToPtr(fn (msg: *kern.SkMsgMd, start: u32, end: u32, flags: u64) c_long, 63)/;"	constant
msg_push_data	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const msg_push_data = @intToPtr(fn (msg: *kern.SkMsgMd, start: u32, len: u32, flags: u64) c_long, 90)/;"	constant
msg_recv	$ZIGLIB/std/os/linux/io_uring.zig	/var msg_recv: os.msghdr = os.msghdr{$/;"	variable
msg_redirect_hash	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const msg_redirect_hash = @intToPtr(fn (msg: *kern.SkMsgMd, map: *const kern.MapDef, key: ?*anyopaque, flags: u64) c_long, 71)/;"	constant
msg_redirect_map	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const msg_redirect_map = @intToPtr(fn (msg: *kern.SkMsgMd, map: *const kern.MapDef, key: u32, flags: u64) c_long, 60)/;"	constant
msg_send	$ZIGLIB/std/os/linux/io_uring.zig	/const msg_send = os.msghdr_const{$/;"	constant
msg_usize	$ZIGLIB/std/os/linux.zig	/const msg_usize = @ptrToInt(msg)/;"	constant
msgctl	$ZIGLIB/std/os/linux/syscalls.zig	/msgctl = Linux + 69/;"	field
msgget	$ZIGLIB/std/os/linux/syscalls.zig	/msgget = Linux + 66/;"	field
msgh_bits	$ZIGLIB/std/c/darwin.zig	/msgh_bits: mach_msg_bits_t/;"	field
msgh_id	$ZIGLIB/std/c/darwin.zig	/msgh_id: mach_msg_id_t/;"	field
msgh_local_port	$ZIGLIB/std/c/darwin.zig	/msgh_local_port: mach_port_t/;"	field
msgh_remote_port	$ZIGLIB/std/c/darwin.zig	/msgh_remote_port: mach_port_t/;"	field
msgh_size	$ZIGLIB/std/c/darwin.zig	/msgh_size: mach_msg_size_t/;"	field
msgh_voucher_port	$ZIGLIB/std/c/darwin.zig	/msgh_voucher_port: mach_port_name_t/;"	field
msghdr	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const msghdr = WSAMSG/;"	constant
msghdr_const	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const msghdr_const = WSAMSG_const/;"	constant
msgrcv	$ZIGLIB/std/os/linux/syscalls.zig	/msgrcv = Linux + 68/;"	field
msgsnd	$ZIGLIB/std/os/linux/syscalls.zig	/msgsnd = Linux + 67/;"	field
msize	$ZIGLIB/std/math/big/rational.zig	/const msize = math.floatMantissaBits(T)/;"	constant
msize1	$ZIGLIB/std/math/big/rational.zig	/const msize1 = msize + 1/;"	constant
msize2	$ZIGLIB/std/math/big/rational.zig	/const msize2 = msize1 + 1/;"	constant
msp430	$ZIGLIB/std/target/msp430.zig	/pub const msp430 = CpuModel{$/;"	constant
msp430x	$ZIGLIB/std/target/msp430.zig	/pub const msp430x = CpuModel{$/;"	constant
msvc	$ZIGLIB/std/target.zig	/msvc/;"	field
msync	$ZIGLIB/std/target/powerpc.zig	/msync/;"	field
mtim	$ZIGLIB/std/os/wasi.zig	/mtim: timestamp_t/;"	field
mtime	$ZIGLIB/std/os/wasi.zig	/pub fn mtime(self: filestat_t) timespec {$/;"	function
mtime_ft	$ZIGLIB/std/fs/file.zig	/const mtime_ft = windows.nanoSecondsToFileTime(mtime)/;"	constant
mtimespec	$ZIGLIB/std/c/darwin.zig	/mtimespec: timespec/;"	field
mul1	$ZIGLIB/std/fmt/parse_float/parse.zig	/const mul1 = 0x000f_4240_0000_0064/;"	constant
mul2	$ZIGLIB/std/fmt/parse_float/parse.zig	/const mul2 = 0x0000_2710_0000_0001/;"	constant
mul32	$ZIGLIB/std/crypto/25519/field.zig	/pub inline fn mul32(a: Fe, comptime n: u32) Fe {$/;"	function
mul8	$ZIGLIB/std/crypto/25519/scalar.zig	/^pub fn mul8(s: CompressedScalar) CompressedScalar {$/;"	function
mulAdd	$ZIGLIB/std/crypto/pcurves/secp256k1/scalar.zig	/^pub fn mulAdd(a: CompressedScalar, b: CompressedScalar, c: CompressedScalar, endian: std.builtin.Endian) NonCanonicalError!CompressedScalar {$/;"	function
mulDoubleBasePublic	$ZIGLIB/std/crypto/pcurves/secp256k1.zig	/pub fn mulDoubleBasePublic(p1: Secp256k1, s1_: [32]u8, p2: Secp256k1, s2_: [32]u8, endian: std.builtin.Endian) IdentityElementError!Secp256k1 {$/;"	function
mulDoubleBasePublicEndo	$ZIGLIB/std/crypto/pcurves/secp256k1.zig	/fn mulDoubleBasePublicEndo(p1: Secp256k1, s1: [32]u8, p2: Secp256k1, s2: [32]u8) IdentityElementError!Secp256k1 {$/;"	function
mulMulti	$ZIGLIB/std/crypto/25519/edwards25519.zig	/pub fn mulMulti(comptime count: usize, ps: [count]Edwards25519, ss: [count][32]u8) (IdentityElementError || WeakPublicKeyError)!Edwards25519 {$/;"	function
mulNoAlias	$ZIGLIB/std/math/big/int.zig	/pub fn mulNoAlias(rma: *Mutable, a: Const, b: Const, allocator: ?Allocator) void {$/;"	function
mulPublic	$ZIGLIB/std/crypto/pcurves/secp256k1.zig	/pub fn mulPublic(p: Secp256k1, s_: [32]u8, endian: std.builtin.Endian) IdentityElementError!Secp256k1 {$/;"	function
mulWide	$ZIGLIB/std/math.zig	/^pub fn mulWide(comptime T: type, a: T, b: T) std.meta.Int($/;"	function
mulWrap	$ZIGLIB/std/math/big/int.zig	/pub fn mulWrap($/;"	function
mulWrapNoAlias	$ZIGLIB/std/math/big/int.zig	/pub fn mulWrapNoAlias($/;"	function
mul_algorithm	$ZIGLIB/std/crypto/ghash_polyval.zig	/const mul_algorithm = if (builtin.cpu.arch == .x86) .karatsuba else .schoolbook/;"	constant
mul_sat	$ZIGLIB/std/zig/Ast.zig	/mul_sat/;"	field
mul_wrap	$ZIGLIB/std/zig/Ast.zig	/mul_wrap/;"	field
mulbyi	$ZIGLIB/std/math/complex.zig	/pub fn mulbyi(self: Self) Self {$/;"	function
mulc3	$ZIGLIB/compiler_rt/mulc3.zig	/^pub inline fn mulc3(comptime T: type, a_in: T, b_in: T, c_in: T, d_in: T) Complex(T) {$/;"	function
mulddi3	$ZIGLIB/compiler_rt/multi3.zig	/^fn mulddi3(a: u64, b: u64) i128 {$/;"	function
muldsi3	$ZIGLIB/compiler_rt/muldi3.zig	/^fn muldsi3(a: u32, b: u32) i64 {$/;"	function
mulf3	$ZIGLIB/compiler_rt/mulf3.zig	/^pub inline fn mulf3(comptime T: type, a: T, b: T) T {$/;"	function
mullins	$ZIGLIB/std/target/amdgpu.zig	/pub const mullins = CpuModel{$/;"	constant
muloXi4_genericFast	$ZIGLIB/compiler_rt/mulo.zig	/^inline fn muloXi4_genericFast(comptime ST: type, a: ST, b: ST, overflow: *c_int) ST {$/;"	function
muloXi4_genericSmall	$ZIGLIB/compiler_rt/mulo.zig	/^inline fn muloXi4_genericSmall(comptime ST: type, a: ST, b: ST, overflow: *c_int) ST {$/;"	function
multi	$ZIGLIB/std/zig/Parse.zig	/multi: Node.SubRange/;"	field
multiTrait	$ZIGLIB/std/meta/trait.zig	/^pub fn multiTrait(comptime traits: anytype) TraitFn {$/;"	function
multiWriter	$ZIGLIB/std/io/multi_writer.zig	/^pub fn multiWriter(streams: anytype) MultiWriter(@TypeOf(streams)) {$/;"	function
multi_status	$ZIGLIB/std/http.zig	/multi_status = 207/;"	field
multi_threaded	$ZIGLIB/std/event/loop.zig	/multi_threaded/;"	field
multi_wait	$ZIGLIB/std/Thread/Condition.zig	/var multi_wait = MultiWait{}/;"	variable
multicast	$ZIGLIB/std/os/linux.zig	/multicast: u64/;"	field
multicast_flag	$ZIGLIB/std/os/uefi/protocols/managed_network_protocol.zig	/multicast_flag: bool/;"	field
multiline_string_literal	$ZIGLIB/std/zig/Ast.zig	/multiline_string_literal/;"	field
multiline_string_literal_line	$ZIGLIB/std/zig/tokenizer.zig	/multiline_string_literal_line/;"	field
multiple_choice	$ZIGLIB/std/http.zig	/multiple_choice = 300/;"	field
multiple_stld	$ZIGLIB/std/target/csky.zig	/multiple_stld/;"	field
multiple_tx_supported	$ZIGLIB/std/os/uefi/protocols/simple_network_protocol.zig	/multiple_tx_supported: bool/;"	field
multiplexer	$ZIGLIB/std/os/linux/syscalls.zig	/multiplexer = 201/;"	field
multivalue	$ZIGLIB/std/target/wasm.zig	/multivalue/;"	field
mulxU64	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/^inline fn mulxU64(out1: *u64, out2: *u64, arg1: u64, arg2: u64) void {$/;"	function
munlock	$ZIGLIB/std/os/linux/syscalls.zig	/munlock = Linux + 155/;"	field
munlockall	$ZIGLIB/std/os/linux/syscalls.zig	/munlockall = Linux + 157/;"	field
munmap	$ZIGLIB/std/os/linux/syscalls.zig	/munmap = Linux + 91/;"	field
musl	$ZIGLIB/std/target.zig	/musl/;"	field
musleabi	$ZIGLIB/std/target.zig	/musleabi/;"	field
musleabihf	$ZIGLIB/std/target.zig	/musleabihf/;"	field
muslx32	$ZIGLIB/std/target.zig	/muslx32/;"	field
mut_token	$ZIGLIB/std/zig/Parse.zig	/const mut_token = p.eatToken(.keyword_const) orelse$/;"	constant
mutable	$ZIGLIB/std/wasm.zig	/mutable: bool/;"	field
mutable_globals	$ZIGLIB/std/target/wasm.zig	/mutable_globals/;"	field
mutex	$ZIGLIB/std/once.zig	/mutex: std.Thread.Mutex = std.Thread.Mutex{}/;"	field
mutex_init	$ZIGLIB/std/heap/general_purpose_allocator.zig	/const mutex_init = if (config.MutexType) |T|$/;"	constant
mutexattr	$ZIGLIB/std/c/solaris.zig	/mutexattr: ?*anyopaque = null/;"	field
muxed_units	$ZIGLIB/std/target/arm.zig	/muxed_units/;"	field
muxid	$ZIGLIB/std/c/solaris.zig	/muxid: packed struct { ip: i32, arp: i32 }/;"	field
mve1beat	$ZIGLIB/std/target/arm.zig	/mve1beat/;"	field
mve2beat	$ZIGLIB/std/target/arm.zig	/mve2beat/;"	field
mve4beat	$ZIGLIB/std/target/arm.zig	/mve4beat/;"	field
mve_fp	$ZIGLIB/std/target/arm.zig	/mve_fp/;"	field
mwaitx	$ZIGLIB/std/target/x86.zig	/mwaitx/;"	field
mxcr_mask	$ZIGLIB/std/os/linux/x86_64.zig	/mxcr_mask: u32/;"	field
mxcsr	$ZIGLIB/std/os/linux/x86_64.zig	/mxcsr: u32/;"	field
mxcsr_mask	$ZIGLIB/std/c/solaris.zig	/mxcsr_mask: u32/;"	field
my_bytes	$ZIGLIB/std/mem.zig	/var my_bytes = toBytes(@as(u32, 0x12345678))/;"	variable
my_cwd	$ZIGLIB/std/fs.zig	/const my_cwd = cwd()/;"	constant
my_tick_node	$ZIGLIB/std/event/rwlock.zig	/var my_tick_node = Loop.NextTickNode{$/;"	variable
myriad2	$ZIGLIB/std/target/sparc.zig	/pub const myriad2 = CpuModel{$/;"	constant
myriad2_1	$ZIGLIB/std/target/sparc.zig	/pub const myriad2_1 = CpuModel{$/;"	constant
myriad2_2	$ZIGLIB/std/target/sparc.zig	/pub const myriad2_2 = CpuModel{$/;"	constant
myriad2_3	$ZIGLIB/std/target/sparc.zig	/pub const myriad2_3 = CpuModel{$/;"	constant
n0k0	$ZIGLIB/std/crypto/salsa20.zig	/const n0k0 = Half{ n3n0[1], k0k1[0] }/;"	constant
n1n2	$ZIGLIB/std/crypto/salsa20.zig	/const n1n2 = Half{ n1n2n3n0[0], n1n2n3n0[1] }/;"	constant
n1n2k6k1	$ZIGLIB/std/crypto/salsa20.zig	/const n1n2k6k1 = Lane{ n1n2[0], n1n2[1], k6k1[0], k6k1[1] }/;"	constant
n1n2n3n0	$ZIGLIB/std/crypto/salsa20.zig	/const n1n2n3n0 = Lane{ input[3][1], input[3][2], input[3][3], input[3][0] }/;"	constant
n3k7	$ZIGLIB/std/crypto/salsa20.zig	/const n3k7 = Half{ k7n3[1], k7n3[0] }/;"	constant
n3n0	$ZIGLIB/std/crypto/salsa20.zig	/const n3n0 = Half{ n1n2n3n0[2], n1n2n3n0[3] }/;"	constant
nCmdShow	$ZIGLIB/std/start.zig	/const nCmdShow = std.os.windows.user32.SW_SHOW/;"	constant
nCodeSlots	$ZIGLIB/std/macho.zig	/nCodeSlots: u32/;"	field
nCount	$ZIGLIB/std/os/windows.zig	/const nCount: DWORD = @intCast(DWORD, handles.len)/;"	constant
nFileIndexHigh	$ZIGLIB/std/os/windows.zig	/nFileIndexHigh: DWORD/;"	field
nFileIndexLow	$ZIGLIB/std/os/windows.zig	/nFileIndexLow: DWORD/;"	field
nFileSizeHigh	$ZIGLIB/std/os/windows.zig	/nFileSizeHigh: DWORD/;"	field
nFileSizeLow	$ZIGLIB/std/os/windows.zig	/nFileSizeLow: DWORD/;"	field
nLength	$ZIGLIB/std/os/windows.zig	/nLength: DWORD/;"	field
nNumberOfLinks	$ZIGLIB/std/os/windows.zig	/nNumberOfLinks: DWORD/;"	field
nPages	$ZIGLIB/std/heap/WasmPageAllocator.zig	/^fn nPages(memsize: usize) usize {$/;"	function
nSize	$ZIGLIB/std/os/windows/gdi32.zig	/nSize: WORD = @sizeOf(PIXELFORMATDESCRIPTOR)/;"	field
nSpecialSlots	$ZIGLIB/std/macho.zig	/nSpecialSlots: u32/;"	field
nVersion	$ZIGLIB/std/os/windows/gdi32.zig	/nVersion: WORD/;"	field
n_after_dot	$ZIGLIB/std/fmt/parse_float/parse.zig	/const n_after_dot = stream.offsetTrue() - marker/;"	constant
n_chars	$ZIGLIB/std/json.zig	/var n_chars: usize = undefined/;"	variable
n_desc	$ZIGLIB/std/macho.zig	/n_desc: u16/;"	field
n_descsz	$ZIGLIB/std/elf.zig	/n_descsz: Elf64_Word/;"	field
n_digits	$ZIGLIB/std/fmt/parse_float/parse.zig	/var n_digits = @intCast(isize, stream.offsetTrue())/;"	variable
n_namesz	$ZIGLIB/std/elf.zig	/n_namesz: Elf64_Word/;"	field
n_phdr	$ZIGLIB/std/os.zig	/const n_phdr = ehdr.e_phnum/;"	constant
n_sect	$ZIGLIB/std/macho.zig	/n_sect: u8/;"	field
n_strx	$ZIGLIB/std/macho.zig	/n_strx: u32/;"	field
n_tok	$ZIGLIB/std/Build/CheckObjectStep.zig	/var n_tok = needle_tok/;"	variable
n_trailing_zeros	$ZIGLIB/std/fmt/parse_float/decimal.zig	/var n_trailing_zeros: usize = 0/;"	variable
n_type	$ZIGLIB/std/macho.zig	/n_type: u8/;"	field
n_uword_bits	$ZIGLIB/compiler_rt/int.zig	/const n_uword_bits: c_uint = 32/;"	constant
n_value	$ZIGLIB/std/macho.zig	/n_value: u64/;"	field
nacl	$ZIGLIB/std/target.zig	/nacl/;"	field
nacl_trap	$ZIGLIB/std/target/arm.zig	/nacl_trap/;"	field
name	$ZIGLIB/std/zig/system/darwin/macos.zig	/name: []const u8 = ""/;"	field
nameCast	$ZIGLIB/std/enums.zig	/^pub fn nameCast(comptime E: type, comptime value: anytype) E {$/;"	function
nameW	$ZIGLIB/std/os/windows.zig	/const nameW = try sliceToPrefixedFileW(name)/;"	constant
name_buf	$ZIGLIB/std/Thread.zig	/var name_buf: [max_name_len:0]u8 = undefined/;"	variable
name_buffer	$ZIGLIB/std/fs.zig	/var name_buffer = std.ArrayList(u8).init(allocator)/;"	variable
name_bytes	$ZIGLIB/std/pdb.zig	/const name_bytes = try self.allocator.alloc(u8, name_bytes_len)/;"	constant
name_bytes_len	$ZIGLIB/std/pdb.zig	/const name_bytes_len = try reader.readIntLittle(u32)/;"	constant
name_c	$ZIGLIB/std/net.zig	/const name_c = try std.cstr.addNullByte(allocator, name)/;"	constant
name_data	$ZIGLIB/std/tz.zig	/name_data: [6:0]u8/;"	field
name_i	$ZIGLIB/std/crypto/Certificate.zig	/var name_i = subject.slice.start/;"	variable
name_index	$ZIGLIB/std/process.zig	/var name_index: usize = 0/;"	variable
name_info	$ZIGLIB/std/os.zig	/const name_info = @ptrCast(*const windows.FILE_NAME_INFO, &name_info_bytes[0])/;"	constant
name_info_bytes	$ZIGLIB/std/os.zig	/var name_info_bytes align(@alignOf(windows.FILE_NAME_INFO)) = [_]u8{0} ** (size + windows.MAX_PATH)/;"	variable
name_len	$ZIGLIB/std/os.zig	/const name_len = math.cast(c_uint, name.len) orelse return error.NameTooLong/;"	constant
name_length	$ZIGLIB/std/Build/CheckObjectStep.zig	/const name_length = try std.leb.readULEB128(u32, reader)/;"	constant
name_off	$ZIGLIB/std/os/linux/bpf/btf.zig	/name_off: u32/;"	field
name_offset	$ZIGLIB/std/pdb.zig	/const name_offset = try reader.readIntLittle(u32)/;"	constant
name_only_filename	$ZIGLIB/std/Build/CompileStep.zig	/^name_only_filename: ?[]const u8/;"	field
name_only_path	$ZIGLIB/std/Build/CompileStep.zig	/const name_only_path = try fs.path.join($/;"	constant
name_prefix	$ZIGLIB/std/Build/CompileStep.zig	/^name_prefix: []const u8/;"	field
name_rva	$ZIGLIB/std/coff.zig	/name_rva: u32/;"	field
name_space	$ZIGLIB/std/zig/render.zig	/const name_space = if (var_decl.ast.type_node == 0 and$/;"	constant
name_t	$ZIGLIB/std/os.zig	/const name_t = try toMemFdPath(name)/;"	constant
name_table_rva	$ZIGLIB/std/coff.zig	/name_table_rva: u31/;"	field
name_text	$ZIGLIB/std/net.zig	/const name_text = first_name_text.?/;"	constant
name_to_handle_at	$ZIGLIB/std/os/linux/syscalls.zig	/name_to_handle_at = Linux + 339/;"	field
name_token	$ZIGLIB/std/zig/Parse.zig	/const name_token = switch (p.token_tags[p.nextToken()]) {$/;"	constant
name_utf16le	$ZIGLIB/std/fs.zig	/const name_utf16le = @ptrCast([*]u16, &dir_info.FileName)[0 .. dir_info.FileNameLength \/ 2]/;"	constant
name_utf8	$ZIGLIB/std/fs.zig	/const name_utf8 = self.name_data[0..name_utf8_len]/;"	constant
name_utf8_len	$ZIGLIB/std/fs.zig	/const name_utf8_len = std.unicode.utf16leToUtf8(self.name_data[0..], name_utf16le) catch unreachable/;"	constant
name_wide	$ZIGLIB/std/os.zig	/const name_wide = mem.bytesAsSlice(u16, name_bytes)/;"	constant
name_with_terminator	$ZIGLIB/std/Thread.zig	/const name_with_terminator = blk: {$/;"	constant
named	$ZIGLIB/std/fmt.zig	/named: []const u8/;"	field
named_curve	$ZIGLIB/std/crypto/Certificate.zig	/const named_curve = try parseNamedCurve(cert_bytes, params_elem)/;"	constant
named_group	$ZIGLIB/std/crypto/tls/Client.zig	/const named_group = extd.decode(tls.NamedGroup)/;"	constant
named_sem_id	$ZIGLIB/std/c/haiku.zig	/named_sem_id: i32/;"	field
namelen	$ZIGLIB/std/os/windows/ws2_32.zig	/namelen: INT/;"	field
namelist	$ZIGLIB/std/dwarf/TAG.zig	/^pub const namelist = 0x2b/;"	constant
namelist_item	$ZIGLIB/std/dwarf/TAG.zig	/^pub const namelist_item = 0x2c/;"	constant
namelist_items	$ZIGLIB/std/dwarf/AT.zig	/^pub const namelist_items = 0x44/;"	constant
names	$ZIGLIB/std/zig/primitives.zig	/^pub const names = std.ComptimeStringMap(void, .{$/;"	constant
namespace	$ZIGLIB/std/dwarf/TAG.zig	/^pub const namespace = 0x39/;"	constant
namespaces	$ZIGLIB/std/os/linux.zig	/namespaces: bool = false/;"	field
nan2008	$ZIGLIB/std/target/mips.zig	/nan2008/;"	field
nan_f128	$ZIGLIB/std/math.zig	/^pub const nan_f128 = @bitCast(f128, nan_u128)/;"	constant
nan_f16	$ZIGLIB/std/math.zig	/^pub const nan_f16 = @bitCast(f16, nan_u16)/;"	constant
nan_f32	$ZIGLIB/std/math.zig	/^pub const nan_f32 = @bitCast(f32, nan_u32)/;"	constant
nan_f64	$ZIGLIB/std/math.zig	/^pub const nan_f64 = @bitCast(f64, nan_u64)/;"	constant
nan_f80	$ZIGLIB/std/math.zig	/^pub const nan_f80 = make_f80(F80{ .fraction = 0xA000000000000000, .exp = 0x7fff })/;"	constant
nan_u128	$ZIGLIB/std/math.zig	/^pub const nan_u128 = @as(u128, 0x7fff0000000000000000000000000001)/;"	constant
nan_u16	$ZIGLIB/std/math.zig	/^pub const nan_u16 = @as(u16, 0x7C01)/;"	constant
nan_u32	$ZIGLIB/std/math.zig	/^pub const nan_u32 = @as(u32, 0x7F800001)/;"	constant
nan_u64	$ZIGLIB/std/math.zig	/^pub const nan_u64 = @as(u64, 0x7FF << 52) | 1/;"	constant
nan_val	$ZIGLIB/compiler_rt/fmod.zig	/const nan_val = math.nan(f64)/;"	constant
nan_value	$ZIGLIB/std/math.zig	/const nan_value = comptime nan(T)/;"	constant
nanoSecondsToFileTime	$ZIGLIB/std/os/windows.zig	/^pub fn nanoSecondsToFileTime(ns: i128) FILETIME {$/;"	function
nanoTimestamp	$ZIGLIB/std/time.zig	/^pub fn nanoTimestamp() i128 {$/;"	function
nanosecond	$ZIGLIB/std/os/uefi.zig	/nanosecond: u32/;"	field
nanosleep	$ZIGLIB/std/os/linux/syscalls.zig	/nanosleep = Linux + 34/;"	field
native	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/native/;"	field
nativeTo	$ZIGLIB/std/mem.zig	/^pub fn nativeTo(comptime T: type, x: T, desired_endianness: Endian) T {$/;"	function
nativeToBig	$ZIGLIB/std/mem.zig	/^pub fn nativeToBig(comptime T: type, x: T) T {$/;"	function
nativeToLittle	$ZIGLIB/std/mem.zig	/^pub fn nativeToLittle(comptime T: type, x: T) T {$/;"	function
native_abi	$ZIGLIB/std/c/linux.zig	/^const native_abi = builtin.abi/;"	constant
native_arch	$ZIGLIB/std/start.zig	/^const native_arch = builtin.cpu.arch/;"	constant
native_endian	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/^const native_endian = builtin.cpu.arch.endian()/;"	constant
native_endian_parts	$ZIGLIB/std/net.zig	/const native_endian_parts = switch (native_endian) {$/;"	constant
native_os	$ZIGLIB/std/start.zig	/^const native_os = builtin.os.tag/;"	constant
native_target	$ZIGLIB/std/zig/system/NativePaths.zig	/const native_target = native_info.target/;"	constant
native_target_has_ld	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/const native_target_has_ld = comptime builtin.target.hasDynamicLinker()/;"	constant
natural_t	$ZIGLIB/std/c/darwin.zig	/^pub const natural_t = c_uint/;"	constant
nbits	$ZIGLIB/std/compress/deflate/huffman_bit_writer.zig	/nbits: u32/;"	field
nbytes	$ZIGLIB/std/os/wasi.zig	/nbytes: filesize_t/;"	field
nclen	$ZIGLIB/std/compress/deflate/decompressor.zig	/var nclen = @intCast(u32, self.b & 0xF) + 4/;"	variable
ncmds	$ZIGLIB/std/macho.zig	/ncmds: usize/;"	field
ncode	$ZIGLIB/std/compress/deflate/decompressor.zig	/var ncode = next_code[n]/;"	variable
nd_req	$ZIGLIB/std/c/solaris.zig	/nd_req: lif_nd_req/;"	field
ndist	$ZIGLIB/std/compress/deflate/decompressor.zig	/var ndist = @intCast(u32, self.b & 0x1F) + 1/;"	variable
ndots	$ZIGLIB/std/net.zig	/ndots: u32/;"	field
need_async_thread	$ZIGLIB/std/fs.zig	/^pub const need_async_thread = std.io.is_async and switch (builtin.os.tag) {$/;"	constant
need_bswap	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/const need_bswap = elf_endian != native_endian/;"	constant
need_cross_glibc	$ZIGLIB/std/Build/EmulatableRunStep.zig	/const need_cross_glibc = self.exe.target.isGnuLibC() and self.exe.is_linking_libc/;"	constant
need_dispatch	$ZIGLIB/std/event/channel.zig	/need_dispatch: bool/;"	field
need_ellipse	$ZIGLIB/std/Progress.zig	/var need_ellipse = false/;"	variable
need_to_delete	$ZIGLIB/std/event/loop.zig	/var need_to_delete = true/;"	variable
need_to_retry	$ZIGLIB/std/fs.zig	/var need_to_retry: bool = false/;"	variable
needed	$ZIGLIB/std/compress/deflate/huffman_code.zig	/needed: u32/;"	field
needed_alloc_count	$ZIGLIB/std/testing.zig	/const needed_alloc_count = x: {$/;"	constant
needed_bit_count	$ZIGLIB/std/target.zig	/pub const needed_bit_count = 288/;"	constant
needed_capacity	$ZIGLIB/std/crypto/Certificate/Bundle.zig	/const needed_capacity = std.math.cast(u32, decoded_size_upper_bound + size) orelse$/;"	constant
needed_limbs	$ZIGLIB/std/math/big/int.zig	/const needed_limbs = calcPowLimbsBufferLen(a.bitCountAbs(), b)/;"	constant
needed_memory	$ZIGLIB/std/c/haiku.zig	/needed_memory: u64/;"	field
needle	$ZIGLIB/std/mem.zig	/const needle = [_]u16{ 0xbbaa, 0xccbb, 0xddcc, 0xeedd, 0xffee }/;"	constant
needleBE	$ZIGLIB/std/mem.zig	/const needleBE = [_]u16{ 0xaacc, 0xbbdd, 0xccee, 0xddff, 0xee00 }/;"	constant
needleLE	$ZIGLIB/std/mem.zig	/const needleLE = [_]u16{ 0xbbbb, 0xcccc, 0xdddd, 0xeeee, 0xffff }/;"	constant
needle_bytes	$ZIGLIB/std/mem.zig	/const needle_bytes = sliceAsBytes(needle)/;"	constant
needle_it	$ZIGLIB/std/Build/CheckObjectStep.zig	/var needle_it = mem.tokenize(u8, mem.trim(u8, act.phrase, " "), " ")/;"	variable
needs_sign_ext	$ZIGLIB/std/leb128.zig	/const needs_sign_ext = group + 1 < max_group/;"	constant
negXi2	$ZIGLIB/compiler_rt/negXi2.zig	/^inline fn negXi2(comptime T: type, a: T) T {$/;"	function
neg_b	$ZIGLIB/compiler_rt/subxf3.zig	/const neg_b = std.math.make_f80(b_rep)/;"	constant
neg_exp	$ZIGLIB/std/fmt/parse_float/decimal.zig	/var neg_exp = false/;"	variable
neg_x	$ZIGLIB/std/testing.zig	/const neg_x: T = -12.0/;"	constant
neg_y	$ZIGLIB/std/testing.zig	/const neg_y: T = neg_x - 2 * eps_value/;"	constant
negate	$ZIGLIB/std/math/big/rational.zig	/pub fn negate(r: *Rational) void {$/;"	function
negateCast	$ZIGLIB/std/math.zig	/^pub fn negateCast(x: anytype) !std.meta.Int(.signed, @bitSizeOf(@TypeOf(x))) {$/;"	function
negate_stmt	$ZIGLIB/std/dwarf.zig	/pub const negate_stmt = 0x06/;"	constant
negated	$ZIGLIB/compiler_rt/common.zig	/const negated = @bitCast(U, a) ^ sign_bit_mask/;"	constant
negation	$ZIGLIB/std/zig/Ast.zig	/negation/;"	field
negation_wrap	$ZIGLIB/std/zig/Ast.zig	/negation_wrap/;"	field
negative	$ZIGLIB/std/fmt/parse_float/parse_float.zig	/const negative = s[i] == '-'/;"	constant
negative_count	$ZIGLIB/std/fs/path.zig	/var negative_count: usize = 0/;"	variable
negative_one	$ZIGLIB/std/math/big/int.zig	/const negative_one = Const{ .limbs = &.{1}, .positive = false }/;"	constant
negative_scratch_offset_bug	$ZIGLIB/std/target/amdgpu.zig	/negative_scratch_offset_bug/;"	field
negative_to_unsigned	$ZIGLIB/std/builtin.zig	/pub const negative_to_unsigned = "attempt to cast negative value to unsigned integer"/;"	constant
negative_unaligned_scratch_offset_bug	$ZIGLIB/std/target/amdgpu.zig	/negative_unaligned_scratch_offset_bug/;"	field
negvXi	$ZIGLIB/compiler_rt/negv.zig	/^inline fn negvXi(comptime ST: type, a: ST) ST {$/;"	function
nehalem	$ZIGLIB/std/target/x86.zig	/pub const nehalem = CpuModel{$/;"	constant
neighbor	$ZIGLIB/std/os/uefi/protocols/ip6_protocol.zig	/neighbor: Ip6Address/;"	field
neighbor_cache	$ZIGLIB/std/os/uefi/protocols/ip6_protocol.zig	/neighbor_cache: [*]Ip6NeighborCache/;"	field
neighbor_count	$ZIGLIB/std/os/uefi/protocols/ip6_protocol.zig	/neighbor_count: u32/;"	field
neighbors	$ZIGLIB/std/os/uefi/protocols/ip6_protocol.zig	/pub fn neighbors(self: *const Ip6Protocol, delete_flag: bool, target_ip6_address: *const Ip6Address, target_link_address: ?*const MacAddress, timeout: u32, override: bool) Status {$/;"	function
nelems	$ZIGLIB/std/os/linux/bpf/btf.zig	/nelems: u32/;"	field
neon	$ZIGLIB/std/target/arm.zig	/neon/;"	field
neon_fpmovs	$ZIGLIB/std/target/arm.zig	/neon_fpmovs/;"	field
neonfp	$ZIGLIB/std/target/arm.zig	/neonfp/;"	field
neoverse_512tvb	$ZIGLIB/std/target/aarch64.zig	/pub const neoverse_512tvb = CpuModel{$/;"	constant
neoverse_e1	$ZIGLIB/std/target/aarch64.zig	/pub const neoverse_e1 = CpuModel{$/;"	constant
neoverse_n1	$ZIGLIB/std/target/arm.zig	/pub const neoverse_n1 = CpuModel{$/;"	constant
neoverse_n2	$ZIGLIB/std/target/arm.zig	/pub const neoverse_n2 = CpuModel{$/;"	constant
neoverse_v1	$ZIGLIB/std/target/arm.zig	/pub const neoverse_v1 = CpuModel{$/;"	constant
nested_array	$ZIGLIB/std/Build/OptionsStep.zig	/const nested_array = [2][2]u16{$/;"	constant
nested_baz	$ZIGLIB/std/mem.zig	/const nested_baz = zeroInit(NestedBaz, .{})/;"	constant
nested_slice	$ZIGLIB/std/Build/OptionsStep.zig	/const nested_slice: []const []const u16 = &[_][]const u16{ &nested_array[0], &nested_array[1] }/;"	constant
nesting	$ZIGLIB/std/os/darwin.zig	/var nesting = nesting_depth/;"	variable
nestings	$ZIGLIB/std/json.zig	/const nestings = StreamingParser.default_max_nestings + 1/;"	constant
netbsd	$ZIGLIB/std/target.zig	/netbsd/;"	field
netmask	$ZIGLIB/std/os/linux.zig	/netmask: sockaddr/;"	field
netscape_cert_type	$ZIGLIB/std/crypto/Certificate.zig	/netscape_cert_type/;"	field
netscape_comment	$ZIGLIB/std/crypto/Certificate.zig	/netscape_comment/;"	field
networkShareServersEql	$ZIGLIB/std/fs/path.zig	/^fn networkShareServersEql(ns1: []const u8, ns2: []const u8) bool {$/;"	function
network_authentication_required	$ZIGLIB/std/http.zig	/network_authentication_required = 511/;"	field
network_protocol	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/network_protocol: u16 align(1)/;"	field
nevents	$ZIGLIB/std/time.zig	/var nevents: usize = undefined/;"	variable
never_async	$ZIGLIB/std/event/batch.zig	/never_async/;"	field
never_inline	$ZIGLIB/std/builtin.zig	/never_inline/;"	field
never_tail	$ZIGLIB/std/builtin.zig	/never_tail/;"	field
never_unmap	$ZIGLIB/std/heap/general_purpose_allocator.zig	/never_unmap: bool = false/;"	field
newHuffmanEncoder	$ZIGLIB/std/compress/deflate/huffman_code.zig	/^pub fn newHuffmanEncoder(allocator: Allocator, size: u32) !HuffmanEncoder {$/;"	function
newIndex	$ZIGLIB/std/compress/deflate/compressor.zig	/var newIndex: u32 = 0/;"	variable
new_actual_len	$ZIGLIB/std/heap/WasmAllocator.zig	/const new_actual_len = @max(new_len +| @sizeOf(usize), buf_align)/;"	constant
new_addr	$ZIGLIB/std/net.zig	/const new_addr = try ctx.addrs.addOne()/;"	constant
new_addr_end	$ZIGLIB/std/heap/PageAllocator.zig	/const new_addr_end = mem.alignForward(base_addr + new_size, mem.page_size)/;"	constant
new_aligned_size	$ZIGLIB/std/heap/general_purpose_allocator.zig	/const new_aligned_size = @max(new_size, @as(usize, 1) << log2_old_align)/;"	constant
new_allocation	$ZIGLIB/std/bit_set.zig	/const new_allocation = allocator.realloc(old_allocation, new_masks + 1) catch |err| {$/;"	constant
new_array	$ZIGLIB/compiler_rt/emutls.zig	/var new_array: [*]T = @ptrCast([*]T, @alignCast($/;"	variable
new_big_slot_pages	$ZIGLIB/std/heap/WasmAllocator.zig	/const new_big_slot_pages = math.ceilPowerOfTwo(usize, new_bigpages_needed) catch return false/;"	constant
new_bigpages_needed	$ZIGLIB/std/heap/WasmAllocator.zig	/const new_bigpages_needed = bigPagesNeeded(new_actual_len)/;"	constant
new_bit	$ZIGLIB/std/bit_set.zig	/const new_bit = bit & std.math.boolMask(MaskInt, value)/;"	constant
new_bit_index	$ZIGLIB/std/array_hash_map.zig	/var new_bit_index = @intCast(u8, std.math.log2_int_ceil(usize, desired_capacity))/;"	variable
new_bits	$ZIGLIB/std/mem.zig	/const new_bits = @intCast(u8, @bitCast(uN, value) & mask) << bit_shift/;"	constant
new_block	$ZIGLIB/std/crypto/pbkdf2.zig	/var new_block: [h_len]u8 = undefined/;"	variable
new_buf	$ZIGLIB/std/mem/Allocator.zig	/const new_buf = try allocator.alloc(T, m.len)/;"	constant
new_byte_count	$ZIGLIB/std/mem/Allocator.zig	/const new_byte_count = math.mul(usize, @sizeOf(T), new_n) catch return false/;"	constant
new_bytes	$ZIGLIB/std/packed_int_array.zig	/const new_bytes = bytes[start_byte..end_byte]/;"	constant
new_cap	$ZIGLIB/std/hash_map.zig	/var new_cap = @truncate(u32, (@as(u64, size) * 100) \/ max_load_percentage + 1)/;"	variable
new_cap_shelf_count	$ZIGLIB/std/segmented_list.zig	/const new_cap_shelf_count = shelfCount(new_capacity)/;"	constant
new_capacity	$ZIGLIB/std/process.zig	/const new_capacity = current_buf.len * 2/;"	constant
new_check	$ZIGLIB/std/Build/CheckObjectStep.zig	/var new_check = Check.create(self.builder)/;"	variable
new_counter	$ZIGLIB/std/event/wait_group.zig	/const new_counter = try std.math.add(CounterType, self.counter, count)/;"	constant
new_cv	$ZIGLIB/std/crypto/blake3.zig	/var new_cv = first_cv/;"	variable
new_digit	$ZIGLIB/std/fmt/parse_float/decimal.zig	/const new_digit = @intCast(u8, math.shr(MantissaT, n, shift))/;"	constant
new_dir	$ZIGLIB/std/fs.zig	/var new_dir = top.iter.dir.openIterableDir(base.name, .{}) catch |err| switch (err) {$/;"	variable
new_dynamic_segments	$ZIGLIB/std/segmented_list.zig	/const new_dynamic_segments = try allocator.alloc([*]T, new_cap_shelf_count)/;"	constant
new_end	$ZIGLIB/std/heap/WasmPageAllocator.zig	/var new_end = end/;"	variable
new_end_index	$ZIGLIB/std/heap/arena_allocator.zig	/const new_end_index = adjusted_index + n/;"	constant
new_env_map	$ZIGLIB/std/Build/RunStep.zig	/const new_env_map = self.builder.allocator.create(EnvMap) catch @panic("OOM")/;"	constant
new_file	$ZIGLIB/std/os/linux/io_uring.zig	/const new_file = try std.fs.cwd().openFile(new_path, .{})/;"	constant
new_file_data	$ZIGLIB/std/os/linux/io_uring.zig	/var new_file_data: [16]u8 = undefined/;"	variable
new_flags	$ZIGLIB/std/os.zig	/const new_flags = flags & ~@as(u32, O.CLOEXEC)/;"	constant
new_fp	$ZIGLIB/std/debug.zig	/const new_fp = math.add(usize, @intToPtr(*const usize, fp).*, fp_bias) catch return null/;"	constant
new_h	$ZIGLIB/std/compress/deflate/compressor.zig	/var new_h: u32 = 0/;"	variable
new_head	$ZIGLIB/std/Thread/Futex.zig	/const new_head = waiter.next orelse break :blk null/;"	constant
new_header	$ZIGLIB/std/array_hash_map.zig	/const new_header = try IndexHeader.alloc(allocator, new_bit_index)/;"	constant
new_hint	$ZIGLIB/std/heap/PageAllocator.zig	/const new_hint = @alignCast(mem.page_size, slice.ptr + aligned_len)/;"	constant
new_index	$ZIGLIB/std/process.zig	/const new_index = contents_index + len/;"	constant
new_int_bits	$ZIGLIB/std/packed_int_array.zig	/const new_int_bits = @bitSizeOf(NewInt)/;"	constant
new_int_count	$ZIGLIB/std/packed_int_array.zig	/const new_int_count = total_bits \/ new_int_bits/;"	constant
new_item_ptr	$ZIGLIB/std/segmented_list.zig	/const new_item_ptr = try self.addOne(allocator)/;"	constant
new_key	$ZIGLIB/std/hash_map.zig	/const new_key = &self.keys()[idx]/;"	constant
new_len	$ZIGLIB/std/os/windows.zig	/const new_len = mem.collapseRepeatsLen(T, path, '\\\\')/;"	constant
new_length	$ZIGLIB/std/segmented_list.zig	/const new_length = self.len + 1/;"	constant
new_mask	$ZIGLIB/std/math/big/int.zig	/const new_mask = (new_signmask << 1) -% 1/;"	constant
new_masks	$ZIGLIB/std/bit_set.zig	/const new_masks = numMasks(new_len)/;"	constant
new_mem	$ZIGLIB/std/mem/Allocator.zig	/const new_mem = self.rawAlloc(byte_count, log2a(Slice.alignment), return_address) orelse$/;"	constant
new_memory	$ZIGLIB/std/array_list.zig	/const new_memory = try self.allocator.alignedAlloc(T, alignment, new_capacity)/;"	constant
new_n	$ZIGLIB/std/heap/WasmPageAllocator.zig	/const new_n = nPages(new_len)/;"	constant
new_off	$ZIGLIB/std/os/windows.zig	/const new_off = off + bytes_transferred/;"	constant
new_offset	$ZIGLIB/std/os.zig	/var new_offset: wasi.filesize_t = undefined/;"	variable
new_path	$ZIGLIB/std/os/linux/io_uring.zig	/const new_path = "test_io_uring_renameat_new"/;"	constant
new_path_c	$ZIGLIB/std/os.zig	/const new_path_c = try toPosixPath(new_path)/;"	constant
new_path_w	$ZIGLIB/std/os/windows.zig	/const new_path_w = try sliceToPrefixedFileW(new_path)/;"	constant
new_pc	$ZIGLIB/std/debug.zig	/const new_pc = @intToPtr($/;"	constant
new_pos	$ZIGLIB/std/io/fixed_buffer_stream.zig	/const new_pos = std.math.add(usize, self.pos, amt_usize) catch std.math.maxInt(usize)/;"	constant
new_prog_fd	$ZIGLIB/std/os/linux/bpf.zig	/new_prog_fd: fd_t/;"	field
new_props	$ZIGLIB/std/compress/lzma2/decode.zig	/var new_props = self.lzma_state.lzma_props/;"	variable
new_ptr	$ZIGLIB/std/heap/arena_allocator.zig	/const new_ptr = self.child_allocator.rawAlloc(total_size, align_bits, @returnAddress()) orelse {$/;"	constant
new_ptr_info	$ZIGLIB/std/mem.zig	/var new_ptr_info = ptr_info/;"	variable
new_req	$ZIGLIB/std/http/Client.zig	/const new_req = try req.client.request(new_url, req.headers, .{$/;"	constant
new_req_bytes	$ZIGLIB/std/heap/general_purpose_allocator.zig	/const new_req_bytes = self.total_requested_bytes + size/;"	constant
new_req_limbs	$ZIGLIB/std/math/big/int.zig	/const new_req_limbs = calcTwosCompLimbCount(bit_count - 1)/;"	constant
new_session_ticket	$ZIGLIB/std/crypto/tls.zig	/new_session_ticket = 4/;"	field
new_signmask	$ZIGLIB/std/math/big/int.zig	/const new_signmask = @as(Limb, 1) << msb/;"	constant
new_size	$ZIGLIB/std/fifo.zig	/const new_size = if (powers_of_two) math.ceilPowerOfTwo(usize, size) catch return error.OutOfMemory else size/;"	constant
new_size_aligned	$ZIGLIB/std/heap/PageAllocator.zig	/const new_size_aligned = mem.alignForward(new_size, mem.page_size)/;"	constant
new_size_class	$ZIGLIB/std/heap/general_purpose_allocator.zig	/const new_size_class = math.ceilPowerOfTwoAssert(usize, new_aligned_size)/;"	constant
new_slice	$ZIGLIB/std/packed_int_array.zig	/var new_slice = PackedIntSliceEndian(Int, endian).init(new_bytes, length)/;"	variable
new_small_slot_size	$ZIGLIB/std/heap/WasmAllocator.zig	/const new_small_slot_size = math.ceilPowerOfTwo(usize, new_actual_len) catch return false/;"	constant
new_state	$ZIGLIB/std/Thread/Condition.zig	/const new_state = state - one_waiter - one_signal/;"	constant
new_url	$ZIGLIB/std/http/Client.zig	/const new_url = try std.Uri.parse(location)/;"	constant
new_value	$ZIGLIB/std/hash_map.zig	/const new_value = &self.values()[idx]/;"	constant
newfd	$ZIGLIB/std/os/linux/seccomp.zig	/newfd: u32/;"	field
newfd_flags	$ZIGLIB/std/os/linux/seccomp.zig	/newfd_flags: u32/;"	field
newlen	$ZIGLIB/std/bounded_array.zig	/const newlen = self.len - 1/;"	constant
newline	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/const newline = mem.indexOfScalar(u8, buffer[0..len], '\\n') orelse break :blk file/;"	constant
newline_index	$ZIGLIB/std/zig/render.zig	/const newline_index = mem.indexOfScalar(u8, tree.source[comment_start..end], '\\n')/;"	constant
newlines	$ZIGLIB/std/zig/render.zig	/var newlines: u2 = 0/;"	variable
newname	$ZIGLIB/std/os/linux.zig	/newname: [IFNAMESIZE - 1:0]u8/;"	field
newx	$ZIGLIB/std/crypto/gimli.zig	/const newx = z ^ y ^ shift(x & y, 3)/;"	constant
newy	$ZIGLIB/std/crypto/gimli.zig	/const newy = y ^ x ^ shift(x | z, 1)/;"	constant
newz	$ZIGLIB/std/crypto/gimli.zig	/const newz = x ^ shift(z, 1) ^ shift(y & z, 2)/;"	constant
next	$ZIGLIB/std/zig/tokenizer.zig	/pub fn next(self: *Tokenizer) Token {$/;"	function
nextArg	$ZIGLIB/std/fmt.zig	/fn nextArg(self: *@This(), arg_index: ?usize) ?usize {$/;"	function
nextBlock	$ZIGLIB/std/compress/deflate/decompressor.zig	/fn nextBlock(self: *Self) Error!void {$/;"	function
nextBsd	$ZIGLIB/std/fs.zig	/fn nextBsd(self: *Self) !?Entry {$/;"	function
nextCodepoint	$ZIGLIB/std/unicode.zig	/pub fn nextCodepoint(it: *Utf8Iterator) ?u21 {$/;"	function
nextCodepointSlice	$ZIGLIB/std/unicode.zig	/pub fn nextCodepointSlice(it: *Utf8Iterator) ?[]const u8 {$/;"	function
nextDarwin	$ZIGLIB/std/fs.zig	/fn nextDarwin(self: *Self) !?Entry {$/;"	function
nextExpire	$ZIGLIB/std/event/loop.zig	/fn nextExpire(self: *Waiters) ?u64 {$/;"	function
nextIsMinLayer	$ZIGLIB/std/priority_dequeue.zig	/fn nextIsMinLayer(self: Self) bool {$/;"	function
nextLevel	$ZIGLIB/std/sort.zig	/fn nextLevel(self: *Iterator) bool {$/;"	function
nextLinux	$ZIGLIB/std/fs.zig	/pub fn nextLinux(self: *Self) ErrorLinux!?Entry {$/;"	function
nextRange	$ZIGLIB/std/sort.zig	/fn nextRange(self: *Iterator) Range {$/;"	function
nextSolaris	$ZIGLIB/std/fs.zig	/fn nextSolaris(self: *Self) !?Entry {$/;"	function
nextToken	$ZIGLIB/std/zig/Parse.zig	/^fn nextToken(p: *Parse) TokenIndex {$/;"	function
nextWasi	$ZIGLIB/std/fs.zig	/pub fn nextWasi(self: *Self) ErrorWasi!?Entry {$/;"	function
nextWord	$ZIGLIB/std/bit_set.zig	/inline fn nextWord(self: *Self, comptime is_first_word: bool) void {$/;"	function
next_addr	$ZIGLIB/std/heap/WasmAllocator.zig	/const next_addr = next_addrs[class]/;"	constant
next_addrs	$ZIGLIB/std/heap/WasmAllocator.zig	/^var next_addrs = [1]usize{0} ** size_class_count/;"	variable
next_arg	$ZIGLIB/std/fmt.zig	/next_arg: usize = 0/;"	field
next_asm_input	$ZIGLIB/std/zig/render.zig	/const next_asm_input = asm_node.inputs[i + 1]/;"	constant
next_asm_output	$ZIGLIB/std/zig/render.zig	/const next_asm_output = asm_node.outputs[i + 1]/;"	constant
next_buf	$ZIGLIB/std/child_process.zig	/const next_buf = buf.unusedCapacitySlice()/;"	constant
next_byte	$ZIGLIB/std/io/bit_reader.zig	/const next_byte = self.forward_reader.readByte() catch |err| switch (err) {$/;"	constant
next_char_freq	$ZIGLIB/std/compress/deflate/huffman_code.zig	/next_char_freq: u32/;"	field
next_chunk	$ZIGLIB/std/crypto/blake3.zig	/const next_chunk = self.slice[0..math.min(self.chunk_len, self.slice.len)]/;"	constant
next_chunk_length	$ZIGLIB/std/http/Client.zig	/next_chunk_length: u64/;"	field
next_code	$ZIGLIB/std/compress/deflate/decompressor.zig	/var next_code: [max_code_len]u32 = [1]u32{0} ** max_code_len/;"	variable
next_codepoint	$ZIGLIB/std/unicode.zig	/const next_codepoint = it.nextCodepointSlice() orelse return it.bytes[original_i..]/;"	constant
next_cpu	$ZIGLIB/std/zig/system/windows.zig	/const next_cpu = try std.fmt.bufPrint(&next_cpu_buf, "{d}", .{core})/;"	constant
next_cpu_buf	$ZIGLIB/std/zig/system/windows.zig	/var next_cpu_buf: [max_cpu_buf]u8 = undefined/;"	variable
next_emit	$ZIGLIB/std/compress/deflate/deflate_fast.zig	/var next_emit: i32 = 0/;"	variable
next_expr	$ZIGLIB/std/zig/render.zig	/const next_expr = section_exprs[i + 1]/;"	constant
next_f64	$ZIGLIB/std/rand/ziggurat.zig	/^pub fn next_f64(random: Random, comptime tables: ZigTable) f64 {$/;"	function
next_field	$ZIGLIB/std/zig/Ast.zig	/next_field/;"	field
next_handshake_i	$ZIGLIB/std/crypto/tls/Client.zig	/const next_handshake_i = ct_i + handshake_len/;"	constant
next_hash	$ZIGLIB/std/compress/deflate/deflate_fast.zig	/var next_hash: u32 = hash(cv)/;"	variable
next_https_rescan_certs	$ZIGLIB/std/http/Client.zig	/^next_https_rescan_certs: bool = true/;"	field
next_id	$ZIGLIB/std/os/linux/bpf.zig	/next_id: u32/;"	field
next_index	$ZIGLIB/std/mem.zig	/const next_index = start + self.advance/;"	constant
next_internal	$ZIGLIB/std/debug.zig	/fn next_internal(self: *StackIterator) ?usize {$/;"	function
next_it	$ZIGLIB/std/heap/arena_allocator.zig	/const next_it = node.next/;"	constant
next_job_index	$ZIGLIB/std/event/batch.zig	/next_job_index: usize/;"	field
next_key	$ZIGLIB/std/os/linux/bpf.zig	/var next_key = [_]u8{ 2, 3, 4, 5 }/;"	variable
next_lid	$ZIGLIB/std/SemanticVersion.zig	/const next_lid = lhs_pre_it.next()/;"	constant
next_mmap_addr_hint	$ZIGLIB/std/heap.zig	/^pub var next_mmap_addr_hint: ?[*]align(mem.page_size) u8 = null/;"	variable
next_multiline_string	$ZIGLIB/std/zig/render.zig	/const next_multiline_string =$/;"	constant
next_node	$ZIGLIB/std/linked_list.zig	/const next_node = node.next orelse return null/;"	constant
next_offset	$ZIGLIB/std/dwarf.zig	/const next_offset = unit_length + (if (is_64) @as(usize, 12) else @as(usize, 4))/;"	constant
next_page_addr	$ZIGLIB/std/heap/WasmPageAllocator.zig	/const next_page_addr = next_page_idx * mem.page_size/;"	constant
next_page_idx	$ZIGLIB/std/heap/WasmPageAllocator.zig	/const next_page_idx = @wasmMemorySize(0)/;"	constant
next_pair_freq	$ZIGLIB/std/compress/deflate/huffman_code.zig	/next_pair_freq: u32/;"	field
next_regs	$ZIGLIB/std/debug.zig	/const next_regs = context.getRegs()/;"	constant
next_rid	$ZIGLIB/std/SemanticVersion.zig	/const next_rid = rhs_pre_it.next()/;"	constant
next_s	$ZIGLIB/std/compress/deflate/deflate_fast.zig	/var next_s: i32 = s/;"	variable
next_size	$ZIGLIB/std/compress/deflate/huffman_bit_writer.zig	/var next_size = codegen[in_index]/;"	variable
next_src_i	$ZIGLIB/std/unicode.zig	/const next_src_i = src_i + n/;"	constant
next_sub_task	$ZIGLIB/std/Progress.zig	/var next_sub_task: usize = 0/;"	variable
next_tick_node	$ZIGLIB/std/event/loop.zig	/const next_tick_node = self.next_tick_queue.get() orelse {$/;"	constant
next_tick_queue	$ZIGLIB/std/event/loop.zig	/next_tick_queue: std.atomic.Queue(anyframe)/;"	field
next_unit_pos	$ZIGLIB/std/dwarf.zig	/const next_unit_pos = this_unit_offset + next_offset/;"	constant
next_unsent	$ZIGLIB/std/os/linux.zig	/var next_unsent: usize = 0/;"	variable
nextdefsym	$ZIGLIB/std/macho.zig	/nextdefsym: u32 = 0/;"	field
nextrefsyms	$ZIGLIB/std/macho.zig	/nextrefsyms: u32 = 0/;"	field
nextrel	$ZIGLIB/std/macho.zig	/nextrel: u32 = 0/;"	field
nfat_arch	$ZIGLIB/std/macho.zig	/nfat_arch: u32/;"	field
nfds_t	$ZIGLIB/std/os/linux.zig	/^pub const nfds_t = usize/;"	constant
nfsservctl	$ZIGLIB/std/os/linux/syscalls.zig	/nfsservctl = Linux + 189/;"	field
niagara	$ZIGLIB/std/target/sparc.zig	/pub const niagara = CpuModel{$/;"	constant
niagara2	$ZIGLIB/std/target/sparc.zig	/pub const niagara2 = CpuModel{$/;"	constant
niagara3	$ZIGLIB/std/target/sparc.zig	/pub const niagara3 = CpuModel{$/;"	constant
niagara4	$ZIGLIB/std/target/sparc.zig	/pub const niagara4 = CpuModel{$/;"	constant
nice	$ZIGLIB/std/os/linux/syscalls.zig	/nice = Linux + 34/;"	field
nindirectsyms	$ZIGLIB/std/macho.zig	/nindirectsyms: u32 = 0/;"	field
nivcsw	$ZIGLIB/std/os/linux.zig	/nivcsw: isize/;"	field
nlink	$ZIGLIB/std/os/wasi.zig	/nlink: linkcount_t/;"	field
nlink_t	$ZIGLIB/std/os/linux/x86_64.zig	/^pub const nlink_t = usize/;"	constant
nlist	$ZIGLIB/std/macho.zig	/^pub const nlist = extern struct {$/;"	struct
nlist_64	$ZIGLIB/std/macho.zig	/^pub const nlist_64 = extern struct {$/;"	struct
nlit	$ZIGLIB/std/compress/deflate/decompressor.zig	/var nlit = @intCast(u32, self.b & 0x1F) + 257/;"	variable
nlmsghdr	$ZIGLIB/std/os/linux.zig	/^pub const nlmsghdr = extern struct {$/;"	struct
nlocalsym	$ZIGLIB/std/macho.zig	/nlocalsym: u32 = 0/;"	field
nlocrel	$ZIGLIB/std/macho.zig	/nlocrel: u32 = 0/;"	field
nmask	$ZIGLIB/std/crypto/poly1305.zig	/const nmask = ~mask/;"	constant
nmax	$ZIGLIB/std/hash/adler.zig	/const nmax = 5552/;"	constant
nmodtab	$ZIGLIB/std/macho.zig	/nmodtab: u32 = 0/;"	field
nnnn	$ZIGLIB/std/crypto/Certificate.zig	/const nnnn: @Vector(4, u16) = .{ text[0], text[1], text[2], text[3] }/;"	constant
nnp_assist	$ZIGLIB/std/target/s390x.zig	/nnp_assist/;"	field
noFree	$ZIGLIB/std/mem/Allocator.zig	/^pub fn noFree($/;"	function
noResize	$ZIGLIB/std/mem/Allocator.zig	/^pub fn noResize($/;"	function
no_application_protocol	$ZIGLIB/std/crypto/tls.zig	/no_application_protocol = 120/;"	field
no_async	$ZIGLIB/std/builtin.zig	/no_async/;"	field
no_branch_predictor	$ZIGLIB/std/target/arm.zig	/no_branch_predictor/;"	field
no_bti_at_return_twice	$ZIGLIB/std/target/arm.zig	/no_bti_at_return_twice/;"	field
no_color	$ZIGLIB/std/debug.zig	/no_color/;"	field
no_comment_line	$ZIGLIB/std/net.zig	/const no_comment_line = split_it.first()/;"	constant
no_compression	$ZIGLIB/std/compress/deflate/compressor.zig	/no_compression = 0/;"	field
no_content	$ZIGLIB/std/http.zig	/no_content = 204/;"	field
no_data_dep_hazard	$ZIGLIB/std/target/amdgpu.zig	/no_data_dep_hazard/;"	field
no_default_unroll	$ZIGLIB/std/target/riscv.zig	/no_default_unroll/;"	field
no_emit	$ZIGLIB/std/Build/CompileStep.zig	/no_emit: void/;"	field
no_expand	$ZIGLIB/std/os.zig	/no_expand/;"	field
no_fmuls	$ZIGLIB/std/target/sparc.zig	/no_fmuls/;"	field
no_follow	$ZIGLIB/std/fs.zig	/no_follow: bool = false/;"	field
no_fsmuld	$ZIGLIB/std/target/sparc.zig	/no_fsmuld/;"	field
no_movt	$ZIGLIB/std/target/arm.zig	/no_movt/;"	field
no_neg_immediates	$ZIGLIB/std/target/arm.zig	/no_neg_immediates/;"	field
no_rounds	$ZIGLIB/std/crypto/sha3.zig	/const no_rounds = comptime x: {$/;"	constant
no_rvc_hints	$ZIGLIB/std/target/riscv.zig	/no_rvc_hints/;"	field
no_sdst_cmpx	$ZIGLIB/std/target/amdgpu.zig	/no_sdst_cmpx/;"	field
no_top_bit_mask	$ZIGLIB/std/bit_set.zig	/const no_top_bit_mask = (@as(MaskInt, 1) << @intCast(ShiftInt, top_bit)) - 1/;"	constant
no_zcz_fp	$ZIGLIB/std/target/aarch64.zig	/no_zcz_fp/;"	field
noabicalls	$ZIGLIB/std/target/mips.zig	/noabicalls/;"	field
noarm	$ZIGLIB/std/target/arm.zig	/noarm/;"	field
nocall	$ZIGLIB/std/dwarf.zig	/nocall = 0x3/;"	field
nocona	$ZIGLIB/std/target/x86.zig	/pub const nocona = CpuModel{$/;"	constant
node	$ZIGLIB/std/zig/Parse.zig	/var node = try p.parsePrefixExpr()/;"	variable
nodeCausesSliceOpSpace	$ZIGLIB/std/zig/render.zig	/^fn nodeCausesSliceOpSpace(tag: Ast.Node.Tag) bool {$/;"	function
nodeEntry	$ZIGLIB/std/event/loop.zig	/const nodeEntry = @fieldParentPtr(Entry, "node", node)/;"	constant
nodeIsBlock	$ZIGLIB/std/zig/render.zig	/^fn nodeIsBlock(tag: Ast.Node.Tag) bool {$/;"	function
nodeIsIfForWhileSwitch	$ZIGLIB/std/zig/render.zig	/^fn nodeIsIfForWhileSwitch(tag: Ast.Node.Tag) bool {$/;"	function
node_0	$ZIGLIB/std/atomic/queue.zig	/var node_0 = Queue(i32).Node{$/;"	variable
node_1	$ZIGLIB/std/atomic/queue.zig	/var node_1 = Queue(i32).Node{$/;"	variable
node_2	$ZIGLIB/std/atomic/queue.zig	/var node_2 = Queue(i32).Node{$/;"	variable
node_3	$ZIGLIB/std/atomic/queue.zig	/var node_3 = Queue(i32).Node{$/;"	variable
node_4	$ZIGLIB/std/atomic/queue.zig	/var node_4 = Queue(i32).Node{$/;"	variable
node_index	$ZIGLIB/std/zig/Parse.zig	/const node_index = p.expectExpr() catch |err| switch (err) {$/;"	constant
node_tags	$ZIGLIB/std/zig/render.zig	/const node_tags = tree.nodes.items(.tag)/;"	constant
nodename	$ZIGLIB/std/os/linux.zig	/nodename: [64:0]u8/;"	field
nodes	$ZIGLIB/std/zig/render.zig	/const nodes = tree.nodes.items(.tag)/;"	constant
nodes_data	$ZIGLIB/std/zig/Ast.zig	/const nodes_data = tree.nodes.items(.data)/;"	constant
noise	$ZIGLIB/std/crypto/ecdsa.zig	/var noise: [Scheme.noise_length]u8 = undefined/;"	variable
noise2	$ZIGLIB/std/crypto/25519/ed25519.zig	/var noise2: [noise_length]u8 = undefined/;"	variable
noise_length	$ZIGLIB/std/crypto/ecdsa.zig	/pub const noise_length = Curve.scalar.encoded_length/;"	constant
nomadd4	$ZIGLIB/std/target/mips.zig	/nomadd4/;"	field
nonSIMDCall0	$ZIGLIB/std/valgrind.zig	/^pub fn nonSIMDCall0(func: fn (usize) usize) usize {$/;"	function
nonSIMDCall1	$ZIGLIB/std/valgrind.zig	/^pub fn nonSIMDCall1(func: fn (usize, usize) usize, a1: usize) usize {$/;"	function
nonSIMDCall2	$ZIGLIB/std/valgrind.zig	/^pub fn nonSIMDCall2(func: fn (usize, usize, usize) usize, a1: usize, a2: usize) usize {$/;"	function
nonSIMDCall3	$ZIGLIB/std/valgrind.zig	/^pub fn nonSIMDCall3(func: fn (usize, usize, usize, usize) usize, a1: usize, a2: usize, a3: usize) usize {$/;"	function
non_authoritative_info	$ZIGLIB/std/http.zig	/non_authoritative_info = 203/;"	field
non_const_ptr	$ZIGLIB/std/mem/Allocator.zig	/const non_const_ptr = @intToPtr([*]u8, @ptrToInt(ptr))/;"	constant
non_iterative_hash	$ZIGLIB/std/hash/wyhash.zig	/const non_iterative_hash = Wyhash.hash(seed, buf[0..end])/;"	constant
non_null	$ZIGLIB/std/mem.zig	/const non_null = ptr orelse return null/;"	constant
non_spacing	$ZIGLIB/std/os/uefi/protocols/hii.zig	/non_spacing: bool/;"	field
nonblock	$ZIGLIB/std/net.zig	/const nonblock = if (std.io.is_async) os.SOCK.NONBLOCK else 0/;"	constant
nonblocking_lock_flag	$ZIGLIB/std/fs.zig	/const nonblocking_lock_flag: u32 = if (has_flock_open_flags and flags.lock_nonblocking)$/;"	constant
nonce	$ZIGLIB/std/crypto/tls/Client.zig	/const nonce: [P.AEAD.nonce_length]u8 = @as(V, p.server_iv) ^ operand/;"	constant
nonce64	$ZIGLIB/std/crypto/25519/ed25519.zig	/var nonce64: [64]u8 = undefined/;"	variable
nonce_block	$ZIGLIB/std/crypto/aegis.zig	/const nonce_block = AesBlock.fromBytes(&nonce)/;"	constant
nonce_block1	$ZIGLIB/std/crypto/aegis.zig	/const nonce_block1 = AesBlock.fromBytes(nonce[0..16])/;"	constant
nonce_block2	$ZIGLIB/std/crypto/aegis.zig	/const nonce_block2 = AesBlock.fromBytes(nonce[16..32])/;"	constant
nonce_length	$ZIGLIB/std/crypto/salsa20.zig	/pub const nonce_length = 8/;"	constant
none	$ZIGLIB/std/zig/render.zig	/none/;"	field
none_free	$ZIGLIB/std/heap/WasmPageAllocator.zig	/pub const none_free: u8 = 0/;"	constant
nonfinal	$ZIGLIB/std/zig/Parse.zig	/nonfinal: TokenIndex/;"	field
nonpipelined_vfp	$ZIGLIB/std/target/arm.zig	/nonpipelined_vfp/;"	field
nontrapping_fptoint	$ZIGLIB/std/target/wasm.zig	/nontrapping_fptoint/;"	field
nonzero	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/^pub fn nonzero(out1: *u64, arg1: [4]u64) void {$/;"	function
nooddspreg	$ZIGLIB/std/target/mips.zig	/nooddspreg/;"	field
nopl	$ZIGLIB/std/target/x86.zig	/nopl/;"	field
noreturn	$ZIGLIB/std/dwarf/AT.zig	/^pub const @"noreturn" = 0x87/;"	constant
noreturn_stack_elim	$ZIGLIB/std/target/hexagon.zig	/noreturn_stack_elim/;"	field
norm	$ZIGLIB/std/target/arc.zig	/norm/;"	field
norm_f	$ZIGLIB/std/rand/ziggurat.zig	/^fn norm_f(x: f64) f64 {$/;"	function
norm_f_inv	$ZIGLIB/std/rand/ziggurat.zig	/^fn norm_f_inv(y: f64) f64 {$/;"	function
norm_r	$ZIGLIB/std/rand/ziggurat.zig	/^const norm_r = 3.6541528853610088/;"	constant
norm_shift	$ZIGLIB/std/math/big/int.zig	/const norm_shift = if (lz == 0 and y.toConst().isOdd())$/;"	constant
norm_v	$ZIGLIB/std/rand/ziggurat.zig	/^const norm_v = 0.00492867323399/;"	constant
norm_zero_case	$ZIGLIB/std/rand/ziggurat.zig	/^fn norm_zero_case(random: Random, u: f64) f64 {$/;"	function
normal	$ZIGLIB/std/tar.zig	/normal = '0'/;"	field
normal_large	$ZIGLIB/std/heap/general_purpose_allocator.zig	/const normal_large = try allocator.alloc(u8, 2 * page_size)/;"	constant
normal_small	$ZIGLIB/std/heap/general_purpose_allocator.zig	/const normal_small = try allocator.alloc(u8, size_class)/;"	constant
normalize	$ZIGLIB/std/math/big/int.zig	/pub fn normalize(r: *Mutable, length: usize) void {$/;"	function
normalizePath	$ZIGLIB/std/os/windows.zig	/^pub fn normalizePath(comptime T: type, path: []T) RemoveDotDirsError!usize {$/;"	function
normalized_len	$ZIGLIB/std/child_process.zig	/const normalized_len = windows.normalizePath(u16, dir_buf.items) catch return error.BadPathName/;"	constant
nosuspend	$ZIGLIB/std/zig/Ast.zig	/@"nosuspend"/;"	field
notPresent	$ZIGLIB/std/Build/CheckObjectStep.zig	/fn notPresent(self: *Check, phrase: []const u8) void {$/;"	function
not_acceptable	$ZIGLIB/std/http.zig	/not_acceptable = 406/;"	field
not_after	$ZIGLIB/std/crypto/Certificate.zig	/not_after: u64/;"	field
not_after_utc	$ZIGLIB/std/crypto/Certificate.zig	/const not_after_utc = try parseTime(cert, not_after)/;"	constant
not_before	$ZIGLIB/std/crypto/Certificate.zig	/not_before: u64/;"	field
not_before_utc	$ZIGLIB/std/crypto/Certificate.zig	/const not_before_utc = try parseTime(cert, not_before)/;"	constant
not_extended	$ZIGLIB/std/http.zig	/not_extended = 510/;"	field
not_found	$ZIGLIB/std/http.zig	/not_found = 404/;"	field
not_implemented	$ZIGLIB/std/http.zig	/not_implemented = 501/;"	field
not_leap	$ZIGLIB/std/time/epoch.zig	/not_leap/;"	field
not_modified	$ZIGLIB/std/http.zig	/not_modified = 304/;"	field
not_present	$ZIGLIB/std/Build/CheckObjectStep.zig	/not_present/;"	field
not_square	$ZIGLIB/std/crypto/25519/edwards25519.zig	/not_square: bool/;"	field
notes	$ZIGLIB/std/debug.zig	/notes: [actual_size][]const u8 = undefined/;"	field
nothing_changed	$ZIGLIB/std/target.zig	/const nothing_changed = mem.eql(usize, &old, &set.ints)/;"	constant
notif	$ZIGLIB/std/os/linux/seccomp.zig	/notif: u16/;"	field
notif_addfd	$ZIGLIB/std/os/linux/seccomp.zig	/^pub const notif_addfd = extern struct {$/;"	struct
notif_resp	$ZIGLIB/std/os/linux/seccomp.zig	/notif_resp: u16/;"	field
notif_sizes	$ZIGLIB/std/os/linux/seccomp.zig	/^pub const notif_sizes = extern struct {$/;"	struct
notified	$ZIGLIB/std/Thread/Futex.zig	/var notified = WaitList{}/;"	variable
now_sec	$ZIGLIB/std/crypto/tls/Client.zig	/const now_sec = std.time.timestamp()/;"	constant
nr_wait	$ZIGLIB/std/os/linux/io_uring.zig	/const nr_wait = try ring.submit()/;"	constant
nread	$ZIGLIB/std/os.zig	/var nread: usize = undefined/;"	variable
nreaders	$ZIGLIB/std/c/netbsd.zig	/nreaders: c_uint = 0/;"	field
nreloc	$ZIGLIB/std/macho.zig	/nreloc: u32 = 0/;"	field
ns_list	$ZIGLIB/std/net.zig	/var ns_list = std.ArrayList(Address).init(rc.ns.allocator)/;"	variable
ns_per_day	$ZIGLIB/std/time.zig	/^pub const ns_per_day = 24 * ns_per_hour/;"	constant
ns_per_hour	$ZIGLIB/std/time.zig	/^pub const ns_per_hour = 60 * ns_per_min/;"	constant
ns_per_min	$ZIGLIB/std/time.zig	/^pub const ns_per_min = 60 * ns_per_s/;"	constant
ns_per_ms	$ZIGLIB/std/time.zig	/^pub const ns_per_ms = 1000 * ns_per_us/;"	constant
ns_per_s	$ZIGLIB/std/time.zig	/^pub const ns_per_s = 1000 * ns_per_ms/;"	constant
ns_per_us	$ZIGLIB/std/time.zig	/^pub const ns_per_us = 1000/;"	constant
ns_per_week	$ZIGLIB/std/time.zig	/^pub const ns_per_week = 7 * ns_per_day/;"	constant
ns_remaining	$ZIGLIB/std/fmt.zig	/var ns_remaining = data.ns/;"	variable
nsa_clause_bug	$ZIGLIB/std/target/amdgpu.zig	/nsa_clause_bug/;"	field
nsa_encoding	$ZIGLIB/std/target/amdgpu.zig	/nsa_encoding/;"	field
nsa_max_size_13	$ZIGLIB/std/target/amdgpu.zig	/nsa_max_size_13/;"	field
nsa_max_size_5	$ZIGLIB/std/target/amdgpu.zig	/nsa_max_size_5/;"	field
nsa_to_vmem_bug	$ZIGLIB/std/target/amdgpu.zig	/nsa_to_vmem_bug/;"	field
nsects	$ZIGLIB/std/macho.zig	/nsects: u32 = 0/;"	field
nsignals	$ZIGLIB/std/os/linux.zig	/nsignals: isize/;"	field
nswap	$ZIGLIB/std/os/linux.zig	/nswap: isize/;"	field
nsyms	$ZIGLIB/std/macho.zig	/nsyms: u32 = 0/;"	field
nt_name	$ZIGLIB/std/os/windows.zig	/var nt_name = UNICODE_STRING{$/;"	variable
nt_path	$ZIGLIB/std/os/windows.zig	/const nt_path = try GetFinalPathNameByHandle(handle, .{ .volume_name = .Nt }, &buffer)/;"	constant
ntfs	$ZIGLIB/std/time/epoch.zig	/^pub const ntfs = windows/;"	constant
ntoc	$ZIGLIB/std/macho.zig	/ntoc: u32 = 0/;"	field
ntools	$ZIGLIB/std/macho.zig	/ntools: u32/;"	field
nul_handle	$ZIGLIB/std/child_process.zig	/const nul_handle = if (any_ignore)$/;"	constant
null	$ZIGLIB/std/crypto/Certificate.zig	/null = 5/;"	field
nullTerminatedString	$ZIGLIB/std/mem.zig	/nullTerminatedString: [:0]const u8/;"	field
null_node	$ZIGLIB/std/zig/Parse.zig	/^const null_node: Node.Index = 0/;"	constant
null_term_slice	$ZIGLIB/std/fmt.zig	/const null_term_slice: [:0]const u8 = "\\x00hello\\x00"/;"	constant
null_writer	$ZIGLIB/std/io.zig	/^pub const null_writer = @as(NullWriter, .{ .context = {} })/;"	constant
numMasks	$ZIGLIB/std/bit_set.zig	/fn numMasks(bit_length: usize) usize {$/;"	function
num_buf	$ZIGLIB/std/meta.zig	/var num_buf: [128]u8 = undefined/;"	variable
num_bytes	$ZIGLIB/std/os/windows.zig	/var num_bytes: DWORD = undefined/;"	variable
num_codegens	$ZIGLIB/std/compress/deflate/huffman_bit_writer.zig	/var num_codegens: u32 = 0/;"	variable
num_codes	$ZIGLIB/std/compress/deflate/decompressor.zig	/^const num_codes = 19/;"	constant
num_digits	$ZIGLIB/std/fmt/parse_float/decimal.zig	/num_digits: usize/;"	field
num_digits_whole	$ZIGLIB/std/fmt.zig	/var num_digits_whole = if (float_decimal.exp > 0) @intCast(usize, float_decimal.exp) else 0/;"	variable
num_digits_whole_no_pad	$ZIGLIB/std/fmt.zig	/var num_digits_whole_no_pad = math.min(num_digits_whole, float_decimal.digits.len)/;"	variable
num_direct_bits	$ZIGLIB/std/compress/lzma/decode.zig	/const num_direct_bits = @intCast(u5, (pos_slot >> 1) - 1)/;"	constant
num_entries	$ZIGLIB/std/array_hash_map.zig	/const num_entries = 20/;"	constant
num_entries_removed	$ZIGLIB/std/os/windows.zig	/var num_entries_removed: u32 = 0/;"	variable
num_increments	$ZIGLIB/std/Thread/Mutex.zig	/const num_increments = 1000/;"	constant
num_indexed_entries	$ZIGLIB/std/array_hash_map.zig	/const num_indexed_entries = 20/;"	constant
num_info	$ZIGLIB/std/os/linux/bpf/btf_ext.zig	/num_info: u32/;"	field
num_iterations	$ZIGLIB/std/Thread/Futex.zig	/const num_iterations = 4/;"	constant
num_links	$ZIGLIB/std/compress/deflate/decompressor.zig	/var num_links = @as(u32, 1) << @intCast(u5, max - huffman_chunk_bits)/;"	variable
num_literals	$ZIGLIB/std/compress/deflate/huffman_bit_writer.zig	/var num_literals: u32 = 0/;"	variable
num_lock_active	$ZIGLIB/std/os/uefi/protocols/simple_text_input_ex_protocol.zig	/num_lock_active: bool/;"	field
num_masks	$ZIGLIB/std/bit_set.zig	/const num_masks = numMasks(self.bit_length)/;"	constant
num_missing_items	$ZIGLIB/std/testing.zig	/const num_missing_items = expected.len - (window_start + expected_window.len)/;"	constant
num_new_digits	$ZIGLIB/std/fmt/parse_float/decimal.zig	/const num_new_digits = self.numberOfDigitsLeftShift(shift)/;"	constant
num_offsets	$ZIGLIB/std/compress/deflate/huffman_bit_writer.zig	/var num_offsets: u32 = 0/;"	variable
num_powers	$ZIGLIB/std/fmt/parse_float/convert_slow.zig	/^const num_powers = 19/;"	constant
num_readers	$ZIGLIB/std/Thread/RwLock.zig	/const num_readers: usize = 4/;"	constant
num_reads	$ZIGLIB/std/Thread/RwLock.zig	/const num_reads: usize = num_writes * 2/;"	constant
num_runs	$ZIGLIB/std/Thread/Condition.zig	/var num_runs: usize = 1/;"	variable
num_stack_frames	$ZIGLIB/std/testing/failing_allocator.zig	/const num_stack_frames = if (std.debug.sys_can_stack_trace) 16 else 0/;"	constant
num_threads	$ZIGLIB/std/Thread/Semaphore.zig	/const num_threads = 3/;"	constant
num_unindexed_entries	$ZIGLIB/std/array_hash_map.zig	/const num_unindexed_entries = 20/;"	constant
num_words	$ZIGLIB/std/pdb.zig	/const num_words = try stream.readIntLittle(u32)/;"	constant
num_writers	$ZIGLIB/std/Thread/RwLock.zig	/const num_writers: usize = 2/;"	constant
num_writes	$ZIGLIB/std/Thread/RwLock.zig	/const num_writes: usize = 10000/;"	constant
numa_node	$ZIGLIB/std/os/linux/bpf.zig	/numa_node: u32/;"	field
number	$ZIGLIB/std/meta/trait.zig	/number: u8/;"	field
numberOfDigitsLeftShift	$ZIGLIB/std/fmt/parse_float/decimal.zig	/pub fn numberOfDigitsLeftShift(self: *Self, shift: usize) usize {$/;"	function
number_is_integer	$ZIGLIB/std/json.zig	/number_is_integer: bool/;"	field
number_literal	$ZIGLIB/std/zig/tokenizer.zig	/number_literal/;"	field
number_of_aux_symbols	$ZIGLIB/std/coff.zig	/number_of_aux_symbols: u8/;"	field
number_of_linenumbers	$ZIGLIB/std/coff.zig	/number_of_linenumbers: u16/;"	field
number_of_narrow_glyphs	$ZIGLIB/std/os/uefi/protocols/hii.zig	/number_of_narrow_glyphs: u16/;"	field
number_of_pages	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/number_of_pages: u64/;"	field
number_of_relocations	$ZIGLIB/std/coff.zig	/number_of_relocations: u16/;"	field
number_of_rva_and_sizes	$ZIGLIB/std/coff.zig	/number_of_rva_and_sizes: u32/;"	field
number_of_sections	$ZIGLIB/std/coff.zig	/number_of_sections: u16/;"	field
number_of_symbols	$ZIGLIB/std/coff.zig	/number_of_symbols: u32/;"	field
number_of_table_entries	$ZIGLIB/std/os/uefi/tables/system_table.zig	/number_of_table_entries: usize/;"	field
number_of_wide_glyphs	$ZIGLIB/std/os/uefi/protocols/hii.zig	/number_of_wide_glyphs: u16/;"	field
numbers	$ZIGLIB/std/mem.zig	/const numbers = bytesAsSlice(u32, bytes[runtime_zero..])/;"	constant
numer	$ZIGLIB/std/c/darwin.zig	/numer: u32/;"	field
numerator	$ZIGLIB/std/sort.zig	/numerator: usize/;"	field
numerator_step	$ZIGLIB/std/sort.zig	/numerator_step: usize/;"	field
numeric	$ZIGLIB/std/time/epoch.zig	/pub fn numeric(self: Month) u4 {$/;"	function
numeric_string	$ZIGLIB/std/dwarf/ATE.zig	/^pub const numeric_string = 0xb/;"	constant
nundefsym	$ZIGLIB/std/macho.zig	/nundefsym: u32 = 0/;"	field
nvcl	$ZIGLIB/std/target.zig	/nvcl/;"	field
nvcsw	$ZIGLIB/std/os/linux.zig	/nvcsw: isize/;"	field
nvdata	$ZIGLIB/std/os/uefi/protocols/simple_network_protocol.zig	/pub fn nvdata(self: *const SimpleNetworkProtocol, read_write: bool, offset: usize, buffer_size: usize, buffer: [*]u8) Status {$/;"	function
nvic	$ZIGLIB/std/target/csky.zig	/nvic/;"	field
nvptx	$ZIGLIB/std/target.zig	/nvptx/;"	field
nvptx64	$ZIGLIB/std/target.zig	/nvptx64/;"	field
nvram_access_size	$ZIGLIB/std/os/uefi/protocols/simple_network_protocol.zig	/nvram_access_size: u32/;"	field
nvram_size	$ZIGLIB/std/os/uefi/protocols/simple_network_protocol.zig	/nvram_size: u32/;"	field
nwritten	$ZIGLIB/std/os.zig	/var nwritten: usize = undefined/;"	variable
o_file	$ZIGLIB/std/debug.zig	/const o_file = try fs.cwd().openFile(o_file_path, .{ .intended_io_mode = .blocking })/;"	constant
o_file_di	$ZIGLIB/std/debug.zig	/const o_file_di = &o_file_info.di/;"	constant
o_file_info	$ZIGLIB/std/debug.zig	/var o_file_info = self.ofiles.get(o_file_path) orelse$/;"	variable
o_file_path	$ZIGLIB/std/debug.zig	/const o_file_path = mem.sliceTo(self.strings[symbol.ofile..], 0)/;"	constant
o_key_pad	$ZIGLIB/std/crypto/hmac.zig	/o_key_pad: [Hash.block_length]u8/;"	field
o_threshold	$ZIGLIB/std/math/expm1.zig	/const o_threshold: f64 = 7.09782712893383973096e+02/;"	constant
obj_basename	$ZIGLIB/std/debug.zig	/const obj_basename = fs.path.basename(module.obj_file_name)/;"	constant
obj_di	$ZIGLIB/std/debug.zig	/const obj_di = try self.allocator.create(ModuleDebugInfo)/;"	constant
obj_file_name	$ZIGLIB/std/pdb.zig	/obj_file_name: []u8/;"	field
obj_format	$ZIGLIB/std/Build/CheckObjectStep.zig	/^obj_format: std.Target.ObjectFormat/;"	field
obj_get	$ZIGLIB/std/os/linux/bpf.zig	/obj_get/;"	field
obj_get_info_by_fd	$ZIGLIB/std/os/linux/bpf.zig	/obj_get_info_by_fd/;"	field
obj_id	$ZIGLIB/std/c/darwin.zig	/obj_id: u32/;"	field
obj_name_len	$ZIGLIB/std/os/linux/bpf.zig	/^const obj_name_len = 16/;"	constant
obj_pin	$ZIGLIB/std/os/linux/bpf.zig	/obj_pin/;"	field
obj_step	$ZIGLIB/std/Build.zig	/const obj_step = CompileStep.create(b, .{$/;"	constant
object	$ZIGLIB/std/json.zig	/var object = &p.stack.items[p.stack.items.len - 2].Object/;"	variable
objectField	$ZIGLIB/std/json/write_stream.zig	/pub fn objectField(self: *Self, name: []const u8) !void {$/;"	function
object_format	$ZIGLIB/std/zig/CrossTarget.zig	/object_format: ?[]const u8 = null/;"	field
object_id	$ZIGLIB/std/c/darwin.zig	/object_id: vm32_object_id_t/;"	field
object_id_full	$ZIGLIB/std/c/darwin.zig	/object_id_full: vm_object_id_t/;"	field
object_identifier	$ZIGLIB/std/crypto/Certificate.zig	/object_identifier = 6/;"	field
object_pointer	$ZIGLIB/std/dwarf/AT.zig	/^pub const object_pointer = 0x64/;"	constant
object_src	$ZIGLIB/std/Build/CompileStep.zig	/^object_src: []const u8/;"	field
objname	$ZIGLIB/std/os/darwin.zig	/var objname: std.c.mach_port_t = undefined/;"	variable
occur	$ZIGLIB/std/tz.zig	/const occur: i64 = if (legacy) try reader.readIntBig(i32) else try reader.readIntBig(i64)/;"	constant
occurrence	$ZIGLIB/std/tz.zig	/occurrence: i48/;"	field
octal	$ZIGLIB/std/zig/number_literal.zig	/octal = 8/;"	field
octeon	$ZIGLIB/std/target/mips.zig	/pub const octeon = CpuModel{$/;"	constant
octeon+	$ZIGLIB/std/target/mips.zig	/pub const @"octeon+" = CpuModel{$/;"	constant
octetstring	$ZIGLIB/std/crypto/Certificate.zig	/octetstring = 4/;"	field
off_i	$ZIGLIB/std/crypto/tls/Client.zig	/var off_i: usize = 0/;"	variable
off_in_copy	$ZIGLIB/std/os.zig	/var off_in_copy = @bitCast(i64, off_in)/;"	variable
off_out_copy	$ZIGLIB/std/os.zig	/var off_out_copy = @bitCast(i64, off_out)/;"	variable
off_t	$ZIGLIB/std/os/linux/x86_64.zig	/^pub const off_t = i64/;"	constant
offset	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/offset: u64/;"	field
offsetCode	$ZIGLIB/std/compress/deflate/token.zig	/^pub fn offsetCode(off: u32) u32 {$/;"	function
offsetPtr	$ZIGLIB/std/hash/cityhash.zig	/^inline fn offsetPtr(ptr: [*]const u8, offset: usize) [*]const u8 {$/;"	function
offsetTrue	$ZIGLIB/std/fmt/parse_float/FloatStream.zig	/^pub fn offsetTrue(self: FloatStream) usize {$/;"	function
offset_3f_bug	$ZIGLIB/std/target/amdgpu.zig	/offset_3f_bug/;"	field
offset_at_end	$ZIGLIB/std/mem.zig	/const offset_at_end = @bitSizeOf(BackingType) - @bitSizeOf(PackedType)/;"	constant
offset_base	$ZIGLIB/std/compress/deflate/huffman_bit_writer.zig	/^var offset_base = [_]u32{$/;"	variable
offset_code	$ZIGLIB/std/compress/deflate/huffman_bit_writer.zig	/var offset_code: u32 = 4/;"	variable
offset_code_count	$ZIGLIB/std/compress/deflate/deflate_const.zig	/^pub const offset_code_count = 30/;"	constant
offset_codes	$ZIGLIB/std/compress/deflate/token.zig	/^var offset_codes = [_]u32{$/;"	variable
offset_encoding	$ZIGLIB/std/compress/deflate/huffman_bit_writer.zig	/var offset_encoding = &self.fixed_offset_encoding/;"	variable
offset_extended	$ZIGLIB/std/dwarf.zig	/pub const offset_extended = 0x05/;"	constant
offset_extended_sf	$ZIGLIB/std/dwarf.zig	/pub const offset_extended_sf = 0x11/;"	constant
offset_extra_bits	$ZIGLIB/std/compress/deflate/huffman_bit_writer.zig	/^var offset_extra_bits = [_]i8{$/;"	variable
offset_freq	$ZIGLIB/std/compress/deflate/huffman_bit_writer.zig	/var offset_freq = [1]u16{0} ** deflate_const.offset_code_count/;"	variable
offset_halves	$ZIGLIB/std/os/linux.zig	/const offset_halves = splitValue64(offset)/;"	constant
offset_mask	$ZIGLIB/std/compress/deflate/token.zig	/^const offset_mask = (1 << length_shift) - 1/;"	constant
offset_pair	$ZIGLIB/std/dwarf.zig	/pub const offset_pair = 0x04/;"	constant
offset_u	$ZIGLIB/std/os/linux.zig	/const offset_u = @bitCast(u64, offset)/;"	constant
offsets	$ZIGLIB/std/crypto/aes_ocb.zig	/var offsets: [wb]Block align(16) = undefined/;"	variable
ofile	$ZIGLIB/std/debug.zig	/var ofile: u32 = undefined/;"	variable
ofiles	$ZIGLIB/std/debug.zig	/ofiles: OFileTable/;"	field
oflag	$ZIGLIB/std/os/linux.zig	/oflag: tcflag_t/;"	field
oflags	$ZIGLIB/std/os.zig	/oflags: wasi.oflags_t/;"	field
oflags_t	$ZIGLIB/std/os/wasi.zig	/^pub const oflags_t = u16/;"	constant
ofmt	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/const ofmt = cross_target.ofmt orelse Target.ObjectFormat.default(os.tag, cpu.arch)/;"	constant
ohash	$ZIGLIB/std/crypto/hmac.zig	/var ohash = Hash.init(.{})/;"	variable
oid_bytes	$ZIGLIB/std/crypto/Certificate.zig	/const oid_bytes = bytes[element.slice.start..element.slice.end]/;"	constant
oid_elem	$ZIGLIB/std/crypto/Certificate.zig	/const oid_elem = try der.Element.parse(cert_bytes, extension.slice.start)/;"	constant
oid_filters	$ZIGLIB/std/crypto/tls.zig	/oid_filters = 48/;"	field
oland	$ZIGLIB/std/target/amdgpu.zig	/pub const oland = CpuModel{$/;"	constant
old_actual_len	$ZIGLIB/std/heap/WasmAllocator.zig	/const old_actual_len = @max(buf.len + @sizeOf(usize), buf_align)/;"	constant
old_addr_end	$ZIGLIB/std/heap/PageAllocator.zig	/const old_addr_end = base_addr + buf_unaligned.len/;"	constant
old_allocation	$ZIGLIB/std/bit_set.zig	/const old_allocation = (self.masks - 1)[0..(self.masks - 1)[0]]/;"	constant
old_big_slot_pages	$ZIGLIB/std/heap/WasmAllocator.zig	/const old_big_slot_pages = math.ceilPowerOfTwoAssert(usize, old_bigpages_needed)/;"	constant
old_bigpages_needed	$ZIGLIB/std/heap/WasmAllocator.zig	/const old_bigpages_needed = bigPagesNeeded(old_actual_len)/;"	constant
old_bit	$ZIGLIB/std/atomic/Atomic.zig	/const old_bit: u8 = switch (@sizeOf(T)) {$/;"	constant
old_byte_slice	$ZIGLIB/std/mem/Allocator.zig	/const old_byte_slice = mem.sliceAsBytes(old_mem)/;"	constant
old_capacity	$ZIGLIB/std/hash_map.zig	/const old_capacity = self.capacity()/;"	constant
old_elem	$ZIGLIB/std/priority_queue.zig	/const old_elem: T = self.items[update_index]/;"	constant
old_file	$ZIGLIB/std/os/linux/io_uring.zig	/const old_file = try std.fs.cwd().createFile(old_path, .{ .truncate = true, .mode = 0o666 })/;"	constant
old_flags	$ZIGLIB/std/os.zig	/var old_flags: wasi.lookupflags_t = 0/;"	variable
old_index	$ZIGLIB/std/priority_dequeue.zig	/const old_index = blk: {$/;"	constant
old_item	$ZIGLIB/std/bounded_array.zig	/const old_item = self.get(i)/;"	constant
old_key	$ZIGLIB/std/hash_map.zig	/const old_key = &self.keys()[idx]/;"	constant
old_len	$ZIGLIB/std/bounded_array.zig	/const old_len = self.len/;"	constant
old_mask	$ZIGLIB/std/bit_set.zig	/const old_mask = (~@as(MaskInt, 0)) >> @intCast(ShiftInt, old_padding_bits)/;"	constant
old_masks	$ZIGLIB/std/bit_set.zig	/const old_masks = numMasks(old_len)/;"	constant
old_memory	$ZIGLIB/std/array_list.zig	/const old_memory = self.allocatedSlice()/;"	constant
old_padding_bits	$ZIGLIB/std/bit_set.zig	/const old_padding_bits = old_masks * @bitSizeOf(MaskInt) - old_len/;"	constant
old_path	$ZIGLIB/std/os/linux/io_uring.zig	/const old_path = "test_io_uring_renameat_old"/;"	constant
old_path_c	$ZIGLIB/std/os.zig	/const old_path_c = try toPosixPath(old_path)/;"	constant
old_path_w	$ZIGLIB/std/os/windows.zig	/const old_path_w = try sliceToPrefixedFileW(old_path)/;"	constant
old_pos	$ZIGLIB/std/zig/render.zig	/const old_pos = pos/;"	constant
old_prog_fd	$ZIGLIB/std/os/linux/bpf.zig	/old_prog_fd: fd_t/;"	field
old_shelf_count	$ZIGLIB/std/segmented_list.zig	/const old_shelf_count = @intCast(ShelfIndex, self.dynamic_segments.len)/;"	constant
old_size_aligned	$ZIGLIB/std/heap/PageAllocator.zig	/const old_size_aligned = mem.alignForward(buf_unaligned.len, mem.page_size)/;"	constant
old_slice	$ZIGLIB/std/heap/general_purpose_allocator.zig	/const old_slice = slice/;"	constant
old_small_class	$ZIGLIB/std/heap/WasmAllocator.zig	/const old_small_class = math.log2(old_small_slot_size) - min_class/;"	constant
old_small_slot_size	$ZIGLIB/std/heap/WasmAllocator.zig	/const old_small_slot_size = math.ceilPowerOfTwoAssert(usize, old_actual_len)/;"	constant
old_state	$ZIGLIB/std/Thread/Futex.zig	/const old_state = self.state/;"	constant
old_val	$ZIGLIB/std/hash_map.zig	/const old_val = &self.values()[idx]/;"	constant
older_version	$ZIGLIB/std/SemanticVersion.zig	/const older_version = .{ .major = 0, .minor = 8, .patch = 0, .pre = "dev.874" }/;"	constant
oldfstat	$ZIGLIB/std/os/linux/syscalls.zig	/oldfstat = 28/;"	field
oldksa	$ZIGLIB/std/os/linux.zig	/var oldksa: k_sigaction = undefined/;"	variable
oldksa_arg	$ZIGLIB/std/os/linux.zig	/const oldksa_arg = if (oact != null) @ptrToInt(&oldksa) else 0/;"	constant
oldlen	$ZIGLIB/std/bounded_array.zig	/const oldlen = self.len/;"	constant
oldlstat	$ZIGLIB/std/os/linux/syscalls.zig	/oldlstat = 84/;"	field
oldmask	$ZIGLIB/std/os/linux/x86_64.zig	/oldmask: usize/;"	field
oldolduname	$ZIGLIB/std/os/linux/syscalls.zig	/oldolduname = 59/;"	field
oldstat	$ZIGLIB/std/os/linux/syscalls.zig	/oldstat = 18/;"	field
olduname	$ZIGLIB/std/os/linux/syscalls.zig	/olduname = 109/;"	field
omit_frame_pointer	$ZIGLIB/std/Build/CompileStep.zig	/^omit_frame_pointer: ?bool = null/;"	field
onNextTick	$ZIGLIB/std/event/loop.zig	/pub fn onNextTick(self: *Loop, node: *NextTickNode) void {$/;"	function
on_curve	$ZIGLIB/std/crypto/pcurves/secp256k1.zig	/const on_curve = @boolToInt(x3B.equivalent(yy))/;"	constant
once	$ZIGLIB/std/once.zig	/^pub fn once(comptime f: fn () void) Once(f) {$/;"	function
one_before	$ZIGLIB/std/fmt/errol.zig	/const one_before = @intToPtr([*]u8, @ptrToInt(&float_decimal.digits[0]) - 1)/;"	constant
one_byte_stream	$ZIGLIB/std/io/buffered_reader.zig	/var one_byte_stream = OneByteReadReader.init(str)/;"	variable
one_if_true	$ZIGLIB/std/simd.zig	/const one_if_true = @select(CountIntType, vec, @splat(len, @as(CountIntType, 1)), @splat(len, @as(CountIntType, 0)))/;"	constant
one_line	$ZIGLIB/std/zig/render.zig	/const one_line = tree.tokensOnSameLine(lbracket, rbracket)/;"	constant
one_signal	$ZIGLIB/std/Thread/Condition.zig	/const one_signal = 1 << 16/;"	constant
one_trace_size	$ZIGLIB/std/heap/general_purpose_allocator.zig	/const one_trace_size = @sizeOf(usize) * stack_n/;"	constant
one_waiter	$ZIGLIB/std/Thread/Condition.zig	/const one_waiter = 1/;"	constant
ones	$ZIGLIB/std/leb128.zig	/const ones = @as(S, -1)/;"	constant
onetimeauth	$ZIGLIB/std/crypto.zig	/^pub const onetimeauth = struct {$/;"	struct
only_elem	$ZIGLIB/std/zig/render.zig	/const only_elem = array_init.ast.elements[0]/;"	constant
only_section	$ZIGLIB/std/Build/InstallRawStep.zig	/only_section: ?[]const u8 = null/;"	field
onstack	$ZIGLIB/std/c/freebsd.zig	/onstack: u64/;"	field
opFn	$ZIGLIB/std/simd.zig	/fn opFn(a: VecType, b: VecType) VecType {$/;"	function
op_i	$ZIGLIB/std/Build/CheckObjectStep.zig	/var op_i: usize = 1/;"	variable
op_size	$ZIGLIB/std/dwarf.zig	/const op_size = try leb.readULEB128(u64, in)/;"	constant
op_stack	$ZIGLIB/std/Build/CheckObjectStep.zig	/var op_stack = std.ArrayList(enum { add, sub, mod, mul }).init(gpa)/;"	variable
op_token	$ZIGLIB/std/zig/render.zig	/const op_token = main_tokens[node]/;"	constant
opcode	$ZIGLIB/std/wasm.zig	/^pub fn opcode(op: Opcode) u8 {$/;"	function
opcode_base	$ZIGLIB/std/dwarf.zig	/const opcode_base = try in.readByte()/;"	constant
open	$ZIGLIB/std/os/uefi/protocols/file_protocol.zig	/pub fn open(self: *const FileProtocol, new_handle: **const FileProtocol, file_name: [*:0]const u16, open_mode: u64, attributes: u64) Status {$/;"	function
openDir	$ZIGLIB/std/fs.zig	/pub fn openDir(self: Dir, sub_path: []const u8, args: OpenDirOptions) OpenError!Dir {$/;"	function
openDirAbsolute	$ZIGLIB/std/fs.zig	/^pub fn openDirAbsolute(absolute_path: []const u8, flags: Dir.OpenDirOptions) File.OpenError!Dir {$/;"	function
openDirAbsoluteW	$ZIGLIB/std/fs.zig	/^pub fn openDirAbsoluteW(absolute_path_c: [*:0]const u16, flags: Dir.OpenDirOptions) File.OpenError!Dir {$/;"	function
openDirAbsoluteZ	$ZIGLIB/std/fs.zig	/^pub fn openDirAbsoluteZ(absolute_path_c: [*:0]const u8, flags: Dir.OpenDirOptions) File.OpenError!Dir {$/;"	function
openDirAccessMaskW	$ZIGLIB/std/fs.zig	/fn openDirAccessMaskW(self: Dir, sub_path_w: [*:0]const u16, access_mask: u32, no_follow: bool) OpenError!Dir {$/;"	function
openDirFlagsZ	$ZIGLIB/std/fs.zig	/fn openDirFlagsZ(self: Dir, sub_path_c: [*:0]const u8, flags: u32) OpenError!Dir {$/;"	function
openDirW	$ZIGLIB/std/fs.zig	/pub fn openDirW(self: Dir, sub_path_w: [*:0]const u16, args: OpenDirOptions, iterable: bool) OpenError!Dir {$/;"	function
openDirWasi	$ZIGLIB/std/fs.zig	/pub fn openDirWasi(self: Dir, sub_path: []const u8, args: OpenDirOptions) OpenError!Dir {$/;"	function
openDirZ	$ZIGLIB/std/fs.zig	/pub fn openDirZ(self: Dir, sub_path_c: [*:0]const u8, args: OpenDirOptions, iterable: bool) OpenError!Dir {$/;"	function
openDwarfDebugInfo	$ZIGLIB/std/dwarf.zig	/^pub fn openDwarfDebugInfo(di: *DwarfInfo, allocator: mem.Allocator) !void {$/;"	function
openFile	$ZIGLIB/std/fs.zig	/pub fn openFile(self: Dir, sub_path: []const u8, flags: File.OpenFlags) File.OpenError!File {$/;"	function
openFileAbsolute	$ZIGLIB/std/fs.zig	/^pub fn openFileAbsolute(absolute_path: []const u8, flags: File.OpenFlags) File.OpenError!File {$/;"	function
openFileAbsoluteW	$ZIGLIB/std/fs.zig	/^pub fn openFileAbsoluteW(absolute_path_w: []const u16, flags: File.OpenFlags) File.OpenError!File {$/;"	function
openFileAbsoluteZ	$ZIGLIB/std/fs.zig	/^pub fn openFileAbsoluteZ(absolute_path_c: [*:0]const u8, flags: File.OpenFlags) File.OpenError!File {$/;"	function
openFileW	$ZIGLIB/std/fs.zig	/pub fn openFileW(self: Dir, sub_path_w: []const u16, flags: File.OpenFlags) File.OpenError!File {$/;"	function
openFileWasi	$ZIGLIB/std/fs.zig	/pub fn openFileWasi(self: Dir, sub_path: []const u8, flags: File.OpenFlags) File.OpenError!File {$/;"	function
openFileZ	$ZIGLIB/std/fs.zig	/pub fn openFileZ(self: Dir, sub_path: [*:0]const u8, flags: File.OpenFlags) File.OpenError!File {$/;"	function
openIterableDir	$ZIGLIB/std/fs.zig	/pub fn openIterableDir(self: Dir, sub_path: []const u8, args: OpenDirOptions) OpenError!IterableDir {$/;"	function
openIterableDirAbsolute	$ZIGLIB/std/fs.zig	/^pub fn openIterableDirAbsolute(absolute_path: []const u8, flags: Dir.OpenDirOptions) File.OpenError!IterableDir {$/;"	function
openIterableDirAbsoluteW	$ZIGLIB/std/fs.zig	/^pub fn openIterableDirAbsoluteW(absolute_path_c: [*:0]const u16, flags: Dir.OpenDirOptions) File.OpenError!IterableDir {$/;"	function
openIterableDirAbsoluteZ	$ZIGLIB/std/fs.zig	/^pub fn openIterableDirAbsoluteZ(absolute_path_c: [*:0]const u8, flags: Dir.OpenDirOptions) File.OpenError!IterableDir {$/;"	function
openOptionsFromFlagsWasi	$ZIGLIB/std/os.zig	/^fn openOptionsFromFlagsWasi(fd: fd_t, oflag: u32) OpenError!WasiOpenOptions {$/;"	function
openOptionsFromFlagsWindows	$ZIGLIB/std/os.zig	/^fn openOptionsFromFlagsWindows(flags: u32) windows.OpenFileOptions {$/;"	function
openProtocol	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/openProtocol: *const fn (handle: Handle, protocol: *align(8) const Guid, interface: *?*anyopaque, agent_handle: ?Handle, controller_handle: ?Handle, attributes: OpenProtocolAttributes) callconv(.C) Status/;"	field
openProtocolInformation	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/openProtocolInformation: *const fn (handle: Handle, protocol: *align(8) const Guid, entry_buffer: *[*]ProtocolInformationEntry, entry_count: *usize) callconv(.C) Status/;"	field
openProtocolSt	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/pub fn openProtocolSt(self: *BootServices, comptime protocol: type, handle: Handle) !*protocol {$/;"	function
openSelfDebugInfo	$ZIGLIB/std/debug.zig	/^pub fn openSelfDebugInfo(allocator: mem.Allocator) OpenSelfDebugInfoError!DebugInfo {$/;"	function
openSelfExe	$ZIGLIB/std/fs.zig	/^pub fn openSelfExe(flags: File.OpenFlags) OpenSelfExeError!File {$/;"	function
openVolume	$ZIGLIB/std/os/uefi/protocols/simple_file_system_protocol.zig	/pub fn openVolume(self: *const SimpleFileSystemProtocol, root: **const FileProtocol) Status {$/;"	function
openW	$ZIGLIB/std/os.zig	/^pub fn openW(file_path_w: []const u16, flags: u32, perm: mode_t) OpenError!fd_t {$/;"	function
openZ	$ZIGLIB/std/os/posix_spawn.zig	/pub fn openZ(self: *Actions, fd: fd_t, path: [*:0]const u8, flags: u32, mode: mode_t) Error!void {$/;"	function
open_by_handle_at	$ZIGLIB/std/os/linux/syscalls.zig	/open_by_handle_at = Linux + 340/;"	field
open_count	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/open_count: u32/;"	field
open_flags	$ZIGLIB/std/os/linux/bpf.zig	/open_flags: u32/;"	field
open_reparse_point	$ZIGLIB/std/fs.zig	/const open_reparse_point: w.DWORD = if (no_follow) w.FILE_OPEN_REPARSE_POINT else 0x0/;"	constant
open_sym	$ZIGLIB/std/os.zig	/const open_sym = if (builtin.os.tag == .linux and builtin.link_libc)$/;"	constant
open_tree	$ZIGLIB/std/os/linux/syscalls.zig	/open_tree = Linux + 428/;"	field
openat	$ZIGLIB/std/os/linux/syscalls.zig	/openat = Linux + 288/;"	field
openat2	$ZIGLIB/std/os/linux/syscalls.zig	/openat2 = Linux + 437/;"	field
openatW	$ZIGLIB/std/os.zig	/^pub fn openatW(dir_fd: fd_t, file_path_w: []const u16, flags: u32, mode: mode_t) OpenError!fd_t {$/;"	function
openatWasi	$ZIGLIB/std/os.zig	/^pub fn openatWasi($/;"	function
openatZ	$ZIGLIB/std/os.zig	/^pub fn openatZ(dir_fd: fd_t, file_path: [*:0]const u8, flags: u32, mode: mode_t) OpenError!fd_t {$/;"	function
openat_sym	$ZIGLIB/std/os.zig	/const openat_sym = if (builtin.os.tag == .linux and builtin.link_libc)$/;"	constant
openbsd	$ZIGLIB/std/target.zig	/openbsd/;"	field
opencl	$ZIGLIB/std/target.zig	/opencl/;"	field
openvms	$ZIGLIB/std/time/epoch.zig	/^pub const openvms = -3506716800/;"	constant
operTable	$ZIGLIB/std/zig/Parse.zig	/^const operTable = std.enums.directEnumArrayDefault(Token.Tag, OperInfo, .{ .prec = -1, .tag = Node.Tag.root }, 0, .{$/;"	constant
oper_token	$ZIGLIB/std/zig/Parse.zig	/const oper_token = p.nextToken()/;"	constant
operand	$ZIGLIB/std/math/big/int.zig	/const operand = init(&limbs, scalar).toConst()/;"	constant
operating_system	$ZIGLIB/std/compress/gzip.zig	/operating_system: u8/;"	field
ops_len	$ZIGLIB/std/os/linux.zig	/ops_len: u8/;"	field
opt_abi_text	$ZIGLIB/std/zig/CrossTarget.zig	/const opt_abi_text = it.next()/;"	constant
opt_code	$ZIGLIB/std/os/linux.zig	/opt_code: u32/;"	field
opt_debug_abbrev	$ZIGLIB/std/debug.zig	/var opt_debug_abbrev: ?macho.section_64 = null/;"	variable
opt_debug_addr	$ZIGLIB/std/debug.zig	/var opt_debug_addr: ?macho.section_64 = null/;"	variable
opt_debug_frame	$ZIGLIB/std/debug.zig	/var opt_debug_frame: ?macho.section_64 = null/;"	variable
opt_debug_info	$ZIGLIB/std/debug.zig	/var opt_debug_info: ?macho.section_64 = null/;"	variable
opt_debug_line	$ZIGLIB/std/debug.zig	/var opt_debug_line: ?macho.section_64 = null/;"	variable
opt_debug_line_str	$ZIGLIB/std/debug.zig	/var opt_debug_line_str: ?macho.section_64 = null/;"	variable
opt_debug_loclists	$ZIGLIB/std/debug.zig	/var opt_debug_loclists: ?macho.section_64 = null/;"	variable
opt_debug_names	$ZIGLIB/std/debug.zig	/var opt_debug_names: ?macho.section_64 = null/;"	variable
opt_debug_ranges	$ZIGLIB/std/debug.zig	/var opt_debug_ranges: ?macho.section_64 = null/;"	variable
opt_debug_rnglists	$ZIGLIB/std/debug.zig	/var opt_debug_rnglists: ?macho.section_64 = null/;"	variable
opt_debug_str	$ZIGLIB/std/debug.zig	/var opt_debug_str: ?macho.section_64 = null/;"	variable
opt_debug_str_offsets	$ZIGLIB/std/debug.zig	/var opt_debug_str_offsets: ?macho.section_64 = null/;"	variable
opt_head	$ZIGLIB/std/atomic/queue.zig	/const opt_head = self.head/;"	constant
opt_line_info	$ZIGLIB/std/debug.zig	/const opt_line_info = try self.debug_data.pdb.getLineNumberInfo($/;"	constant
opt_non_block	$ZIGLIB/std/net.zig	/const opt_non_block = if (std.io.is_async) os.SOCK.NONBLOCK else 0/;"	constant
opt_val	$ZIGLIB/std/os/linux.zig	/opt_val: u32/;"	field
opteron	$ZIGLIB/std/target/x86.zig	/pub const opteron = CpuModel{$/;"	constant
opteron_sse3	$ZIGLIB/std/target/x86.zig	/pub const opteron_sse3 = CpuModel{$/;"	constant
optimal_parallel_blocks	$ZIGLIB/std/crypto/aes/soft.zig	/pub const optimal_parallel_blocks = 1/;"	constant
optimal_transfer_length_granularity	$ZIGLIB/std/os/uefi/protocols/block_io_protocol.zig	/optimal_transfer_length_granularity: u32/;"	field
optimize	$ZIGLIB/std/fmt/parse_float/parse_float.zig	/^const optimize = true/;"	constant
option	$ZIGLIB/std/c/netbsd.zig	/option: extern union {$/;"	field
option_name	$ZIGLIB/std/Build/EmulatableRunStep.zig	/const option_name = "hide-foreign-warnings"/;"	constant
option_ptr	$ZIGLIB/std/Build.zig	/const option_ptr = self.user_input_options.getPtr(name) orelse return null/;"	constant
optional	$ZIGLIB/std/mem.zig	/optional: ?*u8/;"	field
optional_heap_handle	$ZIGLIB/std/heap.zig	/const optional_heap_handle = @atomicLoad(?HeapHandle, &self.heap_handle, .SeqCst)/;"	constant
optional_int	$ZIGLIB/std/mem.zig	/optional_int: ?u8/;"	field
optional_sentinel_ptr	$ZIGLIB/std/mem.zig	/const optional_sentinel_ptr = @ptrCast(?[*:5]u16, &array)/;"	constant
optional_type	$ZIGLIB/std/zig/Ast.zig	/optional_type/;"	field
options	$ZIGLIB/std/std.zig	/^pub const options = struct {$/;"	struct
options_directory	$ZIGLIB/std/Build/OptionsStep.zig	/const options_directory = self.builder.pathFromRoot($/;"	constant
options_file	$ZIGLIB/std/Build/OptionsStep.zig	/const options_file = try fs.path.join($/;"	constant
options_override	$ZIGLIB/std/std.zig	/^const options_override = if (@hasDecl(root, "std_options")) root.std_options else struct {}/;"	constant
opts	$ZIGLIB/std/os.zig	/const opts = try openOptionsFromFlagsWasi(dir_fd, flags)/;"	constant
orBlocks	$ZIGLIB/std/crypto/aes/soft.zig	/pub inline fn orBlocks(block1: Block, block2: Block) Block {$/;"	function
or_null	$ZIGLIB/std/event/channel.zig	/or_null: *std.atomic.Queue(*std.atomic.Queue(GetNode).Node).Node/;"	field
or_null_node	$ZIGLIB/std/event/channel.zig	/var or_null_node = std.atomic.Queue(*std.atomic.Queue(GetNode).Node).Node{ .data = undefined }/;"	variable
or_null_queue	$ZIGLIB/std/event/channel.zig	/or_null_queue: std.atomic.Queue(*std.atomic.Queue(GetNode).Node)/;"	field
order	$ZIGLIB/std/treap.zig	/const order = compare(key, current.key)/;"	constant
orderAbs	$ZIGLIB/std/math/big/rational.zig	/pub fn orderAbs(a: Rational, b: Rational) !math.Order {$/;"	function
orderAgainstScalar	$ZIGLIB/std/math/big/int.zig	/pub fn orderAgainstScalar(lhs: Const, scalar: anytype) math.Order {$/;"	function
orderIgnoreCase	$ZIGLIB/std/ascii.zig	/^pub fn orderIgnoreCase(lhs: []const u8, rhs: []const u8) std.math.Order {$/;"	function
orderSwap	$ZIGLIB/std/crypto/pcurves/common.zig	/pub fn orderSwap(s: [encoded_length]u8) [encoded_length]u8 {$/;"	function
order_i32	$ZIGLIB/std/sort.zig	/fn order_i32(context: void, lhs: i32, rhs: i32) math.Order {$/;"	function
order_u32	$ZIGLIB/std/sort.zig	/fn order_u32(context: void, lhs: u32, rhs: u32) math.Order {$/;"	function
ordered	$ZIGLIB/std/array_hash_map.zig	/ordered/;"	field
orderedRemove	$ZIGLIB/std/multi_array_list.zig	/pub fn orderedRemove(self: *Self, index: usize) void {$/;"	function
orderedRemoveAdapted	$ZIGLIB/std/array_hash_map.zig	/pub fn orderedRemoveAdapted(self: *Self, key: anytype, ctx: anytype) bool {$/;"	function
orderedRemoveAt	$ZIGLIB/std/array_hash_map.zig	/pub fn orderedRemoveAt(self: *Self, index: usize) void {$/;"	function
orderedRemoveAtContext	$ZIGLIB/std/array_hash_map.zig	/pub fn orderedRemoveAtContext(self: *Self, index: usize, ctx: Context) void {$/;"	function
orderedRemoveContext	$ZIGLIB/std/array_hash_map.zig	/pub fn orderedRemoveContext(self: *Self, key: K, ctx: Context) bool {$/;"	function
orderedRemoveContextAdapted	$ZIGLIB/std/array_hash_map.zig	/pub fn orderedRemoveContextAdapted(self: *Self, key: anytype, key_ctx: anytype, ctx: Context) bool {$/;"	function
ordering	$ZIGLIB/std/dwarf/AT.zig	/^pub const ordering = 0x09/;"	constant
ordinal	$ZIGLIB/std/Build/CheckObjectStep.zig	/const ordinal = @divTrunc(@bitCast(i16, sym.n_desc), macho.N_SYMBOL_RESOLVER)/;"	constant
ordinal_number	$ZIGLIB/std/coff.zig	/ordinal_number: u16/;"	field
orelse	$ZIGLIB/std/zig/Ast.zig	/@"orelse"/;"	field
organizationIdentifier	$ZIGLIB/std/crypto/Certificate.zig	/organizationIdentifier/;"	field
organizationName	$ZIGLIB/std/crypto/Certificate.zig	/organizationName/;"	field
organizationalUnitName	$ZIGLIB/std/crypto/Certificate.zig	/organizationalUnitName/;"	field
orig_list	$ZIGLIB/std/array_list.zig	/var orig_list = ArrayList(u8).init(a)/;"	variable
original	$ZIGLIB/std/hash_map.zig	/var original = AutoHashMap(i32, i32).init(std.testing.allocator)/;"	variable
original_depth	$ZIGLIB/std/json.zig	/const original_depth = tokens.stackUsed()/;"	constant
original_err	$ZIGLIB/std/child_process.zig	/var original_err = switch (no_path_err) {$/;"	variable
original_i	$ZIGLIB/std/unicode.zig	/const original_i = it.i/;"	constant
original_len	$ZIGLIB/std/io/reader.zig	/const original_len = array_list.items.len/;"	constant
os_data	$ZIGLIB/std/fs/watch.zig	/os_data: OsData/;"	field
os_flags	$ZIGLIB/std/fs.zig	/var os_flags: u32 = os.O.CLOEXEC/;"	variable
os_has_arc4random	$ZIGLIB/std/crypto/tlcsprng.zig	/^const os_has_arc4random = builtin.link_libc and @hasDecl(std.c, "arc4random_buf")/;"	constant
os_has_fork	$ZIGLIB/std/crypto/tlcsprng.zig	/^const os_has_fork = switch (builtin.os.tag) {$/;"	constant
os_is_native	$ZIGLIB/std/zig/CrossTarget.zig	/const os_is_native = mem.eql(u8, os_name, "native")/;"	constant
os_is_non_native	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/const os_is_non_native = cross_target.os_tag != null/;"	constant
os_match	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/const os_match = host.target.os.tag == candidate.target.os.tag/;"	constant
os_mode	$ZIGLIB/std/fs.zig	/const os_mode = switch (flags.mode) {$/;"	constant
os_name	$ZIGLIB/std/zig/CrossTarget.zig	/os_name: ?[]const u8 = null/;"	field
os_tag	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/const os_tag = @tagName(result.target.os.tag)/;"	constant
os_unfair_lock	$ZIGLIB/std/c/darwin.zig	/^pub const os_unfair_lock = extern struct {$/;"	struct
os_unfair_lock_t	$ZIGLIB/std/c/darwin.zig	/^pub const os_unfair_lock_t = *os_unfair_lock/;"	constant
os_ver	$ZIGLIB/std/zig/system/windows.zig	/const os_ver: u16 = @intCast(u16, version_info.dwMajorVersion & 0xff) << 8 |$/;"	constant
os_version_max	$ZIGLIB/std/zig/CrossTarget.zig	/^os_version_max: ?OsVersion = null/;"	field
os_version_min	$ZIGLIB/std/zig/CrossTarget.zig	/^os_version_min: ?OsVersion = null/;"	field
oso_close	$ZIGLIB/std/debug.zig	/oso_close/;"	field
oso_open	$ZIGLIB/std/debug.zig	/oso_open/;"	field
ospeed	$ZIGLIB/std/os/linux.zig	/ospeed: speed_t/;"	field
other	$ZIGLIB/std/target.zig	/other/;"	field
otherName	$ZIGLIB/std/crypto/Certificate.zig	/otherName = 0/;"	field
other_base	$ZIGLIB/std/simd.zig	/const other_base = @Vector(4, u32){ 55, 66, 77, 88 }/;"	constant
other_bytes	$ZIGLIB/std/multi_array_list.zig	/const other_bytes = gpa.alignedAlloc($/;"	constant
other_hh	$ZIGLIB/std/heap.zig	/const other_hh = @cmpxchgStrong(?HeapHandle, &self.heap_handle, null, hh, .SeqCst, .SeqCst) orelse break :blk hh/;"	constant
other_lock	$ZIGLIB/compiler_rt/atomics.zig	/const other_lock: type = enum(usize) { Unlocked = 0, Locked }/;"	enum
other_name	$ZIGLIB/std/fs/path.zig	/const other_name = it.next().?/;"	constant
other_slice	$ZIGLIB/std/multi_array_list.zig	/const other_slice = other.slice()/;"	constant
other_step	$ZIGLIB/std/Build/CompileStep.zig	/other_step: *CompileStep/;"	field
other_v	$ZIGLIB/std/target.zig	/const other_v: V = other_set.ints/;"	constant
oublock	$ZIGLIB/std/os/linux.zig	/oublock: isize/;"	field
our_end	$ZIGLIB/std/crypto/tls.zig	/our_end: usize = 0/;"	field
out1	$ZIGLIB/std/crypto/pcurves/common.zig	/var out1: Word = undefined/;"	variable
out2	$ZIGLIB/std/crypto/pcurves/common.zig	/var out2: XLimbs = undefined/;"	variable
out3	$ZIGLIB/std/crypto/pcurves/common.zig	/var out3: XLimbs = undefined/;"	variable
out4	$ZIGLIB/std/crypto/pcurves/common.zig	/var out4: Limbs = undefined/;"	variable
out5	$ZIGLIB/std/crypto/pcurves/common.zig	/var out5: Limbs = undefined/;"	variable
outIndex	$ZIGLIB/std/json.zig	/var outIndex: usize = 0/;"	variable
outPtr	$ZIGLIB/std/mem.zig	/const outPtr = bytesAsValue(u32, inSlice)/;"	constant
outSlice	$ZIGLIB/std/mem.zig	/const outSlice = sliceAsBytes(inSlice)/;"	constant
out_basename	$ZIGLIB/std/Build/TranslateCStep.zig	/^out_basename: []const u8/;"	field
out_batch	$ZIGLIB/std/os/linux/bpf.zig	/out_batch: u64/;"	field
out_bits	$ZIGLIB/std/io/bit_reader.zig	/var out_bits: usize = undefined/;"	variable
out_bits_total	$ZIGLIB/std/io/bit_reader.zig	/var out_bits_total = @as(usize, 0)/;"	variable
out_block_it	$ZIGLIB/std/crypto/blake3.zig	/var out_block_it = ChunkIterator.init(output, 2 * OUT_LEN)/;"	variable
out_buf	$ZIGLIB/std/os/darwin.zig	/var out_buf = buf[0..]/;"	variable
out_buff	$ZIGLIB/std/coff.zig	/const out_buff = try allocator.alloc(SectionHeader, section_headers.len)/;"	constant
out_buffer	$ZIGLIB/std/os/windows.zig	/var out_buffer: [PATH_MAX_WIDE]u16 = undefined/;"	variable
out_buffer_aligned	$ZIGLIB/std/os/windows.zig	/const out_buffer_aligned = mem.alignInSlice(out_buffer, @alignOf(OBJECT_NAME_INFORMATION)) orelse return error.NameTooLong/;"	constant
out_buffer_len	$ZIGLIB/std/os/windows.zig	/const out_buffer_len = std.math.cast(ULONG, out_buffer_aligned.len * 2) orelse std.math.maxInt(ULONG)/;"	constant
out_cleartext	$ZIGLIB/std/crypto/tls/Client.zig	/const out_cleartext = [_]u8{$/;"	constant
out_count	$ZIGLIB/std/c/haiku.zig	/out_count: u32/;"	field
out_dir	$ZIGLIB/std/Build/CompileStep.zig	/const out_dir = fs.path.dirname(output_path) orelse "."/;"	constant
out_fbs	$ZIGLIB/std/fifo.zig	/var out_fbs = std.io.fixedBufferStream(&out_buf)/;"	variable
out_fd	$ZIGLIB/std/fs/file.zig	/const out_fd = self.handle/;"	constant
out_file	$ZIGLIB/std/io/c_writer.zig	/const out_file = std.c.fopen(filename, "w") orelse return error.UnableToOpenTestFile/;"	constant
out_filename	$ZIGLIB/std/Build/CompileStep.zig	/^out_filename: []const u8/;"	field
out_h_filename	$ZIGLIB/std/Build/CompileStep.zig	/^out_h_filename: []const u8/;"	field
out_handshake	$ZIGLIB/std/crypto/tls/Client.zig	/const out_handshake =$/;"	constant
out_idx	$ZIGLIB/std/base64.zig	/var out_idx: usize = 0/;"	variable
out_index	$ZIGLIB/std/unicode.zig	/var out_index: usize = 0/;"	variable
out_len	$ZIGLIB/std/os/windows.zig	/const out_len = std.unicode.utf16leToUtf8(out_buffer, path[start_index..]) catch unreachable/;"	constant
out_lib_filename	$ZIGLIB/std/Build/CompileStep.zig	/^out_lib_filename: []const u8/;"	field
out_off	$ZIGLIB/std/fs/file.zig	/var out_off = out_offset/;"	variable
out_path	$ZIGLIB/std/fs.zig	/const out_path = try os.getFdPath(h_file, &buffer)/;"	constant
out_pdb_filename	$ZIGLIB/std/Build/CompileStep.zig	/^out_pdb_filename: []const u8/;"	field
out_port	$ZIGLIB/std/os/darwin.zig	/var out_port: std.c.mach_port_name_t = undefined/;"	variable
out_ptr	$ZIGLIB/std/os/windows.zig	/const out_ptr = if (out) |o| o.ptr else null/;"	constant
out_slice	$ZIGLIB/std/crypto/ecdsa.zig	/const out_slice = out[out.len - expected_len ..]/;"	constant
out_word_it	$ZIGLIB/std/crypto/blake3.zig	/var out_word_it = ChunkIterator.init(out_block, 4)/;"	variable
outer_extensions	$ZIGLIB/std/crypto/Certificate.zig	/const outer_extensions = try der.Element.parse(cert_bytes, pub_key_info.slice.end)/;"	constant
outline_atomics	$ZIGLIB/std/target/aarch64.zig	/outline_atomics/;"	field
outptr	$ZIGLIB/std/Uri.zig	/var outptr: usize = 0/;"	variable
output	$ZIGLIB/std/mem.zig	/var output: [29]u8 = undefined/;"	variable
outputIndent	$ZIGLIB/std/json.zig	/pub fn outputIndent($/;"	function
outputString	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/pub fn outputString(self: *const SimpleTextOutputProtocol, msg: [*:0]const u16) Status {$/;"	function
outputUnicodeEscape	$ZIGLIB/std/json.zig	/^fn outputUnicodeEscape($/;"	function
output_block_counter	$ZIGLIB/std/crypto/blake3.zig	/var output_block_counter: usize = 0/;"	variable
output_buf	$ZIGLIB/std/os/windows.zig	/var output_buf: [MIN_SIZE * 4]u8 align(@alignOf(MOUNTMGR_MOUNT_POINTS)) = undefined/;"	variable
output_buffer	$ZIGLIB/std/Progress.zig	/^output_buffer: [100]u8 = undefined/;"	field
output_dir	$ZIGLIB/std/Build/WriteFileStep.zig	/const output_dir = try fs.path.join(self.builder.allocator, &[_][]const u8{$/;"	constant
output_dir_nl	$ZIGLIB/std/Build/CompileStep.zig	/const output_dir_nl = try builder.execFromStep(zig_args.items, &self.step)/;"	constant
output_file	$ZIGLIB/std/Build/TranslateCStep.zig	/^output_file: std.Build.GeneratedFile/;"	field
output_h_path_source	$ZIGLIB/std/Build/CompileStep.zig	/^output_h_path_source: GeneratedFile/;"	field
output_item	$ZIGLIB/std/zig/Parse.zig	/const output_item = try p.parseAsmOutputItem()/;"	constant
output_lib_path_source	$ZIGLIB/std/Build/CompileStep.zig	/^output_lib_path_source: GeneratedFile/;"	field
output_mode	$ZIGLIB/std/zig.zig	/output_mode: std.builtin.OutputMode/;"	field
output_path	$ZIGLIB/std/Build/TranslateCStep.zig	/const output_path = mem.trimRight(u8, output_path_nl, "\\r\\n")/;"	constant
output_path_nl	$ZIGLIB/std/Build/TranslateCStep.zig	/const output_path_nl = try self.builder.execFromStep(argv_list.items, &self.step)/;"	constant
output_path_source	$ZIGLIB/std/Build/CompileStep.zig	/^output_path_source: GeneratedFile/;"	field
output_pdb_path_source	$ZIGLIB/std/Build/CompileStep.zig	/^output_pdb_path_source: GeneratedFile/;"	field
outputs	$ZIGLIB/std/zig/Ast.zig	/outputs: []const Node.Index/;"	field
outputs_end	$ZIGLIB/std/zig/Ast.zig	/const outputs_end: usize = for (info.items) |item, i| {$/;"	constant
outsize	$ZIGLIB/std/Uri.zig	/var outsize: usize = 0/;"	variable
over	$ZIGLIB/std/dwarf/OP.zig	/^pub const over = 0x14/;"	constant
overflow	$ZIGLIB/std/zig/number_literal.zig	/var overflow = false/;"	variable
overflowBit	$ZIGLIB/std/math.zig	/const overflowBit = @as(PromotedType, 1) << info.bits/;"	constant
overflowExponent	$ZIGLIB/compiler_rt/truncf.zig	/const overflowExponent = srcExpBias + dstInfExp - dstExpBias/;"	constant
overflow_arg_area	$ZIGLIB/std/builtin.zig	/overflow_arg_area: *anyopaque/;"	field
overflow_shift	$ZIGLIB/std/math/pow.zig	/const overflow_shift = math.floatExponentBits(T) + 1/;"	constant
overhead_len	$ZIGLIB/std/crypto/tls/Client.zig	/overhead_len: usize/;"	field
overlapped	$ZIGLIB/std/os/windows.zig	/const overlapped: ?*OVERLAPPED = if (offset) |off| blk: {$/;"	constant
overlapped_data	$ZIGLIB/std/os/windows.zig	/var overlapped_data: OVERLAPPED = undefined/;"	variable
overlapped_init	$ZIGLIB/std/event/loop.zig	/pub const overlapped_init = switch (builtin.os.tag) {$/;"	constant
overrideZigLibDir	$ZIGLIB/std/Build/CompileStep.zig	/^pub fn overrideZigLibDir(self: *CompileStep, dir_path: []const u8) void {$/;"	function
override_dest_dir	$ZIGLIB/std/Build/CompileStep.zig	/^override_dest_dir: ?InstallDir/;"	field
override_lib_dir	$ZIGLIB/std/Build/CompileStep.zig	/^override_lib_dir: ?[]const u8/;"	field
override_mode	$ZIGLIB/std/fs.zig	/override_mode: ?File.Mode = null/;"	field
override_return	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const override_return = @intToPtr(fn (regs: *PtRegs, rc: u64) c_long, 58)/;"	constant
override_source_builder	$ZIGLIB/std/Build/InstallFileStep.zig	/^override_source_builder: ?*std.Build = null/;"	field
overrun	$ZIGLIB/std/os/linux.zig	/overrun: u32/;"	field
oversize	$ZIGLIB/std/heap.zig	/const oversize = try allocator.alignedAlloc(u32, null, 5)/;"	constant
ownedfp	$ZIGLIB/std/c/freebsd.zig	/ownedfp: u64/;"	field
owner	$ZIGLIB/std/c/netbsd.zig	/owner: usize = 0/;"	field
owner_count	$ZIGLIB/std/c/haiku.zig	/owner_count: i32 = 0/;"	field
ownsPtr	$ZIGLIB/std/heap.zig	/pub fn ownsPtr(self: *FixedBufferAllocator, ptr: [*]u8) bool {$/;"	function
ownsSlice	$ZIGLIB/std/heap.zig	/pub fn ownsSlice(self: *FixedBufferAllocator, slice: []u8) bool {$/;"	function
p0_limbs	$ZIGLIB/std/math/big/int.zig	/const p0_limbs = a0.len + b0.len/;"	constant
p2_limbs	$ZIGLIB/std/math/big/int.zig	/const p2_limbs = math.min(limbs_after_split, a1.len + b1.len)/;"	constant
p5600	$ZIGLIB/std/target/mips.zig	/pub const p5600 = CpuModel{$/;"	constant
pCertInfo	$ZIGLIB/std/os/windows/crypt32.zig	/pCertInfo: CERT_INFO/;"	field
pImageHeaderHash	$ZIGLIB/std/os/windows.zig	/pImageHeaderHash: PVOID/;"	field
pUnused	$ZIGLIB/std/os/windows.zig	/pUnused: PVOID/;"	field
p_align	$ZIGLIB/std/elf.zig	/p_align: Elf64_Xword/;"	field
p_filesz	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/const p_filesz = elfInt(is_64, need_bswap, ph32.p_filesz, ph64.p_filesz)/;"	constant
p_flags	$ZIGLIB/std/elf.zig	/p_flags: Elf64_Word/;"	field
p_memsz	$ZIGLIB/std/elf.zig	/p_memsz: Elf64_Xword/;"	field
p_neg	$ZIGLIB/std/crypto/25519/edwards25519.zig	/const p_neg = p.neg()/;"	constant
p_offset	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/const p_offset = elfInt(is_64, need_bswap, ph32.p_offset, ph64.p_offset)/;"	constant
p_paddr	$ZIGLIB/std/elf.zig	/p_paddr: Elf64_Addr/;"	field
p_root	$ZIGLIB/std/crypto/25519/field.zig	/const p_root = e.mul(x2)/;"	constant
p_root_check	$ZIGLIB/std/crypto/25519/ristretto255.zig	/const p_root_check = vxx.add(u)/;"	constant
p_type	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/const p_type = elfInt(is_64, need_bswap, ph32.p_type, ph64.p_type)/;"	constant
p_vaddr	$ZIGLIB/std/elf.zig	/p_vaddr: Elf64_Addr/;"	field
pacbti	$ZIGLIB/std/target/arm.zig	/pacbti/;"	field
package_list_guid	$ZIGLIB/std/os/uefi/protocols/hii.zig	/package_list_guid: Guid/;"	field
package_list_length	$ZIGLIB/std/os/uefi/protocols/hii.zig	/package_list_length: u32/;"	field
packed_array	$ZIGLIB/std/packed_int_array.zig	/var packed_array = PackedArray.initAllTo(5)/;"	variable
packed_array_be	$ZIGLIB/std/packed_int_array.zig	/var packed_array_be = PackedArrayBe.init([_]u4{ 0, 1, 2, 3, 4, 5, 6, 7 })/;"	variable
packed_counter	$ZIGLIB/std/compress/xz/block.zig	/var packed_counter = std.io.countingReader(block_reader)/;"	variable
packed_decimal	$ZIGLIB/std/dwarf/ATE.zig	/^pub const packed_decimal = 0xa/;"	constant
packed_fp32_ops	$ZIGLIB/std/target/amdgpu.zig	/packed_fp32_ops/;"	field
packed_size	$ZIGLIB/std/compress/xz/block.zig	/var packed_size: ?u64 = null/;"	variable
packed_slice	$ZIGLIB/std/packed_int_array.zig	/var packed_slice = packed_array.slice(2, 5)/;"	variable
packed_slice_cast_2	$ZIGLIB/std/packed_int_array.zig	/const packed_slice_cast_2 = packed_array.sliceCast(u2)/;"	constant
packed_slice_cast_3	$ZIGLIB/std/packed_int_array.zig	/const packed_slice_cast_3 = packed_slice_cast_9.sliceCast(u3)/;"	constant
packed_slice_cast_4	$ZIGLIB/std/packed_int_array.zig	/const packed_slice_cast_4 = packed_slice_cast_2.sliceCast(u4)/;"	constant
packed_slice_cast_9	$ZIGLIB/std/packed_int_array.zig	/var packed_slice_cast_9 = packed_array.slice(0, (packed_array.len \/ 9) * 9).sliceCast(u9)/;"	variable
packed_slice_edge	$ZIGLIB/std/packed_int_array.zig	/const packed_slice_edge = packed_array.slice(8, 16)/;"	constant
packed_slice_empty	$ZIGLIB/std/packed_int_array.zig	/const packed_slice_empty = packed_slice.slice(0, 0)/;"	constant
packed_slice_le	$ZIGLIB/std/packed_int_array.zig	/var packed_slice_le = packed_array_be.sliceCastEndian(u4, .Little)/;"	variable
packed_slice_le_shift	$ZIGLIB/std/packed_int_array.zig	/var packed_slice_le_shift = packed_array_be.slice(1, 5).sliceCastEndian(u4, .Little)/;"	variable
packed_slice_three	$ZIGLIB/std/packed_int_array.zig	/const packed_slice_three = packed_slice_two.slice(1, 2)/;"	constant
packed_slice_two	$ZIGLIB/std/packed_int_array.zig	/const packed_slice_two = packed_slice.slice(0, 3)/;"	constant
packed_tid	$ZIGLIB/std/target/amdgpu.zig	/packed_tid/;"	field
packed_type	$ZIGLIB/std/dwarf/TAG.zig	/^pub const packed_type = 0x2d/;"	constant
packet	$ZIGLIB/std/os/uefi/protocols/udp6_protocol.zig	/packet: extern union {$/;"	field
packet_data	$ZIGLIB/std/os/uefi/protocols/managed_network_protocol.zig	/packet_data: [*]u8/;"	field
packet_length	$ZIGLIB/std/os/uefi/protocols/managed_network_protocol.zig	/packet_length: u32/;"	field
packets	$ZIGLIB/std/target/hexagon.zig	/packets/;"	field
pad0	$ZIGLIB/std/os/linux/x86_64.zig	/pad0: u16 = undefined/;"	field
pad2	$ZIGLIB/std/os/linux/powerpc.zig	/pad2: [3]i32/;"	field
pad_char	$ZIGLIB/std/base64.zig	/pad_char: ?u8/;"	field
pad_len	$ZIGLIB/std/tar.zig	/const pad_len = @intCast(usize, rounded_file_size - file_size)/;"	constant
pad_short_functions	$ZIGLIB/std/target/x86.zig	/pad_short_functions/;"	field
pad_to	$ZIGLIB/std/Build/InstallRawStep.zig	/pad_to: ?u64 = null/;"	field
padded	$ZIGLIB/std/crypto/isap.zig	/var padded = [_]u8{0} ** 8/;"	variable
padded_pthread_spin_t	$ZIGLIB/std/c/netbsd.zig	/^const padded_pthread_spin_t = switch (builtin.cpu.arch) {$/;"	constant
padding	$ZIGLIB/std/zig/render.zig	/const padding = column_widths[column_counter % row_size] - expr_widths[i]/;"	constant
padding1	$ZIGLIB/std/c/dragonfly.zig	/padding1: u16/;"	field
padding_bits	$ZIGLIB/std/bit_set.zig	/const padding_bits = num_masks * @bitSizeOf(MaskInt) - self.bit_length/;"	constant
padding_chars	$ZIGLIB/std/base64.zig	/var padding_chars: usize = 0/;"	variable
padding_len	$ZIGLIB/std/base64.zig	/const padding_len = acc_len \/ 2/;"	constant
paddle	$ZIGLIB/std/Thread/Futex.zig	/const paddle = &paddles[i]/;"	constant
paddles	$ZIGLIB/std/Thread/Futex.zig	/var paddles = [_]Paddle{.{}} ** num_threads/;"	variable
page	$ZIGLIB/std/packed_int_array.zig	/var page = try allocator.alloc(u8, std.mem.page_size)/;"	variable
pageSize	$ZIGLIB/std/macho.zig	/pageSize: u8/;"	field
page_allocator	$ZIGLIB/std/heap.zig	/^pub const page_allocator = if (builtin.target.isWasm())$/;"	constant
page_count	$ZIGLIB/std/heap/WasmPageAllocator.zig	/const page_count = nPages(len)/;"	constant
page_faults	$ZIGLIB/std/c/haiku.zig	/page_faults: u32/;"	field
page_idx	$ZIGLIB/std/heap/WasmPageAllocator.zig	/const page_idx = allocPages(page_count, log2_align) catch return null/;"	constant
page_index	$ZIGLIB/std/heap/WasmAllocator.zig	/const page_index = @wasmMemoryGrow(0, pow2_pages * pages_per_bigpage)/;"	constant
page_offset	$ZIGLIB/std/os/darwin.zig	/const page_offset = address % page_size/;"	constant
page_rva	$ZIGLIB/std/coff.zig	/page_rva: u32/;"	field
page_size	$ZIGLIB/std/wasm.zig	/^pub const page_size = 64 * 1024/;"	constant
pages_dirtied	$ZIGLIB/std/c/darwin.zig	/pages_dirtied: u32/;"	field
pages_per_bigpage	$ZIGLIB/std/heap/WasmAllocator.zig	/^const pages_per_bigpage = bigpage_size \/ wasm.page_size/;"	constant
pages_resident	$ZIGLIB/std/c/darwin.zig	/pages_resident: u32/;"	field
pages_reusable	$ZIGLIB/std/c/darwin.zig	/pages_reusable: u32/;"	field
pages_shared_now_private	$ZIGLIB/std/c/darwin.zig	/pages_shared_now_private: u32/;"	field
pages_swapped_out	$ZIGLIB/std/c/darwin.zig	/pages_swapped_out: u32/;"	field
pagezero_size	$ZIGLIB/std/Build/CompileStep.zig	/^pagezero_size: ?u64 = null/;"	field
pair	$ZIGLIB/std/process.zig	/const pair = mem.sliceTo(env, 0)/;"	constant
paired_vector_memops	$ZIGLIB/std/target/powerpc.zig	/paired_vector_memops/;"	field
pan_rwv	$ZIGLIB/std/target/aarch64.zig	/pan_rwv/;"	field
panic	$ZIGLIB/std/debug.zig	/^pub fn panic(comptime format: []const u8, args: anytype) noreturn {$/;"	function
panicExtra	$ZIGLIB/std/debug.zig	/^pub fn panicExtra($/;"	function
panicImpl	$ZIGLIB/std/debug.zig	/^pub fn panicImpl(trace: ?*const std.builtin.StackTrace, first_trace_addr: ?usize, msg: []const u8) noreturn {$/;"	function
panicInactiveUnionField	$ZIGLIB/std/builtin.zig	/^pub fn panicInactiveUnionField(active: anytype, wanted: @TypeOf(active)) noreturn {$/;"	function
panicOutOfBounds	$ZIGLIB/std/builtin.zig	/^pub fn panicOutOfBounds(index: usize, len: usize) noreturn {$/;"	function
panicSentinelMismatch	$ZIGLIB/std/builtin.zig	/^pub fn panicSentinelMismatch(expected: anytype, actual: @TypeOf(expected)) noreturn {$/;"	function
panicStartGreaterThanEnd	$ZIGLIB/std/builtin.zig	/^pub fn panicStartGreaterThanEnd(start: usize, end: usize) noreturn {$/;"	function
panicUnwrapError	$ZIGLIB/std/builtin.zig	/^pub fn panicUnwrapError(st: ?*StackTrace, err: anyerror) noreturn {$/;"	function
panic_messages	$ZIGLIB/std/builtin.zig	/^pub const panic_messages = struct {$/;"	struct
panic_mutex	$ZIGLIB/std/debug.zig	/^var panic_mutex = std.Thread.Mutex{}/;"	variable
panic_stage	$ZIGLIB/std/debug.zig	/^threadlocal var panic_stage: usize = 0/;"	variable
panicking	$ZIGLIB/std/debug.zig	/^var panicking = std.atomic.Atomic(u8).init(0)/;"	variable
parallel	$ZIGLIB/std/crypto/aes/soft.zig	/pub const parallel = struct {$/;"	struct
parallel_count	$ZIGLIB/std/crypto/modes.zig	/const parallel_count = BlockCipher.block.parallel.optimal_parallel_blocks/;"	constant
param	$ZIGLIB/std/zig/render.zig	/const param = fn_proto.ast.params[param_i]/;"	constant
param_i	$ZIGLIB/std/zig/render.zig	/var param_i: usize = 0/;"	variable
param_type	$ZIGLIB/std/zig/Ast.zig	/const param_type = it.fn_proto.ast.params[it.param_i]/;"	constant
parameters	$ZIGLIB/std/crypto/argon2.zig	/var parameters: [24]u8 = undefined/;"	variable
params	$ZIGLIB/std/zig/render.zig	/const params = tree.extra_data[datas[node].lhs..datas[node].rhs]/;"	constant
params_delimiter	$ZIGLIB/std/crypto/phc_encoding.zig	/^const params_delimiter = ","/;"	constant
params_elem	$ZIGLIB/std/crypto/Certificate.zig	/const params_elem = try der.Element.parse(cert_bytes, pub_key_algo_elem.slice.end)/;"	constant
params_end	$ZIGLIB/std/zig/Ast.zig	/params_end: Index/;"	field
params_range	$ZIGLIB/std/zig/Ast.zig	/const params_range = tree.extraData(data.lhs, Node.SubRange)/;"	constant
params_start	$ZIGLIB/std/zig/Ast.zig	/params_start: Index/;"	field
parent	$ZIGLIB/std/treap.zig	/var parent: ?*Node = undefined/;"	variable
parentCv	$ZIGLIB/std/crypto/blake3.zig	/^fn parentCv($/;"	function
parentIndex	$ZIGLIB/std/priority_dequeue.zig	/fn parentIndex(index: usize) usize {$/;"	function
parentOutput	$ZIGLIB/std/crypto/blake3.zig	/^fn parentOutput($/;"	function
parent_allocator	$ZIGLIB/std/heap/logging_allocator.zig	/parent_allocator: Allocator/;"	field
parent_dir	$ZIGLIB/std/testing.zig	/var parent_dir = cache_dir.makeOpenPath("tmp", .{}) catch$/;"	variable
parent_handle	$ZIGLIB/std/os/uefi/protocols/loaded_image_protocol.zig	/parent_handle: Handle/;"	field
parent_index	$ZIGLIB/std/priority_queue.zig	/var parent_index = ((child_index - 1) >> 1)/;"	variable
parent_nodes_remaining	$ZIGLIB/std/crypto/blake3.zig	/var parent_nodes_remaining: usize = self.cv_stack_len/;"	variable
parent_port_number	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/parent_port_number: u8/;"	field
parent_tid	$ZIGLIB/std/Thread.zig	/parent_tid: i32 = undefined/;"	field
parity	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/parity: Parity/;"	field
parityXi2	$ZIGLIB/compiler_rt/parity.zig	/^inline fn parityXi2(comptime T: type, a: T) i32 {$/;"	function
parse	$ZIGLIB/std/zig/system/linux.zig	/fn parse(arch: Target.Cpu.Arch, reader: anytype) anyerror!?Target.Cpu {$/;"	function
parse8Digits	$ZIGLIB/std/fmt/parse_float/parse.zig	/^fn parse8Digits(v_: u64) u64 {$/;"	function
parseAbbrevTable	$ZIGLIB/std/dwarf.zig	/fn parseAbbrevTable(di: *DwarfInfo, allocator: mem.Allocator, offset: u64) !AbbrevTable {$/;"	function
parseAddrSpace	$ZIGLIB/std/zig/Parse.zig	/^fn parseAddrSpace(p: *Parse) !Node.Index {$/;"	function
parseAlgorithm	$ZIGLIB/std/crypto/Certificate.zig	/^pub fn parseAlgorithm(bytes: []const u8, element: der.Element) !Algorithm {$/;"	function
parseAlgorithmCategory	$ZIGLIB/std/crypto/Certificate.zig	/^pub fn parseAlgorithmCategory(bytes: []const u8, element: der.Element) !AlgorithmCategory {$/;"	function
parseAlloc	$ZIGLIB/std/zig/string_literal.zig	/^pub fn parseAlloc(allocator: std.mem.Allocator, bytes: []const u8) ParseError![]u8 {$/;"	function
parseAndDump	$ZIGLIB/std/Build/CheckObjectStep.zig	/fn parseAndDump(bytes: []const u8, opts: Opts) ![]const u8 {$/;"	function
parseAndDumpSection	$ZIGLIB/std/Build/CheckObjectStep.zig	/fn parseAndDumpSection(section: std.wasm.Section, data: []const u8, writer: anytype) !void {$/;"	function
parseAsmInputItem	$ZIGLIB/std/zig/Parse.zig	/^fn parseAsmInputItem(p: *Parse) !Node.Index {$/;"	function
parseAsmOutputItem	$ZIGLIB/std/zig/Parse.zig	/^fn parseAsmOutputItem(p: *Parse) !Node.Index {$/;"	function
parseAssignExpr	$ZIGLIB/std/zig/Parse.zig	/^fn parseAssignExpr(p: *Parse) !Node.Index {$/;"	function
parseAttribute	$ZIGLIB/std/crypto/Certificate.zig	/^pub fn parseAttribute(bytes: []const u8, element: der.Element) !Attribute {$/;"	function
parseBitString	$ZIGLIB/std/crypto/Certificate.zig	/^pub fn parseBitString(cert: Certificate, elem: der.Element) !der.Element.Slice {$/;"	function
parseBitTree	$ZIGLIB/std/compress/lzma/decode/rangecoder.zig	/fn parseBitTree($/;"	function
parseBlock	$ZIGLIB/std/zig/Parse.zig	/^fn parseBlock(p: *Parse) !Node.Index {$/;"	function
parseBlockExpr	$ZIGLIB/std/zig/Parse.zig	/^fn parseBlockExpr(p: *Parse) Error!Node.Index {$/;"	function
parseBlockExprStatement	$ZIGLIB/std/zig/Parse.zig	/^fn parseBlockExprStatement(p: *Parse) !Node.Index {$/;"	function
parseBlockLabel	$ZIGLIB/std/zig/Parse.zig	/^fn parseBlockLabel(p: *Parse) TokenIndex {$/;"	function
parseBreakLabel	$ZIGLIB/std/zig/Parse.zig	/^fn parseBreakLabel(p: *Parse) !TokenIndex {$/;"	function
parseBuiltinCall	$ZIGLIB/std/zig/Parse.zig	/^fn parseBuiltinCall(p: *Parse) !Node.Index {$/;"	function
parseByteAlign	$ZIGLIB/std/zig/Parse.zig	/^fn parseByteAlign(p: *Parse) !Node.Index {$/;"	function
parseCStyleContainer	$ZIGLIB/std/zig/Parse.zig	/^fn parseCStyleContainer(p: *Parse) Error!bool {$/;"	function
parseCallconv	$ZIGLIB/std/zig/Parse.zig	/^fn parseCallconv(p: *Parse) !Node.Index {$/;"	function
parseCert	$ZIGLIB/std/crypto/Certificate/Bundle.zig	/^pub fn parseCert(cb: *Bundle, gpa: Allocator, decoded_start: u32, now_sec: i64) !void {$/;"	function
parseCharLiteral	$ZIGLIB/std/zig/string_literal.zig	/^pub fn parseCharLiteral(slice: []const u8) ParsedCharLiteral {$/;"	function
parseContainerDeclAuto	$ZIGLIB/std/zig/Parse.zig	/^fn parseContainerDeclAuto(p: *Parse) !Node.Index {$/;"	function
parseContainerMembers	$ZIGLIB/std/zig/Parse.zig	/^fn parseContainerMembers(p: *Parse) !Members {$/;"	function
parseCpuArch	$ZIGLIB/std/zig/CrossTarget.zig	/^pub fn parseCpuArch(args: ParseOptions) ?Target.Cpu.Arch {$/;"	function
parseCpuModel	$ZIGLIB/std/target.zig	/pub fn parseCpuModel(arch: Arch, cpu_name: []const u8) !*const Cpu.Model {$/;"	function
parseCurlySuffixExpr	$ZIGLIB/std/zig/Parse.zig	/^fn parseCurlySuffixExpr(p: *Parse) !Node.Index {$/;"	function
parseDbiStream	$ZIGLIB/std/pdb.zig	/pub fn parseDbiStream(self: *Pdb) !void {$/;"	function
parseDer	$ZIGLIB/std/crypto/Certificate.zig	/pub fn parseDer(pub_key: []const u8) !struct { modulus: []const u8, exponent: []const u8 } {$/;"	function
parseDie	$ZIGLIB/std/dwarf.zig	/fn parseDie($/;"	function
parseDumpFeatures	$ZIGLIB/std/Build/CheckObjectStep.zig	/fn parseDumpFeatures(reader: anytype, writer: anytype, data: []const u8) !void {$/;"	function
parseDumpInit	$ZIGLIB/std/Build/CheckObjectStep.zig	/fn parseDumpInit(reader: anytype, writer: anytype) !void {$/;"	function
parseDumpLimits	$ZIGLIB/std/Build/CheckObjectStep.zig	/fn parseDumpLimits(reader: anytype, writer: anytype) !void {$/;"	function
parseDumpNames	$ZIGLIB/std/Build/CheckObjectStep.zig	/fn parseDumpNames(reader: anytype, writer: anytype, data: []const u8) !void {$/;"	function
parseDumpProducers	$ZIGLIB/std/Build/CheckObjectStep.zig	/fn parseDumpProducers(reader: anytype, writer: anytype, data: []const u8) !void {$/;"	function
parseDumpType	$ZIGLIB/std/Build/CheckObjectStep.zig	/fn parseDumpType(comptime WasmType: type, reader: anytype, writer: anytype) !void {$/;"	function
parseEnum	$ZIGLIB/std/crypto/Certificate.zig	/^fn parseEnum(comptime E: type, bytes: []const u8, element: der.Element) !E {$/;"	function
parseErrorUnionExpr	$ZIGLIB/std/zig/Parse.zig	/^fn parseErrorUnionExpr(p: *Parse) !Node.Index {$/;"	function
parseEscapeSequence	$ZIGLIB/std/zig/string_literal.zig	/^pub fn parseEscapeSequence(slice: []const u8, offset: *usize) ParsedCharLiteral {$/;"	function
parseExpectingFamily	$ZIGLIB/std/net.zig	/pub fn parseExpectingFamily(name: []const u8, family: os.sa_family_t, port: u16) !Address {$/;"	function
parseExpr	$ZIGLIB/std/zig/Parse.zig	/^fn parseExpr(p: *Parse) Error!Node.Index {$/;"	function
parseExprPrecedence	$ZIGLIB/std/zig/Parse.zig	/^fn parseExprPrecedence(p: *Parse, min_prec: i32) Error!Node.Index {$/;"	function
parseExtensionId	$ZIGLIB/std/crypto/Certificate.zig	/^pub fn parseExtensionId(bytes: []const u8, element: der.Element) !ExtensionId {$/;"	function
parseFieldInit	$ZIGLIB/std/zig/Parse.zig	/^fn parseFieldInit(p: *Parse) !Node.Index {$/;"	function
parseFloat	$ZIGLIB/std/fmt/parse_float/parse_float.zig	/^pub fn parseFloat(comptime T: type, s: []const u8) ParseFloatError!T {$/;"	function
parseFnProto	$ZIGLIB/std/zig/Parse.zig	/^fn parseFnProto(p: *Parse) !Node.Index {$/;"	function
parseForExpr	$ZIGLIB/std/zig/Parse.zig	/^fn parseForExpr(p: *Parse) !Node.Index {$/;"	function
parseForStatement	$ZIGLIB/std/zig/Parse.zig	/^fn parseForStatement(p: *Parse) !Node.Index {$/;"	function
parseForTypeExpr	$ZIGLIB/std/zig/Parse.zig	/^fn parseForTypeExpr(p: *Parse) !Node.Index {$/;"	function
parseFormValue	$ZIGLIB/std/dwarf.zig	/^fn parseFormValue(allocator: mem.Allocator, in_stream: anytype, form_id: u64, endian: std.builtin.Endian, is_64: bool) anyerror!FormValue {$/;"	function
parseFormValueBlock	$ZIGLIB/std/dwarf.zig	/^fn parseFormValueBlock(allocator: mem.Allocator, in_stream: anytype, endian: std.builtin.Endian, size: usize) !FormValue {$/;"	function
parseFormValueBlockLen	$ZIGLIB/std/dwarf.zig	/^fn parseFormValueBlockLen(allocator: mem.Allocator, in_stream: anytype, size: usize) !FormValue {$/;"	function
parseFormValueConstant	$ZIGLIB/std/dwarf.zig	/^fn parseFormValueConstant(in_stream: anytype, signed: bool, endian: std.builtin.Endian, comptime size: i32) !FormValue {$/;"	function
parseFormValueRef	$ZIGLIB/std/dwarf.zig	/^fn parseFormValueRef(in_stream: anytype, endian: std.builtin.Endian, size: i32) !FormValue {$/;"	function
parseFree	$ZIGLIB/std/json.zig	/^pub fn parseFree(comptime T: type, value: T, options: ParseOptions) void {$/;"	function
parseIf	$ZIGLIB/std/zig/Parse.zig	/^fn parseIf(p: *Parse, comptime bodyParseFn: fn (p: *Parse) Error!Node.Index) !Node.Index {$/;"	function
parseIfExpr	$ZIGLIB/std/zig/Parse.zig	/^fn parseIfExpr(p: *Parse) !Node.Index {$/;"	function
parseInfOrNan	$ZIGLIB/std/fmt/parse_float/parse.zig	/^pub fn parseInfOrNan(comptime T: type, s: []const u8, negative: bool) ?T {$/;"	function
parseInfoStream	$ZIGLIB/std/pdb.zig	/pub fn parseInfoStream(self: *Pdb) !void {$/;"	function
parseInt	$ZIGLIB/std/fmt.zig	/^pub fn parseInt(comptime T: type, buf: []const u8, radix: u8) ParseIntError!T {$/;"	function
parseInt3	$ZIGLIB/std/http/Client.zig	/fn parseInt3(nnn: @Vector(3, u8)) u10 {$/;"	function
parseInternal	$ZIGLIB/std/json.zig	/^fn parseInternal($/;"	function
parseIp	$ZIGLIB/std/net.zig	/pub fn parseIp(name: []const u8, port: u16) !Address {$/;"	function
parseIp4	$ZIGLIB/std/net.zig	/pub fn parseIp4(buf: []const u8, port: u16) !Address {$/;"	function
parseIp6	$ZIGLIB/std/net.zig	/pub fn parseIp6(buf: []const u8, port: u16) !Address {$/;"	function
parseLabeledStatement	$ZIGLIB/std/zig/Parse.zig	/^fn parseLabeledStatement(p: *Parse) !Node.Index {$/;"	function
parseLinkSection	$ZIGLIB/std/zig/Parse.zig	/^fn parseLinkSection(p: *Parse) !Node.Index {$/;"	function
parseLoopStatement	$ZIGLIB/std/zig/Parse.zig	/^fn parseLoopStatement(p: *Parse) !Node.Index {$/;"	function
parseLzma	$ZIGLIB/std/compress/lzma2/decode.zig	/fn parseLzma($/;"	function
parseName	$ZIGLIB/std/macho.zig	/^fn parseName(name: *const [16]u8) []const u8 {$/;"	function
parseNamedCurve	$ZIGLIB/std/crypto/Certificate.zig	/^pub fn parseNamedCurve(bytes: []const u8, element: der.Element) !NamedCurve {$/;"	function
parseNoBraces	$ZIGLIB/std/os/windows.zig	/pub fn parseNoBraces(s: []const u8) !GUID {$/;"	function
parseNum	$ZIGLIB/std/SemanticVersion.zig	/^fn parseNum(text: []const u8) !usize {$/;"	function
parseNumber	$ZIGLIB/std/json.zig	/fn parseNumber(p: *Parser, n: std.meta.TagPayload(Token, Token.Number), input: []const u8, i: usize) !Value {$/;"	function
parseNumberLiteral	$ZIGLIB/std/zig/number_literal.zig	/^pub fn parseNumberLiteral(bytes: []const u8) Result {$/;"	function
parseOs	$ZIGLIB/std/zig/CrossTarget.zig	/^fn parseOs(result: *CrossTarget, diags: *ParseOptions.Diagnostics, text: []const u8) !void {$/;"	function
parseParamDeclList	$ZIGLIB/std/zig/Parse.zig	/^fn parseParamDeclList(p: *Parse) !SmallSpan {$/;"	function
parsePartialInfOrNan	$ZIGLIB/std/fmt/parse_float/parse.zig	/^fn parsePartialInfOrNan(comptime T: type, s: []const u8, negative: bool, n: *usize) ?T {$/;"	function
parsePartialNumber	$ZIGLIB/std/fmt/parse_float/parse.zig	/^fn parsePartialNumber(comptime T: type, s: []const u8, negative: bool, n: *usize) ?Number(T) {$/;"	function
parsePartialNumberBase	$ZIGLIB/std/fmt/parse_float/parse.zig	/^fn parsePartialNumberBase(comptime T: type, stream: *FloatStream, negative: bool, n: *usize, comptime info: ParseInfo) ?Number(T) {$/;"	function
parsePayload	$ZIGLIB/std/zig/Parse.zig	/^fn parsePayload(p: *Parse) !TokenIndex {$/;"	function
parsePlaceholder	$ZIGLIB/std/fmt.zig	/^fn parsePlaceholder(comptime str: anytype) Placeholder {$/;"	function
parsePrefixExpr	$ZIGLIB/std/zig/Parse.zig	/^fn parsePrefixExpr(p: *Parse) Error!Node.Index {$/;"	function
parsePrimaryExpr	$ZIGLIB/std/zig/Parse.zig	/^fn parsePrimaryExpr(p: *Parse) !Node.Index {$/;"	function
parsePrimaryTypeExpr	$ZIGLIB/std/zig/Parse.zig	/^fn parsePrimaryTypeExpr(p: *Parse) !Node.Index {$/;"	function
parsePtrIndexPayload	$ZIGLIB/std/zig/Parse.zig	/^fn parsePtrIndexPayload(p: *Parse) !TokenIndex {$/;"	function
parsePtrModifiers	$ZIGLIB/std/zig/Parse.zig	/^fn parsePtrModifiers(p: *Parse) !PtrModifiers {$/;"	function
parsePtrPayload	$ZIGLIB/std/zig/Parse.zig	/^fn parsePtrPayload(p: *Parse) !TokenIndex {$/;"	function
parseReadlinkPath	$ZIGLIB/std/os/windows.zig	/^fn parseReadlinkPath(path: []const u16, is_relative: bool, out_buffer: []u8) []u8 {$/;"	function
parseReverse	$ZIGLIB/std/compress/lzma/decode/rangecoder.zig	/pub fn parseReverse($/;"	function
parseReverseBitTree	$ZIGLIB/std/compress/lzma/decode/rangecoder.zig	/pub fn parseReverseBitTree($/;"	function
parseRoot	$ZIGLIB/std/zig/Parse.zig	/^pub fn parseRoot(p: *Parse) !void {$/;"	function
parseScientific	$ZIGLIB/std/fmt/parse_float/parse.zig	/^fn parseScientific(stream: *FloatStream) ?i64 {$/;"	function
parseStatement	$ZIGLIB/std/zig/Parse.zig	/^fn parseStatement(p: *Parse, allow_defer_var: bool) Error!Node.Index {$/;"	function
parseString	$ZIGLIB/std/json.zig	/fn parseString(p: *Parser, allocator: Allocator, s: std.meta.TagPayload(Token, Token.String), input: []const u8, i: usize) !Value {$/;"	function
parseSuffixExpr	$ZIGLIB/std/zig/Parse.zig	/^fn parseSuffixExpr(p: *Parse) !Node.Index {$/;"	function
parseSuffixOp	$ZIGLIB/std/zig/Parse.zig	/^fn parseSuffixOp(p: *Parse, lhs: Node.Index) !Node.Index {$/;"	function
parseSwitchItem	$ZIGLIB/std/zig/Parse.zig	/^fn parseSwitchItem(p: *Parse) !Node.Index {$/;"	function
parseSwitchProng	$ZIGLIB/std/zig/Parse.zig	/^fn parseSwitchProng(p: *Parse) !Node.Index {$/;"	function
parseSwitchProngList	$ZIGLIB/std/zig/Parse.zig	/^fn parseSwitchProngList(p: *Parse) !Node.SubRange {$/;"	function
parseSystemVersion	$ZIGLIB/std/zig/system/darwin/macos.zig	/^fn parseSystemVersion(buf: []const u8) !std.builtin.Version {$/;"	function
parseTime	$ZIGLIB/std/crypto/Certificate.zig	/^pub fn parseTime(cert: Certificate, elem: der.Element) !u64 {$/;"	function
parseTimeDigits	$ZIGLIB/std/crypto/Certificate.zig	/^pub fn parseTimeDigits(nn: @Vector(2, u8), min: u8, max: u8) !u8 {$/;"	function
parseTypeExpr	$ZIGLIB/std/zig/Parse.zig	/^fn parseTypeExpr(p: *Parse) Error!Node.Index {$/;"	function
parseUncompressed	$ZIGLIB/std/compress/lzma2/decode.zig	/fn parseUncompressed($/;"	function
parseUnsigned	$ZIGLIB/std/fmt.zig	/^pub fn parseUnsigned(comptime T: type, buf: []const u8, radix: u8) ParseIntError!T {$/;"	function
parseVarDecl	$ZIGLIB/std/zig/Parse.zig	/^fn parseVarDecl(p: *Parse) !Node.Index {$/;"	function
parseVersion	$ZIGLIB/std/crypto/Certificate.zig	/^pub fn parseVersion(bytes: []const u8, version_elem: der.Element) !Version {$/;"	function
parseWhileContinueExpr	$ZIGLIB/std/zig/Parse.zig	/^fn parseWhileContinueExpr(p: *Parse) !Node.Index {$/;"	function
parseWhileExpr	$ZIGLIB/std/zig/Parse.zig	/^fn parseWhileExpr(p: *Parse) !Node.Index {$/;"	function
parseWhileStatement	$ZIGLIB/std/zig/Parse.zig	/^fn parseWhileStatement(p: *Parse) !Node.Index {$/;"	function
parseWhileTypeExpr	$ZIGLIB/std/zig/Parse.zig	/^fn parseWhileTypeExpr(p: *Parse) !Node.Index {$/;"	function
parseWithSign	$ZIGLIB/std/fmt.zig	/^fn parseWithSign($/;"	function
parseWrite	$ZIGLIB/std/zig/string_literal.zig	/^pub fn parseWrite(writer: anytype, bytes: []const u8) error{OutOfMemory}!Result {$/;"	function
parseYear4	$ZIGLIB/std/crypto/Certificate.zig	/^pub fn parseYear4(text: *const [4]u8) !u16 {$/;"	function
parseZon	$ZIGLIB/std/zig/Parse.zig	/^pub fn parseZon(p: *Parse) !void {$/;"	function
parse_source	$ZIGLIB/std/elf.zig	/parse_source: ParseSource/;"	field
parsed	$ZIGLIB/std/zig/c_builtins.zig	/const parsed = std.fmt.parseUnsigned(c_ulong, tagp, 0) catch 0/;"	constant
parsedEqual	$ZIGLIB/std/json.zig	/^fn parsedEqual(a: anytype, b: @TypeOf(a)) bool {$/;"	function
parsed_cert	$ZIGLIB/std/crypto/Certificate/Bundle.zig	/const parsed_cert = try Certificate.parse(.{$/;"	constant
parsed_from	$ZIGLIB/std/fs/path.zig	/const parsed_from = windowsParsePath(resolved_from)/;"	constant
parsed_issuer	$ZIGLIB/std/crypto/Certificate.zig	/const parsed_issuer = try issuer.parse()/;"	constant
parsed_subject	$ZIGLIB/std/crypto/Certificate.zig	/const parsed_subject = try subject.parse()/;"	constant
parsed_to	$ZIGLIB/std/fs/path.zig	/const parsed_to = windowsParsePath(resolved_to)/;"	constant
parser	$ZIGLIB/std/zig/Ast.zig	/var parser: Parse = .{$/;"	variable
parsesTo	$ZIGLIB/std/json.zig	/^fn parsesTo(comptime T: type, value: T, tokens: *TokenStream, options: ParseOptions) !bool {$/;"	function
part	$ZIGLIB/std/zig/system/linux.zig	/part: u16 = 0/;"	field
partial	$ZIGLIB/std/dwarf.zig	/pub const partial = 0x03/;"	constant
partial_ciphertext_end	$ZIGLIB/std/crypto/tls/Client.zig	/^partial_ciphertext_end: u15/;"	field
partial_ciphertext_idx	$ZIGLIB/std/crypto/tls/Client.zig	/^partial_ciphertext_idx: u15/;"	field
partial_cleartext	$ZIGLIB/std/crypto/tls/Client.zig	/const partial_cleartext = c.partially_read_buffer[c.partial_cleartext_idx..c.partial_ciphertext_idx]/;"	constant
partial_cleartext_idx	$ZIGLIB/std/crypto/tls/Client.zig	/^partial_cleartext_idx: u15/;"	field
partial_content	$ZIGLIB/std/http.zig	/partial_content = 206/;"	field
partial_unit	$ZIGLIB/std/dwarf/TAG.zig	/^pub const partial_unit = 0x3c/;"	constant
partially_quoted	$ZIGLIB/std/Build/CompileStep.zig	/const partially_quoted = try std.mem.join(builder.allocator, "\\" \\"", escaped_args.items)/;"	constant
partially_read_buffer	$ZIGLIB/std/crypto/tls/Client.zig	/^partially_read_buffer: [tls.max_ciphertext_record_len]u8/;"	field
partition_format	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/partition_format: Format/;"	field
partition_number	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/partition_number: u32 align(1)/;"	field
partition_signature	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/partition_signature: [16]u8/;"	field
partition_size	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/partition_size: u64 align(1)/;"	field
partition_start	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/partition_start: u64 align(1)/;"	field
parts	$ZIGLIB/std/process.zig	/var parts = mem.split(u8, pair, "=")/;"	variable
partword_atomics	$ZIGLIB/std/target/powerpc.zig	/partword_atomics/;"	field
pass_by_reference	$ZIGLIB/std/dwarf.zig	/pass_by_reference = 0x4/;"	field
pass_by_value	$ZIGLIB/std/dwarf.zig	/pass_by_value = 0x5/;"	field
passwd	$ZIGLIB/std/c/openbsd.zig	/^pub const passwd = extern struct {$/;"	struct
password	$ZIGLIB/std/crypto/scrypt.zig	/password: []const u8/;"	field
passwordZ	$ZIGLIB/std/crypto/bcrypt.zig	/var passwordZ = password_buf[0 .. trimmed_len + 1]/;"	variable
password_buf	$ZIGLIB/std/crypto/bcrypt.zig	/var password_buf: [73]u8 = undefined/;"	variable
patch	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/const patch = value % 1_000/;"	constant
path	$ZIGLIB/std/zig/system/darwin.zig	/path: []const u8/;"	field
pathFromRoot	$ZIGLIB/std/Build.zig	/^pub fn pathFromRoot(self: *Build, rel_path: []const u8) []u8 {$/;"	function
pathJoin	$ZIGLIB/std/Build.zig	/^pub fn pathJoin(self: *Build, paths: []const []const u8) []u8 {$/;"	function
path_addr	$ZIGLIB/std/os/linux/io_uring.zig	/const path_addr = if (builtin.zig_backend == .stage2_llvm) p: {$/;"	constant
path_buf	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/var path_buf: [std.os.PATH_MAX]u8 = undefined/;"	variable
path_c	$ZIGLIB/std/os.zig	/const path_c = try toPosixPath(path)/;"	constant
path_file	$ZIGLIB/std/Build/CompileStep.zig	/const path_file = try fs.path.join(allocator, &[_][]const u8{ appdata_path, "vcpkg.path.txt" })/;"	constant
path_it	$ZIGLIB/std/fs.zig	/var path_it = mem.tokenize(u8, PATH, &[_]u8{path.delimiter})/;"	variable
path_len	$ZIGLIB/std/os.zig	/const path_len = search_path.len + file_slice.len + 1/;"	constant
path_len_bytes	$ZIGLIB/std/os/windows.zig	/const path_len_bytes = math.cast(u16, sub_path_w.len * 2) orelse return error.NameTooLong/;"	constant
path_length_unterminated	$ZIGLIB/std/os/windows.zig	/const path_length_unterminated = @divExact(info.Name.Length, 2)/;"	constant
path_size	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/var path_size = self.size()/;"	variable
path_space	$ZIGLIB/std/os/windows.zig	/var path_space: PathSpace = undefined/;"	variable
path_w	$ZIGLIB/std/os.zig	/const path_w = try windows.sliceToPrefixedFileW(path)/;"	constant
path_with_null	$ZIGLIB/std/os.zig	/var path_with_null: [MFD_MAX_NAME_LEN:0]u8 = undefined/;"	variable
pathname	$ZIGLIB/std/os/linux/bpf.zig	/pathname: u64/;"	field
pathname_c	$ZIGLIB/std/os.zig	/const pathname_c = try toPosixPath(pathname)/;"	constant
pathname_w	$ZIGLIB/std/os.zig	/const pathname_w = try windows.sliceToPrefixedFileW(pathname)/;"	constant
paths	$ZIGLIB/std/zig/system/darwin/macos.zig	/const paths = [_][]const u8{$/;"	constant
paths_first	$ZIGLIB/std/Build/CompileStep.zig	/paths_first/;"	field
paths_start	$ZIGLIB/std/os/windows.zig	/const paths_start = @sizeOf(SYMLINK_DATA) + target_path.len * 2/;"	constant
pattern	$ZIGLIB/std/hash/wyhash.zig	/const pattern = "1234567890"/;"	constant
pause	$ZIGLIB/std/os/linux/syscalls.zig	/pause = Linux + 33/;"	field
pauth	$ZIGLIB/std/target/aarch64.zig	/pauth/;"	field
payload	$ZIGLIB/std/hash/auto_hash.zig	/const payload = key catch |err| {$/;"	constant
payload_pipe	$ZIGLIB/std/zig/Ast.zig	/const payload_pipe = tree.lastToken(info.cond_expr) + 2/;"	constant
payload_token	$ZIGLIB/std/zig/render.zig	/const payload_token = datas[node].lhs/;"	constant
payload_too_large	$ZIGLIB/std/http.zig	/payload_too_large = 413/;"	field
payment_required	$ZIGLIB/std/http.zig	/payment_required = 402/;"	field
pbCertEncoded	$ZIGLIB/std/os/windows/crypt32.zig	/pbCertEncoded: [*]BYTE/;"	field
pbkdf	$ZIGLIB/std/crypto/bcrypt.zig	/^pub fn pbkdf(pass: []const u8, salt: []const u8, key: []u8, rounds: u32) !void {$/;"	function
pbkdf2	$ZIGLIB/std/crypto/pbkdf2.zig	/^pub fn pbkdf2(dk: []u8, password: []const u8, salt: []const u8, rounds: u32, comptime Prf: type) (WeakParametersError || OutputTooLongError)!void {$/;"	function
pbkdf_prf	$ZIGLIB/std/crypto/bcrypt.zig	/^const pbkdf_prf = struct {$/;"	struct
pc1_array	$ZIGLIB/std/crypto/pcurves/secp256k1.zig	/var pc1_array: [9]Secp256k1 = undefined/;"	variable
pc2_array	$ZIGLIB/std/crypto/pcurves/secp256k1.zig	/var pc2_array: [9]Secp256k1 = undefined/;"	variable
pcMul	$ZIGLIB/std/crypto/pcurves/secp256k1.zig	/fn pcMul(pc: *const [9]Secp256k1, s: [32]u8, comptime vartime: bool) IdentityElementError!Secp256k1 {$/;"	function
pcMul16	$ZIGLIB/std/crypto/pcurves/secp256k1.zig	/fn pcMul16(pc: *const [16]Secp256k1, s: [32]u8, comptime vartime: bool) IdentityElementError!Secp256k1 {$/;"	function
pcSelect	$ZIGLIB/std/crypto/pcurves/secp256k1.zig	/fn pcSelect(comptime n: usize, pc: *const [n]Secp256k1, b: u8) Secp256k1 {$/;"	function
pc_count	$ZIGLIB/std/crypto/ghash_polyval.zig	/const pc_count = if (builtin.mode != .ReleaseSmall) 16 else 2/;"	constant
pc_end	$ZIGLIB/std/dwarf.zig	/const pc_end = switch (high_pc_value.*) {$/;"	constant
pc_offset	$ZIGLIB/std/debug.zig	/const pc_offset = if (native_arch == .powerpc64le)$/;"	constant
pc_range	$ZIGLIB/std/dwarf.zig	/pc_range: ?PcRange/;"	field
pciconfig_iobase	$ZIGLIB/std/os/linux/syscalls.zig	/pciconfig_iobase = 271/;"	field
pciconfig_read	$ZIGLIB/std/os/linux/syscalls.zig	/pciconfig_read = 272/;"	field
pciconfig_write	$ZIGLIB/std/os/linux/syscalls.zig	/pciconfig_write = 273/;"	field
pclmul	$ZIGLIB/std/target/x86.zig	/pclmul/;"	field
pconfig	$ZIGLIB/std/target/x86.zig	/pconfig/;"	field
pcrelative_memops	$ZIGLIB/std/target/powerpc.zig	/pcrelative_memops/;"	field
pdata	$ZIGLIB/std/c/solaris.zig	/pdata: extern union {$/;"	field
pdb_dir	$ZIGLIB/std/Build/InstallArtifactStep.zig	/^pdb_dir: ?InstallDir/;"	field
pdiv	$ZIGLIB/std/math/big/int.zig	/const pdiv = ((@as(DoubleLimb, rem.*) << limb_bits) | a[i])/;"	constant
pe_logotype	$ZIGLIB/std/crypto/Certificate.zig	/pe_logotype/;"	field
pe_lwp	$ZIGLIB/std/c/netbsd.zig	/pe_lwp: lwpid_t/;"	field
pe_magic	$ZIGLIB/std/coff.zig	/const pe_magic = "PE\\x00\\x00"/;"	constant
pe_other_pid	$ZIGLIB/std/c/netbsd.zig	/pe_other_pid: pid_t/;"	field
pe_pointer_offset	$ZIGLIB/std/coff.zig	/const pe_pointer_offset = 0x3C/;"	constant
pe_report_event	$ZIGLIB/std/c/netbsd.zig	/pe_report_event: i32/;"	field
peek	$ZIGLIB/std/unicode.zig	/pub fn peek(it: *Utf8Iterator, n: usize) []const u8 {$/;"	function
peekExpiringEntry	$ZIGLIB/std/event/loop.zig	/fn peekExpiringEntry(self: *Waiters) ?*Entry {$/;"	function
peekItem	$ZIGLIB/std/fifo.zig	/pub fn peekItem(self: Self, offset: usize) T {$/;"	function
peekMax	$ZIGLIB/std/priority_dequeue.zig	/pub fn peekMax(self: *Self) ?T {$/;"	function
peekMessageA	$ZIGLIB/std/os/windows/user32.zig	/^pub fn peekMessageA(lpMsg: *MSG, hWnd: ?HWND, wMsgFilterMin: u32, wMsgFilterMax: u32, wRemoveMsg: u32) !bool {$/;"	function
peekMessageW	$ZIGLIB/std/os/windows/user32.zig	/^pub fn peekMessageW(lpMsg: *MSG, hWnd: ?HWND, wMsgFilterMin: u32, wMsgFilterMax: u32, wRemoveMsg: u32) !bool {$/;"	function
peekMin	$ZIGLIB/std/priority_dequeue.zig	/pub fn peekMin(self: *Self) ?T {$/;"	function
peekPrefix	$ZIGLIB/std/Uri.zig	/fn peekPrefix(self: Self, prefix: []const u8) bool {$/;"	function
peekStream	$ZIGLIB/std/io/peek_stream.zig	/^pub fn peekStream($/;"	function
peer	$ZIGLIB/std/c/freebsd.zig	/peer: u64/;"	field
peername	$ZIGLIB/std/c/solaris.zig	/peername: [15:0]u8/;"	field
peerpid	$ZIGLIB/std/c/solaris.zig	/peerpid: pid_t/;"	field
pending	$ZIGLIB/std/child_process.zig	/pending/;"	field
pending_event_count	$ZIGLIB/std/event/loop.zig	/pending_event_count: usize/;"	field
pending_invalid_token	$ZIGLIB/std/zig/tokenizer.zig	/pending_invalid_token: ?Token/;"	field
penryn	$ZIGLIB/std/target/x86.zig	/pub const penryn = CpuModel{$/;"	constant
pentium	$ZIGLIB/std/target/x86.zig	/pub const pentium = CpuModel{$/;"	constant
pentium2	$ZIGLIB/std/target/x86.zig	/pub const pentium2 = CpuModel{$/;"	constant
pentium3	$ZIGLIB/std/target/x86.zig	/pub const pentium3 = CpuModel{$/;"	constant
pentium3m	$ZIGLIB/std/target/x86.zig	/pub const pentium3m = CpuModel{$/;"	constant
pentium4	$ZIGLIB/std/target/x86.zig	/pub const pentium4 = CpuModel{$/;"	constant
pentium4m	$ZIGLIB/std/target/x86.zig	/pub const pentium4m = CpuModel{$/;"	constant
pentium_m	$ZIGLIB/std/target/x86.zig	/pub const pentium_m = CpuModel{$/;"	constant
pentium_mmx	$ZIGLIB/std/target/x86.zig	/pub const pentium_mmx = CpuModel{$/;"	constant
pentiumpro	$ZIGLIB/std/target/x86.zig	/pub const pentiumpro = CpuModel{$/;"	constant
percent	$ZIGLIB/std/zig/tokenizer.zig	/percent/;"	field
percent_equal	$ZIGLIB/std/zig/tokenizer.zig	/percent_equal/;"	field
percpu_array	$ZIGLIB/std/os/linux/bpf.zig	/percpu_array/;"	field
percpu_cgroup_storage	$ZIGLIB/std/os/linux/bpf.zig	/percpu_cgroup_storage/;"	field
percpu_hash	$ZIGLIB/std/os/linux/bpf.zig	/percpu_hash/;"	field
perf_event	$ZIGLIB/std/os/linux/bpf.zig	/perf_event/;"	field
perf_event_array	$ZIGLIB/std/os/linux/bpf.zig	/perf_event_array/;"	field
perf_event_attr	$ZIGLIB/std/os/linux.zig	/^pub const perf_event_attr = extern struct {$/;"	struct
perf_event_open	$ZIGLIB/std/os/linux/syscalls.zig	/perf_event_open = Linux + 333/;"	field
perf_event_output	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const perf_event_output = @intToPtr(fn (ctx: ?*anyopaque, map: *const kern.MapDef, flags: u64, data: ?*anyopaque, size: u64) c_long, 25)/;"	constant
perf_event_read	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const perf_event_read = @intToPtr(fn (map: *const kern.MapDef, flags: u64) u64, 22)/;"	constant
perf_event_read_value	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const perf_event_read_value = @intToPtr(fn (map: *const kern.MapDef, flags: u64, buf: *kern.PerfEventValue, buf_size: u32) c_long, 55)/;"	constant
perf_prog_read_value	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const perf_prog_read_value = @intToPtr(fn (ctx: *kern.PerfEventData, buf: *kern.PerfEventValue, buf_size: u32) c_long, 56)/;"	constant
perfctr	$ZIGLIB/std/os/linux/syscalls.zig	/perfctr = 18/;"	field
perfmon	$ZIGLIB/std/target/arm.zig	/perfmon/;"	field
period	$ZIGLIB/std/zig/tokenizer.zig	/period/;"	field
period_2	$ZIGLIB/std/zig/tokenizer.zig	/period_2/;"	field
period_asterisk	$ZIGLIB/std/zig/tokenizer.zig	/period_asterisk/;"	field
permanent_address	$ZIGLIB/std/os/uefi/protocols/simple_network_protocol.zig	/permanent_address: MacAddress/;"	field
permanent_redirect	$ZIGLIB/std/http.zig	/permanent_redirect = 308/;"	field
permissions	$ZIGLIB/std/fs/file.zig	/pub fn permissions(self: Self) Permissions {$/;"	function
permits	$ZIGLIB/std/Thread/Semaphore.zig	/^permits: usize = 0/;"	field
permitted	$ZIGLIB/std/os/linux.zig	/permitted: u32/;"	field
permute	$ZIGLIB/std/crypto/xoodoo.zig	/pub fn permute(self: *State) void {$/;"	function
permute_small	$ZIGLIB/std/crypto/gimli.zig	/fn permute_small(self: *Self) void {$/;"	function
permute_unrolled	$ZIGLIB/std/crypto/gimli.zig	/fn permute_unrolled(self: *Self) void {$/;"	function
permute_vectorized	$ZIGLIB/std/crypto/gimli.zig	/fn permute_vectorized(self: *Self) void {$/;"	function
personality	$ZIGLIB/std/os/linux/syscalls.zig	/personality = Linux + 136/;"	field
personalityArrayCount	$ZIGLIB/std/macho.zig	/personalityArrayCount: u32/;"	field
personalityArraySectionOffset	$ZIGLIB/std/macho.zig	/personalityArraySectionOffset: u32/;"	field
personalityFunction	$ZIGLIB/std/macho.zig	/personalityFunction: u64/;"	field
pext	$ZIGLIB/std/macho.zig	/pub fn pext(sym: nlist_64) bool {$/;"	function
pfnCreateWindowExW	$ZIGLIB/std/os/windows/user32.zig	/^pub var pfnCreateWindowExW: *const @TypeOf(CreateWindowExW) = undefined/;"	variable
pfnDefWindowProcW	$ZIGLIB/std/os/windows/user32.zig	/^pub var pfnDefWindowProcW: *const @TypeOf(DefWindowProcW) = undefined/;"	variable
pfnDispatchMessageW	$ZIGLIB/std/os/windows/user32.zig	/^pub var pfnDispatchMessageW: *const @TypeOf(DispatchMessageW) = undefined/;"	variable
pfnGetMessageW	$ZIGLIB/std/os/windows/user32.zig	/^pub var pfnGetMessageW: *const @TypeOf(GetMessageW) = undefined/;"	variable
pfnGetWindowLongPtrW	$ZIGLIB/std/os/windows/user32.zig	/^pub var pfnGetWindowLongPtrW: *const @TypeOf(GetWindowLongPtrW) = undefined/;"	variable
pfnGetWindowLongW	$ZIGLIB/std/os/windows/user32.zig	/^pub var pfnGetWindowLongW: *const @TypeOf(GetWindowLongW) = undefined/;"	variable
pfnMessageBoxW	$ZIGLIB/std/os/windows/user32.zig	/^pub var pfnMessageBoxW: *const @TypeOf(MessageBoxW) = undefined/;"	variable
pfnPeekMessageW	$ZIGLIB/std/os/windows/user32.zig	/^pub var pfnPeekMessageW: *const @TypeOf(PeekMessageW) = undefined/;"	variable
pfnRegisterClassExW	$ZIGLIB/std/os/windows/user32.zig	/^pub var pfnRegisterClassExW: *const @TypeOf(RegisterClassExW) = undefined/;"	variable
pfnSetWindowLongPtrW	$ZIGLIB/std/os/windows/user32.zig	/^pub var pfnSetWindowLongPtrW: *const @TypeOf(SetWindowLongPtrW) = undefined/;"	variable
pfnSetWindowLongW	$ZIGLIB/std/os/windows/user32.zig	/^pub var pfnSetWindowLongW: *const @TypeOf(SetWindowLongW) = undefined/;"	variable
pfnUnregisterClassW	$ZIGLIB/std/os/windows/user32.zig	/^pub var pfnUnregisterClassW: *const @TypeOf(UnregisterClassW) = undefined/;"	variable
ph32	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/const ph32 = @ptrCast(*elf.Elf32_Phdr, @alignCast(@alignOf(elf.Elf32_Phdr), &ph_buf[ph_buf_i]))/;"	constant
ph64	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/const ph64 = @ptrCast(*elf.Elf64_Phdr, @alignCast(@alignOf(elf.Elf64_Phdr), &ph_buf[ph_buf_i]))/;"	constant
ph_addr	$ZIGLIB/std/os/linux/vdso.zig	/var ph_addr: usize = vdso_addr + eh.e_phoff/;"	variable
ph_buf	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/var ph_buf: [16 * @sizeOf(elf.Elf64_Phdr)]u8 align(@alignOf(elf.Elf64_Phdr)) = undefined/;"	variable
ph_buf_i	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/var ph_buf_i: usize = 0/;"	variable
ph_i	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/var ph_i: u16 = 0/;"	variable
ph_read_byte_len	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/const ph_read_byte_len = try preadMin(file, ph_buf[0 .. ph_buf.len - ph_reserve], phoff, phentsize)/;"	constant
ph_reserve	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/const ph_reserve: usize = @sizeOf(elf.Elf64_Phdr) - @sizeOf(elf.Elf32_Phdr)/;"	constant
phdr	$ZIGLIB/std/process.zig	/const phdr = os.system.getauxval(std.elf.AT_PHDR)/;"	constant
phdrs	$ZIGLIB/std/start.zig	/const phdrs = init: {$/;"	constant
phentsize	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/const phentsize = elfInt(is_64, need_bswap, hdr32.e_phentsize, hdr64.e_phentsize)/;"	constant
phihi	$ZIGLIB/compiler_rt/common.zig	/const phihi: u64 = S.hiWord(a) * S.hiWord(b)/;"	constant
philo	$ZIGLIB/compiler_rt/common.zig	/const philo: u64 = S.hiWord(a) * S.loWord(b)/;"	constant
phnum	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/const phnum = elfInt(is_64, need_bswap, hdr32.e_phnum, hdr64.e_phnum)/;"	constant
phoff	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/var phoff = elfInt(is_64, need_bswap, hdr32.e_phoff, hdr64.e_phoff)/;"	variable
phrase	$ZIGLIB/std/http.zig	/pub fn phrase(self: Status) ?[]const u8 {$/;"	function
phys_footprint	$ZIGLIB/std/c/darwin.zig	/phys_footprint: mach_vm_size_t/;"	field
physical_size	$ZIGLIB/std/os/uefi/protocols/file_protocol.zig	/physical_size: u64/;"	field
physical_start	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/physical_start: u64/;"	field
piProcInfo	$ZIGLIB/std/child_process.zig	/var piProcInfo: windows.PROCESS_INFORMATION = undefined/;"	variable
pi_lo	$ZIGLIB/std/math/atan2.zig	/const pi_lo: f64 = 1.2246467991473531772E-16/;"	constant
pick	$ZIGLIB/std/dwarf/OP.zig	/^pub const pick = 0x15/;"	constant
pickos	$ZIGLIB/std/time/epoch.zig	/^pub const pickos = -63244800/;"	constant
picture_string	$ZIGLIB/std/dwarf/AT.zig	/^pub const picture_string = 0x60/;"	constant
pidForTask	$ZIGLIB/std/os/darwin.zig	/pub fn pidForTask(self: MachTask) MachError!std.os.pid_t {$/;"	function
pid_result	$ZIGLIB/std/child_process.zig	/const pid_result = try os.fork()/;"	constant
pid_t	$ZIGLIB/std/os/linux.zig	/^pub const pid_t = i32/;"	constant
pidfd_getfd	$ZIGLIB/std/os/linux/syscalls.zig	/pidfd_getfd = Linux + 438/;"	field
pidfd_open	$ZIGLIB/std/os/linux/syscalls.zig	/pidfd_open = Linux + 434/;"	field
pidfd_send_signal	$ZIGLIB/std/os/linux/syscalls.zig	/pidfd_send_signal = Linux + 424/;"	field
piduid	$ZIGLIB/std/os/linux.zig	/piduid: extern struct {$/;"	field
piece	$ZIGLIB/std/dwarf/OP.zig	/^pub const piece = 0x93/;"	constant
pinned	$ZIGLIB/std/os/linux.zig	/pinned: bool = false/;"	field
pio2	$ZIGLIB/std/math/asin.zig	/const pio2 = 1.570796326794896558e+00/;"	constant
pio2_1	$ZIGLIB/compiler_rt/rem_pio2f.zig	/^const pio2_1 = 1.57079631090164184570e+00/;"	constant
pio2_1t	$ZIGLIB/compiler_rt/rem_pio2f.zig	/^const pio2_1t = 1.58932547735281966916e-08/;"	constant
pio2_2	$ZIGLIB/compiler_rt/rem_pio2.zig	/^const pio2_2 = 6.07710050630396597660e-11/;"	constant
pio2_2t	$ZIGLIB/compiler_rt/rem_pio2.zig	/^const pio2_2t = 2.02226624879595063154e-21/;"	constant
pio2_3	$ZIGLIB/compiler_rt/rem_pio2.zig	/^const pio2_3 = 2.02226624871116645580e-21/;"	constant
pio2_3t	$ZIGLIB/compiler_rt/rem_pio2.zig	/^const pio2_3t = 8.47842766036889956997e-32/;"	constant
pio2_hi	$ZIGLIB/std/math/asin.zig	/const pio2_hi: f64 = 1.57079632679489655800e+00/;"	constant
pio2_lo	$ZIGLIB/std/math/asin.zig	/const pio2_lo: f64 = 6.12323399573676603587e-17/;"	constant
pio4	$ZIGLIB/compiler_rt/trig.zig	/const pio4 = 7.85398163397448278999e-01/;"	constant
pio4lo	$ZIGLIB/compiler_rt/trig.zig	/const pio4lo = 3.06161699786838301793e-17/;"	constant
pipe	$ZIGLIB/std/zig/tokenizer.zig	/pipe/;"	field
pipe2	$ZIGLIB/std/os/linux/syscalls.zig	/pipe2 = Linux + 328/;"	field
pipeToFileSystem	$ZIGLIB/std/tar.zig	/^pub fn pipeToFileSystem(dir: std.fs.Dir, reader: anytype, options: Options) !void {$/;"	function
pipe_equal	$ZIGLIB/std/zig/tokenizer.zig	/pipe_equal/;"	field
pipe_flags	$ZIGLIB/std/child_process.zig	/const pipe_flags = if (io.is_async) os.O.NONBLOCK else 0/;"	constant
pipe_name_counter	$ZIGLIB/std/child_process.zig	/^var pipe_name_counter = std.atomic.Atomic(u32).init(1)/;"	variable
pipe_path	$ZIGLIB/std/child_process.zig	/const pipe_path = std.fmt.bufPrintZ($/;"	constant
pipe_pipe	$ZIGLIB/std/zig/tokenizer.zig	/pipe_pipe/;"	field
pitcairn	$ZIGLIB/std/target/amdgpu.zig	/pub const pitcairn = CpuModel{$/;"	constant
pivot_root	$ZIGLIB/std/os/linux/syscalls.zig	/pivot_root = Linux + 216/;"	field
pixel	$ZIGLIB/std/target.zig	/pixel/;"	field
pixel_format	$ZIGLIB/std/os/uefi/protocols/graphics_output_protocol.zig	/pixel_format: GraphicsPixelFormat = undefined/;"	field
pixel_information	$ZIGLIB/std/os/uefi/protocols/graphics_output_protocol.zig	/pixel_information: PixelBitmask = undefined/;"	field
pixels_per_scan_line	$ZIGLIB/std/os/uefi/protocols/graphics_output_protocol.zig	/pixels_per_scan_line: u32 = undefined/;"	field
pk_bytes	$ZIGLIB/std/crypto/25519/ed25519.zig	/const pk_bytes = pk_p.toBytes()/;"	constant
pk_calculated	$ZIGLIB/std/crypto/25519/x25519.zig	/const pk_calculated = try X25519.recoverPublicKey(sk)/;"	constant
pk_components	$ZIGLIB/std/crypto/Certificate.zig	/const pk_components = try rsa.PublicKey.parseDer(pub_key)/;"	constant
pk_compressed_sec1	$ZIGLIB/std/crypto/ecdsa.zig	/const pk_compressed_sec1 = pk.toCompressedSec1()/;"	constant
pk_ed	$ZIGLIB/std/crypto/25519/x25519.zig	/const pk_ed = try crypto.ecc.Edwards25519.fromBytes(ed25519_public_key.bytes)/;"	constant
pk_expected	$ZIGLIB/std/crypto/25519/x25519.zig	/var pk_expected: [32]u8 = undefined/;"	variable
pk_fmac_f16_inst	$ZIGLIB/std/target/amdgpu.zig	/pk_fmac_f16_inst/;"	field
pk_p	$ZIGLIB/std/crypto/25519/ed25519.zig	/const pk_p = try Curve.fromBytes(secret_key.publicKeyBytes())/;"	constant
pk_recovered1	$ZIGLIB/std/crypto/ecdsa.zig	/const pk_recovered1 = try Scheme.PublicKey.fromSec1(&pk_compressed_sec1)/;"	constant
pk_recovered2	$ZIGLIB/std/crypto/ecdsa.zig	/const pk_recovered2 = try Scheme.PublicKey.fromSec1(&pk_uncompressed_sec1)/;"	constant
pk_uncompressed_sec1	$ZIGLIB/std/crypto/ecdsa.zig	/const pk_uncompressed_sec1 = pk.toUncompressedSec1()/;"	constant
pkcs9_emailAddress	$ZIGLIB/std/crypto/Certificate.zig	/pkcs9_emailAddress/;"	field
pkey	$ZIGLIB/std/os/linux.zig	/pkey: u32/;"	field
pkey_alloc	$ZIGLIB/std/os/linux/syscalls.zig	/pkey_alloc = Linux + 364/;"	field
pkey_free	$ZIGLIB/std/os/linux/syscalls.zig	/pkey_free = Linux + 365/;"	field
pkey_mprotect	$ZIGLIB/std/os/linux/syscalls.zig	/pkey_mprotect = Linux + 363/;"	field
pkg_config_pkg_list	$ZIGLIB/std/Build.zig	/^pkg_config_pkg_list: ?(PkgConfigError![]const PkgConfigPkg) = null/;"	field
pkg_name	$ZIGLIB/std/Build/CompileStep.zig	/const pkg_name = match: {$/;"	constant
pkgs	$ZIGLIB/std/Build/CompileStep.zig	/const pkgs = try getPkgConfigList(self.builder)/;"	constant
pkttype	$ZIGLIB/std/os/linux.zig	/pkttype: u8/;"	field
placeholder	$ZIGLIB/std/fmt.zig	/const placeholder = comptime parsePlaceholder(fmt[fmt_begin..fmt_end].*)/;"	constant
plain	$ZIGLIB/std/http/Client.zig	/plain/;"	field
plaintext_header	$ZIGLIB/std/crypto/tls/Client.zig	/const plaintext_header = [_]u8{$/;"	constant
plan9	$ZIGLIB/std/target.zig	/plan9/;"	field
plan9Ext	$ZIGLIB/std/target.zig	/pub fn plan9Ext(cpu_arch: Cpu.Arch) [:0]const u8 {$/;"	function
platform	$ZIGLIB/std/macho.zig	/platform: u8/;"	field
plenty_of_memory	$ZIGLIB/std/atomic/stack.zig	/var plenty_of_memory = try std.heap.page_allocator.alloc(u8, 300 * 1024)/;"	variable
plohi	$ZIGLIB/compiler_rt/common.zig	/const plohi: u64 = S.loWord(a) * S.hiWord(b)/;"	constant
plolo	$ZIGLIB/compiler_rt/common.zig	/const plolo: u64 = S.loWord(a) * S.loWord(b)/;"	constant
plus	$ZIGLIB/std/zig/tokenizer.zig	/plus/;"	field
plusAssertSafe	$ZIGLIB/std/enums.zig	/pub fn plusAssertSafe(self: Self, other: Self) Self {$/;"	function
plus_equal	$ZIGLIB/std/zig/tokenizer.zig	/plus_equal/;"	field
plus_percent	$ZIGLIB/std/zig/tokenizer.zig	/plus_percent/;"	field
plus_percent_equal	$ZIGLIB/std/zig/tokenizer.zig	/plus_percent_equal/;"	field
plus_pipe	$ZIGLIB/std/zig/tokenizer.zig	/plus_pipe/;"	field
plus_pipe_equal	$ZIGLIB/std/zig/tokenizer.zig	/plus_pipe_equal/;"	field
plus_plus	$ZIGLIB/std/zig/tokenizer.zig	/plus_plus/;"	field
plus_uconst	$ZIGLIB/std/dwarf/OP.zig	/^pub const plus_uconst = 0x23/;"	constant
poem	$ZIGLIB/std/compress/deflate/dict_decoder.zig	/const poem: []const u8 =$/;"	constant
poem_refs	$ZIGLIB/std/compress/deflate/dict_decoder.zig	/var poem_refs = [_]PoemRefs{$/;"	variable
point	$ZIGLIB/std/rand.zig	/const point = if (comptime std.meta.trait.isSignedInt(T))$/;"	constant
pointee_size	$ZIGLIB/std/mem.zig	/const pointee_size = @sizeOf(info.Pointer.child)/;"	constant
pointer_to_linenumber	$ZIGLIB/std/coff.zig	/pointer_to_linenumber: u32/;"	field
pointer_to_linenumbers	$ZIGLIB/std/coff.zig	/pointer_to_linenumbers: u32/;"	field
pointer_to_next_function	$ZIGLIB/std/coff.zig	/pointer_to_next_function: u32/;"	field
pointer_to_raw_data	$ZIGLIB/std/coff.zig	/pointer_to_raw_data: u32/;"	field
pointer_to_relocations	$ZIGLIB/std/coff.zig	/pointer_to_relocations: u32/;"	field
pointer_to_symbol_table	$ZIGLIB/std/coff.zig	/pointer_to_symbol_table: u32/;"	field
pointer_type	$ZIGLIB/std/dwarf/TAG.zig	/^pub const pointer_type = 0x0f/;"	constant
pointers	$ZIGLIB/std/mem.zig	/pointers: struct {$/;"	field
polaris10	$ZIGLIB/std/target/amdgpu.zig	/pub const polaris10 = CpuModel{$/;"	constant
polaris11	$ZIGLIB/std/target/amdgpu.zig	/pub const polaris11 = CpuModel{$/;"	constant
policy	$ZIGLIB/std/c/darwin.zig	/policy: policy_t/;"	field
policyOf	$ZIGLIB/std/net.zig	/^fn policyOf(a: [16]u8) *const Policy {$/;"	function
policy_t	$ZIGLIB/std/c/darwin.zig	/^pub const policy_t = c_int/;"	constant
poll	$ZIGLIB/std/os/windows.zig	/^pub fn poll(fds: [*]ws2_32.pollfd, n: c_ulong, timeout: i32) i32 {$/;"	function
poll_add	$ZIGLIB/std/os/linux/io_uring.zig	/pub fn poll_add($/;"	function
poll_fds	$ZIGLIB/std/child_process.zig	/var poll_fds = [_]os.pollfd{$/;"	variable
poll_flags	$ZIGLIB/std/event/loop.zig	/var poll_flags: i16 = 0/;"	variable
poll_remove	$ZIGLIB/std/os/linux/io_uring.zig	/pub fn poll_remove($/;"	function
poll_update	$ZIGLIB/std/os/linux/io_uring.zig	/pub fn poll_update($/;"	function
pollfd	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const pollfd = extern struct {$/;"	struct
poly	$ZIGLIB/std/hash/crc.zig	/const poly = if (algorithm.reflect_input)$/;"	constant
polyKey	$ZIGLIB/std/crypto/chacha20.zig	/var polyKey = [_]u8{0} ** 32/;"	variable
polynomial	$ZIGLIB/std/hash/crc.zig	/polynomial: W/;"	field
pool	$ZIGLIB/std/heap/memory_pool.zig	/var pool = try MemoryPoolExtra(u32, .{ .growable = false }).initPreheated(std.testing.allocator, 4)/;"	variable
pool_allocator	$ZIGLIB/std/os/uefi/pool_allocator.zig	/^pub const pool_allocator = Allocator{$/;"	constant
pool_allocator_vtable	$ZIGLIB/std/os/uefi/pool_allocator.zig	/^const pool_allocator_vtable = Allocator.VTable{$/;"	constant
poolid_t	$ZIGLIB/std/c/solaris.zig	/^pub const poolid_t = id_t/;"	constant
popContext	$ZIGLIB/std/array_hash_map.zig	/pub fn popContext(self: *Self, ctx: Context) KV {$/;"	function
popCount	$ZIGLIB/std/math/big/int.zig	/pub fn popCount(self: Const, bit_count: usize) usize {$/;"	function
popCv	$ZIGLIB/std/crypto/blake3.zig	/fn popCv(self: *Blake3) [8]u32 {$/;"	function
popExpired	$ZIGLIB/std/event/loop.zig	/fn popExpired(self: *Waiters, now: u64) ?*Entry {$/;"	function
popFirst	$ZIGLIB/std/linked_list.zig	/pub fn popFirst(list: *Self) ?*Node {$/;"	function
popIndent	$ZIGLIB/std/zig/render.zig	/pub fn popIndent(self: *Self) void {$/;"	function
popOrNull	$ZIGLIB/std/multi_array_list.zig	/pub fn popOrNull(self: *Self) ?S {$/;"	function
popOrNullContext	$ZIGLIB/std/array_hash_map.zig	/pub fn popOrNullContext(self: *Self, ctx: Context) ?KV {$/;"	function
popState	$ZIGLIB/std/json/write_stream.zig	/fn popState(self: *Self) void {$/;"	function
popc	$ZIGLIB/std/target/sparc.zig	/popc/;"	field
popcnt	$ZIGLIB/std/target/x86.zig	/popcnt/;"	field
popcntd	$ZIGLIB/std/target/powerpc.zig	/popcntd/;"	field
popcountXi2	$ZIGLIB/compiler_rt/popcount.zig	/^inline fn popcountXi2(comptime ST: type, a: ST) i32 {$/;"	function
populateDependencies	$ZIGLIB/std/target.zig	/pub fn populateDependencies(set: *Set, all_features_list: []const Cpu.Feature) void {$/;"	function
populated	$ZIGLIB/std/pdb.zig	/populated: bool/;"	field
populated_cpu_features	$ZIGLIB/std/Build.zig	/var populated_cpu_features = whitelist_cpu.model.features/;"	variable
population_count	$ZIGLIB/std/target/s390x.zig	/population_count/;"	field
port	$ZIGLIB/std/os/windows/ws2_32.zig	/port: USHORT/;"	field
port_c	$ZIGLIB/std/net.zig	/const port_c = try std.fmt.allocPrintZ(allocator, "{}", .{port})/;"	constant
port_event	$ZIGLIB/std/c/solaris.zig	/^pub const port_event = extern struct {$/;"	struct
port_gid	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/port_gid: [16]u8/;"	field
port_multiplier_port_number	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/port_multiplier_port_number: u16 align(1)/;"	field
port_notify	$ZIGLIB/std/c/solaris.zig	/^pub const port_notify = extern struct {$/;"	struct
port_t	$ZIGLIB/std/c/solaris.zig	/^pub const port_t = c_int/;"	constant
ports	$ZIGLIB/std/os/darwin.zig	/ports: [std.c.EXC_TYPES_COUNT]std.c.mach_port_t/;"	field
pos_decoders	$ZIGLIB/std/compress/lzma/decode.zig	/pos_decoders: [115]u16/;"	field
pos_slot	$ZIGLIB/std/compress/lzma/decode.zig	/const pos_slot = @as(usize, try self.pos_slot_decoder[len_state].parse(reader, decoder, update))/;"	constant
pos_slot_decoder	$ZIGLIB/std/compress/lzma/decode.zig	/pos_slot_decoder: [4]BitTree(6)/;"	field
pos_state	$ZIGLIB/std/compress/lzma/decode.zig	/const pos_state = buffer.len & ((@as(usize, 1) << self.lzma_props.pb) - 1)/;"	constant
pos_x	$ZIGLIB/std/testing.zig	/const pos_x: T = 12.0/;"	constant
pos_y	$ZIGLIB/std/testing.zig	/const pos_y: T = pos_x + 2 * eps_value/;"	constant
positive	$ZIGLIB/std/math/big/int.zig	/var positive = true/;"	variable
positive_index	$ZIGLIB/std/zig/c_translation.zig	/const positive_index = @intCast(usize, this_index)/;"	constant
posix	$ZIGLIB/std/time/epoch.zig	/^pub const posix = 0/;"	constant
posixCallMainAndExit	$ZIGLIB/std/start.zig	/^fn posixCallMainAndExit() callconv(.C) noreturn {$/;"	function
posixFsCancel	$ZIGLIB/std/event/loop.zig	/fn posixFsCancel(self: *Loop, request_node: *Request.Node) void {$/;"	function
posixFsRequest	$ZIGLIB/std/event/loop.zig	/fn posixFsRequest(self: *Loop, request_node: *Request.Node) void {$/;"	function
posixFsRun	$ZIGLIB/std/event/loop.zig	/fn posixFsRun(self: *Loop) void {$/;"	function
posixGetUserInfo	$ZIGLIB/std/process.zig	/^pub fn posixGetUserInfo(name: []const u8) !UserInfo {$/;"	function
posixIsSep	$ZIGLIB/std/fs/path.zig	/const posixIsSep = struct {$/;"	constant
posix_file	$ZIGLIB/std/os/posix_spawn.zig	/const posix_file = try toPosixPath(file)/;"	constant
posix_path	$ZIGLIB/std/os/posix_spawn.zig	/const posix_path = try toPosixPath(path)/;"	constant
posix_spawn	$ZIGLIB/std/os/posix_spawn.zig	/^const posix_spawn = if (builtin.target.isDarwin()) struct {$/;"	constant
posix_spawn_file_actions_t	$ZIGLIB/std/c/darwin.zig	/^pub const posix_spawn_file_actions_t = *opaque {}/;"	constant
posix_spawnattr_t	$ZIGLIB/std/c/darwin.zig	/^pub const posix_spawnattr_t = *opaque {}/;"	constant
post	$ZIGLIB/std/Thread/Semaphore.zig	/^pub fn post(sem: *Semaphore) void {$/;"	function
postQuitMessage	$ZIGLIB/std/os/windows/user32.zig	/^pub fn postQuitMessage(nExitCode: i32) void {$/;"	function
post_handshake_auth	$ZIGLIB/std/crypto/tls.zig	/post_handshake_auth = 49/;"	field
postalCode	$ZIGLIB/std/crypto/Certificate.zig	/postalCode/;"	field
potential_error	$ZIGLIB/std/fs/watch.zig	/const potential_error = windows.kernel32.GetLastError()/;"	constant
pow10	$ZIGLIB/std/fmt/errol.zig	/const pow10 = 10000000000/;"	constant
pow19	$ZIGLIB/std/fmt/errol.zig	/const pow19 = @as(u128, 1e19)/;"	constant
pow2523	$ZIGLIB/std/crypto/25519/field.zig	/pub fn pow2523(a: Fe) Fe {$/;"	function
pow2_pages	$ZIGLIB/std/heap/WasmAllocator.zig	/const pow2_pages = math.ceilPowerOfTwoAssert(usize, n)/;"	constant
pow2_to_pow5_table	$ZIGLIB/std/fmt/parse_float/decimal.zig	/const pow2_to_pow5_table = [_]ShiftCutoff{$/;"	constant
pow5	$ZIGLIB/std/fmt/parse_float/convert_eisel_lemire.zig	/const pow5 = eisel_lemire_table_powers_of_five_128[index]/;"	constant
pow_montgomery	$ZIGLIB/std/crypto/Certificate.zig	/fn pow_montgomery(r: *BigInt, a: *const BigInt, x: *const BigInt, n: *const BigInt, allocator: std.mem.Allocator) !void {$/;"	function
power	$ZIGLIB/std/fmt/parse_float/convert_eisel_lemire.zig	/^fn power(q: i32) i32 {$/;"	function
power10_vector	$ZIGLIB/std/target/powerpc.zig	/power10_vector/;"	field
power2	$ZIGLIB/std/fmt/parse_float/convert_slow.zig	/var power2 = exp2 - min_exponent/;"	variable
power8_altivec	$ZIGLIB/std/target/powerpc.zig	/power8_altivec/;"	field
power8_vector	$ZIGLIB/std/target/powerpc.zig	/power8_vector/;"	field
power9_altivec	$ZIGLIB/std/target/powerpc.zig	/power9_altivec/;"	field
power9_vector	$ZIGLIB/std/target/powerpc.zig	/power9_vector/;"	field
power_of_two	$ZIGLIB/std/sort.zig	/power_of_two: usize/;"	field
powerpc	$ZIGLIB/std/target.zig	/powerpc/;"	field
powerpc64	$ZIGLIB/std/target.zig	/powerpc64/;"	field
powerpc64le	$ZIGLIB/std/target.zig	/powerpc64le/;"	field
powerpcle	$ZIGLIB/std/target.zig	/powerpcle/;"	field
powers	$ZIGLIB/std/fmt/parse_float/convert_slow.zig	/^const powers = [_]u8{ 0, 3, 6, 9, 13, 16, 19, 23, 26, 29, 33, 36, 39, 43, 46, 49, 53, 56, 59 }/;"	constant
powers_of_two	$ZIGLIB/std/fifo.zig	/const powers_of_two = switch (buffer_type) {$/;"	constant
powi	$ZIGLIB/std/math/powi.zig	/^pub fn powi(comptime T: type, x: T, y: T) (error{$/;"	function
powx	$ZIGLIB/std/crypto/aes/soft.zig	/^const powx = init: {$/;"	constant
pp_directive	$ZIGLIB/std/c/tokenizer.zig	/pp_directive: bool = false/;"	field
ppc4xx	$ZIGLIB/std/target/powerpc.zig	/ppc4xx/;"	field
ppc64	$ZIGLIB/std/target/powerpc.zig	/pub const ppc64 = CpuModel{$/;"	constant
ppc64le	$ZIGLIB/std/target/powerpc.zig	/pub const ppc64le = CpuModel{$/;"	constant
ppc6xx	$ZIGLIB/std/target/powerpc.zig	/ppc6xx/;"	field
ppc_postra_sched	$ZIGLIB/std/target/powerpc.zig	/ppc_postra_sched/;"	field
ppc_prera_sched	$ZIGLIB/std/target/powerpc.zig	/ppc_prera_sched/;"	field
ppoll	$ZIGLIB/std/os/linux/syscalls.zig	/ppoll = Linux + 302/;"	field
ppoll_time64	$ZIGLIB/std/os/linux/syscalls.zig	/ppoll_time64 = Linux + 414/;"	field
pr_name_len	$ZIGLIB/std/os/wasi.zig	/pr_name_len: usize/;"	field
pr_type	$ZIGLIB/std/os/wasi.zig	/pr_type: preopentype_t/;"	field
prctl	$ZIGLIB/std/os/linux/syscalls.zig	/prctl = Linux + 192/;"	field
prctl_mm_map	$ZIGLIB/std/os/linux.zig	/^pub const prctl_mm_map = extern struct {$/;"	struct
pre_ix	$ZIGLIB/compiler_rt/sincos.zig	/const pre_ix = @bitCast(u32, x)/;"	constant
pre_shared_key	$ZIGLIB/std/crypto/tls.zig	/pre_shared_key = 41/;"	field
pre_target_space	$ZIGLIB/std/zig/render.zig	/const pre_target_space = if (node_tags[switch_case.ast.target_expr] == .multiline_string_literal)$/;"	constant
pread	$ZIGLIB/std/os/linux.zig	/^pub fn pread(fd: i32, buf: [*]u8, count: usize, offset: i64) usize {$/;"	function
pread64	$ZIGLIB/std/os/linux/syscalls.zig	/pread64 = Linux + 200/;"	field
preadAll	$ZIGLIB/std/fs/file.zig	/pub fn preadAll(self: File, buffer: []u8, offset: u64) PReadError!usize {$/;"	function
preadMin	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/^fn preadMin(file: fs.File, buf: []u8, offset: u64, min_read_len: usize) !usize {$/;"	function
pread_sym	$ZIGLIB/std/os.zig	/const pread_sym = if (builtin.os.tag == .linux and builtin.link_libc)$/;"	constant
preadv	$ZIGLIB/std/os/linux/syscalls.zig	/preadv = Linux + 330/;"	field
preadv2	$ZIGLIB/std/os/linux/syscalls.zig	/preadv2 = Linux + 361/;"	field
preadvAll	$ZIGLIB/std/fs/file.zig	/pub fn preadvAll(self: File, iovecs: []os.iovec, offset: u64) PReadError!usize {$/;"	function
preadv_sym	$ZIGLIB/std/os.zig	/const preadv_sym = if (builtin.os.tag == .linux and builtin.link_libc)$/;"	constant
prealloc_count	$ZIGLIB/std/segmented_list.zig	/pub const prealloc_count = prealloc_item_count/;"	constant
prealloc_exp	$ZIGLIB/std/segmented_list.zig	/const prealloc_exp: ShelfIndex = blk: {$/;"	constant
prealloc_segment	$ZIGLIB/std/segmented_list.zig	/prealloc_segment: [prealloc_item_count]T = undefined/;"	field
prec	$ZIGLIB/std/zig/Parse.zig	/prec: i8/;"	field
precise_ip	$ZIGLIB/std/os/linux.zig	/precise_ip: u2 = 0/;"	field
precision	$ZIGLIB/std/os/wasi.zig	/precision: timestamp_t/;"	field
precomp	$ZIGLIB/std/crypto/pcurves/common.zig	/var precomp: Limbs = undefined/;"	variable
precompute	$ZIGLIB/std/crypto/pcurves/secp256k1.zig	/fn precompute(p: Secp256k1, comptime count: usize) [1 + count]Secp256k1 {$/;"	function
precomputed	$ZIGLIB/std/comptime_string_map.zig	/const precomputed = comptime blk: {$/;"	constant
precondition_failed	$ZIGLIB/std/http.zig	/precondition_failed = 412/;"	field
precondition_required	$ZIGLIB/std/http.zig	/precondition_required = 428/;"	field
predictable_select_expensive	$ZIGLIB/std/target/powerpc.zig	/predictable_select_expensive/;"	field
predres	$ZIGLIB/std/target/aarch64.zig	/predres/;"	field
prefer_128_bit	$ZIGLIB/std/target/x86.zig	/prefer_128_bit/;"	field
prefer_256_bit	$ZIGLIB/std/target/x86.zig	/prefer_256_bit/;"	field
prefer_ishst	$ZIGLIB/std/target/arm.zig	/prefer_ishst/;"	field
prefer_mask_registers	$ZIGLIB/std/target/x86.zig	/prefer_mask_registers/;"	field
prefer_vmovsr	$ZIGLIB/std/target/arm.zig	/prefer_vmovsr/;"	field
preferred_optimize_mode	$ZIGLIB/std/Build.zig	/preferred_optimize_mode: ?std.builtin.Mode = null/;"	field
prefetchwt1	$ZIGLIB/std/target/x86.zig	/prefetchwt1/;"	field
prefix	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/const prefix = "\/lib\/"/;"	constant
prefix2	$ZIGLIB/std/log.zig	/const prefix2 = if (scope == .default) ": " else "(" ++ @tagName(scope) ++ "): "/;"	constant
prefixMatch	$ZIGLIB/std/net.zig	/^fn prefixMatch(s: [16]u8, d: [16]u8) u8 {$/;"	function
prefixScan	$ZIGLIB/std/simd.zig	/^pub fn prefixScan(comptime op: std.builtin.ReduceOp, comptime hop: isize, vec: anytype) @TypeOf(vec) {$/;"	function
prefixScanWithFunc	$ZIGLIB/std/simd.zig	/^pub fn prefixScanWithFunc($/;"	function
prefixSlash	$ZIGLIB/std/zig/system/darwin/macos.zig	/const prefixSlash = "\/System\/Library\/CoreServices\/"/;"	constant
prefix_buf	$ZIGLIB/std/os/windows.zig	/var prefix_buf = std.unicode.utf8ToUtf16LeStringLiteral("\\\\DosDevices\\\\")/;"	variable
prefix_byte	$ZIGLIB/std/Build/CheckObjectStep.zig	/const prefix_byte = try std.leb.readULEB128(u8, reader)/;"	constant
prefix_count	$ZIGLIB/std/os/uefi/protocols/ip6_protocol.zig	/prefix_count: u32/;"	field
prefix_index	$ZIGLIB/std/os/windows.zig	/const prefix_index: usize = if (mem.startsWith(u8, s, prefix)) prefix.len else 0/;"	constant
prefix_instrs	$ZIGLIB/std/target/powerpc.zig	/prefix_instrs/;"	field
prefix_len	$ZIGLIB/std/os/windows.zig	/const prefix_len: usize = init: {$/;"	constant
prefix_length	$ZIGLIB/std/os/uefi/protocols/ip6_protocol.zig	/prefix_length: u8/;"	field
prefix_table	$ZIGLIB/std/os/uefi/protocols/ip6_protocol.zig	/prefix_table: [*]Ip6AddressInfo/;"	field
prefix_u16	$ZIGLIB/std/os/windows.zig	/const prefix_u16 = [_]u16{ '\\\\', '?', '?', '\\\\' }/;"	constant
prefixed	$ZIGLIB/std/wasm.zig	/prefixed = 0xFC/;"	field
prefixed_path	$ZIGLIB/std/child_process.zig	/const prefixed_path = try windows.wToPrefixedFileW(dir_buf.items[0..dir_path_len])/;"	constant
prefixed_path_w	$ZIGLIB/std/fs.zig	/const prefixed_path_w = try os.windows.wToPrefixedFileW(wide_slice)/;"	constant
prefixlen	$ZIGLIB/std/net.zig	/var prefixlen: i32 = 0/;"	variable
preopensAlloc	$ZIGLIB/std/fs/wasi.zig	/^pub fn preopensAlloc(gpa: Allocator) Allocator.Error!Preopens {$/;"	function
preopentype_t	$ZIGLIB/std/os/wasi.zig	/^pub const preopentype_t = u8/;"	constant
prepareCiphertextRecord	$ZIGLIB/std/crypto/tls/Client.zig	/^fn prepareCiphertextRecord($/;"	function
prepareTLS	$ZIGLIB/std/os/linux/tls.zig	/^pub fn prepareTLS(area: []u8) usize {$/;"	function
prepared	$ZIGLIB/std/crypto/tls/Client.zig	/var prepared = prepareCiphertextRecord(c, &iovecs_buf, &ciphertext_buf, bytes, .application_data)/;"	variable
prepend	$ZIGLIB/std/linked_list.zig	/pub fn prepend(list: *Self, new_node: *Node) void {$/;"	function
prescott	$ZIGLIB/std/target/x86.zig	/pub const prescott = CpuModel{$/;"	constant
present	$ZIGLIB/std/pdb.zig	/const present = try readSparseBitVector(&reader, self.allocator)/;"	constant
preserve_when_shadowing	$ZIGLIB/std/zig/render.zig	/preserve_when_shadowing/;"	field
prestat	$ZIGLIB/std/fs/wasi.zig	/var prestat: prestat_t = undefined/;"	variable
prestat_dir_t	$ZIGLIB/std/os/wasi.zig	/^pub const prestat_dir_t = extern struct {$/;"	struct
prestat_t	$ZIGLIB/std/os/wasi.zig	/^pub const prestat_t = extern struct {$/;"	struct
prestat_u_t	$ZIGLIB/std/os/wasi.zig	/^pub const prestat_u_t = extern union {$/;"	union
prev	$ZIGLIB/std/segmented_list.zig	/pub fn prev(it: *@This()) ?ElementPtr {$/;"	function
prev65	$ZIGLIB/std/target/hexagon.zig	/prev65/;"	field
prev_address	$ZIGLIB/std/dwarf.zig	/prev_address: u64/;"	field
prev_arg0	$ZIGLIB/std/os.zig	/const prev_arg0 = child_argv[0]/;"	constant
prev_basic_block	$ZIGLIB/std/dwarf.zig	/prev_basic_block: bool/;"	field
prev_bit	$ZIGLIB/std/atomic/Atomic.zig	/const prev_bit = @intCast(std.math.Log2Int(Int), prev_bit_index)/;"	constant
prev_block	$ZIGLIB/std/crypto/pbkdf2.zig	/var prev_block: [h_len]u8 = undefined/;"	variable
prev_bucket	$ZIGLIB/std/heap/general_purpose_allocator.zig	/const prev_bucket = bucket/;"	constant
prev_byte	$ZIGLIB/std/compress/lzma/decode.zig	/const prev_byte = @as(usize, buffer.lastOr(def_prev_byte))/;"	constant
prev_cert	$ZIGLIB/std/crypto/tls/Client.zig	/var prev_cert: Certificate.Parsed = undefined/;"	variable
prev_column	$ZIGLIB/std/dwarf.zig	/prev_column: u64/;"	field
prev_end_sequence	$ZIGLIB/std/dwarf.zig	/prev_end_sequence: bool/;"	field
prev_file	$ZIGLIB/std/dwarf.zig	/prev_file: usize/;"	field
prev_freq	$ZIGLIB/std/compress/deflate/huffman_code.zig	/var prev_freq = l.last_freq/;"	variable
prev_has_extra_flags	$ZIGLIB/std/Build/CompileStep.zig	/var prev_has_extra_flags = false/;"	variable
prev_hash	$ZIGLIB/std/compress/deflate/deflate_fast.zig	/var prev_hash = hash(@truncate(u32, x))/;"	variable
prev_is_stmt	$ZIGLIB/std/dwarf.zig	/prev_is_stmt: bool/;"	field
prev_len	$ZIGLIB/std/math/big/int.zig	/const prev_len = limbs_buffer.items.len/;"	constant
prev_length	$ZIGLIB/std/compress/deflate/compressor.zig	/var prev_length = self.length/;"	variable
prev_line	$ZIGLIB/std/dwarf.zig	/prev_line: i64/;"	field
prev_mask	$ZIGLIB/std/atomic/Atomic.zig	/const prev_mask = @as(Int, 1) << prev_bit/;"	constant
prev_offset	$ZIGLIB/std/compress/deflate/compressor.zig	/var prev_offset = self.offset/;"	variable
prev_path	$ZIGLIB/std/fs/path.zig	/var prev_path = paths[first_path_index]/;"	variable
prev_refresh_timestamp	$ZIGLIB/std/Progress.zig	/^prev_refresh_timestamp: u64 = undefined/;"	field
prev_req_bytes	$ZIGLIB/std/heap/general_purpose_allocator.zig	/const prev_req_bytes = self.total_requested_bytes/;"	constant
prev_sep	$ZIGLIB/std/fs/path.zig	/const prev_sep = sepPredicate(prev_path[prev_path.len - 1])/;"	constant
prev_status	$ZIGLIB/std/Build.zig	/const prev_status = try fs.Dir.updateFile(cwd, source_path, cwd, dest_path, .{})/;"	constant
prev_tok_id	$ZIGLIB/std/c/tokenizer.zig	/prev_tok_id: std.meta.Tag(Token.Id) = .Invalid/;"	field
prev_token_end	$ZIGLIB/std/zig/render.zig	/const prev_token_end = if (token_index == 0)$/;"	constant
prev_token_tag	$ZIGLIB/std/zig/render.zig	/const prev_token_tag = token_tags[first_tok - 1]/;"	constant
prev_valid	$ZIGLIB/std/dwarf.zig	/prev_valid: bool/;"	field
prev_value	$ZIGLIB/std/fs/watch.zig	/const prev_value = gop.value_ptr.value/;"	constant
previous	$ZIGLIB/std/time.zig	/previous: Instant/;"	field
previous_field	$ZIGLIB/std/zig/Ast.zig	/previous_field/;"	field
prfchw	$ZIGLIB/std/target/x86.zig	/prfchw/;"	field
primary_secondary	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/primary_secondary: Rank/;"	field
prime	$ZIGLIB/std/treap.zig	/var prime = slice.len \/ 2/;"	variable
primes	$ZIGLIB/std/hash/wyhash.zig	/^const primes = [_]u64{$/;"	constant
primitive	$ZIGLIB/std/crypto/Certificate.zig	/primitive/;"	field
primitiveFloatTypes	$ZIGLIB/std/mem.zig	/const primitiveFloatTypes = .{$/;"	constant
primitiveIntTypes	$ZIGLIB/std/mem.zig	/const primitiveIntTypes = .{$/;"	constant
print	$ZIGLIB/std/target.zig	/fn print(r: *DynamicLinker, comptime fmt: []const u8, args: anytype) DynamicLinker {$/;"	function
printCmd	$ZIGLIB/std/Build/RunStep.zig	/^fn printCmd(cwd: ?[]const u8, argv: []const []const u8) void {$/;"	function
printIndicatorLine	$ZIGLIB/std/testing.zig	/^fn printIndicatorLine(source: []const u8, indicator_index: usize) void {$/;"	function
printLine	$ZIGLIB/std/testing.zig	/^fn printLine(line: []const u8) void {$/;"	function
printLineFromFileAnyOs	$ZIGLIB/std/debug.zig	/^fn printLineFromFileAnyOs(out_stream: anytype, line_info: LineInfo) !void {$/;"	function
printLineInfo	$ZIGLIB/std/debug.zig	/^fn printLineInfo($/;"	function
printLiteral	$ZIGLIB/std/Build/OptionsStep.zig	/^fn printLiteral(out: anytype, val: anytype, indent: u8) !void {$/;"	function
printSourceAtAddress	$ZIGLIB/std/debug.zig	/^pub fn printSourceAtAddress(debug_info: *DebugInfo, out_stream: anytype, address: usize, tty_config: TTY.Config) !void {$/;"	function
printWithVisibleNewlines	$ZIGLIB/std/testing.zig	/^fn printWithVisibleNewlines(source: []const u8) void {$/;"	function
print_name	$ZIGLIB/std/crypto/Certificate/Bundle/macos.zig	/print_name: u32/;"	field
printed	$ZIGLIB/std/fmt.zig	/var printed: usize = 0/;"	variable
priority	$ZIGLIB/std/treap.zig	/priority: usize/;"	field
private	$ZIGLIB/std/crypto/Certificate.zig	/private/;"	field
private_data	$ZIGLIB/std/event/locked.zig	/private_data: T/;"	field
private_key_usage_period	$ZIGLIB/std/crypto/Certificate.zig	/private_key_usage_period/;"	field
private_pages_resident	$ZIGLIB/std/c/darwin.zig	/private_pages_resident: u32/;"	field
privileged	$ZIGLIB/std/target/powerpc.zig	/privileged/;"	field
prk2	$ZIGLIB/std/crypto/hkdf.zig	/var prk2: [kdf.prk_length]u8 = undefined/;"	variable
prk_length	$ZIGLIB/std/crypto/hkdf.zig	/pub const prk_length = Hmac.mac_length/;"	constant
prlimit	$ZIGLIB/std/os/linux.zig	/^pub fn prlimit(pid: pid_t, resource: rlimit_resource, new_limit: ?*const rlimit, old_limit: ?*rlimit) usize {$/;"	function
prlimit64	$ZIGLIB/std/os/linux/syscalls.zig	/prlimit64 = Linux + 338/;"	field
prng	$ZIGLIB/std/treap.zig	/var prng = std.rand.DefaultPrng.init(0xdeadbeef)/;"	variable
probe	$ZIGLIB/std/target/bpf.zig	/pub const probe = CpuModel{$/;"	constant
probe_addr	$ZIGLIB/std/os/linux/bpf.zig	/probe_addr: u64/;"	field
probe_offset	$ZIGLIB/std/os/linux/bpf.zig	/probe_offset: u64/;"	field
probe_read	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const probe_read = @intToPtr(fn (dst: ?*anyopaque, size: u32, unsafe_ptr: ?*const anyopaque) c_long, 4)/;"	constant
probe_read_kernel	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const probe_read_kernel = @intToPtr(fn (dst: ?*anyopaque, size: u32, unsafe_ptr: ?*const anyopaque) c_long, 113)/;"	constant
probe_read_kernel_str	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const probe_read_kernel_str = @intToPtr(fn (dst: ?*anyopaque, size: u32, unsafe_ptr: ?*const anyopaque) c_long, 115)/;"	constant
probe_read_str	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const probe_read_str = @intToPtr(fn (dst: ?*anyopaque, size: u32, unsafe_ptr: ?*const anyopaque) c_long, 45)/;"	constant
probe_read_user	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const probe_read_user = @intToPtr(fn (dst: ?*anyopaque, size: u32, unsafe_ptr: ?*const anyopaque) c_long, 112)/;"	constant
probe_read_user_str	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const probe_read_user_str = @intToPtr(fn (dst: ?*anyopaque, size: u32, unsafe_ptr: ?*const anyopaque) c_long, 114)/;"	constant
probe_write_user	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const probe_write_user = @intToPtr(fn (dst: ?*anyopaque, src: ?*const anyopaque, len: u32) c_long, 36)/;"	constant
probs	$ZIGLIB/std/compress/lzma/decode/rangecoder.zig	/probs: [1 << num_bits]u16 = .{0x400} ** (1 << num_bits)/;"	field
proc	$ZIGLIB/std/c/solaris.zig	/proc: extern struct {$/;"	field
proc_path	$ZIGLIB/std/os.zig	/const proc_path = std.fmt.bufPrintZ(procfs_buf[0..], "\/proc\/self\/path\/{d}", .{fd}) catch unreachable/;"	constant
proc_sym	$ZIGLIB/std/pdb.zig	/const proc_sym = @ptrCast(*align(1) ProcSym, &module.symbols[symbol_i + @sizeOf(RecordPrefix)])/;"	constant
process	$ZIGLIB/std/compress/lzma/decode.zig	/pub fn process($/;"	function
processBlock	$ZIGLIB/std/crypto/argon2.zig	/^fn processBlock($/;"	function
processBlockGeneric	$ZIGLIB/std/crypto/argon2.zig	/^fn processBlockGeneric($/;"	function
processBlockXor	$ZIGLIB/std/crypto/argon2.zig	/^fn processBlockXor($/;"	function
processBlocks	$ZIGLIB/std/crypto/argon2.zig	/^fn processBlocks($/;"	function
processBlocksMt	$ZIGLIB/std/crypto/argon2.zig	/^fn processBlocksMt($/;"	function
processBlocksSt	$ZIGLIB/std/crypto/argon2.zig	/^fn processBlocksSt($/;"	function
processNext	$ZIGLIB/std/compress/lzma/decode.zig	/fn processNext($/;"	function
processNextInner	$ZIGLIB/std/compress/lzma/decode.zig	/fn processNextInner($/;"	function
processSegment	$ZIGLIB/std/crypto/argon2.zig	/^fn processSegment($/;"	function
process_madvise	$ZIGLIB/std/os/linux/syscalls.zig	/process_madvise = Linux + 440/;"	field
process_mrelease	$ZIGLIB/std/os/linux/syscalls.zig	/process_mrelease = Linux + 448/;"	field
process_vm_readv	$ZIGLIB/std/os/linux/syscalls.zig	/process_vm_readv = Linux + 345/;"	field
process_vm_writev	$ZIGLIB/std/os/linux/syscalls.zig	/process_vm_writev = Linux + 346/;"	field
processing	$ZIGLIB/std/http.zig	/processing = 102/;"	field
processor_activity_instrumentation	$ZIGLIB/std/target/s390x.zig	/processor_activity_instrumentation/;"	field
processor_assist	$ZIGLIB/std/target/s390x.zig	/processor_assist/;"	field
procfs	$ZIGLIB/std/c/solaris.zig	/^pub const procfs = struct {$/;"	struct
procfs_buf	$ZIGLIB/std/os.zig	/var procfs_buf: ["\/proc\/self\/path\/-2147483648\\x00".len]u8 = undefined/;"	variable
producer	$ZIGLIB/std/os/linux.zig	/producer: u64/;"	field
producesPdbFile	$ZIGLIB/std/Build/CompileStep.zig	/^pub fn producesPdbFile(self: *CompileStep) bool {$/;"	function
product	$ZIGLIB/std/crypto/ghash_polyval.zig	/const product = asm ($/;"	constant
product11	$ZIGLIB/compiler_rt/common.zig	/const product11: u64 = S.Word_1(a) * S.Word_1(b)/;"	constant
product12	$ZIGLIB/compiler_rt/common.zig	/const product12: u64 = S.Word_1(a) * S.Word_2(b)/;"	constant
product13	$ZIGLIB/compiler_rt/common.zig	/const product13: u64 = S.Word_1(a) * S.Word_3(b)/;"	constant
product14	$ZIGLIB/compiler_rt/common.zig	/const product14: u64 = S.Word_1(a) * S.Word_4(b)/;"	constant
product21	$ZIGLIB/compiler_rt/common.zig	/const product21: u64 = S.Word_2(a) * S.Word_1(b)/;"	constant
product22	$ZIGLIB/compiler_rt/common.zig	/const product22: u64 = S.Word_2(a) * S.Word_2(b)/;"	constant
product23	$ZIGLIB/compiler_rt/common.zig	/const product23: u64 = S.Word_2(a) * S.Word_3(b)/;"	constant
product24	$ZIGLIB/compiler_rt/common.zig	/const product24: u64 = S.Word_2(a) * S.Word_4(b)/;"	constant
product31	$ZIGLIB/compiler_rt/common.zig	/const product31: u64 = S.Word_3(a) * S.Word_1(b)/;"	constant
product32	$ZIGLIB/compiler_rt/common.zig	/const product32: u64 = S.Word_3(a) * S.Word_2(b)/;"	constant
product33	$ZIGLIB/compiler_rt/common.zig	/const product33: u64 = S.Word_3(a) * S.Word_3(b)/;"	constant
product34	$ZIGLIB/compiler_rt/common.zig	/const product34: u64 = S.Word_3(a) * S.Word_4(b)/;"	constant
product41	$ZIGLIB/compiler_rt/common.zig	/const product41: u64 = S.Word_4(a) * S.Word_1(b)/;"	constant
product42	$ZIGLIB/compiler_rt/common.zig	/const product42: u64 = S.Word_4(a) * S.Word_2(b)/;"	constant
product43	$ZIGLIB/compiler_rt/common.zig	/const product43: u64 = S.Word_4(a) * S.Word_3(b)/;"	constant
product44	$ZIGLIB/compiler_rt/common.zig	/const product44: u64 = S.Word_4(a) * S.Word_4(b)/;"	constant
productExponent	$ZIGLIB/compiler_rt/mulf3.zig	/var productExponent: i32 = @intCast(i32, aExponent + bExponent) - exponentBias + scale/;"	variable
productHi	$ZIGLIB/compiler_rt/mulf3.zig	/var productHi: ZSignificand = undefined/;"	variable
productLo	$ZIGLIB/compiler_rt/mulf3.zig	/var productLo: ZSignificand = undefined/;"	variable
productSign	$ZIGLIB/compiler_rt/mulf3.zig	/const productSign: Z = (@bitCast(Z, a) ^ @bitCast(Z, b)) & signBit/;"	constant
product_id	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/product_id: u16 align(1)/;"	field
prof	$ZIGLIB/std/os/linux/syscalls.zig	/prof = Linux + 44/;"	field
prof_unpr	$ZIGLIB/std/target/arm.zig	/prof_unpr/;"	field
profil	$ZIGLIB/std/os/linux/syscalls.zig	/profil = Linux + 98/;"	field
prog	$ZIGLIB/std/os/linux/bpf.zig	/const prog = try prog_load(.socket_filter, &good_prog, null, "MIT", 0)/;"	constant
prog_array	$ZIGLIB/std/os/linux/bpf.zig	/prog_array/;"	field
prog_attach	$ZIGLIB/std/os/linux/bpf.zig	/prog_attach: ProgAttachAttr/;"	field
prog_btf_fd	$ZIGLIB/std/os/linux/bpf.zig	/prog_btf_fd: fd_t/;"	field
prog_cnt	$ZIGLIB/std/os/linux/bpf.zig	/prog_cnt: u32/;"	field
prog_detach	$ZIGLIB/std/os/linux/bpf.zig	/prog_detach/;"	field
prog_fd	$ZIGLIB/std/os/linux/bpf.zig	/prog_fd: fd_t/;"	field
prog_flags	$ZIGLIB/std/os/linux/bpf.zig	/prog_flags: u32/;"	field
prog_get_fd_by_id	$ZIGLIB/std/os/linux/bpf.zig	/prog_get_fd_by_id/;"	field
prog_get_next_id	$ZIGLIB/std/os/linux/bpf.zig	/prog_get_next_id/;"	field
prog_id	$ZIGLIB/std/os/linux/bpf.zig	/prog_id: u32/;"	field
prog_ids	$ZIGLIB/std/os/linux/bpf.zig	/prog_ids: u64/;"	field
prog_ifindex	$ZIGLIB/std/os/linux/bpf.zig	/prog_ifindex: u32/;"	field
prog_load	$ZIGLIB/std/os/linux/bpf.zig	/prog_load: ProgLoadAttr/;"	field
prog_name	$ZIGLIB/std/process.zig	/const prog_name = it.next() orelse unreachable/;"	constant
prog_query	$ZIGLIB/std/os/linux/bpf.zig	/prog_query/;"	field
prog_start_offset	$ZIGLIB/std/dwarf.zig	/const prog_start_offset = (try seekable.getPos()) + prologue_length/;"	constant
prog_test_run	$ZIGLIB/std/os/linux/bpf.zig	/prog_test_run/;"	field
prog_type	$ZIGLIB/std/os/linux/bpf.zig	/prog_type: u32/;"	field
program	$ZIGLIB/std/dwarf.zig	/program = 0x2/;"	field
program_header_iterator	$ZIGLIB/std/elf.zig	/pub fn program_header_iterator(self: Header, parse_source: anytype) ProgramHeaderIterator(@TypeOf(parse_source)) {$/;"	function
progress	$ZIGLIB/std/Progress.zig	/var progress = Progress{}/;"	variable
proj	$ZIGLIB/std/math/complex/proj.zig	/^pub fn proj(z: anytype) Complex(@TypeOf(z.re)) {$/;"	function
projid_t	$ZIGLIB/std/c/solaris.zig	/^pub const projid_t = id_t/;"	constant
prologue_length	$ZIGLIB/std/dwarf.zig	/const prologue_length = if (is_64) try in.readInt(u64, di.endian) else try in.readInt(u32, di.endian)/;"	constant
prominent_compile_errors	$ZIGLIB/std/Build.zig	/^prominent_compile_errors: bool/;"	field
promiscuous_flag	$ZIGLIB/std/os/uefi/protocols/managed_network_protocol.zig	/promiscuous_flag: bool/;"	field
promote	$ZIGLIB/std/heap/arena_allocator.zig	/pub fn promote(self: State, child_allocator: Allocator) ArenaAllocator {$/;"	function
promoteContext	$ZIGLIB/std/hash_map.zig	/pub fn promoteContext(self: Self, allocator: Allocator, ctx: Context) Managed {$/;"	function
promoteIntLiteral	$ZIGLIB/std/zig/c_translation.zig	/^pub fn promoteIntLiteral($/;"	function
promote_alloca	$ZIGLIB/std/target/amdgpu.zig	/promote_alloca/;"	field
properties	$ZIGLIB/std/compress/lzma/decode.zig	/properties: Properties/;"	field
properties_size	$ZIGLIB/std/compress/xz/block.zig	/const properties_size = try std.leb.readULEB128(u64, header_reader)/;"	constant
props	$ZIGLIB/std/compress/lzma2/decode.zig	/var props = try reader.readByte()/;"	variable
prot	$ZIGLIB/std/dynamic_library.zig	/const prot = elfToMmapProt(ph.p_flags)/;"	constant
protected	$ZIGLIB/std/builtin.zig	/protected/;"	field
protection	$ZIGLIB/std/c/haiku.zig	/protection: u32/;"	field
proto	$ZIGLIB/std/net.zig	/const proto = if (address.any.family == os.AF.UNIX) @as(u32, 0) else os.IPPROTO.TCP/;"	constant
proto_node	$ZIGLIB/std/zig/Ast.zig	/proto_node: Node.Index/;"	field
protocol	$ZIGLIB/std/os/windows/ws2_32.zig	/protocol: i32/;"	field
protocol_type	$ZIGLIB/std/os/uefi/protocols/managed_network_protocol.zig	/protocol_type: u16/;"	field
protocol_type_filter	$ZIGLIB/std/os/uefi/protocols/managed_network_protocol.zig	/protocol_type_filter: u16/;"	field
protocol_version	$ZIGLIB/std/crypto/tls.zig	/protocol_version = 70/;"	field
protocolsPerHandle	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/protocolsPerHandle: *const fn (handle: Handle, protocol_buffer: *[*]*align(8) const Guid, protocol_buffer_count: *usize) callconv(.C) Status/;"	field
prototyped	$ZIGLIB/std/dwarf/AT.zig	/^pub const prototyped = 0x27/;"	constant
provide_buffers	$ZIGLIB/std/os/linux/io_uring.zig	/pub fn provide_buffers($/;"	function
proxy_auth_required	$ZIGLIB/std/http.zig	/proxy_auth_required = 407/;"	field
prt_strict_null	$ZIGLIB/std/target/amdgpu.zig	/prt_strict_null/;"	field
ps2_bit_count	$ZIGLIB/std/packed_int_array.zig	/const ps2_bit_count = (bits * packed_slice_two.len) + packed_slice_two.bit_offset/;"	constant
ps2_expected_bytes	$ZIGLIB/std/packed_int_array.zig	/const ps2_expected_bytes = (ps2_bit_count + 7) \/ 8/;"	constant
ps3_bit_count	$ZIGLIB/std/packed_int_array.zig	/const ps3_bit_count = (bits * packed_slice_three.len) + packed_slice_three.bit_offset/;"	constant
ps3_expected_bytes	$ZIGLIB/std/packed_int_array.zig	/const ps3_expected_bytes = (ps3_bit_count + 7) \/ 8/;"	constant
ps_bit_count	$ZIGLIB/std/packed_int_array.zig	/const ps_bit_count = (bits * packed_slice.len) + packed_slice.bit_offset/;"	constant
ps_expected_bytes	$ZIGLIB/std/packed_int_array.zig	/const ps_expected_bytes = (ps_bit_count + 7) \/ 8/;"	constant
ps_len	$ZIGLIB/std/crypto/Certificate.zig	/const ps_len = modulus_len - (hash_der.len + msg_hashed.len) - 3/;"	constant
pse_bit_count	$ZIGLIB/std/packed_int_array.zig	/const pse_bit_count = (bits * packed_slice_edge.len) + packed_slice_edge.bit_offset/;"	constant
pse_expected_bytes	$ZIGLIB/std/packed_int_array.zig	/const pse_expected_bytes = (pse_bit_count + 7) \/ 8/;"	constant
pselect6	$ZIGLIB/std/os/linux/syscalls.zig	/pselect6 = Linux + 301/;"	field
pselect6_time64	$ZIGLIB/std/os/linux/syscalls.zig	/pselect6_time64 = Linux + 413/;"	field
pseudo_HDRCMPLT	$ZIGLIB/std/c/freebsd.zig	/pub const pseudo_HDRCMPLT = 31/;"	constant
pseudo_KEY	$ZIGLIB/std/c/freebsd.zig	/pub const pseudo_KEY = 27/;"	constant
pseudo_PIP	$ZIGLIB/std/c/freebsd.zig	/pub const pseudo_PIP = 25/;"	constant
pseudo_RTIP	$ZIGLIB/std/c/freebsd.zig	/pub const pseudo_RTIP = 22/;"	constant
pseudo_XTP	$ZIGLIB/std/c/freebsd.zig	/pub const pseudo_XTP = 19/;"	constant
psk_key_exchange_modes	$ZIGLIB/std/crypto/tls.zig	/psk_key_exchange_modes = 45/;"	field
pstate	$ZIGLIB/std/os/linux/arm64.zig	/pstate: usize/;"	field
pta_flags	$ZIGLIB/std/c/netbsd.zig	/pta_flags: i32/;"	field
pta_magic	$ZIGLIB/std/c/netbsd.zig	/pta_magic: u32/;"	field
pta_private	$ZIGLIB/std/c/netbsd.zig	/pta_private: ?*anyopaque/;"	field
pthread_attr_t	$ZIGLIB/std/c/solaris.zig	/^pub const pthread_attr_t = extern struct {$/;"	struct
pthread_cond_t	$ZIGLIB/std/c/solaris.zig	/^pub const pthread_cond_t = extern struct {$/;"	struct
pthread_key_t	$ZIGLIB/std/c/solaris.zig	/^pub const pthread_key_t = c_int/;"	constant
pthread_mutex_t	$ZIGLIB/std/c/solaris.zig	/^pub const pthread_mutex_t = extern struct {$/;"	struct
pthread_rwlock_t	$ZIGLIB/std/c/solaris.zig	/^pub const pthread_rwlock_t = extern struct {$/;"	struct
pthread_spin_t	$ZIGLIB/std/c/netbsd.zig	/^const pthread_spin_t = switch (builtin.cpu.arch) {$/;"	constant
pthread_spinlock_t	$ZIGLIB/std/c/openbsd.zig	/^pub const pthread_spinlock_t = extern struct {$/;"	struct
pthread_t	$ZIGLIB/std/c.zig	/^pub const pthread_t = *opaque {}/;"	constant
ptr1	$ZIGLIB/std/heap/general_purpose_allocator.zig	/const ptr1 = try allocator.alloc(u64, 42768)/;"	constant
ptr2	$ZIGLIB/std/heap/general_purpose_allocator.zig	/const ptr2 = try allocator.alloc(u64, 52768)/;"	constant
ptr3	$ZIGLIB/std/heap/general_purpose_allocator.zig	/const ptr3 = try allocator.alloc(u64, 62768)/;"	constant
ptr64	$ZIGLIB/std/target/mips.zig	/ptr64/;"	field
ptrBitWidth	$ZIGLIB/std/target.zig	/pub fn ptrBitWidth(arch: Arch) u16 {$/;"	function
ptrConst	$ZIGLIB/std/meta/trailer_flags.zig	/pub fn ptrConst(self: Self, p: [*]align(@alignOf(Fields)) const u8, comptime field: FieldEnum) *const Field(field) {$/;"	function
ptrInfo	$ZIGLIB/std/zig/c_translation.zig	/^fn ptrInfo(comptime PtrType: type) std.builtin.Type.Pointer {$/;"	function
ptrType	$ZIGLIB/std/zig/Ast.zig	/^pub fn ptrType(tree: Ast, node: Node.Index) full.PtrType {$/;"	function
ptrTypeAligned	$ZIGLIB/std/zig/Ast.zig	/^pub fn ptrTypeAligned(tree: Ast, node: Node.Index) full.PtrType {$/;"	function
ptrTypeBitRange	$ZIGLIB/std/zig/Ast.zig	/^pub fn ptrTypeBitRange(tree: Ast, node: Node.Index) full.PtrType {$/;"	function
ptrTypeSentinel	$ZIGLIB/std/zig/Ast.zig	/^pub fn ptrTypeSentinel(tree: Ast, node: Node.Index) full.PtrType {$/;"	function
ptr_align	$ZIGLIB/std/os/uefi/pool_allocator.zig	/const ptr_align = @as(usize, 1) << @intCast(Allocator.Log2Align, log2_ptr_align)/;"	constant
ptr_info	$ZIGLIB/std/mem.zig	/const ptr_info = @typeInfo(Result).Pointer/;"	constant
ptr_mod_on_array_child_type	$ZIGLIB/std/zig/Ast.zig	/ptr_mod_on_array_child_type/;"	field
ptr_size	$ZIGLIB/std/zig/c_translation.zig	/const ptr_size = @sizeOf(*anyopaque)/;"	constant
ptr_to_member_type	$ZIGLIB/std/dwarf/TAG.zig	/^pub const ptr_to_member_type = 0x1f/;"	constant
ptr_type	$ZIGLIB/std/zig/Ast.zig	/ptr_type/;"	field
ptr_type_aligned	$ZIGLIB/std/zig/Ast.zig	/ptr_type_aligned/;"	field
ptr_type_bit_range	$ZIGLIB/std/zig/Ast.zig	/ptr_type_bit_range/;"	field
ptr_type_sentinel	$ZIGLIB/std/zig/Ast.zig	/ptr_type_sentinel/;"	field
ptrace	$ZIGLIB/std/os/ptrace.zig	/pub fn ptrace(request: i32, pid: pid_t, addr: ?[*]u8, signal: i32) PtraceError!void {$/;"	function
ptrace_state	$ZIGLIB/std/c/netbsd.zig	/ptrace_state: extern struct {$/;"	field
ptrs	$ZIGLIB/std/multi_array_list.zig	/ptrs: [fields.len][*]u8/;"	field
ptwrite	$ZIGLIB/std/target/x86.zig	/ptwrite/;"	field
ptx32	$ZIGLIB/std/target/nvptx.zig	/ptx32/;"	field
ptx40	$ZIGLIB/std/target/nvptx.zig	/ptx40/;"	field
ptx41	$ZIGLIB/std/target/nvptx.zig	/ptx41/;"	field
ptx42	$ZIGLIB/std/target/nvptx.zig	/ptx42/;"	field
ptx43	$ZIGLIB/std/target/nvptx.zig	/ptx43/;"	field
ptx50	$ZIGLIB/std/target/nvptx.zig	/ptx50/;"	field
ptx60	$ZIGLIB/std/target/nvptx.zig	/ptx60/;"	field
ptx61	$ZIGLIB/std/target/nvptx.zig	/ptx61/;"	field
ptx63	$ZIGLIB/std/target/nvptx.zig	/ptx63/;"	field
ptx64	$ZIGLIB/std/target/nvptx.zig	/ptx64/;"	field
ptx65	$ZIGLIB/std/target/nvptx.zig	/ptx65/;"	field
ptx70	$ZIGLIB/std/target/nvptx.zig	/ptx70/;"	field
ptx71	$ZIGLIB/std/target/nvptx.zig	/ptx71/;"	field
ptx72	$ZIGLIB/std/target/nvptx.zig	/ptx72/;"	field
ptx73	$ZIGLIB/std/target/nvptx.zig	/ptx73/;"	field
ptx74	$ZIGLIB/std/target/nvptx.zig	/ptx74/;"	field
ptx75	$ZIGLIB/std/target/nvptx.zig	/ptx75/;"	field
pubKey	$ZIGLIB/std/crypto/Certificate.zig	/pub fn pubKey(p: Parsed) []const u8 {$/;"	function
pubKeySigAlgo	$ZIGLIB/std/crypto/Certificate.zig	/pub fn pubKeySigAlgo(p: Parsed) []const u8 {$/;"	function
pub_key	$ZIGLIB/std/crypto/tls/Client.zig	/const pub_key = subject.pubKey()/;"	constant
pub_key_algo	$ZIGLIB/std/crypto/Certificate.zig	/var pub_key_algo: Parsed.PubKeyAlgo = undefined/;"	variable
pub_key_algo_elem	$ZIGLIB/std/crypto/Certificate.zig	/const pub_key_algo_elem = try der.Element.parse(cert_bytes, pub_key_signature_algorithm.slice.start)/;"	constant
pub_key_algo_tag	$ZIGLIB/std/crypto/Certificate.zig	/const pub_key_algo_tag = try parseAlgorithmCategory(cert_bytes, pub_key_algo_elem)/;"	constant
pub_key_elem	$ZIGLIB/std/crypto/Certificate.zig	/const pub_key_elem = try der.Element.parse(cert_bytes, pub_key_signature_algorithm.slice.end)/;"	constant
pub_key_info	$ZIGLIB/std/crypto/Certificate.zig	/const pub_key_info = try der.Element.parse(cert_bytes, subject.slice.end)/;"	constant
pub_key_seq	$ZIGLIB/std/crypto/Certificate.zig	/const pub_key_seq = try der.Element.parse(pub_key, 0)/;"	constant
pub_key_signature_algorithm	$ZIGLIB/std/crypto/Certificate.zig	/const pub_key_signature_algorithm = try der.Element.parse(cert_bytes, pub_key_info.slice.start)/;"	constant
pub_key_slice	$ZIGLIB/std/crypto/Certificate.zig	/pub_key_slice: Slice/;"	field
publicKeyBytes	$ZIGLIB/std/crypto/25519/ed25519.zig	/pub fn publicKeyBytes(self: SecretKey) [PublicKey.encoded_length]u8 {$/;"	function
publicKeyFromEd25519	$ZIGLIB/std/crypto/25519/x25519.zig	/pub fn publicKeyFromEd25519(ed25519_public_key: crypto.sign.Ed25519.PublicKey) (IdentityElementError || EncodingError)![public_length]u8 {$/;"	function
public_key	$ZIGLIB/std/crypto/ecdsa.zig	/public_key: PublicKey/;"	field
public_key_bytes	$ZIGLIB/std/crypto/25519/ed25519.zig	/var public_key_bytes: [32]u8 = undefined/;"	variable
public_key_hash	$ZIGLIB/std/crypto/Certificate/Bundle/macos.zig	/public_key_hash: u32/;"	field
public_key_hex	$ZIGLIB/std/crypto/25519/ed25519.zig	/public_key_hex: *const [64:0]u8/;"	field
public_length	$ZIGLIB/std/crypto/25519/x25519.zig	/pub const public_length = 32/;"	constant
pull	$ZIGLIB/std/sort.zig	/var pull = [_]Pull{$/;"	variable
pull_index	$ZIGLIB/std/sort.zig	/var pull_index: usize = 0/;"	variable
pump	$ZIGLIB/std/fifo.zig	/pub fn pump(self: *Self, src_reader: anytype, dest_writer: anytype) !void {$/;"	function
punctuation	$ZIGLIB/std/zig/render.zig	/const punctuation = switch (space) {$/;"	constant
pure	$ZIGLIB/std/dwarf/AT.zig	/^pub const pure = 0x67/;"	constant
purgeable_volatile_pmap	$ZIGLIB/std/c/darwin.zig	/purgeable_volatile_pmap: mach_vm_size_t/;"	field
purgeable_volatile_resident	$ZIGLIB/std/c/darwin.zig	/purgeable_volatile_resident: mach_vm_size_t/;"	field
purgeable_volatile_virtual	$ZIGLIB/std/c/darwin.zig	/purgeable_volatile_virtual: mach_vm_size_t/;"	field
push	$ZIGLIB/std/json.zig	/pub fn push(self: *Self, ty: AggregateContainerType) ?void {$/;"	function
pushCv	$ZIGLIB/std/crypto/blake3.zig	/fn pushCv(self: *Blake3, cv: [8]u32) void {$/;"	function
pushFirst	$ZIGLIB/std/atomic/stack.zig	/pub fn pushFirst(self: *Self, node: *Node) ?*Node {$/;"	function
pushIndent	$ZIGLIB/std/zig/render.zig	/pub fn pushIndent(self: *Self) void {$/;"	function
pushIndentNextLine	$ZIGLIB/std/zig/render.zig	/pub fn pushIndentNextLine(self: *Self) void {$/;"	function
pushIndentOneShot	$ZIGLIB/std/zig/render.zig	/pub fn pushIndentOneShot(self: *Self) void {$/;"	function
pushInstalledFile	$ZIGLIB/std/Build.zig	/^pub fn pushInstalledFile(self: *Build, dir: InstallDir, dest_rel_path: []const u8) void {$/;"	function
pushState	$ZIGLIB/std/json/write_stream.zig	/fn pushState(self: *Self, state: State) void {$/;"	function
pushToParent	$ZIGLIB/std/json.zig	/fn pushToParent(p: *Parser, value: *const Value) !void {$/;"	function
push_object_address	$ZIGLIB/std/dwarf/OP.zig	/^pub const push_object_address = 0x97/;"	constant
pushpop	$ZIGLIB/std/target/csky.zig	/pushpop/;"	field
putAssumeCapacity	$ZIGLIB/std/hash_map.zig	/pub fn putAssumeCapacity(self: *Self, key: K, value: V) void {$/;"	function
putAssumeCapacityContext	$ZIGLIB/std/hash_map.zig	/pub fn putAssumeCapacityContext(self: *Self, key: K, value: V, ctx: Context) void {$/;"	function
putAssumeCapacityNoClobber	$ZIGLIB/std/hash_map.zig	/pub fn putAssumeCapacityNoClobber(self: *Self, key: K, value: V) void {$/;"	function
putAssumeCapacityNoClobberContext	$ZIGLIB/std/hash_map.zig	/pub fn putAssumeCapacityNoClobberContext(self: *Self, key: K, value: V, ctx: Context) void {$/;"	function
putBack	$ZIGLIB/std/io/peek_stream.zig	/pub fn putBack(self: *Self, bytes: []const u8) !void {$/;"	function
putBackByte	$ZIGLIB/std/io/peek_stream.zig	/pub fn putBackByte(self: *Self, byte: u8) !void {$/;"	function
putContext	$ZIGLIB/std/hash_map.zig	/pub fn putContext(self: *Self, allocator: Allocator, key: K, value: V, ctx: Context) Allocator.Error!void {$/;"	function
putMove	$ZIGLIB/std/process.zig	/pub fn putMove(self: *EnvMap, key: []u8, value: []u8) !void {$/;"	function
putNoClobber	$ZIGLIB/std/hash_map.zig	/pub fn putNoClobber(self: *Self, key: K, value: V) Allocator.Error!void {$/;"	function
putNoClobberContext	$ZIGLIB/std/hash_map.zig	/pub fn putNoClobberContext(self: *Self, allocator: Allocator, key: K, value: V, ctx: Context) Allocator.Error!void {$/;"	function
putUninitialized	$ZIGLIB/std/enums.zig	/pub fn putUninitialized(self: *Self, key: Key) *Value {$/;"	function
putValue	$ZIGLIB/std/Build/ConfigHeaderStep.zig	/^fn putValue(self: *ConfigHeaderStep, field_name: []const u8, comptime T: type, v: T) !void {$/;"	function
put_count	$ZIGLIB/std/event/channel.zig	/var put_count = @atomicRmw(usize, &self.put_count, .Sub, 1, .SeqCst)/;"	variable
put_node	$ZIGLIB/std/event/channel.zig	/const put_node = &self.putters.get().?.data/;"	constant
put_sum	$ZIGLIB/std/atomic/stack.zig	/put_sum: isize/;"	field
put_thread_count	$ZIGLIB/std/atomic/stack.zig	/^const put_thread_count = 3/;"	constant
putpmsg	$ZIGLIB/std/os/linux/syscalls.zig	/putpmsg = Linux + 209/;"	field
puts_done	$ZIGLIB/std/atomic/stack.zig	/puts_done: bool/;"	field
puts_per_thread	$ZIGLIB/std/atomic/stack.zig	/^const puts_per_thread = 500/;"	constant
putter	$ZIGLIB/std/event/channel.zig	/var putter = async testChannelPutter(&channel)/;"	variable
putter_frame	$ZIGLIB/std/fs/watch.zig	/putter_frame: @Frame(windowsDirReader)/;"	field
putters	$ZIGLIB/std/event/channel.zig	/putters: std.atomic.Queue(PutNode)/;"	field
pw_change	$ZIGLIB/std/c/openbsd.zig	/pw_change: time_t/;"	field
pw_class	$ZIGLIB/std/c/openbsd.zig	/pw_class: ?[*:0]const u8/;"	field
pw_dir	$ZIGLIB/std/c/openbsd.zig	/pw_dir: ?[*:0]const u8/;"	field
pw_expire	$ZIGLIB/std/c/openbsd.zig	/pw_expire: time_t/;"	field
pw_gecos	$ZIGLIB/std/c/openbsd.zig	/pw_gecos: ?[*:0]const u8/;"	field
pw_gid	$ZIGLIB/std/c/openbsd.zig	/pw_gid: gid_t/;"	field
pw_name	$ZIGLIB/std/c/openbsd.zig	/pw_name: ?[*:0]const u8/;"	field
pw_passwd	$ZIGLIB/std/c/openbsd.zig	/pw_passwd: ?[*:0]const u8/;"	field
pw_shell	$ZIGLIB/std/c/openbsd.zig	/pw_shell: ?[*:0]const u8/;"	field
pw_uid	$ZIGLIB/std/c/openbsd.zig	/pw_uid: uid_t/;"	field
pwhash	$ZIGLIB/std/crypto.zig	/^pub const pwhash = struct {$/;"	struct
pwhash_str_length	$ZIGLIB/std/crypto/scrypt.zig	/pub const pwhash_str_length: usize = 101/;"	constant
pwr10	$ZIGLIB/std/target/powerpc.zig	/pub const pwr10 = CpuModel{$/;"	constant
pwr3	$ZIGLIB/std/target/powerpc.zig	/pub const pwr3 = CpuModel{$/;"	constant
pwr4	$ZIGLIB/std/target/powerpc.zig	/pub const pwr4 = CpuModel{$/;"	constant
pwr5	$ZIGLIB/std/target/powerpc.zig	/pub const pwr5 = CpuModel{$/;"	constant
pwr5x	$ZIGLIB/std/target/powerpc.zig	/pub const pwr5x = CpuModel{$/;"	constant
pwr6	$ZIGLIB/std/target/powerpc.zig	/pub const pwr6 = CpuModel{$/;"	constant
pwr6x	$ZIGLIB/std/target/powerpc.zig	/pub const pwr6x = CpuModel{$/;"	constant
pwr7	$ZIGLIB/std/target/powerpc.zig	/pub const pwr7 = CpuModel{$/;"	constant
pwr8	$ZIGLIB/std/target/powerpc.zig	/pub const pwr8 = CpuModel{$/;"	constant
pwr9	$ZIGLIB/std/target/powerpc.zig	/pub const pwr9 = CpuModel{$/;"	constant
pwrite	$ZIGLIB/std/os/plan9.zig	/^pub fn pwrite(fd: usize, buf: [*]const u8, count: usize, offset: usize) usize {$/;"	function
pwrite64	$ZIGLIB/std/os/linux/syscalls.zig	/pwrite64 = Linux + 201/;"	field
pwriteAll	$ZIGLIB/std/fs/file.zig	/pub fn pwriteAll(self: File, bytes: []const u8, offset: u64) PWriteError!void {$/;"	function
pwrite_sym	$ZIGLIB/std/os.zig	/const pwrite_sym = if (builtin.os.tag == .linux and builtin.link_libc)$/;"	constant
pwritev	$ZIGLIB/std/os/linux/syscalls.zig	/pwritev = Linux + 331/;"	field
pwritev2	$ZIGLIB/std/os/linux/syscalls.zig	/pwritev2 = Linux + 362/;"	field
pwritevAll	$ZIGLIB/std/fs/file.zig	/pub fn pwritevAll(self: File, iovecs: []os.iovec_const, offset: u64) PWriteError!void {$/;"	function
pwritev_sym	$ZIGLIB/std/os.zig	/const pwritev_sym = if (builtin.os.tag == .linux and builtin.link_libc)$/;"	constant
q127blo	$ZIGLIB/compiler_rt/divtf3.zig	/const q127blo: u64 = @truncate(u64, bSignificand << 15)/;"	constant
q31b	$ZIGLIB/compiler_rt/divsf3.zig	/const q31b = bSignificand << 8/;"	constant
q63b	$ZIGLIB/compiler_rt/divxf3.zig	/const q63b = @intCast(u64, bSignificand)/;"	constant
q63blo	$ZIGLIB/compiler_rt/divdf3.zig	/const q63blo: u32 = @truncate(u32, bSignificand << 11)/;"	constant
q_all	$ZIGLIB/compiler_rt/udivmod.zig	/const q_all = (@bitCast(DoubleInt, q) << 1) | carry/;"	constant
q_positive	$ZIGLIB/std/math/big/int.zig	/const q_positive = (x.positive == y.positive)/;"	constant
qbuf	$ZIGLIB/std/net.zig	/var qbuf: [2][280]u8 = undefined/;"	variable
qcnt	$ZIGLIB/std/os/linux/sparc64.zig	/qcnt: u8/;"	field
qdcount	$ZIGLIB/std/net.zig	/var qdcount = r[4] * @as(usize, 256) + r[5]/;"	variable
qdiv0	$ZIGLIB/std/crypto/25519/scalar.zig	/const qdiv0 = z03/;"	constant
qdiv1	$ZIGLIB/std/crypto/25519/scalar.zig	/const qdiv1 = z13/;"	constant
qdiv2	$ZIGLIB/std/crypto/25519/scalar.zig	/const qdiv2 = z23/;"	constant
qdiv3	$ZIGLIB/std/crypto/25519/scalar.zig	/const qdiv3 = z33/;"	constant
qdiv4	$ZIGLIB/std/crypto/25519/scalar.zig	/const qdiv4 = z43/;"	constant
qemu	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/qemu: []const u8/;"	field
qemu_fixes_dl	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/qemu_fixes_dl: bool = false/;"	field
qentsz	$ZIGLIB/std/os/linux/sparc64.zig	/qentsz: u8/;"	field
qhat	$ZIGLIB/compiler_rt/udivmodei4.zig	/var qhat = uu \/ limb(&vn, n)/;"	variable
qmu4_	$ZIGLIB/std/crypto/25519/scalar.zig	/const qmu4_ = t410/;"	constant
qmu5_	$ZIGLIB/std/crypto/25519/scalar.zig	/const qmu5_ = t51/;"	constant
qmu6_	$ZIGLIB/std/crypto/25519/scalar.zig	/const qmu6_ = t61/;"	constant
qmu7_	$ZIGLIB/std/crypto/25519/scalar.zig	/const qmu7_ = t71/;"	constant
qmu8_	$ZIGLIB/std/crypto/25519/scalar.zig	/const qmu8_ = t81/;"	constant
qmu9_	$ZIGLIB/std/crypto/25519/scalar.zig	/const qmu9_ = t91/;"	constant
qmul0	$ZIGLIB/std/crypto/25519/scalar.zig	/const qmul0 = t010/;"	constant
qmul1	$ZIGLIB/std/crypto/25519/scalar.zig	/const qmul1 = t110/;"	constant
qmul2	$ZIGLIB/std/crypto/25519/scalar.zig	/const qmul2 = t210/;"	constant
qmul3	$ZIGLIB/std/crypto/25519/scalar.zig	/const qmul3 = t34/;"	constant
qmul4	$ZIGLIB/std/crypto/25519/scalar.zig	/const qmul4 = t42/;"	constant
qnanRep	$ZIGLIB/compiler_rt/mulf3.zig	/const qnanRep = @bitCast(Z, math.nan(T)) | quietBit/;"	constant
qnan_f128	$ZIGLIB/std/math.zig	/^pub const qnan_f128 = @bitCast(f128, qnan_u128)/;"	constant
qnan_f16	$ZIGLIB/std/math.zig	/^pub const qnan_f16 = @bitCast(f16, qnan_u16)/;"	constant
qnan_f32	$ZIGLIB/std/math.zig	/^pub const qnan_f32 = @bitCast(f32, qnan_u32)/;"	constant
qnan_f64	$ZIGLIB/std/math.zig	/^pub const qnan_f64 = @bitCast(f64, qnan_u64)/;"	constant
qnan_f80	$ZIGLIB/std/math.zig	/^pub const qnan_f80 = make_f80(F80{ .fraction = 0xC000000000000000, .exp = 0x7fff })/;"	constant
qnan_u128	$ZIGLIB/std/math.zig	/^pub const qnan_u128 = @as(u128, 0x7fff8000000000000000000000000000)/;"	constant
qnan_u16	$ZIGLIB/std/math.zig	/^pub const qnan_u16 = @as(u16, 0x7E00)/;"	constant
qnan_u32	$ZIGLIB/std/math.zig	/^pub const qnan_u32 = @as(u32, 0x7FC00000)/;"	constant
qnan_u64	$ZIGLIB/std/math.zig	/^pub const qnan_u64 = @as(u64, 0x7ff8000000000000)/;"	constant
qregs	$ZIGLIB/std/os/linux/sparc64.zig	/qregs: [16]c_longdouble/;"	field
qspare	$ZIGLIB/std/c/darwin.zig	/qspare: [2]i64/;"	field
qspare1	$ZIGLIB/std/c/dragonfly.zig	/qspare1: i64/;"	field
qspare2	$ZIGLIB/std/c/dragonfly.zig	/qspare2: i64/;"	field
quadword_atomics	$ZIGLIB/std/target/powerpc.zig	/quadword_atomics/;"	field
qual	$ZIGLIB/std/zig/system/NativePaths.zig	/const qual = native_target.cpu.arch.ptrBitWidth()/;"	constant
query	$ZIGLIB/std/os/linux/bpf.zig	/query: QueryAttr/;"	field
queryCapacity	$ZIGLIB/std/heap/arena_allocator.zig	/pub fn queryCapacity(self: ArenaAllocator) usize {$/;"	function
queryCapsuleCapabilities	$ZIGLIB/std/os/uefi/tables/runtime_services.zig	/queryCapsuleCapabilities: *const fn (capsule_header_array: **CapsuleHeader, capsule_count: usize, maximum_capsule_size: *usize, resetType: ResetType) callconv(.C) Status/;"	field
queryMode	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/pub fn queryMode(self: *const SimpleTextOutputProtocol, mode_number: usize, columns: *usize, rows: *usize) Status {$/;"	function
queryVariableInfo	$ZIGLIB/std/os/uefi/tables/runtime_services.zig	/queryVariableInfo: *const fn (attributes: *u32, maximum_variable_storage_size: *u64, remaining_variable_storage_size: *u64, maximum_variable_size: *u64) callconv(.C) Status/;"	field
query_flags	$ZIGLIB/std/os/linux/bpf.zig	/query_flags: u32/;"	field
query_module	$ZIGLIB/std/os/linux/syscalls.zig	/query_module = Linux + 187/;"	field
question_mark	$ZIGLIB/std/zig/tokenizer.zig	/question_mark/;"	field
queue	$ZIGLIB/std/priority_queue.zig	/var queue = Self{$/;"	variable
queue_head	$ZIGLIB/std/Thread/Futex.zig	/var queue_head = if (entry.node) |node| @fieldParentPtr(Waiter, "node", node) else null/;"	variable
queue_id	$ZIGLIB/std/os/linux.zig	/queue_id: u32/;"	field
queue_items	$ZIGLIB/std/priority_queue.zig	/const queue_items = try testing.allocator.dupe(u32, &items)/;"	constant
queue_node	$ZIGLIB/std/event/channel.zig	/var queue_node = std.atomic.Queue(PutNode).Node{$/;"	variable
queue_size	$ZIGLIB/std/priority_dequeue.zig	/const queue_size = 1_000/;"	constant
queue_tail	$ZIGLIB/std/Thread/Futex.zig	/const queue_tail = if (queue_head) |head| head.tail else null/;"	constant
quietBit	$ZIGLIB/compiler_rt/mulf3.zig	/const quietBit = integerBit >> 1/;"	constant
quotactl	$ZIGLIB/std/os/linux/syscalls.zig	/quotactl = Linux + 172/;"	field
quotactl_fd	$ZIGLIB/std/os/linux/syscalls.zig	/quotactl_fd = Linux + 443/;"	field
quote_is_real	$ZIGLIB/std/process.zig	/const quote_is_real = backslash_count % 2 == 0/;"	constant
quotient	$ZIGLIB/std/fmt/parse_float/decimal.zig	/const quotient = n \/ 10/;"	constant
quotient128	$ZIGLIB/compiler_rt/divxf3.zig	/var quotient128: u128 = undefined/;"	variable
quotientExponent	$ZIGLIB/compiler_rt/divxf3.zig	/var quotientExponent: i32 = @bitCast(i32, aExponent -% bExponent) +% scale/;"	variable
quotientLo	$ZIGLIB/compiler_rt/divxf3.zig	/var quotientLo: u128 = undefined/;"	variable
quotientSign	$ZIGLIB/compiler_rt/divxf3.zig	/const quotientSign: Z = (@bitCast(Z, a) ^ @bitCast(Z, b)) & signBit/;"	constant
r0_g1_b2	$ZIGLIB/std/enums.zig	/const r0_g1_b2 = EnumMultiset(Ball).init(.{$/;"	constant
r128_a16	$ZIGLIB/std/target/amdgpu.zig	/r128_a16/;"	field
r600	$ZIGLIB/std/target.zig	/r600/;"	field
r64cH	$ZIGLIB/compiler_rt/divxf3.zig	/var r64cH: u128 = undefined/;"	variable
r64cL	$ZIGLIB/compiler_rt/divxf3.zig	/var r64cL: u128 = undefined/;"	variable
r64q127	$ZIGLIB/compiler_rt/divtf3.zig	/var r64q127: u128 = undefined/;"	variable
r64q63	$ZIGLIB/compiler_rt/divtf3.zig	/var r64q63: u128 = undefined/;"	variable
r807	$ZIGLIB/std/target/csky.zig	/pub const r807 = CpuModel{$/;"	constant
r807f	$ZIGLIB/std/target/csky.zig	/pub const r807f = CpuModel{$/;"	constant
r_addend	$ZIGLIB/std/elf.zig	/r_addend: Elf64_Sxword/;"	field
r_address	$ZIGLIB/std/macho.zig	/r_address: i32/;"	field
r_all	$ZIGLIB/compiler_rt/udivmod.zig	/var r_all: DoubleInt = undefined/;"	variable
r_batch	$ZIGLIB/std/crypto/25519/ed25519.zig	/var r_batch: [count]CompressedScalar = undefined/;"	variable
r_brace	$ZIGLIB/std/zig/tokenizer.zig	/r_brace/;"	field
r_bracket	$ZIGLIB/std/zig/tokenizer.zig	/r_bracket/;"	field
r_brk	$ZIGLIB/std/dynamic_library.zig	/r_brk: usize/;"	field
r_bytes	$ZIGLIB/std/crypto/25519/ed25519.zig	/r_bytes: [Curve.encoded_length]u8/;"	field
r_carry	$ZIGLIB/std/math/big/int.zig	/var r_carry: u1 = 1/;"	variable
r_extern	$ZIGLIB/std/macho.zig	/r_extern: u1/;"	field
r_hi	$ZIGLIB/std/crypto/ghash_polyval.zig	/const r_hi = clmul(x, y, .hi)/;"	constant
r_info	$ZIGLIB/std/elf.zig	/r_info: Elf64_Xword/;"	field
r_ldbase	$ZIGLIB/std/dynamic_library.zig	/r_ldbase: usize/;"	field
r_len	$ZIGLIB/std/crypto/ecdsa.zig	/const r_len = @intCast(u8, self.r.len + (self.r[0] >> 7))/;"	constant
r_length	$ZIGLIB/std/macho.zig	/r_length: u2/;"	field
r_lo	$ZIGLIB/std/crypto/ghash_polyval.zig	/const r_lo = clmul(x, y, .lo)/;"	constant
r_map	$ZIGLIB/std/dynamic_library.zig	/r_map: ?*LinkMap/;"	field
r_mid	$ZIGLIB/std/crypto/ghash_polyval.zig	/const r_mid = clmul(x ^ x_hi, y ^ y_hi, .lo) ^ r_lo ^ r_hi/;"	constant
r_offset	$ZIGLIB/std/elf.zig	/r_offset: Elf64_Addr/;"	field
r_paren	$ZIGLIB/std/zig/tokenizer.zig	/r_paren/;"	field
r_pcrel	$ZIGLIB/std/macho.zig	/r_pcrel: u1/;"	field
r_positive	$ZIGLIB/std/math/big/int.zig	/const r_positive = x.positive/;"	constant
r_sym	$ZIGLIB/std/elf.zig	/pub inline fn r_sym(self: @This()) u32 {$/;"	function
r_symbolnum	$ZIGLIB/std/macho.zig	/r_symbolnum: u24/;"	field
r_type	$ZIGLIB/std/macho.zig	/r_type: u4/;"	field
r_version	$ZIGLIB/std/dynamic_library.zig	/r_version: i32/;"	field
r_word	$ZIGLIB/std/math/big/int.zig	/var r_word = r.limbs[0]/;"	variable
radiansToDegrees	$ZIGLIB/std/math.zig	/^pub fn radiansToDegrees(comptime T: type, angle_in_radians: T) T {$/;"	function
radix	$ZIGLIB/std/math/big/int.zig	/comptime var radix = 10/;"	variable
raise	$ZIGLIB/std/os.zig	/^pub fn raise(sig: u8) RaiseError!void {$/;"	function
raiseDivByZero	$ZIGLIB/std/math.zig	/^pub fn raiseDivByZero() void {$/;"	function
raiseInexact	$ZIGLIB/std/math.zig	/^pub fn raiseInexact() void {$/;"	function
raiseInvalid	$ZIGLIB/std/math.zig	/^pub fn raiseInvalid() void {$/;"	function
raiseOverflow	$ZIGLIB/std/math.zig	/^pub fn raiseOverflow() void {$/;"	function
raiseTpl	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/raiseTpl: *const fn (new_tpl: usize) callconv(.C) usize/;"	field
raiseUnderflow	$ZIGLIB/std/math.zig	/^pub fn raiseUnderflow() void {$/;"	function
ram_size	$ZIGLIB/std/c/haiku.zig	/ram_size: u32/;"	field
rand	$ZIGLIB/std/target/aarch64.zig	/rand/;"	field
rand_buf	$ZIGLIB/std/fs.zig	/var rand_buf: [RANDOM_BYTES]u8 = undefined/;"	variable
rand_bytes	$ZIGLIB/std/rand.zig	/var rand_bytes: [@sizeOf(ByteAlignedT)]u8 = undefined/;"	variable
rand_lz	$ZIGLIB/std/rand.zig	/var rand_lz: u64 = @clz(rand)/;"	variable
random	$ZIGLIB/std/treap.zig	/fn random(self: *Prng, seed: usize) usize {$/;"	function
random_buffer	$ZIGLIB/std/crypto/tls/Client.zig	/var random_buffer: [128]u8 = undefined/;"	variable
random_bytes	$ZIGLIB/std/testing.zig	/var random_bytes: [TmpIterableDir.random_bytes_count]u8 = undefined/;"	variable
random_bytes_count	$ZIGLIB/std/testing.zig	/const random_bytes_count = 12/;"	constant
random_seed	$ZIGLIB/std/crypto/ecdsa.zig	/var random_seed: [seed_length]u8 = undefined/;"	variable
range	$ZIGLIB/std/target.zig	/range: Version.Range/;"	field
rangeLength	$ZIGLIB/std/macho.zig	/rangeLength: u32/;"	field
rangeStart	$ZIGLIB/std/macho.zig	/rangeStart: u64/;"	field
range_it	$ZIGLIB/std/zig/CrossTarget.zig	/var range_it = mem.split(u8, version_text, "...")/;"	variable
range_len	$ZIGLIB/std/fs/file.zig	/const range_len: windows.LARGE_INTEGER = 1/;"	constant
range_not_satisfiable	$ZIGLIB/std/http.zig	/range_not_satisfiable = 416/;"	field
range_off	$ZIGLIB/std/fs/file.zig	/const range_off: windows.LARGE_INTEGER = 0/;"	constant
rangecoder	$ZIGLIB/std/compress/lzma2/decode.zig	/var rangecoder = try RangeDecoder.init(counter_reader)/;"	variable
ranges	$ZIGLIB/std/dwarf/AT.zig	/^pub const ranges = 0x55/;"	constant
rank	$ZIGLIB/std/dwarf/AT.zig	/^pub const rank = 0x71/;"	constant
rate	$ZIGLIB/std/rand/Xoodoo.zig	/^const rate = 16/;"	constant
ratio_is_square	$ZIGLIB/std/crypto/25519/ristretto255.zig	/ratio_is_square: u32/;"	field
ratio_sqrt	$ZIGLIB/std/crypto/25519/ristretto255.zig	/const ratio_sqrt = sqrtRatioM1(u, v)/;"	constant
rawAlloc	$ZIGLIB/std/mem/Allocator.zig	/^pub inline fn rawAlloc(self: Allocator, len: usize, ptr_align: u8, ret_addr: usize) ?[*]u8 {$/;"	function
rawCAlloc	$ZIGLIB/std/heap.zig	/^fn rawCAlloc($/;"	function
rawCFree	$ZIGLIB/std/heap.zig	/^fn rawCFree($/;"	function
rawCResize	$ZIGLIB/std/heap.zig	/^fn rawCResize($/;"	function
rawFree	$ZIGLIB/std/mem/Allocator.zig	/^pub inline fn rawFree(self: Allocator, buf: []u8, log2_buf_align: u8, ret_addr: usize) void {$/;"	function
rawResize	$ZIGLIB/std/mem/Allocator.zig	/^pub inline fn rawResize(self: Allocator, buf: []u8, log2_buf_align: u8, new_len: usize, ret_addr: usize) bool {$/;"	function
raw_buffers	$ZIGLIB/std/os/linux/io_uring.zig	/var raw_buffers: [2][11]u8 = undefined/;"	variable
raw_c_allocator	$ZIGLIB/std/heap.zig	/^pub const raw_c_allocator = Allocator{$/;"	constant
raw_c_allocator_vtable	$ZIGLIB/std/heap.zig	/^const raw_c_allocator_vtable = Allocator.VTable{$/;"	constant
raw_mem	$ZIGLIB/std/heap/memory_pool.zig	/const raw_mem = try pool.allocNew()/;"	constant
raw_path	$ZIGLIB/std/debug.zig	/const raw_path = path_buf[0..len]/;"	constant
raw_path_system	$ZIGLIB/std/Build/CompileStep.zig	/raw_path_system: []const u8/;"	field
raw_pool_allocator	$ZIGLIB/std/os/uefi/pool_allocator.zig	/^pub const raw_pool_allocator = Allocator{$/;"	constant
raw_pool_allocator_table	$ZIGLIB/std/os/uefi/pool_allocator.zig	/^const raw_pool_allocator_table = Allocator.VTable{$/;"	constant
raw_tracepoint	$ZIGLIB/std/os/linux/bpf.zig	/raw_tracepoint: RawTracepointAttr/;"	field
raw_tracepoint_open	$ZIGLIB/std/os/linux/bpf.zig	/raw_tracepoint_open/;"	field
raw_tracepoint_writable	$ZIGLIB/std/os/linux/bpf.zig	/raw_tracepoint_writable/;"	field
raw_version	$ZIGLIB/std/zig/system/darwin.zig	/const raw_version = mem.trimRight(u8, result.stdout, "\\r\\n")/;"	constant
raygeneration	$ZIGLIB/std/target.zig	/raygeneration/;"	field
rblocked_first	$ZIGLIB/std/c/netbsd.zig	/rblocked_first: ?*u8 = null/;"	field
rblocked_last	$ZIGLIB/std/c/netbsd.zig	/rblocked_last: ?*u8 = null/;"	field
rbrace	$ZIGLIB/std/zig/render.zig	/const rbrace = tree.lastToken(struct_node)/;"	constant
rbracket	$ZIGLIB/std/zig/render.zig	/const rbracket = tree.lastToken(suffix.rhs) + 1/;"	constant
rc_keydown	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const rc_keydown = @intToPtr(fn (ctx: ?*anyopaque, protocol: u32, scancode: u64, toggle: u32) c_long, 78)/;"	constant
rc_pointer_rel	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const rc_pointer_rel = @intToPtr(fn (ctx: ?*anyopaque, rel_x: i32, rel_y: i32) c_long, 92)/;"	constant
rc_repeat	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const rc_repeat = @intToPtr(fn (ctx: ?*anyopaque) c_long, 77)/;"	constant
rclass	$ZIGLIB/std/target/arm.zig	/rclass/;"	field
rcpc	$ZIGLIB/std/target/aarch64.zig	/rcpc/;"	field
rcpc_immo	$ZIGLIB/std/target/aarch64.zig	/rcpc_immo/;"	field
rctl	$ZIGLIB/std/c/solaris.zig	/rctl: extern struct {$/;"	field
rcv_sb_state	$ZIGLIB/std/c/freebsd.zig	/rcv_sb_state: u16/;"	field
rcv_wnd	$ZIGLIB/std/os/linux.zig	/rcv_wnd: u32/;"	field
rcv_wup	$ZIGLIB/std/os/linux.zig	/rcv_wup: u32/;"	field
rd_h	$ZIGLIB/std/child_process.zig	/var rd_h: windows.HANDLE = undefined/;"	variable
rd_pos	$ZIGLIB/std/compress/deflate/dict_decoder.zig	/rd_pos: u32 = 0/;"	field
rdev	$ZIGLIB/std/os/linux/x86_64.zig	/rdev: dev_t/;"	field
rdev_freebsd11	$ZIGLIB/std/c/freebsd.zig	/rdev_freebsd11: u32/;"	field
rdev_major	$ZIGLIB/std/os/linux.zig	/rdev_major: u32/;"	field
rdev_minor	$ZIGLIB/std/os/linux.zig	/rdev_minor: u32/;"	field
rdn_i	$ZIGLIB/std/crypto/Certificate.zig	/var rdn_i = rdn.slice.start/;"	variable
rdpid	$ZIGLIB/std/target/x86.zig	/rdpid/;"	field
rdpru	$ZIGLIB/std/target/x86.zig	/rdpru/;"	field
rdrnd	$ZIGLIB/std/target/x86.zig	/rdrnd/;"	field
rdseed	$ZIGLIB/std/target/x86.zig	/rdseed/;"	field
rdynamic	$ZIGLIB/std/Build/CompileStep.zig	/^rdynamic: bool/;"	field
reIndex	$ZIGLIB/std/array_hash_map.zig	/pub fn reIndex(self: *Self, allocator: Allocator) !void {$/;"	function
reIndexContext	$ZIGLIB/std/array_hash_map.zig	/pub fn reIndexContext(self: *Self, allocator: Allocator, ctx: Context) !void {$/;"	function
re_num	$ZIGLIB/std/math/complex.zig	/const re_num = self.re * other.re + self.im * other.im/;"	constant
reachable	$ZIGLIB/std/valgrind/memcheck.zig	/reachable: usize/;"	field
reachretrans	$ZIGLIB/std/c/solaris.zig	/reachretrans: u32/;"	field
reachtime	$ZIGLIB/std/c/solaris.zig	/reachtime: u32/;"	field
reactor	$ZIGLIB/std/builtin.zig	/reactor/;"	field
read	$ZIGLIB/std/time.zig	/pub fn read(self: *Timer) u64 {$/;"	function
readAddress	$ZIGLIB/std/dwarf.zig	/^fn readAddress(in_stream: anytype, endian: std.builtin.Endian, is_64: bool) !u64 {$/;"	function
readAdvanced	$ZIGLIB/std/http/Client.zig	/pub fn readAdvanced(req: *Request, buffer: []u8) !usize {$/;"	function
readAll	$ZIGLIB/std/net.zig	/pub fn readAll(s: Stream, buffer: []u8) ReadError!usize {$/;"	function
readAllAlloc	$ZIGLIB/std/io/reader.zig	/pub fn readAllAlloc(self: Self, allocator: mem.Allocator, max_size: usize) ![]u8 {$/;"	function
readAllArrayList	$ZIGLIB/std/io/reader.zig	/pub fn readAllArrayList(self: Self, array_list: *std.ArrayList(u8), max_append_size: usize) !void {$/;"	function
readAllArrayListAligned	$ZIGLIB/std/io/reader.zig	/pub fn readAllArrayListAligned($/;"	function
readAllocBytes	$ZIGLIB/std/dwarf.zig	/^fn readAllocBytes(allocator: mem.Allocator, in_stream: anytype, size: usize) ![]u8 {$/;"	function
readAtLeast	$ZIGLIB/std/net.zig	/pub fn readAtLeast(s: Stream, buffer: []u8, len: usize) ReadError!usize {$/;"	function
readAtLeastOurAmt	$ZIGLIB/std/crypto/tls.zig	/pub fn readAtLeastOurAmt(d: *Decoder, stream: anytype, our_amt: usize) !void {$/;"	function
readBits	$ZIGLIB/std/io/bit_reader.zig	/pub fn readBits(self: *Self, comptime U: type, bits: usize, out_bits: *usize) Error!U {$/;"	function
readBitsNoEof	$ZIGLIB/std/io/bit_reader.zig	/pub fn readBitsNoEof(self: *Self, comptime U: type, bits: usize) !U {$/;"	function
readBlock	$ZIGLIB/std/compress/xz/block.zig	/fn readBlock(self: *Self) Error!void {$/;"	function
readBlocks	$ZIGLIB/std/os/uefi/protocols/block_io_protocol.zig	/pub fn readBlocks(self: *Self, media_id: u32, lba: u64, buffer_size: usize, buf: [*]u8) Status {$/;"	function
readBoundedBytes	$ZIGLIB/std/io/reader.zig	/pub fn readBoundedBytes(self: Self, comptime num_bytes: usize) !std.BoundedArray(u8, num_bytes) {$/;"	function
readBuf	$ZIGLIB/std/fifo.zig	/var readBuf: [3]T = undefined/;"	variable
readByte	$ZIGLIB/std/io/reader.zig	/pub fn readByte(self: Self) !u8 {$/;"	function
readByteSigned	$ZIGLIB/std/io/reader.zig	/pub fn readByteSigned(self: Self) !i8 {$/;"	function
readBytesNoEof	$ZIGLIB/std/io/reader.zig	/pub fn readBytesNoEof(self: Self, comptime num_bytes: usize) ![num_bytes]u8 {$/;"	function
readCoffDebugInfo	$ZIGLIB/std/debug.zig	/^fn readCoffDebugInfo(allocator: mem.Allocator, coff_bytes: []const u8) !ModuleDebugInfo {$/;"	function
readDerInt	$ZIGLIB/std/crypto/ecdsa.zig	/fn readDerInt(out: []u8, reader: anytype) EncodingError!void {$/;"	function
readElfDebugInfo	$ZIGLIB/std/debug.zig	/^pub fn readElfDebugInfo(allocator: mem.Allocator, elf_file: File) !ModuleDebugInfo {$/;"	function
readEnum	$ZIGLIB/std/io/reader.zig	/pub fn readEnum(self: Self, comptime Enum: type, endian: std.builtin.Endian) !Enum {$/;"	function
readFile	$ZIGLIB/std/fs.zig	/pub fn readFile(self: Dir, file_path: []const u8, buffer: []u8) ![]u8 {$/;"	function
readFileAlloc	$ZIGLIB/std/fs.zig	/pub fn readFileAlloc(self: Dir, allocator: mem.Allocator, file_path: []const u8, max_bytes: usize) ![]u8 {$/;"	function
readFileAllocOptions	$ZIGLIB/std/fs.zig	/pub fn readFileAllocOptions($/;"	function
readFlush	$ZIGLIB/std/compress/deflate/dict_decoder.zig	/pub fn readFlush(self: *Self) []u8 {$/;"	function
readFn	$ZIGLIB/std/os/uefi/protocols/file_protocol.zig	/fn readFn(self: *const FileProtocol, buffer: []u8) ReadError!usize {$/;"	function
readHeader	$ZIGLIB/std/compress/lzma/decode.zig	/pub fn readHeader(reader: anytype, options: Options) !Params {$/;"	function
readHuffman	$ZIGLIB/std/compress/deflate/decompressor.zig	/fn readHuffman(self: *Self) Error!void {$/;"	function
readILEB128	$ZIGLIB/std/leb128.zig	/^pub fn readILEB128(comptime T: type, reader: anytype) !T {$/;"	function
readInt	$ZIGLIB/std/mem.zig	/^pub fn readInt(comptime T: type, bytes: *const [@divExact(@typeInfo(T).Int.bits, 8)]u8, endian: Endian) T {$/;"	function
readIntBig	$ZIGLIB/std/mem.zig	/^pub const readIntBig = switch (native_endian) {$/;"	constant
readIntFd	$ZIGLIB/std/child_process.zig	/^fn readIntFd(fd: i32) !ErrInt {$/;"	function
readIntForeign	$ZIGLIB/std/mem.zig	/^pub fn readIntForeign(comptime T: type, bytes: *const [@divExact(@typeInfo(T).Int.bits, 8)]u8) T {$/;"	function
readIntLittle	$ZIGLIB/std/mem.zig	/^pub const readIntLittle = switch (native_endian) {$/;"	constant
readIntNative	$ZIGLIB/std/mem.zig	/^pub fn readIntNative(comptime T: type, bytes: *const [@divExact(@typeInfo(T).Int.bits, 8)]u8) T {$/;"	function
readIntSlice	$ZIGLIB/std/mem.zig	/^pub fn readIntSlice(comptime T: type, bytes: []const u8, endian: Endian) T {$/;"	function
readIntSliceBig	$ZIGLIB/std/mem.zig	/^pub const readIntSliceBig = switch (native_endian) {$/;"	constant
readIntSliceForeign	$ZIGLIB/std/mem.zig	/^pub fn readIntSliceForeign(comptime T: type, bytes: []const u8) T {$/;"	function
readIntSliceLittle	$ZIGLIB/std/mem.zig	/^pub const readIntSliceLittle = switch (native_endian) {$/;"	constant
readIntSliceNative	$ZIGLIB/std/mem.zig	/^pub fn readIntSliceNative(comptime T: type, bytes: []const u8) T {$/;"	function
readIntoBoundedBytes	$ZIGLIB/std/io/reader.zig	/pub fn readIntoBoundedBytes($/;"	function
readItem	$ZIGLIB/std/fifo.zig	/pub fn readItem(self: *Self) ?T {$/;"	function
readKeyStroke	$ZIGLIB/std/os/uefi/protocols/simple_text_input_protocol.zig	/pub fn readKeyStroke(self: *const SimpleTextInputProtocol, input_key: *InputKey) Status {$/;"	function
readKeyStrokeEx	$ZIGLIB/std/os/uefi/protocols/simple_text_input_ex_protocol.zig	/pub fn readKeyStrokeEx(self: *const SimpleTextInputExProtocol, key_data: *KeyData) Status {$/;"	function
readLink	$ZIGLIB/std/fs.zig	/pub fn readLink(self: Dir, sub_path: []const u8, buffer: []u8) ![]u8 {$/;"	function
readLinkAbsolute	$ZIGLIB/std/fs.zig	/^pub fn readLinkAbsolute(pathname: []const u8, buffer: *[MAX_PATH_BYTES]u8) ![]u8 {$/;"	function
readLinkAbsoluteZ	$ZIGLIB/std/fs.zig	/^pub fn readLinkAbsoluteZ(pathname_c: [*:0]const u8, buffer: *[MAX_PATH_BYTES]u8) ![]u8 {$/;"	function
readLinkW	$ZIGLIB/std/fs.zig	/pub fn readLinkW(self: Dir, sub_path_w: []const u16, buffer: []u8) ![]u8 {$/;"	function
readLinkWasi	$ZIGLIB/std/fs.zig	/pub fn readLinkWasi(self: Dir, sub_path: []const u8, buffer: []u8) ![]u8 {$/;"	function
readLinkZ	$ZIGLIB/std/fs.zig	/pub fn readLinkZ(self: Dir, sub_path_c: [*:0]const u8, buffer: []u8) ![]u8 {$/;"	function
readMachODebugInfo	$ZIGLIB/std/debug.zig	/^fn readMachODebugInfo(allocator: mem.Allocator, macho_file: File) !ModuleDebugInfo {$/;"	function
readMem	$ZIGLIB/std/os/darwin.zig	/pub fn readMem(task: MachTask, address: u64, buf: []u8) MachError!usize {$/;"	function
readNoEof	$ZIGLIB/std/io/reader.zig	/pub fn readNoEof(self: Self, buf: []u8) !void {$/;"	function
readOnly	$ZIGLIB/std/fs/file.zig	/pub fn readOnly(self: Self) bool {$/;"	function
readPackedInt	$ZIGLIB/std/mem.zig	/^pub fn readPackedInt(comptime T: type, bytes: []const u8, bit_offset: usize, endian: Endian) T {$/;"	function
readPackedIntBig	$ZIGLIB/std/mem.zig	/^fn readPackedIntBig(comptime T: type, bytes: []const u8, bit_offset: usize) T {$/;"	function
readPackedIntForeign	$ZIGLIB/std/mem.zig	/^pub const readPackedIntForeign = switch (native_endian) {$/;"	constant
readPackedIntLittle	$ZIGLIB/std/mem.zig	/^fn readPackedIntLittle(comptime T: type, bytes: []const u8, bit_offset: usize) T {$/;"	function
readPackedIntNative	$ZIGLIB/std/mem.zig	/^pub const readPackedIntNative = switch (native_endian) {$/;"	constant
readPackedTwosComplement	$ZIGLIB/std/math/big/int.zig	/pub fn readPackedTwosComplement($/;"	function
readRunner	$ZIGLIB/std/event/rwlock.zig	/^fn readRunner(lock: *RwLock) callconv(.Async) void {$/;"	function
readSparseBitVector	$ZIGLIB/std/pdb.zig	/^fn readSparseBitVector(stream: anytype, allocator: mem.Allocator) ![]u32 {$/;"	function
readStream	$ZIGLIB/std/leb128.zig	/const readStream = if (t_signed) readILEB128 else readULEB128/;"	constant
readStreamFlags	$ZIGLIB/std/compress/xz.zig	/^fn readStreamFlags(reader: anytype, check: *Check) !void {$/;"	function
readStruct	$ZIGLIB/std/io/reader.zig	/pub fn readStruct(self: Self, comptime T: type) !T {$/;"	function
readStructBig	$ZIGLIB/std/io/reader.zig	/pub fn readStructBig(self: Self, comptime T: type) !T {$/;"	function
readToEndAlloc	$ZIGLIB/std/fs/file.zig	/pub fn readToEndAlloc(self: File, allocator: mem.Allocator, max_bytes: usize) ![]u8 {$/;"	function
readToEndAllocOptions	$ZIGLIB/std/fs/file.zig	/pub fn readToEndAllocOptions($/;"	function
readTwosComplement	$ZIGLIB/std/math/big/int.zig	/pub fn readTwosComplement($/;"	function
readU64	$ZIGLIB/std/fmt/parse_float/FloatStream.zig	/^pub fn readU64(self: FloatStream) ?u64 {$/;"	function
readU64Unchecked	$ZIGLIB/std/fmt/parse_float/FloatStream.zig	/^pub fn readU64Unchecked(self: FloatStream) u64 {$/;"	function
readULEB128	$ZIGLIB/std/leb128.zig	/^pub fn readULEB128(comptime T: type, reader: anytype) !T {$/;"	function
readUnitLength	$ZIGLIB/std/dwarf.zig	/^fn readUnitLength(in_stream: anytype, endian: std.builtin.Endian, is_64: *bool) !u64 {$/;"	function
readUntil	$ZIGLIB/std/Uri.zig	/fn readUntil(self: *Self, comptime predicate: fn (u8) bool) []const u8 {$/;"	function
readUntilDelimiter	$ZIGLIB/std/io/reader.zig	/pub fn readUntilDelimiter(self: Self, buf: []u8, delimiter: u8) ![]u8 {$/;"	function
readUntilDelimiterAlloc	$ZIGLIB/std/io/reader.zig	/pub fn readUntilDelimiterAlloc($/;"	function
readUntilDelimiterArrayList	$ZIGLIB/std/io/reader.zig	/pub fn readUntilDelimiterArrayList($/;"	function
readUntilDelimiterOrEof	$ZIGLIB/std/io/reader.zig	/pub fn readUntilDelimiterOrEof(self: Self, buf: []u8, delimiter: u8) !?[]u8 {$/;"	function
readUntilDelimiterOrEofAlloc	$ZIGLIB/std/io/reader.zig	/pub fn readUntilDelimiterOrEofAlloc($/;"	function
readUntilEof	$ZIGLIB/std/Uri.zig	/fn readUntilEof(self: *Self) []const u8 {$/;"	function
readVarInt	$ZIGLIB/std/mem.zig	/^pub fn readVarInt(comptime ReturnType: type, bytes: []const u8, endian: Endian) ReturnType {$/;"	function
readVarPackedInt	$ZIGLIB/std/mem.zig	/^pub fn readVarPackedInt($/;"	function
readWhile	$ZIGLIB/std/Uri.zig	/fn readWhile(self: *Self, comptime predicate: fn (u8) bool) []const u8 {$/;"	function
read_8bytes_swapped	$ZIGLIB/std/hash/wyhash.zig	/^fn read_8bytes_swapped(data: []const u8) u64 {$/;"	function
read_amt	$ZIGLIB/std/compress/gzip.zig	/read_amt: usize/;"	field
read_branch_records	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const read_branch_records = @intToPtr(fn (ctx: *kern.PerfEventData, buf: ?*anyopaque, size: u32, flags: u64) c_long, 119)/;"	constant
read_bytes	$ZIGLIB/std/mem.zig	/const read_bytes = bytes[lowest_byte..][0..read_size]/;"	constant
read_contents	$ZIGLIB/std/fs/watch.zig	/const read_contents = try std.fs.cwd().readFileAlloc(allocator, file_path, 1024 * 1024)/;"	constant
read_exec_only	$ZIGLIB/std/os/linux/x86.zig	/read_exec_only: u1/;"	field
read_fixed	$ZIGLIB/std/os/linux/io_uring.zig	/pub fn read_fixed($/;"	function
read_flag	$ZIGLIB/std/fs.zig	/const read_flag = if (flags.read) @as(u32, w.GENERIC_READ) else 0/;"	constant
read_format	$ZIGLIB/std/os/linux.zig	/read_format: u64 = 0/;"	field
read_from_header	$ZIGLIB/std/compress/lzma/decode.zig	/read_from_header/;"	field
read_handle	$ZIGLIB/std/child_process.zig	/const read_handle = windows.kernel32.CreateNamedPipeW($/;"	constant
read_header_but_use_provided	$ZIGLIB/std/compress/lzma/decode.zig	/read_header_but_use_provided: ?u64/;"	field
read_idx	$ZIGLIB/std/os/windows.zig	/var read_idx: usize = 0/;"	variable
read_index	$ZIGLIB/std/fmt/parse_float/decimal.zig	/var read_index: usize = 0/;"	variable
read_nodes	$ZIGLIB/std/event/rwlock.zig	/var read_nodes: [100]Loop.NextTickNode = undefined/;"	variable
read_only	$ZIGLIB/std/os/uefi/protocols/file_protocol.zig	/read_only: bool/;"	field
read_result	$ZIGLIB/std/child_process.zig	/const read_result = windows.kernel32.ReadFile(handle, next_buf.ptr, math.cast(u32, next_buf.len) orelse maxInt(u32), &read_bytes, overlapped)/;"	constant
read_seq	$ZIGLIB/std/crypto/tls/Client.zig	/var read_seq: u64 = 0/;"	variable
read_size	$ZIGLIB/std/mem.zig	/const read_size = (bit_count + (bit_offset % 8) + 7) \/ 8/;"	constant
read_tp_hard	$ZIGLIB/std/target/arm.zig	/read_tp_hard/;"	field
read_value1	$ZIGLIB/std/mem.zig	/const read_value1 = readVarPackedInt(U, asBytes(&value), offset, @bitSizeOf(PackedType), native_endian, signedness)/;"	constant
read_value2	$ZIGLIB/std/mem.zig	/const read_value2 = readVarPackedInt(U, asBytes(&value), offset, @bitSizeOf(PackedType), native_endian, signedness)/;"	constant
read_write	$ZIGLIB/std/fs/file.zig	/read_write/;"	field
readableLength	$ZIGLIB/std/fifo.zig	/pub fn readableLength(self: Self) usize {$/;"	function
readableSlice	$ZIGLIB/std/fifo.zig	/pub fn readableSlice(self: SliceSelfArg, offset: usize) []const T {$/;"	function
readableSliceMut	$ZIGLIB/std/fifo.zig	/fn readableSliceMut(self: SliceSelfArg, offset: usize) []T {$/;"	function
readahead	$ZIGLIB/std/os/linux/syscalls.zig	/readahead = Linux + 223/;"	field
readdir	$ZIGLIB/std/os/linux/syscalls.zig	/readdir = Linux + 89/;"	field
reader	$ZIGLIB/std/process.zig	/const reader = file.reader()/;"	constant
reader_lock_count	$ZIGLIB/std/event/rwlock.zig	/reader_lock_count: usize/;"	field
reader_queue	$ZIGLIB/std/event/rwlock.zig	/reader_queue: Queue/;"	field
reader_queue_empty	$ZIGLIB/std/event/rwlock.zig	/reader_queue_empty: bool/;"	field
readercv	$ZIGLIB/std/c/solaris.zig	/readercv: pthread_cond_t = .{}/;"	field
readers	$ZIGLIB/std/c/solaris.zig	/readers: i32 = 0/;"	field
readlink	$ZIGLIB/std/os/linux/syscalls.zig	/readlink = Linux + 87/;"	field
readlinkAbsoluteW	$ZIGLIB/std/fs.zig	/^pub fn readlinkAbsoluteW(pathname_w: [*:0]const u16, buffer: *[MAX_PATH_BYTES]u8) ![]u8 {$/;"	function
readlinkW	$ZIGLIB/std/os.zig	/^pub fn readlinkW(file_path: []const u16, out_buffer: []u8) ReadLinkError![]u8 {$/;"	function
readlinkZ	$ZIGLIB/std/os.zig	/^pub fn readlinkZ(file_path: [*:0]const u8, out_buffer: []u8) ReadLinkError![]u8 {$/;"	function
readlinkat	$ZIGLIB/std/os/linux/syscalls.zig	/readlinkat = Linux + 298/;"	field
readlinkatW	$ZIGLIB/std/os.zig	/^pub fn readlinkatW(dirfd: fd_t, file_path: []const u16, out_buffer: []u8) ReadLinkError![]u8 {$/;"	function
readlinkatWasi	$ZIGLIB/std/os.zig	/^pub fn readlinkatWasi(dirfd: fd_t, file_path: []const u8, out_buffer: []u8) ReadLinkError![]u8 {$/;"	function
readlinkatZ	$ZIGLIB/std/os.zig	/^pub fn readlinkatZ(dirfd: fd_t, file_path: [*:0]const u8, out_buffer: []u8) ReadLinkError![]u8 {$/;"	function
reads	$ZIGLIB/std/Thread/RwLock.zig	/reads: std.atomic.Atomic(usize) = std.atomic.Atomic(usize).init(0)/;"	field
reads_allowed	$ZIGLIB/std/io/buffered_reader.zig	/reads_allowed: usize/;"	field
readv	$ZIGLIB/std/os/linux/syscalls.zig	/readv = Linux + 18/;"	field
readvAdvanced	$ZIGLIB/std/crypto/tls/Client.zig	/^pub fn readvAdvanced(c: *Client, stream: anytype, iovecs: []const std.os.iovec) !usize {$/;"	function
readvAll	$ZIGLIB/std/fs/file.zig	/pub fn readvAll(self: File, iovecs: []os.iovec) ReadError!usize {$/;"	function
readvAtLeast	$ZIGLIB/std/crypto/tls/Client.zig	/^pub fn readvAtLeast(c: *Client, stream: anytype, iovecs: []std.os.iovec, len: usize) !usize {$/;"	function
ready	$ZIGLIB/std/os/linux/io_uring.zig	/const ready = self.cq_ready()/;"	constant
real	$ZIGLIB/compiler_rt/mulc3.zig	/real: T/;"	field
real_keys	$ZIGLIB/std/hash_map.zig	/var real_keys: [keys.len]u64 = undefined/;"	variable
real_path	$ZIGLIB/std/fs.zig	/const real_path = try std.os.realpathZ(&symlink_path_buf, &real_path_buf)/;"	constant
real_path_buf	$ZIGLIB/std/fs.zig	/var real_path_buf: [MAX_PATH_BYTES]u8 = undefined/;"	variable
real_result	$ZIGLIB/std/fs/path.zig	/const real_result = try allocator.alloc(u8, 3 * negative_count - 1)/;"	constant
realign	$ZIGLIB/std/fifo.zig	/pub fn realign(self: *Self) void {$/;"	function
realloc	$ZIGLIB/std/mem/Allocator.zig	/^pub fn realloc(self: Allocator, old_mem: anytype, new_n: usize) t: {$/;"	function
reallocAdvanced	$ZIGLIB/std/mem/Allocator.zig	/^pub fn reallocAdvanced($/;"	function
reallocSlice	$ZIGLIB/compiler_rt/emutls.zig	/pub fn reallocSlice(comptime T: type, slice: []T, len: usize) []T {$/;"	function
realpath	$ZIGLIB/std/os.zig	/^pub fn realpath(pathname: []const u8, out_buffer: *[MAX_PATH_BYTES]u8) RealPathError![]u8 {$/;"	function
realpathAlloc	$ZIGLIB/std/fs.zig	/pub fn realpathAlloc(self: Dir, allocator: Allocator, pathname: []const u8) ![]u8 {$/;"	function
realpathW	$ZIGLIB/std/os.zig	/^pub fn realpathW(pathname: []const u16, out_buffer: *[MAX_PATH_BYTES]u8) RealPathError![]u8 {$/;"	function
realpathZ	$ZIGLIB/std/os.zig	/^pub fn realpathZ(pathname: [*:0]const u8, out_buffer: *[MAX_PATH_BYTES]u8) RealPathError![]u8 {$/;"	function
realpath_buf	$ZIGLIB/std/fs/watch.zig	/var realpath_buf: [std.fs.MAX_PATH_BYTES]u8 = undefined/;"	variable
reason	$ZIGLIB/std/c/solaris.zig	/reason: extern union {$/;"	field
rebase_off	$ZIGLIB/std/macho.zig	/rebase_off: u32 = 0/;"	field
rebase_size	$ZIGLIB/std/macho.zig	/rebase_size: u32 = 0/;"	field
rebased_address	$ZIGLIB/std/debug.zig	/const rebased_address = address - base_address/;"	constant
reboot	$ZIGLIB/std/os/linux/syscalls.zig	/reboot = Linux + 88/;"	field
recalc	$ZIGLIB/compiler_rt/mulc3.zig	/var recalc: bool = false/;"	variable
receive	$ZIGLIB/std/os/uefi/protocols/udp6_protocol.zig	/pub fn receive(self: *const Udp6Protocol, token: *Udp6CompletionToken) Status {$/;"	function
receiveFilters	$ZIGLIB/std/os/uefi/protocols/simple_network_protocol.zig	/pub fn receiveFilters(self: *const SimpleNetworkProtocol, enable: SimpleNetworkReceiveFilter, disable: SimpleNetworkReceiveFilter, reset_mcast_filter: bool, mcast_filter_cnt: usize, mcast_filter: ?[*]const MacAddress) Status {$/;"	function
receive_broadcast	$ZIGLIB/std/os/uefi/protocols/simple_network_protocol.zig	/receive_broadcast: bool/;"	field
receive_filter_mask	$ZIGLIB/std/os/uefi/protocols/simple_network_protocol.zig	/receive_filter_mask: SimpleNetworkReceiveFilter/;"	field
receive_filter_setting	$ZIGLIB/std/os/uefi/protocols/simple_network_protocol.zig	/receive_filter_setting: SimpleNetworkReceiveFilter/;"	field
receive_interrupt	$ZIGLIB/std/os/uefi/protocols/simple_network_protocol.zig	/receive_interrupt: bool/;"	field
receive_multicast	$ZIGLIB/std/os/uefi/protocols/simple_network_protocol.zig	/receive_multicast: bool/;"	field
receive_promiscuous	$ZIGLIB/std/os/uefi/protocols/simple_network_protocol.zig	/receive_promiscuous: bool/;"	field
receive_promiscuous_multicast	$ZIGLIB/std/os/uefi/protocols/simple_network_protocol.zig	/receive_promiscuous_multicast: bool/;"	field
receive_timeout	$ZIGLIB/std/os/uefi/protocols/udp6_protocol.zig	/receive_timeout: u32/;"	field
receive_unicast	$ZIGLIB/std/os/uefi/protocols/simple_network_protocol.zig	/receive_unicast: bool/;"	field
received_close_notify	$ZIGLIB/std/crypto/tls/Client.zig	/^received_close_notify: bool/;"	field
received_queue_timeout_value	$ZIGLIB/std/os/uefi/protocols/managed_network_protocol.zig	/received_queue_timeout_value: u32/;"	field
recently_updated_child	$ZIGLIB/std/Progress.zig	/recently_updated_child: ?*Node = null/;"	field
recip32	$ZIGLIB/compiler_rt/divdf3.zig	/var recip32 = @as(u32, 0x7504f333) -% q31b/;"	variable
recip64	$ZIGLIB/compiler_rt/divxf3.zig	/var recip64 = @as(u64, 0x7504f333F9DE6484) -% q63b/;"	variable
recipprec	$ZIGLIB/std/target/powerpc.zig	/recipprec/;"	field
reciprocal	$ZIGLIB/std/math/complex.zig	/pub fn reciprocal(self: Self) Self {$/;"	function
reclen	$ZIGLIB/std/os/linux.zig	/pub fn reclen(self: dirent64) u16 {$/;"	function
recomputed_kp	$ZIGLIB/std/crypto/25519/ed25519.zig	/const recomputed_kp = try create(secret_key.seed())/;"	constant
reconstructFloat	$ZIGLIB/std/math/float.zig	/^inline fn reconstructFloat(comptime T: type, comptime exponent: comptime_int, comptime mantissa: comptime_int) T {$/;"	function
record	$ZIGLIB/std/crypto/tls/Client.zig	/const record = ciphertext_buf[record_start..ciphertext_end]/;"	constant
record_count	$ZIGLIB/std/crypto/Certificate/Bundle/macos.zig	/record_count: u32/;"	field
record_decoder	$ZIGLIB/std/crypto/tls/Client.zig	/var record_decoder = try d.sub(record_len)/;"	variable
record_header	$ZIGLIB/std/crypto/tls/Client.zig	/const record_header = d.buf[d.idx..][0..5]/;"	constant
record_header_len	$ZIGLIB/std/crypto/tls.zig	/^pub const record_header_len = 5/;"	constant
record_idx	$ZIGLIB/std/crypto/Certificate/Bundle/macos.zig	/var record_idx: u32 = 0/;"	variable
record_len	$ZIGLIB/std/crypto/tls/Client.zig	/const record_len = mem.readIntBig(u16, frag[in..][0..2])/;"	constant
record_len_byte_0	$ZIGLIB/std/crypto/tls/Client.zig	/const record_len_byte_0: u16 = straddleByte(frag, frag1, in + 3)/;"	constant
record_len_byte_1	$ZIGLIB/std/crypto/tls/Client.zig	/const record_len_byte_1: u16 = straddleByte(frag, frag1, in + 4)/;"	constant
record_list	$ZIGLIB/std/crypto/Certificate/Bundle/macos.zig	/var record_list = try gpa.alloc(u32, table_header.record_count)/;"	variable
record_number	$ZIGLIB/std/crypto/Certificate/Bundle/macos.zig	/record_number: u32/;"	field
record_numbers_count	$ZIGLIB/std/crypto/Certificate/Bundle/macos.zig	/record_numbers_count: u32/;"	field
record_overflow	$ZIGLIB/std/crypto/tls.zig	/record_overflow = 22/;"	field
record_size	$ZIGLIB/std/crypto/Certificate/Bundle/macos.zig	/record_size: u32/;"	field
record_start	$ZIGLIB/std/crypto/tls/Client.zig	/const record_start = ciphertext_end/;"	constant
records	$ZIGLIB/std/crypto/Certificate/Bundle/macos.zig	/records: u32/;"	field
recoverPublicKey	$ZIGLIB/std/crypto/25519/x25519.zig	/pub fn recoverPublicKey(secret_key: [secret_length]u8) IdentityElementError![public_length]u8 {$/;"	function
recoverY	$ZIGLIB/std/crypto/pcurves/secp256k1.zig	/pub fn recoverY(x: Fe, is_odd: bool) NotSquareError!Fe {$/;"	function
recovered_x	$ZIGLIB/std/crypto/25519/scalar.zig	/const recovered_x = inv.invert()/;"	constant
recursed	$ZIGLIB/std/c/netbsd.zig	/recursed: u32 = 0/;"	field
recursive	$ZIGLIB/std/dwarf/AT.zig	/^pub const recursive = 0x68/;"	constant
recv	$ZIGLIB/std/os/linux/x86.zig	/pub const recv = 10/;"	constant
recvfrom	$ZIGLIB/std/os/windows.zig	/^pub fn recvfrom(s: ws2_32.SOCKET, buf: [*]u8, len: usize, flags: u32, from: ?*ws2_32.sockaddr, from_len: ?*ws2_32.socklen_t) i32 {$/;"	function
recvmmsg	$ZIGLIB/std/os/linux/x86.zig	/pub const recvmmsg = 19/;"	constant
recvmmsg_time64	$ZIGLIB/std/os/linux/syscalls.zig	/recvmmsg_time64 = Linux + 417/;"	field
recvmsg	$ZIGLIB/std/os/linux/x86.zig	/pub const recvmsg = 17/;"	constant
recvq	$ZIGLIB/std/c/freebsd.zig	/recvq: u32/;"	field
recycle	$ZIGLIB/std/heap/WasmPageAllocator.zig	/fn recycle(self: FreeBlock, start_idx: usize, len: usize) void {$/;"	function
recycle_event	$ZIGLIB/std/os/uefi/protocols/managed_network_protocol.zig	/recycle_event: Event/;"	field
recycle_signal	$ZIGLIB/std/os/uefi/protocols/udp6_protocol.zig	/recycle_signal: Event/;"	field
red_mask	$ZIGLIB/std/os/uefi/protocols/graphics_output_protocol.zig	/red_mask: u32/;"	field
red_zone	$ZIGLIB/std/Build/CompileStep.zig	/^red_zone: ?bool = null/;"	field
redirect	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const redirect = @intToPtr(fn (ifindex: u32, flags: u64) c_long, 23)/;"	constant
redirect_map	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const redirect_map = @intToPtr(fn (map: *const kern.MapDef, key: u32, flags: u64) c_long, 51)/;"	constant
redirects_left	$ZIGLIB/std/http/Client.zig	/redirects_left: u32/;"	field
reduce	$ZIGLIB/std/math/big/rational.zig	/fn reduce(r: *Rational) !void {$/;"	function
reduce48	$ZIGLIB/std/crypto/pcurves/secp256k1/scalar.zig	/^pub fn reduce48(s: [48]u8, endian: std.builtin.Endian) CompressedScalar {$/;"	function
reduce64	$ZIGLIB/std/crypto/pcurves/secp256k1/scalar.zig	/^pub fn reduce64(s: [64]u8, endian: std.builtin.Endian) CompressedScalar {$/;"	function
reduceToScalar	$ZIGLIB/std/crypto/ecdsa.zig	/fn reduceToScalar(comptime unreduced_len: usize, s: [unreduced_len]u8) Curve.scalar.Scalar {$/;"	function
reduced	$ZIGLIB/std/crypto/25519/scalar.zig	/const reduced = reduce(field_order_s)/;"	constant
redupif32	$ZIGLIB/std/math/complex/atan.zig	/^fn redupif32(x: f32) f32 {$/;"	function
redupif64	$ZIGLIB/std/math/complex/atan.zig	/^fn redupif64(x: f64) f64 {$/;"	function
redux	$ZIGLIB/compiler_rt/exp2.zig	/const redux: f64 = 0x1.8p52 \/ @intToFloat(f64, tblsiz)/;"	constant
ref1	$ZIGLIB/std/dwarf/FORM.zig	/^pub const ref1 = 0x11/;"	constant
ref2	$ZIGLIB/std/dwarf/FORM.zig	/^pub const ref2 = 0x12/;"	constant
ref4	$ZIGLIB/std/dwarf/FORM.zig	/^pub const ref4 = 0x13/;"	constant
ref8	$ZIGLIB/std/dwarf/FORM.zig	/^pub const ref8 = 0x14/;"	constant
refAllDecls	$ZIGLIB/std/testing.zig	/^pub fn refAllDecls(comptime T: type) void {$/;"	function
refAllDeclsRecursive	$ZIGLIB/std/testing.zig	/^pub fn refAllDeclsRecursive(comptime T: type) void {$/;"	function
ref_addr	$ZIGLIB/std/dwarf/FORM.zig	/^pub const ref_addr = 0x10/;"	constant
ref_count	$ZIGLIB/std/c/freebsd.zig	/ref_count: c_int/;"	field
ref_lane	$ZIGLIB/std/crypto/argon2.zig	/var ref_lane = @intCast(u32, rand >> 32) % threads/;"	variable
ref_offset	$ZIGLIB/std/dwarf.zig	/const ref_offset = try this_die_obj.getAttrRef(AT.specification)/;"	constant
ref_sig8	$ZIGLIB/std/dwarf/FORM.zig	/^pub const ref_sig8 = 0x20/;"	constant
ref_sup4	$ZIGLIB/std/dwarf/FORM.zig	/^pub const ref_sup4 = 0x1c/;"	constant
ref_sup8	$ZIGLIB/std/dwarf/FORM.zig	/^pub const ref_sup8 = 0x24/;"	constant
ref_udata	$ZIGLIB/std/dwarf/FORM.zig	/^pub const ref_udata = 0x15/;"	constant
reference	$ZIGLIB/std/dwarf/AT.zig	/^pub const reference = 0x77/;"	constant
reference_test	$ZIGLIB/std/crypto/blake3.zig	/^const reference_test = ReferenceTest{$/;"	constant
reference_trace	$ZIGLIB/std/Build.zig	/^reference_trace: ?u32 = null/;"	field
reference_type	$ZIGLIB/std/dwarf/TAG.zig	/^pub const reference_type = 0x10/;"	constant
reference_types	$ZIGLIB/std/target/wasm.zig	/reference_types/;"	field
refill	$ZIGLIB/std/rand/Isaac64.zig	/^fn refill(self: *Isaac64) void {$/;"	function
reflect_input	$ZIGLIB/std/hash/crc.zig	/reflect_input: bool/;"	field
reflect_output	$ZIGLIB/std/hash/crc.zig	/reflect_output: bool/;"	field
refresh	$ZIGLIB/std/Progress.zig	/^pub fn refresh(self: *Progress) void {$/;"	function
refreshWithHeldLock	$ZIGLIB/std/Progress.zig	/^fn refreshWithHeldLock(self: *Progress) void {$/;"	function
refresh_rate_ns	$ZIGLIB/std/Progress.zig	/^refresh_rate_ns: u64 = 50 * std.time.ns_per_ms/;"	field
reftype	$ZIGLIB/std/wasm.zig	/reftype: RefType/;"	field
reg0	$ZIGLIB/std/dwarf/OP.zig	/^pub const reg0 = 0x50/;"	constant
reg1	$ZIGLIB/std/dwarf/OP.zig	/^pub const reg1 = 0x51/;"	constant
reg10	$ZIGLIB/std/dwarf/OP.zig	/^pub const reg10 = 0x5a/;"	constant
reg11	$ZIGLIB/std/dwarf/OP.zig	/^pub const reg11 = 0x5b/;"	constant
reg12	$ZIGLIB/std/dwarf/OP.zig	/^pub const reg12 = 0x5c/;"	constant
reg13	$ZIGLIB/std/dwarf/OP.zig	/^pub const reg13 = 0x5d/;"	constant
reg14	$ZIGLIB/std/dwarf/OP.zig	/^pub const reg14 = 0x5e/;"	constant
reg15	$ZIGLIB/std/dwarf/OP.zig	/^pub const reg15 = 0x5f/;"	constant
reg16	$ZIGLIB/std/dwarf/OP.zig	/^pub const reg16 = 0x60/;"	constant
reg17	$ZIGLIB/std/dwarf/OP.zig	/^pub const reg17 = 0x61/;"	constant
reg18	$ZIGLIB/std/dwarf/OP.zig	/^pub const reg18 = 0x62/;"	constant
reg19	$ZIGLIB/std/dwarf/OP.zig	/^pub const reg19 = 0x63/;"	constant
reg2	$ZIGLIB/std/dwarf/OP.zig	/^pub const reg2 = 0x52/;"	constant
reg20	$ZIGLIB/std/dwarf/OP.zig	/^pub const reg20 = 0x64/;"	constant
reg21	$ZIGLIB/std/dwarf/OP.zig	/^pub const reg21 = 0x65/;"	constant
reg22	$ZIGLIB/std/dwarf/OP.zig	/^pub const reg22 = 0x66/;"	constant
reg23	$ZIGLIB/std/dwarf/OP.zig	/^pub const reg23 = 0x67/;"	constant
reg24	$ZIGLIB/std/dwarf/OP.zig	/^pub const reg24 = 0x68/;"	constant
reg25	$ZIGLIB/std/dwarf/OP.zig	/^pub const reg25 = 0x69/;"	constant
reg26	$ZIGLIB/std/dwarf/OP.zig	/^pub const reg26 = 0x6a/;"	constant
reg27	$ZIGLIB/std/dwarf/OP.zig	/^pub const reg27 = 0x6b/;"	constant
reg28	$ZIGLIB/std/dwarf/OP.zig	/^pub const reg28 = 0x6c/;"	constant
reg29	$ZIGLIB/std/dwarf/OP.zig	/^pub const reg29 = 0x6d/;"	constant
reg3	$ZIGLIB/std/dwarf/OP.zig	/^pub const reg3 = 0x53/;"	constant
reg30	$ZIGLIB/std/dwarf/OP.zig	/^pub const reg30 = 0x6e/;"	constant
reg31	$ZIGLIB/std/dwarf/OP.zig	/^pub const reg31 = 0x6f/;"	constant
reg4	$ZIGLIB/std/dwarf/OP.zig	/^pub const reg4 = 0x54/;"	constant
reg5	$ZIGLIB/std/dwarf/OP.zig	/^pub const reg5 = 0x55/;"	constant
reg6	$ZIGLIB/std/dwarf/OP.zig	/^pub const reg6 = 0x56/;"	constant
reg7	$ZIGLIB/std/dwarf/OP.zig	/^pub const reg7 = 0x57/;"	constant
reg8	$ZIGLIB/std/dwarf/OP.zig	/^pub const reg8 = 0x58/;"	constant
reg9	$ZIGLIB/std/dwarf/OP.zig	/^pub const reg9 = 0x59/;"	constant
reg_save_area	$ZIGLIB/std/builtin.zig	/reg_save_area: *anyopaque/;"	field
region_count	$ZIGLIB/std/c/darwin.zig	/region_count: integer_t/;"	field
register	$ZIGLIB/std/dwarf.zig	/pub const register = 0x09/;"	constant
registerClassExA	$ZIGLIB/std/os/windows/user32.zig	/^pub fn registerClassExA(window_class: *const WNDCLASSEXA) !ATOM {$/;"	function
registerClassExW	$ZIGLIB/std/os/windows/user32.zig	/^pub fn registerClassExW(window_class: *const WNDCLASSEXW) !ATOM {$/;"	function
registerDataNotify	$ZIGLIB/std/os/uefi/protocols/ip6_config_protocol.zig	/pub fn registerDataNotify(self: *const Ip6ConfigProtocol, data_type: Ip6ConfigDataType, event: Event) Status {$/;"	function
registerKeyNotify	$ZIGLIB/std/os/uefi/protocols/simple_text_input_ex_protocol.zig	/pub fn registerKeyNotify(self: *const SimpleTextInputExProtocol, key_data: *const KeyData, notify: *const fn (*const KeyData) callconv(.C) usize, handle: **anyopaque) Status {$/;"	function
registerProtocolNotify	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/registerProtocolNotify: *const fn (protocol: *align(8) const Guid, event: Event, registration: **anyopaque) callconv(.C) Status/;"	field
register_buffers	$ZIGLIB/std/os/linux/io_uring.zig	/pub fn register_buffers(self: *IO_Uring, buffers: []const os.iovec) !void {$/;"	function
register_eventfd	$ZIGLIB/std/os/linux/io_uring.zig	/pub fn register_eventfd(self: *IO_Uring, fd: os.fd_t) !void {$/;"	function
register_eventfd_async	$ZIGLIB/std/os/linux/io_uring.zig	/pub fn register_eventfd_async(self: *IO_Uring, fd: os.fd_t) !void {$/;"	function
register_files	$ZIGLIB/std/os/linux/io_uring.zig	/pub fn register_files(self: *IO_Uring, fds: []const os.fd_t) !void {$/;"	function
register_files_update	$ZIGLIB/std/os/linux/io_uring.zig	/pub fn register_files_update(self: *IO_Uring, offset: u32, fds: []const os.fd_t) !void {$/;"	function
register_op	$ZIGLIB/std/os/linux.zig	/register_op: IORING_REGISTER/;"	field
registeredID	$ZIGLIB/std/crypto/Certificate.zig	/registeredID = 8/;"	field
registered_fds	$ZIGLIB/std/os/linux/io_uring.zig	/var registered_fds = [_]os.fd_t{0} ** 2/;"	variable
registers	$ZIGLIB/std/zig/system/windows.zig	/var registers: [12]u64 = undefined/;"	variable
regs	$ZIGLIB/std/os/linux/sparc64.zig	/regs: extern struct {$/;"	field
regspace	$ZIGLIB/std/os/linux/x86.zig	/regspace: [64]u64/;"	field
regval_type	$ZIGLIB/std/dwarf/OP.zig	/^pub const regval_type = 0xa5/;"	constant
regx	$ZIGLIB/std/dwarf/OP.zig	/^pub const regx = 0x90/;"	constant
reinstallProtocolInterface	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/reinstallProtocolInterface: *const fn (handle: Handle, protocol: *align(8) const Guid, old_interface: *anyopaque, new_interface: *anyopaque) callconv(.C) Status/;"	field
reinterpret	$ZIGLIB/std/dwarf/OP.zig	/^pub const reinterpret = 0xa9/;"	constant
rejectIdentity	$ZIGLIB/std/crypto/pcurves/secp256k1.zig	/pub fn rejectIdentity(p: Secp256k1) IdentityElementError!void {$/;"	function
rejectLowOrder	$ZIGLIB/std/crypto/25519/edwards25519.zig	/pub fn rejectLowOrder(p: Edwards25519) WeakPublicKeyError!void {$/;"	function
rejectNonCanonical	$ZIGLIB/std/crypto/pcurves/secp256k1/scalar.zig	/^pub fn rejectNonCanonical(s: CompressedScalar, endian: std.builtin.Endian) NonCanonicalError!void {$/;"	function
rel_addr	$ZIGLIB/std/os/linux/start_pie.zig	/var rel_addr: usize = 0/;"	variable
rel_size	$ZIGLIB/std/os/linux/start_pie.zig	/var rel_size: usize = 0/;"	variable
rela	$ZIGLIB/std/os/linux/start_pie.zig	/const rela = std.mem.bytesAsSlice(elf.Rela, @intToPtr([*]u8, rela_addr)[0..rela_size])/;"	constant
rela_addr	$ZIGLIB/std/os/linux/start_pie.zig	/var rela_addr: usize = 0/;"	variable
rela_size	$ZIGLIB/std/os/linux/start_pie.zig	/var rela_size: usize = 0/;"	variable
relative	$ZIGLIB/std/fs/path.zig	/^pub fn relative(allocator: Allocator, from: []const u8, to: []const u8) ![]u8 {$/;"	function
relativePosix	$ZIGLIB/std/fs/path.zig	/^pub fn relativePosix(allocator: Allocator, from: []const u8, to: []const u8) ![]u8 {$/;"	function
relativeWindows	$ZIGLIB/std/fs/path.zig	/^pub fn relativeWindows(allocator: Allocator, from: []const u8, to: []const u8) ![]u8 {$/;"	function
relative_movement_x	$ZIGLIB/std/os/uefi/protocols/simple_pointer_protocol.zig	/relative_movement_x: i32 = undefined/;"	field
relative_movement_y	$ZIGLIB/std/os/uefi/protocols/simple_pointer_protocol.zig	/relative_movement_y: i32 = undefined/;"	field
relative_movement_z	$ZIGLIB/std/os/uefi/protocols/simple_pointer_protocol.zig	/relative_movement_z: i32 = undefined/;"	field
relative_path	$ZIGLIB/std/os.zig	/relative_path: []const u8/;"	field
relax	$ZIGLIB/std/target/riscv.zig	/relax/;"	field
relaxed_simd	$ZIGLIB/std/target/wasm.zig	/relaxed_simd/;"	field
release	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/const release = mem.sliceTo(&uts.release, 0)/;"	constant
releaseDC	$ZIGLIB/std/os/windows/user32.zig	/^pub fn releaseDC(hWnd: ?HWND, hDC: HDC) bool {$/;"	function
reloc_type_arm64	$ZIGLIB/std/macho.zig	/^pub const reloc_type_arm64 = enum(u4) {$/;"	enum
reloc_type_x86_64	$ZIGLIB/std/macho.zig	/^pub const reloc_type_x86_64 = enum(u4) {$/;"	enum
relocate	$ZIGLIB/std/os/linux/start_pie.zig	/^pub fn relocate(phdrs: []elf.Phdr) void {$/;"	function
relocated_address	$ZIGLIB/std/debug.zig	/const relocated_address = address - self.base_address/;"	constant
relocated_address_o	$ZIGLIB/std/debug.zig	/const relocated_address_o = o_file_info.addr_table.get(stab_symbol) orelse return SymbolInfo{$/;"	constant
relocation_info	$ZIGLIB/std/macho.zig	/^pub const relocation_info = packed struct {$/;"	struct
reloff	$ZIGLIB/std/macho.zig	/reloff: u32 = 0/;"	field
rem_buffer	$ZIGLIB/std/pdb.zig	/var rem_buffer = buffer/;"	variable
rem_key	$ZIGLIB/std/hash/wyhash.zig	/const rem_key = self.buf[0..self.buf_len]/;"	constant
rem_len	$ZIGLIB/std/hash/wyhash.zig	/const rem_len = @intCast(u5, b.len)/;"	constant
rem_pio2	$ZIGLIB/compiler_rt/rem_pio2.zig	/^pub fn rem_pio2(x: f64, y: *[2]f64) i32 {$/;"	function
rem_pio2_generic	$ZIGLIB/compiler_rt/sincos.zig	/^pub const rem_pio2_generic = @compileError("TODO")/;"	constant
rem_pio2_large	$ZIGLIB/compiler_rt/rem_pio2_large.zig	/^pub fn rem_pio2_large(x: []f64, y: []f64, e0: i32, nx: i32, prec: usize) i32 {$/;"	function
rem_pio2f	$ZIGLIB/compiler_rt/rem_pio2f.zig	/^pub fn rem_pio2f(x: f32, y: *f64) i32 {$/;"	function
remain_len	$ZIGLIB/std/hash/wyhash.zig	/const remain_len = b.len - off/;"	constant
remainder	$ZIGLIB/std/fmt/parse_float/decimal.zig	/const remainder = n - (10 * quotient)/;"	constant
remaining	$ZIGLIB/std/mem.zig	/var remaining: T = value/;"	variable
remaining_bits	$ZIGLIB/std/math/big/int.zig	/var remaining_bits = bit_count/;"	variable
remaining_blocks	$ZIGLIB/std/crypto/chacha20.zig	/var remaining_blocks: u32 = @intCast(u32, (in.len \/ big_block))/;"	variable
remaining_code_units	$ZIGLIB/std/zig/tokenizer.zig	/var remaining_code_units: usize = undefined/;"	variable
remaining_fmt	$ZIGLIB/std/fmt.zig	/const remaining_fmt = comptime stripOptionalOrErrorUnionSpec(actual_fmt)/;"	constant
remaining_ones	$ZIGLIB/std/math/big/int.zig	/const remaining_ones = remaining_bits - (limb_bits - leading_zeroes)/;"	constant
remaining_shift	$ZIGLIB/std/leb128.zig	/const remaining_shift = @intCast(u3, @typeInfo(U).Int.bits - @as(u16, shift))/;"	constant
remap_file_pages	$ZIGLIB/std/os/linux/syscalls.zig	/remap_file_pages = Linux + 251/;"	field
remember_state	$ZIGLIB/std/dwarf.zig	/pub const remember_state = 0x0a/;"	constant
remote_address	$ZIGLIB/std/os/uefi/protocols/udp6_protocol.zig	/remote_address: Ip6Address/;"	field
remote_ip_address	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/remote_ip_address: uefi.Ipv6Address/;"	field
remote_port	$ZIGLIB/std/os/uefi/protocols/udp6_protocol.zig	/remote_port: u16/;"	field
removable_media	$ZIGLIB/std/os/uefi/protocols/block_io_protocol.zig	/removable_media: bool/;"	field
remove	$ZIGLIB/std/treap.zig	/fn remove(self: *Self, node: *Node) void {$/;"	function
removeAdapted	$ZIGLIB/std/hash_map.zig	/pub fn removeAdapted(self: *Self, key: anytype, ctx: anytype) bool {$/;"	function
removeAll	$ZIGLIB/std/enums.zig	/pub fn removeAll(self: *Self, key: E) void {$/;"	function
removeByIndex	$ZIGLIB/std/hash_map.zig	/fn removeByIndex(self: *Self, idx: usize) void {$/;"	function
removeByIndexGeneric	$ZIGLIB/std/array_hash_map.zig	/fn removeByIndexGeneric(self: *Self, entry_index: usize, ctx: ByIndexContext, header: *IndexHeader, comptime I: type, comptime removal_type: RemovalType) void {$/;"	function
removeByKey	$ZIGLIB/std/array_hash_map.zig	/fn removeByKey(self: *Self, key: anytype, key_ctx: anytype, ctx: ByIndexContext, comptime removal_type: RemovalType) bool {$/;"	function
removeByKeyGeneric	$ZIGLIB/std/array_hash_map.zig	/fn removeByKeyGeneric(self: *Self, key: anytype, key_ctx: anytype, ctx: ByIndexContext, header: *IndexHeader, comptime I: type, comptime removal_type: RemovalType) bool {$/;"	function
removeByPtr	$ZIGLIB/std/hash_map.zig	/pub fn removeByPtr(self: *Self, keyPtr: *K) void {$/;"	function
removeContext	$ZIGLIB/std/hash_map.zig	/pub fn removeContext(self: *Self, key: K, ctx: Context) bool {$/;"	function
removeDotDirsSanitized	$ZIGLIB/std/os/windows.zig	/^pub fn removeDotDirsSanitized(comptime T: type, path: []T) RemoveDotDirsError!usize {$/;"	function
removeFeature	$ZIGLIB/std/target.zig	/pub fn removeFeature(set: *Set, arch_feature_index: Index) void {$/;"	function
removeFeatureSet	$ZIGLIB/std/target.zig	/pub fn removeFeatureSet(set: *Set, other_set: Set) void {$/;"	function
removeFile	$ZIGLIB/std/fs/watch.zig	/pub fn removeFile(self: *Self, file_path: []const u8) !?V {$/;"	function
removeFromArrayAndUpdateIndex	$ZIGLIB/std/array_hash_map.zig	/fn removeFromArrayAndUpdateIndex(self: *Self, entry_index: usize, ctx: ByIndexContext, header: *IndexHeader, comptime I: type, indexes: []Index(I), comptime removal_type: RemovalType) void {$/;"	function
removeFromIndexByIndex	$ZIGLIB/std/array_hash_map.zig	/fn removeFromIndexByIndex(self: *Self, entry_index: usize, ctx: ByIndexContext, header: *IndexHeader) void {$/;"	function
removeFromIndexByIndexGeneric	$ZIGLIB/std/array_hash_map.zig	/fn removeFromIndexByIndexGeneric(self: *Self, entry_index: usize, ctx: ByIndexContext, header: *IndexHeader, comptime I: type, indexes: []Index(I)) void {$/;"	function
removeFromIndexByKey	$ZIGLIB/std/array_hash_map.zig	/fn removeFromIndexByKey(self: *Self, key: anytype, ctx: anytype, header: *IndexHeader, comptime I: type, indexes: []Index(I)) ?usize {$/;"	function
removeIndex	$ZIGLIB/std/priority_queue.zig	/pub fn removeIndex(self: *Self, index: usize) T {$/;"	function
removeMax	$ZIGLIB/std/priority_dequeue.zig	/pub fn removeMax(self: *Self) T {$/;"	function
removeMaxOrNull	$ZIGLIB/std/priority_dequeue.zig	/pub fn removeMaxOrNull(self: *Self) ?T {$/;"	function
removeMin	$ZIGLIB/std/priority_dequeue.zig	/pub fn removeMin(self: *Self) T {$/;"	function
removeMinOrNull	$ZIGLIB/std/priority_dequeue.zig	/pub fn removeMinOrNull(self: *Self) ?T {$/;"	function
removeNext	$ZIGLIB/std/linked_list.zig	/pub fn removeNext(node: *Node) ?*Node {$/;"	function
removeOrNull	$ZIGLIB/std/priority_queue.zig	/pub fn removeOrNull(self: *Self) ?T {$/;"	function
removePackageList	$ZIGLIB/std/os/uefi/protocols/hii_database_protocol.zig	/pub fn removePackageList(self: *const HIIDatabaseProtocol, handle: hii.HIIHandle) Status {$/;"	function
removeSet	$ZIGLIB/std/enums.zig	/pub fn removeSet(self: *Self, other: Self) void {$/;"	function
removeSlot	$ZIGLIB/std/array_hash_map.zig	/fn removeSlot(removed_slot: usize, header: *IndexHeader, comptime I: type, indexes: []Index(I)) void {$/;"	function
remove_buffers	$ZIGLIB/std/os/linux/io_uring.zig	/pub fn remove_buffers($/;"	function
remove_count	$ZIGLIB/std/event/channel.zig	/var remove_count: usize = 0/;"	variable
remove_dir	$ZIGLIB/std/os/windows.zig	/remove_dir: bool = false/;"	field
remove_dir_step	$ZIGLIB/std/Build.zig	/const remove_dir_step = self.allocator.create(RemoveDirStep) catch @panic("OOM")/;"	constant
remove_sign	$ZIGLIB/std/math/isnormal.zig	/const remove_sign = ~@as(TBits, 0) >> 1/;"	constant
remove_stderr	$ZIGLIB/std/child_process.zig	/var remove_stderr = false/;"	variable
remove_stdout	$ZIGLIB/std/child_process.zig	/var remove_stdout = false/;"	variable
removed	$ZIGLIB/std/treap.zig	/removed/;"	field
removed_entry	$ZIGLIB/std/array_hash_map.zig	/const removed_entry: KV = .{$/;"	constant
removed_entry_index	$ZIGLIB/std/array_hash_map.zig	/const removed_entry_index = indexes[slot].entry_index/;"	constant
removexattr	$ZIGLIB/std/os/linux/syscalls.zig	/removexattr = Linux + 233/;"	field
rename	$ZIGLIB/std/os/linux/syscalls.zig	/rename = Linux + 80/;"	field
renameAbsolute	$ZIGLIB/std/fs.zig	/^pub fn renameAbsolute(old_path: []const u8, new_path: []const u8) !void {$/;"	function
renameAbsoluteW	$ZIGLIB/std/fs.zig	/^pub fn renameAbsoluteW(old_path: [*:0]const u16, new_path: [*:0]const u16) !void {$/;"	function
renameAbsoluteZ	$ZIGLIB/std/fs.zig	/^pub fn renameAbsoluteZ(old_path: [*:0]const u8, new_path: [*:0]const u8) !void {$/;"	function
renameW	$ZIGLIB/std/os.zig	/^pub fn renameW(old_path: [*:0]const u16, new_path: [*:0]const u16) RenameError!void {$/;"	function
renameZ	$ZIGLIB/std/os.zig	/^pub fn renameZ(old_path: [*:0]const u8, new_path: [*:0]const u8) RenameError!void {$/;"	function
rename_info	$ZIGLIB/std/os.zig	/const rename_info = @ptrCast(*windows.FILE_RENAME_INFORMATION, &rename_info_buf)/;"	constant
rename_info_buf	$ZIGLIB/std/os.zig	/var rename_info_buf: [struct_buf_len]u8 align(@alignOf(windows.FILE_RENAME_INFORMATION)) = undefined/;"	variable
renameat	$ZIGLIB/std/os/linux/syscalls.zig	/renameat = Linux + 295/;"	field
renameat2	$ZIGLIB/std/os/linux/syscalls.zig	/renameat2 = Linux + 351/;"	field
renameatW	$ZIGLIB/std/os.zig	/^pub fn renameatW($/;"	function
renameatWasi	$ZIGLIB/std/os.zig	/^pub fn renameatWasi(old: RelativePathWasi, new: RelativePathWasi) RenameError!void {$/;"	function
renameatZ	$ZIGLIB/std/os.zig	/^pub fn renameatZ($/;"	function
render	$ZIGLIB/std/zig/Ast.zig	/^pub fn render(tree: Ast, gpa: Allocator) RenderError![]u8 {$/;"	function
renderArrayInit	$ZIGLIB/std/zig/render.zig	/^fn renderArrayInit($/;"	function
renderArrayType	$ZIGLIB/std/zig/render.zig	/^fn renderArrayType($/;"	function
renderAsm	$ZIGLIB/std/zig/render.zig	/^fn renderAsm($/;"	function
renderAsmInput	$ZIGLIB/std/zig/render.zig	/^fn renderAsmInput($/;"	function
renderAsmOutput	$ZIGLIB/std/zig/render.zig	/^fn renderAsmOutput($/;"	function
renderBlock	$ZIGLIB/std/zig/render.zig	/^fn renderBlock($/;"	function
renderBuiltinCall	$ZIGLIB/std/zig/render.zig	/^fn renderBuiltinCall($/;"	function
renderCall	$ZIGLIB/std/zig/render.zig	/^fn renderCall($/;"	function
renderComments	$ZIGLIB/std/zig/render.zig	/^fn renderComments(ais: *Ais, tree: Ast, start: usize, end: usize) Error!bool {$/;"	function
renderContainerDecl	$ZIGLIB/std/zig/render.zig	/^fn renderContainerDecl($/;"	function
renderContainerDocComments	$ZIGLIB/std/zig/render.zig	/^fn renderContainerDocComments(ais: *Ais, tree: Ast, start_token: Ast.TokenIndex) Error!void {$/;"	function
renderContainerField	$ZIGLIB/std/zig/render.zig	/^fn renderContainerField($/;"	function
renderDocComments	$ZIGLIB/std/zig/render.zig	/^fn renderDocComments(ais: *Ais, tree: Ast, end_token: Ast.TokenIndex) Error!void {$/;"	function
renderError	$ZIGLIB/std/zig/Ast.zig	/^pub fn renderError(tree: Ast, parse_error: Error, stream: anytype) !void {$/;"	function
renderExpression	$ZIGLIB/std/zig/render.zig	/^fn renderExpression(gpa: Allocator, ais: *Ais, tree: Ast, node: Ast.Node.Index, space: Space) Error!void {$/;"	function
renderExpressionComma	$ZIGLIB/std/zig/render.zig	/^fn renderExpressionComma(gpa: Allocator, ais: *Ais, tree: Ast, node: Ast.Node.Index, space: Space) Error!void {$/;"	function
renderExpressionIndented	$ZIGLIB/std/zig/render.zig	/^fn renderExpressionIndented(gpa: Allocator, ais: *Ais, tree: Ast, node: Ast.Node.Index, space: Space) Error!void {$/;"	function
renderExpressions	$ZIGLIB/std/zig/render.zig	/^fn renderExpressions(gpa: Allocator, ais: *Ais, tree: Ast, expressions: []const Ast.Node.Index, space: Space) Error!void {$/;"	function
renderExtraNewline	$ZIGLIB/std/zig/render.zig	/^fn renderExtraNewline(ais: *Ais, tree: Ast, node: Ast.Node.Index) Error!void {$/;"	function
renderExtraNewlineToken	$ZIGLIB/std/zig/render.zig	/^fn renderExtraNewlineToken(ais: *Ais, tree: Ast, token_index: Ast.TokenIndex) Error!void {$/;"	function
renderFnProto	$ZIGLIB/std/zig/render.zig	/^fn renderFnProto(gpa: Allocator, ais: *Ais, tree: Ast, fn_proto: Ast.full.FnProto, space: Space) Error!void {$/;"	function
renderIdentifier	$ZIGLIB/std/zig/render.zig	/^fn renderIdentifier(ais: *Ais, tree: Ast, token_index: Ast.TokenIndex, space: Space, quote: QuoteBehavior) Error!void {$/;"	function
renderIdentifierComma	$ZIGLIB/std/zig/render.zig	/^fn renderIdentifierComma(ais: *Ais, tree: Ast, token: Ast.TokenIndex, space: Space, quote: QuoteBehavior) Error!void {$/;"	function
renderIdentifierContents	$ZIGLIB/std/zig/render.zig	/^fn renderIdentifierContents(writer: anytype, bytes: []const u8) !void {$/;"	function
renderIf	$ZIGLIB/std/zig/render.zig	/^fn renderIf(gpa: Allocator, ais: *Ais, tree: Ast, if_node: Ast.full.If, space: Space) Error!void {$/;"	function
renderMember	$ZIGLIB/std/zig/render.zig	/^fn renderMember($/;"	function
renderMembers	$ZIGLIB/std/zig/render.zig	/^fn renderMembers(gpa: Allocator, ais: *Ais, tree: Ast, members: []const Ast.Node.Index) Error!void {$/;"	function
renderPtrType	$ZIGLIB/std/zig/render.zig	/^fn renderPtrType($/;"	function
renderQuotedIdentifier	$ZIGLIB/std/zig/render.zig	/^fn renderQuotedIdentifier(ais: *Ais, tree: Ast, token_index: Ast.TokenIndex, space: Space, comptime unquote: bool) !void {$/;"	function
renderSlice	$ZIGLIB/std/zig/render.zig	/^fn renderSlice($/;"	function
renderSpace	$ZIGLIB/std/zig/render.zig	/^fn renderSpace(ais: *Ais, tree: Ast, token_index: Ast.TokenIndex, lexeme_len: usize, space: Space) Error!void {$/;"	function
renderStructInit	$ZIGLIB/std/zig/render.zig	/^fn renderStructInit($/;"	function
renderSwitchCase	$ZIGLIB/std/zig/render.zig	/^fn renderSwitchCase($/;"	function
renderToArrayList	$ZIGLIB/std/zig/Ast.zig	/^pub fn renderToArrayList(tree: Ast, buffer: *std.ArrayList(u8)) RenderError!void {$/;"	function
renderToken	$ZIGLIB/std/zig/render.zig	/^fn renderToken(ais: *Ais, tree: Ast, token_index: Ast.TokenIndex, space: Space) Error!void {$/;"	function
renderTokenComma	$ZIGLIB/std/zig/render.zig	/^fn renderTokenComma(ais: *Ais, tree: Ast, token: Ast.TokenIndex, space: Space) Error!void {$/;"	function
renderTree	$ZIGLIB/std/zig/render.zig	/^pub fn renderTree(buffer: *std.ArrayList(u8), tree: Ast) Error!void {$/;"	function
renderValue	$ZIGLIB/std/Build/ConfigHeaderStep.zig	/^fn renderValue(output: *std.ArrayList(u8), name: []const u8, value: Value) !void {$/;"	function
renderVarDecl	$ZIGLIB/std/zig/render.zig	/^fn renderVarDecl(gpa: Allocator, ais: *Ais, tree: Ast, var_decl: Ast.full.VarDecl) Error!void {$/;"	function
renderWhile	$ZIGLIB/std/zig/render.zig	/^fn renderWhile(gpa: Allocator, ais: *Ais, tree: Ast, while_node: Ast.full.While, space: Space) Error!void {$/;"	function
render_autoconf	$ZIGLIB/std/Build/ConfigHeaderStep.zig	/^fn render_autoconf($/;"	function
render_blank	$ZIGLIB/std/Build/ConfigHeaderStep.zig	/^fn render_blank($/;"	function
render_cmake	$ZIGLIB/std/Build/ConfigHeaderStep.zig	/^fn render_cmake($/;"	function
renderscript32	$ZIGLIB/std/target.zig	/renderscript32/;"	field
renderscript64	$ZIGLIB/std/target.zig	/renderscript64/;"	field
rep_0	$ZIGLIB/std/compress/lzma/decode.zig	/const rep_0 = try self.decodeDistance(reader, decoder, len, update)/;"	constant
rep_len_decoder	$ZIGLIB/std/compress/lzma/decode.zig	/rep_len_decoder: LenDecoder/;"	field
rep_t	$ZIGLIB/compiler_rt/float_to_int.zig	/const rep_t = Int(.unsigned, float_bits)/;"	constant
reparse_buf	$ZIGLIB/std/os/windows.zig	/var reparse_buf: [MAXIMUM_REPARSE_DATA_BUFFER_SIZE]u8 align(@alignOf(REPARSE_DATA_BUFFER)) = undefined/;"	variable
reparse_struct	$ZIGLIB/std/os/windows.zig	/const reparse_struct = @ptrCast(*const REPARSE_DATA_BUFFER, @alignCast(@alignOf(REPARSE_DATA_BUFFER), &reparse_buf[0]))/;"	constant
reparse_tag	$ZIGLIB/std/fs/file.zig	/reparse_tag: windows.DWORD/;"	field
repeat	$ZIGLIB/std/simd.zig	/^pub fn repeat(comptime len: usize, vec: anytype) @Vector(len, std.meta.Child(@TypeOf(vec))) {$/;"	function
repeated_underscore	$ZIGLIB/std/zig/number_literal.zig	/repeated_underscore: usize/;"	field
replace	$ZIGLIB/std/treap.zig	/fn replace(self: *Self, old: *Node, new: *Node) void {$/;"	function
replaceOwned	$ZIGLIB/std/mem.zig	/^pub fn replaceOwned(comptime T: type, allocator: Allocator, input: []const T, needle: []const T, replacement: []const T) Allocator.Error![]T {$/;"	function
replaceRange	$ZIGLIB/std/bounded_array.zig	/pub fn replaceRange($/;"	function
replaceScalar	$ZIGLIB/std/mem.zig	/^pub fn replaceScalar(comptime T: type, slice: []T, needle: T, replacement: T) void {$/;"	function
replace_bpf_fd	$ZIGLIB/std/os/linux/bpf.zig	/replace_bpf_fd: fd_t/;"	field
replacementSize	$ZIGLIB/std/mem.zig	/^pub fn replacementSize(comptime T: type, input: []const T, needle: []const T, replacement: []const T) usize {$/;"	function
replacement_character	$ZIGLIB/std/unicode.zig	/^pub const replacement_character: u21 = 0xFFFD/;"	constant
replacements	$ZIGLIB/std/mem.zig	/var replacements: usize = 0/;"	variable
reportDoubleFree	$ZIGLIB/std/heap/general_purpose_allocator.zig	/fn reportDoubleFree(ret_addr: usize, alloc_stack_trace: StackTrace, free_stack_trace: StackTrace) void {$/;"	function
repr	$ZIGLIB/std/rand/ziggurat.zig	/const repr = (0x3ff << 52) | (bits >> 12)/;"	constant
reprovided_buffer_id	$ZIGLIB/std/os/linux/io_uring.zig	/const reprovided_buffer_id = 2/;"	constant
req_bits	$ZIGLIB/std/math/big/int.zig	/const req_bits = self.bitCountTwosComp() + @boolToInt(self.positive and signedness == .signed)/;"	constant
req_limbs	$ZIGLIB/std/math/big/int.zig	/const req_limbs = calcTwosCompLimbCount(bit_count)/;"	constant
req_node	$ZIGLIB/std/event/loop.zig	/var req_node = Request.Node{$/;"	variable
request	$ZIGLIB/std/os/linux/ioctl.zig	/const request = Request{$/;"	constant
requestHasBody	$ZIGLIB/std/http.zig	/pub fn requestHasBody(self: Method) bool {$/;"	function
request_amt	$ZIGLIB/std/crypto/tls.zig	/const request_amt = their_amt - existing_amt/;"	constant
request_key	$ZIGLIB/std/os/linux/syscalls.zig	/request_key = Linux + 281/;"	field
request_timeout	$ZIGLIB/std/http.zig	/request_timeout = 408/;"	field
requested_memory_limit	$ZIGLIB/std/heap/general_purpose_allocator.zig	/requested_memory_limit: @TypeOf(requested_memory_limit_init) = requested_memory_limit_init/;"	field
requested_memory_limit_init	$ZIGLIB/std/heap/general_purpose_allocator.zig	/const requested_memory_limit_init = if (config.enable_memory_limit) @as(usize, math.maxInt(usize)) else {}/;"	constant
requested_size	$ZIGLIB/std/heap/general_purpose_allocator.zig	/requested_size: if (config.enable_memory_limit) usize else void/;"	field
require_aligned_register_pair	$ZIGLIB/std/os/linux.zig	/^const require_aligned_register_pair =$/;"	constant
required	$ZIGLIB/std/json.zig	/required: []const u8 = "something"/;"	field
required_len_in_u16	$ZIGLIB/std/os/windows.zig	/const required_len_in_u16 = result_path.len + @divExact(@ptrToInt(result_path.ptr) - @ptrToInt(&out_buffer), 2) + 1/;"	constant
requiresLibC	$ZIGLIB/std/target.zig	/pub fn requiresLibC(os: Os) bool {$/;"	function
resMSendRc	$ZIGLIB/std/net.zig	/^fn resMSendRc($/;"	function
res_mkquery	$ZIGLIB/std/os.zig	/^pub fn res_mkquery($/;"	function
rescan	$ZIGLIB/std/crypto/Certificate/Bundle.zig	/^pub fn rescan(cb: *Bundle, gpa: Allocator) !void {$/;"	function
rescanLinux	$ZIGLIB/std/crypto/Certificate/Bundle.zig	/^pub fn rescanLinux(cb: *Bundle, gpa: Allocator) !void {$/;"	function
rescanMac	$ZIGLIB/std/crypto/Certificate/Bundle/macos.zig	/^pub fn rescanMac(cb: *Bundle, gpa: Allocator) !void {$/;"	function
rescanWindows	$ZIGLIB/std/crypto/Certificate/Bundle.zig	/^pub fn rescanWindows(cb: *Bundle, gpa: Allocator) !void {$/;"	function
reserveNode	$ZIGLIB/std/zig/Parse.zig	/^fn reserveNode(p: *Parse, tag: Ast.Node.Tag) !usize {$/;"	function
reserve_a0	$ZIGLIB/std/target/m68k.zig	/reserve_a0/;"	field
reserve_a1	$ZIGLIB/std/target/m68k.zig	/reserve_a1/;"	field
reserve_a2	$ZIGLIB/std/target/m68k.zig	/reserve_a2/;"	field
reserve_a3	$ZIGLIB/std/target/m68k.zig	/reserve_a3/;"	field
reserve_a4	$ZIGLIB/std/target/m68k.zig	/reserve_a4/;"	field
reserve_a5	$ZIGLIB/std/target/m68k.zig	/reserve_a5/;"	field
reserve_a6	$ZIGLIB/std/target/m68k.zig	/reserve_a6/;"	field
reserve_d0	$ZIGLIB/std/target/m68k.zig	/reserve_d0/;"	field
reserve_d1	$ZIGLIB/std/target/m68k.zig	/reserve_d1/;"	field
reserve_d2	$ZIGLIB/std/target/m68k.zig	/reserve_d2/;"	field
reserve_d3	$ZIGLIB/std/target/m68k.zig	/reserve_d3/;"	field
reserve_d4	$ZIGLIB/std/target/m68k.zig	/reserve_d4/;"	field
reserve_d5	$ZIGLIB/std/target/m68k.zig	/reserve_d5/;"	field
reserve_d6	$ZIGLIB/std/target/m68k.zig	/reserve_d6/;"	field
reserve_d7	$ZIGLIB/std/target/m68k.zig	/reserve_d7/;"	field
reserve_r9	$ZIGLIB/std/target/arm.zig	/reserve_r9/;"	field
reserve_x1	$ZIGLIB/std/target/riscv.zig	/reserve_x1/;"	field
reserve_x10	$ZIGLIB/std/target/riscv.zig	/reserve_x10/;"	field
reserve_x11	$ZIGLIB/std/target/riscv.zig	/reserve_x11/;"	field
reserve_x12	$ZIGLIB/std/target/riscv.zig	/reserve_x12/;"	field
reserve_x13	$ZIGLIB/std/target/riscv.zig	/reserve_x13/;"	field
reserve_x14	$ZIGLIB/std/target/riscv.zig	/reserve_x14/;"	field
reserve_x15	$ZIGLIB/std/target/riscv.zig	/reserve_x15/;"	field
reserve_x16	$ZIGLIB/std/target/riscv.zig	/reserve_x16/;"	field
reserve_x17	$ZIGLIB/std/target/riscv.zig	/reserve_x17/;"	field
reserve_x18	$ZIGLIB/std/target/riscv.zig	/reserve_x18/;"	field
reserve_x19	$ZIGLIB/std/target/riscv.zig	/reserve_x19/;"	field
reserve_x2	$ZIGLIB/std/target/riscv.zig	/reserve_x2/;"	field
reserve_x20	$ZIGLIB/std/target/riscv.zig	/reserve_x20/;"	field
reserve_x21	$ZIGLIB/std/target/riscv.zig	/reserve_x21/;"	field
reserve_x22	$ZIGLIB/std/target/riscv.zig	/reserve_x22/;"	field
reserve_x23	$ZIGLIB/std/target/riscv.zig	/reserve_x23/;"	field
reserve_x24	$ZIGLIB/std/target/riscv.zig	/reserve_x24/;"	field
reserve_x25	$ZIGLIB/std/target/riscv.zig	/reserve_x25/;"	field
reserve_x26	$ZIGLIB/std/target/riscv.zig	/reserve_x26/;"	field
reserve_x27	$ZIGLIB/std/target/riscv.zig	/reserve_x27/;"	field
reserve_x28	$ZIGLIB/std/target/riscv.zig	/reserve_x28/;"	field
reserve_x29	$ZIGLIB/std/target/riscv.zig	/reserve_x29/;"	field
reserve_x3	$ZIGLIB/std/target/riscv.zig	/reserve_x3/;"	field
reserve_x30	$ZIGLIB/std/target/riscv.zig	/reserve_x30/;"	field
reserve_x31	$ZIGLIB/std/target/riscv.zig	/reserve_x31/;"	field
reserve_x4	$ZIGLIB/std/target/riscv.zig	/reserve_x4/;"	field
reserve_x5	$ZIGLIB/std/target/riscv.zig	/reserve_x5/;"	field
reserve_x6	$ZIGLIB/std/target/riscv.zig	/reserve_x6/;"	field
reserve_x7	$ZIGLIB/std/target/riscv.zig	/reserve_x7/;"	field
reserve_x8	$ZIGLIB/std/target/riscv.zig	/reserve_x8/;"	field
reserve_x9	$ZIGLIB/std/target/riscv.zig	/reserve_x9/;"	field
reserved	$ZIGLIB/std/tz.zig	/reserved: [15]u8/;"	field
reserved1	$ZIGLIB/std/os/linux/x86_64.zig	/reserved1: [8]usize = undefined/;"	field
reserved177	$ZIGLIB/std/os/linux/syscalls.zig	/reserved177 = Linux + 177/;"	field
reserved193	$ZIGLIB/std/os/linux/syscalls.zig	/reserved193 = Linux + 193/;"	field
reserved2	$ZIGLIB/std/macho.zig	/reserved2: u32 = 0/;"	field
reserved221	$ZIGLIB/std/os/linux/syscalls.zig	/reserved221 = Linux + 221/;"	field
reserved3	$ZIGLIB/std/macho.zig	/reserved3: u32 = 0/;"	field
reserved82	$ZIGLIB/std/os/linux/syscalls.zig	/reserved82 = Linux + 82/;"	field
reserved_mask	$ZIGLIB/std/os/uefi/protocols/graphics_output_protocol.zig	/reserved_mask: u32/;"	field
reserved_r19	$ZIGLIB/std/target/hexagon.zig	/reserved_r19/;"	field
reset	$ZIGLIB/std/treap.zig	/pub fn reset(self: *Self) void {$/;"	function
resetLine	$ZIGLIB/std/zig/render.zig	/fn resetLine(self: *Self) void {$/;"	function
resetSegfaultHandler	$ZIGLIB/std/debug.zig	/^fn resetSegfaultHandler() void {$/;"	function
resetState	$ZIGLIB/std/compress/lzma/decode.zig	/pub fn resetState(self: *DecoderState, allocator: Allocator, new_props: Properties) !void {$/;"	function
resetSystem	$ZIGLIB/std/os/uefi/tables/runtime_services.zig	/resetSystem: *const fn (reset_type: ResetType, reset_status: Status, data_size: usize, reset_data: ?*const anyopaque) callconv(.C) noreturn/;"	field
reset_attributes	$ZIGLIB/std/debug.zig	/reset_attributes: u16/;"	field
reset_content	$ZIGLIB/std/http.zig	/reset_content = 205/;"	field
reset_dat_protection	$ZIGLIB/std/target/s390x.zig	/reset_dat_protection/;"	field
reset_map	$ZIGLIB/std/array_hash_map.zig	/var reset_map = AutoArrayHashMap(i32, i32).init(std.testing.allocator)/;"	variable
reset_reference_bits_multiple	$ZIGLIB/std/target/s390x.zig	/reset_reference_bits_multiple/;"	field
resident_size	$ZIGLIB/std/c/darwin.zig	/resident_size: mach_vm_size_t/;"	field
resident_size_peak	$ZIGLIB/std/c/darwin.zig	/resident_size_peak: mach_vm_size_t/;"	field
residual	$ZIGLIB/compiler_rt/divxf3.zig	/var residual: u64 = -%(quotient *% q63b)/;"	variable
resize	$ZIGLIB/std/testing/failing_allocator.zig	/fn resize($/;"	function
resizeInPlaceBlock	$ZIGLIB/std/valgrind.zig	/^pub fn resizeInPlaceBlock(oldmem: []u8, newsize: usize, rzB: usize) void {$/;"	function
resizeLarge	$ZIGLIB/std/heap/general_purpose_allocator.zig	/fn resizeLarge($/;"	function
resolution	$ZIGLIB/std/os/uefi.zig	/resolution: u32/;"	field
resolution_x	$ZIGLIB/std/os/uefi/protocols/simple_pointer_protocol.zig	/resolution_x: u64/;"	field
resolution_y	$ZIGLIB/std/os/uefi/protocols/simple_pointer_protocol.zig	/resolution_y: u64/;"	field
resolution_z	$ZIGLIB/std/os/uefi/protocols/simple_pointer_protocol.zig	/resolution_z: u64/;"	field
resolve	$ZIGLIB/std/net.zig	/pub fn resolve(buf: []const u8, port: u16) !Ip6Address {$/;"	function
resolveFuture	$ZIGLIB/std/event/future.zig	/^fn resolveFuture(future: *Future(i32)) void {$/;"	function
resolveInstallPrefix	$ZIGLIB/std/Build.zig	/^pub fn resolveInstallPrefix(self: *Build, install_prefix: ?[]const u8, dir_list: DirList) void {$/;"	function
resolveIp	$ZIGLIB/std/net.zig	/pub fn resolveIp(name: []const u8, port: u16) !Ip4Address {$/;"	function
resolveIp6	$ZIGLIB/std/net.zig	/pub fn resolveIp6(buf: []const u8, port: u16) !Address {$/;"	function
resolvePosix	$ZIGLIB/std/fs/path.zig	/^pub fn resolvePosix(allocator: Allocator, paths: []const []const u8) Allocator.Error![]u8 {$/;"	function
resolveWindows	$ZIGLIB/std/fs/path.zig	/^pub fn resolveWindows(allocator: Allocator, paths: []const []const u8) ![]u8 {$/;"	function
resolved	$ZIGLIB/std/os.zig	/var resolved = RelativePathWasi{ .dir_fd = dirfd, .relative_path = path }/;"	variable
resolved_from	$ZIGLIB/std/fs/path.zig	/const resolved_from = try resolveWindows(allocator, &[_][]const u8{ cwd, from })/;"	constant
resolved_include_path	$ZIGLIB/std/Build/CompileStep.zig	/const resolved_include_path = builder.pathFromRoot(include_path)/;"	constant
resolved_path	$ZIGLIB/std/fs.zig	/const resolved_path = std.fmt.bufPrintZ(&resolved_path_buf, "{s}\/{s}", .{$/;"	constant
resolved_path_buf	$ZIGLIB/std/fs.zig	/var resolved_path_buf: [MAX_PATH_BYTES - 1:0]u8 = undefined/;"	variable
resolved_scope_id	$ZIGLIB/std/net.zig	/var resolved_scope_id: u32 = 0/;"	variable
resolved_to	$ZIGLIB/std/fs/path.zig	/const resolved_to = try resolveWindows(allocator, &[_][]const u8{ cwd, to })/;"	constant
resource_flags	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/resource_flags: ResourceFlags align(1)/;"	field
response	$ZIGLIB/std/http/Client.zig	/response: Response/;"	field
responseHasBody	$ZIGLIB/std/http.zig	/pub fn responseHasBody(self: Method) bool {$/;"	function
rest	$ZIGLIB/std/mem.zig	/pub fn rest(self: Self) []const T {$/;"	function
rest_it	$ZIGLIB/std/fs/path.zig	/var rest_it = mem.tokenize(u8, to_rest, "\/\\\\")/;"	variable
rest_of_the_limbs_buf	$ZIGLIB/std/math/big/int.zig	/const rest_of_the_limbs_buf = limbs_buffer[q.limbs.len + r.limbs.len ..]/;"	constant
restart_syscall	$ZIGLIB/std/os/linux/syscalls.zig	/restart_syscall = Linux + 253/;"	field
restore	$ZIGLIB/std/os/linux/x86_64.zig	/^pub const restore = restore_rt/;"	constant
restoreTpl	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/restoreTpl: *const fn (old_tpl: usize) callconv(.C) void/;"	field
restore_extended	$ZIGLIB/std/dwarf.zig	/pub const restore_extended = 0x06/;"	constant
restore_ptr	$ZIGLIB/std/os/linux.zig	/const restore_ptr = &restore/;"	constant
restore_rt	$ZIGLIB/std/os/linux/x86_64.zig	/^pub fn restore_rt() callconv(.Naked) void {$/;"	function
restore_rt_ptr	$ZIGLIB/std/os/linux.zig	/const restore_rt_ptr = &restore_rt/;"	constant
restore_state	$ZIGLIB/std/dwarf.zig	/pub const restore_state = 0x0b/;"	constant
restorer	$ZIGLIB/std/os/linux.zig	/restorer: k_sigaction_funcs.restorer/;"	field
restorer_fn	$ZIGLIB/std/os/linux.zig	/const restorer_fn = if ((new.flags & SA.SIGINFO) != 0) restore_rt_ptr else restore_ptr/;"	constant
restrict	$ZIGLIB/std/os/linux/bpf/btf.zig	/restrict/;"	field
restrict_type	$ZIGLIB/std/dwarf/TAG.zig	/^pub const restrict_type = 0x37/;"	constant
result	$ZIGLIB/std/zig/tokenizer.zig	/var result = Token{$/;"	variable
resultExponent	$ZIGLIB/compiler_rt/extendf.zig	/const resultExponent: u32 = dstExpBias - srcExpBias - scale + 1/;"	constant
resultSign	$ZIGLIB/compiler_rt/addf3.zig	/const resultSign = aRep & signBit/;"	constant
result_args	$ZIGLIB/std/process.zig	/var result_args = try allocator.alloc([:0]u8, count)/;"	variable
result_contents	$ZIGLIB/std/process.zig	/const result_contents = buf[slice_list_bytes..]/;"	constant
result_drive_buf	$ZIGLIB/std/fs/path.zig	/var result_drive_buf = "_:".*/;"	variable
result_eq	$ZIGLIB/std/array_list.zig	/const result_eq = [_]i32{ 1, 0, 0, 0, 5 }/;"	constant
result_gt	$ZIGLIB/std/array_list.zig	/const result_gt = [_]i32{ 1, 0, 0, 0 }/;"	constant
result_handle	$ZIGLIB/std/os/windows.zig	/var result_handle: HANDLE = undefined/;"	variable
result_index	$ZIGLIB/std/fs/path.zig	/var result_index: usize = 0/;"	variable
result_is_to	$ZIGLIB/std/fs/path.zig	/const result_is_to = x: {$/;"	constant
result_le	$ZIGLIB/std/array_list.zig	/const result_le = [_]i32{ 1, 0, 0, 0, 4, 5 }/;"	constant
result_path	$ZIGLIB/std/os/windows.zig	/var result_path = try QueryObjectName(handle, &out_buffer)/;"	variable
result_slice	$ZIGLIB/std/multi_array_list.zig	/const result_slice = result.slice()/;"	constant
result_slice_list	$ZIGLIB/std/process.zig	/const result_slice_list = mem.bytesAsSlice([:0]u8, buf[0..slice_list_bytes])/;"	constant
result_type	$ZIGLIB/std/wasm.zig	/^pub const result_type: u8 = 0x40/;"	constant
result_w	$ZIGLIB/std/process.zig	/const result_w = blk: {$/;"	constant
result_zero	$ZIGLIB/std/array_list.zig	/const result_zero = [_]i32{ 1, 0, 0, 0, 2, 3, 4, 5 }/;"	constant
resulting_state	$ZIGLIB/std/rand/RomuTrio.zig	/const resulting_state = .{ .x = 16294208416658607535, .y = 13964609475759908645, .z = 4703697494102998476 }/;"	constant
resume	$ZIGLIB/std/zig/Ast.zig	/@"resume"/;"	field
resume_node	$ZIGLIB/std/os/windows.zig	/var resume_node = std.event.Loop.ResumeNode.Basic{$/;"	variable
resume_node_count	$ZIGLIB/std/event/loop.zig	/const resume_node_count = std.math.max(extra_thread_count, 1)/;"	constant
resume_node_id	$ZIGLIB/std/event/loop.zig	/const resume_node_id = resume_node.id/;"	constant
resv	$ZIGLIB/std/os/linux/io_uring.zig	/resv: u32/;"	field
resv1	$ZIGLIB/std/os/linux.zig	/resv1: u32/;"	field
resv2	$ZIGLIB/std/os/linux.zig	/resv2: u64/;"	field
ret_addr_stack	$ZIGLIB/std/target/arm.zig	/ret_addr_stack/;"	field
retain_capacity	$ZIGLIB/std/heap/arena_allocator.zig	/retain_capacity/;"	field
retain_metadata	$ZIGLIB/std/heap/general_purpose_allocator.zig	/retain_metadata: bool = false/;"	field
retain_with_limit	$ZIGLIB/std/heap/arena_allocator.zig	/retain_with_limit: usize/;"	field
retpoline	$ZIGLIB/std/target/x86.zig	/retpoline/;"	field
retpoline_external_thunk	$ZIGLIB/std/target/x86.zig	/retpoline_external_thunk/;"	field
retpoline_indirect_branches	$ZIGLIB/std/target/x86.zig	/retpoline_indirect_branches/;"	field
retpoline_indirect_calls	$ZIGLIB/std/target/x86.zig	/retpoline_indirect_calls/;"	field
retry_interval	$ZIGLIB/std/net.zig	/const retry_interval = timeout \/ attempts/;"	constant
return	$ZIGLIB/std/zig/Ast.zig	/@"return"/;"	field
returnError	$ZIGLIB/std/builtin.zig	/^pub noinline fn returnError(st: *StackTrace) void {$/;"	function
return_addr	$ZIGLIB/std/dwarf/AT.zig	/^pub const return_addr = 0x2a/;"	constant
return_address	$ZIGLIB/std/debug.zig	/const return_address = stack_trace.instruction_addresses[frame_index]/;"	constant
return_type	$ZIGLIB/std/zig/Ast.zig	/return_type: Node.Index/;"	field
return_type_expr	$ZIGLIB/std/zig/Parse.zig	/const return_type_expr = try p.parseTypeExpr()/;"	constant
returns	$ZIGLIB/std/wasm.zig	/returns: []const Valtype/;"	field
returnsBool	$ZIGLIB/std/zig/c_translation.zig	/fn returnsBool(f: f32) bool {$/;"	function
returnsVoid	$ZIGLIB/std/zig/c_translation.zig	/fn returnsVoid(val: bool) void {$/;"	function
retval	$ZIGLIB/std/os/linux/bpf.zig	/retval: u32/;"	field
reusable	$ZIGLIB/std/c/darwin.zig	/reusable: mach_vm_size_t/;"	field
reusable_peak	$ZIGLIB/std/c/darwin.zig	/reusable_peak: mach_vm_size_t/;"	field
reuse	$ZIGLIB/std/heap/WasmPageAllocator.zig	/const reuse = try page_allocator.alloc(u8, 1)/;"	constant
reuse_address	$ZIGLIB/std/net.zig	/reuse_address: bool = false/;"	field
reuse_extended	$ZIGLIB/std/heap/WasmPageAllocator.zig	/const reuse_extended = try page_allocator.alloc(u8, conventional_memsize)/;"	constant
reuseport_sockarray	$ZIGLIB/std/os/linux/bpf.zig	/reuseport_sockarray/;"	field
rev_cases	$ZIGLIB/std/sort.zig	/const rev_cases = [_][]const []const i32{$/;"	constant
rev_i	$ZIGLIB/std/math/big/int.zig	/var rev_i = byte_count - k - 1/;"	variable
revents	$ZIGLIB/std/os/windows/ws2_32.zig	/revents: SHORT/;"	field
reverse	$ZIGLIB/std/mem.zig	/^pub fn reverse(comptime T: type, items: []T) void {$/;"	function
reverseIterator	$ZIGLIB/std/mem.zig	/^pub fn reverseIterator(slice: anytype) ReverseIterator(@TypeOf(slice)) {$/;"	function
reverseOrder	$ZIGLIB/std/simd.zig	/^pub fn reverseOrder(vec: anytype) @TypeOf(vec) {$/;"	function
reverse_bits_tests	$ZIGLIB/std/compress/deflate/bits_utils.zig	/var reverse_bits_tests = [_]ReverseBitsTest{$/;"	variable
revision	$ZIGLIB/std/os/uefi/tables/table_header.zig	/revision: u32/;"	field
revision_1_02	$ZIGLIB/std/os/uefi/tables/system_table.zig	/pub const revision_1_02: u32 = (1 << 16) | 2/;"	constant
revision_1_10	$ZIGLIB/std/os/uefi/tables/system_table.zig	/pub const revision_1_10: u32 = (1 << 16) | 10/;"	constant
revision_2_00	$ZIGLIB/std/os/uefi/tables/system_table.zig	/pub const revision_2_00: u32 = (2 << 16)/;"	constant
revision_2_10	$ZIGLIB/std/os/uefi/tables/system_table.zig	/pub const revision_2_10: u32 = (2 << 16) | 10/;"	constant
revision_2_20	$ZIGLIB/std/os/uefi/tables/system_table.zig	/pub const revision_2_20: u32 = (2 << 16) | 20/;"	constant
revision_2_30	$ZIGLIB/std/os/uefi/tables/system_table.zig	/pub const revision_2_30: u32 = (2 << 16) | 30/;"	constant
revision_2_31	$ZIGLIB/std/os/uefi/tables/system_table.zig	/pub const revision_2_31: u32 = (2 << 16) | 31/;"	constant
revision_2_40	$ZIGLIB/std/os/uefi/tables/system_table.zig	/pub const revision_2_40: u32 = (2 << 16) | 40/;"	constant
revision_2_50	$ZIGLIB/std/os/uefi/tables/system_table.zig	/pub const revision_2_50: u32 = (2 << 16) | 50/;"	constant
revision_2_60	$ZIGLIB/std/os/uefi/tables/system_table.zig	/pub const revision_2_60: u32 = (2 << 16) | 60/;"	constant
revision_2_70	$ZIGLIB/std/os/uefi/tables/system_table.zig	/pub const revision_2_70: u32 = (2 << 16) | 70/;"	constant
revision_2_80	$ZIGLIB/std/os/uefi/tables/system_table.zig	/pub const revision_2_80: u32 = (2 << 16) | 80/;"	constant
rewind	$ZIGLIB/std/fifo.zig	/fn rewind(self: *Self, count: usize) void {$/;"	function
rfc1951_txt	$ZIGLIB/std/compress/zlib.zig	/const rfc1951_txt = @embedFile("testdata\/rfc1951.txt")/;"	constant
rfc822Name	$ZIGLIB/std/crypto/Certificate.zig	/rfc822Name = 1/;"	field
rflags	$ZIGLIB/std/c/freebsd.zig	/rflags: u64/;"	field
rhat	$ZIGLIB/compiler_rt/udivmodei4.zig	/var rhat = uu % limb(&vn, n)/;"	variable
rhs_pre_it	$ZIGLIB/std/SemanticVersion.zig	/var rhs_pre_it = std.mem.split(u8, rhs.pre.?, ".")/;"	variable
ri_cprmask	$ZIGLIB/std/elf.zig	/ri_cprmask: [4]Elf32_Word/;"	field
ri_gp_value	$ZIGLIB/std/elf.zig	/ri_gp_value: Elf32_Sword/;"	field
ri_gprmask	$ZIGLIB/std/elf.zig	/ri_gprmask: Elf32_Word/;"	field
riflags_t	$ZIGLIB/std/os/wasi.zig	/^pub const riflags_t = u16/;"	constant
right	$ZIGLIB/std/treap.zig	/const right = node.children[1] orelse break :rotate_right true/;"	constant
rightShift	$ZIGLIB/std/fmt/parse_float/decimal.zig	/pub fn rightShift(self: *Self, shift: usize) void {$/;"	function
right_alt_pressed	$ZIGLIB/std/os/uefi/protocols/simple_text_input_ex_protocol.zig	/right_alt_pressed: bool/;"	field
right_button	$ZIGLIB/std/os/uefi/protocols/simple_pointer_protocol.zig	/right_button: bool = undefined/;"	field
right_control_pressed	$ZIGLIB/std/os/uefi/protocols/simple_text_input_ex_protocol.zig	/right_control_pressed: bool/;"	field
right_index	$ZIGLIB/std/priority_queue.zig	/var right_index = left_index + 1/;"	variable
right_logo_pressed	$ZIGLIB/std/os/uefi/protocols/simple_text_input_ex_protocol.zig	/right_logo_pressed: bool/;"	field
right_padding	$ZIGLIB/std/fmt.zig	/const right_padding = (padding + 1) \/ 2/;"	constant
right_shift_pressed	$ZIGLIB/std/os/uefi/protocols/simple_text_input_ex_protocol.zig	/right_shift_pressed: bool/;"	field
rights	$ZIGLIB/std/os.zig	/var rights: wasi.rights_t = 0/;"	variable
rights_t	$ZIGLIB/std/os/wasi.zig	/^pub const rights_t = u64/;"	constant
ring	$ZIGLIB/std/os/linux/io_uring.zig	/var ring = IO_Uring.init(4, 0) catch |err| switch (err) {$/;"	variable
ring_entries	$ZIGLIB/std/os/linux.zig	/ring_entries: u32/;"	field
ring_mask	$ZIGLIB/std/os/linux.zig	/ring_mask: u32/;"	field
ringbuf	$ZIGLIB/std/os/linux/bpf.zig	/ringbuf/;"	field
ringbuf_discard	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const ringbuf_discard = @intToPtr(fn (data: ?*anyopaque, flags: u64) void, 133)/;"	constant
ringbuf_output	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const ringbuf_output = @intToPtr(fn (ringbuf: ?*anyopaque, data: ?*anyopaque, size: u64, flags: u64) ?*anyopaque, 130)/;"	constant
ringbuf_query	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const ringbuf_query = @intToPtr(fn (ringbuf: ?*anyopaque, flags: u64) u64, 134)/;"	constant
ringbuf_reserve	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const ringbuf_reserve = @intToPtr(fn (ringbuf: ?*anyopaque, size: u64, flags: u64) ?*anyopaque, 131)/;"	constant
ringbuf_submit	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const ringbuf_submit = @intToPtr(fn (data: ?*anyopaque, flags: u64) void, 132)/;"	constant
riscv	$ZIGLIB/compiler_rt/clear_cache.zig	/const riscv = switch (arch) {$/;"	constant
riscv32	$ZIGLIB/std/target.zig	/riscv32/;"	field
riscv64	$ZIGLIB/std/target.zig	/riscv64/;"	field
riscv_flush_icache	$ZIGLIB/std/os/linux/syscalls.zig	/riscv_flush_icache = arch_specific_syscall + 15/;"	field
rlen	$ZIGLIB/std/net.zig	/const rlen = if (std.io.is_async)$/;"	constant
rlim_t	$ZIGLIB/std/os/linux.zig	/^pub const rlim_t = u64/;"	constant
rlimit	$ZIGLIB/std/os/linux.zig	/^pub const rlimit = extern struct {$/;"	struct
rlimit_resource	$ZIGLIB/std/os/linux/sparc64.zig	/^pub const rlimit_resource = enum(c_int) {$/;"	enum
rma_mut	$ZIGLIB/std/math/big/int.zig	/var rma_mut = rma.toMutable()/;"	variable
rmdir	$ZIGLIB/std/os/linux/syscalls.zig	/rmdir = Linux + 82/;"	field
rmdirW	$ZIGLIB/std/os.zig	/^pub fn rmdirW(dir_path_w: []const u16) DeleteDirError!void {$/;"	function
rmdirZ	$ZIGLIB/std/os.zig	/^pub fn rmdirZ(dir_path: [*:0]const u8) DeleteDirError!void {$/;"	function
rmv1	$ZIGLIB/std/hash_map.zig	/const rmv1 = map.fetchRemove(2)/;"	constant
rmv2	$ZIGLIB/std/array_hash_map.zig	/const rmv2 = map.fetchOrderedRemove(100)/;"	constant
rng_src	$ZIGLIB/std/heap/arena_allocator.zig	/var rng_src = std.rand.DefaultPrng.init(19930913)/;"	variable
rnglists_base	$ZIGLIB/std/dwarf/AT.zig	/^pub const rnglists_base = 0x74/;"	constant
rnglistx	$ZIGLIB/std/dwarf/FORM.zig	/^pub const rnglistx = 0x23/;"	constant
rnum	$ZIGLIB/std/SemanticVersion.zig	/const rnum: ?usize = std.fmt.parseUnsigned(usize, rid, 10) catch |err| switch (err) {$/;"	constant
rocket_rv32	$ZIGLIB/std/target/riscv.zig	/pub const rocket_rv32 = CpuModel{$/;"	constant
rocket_rv64	$ZIGLIB/std/target/riscv.zig	/pub const rocket_rv64 = CpuModel{$/;"	constant
rocketlake	$ZIGLIB/std/target/x86.zig	/pub const rocketlake = CpuModel{$/;"	constant
roffset	$ZIGLIB/std/compress/deflate/decompressor.zig	/roffset: u64/;"	field
roflags_t	$ZIGLIB/std/os/wasi.zig	/^pub const roflags_t = u16/;"	constant
root	$ZIGLIB/std/zig/Ast.zig	/root/;"	field
rootDecls	$ZIGLIB/std/zig/Ast.zig	/^pub fn rootDecls(tree: Ast) []const Node.Index {$/;"	function
rootOutputBytes	$ZIGLIB/std/crypto/blake3.zig	/fn rootOutputBytes(self: *const Output, output: []u8) void {$/;"	function
root_addr	$ZIGLIB/std/heap.zig	/const root_addr = getRecordPtr(buf).*/;"	constant
root_decls	$ZIGLIB/std/zig/Parse.zig	/const root_decls = try root_members.toSpan(p)/;"	constant
root_members	$ZIGLIB/std/zig/Parse.zig	/const root_members = try p.parseContainerMembers()/;"	constant
root_name	$ZIGLIB/std/zig.zig	/root_name: []const u8/;"	field
root_node	$ZIGLIB/std/Progress.zig	/const root_node = progress.start("", 100)/;"	constant
root_slice	$ZIGLIB/std/fs/path.zig	/const root_slice = diskDesignatorWindows(path)/;"	constant
root_source_file	$ZIGLIB/std/Build/CompileStep.zig	/root_source_file: ?FileSource = null/;"	field
root_src	$ZIGLIB/std/Build/CompileStep.zig	/const root_src: ?FileSource = if (options.root_source_file) |rsrc| rsrc.dupe(builder) else null/;"	constant
rop_protect	$ZIGLIB/std/target/powerpc.zig	/rop_protect/;"	field
rosetta	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/rosetta/;"	field
rot8x32	$ZIGLIB/std/crypto/xoodoo.zig	/const rot8x32 = comptime if (builtin.target.cpu.arch.endian() == .Big)$/;"	constant
rotate	$ZIGLIB/std/treap.zig	/fn rotate(self: *Self, node: *Node, right: bool) void {$/;"	function
rotateElementsLeft	$ZIGLIB/std/simd.zig	/^pub fn rotateElementsLeft(vec: anytype, comptime amount: VectorCount(@TypeOf(vec))) @TypeOf(vec) {$/;"	function
rotateElementsRight	$ZIGLIB/std/simd.zig	/^pub fn rotateElementsRight(vec: anytype, comptime amount: VectorCount(@TypeOf(vec))) @TypeOf(vec) {$/;"	function
rotate_right	$ZIGLIB/std/treap.zig	/const rotate_right = !is_right/;"	constant
rotl	$ZIGLIB/std/math.zig	/^pub fn rotl(comptime T: type, x: T, r: anytype) T {$/;"	function
rotl32	$ZIGLIB/std/hash/murmur.zig	/fn rotl32(x: u32, comptime r: u32) u32 {$/;"	function
rotr	$ZIGLIB/std/math.zig	/^pub fn rotr(comptime T: type, x: T, r: anytype) T {$/;"	function
rotr32	$ZIGLIB/std/hash/cityhash.zig	/fn rotr32(x: u32, comptime r: u32) u32 {$/;"	function
rotr64	$ZIGLIB/std/hash/cityhash.zig	/fn rotr64(x: u64, comptime r: u64) u64 {$/;"	function
round	$ZIGLIB/std/math.zig	/^pub inline fn round(value: anytype) @TypeOf(value) {$/;"	function
round0	$ZIGLIB/std/crypto/sha2.zig	/const round0 = comptime [_]RoundParam512{$/;"	constant
round0a	$ZIGLIB/std/crypto/sha1.zig	/const round0a = comptime [_]RoundParam{$/;"	constant
round0b	$ZIGLIB/std/crypto/sha1.zig	/const round0b = comptime [_]RoundParam{$/;"	constant
round1	$ZIGLIB/std/crypto/sha1.zig	/const round1 = comptime [_]RoundParam{$/;"	constant
round2	$ZIGLIB/std/crypto/sha1.zig	/const round2 = comptime [_]RoundParam{$/;"	constant
round3	$ZIGLIB/std/crypto/sha1.zig	/const round3 = comptime [_]RoundParam{$/;"	constant
roundBit	$ZIGLIB/compiler_rt/mulf3.zig	/const roundBit = (1 << (ZSignificandBits - 1))/;"	constant
roundBits	$ZIGLIB/compiler_rt/truncf.zig	/const roundBits: src_rep_t = denormalizedSignificand & roundMask/;"	constant
roundGuardSticky	$ZIGLIB/compiler_rt/addf3.zig	/const roundGuardSticky = aSignificand & 0x7/;"	constant
roundMask	$ZIGLIB/compiler_rt/truncf.zig	/const roundMask = (1 << (srcSigBits - dstSigBits)) - 1/;"	constant
roundParam	$ZIGLIB/std/crypto/sha1.zig	/^fn roundParam(a: usize, b: usize, c: usize, d: usize, e: usize, i: u32) RoundParam {$/;"	function
roundParam256	$ZIGLIB/std/crypto/sha2.zig	/^fn roundParam256(a: usize, b: usize, c: usize, d: usize, e: usize, f: usize, g: usize, h: usize, i: usize) RoundParam256 {$/;"	function
roundParam512	$ZIGLIB/std/crypto/sha2.zig	/^fn roundParam512(a: usize, b: usize, c: usize, d: usize, e: usize, f: usize, g: usize, h: usize, i: usize, k: u64) RoundParam512 {$/;"	function
roundToPrecision	$ZIGLIB/std/fmt/errol.zig	/^pub fn roundToPrecision(float_decimal: *FloatDecimal, precision: usize, mode: RoundMode) void {$/;"	function
round_bits	$ZIGLIB/compiler_rt/trunctfxf2.zig	/const round_bits = a_abs & round_mask/;"	constant
round_digit	$ZIGLIB/std/fmt/errol.zig	/var round_digit: usize = 0/;"	variable
round_keys	$ZIGLIB/std/crypto/aes/soft.zig	/var round_keys: [rounds + 1]Block = undefined/;"	variable
round_mask	$ZIGLIB/compiler_rt/trunctfxf2.zig	/const round_mask = (1 << (src_sig_bits - dst_sig_bits)) - 1/;"	constant
round_to_next_4	$ZIGLIB/std/pdb.zig	/const round_to_next_4 = (this_record_len | 0x3) + 1/;"	constant
round_up	$ZIGLIB/std/fmt/parse_float/decimal.zig	/var round_up = false/;"	variable
rounded_file_size	$ZIGLIB/std/tar.zig	/const rounded_file_size = std.mem.alignForwardGeneric(u64, file_size, 512)/;"	constant
roundf	$ZIGLIB/compiler_rt/round.zig	/^pub fn roundf(x_: f32) callconv(.C) f32 {$/;"	function
roundl	$ZIGLIB/compiler_rt/round.zig	/^pub fn roundl(x: c_longdouble) callconv(.C) c_longdouble {$/;"	function
roundq	$ZIGLIB/compiler_rt/round.zig	/^pub fn roundq(x_: f128) callconv(.C) f128 {$/;"	function
rounds	$ZIGLIB/std/heap/arena_allocator.zig	/var rounds: usize = 25/;"	variable
rounds_log	$ZIGLIB/std/crypto/bcrypt.zig	/rounds_log: u6/;"	field
rounds_log_str	$ZIGLIB/std/crypto/bcrypt.zig	/const rounds_log_str = str[4..][0..2]/;"	constant
route_count	$ZIGLIB/std/os/uefi/protocols/ip6_protocol.zig	/route_count: u32/;"	field
route_table	$ZIGLIB/std/os/uefi/protocols/ip6_protocol.zig	/route_table: [*]Ip6RouteTable/;"	field
routes	$ZIGLIB/std/os/uefi/protocols/ip6_protocol.zig	/pub fn routes(self: *const Ip6Protocol, delete_route: bool, destination: ?*const Ip6Address, prefix_length: u8, gateway_address: ?*const Ip6Address) Status {$/;"	function
rowSize	$ZIGLIB/std/zig/render.zig	/^fn rowSize(tree: Ast, exprs: []const Ast.Node.Index, rtoken: Ast.TokenIndex) usize {$/;"	function
row_exprs	$ZIGLIB/std/zig/render.zig	/const row_exprs = array_init.ast.elements[expr_index..]/;"	constant
row_size	$ZIGLIB/std/zig/render.zig	/const row_size = rowSize(tree, array_init.ast.elements[expr_index..], rbrace)/;"	constant
rows	$ZIGLIB/std/crypto/blake3.zig	/var rows = Rows{ chaining_value[0..4].*, chaining_value[4..8].*, IV[0..4].*, md }/;"	variable
rp_max_size	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/const rp_max_size = ds.size - rpoff_usize/;"	constant
rparen	$ZIGLIB/std/zig/render.zig	/var rparen = if (token_tags[maybe_bang] == .bang) maybe_bang - 1 else maybe_bang/;"	variable
rparen_token	$ZIGLIB/std/zig/render.zig	/const rparen_token = tree.lastToken(field.ast.align_expr) + 1/;"	constant
rpath	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/const rpath = path_buf[0..index]/;"	constant
rpath_command	$ZIGLIB/std/macho.zig	/^pub const rpath_command = extern struct {$/;"	struct
rpath_lc	$ZIGLIB/std/macho.zig	/const rpath_lc = lc.cast(rpath_command).?/;"	constant
rpath_list	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/const rpath_list = mem.sliceTo(strtab, 0)/;"	constant
rpath_offset	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/var rpath_offset: ?u64 = null/;"	variable
rpaths	$ZIGLIB/std/zig/system/NativePaths.zig	/^rpaths: ArrayList([:0]u8)/;"	field
rpoff_file	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/const rpoff_file = ds.offset + rpoff_usize/;"	constant
rpoff_usize	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/const rpoff_usize = std.math.cast(usize, rpoff) orelse return error.InvalidElfFile/;"	constant
rsaEncryption	$ZIGLIB/std/crypto/Certificate.zig	/rsaEncryption: void/;"	field
rsa_mem_buf	$ZIGLIB/std/crypto/tls/Client.zig	/var rsa_mem_buf: [512 * 32]u8 = undefined/;"	variable
rsa_pkcs1_sha1	$ZIGLIB/std/crypto/tls.zig	/rsa_pkcs1_sha1 = 0x0201/;"	field
rsa_pkcs1_sha256	$ZIGLIB/std/crypto/tls.zig	/rsa_pkcs1_sha256 = 0x0401/;"	field
rsa_pkcs1_sha384	$ZIGLIB/std/crypto/tls.zig	/rsa_pkcs1_sha384 = 0x0501/;"	field
rsa_pkcs1_sha512	$ZIGLIB/std/crypto/tls.zig	/rsa_pkcs1_sha512 = 0x0601/;"	field
rsa_pss_pss_sha256	$ZIGLIB/std/crypto/tls.zig	/rsa_pss_pss_sha256 = 0x0809/;"	field
rsa_pss_pss_sha384	$ZIGLIB/std/crypto/tls.zig	/rsa_pss_pss_sha384 = 0x080a/;"	field
rsa_pss_pss_sha512	$ZIGLIB/std/crypto/tls.zig	/rsa_pss_pss_sha512 = 0x080b/;"	field
rsa_pss_rsae_sha256	$ZIGLIB/std/crypto/tls.zig	/rsa_pss_rsae_sha256 = 0x0804/;"	field
rsa_pss_rsae_sha384	$ZIGLIB/std/crypto/tls.zig	/rsa_pss_rsae_sha384 = 0x0805/;"	field
rsa_pss_rsae_sha512	$ZIGLIB/std/crypto/tls.zig	/rsa_pss_rsae_sha512 = 0x0806/;"	field
rseq	$ZIGLIB/std/os/linux/syscalls.zig	/rseq = Linux + 367/;"	field
rt_sigaction	$ZIGLIB/std/os/linux/syscalls.zig	/rt_sigaction = Linux + 194/;"	field
rt_sigpending	$ZIGLIB/std/os/linux/syscalls.zig	/rt_sigpending = Linux + 196/;"	field
rt_sigprocmask	$ZIGLIB/std/os/linux/syscalls.zig	/rt_sigprocmask = Linux + 195/;"	field
rt_sigqueueinfo	$ZIGLIB/std/os/linux/syscalls.zig	/rt_sigqueueinfo = Linux + 198/;"	field
rt_sigreturn	$ZIGLIB/std/os/linux/syscalls.zig	/rt_sigreturn = Linux + 211/;"	field
rt_sigsuspend	$ZIGLIB/std/os/linux/syscalls.zig	/rt_sigsuspend = Linux + 199/;"	field
rt_sigtimedwait	$ZIGLIB/std/os/linux/syscalls.zig	/rt_sigtimedwait = Linux + 197/;"	field
rt_sigtimedwait_time64	$ZIGLIB/std/os/linux/syscalls.zig	/rt_sigtimedwait_time64 = Linux + 421/;"	field
rt_tgsigqueueinfo	$ZIGLIB/std/os/linux/syscalls.zig	/rt_tgsigqueueinfo = Linux + 332/;"	field
rtas	$ZIGLIB/std/os/linux/syscalls.zig	/rtas = 255/;"	field
rtattr	$ZIGLIB/std/os/linux.zig	/^pub const rtattr = extern struct {$/;"	struct
rtems	$ZIGLIB/std/target.zig	/rtems/;"	field
rtnl_link_ifmap	$ZIGLIB/std/os/linux.zig	/^pub const rtnl_link_ifmap = extern struct {$/;"	struct
rtnl_link_stats	$ZIGLIB/std/os/linux.zig	/^pub const rtnl_link_stats = extern struct {$/;"	struct
rtnl_link_stats64	$ZIGLIB/std/os/linux.zig	/^pub const rtnl_link_stats64 = extern struct {$/;"	struct
rtrimmed	$ZIGLIB/std/tar.zig	/const rtrimmed = std.mem.trimRight(u8, ltrimmed, "\\x00")/;"	constant
runAndCompare	$ZIGLIB/std/Build/CheckObjectStep.zig	/^pub fn runAndCompare(self: *CheckObjectStep) *EmulatableRunStep {$/;"	function
runBuild	$ZIGLIB/std/Build.zig	/^pub fn runBuild(b: *Build, build_zig: anytype) anyerror!void {$/;"	function
runCommand	$ZIGLIB/std/Build/RunStep.zig	/^pub fn runCommand($/;"	function
runDetached	$ZIGLIB/std/event/loop.zig	/pub fn runDetached(self: *Loop, alloc: mem.Allocator, comptime func: anytype, args: anytype) error{OutOfMemory}!void {$/;"	function
runEmulatable	$ZIGLIB/std/Build/CompileStep.zig	/^pub fn runEmulatable(exe: *CompileStep) *EmulatableRunStep {$/;"	function
runPkgConfig	$ZIGLIB/std/Build/CompileStep.zig	/^pub fn runPkgConfig(self: *CompileStep, lib_name: []const u8) ![]const []const u8 {$/;"	function
runTest	$ZIGLIB/std/math.zig	/fn runTest() !void {$/;"	function
run_cmd	$ZIGLIB/init-exe/build.zig	/const run_cmd = exe.run()/;"	constant
run_frame	$ZIGLIB/std/event/loop.zig	/var run_frame = try alloc.create(@Frame(Wrapper.run))/;"	variable
run_long_tests	$ZIGLIB/std/crypto/scrypt.zig	/^const run_long_tests = false/;"	constant
run_state	$ZIGLIB/std/c/darwin.zig	/run_state: integer_t/;"	field
run_step	$ZIGLIB/std/Build/CompileStep.zig	/const run_step = RunStep.create(exe.builder, exe.builder.fmt("run {s}", .{exe.step.name}))/;"	constant
runner	$ZIGLIB/std/Thread/RwLock.zig	/var runner = Runner{}/;"	variable
runners	$ZIGLIB/std/Thread/Mutex.zig	/var runners = [_]Runner{.{}} ** num_threads/;"	variable
running	$ZIGLIB/std/Thread.zig	/running/;"	field
runningOnValgrind	$ZIGLIB/std/valgrind.zig	/^pub fn runningOnValgrind() usize {$/;"	function
runtime_b	$ZIGLIB/std/enums.zig	/var runtime_b = "b"/;"	variable
runtime_false	$ZIGLIB/std/enums.zig	/var runtime_false: bool = false/;"	variable
runtime_safety	$ZIGLIB/std/debug.zig	/^pub const runtime_safety = switch (builtin.mode) {$/;"	constant
runtime_services	$ZIGLIB/std/os/uefi/tables/system_table.zig	/runtime_services: *RuntimeServices/;"	field
runtime_zero	$ZIGLIB/std/meta/trait.zig	/var runtime_zero: usize = 0/;"	variable
rusage	$ZIGLIB/std/os/linux.zig	/^pub const rusage = extern struct {$/;"	struct
rvalue_reference	$ZIGLIB/std/dwarf/AT.zig	/^pub const rvalue_reference = 0x78/;"	constant
rvalue_reference_type	$ZIGLIB/std/dwarf/TAG.zig	/^pub const rvalue_reference_type = 0x42/;"	constant
rw_flags	$ZIGLIB/std/os/linux.zig	/rw_flags: u32/;"	field
rwlock	$ZIGLIB/std/Thread/RwLock.zig	/rwlock: std.c.pthread_rwlock_t = .{}/;"	field
rx_broadcast_frames	$ZIGLIB/std/os/uefi/protocols/simple_network_protocol.zig	/rx_broadcast_frames: u64/;"	field
rx_bytes	$ZIGLIB/std/os/linux.zig	/rx_bytes: u64/;"	field
rx_compressed	$ZIGLIB/std/os/linux.zig	/rx_compressed: u64/;"	field
rx_crc_error_frames	$ZIGLIB/std/os/uefi/protocols/simple_network_protocol.zig	/rx_crc_error_frames: u64/;"	field
rx_crc_errors	$ZIGLIB/std/os/linux.zig	/rx_crc_errors: u64/;"	field
rx_decryptError_frames	$ZIGLIB/std/os/uefi/protocols/simple_network_protocol.zig	/rx_decryptError_frames: u64/;"	field
rx_dropped	$ZIGLIB/std/os/linux.zig	/rx_dropped: u64/;"	field
rx_dropped_frames	$ZIGLIB/std/os/uefi/protocols/simple_network_protocol.zig	/rx_dropped_frames: u64/;"	field
rx_duplicated_frames	$ZIGLIB/std/os/uefi/protocols/simple_network_protocol.zig	/rx_duplicated_frames: u64/;"	field
rx_errors	$ZIGLIB/std/os/linux.zig	/rx_errors: u64/;"	field
rx_fifo_errors	$ZIGLIB/std/os/linux.zig	/rx_fifo_errors: u64/;"	field
rx_fill_ring_empty_descs	$ZIGLIB/std/os/linux.zig	/rx_fill_ring_empty_descs: u64/;"	field
rx_frame_errors	$ZIGLIB/std/os/linux.zig	/rx_frame_errors: u64/;"	field
rx_good_frames	$ZIGLIB/std/os/uefi/protocols/simple_network_protocol.zig	/rx_good_frames: u64/;"	field
rx_invalid_descs	$ZIGLIB/std/os/linux.zig	/rx_invalid_descs: u64/;"	field
rx_length_errors	$ZIGLIB/std/os/linux.zig	/rx_length_errors: u64/;"	field
rx_missed_errors	$ZIGLIB/std/os/linux.zig	/rx_missed_errors: u64/;"	field
rx_multicast_frames	$ZIGLIB/std/os/uefi/protocols/simple_network_protocol.zig	/rx_multicast_frames: u64/;"	field
rx_nohandler	$ZIGLIB/std/os/linux.zig	/rx_nohandler: u64/;"	field
rx_over_errors	$ZIGLIB/std/os/linux.zig	/rx_over_errors: u64/;"	field
rx_oversize_frames	$ZIGLIB/std/os/uefi/protocols/simple_network_protocol.zig	/rx_oversize_frames: u64/;"	field
rx_packets	$ZIGLIB/std/os/linux.zig	/rx_packets: u64/;"	field
rx_ring_full	$ZIGLIB/std/os/linux.zig	/rx_ring_full: u64/;"	field
rx_total_bytes	$ZIGLIB/std/os/uefi/protocols/simple_network_protocol.zig	/rx_total_bytes: u64/;"	field
rx_total_frames	$ZIGLIB/std/os/uefi/protocols/simple_network_protocol.zig	/rx_total_frames: u64/;"	field
rx_undersize_frames	$ZIGLIB/std/os/uefi/protocols/simple_network_protocol.zig	/rx_undersize_frames: u64/;"	field
rx_unicast_frames	$ZIGLIB/std/os/uefi/protocols/simple_network_protocol.zig	/rx_unicast_frames: u64/;"	field
s1names	$ZIGLIB/std/meta.zig	/const s1names = fieldNames(S1)/;"	constant
s1pio2	$ZIGLIB/compiler_rt/sin.zig	/const s1pio2: f64 = 1.0 * math.pi \/ 2.0/;"	constant
s2pio2	$ZIGLIB/compiler_rt/sin.zig	/const s2pio2: f64 = 2.0 * math.pi \/ 2.0/;"	constant
s390x	$ZIGLIB/std/target.zig	/s390x/;"	field
s3pio2	$ZIGLIB/compiler_rt/sin.zig	/const s3pio2: f64 = 3.0 * math.pi \/ 2.0/;"	constant
s4pio2	$ZIGLIB/compiler_rt/sin.zig	/const s4pio2: f64 = 4.0 * math.pi \/ 2.0/;"	constant
s802	$ZIGLIB/std/target/csky.zig	/pub const s802 = CpuModel{$/;"	constant
s802t	$ZIGLIB/std/target/csky.zig	/pub const s802t = CpuModel{$/;"	constant
s803	$ZIGLIB/std/target/csky.zig	/pub const s803 = CpuModel{$/;"	constant
s803t	$ZIGLIB/std/target/csky.zig	/pub const s803t = CpuModel{$/;"	constant
s_batch	$ZIGLIB/std/crypto/25519/ed25519.zig	/var s_batch: [count]CompressedScalar = undefined/;"	variable
s_buf	$ZIGLIB/std/crypto/bcrypt.zig	/var s_buf: [hash_length]u8 = undefined/;"	variable
s_expected	$ZIGLIB/std/zig/system/darwin/macos.zig	/const s_expected: []const u8 = try std.fmt.bufPrint(b_expected[0..], "{}", .{expected})/;"	constant
s_got	$ZIGLIB/std/zig/system/darwin/macos.zig	/const s_got: []const u8 = try std.fmt.bufPrint(b_got[0..], "{}", .{got})/;"	constant
s_inv	$ZIGLIB/std/crypto/ecdsa.zig	/const s_inv = self.s.invert()/;"	constant
s_len	$ZIGLIB/std/crypto/ecdsa.zig	/const s_len = @intCast(u8, self.s.len + (self.s[0] >> 7))/;"	constant
s_limit	$ZIGLIB/std/compress/deflate/deflate_fast.zig	/var s_limit = @intCast(i32, src.len - input_margin)/;"	variable
s_memrealtime	$ZIGLIB/std/target/amdgpu.zig	/s_memrealtime/;"	field
s_memtime_inst	$ZIGLIB/std/target/amdgpu.zig	/s_memtime_inst/;"	field
s_per_day	$ZIGLIB/std/time.zig	/^pub const s_per_day = s_per_hour * 24/;"	constant
s_per_hour	$ZIGLIB/std/time.zig	/^pub const s_per_hour = s_per_min * 60/;"	constant
s_per_min	$ZIGLIB/std/time.zig	/^pub const s_per_min = 60/;"	constant
s_per_week	$ZIGLIB/std/time.zig	/^pub const s_per_week = s_per_day * 7/;"	constant
s_prime	$ZIGLIB/std/crypto/25519/ristretto255.zig	/const s_prime = s.mul(t).abs().neg()/;"	constant
saAttr	$ZIGLIB/std/child_process.zig	/const saAttr = windows.SECURITY_ATTRIBUTES{$/;"	constant
sa_family_t	$ZIGLIB/std/os/linux.zig	/^pub const sa_family_t = u16/;"	constant
sa_flags	$ZIGLIB/std/c/haiku.zig	/sa_flags: u32/;"	field
sa_mask	$ZIGLIB/std/c/haiku.zig	/sa_mask: sigset_t/;"	field
safe	$ZIGLIB/std/http.zig	/pub fn safe(self: Method) bool {$/;"	function
safeTruncate	$ZIGLIB/std/array_hash_map.zig	/^fn safeTruncate(comptime T: type, val: anytype) T {$/;"	function
safety	$ZIGLIB/std/heap/general_purpose_allocator.zig	/safety: bool = std.debug.runtime_safety/;"	field
sahf	$ZIGLIB/std/target/x86.zig	/sahf/;"	field
sal_system_table_guid	$ZIGLIB/std/os/uefi/tables/configuration_table.zig	/pub const sal_system_table_guid align(8) = Guid{$/;"	constant
salen	$ZIGLIB/std/net.zig	/var salen: os.socklen_t = undefined/;"	variable
salsa	$ZIGLIB/std/crypto.zig	/pub const salsa = struct {$/;"	struct
salsa8core	$ZIGLIB/std/crypto/scrypt.zig	/^fn salsa8core(b: *align(16) [16]u32) void {$/;"	function
salsaCore	$ZIGLIB/std/crypto/salsa20.zig	/inline fn salsaCore(x: *BlockVec, input: BlockVec, comptime feedback: bool) void {$/;"	function
salsaXor	$ZIGLIB/std/crypto/scrypt.zig	/^fn salsaXor(tmp: *align(16) [16]u32, in: []align(16) const u32, out: []align(16) u32) void {$/;"	function
salsa_poly	$ZIGLIB/std/crypto.zig	/pub const salsa_poly = struct {$/;"	struct
salt	$ZIGLIB/std/crypto/scrypt.zig	/var salt: [default_salt_len]u8 = undefined/;"	variable
salt2	$ZIGLIB/std/crypto/bcrypt.zig	/var salt2: [salt_length]u8 = undefined/;"	variable
saltFromBin	$ZIGLIB/std/crypto/scrypt.zig	/pub fn saltFromBin(comptime len: usize, salt: [len]u8) [Codec.encodedLen(len)]u8 {$/;"	function
salt_bin	$ZIGLIB/std/crypto/scrypt.zig	/var salt_bin: [default_salt_len]u8 = undefined/;"	variable
salt_length	$ZIGLIB/std/crypto/bcrypt.zig	/^const salt_length: usize = 16/;"	constant
salt_str	$ZIGLIB/std/crypto/bcrypt.zig	/var salt_str: [salt_str_length]u8 = undefined/;"	variable
salt_str_length	$ZIGLIB/std/crypto/bcrypt.zig	/^const salt_str_length: usize = 22/;"	constant
same_line	$ZIGLIB/std/zig/render.zig	/const same_line = tree.tokensOnSameLine(main_token, fallback_first)/;"	constant
same_line_doc_comment	$ZIGLIB/std/zig/Ast.zig	/same_line_doc_comment/;"	field
same_value	$ZIGLIB/std/dwarf.zig	/pub const same_value = 0x08/;"	constant
sample	$ZIGLIB/std/time.zig	/fn sample(self: *Timer) Instant {$/;"	function
sample_id_all	$ZIGLIB/std/os/linux.zig	/sample_id_all: bool = false/;"	field
sample_max_stack	$ZIGLIB/std/os/linux.zig	/sample_max_stack: u16 = 0/;"	field
sample_period_or_freq	$ZIGLIB/std/os/linux.zig	/sample_period_or_freq: u64 = 0/;"	field
sample_regs_intr	$ZIGLIB/std/os/linux.zig	/sample_regs_intr: u64 = 0/;"	field
sample_regs_user	$ZIGLIB/std/os/linux.zig	/sample_regs_user: u64 = 0/;"	field
sample_stack_user	$ZIGLIB/std/os/linux.zig	/sample_stack_user: u32 = 0/;"	field
sample_type	$ZIGLIB/std/os/linux.zig	/sample_type: u64 = 0/;"	field
sandybridge	$ZIGLIB/std/target/x86.zig	/pub const sandybridge = CpuModel{$/;"	constant
sanitize_thread	$ZIGLIB/std/Build/CompileStep.zig	/^sanitize_thread: bool/;"	field
sanity	$ZIGLIB/std/compress/deflate/decompressor.zig	/const sanity = false/;"	constant
saphira	$ZIGLIB/std/target/aarch64.zig	/pub const saphira = CpuModel{$/;"	constant
sapphirerapids	$ZIGLIB/std/target/x86.zig	/pub const sapphirerapids = CpuModel{$/;"	constant
sattr_copy	$ZIGLIB/std/child_process.zig	/var sattr_copy = sattr.*/;"	variable
saturate	$ZIGLIB/std/math/big/int.zig	/pub fn saturate(r: *Mutable, a: Const, signedness: Signedness, bit_count: usize) void {$/;"	function
saturated_bits	$ZIGLIB/std/crypto/pcurves/common.zig	/saturated_bits: comptime_int/;"	field
save_restore	$ZIGLIB/std/target/riscv.zig	/save_restore/;"	field
saved_buf	$ZIGLIB/std/crypto/tls/Client.zig	/const saved_buf = frag[in..]/;"	constant
saw_addrspace	$ZIGLIB/std/zig/Parse.zig	/var saw_addrspace = false/;"	variable
saw_allowzero	$ZIGLIB/std/zig/Parse.zig	/var saw_allowzero = false/;"	variable
saw_any_digits	$ZIGLIB/std/net.zig	/var saw_any_digits = false/;"	variable
saw_at_sign	$ZIGLIB/std/zig/tokenizer.zig	/saw_at_sign/;"	field
saw_const	$ZIGLIB/std/zig/Parse.zig	/var saw_const = false/;"	variable
saw_volatile	$ZIGLIB/std/zig/Parse.zig	/var saw_volatile = false/;"	variable
sb_ah	$ZIGLIB/std/crypto/25519/ed25519.zig	/const sb_ah = try Curve.basePoint.mulDoubleBasePublic(self.s, self.a.neg(), hram)/;"	constant
sbb_dep_breaking	$ZIGLIB/std/target/x86.zig	/sbb_dep_breaking/;"	field
sbox	$ZIGLIB/std/crypto/aes/soft.zig	/var sbox: [256]u8 = undefined/;"	variable
sbox_decrypt	$ZIGLIB/std/crypto/aes/soft.zig	/^const sbox_decrypt align(64) = generateSbox(true)/;"	constant
sbox_encrypt	$ZIGLIB/std/crypto/aes/soft.zig	/^const sbox_encrypt align(64) = generateSbox(false)/;"	constant
sboxes	$ZIGLIB/std/crypto/bcrypt.zig	/sboxes: [4][256]u32 = [4][256]u32{$/;"	field
sbytes	$ZIGLIB/std/os.zig	/var sbytes: off_t = undefined/;"	variable
sc000	$ZIGLIB/std/target/arm.zig	/pub const sc000 = CpuModel{$/;"	constant
sc1pio2	$ZIGLIB/compiler_rt/sincos.zig	/const sc1pio2: f64 = 1.0 * math.pi \/ 2.0/;"	constant
sc1pio4	$ZIGLIB/compiler_rt/sincos.zig	/const sc1pio4: F = 1.0 * math.pi \/ 4.0/;"	constant
sc2pio2	$ZIGLIB/compiler_rt/sincos.zig	/const sc2pio2: f64 = 2.0 * math.pi \/ 2.0/;"	constant
sc300	$ZIGLIB/std/target/arm.zig	/pub const sc300 = CpuModel{$/;"	constant
sc3pio2	$ZIGLIB/compiler_rt/sincos.zig	/const sc3pio2: f64 = 3.0 * math.pi \/ 2.0/;"	constant
sc4pio2	$ZIGLIB/compiler_rt/sincos.zig	/const sc4pio2: f64 = 4.0 * math.pi \/ 2.0/;"	constant
sc_cookie	$ZIGLIB/std/c/openbsd.zig	/sc_cookie: c_long/;"	field
sc_cs	$ZIGLIB/std/c/openbsd.zig	/sc_cs: c_long/;"	field
sc_ds	$ZIGLIB/std/c/openbsd.zig	/sc_ds: c_long/;"	field
sc_err	$ZIGLIB/std/c/openbsd.zig	/sc_err: c_long/;"	field
sc_es	$ZIGLIB/std/c/openbsd.zig	/sc_es: c_long/;"	field
sc_fpstate	$ZIGLIB/std/c/openbsd.zig	/sc_fpstate: *anyopaque/;"	field
sc_fs	$ZIGLIB/std/c/openbsd.zig	/sc_fs: c_long/;"	field
sc_gs	$ZIGLIB/std/c/openbsd.zig	/sc_gs: c_long/;"	field
sc_mask	$ZIGLIB/std/c/openbsd.zig	/sc_mask: c_int/;"	field
sc_r10	$ZIGLIB/std/c/openbsd.zig	/sc_r10: c_long/;"	field
sc_r11	$ZIGLIB/std/c/openbsd.zig	/sc_r11: c_long/;"	field
sc_r12	$ZIGLIB/std/c/openbsd.zig	/sc_r12: c_long/;"	field
sc_r13	$ZIGLIB/std/c/openbsd.zig	/sc_r13: c_long/;"	field
sc_r14	$ZIGLIB/std/c/openbsd.zig	/sc_r14: c_long/;"	field
sc_r15	$ZIGLIB/std/c/openbsd.zig	/sc_r15: c_long/;"	field
sc_r8	$ZIGLIB/std/c/openbsd.zig	/sc_r8: c_long/;"	field
sc_r9	$ZIGLIB/std/c/openbsd.zig	/sc_r9: c_long/;"	field
sc_rax	$ZIGLIB/std/c/openbsd.zig	/sc_rax: c_long/;"	field
sc_rbp	$ZIGLIB/std/c/openbsd.zig	/sc_rbp: c_long/;"	field
sc_rbx	$ZIGLIB/std/c/openbsd.zig	/sc_rbx: c_long/;"	field
sc_rcx	$ZIGLIB/std/c/openbsd.zig	/sc_rcx: c_long/;"	field
sc_rdi	$ZIGLIB/std/c/openbsd.zig	/sc_rdi: c_long/;"	field
sc_rdx	$ZIGLIB/std/c/openbsd.zig	/sc_rdx: c_long/;"	field
sc_rflags	$ZIGLIB/std/c/openbsd.zig	/sc_rflags: c_long/;"	field
sc_rip	$ZIGLIB/std/c/openbsd.zig	/sc_rip: c_long/;"	field
sc_rsi	$ZIGLIB/std/c/openbsd.zig	/sc_rsi: c_long/;"	field
sc_rsp	$ZIGLIB/std/c/openbsd.zig	/sc_rsp: c_long/;"	field
sc_ss	$ZIGLIB/std/c/openbsd.zig	/sc_ss: c_long/;"	field
sc_trapno	$ZIGLIB/std/c/openbsd.zig	/sc_trapno: c_long/;"	field
scalar	$ZIGLIB/std/crypto/pcurves/tests/secp256k1.zig	/const scalar = try Secp256k1.scalar.Scalar.fromBytes(.{$/;"	constant
scalarAndPrefix	$ZIGLIB/std/crypto/25519/ed25519.zig	/fn scalarAndPrefix(self: SecretKey) struct { scalar: CompressedScalar, prefix: [32]u8 } {$/;"	function
scalar_and_prefix	$ZIGLIB/std/crypto/25519/ed25519.zig	/const scalar_and_prefix = key_pair.secret_key.scalarAndPrefix()/;"	constant
scalar_atomics	$ZIGLIB/std/target/amdgpu.zig	/scalar_atomics/;"	field
scalar_encoded_length	$ZIGLIB/std/crypto/ecdsa.zig	/const scalar_encoded_length = Curve.scalar.encoded_length/;"	constant
scalar_flat_scratch_insts	$ZIGLIB/std/target/amdgpu.zig	/scalar_flat_scratch_insts/;"	field
scalar_stores	$ZIGLIB/std/target/amdgpu.zig	/scalar_stores/;"	field
scalarmult	$ZIGLIB/std/crypto/25519/x25519.zig	/pub fn scalarmult(secret_key: [secret_length]u8, public_key: [public_length]u8) IdentityElementError![shared_length]u8 {$/;"	function
scalbn	$ZIGLIB/std/math/scalbn.zig	/^pub const scalbn = @import("ldexp.zig").ldexp/;"	constant
scale	$ZIGLIB/std/time.zig	/const scale = @as(u64, std.time.ns_per_s << 32) \/ @intCast(u32, qpf)/;"	constant
scale1	$ZIGLIB/std/math/complex/ldexp.zig	/const scale1 = @bitCast(f64, (0x3ff + half_expt1) << (20 + 32))/;"	constant
scale2	$ZIGLIB/std/math/complex/ldexp.zig	/const scale2 = @bitCast(f64, (0x3ff + half_expt2) << (20 + 32))/;"	constant
scanAllCompileUnits	$ZIGLIB/std/dwarf.zig	/fn scanAllCompileUnits(di: *DwarfInfo, allocator: mem.Allocator) !void {$/;"	function
scanAllFunctions	$ZIGLIB/std/dwarf.zig	/fn scanAllFunctions(di: *DwarfInfo, allocator: mem.Allocator) !void {$/;"	function
scanDigit	$ZIGLIB/std/fmt/parse_float/FloatStream.zig	/^pub fn scanDigit(self: *FloatStream, comptime base: u8) ?u8 {$/;"	function
scan_code	$ZIGLIB/std/os/uefi/protocols/simple_text_input_ex_protocol.zig	/scan_code: u16/;"	field
scatterOffset	$ZIGLIB/std/macho.zig	/scatterOffset: u32/;"	field
sched_act	$ZIGLIB/std/os/linux/bpf.zig	/sched_act/;"	field
sched_cls	$ZIGLIB/std/os/linux/bpf.zig	/sched_cls/;"	field
sched_get_affinity	$ZIGLIB/std/os/linux/syscalls.zig	/sched_get_affinity = 161/;"	field
sched_get_priority_max	$ZIGLIB/std/os/linux/syscalls.zig	/sched_get_priority_max = Linux + 163/;"	field
sched_get_priority_min	$ZIGLIB/std/os/linux/syscalls.zig	/sched_get_priority_min = Linux + 164/;"	field
sched_getaffinity	$ZIGLIB/std/os/linux/syscalls.zig	/sched_getaffinity = Linux + 240/;"	field
sched_getattr	$ZIGLIB/std/os/linux/syscalls.zig	/sched_getattr = Linux + 350/;"	field
sched_getparam	$ZIGLIB/std/os/linux/syscalls.zig	/sched_getparam = Linux + 159/;"	field
sched_getscheduler	$ZIGLIB/std/os/linux/syscalls.zig	/sched_getscheduler = Linux + 161/;"	field
sched_rr_get_interval	$ZIGLIB/std/os/linux/syscalls.zig	/sched_rr_get_interval = Linux + 165/;"	field
sched_rr_get_interval_time64	$ZIGLIB/std/os/linux/syscalls.zig	/sched_rr_get_interval_time64 = Linux + 423/;"	field
sched_set_affinity	$ZIGLIB/std/os/linux/syscalls.zig	/sched_set_affinity = 160/;"	field
sched_setaffinity	$ZIGLIB/std/os/linux/syscalls.zig	/sched_setaffinity = Linux + 239/;"	field
sched_setattr	$ZIGLIB/std/os/linux/syscalls.zig	/sched_setattr = Linux + 349/;"	field
sched_setparam	$ZIGLIB/std/os/linux/syscalls.zig	/sched_setparam = Linux + 158/;"	field
sched_setscheduler	$ZIGLIB/std/os/linux/syscalls.zig	/sched_setscheduler = Linux + 160/;"	field
sched_yield	$ZIGLIB/std/os/linux/syscalls.zig	/sched_yield = Linux + 23/;"	field
schema_offset	$ZIGLIB/std/crypto/Certificate/Bundle/macos.zig	/schema_offset: u32/;"	field
schema_size	$ZIGLIB/std/crypto/Certificate/Bundle/macos.zig	/schema_size: u32/;"	field
scheme	$ZIGLIB/std/crypto/tls/Client.zig	/const scheme = hsd.decode(tls.SignatureScheme)/;"	constant
scope	$ZIGLIB/std/log.zig	/scope: @Type(.EnumLiteral)/;"	field
scopeOf	$ZIGLIB/std/net.zig	/^fn scopeOf(a: [16]u8) u8 {$/;"	function
scope_id	$ZIGLIB/std/os/windows/ws2_32.zig	/scope_id: u32/;"	field
scope_id_index	$ZIGLIB/std/net.zig	/var scope_id_index: usize = 0/;"	variable
scope_id_str	$ZIGLIB/std/net.zig	/const scope_id_str = scope_id_value[0..scope_id_index]/;"	constant
scope_id_value	$ZIGLIB/std/net.zig	/var scope_id_value: [os.IFNAMESIZE - 1]u8 = undefined/;"	variable
scope_levels	$ZIGLIB/std/log.zig	/^const scope_levels = std.options.log_scope_levels/;"	constant
scoped	$ZIGLIB/std/log.zig	/^pub fn scoped(comptime scope: @Type(.EnumLiteral)) type {$/;"	function
scratch	$ZIGLIB/std/zig/Parse.zig	/^scratch: std.ArrayListUnmanaged(Node.Index)/;"	field
scratch_top	$ZIGLIB/std/zig/Parse.zig	/const scratch_top = p.scratch.items.len/;"	constant
scroll_lock_active	$ZIGLIB/std/os/uefi/protocols/simple_text_input_ex_protocol.zig	/scroll_lock_active: bool/;"	field
sdata	$ZIGLIB/std/dwarf/FORM.zig	/^pub const sdata = 0x0d/;"	constant
sdflags_t	$ZIGLIB/std/os/wasi.zig	/^pub const sdflags_t = u8/;"	constant
sdwa	$ZIGLIB/std/target/amdgpu.zig	/sdwa/;"	field
sdwa_mav	$ZIGLIB/std/target/amdgpu.zig	/sdwa_mav/;"	field
sdwa_omod	$ZIGLIB/std/target/amdgpu.zig	/sdwa_omod/;"	field
sdwa_out_mods_vopc	$ZIGLIB/std/target/amdgpu.zig	/sdwa_out_mods_vopc/;"	field
sdwa_scalar	$ZIGLIB/std/target/amdgpu.zig	/sdwa_scalar/;"	field
sdwa_sdst	$ZIGLIB/std/target/amdgpu.zig	/sdwa_sdst/;"	field
sea_islands	$ZIGLIB/std/target/amdgpu.zig	/sea_islands/;"	field
seal	$ZIGLIB/std/crypto/salsa20.zig	/pub fn seal(c: []u8, m: []const u8, public_key: [public_length]u8) (WeakPublicKeyError || IdentityElementError)!void {$/;"	function
seal_length	$ZIGLIB/std/crypto/salsa20.zig	/pub const seal_length = Box.public_length + Box.tag_length/;"	constant
search	$ZIGLIB/std/net.zig	/search: std.ArrayList(u8)/;"	field
searchBucket	$ZIGLIB/std/heap/general_purpose_allocator.zig	/fn searchBucket($/;"	function
search_prefixes	$ZIGLIB/std/Build.zig	/^search_prefixes: ArrayList([]const u8)/;"	field
search_strategy	$ZIGLIB/std/Build/CompileStep.zig	/^search_strategy: ?enum { paths_first, dylibs_first } = null/;"	field
sec_name_off	$ZIGLIB/std/os/linux/bpf/btf_ext.zig	/sec_name_off: u32/;"	field
sec_offset	$ZIGLIB/std/dwarf/FORM.zig	/^pub const sec_offset = 0x17/;"	constant
seccomp	$ZIGLIB/std/os/linux/syscalls.zig	/seccomp = Linux + 352/;"	field
second	$ZIGLIB/std/os/uefi.zig	/second: u8/;"	field
secondCodeUnit	$ZIGLIB/std/json.zig	/const secondCodeUnit = std.fmt.parseInt(u16, input[inIndex + 8 .. inIndex + 12], 16) catch unreachable/;"	constant
secondLevelPagesSectionOffset	$ZIGLIB/std/macho.zig	/secondLevelPagesSectionOffset: u32/;"	field
second_child_index	$ZIGLIB/std/priority_dequeue.zig	/const second_child_index = first_child_index + 1/;"	constant
second_file	$ZIGLIB/std/os/linux/io_uring.zig	/const second_file = try std.fs.cwd().openFile(second_path, .{})/;"	constant
second_file_data	$ZIGLIB/std/os/linux/io_uring.zig	/var second_file_data: [16]u8 = undefined/;"	variable
second_free_stack_trace	$ZIGLIB/std/heap/general_purpose_allocator.zig	/var second_free_stack_trace = StackTrace{$/;"	variable
second_grandchild_index	$ZIGLIB/std/priority_dequeue.zig	/const second_grandchild_index = first_grandchild_index + 1/;"	constant
second_key	$ZIGLIB/std/os/linux/bpf.zig	/const second_key = [key_size]u8{ 0, 0, 0, 1 }/;"	constant
second_len	$ZIGLIB/std/crypto/tls/Client.zig	/const second_len = full_record_len - first.len/;"	constant
second_path	$ZIGLIB/std/os/linux/io_uring.zig	/const second_path = "test_io_uring_linkat_second"/;"	constant
seconds	$ZIGLIB/std/time.zig	/const seconds = @intCast(u64, self.timestamp.tv_sec - earlier.timestamp.tv_sec)/;"	constant
seconds_into_minute	$ZIGLIB/std/time/epoch.zig	/seconds_into_minute: u6/;"	field
secp256r1	$ZIGLIB/std/crypto/tls.zig	/secp256r1 = 0x0017/;"	field
secp256r1_kp	$ZIGLIB/std/crypto/tls/Client.zig	/const secp256r1_kp = crypto.sign.ecdsa.EcdsaP256Sha256.KeyPair.create(secp256r1_kp_seed) catch |err| switch (err) {$/;"	constant
secp256r1_kp_seed	$ZIGLIB/std/crypto/tls/Client.zig	/const secp256r1_kp_seed = random_buffer[96..128].*/;"	constant
secp384r1	$ZIGLIB/std/crypto/tls.zig	/secp384r1 = 0x0018/;"	field
secp521r1	$ZIGLIB/std/crypto/tls.zig	/secp521r1 = 0x0019/;"	field
secret	$ZIGLIB/std/crypto/argon2.zig	/secret: ?[]const u8 = null/;"	field
secret_key	$ZIGLIB/std/crypto/ecdsa.zig	/secret_key: SecretKey/;"	field
secret_length	$ZIGLIB/std/crypto/25519/x25519.zig	/pub const secret_length = 32/;"	constant
secret_seed_length	$ZIGLIB/std/rand/Xoodoo.zig	/^pub const secret_seed_length = 32/;"	constant
secs	$ZIGLIB/std/time/epoch.zig	/secs: u64/;"	field
secs_per_day	$ZIGLIB/std/time/epoch.zig	/^pub const secs_per_day: u17 = 24 * 60 * 60/;"	constant
sect	$ZIGLIB/std/macho.zig	/pub fn sect(sym: nlist_64) bool {$/;"	function
sectName	$ZIGLIB/std/macho.zig	/pub fn sectName(sect: *const section_64) []const u8 {$/;"	function
sect_cont_offset	$ZIGLIB/std/pdb.zig	/var sect_cont_offset: usize = 0/;"	variable
sect_contribs	$ZIGLIB/std/pdb.zig	/var sect_contribs = ArrayList(SectionContribEntry).init(self.allocator)/;"	variable
sect_def	$ZIGLIB/std/coff.zig	/sect_def: SectionDefinition/;"	field
sect_mem	$ZIGLIB/std/dynamic_library.zig	/const sect_mem = try os.mmap($/;"	constant
sect_offset	$ZIGLIB/std/pdb.zig	/var sect_offset: usize = 0/;"	variable
section	$ZIGLIB/std/wasm.zig	/^pub fn section(val: Section) u8 {$/;"	function
section1	$ZIGLIB/std/Ini.zig	/const section1 = it.next() orelse return error.TestFailed/;"	constant
section2	$ZIGLIB/std/Ini.zig	/const section2 = it.next() orelse return error.TestFailed/;"	constant
section_64	$ZIGLIB/std/macho.zig	/^pub const section_64 = extern struct {$/;"	struct
section_alignment	$ZIGLIB/std/coff.zig	/section_alignment: u32/;"	field
section_contrib_size	$ZIGLIB/std/pdb.zig	/const section_contrib_size = header.SectionContributionSize/;"	constant
section_data	$ZIGLIB/std/coff.zig	/const section_data = try self.getSectionData(name)/;"	constant
section_end	$ZIGLIB/std/zig/render.zig	/const section_end = sec_end: {$/;"	constant
section_expr	$ZIGLIB/std/zig/Parse.zig	/const section_expr = try p.parseLinkSection()/;"	constant
section_exprs	$ZIGLIB/std/zig/render.zig	/const section_exprs = row_exprs[0..section_end]/;"	constant
section_header_iterator	$ZIGLIB/std/elf.zig	/pub fn section_header_iterator(self: Header, parse_source: anytype) SectionHeaderIterator(@TypeOf(parse_source)) {$/;"	function
section_headers	$ZIGLIB/std/coff.zig	/const section_headers = self.getSectionHeaders()/;"	constant
section_kw	$ZIGLIB/std/zig/render.zig	/const section_kw = lparen - 1/;"	constant
section_length	$ZIGLIB/std/Build/CheckObjectStep.zig	/const section_length = try std.leb.readULEB128(u32, reader)/;"	constant
section_lparen	$ZIGLIB/std/zig/render.zig	/const section_lparen = tree.firstToken(fn_proto.ast.section_expr) - 1/;"	constant
section_node	$ZIGLIB/std/zig/Parse.zig	/const section_node = try p.parseLinkSection()/;"	constant
section_number	$ZIGLIB/std/coff.zig	/section_number: SectionNumber/;"	field
section_rparen	$ZIGLIB/std/zig/render.zig	/const section_rparen = tree.lastToken(fn_proto.ast.section_expr) + 1/;"	constant
sections	$ZIGLIB/std/macho.zig	/const sections = @ptrCast($/;"	constant
sectname	$ZIGLIB/std/macho.zig	/sectname: [16]u8/;"	field
secureZero	$ZIGLIB/std/crypto/utils.zig	/^pub fn secureZero(comptime T: type, s: []T) void {$/;"	function
secure_plt	$ZIGLIB/std/target/powerpc.zig	/secure_plt/;"	field
security	$ZIGLIB/std/os/linux/syscalls.zig	/security = 185/;"	field
see_other	$ZIGLIB/std/http.zig	/see_other = 303/;"	field
seed	$ZIGLIB/std/rand/Xoshiro256.zig	/^pub fn seed(self: *Xoshiro256, init_s: u64) void {$/;"	function
seedTwo	$ZIGLIB/std/rand/Pcg.zig	/^fn seedTwo(self: *Pcg, init_s: u64, init_i: u64) void {$/;"	function
seedWithBuf	$ZIGLIB/std/rand/RomuTrio.zig	/^pub fn seedWithBuf(self: *RomuTrio, buf: [24]u8) void {$/;"	function
seed_	$ZIGLIB/std/crypto/ecdsa.zig	/var seed_ = seed/;"	variable
seed_buf	$ZIGLIB/std/rand/RomuTrio.zig	/const seed_buf = @bitCast([3]u64, buf)/;"	constant
seed_length	$ZIGLIB/std/crypto/ecdsa.zig	/pub const seed_length = noise_length/;"	constant
seek	$ZIGLIB/std/fs.zig	/seek: i64/;"	field
seekBy	$ZIGLIB/std/pdb.zig	/pub fn seekBy(self: *MsfStream, len: i64) !void {$/;"	function
seekFromEnd	$ZIGLIB/std/fs/file.zig	/pub fn seekFromEnd(self: File, offset: i64) SeekError!void {$/;"	function
seekTo	$ZIGLIB/std/pdb.zig	/pub fn seekTo(self: *MsfStream, len: u64) !void {$/;"	function
seek_back	$ZIGLIB/std/os/uefi/protocols/file_protocol.zig	/const seek_back = offset < 0/;"	constant
seekable	$ZIGLIB/std/dwarf.zig	/const seekable = &stream.seekableStream()/;"	constant
seekableStream	$ZIGLIB/std/os/uefi/protocols/file_protocol.zig	/pub fn seekableStream(self: *FileProtocol) SeekableStream {$/;"	function
seen	$ZIGLIB/std/zig/Parse.zig	/seen/;"	field
seen_eacces	$ZIGLIB/std/os.zig	/var seen_eacces = false/;"	variable
seen_escape_digits	$ZIGLIB/std/zig/tokenizer.zig	/var seen_escape_digits: usize = undefined/;"	variable
seen_r	$ZIGLIB/std/http/Client.zig	/seen_r/;"	field
seen_rn	$ZIGLIB/std/http/Client.zig	/seen_rn/;"	field
seen_rnr	$ZIGLIB/std/http/Client.zig	/seen_rnr/;"	field
seen_steps	$ZIGLIB/std/Build/CompileStep.zig	/seen_steps: std.AutoHashMap(*const Step, void)/;"	field
seen_system_libs	$ZIGLIB/std/Build/CompileStep.zig	/seen_system_libs: StringHashMap(void)/;"	field
segName	$ZIGLIB/std/macho.zig	/pub fn segName(seg: *const segment_command_64) []const u8 {$/;"	function
seg_32bit	$ZIGLIB/std/os/linux/x86.zig	/seg_32bit: u1/;"	field
seg_end	$ZIGLIB/std/debug.zig	/const seg_end = seg_start + segment_cmd.vmsize/;"	constant
seg_not_present	$ZIGLIB/std/os/linux/x86.zig	/seg_not_present: u1/;"	field
seg_size	$ZIGLIB/std/dwarf.zig	/var seg_size: u8 = 0/;"	variable
seg_start	$ZIGLIB/std/debug.zig	/const seg_start = segment_cmd.vmaddr/;"	constant
segcmd	$ZIGLIB/std/debug.zig	/var segcmd: ?macho.LoadCommandIterator.LoadCommand = null/;"	variable
segment	$ZIGLIB/std/dwarf/AT.zig	/^pub const segment = 0x46/;"	constant
segment_cmd	$ZIGLIB/std/debug.zig	/const segment_cmd = cmd.cast(macho.segment_command_64).?/;"	constant
segment_command	$ZIGLIB/std/macho.zig	/^pub const segment_command = extern struct {$/;"	struct
segment_command_64	$ZIGLIB/std/macho.zig	/^pub const segment_command_64 = extern struct {$/;"	struct
segment_lc	$ZIGLIB/std/macho.zig	/const segment_lc = lc.cast(segment_command_64).?/;"	constant
segments	$ZIGLIB/std/crypto/argon2.zig	/const segments = lanes \/ sync_points/;"	constant
segname	$ZIGLIB/std/macho.zig	/segname: [16]u8/;"	field
sel2	$ZIGLIB/std/target/aarch64.zig	/sel2/;"	field
select	$ZIGLIB/std/wasm.zig	/select = 0x1B/;"	field
selectSymbol	$ZIGLIB/std/os/windows/user32.zig	/^fn selectSymbol(comptime function_static: anytype, function_dynamic: *const @TypeOf(function_static), comptime os: std.Target.Os.WindowsVersion) *const @TypeOf(function_static) {$/;"	function
select_mask	$ZIGLIB/std/simd.zig	/const select_mask = repeat(len, join(@splat(a_vec_count, true), @splat(b_vec_count, false)))/;"	constant
selected_canonicalized_triple	$ZIGLIB/std/Build.zig	/const selected_canonicalized_triple = selected_target.zigTriple(self.allocator) catch @panic("OOM")/;"	constant
selected_cpu	$ZIGLIB/std/Build.zig	/const selected_cpu = selected_target.getCpu()/;"	constant
selected_target	$ZIGLIB/std/Build.zig	/const selected_target = CrossTarget.parse(.{$/;"	constant
selection	$ZIGLIB/std/coff.zig	/selection: ComdatSelection/;"	field
selectznz	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/^pub fn selectznz(out1: *[4]u64, arg1: u1, arg2: [4]u64, arg3: [4]u64) void {$/;"	function
self	$ZIGLIB/std/zig/system/NativePaths.zig	/var self: NativePaths = .{$/;"	variable
selfExeDirPath	$ZIGLIB/std/fs.zig	/^pub fn selfExeDirPath(out_buffer: []u8) SelfExePathError![]const u8 {$/;"	function
selfExeDirPathAlloc	$ZIGLIB/std/fs.zig	/^pub fn selfExeDirPathAlloc(allocator: Allocator) ![]u8 {$/;"	function
selfExePath	$ZIGLIB/std/fs.zig	/^pub fn selfExePath(out_buffer: []u8) SelfExePathError![]u8 {$/;"	function
selfExePathAlloc	$ZIGLIB/std/fs.zig	/^pub fn selfExePathAlloc(allocator: Allocator) ![]u8 {$/;"	function
selfExePathW	$ZIGLIB/std/fs.zig	/^pub fn selfExePathW() [:0]const u16 {$/;"	function
self_debug_info	$ZIGLIB/std/debug.zig	/^var self_debug_info: ?DebugInfo = null/;"	variable
self_exe_path	$ZIGLIB/std/fs.zig	/const self_exe_path = try selfExePath(out_buffer)/;"	constant
self_process_handle	$ZIGLIB/std/os/windows.zig	/^pub const self_process_handle = @intToPtr(HANDLE, maxInt(usize))/;"	constant
self_slice	$ZIGLIB/std/multi_array_list.zig	/const self_slice = self.slice()/;"	constant
self_task	$ZIGLIB/std/os/darwin.zig	/const self_task = machTaskForSelf()/;"	constant
self_waiter	$ZIGLIB/std/event/wait_group.zig	/var self_waiter: Waiter = undefined/;"	variable
sem_t	$ZIGLIB/std/c/solaris.zig	/^pub const sem_t = extern struct {$/;"	struct
semaphore	$ZIGLIB/std/Thread/RwLock.zig	/semaphore: std.Thread.Semaphore = .{}/;"	field
semctl	$ZIGLIB/std/os/linux/syscalls.zig	/semctl = Linux + 64/;"	field
semget	$ZIGLIB/std/os/linux/syscalls.zig	/semget = Linux + 62/;"	field
semicolon	$ZIGLIB/std/zig/tokenizer.zig	/semicolon/;"	field
semop	$ZIGLIB/std/os/linux/syscalls.zig	/semop = Linux + 63/;"	field
semtimedop	$ZIGLIB/std/os/linux/syscalls.zig	/semtimedop = Linux + 214/;"	field
semtimedop_time64	$ZIGLIB/std/os/linux/syscalls.zig	/semtimedop_time64 = Linux + 420/;"	field
semver	$ZIGLIB/std/zig/CrossTarget.zig	/semver: SemVer/;"	field
send	$ZIGLIB/std/os/linux/x86.zig	/pub const send = 9/;"	constant
send_signal	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const send_signal = @intToPtr(fn (sig: u32) c_long, 109)/;"	constant
send_signal_thread	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const send_signal_thread = @intToPtr(fn (sig: u32) c_long, 117)/;"	constant
sendfile	$ZIGLIB/std/os/linux/syscalls.zig	/sendfile = Linux + 39/;"	field
sendfile64	$ZIGLIB/std/os/linux/syscalls.zig	/sendfile64 = Linux + 237/;"	field
sendfile_sym	$ZIGLIB/std/os.zig	/const sendfile_sym = if (builtin.link_libc)$/;"	constant
sendmmsg	$ZIGLIB/std/os/linux/x86.zig	/pub const sendmmsg = 20/;"	constant
sendmsg	$ZIGLIB/std/os/windows.zig	/^pub fn sendmsg($/;"	function
sendq	$ZIGLIB/std/c/freebsd.zig	/sendq: u32/;"	field
sendto	$ZIGLIB/std/os/windows.zig	/^pub fn sendto(s: ws2_32.SOCKET, buf: [*]const u8, len: usize, flags: u32, to: ?*const ws2_32.sockaddr, to_len: ws2_32.socklen_t) i32 {$/;"	function
sensitive	$ZIGLIB/std/crypto/scrypt.zig	/pub const sensitive = Self.fromLimits(33554432, 1073741824)/;"	constant
sensitive_2i	$ZIGLIB/std/crypto/argon2.zig	/pub const sensitive_2i = Self.fromLimits(8, 536870912)/;"	constant
sensitive_2id	$ZIGLIB/std/crypto/argon2.zig	/pub const sensitive_2id = Self.fromLimits(4, 1073741824)/;"	constant
sentinel	$ZIGLIB/std/zig/Parse.zig	/var sentinel: Node.Index = 0/;"	variable
sentinel_array	$ZIGLIB/std/mem.zig	/var sentinel_array: [5:0]u16 = [_:0]u16{ 1, 2, 3, 4, 5 }/;"	variable
sentinel_mismatch	$ZIGLIB/std/builtin.zig	/pub const sentinel_mismatch = "sentinel mismatch"/;"	constant
sentinel_ptr	$ZIGLIB/std/meta.zig	/const sentinel_ptr = info.sentinel orelse return null/;"	constant
sentinel_slice	$ZIGLIB/std/mem.zig	/const sentinel_slice: [:5]u16 = array[0..4 :5]/;"	constant
sentinel_value	$ZIGLIB/std/json.zig	/const sentinel_value = @ptrCast(*align(1) const ptrInfo.child, some).*/;"	constant
sep1	$ZIGLIB/std/fs/path.zig	/const sep1 = p1[0]/;"	constant
sep2	$ZIGLIB/std/fs/path.zig	/const sep2 = p2[0]/;"	constant
sep_posix	$ZIGLIB/std/fs/path.zig	/^pub const sep_posix = '\/'/;"	constant
sep_str	$ZIGLIB/std/fs/path.zig	/^pub const sep_str = switch (native_os) {$/;"	constant
sep_str_posix	$ZIGLIB/std/fs/path.zig	/^pub const sep_str_posix = "\/"/;"	constant
sep_str_windows	$ZIGLIB/std/fs/path.zig	/^pub const sep_str_windows = "\\\\"/;"	constant
sep_windows	$ZIGLIB/std/fs/path.zig	/^pub const sep_windows = '\\\\'/;"	constant
separator	$ZIGLIB/std/json.zig	/separator: bool = true/;"	field
seq1	$ZIGLIB/std/rand/Xoshiro256.zig	/const seq1 = [_]u64{$/;"	constant
seq2	$ZIGLIB/std/rand/Xoshiro256.zig	/const seq2 = [_]u64{$/;"	constant
seq_len	$ZIGLIB/std/os/windows.zig	/const seq_len = std.unicode.utf8CodepointSequenceLength(codepoint) catch unreachable/;"	constant
seq_printf	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const seq_printf = @intToPtr(fn (m: *kern.SeqFile, fmt: ?*const u8, fmt_size: u32, data: ?*const anyopaque, data_len: u32) c_long, 126)/;"	constant
seq_write	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const seq_write = @intToPtr(fn (m: *kern.SeqFile, data: ?*const u8, len: u32) c_long, 127)/;"	constant
sequence	$ZIGLIB/std/crypto/Certificate.zig	/sequence = 16/;"	field
sequence_first_byte	$ZIGLIB/std/json.zig	/sequence_first_byte: u8 = undefined/;"	field
sequence_of	$ZIGLIB/std/crypto/Certificate.zig	/sequence_of = 17/;"	field
serialNumber	$ZIGLIB/std/crypto/Certificate.zig	/serialNumber/;"	field
serial_len	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/var serial_len = (self.length - @sizeOf(UsbWwidDevicePath)) \/ @sizeOf(u16)/;"	variable
serial_number	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/pub fn serial_number(self: *const UsbWwidDevicePath) []align(1) const u16 {$/;"	function
serialize	$ZIGLIB/std/target/x86.zig	/serialize/;"	field
serializeCpu	$ZIGLIB/std/Build.zig	/^pub fn serializeCpu(allocator: Allocator, cpu: std.Target.Cpu) ![]const u8 {$/;"	function
serializeTo	$ZIGLIB/std/crypto/scrypt.zig	/fn serializeTo(params: anytype, out: anytype) !void {$/;"	function
server	$ZIGLIB/std/os/linux/io_uring.zig	/server: os.socket_t/;"	field
server_certificate_type	$ZIGLIB/std/crypto/tls.zig	/server_certificate_type = 20/;"	field
server_error	$ZIGLIB/std/http.zig	/server_error/;"	field
server_finished_key	$ZIGLIB/std/crypto/tls.zig	/server_finished_key: [Hmac.key_length]u8/;"	field
server_handshake_iv	$ZIGLIB/std/crypto/tls.zig	/server_handshake_iv: [AEAD.nonce_length]u8/;"	field
server_handshake_key	$ZIGLIB/std/crypto/tls.zig	/server_handshake_key: [AEAD.key_length]u8/;"	field
server_hello	$ZIGLIB/std/crypto/tls.zig	/server_hello = 2/;"	field
server_hello_fragment	$ZIGLIB/std/crypto/tls/Client.zig	/const server_hello_fragment = d.buf[d.idx..][0..record_len]/;"	constant
server_iv	$ZIGLIB/std/crypto/tls.zig	/server_iv: [AEAD.nonce_length]u8/;"	field
server_key	$ZIGLIB/std/crypto/tls.zig	/server_key: [AEAD.key_length]u8/;"	field
server_name	$ZIGLIB/std/fs/path.zig	/const server_name = it.next().?/;"	constant
server_pub_key	$ZIGLIB/std/crypto/tls/Client.zig	/const server_pub_key = extd.slice(key_size)/;"	constant
server_secret	$ZIGLIB/std/crypto/tls/Client.zig	/const server_secret = hkdfExpandLabel(P.Hkdf, p.server_secret, "traffic upd", "", P.Hash.digest_length)/;"	constant
servfail_retry	$ZIGLIB/std/net.zig	/var servfail_retry: usize = undefined/;"	variable
service_id	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/service_id: u64 align(1)/;"	field
service_unavailable	$ZIGLIB/std/http.zig	/service_unavailable = 503/;"	field
seses	$ZIGLIB/std/target/x86.zig	/seses/;"	field
setAlignment	$ZIGLIB/std/coff.zig	/pub fn setAlignment(self: *SectionHeader, new_alignment: u16) void {$/;"	function
setAll	$ZIGLIB/std/packed_int_array.zig	/pub fn setAll(self: *Self, int: Int) void {$/;"	function
setAsCwd	$ZIGLIB/std/fs.zig	/pub fn setAsCwd(self: Dir) !void {$/;"	function
setAttribute	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/pub fn setAttribute(self: *const SimpleTextOutputProtocol, attribute: usize) Status {$/;"	function
setBits	$ZIGLIB/std/packed_int_array.zig	/fn setBits(bytes: []u8, comptime Container: type, bit_index: usize, int: Int) void {$/;"	function
setBytes	$ZIGLIB/std/crypto/Certificate.zig	/fn setBytes(r: *BigInt, bytes: []const u8, allcator: std.mem.Allocator) !void {$/;"	function
setCapacity	$ZIGLIB/std/segmented_list.zig	/pub fn setCapacity(self: *Self, allocator: Allocator, new_capacity: usize) Allocator.Error!void {$/;"	function
setColor	$ZIGLIB/std/debug.zig	/pub fn setColor(conf: Config, out_stream: anytype, color: Color) !void {$/;"	function
setCompletedItems	$ZIGLIB/std/Progress.zig	/pub fn setCompletedItems(self: *Node, completed_items: usize) void {$/;"	function
setCount	$ZIGLIB/std/enums.zig	/pub fn setCount(self: *Self, key: E, c: CountSize) void {$/;"	function
setCurrProtection	$ZIGLIB/std/os/darwin.zig	/pub fn setCurrProtection(task: MachTask, address: u64, len: usize, prot: std.c.vm_prot_t) MachError!void {$/;"	function
setCursorPosition	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/pub fn setCursorPosition(self: *const SimpleTextOutputProtocol, column: usize, row: usize) Status {$/;"	function
setData	$ZIGLIB/std/os/uefi/protocols/ip6_config_protocol.zig	/pub fn setData(self: *const Ip6ConfigProtocol, data_type: Ip6ConfigDataType, data_size: usize, data: *const anyopaque) Status {$/;"	function
setEmpty	$ZIGLIB/std/array_hash_map.zig	/fn setEmpty(idx: *Self) void {$/;"	function
setEndPos	$ZIGLIB/std/fs/file.zig	/pub fn setEndPos(self: File, length: u64) SetEndPosError!void {$/;"	function
setEnvironmentVariable	$ZIGLIB/std/Build/RunStep.zig	/^pub fn setEnvironmentVariable(self: *RunStep, key: []const u8, value: []const u8) void {$/;"	function
setEstimatedTotalItems	$ZIGLIB/std/Progress.zig	/pub fn setEstimatedTotalItems(self: *Node, count: usize) void {$/;"	function
setExceptionPorts	$ZIGLIB/std/os/darwin.zig	/pub fn setExceptionPorts($/;"	function
setExecCmd	$ZIGLIB/std/Build/CompileStep.zig	/^pub fn setExecCmd(self: *CompileStep, args: []const ?[]const u8) void {$/;"	function
setFeature	$ZIGLIB/std/zig/system/x86.zig	/^fn setFeature(cpu: *Target.Cpu, feature: Target.x86.Feature, enabled: bool) void {$/;"	function
setFilter	$ZIGLIB/std/Build/CompileStep.zig	/^pub fn setFilter(self: *CompileStep, text: ?[]const u8) void {$/;"	function
setFlag	$ZIGLIB/std/meta/trailer_flags.zig	/pub fn setFlag(self: *Self, comptime field: FieldEnum) void {$/;"	function
setFloat	$ZIGLIB/std/math/big/rational.zig	/pub fn setFloat(self: *Rational, comptime T: type, f: T) !void {$/;"	function
setFloatString	$ZIGLIB/std/math/big/rational.zig	/pub fn setFloatString(self: *Rational, str: []const u8) !void {$/;"	function
setGnuLibCVersion	$ZIGLIB/std/zig/CrossTarget.zig	/^pub fn setGnuLibCVersion(self: *CrossTarget, major: u32, minor: u32, patch: u32) void {$/;"	function
setIndentDelta	$ZIGLIB/std/zig/render.zig	/pub fn setIndentDelta(self: *Self, new_indent_delta: usize) void {$/;"	function
setInfo	$ZIGLIB/std/os/uefi/protocols/file_protocol.zig	/pub fn setInfo(self: *const FileProtocol, information_type: *align(8) const Guid, buffer_size: usize, buffer: [*]const u8) Status {$/;"	function
setInt	$ZIGLIB/std/math/big/rational.zig	/pub fn setInt(self: *Rational, a: anytype) !void {$/;"	function
setIntersection	$ZIGLIB/std/enums.zig	/pub fn setIntersection(self: *Self, other: Self) void {$/;"	function
setIp	$ZIGLIB/std/os/windows.zig	/pub fn setIp(ctx: *CONTEXT, ip: usize) void {$/;"	function
setLen	$ZIGLIB/std/math/big/int.zig	/pub fn setLen(self: *Managed, new_len: usize) void {$/;"	function
setLibCFile	$ZIGLIB/std/Build/CompileStep.zig	/^pub fn setLibCFile(self: *CompileStep, libc_file: ?FileSource) void {$/;"	function
setLinkerScriptPath	$ZIGLIB/std/Build/CompileStep.zig	/^pub fn setLinkerScriptPath(self: *CompileStep, source: FileSource) void {$/;"	function
setMainPkgPath	$ZIGLIB/std/Build/CompileStep.zig	/^pub fn setMainPkgPath(self: *CompileStep, dir_path: []const u8) void {$/;"	function
setMany	$ZIGLIB/std/meta/trailer_flags.zig	/pub fn setMany(self: Self, p: [*]align(@alignOf(Fields)) u8, fields: FieldValues) void {$/;"	function
setMaxProtection	$ZIGLIB/std/os/darwin.zig	/pub fn setMaxProtection(task: MachTask, address: u64, len: usize, prot: std.c.vm_prot_t) MachError!void {$/;"	function
setMem	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/setMem: *const fn (buffer: [*]u8, size: usize, value: u8) callconv(.C) void/;"	field
setMetadata	$ZIGLIB/std/math/big/int.zig	/pub fn setMetadata(self: *Managed, positive: bool, length: usize) void {$/;"	function
setMode	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/pub fn setMode(self: *const SimpleTextOutputProtocol, mode_number: usize) Status {$/;"	function
setName	$ZIGLIB/std/Thread.zig	/^pub fn setName(self: Thread, name: []const u8) SetNameError!void {$/;"	function
setNamePrefix	$ZIGLIB/std/Build/CompileStep.zig	/^pub fn setNamePrefix(self: *CompileStep, text: []const u8) void {$/;"	function
setNode	$ZIGLIB/std/zig/Parse.zig	/^fn setNode(p: *Parse, i: usize, elem: Ast.NodeList.Elem) Node.Index {$/;"	function
setOne	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/^pub fn setOne(out1: *MontgomeryDomainFieldElement) void {$/;"	function
setOutputDir	$ZIGLIB/std/Build/CompileStep.zig	/^pub fn setOutputDir(self: *CompileStep, dir: []const u8) void {$/;"	function
setPermissions	$ZIGLIB/std/fs/file.zig	/pub fn setPermissions(self: File, permissions: Permissions) SetPermissionsError!void {$/;"	function
setPort	$ZIGLIB/std/net.zig	/pub fn setPort(self: *Ip6Address, port: u16) void {$/;"	function
setPosition	$ZIGLIB/std/os/uefi/protocols/file_protocol.zig	/pub fn setPosition(self: *const FileProtocol, position: u64) Status {$/;"	function
setPresent	$ZIGLIB/std/enums.zig	/pub fn setPresent(self: *Self, key: Key, present: bool) void {$/;"	function
setProtectionImpl	$ZIGLIB/std/os/darwin.zig	/fn setProtectionImpl(task: MachTask, address: u64, len: usize, set_max: bool, prot: std.c.vm_prot_t) MachError!void {$/;"	function
setRangeValue	$ZIGLIB/std/bit_set.zig	/pub fn setRangeValue(self: *Self, range: Range, value: bool) void {$/;"	function
setRatio	$ZIGLIB/std/math/big/rational.zig	/pub fn setRatio(self: *Rational, p: anytype, q: anytype) !void {$/;"	function
setReadOnly	$ZIGLIB/std/fs/file.zig	/pub fn setReadOnly(self: *Self, read_only: bool) void {$/;"	function
setRequestedMemoryLimit	$ZIGLIB/std/heap/general_purpose_allocator.zig	/pub fn setRequestedMemoryLimit(self: *Self, limit: usize) void {$/;"	function
setSign	$ZIGLIB/std/math/big/int.zig	/pub fn setSign(self: *Managed, positive: bool) void {$/;"	function
setSockFlags	$ZIGLIB/std/os.zig	/^fn setSockFlags(sock: socket_t, flags: u32) !void {$/;"	function
setSp	$ZIGLIB/std/os/windows.zig	/pub fn setSp(ctx: *CONTEXT, sp: usize) void {$/;"	function
setState	$ZIGLIB/std/os/uefi/protocols/simple_text_input_ex_protocol.zig	/pub fn setState(self: *const SimpleTextInputExProtocol, state: *const u8) Status {$/;"	function
setString	$ZIGLIB/std/math/big/int.zig	/pub fn setString(self: *Managed, base: u8, value: []const u8) !void {$/;"	function
setTestRunner	$ZIGLIB/std/Build/CompileStep.zig	/^pub fn setTestRunner(self: *CompileStep, path: ?[]const u8) void {$/;"	function
setThreadPointer	$ZIGLIB/std/os/linux/tls.zig	/^pub fn setThreadPointer(addr: usize) void {$/;"	function
setTime	$ZIGLIB/std/os/uefi/tables/runtime_services.zig	/setTime: *const fn (time: *uefi.Time) callconv(.C) Status/;"	field
setTimer	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/setTimer: *const fn (event: Event, type: TimerDelay, triggerTime: u64) callconv(.C) Status/;"	field
setTwosCompIntLimit	$ZIGLIB/std/math/big/int.zig	/pub fn setTwosCompIntLimit($/;"	function
setUnion	$ZIGLIB/std/enums.zig	/pub fn setUnion(self: *Self, other: Self) void {$/;"	function
setUpChildIo	$ZIGLIB/std/child_process.zig	/fn setUpChildIo(stdio: StdIo, pipe_fd: i32, std_fileno: i32, dev_null_fd: i32) !void {$/;"	function
setUpChildIoPosixSpawn	$ZIGLIB/std/child_process.zig	/fn setUpChildIoPosixSpawn($/;"	function
setUserName	$ZIGLIB/std/child_process.zig	/pub fn setUserName(self: *ChildProcess, name: []const u8) !void {$/;"	function
setValue	$ZIGLIB/std/bit_set.zig	/pub fn setValue(self: *Self, index: usize, value: bool) void {$/;"	function
setVariable	$ZIGLIB/std/os/uefi/tables/runtime_services.zig	/setVariable: *const fn (var_name: [*:0]const u16, vendor_guid: *align(8) const Guid, attributes: u32, data_size: usize, data: *anyopaque) callconv(.C) Status/;"	field
setVbits	$ZIGLIB/std/valgrind/memcheck.zig	/^pub fn setVbits(zzvbits: []u8, zza: []u8) u2 {$/;"	function
setVerboseCC	$ZIGLIB/std/Build/CompileStep.zig	/^pub fn setVerboseCC(self: *CompileStep, value: bool) void {$/;"	function
setVerboseLink	$ZIGLIB/std/Build/CompileStep.zig	/^pub fn setVerboseLink(self: *CompileStep, value: bool) void {$/;"	function
setVirtualAddressMap	$ZIGLIB/std/os/uefi/tables/runtime_services.zig	/setVirtualAddressMap: *const fn (mmap_size: usize, descriptor_size: usize, descriptor_version: u32, virtual_map: [*]MemoryDescriptor) callconv(.C) Status/;"	field
setWakeupTime	$ZIGLIB/std/os/uefi/tables/runtime_services.zig	/setWakeupTime: *const fn (enable: *bool, time: ?*uefi.Time) callconv(.C) Status/;"	field
setWatchdogTimer	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/setWatchdogTimer: *const fn (timeout: usize, watchdogCode: u64, data_size: usize, watchdog_data: ?[*]const u16) callconv(.C) Status/;"	field
setWindowLongA	$ZIGLIB/std/os/windows/user32.zig	/^pub fn setWindowLongA(hWnd: HWND, nIndex: i32, dwNewLong: i32) !i32 {$/;"	function
setWindowLongPtrA	$ZIGLIB/std/os/windows/user32.zig	/^pub fn setWindowLongPtrA(hWnd: HWND, nIndex: i32, dwNewLong: isize) !isize {$/;"	function
setWindowLongPtrW	$ZIGLIB/std/os/windows/user32.zig	/^pub fn setWindowLongPtrW(hWnd: HWND, nIndex: i32, dwNewLong: isize) !isize {$/;"	function
setWindowLongW	$ZIGLIB/std/os/windows/user32.zig	/^pub fn setWindowLongW(hWnd: HWND, nIndex: i32, dwNewLong: i32) !i32 {$/;"	function
set_address	$ZIGLIB/std/dwarf.zig	/pub const set_address = 0x02/;"	constant
set_basic_block	$ZIGLIB/std/dwarf.zig	/pub const set_basic_block = 0x07/;"	constant
set_bits	$ZIGLIB/std/json.zig	/const set_bits = @as(ElementType, @enumToInt(ty)) << sub_index/;"	constant
set_column	$ZIGLIB/std/dwarf.zig	/pub const set_column = 0x05/;"	constant
set_discriminator	$ZIGLIB/std/dwarf.zig	/pub const set_discriminator = 0x04/;"	constant
set_epilogue_begin	$ZIGLIB/std/dwarf.zig	/pub const set_epilogue_begin = 0x0b/;"	constant
set_fields	$ZIGLIB/std/crypto/phc_encoding.zig	/var set_fields: usize = 0/;"	variable
set_file	$ZIGLIB/std/dwarf.zig	/pub const set_file = 0x04/;"	constant
set_hash	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const set_hash = @intToPtr(fn (skb: *kern.SkBuff, hash: u32) c_long, 48)/;"	constant
set_hash_invalid	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const set_hash_invalid = @intToPtr(fn (skb: *kern.SkBuff) void, 41)/;"	constant
set_isa	$ZIGLIB/std/dwarf.zig	/pub const set_isa = 0x0c/;"	constant
set_loc	$ZIGLIB/std/dwarf.zig	/pub const set_loc = 0x01/;"	constant
set_mempolicy	$ZIGLIB/std/os/linux/syscalls.zig	/set_mempolicy = Linux + 270/;"	field
set_mempolicy_home_node	$ZIGLIB/std/os/linux/syscalls.zig	/set_mempolicy_home_node = Linux + 450/;"	field
set_prologue_end	$ZIGLIB/std/dwarf.zig	/pub const set_prologue_end = 0x0a/;"	constant
set_robust_list	$ZIGLIB/std/os/linux/syscalls.zig	/set_robust_list = Linux + 309/;"	field
set_thread_area	$ZIGLIB/std/os/linux/syscalls.zig	/set_thread_area = Linux + 283/;"	field
set_tid_address	$ZIGLIB/std/os/linux/syscalls.zig	/set_tid_address = Linux + 252/;"	field
set_tls	$ZIGLIB/std/os/linux/syscalls.zig	/set_tls = arm_base + 5/;"	field
set_type	$ZIGLIB/std/dwarf/TAG.zig	/^pub const set_type = 0x20/;"	constant
set_v	$ZIGLIB/std/target.zig	/const set_v: V = set.ints/;"	constant
setdomainname	$ZIGLIB/std/os/linux/syscalls.zig	/setdomainname = Linux + 166/;"	field
setegid	$ZIGLIB/std/os/linux.zig	/^pub fn setegid(egid: gid_t) usize {$/;"	function
seteuid	$ZIGLIB/std/os/linux.zig	/^pub fn seteuid(euid: uid_t) usize {$/;"	function
setfsgid	$ZIGLIB/std/os/linux/syscalls.zig	/setfsgid = Linux + 139/;"	field
setfsgid32	$ZIGLIB/std/os/linux/syscalls.zig	/setfsgid32 = 216/;"	field
setfsuid	$ZIGLIB/std/os/linux/syscalls.zig	/setfsuid = Linux + 138/;"	field
setfsuid32	$ZIGLIB/std/os/linux/syscalls.zig	/setfsuid32 = 215/;"	field
setgid	$ZIGLIB/std/os/linux/syscalls.zig	/setgid = Linux + 46/;"	field
setgid32	$ZIGLIB/std/os/linux/syscalls.zig	/setgid32 = 214/;"	field
setgroups	$ZIGLIB/std/os/linux/syscalls.zig	/setgroups = Linux + 81/;"	field
setgroups32	$ZIGLIB/std/os/linux/syscalls.zig	/setgroups32 = 206/;"	field
sethostname	$ZIGLIB/std/os/linux/syscalls.zig	/sethostname = Linux + 74/;"	field
setitimer	$ZIGLIB/std/os/linux/syscalls.zig	/setitimer = Linux + 36/;"	field
setns	$ZIGLIB/std/os/linux/syscalls.zig	/setns = Linux + 344/;"	field
setpgid	$ZIGLIB/std/os/linux/syscalls.zig	/setpgid = Linux + 57/;"	field
setpriority	$ZIGLIB/std/os/linux/syscalls.zig	/setpriority = Linux + 97/;"	field
setregid	$ZIGLIB/std/os/linux/syscalls.zig	/setregid = Linux + 71/;"	field
setregid32	$ZIGLIB/std/os/linux/syscalls.zig	/setregid32 = 204/;"	field
setresgid	$ZIGLIB/std/os/linux/syscalls.zig	/setresgid = Linux + 190/;"	field
setresgid32	$ZIGLIB/std/os/linux/syscalls.zig	/setresgid32 = 210/;"	field
setresuid	$ZIGLIB/std/os/linux/syscalls.zig	/setresuid = Linux + 185/;"	field
setresuid32	$ZIGLIB/std/os/linux/syscalls.zig	/setresuid32 = 208/;"	field
setreuid	$ZIGLIB/std/os/linux/syscalls.zig	/setreuid = Linux + 70/;"	field
setreuid32	$ZIGLIB/std/os/linux/syscalls.zig	/setreuid32 = 203/;"	field
setrlimit	$ZIGLIB/std/os/linux/syscalls.zig	/setrlimit = Linux + 75/;"	field
setrlimit_sym	$ZIGLIB/std/os.zig	/const setrlimit_sym = if (builtin.os.tag == .linux and builtin.link_libc)$/;"	constant
sets_to_zero	$ZIGLIB/std/os/uefi.zig	/sets_to_zero: bool/;"	field
setsid	$ZIGLIB/std/os/linux/syscalls.zig	/setsid = Linux + 66/;"	field
setsockopt	$ZIGLIB/std/os/linux/x86.zig	/pub const setsockopt = 14/;"	constant
setspecific	$ZIGLIB/compiler_rt/emutls.zig	/fn setspecific(new: ?*ObjectArray) void {$/;"	function
settimeofday	$ZIGLIB/std/os/linux/syscalls.zig	/settimeofday = Linux + 79/;"	field
settings_dir	$ZIGLIB/std/fs/get_app_data_dir.zig	/const settings_dir = try allocator.dupeZ(u8, mem.sliceTo(dir_path_ptr, 0))/;"	constant
setuid	$ZIGLIB/std/os/linux/syscalls.zig	/setuid = Linux + 23/;"	field
setuid32	$ZIGLIB/std/os/linux/syscalls.zig	/setuid32 = 213/;"	field
setupPthreadAtforkAndFill	$ZIGLIB/std/crypto/tlcsprng.zig	/^fn setupPthreadAtforkAndFill(buffer: []u8) void {$/;"	function
setxattr	$ZIGLIB/std/os/linux/syscalls.zig	/setxattr = Linux + 224/;"	field
sf_hdtr	$ZIGLIB/std/c/freebsd.zig	/^pub const sf_hdtr = extern struct {$/;"	struct
sf_names	$ZIGLIB/std/dwarf/AT.zig	/^pub const sf_names = 0x2101/;"	constant
sgetmask	$ZIGLIB/std/os/linux/syscalls.zig	/sgetmask = Linux + 68/;"	field
sgpr_init_bug	$ZIGLIB/std/target/amdgpu.zig	/sgpr_init_bug/;"	field
sh32	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/const sh32 = @ptrCast($/;"	constant
sh64	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/const sh64 = @ptrCast($/;"	constant
sh_addr	$ZIGLIB/std/elf.zig	/sh_addr: Elf64_Addr/;"	field
sh_addralign	$ZIGLIB/std/elf.zig	/sh_addralign: Elf64_Xword/;"	field
sh_buf	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/var sh_buf: [16 * @sizeOf(elf.Elf64_Shdr)]u8 align(@alignOf(elf.Elf64_Shdr)) = undefined/;"	variable
sh_buf_i	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/var sh_buf_i: usize = 0/;"	variable
sh_entsize	$ZIGLIB/std/elf.zig	/sh_entsize: Elf64_Xword/;"	field
sh_flags	$ZIGLIB/std/elf.zig	/sh_flags: Elf64_Xword/;"	field
sh_i	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/var sh_i: u16 = 0/;"	variable
sh_info	$ZIGLIB/std/elf.zig	/sh_info: Elf64_Word/;"	field
sh_link	$ZIGLIB/std/elf.zig	/sh_link: Elf64_Word/;"	field
sh_name	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/const sh_name = mem.sliceTo(shstrtab[sh_name_off..], 0)/;"	constant
sh_name_off	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/const sh_name_off = elfInt(is_64, need_bswap, sh32.sh_name, sh64.sh_name)/;"	constant
sh_offset	$ZIGLIB/std/elf.zig	/sh_offset: Elf64_Off/;"	field
sh_read_byte_len	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/const sh_read_byte_len = try preadMin($/;"	constant
sh_reserve	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/const sh_reserve: usize = @sizeOf(elf.Elf64_Shdr) - @sizeOf(elf.Elf32_Shdr)/;"	constant
sh_size	$ZIGLIB/std/elf.zig	/sh_size: Elf64_Xword/;"	field
sh_type	$ZIGLIB/std/elf.zig	/sh_type: Elf64_Word/;"	field
sha1WithRSAEncryption	$ZIGLIB/std/crypto/Certificate.zig	/sha1WithRSAEncryption/;"	field
sha2	$ZIGLIB/std/target/arm.zig	/sha2/;"	field
sha224WithRSAEncryption	$ZIGLIB/std/crypto/Certificate.zig	/sha224WithRSAEncryption/;"	field
sha256	$ZIGLIB/std/compress/xz.zig	/sha256 = 0x0A/;"	field
sha256WithRSAEncryption	$ZIGLIB/std/crypto/Certificate.zig	/sha256WithRSAEncryption/;"	field
sha2pass	$ZIGLIB/std/crypto/bcrypt.zig	/sha2pass: [Sha512.digest_length]u8/;"	field
sha2salt	$ZIGLIB/std/crypto/bcrypt.zig	/var sha2salt: [Sha512.digest_length]u8 = undefined/;"	variable
sha3	$ZIGLIB/std/target/aarch64.zig	/sha3/;"	field
sha384WithRSAEncryption	$ZIGLIB/std/crypto/Certificate.zig	/sha384WithRSAEncryption/;"	field
sha512WithRSAEncryption	$ZIGLIB/std/crypto/Certificate.zig	/sha512WithRSAEncryption/;"	field
shader_cycles_register	$ZIGLIB/std/target/amdgpu.zig	/shader_cycles_register/;"	field
shadermodel	$ZIGLIB/std/target.zig	/shadermodel/;"	field
shadow_depth	$ZIGLIB/std/c/darwin.zig	/shadow_depth: u16/;"	field
share_access	$ZIGLIB/std/os/windows.zig	/share_access: ULONG = FILE_SHARE_WRITE | FILE_SHARE_READ | FILE_SHARE_DELETE/;"	field
share_mode	$ZIGLIB/std/c/darwin.zig	/share_mode: u8/;"	field
shared	$ZIGLIB/std/c/darwin.zig	/shared: boolean_t/;"	field
shared_count	$ZIGLIB/std/event/rwlock.zig	/^var shared_count: usize = 0/;"	variable
shared_it_count	$ZIGLIB/std/event/rwlock.zig	/^const shared_it_count = 10/;"	constant
shared_key	$ZIGLIB/std/crypto/tls/Client.zig	/var shared_key: [32]u8 = undefined/;"	variable
shared_length	$ZIGLIB/std/crypto/salsa20.zig	/pub const shared_length = XSalsa20Poly1305.key_length/;"	constant
shared_memory	$ZIGLIB/std/Build/CompileStep.zig	/^shared_memory: bool = false/;"	field
shared_pages_resident	$ZIGLIB/std/c/darwin.zig	/shared_pages_resident: u32/;"	field
shared_state	$ZIGLIB/std/event/rwlock.zig	/shared_state: State/;"	field
shared_test_data	$ZIGLIB/std/event/rwlock.zig	/^var shared_test_data = [1]i32{0} ** 10/;"	variable
shared_test_index	$ZIGLIB/std/event/rwlock.zig	/^var shared_test_index: usize = 0/;"	variable
shared_type	$ZIGLIB/std/dwarf/TAG.zig	/^pub const shared_type = 0x40/;"	constant
shared_umem_fd	$ZIGLIB/std/os/linux.zig	/shared_umem_fd: u32/;"	field
shareda	$ZIGLIB/std/crypto/pcurves/tests/secp256k1.zig	/const shareda = try dhA.mul(dhb, .Little)/;"	constant
sharedb	$ZIGLIB/std/crypto/pcurves/tests/secp256k1.zig	/const sharedb = try dhB.mulPublic(dha, .Little)/;"	constant
shave	$ZIGLIB/std/target.zig	/shave/;"	field
shdr	$ZIGLIB/std/elf.zig	/var shdr: Elf64_Shdr = undefined/;"	variable
shdrs	$ZIGLIB/std/debug.zig	/const shdrs = @ptrCast($/;"	constant
shelfCount	$ZIGLIB/std/segmented_list.zig	/fn shelfCount(box_count: usize) ShelfIndex {$/;"	function
shelfIndex	$ZIGLIB/std/segmented_list.zig	/fn shelfIndex(list_index: usize) ShelfIndex {$/;"	function
shelfSize	$ZIGLIB/std/segmented_list.zig	/fn shelfSize(shelf_index: ShelfIndex) usize {$/;"	function
shelf_index	$ZIGLIB/std/segmented_list.zig	/shelf_index: ShelfIndex/;"	field
shelf_size	$ZIGLIB/std/segmented_list.zig	/shelf_size: usize/;"	field
shentsize	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/const shentsize = elfInt(is_64, need_bswap, hdr32.e_shentsize, hdr64.e_shentsize)/;"	constant
shift	$ZIGLIB/std/os/linux.zig	/const shift = @intCast(u5, s & (usize_bits - 1))/;"	constant
shift1	$ZIGLIB/std/math/big/rational.zig	/const shift1 = @intCast(math.Log2Int(BitReprType), emin - (exp - 1))/;"	constant
shiftElementsLeft	$ZIGLIB/std/simd.zig	/^pub fn shiftElementsLeft(vec: anytype, comptime amount: VectorCount(@TypeOf(vec)), shift_in: std.meta.Child(@TypeOf(vec))) @TypeOf(vec) {$/;"	function
shiftElementsRight	$ZIGLIB/std/simd.zig	/^pub fn shiftElementsRight(vec: anytype, comptime amount: VectorCount(@TypeOf(vec)), shift_in: std.meta.Child(@TypeOf(vec))) @TypeOf(vec) {$/;"	function
shiftLeft	$ZIGLIB/std/math/big/int.zig	/pub fn shiftLeft(r: *Mutable, a: Const, shift: usize) void {$/;"	function
shiftLeftSat	$ZIGLIB/std/math/big/int.zig	/pub fn shiftLeftSat(r: *Mutable, a: Const, shift: usize, signedness: Signedness, bit_count: usize) void {$/;"	function
shiftOffsets	$ZIGLIB/std/compress/deflate/deflate_fast.zig	/fn shiftOffsets(self: *Self) void {$/;"	function
shiftRight	$ZIGLIB/std/math/big/int.zig	/pub fn shiftRight(r: *Mutable, a: Const, shift: usize) void {$/;"	function
shift_amt	$ZIGLIB/std/math/log2.zig	/var shift_amt = 1/;"	variable
shift_rhs_too_big	$ZIGLIB/std/builtin.zig	/pub const shift_rhs_too_big = "shift amount is greater than the type size"/;"	constant
shift_state_valid	$ZIGLIB/std/os/uefi/protocols/simple_text_input_ex_protocol.zig	/shift_state_valid: bool/;"	field
shifted	$ZIGLIB/std/simd.zig	/const shifted = if (hop < 0) shiftElementsLeft(acc, abs_hop << i, identity) else shiftElementsRight(acc, abs_hop << i, identity)/;"	constant
shiftmix	$ZIGLIB/std/hash/cityhash.zig	/fn shiftmix(v: u64) u64 {$/;"	function
shifts	$ZIGLIB/std/treap.zig	/const shifts = switch (@bitSizeOf(usize)) {$/;"	constant
shlExact	$ZIGLIB/std/math.zig	/^pub fn shlExact(comptime T: type, a: T, shift_amt: Log2Int(T)) !T {$/;"	function
shl_overflow	$ZIGLIB/std/builtin.zig	/pub const shl_overflow = "left shift overflowed bits"/;"	constant
shl_sat	$ZIGLIB/std/zig/Ast.zig	/shl_sat/;"	field
shmat	$ZIGLIB/std/os/linux/syscalls.zig	/shmat = Linux + 397/;"	field
shmctl	$ZIGLIB/std/os/linux/syscalls.zig	/shmctl = Linux + 396/;"	field
shmdt	$ZIGLIB/std/os/linux/syscalls.zig	/shmdt = Linux + 65/;"	field
shmget	$ZIGLIB/std/os/linux/syscalls.zig	/shmget = Linux + 395/;"	field
shnum	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/const shnum = elfInt(is_64, need_bswap, hdr32.e_shnum, hdr64.e_shnum)/;"	constant
shoff	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/var shoff = elfInt(is_64, need_bswap, hdr32.e_shoff, hdr64.e_shoff)/;"	variable
short	$ZIGLIB/std/unicode.zig	/const short = @intCast(u16, codepoint)/;"	constant
shortened_actual	$ZIGLIB/std/testing.zig	/const shortened_actual = if (actual.len >= expected_starts_with.len)$/;"	constant
shortest	$ZIGLIB/std/testing.zig	/const shortest = @min(expected.len, actual.len)/;"	constant
showMyTrace	$ZIGLIB/std/debug.zig	/^noinline fn showMyTrace() usize {$/;"	function
showWindow	$ZIGLIB/std/os/windows/user32.zig	/^pub fn showWindow(hWnd: HWND, nCmdShow: i32) bool {$/;"	function
shr_overflow	$ZIGLIB/std/builtin.zig	/pub const shr_overflow = "right shift overflowed bits"/;"	constant
shra	$ZIGLIB/std/dwarf/OP.zig	/^pub const shra = 0x26/;"	constant
shrink	$ZIGLIB/std/segmented_list.zig	/pub fn shrink(self: *Self, new_len: usize) void {$/;"	function
shrinkAndFree	$ZIGLIB/std/priority_queue.zig	/pub fn shrinkAndFree(self: *Self, new_len: usize) void {$/;"	function
shrinkAndFreeContext	$ZIGLIB/std/array_hash_map.zig	/pub fn shrinkAndFreeContext(self: *Self, allocator: Allocator, new_len: usize, ctx: Context) void {$/;"	function
shrinkCapacity	$ZIGLIB/std/segmented_list.zig	/pub fn shrinkCapacity(self: *Self, allocator: Allocator, new_capacity: usize) void {$/;"	function
shrinkRetainingCapacity	$ZIGLIB/std/segmented_list.zig	/pub fn shrinkRetainingCapacity(self: *Self, new_len: usize) void {$/;"	function
shrinkRetainingCapacityContext	$ZIGLIB/std/array_hash_map.zig	/pub fn shrinkRetainingCapacityContext(self: *Self, new_len: usize, ctx: Context) void {$/;"	function
shstk	$ZIGLIB/std/target/x86.zig	/shstk/;"	field
shstr32	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/const shstr32 = @ptrCast(*elf.Elf32_Shdr, @alignCast(@alignOf(elf.Elf32_Shdr), &sh_buf))/;"	constant
shstr64	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/const shstr64 = @ptrCast(*elf.Elf64_Shdr, @alignCast(@alignOf(elf.Elf64_Shdr), &sh_buf))/;"	constant
shstrndx	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/const shstrndx = elfInt(is_64, need_bswap, hdr32.e_shstrndx, hdr64.e_shstrndx)/;"	constant
shstrtab	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/const shstrtab = strtab_buf[0..shstrtab_read_len]/;"	constant
shstrtab_len	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/const shstrtab_len = std.math.min(shstrtab_size, strtab_buf.len)/;"	constant
shstrtab_off	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/const shstrtab_off = elfInt(is_64, need_bswap, shstr32.sh_offset, shstr64.sh_offset)/;"	constant
shstrtab_read_len	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/const shstrtab_read_len = try preadMin(file, &strtab_buf, shstrtab_off, shstrtab_len)/;"	constant
shstrtab_size	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/const shstrtab_size = elfInt(is_64, need_bswap, shstr32.sh_size, shstr64.sh_size)/;"	constant
shuffle	$ZIGLIB/std/rand.zig	/pub inline fn shuffle(r: Random, comptime T: type, buf: []T) void {$/;"	function
shuffleVectorIndex	$ZIGLIB/std/zig/c_translation.zig	/^pub fn shuffleVectorIndex(comptime this_index: c_int, comptime source_vector_len: usize) i32 {$/;"	function
shuffleWithIndex	$ZIGLIB/std/rand.zig	/pub fn shuffleWithIndex(r: Random, comptime T: type, buf: []T, comptime Index: type) void {$/;"	function
shutdown	$ZIGLIB/std/os/uefi/protocols/simple_network_protocol.zig	/pub fn shutdown(self: *const SimpleNetworkProtocol) Status {$/;"	function
shutdown_sqe	$ZIGLIB/std/os/linux/io_uring.zig	/var shutdown_sqe = try ring.shutdown(0x445445445, server, os.linux.SHUT.RD)/;"	variable
siStartInfo	$ZIGLIB/std/child_process.zig	/var siStartInfo = windows.STARTUPINFOW{$/;"	variable
si_band	$ZIGLIB/std/c/darwin.zig	/si_band: c_long/;"	field
si_boundto	$ZIGLIB/std/elf.zig	/si_boundto: Elf64_Half/;"	field
si_flags	$ZIGLIB/std/elf.zig	/si_flags: Elf64_Half/;"	field
si_scheduler	$ZIGLIB/std/target/amdgpu.zig	/si_scheduler/;"	field
sibling	$ZIGLIB/std/dwarf/AT.zig	/pub const sibling = 0x01/;"	constant
sifive_7_rv32	$ZIGLIB/std/target/riscv.zig	/pub const sifive_7_rv32 = CpuModel{$/;"	constant
sifive_7_rv64	$ZIGLIB/std/target/riscv.zig	/pub const sifive_7_rv64 = CpuModel{$/;"	constant
sifive_e20	$ZIGLIB/std/target/riscv.zig	/pub const sifive_e20 = CpuModel{$/;"	constant
sifive_e21	$ZIGLIB/std/target/riscv.zig	/pub const sifive_e21 = CpuModel{$/;"	constant
sifive_e24	$ZIGLIB/std/target/riscv.zig	/pub const sifive_e24 = CpuModel{$/;"	constant
sifive_e31	$ZIGLIB/std/target/riscv.zig	/pub const sifive_e31 = CpuModel{$/;"	constant
sifive_e34	$ZIGLIB/std/target/riscv.zig	/pub const sifive_e34 = CpuModel{$/;"	constant
sifive_e76	$ZIGLIB/std/target/riscv.zig	/pub const sifive_e76 = CpuModel{$/;"	constant
sifive_s21	$ZIGLIB/std/target/riscv.zig	/pub const sifive_s21 = CpuModel{$/;"	constant
sifive_s51	$ZIGLIB/std/target/riscv.zig	/pub const sifive_s51 = CpuModel{$/;"	constant
sifive_s54	$ZIGLIB/std/target/riscv.zig	/pub const sifive_s54 = CpuModel{$/;"	constant
sifive_s76	$ZIGLIB/std/target/riscv.zig	/pub const sifive_s76 = CpuModel{$/;"	constant
sifive_u54	$ZIGLIB/std/target/riscv.zig	/pub const sifive_u54 = CpuModel{$/;"	constant
sifive_u74	$ZIGLIB/std/target/riscv.zig	/pub const sifive_u74 = CpuModel{$/;"	constant
siflags_t	$ZIGLIB/std/os/wasi.zig	/^pub const siflags_t = u16/;"	constant
siftDown	$ZIGLIB/std/priority_queue.zig	/fn siftDown(self: *Self, start_index: usize) void {$/;"	function
siftUp	$ZIGLIB/std/priority_queue.zig	/fn siftUp(self: *Self, start_index: usize) void {$/;"	function
sig1	$ZIGLIB/std/crypto/25519/ed25519.zig	/const sig1 = try key_pair.sign(&msg1, null)/;"	constant
sig2	$ZIGLIB/std/crypto/ecdsa.zig	/const sig2 = try kp.sign(msg, null)/;"	constant
sig_algo	$ZIGLIB/std/crypto/Certificate.zig	/const sig_algo = try der.Element.parse(cert_bytes, tbs_certificate.slice.end)/;"	constant
sig_ans	$ZIGLIB/std/crypto/ecdsa.zig	/const sig_ans = try Scheme.Signature.fromDer(&sig_ans_bytes)/;"	constant
sig_ans_bytes	$ZIGLIB/std/crypto/ecdsa.zig	/const sig_ans_bytes = [_]u8{$/;"	constant
sig_atomic_t	$ZIGLIB/std/c/windows.zig	/^pub const sig_atomic_t = c_int/;"	constant
sig_bits	$ZIGLIB/compiler_rt/float_to_int.zig	/const sig_bits = math.floatMantissaBits(F)/;"	constant
sig_bytes	$ZIGLIB/std/crypto/25519/ed25519.zig	/var sig_bytes: [64]u8 = undefined/;"	variable
sig_der	$ZIGLIB/std/crypto/ecdsa.zig	/const sig_der = try fmt.hexToBytes(&sig_der_, vector.sig)/;"	constant
sig_der_	$ZIGLIB/std/crypto/ecdsa.zig	/var sig_der_: [152]u8 = undefined/;"	variable
sig_elem	$ZIGLIB/std/crypto/Certificate.zig	/const sig_elem = try der.Element.parse(cert_bytes, sig_algo.slice.end)/;"	constant
sig_hex	$ZIGLIB/std/crypto/25519/ed25519.zig	/sig_hex: *const [128:0]u8/;"	field
sig_len	$ZIGLIB/std/crypto/tls/Client.zig	/const sig_len = hsd.decode(u16)/;"	constant
sig_mask	$ZIGLIB/compiler_rt/float_to_int.zig	/const sig_mask = (@as(rep_t, 1) << sig_bits) - 1/;"	constant
sig_named_curve	$ZIGLIB/std/crypto/Certificate.zig	/const sig_named_curve = switch (pub_key_algo) {$/;"	constant
sig_t	$ZIGLIB/std/c/dragonfly.zig	/^pub const sig_t = [*c]fn (c_int) callconv(.C) void/;"	constant
sigabrtmask	$ZIGLIB/std/os.zig	/const sigabrtmask: linux.sigset_t = [_]u32{0} ** 31 ++ [_]u32{1 << (SIG.ABRT - 1)}/;"	constant
sigact	$ZIGLIB/std/os.zig	/const sigact = Sigaction{$/;"	constant
sigaction	$ZIGLIB/std/os/linux/syscalls.zig	/sigaction = Linux + 67/;"	field
sigaction_fn	$ZIGLIB/std/os/linux.zig	/pub const sigaction_fn = *const fn (c_int, *const siginfo_t, ?*const anyopaque) callconv(.C) void/;"	constant
sigaddset	$ZIGLIB/std/os/linux.zig	/^pub fn sigaddset(set: *sigset_t, sig: u6) void {$/;"	function
sigaltstack	$ZIGLIB/std/os/linux/syscalls.zig	/sigaltstack = Linux + 206/;"	field
sigchld	$ZIGLIB/std/os/linux.zig	/sigchld: extern struct {$/;"	field
sigcontext	$ZIGLIB/std/os/linux/x86_64.zig	/^pub const sigcontext = extern struct {$/;"	struct
sigfault	$ZIGLIB/std/os/linux.zig	/sigfault: extern struct {$/;"	field
siginfo_fields_union	$ZIGLIB/std/os/linux.zig	/^const siginfo_fields_union = extern union {$/;"	union
siginfo_fpu_t	$ZIGLIB/std/os/linux/sparc64.zig	/^pub const siginfo_fpu_t = extern struct {$/;"	struct
siginfo_t	$ZIGLIB/std/os/linux.zig	/^pub const siginfo_t = if (is_mips)$/;"	constant
sigismember	$ZIGLIB/std/os/linux.zig	/^pub fn sigismember(set: *const sigset_t, sig: u6) bool {$/;"	function
sigma	$ZIGLIB/std/crypto/blake2.zig	/const sigma = [12][16]u8{$/;"	constant
sigmask	$ZIGLIB/std/os/linux/x86_64.zig	/sigmask: sigset_t/;"	field
sign	$ZIGLIB/std/packed_int_array.zig	/const sign: std.builtin.Signedness = if (bits % 2 == 0) .signed else .unsigned/;"	constant
signA	$ZIGLIB/compiler_rt/fmod.zig	/const signA = aRep & signBit/;"	constant
signBit	$ZIGLIB/std/math/ilogb.zig	/const signBit = (@as(Z, 1) << (significandBits + exponentBits))/;"	constant
signWithNonce	$ZIGLIB/std/crypto/25519/ed25519.zig	/fn signWithNonce(public_key: PublicKey, msg: []const u8, scalar: CompressedScalar, nonce: CompressedScalar) (IdentityElementError || NonCanonicalError || KeyMismatchError || WeakPublicKeyError)!Signature {$/;"	function
sign_bit	$ZIGLIB/std/math/ldexp.zig	/const sign_bit = repr & (1 << (exponent_bits + mantissa_bits))/;"	constant
sign_bit_mask	$ZIGLIB/std/math/copysign.zig	/const sign_bit_mask = @as(TBits, 1) << (@bitSizeOf(T) - 1)/;"	constant
sign_ext	$ZIGLIB/std/target/wasm.zig	/sign_ext/;"	field
signal	$ZIGLIB/std/os/linux/syscalls.zig	/signal = Linux + 48/;"	field
signalEvent	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/signalEvent: *const fn (event: Event) callconv(.C) Status/;"	field
signal_mask	$ZIGLIB/std/Thread/Condition.zig	/const signal_mask = 0xffff << 16/;"	constant
signal_t	$ZIGLIB/std/os/wasi.zig	/^pub const signal_t = u8/;"	constant
signal_test	$ZIGLIB/std/Thread/Condition.zig	/var signal_test = SignalTest{}/;"	variable
signalfd	$ZIGLIB/std/os/linux/syscalls.zig	/signalfd = Linux + 317/;"	field
signalfd4	$ZIGLIB/std/os/linux/syscalls.zig	/signalfd4 = Linux + 324/;"	field
signalfd_siginfo	$ZIGLIB/std/os/linux.zig	/^pub const signalfd_siginfo = extern struct {$/;"	struct
signals	$ZIGLIB/std/Thread/Condition.zig	/const signals = (state & signal_mask) \/ one_signal/;"	constant
signature	$ZIGLIB/std/pdb.zig	/const signature = try reader.readIntLittle(u32)/;"	constant
signature_algorithm	$ZIGLIB/std/crypto/Certificate.zig	/signature_algorithm: Algorithm/;"	field
signature_algorithms	$ZIGLIB/std/crypto/tls.zig	/signature_algorithms = 13/;"	field
signature_algorithms_cert	$ZIGLIB/std/crypto/tls.zig	/signature_algorithms_cert = 50/;"	field
signature_batch	$ZIGLIB/std/crypto/25519/ed25519.zig	/var signature_batch = [_]Ed25519.BatchElement{$/;"	variable
signature_slice	$ZIGLIB/std/crypto/Certificate.zig	/signature_slice: Slice/;"	field
signature_type	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/signature_type: SignatureType/;"	field
signbit	$ZIGLIB/std/math/signbit.zig	/^pub fn signbit(x: anytype) bool {$/;"	function
signed	$ZIGLIB/std/os/linux/bpf/btf.zig	/signed = 1 << 0/;"	field
signedRemainder	$ZIGLIB/std/zig/c_translation.zig	/^pub fn signedRemainder(numerator: anytype, denominator: anytype) @TypeOf(numerator, denominator) {$/;"	function
signed_certificate_timestamp	$ZIGLIB/std/crypto/tls.zig	/signed_certificate_timestamp = 18/;"	field
signed_char	$ZIGLIB/std/dwarf/ATE.zig	/^pub const signed_char = 0x6/;"	constant
signed_decimal	$ZIGLIB/std/zig/c_translation.zig	/const signed_decimal = promoteIntLiteral(c_int, math.maxInt(c_int) + 1, .decimal)/;"	constant
signed_fixed	$ZIGLIB/std/dwarf/ATE.zig	/^pub const signed_fixed = 0xd/;"	constant
signed_hex	$ZIGLIB/std/zig/c_translation.zig	/const signed_hex = promoteIntLiteral(c_int, math.maxInt(c_int) + 1, .hexadecimal)/;"	constant
signed_integer_size	$ZIGLIB/std/simd.zig	/const signed_integer_size = suggestVectorSizeForCpu(i32, cpu).?/;"	constant
signed_oct_hex	$ZIGLIB/std/zig/c_translation.zig	/const signed_oct_hex = [_]type{ c_int, c_uint, c_long, c_ulong, c_longlong, c_ulonglong }/;"	constant
signed_offset	$ZIGLIB/std/os.zig	/const signed_offset = @bitCast(i64, in_offset)/;"	constant
signed_r	$ZIGLIB/std/os/linux.zig	/const signed_r = @bitCast(isize, r)/;"	constant
signedness	$ZIGLIB/std/math.zig	/const signedness: std.builtin.Signedness = if (from < 0) .signed else .unsigned/;"	constant
signer	$ZIGLIB/std/crypto/ecdsa.zig	/pub fn signer(key_pair: KeyPair, noise: ?[noise_length]u8) !Signer {$/;"	function
significand	$ZIGLIB/std/os/linux/x86_64.zig	/significand: [4]u16/;"	field
significandBits	$ZIGLIB/std/math/ilogb.zig	/const significandBits = math.floatMantissaBits(T)/;"	constant
significandMask	$ZIGLIB/compiler_rt/mulf3.zig	/const significandMask = (@as(Z, 1) << significandBits) - 1/;"	constant
signmask	$ZIGLIB/std/math/big/int.zig	/const signmask = @as(Limb, 1) << bit/;"	constant
signo	$ZIGLIB/std/os/linux.zig	/signo: u32/;"	field
sigpending	$ZIGLIB/std/os/linux/syscalls.zig	/sigpending = Linux + 73/;"	field
sigpoll	$ZIGLIB/std/os/linux.zig	/sigpoll: extern struct {$/;"	field
sigprocmask	$ZIGLIB/std/os/linux/syscalls.zig	/sigprocmask = Linux + 126/;"	field
sigreturn	$ZIGLIB/std/os/linux/syscalls.zig	/sigreturn = Linux + 119/;"	field
sigset_t	$ZIGLIB/std/os/linux.zig	/^pub const sigset_t = [1024 \/ 32]u32/;"	constant
sigsuspend	$ZIGLIB/std/os/linux/syscalls.zig	/sigsuspend = Linux + 72/;"	field
sigsys	$ZIGLIB/std/os/linux.zig	/sigsys: extern struct {$/;"	field
sigval	$ZIGLIB/std/os/linux.zig	/^pub const sigval = extern union {$/;"	union
sigval_t	$ZIGLIB/std/c/solaris.zig	/^pub const sigval_t = extern union {$/;"	union
silvermont	$ZIGLIB/std/target/x86.zig	/pub const silvermont = CpuModel{$/;"	constant
simd128	$ZIGLIB/std/target/wasm.zig	/simd128/;"	field
simdOpcode	$ZIGLIB/std/wasm.zig	/^pub fn simdOpcode(op: SimdOpcode) u32 {$/;"	function
simpleVarDecl	$ZIGLIB/std/zig/Ast.zig	/^pub fn simpleVarDecl(tree: Ast, node: Node.Index) full.VarDecl {$/;"	function
simple_allocator	$ZIGLIB/compiler_rt/emutls.zig	/^const simple_allocator = struct {$/;"	struct
simple_fonsts	$ZIGLIB/std/os/uefi/protocols/hii.zig	/pub const simple_fonsts: u8 = 0x7/;"	constant
simple_var_decl	$ZIGLIB/std/zig/Ast.zig	/simple_var_decl/;"	field
simulator	$ZIGLIB/std/target.zig	/simulator/;"	field
since	$ZIGLIB/std/time.zig	/pub fn since(self: Instant, earlier: Instant) u64 {$/;"	function
sincos	$ZIGLIB/compiler_rt/sincos.zig	/^pub fn sincos(x: f64, r_sin: *f64, r_cos: *f64) callconv(.C) void {$/;"	function
sincos_generic	$ZIGLIB/compiler_rt/sincos.zig	/^inline fn sincos_generic(comptime F: type, x: F, r_sin: *F, r_cos: *F) void {$/;"	function
sincosf	$ZIGLIB/compiler_rt/sincos.zig	/^pub fn sincosf(x: f32, r_sin: *f32, r_cos: *f32) callconv(.C) void {$/;"	function
sincosl	$ZIGLIB/compiler_rt/sincos.zig	/^pub fn sincosl(x: c_longdouble, r_sin: *c_longdouble, r_cos: *c_longdouble) callconv(.C) void {$/;"	function
sincosq	$ZIGLIB/compiler_rt/sincos.zig	/^pub fn sincosq(x: f128, r_sin: *f128, r_cos: *f128) callconv(.C) void {$/;"	function
sinf	$ZIGLIB/compiler_rt/sin.zig	/^pub fn sinf(x: f32) callconv(.C) f32 {$/;"	function
single_float	$ZIGLIB/std/target/mips.zig	/single_float/;"	field
single_int_bits	$ZIGLIB/compiler_rt/udivmod.zig	/const single_int_bits = @divExact(double_int_bits, 2)/;"	constant
single_line	$ZIGLIB/std/zig/render.zig	/var single_line = true/;"	variable
single_quotes	$ZIGLIB/std/process.zig	/single_quotes: bool = false/;"	field
single_threaded	$ZIGLIB/std/event/loop.zig	/single_threaded/;"	field
sinh	$ZIGLIB/std/math/sinh.zig	/^pub fn sinh(x: anytype) @TypeOf(x) {$/;"	function
sinh32	$ZIGLIB/std/math/sinh.zig	/^fn sinh32(x: f32) f32 {$/;"	function
sinh64	$ZIGLIB/std/math/sinh.zig	/^fn sinh64(x: f64) f64 {$/;"	function
sinl	$ZIGLIB/compiler_rt/sin.zig	/^pub fn sinl(x: c_longdouble) callconv(.C) c_longdouble {$/;"	function
sinq	$ZIGLIB/compiler_rt/sin.zig	/^pub fn sinq(x: f128) callconv(.C) f128 {$/;"	function
sipRound	$ZIGLIB/std/crypto/siphash.zig	/fn sipRound(d: *Self) void {$/;"	function
siphash	$ZIGLIB/std/crypto/siphash.zig	/var siphash = Siphash.init(key)/;"	variable
sival_int	$ZIGLIB/std/c/dragonfly.zig	/sival_int: c_int/;"	field
sival_ptr	$ZIGLIB/std/c/dragonfly.zig	/sival_ptr: ?*anyopaque/;"	field
size	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/size: u64/;"	field
sizeInBaseUpperBound	$ZIGLIB/std/math/big/int.zig	/pub fn sizeInBaseUpperBound(self: Managed, base: usize) usize {$/;"	function
sizeInBytes	$ZIGLIB/std/meta/trailer_flags.zig	/pub fn sizeInBytes(self: Self) usize {$/;"	function
sizeOf	$ZIGLIB/std/coff.zig	/pub fn sizeOf() usize {$/;"	function
size_byte	$ZIGLIB/std/crypto/Certificate.zig	/const size_byte = bytes[i]/;"	constant
size_class	$ZIGLIB/std/heap/general_purpose_allocator.zig	/var size_class: usize = size_class_hint/;"	variable
size_class_count	$ZIGLIB/std/heap/WasmAllocator.zig	/^const size_class_count = math.log2(bigpage_size) - min_class/;"	constant
size_class_hint	$ZIGLIB/std/heap/general_purpose_allocator.zig	/const size_class_hint = math.ceilPowerOfTwoAssert(usize, aligned_size)/;"	constant
size_diff	$ZIGLIB/std/json.zig	/size_diff: isize/;"	field
size_index	$ZIGLIB/std/multi_array_list.zig	/size_index: usize/;"	field
size_of_code	$ZIGLIB/std/coff.zig	/size_of_code: u32/;"	field
size_of_data	$ZIGLIB/std/coff.zig	/size_of_data: u32/;"	field
size_of_edid	$ZIGLIB/std/os/uefi/protocols/edid_discovered_protocol.zig	/size_of_edid: u32/;"	field
size_of_headers	$ZIGLIB/std/coff.zig	/size_of_headers: u32/;"	field
size_of_heap_commit	$ZIGLIB/std/coff.zig	/size_of_heap_commit: u64/;"	field
size_of_heap_reserve	$ZIGLIB/std/coff.zig	/size_of_heap_reserve: u64/;"	field
size_of_image	$ZIGLIB/std/coff.zig	/size_of_image: u32/;"	field
size_of_info	$ZIGLIB/std/os/uefi/protocols/graphics_output_protocol.zig	/size_of_info: usize/;"	field
size_of_initialized_data	$ZIGLIB/std/coff.zig	/size_of_initialized_data: u32/;"	field
size_of_optional_header	$ZIGLIB/std/coff.zig	/size_of_optional_header: u16/;"	field
size_of_raw_data	$ZIGLIB/std/coff.zig	/size_of_raw_data: u32/;"	field
size_of_stack_commit	$ZIGLIB/std/coff.zig	/size_of_stack_commit: u64/;"	field
size_of_stack_reserve	$ZIGLIB/std/coff.zig	/size_of_stack_reserve: u64/;"	field
size_of_uninitialized_data	$ZIGLIB/std/coff.zig	/size_of_uninitialized_data: u32/;"	field
size_read	$ZIGLIB/std/Build/CompileStep.zig	/const size_read = try file.read(vcpkg_path)/;"	constant
size_sqes	$ZIGLIB/std/os/linux/io_uring.zig	/const size_sqes = p.sq_entries * @sizeOf(linux.io_uring_sqe)/;"	constant
size_t	$ZIGLIB/std/os.zig	/const size_t = std.meta.Int(.unsigned, @typeInfo(usize).Int.bits - 1)/;"	constant
size_to_read	$ZIGLIB/std/pdb.zig	/const size_to_read = math.min(self.block_size - offset, rem_buffer.len)/;"	constant
size_type	$ZIGLIB/std/os/linux/bpf/btf.zig	/size_type: extern union { size: u32, typ: u32 }/;"	field
sizeof	$ZIGLIB/std/zig/c_translation.zig	/^pub fn sizeof(target: anytype) usize {$/;"	function
sizeofcmds	$ZIGLIB/std/macho.zig	/sizeofcmds: u32 = 0/;"	field
sizes	$ZIGLIB/std/multi_array_list.zig	/const sizes = blk: {$/;"	constant
sizes_bytes	$ZIGLIB/std/multi_array_list.zig	/var sizes_bytes: [fields.len]usize = undefined/;"	variable
sizes_vector	$ZIGLIB/std/multi_array_list.zig	/const sizes_vector: @Vector(sizes.bytes.len, usize) = sizes.bytes/;"	constant
sk_ancestor_cgroup_id	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const sk_ancestor_cgroup_id = @intToPtr(fn (sk: *kern.BpfSock, ancestor_level: c_long) u64, 129)/;"	constant
sk_assign	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const sk_assign = @intToPtr(fn (skb: *kern.SkBuff, sk: *kern.Sock, flags: u64) c_long, 124)/;"	constant
sk_bytes	$ZIGLIB/std/crypto/ecdsa.zig	/const sk_bytes = [_]u8{$/;"	constant
sk_cgroup_id	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const sk_cgroup_id = @intToPtr(fn (sk: *kern.BpfSock) u64, 128)/;"	constant
sk_fullsock	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const sk_fullsock = @intToPtr(fn (sk: *kern.Sock) ?*SkFullSock, 95)/;"	constant
sk_lookup	$ZIGLIB/std/os/linux/bpf.zig	/sk_lookup/;"	field
sk_lookup_tcp	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const sk_lookup_tcp = @intToPtr(fn (ctx: ?*anyopaque, tuple: *kern.SockTuple, tuple_size: u32, netns: u64, flags: u64) ?*kern.Sock, 84)/;"	constant
sk_lookup_udp	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const sk_lookup_udp = @intToPtr(fn (ctx: ?*anyopaque, tuple: *kern.SockTuple, tuple_size: u32, netns: u64, flags: u64) ?*kern.Sock, 85)/;"	constant
sk_msg	$ZIGLIB/std/os/linux/bpf.zig	/sk_msg/;"	field
sk_msg_verdict	$ZIGLIB/std/os/linux/bpf.zig	/sk_msg_verdict/;"	field
sk_redirect_hash	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const sk_redirect_hash = @intToPtr(fn (skb: *kern.SkBuff, map: *const kern.MapDef, key: ?*anyopaque, flags: u64) c_long, 72)/;"	constant
sk_redirect_map	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const sk_redirect_map = @intToPtr(fn (skb: *kern.SkBuff, map: *const kern.MapDef, key: u32, flags: u64) c_long, 52)/;"	constant
sk_release	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const sk_release = @intToPtr(fn (sock: *kern.Sock) c_long, 86)/;"	constant
sk_reuseport	$ZIGLIB/std/os/linux/bpf.zig	/sk_reuseport/;"	field
sk_select_reuseport	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const sk_select_reuseport = @intToPtr(fn (reuse: *kern.SkReusePortMd, map: *const kern.MapDef, key: ?*anyopaque, flags: u64) c_long, 82)/;"	constant
sk_skb	$ZIGLIB/std/os/linux/bpf.zig	/sk_skb/;"	field
sk_skb_stream_parser	$ZIGLIB/std/os/linux/bpf.zig	/sk_skb_stream_parser/;"	field
sk_skb_stream_verdict	$ZIGLIB/std/os/linux/bpf.zig	/sk_skb_stream_verdict/;"	field
sk_storage	$ZIGLIB/std/os/linux/bpf.zig	/sk_storage/;"	field
sk_storage_delete	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const sk_storage_delete = @intToPtr(fn (map: *const kern.MapDef, sk: *kern.Sock) c_long, 108)/;"	constant
sk_storage_get	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const sk_storage_get = @intToPtr(fn (map: *const kern.MapDef, sk: *kern.Sock, value: ?*anyopaque, flags: u64) ?*anyopaque, 107)/;"	constant
skb_adjust_room	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const skb_adjust_room = @intToPtr(fn (skb: *kern.SkBuff, len_diff: i32, mode: u32, flags: u64) c_long, 50)/;"	constant
skb_ancestor_cgroup_id	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const skb_ancestor_cgroup_id = @intToPtr(fn (skb: *kern.SkBuff, ancestor_level: c_int) u64, 83)/;"	constant
skb_cgroup_id	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const skb_cgroup_id = @intToPtr(fn (skb: *kern.SkBuff) u64, 79)/;"	constant
skb_change_head	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const skb_change_head = @intToPtr(fn (skb: *kern.SkBuff, len: u32, flags: u64) c_long, 43)/;"	constant
skb_change_proto	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const skb_change_proto = @intToPtr(fn (skb: *kern.SkBuff, proto: u16, flags: u64) c_long, 31)/;"	constant
skb_change_tail	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const skb_change_tail = @intToPtr(fn (skb: *kern.SkBuff, len: u32, flags: u64) c_long, 38)/;"	constant
skb_change_type	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const skb_change_type = @intToPtr(fn (skb: *kern.SkBuff, skb_type: u32) c_long, 32)/;"	constant
skb_ecn_set_ce	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const skb_ecn_set_ce = @intToPtr(fn (skb: *kern.SkBuff) c_long, 97)/;"	constant
skb_get_tunnel_key	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const skb_get_tunnel_key = @intToPtr(fn (skb: *kern.SkBuff, key: *kern.TunnelKey, size: u32, flags: u64) c_long, 20)/;"	constant
skb_get_tunnel_opt	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const skb_get_tunnel_opt = @intToPtr(fn (skb: *kern.SkBuff, opt: ?*anyopaque, size: u32) c_long, 29)/;"	constant
skb_get_xfrm_state	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const skb_get_xfrm_state = @intToPtr(fn (skb: *kern.SkBuff, index: u32, xfrm_state: *kern.XfrmState, size: u32, flags: u64) c_long, 66)/;"	constant
skb_load_bytes	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const skb_load_bytes = @intToPtr(fn (skb: ?*anyopaque, offset: u32, to: ?*anyopaque, len: u32) c_long, 26)/;"	constant
skb_load_bytes_relative	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const skb_load_bytes_relative = @intToPtr(fn (skb: ?*const anyopaque, offset: u32, to: ?*anyopaque, len: u32, start_header: u32) c_long, 68)/;"	constant
skb_output	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const skb_output = @intToPtr(fn (ctx: ?*anyopaque, map: *const kern.MapDef, flags: u64, data: ?*anyopaque, size: u64) c_long, 111)/;"	constant
skb_pull_data	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const skb_pull_data = @intToPtr(fn (skb: *kern.SkBuff, len: u32) c_long, 39)/;"	constant
skb_set_tunnel_key	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const skb_set_tunnel_key = @intToPtr(fn (skb: *kern.SkBuff, key: *kern.TunnelKey, size: u32, flags: u64) c_long, 21)/;"	constant
skb_set_tunnel_opt	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const skb_set_tunnel_opt = @intToPtr(fn (skb: *kern.SkBuff, opt: ?*anyopaque, size: u32) c_long, 30)/;"	constant
skb_store_bytes	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const skb_store_bytes = @intToPtr(fn (skb: *kern.SkBuff, offset: u32, from: ?*const anyopaque, len: u32, flags: u64) c_long, 9)/;"	constant
skb_under_cgroup	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const skb_under_cgroup = @intToPtr(fn (skb: *kern.SkBuff, map: ?*const anyopaque, index: u32) c_long, 33)/;"	constant
skb_vlan_pop	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const skb_vlan_pop = @intToPtr(fn (skb: *kern.SkBuff) c_long, 19)/;"	constant
skb_vlan_push	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const skb_vlan_push = @intToPtr(fn (skb: *kern.SkBuff, vlan_proto: u16, vlan_tci: u16) c_long, 18)/;"	constant
skc_lookup_tcp	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const skc_lookup_tcp = @intToPtr(fn (ctx: ?*anyopaque, tuple: *kern.SockTuple, tuple_size: u32, netns: u64, flags: u64) ?*kern.Sock, 99)/;"	constant
skc_to_tcp6_sock	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const skc_to_tcp6_sock = @intToPtr(fn (sk: ?*anyopaque) ?*kern.Tcp6Sock, 136)/;"	constant
skc_to_tcp_request_sock	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const skc_to_tcp_request_sock = @intToPtr(fn (sk: ?*anyopaque) ?*kern.TcpRequestSock, 139)/;"	constant
skc_to_tcp_sock	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const skc_to_tcp_sock = @intToPtr(fn (sk: ?*anyopaque) ?*kern.TcpSock, 137)/;"	constant
skc_to_tcp_timewait_sock	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const skc_to_tcp_timewait_sock = @intToPtr(fn (sk: ?*anyopaque) ?*kern.TcpTimewaitSock, 138)/;"	constant
skc_to_udp6_sock	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const skc_to_udp6_sock = @intToPtr(fn (sk: ?*anyopaque) ?*kern.Udp6Sock, 140)/;"	constant
skeleton	$ZIGLIB/std/dwarf.zig	/pub const skeleton = 0x04/;"	constant
skeleton_unit	$ZIGLIB/std/dwarf/TAG.zig	/^pub const skeleton_unit = 0x4a/;"	constant
skip	$ZIGLIB/std/zig/render.zig	/skip/;"	field
skipBytes	$ZIGLIB/std/io/reader.zig	/pub fn skipBytes(self: Self, num_bytes: u64, comptime options: SkipBytesOptions) !void {$/;"	function
skipChars	$ZIGLIB/std/fmt/parse_float/FloatStream.zig	/^pub fn skipChars(self: *FloatStream, c: u8) void {$/;"	function
skipChars2	$ZIGLIB/std/fmt/parse_float/FloatStream.zig	/^pub fn skipChars2(self: *FloatStream, c1: u8, c2: u8) void {$/;"	function
skipUntilDelimiterOrEof	$ZIGLIB/std/io/reader.zig	/pub fn skipUntilDelimiterOrEof(self: Self, delimiter: u8) !void {$/;"	function
skipUntilTag	$ZIGLIB/std/zig/system/darwin/macos.zig	/fn skipUntilTag(self: *@This(), kind: Tag.Kind, name: []const u8) !void {$/;"	function
skipValue	$ZIGLIB/std/json.zig	/^fn skipValue(tokens: *TokenStream) SkipValueError!void {$/;"	function
skipWhitespace	$ZIGLIB/std/process.zig	/fn skipWhitespace(self: *Self) bool {$/;"	function
skip_len	$ZIGLIB/std/pdb.zig	/var skip_len: usize = undefined/;"	variable
skip_never	$ZIGLIB/std/compress/deflate/compressor.zig	/^const skip_never = math.maxInt(u32)/;"	constant
skip_table	$ZIGLIB/std/mem.zig	/var skip_table: [256]usize = undefined/;"	variable
skip_zero_fileno	$ZIGLIB/std/fs.zig	/const skip_zero_fileno = switch (builtin.os.tag) {$/;"	constant
skipv	$ZIGLIB/std/tz.zig	/const skipv = legacy_header.counts.timecnt * 5 + legacy_header.counts.typecnt * 6 + legacy_header.counts.charcnt + legacy_header.counts.leapcnt * 8 + legacy_header.counts.isstdcnt + legacy_header.counts.isutcnt/;"	constant
skylake	$ZIGLIB/std/target/x86.zig	/pub const skylake = CpuModel{$/;"	constant
skylake_avx512	$ZIGLIB/std/target/x86.zig	/pub const skylake_avx512 = CpuModel{$/;"	constant
sl_copy	$ZIGLIB/std/net.zig	/var sl_copy = sl/;"	variable
slab	$ZIGLIB/std/fmt/errol/enum3.zig	/^fn slab(str: []const u8, exp: i32) Slab {$/;"	function
slash	$ZIGLIB/std/zig/tokenizer.zig	/slash/;"	field
slash_equal	$ZIGLIB/std/zig/tokenizer.zig	/slash_equal/;"	field
slave	$ZIGLIB/std/os/linux.zig	/slave: [IFNAMESIZE - 1:0]u8/;"	field
slave_master	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/slave_master: Role/;"	field
sleep	$ZIGLIB/std/time.zig	/^pub fn sleep(nanoseconds: u64) void {$/;"	function
sleepALittle	$ZIGLIB/std/event/group.zig	/^fn sleepALittle(count: *usize) callconv(.Async) void {$/;"	function
sleep_a_little_frame	$ZIGLIB/std/event/group.zig	/var sleep_a_little_frame = async sleepALittle(&count)/;"	variable
sleep_count	$ZIGLIB/std/event/loop.zig	/var sleep_count: usize = 0/;"	variable
sleep_time	$ZIGLIB/std/c/darwin.zig	/sleep_time: integer_t/;"	field
sleep_timer	$ZIGLIB/std/Thread/Futex.zig	/var sleep_timer: std.time.Timer = undefined/;"	variable
slice	$ZIGLIB/std/zig/render.zig	/const slice = tree.tokenSlice(builtin_token)/;"	constant
slice0	$ZIGLIB/std/heap.zig	/var slice0 = try allocator.alloc(u8, 5)/;"	variable
slice1	$ZIGLIB/std/heap/general_purpose_allocator.zig	/var slice1 = try allocator.alloc(u8, page_size * 2 - 20)/;"	variable
slice2	$ZIGLIB/std/heap/general_purpose_allocator.zig	/const slice2 = try allocator.alloc(u8, 3000)/;"	constant
sliceAsBytes	$ZIGLIB/std/mem.zig	/^pub fn sliceAsBytes(slice: anytype) SliceAsBytesReturnType(@TypeOf(slice)) {$/;"	function
sliceCast	$ZIGLIB/std/packed_int_array.zig	/pub fn sliceCast(self: Self, comptime NewInt: type) PackedIntSliceEndian(NewInt, endian) {$/;"	function
sliceCastEndian	$ZIGLIB/std/packed_int_array.zig	/pub fn sliceCastEndian(self: Self, comptime NewInt: type, comptime new_endian: Endian) PackedIntSliceEndian(NewInt, new_endian) {$/;"	function
sliceContainsPtr	$ZIGLIB/std/heap.zig	/^fn sliceContainsPtr(container: []u8, ptr: [*]u8) bool {$/;"	function
sliceContainsSlice	$ZIGLIB/std/heap.zig	/^fn sliceContainsSlice(container: []u8, slice: []u8) bool {$/;"	function
sliceOpen	$ZIGLIB/std/zig/Ast.zig	/^pub fn sliceOpen(tree: Ast, node: Node.Index) full.Slice {$/;"	function
sliceSentinel	$ZIGLIB/std/zig/Ast.zig	/^pub fn sliceSentinel(tree: Ast, node: Node.Index) full.Slice {$/;"	function
sliceTo	$ZIGLIB/std/mem.zig	/^pub fn sliceTo(ptr: anytype, comptime end: meta.Elem(@TypeOf(ptr))) SliceTo(@TypeOf(ptr), end) {$/;"	function
sliceToPrefixedFileW	$ZIGLIB/std/os/windows.zig	/^pub fn sliceToPrefixedFileW(s: []const u8) !PathSpace {$/;"	function
slice_length_bytes	$ZIGLIB/std/mem.zig	/const slice_length_bytes = aligned_bytes.len - (aligned_bytes.len % @sizeOf(Element))/;"	constant
slice_list	$ZIGLIB/std/process.zig	/var slice_list = std.ArrayList(usize).init(allocator)/;"	variable
slice_list_bytes	$ZIGLIB/std/process.zig	/const slice_list_bytes = try math.mul(usize, @sizeOf([]u8), slice_sizes.len)/;"	constant
slice_open	$ZIGLIB/std/zig/Ast.zig	/slice_open/;"	field
slice_sentinel	$ZIGLIB/std/zig/Ast.zig	/slice_sentinel/;"	field
slice_sizes	$ZIGLIB/std/process.zig	/const slice_sizes = slice_list.items/;"	constant
slice_stream	$ZIGLIB/std/json/write_stream.zig	/var slice_stream = std.io.fixedBufferStream(&out_buf)/;"	variable
sliced	$ZIGLIB/std/zig/Ast.zig	/sliced: Node.Index/;"	field
sliced_items	$ZIGLIB/std/sort.zig	/const sliced_items = items[range.start..]/;"	constant
slices	$ZIGLIB/std/multi_array_list.zig	/const slices = self.slice()/;"	constant
slide	$ZIGLIB/std/mem.zig	/var slide: usize = 0/;"	variable
slot	$ZIGLIB/std/crypto/pcurves/secp256k1.zig	/const slot = e[pos]/;"	constant
slot1	$ZIGLIB/std/crypto/pcurves/secp256k1.zig	/const slot1 = e1[pos]/;"	constant
slot2	$ZIGLIB/std/crypto/pcurves/secp256k1.zig	/const slot2 = e2[pos]/;"	constant
slot_count	$ZIGLIB/std/heap/general_purpose_allocator.zig	/const slot_count = @divExact(page_size, size_class)/;"	constant
slot_data	$ZIGLIB/std/array_hash_map.zig	/var slot_data = indexes[slot]/;"	variable
slot_free	$ZIGLIB/std/hash_map.zig	/const slot_free = @bitCast(u8, Metadata{ .fingerprint = free })/;"	constant
slot_index	$ZIGLIB/std/heap/general_purpose_allocator.zig	/const slot_index = bucket.alloc_cursor/;"	constant
slot_size	$ZIGLIB/std/heap/WasmAllocator.zig	/const slot_size = math.ceilPowerOfTwoAssert(usize, actual_len)/;"	constant
slot_size_bytes	$ZIGLIB/std/heap/WasmAllocator.zig	/const slot_size_bytes = pow2_pages * bigpage_size/;"	constant
slot_tombstone	$ZIGLIB/std/hash_map.zig	/const slot_tombstone = @bitCast(u8, Metadata{ .fingerprint = tombstone })/;"	constant
slots	$ZIGLIB/compiler_rt/emutls.zig	/slots: []?ObjectPointer/;"	field
slow_3ops_lea	$ZIGLIB/std/target/x86.zig	/slow_3ops_lea/;"	field
slow_fp_brcc	$ZIGLIB/std/target/arm.zig	/slow_fp_brcc/;"	field
slow_incdec	$ZIGLIB/std/target/x86.zig	/slow_incdec/;"	field
slow_lea	$ZIGLIB/std/target/x86.zig	/slow_lea/;"	field
slow_load_D_subreg	$ZIGLIB/std/target/arm.zig	/slow_load_D_subreg/;"	field
slow_misaligned_128store	$ZIGLIB/std/target/aarch64.zig	/slow_misaligned_128store/;"	field
slow_odd_reg	$ZIGLIB/std/target/arm.zig	/slow_odd_reg/;"	field
slow_paired_128	$ZIGLIB/std/target/aarch64.zig	/slow_paired_128/;"	field
slow_pmaddwd	$ZIGLIB/std/target/x86.zig	/slow_pmaddwd/;"	field
slow_pmulld	$ZIGLIB/std/target/x86.zig	/slow_pmulld/;"	field
slow_popcntd	$ZIGLIB/std/target/powerpc.zig	/slow_popcntd/;"	field
slow_shld	$ZIGLIB/std/target/x86.zig	/slow_shld/;"	field
slow_strqro_store	$ZIGLIB/std/target/aarch64.zig	/slow_strqro_store/;"	field
slow_two_mem_ops	$ZIGLIB/std/target/x86.zig	/slow_two_mem_ops/;"	field
slow_unaligned_mem_16	$ZIGLIB/std/target/x86.zig	/slow_unaligned_mem_16/;"	field
slow_unaligned_mem_32	$ZIGLIB/std/target/x86.zig	/slow_unaligned_mem_32/;"	field
slow_vdup32	$ZIGLIB/std/target/arm.zig	/slow_vdup32/;"	field
slow_vgetlni32	$ZIGLIB/std/target/arm.zig	/slow_vgetlni32/;"	field
slowfpvfmx	$ZIGLIB/std/target/arm.zig	/slowfpvfmx/;"	field
slowfpvmlx	$ZIGLIB/std/target/arm.zig	/slowfpvmlx/;"	field
sm_20	$ZIGLIB/std/target/nvptx.zig	/sm_20/;"	field
sm_21	$ZIGLIB/std/target/nvptx.zig	/sm_21/;"	field
sm_30	$ZIGLIB/std/target/nvptx.zig	/sm_30/;"	field
sm_32	$ZIGLIB/std/target/nvptx.zig	/sm_32/;"	field
sm_35	$ZIGLIB/std/target/nvptx.zig	/sm_35/;"	field
sm_37	$ZIGLIB/std/target/nvptx.zig	/sm_37/;"	field
sm_50	$ZIGLIB/std/target/nvptx.zig	/sm_50/;"	field
sm_52	$ZIGLIB/std/target/nvptx.zig	/sm_52/;"	field
sm_53	$ZIGLIB/std/target/nvptx.zig	/sm_53/;"	field
sm_60	$ZIGLIB/std/target/nvptx.zig	/sm_60/;"	field
sm_61	$ZIGLIB/std/target/nvptx.zig	/sm_61/;"	field
sm_62	$ZIGLIB/std/target/nvptx.zig	/sm_62/;"	field
sm_70	$ZIGLIB/std/target/nvptx.zig	/sm_70/;"	field
sm_72	$ZIGLIB/std/target/nvptx.zig	/sm_72/;"	field
sm_75	$ZIGLIB/std/target/nvptx.zig	/sm_75/;"	field
sm_80	$ZIGLIB/std/target/nvptx.zig	/sm_80/;"	field
sm_86	$ZIGLIB/std/target/nvptx.zig	/sm_86/;"	field
small	$ZIGLIB/std/heap/general_purpose_allocator.zig	/const small = try allocator.create(i32)/;"	constant
smallBufferedReader	$ZIGLIB/std/io/buffered_reader.zig	/^fn smallBufferedReader(underlying_stream: anytype) BufferedReader(8, @TypeOf(underlying_stream)) {$/;"	function
small_bases	$ZIGLIB/std/simd.zig	/const small_bases = [5]@Vector(2, u8){$/;"	constant
small_bits	$ZIGLIB/std/rand.zig	/const small_bits = @divTrunc(bits + 31, 32) * 32/;"	constant
small_braid	$ZIGLIB/std/simd.zig	/const small_braid = interlace(small_bases)/;"	constant
small_bucket_count	$ZIGLIB/std/heap/general_purpose_allocator.zig	/const small_bucket_count = math.log2(page_size)/;"	constant
small_cos	$ZIGLIB/compiler_rt/sincos.zig	/var small_cos: f64 = undefined/;"	variable
small_data	$ZIGLIB/std/target/hexagon.zig	/small_data/;"	field
small_fixed_buffer	$ZIGLIB/std/heap.zig	/var small_fixed_buffer: [10]u8 = undefined/;"	variable
small_key_buf	$ZIGLIB/std/os.zig	/var small_key_buf: [64]u8 = undefined/;"	variable
small_order_ss	$ZIGLIB/std/crypto/25519/edwards25519.zig	/const small_order_ss: [7][32]u8 = .{$/;"	constant
small_p	$ZIGLIB/std/crypto/25519/edwards25519.zig	/const small_p = try Edwards25519.fromBytes(small_order_s)/;"	constant
small_sin	$ZIGLIB/compiler_rt/sincos.zig	/var small_sin: f64 = undefined/;"	variable
smallest	$ZIGLIB/std/sort.zig	/var smallest = items[0]/;"	variable
smallest_atomic_fetch_exch_size	$ZIGLIB/compiler_rt/atomics.zig	/^const smallest_atomic_fetch_exch_size = switch (arch) {$/;"	constant
smallest_index	$ZIGLIB/std/sort.zig	/var smallest_index: usize = 0/;"	variable
smallest_power_of_ten	$ZIGLIB/std/fmt/parse_float/FloatInfo.zig	/^smallest_power_of_ten: comptime_int/;"	field
smallest_start	$ZIGLIB/std/zig/render.zig	/var smallest_start = token_starts[maybe_bang]/;"	variable
smallstack	$ZIGLIB/std/target/avr.zig	/smallstack/;"	field
smart	$ZIGLIB/std/target/csky.zig	/smart/;"	field
smbios3_table_guid	$ZIGLIB/std/os/uefi/tables/configuration_table.zig	/pub const smbios3_table_guid align(8) = Guid{$/;"	constant
smbios_table_guid	$ZIGLIB/std/os/uefi/tables/configuration_table.zig	/pub const smbios_table_guid align(8) = Guid{$/;"	constant
sme_f64	$ZIGLIB/std/target/aarch64.zig	/sme_f64/;"	field
sme_i64	$ZIGLIB/std/target/aarch64.zig	/sme_i64/;"	field
smem_to_vector_write_hazard	$ZIGLIB/std/target/amdgpu.zig	/smem_to_vector_write_hazard/;"	field
smix	$ZIGLIB/std/crypto/scrypt.zig	/^fn smix(b: []align(16) u8, r: u30, n: usize, v: []align(16) u32, xy: []align(16) u32) void {$/;"	function
smpte	$ZIGLIB/std/os/windows/winmm.zig	/smpte: extern struct {$/;"	field
snan	$ZIGLIB/std/math/nan.zig	/^pub inline fn snan(comptime T: type) T {$/;"	function
snd_sb_state	$ZIGLIB/std/c/freebsd.zig	/snd_sb_state: u16/;"	field
snd_wl1	$ZIGLIB/std/os/linux.zig	/snd_wl1: u32/;"	field
snd_wnd	$ZIGLIB/std/os/linux.zig	/snd_wnd: u32/;"	field
sock_addr	$ZIGLIB/std/net.zig	/var sock_addr = os.sockaddr.un{$/;"	variable
sock_flags	$ZIGLIB/std/net.zig	/const sock_flags = os.SOCK.STREAM | os.SOCK.CLOEXEC | nonblock/;"	constant
sock_hash_update	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const sock_hash_update = @intToPtr(fn (skops: *kern.SockOps, map: *const kern.MapDef, key: ?*anyopaque, flags: u64) c_long, 70)/;"	constant
sock_map_update	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const sock_map_update = @intToPtr(fn (skops: *kern.SockOps, map: *const kern.MapDef, key: ?*anyopaque, flags: u64) c_long, 53)/;"	constant
sock_ops	$ZIGLIB/std/os/linux/bpf.zig	/sock_ops/;"	field
sock_ops_cb_flags_set	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const sock_ops_cb_flags_set = @intToPtr(fn (bpf_sock: *kern.SockOps, argval: c_int) c_long, 59)/;"	constant
sockaddr	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const sockaddr = extern struct {$/;"	struct
socket	$ZIGLIB/std/os/linux/x86.zig	/pub const socket = 1/;"	constant
socket_filter	$ZIGLIB/std/os/linux/bpf.zig	/socket_filter/;"	field
socket_t	$ZIGLIB/std/os.zig	/^pub const socket_t = if (builtin.os.tag == .windows) windows.ws2_32.SOCKET else fd_t/;"	constant
socket_test_harness	$ZIGLIB/std/os/linux/io_uring.zig	/const socket_test_harness = try createSocketTestHarness(&ring)/;"	constant
socketcall	$ZIGLIB/std/os/linux/x86.zig	/^pub fn socketcall(call: usize, args: [*]usize) usize {$/;"	function
socketpair	$ZIGLIB/std/os/linux/x86.zig	/pub const socketpair = 8/;"	constant
sockfd	$ZIGLIB/std/net.zig	/var sockfd = try os.socket(os.AF.UNIX, os.SOCK.DGRAM | os.SOCK.CLOEXEC, 0)/;"	variable
sockhash	$ZIGLIB/std/os/linux/bpf.zig	/sockhash/;"	field
socklen	$ZIGLIB/std/net.zig	/var socklen = address.getOsSockLen()/;"	variable
socklen_t	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const socklen_t = u32/;"	constant
sockmap	$ZIGLIB/std/os/linux/bpf.zig	/sockmap/;"	field
sockproto	$ZIGLIB/std/os/windows/ws2_32.zig	/^pub const sockproto = extern struct {$/;"	struct
socktype	$ZIGLIB/std/os/windows/ws2_32.zig	/socktype: i32/;"	field
soft	$ZIGLIB/std/target.zig	/soft/;"	field
soft_float	$ZIGLIB/std/target/x86.zig	/soft_float/;"	field
soft_fp	$ZIGLIB/std/target.zig	/soft_fp/;"	field
soft_mul_div	$ZIGLIB/std/target/sparc.zig	/soft_mul_div/;"	field
soft_tp	$ZIGLIB/std/target/csky.zig	/soft_tp/;"	field
software_interrupt	$ZIGLIB/std/os/uefi/protocols/simple_network_protocol.zig	/software_interrupt: bool/;"	field
solaris	$ZIGLIB/std/target.zig	/solaris/;"	field
some_bytes	$ZIGLIB/std/fmt.zig	/const some_bytes = "\\xCA\\xFE\\xBA\\xBE"/;"	constant
somethingElse	$ZIGLIB/std/event/group.zig	/^fn somethingElse() callconv(.Async) anyerror!void {$/;"	function
something_else_frame	$ZIGLIB/std/event/group.zig	/var something_else_frame = async somethingElse()/;"	variable
something_that_fails_frame	$ZIGLIB/std/event/group.zig	/var something_that_fails_frame = async doSomethingThatFails()/;"	variable
songptrpos	$ZIGLIB/std/os/windows/winmm.zig	/songptrpos: DWORD/;"	field
sort	$ZIGLIB/std/sort.zig	/^pub fn sort($/;"	function
sortContext	$ZIGLIB/std/sort.zig	/^pub fn sortContext(len: usize, context: anytype) void {$/;"	function
sorted_items	$ZIGLIB/std/priority_queue.zig	/var sorted_items = [_]u32{ 1, 3, 4, 5, 8, 9 }/;"	variable
sorted_kvs	$ZIGLIB/std/comptime_string_map.zig	/var sorted_kvs: [kvs_list.len]KV = undefined/;"	variable
sortkey	$ZIGLIB/std/net.zig	/sortkey: i32 = 0/;"	field
source	$ZIGLIB/std/zig/c_translation.zig	/const source = ptrInfo(@TypeOf(target))/;"	constant
source_address	$ZIGLIB/std/os/uefi/protocols/udp6_protocol.zig	/source_address: Ip6Address/;"	field
source_dir	$ZIGLIB/std/Build/InstallDirStep.zig	/source_dir: []const u8/;"	field
source_duped	$ZIGLIB/std/Build/CompileStep.zig	/const source_duped = source.dupe(self.builder)/;"	constant
source_file	$ZIGLIB/std/Build/TranslateCStep.zig	/source_file: std.Build.FileSource/;"	field
source_file_name	$ZIGLIB/std/pdb.zig	/const source_file_name = try self.string_table.?.reader().readUntilDelimiterAlloc(self.allocator, 0, 1024)/;"	constant
source_index	$ZIGLIB/std/io/change_detection_stream.zig	/source_index: usize/;"	field
source_len	$ZIGLIB/std/base64.zig	/const source_len = source.len/;"	constant
source_line	$ZIGLIB/std/zig.zig	/source_line: []const u8/;"	field
source_port	$ZIGLIB/std/os/uefi/protocols/udp6_protocol.zig	/source_port: u16/;"	field
source_slice	$ZIGLIB/std/json.zig	/const source_slice = stringToken.slice(tokens.slice, tokens.i - 1)/;"	constant
source_version_command	$ZIGLIB/std/macho.zig	/^pub const source_version_command = extern struct {$/;"	struct
southern_islands	$ZIGLIB/std/target/amdgpu.zig	/southern_islands/;"	field
sp_family	$ZIGLIB/std/os/windows/ws2_32.zig	/sp_family: u16/;"	field
sp_protocol	$ZIGLIB/std/os/windows/ws2_32.zig	/sp_protocol: u16/;"	field
sp_ver	$ZIGLIB/std/zig/system/windows.zig	/const sp_ver: u8 = 0/;"	constant
space	$ZIGLIB/std/zig/render.zig	/space/;"	field
space_after_equal	$ZIGLIB/std/zig/render.zig	/var space_after_equal: Space = if (expr == .multiline_string_literal) .none else .space/;"	variable
space_needed	$ZIGLIB/std/debug.zig	/const space_needed = @intCast(usize, li.column - 1)/;"	constant
spades	$ZIGLIB/std/enums.zig	/spades/;"	field
span	$ZIGLIB/std/zig/Parse.zig	/const span = try p.listToSpan(statements)/;"	constant
sparc	$ZIGLIB/std/target.zig	/sparc/;"	field
sparc64	$ZIGLIB/std/target.zig	/sparc64/;"	field
sparc_lock	$ZIGLIB/compiler_rt/atomics.zig	/const sparc_lock: type = enum(u8) { Unlocked = 0, Locked = 255 }/;"	enum
sparcel	$ZIGLIB/std/target.zig	/sparcel/;"	field
sparclet	$ZIGLIB/std/target/sparc.zig	/pub const sparclet = CpuModel{$/;"	constant
sparclite	$ZIGLIB/std/target/sparc.zig	/pub const sparclite = CpuModel{$/;"	constant
sparclite86x	$ZIGLIB/std/target/sparc.zig	/pub const sparclite86x = CpuModel{$/;"	constant
spare	$ZIGLIB/std/c/netbsd.zig	/spare: [8]u64/;"	field
spare1	$ZIGLIB/std/c/freebsd.zig	/spare1: c_long/;"	field
spare2	$ZIGLIB/std/macho.zig	/spare2: u32/;"	field
spare3	$ZIGLIB/std/macho.zig	/spare3: u32/;"	field
spawn	$ZIGLIB/std/os/posix_spawn.zig	/pub fn spawn($/;"	function
spawnAndWait	$ZIGLIB/std/child_process.zig	/pub fn spawnAndWait(self: *ChildProcess) SpawnError!Term {$/;"	function
spawnChild	$ZIGLIB/std/Build.zig	/^pub fn spawnChild(self: *Build, argv: []const []const u8) !void {$/;"	function
spawnChildEnvMap	$ZIGLIB/std/Build.zig	/^pub fn spawnChildEnvMap(self: *Build, cwd: ?[]const u8, env_map: *const EnvMap, argv: []const []const u8) !void {$/;"	function
spawnMacos	$ZIGLIB/std/child_process.zig	/fn spawnMacos(self: *ChildProcess) SpawnError!void {$/;"	function
spawnPosix	$ZIGLIB/std/child_process.zig	/fn spawnPosix(self: *ChildProcess) SpawnError!void {$/;"	function
spawnWindows	$ZIGLIB/std/child_process.zig	/fn spawnWindows(self: *ChildProcess) SpawnError!void {$/;"	function
spawnZ	$ZIGLIB/std/os/posix_spawn.zig	/pub fn spawnZ($/;"	function
spawnp	$ZIGLIB/std/os/posix_spawn.zig	/pub fn spawnp($/;"	function
spawnpZ	$ZIGLIB/std/os/posix_spawn.zig	/pub fn spawnpZ($/;"	function
spe_eef	$ZIGLIB/std/target/aarch64.zig	/spe_eef/;"	field
special	$ZIGLIB/std/zig/number_literal.zig	/var special: u8 = 0/;"	variable
special_after_underscore	$ZIGLIB/std/zig/number_literal.zig	/special_after_underscore: usize/;"	field
special_bits	$ZIGLIB/std/zig/system/arm.zig	/const special_bits = @truncate(u4, info.part >> 8)/;"	constant
special_exp	$ZIGLIB/compiler_rt/comparef.zig	/const special_exp = 0x7FFF/;"	constant
special_major	$ZIGLIB/std/c/solaris.zig	/special_major: major_t/;"	field
special_minor	$ZIGLIB/std/c/solaris.zig	/special_minor: minor_t/;"	field
specification	$ZIGLIB/std/dwarf/AT.zig	/^pub const specification = 0x47/;"	constant
specifier	$ZIGLIB/std/fmt.zig	/fn specifier(self: *@This()) !Specifier {$/;"	function
specifier_arg	$ZIGLIB/std/fmt.zig	/specifier_arg: []const u8/;"	field
specrestrict	$ZIGLIB/std/target/aarch64.zig	/specrestrict/;"	field
speed_factor	$ZIGLIB/std/Progress.zig	/const speed_factor = std.time.ns_per_ms/;"	constant
speed_t	$ZIGLIB/std/os/linux.zig	/^pub const speed_t = u32/;"	constant
spills_into_next	$ZIGLIB/std/heap/WasmPageAllocator.zig	/const spills_into_next = @bitCast(i128, segment) < 0/;"	constant
spin	$ZIGLIB/std/Thread.zig	/var spin: u8 = 10/;"	variable
spinLoopHint	$ZIGLIB/std/atomic.zig	/^pub inline fn spinLoopHint() void {$/;"	function
spin_lock	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const spin_lock = @intToPtr(fn (lock: *kern.SpinLock) c_long, 93)/;"	constant
spin_unlock	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const spin_unlock = @intToPtr(fn (lock: *kern.SpinLock) c_long, 94)/;"	constant
spinlocks	$ZIGLIB/compiler_rt/atomics.zig	/^var spinlocks: SpinlockTable = SpinlockTable{}/;"	variable
spir	$ZIGLIB/std/target.zig	/spir/;"	field
spir64	$ZIGLIB/std/target.zig	/spir64/;"	field
spirv	$ZIGLIB/std/target.zig	/spirv/;"	field
spirv32	$ZIGLIB/std/target.zig	/spirv32/;"	field
spirv64	$ZIGLIB/std/target.zig	/spirv64/;"	field
splat_vfp_neon	$ZIGLIB/std/target/arm.zig	/splat_vfp_neon/;"	field
splice	$ZIGLIB/std/os/linux/syscalls.zig	/splice = Linux + 304/;"	field
splice_fd_in	$ZIGLIB/std/os/linux.zig	/splice_fd_in: i32/;"	field
split	$ZIGLIB/std/net.zig	/var split = mem.split(u8, line, "#")/;"	variable
splitBackwards	$ZIGLIB/std/mem.zig	/^pub fn splitBackwards(comptime T: type, buffer: []const T, delimiter: []const T) SplitBackwardsIterator(T) {$/;"	function
splitScalar	$ZIGLIB/std/crypto/pcurves/secp256k1.zig	/pub fn splitScalar(s: [32]u8, endian: std.builtin.Endian) SplitScalar {$/;"	function
splitValue64	$ZIGLIB/std/os/linux.zig	/^fn splitValue64(val: i64) [2]u32 {$/;"	function
splitValueBE64	$ZIGLIB/std/os/linux.zig	/^fn splitValueBE64(val: i64) [2]u32 {$/;"	function
splitValueLE64	$ZIGLIB/std/os/linux.zig	/^fn splitValueLE64(val: i64) [2]u32 {$/;"	function
split_compile	$ZIGLIB/std/dwarf.zig	/pub const split_compile = 0x05/;"	constant
split_it	$ZIGLIB/std/net.zig	/var split_it = mem.split(u8, line, "#")/;"	variable
split_scalar	$ZIGLIB/std/crypto/pcurves/secp256k1.zig	/var split_scalar = Endormorphism.splitScalar(s, .Little)/;"	variable
split_type	$ZIGLIB/std/dwarf.zig	/pub const split_type = 0x06/;"	constant
spmx	$ZIGLIB/std/target/avr.zig	/spmx/;"	field
spread	$ZIGLIB/compiler_rt/fma.zig	/var spread = ex + ey - ez/;"	variable
spsr	$ZIGLIB/std/c/freebsd.zig	/spsr: u32/;"	field
spu_2	$ZIGLIB/std/target.zig	/spu_2/;"	field
spu_create	$ZIGLIB/std/os/linux/syscalls.zig	/spu_create = 279/;"	field
spu_run	$ZIGLIB/std/os/linux/syscalls.zig	/spu_run = 278/;"	field
sq_entries	$ZIGLIB/std/os/linux.zig	/sq_entries: u32/;"	field
sq_off	$ZIGLIB/std/os/linux.zig	/sq_off: io_sqring_offsets/;"	field
sq_ready	$ZIGLIB/std/os/linux/io_uring.zig	/pub fn sq_ready(self: *IO_Uring) u32 {$/;"	function
sq_ring_needs_enter	$ZIGLIB/std/os/linux/io_uring.zig	/pub fn sq_ring_needs_enter(self: *IO_Uring, flags: *u32) bool {$/;"	function
sq_thread_cpu	$ZIGLIB/std/os/linux.zig	/sq_thread_cpu: u32/;"	field
sq_thread_idle	$ZIGLIB/std/os/linux.zig	/sq_thread_idle: u32/;"	field
sqe_barrier	$ZIGLIB/std/os/linux/io_uring.zig	/const sqe_barrier = try ring.nop(0xbbbbbbbb)/;"	constant
sqe_cancel	$ZIGLIB/std/os/linux/io_uring.zig	/const sqe_cancel = try ring.cancel(0x99999999, 0xffffffff, 0)/;"	constant
sqe_close	$ZIGLIB/std/os/linux/io_uring.zig	/const sqe_close = try ring.close(0x44444444, file.handle)/;"	constant
sqe_flags	$ZIGLIB/std/os/linux.zig	/sqe_flags: u8/;"	field
sqe_fsync	$ZIGLIB/std/os/linux/io_uring.zig	/const sqe_fsync = try ring.fsync(0xeeeeeeee, fd, 0)/;"	constant
sqe_head	$ZIGLIB/std/os/linux/io_uring.zig	/sqe_head: u32 = 0/;"	field
sqe_op	$ZIGLIB/std/os/linux.zig	/sqe_op: IORING_OP/;"	field
sqe_openat	$ZIGLIB/std/os/linux/io_uring.zig	/const sqe_openat = try ring.openat(0x33333333, linux.AT.FDCWD, path, flags, mode)/;"	constant
sqe_read	$ZIGLIB/std/os/linux/io_uring.zig	/const sqe_read = try ring.read_fixed(0x12121212, fd, &buffers[1], 0, 1)/;"	constant
sqe_readv	$ZIGLIB/std/os/linux/io_uring.zig	/const sqe_readv = try ring.read(0xffffffff, fd, .{ .iovecs = iovecs_read[0..] }, 17)/;"	constant
sqe_recv	$ZIGLIB/std/os/linux/io_uring.zig	/const sqe_recv = try ring.recv(0xffffffff, socket_test_harness.server, .{ .buffer = buffer_recv[0..] }, 0)/;"	constant
sqe_recvmsg	$ZIGLIB/std/os/linux/io_uring.zig	/const sqe_recvmsg = try ring.recvmsg(0x22222222, server, &msg_recv, 0)/;"	constant
sqe_sendmsg	$ZIGLIB/std/os/linux/io_uring.zig	/const sqe_sendmsg = try ring.sendmsg(0x11111111, client, &msg_send, 0)/;"	constant
sqe_tail	$ZIGLIB/std/os/linux/io_uring.zig	/sqe_tail: u32 = 0/;"	field
sqe_timeout	$ZIGLIB/std/os/linux/io_uring.zig	/const sqe_timeout = try ring.timeout(0x88888888, &ts, 0, 0)/;"	constant
sqe_timeout_remove	$ZIGLIB/std/os/linux/io_uring.zig	/const sqe_timeout_remove = try ring.timeout_remove(0x99999999, 0x88888888, 0)/;"	constant
sqe_write	$ZIGLIB/std/os/linux/io_uring.zig	/const sqe_write = try ring.write_fixed(0x45454545, fd, &buffers[0], 3, 0)/;"	constant
sqe_writev	$ZIGLIB/std/os/linux/io_uring.zig	/const sqe_writev = try ring.writev(0xdddddddd, fd, iovecs_write[0..], 17)/;"	constant
sqes	$ZIGLIB/std/os/linux/io_uring.zig	/sqes: []linux.io_uring_sqe/;"	field
sqn_mul	$ZIGLIB/std/crypto/25519/scalar.zig	/fn sqn_mul(x: Scalar, comptime n: comptime_int, y: Scalar) Scalar {$/;"	function
sqrNoAlias	$ZIGLIB/std/math/big/int.zig	/pub fn sqrNoAlias(rma: *Mutable, a: Const, opt_allocator: ?Allocator) void {$/;"	function
sqrt	$ZIGLIB/std/math/sqrt.zig	/^pub fn sqrt(x: anytype) Sqrt(@TypeOf(x)) {$/;"	function
sqrt1_2	$ZIGLIB/std/math.zig	/^pub const sqrt1_2 = 0.707106781186547524400844362104849039/;"	constant
sqrt2	$ZIGLIB/std/math.zig	/^pub const sqrt2 = 1.414213562373095048801688724209698079/;"	constant
sqrt32	$ZIGLIB/std/math/complex/sqrt.zig	/^fn sqrt32(z: Complex(f32)) Complex(f32) {$/;"	function
sqrt64	$ZIGLIB/std/math/complex/sqrt.zig	/^fn sqrt64(z: Complex(f64)) Complex(f64) {$/;"	function
sqrtRatioM1	$ZIGLIB/std/crypto/25519/ristretto255.zig	/fn sqrtRatioM1(u: Fe, v: Fe) struct { ratio_is_square: u32, root: Fe } {$/;"	function
sqrt_eps_value	$ZIGLIB/std/testing.zig	/const sqrt_eps_value = comptime @sqrt(eps_value)/;"	constant
sqrt_int	$ZIGLIB/std/math/sqrt.zig	/^fn sqrt_int(comptime T: type, value: T) Sqrt(T) {$/;"	function
sqrtf	$ZIGLIB/compiler_rt/sqrt.zig	/^pub fn sqrtf(x: f32) callconv(.C) f32 {$/;"	function
sqrtl	$ZIGLIB/compiler_rt/sqrt.zig	/^pub fn sqrtl(x: c_longdouble) callconv(.C) c_longdouble {$/;"	function
sqrtm1	$ZIGLIB/std/crypto/25519/field.zig	/pub const sqrtm1 = Fe{ .limbs = .{ 1718705420411056, 234908883556509, 2233514472574048, 2117202627021982, 765476049583133 } }/;"	constant
sqrtq	$ZIGLIB/compiler_rt/sqrt.zig	/^pub fn sqrtq(x: f128) callconv(.C) f128 {$/;"	function
square	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/^pub fn square(out1: *MontgomeryDomainFieldElement, arg1: MontgomeryDomainFieldElement) void {$/;"	function
squeeze	$ZIGLIB/std/crypto/gimli.zig	/pub fn squeeze(self: *Self, out: []u8) void {$/;"	function
srWindow	$ZIGLIB/std/os/windows.zig	/srWindow: SMALL_RECT/;"	field
sram	$ZIGLIB/std/target/avr.zig	/sram/;"	field
sramecc	$ZIGLIB/std/target/amdgpu.zig	/sramecc/;"	field
sramecc_support	$ZIGLIB/std/target/amdgpu.zig	/sramecc_support/;"	field
srcAbsMask	$ZIGLIB/compiler_rt/truncf.zig	/const srcAbsMask = srcSignMask - 1/;"	constant
srcBits	$ZIGLIB/compiler_rt/truncf.zig	/const srcBits = @typeInfo(src_t).Float.bits/;"	constant
srcExpBias	$ZIGLIB/compiler_rt/truncf.zig	/const srcExpBias = srcInfExp >> 1/;"	constant
srcExpBits	$ZIGLIB/compiler_rt/truncf.zig	/const srcExpBits = srcBits - srcSigBits - 1/;"	constant
srcHashEql	$ZIGLIB/std/zig.zig	/^pub fn srcHashEql(a: SrcHash, b: SrcHash) bool {$/;"	function
srcInfExp	$ZIGLIB/compiler_rt/truncf.zig	/const srcInfExp = (1 << srcExpBits) - 1/;"	constant
srcInfinity	$ZIGLIB/compiler_rt/truncf.zig	/const srcInfinity = srcInfExp << srcSigBits/;"	constant
srcMinNormal	$ZIGLIB/compiler_rt/truncf.zig	/const srcMinNormal = 1 << srcSigBits/;"	constant
srcNaNCode	$ZIGLIB/compiler_rt/truncf.zig	/const srcNaNCode = srcQNaN - 1/;"	constant
srcQNaN	$ZIGLIB/compiler_rt/truncf.zig	/const srcQNaN = 1 << (srcSigBits - 1)/;"	constant
srcSigBits	$ZIGLIB/compiler_rt/truncf.zig	/const srcSigBits = std.math.floatMantissaBits(src_t)/;"	constant
srcSignMask	$ZIGLIB/compiler_rt/truncf.zig	/const srcSignMask = 1 << (srcSigBits + srcExpBits)/;"	constant
srcSignificandMask	$ZIGLIB/compiler_rt/truncf.zig	/const srcSignificandMask = srcMinNormal - 1/;"	constant
src_abs_mask	$ZIGLIB/compiler_rt/trunctfxf2.zig	/const src_abs_mask = src_sign_mask - 1/;"	constant
src_bits	$ZIGLIB/compiler_rt/trunctfxf2.zig	/const src_bits = @typeInfo(f128).Float.bits/;"	constant
src_builder	$ZIGLIB/std/Build/InstallFileStep.zig	/const src_builder = self.override_source_builder orelse self.builder/;"	constant
src_cast	$ZIGLIB/std/zig/c_builtins.zig	/const src_cast = @ptrCast([*c]const u8, src)/;"	constant
src_coords	$ZIGLIB/std/dwarf/AT.zig	/^pub const src_coords = 0x2104/;"	constant
src_digit	$ZIGLIB/std/math/big/int.zig	/const src_digit = a[src_i]/;"	constant
src_dir	$ZIGLIB/std/Build/InstallDirStep.zig	/var src_dir = std.fs.cwd().openIterableDir(full_src_dir, .{}) catch |err| {$/;"	variable
src_exp_bias	$ZIGLIB/compiler_rt/truncf.zig	/const src_exp_bias = 16383/;"	constant
src_exp_bits	$ZIGLIB/compiler_rt/trunctfxf2.zig	/const src_exp_bits = src_bits - src_sig_bits - 1/;"	constant
src_fd	$ZIGLIB/std/os.zig	/const src_fd = windows.OpenFile(old_path_w, .{$/;"	constant
src_file	$ZIGLIB/std/fs.zig	/var src_file = try source_dir.openFile(source_path, .{})/;"	variable
src_has_trailing_comma	$ZIGLIB/std/zig/render.zig	/const src_has_trailing_comma = token_tags[rbrace - 1] == .comma/;"	constant
src_i	$ZIGLIB/std/unicode.zig	/var src_i: usize = 0/;"	variable
src_inf	$ZIGLIB/compiler_rt/trunctfxf2.zig	/const src_inf = src_inf_exp << src_sig_bits/;"	constant
src_inf_exp	$ZIGLIB/compiler_rt/trunctfxf2.zig	/const src_inf_exp = 0x7FFF/;"	constant
src_info	$ZIGLIB/std/dwarf/AT.zig	/^pub const src_info = 0x2102/;"	constant
src_int_bit	$ZIGLIB/compiler_rt/extendxftf2.zig	/const src_int_bit: u64 = 0x8000000000000000/;"	constant
src_left	$ZIGLIB/std/fifo.zig	/var src_left = src/;"	variable
src_min_normal	$ZIGLIB/compiler_rt/extendf.zig	/const src_min_normal = 1 << src_sig_bits/;"	constant
src_nan_code	$ZIGLIB/compiler_rt/extendf.zig	/const src_nan_code = src_qnan - 1/;"	constant
src_path	$ZIGLIB/std/Build/ConfigHeaderStep.zig	/const src_path = file_source.getPath(self.builder)/;"	constant
src_pos	$ZIGLIB/std/compress/deflate/dict_decoder.zig	/var src_pos: i32 = @intCast(i32, dst_pos) - @intCast(i32, dist)/;"	variable
src_qnan	$ZIGLIB/compiler_rt/extendf.zig	/const src_qnan = 1 << (src_sig_bits - 1)/;"	constant
src_rep_t	$ZIGLIB/compiler_rt/truncf.zig	/const src_rep_t = std.meta.Int(.unsigned, @typeInfo(src_t).Float.bits)/;"	constant
src_sig_bits	$ZIGLIB/compiler_rt/trunctfxf2.zig	/const src_sig_bits = math.floatMantissaBits(f128)/;"	constant
src_sig_mask	$ZIGLIB/compiler_rt/extendxftf2.zig	/const src_sig_mask = ~src_int_bit/;"	constant
src_sign_mask	$ZIGLIB/compiler_rt/trunctfxf2.zig	/const src_sign_mask = 1 << (src_sig_bits + src_exp_bits)/;"	constant
src_slice	$ZIGLIB/std/io/change_detection_stream.zig	/const src_slice = self.source[self.source_index..end]/;"	constant
src_start	$ZIGLIB/std/zig/tokenizer.zig	/const src_start: usize = if (std.mem.startsWith(u8, buffer, "\\xEF\\xBB\\xBF")) 3 else 0/;"	constant
src_stat	$ZIGLIB/std/fs.zig	/const src_stat = try src_file.stat()/;"	constant
src_type	$ZIGLIB/std/os/linux/bpf.zig	/const src_type: u8 = switch (imm_or_reg) {$/;"	constant
srcfd	$ZIGLIB/std/os/linux/seccomp.zig	/srcfd: u32/;"	field
sregs	$ZIGLIB/std/os/linux/sparc64.zig	/sregs: [32]u32/;"	field
srep_t	$ZIGLIB/compiler_rt/comparef.zig	/const srep_t = std.meta.Int(.signed, bits)/;"	constant
srwlock	$ZIGLIB/std/Thread/Mutex.zig	/srwlock: os.windows.SRWLOCK = .{}/;"	field
ssbs	$ZIGLIB/std/target/aarch64.zig	/ssbs/;"	field
sse2	$ZIGLIB/std/target/x86.zig	/sse2/;"	field
sse3	$ZIGLIB/std/target/x86.zig	/sse3/;"	field
sse4_1	$ZIGLIB/std/target/x86.zig	/sse4_1/;"	field
sse4_2	$ZIGLIB/std/target/x86.zig	/sse4_2/;"	field
sse4a	$ZIGLIB/std/target/x86.zig	/sse4a/;"	field
sse_unaligned_mem	$ZIGLIB/std/target/x86.zig	/sse_unaligned_mem/;"	field
ssetmask	$ZIGLIB/std/os/linux/syscalls.zig	/ssetmask = Linux + 69/;"	field
ssize	$ZIGLIB/std/compress/deflate/huffman_bit_writer.zig	/var ssize = stored_size_ret.size/;"	variable
ssse3	$ZIGLIB/std/target/x86.zig	/ssse3/;"	field
st_info	$ZIGLIB/std/elf.zig	/st_info: u8/;"	field
st_init	$ZIGLIB/std/crypto/aegis.zig	/const st_init = Aegis128LMac.init(&key)/;"	constant
st_name	$ZIGLIB/std/elf.zig	/st_name: Elf64_Word/;"	field
st_other	$ZIGLIB/std/elf.zig	/st_other: u8/;"	field
st_shndx	$ZIGLIB/std/elf.zig	/st_shndx: Elf64_Section/;"	field
st_size	$ZIGLIB/std/elf.zig	/st_size: Elf64_Xword/;"	field
st_type	$ZIGLIB/std/c/haiku.zig	/st_type: u32/;"	field
st_value	$ZIGLIB/std/elf.zig	/st_value: Elf64_Addr/;"	field
stab	$ZIGLIB/std/macho.zig	/pub fn stab(sym: nlist_64) bool {$/;"	function
stab_symbol	$ZIGLIB/std/debug.zig	/const stab_symbol = mem.sliceTo(self.strings[symbol.strx..], 0)/;"	constant
stack	$ZIGLIB/std/os/linux/x86_64.zig	/stack: stack_t/;"	field
stackChange	$ZIGLIB/std/valgrind.zig	/^pub fn stackChange(id: usize, newstack: []u8) void {$/;"	function
stackDeregister	$ZIGLIB/std/valgrind.zig	/^pub fn stackDeregister(id: usize) void {$/;"	function
stackFallback	$ZIGLIB/std/heap.zig	/^pub fn stackFallback(comptime size: usize, fallback_allocator: Allocator) StackFallbackAllocator(size) {$/;"	function
stackRegister	$ZIGLIB/std/valgrind.zig	/^pub fn stackRegister(stack: []u8) usize {$/;"	function
stackTracePtr	$ZIGLIB/std/heap/general_purpose_allocator.zig	/fn stackTracePtr($/;"	function
stackUsed	$ZIGLIB/std/json.zig	/fn stackUsed(self: *TokenStream) usize {$/;"	function
stack_addresses	$ZIGLIB/std/testing/failing_allocator.zig	/stack_addresses: [num_stack_frames]usize/;"	field
stack_align	$ZIGLIB/std/target.zig	/pub const stack_align = 16/;"	constant
stack_alloc	$ZIGLIB/std/process.zig	/var stack_alloc = std.heap.stackFallback(256 * @sizeOf(u16), allocator)/;"	variable
stack_allocator	$ZIGLIB/std/heap.zig	/var stack_allocator = stackFallback(4096, fallback_allocator)/;"	variable
stack_buf	$ZIGLIB/std/process.zig	/var stack_buf: [fs.MAX_PATH_BYTES]u8 = undefined/;"	variable
stack_n	$ZIGLIB/std/heap/general_purpose_allocator.zig	/const stack_n = config.stack_trace_frames/;"	constant
stack_node	$ZIGLIB/std/event/loop.zig	/const stack_node = @fieldParentPtr(std.atomic.Stack(ResumeNode.EventFd).Node, "data", event_fd_node)/;"	constant
stack_offset	$ZIGLIB/std/Thread.zig	/var stack_offset: usize = undefined/;"	variable
stack_protector	$ZIGLIB/std/Build/CompileStep.zig	/^stack_protector: ?bool = null/;"	field
stack_size	$ZIGLIB/std/target/csky.zig	/stack_size/;"	field
stack_t	$ZIGLIB/std/os/linux.zig	/^pub const stack_t = if (is_mips)$/;"	constant
stack_trace	$ZIGLIB/std/testing/failing_allocator.zig	/var stack_trace = std.builtin.StackTrace{$/;"	variable
stack_trace_frames	$ZIGLIB/std/heap/general_purpose_allocator.zig	/stack_trace_frames: usize = default_stack_trace_frames/;"	field
stack_value	$ZIGLIB/std/dwarf/OP.zig	/^pub const stack_value = 0x9f/;"	constant
stacksize	$ZIGLIB/std/macho.zig	/stacksize: u64 = 0/;"	field
stage1	$ZIGLIB/std/builtin.zig	/stage1 = 1/;"	field
stage2_aarch64	$ZIGLIB/std/builtin.zig	/stage2_aarch64 = 7/;"	field
stage2_arm	$ZIGLIB/std/builtin.zig	/stage2_arm = 5/;"	field
stage2_c	$ZIGLIB/std/builtin.zig	/stage2_c = 3/;"	field
stage2_llvm	$ZIGLIB/std/builtin.zig	/stage2_llvm = 2/;"	field
stage2_riscv64	$ZIGLIB/std/builtin.zig	/stage2_riscv64 = 9/;"	field
stage2_sparc64	$ZIGLIB/std/builtin.zig	/stage2_sparc64 = 10/;"	field
stage2_wasm	$ZIGLIB/std/builtin.zig	/stage2_wasm = 4/;"	field
stage2_x86	$ZIGLIB/std/builtin.zig	/stage2_x86 = 8/;"	field
stage2_x86_64	$ZIGLIB/std/builtin.zig	/stage2_x86_64 = 6/;"	field
stale	$ZIGLIB/std/fs.zig	/stale/;"	field
stall	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/stall: *const fn (microseconds: usize) callconv(.C) Status/;"	field
standard	$ZIGLIB/std/base64.zig	/^pub const standard = Codecs{$/;"	constant
standardBase64DecoderWithIgnore	$ZIGLIB/std/base64.zig	/^fn standardBase64DecoderWithIgnore(ignore: []const u8) Base64DecoderWithIgnore {$/;"	function
standardDynamicLinkerPath	$ZIGLIB/std/target.zig	/pub fn standardDynamicLinkerPath(self: Target) DynamicLinker {$/;"	function
standardOptimizeOption	$ZIGLIB/std/Build.zig	/^pub fn standardOptimizeOption(self: *Build, options: StandardOptimizeOptionOptions) std.builtin.Mode {$/;"	function
standardTargetOptions	$ZIGLIB/std/Build.zig	/^pub fn standardTargetOptions(self: *Build, args: StandardTargetOptionsArgs) CrossTarget {$/;"	function
standardTimeIndicator	$ZIGLIB/std/tz.zig	/pub fn standardTimeIndicator(self: Timetype) bool {$/;"	function
standard_alphabet_chars	$ZIGLIB/std/base64.zig	/^pub const standard_alphabet_chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+\/".*/;"	constant
standard_error_handle	$ZIGLIB/std/os/uefi/tables/system_table.zig	/standard_error_handle: ?Handle/;"	field
standard_ld_basename	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/const standard_ld_basename = fs.path.basename(ld_info.ld.get().?)/;"	constant
standard_no_pad	$ZIGLIB/std/base64.zig	/^pub const standard_no_pad = Codecs{$/;"	constant
standard_opcode_lengths	$ZIGLIB/std/dwarf.zig	/const standard_opcode_lengths = try allocator.alloc(u8, opcode_base - 1)/;"	constant
star	$ZIGLIB/std/crypto/aes_ocb.zig	/var star: Block = undefined/;"	variable
start	$ZIGLIB/std/zig/tokenizer.zig	/start: usize/;"	field
start0	$ZIGLIB/std/crypto/salsa20.zig	/const start0 = diag0/;"	constant
start1	$ZIGLIB/std/crypto/salsa20.zig	/const start1 = diag1/;"	constant
start2	$ZIGLIB/std/crypto/salsa20.zig	/const start2 = diag2/;"	constant
start3	$ZIGLIB/std/crypto/salsa20.zig	/const start3 = diag3/;"	constant
startCpuBoundOperation	$ZIGLIB/std/event/loop.zig	/pub fn startCpuBoundOperation() void {$/;"	function
startFlag	$ZIGLIB/std/crypto/blake3.zig	/fn startFlag(self: *const ChunkState) u8 {$/;"	function
startGets	$ZIGLIB/std/atomic/stack.zig	/^fn startGets(ctx: *Context) u8 {$/;"	function
startImage	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/startImage: *const fn (image_handle: Handle, exit_data_size: ?*usize, exit_data: ?*[*]u16) callconv(.C) Status/;"	field
startInstrumentation	$ZIGLIB/std/valgrind/callgrind.zig	/^pub fn startInstrumentation() void {$/;"	function
startPuts	$ZIGLIB/std/atomic/stack.zig	/^fn startPuts(ctx: *Context) u8 {$/;"	function
start_address	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/start_address: u64 align(1)/;"	field
start_barrier	$ZIGLIB/std/Thread/ResetEvent.zig	/start_barrier: Barrier = .{}/;"	field
start_bit	$ZIGLIB/std/bit_set.zig	/const start_bit = @truncate(ShiftInt, range.start)/;"	constant
start_brk	$ZIGLIB/std/os/linux.zig	/start_brk: u64/;"	field
start_byte	$ZIGLIB/std/packed_int_array.zig	/const start_byte = bit_index \/ 8/;"	constant
start_code	$ZIGLIB/std/os/linux.zig	/start_code: u64/;"	field
start_col_index	$ZIGLIB/std/pdb.zig	/const start_col_index = start_line_index + @sizeOf(LineNumberEntry) * block_hdr.NumLines/;"	constant
start_data	$ZIGLIB/std/os/linux.zig	/start_data: u64/;"	field
start_end	$ZIGLIB/std/dwarf.zig	/pub const start_end = 0x07/;"	constant
start_i	$ZIGLIB/std/debug.zig	/var start_i: usize = if (start_addr) |saddr| blk: {$/;"	variable
start_id	$ZIGLIB/std/os/linux/bpf.zig	/start_id: u32/;"	field
start_index	$ZIGLIB/std/testing.zig	/start_index: usize/;"	field
start_index_greater_than_end	$ZIGLIB/std/builtin.zig	/pub const start_index_greater_than_end = "start index is larger than end index"/;"	constant
start_last	$ZIGLIB/std/zig/render.zig	/const start_last = tree.lastToken(slice.ast.start)/;"	constant
start_length	$ZIGLIB/std/dwarf.zig	/pub const start_length = 0x08/;"	constant
start_line_index	$ZIGLIB/std/pdb.zig	/const start_line_index = line_index/;"	constant
start_mask_index	$ZIGLIB/std/bit_set.zig	/const start_mask_index = maskIndex(range.start)/;"	constant
start_of_host	$ZIGLIB/std/Uri.zig	/var start_of_host: usize = 0/;"	variable
start_ptr	$ZIGLIB/std/heap/general_purpose_allocator.zig	/const start_ptr = @ptrCast([*]u8, bucket) + bucketStackFramesStart(size_class)/;"	constant
start_row	$ZIGLIB/std/compress/lzma/vec2d.zig	/const start_row = try math.mul(usize, row, self.cols)/;"	constant
start_scope	$ZIGLIB/std/dwarf/AT.zig	/^pub const start_scope = 0x2c/;"	constant
start_stack	$ZIGLIB/std/os/linux.zig	/start_stack: u64/;"	field
start_suspended	$ZIGLIB/std/child_process.zig	/start_suspended: bool = false/;"	field
start_sym_name	$ZIGLIB/std/start.zig	/^const start_sym_name = if (native_arch.isMIPS()) "__start" else "_start"/;"	constant
start_wait_event	$ZIGLIB/std/Thread.zig	/start_wait_event: ResetEvent = .{}/;"	field
started	$ZIGLIB/std/time.zig	/started: Instant/;"	field
startsWith	$ZIGLIB/std/mem.zig	/^pub fn startsWith(comptime T: type, haystack: []const T, needle: []const T) bool {$/;"	function
startsWithIgnoreCase	$ZIGLIB/std/ascii.zig	/^pub fn startsWithIgnoreCase(haystack: []const u8, needle: []const u8) bool {$/;"	function
startx_endx	$ZIGLIB/std/dwarf.zig	/pub const startx_endx = 0x02/;"	constant
startx_length	$ZIGLIB/std/dwarf.zig	/pub const startx_length = 0x03/;"	constant
stat	$ZIGLIB/std/os/linux/syscalls.zig	/stat = Linux + 4/;"	field
stat64	$ZIGLIB/std/os/linux/syscalls.zig	/stat64 = Linux + 213/;"	field
statFile	$ZIGLIB/std/fs.zig	/pub fn statFile(self: Dir, sub_path: []const u8) StatFileError!Stat {$/;"	function
stat_info	$ZIGLIB/std/fs.zig	/var stat_info: os.Stat = undefined/;"	variable
stat_size	$ZIGLIB/std/fs.zig	/const stat_size = size_hint orelse math.cast(usize, try file.getEndPos()) orelse$/;"	constant
statbuf	$ZIGLIB/std/os.zig	/var statbuf: fdstat_t = undefined/;"	variable
state	$ZIGLIB/std/zig/tokenizer.zig	/var state: State = .start/;"	variable
stateOrProvinceName	$ZIGLIB/std/crypto/Certificate.zig	/stateOrProvinceName/;"	field
state_create	$ZIGLIB/std/c/solaris.zig	/state_create: u8/;"	field
state_diff_lla	$ZIGLIB/std/c/solaris.zig	/state_diff_lla: u8/;"	field
state_index	$ZIGLIB/std/json/write_stream.zig	/state_index: usize/;"	field
state_same_lla	$ZIGLIB/std/c/solaris.zig	/state_same_lla: u8/;"	field
statement	$ZIGLIB/std/zig/Parse.zig	/const statement = try p.parseStatement(allow_defer_var)/;"	constant
statements	$ZIGLIB/std/zig/render.zig	/const statements = tree.extra_data[datas[node].lhs..datas[node].rhs]/;"	constant
statfs	$ZIGLIB/std/os/linux/syscalls.zig	/statfs = Linux + 99/;"	field
statfs64	$ZIGLIB/std/os/linux/syscalls.zig	/statfs64 = Linux + 255/;"	field
static	$ZIGLIB/std/os/linux/bpf/btf.zig	/static/;"	field
staticLibSuffix	$ZIGLIB/std/zig/CrossTarget.zig	/^pub fn staticLibSuffix(self: CrossTarget) [:0]const u8 {$/;"	function
staticLibSuffix_os_abi	$ZIGLIB/std/target.zig	/pub fn staticLibSuffix_os_abi(os_tag: Os.Tag, abi: Abi) [:0]const u8 {$/;"	function
static_ip_address	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/static_ip_address: IpType/;"	field
static_link	$ZIGLIB/std/dwarf/AT.zig	/^pub const static_link = 0x48/;"	constant
static_path	$ZIGLIB/std/Build/CompileStep.zig	/static_path: FileSource/;"	field
static_suffix	$ZIGLIB/std/zig/CrossTarget.zig	/const static_suffix = switch (linkage) {$/;"	constant
stationAddress	$ZIGLIB/std/os/uefi/protocols/simple_network_protocol.zig	/pub fn stationAddress(self: *const SimpleNetworkProtocol, reset_flag: bool, new: ?*const MacAddress) Status {$/;"	function
station_address	$ZIGLIB/std/os/uefi/protocols/udp6_protocol.zig	/station_address: Ip6Address/;"	field
station_port	$ZIGLIB/std/os/uefi/protocols/udp6_protocol.zig	/station_port: u16/;"	field
statistics	$ZIGLIB/std/os/uefi/protocols/simple_network_protocol.zig	/pub fn statistics(self: *const SimpleNetworkProtocol, reset_flag: bool, statistics_size: ?*usize, statistics_table: ?*NetworkStatistics) Status {$/;"	function
statmode	$ZIGLIB/std/fs.zig	/const statmode = stat_info.mode & os.S.IFMT/;"	constant
status	$ZIGLIB/std/os/uefi/protocols/managed_network_protocol.zig	/status: Status/;"	field
status2	$ZIGLIB/std/os/linux/bpf.zig	/const status2 = try map_get_next_key(map, &lookup_key, &next_key)/;"	constant
statusToTerm	$ZIGLIB/std/child_process.zig	/fn statusToTerm(status: u32) Term {$/;"	function
status_flag	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/status_flag: u16 align(1)/;"	field
status_request	$ZIGLIB/std/crypto/tls.zig	/status_request = 5/;"	field
statx	$ZIGLIB/std/os/linux/syscalls.zig	/statx = Linux + 366/;"	field
statx_timestamp	$ZIGLIB/std/os/linux.zig	/^pub const statx_timestamp = extern struct {$/;"	struct
stdIoActionToBehavior	$ZIGLIB/std/Build/RunStep.zig	/^fn stdIoActionToBehavior(action: StdIoAction) std.ChildProcess.StdIo {$/;"	function
std_err	$ZIGLIB/std/os/uefi/tables/system_table.zig	/std_err: ?*SimpleTextOutputProtocol/;"	field
stderr	$ZIGLIB/std/testing.zig	/const stderr = std.io.getStdErr()/;"	constant
stderr_action	$ZIGLIB/std/Build/RunStep.zig	/^stderr_action: StdIoAction = .inherit/;"	field
stderr_behavior	$ZIGLIB/std/child_process.zig	/stderr_behavior: StdIo/;"	field
stderr_in	$ZIGLIB/std/child_process.zig	/const stderr_in = child.stderr.?.reader()/;"	constant
stderr_mutex	$ZIGLIB/std/debug.zig	/^var stderr_mutex = std.Thread.Mutex{}/;"	variable
stderr_pipe	$ZIGLIB/std/child_process.zig	/const stderr_pipe = if (self.stderr_behavior == StdIo.Pipe) try os.pipe2(pipe_flags) else undefined/;"	constant
stdin	$ZIGLIB/std/os/uefi/protocols/shell_parameters_protocol.zig	/stdin: FileHandle/;"	field
stdin_behavior	$ZIGLIB/std/child_process.zig	/stdin_behavior: StdIo/;"	field
stdin_pipe	$ZIGLIB/std/child_process.zig	/const stdin_pipe = if (self.stdin_behavior == StdIo.Pipe) try os.pipe2(pipe_flags) else undefined/;"	constant
stdout	$ZIGLIB/std/os/uefi/protocols/shell_parameters_protocol.zig	/stdout: FileHandle/;"	field
stdout_action	$ZIGLIB/std/Build/RunStep.zig	/^stdout_action: StdIoAction = .inherit/;"	field
stdout_behavior	$ZIGLIB/std/child_process.zig	/stdout_behavior: StdIo/;"	field
stdout_in	$ZIGLIB/std/child_process.zig	/const stdout_in = child.stdout.?.reader()/;"	constant
stdout_pipe	$ZIGLIB/std/child_process.zig	/const stdout_pipe = if (self.stdout_behavior == StdIo.Pipe) try os.pipe2(pipe_flags) else undefined/;"	constant
stdtime	$ZIGLIB/std/tz.zig	/const stdtime = try reader.readByte()/;"	constant
stem	$ZIGLIB/std/fs/path.zig	/^pub fn stem(path: []const u8) []const u8 {$/;"	function
step	$ZIGLIB/std/rand/Isaac64.zig	/^fn step(self: *Isaac64, mix: u64, base: usize, comptime m1: usize, comptime m2: usize) void {$/;"	function
step_copy	$ZIGLIB/std/Build/CompileStep.zig	/const step_copy = switch (step.id) {$/;"	constant
step_info	$ZIGLIB/std/Build.zig	/const step_info = self.allocator.create(TopLevelStep) catch @panic("OOM")/;"	constant
step_state	$ZIGLIB/std/compress/deflate/decompressor.zig	/step_state: DecompressorState/;"	field
stfiwx	$ZIGLIB/std/target/powerpc.zig	/stfiwx/;"	field
sticky	$ZIGLIB/compiler_rt/truncf.zig	/const sticky: src_rep_t = @boolToInt(significand << @intCast(SrcShift, srcBits - shift) != 0)/;"	constant
stime	$ZIGLIB/std/os/linux/syscalls.zig	/stime = Linux + 25/;"	field
stmt_list	$ZIGLIB/std/dwarf/AT.zig	/^pub const stmt_list = 0x10/;"	constant
stoney	$ZIGLIB/std/target/amdgpu.zig	/pub const stoney = CpuModel{$/;"	constant
stop	$ZIGLIB/std/os/uefi/protocols/simple_network_protocol.zig	/pub fn stop(self: *const SimpleNetworkProtocol) Status {$/;"	function
stopInstrumentation	$ZIGLIB/std/valgrind/callgrind.zig	/^pub fn stopInstrumentation() void {$/;"	function
stop_bits	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/stop_bits: StopBits/;"	field
stopped	$ZIGLIB/std/os/linux/io_uring.zig	/const stopped = std.time.milliTimestamp()/;"	constant
storable	$ZIGLIB/std/compress/deflate/huffman_bit_writer.zig	/storable: bool/;"	field
storage	$ZIGLIB/std/os/windows/ws2_32.zig	/pub const storage = extern struct {$/;"	struct
storage_class	$ZIGLIB/std/coff.zig	/storage_class: StorageClass/;"	field
storage_protocol	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/storage_protocol: bool/;"	field
store	$ZIGLIB/std/crypto/Certificate/Bundle.zig	/const store = w.crypt32.CertOpenSystemStoreW(null, &root) orelse switch (GetLastError()) {$/;"	constant
storeHuff	$ZIGLIB/std/compress/deflate/compressor.zig	/fn storeHuff(self: *Self) !void {$/;"	function
storeUnchecked	$ZIGLIB/std/atomic/Atomic.zig	/pub inline fn storeUnchecked(self: *Self, value: T) void {$/;"	function
store_size	$ZIGLIB/std/mem.zig	/const store_size = (@bitSizeOf(T) + 7) \/ 8/;"	constant
store_tail_bits	$ZIGLIB/std/mem.zig	/const store_tail_bits = @intCast(u3, (store_size * 8) - bit_count)/;"	constant
storedSizeFits	$ZIGLIB/std/compress/deflate/huffman_bit_writer.zig	/fn storedSizeFits(in: ?[]const u8) StoredSize {$/;"	function
stored_size	$ZIGLIB/std/compress/deflate/huffman_bit_writer.zig	/var stored_size = storedSizeFits(input)/;"	variable
stored_size_ret	$ZIGLIB/std/compress/deflate/huffman_bit_writer.zig	/var stored_size_ret = storedSizeFits(input)/;"	variable
str2	$ZIGLIB/std/crypto/scrypt.zig	/const str2 = try CryptFormatHasher.create(alloc, password, params, &buf)/;"	constant
strHash	$ZIGLIB/std/crypto/scrypt.zig	/^pub fn strHash($/;"	function
strHashInternal	$ZIGLIB/std/crypto/bcrypt.zig	/fn strHashInternal($/;"	function
strVerify	$ZIGLIB/std/crypto/scrypt.zig	/^pub fn strVerify($/;"	function
str_buf	$ZIGLIB/std/testing.zig	/var str_buf: [100]u8 = undefined/;"	variable
str_len	$ZIGLIB/std/testing.zig	/const str_len = std.fmt.formatIntBuf(&str_buf, args_i, 10, .lower, .{})/;"	constant
str_off	$ZIGLIB/std/os/linux/bpf/btf.zig	/str_off: u32/;"	field
str_offsets_base	$ZIGLIB/std/dwarf/AT.zig	/^pub const str_offsets_base = 0x72/;"	constant
str_section_off	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/const str_section_off = shoff + @as(u64, shentsize) * @as(u64, shstrndx)/;"	constant
str_shdr	$ZIGLIB/std/debug.zig	/const str_shdr = @ptrCast($/;"	constant
straddleByte	$ZIGLIB/std/crypto/tls/Client.zig	/^fn straddleByte(s1: []const u8, s2: []const u8, index: usize) u8 {$/;"	function
stream	$ZIGLIB/std/pdb.zig	/var stream = self.getStream(StreamType.Pdb) orelse$/;"	variable
stream_count	$ZIGLIB/std/pdb.zig	/const stream_count = try directory.reader().readIntLittle(u32)/;"	constant
stream_sizes	$ZIGLIB/std/pdb.zig	/const stream_sizes = try allocator.alloc(u32, stream_count)/;"	constant
streams	$ZIGLIB/std/pdb.zig	/streams: []MsfStream/;"	field
streetAddress	$ZIGLIB/std/crypto/Certificate.zig	/streetAddress/;"	field
stretch	$ZIGLIB/std/crypto/aes_ocb.zig	/var stretch = (@as(u192, ktop) << 64) | @as(u192, @truncate(u64, ktop >> 64) ^ @truncate(u64, ktop >> 56))/;"	variable
strict_align	$ZIGLIB/std/target/arm.zig	/strict_align/;"	field
string	$ZIGLIB/std/math/big/int.zig	/const string = try allocator.alloc(u8, self.sizeInBaseUpperBound(base))/;"	constant
stringToEnum	$ZIGLIB/std/meta.zig	/^pub fn stringToEnum(comptime T: type, str: []const u8) ?T {$/;"	function
stringToPoints	$ZIGLIB/std/crypto/25519/edwards25519.zig	/fn stringToPoints(comptime n: usize, ctx: []const u8, s: []const u8) [n]Edwards25519 {$/;"	function
string_escapes	$ZIGLIB/std/json.zig	/string_escapes: StringEscapes/;"	field
string_info_offset	$ZIGLIB/std/os/uefi/protocols/hii.zig	/string_info_offset: u32/;"	field
string_last_was_high_surrogate	$ZIGLIB/std/json.zig	/string_last_was_high_surrogate: bool/;"	field
string_length	$ZIGLIB/std/dwarf/AT.zig	/^pub const string_length = 0x19/;"	constant
string_length_bit_size	$ZIGLIB/std/dwarf/AT.zig	/^pub const string_length_bit_size = 0x6f/;"	constant
string_length_byte_size	$ZIGLIB/std/dwarf/AT.zig	/^pub const string_length_byte_size = 0x70/;"	constant
string_literal	$ZIGLIB/std/zig/tokenizer.zig	/string_literal/;"	field
string_literal_backslash	$ZIGLIB/std/zig/tokenizer.zig	/string_literal_backslash/;"	field
string_table	$ZIGLIB/std/pdb.zig	/string_table: ?*MsfStream/;"	field
string_table_index	$ZIGLIB/std/pdb.zig	/const string_table_index = str_tab_index: {$/;"	constant
string_type	$ZIGLIB/std/dwarf/TAG.zig	/^pub const string_type = 0x12/;"	constant
string_unicode_codepoint	$ZIGLIB/std/json.zig	/string_unicode_codepoint: u21/;"	field
stringify	$ZIGLIB/std/json/write_stream.zig	/fn stringify(self: *Self, value: anytype) !void {$/;"	function
stringifyAlloc	$ZIGLIB/std/json.zig	/^pub fn stringifyAlloc(allocator: std.mem.Allocator, value: anytype, options: StringifyOptions) ![]const u8 {$/;"	function
strings	$ZIGLIB/std/os/uefi/protocols/hii.zig	/pub const strings: u8 = 0x4/;"	constant
strip	$ZIGLIB/std/Build/CompileStep.zig	/^strip: ?bool/;"	field
stripComponents	$ZIGLIB/std/tar.zig	/^fn stripComponents(path: []const u8, count: u32) ![]const u8 {$/;"	function
stripOptionalOrErrorUnionSpec	$ZIGLIB/std/fmt.zig	/^fn stripOptionalOrErrorUnionSpec(comptime fmt: []const u8) []const u8 {$/;"	function
strip_components	$ZIGLIB/std/tar.zig	/strip_components: u32 = 0/;"	field
stroff	$ZIGLIB/std/macho.zig	/stroff: u32 = 0/;"	field
strong_linkage	$ZIGLIB/compiler_rt/stack_probe.zig	/^const strong_linkage: std.builtin.GlobalLinkage = if (builtin.is_test) .Internal else .Strong/;"	constant
strongarm	$ZIGLIB/std/target/arm.zig	/pub const strongarm = CpuModel{$/;"	constant
strongarm110	$ZIGLIB/std/target/arm.zig	/pub const strongarm110 = CpuModel{$/;"	constant
strongarm1100	$ZIGLIB/std/target/arm.zig	/pub const strongarm1100 = CpuModel{$/;"	constant
strongarm1110	$ZIGLIB/std/target/arm.zig	/pub const strongarm1110 = CpuModel{$/;"	constant
strp	$ZIGLIB/std/dwarf/FORM.zig	/^pub const strp = 0x0e/;"	constant
strp_sup	$ZIGLIB/std/dwarf/FORM.zig	/^pub const strp_sup = 0x1d/;"	constant
strsize	$ZIGLIB/std/macho.zig	/strsize: u32 = 0/;"	field
strtab	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/const strtab = strtab_buf[0..strtab_read_len]/;"	constant
strtab_buf	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/var strtab_buf: [4096:0]u8 = undefined/;"	variable
strtab_len	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/const strtab_len = std.math.min(rp_max_size, strtab_buf.len)/;"	constant
strtab_offset	$ZIGLIB/std/pdb.zig	/const strtab_offset = @sizeOf(PDBStringTableHeader) + chksum_hdr.FileNameOffset/;"	constant
strtab_read_len	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/const strtab_read_len = try preadMin(file, &strtab_buf, rpoff_file, strtab_len)/;"	constant
strtol	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const strtol = @intToPtr(fn (buf: *const u8, buf_len: c_ulong, flags: u64, res: *c_long) c_long, 105)/;"	constant
strtoul	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const strtoul = @intToPtr(fn (buf: *const u8, buf_len: c_ulong, flags: u64, res: *c_ulong) c_long, 106)/;"	constant
struct	$ZIGLIB/std/os/linux/bpf/btf.zig	/@"struct"/;"	field
structInit	$ZIGLIB/std/zig/Ast.zig	/^pub fn structInit(tree: Ast, node: Node.Index) full.StructInit {$/;"	function
structInitDot	$ZIGLIB/std/zig/Ast.zig	/^pub fn structInitDot(tree: Ast, node: Node.Index) full.StructInit {$/;"	function
structInitDotTwo	$ZIGLIB/std/zig/Ast.zig	/^pub fn structInitDotTwo(tree: Ast, buffer: *[2]Node.Index, node: Node.Index) full.StructInit {$/;"	function
structInitOne	$ZIGLIB/std/zig/Ast.zig	/^pub fn structInitOne(tree: Ast, buffer: *[1]Node.Index, node: Node.Index) full.StructInit {$/;"	function
struct_buf_len	$ZIGLIB/std/os.zig	/const struct_buf_len = @sizeOf(windows.FILE_RENAME_INFORMATION) + (MAX_PATH_BYTES - 1)/;"	constant
struct_init	$ZIGLIB/std/zig/Ast.zig	/struct_init/;"	field
struct_init_comma	$ZIGLIB/std/zig/Ast.zig	/struct_init_comma/;"	field
struct_init_dot	$ZIGLIB/std/zig/Ast.zig	/struct_init_dot/;"	field
struct_init_dot_comma	$ZIGLIB/std/zig/Ast.zig	/struct_init_dot_comma/;"	field
struct_init_dot_two	$ZIGLIB/std/zig/Ast.zig	/struct_init_dot_two/;"	field
struct_init_dot_two_comma	$ZIGLIB/std/zig/Ast.zig	/struct_init_dot_two_comma/;"	field
struct_init_one	$ZIGLIB/std/zig/Ast.zig	/struct_init_one/;"	field
struct_init_one_comma	$ZIGLIB/std/zig/Ast.zig	/struct_init_one_comma/;"	field
struct_len	$ZIGLIB/std/os.zig	/const struct_len = @sizeOf(windows.FILE_RENAME_INFORMATION) - 1 + new_path_w.len * 2/;"	constant
struct_ops	$ZIGLIB/std/os/linux/bpf.zig	/struct_ops/;"	field
structsize	$ZIGLIB/std/c/freebsd.zig	/structsize: c_int/;"	field
structure	$ZIGLIB/std/mem.zig	/var structure: T = undefined/;"	variable
structure_type	$ZIGLIB/std/dwarf/TAG.zig	/^pub const structure_type = 0x13/;"	constant
strx	$ZIGLIB/std/dwarf/FORM.zig	/^pub const strx = 0x1a/;"	constant
strx1	$ZIGLIB/std/dwarf/FORM.zig	/^pub const strx1 = 0x25/;"	constant
strx2	$ZIGLIB/std/dwarf/FORM.zig	/^pub const strx2 = 0x26/;"	constant
strx3	$ZIGLIB/std/dwarf/FORM.zig	/^pub const strx3 = 0x27/;"	constant
strx4	$ZIGLIB/std/dwarf/FORM.zig	/^pub const strx4 = 0x28/;"	constant
stty	$ZIGLIB/std/os/linux/syscalls.zig	/stty = Linux + 31/;"	field
stub_node	$ZIGLIB/std/treap.zig	/var stub_node: TestNode = undefined/;"	variable
stuff_to_free	$ZIGLIB/std/heap/general_purpose_allocator.zig	/var stuff_to_free = std.ArrayList([]align(16) u8).init(debug_allocator)/;"	variable
style	$ZIGLIB/std/os/windows/user32.zig	/style: UINT/;"	field
subCarry	$ZIGLIB/std/math/big/int.zig	/fn subCarry(r: *Mutable, a: Const, b: Const) bool {$/;"	function
subMixed	$ZIGLIB/std/crypto/pcurves/secp256k1.zig	/pub fn subMixed(p: Secp256k1, q: AffineCoordinates) Secp256k1 {$/;"	function
subMulLimbWithBorrow	$ZIGLIB/std/math/big/int.zig	/^fn subMulLimbWithBorrow(a: Limb, b: Limb, c: Limb, carry: *Limb) Limb {$/;"	function
subSat	$ZIGLIB/std/math/big/int.zig	/pub fn subSat(r: *Mutable, a: Const, b: Const, signedness: Signedness, bit_count: usize) void {$/;"	function
subWrap	$ZIGLIB/std/math/big/int.zig	/pub fn subWrap(r: *Mutable, a: Const, b: Const, signedness: Signedness, bit_count: usize) bool {$/;"	function
sub_amt	$ZIGLIB/std/http/Client.zig	/const sub_amt = @intCast(usize, @min(req.response.next_chunk_length, in.len))/;"	constant
sub_buf	$ZIGLIB/std/crypto/tls.zig	/const sub_buf = d.buf[d.idx..end]/;"	constant
sub_builder	$ZIGLIB/std/Build.zig	/const sub_builder = b.createChild(name, build_root, args) catch @panic("unhandled error")/;"	constant
sub_chunks	$ZIGLIB/std/compress/deflate/decompressor.zig	/sub_chunks: ArrayList(u32) = undefined/;"	field
sub_ctx	$ZIGLIB/std/multi_array_list.zig	/sub_ctx: @TypeOf(ctx)/;"	field
sub_dir_handle	$ZIGLIB/std/os.zig	/const sub_dir_handle = windows.OpenFile(sub_path_w, .{$/;"	constant
sub_dir_path	$ZIGLIB/std/Build/ConfigHeaderStep.zig	/const sub_dir_path = if (std.fs.path.dirname(self.include_path)) |d|$/;"	constant
sub_dir_path_c	$ZIGLIB/std/os.zig	/const sub_dir_path_c = try toPosixPath(sub_dir_path)/;"	constant
sub_dir_path_w	$ZIGLIB/std/os.zig	/const sub_dir_path_w = try windows.sliceToPrefixedFileW(sub_dir_path)/;"	constant
sub_expr_buffer	$ZIGLIB/std/zig/render.zig	/var sub_expr_buffer = std.ArrayList(u8).init(gpa)/;"	variable
sub_expr_buffer_starts	$ZIGLIB/std/zig/render.zig	/const sub_expr_buffer_starts = try gpa.alloc(usize, section_exprs.len + 1)/;"	constant
sub_index	$ZIGLIB/std/json.zig	/const sub_index = @intCast(ElementShiftAmountType, self.len % element_bitcount)/;"	constant
sub_items	$ZIGLIB/std/array_list.zig	/sub_items: ArrayListUnmanaged(ItemUnmanaged)/;"	field
sub_name	$ZIGLIB/std/Build/CompileStep.zig	/const sub_name = keys[i]/;"	constant
sub_op	$ZIGLIB/std/dwarf.zig	/var sub_op = try in.readByte()/;"	variable
sub_path	$ZIGLIB/std/testing.zig	/var sub_path: [TmpIterableDir.sub_path_len]u8 = undefined/;"	variable
sub_path_c	$ZIGLIB/std/fs.zig	/const sub_path_c = try os.toPosixPath(sub_path)/;"	constant
sub_path_len	$ZIGLIB/std/testing.zig	/const sub_path_len = std.fs.base64_encoder.calcSize(random_bytes_count)/;"	constant
sub_path_w	$ZIGLIB/std/fs.zig	/const sub_path_w = try os.windows.sliceToPrefixedFileW(sub_path)/;"	constant
sub_sat	$ZIGLIB/std/zig/Ast.zig	/sub_sat/;"	field
sub_set	$ZIGLIB/std/zig/CrossTarget.zig	/const sub_set = &result.cpu_features_sub/;"	constant
sub_task_names	$ZIGLIB/std/Progress.zig	/const sub_task_names = [_][]const u8{$/;"	constant
sub_ver	$ZIGLIB/std/zig/system/windows.zig	/const sub_ver: u8 = if (os_ver >= 0x0A00) subver: {$/;"	constant
sub_wrap	$ZIGLIB/std/zig/Ast.zig	/sub_wrap/;"	field
subborrowxU64	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/^inline fn subborrowxU64(out1: *u64, out2: *u1, arg1: u1, arg2: u64, arg3: u64) void {$/;"	function
subclockflags_t	$ZIGLIB/std/os/wasi.zig	/^pub const subclockflags_t = u16/;"	constant
subject	$ZIGLIB/std/crypto/tls/Client.zig	/const subject = try subject_cert.parse()/;"	constant
subjectAltName	$ZIGLIB/std/crypto/Certificate.zig	/pub fn subjectAltName(p: Parsed) []const u8 {$/;"	function
subject_alt_name	$ZIGLIB/std/crypto/Certificate.zig	/subject_alt_name/;"	field
subject_alt_name_slice	$ZIGLIB/std/crypto/Certificate.zig	/var subject_alt_name_slice = der.Element.Slice.empty/;"	variable
subject_cert	$ZIGLIB/std/crypto/tls/Client.zig	/const subject_cert: Certificate = .{$/;"	constant
subject_key_identifier	$ZIGLIB/std/crypto/Certificate/Bundle/macos.zig	/subject_key_identifier: u32/;"	field
subject_slice	$ZIGLIB/std/crypto/Certificate.zig	/subject_slice: Slice/;"	field
subkey	$ZIGLIB/std/zig/system/windows.zig	/var subkey: [max_cpu_buf + 1]u16 = undefined/;"	variable
subkey_len	$ZIGLIB/std/zig/system/windows.zig	/const subkey_len = try std.unicode.utf8ToUtf16Le(&subkey, next_cpu)/;"	constant
subkeys	$ZIGLIB/std/crypto/bcrypt.zig	/subkeys: [18]u32 = [18]u32{$/;"	field
submit	$ZIGLIB/std/os/linux/io_uring.zig	/pub fn submit(self: *IO_Uring) !u32 {$/;"	function
submit_and_wait	$ZIGLIB/std/os/linux/io_uring.zig	/pub fn submit_and_wait(self: *IO_Uring, wait_nr: u32) !u32 {$/;"	function
submitted	$ZIGLIB/std/os/linux/io_uring.zig	/const submitted = self.flush_sq()/;"	constant
subnet	$ZIGLIB/std/c/solaris.zig	/subnet: sockaddr.storage/;"	field
subnet_mask	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/subnet_mask: u32 align(1)/;"	field
subnonce	$ZIGLIB/std/crypto/chacha20.zig	/var subnonce: [12]u8 = undefined/;"	variable
suboXi4_generic	$ZIGLIB/compiler_rt/subo.zig	/^inline fn suboXi4_generic(comptime ST: type, a: ST, b: ST, overflow: *c_int) ST {$/;"	function
subpage_prot	$ZIGLIB/std/os/linux/syscalls.zig	/subpage_prot = 310/;"	field
subprogram	$ZIGLIB/std/dwarf/TAG.zig	/^pub const subprogram = 0x2e/;"	constant
subrange_type	$ZIGLIB/std/dwarf/TAG.zig	/^pub const subrange_type = 0x21/;"	constant
subroutine	$ZIGLIB/std/dwarf/TAG.zig	/^pub const subroutine = 0x14/;"	constant
subroutine_type	$ZIGLIB/std/dwarf/TAG.zig	/^pub const subroutine_type = 0x15/;"	constant
subscr_data	$ZIGLIB/std/dwarf/AT.zig	/^pub const subscr_data = 0x0a/;"	constant
subscription_clock_t	$ZIGLIB/std/os/wasi.zig	/^pub const subscription_clock_t = extern struct {$/;"	struct
subscription_fd_readwrite_t	$ZIGLIB/std/os/wasi.zig	/^pub const subscription_fd_readwrite_t = extern struct {$/;"	struct
subscription_t	$ZIGLIB/std/os/wasi.zig	/^pub const subscription_t = extern struct {$/;"	struct
subscription_u_t	$ZIGLIB/std/os/wasi.zig	/^pub const subscription_u_t = extern struct {$/;"	struct
subscription_u_u_t	$ZIGLIB/std/os/wasi.zig	/^pub const subscription_u_u_t = extern union {$/;"	union
subsect_hdr	$ZIGLIB/std/pdb.zig	/const subsect_hdr = @ptrCast(*align(1) DebugSubsectionHeader, &subsect_info[sect_offset])/;"	constant
subsect_index	$ZIGLIB/std/pdb.zig	/const subsect_index = checksum_offset + block_hdr.NameIndex/;"	constant
subsect_info	$ZIGLIB/std/pdb.zig	/subsect_info: []u8/;"	field
subsection_end_index	$ZIGLIB/std/pdb.zig	/const subsection_end_index = sect_offset + subsect_hdr.Length/;"	constant
subsetOf	$ZIGLIB/std/enums.zig	/pub fn subsetOf(self: Self, other: Self) bool {$/;"	function
subsystem	$ZIGLIB/std/coff.zig	/subsystem: Subsystem/;"	field
subtraction	$ZIGLIB/compiler_rt/addf3.zig	/const subtraction = (aRep ^ bRep) & signBit != 0/;"	constant
subtype	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/var subtype = self.initSubtype(ufield.type)/;"	variable
subw	$ZIGLIB/std/crypto/aes/soft.zig	/const subw = struct {$/;"	constant
success	$ZIGLIB/std/zig/string_literal.zig	/success: u21/;"	field
success_is_stronger	$ZIGLIB/std/atomic/Atomic.zig	/comptime var success_is_stronger = switch (failure) {$/;"	variable
suffix	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/const suffix = ".so"/;"	constant
suffix_expr	$ZIGLIB/std/zig/Parse.zig	/const suffix_expr = try p.parseSuffixExpr()/;"	constant
suffix_op	$ZIGLIB/std/zig/Parse.zig	/const suffix_op = try p.parseSuffixOp(res)/;"	constant
suggestVectorSize	$ZIGLIB/std/simd.zig	/^pub fn suggestVectorSize(comptime T: type) ?usize {$/;"	function
suggestVectorSizeForCpu	$ZIGLIB/std/simd.zig	/^pub fn suggestVectorSizeForCpu(comptime T: type, comptime cpu: std.Target.Cpu) ?usize {$/;"	function
sum0	$ZIGLIB/compiler_rt/common.zig	/const sum0: u128 = @as(u128, product44)/;"	constant
sum1	$ZIGLIB/compiler_rt/common.zig	/const sum1: u128 = @as(u128, product34) +%$/;"	constant
sum2	$ZIGLIB/compiler_rt/common.zig	/const sum2: u128 = @as(u128, product24) +%$/;"	constant
sum3	$ZIGLIB/compiler_rt/common.zig	/const sum3: u128 = @as(u128, product14) +%$/;"	constant
sum4	$ZIGLIB/compiler_rt/common.zig	/const sum4: u128 = @as(u128, product13) +%$/;"	constant
sum5	$ZIGLIB/compiler_rt/common.zig	/const sum5: u128 = @as(u128, product12) +%$/;"	constant
sum6	$ZIGLIB/compiler_rt/common.zig	/const sum6: u128 = @as(u128, product11)/;"	constant
sum_size	$ZIGLIB/std/meta/trait.zig	/var sum_size = @as(usize, 0)/;"	variable
superblock	$ZIGLIB/std/pdb.zig	/const superblock = try in.readStruct(SuperBlock)/;"	constant
supersetOf	$ZIGLIB/std/enums.zig	/pub fn supersetOf(self: Self, other: Self) bool {$/;"	function
supersparc	$ZIGLIB/std/target/sparc.zig	/pub const supersparc = CpuModel{$/;"	constant
supported_groups	$ZIGLIB/std/crypto/tls.zig	/supported_groups = 10/;"	field
supported_version	$ZIGLIB/std/crypto/tls/Client.zig	/var supported_version: u16 = 0/;"	variable
supported_versions	$ZIGLIB/std/crypto/tls.zig	/supported_versions = 43/;"	field
supportsAddressSpace	$ZIGLIB/std/target.zig	/pub fn supportsAddressSpace(arch: Arch, address_space: std.builtin.AddressSpace) bool {$/;"	function
supportsAnsiEscapeCodes	$ZIGLIB/std/fs/file.zig	/pub fn supportsAnsiEscapeCodes(self: File) bool {$/;"	function
supportsNewStackCall	$ZIGLIB/std/target.zig	/pub fn supportsNewStackCall(self: Target) bool {$/;"	function
supports_alt_active	$ZIGLIB/std/os/uefi/protocols/absolute_pointer_protocol.zig	/supports_alt_active: bool/;"	field
supports_ansi_escape_codes	$ZIGLIB/std/Progress.zig	/^supports_ansi_escape_codes: bool = false/;"	field
supports_atomic_ops	$ZIGLIB/compiler_rt/atomics.zig	/^const supports_atomic_ops = switch (arch) {$/;"	constant
supports_malloc_size	$ZIGLIB/std/heap.zig	/pub const supports_malloc_size = true/;"	constant
supports_posix_memalign	$ZIGLIB/std/heap.zig	/pub const supports_posix_memalign = @hasDecl(c, "posix_memalign")/;"	constant
supports_pressure_as_z	$ZIGLIB/std/os/uefi/protocols/absolute_pointer_protocol.zig	/supports_pressure_as_z: bool/;"	field
supports_ulock_wait2	$ZIGLIB/std/Thread/Futex.zig	/const supports_ulock_wait2 = builtin.target.os.version_range.semver.min.major >= 11/;"	constant
suppressed	$ZIGLIB/std/valgrind/memcheck.zig	/suppressed: usize/;"	field
suseconds_t	$ZIGLIB/std/c/solaris.zig	/^pub const suseconds_t = i64/;"	constant
suspend	$ZIGLIB/std/zig/Ast.zig	/@"suspend"/;"	field
suspend_count	$ZIGLIB/std/c/darwin.zig	/suspend_count: mach_vm_size_t/;"	field
suspend_token	$ZIGLIB/std/zig/render.zig	/const suspend_token = main_tokens[node]/;"	constant
sve2	$ZIGLIB/std/target/aarch64.zig	/sve2/;"	field
sve2_aes	$ZIGLIB/std/target/aarch64.zig	/sve2_aes/;"	field
sve2_bitperm	$ZIGLIB/std/target/aarch64.zig	/sve2_bitperm/;"	field
sve2_sha3	$ZIGLIB/std/target/aarch64.zig	/sve2_sha3/;"	field
sve2_sm4	$ZIGLIB/std/target/aarch64.zig	/sve2_sm4/;"	field
swap	$ZIGLIB/std/sort.zig	/^fn swap($/;"	function
swapIfParentIsBetter	$ZIGLIB/std/priority_dequeue.zig	/fn swapIfParentIsBetter(self: *Self, child: T, child_index: usize, target_order: Order) void {$/;"	function
swapRemove	$ZIGLIB/std/multi_array_list.zig	/pub fn swapRemove(self: *Self, index: usize) void {$/;"	function
swapRemoveAdapted	$ZIGLIB/std/array_hash_map.zig	/pub fn swapRemoveAdapted(self: *Self, key: anytype, ctx: anytype) bool {$/;"	function
swapRemoveAt	$ZIGLIB/std/array_hash_map.zig	/pub fn swapRemoveAt(self: *Self, index: usize) void {$/;"	function
swapRemoveAtContext	$ZIGLIB/std/array_hash_map.zig	/pub fn swapRemoveAtContext(self: *Self, index: usize, ctx: Context) void {$/;"	function
swapRemoveContext	$ZIGLIB/std/array_hash_map.zig	/pub fn swapRemoveContext(self: *Self, key: K, ctx: Context) bool {$/;"	function
swapRemoveContextAdapted	$ZIGLIB/std/array_hash_map.zig	/pub fn swapRemoveContextAdapted(self: *Self, key: anytype, key_ctx: anytype, ctx: Context) bool {$/;"	function
swapcontext	$ZIGLIB/std/os/linux/syscalls.zig	/swapcontext = 249/;"	field
swapoff	$ZIGLIB/std/os/linux/syscalls.zig	/swapoff = Linux + 163/;"	field
swapon	$ZIGLIB/std/os/linux/syscalls.zig	/swapon = Linux + 87/;"	field
swapped	$ZIGLIB/std/bounded_array.zig	/const swapped = a.swapRemove(0)/;"	constant
swift	$ZIGLIB/std/target/arm.zig	/swift/;"	field
switch	$ZIGLIB/std/zig/Ast.zig	/@"switch"/;"	field
switchCase	$ZIGLIB/std/zig/Ast.zig	/^pub fn switchCase(tree: Ast, node: Node.Index) full.SwitchCase {$/;"	function
switchCaseOne	$ZIGLIB/std/zig/Ast.zig	/^pub fn switchCaseOne(tree: Ast, node: Node.Index) full.SwitchCase {$/;"	function
switch_case	$ZIGLIB/std/zig/Ast.zig	/switch_case/;"	field
switch_case_inline	$ZIGLIB/std/zig/Ast.zig	/switch_case_inline/;"	field
switch_case_inline_one	$ZIGLIB/std/zig/Ast.zig	/switch_case_inline_one/;"	field
switch_case_one	$ZIGLIB/std/zig/Ast.zig	/switch_case_one/;"	field
switch_comma	$ZIGLIB/std/zig/Ast.zig	/switch_comma/;"	field
switch_endian	$ZIGLIB/std/os/linux/syscalls.zig	/switch_endian = 363/;"	field
switch_range	$ZIGLIB/std/zig/Ast.zig	/switch_range/;"	field
switch_token	$ZIGLIB/std/zig/render.zig	/const switch_token = main_tokens[node]/;"	constant
switching_protocols	$ZIGLIB/std/http.zig	/switching_protocols = 101/;"	field
sym32	$ZIGLIB/std/target/mips.zig	/sym32/;"	field
symLink	$ZIGLIB/std/fs.zig	/pub fn symLink($/;"	function
symLinkAbsolute	$ZIGLIB/std/fs.zig	/^pub fn symLinkAbsolute(target_path: []const u8, sym_link_path: []const u8, flags: SymLinkFlags) !void {$/;"	function
symLinkAbsoluteW	$ZIGLIB/std/fs.zig	/^pub fn symLinkAbsoluteW(target_path_w: []const u16, sym_link_path_w: []const u16, flags: SymLinkFlags) !void {$/;"	function
symLinkAbsoluteZ	$ZIGLIB/std/fs.zig	/^pub fn symLinkAbsoluteZ(target_path_c: [*:0]const u8, sym_link_path_c: [*:0]const u8, flags: SymLinkFlags) !void {$/;"	function
symLinkW	$ZIGLIB/std/fs.zig	/pub fn symLinkW($/;"	function
symLinkWasi	$ZIGLIB/std/fs.zig	/pub fn symLinkWasi($/;"	function
symLinkZ	$ZIGLIB/std/fs.zig	/pub fn symLinkZ($/;"	function
sym_link_path_c	$ZIGLIB/std/os.zig	/const sym_link_path_c = try toPosixPath(sym_link_path)/;"	constant
sym_link_path_w	$ZIGLIB/std/fs.zig	/const sym_link_path_w = try os.windows.sliceToPrefixedFileW(sym_link_path)/;"	constant
sym_name	$ZIGLIB/std/os/linux/vdso.zig	/const sym_name = @ptrCast([*:0]u8, strings + syms[i].st_name)/;"	constant
sym_ok	$ZIGLIB/std/os/windows/user32.zig	/const sym_ok = builtin.os.isAtLeast(.windows, os)/;"	constant
symbol	$ZIGLIB/std/zig/tokenizer.zig	/pub fn symbol(tag: Tag) []const u8 {$/;"	function
symbolName	$ZIGLIB/std/c/tokenizer.zig	/pub fn symbolName(id: std.meta.Tag(Id)) []const u8 {$/;"	function
symbol_i	$ZIGLIB/std/pdb.zig	/var symbol_i: usize = 0/;"	variable
symbol_index	$ZIGLIB/std/debug.zig	/var symbol_index: usize = 0/;"	variable
symbol_info	$ZIGLIB/std/debug.zig	/const symbol_info = try module.getSymbolAtAddress(debug_info.allocator, address)/;"	constant
symbol_name	$ZIGLIB/std/debug.zig	/symbol_name: []const u8 = "???"/;"	field
symbolic_link	$ZIGLIB/std/tar.zig	/symbolic_link = '2'/;"	field
symbolic_name	$ZIGLIB/std/zig/render.zig	/const symbolic_name = main_tokens[asm_output]/;"	constant
symbols	$ZIGLIB/std/pdb.zig	/symbols: []u8/;"	field
symbols_buf	$ZIGLIB/std/debug.zig	/const symbols_buf = try allocator.alloc(MachoSymbol, syms.len)/;"	constant
symlink	$ZIGLIB/std/os/windows.zig	/const symlink = @ptrCast($/;"	constant
symlinkZ	$ZIGLIB/std/os.zig	/^pub fn symlinkZ(target_path: [*:0]const u8, sym_link_path: [*:0]const u8) SymLinkError!void {$/;"	function
symlink_data	$ZIGLIB/std/os/windows.zig	/const symlink_data = SYMLINK_DATA{$/;"	constant
symlink_flags	$ZIGLIB/std/fs.zig	/const symlink_flags: w.lookupflags_t = if (args.no_follow) 0x0 else w.LOOKUP_SYMLINK_FOLLOW/;"	constant
symlink_handle	$ZIGLIB/std/os/windows.zig	/const symlink_handle = OpenFile(sym_link_path, .{$/;"	constant
symlink_path_buf	$ZIGLIB/std/fs.zig	/var symlink_path_buf: [MAX_PATH_BYTES:0]u8 = undefined/;"	variable
symlinkat	$ZIGLIB/std/os/linux/syscalls.zig	/symlinkat = Linux + 297/;"	field
symlinkatWasi	$ZIGLIB/std/os.zig	/^pub fn symlinkatWasi(target_path: []const u8, newdirfd: fd_t, sym_link_path: []const u8) SymLinkError!void {$/;"	function
symlinkatZ	$ZIGLIB/std/os.zig	/^pub fn symlinkatZ(target_path: [*:0]const u8, newdirfd: fd_t, sym_link_path: [*:0]const u8) SymLinkError!void {$/;"	function
symoff	$ZIGLIB/std/macho.zig	/symoff: u32 = 0/;"	field
syms	$ZIGLIB/std/os/linux/vdso.zig	/const syms = maybe_syms orelse return 0/;"	constant
symtab	$ZIGLIB/std/debug.zig	/const symtab = while (it.next()) |cmd| switch (cmd.cmd()) {$/;"	constant
symtab_command	$ZIGLIB/std/macho.zig	/^pub const symtab_command = extern struct {$/;"	struct
symtab_label	$ZIGLIB/std/Build/CheckObjectStep.zig	/const symtab_label = switch (self.obj_format) {$/;"	constant
symtabcmd	$ZIGLIB/std/debug.zig	/var symtabcmd: ?macho.symtab_command = null/;"	variable
sync	$ZIGLIB/std/os/linux/syscalls.zig	/sync = Linux + 36/;"	field
sync_file_range	$ZIGLIB/std/os/linux/syscalls.zig	/sync_file_range = Linux + 305/;"	field
sync_points	$ZIGLIB/std/crypto/argon2.zig	/^const sync_points = 4/;"	constant
syncfs	$ZIGLIB/std/os/linux/syscalls.zig	/syncfs = Linux + 342/;"	field
sys_can_stack_trace	$ZIGLIB/std/debug.zig	/^pub const sys_can_stack_trace = switch (builtin.cpu.arch) {$/;"	constant
sys_debug_setcontext	$ZIGLIB/std/os/linux/syscalls.zig	/sys_debug_setcontext = 256/;"	field
sys_req_pressed	$ZIGLIB/std/os/uefi/protocols/simple_text_input_ex_protocol.zig	/sys_req_pressed: bool/;"	field
sysarg	$ZIGLIB/std/c/solaris.zig	/sysarg: u8/;"	field
syscall	$ZIGLIB/std/os/linux/syscalls.zig	/syscall = Linux + 0/;"	field
syscall0	$ZIGLIB/std/os/linux/x86_64.zig	/^pub fn syscall0(number: SYS) usize {$/;"	function
syscall1	$ZIGLIB/std/os/plan9/x86_64.zig	/^pub fn syscall1(sys: plan9.SYS, arg0: usize) usize {$/;"	function
syscall2	$ZIGLIB/std/os/plan9/x86_64.zig	/^pub fn syscall2(sys: plan9.SYS, arg0: usize, arg1: usize) usize {$/;"	function
syscall3	$ZIGLIB/std/os/plan9/x86_64.zig	/^pub fn syscall3(sys: plan9.SYS, arg0: usize, arg1: usize, arg2: usize) usize {$/;"	function
syscall4	$ZIGLIB/std/os/plan9/x86_64.zig	/^pub fn syscall4(sys: plan9.SYS, arg0: usize, arg1: usize, arg2: usize, arg3: usize) usize {$/;"	function
syscall5	$ZIGLIB/std/os/linux/x86_64.zig	/^pub fn syscall5(number: SYS, arg1: usize, arg2: usize, arg3: usize, arg4: usize, arg5: usize) usize {$/;"	function
syscall6	$ZIGLIB/std/os/linux/x86_64.zig	/^pub fn syscall6($/;"	function
syscall7	$ZIGLIB/std/os/linux/mips64.zig	/^pub fn syscall7($/;"	function
syscall_bits	$ZIGLIB/std/os/plan9.zig	/^pub const syscall_bits = switch (builtin.cpu.arch) {$/;"	constant
syscall_fork	$ZIGLIB/std/os/linux/sparc64.zig	/^pub fn syscall_fork() usize {$/;"	function
syscall_number	$ZIGLIB/std/os/linux.zig	/const syscall_number = if (!@hasField(SYS, "pwrite") and @hasField(SYS, "pwrite64"))$/;"	constant
syscall_pipe	$ZIGLIB/std/os/linux/sparc64.zig	/^pub fn syscall_pipe(fd: *[2]i32) usize {$/;"	function
sysctl	$ZIGLIB/std/os.zig	/^pub fn sysctl($/;"	function
sysctl_get_current_value	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const sysctl_get_current_value = @intToPtr(fn (ctx: *kern.SysCtl, buf: ?*u8, buf_len: c_ulong) c_long, 102)/;"	constant
sysctl_get_name	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const sysctl_get_name = @intToPtr(fn (ctx: *kern.SysCtl, buf: ?*u8, buf_len: c_ulong, flags: u64) c_long, 101)/;"	constant
sysctl_get_new_value	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const sysctl_get_new_value = @intToPtr(fn (ctx: *kern.SysCtl, buf: ?*u8, buf_len: c_ulong) c_long, 103)/;"	constant
sysctl_set_new_value	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const sysctl_set_new_value = @intToPtr(fn (ctx: *kern.SysCtl, buf: ?*const u8, buf_len: c_ulong) c_long, 104)/;"	constant
sysctlbynameZ	$ZIGLIB/std/os.zig	/^pub fn sysctlbynameZ($/;"	function
sysfs	$ZIGLIB/std/os/linux/syscalls.zig	/sysfs = Linux + 136/;"	field
sysid	$ZIGLIB/std/c/solaris.zig	/sysid: c_int/;"	field
sysinfo	$ZIGLIB/std/os/linux/syscalls.zig	/sysinfo = Linux + 97/;"	field
syslog	$ZIGLIB/std/os/linux/syscalls.zig	/syslog = Linux + 103/;"	field
sysmips	$ZIGLIB/std/os/linux/syscalls.zig	/sysmips = Linux + 199/;"	field
sysname	$ZIGLIB/std/os/linux.zig	/sysname: [64:0]u8/;"	field
sysnum	$ZIGLIB/std/c/netbsd.zig	/sysnum: i32/;"	field
sysroot	$ZIGLIB/std/Build.zig	/^sysroot: ?[]const u8 = null/;"	field
system	$ZIGLIB/std/os.zig	/^pub const system = if (@hasDecl(root, "os") and root.os != @This())$/;"	constant
system_info	$ZIGLIB/std/c/haiku.zig	/^pub const system_info = extern struct {$/;"	struct
system_lib	$ZIGLIB/std/Build/CompileStep.zig	/system_lib: SystemLib/;"	field
system_table	$ZIGLIB/std/os/uefi/protocols/loaded_image_protocol.zig	/system_table: *SystemTable/;"	field
system_time	$ZIGLIB/std/c/darwin.zig	/system_time: time_value_t/;"	field
szCSDVersion	$ZIGLIB/std/os/windows.zig	/szCSDVersion: [128]WCHAR/;"	field
szDescription	$ZIGLIB/std/os/windows/ws2_32.zig	/szDescription: [WSADESCRIPTION_LEN + 1]u8/;"	field
szExePath	$ZIGLIB/std/os/windows.zig	/szExePath: [MAX_PATH]CHAR/;"	field
szModule	$ZIGLIB/std/os/windows.zig	/szModule: [MAX_MODULE_NAME32 + 1]CHAR/;"	field
szProtocol	$ZIGLIB/std/os/windows/ws2_32.zig	/szProtocol: [WSAPROTOCOL_LEN + 1]WCHAR/;"	field
szSystemStatus	$ZIGLIB/std/os/windows/ws2_32.zig	/szSystemStatus: [WSASYS_STATUS_LEN + 1]u8/;"	field
t010	$ZIGLIB/std/crypto/25519/scalar.zig	/const t010 = t108/;"	constant
t011	$ZIGLIB/std/crypto/25519/scalar.zig	/const t011 = t1012/;"	constant
t1010	$ZIGLIB/std/crypto/25519/scalar.zig	/const t1010 = @truncate(u64, xy02 + xy11 + xy20 + c11) & 0xffffffffffffff/;"	constant
t1011	$ZIGLIB/std/crypto/25519/scalar.zig	/const t1011 = @truncate(u64, xy03 + xy12 + xy21 + xy30 + c21) & 0xffffffffffffff/;"	constant
t1012	$ZIGLIB/std/crypto/25519/scalar.zig	/const t1012 = ((b5 << 56) + r0) -% qmul0/;"	constant
t1013	$ZIGLIB/std/crypto/25519/scalar.zig	/const t1013 = ((b6 << 56) + r1) -% (qmul1 + c1)/;"	constant
t1014	$ZIGLIB/std/crypto/25519/scalar.zig	/const t1014 = ((b7 << 56) + r2) -% (qmul2 + c2)/;"	constant
t1015	$ZIGLIB/std/crypto/25519/scalar.zig	/const t1015 = ((b8 << 56) + r3) -% (qmul3 + c3)/;"	constant
t1016	$ZIGLIB/std/crypto/25519/scalar.zig	/const t1016 = ((b9 << 40) + r4) -% (qmul4 + c4)/;"	constant
t1017	$ZIGLIB/std/crypto/25519/scalar.zig	/const t1017 = ((b10 << 56) + s0) -% y0/;"	constant
t1018	$ZIGLIB/std/crypto/25519/scalar.zig	/const t1018 = ((b11 << 56) + s1) -% (y1 + b0)/;"	constant
t1019	$ZIGLIB/std/crypto/25519/scalar.zig	/const t1019 = ((b12 << 56) + s2) -% (y2 + b1)/;"	constant
t1020	$ZIGLIB/std/crypto/25519/scalar.zig	/const t1020 = ((b13 << 56) + s3) -% (y3 + b2)/;"	constant
t103	$ZIGLIB/std/crypto/25519/scalar.zig	/const t103 = @as(u64, @truncate(u64, z41 + c30)) & 0xffffffffffffff/;"	constant
t104	$ZIGLIB/std/crypto/25519/scalar.zig	/const t104 = @as(u64, @truncate(u64, z5 + c40)) & 0xffffffffffffff/;"	constant
t105	$ZIGLIB/std/crypto/25519/scalar.zig	/const t105 = @as(u64, @truncate(u64, z6 + c5)) & 0xffffffffffffff/;"	constant
t106	$ZIGLIB/std/crypto/25519/scalar.zig	/const t106 = @as(u64, @truncate(u64, z7 + c6)) & 0xffffffffffffff/;"	constant
t107	$ZIGLIB/std/crypto/25519/scalar.zig	/const t107 = @as(u64, @truncate(u64, z8 + c7)) & 0xffffffffffffff/;"	constant
t108	$ZIGLIB/std/crypto/25519/scalar.zig	/const t108 = @truncate(u64, xy00) & 0xffffffffffffff/;"	constant
t109	$ZIGLIB/std/crypto/25519/scalar.zig	/const t109 = @truncate(u64, xy01 + xy10 + c0) & 0xffffffffffffff/;"	constant
t110	$ZIGLIB/std/crypto/pcurves/common.zig	/const t110 = x2.mul(x2.sq()).sq()/;"	constant
t111	$ZIGLIB/std/crypto/pcurves/common.zig	/const t111 = x2.mul(x2.mul(x2.sq()).sq())/;"	constant
t1111	$ZIGLIB/std/crypto/pcurves/common.zig	/const t1111 = t11.mul(t11.sqn(2))/;"	constant
t11111	$ZIGLIB/std/crypto/pcurves/common.zig	/const t11111 = x2.mul(t1111.sq())/;"	constant
t111111	$ZIGLIB/std/crypto/pcurves/common.zig	/const t111111 = t111.mul(x2.mul(t110).sqn(3))/;"	constant
t1111110	$ZIGLIB/std/crypto/pcurves/common.zig	/const t1111110 = t111111.sq()/;"	constant
t1111111	$ZIGLIB/std/crypto/pcurves/common.zig	/const t1111111 = x2.mul(t1111110)/;"	constant
t11111111	$ZIGLIB/std/crypto/pcurves/common.zig	/const t11111111 = t1111.mul(t1111.sqn(4))/;"	constant
t1pio2	$ZIGLIB/compiler_rt/tan.zig	/const t1pio2: f64 = 1.0 * math.pi \/ 2.0/;"	constant
t210	$ZIGLIB/std/crypto/25519/scalar.zig	/const t210 = t32/;"	constant
t211	$ZIGLIB/std/crypto/25519/scalar.zig	/const t211 = t37/;"	constant
t2_4	$ZIGLIB/std/crypto/pcurves/secp256k1.zig	/const t2_4 = t2.dbl().dbl()/;"	constant
t2pio2	$ZIGLIB/compiler_rt/tan.zig	/const t2pio2: f64 = 2.0 * math.pi \/ 2.0/;"	constant
t310	$ZIGLIB/std/crypto/25519/scalar.zig	/const t310 = t1011/;"	constant
t311	$ZIGLIB/std/crypto/25519/scalar.zig	/const t311 = t1015/;"	constant
t3pio2	$ZIGLIB/compiler_rt/tan.zig	/const t3pio2: f64 = 3.0 * math.pi \/ 2.0/;"	constant
t410	$ZIGLIB/std/crypto/25519/scalar.zig	/const t410 = t103/;"	constant
t411	$ZIGLIB/std/crypto/25519/scalar.zig	/const t411 = @truncate(u64, xy04 + xy13 + xy22 + xy31 + xy40 + c31) & 0xffffffffff/;"	constant
t412	$ZIGLIB/std/crypto/25519/scalar.zig	/const t412 = t1016/;"	constant
t4pio2	$ZIGLIB/compiler_rt/tan.zig	/const t4pio2: f64 = 4.0 * math.pi \/ 2.0/;"	constant
t_big	$ZIGLIB/std/math/big/int.zig	/var t_big = try Managed.init(limbs_buffer.allocator)/;"	variable
t_bits	$ZIGLIB/std/math/big/rational.zig	/const t_bits = @typeInfo(T).Int.bits/;"	constant
t_end	$ZIGLIB/std/crypto/ecdsa.zig	/const t_end = @min(t_off + m_v.len, t.len)/;"	constant
t_off	$ZIGLIB/std/crypto/ecdsa.zig	/var t_off: usize = 0/;"	variable
t_signed	$ZIGLIB/std/leb128.zig	/const t_signed = signedness == .signed/;"	constant
t_triple	$ZIGLIB/std/Build.zig	/const t_triple = t.zigTriple(self.allocator) catch @panic("OOM")/;"	constant
t_z_inv	$ZIGLIB/std/crypto/25519/ristretto255.zig	/const t_z_inv = p.t.mul(z_inv)/;"	constant
table	$ZIGLIB/std/zig/system/windows.zig	/var table: [table_size + 1]std.os.windows.RTL_QUERY_REGISTRY_TABLE = undefined/;"	variable
tableEntry	$ZIGLIB/std/hash/crc.zig	/inline fn tableEntry(index: I) I {$/;"	function
tableLowerBound	$ZIGLIB/std/fmt/errol.zig	/^fn tableLowerBound(k: u64) usize {$/;"	function
table_bits	$ZIGLIB/std/compress/deflate/deflate_fast.zig	/^const table_bits = 14/;"	constant
table_copy	$ZIGLIB/std/wasm.zig	/table_copy = 0x0E/;"	field
table_count	$ZIGLIB/std/crypto/Certificate/Bundle/macos.zig	/table_count: u32/;"	field
table_decrypt	$ZIGLIB/std/crypto/aes/soft.zig	/^const table_decrypt align(64) = generateTable(true)/;"	constant
table_encrypt	$ZIGLIB/std/crypto/aes/soft.zig	/^const table_encrypt align(64) = generateTable(false)/;"	constant
table_entry	$ZIGLIB/std/dwarf.zig	/const table_entry = getAbbrevTableEntry(abbrev_table, abbrev_code) orelse return badDwarf()/;"	constant
table_fill	$ZIGLIB/std/wasm.zig	/table_fill = 0x11/;"	field
table_grow	$ZIGLIB/std/wasm.zig	/table_grow = 0x0F/;"	field
table_header	$ZIGLIB/std/crypto/Certificate/Bundle/macos.zig	/const table_header = try reader.readStructBig(TableHeader)/;"	constant
table_id	$ZIGLIB/std/crypto/Certificate/Bundle/macos.zig	/table_id: u32/;"	field
table_idx	$ZIGLIB/std/crypto/Certificate/Bundle/macos.zig	/var table_idx: u32 = 0/;"	variable
table_index	$ZIGLIB/std/wasm.zig	/table_index: u32/;"	field
table_init	$ZIGLIB/std/wasm.zig	/table_init = 0x0C/;"	field
table_list	$ZIGLIB/std/crypto/Certificate/Bundle/macos.zig	/var table_list = try gpa.alloc(u32, db_schema.table_count)/;"	variable
table_lock	$ZIGLIB/std/fs/watch.zig	/table_lock: event.Lock/;"	field
table_mask	$ZIGLIB/std/compress/deflate/deflate_fast.zig	/^const table_mask = table_size - 1/;"	constant
table_shift	$ZIGLIB/std/compress/deflate/deflate_fast.zig	/^const table_shift = 32 - table_bits/;"	constant
table_size	$ZIGLIB/std/zig/system/windows.zig	/const table_size = 1 + fields_info.len/;"	constant
tables	$ZIGLIB/std/rand/ziggurat.zig	/var tables: ZigTable = undefined/;"	variable
tag0	$ZIGLIB/std/zig/system/darwin/macos.zig	/tag0/;"	field
tag0_end_or_empty	$ZIGLIB/std/zig/system/darwin/macos.zig	/tag0_end_or_empty/;"	field
tagN	$ZIGLIB/std/zig/system/darwin/macos.zig	/tagN/;"	field
tagN_end	$ZIGLIB/std/zig/system/darwin/macos.zig	/tagN_end/;"	field
tagName	$ZIGLIB/std/meta.zig	/^pub fn tagName(v: anytype) []const u8 {$/;"	function
tag_a	$ZIGLIB/std/meta.zig	/const tag_a = activeTag(a)/;"	constant
tag_b	$ZIGLIB/std/meta.zig	/const tag_b = activeTag(b)/;"	constant
tag_id	$ZIGLIB/std/dwarf.zig	/tag_id: u64/;"	field
tag_index	$ZIGLIB/std/coff.zig	/tag_index: u32/;"	field
tag_length	$ZIGLIB/std/crypto/salsa20.zig	/pub const tag_length = Poly1305.mac_length/;"	constant
tag_string	$ZIGLIB/std/zig/system/darwin/macos.zig	/tag_string/;"	field
tag_type	$ZIGLIB/std/builtin.zig	/tag_type: type/;"	field
tag_val	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/const tag_val: u8 = @enumToInt(@field(TTag, subtype.name))/;"	constant
taggedUnion	$ZIGLIB/std/zig/Ast.zig	/^pub fn taggedUnion(tree: Ast, node: Node.Index) full.ContainerDecl {$/;"	function
taggedUnionEnumTag	$ZIGLIB/std/zig/Ast.zig	/^pub fn taggedUnionEnumTag(tree: Ast, node: Node.Index) full.ContainerDecl {$/;"	function
taggedUnionTwo	$ZIGLIB/std/zig/Ast.zig	/^pub fn taggedUnionTwo(tree: Ast, buffer: *[2]Node.Index, node: Node.Index) full.ContainerDecl {$/;"	function
tagged_globals	$ZIGLIB/std/target/x86.zig	/tagged_globals/;"	field
tagged_union	$ZIGLIB/std/zig/Ast.zig	/tagged_union/;"	field
tagged_union_enum_tag	$ZIGLIB/std/zig/Ast.zig	/tagged_union_enum_tag/;"	field
tagged_union_enum_tag_trailing	$ZIGLIB/std/zig/Ast.zig	/tagged_union_enum_tag_trailing/;"	field
tagged_union_trailing	$ZIGLIB/std/zig/Ast.zig	/tagged_union_trailing/;"	field
tagged_union_two	$ZIGLIB/std/zig/Ast.zig	/tagged_union_two/;"	field
tagged_union_two_trailing	$ZIGLIB/std/zig/Ast.zig	/tagged_union_two_trailing/;"	field
tags	$ZIGLIB/std/zig/Ast.zig	/const tags = tree.nodes.items(.tag)/;"	constant
tahiti	$ZIGLIB/std/target/amdgpu.zig	/pub const tahiti = CpuModel{$/;"	constant
tail	$ZIGLIB/std/os/linux/io_uring.zig	/var tail = self.sq.tail.*/;"	variable
tail_bits	$ZIGLIB/std/mem.zig	/const tail_bits = @intCast(Log2N, bit_shift - load_tail_bits)/;"	constant
tail_byte	$ZIGLIB/std/mem.zig	/const tail_byte = read_bytes[load_size]/;"	constant
tail_call	$ZIGLIB/std/target/wasm.zig	/tail_call/;"	field
tail_keep_bits	$ZIGLIB/std/packed_int_array.zig	/const tail_keep_bits = container_bits - (int_bits + head_keep_bits)/;"	constant
tail_len	$ZIGLIB/std/mem.zig	/const tail_len = store_tail_bits - bit_shift/;"	constant
tail_mask	$ZIGLIB/std/mem.zig	/const tail_mask = (@as(u8, 0xff) << following_bits) >> following_bits/;"	constant
tail_shift	$ZIGLIB/std/mem.zig	/const tail_shift = @intCast(Log2N, @as(u4, 8) - bit_shift)/;"	constant
tail_truncated	$ZIGLIB/std/mem.zig	/const tail_truncated = if (bit_count < 8) @truncate(uN, tail_byte) else @as(uN, tail_byte)/;"	constant
take	$ZIGLIB/std/crypto/blake3.zig	/const take = math.min(want, input.len)/;"	constant
takeFingerprint	$ZIGLIB/std/hash_map.zig	/pub fn takeFingerprint(hash: Hash) FingerPrint {$/;"	function
tanf	$ZIGLIB/compiler_rt/tan.zig	/^pub fn tanf(x: f32) callconv(.C) f32 {$/;"	function
tanh	$ZIGLIB/std/math/tanh.zig	/^pub fn tanh(x: anytype) @TypeOf(x) {$/;"	function
tanh32	$ZIGLIB/std/math/tanh.zig	/^fn tanh32(x: f32) f32 {$/;"	function
tanh64	$ZIGLIB/std/math/tanh.zig	/^fn tanh64(x: f64) f64 {$/;"	function
tanl	$ZIGLIB/compiler_rt/tan.zig	/^pub fn tanl(x: c_longdouble) callconv(.C) c_longdouble {$/;"	function
tanq	$ZIGLIB/compiler_rt/tan.zig	/^pub fn tanq(x: f128) callconv(.C) f128 {$/;"	function
target	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/const target: Target = .{$/;"	constant
target_address	$ZIGLIB/std/dwarf.zig	/target_address: u64/;"	field
target_expr	$ZIGLIB/std/zig/Ast.zig	/target_expr: Node.Index/;"	field
target_fd	$ZIGLIB/std/os/linux/bpf.zig	/target_fd: fd_t/;"	field
target_id	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/target_id: u16 align(1)/;"	field
target_info	$ZIGLIB/std/Build/EmulatableRunStep.zig	/const target_info = std.zig.system.NativeTargetInfo.detect(artifact.target) catch @panic("unhandled error")/;"	constant
target_path_c	$ZIGLIB/std/os.zig	/const target_path_c = try toPosixPath(target_path)/;"	constant
target_path_w	$ZIGLIB/std/fs.zig	/const target_path_w = try os.windows.sliceToPrefixedFileW(target_path)/;"	constant
target_port_id	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/target_port_id: u64 align(1)/;"	field
target_ptr	$ZIGLIB/std/packed_int_array.zig	/const target_ptr = @ptrCast(*align(1) Container, &bytes[start_byte])/;"	constant
task	$ZIGLIB/std/os/linux.zig	/task: bool = false/;"	field
task_fd_query	$ZIGLIB/std/os/linux/bpf.zig	/task_fd_query: TaskFdQueryAttr/;"	field
task_flavor_t	$ZIGLIB/std/c/darwin.zig	/^pub const task_flavor_t = natural_t/;"	constant
task_frame	$ZIGLIB/std/event/wait_group.zig	/var task_frame = async task(&initial_wg, &final_wg)/;"	variable
task_info_t	$ZIGLIB/std/c/darwin.zig	/^pub const task_info_t = *integer_t/;"	constant
task_name_t	$ZIGLIB/std/c/darwin.zig	/^pub const task_name_t = mach_port_name_t/;"	constant
task_policy_flavor_t	$ZIGLIB/std/c/darwin.zig	/^pub const task_policy_flavor_t = natural_t/;"	constant
task_policy_t	$ZIGLIB/std/c/darwin.zig	/^pub const task_policy_t = *integer_t/;"	constant
task_read_t	$ZIGLIB/std/c/darwin.zig	/^pub const task_read_t = mach_port_t/;"	constant
task_t	$ZIGLIB/std/c/darwin.zig	/^pub const task_t = mach_port_t/;"	constant
task_vm_info	$ZIGLIB/std/c/darwin.zig	/^pub const task_vm_info = extern struct {$/;"	struct
task_vm_info_data_t	$ZIGLIB/std/c/darwin.zig	/^pub const task_vm_info_data_t = task_vm_info/;"	constant
taskid_t	$ZIGLIB/std/c/solaris.zig	/^pub const taskid_t = id_t/;"	constant
tblsiz	$ZIGLIB/compiler_rt/exp2.zig	/const tblsiz: u32 = @intCast(u32, exp2dt.len \/ 2)/;"	constant
tbs_certificate	$ZIGLIB/std/crypto/Certificate.zig	/const tbs_certificate = try der.Element.parse(cert_bytes, certificate.slice.start)/;"	constant
tbs_signature	$ZIGLIB/std/crypto/Certificate.zig	/const tbs_signature = try der.Element.parse(cert_bytes, serial_number.slice.end)/;"	constant
tcb_offset	$ZIGLIB/std/os/linux/tls.zig	/var tcb_offset: usize = undefined/;"	variable
tcb_ptr	$ZIGLIB/std/os/linux/tls.zig	/const tcb_ptr = alignPtrCast([*]u8, area.ptr + tls_image.tcb_offset)/;"	constant
tcdrain	$ZIGLIB/std/os/linux.zig	/^pub fn tcdrain(fd: fd_t) usize {$/;"	function
tcele	$ZIGLIB/std/target.zig	/tcele/;"	field
tcflag_t	$ZIGLIB/std/os/linux.zig	/^pub const tcflag_t = u32/;"	constant
tcgetattr	$ZIGLIB/std/os/linux.zig	/^pub fn tcgetattr(fd: fd_t, termios_p: *termios) usize {$/;"	function
tcpConnectToAddress	$ZIGLIB/std/net.zig	/^pub fn tcpConnectToAddress(address: Address) !Stream {$/;"	function
tcpConnectToHost	$ZIGLIB/std/net.zig	/^pub fn tcpConnectToHost(allocator: mem.Allocator, name: []const u8, port: u16) !Stream {$/;"	function
tcp_check_syncookie	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const tcp_check_syncookie = @intToPtr(fn (sk: *kern.Sock, iph: ?*anyopaque, iph_len: u32, th: *TcpHdr, th_len: u32) c_long, 100)/;"	constant
tcp_fastopen_client_fail	$ZIGLIB/std/os/linux.zig	/^pub const tcp_fastopen_client_fail = enum {$/;"	enum
tcp_gen_syncookie	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const tcp_gen_syncookie = @intToPtr(fn (sk: *kern.Sock, iph: ?*anyopaque, iph_len: u32, th: *TcpHdr, th_len: u32) i64, 110)/;"	constant
tcp_repair_opt	$ZIGLIB/std/os/linux.zig	/^pub const tcp_repair_opt = extern struct {$/;"	struct
tcp_repair_window	$ZIGLIB/std/os/linux.zig	/^pub const tcp_repair_window = extern struct {$/;"	struct
tcp_send_ack	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const tcp_send_ack = @intToPtr(fn (tp: ?*anyopaque, rcv_nxt: u32) c_long, 116)/;"	constant
tcp_sock	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const tcp_sock = @intToPtr(fn (sk: *kern.Sock) ?*kern.TcpSock, 96)/;"	constant
tcsetattr	$ZIGLIB/std/os/linux.zig	/^pub fn tcsetattr(fd: fd_t, optional_action: TCSA, termios_p: *const termios) usize {$/;"	function
teamOffset	$ZIGLIB/std/macho.zig	/teamOffset: u32/;"	field
team_id	$ZIGLIB/std/c/haiku.zig	/team_id: i32/;"	field
team_info	$ZIGLIB/std/c/haiku.zig	/^pub const team_info = extern struct {$/;"	struct
teapot	$ZIGLIB/std/http.zig	/teapot = 418/;"	field
temp	$ZIGLIB/std/treap.zig	/const temp = gcd/;"	constant
temp_path	$ZIGLIB/std/os/windows.zig	/var temp_path: PathSpace = undefined/;"	variable
temp_w	$ZIGLIB/std/event/wait_group.zig	/const temp_w = w/;"	constant
template	$ZIGLIB/std/zig/Parse.zig	/const template = try p.expectExpr()/;"	constant
template_alias	$ZIGLIB/std/dwarf/TAG.zig	/^pub const template_alias = 0x43/;"	constant
template_token	$ZIGLIB/std/zig/Ast.zig	/const template_token = tree.lastToken(info.template)/;"	constant
template_type_param	$ZIGLIB/std/dwarf/TAG.zig	/^pub const template_type_param = 0x2f/;"	constant
template_value_param	$ZIGLIB/std/dwarf/TAG.zig	/^pub const template_value_param = 0x30/;"	constant
temporary_redirect	$ZIGLIB/std/http.zig	/temporary_redirect = 307/;"	field
ten_of_each	$ZIGLIB/std/enums.zig	/const ten_of_each = EnumMultiset(Ball).initWithCount(10)/;"	constant
tentative	$ZIGLIB/std/macho.zig	/pub fn tentative(sym: nlist_64) bool {$/;"	function
term	$ZIGLIB/std/os.zig	/var term: termios = undefined/;"	variable
term1	$ZIGLIB/std/Thread/RwLock.zig	/term1: usize = 0/;"	field
term2	$ZIGLIB/std/Thread/RwLock.zig	/term2: usize = 0/;"	field
term_routine	$ZIGLIB/std/c/haiku.zig	/term_routine: *anyopaque/;"	field
term_sum	$ZIGLIB/std/Thread/RwLock.zig	/term_sum: usize = 0/;"	field
terminal	$ZIGLIB/std/Progress.zig	/^terminal: ?std.fs.File = undefined/;"	field
termios	$ZIGLIB/std/os/linux.zig	/^pub const termios = extern struct {$/;"	struct
test	$ZIGLIB/std/Build/CompileStep.zig	/@"test"/;"	field
testAbsInt	$ZIGLIB/std/math.zig	/^fn testAbsInt() !void {$/;"	function
testAllApis	$ZIGLIB/std/base64.zig	/^fn testAllApis(codecs: Codecs, expected_decoded: []const u8, expected_encoded: []const u8) !void {$/;"	function
testAllocator	$ZIGLIB/std/heap.zig	/^pub fn testAllocator(base_allocator: mem.Allocator) !void {$/;"	function
testAllocatorAligned	$ZIGLIB/std/heap.zig	/^pub fn testAllocatorAligned(base_allocator: mem.Allocator) !void {$/;"	function
testAllocatorAlignedShrink	$ZIGLIB/std/heap.zig	/^pub fn testAllocatorAlignedShrink(base_allocator: mem.Allocator) !void {$/;"	function
testAllocatorLargeAlignment	$ZIGLIB/std/heap.zig	/^pub fn testAllocatorLargeAlignment(base_allocator: mem.Allocator) !void {$/;"	function
testAuthorityHost	$ZIGLIB/std/Uri.zig	/^fn testAuthorityHost(comptime hostlist: anytype) !void {$/;"	function
testBadUtf8Slice	$ZIGLIB/std/unicode.zig	/^fn testBadUtf8Slice() !void {$/;"	function
testBase64	$ZIGLIB/std/base64.zig	/^fn testBase64() !void {$/;"	function
testBase64UrlSafeNoPad	$ZIGLIB/std/base64.zig	/^fn testBase64UrlSafeNoPad() !void {$/;"	function
testBasename	$ZIGLIB/std/fs/path.zig	/^fn testBasename(input: []const u8, expected_output: []const u8) !void {$/;"	function
testBasenamePosix	$ZIGLIB/std/fs/path.zig	/^fn testBasenamePosix(input: []const u8, expected_output: []const u8) !void {$/;"	function
testBasenameWindows	$ZIGLIB/std/fs/path.zig	/^fn testBasenameWindows(input: []const u8, expected_output: []const u8) !void {$/;"	function
testBitSet	$ZIGLIB/std/bit_set.zig	/^fn testBitSet(a: anytype, b: anytype, len: usize) !void {$/;"	function
testBlake3	$ZIGLIB/std/crypto/blake3.zig	/^fn testBlake3(hasher: *Blake3, input_len: usize, expected_hex: [262]u8) !void {$/;"	function
testBlock	$ZIGLIB/std/compress/deflate/huffman_bit_writer.zig	/^fn testBlock(comptime ht: HuffTest, comptime ttype: TestType) !void {$/;"	function
testBlockHuff	$ZIGLIB/std/compress/deflate/huffman_bit_writer.zig	/^fn testBlockHuff(comptime in_name: []const u8, comptime want_name: []const u8) !void {$/;"	function
testCStrFnsImpl	$ZIGLIB/std/cstr.zig	/^fn testCStrFnsImpl() !void {$/;"	function
testCalcUtf16LeLen	$ZIGLIB/std/unicode.zig	/^fn testCalcUtf16LeLen() !void {$/;"	function
testCases	$ZIGLIB/std/Thread.zig	/const testCases = &[_][]const u8{$/;"	constant
testCeilPowerOfTwo	$ZIGLIB/std/math.zig	/^fn testCeilPowerOfTwo() !void {$/;"	function
testCeilPowerOfTwoPromote	$ZIGLIB/std/math.zig	/^fn testCeilPowerOfTwoPromote() !void {$/;"	function
testChannelGetter	$ZIGLIB/std/event/channel.zig	/^fn testChannelGetter(channel: *Channel(i32)) callconv(.Async) void {$/;"	function
testChannelPutter	$ZIGLIB/std/event/channel.zig	/^fn testChannelPutter(channel: *Channel(i32)) callconv(.Async) void {$/;"	function
testCollapseRepeats	$ZIGLIB/std/mem.zig	/^fn testCollapseRepeats(str: []const u8, elem: u8, expected: []const u8) !void {$/;"	function
testDecode	$ZIGLIB/std/unicode.zig	/^fn testDecode(bytes: []const u8) !u21 {$/;"	function
testDecodeIgnoreSpace	$ZIGLIB/std/base64.zig	/^fn testDecodeIgnoreSpace(codecs: Codecs, expected_decoded: []const u8, encoded: []const u8) !void {$/;"	function
testDirnamePosix	$ZIGLIB/std/fs/path.zig	/^fn testDirnamePosix(input: []const u8, expected_output: ?[]const u8) !void {$/;"	function
testDirnameWindows	$ZIGLIB/std/fs/path.zig	/^fn testDirnameWindows(input: []const u8, expected_output: ?[]const u8) !void {$/;"	function
testDivCeil	$ZIGLIB/std/math.zig	/^fn testDivCeil() !void {$/;"	function
testDivExact	$ZIGLIB/std/math.zig	/^fn testDivExact() !void {$/;"	function
testDivFloor	$ZIGLIB/std/math.zig	/^fn testDivFloor() !void {$/;"	function
testDivTrunc	$ZIGLIB/std/math.zig	/^fn testDivTrunc() !void {$/;"	function
testEpoch	$ZIGLIB/std/time/epoch.zig	/^fn testEpoch(secs: u64, expected_year_day: YearAndDay, expected_month_day: MonthAndDay, expected_day_seconds: struct {$/;"	function
testEql	$ZIGLIB/std/bit_set.zig	/^fn testEql(empty: anytype, full: anytype, len: usize) !void {$/;"	function
testError	$ZIGLIB/std/unicode.zig	/^fn testError(bytes: []const u8, expected_err: anyerror) !void {$/;"	function
testErrorEncode	$ZIGLIB/std/unicode.zig	/^fn testErrorEncode(codePoint: u21, array: []u8, expectedErr: anyerror) !void {$/;"	function
testEventLoop	$ZIGLIB/std/event/loop.zig	/^fn testEventLoop() i32 {$/;"	function
testEventLoop2	$ZIGLIB/std/event/loop.zig	/^fn testEventLoop2(h: anyframe->i32, did_it: *bool) void {$/;"	function
testExtension	$ZIGLIB/std/fs/path.zig	/^fn testExtension(path: []const u8, expected: []const u8) !void {$/;"	function
testFloorPowerOfTwo	$ZIGLIB/std/math.zig	/^fn testFloorPowerOfTwo() !void {$/;"	function
testFuture	$ZIGLIB/std/event/future.zig	/^fn testFuture() void {$/;"	function
testGeneralCmdLine	$ZIGLIB/std/process.zig	/^fn testGeneralCmdLine(input_cmd_line: []const u8, expected_args: []const []const u8) !void {$/;"	function
testGroup	$ZIGLIB/std/event/group.zig	/^fn testGroup(allocator: Allocator) callconv(.Async) void {$/;"	function
testHash	$ZIGLIB/std/hash/auto_hash.zig	/^fn testHash(key: anytype) u64 {$/;"	function
testHashDeep	$ZIGLIB/std/hash/auto_hash.zig	/^fn testHashDeep(key: anytype) u64 {$/;"	function
testHashDeepRecursive	$ZIGLIB/std/hash/auto_hash.zig	/^fn testHashDeepRecursive(key: anytype) u64 {$/;"	function
testHashShallow	$ZIGLIB/std/hash/auto_hash.zig	/^fn testHashShallow(key: anytype) u64 {$/;"	function
testIncrementNotify	$ZIGLIB/std/Thread.zig	/^fn testIncrementNotify(value: *usize, event: *ResetEvent) void {$/;"	function
testInvalidUtf8ContinuationBytes	$ZIGLIB/std/unicode.zig	/^fn testInvalidUtf8ContinuationBytes() !void {$/;"	function
testIsAbsolutePosix	$ZIGLIB/std/fs/path.zig	/^fn testIsAbsolutePosix(path: []const u8, expected_result: bool) !void {$/;"	function
testIsAbsoluteWindows	$ZIGLIB/std/fs/path.zig	/^fn testIsAbsoluteWindows(path: []const u8, expected_result: bool) !void {$/;"	function
testJoinMaybeZPosix	$ZIGLIB/std/fs/path.zig	/^fn testJoinMaybeZPosix(paths: []const []const u8, expected: []const u8, zero: bool) !void {$/;"	function
testJoinMaybeZUefi	$ZIGLIB/std/fs/path.zig	/^fn testJoinMaybeZUefi(paths: []const []const u8, expected: []const u8, zero: bool) !void {$/;"	function
testJoinMaybeZWindows	$ZIGLIB/std/fs/path.zig	/^fn testJoinMaybeZWindows(paths: []const []const u8, expected: []const u8, zero: bool) !void {$/;"	function
testLock	$ZIGLIB/std/event/rwlock.zig	/^fn testLock(allocator: Allocator, lock: *RwLock) callconv(.Async) void {$/;"	function
testMap	$ZIGLIB/std/comptime_string_map.zig	/^fn testMap(comptime map: anytype) !void {$/;"	function
testMiscInvalidUtf8	$ZIGLIB/std/unicode.zig	/^fn testMiscInvalidUtf8() !void {$/;"	function
testMod	$ZIGLIB/std/math.zig	/^fn testMod() !void {$/;"	function
testNoSpaceLeftError	$ZIGLIB/std/base64.zig	/^fn testNoSpaceLeftError(codecs: Codecs, encoded: []const u8) !void {$/;"	function
testOverflow	$ZIGLIB/std/math.zig	/^fn testOverflow() !void {$/;"	function
testOverlongUtf8Codepoint	$ZIGLIB/std/unicode.zig	/^fn testOverlongUtf8Codepoint() !void {$/;"	function
testParser	$ZIGLIB/std/zig/system/linux.zig	/^fn testParser($/;"	function
testPureBitSet	$ZIGLIB/std/bit_set.zig	/^fn testPureBitSet(comptime Set: type) !void {$/;"	function
testPut	$ZIGLIB/std/event/channel.zig	/^fn testPut(channel: *Channel(i32), value: i32) callconv(.Async) void {$/;"	function
testReadIntImpl	$ZIGLIB/std/mem.zig	/^fn testReadIntImpl() !void {$/;"	function
testReader	$ZIGLIB/std/compress/zlib.zig	/^fn testReader(data: []const u8, expected: []const u8) !void {$/;"	function
testRelativePosix	$ZIGLIB/std/fs/path.zig	/^fn testRelativePosix(from: []const u8, to: []const u8, expected_output: []const u8) !void {$/;"	function
testRelativeWindows	$ZIGLIB/std/fs/path.zig	/^fn testRelativeWindows(from: []const u8, to: []const u8, expected_output: []const u8) !void {$/;"	function
testRem	$ZIGLIB/std/math.zig	/^fn testRem() !void {$/;"	function
testResolvePosix	$ZIGLIB/std/fs/path.zig	/^fn testResolvePosix(paths: []const []const u8, expected: []const u8) !void {$/;"	function
testResolveWindows	$ZIGLIB/std/fs/path.zig	/^fn testResolveWindows(paths: []const []const u8, expected: []const u8) !void {$/;"	function
testResponseFileCmdLine	$ZIGLIB/std/process.zig	/^fn testResponseFileCmdLine(input_cmd_line: []const u8, expected_args: []const []const u8) !void {$/;"	function
testRunDetached	$ZIGLIB/std/event/loop.zig	/^fn testRunDetached() void {$/;"	function
testRunDetachedData	$ZIGLIB/std/event/loop.zig	/^var testRunDetachedData: usize = 0/;"	variable
testSegmentedList	$ZIGLIB/std/segmented_list.zig	/^fn testSegmentedList(comptime prealloc: usize) !void {$/;"	function
testSentinel	$ZIGLIB/std/meta.zig	/^fn testSentinel() !void {$/;"	function
testSet	$ZIGLIB/std/comptime_string_map.zig	/^fn testSet(comptime map: anytype) !void {$/;"	function
testSign	$ZIGLIB/std/math.zig	/^fn testSign() !void {$/;"	function
testSleep	$ZIGLIB/std/event/loop.zig	/^fn testSleep(wait_ns: u64, sleep_count: *usize) void {$/;"	function
testStableSort	$ZIGLIB/std/sort.zig	/^fn testStableSort() !void {$/;"	function
testStaticBitSet	$ZIGLIB/std/bit_set.zig	/^fn testStaticBitSet(comptime Set: type) !void {$/;"	function
testStem	$ZIGLIB/std/fs/path.zig	/^fn testStem(path: []const u8, expected: []const u8) !void {$/;"	function
testString	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/pub fn testString(self: *const SimpleTextOutputProtocol, msg: [*:0]const u16) Status {$/;"	function
testSubsetOf	$ZIGLIB/std/bit_set.zig	/^fn testSubsetOf(empty: anytype, full: anytype, even: anytype, odd: anytype, len: usize) !void {$/;"	function
testSupersetOf	$ZIGLIB/std/bit_set.zig	/^fn testSupersetOf(empty: anytype, full: anytype, even: anytype, odd: anytype, len: usize) !void {$/;"	function
testThreadName	$ZIGLIB/std/Thread.zig	/^fn testThreadName(thread: *Thread) !void {$/;"	function
testTokenize	$ZIGLIB/std/zig/tokenizer.zig	/^fn testTokenize(source: [:0]const u8, expected_token_tags: []const Token.Tag) !void {$/;"	function
testType	$ZIGLIB/compiler_rt/emutls.zig	/const testType = struct {$/;"	constant
testUtf16CountCodepoints	$ZIGLIB/std/unicode.zig	/^fn testUtf16CountCodepoints() !void {$/;"	function
testUtf8CountCodepoints	$ZIGLIB/std/unicode.zig	/^fn testUtf8CountCodepoints() !void {$/;"	function
testUtf8Encode	$ZIGLIB/std/unicode.zig	/^fn testUtf8Encode() !void {$/;"	function
testUtf8EncodeError	$ZIGLIB/std/unicode.zig	/^fn testUtf8EncodeError() !void {$/;"	function
testUtf8IteratorOnAscii	$ZIGLIB/std/unicode.zig	/^fn testUtf8IteratorOnAscii() !void {$/;"	function
testUtf8Peeking	$ZIGLIB/std/unicode.zig	/^fn testUtf8Peeking() !void {$/;"	function
testUtf8ValidCodepoint	$ZIGLIB/std/unicode.zig	/^fn testUtf8ValidCodepoint() !void {$/;"	function
testUtf8ViewBad	$ZIGLIB/std/unicode.zig	/^fn testUtf8ViewBad() !void {$/;"	function
testUtf8ViewOk	$ZIGLIB/std/unicode.zig	/^fn testUtf8ViewOk() !void {$/;"	function
testValid	$ZIGLIB/std/unicode.zig	/^fn testValid(bytes: []const u8, expected_codepoint: u21) !void {$/;"	function
testValidUtf8	$ZIGLIB/std/unicode.zig	/^fn testValidUtf8() !void {$/;"	function
testVersionEquality	$ZIGLIB/std/zig/system/darwin/macos.zig	/^fn testVersionEquality(expected: std.builtin.Version, got: std.builtin.Version) !void {$/;"	function
testVersionParse	$ZIGLIB/std/builtin.zig	/^fn testVersionParse() !void {$/;"	function
testWriteIntImpl	$ZIGLIB/std/mem.zig	/^fn testWriteIntImpl() !void {$/;"	function
testWriteWatchWriteDelete	$ZIGLIB/std/fs/watch.zig	/^fn testWriteWatchWriteDelete(allocator: Allocator) !void {$/;"	function
testWriterEOF	$ZIGLIB/std/compress/deflate/huffman_bit_writer.zig	/^fn testWriterEOF(ttype: TestType, ht_tokens: []const token.Token, input: []const u8) !void {$/;"	function
test_ally	$ZIGLIB/std/heap/WasmAllocator.zig	/^const test_ally = Allocator{$/;"	constant
test_bits	$ZIGLIB/std/bit_set.zig	/const test_bits = [_]usize{$/;"	constant
test_buf_reader	$ZIGLIB/std/io/buffered_reader.zig	/var test_buf_reader = BufferedReader(5, BlockReader){ .unbuffered_reader = block_reader }/;"	variable
test_case_count	$ZIGLIB/std/sort.zig	/const test_case_count = 10/;"	constant
test_config	$ZIGLIB/std/heap/general_purpose_allocator.zig	/^const test_config = Config{}/;"	constant
test_data	$ZIGLIB/std/compress/deflate/deflate_fast.zig	/var test_data = [32]u8{$/;"	variable
test_decl	$ZIGLIB/std/zig/Ast.zig	/test_decl/;"	field
test_decl_node	$ZIGLIB/std/zig/Parse.zig	/const test_decl_node = try p.expectTestDeclRecoverable()/;"	constant
test_doc_comment	$ZIGLIB/std/zig/Ast.zig	/test_doc_comment/;"	field
test_done_event	$ZIGLIB/std/Thread.zig	/test_done_event: ResetEvent = .{}/;"	field
test_evented_io	$ZIGLIB/std/Build/CompileStep.zig	/^test_evented_io: bool = false/;"	field
test_exe	$ZIGLIB/std/Build/CompileStep.zig	/test_exe/;"	field
test_fixed_buffer_allocator_memory	$ZIGLIB/std/heap.zig	/^var test_fixed_buffer_allocator_memory: [800000 * @sizeOf(u64)]u8 = undefined/;"	variable
test_key	$ZIGLIB/std/hash_map.zig	/const test_key = &self.keys()[idx]/;"	constant
test_name_tag	$ZIGLIB/std/zig/render.zig	/const test_name_tag = token_tags[test_token + 1]/;"	constant
test_one_divdi3	$ZIGLIB/compiler_rt/int.zig	/^fn test_one_divdi3(a: i64, b: i64, expected_q: i64) !void {$/;"	function
test_one_divmodsi4	$ZIGLIB/compiler_rt/int.zig	/^fn test_one_divmodsi4(a: i32, b: i32, expected_q: i32, expected_r: i32) !void {$/;"	function
test_one_divsi3	$ZIGLIB/compiler_rt/int.zig	/^fn test_one_divsi3(a: i32, b: i32, expected_q: i32) !void {$/;"	function
test_one_moddi3	$ZIGLIB/compiler_rt/int.zig	/^fn test_one_moddi3(a: i64, b: i64, expected_r: i64) !void {$/;"	function
test_one_modsi3	$ZIGLIB/compiler_rt/int.zig	/^fn test_one_modsi3(a: i32, b: i32, expected_r: i32) !void {$/;"	function
test_one_mulsi3	$ZIGLIB/compiler_rt/int.zig	/^fn test_one_mulsi3(a: i32, b: i32, result: i32) !void {$/;"	function
test_one_udivsi3	$ZIGLIB/compiler_rt/int.zig	/^fn test_one_udivsi3(a: u32, b: u32, expected_q: u32) !void {$/;"	function
test_one_umoddi3	$ZIGLIB/compiler_rt/int.zig	/^fn test_one_umoddi3(a: u64, b: u64, expected_r: u64) !void {$/;"	function
test_one_umodsi3	$ZIGLIB/compiler_rt/int.zig	/^fn test_one_umodsi3(a: u32, b: u32, expected_r: u32) !void {$/;"	function
test_protocol	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/test_protocol: bool = false/;"	field
test_read_ileb128	$ZIGLIB/std/leb128.zig	/^fn test_read_ileb128(comptime T: type, encoded: []const u8) !T {$/;"	function
test_read_ileb128_seq	$ZIGLIB/std/leb128.zig	/^fn test_read_ileb128_seq(comptime T: type, comptime N: usize, encoded: []const u8) !void {$/;"	function
test_read_stream_ileb128	$ZIGLIB/std/leb128.zig	/^fn test_read_stream_ileb128(comptime T: type, encoded: []const u8) !T {$/;"	function
test_read_stream_uleb128	$ZIGLIB/std/leb128.zig	/^fn test_read_stream_uleb128(comptime T: type, encoded: []const u8) !T {$/;"	function
test_read_uleb128	$ZIGLIB/std/leb128.zig	/^fn test_read_uleb128(comptime T: type, encoded: []const u8) !T {$/;"	function
test_read_uleb128_seq	$ZIGLIB/std/leb128.zig	/^fn test_read_uleb128_seq(comptime T: type, comptime N: usize, encoded: []const u8) !void {$/;"	function
test_run	$ZIGLIB/std/os/linux/bpf.zig	/test_run: TestRunAttr/;"	field
test_runner	$ZIGLIB/std/Build/CompileStep.zig	/^test_runner: ?[]const u8/;"	field
test_step	$ZIGLIB/init-lib/build.zig	/const test_step = b.step("test", "Run library tests")/;"	constant
test_tmp_dir	$ZIGLIB/std/fs/watch.zig	/^const test_tmp_dir = "std_event_fs_test"/;"	constant
test_token	$ZIGLIB/std/zig/render.zig	/const test_token = main_tokens[decl]/;"	constant
test_vectors	$ZIGLIB/std/crypto/scrypt.zig	/const test_vectors = [_]TestVector{$/;"	constant
test_write_leb128	$ZIGLIB/std/leb128.zig	/^fn test_write_leb128(value: anytype) !void {$/;"	function
test_x	$ZIGLIB/std/rand/ziggurat.zig	/const test_x = if (tables.is_symmetric) @fabs(x) else x/;"	constant
tests	$ZIGLIB/std/compress/deflate/decompressor.zig	/const tests = [_]TruncatedTest{$/;"	constant
teststringify	$ZIGLIB/std/json.zig	/^fn teststringify(expected: []const u8, value: anytype, options: StringifyOptions) !void {$/;"	function
text	$ZIGLIB/std/zig/CrossTarget.zig	/const text = try cross_target.zigTriple(std.testing.allocator)/;"	constant
text_size	$ZIGLIB/std/c/haiku.zig	/text_size: i32/;"	field
tgkill	$ZIGLIB/std/os/linux/syscalls.zig	/tgkill = Linux + 266/;"	field
tgsplit	$ZIGLIB/std/target/amdgpu.zig	/tgsplit/;"	field
th32ModuleID	$ZIGLIB/std/os/windows.zig	/th32ModuleID: DWORD/;"	field
th32ProcessID	$ZIGLIB/std/os/windows.zig	/th32ProcessID: DWORD/;"	field
the_copy	$ZIGLIB/std/Build.zig	/const the_copy = self.dupe(bytes)/;"	constant
their_end	$ZIGLIB/std/crypto/tls.zig	/their_end: usize = 0/;"	field
then_expr	$ZIGLIB/std/zig/Parse.zig	/const then_expr = try p.expectTypeExpr()/;"	constant
then_expr_is_block	$ZIGLIB/std/zig/render.zig	/const then_expr_is_block = nodeIsBlock(node_tags[while_node.ast.then_expr])/;"	constant
third_grandchild_index	$ZIGLIB/std/priority_dequeue.zig	/const third_grandchild_index = second_grandchild_index + 1/;"	constant
this_contains_newline	$ZIGLIB/std/zig/render.zig	/const this_contains_newline = mem.indexOfScalar(u8, sub_expr_buffer.items[start..], '\\n') != null/;"	constant
this_die_obj	$ZIGLIB/std/dwarf.zig	/var this_die_obj = die_obj/;"	variable
this_key	$ZIGLIB/std/os.zig	/const this_key = ptr[key_start..i]/;"	constant
this_limb_lz	$ZIGLIB/std/math/big/int.zig	/const this_limb_lz = @clz(limb)/;"	constant
this_line_first_expr	$ZIGLIB/std/zig/render.zig	/var this_line_first_expr: usize = 0/;"	variable
this_line_size	$ZIGLIB/std/zig/render.zig	/var this_line_size = rowSize(tree, row_exprs, rbrace)/;"	variable
this_path	$ZIGLIB/std/fs/path.zig	/const this_path = paths[i]/;"	constant
this_ph	$ZIGLIB/std/os/linux/vdso.zig	/const this_ph = @intToPtr(*elf.Phdr, ph_addr)/;"	constant
this_record_len	$ZIGLIB/std/pdb.zig	/var this_record_len: usize = @sizeOf(ModInfo)/;"	variable
this_sep	$ZIGLIB/std/fs/path.zig	/const this_sep = sepPredicate(this_path[0])/;"	constant
this_tag_value	$ZIGLIB/std/meta.zig	/const this_tag_value = @field(EnumTag, f.name)/;"	constant
this_unit_offset	$ZIGLIB/std/dwarf.zig	/var this_unit_offset: u64 = 0/;"	variable
this_value	$ZIGLIB/std/os.zig	/const this_value = ptr[value_start..i :0]/;"	constant
thread	$ZIGLIB/std/event/loop.zig	/thread: std.Thread/;"	field
threadSafeAlloc	$ZIGLIB/std/heap.zig	/fn threadSafeAlloc(ctx: *anyopaque, n: usize, log2_ptr_align: u8, ra: usize) ?[*]u8 {$/;"	function
threadSafeAllocator	$ZIGLIB/std/heap.zig	/pub fn threadSafeAllocator(self: *FixedBufferAllocator) Allocator {$/;"	function
thread_act_t	$ZIGLIB/std/c/darwin.zig	/^pub const thread_act_t = mach_port_t/;"	constant
thread_basic_info	$ZIGLIB/std/c/darwin.zig	/^pub const thread_basic_info = extern struct {$/;"	struct
thread_count	$ZIGLIB/std/os/darwin.zig	/var thread_count: std.c.mach_msg_type_number_t = undefined/;"	variable
thread_done_event	$ZIGLIB/std/Thread.zig	/thread_done_event: ResetEvent = .{}/;"	field
thread_flavor_t	$ZIGLIB/std/c/darwin.zig	/^pub const thread_flavor_t = natural_t/;"	constant
thread_fn	$ZIGLIB/std/once.zig	/fn thread_fn(x: u8) void {$/;"	function
thread_handle	$ZIGLIB/std/child_process.zig	/thread_handle: if (builtin.os.tag == .windows) windows.HANDLE else void/;"	field
thread_id	$ZIGLIB/std/c/darwin.zig	/thread_id: u64/;"	field
thread_id_to_wake	$ZIGLIB/std/Thread/Condition.zig	/thread_id_to_wake: usize = 0/;"	field
thread_identifier_info	$ZIGLIB/std/c/darwin.zig	/^pub const thread_identifier_info = extern struct {$/;"	struct
thread_info_t	$ZIGLIB/std/c/darwin.zig	/^pub const thread_info_t = *integer_t/;"	constant
thread_list	$ZIGLIB/std/os/darwin.zig	/var thread_list: std.c.mach_port_array_t = undefined/;"	variable
thread_local_token	$ZIGLIB/std/zig/Parse.zig	/const thread_local_token = p.eatToken(.keyword_threadlocal)/;"	constant
thread_port_t	$ZIGLIB/std/c/darwin.zig	/^pub const thread_port_t = task_t/;"	constant
thread_safe	$ZIGLIB/std/heap/general_purpose_allocator.zig	/thread_safe: bool = !builtin.single_threaded/;"	field
thread_state	$ZIGLIB/std/c/darwin/x86_64.zig	/^pub const thread_state = extern struct {$/;"	struct
thread_state_flavor_t	$ZIGLIB/std/c/darwin.zig	/^pub const thread_state_flavor_t = c_int/;"	constant
thread_state_t	$ZIGLIB/std/c/darwin.zig	/^pub const thread_state_t = *natural_t/;"	constant
thread_t	$ZIGLIB/std/c/darwin.zig	/^pub const thread_t = thread_port_t/;"	constant
threadlocal_token	$ZIGLIB/std/zig/Ast.zig	/threadlocal_token: ?TokenIndex/;"	field
threads	$ZIGLIB/std/once.zig	/var threads: [10]std.Thread = undefined/;"	variable
threads_list	$ZIGLIB/std/crypto/argon2.zig	/var threads_list = try std.ArrayList(Thread).initCapacity(allocator, threads)/;"	variable
threads_scaled	$ZIGLIB/std/dwarf/AT.zig	/^pub const threads_scaled = 0x62/;"	constant
three	$ZIGLIB/std/linked_list.zig	/var three = L.Node{ .data = 3 }/;"	variable
threshold	$ZIGLIB/std/math/complex/sqrt.zig	/const threshold = 0x1.a827999fcef32p+1022/;"	constant
thrown_type	$ZIGLIB/std/dwarf/TAG.zig	/^pub const thrown_type = 0x31/;"	constant
thumb	$ZIGLIB/std/target.zig	/thumb/;"	field
thumb2	$ZIGLIB/std/target/arm.zig	/thumb2/;"	field
thumb_mode	$ZIGLIB/std/target/arm.zig	/thumb_mode/;"	field
thumbeb	$ZIGLIB/std/target.zig	/thumbeb/;"	field
thunderx	$ZIGLIB/std/target/aarch64.zig	/pub const thunderx = CpuModel{$/;"	constant
thunderx2t99	$ZIGLIB/std/target/aarch64.zig	/pub const thunderx2t99 = CpuModel{$/;"	constant
thunderx3t110	$ZIGLIB/std/target/aarch64.zig	/pub const thunderx3t110 = CpuModel{$/;"	constant
thunderxt81	$ZIGLIB/std/target/aarch64.zig	/pub const thunderxt81 = CpuModel{$/;"	constant
thunderxt83	$ZIGLIB/std/target/aarch64.zig	/pub const thunderxt83 = CpuModel{$/;"	constant
thunderxt88	$ZIGLIB/std/target/aarch64.zig	/pub const thunderxt88 = CpuModel{$/;"	constant
tick_node	$ZIGLIB/std/event/channel.zig	/tick_node: *Loop.NextTickNode/;"	field
ticks	$ZIGLIB/std/os/windows/winmm.zig	/ticks: DWORD/;"	field
tigerlake	$ZIGLIB/std/target/x86.zig	/pub const tigerlake = CpuModel{$/;"	constant
tilde	$ZIGLIB/std/zig/tokenizer.zig	/tilde/;"	field
time	$ZIGLIB/std/os/windows/user32.zig	/time: DWORD/;"	field
time_0	$ZIGLIB/std/time.zig	/const time_0 = timer.read()/;"	constant
time_1	$ZIGLIB/std/time.zig	/const time_1 = timer.lap()/;"	constant
time_date_stamp	$ZIGLIB/std/coff.zig	/time_date_stamp: u32/;"	field
time_high_and_version	$ZIGLIB/std/os/uefi.zig	/time_high_and_version: u16/;"	field
time_low	$ZIGLIB/std/os/uefi.zig	/time_low: u32/;"	field
time_mid	$ZIGLIB/std/os/uefi.zig	/time_mid: u16/;"	field
time_t	$ZIGLIB/std/os/wasi.zig	/^pub const time_t = i64/;"	constant
time_value	$ZIGLIB/std/c/darwin.zig	/^pub const time_value = extern struct {$/;"	struct
time_value_t	$ZIGLIB/std/c/darwin.zig	/^pub const time_value_t = time_value/;"	constant
timecnt	$ZIGLIB/std/tz.zig	/timecnt: u32/;"	field
timedWait	$ZIGLIB/std/Thread/ResetEvent.zig	/^pub fn timedWait(self: *ResetEvent, timeout_ns: u64) error{Timeout}!void {$/;"	function
timeout	$ZIGLIB/std/os/wasi.zig	/timeout: timestamp_t/;"	field
timeout_ms	$ZIGLIB/std/Thread/Condition.zig	/var timeout_ms: os.windows.DWORD = os.windows.INFINITE/;"	variable
timeout_ns	$ZIGLIB/std/Thread/ResetEvent.zig	/const timeout_ns = timeout orelse {$/;"	constant
timeout_overflowed	$ZIGLIB/std/Thread/Futex.zig	/var timeout_overflowed = false/;"	variable
timeout_ptr	$ZIGLIB/std/Thread/Futex.zig	/var timeout_ptr: ?*const os.windows.LARGE_INTEGER = null/;"	variable
timeout_remove	$ZIGLIB/std/os/linux/io_uring.zig	/pub fn timeout_remove($/;"	function
timeout_us	$ZIGLIB/std/Thread/Futex.zig	/var timeout_us: c_int = 0/;"	variable
timeout_value	$ZIGLIB/std/Thread/Futex.zig	/var timeout_value: os.windows.LARGE_INTEGER = undefined/;"	variable
timer	$ZIGLIB/std/time.zig	/var timer = try Timer.start()/;"	variable
timer_create	$ZIGLIB/std/os/linux/syscalls.zig	/timer_create = Linux + 257/;"	field
timer_delete	$ZIGLIB/std/os/linux/syscalls.zig	/timer_delete = Linux + 261/;"	field
timer_getoverrun	$ZIGLIB/std/os/linux/syscalls.zig	/timer_getoverrun = Linux + 260/;"	field
timer_gettime	$ZIGLIB/std/os/linux/syscalls.zig	/timer_gettime = Linux + 259/;"	field
timer_gettime64	$ZIGLIB/std/os/linux/syscalls.zig	/timer_gettime64 = Linux + 408/;"	field
timer_settime	$ZIGLIB/std/os/linux/syscalls.zig	/timer_settime = Linux + 258/;"	field
timer_settime64	$ZIGLIB/std/os/linux/syscalls.zig	/timer_settime64 = Linux + 409/;"	field
timerfd	$ZIGLIB/std/os/linux/syscalls.zig	/timerfd = Linux + 318/;"	field
timerfd_create	$ZIGLIB/std/os/linux/syscalls.zig	/timerfd_create = Linux + 321/;"	field
timerfd_gettime	$ZIGLIB/std/os/linux/syscalls.zig	/timerfd_gettime = Linux + 322/;"	field
timerfd_gettime64	$ZIGLIB/std/os/linux/syscalls.zig	/timerfd_gettime64 = Linux + 410/;"	field
timerfd_settime	$ZIGLIB/std/os/linux/syscalls.zig	/timerfd_settime = Linux + 323/;"	field
timerfd_settime64	$ZIGLIB/std/os/linux/syscalls.zig	/timerfd_settime64 = Linux + 411/;"	field
timerid	$ZIGLIB/std/os/linux.zig	/timerid: i32/;"	field
times	$ZIGLIB/std/os/linux/syscalls.zig	/times = Linux + 98/;"	field
timespec	$ZIGLIB/std/os/wasi.zig	/^pub const timespec = extern struct {$/;"	struct
timestamp	$ZIGLIB/std/time.zig	/timestamp: if (is_posix) os.timespec else u64/;"	field
timestamp_t	$ZIGLIB/std/os/wasi.zig	/^pub const timestamp_t = u64/;"	constant
timetype	$ZIGLIB/std/tz.zig	/timetype: *Timetype/;"	field
timetypes	$ZIGLIB/std/tz.zig	/var timetypes = try allocator.alloc(Timetype, header.counts.typecnt)/;"	variable
timeval	$ZIGLIB/std/os/linux/x86_64.zig	/^pub const timeval = extern struct {$/;"	struct
timezone	$ZIGLIB/std/os/uefi.zig	/timezone: i16/;"	field
timingSafeAdd	$ZIGLIB/std/crypto/utils.zig	/^pub fn timingSafeAdd(comptime T: type, a: []const T, b: []const T, result: []T, endian: Endian) bool {$/;"	function
timingSafeCompare	$ZIGLIB/std/crypto/utils.zig	/^pub fn timingSafeCompare(comptime T: type, a: []const T, b: []const T, endian: Endian) Order {$/;"	function
timingSafeEql	$ZIGLIB/std/crypto/utils.zig	/^pub fn timingSafeEql(comptime T: type, a: T, b: T) bool {$/;"	function
timingSafeSub	$ZIGLIB/std/crypto/utils.zig	/^pub fn timingSafeSub(comptime T: type, a: []const T, b: []const T, result: []T, endian: Endian) bool {$/;"	function
tiny	$ZIGLIB/std/builtin.zig	/tiny/;"	field
tinycore	$ZIGLIB/std/target/hexagon.zig	/tinycore/;"	field
tinyencoding	$ZIGLIB/std/target/avr.zig	/tinyencoding/;"	field
tioc	$ZIGLIB/std/c/solaris.zig	/^fn tioc(t: u16, num: u8) u16 {$/;"	function
tkill	$ZIGLIB/std/os/linux/syscalls.zig	/tkill = Linux + 236/;"	field
tlb_rmi	$ZIGLIB/std/target/aarch64.zig	/tlb_rmi/;"	field
tls13	$ZIGLIB/std/crypto/tls.zig	/const tls13 = "tls13 "/;"	constant
tlsCsprngFill	$ZIGLIB/std/crypto/tlcsprng.zig	/^fn tlsCsprngFill(_: *anyopaque, buffer: []u8) void {$/;"	function
tls_1_2	$ZIGLIB/std/crypto/tls.zig	/tls_1_2 = 0x0303/;"	field
tls_1_3	$ZIGLIB/std/crypto/tls.zig	/tls_1_3 = 0x0304/;"	field
tls_align_factor	$ZIGLIB/std/os/linux/tls.zig	/var tls_align_factor: usize = undefined/;"	variable
tls_area	$ZIGLIB/std/os/linux/tls.zig	/const tls_area = blk: {$/;"	constant
tls_block	$ZIGLIB/std/os/linux/tls.zig	/tls_block: [1][*]u8/;"	field
tls_client	$ZIGLIB/std/http/Client.zig	/tls_client: std.crypto.tls.Client/;"	field
tls_data	$ZIGLIB/std/os/linux/tls.zig	/var tls_data: []const u8 = undefined/;"	variable
tls_data_alloc_size	$ZIGLIB/std/os/linux/tls.zig	/var tls_data_alloc_size: usize = undefined/;"	variable
tls_dtv_offset	$ZIGLIB/std/os/linux/tls.zig	/^const tls_dtv_offset = switch (native_arch) {$/;"	constant
tls_image	$ZIGLIB/std/os/linux/tls.zig	/^pub var tls_image: TLSImage = undefined/;"	variable
tls_offset	$ZIGLIB/std/Thread.zig	/var tls_offset: usize = undefined/;"	variable
tls_phdr	$ZIGLIB/std/os/linux/tls.zig	/var tls_phdr: ?*elf.Phdr = null/;"	variable
tls_ptr	$ZIGLIB/std/Thread.zig	/var tls_ptr = os.linux.tls.prepareTLS(mapped[tls_offset..])/;"	variable
tls_tcb_size	$ZIGLIB/std/os/linux/tls.zig	/^const tls_tcb_size = switch (native_arch) {$/;"	constant
tls_thread_id	$ZIGLIB/std/Thread.zig	/threadlocal var tls_thread_id: ?Id = null/;"	variable
tls_tp_offset	$ZIGLIB/std/os/linux/tls.zig	/^const tls_tp_offset = switch (native_arch) {$/;"	constant
tls_tp_points_past_tcb	$ZIGLIB/std/os/linux/tls.zig	/^const tls_tp_points_past_tcb = switch (native_arch) {$/;"	constant
tls_variant	$ZIGLIB/std/os/linux/tls.zig	/^const tls_variant = switch (native_arch) {$/;"	constant
tls_version	$ZIGLIB/std/crypto/tls/Client.zig	/const tls_version = if (supported_version == 0) legacy_version else supported_version/;"	constant
tm_ptr	$ZIGLIB/std/Thread/Futex.zig	/var tm_ptr: ?*const os.freebsd._umtx_time = null/;"	variable
tm_size	$ZIGLIB/std/Thread/Futex.zig	/var tm_size: usize = 0/;"	variable
tmp0	$ZIGLIB/std/math/big/int.zig	/const tmp0 = [_]Limb{$/;"	constant
tmp1	$ZIGLIB/std/math/big/int.zig	/var tmp1: []Limb = undefined/;"	variable
tmp2	$ZIGLIB/std/math/big/int.zig	/var tmp2: []Limb = undefined/;"	variable
tmpDir	$ZIGLIB/std/testing.zig	/^pub fn tmpDir(opts: std.fs.Dir.OpenDirOptions) TmpDir {$/;"	function
tmpIterableDir	$ZIGLIB/std/testing.zig	/^pub fn tmpIterableDir(opts: std.fs.Dir.OpenDirOptions) TmpIterableDir {$/;"	function
tmp_arena	$ZIGLIB/std/dwarf.zig	/var tmp_arena = std.heap.ArenaAllocator.init(allocator)/;"	variable
tmp_buf	$ZIGLIB/std/compress/gzip.zig	/const tmp_buf = try allocator.alloc(u8, len)/;"	constant
tmp_bufs	$ZIGLIB/std/zig/system/windows.zig	/var tmp_bufs: [fields_info.len][max_value_len]u8 align(@alignOf(std.os.windows.UNICODE_STRING)) = undefined/;"	variable
tmp_bufw	$ZIGLIB/std/child_process.zig	/var tmp_bufw: [128]u16 = undefined/;"	variable
tmp_handle	$ZIGLIB/std/os/windows.zig	/var tmp_handle: HANDLE = undefined/;"	variable
tmp_path	$ZIGLIB/std/fs.zig	/const tmp_path = try allocator.alloc(u8, dirname.len + 1 + base64_encoder.calcSize(rand_buf.len))/;"	constant
tmp_path_buf	$ZIGLIB/std/fs.zig	/var tmp_path_buf: [TMP_PATH_LEN:0]u8 = undefined/;"	variable
tmp_x	$ZIGLIB/std/math/big/int.zig	/var tmp_x = try Managed.init(limbs_buffer.allocator)/;"	variable
tnpc	$ZIGLIB/std/os/linux/sparc64.zig	/tnpc: u64/;"	field
toAudit	$ZIGLIB/std/os/linux.zig	/fn toAudit(arch: std.Target.Cpu.Arch) u32 {$/;"	function
toB64	$ZIGLIB/std/crypto/scrypt.zig	/fn toB64(self: *const Self, buf: []u8) ![]const u8 {$/;"	function
toBytes	$ZIGLIB/std/mem.zig	/^pub fn toBytes(value: anytype) [@sizeOf(@TypeOf(value))]u8 {$/;"	function
toCoffMachine	$ZIGLIB/std/target.zig	/pub fn toCoffMachine(arch: Arch) std.coff.MachineType {$/;"	function
toCompressedSec1	$ZIGLIB/std/crypto/pcurves/secp256k1.zig	/pub fn toCompressedSec1(p: Secp256k1) [33]u8 {$/;"	function
toConst	$ZIGLIB/std/math/big/int.zig	/pub fn toConst(self: Mutable) Const {$/;"	function
toCpu	$ZIGLIB/std/target.zig	/pub fn toCpu(model: *const Model, arch: Arch) Cpu {$/;"	function
toDer	$ZIGLIB/std/crypto/ecdsa.zig	/pub fn toDer(self: Signature, buf: *[der_encoded_max_length]u8) []u8 {$/;"	function
toElfMachine	$ZIGLIB/std/target.zig	/pub fn toElfMachine(arch: Arch) std.elf.EM {$/;"	function
toFloat	$ZIGLIB/std/math/big/rational.zig	/pub fn toFloat(self: Rational, comptime T: type) !T {$/;"	function
toInt	$ZIGLIB/std/crypto/siphash.zig	/pub fn toInt(msg: []const u8, key: *const [key_length]u8) T {$/;"	function
toLower	$ZIGLIB/std/ascii.zig	/^pub fn toLower(c: u8) u8 {$/;"	function
toManaged	$ZIGLIB/std/math/big/int.zig	/pub fn toManaged(self: Mutable, allocator: Allocator) Managed {$/;"	function
toMemFdPath	$ZIGLIB/std/os.zig	/^fn toMemFdPath(name: []const u8) ![MFD_MAX_NAME_LEN:0]u8 {$/;"	function
toMontgomery	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/^pub fn toMontgomery(out1: *MontgomeryDomainFieldElement, arg1: NonMontgomeryDomainFieldElement) void {$/;"	function
toMultiArrayList	$ZIGLIB/std/multi_array_list.zig	/pub fn toMultiArrayList(self: Slice) Self {$/;"	function
toMutable	$ZIGLIB/std/math/big/int.zig	/pub fn toMutable(self: Managed) Mutable {$/;"	function
toNative	$ZIGLIB/std/mem.zig	/^pub fn toNative(comptime T: type, x: T, endianness_of_x: Endian) T {$/;"	function
toOwnedSlice	$ZIGLIB/std/multi_array_list.zig	/pub fn toOwnedSlice(self: *Self) Slice {$/;"	function
toOwnedSliceSentinel	$ZIGLIB/std/array_list.zig	/pub fn toOwnedSliceSentinel(self: *Self, comptime sentinel: T) Allocator.Error!SentinelSlice(sentinel) {$/;"	function
toPosixPath	$ZIGLIB/std/os.zig	/^pub fn toPosixPath(file_path: []const u8) ![MAX_PATH_BYTES - 1:0]u8 {$/;"	function
toSeconds	$ZIGLIB/std/crypto/Certificate.zig	/pub fn toSeconds(date: Date) u64 {$/;"	function
toSlice	$ZIGLIB/std/crypto/gimli.zig	/pub fn toSlice(self: *Self) *[BLOCKBYTES]u8 {$/;"	function
toSliceConst	$ZIGLIB/std/crypto/gimli.zig	/pub fn toSliceConst(self: *const Self) *const [BLOCKBYTES]u8 {$/;"	function
toSpan	$ZIGLIB/std/zig/Parse.zig	/fn toSpan(self: Members, p: *Parse) !Node.SubRange {$/;"	function
toString	$ZIGLIB/std/math/big/int.zig	/pub fn toString(self: Managed, allocator: Allocator, base: u8, case: std.fmt.Case) ![]u8 {$/;"	function
toStringAlloc	$ZIGLIB/std/math/big/int.zig	/pub fn toStringAlloc(self: Const, allocator: Allocator, base: u8, case: std.fmt.Case) Allocator.Error![]u8 {$/;"	function
toSysTime	$ZIGLIB/std/os/windows.zig	/^pub fn toSysTime(ns: i128) i64 {$/;"	function
toTarget	$ZIGLIB/std/zig/CrossTarget.zig	/^pub fn toTarget(self: CrossTarget) Target {$/;"	function
toTargetCpuArch	$ZIGLIB/std/elf.zig	/pub fn toTargetCpuArch(em: EM) ?std.Target.Cpu.Arch {$/;"	function
toTimestamp	$ZIGLIB/std/os/wasi.zig	/pub fn toTimestamp(ts: timespec) timestamp_t {$/;"	function
toUncompressedSec1	$ZIGLIB/std/crypto/pcurves/secp256k1.zig	/pub fn toUncompressedSec1(p: Secp256k1) [65]u8 {$/;"	function
toUpper	$ZIGLIB/std/ascii.zig	/^pub fn toUpper(c: u8) u8 {$/;"	function
toWord	$ZIGLIB/std/crypto/bcrypt.zig	/fn toWord(data: []const u8, current: *usize) u32 {$/;"	function
to_check	$ZIGLIB/std/compress/deflate/compressor.zig	/var to_check = self.window[index..end]/;"	variable
to_it	$ZIGLIB/std/fs/path.zig	/var to_it = mem.tokenize(u8, resolved_to, "\/\\\\")/;"	variable
to_print	$ZIGLIB/std/debug.zig	/const to_print = std.fmt.bufPrint(buf[0..buf.len], format_item, .{info.ExceptionRecord.ExceptionInformation[1]}) catch unreachable/;"	constant
to_read	$ZIGLIB/std/os/windows.zig	/const to_read: ULONG = math.min(buff.len, max_read_size)/;"	constant
to_rest	$ZIGLIB/std/fs/path.zig	/const to_rest = to_it.rest()/;"	constant
to_s	$ZIGLIB/std/compress/deflate/huffman_bit_writer.zig	/fn to_s(self: TestType) []const u8 {$/;"	function
to_submit	$ZIGLIB/std/os/linux/io_uring.zig	/const to_submit = self.sq.sqe_tail -% self.sq.sqe_head/;"	constant
to_wake	$ZIGLIB/std/Thread/Futex.zig	/const to_wake = std.math.cast(c_int, max_waiters) orelse 0/;"	constant
to_write	$ZIGLIB/std/io/writer.zig	/const to_write = std.math.min(remaining, bytes.len)/;"	constant
tocoff	$ZIGLIB/std/macho.zig	/tocoff: u32 = 0/;"	field
toggle	$ZIGLIB/std/enums.zig	/pub fn toggle(self: *Self, key: Key) void {$/;"	function
toggleAll	$ZIGLIB/std/enums.zig	/pub fn toggleAll(self: *Self) void {$/;"	function
toggleCollect	$ZIGLIB/std/valgrind/callgrind.zig	/^pub fn toggleCollect() void {$/;"	function
toggleFirstSet	$ZIGLIB/std/bit_set.zig	/pub fn toggleFirstSet(self: *Self) ?usize {$/;"	function
toggleSet	$ZIGLIB/std/enums.zig	/pub fn toggleSet(self: *Self, other: Self) void {$/;"	function
toggle_state_valid	$ZIGLIB/std/os/uefi/protocols/simple_text_input_ex_protocol.zig	/toggle_state_valid: bool/;"	field
toint	$ZIGLIB/compiler_rt/rem_pio2f.zig	/^const toint = 1.5 \/ math.floatEps(f64)/;"	constant
tok_flag	$ZIGLIB/std/zig/Ast.zig	/tok_flag: bool/;"	field
tok_i	$ZIGLIB/std/zig/render.zig	/var tok_i = first_clobber/;"	variable
tok_it	$ZIGLIB/std/net.zig	/var tok_it = mem.tokenize(u8, search, " \\t")/;"	variable
tok_len	$ZIGLIB/std/zig/Parse.zig	/const tok_len = tok_tag.lexeme().?.len/;"	constant
tok_tag	$ZIGLIB/std/zig/Parse.zig	/const tok_tag = p.token_tags[p.tok_i]/;"	constant
token	$ZIGLIB/std/zig/tokenizer.zig	/const token = tokenizer.next()/;"	constant
token1	$ZIGLIB/std/json.zig	/var token1: ?Token = undefined/;"	variable
token2	$ZIGLIB/std/json.zig	/var token2: ?Token = undefined/;"	variable
tokenLocation	$ZIGLIB/std/zig/Ast.zig	/^pub fn tokenLocation(self: Ast, start_offset: ByteOffset, token_index: TokenIndex) Location {$/;"	function
tokenSlice	$ZIGLIB/std/zig/Ast.zig	/^pub fn tokenSlice(tree: Ast, token_index: TokenIndex) []const u8 {$/;"	function
tokenSliceForRender	$ZIGLIB/std/zig/render.zig	/^fn tokenSliceForRender(tree: Ast, token_index: Ast.TokenIndex) []const u8 {$/;"	function
token_index	$ZIGLIB/std/zig/render.zig	/const token_index = main_tokens[node]/;"	constant
token_is_prev	$ZIGLIB/std/zig/Ast.zig	/token_is_prev: bool = false/;"	field
token_start	$ZIGLIB/std/zig/render.zig	/const token_start = token_starts[token_index]/;"	constant
token_starts	$ZIGLIB/std/zig/render.zig	/const token_starts = tree.tokens.items(.start)/;"	constant
token_tag	$ZIGLIB/std/zig/Ast.zig	/const token_tag = token_tags[token_index]/;"	constant
token_tags	$ZIGLIB/std/zig/render.zig	/const token_tags = tree.tokens.items(.tag)/;"	constant
tokenize	$ZIGLIB/std/mem.zig	/^pub fn tokenize(comptime T: type, buffer: []const T, delimiter_bytes: []const T) TokenIterator(T) {$/;"	function
tokenizer	$ZIGLIB/std/zig/tokenizer.zig	/var tokenizer = Tokenizer.init(source)/;"	variable
tokens	$ZIGLIB/std/zig/Ast.zig	/var tokens = Ast.TokenList{}/;"	variable
tokensOnSameLine	$ZIGLIB/std/zig/Parse.zig	/^fn tokensOnSameLine(p: *Parse, token1: TokenIndex, token2: TokenIndex) bool {$/;"	function
tokens_copy	$ZIGLIB/std/json.zig	/var tokens_copy = tokens.*/;"	variable
tokens_count	$ZIGLIB/std/compress/deflate/deflate_fast.zig	/var tokens_count: u16 = 0/;"	variable
tolerance_f32	$ZIGLIB/std/math/complex/exp.zig	/const tolerance_f32 = @sqrt(math.floatEps(f32))/;"	constant
tolerance_f64	$ZIGLIB/std/math/complex/exp.zig	/const tolerance_f64 = @sqrt(math.floatEps(f64))/;"	constant
tombstone	$ZIGLIB/std/hash_map.zig	/const tombstone: FingerPrint = 1/;"	constant
tonga	$ZIGLIB/std/target/amdgpu.zig	/pub const tonga = CpuModel{$/;"	constant
tongapro	$ZIGLIB/std/target/amdgpu.zig	/pub const tongapro = CpuModel{$/;"	constant
too_early	$ZIGLIB/std/http.zig	/too_early = 425/;"	field
too_many_requests	$ZIGLIB/std/http.zig	/too_many_requests = 429/;"	field
too_targe	$ZIGLIB/std/crypto/25519/scalar.zig	/const too_targe: [32]u8 = .{ 0xed, 0xd3, 0xf5, 0x5c, 0x1a, 0x63, 0x12, 0x58, 0xd6, 0x9c, 0xf7, 0xa2, 0xde, 0xf9, 0xde, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10 }/;"	constant
tool	$ZIGLIB/std/macho.zig	/tool: TOOL/;"	field
top_bit	$ZIGLIB/std/bit_set.zig	/const top_bit = (@bitSizeOf(MaskInt) - 1) - leading_zeroes/;"	constant
top_free_ptr	$ZIGLIB/std/heap/WasmAllocator.zig	/const top_free_ptr = frees[class]/;"	constant
top_level	$ZIGLIB/std/Build/Step.zig	/top_level/;"	field
top_level_decl	$ZIGLIB/std/zig/Parse.zig	/const top_level_decl = try p.expectTopLevelDeclRecoverable()/;"	constant
top_level_steps	$ZIGLIB/std/Build.zig	/^top_level_steps: ArrayList(*TopLevelStep)/;"	field
topkey	$ZIGLIB/std/zig/system/windows.zig	/const topkey = std.unicode.utf8ToUtf16LeStringLiteral("\\\\Registry\\\\Machine\\\\HARDWARE\\\\DESCRIPTION\\\\System\\\\CentralProcessor")/;"	constant
total	$ZIGLIB/std/hash_map.zig	/var total: u32 = 0/;"	variable
totalPages	$ZIGLIB/std/heap/WasmPageAllocator.zig	/fn totalPages(self: FreeBlock) usize {$/;"	function
total_amt	$ZIGLIB/std/crypto/tls/Client.zig	/var total_amt: usize = 0/;"	variable
total_bits	$ZIGLIB/std/packed_int_array.zig	/const total_bits = max_bits * int_count/;"	constant
total_bytes	$ZIGLIB/std/process.zig	/var total_bytes: usize = 0/;"	variable
total_bytes_copied	$ZIGLIB/std/fs/file.zig	/var total_bytes_copied: u64 = 0/;"	variable
total_chunks	$ZIGLIB/std/crypto/blake3.zig	/const total_chunks = self.chunk_state.chunk_counter + 1/;"	constant
total_ext_size	$ZIGLIB/std/crypto/tls/Client.zig	/const total_ext_size = hsd.decode(u16)/;"	constant
total_len	$ZIGLIB/std/os/windows.zig	/const total_len = drive_letter.len + file_name_u16.len/;"	constant
total_limb_bits	$ZIGLIB/std/math/big/int.zig	/const total_limb_bits = a.limbs.len * bits_per_limb/;"	constant
total_limb_lz	$ZIGLIB/std/math/big/int.zig	/var total_limb_lz: Limb = 0/;"	variable
total_read	$ZIGLIB/std/os/windows.zig	/var total_read: usize = 0/;"	variable
total_requested_bytes	$ZIGLIB/std/heap/general_purpose_allocator.zig	/total_requested_bytes: @TypeOf(total_requested_bytes_init) = total_requested_bytes_init/;"	field
total_requested_bytes_init	$ZIGLIB/std/heap/general_purpose_allocator.zig	/const total_requested_bytes_init = if (config.enable_memory_limit) @as(usize, 0) else {}/;"	constant
total_size	$ZIGLIB/std/heap/arena_allocator.zig	/var total_size: usize = random.intRangeAtMost(usize, 256, 16384)/;"	variable
total_tokens	$ZIGLIB/std/compress/deflate/huffman_bit_writer.zig	/var total_tokens = self.indexTokens(tokens)/;"	variable
total_words	$ZIGLIB/std/crypto/aes/soft.zig	/const total_words = 4 * round_keys.len/;"	constant
total_written	$ZIGLIB/std/os/darwin.zig	/var total_written: usize = 0/;"	variable
touch_active	$ZIGLIB/std/os/uefi/protocols/absolute_pointer_protocol.zig	/touch_active: bool/;"	field
tp_value	$ZIGLIB/std/os/linux/tls.zig	/const tp_value = prepareTLS(tls_area)/;"	constant
tpidr_el1	$ZIGLIB/std/target/aarch64.zig	/tpidr_el1/;"	field
tpidr_el2	$ZIGLIB/std/target/aarch64.zig	/tpidr_el2/;"	field
tpidr_el3	$ZIGLIB/std/target/aarch64.zig	/tpidr_el3/;"	field
tpl_application	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/pub const tpl_application: usize = 4/;"	constant
tpl_callback	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/pub const tpl_callback: usize = 8/;"	constant
tpl_high_level	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/pub const tpl_high_level: usize = 31/;"	constant
tpl_notify	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/pub const tpl_notify: usize = 16/;"	constant
trace_fentry	$ZIGLIB/std/os/linux/bpf.zig	/trace_fentry/;"	field
trace_fexit	$ZIGLIB/std/os/linux/bpf.zig	/trace_fexit/;"	field
trace_iter	$ZIGLIB/std/os/linux/bpf.zig	/trace_iter/;"	field
trace_n	$ZIGLIB/std/heap/general_purpose_allocator.zig	/const trace_n = if (config.retain_metadata) traces_per_slot else 1/;"	constant
trace_printk	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const trace_printk = @intToPtr(fn (fmt: [*:0]const u8, fmt_size: u32, arg1: u64, arg2: u64, arg3: u64) c_long, 6)/;"	constant
trace_raw_tp	$ZIGLIB/std/os/linux/bpf.zig	/trace_raw_tp/;"	field
tracepoint	$ZIGLIB/std/os/linux/bpf.zig	/tracepoint/;"	field
traces_per_slot	$ZIGLIB/std/heap/general_purpose_allocator.zig	/const traces_per_slot = 2/;"	constant
tracev8_4	$ZIGLIB/std/target/aarch64.zig	/tracev8_4/;"	field
tracing	$ZIGLIB/std/os/linux/bpf.zig	/tracing/;"	field
traffic_class	$ZIGLIB/std/os/uefi/protocols/udp6_protocol.zig	/traffic_class: u8/;"	field
trail	$ZIGLIB/std/http/Client.zig	/const trail = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"/;"	constant
trailers	$ZIGLIB/std/fs/file.zig	/const trailers = args.headers_and_trailers[args.header_count..]/;"	constant
trailing	$ZIGLIB/std/zig/Parse.zig	/var trailing = false/;"	variable
trailing_comma	$ZIGLIB/std/zig/render.zig	/const trailing_comma = token_tags[switch_case.ast.arrow_token - 1] == .comma/;"	constant
trailing_special	$ZIGLIB/std/zig/number_literal.zig	/trailing_special: usize/;"	field
trailing_underscore	$ZIGLIB/std/zig/number_literal.zig	/trailing_underscore: usize/;"	field
trait	$ZIGLIB/std/meta/trait.zig	/pub fn trait(comptime T: type) bool {$/;"	function
trampoline	$ZIGLIB/std/dwarf/AT.zig	/^pub const trampoline = 0x56/;"	constant
transactional_execution	$ZIGLIB/std/target/s390x.zig	/transactional_execution/;"	field
transcript_digest	$ZIGLIB/std/crypto/tls/Client.zig	/const transcript_digest = p.transcript_hash.peek()/;"	constant
transcript_hash	$ZIGLIB/std/crypto/tls.zig	/transcript_hash: Hash/;"	field
transfer_encoding	$ZIGLIB/std/http/Client.zig	/transfer_encoding: ?http.TransferEncoding = null/;"	field
transition	$ZIGLIB/std/json.zig	/fn transition(p: *StreamingParser, c: u8, token: *?Token) Error!bool {$/;"	function
transitions	$ZIGLIB/std/tz.zig	/var transitions = try allocator.alloc(Transition, header.counts.timecnt)/;"	variable
transitive_deps	$ZIGLIB/std/Build/CompileStep.zig	/var transitive_deps: TransitiveDeps = .{$/;"	variable
translateMessage	$ZIGLIB/std/os/windows/user32.zig	/^pub fn translateMessage(lpMsg: *const MSG) bool {$/;"	function
translate_c	$ZIGLIB/std/Build/Step.zig	/translate_c/;"	field
transmit	$ZIGLIB/std/os/uefi/protocols/udp6_protocol.zig	/pub fn transmit(self: *const Udp6Protocol, token: *Udp6CompletionToken) Status {$/;"	function
transmit_interrupt	$ZIGLIB/std/os/uefi/protocols/simple_network_protocol.zig	/transmit_interrupt: bool/;"	field
transmit_queue_timeout_value	$ZIGLIB/std/os/uefi/protocols/managed_network_protocol.zig	/transmit_queue_timeout_value: u32/;"	field
transmit_timeout	$ZIGLIB/std/os/uefi/protocols/udp6_protocol.zig	/transmit_timeout: u32/;"	field
trap	$ZIGLIB/std/c/netbsd.zig	/trap: i32/;"	field
trap2	$ZIGLIB/std/c/netbsd.zig	/trap2: i32/;"	field
trap3	$ZIGLIB/std/c/netbsd.zig	/trap3: i32/;"	field
trap_handler	$ZIGLIB/std/target/amdgpu.zig	/trap_handler/;"	field
trap_no	$ZIGLIB/std/os/linux/arm-eabi.zig	/trap_no: usize/;"	field
trapno	$ZIGLIB/std/os/linux/x86_64.zig	/trapno: usize/;"	field
trbe	$ZIGLIB/std/target/aarch64.zig	/trbe/;"	field
treap	$ZIGLIB/std/treap.zig	/var treap = TestTreap{}/;"	variable
treat_as_dir	$ZIGLIB/std/fs.zig	/var treat_as_dir = true/;"	variable
tree	$ZIGLIB/std/zig/Ast.zig	/tree: *const Ast/;"	field
tremont	$ZIGLIB/std/target/x86.zig	/pub const tremont = CpuModel{$/;"	constant
trickle	$ZIGLIB/std/crypto/isap.zig	/fn trickle(k: [16]u8, iv: [8]u8, y: []const u8, comptime out_len: usize) [out_len]u8 {$/;"	function
tries	$ZIGLIB/std/compress/deflate/compressor.zig	/var tries = self.compression_level.chain/;"	variable
trig_reduced_range	$ZIGLIB/std/target/amdgpu.zig	/trig_reduced_range/;"	field
trim	$ZIGLIB/std/mem.zig	/^pub fn trim(comptime T: type, slice: []const T, values_to_strip: []const T) []const T {$/;"	function
trimLeft	$ZIGLIB/std/mem.zig	/^pub fn trimLeft(comptime T: type, slice: []const T, values_to_strip: []const T) []const T {$/;"	function
trimRight	$ZIGLIB/std/mem.zig	/^pub fn trimRight(comptime T: type, slice: []const T, values_to_strip: []const T) []const T {$/;"	function
trimmed	$ZIGLIB/std/fmt.zig	/const trimmed = mem.trimRight(u8, buf[1..], "0")/;"	constant
trimmed_comment	$ZIGLIB/std/zig/render.zig	/const trimmed_comment = mem.trimRight(u8, untrimmed_comment, &std.ascii.whitespace)/;"	constant
trimmed_len	$ZIGLIB/std/crypto/bcrypt.zig	/const trimmed_len = math.min(password.len, password_buf.len - 1)/;"	constant
trimmed_lib_name	$ZIGLIB/std/Build/CompileStep.zig	/const trimmed_lib_name = lib_name[0 .. lib_name.len - "-1.0".len]/;"	constant
triple	$ZIGLIB/std/zig/system/NativePaths.zig	/const triple = try native_target.linuxTriple(allocator)/;"	constant
triplet	$ZIGLIB/std/Build/CompileStep.zig	/const triplet = try self.target.vcpkgTriplet(allocator, if (linkage == .static) .Static else .Dynamic)/;"	constant
trl_cnt	$ZIGLIB/std/os.zig	/const trl_cnt = math.cast(u31, trailers.len) orelse math.maxInt(u31)/;"	constant
trls	$ZIGLIB/std/fs/file.zig	/const trls = if (count == 0) zero_iovec else trailers/;"	constant
true16	$ZIGLIB/std/target/amdgpu.zig	/true16/;"	field
trunc	$ZIGLIB/std/math.zig	/^pub inline fn trunc(value: anytype) @TypeOf(value) {$/;"	function
trunc_f80	$ZIGLIB/compiler_rt/truncf.zig	/^pub inline fn trunc_f80(comptime dst_t: type, a: f80) dst_t {$/;"	function
trunc_msg	$ZIGLIB/std/debug.zig	/const trunc_msg = "(msg truncated)"/;"	constant
truncate	$ZIGLIB/std/os/linux/syscalls.zig	/truncate = Linux + 92/;"	field
truncate64	$ZIGLIB/std/os/linux/syscalls.zig	/truncate64 = Linux + 211/;"	field
truncateFile	$ZIGLIB/std/Build.zig	/^pub fn truncateFile(self: *Build, dest_path: []const u8) !void {$/;"	function
truncated	$ZIGLIB/std/fmt/parse_float/decimal.zig	/truncated: bool/;"	field
truncf	$ZIGLIB/compiler_rt/truncf.zig	/^pub inline fn truncf(comptime dst_t: type, comptime src_t: type, a: src_t) dst_t {$/;"	function
truncl	$ZIGLIB/compiler_rt/trunc.zig	/^pub fn truncl(x: c_longdouble) callconv(.C) c_longdouble {$/;"	function
truncq	$ZIGLIB/compiler_rt/trunc.zig	/^pub fn truncq(x: f128) callconv(.C) f128 {$/;"	function
trust	$ZIGLIB/std/target/csky.zig	/trust/;"	field
trust_chain_established	$ZIGLIB/std/crypto/tls/Client.zig	/trust_chain_established/;"	field
trustzone	$ZIGLIB/std/target/arm.zig	/trustzone/;"	field
tryAddDigit	$ZIGLIB/std/fmt/parse_float/decimal.zig	/pub fn tryAddDigit(self: *Self, digit: u8) void {$/;"	function
tryCompareAndSwap	$ZIGLIB/std/atomic/Atomic.zig	/pub inline fn tryCompareAndSwap($/;"	function
tryLock	$ZIGLIB/std/fs/file.zig	/pub fn tryLock(file: File, l: Lock) LockError!bool {$/;"	function
tryLockShared	$ZIGLIB/std/Thread/RwLock.zig	/pub fn tryLockShared(rwl: *SingleThreadedRwLock) bool {$/;"	function
tryParseDigits	$ZIGLIB/std/fmt/parse_float/parse.zig	/^fn tryParseDigits(comptime T: type, stream: *FloatStream, x: *T, comptime base: u8) void {$/;"	function
tryParseNDigits	$ZIGLIB/std/fmt/parse_float/parse.zig	/^fn tryParseNDigits(comptime T: type, stream: *FloatStream, x: *T, comptime base: u8, comptime n: usize) void {$/;"	function
tryRemove	$ZIGLIB/std/Thread/Futex.zig	/fn tryRemove(treap: *Treap, address: usize, waiter: *Waiter) bool {$/;"	function
tryWriteCopy	$ZIGLIB/std/compress/deflate/dict_decoder.zig	/pub fn tryWriteCopy(self: *Self, dist: u32, length: u32) u32 {$/;"	function
try_block	$ZIGLIB/std/dwarf/TAG.zig	/^pub const try_block = 0x32/;"	constant
ts_ptr	$ZIGLIB/std/os.zig	/var ts_ptr: ?*timespec = null/;"	variable
tsan	$ZIGLIB/std/atomic/Atomic.zig	/const tsan = struct {$/;"	struct
tsc701	$ZIGLIB/std/target/sparc.zig	/pub const tsc701 = CpuModel{$/;"	constant
tstate	$ZIGLIB/std/os/linux/sparc64.zig	/tstate: u64/;"	field
tsv110	$ZIGLIB/std/target/aarch64.zig	/pub const tsv110 = CpuModel{$/;"	constant
tsxldtrk	$ZIGLIB/std/target/x86.zig	/tsxldtrk/;"	field
tty_config	$ZIGLIB/std/debug.zig	/const tty_config = detectTTYConfig(std.io.getStdErr())/;"	constant
ttyconf	$ZIGLIB/std/testing.zig	/ttyconf: std.debug.TTY.Config/;"	field
ttype	$ZIGLIB/std/compress/deflate/huffman_bit_writer.zig	/const ttype: TestType = .write_dyn_block/;"	constant
tu_inst	$ZIGLIB/std/fmt.zig	/const tu_inst = TU{ .int = 123 }/;"	constant
tuple	$ZIGLIB/std/meta/trait.zig	/const tuple = .{ 1, 2, 3 }/;"	constant
tuple_fields	$ZIGLIB/std/meta.zig	/var tuple_fields: [types.len]std.builtin.Type.StructField = undefined/;"	variable
tuple_like	$ZIGLIB/std/zig/Parse.zig	/const tuple_like = p.token_tags[p.tok_i] != .identifier or p.token_tags[p.tok_i + 1] != .colon/;"	constant
tuxcall	$ZIGLIB/std/os/linux/syscalls.zig	/tuxcall = 225/;"	field
tvTry	$ZIGLIB/std/crypto/ecdsa.zig	/^fn tvTry(vector: TestVector) !void {$/;"	function
tv_input	$ZIGLIB/std/crypto/gimli.zig	/const tv_input = [3][4]u32{$/;"	constant
tv_nsec	$ZIGLIB/std/os/wasi.zig	/tv_nsec: isize/;"	field
tv_output	$ZIGLIB/std/crypto/gimli.zig	/const tv_output = [3][4]u32{$/;"	constant
tv_sec	$ZIGLIB/std/os/wasi.zig	/tv_sec: time_t/;"	field
tv_usec	$ZIGLIB/std/os/linux/x86_64.zig	/tv_usec: isize/;"	field
tvos	$ZIGLIB/std/target.zig	/tvos/;"	field
two_const_nr	$ZIGLIB/std/target/powerpc.zig	/two_const_nr/;"	field
two_idx	$ZIGLIB/std/priority_queue.zig	/const two_idx = while (it.next()) |elem| {$/;"	constant
two_sep	$ZIGLIB/std/fs/path.zig	/const two_sep = [_]u8{ this_sep, this_sep }/;"	constant
two_sqrtpi	$ZIGLIB/std/math.zig	/^pub const two_sqrtpi = 1.128379167095512573896158903121545172/;"	constant
twopk	$ZIGLIB/std/math/expm1.zig	/const twopk = @bitCast(f64, @intCast(u64, 0x3FF +% k) << 52)/;"	constant
twords	$ZIGLIB/compiler_rt/multi3.zig	/^const twords = extern union {$/;"	union
tx_aborted_errors	$ZIGLIB/std/os/linux.zig	/tx_aborted_errors: u64/;"	field
tx_broadcast_frames	$ZIGLIB/std/os/uefi/protocols/simple_network_protocol.zig	/tx_broadcast_frames: u64/;"	field
tx_bytes	$ZIGLIB/std/os/linux.zig	/tx_bytes: u64/;"	field
tx_carrier_errors	$ZIGLIB/std/os/linux.zig	/tx_carrier_errors: u64/;"	field
tx_compressed	$ZIGLIB/std/os/linux.zig	/tx_compressed: u64/;"	field
tx_crc_error_frames	$ZIGLIB/std/os/uefi/protocols/simple_network_protocol.zig	/tx_crc_error_frames: u64/;"	field
tx_dropped	$ZIGLIB/std/os/linux.zig	/tx_dropped: u64/;"	field
tx_dropped_frames	$ZIGLIB/std/os/uefi/protocols/simple_network_protocol.zig	/tx_dropped_frames: u64/;"	field
tx_error_frames	$ZIGLIB/std/os/uefi/protocols/simple_network_protocol.zig	/tx_error_frames: u64/;"	field
tx_errors	$ZIGLIB/std/os/linux.zig	/tx_errors: u64/;"	field
tx_fifo_errors	$ZIGLIB/std/os/linux.zig	/tx_fifo_errors: u64/;"	field
tx_good_frames	$ZIGLIB/std/os/uefi/protocols/simple_network_protocol.zig	/tx_good_frames: u64/;"	field
tx_heartbeat_errors	$ZIGLIB/std/os/linux.zig	/tx_heartbeat_errors: u64/;"	field
tx_invalid_descs	$ZIGLIB/std/os/linux.zig	/tx_invalid_descs: u64/;"	field
tx_multicast_frames	$ZIGLIB/std/os/uefi/protocols/simple_network_protocol.zig	/tx_multicast_frames: u64/;"	field
tx_oversize_frames	$ZIGLIB/std/os/uefi/protocols/simple_network_protocol.zig	/tx_oversize_frames: u64/;"	field
tx_packets	$ZIGLIB/std/os/linux.zig	/tx_packets: u64/;"	field
tx_retry_frames	$ZIGLIB/std/os/uefi/protocols/simple_network_protocol.zig	/tx_retry_frames: u64/;"	field
tx_ring_empty_descs	$ZIGLIB/std/os/linux.zig	/tx_ring_empty_descs: u64/;"	field
tx_total_bytes	$ZIGLIB/std/os/uefi/protocols/simple_network_protocol.zig	/tx_total_bytes: u64/;"	field
tx_total_frames	$ZIGLIB/std/os/uefi/protocols/simple_network_protocol.zig	/tx_total_frames: u64/;"	field
tx_undersize_frames	$ZIGLIB/std/os/uefi/protocols/simple_network_protocol.zig	/tx_undersize_frames: u64/;"	field
tx_unicast_frames	$ZIGLIB/std/os/uefi/protocols/simple_network_protocol.zig	/tx_unicast_frames: u64/;"	field
tx_window_errors	$ZIGLIB/std/os/linux.zig	/tx_window_errors: u64/;"	field
ty_elem	$ZIGLIB/std/crypto/Certificate.zig	/const ty_elem = try der.Element.parse(cert_bytes, atav_i)/;"	constant
type	$ZIGLIB/std/wasm.zig	/type/;"	field
typeContainsSlice	$ZIGLIB/std/hash/auto_hash.zig	/^fn typeContainsSlice(comptime K: type) bool {$/;"	function
typeToEnum	$ZIGLIB/std/Build.zig	/^fn typeToEnum(comptime T: type) TypeId {$/;"	function
typeWidth	$ZIGLIB/std/math/ilogb.zig	/const typeWidth = @typeInfo(T).Float.bits/;"	constant
type_	$ZIGLIB/std/macho.zig	/const type_ = N_TYPE & sym.n_type/;"	constant
type_all	$ZIGLIB/std/os/uefi/protocols/hii.zig	/pub const type_all: u8 = 0x0/;"	constant
type_byte	$ZIGLIB/std/Build/CheckObjectStep.zig	/const type_byte = try reader.readByte()/;"	constant
type_expr	$ZIGLIB/std/zig/Parse.zig	/var type_expr: Node.Index = 0/;"	variable
type_guid	$ZIGLIB/std/os/uefi/protocols/hii.zig	/pub const type_guid: u8 = 0x1/;"	constant
type_id	$ZIGLIB/std/Build.zig	/type_id: TypeId/;"	field
type_index	$ZIGLIB/std/wasm.zig	/type_index: u32/;"	field
type_info	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/const type_info = @typeInfo(TUnion).Union/;"	constant
type_len	$ZIGLIB/std/os/linux/bpf/btf.zig	/type_len: u32/;"	field
type_name	$ZIGLIB/std/meta.zig	/const type_name = @typeName(T)/;"	constant
type_node	$ZIGLIB/std/zig/Parse.zig	/const type_node: Node.Index = if (p.eatToken(.colon) == null) 0 else try p.expectTypeExpr()/;"	constant
type_off	$ZIGLIB/std/os/linux/bpf/btf.zig	/type_off: u32/;"	field
type_system_begin	$ZIGLIB/std/os/uefi/protocols/hii.zig	/pub const type_system_begin: u8 = 0xe0/;"	constant
type_system_end	$ZIGLIB/std/os/uefi/protocols/hii.zig	/pub const type_system_end: u8 = 0xff/;"	constant
type_tag	$ZIGLIB/std/os/linux/bpf/btf.zig	/type_tag/;"	field
type_unit	$ZIGLIB/std/dwarf/TAG.zig	/^pub const type_unit = 0x41/;"	constant
typecnt	$ZIGLIB/std/tz.zig	/typecnt: u32/;"	field
typedef	$ZIGLIB/std/os/linux/bpf/btf.zig	/typedef/;"	field
types	$ZIGLIB/std/crypto.zig	/const types = [_]type{$/;"	constant
tz_dsttime	$ZIGLIB/std/os/linux/x86_64.zig	/tz_dsttime: i32/;"	field
tz_minuteswest	$ZIGLIB/std/os/linux/x86_64.zig	/tz_minuteswest: i32/;"	field
u1_u2u2	$ZIGLIB/std/crypto/25519/ristretto255.zig	/const u1_u2u2 = u2_.sq().mul(u1_)/;"	constant
u1names	$ZIGLIB/std/meta.zig	/const u1names = fieldNames(U1)/;"	constant
u1u1	$ZIGLIB/std/crypto/25519/ristretto255.zig	/const u1u1 = u1_.sq()/;"	constant
u2u2	$ZIGLIB/std/crypto/25519/ristretto255.zig	/const u2u2 = u2_.sq()/;"	constant
u32_len	$ZIGLIB/std/fs.zig	/var u32_len: u32 = MAX_PATH_BYTES + 1/;"	variable
u4_bit_count	$ZIGLIB/std/io/bit_writer.zig	/const u4_bit_count = @bitSizeOf(u4)/;"	constant
u64toa	$ZIGLIB/std/fmt/errol.zig	/^fn u64toa(value_param: u64, buffer: []u8) usize {$/;"	function
u7_bit_count	$ZIGLIB/std/io/bit_reader.zig	/const u7_bit_count = @bitSizeOf(u7)/;"	constant
u8_bit_count	$ZIGLIB/std/io/bit_writer.zig	/const u8_bit_count = @bitSizeOf(u8)/;"	constant
u8cases	$ZIGLIB/std/sort.zig	/const u8cases = [_][]const []const u8{$/;"	constant
u8len	$ZIGLIB/std/unicode.zig	/var u8len: usize = 0/;"	variable
uPackedType	$ZIGLIB/std/mem.zig	/const uPackedType = std.meta.Int(.unsigned, @bitSizeOf(PackedType))/;"	constant
u_bit_count	$ZIGLIB/std/io/bit_writer.zig	/const u_bit_count = @bitSizeOf(U)/;"	constant
u_regs	$ZIGLIB/std/os/linux/sparc64.zig	/u_regs: [16]u64/;"	field
uaops	$ZIGLIB/std/target/aarch64.zig	/uaops/;"	field
ucontext_t	$ZIGLIB/std/os/linux/x86_64.zig	/^pub const ucontext_t = extern struct {$/;"	struct
udata	$ZIGLIB/std/dwarf/FORM.zig	/^pub const udata = 0x0f/;"	constant
udivmod	$ZIGLIB/compiler_rt/udivmod.zig	/^pub fn udivmod(comptime DoubleInt: type, a: DoubleInt, b: DoubleInt, maybe_rem: ?*DoubleInt) DoubleInt {$/;"	function
udp6_session	$ZIGLIB/std/os/uefi/protocols/udp6_protocol.zig	/udp6_session: Udp6SessionData/;"	field
udp6_session_data	$ZIGLIB/std/os/uefi/protocols/udp6_protocol.zig	/udp6_session_data: ?*Udp6SessionData/;"	field
uefi	$ZIGLIB/std/target.zig	/uefi/;"	field
uefiIsSep	$ZIGLIB/std/fs/path.zig	/const uefiIsSep = struct {$/;"	constant
uefi_alloc	$ZIGLIB/std/os/uefi/pool_allocator.zig	/^fn uefi_alloc($/;"	function
uefi_free	$ZIGLIB/std/os/uefi/pool_allocator.zig	/^fn uefi_free($/;"	function
uefi_resize	$ZIGLIB/std/os/uefi/pool_allocator.zig	/^fn uefi_resize($/;"	function
ugetrlimit	$ZIGLIB/std/os/linux/syscalls.zig	/ugetrlimit = 191/;"	field
uhii	$ZIGLIB/compiler_rt/fma.zig	/var uhii = @bitCast(u64, sum.hi)/;"	variable
ui64	$ZIGLIB/std/mem.zig	/const ui64 = std.meta.Int(signedness, 64)/;"	constant
uid_t	$ZIGLIB/std/os/linux.zig	/^pub const uid_t = u32/;"	constant
uint	$ZIGLIB/std/target.zig	/uint/;"	field
uintAtMost	$ZIGLIB/std/rand.zig	/pub fn uintAtMost(r: Random, comptime T: type, at_most: T) T {$/;"	function
uintAtMostBiased	$ZIGLIB/std/rand.zig	/pub fn uintAtMostBiased(r: Random, comptime T: type, at_most: T) T {$/;"	function
uintLessThan	$ZIGLIB/std/rand.zig	/pub fn uintLessThan(r: Random, comptime T: type, less_than: T) T {$/;"	function
uintLessThanBiased	$ZIGLIB/std/rand.zig	/pub fn uintLessThanBiased(r: Random, comptime T: type, less_than: T) T {$/;"	function
uintr	$ZIGLIB/std/target/x86.zig	/uintr/;"	field
ulen	$ZIGLIB/std/json.zig	/const ulen = std.unicode.utf8ByteSequenceLength(chars[i]) catch unreachable/;"	constant
ulimit	$ZIGLIB/std/os/linux/syscalls.zig	/ulimit = Linux + 58/;"	field
uloi	$ZIGLIB/compiler_rt/fma.zig	/const uloi = @bitCast(u64, sum.lo)/;"	constant
ulong	$ZIGLIB/std/target.zig	/ulong/;"	field
ulonglong	$ZIGLIB/std/target.zig	/ulonglong/;"	field
ultrasparc	$ZIGLIB/std/target/sparc.zig	/pub const ultrasparc = CpuModel{$/;"	constant
ultrasparc3	$ZIGLIB/std/target/sparc.zig	/pub const ultrasparc3 = CpuModel{$/;"	constant
umask	$ZIGLIB/std/os/linux/syscalls.zig	/umask = Linux + 93/;"	field
umount	$ZIGLIB/std/os/linux/syscalls.zig	/umount = Linux + 22/;"	field
umount2	$ZIGLIB/std/os/linux/syscalls.zig	/umount2 = Linux + 52/;"	field
unaligned	$ZIGLIB/std/array_list.zig	/var unaligned: [3]i32 align(1) = [_]i32{ 4, 5, 6 }/;"	variable
unaligned_access_mode	$ZIGLIB/std/target/amdgpu.zig	/unaligned_access_mode/;"	field
unaligned_addr	$ZIGLIB/std/os/uefi/pool_allocator.zig	/const unaligned_addr = @ptrToInt(unaligned_ptr)/;"	constant
unaligned_allocated_buf	$ZIGLIB/std/process.zig	/const unaligned_allocated_buf = @ptrCast([*]const u8, args_alloc.ptr)[0..total_bytes]/;"	constant
unaligned_buffer_access	$ZIGLIB/std/target/amdgpu.zig	/unaligned_buffer_access/;"	field
unaligned_ds_access	$ZIGLIB/std/target/amdgpu.zig	/unaligned_ds_access/;"	field
unaligned_ptr	$ZIGLIB/std/os/uefi/pool_allocator.zig	/var unaligned_ptr: [*]align(8) u8 = undefined/;"	variable
unaligned_scalar_mem	$ZIGLIB/std/target/riscv.zig	/unaligned_scalar_mem/;"	field
unaligned_scratch_access	$ZIGLIB/std/target/amdgpu.zig	/unaligned_scratch_access/;"	field
uname	$ZIGLIB/std/os/linux/syscalls.zig	/uname = Linux + 61/;"	field
unappended_err	$ZIGLIB/std/child_process.zig	/const unappended_err = unappended: {$/;"	constant
unattached_doc_comment	$ZIGLIB/std/zig/Ast.zig	/unattached_doc_comment/;"	field
unattempted	$ZIGLIB/std/Build.zig	/unattempted: void/;"	field
unauthorized	$ZIGLIB/std/http.zig	/unauthorized = 401/;"	field
unavailable_for_legal_reasons	$ZIGLIB/std/http.zig	/unavailable_for_legal_reasons = 451/;"	field
unblind	$ZIGLIB/std/crypto/25519/ed25519.zig	/pub fn unblind(blind_public_key: BlindPublicKey, blind_seed: [blind_seed_length]u8, ctx: []const u8) (IdentityElementError || NonCanonicalError || EncodingError || WeakPublicKeyError)!PublicKey {$/;"	function
unblindPublicKey	$ZIGLIB/std/crypto/25519/ed25519.zig	/pub const unblindPublicKey = @compileError("deprecated; use BlindPublicKey.unblind instead")/;"	constant
unbuffered_reader	$ZIGLIB/std/io/peek_stream.zig	/unbuffered_reader: ReaderType/;"	field
unbuffered_writer	$ZIGLIB/std/io/buffered_writer.zig	/unbuffered_writer: WriterType/;"	field
uncheckedAt	$ZIGLIB/std/segmented_list.zig	/pub fn uncheckedAt(self: anytype, index: usize) AtType(@TypeOf(self)) {$/;"	function
uncheckedSqrt	$ZIGLIB/std/crypto/pcurves/common.zig	/fn uncheckedSqrt(x2: Fe) Fe {$/;"	function
uncompressed_sec1_encoded_length	$ZIGLIB/std/crypto/ecdsa.zig	/pub const uncompressed_sec1_encoded_length = 1 + 2 * Curve.Fe.encoded_length/;"	constant
undef	$ZIGLIB/std/Build/ConfigHeaderStep.zig	/undef/;"	field
undefined	$ZIGLIB/std/dwarf.zig	/pub const @"undefined" = 0x07/;"	constant
underflow	$ZIGLIB/std/math/big/int.zig	/const underflow = llmulLimb(.sub, x.limbs[k..x.len], y.limbs[0..y.len], q.limbs[k])/;"	constant
underflowExponent	$ZIGLIB/compiler_rt/truncf.zig	/const underflowExponent = srcExpBias + 1 - dstExpBias/;"	constant
underlying	$ZIGLIB/std/mem.zig	/const underlying = self.getUnderlyingAllocatorPtr()/;"	constant
underlying_allocator	$ZIGLIB/std/mem.zig	/underlying_allocator: T/;"	field
underlying_writer	$ZIGLIB/std/zig/render.zig	/underlying_writer: UnderlyingWriter/;"	field
underscore	$ZIGLIB/std/zig/number_literal.zig	/var underscore = false/;"	variable
underscore_count	$ZIGLIB/std/fmt/parse_float/FloatStream.zig	/^underscore_count: usize/;"	field
undf	$ZIGLIB/std/macho.zig	/pub fn undf(sym: nlist_64) bool {$/;"	function
undiagonalize	$ZIGLIB/std/crypto/blake3.zig	/inline fn undiagonalize(rows: *Rows) void {$/;"	function
unescapeString	$ZIGLIB/std/Uri.zig	/^pub fn unescapeString(allocator: std.mem.Allocator, input: []const u8) error{OutOfMemory}![]const u8 {$/;"	function
unescapeValidString	$ZIGLIB/std/json.zig	/^pub fn unescapeValidString(output: []u8, input: []const u8) UnescapeValidStringError!void {$/;"	function
unescape_brace	$ZIGLIB/std/fmt.zig	/comptime var unescape_brace = false/;"	variable
unexpectedErrno	$ZIGLIB/std/os.zig	/^pub fn unexpectedErrno(err: E) UnexpectedError {$/;"	function
unexpectedError	$ZIGLIB/std/os/windows.zig	/^pub fn unexpectedError(err: Win32Error) std.os.UnexpectedError {$/;"	function
unexpectedStatus	$ZIGLIB/std/os/windows.zig	/^pub fn unexpectedStatus(status: NTSTATUS) std.os.UnexpectedError {$/;"	function
unexpectedWSAError	$ZIGLIB/std/os/windows.zig	/^pub fn unexpectedWSAError(err: ws2_32.WinsockError) std.os.UnexpectedError {$/;"	function
unexpected_error_tracing	$ZIGLIB/std/os.zig	/^pub const unexpected_error_tracing = builtin.zig_backend == .stage2_llvm and builtin.mode == .Debug/;"	constant
unexpected_message	$ZIGLIB/std/crypto/tls.zig	/unexpected_message = 10/;"	field
unget	$ZIGLIB/std/fifo.zig	/pub fn unget(self: *Self, src: []const T) !void {$/;"	function
unicode	$ZIGLIB/std/zig/system/windows.zig	/const unicode = @ptrCast(*std.os.windows.UNICODE_STRING, &tmp_bufs[i])/;"	constant
unicode_char	$ZIGLIB/std/os/uefi/protocols/simple_text_input_ex_protocol.zig	/unicode_char: u16/;"	field
unicode_string	$ZIGLIB/std/Thread.zig	/const unicode_string = os.windows.UNICODE_STRING{$/;"	constant
unicode_weight	$ZIGLIB/std/os/uefi/protocols/hii.zig	/unicode_weight: u16/;"	field
uniformResourceIdentifier	$ZIGLIB/std/crypto/Certificate.zig	/uniformResourceIdentifier = 6/;"	field
uninitialized	$ZIGLIB/std/crypto/tlcsprng.zig	/uninitialized = 0/;"	field
uninstallMultipleProtocolInterfaces	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/uninstallMultipleProtocolInterfaces: *const fn (handle: *Handle, ...) callconv(.C) Status/;"	field
uninstallProtocolInterface	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/uninstallProtocolInterface: *const fn (handle: Handle, protocol: *align(8) const Guid, interface: *anyopaque) callconv(.C) Status/;"	field
uninstall_tls	$ZIGLIB/std/Build.zig	/const uninstall_tls = @fieldParentPtr(TopLevelStep, "step", uninstall_step)/;"	constant
union	$ZIGLIB/std/os/linux/bpf/btf.zig	/@"union"/;"	field
union1	$ZIGLIB/std/os/windows.zig	/union1: extern union {$/;"	field
unionWith	$ZIGLIB/std/enums.zig	/pub fn unionWith(self: Self, other: Self) Self {$/;"	function
union_type	$ZIGLIB/std/dwarf/TAG.zig	/^pub const union_type = 0x17/;"	constant
unique	$ZIGLIB/std/sort.zig	/var unique = pull[pull_index].count * 2/;"	variable
unit_length	$ZIGLIB/std/dwarf.zig	/const unit_length = try readUnitLength(in, di.endian, &is_64)/;"	constant
unit_type	$ZIGLIB/std/dwarf.zig	/const unit_type = try in.readInt(u8, di.endian)/;"	constant
units	$ZIGLIB/std/fmt.zig	/const units = ns_remaining \/ unit.ns/;"	constant
universal	$ZIGLIB/std/crypto/Certificate.zig	/universal/;"	field
unix	$ZIGLIB/std/time/epoch.zig	/^pub const unix = posix/;"	constant
unixHas	$ZIGLIB/std/fs/file.zig	/pub fn unixHas(self: Self, class: Class, permission: Permission) bool {$/;"	function
unixNew	$ZIGLIB/std/fs/file.zig	/pub fn unixNew(new_mode: Mode) Self {$/;"	function
unixSet	$ZIGLIB/std/fs/file.zig	/pub fn unixSet(self: *Self, class: Class, permissions: struct {$/;"	function
unknown	$ZIGLIB/std/zig/system/darwin/macos.zig	/unknown/;"	field
unknown1	$ZIGLIB/std/crypto/Certificate/Bundle/macos.zig	/unknown1: u32/;"	field
unknown2	$ZIGLIB/std/crypto/Certificate/Bundle/macos.zig	/unknown2: u32/;"	field
unknown3	$ZIGLIB/std/crypto/Certificate/Bundle/macos.zig	/unknown3: u32/;"	field
unknown_ca	$ZIGLIB/std/crypto/tls.zig	/unknown_ca = 48/;"	field
unknown_feature_name	$ZIGLIB/std/zig/CrossTarget.zig	/unknown_feature_name: ?[]const u8 = null/;"	field
unknown_psk_identity	$ZIGLIB/std/crypto/tls.zig	/unknown_psk_identity = 115/;"	field
unlink	$ZIGLIB/std/os/linux/syscalls.zig	/unlink = Linux + 85/;"	field
unlinkW	$ZIGLIB/std/os.zig	/^pub fn unlinkW(file_path_w: []const u16) UnlinkError!void {$/;"	function
unlinkZ	$ZIGLIB/std/os.zig	/^pub fn unlinkZ(file_path: [*:0]const u8) UnlinkError!void {$/;"	function
unlinkat	$ZIGLIB/std/os/linux/syscalls.zig	/unlinkat = Linux + 294/;"	field
unlinkatW	$ZIGLIB/std/os.zig	/^pub fn unlinkatW(dirfd: fd_t, sub_path_w: []const u16, flags: u32) UnlinkatError!void {$/;"	function
unlinkatWasi	$ZIGLIB/std/os.zig	/^pub fn unlinkatWasi(dirfd: fd_t, file_path: []const u8, flags: u32) UnlinkatError!void {$/;"	function
unlinkatZ	$ZIGLIB/std/os.zig	/^pub fn unlinkatZ(dirfd: fd_t, file_path_c: [*:0]const u8, flags: u32) UnlinkatError!void {$/;"	function
unload	$ZIGLIB/std/os/uefi/protocols/loaded_image_protocol.zig	/pub fn unload(self: *const LoadedImageProtocol, handle: Handle) Status {$/;"	function
unloadImage	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/unloadImage: *const fn (image_handle: Handle) callconv(.C) Status/;"	field
unlock	$ZIGLIB/std/heap/general_purpose_allocator.zig	/fn unlock(_: *DummyMutex) void {}$/;"	function
unlockShared	$ZIGLIB/std/Thread/RwLock.zig	/pub fn unlockShared(rwl: *SingleThreadedRwLock) void {$/;"	function
unlocked	$ZIGLIB/std/Thread/RwLock.zig	/unlocked/;"	field
unmanaged	$ZIGLIB/std/hash_map.zig	/unmanaged: Unmanaged/;"	field
unnamed_sem	$ZIGLIB/std/c/haiku.zig	/unnamed_sem: i32/;"	field
unordcmp	$ZIGLIB/compiler_rt/comparef.zig	/^pub inline fn unordcmp(comptime T: type, a: T, b: T) i32 {$/;"	function
unpacked_bytes	$ZIGLIB/std/compress/xz/block.zig	/const unpacked_bytes = self.to_read.items[unpacked_pos..]/;"	constant
unpacked_d16_vmem	$ZIGLIB/std/target/amdgpu.zig	/unpacked_d16_vmem/;"	field
unpacked_pos	$ZIGLIB/std/compress/xz/block.zig	/const unpacked_pos = self.to_read.items.len/;"	constant
unpacked_size	$ZIGLIB/std/compress/xz/block.zig	/var unpacked_size: ?u64 = null/;"	variable
unpacked_size_provided	$ZIGLIB/std/compress/lzma/decode.zig	/const unpacked_size_provided = try reader.readIntLittle(u64)/;"	constant
unpconn	$ZIGLIB/std/c/freebsd.zig	/unpconn: u64/;"	field
unprocessable_entity	$ZIGLIB/std/http.zig	/unprocessable_entity = 422/;"	field
unprotected_completed_items	$ZIGLIB/std/Progress.zig	/unprotected_completed_items: usize/;"	field
unprotected_estimated_total_items	$ZIGLIB/std/Progress.zig	/unprotected_estimated_total_items: usize/;"	field
unreach	$ZIGLIB/std/builtin.zig	/pub const unreach = "reached unreachable code"/;"	constant
unreachable	$ZIGLIB/std/wasm.zig	/@"unreachable" = 0x00/;"	field
unreachable_literal	$ZIGLIB/std/zig/Ast.zig	/unreachable_literal/;"	field
unrecognized_name	$ZIGLIB/std/crypto/tls.zig	/unrecognized_name = 112/;"	field
unregisterClassA	$ZIGLIB/std/os/windows/user32.zig	/^pub fn unregisterClassA(lpClassName: [*:0]const u8, hInstance: HINSTANCE) !void {$/;"	function
unregisterClassW	$ZIGLIB/std/os/windows/user32.zig	/^pub fn unregisterClassW(lpClassName: [*:0]const u16, hInstance: HINSTANCE) !void {$/;"	function
unregisterDataNotify	$ZIGLIB/std/os/uefi/protocols/ip6_config_protocol.zig	/pub fn unregisterDataNotify(self: *const Ip6ConfigProtocol, data_type: Ip6ConfigDataType, event: Event) Status {$/;"	function
unregisterKeyNotify	$ZIGLIB/std/os/uefi/protocols/simple_text_input_ex_protocol.zig	/pub fn unregisterKeyNotify(self: *const SimpleTextInputExProtocol, handle: *const anyopaque) Status {$/;"	function
unregister_buffers	$ZIGLIB/std/os/linux/io_uring.zig	/pub fn unregister_buffers(self: *IO_Uring) !void {$/;"	function
unregister_eventfd	$ZIGLIB/std/os/linux/io_uring.zig	/pub fn unregister_eventfd(self: *IO_Uring) !void {$/;"	function
unregister_files	$ZIGLIB/std/os/linux/io_uring.zig	/pub fn unregister_files(self: *IO_Uring) !void {$/;"	function
unreserveNode	$ZIGLIB/std/zig/Parse.zig	/^fn unreserveNode(p: *Parse, node_index: usize) void {$/;"	function
unsafe_ds_offset_folding	$ZIGLIB/std/target/amdgpu.zig	/unsafe_ds_offset_folding/;"	field
unsafe_fp	$ZIGLIB/std/target/hexagon.zig	/unsafe_fp/;"	field
unsec	$ZIGLIB/std/os.zig	/const unsec = @bitCast(UInt, ts.tv_nsec)/;"	constant
unset	$ZIGLIB/std/bit_set.zig	/var unset = a.iterator(.{ .kind = .unset, .direction = .reverse })/;"	variable
unshare	$ZIGLIB/std/os/linux/syscalls.zig	/unshare = Linux + 303/;"	field
unsigned	$ZIGLIB/std/zig/c_translation.zig	/const unsigned = promoteIntLiteral(c_uint, math.maxInt(c_uint) + 1, .hexadecimal)/;"	constant
unsigned_0	$ZIGLIB/std/mem.zig	/unsigned_0: u0/;"	field
unsigned_128	$ZIGLIB/std/mem.zig	/unsigned_128: u128/;"	field
unsigned_16	$ZIGLIB/std/mem.zig	/unsigned_16: u16/;"	field
unsigned_32	$ZIGLIB/std/mem.zig	/unsigned_32: u32/;"	field
unsigned_64	$ZIGLIB/std/mem.zig	/unsigned_64: u64/;"	field
unsigned_8	$ZIGLIB/std/mem.zig	/unsigned_8: u8/;"	field
unsigned_char	$ZIGLIB/std/dwarf/ATE.zig	/^pub const unsigned_char = 0x8/;"	constant
unsigned_fixed	$ZIGLIB/std/dwarf/ATE.zig	/^pub const unsigned_fixed = 0xe/;"	constant
unsigned_integer_size	$ZIGLIB/std/simd.zig	/const unsigned_integer_size = suggestVectorSizeForCpu(u32, cpu).?/;"	constant
unsigned_result	$ZIGLIB/std/rand.zig	/const unsigned_result = @truncate(UnsignedT, byte_aligned_result)/;"	constant
unspec	$ZIGLIB/std/os/linux/bpf.zig	/unspec/;"	field
unspecified_parameters	$ZIGLIB/std/dwarf/TAG.zig	/^pub const unspecified_parameters = 0x18/;"	constant
unspecified_timezone	$ZIGLIB/std/os/uefi.zig	/pub const unspecified_timezone: i16 = 0x7ff/;"	constant
unspecified_type	$ZIGLIB/std/dwarf/TAG.zig	/^pub const unspecified_type = 0x3b/;"	constant
unstripped_file_name	$ZIGLIB/std/tar.zig	/const unstripped_file_name = try header.fullFileName(&file_name_buffer)/;"	constant
unsupported	$ZIGLIB/std/Thread/Futex.zig	/fn unsupported(unused: anytype) noreturn {$/;"	function
unsupported_certificate	$ZIGLIB/std/crypto/tls.zig	/unsupported_certificate = 43/;"	field
unsupported_extension	$ZIGLIB/std/crypto/tls.zig	/unsupported_extension = 110/;"	field
unsupported_media_type	$ZIGLIB/std/http.zig	/unsupported_media_type = 415/;"	field
unsupported_protocol	$ZIGLIB/std/os/uefi/protocols/simple_network_protocol.zig	/unsupported_protocol: u64/;"	field
until	$ZIGLIB/std/fmt.zig	/fn until(self: *@This(), ch: u8) []const u8 {$/;"	function
until_timeout_ns	$ZIGLIB/std/Thread/Futex.zig	/const until_timeout_ns = std.math.sub(u64, timeout_ns, elapsed_ns) catch 0/;"	constant
untrimmed_comment	$ZIGLIB/std/zig/render.zig	/const untrimmed_comment = tree.source[comment_start .. newline orelse tree.source.len]/;"	constant
unused	$ZIGLIB/std/pdb.zig	/unused: u15/;"	field
unused2	$ZIGLIB/std/fifo.zig	/const unused2 = mem.sliceAsBytes(self.readableSliceMut(slice.len)[0 .. count - slice.len])/;"	constant
unusedCapacitySlice	$ZIGLIB/std/bounded_array.zig	/pub fn unusedCapacitySlice(self: *Self) []T {$/;"	function
unused_1	$ZIGLIB/std/os/linux/bpf/btf.zig	/unused_1: u8/;"	field
unused_2	$ZIGLIB/std/os/linux/bpf/btf.zig	/unused_2: u2/;"	field
unused_3	$ZIGLIB/std/coff.zig	/unused_3: [2]u8/;"	field
unused_bits	$ZIGLIB/std/leb128.zig	/const unused_bits = if (value < 0) @clz(~value) else @clz(value)/;"	constant
unused_slots	$ZIGLIB/std/enums.zig	/const unused_slots = max_value + 1 - fields.len/;"	constant
unused_str	$ZIGLIB/std/enums.zig	/const unused_str = std.fmt.comptimePrint("{d}", .{unused_slots})/;"	constant
unwind_info_compressed_second_level_page_header	$ZIGLIB/std/macho.zig	/^pub const unwind_info_compressed_second_level_page_header = extern struct {$/;"	struct
unwind_info_regular_second_level_entry	$ZIGLIB/std/macho.zig	/^pub const unwind_info_regular_second_level_entry = extern struct {$/;"	struct
unwind_info_regular_second_level_page_header	$ZIGLIB/std/macho.zig	/^pub const unwind_info_regular_second_level_page_header = extern struct {$/;"	struct
unwind_info_section_header	$ZIGLIB/std/macho.zig	/^pub const unwind_info_section_header = extern struct {$/;"	struct
unwind_info_section_header_index_entry	$ZIGLIB/std/macho.zig	/^pub const unwind_info_section_header_index_entry = extern struct {$/;"	struct
unwind_info_section_header_lsda_index_entry	$ZIGLIB/std/macho.zig	/^pub const unwind_info_section_header_lsda_index_entry = extern struct {$/;"	struct
unwind_tables	$ZIGLIB/std/Build/CompileStep.zig	/^unwind_tables: ?bool/;"	field
unwrap_error	$ZIGLIB/std/builtin.zig	/pub const unwrap_error = "attempt to unwrap error"/;"	constant
unwrap_null	$ZIGLIB/std/builtin.zig	/pub const unwrap_null = "attempt to use null value"/;"	constant
unwrap_optional	$ZIGLIB/std/zig/Ast.zig	/unwrap_optional/;"	field
up_count	$ZIGLIB/std/fs/path.zig	/var up_count: usize = 1/;"	variable
up_index_end	$ZIGLIB/std/fs/path.zig	/const up_index_end = up_count * "..\\\\".len/;"	constant
upc_relaxed_type	$ZIGLIB/std/dwarf/TAG.zig	/^pub const upc_relaxed_type = 0x8767/;"	constant
upc_shared_type	$ZIGLIB/std/dwarf/TAG.zig	/^pub const upc_shared_type = 0x8765/;"	constant
upc_strict_type	$ZIGLIB/std/dwarf/TAG.zig	/^pub const upc_strict_type = 0x8766/;"	constant
upc_threads_scaled	$ZIGLIB/std/dwarf/AT.zig	/^pub const upc_threads_scaled = 0x3210/;"	constant
upcase	$ZIGLIB/std/process.zig	/fn upcase(c: u21) u21 {$/;"	function
update	$ZIGLIB/std/priority_queue.zig	/pub fn update(self: *Self, elem: T, new_elem: T) !void {$/;"	function
updateCapsule	$ZIGLIB/std/os/uefi/tables/runtime_services.zig	/updateCapsule: *const fn (capsule_header_array: **CapsuleHeader, capsule_count: usize, scatter_gather_list: EfiPhysicalAddress) callconv(.C) Status/;"	field
updateCpuFeatures	$ZIGLIB/std/zig/CrossTarget.zig	/^pub fn updateCpuFeatures(self: CrossTarget, set: *Target.Cpu.Feature.Set) void {$/;"	function
updateEntryIndex	$ZIGLIB/std/array_hash_map.zig	/fn updateEntryIndex($/;"	function
updateFile	$ZIGLIB/std/fs.zig	/pub fn updateFile($/;"	function
updateFileAbsolute	$ZIGLIB/std/fs.zig	/^pub fn updateFileAbsolute($/;"	function
updateOsVersionRange	$ZIGLIB/std/zig/CrossTarget.zig	/^fn updateOsVersionRange(self: *CrossTarget, os: Target.Os) void {$/;"	function
updatePackageList	$ZIGLIB/std/os/uefi/protocols/hii_database_protocol.zig	/pub fn updatePackageList(self: *const HIIDatabaseProtocol, handle: hii.HIIHandle, buffer: *const hii.HIIPackageList) Status {$/;"	function
updateSegfaultHandler	$ZIGLIB/std/debug.zig	/^pub fn updateSegfaultHandler(act: ?*const os.Sigaction) error{OperationNotSupported}!void {$/;"	function
updateTimes	$ZIGLIB/std/fs/file.zig	/pub fn updateTimes($/;"	function
updateWindow	$ZIGLIB/std/os/windows/user32.zig	/^pub fn updateWindow(hWnd: HWND) !void {$/;"	function
update_index	$ZIGLIB/std/priority_queue.zig	/const update_index = blk: {$/;"	constant
update_len	$ZIGLIB/std/crypto/blake3.zig	/const update_len = math.min(input_counter, input_pattern.len)/;"	constant
update_mutex	$ZIGLIB/std/Progress.zig	/^update_mutex: std.Thread.Mutex = .{}/;"	field
update_not_requested	$ZIGLIB/std/crypto/tls.zig	/update_not_requested = 0/;"	field
update_requested	$ZIGLIB/std/crypto/tls.zig	/update_requested = 1/;"	field
upgrade_required	$ZIGLIB/std/http.zig	/upgrade_required = 426/;"	field
upper	$ZIGLIB/std/os/linux.zig	/upper: *anyopaque/;"	field
upperString	$ZIGLIB/std/ascii.zig	/^pub fn upperString(output: []u8, ascii_string: []const u8) []u8 {$/;"	function
upper_bit	$ZIGLIB/std/fmt/parse_float/convert_eisel_lemire.zig	/const upper_bit = @intCast(i32, r.hi >> 63)/;"	constant
upper_bound	$ZIGLIB/std/dwarf/AT.zig	/^pub const upper_bound = 0x2f/;"	constant
upper_case_base	$ZIGLIB/std/zig/number_literal.zig	/upper_case_base: usize/;"	field
uppercase	$ZIGLIB/std/compress/deflate/dict_decoder.zig	/const uppercase: []const u8 =$/;"	constant
upto	$ZIGLIB/std/crypto/aes_ocb.zig	/upto: usize/;"	field
uri_too_long	$ZIGLIB/std/http.zig	/uri_too_long = 414/;"	field
urlSafeBase64DecoderWithIgnore	$ZIGLIB/std/base64.zig	/^fn urlSafeBase64DecoderWithIgnore(ignore: []const u8) Base64DecoderWithIgnore {$/;"	function
url_safe	$ZIGLIB/std/base64.zig	/^pub const url_safe = Codecs{$/;"	constant
url_safe_alphabet_chars	$ZIGLIB/std/base64.zig	/^pub const url_safe_alphabet_chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_".*/;"	constant
url_safe_no_pad	$ZIGLIB/std/base64.zig	/^pub const url_safe_no_pad = Codecs{$/;"	constant
us_per_day	$ZIGLIB/std/time.zig	/^pub const us_per_day = 24 * us_per_hour/;"	constant
us_per_hour	$ZIGLIB/std/time.zig	/^pub const us_per_hour = 60 * us_per_min/;"	constant
us_per_min	$ZIGLIB/std/time.zig	/^pub const us_per_min = 60 * us_per_s/;"	constant
us_per_ms	$ZIGLIB/std/time.zig	/^pub const us_per_ms = 1000/;"	constant
us_per_s	$ZIGLIB/std/time.zig	/^pub const us_per_s = 1000 * us_per_ms/;"	constant
us_per_week	$ZIGLIB/std/time.zig	/^pub const us_per_week = 7 * us_per_day/;"	constant
useRecycled	$ZIGLIB/std/heap/WasmPageAllocator.zig	/fn useRecycled(self: FreeBlock, num_pages: usize, log2_align: u8) usize {$/;"	function
use_GNAT_descriptive_type	$ZIGLIB/std/dwarf/AT.zig	/^pub const use_GNAT_descriptive_type = 0x2301/;"	constant
use_UTF8	$ZIGLIB/std/dwarf/AT.zig	/^pub const use_UTF8 = 0x53/;"	constant
use_c	$ZIGLIB/std/os.zig	/const use_c = std.c.versionCheck(.{ .major = 2, .minor = 27, .patch = 0 }).ok/;"	constant
use_clockid	$ZIGLIB/std/os/linux.zig	/use_clockid: bool = false/;"	field
use_experimental_zeroing_pseudos	$ZIGLIB/std/target/aarch64.zig	/use_experimental_zeroing_pseudos/;"	field
use_glm_div_sqrt_costs	$ZIGLIB/std/target/x86.zig	/use_glm_div_sqrt_costs/;"	field
use_indirect_jump_hazard	$ZIGLIB/std/target/mips.zig	/use_indirect_jump_hazard/;"	field
use_lld	$ZIGLIB/std/Build/CompileStep.zig	/^use_lld: ?bool = null/;"	field
use_llvm	$ZIGLIB/std/Build/CompileStep.zig	/^use_llvm: ?bool = null/;"	field
use_location	$ZIGLIB/std/dwarf/AT.zig	/^pub const use_location = 0x4a/;"	constant
use_mipipeliner	$ZIGLIB/std/target/arm.zig	/use_mipipeliner/;"	field
use_misched	$ZIGLIB/std/target/arm.zig	/use_misched/;"	field
use_pkg_config	$ZIGLIB/std/Build/CompileStep.zig	/use_pkg_config: enum {$/;"	field
use_postra_scheduler	$ZIGLIB/std/target/aarch64.zig	/use_postra_scheduler/;"	field
use_provided	$ZIGLIB/std/compress/lzma/decode.zig	/use_provided: ?u64/;"	field
use_proxy	$ZIGLIB/std/http.zig	/use_proxy = 305/;"	field
use_pthreads	$ZIGLIB/std/Thread.zig	/^pub const use_pthreads = target.os.tag != .windows and target.os.tag != .wasi and builtin.link_libc/;"	constant
use_reciprocal_square_root	$ZIGLIB/std/target/aarch64.zig	/use_reciprocal_square_root/;"	field
use_scalar_inc_vl	$ZIGLIB/std/target/aarch64.zig	/use_scalar_inc_vl/;"	field
use_slm_arith_costs	$ZIGLIB/std/target/x86.zig	/use_slm_arith_costs/;"	field
use_small	$ZIGLIB/std/heap/WasmPageAllocator.zig	/const use_small = try page_allocator.alloc(u8, 1)/;"	constant
use_srtp	$ZIGLIB/std/crypto/tls.zig	/use_srtp = 14/;"	field
use_tcc_in_div	$ZIGLIB/std/target/mips.zig	/use_tcc_in_div/;"	field
use_thumb1	$ZIGLIB/compiler_rt/count0bits.zig	/const use_thumb1 =$/;"	constant
useable	$ZIGLIB/std/os/linux/x86.zig	/useable: u1/;"	field
used	$ZIGLIB/std/heap/WasmPageAllocator.zig	/used = 0/;"	field
usedBits	$ZIGLIB/std/heap/general_purpose_allocator.zig	/fn usedBits(bucket: *BucketHeader, index: usize) *u8 {$/;"	function
usedBitsCount	$ZIGLIB/std/heap/general_purpose_allocator.zig	/fn usedBitsCount(size_class: usize) usize {$/;"	function
used_args	$ZIGLIB/std/fmt.zig	/used_args: ArgSetType = 0/;"	field
used_bit_index	$ZIGLIB/std/heap/general_purpose_allocator.zig	/const used_bit_index: u3 = @intCast(u3, slot_index % 8)/;"	constant
used_bits	$ZIGLIB/std/leb128.zig	/const used_bits: u16 = (@typeInfo(T).Int.bits - unused_bits) + @boolToInt(t_signed)/;"	constant
used_bits_byte	$ZIGLIB/std/heap/general_purpose_allocator.zig	/var used_bits_byte: usize = 0/;"	variable
used_bits_count	$ZIGLIB/std/heap/general_purpose_allocator.zig	/const used_bits_count = usedBitsCount(size_class)/;"	constant
used_buffer_id	$ZIGLIB/std/os/linux/io_uring.zig	/const used_buffer_id = cqe.flags >> 16/;"	constant
used_byte	$ZIGLIB/std/heap/general_purpose_allocator.zig	/const used_byte = bucket.usedBits(used_byte_index)/;"	constant
used_byte_index	$ZIGLIB/std/heap/general_purpose_allocator.zig	/const used_byte_index = slot_index \/ 8/;"	constant
used_count	$ZIGLIB/std/heap/general_purpose_allocator.zig	/used_count: SlotIndex/;"	field
used_pages	$ZIGLIB/std/c/haiku.zig	/used_pages: u64/;"	field
used_ports	$ZIGLIB/std/c/haiku.zig	/used_ports: u32/;"	field
used_sems	$ZIGLIB/std/c/haiku.zig	/used_sems: u32/;"	field
used_teams	$ZIGLIB/std/c/haiku.zig	/used_teams: u32/;"	field
used_threads	$ZIGLIB/std/c/haiku.zig	/used_threads: u32/;"	field
useless	$ZIGLIB/std/meta/trait.zig	/pub fn useless() void {}$/;"	function
uselib	$ZIGLIB/std/os/linux/syscalls.zig	/uselib = Linux + 86/;"	field
user	$ZIGLIB/std/fs/file.zig	/user = 2/;"	field
user_canceled	$ZIGLIB/std/crypto/tls.zig	/user_canceled = 90/;"	field
user_data	$ZIGLIB/std/os/linux.zig	/user_data: u64/;"	field
user_desc	$ZIGLIB/std/os/linux/x86.zig	/^pub const user_desc = packed struct {$/;"	struct
user_info	$ZIGLIB/std/child_process.zig	/const user_info = try std.process.getUserInfo(name)/;"	constant
user_input_options	$ZIGLIB/std/Build.zig	/^user_input_options: UserInputOptionsMap/;"	field
user_sgpr_init16_bug	$ZIGLIB/std/target/amdgpu.zig	/user_sgpr_init16_bug/;"	field
user_tag	$ZIGLIB/std/c/darwin.zig	/user_tag: u32/;"	field
user_time	$ZIGLIB/std/c/darwin.zig	/user_time: time_value_t/;"	field
user_wired_count	$ZIGLIB/std/c/darwin.zig	/user_wired_count: u16/;"	field
userdata	$ZIGLIB/std/time.zig	/const userdata: w.userdata_t = 0x0123_45678/;"	constant
userdata_t	$ZIGLIB/std/os/wasi.zig	/^pub const userdata_t = u64/;"	constant
userfaultfd	$ZIGLIB/std/os/linux/syscalls.zig	/userfaultfd = Linux + 357/;"	field
ushift	$ZIGLIB/std/heap/WasmAllocator.zig	/^const ushift = math.Log2Int(usize)/;"	constant
ushort	$ZIGLIB/std/target.zig	/ushort/;"	field
usingnamespace	$ZIGLIB/std/zig/Ast.zig	/@"usingnamespace"/;"	field
usingnamespace_token	$ZIGLIB/std/zig/Parse.zig	/const usingnamespace_token = p.assertToken(.keyword_usingnamespace)/;"	constant
usize	$ZIGLIB/std/compress/lzma/vec2d.zig	/usize/;"	field
usize_bits	$ZIGLIB/std/os/linux.zig	/^const usize_bits = @typeInfo(usize).Int.bits/;"	constant
usize_count	$ZIGLIB/std/target.zig	/pub const usize_count = (byte_count + (@sizeOf(usize) - 1)) \/ @sizeOf(usize)/;"	constant
usize_index	$ZIGLIB/std/target.zig	/const usize_index = arch_feature_index \/ @bitSizeOf(usize)/;"	constant
usr26	$ZIGLIB/std/os/linux/syscalls.zig	/usr26 = arm_base + 3/;"	field
usr32	$ZIGLIB/std/os/linux/syscalls.zig	/usr32 = arm_base + 4/;"	field
ustat	$ZIGLIB/std/os/linux/syscalls.zig	/ustat = Linux + 62/;"	field
ut699	$ZIGLIB/std/target/sparc.zig	/pub const ut699 = CpuModel{$/;"	constant
utIndicator	$ZIGLIB/std/tz.zig	/pub fn utIndicator(self: Timetype) bool {$/;"	function
utc_time	$ZIGLIB/std/crypto/Certificate.zig	/utc_time = 23/;"	field
utf16	$ZIGLIB/std/unicode.zig	/const utf16 = utf8ToUtf16LeStringLiteral("𐐷")/;"	constant
utf16CountCodepoints	$ZIGLIB/std/unicode.zig	/^pub fn utf16CountCodepoints(utf16le: []const u16) !usize {$/;"	function
utf16_dir_path	$ZIGLIB/std/os.zig	/var utf16_dir_path: [windows.PATH_MAX_WIDE]u16 = undefined/;"	variable
utf16le	$ZIGLIB/std/unicode.zig	/var utf16le: [len:0]u16 = [_:0]u16{0} ** len/;"	variable
utf16leToUtf8	$ZIGLIB/std/unicode.zig	/^pub fn utf16leToUtf8(utf8: []u8, utf16le: []const u16) !usize {$/;"	function
utf16leToUtf8Alloc	$ZIGLIB/std/unicode.zig	/^pub fn utf16leToUtf8Alloc(allocator: mem.Allocator, utf16le: []const u16) ![]u8 {$/;"	function
utf16leToUtf8AllocZ	$ZIGLIB/std/unicode.zig	/^pub fn utf16leToUtf8AllocZ(allocator: mem.Allocator, utf16le: []const u16) ![:0]u8 {$/;"	function
utf16le_as_bytes	$ZIGLIB/std/unicode.zig	/const utf16le_as_bytes = mem.sliceAsBytes(utf16le[0..])/;"	constant
utf16le_buf	$ZIGLIB/std/os/windows.zig	/var utf16le_buf: [PATH_MAX_WIDE]u16 = undefined/;"	variable
utf16le_len	$ZIGLIB/std/unicode.zig	/const utf16le_len = utf8ToUtf16Le(&utf16le, utf8[0..]) catch |err| @compileError(err)/;"	constant
utf16le_seq	$ZIGLIB/std/json.zig	/const utf16le_seq = [2]u16{$/;"	constant
utf16le_slice	$ZIGLIB/std/process.zig	/var utf16le_slice = mem.sliceTo(cmd_line_utf16le, 0)/;"	variable
utf8	$ZIGLIB/std/unicode.zig	/const utf8 = try utf16leToUtf8Alloc(std.testing.allocator, &utf16le)/;"	constant
utf8ByteSequenceLength	$ZIGLIB/std/unicode.zig	/^pub fn utf8ByteSequenceLength(first_byte: u8) !u3 {$/;"	function
utf8CodepointSequenceLength	$ZIGLIB/std/unicode.zig	/^pub fn utf8CodepointSequenceLength(c: u21) !u3 {$/;"	function
utf8CountCodepoints	$ZIGLIB/std/unicode.zig	/^pub fn utf8CountCodepoints(s: []const u8) !usize {$/;"	function
utf8Decode	$ZIGLIB/std/unicode.zig	/^pub fn utf8Decode(bytes: []const u8) Utf8DecodeError!u21 {$/;"	function
utf8Decode2	$ZIGLIB/std/unicode.zig	/^pub fn utf8Decode2(bytes: []const u8) Utf8Decode2Error!u21 {$/;"	function
utf8Decode3	$ZIGLIB/std/unicode.zig	/^pub fn utf8Decode3(bytes: []const u8) Utf8Decode3Error!u21 {$/;"	function
utf8Decode4	$ZIGLIB/std/unicode.zig	/^pub fn utf8Decode4(bytes: []const u8) Utf8Decode4Error!u21 {$/;"	function
utf8Encode	$ZIGLIB/std/unicode.zig	/^pub fn utf8Encode(c: u21, out: []u8) !u3 {$/;"	function
utf8ToUtf16Le	$ZIGLIB/std/unicode.zig	/^pub fn utf8ToUtf16Le(utf16le: []u16, utf8: []const u8) !usize {$/;"	function
utf8ToUtf16LeStringLiteral	$ZIGLIB/std/unicode.zig	/^pub fn utf8ToUtf16LeStringLiteral(comptime utf8: []const u8) *const [calcUtf16LeLen(utf8) catch unreachable:0]u16 {$/;"	function
utf8ToUtf16LeWithNull	$ZIGLIB/std/unicode.zig	/^pub fn utf8ToUtf16LeWithNull(allocator: mem.Allocator, utf8: []const u8) ![:0]u16 {$/;"	function
utf8ValidCodepoint	$ZIGLIB/std/unicode.zig	/^pub fn utf8ValidCodepoint(value: u21) bool {$/;"	function
utf8ValidateSlice	$ZIGLIB/std/unicode.zig	/^pub fn utf8ValidateSlice(s: []const u8) bool {$/;"	function
utf8_len	$ZIGLIB/std/unicode.zig	/const utf8_len = utf8CodepointSequenceLength(codepoint) catch unreachable/;"	constant
utf_16	$ZIGLIB/std/c/tokenizer.zig	/utf_16/;"	field
utf_32	$ZIGLIB/std/c/tokenizer.zig	/utf_32/;"	field
utf_8	$ZIGLIB/std/c/tokenizer.zig	/utf_8/;"	field
util	$ZIGLIB/std/compress/deflate/dict_decoder.zig	/const util = struct {$/;"	struct
utime	$ZIGLIB/std/os/linux/syscalls.zig	/utime = Linux + 30/;"	field
utimensat	$ZIGLIB/std/os/linux/syscalls.zig	/utimensat = Linux + 316/;"	field
utimensat_time64	$ZIGLIB/std/os/linux/syscalls.zig	/utimensat_time64 = Linux + 412/;"	field
utimes	$ZIGLIB/std/os/linux/syscalls.zig	/utimes = Linux + 267/;"	field
utrap_install	$ZIGLIB/std/os/linux/syscalls.zig	/utrap_install = 164/;"	field
utsname	$ZIGLIB/std/os/linux.zig	/^pub const utsname = extern struct {$/;"	struct
uu_inst	$ZIGLIB/std/fmt.zig	/const uu_inst = UU{ .int = 456 }/;"	constant
uu_result	$ZIGLIB/std/fmt.zig	/const uu_result = try bufPrint(buf[0..], "{}", .{uu_inst})/;"	constant
uuid	$ZIGLIB/std/macho.zig	/uuid: [16]u8 = undefined/;"	field
uuid_command	$ZIGLIB/std/macho.zig	/^pub const uuid_command = extern struct {$/;"	struct
uvalue	$ZIGLIB/std/leb128.zig	/const uvalue = @bitCast(U, value)/;"	constant
v0le	$ZIGLIB/std/hash/murmur.zig	/var v0le: u32 = v0/;"	variable
v128	$ZIGLIB/std/wasm.zig	/v128 = 0x7B/;"	field
v128_and	$ZIGLIB/std/wasm.zig	/v128_and = 0x4E/;"	field
v128_andnot	$ZIGLIB/std/wasm.zig	/v128_andnot = 0x4F/;"	field
v128_any_true	$ZIGLIB/std/wasm.zig	/v128_any_true = 0x53/;"	field
v128_bitselect	$ZIGLIB/std/wasm.zig	/v128_bitselect = 0x52/;"	field
v128_const	$ZIGLIB/std/wasm.zig	/v128_const = 0x0C/;"	field
v128_load	$ZIGLIB/std/wasm.zig	/v128_load = 0x00/;"	field
v128_load16_lane	$ZIGLIB/std/wasm.zig	/v128_load16_lane = 0x55/;"	field
v128_load16_splat	$ZIGLIB/std/wasm.zig	/v128_load16_splat = 0x08/;"	field
v128_load16x4_s	$ZIGLIB/std/wasm.zig	/v128_load16x4_s = 0x03/;"	field
v128_load16x4_u	$ZIGLIB/std/wasm.zig	/v128_load16x4_u = 0x04/;"	field
v128_load32_lane	$ZIGLIB/std/wasm.zig	/v128_load32_lane = 0x56/;"	field
v128_load32_splat	$ZIGLIB/std/wasm.zig	/v128_load32_splat = 0x09/;"	field
v128_load32_zero	$ZIGLIB/std/wasm.zig	/v128_load32_zero = 0x5C/;"	field
v128_load32x2_s	$ZIGLIB/std/wasm.zig	/v128_load32x2_s = 0x05/;"	field
v128_load32x2_u	$ZIGLIB/std/wasm.zig	/v128_load32x2_u = 0x06/;"	field
v128_load64_lane	$ZIGLIB/std/wasm.zig	/v128_load64_lane = 0x57/;"	field
v128_load64_splat	$ZIGLIB/std/wasm.zig	/v128_load64_splat = 0x0A/;"	field
v128_load64_zero	$ZIGLIB/std/wasm.zig	/v128_load64_zero = 0x5D/;"	field
v128_load8_lane	$ZIGLIB/std/wasm.zig	/v128_load8_lane = 0x54/;"	field
v128_load8_splat	$ZIGLIB/std/wasm.zig	/v128_load8_splat = 0x07/;"	field
v128_load8x8_s	$ZIGLIB/std/wasm.zig	/v128_load8x8_s = 0x01/;"	field
v128_load8x8_u	$ZIGLIB/std/wasm.zig	/v128_load8x8_u = 0x02/;"	field
v128_not	$ZIGLIB/std/wasm.zig	/v128_not = 0x4D/;"	field
v128_or	$ZIGLIB/std/wasm.zig	/v128_or = 0x50/;"	field
v128_store	$ZIGLIB/std/wasm.zig	/v128_store = 0x0B/;"	field
v128_store16_lane	$ZIGLIB/std/wasm.zig	/v128_store16_lane = 0x59/;"	field
v128_store32_lane	$ZIGLIB/std/wasm.zig	/v128_store32_lane = 0x5A/;"	field
v128_store64_lane	$ZIGLIB/std/wasm.zig	/v128_store64_lane = 0x5B/;"	field
v128_store8_lane	$ZIGLIB/std/wasm.zig	/v128_store8_lane = 0x58/;"	field
v128_xor	$ZIGLIB/std/wasm.zig	/v128_xor = 0x51/;"	field
v1_1	$ZIGLIB/std/target/spirv.zig	/v1_1/;"	field
v1_2	$ZIGLIB/std/target/spirv.zig	/v1_2/;"	field
v1_3	$ZIGLIB/std/target/spirv.zig	/v1_3/;"	field
v1_4	$ZIGLIB/std/target/spirv.zig	/v1_4/;"	field
v1_5	$ZIGLIB/std/target/spirv.zig	/v1_5/;"	field
v1le	$ZIGLIB/std/hash/murmur.zig	/var v1le: u64 = v1/;"	variable
v2pk	$ZIGLIB/std/crypto/ecdsa.zig	/const v2pk = try self.public_key.p.mulPublic(v2, .Little)/;"	constant
v2u64	$ZIGLIB/compiler_rt/umodti3.zig	/^const v2u64 = @Vector(2, u64)/;"	constant
v4u32	$ZIGLIB/std/crypto/sha2.zig	/^const v4u32 = @Vector(4, u32)/;"	constant
v5te	$ZIGLIB/std/target/arm.zig	/v5te/;"	field
v5tej	$ZIGLIB/std/target/arm.zig	/v5tej/;"	field
v6kz	$ZIGLIB/std/target/arm.zig	/v6kz/;"	field
v6sm	$ZIGLIB/std/target/arm.zig	/v6sm/;"	field
v6t2	$ZIGLIB/std/target/arm.zig	/v6t2/;"	field
v7em	$ZIGLIB/std/target/arm.zig	/v7em/;"	field
v7ve	$ZIGLIB/std/target/arm.zig	/v7ve/;"	field
v8_1a	$ZIGLIB/std/target/arm.zig	/v8_1a/;"	field
v8_1m_main	$ZIGLIB/std/target/arm.zig	/v8_1m_main/;"	field
v8_2a	$ZIGLIB/std/target/arm.zig	/v8_2a/;"	field
v8_3a	$ZIGLIB/std/target/arm.zig	/v8_3a/;"	field
v8_4a	$ZIGLIB/std/target/arm.zig	/v8_4a/;"	field
v8_5a	$ZIGLIB/std/target/arm.zig	/v8_5a/;"	field
v8_6a	$ZIGLIB/std/target/arm.zig	/v8_6a/;"	field
v8_7a	$ZIGLIB/std/target/arm.zig	/v8_7a/;"	field
v8_8a	$ZIGLIB/std/target/arm.zig	/v8_8a/;"	field
v8m_main	$ZIGLIB/std/target/arm.zig	/v8m_main/;"	field
v9_1a	$ZIGLIB/std/target/arm.zig	/v9_1a/;"	field
v9_2a	$ZIGLIB/std/target/arm.zig	/v9_2a/;"	field
v9_3a	$ZIGLIB/std/target/arm.zig	/v9_3a/;"	field
v_opp	$ZIGLIB/std/crypto/pcurves/common.zig	/var v_opp: Limbs = undefined/;"	variable
v_regs	$ZIGLIB/std/os/linux/powerpc64.zig	/v_regs: *vrregset_t/;"	field
v_u2u2	$ZIGLIB/std/crypto/25519/ristretto255.zig	/const v_u2u2 = v.mul(u2u2)/;"	constant
va_list	$ZIGLIB/std/os/windows.zig	/^pub const va_list = *opaque {}/;"	constant
vaddr_end	$ZIGLIB/std/debug.zig	/const vaddr_end = vaddr_start + sect_contrib.Size/;"	constant
vaddr_start	$ZIGLIB/std/pdb.zig	/const vaddr_start = frag_vaddr_start + line_num_entry.Offset/;"	constant
vaes	$ZIGLIB/std/target/x86.zig	/vaes/;"	field
val2	$ZIGLIB/std/mem.zig	/const val2 = @as($/;"	constant
val_align	$ZIGLIB/std/hash_map.zig	/const val_align = if (@sizeOf(V) == 0) 1 else @alignOf(V)/;"	constant
val_expression	$ZIGLIB/std/dwarf.zig	/pub const val_expression = 0x16/;"	constant
val_hi	$ZIGLIB/compiler_rt/log2.zig	/var val_hi = hi * ivln2hi/;"	variable
val_hi32	$ZIGLIB/std/os/linux/bpf/btf.zig	/val_hi32: i32/;"	field
val_lo	$ZIGLIB/compiler_rt/log2.zig	/var val_lo = (lo + hi) * ivln2lo + lo * ivln2hi/;"	variable
val_lo32	$ZIGLIB/std/os/linux/bpf/btf.zig	/val_lo32: i32/;"	field
val_offset	$ZIGLIB/std/dwarf.zig	/pub const val_offset = 0x14/;"	constant
val_offset_sf	$ZIGLIB/std/dwarf.zig	/pub const val_offset_sf = 0x15/;"	constant
valgrind_support	$ZIGLIB/std/Build/CompileStep.zig	/^valgrind_support: ?bool = null/;"	field
valid	$ZIGLIB/std/os/linux.zig	/pub fn valid(x: u8) bool {$/;"	function
validUnderscores	$ZIGLIB/std/fmt/parse_float/parse.zig	/^pub fn validUnderscores(s: []const u8, comptime base: u8) bool {$/;"	function
validate	$ZIGLIB/std/json.zig	/^pub fn validate(s: []const u8) bool {$/;"	function
validateUserInputDidItFail	$ZIGLIB/std/Build.zig	/^pub fn validateUserInputDidItFail(self: *Build) bool {$/;"	function
validationAllocator	$ZIGLIB/std/heap.zig	/var validationAllocator = mem.validationWrap(base_allocator)/;"	variable
validationWrap	$ZIGLIB/std/mem.zig	/^pub fn validationWrap(allocator: anytype) ValidationAllocator(@TypeOf(allocator)) {$/;"	function
validity	$ZIGLIB/std/crypto/Certificate.zig	/validity: Validity/;"	field
vals_end	$ZIGLIB/std/hash_map.zig	/const vals_end = vals_start + new_capacity * @sizeOf(V)/;"	constant
vals_start	$ZIGLIB/std/hash_map.zig	/const vals_start = std.mem.alignForward(keys_end, val_align)/;"	constant
valtype	$ZIGLIB/std/wasm.zig	/valtype: Valtype/;"	field
value	$ZIGLIB/std/zig/tokenizer.zig	/const value = std.unicode.utf8Decode3(bytes) catch return length/;"	constant
value1	$ZIGLIB/std/event/channel.zig	/const value1 = channel.get()/;"	constant
value2	$ZIGLIB/std/event/channel.zig	/const value2 = channel.get()/;"	constant
value3	$ZIGLIB/std/event/channel.zig	/const value3 = channel.getOrNull()/;"	constant
value4	$ZIGLIB/std/event/channel.zig	/const value4 = channel.getOrNull()/;"	constant
valueIterator	$ZIGLIB/std/hash_map.zig	/pub fn valueIterator(self: *const Self) ValueIterator {$/;"	function
value_copy	$ZIGLIB/std/process.zig	/const value_copy = try self.copy(value)/;"	constant
value_count	$ZIGLIB/std/Build/CheckObjectStep.zig	/const value_count = try std.leb.readULEB128(u32, reader)/;"	constant
value_expr	$ZIGLIB/std/zig/Parse.zig	/const value_expr: Node.Index = if (p.eatToken(.equal) == null) 0 else try p.expectExpr()/;"	constant
value_info	$ZIGLIB/std/fmt.zig	/const value_info = @typeInfo(@TypeOf(int_value)).Int/;"	constant
value_length	$ZIGLIB/std/Build/CheckObjectStep.zig	/const value_length = try std.leb.readULEB128(u32, reader)/;"	constant
value_ptr	$ZIGLIB/std/packed_int_array.zig	/const value_ptr = @ptrCast(*align(1) const Container, &bytes[start_byte])/;"	constant
value_size	$ZIGLIB/std/os/linux/bpf.zig	/value_size: u32/;"	field
value_start	$ZIGLIB/std/process.zig	/const value_start = i/;"	constant
value_txt	$ZIGLIB/std/net.zig	/const value_txt = colon_it.next() orelse continue/;"	constant
value_type_info	$ZIGLIB/std/crypto/phc_encoding.zig	/const value_type_info = switch (@typeInfo(@TypeOf(out.alg_version))) {$/;"	constant
value_w	$ZIGLIB/std/process.zig	/const value_w = ptr[value_start..i]/;"	constant
values	$ZIGLIB/std/zig/Ast.zig	/values: []const Node.Index/;"	field
valuesFromFields	$ZIGLIB/std/enums.zig	/^pub fn valuesFromFields(comptime E: type, comptime fields: []const EnumField) []const E {$/;"	function
values_array	$ZIGLIB/std/array_hash_map.zig	/const values_array = slice.items(.value)/;"	constant
values_copy	$ZIGLIB/std/Build/ConfigHeaderStep.zig	/var values_copy = try values.clone()/;"	variable
values_ptr	$ZIGLIB/std/hash_map.zig	/var values_ptr = self.values()/;"	variable
var_const_decl	$ZIGLIB/std/zig/Ast.zig	/var_const_decl/;"	field
var_decl	$ZIGLIB/std/zig/Parse.zig	/const var_decl = try p.parseVarDecl()/;"	constant
varargs	$ZIGLIB/std/zig/Parse.zig	/var varargs: union(enum) { none, seen, nonfinal: TokenIndex } = .none/;"	variable
varargs_nonfinal	$ZIGLIB/std/zig/Ast.zig	/varargs_nonfinal/;"	field
variable	$ZIGLIB/std/dwarf/TAG.zig	/^pub const variable = 0x34/;"	constant
variable_parameter	$ZIGLIB/std/dwarf/AT.zig	/^pub const variable_parameter = 0x4b/;"	constant
variant	$ZIGLIB/std/zig/system/linux.zig	/variant: u8 = 0/;"	field
variant_also_negotiates	$ZIGLIB/std/http.zig	/variant_also_negotiates = 506/;"	field
variant_part	$ZIGLIB/std/dwarf/TAG.zig	/^pub const variant_part = 0x33/;"	constant
vars	$ZIGLIB/std/Build/CheckObjectStep.zig	/var vars = std.StringHashMap(u64).init(gpa)/;"	variable
vbool	$ZIGLIB/std/fmt.zig	/const vbool: @Vector(4, bool) = [_]bool{ true, false, true, false }/;"	constant
vcmpx_exec_war_hazard	$ZIGLIB/std/target/amdgpu.zig	/vcmpx_exec_war_hazard/;"	field
vcmpx_permlane_hazard	$ZIGLIB/std/target/amdgpu.zig	/vcmpx_permlane_hazard/;"	field
vcpkgTriplet	$ZIGLIB/std/zig/CrossTarget.zig	/^pub fn vcpkgTriplet(self: CrossTarget, allocator: mem.Allocator, linkage: VcpkgLinkage) ![]u8 {$/;"	function
vcpkg_bin_path	$ZIGLIB/std/Build/CompileStep.zig	/^vcpkg_bin_path: ?[]const u8 = null/;"	field
vcpkg_path	$ZIGLIB/std/Build/CompileStep.zig	/const vcpkg_path = try allocator.alloc(u8, size)/;"	constant
vcpkg_root	$ZIGLIB/std/Build.zig	/^vcpkg_root: VcpkgRoot = .unattempted/;"	field
vd_aux	$ZIGLIB/std/elf.zig	/vd_aux: Elf64_Word/;"	field
vd_cnt	$ZIGLIB/std/elf.zig	/vd_cnt: Elf64_Half/;"	field
vd_flags	$ZIGLIB/std/elf.zig	/vd_flags: Elf64_Half/;"	field
vd_hash	$ZIGLIB/std/elf.zig	/vd_hash: Elf64_Word/;"	field
vd_ndx	$ZIGLIB/std/elf.zig	/vd_ndx: Elf64_Half/;"	field
vd_next	$ZIGLIB/std/elf.zig	/vd_next: Elf64_Word/;"	field
vd_version	$ZIGLIB/std/elf.zig	/vd_version: Elf64_Half/;"	field
vda_name	$ZIGLIB/std/os/linux/vdso.zig	/const vda_name = @ptrCast([*:0]u8, strings + aux.vda_name)/;"	constant
vda_next	$ZIGLIB/std/elf.zig	/vda_next: Elf64_Word/;"	field
vdso_addr	$ZIGLIB/std/os/linux/vdso.zig	/const vdso_addr = std.os.system.getauxval(std.elf.AT_SYSINFO_EHDR)/;"	constant
vdso_clock_gettime	$ZIGLIB/std/os/linux.zig	/^var vdso_clock_gettime = @ptrCast(?*const anyopaque, &init_vdso_clock_gettime)/;"	variable
vdso_clock_gettime_ty	$ZIGLIB/std/os/linux.zig	/^const vdso_clock_gettime_ty = *align(1) const fn (i32, *timespec) callconv(.C) usize/;"	constant
vdsp2e3	$ZIGLIB/std/target/csky.zig	/vdsp2e3/;"	field
vdsp2e60f	$ZIGLIB/std/target/csky.zig	/vdsp2e60f/;"	field
vdspv1	$ZIGLIB/std/target/csky.zig	/vdspv1/;"	field
vdspv2	$ZIGLIB/std/target/csky.zig	/vdspv2/;"	field
vec2d	$ZIGLIB/std/compress/lzma/vec2d.zig	/var vec2d = try Vec2D(i32).init(allocator, 1, .{ 2, 3 })/;"	variable
vec_i	$ZIGLIB/std/crypto/tls/Client.zig	/var vec_i: usize = 0/;"	variable
vec_len	$ZIGLIB/std/simd.zig	/const vec_len = vectorLength(@TypeOf(interlaced)) \/ vec_count/;"	constant
vecs_arr	$ZIGLIB/std/simd.zig	/const vecs_arr = @as([vecs.len]VecType, vecs)/;"	constant
vector	$ZIGLIB/std/target/s390x.zig	/vector/;"	field
vectorLength	$ZIGLIB/std/simd.zig	/^fn vectorLength(comptime VectorType: type) comptime_int {$/;"	function
vector_bit_size	$ZIGLIB/std/simd.zig	/const vector_bit_size: u16 = blk: {$/;"	constant
vector_bool	$ZIGLIB/std/mem.zig	/vector_bool: @Vector(2, bool)/;"	field
vector_enhancements_1	$ZIGLIB/std/target/s390x.zig	/vector_enhancements_1/;"	field
vector_enhancements_2	$ZIGLIB/std/target/s390x.zig	/vector_enhancements_2/;"	field
vector_f32	$ZIGLIB/std/mem.zig	/vector_f32: @Vector(2, f32)/;"	field
vector_len	$ZIGLIB/std/zig/c_translation.zig	/const vector_len: usize = 4/;"	constant
vector_packed_decimal	$ZIGLIB/std/target/s390x.zig	/vector_packed_decimal/;"	field
vector_packed_decimal_enhancement	$ZIGLIB/std/target/s390x.zig	/vector_packed_decimal_enhancement/;"	field
vector_packed_decimal_enhancement_2	$ZIGLIB/std/target/s390x.zig	/vector_packed_decimal_enhancement_2/;"	field
vector_u32	$ZIGLIB/std/mem.zig	/vector_u32: @Vector(2, u32)/;"	field
vectors	$ZIGLIB/std/crypto/siphash.zig	/const vectors = [_][8]u8{$/;"	constant
vectors_use_two_units	$ZIGLIB/std/target/powerpc.zig	/vectors_use_two_units/;"	field
vendor	$ZIGLIB/std/zig/system/x86.zig	/const vendor = leaf.ebx/;"	constant
vendor_guid	$ZIGLIB/std/os/uefi/tables/configuration_table.zig	/vendor_guid: Guid/;"	field
vendor_id	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/vendor_id: u16 align(1)/;"	field
vendor_table	$ZIGLIB/std/os/uefi/tables/configuration_table.zig	/vendor_table: *anyopaque/;"	field
ver0	$ZIGLIB/std/zig/system/darwin/macos.zig	/const ver0 = try parseSystemVersion(case[0])/;"	constant
ver1	$ZIGLIB/std/zig/system/darwin/macos.zig	/const ver1: std.builtin.Version = case[1]/;"	constant
verbose	$ZIGLIB/std/Build.zig	/^verbose: bool/;"	field
verbose_air	$ZIGLIB/std/Build.zig	/^verbose_air: bool/;"	field
verbose_cc	$ZIGLIB/std/Build/CompileStep.zig	/^verbose_cc: bool/;"	field
verbose_cimport	$ZIGLIB/std/Build.zig	/^verbose_cimport: bool/;"	field
verbose_link	$ZIGLIB/std/Build/CompileStep.zig	/^verbose_link: bool/;"	field
verbose_llvm_cpu_features	$ZIGLIB/std/Build.zig	/^verbose_llvm_cpu_features: bool/;"	field
verbose_llvm_ir	$ZIGLIB/std/Build.zig	/^verbose_llvm_ir: bool/;"	field
verbose_log	$ZIGLIB/std/heap/general_purpose_allocator.zig	/verbose_log: bool = false/;"	field
verde	$ZIGLIB/std/target/amdgpu.zig	/pub const verde = CpuModel{$/;"	constant
verdef	$ZIGLIB/std/dynamic_library.zig	/verdef: ?*elf.Verdef/;"	field
verifier	$ZIGLIB/std/crypto/ecdsa.zig	/pub fn verifier(self: Signature, public_key: PublicKey) (NonCanonicalError || EncodingError || IdentityElementError)!Verifier {$/;"	function
verify	$ZIGLIB/std/crypto/scrypt.zig	/pub fn verify($/;"	function
verifyBatch	$ZIGLIB/std/crypto/25519/ed25519.zig	/pub fn verifyBatch(comptime count: usize, signature_batch: [count]BatchElement) (SignatureVerificationError || IdentityElementError || WeakPublicKeyError || EncodingError || NonCanonicalError)!void {$/;"	function
verifyContext	$ZIGLIB/std/hash_map.zig	/^pub fn verifyContext($/;"	function
verifyHostName	$ZIGLIB/std/crypto/Certificate.zig	/pub fn verifyHostName(parsed_subject: Parsed, host_name: []const u8) VerifyHostNameError!void {$/;"	function
verifyRsa	$ZIGLIB/std/crypto/Certificate.zig	/^fn verifyRsa($/;"	function
verify_buffer	$ZIGLIB/std/crypto/tls/Client.zig	/var verify_buffer =$/;"	variable
verify_bytes	$ZIGLIB/std/crypto/tls/Client.zig	/const verify_bytes = switch (handshake_cipher) {$/;"	constant
verify_data	$ZIGLIB/std/crypto/tls/Client.zig	/const verify_data = tls.hmac(P.Hmac, &handshake_hash, p.client_finished_key)/;"	constant
verify_ecdsa	$ZIGLIB/std/crypto/Certificate.zig	/^fn verify_ecdsa($/;"	function
verify_options	$ZIGLIB/std/crypto/scrypt.zig	/const verify_options = VerifyOptions{ .allocator = alloc }/;"	constant
version	$ZIGLIB/std/zig/system/windows.zig	/const version: u32 = @as(u32, os_ver) << 16 | @as(u16, sp_ver) << 8 | sub_ver/;"	constant
versionCheck	$ZIGLIB/std/c.zig	/^pub fn versionCheck(comptime glibc_version: std.builtin.Version) type {$/;"	function
version_elem	$ZIGLIB/std/crypto/Certificate.zig	/const version_elem = try der.Element.parse(cert_bytes, tbs_certificate.slice.start)/;"	constant
version_info	$ZIGLIB/std/zig/system/windows.zig	/var version_info: std.os.windows.RTL_OSVERSIONINFOW = undefined/;"	variable
version_length	$ZIGLIB/std/Build/CheckObjectStep.zig	/const version_length = try std.leb.readULEB128(u32, reader)/;"	constant
version_min_command	$ZIGLIB/std/macho.zig	/^pub const version_min_command = extern struct {$/;"	struct
version_param_name	$ZIGLIB/std/crypto/phc_encoding.zig	/^const version_param_name = "v"/;"	constant
version_range	$ZIGLIB/std/target.zig	/version_range: VersionRange/;"	field
version_script	$ZIGLIB/std/Build/CompileStep.zig	/^version_script: ?[]const u8 = null/;"	field
version_text	$ZIGLIB/std/zig/CrossTarget.zig	/const version_text = it.rest()/;"	constant
versym	$ZIGLIB/std/dynamic_library.zig	/versym: ?[*]u16/;"	field
vertex	$ZIGLIB/std/target.zig	/vertex/;"	field
vertical_resolution	$ZIGLIB/std/os/uefi/protocols/graphics_output_protocol.zig	/vertical_resolution: u32 = undefined/;"	field
vfat	$ZIGLIB/std/time/epoch.zig	/^pub const vfat = dos/;"	constant
vfork	$ZIGLIB/std/os/linux/syscalls.zig	/vfork = 66/;"	field
vfp2	$ZIGLIB/std/target/arm.zig	/vfp2/;"	field
vfp2sp	$ZIGLIB/std/target/arm.zig	/vfp2sp/;"	field
vfp3	$ZIGLIB/std/target/arm.zig	/vfp3/;"	field
vfp3d16	$ZIGLIB/std/target/arm.zig	/vfp3d16/;"	field
vfp3d16sp	$ZIGLIB/std/target/arm.zig	/vfp3d16sp/;"	field
vfp3sp	$ZIGLIB/std/target/arm.zig	/vfp3sp/;"	field
vfp4	$ZIGLIB/std/target/arm.zig	/vfp4/;"	field
vfp4d16	$ZIGLIB/std/target/arm.zig	/vfp4d16/;"	field
vfp4d16sp	$ZIGLIB/std/target/arm.zig	/vfp4d16sp/;"	field
vfp4sp	$ZIGLIB/std/target/arm.zig	/vfp4sp/;"	field
vfpu	$ZIGLIB/std/target/mips.zig	/vfpu/;"	field
vfs_cap_data	$ZIGLIB/std/os/linux.zig	/^pub const vfs_cap_data = extern struct {$/;"	struct
vgpr_index_mode	$ZIGLIB/std/target/amdgpu.zig	/vgpr_index_mode/;"	field
vhangup	$ZIGLIB/std/os/linux/syscalls.zig	/vhangup = Linux + 150/;"	field
vi64	$ZIGLIB/std/fmt.zig	/const vi64: @Vector(4, i64) = [_]i64{ -2, -1, 0, 1 }/;"	constant
view	$ZIGLIB/std/unicode.zig	/const view = try Utf8View.init(utf8)/;"	constant
virt	$ZIGLIB/std/target/mips.zig	/virt/;"	field
virt_addr_end	$ZIGLIB/std/dynamic_library.zig	/var virt_addr_end: usize = 0/;"	variable
virtual_address	$ZIGLIB/std/coff.zig	/virtual_address: u32/;"	field
virtual_size	$ZIGLIB/std/coff.zig	/virtual_size: u32/;"	field
virtual_start	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/virtual_start: u64/;"	field
virtuality	$ZIGLIB/std/dwarf/AT.zig	/^pub const virtuality = 0x4c/;"	constant
virtualization	$ZIGLIB/std/target/arm.zig	/virtualization/;"	field
vis2	$ZIGLIB/std/target/sparc.zig	/vis2/;"	field
vis3	$ZIGLIB/std/target/sparc.zig	/vis3/;"	field
visib_token	$ZIGLIB/std/zig/Ast.zig	/visib_token: ?TokenIndex/;"	field
visibility	$ZIGLIB/std/dwarf/AT.zig	/^pub const visibility = 0x17/;"	constant
vista	$ZIGLIB/std/target.zig	/vista = 0x06000000/;"	field
vlan_id	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/vlan_id: u16 align(1)/;"	field
vldn_align	$ZIGLIB/std/target/arm.zig	/vldn_align/;"	field
vlen	$ZIGLIB/std/os/linux/bpf/btf.zig	/vlen: u16/;"	field
vm32_object_id_t	$ZIGLIB/std/c/darwin.zig	/^pub const vm32_object_id_t = u32/;"	constant
vm86	$ZIGLIB/std/os/linux/syscalls.zig	/vm86 = Linux + 113/;"	field
vm86old	$ZIGLIB/std/os/linux/syscalls.zig	/vm86old = 113/;"	field
vm_address_t	$ZIGLIB/std/c/darwin.zig	/^pub const vm_address_t = vm_offset_t/;"	constant
vm_behavior_t	$ZIGLIB/std/c/darwin.zig	/^pub const vm_behavior_t = i32/;"	constant
vm_info	$ZIGLIB/std/os/darwin.zig	/var vm_info: std.c.task_vm_info_data_t = undefined/;"	variable
vm_inherit_t	$ZIGLIB/std/c/darwin.zig	/^pub const vm_inherit_t = u32/;"	constant
vm_machine_attribute_t	$ZIGLIB/std/c/darwin.zig	/^pub const vm_machine_attribute_t = usize/;"	constant
vm_machine_attribute_val_t	$ZIGLIB/std/c/darwin.zig	/^pub const vm_machine_attribute_val_t = isize/;"	constant
vm_map_read_t	$ZIGLIB/std/c/darwin.zig	/^pub const vm_map_read_t = mach_port_t/;"	constant
vm_map_t	$ZIGLIB/std/c/darwin.zig	/^pub const vm_map_t = mach_port_t/;"	constant
vm_memory	$ZIGLIB/std/os/darwin.zig	/var vm_memory: std.c.vm_offset_t = undefined/;"	variable
vm_object_id_t	$ZIGLIB/std/c/darwin.zig	/^pub const vm_object_id_t = u64/;"	constant
vm_offset_t	$ZIGLIB/std/c/darwin.zig	/^pub const vm_offset_t = usize/;"	constant
vm_prot_t	$ZIGLIB/std/macho.zig	/^pub const vm_prot_t = c_int/;"	constant
vm_region_basic_info_64	$ZIGLIB/std/c/darwin.zig	/^pub const vm_region_basic_info_64 = extern struct {$/;"	struct
vm_region_extended_info	$ZIGLIB/std/c/darwin.zig	/^pub const vm_region_extended_info = extern struct {$/;"	struct
vm_region_flavor_t	$ZIGLIB/std/c/darwin.zig	/^pub const vm_region_flavor_t = c_int/;"	constant
vm_region_info_t	$ZIGLIB/std/c/darwin.zig	/^pub const vm_region_info_t = *c_int/;"	constant
vm_region_recurse_info_t	$ZIGLIB/std/c/darwin.zig	/^pub const vm_region_recurse_info_t = *c_int/;"	constant
vm_region_submap_info_64	$ZIGLIB/std/c/darwin.zig	/^pub const vm_region_submap_info_64 = extern struct {$/;"	struct
vm_region_submap_short_info_64	$ZIGLIB/std/c/darwin.zig	/^pub const vm_region_submap_short_info_64 = extern struct {$/;"	struct
vm_region_top_info	$ZIGLIB/std/c/darwin.zig	/^pub const vm_region_top_info = extern struct {$/;"	struct
vm_size_t	$ZIGLIB/std/c/darwin.zig	/^pub const vm_size_t = mach_vm_size_t/;"	constant
vmaddr	$ZIGLIB/std/macho.zig	/vmaddr: u64 = 0/;"	field
vmem_to_scalar_write_hazard	$ZIGLIB/std/target/amdgpu.zig	/vmem_to_scalar_write_hazard/;"	field
vmlx_forwarding	$ZIGLIB/std/target/arm.zig	/vmlx_forwarding/;"	field
vmlx_hazards	$ZIGLIB/std/target/arm.zig	/vmlx_hazards/;"	field
vmsize	$ZIGLIB/std/macho.zig	/vmsize: u64 = 0/;"	field
vmsplice	$ZIGLIB/std/os/linux/syscalls.zig	/vmsplice = Linux + 307/;"	field
vmx_reserve	$ZIGLIB/std/os/linux/powerpc64.zig	/vmx_reserve: [34 + 34 + 32 + 1]i64/;"	field
vn_aux	$ZIGLIB/std/elf.zig	/vn_aux: Elf64_Word/;"	field
vn_cnt	$ZIGLIB/std/elf.zig	/vn_cnt: Elf64_Half/;"	field
vn_file	$ZIGLIB/std/elf.zig	/vn_file: Elf64_Word/;"	field
vn_next	$ZIGLIB/std/elf.zig	/vn_next: Elf64_Word/;"	field
vn_version	$ZIGLIB/std/elf.zig	/vn_version: Elf64_Half/;"	field
vna_flags	$ZIGLIB/std/elf.zig	/vna_flags: Elf64_Half/;"	field
vna_hash	$ZIGLIB/std/elf.zig	/vna_hash: Elf64_Word/;"	field
vna_name	$ZIGLIB/std/elf.zig	/vna_name: Elf64_Word/;"	field
vna_next	$ZIGLIB/std/elf.zig	/vna_next: Elf64_Word/;"	field
vna_other	$ZIGLIB/std/elf.zig	/vna_other: Elf64_Half/;"	field
void	$ZIGLIB/std/dwarf/ATE.zig	/pub const @"void" = 0x0/;"	constant
volatile	$ZIGLIB/std/os/linux/bpf/btf.zig	/@"volatile"/;"	field
volatile_token	$ZIGLIB/std/zig/Ast.zig	/volatile_token: ?TokenIndex/;"	field
volatile_type	$ZIGLIB/std/dwarf/TAG.zig	/^pub const volatile_type = 0x35/;"	constant
volcanic_islands	$ZIGLIB/std/target/amdgpu.zig	/volcanic_islands/;"	field
volume_name	$ZIGLIB/std/os/windows.zig	/volume_name: enum {$/;"	field
volume_name_u16	$ZIGLIB/std/os/windows.zig	/const volume_name_u16 = final_path[0..file_path_begin_index]/;"	constant
volume_size	$ZIGLIB/std/os/uefi/protocols/file_protocol.zig	/volume_size: u64/;"	field
vop3_literal	$ZIGLIB/std/target/amdgpu.zig	/vop3_literal/;"	field
vop3p	$ZIGLIB/std/target/amdgpu.zig	/vop3p/;"	field
vopd	$ZIGLIB/std/target/amdgpu.zig	/vopd/;"	field
vpclmulqdq	$ZIGLIB/std/target/x86.zig	/vpclmulqdq/;"	field
vrregs	$ZIGLIB/std/os/linux/powerpc64.zig	/vrregs: [32][4]u32 align(16)/;"	field
vrregset	$ZIGLIB/std/os/linux/powerpc64.zig	/^pub const vrregset = extern struct {$/;"	struct
vrregset_t	$ZIGLIB/std/os/linux/powerpc64.zig	/^pub const vrregset_t = vrregset/;"	constant
vrsave	$ZIGLIB/std/os/linux/powerpc64.zig	/vrsave: u32/;"	field
vscnt	$ZIGLIB/std/target/amdgpu.zig	/vscnt/;"	field
vscr	$ZIGLIB/std/os/linux/powerpc.zig	/vscr: u32/;"	field
vscr_word_be	$ZIGLIB/std/os/linux/powerpc64.zig	/vscr_word_be: u32/;"	field
vscr_word_le	$ZIGLIB/std/os/linux/powerpc64.zig	/vscr_word_le: u32/;"	field
vserver	$ZIGLIB/std/os/linux/syscalls.zig	/vserver = Linux + 277/;"	field
vsym	$ZIGLIB/std/os/linux/vdso.zig	/const vsym = @bitCast(u32, vsym_arg) & 0x7fff/;"	constant
vtable	$ZIGLIB/std/mem/Allocator.zig	/^vtable: *const VTable/;"	field
vtable_elem_location	$ZIGLIB/std/dwarf/AT.zig	/^pub const vtable_elem_location = 0x4d/;"	constant
vu64	$ZIGLIB/std/fmt.zig	/const vu64: @Vector(4, u64) = [_]u64{ 1000, 2000, 3000, 4000 }/;"	constant
vulkan	$ZIGLIB/std/target.zig	/vulkan/;"	field
vzeroupper	$ZIGLIB/std/target/x86.zig	/vzeroupper/;"	field
w1_pos	$ZIGLIB/std/leb128.zig	/const w1_pos = fbs.pos/;"	constant
wAttributes	$ZIGLIB/std/os/windows.zig	/wAttributes: WORD/;"	field
wHighVersion	$ZIGLIB/std/os/windows/ws2_32.zig	/wHighVersion: WORD/;"	field
wParam	$ZIGLIB/std/os/windows/user32.zig	/wParam: WPARAM/;"	field
wPeriodMax	$ZIGLIB/std/os/windows/winmm.zig	/wPeriodMax: UINT/;"	field
wPeriodMin	$ZIGLIB/std/os/windows/winmm.zig	/wPeriodMin: UINT/;"	field
wProcessorArchitecture	$ZIGLIB/std/os/windows.zig	/wProcessorArchitecture: WORD/;"	field
wProcessorLevel	$ZIGLIB/std/os/windows.zig	/wProcessorLevel: WORD/;"	field
wProcessorRevision	$ZIGLIB/std/os/windows.zig	/wProcessorRevision: WORD/;"	field
wReserved	$ZIGLIB/std/os/windows.zig	/wReserved: WORD/;"	field
wShowWindow	$ZIGLIB/std/os/windows.zig	/wShowWindow: WORD/;"	field
wToPrefixedFileW	$ZIGLIB/std/os/windows.zig	/^pub fn wToPrefixedFileW(s: []const u16) !PathSpace {$/;"	function
wType	$ZIGLIB/std/os/windows/winmm.zig	/wType: UINT/;"	field
wVersion	$ZIGLIB/std/os/windows/ws2_32.zig	/wVersion: WORD/;"	field
wWinMainCRTStartup	$ZIGLIB/std/start.zig	/^fn wWinMainCRTStartup() callconv(std.os.windows.WINAPI) noreturn {$/;"	function
wWinMainCRTStartup2	$ZIGLIB/std/start.zig	/^fn wWinMainCRTStartup2() callconv(.C) noreturn {$/;"	function
w_end	$ZIGLIB/std/compress/deflate/compressor.zig	/var w_end = win[pos + length]/;"	variable
w_pos	$ZIGLIB/std/compress/deflate/compressor.zig	/var w_pos = win[pos..]/;"	variable
w_value	$ZIGLIB/std/math/big/int.zig	/var w_value = std.math.absCast(value)/;"	variable
wait	$ZIGLIB/std/event/wait_group.zig	/pub fn wait(self: *Self) void {$/;"	function
wait4	$ZIGLIB/std/os/linux/syscalls.zig	/wait4 = Linux + 59/;"	field
waitForEvent	$ZIGLIB/std/os/uefi/tables/boot_services.zig	/waitForEvent: *const fn (event_len: usize, events: [*]const Event, index: *usize) callconv(.C) Status/;"	field
waitOnFuture	$ZIGLIB/std/event/future.zig	/^fn waitOnFuture(future: *Future(i32)) i32 {$/;"	function
waitPosix	$ZIGLIB/std/child_process.zig	/fn waitPosix(self: *ChildProcess) !Term {$/;"	function
waitUntilFdReadable	$ZIGLIB/std/event/loop.zig	/pub fn waitUntilFdReadable(self: *Loop, fd: os.fd_t) void {$/;"	function
waitUntilFdWritable	$ZIGLIB/std/event/loop.zig	/pub fn waitUntilFdWritable(self: *Loop, fd: os.fd_t) void {$/;"	function
waitUntilFdWritableOrReadable	$ZIGLIB/std/event/loop.zig	/pub fn waitUntilFdWritableOrReadable(self: *Loop, fd: os.fd_t) void {$/;"	function
waitUntilSet	$ZIGLIB/std/Thread/ResetEvent.zig	/fn waitUntilSet(self: *Impl, timeout: ?u64) error{Timeout}!void {$/;"	function
waitUnwrapped	$ZIGLIB/std/child_process.zig	/fn waitUnwrapped(self: *ChildProcess) !void {$/;"	function
waitUnwrappedWindows	$ZIGLIB/std/child_process.zig	/fn waitUnwrappedWindows(self: *ChildProcess) !void {$/;"	function
waitWindows	$ZIGLIB/std/child_process.zig	/fn waitWindows(self: *ChildProcess) !Term {$/;"	function
wait_for_input	$ZIGLIB/std/os/uefi/protocols/simple_pointer_protocol.zig	/wait_for_input: Event/;"	field
wait_for_key	$ZIGLIB/std/os/uefi/protocols/simple_text_input_protocol.zig	/wait_for_key: Event/;"	field
wait_for_key_ex	$ZIGLIB/std/os/uefi/protocols/simple_text_input_ex_protocol.zig	/wait_for_key_ex: Event/;"	field
wait_for_packet	$ZIGLIB/std/os/uefi/protocols/simple_network_protocol.zig	/wait_for_packet: Event/;"	field
wait_idx	$ZIGLIB/std/child_process.zig	/const wait_idx = status - windows.WAIT_OBJECT_0/;"	constant
wait_object_count	$ZIGLIB/std/child_process.zig	/var wait_object_count: u2 = 0/;"	variable
wait_objects	$ZIGLIB/std/child_process.zig	/var wait_objects: [2]windows.HANDLE = undefined/;"	variable
wait_result	$ZIGLIB/std/Thread/ResetEvent.zig	/const wait_result = futex_deadline.wait(&self.state, waiting)/;"	constant
wait_time	$ZIGLIB/std/event/loop.zig	/const wait_time = 100 * std.time.ns_per_ms/;"	constant
waiter	$ZIGLIB/std/event/lock.zig	/var waiter: Waiter = undefined/;"	variable
waiter_count	$ZIGLIB/std/c/haiku.zig	/waiter_count: i32 = 0/;"	field
waiter_mask	$ZIGLIB/std/Thread/Condition.zig	/const waiter_mask = 0xffff/;"	constant
waiters	$ZIGLIB/std/event/wait_group.zig	/waiters: ?*Waiter = null/;"	field
waiters_first	$ZIGLIB/std/c/netbsd.zig	/waiters_first: ?*u8 = null/;"	field
waiters_last	$ZIGLIB/std/c/netbsd.zig	/waiters_last: ?*u8 = null/;"	field
waitid	$ZIGLIB/std/os/linux/syscalls.zig	/waitid = Linux + 278/;"	field
waiting	$ZIGLIB/std/Thread/ResetEvent.zig	/const waiting = 1/;"	constant
waitpid	$ZIGLIB/std/os/posix_spawn.zig	/pub fn waitpid(pid: pid_t, flags: u32) Error!WaitPidResult {$/;"	function
waitpkg	$ZIGLIB/std/target/x86.zig	/waitpkg/;"	field
wake	$ZIGLIB/std/Thread/Futex.zig	/fn wake(ptr: *const Atomic(u32), max_waiters: u32) void {$/;"	function
wakeable	$ZIGLIB/std/Thread/Condition.zig	/const wakeable = waiters - signals/;"	constant
wakeup_bytes	$ZIGLIB/std/event/loop.zig	/const wakeup_bytes = [_]u8{0x1} ** 8/;"	constant
wakeup_events_or_watermark	$ZIGLIB/std/os/linux.zig	/wakeup_events_or_watermark: u32 = 0/;"	field
wakeups	$ZIGLIB/std/Thread/Condition.zig	/wakeups: usize = 0/;"	field
walk	$ZIGLIB/std/fs.zig	/pub fn walk(self: IterableDir, allocator: Allocator) !Walker {$/;"	function
walkStackWindows	$ZIGLIB/std/debug.zig	/^pub noinline fn walkStackWindows(addresses: []usize) usize {$/;"	function
want	$ZIGLIB/std/crypto/scrypt.zig	/want: []const u8/;"	field
wantSharedLibSymLinks	$ZIGLIB/std/zig/CrossTarget.zig	/^pub fn wantSharedLibSymLinks(self: CrossTarget) bool {$/;"	function
want_aeabi	$ZIGLIB/compiler_rt/common.zig	/^pub const want_aeabi = switch (builtin.abi) {$/;"	constant
want_first_tokens	$ZIGLIB/std/compress/deflate/deflate_fast.zig	/var want_first_tokens = tokens_count/;"	variable
want_fork_safety	$ZIGLIB/std/crypto/tlcsprng.zig	/^const want_fork_safety = os_has_fork and !os_has_arc4random and$/;"	constant
want_list	$ZIGLIB/std/compress/deflate/dict_decoder.zig	/var want_list = ArrayList(u8).init(testing.allocator)/;"	variable
want_lto	$ZIGLIB/std/Build/CompileStep.zig	/^want_lto: ?bool = null/;"	field
want_name	$ZIGLIB/std/compress/deflate/huffman_bit_writer.zig	/const want_name = comptime fmt.comptimePrint(ht.want, .{ttype.to_s()})/;"	constant
want_name_no_input	$ZIGLIB/std/compress/deflate/huffman_bit_writer.zig	/const want_name_no_input = comptime fmt.comptimePrint(ht.want_no_input, .{ttype.to_s()})/;"	constant
want_ni	$ZIGLIB/std/compress/deflate/huffman_bit_writer.zig	/const want_ni = @embedFile("testdata\/" ++ want_name_no_input)/;"	constant
want_no_input	$ZIGLIB/std/compress/deflate/huffman_bit_writer.zig	/want_no_input: []const u8 = ""/;"	field
want_ppc_abi	$ZIGLIB/compiler_rt/common.zig	/^pub const want_ppc_abi = builtin.cpu.arch.isPPC() or builtin.cpu.arch.isPPC64()/;"	constant
want_read_count	$ZIGLIB/std/os/windows.zig	/const want_read_count = @intCast(DWORD, math.min(@as(DWORD, maxInt(DWORD)), buffer.len))/;"	constant
want_second_tokens	$ZIGLIB/std/compress/deflate/deflate_fast.zig	/var want_second_tokens = tokens_count/;"	variable
want_sparc_abi	$ZIGLIB/compiler_rt/common.zig	/^pub const want_sparc_abi = builtin.cpu.arch.isSPARC()/;"	constant
want_windows_v2u64_abi	$ZIGLIB/compiler_rt/common.zig	/^pub const want_windows_v2u64_abi = builtin.os.tag == .windows and builtin.cpu.arch == .x86_64 and @import("builtin").object_format != .c/;"	constant
wanted_read_len	$ZIGLIB/std/crypto/tls/Client.zig	/const wanted_read_len = buf_cap * (max_ciphertext_len + tls.record_header_len)/;"	constant
wanted_s	$ZIGLIB/std/crypto/bcrypt.zig	/const wanted_s = crypt_format.strHashInternal(password, salt, .{ .rounds_log = rounds_log })/;"	constant
wanted_stack_size	$ZIGLIB/std/start.zig	/const wanted_stack_size = phdr.p_memsz/;"	constant
wanted_steps	$ZIGLIB/std/Build.zig	/var wanted_steps = ArrayList(*Step).init(self.allocator)/;"	variable
warn	$ZIGLIB/std/zig/Parse.zig	/^fn warn(p: *Parse, error_tag: AstError.Tag) error{OutOfMemory}!void {$/;"	function
warnAboutForeignBinaries	$ZIGLIB/std/Build/EmulatableRunStep.zig	/^fn warnAboutForeignBinaries(step: *EmulatableRunStep) void {$/;"	function
warnExpected	$ZIGLIB/std/zig/Parse.zig	/^fn warnExpected(p: *Parse, expected_token: Token.Tag) error{OutOfMemory}!void {$/;"	function
warnMsg	$ZIGLIB/std/zig/Parse.zig	/^fn warnMsg(p: *Parse, msg: Ast.Error) error{OutOfMemory}!void {$/;"	function
warning	$ZIGLIB/std/crypto/tls.zig	/warning = 1/;"	field
warnings	$ZIGLIB/std/zig/system/NativePaths.zig	/^warnings: ArrayList([:0]u8)/;"	field
wasi	$ZIGLIB/std/target.zig	/wasi/;"	field
wasiCwd	$ZIGLIB/std/std.zig	/pub const wasiCwd: fn () fs.Dir = if (@hasDecl(options_override, "wasiCwd"))$/;"	constant
wasiMain2	$ZIGLIB/std/start.zig	/^fn wasiMain2() callconv(.C) noreturn {$/;"	function
wasi_exec_model	$ZIGLIB/std/Build/CompileStep.zig	/^wasi_exec_model: ?std.builtin.WasiExecModel = null/;"	field
wasi_flags	$ZIGLIB/std/os.zig	/const wasi_flags = if (flags & linux.AT.SYMLINK_NOFOLLOW == 0) wasi.LOOKUP_SYMLINK_FOLLOW else 0/;"	constant
wasi_start	$ZIGLIB/std/start.zig	/^fn wasi_start() callconv(.C) void {$/;"	function
wasm	$ZIGLIB/std/target.zig	/wasm/;"	field
wasm32	$ZIGLIB/std/target.zig	/wasm32/;"	field
wasm64	$ZIGLIB/std/target.zig	/wasm64/;"	field
wasm_allocator	$ZIGLIB/std/heap.zig	/^pub const wasm_allocator = Allocator{$/;"	constant
wasm_freestanding_start	$ZIGLIB/std/start.zig	/^fn wasm_freestanding_start() callconv(.C) void {$/;"	function
wasm_start_sym	$ZIGLIB/std/start.zig	/const wasm_start_sym = switch (builtin.wasi_exec_model) {$/;"	constant
wasmtime	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/wasmtime: []const u8/;"	field
wasnt_square	$ZIGLIB/std/crypto/25519/ristretto255.zig	/const wasnt_square = 1 - ratio_sqrt.ratio_is_square/;"	constant
watch	$ZIGLIB/std/fs/watch.zig	/var watch = try Watch(void).init(allocator, 0)/;"	variable
watchos	$ZIGLIB/std/target.zig	/watchos/;"	field
watermark	$ZIGLIB/std/os/linux.zig	/watermark: bool = false/;"	field
wavefrontsize16	$ZIGLIB/std/target/amdgpu.zig	/wavefrontsize16/;"	field
wavefrontsize32	$ZIGLIB/std/target/amdgpu.zig	/wavefrontsize32/;"	field
wavefrontsize64	$ZIGLIB/std/target/amdgpu.zig	/wavefrontsize64/;"	field
wblocked_first	$ZIGLIB/std/c/netbsd.zig	/wblocked_first: ?*u8 = null/;"	field
wblocked_last	$ZIGLIB/std/c/netbsd.zig	/wblocked_last: ?*u8 = null/;"	field
wbnoinvd	$ZIGLIB/std/target/x86.zig	/wbnoinvd/;"	field
wd_table	$ZIGLIB/std/fs/watch.zig	/wd_table: WdTable/;"	field
weak	$ZIGLIB/std/Build/CompileStep.zig	/weak: bool = false/;"	field
weakDef	$ZIGLIB/std/macho.zig	/pub fn weakDef(sym: nlist_64) bool {$/;"	function
weakHashLen32WithSeeds	$ZIGLIB/std/hash/cityhash.zig	/fn weakHashLen32WithSeeds(ptr: [*]const u8, a: u64, b: u64) WeakPair {$/;"	function
weakHashLen32WithSeedsHelper	$ZIGLIB/std/hash/cityhash.zig	/fn weakHashLen32WithSeedsHelper(w: u64, x: u64, y: u64, z: u64, a: u64, b: u64) WeakPair {$/;"	function
weakRef	$ZIGLIB/std/macho.zig	/pub fn weakRef(sym: nlist_64) bool {$/;"	function
weak_bind_off	$ZIGLIB/std/macho.zig	/weak_bind_off: u32 = 0/;"	field
weak_bind_size	$ZIGLIB/std/macho.zig	/weak_bind_size: u32 = 0/;"	field
weak_ext	$ZIGLIB/std/coff.zig	/weak_ext: WeakExternalDefinition/;"	field
weightedIndex	$ZIGLIB/std/rand.zig	/pub fn weightedIndex(r: std.rand.Random, comptime T: type, proportions: []const T) usize {$/;"	function
westmere	$ZIGLIB/std/target/x86.zig	/pub const westmere = CpuModel{$/;"	constant
wfxt	$ZIGLIB/std/target/aarch64.zig	/wfxt/;"	field
whence	$ZIGLIB/std/os/linux/x86_64.zig	/whence: i16/;"	field
whence_t	$ZIGLIB/std/os/wasi.zig	/^pub const whence_t = enum(u8) { SET, CUR, END }/;"	enum
while	$ZIGLIB/std/zig/Ast.zig	/@"while"/;"	field
whileCont	$ZIGLIB/std/zig/Ast.zig	/^pub fn whileCont(tree: Ast, node: Node.Index) full.While {$/;"	function
whileFull	$ZIGLIB/std/zig/Ast.zig	/^pub fn whileFull(tree: Ast, node: Node.Index) full.While {$/;"	function
whileSimple	$ZIGLIB/std/zig/Ast.zig	/^pub fn whileSimple(tree: Ast, node: Node.Index) full.While {$/;"	function
while_cont	$ZIGLIB/std/zig/Ast.zig	/while_cont/;"	field
while_simple	$ZIGLIB/std/zig/Ast.zig	/while_simple/;"	field
while_statement	$ZIGLIB/std/zig/Parse.zig	/const while_statement = try p.parseWhileStatement()/;"	constant
while_token	$ZIGLIB/std/zig/Parse.zig	/const while_token = p.eatToken(.keyword_while) orelse return null_node/;"	constant
white	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/pub const white: u8 = 0x0f/;"	constant
whitelist	$ZIGLIB/std/Build.zig	/whitelist: ?[]const CrossTarget = null/;"	field
whitelist_cpu	$ZIGLIB/std/Build.zig	/const whitelist_cpu = whitelist_item.getCpu()/;"	constant
whitelist_item	$ZIGLIB/std/Build.zig	/var whitelist_item = CrossTarget{}/;"	variable
whitespace	$ZIGLIB/std/json/write_stream.zig	/whitespace: std.json.StringifyOptions.Whitespace = std.json.StringifyOptions.Whitespace{$/;"	field
whole	$ZIGLIB/std/os/linux/sparc64.zig	/whole: f64/;"	field
wide	$ZIGLIB/std/os/uefi/protocols/hii.zig	/wide: bool/;"	field
wideMultiply	$ZIGLIB/compiler_rt/common.zig	/^pub fn wideMultiply(comptime Z: type, a: Z, b: Z, hi: *Z, lo: *Z) void {$/;"	function
wideShrWithTruncation	$ZIGLIB/compiler_rt/mulf3.zig	/^fn wideShrWithTruncation(comptime Z: type, hi: *Z, lo: *Z, count: u32) bool {$/;"	function
wideUpdate	$ZIGLIB/compiler_rt/atomics.zig	/^fn wideUpdate(comptime T: type, ptr: *T, val: T, update: anytype) T {$/;"	function
wide_addr	$ZIGLIB/compiler_rt/atomics.zig	/const wide_addr = addr & ~(@as(T, smallest_atomic_fetch_exch_size) - 1)/;"	constant
wide_block_length	$ZIGLIB/std/crypto/modes.zig	/const wide_block_length = parallel_count * 16/;"	constant
wide_buf	$ZIGLIB/std/os.zig	/var wide_buf: [windows.PATH_MAX_WIDE]u16 = undefined/;"	variable
wide_new	$ZIGLIB/compiler_rt/atomics.zig	/const wide_new = wide_old & ~mask | (@as(WideAtomic, new) << inner_shift)/;"	constant
wide_old	$ZIGLIB/compiler_rt/atomics.zig	/var wide_old = @atomicLoad(WideAtomic, wide_ptr, .SeqCst)/;"	variable
wide_ptr	$ZIGLIB/compiler_rt/atomics.zig	/const wide_ptr = @alignCast(smallest_atomic_fetch_exch_size, @intToPtr(*WideAtomic, wide_addr))/;"	constant
wide_slice	$ZIGLIB/std/os.zig	/const wide_slice = try windows.GetFinalPathNameByHandle(fd, .{}, wide_buf[0..])/;"	constant
wide_stride_vfp	$ZIGLIB/std/target/arm.zig	/wide_stride_vfp/;"	field
widekl	$ZIGLIB/std/target/x86.zig	/widekl/;"	field
width	$ZIGLIB/std/zig/render.zig	/const width = sub_expr_buffer.items.len - start - 2/;"	constant
width_bitfield	$ZIGLIB/std/os/linux/bpf.zig	/const width_bitfield = switch (width) {$/;"	constant
widths	$ZIGLIB/std/zig/render.zig	/const widths = try gpa.alloc(usize, row_exprs.len + row_size)/;"	constant
win10	$ZIGLIB/std/target.zig	/win10 = 0x0A000000/;"	field
win10_19h1	$ZIGLIB/std/target.zig	/win10_19h1 = 0x0A000007/;"	field
win10_fe	$ZIGLIB/std/target.zig	/win10_fe = 0x0A00000A/;"	field
win10_mn	$ZIGLIB/std/target.zig	/win10_mn = 0x0A000009/;"	field
win10_rs1	$ZIGLIB/std/target.zig	/win10_rs1 = 0x0A000002/;"	field
win10_rs2	$ZIGLIB/std/target.zig	/win10_rs2 = 0x0A000003/;"	field
win10_rs3	$ZIGLIB/std/target.zig	/win10_rs3 = 0x0A000004/;"	field
win10_rs4	$ZIGLIB/std/target.zig	/win10_rs4 = 0x0A000005/;"	field
win10_rs5	$ZIGLIB/std/target.zig	/win10_rs5 = 0x0A000006/;"	field
win10_th2	$ZIGLIB/std/target.zig	/win10_th2 = 0x0A000001/;"	field
win10_vb	$ZIGLIB/std/target.zig	/win10_vb = 0x0A000008/;"	field
win2k	$ZIGLIB/std/target.zig	/win2k = 0x05000000/;"	field
win32_version_value	$ZIGLIB/std/coff.zig	/win32_version_value: u32/;"	field
win7	$ZIGLIB/std/target.zig	/win7 = 0x06010000/;"	field
win8	$ZIGLIB/std/target.zig	/win8 = 0x06020000/;"	field
win8_1	$ZIGLIB/std/target.zig	/win8_1 = 0x06030000/;"	field
win_probe_stack_adjust_sp	$ZIGLIB/compiler_rt/stack_probe.zig	/^fn win_probe_stack_adjust_sp() void {$/;"	function
win_probe_stack_only	$ZIGLIB/compiler_rt/stack_probe.zig	/^fn win_probe_stack_only() void {$/;"	function
win_prot	$ZIGLIB/std/os.zig	/const win_prot: windows.DWORD = switch (@truncate(u3, protection)) {$/;"	constant
winchip2	$ZIGLIB/std/target/x86.zig	/pub const winchip2 = CpuModel{$/;"	constant
winchip_c6	$ZIGLIB/std/target/x86.zig	/pub const winchip_c6 = CpuModel{$/;"	constant
window	$ZIGLIB/std/os/windows/user32.zig	/const window = function(dwExStyle, lpClassName, lpWindowName, dwStyle, X, Y, nWidth, nHeight, hWindParent, hMenu, hInstance, lpParam)/;"	constant
window_end	$ZIGLIB/std/compress/deflate/compressor.zig	/window_end: usize/;"	field
window_mask	$ZIGLIB/std/compress/deflate/compressor.zig	/^const window_mask = window_size - 1/;"	constant
window_size	$ZIGLIB/std/compress/deflate/compressor.zig	/^const window_size = 1 << log_window_size/;"	constant
window_start	$ZIGLIB/std/testing.zig	/var window_start: usize = 0/;"	variable
windows	$ZIGLIB/std/zig/CrossTarget.zig	/windows: Target.Os.WindowsVersion/;"	field
windowsAsyncRead	$ZIGLIB/std/child_process.zig	/fn windowsAsyncRead($/;"	function
windowsCreateCommandLine	$ZIGLIB/std/child_process.zig	/^fn windowsCreateCommandLine(allocator: mem.Allocator, argv: []const []const u8) ![:0]u8 {$/;"	function
windowsCreateProcess	$ZIGLIB/std/child_process.zig	/^fn windowsCreateProcess(app_name: [*:0]u16, cmd_line: [*:0]u16, envp_ptr: ?[*]u16, cwd_ptr: ?[*:0]u16, lpStartupInfo: *windows.STARTUPINFOW, lpProcessInformation: *windows.PROCESS_INFORMATION) !void {$/;"	function
windowsCreateProcessPathExt	$ZIGLIB/std/child_process.zig	/^fn windowsCreateProcessPathExt($/;"	function
windowsCreateProcessSupportsExtension	$ZIGLIB/std/child_process.zig	/^fn windowsCreateProcessSupportsExtension(ext: []const u16) bool {$/;"	function
windowsDestroyPipe	$ZIGLIB/std/child_process.zig	/^fn windowsDestroyPipe(rd: ?windows.HANDLE, wr: ?windows.HANDLE) void {$/;"	function
windowsDirReader	$ZIGLIB/std/fs/watch.zig	/fn windowsDirReader(self: *Self, dir: *OsData.Dir, dirname: []const u8) void {$/;"	function
windowsIsSep	$ZIGLIB/std/fs/path.zig	/const windowsIsSep = struct {$/;"	constant
windowsMakeAsyncPipe	$ZIGLIB/std/child_process.zig	/^fn windowsMakeAsyncPipe(rd: *?windows.HANDLE, wr: *?windows.HANDLE, sattr: *const windows.SECURITY_ATTRIBUTES) !void {$/;"	function
windowsMakePipeIn	$ZIGLIB/std/child_process.zig	/^fn windowsMakePipeIn(rd: *?windows.HANDLE, wr: *?windows.HANDLE, sattr: *const windows.SECURITY_ATTRIBUTES) !void {$/;"	function
windowsParsePath	$ZIGLIB/std/fs/path.zig	/^pub fn windowsParsePath(path: []const u8) WindowsPath {$/;"	function
windows_api	$ZIGLIB/std/debug.zig	/windows_api: if (native_os == .windows) WindowsContext else void/;"	field
windows_segfault_handle	$ZIGLIB/std/debug.zig	/^var windows_segfault_handle: ?windows.HANDLE = null/;"	variable
wine	$ZIGLIB/std/zig/system/NativeTargetInfo.zig	/wine: []const u8/;"	field
winsize	$ZIGLIB/std/os/linux.zig	/^pub const winsize = extern struct {$/;"	struct
wipe_mem	$ZIGLIB/std/crypto/tlcsprng.zig	/^threadlocal var wipe_mem: []align(mem.page_size) u8 = &[_]u8{}/;"	variable
with_stmt	$ZIGLIB/std/dwarf/TAG.zig	/^pub const with_stmt = 0x22/;"	constant
word	$ZIGLIB/std/zig/system/NativePaths.zig	/const word = it.next() orelse break/;"	constant
word_bytes	$ZIGLIB/std/crypto/blake3.zig	/var word_bytes: [4]u8 = undefined/;"	variable
word_counter	$ZIGLIB/std/crypto/blake3.zig	/var word_counter: usize = 0/;"	variable
word_i	$ZIGLIB/std/pdb.zig	/var word_i: u32 = 0/;"	variable
words	$ZIGLIB/std/crypto/blake3.zig	/var words: [count]u32 = undefined/;"	variable
wordsFromLittleEndianBytes	$ZIGLIB/std/crypto/blake3.zig	/^fn wordsFromLittleEndianBytes(comptime count: usize, bytes: [count * 4]u8) [count]u32 {$/;"	function
words_in_key	$ZIGLIB/std/crypto/aes/soft.zig	/const words_in_key = key_length \/ 4/;"	constant
words_remain	$ZIGLIB/std/bit_set.zig	/words_remain: []const MaskInt/;"	field
workaround	$ZIGLIB/std/os/linux/io_uring.zig	/var workaround = path/;"	variable
worker	$ZIGLIB/std/Thread/Semaphore.zig	/fn worker(ctx: *@This()) void {$/;"	function
workerRun	$ZIGLIB/std/event/loop.zig	/fn workerRun(self: *Loop) void {$/;"	function
world_wide_name	$ZIGLIB/std/os/uefi/protocols/device_path_protocol.zig	/world_wide_name: u64 align(1)/;"	field
wq_fd	$ZIGLIB/std/os/linux.zig	/wq_fd: u32/;"	field
wr_h	$ZIGLIB/std/child_process.zig	/var wr_h: windows.HANDLE = undefined/;"	variable
wr_pos	$ZIGLIB/std/compress/deflate/dict_decoder.zig	/wr_pos: u32 = 0/;"	field
wrapped	$ZIGLIB/std/math/big/int.zig	/const wrapped = m.subWrap(a.toConst(), b.toConst(), signedness, bit_count)/;"	constant
wrapped_handshake	$ZIGLIB/std/crypto/tls/Client.zig	/const wrapped_handshake = ctd.buf[ctd.idx - handshake_len - 4 .. ctd.idx]/;"	constant
wrapped_len	$ZIGLIB/std/crypto/tls/Client.zig	/const wrapped_len = out_cleartext.len + P.AEAD.tag_length/;"	constant
writableLength	$ZIGLIB/std/fifo.zig	/pub fn writableLength(self: Self) usize {$/;"	function
writableSlice	$ZIGLIB/std/fifo.zig	/pub fn writableSlice(self: SliceSelfArg, offset: usize) []T {$/;"	function
writableWithSize	$ZIGLIB/std/fifo.zig	/pub fn writableWithSize(self: *Self, size: usize) ![]T {$/;"	function
writable_slice	$ZIGLIB/std/fifo.zig	/const writable_slice = self.writableSlice(0)/;"	constant
write	$ZIGLIB/std/zig/render.zig	/pub fn write(self: *Self, bytes: []const u8) WriteError!usize {$/;"	function
writeAll	$ZIGLIB/std/net.zig	/pub fn writeAll(self: Stream, bytes: []const u8) WriteError!void {$/;"	function
writeAllEnd	$ZIGLIB/std/crypto/tls/Client.zig	/^pub fn writeAllEnd(c: *Client, stream: anytype, bytes: []const u8, end: bool) !void {$/;"	function
writeAssumeCapacity	$ZIGLIB/std/fifo.zig	/pub fn writeAssumeCapacity(self: *Self, src: []const T) void {$/;"	function
writeBits	$ZIGLIB/std/io/bit_writer.zig	/pub fn writeBits(self: *Self, value: anytype, bits: usize) Error!void {$/;"	function
writeBlock	$ZIGLIB/std/compress/deflate/huffman_bit_writer.zig	/pub fn writeBlock($/;"	function
writeBlockDynamic	$ZIGLIB/std/compress/deflate/huffman_bit_writer.zig	/pub fn writeBlockDynamic($/;"	function
writeBlockHuff	$ZIGLIB/std/compress/deflate/huffman_bit_writer.zig	/pub fn writeBlockHuff(self: *Self, eof: bool, input: []const u8) Error!void {$/;"	function
writeBlockTests	$ZIGLIB/std/compress/deflate/huffman_bit_writer.zig	/^const writeBlockTests = &[_]HuffTest{$/;"	constant
writeBlocks	$ZIGLIB/std/os/uefi/protocols/block_io_protocol.zig	/pub fn writeBlocks(self: *Self, media_id: u32, lba: u64, buffer_size: usize, buf: [*]u8) Status {$/;"	function
writeByte	$ZIGLIB/std/io/writer.zig	/pub fn writeByte(self: Self, byte: u8) Error!void {$/;"	function
writeByteDiff	$ZIGLIB/std/testing.zig	/fn writeByteDiff(self: BytesDiffer, writer: anytype, comptime fmt: []const u8, byte: u8, diff: bool) !void {$/;"	function
writeByteNTimes	$ZIGLIB/std/io/writer.zig	/pub fn writeByteNTimes(self: Self, byte: u8, n: usize) Error!void {$/;"	function
writeBytes	$ZIGLIB/std/compress/deflate/huffman_bit_writer.zig	/pub fn writeBytes(self: *Self, bytes: []const u8) Error!void {$/;"	function
writeCode	$ZIGLIB/std/compress/deflate/huffman_bit_writer.zig	/fn writeCode(self: *Self, c: hm_code.HuffCode) Error!void {$/;"	function
writeCopy	$ZIGLIB/std/compress/deflate/dict_decoder.zig	/pub fn writeCopy(self: *Self, dist: u32, length: u32) u32 {$/;"	function
writeCurrentStackTrace	$ZIGLIB/std/debug.zig	/^pub fn writeCurrentStackTrace($/;"	function
writeCurrentStackTraceWindows	$ZIGLIB/std/debug.zig	/^pub fn writeCurrentStackTraceWindows($/;"	function
writeDynamicHeader	$ZIGLIB/std/compress/deflate/huffman_bit_writer.zig	/fn writeDynamicHeader($/;"	function
writeEnd	$ZIGLIB/std/crypto/tls/Client.zig	/^pub fn writeEnd(c: *Client, stream: anytype, bytes: []const u8, end: bool) !usize {$/;"	function
writeEscapedString	$ZIGLIB/std/json/write_stream.zig	/fn writeEscapedString(self: *Self, string: []const u8) !void {$/;"	function
writeFile	$ZIGLIB/std/fs.zig	/pub fn writeFile(self: Dir, sub_path: []const u8, data: []const u8) !void {$/;"	function
writeFileAll	$ZIGLIB/std/fs/file.zig	/pub fn writeFileAll(self: File, in_file: File, args: WriteFileOptions) WriteFileError!void {$/;"	function
writeFileAllSendfile	$ZIGLIB/std/fs/file.zig	/fn writeFileAllSendfile(self: File, in_file: File, args: WriteFileOptions) os.SendFileError!void {$/;"	function
writeFileAllUnseekable	$ZIGLIB/std/fs/file.zig	/pub fn writeFileAllUnseekable(self: File, in_file: File, args: WriteFileOptions) WriteFileError!void {$/;"	function
writeFixedHeader	$ZIGLIB/std/compress/deflate/huffman_bit_writer.zig	/fn writeFixedHeader(self: *Self, is_eof: bool) Error!void {$/;"	function
writeFixingWhitespace	$ZIGLIB/std/zig/render.zig	/^fn writeFixingWhitespace(writer: std.ArrayList(u8).Writer, slice: []const u8) Error!void {$/;"	function
writeFn	$ZIGLIB/std/os/uefi/protocols/file_protocol.zig	/fn writeFn(self: *const FileProtocol, bytes: []const u8) WriteError!usize {$/;"	function
writeILEB128	$ZIGLIB/std/leb128.zig	/^pub fn writeILEB128(writer: anytype, int_value: anytype) !void {$/;"	function
writeInt	$ZIGLIB/std/mem.zig	/^pub fn writeInt(comptime T: type, buffer: *[@divExact(@typeInfo(T).Int.bits, 8)]u8, value: T, endian: Endian) void {$/;"	function
writeIntBig	$ZIGLIB/std/mem.zig	/^pub const writeIntBig = switch (native_endian) {$/;"	constant
writeIntFd	$ZIGLIB/std/child_process.zig	/^fn writeIntFd(fd: i32, value: ErrInt) !void {$/;"	function
writeIntForeign	$ZIGLIB/std/mem.zig	/^pub fn writeIntForeign(comptime T: type, buf: *[@divExact(@typeInfo(T).Int.bits, 8)]u8, value: T) void {$/;"	function
writeIntLittle	$ZIGLIB/std/mem.zig	/^pub const writeIntLittle = switch (native_endian) {$/;"	constant
writeIntNative	$ZIGLIB/std/mem.zig	/^pub fn writeIntNative(comptime T: type, buf: *[(@typeInfo(T).Int.bits + 7) \/ 8]u8, value: T) void {$/;"	function
writeIntSlice	$ZIGLIB/std/mem.zig	/^pub fn writeIntSlice(comptime T: type, buffer: []u8, value: T, endian: Endian) void {$/;"	function
writeIntSliceBig	$ZIGLIB/std/mem.zig	/^pub fn writeIntSliceBig(comptime T: type, buffer: []u8, value: T) void {$/;"	function
writeIntSliceForeign	$ZIGLIB/std/mem.zig	/^pub const writeIntSliceForeign = switch (native_endian) {$/;"	constant
writeIntSliceLittle	$ZIGLIB/std/mem.zig	/^pub fn writeIntSliceLittle(comptime T: type, buffer: []u8, value: T) void {$/;"	function
writeIntSliceNative	$ZIGLIB/std/mem.zig	/^pub const writeIntSliceNative = switch (native_endian) {$/;"	constant
writeItem	$ZIGLIB/std/fifo.zig	/pub fn writeItem(self: *Self, item: T) !void {$/;"	function
writeItemAssumeCapacity	$ZIGLIB/std/fifo.zig	/pub fn writeItemAssumeCapacity(self: *Self, item: T) void {$/;"	function
writeMark	$ZIGLIB/std/compress/deflate/dict_decoder.zig	/pub fn writeMark(self: *Self, count: u32) void {$/;"	function
writeMem	$ZIGLIB/std/os/darwin.zig	/pub fn writeMem(task: MachTask, address: u64, buf: []const u8, arch: std.Target.Cpu.Arch) MachError!usize {$/;"	function
writeMemProtected	$ZIGLIB/std/os/darwin.zig	/pub fn writeMemProtected(task: MachTask, address: u64, buf: []const u8, arch: std.Target.Cpu.Arch) MachError!usize {$/;"	function
writeNoIndent	$ZIGLIB/std/zig/render.zig	/fn writeNoIndent(self: *Self, bytes: []const u8) WriteError!usize {$/;"	function
writePackedInt	$ZIGLIB/std/mem.zig	/^pub fn writePackedInt(comptime T: type, bytes: []u8, bit_offset: usize, value: T, endian: Endian) void {$/;"	function
writePackedIntBig	$ZIGLIB/std/mem.zig	/^pub fn writePackedIntBig(comptime T: type, bytes: []u8, bit_offset: usize, value: T) void {$/;"	function
writePackedIntForeign	$ZIGLIB/std/mem.zig	/^pub const writePackedIntForeign = switch (native_endian) {$/;"	constant
writePackedIntLittle	$ZIGLIB/std/mem.zig	/^pub fn writePackedIntLittle(comptime T: type, bytes: []u8, bit_offset: usize, value: T) void {$/;"	function
writePackedIntNative	$ZIGLIB/std/mem.zig	/^pub const writePackedIntNative = switch (native_endian) {$/;"	constant
writePackedTwosComplement	$ZIGLIB/std/math/big/int.zig	/pub fn writePackedTwosComplement(x: Const, bytes: []u8, bit_offset: usize, bit_count: usize, endian: Endian) void {$/;"	function
writeRunner	$ZIGLIB/std/event/rwlock.zig	/^fn writeRunner(lock: *RwLock) callconv(.Async) void {$/;"	function
writeSlice	$ZIGLIB/std/compress/deflate/dict_decoder.zig	/pub fn writeSlice(self: *Self) []u8 {$/;"	function
writeStackTrace	$ZIGLIB/std/debug.zig	/^pub fn writeStackTrace($/;"	function
writeStoredBlock	$ZIGLIB/std/compress/deflate/compressor.zig	/fn writeStoredBlock(self: *Self, buf: []u8) !void {$/;"	function
writeStoredHeader	$ZIGLIB/std/compress/deflate/huffman_bit_writer.zig	/pub fn writeStoredHeader(self: *Self, length: usize, is_eof: bool) Error!void {$/;"	function
writeStream	$ZIGLIB/std/leb128.zig	/const writeStream = if (t_signed) writeILEB128 else writeULEB128/;"	constant
writeString	$ZIGLIB/std/compress/deflate/dict_decoder.zig	/fn writeString(dst_dd: *DictDecoder, dst: anytype, str: []const u8) !void {$/;"	function
writeStruct	$ZIGLIB/std/io/writer.zig	/pub fn writeStruct(self: Self, value: anytype) Error!void {$/;"	function
writeToSlice	$ZIGLIB/std/segmented_list.zig	/pub fn writeToSlice(self: *Self, dest: []T, start: usize) void {$/;"	function
writeToType	$ZIGLIB/std/compress/deflate/huffman_bit_writer.zig	/^fn writeToType(ttype: TestType, bw: anytype, tok: []const token.Token, input: ?[]const u8) !void {$/;"	function
writeTokens	$ZIGLIB/std/compress/deflate/huffman_bit_writer.zig	/fn writeTokens($/;"	function
writeTwosComplement	$ZIGLIB/std/math/big/int.zig	/pub fn writeTwosComplement(x: Const, buffer: []u8, endian: Endian) void {$/;"	function
writeULEB128	$ZIGLIB/std/leb128.zig	/^pub fn writeULEB128(writer: anytype, uint_value: anytype) !void {$/;"	function
writeUnsignedFixed	$ZIGLIB/std/leb128.zig	/^pub fn writeUnsignedFixed(comptime l: usize, ptr: *[l]u8, int: std.meta.Int(.unsigned, l * 7)) void {$/;"	function
writeVarPackedInt	$ZIGLIB/std/mem.zig	/^pub fn writeVarPackedInt(bytes: []u8, bit_offset: usize, bit_count: usize, value: anytype, endian: std.builtin.Endian) void {$/;"	function
write_backward	$ZIGLIB/std/os/linux.zig	/write_backward: bool = false/;"	field
write_block	$ZIGLIB/std/compress/deflate/huffman_bit_writer.zig	/write_block/;"	field
write_bytes	$ZIGLIB/std/mem.zig	/const write_bytes = bytes[lowest_byte..][0..write_size]/;"	constant
write_caching	$ZIGLIB/std/os/uefi/protocols/block_io_protocol.zig	/write_caching: bool/;"	field
write_contents	$ZIGLIB/std/fs/watch.zig	/const write_contents = "lorem ipsum"/;"	constant
write_dyn_block	$ZIGLIB/std/compress/deflate/huffman_bit_writer.zig	/write_dyn_block/;"	field
write_file	$ZIGLIB/std/Build/Step.zig	/write_file/;"	field
write_file_step	$ZIGLIB/std/Build.zig	/const write_file_step = self.allocator.create(WriteFileStep) catch @panic("OOM")/;"	constant
write_fixed	$ZIGLIB/std/os/linux/io_uring.zig	/pub fn write_fixed($/;"	function
write_handle	$ZIGLIB/std/child_process.zig	/const write_handle = windows.kernel32.CreateFileW($/;"	constant
write_huffman_block	$ZIGLIB/std/compress/deflate/huffman_bit_writer.zig	/write_huffman_block/;"	field
write_idx	$ZIGLIB/std/os/windows.zig	/var write_idx: usize = 0/;"	variable
write_index	$ZIGLIB/std/fmt/parse_float/decimal.zig	/var write_index: usize = 0/;"	variable
write_nodes	$ZIGLIB/std/event/rwlock.zig	/var write_nodes: [shared_it_count]Loop.NextTickNode = undefined/;"	variable
write_only	$ZIGLIB/std/fs/file.zig	/write_only/;"	field
write_seq	$ZIGLIB/std/crypto/tls/Client.zig	/^write_seq: u64/;"	field
write_size	$ZIGLIB/std/mem.zig	/const write_size = (bit_count + bit_shift + 7) \/ 8/;"	constant
write_value	$ZIGLIB/std/mem.zig	/var write_value = (@as(StoreInt, @bitCast(uN, value)) << bit_shift) | @intCast(StoreInt, head)/;"	variable
writer	$ZIGLIB/std/zig/render.zig	/pub fn writer(self: *Self) Writer {$/;"	function
writer_queue	$ZIGLIB/std/event/rwlock.zig	/writer_queue: Queue/;"	field
writer_queue_empty	$ZIGLIB/std/event/rwlock.zig	/writer_queue_empty: bool/;"	field
writercv	$ZIGLIB/std/c/solaris.zig	/writercv: pthread_cond_t = .{}/;"	field
writes	$ZIGLIB/std/Thread/RwLock.zig	/writes: usize = 0/;"	field
writev	$ZIGLIB/std/os/linux/syscalls.zig	/writev = Linux + 19/;"	field
writevAll	$ZIGLIB/std/net.zig	/pub fn writevAll(self: Stream, iovecs: []os.iovec_const) WriteError!void {$/;"	function
written	$ZIGLIB/std/io/buffered_reader.zig	/const written = std.math.min(dest.len - dest_index, self.end - self.start)/;"	constant
writtenExponent	$ZIGLIB/compiler_rt/divxf3.zig	/const writtenExponent = quotientExponent + exponentBias/;"	constant
wrong_equal_var_decl	$ZIGLIB/std/zig/Ast.zig	/wrong_equal_var_decl/;"	field
ws2003	$ZIGLIB/std/target.zig	/ws2003 = 0x05020000/;"	field
ws_col	$ZIGLIB/std/os/linux.zig	/ws_col: u16/;"	field
ws_row	$ZIGLIB/std/os/linux.zig	/ws_row: u16/;"	field
ws_xpixel	$ZIGLIB/std/os/linux.zig	/ws_xpixel: u16/;"	field
ws_ypixel	$ZIGLIB/std/os/linux.zig	/ws_ypixel: u16/;"	field
wsa_startup_mutex	$ZIGLIB/std/os/windows.zig	/^var wsa_startup_mutex: std.Thread.Mutex = .{}/;"	variable
wsadata	$ZIGLIB/std/os/windows.zig	/var wsadata: ws2_32.WSADATA = undefined/;"	variable
x0_mask	$ZIGLIB/std/crypto/ghash_polyval.zig	/const x0_mask = @as(u64, 0) -% (x & 1)/;"	constant
x0x1x10x11	$ZIGLIB/std/crypto/salsa20.zig	/const x0x1x10x11 = Lane{ diag0[0], diag1[1], diag0[2], diag1[3] }/;"	constant
x100	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x100: u64 = undefined/;"	variable
x101	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x101: u64 = undefined/;"	variable
x102	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x102: u64 = undefined/;"	variable
x103	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x103: u64 = undefined/;"	variable
x104	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x104: u64 = undefined/;"	variable
x105	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x105: u64 = undefined/;"	variable
x106	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x106: u64 = undefined/;"	variable
x107	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x107: u64 = undefined/;"	variable
x108	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x108: u64 = undefined/;"	variable
x109	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x109: u64 = undefined/;"	variable
x110	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x110: u64 = undefined/;"	variable
x111	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x111: u64 = undefined/;"	variable
x112	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x112: u64 = undefined/;"	variable
x113	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x113: u64 = undefined/;"	variable
x114	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x114: u64 = undefined/;"	variable
x115	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x115: u64 = undefined/;"	variable
x116	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x116: u64 = undefined/;"	variable
x117	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x117: u64 = undefined/;"	variable
x118	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x118: u64 = undefined/;"	variable
x119	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x119: u64 = undefined/;"	variable
x120	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x120: u64 = undefined/;"	variable
x121	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x121: u64 = undefined/;"	variable
x122	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x122: u64 = undefined/;"	variable
x123	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x123: u64 = undefined/;"	variable
x124	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x124: u64 = undefined/;"	variable
x125	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x125: u64 = undefined/;"	variable
x126	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x126: u64 = undefined/;"	variable
x127	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x127: u64 = undefined/;"	variable
x128	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x128: u64 = undefined/;"	variable
x129	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x129: u64 = undefined/;"	variable
x12x13x6x7	$ZIGLIB/std/crypto/salsa20.zig	/const x12x13x6x7 = Lane{ diag1[0], diag2[1], diag1[2], diag2[3] }/;"	constant
x130	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x130: u64 = undefined/;"	variable
x131	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x131: u64 = undefined/;"	variable
x132	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x132: u64 = undefined/;"	variable
x133	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x133: u64 = undefined/;"	variable
x134	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x134: u64 = undefined/;"	variable
x135	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x135: u64 = undefined/;"	variable
x136	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x136: u64 = undefined/;"	variable
x137	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x137: u64 = undefined/;"	variable
x138	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x138: u64 = undefined/;"	variable
x139	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x139: u64 = undefined/;"	variable
x140	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x140: u64 = undefined/;"	variable
x141	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x141: u64 = undefined/;"	variable
x142	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x142: u64 = undefined/;"	variable
x143	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x143: u64 = undefined/;"	variable
x144	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x144: u64 = undefined/;"	variable
x145	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x145: u64 = undefined/;"	variable
x146	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x146: u64 = undefined/;"	variable
x147	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x147: u64 = undefined/;"	variable
x148	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x148: u64 = undefined/;"	variable
x149	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x149: u64 = undefined/;"	variable
x150	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x150: u64 = undefined/;"	variable
x151	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x151: u64 = undefined/;"	variable
x152	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x152: u1 = undefined/;"	variable
x153	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x153: u64 = undefined/;"	variable
x154	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x154: u64 = undefined/;"	variable
x155	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x155: u64 = undefined/;"	variable
x156	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x156: u64 = undefined/;"	variable
x157	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x157: u64 = undefined/;"	variable
x158	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x158: u64 = undefined/;"	variable
x159	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x159: u64 = undefined/;"	variable
x160	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x160: u64 = undefined/;"	variable
x161	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x161: u64 = undefined/;"	variable
x162	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x162: u1 = undefined/;"	variable
x163	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x163: u64 = undefined/;"	variable
x164	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x164: u64 = undefined/;"	variable
x165	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x165: u64 = undefined/;"	variable
x166	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x166: u64 = undefined/;"	variable
x167	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x167: u64 = undefined/;"	variable
x168	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x168: u64 = undefined/;"	variable
x169	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x169: u64 = undefined/;"	variable
x170	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x170: u64 = undefined/;"	variable
x171	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x171: u64 = undefined/;"	variable
x172	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x172: u64 = undefined/;"	variable
x173	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x173: u64 = undefined/;"	variable
x174	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x174: u64 = undefined/;"	variable
x175	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x175: u64 = undefined/;"	variable
x176	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x176: u64 = undefined/;"	variable
x177	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x177: u64 = undefined/;"	variable
x178	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x178: u64 = undefined/;"	variable
x179	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x179: u64 = undefined/;"	variable
x180	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x180: u64 = undefined/;"	variable
x181	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x181: u64 = undefined/;"	variable
x182	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x182: u64 = undefined/;"	variable
x183	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x183: u64 = undefined/;"	variable
x184	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x184: u64 = undefined/;"	variable
x185	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x185: u64 = undefined/;"	variable
x186	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x186: u64 = undefined/;"	variable
x187	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x187: u64 = undefined/;"	variable
x188	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x188: u64 = undefined/;"	variable
x189	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x189: u64 = undefined/;"	variable
x190	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x190: u64 = undefined/;"	variable
x191	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x191: u64 = undefined/;"	variable
x192	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x192: u64 = undefined/;"	variable
x193	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x193: u64 = undefined/;"	variable
x194	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x194: u1 = undefined/;"	variable
x195	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x195: u64 = undefined/;"	variable
x196	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x196: u1 = undefined/;"	variable
x197	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x197: u64 = undefined/;"	variable
x198	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x198: u1 = undefined/;"	variable
x199	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x199: u64 = undefined/;"	variable
x1_mask	$ZIGLIB/std/crypto/ghash_polyval.zig	/const x1_mask = @as(u64, 0) -% ((x >> 1) & 1)/;"	constant
x200	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x200: u64 = undefined/;"	variable
x201	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x201: u64 = undefined/;"	variable
x202	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x202: u64 = undefined/;"	variable
x203	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x203: u64 = undefined/;"	variable
x204	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x204: u1 = undefined/;"	variable
x205	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/const x205 = (@as(u64, x204) + @as(u64, x177))/;"	constant
x206	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x206: u64 = undefined/;"	variable
x207	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x207: u1 = undefined/;"	variable
x208	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x208: u64 = undefined/;"	variable
x209	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x209: u1 = undefined/;"	variable
x210	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x210: u64 = undefined/;"	variable
x211	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x211: u1 = undefined/;"	variable
x212	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x212: u64 = undefined/;"	variable
x213	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x213: u1 = undefined/;"	variable
x214	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x214: u64 = undefined/;"	variable
x215	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x215: u1 = undefined/;"	variable
x216	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x216: u64 = undefined/;"	variable
x217	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x217: u64 = undefined/;"	variable
x218	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x218: u64 = undefined/;"	variable
x219	$ZIGLIB/std/crypto/pcurves/secp256k1/secp256k1_scalar_64.zig	/var x219: u64 = undefined/;"	variable
x220	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x220: u64 = undefined/;"	variable
x221	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x221: u64 = undefined/;"	variable
x222	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x222: u64 = undefined/;"	variable
x223	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x223: u64 = undefined/;"	variable
x224	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x224: u64 = undefined/;"	variable
x225	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x225: u64 = undefined/;"	variable
x226	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x226: u64 = undefined/;"	variable
x227	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x227: u64 = undefined/;"	variable
x228	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x228: u64 = undefined/;"	variable
x229	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x229: u64 = undefined/;"	variable
x230	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x230: u64 = undefined/;"	variable
x231	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x231: u64 = undefined/;"	variable
x232	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x232: u64 = undefined/;"	variable
x233	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x233: u64 = undefined/;"	variable
x234	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x234: u64 = undefined/;"	variable
x235	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x235: u64 = undefined/;"	variable
x236	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x236: u64 = undefined/;"	variable
x237	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x237: u64 = undefined/;"	variable
x238	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x238: u64 = undefined/;"	variable
x239	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x239: u64 = undefined/;"	variable
x240	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x240: u64 = undefined/;"	variable
x241	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x241: u64 = undefined/;"	variable
x242	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x242: u64 = undefined/;"	variable
x243	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x243: u64 = undefined/;"	variable
x244	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x244: u64 = undefined/;"	variable
x245	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x245: u64 = undefined/;"	variable
x246	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x246: u64 = undefined/;"	variable
x247	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x247: u64 = undefined/;"	variable
x248	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x248: u64 = undefined/;"	variable
x249	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x249: u64 = undefined/;"	variable
x250	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x250: u64 = undefined/;"	variable
x251	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x251: u64 = undefined/;"	variable
x252	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x252: u64 = undefined/;"	variable
x253	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x253: u64 = undefined/;"	variable
x254	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x254: u64 = undefined/;"	variable
x255	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x255: u64 = undefined/;"	variable
x25519	$ZIGLIB/std/crypto/tls.zig	/x25519 = 0x001D/;"	field
x25519_kp	$ZIGLIB/std/crypto/tls/Client.zig	/const x25519_kp = crypto.dh.X25519.KeyPair.create(x25519_kp_seed) catch |err| switch (err) {$/;"	constant
x25519_kp_seed	$ZIGLIB/std/crypto/tls/Client.zig	/const x25519_kp_seed = random_buffer[64..96].*/;"	constant
x256	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x256: u64 = undefined/;"	variable
x257	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x257: u64 = undefined/;"	variable
x258	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x258: u64 = undefined/;"	variable
x259	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x259: u64 = undefined/;"	variable
x260	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x260: u64 = undefined/;"	variable
x261	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x261: u64 = undefined/;"	variable
x262	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x262: u64 = undefined/;"	variable
x263	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x263: u64 = undefined/;"	variable
x264	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x264: u64 = undefined/;"	variable
x265	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x265: u64 = undefined/;"	variable
x266	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x266: u64 = undefined/;"	variable
x267	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x267: u64 = undefined/;"	variable
x268	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x268: u64 = undefined/;"	variable
x269	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x269: u64 = undefined/;"	variable
x270	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x270: u64 = undefined/;"	variable
x271	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x271: u64 = undefined/;"	variable
x272	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x272: u64 = undefined/;"	variable
x273	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x273: u64 = undefined/;"	variable
x274	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x274: u64 = undefined/;"	variable
x275	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x275: u64 = undefined/;"	variable
x276	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x276: u64 = undefined/;"	variable
x277	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x277: u64 = undefined/;"	variable
x278	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x278: u64 = undefined/;"	variable
x279	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x279: u64 = undefined/;"	variable
x280	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x280: u64 = undefined/;"	variable
x281	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x281: u64 = undefined/;"	variable
x282	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x282: u64 = undefined/;"	variable
x283	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x283: u64 = undefined/;"	variable
x284	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x284: u64 = undefined/;"	variable
x285	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x285: u64 = undefined/;"	variable
x286	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x286: u64 = undefined/;"	variable
x287	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x287: u64 = undefined/;"	variable
x288	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x288: u64 = undefined/;"	variable
x289	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x289: u64 = undefined/;"	variable
x290	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x290: u64 = undefined/;"	variable
x291	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x291: u64 = undefined/;"	variable
x292	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x292: u64 = undefined/;"	variable
x293	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x293: u64 = undefined/;"	variable
x294	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x294: u64 = undefined/;"	variable
x295	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x295: u64 = undefined/;"	variable
x296	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x296: u64 = undefined/;"	variable
x297	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x297: u64 = undefined/;"	variable
x298	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x298: u64 = undefined/;"	variable
x299	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x299: u64 = undefined/;"	variable
x2_copy	$ZIGLIB/std/crypto/25519/field.zig	/var x2_copy = x2/;"	variable
x2_mask	$ZIGLIB/std/crypto/ghash_polyval.zig	/const x2_mask = @as(u64, 0) -% ((x >> 2) & 1)/;"	constant
x300	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x300: u64 = undefined/;"	variable
x301	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x301: u64 = undefined/;"	variable
x302	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x302: u64 = undefined/;"	variable
x303	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x303: u64 = undefined/;"	variable
x304	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x304: u64 = undefined/;"	variable
x305	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x305: u64 = undefined/;"	variable
x306	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x306: u64 = undefined/;"	variable
x307	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x307: u64 = undefined/;"	variable
x308	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x308: u64 = undefined/;"	variable
x309	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x309: u64 = undefined/;"	variable
x310	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x310: u64 = undefined/;"	variable
x311	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x311: u64 = undefined/;"	variable
x312	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x312: u64 = undefined/;"	variable
x313	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x313: u64 = undefined/;"	variable
x314	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x314: u64 = undefined/;"	variable
x315	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x315: u64 = undefined/;"	variable
x316	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x316: u64 = undefined/;"	variable
x317	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x317: u64 = undefined/;"	variable
x318	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x318: u64 = undefined/;"	variable
x319	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x319: u64 = undefined/;"	variable
x320	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x320: u64 = undefined/;"	variable
x321	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x321: u64 = undefined/;"	variable
x322	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x322: u64 = undefined/;"	variable
x323	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x323: u64 = undefined/;"	variable
x324	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x324: u64 = undefined/;"	variable
x325	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x325: u64 = undefined/;"	variable
x326	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x326: u64 = undefined/;"	variable
x327	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x327: u64 = undefined/;"	variable
x328	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x328: u64 = undefined/;"	variable
x329	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x329: u64 = undefined/;"	variable
x330	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x330: u64 = undefined/;"	variable
x331	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x331: u64 = undefined/;"	variable
x332	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x332: u1 = undefined/;"	variable
x333	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x333: u64 = undefined/;"	variable
x334	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x334: u1 = undefined/;"	variable
x335	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x335: u64 = undefined/;"	variable
x336	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x336: u1 = undefined/;"	variable
x337	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x337: u64 = undefined/;"	variable
x338	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x338: u64 = undefined/;"	variable
x339	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x339: u64 = undefined/;"	variable
x340	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x340: u64 = undefined/;"	variable
x341	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x341: u64 = undefined/;"	variable
x342	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x342: u64 = undefined/;"	variable
x343	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x343: u64 = undefined/;"	variable
x344	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x344: u64 = undefined/;"	variable
x345	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x345: u64 = undefined/;"	variable
x346	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x346: u64 = undefined/;"	variable
x347	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x347: u64 = undefined/;"	variable
x348	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x348: u64 = undefined/;"	variable
x349	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x349: u64 = undefined/;"	variable
x350	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x350: u64 = undefined/;"	variable
x351	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x351: u64 = undefined/;"	variable
x352	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x352: u1 = undefined/;"	variable
x353	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x353: u64 = undefined/;"	variable
x354	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x354: u1 = undefined/;"	variable
x355	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x355: u64 = undefined/;"	variable
x356	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x356: u64 = undefined/;"	variable
x357	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x357: u64 = undefined/;"	variable
x358	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x358: u64 = undefined/;"	variable
x359	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x359: u64 = undefined/;"	variable
x360	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x360: u64 = undefined/;"	variable
x361	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x361: u64 = undefined/;"	variable
x362	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x362: u64 = undefined/;"	variable
x363	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x363: u64 = undefined/;"	variable
x364	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x364: u64 = undefined/;"	variable
x365	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x365: u64 = undefined/;"	variable
x366	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x366: u64 = undefined/;"	variable
x367	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x367: u64 = undefined/;"	variable
x368	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x368: u64 = undefined/;"	variable
x369	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x369: u64 = undefined/;"	variable
x370	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x370: u64 = undefined/;"	variable
x371	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x371: u64 = undefined/;"	variable
x372	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x372: u64 = undefined/;"	variable
x373	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x373: u64 = undefined/;"	variable
x374	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x374: u64 = undefined/;"	variable
x375	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x375: u64 = undefined/;"	variable
x376	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x376: u1 = undefined/;"	variable
x377	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x377: u64 = undefined/;"	variable
x378	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x378: u64 = undefined/;"	variable
x379	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x379: u64 = undefined/;"	variable
x380	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x380: u64 = undefined/;"	variable
x381	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x381: u64 = undefined/;"	variable
x382	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x382: u64 = undefined/;"	variable
x383	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x383: u64 = undefined/;"	variable
x384	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x384: u64 = undefined/;"	variable
x385	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x385: u64 = undefined/;"	variable
x386	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x386: u64 = undefined/;"	variable
x387	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x387: u64 = undefined/;"	variable
x388	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x388: u64 = undefined/;"	variable
x389	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x389: u64 = undefined/;"	variable
x390	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x390: u64 = undefined/;"	variable
x391	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x391: u64 = undefined/;"	variable
x392	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x392: u64 = undefined/;"	variable
x393	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x393: u64 = undefined/;"	variable
x394	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x394: u64 = undefined/;"	variable
x395	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x395: u64 = undefined/;"	variable
x396	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x396: u64 = undefined/;"	variable
x397	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x397: u64 = undefined/;"	variable
x398	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x398: u64 = undefined/;"	variable
x399	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x399: u64 = undefined/;"	variable
x3AxB	$ZIGLIB/std/crypto/pcurves/p384.zig	/const x3AxB = x.sq().mul(x).sub(x).sub(x).sub(x).add(B)/;"	constant
x3_mask	$ZIGLIB/std/crypto/ghash_polyval.zig	/const x3_mask = @as(u64, 0) -% ((x >> 3) & 1)/;"	constant
x400	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x400: u64 = undefined/;"	variable
x400Address	$ZIGLIB/std/crypto/Certificate.zig	/x400Address = 3/;"	field
x401	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x401: u64 = undefined/;"	variable
x402	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x402: u64 = undefined/;"	variable
x403	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x403: u64 = undefined/;"	variable
x404	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x404: u64 = undefined/;"	variable
x405	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x405: u64 = undefined/;"	variable
x406	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x406: u64 = undefined/;"	variable
x407	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x407: u64 = undefined/;"	variable
x408	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x408: u64 = undefined/;"	variable
x409	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x409: u64 = undefined/;"	variable
x410	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x410: u64 = undefined/;"	variable
x411	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x411: u64 = undefined/;"	variable
x412	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x412: u64 = undefined/;"	variable
x413	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x413: u64 = undefined/;"	variable
x414	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x414: u64 = undefined/;"	variable
x415	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x415: u64 = undefined/;"	variable
x416	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x416: u64 = undefined/;"	variable
x417	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x417: u64 = undefined/;"	variable
x418	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x418: u64 = undefined/;"	variable
x419	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x419: u64 = undefined/;"	variable
x420	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x420: u64 = undefined/;"	variable
x421	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x421: u64 = undefined/;"	variable
x422	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x422: u64 = undefined/;"	variable
x423	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x423: u64 = undefined/;"	variable
x424	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x424: u64 = undefined/;"	variable
x425	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x425: u64 = undefined/;"	variable
x426	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x426: u64 = undefined/;"	variable
x427	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x427: u64 = undefined/;"	variable
x428	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x428: u64 = undefined/;"	variable
x429	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x429: u64 = undefined/;"	variable
x430	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x430: u64 = undefined/;"	variable
x431	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x431: u64 = undefined/;"	variable
x432	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x432: u64 = undefined/;"	variable
x433	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x433: u64 = undefined/;"	variable
x434	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x434: u64 = undefined/;"	variable
x435	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x435: u64 = undefined/;"	variable
x436	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x436: u64 = undefined/;"	variable
x437	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x437: u64 = undefined/;"	variable
x438	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x438: u1 = undefined/;"	variable
x439	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x439: u64 = undefined/;"	variable
x440	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x440: u1 = undefined/;"	variable
x441	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x441: u64 = undefined/;"	variable
x442	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x442: u64 = undefined/;"	variable
x443	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x443: u64 = undefined/;"	variable
x444	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x444: u64 = undefined/;"	variable
x445	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x445: u64 = undefined/;"	variable
x446	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x446: u64 = undefined/;"	variable
x447	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x447: u64 = undefined/;"	variable
x448	$ZIGLIB/std/crypto/tls.zig	/x448 = 0x001E/;"	field
x449	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x449: u64 = undefined/;"	variable
x450	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x450: u1 = undefined/;"	variable
x451	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x451: u64 = undefined/;"	variable
x452	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x452: u1 = undefined/;"	variable
x453	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/const x453 = (@as(u64, x452) + @as(u64, x413))/;"	constant
x454	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x454: u64 = undefined/;"	variable
x455	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x455: u1 = undefined/;"	variable
x456	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x456: u64 = undefined/;"	variable
x457	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x457: u1 = undefined/;"	variable
x458	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x458: u64 = undefined/;"	variable
x459	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x459: u1 = undefined/;"	variable
x460	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x460: u64 = undefined/;"	variable
x461	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x461: u1 = undefined/;"	variable
x462	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x462: u64 = undefined/;"	variable
x463	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x463: u1 = undefined/;"	variable
x464	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x464: u64 = undefined/;"	variable
x465	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x465: u1 = undefined/;"	variable
x466	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x466: u64 = undefined/;"	variable
x467	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x467: u1 = undefined/;"	variable
x468	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x468: u64 = undefined/;"	variable
x469	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x469: u64 = undefined/;"	variable
x470	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x470: u64 = undefined/;"	variable
x471	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x471: u64 = undefined/;"	variable
x472	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x472: u64 = undefined/;"	variable
x473	$ZIGLIB/std/crypto/pcurves/p384/p384_scalar_64.zig	/var x473: u64 = undefined/;"	variable
x4x5x14x15	$ZIGLIB/std/crypto/salsa20.zig	/const x4x5x14x15 = Lane{ diag3[0], diag0[1], diag3[2], diag0[3] }/;"	constant
x86BitRmw	$ZIGLIB/std/atomic/Atomic.zig	/inline fn x86BitRmw(self: *Self, comptime op: BitRmwOp, bit: Bit, comptime ordering: Ordering) u1 {$/;"	function
x86_64	$ZIGLIB/std/target/x86.zig	/pub const x86_64 = CpuModel{$/;"	constant
x86_64_v2	$ZIGLIB/std/target/x86.zig	/pub const x86_64_v2 = CpuModel{$/;"	constant
x86_64_v3	$ZIGLIB/std/target/x86.zig	/pub const x86_64_v3 = CpuModel{$/;"	constant
x86_64_v4	$ZIGLIB/std/target/x86.zig	/pub const x86_64_v4 = CpuModel{$/;"	constant
x86_AVX512_STATE	$ZIGLIB/std/c/darwin/x86_64.zig	/^pub const x86_AVX512_STATE = (x86_AVX512_STATE32 + 2)/;"	constant
x86_AVX512_STATE32	$ZIGLIB/std/c/darwin/x86_64.zig	/^pub const x86_AVX512_STATE32 = 19/;"	constant
x86_AVX512_STATE64	$ZIGLIB/std/c/darwin/x86_64.zig	/^pub const x86_AVX512_STATE64 = (x86_AVX512_STATE32 + 1)/;"	constant
x86_AVX_STATE	$ZIGLIB/std/c/darwin/x86_64.zig	/^pub const x86_AVX_STATE = (x86_AVX_STATE32 + 2)/;"	constant
x86_AVX_STATE32	$ZIGLIB/std/c/darwin/x86_64.zig	/^pub const x86_AVX_STATE32 = 16/;"	constant
x86_AVX_STATE64	$ZIGLIB/std/c/darwin/x86_64.zig	/^pub const x86_AVX_STATE64 = (x86_AVX_STATE32 + 1)/;"	constant
x86_DEBUG_STATE	$ZIGLIB/std/c/darwin/x86_64.zig	/^pub const x86_DEBUG_STATE = 12/;"	constant
x86_DEBUG_STATE32	$ZIGLIB/std/c/darwin/x86_64.zig	/^pub const x86_DEBUG_STATE32 = 10/;"	constant
x86_DEBUG_STATE64	$ZIGLIB/std/c/darwin/x86_64.zig	/^pub const x86_DEBUG_STATE64 = 11/;"	constant
x86_EXCEPTION_STATE	$ZIGLIB/std/c/darwin/x86_64.zig	/^pub const x86_EXCEPTION_STATE = 9/;"	constant
x86_EXCEPTION_STATE32	$ZIGLIB/std/c/darwin/x86_64.zig	/^pub const x86_EXCEPTION_STATE32 = 3/;"	constant
x86_EXCEPTION_STATE64	$ZIGLIB/std/c/darwin/x86_64.zig	/^pub const x86_EXCEPTION_STATE64 = 6/;"	constant
x86_FLOAT_STATE	$ZIGLIB/std/c/darwin/x86_64.zig	/^pub const x86_FLOAT_STATE = 8/;"	constant
x86_FLOAT_STATE32	$ZIGLIB/std/c/darwin/x86_64.zig	/^pub const x86_FLOAT_STATE32 = 2/;"	constant
x86_FLOAT_STATE64	$ZIGLIB/std/c/darwin/x86_64.zig	/^pub const x86_FLOAT_STATE64 = 5/;"	constant
x86_INSTRUCTION_STATE	$ZIGLIB/std/c/darwin/x86_64.zig	/^pub const x86_INSTRUCTION_STATE = 24/;"	constant
x86_LAST_BRANCH_STATE	$ZIGLIB/std/c/darwin/x86_64.zig	/^pub const x86_LAST_BRANCH_STATE = 25/;"	constant
x86_PAGEIN_STATE	$ZIGLIB/std/c/darwin/x86_64.zig	/^pub const x86_PAGEIN_STATE = 22/;"	constant
x86_THREAD_FULL_STATE64	$ZIGLIB/std/c/darwin/x86_64.zig	/^pub const x86_THREAD_FULL_STATE64 = 23/;"	constant
x86_THREAD_STATE	$ZIGLIB/std/c/darwin/x86_64.zig	/^pub const x86_THREAD_STATE = 7/;"	constant
x86_THREAD_STATE32	$ZIGLIB/std/c/darwin/x86_64.zig	/^pub const x86_THREAD_STATE32 = 1/;"	constant
x86_THREAD_STATE64	$ZIGLIB/std/c/darwin/x86_64.zig	/^pub const x86_THREAD_STATE64 = 4/;"	constant
x8x9x2x3	$ZIGLIB/std/crypto/salsa20.zig	/const x8x9x2x3 = Lane{ diag2[0], diag3[1], diag2[2], diag3[3] }/;"	constant
x_copy	$ZIGLIB/std/math/big/int.zig	/const x_copy = if (rma.limbs.ptr == x.limbs.ptr) blk: {$/;"	constant
x_hi	$ZIGLIB/std/crypto/ghash_polyval.zig	/const x_hi = @truncate(u64, x >> 64)/;"	constant
x_max	$ZIGLIB/std/crypto/aes_ocb.zig	/const x_max = if (full_blocks > 0) math.log2_int(usize, full_blocks) else 0/;"	constant
x_minus_one	$ZIGLIB/std/crypto/25519/edwards25519.zig	/const x_minus_one = x.sub(Fe.one)/;"	constant
x_neg	$ZIGLIB/std/crypto/25519/edwards25519.zig	/const x_neg = x.neg()/;"	constant
x_norm	$ZIGLIB/std/math/big/int.zig	/const x_norm = x/;"	constant
x_plus_one	$ZIGLIB/std/crypto/25519/edwards25519.zig	/const x_plus_one = x.add(Fe.one)/;"	constant
x_plus_one_y_inv	$ZIGLIB/std/crypto/25519/edwards25519.zig	/const x_plus_one_y_inv = x_plus_one.mul(y).invert()/;"	constant
x_shifted	$ZIGLIB/std/math/log2.zig	/var x_shifted = x/;"	variable
x_sign	$ZIGLIB/std/crypto/25519/edwards25519.zig	/const x_sign = s[31] >> 7/;"	constant
x_slice	$ZIGLIB/std/hash_map.zig	/const x_slice = mem.sliceTo(@ptrCast([*:0]const u8, self.bytes.items.ptr) + x, 0)/;"	constant
x_sqrtm1	$ZIGLIB/std/crypto/25519/ristretto255.zig	/const x_sqrtm1 = x.mul(Fe.sqrtm1)/;"	constant
x_state	$ZIGLIB/std/rand/RomuTrio.zig	/^x_state: u64/;"	field
x_trailing	$ZIGLIB/std/math/big/int.zig	/const x_trailing = for (x.limbs[0..x.len]) |xi, i| {$/;"	constant
x_z_inv	$ZIGLIB/std/crypto/25519/ristretto255.zig	/const x_z_inv = x.mul(z_inv)/;"	constant
xadd	$ZIGLIB/std/os/linux/bpf.zig	/pub fn xadd(dst: Reg, src: Reg) Insn {$/;"	function
xcore	$ZIGLIB/std/target.zig	/xcore/;"	field
xcr0_eax	$ZIGLIB/std/zig/system/x86.zig	/const xcr0_eax = if (has_xsave and has_avx) getXCR0() else 0/;"	constant
xctx	$ZIGLIB/std/crypto/25519/edwards25519.zig	/var xctx = ctx/;"	variable
xctx_len_u8	$ZIGLIB/std/crypto/25519/edwards25519.zig	/var xctx_len_u8 = [1]u8{@intCast(u8, xctx.len)}/;"	variable
xderef	$ZIGLIB/std/dwarf/OP.zig	/^pub const xderef = 0x18/;"	constant
xderef_size	$ZIGLIB/std/dwarf/OP.zig	/^pub const xderef_size = 0x95/;"	constant
xderef_type	$ZIGLIB/std/dwarf/OP.zig	/^pub const xderef_type = 0xa7/;"	constant
xdp_adjust_head	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const xdp_adjust_head = @intToPtr(fn (xdp_md: *kern.XdpMd, delta: c_int) c_long, 44)/;"	constant
xdp_adjust_meta	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const xdp_adjust_meta = @intToPtr(fn (xdp_md: *kern.XdpMd, delta: c_int) c_long, 54)/;"	constant
xdp_adjust_tail	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const xdp_adjust_tail = @intToPtr(fn (xdp_md: *kern.XdpMd, delta: c_int) c_long, 65)/;"	constant
xdp_cpumap	$ZIGLIB/std/os/linux/bpf.zig	/xdp_cpumap/;"	field
xdp_desc	$ZIGLIB/std/os/linux.zig	/^pub const xdp_desc = extern struct {$/;"	struct
xdp_devmap	$ZIGLIB/std/os/linux/bpf.zig	/xdp_devmap/;"	field
xdp_mmap_offsets	$ZIGLIB/std/os/linux.zig	/^pub const xdp_mmap_offsets = extern struct {$/;"	struct
xdp_options	$ZIGLIB/std/os/linux.zig	/^pub const xdp_options = extern struct {$/;"	struct
xdp_output	$ZIGLIB/std/os/linux/bpf/helpers.zig	/^pub const xdp_output = @intToPtr(fn (ctx: ?*anyopaque, map: *const kern.MapDef, flags: u64, data: ?*anyopaque, size: u64) c_long, 121)/;"	constant
xdp_ring_offset	$ZIGLIB/std/os/linux.zig	/^pub const xdp_ring_offset = extern struct {$/;"	struct
xdp_statistics	$ZIGLIB/std/os/linux.zig	/^pub const xdp_statistics = extern struct {$/;"	struct
xdp_umem_reg	$ZIGLIB/std/os/linux.zig	/^pub const xdp_umem_reg = extern struct {$/;"	struct
xfield_order_s	$ZIGLIB/std/crypto/25519/scalar.zig	/const xfield_order_s = @as(u16, field_order_s[i])/;"	constant
xfpustate	$ZIGLIB/std/c/freebsd.zig	/xfpustate: u64/;"	field
xfpustate_len	$ZIGLIB/std/c/freebsd.zig	/xfpustate_len: u64/;"	field
xgene1	$ZIGLIB/std/target/aarch64.zig	/pub const xgene1 = CpuModel{$/;"	constant
xgot	$ZIGLIB/std/target/mips.zig	/xgot/;"	field
xmega	$ZIGLIB/std/target/avr.zig	/xmega/;"	field
xmega3	$ZIGLIB/std/target/avr.zig	/xmega3/;"	field
xmegau	$ZIGLIB/std/target/avr.zig	/xmegau/;"	field
xmontToYmont	$ZIGLIB/std/crypto/25519/edwards25519.zig	/fn xmontToYmont(x: Fe) NotSquareError!Fe {$/;"	function
xnack	$ZIGLIB/std/target/amdgpu.zig	/xnack/;"	field
xnack_support	$ZIGLIB/std/target/amdgpu.zig	/xnack_support/;"	field
xoff	$ZIGLIB/std/ascii.zig	/pub const xoff = dc3/;"	constant
xor256	$ZIGLIB/std/crypto/ghash_polyval.zig	/inline fn xor256(x: *I256, y: I256) void {$/;"	function
xorBlocks	$ZIGLIB/std/crypto/aes_ocb.zig	/^inline fn xorBlocks(x: Block, y: Block) Block {$/;"	function
xorBytes	$ZIGLIB/std/crypto/aes/soft.zig	/pub inline fn xorBytes(block: Block, bytes: *const [16]u8) [16]u8 {$/;"	function
xorWide	$ZIGLIB/std/crypto/aes/soft.zig	/pub fn xorWide(ctx: Self, comptime count: usize, dst: *[16 * count]u8, src: *const [16 * count]u8, counters: [16 * count]u8) void {$/;"	function
xorWith	$ZIGLIB/std/enums.zig	/pub fn xorWith(self: Self, other: Self) Self {$/;"	function
xor_output	$ZIGLIB/std/hash/crc.zig	/xor_output: W/;"	field
xor_s	$ZIGLIB/std/rand/Pcg.zig	/const xor_s = @truncate(u32, ((l >> 18) ^ l) >> 27)/;"	constant
xorshift	$ZIGLIB/std/treap.zig	/xorshift: usize = 0/;"	field
xout	$ZIGLIB/std/crypto/salsa20.zig	/var xout = out[i..]/;"	variable
xsave	$ZIGLIB/std/target/x86.zig	/xsave/;"	field
xsavec	$ZIGLIB/std/target/x86.zig	/xsavec/;"	field
xsaveopt	$ZIGLIB/std/target/x86.zig	/xsaveopt/;"	field
xsaves	$ZIGLIB/std/target/x86.zig	/xsaves/;"	field
xscale	$ZIGLIB/std/target/arm.zig	/xscale/;"	field
xskmap	$ZIGLIB/std/os/linux/bpf.zig	/xskmap/;"	field
xstatus	$ZIGLIB/std/c/solaris.zig	/xstatus: u32/;"	field
xy00	$ZIGLIB/std/crypto/25519/scalar.zig	/const xy00 = @as(u128, qdiv0) * @as(u128, m0)/;"	constant
xy000	$ZIGLIB/std/crypto/25519/scalar.zig	/const xy000 = @as(u128, x.limbs[0]) * @as(u128, y.limbs[0])/;"	constant
xy001	$ZIGLIB/std/crypto/25519/scalar.zig	/const xy001 = @as(u128, q0) * @as(u128, mu0)/;"	constant
xy01	$ZIGLIB/std/crypto/25519/scalar.zig	/const xy01 = @as(u128, qdiv0) * @as(u128, m1)/;"	constant
xy010	$ZIGLIB/std/crypto/25519/scalar.zig	/const xy010 = @as(u128, x.limbs[0]) * @as(u128, y.limbs[1])/;"	constant
xy011	$ZIGLIB/std/crypto/25519/scalar.zig	/const xy011 = @as(u128, q0) * @as(u128, mu1)/;"	constant
xy02	$ZIGLIB/std/crypto/25519/scalar.zig	/const xy02 = @as(u128, qdiv0) * @as(u128, m2)/;"	constant
xy020	$ZIGLIB/std/crypto/25519/scalar.zig	/const xy020 = @as(u128, x.limbs[0]) * @as(u128, y.limbs[2])/;"	constant
xy021	$ZIGLIB/std/crypto/25519/scalar.zig	/const xy021 = @as(u128, q0) * @as(u128, mu2)/;"	constant
xy03	$ZIGLIB/std/crypto/25519/scalar.zig	/const xy03 = @as(u128, qdiv0) * @as(u128, m3)/;"	constant
xy030	$ZIGLIB/std/crypto/25519/scalar.zig	/const xy030 = @as(u128, x.limbs[0]) * @as(u128, y.limbs[3])/;"	constant
xy031	$ZIGLIB/std/crypto/25519/scalar.zig	/const xy031 = @as(u128, q0) * @as(u128, mu3)/;"	constant
xy04	$ZIGLIB/std/crypto/25519/scalar.zig	/const xy04 = @as(u128, qdiv0) * @as(u128, m4)/;"	constant
xy040	$ZIGLIB/std/crypto/25519/scalar.zig	/const xy040 = @as(u128, x.limbs[0]) * @as(u128, y.limbs[4])/;"	constant
xy041	$ZIGLIB/std/crypto/25519/scalar.zig	/const xy041 = @as(u128, q0) * @as(u128, mu4)/;"	constant
xy10	$ZIGLIB/std/crypto/25519/scalar.zig	/const xy10 = @as(u128, qdiv1) * @as(u128, m0)/;"	constant
xy100	$ZIGLIB/std/crypto/25519/scalar.zig	/const xy100 = @as(u128, x.limbs[1]) * @as(u128, y.limbs[0])/;"	constant
xy101	$ZIGLIB/std/crypto/25519/scalar.zig	/const xy101 = @as(u128, q1) * @as(u128, mu0)/;"	constant
xy11	$ZIGLIB/std/crypto/25519/scalar.zig	/const xy11 = @as(u128, qdiv1) * @as(u128, m1)/;"	constant
xy110	$ZIGLIB/std/crypto/25519/scalar.zig	/const xy110 = @as(u128, x.limbs[1]) * @as(u128, y.limbs[1])/;"	constant
xy111	$ZIGLIB/std/crypto/25519/scalar.zig	/const xy111 = @as(u128, q1) * @as(u128, mu1)/;"	constant
xy12	$ZIGLIB/std/crypto/25519/scalar.zig	/const xy12 = @as(u128, qdiv1) * @as(u128, m2)/;"	constant
xy120	$ZIGLIB/std/crypto/25519/scalar.zig	/const xy120 = @as(u128, x.limbs[1]) * @as(u128, y.limbs[2])/;"	constant
xy121	$ZIGLIB/std/crypto/25519/scalar.zig	/const xy121 = @as(u128, q1) * @as(u128, mu2)/;"	constant
xy13	$ZIGLIB/std/crypto/25519/scalar.zig	/const xy13 = @as(u128, qdiv1) * @as(u128, m3)/;"	constant
xy130	$ZIGLIB/std/crypto/25519/scalar.zig	/const xy130 = @as(u128, x.limbs[1]) * @as(u128, y.limbs[3])/;"	constant
xy131	$ZIGLIB/std/crypto/25519/scalar.zig	/const xy131 = @as(u128, q1) * @as(u128, mu3)/;"	constant
xy14	$ZIGLIB/std/crypto/25519/scalar.zig	/const xy14 = @as(u128, q1) * @as(u128, mu4)/;"	constant
xy140	$ZIGLIB/std/crypto/25519/scalar.zig	/const xy140 = @as(u128, x.limbs[1]) * @as(u128, y.limbs[4])/;"	constant
xy20	$ZIGLIB/std/crypto/25519/scalar.zig	/const xy20 = @as(u128, qdiv2) * @as(u128, m0)/;"	constant
xy200	$ZIGLIB/std/crypto/25519/scalar.zig	/const xy200 = @as(u128, x.limbs[2]) * @as(u128, y.limbs[0])/;"	constant
xy201	$ZIGLIB/std/crypto/25519/scalar.zig	/const xy201 = @as(u128, q2) * @as(u128, mu0)/;"	constant
xy21	$ZIGLIB/std/crypto/25519/scalar.zig	/const xy21 = @as(u128, qdiv2) * @as(u128, m1)/;"	constant
xy210	$ZIGLIB/std/crypto/25519/scalar.zig	/const xy210 = @as(u128, x.limbs[2]) * @as(u128, y.limbs[1])/;"	constant
xy211	$ZIGLIB/std/crypto/25519/scalar.zig	/const xy211 = @as(u128, q2) * @as(u128, mu1)/;"	constant
xy22	$ZIGLIB/std/crypto/25519/scalar.zig	/const xy22 = @as(u128, qdiv2) * @as(u128, m2)/;"	constant
xy220	$ZIGLIB/std/crypto/25519/scalar.zig	/const xy220 = @as(u128, x.limbs[2]) * @as(u128, y.limbs[2])/;"	constant
xy221	$ZIGLIB/std/crypto/25519/scalar.zig	/const xy221 = @as(u128, q2) * @as(u128, mu2)/;"	constant
xy23	$ZIGLIB/std/crypto/25519/scalar.zig	/const xy23 = @as(u128, q2) * @as(u128, mu3)/;"	constant
xy230	$ZIGLIB/std/crypto/25519/scalar.zig	/const xy230 = @as(u128, x.limbs[2]) * @as(u128, y.limbs[3])/;"	constant
xy24	$ZIGLIB/std/crypto/25519/scalar.zig	/const xy24 = @as(u128, q2) * @as(u128, mu4)/;"	constant
xy240	$ZIGLIB/std/crypto/25519/scalar.zig	/const xy240 = @as(u128, x.limbs[2]) * @as(u128, y.limbs[4])/;"	constant
xy30	$ZIGLIB/std/crypto/25519/scalar.zig	/const xy30 = @as(u128, qdiv3) * @as(u128, m0)/;"	constant
xy300	$ZIGLIB/std/crypto/25519/scalar.zig	/const xy300 = @as(u128, x.limbs[3]) * @as(u128, y.limbs[0])/;"	constant
xy301	$ZIGLIB/std/crypto/25519/scalar.zig	/const xy301 = @as(u128, q3) * @as(u128, mu0)/;"	constant
xy31	$ZIGLIB/std/crypto/25519/scalar.zig	/const xy31 = @as(u128, qdiv3) * @as(u128, m1)/;"	constant
xy310	$ZIGLIB/std/crypto/25519/scalar.zig	/const xy310 = @as(u128, x.limbs[3]) * @as(u128, y.limbs[1])/;"	constant
xy311	$ZIGLIB/std/crypto/25519/scalar.zig	/const xy311 = @as(u128, q3) * @as(u128, mu1)/;"	constant
xy32	$ZIGLIB/std/crypto/25519/scalar.zig	/const xy32 = @as(u128, q3) * @as(u128, mu2)/;"	constant
xy320	$ZIGLIB/std/crypto/25519/scalar.zig	/const xy320 = @as(u128, x.limbs[3]) * @as(u128, y.limbs[2])/;"	constant
xy33	$ZIGLIB/std/crypto/25519/scalar.zig	/const xy33 = @as(u128, q3) * @as(u128, mu3)/;"	constant
xy330	$ZIGLIB/std/crypto/25519/scalar.zig	/const xy330 = @as(u128, x.limbs[3]) * @as(u128, y.limbs[3])/;"	constant
xy34	$ZIGLIB/std/crypto/25519/scalar.zig	/const xy34 = @as(u128, q3) * @as(u128, mu4)/;"	constant
xy340	$ZIGLIB/std/crypto/25519/scalar.zig	/const xy340 = @as(u128, x.limbs[3]) * @as(u128, y.limbs[4])/;"	constant
xy40	$ZIGLIB/std/crypto/25519/scalar.zig	/const xy40 = @as(u128, qdiv4) * @as(u128, m0)/;"	constant
xy400	$ZIGLIB/std/crypto/25519/scalar.zig	/const xy400 = @as(u128, x.limbs[4]) * @as(u128, y.limbs[0])/;"	constant
xy401	$ZIGLIB/std/crypto/25519/scalar.zig	/const xy401 = @as(u128, q4) * @as(u128, mu0)/;"	constant
xy41	$ZIGLIB/std/crypto/25519/scalar.zig	/const xy41 = @as(u128, q4) * @as(u128, mu1)/;"	constant
xy410	$ZIGLIB/std/crypto/25519/scalar.zig	/const xy410 = @as(u128, x.limbs[4]) * @as(u128, y.limbs[1])/;"	constant
xy42	$ZIGLIB/std/crypto/25519/scalar.zig	/const xy42 = @as(u128, q4) * @as(u128, mu2)/;"	constant
xy420	$ZIGLIB/std/crypto/25519/scalar.zig	/const xy420 = @as(u128, x.limbs[4]) * @as(u128, y.limbs[2])/;"	constant
xy43	$ZIGLIB/std/crypto/25519/scalar.zig	/const xy43 = @as(u128, q4) * @as(u128, mu3)/;"	constant
xy430	$ZIGLIB/std/crypto/25519/scalar.zig	/const xy430 = @as(u128, x.limbs[4]) * @as(u128, y.limbs[3])/;"	constant
xy44	$ZIGLIB/std/crypto/25519/scalar.zig	/const xy44 = @as(u128, q4) * @as(u128, mu4)/;"	constant
xy440	$ZIGLIB/std/crypto/25519/scalar.zig	/const xy440 = @as(u128, x.limbs[4]) * @as(u128, y.limbs[4])/;"	constant
xy_trailing	$ZIGLIB/std/math/big/int.zig	/const xy_trailing = math.min(x_trailing, y_trailing)/;"	constant
xy_z	$ZIGLIB/compiler_rt/fma.zig	/const xy_z = xy + z/;"	constant
y_copy	$ZIGLIB/std/math/big/int.zig	/const y_copy = if (rma.limbs.ptr == y.limbs.ptr) blk: {$/;"	constant
y_hi	$ZIGLIB/std/crypto/ghash_polyval.zig	/const y_hi = @truncate(u64, y >> 64)/;"	constant
y_is_odd	$ZIGLIB/std/crypto/pcurves/secp256k1.zig	/const y_is_odd = (encoding_type == 3)/;"	constant
y_neg	$ZIGLIB/std/crypto/25519/edwards25519.zig	/const y_neg = elr.y.neg()/;"	constant
y_sign	$ZIGLIB/std/crypto/25519/edwards25519.zig	/const y_sign = !elr.not_square/;"	constant
y_state	$ZIGLIB/std/rand/RomuTrio.zig	/^y_state: u64/;"	field
y_trailing	$ZIGLIB/std/math/big/int.zig	/const y_trailing = for (y.limbs[0..y.len]) |yi, i| {$/;"	constant
year	$ZIGLIB/std/time/epoch.zig	/year: Year/;"	field
year_day	$ZIGLIB/std/time/epoch.zig	/var year_day = self.day/;"	variable
year_size	$ZIGLIB/std/time/epoch.zig	/const year_size = getDaysInYear(year)/;"	constant
yellow	$ZIGLIB/std/os/uefi/protocols/simple_text_output_protocol.zig	/pub const yellow: u8 = 0x0e/;"	constant
yield	$ZIGLIB/std/event/loop.zig	/pub fn yield(self: *Loop) void {$/;"	function
yneg	$ZIGLIB/std/crypto/25519/ristretto255.zig	/const yneg = y.neg()/;"	constant
yonah	$ZIGLIB/std/target/x86.zig	/pub const yonah = CpuModel{$/;"	constant
z196	$ZIGLIB/std/target/s390x.zig	/pub const z196 = CpuModel{$/;"	constant
zEC12	$ZIGLIB/std/target/s390x.zig	/pub const zEC12 = CpuModel{$/;"	constant
z_batch	$ZIGLIB/std/crypto/25519/ed25519.zig	/var z_batch: [count]Curve.scalar.CompressedScalar = undefined/;"	variable
z_inv	$ZIGLIB/std/crypto/25519/ristretto255.zig	/const z_inv = den1.mul(den2).mul(p.t)/;"	constant
z_state	$ZIGLIB/std/rand/RomuTrio.zig	/^z_state: u64/;"	field
zbkb	$ZIGLIB/std/target/riscv.zig	/zbkb/;"	field
zbkc	$ZIGLIB/std/target/riscv.zig	/zbkc/;"	field
zbkx	$ZIGLIB/std/target/riscv.zig	/zbkx/;"	field
zcz_fp_workaround	$ZIGLIB/std/target/aarch64.zig	/zcz_fp_workaround/;"	field
zcz_gp	$ZIGLIB/std/target/aarch64.zig	/zcz_gp/;"	field
zdinx	$ZIGLIB/std/target/riscv.zig	/zdinx/;"	field
zen_replace	$ZIGLIB/std/mem.zig	/const zen_replace = replaceOwned(u8, gpa, "Favor reading code over writing code.", " code", "") catch @panic("out of memory")/;"	constant
zero	$ZIGLIB/std/os/windows/ws2_32.zig	/zero: [8]u8 = [8]u8{ 0, 0, 0, 0, 0, 0, 0, 0 }/;"	field
zeroInit	$ZIGLIB/std/mem.zig	/^pub fn zeroInit(comptime T: type, init: anytype) T {$/;"	function
zeroMeansEnd	$ZIGLIB/std/http/Client.zig	/pub fn zeroMeansEnd(state: State) bool {$/;"	function
zeroPow2	$ZIGLIB/std/fmt/parse_float/common.zig	/pub fn zeroPow2(e: i32) Self {$/;"	function
zeroStats	$ZIGLIB/std/valgrind/callgrind.zig	/^pub fn zeroStats() void {$/;"	function
zero_bit_ptr	$ZIGLIB/std/heap.zig	/const zero_bit_ptr = try allocator.create(u0)/;"	constant
zero_bits	$ZIGLIB/std/crypto/Certificate.zig	/const zero_bits = emLen * 8 - emBit/;"	constant
zero_case	$ZIGLIB/std/rand/ziggurat.zig	/zero_case: fn (Random, f64) f64/;"	field
zero_digit_count	$ZIGLIB/std/fmt.zig	/const zero_digit_count = @intCast(usize, -float_decimal.exp)/;"	constant
zero_iovec	$ZIGLIB/std/fs/file.zig	/const zero_iovec = &[0]os.iovec_const{}/;"	constant
zero_means_end	$ZIGLIB/std/http/Client.zig	/const zero_means_end = req.response.state.zeroMeansEnd()/;"	constant
zero_or_one	$ZIGLIB/std/zig/Parse.zig	/zero_or_one: Node.Index/;"	field
zeroes	$ZIGLIB/std/mem.zig	/^pub fn zeroes(comptime T: type) T {$/;"	function
zeros	$ZIGLIB/std/crypto/chacha20.zig	/const zeros = [_]u8{0} ** 16/;"	constant
zeros_to_print	$ZIGLIB/std/fmt.zig	/const zeros_to_print = math.min(zero_digit_count, precision)/;"	constant
zfhmin	$ZIGLIB/std/target/riscv.zig	/zfhmin/;"	field
zfinx	$ZIGLIB/std/target/riscv.zig	/zfinx/;"	field
zhinx	$ZIGLIB/std/target/riscv.zig	/zhinx/;"	field
zhinxmin	$ZIGLIB/std/target/riscv.zig	/zhinxmin/;"	field
zicbom	$ZIGLIB/std/target/riscv.zig	/zicbom/;"	field
zicbop	$ZIGLIB/std/target/riscv.zig	/zicbop/;"	field
zicboz	$ZIGLIB/std/target/riscv.zig	/zicboz/;"	field
zigTriple	$ZIGLIB/std/zig/CrossTarget.zig	/^pub fn zigTriple(self: CrossTarget, allocator: mem.Allocator) error{OutOfMemory}![]u8 {$/;"	function
zig_args	$ZIGLIB/std/Build/CompileStep.zig	/var zig_args = ArrayList([]const u8).init(self.builder.allocator)/;"	variable
zig_exe	$ZIGLIB/std/Build.zig	/^zig_exe: []const u8/;"	field
zig_probe_stack	$ZIGLIB/compiler_rt/stack_probe.zig	/^pub fn zig_probe_stack() callconv(.Naked) void {$/;"	function
zig_style_container	$ZIGLIB/std/zig/Ast.zig	/zig_style_container/;"	field
zihintpause	$ZIGLIB/std/target/riscv.zig	/zihintpause/;"	field
zinv	$ZIGLIB/std/crypto/pcurves/secp256k1.zig	/const zinv = p.z.invert()/;"	constant
zknd	$ZIGLIB/std/target/riscv.zig	/zknd/;"	field
zkne	$ZIGLIB/std/target/riscv.zig	/zkne/;"	field
zknh	$ZIGLIB/std/target/riscv.zig	/zknh/;"	field
zksed	$ZIGLIB/std/target/riscv.zig	/zksed/;"	field
zksh	$ZIGLIB/std/target/riscv.zig	/zksh/;"	field
zlib	$ZIGLIB/std/Build/CompileStep.zig	/zlib/;"	field
zlibStream	$ZIGLIB/std/compress/zlib.zig	/^pub fn zlibStream(allocator: mem.Allocator, reader: anytype) !ZlibStream(@TypeOf(reader)) {$/;"	function
zlib_stream	$ZIGLIB/std/compress/zlib.zig	/var zlib_stream = try zlibStream(testing.allocator, in_stream.reader())/;"	variable
zmmul	$ZIGLIB/std/target/riscv.zig	/zmmul/;"	field
znver1	$ZIGLIB/std/target/x86.zig	/pub const znver1 = CpuModel{$/;"	constant
znver2	$ZIGLIB/std/target/x86.zig	/pub const znver2 = CpuModel{$/;"	constant
znver3	$ZIGLIB/std/target/x86.zig	/pub const znver3 = CpuModel{$/;"	constant
zone	$ZIGLIB/std/c/solaris.zig	/zone: zoneid_t/;"	field
zoneid	$ZIGLIB/std/c/solaris.zig	/zoneid: zoneid_t/;"	field
zoneid_t	$ZIGLIB/std/c/solaris.zig	/^pub const zoneid_t = id_t/;"	constant
zreg	$ZIGLIB/std/target/hexagon.zig	/zreg/;"	field
zs_sum	$ZIGLIB/std/crypto/25519/ed25519.zig	/var zs_sum = Curve.scalar.zero/;"	variable
zve32f	$ZIGLIB/std/target/riscv.zig	/zve32f/;"	field
zve32x	$ZIGLIB/std/target/riscv.zig	/zve32x/;"	field
zve64d	$ZIGLIB/std/target/riscv.zig	/zve64d/;"	field
zve64f	$ZIGLIB/std/target/riscv.zig	/zve64f/;"	field
zve64x	$ZIGLIB/std/target/riscv.zig	/zve64x/;"	field
zvl1024b	$ZIGLIB/std/target/riscv.zig	/zvl1024b/;"	field
zvl128b	$ZIGLIB/std/target/riscv.zig	/zvl128b/;"	field
zvl16384b	$ZIGLIB/std/target/riscv.zig	/zvl16384b/;"	field
zvl2048b	$ZIGLIB/std/target/riscv.zig	/zvl2048b/;"	field
zvl256b	$ZIGLIB/std/target/riscv.zig	/zvl256b/;"	field
zvl32768b	$ZIGLIB/std/target/riscv.zig	/zvl32768b/;"	field
zvl32b	$ZIGLIB/std/target/riscv.zig	/zvl32b/;"	field
zvl4096b	$ZIGLIB/std/target/riscv.zig	/zvl4096b/;"	field
zvl512b	$ZIGLIB/std/target/riscv.zig	/zvl512b/;"	field
zvl64b	$ZIGLIB/std/target/riscv.zig	/zvl64b/;"	field
zvl8192b	$ZIGLIB/std/target/riscv.zig	/zvl8192b/;"	field
