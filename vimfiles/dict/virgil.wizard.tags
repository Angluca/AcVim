ABS_MARKER	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^def ABS_MARKER = 0x77665544;$/;"	d
ACCES	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	ACCES		(2, "Permission denied."),$/;"	d
ACCESS_F32	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^def ACCESS_F32 = MemoryAccessor.new(4, 2, DataReaders.read_range_float, DataWriters.write_range_float);$/;"	d
ACCESS_F64	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^def ACCESS_F64 = MemoryAccessor.new(8, 3, DataReaders.read_range_double, DataWriters.write_range_double);$/;"	d
ACCESS_I16	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^def ACCESS_I16 = MemoryAccessor.new(2, 1, DataReaders.read_range_i16, DataWriters.write_range_i16);$/;"	d
ACCESS_I32	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^def ACCESS_I32 = MemoryAccessor.new(4, 2, DataReaders.read_range_i32, DataWriters.write_range_i32);$/;"	d
ACCESS_I8	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^def ACCESS_I8 = MemoryAccessor.new(1, 0, DataReaders.read_range_i8, DataWriters.write_range_i8);$/;"	d
ACCESS_U16	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^def ACCESS_U16 = MemoryAccessor.new(2, 1, DataReaders.read_range_u16, DataWriters.write_range_u16);$/;"	d
ACCESS_U32	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^def ACCESS_U32 = MemoryAccessor.new(4, 2, DataReaders.read_range_u32, DataWriters.write_range_u32);$/;"	d
ACCESS_U64	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^def ACCESS_U64 = MemoryAccessor.new(8, 3, DataReaders.read_range_u64, DataWriters.write_range_u64);$/;"	d
ACCESS_U8	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^def ACCESS_U8 = MemoryAccessor.new(1, 0, DataReaders.read_range_u8, DataWriters.write_range_u8);$/;"	d
ACCESS_V128	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^def ACCESS_V128 = MemoryAccessor.new(16, 4, DataReaders.read_range_u128, DataWriters.write_range_u128);$/;"	d
ACTIVE	$VIRGIL_WIZARD/src/util/Palette.v3	/^	ACTIVE		(TermColors.WHITE),$/;"	d
ADDRINUSE	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	ADDRINUSE	(3, "Address in use."),$/;"	d
ADDRNOTAVAIL	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	ADDRNOTAVAIL	(4, "Address not available."),$/;"	d
AFNOSUPPORT	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	AFNOSUPPORT	(5, "Address family not supported."),$/;"	d
AGAIN	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	AGAIN		(6, "Resource unavailable, or operation would block."),$/;"	d
ALL	$VIRGIL_WIZARD/src/util/OptionsRegistry.v3	/^	def ALL = BasicOptions.new();$/;"	d
ALREADY	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	ALREADY		(7, "Connection already in progress."),$/;"	d
ANY	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	ANY		(0x6E, -18), \/\/ -0x12$/;"	d
ANY	$VIRGIL_WIZARD/src/engine/Type.v3	/^	case ANY;$/;"	d
ANYREF	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	ANYREF		(0x6E, -18), \/\/$/;"	d
ANYREF	$VIRGIL_WIZARD/src/engine/Type.v3	/^	def ANYREF = ValueType.Ref(true, HeapType.ANY);$/;"	d
ANYREF_NONNULL	$VIRGIL_WIZARD/src/engine/Type.v3	/^	def ANYREF_NONNULL = ValueType.Ref(false, HeapType.ANY);$/;"	d
ANY_CONVERT_EXTERN	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	ANY_CONVERT_EXTERN		(0xFB, 0x1A, "any.convert_extern", imm.NONE, null), \/\/ XXX: could have sig$/;"	d
ARRAY	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	ARRAY		(0x6A, -22), \/\/ -0x16$/;"	d
ARRAYREF	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	ARRAYREF	(0x6A, -22), \/\/$/;"	d
ARRAYREF	$VIRGIL_WIZARD/src/engine/Type.v3	/^	def ARRAYREF = ValueType.Ref(true, HeapType.Array(null));$/;"	d
ARRAYREF_NONNULL	$VIRGIL_WIZARD/src/engine/Type.v3	/^	def ARRAYREF_NONNULL = ValueType.Ref(false, HeapType.Array(null));$/;"	d
ARRAYT	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def ARRAYT = [ImmKind.ARRAY_TYPE_INDEX];$/;"	d
ARRAYT_ARRAYT	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def ARRAYT_ARRAYT = [ImmKind.ARRAY_TYPE_INDEX, ImmKind.ARRAY_TYPE_INDEX];$/;"	d
ARRAYT_DATA	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def ARRAYT_DATA = [ImmKind.ARRAY_TYPE_INDEX, ImmKind.DATA_INDEX];$/;"	d
ARRAYT_ELEM	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def ARRAYT_ELEM = [ImmKind.ARRAY_TYPE_INDEX, ImmKind.ELEM_INDEX];$/;"	d
ARRAYT_U32	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def ARRAYT_U32 = [ImmKind.ARRAY_TYPE_INDEX, ImmKind.U32];$/;"	d
ARRAY_COPY	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	ARRAY_COPY			(0xFB, 0x11, "array.copy", imm.ARRAYT_ARRAYT, null),$/;"	d
ARRAY_COPY	$VIRGIL_WIZARD/src/engine/Runtime.v3	/^	def ARRAY_COPY(stack: ExecStack, instance: Instance, array_index1: u31, array_index2: u31) -> Throwable {$/;"	f
ARRAY_FILL	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	ARRAY_FILL			(0xFB, 0x10, "array.fill", imm.ARRAYT, null),$/;"	d
ARRAY_FILL	$VIRGIL_WIZARD/src/engine/Runtime.v3	/^	def ARRAY_FILL(stack: ExecStack, instance: Instance, array_index: u31) -> Throwable {$/;"	f
ARRAY_GET	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	ARRAY_GET			(0xFB, 0x0B, "array.get", imm.ARRAYT, null),$/;"	d
ARRAY_GET	$VIRGIL_WIZARD/src/engine/Runtime.v3	/^	def ARRAY_GET(stack: ExecStack, instance: Instance, array_index: u31) -> Throwable {$/;"	f
ARRAY_GET_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	ARRAY_GET_S			(0xFB, 0x0C, "array.get_s", imm.ARRAYT, null),$/;"	d
ARRAY_GET_S	$VIRGIL_WIZARD/src/engine/Runtime.v3	/^	def ARRAY_GET_S(stack: ExecStack, instance: Instance, array_index: u31) -> Throwable {$/;"	f
ARRAY_GET_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	ARRAY_GET_U			(0xFB, 0x0D, "array.get_u", imm.ARRAYT, null),$/;"	d
ARRAY_GET_U	$VIRGIL_WIZARD/src/engine/Runtime.v3	/^	def ARRAY_GET_U(stack: ExecStack, instance: Instance, array_index: u31) -> Throwable {$/;"	f
ARRAY_INIT_DATA	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	ARRAY_INIT_DATA			(0xFB, 0x12, "array.init_data", imm.ARRAYT_DATA, null),$/;"	d
ARRAY_INIT_DATA	$VIRGIL_WIZARD/src/engine/Runtime.v3	/^	def ARRAY_INIT_DATA(stack: ExecStack, instance: Instance, array_index: u31, data_index: u31) -> Throwable {$/;"	f
ARRAY_INIT_ELEM	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	ARRAY_INIT_ELEM			(0xFB, 0x13, "array.init_elem", imm.ARRAYT_ELEM, null),$/;"	d
ARRAY_INIT_ELEM	$VIRGIL_WIZARD/src/engine/Runtime.v3	/^	def ARRAY_INIT_ELEM(stack: ExecStack, instance: Instance, array_index: u31, elem_index: u31) -> Throwable {$/;"	f
ARRAY_LEN	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	ARRAY_LEN			(0xFB, 0x0F, "array.len", imm.NONE, null),$/;"	d
ARRAY_LEN	$VIRGIL_WIZARD/src/engine/Runtime.v3	/^	def ARRAY_LEN(stack: ExecStack, instance: Instance) -> Throwable {$/;"	f
ARRAY_NEW	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	ARRAY_NEW			(0xFB, 0x06, "array.new", imm.ARRAYT, null),$/;"	d
ARRAY_NEW	$VIRGIL_WIZARD/src/engine/Runtime.v3	/^	def ARRAY_NEW(stack: ExecStack, instance: Instance, array_index: u31) -> Throwable {$/;"	f
ARRAY_NEW_DATA	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	ARRAY_NEW_DATA			(0xFB, 0x09, "array.new_data", imm.ARRAYT_DATA, null),$/;"	d
ARRAY_NEW_DATA	$VIRGIL_WIZARD/src/engine/Runtime.v3	/^	def ARRAY_NEW_DATA(stack: ExecStack, instance: Instance, array_index: u31, data_index: u31) -> Throwable {$/;"	f
ARRAY_NEW_DEFAULT	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	ARRAY_NEW_DEFAULT		(0xFB, 0x07, "array.new_default", imm.ARRAYT, null),$/;"	d
ARRAY_NEW_DEFAULT	$VIRGIL_WIZARD/src/engine/Runtime.v3	/^	def ARRAY_NEW_DEFAULT(stack: ExecStack, instance: Instance, array_index: u31) -> Throwable {$/;"	f
ARRAY_NEW_ELEM	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	ARRAY_NEW_ELEM			(0xFB, 0x0A, "array.new_elem", imm.ARRAYT_ELEM, null),$/;"	d
ARRAY_NEW_ELEM	$VIRGIL_WIZARD/src/engine/Runtime.v3	/^	def ARRAY_NEW_ELEM(stack: ExecStack, instance: Instance, array_index: u31, elem_index: u31) -> Throwable {$/;"	f
ARRAY_NEW_FIXED	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	ARRAY_NEW_FIXED			(0xFB, 0x08, "array.new_fixed", imm.ARRAYT_U32, null),$/;"	d
ARRAY_NEW_FIXED	$VIRGIL_WIZARD/src/engine/Runtime.v3	/^	def ARRAY_NEW_FIXED(stack: ExecStack, instance: Instance, array_index: u31, length: u32) -> Throwable {$/;"	f
ARRAY_OOB	$VIRGIL_WIZARD/src/engine/Trap.v3	/^	ARRAY_OOB,$/;"	d
ARRAY_SET	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	ARRAY_SET			(0xFB, 0x0E, "array.set", imm.ARRAYT, null),$/;"	d
ARRAY_SET	$VIRGIL_WIZARD/src/engine/Runtime.v3	/^	def ARRAY_SET(stack: ExecStack, instance: Instance, array_index: u31) -> Throwable {$/;"	f
ARRAY_TYPE_INDEX	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	ARRAY_TYPE_INDEX,	\/\/ ARRAYT$/;"	d
ATOMICS	$VIRGIL_WIZARD/src/engine/Extension.v3	/^	ATOMICS("threads", "Atomic operations"),$/;"	d
ATOMIC_FENCE	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	ATOMIC_FENCE			(0xFE, 0x03, "atomic.fence", imm.ZEROB, sig.v_v),$/;"	d
ATOMIC_FENCE	$VIRGIL_WIZARD/src/engine/Runtime.v3	/^	def ATOMIC_FENCE() { \/\/ XXX: nop on single-threaded targets$/;"	f
AT_EMPTY_PATH	$VIRGIL_WIZARD/src/modules/wasi/x86-64-linux/WspOneModule-x86-64-linux.v3	/^def AT_EMPTY_PATH = 0x1000;$/;"	d
AT_FDCWD	$VIRGIL_WIZARD/src/modules/wasi/x86-64-linux/WspOneModule-x86-64-linux.v3	/^def AT_FDCWD = -100;$/;"	d
AT_REMOVEDIR	$VIRGIL_WIZARD/src/modules/wasi/x86-64-linux/WspOneModule-x86-64-linux.v3	/^def AT_REMOVEDIR = 0x200;$/;"	d
AT_SYMLINK_FOLLOW	$VIRGIL_WIZARD/src/modules/wasi/x86-64-linux/WspOneModule-x86-64-linux.v3	/^def AT_SYMLINK_FOLLOW = 0x400;$/;"	d
AT_SYMLINK_NOFOLLOW	$VIRGIL_WIZARD/src/modules/wasi/x86-64-linux/WspOneModule-x86-64-linux.v3	/^def AT_SYMLINK_NOFOLLOW = 0x100;$/;"	d
Active	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case Active(index: int, offset: InitExpr);$/;"	d
AfterInstrAddGlobalProbe	$VIRGIL_WIZARD/src/monitors/ModuleInstrumenter.v3	/^private class AfterInstrAddGlobalProbe(f: DynamicLoc -> ProbeAction) extends Probe {$/;"	c
AfterInstrDestProbe	$VIRGIL_WIZARD/src/monitors/ModuleInstrumenter.v3	/^private class AfterInstrDestProbe(module: Module, f: DynamicLoc -> ProbeAction) extends Probe {$/;"	c
AfterInstrGlobalProbe	$VIRGIL_WIZARD/src/monitors/ModuleInstrumenter.v3	/^private class AfterInstrGlobalProbe(f: DynamicLoc -> ProbeAction) extends Probe {$/;"	c
AfterInstrProbe	$VIRGIL_WIZARD/src/monitors/ModuleInstrumenter.v3	/^private class AfterInstrProbe(module: Module, opcode: Opcode, destProbes: Range<AfterInstrDestProbe>, f: DynamicLoc -> ProbeAction) extends Probe {$/;"	c
AfterInstrVisitor	$VIRGIL_WIZARD/src/monitors/ModuleInstrumenter.v3	/^private class AfterInstrVisitor(module: Module, func: FuncDecl, pc: int, f: DynamicLoc -> ProbeAction) extends BytecodeVisitor {$/;"	c
All	$VIRGIL_WIZARD/src/util/DeclFilter.v3	/^	case All;$/;"	d
AllOpcodes	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	case AllOpcodes;$/;"	d
AllocInstrumenter	$VIRGIL_WIZARD/src/monitors/AllocMonitor.v3	/^class AllocInstrumenter extends BytecodeInstrumenter {$/;"	c
AllocMonitor	$VIRGIL_WIZARD/src/monitors/AllocMonitor.v3	/^class AllocMonitor extends Monitor {$/;"	c
AllocStats	$VIRGIL_WIZARD/src/monitors/AllocMonitor.v3	/^type AllocStats {$/;"	c
AllocStats.Array	$VIRGIL_WIZARD/src/monitors/AllocMonitor.v3	/^	case Array(counts: Array<u64>);$/;"	c
AllocStats.Array	$VIRGIL_WIZARD/src/monitors/AllocMonitor.v3	/^	case Array(counts: Array<u64>);$/;"	c
AllocStats.Struct	$VIRGIL_WIZARD/src/monitors/AllocMonitor.v3	/^	case Struct(count: CountProbe);$/;"	c
AllocStats.Struct	$VIRGIL_WIZARD/src/monitors/AllocMonitor.v3	/^	case Struct(count: CountProbe);$/;"	c
Anchor	$VIRGIL_WIZARD/src/monitors/LoopTraceMonitor.v3	/^	case Anchor(id: u30);$/;"	d
Arg	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	case Arg(orig: Token, i: u31);$/;"	d
ArityMismatchAtFallthru	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def ArityMismatchAtFallthru(e: int, g: int) {$/;"	m
ArityMismatchInFuncBind	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def ArityMismatchInFuncBind(expected: SigDecl, got: SigDecl) {$/;"	m
ArityMismatchInHandler	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def ArityMismatchInHandler(handler_type: string, i: int, expected: int, got: int) {$/;"	m
ArityMismatchInSwitch	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def ArityMismatchInSwitch(expected: int, got: int) {$/;"	m
Array	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	Array		(0x5E, -34),$/;"	d
Array	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case Array(t: HeapType.Array, len: InitExpr, elem: InitExpr);$/;"	d
Array	$VIRGIL_WIZARD/src/engine/Type.v3	/^	case Array(array: ArrayDecl);$/;"	d
Array	$VIRGIL_WIZARD/src/monitors/AllocMonitor.v3	/^	case Array(counts: Array<u64>);$/;"	d
ArrayDecl	$VIRGIL_WIZARD/src/engine/Type.v3	/^class ArrayDecl extends HeapTypeDecl {$/;"	c
ArrayNewData	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case ArrayNewData(t: HeapType.Array, data_index: int, offset: InitExpr, len: InitExpr);$/;"	d
ArrayNewElem	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case ArrayNewElem(t: HeapType.Array, elem_index: int, offset: InitExpr, len: InitExpr);$/;"	d
ArrayUtil	$VIRGIL_WIZARD/src/util/ArrayUtil.v3	/^component ArrayUtil {$/;"	n
Array_contents	$VIRGIL_WIZARD/src/engine/x86-64/V3Offsets.v3	/^	def Array_contents		= int.view(Pointer.atContents(mems) - Pointer.atObject(mems));$/;"	d
Array_length	$VIRGIL_WIZARD/src/engine/x86-64/V3Offsets.v3	/^	def Array_length		= int.view(Pointer.atLength(mems) - Pointer.atObject(mems));$/;"	d
AtFuncEnd	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	case AtFuncEnd;$/;"	d
BADF	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	BADF		(8, "Bad file descriptor."),$/;"	d
BADF	$VIRGIL_WIZARD/src/modules/wasi/x86-64-linux/WspOneModule-x86-64-linux.v3	/^def BADF = WspOneErrno.BADF.code;$/;"	d
BADF_HR	$VIRGIL_WIZARD/src/modules/wasi/x86-64-linux/WspOneModule-x86-64-linux.v3	/^def BADF_HR = HostResult.Value1(Value.I32(BADF));$/;"	d
BADMSG	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	BADMSG		(9, "Bad message."),$/;"	d
BEGIN_BLOCK	$VIRGIL_WIZARD/src/util/CfgPrinter.v3	/^	BEGIN_BLOCK,$/;"	d
BEGIN_LOOP	$VIRGIL_WIZARD/src/util/CfgPrinter.v3	/^	BEGIN_LOOP,$/;"	d
BG_BLACK	$VIRGIL_WIZARD/src/util/TermColors.v3	/^	def BG_BLACK        = "\x1B[0;40m";$/;"	d
BG_BLUE	$VIRGIL_WIZARD/src/util/TermColors.v3	/^	def BG_BLUE         = "\x1B[0;44m";$/;"	d
BG_BRIGHTBLUE	$VIRGIL_WIZARD/src/util/TermColors.v3	/^	def BG_BRIGHTBLUE   = "\x1B[1;44m";$/;"	d
BG_BRIGHTCYAN	$VIRGIL_WIZARD/src/util/TermColors.v3	/^	def BG_BRIGHTCYAN   = "\x1B[1;46m";$/;"	d
BG_BRIGHTGREEN	$VIRGIL_WIZARD/src/util/TermColors.v3	/^	def BG_BRIGHTGREEN  = "\x1B[1;42m";$/;"	d
BG_BRIGHTRED	$VIRGIL_WIZARD/src/util/TermColors.v3	/^	def BG_BRIGHTRED    = "\x1B[1;41m";$/;"	d
BG_BROWN	$VIRGIL_WIZARD/src/util/TermColors.v3	/^	def BG_BROWN        = "\x1B[0;43m";$/;"	d
BG_CYAN	$VIRGIL_WIZARD/src/util/TermColors.v3	/^	def BG_CYAN         = "\x1B[0;46m";$/;"	d
BG_DARKGRAY	$VIRGIL_WIZARD/src/util/TermColors.v3	/^	def BG_DARKGRAY     = "\x1B[1;40m";$/;"	d
BG_GREEN	$VIRGIL_WIZARD/src/util/TermColors.v3	/^	def BG_GREEN        = "\x1B[0;42m";$/;"	d
BG_LIGHTGRAY	$VIRGIL_WIZARD/src/util/TermColors.v3	/^	def BG_LIGHTGRAY    = "\x1B[0;47m";$/;"	d
BG_MAGENTA	$VIRGIL_WIZARD/src/util/TermColors.v3	/^	def BG_MAGENTA      = "\x1B[1;45m";$/;"	d
BG_PURPLE	$VIRGIL_WIZARD/src/util/TermColors.v3	/^	def BG_PURPLE       = "\x1B[0;45m";$/;"	d
BG_RED	$VIRGIL_WIZARD/src/util/TermColors.v3	/^	def BG_RED          = "\x1B[0;41m";$/;"	d
BG_WHITE	$VIRGIL_WIZARD/src/util/TermColors.v3	/^	def BG_WHITE        = "\x1B[1;47m";$/;"	d
BG_YELLOW	$VIRGIL_WIZARD/src/util/TermColors.v3	/^	def BG_YELLOW       = "\x1B[1;43m";$/;"	d
BINARY	$VIRGIL_WIZARD/src/util/Palette.v3	/^	BINARY		(TermColors.GRAY1),$/;"	d
BLACK	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^def BLACK   = '\x02';$/;"	d
BLACK	$VIRGIL_WIZARD/src/util/TermColors.v3	/^	def BLACK	= "\x1B[0;30m";$/;"	d
BLOCK	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def BLOCK() {$/;"	m
BLOCK	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	BLOCK			(0x00, 0x02, "block", imm.BLOCKT, null),$/;"	d
BLOCKT	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def BLOCKT = [ImmKind.BLOCK_TYPE];$/;"	d
BLOCKT_CATCHES	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def BLOCKT_CATCHES = [ImmKind.BLOCK_TYPE, ImmKind.CATCHES];$/;"	d
BLOCK_DEVICE	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	BLOCK_DEVICE,$/;"	d
BLOCK_TYPE	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	BLOCK_TYPE,		\/\/ BLOCKT$/;"	d
BLUE	$VIRGIL_WIZARD/src/util/TermColors.v3	/^	def BLUE	= "\x1B[0;34m";$/;"	d
BODY	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	BODY,$/;"	d
BODY_WITH_SIZE	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	BODY_WITH_SIZE$/;"	d
BOLD	$VIRGIL_WIZARD/src/util/Palette.v3	/^	BOLD		(TermColors.BOLD),$/;"	d
BOLD	$VIRGIL_WIZARD/src/util/TermColors.v3	/^	def BOLD	    = "\x1B[1m";$/;"	d
BOTH	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	BOTH(true, true)$/;"	d
BOTTOM	$VIRGIL_WIZARD/src/engine/Type.v3	/^	case BOTTOM;						\/\/ Bottom type$/;"	d
BOUNDS_CHECK_32	$VIRGIL_WIZARD/src/engine/Sidetable.v3	/^	BOUNDS_CHECK_32		\/\/ memory N, 32-bit index, offset != 0, custom page size$/;"	d
BOX_CONNECT_LEFT	$VIRGIL_WIZARD/src/util/CfgPrinter.v3	/^def BOX_CONNECT_LEFT = 0x251Cu;$/;"	d
BOX_CONNECT_RIGHT	$VIRGIL_WIZARD/src/util/CfgPrinter.v3	/^def BOX_CONNECT_RIGHT = 0x2524u;$/;"	d
BOX_HALF_VERTICAL	$VIRGIL_WIZARD/src/util/CfgPrinter.v3	/^def BOX_HALF_VERTICAL = 0x2575u;$/;"	d
BOX_HORIZONTAL	$VIRGIL_WIZARD/src/util/CfgPrinter.v3	/^def BOX_HORIZONTAL = 0x2500u;$/;"	d
BOX_LOWER_LEFT	$VIRGIL_WIZARD/src/util/CfgPrinter.v3	/^def BOX_LOWER_LEFT = 0x2570u;$/;"	d
BOX_LOWER_RIGHT	$VIRGIL_WIZARD/src/util/CfgPrinter.v3	/^def BOX_LOWER_RIGHT = 0x256Fu;$/;"	d
BOX_UPPER_LEFT	$VIRGIL_WIZARD/src/util/CfgPrinter.v3	/^def BOX_UPPER_LEFT = 0x256Du;$/;"	d
BOX_UPPER_RIGHT	$VIRGIL_WIZARD/src/util/CfgPrinter.v3	/^def BOX_UPPER_RIGHT = 0x256Eu;$/;"	d
BOX_VERTICAL	$VIRGIL_WIZARD/src/util/CfgPrinter.v3	/^def BOX_VERTICAL = 0x2502u;$/;"	d
BR	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def BR() {$/;"	m
BR	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	BR			(0x00, 0x0C, "br", imm.LABEL, null),$/;"	d
BRANCHES_MAX	$VIRGIL_WIZARD/src/monitors/LoopTraceMonitor.v3	/^	def BRANCHES_MAX = 0x2000_0000u;$/;"	d
BREAK	$VIRGIL_WIZARD/src/engine/Trap.v3	/^	BREAK,$/;"	d
BREAKPOINT_PROBE	$VIRGIL_WIZARD/src/monitors/BreakpointMonitor.v3	/^def BREAKPOINT_PROBE = ExternalDebuggerBreakpointProbe.new();$/;"	d
BREAK_PROBE	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	BREAK_PROBE(0x16, "<break-probe>"),$/;"	d
BRIGHTBLUE	$VIRGIL_WIZARD/src/util/TermColors.v3	/^	def BRIGHTBLUE  = "\x1B[1;34m";$/;"	d
BRIGHTCYAN	$VIRGIL_WIZARD/src/util/TermColors.v3	/^	def BRIGHTCYAN  = "\x1B[1;36m";$/;"	d
BRIGHTGREEN	$VIRGIL_WIZARD/src/util/TermColors.v3	/^	def BRIGHTGREEN = "\x1B[1;32m";$/;"	d
BRIGHTRED	$VIRGIL_WIZARD/src/util/TermColors.v3	/^	def BRIGHTRED	= "\x1B[1;31m";$/;"	d
BROWN	$VIRGIL_WIZARD/src/util/TermColors.v3	/^	def BROWN	= "\x1B[0;33m";$/;"	d
BR_CAST	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	BR_CAST,		\/\/ BR_CAST$/;"	d
BR_CAST_ARG	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def BR_CAST_ARG = [ImmKind.BR_CAST];$/;"	d
BR_IF	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def BR_IF() {$/;"	m
BR_IF	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	BR_IF			(0x00, 0x0D, "br_if", imm.LABEL, null),$/;"	d
BR_ON_CAST	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	BR_ON_CAST			(0xFB, 0x18, "br_on_cast", imm.BR_CAST_ARG, null),$/;"	d
BR_ON_CAST_FAIL	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	BR_ON_CAST_FAIL			(0xFB, 0x19, "br_on_cast_fail", imm.BR_CAST_ARG, null),$/;"	d
BR_ON_NON_NULL	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	BR_ON_NON_NULL		(0x00, 0xD6, "br_on_non_null", imm.LABEL, null),$/;"	d
BR_ON_NULL	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	BR_ON_NULL		(0x00, 0xD5, "br_on_null", imm.LABEL, null),$/;"	d
BR_TABLE	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def BR_TABLE() {$/;"	m
BR_TABLE	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	BR_TABLE		(0x00, 0x0E, "br_table", imm.LABELS, null),$/;"	d
BUSY	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	BUSY		(10, "Device or resource busy."),$/;"	d
Backtrace	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	case Backtrace;$/;"	d
BasicBlockCount	$VIRGIL_WIZARD/src/monitors/BlocksMonitor.v3	/^type BasicBlockCount(start: int, end: int, instrs: int, counter: CountProbe) #unboxed;$/;"	c
BasicBlockIterator	$VIRGIL_WIZARD/src/util/BasicBlockIterator.v3	/^class BasicBlockIterator {$/;"	c
BasicTracing	$VIRGIL_WIZARD/src/util/BasicTracing.v3	/^component BasicTracing {$/;"	n
BinParser	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^class BinParser(extensions: Extension.set, limits: Limits, err: ErrorGen, filename: string) extends BpFsmCallback {$/;"	c
BlockEnd	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	case BlockEnd;$/;"	d
BlockStart	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	case BlockStart;$/;"	d
BlockType	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^type BlockType;$/;"	c
BlockTypeCode	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^type BlockTypeCode(code: int, index: int) #unboxed {$/;"	c
BlocksMonitor	$VIRGIL_WIZARD/src/monitors/BlocksMonitor.v3	/^class BlocksMonitor extends Monitor {$/;"	c
BpCatchCode	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^type BpCatchCode {$/;"	c
BpCatchCode.Catch	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	case Catch(tag_index: u31, label: u31);$/;"	c
BpCatchCode.Catch	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	case Catch(tag_index: u31, label: u31);$/;"	c
BpCatchCode.CatchAll	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	case CatchAll(label: u31);$/;"	c
BpCatchCode.CatchAll	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	case CatchAll(label: u31);$/;"	c
BpCatchCode.CatchAllRef	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	case CatchAllRef(label: u31);$/;"	c
BpCatchCode.CatchAllRef	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	case CatchAllRef(label: u31);$/;"	c
BpCatchCode.CatchRef	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	case CatchRef(tag_index: u31, label: u31);$/;"	c
BpCatchCode.CatchRef	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	case CatchRef(tag_index: u31, label: u31);$/;"	c
BpCatchKind	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^enum BpCatchKind(code: u8) {$/;"	e
BpConstants	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^component BpConstants {$/;"	n
BpDefTypeCode	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^enum BpDefTypeCode(code: byte, val: i7) {$/;"	e
BpFsm	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^class BpFsm extends WasmParser {$/;"	c
BpFsmCallback	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^class BpFsmCallback(module: Module) {$/;"	c
BpFsmState	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^enum BpFsmState {$/;"	e
BpGlobalFlag	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^enum BpGlobalFlag(mask: byte) {$/;"	e
BpHeapTypeCode	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^enum BpHeapTypeCode(code: byte, val: i7) {$/;"	e
BpImportExportKind	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^enum BpImportExportKind(code: byte) {$/;"	e
BpMemoryFlag	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^enum BpMemoryFlag(mask: byte) {$/;"	e
BpSection	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^enum BpSection(code: byte) {$/;"	e
BpTableFlag	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^enum BpTableFlag(mask: byte) {$/;"	e
BpTypeCode	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^enum BpTypeCode(code: byte, val: i7) {$/;"	e
BrOnCastImm	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^type BrOnCastImm(flags: u8, depth: u31, ht1: int, ht2: int) #unboxed {$/;"	c
BrRepush	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^enum BrRepush(taken: bool, not_taken: bool) {$/;"	e
BrTableArityMismatch	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def BrTableArityMismatch(i: int, e: int, g: int) {$/;"	m
BrTableTypeMismatch	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def BrTableTypeMismatch(i: int, j: int, e: ValueType, g: ValueType) {$/;"	m
BranchMonitor	$VIRGIL_WIZARD/src/monitors/BranchMonitor.v3	/^class BranchMonitor extends Monitor {$/;"	c
BranchTable	$VIRGIL_WIZARD/src/monitors/LoopTraceMonitor.v3	/^	case BranchTable(which: u30);$/;"	d
Breakpoint	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^type Breakpoint {$/;"	c
Breakpoint.FunctionEnter	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	case FunctionEnter(func_index: int) {$/;"	c
Breakpoint.FunctionEnter	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	case FunctionEnter(func_index: int) {$/;"	c
Breakpoint.FunctionPc	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	case FunctionPc(func_index: int, pc: int) {$/;"	c
Breakpoint.FunctionPc	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	case FunctionPc(func_index: int, pc: int) {$/;"	c
Breakpoint.Invalid	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	case Invalid(args: string) {$/;"	c
Breakpoint.Invalid	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	case Invalid(args: string) {$/;"	c
BreakpointMonitor	$VIRGIL_WIZARD/src/monitors/BreakpointMonitor.v3	/^class BreakpointMonitor extends Monitor {$/;"	c
Breakpoints	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	case Breakpoints;$/;"	d
BytecodeHotness	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^private class BytecodeHotness(output_prefix: string) {$/;"	c
BytecodeInstrumenter	$VIRGIL_WIZARD/src/util/BytecodeInstrumenter.v3	/^class BytecodeInstrumenter(module: Module) extends BytecodeVisitor {$/;"	c
BytecodeIterator	$VIRGIL_WIZARD/src/engine/BytecodeIterator.v3	/^class BytecodeIterator {$/;"	c
BytecodeProfilingMonitor	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^class BytecodeProfilingMonitor extends Monitor {$/;"	c
BytecodeVisitor	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^class BytecodeVisitor {$/;"	c
CALL	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def CALL() {$/;"	m
CALL	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	CALL			(0x00, 0x10, "call", imm.FUNC, null),$/;"	d
CALL	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^	case CALL;$/;"	d
CALL_CHILD	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^	CALL_CHILD,		\/\/ waiting for child stack to return$/;"	d
CALL_INDIRECT	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def CALL_INDIRECT() {$/;"	m
CALL_INDIRECT	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	CALL_INDIRECT		(0x00, 0x11, "call_indirect", imm.SIG_TABLE, null),$/;"	d
CALL_REF	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	CALL_REF		(0x00, 0x14, "call_ref", imm.SIG, null),$/;"	d
CALL_TRACE_PROBE	$VIRGIL_WIZARD/src/util/BasicTracing.v3	/^def CALL_TRACE_PROBE = CallTraceProbe.new();$/;"	d
CANCELED	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	CANCELED	(11, "Operation canceled."),$/;"	d
CATCH	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	CATCH(0x00),$/;"	d
CATCH	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	CATCH			(0x00, 0x07, "catch", imm.TAG, null),$/;"	d
CATCHES	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	CATCHES,		\/\/ CATCH$/;"	d
CATCH_ALL	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	CATCH_ALL(0x02),$/;"	d
CATCH_ALL	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	CATCH_ALL		(0x00, 0x19, "catch_all", imm.NONE, null),$/;"	d
CATCH_ALL_REF	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	CATCH_ALL_REF(0x03)$/;"	d
CATCH_REF	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	CATCH_REF(0x01),$/;"	d
CENTER_L	$VIRGIL_WIZARD/src/util/TraceUtil.v3	/^enum Justification { LEFT, CENTER_L, CENTER_R, RIGHT }$/;"	d
CENTER_R	$VIRGIL_WIZARD/src/util/TraceUtil.v3	/^enum Justification { LEFT, CENTER_L, CENTER_R, RIGHT }$/;"	d
CHARACTER_DEVICE	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	CHARACTER_DEVICE,$/;"	d
CHILD	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	CHILD		(12, "No child processes."),$/;"	d
COLORS	$VIRGIL_WIZARD/src/engine/TraceOptions.v3	/^	def COLORS = group.newBoolOption("colors", true, "Enable or disable terminal colors.")$/;"	d
COMPLEX	$VIRGIL_WIZARD/src/engine/Sidetable.v3	/^	COMPLEX, I8, U8, I16, U16, I32, U32, I64, F32, F64, V128, REF$/;"	d
CONNABORTED	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	CONNABORTED	(13, "Connection aborted."),$/;"	d
CONNECT	$VIRGIL_WIZARD/src/util/CfgPrinter.v3	/^	CONNECT,$/;"	d
CONNECT_DOWN	$VIRGIL_WIZARD/src/util/CfgPrinter.v3	/^	CONNECT_DOWN,$/;"	d
CONNECT_UP	$VIRGIL_WIZARD/src/util/CfgPrinter.v3	/^	CONNECT_UP,$/;"	d
CONNREFUSED	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	CONNREFUSED	(14, "Connection refused."),$/;"	d
CONNRESET	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	CONNRESET	(15, "Connection reset."),$/;"	d
CONST	$VIRGIL_WIZARD/src/util/Palette.v3	/^	CONST		(TermColors.GREEN),$/;"	d
CONSTANT	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	CONSTANT,$/;"	d
CONT	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def CONT = [ImmKind.CONT_INDEX];$/;"	d
CONTREF	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	CONTREF		(0x68, -24), \/\/$/;"	d
CONTREF	$VIRGIL_WIZARD/src/engine/Type.v3	/^	def CONTREF = ValueType.Ref(true, HeapType.Cont(null));$/;"	d
CONT_BIND	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	CONT_BIND			(0x00, 0xE1, "cont.bind", imm.CONT_CONT, null),$/;"	d
CONT_BIND	$VIRGIL_WIZARD/src/engine/Runtime.v3	/^	def CONT_BIND(stack: WasmStack, instance: Instance, in_cont_index: u31, out_cont_index: u31) -> Throwable {$/;"	f
CONT_CONT	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def CONT_CONT = [ImmKind.CONT_INDEX, ImmKind.CONT_INDEX];$/;"	d
CONT_HANDLE	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def CONT_HANDLE = [ImmKind.CONT_INDEX, ImmKind.SUS_HANDLERS];$/;"	d
CONT_INDEX	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	CONT_INDEX,		\/\/ CONT$/;"	d
CONT_NEW	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	CONT_NEW			(0x00, 0xE0, "cont.new", imm.CONT, null),$/;"	d
CONT_NEW	$VIRGIL_WIZARD/src/engine/Runtime.v3	/^	def CONT_NEW(stack: WasmStack, instance: Instance, cont_index: u31) -> Throwable {$/;"	f
CONT_TAG	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def CONT_TAG = [ImmKind.CONT_INDEX, ImmKind.TAG_INDEX];$/;"	d
CONT_TAG_HANDLE	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def CONT_TAG_HANDLE = [ImmKind.CONT_INDEX, ImmKind.TAG_INDEX, ImmKind.SUS_HANDLERS];$/;"	d
COUNT	$VIRGIL_WIZARD/src/util/Palette.v3	/^	COUNT		(TermColors.MAGENTA),$/;"	d
COVERED	$VIRGIL_WIZARD/src/util/Palette.v3	/^	COVERED		(TermColors.GREEN),$/;"	d
COVERED_BG	$VIRGIL_WIZARD/src/util/Palette.v3	/^	COVERED_BG	(TermColors.BG_BRIGHTGREEN),$/;"	d
COVERED_FG	$VIRGIL_WIZARD/src/util/Palette.v3	/^	COVERED_FG	(TermColors.BLACK),$/;"	d
CRASH_COMPILER	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	CRASH_COMPILER(0xF1, "<crash-compiler>"), \/\/ Used to induce a compiler crash$/;"	d
CRASH_EXEC	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	CRASH_EXEC(0xF0, "<crash-execution>"), \/\/ Used to induce an execution crash$/;"	d
CSV	$VIRGIL_WIZARD/src/monitors/MonitorOptions.v3	/^	def CSV = group.newBoolOption("csv", false, "Enable comma-separated value output for monitors.");$/;"	d
CUSTOM_PAGE_SIZES	$VIRGIL_WIZARD/src/engine/Extension.v3	/^	CUSTOM_PAGE_SIZES("custom-page-sizes", "Custom page sizes"),$/;"	d
CYAN	$VIRGIL_WIZARD/src/util/TermColors.v3	/^	def CYAN	= "\x1B[0;36m";$/;"	d
Call	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	case Call(target: Token, params: Array<WhammParam>);$/;"	d
CallIndirectProbe	$VIRGIL_WIZARD/src/monitors/CallsMonitor.v3	/^private class CallIndirectProbe(tail: bool, table_index: u31) extends Probe { \/\/ XXX: use OperandProbe_i_v, but need instance$/;"	c
CallKind	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^private enum CallKind {INT, EXT}$/;"	e
CallProbe	$VIRGIL_WIZARD/src/monitors/CallsMonitor.v3	/^private class CallProbe(tail: bool, func_index: u31) extends CountProbe { }$/;"	c
CallRefProbe	$VIRGIL_WIZARD/src/monitors/CallsMonitor.v3	/^private class CallRefProbe(tail: bool) extends Probe { \/\/ XXX: use OperandProbe_r_v, but need instance$/;"	c
CallStackEntry	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^private type CallStackEntry(func_id: int, kind: CallKind);$/;"	c
CallTraceProbe	$VIRGIL_WIZARD/src/util/BasicTracing.v3	/^class CallTraceProbe extends Probe {$/;"	c
CallbackProbe	$VIRGIL_WIZARD/src/util/ProbeUtil.v3	/^class CallbackProbe(f: DynamicLoc -> ProbeAction) extends Probe {$/;"	c
CallsMonitor	$VIRGIL_WIZARD/src/monitors/CallsMonitor.v3	/^class CallsMonitor extends Monitor {$/;"	c
CallsMonitorBytecodeVisitor	$VIRGIL_WIZARD/src/monitors/CallsMonitor.v3	/^private class CallsMonitorBytecodeVisitor(var stats: FuncStats, bi: BytecodeIterator) extends BytecodeVisitor {$/;"	c
Canon	$VIRGIL_WIZARD/src/engine/Canon.v3	/^component Canon {$/;"	n
Catch	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	case Catch(tag_index: u31, label: u31);$/;"	d
Catch	$VIRGIL_WIZARD/src/engine/WasmParser.v3	/^type Catch(tag: TagDecl, exnref: bool, depth: u32) {$/;"	c
CatchAll	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	case CatchAll(label: u31);$/;"	d
CatchAllRef	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	case CatchAllRef(label: u31);$/;"	d
CatchRef	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	case CatchRef(tag_index: u31, label: u31);$/;"	d
CfgBlock	$VIRGIL_WIZARD/src/util/CfgBuilder.v3	/^class CfgBlock(decl_pos: int) {$/;"	c
CfgBuilder	$VIRGIL_WIZARD/src/util/CfgBuilder.v3	/^class CfgBuilder {$/;"	c
CfgEdgeChar	$VIRGIL_WIZARD/src/util/CfgPrinter.v3	/^enum CfgEdgeChar {$/;"	e
CfgPrintEntry	$VIRGIL_WIZARD/src/util/CfgPrinter.v3	/^type CfgPrintEntry(pc: int, fw_edges: Array<CfgEdgeChar>, instr: string, bw_edges: Array<CfgEdgeChar>) #unboxed {$/;"	c
CfgPrinter	$VIRGIL_WIZARD/src/util/CfgPrinter.v3	/^class CfgPrinter extends BytecodeVisitor {$/;"	c
CiBrOnCastProbe	$VIRGIL_WIZARD/src/monitors/ControlInstrumenter.v3	/^private class CiBrOnCastProbe(nullable: bool, ht_val: int, success_taken: bool) extends Probe {$/;"	c
CiBrOnNullProbe	$VIRGIL_WIZARD/src/monitors/ControlInstrumenter.v3	/^private class CiBrOnNullProbe(null_taken: bool) extends Probe {$/;"	c
CiBrProbe	$VIRGIL_WIZARD/src/monitors/ControlInstrumenter.v3	/^private class CiBrProbe extends OperandProbe_i_v {$/;"	c
CiBrTableProbe	$VIRGIL_WIZARD/src/monitors/ControlInstrumenter.v3	/^private class CiBrTableProbe extends OperandProbe_i_v {$/;"	c
ClosureEntry	$VIRGIL_WIZARD/src/modules/HostModuleBuilder.v3	/^private type ClosureEntry<C>(name: string, sig: SigDecl, cnew: C -> (Range<Value> -> HostResult)) #unboxed;$/;"	c
ClosureProbe	$VIRGIL_WIZARD/src/util/ProbeUtil.v3	/^class ClosureProbe<P, R>(f: P -> R, param: P) extends Probe {$/;"	c
Code	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	Code(10),$/;"	d
CodePtr	$VIRGIL_WIZARD/src/engine/CodePtr.v3	/^class CodePtr extends DataReader {$/;"	c
CodeValidator	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^class CodeValidator(extensions: Extension.set, limits: Limits, module: Module, err: ErrorGen) {$/;"	c
CodeValidatorResult	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^type CodeValidatorResult {$/;"	c
CodeValidatorResult.Error	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	case Error(error: WasmError, pc: int, msg: string) { }$/;"	c
CodeValidatorResult.Error	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	case Error(error: WasmError, pc: int, msg: string) { }$/;"	c
CodeValidatorResult.Ok	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	case Ok {}$/;"	c
CodeValidatorResult.Ok	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	case Ok {}$/;"	c
Color	$VIRGIL_WIZARD/src/util/Palette.v3	/^enum Color(defstr: string) {$/;"	e
CompilerOptions	$VIRGIL_WIZARD/src/engine/compiler/CompilerOptions.v3	/^component CompilerOptions {$/;"	n
Const	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case Const(val: Value);$/;"	d
ConstEntry	$VIRGIL_WIZARD/src/monitors/ConstMonitor.v3	/^private class ConstEntry {$/;"	c
Cont	$VIRGIL_WIZARD/src/engine/Type.v3	/^	case Cont(cont: ContDecl);$/;"	d
ContDecl	$VIRGIL_WIZARD/src/engine/Type.v3	/^class ContDecl extends HeapTypeDecl {$/;"	c
ContDecl_sig	$VIRGIL_WIZARD/src/engine/x86-64/V3Offsets.v3	/^	def ContDecl_sig		= int.view(Pointer.atField(cont_decl.sig) - Pointer.atObject(cont_decl));$/;"	d
Continuation	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	Continuation	(0x5D, -35),$/;"	d
Continuation	$VIRGIL_WIZARD/src/engine/Instance.v3	/^class Continuation extends Object {$/;"	c
Continuation	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case Continuation(index: int);$/;"	d
Continuation_stack	$VIRGIL_WIZARD/src/engine/x86-64/V3Offsets.v3	/^	def Continuation_stack		= int.view(Pointer.atField(cont.stack) - Pointer.atObject(cont));$/;"	d
Continue	$VIRGIL_WIZARD/src/engine/Execute.v3	/^	case Continue;$/;"	d
Continue	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	case Continue;$/;"	d
ControlEntry	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^class ControlEntry {$/;"	c
ControlInstrumentation	$VIRGIL_WIZARD/src/monitors/ControlInstrumenter.v3	/^class ControlInstrumentation(func: FuncDecl, entries: Array<(int, Probe)>) {$/;"	c
ControlInstrumenter	$VIRGIL_WIZARD/src/monitors/ControlInstrumenter.v3	/^class ControlInstrumenter extends BytecodeVisitor {$/;"	c
ControlMonitor	$VIRGIL_WIZARD/src/monitors/ControlMonitor.v3	/^class ControlMonitor extends Monitor {$/;"	c
ControlStack	$VIRGIL_WIZARD/src/util/ControlStack.v3	/^class ControlStack<B> extends BytecodeVisitor {$/;"	c
ControlStackEntry	$VIRGIL_WIZARD/src/util/ControlStack.v3	/^class ControlStackEntry<B>(depth: int) {$/;"	c
CopyProbe	$VIRGIL_WIZARD/src/monitors/MemStatsMonitor.v3	/^class CopyProbe(dst_stats: MemStats, src_stats: MemStats) extends Probe {$/;"	c
CountMoreProbe	$VIRGIL_WIZARD/src/util/ProbeUtil.v3	/^class CountMoreProbe(c: CountProbe, increment: u64) extends Probe {$/;"	c
CountProbe	$VIRGIL_WIZARD/src/util/ProbeUtil.v3	/^class CountProbe extends Probe {$/;"	c
CountProbe_count	$VIRGIL_WIZARD/src/engine/x86-64/V3Offsets.v3	/^	def CountProbe_count		= int.view(Pointer.atField(cnt.count) - Pointer.atObject(cnt));$/;"	d
CoverageMonitor	$VIRGIL_WIZARD/src/monitors/CoverageMonitor.v3	/^class CoverageMonitor extends Monitor {$/;"	c
CoverageMonitorProbe	$VIRGIL_WIZARD/src/monitors/CoverageMonitor.v3	/^private class CoverageMonitorProbe(module: Module, func: FuncDecl, monitor: CoverageMonitor, start: int) extends Probe {$/;"	c
CustomSection	$VIRGIL_WIZARD/src/engine/Module.v3	/^class CustomSection(name: string, payload: Array<byte>) {$/;"	c
CustomSectionNameLengthTooLong	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def CustomSectionNameLengthTooLong(len: int, size: u32) {$/;"	m
CyclesMetric	$VIRGIL_WIZARD/src/engine/Metrics.v3	/^class CyclesMetric extends Metric {$/;"	c
DANGER	$VIRGIL_WIZARD/src/util/Palette.v3	/^	DANGER		(""),$/;"	d
DARKGRAY	$VIRGIL_WIZARD/src/util/TermColors.v3	/^	def DARKGRAY	= "\x1B[1;30m";$/;"	d
DATA	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def DATA = [ImmKind.DATA_INDEX];$/;"	d
DATA_COUNT_MISMATCH	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	DATA_COUNT_MISMATCH,$/;"	d
DATA_DROP	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	DATA_DROP		(0xFC, 0x09, "data.drop", imm.DATA, sig.v_v),$/;"	d
DATA_INDEX	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	DATA_INDEX,		\/\/ DATA$/;"	d
DATA_MEMORY	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def DATA_MEMORY = [ImmKind.DATA_INDEX, ImmKind.MEMORY_INDEX];$/;"	d
DATA_SEGMENT_DROPPED	$VIRGIL_WIZARD/src/engine/Trap.v3	/^	DATA_SEGMENT_DROPPED,$/;"	d
DEADLK	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	DEADLK		(16, "Resource deadlock would occur."),$/;"	d
DEBUG	$VIRGIL_WIZARD/src/monitors/LoopTraceMonitor.v3	/^def DEBUG = false;$/;"	d
DEFAULT	$VIRGIL_WIZARD/src/util/Palette.v3	/^	DEFAULT		(TermColors.DEFAULT),$/;"	d
DEFAULT	$VIRGIL_WIZARD/src/util/TermColors.v3	/^	def DEFAULT	= "\x1B[0m";$/;"	d
DEFAULT_STACK_SIZE	$VIRGIL_WIZARD/src/engine/EngineOptions.v3	/^	def DEFAULT_STACK_SIZE = 512u * 1024u;$/;"	d
DELEGATE	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	DELEGATE		(0x00, 0x18, "delegate", imm.LABEL, null),$/;"	d
DEST	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	DEST		(17, "Destination address required."),$/;"	d
DIRECTORY	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	DIRECTORY,$/;"	d
DIV_BY_ZERO	$VIRGIL_WIZARD/src/engine/Trap.v3	/^	DIV_BY_ZERO,$/;"	d
DIV_UNREPRESENTABLE	$VIRGIL_WIZARD/src/engine/Trap.v3	/^	DIV_UNREPRESENTABLE,$/;"	d
DOM	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	DOM		(18, "Mathematics argument out of domain of function."),$/;"	d
DQUOT	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	DQUOT		(19, "Reserved."),$/;"	d
DROP	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def DROP() {$/;"	m
DROP	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	DROP			(0x00, 0x1A, "drop", imm.NONE, null),$/;"	d
DUPLICATE_EXPORT	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	DUPLICATE_EXPORT,$/;"	d
DUPLICATE_SECTION	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	DUPLICATE_SECTION,$/;"	d
Data	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	Data(11),$/;"	d
DataCount	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	DataCount(12),$/;"	d
DataCountMismatch	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def DataCountMismatch(expected: int, count: u32) {$/;"	m
DataDecl	$VIRGIL_WIZARD/src/engine/Module.v3	/^class DataDecl(mode: SegmentMode, data: Array<byte>) {$/;"	c
DbgCommand	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^type DbgCommand {$/;"	c
DbgCommand.Backtrace	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	case Backtrace;$/;"	c
DbgCommand.Backtrace	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	case Backtrace;$/;"	c
DbgCommand.Breakpoint	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	case Breakpoint(breakpoint: Breakpoint);$/;"	c
DbgCommand.Breakpoint	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	case Breakpoint(breakpoint: Breakpoint);$/;"	c
DbgCommand.Continue	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	case Continue;$/;"	c
DbgCommand.Continue	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	case Continue;$/;"	c
DbgCommand.DisableBreakpoint	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	case DisableBreakpoint(index: int);$/;"	c
DbgCommand.DisableBreakpoint	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	case DisableBreakpoint(index: int);$/;"	c
DbgCommand.EnableBreakpoint	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	case EnableBreakpoint(index: int);$/;"	c
DbgCommand.EnableBreakpoint	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	case EnableBreakpoint(index: int);$/;"	c
DbgCommand.Info	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	case Info(info: Info);$/;"	c
DbgCommand.Info	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	case Info(info: Info);$/;"	c
DbgCommand.List	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	case List;$/;"	c
DbgCommand.List	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	case List;$/;"	c
DbgCommand.Next	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	case Next;$/;"	c
DbgCommand.Next	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	case Next;$/;"	c
DbgCommand.Run	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	case Run;$/;"	c
DbgCommand.Run	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	case Run;$/;"	c
DbgCommand.Set	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	case Set(local_idx: int, value: Value);$/;"	c
DbgCommand.Set	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	case Set(local_idx: int, value: Value);$/;"	c
DbgCommand.Step	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	case Step;$/;"	c
DbgCommand.Step	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	case Step;$/;"	c
DbgCommand.Unknown	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	case Unknown(cmd: string);$/;"	c
DbgCommand.Unknown	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	case Unknown(cmd: string);$/;"	c
Debug	$VIRGIL_WIZARD/src/engine/Debug.v3	/^component Debug {$/;"	n
DebugMonitor	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^class DebugMonitor extends Monitor {$/;"	c
DebugOnceProbe	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^private class DebugOnceProbe extends Probe {$/;"	c
DebugProbe	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^private class DebugProbe extends Probe {$/;"	c
DebugStepProbe	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^private class DebugStepProbe extends Probe {$/;"	c
Debugger	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^component Debugger {$/;"	n
DebuggerParser	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^class DebuggerParser {$/;"	c
Decl	$VIRGIL_WIZARD/src/engine/Module.v3	/^class Decl {$/;"	c
Decl2	$VIRGIL_WIZARD/src/engine/Module.v3	/^type Decl2 {$/;"	c
Decl2.Array	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case Array(index: int);$/;"	c
Decl2.Array	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case Array(index: int);$/;"	c
Decl2.Continuation	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case Continuation(index: int);$/;"	c
Decl2.Continuation	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case Continuation(index: int);$/;"	c
Decl2.Func	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case Func(index: int, sig_index: int);$/;"	c
Decl2.Func	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case Func(index: int, sig_index: int);$/;"	c
Decl2.Global	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case Global(index: int);$/;"	c
Decl2.Global	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case Global(index: int);$/;"	c
Decl2.Memory	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case Memory(index: int);$/;"	c
Decl2.Memory	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case Memory(index: int);$/;"	c
Decl2.Sig	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case Sig(index: int);$/;"	c
Decl2.Sig	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case Sig(index: int);$/;"	c
Decl2.Struct	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case Struct(index: int);$/;"	c
Decl2.Struct	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case Struct(index: int);$/;"	c
Decl2.Table	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case Table(index: int);$/;"	c
Decl2.Table	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case Table(index: int);$/;"	c
Decl2.Tag	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case Tag(index: int);$/;"	c
Decl2.Tag	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case Tag(index: int);$/;"	c
DeclFilter	$VIRGIL_WIZARD/src/util/DeclFilter.v3	/^class DeclFilter(pattern: string, list: List<(Matcher, Matcher)>) {$/;"	c
DeclFilters	$VIRGIL_WIZARD/src/util/DeclFilter.v3	/^component DeclFilters {$/;"	n
Declarative	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case Declarative;$/;"	d
Dir	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	Dir(0),$/;"	d
Direct	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case Direct(handler_pc: int, ex_slot: int, val_stack_top: int, sidetable_pos: int);$/;"	d
DisableBreakpoint	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	case DisableBreakpoint(index: int);$/;"	d
DispatchFunctionBytecodeVisitor	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^private class DispatchFunctionBytecodeVisitor(module: Module, bi: BytecodeIterator, counter: CountProbe) extends BytecodeVisitor {$/;"	c
DuplicateExport	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def DuplicateExport(export_index: int) {$/;"	m
DuplicateSection	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def DuplicateSection(sect: BpSection) {$/;"	m
DynInstrModule	$VIRGIL_WIZARD/src/modules/DynInstrModule.v3	/^class DynInstrModule extends HostModule {$/;"	c
DynamicLoc	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^type DynamicLoc(func: WasmFunction, pc: int, frame: TargetFrame) #unboxed { }$/;"	c
DynamicLoc	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	case DynamicLoc;$/;"	d
DynamicLocRef	$VIRGIL_WIZARD/src/engine/Meta.v3	/^class DynamicLocRef(loc: DynamicLoc) extends HostObject {$/;"	c
E2BIG	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	E2BIG(7),		\/\/ Argument list too long$/;"	d
EACCES	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	EACCES(13),		\/\/ Permission denied$/;"	d
EADDRINUSE	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	EADDRINUSE(98),		\/\/ Address already in use$/;"	d
EADDRNOTAVAIL	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	EADDRNOTAVAIL(99),	\/\/ Cannot assign requested address$/;"	d
EADV	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	EADV(68),		\/\/ Advertise error$/;"	d
EAFNOSUPPORT	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	EAFNOSUPPORT(97),	\/\/ Address family not supported by protocol$/;"	d
EAGAIN	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	EAGAIN(11),		\/\/ Try again$/;"	d
EALREADY	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	EALREADY(114),		\/\/ Operation already in progress$/;"	d
EBADE	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	EBADE(52),		\/\/ Invalid exchange$/;"	d
EBADF	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	EBADF(9),		\/\/ Bad file number$/;"	d
EBADFD	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	EBADFD(77),		\/\/ File descriptor in bad state$/;"	d
EBADMSG	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	EBADMSG(74),		\/\/ Not a data message$/;"	d
EBADR	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	EBADR(53),		\/\/ Invalid request descriptor$/;"	d
EBADRQC	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	EBADRQC(56),		\/\/ Invalid request code$/;"	d
EBADSLT	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	EBADSLT(57),		\/\/ Invalid slot$/;"	d
EBFONT	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	EBFONT(59),		\/\/ Bad font file format$/;"	d
EBUSY	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	EBUSY(16),		\/\/ Device or resource busy$/;"	d
ECANCELED	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	ECANCELED(125),		\/\/ Operation Canceled$/;"	d
ECHILD	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	ECHILD(10),		\/\/ No child processes$/;"	d
ECHRNG	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	ECHRNG(44),		\/\/ Channel number out of range$/;"	d
ECOMM	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	ECOMM(70),		\/\/ Communication error on send$/;"	d
ECONNABORTED	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	ECONNABORTED(103),	\/\/ Software caused connection abort$/;"	d
ECONNREFUSED	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	ECONNREFUSED(111),	\/\/ Connection refused$/;"	d
ECONNRESET	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	ECONNRESET(104),	\/\/ Connection reset by peer$/;"	d
EDEADLK	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	EDEADLK(35),		\/\/ Resource deadlock would occur$/;"	d
EDESTADDRREQ	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	EDESTADDRREQ(89),	\/\/ Destination address required$/;"	d
EDOM	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	EDOM(33),		\/\/ Math argument out of domain of func$/;"	d
EDOTDOT	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	EDOTDOT(73),		\/\/ RFS specific error$/;"	d
EDQUOT	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	EDQUOT(122),		\/\/ Quota exceeded$/;"	d
EEXIST	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	EEXIST(17),		\/\/ File exists$/;"	d
EFAULT	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	EFAULT(14),		\/\/ Bad address$/;"	d
EFBIG	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	EFBIG(27),		\/\/ File too large$/;"	d
EHOSTDOWN	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	EHOSTDOWN(112),		\/\/ Host is down$/;"	d
EHOSTUNREACH	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	EHOSTUNREACH(113),	\/\/ No route to host$/;"	d
EIDRM	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	EIDRM(43),		\/\/ Identifier removed$/;"	d
EILSEQ	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	EILSEQ(84),		\/\/ Illegal byte sequence$/;"	d
EINPROGRESS	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	EINPROGRESS(115),	\/\/ Operation now in progress$/;"	d
EINTR	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	EINTR(4),		\/\/ Interrupted system call$/;"	d
EINVAL	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	EINVAL(22),		\/\/ Invalid argument$/;"	d
EINVAL	$VIRGIL_WIZARD/src/modules/wasi/x86-64-linux/WspOnePathResolver-x86-64-linux.v3	/^def EINVAL = 22;		\/\/ errno for invalid argument$/;"	d
EIO	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	EIO(5),			\/\/ I\/O error$/;"	d
EISCONN	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	EISCONN(106),		\/\/ Transport endpoint is already connected$/;"	d
EISDIR	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	EISDIR(21),		\/\/ Is a directory$/;"	d
EISNAM	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	EISNAM(120),		\/\/ Is a named type file$/;"	d
EKEYEXPIRED	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	EKEYEXPIRED(127),	\/\/ Key has expired$/;"	d
EKEYREJECTED	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	EKEYREJECTED(129),	\/\/ Key was rejected by service$/;"	d
EKEYREVOKED	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	EKEYREVOKED(128),	\/\/ Key has been revoked$/;"	d
EL2HLT	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	EL2HLT(51),		\/\/ Level 2 halted$/;"	d
EL2NSYNC	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	EL2NSYNC(45),		\/\/ Level 2 not synchronized$/;"	d
EL3HLT	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	EL3HLT(46),		\/\/ Level 3 halted$/;"	d
EL3RST	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	EL3RST(47),		\/\/ Level 3 reset$/;"	d
ELEM	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def ELEM = [ImmKind.ELEM_INDEX];$/;"	d
ELEM_DROP	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	ELEM_DROP		(0xFC, 0x0D, "elem.drop", imm.ELEM, sig.v_v),$/;"	d
ELEM_INDEX	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	ELEM_INDEX,		\/\/ ELEM$/;"	d
ELEM_SEGMENT_DROPPED	$VIRGIL_WIZARD/src/engine/Trap.v3	/^	ELEM_SEGMENT_DROPPED,$/;"	d
ELEM_TABLE	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def ELEM_TABLE = [ImmKind.ELEM_INDEX, ImmKind.TABLE_INDEX];$/;"	d
ELIBACC	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	ELIBACC(79),		\/\/ Can not access a needed shared library$/;"	d
ELIBBAD	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	ELIBBAD(80),		\/\/ Accessing a corrupted shared library$/;"	d
ELIBEXEC	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	ELIBEXEC(83),		\/\/ Cannot exec a shared library directly$/;"	d
ELIBMAX	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	ELIBMAX(82),		\/\/ Attempting to link in too many shared libraries$/;"	d
ELIBSCN	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	ELIBSCN(81),		\/\/ .lib section in a.out corrupted$/;"	d
ELNRNG	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	ELNRNG(48),		\/\/ Link number out of range$/;"	d
ELOOP	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	ELOOP(40),		\/\/ Too many symbolic links encountered$/;"	d
ELSE	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def ELSE() {$/;"	m
ELSE	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	ELSE			(0x00, 0x05, "else", imm.NONE, null),$/;"	d
EMEDIUMTYPE	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	EMEDIUMTYPE(124),	\/\/ Wrong medium type$/;"	d
EMFILE	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	EMFILE(24),		\/\/ Too many open files$/;"	d
EMLINK	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	EMLINK(31),		\/\/ Too many links$/;"	d
EMPTY	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^	EMPTY,			\/\/ contains no frames$/;"	d
EMPTY	$VIRGIL_WIZARD/src/util/CfgPrinter.v3	/^	EMPTY,$/;"	d
EMPTY_PROBE	$VIRGIL_WIZARD/src/engine/Instrumentation.v3	/^def EMPTY_PROBE = Probe.new();$/;"	d
EMSGSIZE	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	EMSGSIZE(90),		\/\/ Message too long$/;"	d
EMULTIHOP	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	EMULTIHOP(72),		\/\/ Multihop attempted$/;"	d
ENAMETOOLONG	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	ENAMETOOLONG(36),	\/\/ File name too long$/;"	d
ENAVAIL	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	ENAVAIL(119),		\/\/ No XENIX semaphores available$/;"	d
END	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def END() {$/;"	m
END	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	END			(0x00, 0x0B, "end", imm.NONE, null),$/;"	d
END_BLOCK	$VIRGIL_WIZARD/src/util/CfgPrinter.v3	/^	END_BLOCK$/;"	d
ENETDOWN	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	ENETDOWN(100),		\/\/ Network is down$/;"	d
ENETRESET	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	ENETRESET(102),		\/\/ Network dropped connection because of reset$/;"	d
ENETUNREACH	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	ENETUNREACH(101),	\/\/ Network is unreachable$/;"	d
ENFILE	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	ENFILE(23),		\/\/ File table overflow$/;"	d
ENOANO	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	ENOANO(55),		\/\/ No anode$/;"	d
ENOBUFS	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	ENOBUFS(105),		\/\/ No buffer space available$/;"	d
ENOCSI	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	ENOCSI(50),		\/\/ No CSI structure available$/;"	d
ENODATA	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	ENODATA(61),		\/\/ No data available$/;"	d
ENODEV	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	ENODEV(19),		\/\/ No such device$/;"	d
ENOENT	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	ENOENT(2),		\/\/ No such file or directory$/;"	d
ENOENT	$VIRGIL_WIZARD/src/modules/wasi/x86-64-linux/WspOnePathResolver-x86-64-linux.v3	/^def ENOENT = 2;			\/\/ errno for no entry$/;"	d
ENOEXEC	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	ENOEXEC(8),		\/\/ Exec format error$/;"	d
ENOKEY	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	ENOKEY(126),		\/\/ Required key not available$/;"	d
ENOLCK	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	ENOLCK(37),		\/\/ No record locks available$/;"	d
ENOLINK	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	ENOLINK(67),		\/\/ Link has been severed$/;"	d
ENOMEDIUM	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	ENOMEDIUM(123),		\/\/ No medium found$/;"	d
ENOMEM	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	ENOMEM(12),		\/\/ Out of memory$/;"	d
ENOMSG	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	ENOMSG(42),		\/\/ No message of desired type$/;"	d
ENONET	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	ENONET(64),		\/\/ Machine is not on the network$/;"	d
ENOPKG	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	ENOPKG(65),		\/\/ Package not installed$/;"	d
ENOPROTOOPT	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	ENOPROTOOPT(92),	\/\/ Protocol not available$/;"	d
ENOSPC	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	ENOSPC(28),		\/\/ No space left on device$/;"	d
ENOSR	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	ENOSR(63),		\/\/ Out of streams resources$/;"	d
ENOSTR	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	ENOSTR(60),		\/\/ Device not a stream$/;"	d
ENOSYS	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	ENOSYS(38),		\/\/ Function not implemented$/;"	d
ENOTBLK	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	ENOTBLK(15),		\/\/ Block device required$/;"	d
ENOTCONN	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	ENOTCONN(107),		\/\/ Transport endpoint is not connected$/;"	d
ENOTDIR	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	ENOTDIR(20),		\/\/ Not a directory$/;"	d
ENOTEMPTY	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	ENOTEMPTY(39),		\/\/ Directory not empty$/;"	d
ENOTNAM	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	ENOTNAM(118),		\/\/ Not a XENIX named type file$/;"	d
ENOTRECOVERABLE	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	ENOTRECOVERABLE(131)	\/\/ State not recoverable$/;"	d
ENOTSOCK	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	ENOTSOCK(88),		\/\/ Socket operation on non-socket$/;"	d
ENOTTY	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	ENOTTY(25),		\/\/ Not a typewriter$/;"	d
ENOTUNIQ	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	ENOTUNIQ(76),		\/\/ Name not unique on network$/;"	d
ENTRYPOINT	$VIRGIL_WIZARD/src/wizeng.main.v3	/^	def ENTRYPOINT = group.newStringOption("invoke", null, "Invoke the given function.");$/;"	d
ENXIO	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	ENXIO(6),		\/\/ No such device or address$/;"	d
EOF	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	EOF,$/;"	d
EOFMagicWord	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def EOFMagicWord() {$/;"	m
EOFWasmVersion	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def EOFWasmVersion() {$/;"	m
EOPNOTSUPP	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	EOPNOTSUPP(95),		\/\/ Operation not supported on transport endpoint$/;"	d
EOVERFLOW	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	EOVERFLOW(75),		\/\/ Value too large for defined data type$/;"	d
EOWNERDEAD	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	EOWNERDEAD(130),	\/\/ Owner died$/;"	d
EPERM	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	EPERM(1),		\/\/ Operation not permitted$/;"	d
EPFNOSUPPORT	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	EPFNOSUPPORT(96),	\/\/ Protocol family not supported$/;"	d
EPIPE	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	EPIPE(32),		\/\/ Broken pipe$/;"	d
EPROTO	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	EPROTO(71),		\/\/ Protocol error$/;"	d
EPROTONOSUPPORT	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	EPROTONOSUPPORT(93),	\/\/ Protocol not supported$/;"	d
EPROTOTYPE	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	EPROTOTYPE(91),		\/\/ Protocol wrong type for socket$/;"	d
EQ	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	EQ		(0x6D, -19), \/\/ -0x13$/;"	d
EQ	$VIRGIL_WIZARD/src/engine/Type.v3	/^	case EQ;$/;"	d
EQREF	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	EQREF		(0x6D, -19), \/\/$/;"	d
EQREF	$VIRGIL_WIZARD/src/engine/Type.v3	/^	def EQREF = ValueType.Ref(true, HeapType.EQ);$/;"	d
EQREF_NONNULL	$VIRGIL_WIZARD/src/engine/Type.v3	/^	def EQREF_NONNULL = ValueType.Ref(false, HeapType.EQ);$/;"	d
EQUAL	$VIRGIL_WIZARD/src/engine/Type.v3	/^	EQUAL,$/;"	d
ERANGE	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	ERANGE(34),		\/\/ Math result not representable$/;"	d
EREMCHG	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	EREMCHG(78),		\/\/ Remote address changed$/;"	d
EREMOTE	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	EREMOTE(66),		\/\/ Object is remote$/;"	d
EREMOTEIO	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	EREMOTEIO(121),		\/\/ Remote I\/O error$/;"	d
ERESTART	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	ERESTART(85),		\/\/ Interrupted system call should be restarted$/;"	d
EROFS	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	EROFS(30),		\/\/ Read-only file system$/;"	d
ERROR	$VIRGIL_WIZARD/src/engine/Trap.v3	/^	ERROR$/;"	d
ESHUTDOWN	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	ESHUTDOWN(108),		\/\/ Cannot send after transport endpoint shutdown$/;"	d
ESOCKTNOSUPPORT	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	ESOCKTNOSUPPORT(94),	\/\/ Socket type not supported$/;"	d
ESPIPE	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	ESPIPE(29),		\/\/ Illegal seek$/;"	d
ESRCH	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	ESRCH(3),		\/\/ No such process$/;"	d
ESRMNT	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	ESRMNT(69),		\/\/ Srmount error$/;"	d
ESTALE	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	ESTALE(116),		\/\/ Stale NFS file handle$/;"	d
ESTRPIPE	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	ESTRPIPE(86),		\/\/ Streams pipe error$/;"	d
ETIME	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	ETIME(62),		\/\/ Timer expired$/;"	d
ETIMEDOUT	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	ETIMEDOUT(110),		\/\/ Connection timed out$/;"	d
ETOOMANYREFS	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	ETOOMANYREFS(109),	\/\/ Too many references: cannot splice$/;"	d
ETXTBSY	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	ETXTBSY(26),		\/\/ Text file busy$/;"	d
EUCLEAN	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	EUCLEAN(117),		\/\/ Structure needs cleaning$/;"	d
EUNATCH	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	EUNATCH(49),		\/\/ Protocol driver not attached$/;"	d
EUSERS	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	EUSERS(87),		\/\/ Too many users$/;"	d
EXCEEDED_LIMIT	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	EXCEEDED_LIMIT,$/;"	d
EXCEPTION_HANDLING	$VIRGIL_WIZARD/src/engine/Extension.v3	/^	EXCEPTION_HANDLING("exception-handling", "Exception handling"),$/;"	d
EXDEV	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	EXDEV(18),		\/\/ Cross-device link$/;"	d
EXFULL	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^	EXFULL(54),		\/\/ Exchange full$/;"	d
EXIST	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	EXIST		(20, "File exists."),$/;"	d
EXN	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	EXN		(0x69, -23), \/\/ -0x17$/;"	d
EXN	$VIRGIL_WIZARD/src/engine/Type.v3	/^	case EXN;$/;"	d
EXNREF	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	EXNREF		(0x69, -23), \/\/$/;"	d
EXNREF	$VIRGIL_WIZARD/src/engine/Type.v3	/^	def EXNREF = ValueType.Ref(true, HeapType.EXN);$/;"	d
EXNREF_NONNULL	$VIRGIL_WIZARD/src/engine/Type.v3	/^	def EXNREF_NONNULL = ValueType.Ref(false, HeapType.EXN);$/;"	d
EXPECTED	$VIRGIL_WIZARD/src/SpectestMode.v3	/^	def EXPECTED = group.newPathOption("expected", null, "File containing expected failures to be ignored.")$/;"	d
EXPECTED_EXPORT	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	EXPECTED_EXPORT,$/;"	d
EXPECTED_MAXIMUM	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	EXPECTED_MAXIMUM,$/;"	d
EXPECTED_ZERO_BYTE	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	EXPECTED_ZERO_BYTE,$/;"	d
EXPOSE	$VIRGIL_WIZARD/src/wizeng.main.v3	/^	def EXPOSE = group.newStringOption("expose", null, "Expose the given host module's functionality to programs.")$/;"	d
EXT	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^private enum CallKind {INT, EXT}$/;"	d
EXTENDED_CONST	$VIRGIL_WIZARD/src/engine/Extension.v3	/^	EXTENDED_CONST("extended-const", "Extended constant expressions"),$/;"	d
EXTENDED_CONSTANT	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	EXTENDED_CONSTANT,$/;"	d
EXTERN	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	EXTERN		(0x6F, -17), \/\/ -0x11$/;"	d
EXTERN	$VIRGIL_WIZARD/src/engine/Type.v3	/^	case EXTERN;$/;"	d
EXTERNREF	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	EXTERNREF	(0x6F, -17), \/\/$/;"	d
EXTERNREF	$VIRGIL_WIZARD/src/engine/Type.v3	/^	def EXTERNREF = ValueType.Ref(true, HeapType.EXTERN);$/;"	d
EXTERNREF_NONNULL	$VIRGIL_WIZARD/src/engine/Type.v3	/^	def EXTERNREF_NONNULL = ValueType.Ref(false, HeapType.EXTERN);$/;"	d
EXTERN_CONVERT_ANY	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	EXTERN_CONVERT_ANY		(0xFB, 0x1B, "extern.convert_any", imm.NONE, null), \/\/ XXX: could have sig$/;"	d
EX_HANDLERS	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	EX_HANDLERS		\/\/ EX_HANDLERS$/;"	d
EX_TAG_ALL	$VIRGIL_WIZARD/src/engine/Module.v3	/^	def EX_TAG_ALL = -1;$/;"	d
EX_TAG_DELEGATE	$VIRGIL_WIZARD/src/engine/Module.v3	/^	def EX_TAG_DELEGATE = -2;$/;"	d
E_	$VIRGIL_WIZARD/src/monitors/R3BackEndMonitor.v3	/^def E_ = MonitorRegistry.add($/;"	d
E_	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^def E_ = MonitorRegistry.add($/;"	d
EffectiveAddr	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^type EffectiveAddr(oob: bool, is64: bool, base_reg: Reg, index_reg: Reg, offset: u32) #unboxed;$/;"	c
ElemDecl	$VIRGIL_WIZARD/src/engine/Module.v3	/^class ElemDecl(elemtype: ValueType, mode: SegmentMode, details: ElemDetails) {$/;"	c
ElemDetails	$VIRGIL_WIZARD/src/engine/Module.v3	/^type ElemDetails {$/;"	c
ElemDetails.Exprs	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case Exprs(vals: Array<InitExpr>); \/* ext:reference-types *\/$/;"	c
ElemDetails.Exprs	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case Exprs(vals: Array<InitExpr>); \/* ext:reference-types *\/$/;"	c
ElemDetails.FuncRefs	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case FuncRefs(vals: Array<int>);$/;"	c
ElemDetails.FuncRefs	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case FuncRefs(vals: Array<int>);$/;"	c
Element	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	Element(9),$/;"	d
ElementTypeMismatch	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def ElementTypeMismatch(expected: ValueType, got: ValueType) {$/;"	m
ElementTypeMismatch2	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def ElementTypeMismatch2(expected: StorageType, got: StorageType) {$/;"	m
EmptyBlock	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	EmptyBlock	(0x40, -64) \/\/ XXX: move?$/;"	d
EmptyControlStack	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def EmptyControlStack() {$/;"	m
EmptyValueStack	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def EmptyValueStack() {$/;"	m
EmptyValueStackExpecting	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def EmptyValueStackExpecting(e: ValueType) {$/;"	m
EnableBreakpoint	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	case EnableBreakpoint(index: int);$/;"	d
Engine	$VIRGIL_WIZARD/src/engine/Engine.v3	/^class Engine {$/;"	c
EngineOptions	$VIRGIL_WIZARD/src/engine/EngineOptions.v3	/^component EngineOptions {$/;"	n
EnterProbe	$VIRGIL_WIZARD/src/monitors/FuncProfileMonitor.v3	/^private class EnterProbe(module: Module, func: FuncDecl) extends Probe {$/;"	c
EnterProbe	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^private class EnterProbe(handler: EventHandler, func: FuncDecl) extends Probe {$/;"	c
Error	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	case Error(error: WasmError, pc: int, msg: string) { }$/;"	d
ErrorBuilder	$VIRGIL_WIZARD/src/util/ErrorBuilder.v3	/^class ErrorBuilder extends StringBuilder {$/;"	c
ErrorGen	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^class ErrorGen(filename: string) {$/;"	c
EventHandler	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^private class EventHandler {$/;"	c
ExHandler	$VIRGIL_WIZARD/src/engine/Module.v3	/^type ExHandler(index: int, handler_pc: int, push_exnref: bool, ex_slot: int, val_stack_top: int, sidetable_pos: int) #unboxed { }$/;"	c
ExHandlerEntry	$VIRGIL_WIZARD/src/engine/Module.v3	/^type ExHandlerEntry(index: int, tag: int, start: int, end: int, info: ExHandlerInfo) #unboxed;$/;"	c
ExHandlerInfo	$VIRGIL_WIZARD/src/engine/Module.v3	/^type ExHandlerInfo {$/;"	c
ExHandlerInfo.Direct	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case Direct(handler_pc: int, ex_slot: int, val_stack_top: int, sidetable_pos: int);$/;"	c
ExHandlerInfo.Direct	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case Direct(handler_pc: int, ex_slot: int, val_stack_top: int, sidetable_pos: int);$/;"	c
ExHandlerInfo.Sidetable	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case Sidetable(push_exnref: bool, sidetable_entry: int);$/;"	c
ExHandlerInfo.Sidetable	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case Sidetable(push_exnref: bool, sidetable_entry: int);$/;"	c
ExecStack	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^class ExecStack {$/;"	c
Execute	$VIRGIL_WIZARD/src/engine/Execute.v3	/^component Execute {$/;"	n
ExecuteOptions	$VIRGIL_WIZARD/src/engine/Execute.v3	/^component ExecuteOptions {$/;"	n
ExecutionStrategy	$VIRGIL_WIZARD/src/engine/Execute.v3	/^class ExecutionStrategy {$/;"	c
ExitProbe	$VIRGIL_WIZARD/src/monitors/FuncProfileMonitor.v3	/^private class ExitProbe(p: EnterProbe) extends Probe {$/;"	c
ExitProbe	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^private class ExitProbe(handler: EventHandler, func_index: int) extends Probe {$/;"	c
ExpectedArrayType	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def ExpectedArrayType(ht: HeapTypeDecl) {$/;"	m
ExpectedAtomicFenceZeroByte	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def ExpectedAtomicFenceZeroByte(val: byte) {$/;"	m
ExpectedConcreteRefType	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def ExpectedConcreteRefType(got: ValueType) {$/;"	m
ExpectedContInParam	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def ExpectedContInParam(cont: ContDecl) {$/;"	m
ExpectedContSigType	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def ExpectedContSigType(ht: HeapType) {$/;"	m
ExpectedContinuation	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def ExpectedContinuation(ht: HeapTypeDecl) {$/;"	m
ExpectedDataFlagsZeroByte	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def ExpectedDataFlagsZeroByte(flags: byte) {$/;"	m
ExpectedDefaultableHeapType	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def ExpectedDefaultableHeapType(got: ValueType) {$/;"	m
ExpectedElemKindZeroByte	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def ExpectedElemKindZeroByte(elem_kind: byte) {$/;"	m
ExpectedElementsZeroByte	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def ExpectedElementsZeroByte(flags: byte) {$/;"	m
ExpectedEmptySwitchTagParams	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def ExpectedEmptySwitchTagParams(sig: SigDecl) {$/;"	m
ExpectedEndInInit	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def ExpectedEndInInit(end: int) {$/;"	m
ExpectedFunctionTypeT	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def ExpectedFunctionTypeT(g: ValueType) {$/;"	m
ExpectedHeapSuperType	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def ExpectedHeapSuperType(ref: ValueType, ht: HeapType) {$/;"	m
ExpectedI32InitExpr	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def ExpectedI32InitExpr(vt: ValueType) {$/;"	m
ExpectedImmutableGlobalInInit	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def ExpectedImmutableGlobalInInit(g: GlobalDecl) {$/;"	m
ExpectedImportedGlobalInInit	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def ExpectedImportedGlobalInInit(g: GlobalDecl) {$/;"	m
ExpectedMemoryIndexZeroByte	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def ExpectedMemoryIndexZeroByte(memory_index: byte) {$/;"	m
ExpectedPackedType	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def ExpectedPackedType(st: StorageType) {$/;"	m
ExpectedRefType	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def ExpectedRefType(got: ValueType) {$/;"	m
ExpectedSharedMemoryMaximum	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def ExpectedSharedMemoryMaximum() {$/;"	m
ExpectedSignature	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def ExpectedSignature(ht: HeapTypeDecl) {$/;"	m
ExpectedStructType	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def ExpectedStructType(ht: HeapTypeDecl) {$/;"	m
ExpectedSubtype	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def ExpectedSubtype(ft: ValueType, tt: ValueType) {$/;"	m
ExpectedSubtypeH	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def ExpectedSubtypeH(ft: HeapTypeDecl, tt: HeapTypeDecl) {$/;"	m
ExpectedTableIndexZeroByte	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def ExpectedTableIndexZeroByte(table_index: byte) {$/;"	m
ExpectedTableTypeZeroByte	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def ExpectedTableTypeZeroByte(val: byte) {$/;"	m
ExpectedType	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def ExpectedType(e: ValueType, g: ValueType) {$/;"	m
ExpectedTypeWithDefaultValue	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def ExpectedTypeWithDefaultValue(got: ValueType) {$/;"	m
ExpectedUnpackedType	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def ExpectedUnpackedType(st: StorageType) {$/;"	m
Export	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	Export(7),$/;"	d
Exportable	$VIRGIL_WIZARD/src/engine/Instance.v3	/^class Exportable {$/;"	c
ExportedType	$VIRGIL_WIZARD/src/engine/Instance.v3	/^class ExportedType extends Exportable {$/;"	c
ExportedValueType	$VIRGIL_WIZARD/src/engine/Instance.v3	/^class ExportedValueType(src: ExportedType, vt: ValueType) extends ExportedType {$/;"	c
Exprs	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case Exprs(vals: Array<InitExpr>); \/* ext:reference-types *\/$/;"	d
Extension	$VIRGIL_WIZARD/src/engine/Extension.v3	/^enum Extension(short_name: string, help: string) {$/;"	e
Extensions	$VIRGIL_WIZARD/src/engine/Extension.v3	/^component Extensions {$/;"	n
ExternRefNull	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case ExternRefNull;$/;"	d
ExternalDebuggerBreakpointProbe	$VIRGIL_WIZARD/src/util/ProbeUtil.v3	/^class ExternalDebuggerBreakpointProbe extends Probe {$/;"	c
F32	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^	U8, U16, U32, U64, F32, F64, V128, REF$/;"	d
F32	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	F32		(0x7D, -3),$/;"	d
F32	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case F32(val: u32);$/;"	d
F32	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def F32 = [ImmKind.F32];$/;"	d
F32	$VIRGIL_WIZARD/src/engine/Sidetable.v3	/^	COMPLEX, I8, U8, I16, U16, I32, U32, I64, F32, F64, V128, REF$/;"	d
F32	$VIRGIL_WIZARD/src/engine/Type.v3	/^	case F32;						\/\/ 32-bit float$/;"	d
F32	$VIRGIL_WIZARD/src/engine/Value.v3	/^	case F32(bits: u32);$/;"	d
F32X4_ABS	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F32X4_ABS			(0xFD, 224, "f32x4.abs", imm.NONE, sig.s_s),$/;"	d
F32X4_ABS	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F32X4_ABS =			do_s_s_x4(_, V128_F32X4_ABS);$/;"	d
F32X4_ADD	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F32X4_ADD			(0xFD, 228, "f32x4.add", imm.NONE, sig.ss_s),$/;"	d
F32X4_ADD	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F32X4_ADD =			do_ss_s_x4(_, _, F32_ADD_U);$/;"	d
F32X4_CEIL	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F32X4_CEIL			(0xFD, 103, "f32x4.ceil", imm.NONE, sig.s_s),$/;"	d
F32X4_CEIL	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F32X4_CEIL =		do_s_s_x4(_, V128_F32_CEIL);$/;"	d
F32X4_CONVERT_I32X4_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F32X4_CONVERT_I32X4_S		(0xFD, 250, "f32x4.convert_i32x4_s", imm.NONE, sig.s_s),$/;"	d
F32X4_CONVERT_I32X4_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F32X4_CONVERT_I32X4_S =		do_s_s_x4(_, V128_F32_CONVERT_I32_S);$/;"	d
F32X4_CONVERT_I32X4_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F32X4_CONVERT_I32X4_U		(0xFD, 251, "f32x4.convert_i32x4_u", imm.NONE, sig.s_s),$/;"	d
F32X4_CONVERT_I32X4_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F32X4_CONVERT_I32X4_U =		do_s_s_x4(_, V128_F32_CONVERT_I32_U);$/;"	d
F32X4_DEMOTE_F64X2_ZERO	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F32X4_DEMOTE_F64X2_ZERO		(0xFD, 94, "f32x4.demote_f64x2_zero", imm.NONE, sig.s_s),$/;"	d
F32X4_DEMOTE_F64X2_ZERO	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F32X4_DEMOTE_F64X2_ZERO =		do_s_s_x4_high_zero(_, V128_F32_DEMOTE_F64);$/;"	d
F32X4_DIV	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F32X4_DIV			(0xFD, 231, "f32x4.div", imm.NONE, sig.ss_s),$/;"	d
F32X4_DIV	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F32X4_DIV =			do_ss_s_x4(_, _, F32_DIV_U);$/;"	d
F32X4_EQ	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F32X4_EQ			(0xFD, 65, "f32x4.eq", imm.NONE, sig.ss_s),$/;"	d
F32X4_EQ	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F32X4_EQ =			do_ss_s_x4(_, _, V128_F32X4_EQ);$/;"	d
F32X4_EXTRACT_LANE	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F32X4_EXTRACT_LANE		(0xFD, 31, "f32x4.extract_lane", imm.LANE, sig.s_f),$/;"	d
F32X4_FLOOR	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F32X4_FLOOR			(0xFD, 104, "f32x4.floor", imm.NONE, sig.s_s),$/;"	d
F32X4_FLOOR	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F32X4_FLOOR =		do_s_s_x4(_, V128_F32_FLOOR);$/;"	d
F32X4_GE	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F32X4_GE			(0xFD, 70, "f32x4.ge", imm.NONE, sig.ss_s),$/;"	d
F32X4_GE	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F32X4_GE =			commute_binop(F32X4_LE);$/;"	d
F32X4_GT	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F32X4_GT			(0xFD, 68, "f32x4.gt", imm.NONE, sig.ss_s),$/;"	d
F32X4_GT	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F32X4_GT =			commute_binop(F32X4_LT);$/;"	d
F32X4_LE	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F32X4_LE			(0xFD, 69, "f32x4.le", imm.NONE, sig.ss_s),$/;"	d
F32X4_LE	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F32X4_LE =			do_ss_s_x4(_, _, V128_F32X4_LE);$/;"	d
F32X4_LT	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F32X4_LT			(0xFD, 67, "f32x4.lt", imm.NONE, sig.ss_s),$/;"	d
F32X4_LT	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F32X4_LT =			do_ss_s_x4(_, _, V128_F32X4_LT);$/;"	d
F32X4_MAX	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F32X4_MAX			(0xFD, 233, "f32x4.max", imm.NONE, sig.ss_s),$/;"	d
F32X4_MAX	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F32X4_MAX =			do_ss_s_x4(_, _, V128_F32X4_MAX);$/;"	d
F32X4_MIN	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F32X4_MIN			(0xFD, 232, "f32x4.min", imm.NONE, sig.ss_s),$/;"	d
F32X4_MIN	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F32X4_MIN =			do_ss_s_x4(_, _, V128_F32X4_MIN);$/;"	d
F32X4_MUL	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F32X4_MUL			(0xFD, 230, "f32x4.mul", imm.NONE, sig.ss_s),$/;"	d
F32X4_MUL	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F32X4_MUL =			do_ss_s_x4(_, _, F32_MUL_U);$/;"	d
F32X4_NE	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F32X4_NE			(0xFD, 66, "f32x4.ne", imm.NONE, sig.ss_s),$/;"	d
F32X4_NE	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F32X4_NE =			do_ss_s_x4(_, _, V128_F32X4_NE);$/;"	d
F32X4_NEAREST	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F32X4_NEAREST			(0xFD, 106, "f32x4.nearest", imm.NONE, sig.s_s),$/;"	d
F32X4_NEAREST	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F32X4_NEAREST =		do_s_s_x4(_, V128_F32_NEAREST);$/;"	d
F32X4_NEG	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F32X4_NEG			(0xFD, 225, "f32x4.neg", imm.NONE, sig.s_s),$/;"	d
F32X4_NEG	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F32X4_NEG =			do_s_s_x4(_, F32_NEG_U);$/;"	d
F32X4_PMAX	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F32X4_PMAX			(0xFD, 235, "f32x4.pmax", imm.NONE, sig.ss_s),$/;"	d
F32X4_PMAX	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def F32X4_PMAX(a: float, b: float) -> float {$/;"	m
F32X4_PMIN	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F32X4_PMIN			(0xFD, 234, "f32x4.pmin", imm.NONE, sig.ss_s),$/;"	d
F32X4_PMIN	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def F32X4_PMIN(a: float, b: float) -> float {$/;"	m
F32X4_RELAXED_MADD	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F32X4_RELAXED_MADD 			(0xFD,	0x105, "f32x4.relaxed_madd", imm.NONE, sig.sss_s),$/;"	d
F32X4_RELAXED_MAX	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F32X4_RELAXED_MAX 			(0xFD,	0x10E, "f32x4.relaxed_max", imm.NONE, sig.ss_s),$/;"	d
F32X4_RELAXED_MIN	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F32X4_RELAXED_MIN 			(0xFD,	0x10D, "f32x4.relaxed_min", imm.NONE, sig.ss_s),$/;"	d
F32X4_RELAXED_NMADD	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F32X4_RELAXED_NMADD 			(0xFD,	0x106, "f32x4.relaxed_nmadd", imm.NONE, sig.sss_s),$/;"	d
F32X4_REPLACE_LANE	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F32X4_REPLACE_LANE		(0xFD, 32, "f32x4.replace_lane", imm.LANE, sig.sf_s),$/;"	d
F32X4_SPLAT	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F32X4_SPLAT			(0xFD, 19, "f32x4.splat", imm.NONE, sig.f_s),$/;"	d
F32X4_SQRT	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F32X4_SQRT			(0xFD, 227, "f32x4.sqrt", imm.NONE, sig.s_s),$/;"	d
F32X4_SQRT	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F32X4_SQRT =		do_s_s_x4(_, F32_SQRT_U);$/;"	d
F32X4_SUB	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F32X4_SUB			(0xFD, 229, "f32x4.sub", imm.NONE, sig.ss_s),$/;"	d
F32X4_SUB	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F32X4_SUB =			do_ss_s_x4(_, _, F32_SUB_U);$/;"	d
F32X4_TRUNC	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F32X4_TRUNC			(0xFD, 105, "f32x4.trunc", imm.NONE, sig.s_s),$/;"	d
F32X4_TRUNC	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F32X4_TRUNC =		do_s_s_x4(_, V128_F32_TRUNC);$/;"	d
F32_ABS	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F32_ABS			(0x00, 0x8B, "f32.abs", imm.NONE, sig.f_f),$/;"	d
F32_ABS	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F32_ABS	= float.abs;$/;"	d
F32_ADD	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def F32_ADD() {$/;"	m
F32_ADD	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F32_ADD			(0x00, 0x92, "f32.add", imm.NONE, sig.ff_f),$/;"	d
F32_ADD	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F32_ADD	= float.+;$/;"	d
F32_ADD_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def F32_ADD_U = do_ff_f(_, _, float.+);$/;"	d
F32_CEIL	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F32_CEIL		(0x00, 0x8D, "f32.ceil", imm.NONE, sig.f_f),$/;"	d
F32_CEIL	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F32_CEIL(a: float) -> float {$/;"	f
F32_CONST	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def F32_CONST() {$/;"	m
F32_CONST	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F32_CONST		(0x00, 0x43, "f32.const", imm.F32, sig.v_f),$/;"	d
F32_CONVERT_I32_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F32_CONVERT_I32_S	(0x00, 0xB2, "f32.convert_i32_s", imm.NONE, sig.i_f),$/;"	d
F32_CONVERT_I32_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F32_CONVERT_I32_S	= float.roundi<i32>;$/;"	d
F32_CONVERT_I32_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F32_CONVERT_I32_U	(0x00, 0xB3, "f32.convert_i32_u", imm.NONE, sig.i_f),$/;"	d
F32_CONVERT_I32_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F32_CONVERT_I32_U	= float.roundi<u32>;$/;"	d
F32_CONVERT_I64_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F32_CONVERT_I64_S	(0x00, 0xB4, "f32.convert_i64_s", imm.NONE, sig.l_f),$/;"	d
F32_CONVERT_I64_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F32_CONVERT_I64_S	= float.roundi<i64>;$/;"	d
F32_CONVERT_I64_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F32_CONVERT_I64_U	(0x00, 0xB5, "f32.convert_i64_u", imm.NONE, sig.l_f),$/;"	d
F32_CONVERT_I64_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F32_CONVERT_I64_U	= float.roundi<u64>;$/;"	d
F32_COPYSIGN	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F32_COPYSIGN		(0x00, 0x98, "f32.copysign", imm.NONE, sig.ff_f),$/;"	d
F32_COPYSIGN	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F32_COPYSIGN(a: float, b: float) -> float {$/;"	f
F32_DEMOTE_F64	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F32_DEMOTE_F64		(0x00, 0xB6, "f32.demote_f64", imm.NONE, sig.d_f),$/;"	d
F32_DEMOTE_F64	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F32_DEMOTE_F64	= float.roundd;$/;"	d
F32_DIV	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def F32_DIV() {$/;"	m
F32_DIV	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F32_DIV			(0x00, 0x95, "f32.div", imm.NONE, sig.ff_f),$/;"	d
F32_DIV	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F32_DIV	= float.\/;$/;"	d
F32_DIV_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def F32_DIV_U = do_ff_f(_, _, float.\/);$/;"	d
F32_EQ	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def F32_EQ() {$/;"	m
F32_EQ	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F32_EQ			(0x00, 0x5B, "f32.eq", imm.NONE, sig.ff_i),$/;"	d
F32_EQ	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F32_EQ	= float.==;$/;"	d
F32_FLOOR	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F32_FLOOR		(0x00, 0x8E, "f32.floor", imm.NONE, sig.f_f),$/;"	d
F32_FLOOR	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F32_FLOOR(a: float) -> float {$/;"	f
F32_GE	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F32_GE			(0x00, 0x60, "f32.ge", imm.NONE, sig.ff_i),$/;"	d
F32_GE	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F32_GE	= float.>=;$/;"	d
F32_GT	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def F32_GT() {$/;"	m
F32_GT	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F32_GT			(0x00, 0x5E, "f32.gt", imm.NONE, sig.ff_i),$/;"	d
F32_GT	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F32_GT	= float.>;$/;"	d
F32_LE	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def F32_LE() {$/;"	m
F32_LE	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F32_LE			(0x00, 0x5F, "f32.le", imm.NONE, sig.ff_i),$/;"	d
F32_LE	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F32_LE	= float.<=;$/;"	d
F32_LOAD	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def F32_LOAD() {$/;"	m
F32_LOAD	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F32_LOAD		(0x00, 0x2A, "f32.load", imm.MEMARG, sig.i_f),$/;"	d
F32_LT	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def F32_LT() {$/;"	m
F32_LT	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F32_LT			(0x00, 0x5D, "f32.lt", imm.NONE, sig.ff_i),$/;"	d
F32_LT	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F32_LT	= float.<;$/;"	d
F32_MADD	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F32_MADD(ia: u32, ib: u32, ic: u32) -> u32 {$/;"	f
F32_MAX	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F32_MAX			(0x00, 0x97, "f32.max", imm.NONE, sig.ff_f),$/;"	d
F32_MAX	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F32_MAX(a: float, b: float) -> float {$/;"	f
F32_MIN	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F32_MIN			(0x00, 0x96, "f32.min", imm.NONE, sig.ff_f),$/;"	d
F32_MIN	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F32_MIN(a: float, b: float) -> float {$/;"	f
F32_MUL	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def F32_MUL() {$/;"	m
F32_MUL	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F32_MUL			(0x00, 0x94, "f32.mul", imm.NONE, sig.ff_f),$/;"	d
F32_MUL	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F32_MUL	= float.*;$/;"	d
F32_MUL_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def F32_MUL_U = do_ff_f(_, _, float.*);$/;"	d
F32_NE	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def F32_NE() {$/;"	m
F32_NE	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F32_NE			(0x00, 0x5C, "f32.ne", imm.NONE, sig.ff_i),$/;"	d
F32_NE	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F32_NE	= float.!=;$/;"	d
F32_NEAREST	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F32_NEAREST		(0x00, 0x90, "f32.nearest", imm.NONE, sig.f_f),$/;"	d
F32_NEAREST	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F32_NEAREST	= float.round;$/;"	d
F32_NEG	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F32_NEG			(0x00, 0x8C, "f32.neg", imm.NONE, sig.f_f),$/;"	d
F32_NEG	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F32_NEG(a: float) -> float {$/;"	f
F32_NEG_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def F32_NEG_U = do_f_f(_, V3Eval.F32_NEG);$/;"	d
F32_NMADD	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F32_NMADD(ia: u32, ib: u32, ic: u32) -> u32 {$/;"	f
F32_REINTERPRET_I32	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F32_REINTERPRET_I32	(0x00, 0xBE, "f32.reinterpret_i32", imm.NONE, sig.i_f),$/;"	d
F32_REINTERPRET_I32	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F32_REINTERPRET_I32	= float.view<u32>;$/;"	d
F32_SQRT	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def F32_SQRT() {$/;"	m
F32_SQRT	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F32_SQRT		(0x00, 0x91, "f32.sqrt", imm.NONE, sig.f_f),$/;"	d
F32_SQRT	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F32_SQRT	= float.sqrt;$/;"	d
F32_SQRT_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def F32_SQRT_U = do_f_f(_, float.sqrt);$/;"	d
F32_STORE	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def F32_STORE() {$/;"	m
F32_STORE	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F32_STORE		(0x00, 0x38, "f32.store", imm.MEMARG, sig.if_v),$/;"	d
F32_SUB	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def F32_SUB() {$/;"	m
F32_SUB	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F32_SUB			(0x00, 0x93, "f32.sub", imm.NONE, sig.ff_f),$/;"	d
F32_SUB	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F32_SUB	= float.-;$/;"	d
F32_SUB_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def F32_SUB_U = do_ff_f(_, _, float.-);$/;"	d
F32_TRUNC	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F32_TRUNC		(0x00, 0x8F, "f32.trunc", imm.NONE, sig.f_f),$/;"	d
F32_TRUNC	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F32_TRUNC(a: float) -> float {$/;"	f
F64	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^	U8, U16, U32, U64, F32, F64, V128, REF$/;"	d
F64	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	F64		(0x7C, -4),$/;"	d
F64	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case F64(val: u64);$/;"	d
F64	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def F64 = [ImmKind.F64];$/;"	d
F64	$VIRGIL_WIZARD/src/engine/Sidetable.v3	/^	COMPLEX, I8, U8, I16, U16, I32, U32, I64, F32, F64, V128, REF$/;"	d
F64	$VIRGIL_WIZARD/src/engine/Type.v3	/^	case F64;						\/\/ 64-bit float$/;"	d
F64	$VIRGIL_WIZARD/src/engine/Value.v3	/^	case F64(bits: u64);$/;"	d
F64X2_ABS	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F64X2_ABS			(0xFD, 236, "f64x2.abs", imm.NONE, sig.s_s),$/;"	d
F64X2_ABS	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F64X2_ABS =			do_s_s_x2(_, V128_F64X2_ABS);$/;"	d
F64X2_ADD	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F64X2_ADD			(0xFD, 240, "f64x2.add", imm.NONE, sig.ss_s),$/;"	d
F64X2_ADD	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F64X2_ADD =			do_ss_s_x2(_, _, F64_ADD_U);$/;"	d
F64X2_CEIL	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F64X2_CEIL			(0xFD, 116, "f64x2.ceil", imm.NONE, sig.s_s),$/;"	d
F64X2_CEIL	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F64X2_CEIL =		do_s_s_x2(_, V128_F64_CEIL);$/;"	d
F64X2_CONVERT_LOW_I32X4_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F64X2_CONVERT_LOW_I32X4_S	(0xFD, 254, "f64x2.convert_low_i32x4_s", imm.NONE, sig.s_s),$/;"	d
F64X2_CONVERT_LOW_I32X4_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F64X2_CONVERT_LOW_I32X4_S =		do_s_s_x2_low(_, V128_F64_CONVERT_LOW_I32_S);$/;"	d
F64X2_CONVERT_LOW_I32X4_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F64X2_CONVERT_LOW_I32X4_U	(0xFD, 255, "f64x2.convert_low_i32x4_u", imm.NONE, sig.s_s),$/;"	d
F64X2_CONVERT_LOW_I32X4_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F64X2_CONVERT_LOW_I32X4_U =		do_s_s_x2_low(_, V128_F64_CONVERT_LOW_I32_U);$/;"	d
F64X2_DIV	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F64X2_DIV			(0xFD, 243, "f64x2.div", imm.NONE, sig.ss_s),$/;"	d
F64X2_DIV	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F64X2_DIV =			do_ss_s_x2(_, _, F64_DIV_U);$/;"	d
F64X2_EQ	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F64X2_EQ			(0xFD, 71, "f64x2.eq", imm.NONE, sig.ss_s),$/;"	d
F64X2_EQ	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F64X2_EQ =			do_ss_s_x2(_, _, V128_F64X2_EQ);$/;"	d
F64X2_EXTRACT_LANE	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F64X2_EXTRACT_LANE		(0xFD, 33, "f64x2.extract_lane", imm.LANE, sig.s_d),$/;"	d
F64X2_FLOOR	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F64X2_FLOOR			(0xFD, 117, "f64x2.floor", imm.NONE, sig.s_s),$/;"	d
F64X2_FLOOR	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F64X2_FLOOR =		do_s_s_x2(_, V128_F64_FLOOR);$/;"	d
F64X2_GE	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F64X2_GE			(0xFD, 76, "f64x2.ge", imm.NONE, sig.ss_s),$/;"	d
F64X2_GE	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F64X2_GE =			commute_binop(F64X2_LE);$/;"	d
F64X2_GT	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F64X2_GT			(0xFD, 74, "f64x2.gt", imm.NONE, sig.ss_s),$/;"	d
F64X2_GT	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F64X2_GT =			commute_binop(F64X2_LT);	$/;"	d
F64X2_LE	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F64X2_LE			(0xFD, 75, "f64x2.le", imm.NONE, sig.ss_s),$/;"	d
F64X2_LE	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F64X2_LE =			do_ss_s_x2(_, _, V128_F64X2_LE);$/;"	d
F64X2_LT	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F64X2_LT			(0xFD, 73, "f64x2.lt", imm.NONE, sig.ss_s),$/;"	d
F64X2_LT	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F64X2_LT =			do_ss_s_x2(_, _, V128_F64X2_LT);$/;"	d
F64X2_MAX	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F64X2_MAX			(0xFD, 245, "f64x2.max", imm.NONE, sig.ss_s),$/;"	d
F64X2_MAX	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F64X2_MAX =			do_ss_s_x2(_, _, V128_F64X2_MAX);$/;"	d
F64X2_MIN	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F64X2_MIN			(0xFD, 244, "f64x2.min", imm.NONE, sig.ss_s),$/;"	d
F64X2_MIN	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F64X2_MIN =			do_ss_s_x2(_, _, V128_F64X2_MIN);$/;"	d
F64X2_MUL	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F64X2_MUL			(0xFD, 242, "f64x2.mul", imm.NONE, sig.ss_s),$/;"	d
F64X2_MUL	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F64X2_MUL =			do_ss_s_x2(_, _, F64_MUL_U);$/;"	d
F64X2_NE	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F64X2_NE			(0xFD, 72, "f64x2.ne", imm.NONE, sig.ss_s),$/;"	d
F64X2_NE	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F64X2_NE =			do_ss_s_x2(_, _, V128_F64X2_NE);$/;"	d
F64X2_NEAREST	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F64X2_NEAREST			(0xFD, 148, "f64x2.nearest", imm.NONE, sig.s_s),$/;"	d
F64X2_NEAREST	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F64X2_NEAREST =		do_s_s_x2(_, V128_F64_NEAREST);$/;"	d
F64X2_NEG	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F64X2_NEG			(0xFD, 237, "f64x2.neg", imm.NONE, sig.s_s),$/;"	d
F64X2_NEG	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F64X2_NEG =			do_s_s_x2(_, F64_NEG_U);$/;"	d
F64X2_PMAX	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F64X2_PMAX			(0xFD, 247, "f64x2.pmax", imm.NONE, sig.ss_s),$/;"	d
F64X2_PMAX	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def F64X2_PMAX(a: double, b: double) -> double {$/;"	m
F64X2_PMIN	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F64X2_PMIN			(0xFD, 246, "f64x2.pmin", imm.NONE, sig.ss_s),$/;"	d
F64X2_PMIN	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def F64X2_PMIN(a: double, b: double) -> double {$/;"	m
F64X2_PROMOTE_LOW_F32X4	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F64X2_PROMOTE_LOW_F32X4		(0xFD, 95, "f64x2.promote_low_f32x4", imm.NONE, sig.s_s),$/;"	d
F64X2_PROMOTE_LOW_F32X4	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F64X2_PROMOTE_LOW_F32X4 =		do_s_s_x2_low(_, V128_F64_PROMOTE_LOW_F32);$/;"	d
F64X2_RELAXED_MADD	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F64X2_RELAXED_MADD 			(0xFD,	0x107, "f64x2.relaxed_madd", imm.NONE, sig.sss_s),$/;"	d
F64X2_RELAXED_MAX	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F64X2_RELAXED_MAX 			(0xFD,	0x110, "f64x2.relaxed_max", imm.NONE, sig.ss_s),$/;"	d
F64X2_RELAXED_MIN	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F64X2_RELAXED_MIN 			(0xFD,	0x10F, "f64x2.relaxed_min", imm.NONE, sig.ss_s),$/;"	d
F64X2_RELAXED_NMADD	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F64X2_RELAXED_NMADD 			(0xFD,	0x108, "f64x2.relaxed_nmadd", imm.NONE, sig.sss_s),$/;"	d
F64X2_REPLACE_LANE	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F64X2_REPLACE_LANE		(0xFD, 34, "f64x2.replace_lane", imm.LANE, sig.sd_s),$/;"	d
F64X2_SPLAT	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F64X2_SPLAT			(0xFD, 20, "f64x2.splat", imm.NONE, sig.d_s),$/;"	d
F64X2_SQRT	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F64X2_SQRT			(0xFD, 239, "f64x2.sqrt", imm.NONE, sig.s_s),$/;"	d
F64X2_SQRT	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F64X2_SQRT =		do_s_s_x2(_, F64_SQRT_U);$/;"	d
F64X2_SUB	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F64X2_SUB			(0xFD, 241, "f64x2.sub", imm.NONE, sig.ss_s),$/;"	d
F64X2_SUB	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F64X2_SUB =			do_ss_s_x2(_, _, F64_SUB_U);$/;"	d
F64X2_TRUNC	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F64X2_TRUNC			(0xFD, 122, "f64x2.trunc", imm.NONE, sig.s_s),$/;"	d
F64X2_TRUNC	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F64X2_TRUNC =		do_s_s_x2(_, V128_F64_TRUNC);$/;"	d
F64_ABS	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F64_ABS			(0x00, 0x99, "f64.abs", imm.NONE, sig.d_d),$/;"	d
F64_ABS	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F64_ABS	= double.abs;$/;"	d
F64_ADD	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F64_ADD			(0x00, 0xA0, "f64.add", imm.NONE, sig.dd_d),$/;"	d
F64_ADD	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F64_ADD	= double.+;$/;"	d
F64_ADD_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def F64_ADD_U = do_dd_d(_, _, double.+);$/;"	d
F64_CEIL	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F64_CEIL		(0x00, 0x9B, "f64.ceil", imm.NONE, sig.d_d),$/;"	d
F64_CEIL	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F64_CEIL(a: double) -> double {$/;"	f
F64_CONST	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F64_CONST		(0x00, 0x44, "f64.const", imm.F64, sig.v_d),$/;"	d
F64_CONVERT_I32_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F64_CONVERT_I32_S	(0x00, 0xB7, "f64.convert_i32_s", imm.NONE, sig.i_d),$/;"	d
F64_CONVERT_I32_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F64_CONVERT_I32_S	= double.roundi<i32>;$/;"	d
F64_CONVERT_I32_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F64_CONVERT_I32_U	(0x00, 0xB8, "f64.convert_i32_u", imm.NONE, sig.i_d),$/;"	d
F64_CONVERT_I32_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F64_CONVERT_I32_U	= double.roundi<u32>;$/;"	d
F64_CONVERT_I64_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F64_CONVERT_I64_S	(0x00, 0xB9, "f64.convert_i64_s", imm.NONE, sig.l_d),$/;"	d
F64_CONVERT_I64_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F64_CONVERT_I64_S	= double.roundi<i64>;$/;"	d
F64_CONVERT_I64_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F64_CONVERT_I64_U	(0x00, 0xBA, "f64.convert_i64_u", imm.NONE, sig.l_d),$/;"	d
F64_CONVERT_I64_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F64_CONVERT_I64_U	= double.roundi<u64>;$/;"	d
F64_COPYSIGN	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F64_COPYSIGN		(0x00, 0xA6, "f64.copysign", imm.NONE, sig.dd_d),$/;"	d
F64_COPYSIGN	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F64_COPYSIGN(a: double, b: double) -> double {$/;"	f
F64_DIV	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F64_DIV			(0x00, 0xA3, "f64.div", imm.NONE, sig.dd_d),$/;"	d
F64_DIV	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F64_DIV	= double.\/;$/;"	d
F64_DIV_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def F64_DIV_U = do_dd_d(_, _, double.\/);$/;"	d
F64_EQ	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F64_EQ			(0x00, 0x61, "f64.eq", imm.NONE, sig.dd_i),$/;"	d
F64_EQ	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F64_EQ	= double.==;$/;"	d
F64_FLOOR	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F64_FLOOR		(0x00, 0x9C, "f64.floor", imm.NONE, sig.d_d),$/;"	d
F64_FLOOR	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F64_FLOOR(a: double) -> double {$/;"	f
F64_GE	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F64_GE			(0x00, 0x66, "f64.ge", imm.NONE, sig.dd_i),$/;"	d
F64_GE	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F64_GE	= double.>=;$/;"	d
F64_GT	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F64_GT			(0x00, 0x64, "f64.gt", imm.NONE, sig.dd_i),$/;"	d
F64_GT	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F64_GT	= double.>;$/;"	d
F64_LE	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F64_LE			(0x00, 0x65, "f64.le", imm.NONE, sig.dd_i),$/;"	d
F64_LE	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F64_LE	= double.<=;$/;"	d
F64_LOAD	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def F64_LOAD() {$/;"	m
F64_LOAD	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F64_LOAD		(0x00, 0x2B, "f64.load", imm.MEMARG, sig.i_d),$/;"	d
F64_LT	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F64_LT			(0x00, 0x63, "f64.lt", imm.NONE, sig.dd_i),$/;"	d
F64_LT	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F64_LT	= double.<;$/;"	d
F64_MADD	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F64_MADD(ia: u64, ib: u64, ic: u64) -> u64 {$/;"	f
F64_MAX	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F64_MAX			(0x00, 0xA5, "f64.max", imm.NONE, sig.dd_d),$/;"	d
F64_MAX	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F64_MAX(a: double, b: double) -> double {$/;"	f
F64_MIN	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F64_MIN			(0x00, 0xA4, "f64.min", imm.NONE, sig.dd_d),$/;"	d
F64_MIN	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F64_MIN(a: double, b: double) -> double {$/;"	f
F64_MUL	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F64_MUL			(0x00, 0xA2, "f64.mul", imm.NONE, sig.dd_d),$/;"	d
F64_MUL	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F64_MUL	= double.*;$/;"	d
F64_MUL_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def F64_MUL_U = do_dd_d(_, _, double.*);$/;"	d
F64_NE	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F64_NE			(0x00, 0x62, "f64.ne", imm.NONE, sig.dd_i),$/;"	d
F64_NE	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F64_NE	= double.!=;$/;"	d
F64_NEAREST	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F64_NEAREST		(0x00, 0x9E, "f64.nearest", imm.NONE, sig.d_d),$/;"	d
F64_NEAREST	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F64_NEAREST	= double.round;$/;"	d
F64_NEG	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F64_NEG			(0x00, 0x9A, "f64.neg", imm.NONE, sig.d_d),$/;"	d
F64_NEG	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F64_NEG(a: double) -> double {$/;"	f
F64_NEG_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def F64_NEG_U = do_d_d(_, V3Eval.F64_NEG);$/;"	d
F64_NMADD	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F64_NMADD(ia: u64, ib: u64, ic: u64) -> u64 {$/;"	f
F64_PROMOTE_F32	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F64_PROMOTE_F32		(0x00, 0xBB, "f64.promote_f32", imm.NONE, sig.f_d),$/;"	d
F64_PROMOTE_F32	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F64_PROMOTE_F32	= double.!<float>;$/;"	d
F64_REINTERPRET_I64	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F64_REINTERPRET_I64	(0x00, 0xBF, "f64.reinterpret_i64", imm.NONE, sig.l_d),$/;"	d
F64_REINTERPRET_I64	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F64_REINTERPRET_I64	= double.view<u64>;$/;"	d
F64_SQRT	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F64_SQRT		(0x00, 0x9F, "f64.sqrt", imm.NONE, sig.d_d),$/;"	d
F64_SQRT	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F64_SQRT	= double.sqrt;$/;"	d
F64_SQRT_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def F64_SQRT_U = do_d_d(_, double.sqrt);$/;"	d
F64_STORE	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def F64_STORE() {$/;"	m
F64_STORE	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F64_STORE		(0x00, 0x39, "f64.store", imm.MEMARG, sig.id_v),$/;"	d
F64_SUB	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F64_SUB			(0x00, 0xA1, "f64.sub", imm.NONE, sig.dd_d),$/;"	d
F64_SUB	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F64_SUB	= double.-;$/;"	d
F64_SUB_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def F64_SUB_U = do_dd_d(_, _, double.-);$/;"	d
F64_TRUNC	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	F64_TRUNC		(0x00, 0x9D, "f64.trunc", imm.NONE, sig.d_d),$/;"	d
F64_TRUNC	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def F64_TRUNC(a: double) -> double {$/;"	f
FAILED_CAST	$VIRGIL_WIZARD/src/engine/Trap.v3	/^	FAILED_CAST,$/;"	d
FATAL	$VIRGIL_WIZARD/src/engine/TraceOptions.v3	/^	def FATAL = group.newFlag("fatal", setFatal, "Aborts upon parsing, validation, or test failure.");$/;"	d
FAULT	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	FAULT		(21, "Bad address."),$/;"	d
FBIG	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	FBIG		(22, "File too large."),$/;"	d
FIELD_INDEX	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	FIELD_INDEX,		\/\/ FIELD$/;"	d
FILE_NOT_FOUND	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	FILE_NOT_FOUND,$/;"	d
FLOAT_UNREPRESENTABLE	$VIRGIL_WIZARD/src/engine/Trap.v3	/^	FLOAT_UNREPRESENTABLE,$/;"	d
FUNC	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	FUNC		(0x70, -16), \/\/ -0x10$/;"	d
FUNC	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def FUNC = [ImmKind.FUNC_INDEX];$/;"	d
FUNC	$VIRGIL_WIZARD/src/util/Palette.v3	/^	FUNC		(TermColors.WHITE),$/;"	d
FUNCREF	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	FUNCREF		(0x70, -16), \/\/$/;"	d
FUNCREF	$VIRGIL_WIZARD/src/engine/Type.v3	/^	def FUNCREF = ValueType.Ref(true, HeapType.Func(null));$/;"	d
FUNCREF_NONNULL	$VIRGIL_WIZARD/src/engine/Type.v3	/^	def FUNCREF_NONNULL = ValueType.Ref(false, HeapType.Func(null));$/;"	d
FUNCTION_REFERENCES	$VIRGIL_WIZARD/src/engine/Extension.v3	/^	FUNCTION_REFERENCES("function-references", "Typed function references"),$/;"	d
FUNC_COUNT_MISMATCH	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	FUNC_COUNT_MISMATCH,$/;"	d
FUNC_INDEX	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	FUNC_INDEX,		\/\/ FUNC$/;"	d
FUNC_INVALID	$VIRGIL_WIZARD/src/engine/Trap.v3	/^	FUNC_INVALID,$/;"	d
FUNC_SIG_MISMATCH	$VIRGIL_WIZARD/src/engine/Trap.v3	/^	FUNC_SIG_MISMATCH,$/;"	d
FailedToCompile	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def FailedToCompile(index: int, msg: string) {$/;"	m
FastIntTuning	$VIRGIL_WIZARD/src/engine/Tuning.v3	/^component FastIntTuning {$/;"	n
FeatureDisable	$VIRGIL_WIZARD/src/engine/Tuning.v3	/^component FeatureDisable {$/;"	n
FieldKind	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^enum FieldKind {$/;"	e
FieldOffset	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^type FieldOffset;$/;"	c
FileDescriptorMap	$VIRGIL_WIZARD/src/util/FileDescriptorMap.v3	/^class FileDescriptorMap(max: int) {$/;"	c
FileNotFound	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def FileNotFound(filename: string) {$/;"	m
FillProbe	$VIRGIL_WIZARD/src/monitors/MemStatsMonitor.v3	/^class FillProbe(stats: MemStats) extends Probe {$/;"	c
FinalSupertype	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def FinalSupertype(decl: HeapTypeDecl, sup: HeapType) {$/;"	m
FixedArray	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case FixedArray(t: HeapType.Array, vals: Array<InitExpr>);$/;"	d
FloatTrunc	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^class FloatTrunc(isI64: bool, isF64: bool, isSigned: bool) {$/;"	c
FloatUtils	$VIRGIL_WIZARD/src/util/FloatUtil.v3	/^component FloatUtils {$/;"	n
Fname	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	case Fname;$/;"	d
FrameAccessor	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^class FrameAccessor {$/;"	c
FrameAccessor	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	case FrameAccessor;$/;"	d
FrameAccessorRef	$VIRGIL_WIZARD/src/engine/Meta.v3	/^class FrameAccessorRef(accessor: FrameAccessor) extends HostObject {$/;"	c
FrameLoc	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^type FrameLoc { \/\/ TODO: #unboxed$/;"	c
FrameLoc.Host	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^	case Host(func: HostFunction, frame: HostFrame);$/;"	c
FrameLoc.Host	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^	case Host(func: HostFunction, frame: HostFrame);$/;"	c
FrameLoc.None	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^	case None;$/;"	c
FrameLoc.None	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^	case None;$/;"	c
FrameLoc.Wasm	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^	case Wasm(func: WasmFunction, pc: int, frame: TargetFrame);$/;"	c
FrameLoc.Wasm	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^	case Wasm(func: WasmFunction, pc: int, frame: TargetFrame);$/;"	c
FrameWriter	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^class FrameWriter {$/;"	c
Func	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case Func(index: int, sig_index: int);$/;"	d
Func	$VIRGIL_WIZARD/src/engine/Type.v3	/^	case Func(sig: SigDecl);$/;"	d
Func	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	case Func;$/;"	d
FuncArgsEntry	$VIRGIL_WIZARD/src/monitors/ConstMonitor.v3	/^private class FuncArgsEntry(module: Module, func: FuncDecl) extends Probe {$/;"	c
FuncArgsMonitor	$VIRGIL_WIZARD/src/monitors/ConstMonitor.v3	/^class FuncArgsMonitor extends Monitor {$/;"	c
FuncCountMismatch	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def FuncCountMismatch(expected: u32, count: u32) {$/;"	m
FuncDecl	$VIRGIL_WIZARD/src/engine/Module.v3	/^class FuncDecl(sig_index: int) extends Decl {$/;"	c
FuncDecl_cur_bytecode	$VIRGIL_WIZARD/src/engine/x86-64/V3Offsets.v3	/^	def FuncDecl_cur_bytecode	= int.view(Pointer.atField(decl.cur_bytecode) - Pointer.atObject(decl));$/;"	d
FuncDecl_entry_probed	$VIRGIL_WIZARD/src/engine/x86-64/V3Offsets.v3	/^	def FuncDecl_entry_probed	= int.view(Pointer.atField(decl.entry_probed) - Pointer.atObject(decl));$/;"	d
FuncDecl_frame_var_tags	$VIRGIL_WIZARD/src/engine/x86-64/V3Offsets.v3	/^	def FuncDecl_frame_var_tags	= int.view(Pointer.atField(decl.frame_var_tags) - Pointer.atObject(decl));$/;"	d
FuncDecl_orig_bytecode	$VIRGIL_WIZARD/src/engine/x86-64/V3Offsets.v3	/^	def FuncDecl_orig_bytecode	= int.view(Pointer.atField(decl.orig_bytecode) - Pointer.atObject(decl));$/;"	d
FuncDecl_sidetable	$VIRGIL_WIZARD/src/engine/x86-64/V3Offsets.v3	/^	def FuncDecl_sidetable		= int.view(Pointer.atField(decl.sidetable.entries) - Pointer.atObject(decl));$/;"	d
FuncDecl_sig	$VIRGIL_WIZARD/src/engine/x86-64/V3Offsets.v3	/^	def FuncDecl_sig		= int.view(Pointer.atField(decl.sig) - Pointer.atObject(decl));$/;"	d
FuncDecl_target_code	$VIRGIL_WIZARD/src/engine/x86-64/V3Offsets.v3	/^	def FuncDecl_target_code	= int.view(Pointer.atField(decl.target_code.spc_entry) - Pointer.atObject(decl));$/;"	d
FuncDecl_tierup_trigger	$VIRGIL_WIZARD/src/engine/x86-64/V3Offsets.v3	/^	def FuncDecl_tierup_trigger	= int.view(Pointer.atField(decl.tierup_trigger) - Pointer.atObject(decl));$/;"	d
FuncEntry	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^	case FuncEntry(idx: int, func_name: string, params: Array<Value>);$/;"	d
FuncEntry	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	case FuncEntry;$/;"	d
FuncEntryTable	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^	case FuncEntryTable(idx: int, table_idx: int, table_name: string, params: Array<Value>);$/;"	d
FuncExit	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	case FuncExit;$/;"	d
FuncHandlerInfo	$VIRGIL_WIZARD/src/engine/Module.v3	/^class FuncHandlerInfo {$/;"	c
FuncProfileMonitor	$VIRGIL_WIZARD/src/monitors/FuncProfileMonitor.v3	/^class FuncProfileMonitor extends Monitor {$/;"	c
FuncRef	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case FuncRef(func_index: int, decl: FuncDecl);$/;"	d
FuncRefNull	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case FuncRefNull;$/;"	d
FuncRefs	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case FuncRefs(vals: Array<int>);$/;"	d
FuncStats	$VIRGIL_WIZARD/src/monitors/CallsMonitor.v3	/^private class FuncStats(module: Module, func: FuncDecl) {$/;"	c
FuncWithLoopEnterProbe	$VIRGIL_WIZARD/src/monitors/ModuleInstrumenter.v3	/^private class FuncWithLoopEnterProbe(frameAccessors: ListStack<FrameAccessor>, f: DynamicLoc -> ProbeAction) extends Probe {$/;"	c
FuncWithLoopExitProbe	$VIRGIL_WIZARD/src/monitors/ModuleInstrumenter.v3	/^private class FuncWithLoopExitProbe(frameAccessors: ListStack<FrameAccessor>, f: DynamicLoc -> ProbeAction) extends Probe {$/;"	c
Function	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^class Function { }$/;"	c
Function	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	Function(3),$/;"	d
Function	$VIRGIL_WIZARD/src/engine/Instance.v3	/^class Function(sig: SigDecl) extends Object {$/;"	c
FunctionEnter	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	case FunctionEnter(func_index: int) {$/;"	d
FunctionPc	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	case FunctionPc(func_index: int, pc: int) {$/;"	d
Function_sig	$VIRGIL_WIZARD/src/engine/x86-64/V3Offsets.v3	/^	def Function_sig		= int.view(Pointer.atField(wf.sig) - Pointer.atObject(wf));$/;"	d
FwRef	$VIRGIL_WIZARD/src/engine/Type.v3	/^	case FwRef(index: int);$/;"	d
GB	$VIRGIL_WIZARD/src/engine/native/NativeMemory.v3	/^def GB = 1024u * 1024u * 1024u;$/;"	d
GC	$VIRGIL_WIZARD/src/engine/Extension.v3	/^	GC("gc", "Garbage collection"),$/;"	d
GLOBAL	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def GLOBAL = [ImmKind.GLOBAL_INDEX];$/;"	d
GLOBAL_GET	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def GLOBAL_GET() {$/;"	m
GLOBAL_GET	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	GLOBAL_GET		(0x00, 0x23, "global.get", imm.GLOBAL, null),$/;"	d
GLOBAL_GET	$VIRGIL_WIZARD/src/engine/Runtime.v3	/^	def GLOBAL_GET(stack: ExecStack, instance: Instance, global_index: u31) {$/;"	f
GLOBAL_INDEX	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	GLOBAL_INDEX,		\/\/ GLOBAL$/;"	d
GLOBAL_SET	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def GLOBAL_SET() {$/;"	m
GLOBAL_SET	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	GLOBAL_SET		(0x00, 0x24, "global.set", imm.GLOBAL, null),$/;"	d
GLOBAL_SET	$VIRGIL_WIZARD/src/engine/Runtime.v3	/^	def GLOBAL_SET(stack: ExecStack, instance: Instance, global_index: u31) {$/;"	f
GPRs	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^def R: X86_64Regs, GPRs = X86_64Regs.GPRs, C: X86_64Conds;$/;"	d
GRAY	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^def GRAY    = '\x01';$/;"	d
GRAY1	$VIRGIL_WIZARD/src/util/TermColors.v3	/^	def GRAY1	= "\x1b[38;5;241m";$/;"	d
GRAY10	$VIRGIL_WIZARD/src/util/TermColors.v3	/^	def GRAY10	= "\x1b[38;5;250m";$/;"	d
GRAY11	$VIRGIL_WIZARD/src/util/TermColors.v3	/^	def GRAY11	= "\x1b[38;5;251m";$/;"	d
GRAY12	$VIRGIL_WIZARD/src/util/TermColors.v3	/^	def GRAY12	= "\x1b[38;5;252m";$/;"	d
GRAY13	$VIRGIL_WIZARD/src/util/TermColors.v3	/^	def GRAY13	= "\x1b[38;5;253m";$/;"	d
GRAY14	$VIRGIL_WIZARD/src/util/TermColors.v3	/^	def GRAY14	= "\x1b[38;5;254m";$/;"	d
GRAY2	$VIRGIL_WIZARD/src/util/TermColors.v3	/^	def GRAY2	= "\x1b[38;5;242m";$/;"	d
GRAY3	$VIRGIL_WIZARD/src/util/TermColors.v3	/^	def GRAY3	= "\x1b[38;5;243m";$/;"	d
GRAY4	$VIRGIL_WIZARD/src/util/TermColors.v3	/^	def GRAY4	= "\x1b[38;5;244m";$/;"	d
GRAY5	$VIRGIL_WIZARD/src/util/TermColors.v3	/^	def GRAY5	= "\x1b[38;5;245m";$/;"	d
GRAY6	$VIRGIL_WIZARD/src/util/TermColors.v3	/^	def GRAY6	= "\x1b[38;5;246m";$/;"	d
GRAY7	$VIRGIL_WIZARD/src/util/TermColors.v3	/^	def GRAY7	= "\x1b[38;5;247m";$/;"	d
GRAY8	$VIRGIL_WIZARD/src/util/TermColors.v3	/^	def GRAY8	= "\x1b[38;5;248m";$/;"	d
GRAY9	$VIRGIL_WIZARD/src/util/TermColors.v3	/^	def GRAY9	= "\x1b[38;5;249m";$/;"	d
GREEN	$VIRGIL_WIZARD/src/util/TermColors.v3	/^	def GREEN	= "\x1B[0;32m";$/;"	d
GUEST_OPCODE_READ	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^	case GUEST_OPCODE_READ(bytecode: u8, offset: u32);$/;"	d
Glob	$VIRGIL_WIZARD/src/util/DeclFilter.v3	/^	case Glob(matcher: GlobMatcher);$/;"	d
Global	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	Global(6),$/;"	d
Global	$VIRGIL_WIZARD/src/engine/Instance.v3	/^class Global(valtype: ValueType, decl: GlobalDecl) extends Exportable {$/;"	c
Global	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case Global(index: int);$/;"	d
GlobalDecl	$VIRGIL_WIZARD/src/engine/Module.v3	/^class GlobalDecl(valtype: ValueType, mutable: bool, init: InitExpr) extends Decl {$/;"	c
GlobalGet	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^	case GlobalGet(idx: int, value: Value);$/;"	d
GlobalGetProbe	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^private class GlobalGetProbe(handler: EventHandler, global_index: u31) extends Probe {$/;"	c
GlobalLimits	$VIRGIL_WIZARD/src/engine/Limits.v3	/^component GlobalLimits {$/;"	n
GlobalSetProbe	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^private class GlobalSetProbe(handler: EventHandler, global_index: u31) extends Probe {$/;"	c
GlobalVisitor	$VIRGIL_WIZARD/src/monitors/ModuleInstrumenter.v3	/^private class GlobalVisitor(module: Module, f: DynamicLoc -> ProbeAction, isWrite: bool, targetIndex: u31) extends BytecodeVisitor {$/;"	c
Global_high	$VIRGIL_WIZARD/src/engine/x86-64/V3Offsets.v3	/^	def Global_high			= int.view(Pointer.atField(global.high) - Pointer.atObject(global));$/;"	d
Global_low	$VIRGIL_WIZARD/src/engine/x86-64/V3Offsets.v3	/^	def Global_low			= int.view(Pointer.atField(global.low) - Pointer.atObject(global));$/;"	d
Global_tag	$VIRGIL_WIZARD/src/engine/x86-64/V3Offsets.v3	/^	def Global_tag			= int.view(Pointer.atField(global.tag) - Pointer.atObject(global));$/;"	d
GlobalsMonitor	$VIRGIL_WIZARD/src/monitors/GlobalsMonitor.v3	/^class GlobalsMonitor extends Monitor {$/;"	c
GrowProbe	$VIRGIL_WIZARD/src/monitors/MemStatsMonitor.v3	/^class GrowProbe(stats: MemStats) extends Probe {$/;"	c
GuestProfileState	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^private class GuestProfileState(counter: CountProbe, dispatch_func_id: int, output_prefix: string) {$/;"	c
HAS_EDGE	$VIRGIL_WIZARD/src/util/CfgPrinter.v3	/^	HAS_EDGE,$/;"	d
HAS_MEM_INDEX	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def HAS_MEM_INDEX = 0x40u8;$/;"	d
HEAPT	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def HEAPT = [ImmKind.HEAP_TYPE];$/;"	d
HEAP_TYPE	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	HEAP_TYPE,		\/\/ HEAPT$/;"	d
HELP	$VIRGIL_WIZARD/src/wizeng.main.v3	/^	def HELP = group.newFlag("help", printHelp, "Print command-line help.");$/;"	d
HIGH	$VIRGIL_WIZARD/src/util/Palette.v3	/^	HIGH		(TermColors.BRIGHTRED),$/;"	d
HOST	$VIRGIL_WIZARD/src/engine/Trap.v3	/^	HOST,$/;"	d
HOSTUNREACH	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	HOSTUNREACH	(23, "Host is unreachable."),$/;"	d
Handled	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^	case Handled(at: WasmStack);$/;"	d
HasMax	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	HasMax(0x01),$/;"	d
HasPageSize	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	HasPageSize(0x08),$/;"	d
HeapArray	$VIRGIL_WIZARD/src/engine/Value.v3	/^class HeapArray extends HeapObject {$/;"	c
HeapArray_vals	$VIRGIL_WIZARD/src/engine/x86-64/V3Offsets.v3	/^	def HeapArray_vals		= int.view(Pointer.atField(ha.vals) - Pointer.atObject(ha));$/;"	d
HeapObject	$VIRGIL_WIZARD/src/engine/Value.v3	/^class HeapObject(decl: HeapTypeDecl, vals: Array<Value>) extends Object {}$/;"	c
HeapStruct	$VIRGIL_WIZARD/src/engine/Value.v3	/^class HeapStruct extends HeapObject {$/;"	c
HeapType	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	HeapType(5)$/;"	d
HeapType	$VIRGIL_WIZARD/src/engine/Type.v3	/^type HeapType {$/;"	c
HeapType.ANY	$VIRGIL_WIZARD/src/engine/Type.v3	/^	case ANY;$/;"	c
HeapType.ANY	$VIRGIL_WIZARD/src/engine/Type.v3	/^	case ANY;$/;"	c
HeapType.Array	$VIRGIL_WIZARD/src/engine/Type.v3	/^	case Array(array: ArrayDecl);$/;"	c
HeapType.Array	$VIRGIL_WIZARD/src/engine/Type.v3	/^	case Array(array: ArrayDecl);$/;"	c
HeapType.Cont	$VIRGIL_WIZARD/src/engine/Type.v3	/^	case Cont(cont: ContDecl);$/;"	c
HeapType.Cont	$VIRGIL_WIZARD/src/engine/Type.v3	/^	case Cont(cont: ContDecl);$/;"	c
HeapType.EQ	$VIRGIL_WIZARD/src/engine/Type.v3	/^	case EQ;$/;"	c
HeapType.EQ	$VIRGIL_WIZARD/src/engine/Type.v3	/^	case EQ;$/;"	c
HeapType.EXN	$VIRGIL_WIZARD/src/engine/Type.v3	/^	case EXN;$/;"	c
HeapType.EXN	$VIRGIL_WIZARD/src/engine/Type.v3	/^	case EXN;$/;"	c
HeapType.EXTERN	$VIRGIL_WIZARD/src/engine/Type.v3	/^	case EXTERN;$/;"	c
HeapType.EXTERN	$VIRGIL_WIZARD/src/engine/Type.v3	/^	case EXTERN;$/;"	c
HeapType.Func	$VIRGIL_WIZARD/src/engine/Type.v3	/^	case Func(sig: SigDecl);$/;"	c
HeapType.Func	$VIRGIL_WIZARD/src/engine/Type.v3	/^	case Func(sig: SigDecl);$/;"	c
HeapType.FwRef	$VIRGIL_WIZARD/src/engine/Type.v3	/^	case FwRef(index: int);$/;"	c
HeapType.FwRef	$VIRGIL_WIZARD/src/engine/Type.v3	/^	case FwRef(index: int);$/;"	c
HeapType.I31	$VIRGIL_WIZARD/src/engine/Type.v3	/^	case I31;$/;"	c
HeapType.I31	$VIRGIL_WIZARD/src/engine/Type.v3	/^	case I31;$/;"	c
HeapType.NOCONT	$VIRGIL_WIZARD/src/engine/Type.v3	/^	case NOCONT;$/;"	c
HeapType.NOCONT	$VIRGIL_WIZARD/src/engine/Type.v3	/^	case NOCONT;$/;"	c
HeapType.NOEXN	$VIRGIL_WIZARD/src/engine/Type.v3	/^	case NOEXN;$/;"	c
HeapType.NOEXN	$VIRGIL_WIZARD/src/engine/Type.v3	/^	case NOEXN;$/;"	c
HeapType.NOEXTERN	$VIRGIL_WIZARD/src/engine/Type.v3	/^	case NOEXTERN;$/;"	c
HeapType.NOEXTERN	$VIRGIL_WIZARD/src/engine/Type.v3	/^	case NOEXTERN;$/;"	c
HeapType.NOFUNC	$VIRGIL_WIZARD/src/engine/Type.v3	/^	case NOFUNC;$/;"	c
HeapType.NOFUNC	$VIRGIL_WIZARD/src/engine/Type.v3	/^	case NOFUNC;$/;"	c
HeapType.NONE	$VIRGIL_WIZARD/src/engine/Type.v3	/^	case NONE;$/;"	c
HeapType.NONE	$VIRGIL_WIZARD/src/engine/Type.v3	/^	case NONE;$/;"	c
HeapType.Struct	$VIRGIL_WIZARD/src/engine/Type.v3	/^	case Struct(sdecl: StructDecl);$/;"	c
HeapType.Struct	$VIRGIL_WIZARD/src/engine/Type.v3	/^	case Struct(sdecl: StructDecl);$/;"	c
HeapTypeCache	$VIRGIL_WIZARD/src/engine/Canon.v3	/^class HeapTypeCache {$/;"	c
HeapTypeDecl	$VIRGIL_WIZARD/src/engine/Type.v3	/^class HeapTypeDecl(final: bool, supertypes: Array<HeapType>) extends Decl {$/;"	c
HeapTypeDecls	$VIRGIL_WIZARD/src/engine/Type.v3	/^component HeapTypeDecls {$/;"	n
Host	$VIRGIL_WIZARD/src/engine/Type.v3	/^	case Host(host: HostType);				\/\/ host-defined types$/;"	d
Host	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^	case Host(func: HostFunction, frame: HostFrame);$/;"	d
HostAdapter_of	$VIRGIL_WIZARD/src/modules/HostModuleBuilder.v3	/^class HostAdapter_of<I> {$/;"	c
HostFrame	$VIRGIL_WIZARD/src/engine/Probe.v3	/^class HostFrame {$/;"	c
HostFunc	$VIRGIL_WIZARD/src/engine/Host.v3	/^type HostFunc(sig: SigDecl, invoke: Range<Value> -> HostResult) #unboxed;$/;"	c
HostFunction	$VIRGIL_WIZARD/src/engine/Host.v3	/^class HostFunction extends Function {$/;"	c
HostInstance	$VIRGIL_WIZARD/src/modules/HostModuleBuilder.v3	/^class HostInstance {$/;"	c
HostModule	$VIRGIL_WIZARD/src/modules/ModuleRegistry.v3	/^class HostModule extends ImportProcessor {$/;"	c
HostModuleBuilder	$VIRGIL_WIZARD/src/modules/HostModuleBuilder.v3	/^class HostModuleBuilder extends HostModuleBuilderOf<void> {$/;"	c
HostModuleBuilderOf	$VIRGIL_WIZARD/src/modules/HostModuleBuilder.v3	/^class HostModuleBuilderOf<C>(name: string, tnew: void -> C, tbind: (C, Instance) -> void) {$/;"	c
HostModuleOf	$VIRGIL_WIZARD/src/modules/HostModuleBuilder.v3	/^private class HostModuleOf<C> extends HostModule {$/;"	c
HostObject	$VIRGIL_WIZARD/src/engine/Host.v3	/^class HostObject extends Object {$/;"	c
HostResult	$VIRGIL_WIZARD/src/engine/Host.v3	/^type HostResult {$/;"	c
HostResult.TailCall	$VIRGIL_WIZARD/src/engine/Host.v3	/^	case TailCall(func: Function, args: Array<Value>);$/;"	c
HostResult.TailCall	$VIRGIL_WIZARD/src/engine/Host.v3	/^	case TailCall(func: Function, args: Array<Value>);$/;"	c
HostResult.Throw	$VIRGIL_WIZARD/src/engine/Host.v3	/^	case Throw(thrown: Throwable);$/;"	c
HostResult.Throw	$VIRGIL_WIZARD/src/engine/Host.v3	/^	case Throw(thrown: Throwable);$/;"	c
HostResult.Value0	$VIRGIL_WIZARD/src/engine/Host.v3	/^	case Value0;$/;"	c
HostResult.Value0	$VIRGIL_WIZARD/src/engine/Host.v3	/^	case Value0;$/;"	c
HostResult.Value1	$VIRGIL_WIZARD/src/engine/Host.v3	/^	case Value1(val: Value);$/;"	c
HostResult.Value1	$VIRGIL_WIZARD/src/engine/Host.v3	/^	case Value1(val: Value);$/;"	c
HostResult.ValueN	$VIRGIL_WIZARD/src/engine/Host.v3	/^	case ValueN(vals: Array<Value>);$/;"	c
HostResult.ValueN	$VIRGIL_WIZARD/src/engine/Host.v3	/^	case ValueN(vals: Array<Value>);$/;"	c
HostType	$VIRGIL_WIZARD/src/engine/Host.v3	/^class HostType extends ExportedType {$/;"	c
HotnessData	$VIRGIL_WIZARD/src/monitors/HotnessMonitor.v3	/^private class HotnessData(out: TraceBuilder, m: Module) {$/;"	c
HotnessMonitor	$VIRGIL_WIZARD/src/monitors/HotnessMonitor.v3	/^class HotnessMonitor extends Monitor {$/;"	c
I16	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	I16		(0x77, -9),$/;"	d
I16	$VIRGIL_WIZARD/src/engine/Sidetable.v3	/^	COMPLEX, I8, U8, I16, U16, I32, U32, I64, F32, F64, V128, REF$/;"	d
I16X8_ABS	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I16X8_ABS			(0xFD, 128, "i16x8.abs", imm.NONE, sig.s_s),$/;"	d
I16X8_ABS	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I16X8_ABS =			do_s_s_x8(_, V128_I16_ABS);$/;"	d
I16X8_ADD	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I16X8_ADD			(0xFD, 142, "i16x8.add", imm.NONE, sig.ss_s),$/;"	d
I16X8_ADD	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I16X8_ADD =			do_ss_s_x8(_, _, u16.+);$/;"	d
I16X8_ADD_SAT_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I16X8_ADD_SAT_S			(0xFD, 143, "i16x8.add_sat_s", imm.NONE, sig.ss_s),$/;"	d
I16X8_ADD_SAT_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I16X8_ADD_SAT_S =		do_ss_s_x8(_, _, V128_I16_ADD_SAT_S);$/;"	d
I16X8_ADD_SAT_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I16X8_ADD_SAT_U			(0xFD, 144, "i16x8.add_sat_u", imm.NONE, sig.ss_s),$/;"	d
I16X8_ADD_SAT_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I16X8_ADD_SAT_U =		do_ss_s_x8(_, _, I16_ADD_SAT_U);$/;"	d
I16X8_ALLTRUE	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I16X8_ALLTRUE			(0xFD, 131, "i16x8.alltrue", imm.NONE, sig.s_i),$/;"	d
I16X8_ALLTRUE	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I16X8_ALLTRUE =		do_v128_alltrue(_, 16, i16.view<u64>, i16.==);$/;"	d
I16X8_AVGR_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I16X8_AVGR_U			(0xFD, 155, "i16x8.avgr_u", imm.NONE, sig.ss_s),$/;"	d
I16X8_AVGR_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I16X8_AVGR_U =		do_ss_s_x8(_, _, I16_AVGR_U);$/;"	d
I16X8_BITMASK	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I16X8_BITMASK			(0xFD, 132, "i16x8.bitmask", imm.NONE, sig.s_i),$/;"	d
I16X8_BITMASK	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I16X8_BITMASK =		do_v128_bitmask(_, 16, 4);$/;"	d
I16X8_EQ	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I16X8_EQ			(0xFD, 45, "i16x8.eq", imm.NONE, sig.ss_s),$/;"	d
I16X8_EQ	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I16X8_EQ =			do_ss_s_x8(_, _, V128_I16X8_EQ);$/;"	d
I16X8_EXTADDPAIRWISE_I8X16_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I16X8_EXTADDPAIRWISE_I8X16_S	(0xFD, 124, "i16x8.extaddpairwise_i8x16_s", imm.NONE, sig.s_s),$/;"	d
I16X8_EXTADDPAIRWISE_I8X16_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I16X8_EXTADDPAIRWISE_I8X16_S =	do_s_s_x16_pairwise_ext_x8(_, V128_I16X8_EXTADD_I8X16_S);$/;"	d
I16X8_EXTADDPAIRWISE_I8X16_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I16X8_EXTADDPAIRWISE_I8X16_U	(0xFD, 125, "i16x8.extaddpairwise_i8x16_u", imm.NONE, sig.s_s),$/;"	d
I16X8_EXTADDPAIRWISE_I8X16_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I16X8_EXTADDPAIRWISE_I8X16_U =	do_s_s_x16_pairwise_ext_x8(_, I16X8_EXTADD_I8X16_U);$/;"	d
I16X8_EXTADD_I8X16_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def I16X8_EXTADD_I8X16_S(a: i8, b: i8) -> i16 {$/;"	m
I16X8_EXTADD_I8X16_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def I16X8_EXTADD_I8X16_U(a: u8, b: u8) -> u16 {$/;"	m
I16X8_EXTEND_HIGH_I8X16_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I16X8_EXTEND_HIGH_I8X16_S	(0xFD, 136, "i16x8.extend_high_i8x16_s", imm.NONE, sig.s_s),$/;"	d
I16X8_EXTEND_HIGH_I8X16_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I16X8_EXTEND_HIGH_I8X16_S = do_v128_half_extend<i8, i16, u16>(_, false, 16, i8.view, i16.view, u16.view);$/;"	d
I16X8_EXTEND_HIGH_I8X16_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I16X8_EXTEND_HIGH_I8X16_U	(0xFD, 138, "i16x8.extend_high_i8x16_u", imm.NONE, sig.s_s),$/;"	d
I16X8_EXTEND_HIGH_I8X16_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I16X8_EXTEND_HIGH_I8X16_U = do_v128_half_extend<u8, u16, u16>(_, false, 16, u8.view, u16.view, u16.view);$/;"	d
I16X8_EXTEND_LOW_I8X16_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I16X8_EXTEND_LOW_I8X16_S	(0xFD, 135, "i16x8.extend_low_i8x16_s", imm.NONE, sig.s_s),$/;"	d
I16X8_EXTEND_LOW_I8X16_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I16X8_EXTEND_LOW_I8X16_S  = do_v128_half_extend<i8, i16, u16>(_, true, 16, i8.view, i16.view, u16.view);$/;"	d
I16X8_EXTEND_LOW_I8X16_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I16X8_EXTEND_LOW_I8X16_U	(0xFD, 137, "i16x8.extend_low_i8x16_u", imm.NONE, sig.s_s),$/;"	d
I16X8_EXTEND_LOW_I8X16_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I16X8_EXTEND_LOW_I8X16_U  = do_v128_half_extend<u8, u16, u16>(_, true, 16, u8.view, u16.view, u16.view);$/;"	d
I16X8_EXTMUL_HIGH_I8X16_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I16X8_EXTMUL_HIGH_I8X16_S	(0xFD, 157, "i16x8.extmul_high_i8x16_s", imm.NONE, sig.ss_s),$/;"	d
I16X8_EXTMUL_HIGH_I8X16_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I16X8_EXTMUL_HIGH_I8X16_S = do_v128_extmul(_, _, false, 16, i8.view<u64>, i16.view<i8>, u16.view<i16>, i16.*);$/;"	d
I16X8_EXTMUL_HIGH_I8X16_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I16X8_EXTMUL_HIGH_I8X16_U	(0xFD, 159, "i16x8.extmul_high_i8x16_u", imm.NONE, sig.ss_s),$/;"	d
I16X8_EXTMUL_HIGH_I8X16_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I16X8_EXTMUL_HIGH_I8X16_U = do_v128_extmul(_, _, false, 16, u8.view<u64>, u16.view<u8>, u16.view<u16>, u16.*);$/;"	d
I16X8_EXTMUL_LOW_I8X16_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I16X8_EXTMUL_LOW_I8X16_S	(0xFD, 156, "i16x8.extmul_low_i8x16_s", imm.NONE, sig.ss_s),$/;"	d
I16X8_EXTMUL_LOW_I8X16_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I16X8_EXTMUL_LOW_I8X16_S =	do_v128_extmul(_, _, true, 16, i8.view<u64>, i16.view<i8>, u16.view<i16>, i16.*);$/;"	d
I16X8_EXTMUL_LOW_I8X16_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I16X8_EXTMUL_LOW_I8X16_U	(0xFD, 158, "i16x8.extmul_low_i8x16_u", imm.NONE, sig.ss_s),$/;"	d
I16X8_EXTMUL_LOW_I8X16_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I16X8_EXTMUL_LOW_I8X16_U =	do_v128_extmul(_, _, true, 16, u8.view<u64>, u16.view<u8>, u16.view<u16>, u16.*);$/;"	d
I16X8_EXTRACT_LANE_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I16X8_EXTRACT_LANE_S		(0xFD, 24, "i16x8.extract_lane_s", imm.LANE, sig.s_i),$/;"	d
I16X8_EXTRACT_LANE_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I16X8_EXTRACT_LANE_U		(0xFD, 25, "i16x8.extract_lane_u", imm.LANE, sig.s_i),$/;"	d
I16X8_GE_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I16X8_GE_S			(0xFD, 53, "i16x8.ge_s", imm.NONE, sig.ss_s),$/;"	d
I16X8_GE_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I16X8_GE_S =		commute_binop(I16X8_LE_S);$/;"	d
I16X8_GE_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I16X8_GE_U			(0xFD, 54, "i16x8.ge_u", imm.NONE, sig.ss_s),$/;"	d
I16X8_GE_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I16X8_GE_U =		commute_binop(I16X8_LE_U);$/;"	d
I16X8_GT_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I16X8_GT_S			(0xFD, 49, "i16x8.gt_s", imm.NONE, sig.ss_s),$/;"	d
I16X8_GT_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I16X8_GT_S =		commute_binop(I16X8_LT_S);$/;"	d
I16X8_GT_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I16X8_GT_U			(0xFD, 50, "i16x8.gt_u", imm.NONE, sig.ss_s),$/;"	d
I16X8_GT_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I16X8_GT_U =		commute_binop(I16X8_LT_U);$/;"	d
I16X8_LE_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I16X8_LE_S			(0xFD, 51, "i16x8.le_s", imm.NONE, sig.ss_s),$/;"	d
I16X8_LE_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I16X8_LE_S =		do_ss_s_x8(_, _, V128_I16X8_LE_S);$/;"	d
I16X8_LE_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I16X8_LE_U			(0xFD, 52, "i16x8.le_u", imm.NONE, sig.ss_s),$/;"	d
I16X8_LE_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I16X8_LE_U =		do_ss_s_x8(_, _, V128_I16X8_LE_U);$/;"	d
I16X8_LT_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I16X8_LT_S			(0xFD, 47, "i16x8.lt_s", imm.NONE, sig.ss_s),$/;"	d
I16X8_LT_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I16X8_LT_S =		do_ss_s_x8(_, _, V128_I16X8_LT_S);$/;"	d
I16X8_LT_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I16X8_LT_U			(0xFD, 48, "i16x8.lt_u", imm.NONE, sig.ss_s),$/;"	d
I16X8_LT_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I16X8_LT_U =		do_ss_s_x8(_, _, V128_I16X8_LT_U);$/;"	d
I16X8_MAX_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I16X8_MAX_S			(0xFD, 152, "i16x8.max_s", imm.NONE, sig.ss_s),$/;"	d
I16X8_MAX_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I16X8_MAX_S =		do_ss_s_x8(_, _, V128_I16_MAX_S);$/;"	d
I16X8_MAX_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I16X8_MAX_U			(0xFD, 153, "i16x8.max_u", imm.NONE, sig.ss_s),$/;"	d
I16X8_MAX_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I16X8_MAX_U =		do_ss_s_x8(_, _, I16_MAX_U);$/;"	d
I16X8_MIN_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I16X8_MIN_S			(0xFD, 150, "i16x8.min_s", imm.NONE, sig.ss_s),$/;"	d
I16X8_MIN_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I16X8_MIN_S =		do_ss_s_x8(_, _, V128_I16_MIN_S);$/;"	d
I16X8_MIN_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I16X8_MIN_U			(0xFD, 151, "i16x8.min_u", imm.NONE, sig.ss_s),$/;"	d
I16X8_MIN_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I16X8_MIN_U =		do_ss_s_x8(_, _, I16_MIN_U);$/;"	d
I16X8_MUL	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I16X8_MUL			(0xFD, 149, "i16x8.mul", imm.NONE, sig.ss_s),$/;"	d
I16X8_MUL	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I16X8_MUL =			do_ss_s_x8(_, _, u16.*);$/;"	d
I16X8_NARROW_I32X4_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I16X8_NARROW_I32X4_S		(0xFD, 133, "i16x8.narrow_i32x4_s", imm.NONE, sig.ss_s),$/;"	d
I16X8_NARROW_I32X4_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I16X8_NARROW_I32X4_S =		do_v128_narrow(_, _, 32, i32.view<u64>, I16_CONVERT_I32_SAT_S, u16.view<i16>);$/;"	d
I16X8_NARROW_I32X4_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I16X8_NARROW_I32X4_U		(0xFD, 134, "i16x8.narrow_i32x4_u", imm.NONE, sig.ss_s),$/;"	d
I16X8_NARROW_I32X4_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I16X8_NARROW_I32X4_U =		do_v128_narrow(_, _, 32, i32.view<u64>, I16_CONVERT_I32_SAT_U, u16.view<u16>);$/;"	d
I16X8_NE	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I16X8_NE			(0xFD, 46, "i16x8.ne", imm.NONE, sig.ss_s),$/;"	d
I16X8_NE	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I16X8_NE =			do_ss_s_x8(_, _, V128_I16X8_NE);$/;"	d
I16X8_NEG	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I16X8_NEG			(0xFD, 129, "i16x8.neg", imm.NONE, sig.s_s),$/;"	d
I16X8_NEG	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I16X8_NEG =			do_ss_s_x8((0, 0), _, u16.-);$/;"	d
I16X8_Q15MULRSAT_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I16X8_Q15MULRSAT_S		(0xFD, 130, "i16x8.q15mulrsat_s", imm.NONE, sig.ss_s),$/;"	d
I16X8_Q15MULRSAT_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I16X8_Q15MULRSAT_S =	do_ss_s_x8(_, _, V128_I16_Q15_MUL_SAT_S);$/;"	d
I16X8_RELAXED_DOT_I8X16_I7X16_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I16X8_RELAXED_DOT_I8X16_I7X16_S 	(0xFD,	0x112, "i16x8.relaxed_dot_i8x16_i7x16_s", imm.NONE, sig.ss_s),$/;"	d
I16X8_RELAXED_DOT_I8X16_I7X16_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I16X8_RELAXED_DOT_I8X16_I7X16_S =	do_ss_s_x8(_, _, do_i16_dot_i8);$/;"	d
I16X8_RELAXED_LANESELECT	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I16X8_RELAXED_LANESELECT 		(0xFD,	0x10A, "i16x8.relaxed_laneselect", imm.NONE, sig.sss_s),$/;"	d
I16X8_RELAXED_Q15MULR_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I16X8_RELAXED_Q15MULR_S 		(0xFD,	0x111, "i16x8.relaxed_q15mulr_s", imm.NONE, sig.ss_s),$/;"	d
I16X8_REPLACE_LANE	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I16X8_REPLACE_LANE		(0xFD, 26, "i16x8.replace_lane", imm.LANE, sig.si_s),$/;"	d
I16X8_SHL	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I16X8_SHL			(0xFD, 139, "i16x8.shl", imm.NONE, sig.si_s),$/;"	d
I16X8_SHL	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I16X8_SHL =			do_si_s_x8(_, _, V128_I16X8_SHL);$/;"	d
I16X8_SHR_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I16X8_SHR_S			(0xFD, 140, "i16x8.shr_s", imm.NONE, sig.si_s),$/;"	d
I16X8_SHR_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I16X8_SHR_S =		do_si_s_x8(_, _, V128_I16X8_SHR_S);$/;"	d
I16X8_SHR_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I16X8_SHR_U			(0xFD, 141, "i16x8.shr_u", imm.NONE, sig.si_s),$/;"	d
I16X8_SHR_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I16X8_SHR_U =		do_si_s_x8(_, _, I16_SHR_U);$/;"	d
I16X8_SPLAT	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I16X8_SPLAT			(0xFD, 16, "i16x8.splat", imm.NONE, sig.i_s),$/;"	d
I16X8_SUB	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I16X8_SUB			(0xFD, 145, "i16x8.sub", imm.NONE, sig.ss_s),$/;"	d
I16X8_SUB	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I16X8_SUB =			do_ss_s_x8(_, _, u16.-);$/;"	d
I16X8_SUB_SAT_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I16X8_SUB_SAT_S			(0xFD, 146, "i16x8.sub_sat_s", imm.NONE, sig.ss_s),$/;"	d
I16X8_SUB_SAT_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I16X8_SUB_SAT_S =		do_ss_s_x8(_, _, V128_I16_SUB_SAT_S);$/;"	d
I16X8_SUB_SAT_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I16X8_SUB_SAT_U			(0xFD, 147, "i16x8.sub_sat_u", imm.NONE, sig.ss_s),$/;"	d
I16X8_SUB_SAT_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I16X8_SUB_SAT_U =		do_ss_s_x8(_, _, I16_SUB_SAT_U);$/;"	d
I16_ABS_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def I16_ABS_S(a: i16) -> i16 {$/;"	m
I16_ADD_SAT_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def I16_ADD_SAT_S(a: i16, b: i16) -> i16 {$/;"	m
I16_ADD_SAT_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def I16_ADD_SAT_U(a: u16, b: u16) -> u16 {$/;"	m
I16_AVGR_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def I16_AVGR_U(a: u16, b: u16) -> u16 {$/;"	m
I16_CONVERT_I32_SAT_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def I16_CONVERT_I32_SAT_S(a: i32) -> i16 {$/;"	m
I16_CONVERT_I32_SAT_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def I16_CONVERT_I32_SAT_U(a: i32) -> u16 {$/;"	m
I16_MAX_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def I16_MAX_S(a: i16, b: i16) -> i16 {$/;"	m
I16_MAX_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def I16_MAX_U(a: u16, b: u16) -> u16 {$/;"	m
I16_MIN_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def I16_MIN_S(a: i16, b: i16) -> i16 {$/;"	m
I16_MIN_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def I16_MIN_U(a: u16, b: u16) -> u16 {$/;"	m
I16_Q15_MUL_SAT_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def I16_Q15_MUL_SAT_S(a: i16, b: i16) -> i16 {$/;"	m
I16_SHL	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def I16_SHL(a: i16, b: i16) -> i16 {$/;"	m
I16_SHR_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def I16_SHR_S(a: i16, b: i16) -> i16 {$/;"	m
I16_SHR_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def I16_SHR_U(a: u16, b: u16) -> u16 {$/;"	m
I16_SUB_SAT_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def I16_SUB_SAT_S(a: i16, b: i16) -> i16 {$/;"	m
I16_SUB_SAT_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def I16_SUB_SAT_U(a: u16, b: u16) -> u16 {$/;"	m
I1_ONE	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	I1_ONE		(false, 	true),$/;"	d
I1_ZERO	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	I1_ZERO		(true, 		true),$/;"	d
I31	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	I31		(0x6C, -20), \/\/ -0x14$/;"	d
I31	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case I31(val: InitExpr);$/;"	d
I31	$VIRGIL_WIZARD/src/engine/Type.v3	/^	case I31;$/;"	d
I31	$VIRGIL_WIZARD/src/engine/Value.v3	/^	case I31(val: u31);$/;"	d
I31REF	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	I31REF		(0x6C, -20), \/\/$/;"	d
I31REF	$VIRGIL_WIZARD/src/engine/Type.v3	/^	def I31REF = ValueType.Ref(true, HeapType.I31);$/;"	d
I31REF_NONNULL	$VIRGIL_WIZARD/src/engine/Type.v3	/^	def I31REF_NONNULL = ValueType.Ref(false, HeapType.I31);$/;"	d
I31_GET_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I31_GET_S			(0xFB, 0x1D, "i31.get_s", imm.NONE, null), \/\/ XXX: could have sig$/;"	d
I31_GET_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I31_GET_U			(0xFB, 0x1E, "i31.get_u", imm.NONE, null), \/\/ XXX: could have sig$/;"	d
I32	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	I32		(0x7F, -1),$/;"	d
I32	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case I32(val: i32);$/;"	d
I32	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def I32 = [ImmKind.I32];$/;"	d
I32	$VIRGIL_WIZARD/src/engine/Sidetable.v3	/^	COMPLEX, I8, U8, I16, U16, I32, U32, I64, F32, F64, V128, REF$/;"	d
I32	$VIRGIL_WIZARD/src/engine/Type.v3	/^	case I32;						\/\/ 32-bit integer$/;"	d
I32	$VIRGIL_WIZARD/src/engine/Value.v3	/^	case I32(val: u32);$/;"	d
I32X4_ABS	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32X4_ABS			(0xFD, 160, "i32x4.abs", imm.NONE, sig.s_s),$/;"	d
I32X4_ABS	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I32X4_ABS =			do_s_s_x4(_, V128_I32_ABS);$/;"	d
I32X4_ADD	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32X4_ADD			(0xFD, 174, "i32x4.add", imm.NONE, sig.ss_s),$/;"	d
I32X4_ADD	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I32X4_ADD =			do_ss_s_x4(_, _, u32.+);$/;"	d
I32X4_ALLTRUE	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32X4_ALLTRUE			(0xFD, 163, "i32x4.alltrue", imm.NONE, sig.s_i),$/;"	d
I32X4_ALLTRUE	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I32X4_ALLTRUE =		do_v128_alltrue(_, 32, i32.view<u64>, i32.==);$/;"	d
I32X4_BITMASK	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32X4_BITMASK			(0xFD, 164, "i32x4.bitmask", imm.NONE, sig.s_i),$/;"	d
I32X4_BITMASK	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I32X4_BITMASK =		do_v128_bitmask(_, 32, 5);$/;"	d
I32X4_DOT_I16X8_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32X4_DOT_I16X8_S		(0xFD, 186, "i32x4.dot_i16x8_s", imm.NONE, sig.ss_s),$/;"	d
I32X4_DOT_I16X8_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I32X4_DOT_I16X8_S =		do_ss_s_x4(_, _, do_i32_dot_i16);$/;"	d
I32X4_EQ	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32X4_EQ			(0xFD, 55, "i32x4.eq", imm.NONE, sig.ss_s),$/;"	d
I32X4_EQ	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I32X4_EQ =			do_ss_s_x4(_, _, V128_I32X4_EQ);$/;"	d
I32X4_EXTADDPAIRWISE_I16X8_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32X4_EXTADDPAIRWISE_I16X8_S	(0xFD, 126, "i32x4.extaddpairwise_i16x8_s", imm.NONE, sig.s_s),$/;"	d
I32X4_EXTADDPAIRWISE_I16X8_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I32X4_EXTADDPAIRWISE_I16X8_S =	do_s_s_x8_pairwise_ext_x4(_, V128_I32X4_EXTADD_16X8_S);$/;"	d
I32X4_EXTADDPAIRWISE_I16X8_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32X4_EXTADDPAIRWISE_I16X8_U	(0xFD, 127, "i32x4.extaddpairwise_i16x8_u", imm.NONE, sig.s_s),$/;"	d
I32X4_EXTADDPAIRWISE_I16X8_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I32X4_EXTADDPAIRWISE_I16X8_U =	do_s_s_x8_pairwise_ext_x4(_, I32X4_EXTADD_I16X8_U);$/;"	d
I32X4_EXTADD_I16X8_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def I32X4_EXTADD_I16X8_S(a: i16, b: i16) -> i32 {$/;"	m
I32X4_EXTADD_I16X8_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def I32X4_EXTADD_I16X8_U(a: u16, b: u16) -> u32 {$/;"	m
I32X4_EXTEND_HIGH_I16X8_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32X4_EXTEND_HIGH_I16X8_S	(0xFD, 168, "i32x4.extend_high_i16x8_s", imm.NONE, sig.s_s),$/;"	d
I32X4_EXTEND_HIGH_I16X8_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I32X4_EXTEND_HIGH_I16X8_S = do_v128_half_extend<i16, i32, u32>(_, false, 32, i16.view, i32.view, u32.view);$/;"	d
I32X4_EXTEND_HIGH_I16X8_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32X4_EXTEND_HIGH_I16X8_U	(0xFD, 170, "i32x4.extend_high_i16x8_u", imm.NONE, sig.s_s),$/;"	d
I32X4_EXTEND_HIGH_I16X8_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I32X4_EXTEND_HIGH_I16X8_U = do_v128_half_extend<u16, u32, u32>(_, false, 32, u16.view, u32.view, u32.view);$/;"	d
I32X4_EXTEND_LOW_I16X8_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32X4_EXTEND_LOW_I16X8_S	(0xFD, 167, "i32x4.extend_low_i16x8_s", imm.NONE, sig.s_s),$/;"	d
I32X4_EXTEND_LOW_I16X8_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I32X4_EXTEND_LOW_I16X8_S  = do_v128_half_extend<i16, i32, u32>(_, true, 32, i16.view, i32.view, u32.view);$/;"	d
I32X4_EXTEND_LOW_I16X8_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32X4_EXTEND_LOW_I16X8_U	(0xFD, 169, "i32x4.extend_low_i16x8_u", imm.NONE, sig.s_s),$/;"	d
I32X4_EXTEND_LOW_I16X8_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I32X4_EXTEND_LOW_I16X8_U  = do_v128_half_extend<u16, u32, u32>(_, true, 32, u16.view, u32.view, u32.view);$/;"	d
I32X4_EXTMUL_HIGH_I16X8_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32X4_EXTMUL_HIGH_I16X8_S	(0xFD, 189, "i32x4.extmul_high_i16x8_s", imm.NONE, sig.ss_s),$/;"	d
I32X4_EXTMUL_HIGH_I16X8_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I32X4_EXTMUL_HIGH_I16X8_S = do_v128_extmul(_, _, false, 32, i16.view<u64>, i32.view<i16>, u32.view<i32>, i32.*);$/;"	d
I32X4_EXTMUL_HIGH_I16X8_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32X4_EXTMUL_HIGH_I16X8_U	(0xFD, 191, "i32x4.extmul_high_i16x8_u", imm.NONE, sig.ss_s),$/;"	d
I32X4_EXTMUL_HIGH_I16X8_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I32X4_EXTMUL_HIGH_I16X8_U = do_v128_extmul(_, _, false, 32, u16.view<u64>, u32.view<u16>, u32.view<u32>, u32.*);$/;"	d
I32X4_EXTMUL_LOW_I16X8_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32X4_EXTMUL_LOW_I16X8_S	(0xFD, 188, "i32x4.extmul_low_i16x8_s", imm.NONE, sig.ss_s),$/;"	d
I32X4_EXTMUL_LOW_I16X8_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I32X4_EXTMUL_LOW_I16X8_S =	do_v128_extmul(_, _, true, 32, i16.view<u64>, i32.view<i16>, u32.view<i32>, i32.*);$/;"	d
I32X4_EXTMUL_LOW_I16X8_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32X4_EXTMUL_LOW_I16X8_U	(0xFD, 190, "i32x4.extmul_low_i16x8_u", imm.NONE, sig.ss_s),$/;"	d
I32X4_EXTMUL_LOW_I16X8_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I32X4_EXTMUL_LOW_I16X8_U =	do_v128_extmul(_, _, true, 32, u16.view<u64>, u32.view<u16>, u32.view<u32>, u32.*);$/;"	d
I32X4_EXTRACT_LANE	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32X4_EXTRACT_LANE		(0xFD, 27, "i32x4.extract_lane", imm.LANE, sig.s_i),$/;"	d
I32X4_GE_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32X4_GE_S			(0xFD, 63, "i32x4.ge_s", imm.NONE, sig.ss_s),$/;"	d
I32X4_GE_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I32X4_GE_S =		commute_binop(I32X4_LE_S);$/;"	d
I32X4_GE_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32X4_GE_U			(0xFD, 64, "i32x4.ge_u", imm.NONE, sig.ss_s),$/;"	d
I32X4_GE_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I32X4_GE_U =		commute_binop(I32X4_LE_U);$/;"	d
I32X4_GT_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32X4_GT_S			(0xFD, 59, "i32x4.gt_s", imm.NONE, sig.ss_s),$/;"	d
I32X4_GT_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I32X4_GT_S =		commute_binop(I32X4_LT_S);$/;"	d
I32X4_GT_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32X4_GT_U			(0xFD, 60, "i32x4.gt_u", imm.NONE, sig.ss_s),$/;"	d
I32X4_GT_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I32X4_GT_U =		commute_binop(I32X4_LT_U);$/;"	d
I32X4_LE_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32X4_LE_S			(0xFD, 61, "i32x4.le_s", imm.NONE, sig.ss_s),$/;"	d
I32X4_LE_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I32X4_LE_S =		do_ss_s_x4(_, _, V128_I32X4_LE_S);$/;"	d
I32X4_LE_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32X4_LE_U			(0xFD, 62, "i32x4.le_u", imm.NONE, sig.ss_s),$/;"	d
I32X4_LE_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I32X4_LE_U =		do_ss_s_x4(_, _, V128_I32X4_LE_U);$/;"	d
I32X4_LT_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32X4_LT_S			(0xFD, 57, "i32x4.lt_s", imm.NONE, sig.ss_s),$/;"	d
I32X4_LT_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I32X4_LT_S =		do_ss_s_x4(_, _, V128_I32X4_LT_S);$/;"	d
I32X4_LT_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32X4_LT_U			(0xFD, 58, "i32x4.lt_u", imm.NONE, sig.ss_s),$/;"	d
I32X4_LT_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I32X4_LT_U =		do_ss_s_x4(_, _, V128_I32X4_LT_U);$/;"	d
I32X4_MAX_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32X4_MAX_S			(0xFD, 184, "i32x4.max_s", imm.NONE, sig.ss_s),$/;"	d
I32X4_MAX_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I32X4_MAX_S =		do_ss_s_x4(_, _, V128_I32_MAX_S);$/;"	d
I32X4_MAX_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32X4_MAX_U			(0xFD, 185, "i32x4.max_u", imm.NONE, sig.ss_s),$/;"	d
I32X4_MAX_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I32X4_MAX_U =		do_ss_s_x4(_, _, I32_MAX_U);$/;"	d
I32X4_MIN_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32X4_MIN_S			(0xFD, 182, "i32x4.min_s", imm.NONE, sig.ss_s),$/;"	d
I32X4_MIN_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I32X4_MIN_S =		do_ss_s_x4(_, _, V128_I32_MIN_S);$/;"	d
I32X4_MIN_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32X4_MIN_U			(0xFD, 183, "i32x4.min_u", imm.NONE, sig.ss_s),$/;"	d
I32X4_MIN_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I32X4_MIN_U =		do_ss_s_x4(_, _, I32_MIN_U);$/;"	d
I32X4_MUL	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32X4_MUL			(0xFD, 181, "i32x4.mul", imm.NONE, sig.ss_s),$/;"	d
I32X4_MUL	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I32X4_MUL =			do_ss_s_x4(_, _, u32.*);$/;"	d
I32X4_NE	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32X4_NE			(0xFD, 56, "i32x4.ne", imm.NONE, sig.ss_s),$/;"	d
I32X4_NE	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I32X4_NE =			do_ss_s_x4(_, _, V128_I32X4_NE);$/;"	d
I32X4_NEG	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32X4_NEG			(0xFD, 161, "i32x4.neg", imm.NONE, sig.s_s),$/;"	d
I32X4_NEG	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I32X4_NEG =			do_ss_s_x4((0, 0), _, u32.-);$/;"	d
I32X4_RELAXED_DOT_I8X16_I7X16_ADD_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32X4_RELAXED_DOT_I8X16_I7X16_ADD_S 	(0xFD,	0x113, "i32x4.relaxed_dot_i8x16_i7x16_add_s", imm.NONE, sig.sss_s),$/;"	d
I32X4_RELAXED_DOT_I8X16_I7X16_ADD_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I32X4_RELAXED_DOT_I8X16_I7X16_ADD_S =	do_sss_s_x4(_, _, _, do_i32_dot_i8_add);$/;"	d
I32X4_RELAXED_LANESELECT	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32X4_RELAXED_LANESELECT 		(0xFD,	0x10B, "i32x4.relaxed_laneselect", imm.NONE, sig.sss_s),$/;"	d
I32X4_RELAXED_TRUNC_F32X4_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32X4_RELAXED_TRUNC_F32X4_S 		(0xFD,	0x101, "i32x4.relaxed_trunc_f32x4_s", imm.NONE, sig.s_s),$/;"	d
I32X4_RELAXED_TRUNC_F32X4_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32X4_RELAXED_TRUNC_F32X4_U 		(0xFD,	0x102, "i32x4.relaxed_trunc_f32x4_u", imm.NONE, sig.s_s),$/;"	d
I32X4_RELAXED_TRUNC_F64X2_S_ZERO	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32X4_RELAXED_TRUNC_F64X2_S_ZERO	(0xFD,	0x103, "i32x4.relaxed_trunc_f64x2_s_zero", imm.NONE, sig.s_s),$/;"	d
I32X4_RELAXED_TRUNC_F64X2_U_ZERO	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32X4_RELAXED_TRUNC_F64X2_U_ZERO	(0xFD,	0x104, "i32x4.relaxed_trunc_f64x2_u_zero", imm.NONE, sig.s_s),$/;"	d
I32X4_REPLACE_LANE	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32X4_REPLACE_LANE		(0xFD, 28, "i32x4.replace_lane", imm.LANE, sig.si_s),$/;"	d
I32X4_SHL	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32X4_SHL			(0xFD, 171, "i32x4.shl", imm.NONE, sig.si_s),$/;"	d
I32X4_SHL	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I32X4_SHL =			do_si_s_x4(_, _, V128_I32X4_SHL);$/;"	d
I32X4_SHR_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32X4_SHR_S			(0xFD, 172, "i32x4.shr_s", imm.NONE, sig.si_s),$/;"	d
I32X4_SHR_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I32X4_SHR_S =		do_si_s_x4(_, _, V128_I32X4_SHR_S);$/;"	d
I32X4_SHR_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32X4_SHR_U			(0xFD, 173, "i32x4.shr_u", imm.NONE, sig.si_s),$/;"	d
I32X4_SHR_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I32X4_SHR_U =		do_si_s_x4(_, _, V128_I32X4_SHR_U);$/;"	d
I32X4_SPLAT	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32X4_SPLAT			(0xFD, 17, "i32x4.splat", imm.NONE, sig.i_s),$/;"	d
I32X4_SUB	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32X4_SUB			(0xFD, 177, "i32x4.sub", imm.NONE, sig.ss_s),$/;"	d
I32X4_SUB	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I32X4_SUB =			do_ss_s_x4(_, _, u32.-);$/;"	d
I32X4_TRUNC_SAT_F32X4_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32X4_TRUNC_SAT_F32X4_S		(0xFD, 248, "i32x4.trunc_sat_f32x4_s", imm.NONE, sig.s_s),$/;"	d
I32X4_TRUNC_SAT_F32X4_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I32X4_TRUNC_SAT_F32X4_S =		do_s_s_x4(_, V128_I32_TRUNC_F32_SAT_S);$/;"	d
I32X4_TRUNC_SAT_F32X4_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32X4_TRUNC_SAT_F32X4_U		(0xFD, 249, "i32x4.trunc_sat_f32x4_u", imm.NONE, sig.s_s),$/;"	d
I32X4_TRUNC_SAT_F32X4_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I32X4_TRUNC_SAT_F32X4_U =		do_s_s_x4(_, V128_I32_TRUNC_F32_SAT_U);$/;"	d
I32X4_TRUNC_SAT_F64X2_S_ZERO	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32X4_TRUNC_SAT_F64X2_S_ZERO	(0xFD, 252, "i32x4.trunc_sat_f64x2_s_zero", imm.NONE, sig.s_s),$/;"	d
I32X4_TRUNC_SAT_F64X2_S_ZERO	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I32X4_TRUNC_SAT_F64X2_S_ZERO =	do_s_s_x4_high_zero(_, V128_I32_TRUNC_F64_SAT_S);$/;"	d
I32X4_TRUNC_SAT_F64X2_U_ZERO	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32X4_TRUNC_SAT_F64X2_U_ZERO	(0xFD, 253, "i32x4.trunc_sat_f64x2_u_zero", imm.NONE, sig.s_s),$/;"	d
I32X4_TRUNC_SAT_F64X2_U_ZERO	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I32X4_TRUNC_SAT_F64X2_U_ZERO =	do_s_s_x4_high_zero(_, V128_I32_TRUNC_F64_SAT_U);$/;"	d
I32_ABS_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def I32_ABS_S(a: i32) -> i32 {$/;"	m
I32_ADD	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def I32_ADD() {$/;"	m
I32_ADD	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case I32_ADD(a: InitExpr, b: InitExpr);$/;"	d
I32_ADD	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32_ADD			(0x00, 0x6A, "i32.add", imm.NONE, sig.ii_i),$/;"	d
I32_ADD	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I32_ADD	= u32.+;$/;"	d
I32_AND	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def I32_AND() {$/;"	m
I32_AND	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32_AND			(0x00, 0x71, "i32.and", imm.NONE, sig.ii_i),$/;"	d
I32_AND	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I32_AND	= u32.&;$/;"	d
I32_ATOMIC_LOAD	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32_ATOMIC_LOAD			(0xFE, 0x10, "i32.atomic.load", imm.MEMARG, sig.i_i),$/;"	d
I32_ATOMIC_LOAD16_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32_ATOMIC_LOAD16_U		(0xFE, 0x13, "i32.atomic.load16_u", imm.MEMARG, sig.i_i),$/;"	d
I32_ATOMIC_LOAD8_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32_ATOMIC_LOAD8_U		(0xFE, 0x12, "i32.atomic.load8_u", imm.MEMARG, sig.i_i),$/;"	d
I32_ATOMIC_RMW16_ADD_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32_ATOMIC_RMW16_ADD_U		(0xFE, 0x21, "i32.atomic.rmw16.add_u", imm.MEMARG, sig.ii_i),$/;"	d
I32_ATOMIC_RMW16_AND_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32_ATOMIC_RMW16_AND_U		(0xFE, 0x2F, "i32.atomic.rmw16.and_u", imm.MEMARG, sig.ii_i),$/;"	d
I32_ATOMIC_RMW16_CMPXCHG_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32_ATOMIC_RMW16_CMPXCHG_U	(0xFE, 0x4B, "i32.atomic.rmw16.cmpxchg_u", imm.MEMARG, sig.iii_i),$/;"	d
I32_ATOMIC_RMW16_OR_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32_ATOMIC_RMW16_OR_U		(0xFE, 0x36, "i32.atomic.rmw16.or_u", imm.MEMARG, sig.ii_i),$/;"	d
I32_ATOMIC_RMW16_SUB_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32_ATOMIC_RMW16_SUB_U		(0xFE, 0x28, "i32.atomic.rmw16.sub_u", imm.MEMARG, sig.ii_i),$/;"	d
I32_ATOMIC_RMW16_XCHG_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32_ATOMIC_RMW16_XCHG_U		(0xFE, 0x44, "i32.atomic.rmw16.xchg_u", imm.MEMARG, sig.ii_i),$/;"	d
I32_ATOMIC_RMW16_XOR_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32_ATOMIC_RMW16_XOR_U		(0xFE, 0x3D, "i32.atomic.rmw16.xor_u", imm.MEMARG, sig.ii_i),$/;"	d
I32_ATOMIC_RMW8_ADD_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32_ATOMIC_RMW8_ADD_U		(0xFE, 0x20, "i32.atomic.rmw8.add_u", imm.MEMARG, sig.ii_i),$/;"	d
I32_ATOMIC_RMW8_AND_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32_ATOMIC_RMW8_AND_U		(0xFE, 0x2E, "i32.atomic.rmw8.and_u", imm.MEMARG, sig.ii_i),$/;"	d
I32_ATOMIC_RMW8_CMPXCHG_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32_ATOMIC_RMW8_CMPXCHG_U	(0xFE, 0x4A, "i32.atomic.rmw8.cmpxchg_u", imm.MEMARG, sig.iii_i),$/;"	d
I32_ATOMIC_RMW8_OR_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32_ATOMIC_RMW8_OR_U		(0xFE, 0x35, "i32.atomic.rmw8.or_u", imm.MEMARG, sig.ii_i),$/;"	d
I32_ATOMIC_RMW8_SUB_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32_ATOMIC_RMW8_SUB_U		(0xFE, 0x27, "i32.atomic.rmw8.sub_u", imm.MEMARG, sig.ii_i),$/;"	d
I32_ATOMIC_RMW8_XCHG_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32_ATOMIC_RMW8_XCHG_U		(0xFE, 0x43, "i32.atomic.rmw8.xchg_u", imm.MEMARG, sig.ii_i),$/;"	d
I32_ATOMIC_RMW8_XOR_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32_ATOMIC_RMW8_XOR_U		(0xFE, 0x3C, "i32.atomic.rmw8.xor_u", imm.MEMARG, sig.ii_i),$/;"	d
I32_ATOMIC_RMW_ADD	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32_ATOMIC_RMW_ADD		(0xFE, 0x1E, "i32.atomic.rmw.add", imm.MEMARG, sig.ii_i),$/;"	d
I32_ATOMIC_RMW_AND	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32_ATOMIC_RMW_AND		(0xFE, 0x2C, "i32.atomic.rmw.and", imm.MEMARG, sig.ii_i),$/;"	d
I32_ATOMIC_RMW_CMPXCHG	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32_ATOMIC_RMW_CMPXCHG		(0xFE, 0x48, "i32.atomic.rmw.cmpxchg", imm.MEMARG, sig.iii_i),$/;"	d
I32_ATOMIC_RMW_OR	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32_ATOMIC_RMW_OR		(0xFE, 0x33, "i32.atomic.rmw.or", imm.MEMARG, sig.ii_i),$/;"	d
I32_ATOMIC_RMW_SUB	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32_ATOMIC_RMW_SUB		(0xFE, 0x25, "i32.atomic.rmw.sub", imm.MEMARG, sig.ii_i),$/;"	d
I32_ATOMIC_RMW_XCHG	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32_ATOMIC_RMW_XCHG		(0xFE, 0x41, "i32.atomic.rmw.xchg", imm.MEMARG, sig.ii_i),$/;"	d
I32_ATOMIC_RMW_XOR	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32_ATOMIC_RMW_XOR		(0xFE, 0x3A, "i32.atomic.rmw.xor", imm.MEMARG, sig.ii_i),$/;"	d
I32_ATOMIC_STORE	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32_ATOMIC_STORE		(0xFE, 0x17, "i32.atomic.store", imm.MEMARG, sig.ii_v),$/;"	d
I32_ATOMIC_STORE16	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32_ATOMIC_STORE16		(0xFE, 0x1A, "i32.atomic.store16", imm.MEMARG, sig.ii_v),$/;"	d
I32_ATOMIC_STORE8	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32_ATOMIC_STORE8		(0xFE, 0x19, "i32.atomic.store8", imm.MEMARG, sig.ii_v),$/;"	d
I32_CLZ	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32_CLZ			(0x00, 0x67, "i32.clz", imm.NONE, sig.i_i),$/;"	d
I32_CLZ	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I32_CLZ(x: u32) -> u32 {$/;"	f
I32_CONST	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def I32_CONST() {$/;"	m
I32_CONST	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32_CONST		(0x00, 0x41, "i32.const", imm.I32, sig.v_i),$/;"	d
I32_CTZ	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32_CTZ			(0x00, 0x68, "i32.ctz", imm.NONE, sig.i_i),$/;"	d
I32_CTZ	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I32_CTZ(x: u32) -> u32 {$/;"	f
I32_DIV_S	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def I32_DIV_S() {$/;"	m
I32_DIV_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32_DIV_S		(0x00, 0x6D, "i32.div_s", imm.NONE, sig.ii_i),$/;"	d
I32_DIV_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I32_DIV_S(x: i32, y: i32) -> (i32, TrapReason) {$/;"	f
I32_DIV_U	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def I32_DIV_U() {$/;"	m
I32_DIV_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32_DIV_U		(0x00, 0x6E, "i32.div_u", imm.NONE, sig.ii_i),$/;"	d
I32_DIV_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I32_DIV_U(x: u32, y: u32) -> (u32, TrapReason) {$/;"	f
I32_EQ	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def I32_EQ() {$/;"	m
I32_EQ	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32_EQ			(0x00, 0x46, "i32.eq", imm.NONE, sig.ii_i),$/;"	d
I32_EQ	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I32_EQ	= u32.==;$/;"	d
I32_EQZ	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def I32_EQZ() {$/;"	m
I32_EQZ	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32_EQZ			(0x00, 0x45, "i32.eqz", imm.NONE, sig.i_i),$/;"	d
I32_EQZ	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I32_EQZ	= u32.==(0, _);$/;"	d
I32_EXTEND16_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32_EXTEND16_S		(0x00, 0xC1, "i32.extend16_s", imm.NONE, sig.i_i),$/;"	d
I32_EXTEND16_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I32_EXTEND16_S(a: i32) -> i32 {$/;"	f
I32_EXTEND8_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32_EXTEND8_S		(0x00, 0xC0, "i32.extend8_s", imm.NONE, sig.i_i),$/;"	d
I32_EXTEND8_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I32_EXTEND8_S(a: i32) -> i32 {$/;"	f
I32_GE_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32_GE_S		(0x00, 0x4E, "i32.ge_s", imm.NONE, sig.ii_i),$/;"	d
I32_GE_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I32_GE_S	= i32.>=;$/;"	d
I32_GE_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32_GE_U		(0x00, 0x4F, "i32.ge_u", imm.NONE, sig.ii_i),$/;"	d
I32_GE_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I32_GE_U	= u32.>=;$/;"	d
I32_GT_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32_GT_S		(0x00, 0x4A, "i32.gt_s", imm.NONE, sig.ii_i),$/;"	d
I32_GT_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I32_GT_S	= i32.>;$/;"	d
I32_GT_U	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def I32_GT_U() {$/;"	m
I32_GT_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32_GT_U		(0x00, 0x4B, "i32.gt_u", imm.NONE, sig.ii_i),$/;"	d
I32_GT_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I32_GT_U	= u32.>;$/;"	d
I32_LE_S	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def I32_LE_S() {$/;"	m
I32_LE_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32_LE_S		(0x00, 0x4C, "i32.le_s", imm.NONE, sig.ii_i),$/;"	d
I32_LE_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I32_LE_S	= i32.<=;$/;"	d
I32_LE_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32_LE_U		(0x00, 0x4D, "i32.le_u", imm.NONE, sig.ii_i),$/;"	d
I32_LE_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I32_LE_U	= u32.<=;$/;"	d
I32_LOAD	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def I32_LOAD() {$/;"	m
I32_LOAD	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32_LOAD		(0x00, 0x28, "i32.load", imm.MEMARG, sig.i_i),$/;"	d
I32_LOAD16_S	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def I32_LOAD16_S() {$/;"	m
I32_LOAD16_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32_LOAD16_S		(0x00, 0x2E, "i32.load16_s", imm.MEMARG, sig.i_i),$/;"	d
I32_LOAD16_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32_LOAD16_U		(0x00, 0x2F, "i32.load16_u", imm.MEMARG, sig.i_i),$/;"	d
I32_LOAD8_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32_LOAD8_S		(0x00, 0x2C, "i32.load8_s", imm.MEMARG, sig.i_i),$/;"	d
I32_LOAD8_U	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def I32_LOAD8_U() {$/;"	m
I32_LOAD8_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32_LOAD8_U		(0x00, 0x2D, "i32.load8_u", imm.MEMARG, sig.i_i),$/;"	d
I32_LT_S	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def I32_LT_S() {$/;"	m
I32_LT_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32_LT_S		(0x00, 0x48, "i32.lt_s", imm.NONE, sig.ii_i),$/;"	d
I32_LT_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I32_LT_S	= i32.<;$/;"	d
I32_LT_U	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def I32_LT_U() {$/;"	m
I32_LT_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32_LT_U		(0x00, 0x49, "i32.lt_u", imm.NONE, sig.ii_i),$/;"	d
I32_LT_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I32_LT_U	= u32.<;$/;"	d
I32_MAX_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def I32_MAX_S(a: i32, b: i32) -> i32 {$/;"	m
I32_MAX_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def I32_MAX_U(a: u32, b: u32) -> u32 {$/;"	m
I32_MIN_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def I32_MIN_S(a: i32, b: i32) -> i32 {$/;"	m
I32_MIN_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def I32_MIN_U(a: u32, b: u32) -> u32 {$/;"	m
I32_MUL	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def I32_MUL() {$/;"	m
I32_MUL	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case I32_MUL(a: InitExpr, b: InitExpr);$/;"	d
I32_MUL	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32_MUL			(0x00, 0x6C, "i32.mul", imm.NONE, sig.ii_i),$/;"	d
I32_MUL	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I32_MUL	= u32.*;$/;"	d
I32_NE	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def I32_NE() {$/;"	m
I32_NE	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32_NE			(0x00, 0x47, "i32.ne", imm.NONE, sig.ii_i),$/;"	d
I32_NE	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I32_NE	= u32.!=;$/;"	d
I32_NONZERO	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	I32_NONZERO	(false, 	true),$/;"	d
I32_OR	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32_OR			(0x00, 0x72, "i32.or", imm.NONE, sig.ii_i),$/;"	d
I32_OR	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I32_OR	= u32.|;$/;"	d
I32_POPCNT	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32_POPCNT		(0x00, 0x69, "i32.popcnt", imm.NONE, sig.i_i),$/;"	d
I32_POPCNT	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I32_POPCNT(x: u32) -> u32 {$/;"	f
I32_REINTERPRET_F32	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32_REINTERPRET_F32	(0x00, 0xBC, "i32.reinterpret_f32", imm.NONE, sig.f_i),$/;"	d
I32_REINTERPRET_F32	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I32_REINTERPRET_F32	= u32.view<float>;$/;"	d
I32_REM_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32_REM_S		(0x00, 0x6F, "i32.rem_s", imm.NONE, sig.ii_i),$/;"	d
I32_REM_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I32_REM_S(x: i32, y: i32) -> (i32, TrapReason) {$/;"	f
I32_REM_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32_REM_U		(0x00, 0x70, "i32.rem_u", imm.NONE, sig.ii_i),$/;"	d
I32_REM_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I32_REM_U(x: u32, y: u32) -> (u32, TrapReason) {$/;"	f
I32_ROTL	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32_ROTL		(0x00, 0x77, "i32.rotl", imm.NONE, sig.ii_i),$/;"	d
I32_ROTL	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I32_ROTL(x: u32, z: u32) -> u32 {$/;"	f
I32_ROTR	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32_ROTR		(0x00, 0x78, "i32.rotr", imm.NONE, sig.ii_i),$/;"	d
I32_ROTR	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I32_ROTR(x: u32, z: u32) -> u32 {$/;"	f
I32_SAT_ADD_S	$VIRGIL_WIZARD/src/modules/wizeng/ArithModule.v3	/^def I32_SAT_ADD_S(x: int, y: int) -> int {$/;"	m
I32_SAT_ADD_U	$VIRGIL_WIZARD/src/modules/wizeng/ArithModule.v3	/^def I32_SAT_ADD_U(x: u32, y: u32) -> u32 {$/;"	m
I32_SHL	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32_SHL			(0x00, 0x74, "i32.shl", imm.NONE, sig.ii_i),$/;"	d
I32_SHL	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I32_SHL(x: i32, y: i32) -> i32 {$/;"	f
I32_SHR_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32_SHR_S		(0x00, 0x75, "i32.shr_s", imm.NONE, sig.ii_i),$/;"	d
I32_SHR_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I32_SHR_S(x: i32, y: i32) -> i32 {$/;"	f
I32_SHR_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32_SHR_U		(0x00, 0x76, "i32.shr_u", imm.NONE, sig.ii_i),$/;"	d
I32_SHR_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I32_SHR_U(x: i32, y: i32) -> i32 {$/;"	f
I32_STORE	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def I32_STORE() {$/;"	m
I32_STORE	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32_STORE		(0x00, 0x36, "i32.store", imm.MEMARG, sig.ii_v),$/;"	d
I32_STORE16	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def I32_STORE16() {$/;"	m
I32_STORE16	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32_STORE16		(0x00, 0x3B, "i32.store16", imm.MEMARG, sig.ii_v),$/;"	d
I32_STORE8	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def I32_STORE8() {$/;"	m
I32_STORE8	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32_STORE8		(0x00, 0x3A, "i32.store8", imm.MEMARG, sig.ii_v),$/;"	d
I32_SUB	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def I32_SUB() {$/;"	m
I32_SUB	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case I32_SUB(a: InitExpr, b: InitExpr);$/;"	d
I32_SUB	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32_SUB			(0x00, 0x6B, "i32.sub", imm.NONE, sig.ii_i),$/;"	d
I32_SUB	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I32_SUB	= u32.-;$/;"	d
I32_TRAP_ON_ZERO	$VIRGIL_WIZARD/src/modules/wizeng/ArithModule.v3	/^def I32_TRAP_ON_ZERO(args: Range<Value>) -> HostResult {$/;"	m
I32_TRUNC_F32_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32_TRUNC_F32_S		(0x00, 0xA8, "i32.trunc_f32_s", imm.NONE, sig.f_i),$/;"	d
I32_TRUNC_F32_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I32_TRUNC_F32_S	= truncF32(-2.1474839E9f, 2147483648f, i32.truncf, _);$/;"	d
I32_TRUNC_F32_SAT_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def I32_TRUNC_F32_SAT_S = truncF32_SAT(-2.1474839E9f, 2147483648f, i32.max, i32.min, i32.truncf, _);$/;"	d
I32_TRUNC_F32_SAT_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def I32_TRUNC_F32_SAT_U = truncF32_SAT(-1f, 4294967296f, u32.max, u32.min, u32.truncf, _);$/;"	d
I32_TRUNC_F32_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32_TRUNC_F32_U		(0x00, 0xA9, "i32.trunc_f32_u", imm.NONE, sig.f_i),$/;"	d
I32_TRUNC_F32_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I32_TRUNC_F32_U	= truncF32(-1f, 4294967296f, u32.truncf, _);$/;"	d
I32_TRUNC_F64_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32_TRUNC_F64_S		(0x00, 0xAA, "i32.trunc_f64_s", imm.NONE, sig.d_i),$/;"	d
I32_TRUNC_F64_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I32_TRUNC_F64_S	= truncF64(-2147483649d, 2147483648f, i32.truncd, _);$/;"	d
I32_TRUNC_F64_SAT_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def I32_TRUNC_F64_SAT_S = truncF64_SAT(-2147483649d, 2147483648f, i32.max, i32.min, i32.truncd, _);$/;"	d
I32_TRUNC_F64_SAT_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def I32_TRUNC_F64_SAT_U = truncF64_SAT(-1d, 4294967296d, u32.max, u32.min, u32.truncd, _);$/;"	d
I32_TRUNC_F64_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32_TRUNC_F64_U		(0x00, 0xAB, "i32.trunc_f64_u", imm.NONE, sig.d_i),$/;"	d
I32_TRUNC_F64_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I32_TRUNC_F64_U	= truncF64(-1d, 4294967296d, u32.truncd, _);$/;"	d
I32_TRUNC_SAT_F32_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32_TRUNC_SAT_F32_S	(0xFC, 0x00, "i32.trunc_sat_f32_s", imm.NONE, sig.f_i),$/;"	d
I32_TRUNC_SAT_F32_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32_TRUNC_SAT_F32_U	(0xFC, 0x01, "i32.trunc_sat_f32_u", imm.NONE, sig.f_i),$/;"	d
I32_TRUNC_SAT_F64_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32_TRUNC_SAT_F64_S	(0xFC, 0x02, "i32.trunc_sat_f64_s", imm.NONE, sig.d_i),$/;"	d
I32_TRUNC_SAT_F64_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32_TRUNC_SAT_F64_U	(0xFC, 0x03, "i32.trunc_sat_f64_u", imm.NONE, sig.d_i),$/;"	d
I32_WRAP_I64	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32_WRAP_I64		(0x00, 0xA7, "i32.wrap_i64", imm.NONE, sig.l_i),$/;"	d
I32_WRAP_I64	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I32_WRAP_I64	= u32.view<u64>;$/;"	d
I32_XOR	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I32_XOR			(0x00, 0x73, "i32.xor", imm.NONE, sig.ii_i),$/;"	d
I32_XOR	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I32_XOR	= u32.^;$/;"	d
I32_ZERO	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	I32_ZERO	(true, 		true),$/;"	d
I64	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	I64		(0x7E, -2),$/;"	d
I64	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case I64(val: i64);$/;"	d
I64	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def I64 = [ImmKind.I64];$/;"	d
I64	$VIRGIL_WIZARD/src/engine/Sidetable.v3	/^	COMPLEX, I8, U8, I16, U16, I32, U32, I64, F32, F64, V128, REF$/;"	d
I64	$VIRGIL_WIZARD/src/engine/Type.v3	/^	case I64;						\/\/ 64-bit integer$/;"	d
I64	$VIRGIL_WIZARD/src/engine/Value.v3	/^	case I64(val: u64);$/;"	d
I64X2_ABS	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64X2_ABS			(0xFD, 192, "i64x2.abs", imm.NONE, sig.s_s),$/;"	d
I64X2_ABS	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I64X2_ABS =			do_s_s_x2(_, V128_I64_ABS);$/;"	d
I64X2_ADD	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64X2_ADD			(0xFD, 206, "i64x2.add", imm.NONE, sig.ss_s),$/;"	d
I64X2_ADD	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I64X2_ADD =			do_ss_s_x2(_, _, u64.+);$/;"	d
I64X2_ALLTRUE	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64X2_ALLTRUE			(0xFD, 195, "i64x2.alltrue", imm.NONE, sig.s_i),$/;"	d
I64X2_ALLTRUE	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I64X2_ALLTRUE =		do_v128_alltrue(_, 64, i64.view<u64>, i64.==);$/;"	d
I64X2_BITMASK	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64X2_BITMASK			(0xFD, 196, "i64x2.bitmask", imm.NONE, sig.s_i),$/;"	d
I64X2_BITMASK	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I64X2_BITMASK =		do_v128_bitmask(_, 64, 6);$/;"	d
I64X2_EQ	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64X2_EQ			(0xFD, 214, "i64x2.eq", imm.NONE, sig.ss_s),$/;"	d
I64X2_EQ	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I64X2_EQ =			do_ss_s_x2(_, _, V128_I64X2_EQ);$/;"	d
I64X2_EXTEND_HIGH_I32X4_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64X2_EXTEND_HIGH_I32X4_S	(0xFD, 200, "i64x2.extend_high_i32x4_s", imm.NONE, sig.s_s),$/;"	d
I64X2_EXTEND_HIGH_I32X4_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I64X2_EXTEND_HIGH_I32X4_S = do_v128_half_extend<i32, i64, u64>(_, false, 64, i32.view, i64.view, u64.view);$/;"	d
I64X2_EXTEND_HIGH_I32X4_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64X2_EXTEND_HIGH_I32X4_U	(0xFD, 202, "i64x2.extend_high_i32x4_u", imm.NONE, sig.s_s),$/;"	d
I64X2_EXTEND_HIGH_I32X4_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I64X2_EXTEND_HIGH_I32X4_U = do_v128_half_extend<u32, u64, u64>(_, false, 64, u32.view, u64.view, u64.view);$/;"	d
I64X2_EXTEND_LOW_I32X4_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64X2_EXTEND_LOW_I32X4_S	(0xFD, 199, "i64x2.extend_low_i32x4_s", imm.NONE, sig.s_s),$/;"	d
I64X2_EXTEND_LOW_I32X4_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I64X2_EXTEND_LOW_I32X4_S  = do_v128_half_extend<i32, i64, u64>(_, true, 64, i32.view, i64.view, u64.view);$/;"	d
I64X2_EXTEND_LOW_I32X4_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64X2_EXTEND_LOW_I32X4_U	(0xFD, 201, "i64x2.extend_low_i32x4_u", imm.NONE, sig.s_s),$/;"	d
I64X2_EXTEND_LOW_I32X4_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I64X2_EXTEND_LOW_I32X4_U  = do_v128_half_extend<u32, u64, u64>(_, true, 64, u32.view, u64.view, u64.view);$/;"	d
I64X2_EXTMUL_HIGH_I32X4_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64X2_EXTMUL_HIGH_I32X4_S	(0xFD, 221, "i64x2.extmul_high_i32x4_s", imm.NONE, sig.ss_s),$/;"	d
I64X2_EXTMUL_HIGH_I32X4_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I64X2_EXTMUL_HIGH_I32X4_S = do_v128_extmul(_, _, false, 64, i32.view<u64>, i64.view<i32>, u64.view<i64>, i64.*);$/;"	d
I64X2_EXTMUL_HIGH_I32X4_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64X2_EXTMUL_HIGH_I32X4_U	(0xFD, 223, "i64x2.extmul_high_i32x4_u", imm.NONE, sig.ss_s),$/;"	d
I64X2_EXTMUL_HIGH_I32X4_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I64X2_EXTMUL_HIGH_I32X4_U = do_v128_extmul(_, _, false, 64, u32.view<u64>, u64.view<u32>, u64.view<u64>, u64.*);$/;"	d
I64X2_EXTMUL_LOW_I32X4_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64X2_EXTMUL_LOW_I32X4_S	(0xFD, 220, "i64x2.extmul_low_i32x4_s", imm.NONE, sig.ss_s),$/;"	d
I64X2_EXTMUL_LOW_I32X4_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I64X2_EXTMUL_LOW_I32X4_S =	do_v128_extmul(_, _, true, 64, i32.view<u64>, i64.view<i32>, u64.view<i64>, i64.*);$/;"	d
I64X2_EXTMUL_LOW_I32X4_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64X2_EXTMUL_LOW_I32X4_U	(0xFD, 222, "i64x2.extmul_low_i32x4_u", imm.NONE, sig.ss_s),$/;"	d
I64X2_EXTMUL_LOW_I32X4_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I64X2_EXTMUL_LOW_I32X4_U =	do_v128_extmul(_, _, true, 64, u32.view<u64>, u64.view<u32>, u64.view<u64>, u64.*);$/;"	d
I64X2_EXTRACT_LANE	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64X2_EXTRACT_LANE		(0xFD, 29, "i64x2.extract_lane", imm.LANE, sig.s_l),$/;"	d
I64X2_GE_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64X2_GE_S			(0xFD, 219, "i64x2.ge_s", imm.NONE, sig.ss_s),$/;"	d
I64X2_GE_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I64X2_GE_S =		commute_binop(I64X2_LE_S);$/;"	d
I64X2_GT_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64X2_GT_S			(0xFD, 217, "i64x2.gt_s", imm.NONE, sig.ss_s),$/;"	d
I64X2_GT_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I64X2_GT_S =		commute_binop(I64X2_LT_S);$/;"	d
I64X2_LE_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64X2_LE_S			(0xFD, 218, "i64x2.le_s", imm.NONE, sig.ss_s),$/;"	d
I64X2_LE_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I64X2_LE_S =		do_ss_s_x2(_, _, V128_I64X2_LE_S);$/;"	d
I64X2_LT_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64X2_LT_S			(0xFD, 216, "i64x2.lt_s", imm.NONE, sig.ss_s),$/;"	d
I64X2_LT_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I64X2_LT_S =		do_ss_s_x2(_, _, V128_I64X2_LT_S);$/;"	d
I64X2_MUL	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64X2_MUL			(0xFD, 213, "i64x2.mul", imm.NONE, sig.ss_s),$/;"	d
I64X2_MUL	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I64X2_MUL =			do_ss_s_x2(_, _, u64.*);$/;"	d
I64X2_NE	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64X2_NE			(0xFD, 215, "i64x2.ne", imm.NONE, sig.ss_s),$/;"	d
I64X2_NE	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I64X2_NE =			do_ss_s_x2(_, _, V128_I64X2_NE);$/;"	d
I64X2_NEG	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64X2_NEG			(0xFD, 193, "i64x2.neg", imm.NONE, sig.s_s),$/;"	d
I64X2_NEG	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I64X2_NEG =			do_ss_s_x2((0, 0), _, u64.-);$/;"	d
I64X2_RELAXED_LANESELECT	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64X2_RELAXED_LANESELECT 		(0xFD,	0x10C, "i64x2.relaxed_laneselect", imm.NONE, sig.sss_s),$/;"	d
I64X2_REPLACE_LANE	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64X2_REPLACE_LANE		(0xFD, 30, "i64x2.replace_lane", imm.LANE, sig.sl_s),$/;"	d
I64X2_SHL	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64X2_SHL			(0xFD, 203, "i64x2.shl", imm.NONE, sig.si_s),$/;"	d
I64X2_SHL	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I64X2_SHL =				do_si_s_x2(_, _, V3Eval.I64_SHL);$/;"	d
I64X2_SHR_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64X2_SHR_S			(0xFD, 204, "i64x2.shr_s", imm.NONE, sig.si_s),$/;"	d
I64X2_SHR_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I64X2_SHR_S =			do_si_s_x2(_, _, V128_I64X2_SHR_S);$/;"	d
I64X2_SHR_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64X2_SHR_U			(0xFD, 205, "i64x2.shr_u", imm.NONE, sig.si_s),$/;"	d
I64X2_SHR_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I64X2_SHR_U =			do_si_s_x2(_, _, I64_SHR_U);$/;"	d
I64X2_SPLAT	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64X2_SPLAT			(0xFD, 18, "i64x2.splat", imm.NONE, sig.l_s),$/;"	d
I64X2_SUB	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64X2_SUB			(0xFD, 209, "i64x2.sub", imm.NONE, sig.ss_s),$/;"	d
I64X2_SUB	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I64X2_SUB =			do_ss_s_x2(_, _, u64.-);$/;"	d
I64_ABS_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def I64_ABS_S(a: i64) -> i64 {$/;"	m
I64_ADD	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case I64_ADD(a: InitExpr, b: InitExpr);$/;"	d
I64_ADD	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_ADD			(0x00, 0x7C, "i64.add", imm.NONE, sig.ll_l),$/;"	d
I64_ADD	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I64_ADD	= u64.+;$/;"	d
I64_AND	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_AND			(0x00, 0x83, "i64.and", imm.NONE, sig.ll_l),$/;"	d
I64_AND	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I64_AND	= u64.&;$/;"	d
I64_ATOMIC_LOAD	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_ATOMIC_LOAD			(0xFE, 0x11, "i64.atomic.load", imm.MEMARG, sig.i_l),$/;"	d
I64_ATOMIC_LOAD16_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_ATOMIC_LOAD16_U		(0xFE, 0x15, "i64.atomic.load16_u", imm.MEMARG, sig.i_l),$/;"	d
I64_ATOMIC_LOAD32_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_ATOMIC_LOAD32_U		(0xFE, 0x16, "i64.atomic.load32_u", imm.MEMARG, sig.i_l),$/;"	d
I64_ATOMIC_LOAD8_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_ATOMIC_LOAD8_U		(0xFE, 0x14, "i64.atomic.load8_u", imm.MEMARG, sig.i_l),$/;"	d
I64_ATOMIC_RMW16_ADD_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_ATOMIC_RMW16_ADD_U		(0xFE, 0x23, "i64.atomic.rmw16.add_u", imm.MEMARG, sig.il_l),$/;"	d
I64_ATOMIC_RMW16_AND_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_ATOMIC_RMW16_AND_U		(0xFE, 0x31, "i64.atomic.rmw16.and_u", imm.MEMARG, sig.il_l),$/;"	d
I64_ATOMIC_RMW16_CMPXCHG_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_ATOMIC_RMW16_CMPXCHG_U	(0xFE, 0x4D, "i64.atomic.rmw16.cmpxchg_u", imm.MEMARG, sig.ill_l),$/;"	d
I64_ATOMIC_RMW16_OR_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_ATOMIC_RMW16_OR_U		(0xFE, 0x38, "i64.atomic.rmw16.or_u", imm.MEMARG, sig.il_l),$/;"	d
I64_ATOMIC_RMW16_SUB_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_ATOMIC_RMW16_SUB_U		(0xFE, 0x2A, "i64.atomic.rmw16.sub_u", imm.MEMARG, sig.il_l),$/;"	d
I64_ATOMIC_RMW16_XCHG_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_ATOMIC_RMW16_XCHG_U		(0xFE, 0x46, "i64.atomic.rmw16.xchg_u", imm.MEMARG, sig.il_l),$/;"	d
I64_ATOMIC_RMW16_XOR_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_ATOMIC_RMW16_XOR_U		(0xFE, 0x3F, "i64.atomic.rmw16.xor_u", imm.MEMARG, sig.il_l),$/;"	d
I64_ATOMIC_RMW32_ADD_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_ATOMIC_RMW32_ADD_U		(0xFE, 0x24, "i64.atomic.rmw32.add_u", imm.MEMARG, sig.il_l),$/;"	d
I64_ATOMIC_RMW32_AND_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_ATOMIC_RMW32_AND_U		(0xFE, 0x32, "i64.atomic.rmw32.and_u", imm.MEMARG, sig.il_l),$/;"	d
I64_ATOMIC_RMW32_CMPXCHG_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_ATOMIC_RMW32_CMPXCHG_U	(0xFE, 0x4E, "i64.atomic.rmw32.cmpxchg_u", imm.MEMARG, sig.ill_l),$/;"	d
I64_ATOMIC_RMW32_OR_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_ATOMIC_RMW32_OR_U		(0xFE, 0x39, "i64.atomic.rmw32.or_u", imm.MEMARG, sig.il_l),$/;"	d
I64_ATOMIC_RMW32_SUB_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_ATOMIC_RMW32_SUB_U		(0xFE, 0x2B, "i64.atomic.rmw32.sub_u", imm.MEMARG, sig.il_l),$/;"	d
I64_ATOMIC_RMW32_XCHG_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_ATOMIC_RMW32_XCHG_U		(0xFE, 0x47, "i64.atomic.rmw32.xchg_u", imm.MEMARG, sig.il_l),$/;"	d
I64_ATOMIC_RMW32_XOR_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_ATOMIC_RMW32_XOR_U		(0xFE, 0x40, "i64.atomic.rmw32.xor_u", imm.MEMARG, sig.il_l),$/;"	d
I64_ATOMIC_RMW8_ADD_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_ATOMIC_RMW8_ADD_U		(0xFE, 0x22, "i64.atomic.rmw8.add_u", imm.MEMARG, sig.il_l),$/;"	d
I64_ATOMIC_RMW8_AND_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_ATOMIC_RMW8_AND_U		(0xFE, 0x30, "i64.atomic.rmw8.and_u", imm.MEMARG, sig.il_l),$/;"	d
I64_ATOMIC_RMW8_CMPXCHG_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_ATOMIC_RMW8_CMPXCHG_U	(0xFE, 0x4C, "i64.atomic.rmw8.cmpxchg_u", imm.MEMARG, sig.ill_l),$/;"	d
I64_ATOMIC_RMW8_OR_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_ATOMIC_RMW8_OR_U		(0xFE, 0x37, "i64.atomic.rmw8.or_u", imm.MEMARG, sig.il_l),$/;"	d
I64_ATOMIC_RMW8_SUB_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_ATOMIC_RMW8_SUB_U		(0xFE, 0x29, "i64.atomic.rmw8.sub_u", imm.MEMARG, sig.il_l),$/;"	d
I64_ATOMIC_RMW8_XCHG_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_ATOMIC_RMW8_XCHG_U		(0xFE, 0x45, "i64.atomic.rmw8.xchg_u", imm.MEMARG, sig.il_l),$/;"	d
I64_ATOMIC_RMW8_XOR_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_ATOMIC_RMW8_XOR_U		(0xFE, 0x3E, "i64.atomic.rmw8.xor_u", imm.MEMARG, sig.il_l),$/;"	d
I64_ATOMIC_RMW_ADD	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_ATOMIC_RMW_ADD		(0xFE, 0x1F, "i64.atomic.rmw.add", imm.MEMARG, sig.il_l),$/;"	d
I64_ATOMIC_RMW_AND	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_ATOMIC_RMW_AND		(0xFE, 0x2D, "i64.atomic.rmw.and", imm.MEMARG, sig.il_l),$/;"	d
I64_ATOMIC_RMW_CMPXCHG	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_ATOMIC_RMW_CMPXCHG		(0xFE, 0x49, "i64.atomic.rmw.cmpxchg", imm.MEMARG, sig.ill_l),$/;"	d
I64_ATOMIC_RMW_OR	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_ATOMIC_RMW_OR		(0xFE, 0x34, "i64.atomic.rmw.or", imm.MEMARG, sig.il_l),$/;"	d
I64_ATOMIC_RMW_SUB	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_ATOMIC_RMW_SUB		(0xFE, 0x26, "i64.atomic.rmw.sub", imm.MEMARG, sig.il_l),$/;"	d
I64_ATOMIC_RMW_XCHG	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_ATOMIC_RMW_XCHG		(0xFE, 0x42, "i64.atomic.rmw.xchg", imm.MEMARG, sig.il_l),$/;"	d
I64_ATOMIC_RMW_XOR	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_ATOMIC_RMW_XOR		(0xFE, 0x3B, "i64.atomic.rmw.xor", imm.MEMARG, sig.il_l),$/;"	d
I64_ATOMIC_STORE	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_ATOMIC_STORE		(0xFE, 0x18, "i64.atomic.store", imm.MEMARG, sig.il_v),$/;"	d
I64_ATOMIC_STORE16	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_ATOMIC_STORE16		(0xFE, 0x1C, "i64.atomic.store16", imm.MEMARG, sig.il_v),$/;"	d
I64_ATOMIC_STORE32	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_ATOMIC_STORE32		(0xFE, 0x1D, "i64.atomic.store32", imm.MEMARG, sig.il_v),$/;"	d
I64_ATOMIC_STORE8	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_ATOMIC_STORE8		(0xFE, 0x1B, "i64.atomic.store8", imm.MEMARG, sig.il_v),$/;"	d
I64_CLZ	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_CLZ			(0x00, 0x79, "i64.clz", imm.NONE, sig.l_l),$/;"	d
I64_CLZ	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I64_CLZ(x: u64) -> u64 {$/;"	f
I64_CONST	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_CONST		(0x00, 0x42, "i64.const", imm.I64, sig.v_l),$/;"	d
I64_CTZ	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_CTZ			(0x00, 0x7A, "i64.ctz", imm.NONE, sig.l_l),$/;"	d
I64_CTZ	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I64_CTZ(x: u64) -> u64 {$/;"	f
I64_DIV_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_DIV_S		(0x00, 0x7F, "i64.div_s", imm.NONE, sig.ll_l),$/;"	d
I64_DIV_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I64_DIV_S(x: i64, y: i64) -> (i64, TrapReason) {$/;"	f
I64_DIV_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_DIV_U		(0x00, 0x80, "i64.div_u", imm.NONE, sig.ll_l),$/;"	d
I64_DIV_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I64_DIV_U(x: u64, y: u64) -> (u64, TrapReason) {$/;"	f
I64_EQ	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_EQ			(0x00, 0x51, "i64.eq", imm.NONE, sig.ll_i),$/;"	d
I64_EQ	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I64_EQ	= u64.==;$/;"	d
I64_EQZ	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_EQZ			(0x00, 0x50, "i64.eqz", imm.NONE, sig.l_i),$/;"	d
I64_EQZ	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I64_EQZ	= u64.==(0, _);$/;"	d
I64_EXTEND16_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_EXTEND16_S		(0x00, 0xC3, "i64.extend16_s", imm.NONE, sig.l_l),$/;"	d
I64_EXTEND16_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I64_EXTEND16_S(a: i64) -> i64 {$/;"	f
I64_EXTEND32_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_EXTEND32_S		(0x00, 0xC4, "i64.extend32_s", imm.NONE, sig.l_l),$/;"	d
I64_EXTEND32_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I64_EXTEND32_S(a: i64) -> i64 {$/;"	f
I64_EXTEND8_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_EXTEND8_S		(0x00, 0xC2, "i64.extend8_s", imm.NONE, sig.l_l),$/;"	d
I64_EXTEND8_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I64_EXTEND8_S(a: i64) -> i64 {$/;"	f
I64_EXTEND_I32_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_EXTEND_I32_S	(0x00, 0xAC, "i64.extend_i32_s", imm.NONE, sig.i_l),$/;"	d
I64_EXTEND_I32_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I64_EXTEND_I32_S	= i64.view<i32>;$/;"	d
I64_EXTEND_I32_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_EXTEND_I32_U	(0x00, 0xAD, "i64.extend_i32_u", imm.NONE, sig.i_l),$/;"	d
I64_EXTEND_I32_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I64_EXTEND_I32_U	= u64.view<u32>;$/;"	d
I64_GE_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_GE_S		(0x00, 0x59, "i64.ge_s", imm.NONE, sig.ll_i),$/;"	d
I64_GE_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I64_GE_S	= i64.>=;$/;"	d
I64_GE_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_GE_U		(0x00, 0x5A, "i64.ge_u", imm.NONE, sig.ll_i),$/;"	d
I64_GE_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I64_GE_U	= u64.>=;$/;"	d
I64_GT_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_GT_S		(0x00, 0x55, "i64.gt_s", imm.NONE, sig.ll_i),$/;"	d
I64_GT_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I64_GT_S	= i64.>;$/;"	d
I64_GT_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_GT_U		(0x00, 0x56, "i64.gt_u", imm.NONE, sig.ll_i),$/;"	d
I64_GT_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I64_GT_U	= u64.>;$/;"	d
I64_LE_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_LE_S		(0x00, 0x57, "i64.le_s", imm.NONE, sig.ll_i),$/;"	d
I64_LE_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I64_LE_S	= i64.<=;$/;"	d
I64_LE_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_LE_U		(0x00, 0x58, "i64.le_u", imm.NONE, sig.ll_i),$/;"	d
I64_LE_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I64_LE_U	= u64.<=;$/;"	d
I64_LOAD	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def I64_LOAD() {$/;"	m
I64_LOAD	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_LOAD		(0x00, 0x29, "i64.load", imm.MEMARG, sig.i_l),$/;"	d
I64_LOAD16_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_LOAD16_S		(0x00, 0x32, "i64.load16_s", imm.MEMARG, sig.i_l),$/;"	d
I64_LOAD16_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_LOAD16_U		(0x00, 0x33, "i64.load16_u", imm.MEMARG, sig.i_l),$/;"	d
I64_LOAD32_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_LOAD32_S		(0x00, 0x34, "i64.load32_s", imm.MEMARG, sig.i_l),$/;"	d
I64_LOAD32_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_LOAD32_U		(0x00, 0x35, "i64.load32_u", imm.MEMARG, sig.i_l),$/;"	d
I64_LOAD8_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_LOAD8_S		(0x00, 0x30, "i64.load8_s", imm.MEMARG, sig.i_l),$/;"	d
I64_LOAD8_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_LOAD8_U		(0x00, 0x31, "i64.load8_u", imm.MEMARG, sig.i_l),$/;"	d
I64_LT_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_LT_S		(0x00, 0x53, "i64.lt_s", imm.NONE, sig.ll_i),$/;"	d
I64_LT_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I64_LT_S	= i64.<;$/;"	d
I64_LT_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_LT_U		(0x00, 0x54, "i64.lt_u", imm.NONE, sig.ll_i),$/;"	d
I64_LT_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I64_LT_U	= u64.<;$/;"	d
I64_MUL	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case I64_MUL(a: InitExpr, b: InitExpr);$/;"	d
I64_MUL	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_MUL			(0x00, 0x7E, "i64.mul", imm.NONE, sig.ll_l),$/;"	d
I64_MUL	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I64_MUL	= u64.*;$/;"	d
I64_NE	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_NE			(0x00, 0x52, "i64.ne", imm.NONE, sig.ll_i),$/;"	d
I64_NE	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I64_NE	= u64.!=;$/;"	d
I64_NONZERO	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	I64_NONZERO	(false,		false),$/;"	d
I64_OR	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_OR			(0x00, 0x84, "i64.or", imm.NONE, sig.ll_l),$/;"	d
I64_OR	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I64_OR	= u64.|;$/;"	d
I64_POPCNT	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_POPCNT		(0x00, 0x7B, "i64.popcnt", imm.NONE, sig.l_l),$/;"	d
I64_POPCNT	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I64_POPCNT(x: u64) -> u64 {$/;"	f
I64_REINTERPRET_F64	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_REINTERPRET_F64	(0x00, 0xBD, "i64.reinterpret_f64", imm.NONE, sig.d_l),$/;"	d
I64_REINTERPRET_F64	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I64_REINTERPRET_F64	= u64.view<double>;$/;"	d
I64_REM_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_REM_S		(0x00, 0x81, "i64.rem_s", imm.NONE, sig.ll_l),$/;"	d
I64_REM_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I64_REM_S(x: i64, y: i64) -> (i64, TrapReason) {$/;"	f
I64_REM_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_REM_U		(0x00, 0x82, "i64.rem_u", imm.NONE, sig.ll_l),$/;"	d
I64_REM_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I64_REM_U(x: u64, y: u64) -> (u64, TrapReason) {$/;"	f
I64_ROTL	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_ROTL		(0x00, 0x89, "i64.rotl", imm.NONE, sig.ll_l),$/;"	d
I64_ROTL	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I64_ROTL(x: u64, z: u64) -> u64 {$/;"	f
I64_ROTR	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_ROTR		(0x00, 0x8A, "i64.rotr", imm.NONE, sig.ll_l),$/;"	d
I64_ROTR	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I64_ROTR(x: u64, z: u64) -> u64 {$/;"	f
I64_SHL	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_SHL			(0x00, 0x86, "i64.shl", imm.NONE, sig.ll_l),$/;"	d
I64_SHL	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I64_SHL(x: u64, y: u64) -> u64 {$/;"	f
I64_SHR_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_SHR_S		(0x00, 0x87, "i64.shr_s", imm.NONE, sig.ll_l),$/;"	d
I64_SHR_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I64_SHR_S(x: i64, y: i64) -> i64 {$/;"	f
I64_SHR_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_SHR_U		(0x00, 0x88, "i64.shr_u", imm.NONE, sig.ll_l),$/;"	d
I64_SHR_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I64_SHR_U(x: u64, y: u64) -> u64 {$/;"	f
I64_STORE	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def I64_STORE() {$/;"	m
I64_STORE	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_STORE		(0x00, 0x37, "i64.store", imm.MEMARG, sig.il_v),$/;"	d
I64_STORE16	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_STORE16		(0x00, 0x3D, "i64.store16", imm.MEMARG, sig.il_v),$/;"	d
I64_STORE32	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_STORE32		(0x00, 0x3E, "i64.store32", imm.MEMARG, sig.il_v),$/;"	d
I64_STORE8	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_STORE8		(0x00, 0x3C, "i64.store8", imm.MEMARG, sig.il_v),$/;"	d
I64_SUB	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case I64_SUB(a: InitExpr, b: InitExpr);$/;"	d
I64_SUB	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_SUB			(0x00, 0x7D, "i64.sub", imm.NONE, sig.ll_l),$/;"	d
I64_SUB	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I64_SUB	= u64.-;$/;"	d
I64_TRUNC_F32_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_TRUNC_F32_S		(0x00, 0xAE, "i64.trunc_f32_s", imm.NONE, sig.f_l),$/;"	d
I64_TRUNC_F32_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I64_TRUNC_F32_S	= truncF32(-9.223373e18f, 9223372036854775808f, i64.truncf, _);$/;"	d
I64_TRUNC_F32_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_TRUNC_F32_U		(0x00, 0xAF, "i64.trunc_f32_u", imm.NONE, sig.f_l),$/;"	d
I64_TRUNC_F32_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I64_TRUNC_F32_U	= truncF32(-1f, 18446744073709551616f, u64.truncf, _);$/;"	d
I64_TRUNC_F64_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_TRUNC_F64_S		(0x00, 0xB0, "i64.trunc_f64_s", imm.NONE, sig.d_l),$/;"	d
I64_TRUNC_F64_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I64_TRUNC_F64_S	= truncF64(-9.223372036854778E18d, 9223372036854775808d, i64.truncd, _);$/;"	d
I64_TRUNC_F64_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_TRUNC_F64_U		(0x00, 0xB1, "i64.trunc_f64_u", imm.NONE, sig.d_l),$/;"	d
I64_TRUNC_F64_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I64_TRUNC_F64_U	= truncF64(-1d, 18446744073709551616d, u64.truncd, _);$/;"	d
I64_TRUNC_SAT_F32_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_TRUNC_SAT_F32_S	(0xFC, 0x04, "i64.trunc_sat_f32_s", imm.NONE, sig.f_l),$/;"	d
I64_TRUNC_SAT_F32_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_TRUNC_SAT_F32_U	(0xFC, 0x05, "i64.trunc_sat_f32_u", imm.NONE, sig.f_l),$/;"	d
I64_TRUNC_SAT_F64_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_TRUNC_SAT_F64_S	(0xFC, 0x06, "i64.trunc_sat_f64_s", imm.NONE, sig.d_l),$/;"	d
I64_TRUNC_SAT_F64_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_TRUNC_SAT_F64_U	(0xFC, 0x07, "i64.trunc_sat_f64_u", imm.NONE, sig.d_l),$/;"	d
I64_XOR	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I64_XOR			(0x00, 0x85, "i64.xor", imm.NONE, sig.ll_l),$/;"	d
I64_XOR	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I64_XOR	= u64.^;$/;"	d
I64_ZERO	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	I64_ZERO	(true, 		false),$/;"	d
I8	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	I8		(0x78, -8),$/;"	d
I8	$VIRGIL_WIZARD/src/engine/Sidetable.v3	/^	COMPLEX, I8, U8, I16, U16, I32, U32, I64, F32, F64, V128, REF$/;"	d
I8X16_ABS	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I8X16_ABS			(0xFD, 96, "i8x16.abs", imm.NONE, sig.s_s),$/;"	d
I8X16_ABS	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I8X16_ABS =			do_s_s_x16(_, V128_I8_ABS);$/;"	d
I8X16_ADD	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I8X16_ADD			(0xFD, 110, "i8x16.add", imm.NONE, sig.ss_s),$/;"	d
I8X16_ADD	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I8X16_ADD =			do_ss_s_x16(_, _, u8.+);$/;"	d
I8X16_ADD_SAT_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I8X16_ADD_SAT_S			(0xFD, 111, "i8x16.add_sat_s", imm.NONE, sig.ss_s),$/;"	d
I8X16_ADD_SAT_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I8X16_ADD_SAT_S =		do_ss_s_x16(_, _, V128_I8_ADD_SAT_S);$/;"	d
I8X16_ADD_SAT_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I8X16_ADD_SAT_U			(0xFD, 112, "i8x16.add_sat_u", imm.NONE, sig.ss_s),$/;"	d
I8X16_ADD_SAT_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I8X16_ADD_SAT_U =		do_ss_s_x16(_, _, I8_ADD_SAT_U);$/;"	d
I8X16_ALLTRUE	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I8X16_ALLTRUE			(0xFD, 99, "i8x16.alltrue", imm.NONE, sig.s_i),$/;"	d
I8X16_ALLTRUE	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I8X16_ALLTRUE =		do_v128_alltrue(_, 8, i8.view<u64>, i8.==);$/;"	d
I8X16_AVGR_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I8X16_AVGR_U			(0xFD, 123, "i8x16.avgr_u", imm.NONE, sig.ss_s),$/;"	d
I8X16_AVGR_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I8X16_AVGR_U =		do_ss_s_x16(_, _, I8_AVGR_U);$/;"	d
I8X16_BITMASK	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I8X16_BITMASK			(0xFD, 100, "i8x16.bitmask", imm.NONE, sig.s_i),$/;"	d
I8X16_BITMASK	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I8X16_BITMASK =		do_v128_bitmask(_, 8, 3);$/;"	d
I8X16_EQ	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I8X16_EQ			(0xFD, 35, "i8x16.eq", imm.NONE, sig.ss_s),$/;"	d
I8X16_EQ	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I8X16_EQ =			do_ss_s_x16(_, _, V128_I8X16_EQ);$/;"	d
I8X16_EXTRACT_LANE_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I8X16_EXTRACT_LANE_S		(0xFD, 21, "i8x16.extract_lane_s", imm.LANE, sig.s_i),$/;"	d
I8X16_EXTRACT_LANE_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I8X16_EXTRACT_LANE_U		(0xFD, 22, "i8x16.extract_lane_u", imm.LANE, sig.s_i),$/;"	d
I8X16_GE_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I8X16_GE_S			(0xFD, 43, "i8x16.ge_s", imm.NONE, sig.ss_s),$/;"	d
I8X16_GE_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I8X16_GE_S =		commute_binop(I8X16_LE_S);$/;"	d
I8X16_GE_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I8X16_GE_U			(0xFD, 44, "i8x16.ge_u", imm.NONE, sig.ss_s),$/;"	d
I8X16_GE_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I8X16_GE_U =		commute_binop(I8X16_LE_U);$/;"	d
I8X16_GT_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I8X16_GT_S			(0xFD, 39, "i8x16.gt_s", imm.NONE, sig.ss_s),$/;"	d
I8X16_GT_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I8X16_GT_S =		commute_binop(I8X16_LT_S);$/;"	d
I8X16_GT_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I8X16_GT_U			(0xFD, 40, "i8x16.gt_u", imm.NONE, sig.ss_s),$/;"	d
I8X16_GT_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I8X16_GT_U =		commute_binop(I8X16_LT_U);$/;"	d
I8X16_LE_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I8X16_LE_S			(0xFD, 41, "i8x16.le_s", imm.NONE, sig.ss_s),$/;"	d
I8X16_LE_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I8X16_LE_S =		do_ss_s_x16(_, _, V128_I8X16_LE_S);$/;"	d
I8X16_LE_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I8X16_LE_U			(0xFD, 42, "i8x16.le_u", imm.NONE, sig.ss_s),$/;"	d
I8X16_LE_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I8X16_LE_U =		do_ss_s_x16(_, _, V128_I8X16_LE_U);$/;"	d
I8X16_LT_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I8X16_LT_S			(0xFD, 37, "i8x16.lt_s", imm.NONE, sig.ss_s),$/;"	d
I8X16_LT_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I8X16_LT_S =		do_ss_s_x16(_, _, V128_I8X16_LT_S);$/;"	d
I8X16_LT_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I8X16_LT_U			(0xFD, 38, "i8x16.lt_u", imm.NONE, sig.ss_s),$/;"	d
I8X16_LT_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I8X16_LT_U =		do_ss_s_x16(_, _, V128_I8X16_LT_U);$/;"	d
I8X16_MAX_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I8X16_MAX_S			(0xFD, 120, "i8x16.max_s", imm.NONE, sig.ss_s),$/;"	d
I8X16_MAX_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I8X16_MAX_S =		do_ss_s_x16(_, _, V128_I8_MAX_S);$/;"	d
I8X16_MAX_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I8X16_MAX_U			(0xFD, 121, "i8x16.max_u", imm.NONE, sig.ss_s),$/;"	d
I8X16_MAX_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I8X16_MAX_U =		do_ss_s_x16(_, _, I8_MAX_U);$/;"	d
I8X16_MIN_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I8X16_MIN_S			(0xFD, 118, "i8x16.min_s", imm.NONE, sig.ss_s),$/;"	d
I8X16_MIN_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I8X16_MIN_S =		do_ss_s_x16(_, _, V128_I8_MIN_S);$/;"	d
I8X16_MIN_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I8X16_MIN_U			(0xFD, 119, "i8x16.min_u", imm.NONE, sig.ss_s),$/;"	d
I8X16_MIN_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I8X16_MIN_U =		do_ss_s_x16(_, _, I8_MIN_U);$/;"	d
I8X16_NARROW_I16X8_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I8X16_NARROW_I16X8_S		(0xFD, 101, "i8x16.narrow_i16x8_s", imm.NONE, sig.ss_s),$/;"	d
I8X16_NARROW_I16X8_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I8X16_NARROW_I16X8_S =		do_v128_narrow(_, _, 16, i16.view<u64>, I8_CONVERT_I16_SAT_S, u8.view<i8>);$/;"	d
I8X16_NARROW_I16X8_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I8X16_NARROW_I16X8_U		(0xFD, 102, "i8x16.narrow_i16x8_u", imm.NONE, sig.ss_s),$/;"	d
I8X16_NARROW_I16X8_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I8X16_NARROW_I16X8_U =		do_v128_narrow(_, _, 16, i16.view<u64>, I8_CONVERT_I16_SAT_U, u8.view<u8>);$/;"	d
I8X16_NE	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I8X16_NE			(0xFD, 36, "i8x16.ne", imm.NONE, sig.ss_s),$/;"	d
I8X16_NE	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I8X16_NE =			do_ss_s_x16(_, _, V128_I8X16_NE);$/;"	d
I8X16_NEG	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I8X16_NEG			(0xFD, 97, "i8x16.neg", imm.NONE, sig.s_s),$/;"	d
I8X16_NEG	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I8X16_NEG =			do_ss_s_x16((0, 0), _, u8.-);$/;"	d
I8X16_POPCNT	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I8X16_POPCNT			(0xFD, 98, "i8x16.popcnt", imm.NONE, sig.s_s),$/;"	d
I8X16_POPCNT	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I8X16_POPCNT =		do_s_s_x16(_, I8_POPCNT);$/;"	d
I8X16_RELAXED_LANESELECT	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I8X16_RELAXED_LANESELECT 		(0xFD,	0x109, "i8x16.relaxed_laneselect", imm.NONE, sig.sss_s),$/;"	d
I8X16_RELAXED_SWIZZLE	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I8X16_RELAXED_SWIZZLE 			(0xFD,	0x100, "i8x16.relaxed_swizzle", imm.NONE, sig.ss_s),$/;"	d
I8X16_REPLACE_LANE	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I8X16_REPLACE_LANE		(0xFD, 23, "i8x16.replace_lane", imm.LANE, sig.si_s),$/;"	d
I8X16_SHL	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I8X16_SHL			(0xFD, 107, "i8x16.shl", imm.NONE, sig.si_s),$/;"	d
I8X16_SHL	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I8X16_SHL =			do_si_s_x16(_, _, V128_I8X16_SHL);$/;"	d
I8X16_SHR_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I8X16_SHR_S			(0xFD, 108, "i8x16.shr_s", imm.NONE, sig.si_s),$/;"	d
I8X16_SHR_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I8X16_SHR_S =		do_si_s_x16(_, _, V128_I8X16_SHR_S);$/;"	d
I8X16_SHR_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I8X16_SHR_U			(0xFD, 109, "i8x16.shr_u", imm.NONE, sig.si_s),$/;"	d
I8X16_SHR_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I8X16_SHR_U =		do_si_s_x16(_, _, I8_SHR_U);$/;"	d
I8X16_SHUFFLE	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I8X16_SHUFFLE			(0xFD, 13, "i8x16.shuffle", imm.LANEx16, sig.ss_s),$/;"	d
I8X16_SPLAT	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I8X16_SPLAT			(0xFD, 15, "i8x16.splat", imm.NONE, sig.i_s),$/;"	d
I8X16_SUB	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I8X16_SUB			(0xFD, 113, "i8x16.sub", imm.NONE, sig.ss_s),$/;"	d
I8X16_SUB	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I8X16_SUB =			do_ss_s_x16(_, _, u8.-);$/;"	d
I8X16_SUB_SAT_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I8X16_SUB_SAT_S			(0xFD, 114, "i8x16.sub_sat_s", imm.NONE, sig.ss_s),$/;"	d
I8X16_SUB_SAT_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I8X16_SUB_SAT_S =		do_ss_s_x16(_, _, V128_I8_SUB_SAT_S);$/;"	d
I8X16_SUB_SAT_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I8X16_SUB_SAT_U			(0xFD, 115, "i8x16.sub_sat_u", imm.NONE, sig.ss_s),$/;"	d
I8X16_SUB_SAT_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def I8X16_SUB_SAT_U =		do_ss_s_x16(_, _, I8_SUB_SAT_U);$/;"	d
I8X16_SWIZZLE	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	I8X16_SWIZZLE			(0xFD, 14, "i8x16.swizzle", imm.NONE, sig.ss_s),$/;"	d
I8_ABS_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def I8_ABS_S(a: i8) -> i8 {$/;"	m
I8_ADD_SAT_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def I8_ADD_SAT_S(a: i8, b: i8) -> i8 {$/;"	m
I8_ADD_SAT_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def I8_ADD_SAT_U(a: u8, b: u8) -> u8 {$/;"	m
I8_AVGR_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def I8_AVGR_U(a: u8, b: u8) -> u8 {$/;"	m
I8_CONVERT_I16_SAT_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def I8_CONVERT_I16_SAT_S(a: i16) -> i8 {$/;"	m
I8_CONVERT_I16_SAT_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def I8_CONVERT_I16_SAT_U(a: i16) -> u8 {$/;"	m
I8_MAX_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def I8_MAX_S(a: i8, b: i8) -> i8 {$/;"	m
I8_MAX_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def I8_MAX_U(a: u8, b: u8) -> u8 {$/;"	m
I8_MIN_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def I8_MIN_S(a: i8, b: i8) -> i8 {$/;"	m
I8_MIN_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def I8_MIN_U(a: u8, b: u8) -> u8 {$/;"	m
I8_POPCNT	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def I8_POPCNT(a: u8) -> u8 {$/;"	m
I8_SHL	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def I8_SHL(a: i8, b: i8) -> i8 {$/;"	m
I8_SHR_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def I8_SHR_S(a: i8, b: i8) -> i8 {$/;"	m
I8_SHR_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def I8_SHR_U(a: u8, b: u8) -> u8 {$/;"	m
I8_SUB_SAT_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def I8_SUB_SAT_S(a: i8, b: i8) -> i8 {$/;"	m
I8_SUB_SAT_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def I8_SUB_SAT_U(a: u8, b: u8) -> u8 {$/;"	m
ID	$VIRGIL_WIZARD/src/monitors/ProfileMonitor.v3	/^var ID: int;$/;"	d
IDRM	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	IDRM		(24, "Identifier removed."),$/;"	d
IF	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def IF() {$/;"	m
IF	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	IF			(0x00, 0x04, "if", imm.BLOCKT, null),$/;"	d
ILLEGAL_ALIGNMENT	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	ILLEGAL_ALIGNMENT,$/;"	d
ILLEGAL_ASSIGNMENT	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	ILLEGAL_ASSIGNMENT,$/;"	d
ILLEGAL_BLOCK_TYPE	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	ILLEGAL_BLOCK_TYPE,$/;"	d
ILLEGAL_CAST	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	ILLEGAL_CAST,$/;"	d
ILLEGAL_FUNCREF	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	ILLEGAL_FUNCREF,$/;"	d
ILLEGAL_LANE	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	ILLEGAL_LANE,$/;"	d
ILLEGAL_SELECT_COUNT	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	ILLEGAL_SELECT_COUNT,$/;"	d
ILLEGAL_SUPERTYPE	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	ILLEGAL_SUPERTYPE,$/;"	d
ILLEGAL_TYPE	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	ILLEGAL_TYPE,$/;"	d
ILSEQ	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	ILSEQ		(25, "Illegal byte sequence."),$/;"	d
IMPORT_COUNT_MISMATCH	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	IMPORT_COUNT_MISMATCH,$/;"	d
IMPORT_CYCLE_DETECTED	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	IMPORT_CYCLE_DETECTED,$/;"	d
IMPORT_KIND_MISMATCH	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	IMPORT_KIND_MISMATCH,$/;"	d
IMPORT_TYPE_MISMATCH	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	IMPORT_TYPE_MISMATCH,$/;"	d
INACTIVE	$VIRGIL_WIZARD/src/util/Palette.v3	/^	INACTIVE	(TermColors.GRAY1),$/;"	d
INCOMPLETE_FUNCTION_BODY	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	INCOMPLETE_FUNCTION_BODY,$/;"	d
INCOMPLETE_SECTION	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	INCOMPLETE_SECTION,$/;"	d
INIT	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	INIT$/;"	d
INITIAL_VALUE_STACK_SIZE	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^def INITIAL_VALUE_STACK_SIZE = 16;$/;"	d
INL_SIZE	$VIRGIL_WIZARD/src/engine/x86-64/X86_64PreGenStubs.v3	/^def INL_SIZE = 88 * 1024;$/;"	d
INPROGRESS	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	INPROGRESS	(26, "Operation in progress."),$/;"	d
INSTR	$VIRGIL_WIZARD/src/util/Palette.v3	/^	INSTR		(TermColors.BRIGHTCYAN),$/;"	d
INT	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^private enum CallKind {INT, EXT}$/;"	d
INTERNAL	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	INTERNAL,$/;"	d
INTERPRETER	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	INVALID, INTERPRETER, SPC, SPC_TRAPS_STUB$/;"	d
INTR	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	INTR		(27, "Interrupted function."),$/;"	d
INT_SIZE	$VIRGIL_WIZARD/src/engine/x86-64/V3Offsets.v3	/^	def INT_SIZE: byte		= 4;$/;"	d
INT_UNREPRESENTABLE	$VIRGIL_WIZARD/src/engine/Trap.v3	/^	INT_UNREPRESENTABLE,$/;"	d
INVAL	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	INVAL		(28, "Invalid argument."),$/;"	d
INVAL	$VIRGIL_WIZARD/src/modules/wasi/x86-64-linux/WspOneModule-x86-64-linux.v3	/^def INVAL = WspOneErrno.INVAL.code;$/;"	d
INVALID	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	INVALID			(0x00, 0xFF, "<invalid>", imm.NONE, null),$/;"	d
INVALID	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	INVALID, INTERPRETER, SPC, SPC_TRAPS_STUB$/;"	d
INVALID_ATTRIBUTE	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	INVALID_ATTRIBUTE,$/;"	d
INVALID_BLOCK_TYPE	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	INVALID_BLOCK_TYPE,$/;"	d
INVALID_DATA_FLAGS	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	INVALID_DATA_FLAGS,$/;"	d
INVALID_ELEM_FLAGS	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	INVALID_ELEM_FLAGS,$/;"	d
INVALID_FILE_TYPE	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	INVALID_FILE_TYPE,$/;"	d
INVALID_GLOBAL_FLAGS	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	INVALID_GLOBAL_FLAGS,$/;"	d
INVALID_HEADER	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	INVALID_HEADER,$/;"	d
INVALID_IMPORT_KIND	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	INVALID_IMPORT_KIND,$/;"	d
INVALID_INIT_EXPR	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	INVALID_INIT_EXPR,$/;"	d
INVALID_MEMORY_FLAGS	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	INVALID_MEMORY_FLAGS,$/;"	d
INVALID_OPCODE	$VIRGIL_WIZARD/src/engine/Trap.v3	/^	INVALID_OPCODE,$/;"	d
INVALID_OPCODE	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	INVALID_OPCODE,$/;"	d
INVALID_PREOPEN_PATH	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	INVALID_PREOPEN_PATH,$/;"	d
INVALID_RESUME	$VIRGIL_WIZARD/src/engine/Trap.v3	/^	INVALID_RESUME,$/;"	d
INVALID_SECTION	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	INVALID_SECTION,$/;"	d
INVALID_SUSPEND	$VIRGIL_WIZARD/src/engine/Trap.v3	/^	INVALID_SUSPEND, \/\/ also used for `suspend` when no handler is found$/;"	d
INVALID_TABLE_FLAGS	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	INVALID_TABLE_FLAGS,$/;"	d
INVALID_TAG_SIGNATURE	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	INVALID_TAG_SIGNATURE,$/;"	d
INVALID_TYPE	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	INVALID_TYPE,$/;"	d
INVALID_UTF8_STRING	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	INVALID_UTF8_STRING,$/;"	d
INVAL_HR	$VIRGIL_WIZARD/src/modules/wasi/x86-64-linux/WspOneModule-x86-64-linux.v3	/^def INVAL_HR = HostResult.Value1(Value.I32(INVAL));$/;"	d
IN_BLOCK	$VIRGIL_WIZARD/src/util/CfgPrinter.v3	/^	IN_BLOCK,$/;"	d
IN_REG	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^def IN_REG = SpcConsts.IN_REG;$/;"	d
IN_REG	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^def IN_REG = SpcConsts.IN_REG;$/;"	d
IO	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	IO		(29, "I\/O error."),$/;"	d
IOV_MAX	$VIRGIL_WIZARD/src/modules/wasi/x86-64-linux/WspOneModule-x86-64-linux.v3	/^def IOV_MAX = 1024;$/;"	d
ISCONN	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	ISCONN		(30, "Socket is connected."),$/;"	d
ISDIR	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	ISDIR		(31, "Is a directory."),$/;"	d
IS_CONST	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^def IS_CONST = SpcConsts.IS_CONST;$/;"	d
IS_CONST	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^def IS_CONST = SpcConsts.IS_CONST;$/;"	d
IS_NOT_WASM_FUNC	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	IS_NOT_WASM_FUNC(false,		false)$/;"	d
IS_STORED	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^def IS_STORED = SpcConsts.IS_STORED;$/;"	d
IS_STORED	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^def IS_STORED = SpcConsts.IS_STORED;$/;"	d
IS_WASM_FUNC	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	IS_WASM_FUNC	(true,		false),$/;"	d
IfMonitor	$VIRGIL_WIZARD/src/monitors/IfMonitor.v3	/^class IfMonitor extends Monitor {$/;"	c
IllegalAlignment	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def IllegalAlignment(max: u32, g: u32) {$/;"	m
IllegalAssignmentToImmutableArray	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def IllegalAssignmentToImmutableArray(t: ValueType) {$/;"	m
IllegalAssignmentToImmutableField	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def IllegalAssignmentToImmutableField(t: ValueType, index: u32) {$/;"	m
IllegalAssignmentToImmutableGlobal	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def IllegalAssignmentToImmutableGlobal(global_index: int) {$/;"	m
IllegalCast	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def IllegalCast(t1: ValueType, t2: ValueType) {$/;"	m
IllegalContinuationBind	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def IllegalContinuationBind(from: ContDecl, to: ContDecl) {$/;"	m
IllegalContinuationReceiverInHandler	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def IllegalContinuationReceiverInHandler(i: int) {$/;"	m
IllegalFuncRef	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def IllegalFuncRef(func: FuncDecl) {$/;"	m
IllegalLane	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def IllegalLane(max: u32, g: u32) {$/;"	m
IllegalNonPrimitiveArray	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def IllegalNonPrimitiveArray(at: ArrayDecl) {$/;"	m
IllegalSelectCount	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def IllegalSelectCount() {$/;"	m
IllegalSelectType	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def IllegalSelectType(t: ValueType) {$/;"	m
IllegalStartFunctionType	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def IllegalStartFunctionType(sig: SigDecl) {$/;"	m
IllegalSupertype	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def IllegalSupertype(decl: HeapTypeDecl, sup: HeapType) {$/;"	m
IllegalTableElementType	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def IllegalTableElementType(code: int) {$/;"	m
IllegalTableTypeForIndirectCall	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def IllegalTableTypeForIndirectCall(elemtype: ValueType) {$/;"	m
Imm	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	case Imm(orig: Token, i: u31);$/;"	d
ImmKind	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^enum ImmKind {$/;"	e
ImmSigs	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^component ImmSigs {$/;"	n
Import	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	Import(2),$/;"	d
ImportCall	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^	case ImportCall(idx: int);$/;"	d
ImportGlobal	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^	case ImportGlobal(idx: int, initial: Value);$/;"	d
ImportInfo	$VIRGIL_WIZARD/src/engine/Module.v3	/^class ImportInfo(module_name: string, field_name: string, import_index: u31) {$/;"	c
ImportProcessor	$VIRGIL_WIZARD/src/engine/Instantiator.v3	/^class ImportProcessor(name: string) {$/;"	c
ImportReturn	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^	case ImportReturn(idx: int, results: Array<Value>);$/;"	d
ImportTracer	$VIRGIL_WIZARD/src/util/ImportTracer.v3	/^class ImportTracer(var filter: DeclFilter) {$/;"	c
IncompleteFunctionBody	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def IncompleteFunctionBody(read: u64, size: u32) {$/;"	m
IncompleteSection	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def IncompleteSection(kind: byte, read: u64, size: u32) {$/;"	m
IndirectCallStats	$VIRGIL_WIZARD/src/monitors/CallsMonitor.v3	/^private class IndirectCallStats {$/;"	c
Info	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^type Info {$/;"	c
Info.Breakpoints	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	case Breakpoints;$/;"	c
Info.Breakpoints	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	case Breakpoints;$/;"	c
Info.Invalid	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	case Invalid(args: string);$/;"	c
Info.Invalid	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	case Invalid(args: string);$/;"	c
Info.Locals	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	case Locals;$/;"	c
Info.Locals	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	case Locals;$/;"	c
InitExpr	$VIRGIL_WIZARD/src/engine/Module.v3	/^type InitExpr {$/;"	c
InitExpr.Array	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case Array(t: HeapType.Array, len: InitExpr, elem: InitExpr);$/;"	c
InitExpr.Array	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case Array(t: HeapType.Array, len: InitExpr, elem: InitExpr);$/;"	c
InitExpr.ArrayNewData	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case ArrayNewData(t: HeapType.Array, data_index: int, offset: InitExpr, len: InitExpr);$/;"	c
InitExpr.ArrayNewData	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case ArrayNewData(t: HeapType.Array, data_index: int, offset: InitExpr, len: InitExpr);$/;"	c
InitExpr.ArrayNewElem	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case ArrayNewElem(t: HeapType.Array, elem_index: int, offset: InitExpr, len: InitExpr);$/;"	c
InitExpr.ArrayNewElem	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case ArrayNewElem(t: HeapType.Array, elem_index: int, offset: InitExpr, len: InitExpr);$/;"	c
InitExpr.Const	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case Const(val: Value);$/;"	c
InitExpr.Const	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case Const(val: Value);$/;"	c
InitExpr.ExternRefNull	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case ExternRefNull;$/;"	c
InitExpr.ExternRefNull	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case ExternRefNull;$/;"	c
InitExpr.F32	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case F32(val: u32);$/;"	c
InitExpr.F32	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case F32(val: u32);$/;"	c
InitExpr.F64	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case F64(val: u64);$/;"	c
InitExpr.F64	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case F64(val: u64);$/;"	c
InitExpr.FixedArray	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case FixedArray(t: HeapType.Array, vals: Array<InitExpr>);$/;"	c
InitExpr.FixedArray	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case FixedArray(t: HeapType.Array, vals: Array<InitExpr>);$/;"	c
InitExpr.FuncRef	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case FuncRef(func_index: int, decl: FuncDecl);$/;"	c
InitExpr.FuncRef	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case FuncRef(func_index: int, decl: FuncDecl);$/;"	c
InitExpr.FuncRefNull	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case FuncRefNull;$/;"	c
InitExpr.FuncRefNull	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case FuncRefNull;$/;"	c
InitExpr.Global	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case Global(global_index: int, decl: GlobalDecl);$/;"	c
InitExpr.Global	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case Global(global_index: int, decl: GlobalDecl);$/;"	c
InitExpr.I31	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case I31(val: InitExpr);$/;"	c
InitExpr.I31	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case I31(val: InitExpr);$/;"	c
InitExpr.I32	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case I32(val: i32);$/;"	c
InitExpr.I32	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case I32(val: i32);$/;"	c
InitExpr.I32_ADD	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case I32_ADD(a: InitExpr, b: InitExpr);$/;"	c
InitExpr.I32_ADD	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case I32_ADD(a: InitExpr, b: InitExpr);$/;"	c
InitExpr.I32_MUL	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case I32_MUL(a: InitExpr, b: InitExpr);$/;"	c
InitExpr.I32_MUL	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case I32_MUL(a: InitExpr, b: InitExpr);$/;"	c
InitExpr.I32_SUB	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case I32_SUB(a: InitExpr, b: InitExpr);$/;"	c
InitExpr.I32_SUB	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case I32_SUB(a: InitExpr, b: InitExpr);$/;"	c
InitExpr.I64	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case I64(val: i64);$/;"	c
InitExpr.I64	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case I64(val: i64);$/;"	c
InitExpr.I64_ADD	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case I64_ADD(a: InitExpr, b: InitExpr);$/;"	c
InitExpr.I64_ADD	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case I64_ADD(a: InitExpr, b: InitExpr);$/;"	c
InitExpr.I64_MUL	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case I64_MUL(a: InitExpr, b: InitExpr);$/;"	c
InitExpr.I64_MUL	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case I64_MUL(a: InitExpr, b: InitExpr);$/;"	c
InitExpr.I64_SUB	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case I64_SUB(a: InitExpr, b: InitExpr);$/;"	c
InitExpr.I64_SUB	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case I64_SUB(a: InitExpr, b: InitExpr);$/;"	c
InitExpr.RefNull	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case RefNull(ht: HeapType);$/;"	c
InitExpr.RefNull	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case RefNull(ht: HeapType);$/;"	c
InitExpr.Struct	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case Struct(t: HeapType.Struct, vals: Array<InitExpr>);$/;"	c
InitExpr.Struct	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case Struct(t: HeapType.Struct, vals: Array<InitExpr>);$/;"	c
InitExpr.V128	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case V128(low: u64, high: u64);$/;"	c
InitExpr.V128	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case V128(low: u64, high: u64);$/;"	c
InitProbe	$VIRGIL_WIZARD/src/monitors/MemStatsMonitor.v3	/^class InitProbe(stats: MemStats) extends Probe {$/;"	c
InitStatus	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^private enum InitStatus {$/;"	e
InlineConfig	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^type InlineConfig(swap_membase: bool, swap_instance: bool, can_inline: bool);$/;"	c
Instance	$VIRGIL_WIZARD/src/engine/Instance.v3	/^class Instance(module: Module, imports: Array<Exportable>) {$/;"	c
InstanceRef	$VIRGIL_WIZARD/src/engine/Meta.v3	/^class InstanceRef(instance: Instance) extends HostObject {$/;"	c
Instance_dropped_data	$VIRGIL_WIZARD/src/engine/x86-64/V3Offsets.v3	/^	def Instance_dropped_data	= int.view(Pointer.atField(i.dropped_data) - Pointer.atObject(i));$/;"	d
Instance_dropped_elems	$VIRGIL_WIZARD/src/engine/x86-64/V3Offsets.v3	/^	def Instance_dropped_elems	= int.view(Pointer.atField(i.dropped_elems) - Pointer.atObject(i));$/;"	d
Instance_functions	$VIRGIL_WIZARD/src/engine/x86-64/V3Offsets.v3	/^	def Instance_functions		= int.view(Pointer.atField(i.functions) - Pointer.atObject(i));$/;"	d
Instance_globals	$VIRGIL_WIZARD/src/engine/x86-64/V3Offsets.v3	/^	def Instance_globals		= int.view(Pointer.atField(i.globals) - Pointer.atObject(i));$/;"	d
Instance_heaptypes	$VIRGIL_WIZARD/src/engine/x86-64/V3Offsets.v3	/^	def Instance_heaptypes		= int.view(Pointer.atField(i.heaptypes) - Pointer.atObject(i));$/;"	d
Instance_memories	$VIRGIL_WIZARD/src/engine/x86-64/V3Offsets.v3	/^	def Instance_memories		= int.view(Pointer.atField(i.memories) - Pointer.atObject(i));$/;"	d
Instance_sig_ids	$VIRGIL_WIZARD/src/engine/x86-64/V3Offsets.v3	/^	def Instance_sig_ids		= int.view(Pointer.atField(i.sig_ids) - Pointer.atObject(i));$/;"	d
Instance_tables	$VIRGIL_WIZARD/src/engine/x86-64/V3Offsets.v3	/^	def Instance_tables		= int.view(Pointer.atField(i.tables) - Pointer.atObject(i));$/;"	d
Instantiator	$VIRGIL_WIZARD/src/engine/Instantiator.v3	/^class Instantiator(extensions: Extension.set, module: Module, var imports: Array<Exportable>, error: ErrorGen) { \/\/ TODO: s\/error\/err$/;"	c
InstrCount	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	case InstrCount;$/;"	d
InstrCountInstrumenter	$VIRGIL_WIZARD/src/monitors/InstrCountMonitor.v3	/^class InstrCountInstrumenter(module: Module) extends BytecodeVisitor {$/;"	c
InstrCountMonitor	$VIRGIL_WIZARD/src/monitors/InstrCountMonitor.v3	/^class InstrCountMonitor extends Monitor {$/;"	c
InstrTracer	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^class InstrTracer {$/;"	c
Instrumentation	$VIRGIL_WIZARD/src/engine/Instrumentation.v3	/^component Instrumentation {$/;"	n
IntExecEnv	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^class IntExecEnv {$/;"	c
InternalOpcode	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^enum InternalOpcode(code: u8, mnemonic: string) {$/;"	e
Interpreter_dispatchTable	$VIRGIL_WIZARD/src/engine/x86-64/V3Offsets.v3	/^	def Interpreter_dispatchTable	= Pointer.atField(I.dispatchTable);$/;"	d
Invalid	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	case Invalid(args: string);$/;"	d
Invalid	$VIRGIL_WIZARD/src/monitors/LoopTraceMonitor.v3	/^	case Invalid;$/;"	d
InvalidBlockType	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def InvalidBlockType(type_index: int) {$/;"	m
InvalidCatchCode	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def InvalidCatchCode(code: byte) {$/;"	m
InvalidDataFlags	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def InvalidDataFlags(flags: byte) {$/;"	m
InvalidElemFlags	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def InvalidElemFlags(flags: byte) {$/;"	m
InvalidExportKind	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def InvalidExportKind(code: byte) {$/;"	m
InvalidFileType	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def InvalidFileType(filename: string, expected_ext: string) {$/;"	m
InvalidGlobalFlags	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def InvalidGlobalFlags(flags: byte) {$/;"	m
InvalidHeapType	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def InvalidHeapType(val: int) {$/;"	m
InvalidImportKind	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def InvalidImportKind(code: byte) {$/;"	m
InvalidMagicWord	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def InvalidMagicWord(word: u32) {$/;"	m
InvalidMemoryFlags	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def InvalidMemoryFlags(flags: byte) {$/;"	m
InvalidOpcode	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def InvalidOpcode(prefix: byte, code: u32) {$/;"	m
InvalidPreopenPath	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def InvalidPreopenPath(path: string) {$/;"	m
InvalidRefTypecon	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def InvalidRefTypecon(code: int) {$/;"	m
InvalidSectionCode	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def InvalidSectionCode(code: byte) {$/;"	m
InvalidTableFlags	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def InvalidTableFlags(flags: byte) {$/;"	m
InvalidTagAttribute	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def InvalidTagAttribute(b: byte) {$/;"	m
InvalidTagSignatureParam	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def InvalidTagSignatureParam(sig: SigDecl) {$/;"	m
InvalidTagSignatureResult	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def InvalidTagSignatureResult(sig: SigDecl) {$/;"	m
InvalidTypeConstraint	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def InvalidTypeConstraint(code: byte) {$/;"	m
InvalidTypeDeclCode	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def InvalidTypeDeclCode(code: int) {$/;"	m
InvalidUtf8String	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def InvalidUtf8String() {$/;"	m
InvalidValueTypecon	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def InvalidValueTypecon(code: int) {$/;"	m
InvalidWasmVersion	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def InvalidWasmVersion(version: u32) {$/;"	m
Is64	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	Is64(0x04),$/;"	d
JIT_ERROR	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	JIT_ERROR,$/;"	d
Justification	$VIRGIL_WIZARD/src/util/TraceUtil.v3	/^enum Justification { LEFT, CENTER_L, CENTER_R, RIGHT }$/;"	e
KIND_F32	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^def KIND_F32 = SpcConsts.KIND_F32;$/;"	d
KIND_F32	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^def KIND_F32 = SpcConsts.KIND_F32;$/;"	d
KIND_F64	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^def KIND_F64 = SpcConsts.KIND_F64;$/;"	d
KIND_F64	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^def KIND_F64 = SpcConsts.KIND_F64;$/;"	d
KIND_I32	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^def KIND_I32 = SpcConsts.KIND_I32;$/;"	d
KIND_I32	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^def KIND_I32 = SpcConsts.KIND_I32;$/;"	d
KIND_I64	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^def KIND_I64 = SpcConsts.KIND_I64;$/;"	d
KIND_I64	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^def KIND_I64 = SpcConsts.KIND_I64;$/;"	d
KIND_MASK	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^def KIND_MASK = SpcConsts.KIND_MASK;$/;"	d
KIND_MASK	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^def KIND_MASK = SpcConsts.KIND_MASK;$/;"	d
KIND_REF	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^def KIND_REF = SpcConsts.KIND_REF;$/;"	d
KIND_REF	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^def KIND_REF = SpcConsts.KIND_REF;$/;"	d
KIND_V128	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^def KIND_V128 = SpcConsts.KIND_V128;$/;"	d
KIND_V128	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^def KIND_V128 = SpcConsts.KIND_V128;$/;"	d
LABEL	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def LABEL = [ImmKind.LABEL];$/;"	d
LABELS	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def LABELS = [ImmKind.LABELS];$/;"	d
LABEL_BUFFER	$VIRGIL_WIZARD/src/util/Whamm.v3	/^def LABEL_BUFFER = "whamm_buffer";$/;"	d
LABEL_BUFFER_MAX	$VIRGIL_WIZARD/src/util/Whamm.v3	/^def LABEL_BUFFER_MAX = "whamm_buffer:max";$/;"	d
LABEL_BUFFER_START	$VIRGIL_WIZARD/src/util/Whamm.v3	/^def LABEL_BUFFER_START = "whamm_buffer:start";$/;"	d
LANE	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def LANE = [ImmKind.LANE_INDEX];$/;"	d
LANE_INDEX	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	LANE_INDEX,		\/\/ LANE$/;"	d
LANEx16	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def LANEx16 = [L, L, L, L, L, L, L, L, L, L, L, L, L, L, L, L];$/;"	d
LAZY_COMPILE_STUB	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^def LAZY_COMPILE_STUB = X86_64PreGenStub.new("spc-lazy-compile", X86_64SpcCompileStub.new("lazy"), genLazyCompileStub);$/;"	d
LEB_ERROR	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	LEB_ERROR,$/;"	d
LEB_UPPER_BIT	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^def LEB_UPPER_BIT: byte = 0x80;$/;"	d
LEFT	$VIRGIL_WIZARD/src/util/TraceUtil.v3	/^enum Justification { LEFT, CENTER_L, CENTER_R, RIGHT }$/;"	d
LEFT_ARROW	$VIRGIL_WIZARD/src/util/CfgPrinter.v3	/^def LEFT_ARROW = '<';$/;"	d
LEGACY_EH	$VIRGIL_WIZARD/src/engine/Extension.v3	/^	LEGACY_EH("legacy-eh", "Non-standard legacy exception handling"),$/;"	d
LIGHTGRAY	$VIRGIL_WIZARD/src/util/TermColors.v3	/^	def LIGHTGRAY	= "\x1B[0;37m";$/;"	d
LINE	$VIRGIL_WIZARD/src/util/Palette.v3	/^	LINE		(TermColors.BLUE),$/;"	d
LOCAL	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def LOCAL = [ImmKind.LOCAL_INDEX];$/;"	d
LOCAL_GET	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def LOCAL_GET() {$/;"	m
LOCAL_GET	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	LOCAL_GET		(0x00, 0x20, "local.get", imm.LOCAL, null),$/;"	d
LOCAL_INDEX	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	LOCAL_INDEX,		\/\/ LOCAL$/;"	d
LOCAL_SET	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def LOCAL_SET() {$/;"	m
LOCAL_SET	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	LOCAL_SET		(0x00, 0x21, "local.set", imm.LOCAL, null),$/;"	d
LOCAL_TEE	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def LOCAL_TEE() {$/;"	m
LOCAL_TEE	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	LOCAL_TEE		(0x00, 0x22, "local.tee", imm.LOCAL, null),$/;"	d
LOOKUP_SYMLINK_FOLLOW	$VIRGIL_WIZARD/src/modules/wasi/x86-64-linux/WspOnePathResolver-x86-64-linux.v3	/^def LOOKUP_SYMLINK_FOLLOW = 1;	\/\/ flag indicating should follow symlinks$/;"	d
LOOP	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def LOOP() {$/;"	m
LOOP	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	LOOP			(0x00, 0x03, "loop", imm.BLOCKT, null),$/;"	d
LOOP	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	LOOP		(32, "Too many levels of symbolic links."),$/;"	d
LOW	$VIRGIL_WIZARD/src/util/Palette.v3	/^	LOW		(TermColors.DEFAULT),$/;"	d
LT	$VIRGIL_WIZARD/src/monitors/MonitorRegistry.v3	/^def LT(a: MonitorRegistryEntry, b: MonitorRegistryEntry) -> bool {$/;"	m
Label	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^type Label;$/;"	c
Labels	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^type Labels;$/;"	c
Limits	$VIRGIL_WIZARD/src/engine/Limits.v3	/^class Limits {$/;"	c
List	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	case List;$/;"	d
LmEntry	$VIRGIL_WIZARD/src/monitors/LoopMonitor.v3	/^private class LmEntry(module: Module, func: FuncDecl, depth: int, pc: int) extends CountProbe {$/;"	c
Load	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^	case Load(idx: int, offset: u64, data: Array<u8>);$/;"	d
LoadProbe	$VIRGIL_WIZARD/src/monitors/MemStatsMonitor.v3	/^class LoadProbe(stats: MemStats, offset: u64, size: u8) extends Probe {$/;"	c
LoadProbe32	$VIRGIL_WIZARD/src/monitors/MemStatsMonitor.v3	/^class LoadProbe32(stats: MemStats, offset: u32, size: u8) extends OperandProbe_i_v {$/;"	c
LocCounter	$VIRGIL_WIZARD/src/monitors/HotnessMonitor.v3	/^private class LocCounter(func: FuncDecl, pc: int, op: Opcode, var group: int) extends CountProbe {$/;"	c
Local	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	case Local(t: ValueType, i: int);$/;"	d
Locals	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	case Locals;$/;"	d
LoopMonitor	$VIRGIL_WIZARD/src/monitors/LoopMonitor.v3	/^class LoopMonitor extends Monitor {$/;"	c
LoopTracesMonitor	$VIRGIL_WIZARD/src/monitors/LoopTraceMonitor.v3	/^class LoopTracesMonitor extends Monitor {$/;"	c
MAGENTA	$VIRGIL_WIZARD/src/util/TermColors.v3	/^	def MAGENTA	= "\x1B[1;35m";$/;"	d
MAGIC	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	MAGIC,$/;"	d
MAX_OPERAND_LEN	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^var MAX_OPERAND_LEN = 6;$/;"	d
MEDIUM	$VIRGIL_WIZARD/src/util/Palette.v3	/^	MEDIUM		(TermColors.YELLOW),$/;"	d
MEMARG	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def MEMARG = [ImmKind.MEMARG];$/;"	d
MEMARG_INDEX_FLAG	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	def MEMARG_INDEX_FLAG = 0x40u8;$/;"	d
MEMARG_LANE	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def MEMARG_LANE = [ImmKind.MEMARG, ImmKind.LANE_INDEX];$/;"	d
MEMARG_STOLEN_IS64	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	def MEMARG_STOLEN_IS64 = 0x20u8;$/;"	d
MEMORY	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def MEMORY = [ImmKind.MEMORY_INDEX];$/;"	d
MEMORY64	$VIRGIL_WIZARD/src/engine/Extension.v3	/^	MEMORY64("memory64", "64-bit memories"),$/;"	d
MEMORY_ATOMIC_NOTIFY	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	MEMORY_ATOMIC_NOTIFY		(0xFE, 0x00, "memory.atomic.notify", imm.MEMARG, sig.ii_i),$/;"	d
MEMORY_ATOMIC_NOTIFY	$VIRGIL_WIZARD/src/engine/Runtime.v3	/^	def MEMORY_ATOMIC_NOTIFY(stack: ExecStack, instance: Instance, mem_index: u31, offset: u64) -> Throwable { \/\/ TODO: nop for now$/;"	f
MEMORY_ATOMIC_WAIT32	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	MEMORY_ATOMIC_WAIT32		(0xFE, 0x01, "memory.atomic.wait32", imm.MEMARG, sig.iil_i),$/;"	d
MEMORY_ATOMIC_WAIT32	$VIRGIL_WIZARD/src/engine/Runtime.v3	/^	def MEMORY_ATOMIC_WAIT32(stack: ExecStack, instance: Instance, mem_index: u31, offset: u64) -> Throwable { \/\/ TODO: nop for now$/;"	f
MEMORY_ATOMIC_WAIT64	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	MEMORY_ATOMIC_WAIT64		(0xFE, 0x02, "memory.atomic.wait64", imm.MEMARG, sig.ill_i),$/;"	d
MEMORY_ATOMIC_WAIT64	$VIRGIL_WIZARD/src/engine/Runtime.v3	/^	def MEMORY_ATOMIC_WAIT64(stack: ExecStack, instance: Instance, mem_index: u31, offset: u64) -> Throwable { \/\/ TODO: nop for now$/;"	f
MEMORY_COPY	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	MEMORY_COPY		(0xFC, 0x0A, "memory.copy", imm.MEMORY_MEMORY, sig.iii_v),$/;"	d
MEMORY_COPY	$VIRGIL_WIZARD/src/engine/Runtime.v3	/^	def MEMORY_COPY(stack: ExecStack, instance: Instance, mem_index1: u31, mem_index2: u31) -> Throwable {$/;"	f
MEMORY_FILL	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	MEMORY_FILL		(0xFC, 0x0B, "memory.fill", imm.MEMORY, sig.iii_v),$/;"	d
MEMORY_FILL	$VIRGIL_WIZARD/src/engine/Runtime.v3	/^	def MEMORY_FILL(stack: ExecStack, instance: Instance, mem_index: u31) -> Throwable {$/;"	f
MEMORY_GROW	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	MEMORY_GROW		(0x00, 0x40, "memory.grow", imm.MEMORY, sig.i_i),$/;"	d
MEMORY_GROW	$VIRGIL_WIZARD/src/engine/Runtime.v3	/^	def MEMORY_GROW(stack: ExecStack, instance: Instance, mem_index: u31) {$/;"	f
MEMORY_INDEX	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	MEMORY_INDEX,		\/\/ MEMORY$/;"	d
MEMORY_INIT	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	MEMORY_INIT		(0xFC, 0x08, "memory.init", imm.DATA_MEMORY, sig.iii_v),$/;"	d
MEMORY_INIT	$VIRGIL_WIZARD/src/engine/Runtime.v3	/^	def MEMORY_INIT(stack: ExecStack, instance: Instance, data_index: u31, mem_index: u31) -> Throwable {$/;"	f
MEMORY_MEMORY	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def MEMORY_MEMORY = [ImmKind.MEMORY_INDEX, ImmKind.MEMORY_INDEX];$/;"	d
MEMORY_OOB	$VIRGIL_WIZARD/src/engine/Trap.v3	/^	MEMORY_OOB,$/;"	d
MEMORY_SIZE	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	MEMORY_SIZE		(0x00, 0x3F, "memory.size", imm.MEMORY, sig.v_i),$/;"	d
MEM_INDEX_32	$VIRGIL_WIZARD/src/engine/Sidetable.v3	/^	MEM_INDEX_32,		\/\/ memory N, 32-bit index$/;"	d
MEM_INDEX_64	$VIRGIL_WIZARD/src/engine/Sidetable.v3	/^	MEM_INDEX_64,		\/\/ memory N, 64-bit index$/;"	d
MFILE	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	MFILE		(33, "File descriptor value too large."),$/;"	d
MINIMUM_CODE_SIZE	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Target.v3	/^def MINIMUM_CODE_SIZE = PAGE_SIZE_i;$/;"	d
MIN_DISPATCH_CASE_COUNT	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^var MIN_DISPATCH_CASE_COUNT = 150;$/;"	d
MISMATCHED_CATCH	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	MISMATCHED_CATCH,$/;"	d
MISMATCHED_DELEGATE	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	MISMATCHED_DELEGATE,$/;"	d
MISMATCHED_ELSE	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	MISMATCHED_ELSE,$/;"	d
MISSING_DATA_COUNT	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	MISSING_DATA_COUNT,$/;"	d
MLINK	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	MLINK		(34, "Too many links."),$/;"	d
MMAP_RETRIES	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Target.v3	/^def MMAP_RETRIES = 1;$/;"	d
MSGSIZE	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	MSGSIZE		(35, "Message too large."),$/;"	d
MULTIHOP	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	MULTIHOP	(36, "Reserved."),$/;"	d
MULTI_MEMORY	$VIRGIL_WIZARD/src/engine/Extension.v3	/^	MULTI_MEMORY("multi-memory", "Multiple memories"),$/;"	d
MacroAssembler	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^class MacroAssembler(valuerep: Tagging, regConfig: RegConfig) {$/;"	c
Mapping	$VIRGIL_WIZARD/src/engine/x86-64/Mmap.v3	/^class Mapping(range: MemoryRange) { }$/;"	c
MasmAddr	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^type MasmAddr(base: Reg, offset: int) #unboxed {$/;"	c
MasmBrCond	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^enum MasmBrCond		(zero: bool, 	i32: bool) {$/;"	e
MasmLabel	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^class MasmLabel(create_pos: int) {$/;"	c
Matcher	$VIRGIL_WIZARD/src/util/DeclFilter.v3	/^type Matcher {$/;"	c
Matcher.All	$VIRGIL_WIZARD/src/util/DeclFilter.v3	/^	case All;$/;"	c
Matcher.All	$VIRGIL_WIZARD/src/util/DeclFilter.v3	/^	case All;$/;"	c
Matcher.Glob	$VIRGIL_WIZARD/src/util/DeclFilter.v3	/^	case Glob(matcher: GlobMatcher);$/;"	c
Matcher.Glob	$VIRGIL_WIZARD/src/util/DeclFilter.v3	/^	case Glob(matcher: GlobMatcher);$/;"	c
Matcher.None	$VIRGIL_WIZARD/src/util/DeclFilter.v3	/^	case None;$/;"	c
Matcher.None	$VIRGIL_WIZARD/src/util/DeclFilter.v3	/^	case None;$/;"	c
Matcher.Sequence	$VIRGIL_WIZARD/src/util/DeclFilter.v3	/^	case Sequence(min: u32, max: u32);$/;"	c
Matcher.Sequence	$VIRGIL_WIZARD/src/util/DeclFilter.v3	/^	case Sequence(min: u32, max: u32);$/;"	c
Max	$VIRGIL_WIZARD/src/engine/Module.v3	/^type Max {$/;"	c
Max.None	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case None;$/;"	c
Max.None	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case None;$/;"	c
Max.Set	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case Set(max: u64);$/;"	c
Max.Set	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case Set(max: u64);$/;"	c
MaximumLessThanInitial	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def MaximumLessThanInitial(quantity: string, max: u64, initial: u64) {$/;"	m
MaybeTrap	$VIRGIL_WIZARD/src/engine/Trap.v3	/^type MaybeTrap<T>(result: T, reason: TrapReason) #unboxed {$/;"	c
MemAccessKind	$VIRGIL_WIZARD/src/engine/Sidetable.v3	/^enum MemAccessKind {$/;"	e
MemArg	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^type MemArg(flags: u32, memory_index: u31, offset: u64) #unboxed { }$/;"	c
MemGrow	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^	case MemGrow(idx: int, amount: int);$/;"	d
MemLimits	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^type MemLimits(size: SizeConstraint, shared: bool, log2_pageSize: u5) #unboxed { }$/;"	c
MemStats	$VIRGIL_WIZARD/src/monitors/MemStatsMonitor.v3	/^class MemStats {$/;"	c
MemStatsInstrumenter	$VIRGIL_WIZARD/src/monitors/MemStatsMonitor.v3	/^class MemStatsInstrumenter extends BytecodeInstrumenter {$/;"	c
MemStatsMonitor	$VIRGIL_WIZARD/src/monitors/MemStatsMonitor.v3	/^class MemStatsMonitor extends Monitor {$/;"	c
Memory	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	Memory(5),$/;"	d
Memory	$VIRGIL_WIZARD/src/engine/Memory.v3	/^class Memory(decl: MemoryDecl) extends Exportable {$/;"	c
Memory	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case Memory(index: int);$/;"	d
MemoryAccessProbe	$VIRGIL_WIZARD/src/monitors/ModuleInstrumenter.v3	/^private class MemoryAccessProbe(imm: MemArg, operand: int, size: u64, f: (DynamicLoc, Memory, u64, u64) -> ProbeAction) extends Probe {$/;"	c
MemoryAccessor	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^private class MemoryAccessor<T>(size: byte, log2_size: u3, read: Range<byte> -> T, write: (Range<byte>, T) -> void) { }$/;"	c
MemoryCopyProbe	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^private class MemoryCopyProbe(handler: EventHandler, dst_index: u31, src_index: u31) extends Probe {$/;"	c
MemoryDecl	$VIRGIL_WIZARD/src/engine/Module.v3	/^class MemoryDecl(size: SizeConstraint, shared: bool, log2_pageSize: u5) extends Decl {$/;"	c
MemoryFillProbe	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^private class MemoryFillProbe(handler: EventHandler, mem_index: u31) extends Probe {$/;"	c
MemoryGrowProbe	$VIRGIL_WIZARD/src/monitors/ModuleInstrumenter.v3	/^private class MemoryGrowProbe(memory_index: u31, f: (DynamicLoc, Memory, u32) -> ProbeAction) extends Probe {$/;"	c
MemoryInitProbe	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^private class MemoryInitProbe(handler: EventHandler, mem_index: u31, data: Array<u8>) extends Probe {$/;"	c
MemoryRange	$VIRGIL_WIZARD/src/engine/x86-64/Mmap.v3	/^class MemoryRange {$/;"	c
MemoryReadProbe	$VIRGIL_WIZARD/src/util/ProbeUtil.v3	/^class MemoryReadProbe extends Probe {$/;"	c
MemoryTraceGrowProbe	$VIRGIL_WIZARD/src/util/BasicTracing.v3	/^class MemoryTraceGrowProbe(memory_index: u31) extends Probe {$/;"	c
MemoryTraceLoadProbe	$VIRGIL_WIZARD/src/util/BasicTracing.v3	/^class MemoryTraceLoadProbe(op: Opcode, imm: MemArg, size: u8) extends Probe {$/;"	c
MemoryTraceStoreProbe	$VIRGIL_WIZARD/src/util/BasicTracing.v3	/^class MemoryTraceStoreProbe(op: Opcode, imm: MemArg, size: u8) extends Probe {$/;"	c
MemoryVisitor	$VIRGIL_WIZARD/src/monitors/ModuleInstrumenter.v3	/^class MemoryVisitor($/;"	c
Metric	$VIRGIL_WIZARD/src/engine/Metrics.v3	/^class Metric(name: string, units: string, help: string) {$/;"	c
Metrics	$VIRGIL_WIZARD/src/engine/Metrics.v3	/^component Metrics {$/;"	n
MismatchedCatch	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def MismatchedCatch() {$/;"	m
MismatchedDelegate	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def MismatchedDelegate() {$/;"	m
MismatchedElse	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def MismatchedElse() {$/;"	m
MissingCodeSection	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def MissingCodeSection(func_count: u32) {$/;"	m
MissingDataCount	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def MissingDataCount() {$/;"	m
MissingDataSection	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def MissingDataSection(data_count: int) {$/;"	m
Mmap	$VIRGIL_WIZARD/src/engine/x86-64/Mmap.v3	/^component Mmap {$/;"	n
Module	$VIRGIL_WIZARD/src/engine/Module.v3	/^class Module(filename: string) {$/;"	c
ModuleInstrumenter	$VIRGIL_WIZARD/src/monitors/ModuleInstrumenter.v3	/^class ModuleInstrumenter(module: Module) {$/;"	c
ModuleLinker	$VIRGIL_WIZARD/src/modules/ModuleLinker.v3	/^class ModuleLinker(engine: Engine,$/;"	c
ModuleOutline	$VIRGIL_WIZARD/src/engine/Module.v3	/^class ModuleOutline {$/;"	c
ModuleRef	$VIRGIL_WIZARD/src/engine/Meta.v3	/^class ModuleRef(module: Module) extends HostObject {$/;"	c
ModuleRegistry	$VIRGIL_WIZARD/src/modules/ModuleRegistry.v3	/^component ModuleRegistry {$/;"	n
Modules	$VIRGIL_WIZARD/src/engine/Module.v3	/^component Modules {$/;"	n
Monitor	$VIRGIL_WIZARD/src/monitors/Monitor.v3	/^class Monitor {$/;"	c
MonitorOptions	$VIRGIL_WIZARD/src/monitors/MonitorOptions.v3	/^component MonitorOptions {$/;"	n
MonitorRegistry	$VIRGIL_WIZARD/src/monitors/MonitorRegistry.v3	/^component MonitorRegistry {$/;"	n
MonitorRegistryEntry	$VIRGIL_WIZARD/src/monitors/MonitorRegistry.v3	/^class MonitorRegistryEntry(name: string, help: string, monitor: Monitor) {$/;"	c
MonitorUtil	$VIRGIL_WIZARD/src/util/MonitorUtil.v3	/^component MonitorUtil {$/;"	n
MoveNode	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^class MoveNode {$/;"	c
Mutable	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	Mutable(0x01)$/;"	d
NAMETOOLONG	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	NAMETOOLONG	(37, "Filename too long."),$/;"	d
NETDOWN	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	NETDOWN		(38, "Network is down."),$/;"	d
NETRESET	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	NETRESET	(39, "Connection aborted by network."),$/;"	d
NETUNREACH	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	NETUNREACH	(40, "Network unreachable."),$/;"	d
NFILE	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	NFILE		(41, "Too many files open in system."),$/;"	d
NOBUFS	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	NOBUFS		(42, "No buffer space available."),$/;"	d
NOCONT	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	NOCONT		(0x75, -11), \/\/ -0x0b$/;"	d
NOCONT	$VIRGIL_WIZARD/src/engine/Type.v3	/^	case NOCONT;$/;"	d
NODEV	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	NODEV		(43, "No such device."),$/;"	d
NOENT	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	NOENT		(44, "No such file or directory."),$/;"	d
NOEXEC	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	NOEXEC		(45, "Executable file format error."),$/;"	d
NOEXN	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	NOEXN		(0x74, -12), \/\/ -0x0c$/;"	d
NOEXN	$VIRGIL_WIZARD/src/engine/Type.v3	/^	case NOEXN;$/;"	d
NOEXTERN	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	NOEXTERN	(0x72, -14), \/\/ -0x0e$/;"	d
NOEXTERN	$VIRGIL_WIZARD/src/engine/Type.v3	/^	case NOEXTERN;$/;"	d
NOFUNC	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	NOFUNC		(0x73, -13), \/\/ -0x0d$/;"	d
NOFUNC	$VIRGIL_WIZARD/src/engine/Type.v3	/^	case NOFUNC;$/;"	d
NOLCK	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	NOLCK		(46, "No locks available."),$/;"	d
NOLINK	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	NOLINK		(47, "Reserved."),$/;"	d
NOMEM	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	NOMEM		(48, "Not enough space."),$/;"	d
NOMSG	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	NOMSG		(49, "No message of the desired type."),$/;"	d
NONE	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	NONE		(0x71, -15)  \/\/ -0x0f$/;"	d
NONE	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def NONE = Array<ImmKind>.new(0);$/;"	d
NONE	$VIRGIL_WIZARD/src/engine/Trap.v3	/^	NONE,$/;"	d
NONE	$VIRGIL_WIZARD/src/engine/Type.v3	/^	def NONE = Array<ValueType>.new(0);$/;"	d
NONE	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	NONE(false, false),$/;"	d
NONE	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	NONE,$/;"	d
NONE	$VIRGIL_WIZARD/src/util/OpcodeMap.v3	/^	private def NONE = (Opcode.INVALID, d);$/;"	d
NONE	$VIRGIL_WIZARD/src/util/Palette.v3	/^	NONE		(""),$/;"	d
NONEREF	$VIRGIL_WIZARD/src/engine/Type.v3	/^	def NONEREF = ValueType.Ref(true, HeapType.NONE);$/;"	d
NON_CONST_VALUE	$VIRGIL_WIZARD/src/monitors/ConstMonitor.v3	/^var NON_CONST_VALUE = Value.Ref(Object.new()); \/\/ nothing will compare equal to this value.$/;"	d
NOP	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def NOP() { $/;"	m
NOP	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	NOP			(0x00, 0x01, "nop", imm.NONE, sig.v_v),$/;"	d
NOPROTOOPT	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	NOPROTOOPT	(50, "Protocol not available."),$/;"	d
NOP_ENTRY	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^def NOP_ENTRY = 1;$/;"	d
NOSPC	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	NOSPC		(51, "No space left on device."),$/;"	d
NOSYS	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	NOSYS		(52, "Function not supported."),$/;"	d
NOTCAPABLE	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	NOTCAPABLE	(76, "Extension: Capabilities insufficient.")$/;"	d
NOTCONN	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	NOTCONN		(53, "The socket is not connected."),$/;"	d
NOTDIR	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	NOTDIR		(54, "Not a directory or a symbolic link to a directory."),$/;"	d
NOTEMPTY	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	NOTEMPTY	(55, "Directory not empty."),$/;"	d
NOTRECOVERABLE	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	NOTRECOVERABLE	(56, "State not recoverable."),$/;"	d
NOTSOCK	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	NOTSOCK		(57, "Not a socket."),$/;"	d
NOTSUP	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	NOTSUP		(58, "Not supported, or operation not supported on socket."),$/;"	d
NOTTY	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	NOTTY		(59, "Inappropriate I\/O control operation."),$/;"	d
NOT_TAKEN	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	NOT_TAKEN(false, true),$/;"	d
NO_ADDR	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^def NO_ADDR = u64.max;$/;"	d
NO_ARGS	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	def NO_ARGS: Array<WhammArg> = [];$/;"	d
NO_DESTS	$VIRGIL_WIZARD/src/engine/Module.v3	/^def NO_DESTS: Array<TargetHandlerDest> = [];$/;"	d
NO_DEST_MAP	$VIRGIL_WIZARD/src/engine/Module.v3	/^def NO_DEST_MAP: Array<int> = [];$/;"	d
NO_EXPORTED_MEM	$VIRGIL_WIZARD/src/engine/Trap.v3	/^	NO_EXPORTED_MEM,$/;"	d
NO_EX_HANDLERS	$VIRGIL_WIZARD/src/engine/Module.v3	/^def NO_EX_HANDLERS: Array<ExHandlerEntry> = [];$/;"	d
NO_HEAPTYPES	$VIRGIL_WIZARD/src/engine/Type.v3	/^	def NO_HEAPTYPES = Array<HeapType>.new(0);$/;"	d
NO_NAMES	$VIRGIL_WIZARD/src/engine/TraceOptions.v3	/^	def NO_NAMES = group.newBoolOption("no-names", false, "Disables parsing and reporting from the name section.");$/;"	d
NO_PARAMS	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	def NO_PARAMS: Array<WhammParam> = [];$/;"	d
NO_REG	$VIRGIL_WIZARD/src/engine/compiler/RegAlloc.v3	/^def NO_REG = Reg(0);$/;"	d
NO_REG	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^def NO_REG = SpcConsts.NO_REG;$/;"	d
NO_REG	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^def NO_REG = SpcConsts.NO_REG;$/;"	d
NO_SIDETABLE	$VIRGIL_WIZARD/src/engine/Sidetable.v3	/^	def NO_SIDETABLE = Sidetable([]);$/;"	d
NULLCONTREF	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	NULLCONTREF	(0x75, -11), \/\/$/;"	d
NULLCONTREF	$VIRGIL_WIZARD/src/engine/Type.v3	/^	def NULLCONTREF = ValueType.Ref(true, HeapType.NOCONT);$/;"	d
NULLEXNREF	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	NULLEXNREF	(0x74, -12), \/\/$/;"	d
NULLEXNREF	$VIRGIL_WIZARD/src/engine/Type.v3	/^	def NULLEXNREF = ValueType.Ref(true, HeapType.NOEXN);$/;"	d
NULLEXTERNREF	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	NULLEXTERNREF	(0x72, -14), \/\/$/;"	d
NULLEXTERNREF	$VIRGIL_WIZARD/src/engine/Type.v3	/^	def NULLEXTERNREF = ValueType.Ref(true, HeapType.NOEXTERN);$/;"	d
NULLFUNCREF	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	NULLFUNCREF	(0x73, -13), \/\/$/;"	d
NULLFUNCREF	$VIRGIL_WIZARD/src/engine/Type.v3	/^	def NULLFUNCREF = ValueType.Ref(true, HeapType.NOFUNC);$/;"	d
NULLREF	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	NULLREF		(0x71, -15), \/\/$/;"	d
NULLREF	$VIRGIL_WIZARD/src/engine/Type.v3	/^	def NULLREF = ValueType.Ref(true, HeapType.NONE);$/;"	d
NULL_DEREF	$VIRGIL_WIZARD/src/engine/Trap.v3	/^	NULL_DEREF,$/;"	d
NXIO	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	NXIO		(60, "No such device or address."),$/;"	d
NameSection	$VIRGIL_WIZARD/src/engine/NameSection.v3	/^class NameSection extends CustomSection {$/;"	c
NamedModule	$VIRGIL_WIZARD/src/engine/Module.v3	/^type NamedModule(path: string, name: string, module: Module);$/;"	c
NativeWasmMemory	$VIRGIL_WIZARD/src/engine/native/NativeMemory.v3	/^class NativeWasmMemory extends Memory {$/;"	c
NativeWasmMemory_index_tag	$VIRGIL_WIZARD/src/engine/x86-64/V3Offsets.v3	/^	def NativeWasmMemory_index_tag	= int.view(Pointer.atField(mem.index_tag) - Pointer.atObject(mem));$/;"	d
NativeWasmMemory_limit	$VIRGIL_WIZARD/src/engine/x86-64/V3Offsets.v3	/^	def NativeWasmMemory_limit		= int.view(Pointer.atField(mem.limit) - Pointer.atObject(mem));$/;"	d
NativeWasmMemory_num_pages	$VIRGIL_WIZARD/src/engine/x86-64/V3Offsets.v3	/^	def NativeWasmMemory_num_pages	= int.view(Pointer.atField(mem.num_pages) - Pointer.atObject(mem));$/;"	d
NativeWasmMemory_start	$VIRGIL_WIZARD/src/engine/x86-64/V3Offsets.v3	/^	def NativeWasmMemory_start		= int.view(Pointer.atField(mem.start) - Pointer.atObject(mem));$/;"	d
NestedCallProbe	$VIRGIL_WIZARD/src/monitors/FuncProfileMonitor.v3	/^private class NestedCallProbe(p: EnterProbe) extends Probe {$/;"	c
NestedReturnProbe	$VIRGIL_WIZARD/src/monitors/FuncProfileMonitor.v3	/^private class NestedReturnProbe(p: EnterProbe) extends Probe {$/;"	c
Next	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	case Next;$/;"	d
None	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case None;$/;"	d
None	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^	case None;$/;"	d
None	$VIRGIL_WIZARD/src/util/DeclFilter.v3	/^	case None;$/;"	d
NotTaken	$VIRGIL_WIZARD/src/monitors/LoopTraceMonitor.v3	/^	case NotTaken;$/;"	d
Null	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	case Null;$/;"	d
NumTargets	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	case NumTargets;$/;"	d
OFFSET_32	$VIRGIL_WIZARD/src/engine/Sidetable.v3	/^	OFFSET_32,		\/\/ memory 0, 32-bit index, offset != 0$/;"	d
OFFSET_64	$VIRGIL_WIZARD/src/engine/Sidetable.v3	/^	OFFSET_64,		\/\/ memory 0, 64-bit index, offset != 0$/;"	d
ONE_ARRAYREF_TYPE	$VIRGIL_WIZARD/src/engine/Type.v3	/^	def ONE_ARRAYREF_TYPE: Array<ValueType> = [ARRAYREF];$/;"	d
ONE_CONTREF_TYPE	$VIRGIL_WIZARD/src/engine/Type.v3	/^	def ONE_CONTREF_TYPE: Array<ValueType> = [CONTREF];$/;"	d
ONE_STRUCTREF_TYPE	$VIRGIL_WIZARD/src/engine/Type.v3	/^	def ONE_STRUCTREF_TYPE: Array<ValueType> = [STRUCTREF];$/;"	d
OOB_ADDR	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^def OOB_ADDR = EffectiveAddr(true, false, NO_REG, NO_REG, 0);$/;"	d
OOB_DATA_INIT	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	OOB_DATA_INIT,$/;"	d
OOB_INDEX	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	OOB_INDEX,$/;"	d
OOB_LABEL	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	OOB_LABEL,$/;"	d
OOB_RANGE	$VIRGIL_WIZARD/src/engine/Memory.v3	/^def OOB_RANGE = MaybeTrap<Range<byte>>(null, TrapReason.MEMORY_OOB);$/;"	d
OOB_TABLE_ELEMS	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	OOB_TABLE_ELEMS,$/;"	d
OOL_SIZE	$VIRGIL_WIZARD/src/engine/x86-64/X86_64PreGenStubs.v3	/^def OOL_SIZE = 4 * 1024;$/;"	d
OOM	$VIRGIL_WIZARD/src/engine/Trap.v3	/^	OOM,$/;"	d
OOM_MEMORY	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	OOM_MEMORY,$/;"	d
OOM_TABLE	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	OOM_TABLE,$/;"	d
OUT	$VIRGIL_WIZARD/src/SpectestMode.v3	/^def OUT = Trace.OUT;$/;"	d
OUT	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^def OUT = Trace.OUT;$/;"	d
OUT	$VIRGIL_WIZARD/src/engine/Trace.v3	/^	def OUT = TraceBuilder.new();$/;"	d
OUT	$VIRGIL_WIZARD/src/engine/WasmParser.v3	/^def OUT = Trace.OUT;$/;"	d
OUT	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^def OUT = Trace.OUT;$/;"	d
OUT	$VIRGIL_WIZARD/src/modules/wasi/x86-64-linux/WspOneModule-x86-64-linux.v3	/^def OUT = Trace.OUT;$/;"	d
OUT	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^def OUT = Trace.OUT;$/;"	d
OUT	$VIRGIL_WIZARD/src/util/BasicTracing.v3	/^def OUT = Trace.OUT;$/;"	d
OUT_OF_ORDER_SECTION	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	OUT_OF_ORDER_SECTION,$/;"	d
OVERFLOW	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	OVERFLOW	(61, "Value too large to be stored in data type."),$/;"	d
OVERFLOW_FUNCTION	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	OVERFLOW_FUNCTION,$/;"	d
OVERFLOW_SECTION	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	OVERFLOW_SECTION,$/;"	d
OWNERDEAD	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	OWNERDEAD	(62, "Previous owner died."),$/;"	d
O_CLOEXEC	$VIRGIL_WIZARD/src/modules/wasi/x86-64-linux/WspOneModule-x86-64-linux.v3	/^def O_CLOEXEC = 0x80000;$/;"	d
O_DIRECTORY	$VIRGIL_WIZARD/src/modules/wasi/x86-64-linux/WspOneModule-x86-64-linux.v3	/^def O_DIRECTORY = 0x10000;$/;"	d
O_PATH	$VIRGIL_WIZARD/src/modules/wasi/x86-64-linux/WspOneModule-x86-64-linux.v3	/^def O_PATH = 0x200000;$/;"	d
Object	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^class Object { }$/;"	c
Object	$VIRGIL_WIZARD/src/engine/Value.v3	/^class Object extends Exportable { }$/;"	c
Offset	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	case Offset;$/;"	d
Ok	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	case Ok {}$/;"	d
OobIndex	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def OobIndex(quantity: string, index: u32, max: u32) {$/;"	m
OobLabel	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def OobLabel(depth: u32, max: int) {$/;"	m
OobLocalIndex	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def OobLocalIndex(local_index: u32, max: int) {$/;"	m
OpName	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	case OpName;$/;"	d
Opcode	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^enum Opcode(prefix: u8, code: u16, mnemonic: string, imms: Array<ImmKind>, sig: SigDecl) {$/;"	e
Opcode	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	case Opcode(op: Opcode);$/;"	d
OpcodeAttribute	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^enum OpcodeAttribute {$/;"	e
OpcodeEntry	$VIRGIL_WIZARD/src/monitors/OpcodeMonitor.v3	/^type OpcodeEntry(op: Opcode, static_count: u32, count: CountProbe) #unboxed;$/;"	c
OpcodeMap	$VIRGIL_WIZARD/src/util/OpcodeMap.v3	/^class OpcodeMap<T> {$/;"	c
OpcodeMapTable	$VIRGIL_WIZARD/src/util/OpcodeMap.v3	/^private class OpcodeMapTable<T>(prefix: byte, globalOpTable: Array<Opcode>) {$/;"	c
OpcodeMonitor	$VIRGIL_WIZARD/src/monitors/OpcodeMonitor.v3	/^class OpcodeMonitor extends Monitor {$/;"	c
OpcodePage	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^class OpcodePage(prefix: byte) {$/;"	c
OpcodeRequiresExtension	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def OpcodeRequiresExtension(opcode: Opcode, set: Extension.set) {$/;"	m
Opcodes	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^component Opcodes {$/;"	n
Operand	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	case Operand(t: ValueType, i: int);$/;"	d
OperandProbe	$VIRGIL_WIZARD/src/util/ProbeUtil.v3	/^class OperandProbe extends Probe { }$/;"	c
OperandProbe_i_v	$VIRGIL_WIZARD/src/util/ProbeUtil.v3	/^class OperandProbe_i_v extends OperandProbe {$/;"	c
OptionGroup	$VIRGIL_WIZARD/src/util/OptionsRegistry.v3	/^class OptionGroup(name: string, o: BasicOptions) {$/;"	c
OptionGroupEntry	$VIRGIL_WIZARD/src/util/OptionsRegistry.v3	/^class OptionGroupEntry(opt: Opt, var displayName: string, typeName: string, help: string) { }$/;"	c
OptionsRegistry	$VIRGIL_WIZARD/src/util/OptionsRegistry.v3	/^component OptionsRegistry {$/;"	n
OutOfOrderSection	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def OutOfOrderSection(sect: BpSection) {$/;"	m
OverflowFunctionBody	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def OverflowFunctionBody(read: u64, size: u32) {$/;"	m
OverflowSection	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def OverflowSection(kind: byte, read: u64, size: u32) {$/;"	m
PACKED_I16	$VIRGIL_WIZARD/src/engine/Type.v3	/^enum Packedness { UNPACKED, PACKED_I8, PACKED_I16 }$/;"	d
PACKED_I8	$VIRGIL_WIZARD/src/engine/Type.v3	/^enum Packedness { UNPACKED, PACKED_I8, PACKED_I16 }$/;"	d
PAGE_SIZE	$VIRGIL_WIZARD/src/engine/x86-64/X86_64PreGenStubs.v3	/^def PAGE_SIZE = 4096u;$/;"	d
PAGE_SIZE	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Target.v3	/^def PAGE_SIZE = 4096u;$/;"	d
PAGE_SIZE_i	$VIRGIL_WIZARD/src/engine/x86-64/X86_64PreGenStubs.v3	/^def PAGE_SIZE_i: int = 4096;$/;"	d
PAGE_SIZE_i	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Target.v3	/^def PAGE_SIZE_i: int = 4096;$/;"	d
PAGE_SIZE_i	$VIRGIL_WIZARD/src/engine/x86-64/X86_64WhammProbeTrampoline.v3	/^def PAGE_SIZE_i: int = 4096;$/;"	d
PARSE_ERROR	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	PARSE_ERROR,$/;"	d
PATH_BUF	$VIRGIL_WIZARD/src/modules/wasi/x86-64-linux/WspOnePathResolver-x86-64-linux.v3	/^def PATH_BUF = Array<byte>.new(PATH_MAX + 1);$/;"	d
PATH_MAX	$VIRGIL_WIZARD/src/modules/wasi/x86-64-linux/WspOnePathResolver-x86-64-linux.v3	/^def PATH_MAX = 4096;		\/\/ maximum length of a path$/;"	d
PERM	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	PERM		(63, "Operation not permitted."),$/;"	d
PIPE	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	PIPE		(64, "Broken pipe."),$/;"	d
PREGEN_CODE_MARKER	$VIRGIL_WIZARD/src/engine/x86-64/X86_64PreGenStubs.v3	/^def PREGEN_CODE_MARKER = 0x7FAACCEE;$/;"	d
PREGEN_FILE	$VIRGIL_WIZARD/src/wizeng.main.v3	/^	def PREGEN_FILE = group.newPathOption("pregen", null, "Pre-generate assembly interpreter and stubs into the given file.");$/;"	d
PREGEN_MAGIC_WORD	$VIRGIL_WIZARD/src/engine/x86-64/X86_64PreGenStubs.v3	/^def PREGEN_MAGIC_WORD = 0x7ACEBEEF778899AAu;$/;"	d
PRINT_RESULT	$VIRGIL_WIZARD/src/wizeng.main.v3	/^	def PRINT_RESULT = group.newBoolOption("print-result", false, "Print the result of the main function upon exit.");$/;"	d
PROBE	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	PROBE(0x1E, "<probe>"),	\/\/ Used to overwrite a bytecode where a probe has been inserted$/;"	d
PROBE_BR_IF	$VIRGIL_WIZARD/src/monitors/LoopTraceMonitor.v3	/^	def PROBE_BR_IF = TraceBrIfProbe.new(trace);$/;"	d
PROBE_IF	$VIRGIL_WIZARD/src/monitors/LoopTraceMonitor.v3	/^	def PROBE_IF = TraceIfProbe.new(trace);$/;"	d
PROTO	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	PROTO		(65, "Protocol error."),$/;"	d
PROTONOSUPPORT	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	PROTONOSUPPORT	(66, "Protocol not supported."),$/;"	d
PROTOTYPE	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	PROTOTYPE	(67, "Protocol wrong type for socket."),$/;"	d
PROT_EXEC	$VIRGIL_WIZARD/src/engine/x86-64/Mmap.v3	/^	def PROT_EXEC = LinuxConst.PROT_EXEC;$/;"	d
PROT_NONE	$VIRGIL_WIZARD/src/engine/x86-64/Mmap.v3	/^	def PROT_NONE = LinuxConst.PROT_NONE;$/;"	d
PROT_READ	$VIRGIL_WIZARD/src/engine/x86-64/Mmap.v3	/^	def PROT_READ = LinuxConst.PROT_READ;$/;"	d
PROT_WRITE	$VIRGIL_WIZARD/src/engine/x86-64/Mmap.v3	/^	def PROT_WRITE = LinuxConst.PROT_WRITE;$/;"	d
PURPLE	$VIRGIL_WIZARD/src/util/TermColors.v3	/^	def PURPLE	= "\x1B[0;35m";$/;"	d
Packedness	$VIRGIL_WIZARD/src/engine/Type.v3	/^enum Packedness { UNPACKED, PACKED_I8, PACKED_I16 }$/;"	e
Palette	$VIRGIL_WIZARD/src/util/Palette.v3	/^class Palette {$/;"	c
ParseError	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def ParseError(code: WasmError, path: string, section: BpSection, index: int, error_pos: u64, error_msg: string) {$/;"	m
Passive	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case Passive;$/;"	d
PathResolver	$VIRGIL_WIZARD/src/modules/wasi/PathResolver.v3	/^component PathResolver {$/;"	n
PathUtil	$VIRGIL_WIZARD/src/util/PathUtil.v3	/^component PathUtil {$/;"	n
Pc	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	case Pc;$/;"	d
PcPair	$VIRGIL_WIZARD/src/engine/Sidetable.v3	/^private type PcPair(pc: int, stp: int) #unboxed { }$/;"	c
PoolMap	$VIRGIL_WIZARD/src/engine/compiler/RegSet.v3	/^class PoolMap(regSet: RegSet, numRegPools: int) {$/;"	c
PrefixTrie	$VIRGIL_WIZARD/src/util/PrefixTrie.v3	/^class PrefixTrie<K, V> {$/;"	c
PrefixTrieBranch	$VIRGIL_WIZARD/src/util/PrefixTrie.v3	/^private class PrefixTrieBranch<K, V> extends PrefixTrieNode<K, V> {$/;"	c
PrefixTrieLeaf	$VIRGIL_WIZARD/src/util/PrefixTrie.v3	/^private class PrefixTrieLeaf<K, V> extends PrefixTrieNode<K, V> {$/;"	c
PrefixTrieNode	$VIRGIL_WIZARD/src/util/PrefixTrie.v3	/^private class PrefixTrieNode<K, V> {$/;"	c
PreopenType	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^enum PreopenType(code: byte) {$/;"	e
PrivateMemoryAccess	$VIRGIL_WIZARD/src/engine/Memory.v3	/^component PrivateMemoryAccess {$/;"	n
Probe	$VIRGIL_WIZARD/src/engine/Probe.v3	/^class Probe {$/;"	c
ProbeAction	$VIRGIL_WIZARD/src/engine/Execute.v3	/^type ProbeAction {$/;"	c
ProbeAction.Continue	$VIRGIL_WIZARD/src/engine/Execute.v3	/^	case Continue;$/;"	c
ProbeAction.Continue	$VIRGIL_WIZARD/src/engine/Execute.v3	/^	case Continue;$/;"	c
ProbeAction.Trap	$VIRGIL_WIZARD/src/engine/Execute.v3	/^	case Trap(reason: TrapReason, trace: bool);$/;"	c
ProbeAction.Trap	$VIRGIL_WIZARD/src/engine/Execute.v3	/^	case Trap(reason: TrapReason, trace: bool);$/;"	c
ProbeElem	$VIRGIL_WIZARD/src/engine/Probe.v3	/^private class ProbeElem(probe: Probe) {$/;"	c
ProbeEvent	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^private type ProbeEvent {$/;"	c
ProbeEvent.CALL	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^	case CALL;$/;"	c
ProbeEvent.CALL	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^	case CALL;$/;"	c
ProbeEvent.GUEST_OPCODE_READ	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^	case GUEST_OPCODE_READ(bytecode: u8, offset: u32);$/;"	c
ProbeEvent.GUEST_OPCODE_READ	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^	case GUEST_OPCODE_READ(bytecode: u8, offset: u32);$/;"	c
ProbeEvent.RETURN	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^	case RETURN;$/;"	c
ProbeEvent.RETURN	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^	case RETURN;$/;"	c
ProbeId	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	case ProbeId;$/;"	d
ProbeList	$VIRGIL_WIZARD/src/engine/Probe.v3	/^class ProbeList extends Probe {$/;"	c
ProfileMonitor	$VIRGIL_WIZARD/src/monitors/ProfileMonitor.v3	/^class ProfileMonitor extends Monitor {$/;"	c
ProfileTree	$VIRGIL_WIZARD/src/monitors/ProfileMonitor.v3	/^private class ProfileTree {$/;"	c
ProfileTreeNode	$VIRGIL_WIZARD/src/monitors/ProfileMonitor.v3	/^private class ProfileTreeNode(parent: ProfileTreeNode, func: WasmFunction) {$/;"	c
QuantityExceededMaximum	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def QuantityExceededMaximum(quantity: string, val: u64, max: u64) {$/;"	m
QuantityExceededMaximumI	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def QuantityExceededMaximumI(quantity: string, val: int, max: u64) {$/;"	m
R3BackEndMonitor	$VIRGIL_WIZARD/src/monitors/R3BackEndMonitor.v3	/^private class R3BackEndMonitor extends Monitor {$/;"	c
R3CallIndirectProbe	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^private class R3CallIndirectProbe(sig: SigDecl, table_index: u31, handler: EventHandler) extends Probe {$/;"	c
R3CallProbe	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^private class R3CallProbe(callee_index: int, handler: EventHandler) extends Probe {$/;"	c
R3MemoryReadProbe	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^private class R3MemoryReadProbe extends MemoryReadProbe {$/;"	c
R3Monitor	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^class R3Monitor extends Monitor {$/;"	c
R3MonitorBytecodeInstrumenter	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^private class R3MonitorBytecodeInstrumenter extends BytecodeInstrumenter {$/;"	c
R3TraceParser	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^class R3TraceParser(input: Array<byte>) {$/;"	c
R3Utils	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^component R3Utils {$/;"	n
RANGE	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	RANGE		(68, "Result too large."),$/;"	d
RDTSC_FUNC	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Target.v3	/^def RDTSC_FUNC = X86_64PreGenFunc<void, u64>.new("rdtsc", null, genRdtsc);$/;"	d
REC	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	REC		(0x4E, -50)$/;"	d
RED	$VIRGIL_WIZARD/src/util/TermColors.v3	/^	def RED		= "\x1B[0;31m";$/;"	d
REDZONE_RETRIES	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Target.v3	/^def REDZONE_RETRIES = 1;$/;"	d
REF	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^	U8, U16, U32, U64, F32, F64, V128, REF$/;"	d
REF	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	REF		(0x64, -28), \/\/$/;"	d
REF	$VIRGIL_WIZARD/src/engine/Sidetable.v3	/^	COMPLEX, I8, U8, I16, U16, I32, U32, I64, F32, F64, V128, REF$/;"	d
REF	$VIRGIL_WIZARD/src/engine/Value.v3	/^	REF(BpTypeCode.REF.code),$/;"	d
REF_AS_NON_NULL	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def REF_AS_NON_NULL() {$/;"	m
REF_AS_NON_NULL	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	REF_AS_NON_NULL		(0x00, 0xD4, "ref.as_non_null", imm.NONE, null),$/;"	d
REF_CAST	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	REF_CAST			(0xFB, 0x16, "ref.cast", imm.HEAPT, null),$/;"	d
REF_CAST_NULL	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	REF_CAST_NULL			(0xFB, 0x17, "ref.cast null", imm.HEAPT, null),$/;"	d
REF_EQ	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	REF_EQ			(0x00, 0xD3, "ref.eq", imm.NONE, null),$/;"	d
REF_FUNC	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	REF_FUNC		(0x00, 0xD2, "ref.func", imm.FUNC, null),$/;"	d
REF_I31	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	REF_I31				(0xFB, 0x1C, "ref.i31", imm.NONE, null), \/\/ XXX: could have sig$/;"	d
REF_IS_NULL	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def REF_IS_NULL() {$/;"	m
REF_IS_NULL	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	REF_IS_NULL		(0x00, 0xD1, "ref.is_null", imm.NONE, null),$/;"	d
REF_NONNULL	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	REF_NONNULL	(false,		false),$/;"	d
REF_NULL	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def REF_NULL() {$/;"	m
REF_NULL	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	REF_NULL	(0x63, -29), \/\/$/;"	d
REF_NULL	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	REF_NULL		(0x00, 0xD0, "ref.null", imm.HEAPT, null),$/;"	d
REF_NULL	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	REF_NULL	(true,		false),$/;"	d
REF_SIZE	$VIRGIL_WIZARD/src/engine/x86-64/V3Offsets.v3	/^	def REF_SIZE			= byte.!(Pointer.atElement(mems, 1) - Pointer.atElement(mems, 0));$/;"	d
REF_TEST	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	REF_TEST			(0xFB, 0x14, "ref.test", imm.HEAPT, null),$/;"	d
REF_TEST_NULL	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	REF_TEST_NULL			(0xFB, 0x15, "ref.test null", imm.HEAPT, null),$/;"	d
REGISTER	$VIRGIL_WIZARD/src/util/Palette.v3	/^	REGISTER	(TermColors.YELLOW),$/;"	d
REGULAR_FILE	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	REGULAR_FILE,$/;"	d
REL_MARKER	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^def REL_MARKER = 0x99887766;$/;"	d
REPEAT	$VIRGIL_WIZARD/src/wizeng.main.v3	/^	def REPEAT = group.newIntOption("repeat", 1, "Execute the program the given number of times.");$/;"	d
REPEAT_SECTIONS	$VIRGIL_WIZARD/src/engine/Extension.v3	/^	REPEAT_SECTIONS("repeat-sections", "Repeated sections and relaxed order"),$/;"	d
RESUMABLE	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^	RESUMABLE,		\/\/ all inputs set; can be resumed$/;"	d
RESUME	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	RESUME				(0x00, 0xE3, "resume", imm.CONT_HANDLE, null),$/;"	d
RESUME_STUB_POINTER	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	var RESUME_STUB_POINTER: Pointer;$/;"	d
RESUME_THROW	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	RESUME_THROW			(0x00, 0xE4, "resume.throw", imm.CONT_TAG_HANDLE, null),$/;"	d
RETADDR_SIZE	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^def RETADDR_SIZE = Pointer.SIZE;$/;"	d
RETHROW	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	RETHROW			(0x00, 0x09, "rethrow", imm.LABEL, null),$/;"	d
RETHROW_NOT_IN_CATCH	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	RETHROW_NOT_IN_CATCH,$/;"	d
RETURN	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def RETURN() {$/;"	m
RETURN	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	RETURN			(0x00, 0x0F, "return", imm.NONE, null),$/;"	d
RETURN	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^	case RETURN;$/;"	d
RETURNING	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^	RETURNING,		\/\/ used internally$/;"	d
RETURN_CALL	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def RETURN_CALL() {$/;"	m
RETURN_CALL	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	RETURN_CALL		(0x00, 0x12, "return_call", imm.FUNC, null),$/;"	d
RETURN_CALL_INDIRECT	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	RETURN_CALL_INDIRECT	(0x00, 0x13, "return_call_indirect", imm.SIG_TABLE, null),$/;"	d
RETURN_CALL_REF	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	RETURN_CALL_REF		(0x00, 0x15, "return_call_ref", imm.SIG, null),$/;"	d
RIGHT	$VIRGIL_WIZARD/src/util/TraceUtil.v3	/^enum Justification { LEFT, CENTER_L, CENTER_R, RIGHT }$/;"	d
RIGHT_ARROW	$VIRGIL_WIZARD/src/util/CfgPrinter.v3	/^def RIGHT_ARROW = '>';$/;"	d
ROFS	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	ROFS		(69, "Read-only file system."),$/;"	d
RT	$VIRGIL_WIZARD/src/engine/x86-64/V3Offsets.v3	/^def RT: X86_64Runtime;$/;"	d
RT	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^def RT: Runtime;$/;"	d
RT	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^def RT: Runtime;$/;"	d
RT	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Target.v3	/^def RT: X86_64Runtime;$/;"	d
RUNNING	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^	RUNNING,		\/\/ currently running Wasm or host code$/;"	d
RatioMetric	$VIRGIL_WIZARD/src/engine/Metrics.v3	/^class RatioMetric extends Metric {$/;"	c
RecGroup	$VIRGIL_WIZARD/src/engine/Canon.v3	/^class RecGroup(length: int) {$/;"	c
RedZone	$VIRGIL_WIZARD/src/engine/x86-64/Redzones.v3	/^class RedZone(start: Pointer, end: Pointer, var prev: RedZone, var next: RedZone) {$/;"	c
RedZones	$VIRGIL_WIZARD/src/engine/x86-64/Redzones.v3	/^component RedZones {$/;"	n
Ref	$VIRGIL_WIZARD/src/engine/Type.v3	/^	def Ref(nullable: bool, ht: HeapTypeDecl) -> ValueType.Ref {$/;"	f
Ref	$VIRGIL_WIZARD/src/engine/Value.v3	/^	case Ref(val: Object);$/;"	d
RefArray	$VIRGIL_WIZARD/src/engine/Type.v3	/^	def RefArray(nullable: bool, x: ArrayDecl) -> ValueType.Ref {$/;"	f
RefFunc	$VIRGIL_WIZARD/src/engine/Type.v3	/^	def RefFunc(nullable: bool, x: SigDecl) -> ValueType.Ref {$/;"	f
RefNull	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case RefNull(ht: HeapType);$/;"	d
RefStruct	$VIRGIL_WIZARD/src/engine/Type.v3	/^	def RefStruct(nullable: bool, x: StructDecl) -> ValueType.Ref {$/;"	f
ReflectorModule	$VIRGIL_WIZARD/src/modules/ReflectorModule.v3	/^class ReflectorModule extends HostModule {$/;"	c
Reg	$VIRGIL_WIZARD/src/engine/compiler/RegSet.v3	/^type Reg(index: byte) #unboxed { }$/;"	c
RegAlloc	$VIRGIL_WIZARD/src/engine/compiler/RegAlloc.v3	/^class RegAlloc {$/;"	c
RegConfig	$VIRGIL_WIZARD/src/engine/compiler/RegSet.v3	/^class RegConfig(regSet: RegSet) {$/;"	c
RegPool32	$VIRGIL_WIZARD/src/engine/compiler/RegSet.v3	/^class RegPool32(regs: Array<Reg>) {$/;"	c
RegSet	$VIRGIL_WIZARD/src/engine/compiler/RegSet.v3	/^class RegSet(regs: Array<Reg>, names: Array<string>) {$/;"	c
ReplayContext	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^class ReplayContext(actions: Vector<WasmEvent>, var results: Array<Value>){}$/;"	c
ReplayFunction	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^class ReplayFunction(all_ctx: Vector<ReplayContext>){}$/;"	c
Result	$VIRGIL_WIZARD/src/engine/Execute.v3	/^type Result {$/;"	c
Result.Switch	$VIRGIL_WIZARD/src/engine/Execute.v3	/^	case Switch(stack: WasmStack);$/;"	c
Result.Switch	$VIRGIL_WIZARD/src/engine/Execute.v3	/^	case Switch(stack: WasmStack);$/;"	c
Result.Throw	$VIRGIL_WIZARD/src/engine/Execute.v3	/^	case Throw(thrown: Throwable);$/;"	c
Result.Throw	$VIRGIL_WIZARD/src/engine/Execute.v3	/^	case Throw(thrown: Throwable);$/;"	c
Result.Value	$VIRGIL_WIZARD/src/engine/Execute.v3	/^	case Value(vals: Array<Value>);$/;"	c
Result.Value	$VIRGIL_WIZARD/src/engine/Execute.v3	/^	case Value(vals: Array<Value>);$/;"	c
RethrowNotInCatch	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def RethrowNotInCatch() {$/;"	m
ReturnArityMismatch	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def ReturnArityMismatch(e: int, g: int) {$/;"	m
ReturnProbe	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^private class ReturnProbe(handler: EventHandler) extends Probe {$/;"	c
ReturnSigMismatch	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def ReturnSigMismatch(i: int, e: ValueType, g: ValueType) {$/;"	m
Run	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	case Run;$/;"	d
Runtime	$VIRGIL_WIZARD/src/engine/Runtime.v3	/^component Runtime {$/;"	n
SAVE_AND_FREE_REGS	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	SAVE_AND_FREE_REGS(true, true),		\/\/ save registers and free all registers$/;"	d
SAVE_AND_REMEMBER_STORED	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	SAVE_AND_REMEMBER_STORED(false, true),	\/\/ save registers and constants, remember slots are stored$/;"	d
SAVE_ONLY	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	SAVE_ONLY(false, false),		\/\/ save registers and constants, don't update state$/;"	d
SECTION	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	SECTION,$/;"	d
SECTION_START	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	SECTION_START,$/;"	d
SECTION_WITH_SIZE	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	SECTION_WITH_SIZE,$/;"	d
SELECT	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def SELECT() {$/;"	m
SELECT	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	SELECT			(0x00, 0x1B, "select", imm.NONE, null),$/;"	d
SELECT_T	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	SELECT_T		(0x00, 0x1C, "select", imm.VALTS, null),$/;"	d
SHORT_OP	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	SHORT_OP,$/;"	d
SIG	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def SIG = [ImmKind.SIG_INDEX];$/;"	d
SIGBUS	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^def SIGBUS  = 10;$/;"	d
SIGBUS	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^def SIGBUS  = 10;$/;"	d
SIGFPE	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^def SIGFPE  = 8;$/;"	d
SIGFPE	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^def SIGFPE  = 8;$/;"	d
SIGSEGV	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^def SIGSEGV = 11;$/;"	d
SIGSEGV	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^def SIGSEGV = 11;$/;"	d
SIG_INDEX	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	SIG_INDEX,		\/\/ SIG$/;"	d
SIG_TABLE	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def SIG_TABLE = [ImmKind.SIG_INDEX, ImmKind.TABLE_INDEX];$/;"	d
SIMPLE_32	$VIRGIL_WIZARD/src/engine/Sidetable.v3	/^	SIMPLE_32,		\/\/ memory 0, 32-bit index, offset=0, one byte LEB$/;"	d
SIMPLE_64	$VIRGIL_WIZARD/src/engine/Sidetable.v3	/^	SIMPLE_64,		\/\/ memory 0, 64-bit index, offset=0, one byte LEB$/;"	d
SKIP_ACTIONS	$VIRGIL_WIZARD/src/SpectestMode.v3	/^	def SKIP_ACTIONS = group.newBoolOption("skip-actions", false, "Parse only and skip actions.");$/;"	d
SOCKET_DGRAM	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	SOCKET_DGRAM,$/;"	d
SOCKET_STREAM	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	SOCKET_STREAM,$/;"	d
SOURCE	$VIRGIL_WIZARD/src/util/Palette.v3	/^	SOURCE		(TermColors.BRIGHTCYAN),$/;"	d
SP	$VIRGIL_WIZARD/src/util/CfgPrinter.v3	/^def SP = CfgEdgeChar.EMPTY;$/;"	d
SPC	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	INVALID, INTERPRETER, SPC, SPC_TRAPS_STUB$/;"	d
SPC_TRAPS_STUB	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	INVALID, INTERPRETER, SPC, SPC_TRAPS_STUB$/;"	d
SPIPE	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	SPIPE		(70, "Invalid seek."),$/;"	d
SRCH	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	SRCH		(71, "No such process."),$/;"	d
STACK_ENTER_FUNC_STUB	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^def STACK_ENTER_FUNC_STUB = X86_64PreGenStub.new("stack-enter-func", X86_64SimpleStub.new("stack-enter-func", 0), genStackEnterFuncStub);$/;"	d
STACK_OVERFLOW	$VIRGIL_WIZARD/src/engine/Trap.v3	/^	STACK_OVERFLOW,$/;"	d
STACK_OVERFLOW_STUB	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^def STACK_OVERFLOW_STUB = X86_64PreGenStub.new("stack-overflow", X86_64UnwindStub.new("stack-overflow"), genStackUnwind(_, _, Execute.trapObjects[TrapReason.STACK_OVERFLOW.tag]));$/;"	d
STACK_RETURN_PARENT_STUB	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^def STACK_RETURN_PARENT_STUB = X86_64PreGenStub.new("stack-return-parent", X86_64ReturnParentStub.new(), genStackReturnParentStub);$/;"	d
STACK_SIZE	$VIRGIL_WIZARD/src/engine/EngineOptions.v3	/^	def STACK_SIZE = group.newSizeOption("stack-size", DEFAULT_STACK_SIZE, "Initial stack size in bytes for Wasm execution stacks.");$/;"	d
STACK_SWITCHING	$VIRGIL_WIZARD/src/engine/Extension.v3	/^	STACK_SWITCHING("stack-switching", "Stack switching"),$/;"	d
STACK_UNWIND_STUB	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^def STACK_UNWIND_STUB = X86_64PreGenStub.new("stack-unwind", X86_64UnwindStub.new("stack-unwind"), genStackUnwind(_, _, null));$/;"	d
STALE	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	STALE		(72, "Reserved."),$/;"	d
STATX_ALL	$VIRGIL_WIZARD/src/modules/wasi/x86-64-linux/WspOneModule-x86-64-linux.v3	/^def STATX_ALL = 0x00000FFF; \/\/ all currently-supported flags$/;"	d
STDIN	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	def STDIN = 0;$/;"	d
STDOUT	$VIRGIL_WIZARD/src/engine/Trace.v3	/^	def STDOUT = System.write(1, _);$/;"	d
STDOUT_void	$VIRGIL_WIZARD/src/engine/Trace.v3	/^	def STDOUT_void(r: Range<byte>) {$/;"	f
STEP	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^case STEP(bytecode: u8, offset: u64, cost: u64, wasm_func_trace: List<WasmFuncTrace>);$/;"	d
STRUCT	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	STRUCT		(0x6B, -21), \/\/ -0x15$/;"	d
STRUCTREF	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	STRUCTREF	(0x6B, -21), \/\/$/;"	d
STRUCTREF	$VIRGIL_WIZARD/src/engine/Type.v3	/^	def STRUCTREF = ValueType.Ref(true, HeapType.Struct(null));$/;"	d
STRUCTT	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def STRUCTT = [ImmKind.STRUCT_TYPE_INDEX];$/;"	d
STRUCTT_FIELD	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def STRUCTT_FIELD = [ImmKind.STRUCT_TYPE_INDEX, ImmKind.FIELD_INDEX];$/;"	d
STRUCT_GET	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def STRUCT_GET() {$/;"	m
STRUCT_GET	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	STRUCT_GET			(0xFB, 0x02, "struct.get", imm.STRUCTT_FIELD, null),$/;"	d
STRUCT_GET	$VIRGIL_WIZARD/src/engine/Runtime.v3	/^	def STRUCT_GET(stack: ExecStack, instance: Instance, struct_index: u31, field_index: u31) -> Throwable {$/;"	f
STRUCT_GET_S	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def STRUCT_GET_S() {$/;"	m
STRUCT_GET_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	STRUCT_GET_S			(0xFB, 0x03, "struct.get_s", imm.STRUCTT_FIELD, null),$/;"	d
STRUCT_GET_S	$VIRGIL_WIZARD/src/engine/Runtime.v3	/^	def STRUCT_GET_S(stack: ExecStack, instance: Instance, struct_index: u31, field_index: u31) -> Throwable {$/;"	f
STRUCT_GET_U	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def STRUCT_GET_U() {$/;"	m
STRUCT_GET_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	STRUCT_GET_U			(0xFB, 0x04, "struct.get_u", imm.STRUCTT_FIELD, null),$/;"	d
STRUCT_GET_U	$VIRGIL_WIZARD/src/engine/Runtime.v3	/^	def STRUCT_GET_U(stack: ExecStack, instance: Instance, struct_index: u31, field_index: u31) -> Throwable {$/;"	f
STRUCT_NEW	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def STRUCT_NEW() {$/;"	m
STRUCT_NEW	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	STRUCT_NEW			(0xFB, 0x00, "struct.new", imm.STRUCTT, null),$/;"	d
STRUCT_NEW	$VIRGIL_WIZARD/src/engine/Runtime.v3	/^	def STRUCT_NEW(stack: ExecStack, instance: Instance, struct_index: u31) {$/;"	f
STRUCT_NEW_DEFAULT	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	STRUCT_NEW_DEFAULT		(0xFB, 0x01, "struct.new_default", imm.STRUCTT, null),$/;"	d
STRUCT_NEW_DEFAULT	$VIRGIL_WIZARD/src/engine/Runtime.v3	/^	def STRUCT_NEW_DEFAULT(stack: ExecStack, instance: Instance, struct_index: u31) {$/;"	f
STRUCT_SET	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	STRUCT_SET			(0xFB, 0x05, "struct.set", imm.STRUCTT_FIELD, null),$/;"	d
STRUCT_SET	$VIRGIL_WIZARD/src/engine/Runtime.v3	/^	def STRUCT_SET(stack: ExecStack, instance: Instance, struct_index: u31, field_index: u31) -> Throwable {$/;"	f
STRUCT_TYPE_INDEX	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	STRUCT_TYPE_INDEX,	\/\/ STRUCTT$/;"	d
SUB	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	SUB		(0x50, -48),$/;"	d
SUB	$VIRGIL_WIZARD/src/engine/Type.v3	/^	SUB$/;"	d
SUB_FINAL	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	SUB_FINAL	(0x4F, -49),$/;"	d
SUCCESS	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	SUCCESS		(0, "No error occurred. System call completed successfully."),$/;"	d
SUCCESS	$VIRGIL_WIZARD/src/modules/wasi/x86-64-linux/WspOneModule-x86-64-linux.v3	/^def SUCCESS = WspOneErrno.SUCCESS.code;$/;"	d
SUCCESS	$VIRGIL_WIZARD/src/util/Palette.v3	/^	SUCCESS		(TermColors.BRIGHTGREEN),$/;"	d
SUCCESS_HR	$VIRGIL_WIZARD/src/modules/wasi/x86-64-linux/WspOneModule-x86-64-linux.v3	/^def SUCCESS_HR = HostResult.Value1(Value.I32(SUCCESS));$/;"	d
SUPER	$VIRGIL_WIZARD/src/engine/Type.v3	/^	SUPER,$/;"	d
SUSPEND	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	SUSPEND				(0x00, 0xE2, "suspend", imm.TAG, null),$/;"	d
SUSPENDED	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^	SUSPENDED,		\/\/ contains one or more frames, waiting for inputs$/;"	d
SUS_HANDLERS	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	SUS_HANDLERS	\/\/ SUS_HANDLERS$/;"	d
SWITCH	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	SWITCH				(0x00, 0xE5, "switch", imm.CONT_TAG, null)$/;"	d
SYMBOLIC_LINK	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	SYMBOLIC_LINK$/;"	d
SYSTEM	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^	case SYSTEM(cost: u64, wasm_func_trace: List<WasmFuncTrace>);$/;"	d
SYS_readlink	$VIRGIL_WIZARD/src/modules/wasi/x86-64-linux/WspOnePathResolver-x86-64-linux.v3	/^def SYS_readlink = 0x59;	\/\/ Linux system call to read a symlink$/;"	d
S_IFBLK	$VIRGIL_WIZARD/src/modules/wasi/x86-64-linux/WspOneModule-x86-64-linux.v3	/^def S_IFBLK  = 0x6000; \/\/ block device$/;"	d
S_IFCHR	$VIRGIL_WIZARD/src/modules/wasi/x86-64-linux/WspOneModule-x86-64-linux.v3	/^def S_IFCHR  = 0x2000; \/\/ character device$/;"	d
S_IFDIR	$VIRGIL_WIZARD/src/modules/wasi/x86-64-linux/WspOneModule-x86-64-linux.v3	/^def S_IFDIR  = 0x4000; \/\/ directory$/;"	d
S_IFIFO	$VIRGIL_WIZARD/src/modules/wasi/x86-64-linux/WspOneModule-x86-64-linux.v3	/^def S_IFIFO  = 0x1000; \/\/ FIFO$/;"	d
S_IFLNK	$VIRGIL_WIZARD/src/modules/wasi/x86-64-linux/WspOneModule-x86-64-linux.v3	/^def S_IFLNK  = 0xA000; \/\/ symbolic link$/;"	d
S_IFMT	$VIRGIL_WIZARD/src/modules/wasi/x86-64-linux/WspOneModule-x86-64-linux.v3	/^def S_IFMT   = 0xF000; \/\/ bit mask for the file type bit field$/;"	d
S_IFREG	$VIRGIL_WIZARD/src/modules/wasi/x86-64-linux/WspOneModule-x86-64-linux.v3	/^def S_IFREG  = 0x8000; \/\/ regular file$/;"	d
S_IFSOCK	$VIRGIL_WIZARD/src/modules/wasi/x86-64-linux/WspOneModule-x86-64-linux.v3	/^def S_IFSOCK = 0xC000; \/\/ socket$/;"	d
SamplingProbe	$VIRGIL_WIZARD/src/util/ProbeUtil.v3	/^class SamplingProbe(probe: Probe) extends Probe {$/;"	c
SectionOutline	$VIRGIL_WIZARD/src/engine/Module.v3	/^class SectionOutline {$/;"	c
SegmentMode	$VIRGIL_WIZARD/src/engine/Module.v3	/^type SegmentMode {$/;"	c
SegmentMode.Active	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case Active(index: int, offset: InitExpr);$/;"	c
SegmentMode.Active	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case Active(index: int, offset: InitExpr);$/;"	c
SegmentMode.Declarative	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case Declarative;$/;"	c
SegmentMode.Declarative	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case Declarative;$/;"	c
SegmentMode.Passive	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case Passive;$/;"	c
SegmentMode.Passive	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case Passive;$/;"	c
Sequence	$VIRGIL_WIZARD/src/util/DeclFilter.v3	/^	case Sequence(min: u32, max: u32);$/;"	d
Set	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case Set(max: u64);$/;"	d
Set	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	case Set(local_idx: int, value: Value);$/;"	d
Shared	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	Shared(0x02),$/;"	d
Sidetable	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case Sidetable(push_exnref: bool, sidetable_entry: int);$/;"	d
Sidetable	$VIRGIL_WIZARD/src/engine/Sidetable.v3	/^type Sidetable(entries: Array<int>) #unboxed {$/;"	c
SidetableBrEntry	$VIRGIL_WIZARD/src/engine/Sidetable.v3	/^type SidetableBrEntry(dpc: int, valcount: int, popcount: int, dstp: int) #unboxed;$/;"	c
SidetableBuilder	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^class SidetableBuilder {$/;"	c
SidetableCatchEntry	$VIRGIL_WIZARD/src/engine/Sidetable.v3	/^type SidetableCatchEntry(handler_pc: int, val_stack_top: int, sidetable_pos: int) #unboxed;$/;"	c
SidetableMap	$VIRGIL_WIZARD/src/engine/Sidetable.v3	/^class SidetableMap(func: FuncDecl) {$/;"	c
SidetableResumeEntry	$VIRGIL_WIZARD/src/engine/Sidetable.v3	/^type SidetableResumeEntry(nargs: int, nhandlers: int) #unboxed;$/;"	c
SidetableRethrowEntry	$VIRGIL_WIZARD/src/engine/Sidetable.v3	/^type SidetableRethrowEntry(catch_slot: int) #unboxed;$/;"	c
Sidetable_BrEntry	$VIRGIL_WIZARD/src/engine/Sidetable.v3	/^layout Sidetable_BrEntry {$/;"	l
Sidetable_CatchEntry	$VIRGIL_WIZARD/src/engine/Sidetable.v3	/^layout Sidetable_CatchEntry {$/;"	l
Sidetable_GotoEntry	$VIRGIL_WIZARD/src/engine/Sidetable.v3	/^layout Sidetable_GotoEntry {$/;"	l
Sidetable_LexicalRethrowEntry	$VIRGIL_WIZARD/src/engine/Sidetable.v3	/^layout Sidetable_LexicalRethrowEntry {$/;"	l
Sidetable_MemArg	$VIRGIL_WIZARD/src/engine/Sidetable.v3	/^layout Sidetable_MemArg {$/;"	l
Sidetable_ResumeEntry	$VIRGIL_WIZARD/src/engine/Sidetable.v3	/^layout Sidetable_ResumeEntry {$/;"	l
Sidetable_StructFieldAccess	$VIRGIL_WIZARD/src/engine/Sidetable.v3	/^layout Sidetable_StructFieldAccess {$/;"	l
Sidetable_SuspendHandlerEntry	$VIRGIL_WIZARD/src/engine/Sidetable.v3	/^layout Sidetable_SuspendHandlerEntry {$/;"	l
Sidetables	$VIRGIL_WIZARD/src/engine/Sidetable.v3	/^component Sidetables {$/;"	n
Sig	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case Sig(index: int);$/;"	d
SigCache	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^component SigCache {$/;"	n
SigDecl	$VIRGIL_WIZARD/src/engine/Type.v3	/^class SigDecl extends HeapTypeDecl {$/;"	c
SigDecl_params	$VIRGIL_WIZARD/src/engine/x86-64/V3Offsets.v3	/^	def SigDecl_params		= int.view(Pointer.atField(sig.params) - Pointer.atObject(sig));$/;"	d
SigDecl_results	$VIRGIL_WIZARD/src/engine/x86-64/V3Offsets.v3	/^	def SigDecl_results		= int.view(Pointer.atField(sig.results) - Pointer.atObject(sig));$/;"	d
Signature	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^class Signature { }$/;"	c
SinglePassCompiler	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^class SinglePassCompiler(xenv: SpcExecEnv, masm: MacroAssembler, regAlloc: RegAlloc, extensions: Extension.set, limits: Limits) extends BytecodeVisitor {$/;"	c
SizeConstraint	$VIRGIL_WIZARD/src/engine/Module.v3	/^type SizeConstraint(is64: bool, initial: u64, maximum: Max) #unboxed {$/;"	c
SlotAddrs	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^type SlotAddrs(tag: X86_64Addr, value: X86_64Addr, upper: X86_64Addr) #unboxed { }$/;"	c
SpcConsts	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^component SpcConsts {$/;"	n
SpcControl	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^class SpcControl {$/;"	c
SpcExecEnv	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^class SpcExecEnv {$/;"	c
SpcHandlerInfo	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^type SpcHandlerInfo(is_dummy: bool, dest_label: MasmLabel, stub_label: MasmLabel, merge_state: Array<SpcVal>);$/;"	c
SpcMerger	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^class SpcMerger(state: Array<SpcVal>, num_locals: int, sp: u32, regAlloc: RegAlloc, resolver: SpcMoveResolver) {$/;"	c
SpcMoveResolver	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^class SpcMoveResolver(masm: MacroAssembler) {$/;"	c
SpcRaPool	$VIRGIL_WIZARD/src/engine/compiler/RegAlloc.v3	/^class SpcRaPool(regConfig: RegConfig, poolIndex: int) {$/;"	c
SpcRaPoolLink	$VIRGIL_WIZARD/src/engine/compiler/RegAlloc.v3	/^private class SpcRaPoolLink(reg: Reg, var prev: SpcRaPoolLink, var next: SpcRaPoolLink) {$/;"	c
SpcResultForStub	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Target.v3	/^type SpcResultForStub(wf: WasmFunction, entrypoint: Pointer, thrown: Throwable) #unboxed { }$/;"	c
SpcState	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^class SpcState(regAlloc: RegAlloc) {$/;"	c
SpcTuning	$VIRGIL_WIZARD/src/engine/Tuning.v3	/^component SpcTuning {$/;"	n
SpcVal	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^type SpcVal(flags: byte, reg: Reg, const: int) #unboxed {$/;"	c
SpectestMode	$VIRGIL_WIZARD/src/SpectestMode.v3	/^component SpectestMode {$/;"	n
SpillMode	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^enum SpillMode(free_regs: bool, remember_stored: bool) {$/;"	e
StackChecker	$VIRGIL_WIZARD/src/monitors/debug/StackCheck.v3	/^class StackChecker extends Monitor {$/;"	c
StackFramePos	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^type StackFramePos(stack: X86_64Stack, frame: TargetFrame) #unboxed;$/;"	c
StackState	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^enum StackState {$/;"	e
Start	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	Start(8),$/;"	d
Step	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	case Step;$/;"	d
StorageType	$VIRGIL_WIZARD/src/engine/Type.v3	/^type StorageType(valtype: ValueType, pack: Packedness, mutable: bool) { }$/;"	c
StoreProbe	$VIRGIL_WIZARD/src/monitors/MemStatsMonitor.v3	/^class StoreProbe(stats: MemStats, offset: u64, size: u8) extends Probe {$/;"	c
StringSet	$VIRGIL_WIZARD/src/util/StringSet.v3	/^class StringSet(max: int) {$/;"	c
StringSetUtil	$VIRGIL_WIZARD/src/util/StringSet.v3	/^component StringSetUtil {$/;"	n
Struct	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	Struct		(0x5F, -33),$/;"	d
Struct	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case Struct(t: HeapType.Struct, vals: Array<InitExpr>);$/;"	d
Struct	$VIRGIL_WIZARD/src/engine/Type.v3	/^	case Struct(sdecl: StructDecl);$/;"	d
Struct	$VIRGIL_WIZARD/src/monitors/AllocMonitor.v3	/^	case Struct(count: CountProbe);$/;"	d
StructAccessKind	$VIRGIL_WIZARD/src/engine/Sidetable.v3	/^enum StructAccessKind {$/;"	e
StructDecl	$VIRGIL_WIZARD/src/engine/Type.v3	/^class StructDecl extends HeapTypeDecl {$/;"	c
Suspend	$VIRGIL_WIZARD/src/engine/WasmParser.v3	/^	case Suspend(tag_index: u31, depth: u32);$/;"	d
SuspensionHandler	$VIRGIL_WIZARD/src/engine/WasmParser.v3	/^type SuspensionHandler {$/;"	c
SuspensionHandler.Suspend	$VIRGIL_WIZARD/src/engine/WasmParser.v3	/^	case Suspend(tag_index: u31, depth: u32);$/;"	c
SuspensionHandler.Suspend	$VIRGIL_WIZARD/src/engine/WasmParser.v3	/^	case Suspend(tag_index: u31, depth: u32);$/;"	c
SuspensionHandler.Switch	$VIRGIL_WIZARD/src/engine/WasmParser.v3	/^	case Switch(tag_index: u31);$/;"	c
SuspensionHandler.Switch	$VIRGIL_WIZARD/src/engine/WasmParser.v3	/^	case Switch(tag_index: u31);$/;"	c
Switch	$VIRGIL_WIZARD/src/engine/Execute.v3	/^	case Switch(stack: WasmStack);$/;"	d
Switch	$VIRGIL_WIZARD/src/engine/WasmParser.v3	/^	case Switch(tag_index: u31);$/;"	d
TABLE	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def TABLE = [ImmKind.TABLE_INDEX];$/;"	d
TABLE_COPY	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	TABLE_COPY		(0xFC, 0x0E, "table.copy", imm.TABLE_TABLE, sig.iii_v),$/;"	d
TABLE_COPY	$VIRGIL_WIZARD/src/engine/Runtime.v3	/^	def TABLE_COPY(stack: ExecStack, instance: Instance, table_index1: u31, table_index2: u31) -> Throwable {$/;"	f
TABLE_FILL	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	TABLE_FILL		(0xFC, 0x11, "table.fill", imm.TABLE, null),$/;"	d
TABLE_FILL	$VIRGIL_WIZARD/src/engine/Runtime.v3	/^	def TABLE_FILL(stack: ExecStack, instance: Instance, table_index: u31) -> Throwable {$/;"	f
TABLE_GET	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def TABLE_GET() {$/;"	m
TABLE_GET	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	TABLE_GET		(0x00, 0x25, "table.get", imm.TABLE, null),$/;"	d
TABLE_GET	$VIRGIL_WIZARD/src/engine/Runtime.v3	/^	def TABLE_GET(stack: ExecStack, instance: Instance, table_index: u31) -> Throwable {$/;"	f
TABLE_GROW	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	TABLE_GROW		(0xFC, 0x0F, "table.grow", imm.TABLE, null),$/;"	d
TABLE_GROW	$VIRGIL_WIZARD/src/engine/Runtime.v3	/^	def TABLE_GROW(stack: ExecStack, instance: Instance, table_index: u31) {$/;"	f
TABLE_INDEX	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	TABLE_INDEX,		\/\/ TABLE$/;"	d
TABLE_INIT	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	TABLE_INIT		(0xFC, 0x0C, "table.init", imm.ELEM_TABLE, sig.iii_v),$/;"	d
TABLE_INIT	$VIRGIL_WIZARD/src/engine/Runtime.v3	/^	def TABLE_INIT(stack: ExecStack, instance: Instance, elem_index: u31, table_index: u31) -> Throwable {$/;"	f
TABLE_OOB	$VIRGIL_WIZARD/src/engine/Trap.v3	/^	TABLE_OOB,$/;"	d
TABLE_SET	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def TABLE_SET() {$/;"	m
TABLE_SET	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	TABLE_SET		(0x00, 0x26, "table.set", imm.TABLE, null),$/;"	d
TABLE_SET	$VIRGIL_WIZARD/src/engine/Runtime.v3	/^	def TABLE_SET(stack: ExecStack, instance: Instance, table_index: u31) -> Throwable {$/;"	f
TABLE_SIZE	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	TABLE_SIZE		(0xFC, 0x10, "table.size", imm.TABLE, sig.v_i),$/;"	d
TABLE_TABLE	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def TABLE_TABLE = [ImmKind.TABLE_INDEX, ImmKind.TABLE_INDEX];$/;"	d
TAG	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def TAG = [ImmKind.TAG_INDEX];$/;"	d
TAG_INDEX	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	TAG_INDEX,		\/\/ TAG$/;"	d
TAG_STORED	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^def TAG_STORED = SpcConsts.TAG_STORED;$/;"	d
TAG_STORED	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^def TAG_STORED = SpcConsts.TAG_STORED;$/;"	d
TAIL_CALL	$VIRGIL_WIZARD/src/engine/Extension.v3	/^	TAIL_CALL("tail-call", "Tail calls"),$/;"	d
TAKEN	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	TAKEN(true, false),$/;"	d
TARGET	$VIRGIL_WIZARD/src/util/Palette.v3	/^	TARGET		(TermColors.YELLOW),$/;"	d
THROW	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	THROW			(0x00, 0x08, "throw", imm.TAG, null),$/;"	d
THROWING	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^	THROWING,		\/\/ used internally$/;"	d
THROW_REF	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	THROW_REF		(0x00, 0x0A, "throw_ref", imm.NONE, null),$/;"	d
TIERUP_COMPILE_STUB	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^def TIERUP_COMPILE_STUB = X86_64PreGenStub.new("spc-tierup-compile", X86_64SpcCompileStub.new("tierup"), genTierUpCompileStub);$/;"	d
TIMEDOUT	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	TIMEDOUT	(73, "Connection timed out."),$/;"	d
TIMEOUT	$VIRGIL_WIZARD/src/engine/Trap.v3	/^	TIMEOUT,$/;"	d
TMP_SLOT	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^def TMP_SLOT = 1000000000;$/;"	d
TOO_BIG	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	TOO_BIG		(1, "Argument list too long."),$/;"	d
TOTAL_SIZE	$VIRGIL_WIZARD/src/engine/x86-64/X86_64PreGenStubs.v3	/^def TOTAL_SIZE = INL_SIZE + OOL_SIZE;$/;"	d
TRACER	$VIRGIL_WIZARD/src/monitors/BranchMonitor.v3	/^def TRACER = InstrTracer.new();$/;"	d
TRACE_FILE_OPTION	$VIRGIL_WIZARD/src/monitors/R3BackEndMonitor.v3	/^def TRACE_FILE_OPTION = E_.options.newPathOption("trace_file", null, "The path to the R3 trace file to replay.");$/;"	d
TRACE_FILTER_OPTION	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^def TRACE_FILTER_OPTION = E_.options.newDeclFilterOption("exclude", "Treat the matched functions as host functions.");$/;"	d
TRACE_INTERP_PROBE	$VIRGIL_WIZARD/src/util/BasicTracing.v3	/^def TRACE_INTERP_PROBE = TraceInstrProbe.new();$/;"	d
TRAPS_PREGEN	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^def TRAPS_PREGEN = X86_64PreGenStub.new("spc-trap", TRAPS_STUB, genTrapsStub);$/;"	d
TRAPS_STUB	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^def TRAPS_STUB = X86_64SpcTrapsStub.new();$/;"	d
TRAP_HANDLER_SIZE	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^def TRAP_HANDLER_SIZE = 48;$/;"	d
TRUNC_i32_f32_s	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^def TRUNC_i32_f32_s = FloatTrunc.new(false, false, true);$/;"	d
TRUNC_i32_f32_u	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^def TRUNC_i32_f32_u = FloatTrunc.new(false, false, false);$/;"	d
TRUNC_i32_f64_s	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^def TRUNC_i32_f64_s = FloatTrunc.new(false, true, true);$/;"	d
TRUNC_i32_f64_u	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^def TRUNC_i32_f64_u = FloatTrunc.new(false, true, false);$/;"	d
TRUNC_i64_f32_s	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^def TRUNC_i64_f32_s = FloatTrunc.new(true, false, true);$/;"	d
TRUNC_i64_f32_u	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^def TRUNC_i64_f32_u = FloatTrunc.new(true, false, false);$/;"	d
TRUNC_i64_f64_s	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^def TRUNC_i64_f64_s = FloatTrunc.new(true, true, true);$/;"	d
TRUNC_i64_f64_u	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^def TRUNC_i64_f64_u = FloatTrunc.new(true, true, false);$/;"	d
TRY	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def TRY() {$/;"	m
TRY	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	TRY			(0x00, 0x06, "try", imm.BLOCKT, null),$/;"	d
TRY_TABLE	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	TRY_TABLE		(0x00, 0x1F, "try_table", imm.BLOCKT_CATCHES, null),$/;"	d
TXTBSY	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	TXTBSY		(74, "Text file busy."),$/;"	d
TYPE	$VIRGIL_WIZARD/src/util/Palette.v3	/^	TYPE		(TermColors.YELLOW),$/;"	d
TYPE_HAS_IMM	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^def TYPE_HAS_IMM: byte = 0x80;$/;"	d
TYPE_IS_LEB	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^def TYPE_IS_LEB: byte = 0x40;$/;"	d
TYPE_MISMATCH	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	TYPE_MISMATCH,$/;"	d
Table	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	Table(4),$/;"	d
Table	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case Table(index: int);$/;"	d
Table	$VIRGIL_WIZARD/src/engine/Table.v3	/^class Table(elemtype: ValueType, decl: TableDecl) extends Exportable {$/;"	c
TableCell	$VIRGIL_WIZARD/src/util/TraceUtil.v3	/^class TableCell extends StringBuilder {$/;"	c
TableDecl	$VIRGIL_WIZARD/src/engine/Module.v3	/^class TableDecl(elemtype: ValueType.Ref, size: SizeConstraint) extends Decl {$/;"	c
TableGet	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^	case TableGet(table_idx: int, table_name: string, entry_idx: int, func_idx: int, func_name: string);$/;"	d
TableGetProbe	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^private class TableGetProbe(handler: EventHandler, table_index: u31) extends Probe {$/;"	c
TableGrow	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^	case TableGrow(table_idx: int, table_name: string, amount: u32);$/;"	d
TableGrowProbe	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^private class TableGrowProbe(handler: EventHandler, table_index: u31) extends Probe {$/;"	c
TableLimits	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^type TableLimits(size: SizeConstraint) #unboxed { }$/;"	c
TableSetProbe	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^private class TableSetProbe(handler: EventHandler, table_index: u31) extends Probe {$/;"	c
Table_elems	$VIRGIL_WIZARD/src/engine/x86-64/V3Offsets.v3	/^	def Table_elems			= int.view(Pointer.atField(t.elems) - Pointer.atObject(t));$/;"	d
Table_funcs	$VIRGIL_WIZARD/src/engine/x86-64/V3Offsets.v3	/^	def Table_funcs			= int.view(Pointer.atField(t.funcs) - Pointer.atObject(t));$/;"	d
Table_ids	$VIRGIL_WIZARD/src/engine/x86-64/V3Offsets.v3	/^	def Table_ids			= int.view(Pointer.atField(t.ids) - Pointer.atObject(t));$/;"	d
Table_index_tag	$VIRGIL_WIZARD/src/engine/x86-64/V3Offsets.v3	/^	def Table_index_tag		= int.view(Pointer.atField(t.index_tag) - Pointer.atObject(t));$/;"	d
Tag	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	Tag(4),$/;"	d
Tag	$VIRGIL_WIZARD/src/engine/Instance.v3	/^class Tag(sig: SigDecl, decl: TagDecl) extends Exportable {$/;"	c
Tag	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case Tag(index: int);$/;"	d
TagDecl	$VIRGIL_WIZARD/src/engine/Module.v3	/^class TagDecl(sig_index: int) extends Decl {$/;"	c
Tagging	$VIRGIL_WIZARD/src/engine/Tagging.v3	/^class Tagging(tagged: bool, simd: bool) {$/;"	c
TailCall	$VIRGIL_WIZARD/src/engine/Host.v3	/^	case TailCall(func: Function, args: Array<Value>);$/;"	d
Taken	$VIRGIL_WIZARD/src/monitors/LoopTraceMonitor.v3	/^	case Taken;$/;"	d
Target	$VIRGIL_WIZARD/src/engine/v3/V3Target.v3	/^component Target {$/;"	n
Target	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Target.v3	/^component Target {$/;"	n
TargetCode	$VIRGIL_WIZARD/src/engine/v3/V3Target.v3	/^type TargetCode #unboxed { }$/;"	c
TargetCode	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Target.v3	/^type TargetCode(spc_entry: Pointer) #unboxed { }$/;"	c
TargetFrame	$VIRGIL_WIZARD/src/engine/v3/V3Target.v3	/^type TargetFrame(frame: V3Frame) #unboxed {$/;"	c
TargetFrame	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Target.v3	/^type TargetFrame(sp: Pointer) #unboxed {$/;"	c
TargetHandlerDest	$VIRGIL_WIZARD/src/engine/v3/V3Target.v3	/^class TargetHandlerDest(is_dummy: bool) { }$/;"	c
TargetHandlerDest	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Target.v3	/^class TargetHandlerDest(is_dummy: bool) {$/;"	c
TargetModule	$VIRGIL_WIZARD/src/engine/v3/V3Target.v3	/^type TargetModule #unboxed { }$/;"	c
TargetModule	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Target.v3	/^type TargetModule(spc_code: X86_64SpcModuleCode) #unboxed { }$/;"	c
TargetOsrInfo	$VIRGIL_WIZARD/src/engine/v3/V3Target.v3	/^type TargetOsrInfo #unboxed { }$/;"	c
TargetOsrInfo	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Target.v3	/^type TargetOsrInfo(spc_entry: Pointer, osr_entries: List<(int, int)>) #unboxed { }$/;"	c
TermColors	$VIRGIL_WIZARD/src/util/TermColors.v3	/^component TermColors {$/;"	n
TestUtil	$VIRGIL_WIZARD/src/util/TestUtil.v3	/^component TestUtil {$/;"	n
Throw	$VIRGIL_WIZARD/src/engine/Execute.v3	/^	case Throw(thrown: Throwable);$/;"	d
Throw	$VIRGIL_WIZARD/src/engine/Host.v3	/^	case Throw(thrown: Throwable);$/;"	d
ThrowResult	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^type ThrowResult {$/;"	c
ThrowResult.Handled	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^	case Handled(at: WasmStack);$/;"	c
ThrowResult.Handled	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^	case Handled(at: WasmStack);$/;"	c
ThrowResult.Unhandled	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^	case Unhandled(thrown: Throwable);$/;"	c
ThrowResult.Unhandled	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^	case Unhandled(thrown: Throwable);$/;"	c
TimeMetric	$VIRGIL_WIZARD/src/engine/Metrics.v3	/^class TimeMetric extends Metric {$/;"	c
TimeoutMonitor	$VIRGIL_WIZARD/src/monitors/TimeoutMonitor.v3	/^class TimeoutMonitor extends Monitor {$/;"	c
TimeoutProbe	$VIRGIL_WIZARD/src/util/ProbeUtil.v3	/^class TimeoutProbe(var count: int) extends Probe {$/;"	c
TotalExceededMaximum	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def TotalExceededMaximum(quantity: string, total: u64, max: u64) {$/;"	m
Trace	$VIRGIL_WIZARD/src/engine/Trace.v3	/^component Trace {$/;"	n
TraceAnchorLoc	$VIRGIL_WIZARD/src/monitors/LoopTraceMonitor.v3	/^type TraceAnchorLoc(module: Module, func: FuncDecl, pc: int) {$/;"	c
TraceAnchorProbe	$VIRGIL_WIZARD/src/monitors/LoopTraceMonitor.v3	/^private class TraceAnchorProbe(trace: TraceBuffer, anchor_id: u30) extends Probe { \/\/ XXX: void probe$/;"	c
TraceBrIfProbe	$VIRGIL_WIZARD/src/monitors/LoopTraceMonitor.v3	/^private class TraceBrIfProbe(trace: TraceBuffer) extends OperandProbe_i_v {$/;"	c
TraceBrOnCastProbe	$VIRGIL_WIZARD/src/monitors/LoopTraceMonitor.v3	/^private class TraceBrOnCastProbe(trace: TraceBuffer, nullable: bool, ht_val: int, success_taken: bool) extends Probe {$/;"	c
TraceBrOnNullProbe	$VIRGIL_WIZARD/src/monitors/LoopTraceMonitor.v3	/^private class TraceBrOnNullProbe(trace: TraceBuffer, null_taken: bool) extends Probe {$/;"	c
TraceBrTableProbe	$VIRGIL_WIZARD/src/monitors/LoopTraceMonitor.v3	/^private class TraceBrTableProbe(trace: TraceBuffer, labels: Array<u31>) extends OperandProbe_i_v {$/;"	c
TraceBuffer	$VIRGIL_WIZARD/src/monitors/LoopTraceMonitor.v3	/^private class TraceBuffer {$/;"	c
TraceBuilder	$VIRGIL_WIZARD/src/engine/Trace.v3	/^class TraceBuilder extends StringBuilder {$/;"	c
TraceEntry	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^private type TraceEntry {$/;"	c
TraceEntry	$VIRGIL_WIZARD/src/monitors/LoopTraceMonitor.v3	/^type TraceEntry #unboxed {$/;"	c
TraceEntry.Anchor	$VIRGIL_WIZARD/src/monitors/LoopTraceMonitor.v3	/^	case Anchor(id: u30);$/;"	c
TraceEntry.Anchor	$VIRGIL_WIZARD/src/monitors/LoopTraceMonitor.v3	/^	case Anchor(id: u30);$/;"	c
TraceEntry.BranchTable	$VIRGIL_WIZARD/src/monitors/LoopTraceMonitor.v3	/^	case BranchTable(which: u30);$/;"	c
TraceEntry.BranchTable	$VIRGIL_WIZARD/src/monitors/LoopTraceMonitor.v3	/^	case BranchTable(which: u30);$/;"	c
TraceEntry.CALL	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^	case CALL(func_id: u32);$/;"	c
TraceEntry.CALL	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^	case CALL(func_id: u32);$/;"	c
TraceEntry.Invalid	$VIRGIL_WIZARD/src/monitors/LoopTraceMonitor.v3	/^	case Invalid;$/;"	c
TraceEntry.Invalid	$VIRGIL_WIZARD/src/monitors/LoopTraceMonitor.v3	/^	case Invalid;$/;"	c
TraceEntry.NotTaken	$VIRGIL_WIZARD/src/monitors/LoopTraceMonitor.v3	/^	case NotTaken;$/;"	c
TraceEntry.NotTaken	$VIRGIL_WIZARD/src/monitors/LoopTraceMonitor.v3	/^	case NotTaken;$/;"	c
TraceEntry.RETURN	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^	case RETURN(func_id: u32);$/;"	c
TraceEntry.RETURN	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^	case RETURN(func_id: u32);$/;"	c
TraceEntry.STEP	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^case STEP(bytecode: u8, offset: u64, cost: u64, wasm_func_trace: List<WasmFuncTrace>);$/;"	c
TraceEntry.STEP	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^case STEP(bytecode: u8, offset: u64, cost: u64, wasm_func_trace: List<WasmFuncTrace>);$/;"	c
TraceEntry.SYSTEM	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^	case SYSTEM(cost: u64, wasm_func_trace: List<WasmFuncTrace>);$/;"	c
TraceEntry.SYSTEM	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^	case SYSTEM(cost: u64, wasm_func_trace: List<WasmFuncTrace>);$/;"	c
TraceEntry.Taken	$VIRGIL_WIZARD/src/monitors/LoopTraceMonitor.v3	/^	case Taken;$/;"	c
TraceEntry.Taken	$VIRGIL_WIZARD/src/monitors/LoopTraceMonitor.v3	/^	case Taken;$/;"	c
TraceIfProbe	$VIRGIL_WIZARD/src/monitors/LoopTraceMonitor.v3	/^private class TraceIfProbe(trace: TraceBuffer) extends OperandProbe_i_v {$/;"	c
TraceInstrProbe	$VIRGIL_WIZARD/src/util/BasicTracing.v3	/^class TraceInstrProbe extends Probe {$/;"	c
TraceInstrumenter	$VIRGIL_WIZARD/src/monitors/LoopTraceMonitor.v3	/^private class TraceInstrumenter extends BytecodeInstrumenter {$/;"	c
TraceMemoryInstrumenter	$VIRGIL_WIZARD/src/util/BasicTracing.v3	/^class TraceMemoryInstrumenter extends BytecodeInstrumenter {$/;"	c
TraceOption	$VIRGIL_WIZARD/src/engine/TraceOptions.v3	/^enum TraceOption(ch: byte, help: string) {$/;"	e
TraceOptions	$VIRGIL_WIZARD/src/engine/TraceOptions.v3	/^component TraceOptions {$/;"	n
TracePointMonitor	$VIRGIL_WIZARD/src/monitors/TracePointMonitor.v3	/^class TracePointMonitor extends Monitor {$/;"	c
TracePointProbe	$VIRGIL_WIZARD/src/util/BasicTracing.v3	/^class TracePointProbe(out: TraceBuilder) extends Probe {$/;"	c
TraceTable	$VIRGIL_WIZARD/src/util/TraceUtil.v3	/^class TraceTable(names: Array<string>) {$/;"	c
TraceUtil	$VIRGIL_WIZARD/src/util/TraceUtil.v3	/^component TraceUtil {$/;"	n
Trap	$VIRGIL_WIZARD/src/engine/Execute.v3	/^	case Trap(reason: TrapReason, trace: bool);$/;"	d
TrapReason	$VIRGIL_WIZARD/src/engine/Trap.v3	/^enum TrapReason {$/;"	e
Type	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	Type(1),$/;"	d
TypeEquiv	$VIRGIL_WIZARD/src/engine/Type.v3	/^enum TypeEquiv {$/;"	e
TypeMismatchIn	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def TypeMismatchIn(quantity: string, expected: ValueType, got: ValueType) {$/;"	m
TypeMismatchInElemInit	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def TypeMismatchInElemInit(expected: ValueType, got: ValueType) {$/;"	m
TypeMismatchInFuncBind	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def TypeMismatchInFuncBind(expected: SigDecl, got: SigDecl) {$/;"	m
TypeMismatchInHandler	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def TypeMismatchInHandler(handler_type: string, i: int, index: int, expected: ValueType, got: ValueType) {$/;"	m
TypeRelation	$VIRGIL_WIZARD/src/engine/Type.v3	/^component TypeRelation {$/;"	n
TypeVar	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^type TypeVar;$/;"	c
U16	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^	U8, U16, U32, U64, F32, F64, V128, REF$/;"	d
U16	$VIRGIL_WIZARD/src/engine/Sidetable.v3	/^	COMPLEX, I8, U8, I16, U16, I32, U32, I64, F32, F64, V128, REF$/;"	d
U32	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^	U8, U16, U32, U64, F32, F64, V128, REF$/;"	d
U32	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	U32,			\/\/ U32$/;"	d
U32	$VIRGIL_WIZARD/src/engine/Sidetable.v3	/^	COMPLEX, I8, U8, I16, U16, I32, U32, I64, F32, F64, V128, REF$/;"	d
U32_div_s	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def U32_div_s(lhs: u32, rhs: u32) -> u32;$/;"	m
U32_le_s	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def U32_le_s(lhs: u32, rhs: u32) -> bool;$/;"	m
U32_lt_s	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def U32_lt_s(lhs: u32, rhs: u32) -> bool;$/;"	m
U64	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^	U8, U16, U32, U64, F32, F64, V128, REF$/;"	d
U8	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^	U8, U16, U32, U64, F32, F64, V128, REF$/;"	d
U8	$VIRGIL_WIZARD/src/engine/Sidetable.v3	/^	COMPLEX, I8, U8, I16, U16, I32, U32, I64, F32, F64, V128, REF$/;"	d
UNDERLINE	$VIRGIL_WIZARD/src/util/Palette.v3	/^	UNDERLINE	(TermColors.UNDERLINE),$/;"	d
UNDERLINE	$VIRGIL_WIZARD/src/util/TermColors.v3	/^	def UNDERLINE	    = "\x1B[4m";$/;"	d
UNIMPLEMENTED	$VIRGIL_WIZARD/src/engine/Trap.v3	/^	UNIMPLEMENTED,$/;"	d
UNINIT	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	UNINIT,$/;"	d
UNINIT_LOCAL	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	UNINIT_LOCAL,$/;"	d
UNKNOWN	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	UNKNOWN,$/;"	d
UNPACKED	$VIRGIL_WIZARD/src/engine/Type.v3	/^enum Packedness { UNPACKED, PACKED_I8, PACKED_I16 }$/;"	d
UNREACHABLE	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def UNREACHABLE() {$/;"	m
UNREACHABLE	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	UNREACHABLE		(0x00, 0x00, "unreachable", imm.NONE, null),$/;"	d
UNREACHABLE	$VIRGIL_WIZARD/src/engine/Trap.v3	/^	UNREACHABLE,$/;"	d
UNREACHABLE	$VIRGIL_WIZARD/src/util/Palette.v3	/^	UNREACHABLE	(TermColors.GRAY1),$/;"	d
UNRELATED	$VIRGIL_WIZARD/src/engine/Type.v3	/^	UNRELATED,$/;"	d
UNTERMINATED_BODY	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	UNTERMINATED_BODY,$/;"	d
USED_CONTINUATION	$VIRGIL_WIZARD/src/engine/Trap.v3	/^	USED_CONTINUATION,$/;"	d
UTIME_NOW	$VIRGIL_WIZARD/src/modules/wasi/x86-64-linux/WspOneModule-x86-64-linux.v3	/^def UTIME_NOW = (1L << 30) - 1L;$/;"	d
UTIME_OMIT	$VIRGIL_WIZARD/src/modules/wasi/x86-64-linux/WspOneModule-x86-64-linux.v3	/^def UTIME_OMIT = (1L << 30) - 2L;$/;"	d
UnexpectedOpcodeInInit	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def UnexpectedOpcodeInInit(prefix: byte, code: u32) {$/;"	m
Unhandled	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^	case Unhandled(thrown: Throwable);$/;"	d
UninitializedLocal	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def UninitializedLocal(index: u32) {$/;"	m
Unknown	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	Unknown(0),$/;"	d
Unknown	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	case Unknown(cmd: string);$/;"	d
UnterminatedFunctionBody	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def UnterminatedFunctionBody() {$/;"	m
UnterminatedInitExpr	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def UnterminatedInitExpr() {$/;"	m
V128	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^	U8, U16, U32, U64, F32, F64, V128, REF$/;"	d
V128	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	V128		(0x7B, -5),$/;"	d
V128	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case V128(low: u64, high: u64);$/;"	d
V128	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def V128 = [ImmKind.V128];$/;"	d
V128	$VIRGIL_WIZARD/src/engine/Sidetable.v3	/^	COMPLEX, I8, U8, I16, U16, I32, U32, I64, F32, F64, V128, REF$/;"	d
V128	$VIRGIL_WIZARD/src/engine/Type.v3	/^	case V128;						\/\/ 128-bit vector$/;"	d
V128	$VIRGIL_WIZARD/src/engine/Value.v3	/^	case V128(low: u64, high: u64);$/;"	d
V128_AND	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	V128_AND			(0xFD, 78, "v128.and", imm.NONE, sig.ss_s),$/;"	d
V128_AND	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def V128_AND = do_ss_s_x2(_, _, u64.&);$/;"	d
V128_ANDNOT	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	V128_ANDNOT			(0xFD, 79, "v128.andnot", imm.NONE, sig.ss_s),$/;"	d
V128_ANDNOT	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def V128_ANDNOT(a: (u64, u64), b: (u64, u64)) -> (u64, u64) {$/;"	f
V128_ANYTRUE	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	V128_ANYTRUE			(0xFD, 83, "v128.anytrue", imm.NONE, sig.s_i),$/;"	d
V128_ANYTRUE	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def V128_ANYTRUE(a: (u64, u64)) -> bool {$/;"	f
V128_BITSELECT	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	V128_BITSELECT			(0xFD, 82, "v128.bitselect", imm.NONE, sig.sss_s),$/;"	d
V128_BITSELECT	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def V128_BITSELECT(a: (u64, u64), b: (u64, u64), c: (u64, u64)) -> (u64, u64) {$/;"	f
V128_CONST	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	V128_CONST			(0xFD, 12, "v128.const", imm.V128, sig.v_s),$/;"	d
V128_F32X4_ABS	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def V128_F32X4_ABS = do_f_f(_, float.abs);$/;"	d
V128_F32X4_EQ	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def V128_F32X4_EQ = do_ff_z(_, _, float.==);$/;"	d
V128_F32X4_LE	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def V128_F32X4_LE = do_ff_z(_, _, float.<=);$/;"	d
V128_F32X4_LT	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def V128_F32X4_LT = do_ff_z(_, _, float.<);$/;"	d
V128_F32X4_MADD	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def V128_F32X4_MADD = do_sss_s_x4(_, _, _, F32_MADD);$/;"	d
V128_F32X4_MAX	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def V128_F32X4_MAX = do_ff_f(_, _, V3Eval.F32_MAX);$/;"	d
V128_F32X4_MIN	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def V128_F32X4_MIN = do_ff_f(_, _, V3Eval.F32_MIN);$/;"	d
V128_F32X4_NE	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def V128_F32X4_NE = do_ff_z(_, _, float.!=);$/;"	d
V128_F32X4_NMADD	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def V128_F32X4_NMADD = do_sss_s_x4(_, _, _, F32_NMADD);$/;"	d
V128_F32X4_PMAX	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def V128_F32X4_PMAX = do_ff_f(_, _, F32X4_PMAX);$/;"	d
V128_F32X4_PMIN	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def V128_F32X4_PMIN = do_ff_f(_, _, F32X4_PMIN);$/;"	d
V128_F32_CEIL	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def V128_F32_CEIL = do_f_f(_, V3Eval.F32_CEIL);$/;"	d
V128_F32_CONVERT_I32_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def V128_F32_CONVERT_I32_S = do_i_f(_, float.roundi<i32>);$/;"	d
V128_F32_CONVERT_I32_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def V128_F32_CONVERT_I32_U = do_u_f(_, float.roundi<u32>);$/;"	d
V128_F32_DEMOTE_F64	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def V128_F32_DEMOTE_F64 = do_d_f(_, float.roundd);$/;"	d
V128_F32_FLOOR	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def V128_F32_FLOOR = do_f_f(_, V3Eval.F32_FLOOR);$/;"	d
V128_F32_NEAREST	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def V128_F32_NEAREST = do_f_f(_, float.round);$/;"	d
V128_F32_TRUNC	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def V128_F32_TRUNC = do_f_f(_, V3Eval.F32_TRUNC);$/;"	d
V128_F64X2_ABS	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def V128_F64X2_ABS = do_d_d(_, double.abs);$/;"	d
V128_F64X2_EQ	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def V128_F64X2_EQ = do_dd_z(_, _, double.==);$/;"	d
V128_F64X2_LE	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def V128_F64X2_LE = do_dd_z(_, _, double.<=);$/;"	d
V128_F64X2_LT	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def V128_F64X2_LT = do_dd_z(_, _, double.<);$/;"	d
V128_F64X2_MADD	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def V128_F64X2_MADD = do_sss_s_x2(_, _, _, F64_MADD);$/;"	d
V128_F64X2_MAX	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def V128_F64X2_MAX = do_dd_d(_, _, V3Eval.F64_MAX);$/;"	d
V128_F64X2_MIN	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def V128_F64X2_MIN = do_dd_d(_, _, V3Eval.F64_MIN);$/;"	d
V128_F64X2_NE	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def V128_F64X2_NE = do_dd_z(_, _, double.!=);$/;"	d
V128_F64X2_NMADD	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def V128_F64X2_NMADD = do_sss_s_x2(_, _, _, F64_NMADD);$/;"	d
V128_F64X2_PMAX	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def V128_F64X2_PMAX = do_dd_d(_, _, F64X2_PMAX);$/;"	d
V128_F64X2_PMIN	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def V128_F64X2_PMIN = do_dd_d(_, _, F64X2_PMIN);$/;"	d
V128_F64_CEIL	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def V128_F64_CEIL = do_d_d(_, V3Eval.F64_CEIL);$/;"	d
V128_F64_CONVERT_LOW_I32_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def V128_F64_CONVERT_LOW_I32_S = do_i_d(_, double.roundi<i32>);$/;"	d
V128_F64_CONVERT_LOW_I32_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def V128_F64_CONVERT_LOW_I32_U = do_u_d(_, double.roundi<u32>);$/;"	d
V128_F64_FLOOR	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def V128_F64_FLOOR = do_d_d(_, V3Eval.F64_FLOOR);$/;"	d
V128_F64_NEAREST	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def V128_F64_NEAREST = do_d_d(_, double.round);$/;"	d
V128_F64_PROMOTE_LOW_F32	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def V128_F64_PROMOTE_LOW_F32 = do_f_d(_, double.!<float>);$/;"	d
V128_F64_TRUNC	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def V128_F64_TRUNC = do_d_d(_, V3Eval.F64_TRUNC);$/;"	d
V128_I16X8_EQ	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def V128_I16X8_EQ = do_uu_z_16(_, _, u16.==);$/;"	d
V128_I16X8_EXTADD_I8X16_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def V128_I16X8_EXTADD_I8X16_S = do_ii_i_8_16(_, _, I16X8_EXTADD_I8X16_S);$/;"	d
V128_I16X8_LE_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def V128_I16X8_LE_S = do_ii_z_16(_, _, i16.<=);$/;"	d
V128_I16X8_LE_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def V128_I16X8_LE_U = do_uu_z_16(_, _, u16.<=);$/;"	d
V128_I16X8_LT_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def V128_I16X8_LT_S = do_ii_z_16(_, _, i16.<);$/;"	d
V128_I16X8_LT_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def V128_I16X8_LT_U = do_uu_z_16(_, _, u16.<);$/;"	d
V128_I16X8_NE	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def V128_I16X8_NE = do_uu_z_16(_, _, u16.!=);$/;"	d
V128_I16X8_SHL	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def V128_I16X8_SHL = do_ii_i_16(_, _, I16_SHL);$/;"	d
V128_I16X8_SHR_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def V128_I16X8_SHR_S = do_ii_i_16(_, _, I16_SHR_S);$/;"	d
V128_I16_ABS	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def V128_I16_ABS = do_i_i_16(_, I16_ABS_S);$/;"	d
V128_I16_ADD_SAT_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def V128_I16_ADD_SAT_S = do_ii_i_16(_, _, I16_ADD_SAT_S);$/;"	d
V128_I16_MAX_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def V128_I16_MAX_S = do_ii_i_16(_, _, I16_MAX_S);$/;"	d
V128_I16_MIN_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def V128_I16_MIN_S = do_ii_i_16(_, _, I16_MIN_S);$/;"	d
V128_I16_Q15_MUL_SAT_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def V128_I16_Q15_MUL_SAT_S = do_ii_i_16(_, _, I16_Q15_MUL_SAT_S);$/;"	d
V128_I16_SUB_SAT_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def V128_I16_SUB_SAT_S = do_ii_i_16(_, _, I16_SUB_SAT_S);$/;"	d
V128_I32X4_EQ	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def V128_I32X4_EQ = do_uu_z(_, _, u32.==);$/;"	d
V128_I32X4_EXTADD_16X8_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def V128_I32X4_EXTADD_16X8_S = do_ii_i_16_32(_, _, I32X4_EXTADD_I16X8_S);$/;"	d
V128_I32X4_LE_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def V128_I32X4_LE_S = do_ii_z(_, _, i32.<=);$/;"	d
V128_I32X4_LE_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def V128_I32X4_LE_U = do_uu_z(_, _, u32.<=);$/;"	d
V128_I32X4_LT_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def V128_I32X4_LT_S = do_ii_z(_, _, i32.<);$/;"	d
V128_I32X4_LT_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def V128_I32X4_LT_U = do_uu_z(_, _, u32.<);$/;"	d
V128_I32X4_NE	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def V128_I32X4_NE = do_uu_z(_, _, u32.!=);$/;"	d
V128_I32X4_SHL	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def V128_I32X4_SHL = do_ii_i(_, _, V3Eval.I32_SHL);$/;"	d
V128_I32X4_SHR_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def V128_I32X4_SHR_S = do_ii_i(_, _, V3Eval.I32_SHR_S);$/;"	d
V128_I32X4_SHR_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def V128_I32X4_SHR_U = do_ii_i(_, _, V3Eval.I32_SHR_U);$/;"	d
V128_I32_ABS	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def V128_I32_ABS = do_i_i(_, I32_ABS_S);$/;"	d
V128_I32_MAX_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def V128_I32_MAX_S = do_ii_i(_, _, I32_MAX_S);$/;"	d
V128_I32_MIN_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def V128_I32_MIN_S = do_ii_i(_, _, I32_MIN_S);$/;"	d
V128_I32_TRUNC_F32_SAT_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def V128_I32_TRUNC_F32_SAT_S = do_f_i(_, I32_TRUNC_F32_SAT_S);$/;"	d
V128_I32_TRUNC_F32_SAT_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def V128_I32_TRUNC_F32_SAT_U = do_f_u(_, I32_TRUNC_F32_SAT_U);$/;"	d
V128_I32_TRUNC_F64_SAT_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def V128_I32_TRUNC_F64_SAT_S = do_d_i(_, I32_TRUNC_F64_SAT_S);$/;"	d
V128_I32_TRUNC_F64_SAT_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def V128_I32_TRUNC_F64_SAT_U = do_d_u(_, I32_TRUNC_F64_SAT_U);$/;"	d
V128_I64X2_EQ	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def V128_I64X2_EQ = do_ww_z(_, _, u64.==);$/;"	d
V128_I64X2_LE_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def V128_I64X2_LE_S = do_ll_z(_, _, i64.<=);$/;"	d
V128_I64X2_LT_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def V128_I64X2_LT_S = do_ll_z(_, _, i64.<);$/;"	d
V128_I64X2_NE	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def V128_I64X2_NE = do_ww_z(_, _, u64.!=);$/;"	d
V128_I64X2_SHR_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def V128_I64X2_SHR_S = do_ll_l(_, _, V3Eval.I64_SHR_S);$/;"	d
V128_I64_ABS	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def V128_I64_ABS = do_l_l(_, I64_ABS_S);$/;"	d
V128_I8X16_EQ	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def V128_I8X16_EQ = do_uu_z_8(_, _, u8.==);$/;"	d
V128_I8X16_LE_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def V128_I8X16_LE_S = do_ii_z_8(_, _, i8.<=);$/;"	d
V128_I8X16_LE_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def V128_I8X16_LE_U = do_uu_z_8(_, _, u8.<=);$/;"	d
V128_I8X16_LT_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def V128_I8X16_LT_S = do_ii_z_8(_, _, i8.<);$/;"	d
V128_I8X16_LT_U	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def V128_I8X16_LT_U = do_uu_z_8(_, _, u8.<);$/;"	d
V128_I8X16_NE	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def V128_I8X16_NE = do_uu_z_8(_, _, u8.!=);$/;"	d
V128_I8X16_SHL	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def V128_I8X16_SHL = do_ii_i_8(_, _, I8_SHL);$/;"	d
V128_I8X16_SHR_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def V128_I8X16_SHR_S = do_ii_i_8(_, _, I8_SHR_S);$/;"	d
V128_I8_ABS	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def V128_I8_ABS = do_i_i_8(_, I8_ABS_S);$/;"	d
V128_I8_ADD_SAT_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def V128_I8_ADD_SAT_S = do_ii_i_8(_, _, I8_ADD_SAT_S);$/;"	d
V128_I8_MAX_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def V128_I8_MAX_S = do_ii_i_8(_, _, I8_MAX_S);$/;"	d
V128_I8_MIN_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def V128_I8_MIN_S = do_ii_i_8(_, _, I8_MIN_S);$/;"	d
V128_I8_SUB_SAT_S	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def V128_I8_SUB_SAT_S = do_ii_i_8(_, _, I8_SUB_SAT_S);$/;"	d
V128_LOAD	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	V128_LOAD			(0xFD, 0, "v128.load", imm.MEMARG, sig.i_s),$/;"	d
V128_LOAD_16X4_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	V128_LOAD_16X4_S		(0xFD, 3, "v128.load_16x4_s", imm.MEMARG, sig.i_s),$/;"	d
V128_LOAD_16X4_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	V128_LOAD_16X4_U		(0xFD, 4, "v128.load_16x4_u", imm.MEMARG, sig.i_s),$/;"	d
V128_LOAD_16_LANE	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	V128_LOAD_16_LANE		(0xFD, 85, "v128.load_16_lane", imm.MEMARG_LANE, sig.is_s),$/;"	d
V128_LOAD_16_SPLAT	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	V128_LOAD_16_SPLAT		(0xFD, 8, "v128.load_16_splat", imm.MEMARG, sig.i_s),$/;"	d
V128_LOAD_32X2_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	V128_LOAD_32X2_S		(0xFD, 5, "v128.load_32x2_s", imm.MEMARG, sig.i_s),$/;"	d
V128_LOAD_32X2_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	V128_LOAD_32X2_U		(0xFD, 6, "v128.load_32x2_u", imm.MEMARG, sig.i_s),$/;"	d
V128_LOAD_32_LANE	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	V128_LOAD_32_LANE		(0xFD, 86, "v128.load_32_lane", imm.MEMARG_LANE, sig.is_s),$/;"	d
V128_LOAD_32_SPLAT	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	V128_LOAD_32_SPLAT		(0xFD, 9, "v128.load_32_splat", imm.MEMARG, sig.i_s),$/;"	d
V128_LOAD_32_ZERO	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	V128_LOAD_32_ZERO		(0xFD, 92, "v128.load_32_zero", imm.MEMARG, sig.i_s),$/;"	d
V128_LOAD_64_LANE	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	V128_LOAD_64_LANE		(0xFD, 87, "v128.load_64_lane", imm.MEMARG_LANE, sig.is_s),$/;"	d
V128_LOAD_64_SPLAT	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	V128_LOAD_64_SPLAT		(0xFD, 10, "v128.load_64_splat", imm.MEMARG, sig.i_s),$/;"	d
V128_LOAD_64_ZERO	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	V128_LOAD_64_ZERO		(0xFD, 93, "v128.load_64_zero", imm.MEMARG, sig.i_s),$/;"	d
V128_LOAD_8X8_S	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	V128_LOAD_8X8_S			(0xFD, 1, "v128.load_8x8_s", imm.MEMARG, sig.i_s),$/;"	d
V128_LOAD_8X8_U	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	V128_LOAD_8X8_U			(0xFD, 2, "v128.load_8x8_u", imm.MEMARG, sig.i_s),$/;"	d
V128_LOAD_8_LANE	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	V128_LOAD_8_LANE		(0xFD, 84, "v128.load_8_lane", imm.MEMARG_LANE, sig.is_s),$/;"	d
V128_LOAD_8_SPLAT	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	V128_LOAD_8_SPLAT		(0xFD, 7, "v128.load_8_splat", imm.MEMARG, sig.i_s),$/;"	d
V128_NOT	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	V128_NOT			(0xFD, 77, "v128.not", imm.NONE, sig.s_s),$/;"	d
V128_NOT	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def V128_NOT = do_ss_s_x2(_, (u64.max, u64.max), u64.^);$/;"	d
V128_OR	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	V128_OR				(0xFD, 80, "v128.or", imm.NONE, sig.ss_s),$/;"	d
V128_OR	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def V128_OR = do_ss_s_x2(_, _, u64.|);$/;"	d
V128_STORE	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	V128_STORE			(0xFD, 11, "v128.store", imm.MEMARG, sig.is_v),$/;"	d
V128_STORE_16_LANE	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	V128_STORE_16_LANE		(0xFD, 89, "v128.store_16_lane", imm.MEMARG_LANE, sig.is_v),$/;"	d
V128_STORE_32_LANE	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	V128_STORE_32_LANE		(0xFD, 90, "v128.store_32_lane", imm.MEMARG_LANE, sig.is_v),$/;"	d
V128_STORE_64_LANE	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	V128_STORE_64_LANE		(0xFD, 91, "v128.store_64_lane", imm.MEMARG_LANE, sig.is_v),$/;"	d
V128_STORE_8_LANE	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	V128_STORE_8_LANE		(0xFD, 88, "v128.store_8_lane", imm.MEMARG_LANE, sig.is_v),$/;"	d
V128_XOR	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	V128_XOR			(0xFD, 81, "v128.xor", imm.NONE, sig.ss_s),$/;"	d
V128_XOR	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def V128_XOR = do_ss_s_x2(_, _, u64.^);$/;"	d
V3Eval	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^component V3Eval {$/;"	n
V3Frame	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^class V3Frame {$/;"	c
V3FrameAccessor	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^class V3FrameAccessor(frame: V3Frame) extends FrameAccessor {$/;"	c
V3FrameWriter	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^private class V3FrameWriter extends FrameWriter {$/;"	c
V3HostFrame	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^private class V3HostFrame(prev: V3Frame) extends HostFrame {$/;"	c
V3Interpreter	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^class V3Interpreter extends WasmStack {$/;"	c
V3InterpreterOnlyStrategy	$VIRGIL_WIZARD/src/engine/v3/V3Target.v3	/^class V3InterpreterOnlyStrategy extends ExecutionStrategy {$/;"	c
V3Memory	$VIRGIL_WIZARD/src/engine/v3/V3Memory.v3	/^class V3Memory extends Memory {$/;"	c
V3Offsets	$VIRGIL_WIZARD/src/engine/x86-64/V3Offsets.v3	/^class V3Offsets {$/;"	c
V3_PARAM_GPRS	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Target.v3	/^	def V3_PARAM_GPRS = [X86_64Regs.RDI, X86_64Regs.RSI, X86_64Regs.RDX, X86_64Regs.RCX, X86_64Regs.R8, X86_64Regs.R9]; 		\/\/ System-V$/;"	d
V3_RET_GPRS	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Target.v3	/^	def V3_RET_GPRS = [X86_64Regs.RAX, X86_64Regs.RDX, X86_64Regs.RCX, X86_64Regs.RSI]; 			\/\/ System-V + 2$/;"	d
V3_SPC_ENTRY_FUNC	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^def V3_SPC_ENTRY_FUNC = X86_64PreGenFunc<(WasmFunction, Pointer, Pointer), Throwable>.new("v3-spc-entry", null, genSpcEntryFunc);$/;"	d
V3_STACK_RESUME_FUNC	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^def V3_STACK_RESUME_FUNC = X86_64PreGenFunc<(X86_64Stack, X86_64Stack), Throwable>.new("v3-stack-resume", X86_64SimpleStub.new("v3-stack-resume", 0), genV3StackResumeStub);$/;"	d
VALID	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	VALID,$/;"	d
VALTS	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def VALTS = [ImmKind.VALUE_TYPES];$/;"	d
VALUE	$VIRGIL_WIZARD/src/util/Palette.v3	/^	VALUE		(TermColors.MAGENTA),$/;"	d
VALUE_TYPES	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	VALUE_TYPES,		\/\/ VALTs$/;"	d
VERSION	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	VERSION,$/;"	d
VERSION	$VIRGIL_WIZARD/src/wizeng.main.v3	/^	def VERSION = group.newFlag("version", printVersion, "Print build version.");$/;"	d
VERY_HIGH	$VIRGIL_WIZARD/src/util/Palette.v3	/^	VERY_HIGH	(TermColors.MAGENTA),$/;"	d
VERY_LOW	$VIRGIL_WIZARD/src/util/Palette.v3	/^	VERY_LOW	(TermColors.LIGHTGRAY),$/;"	d
Val	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	case Val(v: Value);$/;"	d
Value	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^type Value;$/;"	c
Value	$VIRGIL_WIZARD/src/engine/Execute.v3	/^	case Value(vals: Array<Value>);$/;"	d
Value	$VIRGIL_WIZARD/src/engine/Value.v3	/^type Value {$/;"	c
Value.F32	$VIRGIL_WIZARD/src/engine/Value.v3	/^	case F32(bits: u32);$/;"	c
Value.F32	$VIRGIL_WIZARD/src/engine/Value.v3	/^	case F32(bits: u32);$/;"	c
Value.F64	$VIRGIL_WIZARD/src/engine/Value.v3	/^	case F64(bits: u64);$/;"	c
Value.F64	$VIRGIL_WIZARD/src/engine/Value.v3	/^	case F64(bits: u64);$/;"	c
Value.I31	$VIRGIL_WIZARD/src/engine/Value.v3	/^	case I31(val: u31);$/;"	c
Value.I31	$VIRGIL_WIZARD/src/engine/Value.v3	/^	case I31(val: u31);$/;"	c
Value.I32	$VIRGIL_WIZARD/src/engine/Value.v3	/^	case I32(val: u32);$/;"	c
Value.I32	$VIRGIL_WIZARD/src/engine/Value.v3	/^	case I32(val: u32);$/;"	c
Value.I64	$VIRGIL_WIZARD/src/engine/Value.v3	/^	case I64(val: u64);$/;"	c
Value.I64	$VIRGIL_WIZARD/src/engine/Value.v3	/^	case I64(val: u64);$/;"	c
Value.Ref	$VIRGIL_WIZARD/src/engine/Value.v3	/^	case Ref(val: Object);$/;"	c
Value.Ref	$VIRGIL_WIZARD/src/engine/Value.v3	/^	case Ref(val: Object);$/;"	c
Value.V128	$VIRGIL_WIZARD/src/engine/Value.v3	/^	case V128(low: u64, high: u64);$/;"	c
Value.V128	$VIRGIL_WIZARD/src/engine/Value.v3	/^	case V128(low: u64, high: u64);$/;"	c
Value0	$VIRGIL_WIZARD/src/engine/Host.v3	/^	case Value0;$/;"	d
Value1	$VIRGIL_WIZARD/src/engine/Host.v3	/^	case Value1(val: Value);$/;"	d
ValueKind	$VIRGIL_WIZARD/src/engine/Value.v3	/^enum ValueKind(code: byte) {$/;"	e
ValueN	$VIRGIL_WIZARD/src/engine/Host.v3	/^	case ValueN(vals: Array<Value>);$/;"	d
ValueType	$VIRGIL_WIZARD/src/engine/Type.v3	/^type ValueType {$/;"	c
ValueType.BOTTOM	$VIRGIL_WIZARD/src/engine/Type.v3	/^	case BOTTOM;						\/\/ Bottom type$/;"	c
ValueType.BOTTOM	$VIRGIL_WIZARD/src/engine/Type.v3	/^	case BOTTOM;						\/\/ Bottom type$/;"	c
ValueType.F32	$VIRGIL_WIZARD/src/engine/Type.v3	/^	case F32;						\/\/ 32-bit float$/;"	c
ValueType.F32	$VIRGIL_WIZARD/src/engine/Type.v3	/^	case F32;						\/\/ 32-bit float$/;"	c
ValueType.F64	$VIRGIL_WIZARD/src/engine/Type.v3	/^	case F64;						\/\/ 64-bit float$/;"	c
ValueType.F64	$VIRGIL_WIZARD/src/engine/Type.v3	/^	case F64;						\/\/ 64-bit float$/;"	c
ValueType.Host	$VIRGIL_WIZARD/src/engine/Type.v3	/^	case Host(host: HostType);				\/\/ host-defined types$/;"	c
ValueType.Host	$VIRGIL_WIZARD/src/engine/Type.v3	/^	case Host(host: HostType);				\/\/ host-defined types$/;"	c
ValueType.I32	$VIRGIL_WIZARD/src/engine/Type.v3	/^	case I32;						\/\/ 32-bit integer$/;"	c
ValueType.I32	$VIRGIL_WIZARD/src/engine/Type.v3	/^	case I32;						\/\/ 32-bit integer$/;"	c
ValueType.I64	$VIRGIL_WIZARD/src/engine/Type.v3	/^	case I64;						\/\/ 64-bit integer$/;"	c
ValueType.I64	$VIRGIL_WIZARD/src/engine/Type.v3	/^	case I64;						\/\/ 64-bit integer$/;"	c
ValueType.Ref	$VIRGIL_WIZARD/src/engine/Type.v3	/^	case Ref(nullable: bool, heap: HeapType);$/;"	c
ValueType.Ref	$VIRGIL_WIZARD/src/engine/Type.v3	/^	case Ref(nullable: bool, heap: HeapType);$/;"	c
ValueType.V128	$VIRGIL_WIZARD/src/engine/Type.v3	/^	case V128;						\/\/ 128-bit vector$/;"	c
ValueType.V128	$VIRGIL_WIZARD/src/engine/Type.v3	/^	case V128;						\/\/ 128-bit vector$/;"	c
ValueTypeCode	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^type ValueTypeCode(code: i8, index: i32) #unboxed {$/;"	c
ValueTypes	$VIRGIL_WIZARD/src/engine/Type.v3	/^component ValueTypes {$/;"	n
Values	$VIRGIL_WIZARD/src/engine/Value.v3	/^component Values {$/;"	n
Version	$VIRGIL_WIZARD/src/engine/Version.v3	/^component Version {$/;"	n
VspHelper	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^class VspHelper(vsp: X86_64Gpr, valuerep: Tagging, depth: int) {$/;"	c
WARN	$VIRGIL_WIZARD/src/util/Palette.v3	/^	WARN		(""),$/;"	d
WASM_3_0	$VIRGIL_WIZARD/src/engine/Extension.v3	/^	WASM_3_0("wasm-3.0", "All Wasm 3.0 features"),$/;"	d
WASM_MAGIC	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	def WASM_MAGIC = 0x6d736100u;$/;"	d
WASM_PAGE_SIZE	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	def WASM_PAGE_SIZE = 65536u31;$/;"	d
WASM_VERSION	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	def WASM_VERSION = 0x01u;$/;"	d
WHAMM_PROBE	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	WHAMM_PROBE(0x1D, "<whamm-probe>"),$/;"	d
WHAMM_PROBE_ERROR	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	WHAMM_PROBE_ERROR$/;"	d
WHENCE_CUR	$VIRGIL_WIZARD/src/modules/wasi/x86-64-linux/WspOneModule-x86-64-linux.v3	/^def WHENCE_CUR = 1;$/;"	d
WHENCE_END	$VIRGIL_WIZARD/src/modules/wasi/x86-64-linux/WspOneModule-x86-64-linux.v3	/^def WHENCE_END = 2;$/;"	d
WHENCE_SET	$VIRGIL_WIZARD/src/modules/wasi/x86-64-linux/WspOneModule-x86-64-linux.v3	/^def WHENCE_SET = 0;$/;"	d
WHITE	$VIRGIL_WIZARD/src/util/TermColors.v3	/^	def WHITE	= "\x1B[1;37m";$/;"	d
WIZENG	$VIRGIL_WIZARD/src/engine/Extension.v3	/^	WIZENG("wizeng", "Wizard-specific engine capabilities"),$/;"	d
WaliErrno	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^enum WaliErrno(code: byte) {$/;"	e
WasiFd	$VIRGIL_WIZARD/src/modules/wasi/WasiFdMap.v3	/^class WasiFd(sysfd: int, ftype: wasi_filetype, preopen: bool, path: string) {$/;"	c
WasiFdMap	$VIRGIL_WIZARD/src/modules/wasi/WasiFdMap.v3	/^class WasiFdMap(max: int) {$/;"	c
WasiHostAdapter	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^class WasiHostAdapter<P, R>(f: WasiInstance -> P -> R, adapter: (P -> R) -> HostFunc) extends HostAdapter_of<WasiInstance> {$/;"	c
WasiOptions	$VIRGIL_WIZARD/src/modules/wasi/WasiOptions.v3	/^component WasiOptions {$/;"	n
WasiPathUtil	$VIRGIL_WIZARD/src/modules/wasi/x86-64-linux/WspOnePathResolver-x86-64-linux.v3	/^component WasiPathUtil {$/;"	n
Wasi_dirent	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^layout Wasi_dirent {$/;"	l
Wasi_filestat	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^layout Wasi_filestat {$/;"	l
Wasi_filetype	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^enum Wasi_filetype {$/;"	e
Wasi_iovec	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^layout Wasi_iovec {$/;"	l
Wasm	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^	case Wasm(func: WasmFunction, pc: int, frame: TargetFrame);$/;"	d
WasmAsm	$VIRGIL_WIZARD/src/util/WasmAsm.v3	/^class WasmAsm extends Vector<byte> {$/;"	c
WasmError	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^enum WasmError {$/;"	e
WasmEvent	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^type WasmEvent {$/;"	c
WasmEvent.FuncEntry	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^	case FuncEntry(idx: int, func_name: string, params: Array<Value>);$/;"	c
WasmEvent.FuncEntry	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^	case FuncEntry(idx: int, func_name: string, params: Array<Value>);$/;"	c
WasmEvent.FuncEntryTable	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^	case FuncEntryTable(idx: int, table_idx: int, table_name: string, params: Array<Value>);$/;"	c
WasmEvent.FuncEntryTable	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^	case FuncEntryTable(idx: int, table_idx: int, table_name: string, params: Array<Value>);$/;"	c
WasmEvent.GlobalGet	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^	case GlobalGet(idx: int, value: Value);$/;"	c
WasmEvent.GlobalGet	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^	case GlobalGet(idx: int, value: Value);$/;"	c
WasmEvent.ImportCall	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^	case ImportCall(idx: int);$/;"	c
WasmEvent.ImportCall	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^	case ImportCall(idx: int);$/;"	c
WasmEvent.ImportGlobal	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^	case ImportGlobal(idx: int, initial: Value);$/;"	c
WasmEvent.ImportGlobal	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^	case ImportGlobal(idx: int, initial: Value);$/;"	c
WasmEvent.ImportReturn	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^	case ImportReturn(idx: int, results: Array<Value>);$/;"	c
WasmEvent.ImportReturn	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^	case ImportReturn(idx: int, results: Array<Value>);$/;"	c
WasmEvent.Load	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^	case Load(idx: int, offset: u64, data: Array<u8>);$/;"	c
WasmEvent.Load	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^	case Load(idx: int, offset: u64, data: Array<u8>);$/;"	c
WasmEvent.MemGrow	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^	case MemGrow(idx: int, amount: int);$/;"	c
WasmEvent.MemGrow	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^	case MemGrow(idx: int, amount: int);$/;"	c
WasmEvent.TableGet	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^	case TableGet(table_idx: int, table_name: string, entry_idx: int, func_idx: int, func_name: string);$/;"	c
WasmEvent.TableGet	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^	case TableGet(table_idx: int, table_name: string, entry_idx: int, func_idx: int, func_name: string);$/;"	c
WasmEvent.TableGrow	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^	case TableGrow(table_idx: int, table_name: string, amount: u32);$/;"	c
WasmEvent.TableGrow	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^	case TableGrow(table_idx: int, table_name: string, amount: u32);$/;"	c
WasmFuncTrace	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^private type WasmFuncTrace(func_id: int, instr_count: u64, is_start: bool) {$/;"	c
WasmFunction	$VIRGIL_WIZARD/src/engine/Instance.v3	/^class WasmFunction(instance: Instance, decl: FuncDecl) extends Function {$/;"	c
WasmFunction_decl	$VIRGIL_WIZARD/src/engine/x86-64/V3Offsets.v3	/^	def WasmFunction_decl		= int.view(Pointer.atField(wf.decl) - Pointer.atObject(wf));$/;"	d
WasmFunction_instance	$VIRGIL_WIZARD/src/engine/x86-64/V3Offsets.v3	/^	def WasmFunction_instance	= int.view(Pointer.atField(wf.instance) - Pointer.atObject(wf));$/;"	d
WasmFunction_typeId	$VIRGIL_WIZARD/src/engine/x86-64/V3Offsets.v3	/^	def WasmFunction_typeId		= Pointer.atObject(wf).load<int>();$/;"	d
WasmMode	$VIRGIL_WIZARD/src/WasmMode.v3	/^component WasmMode {$/;"	n
WasmParser	$VIRGIL_WIZARD/src/engine/WasmParser.v3	/^class WasmParser(extensions: Extension.set, limits: Limits, module: Module,$/;"	c
WasmStack	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^class WasmStack extends ExecStack {$/;"	c
Whamm	$VIRGIL_WIZARD/src/util/Whamm.v3	/^component Whamm {$/;"	n
WhammArg	$VIRGIL_WIZARD/src/util/Whamm.v3	/^type WhammArg {$/;"	c
WhammArg.FrameAccessor	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	case FrameAccessor;$/;"	c
WhammArg.FrameAccessor	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	case FrameAccessor;$/;"	c
WhammArg.Local	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	case Local(t: ValueType, i: int);$/;"	c
WhammArg.Local	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	case Local(t: ValueType, i: int);$/;"	c
WhammArg.Null	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	case Null;$/;"	c
WhammArg.Null	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	case Null;$/;"	c
WhammArg.Operand	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	case Operand(t: ValueType, i: int);$/;"	c
WhammArg.Operand	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	case Operand(t: ValueType, i: int);$/;"	c
WhammArg.Val	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	case Val(v: Value);$/;"	c
WhammArg.Val	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	case Val(v: Value);$/;"	c
WhammEvent	$VIRGIL_WIZARD/src/util/Whamm.v3	/^type WhammEvent {$/;"	c
WhammEvent.AllOpcodes	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	case AllOpcodes;$/;"	c
WhammEvent.AllOpcodes	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	case AllOpcodes;$/;"	c
WhammEvent.BlockEnd	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	case BlockEnd;$/;"	c
WhammEvent.BlockEnd	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	case BlockEnd;$/;"	c
WhammEvent.BlockStart	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	case BlockStart;$/;"	c
WhammEvent.BlockStart	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	case BlockStart;$/;"	c
WhammEvent.FuncEntry	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	case FuncEntry;$/;"	c
WhammEvent.FuncEntry	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	case FuncEntry;$/;"	c
WhammEvent.FuncExit	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	case FuncExit;$/;"	c
WhammEvent.FuncExit	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	case FuncExit;$/;"	c
WhammEvent.Null	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	case Null;$/;"	c
WhammEvent.Null	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	case Null;$/;"	c
WhammEvent.Opcode	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	case Opcode(op: Opcode);$/;"	c
WhammEvent.Opcode	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	case Opcode(op: Opcode);$/;"	c
WhammInstance	$VIRGIL_WIZARD/src/util/Whamm.v3	/^class WhammInstance {$/;"	c
WhammInstrumenter	$VIRGIL_WIZARD/src/monitors/WhammMonitor.v3	/^private class WhammInstrumenter(wm: WhammMonitor, wi: WhammInstance, err: ErrorGen) {$/;"	c
WhammMonitor	$VIRGIL_WIZARD/src/monitors/WhammMonitor.v3	/^class WhammMonitor(named_modules: Array<NamedModule>) extends Monitor {$/;"	c
WhammParam	$VIRGIL_WIZARD/src/util/Whamm.v3	/^type WhammParam {$/;"	c
WhammParam.Arg	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	case Arg(orig: Token, i: u31);$/;"	c
WhammParam.Arg	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	case Arg(orig: Token, i: u31);$/;"	c
WhammParam.AtFuncEnd	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	case AtFuncEnd;$/;"	c
WhammParam.AtFuncEnd	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	case AtFuncEnd;$/;"	c
WhammParam.Call	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	case Call(target: Token, params: Array<WhammParam>);$/;"	c
WhammParam.Call	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	case Call(target: Token, params: Array<WhammParam>);$/;"	c
WhammParam.DynamicLoc	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	case DynamicLoc;$/;"	c
WhammParam.DynamicLoc	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	case DynamicLoc;$/;"	c
WhammParam.Fname	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	case Fname;$/;"	c
WhammParam.Fname	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	case Fname;$/;"	c
WhammParam.FrameAccessor	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	case FrameAccessor;$/;"	c
WhammParam.FrameAccessor	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	case FrameAccessor;$/;"	c
WhammParam.Func	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	case Func;$/;"	c
WhammParam.Func	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	case Func;$/;"	c
WhammParam.Imm	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	case Imm(orig: Token, i: u31);$/;"	c
WhammParam.Imm	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	case Imm(orig: Token, i: u31);$/;"	c
WhammParam.InstrCount	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	case InstrCount;$/;"	c
WhammParam.InstrCount	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	case InstrCount;$/;"	c
WhammParam.Local	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	case Local(orig: Token, i: u31);$/;"	c
WhammParam.Local	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	case Local(orig: Token, i: u31);$/;"	c
WhammParam.NumTargets	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	case NumTargets;$/;"	c
WhammParam.NumTargets	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	case NumTargets;$/;"	c
WhammParam.Offset	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	case Offset;$/;"	c
WhammParam.Offset	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	case Offset;$/;"	c
WhammParam.OpName	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	case OpName;$/;"	c
WhammParam.OpName	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	case OpName;$/;"	c
WhammParam.Pc	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	case Pc;$/;"	c
WhammParam.Pc	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	case Pc;$/;"	c
WhammParam.ProbeId	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	case ProbeId;$/;"	c
WhammParam.ProbeId	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	case ProbeId;$/;"	c
WhammPredicate	$VIRGIL_WIZARD/src/util/Whamm.v3	/^class WhammPredicate(call: WhammParam.Call) { }$/;"	c
WhammProbe	$VIRGIL_WIZARD/src/util/Whamm.v3	/^class WhammProbe(func: Function, sig: Array<WhammArg>) extends Probe {$/;"	c
WhammProbeError	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def WhammProbeError(whammFn: string, msg: string) {$/;"	m
WhammProbe_func	$VIRGIL_WIZARD/src/engine/x86-64/V3Offsets.v3	/^	def WhammProbe_func		= int.view(Pointer.atField(whamm_Probe.func) - Pointer.atObject(whamm_Probe));$/;"	d
WhammProbe_trampoline	$VIRGIL_WIZARD/src/engine/x86-64/V3Offsets.v3	/^	def WhammProbe_trampoline	= int.view(Pointer.atField(whamm_Probe.trampoline.spc_entry) - Pointer.atObject(whamm_Probe));$/;"	d
WhammRule	$VIRGIL_WIZARD/src/util/Whamm.v3	/^type WhammRule(params: Array<WhammParam>, func: FuncDecl, pred: WhammPredicate) #unboxed;$/;"	c
WhammVarBinder	$VIRGIL_WIZARD/src/util/Whamm.v3	/^class WhammVarBinder(wi: WhammInstance, err: ErrorGen) {$/;"	c
WizengExports	$VIRGIL_WIZARD/src/modules/wizeng/WizengModule.v3	/^enum WizengExports(sig: SigDecl, invoke: (WizengModule, Range<Value>) -> HostResult) {$/;"	e
WizengModes	$VIRGIL_WIZARD/src/wizeng.main.v3	/^component WizengModes {$/;"	n
WizengModule	$VIRGIL_WIZARD/src/modules/wizeng/WizengModule.v3	/^class WizengModule extends HostModule("wizeng") {$/;"	c
WizengOptions	$VIRGIL_WIZARD/src/wizeng.main.v3	/^component WizengOptions {$/;"	n
WspOneClock	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^enum WspOneClock {$/;"	e
WspOneErrno	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^enum WspOneErrno(code: u16, msg: string) {$/;"	e
WspOneErrors	$VIRGIL_WIZARD/src/modules/wasi/x86-64-linux/WspOneErrors-x86-64-linux.v3	/^component WspOneErrors {$/;"	n
WspOneFdFlags	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^enum WspOneFdFlags {$/;"	e
WspOneFstFlags	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^enum WspOneFstFlags {$/;"	e
WspOneOFlags	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^enum WspOneOFlags {$/;"	e
WspOneRegistration	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^component WspOneRegistration {$/;"	n
WspOneRights	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^enum WspOneRights {$/;"	e
X86_64DynamicStrategy	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Target.v3	/^class X86_64DynamicStrategy extends X86_64SpcStrategy {$/;"	c
X86_64ExecutionStrategy	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Target.v3	/^class X86_64ExecutionStrategy extends ExecutionStrategy {$/;"	c
X86_64FrameAccessor	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^class X86_64FrameAccessor(stack: X86_64Stack, sp: Pointer, decl: FuncDecl) extends FrameAccessor {$/;"	c
X86_64FrameState	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^enum X86_64FrameState {$/;"	e
X86_64FrameWriter	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^private class X86_64FrameWriter extends FrameWriter {$/;"	c
X86_64Frames	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^component X86_64Frames {$/;"	n
X86_64Interpreter	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^component X86_64Interpreter {$/;"	n
X86_64InterpreterCode	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^class X86_64InterpreterCode extends RiUserCode {$/;"	c
X86_64InterpreterFrame	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^layout X86_64InterpreterFrame {$/;"	l
X86_64InterpreterGen	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^class X86_64InterpreterGen(ic: X86_64InterpreterCode, w: DataWriter) {$/;"	c
X86_64InterpreterOnlyStrategy	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Target.v3	/^class X86_64InterpreterOnlyStrategy extends X86_64ExecutionStrategy {$/;"	c
X86_64Linux_WasiInstance	$VIRGIL_WIZARD/src/modules/wasi/x86-64-linux/WspOneModule-x86-64-linux.v3	/^class X86_64Linux_WasiInstance extends WasiInstance {$/;"	c
X86_64Linux_WspOneModule	$VIRGIL_WIZARD/src/modules/wasi/x86-64-linux/WspOneModule-x86-64-linux.v3	/^class X86_64Linux_WspOneModule extends WspOneModule {$/;"	c
X86_64MacroAssembler	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^class X86_64MacroAssembler extends MacroAssembler {$/;"	c
X86_64MasmJumpTablePatcher	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^class X86_64MasmJumpTablePatcher extends X86_64AddrPatcher {$/;"	c
X86_64MasmLabel	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^class X86_64MasmLabel extends MasmLabel {$/;"	c
X86_64MasmRegs	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MasmRegs.v3	/^component X86_64MasmRegs {$/;"	n
X86_64PreGenFunc	$VIRGIL_WIZARD/src/engine/x86-64/X86_64PreGenStubs.v3	/^class X86_64PreGenFunc<P, R> extends X86_64PreGenStub {$/;"	c
X86_64PreGenHeader	$VIRGIL_WIZARD/src/engine/x86-64/X86_64PreGenStubs.v3	/^layout X86_64PreGenHeader {$/;"	l
X86_64PreGenStub	$VIRGIL_WIZARD/src/engine/x86-64/X86_64PreGenStubs.v3	/^class X86_64PreGenStub($/;"	c
X86_64PreGenStubOffsets	$VIRGIL_WIZARD/src/engine/x86-64/X86_64PreGenStubs.v3	/^layout X86_64PreGenStubOffsets {$/;"	l
X86_64PreGenStubs	$VIRGIL_WIZARD/src/engine/x86-64/X86_64PreGenStubs.v3	/^component X86_64PreGenStubs {$/;"	n
X86_64RT	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^def X86_64RT: X86_64Runtime;$/;"	d
X86_64RT	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^def X86_64RT: X86_64Runtime;$/;"	d
X86_64ReturnParentStub	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^class X86_64ReturnParentStub extends RiUserCode {$/;"	c
X86_64Runtime	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Runtime.v3	/^component X86_64Runtime {$/;"	n
X86_64Runtime_curStack	$VIRGIL_WIZARD/src/engine/x86-64/V3Offsets.v3	/^	def X86_64Runtime_curStack	= Pointer.atField(RT.curStack);$/;"	d
X86_64SimpleStub	$VIRGIL_WIZARD/src/engine/x86-64/X86_64PreGenStubs.v3	/^class X86_64SimpleStub extends RiUserCode {$/;"	c
X86_64SinglePassCompiler	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^class X86_64SinglePassCompiler extends SinglePassCompiler {$/;"	c
X86_64Spc	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^component X86_64Spc {$/;"	n
X86_64SpcAotStrategy	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Target.v3	/^class X86_64SpcAotStrategy(interpreter_fallback: bool) extends X86_64SpcStrategy {$/;"	c
X86_64SpcCode	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^class X86_64SpcCode extends RiUserCode {$/;"	c
X86_64SpcCompileStub	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^class X86_64SpcCompileStub extends RiUserCode {$/;"	c
X86_64SpcLazyStrategy	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Target.v3	/^class X86_64SpcLazyStrategy extends X86_64SpcStrategy {$/;"	c
X86_64SpcModuleCode	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^class X86_64SpcModuleCode extends X86_64SpcCode {$/;"	c
X86_64SpcStrategy	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Target.v3	/^class X86_64SpcStrategy extends X86_64ExecutionStrategy {$/;"	c
X86_64SpcTrapsStub	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^class X86_64SpcTrapsStub extends X86_64SpcCode {$/;"	c
X86_64Stack	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^class X86_64Stack extends WasmStack {$/;"	c
X86_64StackManager	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^component X86_64StackManager {$/;"	n
X86_64Stack_bottom	$VIRGIL_WIZARD/src/engine/x86-64/V3Offsets.v3	/^	def X86_64Stack_bottom		= int.view(Pointer.atField(vs.cont_bottom) - Pointer.atObject(vs));$/;"	d
X86_64Stack_func	$VIRGIL_WIZARD/src/engine/x86-64/V3Offsets.v3	/^	def X86_64Stack_func		= int.view(Pointer.atField(vs.func) - Pointer.atObject(vs));$/;"	d
X86_64Stack_parent	$VIRGIL_WIZARD/src/engine/x86-64/V3Offsets.v3	/^	def X86_64Stack_parent		= int.view(Pointer.atField(vs.parent) - Pointer.atObject(vs));$/;"	d
X86_64Stack_parent_rsp_ptr	$VIRGIL_WIZARD/src/engine/x86-64/V3Offsets.v3	/^	def X86_64Stack_parent_rsp_ptr	= int.view(Pointer.atField(vs.parent_rsp_ptr) - Pointer.atObject(vs));$/;"	d
X86_64Stack_return_results	$VIRGIL_WIZARD/src/engine/x86-64/V3Offsets.v3	/^	def X86_64Stack_return_results	= int.view(Pointer.atField(vs.return_results) - Pointer.atObject(vs));$/;"	d
X86_64Stack_rsp	$VIRGIL_WIZARD/src/engine/x86-64/V3Offsets.v3	/^	def X86_64Stack_rsp		= int.view(Pointer.atField(vs.rsp) - Pointer.atObject(vs));$/;"	d
X86_64Stack_state	$VIRGIL_WIZARD/src/engine/x86-64/V3Offsets.v3	/^	def X86_64Stack_state		= int.view(Pointer.atField(vs.state_) - Pointer.atObject(vs));$/;"	d
X86_64Stack_vsp	$VIRGIL_WIZARD/src/engine/x86-64/V3Offsets.v3	/^	def X86_64Stack_vsp		= int.view(Pointer.atField(vs.vsp) - Pointer.atObject(vs));$/;"	d
X86_64Stacks	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^component X86_64Stacks {$/;"	n
X86_64UnwindStub	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^class X86_64UnwindStub extends RiUserCode {$/;"	c
X86_64WhammTrampoline	$VIRGIL_WIZARD/src/engine/x86-64/X86_64WhammProbeTrampoline.v3	/^component X86_64WhammTrampoline {$/;"	n
XDEV	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	XDEV		(75, "Cross-device link."),$/;"	d
X_	$VIRGIL_WIZARD/src/engine/EngineOptions.v3	/^	def X_ = OptionsRegistry.addParseFunc(parse);$/;"	d
X_	$VIRGIL_WIZARD/src/engine/TraceOptions.v3	/^	def X_ = OptionsRegistry.addParseFunc(parse);$/;"	d
X_	$VIRGIL_WIZARD/src/modules/wasi/WasiOptions.v3	/^	private def X_ = OptionsRegistry.addParseFunc(parse);$/;"	d
X_	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	def X_ = ModuleRegistry.add(WspOneModule.new(fun => WasiInstance.new()), true); \/\/ register platform-independent first$/;"	d
X_	$VIRGIL_WIZARD/src/modules/wasi/x86-64-linux/WspOneModule-x86-64-linux.v3	/^def X_ = WspOneRegistration.register(X86_64Linux_WspOneModule.new(fun => X86_64Linux_WasiInstance.new()));$/;"	d
X_	$VIRGIL_WIZARD/src/modules/wizeng/ArithModule.v3	/^def X_ = HostModuleBuilder.new("wizeng:arith")$/;"	d
X_	$VIRGIL_WIZARD/src/modules/wizeng/WizengModule.v3	/^def X_ = ModuleRegistry.add(WizengModule.new(), false);$/;"	d
X_	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^def X_ = MonitorRegistry.add($/;"	d
X_	$VIRGIL_WIZARD/src/monitors/MonitorOptions.v3	/^	def X_ = OptionsRegistry.addParseFunc(parse);$/;"	d
X_	$VIRGIL_WIZARD/src/util/OpcodeMap.v3	/^def X_ = initGlobalOpTable();$/;"	d
YELLOW	$VIRGIL_WIZARD/src/util/TermColors.v3	/^	def YELLOW	= "\x1B[1;33m";$/;"	d
Y_	$VIRGIL_WIZARD/src/modules/wave/WaveModule.v3	/^def Y_ = HostModuleBuilderOf<WaveInstance>.new("wave", WaveInstance.new, WaveInstance.bind)$/;"	d
ZEROB	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def ZEROB = [ImmKind.ZERO_BYTE];$/;"	d
ZERO_BYTE	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	ZERO_BYTE,		\/\/ ZEROB$/;"	d
ZeroArityInContHandler	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def ZeroArityInContHandler(i: int) {$/;"	m
[]	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def [code: u32] -> Opcode {$/;"	m
[]	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def [code: u32] -> Opcode {$/;"	m
[]	$VIRGIL_WIZARD/src/engine/Sidetable.v3	/^	def [pc: int] -> int {$/;"	m
[]	$VIRGIL_WIZARD/src/engine/Sidetable.v3	/^	def [pc: int] -> int {$/;"	m
[]	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^	def [i: int] -> SlotAddrs {$/;"	m
[]	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^	def [i: int] -> SlotAddrs {$/;"	m
[]	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^	def [i: int] -> SlotAddrs {$/;"	m
[]	$VIRGIL_WIZARD/src/util/PrefixTrie.v3	/^	def [seq: Range<K>] -> V {$/;"	m
[]	$VIRGIL_WIZARD/src/util/PrefixTrie.v3	/^	def [seq: Range<K>] -> V {$/;"	m
[]=	$VIRGIL_WIZARD/src/engine/Table.v3	/^	def [i: int] = val: Value {$/;"	m
[]=	$VIRGIL_WIZARD/src/engine/Table.v3	/^	def [i: int] = val: Value {$/;"	m
[]=	$VIRGIL_WIZARD/src/util/PrefixTrie.v3	/^	def [seq: Range<K>] = v: V {$/;"	m
[]=	$VIRGIL_WIZARD/src/util/PrefixTrie.v3	/^	def [seq: Range<K>] = v: V {$/;"	m
abs	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def abs(pt: u64) -> this {$/;"	m
absPointer	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def absPointer(ptr: Pointer) -> X86_64Addr {$/;"	m
acc	$VIRGIL_WIZARD/src/engine/x86-64/V3Offsets.v3	/^	private def acc = X86_64FrameAccessor.new(vs, Pointer.NULL, decl);$/;"	d
accept	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	var accept = false;$/;"	d
accessor	$VIRGIL_WIZARD/src/engine/Meta.v3	/^class FrameAccessorRef(accessor: FrameAccessor) extends HostObject {$/;"	d
accessor	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	var accessor: V3FrameAccessor;	\/\/ accessor, if any$/;"	d
accessor	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	private def accessor: X86_64FrameAccessor;$/;"	d
accessor_slot	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	var accessor_slot: MasmAddr;$/;"	d
accessor_slot	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^	var accessor_slot: MasmAddr;$/;"	d
actions	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^class ReplayContext(actions: Vector<WasmEvent>, var results: Array<Value>){}$/;"	d
activateProbingAt	$VIRGIL_WIZARD/src/engine/Module.v3	/^	def activateProbingAt(pc: int, probe_byte: byte) {$/;"	m
active	$VIRGIL_WIZARD/src/monitors/ModuleInstrumenter.v3	/^	var active = false;$/;"	d
adapter	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^class WasiHostAdapter<P, R>(f: WasiInstance -> P -> R, adapter: (P -> R) -> HostFunc) extends HostAdapter_of<WasiInstance> {$/;"	d
adapters	$VIRGIL_WIZARD/src/modules/HostModuleBuilder.v3	/^	def adapters = Strings.newMap<C -> HostFunc>();$/;"	d
add	$VIRGIL_WIZARD/src/engine/Canon.v3	/^	def add(d: HeapTypeDecl) -> this {$/;"	m
add	$VIRGIL_WIZARD/src/engine/Probe.v3	/^	def add(p: Probe) {$/;"	m
add	$VIRGIL_WIZARD/src/modules/ModuleRegistry.v3	/^	def add(m: HostModule, exposed: bool) {$/;"	f
add	$VIRGIL_WIZARD/src/monitors/ConstMonitor.v3	/^	def add(v: Value) {$/;"	m
add	$VIRGIL_WIZARD/src/monitors/MonitorRegistry.v3	/^	def add(name: string, help: string, m: Monitor) -> MonitorRegistryEntry {$/;"	f
add	$VIRGIL_WIZARD/src/util/OptionsRegistry.v3	/^	def add<T>(opt: Option<T>, typename: string, help: string) -> Option<T> {$/;"	m
add	$VIRGIL_WIZARD/src/util/StringSet.v3	/^	def add(str: string) -> bool {$/;"	m
addAlias	$VIRGIL_WIZARD/src/util/OptionsRegistry.v3	/^	def addAlias<T>(opt: Option<T>, alias: string) -> Option<T> {$/;"	m
addArray	$VIRGIL_WIZARD/src/engine/Canon.v3	/^	def addArray(final: bool, supertypes: Array<HeapType>, elems: Array<StorageType>) -> this {$/;"	m
addDecl	$VIRGIL_WIZARD/src/engine/Module.v3	/^	def addDecl(d: Decl) {$/;"	m
addDir	$VIRGIL_WIZARD/src/modules/wasi/WasiOptions.v3	/^	private def addDir(arg: string, start: int, end: int) {$/;"	f
addEmbeddedRefOffset	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def addEmbeddedRefOffset(offset: int) {$/;"	m
addEnv	$VIRGIL_WIZARD/src/modules/wasi/WasiOptions.v3	/^	private def addEnv(arg: string, start: int, end: int) -> bool {$/;"	f
addExHandler	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	private def addExHandler(index: int, to: Vector<ExHandlerEntry>, info: ExHandlerInfo, target: ControlEntry, no_dest: bool, tag_index: int, range: (int, int)) {$/;"	m
addFrameToTrace	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	private def addFrameToTrace(ip: Pointer, code: RiUserCode, pos: StackFramePos, trace: Vector<(WasmFunction, int)>) -> bool {$/;"	m
addImport	$VIRGIL_WIZARD/src/engine/Module.v3	/^	def addImport(module_name: string, field_name: string, d: Decl) {$/;"	m
addImportProcessor	$VIRGIL_WIZARD/src/modules/ModuleLinker.v3	/^	def addImportProcessor(p: ImportProcessor) {$/;"	m
addLocals	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def addLocals(count: u32, ltype: ValueType) {$/;"	m
addMonitor	$VIRGIL_WIZARD/src/monitors/MonitorOptions.v3	/^	private def addMonitor(name: string, args: string, err: ErrorGen) -> bool {$/;"	f
addMove	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def addMove(to: (u32, SpcVal), from: (u32, SpcVal)) {$/;"	m
addOpcodePattern	$VIRGIL_WIZARD/src/monitors/WhammMonitor.v3	/^	private def addOpcodePattern(op: Opcode, params: Array<WhammParam>, func: FuncDecl, pred: WhammPredicate) {$/;"	m
addParseFunc	$VIRGIL_WIZARD/src/util/OptionsRegistry.v3	/^	def addParseFunc(f: (string, ErrorGen) -> bool) {$/;"	f
addRedZone	$VIRGIL_WIZARD/src/engine/x86-64/Redzones.v3	/^	def addRedZone(mapping: Mapping, offset: u32, size: u32) -> bool {$/;"	f
addReport	$VIRGIL_WIZARD/src/monitors/MonitorRegistry.v3	/^	def addReport(func: void -> void) {$/;"	f
addSig	$VIRGIL_WIZARD/src/engine/Canon.v3	/^	def addSig(final: bool, supertypes: Array<HeapType>, params: Array<ValueType>, results: Array<ValueType>) -> this {$/;"	m
addSpillCost	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def addSpillCost(score: int, reg: Reg, slot: int) -> int {$/;"	m
addStruct	$VIRGIL_WIZARD/src/engine/Canon.v3	/^	def addStruct(final: bool, supertypes: Array<HeapType>, fields: Array<StorageType>) -> this {$/;"	m
addTraceCallsProbes	$VIRGIL_WIZARD/src/util/BasicTracing.v3	/^	def addTraceCallsProbes(module: Module, func: FuncDecl) {$/;"	f
addTraceMemoryProbes	$VIRGIL_WIZARD/src/util/BasicTracing.v3	/^	def addTraceMemoryProbes(module: Module, func: FuncDecl) {$/;"	f
advance	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	private def advance() {$/;"	m
advanceCaller	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def advanceCaller() {$/;"	m
afterCompile	$VIRGIL_WIZARD/src/engine/Debug.v3	/^	def afterCompile(f: FuncDecl, addr: u64) { }$/;"	f
afterCompileModule	$VIRGIL_WIZARD/src/engine/Debug.v3	/^	def afterCompileModule(m: Module) { }$/;"	f
afterInstrExec	$VIRGIL_WIZARD/src/monitors/ModuleInstrumenter.v3	/^	def afterInstrExec(func: FuncDecl, pc: int, f: DynamicLoc -> ProbeAction) {$/;"	m
afterPregen	$VIRGIL_WIZARD/src/engine/Debug.v3	/^	def afterPregen() { }$/;"	f
aliases	$VIRGIL_WIZARD/src/engine/compiler/RegAlloc.v3	/^	private var aliases: Array<List<int>>;		\/\/ overflow list of each register$/;"	d
alignShadowMemFixedRange	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^	private def alignShadowMemFixedRange(mem: Memory, addr: u64, size: u64) {$/;"	m
alignShadowMemRange	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^	private def alignShadowMemRange(mem: Memory, addr: u64, size: u64) {$/;"	m
all	$VIRGIL_WIZARD/src/engine/Metrics.v3	/^	private var all: List<Metric>;$/;"	d
all	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def all = Extension.set.all;$/;"	d
allHaveDefaultValues	$VIRGIL_WIZARD/src/engine/Type.v3	/^def allHaveDefaultValues(at: Array<StorageType>) -> bool {$/;"	m
all_ctx	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^class ReplayFunction(all_ctx: Vector<ReplayContext>){}$/;"	d
alloc	$VIRGIL_WIZARD/src/engine/compiler/RegAlloc.v3	/^	def alloc(kind: ValueKind, assignment: int) -> Reg {$/;"	m
alloc	$VIRGIL_WIZARD/src/modules/wasi/WasiFdMap.v3	/^	def alloc() -> int {$/;"	m
alloc	$VIRGIL_WIZARD/src/util/FileDescriptorMap.v3	/^	def alloc() -> int {$/;"	m
allocAnchorId	$VIRGIL_WIZARD/src/monitors/LoopTraceMonitor.v3	/^	def allocAnchorId(module: Module, func: FuncDecl, pc: int) -> u30 {$/;"	m
allocFixed	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def allocFixed(kind: ValueKind, reg: Reg, slot: u32) -> Reg {$/;"	m
allocMove	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	private def allocMove() -> MoveNode {$/;"	m
allocPreGenHeaderOffsets	$VIRGIL_WIZARD/src/engine/x86-64/X86_64PreGenStubs.v3	/^def allocPreGenHeaderOffsets() -> Ref<X86_64PreGenStubOffsets> {$/;"	m
allocReg	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def allocReg(kind: ValueKind, slot: u32) -> Reg {$/;"	m
allocRegTos	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def allocRegTos(kind: ValueKind) -> Reg {$/;"	m
allocTmp	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	private def allocTmp(kind: ValueKind) -> MoveNode {$/;"	m
allocTmpFixed	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def allocTmpFixed(kind: ValueKind, reg: Reg) -> Reg {$/;"	m
allocateCodeForModule	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Target.v3	/^def allocateCodeForModule(module: Module, codeSize: int) {$/;"	m
allocateCodeForTrampoline	$VIRGIL_WIZARD/src/engine/x86-64/X86_64WhammProbeTrampoline.v3	/^def allocateCodeForTrampoline() {$/;"	m
amount	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^	case TableGrow(table_idx: int, table_name: string, amount: u32);$/;"	d
anchorLocs	$VIRGIL_WIZARD/src/monitors/LoopTraceMonitor.v3	/^	def anchorLocs = Vector<TraceAnchorLoc>.new();$/;"	d
anchorPositions	$VIRGIL_WIZARD/src/monitors/LoopTraceMonitor.v3	/^	def anchorPositions = Vector<int>.new();$/;"	d
anchor_id	$VIRGIL_WIZARD/src/monitors/LoopTraceMonitor.v3	/^private class TraceAnchorProbe(trace: TraceBuffer, anchor_id: u30) extends Probe { \/\/ XXX: void probe$/;"	d
app	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	def app: Module;			\/\/ application module$/;"	d
append	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^    append,$/;"	d
appendCode	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def appendCode(masm: X86_64MacroAssembler) -> Pointer {$/;"	m
appendSlots	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def appendSlots(buf: StringBuilder, slot: int) -> StringBuilder {$/;"	m
apply	$VIRGIL_WIZARD/src/engine/compiler/RegAlloc.v3	/^	def apply<T>(allocated: Reg -> T, free: Reg -> T) {$/;"	m
apply	$VIRGIL_WIZARD/src/util/PrefixTrie.v3	/^	def apply<R>(f: (Range<K>, V) -> R) {$/;"	m
apply0	$VIRGIL_WIZARD/src/util/PrefixTrie.v3	/^	private def apply0<R>(f: (Range<K>, V) -> R, buf: Array<K>, pos: int, branch: PrefixTrieBranch<K, V>) {$/;"	m
applyActions	$VIRGIL_WIZARD/src/monitors/R3BackEndMonitor.v3	/^	private def applyActions(actions: Vector<WasmEvent>) {$/;"	m
applyJitFilter	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Target.v3	/^def applyJitFilter(module: Module, func: FuncDecl, how: string) -> bool {$/;"	m
argMapFrom	$VIRGIL_WIZARD/src/util/MonitorUtil.v3	/^	def argMapFrom(args: string) -> HashMap<string, string> {$/;"	f
args	$VIRGIL_WIZARD/src/engine/Host.v3	/^	case TailCall(func: Function, args: Array<Value>);$/;"	d
args	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	case Invalid(args: string);$/;"	d
args	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	private def args = if(sig.length == 0, Values.NONE, Array<Value>.new(sig.length));$/;"	d
argsInRegs	$VIRGIL_WIZARD/src/engine/Tuning.v3	/^	def argsInRegs = false;			\/\/ XXX: implement$/;"	d
arr_c	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def arr_c: Array<ValueType> = [ValueTypes.CONTREF];$/;"	d
arr_d	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def arr_d: Array<ValueType> = [ValueType.F64];$/;"	d
arr_dd	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def arr_dd: Array<ValueType> = [ValueType.F64, ValueType.F64];$/;"	d
arr_ds	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def arr_ds: Array<ValueType> = [ValueType.F64, ValueType.V128];$/;"	d
arr_e	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def arr_e: Array<ValueType> = [ValueTypes.EXTERNREF];$/;"	d
arr_f	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def arr_f: Array<ValueType> = [ValueType.F32];$/;"	d
arr_ff	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def arr_ff: Array<ValueType> = [ValueType.F32, ValueType.F32];$/;"	d
arr_fs	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def arr_fs: Array<ValueType> = [ValueType.F32, ValueType.V128];$/;"	d
arr_g	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def arr_g: Array<ValueType> = [ValueTypes.FUNCREF];$/;"	d
arr_h	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def arr_h: Array<ValueType> = [ValueTypes.I31REF];$/;"	d
arr_i	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def arr_i: Array<ValueType> = [ValueType.I32];$/;"	d
arr_id	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def arr_id: Array<ValueType> = [ValueType.I32, ValueType.F64];$/;"	d
arr_if	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def arr_if: Array<ValueType> = [ValueType.I32, ValueType.F32];$/;"	d
arr_ii	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def arr_ii: Array<ValueType> = [ValueType.I32, ValueType.I32];$/;"	d
arr_iig	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def arr_iig: Array<ValueType> = [ValueType.I32, ValueType.I32, ValueTypes.FUNCREF];$/;"	d
arr_iii	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def arr_iii: Array<ValueType> = [ValueType.I32, ValueType.I32, ValueType.I32];$/;"	d
arr_iiii	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def arr_iiii: Array<ValueType> = [ValueType.I32, ValueType.I32, ValueType.I32, ValueType.I32];$/;"	d
arr_iiiii	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def arr_iiiii: Array<ValueType> = [ValueType.I32, ValueType.I32, ValueType.I32, ValueType.I32, ValueType.I32];$/;"	d
arr_iiiiii	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def arr_iiiiii: Array<ValueType> = [ValueType.I32, ValueType.I32, ValueType.I32, ValueType.I32, ValueType.I32, ValueType.I32];$/;"	d
arr_iiiiiii	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def arr_iiiiiii: Array<ValueType> = [ValueType.I32, ValueType.I32, ValueType.I32, ValueType.I32, ValueType.I32, ValueType.I32, ValueType.I32];$/;"	d
arr_iiiiiiii	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def arr_iiiiiiii: Array<ValueType> = [ValueType.I32, ValueType.I32, ValueType.I32, ValueType.I32, ValueType.I32, ValueType.I32, ValueType.I32, ValueType.I32];$/;"	d
arr_iiiiil	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def arr_iiiiil: Array<ValueType> = [ValueType.I32, ValueType.I32, ValueType.I32, ValueType.I32, ValueType.I32, ValueType.I64];$/;"	d
arr_iiiiillii	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def arr_iiiiillii: Array<ValueType> = [ValueType.I32, ValueType.I32, ValueType.I32, ValueType.I32, ValueType.I32, ValueType.I64, ValueType.I64, ValueType.I32, ValueType.I32];$/;"	d
arr_iiiilli	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def arr_iiiilli: Array<ValueType> = [ValueType.I32, ValueType.I32, ValueType.I32, ValueType.I32, ValueType.I64, ValueType.I64, ValueType.I32];$/;"	d
arr_iiil	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def arr_iiil: Array<ValueType> = [ValueType.I32, ValueType.I32, ValueType.I32, ValueType.I64];$/;"	d
arr_iiili	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def arr_iiili: Array<ValueType> = [ValueType.I32, ValueType.I32, ValueType.I32, ValueType.I64, ValueType.I32];$/;"	d
arr_iil	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def arr_iil: Array<ValueType> = [ValueType.I32, ValueType.I32, ValueType.I64];$/;"	d
arr_iill	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def arr_iill: Array<ValueType> = [ValueType.I32, ValueType.I32, ValueType.I64, ValueType.I64];$/;"	d
arr_il	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def arr_il: Array<ValueType> = [ValueType.I32, ValueType.I64];$/;"	d
arr_ili	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def arr_ili: Array<ValueType> = [ValueType.I32, ValueType.I64, ValueType.I32];$/;"	d
arr_ilii	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def arr_ilii: Array<ValueType> = [ValueType.I32, ValueType.I64, ValueType.I32, ValueType.I32];$/;"	d
arr_ill	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def arr_ill: Array<ValueType> = [ValueType.I32, ValueType.I64, ValueType.I64];$/;"	d
arr_illi	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def arr_illi: Array<ValueType> = [ValueType.I32, ValueType.I64, ValueType.I64, ValueType.I32];$/;"	d
arr_illl	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def arr_illl: Array<ValueType> = [ValueType.I32, ValueType.I64, ValueType.I64, ValueType.I64];$/;"	d
arr_is	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def arr_is: Array<ValueType> = [ValueType.I32, ValueType.V128];$/;"	d
arr_l	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def arr_l: Array<ValueType> = [ValueType.I64];$/;"	d
arr_li	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def arr_li: Array<ValueType> = [ValueType.I64, ValueType.I32];$/;"	d
arr_liilli	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def arr_liilli: Array<ValueType> = [ValueType.I64, ValueType.I32, ValueType.I32, ValueType.I64, ValueType.I64, ValueType.I32];$/;"	d
arr_ll	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def arr_ll: Array<ValueType> = [ValueType.I64, ValueType.I64];$/;"	d
arr_llllll	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def arr_llllll: Array<ValueType> = [ValueType.I64, ValueType.I64, ValueType.I64, ValueType.I64, ValueType.I64, ValueType.I64];$/;"	d
arr_ls	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def arr_ls: Array<ValueType> = [ValueType.I64, ValueType.V128];$/;"	d
arr_r	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def arr_r: Array<ValueType> = [ValueTypes.ANYREF];$/;"	d
arr_rr	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def arr_rr: Array<ValueType> = [ValueTypes.ANYREF, ValueTypes.ANYREF];$/;"	d
arr_rrr	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def arr_rrr: Array<ValueType> = [ValueTypes.ANYREF, ValueTypes.ANYREF, ValueTypes.ANYREF];$/;"	d
arr_s	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def arr_s: Array<ValueType> = [ValueType.V128];$/;"	d
arr_sd	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def arr_sd: Array<ValueType> = [ValueType.V128, ValueType.F64];$/;"	d
arr_sf	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def arr_sf: Array<ValueType> = [ValueType.V128, ValueType.F32];$/;"	d
arr_si	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def arr_si: Array<ValueType> = [ValueType.V128, ValueType.I32];$/;"	d
arr_sl	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def arr_sl: Array<ValueType> = [ValueType.V128, ValueType.I64];$/;"	d
arr_ss	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def arr_ss: Array<ValueType> = [ValueType.V128, ValueType.V128];$/;"	d
arr_sss	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def arr_sss: Array<ValueType> = [ValueType.V128, ValueType.V128, ValueType.V128];$/;"	d
arr_v	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def arr_v: Array<ValueType> = [];$/;"	d
arr_x	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def arr_x: Array<ValueType> = [ValueTypes.EXNREF];$/;"	d
array	$VIRGIL_WIZARD/src/engine/Type.v3	/^	case Array(array: ArrayDecl);$/;"	d
array_get	$VIRGIL_WIZARD/src/util/WasmAsm.v3	/^	def array_get(decl: ArrayDecl) -> this {$/;"	m
array_get_s	$VIRGIL_WIZARD/src/util/WasmAsm.v3	/^	def array_get_s(decl: ArrayDecl) -> this {$/;"	m
array_get_u	$VIRGIL_WIZARD/src/util/WasmAsm.v3	/^	def array_get_u(decl: ArrayDecl) -> this {$/;"	m
array_len	$VIRGIL_WIZARD/src/util/WasmAsm.v3	/^	def array_len(decl: ArrayDecl) -> this {$/;"	m
array_new	$VIRGIL_WIZARD/src/util/WasmAsm.v3	/^	def array_new(decl: ArrayDecl) -> this {$/;"	m
array_new_canon_default	$VIRGIL_WIZARD/src/util/WasmAsm.v3	/^	def array_new_canon_default(decl: ArrayDecl) -> this {$/;"	m
array_set	$VIRGIL_WIZARD/src/util/WasmAsm.v3	/^	def array_set(decl: ArrayDecl) -> this {$/;"	m
asNonNullRefType	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	def asNonNullRefType(t: ValueType) -> ValueType {$/;"	m
asm	$VIRGIL_WIZARD/src/engine/Trace.v3	/^	var asm = false;$/;"	d
asm	$VIRGIL_WIZARD/src/engine/TraceOptions.v3	/^	asm('a', "generated assembly (must be used with -tk)"),$/;"	d
asm	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def asm = X86_64Assemblers.create64(w);$/;"	d
asm	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def asm = mmasm.asm;$/;"	d
assert1	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def assert1<T>(cond: bool, msg: string, param: T) {$/;"	m
assert2	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def assert2<T, U>(cond: bool, msg: string, p1: T, p2: U) {$/;"	m
assert3	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def assert3<T, U, V>(cond: bool, msg: string, p1: T, p2: U, p3: V) {$/;"	m
assign	$VIRGIL_WIZARD/src/engine/compiler/RegAlloc.v3	/^	def assign(reg: Reg, assignment: int) {$/;"	m
at	$VIRGIL_WIZARD/src/engine/BytecodeIterator.v3	/^	def at(pc: int, stp: int) -> this {$/;"	m
at	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^	case Handled(at: WasmStack);$/;"	d
at	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def at(src: int) -> this {$/;"	m
at	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def at(d: DataReader) -> this {$/;"	m
atim	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^        atim,$/;"	d
atim_now	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^        atim_now,$/;"	d
attributes	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def attributes = Array<OpcodeAttribute.set>.new(Opcode.count);$/;"	d
bailout	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def bailout(msg: string) {$/;"	m
base	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^type MasmAddr(base: Reg, offset: int) #unboxed {$/;"	d
base_reg	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^type EffectiveAddr(oob: bool, is64: bool, base_reg: Reg, index_reg: Reg, offset: u32) #unboxed;$/;"	d
basic_block_size	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^	var basic_block_size: u32 = 0;$/;"	d
basic_block_start_pc	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^	var basic_block_start_pc = 0;$/;"	d
beforeAllFuncExec	$VIRGIL_WIZARD/src/monitors/ModuleInstrumenter.v3	/^	def beforeAllFuncExec(f: DynamicLoc -> ProbeAction) {$/;"	m
beforeAllFuncExecAndReturn	$VIRGIL_WIZARD/src/monitors/ModuleInstrumenter.v3	/^	def beforeAllFuncExecAndReturn(callFn: DynamicLoc -> ProbeAction, retFn: DynamicLoc -> ProbeAction) {$/;"	m
beforeAllFuncReturn	$VIRGIL_WIZARD/src/monitors/ModuleInstrumenter.v3	/^	def beforeAllFuncReturn(f: DynamicLoc -> ProbeAction) {$/;"	m
beforeFuncExec	$VIRGIL_WIZARD/src/monitors/ModuleInstrumenter.v3	/^	def beforeFuncExec(func: FuncDecl, f: DynamicLoc -> ProbeAction) -> Probe {$/;"	m
beforeFuncExecAndReturn	$VIRGIL_WIZARD/src/monitors/ModuleInstrumenter.v3	/^	def beforeFuncExecAndReturn(func: FuncDecl, beforeExec: DynamicLoc -> ProbeAction, beforeRet: DynamicLoc -> ProbeAction) -> (Probe, Probe) {$/;"	m
beforeFuncExecOrReturn	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^	private def beforeFuncExecOrReturn(dynamicLoc: DynamicLoc, is_enter: bool) -> ProbeAction {$/;"	m
beforeFuncReturn	$VIRGIL_WIZARD/src/monitors/ModuleInstrumenter.v3	/^	def beforeFuncReturn(func: FuncDecl, f: DynamicLoc -> ProbeAction) -> Probe {$/;"	m
beforeGlobalRead	$VIRGIL_WIZARD/src/monitors/ModuleInstrumenter.v3	/^	def beforeGlobalRead(f: DynamicLoc -> ProbeAction, global_index: u31) {$/;"	m
beforeGlobalWrite	$VIRGIL_WIZARD/src/monitors/ModuleInstrumenter.v3	/^	def beforeGlobalWrite(f: DynamicLoc -> ProbeAction, global_index: u31) {$/;"	m
beforeGuestBytecodeImmRead	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^	private def beforeGuestBytecodeImmRead(profile_state: GuestProfileState,$/;"	m
beforeGuestBytecodeRead	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^	private def beforeGuestBytecodeRead(profile_state: GuestProfileState,$/;"	m
beforeInstrExec	$VIRGIL_WIZARD/src/monitors/ModuleInstrumenter.v3	/^	def beforeInstrExec(func: FuncDecl, pc: int, f: DynamicLoc -> ProbeAction) -> Probe {$/;"	m
beforeMemGrow	$VIRGIL_WIZARD/src/monitors/ModuleInstrumenter.v3	/^	def beforeMemGrow(f: (DynamicLoc, Memory, u32) -> ProbeAction) {$/;"	m
beforeMemGrowMatching	$VIRGIL_WIZARD/src/monitors/ModuleInstrumenter.v3	/^	def beforeMemGrowMatching(matcher: (Module, FuncDecl) -> bool, f: (DynamicLoc, Memory, u32) -> ProbeAction) {$/;"	m
beforeMemOp	$VIRGIL_WIZARD/src/monitors/ModuleInstrumenter.v3	/^	private def beforeMemOp($/;"	m
beforeMemRead	$VIRGIL_WIZARD/src/monitors/ModuleInstrumenter.v3	/^	def beforeMemRead(f: (DynamicLoc, Memory, u64, u64) -> ProbeAction) {$/;"	m
beforeMemReadMatching	$VIRGIL_WIZARD/src/monitors/ModuleInstrumenter.v3	/^	def beforeMemReadMatching(matcher: (Module, FuncDecl) -> bool, f: (DynamicLoc, Memory, u64, u64) -> ProbeAction) {$/;"	m
beforeMemWrite	$VIRGIL_WIZARD/src/monitors/ModuleInstrumenter.v3	/^	def beforeMemWrite(f: (DynamicLoc, Memory, u64, u64) -> ProbeAction) {$/;"	m
beforeMemWriteMatching	$VIRGIL_WIZARD/src/monitors/ModuleInstrumenter.v3	/^	def beforeMemWriteMatching(matcher: (Module, FuncDecl) -> bool, f: (DynamicLoc, Memory, u64, u64) -> ProbeAction) {$/;"	m
beforePregen	$VIRGIL_WIZARD/src/engine/Debug.v3	/^	def beforePregen() { }$/;"	f
beginCodeSection	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	def beginCodeSection(addr: u64, count: u32, size: u32) {}$/;"	m
beginColor	$VIRGIL_WIZARD/src/engine/Trace.v3	/^	def beginColor(color: Color) -> this {$/;"	m
bi	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^private class DispatchFunctionBytecodeVisitor(module: Module, bi: BytecodeIterator, counter: CountProbe) extends BytecodeVisitor {$/;"	d
bi	$VIRGIL_WIZARD/src/monitors/CallsMonitor.v3	/^private class CallsMonitorBytecodeVisitor(var stats: FuncStats, bi: BytecodeIterator) extends BytecodeVisitor {$/;"	d
bi	$VIRGIL_WIZARD/src/monitors/ControlInstrumenter.v3	/^	private def bi = BytecodeIterator.new();$/;"	d
bi	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	def bi = BytecodeIterator.new();$/;"	d
bi	$VIRGIL_WIZARD/src/monitors/InstrCountMonitor.v3	/^	def bi = BytecodeIterator.new();$/;"	d
bi	$VIRGIL_WIZARD/src/monitors/LoopTraceMonitor.v3	/^	def bi = BytecodeIterator.new();$/;"	d
bi	$VIRGIL_WIZARD/src/monitors/ModuleInstrumenter.v3	/^	var bi: BytecodeIterator;$/;"	d
bi	$VIRGIL_WIZARD/src/util/BasicBlockIterator.v3	/^	private def bi = BytecodeIterator.new();	\/\/ {bi.pc} = end of current block$/;"	d
bi	$VIRGIL_WIZARD/src/util/BytecodeInstrumenter.v3	/^	def bi = BytecodeIterator.new();$/;"	d
bi	$VIRGIL_WIZARD/src/util/CfgBuilder.v3	/^	private def bi = BytecodeIterator.new();$/;"	d
bi	$VIRGIL_WIZARD/src/util/CfgPrinter.v3	/^	private def bi = BytecodeIterator.new();$/;"	d
bi	$VIRGIL_WIZARD/src/util/HostAdapters.v3	/^def bi = Values.box_i;$/;"	d
bind	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	def bind(target: ControlEntry, pos: int, sidetable_pos: int) {$/;"	m
bind	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^	def bind(args: Range<Value>) -> this;$/;"	m
bind	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def bind(args: Range<Value>) -> this {$/;"	m
bind	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	def bind(args: Range<Value>) -> this {$/;"	m
bind0	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	def bind0(target: ControlEntry, stp: int, pos: int, sidetable_pos: int) {$/;"	m
bindCfgBlock	$VIRGIL_WIZARD/src/util/CfgBuilder.v3	/^	private def bindCfgBlock(cs: ControlStack<CfgBlock>, pc: int, label: CfgBlock) {$/;"	m
bindElse	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	def bindElse(target: ControlEntry, pos: int) {$/;"	m
bindLabel	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def bindLabel(l: MasmLabel) {$/;"	m
bindLabel	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def bindLabel(l: MasmLabel) {$/;"	m
bindLabel	$VIRGIL_WIZARD/src/util/ControlStack.v3	/^	var bindLabel: (ControlStack<B>, int, B) -> void = ControlStack<B>.defaultBindLabel;$/;"	d
bindLabelTo	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def bindLabelTo(label: MasmLabel, offset: int) {$/;"	m
bindLabelTo	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def bindLabelTo(l: MasmLabel, offset: int) {$/;"	m
bind_pos	$VIRGIL_WIZARD/src/util/CfgBuilder.v3	/^	var bind_pos: int = -1;$/;"	d
binder	$VIRGIL_WIZARD/src/engine/Instantiator.v3	/^	var binder: (Decl, Exportable) -> Exportable;		\/\/ last binding step$/;"	d
binder	$VIRGIL_WIZARD/src/modules/ModuleLinker.v3	/^	var binder: (Decl, Exportable) -> Exportable;$/;"	d
binder	$VIRGIL_WIZARD/src/monitors/WhammMonitor.v3	/^	def binder = WhammVarBinder.new(wi, err);$/;"	d
binparse	$VIRGIL_WIZARD/src/engine/Trace.v3	/^	var binparse = false;$/;"	d
binparse	$VIRGIL_WIZARD/src/engine/TraceOptions.v3	/^	binparse('b', "binary parser"),$/;"	d
bits	$VIRGIL_WIZARD/src/engine/Value.v3	/^	case F64(bits: u64);$/;"	d
block	$VIRGIL_WIZARD/src/util/ControlStack.v3	/^	var block: B;$/;"	d
block0	$VIRGIL_WIZARD/src/util/WasmAsm.v3	/^	def block0() -> this {$/;"	m
blockEnds	$VIRGIL_WIZARD/src/monitors/WhammMonitor.v3	/^	var blockEnds: List<WhammRule>;$/;"	d
blockStarts	$VIRGIL_WIZARD/src/monitors/WhammMonitor.v3	/^	var blockStarts: List<WhammRule>;$/;"	d
blocks	$VIRGIL_WIZARD/src/util/WasmAsm.v3	/^	def blocks(sig: SigDecl) -> this {$/;"	m
blocks_	$VIRGIL_WIZARD/src/monitors/BlocksMonitor.v3	/^def blocks_ = MonitorRegistry.add($/;"	d
boundsCheck	$VIRGIL_WIZARD/src/engine/Memory.v3	/^	def boundsCheck(offset: u64, index: u64, size: u64) -> i64 {$/;"	m
boundsCheck	$VIRGIL_WIZARD/src/engine/Table.v3	/^	def boundsCheck(index: u64, size: u64) -> int {$/;"	m
boundsCheck	$VIRGIL_WIZARD/src/util/ArrayUtil.v3	/^	def boundsCheck<T>(data: Array<T>, offset: u64, size: u64) -> int {$/;"	f
br	$VIRGIL_WIZARD/src/util/ControlStack.v3	/^	private def br(depth: u31) {$/;"	m
br	$VIRGIL_WIZARD/src/util/WasmAsm.v3	/^	def br(depth: int) -> this {$/;"	m
brIf	$VIRGIL_WIZARD/src/util/ControlStack.v3	/^	private def brIf(depth: u31) {$/;"	m
br_if	$VIRGIL_WIZARD/src/util/WasmAsm.v3	/^	def br_if(depth: int) -> this {$/;"	m
br_ifs	$VIRGIL_WIZARD/src/monitors/ControlInstrumenter.v3	/^	var br_ifs: bool;	\/\/ instrument br_if*$/;"	d
br_on_cast	$VIRGIL_WIZARD/src/util/WasmAsm.v3	/^	def br_on_cast(depth: int, t1: int, t2: int) -> this {$/;"	m
br_on_null	$VIRGIL_WIZARD/src/util/WasmAsm.v3	/^	def br_on_null(depth: int) -> this {$/;"	m
branchHistory	$VIRGIL_WIZARD/src/monitors/LoopTraceMonitor.v3	/^	var branchHistory: u32 = 1;$/;"	d
breakpoint	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	case Breakpoint(breakpoint: Breakpoint);$/;"	d
breakpoints	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	def breakpoints = Vector<(Breakpoint, DebugProbe)>.new();$/;"	d
brs	$VIRGIL_WIZARD/src/monitors/ControlInstrumenter.v3	/^	var brs: bool;		\/\/ instrument brs$/;"	d
bu	$VIRGIL_WIZARD/src/util/HostAdapters.v3	/^def bu = Values.box_u;$/;"	d
buf	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	+0	buf:		u32;$/;"	d
buf_len	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	+4	buf_len:	u32;$/;"	d
build	$VIRGIL_WIZARD/src/util/CfgBuilder.v3	/^	def build(func: FuncDecl) -> CfgBlock {$/;"	m
buildData	$VIRGIL_WIZARD/src/engine/Version.v3	/^	var buildData: string;$/;"	d
buildHandlerDest	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def buildHandlerDest(control: SpcControl) {$/;"	m
buildSwitchHandler	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def buildSwitchHandler() {$/;"	m
bw_edges	$VIRGIL_WIZARD/src/util/CfgPrinter.v3	/^type CfgPrintEntry(pc: int, fw_edges: Array<CfgEdgeChar>, instr: string, bw_edges: Array<CfgEdgeChar>) #unboxed {$/;"	d
byTime	$VIRGIL_WIZARD/src/monitors/ProfileMonitor.v3	/^	private def byTime(a: ProfileTreeNode, b: ProfileTreeNode) -> bool {$/;"	m
byteView	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^	private def byteView(val: Value) -> byte {$/;"	m
bytecode	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^case STEP(bytecode: u8, offset: u64, cost: u64, wasm_func_trace: List<WasmFuncTrace>);$/;"	d
bytecode_hotness	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^	def bytecode_hotness: Array<HashMap<u64, u32>> = Array.new(256);$/;"	d
bytes	$VIRGIL_WIZARD/src/engine/Metrics.v3	/^	private def bytes = "bytes";$/;"	d
bytesToVals	$VIRGIL_WIZARD/src/engine/Runtime.v3	/^def bytesToVals(storage: StorageType, data: Array<byte>, offset: u32, length: u32) -> (bool, Array<Value>) { \/\/ TODO: MaybeTrap$/;"	m
bytes_copy	$VIRGIL_WIZARD/src/monitors/MemStatsMonitor.v3	/^	var bytes_copy: u64;$/;"	d
bytes_fill	$VIRGIL_WIZARD/src/monitors/MemStatsMonitor.v3	/^	var bytes_fill: u64;$/;"	d
bytes_init	$VIRGIL_WIZARD/src/monitors/MemStatsMonitor.v3	/^	var bytes_init: u64;$/;"	d
cache	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	private def cache = Canon.globalCache;$/;"	d
cache	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	var cache: V3Frame;			\/\/ cache of all V3Frame objects (bottom of stack)$/;"	d
cache	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	var cache: X86_64Stack;$/;"	d
cached_depth	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	var cached_depth = -1;$/;"	d
cached_pc	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	var cached_pc: int;$/;"	d
cached_stack	$VIRGIL_WIZARD/src/engine/v3/V3Target.v3	/^var cached_stack: V3Interpreter;$/;"	d
call	$VIRGIL_WIZARD/src/engine/Execute.v3	/^	def call(func: Function, args: Range<Value>) -> Result;$/;"	m
call	$VIRGIL_WIZARD/src/engine/v3/V3Target.v3	/^	def call(func: Function, args: Range<Value>) -> Result {$/;"	m
call	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Target.v3	/^	def call(func: Function, args: Range<Value>) -> Result {$/;"	m
call	$VIRGIL_WIZARD/src/util/Whamm.v3	/^class WhammPredicate(call: WhammParam.Call) { }$/;"	d
callStack	$VIRGIL_WIZARD/src/monitors/ProfileMonitor.v3	/^var callStack: Vector<(string, int)> = Vector<(string, int)>.new(); \/\/ (name, ID)$/;"	d
call_kind_stack	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^	def call_kind_stack = ListStack<(CallKind, int)>.new();$/;"	d
call_ref	$VIRGIL_WIZARD/src/util/WasmAsm.v3	/^	def call_ref() -> this {$/;"	m
call_stack	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^	var call_stack = ListStack<u32>.new();$/;"	d
callback	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	def callback: BpFsmCallback;$/;"	d
callee_index	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^private class R3CallProbe(callee_index: int, handler: EventHandler) extends Probe {$/;"	d
caller	$VIRGIL_WIZARD/src/engine/Probe.v3	/^	def caller() -> FrameLoc;$/;"	m
caller	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^	def caller(loc: FrameLoc) -> FrameLoc;$/;"	m
caller	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def caller() -> FrameLoc {$/;"	m
caller	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	def caller(loc: FrameLoc) -> FrameLoc;$/;"	m
callerSp	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	def callerSp() -> Pointer {$/;"	m
callsFilter	$VIRGIL_WIZARD/src/util/BasicTracing.v3	/^	var callsFilter: DeclFilter;$/;"	d
can_inline	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^type InlineConfig(swap_membase: bool, swap_instance: bool, can_inline: bool);$/;"	d
canon	$VIRGIL_WIZARD/src/engine/Trace.v3	/^	var canon = false;$/;"	d
canon	$VIRGIL_WIZARD/src/engine/TraceOptions.v3	/^	canon('c', "type canonicalization"),$/;"	d
canonEq	$VIRGIL_WIZARD/src/engine/Type.v3	/^	def canonEq(that: HeapTypeDecl) -> bool { \/\/ TODO: remove the need for this method altogether.$/;"	m
canon_id	$VIRGIL_WIZARD/src/engine/Type.v3	/^	var canon_id = -1;$/;"	d
canond	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def canond(a: double) -> double {$/;"	m
canonf	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def canonf(a: float) -> float {$/;"	m
cast	$VIRGIL_WIZARD/src/engine/Runtime.v3	/^	def cast(instance: Instance, nullable: bool, ht_val: int, val: Value) -> bool {$/;"	f
castObject	$VIRGIL_WIZARD/src/engine/Runtime.v3	/^	def castObject(instance: Instance, ht_val: int, obj: Object) -> bool {$/;"	f
catch_reset_state	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	var catch_reset_state: Array<SpcVal>;$/;"	d
catch_slot	$VIRGIL_WIZARD/src/engine/Sidetable.v3	/^type SidetableRethrowEntry(catch_slot: int) #unboxed;$/;"	d
catches	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	var catches: Array<Catch>;$/;"	d
catches_index	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	var catches_index: int;$/;"	d
cbind	$VIRGIL_WIZARD/src/modules/HostModuleBuilder.v3	/^	def cbind: (C, Instance) -> void;$/;"	d
ceilv	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def ceilv: u64 = if(isI64,$/;"	d
cells	$VIRGIL_WIZARD/src/util/TraceUtil.v3	/^	def cells = Array<TableCell>.new(names.length);$/;"	d
ch	$VIRGIL_WIZARD/src/engine/TraceOptions.v3	/^enum TraceOption(ch: byte, help: string) {$/;"	d
check	$VIRGIL_WIZARD/src/engine/Module.v3	/^	def check(val: u64) -> bool {$/;"	m
checkAlignAndGetIndexType	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	def checkAlignAndGetIndexType(max_align: u32) -> ValueType {$/;"	m
checkAndPopArgs	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	def checkAndPopArgs(p: Array<ValueType>) {$/;"	m
checkAndPopFields	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	def checkAndPopFields(p: Array<StorageType>) {$/;"	m
checkArgsAndPushControl	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	def checkArgsAndPushControl(opcode: Opcode, params: Array<ValueType>, results: Array<ValueType>) -> ControlEntry {$/;"	m
checkArgsAndTransfer	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	def checkArgsAndTransfer() {$/;"	m
checkArrayIsMutable	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	def checkArrayIsMutable(at: ArrayDecl, pop: bool) -> bool {$/;"	m
checkArrayIsPrimitive	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	def checkArrayIsPrimitive(at: ArrayDecl, pop: bool) -> bool {$/;"	m
checkCallReturnAndInsertProbe	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^	def checkCallReturnAndInsertProbe(new_probe: Probe) {$/;"	m
checkContHandle	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	def checkContHandle(i: int, tag: TagDecl, cont: ContDecl, target: ControlEntry) {$/;"	m
checkDeferredImport	$VIRGIL_WIZARD/src/engine/Instantiator.v3	/^	private def checkDeferredImport(imp_index: int, deferred_imports: Array<int>) -> bool {$/;"	m
checkElemsType	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	def checkElemsType(pt: int, table: TableDecl, vt: ValueType) {$/;"	m
checkExtension	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	def checkExtension(ext: Extension.set, opcode: Opcode) -> bool {$/;"	m
checkForConstNull	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	private def checkForConstNull(sv: SpcVal) -> bool {$/;"	m
checkFrameVarBounds	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	private def checkFrameVarBounds(i: int) {$/;"	m
checkIndex	$VIRGIL_WIZARD/src/engine/WasmParser.v3	/^	def checkIndex(pt: int, quantity: string, index: u32, max: int) -> (bool, u31) {$/;"	m
checkInit	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	def checkInit(index: u32) {$/;"	m
checkLane	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	def checkLane(max: u32) {$/;"	m
checkLaneAndSig	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	def checkLaneAndSig(opcode: Opcode, max: u32) {$/;"	m
checkLaneLoad	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	def checkLaneLoad(opcode: Opcode, max_align: u32) {$/;"	m
checkLaneStore	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	def checkLaneStore(opcode: Opcode, max_align: u32) {$/;"	m
checkLanes	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	def checkLanes(max: u32, num_lane: u32) {$/;"	m
checkLoad	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	def checkLoad(opcode: Opcode, max_align: u32, result: ValueType) {$/;"	m
checkLocalBounds	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	private def checkLocalBounds(i: int) {$/;"	m
checkMemGrow	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^	private def checkMemGrow(instance: Instance) {$/;"	m
checkNotUnwound	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	private def checkNotUnwound() {$/;"	m
checkNotUnwound	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	private def checkNotUnwound() {$/;"	m
checkRegAlloc	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def checkRegAlloc() {$/;"	m
checkReturnSig	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	def checkReturnSig(results: Array<ValueType>) {$/;"	m
checkSectionCode	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	def checkSectionCode(b: byte) -> BpSection {$/;"	m
checkSignature	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	def checkSignature(sig: SigDecl) {$/;"	m
checkSizeConstraint	$VIRGIL_WIZARD/src/engine/Instantiator.v3	/^	private def checkSizeConstraint(is64: bool, size: u64, fmax: Max, t: SizeConstraint) -> bool {$/;"	m
checkState	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	private def checkState(op: string, expected: StackState) {$/;"	m
checkState	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	private def checkState(op: string, expected: StackState) {$/;"	m
checkStorageType	$VIRGIL_WIZARD/src/engine/Type.v3	/^	def checkStorageType(sub: StorageType, sup: StorageType) -> bool {$/;"	f
checkStore	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	def checkStore(opcode: Opcode, max_align: u32, val: ValueType) {$/;"	m
checkSupertypes	$VIRGIL_WIZARD/src/engine/Type.v3	/^	def checkSupertypes(addr: u64, t: HeapTypeDecl, error: ErrorGen) {$/;"	f
checkTableGrow	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^	private def checkTableGrow(instance: Instance) {$/;"	m
checkTableIndex	$VIRGIL_WIZARD/src/engine/WasmParser.v3	/^	def checkTableIndex(pt: int, index: u32) -> (TableDecl, int) {$/;"	m
checkTagResults	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	def checkTagResults(pt: int, sig_index: int) {$/;"	m
checkTargetArgs	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	def checkTargetArgs(target: ControlEntry) {$/;"	m
checkTargetCatch	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	def checkTargetCatch(i: int, c: Catch, target: ControlEntry) {$/;"	m
checkTopTag	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	def checkTopTag(tag: byte) -> byte {$/;"	m
check_MEMARG	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	def check_MEMARG(opcode: Opcode, max_align: u32) {$/;"	m
check_ZEROB	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	def check_ZEROB(opcode: Opcode) {$/;"	m
children	$VIRGIL_WIZARD/src/monitors/ProfileMonitor.v3	/^	var children: List<ProfileTreeNode>;$/;"	d
choices	$VIRGIL_WIZARD/src/util/PrefixTrie.v3	/^	var choices: Vector<(K, PrefixTrieNode<K, V>)>;$/;"	d
clear	$VIRGIL_WIZARD/src/engine/Probe.v3	/^	def clear() {$/;"	m
clear	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^	def clear() -> this;$/;"	m
clear	$VIRGIL_WIZARD/src/engine/compiler/RegAlloc.v3	/^	def clear() -> this {$/;"	m
clear	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def clear() -> this {$/;"	m
clear	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	def clear() -> this {$/;"	m
clearMerge	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def clearMerge() {$/;"	m
clearReset	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def clearReset() {$/;"	m
clock_res_get	$VIRGIL_WIZARD/src/modules/wasi/x86-64-linux/WspOneModule-x86-64-linux.v3	/^	def clock_res_get(clock_id: int, ptr: int) -> HostResult {$/;"	m
clock_time_get	$VIRGIL_WIZARD/src/modules/wasi/x86-64-linux/WspOneModule-x86-64-linux.v3	/^	def clock_time_get(clock_id: int, lag: long, ptr: int) -> HostResult {$/;"	m
closeAll	$VIRGIL_WIZARD/src/modules/wasi/WasiFdMap.v3	/^	def closeAll() {$/;"	m
closeAll	$VIRGIL_WIZARD/src/util/FileDescriptorMap.v3	/^	def closeAll() {$/;"	m
cmdline_args	$VIRGIL_WIZARD/src/modules/HostModuleBuilder.v3	/^	var cmdline_args: Array<string>;$/;"	d
cnew	$VIRGIL_WIZARD/src/modules/HostModuleBuilder.v3	/^private type ClosureEntry<C>(name: string, sig: SigDecl, cnew: C -> (Range<Value> -> HostResult)) #unboxed;$/;"	d
cnt	$VIRGIL_WIZARD/src/engine/x86-64/V3Offsets.v3	/^	private def cnt = CountProbe.new();$/;"	d
code	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^type ValueTypeCode(code: i8, index: i32) #unboxed {$/;"	d
code	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^enum BpTypeCode(code: byte, val: i7) {$/;"	d
code	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^enum Opcode(prefix: u8, code: u16, mnemonic: string, imms: Array<ImmKind>, sig: SigDecl) {$/;"	d
code	$VIRGIL_WIZARD/src/engine/Value.v3	/^enum ValueKind(code: byte) {$/;"	d
code	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	+48	code		: i64;	\/\/ Array<byte>$/;"	d
code	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^enum WaliErrno(code: byte) {$/;"	d
code	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^enum wasi_filetype(code: byte) {$/;"	d
codeEnd	$VIRGIL_WIZARD/src/engine/x86-64/X86_64PreGenStubs.v3	/^	+84	codeEnd:			i32;	\/\/ end of all executable code$/;"	d
codeEnd	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	var codeEnd: int;			\/\/ for dynamically adding code to the end$/;"	d
codeMarker	$VIRGIL_WIZARD/src/engine/x86-64/X86_64PreGenStubs.v3	/^	+8	codeMarker:			i32;	\/\/ magic word for marking generated$/;"	d
codeOpt	$VIRGIL_WIZARD/src/monitors/CoverageMonitor.v3	/^def codeOpt = monitor_.options.addAlias($/;"	d
codePointer	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^def codePointer<P, R>(f: P -> R) -> Pointer {$/;"	m
codeStart	$VIRGIL_WIZARD/src/engine/x86-64/X86_64PreGenStubs.v3	/^	+20	codeStart:			i32;	\/\/ start of all executable code$/;"	d
code_pages	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def code_pages = [page_FB, page_FC, page_FD, page_FE];$/;"	d
code_slot	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^	var code_slot: MasmAddr;$/;"	d
codegen_offset	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	var codegen_offset: u64 = 0;$/;"	d
codeptr	$VIRGIL_WIZARD/src/engine/BytecodeIterator.v3	/^	private def codeptr = CodePtr.new(null);$/;"	d
codeptr	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	def codeptr = CodePtr.new(null);$/;"	d
codeptr	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def codeptr = CodePtr.new([]);$/;"	d
codeptr	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def codeptr = CodePtr.new(null);	\/\/ pointer into code$/;"	d
codeptr	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	def codeptr = DataReader.new([]);$/;"	d
codeptr	$VIRGIL_WIZARD/src/util/BasicTracing.v3	/^	def codeptr = DataReader.new([]);$/;"	d
color	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	var color: byte;	\/\/ used in traversing the graph$/;"	d
color	$VIRGIL_WIZARD/src/util/TraceUtil.v3	/^	var color: Color;$/;"	d
combineEq	$VIRGIL_WIZARD/src/engine/Type.v3	/^	def combineEq(a: TypeEquiv, b: TypeEquiv) -> TypeEquiv {$/;"	f
commonSetup	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^	private def commonSetup() {$/;"	m
commute_binop	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def commute_binop<T, R>(f: (T, T) -> R) -> (T, T) -> R {$/;"	m
commute_binop0	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def commute_binop0<T, R>(f: (T, T) -> R, a: T, b: T) -> R {$/;"	m
compactTrace	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^	def compactTrace() {$/;"	m
compare	$VIRGIL_WIZARD/src/engine/Type.v3	/^	def compare(from: ValueType, to: ValueType) -> TypeEquiv {$/;"	f
compare	$VIRGIL_WIZARD/src/monitors/HotnessMonitor.v3	/^	def compare(that: LocCounter) -> bool {$/;"	m
compare	$VIRGIL_WIZARD/src/monitors/OpcodeMonitor.v3	/^def compare(a: OpcodeEntry, b: OpcodeEntry) -> bool {$/;"	m
compareEntries	$VIRGIL_WIZARD/src/monitors/BlocksMonitor.v3	/^def compareEntries(a: BasicBlockCount, b: BasicBlockCount) -> bool {$/;"	m
compareEntries	$VIRGIL_WIZARD/src/monitors/FuncProfileMonitor.v3	/^def compareEntries(a: EnterProbe, b: EnterProbe) -> bool {$/;"	m
compareEntries	$VIRGIL_WIZARD/src/monitors/InstrCountMonitor.v3	/^def compareEntries(a: (FuncDecl, int, CountProbe), b: (FuncDecl, int, CountProbe)) -> bool {$/;"	m
compareHeapTypes	$VIRGIL_WIZARD/src/engine/Type.v3	/^	def compareHeapTypes(from: HeapType, to: HeapType) -> TypeEquiv {$/;"	f
compareNullable	$VIRGIL_WIZARD/src/engine/Type.v3	/^	def compareNullable(f: bool, t: bool) -> TypeEquiv {$/;"	f
compareSuperTypeChain	$VIRGIL_WIZARD/src/engine/Type.v3	/^	def compareSuperTypeChain(from: HeapTypeDecl, to: HeapTypeDecl) -> TypeEquiv {$/;"	f
compileEntireModule	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Target.v3	/^	def compileEntireModule(module: Module, size: u32, interpreter_fallback: bool, err: ErrorGen, ballast: u32) {$/;"	m
compileFunction	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Target.v3	/^	private def compileFunction(wf: WasmFunction, how: string) -> SpcResultForStub {$/;"	m
compileWhammModules	$VIRGIL_WIZARD/src/engine/Tuning.v3	/^	var compileWhammModules = true;		\/\/ compile whamm module, if possible$/;"	d
compiler	$VIRGIL_WIZARD/src/engine/Debug.v3	/^	def compiler = false;$/;"	d
compiler	$VIRGIL_WIZARD/src/engine/Trace.v3	/^	var compiler = false;$/;"	d
compiler	$VIRGIL_WIZARD/src/engine/TraceOptions.v3	/^	compiler('k', "compiler(s)"),$/;"	d
complexBlockTypes	$VIRGIL_WIZARD/src/engine/Tuning.v3	/^	def complexBlockTypes = false;	\/\/ required for GC and function references$/;"	d
compute	$VIRGIL_WIZARD/src/util/CfgPrinter.v3	/^	def compute(module: Module, func: FuncDecl) -> Array<CfgPrintEntry> {$/;"	m
computeDepth	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	private def computeDepth() -> int {$/;"	m
computeEntrySize	$VIRGIL_WIZARD/src/engine/Sidetable.v3	/^	def computeEntrySize(opcode: Opcode, immptr: CodePtr) -> int {$/;"	f
computeMaskAndShift	$VIRGIL_WIZARD/src/util/StringSet.v3	/^	def computeMaskAndShift(max: int) -> (int, u5) {$/;"	f
computePCFromFrame	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^	def computePCFromFrame(sp: Pointer) -> int {$/;"	f
computePadding	$VIRGIL_WIZARD/src/util/TraceUtil.v3	/^def computePadding(diff: int, justify: Justification) -> (int, int) {$/;"	m
config	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def config = masm.regConfig;$/;"	d
configure	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^	def configure(args: string) -> string {$/;"	m
configure	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	def configure(args: string) -> string {$/;"	m
configure	$VIRGIL_WIZARD/src/monitors/FuncProfileMonitor.v3	/^	def configure(args: string) -> string {$/;"	m
configure	$VIRGIL_WIZARD/src/monitors/Monitor.v3	/^	def configure(args: string) -> string {$/;"	m
configure	$VIRGIL_WIZARD/src/monitors/ProfileMonitor.v3	/^	def configure(args: string) -> string {$/;"	m
configure	$VIRGIL_WIZARD/src/monitors/R3BackEndMonitor.v3	/^	def configure(args: string) -> string {$/;"	m
configure	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^	def configure(args: string) -> string {$/;"	m
configure	$VIRGIL_WIZARD/src/monitors/TimeoutMonitor.v3	/^	def configure(args: string) -> string {$/;"	m
const	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^type SpcVal(flags: byte, reg: Reg, const: int) #unboxed {$/;"	d
const	$VIRGIL_WIZARD/src/monitors/ConstMonitor.v3	/^	var const: Value;$/;"	d
constRegMoves	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	private def constRegMoves = Vector<(ValueKind, int, Reg)>.new();$/;"	d
constSlotMoves	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	private def constSlotMoves = Vector<(ValueKind, int, u32)>.new();$/;"	d
consts	$VIRGIL_WIZARD/src/monitors/ConstMonitor.v3	/^	def consts = Array<Value>.new(func.sig.params.length);$/;"	d
cont	$VIRGIL_WIZARD/src/engine/Type.v3	/^	case Cont(cont: ContDecl);$/;"	d
cont	$VIRGIL_WIZARD/src/engine/x86-64/V3Offsets.v3	/^	private def cont = Continuation.new(null);$/;"	d
cont_bottom	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^	var cont_bottom: WasmStack;$/;"	d
cont_decl	$VIRGIL_WIZARD/src/engine/x86-64/V3Offsets.v3	/^	private def cont_decl = ContDecl.new(false, [], HeapType.ANY);$/;"	d
contains	$VIRGIL_WIZARD/src/engine/x86-64/Mmap.v3	/^	def contains(p: Pointer) -> bool {$/;"	m
copy	$VIRGIL_WIZARD/src/engine/compiler/RegAlloc.v3	/^	def copy() -> RegAlloc {$/;"	m
copyBytes	$VIRGIL_WIZARD/src/modules/wasi/x86-64-linux/WspOneModule-x86-64-linux.v3	/^	def copyBytes(src : Range<byte>, dst : Range<byte>) {$/;"	m
copyE	$VIRGIL_WIZARD/src/engine/Table.v3	/^	def copyE(instance: Instance, dst_offset: u64, elem: ElemDecl, src_offset: u64, size: u64) -> TrapReason {$/;"	m
copyElemsInto	$VIRGIL_WIZARD/src/engine/Runtime.v3	/^	def copyElemsInto(dest: Array<Value>, instance: Instance, dst_offset: u64, elem: ElemDecl, src_offset: u64, size: u64) -> bool {$/;"	f
copyIn	$VIRGIL_WIZARD/src/engine/Memory.v3	/^	def copyIn(dst_offset: u64, src: Array<byte>, src_offset: u64, size: u64) -> TrapReason {$/;"	m
copyInto	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Target.v3	/^	def copyInto(range: MemoryRange, offset: int, w: DataWriter) -> int {$/;"	f
copyInto	$VIRGIL_WIZARD/src/util/ArrayUtil.v3	/^	def copyInto<T>(dst: Array<T>, dst_start: int,$/;"	f
copyM	$VIRGIL_WIZARD/src/engine/Memory.v3	/^	def copyM(dst_offset: u64, src: Memory, src_offset: u64, size: u64) -> TrapReason {$/;"	m
copyMerge	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def copyMerge() -> Array<SpcVal> {$/;"	m
copyReverse	$VIRGIL_WIZARD/src/util/ArrayUtil.v3	/^	def copyReverse<T>(v: Vector<T>) -> Array<T> {$/;"	f
copyString	$VIRGIL_WIZARD/src/modules/ModuleRegistry.v3	/^	def copyString(memory: Memory, offset: Value, size: Value) -> MaybeTrap<string> {$/;"	m
copyStringZ	$VIRGIL_WIZARD/src/modules/HostModuleBuilder.v3	/^	def copyStringZ(offset: int, size: int) -> MaybeTrap<Range<byte>> {$/;"	m
copyStringZ	$VIRGIL_WIZARD/src/modules/ModuleRegistry.v3	/^	def copyStringZ(memory: Memory, offset: Value, size: Value) -> MaybeTrap<Range<byte>> {$/;"	m
copyT	$VIRGIL_WIZARD/src/engine/Table.v3	/^	def copyT(dst_offset: u64, src: Table, src_offset: u64, size: u64) -> TrapReason {$/;"	m
copyVals	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def copyVals(count: int, dest: int) {$/;"	m
cost	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^case STEP(bytecode: u8, offset: u64, cost: u64, wasm_func_trace: List<WasmFuncTrace>);$/;"	d
count	$VIRGIL_WIZARD/src/engine/Metrics.v3	/^	var count: u64;$/;"	d
count	$VIRGIL_WIZARD/src/monitors/AllocMonitor.v3	/^	case Struct(count: CountProbe);$/;"	d
count	$VIRGIL_WIZARD/src/monitors/ConstMonitor.v3	/^	var count = 0uL;$/;"	d
count	$VIRGIL_WIZARD/src/monitors/ControlInstrumenter.v3	/^	def count: u31;$/;"	d
count	$VIRGIL_WIZARD/src/monitors/FuncProfileMonitor.v3	/^	var count: u64;$/;"	d
count	$VIRGIL_WIZARD/src/monitors/InstrCountMonitor.v3	/^	var count: u32;$/;"	d
count	$VIRGIL_WIZARD/src/monitors/OpcodeMonitor.v3	/^type OpcodeEntry(op: Opcode, static_count: u32, count: CountProbe) #unboxed;$/;"	d
count	$VIRGIL_WIZARD/src/monitors/ProfileMonitor.v3	/^	var count: int;$/;"	d
count	$VIRGIL_WIZARD/src/monitors/TimeoutMonitor.v3	/^	var count = -1;$/;"	d
count	$VIRGIL_WIZARD/src/util/ProbeUtil.v3	/^class TimeoutProbe(var count: int) extends Probe {$/;"	d
countEveryInstr	$VIRGIL_WIZARD/src/monitors/InstrCountMonitor.v3	/^def countEveryInstr = false; \/\/ if true, use a probe on every single instruction$/;"	d
countPerEdge	$VIRGIL_WIZARD/src/monitors/ControlMonitor.v3	/^def countPerEdge = true;$/;"	d
count_	$VIRGIL_WIZARD/src/monitors/InstrCountMonitor.v3	/^def count_ = MonitorRegistry.add($/;"	d
count_	$VIRGIL_WIZARD/src/monitors/TimeoutMonitor.v3	/^def count_ = monitor_.options.newIntOption("instrs", -1, "set the instruction count limit");$/;"	d
counter	$VIRGIL_WIZARD/src/monitors/BlocksMonitor.v3	/^type BasicBlockCount(start: int, end: int, instrs: int, counter: CountProbe) #unboxed;$/;"	d
counter	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^private class GuestProfileState(counter: CountProbe, dispatch_func_id: int, output_prefix: string) {$/;"	d
counter	$VIRGIL_WIZARD/src/util/ProbeUtil.v3	/^	var counter: i64 = -1;$/;"	d
counters	$VIRGIL_WIZARD/src/monitors/HotnessMonitor.v3	/^	def counters = Vector<LocCounter>.new();$/;"	d
counts	$VIRGIL_WIZARD/src/monitors/AllocMonitor.v3	/^	case Array(counts: Array<u64>);$/;"	d
counts	$VIRGIL_WIZARD/src/monitors/CallsMonitor.v3	/^	def counts = Vector<(Function, u64)>.new();$/;"	d
crash	$VIRGIL_WIZARD/src/modules/wizeng/WizengModule.v3	/^	def crash(args: Range<Value>) -> HostResult {$/;"	m
creat	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^    creat,$/;"	d
createMerge	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def createMerge(valcount: u32, popcount: u32) -> Array<SpcVal> {$/;"	m
create_pos	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^class MasmLabel(create_pos: int) {$/;"	d
cs	$VIRGIL_WIZARD/src/util/CfgPrinter.v3	/^	private def cs = ControlStack<int>.new();$/;"	d
ctim	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	+56	ctim:		u64;$/;"	d
ctl_stack	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	def ctl_stack = ArrayStack<ControlEntry>.new();$/;"	d
ctl_stack	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	var ctl_stack = ArrayStack<SpcControl>.new();$/;"	d
ctl_stack	$VIRGIL_WIZARD/src/util/CfgBuilder.v3	/^	private def ctl_stack = ControlStack<CfgBlock>.new();$/;"	d
ctl_top	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	var ctl_top: ControlEntry;  \/\/ FAST: cache of top of control stack$/;"	d
ctlxfer	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	def ctlxfer = SidetableBuilder.new();$/;"	d
ctx_stack	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^	private def ctx_stack = ListStack<ReplayContext>.new();$/;"	d
cumul	$VIRGIL_WIZARD/src/monitors/FuncProfileMonitor.v3	/^	var cumul: u64;$/;"	d
curCodeBytes	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def curCodeBytes() -> u64 {$/;"	m
curCodeBytes	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def curCodeBytes() -> u64 {$/;"	m
curDataBytes	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def curDataBytes() -> u64 {$/;"	m
curNode	$VIRGIL_WIZARD/src/monitors/ProfileMonitor.v3	/^	var curNode: ProfileTreeNode;$/;"	d
curStack	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Runtime.v3	/^	var curStack: X86_64Stack;$/;"	d
curTime	$VIRGIL_WIZARD/src/monitors/ProfileMonitor.v3	/^	var curTime: int;$/;"	d
cur_bytecode	$VIRGIL_WIZARD/src/engine/Module.v3	/^	def var cur_bytecode: Array<byte>;		\/\/ current (potentially instrumented) bytecode$/;"	d
cur_wasm_func_trace	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^	var cur_wasm_func_trace: List<WasmFuncTrace>;$/;"	d
curpc	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^	var curpc: Reg;$/;"	d
curpc	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	+88	curpc		: int;$/;"	d
curpc_slot	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^	var curpc_slot: MasmAddr;$/;"	d
current	$VIRGIL_WIZARD/src/engine/BytecodeIterator.v3	/^	def current() -> Opcode {$/;"	m
current	$VIRGIL_WIZARD/src/util/BasicBlockIterator.v3	/^	def current() -> (int, int) {$/;"	m
current_function_body	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	var current_function_body: u32;$/;"	d
current_pos	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	var current_pos: int;$/;"	d
current_section	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	var current_section: BpSection;$/;"	d
cursor	$VIRGIL_WIZARD/src/engine/Canon.v3	/^	private var cursor: int;$/;"	d
custom_sections	$VIRGIL_WIZARD/src/engine/Module.v3	/^	def custom_sections = Vector<CustomSection>.new();$/;"	d
cv	$VIRGIL_WIZARD/src/monitors/WhammMonitor.v3	/^	def cv = CodeValidator.new(Extension.set.all, Limits.new().set(Extension.set.all), wi.app, err);$/;"	d
cvt2si_r_s	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def cvt2si_r_s = if(isF64, X86_64Assembler.cvtsd2si_r_s, X86_64Assembler.cvtss2si_r_s);$/;"	d
d_1p1	$VIRGIL_WIZARD/src/util/FloatUtil.v3	/^	def d_1p1	= 0x40000000_00000000uL;	\/\/ 2^1 as double$/;"	d
d_1p31	$VIRGIL_WIZARD/src/util/FloatUtil.v3	/^	def d_1p31	= 0x41e00000_00000000uL;	\/\/ 2^31 as double$/;"	d
d_1p32	$VIRGIL_WIZARD/src/util/FloatUtil.v3	/^	def d_1p32	= 0x41f00000_00000000uL;$/;"	d
d_1p33	$VIRGIL_WIZARD/src/util/FloatUtil.v3	/^	def d_1p33	= 0x42000000_00000000uL;$/;"	d
d_1p63	$VIRGIL_WIZARD/src/util/FloatUtil.v3	/^	def d_1p63	= 0x43e00000_00000000uL;$/;"	d
d_1p64	$VIRGIL_WIZARD/src/util/FloatUtil.v3	/^	def d_1p64	= 0x43f00000_00000000uL;$/;"	d
d_d	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def d_d = S(arr_d, arr_d);$/;"	d
d_f	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def d_f = S(arr_d, arr_f);$/;"	d
d_i	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def d_i = S(arr_d, arr_i);$/;"	d
d_infinity	$VIRGIL_WIZARD/src/util/FloatUtil.v3	/^	def d_infinity	= 0x7ff0000000000000uL;$/;"	d
d_ino	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^        +8	d_ino:		u64;$/;"	d
d_l	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def d_l = S(arr_d, arr_l);$/;"	d
d_minus0	$VIRGIL_WIZARD/src/util/FloatUtil.v3	/^	def d_minus0	= 0x80000000_00000000uL;$/;"	d
d_minus1	$VIRGIL_WIZARD/src/util/FloatUtil.v3	/^	def d_minus1	= 0xbff00000_00000000uL;$/;"	d
d_minus1p31	$VIRGIL_WIZARD/src/util/FloatUtil.v3	/^	def d_minus1p31 = 0xc1e00000_00000000uL;	\/\/ -2^31 as double$/;"	d
d_minus1p32	$VIRGIL_WIZARD/src/util/FloatUtil.v3	/^	def d_minus1p32 = 0xc1f00000_00000000uL;$/;"	d
d_minus1p33	$VIRGIL_WIZARD/src/util/FloatUtil.v3	/^	def d_minus1p33 = 0xc2000000_00000000uL;$/;"	d
d_minus1p63	$VIRGIL_WIZARD/src/util/FloatUtil.v3	/^	def d_minus1p63 = 0xc3e00000_00000000uL;$/;"	d
d_minus1p64	$VIRGIL_WIZARD/src/util/FloatUtil.v3	/^	def d_minus1p64 = 0xc3f00000_00000000uL;$/;"	d
d_minus_infinity	$VIRGIL_WIZARD/src/util/FloatUtil.v3	/^	def d_minus_infinity	= 0xfff0000000000000uL;$/;"	d
d_namelen	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	+16	d_namelen:	u32;$/;"	d
d_nan	$VIRGIL_WIZARD/src/util/FloatUtil.v3	/^	def d_nan	= 0x7ff80000_00000000uL;$/;"	d
d_next	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	+0	d_next:		u64;$/;"	d
d_s	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def d_s = S(arr_d, arr_s);$/;"	d
d_type	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^        +20     d_type:         Wasi_filetype;$/;"	d
data	$VIRGIL_WIZARD/src/engine/Module.v3	/^class DataDecl(mode: SegmentMode, data: Array<byte>) {$/;"	d
data	$VIRGIL_WIZARD/src/engine/v3/V3Memory.v3	/^	def var data: Array<byte>;$/;"	d
data	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^private class MemoryInitProbe(handler: EventHandler, mem_index: u31, data: Array<u8>) extends Probe {$/;"	d
data	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^	case Load(idx: int, offset: u64, data: Array<u8>);$/;"	d
data_index	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case ArrayNewData(t: HeapType.Array, data_index: int, offset: InitExpr, len: InitExpr);$/;"	d
dd_d	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def dd_d = S(arr_dd, arr_d);$/;"	d
dd_i	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def dd_i = S(arr_dd, arr_i);$/;"	d
deactivateProbingAt	$VIRGIL_WIZARD/src/engine/Module.v3	/^	def deactivateProbingAt(pc: int) {$/;"	m
deallocate	$VIRGIL_WIZARD/src/engine/Memory.v3	/^	def deallocate() { }				\/\/ default: do nothing$/;"	m
deallocate	$VIRGIL_WIZARD/src/engine/native/NativeMemory.v3	/^	def deallocate() {$/;"	m
deallocate	$VIRGIL_WIZARD/src/engine/v3/V3Memory.v3	/^	def deallocate() {$/;"	m
debug	$VIRGIL_WIZARD/src/util/Whamm.v3	/^def debug(r: TextReader, where: string) {$/;"	m
debugBuffer	$VIRGIL_WIZARD/src/engine/WasmParser.v3	/^	def debugBuffer() {$/;"	m
decl	$VIRGIL_WIZARD/src/engine/Instance.v3	/^class WasmFunction(instance: Instance, decl: FuncDecl) extends Function {$/;"	d
decl	$VIRGIL_WIZARD/src/engine/Memory.v3	/^class Memory(decl: MemoryDecl) extends Exportable {$/;"	d
decl	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case Global(global_index: int, decl: GlobalDecl);$/;"	d
decl	$VIRGIL_WIZARD/src/engine/Table.v3	/^class Table(elemtype: ValueType, decl: TableDecl) extends Exportable {$/;"	d
decl	$VIRGIL_WIZARD/src/engine/Type.v3	/^	def decl() -> HeapTypeDecl {$/;"	m
decl	$VIRGIL_WIZARD/src/engine/Value.v3	/^class HeapObject(decl: HeapTypeDecl, vals: Array<Value>) extends Object {}$/;"	d
decl	$VIRGIL_WIZARD/src/engine/x86-64/V3Offsets.v3	/^	private def decl = FuncDecl.new(0);$/;"	d
decl	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^class X86_64FrameAccessor(stack: X86_64Stack, sp: Pointer, decl: FuncDecl) extends FrameAccessor {$/;"	d
decl	$VIRGIL_WIZARD/src/monitors/MemStatsMonitor.v3	/^	def decl: MemoryDecl;$/;"	d
decl_pos	$VIRGIL_WIZARD/src/util/CfgBuilder.v3	/^class CfgBlock(decl_pos: int) {$/;"	d
declared_func_count	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	private var declared_func_count: u32;$/;"	d
decls	$VIRGIL_WIZARD/src/engine/Canon.v3	/^	private def decls = Array<HeapTypeDecl>.new(length);$/;"	d
decls	$VIRGIL_WIZARD/src/engine/Module.v3	/^	def decls = Vector<Decl2>.new();$/;"	d
decode	$VIRGIL_WIZARD/src/util/OpcodeMap.v3	/^	def decode(r: DataReader) -> (Opcode, T) {$/;"	m
decodeFunctionBody	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	def decodeFunctionBody(index: u32, size: u32, decoder: DataReader) {$/;"	m
decodeLoop	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	private def decodeLoop() {$/;"	m
decodeMemArgAndGetMemoryRange	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def decodeMemArgAndGetMemoryRange(size: byte) -> MaybeTrap<Range<byte>> {$/;"	m
decodeMemarg	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	private def decodeMemarg(imm: MemArg) -> (X86_64Addr, TrapReason) {$/;"	m
decodeSection	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	def decodeSection(kind: BpSection, size: u32, d: DataReader);$/;"	m
decode_memarg_addr	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def decode_memarg_addr(base: Reg, index: Reg, offset: u32) -> X86_64Addr {$/;"	m
decoded	$VIRGIL_WIZARD/src/engine/NameSection.v3	/^	private var decoded: bool;$/;"	d
decoder	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	private var decoder: DataReader;$/;"	d
decoder	$VIRGIL_WIZARD/src/engine/WasmParser.v3	/^	err: ErrorGen, var decoder: DataReader) {$/;"	d
default	$VIRGIL_WIZARD/src/engine/Execute.v3	/^	def var default: ExecutionStrategy;$/;"	d
defaultBindLabel	$VIRGIL_WIZARD/src/util/ControlStack.v3	/^	def defaultBindLabel(pc: int, b: B) {$/;"	m
defaultHostFunc	$VIRGIL_WIZARD/src/monitors/R3BackEndMonitor.v3	/^	private def defaultHostFunc(params: Range<Value>, result_types: Array<ValueType>) -> HostResult {$/;"	m
defaultMergeBlock	$VIRGIL_WIZARD/src/util/ControlStack.v3	/^	def defaultMergeBlock(from: B, to: B) -> B {$/;"	m
defaultNewLabel	$VIRGIL_WIZARD/src/util/ControlStack.v3	/^	def defaultNewLabel() -> B {$/;"	m
defaultSplitBlock	$VIRGIL_WIZARD/src/util/ControlStack.v3	/^	def defaultSplitBlock(b: B) -> (B, B) {$/;"	m
defaultSplitBlockInto	$VIRGIL_WIZARD/src/util/ControlStack.v3	/^	def defaultSplitBlockInto(from: B, to: B) -> (B, B) {$/;"	m
default_elem	$VIRGIL_WIZARD/src/engine/Module.v3	/^	var default_elem: InitExpr;$/;"	d
default_event	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^	private def default_event = WasmEvent.ImportCall(0);$/;"	d
default_target_code	$VIRGIL_WIZARD/src/engine/x86-64/X86_64WhammProbeTrampoline.v3	/^def default_target_code: X86_64SpcModuleCode;$/;"	d
defaultable	$VIRGIL_WIZARD/src/engine/Type.v3	/^	def defaultable = allHaveDefaultValues(field_types);$/;"	d
defer	$VIRGIL_WIZARD/src/engine/Probe.v3	/^	private var defer: bool;$/;"	d
deferred	$VIRGIL_WIZARD/src/engine/Probe.v3	/^	private var deferred: Vector<(bool, Probe)>;$/;"	d
deferred_imports	$VIRGIL_WIZARD/src/modules/ModuleLinker.v3	/^	private var deferred_imports: Array<Array<int>>;$/;"	d
defstr	$VIRGIL_WIZARD/src/util/Palette.v3	/^enum Color(defstr: string) {$/;"	d
deinit	$VIRGIL_WIZARD/src/modules/ModuleRegistry.v3	/^	def deinit(result: Result) { }$/;"	m
delegate_pos	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	var delegate_pos: int;$/;"	d
delta	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	var delta: int;$/;"	d
deoptReentryOffset	$VIRGIL_WIZARD/src/engine/x86-64/X86_64PreGenStubs.v3	/^	+40	deoptReentryOffset:		i32;	\/\/ re-enter interpreter from optimized code$/;"	d
deoptToInterpreter	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	private def deoptToInterpreter() {$/;"	m
deoptToInterpreter0	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	private def deoptToInterpreter0(func: FuncDecl, pc: int, stp: int) {$/;"	m
depth	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^type BrOnCastImm(flags: u8, depth: u31, ht1: int, ht2: int) #unboxed {$/;"	d
depth	$VIRGIL_WIZARD/src/engine/WasmParser.v3	/^type Catch(tag: TagDecl, exnref: bool, depth: u32) {$/;"	d
depth	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^	def depth() -> int;$/;"	m
depth	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def depth: int = if(prev != null, 1 + prev.depth);$/;"	d
depth	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^class VspHelper(vsp: X86_64Gpr, valuerep: Tagging, depth: int) {$/;"	d
depth	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	def depth() -> int {$/;"	m
depth	$VIRGIL_WIZARD/src/monitors/LoopMonitor.v3	/^private class LmEntry(module: Module, func: FuncDecl, depth: int, pc: int) extends CountProbe {$/;"	d
depth	$VIRGIL_WIZARD/src/util/ControlStack.v3	/^class ControlStackEntry<B>(depth: int) {$/;"	d
depthOpt	$VIRGIL_WIZARD/src/monitors/ProfileMonitor.v3	/^def depthOpt = monitor_.options.newIntOption("depth", -1, "limit the maximum call tree depth");$/;"	d
describeFrame	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^	def describeFrame(ip: Pointer, sp: Pointer, out: Range<byte> -> void) {$/;"	m
describeFrame	$VIRGIL_WIZARD/src/engine/x86-64/X86_64PreGenStubs.v3	/^	def describeFrame(ip: Pointer, sp: Pointer, out: Range<byte> -> void) {$/;"	m
describeFrame	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def describeFrame(ip: Pointer, sp: Pointer, out: Range<byte> -> void) {$/;"	m
describeFrame	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	def describeFrame(ip: Pointer, sp: Pointer, out: Range<byte> -> void) {$/;"	m
deserializeOrGenerateCode	$VIRGIL_WIZARD/src/engine/x86-64/X86_64PreGenStubs.v3	/^	def deserializeOrGenerateCode() -> X86_64InterpreterCode {$/;"	f
destProbes	$VIRGIL_WIZARD/src/monitors/ModuleInstrumenter.v3	/^private class AfterInstrProbe(module: Module, opcode: Opcode, destProbes: Range<AfterInstrDestProbe>, f: DynamicLoc -> ProbeAction) extends Probe {$/;"	d
dest_label	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^type SpcHandlerInfo(is_dummy: bool, dest_label: MasmLabel, stub_label: MasmLabel, merge_state: Array<SpcVal>);$/;"	d
dest_label	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Target.v3	/^	var dest_label: MasmLabel;$/;"	d
dest_stack	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Target.v3	/^	var dest_stack: Array<ValueType>;$/;"	d
details	$VIRGIL_WIZARD/src/engine/Module.v3	/^class ElemDecl(elemtype: ValueType, mode: SegmentMode, details: ElemDetails) {$/;"	d
dev	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	+0	dev:		u64;$/;"	d
diagnostic	$VIRGIL_WIZARD/src/engine/Debug.v3	/^	def diagnostic = false;$/;"	d
directCalls	$VIRGIL_WIZARD/src/engine/Tuning.v3	/^	def directCalls = false;		\/\/ XXX: implement$/;"	d
directory	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^    directory,$/;"	d
direntbuf	$VIRGIL_WIZARD/src/modules/wasi/x86-64-linux/WspOneModule-x86-64-linux.v3	/^def direntbuf = Array<byte>.new(1024);$/;"	d
dirs	$VIRGIL_WIZARD/src/modules/wasi/WasiOptions.v3	/^	def dirs = Vector<string>.new();$/;"	d
disable	$VIRGIL_WIZARD/src/engine/Tuning.v3	/^	def disable = false;			\/\/ completely disables the compiler (at build time).$/;"	d
disable	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	def disable() { enabled = false; }$/;"	m
disable	$VIRGIL_WIZARD/src/util/ProbeUtil.v3	/^	def disable() {$/;"	m
disableFor	$VIRGIL_WIZARD/src/util/ProbeUtil.v3	/^	def disableFor(n: u63) {$/;"	m
disableMemoryBoundsChecks	$VIRGIL_WIZARD/src/engine/Tuning.v3	/^	var disableMemoryBoundsChecks = false; \/\/ unsafe! don't emit bounds checks$/;"	d
dispatch	$VIRGIL_WIZARD/src/engine/BytecodeIterator.v3	/^	def dispatch(v: BytecodeVisitor) {$/;"	m
dispatch	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^	var dispatch: Reg;$/;"	d
dispatch0	$VIRGIL_WIZARD/src/engine/BytecodeIterator.v3	/^	private def dispatch0(opcode: Opcode, v: BytecodeVisitor) {$/;"	m
dispatchAll	$VIRGIL_WIZARD/src/engine/BytecodeIterator.v3	/^	def dispatchAll(v: BytecodeVisitor) {$/;"	m
dispatchEntrySize	$VIRGIL_WIZARD/src/engine/Tuning.v3	/^	def dispatchEntrySize = 4;	\/\/ size of each dispatch table entry$/;"	d
dispatchLocalDecls	$VIRGIL_WIZARD/src/engine/BytecodeIterator.v3	/^	def dispatchLocalDecls(v: BytecodeVisitor) {$/;"	m
dispatchTable	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^	var dispatchTable: Pointer;$/;"	d
dispatch_func_id	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^private class GuestProfileState(counter: CountProbe, dispatch_func_id: int, output_prefix: string) {$/;"	d
displayName	$VIRGIL_WIZARD/src/util/OptionsRegistry.v3	/^class OptionGroupEntry(opt: Opt, var displayName: string, typeName: string, help: string) { }$/;"	d
divZeroHandlerOffset	$VIRGIL_WIZARD/src/engine/x86-64/X86_64PreGenStubs.v3	/^	+48	divZeroHandlerOffset:		i32;	\/\/ handler for signals caused by divide by zero$/;"	d
doAtomicCmpXchg	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def doAtomicCmpXchg<T>(accessor: MemoryAccessor<T>, replacement: T, expected: T, push: T -> void) {$/;"	m
doAtomicLoad	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def doAtomicLoad<T>(accessor: MemoryAccessor<T>, push: T -> void) {$/;"	m
doAtomicRmw	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def doAtomicRmw<T>(accessor: MemoryAccessor<T>, val: T, op: (T, T) -> T, push: T -> void) {$/;"	m
doAtomicStore	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def doAtomicStore<T>(accessor: MemoryAccessor<T>, pop: void -> T) {$/;"	m
doAtomicXchg	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def doAtomicXchg<T>(accessor: MemoryAccessor<T>, replacement: T, push: T -> void) {$/;"	m
doBlock	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def doBlock(bt: BlockType) -> Label;$/;"	m
doBranch	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def doBranch(label: Label);$/;"	m
doBranch	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def doBranch(pc: int, cond: bool) -> bool {$/;"	m
doCall	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def doCall(sig: Signature, target: Function);$/;"	m
doCallFunction	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def doCallFunction(f: Function) {$/;"	m
doCtlXfer	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def doCtlXfer(pc: int, stp: int, sidetable: Sidetable) -> int {$/;"	m
doElse	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def doElse() -> Label;$/;"	m
doElse	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def doElse() {$/;"	m
doEnd	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def doEnd();$/;"	m
doExtractLane	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def doExtractLane<T, S>(log2_size: u3, view: u64 -> T, extend: T -> S, stack_push: S -> void) {$/;"	m
doExtractLane0	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def doExtractLane0<T, S>(v: (u64, u64), idx: byte, log2_size: u3, view: u64 -> T, extend: T -> S) -> S {$/;"	m
doFallthru	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def doFallthru();$/;"	m
doFallthru	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def doFallthru() {$/;"	m
doFirstTransferAndGetMerge	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def doFirstTransferAndGetMerge(valcount: u32, popcount: u32, resolver: SpcMoveResolver) -> Array<SpcVal> {$/;"	m
doGoto	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def doGoto(pc: int) -> int {$/;"	m
doGroup	$VIRGIL_WIZARD/src/engine/Canon.v3	/^	def doGroup(heaptypes: Vector<HeapTypeDecl>, recgrp_start: int, count: int) {$/;"	m
doHostReturn	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def doHostReturn(fp: int, sig: SigDecl) {$/;"	m
doIf	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def doIf(bt: BlockType) -> Label;$/;"	m
doLoad	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def doLoad<T>(accessor: MemoryAccessor<T>, push: T -> void) {$/;"	m
doLoadExtend	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def doLoadExtend<Tn, Sw, Uw>(size: byte, view: u64 -> Tn, extend: Tn -> Sw, convert: Sw -> Uw) {$/;"	m
doLoadLane	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def doLoadLane<T>(accessor: MemoryAccessor<T>) {$/;"	m
doLoadSplat	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def doLoadSplat<T>(accessor: MemoryAccessor<T>) {$/;"	m
doLoadZero	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def doLoadZero<T>(accessor: MemoryAccessor<T>) {$/;"	m
doLoop	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def doLoop(bt: BlockType) -> Label;$/;"	m
doMultiplyAdd	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def doMultiplyAdd(is64: bool, isNeg: bool) {$/;"	m
doOne	$VIRGIL_WIZARD/src/engine/Canon.v3	/^	def doOne(decl: HeapTypeDecl) -> HeapTypeDecl {$/;"	m
doReplaceLane	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def doReplaceLane<T, S>(log2_size: u3, view: S -> T, stack_pop: void -> S, mask: u64) {$/;"	m
doReturn	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def doReturn();$/;"	m
doReturn	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def doReturn(fp: int, sig: SigDecl) {$/;"	m
doReturnCall	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def doReturnCall(sig: Signature, target: Function);$/;"	m
doShuffle	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def doShuffle(){$/;"	m
doShuffle0	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def doShuffle0(a: (u64, u64), b: (u64, u64)) -> u64 {$/;"	m
doSkipToEndOfBlock	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def doSkipToEndOfBlock() {$/;"	m
doSplat	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def doSplat<T, S>(size: byte, log2_size: u5, view: S -> T, stack_pop: void -> S) {$/;"	m
doSplatV	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def doSplatV(size: byte, log2_size: u5, val: u64) {$/;"	m
doStore	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def doStore<T>(accessor: MemoryAccessor<T>, val: T) {$/;"	m
doStoreLane	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def doStoreLane<T>(accessor: MemoryAccessor<T>, view: u64 -> T) {$/;"	m
doSwitch	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def doSwitch(labels: Labels, key: u32);$/;"	m
doSwitch	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def doSwitch(pc: int, key: u32) -> int {$/;"	m
doSwizzle	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def doSwizzle(){$/;"	m
doSwizzle0	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def doSwizzle0(a: (u64, u64), b: u64) -> u64 {$/;"	m
doTry	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def doTry(bt: BlockType);$/;"	m
do_32_ext_64	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def do_32_ext_64<T, Tw, Uw>(src: u32, dest_bits: byte, $/;"	m
do_64_extmul_32	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def do_64_extmul_32<T, Tw, Uw>(src_a: u32, src_b: u32, dest_bits: byte,$/;"	m
do_c_op2_x_x	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	private def do_c_op2_x_x<T>(kind: ValueKind, emit: (X86_64Xmmr, X86_64Xmmr) -> T) -> bool {$/;"	m
do_c_op2_x_x_xtmp	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	private def do_c_op2_x_x_xtmp<T>(kind: ValueKind, emit: (X86_64Xmmr, X86_64Xmmr, X86_64Xmmr) -> T) -> bool {$/;"	m
do_d_d	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def do_d_d(a: u64, f: double -> double) -> u64 {  \/\/ Adapts a floating point unop to a u64 unop$/;"	m
do_d_d	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def do_d_d(f: double -> double) {$/;"	m
do_d_f	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def do_d_f(a: u64, f: double -> float) -> u32 {  \/\/ Adapts a double -> float unop to a u32 unop$/;"	m
do_d_i	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def do_d_i(a: u64, f: double -> i32) -> u32 {  \/\/ Adapts a double -> i32 unop to a u32 unop$/;"	m
do_d_u	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def do_d_u(a: u64, f: double -> u32) -> u32 {  \/\/ Adapts a double -> u32 unop to a u32 unop$/;"	m
do_dd_d	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def do_dd_d(a: u64, b: u64, f: (double, double) -> double) -> u64 {  \/\/ Adapts a floating point binop to a u64 binop$/;"	m
do_dd_d	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def do_dd_d(f: (double, double) -> double) {$/;"	m
do_dd_z	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def do_dd_z(a: u64, b: u64, f: (double, double) -> bool) -> u64 {  \/\/ Adapts a floating point bool binop to a u64 binop$/;"	m
do_dd_z	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def do_dd_z(f: (double, double) -> bool) {$/;"	m
do_f_d	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def do_f_d(a: u32, f: float -> double) -> u64 {  \/\/ Adapts a float -> double unop to a u64 unop$/;"	m
do_f_f	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def do_f_f(a: u32, f: float -> float) -> u32 {  \/\/ Adapts a floating point unop to a u32 unop$/;"	m
do_f_f	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def do_f_f(f: float -> float) {$/;"	m
do_f_i	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def do_f_i(a: u32, f: float -> i32) -> u32 {  \/\/ Adapts a float -> i32 unop to a u32 unop$/;"	m
do_f_u	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def do_f_u(a: u32, f: float -> u32) -> u32 {  \/\/ Adapts a float -> u32 unop to a u32 unop$/;"	m
do_ff_f	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def do_ff_f(a: u32, b: u32, f: (float, float) -> float) -> u32 {  \/\/ Adapts a floating point binop to a u32 binop$/;"	m
do_ff_f	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def do_ff_f(f: (float, float) -> float) {$/;"	m
do_ff_z	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def do_ff_z(a: u32, b: u32, f: (float, float) -> bool) -> u32 {  \/\/ Adapts a floating point bool binop to a u32 binop$/;"	m
do_ff_z	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def do_ff_z(f: (float, float) -> bool) {$/;"	m
do_i16_dot_i8	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def do_i16_dot_i8(a: u16, b: u16) -> u16 {$/;"	m
do_i32_dot_i16	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def do_i32_dot_i16(a: u32, b: u32) -> u32 {$/;"	m
do_i32_dot_i8_add	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def do_i32_dot_i8_add(a: u32, b: u32, c: u32) -> u32 {$/;"	m
do_i_d	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def do_i_d(a:u32, f: i32 -> double) -> u64 {  \/\/ Adapts a i32 -> double unop to a u64 unop$/;"	m
do_i_f	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def do_i_f(a: u32, f: i32 -> float) -> u32 {  \/\/ Adapts a i32 -> float unop to a u32 unop$/;"	m
do_i_i	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def do_i_i(a: u32, f: i32 -> i32) -> u32 {  \/\/ Adapts a signed i32 unop to a u32 unop$/;"	m
do_i_i_16	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def do_i_i_16(a: u16, f: i16 -> i16) -> u16 {  \/\/ Adapts a signed i16 unop to a u16 unop$/;"	m
do_i_i_8	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def do_i_i_8(a: u8, f: i8 -> i8) -> u8 {  \/\/ Adapts a signed i8 unop to a u8 unop$/;"	m
do_ii_i	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def do_ii_i(a: u32, b: u32, f: (i32, i32) -> i32) -> u32 {  \/\/ Adapts a signed i32 binop to a u32 binop$/;"	m
do_ii_i	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def do_ii_i(f: (i32, i32) -> i32) {$/;"	m
do_ii_i_16	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def do_ii_i_16(a: u16, b: u16, f: (i16, i16) -> i16) -> u16 {  \/\/ Adapts a signed i16 binop to a u16 binop$/;"	m
do_ii_i_16_32	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def do_ii_i_16_32(a: u16, b: u16, f: (i16, i16) -> i32) -> u32 {$/;"	m
do_ii_i_8	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def do_ii_i_8(a: u8, b: u8, f: (i8, i8) -> i8) -> u8 {  \/\/ Adapts a signed i8 binop to a u8 binop$/;"	m
do_ii_i_8_16	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def do_ii_i_8_16(a: u8, b: u8, f: (i8, i8) -> i16) -> u16 {$/;"	m
do_ii_it	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def do_ii_it(f: (i32, i32) -> (i32, TrapReason)) {$/;"	m
do_ii_z	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def do_ii_z(a: u32, b: u32, f: (i32, i32) -> bool) -> u32 {  \/\/ Adapts a signed bool binop to a u32 binop$/;"	m
do_ii_z	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def do_ii_z(f: (i32, i32) -> bool) {$/;"	m
do_ii_z_16	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def do_ii_z_16(a: u16, b: u16, f: (i16, i16) -> bool) -> u16 {  \/\/ Adapts a signed bool binop to a u16 binop$/;"	m
do_ii_z_8	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def do_ii_z_8(a: u8, b: u8, f: (i8, i8) -> bool) -> u8 {  \/\/ Adapts a signed bool binop to a u8 binop$/;"	m
do_l_l	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def do_l_l(a: u64, f: i64 -> i64) -> u64 {  \/\/ Adapts a signed i64 unop to a u64 unop$/;"	m
do_ll_l	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def do_ll_l(a: u64, b: u64, f: (i64, i64) -> i64) -> u64 {  \/\/ Adapts a signed i64 binop to a u64 binop$/;"	m
do_ll_l	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def do_ll_l(f: (i64, i64) -> i64) {$/;"	m
do_ll_lt	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def do_ll_lt(f: (i64, i64) -> (i64, TrapReason)) {$/;"	m
do_ll_z	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def do_ll_z(a: u64, b: u64, f: (i64, i64) -> bool) -> u64 {  \/\/ Adapts a signed bool binop to a u64 binop$/;"	m
do_ll_z	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def do_ll_z(f: (i64, i64) -> bool) {$/;"	m
do_op1_r	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	private def do_op1_r<T>(kind: ValueKind, emit: (X86_64Gpr -> T)) -> bool {$/;"	m
do_op1_r_r	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	private def do_op1_r_r<T>(kind: ValueKind, emit: (X86_64Gpr, X86_64Gpr) -> T) -> bool {$/;"	m
do_op1_r_x	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	private def do_op1_r_x<T>(kind: ValueKind, emit: (X86_64Gpr, X86_64Xmmr) -> T) -> bool {$/;"	m
do_op1_x	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	private def do_op1_x<T>(kind: ValueKind, emit: (X86_64Xmmr) -> T) -> bool {$/;"	m
do_op1_x_gtmp_xtmp	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	private def do_op1_x_gtmp_xtmp<T>(kind: ValueKind, emit: (X86_64Xmmr, X86_64Gpr, X86_64Xmmr) -> T) -> bool {$/;"	m
do_op1_x_x	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	private def do_op1_x_x<T>(kind: ValueKind, emit: (X86_64Xmmr, X86_64Xmmr) -> T) -> bool {$/;"	m
do_op1_x_xtmp	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	private def do_op1_x_xtmp<T>(kind: ValueKind, emit: (X86_64Xmmr, X86_64Xmmr) -> T) -> bool {$/;"	m
do_op2_r_i	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	private def do_op2_r_i<T>(kind: ValueKind, emit: (X86_64Gpr, int) -> T) -> bool {$/;"	m
do_op2_r_m	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	private def do_op2_r_m<T>(kind: ValueKind, emit: (X86_64Gpr, X86_64Addr) -> T) -> bool {$/;"	m
do_op2_r_r	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	private def do_op2_r_r<T>(kind: ValueKind, emit: (X86_64Gpr, X86_64Gpr) -> T) -> bool {$/;"	m
do_op2_r_r_i	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	private def do_op2_r_r_i<T>(kind: ValueKind, emit: (X86_64Gpr, X86_64Gpr, int) -> T) -> bool;$/;"	m
do_op2_r_r_m	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	private def do_op2_r_r_m<T>(kind: ValueKind, emit: (X86_64Gpr, X86_64Gpr, X86_64Addr) -> T) -> bool;$/;"	m
do_op2_r_r_r	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	private def do_op2_r_r_r<T>(kind: ValueKind, emit: (X86_64Gpr, X86_64Gpr, X86_64Gpr) -> T) -> bool;$/;"	m
do_op2_x_x	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	private def do_op2_x_x<T>(kind: ValueKind, emit: (X86_64Xmmr, X86_64Xmmr) -> T) -> bool {$/;"	m
do_op2_x_x_xtmp	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	private def do_op2_x_x_xtmp<T>(kind: ValueKind, emit: (X86_64Xmmr, X86_64Xmmr, X86_64Xmmr) -> T) -> bool {$/;"	m
do_s_i	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def do_s_i(f: (u64, u64) -> i32) {$/;"	m
do_s_s	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def do_s_s(f: (u64, u64) -> (u64, u64)) {$/;"	m
do_s_s_x16	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def do_s_s_x16(a: (u64, u64), f: (u8) -> u8) -> (u64, u64) { \/\/ Performs a 16-lane unop$/;"	m
do_s_s_x16_pairwise_ext_x8	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def do_s_s_x16_pairwise_ext_x8(a: (u64, u64), f: (u8, u8) -> u16) -> (u64, u64) {$/;"	m
do_s_s_x2	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def do_s_s_x2(a: (u64, u64), f: (u64) -> u64) -> (u64, u64) { \/\/ Performs a 2-lane unop$/;"	m
do_s_s_x2_low	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def do_s_s_x2_low(a: (u64, u64), f: (u32) -> u64) -> (u64, u64) { \/\/ Performs a 2-lane unop$/;"	m
do_s_s_x4	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def do_s_s_x4(a: (u64, u64), f: (u32) -> u32) -> (u64, u64) { \/\/ Performs a 4-lane unop$/;"	m
do_s_s_x4_high_zero	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def do_s_s_x4_high_zero(a: (u64, u64), f: (u64) -> u32) -> (u64, u64) { \/\/ Performs a 4-lane unop$/;"	m
do_s_s_x8	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def do_s_s_x8(a: (u64, u64), f: (u16) -> u16) -> (u64, u64) { \/\/ Performs an 8-lane unop$/;"	m
do_s_s_x8_pairwise_ext_x4	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def do_s_s_x8_pairwise_ext_x4(a: (u64, u64), f: (u16, u16) -> u32) -> (u64, u64) {$/;"	m
do_s_z	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def do_s_z(f: (u64, u64) -> bool) {$/;"	m
do_si_s	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def do_si_s(f: ((u64, u64), i32) -> (u64, u64)) {$/;"	m
do_si_s_x16	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def do_si_s_x16(a: (u64, u64), b: i32, f: (u8, u8) -> u8) -> (u64, u64) {$/;"	m
do_si_s_x2	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def do_si_s_x2(a: (u64, u64), b: i32, f: (u64, u64) -> u64) -> (u64, u64) {$/;"	m
do_si_s_x4	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def do_si_s_x4(a: (u64, u64), b: i32, f: (u32, u32) -> u32) -> (u64, u64) {$/;"	m
do_si_s_x8	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def do_si_s_x8(a: (u64, u64), b: i32, f: (u16, u16) -> u16) -> (u64, u64) {$/;"	m
do_ss_s	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def do_ss_s(f: ((u64, u64), (u64, u64)) -> (u64, u64)) {$/;"	m
do_ss_s_x16	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def do_ss_s_x16(a: (u64, u64), b: (u64, u64), f: (u8, u8) -> u8) -> (u64, u64) { \/\/ Performs a 16-lane binop$/;"	m
do_ss_s_x2	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def do_ss_s_x2(a: (u64, u64), b: (u64, u64), f: (u64, u64) -> u64) -> (u64, u64) { \/\/ Performs a 2-lane binop$/;"	m
do_ss_s_x4	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def do_ss_s_x4(a: (u64, u64), b: (u64, u64), f: (u32, u32) -> u32) -> (u64, u64) { \/\/ Performs a 4-lane binop$/;"	m
do_ss_s_x8	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def do_ss_s_x8(a: (u64, u64), b: (u64, u64), f: (u16, u16) -> u16) -> (u64, u64) { \/\/ Performs an 8-lane binop$/;"	m
do_sss_s	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def do_sss_s(f: ((u64, u64), (u64, u64), (u64, u64)) -> (u64, u64)) {$/;"	m
do_sss_s_x2	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def do_sss_s_x2(a: (u64, u64), b: (u64, u64), c: (u64, u64), f: (u64, u64, u64) -> u64) -> (u64, u64) { \/\/ Performs a 2-lane binop$/;"	m
do_sss_s_x4	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def do_sss_s_x4(a: (u64, u64), b: (u64, u64), c: (u64, u64), f: (u32, u32, u32) -> u32) -> (u64, u64) { \/\/ Performs a 4-lane binop$/;"	m
do_u_d	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def do_u_d(a:u32, f: u32 -> double) -> u64 {  \/\/ Adapts a u32 -> double unop to a u64 unop$/;"	m
do_u_f	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def do_u_f(a: u32, f: u32 -> float) -> u32 {  \/\/ Adapts a u32 -> float unop to a u32 unop$/;"	m
do_u_u	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def do_u_u(f: u32 -> u32) {$/;"	m
do_uu_u	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def do_uu_u(f: (u32, u32) -> u32) {$/;"	m
do_uu_ut	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def do_uu_ut(f: (u32, u32) -> (u32, TrapReason)) {$/;"	m
do_uu_z	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def do_uu_z(a: u32, b: u32, f: (u32, u32) -> bool) -> u32 {  \/\/ Adapts a unsigned bool binop to a u32 binop$/;"	m
do_uu_z	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def do_uu_z(f: (u32, u32) -> bool) {$/;"	m
do_uu_z_16	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def do_uu_z_16(a: u16, b: u16, f: (u16, u16) -> bool) -> u16 {  \/\/ Adapts a unsigned bool binop to a u16 binop$/;"	m
do_uu_z_8	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def do_uu_z_8(a: u8, b: u8, f: (u8, u8) -> bool) -> u8 {  \/\/ Adapts a unsigned bool binop to a u8 binop$/;"	m
do_v128_alltrue	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def do_v128_alltrue<T>(a: (u64, u64), bits: byte, view: u64 -> T, equal: (T, T) -> bool) -> bool {$/;"	m
do_v128_bitmask	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def do_v128_bitmask<T>(a: (u64, u64), bits: byte, bits_log2:byte) -> i32 {$/;"	m
do_v128_extmul	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def do_v128_extmul<T, Tw, Uw>(a: (u64, u64), b: (u64, u64), low_half: bool, dest_bits: byte,$/;"	m
do_v128_half_extend	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def do_v128_half_extend<T, Tw, Uw>(a: (u64, u64), low_half: bool, dest_bits: byte, $/;"	m
do_v128_narrow	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def do_v128_narrow<Tw, Tn, Un>(a: (u64, u64), b:(u64, u64), src_bits: byte,$/;"	m
do_v128_narrow0	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def do_v128_narrow0<Tw, Tn, Un>(src: (u64, u64), src_bits: byte,$/;"	m
do_w_w	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def do_w_w(f: u64 -> u64) {$/;"	m
do_ww_w	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def do_ww_w(f: (u64, u64) -> u64) {$/;"	m
do_ww_wt	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def do_ww_wt(f: (u64, u64) -> (u64, TrapReason)) {$/;"	m
do_ww_z	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def do_ww_z(a: u64, b: u64, f: (u64, u64) -> bool) -> u64 {  \/\/ Adapts a unsigned bool binop to a u64 binop$/;"	m
do_ww_z	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def do_ww_z(f: (u64, u64) -> bool) {$/;"	m
done	$VIRGIL_WIZARD/src/engine/Canon.v3	/^	private var done: Array<HeapTypeDecl>;$/;"	d
dotGraphOpt	$VIRGIL_WIZARD/src/monitors/ProfileMonitor.v3	/^def dotGraphOpt = monitor_.options.newFlag("dot", null, "print the call graph (.dot) instead");$/;"	d
dpc	$VIRGIL_WIZARD/src/engine/Sidetable.v3	/^type SidetableBrEntry(dpc: int, valcount: int, popcount: int, dstp: int) #unboxed;$/;"	d
dpc_pos	$VIRGIL_WIZARD/src/engine/Sidetable.v3	/^	def dpc_pos = 0;$/;"	d
drop	$VIRGIL_WIZARD/src/util/WasmAsm.v3	/^	def drop() -> this {$/;"	m
dropN	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def dropN(count: u32) {$/;"	m
dropped_data	$VIRGIL_WIZARD/src/engine/Instance.v3	/^	def dropped_data = Array<bool>.new(module.data.length);$/;"	d
dropped_elems	$VIRGIL_WIZARD/src/engine/Instance.v3	/^	def dropped_elems = Array<bool>.new(module.elems.length);$/;"	d
ds_s	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def ds_s = S(arr_ds, arr_s);$/;"	d
dstList	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	var dstList: MoveNode;	\/\/ head of destination list$/;"	d
dstNext	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	var dstNext: MoveNode;	\/\/ next in a list of successors$/;"	d
dst_index	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^private class MemoryCopyProbe(handler: EventHandler, dst_index: u31, src_index: u31) extends Probe {$/;"	d
dst_stats	$VIRGIL_WIZARD/src/monitors/MemStatsMonitor.v3	/^class CopyProbe(dst_stats: MemStats, src_stats: MemStats) extends Probe {$/;"	d
dstp	$VIRGIL_WIZARD/src/engine/Sidetable.v3	/^type SidetableBrEntry(dpc: int, valcount: int, popcount: int, dstp: int) #unboxed;$/;"	d
dstp_pos	$VIRGIL_WIZARD/src/engine/Sidetable.v3	/^	def dstp_pos = 3;$/;"	d
dsync	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^    dsync,$/;"	d
dumpFrame	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^def dumpFrame(sp: Pointer) {$/;"	m
dumpR	$VIRGIL_WIZARD/src/engine/Memory.v3	/^	def dumpR(offset: u32, size: u32) {$/;"	m
dup	$VIRGIL_WIZARD/src/engine/CodePtr.v3	/^	def dup() -> CodePtr {$/;"	m
dup	$VIRGIL_WIZARD/src/engine/Module.v3	/^	def dup(new_sig: SigDecl) -> FuncDecl {$/;"	m
dup	$VIRGIL_WIZARD/src/engine/Type.v3	/^	def dup() -> SigDecl {$/;"	m
dup	$VIRGIL_WIZARD/src/engine/WasmParser.v3	/^	def dup() -> WasmParser {$/;"	m
dupz	$VIRGIL_WIZARD/src/modules/HostModuleBuilder.v3	/^	def dupz(r: Range<byte>) -> Range<byte> {$/;"	m
dupz	$VIRGIL_WIZARD/src/modules/ModuleRegistry.v3	/^	def dupz(r: Range<byte>) -> Range<byte> {$/;"	m
dyn_probes	$VIRGIL_WIZARD/src/engine/Module.v3	/^	var dyn_probes: Vector<(int, int, Probe)>;$/;"	d
e_i	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def e_i = S(arr_e, arr_i);$/;"	d
e_v	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def e_v = S(arr_e, arr_v);$/;"	d
eagerTagLocals	$VIRGIL_WIZARD/src/engine/Tuning.v3	/^	def eagerTagLocals = false;$/;"	d
eip	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^	var eip: Reg;$/;"	d
eip	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	+64	eip		: i64;	\/\/ Pointer$/;"	d
eip_slot	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^	var eip_slot: MasmAddr;$/;"	d
elem	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case Array(t: HeapType.Array, len: InitExpr, elem: InitExpr);$/;"	d
elem	$VIRGIL_WIZARD/src/engine/Probe.v3	/^	var elem: ProbeElem;$/;"	d
elem_index	$VIRGIL_WIZARD/src/engine/Module.v3	/^	var elem_index: int;$/;"	d
elem_types	$VIRGIL_WIZARD/src/engine/Type.v3	/^	def elem_types: Array<StorageType>;$/;"	d
elements	$VIRGIL_WIZARD/src/engine/Module.v3	/^	def elements = SectionOutline.new();$/;"	d
elems	$VIRGIL_WIZARD/src/engine/Module.v3	/^	def elems = Vector<ElemDecl>.new();$/;"	d
elems	$VIRGIL_WIZARD/src/engine/Table.v3	/^	var elems = Array<Value>.new(int.view(decl.size.initial));$/;"	d
elemtype	$VIRGIL_WIZARD/src/engine/Module.v3	/^class TableDecl(elemtype: ValueType.Ref, size: SizeConstraint) extends Decl {$/;"	d
elemtype	$VIRGIL_WIZARD/src/engine/Table.v3	/^class Table(elemtype: ValueType, decl: TableDecl) extends Exportable {$/;"	d
else_	$VIRGIL_WIZARD/src/util/WasmAsm.v3	/^	def else_() -> this {$/;"	m
else_block	$VIRGIL_WIZARD/src/util/ControlStack.v3	/^	def var else_block: B;$/;"	d
else_label	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	var else_label: MasmLabel;$/;"	d
else_ref	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	var else_ref: int = -1;$/;"	d
embeddedRefOffsets	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	var embeddedRefOffsets: Vector<int>;$/;"	d
embeddedRefOffsets	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	var embeddedRefOffsets: Vector<int>;$/;"	d
emitBrIf	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def emitBrIf(sv: SpcVal, cond: MasmBrCond, label: MasmLabel, target: SpcControl, emptyTransfer: bool, repush: BrRepush) {$/;"	m
emitBrTable	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def emitBrTable(sv: SpcVal, depths: Range<u31>) {$/;"	m
emitCallToReg	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def emitCallToReg(sig: SigDecl, func_reg: Reg, vsp_reg: Reg, tmp: Reg, checkHostCall: bool, tailCall: bool) {$/;"	m
emitComputeEffectiveAddress	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def emitComputeEffectiveAddress(imm: MemArg, iv: SpcVal) -> EffectiveAddr {$/;"	m
emitFallthru	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def emitFallthru(resolver: SpcMoveResolver) {$/;"	m
emitI31_GET	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def emitI31_GET(signed: bool) {$/;"	m
emitLoad	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def emitLoad(kind: ValueKind, imm: MemArg, meth: (ValueKind, Reg, Reg, Reg, u32) -> ())  {$/;"	m
emitMove	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	private def emitMove(dst: MoveNode, src: MoveNode) {$/;"	m
emitMoveTailCallArgs	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def emitMoveTailCallArgs(sig: SigDecl) {$/;"	m
emitMoves	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def emitMoves() {$/;"	m
emitOsrEntry	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def emitOsrEntry(osr_entry_label: MasmLabel, state: Array<SpcVal>) {$/;"	m
emitProbe	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def emitProbe() {$/;"	m
emitProbe0	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def emitProbe0(pc: int, probe: Probe) {$/;"	m
emitPrologue	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def emitPrologue() {$/;"	m
emitRestoreAll	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def emitRestoreAll(resolver: SpcMoveResolver) {$/;"	m
emitReturn	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def emitReturn(ctl: SpcControl) {$/;"	m
emitSaveAll	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def emitSaveAll(resolver: SpcMoveResolver, spillMode: SpillMode) {$/;"	m
emitSelect	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def emitSelect(valcount: u32) {$/;"	m
emitSpill	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def emitSpill(slot: int) {$/;"	m
emitStore	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def emitStore(kind: ValueKind, imm: MemArg, meth: (ValueKind, Reg, Reg, Reg, u32) -> ()) {$/;"	m
emitTransfer	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def emitTransfer(target: SpcControl, resolver: SpcMoveResolver) {$/;"	m
emitTrap	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def emitTrap(reason: TrapReason) {$/;"	m
emitTrapReturn	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def emitTrapReturn(label: MasmLabel, reason: TrapReason) {$/;"	m
emitWhammProbe	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def emitWhammProbe(probe: WhammProbe) {$/;"	m
emit_addi_r_i	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_addi_r_i(reg: Reg, val: int) {$/;"	m
emit_addi_r_r	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_addi_r_r(reg: Reg, reg2: Reg) {$/;"	m
emit_addw_r_i	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_addw_r_i(r1: Reg, val: int);$/;"	m
emit_addw_r_i	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_addw_r_i(r1: Reg, val: int) {$/;"	m
emit_addw_r_r	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_addw_r_r(r1: Reg, r2: Reg);$/;"	m
emit_addw_r_r	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_addw_r_r(r1: Reg, r2: Reg) {$/;"	m
emit_binop_r_i	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_binop_r_i(op: Opcode, reg: Reg, val: int);$/;"	m
emit_binop_r_i	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_binop_r_i(op: Opcode, reg: Reg, val: int) {$/;"	m
emit_binop_r_m	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_binop_r_m(op: Opcode, reg: Reg, addr: MasmAddr);$/;"	m
emit_binop_r_m	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_binop_r_m(op: Opcode, reg: Reg, ma: MasmAddr) {$/;"	m
emit_binop_r_r	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_binop_r_r(op: Opcode, reg: Reg, reg2: Reg);$/;"	m
emit_binop_r_r	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_binop_r_r(op: Opcode, reg: Reg, reg2: Reg) {$/;"	m
emit_br	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_br(label: MasmLabel);$/;"	m
emit_br	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_br(label: MasmLabel) {$/;"	m
emit_br_m	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_br_m(addr: MasmAddr, cond: MasmBrCond, label: MasmLabel);$/;"	m
emit_br_m	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_br_m(addr: MasmAddr, cond: MasmBrCond, label: MasmLabel) {$/;"	m
emit_br_r	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_br_r(reg: Reg, cond: MasmBrCond, label: MasmLabel);$/;"	m
emit_br_r	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_br_r(reg: Reg, cond: MasmBrCond, label: MasmLabel) {$/;"	m
emit_br_table_r	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_br_table_r(reg: Reg, labels: Array<MasmLabel>);$/;"	m
emit_br_table_r	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_br_table_r(reg: Reg, labels: Array<MasmLabel>) {$/;"	m
emit_breq_r_i	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_breq_r_i(reg: Reg, val: int, label: MasmLabel);$/;"	m
emit_breq_r_i	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_breq_r_i(r: Reg, val: int, label: MasmLabel) {$/;"	m
emit_breq_r_l	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_breq_r_l(reg: Reg, val: int, label: MasmLabel);$/;"	m
emit_breq_r_l	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_breq_r_l(r: Reg, val: int, label: MasmLabel) {$/;"	m
emit_brne_r_i	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_brne_r_i(reg: Reg, val: int, label: MasmLabel);$/;"	m
emit_brne_r_i	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_brne_r_i(r: Reg, val: int, label: MasmLabel) {$/;"	m
emit_call_HostCallStub	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_call_HostCallStub();$/;"	m
emit_call_HostCallStub	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_call_HostCallStub() {$/;"	m
emit_call_MemoryReadProbe_fire	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_call_MemoryReadProbe_fire(probe: MemoryReadProbe);$/;"	m
emit_call_MemoryReadProbe_fire	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_call_MemoryReadProbe_fire(probe: MemoryReadProbe) {$/;"	m
emit_call_OperandProbe_i_v_fire	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_call_OperandProbe_i_v_fire(probe: OperandProbe_i_v, value_reg: Reg);$/;"	m
emit_call_OperandProbe_i_v_fire	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_call_OperandProbe_i_v_fire(probe: OperandProbe_i_v, value_reg: Reg) {$/;"	m
emit_call_abs	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_call_abs(abs: Pointer) {$/;"	m
emit_call_label	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_call_label(label: MasmLabel);$/;"	m
emit_call_label	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_call_label(label: MasmLabel) {$/;"	m
emit_call_r	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_call_r(reg: Reg);$/;"	m
emit_call_r	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_call_r(reg: Reg) {$/;"	m
emit_call_runtime	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	private def emit_call_runtime<P, R>(closure: P -> R) {$/;"	m
emit_call_runtime_Probe_instr	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_call_runtime_Probe_instr();$/;"	m
emit_call_runtime_Probe_instr	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_call_runtime_Probe_instr() {$/;"	m
emit_call_runtime_RESUME_THROW	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_call_runtime_RESUME_THROW();$/;"	m
emit_call_runtime_RESUME_THROW	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_call_runtime_RESUME_THROW() {$/;"	m
emit_call_runtime_SUSPEND	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_call_runtime_SUSPEND();$/;"	m
emit_call_runtime_SUSPEND	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_call_runtime_SUSPEND() {$/;"	m
emit_call_runtime_SWITCH	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_call_runtime_SWITCH();$/;"	m
emit_call_runtime_SWITCH	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_call_runtime_SWITCH() {$/;"	m
emit_call_runtime_TRAP	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_call_runtime_TRAP() {$/;"	m
emit_call_runtime_callHost	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_call_runtime_callHost(func_arg: Reg);$/;"	m
emit_call_runtime_callHost	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_call_runtime_callHost(func_arg: Reg) {$/;"	m
emit_call_runtime_cast	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_call_runtime_cast();$/;"	m
emit_call_runtime_cast	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_call_runtime_cast() {$/;"	m
emit_call_runtime_checkFuncSigSubtyping	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_call_runtime_checkFuncSigSubtyping();$/;"	m
emit_call_runtime_checkFuncSigSubtyping	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_call_runtime_checkFuncSigSubtyping() {$/;"	m
emit_call_runtime_doCast	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def emit_call_runtime_doCast(nullable: byte, ht_val: int) -> Reg {$/;"	m
emit_call_runtime_getFrameAccessorMetaRef	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_call_runtime_getFrameAccessorMetaRef();$/;"	m
emit_call_runtime_getFrameAccessorMetaRef	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_call_runtime_getFrameAccessorMetaRef() {$/;"	m
emit_call_runtime_op	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_call_runtime_op(op: Opcode);$/;"	m
emit_call_runtime_op	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_call_runtime_op(op: Opcode) {$/;"	m
emit_call_runtime_op1	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def emit_call_runtime_op1(op: Opcode, arg1: u31, canTrap: bool) {$/;"	m
emit_call_runtime_op1n	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def emit_call_runtime_op1n(op: Opcode, arg1: u31, args: u32, results: Array<ValueType>, canTrap: bool) {$/;"	m
emit_call_runtime_op2	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def emit_call_runtime_op2(op: Opcode, arg1: u31, arg2: u31, canTrap: bool) {$/;"	m
emit_call_runtime_op2n	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def emit_call_runtime_op2n(op: Opcode, arg1: u31, arg2: u31, args: u32, results: Array<ValueType>, canTrap: bool) {$/;"	m
emit_chain_cont_to_parent	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_chain_cont_to_parent(parent: Reg, contStack: Reg) {$/;"	m
emit_cmpq_r_i	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_cmpq_r_i(cond: X86_64Cond, r1: X86_64Gpr, val: int) {$/;"	m
emit_cmpq_r_m	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_cmpq_r_m(cond: X86_64Cond, r1: X86_64Gpr, addr: X86_64Addr) {$/;"	m
emit_cmpq_r_r	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_cmpq_r_r(cond: X86_64Cond, r1: X86_64Gpr, r2: X86_64Gpr) {$/;"	m
emit_cmpq_r_r_i	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_cmpq_r_r_i(cond: X86_64Cond, r1: X86_64Gpr, r2: X86_64Gpr, val: int) {$/;"	m
emit_cmpq_r_r_r	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_cmpq_r_r_r(cond: X86_64Cond, r1: X86_64Gpr, r2: X86_64Gpr, r3: X86_64Gpr) {$/;"	m
emit_compute_vsp	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def emit_compute_vsp(dst: Reg, slots: u32) {$/;"	m
emit_cont_mv	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_cont_mv(from_vsp: Reg, contStack: Reg, n_vals: Reg, tmp1: Reg, tmp2: Reg, xmm0: Reg);$/;"	m
emit_cont_mv	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_cont_mv(from_vsp: Reg, contStack: Reg, n_vals: Reg, tmp1: Reg, tmp2: Reg, xmm0: Reg) {$/;"	m
emit_debugger_breakpoint	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_debugger_breakpoint();$/;"	m
emit_debugger_breakpoint	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_debugger_breakpoint() {$/;"	m
emit_f32_convert_i64_u	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_f32_convert_i64_u(x1: X86_64Xmmr, r1: X86_64Gpr, xscratch: X86_64Xmmr, scratch: X86_64Gpr) {$/;"	m
emit_f32_copysign	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_f32_copysign(x1: X86_64Xmmr, x2: X86_64Xmmr, scratch1: X86_64Gpr, scratch2: X86_64Gpr) {$/;"	m
emit_f32x4_convert_i32x4_u	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_f32x4_convert_i32x4_u(dst: X86_64Xmmr, scratch: X86_64Xmmr) {$/;"	m
emit_f32x4_max	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_f32x4_max(dst: X86_64Xmmr, src: X86_64Xmmr, scratch: X86_64Xmmr) {$/;"	m
emit_f32x4_min	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_f32x4_min(dst: X86_64Xmmr, src: X86_64Xmmr, scratch: X86_64Xmmr) {$/;"	m
emit_f32x4_splat	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_f32x4_splat(dst: X86_64Xmmr, src: X86_64Gpr, scratch: X86_64Xmmr) {$/;"	m
emit_f64_convert_i64_u	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_f64_convert_i64_u(x1: X86_64Xmmr, r1: X86_64Gpr, xscratch: X86_64Xmmr, scratch: X86_64Gpr) {$/;"	m
emit_f64_copysign	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_f64_copysign(x1: X86_64Xmmr, x2: X86_64Xmmr, scratch1: X86_64Gpr, scratch2: X86_64Gpr) {$/;"	m
emit_f64x2_convert_low_i32x4_u	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_f64x2_convert_low_i32x4_u(dst: X86_64Xmmr, tmp: X86_64Gpr, mask: X86_64Xmmr) {$/;"	m
emit_f64x2_max	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_f64x2_max(dst: X86_64Xmmr, src: X86_64Xmmr, scratch: X86_64Xmmr) {$/;"	m
emit_f64x2_min	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_f64x2_min(dst: X86_64Xmmr, src: X86_64Xmmr, scratch: X86_64Xmmr) {$/;"	m
emit_f64x2_splat	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_f64x2_splat(dst: X86_64Xmmr, src: X86_64Gpr, scratch: X86_64Xmmr) {$/;"	m
emit_get_curstack	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_get_curstack(r: Reg);$/;"	m
emit_get_curstack	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_get_curstack(r: Reg) {$/;"	m
emit_i16x8_alltrue	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_i16x8_alltrue(dst: X86_64Gpr, src: X86_64Xmmr, tmp: X86_64Xmmr) { emit_v128_alltrue(dst, src, tmp, asm.pcmpeqw_s_s); }$/;"	m
emit_i16x8_bitmask	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_i16x8_bitmask(dst: X86_64Gpr, src: X86_64Xmmr) {$/;"	m
emit_i16x8_extadd_pairwise_i8x16_s	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_i16x8_extadd_pairwise_i8x16_s(dst: X86_64Xmmr, tmp: X86_64Gpr, mask: X86_64Xmmr) {$/;"	m
emit_i16x8_extadd_pairwise_i8x16_u	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_i16x8_extadd_pairwise_i8x16_u(dst: X86_64Xmmr, tmp: X86_64Gpr, mask: X86_64Xmmr) {$/;"	m
emit_i16x8_extmul_high_s	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_i16x8_extmul_high_s(dst: X86_64Xmmr, src: X86_64Xmmr, scratch: X86_64Xmmr) {$/;"	m
emit_i16x8_extmul_high_u	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_i16x8_extmul_high_u(dst: X86_64Xmmr, src: X86_64Xmmr, scratch: X86_64Xmmr) {$/;"	m
emit_i16x8_extmul_low	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_i16x8_extmul_low(dst: X86_64Xmmr, src: X86_64Xmmr, scratch: X86_64Xmmr, is_signed: bool) {$/;"	m
emit_i16x8_ge_s	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_i16x8_ge_s(dst: X86_64Xmmr, src: X86_64Xmmr) {$/;"	m
emit_i16x8_ge_u	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_i16x8_ge_u(dst: X86_64Xmmr, src: X86_64Xmmr) {$/;"	m
emit_i16x8_gt_u	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_i16x8_gt_u(dst: X86_64Xmmr, src: X86_64Xmmr, scratch: X86_64Xmmr) {$/;"	m
emit_i16x8_ne	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_i16x8_ne(dst: X86_64Xmmr, src: X86_64Xmmr) {$/;"	m
emit_i16x8_neg	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_i16x8_neg(dst: X86_64Xmmr, scratch: X86_64Xmmr) {$/;"	m
emit_i16x8_q15mulrsat_s	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_i16x8_q15mulrsat_s(lhs: X86_64Xmmr, rhs: X86_64Xmmr, scratch: X86_64Xmmr) {$/;"	m
emit_i16x8_s_convert_i8x16_high	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_i16x8_s_convert_i8x16_high(dst: X86_64Xmmr) {$/;"	m
emit_i16x8_splat	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_i16x8_splat(dst: X86_64Xmmr, src: X86_64Gpr) {$/;"	m
emit_i16x8_u_convert_i8x16_high	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_i16x8_u_convert_i8x16_high(dst: X86_64Xmmr, scratch: X86_64Xmmr) {$/;"	m
emit_i32_clz_r_r	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_i32_clz_r_r(r: X86_64Gpr, s: X86_64Gpr) {$/;"	m
emit_i32_ctz_r_r	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_i32_ctz_r_r(r: X86_64Gpr, s: X86_64Gpr) {$/;"	m
emit_i32_div_s	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_i32_div_s(r2: X86_64Gpr) { \/\/ note: (r1=EAX, r2) -> EAX, kills EDX$/;"	m
emit_i32_div_u	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_i32_div_u(r2: X86_64Gpr) { \/\/ note: (r1=EAX, r2) -> EAX, kills EDX$/;"	m
emit_i32_rem_s	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_i32_rem_s(r2: X86_64Gpr) { \/\/ note: (r1=EAX, r2) -> EDX, kills RAX$/;"	m
emit_i32_rem_u	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_i32_rem_u(r2: X86_64Gpr) { \/\/ note: (r1=EAX, r2) -> EDX, kills RAX$/;"	m
emit_i32x4_alltrue	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_i32x4_alltrue(dst: X86_64Gpr, src: X86_64Xmmr, tmp: X86_64Xmmr) { emit_v128_alltrue(dst, src, tmp, asm.pcmpeqd_s_s); }$/;"	m
emit_i32x4_extadd_pairwise_i16x8_s	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_i32x4_extadd_pairwise_i16x8_s(dst: X86_64Xmmr, tmp: X86_64Gpr, mask: X86_64Xmmr) {$/;"	m
emit_i32x4_extadd_pairwise_i16x8_u	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_i32x4_extadd_pairwise_i16x8_u(dst: X86_64Xmmr, scratch: X86_64Xmmr) {$/;"	m
emit_i32x4_extmul	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_i32x4_extmul(dst: X86_64Xmmr, src: X86_64Xmmr, scratch: X86_64Xmmr, low: bool, is_signed: bool) {$/;"	m
emit_i32x4_ge_s	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_i32x4_ge_s(dst: X86_64Xmmr, src: X86_64Xmmr) {$/;"	m
emit_i32x4_ge_u	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_i32x4_ge_u(dst: X86_64Xmmr, src: X86_64Xmmr) {$/;"	m
emit_i32x4_gt_u	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_i32x4_gt_u(dst: X86_64Xmmr, src: X86_64Xmmr, scratch: X86_64Xmmr) {$/;"	m
emit_i32x4_ne	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_i32x4_ne(dst: X86_64Xmmr, src: X86_64Xmmr) {$/;"	m
emit_i32x4_neg	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_i32x4_neg(dst: X86_64Xmmr, scratch: X86_64Xmmr) {$/;"	m
emit_i32x4_s_convert_i16x8_high	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_i32x4_s_convert_i16x8_high(dst: X86_64Xmmr) {$/;"	m
emit_i32x4_splat	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_i32x4_splat(dst: X86_64Xmmr, src: X86_64Gpr) {$/;"	m
emit_i32x4_trunc_sat_f32x4_s	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_i32x4_trunc_sat_f32x4_s(dst: X86_64Xmmr, tmp: X86_64Xmmr) {$/;"	m
emit_i32x4_trunc_sat_f32x4_u	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_i32x4_trunc_sat_f32x4_u(dst: X86_64Xmmr, tmp1: X86_64Xmmr, tmp2: X86_64Xmmr) {$/;"	m
emit_i32x4_trunc_sat_f64x2_s_zero	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_i32x4_trunc_sat_f64x2_s_zero(dst: X86_64Xmmr, tmp: X86_64Gpr, scratch: X86_64Xmmr, mask: X86_64Xmmr) {$/;"	m
emit_i32x4_trunc_sat_f64x2_u_zero	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_i32x4_trunc_sat_f64x2_u_zero(dst: X86_64Xmmr, tmp: X86_64Gpr, scratch: X86_64Xmmr, mask: X86_64Xmmr) {$/;"	m
emit_i32x4_u_convert_i16x8_high	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_i32x4_u_convert_i16x8_high(dst: X86_64Xmmr, scratch: X86_64Xmmr) {$/;"	m
emit_i64_clz_r_r	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_i64_clz_r_r(r: X86_64Gpr, s: X86_64Gpr) {$/;"	m
emit_i64_ctz_r_r	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_i64_ctz_r_r(r: X86_64Gpr, s: X86_64Gpr) {$/;"	m
emit_i64_div_s	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_i64_div_s(r2: X86_64Gpr) { \/\/ note: (r1=RAX, r2) -> RAX, kills RDX$/;"	m
emit_i64_div_u	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_i64_div_u(r2: X86_64Gpr) { \/\/ note: (r1=RAX, r2) -> RAX, kills RDX$/;"	m
emit_i64_extend_i32_s	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_i64_extend_i32_s(r: X86_64Gpr) {$/;"	m
emit_i64_extend_i32_u	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_i64_extend_i32_u(r: X86_64Gpr) {$/;"	m
emit_i64_rem_s	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_i64_rem_s(r2: X86_64Gpr) { \/\/ note: (r1=RAX, r2) -> RDX, kills RAX$/;"	m
emit_i64_rem_u	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_i64_rem_u(r2: X86_64Gpr) { \/\/ note: (r1=RAX, r2) -> RDX, kills RAX$/;"	m
emit_i64_trunc_sat_f32_s	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	private def emit_i64_trunc_sat_f32_s(dst: X86_64Gpr, x1: X86_64Xmmr, xscratch: X86_64Xmmr) {$/;"	m
emit_i64_trunc_sat_f64_s	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	private def emit_i64_trunc_sat_f64_s(dst: X86_64Gpr, x1: X86_64Xmmr, xscratch: X86_64Xmmr) {$/;"	m
emit_i64x2_abs	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_i64x2_abs(dst: X86_64Xmmr, scratch: X86_64Xmmr) {$/;"	m
emit_i64x2_alltrue	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_i64x2_alltrue(dst: X86_64Gpr, src: X86_64Xmmr, tmp: X86_64Xmmr) { emit_v128_alltrue(dst, src, tmp, asm.pcmpeqq_s_s); }$/;"	m
emit_i64x2_extmul	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_i64x2_extmul(dst: X86_64Xmmr, src: X86_64Xmmr, scratch: X86_64Xmmr, low: bool, is_signed: bool) {$/;"	m
emit_i64x2_ge_s	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_i64x2_ge_s(dst: X86_64Xmmr, src: X86_64Xmmr, scratch: X86_64Xmmr) {$/;"	m
emit_i64x2_mul	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_i64x2_mul(lhs: X86_64Xmmr, rhs: X86_64Xmmr, tmp1: X86_64Xmmr, tmp2: X86_64Xmmr) {$/;"	m
emit_i64x2_ne	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_i64x2_ne(dst: X86_64Xmmr, src: X86_64Xmmr) {$/;"	m
emit_i64x2_neg	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_i64x2_neg(dst: X86_64Xmmr, scratch: X86_64Xmmr) {$/;"	m
emit_i64x2_s_convert_i32x4_high	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_i64x2_s_convert_i32x4_high(dst: X86_64Xmmr) {$/;"	m
emit_i64x2_shr_s	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_i64x2_shr_s(dst: X86_64Xmmr, shift: X86_64Gpr, tmp_shift: X86_64Gpr, xmm_tmp: X86_64Xmmr, xmm_shift: X86_64Xmmr) {$/;"	m
emit_i64x2_splat	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_i64x2_splat(dst: X86_64Xmmr, src: X86_64Gpr) {$/;"	m
emit_i64x2_u_convert_i32x4_high	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_i64x2_u_convert_i32x4_high(dst: X86_64Xmmr, scratch: X86_64Xmmr) {$/;"	m
emit_i8x16_alltrue	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_i8x16_alltrue(dst: X86_64Gpr, src: X86_64Xmmr, tmp: X86_64Xmmr) { emit_v128_alltrue(dst, src, tmp, asm.pcmpeqb_s_s); }$/;"	m
emit_i8x16_ge_s	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_i8x16_ge_s(dst: X86_64Xmmr, src: X86_64Xmmr) {$/;"	m
emit_i8x16_ge_u	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_i8x16_ge_u(dst: X86_64Xmmr, src: X86_64Xmmr) {$/;"	m
emit_i8x16_gt_u	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_i8x16_gt_u(dst: X86_64Xmmr, src: X86_64Xmmr, scratch: X86_64Xmmr) {$/;"	m
emit_i8x16_ne	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_i8x16_ne(dst: X86_64Xmmr, src: X86_64Xmmr) {$/;"	m
emit_i8x16_neg	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_i8x16_neg(dst: X86_64Xmmr, scratch: X86_64Xmmr) {$/;"	m
emit_i8x16_popcnt	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_i8x16_popcnt(dst: X86_64Xmmr, tmp1: X86_64Gpr, xtmp1: X86_64Xmmr, xtmp2: X86_64Xmmr, mask: X86_64Xmmr) {$/;"	m
emit_i8x16_shl	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_i8x16_shl(dst: X86_64Xmmr, shift: X86_64Gpr, tmp1: X86_64Gpr, tmp2: X86_64Xmmr, tmp3: X86_64Xmmr) {$/;"	m
emit_i8x16_shr_s	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_i8x16_shr_s(dst: X86_64Xmmr, shift: X86_64Gpr, tmp1: X86_64Gpr, tmp2: X86_64Xmmr, tmp3: X86_64Xmmr) {$/;"	m
emit_i8x16_shr_u	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_i8x16_shr_u(dst: X86_64Xmmr, shift: X86_64Gpr, tmp1: X86_64Gpr, tmp2: X86_64Xmmr, tmp3: X86_64Xmmr) {$/;"	m
emit_i8x16_splat	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_i8x16_splat(dst: X86_64Xmmr, src: X86_64Gpr, scratch: X86_64Xmmr) {$/;"	m
emit_i8x16_swizzle	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_i8x16_swizzle(dst: X86_64Xmmr, src: X86_64Xmmr, tmp: X86_64Gpr, mask: X86_64Xmmr) {$/;"	m
emit_i_trunc_f	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_i_trunc_f(op: Opcode, dst: X86_64Gpr, x1: X86_64Xmmr, xscratch: X86_64Xmmr) {$/;"	m
emit_i_trunc_f0	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	private def emit_i_trunc_f0(config: FloatTrunc, saturate: bool, dst: X86_64Gpr, x1: X86_64Xmmr, xscratch: X86_64Xmmr) {$/;"	m
emit_increment_CountProbe	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_increment_CountProbe(tmp: Reg, probe: CountProbe, increment: u64);$/;"	m
emit_increment_CountProbe	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_increment_CountProbe(tmp: Reg, probe: CountProbe, increment: u64) {$/;"	m
emit_intentional_crash	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_intentional_crash() {$/;"	m
emit_intentional_crash	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_intentional_crash() {$/;"	m
emit_jump_HostCallStub	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_jump_HostCallStub();$/;"	m
emit_jump_HostCallStub	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_jump_HostCallStub() {$/;"	m
emit_jump_r	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_jump_r(reg: Reg);$/;"	m
emit_jump_r	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_jump_r(reg: Reg) {$/;"	m
emit_jump_runtime	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	private def emit_jump_runtime<P, R>(closure: P -> R) {$/;"	m
emit_jump_to_trap_at	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_jump_to_trap_at(reason: TrapReason);$/;"	m
emit_jump_to_trap_at	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_jump_to_trap_at(reason: TrapReason) {$/;"	m
emit_load_curstack_vsp	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_load_curstack_vsp(vsp: Reg);$/;"	m
emit_load_curstack_vsp	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_load_curstack_vsp(vsp: Reg) {$/;"	m
emit_load_dispatch_table_reg	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_load_dispatch_table_reg(reg: Reg) {$/;"	m
emit_load_instance	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def emit_load_instance(reg: Reg) {$/;"	m
emit_load_r_r_r_i	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_load_r_r_r_i(kind: ValueKind, dst: Reg, base: Reg, index: Reg, offset: u32);$/;"	m
emit_load_r_r_r_i	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_load_r_r_r_i(kind: ValueKind, dst: Reg, base: Reg, index: Reg, offset: u32) {$/;"	m
emit_loadbsx_r_r_r_i	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_loadbsx_r_r_r_i(kind: ValueKind, dst: Reg, base: Reg, index: Reg, offset: u32);$/;"	m
emit_loadbsx_r_r_r_i	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_loadbsx_r_r_r_i(kind: ValueKind, dst: Reg, base: Reg, index: Reg, offset: u32) {$/;"	m
emit_loadbzx_r_r_r_i	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_loadbzx_r_r_r_i(kind: ValueKind, dst: Reg, base: Reg, index: Reg, offset: u32);$/;"	m
emit_loadbzx_r_r_r_i	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_loadbzx_r_r_r_i(kind: ValueKind, dst: Reg, base: Reg, index: Reg, offset: u32) {$/;"	m
emit_loaddsx_r_r_r_i	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_loaddsx_r_r_r_i(kind: ValueKind, dst: Reg, base: Reg, index: Reg, offset: u32);$/;"	m
emit_loaddsx_r_r_r_i	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_loaddsx_r_r_r_i(kind: ValueKind, dst: Reg, base: Reg, index: Reg, offset: u32) {$/;"	m
emit_loaddzx_r_r_r_i	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_loaddzx_r_r_r_i(kind: ValueKind, dst: Reg, base: Reg, index: Reg, offset: u32);$/;"	m
emit_loaddzx_r_r_r_i	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_loaddzx_r_r_r_i(kind: ValueKind, dst: Reg, base: Reg, index: Reg, offset: u32) {$/;"	m
emit_loadwsx_r_r_r_i	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_loadwsx_r_r_r_i(kind: ValueKind, dst: Reg, base: Reg, index: Reg, offset: u32);$/;"	m
emit_loadwsx_r_r_r_i	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_loadwsx_r_r_r_i(kind: ValueKind, dst: Reg, base: Reg, index: Reg, offset: u32) {$/;"	m
emit_loadwzx_r_r_r_i	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_loadwzx_r_r_r_i(kind: ValueKind, dst: Reg, base: Reg, index: Reg, offset: u32);$/;"	m
emit_loadwzx_r_r_r_i	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_loadwzx_r_r_r_i(kind: ValueKind, dst: Reg, base: Reg, index: Reg, offset: u32) {$/;"	m
emit_mov_m_d	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_mov_m_d(addr: MasmAddr, bits: u64);$/;"	m
emit_mov_m_d	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_mov_m_d(ma: MasmAddr, bits: u64) {$/;"	m
emit_mov_m_f	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_mov_m_f(addr: MasmAddr, bits: u32);$/;"	m
emit_mov_m_f	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_mov_m_f(ma: MasmAddr, bits: u32) {$/;"	m
emit_mov_m_i	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_mov_m_i(addr: MasmAddr, val: int);$/;"	m
emit_mov_m_i	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_mov_m_i(ma: MasmAddr, val: int) {$/;"	m
emit_mov_m_l	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_mov_m_l(addr: MasmAddr, val: long);$/;"	m
emit_mov_m_l	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_mov_m_l(ma: MasmAddr, val: long) {$/;"	m
emit_mov_m_m	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_mov_m_m(kind: ValueKind, dst: MasmAddr, src: MasmAddr);$/;"	m
emit_mov_m_m	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_mov_m_m(kind: ValueKind, dst: MasmAddr, src: MasmAddr) {$/;"	m
emit_mov_m_q	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_mov_m_q(addr: MasmAddr, low: u64, high: u64);$/;"	m
emit_mov_m_q	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_mov_m_q(ma: MasmAddr, low: u64, high: u64) {  \/\/ XXX: use constant pool?$/;"	m
emit_mov_m_r	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_mov_m_r(kind: ValueKind, addr: MasmAddr, reg: Reg);$/;"	m
emit_mov_m_r	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_mov_m_r(kind: ValueKind, ma: MasmAddr, reg: Reg) {$/;"	m
emit_mov_m_ri	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_mov_m_ri(addr: MasmAddr, val: int);$/;"	m
emit_mov_m_ri	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_mov_m_ri(ma: MasmAddr, val: int) {$/;"	m
emit_mov_r_Function	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_mov_r_Function(reg: Reg, func: Function);$/;"	m
emit_mov_r_Function	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_mov_r_Function(reg: Reg, func: Function) {$/;"	m
emit_mov_r_Instance	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_mov_r_Instance(reg: Reg, instance: Instance);$/;"	m
emit_mov_r_Instance	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_mov_r_Instance(reg: Reg, instance: Instance) {$/;"	m
emit_mov_r_Object	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_mov_r_Object(reg: Reg, obj: Object);$/;"	m
emit_mov_r_Object	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_mov_r_Object(reg: Reg, obj: Object) {$/;"	m
emit_mov_r_abs32	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_mov_r_abs32(reg: Reg, abs: Pointer) {$/;"	m
emit_mov_r_d64	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_mov_r_d64(reg: Reg, val: u64);$/;"	m
emit_mov_r_d64	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_mov_r_d64(reg: Reg, val: u64) {$/;"	m
emit_mov_r_f32	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_mov_r_f32(reg: Reg, val: u32);$/;"	m
emit_mov_r_f32	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_mov_r_f32(reg: Reg, val: u32) {$/;"	m
emit_mov_r_i	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_mov_r_i(reg: Reg, val: int);$/;"	m
emit_mov_r_i	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_mov_r_i(reg: Reg, val: int) {$/;"	m
emit_mov_r_k	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_mov_r_k(kind: ValueKind, reg: Reg, val: int) {$/;"	m
emit_mov_r_l	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_mov_r_l(reg: Reg, val: long);$/;"	m
emit_mov_r_l	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_mov_r_l(reg: Reg, val: long) {$/;"	m
emit_mov_r_l32	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_mov_r_l32(reg: Reg, val: int);$/;"	m
emit_mov_r_l32	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_mov_r_l32(reg: Reg, val: int) {$/;"	m
emit_mov_r_m	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_mov_r_m(kind: ValueKind, reg: Reg, addr: MasmAddr);$/;"	m
emit_mov_r_m	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_mov_r_m(kind: ValueKind, reg: Reg, ma: MasmAddr) {$/;"	m
emit_mov_r_q	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_mov_r_q(reg: Reg, low: u64, high: u64);$/;"	m
emit_mov_r_q	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_mov_r_q(reg: Reg, low: u64, high: u64) {$/;"	m
emit_mov_r_r	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_mov_r_r(kind: ValueKind, reg: Reg, reg2: Reg);$/;"	m
emit_mov_r_r	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_mov_r_r(kind: ValueKind, reg: Reg, reg2: Reg) {$/;"	m
emit_mov_r_s	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_mov_r_s(kind: ValueKind, reg: Reg, slot: u32) { \/\/ utility method$/;"	m
emit_mov_r_trap	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_mov_r_trap(reg: Reg, reason: TrapReason);$/;"	m
emit_mov_r_trap	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_mov_r_trap(reg: Reg, reason: TrapReason) {$/;"	m
emit_mov_s_d	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_mov_s_d(slot: u32, bits: u64) { \/\/ utility method$/;"	m
emit_mov_s_f	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_mov_s_f(slot: u32, bits: u32) { \/\/ utility method$/;"	m
emit_mov_s_i	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_mov_s_i(slot: u32, val: int) { \/\/ utility method$/;"	m
emit_mov_s_k	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_mov_s_k(kind: ValueKind, slot: u32, val: int) {$/;"	m
emit_mov_s_l	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_mov_s_l(slot: u32, val: long) { \/\/ utility method$/;"	m
emit_mov_s_q	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_mov_s_q(slot: u32, low: u64, high: u64) {$/;"	m
emit_mov_s_r	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_mov_s_r(kind: ValueKind, slot: u32, reg: Reg) { \/\/ utility method$/;"	m
emit_mov_s_ri	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_mov_s_ri(slot: u32, val: int) { \/\/ utility method$/;"	m
emit_mov_s_s	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_mov_s_s(kind: ValueKind, dst_slot: u32, src_slot: u32) { \/\/ utility method$/;"	m
emit_movq_32s_r_m	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_movq_32s_r_m(dst: X86_64Gpr, addr: X86_64Addr) -> X86_64Assembler {$/;"	m
emit_nop	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_nop();$/;"	m
emit_nop	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_nop() {$/;"	m
emit_pop_X86_64Stack_rsp_r_r	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_pop_X86_64Stack_rsp_r_r(stk: Reg);$/;"	m
emit_pop_X86_64Stack_rsp_r_r	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_pop_X86_64Stack_rsp_r_r(stk: Reg) {$/;"	m
emit_pop_r	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_pop_r(kind: ValueKind, reg: Reg);$/;"	m
emit_pop_r	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_pop_r(kind: ValueKind, reg: Reg) {$/;"	m
emit_push_X86_64Stack_rsp_r_r	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_push_X86_64Stack_rsp_r_r(stk: Reg);$/;"	m
emit_push_X86_64Stack_rsp_r_r	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_push_X86_64Stack_rsp_r_r(stk: Reg) {$/;"	m
emit_read_uleb	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_read_uleb(w_dest: X86_64Gpr, rw_ptr: X86_64Gpr, w_scratch1: X86_64Gpr, w_scratch2: X86_64Gpr) -> this {$/;"	m
emit_reload_regs	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def emit_reload_regs() {$/;"	m
emit_ret	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_ret();$/;"	m
emit_ret	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_ret() {$/;"	m
emit_sard_r_i	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_sard_r_i(r1: Reg, imm: u5);$/;"	m
emit_sard_r_i	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_sard_r_i(reg: Reg, imm: u5) {$/;"	m
emit_sarw_r_i	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_sarw_r_i(r1: Reg, imm: u6);$/;"	m
emit_sarw_r_i	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_sarw_r_i(reg: Reg, imm: u6) {$/;"	m
emit_set_curstack	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_set_curstack(r: Reg);$/;"	m
emit_set_curstack	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_set_curstack(r: Reg) {$/;"	m
emit_set_stack_state	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_set_stack_state(stk: Reg, state: StackState);$/;"	m
emit_set_stack_state	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_set_stack_state(stk: Reg, state: StackState) {$/;"	m
emit_shld_r_i	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_shld_r_i(r1: Reg, imm: u5);$/;"	m
emit_shld_r_i	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_shld_r_i(reg: Reg, imm: u5) {$/;"	m
emit_shlw_r_i	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_shlw_r_i(r1: Reg, imm: u6);$/;"	m
emit_shlw_r_i	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_shlw_r_i(reg: Reg, imm: u6) {$/;"	m
emit_shrd_r_i	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_shrd_r_i(r1: Reg, imm: u5);$/;"	m
emit_shrd_r_i	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_shrd_r_i(reg: Reg, imm: u5) {$/;"	m
emit_shrw_r_i	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_shrw_r_i(r1: Reg, imm: u6);$/;"	m
emit_shrw_r_i	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_shrw_r_i(reg: Reg, imm: u6) {$/;"	m
emit_spill_vsp	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def emit_spill_vsp(reg: Reg) {$/;"	m
emit_store_curstack_vsp	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_store_curstack_vsp(vsp: Reg);$/;"	m
emit_store_curstack_vsp	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_store_curstack_vsp(vsp: Reg) {$/;"	m
emit_store_r_r_r_i	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_store_r_r_r_i(kind: ValueKind, val: Reg, base: Reg, index: Reg, offset: u32);$/;"	m
emit_store_r_r_r_i	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_store_r_r_r_i(kind: ValueKind, val: Reg, base: Reg, index: Reg, offset: u32) {$/;"	m
emit_storeb_r_r_r_i	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_storeb_r_r_r_i(kind: ValueKind, val: Reg, base: Reg, index: Reg, offset: u32);$/;"	m
emit_storeb_r_r_r_i	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_storeb_r_r_r_i(kind: ValueKind, val: Reg, base: Reg, index: Reg, offset: u32) {$/;"	m
emit_storew_r_r_r_i	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_storew_r_r_r_i(kind: ValueKind, val: Reg, base: Reg, index: Reg, offset: u32);$/;"	m
emit_storew_r_r_r_i	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_storew_r_r_r_i(kind: ValueKind, val: Reg, base: Reg, index: Reg, offset: u32) {$/;"	m
emit_subw_r_i	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_subw_r_i(r1: Reg, val: int);$/;"	m
emit_subw_r_i	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_subw_r_i(reg: Reg, val: int) {$/;"	m
emit_subw_r_r	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_subw_r_r(r1: Reg, r2: Reg);$/;"	m
emit_subw_r_r	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_subw_r_r(reg: Reg, reg2: Reg) {$/;"	m
emit_switch_to_stack	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_switch_to_stack(r_stack: Reg) {$/;"	m
emit_v128_abspd	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_v128_abspd(dst: X86_64Xmmr, tmp: X86_64Gpr, mask: X86_64Xmmr) {$/;"	m
emit_v128_absps	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_v128_absps(dst: X86_64Xmmr, tmp: X86_64Gpr, mask: X86_64Xmmr) {$/;"	m
emit_v128_alltrue	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	private def emit_v128_alltrue<T>(dst: X86_64Gpr, src: X86_64Xmmr, tmp: X86_64Xmmr, pcmp: (X86_64Xmmr, X86_64Xmmr) -> T) {$/;"	m
emit_v128_andps	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_v128_andps(dst: X86_64Xmmr, src: X86_64Xmmr) { \/\/ XXX: inline$/;"	m
emit_v128_anytrue	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_v128_anytrue(dst: X86_64Gpr, src: X86_64Xmmr) {$/;"	m
emit_v128_bitselect	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_v128_bitselect(dst: X86_64Xmmr, src: X86_64Xmmr, mask: X86_64Xmmr, scratch: X86_64Xmmr) {$/;"	m
emit_v128_ge	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_v128_ge<T>(dst: X86_64Xmmr, src: X86_64Xmmr,$/;"	m
emit_v128_gt_u	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_v128_gt_u<T>(dst: X86_64Xmmr, src: X86_64Xmmr, scratch: X86_64Xmmr,$/;"	m
emit_v128_load_lane_r_m	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_v128_load_lane_r_m<T>(dst: Reg, src: X86_64Addr, asm_mov_r_m: (X86_64Gpr, X86_64Addr) -> T) {$/;"	m
emit_v128_ne	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_v128_ne<T>(dst: X86_64Xmmr, src: X86_64Xmmr, f: (X86_64Xmmr, X86_64Xmmr) -> T) {$/;"	m
emit_v128_neg	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_v128_neg<T>(dst: X86_64Xmmr, scratch: X86_64Xmmr, f: (X86_64Xmmr, X86_64Xmmr) -> T) {$/;"	m
emit_v128_negpd	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_v128_negpd(dst: X86_64Xmmr, tmp: X86_64Gpr, mask: X86_64Xmmr) {$/;"	m
emit_v128_negps	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_v128_negps(dst: X86_64Xmmr, tmp: X86_64Gpr, mask: X86_64Xmmr) {$/;"	m
emit_v128_not	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_v128_not(dst: X86_64Xmmr, scratch: X86_64Xmmr) {$/;"	m
emit_v128_orps	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_v128_orps(dst: X86_64Xmmr, src: X86_64Xmmr) { \/\/ XXX: inline$/;"	m
emit_v128_shift	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_v128_shift<T>(dst: X86_64Xmmr, shift: X86_64Gpr, width: byte, gtmp: X86_64Gpr, xtmp: X86_64Xmmr,$/;"	m
emit_v128_store_lane_m_r	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_v128_store_lane_m_r<T>(dst: X86_64Addr, src: Reg, asm_mov_m_r: (X86_64Addr, X86_64Gpr) -> T) {$/;"	m
emit_v128_xorps	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_v128_xorps(dst: X86_64Xmmr, src: X86_64Xmmr) { \/\/ XXX: inline$/;"	m
emit_v128_zero	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_v128_zero(s: X86_64Xmmr) { \/\/ XXX: inline$/;"	m
emit_v3_Array_bounds_check_rr	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_v3_Array_bounds_check_rr(array: Reg, index: Reg, oob_label: MasmLabel) {$/;"	m
emit_v3_Array_bounds_check_rr	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_v3_Array_bounds_check_rr(array: Reg, index: Reg, oob_label: MasmLabel) {$/;"	m
emit_v3_Array_elem_r_ri	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_v3_Array_elem_r_ri(kind: ValueKind, dst: Reg, array: Reg, index: int) {$/;"	m
emit_v3_Array_elem_r_rr	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_v3_Array_elem_r_rr(kind: ValueKind, dst: Reg, array: Reg, index: Reg) {$/;"	m
emit_v3_Array_elem_r_rr	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_v3_Array_elem_r_rr(kind: ValueKind, dst: Reg, array: Reg, index: Reg) {$/;"	m
emit_v3_Array_length_r_r	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_v3_Array_length_r_r(dst: Reg, array: Reg) {$/;"	m
emit_v3_ContDecl_sig_r_r	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_v3_ContDecl_sig_r_r(dst: Reg, ptr: Reg) {$/;"	m
emit_v3_Continuation_stack_r_r	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_v3_Continuation_stack_r_r(dst: Reg, ptr: Reg) {$/;"	m
emit_v3_FuncDecl_orig_bytecode_r_r	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_v3_FuncDecl_orig_bytecode_r_r(dst: Reg, ptr: Reg) {$/;"	m
emit_v3_FuncDecl_target_code_r_r	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_v3_FuncDecl_target_code_r_r(dst: Reg, ptr: Reg) {$/;"	m
emit_v3_HeapArray_vals_r_r	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_v3_HeapArray_vals_r_r(dst: Reg, ptr: Reg) {$/;"	m
emit_v3_Instance_dropped_data_r_r	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_v3_Instance_dropped_data_r_r(dst: Reg, ptr: Reg) {$/;"	m
emit_v3_Instance_dropped_elems_r_r	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_v3_Instance_dropped_elems_r_r(dst: Reg, ptr: Reg) {$/;"	m
emit_v3_Instance_functions_r_r	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_v3_Instance_functions_r_r(dst: Reg, ptr: Reg) {$/;"	m
emit_v3_Instance_globals_r_r	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_v3_Instance_globals_r_r(dst: Reg, ptr: Reg) {$/;"	m
emit_v3_Instance_heaptypes_r_r	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_v3_Instance_heaptypes_r_r(dst: Reg, ptr: Reg) {$/;"	m
emit_v3_Instance_memories_r_r	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_v3_Instance_memories_r_r(dst: Reg, ptr: Reg) {$/;"	m
emit_v3_Instance_tables_r_r	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_v3_Instance_tables_r_r(dst: Reg, ptr: Reg) {$/;"	m
emit_v3_Memory_limit_r_r	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_v3_Memory_limit_r_r(dst: Reg, memobj: Reg);$/;"	m
emit_v3_Memory_limit_r_r	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_v3_Memory_limit_r_r(dst: Reg, memobj: Reg) {$/;"	m
emit_v3_Memory_start_r_r	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_v3_Memory_start_r_r(dst: Reg, memobj: Reg);$/;"	m
emit_v3_Memory_start_r_r	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_v3_Memory_start_r_r(dst: Reg, memobj: Reg) {$/;"	m
emit_v3_SigDecl_params_r_r	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_v3_SigDecl_params_r_r(dst: Reg, ptr: Reg) {$/;"	m
emit_v3_SigDecl_results_r_r	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_v3_SigDecl_results_r_r(dst: Reg, ptr: Reg) {$/;"	m
emit_v3_Table_elems_r_r	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_v3_Table_elems_r_r(dst: Reg, ptr: Reg) {$/;"	m
emit_v3_Table_funcs_r_r	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_v3_Table_funcs_r_r(dst: Reg, ptr: Reg) {$/;"	m
emit_v3_Table_ids_r_r	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_v3_Table_ids_r_r(dst: Reg, ptr: Reg) {$/;"	m
emit_v3_WasmFunction_decl_r_r	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_v3_WasmFunction_decl_r_r(dst: Reg, ptr: Reg) {$/;"	m
emit_v3_WasmFunction_instance_r_r	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_v3_WasmFunction_instance_r_r(dst: Reg, ptr: Reg) {$/;"	m
emit_v3_X86_64Stack_rsp_r_r	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_v3_X86_64Stack_rsp_r_r(dst: Reg, ptr: Reg);$/;"	m
emit_v3_X86_64Stack_rsp_r_r	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_v3_X86_64Stack_rsp_r_r(dst: Reg, ptr: Reg) {$/;"	m
emit_v3_X86_64Stack_vsp_r_r	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_v3_X86_64Stack_vsp_r_r(dst: Reg, ptr: Reg);$/;"	m
emit_v3_X86_64Stack_vsp_r_r	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_v3_X86_64Stack_vsp_r_r(dst: Reg, ptr: Reg) {$/;"	m
emit_v3_set_X86_64Stack_rsp_r_r	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_v3_set_X86_64Stack_rsp_r_r(stk: Reg, rsp: Reg);$/;"	m
emit_v3_set_X86_64Stack_rsp_r_r	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_v3_set_X86_64Stack_rsp_r_r(stk: Reg, rsp: Reg) {$/;"	m
emit_v3_set_X86_64Stack_vsp_r_r	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_v3_set_X86_64Stack_vsp_r_r(stk: Reg, vsp: Reg);$/;"	m
emit_v3_set_X86_64Stack_vsp_r_r	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_v3_set_X86_64Stack_vsp_r_r(stk: Reg, vsp: Reg) {$/;"	m
emit_validate_and_consume_cont	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def emit_validate_and_consume_cont(cont: Reg) {$/;"	m
emit_value_copy	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def emit_value_copy(r_dst: X86_64Gpr, r_src: X86_64Gpr, r_count: X86_64Gpr, r_xmm0: X86_64Xmmr) {$/;"	m
empty	$VIRGIL_WIZARD/src/util/PrefixTrie.v3	/^	private var empty: PrefixTrieLeaf<K, V>;$/;"	d
emptyProbes	$VIRGIL_WIZARD/src/engine/Tuning.v3	/^	def emptyProbes = false;	\/\/ true => all probes are empty$/;"	d
emptyStacktraces	$VIRGIL_WIZARD/src/engine/Tuning.v3	/^	def emptyStacktraces = false;	\/\/ true => all stacktraces are empty$/;"	d
emptystring	$VIRGIL_WIZARD/src/modules/wasi/x86-64-linux/WspOneModule-x86-64-linux.v3	/^def emptystring = Array<byte>.new(1);$/;"	d
emulatedHostFunc	$VIRGIL_WIZARD/src/monitors/R3BackEndMonitor.v3	/^	private def emulatedHostFunc(params: Range<Value>, result_types: Array<ValueType>, func_index: int) -> HostResult {$/;"	m
enable	$VIRGIL_WIZARD/src/engine/Metrics.v3	/^	def enable(glob: GlobMatcher) {$/;"	f
enable	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	def enable() { enabled = true; }$/;"	m
enable	$VIRGIL_WIZARD/src/util/ProbeUtil.v3	/^	def enable() {$/;"	m
enableAll	$VIRGIL_WIZARD/src/engine/Metrics.v3	/^	def enableAll() {$/;"	f
enableBreakpoints	$VIRGIL_WIZARD/src/engine/Tuning.v3	/^	def enableBreakpoints = true;	\/\/ enable support for external debugger breakpoints$/;"	d
enableCheckMonitors	$VIRGIL_WIZARD/src/monitors/MonitorOptions.v3	/^	def enableCheckMonitors = false;$/;"	d
enableFor	$VIRGIL_WIZARD/src/util/ProbeUtil.v3	/^	def enableFor(n: u63) {$/;"	m
enableTraceInt	$VIRGIL_WIZARD/src/util/BasicTracing.v3	/^	def enableTraceInt() {$/;"	f
enableWhammProbeTrampoline	$VIRGIL_WIZARD/src/engine/Tuning.v3	/^	def enableWhammProbeTrampoline = true;$/;"	d
enabled	$VIRGIL_WIZARD/src/engine/Metrics.v3	/^	var enabled: bool;$/;"	d
enabled	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	private var enabled = true;$/;"	d
end	$VIRGIL_WIZARD/src/engine/Module.v3	/^type ExHandlerEntry(index: int, tag: int, start: int, end: int, info: ExHandlerInfo) #unboxed;$/;"	d
end	$VIRGIL_WIZARD/src/engine/native/NativeMemory.v3	/^	var end: Pointer;$/;"	d
end	$VIRGIL_WIZARD/src/engine/x86-64/Mmap.v3	/^	def var end: Pointer;$/;"	d
end	$VIRGIL_WIZARD/src/engine/x86-64/Redzones.v3	/^class RedZone(start: Pointer, end: Pointer, var prev: RedZone, var next: RedZone) {$/;"	d
end	$VIRGIL_WIZARD/src/engine/x86-64/X86_64PreGenStubs.v3	/^	+4	end:	i32;$/;"	d
end	$VIRGIL_WIZARD/src/monitors/BlocksMonitor.v3	/^type BasicBlockCount(start: int, end: int, instrs: int, counter: CountProbe) #unboxed;$/;"	d
end	$VIRGIL_WIZARD/src/util/ControlStack.v3	/^	private def end(opcode: Opcode) {$/;"	m
end	$VIRGIL_WIZARD/src/util/WasmAsm.v3	/^	def end() -> this {$/;"	m
endColor	$VIRGIL_WIZARD/src/engine/Trace.v3	/^	def endColor(color: Color) -> this {$/;"	m
endColors	$VIRGIL_WIZARD/src/engine/Trace.v3	/^	def endColors() -> this {$/;"	m
endPc	$VIRGIL_WIZARD/src/monitors/LoopMonitor.v3	/^	var endPc: int;$/;"	d
ends	$VIRGIL_WIZARD/src/monitors/ControlInstrumenter.v3	/^	var ends: bool;		\/\/ instrument ends$/;"	d
enforceSectionOrder	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	def enforceSectionOrder(kind: BpSection, addr: u64) {$/;"	m
engine	$VIRGIL_WIZARD/src/modules/ModuleLinker.v3	/^class ModuleLinker(engine: Engine,$/;"	d
ensureReg	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def ensureReg(sv: SpcVal, slot: u32) -> Reg {$/;"	m
enter	$VIRGIL_WIZARD/src/monitors/ProfileMonitor.v3	/^	def enter() {$/;"	m
enterFunc	$VIRGIL_WIZARD/src/monitors/ProfileMonitor.v3	/^	def enterFunc(dynamicLoc: DynamicLoc) -> ProbeAction {$/;"	m
entries	$VIRGIL_WIZARD/src/engine/Sidetable.v3	/^type Sidetable(entries: Array<int>) #unboxed {$/;"	d
entries	$VIRGIL_WIZARD/src/monitors/BlocksMonitor.v3	/^	def entries = Vector<(FuncDecl, Array<BasicBlockCount>)>.new();$/;"	d
entries	$VIRGIL_WIZARD/src/monitors/CallsMonitor.v3	/^	def entries = Vector<FuncStats>.new();$/;"	d
entries	$VIRGIL_WIZARD/src/monitors/ConstMonitor.v3	/^var entries: List<FuncArgsEntry>;$/;"	d
entries	$VIRGIL_WIZARD/src/monitors/ControlInstrumenter.v3	/^class ControlInstrumentation(func: FuncDecl, entries: Array<(int, Probe)>) {$/;"	d
entries	$VIRGIL_WIZARD/src/monitors/CoverageMonitor.v3	/^	def entries = Vector<CoverageMonitorProbe>.new();$/;"	d
entries	$VIRGIL_WIZARD/src/monitors/FuncProfileMonitor.v3	/^	def entries = Vector<EnterProbe>.new();$/;"	d
entries	$VIRGIL_WIZARD/src/monitors/InstrCountMonitor.v3	/^	def entries = Vector<(FuncDecl, int, CountProbe)>.new();$/;"	d
entries	$VIRGIL_WIZARD/src/monitors/LoopMonitor.v3	/^	def entries = Vector<LmEntry>.new();$/;"	d
entries	$VIRGIL_WIZARD/src/monitors/OpcodeMonitor.v3	/^	def entries = Vector<OpcodeEntry>.new();$/;"	d
entries	$VIRGIL_WIZARD/src/util/CfgPrinter.v3	/^	private def entries = Vector<CfgPrintEntry>.new();$/;"	d
entry	$VIRGIL_WIZARD/src/monitors/CallsMonitor.v3	/^	def entry = CountProbe.new();$/;"	d
entry	$VIRGIL_WIZARD/src/monitors/ControlInstrumenter.v3	/^	var entry: bool;	\/\/ instrument entry to function$/;"	d
entryProbes	$VIRGIL_WIZARD/src/engine/Tuning.v3	/^	def entryProbes = false;	\/\/ required for tracing\/probing$/;"	d
entryTierUpDecrement	$VIRGIL_WIZARD/src/engine/Tuning.v3	/^	def entryTierUpDecrement = 1;	\/\/ "cost" of entering a function in the interpreter$/;"	d
entry_func	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^	private def entry_func = ReplayFunction.new(Vectors.of1(global_ctx));$/;"	d
entry_idx	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^	case TableGet(table_idx: int, table_name: string, entry_idx: int, func_idx: int, func_name: string);$/;"	d
entry_probed	$VIRGIL_WIZARD/src/engine/Module.v3	/^	var entry_probed: bool;$/;"	d
entrypoint	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Target.v3	/^type SpcResultForStub(wf: WasmFunction, entrypoint: Pointer, thrown: Throwable) #unboxed { }$/;"	d
enum_section	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	def enum_section = Array<BpSection>.new(256);$/;"	d
env	$VIRGIL_WIZARD/src/engine/x86-64/X86_64WhammProbeTrampoline.v3	/^def env = X86_64MasmRegs.INT_EXEC_ENV;$/;"	d
envs	$VIRGIL_WIZARD/src/modules/wasi/WasiOptions.v3	/^	def envs = Vector<string>.new();$/;"	d
eof	$VIRGIL_WIZARD/src/engine/WasmParser.v3	/^	var eof = false;$/;"	d
eof_is_function_overflow	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	def eof_is_function_overflow(d: DataReader, pos: int, size: int, msg: string) {$/;"	m
eof_is_section_overflow	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	def eof_is_section_overflow(d: DataReader, pos: int, size: int, msg: string) {$/;"	m
eof_set_flag	$VIRGIL_WIZARD/src/engine/WasmParser.v3	/^	def eof_set_flag(d: DataReader, pos: int, size: int, msg: string) {$/;"	m
eqHeapTypeDecl	$VIRGIL_WIZARD/src/engine/Canon.v3	/^def eqHeapTypeDecl(x: HeapTypeDecl, y: HeapTypeDecl) -> bool {$/;"	m
equal	$VIRGIL_WIZARD/src/engine/Canon.v3	/^	def equal(that: RecGroup) -> bool {$/;"	m
equal	$VIRGIL_WIZARD/src/util/ArrayUtil.v3	/^	def equal<A>(x: Range<A>, y: Range<A>) -> bool {$/;"	f
equals	$VIRGIL_WIZARD/src/engine/Execute.v3	/^	def equals(that: Result) -> bool {$/;"	m
err	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^class BinParser(extensions: Extension.set, limits: Limits, err: ErrorGen, filename: string) extends BpFsmCallback {$/;"	d
err	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^class CodeValidator(extensions: Extension.set, limits: Limits, module: Module, err: ErrorGen) {$/;"	d
err	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def err = ErrorGen.new("");$/;"	d
err	$VIRGIL_WIZARD/src/engine/WasmParser.v3	/^	err: ErrorGen, var decoder: DataReader) {$/;"	d
err	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	var err: ErrorGen;$/;"	d
err	$VIRGIL_WIZARD/src/modules/HostModuleBuilder.v3	/^	var err: ErrorGen;$/;"	d
err	$VIRGIL_WIZARD/src/monitors/WhammMonitor.v3	/^private class WhammInstrumenter(wm: WhammMonitor, wi: WhammInstance, err: ErrorGen) {$/;"	d
err	$VIRGIL_WIZARD/src/util/Whamm.v3	/^class WhammVarBinder(wi: WhammInstance, err: ErrorGen) {$/;"	d
err_atpc	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	def err_atpc() -> ErrorGen {$/;"	m
err_atpos	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	def err_atpos(pos: int) -> ErrorGen {$/;"	m
err_incomplete_function	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	def err_incomplete_function(index: u32, size: u32) {$/;"	m
err_incomplete_section	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	def err_incomplete_section(addr: u64, size: u32) {$/;"	m
errnoToWasiError	$VIRGIL_WIZARD/src/modules/wasi/x86-64-linux/WspOneErrors-x86-64-linux.v3	/^	def errnoToWasiError(e: long) -> WspOneErrno {$/;"	f
error	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	case Error(error: WasmError, pc: int, msg: string) { }$/;"	d
error	$VIRGIL_WIZARD/src/engine/Instantiator.v3	/^class Instantiator(extensions: Extension.set, module: Module, var imports: Array<Exportable>, error: ErrorGen) { \/\/ TODO: s\/error\/err$/;"	d
error	$VIRGIL_WIZARD/src/modules/ModuleLinker.v3	/^		   error: ErrorGen) {$/;"	d
error	$VIRGIL_WIZARD/src/modules/wizeng/WizengModule.v3	/^	error(SigCache.ii_v, WizengModule.error),$/;"	d
error	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def error() -> bool {$/;"	m
error_code	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	var error_code: WasmError;	\/\/ wasm error code$/;"	d
error_index	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	var error_index: int;		\/\/ index where error ocurred$/;"	d
error_msg	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	var error_msg: string;$/;"	d
error_pos	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	var error_pos: u64 = NO_ADDR;$/;"	d
error_section	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	var error_section: BpSection;	\/\/ section where error ocurred$/;"	d
estimateCodeSizeFor	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def estimateCodeSizeFor(decl: FuncDecl) -> int {$/;"	f
evalInitExpr	$VIRGIL_WIZARD/src/engine/Instance.v3	/^	def evalInitExpr(init: InitExpr) -> Value {$/;"	m
events	$VIRGIL_WIZARD/src/monitors/LoopTraceMonitor.v3	/^	def events = Vector<TraceEntry>.new();$/;"	d
events	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^	private def events = Vector<WasmEvent>.new();$/;"	d
ex_handlers	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	def ex_handlers = Vector<ExHandlerEntry>.new();$/;"	d
ex_handlers	$VIRGIL_WIZARD/src/engine/Module.v3	/^	var ex_handlers = NO_EX_HANDLERS;$/;"	d
ex_slot	$VIRGIL_WIZARD/src/engine/Module.v3	/^type ExHandler(index: int, handler_pc: int, push_exnref: bool, ex_slot: int, val_stack_top: int, sidetable_pos: int) #unboxed { }$/;"	d
exception	$VIRGIL_WIZARD/src/engine/Trace.v3	/^	var exception = false;$/;"	d
exception	$VIRGIL_WIZARD/src/engine/TraceOptions.v3	/^	exception('x', "exceptions"),$/;"	d
excl	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^    excl,$/;"	d
execOp	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def execOp(pc: int, opcode: Opcode) {$/;"	m
executeMainFunction	$VIRGIL_WIZARD/src/WasmMode.v3	/^	def executeMainFunction(f: Function, args: Range<Value>) -> (Result, int) {$/;"	f
executeStartFunction	$VIRGIL_WIZARD/src/WasmMode.v3	/^	def executeStartFunction(start: Function) -> int {$/;"	f
executed	$VIRGIL_WIZARD/src/monitors/CoverageMonitor.v3	/^	def executed = Vector<bool>.new();$/;"	d
exit	$VIRGIL_WIZARD/src/monitors/ProfileMonitor.v3	/^	def exit() {$/;"	m
exit	$VIRGIL_WIZARD/src/util/ErrorBuilder.v3	/^	def exit<T>(val: T) -> T {$/;"	m
exitFunc	$VIRGIL_WIZARD/src/monitors/ProfileMonitor.v3	/^	def exitFunc(dynamicLoc: DynamicLoc) -> ProbeAction {$/;"	m
exnref	$VIRGIL_WIZARD/src/engine/WasmParser.v3	/^type Catch(tag: TagDecl, exnref: bool, depth: u32) {$/;"	d
expected	$VIRGIL_WIZARD/src/SpectestMode.v3	/^	def expected = Strings.newMap<bool>();$/;"	d
explicit_data_count	$VIRGIL_WIZARD/src/engine/Module.v3	/^	var explicit_data_count = -1;$/;"	d
exportable_cache	$VIRGIL_WIZARD/src/modules/ModuleLinker.v3	/^	private var exportable_cache: Array<Array<(Exportable, Decl)>>;$/;"	d
exported_func_names	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^	def exported_func_names = HashMap<int, string>.new(int.!<int>, int.==);$/;"	d
exported_table_names	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^	def exported_table_names = HashMap<int, string>.new(int.!<int>, int.==);$/;"	d
exports	$VIRGIL_WIZARD/src/engine/Instance.v3	/^	def exports = Array<Exportable>.new(module.exports.length);$/;"	d
exports	$VIRGIL_WIZARD/src/engine/Module.v3	/^	def exports = Vector<(string, Decl)>.new();$/;"	d
expose	$VIRGIL_WIZARD/src/modules/ModuleRegistry.v3	/^	def expose(pattern: string) {$/;"	f
exposeOne	$VIRGIL_WIZARD/src/modules/ModuleRegistry.v3	/^	def exposeOne(name: string) {$/;"	f
extensions	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^class BinParser(extensions: Extension.set, limits: Limits, err: ErrorGen, filename: string) extends BpFsmCallback {$/;"	d
extensions	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^class CodeValidator(extensions: Extension.set, limits: Limits, module: Module, err: ErrorGen) {$/;"	d
extensions	$VIRGIL_WIZARD/src/engine/Engine.v3	/^	var extensions: Extension.set;$/;"	d
extensions	$VIRGIL_WIZARD/src/engine/EngineOptions.v3	/^	var extensions: Extension.set = Extensions.getDefaults();$/;"	d
extensions	$VIRGIL_WIZARD/src/engine/Instantiator.v3	/^class Instantiator(extensions: Extension.set, module: Module, var imports: Array<Exportable>, error: ErrorGen) { \/\/ TODO: s\/error\/err$/;"	d
extensions	$VIRGIL_WIZARD/src/engine/WasmParser.v3	/^class WasmParser(extensions: Extension.set, limits: Limits, module: Module,$/;"	d
extensions	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^class SinglePassCompiler(xenv: SpcExecEnv, masm: MacroAssembler, regAlloc: RegAlloc, extensions: Extension.set, limits: Limits) extends BytecodeVisitor {$/;"	d
extract	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	def extract() -> Sidetable {$/;"	m
extract	$VIRGIL_WIZARD/src/engine/Memory.v3	/^	def extract(src_offset: u32, size: u32) -> Array<byte> {$/;"	m
extractName	$VIRGIL_WIZARD/src/util/PathUtil.v3	/^	def extractName(path: string, keepExt: bool) -> string {$/;"	f
f32_bits	$VIRGIL_WIZARD/src/util/FloatUtil.v3	/^	def f32_bits(sign: int, exp: int, mantissa: u32) -> u32 {$/;"	f
f32_nan_bits	$VIRGIL_WIZARD/src/util/FloatUtil.v3	/^	def f32_nan_bits(sign: int, mantissa: u32) -> u32 {$/;"	f
f32_reinterpret_u32	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def f32_reinterpret_u32(v: u32) -> float;$/;"	m
f64_bits	$VIRGIL_WIZARD/src/util/FloatUtil.v3	/^	def f64_bits(sign: int, exp: int, mantissa: u64) -> u64 {$/;"	f
f64_nan_bits	$VIRGIL_WIZARD/src/util/FloatUtil.v3	/^	def f64_nan_bits(sign: int, mantissa: u64) -> u64 {$/;"	f
f64_reinterpret_u64	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def f64_reinterpret_u64(v: u64) -> double;$/;"	m
f_1p1	$VIRGIL_WIZARD/src/util/FloatUtil.v3	/^	def f_1p1	= 0x4000_0000u;$/;"	d
f_1p31	$VIRGIL_WIZARD/src/util/FloatUtil.v3	/^	def f_1p31	= 0x4f00_0000u;$/;"	d
f_1p32	$VIRGIL_WIZARD/src/util/FloatUtil.v3	/^	def f_1p32	= 0x4f80_0000u;$/;"	d
f_1p33	$VIRGIL_WIZARD/src/util/FloatUtil.v3	/^	def f_1p33	= 0x5000_0000u;$/;"	d
f_1p63	$VIRGIL_WIZARD/src/util/FloatUtil.v3	/^	def f_1p63	= 0x5f00_0000u;$/;"	d
f_1p64	$VIRGIL_WIZARD/src/util/FloatUtil.v3	/^	def f_1p64	= 0x5f80_0000u;$/;"	d
f_d	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def f_d = S(arr_f, arr_d);$/;"	d
f_f	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def f_f = S(arr_f, arr_f);$/;"	d
f_getLabel	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def f_getLabel(depth: u32) -> Label;$/;"	m
f_getLocalType	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def f_getLocalType(index: u32) -> TypeVar;$/;"	m
f_getTopOfStackType	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def f_getTopOfStackType() -> TypeVar;$/;"	m
f_i	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def f_i = S(arr_f, arr_i);$/;"	d
f_infinity	$VIRGIL_WIZARD/src/util/FloatUtil.v3	/^	def f_infinity	= 0x7f800000u;$/;"	d
f_isAtEnd	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def f_isAtEnd() -> bool;$/;"	m
f_l	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def f_l = S(arr_f, arr_l);$/;"	d
f_minus0	$VIRGIL_WIZARD/src/util/FloatUtil.v3	/^	def f_minus0	= 0x8000_0000u;$/;"	d
f_minus1	$VIRGIL_WIZARD/src/util/FloatUtil.v3	/^	def f_minus1	= 0xbf80_0000u;$/;"	d
f_minus1p31	$VIRGIL_WIZARD/src/util/FloatUtil.v3	/^	def f_minus1p31	= 0xcf00_0000u;$/;"	d
f_minus1p32	$VIRGIL_WIZARD/src/util/FloatUtil.v3	/^	def f_minus1p32	= 0xcf80_0000u;$/;"	d
f_minus1p33	$VIRGIL_WIZARD/src/util/FloatUtil.v3	/^	def f_minus1p33	= 0xd000_0000u;$/;"	d
f_minus1p63	$VIRGIL_WIZARD/src/util/FloatUtil.v3	/^	def f_minus1p63	= 0xdf00_0000u;$/;"	d
f_minus1p64	$VIRGIL_WIZARD/src/util/FloatUtil.v3	/^	def f_minus1p64	= 0xdf80_0000u;$/;"	d
f_minus_infinity	$VIRGIL_WIZARD/src/util/FloatUtil.v3	/^	def f_minus_infinity	= 0xff800000u;$/;"	d
f_nan	$VIRGIL_WIZARD/src/util/FloatUtil.v3	/^	def f_nan	= 0x7fc0_0000u;$/;"	d
f_s	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def f_s = S(arr_f, arr_s);$/;"	d
fail	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	def fail<T>() -> T {$/;"	m
fail	$VIRGIL_WIZARD/src/engine/Instantiator.v3	/^	private def fail(msg: string) -> Instance {$/;"	m
fail	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def fail(msg: string) {$/;"	m
fallthru	$VIRGIL_WIZARD/src/util/CfgPrinter.v3	/^	private var fallthru = false;$/;"	d
fastDispatchTableOffset	$VIRGIL_WIZARD/src/engine/x86-64/X86_64PreGenStubs.v3	/^	+12	fastDispatchTableOffset:	i32;	\/\/ dispatch table when probes disabled$/;"	d
fastFwCopy	$VIRGIL_WIZARD/src/engine/v3/V3Target.v3	/^	def fastFwCopy(dst: Range<byte>, src: Range<byte>) {$/;"	f
fastFwCopy	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Target.v3	/^	def fastFwCopy(dst: Range<byte>, src: Range<byte>) { \/\/ FAST, danger: uses unsafe Virgil features$/;"	f
fastIntTierUpThreshold	$VIRGIL_WIZARD/src/engine/Tuning.v3	/^	var fastIntTierUpThreshold = 10;	\/\/ threshold at which int -> SPC tiering occurs$/;"	d
fatal	$VIRGIL_WIZARD/src/engine/Trace.v3	/^	var fatal = false;$/;"	d
fatal	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^def fatal = System.error("V3InterpreterError", _);$/;"	d
fatal	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^def fatal(msg: string) {$/;"	m
fatal	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	def fatal(msg: string) {$/;"	m
fatalUnimplemented	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def fatalUnimplemented();$/;"	m
fb_table	$VIRGIL_WIZARD/src/util/OpcodeMap.v3	/^	private def fb_table = OpcodeMapTable<T>.new(0xFB, Opcodes.page_FB.opcodes);$/;"	d
fc_table	$VIRGIL_WIZARD/src/util/OpcodeMap.v3	/^	private def fc_table = OpcodeMapTable<T>.new(0xFC, Opcodes.page_FC.opcodes);$/;"	d
fd_advise	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	fd_advise,$/;"	d
fd_allocate	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	fd_allocate,$/;"	d
fd_datasync	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	fd_datasync,$/;"	d
fd_datasync	$VIRGIL_WIZARD/src/modules/wasi/x86-64-linux/WspOneModule-x86-64-linux.v3	/^	def fd_datasync(fd: int) -> int {$/;"	m
fd_fdstat_set_flags	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	fd_fdstat_set_flags,$/;"	d
fd_filestat_get	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	fd_filestat_get,$/;"	d
fd_filestat_get	$VIRGIL_WIZARD/src/modules/wasi/x86-64-linux/WspOneModule-x86-64-linux.v3	/^	def fd_filestat_get(fd: int, filestatptr: int) -> int {$/;"	m
fd_filestat_set_size	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	fd_filestat_set_size,$/;"	d
fd_filestat_set_size	$VIRGIL_WIZARD/src/modules/wasi/x86-64-linux/WspOneModule-x86-64-linux.v3	/^	def fd_filestat_set_size(fd: int, size: long) -> int {$/;"	m
fd_filestat_set_times	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	fd_filestat_set_times,$/;"	d
fd_filestat_set_times	$VIRGIL_WIZARD/src/modules/wasi/x86-64-linux/WspOneModule-x86-64-linux.v3	/^	def fd_filestat_set_times(fd: int, atim: long, mtim: long, fst_flags: int) -> int {$/;"	m
fd_read	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	fd_read,$/;"	d
fd_read	$VIRGIL_WIZARD/src/modules/wasi/x86-64-linux/WspOneModule-x86-64-linux.v3	/^	def fd_read(fd: int, iovs_ptr: int, iovs_len: int, size: int) -> HostResult {$/;"	m
fd_read_write	$VIRGIL_WIZARD/src/modules/wasi/x86-64-linux/WspOneModule-x86-64-linux.v3	/^	def fd_read_write(syscall: int, fd: int, iovs_ptr: int, iovs_len: int, size: int) -> HostResult {$/;"	m
fd_readdir	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	fd_readdir,$/;"	d
fd_readdir	$VIRGIL_WIZARD/src/modules/wasi/x86-64-linux/WspOneModule-x86-64-linux.v3	/^	def fd_readdir(fd: int, ptr: int, len: int, cookie: long, size: int) -> HostResult {$/;"	m
fd_seek	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	fd_seek,$/;"	d
fd_seek	$VIRGIL_WIZARD/src/modules/wasi/x86-64-linux/WspOneModule-x86-64-linux.v3	/^	def fd_seek(fd: int, offset: long, whence: int, ptr: int) -> HostResult {$/;"	m
fd_sync	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	fd_sync,$/;"	d
fd_sync	$VIRGIL_WIZARD/src/modules/wasi/x86-64-linux/WspOneModule-x86-64-linux.v3	/^	def fd_sync(fd: int) -> int {$/;"	m
fd_table	$VIRGIL_WIZARD/src/util/OpcodeMap.v3	/^	private def fd_table = OpcodeMapTable<T>.new(0xFD, Opcodes.page_FD.opcodes);$/;"	d
fd_tell	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	fd_tell,$/;"	d
fd_tell	$VIRGIL_WIZARD/src/modules/wasi/x86-64-linux/WspOneModule-x86-64-linux.v3	/^	def fd_tell(fd: int, ptr: int) -> HostResult {$/;"	m
fd_write	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	fd_write,$/;"	d
fd_write	$VIRGIL_WIZARD/src/modules/wasi/x86-64-linux/WspOneModule-x86-64-linux.v3	/^	def fd_write(fd: int, iovs_ptr: int, iovs_len: int, size: int) -> HostResult {$/;"	m
fds	$VIRGIL_WIZARD/src/modules/wasi/WasiFdMap.v3	/^	private def fds = Array<WasiFd>.new(max);$/;"	d
fds	$VIRGIL_WIZARD/src/util/FileDescriptorMap.v3	/^	private def fds = Array<int>.new(max);$/;"	d
fe_table	$VIRGIL_WIZARD/src/util/OpcodeMap.v3	/^	private def fe_table = OpcodeMapTable<T>.new(0xFE, Opcodes.page_FE.opcodes);$/;"	d
ff_f	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def ff_f = S(arr_ff, arr_f);$/;"	d
ff_i	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def ff_i = S(arr_ff, arr_i);$/;"	d
field_name	$VIRGIL_WIZARD/src/engine/Module.v3	/^class ImportInfo(module_name: string, field_name: string, import_index: u31) {$/;"	d
field_offset	$VIRGIL_WIZARD/src/engine/Sidetable.v3	/^	+1	field_offset:		u24;$/;"	d
field_types	$VIRGIL_WIZARD/src/engine/Type.v3	/^	def field_types: Array<StorageType>;$/;"	d
fields	$VIRGIL_WIZARD/src/engine/Module.v3	/^	var fields: Array<ValueType>;$/;"	d
filename	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^class BinParser(extensions: Extension.set, limits: Limits, err: ErrorGen, filename: string) extends BpFsmCallback {$/;"	d
filename	$VIRGIL_WIZARD/src/engine/Module.v3	/^class Module(filename: string) {$/;"	d
filename	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^class ErrorGen(filename: string) {$/;"	d
filetype	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	+16	filetype:	Wasi_filetype;$/;"	d
fill	$VIRGIL_WIZARD/src/engine/Memory.v3	/^	def fill(dest: u64, val: u8, size: u64) -> TrapReason {$/;"	m
fill	$VIRGIL_WIZARD/src/engine/Table.v3	/^	def fill(dst_offset: u64, val: Value, size: u64) -> TrapReason {$/;"	m
fillFilestat	$VIRGIL_WIZARD/src/modules/wasi/x86-64-linux/WspOneModule-x86-64-linux.v3	/^	def fillFilestat(filestat: Range<byte>) {$/;"	m
fillTimespecs	$VIRGIL_WIZARD/src/modules/wasi/x86-64-linux/WspOneModule-x86-64-linux.v3	/^	def fillTimespecs(atim: i64, mtim: i64, fst_flags_i: int) {$/;"	m
filter	$VIRGIL_WIZARD/src/monitors/CallsMonitor.v3	/^	var filter: DeclFilter;$/;"	d
filter	$VIRGIL_WIZARD/src/monitors/ConstMonitor.v3	/^def filter = monitor_.options.addAlias($/;"	d
filter	$VIRGIL_WIZARD/src/monitors/FuncProfileMonitor.v3	/^var filter: DeclFilter;$/;"	d
filter	$VIRGIL_WIZARD/src/monitors/ProfileMonitor.v3	/^	var filter: DeclFilter;$/;"	d
filter	$VIRGIL_WIZARD/src/util/BytecodeInstrumenter.v3	/^	var filter: DeclFilter; 	\/\/ client can set to filter functions instrumented$/;"	d
filter	$VIRGIL_WIZARD/src/util/ImportTracer.v3	/^class ImportTracer(var filter: DeclFilter) {$/;"	d
filterArgs	$VIRGIL_WIZARD/src/util/OptionsRegistry.v3	/^	def filterArgs(args: Array<string>, err: ErrorGen) {$/;"	f
filterOpt	$VIRGIL_WIZARD/src/monitors/ProfileMonitor.v3	/^def filterOpt = monitor_.options.newDeclFilterOption("calls", "apply profiling to selected functions");$/;"	d
filterReplayFunctions	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^	private def filterReplayFunctions(module: Module, decl: FuncDecl) -> bool {$/;"	m
filter_	$VIRGIL_WIZARD/src/monitors/FuncProfileMonitor.v3	/^def filter_ = monitor_.options.addAlias($/;"	d
final	$VIRGIL_WIZARD/src/engine/Type.v3	/^class HeapTypeDecl(final: bool, supertypes: Array<HeapType>) extends Decl {$/;"	d
find	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def find(prefix: byte, code: u32) -> Opcode {$/;"	f
findAndSpillReg	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def findAndSpillReg(kind: ValueKind, slot: int) -> Reg {$/;"	m
findByName	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def findByName(str: string) -> Opcode {$/;"	f
findChoice	$VIRGIL_WIZARD/src/util/PrefixTrie.v3	/^	def findChoice<Q>(k: K) -> Q {$/;"	m
findExHandler	$VIRGIL_WIZARD/src/engine/Module.v3	/^	def findExHandler(instance: Instance, tag: Tag, throw_pc: int) -> ExHandler {$/;"	m
findExHandler	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	private def findExHandler(ip: Pointer, code: RiUserCode, pos: StackFramePos, ex: Exception) -> bool {$/;"	m
findExSlot	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	def findExSlot(target: ControlEntry) -> (int, bool) {$/;"	m
findExportOfType	$VIRGIL_WIZARD/src/engine/Instance.v3	/^	def findExportOfType<T>(matcher: GlobMatcher) -> T {$/;"	m
findHandler	$VIRGIL_WIZARD/src/engine/Module.v3	/^	def findHandler(name: string, handlers: Array<ExHandlerEntry>, instance: Instance, tag: Tag, throw_pc: int) -> ExHandler {$/;"	m
findMain	$VIRGIL_WIZARD/src/WasmMode.v3	/^	def findMain(instance: Instance) -> (Function, Array<Value>) {$/;"	f
findMinAllocated	$VIRGIL_WIZARD/src/engine/compiler/RegAlloc.v3	/^	def findMinAllocated(cost: Reg -> int) -> Reg {$/;"	m
findSpillCandidate	$VIRGIL_WIZARD/src/engine/compiler/RegAlloc.v3	/^	def findSpillCandidate(kind: ValueKind, addSpillCost: (int, Reg, int) -> int) -> Reg {$/;"	m
findSuspensionHandler	$VIRGIL_WIZARD/src/engine/Module.v3	/^	def findSuspensionHandler(instance: Instance, tag: Tag, resume_pc: int) -> ExHandler {$/;"	m
findSwitchHandler	$VIRGIL_WIZARD/src/engine/Module.v3	/^	def findSwitchHandler(instance: Instance, tag: Tag, resume_pc: int) -> ExHandler {$/;"	m
find_next_slash	$VIRGIL_WIZARD/src/modules/wasi/PathResolver.v3	/^def find_next_slash(s: string, start_pt: i32) -> int {$/;"	m
finish	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	def finish(onAccept: (Module, u32, ErrorGen) -> void) -> Module {$/;"	m
finish	$VIRGIL_WIZARD/src/engine/Canon.v3	/^	def finish(cache: HeapTypeCache) -> Array<HeapTypeDecl> {$/;"	m
finish	$VIRGIL_WIZARD/src/modules/HostModuleBuilder.v3	/^	def finish() -> HostModule {$/;"	m
finish0	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	private def finish0() -> Module {$/;"	m
fire	$VIRGIL_WIZARD/src/engine/Probe.v3	/^	def fire(dynamicLoc: DynamicLoc) -> ProbeAction {$/;"	m
fire	$VIRGIL_WIZARD/src/monitors/CallsMonitor.v3	/^	def fire(dynamicLoc: DynamicLoc) -> ProbeAction {$/;"	m
fire	$VIRGIL_WIZARD/src/monitors/ConstMonitor.v3	/^	def fire(loc: DynamicLoc) -> ProbeAction {$/;"	m
fire	$VIRGIL_WIZARD/src/monitors/ControlInstrumenter.v3	/^	def fire(loc: DynamicLoc) -> ProbeAction {$/;"	m
fire	$VIRGIL_WIZARD/src/monitors/CoverageMonitor.v3	/^	def fire(dynamicLoc: DynamicLoc) -> ProbeAction {$/;"	m
fire	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	def fire(dynamicLoc: DynamicLoc) -> ProbeAction {$/;"	m
fire	$VIRGIL_WIZARD/src/monitors/FuncProfileMonitor.v3	/^	def fire(loc: DynamicLoc) -> ProbeAction {$/;"	m
fire	$VIRGIL_WIZARD/src/monitors/LoopTraceMonitor.v3	/^	def fire(loc: DynamicLoc) -> ProbeAction {$/;"	m
fire	$VIRGIL_WIZARD/src/monitors/MemStatsMonitor.v3	/^	def fire(dynamicLoc: DynamicLoc) -> ProbeAction {$/;"	m
fire	$VIRGIL_WIZARD/src/monitors/ModuleInstrumenter.v3	/^	def fire(dynamicLoc: DynamicLoc) -> ProbeAction {$/;"	m
fire	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^	def fire(loc: DynamicLoc) -> ProbeAction {$/;"	m
fire	$VIRGIL_WIZARD/src/util/BasicTracing.v3	/^	def fire(dynamicLoc: DynamicLoc) -> ProbeAction {$/;"	m
fire	$VIRGIL_WIZARD/src/util/ProbeUtil.v3	/^	def fire(dynamicLoc: DynamicLoc) -> ProbeAction {$/;"	m
fire	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	def fire(loc: DynamicLoc) -> ProbeAction {$/;"	m
fireGlobalProbes	$VIRGIL_WIZARD/src/engine/Instrumentation.v3	/^	def fireGlobalProbes(dynamicLoc: DynamicLoc) -> Throwable {$/;"	f
fireLocalProbes	$VIRGIL_WIZARD/src/engine/Instrumentation.v3	/^	def fireLocalProbes(dynamicLoc: DynamicLoc) -> Throwable {$/;"	f
fire_i	$VIRGIL_WIZARD/src/monitors/ControlInstrumenter.v3	/^	def fire_i(v: u32) {$/;"	m
fire_i	$VIRGIL_WIZARD/src/monitors/LoopTraceMonitor.v3	/^	def fire_i(i: u32) {$/;"	m
fire_i	$VIRGIL_WIZARD/src/monitors/MemStatsMonitor.v3	/^	def fire_i(addr: u32) {$/;"	m
fire_i	$VIRGIL_WIZARD/src/util/ProbeUtil.v3	/^	def fire_i(i: u32) {}$/;"	m
fire_probe	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^	def fire_probe(addr: u64, val_lower: u64, val_upper: u64) {$/;"	m
fire_probe	$VIRGIL_WIZARD/src/util/ProbeUtil.v3	/^	def fire_probe(addr: u64, val_lower: u64, val_upper: u64) {}$/;"	m
first	$VIRGIL_WIZARD/src/engine/compiler/RegAlloc.v3	/^	private var first: Array<int>;			\/\/ first assignment of each register$/;"	d
first_ref	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	var first_ref: int = -1;$/;"	d
flags	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^type MemArg(flags: u32, memory_index: u31, offset: u64) #unboxed { }$/;"	d
flags	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^type SpcVal(flags: byte, reg: Reg, const: int) #unboxed {$/;"	d
floorv	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def floorv: u64 = if(isSigned,$/;"	d
flush	$VIRGIL_WIZARD/src/engine/Trace.v3	/^	def flush() -> this {$/;"	m
forEachAllocatedReg	$VIRGIL_WIZARD/src/engine/compiler/RegAlloc.v3	/^	def forEachAllocatedReg<T>(reg: Reg, func: Reg -> T) {$/;"	m
forEachAssignment	$VIRGIL_WIZARD/src/engine/compiler/RegAlloc.v3	/^	def forEachAssignment<T>(reg: Reg, func: int -> T) {$/;"	m
forEachAssignmentInRange	$VIRGIL_WIZARD/src/engine/compiler/RegAlloc.v3	/^	def forEachAssignmentInRange<T>(reg: Reg, min: int, max: int, func: int -> T) {$/;"	m
forEachFunc	$VIRGIL_WIZARD/src/monitors/ModuleInstrumenter.v3	/^	def forEachFunc<T>(f: (ModuleInstrumenter, FuncDecl) -> T) {$/;"	m
forEachFuncFiltered	$VIRGIL_WIZARD/src/monitors/ModuleInstrumenter.v3	/^	def forEachFuncFiltered<T>(filter: DeclFilter, f: (ModuleInstrumenter, FuncDecl) -> T) {$/;"	m
forEachFuncMatching	$VIRGIL_WIZARD/src/monitors/ModuleInstrumenter.v3	/^	def forEachFuncMatching<T>(filter: (Module, FuncDecl) -> bool, f: (ModuleInstrumenter, FuncDecl) -> T) {$/;"	m
forceGC	$VIRGIL_WIZARD/src/engine/v3/V3Target.v3	/^	def forceGC() { } \/\/ nop$/;"	f
forceGC	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Target.v3	/^	def forceGC = RiGc.forceGC;$/;"	d
force_gc	$VIRGIL_WIZARD/src/modules/wizeng/WizengModule.v3	/^	force_gc(SigCache.v_v, WizengModule.force_gc),$/;"	d
forgeClosure	$VIRGIL_WIZARD/src/engine/x86-64/X86_64PreGenStubs.v3	/^	def forgeClosure<C>(c: C) -> P -> R {$/;"	m
fourByteSidetable	$VIRGIL_WIZARD/src/engine/Tuning.v3	/^	def fourByteSidetable = true;	\/\/ sidetable entries are 4-bytes$/;"	d
fp	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	var fp: int;			\/\/ frame pointer; i.e. base of locals$/;"	d
frame	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^type DynamicLoc(func: WasmFunction, pc: int, frame: TargetFrame) #unboxed { }$/;"	d
frame	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def frame = xenv;$/;"	d
frame	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^class V3FrameAccessor(frame: V3Frame) extends FrameAccessor {$/;"	d
frame	$VIRGIL_WIZARD/src/engine/v3/V3Target.v3	/^type TargetFrame(frame: V3Frame) #unboxed {$/;"	d
frame	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^type StackFramePos(stack: X86_64Stack, frame: TargetFrame) #unboxed;$/;"	d
frameAccess	$VIRGIL_WIZARD/src/engine/Tuning.v3	/^	def frameAccess = false;	\/\/ required for debugging$/;"	d
frameAccessors	$VIRGIL_WIZARD/src/monitors/ModuleInstrumenter.v3	/^private class FuncWithLoopExitProbe(frameAccessors: ListStack<FrameAccessor>, f: DynamicLoc -> ProbeAction) extends Probe {$/;"	d
frameSize	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	var frameSize: int;$/;"	d
frameSize	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^	var frameSize: int;$/;"	d
frameSize	$VIRGIL_WIZARD/src/engine/x86-64/X86_64PreGenStubs.v3	/^	def frameSize: int;$/;"	d
frameSize	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def frameSize = Pointer.SIZE;$/;"	d
frameUpdate	$VIRGIL_WIZARD/src/engine/Tuning.v3	/^	def frameUpdate = false;	\/\/ required for debugging$/;"	d
frameVariables	$VIRGIL_WIZARD/src/engine/Tuning.v3	/^	def frameVariables = false;	\/\/ allows probes to store variables in caller frame$/;"	d
frame_var_tags	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	def frame_var_tags = Vector<byte>.new();$/;"	d
frame_var_tags	$VIRGIL_WIZARD/src/engine/Module.v3	/^	var frame_var_tags: Array<byte>;		\/\/ value tags for frame variables$/;"	d
free	$VIRGIL_WIZARD/src/engine/compiler/RegAlloc.v3	/^	def free(reg: Reg) {$/;"	m
free	$VIRGIL_WIZARD/src/modules/wasi/WasiFdMap.v3	/^	def free(fd: int) -> int {$/;"	m
free	$VIRGIL_WIZARD/src/util/FileDescriptorMap.v3	/^	def free(fd: int) -> int {$/;"	m
freeAll	$VIRGIL_WIZARD/src/engine/compiler/RegAlloc.v3	/^	def freeAll() {$/;"	m
freeAllAndResetOrder	$VIRGIL_WIZARD/src/engine/compiler/RegAlloc.v3	/^	def freeAllAndResetOrder(order: Array<Reg>) {$/;"	m
freeAllAndResetState	$VIRGIL_WIZARD/src/engine/compiler/RegAlloc.v3	/^	def freeAllAndResetState<T>(regState: Array<T>, freeVal: T) {$/;"	m
freeCursor	$VIRGIL_WIZARD/src/engine/compiler/RegAlloc.v3	/^	private var freeCursor: SpcRaPoolLink;$/;"	d
freeReg	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def freeReg(reg: Reg) {$/;"	m
free_regs	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^enum SpillMode(free_regs: bool, remember_stored: bool) {$/;"	d
freebits	$VIRGIL_WIZARD/src/engine/compiler/RegAlloc.v3	/^	private var freebits: Array<int>;		\/\/ free status for each register, by pool$/;"	d
frequency	$VIRGIL_WIZARD/src/engine/compiler/RegAlloc.v3	/^	def frequency(reg: Reg) -> u2 {$/;"	m
fromSp	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	def fromSp(sp: Pointer) -> Ref<X86_64InterpreterFrame> {$/;"	f
fs_s	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def fs_s = S(arr_fs, arr_s);$/;"	d
fsm	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	private var fsm: BpFsm;$/;"	d
ftype	$VIRGIL_WIZARD/src/modules/wasi/WasiFdMap.v3	/^class WasiFd(sysfd: int, ftype: wasi_filetype, preopen: bool, path: string) {$/;"	d
fuel_count	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^	var fuel_count: u64 = 0;$/;"	d
fuel_counter	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^	def fuel_counter = CountProbe.new();$/;"	d
fully_instantiated	$VIRGIL_WIZARD/src/engine/Instantiator.v3	/^	private var fully_instantiated = false;$/;"	d
func	$VIRGIL_WIZARD/src/engine/BytecodeIterator.v3	/^	def var func: FuncDecl;				\/\/ current function$/;"	d
func	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	var func: FuncDecl;$/;"	d
func	$VIRGIL_WIZARD/src/engine/Host.v3	/^	case TailCall(func: Function, args: Array<Value>);$/;"	d
func	$VIRGIL_WIZARD/src/engine/Sidetable.v3	/^class SidetableMap(func: FuncDecl) {$/;"	d
func	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^type DynamicLoc(func: WasmFunction, pc: int, frame: TargetFrame) #unboxed { }$/;"	d
func	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	var func: FuncDecl;$/;"	d
func	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	var func: WasmFunction;		\/\/ wasm function$/;"	d
func	$VIRGIL_WIZARD/src/engine/x86-64/X86_64PreGenStubs.v3	/^	private var func: P -> R;$/;"	d
func	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	var func: Function; \/\/ TODO: move into "enter-func-stub"$/;"	d
func	$VIRGIL_WIZARD/src/modules/HostModuleBuilder.v3	/^	def func(name: string, sig: SigDecl, hf: Range<Value> -> HostResult) -> this {$/;"	m
func	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	def func(name: string, i: WasiInstance) -> HostFunction {$/;"	m
func	$VIRGIL_WIZARD/src/monitors/CallsMonitor.v3	/^private class FuncStats(module: Module, func: FuncDecl) {$/;"	d
func	$VIRGIL_WIZARD/src/monitors/ConstMonitor.v3	/^private class FuncArgsEntry(module: Module, func: FuncDecl) extends Probe {$/;"	d
func	$VIRGIL_WIZARD/src/monitors/ControlInstrumenter.v3	/^class ControlInstrumentation(func: FuncDecl, entries: Array<(int, Probe)>) {$/;"	d
func	$VIRGIL_WIZARD/src/monitors/CoverageMonitor.v3	/^private class CoverageMonitorProbe(module: Module, func: FuncDecl, monitor: CoverageMonitor, start: int) extends Probe {$/;"	d
func	$VIRGIL_WIZARD/src/monitors/FuncProfileMonitor.v3	/^private class EnterProbe(module: Module, func: FuncDecl) extends Probe {$/;"	d
func	$VIRGIL_WIZARD/src/monitors/HotnessMonitor.v3	/^private class LocCounter(func: FuncDecl, pc: int, op: Opcode, var group: int) extends CountProbe {$/;"	d
func	$VIRGIL_WIZARD/src/monitors/InstrCountMonitor.v3	/^	var func: FuncDecl;$/;"	d
func	$VIRGIL_WIZARD/src/monitors/LoopMonitor.v3	/^private class LmEntry(module: Module, func: FuncDecl, depth: int, pc: int) extends CountProbe {$/;"	d
func	$VIRGIL_WIZARD/src/monitors/LoopTraceMonitor.v3	/^type TraceAnchorLoc(module: Module, func: FuncDecl, pc: int) {$/;"	d
func	$VIRGIL_WIZARD/src/monitors/ModuleInstrumenter.v3	/^private class AfterInstrVisitor(module: Module, func: FuncDecl, pc: int, f: DynamicLoc -> ProbeAction) extends BytecodeVisitor {$/;"	d
func	$VIRGIL_WIZARD/src/monitors/ProfileMonitor.v3	/^private class ProfileTreeNode(parent: ProfileTreeNode, func: WasmFunction) {$/;"	d
func	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^private class EnterProbe(handler: EventHandler, func: FuncDecl) extends Probe {$/;"	d
func	$VIRGIL_WIZARD/src/monitors/WhammMonitor.v3	/^	var func: FuncDecl;$/;"	d
func	$VIRGIL_WIZARD/src/util/BasicBlockIterator.v3	/^	def var func: FuncDecl;				\/\/ function$/;"	d
func	$VIRGIL_WIZARD/src/util/Whamm.v3	/^type WhammRule(params: Array<WhammParam>, func: FuncDecl, pred: WhammPredicate) #unboxed;$/;"	d
func2	$VIRGIL_WIZARD/src/modules/HostModuleBuilder.v3	/^	def func2(name: string, hf: HostFunc) -> this {$/;"	m
funcArgs	$VIRGIL_WIZARD/src/monitors/ConstMonitor.v3	/^var funcArgs = true;$/;"	d
funcCanInline	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^def funcCanInline(decl: FuncDecl) -> InlineConfig {$/;"	m
funcEntries	$VIRGIL_WIZARD/src/monitors/WhammMonitor.v3	/^	var funcEntries: List<WhammRule>;$/;"	d
funcExits	$VIRGIL_WIZARD/src/monitors/WhammMonitor.v3	/^	var funcExits: List<WhammRule>;$/;"	d
funcImported	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^	private def funcImported(func_index: int) -> bool {$/;"	m
func_C	$VIRGIL_WIZARD/src/modules/HostModuleBuilder.v3	/^	def func_C(name: string, sig: SigDecl, hfp: C -> (Range<Value> -> HostResult)) -> this {$/;"	m
func_M	$VIRGIL_WIZARD/src/modules/HostModuleBuilder.v3	/^	def func_M(name: string, sig: SigDecl, hfp: (C, Range<Value>) -> HostResult) -> this {$/;"	m
func_arg	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	var func_arg: Reg;$/;"	d
func_arg	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^	var func_arg: Reg;$/;"	d
func_body_cursor	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	private var func_body_cursor: int;$/;"	d
func_decl	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^	var func_decl: Reg;$/;"	d
func_decl	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	+72	func_decl	: i64;	\/\/ FuncDecl$/;"	d
func_decl_slot	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^	var func_decl_slot: MasmAddr;$/;"	d
func_i_i	$VIRGIL_WIZARD/src/modules/HostModuleBuilder.v3	/^	def func_i_i(name: string, hfp: C -> int -> int) -> this				{ module.adapters[name] = fun c => HostAdapters.i_i(hfp(c)); }$/;"	m
func_i_l	$VIRGIL_WIZARD/src/modules/HostModuleBuilder.v3	/^	def func_i_l(name: string, hfp: C -> (int) -> long) -> this				{ module.adapters[name] = fun c => HostAdapters.i_l(hfp(c)); }$/;"	m
func_i_v	$VIRGIL_WIZARD/src/modules/HostModuleBuilder.v3	/^	def func_i_v(name: string, hfp: C -> int -> void) -> this				{ module.adapters[name] = fun c => HostAdapters.i_v(hfp(c)); }$/;"	m
func_id	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^private type WasmFuncTrace(func_id: int, instr_count: u64, is_start: bool) {$/;"	d
func_id	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^private type CallStackEntry(func_id: int, kind: CallKind);$/;"	d
func_id_from_imp_name	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^	def func_id_from_imp_name = Strings.newMap<int>();$/;"	d
func_idx	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^	case TableGet(table_idx: int, table_name: string, entry_idx: int, func_idx: int, func_name: string);$/;"	d
func_ii_i	$VIRGIL_WIZARD/src/modules/HostModuleBuilder.v3	/^	def func_ii_i(name: string, hfp: C -> (int, int) -> int) -> this			{ module.adapters[name] = fun c => HostAdapters.ii_i(hfp(c)); }$/;"	m
func_ii_l	$VIRGIL_WIZARD/src/modules/HostModuleBuilder.v3	/^	def func_ii_l(name: string, hfp: C -> (int, int) -> long) -> this			{ module.adapters[name] = fun c => HostAdapters.ii_l(hfp(c)); }$/;"	m
func_ii_v	$VIRGIL_WIZARD/src/modules/HostModuleBuilder.v3	/^	def func_ii_v(name: string, hfp: C -> (int, int) -> void) -> this			{ module.adapters[name] = fun c => HostAdapters.ii_v(hfp(c)); }$/;"	m
func_iii_i	$VIRGIL_WIZARD/src/modules/HostModuleBuilder.v3	/^	def func_iii_i(name: string, hfp: C -> (int, int, int) -> int) -> this			{ module.adapters[name] = fun c => HostAdapters.iii_i(hfp(c)); }$/;"	m
func_iii_l	$VIRGIL_WIZARD/src/modules/HostModuleBuilder.v3	/^	def func_iii_l(name: string, hfp: C -> (int, int, int) -> long) -> this			{ module.adapters[name] = fun c => HostAdapters.iii_l(hfp(c)); }$/;"	m
func_iiii_l	$VIRGIL_WIZARD/src/modules/HostModuleBuilder.v3	/^	def func_iiii_l(name: string, hfp: C -> (int, int, int, int) -> long) -> this		{ module.adapters[name] = fun c => HostAdapters.iiii_l(hfp(c)); }$/;"	m
func_iiiii_l	$VIRGIL_WIZARD/src/modules/HostModuleBuilder.v3	/^	def func_iiiii_l(name: string, hfp: C -> (int, int, int, int, int) -> long) -> this	{ module.adapters[name] = fun c => HostAdapters.iiiii_l(hfp(c)); }$/;"	m
func_iiiiii_l	$VIRGIL_WIZARD/src/modules/HostModuleBuilder.v3	/^	def func_iiiiii_l(name: string, hfp: C -> (int, int, int, int, int, int) -> long) -> this	{ module.adapters[name] = fun c => HostAdapters.iiiiii_l(hfp(c)); }$/;"	m
func_iiiiiiii_l	$VIRGIL_WIZARD/src/modules/HostModuleBuilder.v3	/^	def func_iiiiiiii_l(name: string, hfp: C -> (int, int, int, int, int, int, int, int) -> long) { module.adapters[name] = fun c => HostAdapters.iiiiiiii_l(hfp(c)); }$/;"	m
func_iiiiil_l	$VIRGIL_WIZARD/src/modules/HostModuleBuilder.v3	/^	def func_iiiiil_l(name: string, hfp: C -> (int, int, int, int, int, long) -> long) -> this	{ module.adapters[name] = fun c => HostAdapters.iiiiil_l(hfp(c)); }$/;"	m
func_iiil_l	$VIRGIL_WIZARD/src/modules/HostModuleBuilder.v3	/^	def func_iiil_l(name: string, hfp: C -> (int, int, int, long) -> long) -> this		{ module.adapters[name] = fun c => HostAdapters.iiil_l(hfp(c)); }$/;"	m
func_il_l	$VIRGIL_WIZARD/src/modules/HostModuleBuilder.v3	/^	def func_il_l(name: string, hfp: C -> (int, long) -> long) -> this			{ module.adapters[name] = fun c => HostAdapters.il_l(hfp(c)); }$/;"	m
func_ili_l	$VIRGIL_WIZARD/src/modules/HostModuleBuilder.v3	/^	def func_ili_l(name: string, hfp: C -> (int, long, int) -> long) -> this		{ module.adapters[name] = fun c => HostAdapters.ili_l(hfp(c)); }$/;"	m
func_illi_l	$VIRGIL_WIZARD/src/modules/HostModuleBuilder.v3	/^	def func_illi_l(name: string, hfp: C -> (int, long, long, int) -> long) -> this		{ module.adapters[name] = fun c => HostAdapters.illi_l(hfp(c)); }$/;"	m
func_index	$VIRGIL_WIZARD/src/engine/Module.v3	/^	var func_index = -1;$/;"	d
func_index	$VIRGIL_WIZARD/src/monitors/CallsMonitor.v3	/^private class CallProbe(tail: bool, func_index: u31) extends CountProbe { }$/;"	d
func_index	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	case FunctionPc(func_index: int, pc: int) {$/;"	d
func_index	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^private class ExitProbe(handler: EventHandler, func_index: int) extends Probe {$/;"	d
func_iuu_r	$VIRGIL_WIZARD/src/modules/HostModuleBuilder.v3	/^	def func_iuu_r(name: string, hfp: C -> (int, u32, u32) -> HostResult) -> this		{ module.adapters[name] = fun c => HostAdapters.iuu_r(hfp(c)); }$/;"	m
func_l_l	$VIRGIL_WIZARD/src/modules/HostModuleBuilder.v3	/^	def func_l_l(name: string, hfp: C -> (long) -> long) -> this				{ module.adapters[name] = fun c => HostAdapters.l_l(hfp(c)); }$/;"	m
func_name	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^	case TableGet(table_idx: int, table_name: string, entry_idx: int, func_idx: int, func_name: string);$/;"	d
func_names	$VIRGIL_WIZARD/src/engine/NameSection.v3	/^	private var func_names: Array<string>;$/;"	d
func_start_pos	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	var func_start_pos: int;$/;"	d
func_u_vr	$VIRGIL_WIZARD/src/modules/HostModuleBuilder.v3	/^	def func_u_vr(name: string, hfp: C -> (u32) -> HostResult) -> this			{ module.adapters[name] = fun c => HostAdapters.u_vr(hfp(c)); }$/;"	m
func_uu_r	$VIRGIL_WIZARD/src/modules/HostModuleBuilder.v3	/^	def func_uu_r(name: string, hfp: C -> (u32, u32) -> HostResult) -> this			{ module.adapters[name] = fun c => HostAdapters.uu_r(hfp(c)); }$/;"	m
func_uuu_r	$VIRGIL_WIZARD/src/modules/HostModuleBuilder.v3	/^	def func_uuu_r(name: string, hfp: C -> (u32, u32, u32) -> HostResult) -> this		{ module.adapters[name] = fun c => HostAdapters.uuu_r(hfp(c)); }$/;"	m
func_uuuu_r	$VIRGIL_WIZARD/src/modules/HostModuleBuilder.v3	/^	def func_uuuu_r(name: string, hfp: C -> (u32, u32, u32, u32) -> HostResult) -> this	{ module.adapters[name] = fun c => HostAdapters.uuuu_r(hfp(c)); }$/;"	m
func_uuuu_rv	$VIRGIL_WIZARD/src/modules/HostModuleBuilder.v3	/^	def func_uuuu_rv(name: string, hfp: C -> (u32, u32, u32, u32) -> HostResult) -> this	{ module.adapters[name] = fun c => HostAdapters.uuuu_rv(hfp(c)); }$/;"	m
func_v_i	$VIRGIL_WIZARD/src/modules/HostModuleBuilder.v3	/^	def func_v_i(name: string, hfp: C -> void -> int) -> this				{ module.adapters[name] = fun c => HostAdapters.v_i(hfp(c)); }$/;"	m
func_v_l	$VIRGIL_WIZARD/src/modules/HostModuleBuilder.v3	/^	def func_v_l(name: string, hfp: C -> void -> long) -> this				{ module.adapters[name] = fun c => HostAdapters.v_l(hfp(c)); }$/;"	m
func_v_v	$VIRGIL_WIZARD/src/modules/HostModuleBuilder.v3	/^	def func_v_v(name: string, hfp: C -> void -> void) -> this				{ module.adapters[name] = fun c => HostAdapters.v_v(hfp(c)); }$/;"	m
funcs	$VIRGIL_WIZARD/src/engine/Table.v3	/^	var funcs: Array<Function>;	\/\/ if the elemtype is a function, a cache of direct Function refs$/;"	d
funcs	$VIRGIL_WIZARD/src/monitors/ControlMonitor.v3	/^	def funcs = Vector<(Module, ControlInstrumentation)>.new();$/;"	d
funcs	$VIRGIL_WIZARD/src/util/OptionsRegistry.v3	/^	var funcs: List<(string, ErrorGen) -> bool>;$/;"	d
function_body_count	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	var function_body_count: u32;$/;"	d
function_body_size	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	var function_body_size: u32;$/;"	d
function_body_start	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	var function_body_start: u64;$/;"	d
function_decoder	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	def function_decoder = DataReader.new(null);$/;"	d
functions	$VIRGIL_WIZARD/src/engine/Instance.v3	/^	def functions = Array<Function>.new(module.functions.length);$/;"	d
functions	$VIRGIL_WIZARD/src/engine/Module.v3	/^	def functions = Vector<FuncDecl>.new();$/;"	d
fw_edges	$VIRGIL_WIZARD/src/util/CfgPrinter.v3	/^type CfgPrintEntry(pc: int, fw_edges: Array<CfgEdgeChar>, instr: string, bw_edges: Array<CfgEdgeChar>) #unboxed {$/;"	d
g_i	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def g_i = S(arr_g, arr_i);$/;"	d
g_v	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def g_v = S(arr_g, arr_v);$/;"	d
gc	$VIRGIL_WIZARD/src/engine/Trace.v3	/^	var gc = false;$/;"	d
gen	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def gen(module: Module, func: FuncDecl, err: ErrorGen) -> bool {$/;"	m
gen	$VIRGIL_WIZARD/src/engine/x86-64/X86_64PreGenStubs.v3	/^	gen: (X86_64InterpreterCode, DataWriter) -> void) {$/;"	d
gen0	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	private def gen0(module: Module, func: FuncDecl) -> bool {$/;"	m
genAndWriteIntoExecutable	$VIRGIL_WIZARD/src/engine/x86-64/X86_64PreGenStubs.v3	/^	def genAndWriteIntoExecutable(executable: string) -> bool {$/;"	f
genLazyCompileStub	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^def genLazyCompileStub(ic: X86_64InterpreterCode, w: DataWriter) {$/;"	m
genOsr	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def genOsr(module: Module, func: FuncDecl, pc: int, err: ErrorGen) -> MasmLabel {$/;"	m
genRdtsc	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Target.v3	/^def genRdtsc(ic: X86_64InterpreterCode, w: DataWriter) {$/;"	m
genSpcEntryFunc	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^def genSpcEntryFunc(ic: X86_64InterpreterCode, w: DataWriter) {$/;"	m
genStackEnterFuncStub	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^def genStackEnterFuncStub(ic: X86_64InterpreterCode, w: DataWriter) {$/;"	m
genStackReturnParentStub	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^def genStackReturnParentStub(ic: X86_64InterpreterCode, w: DataWriter) {$/;"	m
genStackUnwind	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^def genStackUnwind(ic: X86_64InterpreterCode, w: DataWriter, thrown: Throwable) {$/;"	m
genTierUpCompileStub	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^def genTierUpCompileStub(ic: X86_64InterpreterCode, w: DataWriter) {$/;"	m
genTrampolineCode	$VIRGIL_WIZARD/src/engine/x86-64/X86_64WhammProbeTrampoline.v3	/^	def genTrampolineCode(whamm_sig: Array<WhammArg>, ic: X86_64InterpreterCode) -> Pointer {$/;"	f
genTrapsStub	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^def genTrapsStub(ic: X86_64InterpreterCode, w: DataWriter) {$/;"	m
genV3StackResumeStub	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^def genV3StackResumeStub(ic: X86_64InterpreterCode, w: DataWriter) {$/;"	m
get	$VIRGIL_WIZARD/src/engine/Instance.v3	/^	def get() -> Value {$/;"	m
get	$VIRGIL_WIZARD/src/engine/Module.v3	/^	def get(orig: Range<byte>, i: int) -> Range<byte> {$/;"	m
get	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def get(slot: u32) -> SpcVal {$/;"	m
get	$VIRGIL_WIZARD/src/engine/x86-64/X86_64PreGenStubs.v3	/^	def get() -> P -> R {$/;"	m
get	$VIRGIL_WIZARD/src/modules/ModuleRegistry.v3	/^	def get(name: string) -> HostModule {$/;"	f
get	$VIRGIL_WIZARD/src/modules/wasi/WasiFdMap.v3	/^	def get(fd: int) -> WasiFd {$/;"	m
get	$VIRGIL_WIZARD/src/util/FileDescriptorMap.v3	/^	def get(fd: int) -> int {$/;"	m
get	$VIRGIL_WIZARD/src/util/OpcodeMap.v3	/^	def get(op: Opcode) -> T {$/;"	m
get1	$VIRGIL_WIZARD/src/util/OpcodeMap.v3	/^	def get1(code: byte) -> (Opcode, T) {$/;"	m
get2	$VIRGIL_WIZARD/src/util/OpcodeMap.v3	/^	def get2(prefix: byte, code: u32) -> (Opcode, T) {$/;"	m
getBrCounts	$VIRGIL_WIZARD/src/monitors/ControlInstrumenter.v3	/^	def getBrCounts(pc: int) -> Array<u64> {$/;"	m
getBrEntry	$VIRGIL_WIZARD/src/engine/Sidetable.v3	/^	def getBrEntry(stp: int) -> SidetableBrEntry {$/;"	m
getCatchEntry	$VIRGIL_WIZARD/src/engine/Sidetable.v3	/^	def getCatchEntry(stp: int) -> SidetableCatchEntry {$/;"	m
getCommand	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	def getCommand() -> string {$/;"	m
getControl	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	def getControl(depth: u32) -> ControlEntry {$/;"	m
getControl	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def getControl(depth: u32) -> SpcControl {$/;"	m
getCount	$VIRGIL_WIZARD/src/monitors/ControlInstrumenter.v3	/^	def getCount(pc: int) -> CountProbe {$/;"	m
getDecl	$VIRGIL_WIZARD/src/engine/Instantiator.v3	/^	def getDecl(d: Decl) -> Exportable {$/;"	m
getDefaults	$VIRGIL_WIZARD/src/engine/Extension.v3	/^	def getDefaults() -> Extension.set {$/;"	f
getEntry	$VIRGIL_WIZARD/src/engine/x86-64/X86_64PreGenStubs.v3	/^	def getEntry() -> Pointer {$/;"	m
getEntry	$VIRGIL_WIZARD/src/engine/x86-64/X86_64WhammProbeTrampoline.v3	/^def getEntry(sig: Array<WhammArg>) -> Pointer {$/;"	m
getEntry	$VIRGIL_WIZARD/src/util/ControlStack.v3	/^	def getEntry(depth: int) -> ControlStackEntry<B> {$/;"	m
getEntryCount	$VIRGIL_WIZARD/src/monitors/ControlInstrumenter.v3	/^	def getEntryCount() -> CountProbe {$/;"	m
getFirstSuperType	$VIRGIL_WIZARD/src/engine/Type.v3	/^	def getFirstSuperType() -> HeapTypeDecl {$/;"	m
getFrameAccessor	$VIRGIL_WIZARD/src/engine/v3/V3Target.v3	/^	def getFrameAccessor() -> FrameAccessor {$/;"	m
getFrameAccessor	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	def getFrameAccessor(sp: Pointer) -> X86_64FrameAccessor {$/;"	f
getFrameAccessor	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Target.v3	/^	def getFrameAccessor() -> X86_64FrameAccessor {$/;"	m
getFrameVar	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^	def getFrameVar(i: int) -> Value;$/;"	m
getFrameVar	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def getFrameVar(i: int) -> Value {$/;"	m
getFrameVar	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	def getFrameVar(i: int) -> Value {$/;"	m
getFreshStack	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	def getFreshStack() -> X86_64Stack {$/;"	f
getFuncName	$VIRGIL_WIZARD/src/engine/NameSection.v3	/^	def getFuncName(func: int) -> string {$/;"	m
getFuncName	$VIRGIL_WIZARD/src/monitors/ProfileMonitor.v3	/^def getFuncName(f: WasmFunction) -> string {$/;"	m
getFuncName	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^	private def getFuncName(func_index: int) -> string {$/;"	m
getFunctionAsVal	$VIRGIL_WIZARD/src/engine/Instance.v3	/^	def getFunctionAsVal(func_index: int) -> Value.Ref {$/;"	m
getGlobal	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def getGlobal(tv: TypeVar, index: u32) -> Value;$/;"	m
getInMemoryMergeWithArgs	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def getInMemoryMergeWithArgs(val_stack_top: int, args: Array<ValueType>) -> Array<SpcVal> {$/;"	m
getIntV3Entry	$VIRGIL_WIZARD/src/engine/x86-64/X86_64PreGenStubs.v3	/^	def getIntV3Entry() -> (WasmFunction, Pointer) -> Throwable {$/;"	f
getInterpreterCode	$VIRGIL_WIZARD/src/engine/x86-64/X86_64PreGenStubs.v3	/^	def getInterpreterCode() -> X86_64InterpreterCode {$/;"	f
getIpForReason	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def getIpForReason(reason: TrapReason) -> Pointer {$/;"	m
getLabel	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	def getLabel() -> u31 {$/;"	m
getLabel	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def getLabel(m: MasmLabel) -> X86_64Label {$/;"	m
getLocal	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def getLocal(tv: TypeVar, index: u32) -> Value;$/;"	m
getLocal	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^	def getLocal(i: int) -> Value;$/;"	m
getLocal	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def getLocal(i: int) -> Value {$/;"	m
getLocal	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	def getLocal(i: int) -> Value {$/;"	m
getLocalName	$VIRGIL_WIZARD/src/engine/NameSection.v3	/^	def getLocalName(func: int, local: int) -> string {$/;"	m
getLocalProbe	$VIRGIL_WIZARD/src/engine/Instrumentation.v3	/^	def getLocalProbe(module: Module, func_id: int, offset: int) -> Probe {$/;"	f
getLocalType	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	def getLocalType(index: u32) -> ValueType {$/;"	m
getMain	$VIRGIL_WIZARD/src/modules/HostModuleBuilder.v3	/^	def getMain(instance: Instance) -> (Function, Array<Value>) {$/;"	m
getMain	$VIRGIL_WIZARD/src/modules/ModuleRegistry.v3	/^	def getMain(instance: Instance) -> (Function, Array<Value>) { return (null, null); }$/;"	m
getMain_f	$VIRGIL_WIZARD/src/modules/HostModuleBuilder.v3	/^	var getMain_f: (C, Instance) -> (Function, Array<Value>);$/;"	d
getMemBase64	$VIRGIL_WIZARD/src/engine/Memory.v3	/^	def getMemBase64() -> u64;$/;"	m
getMemBase64	$VIRGIL_WIZARD/src/engine/native/NativeMemory.v3	/^	def getMemBase64() -> u64 {$/;"	m
getMetaRef	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^	def getMetaRef() -> FrameAccessorRef {$/;"	m
getModeOrDefault	$VIRGIL_WIZARD/src/engine/Execute.v3	/^	def getModeOrDefault(name: string) -> ExecutionStrategy {$/;"	f
getModuleName	$VIRGIL_WIZARD/src/engine/NameSection.v3	/^	def getModuleName() -> string {$/;"	m
getMonitors	$VIRGIL_WIZARD/src/monitors/MonitorOptions.v3	/^	def getMonitors() -> Vector<Monitor> {$/;"	f
getName	$VIRGIL_WIZARD/src/engine/compiler/RegSet.v3	/^	def getName(r: Reg) -> string {$/;"	m
getNextProbe	$VIRGIL_WIZARD/src/monitors/ModuleInstrumenter.v3	/^	private def getNextProbe(dynamicLoc: DynamicLoc) -> AfterInstrDestProbe {$/;"	m
getOffsets	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def getOffsets() -> V3Offsets {$/;"	m
getOffsets	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def getOffsets() -> V3Offsets {$/;"	m
getOperand	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^	def getOperand(i: int) -> Value;$/;"	m
getOperand	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def getOperand(i: int) -> Value {$/;"	m
getOperand	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	def getOperand(i: int) -> Value {$/;"	m
getOrCreateChild	$VIRGIL_WIZARD/src/monitors/ProfileMonitor.v3	/^	def getOrCreateChild(func: WasmFunction) -> ProfileTreeNode {$/;"	m
getPage	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def getPage(code: u32) -> (OpcodePage, byte) {$/;"	m
getRdtsc	$VIRGIL_WIZARD/src/engine/v3/V3Target.v3	/^	def getRdtsc() -> (void -> u64) { return rdtsc; }$/;"	f
getRdtsc	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Target.v3	/^	def getRdtsc() -> (void -> u64) {$/;"	f
getReadWriteAlias64	$VIRGIL_WIZARD/src/engine/Memory.v3	/^	def getReadWriteAlias64(start: u64, end: u64) -> Range<byte>;$/;"	m
getReadWriteAlias64	$VIRGIL_WIZARD/src/engine/native/NativeMemory.v3	/^	def getReadWriteAlias64(start: u64, end: u64) -> Range<byte> {$/;"	m
getReadWriteAlias64	$VIRGIL_WIZARD/src/engine/v3/V3Memory.v3	/^	def getReadWriteAlias64(start: u64, end: u64) -> Range<byte> {$/;"	m
getRegion	$VIRGIL_WIZARD/src/modules/HostModuleBuilder.v3	/^	def getRegion(offset: int, size: int) -> MaybeTrap<Range<byte>> {$/;"	m
getRegion	$VIRGIL_WIZARD/src/modules/ModuleRegistry.v3	/^	def getRegion(memory: Memory, v: Value, size: u32) -> i64 {$/;"	m
getRegion2	$VIRGIL_WIZARD/src/modules/ModuleRegistry.v3	/^	def getRegion2(memory: Memory, v: u32, size: u32) -> i64 {$/;"	m
getRegion3	$VIRGIL_WIZARD/src/modules/ModuleRegistry.v3	/^	def getRegion3(memory: Memory, offset: Value, size: Value) -> MaybeTrap<Range<byte>> {$/;"	m
getRegionPtr	$VIRGIL_WIZARD/src/modules/HostModuleBuilder.v3	/^	def getRegionPtr(idx: int, size: int) -> i64 {$/;"	m
getResumeEntry	$VIRGIL_WIZARD/src/engine/Sidetable.v3	/^	def getResumeEntry(stp: int) -> SidetableResumeEntry {$/;"	m
getRethrowEntry	$VIRGIL_WIZARD/src/engine/Sidetable.v3	/^	def getRethrowEntry(stp: int) -> SidetableRethrowEntry {$/;"	m
getScratchReg	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def getScratchReg(kind: ValueKind) -> Reg {$/;"	m
getScratchReg	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def getScratchReg(kind: ValueKind) -> Reg {$/;"	m
getSigDecl	$VIRGIL_WIZARD/src/engine/Instantiator.v3	/^	def getSigDecl(sig_index: int) -> SigDecl {$/;"	m
getSpcIntEntry	$VIRGIL_WIZARD/src/engine/x86-64/X86_64PreGenStubs.v3	/^	def getSpcIntEntry() -> Pointer {$/;"	f
getTagSig	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	def getTagSig(tag: TagDecl) -> SigDecl {$/;"	m
getTestTiers	$VIRGIL_WIZARD/src/engine/v3/V3Target.v3	/^	def getTestTiers() -> List<(string, ExecutionStrategy)> {$/;"	f
getTestTiers	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Target.v3	/^	def getTestTiers() -> List<(string, ExecutionStrategy)> {$/;"	f
getTopEntry	$VIRGIL_WIZARD/src/util/ControlStack.v3	/^	def getTopEntry() -> ControlStackEntry<B> {$/;"	m
getTopOfStack	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^	def getTopOfStack() -> Value { return getOperand(0); }$/;"	m
getTrapLabel	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def getTrapLabel(reason: TrapReason) -> MasmLabel {$/;"	m
getU64Operand	$VIRGIL_WIZARD/src/monitors/MemStatsMonitor.v3	/^def getU64Operand(accessor: FrameAccessor, index: int) -> u64 {$/;"	m
getUnexposed	$VIRGIL_WIZARD/src/modules/ModuleRegistry.v3	/^	def getUnexposed(name: string) -> HostModule {$/;"	f
getV3ParamReg	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def getV3ParamReg(kind: ValueKind, index: int) -> Reg;$/;"	m
getV3ParamReg	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def getV3ParamReg(kind: ValueKind, index: int) -> Reg {$/;"	m
getV3ReturnReg	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def getV3ReturnReg(kind: ValueKind, index: int) -> Reg;$/;"	m
getV3ReturnReg	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def getV3ReturnReg(kind: ValueKind, index: int) -> Reg {$/;"	m
getWhammInstance	$VIRGIL_WIZARD/src/monitors/WhammMonitor.v3	/^	private def getWhammInstance(module: Module) -> WhammInstance {$/;"	m
getWriter	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^	def getWriter() -> FrameWriter;$/;"	m
getWriter	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def getWriter() -> V3FrameWriter {$/;"	m
getWriter	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	def getWriter() -> X86_64FrameWriter {$/;"	m
get_cost	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^	private def get_cost() -> u64 {$/;"	m
get_handler_dest	$VIRGIL_WIZARD/src/engine/Module.v3	/^	def get_handler_dest(index: int) -> TargetHandlerDest {$/;"	m
get_ljustify	$VIRGIL_WIZARD/src/engine/Trace.v3	/^	def get_ljustify(width: int) -> int {$/;"	m
get_userfd	$VIRGIL_WIZARD/src/util/FileDescriptorMap.v3	/^	def get_userfd(sys: int) -> int {$/;"	m
global	$VIRGIL_WIZARD/src/engine/x86-64/V3Offsets.v3	/^	private def global = Global.new(ValueType.I32, GlobalDecl.new(ValueType.I32, true, InitExpr.I32(0)));$/;"	d
global	$VIRGIL_WIZARD/src/modules/HostModuleBuilder.v3	/^	def global(name: string, obj: Global) -> this {$/;"	m
globalCache	$VIRGIL_WIZARD/src/engine/Canon.v3	/^	def globalCache = HeapTypeCache.new();$/;"	d
globalFrameDescriptionBuf	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Runtime.v3	/^	def globalFrameDescriptionBuf = StringBuilder.new().grow(256);  \/\/ avoid allocations when describing frames$/;"	d
globalOpTable	$VIRGIL_WIZARD/src/util/OpcodeMap.v3	/^private class OpcodeMapTable<T>(prefix: byte, globalOpTable: Array<Opcode>) {$/;"	d
globalOpTable_00	$VIRGIL_WIZARD/src/util/OpcodeMap.v3	/^def globalOpTable_00 = Array<Opcode>.new(256);$/;"	d
globalOpTable_FB	$VIRGIL_WIZARD/src/util/OpcodeMap.v3	/^def globalOpTable_FB = Array<Opcode>.new(256);$/;"	d
globalOpTable_FC	$VIRGIL_WIZARD/src/util/OpcodeMap.v3	/^def globalOpTable_FC = Array<Opcode>.new(256);$/;"	d
globalOpTable_FD	$VIRGIL_WIZARD/src/util/OpcodeMap.v3	/^def globalOpTable_FD = Array<Opcode>.new(300); \/\/ XXX: FD is the only overflow table$/;"	d
globalOpTable_FE	$VIRGIL_WIZARD/src/util/OpcodeMap.v3	/^def globalOpTable_FE = Array<Opcode>.new(256);$/;"	d
globalProbes	$VIRGIL_WIZARD/src/engine/Tuning.v3	/^	def globalProbes = false;	\/\/ required for tracing\/probing$/;"	d
globalReadFn	$VIRGIL_WIZARD/src/monitors/GlobalsMonitor.v3	/^	private def globalReadFn(dynamicLoc: DynamicLoc, global_index: u31) -> ProbeAction {$/;"	m
globalWriteFn	$VIRGIL_WIZARD/src/monitors/GlobalsMonitor.v3	/^	private def globalWriteFn(dynamicLoc: DynamicLoc, global_index: u31) -> ProbeAction {$/;"	m
global_ctx	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^	private def global_ctx = ReplayContext.new(Vector<WasmEvent>.new(), Array<Value>.new(0));$/;"	d
global_get	$VIRGIL_WIZARD/src/util/WasmAsm.v3	/^	def global_get(index: int) -> this {$/;"	m
global_index	$VIRGIL_WIZARD/src/engine/Module.v3	/^	var global_index = -1;$/;"	d
global_index	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^private class GlobalSetProbe(handler: EventHandler, global_index: u31) extends Probe {$/;"	d
global_set	$VIRGIL_WIZARD/src/util/WasmAsm.v3	/^	def global_set(index: int) -> this {$/;"	m
global_stub_list	$VIRGIL_WIZARD/src/engine/x86-64/X86_64PreGenStubs.v3	/^var global_stub_list: List<X86_64PreGenStub>;$/;"	d
globals	$VIRGIL_WIZARD/src/engine/Instance.v3	/^	def globals = Array<Global>.new(module.globals.length);$/;"	d
globals	$VIRGIL_WIZARD/src/engine/Module.v3	/^	def globals = Vector<GlobalDecl>.new();$/;"	d
goto	$VIRGIL_WIZARD/src/util/CfgBuilder.v3	/^	def goto(pc: int, t: CfgBlock) {$/;"	m
goto_stack	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	var goto_stack: V3Interpreter; \/\/ set when state_ == {CALL_CHILD|SUSPENDED|THROWING}$/;"	d
group	$VIRGIL_WIZARD/src/SpectestMode.v3	/^	def group = OptionsRegistry.newGroup("SPECTEST", null);$/;"	d
group	$VIRGIL_WIZARD/src/engine/EngineOptions.v3	/^	var group = OptionsRegistry.newGroup("ENGINE", printHelp);$/;"	d
group	$VIRGIL_WIZARD/src/engine/TraceOptions.v3	/^	def group = OptionsRegistry.newGroup("TRACING", printHelp);$/;"	d
group	$VIRGIL_WIZARD/src/modules/wasi/WasiOptions.v3	/^	def group = OptionsRegistry.newGroup("WASI", printHelp);$/;"	d
group	$VIRGIL_WIZARD/src/monitors/HotnessMonitor.v3	/^private class LocCounter(func: FuncDecl, pc: int, op: Opcode, var group: int) extends CountProbe {$/;"	d
group	$VIRGIL_WIZARD/src/monitors/MonitorOptions.v3	/^	var group = OptionsRegistry.newGroup("MONITOR", printHelp);$/;"	d
group	$VIRGIL_WIZARD/src/wizeng.main.v3	/^	def group = OptionsRegistry.newGroup("WIZENG", null);$/;"	d
groups	$VIRGIL_WIZARD/src/util/OptionsRegistry.v3	/^	var groups: List<(OptionGroup, TraceBuilder -> void)>;$/;"	d
grow	$VIRGIL_WIZARD/src/engine/Memory.v3	/^	def grow(pages: u64) -> long {$/;"	m
grow	$VIRGIL_WIZARD/src/engine/Table.v3	/^	def grow(more: u64, val: Value) -> int {$/;"	m
grow	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def grow(nlength: int) {$/;"	m
grow	$VIRGIL_WIZARD/src/engine/native/NativeMemory.v3	/^	def grow(add_pages: u64) -> long {$/;"	m
grow	$VIRGIL_WIZARD/src/engine/v3/V3Memory.v3	/^	def grow(add_pages: u64) -> long {$/;"	m
growFn	$VIRGIL_WIZARD/src/monitors/ModuleInstrumenter.v3	/^		growFn: (DynamicLoc, Memory, u32) -> ProbeAction$/;"	d
growShadowMem	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^	private def growShadowMem(mem_index: int, growth: u32) {$/;"	m
growShadowMemWithTrace	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^	private def growShadowMemWithTrace(mem_index: int, growth: u32) {$/;"	m
guestFuncReturn	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^	def guestFuncReturn() {$/;"	m
guestFuncStart	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^	def guestFuncStart() {$/;"	m
ha	$VIRGIL_WIZARD/src/engine/x86-64/V3Offsets.v3	/^	private def ha = HeapArray.new(null, []);$/;"	d
handle	$VIRGIL_WIZARD/src/engine/Instrumentation.v3	/^	private def handle(a: ProbeAction) -> Throwable {$/;"	f
handleCommand	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	def handleCommand(command: DbgCommand) -> bool {$/;"	f
handleOverflow	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	def handleOverflow(ip: Pointer, sp: Pointer) -> Pointer {$/;"	m
handleSignal	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^	def handleSignal(signum: int, siginfo: Pointer, ucontext: Pointer, ip: Pointer, sp: Pointer) -> bool {$/;"	m
handleSignal	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def handleSignal(signum: int, siginfo: Pointer, ucontext: Pointer, ip: Pointer, sp: Pointer) -> bool {$/;"	m
handle_large_offset	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	private def handle_large_offset(index: Reg, offset: u32) -> (X86_64Gpr, int) {$/;"	m
handler	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^private class TableSetProbe(handler: EventHandler, table_index: u31) extends Probe {$/;"	d
handlerAlignment	$VIRGIL_WIZARD/src/engine/Tuning.v3	/^	def handlerAlignment = 8;	\/\/ align handler code in memory$/;"	d
handler_dest_id	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	var handler_dest_id: int = -1;$/;"	d
handler_dest_info	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	var handler_dest_info = Vector<SpcHandlerInfo>.new();$/;"	d
handler_dest_map	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	var handler_dest_map = Vector<int>.new();$/;"	d
handler_dest_map	$VIRGIL_WIZARD/src/engine/Module.v3	/^	var handler_dest_map: Array<int> = NO_DEST_MAP;$/;"	d
handler_dests	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	var handler_dests = Vector<TargetHandlerDest>.new();$/;"	d
handler_dests	$VIRGIL_WIZARD/src/engine/Module.v3	/^	var handler_dests: Array<TargetHandlerDest> = NO_DESTS;$/;"	d
handler_pc	$VIRGIL_WIZARD/src/engine/Module.v3	/^type ExHandler(index: int, handler_pc: int, push_exnref: bool, ex_slot: int, val_stack_top: int, sidetable_pos: int) #unboxed { }$/;"	d
handler_pc	$VIRGIL_WIZARD/src/engine/Sidetable.v3	/^type SidetableCatchEntry(handler_pc: int, val_stack_top: int, sidetable_pos: int) #unboxed;$/;"	d
handlers	$VIRGIL_WIZARD/src/engine/Module.v3	/^	var handlers = FuncHandlerInfo.new();$/;"	d
has	$VIRGIL_WIZARD/src/util/StringSet.v3	/^	def has(str: string) -> bool {$/;"	m
hasColor	$VIRGIL_WIZARD/src/engine/Trace.v3	/^	def hasColor(color: Color) -> bool {$/;"	m
hasDefaultValue	$VIRGIL_WIZARD/src/engine/Type.v3	/^	def hasDefaultValue(t: ValueType) -> bool {$/;"	f
hasMonitors	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Target.v3	/^	var hasMonitors = false;$/;"	d
hasOpenHeapType	$VIRGIL_WIZARD/src/engine/Canon.v3	/^	private def hasOpenHeapType(a: Array<HeapType>) -> bool {$/;"	m
hasOpenStorageType	$VIRGIL_WIZARD/src/engine/Canon.v3	/^	private def hasOpenStorageType(a: Array<StorageType>) -> bool {$/;"	m
hasOpenValueType	$VIRGIL_WIZARD/src/engine/Canon.v3	/^	private def hasOpenValueType(a: Array<ValueType>) -> bool {$/;"	m
has_default_elem	$VIRGIL_WIZARD/src/engine/Module.v3	/^	var has_default_elem: bool;$/;"	d
hash	$VIRGIL_WIZARD/src/engine/Canon.v3	/^	def var hash: int;$/;"	d
hash	$VIRGIL_WIZARD/src/engine/Type.v3	/^	var hash = 0;$/;"	d
hashArrayDecl	$VIRGIL_WIZARD/src/engine/Canon.v3	/^def hashArrayDecl(decl: ArrayDecl) -> int {$/;"	m
hashHeapTypeDecl	$VIRGIL_WIZARD/src/engine/Canon.v3	/^def hashHeapTypeDecl(decl: HeapTypeDecl) -> int {$/;"	m
hashSigDecl	$VIRGIL_WIZARD/src/engine/Canon.v3	/^def hashSigDecl(sig: SigDecl) -> int {$/;"	m
hashStructDecl	$VIRGIL_WIZARD/src/engine/Canon.v3	/^def hashStructDecl(decl: StructDecl) -> int {$/;"	m
hashValueType	$VIRGIL_WIZARD/src/engine/Canon.v3	/^def hashValueType(t: ValueType) -> int {$/;"	m
hashes	$VIRGIL_WIZARD/src/util/StringSet.v3	/^	private def hashes = Array<int>.new(mask_shift.0 + 1);$/;"	d
haveProbes	$VIRGIL_WIZARD/src/monitors/WhammMonitor.v3	/^	var haveProbes = false;$/;"	d
header	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^	def header: Ref<X86_64PreGenHeader>;$/;"	d
heap	$VIRGIL_WIZARD/src/engine/Type.v3	/^	case Ref(nullable: bool, heap: HeapType);$/;"	d
heaptype_index	$VIRGIL_WIZARD/src/engine/Type.v3	/^	var heaptype_index = -1;$/;"	d
heaptypes	$VIRGIL_WIZARD/src/engine/Instance.v3	/^	def heaptypes = module.heaptypes.copy();$/;"	d
heaptypes	$VIRGIL_WIZARD/src/engine/Module.v3	/^	def heaptypes = Vector<HeapTypeDecl>.new();$/;"	d
help	$VIRGIL_WIZARD/src/engine/Extension.v3	/^enum Extension(short_name: string, help: string) {$/;"	d
help	$VIRGIL_WIZARD/src/engine/Metrics.v3	/^class Metric(name: string, units: string, help: string) {$/;"	d
help	$VIRGIL_WIZARD/src/engine/TraceOptions.v3	/^enum TraceOption(ch: byte, help: string) {$/;"	d
help	$VIRGIL_WIZARD/src/monitors/MonitorRegistry.v3	/^class MonitorRegistryEntry(name: string, help: string, monitor: Monitor) {$/;"	d
help	$VIRGIL_WIZARD/src/util/OptionsRegistry.v3	/^class OptionGroupEntry(opt: Opt, var displayName: string, typeName: string, help: string) { }$/;"	d
helped	$VIRGIL_WIZARD/src/wizeng.main.v3	/^	var helped = false;$/;"	d
high	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^type v128(low: u64, high: u64);$/;"	d
high	$VIRGIL_WIZARD/src/engine/Instance.v3	/^	def var high: u64;		\/\/ TODO: non-private to compute its offset$/;"	d
high	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case V128(low: u64, high: u64);$/;"	d
high	$VIRGIL_WIZARD/src/engine/Value.v3	/^	case V128(low: u64, high: u64);$/;"	d
host	$VIRGIL_WIZARD/src/engine/Type.v3	/^	case Host(host: HostType);				\/\/ host-defined types$/;"	d
hostCallStub	$VIRGIL_WIZARD/src/engine/x86-64/X86_64PreGenStubs.v3	/^	private def hostCallStub = X86_64SimpleStub.new("host-call", 0);$/;"	d
hostCallStubEnd	$VIRGIL_WIZARD/src/engine/x86-64/X86_64PreGenStubs.v3	/^	+64	hostCallStubEnd:		i32;	\/\/ host call stub that calls runtime$/;"	d
hostCallStubOffset	$VIRGIL_WIZARD/src/engine/x86-64/X86_64PreGenStubs.v3	/^	+60	hostCallStubOffset:		i32;	\/\/ host call stub that calls runtime$/;"	d
host_filter	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^	def var host_filter: DeclFilter;$/;"	d
host_frame	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	var host_frame: HostFrame;$/;"	d
host_outcall	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	var host_outcall: HostFunction;$/;"	d
host_random_get	$VIRGIL_WIZARD/src/modules/wasi/x86-64-linux/WspOneModule-x86-64-linux.v3	/^	def host_random_get(region: Range<byte>) -> HostResult {$/;"	m
hotness	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^	def hotness: BytecodeHotness = BytecodeHotness.new(output_prefix);$/;"	d
hotness	$VIRGIL_WIZARD/src/monitors/HotnessMonitor.v3	/^	var hotness: HotnessData;$/;"	d
ht	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case RefNull(ht: HeapType);$/;"	d
ht1	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^type BrOnCastImm(flags: u8, depth: u31, ht1: int, ht2: int) #unboxed {$/;"	d
ht2	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^type BrOnCastImm(flags: u8, depth: u31, ht1: int, ht2: int) #unboxed {$/;"	d
ht_val	$VIRGIL_WIZARD/src/monitors/ControlInstrumenter.v3	/^private class CiBrOnCastProbe(nullable: bool, ht_val: int, success_taken: bool) extends Probe {$/;"	d
ht_val	$VIRGIL_WIZARD/src/monitors/LoopTraceMonitor.v3	/^private class TraceBrOnCastProbe(trace: TraceBuffer, nullable: bool, ht_val: int, success_taken: bool) extends Probe {$/;"	d
i32	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^enum MasmBrCond		(zero: bool, 	i32: bool) {$/;"	d
i32const	$VIRGIL_WIZARD/src/util/WasmAsm.v3	/^	def i32const(v: int) -> this {$/;"	m
i_d	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def i_d = S(arr_i, arr_d);$/;"	d
i_f	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def i_f = S(arr_i, arr_f);$/;"	d
i_g	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def i_g = S(arr_i, arr_g);$/;"	d
i_getFunction	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def i_getFunction(func_index: u32) -> Function;$/;"	m
i_getTableFunction32	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def i_getTableFunction32(table_index: u32, sig: Signature, func_index: u32) -> Function;$/;"	m
i_getTableFunction64	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def i_getTableFunction64(table_index: u32, sig: Signature, func_index: u64) -> Function;$/;"	m
i_i	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def i_i = S(arr_i, arr_i);$/;"	d
i_i	$VIRGIL_WIZARD/src/modules/wasi/WspOneModule.v3	/^def i_i = 		WasiHostAdapter<int, int>.new(_, HostAdapters.i_i);$/;"	d
i_l	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def i_l = S(arr_i, arr_l);$/;"	d
i_r	$VIRGIL_WIZARD/src/modules/wasi/WspOneModule.v3	/^def i_r =		WasiHostAdapter<int, HostResult>.new(_, HostAdapters.i_r);$/;"	d
i_s	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def i_s = S(arr_i, arr_s);$/;"	d
i_v	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def i_v = S(arr_i, arr_v);$/;"	d
ibuf	$VIRGIL_WIZARD/src/util/CfgPrinter.v3	/^	private def ibuf = StringBuilder.new();$/;"	d
ic	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^class X86_64InterpreterGen(ic: X86_64InterpreterCode, w: DataWriter) {$/;"	d
ic	$VIRGIL_WIZARD/src/engine/x86-64/X86_64PreGenStubs.v3	/^	private def ic = X86_64InterpreterCode.new(Pointer.NULL, Pointer.NULL, pregen_header);$/;"	d
id	$VIRGIL_WIZARD/src/monitors/LoopTraceMonitor.v3	/^	case Anchor(id: u30);$/;"	d
id	$VIRGIL_WIZARD/src/util/CfgBuilder.v3	/^	def id = labelId++;$/;"	d
id_v	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def id_v = S(arr_id, arr_v);$/;"	d
ids	$VIRGIL_WIZARD/src/engine/Table.v3	/^	var ids: Array<int>;		\/\/ if the elemtype is a function, a cache of the canonical sig id$/;"	d
idx	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^	case MemGrow(idx: int, amount: int);$/;"	d
if0	$VIRGIL_WIZARD/src/util/WasmAsm.v3	/^	def if0() -> this {$/;"	m
if_	$VIRGIL_WIZARD/src/util/WasmAsm.v3	/^	def if_(t: ValueType) -> this {$/;"	m
if_v	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def if_v = S(arr_if, arr_v);$/;"	d
ii_i	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def ii_i = S(arr_ii, arr_i);$/;"	d
ii_i	$VIRGIL_WIZARD/src/modules/wasi/WspOneModule.v3	/^def ii_i = 		WasiHostAdapter<(int, int), int>.new(_, HostAdapters.ii_i);$/;"	d
ii_l	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def ii_l = S(arr_ii, arr_l);$/;"	d
ii_r	$VIRGIL_WIZARD/src/modules/wasi/WspOneModule.v3	/^def ii_r = 		WasiHostAdapter<(int, int), HostResult>.new(_, HostAdapters.ii_r);$/;"	d
ii_v	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def ii_v = S(arr_ii, arr_v);$/;"	d
iig_i	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def iig_i = S(arr_iig, arr_i);$/;"	d
iii_i	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def iii_i = S(arr_iii, arr_i);$/;"	d
iii_i	$VIRGIL_WIZARD/src/modules/wasi/WspOneModule.v3	/^def iii_i = 		WasiHostAdapter<(int, int, int), int>.new(_, HostAdapters.iii_i);$/;"	d
iii_l	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def iii_l = S(arr_iii, arr_l);$/;"	d
iii_r	$VIRGIL_WIZARD/src/modules/wasi/WspOneModule.v3	/^def iii_r = 		WasiHostAdapter<(int, int, int), HostResult>.new(_, HostAdapters.iii_r);$/;"	d
iii_v	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def iii_v = S(arr_iii, arr_v);$/;"	d
iiii_i	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def iiii_i = S(arr_iiii, arr_i);$/;"	d
iiii_i	$VIRGIL_WIZARD/src/modules/wasi/WspOneModule.v3	/^def iiii_i = 		WasiHostAdapter<(int, int, int, int), int>.new(_, HostAdapters.iiii_i);$/;"	d
iiii_l	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def iiii_l = S(arr_iiii, arr_l);$/;"	d
iiii_r	$VIRGIL_WIZARD/src/modules/wasi/WspOneModule.v3	/^def iiii_r = 		WasiHostAdapter<(int, int, int, int), HostResult>.new(_, HostAdapters.iiii_r);$/;"	d
iiii_v	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def iiii_v = S(arr_iiii, arr_v);$/;"	d
iiiii_i	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def iiiii_i = S(arr_iiiii, arr_i);$/;"	d
iiiii_i	$VIRGIL_WIZARD/src/modules/wasi/WspOneModule.v3	/^def iiiii_i = 		WasiHostAdapter<(int, int, int, int, int), int>.new(_, HostAdapters.iiiii_i);$/;"	d
iiiii_l	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def iiiii_l = S(arr_iiiii, arr_l);$/;"	d
iiiiii_i	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def iiiiii_i = S(arr_iiiiii, arr_i);$/;"	d
iiiiii_i	$VIRGIL_WIZARD/src/modules/wasi/WspOneModule.v3	/^def iiiiii_i = 		WasiHostAdapter<(int, int, int, int, int, int), int>.new(_, HostAdapters.iiiiii_i);$/;"	d
iiiiii_l	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def iiiiii_l = S(arr_iiiiii, arr_l);$/;"	d
iiiiii_r	$VIRGIL_WIZARD/src/modules/wasi/WspOneModule.v3	/^def iiiiii_r = 		WasiHostAdapter<(int, int, int, int, int, int), HostResult>.new(_, HostAdapters.iiiiii_r);$/;"	d
iiiiiii_i	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def iiiiiii_i = S(arr_iiiiiii, arr_i);$/;"	d
iiiiiii_i	$VIRGIL_WIZARD/src/modules/wasi/WspOneModule.v3	/^def iiiiiii_i = 	WasiHostAdapter<(int, int, int, int, int, int, int), int>.new(_, HostAdapters.iiiiiii_i);$/;"	d
iiiiiiii_l	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def iiiiiiii_l = S(arr_iiiiiiii, arr_l); $/;"	d
iiiiil_l	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def iiiiil_l = S(arr_iiiiil, arr_l);$/;"	d
iiiiillii_i	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def iiiiillii_i = S(arr_iiiiillii, arr_i);$/;"	d
iiiiillii_i	$VIRGIL_WIZARD/src/modules/wasi/WspOneModule.v3	/^def iiiiillii_i =	WasiHostAdapter<(int, int, int, int, int, long, long, int, int), int>.new(_, HostAdapters.iiiiillii_i);$/;"	d
iiiilli_i	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def iiiilli_i = S(arr_iiiilli, arr_i);$/;"	d
iiiilli_i	$VIRGIL_WIZARD/src/modules/wasi/WspOneModule.v3	/^def iiiilli_i = 	WasiHostAdapter<(int, int, int, int, long, long, int), int>.new(_, HostAdapters.iiiilli_i);$/;"	d
iiil_i	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def iiil_i = S(arr_iiil, arr_i);$/;"	d
iiil_l	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def iiil_l = S(arr_iiil, arr_l);$/;"	d
iiili_i	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def iiili_i = S(arr_iiili, arr_i);$/;"	d
iiili_i	$VIRGIL_WIZARD/src/modules/wasi/WspOneModule.v3	/^def iiili_i = 		WasiHostAdapter<(int, int, int, long, int), int>.new(_, HostAdapters.iiili_i);$/;"	d
iiili_r	$VIRGIL_WIZARD/src/modules/wasi/WspOneModule.v3	/^def iiili_r = 		WasiHostAdapter<(int, int, int, long, int), HostResult>.new(_, HostAdapters.iiili_r);$/;"	d
iil_i	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def iil_i = S(arr_iil, arr_i);$/;"	d
iil_l	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def iil_l = S(arr_iil, arr_l);$/;"	d
iill_l	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def iill_l = S(arr_illl, arr_l);$/;"	d
il_i	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def il_i = S(arr_il, arr_i);$/;"	d
il_i	$VIRGIL_WIZARD/src/modules/wasi/WspOneModule.v3	/^def il_i = 		WasiHostAdapter<(int, long), int>.new(_, HostAdapters.il_i);$/;"	d
il_l	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def il_l = S(arr_il, arr_l);$/;"	d
il_v	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def il_v = S(arr_il, arr_v);$/;"	d
ili_i	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def ili_i = S(arr_ili, arr_i);$/;"	d
ili_i	$VIRGIL_WIZARD/src/modules/wasi/WspOneModule.v3	/^def ili_i = 		WasiHostAdapter<(int, long, int), int>.new(_, HostAdapters.ili_i);$/;"	d
ili_l	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def ili_l = S(arr_ili, arr_l);$/;"	d
ili_r	$VIRGIL_WIZARD/src/modules/wasi/WspOneModule.v3	/^def ili_r = 		WasiHostAdapter<(int, long, int), HostResult>.new(_, HostAdapters.ili_r);$/;"	d
ilii_i	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def ilii_i = S(arr_ilii, arr_i);$/;"	d
ilii_i	$VIRGIL_WIZARD/src/modules/wasi/WspOneModule.v3	/^def ilii_i =		WasiHostAdapter<(int, long, int, int), int>.new(_, HostAdapters.ilii_i);$/;"	d
ilii_r	$VIRGIL_WIZARD/src/modules/wasi/WspOneModule.v3	/^def ilii_r =		WasiHostAdapter<(int, long, int, int), HostResult>.new(_, HostAdapters.ilii_r);$/;"	d
ill_i	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def ill_i = S(arr_ill, arr_i);$/;"	d
ill_i	$VIRGIL_WIZARD/src/modules/wasi/WspOneModule.v3	/^def ill_i = 		WasiHostAdapter<(int, long, long), int>.new(_, HostAdapters.ill_i);$/;"	d
ill_l	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def ill_l = S(arr_ill, arr_l);$/;"	d
illi_i	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def illi_i = S(arr_illi, arr_i);$/;"	d
illi_i	$VIRGIL_WIZARD/src/modules/wasi/WspOneModule.v3	/^def illi_i = 		WasiHostAdapter<(int, long, long, int), int>.new(_, HostAdapters.illi_i);$/;"	d
illi_l	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def illi_l = S(arr_illi, arr_l);$/;"	d
illl_l	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def illl_l = S(arr_illl, arr_l);$/;"	d
imm	$VIRGIL_WIZARD/src/engine/BytecodeIterator.v3	/^	private def imm = CodePtr.new(null);$/;"	d
imm	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^def imm: ImmSigs;$/;"	d
imm	$VIRGIL_WIZARD/src/monitors/ModuleInstrumenter.v3	/^private class MemoryAccessProbe(imm: MemArg, operand: int, size: u64, f: (DynamicLoc, Memory, u64, u64) -> ProbeAction) extends Probe {$/;"	d
imm	$VIRGIL_WIZARD/src/util/BasicTracing.v3	/^class MemoryTraceStoreProbe(op: Opcode, imm: MemArg, size: u8) extends Probe {$/;"	d
imm	$VIRGIL_WIZARD/src/util/ProbeUtil.v3	/^	var imm: MemArg;$/;"	d
immAccessors	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	def immAccessors() -> (WasmParser, CodePtr) {$/;"	m
imm_codeptr	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	private var imm_codeptr: CodePtr;$/;"	d
imm_parser	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	private var imm_parser: WasmParser;$/;"	d
imm_pos	$VIRGIL_WIZARD/src/engine/BytecodeIterator.v3	/^	private var imm_pos: int;$/;"	d
imm_readBlockType	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def imm_readBlockType() -> BlockType;$/;"	m
imm_readILEB32	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def imm_readILEB32() -> u32;$/;"	m
imm_readILEB32	$VIRGIL_WIZARD/src/bytecode/Intrinsics.v3	/^def imm_readILEB32() -> u32.V : read;$/;"	m
imm_readILEB64	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def imm_readILEB64() -> u64;$/;"	m
imm_readLabels	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def imm_readLabels() -> Labels;$/;"	m
imm_readU8	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def imm_readU8() -> u8;$/;"	m
imm_readULEB32	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def imm_readULEB32() -> u32;$/;"	m
imm_readULEB64	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def imm_readULEB64() -> u64;$/;"	m
immptr	$VIRGIL_WIZARD/src/engine/BytecodeIterator.v3	/^	def immptr() -> CodePtr {$/;"	m
imms	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^enum Opcode(prefix: u8, code: u16, mnemonic: string, imms: Array<ImmKind>, sig: SigDecl) {$/;"	d
imp	$VIRGIL_WIZARD/src/engine/Module.v3	/^	var imp: ImportInfo;$/;"	d
importFunction	$VIRGIL_WIZARD/src/engine/Instantiator.v3	/^	def importFunction(decl: FuncDecl, r: Exportable) -> Function {$/;"	m
importGlobal	$VIRGIL_WIZARD/src/engine/Instantiator.v3	/^	def importGlobal(decl: GlobalDecl, r: Exportable) -> Global {$/;"	m
importMemory	$VIRGIL_WIZARD/src/engine/Instantiator.v3	/^	def importMemory(decl: MemoryDecl, r: Exportable) -> Memory {$/;"	m
importTable	$VIRGIL_WIZARD/src/engine/Instantiator.v3	/^	def importTable(decl: TableDecl, r: Exportable) -> Table {$/;"	m
importTag	$VIRGIL_WIZARD/src/engine/Instantiator.v3	/^	def importTag(decl: TagDecl, r: Exportable) -> Tag {$/;"	m
import_call_count	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^	private var import_call_count: int;$/;"	d
import_index	$VIRGIL_WIZARD/src/engine/Module.v3	/^class ImportInfo(module_name: string, field_name: string, import_index: u31) {$/;"	d
import_info	$VIRGIL_WIZARD/src/engine/Instantiator.v3	/^	var import_info: ImportInfo;$/;"	d
import_pos	$VIRGIL_WIZARD/src/engine/Instantiator.v3	/^	var import_pos: u31;$/;"	d
imported	$VIRGIL_WIZARD/src/engine/Module.v3	/^	def imported() -> bool { return imp != null; }$/;"	m
imported_global_vals	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^	def var imported_global_vals = HashMap<int, Value>.new(int.!<int>, int.==);$/;"	d
imports	$VIRGIL_WIZARD/src/engine/Instance.v3	/^class Instance(module: Module, imports: Array<Exportable>) {$/;"	d
imports	$VIRGIL_WIZARD/src/engine/Instantiator.v3	/^class Instantiator(extensions: Extension.set, module: Module, var imports: Array<Exportable>, error: ErrorGen) { \/\/ TODO: s\/error\/err$/;"	d
imports	$VIRGIL_WIZARD/src/engine/Module.v3	/^	def imports = Vector<Decl>.new(); \/\/ all imports$/;"	d
inBasicBlockMode	$VIRGIL_WIZARD/src/monitors/CoverageMonitor.v3	/^var inBasicBlockMode = false;$/;"	d
inCode	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^	def inCode(p: Pointer) -> bool {$/;"	f
inCodeMode	$VIRGIL_WIZARD/src/monitors/BranchMonitor.v3	/^def inCodeMode = monitor_.options.addAlias($/;"	d
inCodeMode	$VIRGIL_WIZARD/src/monitors/CoverageMonitor.v3	/^var inCodeMode = false;$/;"	d
inCodeMode	$VIRGIL_WIZARD/src/monitors/HotnessMonitor.v3	/^def inCodeMode = monitor_.options.addAlias($/;"	d
inCodeMode	$VIRGIL_WIZARD/src/monitors/LoopMonitor.v3	/^def inCodeMode = monitor_.options.addAlias($/;"	d
inReg	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def inReg() -> bool {$/;"	m
incoming	$VIRGIL_WIZARD/src/util/CfgBuilder.v3	/^	var incoming: List<(int, CfgBlock)>;$/;"	d
increment	$VIRGIL_WIZARD/src/monitors/CallsMonitor.v3	/^	def increment(func: Function) {$/;"	m
increment	$VIRGIL_WIZARD/src/monitors/LoopTraceMonitor.v3	/^def increment = u32.+(1, _);$/;"	d
increment	$VIRGIL_WIZARD/src/util/ProbeUtil.v3	/^class CountMoreProbe(c: CountProbe, increment: u64) extends Probe {$/;"	d
incrementFuel	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^	def incrementFuel(amount: u32) {$/;"	m
indent	$VIRGIL_WIZARD/src/engine/Trace.v3	/^	def indent(depth: int) -> this {$/;"	m
index	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^type ValueTypeCode(code: i8, index: i32) #unboxed {$/;"	d
index	$VIRGIL_WIZARD/src/engine/Module.v3	/^type ExHandlerEntry(index: int, tag: int, start: int, end: int, info: ExHandlerInfo) #unboxed;$/;"	d
index	$VIRGIL_WIZARD/src/engine/Type.v3	/^	case FwRef(index: int);$/;"	d
index	$VIRGIL_WIZARD/src/engine/compiler/RegSet.v3	/^type Reg(index: byte) #unboxed { }$/;"	d
index	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	case EnableBreakpoint(index: int);$/;"	d
index	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	var index: int = -1;		\/\/ current index into section$/;"	d
indexType	$VIRGIL_WIZARD/src/engine/Module.v3	/^	def indexType() -> ValueType { return if(is64, ValueType.I64, ValueType.I32); }$/;"	m
index_reg	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^type EffectiveAddr(oob: bool, is64: bool, base_reg: Reg, index_reg: Reg, offset: u32) #unboxed;$/;"	d
index_tag	$VIRGIL_WIZARD/src/engine/Memory.v3	/^	def index_tag: byte = if(is64, BpTypeCode.I64.code, BpTypeCode.I32.code);$/;"	d
index_tag	$VIRGIL_WIZARD/src/engine/Table.v3	/^	def index_tag: byte = if(decl != null && decl.size.is64, BpTypeCode.I64.code, BpTypeCode.I32.code);$/;"	d
info	$VIRGIL_WIZARD/src/engine/Module.v3	/^type ExHandlerEntry(index: int, tag: int, start: int, end: int, info: ExHandlerInfo) #unboxed;$/;"	d
info	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	case Info(info: Info);$/;"	d
init	$VIRGIL_WIZARD/src/engine/Module.v3	/^class GlobalDecl(valtype: ValueType, mutable: bool, init: InitExpr) extends Decl {$/;"	d
init	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def init(opcode: Opcode) {$/;"	f
init	$VIRGIL_WIZARD/src/modules/HostModuleBuilder.v3	/^	def init(f: (C, Array<string>, bool, ErrorGen) -> void) -> this {$/;"	m
init	$VIRGIL_WIZARD/src/modules/ModuleRegistry.v3	/^	def init(args: Array<string>, trace: bool, err: ErrorGen) { }$/;"	m
init	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	def init(i: Instance) {$/;"	f
initGlobalOpTable	$VIRGIL_WIZARD/src/util/OpcodeMap.v3	/^def initGlobalOpTable() {$/;"	m
initTable	$VIRGIL_WIZARD/src/monitors/FuncProfileMonitor.v3	/^def initTable() -> TraceTable {$/;"	m
initTable	$VIRGIL_WIZARD/src/monitors/InstrCountMonitor.v3	/^def initTable() -> TraceTable {$/;"	m
initTable	$VIRGIL_WIZARD/src/monitors/MemStatsMonitor.v3	/^def initTable() -> TraceTable {$/;"	m
initTable	$VIRGIL_WIZARD/src/monitors/OpcodeMonitor.v3	/^def initTable() -> TraceTable {$/;"	m
init_f	$VIRGIL_WIZARD/src/modules/HostModuleBuilder.v3	/^	var init_f: (C, Array<string>, bool, ErrorGen) -> void;$/;"	d
init_p	$VIRGIL_WIZARD/src/modules/wasi/x86-64-linux/WspOneModule-x86-64-linux.v3	/^	def init_p(err: ErrorGen) {$/;"	m
init_stack	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	var init_stack: ArrayStack<InitExpr>;$/;"	d
init_status	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	def init_status = Vector<InitStatus>.new();$/;"	d
initial	$VIRGIL_WIZARD/src/engine/Module.v3	/^type SizeConstraint(is64: bool, initial: u64, maximum: Max) #unboxed {$/;"	d
initial	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^	case ImportGlobal(idx: int, initial: Value);$/;"	d
initialize	$VIRGIL_WIZARD/src/monitors/HotnessMonitor.v3	/^	def initialize(sort: bool) -> Array<LocCounter> {$/;"	m
inlineAllLEBs	$VIRGIL_WIZARD/src/engine/Tuning.v3	/^	def inlineAllLEBs = false;	\/\/ always inline LEB slow cases$/;"	d
inlineGlobalAccess	$VIRGIL_WIZARD/src/engine/Tuning.v3	/^	var inlineGlobalAccess = true;		\/\/ enable inline access of (primitive) globals$/;"	d
inlineSmallFunc	$VIRGIL_WIZARD/src/engine/Tuning.v3	/^	var inlineSmallFunc = true;		\/\/ inline small functions, currently only applicable for whamm probes$/;"	d
inline_heuristic_checked	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	var inline_heuristic_checked = false;$/;"	d
inlined_instance_slot	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	var inlined_instance_slot: MasmAddr;$/;"	d
inlined_mem0_base_slot	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	var inlined_mem0_base_slot: MasmAddr;$/;"	d
ino	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	+8	ino:		u64;$/;"	d
input	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^class R3TraceParser(input: Array<byte>) {$/;"	d
ins	$VIRGIL_WIZARD/src/monitors/R3BackEndMonitor.v3	/^	var ins: Instance;$/;"	d
insert	$VIRGIL_WIZARD/src/engine/Canon.v3	/^	def insert(decl: HeapTypeDecl) {$/;"	m
insert	$VIRGIL_WIZARD/src/monitors/CallsMonitor.v3	/^	def insert(probe: Probe) {$/;"	m
insertBefore	$VIRGIL_WIZARD/src/engine/compiler/RegAlloc.v3	/^	def insertBefore(that: SpcRaPoolLink) -> this {$/;"	m
insertCallProbe	$VIRGIL_WIZARD/src/monitors/ModuleInstrumenter.v3	/^	private def insertCallProbe(func_index: u31, f: DynamicLoc -> ProbeAction) {$/;"	m
insertFuncEntryProbe	$VIRGIL_WIZARD/src/engine/Instrumentation.v3	/^	def insertFuncEntryProbe(module: Module, func_id: int, p: Probe) {$/;"	f
insertGlobalProbe	$VIRGIL_WIZARD/src/engine/Instrumentation.v3	/^	def insertGlobalProbe(p: Probe) {$/;"	f
insertGlobalProbe	$VIRGIL_WIZARD/src/monitors/ModuleInstrumenter.v3	/^	private def insertGlobalProbe(f: DynamicLoc -> ProbeAction) {$/;"	m
insertLocalProbe	$VIRGIL_WIZARD/src/engine/Instrumentation.v3	/^	def insertLocalProbe(module: Module, func_id: int, offset: int, p: Probe) {$/;"	f
insertProbeHere	$VIRGIL_WIZARD/src/monitors/ControlInstrumenter.v3	/^	private def insertProbeHere(probe: Probe) {$/;"	m
insertProbeHere	$VIRGIL_WIZARD/src/util/BytecodeInstrumenter.v3	/^	def insertProbeHere(probe: Probe) {$/;"	m
insertProbes	$VIRGIL_WIZARD/src/monitors/ModuleInstrumenter.v3	/^	private def insertProbes(dests: Range<int>, f: DynamicLoc -> ProbeAction) {$/;"	m
insert_new_probe	$VIRGIL_WIZARD/src/modules/DynInstrModule.v3	/^	def insert_new_probe(args: Range<Value>) -> HostResult {$/;"	m
installStubForModule	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Target.v3	/^	def installStubForModule(module: Module, set: (Module, FuncDecl) -> void) {$/;"	m
instance	$VIRGIL_WIZARD/src/engine/Instance.v3	/^class WasmFunction(instance: Instance, decl: FuncDecl) extends Function {$/;"	d
instance	$VIRGIL_WIZARD/src/engine/Instantiator.v3	/^	def instance = Instance.new(module, imports);$/;"	d
instance	$VIRGIL_WIZARD/src/engine/Meta.v3	/^class InstanceRef(instance: Instance) extends HostObject {$/;"	d
instance	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	var instance: Reg;$/;"	d
instance	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^	var instance: Reg;$/;"	d
instance	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	+80	instance	: i64;	\/\/ Instance$/;"	d
instance	$VIRGIL_WIZARD/src/modules/wizeng/WizengModule.v3	/^	var instance: Instance;$/;"	d
instance	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	var instance: Instance;$/;"	d
instance	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	def instance: Instance;			\/\/ instance of the whamm monitor$/;"	d
instance_slot	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	var instance_slot: MasmAddr;$/;"	d
instance_slot	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^	var instance_slot: MasmAddr;$/;"	d
instantiators	$VIRGIL_WIZARD/src/modules/ModuleLinker.v3	/^	private def instantiators = Strings.newMap<(Instantiator, int)>();$/;"	d
instr	$VIRGIL_WIZARD/src/util/CfgPrinter.v3	/^type CfgPrintEntry(pc: int, fw_edges: Array<CfgEdgeChar>, instr: string, bw_edges: Array<CfgEdgeChar>) #unboxed {$/;"	d
instrCount	$VIRGIL_WIZARD/src/monitors/WhammMonitor.v3	/^	var instrCount: int;$/;"	d
instrOpt	$VIRGIL_WIZARD/src/monitors/CoverageMonitor.v3	/^def instrOpt = monitor_.options.addAlias($/;"	d
instrTracer	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	def instrTracer = if(Trace.validation, InstrTracer.new());$/;"	d
instrTracer	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def instrTracer = if(Trace.compiler, InstrTracer.new());$/;"	d
instrTracer	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	var instrTracer: InstrTracer;$/;"	d
instr_count	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^private type WasmFuncTrace(func_id: int, instr_count: u64, is_start: bool) {$/;"	d
instr_width	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	var instr_width = -1;$/;"	d
instrs	$VIRGIL_WIZARD/src/monitors/BlocksMonitor.v3	/^type BasicBlockCount(start: int, end: int, instrs: int, counter: CountProbe) #unboxed;$/;"	d
instrs	$VIRGIL_WIZARD/src/monitors/InstrCountMonitor.v3	/^	var instrs: int;$/;"	d
instrument	$VIRGIL_WIZARD/src/monitors/BranchMonitor.v3	/^	def instrument(mm: ModuleInstrumenter, func: FuncDecl, i: ControlInstrumenter) {$/;"	m
instrument	$VIRGIL_WIZARD/src/monitors/ConstMonitor.v3	/^	private def instrument(mm: ModuleInstrumenter, func: FuncDecl) {$/;"	m
instrument	$VIRGIL_WIZARD/src/monitors/ControlInstrumenter.v3	/^	def instrument(module: Module, func: FuncDecl) -> ControlInstrumentation {$/;"	m
instrument	$VIRGIL_WIZARD/src/monitors/ControlMonitor.v3	/^	def instrument(mm: ModuleInstrumenter, func: FuncDecl, i: ControlInstrumenter) {$/;"	m
instrument	$VIRGIL_WIZARD/src/monitors/LoopMonitor.v3	/^	private def instrument(mm: ModuleInstrumenter, func: FuncDecl) {$/;"	m
instrument	$VIRGIL_WIZARD/src/monitors/OpcodeMonitor.v3	/^	private def instrument(mm: ModuleInstrumenter, func: FuncDecl) {$/;"	m
instrument	$VIRGIL_WIZARD/src/monitors/WhammMonitor.v3	/^	def instrument(func: FuncDecl) {$/;"	m
instrumentFunc	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^	private def instrumentFunc(mi: ModuleInstrumenter, func: FuncDecl) {$/;"	m
instrumentFunc	$VIRGIL_WIZARD/src/monitors/CallsMonitor.v3	/^	private def instrumentFunc(mm: ModuleInstrumenter, func: FuncDecl) {$/;"	m
instrumentFunc	$VIRGIL_WIZARD/src/util/BasicTracing.v3	/^	def instrumentFunc(module: Module, func: FuncDecl) {$/;"	f
instrumentFunctionEnter	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^	private def instrumentFunctionEnter(mm: ModuleInstrumenter, func: FuncDecl) {$/;"	m
instrumentGlobalAccess	$VIRGIL_WIZARD/src/monitors/ModuleInstrumenter.v3	/^	private def instrumentGlobalAccess(func: FuncDecl, global_index: u31, isWrite: bool, f: DynamicLoc -> ProbeAction) {$/;"	m
instrumentMemoryAccesses	$VIRGIL_WIZARD/src/monitors/ModuleInstrumenter.v3	/^	private def instrumentMemoryAccesses(func: FuncDecl, visitor: MemoryVisitor) {$/;"	m
instrumentModule	$VIRGIL_WIZARD/src/util/BasicTracing.v3	/^	def instrumentModule(module: Module) {$/;"	f
int	$VIRGIL_WIZARD/src/engine/TraceOptions.v3	/^	int('i', "interpreter"),$/;"	d
intIntEntryOffset	$VIRGIL_WIZARD/src/engine/x86-64/X86_64PreGenStubs.v3	/^	+32	intIntEntryOffset:		i32;	\/\/ entry into interpreter from interpreter caller$/;"	d
intSpcEntryOffset	$VIRGIL_WIZARD/src/engine/x86-64/X86_64PreGenStubs.v3	/^	+28	intSpcEntryOffset:		i32;	\/\/ entry into interpreter from SPC caller$/;"	d
intSuspendEntryOffset	$VIRGIL_WIZARD/src/engine/x86-64/X86_64PreGenStubs.v3	/^	+36 intSuspendEntryOffset:	i32; \/\/ entry into interpreter from a suspended child stack$/;"	d
intV3Entry	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^	var intV3Entry: (WasmFunction, Pointer) -> Throwable;$/;"	d
intV3EntryOffset	$VIRGIL_WIZARD/src/engine/x86-64/X86_64PreGenStubs.v3	/^	+24	intV3EntryOffset:		i32;	\/\/ entry into interpreter from V3 caller$/;"	d
interpreter	$VIRGIL_WIZARD/src/engine/Debug.v3	/^	def interpreter = false;$/;"	d
interpreter	$VIRGIL_WIZARD/src/engine/Trace.v3	/^	var interpreter = false;$/;"	d
interpreterCode	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^	var interpreterCode: X86_64InterpreterCode;$/;"	d
interpreter_fallback	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Target.v3	/^class X86_64SpcAotStrategy(interpreter_fallback: bool) extends X86_64SpcStrategy {$/;"	d
intrinsified_read_probe	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	var intrinsified_read_probe: MemoryReadProbe = null;$/;"	d
intrinsifyCountProbe	$VIRGIL_WIZARD/src/engine/Tuning.v3	/^	var intrinsifyCountProbe = true;	\/\/ recognize and optimize CountProbes$/;"	d
intrinsifyMemoryProbes	$VIRGIL_WIZARD/src/engine/Tuning.v3	/^	var intrinsifyMemoryProbes = true;$/;"	d
intrinsifyOperandProbe	$VIRGIL_WIZARD/src/engine/Tuning.v3	/^	var intrinsifyOperandProbe = true; 	\/\/ recognize and optimize OperandProbes$/;"	d
intrinsifyWhammProbe	$VIRGIL_WIZARD/src/engine/Tuning.v3	/^	var intrinsifyWhammProbe = true;	\/\/ recognize and optimize WhammProbes$/;"	d
invalid	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def invalid(); \/\/ should never occur$/;"	m
invoke	$VIRGIL_WIZARD/src/engine/Debug.v3	/^	def invoke(wf: WasmFunction) { }$/;"	f
invoke	$VIRGIL_WIZARD/src/engine/Host.v3	/^type HostFunc(sig: SigDecl, invoke: Range<Value> -> HostResult) #unboxed;$/;"	d
invoke	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def invoke(wf: WasmFunction, sp: Pointer) -> Throwable {$/;"	f
invoke	$VIRGIL_WIZARD/src/modules/wizeng/WizengModule.v3	/^enum WizengExports(sig: SigDecl, invoke: (WizengModule, Range<Value>) -> HostResult) {$/;"	d
invoke0	$VIRGIL_WIZARD/src/modules/wizeng/WizengModule.v3	/^	invoke0(SigCache.g_v, WizengModule.invoke0),$/;"	d
invokeFunction0	$VIRGIL_WIZARD/src/modules/wizeng/WizengModule.v3	/^	private def invokeFunction0(func: Function) -> HostResult {$/;"	m
invokeInterpreter	$VIRGIL_WIZARD/src/engine/Debug.v3	/^	def invokeInterpreter(wf: WasmFunction) { }$/;"	f
invokeSpc	$VIRGIL_WIZARD/src/engine/Debug.v3	/^	def invokeSpc(wf: WasmFunction) { }$/;"	f
invokeWasmExit	$VIRGIL_WIZARD/src/monitors/WhammMonitor.v3	/^	def invokeWasmExit(wi: WhammInstance, func: Function) {$/;"	m
ip	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^	var ip: Reg;$/;"	d
ip	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	+56	ip		: i64;	\/\/ Pointer$/;"	d
ip_slot	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^	var ip_slot: MasmAddr;$/;"	d
is64	$VIRGIL_WIZARD/src/engine/Memory.v3	/^	def is64 = decl != null && decl.size.is64;$/;"	d
is64	$VIRGIL_WIZARD/src/engine/Module.v3	/^type SizeConstraint(is64: bool, initial: u64, maximum: Max) #unboxed {$/;"	d
is64	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^type EffectiveAddr(oob: bool, is64: bool, base_reg: Reg, index_reg: Reg, offset: u32) #unboxed;$/;"	d
isAlphaOrUnderscore	$VIRGIL_WIZARD/src/util/Whamm.v3	/^def isAlphaOrUnderscore(ch: byte) -> bool {$/;"	m
isAssignable	$VIRGIL_WIZARD/src/engine/Type.v3	/^	def isAssignable(from: ValueType, to: ValueType) -> bool {$/;"	f
isAssignableHeap	$VIRGIL_WIZARD/src/engine/Type.v3	/^	def isAssignableHeap(from: HeapTypeDecl, to: HeapTypeDecl) -> bool {$/;"	f
isAssignableSig	$VIRGIL_WIZARD/src/engine/Type.v3	/^	def isAssignableSig(that: SigDecl) -> bool {$/;"	m
isAssignableTo	$VIRGIL_WIZARD/src/engine/Host.v3	/^	def isAssignableTo(t: ValueType) -> bool {$/;"	m
isBlockStart	$VIRGIL_WIZARD/src/monitors/WhammMonitor.v3	/^	var isBlockStart: bool;$/;"	d
isCompatibleParamType	$VIRGIL_WIZARD/src/engine/Type.v3	/^	def isCompatibleParamType = ValueType.==; \/\/ invariant function types for now$/;"	d
isCompatibleReturnType	$VIRGIL_WIZARD/src/engine/Type.v3	/^	def isCompatibleReturnType = ValueType.==; \/\/ invariant function types for now$/;"	d
isConst	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def isConst() -> bool {$/;"	m
isConstant	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def isConstant(extensions: Extension.set, op: Opcode) -> bool {$/;"	f
isDynamicImport	$VIRGIL_WIZARD/src/modules/ModuleLinker.v3	/^	private def isDynamicImport(module_name: string, self_name: string) -> bool {$/;"	m
isF64	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^class FloatTrunc(isI64: bool, isF64: bool, isSigned: bool) {$/;"	d
isFree	$VIRGIL_WIZARD/src/engine/compiler/RegAlloc.v3	/^	def isFree(reg: Reg) -> bool {$/;"	m
isI64	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^class FloatTrunc(isI64: bool, isF64: bool, isSigned: bool) {$/;"	d
isIdentChar	$VIRGIL_WIZARD/src/util/Whamm.v3	/^def isIdentChar(ch: byte) -> bool {$/;"	m
isImport	$VIRGIL_WIZARD/src/util/MonitorUtil.v3	/^	def isImport(module: Module, func: FuncDecl) -> bool {$/;"	f
isInRedZone	$VIRGIL_WIZARD/src/engine/x86-64/Redzones.v3	/^	def isInRedZone(addr: Pointer) -> bool {$/;"	f
isInternal	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def isInternal(b: byte) -> bool {$/;"	f
isLoop	$VIRGIL_WIZARD/src/util/ControlStack.v3	/^	def isLoop() -> bool {$/;"	m
isNan32	$VIRGIL_WIZARD/src/util/FloatUtil.v3	/^	def isNan32(bits: u32) -> bool {$/;"	f
isNan64	$VIRGIL_WIZARD/src/util/FloatUtil.v3	/^	def isNan64(bits: u64) -> bool {$/;"	f
isNonZero	$VIRGIL_WIZARD/src/monitors/ControlInstrumenter.v3	/^	def isNonZero() -> bool {$/;"	m
isNotImport	$VIRGIL_WIZARD/src/util/MonitorUtil.v3	/^	def isNotImport(module: Module, func: FuncDecl) -> bool {$/;"	f
isNotZero	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^def isNotZero = int.!=(0, _);$/;"	d
isNumeric	$VIRGIL_WIZARD/src/engine/Type.v3	/^	def isNumeric(t: ValueType) -> bool {$/;"	f
isOneByte	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def isOneByte(b: byte) -> bool {$/;"	f
isOpenValueType	$VIRGIL_WIZARD/src/engine/Canon.v3	/^	private def isOpenValueType(vt: ValueType) -> bool {$/;"	m
isPrefix	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def isPrefix(b: byte) -> bool {$/;"	f
isPrimitive	$VIRGIL_WIZARD/src/engine/Type.v3	/^	def isPrimitive(t: ValueType) -> bool {$/;"	f
isRef	$VIRGIL_WIZARD/src/engine/Type.v3	/^	def isRef(t: ValueType) -> bool {$/;"	f
isSigned	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^class FloatTrunc(isI64: bool, isF64: bool, isSigned: bool) {$/;"	d
isSpc	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	def isSpc() -> bool {$/;"	m
isStartOfBlock	$VIRGIL_WIZARD/src/monitors/CoverageMonitor.v3	/^	def isStartOfBlock = Vector<bool>.new();$/;"	d
isStored	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def isStored() -> bool {$/;"	m
isTop	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	private def isTop() -> bool {$/;"	m
isTop	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	def isTop() -> bool {$/;"	m
isTransferEmpty	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def isTransferEmpty(target: SpcControl) -> bool {$/;"	m
isUnreachable	$VIRGIL_WIZARD/src/util/ControlStack.v3	/^	def isUnreachable() -> bool {$/;"	m
isUnwound	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^	def isUnwound() -> bool;$/;"	m
isUnwound	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def isUnwound() -> bool {$/;"	m
isUnwound	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	def isUnwound() -> bool {$/;"	m
isValid	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def isValid(code: u32) -> bool {$/;"	m
isWrite	$VIRGIL_WIZARD/src/monitors/ModuleInstrumenter.v3	/^private class GlobalVisitor(module: Module, f: DynamicLoc -> ProbeAction, isWrite: bool, targetIndex: u31) extends BytecodeVisitor {$/;"	d
is_absolute_path	$VIRGIL_WIZARD/src/modules/wasi/PathResolver.v3	/^def is_absolute_path(path: string) -> bool {$/;"	m
is_abspath_sandboxed	$VIRGIL_WIZARD/src/modules/wasi/PathResolver.v3	/^def is_abspath_sandboxed(abspath: string, fd_path: string) -> bool {$/;"	m
is_dispatch_func	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^	var is_dispatch_func = false;$/;"	d
is_dummy	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^type SpcHandlerInfo(is_dummy: bool, dest_label: MasmLabel, stub_label: MasmLabel, merge_state: Array<SpcVal>);$/;"	d
is_dummy	$VIRGIL_WIZARD/src/engine/v3/V3Target.v3	/^class TargetHandlerDest(is_dummy: bool) { }$/;"	d
is_dummy	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Target.v3	/^class TargetHandlerDest(is_dummy: bool) {$/;"	d
is_inlined	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	var is_inlined = false;$/;"	d
is_replay_valid	$VIRGIL_WIZARD/src/monitors/R3BackEndMonitor.v3	/^	var is_replay_valid = true;$/;"	d
is_s	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def is_s = S(arr_is, arr_s);$/;"	d
is_start	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^private type WasmFuncTrace(func_id: int, instr_count: u64, is_start: bool) {$/;"	d
is_v	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def is_v = S(arr_is, arr_v);$/;"	d
it	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	var it = BytecodeIterator.new();$/;"	d
it	$VIRGIL_WIZARD/src/monitors/LoopMonitor.v3	/^	def it = BytecodeIterator.new();$/;"	d
it	$VIRGIL_WIZARD/src/monitors/OpcodeMonitor.v3	/^	def it = BytecodeIterator.new();$/;"	d
iterate	$VIRGIL_WIZARD/src/engine/BytecodeIterator.v3	/^	def iterate(func: FuncDecl, v: BytecodeVisitor) {$/;"	m
iterate_local_codes	$VIRGIL_WIZARD/src/engine/CodePtr.v3	/^	def iterate_local_codes<T>(f: (u32, ValueTypeCode) -> T) -> u31 {$/;"	m
jump_tables	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	var jump_tables: Vector<(int, Array<X86_64Label>)>;$/;"	d
justify	$VIRGIL_WIZARD/src/util/TraceUtil.v3	/^	var justify: Justification;$/;"	d
keepAlive	$VIRGIL_WIZARD/src/engine/Debug.v3	/^	def keepAlive<T>(x: T) { }$/;"	f
keepAlive	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def keepAlive() {$/;"	m
kind	$VIRGIL_WIZARD/src/engine/Type.v3	/^	def kind(t: ValueType) -> ValueKind {$/;"	f
kind	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	var kind: ValueKind;	\/\/ value kind of destination$/;"	d
kind	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^private type CallStackEntry(func_id: int, kind: CallKind);$/;"	d
kindFlags	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def kindFlags(add: byte) -> byte {$/;"	m
kindFlagsAndTag	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def kindFlagsAndTag(add: byte) -> byte {$/;"	m
kindFlagsMatching	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def kindFlagsMatching(kind: ValueKind, add: byte) -> byte {$/;"	m
kindToFlags	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def kindToFlags(kind: ValueKind) -> byte {$/;"	f
kindToPool	$VIRGIL_WIZARD/src/engine/compiler/RegSet.v3	/^	def kindToPool = Array<byte>.new(ValueKind.count);$/;"	d
kinds	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def kinds: Array<ValueKind> = [ValueKind.I32, ValueKind.I64, ValueKind.F32, ValueKind.F64,$/;"	d
l_d	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def l_d = S(arr_l, arr_d);$/;"	d
l_f	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def l_f = S(arr_l, arr_f);$/;"	d
l_i	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def l_i = S(arr_l, arr_i);$/;"	d
l_l	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def l_l = S(arr_l, arr_l);$/;"	d
l_s	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def l_s = S(arr_l, arr_s);$/;"	d
l_v	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def l_v = S(arr_l, arr_v);$/;"	d
label	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	case CatchRef(tag_index: u31, label: u31);$/;"	d
label	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	var label: MasmLabel;$/;"	d
label	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def label: X86_64Label;$/;"	d
label	$VIRGIL_WIZARD/src/util/ControlStack.v3	/^	var label: B;$/;"	d
labelArgs	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^def labelArgs(target: ControlEntry) -> Array<ValueType> {$/;"	m
labelArgs	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def labelArgs(ctl: SpcControl) -> Array<ValueType> {$/;"	m
labelId	$VIRGIL_WIZARD/src/util/CfgBuilder.v3	/^var labelId = 100;$/;"	d
labels	$VIRGIL_WIZARD/src/monitors/LoopTraceMonitor.v3	/^private class TraceBrTableProbe(trace: TraceBuffer, labels: Array<u31>) extends OperandProbe_i_v {$/;"	d
largestPage	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def var largestPage: u31;$/;"	d
last	$VIRGIL_WIZARD/src/engine/Probe.v3	/^	private var last: ProbeElem;$/;"	d
last	$VIRGIL_WIZARD/src/engine/compiler/RegAlloc.v3	/^	private var last: SpcRaPoolLink;$/;"	d
last	$VIRGIL_WIZARD/src/modules/HostModuleBuilder.v3	/^	var last: C;$/;"	d
last_ctx	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^	private var last_ctx = global_ctx;$/;"	d
last_op_is_call	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^	var last_op_is_call = false;$/;"	d
last_opcode_addr	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^	var last_opcode_addr: u32;$/;"	d
last_pc	$VIRGIL_WIZARD/src/monitors/InstrCountMonitor.v3	/^	var last_pc: int;$/;"	d
last_probe	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	var last_probe = 0;$/;"	d
last_probe_event	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^	var last_probe_event: ProbeEvent = ProbeEvent.RETURN;$/;"	d
last_probe_event_count	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^	var last_probe_event_count: u64;$/;"	d
last_step_count	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^	var last_step_count: u64;$/;"	d
lastfd	$VIRGIL_WIZARD/src/modules/wasi/WasiFdMap.v3	/^	private var lastfd: int;$/;"	d
lastfd	$VIRGIL_WIZARD/src/util/FileDescriptorMap.v3	/^	private var lastfd: int;$/;"	d
lazyCompile	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	private def lazyCompile(wf: WasmFunction) -> (WasmFunction, Pointer, Throwable) {$/;"	f
lazyCompile	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Target.v3	/^	def lazyCompile(wf: WasmFunction) -> SpcResultForStub;$/;"	m
lazyDecode	$VIRGIL_WIZARD/src/engine/NameSection.v3	/^	def lazyDecode() -> this {$/;"	m
lazySlotZeroing	$VIRGIL_WIZARD/src/engine/Tuning.v3	/^	def lazySlotZeroing = false;		\/\/ XXX: implement$/;"	d
lbuf	$VIRGIL_WIZARD/src/util/CfgPrinter.v3	/^	private def lbuf = Vector<CfgEdgeChar>.new();$/;"	d
legacyExceptions	$VIRGIL_WIZARD/src/engine/Tuning.v3	/^	def legacyExceptions = false;	\/\/ for legacy phase 3 lexically-scoped exceptions$/;"	d
len	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case ArrayNewElem(t: HeapType.Array, elem_index: int, offset: InitExpr, len: InitExpr);$/;"	d
length	$VIRGIL_WIZARD/src/engine/Canon.v3	/^class RecGroup(length: int) {$/;"	d
length	$VIRGIL_WIZARD/src/engine/Module.v3	/^	def length() -> int {$/;"	m
length	$VIRGIL_WIZARD/src/engine/compiler/RegSet.v3	/^	def length = regs.length;$/;"	d
length	$VIRGIL_WIZARD/src/util/CfgPrinter.v3	/^	def length() -> int {$/;"	m
li_l	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def li_l = S(arr_li, arr_l);$/;"	d
liilli_l	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def liilli_l = S(arr_liilli, arr_l);$/;"	d
limit	$VIRGIL_WIZARD/src/engine/native/NativeMemory.v3	/^	var limit: Pointer;$/;"	d
limit_memory_size	$VIRGIL_WIZARD/src/engine/v3/V3Target.v3	/^	def limit_memory_size = 30000uL * 0x1_0000u;$/;"	d
limit_memory_size	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Target.v3	/^	def limit_memory_size = 0x1_0000uL * 0x1_0000uL;$/;"	d
limit_memory_size_64	$VIRGIL_WIZARD/src/engine/v3/V3Target.v3	/^	def limit_memory_size_64 = 30000uL * 0x1_0000u;$/;"	d
limit_memory_size_64	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Target.v3	/^	def limit_memory_size_64 = 0x4_0000uL * 0x1_0000uL;$/;"	d
limit_pages	$VIRGIL_WIZARD/src/engine/Memory.v3	/^	def limit_pages = if(is64, Target.limit_memory_size_64, Target.limit_memory_size) >> log2_page_size;$/;"	d
limit_table_size	$VIRGIL_WIZARD/src/engine/Limits.v3	/^	def limit_table_size = 1000000u;$/;"	d
limits	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^class BinParser(extensions: Extension.set, limits: Limits, err: ErrorGen, filename: string) extends BpFsmCallback {$/;"	d
limits	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^class CodeValidator(extensions: Extension.set, limits: Limits, module: Module, err: ErrorGen) {$/;"	d
limits	$VIRGIL_WIZARD/src/engine/Execute.v3	/^	var limits = Limits.new();		\/\/ limits on execution\/memory$/;"	d
limits	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def limits = Limits.new().set(Extension.set.all);$/;"	d
limits	$VIRGIL_WIZARD/src/engine/WasmParser.v3	/^class WasmParser(extensions: Extension.set, limits: Limits, module: Module,$/;"	d
limits	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^class SinglePassCompiler(xenv: SpcExecEnv, masm: MacroAssembler, regAlloc: RegAlloc, extensions: Extension.set, limits: Limits) extends BytecodeVisitor {$/;"	d
link	$VIRGIL_WIZARD/src/modules/ModuleLinker.v3	/^	def link() -> Array<Instantiator> {$/;"	m
linkAndExecuteMain	$VIRGIL_WIZARD/src/WasmMode.v3	/^	def linkAndExecuteMain(engine: Engine, monitors: Range<Monitor>, nm: Array<NamedModule>, programArgs: Array<string>) -> int {$/;"	f
linking	$VIRGIL_WIZARD/src/engine/Trace.v3	/^	var linking = false;$/;"	d
linking	$VIRGIL_WIZARD/src/engine/TraceOptions.v3	/^	linking('l', "linking"),$/;"	d
links	$VIRGIL_WIZARD/src/engine/compiler/RegAlloc.v3	/^	private def links = Array<SpcRaPoolLink>.new(regConfig.regSet.regs.length);$/;"	d
list	$VIRGIL_WIZARD/src/engine/x86-64/Redzones.v3	/^	var list: RedZone;$/;"	d
list	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	def list() {$/;"	f
list	$VIRGIL_WIZARD/src/monitors/MonitorRegistry.v3	/^	private var list: List<MonitorRegistryEntry>;$/;"	d
list	$VIRGIL_WIZARD/src/util/DeclFilter.v3	/^class DeclFilter(pattern: string, list: List<(Matcher, Matcher)>) {$/;"	d
list	$VIRGIL_WIZARD/src/util/OptionsRegistry.v3	/^	var list: List<OptionGroupEntry>;$/;"	d
ljustify_mark	$VIRGIL_WIZARD/src/engine/Trace.v3	/^	def ljustify_mark(width: int) -> this {$/;"	m
ll_i	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def ll_i = S(arr_ll, arr_i);$/;"	d
ll_l	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def ll_l = S(arr_ll, arr_l);$/;"	d
llllll_l	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def llllll_l = S(arr_llllll, arr_l);$/;"	d
lmax	$VIRGIL_WIZARD/src/util/CfgPrinter.v3	/^	def var lmax = 0;$/;"	d
ln	$VIRGIL_WIZARD/src/engine/Trace.v3	/^	def ln() -> this {$/;"	m
loadAndInstrumentModules	$VIRGIL_WIZARD/src/WasmMode.v3	/^	def loadAndInstrumentModules(engine: Engine, monitors: Range<Monitor>, wasmFiles: Range<string>) -> (ErrorGen, Array<NamedModule>) {$/;"	f
loadData	$VIRGIL_WIZARD/src/engine/Instantiator.v3	/^	private def loadData(index: int, offset: InitExpr, ddecl: DataDecl) {$/;"	m
loadElems	$VIRGIL_WIZARD/src/engine/Instantiator.v3	/^	private def loadElems(index: int, offset: InitExpr, elems: ElemDecl) {$/;"	m
loadExpectedFile	$VIRGIL_WIZARD/src/util/TestUtil.v3	/^	def loadExpectedFile(expected: Map<string, bool>, fileName: string) {$/;"	f
loadFn	$VIRGIL_WIZARD/src/monitors/ModuleInstrumenter.v3	/^		loadFn: (DynamicLoc, Memory, u64, u64) -> ProbeAction,$/;"	d
loadMemarg	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	private def loadMemarg<T>(dst: Reg, src: MemArg, asm_mov_r_m: (X86_64Gpr, X86_64Addr) -> T) {$/;"	m
loadMemarg_b	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	private def loadMemarg_b(dst: Reg, src: MemArg) { loadMemarg(dst, src, asm.q.movb_r_m); }$/;"	m
loadMemarg_d	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	private def loadMemarg_d(dst: Reg, src: MemArg) { loadMemarg(dst, src, asm.q.movd_r_m); }$/;"	m
loadMemarg_q	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	private def loadMemarg_q(dst: Reg, src: MemArg) { loadMemarg(dst, src, asm.q.movq_r_m); }$/;"	m
loadMemarg_w	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	private def loadMemarg_w(dst: Reg, src: MemArg) { loadMemarg(dst, src, asm.q.movw_r_m); }$/;"	m
loadWasmFile	$VIRGIL_WIZARD/src/engine/Engine.v3	/^	def loadWasmFile(path: string, err: ErrorGen, tiering: ExecutionStrategy, outline: ModuleOutline) -> Module {$/;"	m
load_bytes	$VIRGIL_WIZARD/src/engine/Metrics.v3	/^	def load_bytes		= m("load:bytes", bytes, "Total Wasm binary bytes loaded");$/;"	d
load_time_per_byte	$VIRGIL_WIZARD/src/engine/Metrics.v3	/^	def load_time_per_byte	= r("load:time_per_byte", load_time_us, load_bytes,$/;"	d
load_time_us	$VIRGIL_WIZARD/src/engine/Metrics.v3	/^	def load_time_us	= t("load:time_us", "Time taken to load and parse Wasm binary");$/;"	d
load_v128_mask	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def load_v128_mask(dst: X86_64Xmmr, mask: (u64, u64), tmp: X86_64Gpr) {$/;"	m
loc	$VIRGIL_WIZARD/src/engine/Meta.v3	/^class DynamicLocRef(loc: DynamicLoc) extends HostObject {$/;"	d
loc	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	var loc: DynamicLoc;$/;"	d
localProbes	$VIRGIL_WIZARD/src/engine/Tuning.v3	/^	def localProbes = false;	\/\/ required for tracing\/probing$/;"	d
local_base_sp	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	var local_base_sp: u31 = 0;$/;"	d
local_get	$VIRGIL_WIZARD/src/util/WasmAsm.v3	/^	def local_get(index: int) -> this {$/;"	m
local_idx	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	case Set(local_idx: int, value: Value);$/;"	d
local_names	$VIRGIL_WIZARD/src/engine/NameSection.v3	/^	private var local_names: Array<Array<string>>;$/;"	d
local_set	$VIRGIL_WIZARD/src/util/WasmAsm.v3	/^	def local_set(index: int) -> this {$/;"	m
local_tee	$VIRGIL_WIZARD/src/util/WasmAsm.v3	/^	def local_tee(index: int) -> this {$/;"	m
locals	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	def locals = Vector<ValueType>.new();$/;"	d
locals	$VIRGIL_WIZARD/src/util/WasmAsm.v3	/^	def locals(count: int, vt: ValueType) -> this {$/;"	m
log2_WASM_PAGE_SIZE	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	def log2_WASM_PAGE_SIZE = 16u5;$/;"	d
log2_WASM_PAGE_SIZE	$VIRGIL_WIZARD/src/monitors/MemStatsMonitor.v3	/^def log2_WASM_PAGE_SIZE = 16u6;$/;"	d
log2_chunk_size	$VIRGIL_WIZARD/src/monitors/MemStatsMonitor.v3	/^	def log2_chunk_size: u6;$/;"	d
log2_pageSize	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^type MemLimits(size: SizeConstraint, shared: bool, log2_pageSize: u5) #unboxed { }$/;"	d
log2_pageSize	$VIRGIL_WIZARD/src/engine/Module.v3	/^class MemoryDecl(size: SizeConstraint, shared: bool, log2_pageSize: u5) extends Decl {$/;"	d
log2_page_size	$VIRGIL_WIZARD/src/engine/Memory.v3	/^	def log2_page_size: u5 = if(decl != null, decl.log2_pageSize, 16);$/;"	d
log2_size	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^private class MemoryAccessor<T>(size: byte, log2_size: u3, read: Range<byte> -> T, write: (Range<byte>, T) -> void) { }$/;"	d
logScaleOf	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def logScaleOf(kind: ValueKind) -> u6 {$/;"	m
longestName	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def var longestName: int;$/;"	d
lookup	$VIRGIL_WIZARD/src/modules/ModuleLinker.v3	/^	def lookup = Vector<string -> ImportProcessor>.new();$/;"	d
lookupIndirect	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def lookupIndirect(sig_index: u32, table_index: u32, func_index: u64) -> Function {$/;"	m
lookupName	$VIRGIL_WIZARD/src/monitors/MonitorRegistry.v3	/^	def lookupName(name: string) -> MonitorRegistryEntry {$/;"	f
lookupPage	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def lookupPage(code: u32) -> (OpcodePage, byte) {$/;"	m
lookupPc	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def lookupPc(ip: Pointer, isRetAddr: bool) -> int {$/;"	m
loop0	$VIRGIL_WIZARD/src/util/WasmAsm.v3	/^	def loop0() -> this {$/;"	m
loopTierUpDecrement	$VIRGIL_WIZARD/src/engine/Tuning.v3	/^	def loopTierUpDecrement = 1;	\/\/ "cost" of looping in the interpreter$/;"	d
loop_stack	$VIRGIL_WIZARD/src/util/CfgPrinter.v3	/^	private def loop_stack = ArrayStack<ControlStackEntry<int>>.new();$/;"	d
loops	$VIRGIL_WIZARD/src/monitors/ControlInstrumenter.v3	/^	var loops: bool;	\/\/ instrument loops$/;"	d
loops	$VIRGIL_WIZARD/src/util/WasmAsm.v3	/^	def loops(sig: SigDecl) -> this {$/;"	m
low	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^type v128(low: u64, high: u64);$/;"	d
low	$VIRGIL_WIZARD/src/engine/Instance.v3	/^	def var low: u64;		\/\/ TODO: non-private to compute its offset$/;"	d
low	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case V128(low: u64, high: u64);$/;"	d
low	$VIRGIL_WIZARD/src/engine/Value.v3	/^	case V128(low: u64, high: u64);$/;"	d
ls_s	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def ls_s = S(arr_ls, arr_s);$/;"	d
m_getFieldKind	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def m_getFieldKind(struct_index: u32, field_index: u32) -> FieldKind;$/;"	m
m_getFieldOffset	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def m_getFieldOffset(struct_index: u32, field_index: u32) -> FieldOffset;$/;"	m
m_getFuncSignature	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def m_getFuncSignature(func_index: u32) -> Signature;$/;"	m
m_getGlobalType	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def m_getGlobalType(index: u32) -> TypeVar;$/;"	m
m_getSignature	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def m_getSignature(sig_index: u32) -> Signature;$/;"	m
m_isMemory64	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def m_isMemory64(memory_index: u32) -> bool;$/;"	m
m_isTable64	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def m_isTable64(memory_index: u32) -> bool;$/;"	m
mach_readMemory32_f32	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def mach_readMemory32_f32(memory_index: u32, index: u32, offset: u32) -> float;$/;"	m
mach_readMemory32_f64	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def mach_readMemory32_f64(memory_index: u32, index: u32, offset: u32) -> double;$/;"	m
mach_readMemory32_u16	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def mach_readMemory32_u16(memory_index: u32, index: u32, offset: u32) -> u16;$/;"	m
mach_readMemory32_u32	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def mach_readMemory32_u32(memory_index: u32, index: u32, offset: u32) -> u32;$/;"	m
mach_readMemory32_u64	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def mach_readMemory32_u64(memory_index: u32, index: u32, offset: u32) -> u64;$/;"	m
mach_readMemory32_u8	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def mach_readMemory32_u8(memory_index: u32, index: u32, offset: u32) -> u8;$/;"	m
mach_readMemory64_f32	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def mach_readMemory64_f32(memory_index: u32, index: u64, offset: u64) -> float;$/;"	m
mach_readMemory64_f64	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def mach_readMemory64_f64(memory_index: u32, index: u64, offset: u64) -> double;$/;"	m
mach_readMemory64_u16	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def mach_readMemory64_u16(memory_index: u32, index: u64, offset: u64) -> u16;$/;"	m
mach_readMemory64_u32	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def mach_readMemory64_u32(memory_index: u32, index: u64, offset: u64) -> u32;$/;"	m
mach_readMemory64_u64	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def mach_readMemory64_u64(memory_index: u32, index: u64, offset: u64) -> u64;$/;"	m
mach_readMemory64_u8	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def mach_readMemory64_u8(memory_index: u32, index: u64, offset: u64) -> u8;$/;"	m
mach_readStructField_Object	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def mach_readStructField_Object(obj: Object, offset: FieldOffset) -> Object;$/;"	m
mach_readStructField_f32	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def mach_readStructField_f32(obj: Object, offset: FieldOffset) -> float;$/;"	m
mach_readStructField_f64	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def mach_readStructField_f64(obj: Object, offset: FieldOffset) -> double;$/;"	m
mach_readStructField_u16	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def mach_readStructField_u16(obj: Object, offset: FieldOffset) -> u16;$/;"	m
mach_readStructField_u32	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def mach_readStructField_u32(obj: Object, offset: FieldOffset) -> u32;$/;"	m
mach_readStructField_u64	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def mach_readStructField_u64(obj: Object, offset: FieldOffset) -> u64;$/;"	m
mach_readStructField_u8	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def mach_readStructField_u8(obj: Object, offset: FieldOffset) -> u8;$/;"	m
mach_readStructField_v128	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def mach_readStructField_v128(obj: Object, offset: FieldOffset) -> v128;$/;"	m
mach_readTable32	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def mach_readTable32(table_index: u32, index: u32) -> Object;$/;"	m
mach_readTable64	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def mach_readTable64(table_index: u32, index: u64) -> Object;$/;"	m
mach_writeMemory32_f32	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def mach_writeMemory32_f32(memory_index: u32, index: u32, offset: u32, val: double);$/;"	m
mach_writeMemory32_f64	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def mach_writeMemory32_f64(memory_index: u32, index: u32, offset: u32, val: double);$/;"	m
mach_writeMemory32_u16	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def mach_writeMemory32_u16(memory_index: u32, index: u32, offset: u32, val: u32);$/;"	m
mach_writeMemory32_u32	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def mach_writeMemory32_u32(memory_index: u32, index: u32, offset: u32, val: u32);$/;"	m
mach_writeMemory32_u64	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def mach_writeMemory32_u64(memory_index: u32, index: u32, offset: u32, val: u64);$/;"	m
mach_writeMemory32_u8	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def mach_writeMemory32_u8(memory_index: u32, index: u32, offset: u32, val: u32);$/;"	m
mach_writeMemory64_f32	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def mach_writeMemory64_f32(memory_index: u32, index: u64, offset: u64, val: float);$/;"	m
mach_writeMemory64_f64	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def mach_writeMemory64_f64(memory_index: u32, index: u64, offset: u64, val: double);$/;"	m
mach_writeMemory64_u16	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def mach_writeMemory64_u16(memory_index: u32, index: u64, offset: u64, val: u32);$/;"	m
mach_writeMemory64_u32	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def mach_writeMemory64_u32(memory_index: u32, index: u64, offset: u64, val: u32);$/;"	m
mach_writeMemory64_u64	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def mach_writeMemory64_u64(memory_index: u32, index: u64, offset: u64, val: u64);$/;"	m
mach_writeMemory64_u8	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def mach_writeMemory64_u8(memory_index: u32, index: u64, offset: u64, val: u32);$/;"	m
mach_writeTable32	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def mach_writeTable32(table_index: u32, index: u32, val: Object);$/;"	m
mach_writeTable64	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def mach_writeTable64(table_index: u32, index: u64, val: Object);$/;"	m
magicWord	$VIRGIL_WIZARD/src/engine/x86-64/X86_64PreGenStubs.v3	/^	+0	magicWord:			u64;	\/\/ magic word for finding in the binary$/;"	d
main	$VIRGIL_WIZARD/src/objdump.main.v3	/^def main(args: Array<string>) -> int {$/;"	m
main	$VIRGIL_WIZARD/src/wizeng.main.v3	/^def main(args: Array<string>) -> int {$/;"	m
main_table	$VIRGIL_WIZARD/src/util/OpcodeMap.v3	/^	private def main_table = OpcodeMapTable<T>.new(0, Opcodes.opcodes_no_prefix);$/;"	d
main_time_cycles	$VIRGIL_WIZARD/src/engine/Metrics.v3	/^	def main_time_cycles	= c("main:time_cycles", "Cycles taken to execute wasm module main function(s).");$/;"	d
main_time_us	$VIRGIL_WIZARD/src/engine/Metrics.v3	/^	def main_time_us	= t("main:time_us", "Time taken to execute wasm module main function(s).");$/;"	d
make	$VIRGIL_WIZARD/src/util/PrefixTrie.v3	/^	private def make(seq: Range<K>) -> PrefixTrieLeaf<K, V> {$/;"	m
makeBwEdge	$VIRGIL_WIZARD/src/util/CfgPrinter.v3	/^	private def makeBwEdge(entry: ControlStackEntry<int>) {$/;"	m
makeEdges	$VIRGIL_WIZARD/src/util/CfgPrinter.v3	/^	private def makeEdges(last: ControlStackEntry<int>, before: int, after: int, target: int) {$/;"	m
makeExternRef	$VIRGIL_WIZARD/src/SpectestMode.v3	/^	def makeExternRef(cache: Vector<HostObject>, i: int) -> HostObject {$/;"	f
makeInstance	$VIRGIL_WIZARD/src/modules/HostModuleBuilder.v3	/^	private def makeInstance() -> C {$/;"	m
makeSharedTrapLabel	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def makeSharedTrapLabel(reason: TrapReason) -> MasmLabel {$/;"	m
makeTrampoline	$VIRGIL_WIZARD/src/engine/x86-64/X86_64WhammProbeTrampoline.v3	/^	def makeTrampoline(probe: WhammProbe, ic: X86_64InterpreterCode) {$/;"	f
make_new_v3_stack	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^def make_new_v3_stack(func: Function) -> WasmStack {$/;"	m
map	$VIRGIL_WIZARD/src/engine/compiler/RegSet.v3	/^	def var map: Array<u5>; \/\/ maps a {reg.index} to an index into {regs}.$/;"	d
map	$VIRGIL_WIZARD/src/modules/DynInstrModule.v3	/^	private var map: HashMap<string, HostFunction>;$/;"	d
map	$VIRGIL_WIZARD/src/modules/HostModuleBuilder.v3	/^	def map = Strings.newMap<Exportable>();$/;"	d
map	$VIRGIL_WIZARD/src/modules/ModuleRegistry.v3	/^	private def map = Strings.newMap<(HostModule, bool)>();$/;"	d
map	$VIRGIL_WIZARD/src/modules/wasi/WspOneModule.v3	/^def map = Strings.newMap<HostAdapter_of<WasiInstance>>();$/;"	d
mapClockId	$VIRGIL_WIZARD/src/modules/wasi/x86-64-linux/WspOneModule-x86-64-linux.v3	/^	def mapClockId(clock_id: int) -> int {$/;"	m
mapCode	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Target.v3	/^	def mapCode(asm: X86_64Assembler, prepare: (X86_64Assembler, u64) -> void) -> Mapping {$/;"	f
mapErrno	$VIRGIL_WIZARD/src/modules/wasi/x86-64-linux/WspOneModule-x86-64-linux.v3	/^	def mapErrno(errno: i64) -> int {$/;"	m
mapFuncDecl	$VIRGIL_WIZARD/src/engine/Instantiator.v3	/^	def mapFuncDecl(func_index: int) -> FuncDecl {$/;"	m
mapInPlace	$VIRGIL_WIZARD/src/util/ArrayUtil.v3	/^	def mapInPlace<T>(array: Array<T>, f: T -> T) -> Array<T> {$/;"	f
mapping	$VIRGIL_WIZARD/src/engine/native/NativeMemory.v3	/^	var mapping: Mapping;$/;"	d
mapping	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def mapping: Mapping;$/;"	d
mapping	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	var mapping: Mapping;$/;"	d
mark	$VIRGIL_WIZARD/src/engine/Trace.v3	/^	def mark() -> this {$/;"	m
mark	$VIRGIL_WIZARD/src/util/CfgBuilder.v3	/^	var mark: int;$/;"	d
markpos	$VIRGIL_WIZARD/src/engine/Trace.v3	/^	var markpos: int;$/;"	d
mask	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^enum BpTableFlag(mask: byte) {$/;"	d
mask_double_2_power_52	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def mask_double_2_power_52: (u64, u64) = (0x4330000000000000, 0x4330000000000000);$/;"	d
mask_f64x2_convert_low_i32x4_u_int	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def mask_f64x2_convert_low_i32x4_u_int: (u64, u64) = (0x4330000043300000, 0x4330000043300000);$/;"	d
mask_i16x8_splat_0x0001	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def mask_i16x8_splat_0x0001: (u64, u64) = (0x0001000100010001, 0x0001000100010001);$/;"	d
mask_i8x16_popcnt	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def mask_i8x16_popcnt: (u64, u64) = (0x0302020102010100, 0x0403030203020201);$/;"	d
mask_i8x16_splat_0x01	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def mask_i8x16_splat_0x01: (u64, u64) = (0x0101010101010101, 0x0101010101010101);$/;"	d
mask_i8x16_splat_0x0f	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def mask_i8x16_splat_0x0f: (u64, u64) = (0x0F0F0F0F0F0F0F0F, 0x0F0F0F0F0F0F0F0F);$/;"	d
mask_i8x16_swizzle	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def mask_i8x16_swizzle: (u64, u64) = (0x7070707070707070, 0x7070707070707070);$/;"	d
mask_int32_max_as_double	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def mask_int32_max_as_double: (u64, u64) = (0x41dfffffffc00000, 0x41dfffffffc00000);$/;"	d
mask_shift	$VIRGIL_WIZARD/src/util/StringSet.v3	/^	private def mask_shift = StringSetUtil.computeMaskAndShift(max);$/;"	d
mask_uint32_max_as_double	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def mask_uint32_max_as_double: (u64, u64) = (0x41efffffffe00000, 0x41efffffffe00000);$/;"	d
mask_v128_double_absolute_constant	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def mask_v128_double_absolute_constant: (u64, u64) = (0x7FFFFFFFFFFFFFFF, 0x7FFFFFFFFFFFFFFF);$/;"	d
mask_v128_double_neg_constant	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def mask_v128_double_neg_constant: (u64, u64) = (0x8000000000000000, 0x8000000000000000);$/;"	d
mask_v128_float_absolute_constant	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def mask_v128_float_absolute_constant: (u64, u64) = (0x7FFFFFFF7FFFFFFF, 0x7FFFFFFF7FFFFFFF);$/;"	d
mask_v128_float_neg_constant	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def mask_v128_float_neg_constant: (u64, u64) = (0x8000000080000000, 0x8000000080000000);$/;"	d
masm	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^class SpcMoveResolver(masm: MacroAssembler) {$/;"	d
matchBlockEnd	$VIRGIL_WIZARD/src/monitors/WhammMonitor.v3	/^	def matchBlockEnd(pc: int) {$/;"	m
matchBlockStart	$VIRGIL_WIZARD/src/monitors/WhammMonitor.v3	/^	def matchBlockStart(pc: int) {$/;"	m
matchBlockStartAndEnd	$VIRGIL_WIZARD/src/monitors/WhammMonitor.v3	/^	def matchBlockStartAndEnd(pc: int, op: Opcode) {$/;"	m
matchBlocks	$VIRGIL_WIZARD/src/monitors/WhammMonitor.v3	/^	def matchBlocks = wm.blockStarts != null || wm.blockEnds != null;$/;"	d
matchRtt	$VIRGIL_WIZARD/src/engine/Runtime.v3	/^	def matchRtt(obj: Object, rtt: HeapTypeDecl) -> bool {$/;"	f
matchRule	$VIRGIL_WIZARD/src/monitors/WhammMonitor.v3	/^	def matchRule(pc: int, opcode: Opcode, rule: WhammRule) {$/;"	m
matcher	$VIRGIL_WIZARD/src/util/DeclFilter.v3	/^	case Glob(matcher: GlobMatcher);$/;"	d
matches	$VIRGIL_WIZARD/src/util/DeclFilter.v3	/^	def matches(name: string, index: int) -> bool {$/;"	m
matchesStr	$VIRGIL_WIZARD/src/util/DeclFilter.v3	/^	def matchesStr(mname: string, fname: string) -> bool {$/;"	m
max	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case Set(max: u64);$/;"	d
max	$VIRGIL_WIZARD/src/modules/wasi/WasiFdMap.v3	/^class WasiFdMap(max: int) {$/;"	d
max	$VIRGIL_WIZARD/src/util/DeclFilter.v3	/^	case Sequence(min: u32, max: u32);$/;"	d
max	$VIRGIL_WIZARD/src/util/FileDescriptorMap.v3	/^class FileDescriptorMap(max: int) {$/;"	d
max	$VIRGIL_WIZARD/src/util/PrefixTrie.v3	/^	def var max: int;	\/\/ maximum sequence length$/;"	d
max	$VIRGIL_WIZARD/src/util/StringSet.v3	/^class StringSet(max: int) {$/;"	d
maxDepth	$VIRGIL_WIZARD/src/monitors/ProfileMonitor.v3	/^	var maxDepth: int = -1;$/;"	d
max_array_length	$VIRGIL_WIZARD/src/engine/Limits.v3	/^	var max_array_length = 10000000u;$/;"	d
max_call_depth	$VIRGIL_WIZARD/src/engine/Limits.v3	/^	var max_call_depth = 10000u;$/;"	d
max_data_segment_size	$VIRGIL_WIZARD/src/engine/Limits.v3	/^	var max_data_segment_size = 1024u * 1048576u;$/;"	d
max_func_size	$VIRGIL_WIZARD/src/engine/Limits.v3	/^        var max_func_size = 7654321u;$/;"	d
max_fw_index	$VIRGIL_WIZARD/src/engine/WasmParser.v3	/^	var max_fw_index = if(module != null, module.heaptypes.length);$/;"	d
max_grow_size	$VIRGIL_WIZARD/src/engine/Limits.v3	/^	var max_grow_size = 1000000;$/;"	d
max_legal_index	$VIRGIL_WIZARD/src/engine/WasmParser.v3	/^	var max_legal_index = max_fw_index;$/;"	d
max_legal_memory_pages_32	$VIRGIL_WIZARD/src/engine/Limits.v3	/^        var max_legal_memory_pages_32 = 0x1_0000uL;$/;"	d
max_legal_memory_pages_64	$VIRGIL_WIZARD/src/engine/Limits.v3	/^        var max_legal_memory_pages_64 = 0x1_0000_0000_0000uL;$/;"	d
max_log2_page_size	$VIRGIL_WIZARD/src/engine/Limits.v3	/^	var max_log2_page_size = 16u;$/;"	d
max_module_size	$VIRGIL_WIZARD/src/engine/Limits.v3	/^	var max_module_size = 1073741824u;$/;"	d
max_num_catches	$VIRGIL_WIZARD/src/engine/Limits.v3	/^	var max_num_catches = 10000u;$/;"	d
max_num_data_segments	$VIRGIL_WIZARD/src/engine/Limits.v3	/^        var max_num_data_segments = 100000u;$/;"	d
max_num_exports	$VIRGIL_WIZARD/src/engine/Limits.v3	/^        var max_num_exports = 100000u;$/;"	d
max_num_func_params	$VIRGIL_WIZARD/src/engine/Limits.v3	/^        var max_num_func_params = 1000u;$/;"	d
max_num_func_results	$VIRGIL_WIZARD/src/engine/Limits.v3	/^        var max_num_func_results = 1000u;$/;"	d
max_num_functions	$VIRGIL_WIZARD/src/engine/Limits.v3	/^        var max_num_functions = 1000000u;$/;"	d
max_num_globals	$VIRGIL_WIZARD/src/engine/Limits.v3	/^        var max_num_globals = 1000000u;$/;"	d
max_num_imports	$VIRGIL_WIZARD/src/engine/Limits.v3	/^        var max_num_imports = 100000u;$/;"	d
max_num_locals	$VIRGIL_WIZARD/src/engine/Limits.v3	/^        var max_num_locals = 50000u;$/;"	d
max_num_memories	$VIRGIL_WIZARD/src/engine/Limits.v3	/^	var max_num_memories = 1u;$/;"	d
max_num_select_results	$VIRGIL_WIZARD/src/engine/Limits.v3	/^        var max_num_select_results = 1u;$/;"	d
max_num_struct_fields	$VIRGIL_WIZARD/src/engine/Limits.v3	/^        var max_num_struct_fields = 100000u;$/;"	d
max_num_table_entries	$VIRGIL_WIZARD/src/engine/Limits.v3	/^        var max_num_table_entries = 10000000u;$/;"	d
max_num_tables	$VIRGIL_WIZARD/src/engine/Limits.v3	/^	var max_num_tables = 100000u;$/;"	d
max_num_tags	$VIRGIL_WIZARD/src/engine/Limits.v3	/^        var max_num_tags = 1000000u;$/;"	d
max_num_types	$VIRGIL_WIZARD/src/engine/Limits.v3	/^        var max_num_types = 1000000u;$/;"	d
max_pages	$VIRGIL_WIZARD/src/monitors/MemStatsMonitor.v3	/^	var max_pages: u64;$/;"	d
max_rtt_depth	$VIRGIL_WIZARD/src/engine/Limits.v3	/^	var max_rtt_depth = 65535u;	\/\/ TODO: enforce$/;"	d
max_supertypes	$VIRGIL_WIZARD/src/engine/Limits.v3	/^	var max_supertypes = 1u;$/;"	d
max_table_size	$VIRGIL_WIZARD/src/engine/Limits.v3	/^        var max_table_size = 10000000u;$/;"	d
maximum	$VIRGIL_WIZARD/src/engine/Module.v3	/^type SizeConstraint(is64: bool, initial: u64, maximum: Max) #unboxed {$/;"	d
maxv	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def maxv: u64 = if(isI64,$/;"	d
maybeRefTag	$VIRGIL_WIZARD/src/engine/Tagging.v3	/^	def maybeRefTag(tag: byte) -> bool {$/;"	m
mem	$VIRGIL_WIZARD/src/engine/x86-64/V3Offsets.v3	/^	private def mem = NativeWasmMemory.new(null);$/;"	d
mem0_base	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	var mem0_base: Reg;$/;"	d
mem0_base	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^	var mem0_base: Reg;$/;"	d
mem0_base	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	+8	mem0_base	: i64;	\/\/ Pointer$/;"	d
mem0_base_slot	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	var mem0_base_slot: MasmAddr;$/;"	d
mem0_base_slot	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^	var mem0_base_slot: MasmAddr;$/;"	d
mem_access_kind	$VIRGIL_WIZARD/src/engine/Sidetable.v3	/^	+0	mem_access_kind:	MemAccessKind;$/;"	d
mem_index	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^private class MemoryInitProbe(handler: EventHandler, mem_index: u31, data: Array<u8>) extends Probe {$/;"	d
memories	$VIRGIL_WIZARD/src/engine/Instance.v3	/^	def memories = Array<Memory>.new(module.memories.length);$/;"	d
memories	$VIRGIL_WIZARD/src/engine/Module.v3	/^	def memories = Vector<MemoryDecl>.new();$/;"	d
memory	$VIRGIL_WIZARD/src/engine/Debug.v3	/^	def memory = false;$/;"	d
memory	$VIRGIL_WIZARD/src/engine/Trace.v3	/^	var memory = false;$/;"	d
memory	$VIRGIL_WIZARD/src/engine/TraceOptions.v3	/^	memory('m', "memory accesses"),$/;"	d
memory	$VIRGIL_WIZARD/src/modules/DynInstrModule.v3	/^	private var memory: Memory;$/;"	d
memory	$VIRGIL_WIZARD/src/modules/HostModuleBuilder.v3	/^	var memory: Memory;$/;"	d
memory	$VIRGIL_WIZARD/src/modules/wizeng/WizengModule.v3	/^	var memory: Memory;$/;"	d
memory64	$VIRGIL_WIZARD/src/engine/Tuning.v3	/^	def memory64 = false;$/;"	d
memoryFilter	$VIRGIL_WIZARD/src/util/BasicTracing.v3	/^	var memoryFilter: DeclFilter;$/;"	d
memory_index	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^type MemArg(flags: u32, memory_index: u31, offset: u64) #unboxed { }$/;"	d
memory_index	$VIRGIL_WIZARD/src/engine/Module.v3	/^	var memory_index = -1;$/;"	d
memory_index	$VIRGIL_WIZARD/src/monitors/ModuleInstrumenter.v3	/^private class MemoryGrowProbe(memory_index: u31, f: (DynamicLoc, Memory, u32) -> ProbeAction) extends Probe {$/;"	d
memory_index	$VIRGIL_WIZARD/src/util/BasicTracing.v3	/^class MemoryTraceGrowProbe(memory_index: u31) extends Probe {$/;"	d
mems	$VIRGIL_WIZARD/src/engine/x86-64/V3Offsets.v3	/^def mems = Array<Memory>.new(2);$/;"	d
merge	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	var merge: Array<SpcVal>;$/;"	d
mergeBlock	$VIRGIL_WIZARD/src/util/ControlStack.v3	/^	var mergeBlock: (ControlStack<B>, B, B) -> B = ControlStack<B>.defaultMergeBlock;$/;"	d
mergeCfgBlock	$VIRGIL_WIZARD/src/util/CfgBuilder.v3	/^	private def mergeCfgBlock(cs: ControlStack<CfgBlock>, from: CfgBlock, to: CfgBlock) -> CfgBlock {$/;"	m
merge_count	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	var merge_count: byte;$/;"	d
merge_state	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^type SpcHandlerInfo(is_dummy: bool, dest_label: MasmLabel, stub_label: MasmLabel, merge_state: Array<SpcVal>);$/;"	d
metaRef	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^	def var metaRef: FrameAccessorRef;$/;"	d
min	$VIRGIL_WIZARD/src/engine/Module.v3	/^	def min(that: u64) -> u64 {$/;"	m
min	$VIRGIL_WIZARD/src/util/DeclFilter.v3	/^	case Sequence(min: u32, max: u32);$/;"	d
minorVersion	$VIRGIL_WIZARD/src/engine/Version.v3	/^	var minorVersion: int;$/;"	d
minus1	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def minus1: u64 = if(isF64, FloatUtils.d_minus1, FloatUtils.f_minus1);$/;"	d
minv	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def minv: u64 = if(isI64, \/\/ XXX: share these constants with V3 interpreter$/;"	d
mm	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	var mm: ModuleInstrumenter;$/;"	d
mmap_reserve	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Target.v3	/^	def mmap_reserve(size: u64, prot: int) -> Mapping {$/;"	f
mmasm	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def mmasm = X86_64MacroAssembler.new(w, X86_64MasmRegs.CONFIG);$/;"	d
mnemonic	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^enum Opcode(prefix: u8, code: u16, mnemonic: string, imms: Array<ImmKind>, sig: SigDecl) {$/;"	d
mod	$VIRGIL_WIZARD/src/monitors/R3BackEndMonitor.v3	/^	var mod: Module;$/;"	d
mode	$VIRGIL_WIZARD/src/engine/Module.v3	/^class ElemDecl(elemtype: ValueType, mode: SegmentMode, details: ElemDetails) {$/;"	d
modes	$VIRGIL_WIZARD/src/engine/Execute.v3	/^	private var modes: List<(string, ExecutionStrategy, string)>;$/;"	d
module	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^class BpFsmCallback(module: Module) {$/;"	d
module	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^class CodeValidator(extensions: Extension.set, limits: Limits, module: Module, err: ErrorGen) {$/;"	d
module	$VIRGIL_WIZARD/src/engine/Instance.v3	/^class Instance(module: Module, imports: Array<Exportable>) {$/;"	d
module	$VIRGIL_WIZARD/src/engine/Instantiator.v3	/^class Instantiator(extensions: Extension.set, module: Module, var imports: Array<Exportable>, error: ErrorGen) { \/\/ TODO: s\/error\/err$/;"	d
module	$VIRGIL_WIZARD/src/engine/Meta.v3	/^class ModuleRef(module: Module) extends HostObject {$/;"	d
module	$VIRGIL_WIZARD/src/engine/Module.v3	/^type NamedModule(path: string, name: string, module: Module);$/;"	d
module	$VIRGIL_WIZARD/src/engine/NameSection.v3	/^	def module: Module;$/;"	d
module	$VIRGIL_WIZARD/src/engine/WasmParser.v3	/^class WasmParser(extensions: Extension.set, limits: Limits, module: Module,$/;"	d
module	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	var module: Module;$/;"	d
module	$VIRGIL_WIZARD/src/engine/x86-64/V3Offsets.v3	/^	private def module = Module.new("<null>");$/;"	d
module	$VIRGIL_WIZARD/src/modules/DynInstrModule.v3	/^	def module: Module;$/;"	d
module	$VIRGIL_WIZARD/src/modules/HostModuleBuilder.v3	/^	private var module = HostModuleOf<C>.new(name, tnew, tbind);$/;"	d
module	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^private class DispatchFunctionBytecodeVisitor(module: Module, bi: BytecodeIterator, counter: CountProbe) extends BytecodeVisitor {$/;"	d
module	$VIRGIL_WIZARD/src/monitors/CallsMonitor.v3	/^private class FuncStats(module: Module, func: FuncDecl) {$/;"	d
module	$VIRGIL_WIZARD/src/monitors/ConstMonitor.v3	/^private class FuncArgsEntry(module: Module, func: FuncDecl) extends Probe {$/;"	d
module	$VIRGIL_WIZARD/src/monitors/ControlInstrumenter.v3	/^	private var module: Module;$/;"	d
module	$VIRGIL_WIZARD/src/monitors/CoverageMonitor.v3	/^private class CoverageMonitorProbe(module: Module, func: FuncDecl, monitor: CoverageMonitor, start: int) extends Probe {$/;"	d
module	$VIRGIL_WIZARD/src/monitors/FuncProfileMonitor.v3	/^private class EnterProbe(module: Module, func: FuncDecl) extends Probe {$/;"	d
module	$VIRGIL_WIZARD/src/monitors/InstrCountMonitor.v3	/^class InstrCountInstrumenter(module: Module) extends BytecodeVisitor {$/;"	d
module	$VIRGIL_WIZARD/src/monitors/LoopMonitor.v3	/^private class LmEntry(module: Module, func: FuncDecl, depth: int, pc: int) extends CountProbe {$/;"	d
module	$VIRGIL_WIZARD/src/monitors/LoopTraceMonitor.v3	/^type TraceAnchorLoc(module: Module, func: FuncDecl, pc: int) {$/;"	d
module	$VIRGIL_WIZARD/src/monitors/ModuleInstrumenter.v3	/^private class GlobalVisitor(module: Module, f: DynamicLoc -> ProbeAction, isWrite: bool, targetIndex: u31) extends BytecodeVisitor {$/;"	d
module	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^	def var module: Module;$/;"	d
module	$VIRGIL_WIZARD/src/util/BytecodeInstrumenter.v3	/^class BytecodeInstrumenter(module: Module) extends BytecodeVisitor {$/;"	d
moduleFilter	$VIRGIL_WIZARD/src/util/BasicTracing.v3	/^	var moduleFilter: DeclFilter;$/;"	d
module_name	$VIRGIL_WIZARD/src/engine/Module.v3	/^class ImportInfo(module_name: string, field_name: string, import_index: u31) {$/;"	d
module_name	$VIRGIL_WIZARD/src/engine/NameSection.v3	/^	private var module_name: string;$/;"	d
monitor	$VIRGIL_WIZARD/src/monitors/CoverageMonitor.v3	/^private class CoverageMonitorProbe(module: Module, func: FuncDecl, monitor: CoverageMonitor, start: int) extends Probe {$/;"	d
monitor	$VIRGIL_WIZARD/src/monitors/MonitorRegistry.v3	/^class MonitorRegistryEntry(name: string, help: string, monitor: Monitor) {$/;"	d
monitor_	$VIRGIL_WIZARD/src/monitors/AllocMonitor.v3	/^def monitor_ = MonitorRegistry.add($/;"	d
monitor_	$VIRGIL_WIZARD/src/monitors/BranchMonitor.v3	/^def monitor_ = MonitorRegistry.add($/;"	d
monitor_	$VIRGIL_WIZARD/src/monitors/BreakpointMonitor.v3	/^def monitor_ = MonitorRegistry.add($/;"	d
monitor_	$VIRGIL_WIZARD/src/monitors/CallsMonitor.v3	/^def monitor_ = MonitorRegistry.add($/;"	d
monitor_	$VIRGIL_WIZARD/src/monitors/ConstMonitor.v3	/^def monitor_ = MonitorRegistry.add($/;"	d
monitor_	$VIRGIL_WIZARD/src/monitors/ControlMonitor.v3	/^def monitor_ = MonitorRegistry.add($/;"	d
monitor_	$VIRGIL_WIZARD/src/monitors/CoverageMonitor.v3	/^def monitor_ = MonitorRegistry.add($/;"	d
monitor_	$VIRGIL_WIZARD/src/monitors/FuncProfileMonitor.v3	/^def monitor_ = MonitorRegistry.add($/;"	d
monitor_	$VIRGIL_WIZARD/src/monitors/GlobalsMonitor.v3	/^def monitor_ = MonitorRegistry.add($/;"	d
monitor_	$VIRGIL_WIZARD/src/monitors/HotnessMonitor.v3	/^def monitor_ = MonitorRegistry.add($/;"	d
monitor_	$VIRGIL_WIZARD/src/monitors/LoopMonitor.v3	/^def monitor_ = MonitorRegistry.add($/;"	d
monitor_	$VIRGIL_WIZARD/src/monitors/LoopTraceMonitor.v3	/^def monitor_ = MonitorRegistry.add($/;"	d
monitor_	$VIRGIL_WIZARD/src/monitors/MemStatsMonitor.v3	/^def monitor_ = MonitorRegistry.add($/;"	d
monitor_	$VIRGIL_WIZARD/src/monitors/OpcodeMonitor.v3	/^def monitor_ = MonitorRegistry.add($/;"	d
monitor_	$VIRGIL_WIZARD/src/monitors/ProfileMonitor.v3	/^def monitor_ = MonitorRegistry.add($/;"	d
monitor_	$VIRGIL_WIZARD/src/monitors/TimeoutMonitor.v3	/^def monitor_ = MonitorRegistry.add($/;"	d
monitor_	$VIRGIL_WIZARD/src/monitors/TracePointMonitor.v3	/^def monitor_ = MonitorRegistry.add($/;"	d
monitor_	$VIRGIL_WIZARD/src/monitors/debug/StackCheck.v3	/^def monitor_ = MonitorRegistry.add($/;"	d
monitors	$VIRGIL_WIZARD/src/monitors/MonitorOptions.v3	/^	private var monitors = Vector<Monitor>.new();$/;"	d
monotonic	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	monotonic,$/;"	d
more	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	var more = true;$/;"	d
more	$VIRGIL_WIZARD/src/engine/BytecodeIterator.v3	/^	def more() -> bool {$/;"	m
more	$VIRGIL_WIZARD/src/util/BasicBlockIterator.v3	/^	def more() -> bool {$/;"	m
mov	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	private def mov(kind: ValueKind, dst: MoveNode, src: MoveNode) {$/;"	m
mov_m_s	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def mov_m_s = if(isF64, X86_64Assembler.movsd_m_s, X86_64Assembler.movss_m_s);$/;"	d
mov_r_i	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def mov_r_i(asm: X86_64Assembler, r: X86_64Gpr, v: u64) {$/;"	m
mov_s_i	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def mov_s_i(asm: X86_64Assembler, s: X86_64Xmmr, v: u64, scratch: X86_64Gpr) {$/;"	m
mov_s_r	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def mov_s_r = if(isF64, X86_64Assembler.movq_s_r, X86_64Assembler.movd_s_r);$/;"	d
moves	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	private var moves = Array<MoveNode>.new(16);$/;"	d
msg	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	case Error(error: WasmError, pc: int, msg: string) { }$/;"	d
msg	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^enum WspOneErrno(code: u16, msg: string) {$/;"	d
mtim	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^        mtim,$/;"	d
mtim_now	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^        mtim_now$/;"	d
multiMemory	$VIRGIL_WIZARD/src/engine/Tuning.v3	/^	def multiMemory = false;$/;"	d
multiTier	$VIRGIL_WIZARD/src/engine/Tuning.v3	/^	def multiTier = false;		\/\/ for multi-tier execution$/;"	d
mutable	$VIRGIL_WIZARD/src/engine/Module.v3	/^class GlobalDecl(valtype: ValueType, mutable: bool, init: InitExpr) extends Decl {$/;"	d
mutable	$VIRGIL_WIZARD/src/engine/Type.v3	/^type StorageType(valtype: ValueType, pack: Packedness, mutable: bool) { }$/;"	d
n_binds	$VIRGIL_WIZARD/src/engine/Sidetable.v3	/^	+0	n_binds:	i32;$/;"	d
n_handlers	$VIRGIL_WIZARD/src/engine/Sidetable.v3	/^	+4	n_handlers:	i32;$/;"	d
name	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^type Value;$/;"	d
name	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^enum BpFsmState {$/;"	d
name	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^type BpCatchCode {$/;"	d
name	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^type CodeValidatorResult {$/;"	d
name	$VIRGIL_WIZARD/src/engine/Execute.v3	/^type Result {$/;"	d
name	$VIRGIL_WIZARD/src/engine/Extension.v3	/^enum Extension(short_name: string, help: string) {$/;"	d
name	$VIRGIL_WIZARD/src/engine/Host.v3	/^type HostResult {$/;"	d
name	$VIRGIL_WIZARD/src/engine/Instantiator.v3	/^class ImportProcessor(name: string) {$/;"	d
name	$VIRGIL_WIZARD/src/engine/Metrics.v3	/^class Metric(name: string, units: string, help: string) {$/;"	d
name	$VIRGIL_WIZARD/src/engine/Module.v3	/^type SegmentMode {$/;"	d
name	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^enum OpcodeAttribute {$/;"	d
name	$VIRGIL_WIZARD/src/engine/Sidetable.v3	/^enum StructAccessKind {$/;"	d
name	$VIRGIL_WIZARD/src/engine/TraceOptions.v3	/^enum TraceOption(ch: byte, help: string) {$/;"	d
name	$VIRGIL_WIZARD/src/engine/Trap.v3	/^enum TrapReason {$/;"	d
name	$VIRGIL_WIZARD/src/engine/Type.v3	/^type ValueType {$/;"	d
name	$VIRGIL_WIZARD/src/engine/Value.v3	/^type Value {$/;"	d
name	$VIRGIL_WIZARD/src/engine/WasmParser.v3	/^type SuspensionHandler {$/;"	d
name	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^type ThrowResult {$/;"	d
name	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^enum MasmBrCond		(zero: bool, 	i32: bool) {$/;"	d
name	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^enum SpillMode(free_regs: bool, remember_stored: bool) {$/;"	d
name	$VIRGIL_WIZARD/src/engine/v3/V3Target.v3	/^type TargetOsrInfo #unboxed { }$/;"	d
name	$VIRGIL_WIZARD/src/engine/x86-64/X86_64PreGenStubs.v3	/^	name: string,$/;"	d
name	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def name: string;$/;"	d
name	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^enum X86_64FrameState {$/;"	d
name	$VIRGIL_WIZARD/src/modules/HostModuleBuilder.v3	/^private type ClosureEntry<C>(name: string, sig: SigDecl, cnew: C -> (Range<Value> -> HostResult)) #unboxed;$/;"	d
name	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^enum WaliErrno(code: byte) {$/;"	d
name	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^enum wasi_filetype(code: byte) {$/;"	d
name	$VIRGIL_WIZARD/src/modules/wizeng/WizengModule.v3	/^enum WizengExports(sig: SigDecl, invoke: (WizengModule, Range<Value>) -> HostResult) {$/;"	d
name	$VIRGIL_WIZARD/src/monitors/AllocMonitor.v3	/^type AllocStats {$/;"	d
name	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^private type TraceEntry {$/;"	d
name	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^type Info {$/;"	d
name	$VIRGIL_WIZARD/src/monitors/LoopTraceMonitor.v3	/^type TraceEntry #unboxed {$/;"	d
name	$VIRGIL_WIZARD/src/monitors/MonitorRegistry.v3	/^class MonitorRegistryEntry(name: string, help: string, monitor: Monitor) {$/;"	d
name	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^private enum CallKind {INT, EXT}$/;"	d
name	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^type WasmEvent {$/;"	d
name	$VIRGIL_WIZARD/src/util/CfgPrinter.v3	/^enum CfgEdgeChar {$/;"	d
name	$VIRGIL_WIZARD/src/util/DeclFilter.v3	/^type Matcher {$/;"	d
name	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^enum WasmError {$/;"	d
name	$VIRGIL_WIZARD/src/util/OptionsRegistry.v3	/^class OptionGroup(name: string, o: BasicOptions) {$/;"	d
name	$VIRGIL_WIZARD/src/util/Palette.v3	/^enum Color(defstr: string) {$/;"	d
name	$VIRGIL_WIZARD/src/util/TraceUtil.v3	/^enum Justification { LEFT, CENTER_L, CENTER_R, RIGHT }$/;"	d
name	$VIRGIL_WIZARD/src/util/Whamm.v3	/^type WhammParam {$/;"	d
nameMap	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	private var nameMap: HashMap<string, Opcode>;$/;"	d
name_color	$VIRGIL_WIZARD/src/util/TraceUtil.v3	/^	var name_color: Color;$/;"	d
named_modules	$VIRGIL_WIZARD/src/modules/ModuleLinker.v3	/^	def named_modules = Vector<NamedModule>.new();$/;"	d
named_modules	$VIRGIL_WIZARD/src/monitors/WhammMonitor.v3	/^class WhammMonitor(named_modules: Array<NamedModule>) extends Monitor {$/;"	d
names	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	var names = !TraceOptions.NO_NAMES.get();$/;"	d
names	$VIRGIL_WIZARD/src/engine/Module.v3	/^	var names: NameSection;$/;"	d
names	$VIRGIL_WIZARD/src/engine/compiler/RegSet.v3	/^class RegSet(regs: Array<Reg>, names: Array<string>) {$/;"	d
names	$VIRGIL_WIZARD/src/util/TraceUtil.v3	/^class TraceTable(names: Array<string>) {$/;"	d
nargs	$VIRGIL_WIZARD/src/engine/Sidetable.v3	/^type SidetableResumeEntry(nargs: int, nhandlers: int) #unboxed;$/;"	d
nargs_pos	$VIRGIL_WIZARD/src/engine/Sidetable.v3	/^	def nargs_pos = 0;$/;"	d
negate	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def negate(cond: MasmBrCond) -> MasmBrCond {$/;"	m
nested_start	$VIRGIL_WIZARD/src/monitors/FuncProfileMonitor.v3	/^	var nested_start: u64;$/;"	d
new	$VIRGIL_WIZARD/src/SpectestMode.v3	/^	new() {$/;"	f
new	$VIRGIL_WIZARD/src/WasmMode.v3	/^	new() {$/;"	f
new	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	new(extensions: Extension.set, limits: Limits, err: ErrorGen, callback: BpFsmCallback)$/;"	m
new	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	new() {$/;"	f
new	$VIRGIL_WIZARD/src/engine/CodePtr.v3	/^	new(data: Array<byte>) super(data) { }$/;"	m
new	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	new() {$/;"	m
new	$VIRGIL_WIZARD/src/engine/Execute.v3	/^	new() {$/;"	f
new	$VIRGIL_WIZARD/src/engine/Host.v3	/^	new(name, sig: SigDecl, invoke) super(sig) { }$/;"	m
new	$VIRGIL_WIZARD/src/engine/Instance.v3	/^	new(stack) { }$/;"	m
new	$VIRGIL_WIZARD/src/engine/Memory.v3	/^	new() {$/;"	m
new	$VIRGIL_WIZARD/src/engine/Metrics.v3	/^	new(name: string, n, d, help: string)$/;"	m
new	$VIRGIL_WIZARD/src/engine/NameSection.v3	/^	new(module, payload: Array<byte>) super("name", payload) { }$/;"	m
new	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	new() {$/;"	f
new	$VIRGIL_WIZARD/src/engine/Sidetable.v3	/^	new() {$/;"	m
new	$VIRGIL_WIZARD/src/engine/Table.v3	/^	new() {$/;"	m
new	$VIRGIL_WIZARD/src/engine/Type.v3	/^	new(final: bool, supertypes: Array<HeapType>, sig_ref) super(final, supertypes) {}$/;"	m
new	$VIRGIL_WIZARD/src/engine/Value.v3	/^	new(decl: StructDecl, vals: Array<Value>) super(decl, vals) { }$/;"	m
new	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	new() {$/;"	m
new	$VIRGIL_WIZARD/src/engine/compiler/RegAlloc.v3	/^	new(poolMap, pools, prev: RegAlloc) {$/;"	m
new	$VIRGIL_WIZARD/src/engine/compiler/RegSet.v3	/^	new() {$/;"	m
new	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	new() {$/;"	m
new	$VIRGIL_WIZARD/src/engine/native/NativeMemory.v3	/^	new(decl: MemoryDecl) super(decl) {$/;"	m
new	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	new(stack, prev) {$/;"	m
new	$VIRGIL_WIZARD/src/engine/v3/V3Memory.v3	/^	new(decl: MemoryDecl) super(decl) {$/;"	m
new	$VIRGIL_WIZARD/src/engine/x86-64/Mmap.v3	/^	new(start, end) { }$/;"	m
new	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^	new(start: Pointer, end: Pointer, header) super(start, end) { }$/;"	m
new	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	new(w, regConfig: RegConfig) super(Target.tagging, regConfig) {$/;"	m
new	$VIRGIL_WIZARD/src/engine/x86-64/X86_64PreGenStubs.v3	/^	new(stubName, frameSize: int) super(Pointer.NULL, Pointer.NULL) { }$/;"	m
new	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	new(stubName) super(Pointer.NULL, Pointer.NULL) { }$/;"	m
new	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	new(size) {$/;"	m
new	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Target.v3	/^	new() {$/;"	f
new	$VIRGIL_WIZARD/src/modules/DynInstrModule.v3	/^	new(name: string, module) super(name) { }$/;"	m
new	$VIRGIL_WIZARD/src/modules/HostModuleBuilder.v3	/^	new(name: string, cnew, cbind) super(name) { }$/;"	m
new	$VIRGIL_WIZARD/src/modules/ModuleRegistry.v3	/^	new(name: string) super(name) { }$/;"	m
new	$VIRGIL_WIZARD/src/modules/wasi/WasiFdMap.v3	/^	new() {$/;"	m
new	$VIRGIL_WIZARD/src/modules/wasi/x86-64-linux/WspOneModule-x86-64-linux.v3	/^    new(new_instance: () -> WasiInstance) super(new_instance) { }$/;"	m
new	$VIRGIL_WIZARD/src/monitors/ControlInstrumenter.v3	/^	new(count) { }$/;"	m
new	$VIRGIL_WIZARD/src/monitors/LoopTraceMonitor.v3	/^	new(trace, module: Module) super(module) { }$/;"	m
new	$VIRGIL_WIZARD/src/monitors/MemStatsMonitor.v3	/^	new(module: Module) super(module) {$/;"	m
new	$VIRGIL_WIZARD/src/monitors/ProfileMonitor.v3	/^	new() {$/;"	m
new	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^	new(module: Module, host_filter: DeclFilter) {$/;"	m
new	$VIRGIL_WIZARD/src/monitors/WhammMonitor.v3	/^	new() {$/;"	m
new	$VIRGIL_WIZARD/src/util/BasicTracing.v3	/^	new(module: Module) super(module) { }$/;"	m
new	$VIRGIL_WIZARD/src/util/CfgBuilder.v3	/^	new() {$/;"	m
new	$VIRGIL_WIZARD/src/util/FileDescriptorMap.v3	/^	new() {$/;"	m
new	$VIRGIL_WIZARD/src/util/PrefixTrie.v3	/^	new(prefix) { }$/;"	m
new	$VIRGIL_WIZARD/src/util/TraceUtil.v3	/^	new() {$/;"	m
new	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	new(app, instance) { }$/;"	m
newAddrOption	$VIRGIL_WIZARD/src/util/OptionsRegistry.v3	/^	def newAddrOption(name: string, defval: u64, help: string) -> Option<u64> {$/;"	m
newBlock	$VIRGIL_WIZARD/src/util/ControlStack.v3	/^	var newBlock: (ControlStack<B>) -> B = ControlStack<B>.defaultNewLabel;$/;"	d
newBoolOption	$VIRGIL_WIZARD/src/util/OptionsRegistry.v3	/^	def newBoolOption(name: string, defval: bool, help: string) -> Option<bool> {$/;"	m
newBranchAndLeaf	$VIRGIL_WIZARD/src/util/PrefixTrie.v3	/^	private def newBranchAndLeaf(seq: Range<K>) -> (PrefixTrieBranch<K, V>, PrefixTrieLeaf<K, V>) {$/;"	m
newCfgBlock	$VIRGIL_WIZARD/src/util/CfgBuilder.v3	/^	private def newCfgBlock(cs: ControlStack<CfgBlock>) -> CfgBlock {$/;"	m
newCompiler	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Target.v3	/^def newCompiler(filename: string) -> X86_64SinglePassCompiler {$/;"	m
newDeclFilterOption	$VIRGIL_WIZARD/src/util/OptionsRegistry.v3	/^	def newDeclFilterOption(name: string, help: string) -> Option<DeclFilter> {$/;"	m
newEmptyOption	$VIRGIL_WIZARD/src/util/OptionsRegistry.v3	/^	def newEmptyOption(name: string, help: string) -> Option<bool> {$/;"	m
newFlag	$VIRGIL_WIZARD/src/util/OptionsRegistry.v3	/^	def newFlag(name: string, onParse: string -> void, help: string) -> Option<bool> {$/;"	m
newGroup	$VIRGIL_WIZARD/src/util/OptionsRegistry.v3	/^	def newGroup(name: string, printHelp: TraceBuilder -> void) -> OptionGroup {$/;"	f
newIntOption	$VIRGIL_WIZARD/src/util/OptionsRegistry.v3	/^	def newIntOption(name: string, defval: int, help: string) -> Option<int> {$/;"	m
newLabel	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def newLabel(create_pos: int) -> MasmLabel {$/;"	m
newLabel	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def newLabel(create_pos: int) -> X86_64MasmLabel {$/;"	m
newLabel	$VIRGIL_WIZARD/src/util/ControlStack.v3	/^	var newLabel: (ControlStack<B>) -> B = ControlStack<B>.defaultNewLabel;$/;"	d
newMainFunc	$VIRGIL_WIZARD/src/monitors/R3BackEndMonitor.v3	/^	private def newMainFunc(v: void, ins: Instance) -> (Function, Array<Value>) {$/;"	m
newMemory	$VIRGIL_WIZARD/src/engine/v3/V3Target.v3	/^	def newMemory = V3Memory.new;$/;"	d
newMemory	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Target.v3	/^	def newMemory = NativeWasmMemory.new;$/;"	d
newOption	$VIRGIL_WIZARD/src/util/OptionsRegistry.v3	/^	def newOption<T>(name: string, defval: T, typename: string, parseFun: string -> T, help: string) -> Option<T> {$/;"	m
newPathOption	$VIRGIL_WIZARD/src/util/OptionsRegistry.v3	/^	def newPathOption(name: string, defval: string, help: string) -> Option<string> {$/;"	m
newProbe	$VIRGIL_WIZARD/src/monitors/HotnessMonitor.v3	/^	def newProbe(f: FuncDecl, op: Opcode, pc: int) -> LocCounter {$/;"	m
newSig	$VIRGIL_WIZARD/src/engine/Type.v3	/^	def newSig = SigDecl.new(true, NO_HEAPTYPES, _, _);$/;"	d
newSizeOption	$VIRGIL_WIZARD/src/util/OptionsRegistry.v3	/^	def newSizeOption(name: string, defval: u32, help: string) -> Option<u32> {$/;"	m
newStringOption	$VIRGIL_WIZARD/src/util/OptionsRegistry.v3	/^	def newStringOption(name: string, defval: string, help: string) -> Option<string> {$/;"	m
newTrapLabel	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	var newTrapLabel: TrapReason -> MasmLabel;$/;"	d
newTrapLabel	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def newTrapLabel(reason: TrapReason) -> MasmLabel {$/;"	m
newWasmStack	$VIRGIL_WIZARD/src/engine/v3/V3Target.v3	/^	def newWasmStack = V3Interpreter.new;$/;"	d
newWasmStack	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Target.v3	/^	def newWasmStack = X86_64StackManager.getFreshStack;$/;"	d
new_funcref	$VIRGIL_WIZARD/src/modules/wizeng/WizengModule.v3	/^	def new_funcref(sig: SigDecl, sig_index: int, args: Range<Value>) -> HostResult {$/;"	m
new_funcs	$VIRGIL_WIZARD/src/engine/Module.v3	/^	var new_funcs: int;$/;"	d
next	$VIRGIL_WIZARD/src/engine/BytecodeIterator.v3	/^	def next() -> this {$/;"	m
next	$VIRGIL_WIZARD/src/engine/Probe.v3	/^	var next: ProbeElem;$/;"	d
next	$VIRGIL_WIZARD/src/engine/compiler/RegAlloc.v3	/^private class SpcRaPoolLink(reg: Reg, var prev: SpcRaPoolLink, var next: SpcRaPoolLink) {$/;"	d
next	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def var next: V3Frame;$/;"	d
next	$VIRGIL_WIZARD/src/engine/x86-64/Redzones.v3	/^class RedZone(start: Pointer, end: Pointer, var prev: RedZone, var next: RedZone) {$/;"	d
next	$VIRGIL_WIZARD/src/util/BasicBlockIterator.v3	/^	def next() -> this {$/;"	m
nextFrame	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	private def nextFrame(caller: V3Frame) -> V3Frame {$/;"	m
nextFrame	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^	def nextFrame(ip: Pointer, sp: Pointer) -> (Pointer, Pointer) {$/;"	m
nextFrame	$VIRGIL_WIZARD/src/engine/x86-64/X86_64PreGenStubs.v3	/^	def nextFrame(ip: Pointer, sp: Pointer) -> (Pointer, Pointer) {$/;"	m
nextFrame	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def nextFrame(ip: Pointer, sp: Pointer) -> (Pointer, Pointer) {$/;"	m
nextFrame	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	def nextFrame(ip: Pointer, sp: Pointer) -> (Pointer, Pointer) {$/;"	m
nextIsBlockStart	$VIRGIL_WIZARD/src/monitors/WhammMonitor.v3	/^	def nextIsBlockStart(pc: int) -> bool {$/;"	m
nextPc	$VIRGIL_WIZARD/src/engine/BytecodeIterator.v3	/^	def nextPc() -> int {$/;"	m
nextProbe	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	def nextProbe: DebugOnceProbe = DebugOnceProbe.new();$/;"	d
next_bi	$VIRGIL_WIZARD/src/monitors/WhammMonitor.v3	/^	def next_bi = BytecodeIterator.new(); \/\/ an auxilliary bytecode iterator used to find the next bytecode.$/;"	d
next_error_pos	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	private var next_error_pos = NO_ADDR;$/;"	d
next_replay_context	$VIRGIL_WIZARD/src/monitors/R3BackEndMonitor.v3	/^	var next_replay_context: Array<int>;$/;"	d
nhandlers	$VIRGIL_WIZARD/src/engine/Sidetable.v3	/^type SidetableResumeEntry(nargs: int, nhandlers: int) #unboxed;$/;"	d
nhandlers_pos	$VIRGIL_WIZARD/src/engine/Sidetable.v3	/^	def nhandlers_pos = 1;$/;"	d
nlink	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	+24	nlink:		u32;$/;"	d
noGC	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	def noGC(opcode: Opcode) -> bool {$/;"	m
noSkipWs	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^	private def noSkipWs(text_reader: TextReader) { }$/;"	m
nonblock	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^    nonblock,$/;"	d
nonzero	$VIRGIL_WIZARD/src/monitors/ControlInstrumenter.v3	/^def nonzero(x: Array<u64>) -> bool {$/;"	m
normalize_path	$VIRGIL_WIZARD/src/modules/wasi/PathResolver.v3	/^	def normalize_path(path: string) -> (string) {$/;"	f
normalize_path	$VIRGIL_WIZARD/src/modules/wasi/x86-64-linux/WspOnePathResolver-x86-64-linux.v3	/^	def normalize_path = PathResolver.normalize_path;$/;"	d
notConst	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def notConst() -> SpcVal {$/;"	m
not_taken	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^enum BrRepush(taken: bool, not_taken: bool) {$/;"	d
null1	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	def null1() -> bool { return (flags & 1) != 0; }$/;"	m
null2	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	def null2() -> bool { return (flags & 2) != 0; }$/;"	m
null_taken	$VIRGIL_WIZARD/src/monitors/ControlInstrumenter.v3	/^private class CiBrOnNullProbe(null_taken: bool) extends Probe {$/;"	d
null_taken	$VIRGIL_WIZARD/src/monitors/LoopTraceMonitor.v3	/^private class TraceBrOnNullProbe(trace: TraceBuffer, null_taken: bool) extends Probe {$/;"	d
nullable	$VIRGIL_WIZARD/src/engine/Type.v3	/^	case Ref(nullable: bool, heap: HeapType);$/;"	d
nullable	$VIRGIL_WIZARD/src/monitors/ControlInstrumenter.v3	/^private class CiBrOnCastProbe(nullable: bool, ht_val: int, success_taken: bool) extends Probe {$/;"	d
nullable	$VIRGIL_WIZARD/src/monitors/LoopTraceMonitor.v3	/^private class TraceBrOnCastProbe(trace: TraceBuffer, nullable: bool, ht_val: int, success_taken: bool) extends Probe {$/;"	d
numFrameVars	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^	def numFrameVars() -> int;$/;"	m
numFrameVars	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def numFrameVars() -> int {$/;"	m
numFrameVars	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	def numFrameVars() -> int {$/;"	m
numLocals	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^	def numLocals() -> int;$/;"	m
numLocals	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def numLocals() -> int {$/;"	m
numLocals	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	def numLocals() -> int {$/;"	m
numMoves	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	private var numMoves = 0;$/;"	d
numOperands	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^	def numOperands() -> int;$/;"	m
numOperands	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def numOperands() -> int {$/;"	m
numOperands	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	def numOperands() -> int {$/;"	m
numRegPools	$VIRGIL_WIZARD/src/engine/compiler/RegSet.v3	/^class PoolMap(regSet: RegSet, numRegPools: int) {$/;"	d
numRegs	$VIRGIL_WIZARD/src/engine/compiler/RegSet.v3	/^	def numRegs = regSet.regs.length;$/;"	d
numSubPages	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	var numSubPages: int;$/;"	d
num_bytes	$VIRGIL_WIZARD/src/engine/Memory.v3	/^	def var num_bytes: u64;	\/\/ length in bytes$/;"	d
num_copy	$VIRGIL_WIZARD/src/monitors/MemStatsMonitor.v3	/^	var num_copy: u64;$/;"	d
num_fill	$VIRGIL_WIZARD/src/monitors/MemStatsMonitor.v3	/^	var num_fill: u64;$/;"	d
num_grows	$VIRGIL_WIZARD/src/monitors/MemStatsMonitor.v3	/^	var num_grows: u64;$/;"	d
num_init	$VIRGIL_WIZARD/src/monitors/MemStatsMonitor.v3	/^	var num_init: u64;$/;"	d
num_locals	$VIRGIL_WIZARD/src/engine/Module.v3	/^	var num_locals: u16;$/;"	d
num_locals	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^class SpcMerger(state: Array<SpcVal>, num_locals: int, sp: u32, regAlloc: RegAlloc, resolver: SpcMoveResolver) {$/;"	d
num_pages	$VIRGIL_WIZARD/src/engine/Memory.v3	/^	def var num_pages: u64;	\/\/ size in pages$/;"	d
num_slots	$VIRGIL_WIZARD/src/engine/Module.v3	/^	def num_slots() -> int {$/;"	m
num_subpages	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def var num_subpages: int;$/;"	d
num_unrefs	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	var num_unrefs = 0;$/;"	d
object_New	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def object_New(sig: Signature) -> Object;$/;"	m
object_Null	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def object_Null() -> Object;$/;"	m
object_isNull	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def object_isNull(obj: Object) -> bool;$/;"	m
offset	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^type MemArg(flags: u32, memory_index: u31, offset: u64) #unboxed { }$/;"	d
offset	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case ArrayNewElem(t: HeapType.Array, elem_index: int, offset: InitExpr, len: InitExpr);$/;"	d
offset	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^type MasmAddr(base: Reg, offset: int) #unboxed {$/;"	d
offset	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^type EffectiveAddr(oob: bool, is64: bool, base_reg: Reg, index_reg: Reg, offset: u32) #unboxed;$/;"	d
offset	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^case STEP(bytecode: u8, offset: u64, cost: u64, wasm_func_trace: List<WasmFuncTrace>);$/;"	d
offset	$VIRGIL_WIZARD/src/monitors/MemStatsMonitor.v3	/^class StoreProbe(stats: MemStats, offset: u64, size: u8) extends Probe {$/;"	d
offset	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^	case Load(idx: int, offset: u64, data: Array<u8>);$/;"	d
offsets	$VIRGIL_WIZARD/src/engine/Module.v3	/^	def offsets = Vector<int>.new(); \/\/ < 0 indicates an imported definition$/;"	d
offsets	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	private var offsets: V3Offsets;$/;"	d
offsets	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	var offsets: V3Offsets;$/;"	d
offsets	$VIRGIL_WIZARD/src/engine/x86-64/X86_64PreGenStubs.v3	/^	def offsets = allocPreGenHeaderOffsets();$/;"	d
ok	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def ok() -> bool {$/;"	m
ok_memory_flags	$VIRGIL_WIZARD/src/engine/Limits.v3	/^	var ok_memory_flags = BpMemoryFlag.HasMax.mask | BpMemoryFlag.Shared.mask;$/;"	d
ok_table_flags	$VIRGIL_WIZARD/src/engine/Limits.v3	/^	var ok_table_flags = BpTableFlag.HasMax.mask;$/;"	d
onActivate	$VIRGIL_WIZARD/src/engine/Execute.v3	/^	def onActivate() { }$/;"	m
onBind	$VIRGIL_WIZARD/src/monitors/Monitor.v3	/^	def onBind(m: Module, d: Decl, e: Exportable) -> Exportable {$/;"	m
onCall	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^	def onCall(func_id: int) {$/;"	m
onCallReturn	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^	def onCallReturn(loc: DynamicLoc) {$/;"	m
onChildTerminate	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def onChildTerminate(vals: Array<Value>) {$/;"	m
onChildThrow	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def onChildThrow(t: Throwable) {$/;"	m
onCodeSectionFinish	$VIRGIL_WIZARD/src/engine/Execute.v3	/^	def onCodeSectionFinish(module: Module, num_funcs: u32, size: u32, err: ErrorGen) { }$/;"	m
onCodeSectionStart	$VIRGIL_WIZARD/src/engine/Execute.v3	/^	def onCodeSectionStart(module: Module, num_funcs: u32, size: u32) { }$/;"	m
onDataReaderError	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def onDataReaderError(d: DataReader, pos: int, msg: string) {$/;"	m
onDisable	$VIRGIL_WIZARD/src/engine/Probe.v3	/^	var onDisable: void -> void;	\/\/ callback when probe list becomes empty$/;"	d
onEnable	$VIRGIL_WIZARD/src/engine/Probe.v3	/^	var onEnable: void -> void;	\/\/ callback when probe list becomes non-empty$/;"	d
onEngineExit	$VIRGIL_WIZARD/src/engine/Execute.v3	/^	def onEngineExit(code: int) { }$/;"	m
onEngineStart	$VIRGIL_WIZARD/src/engine/Execute.v3	/^	def onEngineStart() { }$/;"	m
onFinish	$VIRGIL_WIZARD/src/monitors/BlocksMonitor.v3	/^	def onFinish(instance: Instance, r: Result) {$/;"	m
onFinish	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^	def onFinish(i: Instance, r: Result) {$/;"	m
onFinish	$VIRGIL_WIZARD/src/monitors/CallsMonitor.v3	/^	def onFinish(i: Instance, r: Result) {$/;"	m
onFinish	$VIRGIL_WIZARD/src/monitors/ConstMonitor.v3	/^	def onFinish(i: Instance, r: Result) {$/;"	m
onFinish	$VIRGIL_WIZARD/src/monitors/ControlMonitor.v3	/^	def onFinish(i: Instance, r: Result) {$/;"	m
onFinish	$VIRGIL_WIZARD/src/monitors/CoverageMonitor.v3	/^	def onFinish(i: Instance, r: Result) {$/;"	m
onFinish	$VIRGIL_WIZARD/src/monitors/FuncProfileMonitor.v3	/^	def onFinish(i: Instance, r: Result) {$/;"	m
onFinish	$VIRGIL_WIZARD/src/monitors/GlobalsMonitor.v3	/^	def onFinish(i: Instance, r: Result) {$/;"	m
onFinish	$VIRGIL_WIZARD/src/monitors/HotnessMonitor.v3	/^	def onFinish(i: Instance, r: Result) {$/;"	m
onFinish	$VIRGIL_WIZARD/src/monitors/InstrCountMonitor.v3	/^	def onFinish(i: Instance, r: Result) {$/;"	m
onFinish	$VIRGIL_WIZARD/src/monitors/LoopMonitor.v3	/^	def onFinish(i: Instance, r: Result) {$/;"	m
onFinish	$VIRGIL_WIZARD/src/monitors/Monitor.v3	/^	def onFinish(i: Instance, r: Result) {$/;"	m
onFinish	$VIRGIL_WIZARD/src/monitors/OpcodeMonitor.v3	/^	def onFinish(i: Instance, r: Result) {$/;"	m
onFinish	$VIRGIL_WIZARD/src/monitors/ProfileMonitor.v3	/^	def onFinish(i: Instance, r: Result) {$/;"	m
onFinish	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^	def onFinish(i: Instance, r: Result) {$/;"	m
onFinish	$VIRGIL_WIZARD/src/monitors/WhammMonitor.v3	/^	def onFinish(i: Instance, r: Result) {$/;"	m
onFunc	$VIRGIL_WIZARD/src/util/BytecodeInstrumenter.v3	/^	def onFunc(func: FuncDecl) {$/;"	m
onFuncBody	$VIRGIL_WIZARD/src/engine/Execute.v3	/^	def onFuncBody(module: Module, func_index: u32, body: Range<byte>, err: ErrorGen) { }$/;"	m
onFuncEntry	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^	def onFuncEntry(index: int, params: Array<Value>, instance: Instance) {$/;"	m
onFuncExit	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^	def onFuncExit(index: int) {$/;"	m
onFuncProbeInsert1	$VIRGIL_WIZARD/src/engine/Execute.v3	/^	def onFuncProbeInsert1(module: Module, func: FuncDecl, offset: int, p: Probe) { }$/;"	m
onFuncProbeInsert1	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Target.v3	/^	def onFuncProbeInsert1(module: Module, func: FuncDecl, offset: int, p: Probe) {$/;"	m
onFuncProbeInsert2	$VIRGIL_WIZARD/src/engine/Execute.v3	/^	def onFuncProbeInsert2(module: Module, func: FuncDecl, offset: int, p: Probe) { }$/;"	m
onFuncProbeInsert2	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Target.v3	/^	def onFuncProbeInsert2(module: Module, func: FuncDecl, offset: int, p: Probe) {$/;"	m
onFuncProbeInsertN	$VIRGIL_WIZARD/src/engine/Execute.v3	/^	def onFuncProbeInsertN(module: Module, func: FuncDecl, offset: int, p: Probe) { }$/;"	m
onFuncProbeRemove	$VIRGIL_WIZARD/src/engine/Execute.v3	/^	def onFuncProbeRemove(module: Module, func: FuncDecl, offset: int) { }$/;"	m
onFuncValidationFinish	$VIRGIL_WIZARD/src/engine/Execute.v3	/^	def onFuncValidationFinish(module: Module, func: FuncDecl, err: ErrorGen) { }$/;"	m
onFuncValidationFinish	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Target.v3	/^	def onFuncValidationFinish(module: Module, func: FuncDecl, err: ErrorGen) {$/;"	m
onFuncValidationStart	$VIRGIL_WIZARD/src/engine/Execute.v3	/^	def onFuncValidationStart(module: Module, func: FuncDecl) { }$/;"	m
onGlobalGet	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^	def onGlobalGet(id: int, value: Value) {$/;"	m
onGlobalSet	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^	def onGlobalSet(id: int, new_value: Value) {$/;"	m
onIndirectCall	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^	def onIndirectCall(table_index: int, entry_idx: int, table: Table) {$/;"	m
onInstantiate	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	def onInstantiate(i: Instance) {$/;"	m
onInstantiate	$VIRGIL_WIZARD/src/monitors/Monitor.v3	/^	def onInstantiate(i: Instance) {$/;"	m
onInstantiate	$VIRGIL_WIZARD/src/monitors/R3BackEndMonitor.v3	/^	def onInstantiate(instance: Instance) {$/;"	m
onInstantiate	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^	def onInstantiate(instance: Instance) {$/;"	m
onInstantiateFinish	$VIRGIL_WIZARD/src/engine/Execute.v3	/^	def onInstantiateFinish(instantiator: Instantiator, err: ErrorGen) { }$/;"	m
onInstantiateStart	$VIRGIL_WIZARD/src/engine/Execute.v3	/^	def onInstantiateStart(instantiator: Instantiator) { }$/;"	m
onMain	$VIRGIL_WIZARD/src/monitors/Monitor.v3	/^	def onMain(f: Function, args: Array<Value>) {$/;"	m
onMemoryCopy	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^	def onMemoryCopy(loc: DynamicLoc, dst_index: u32, src_mem: Memory) {$/;"	m
onMemoryFill	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^	def onMemoryFill(mem_index: u32, dst_offset: u32, val: u8, size: u32) {$/;"	m
onMemoryGrow	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^	def onMemoryGrow(loc: DynamicLoc, mem: Memory, pages: u32) -> ProbeAction {$/;"	m
onMemoryInit	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^	def onMemoryInit(loc: DynamicLoc, mem_index: int, data: Array<u8>) {$/;"	m
onMemoryRead	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^	def onMemoryRead(loc: DynamicLoc, mem: Memory, addr: u64, size: u64) -> ProbeAction {$/;"	m
onMemoryWrite	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^	def onMemoryWrite(loc: DynamicLoc, mem: Memory, addr: u64, size: u64) -> ProbeAction {$/;"	m
onModuleFinish	$VIRGIL_WIZARD/src/engine/Execute.v3	/^	def onModuleFinish(module: Module, size: u32, err: ErrorGen) { }		\/\/ note: size is exact$/;"	m
onModuleFinish	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Target.v3	/^	def onModuleFinish(module: Module, size: u32, err: ErrorGen) {$/;"	m
onModuleStart	$VIRGIL_WIZARD/src/engine/Execute.v3	/^	def onModuleStart(module: Module, size: u32) { }			\/\/ note: size == 0 if estimate only$/;"	m
onMonitorsFinish	$VIRGIL_WIZARD/src/engine/Execute.v3	/^	def onMonitorsFinish(module: Module, err: ErrorGen) { }$/;"	m
onMonitorsFinish	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Target.v3	/^	def onMonitorsFinish(module: Module, err: ErrorGen) {$/;"	m
onMonitorsStart	$VIRGIL_WIZARD/src/engine/Execute.v3	/^	def onMonitorsStart() { }$/;"	m
onMonitorsStart	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Target.v3	/^	def onMonitorsStart() {$/;"	m
onNewFunction	$VIRGIL_WIZARD/src/engine/Execute.v3	/^	def onNewFunction(wf: WasmFunction, err: ErrorGen) { }$/;"	m
onNewFunction	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Target.v3	/^	def onNewFunction(wf: WasmFunction, err: ErrorGen) {$/;"	m
onParse	$VIRGIL_WIZARD/src/monitors/AllocMonitor.v3	/^	def onParse(module: Module, err: ErrorGen) {$/;"	m
onParse	$VIRGIL_WIZARD/src/monitors/BlocksMonitor.v3	/^	def onParse(module: Module, err: ErrorGen) {$/;"	m
onParse	$VIRGIL_WIZARD/src/monitors/BranchMonitor.v3	/^	def onParse(module: Module, err: ErrorGen) {$/;"	m
onParse	$VIRGIL_WIZARD/src/monitors/BreakpointMonitor.v3	/^	def onParse(module: Module, err: ErrorGen) {$/;"	m
onParse	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^	def onParse(module: Module, err: ErrorGen) {$/;"	m
onParse	$VIRGIL_WIZARD/src/monitors/CallsMonitor.v3	/^	def onParse(module: Module, err: ErrorGen) {$/;"	m
onParse	$VIRGIL_WIZARD/src/monitors/ConstMonitor.v3	/^	def onParse(m: Module, err: ErrorGen) {$/;"	m
onParse	$VIRGIL_WIZARD/src/monitors/ControlMonitor.v3	/^	def onParse(module: Module, err: ErrorGen) {$/;"	m
onParse	$VIRGIL_WIZARD/src/monitors/CoverageMonitor.v3	/^	def onParse(m: Module, err: ErrorGen) {$/;"	m
onParse	$VIRGIL_WIZARD/src/monitors/FuncProfileMonitor.v3	/^	def onParse(module: Module, err: ErrorGen) {$/;"	m
onParse	$VIRGIL_WIZARD/src/monitors/GlobalsMonitor.v3	/^	def onParse(module: Module, err: ErrorGen) {$/;"	m
onParse	$VIRGIL_WIZARD/src/monitors/HotnessMonitor.v3	/^	def onParse(m: Module, err: ErrorGen) {$/;"	m
onParse	$VIRGIL_WIZARD/src/monitors/IfMonitor.v3	/^	def onParse(m: Module, err: ErrorGen) {$/;"	m
onParse	$VIRGIL_WIZARD/src/monitors/InstrCountMonitor.v3	/^	def onParse(module: Module, err: ErrorGen) {$/;"	m
onParse	$VIRGIL_WIZARD/src/monitors/LoopMonitor.v3	/^	def onParse(m: Module, err: ErrorGen) {$/;"	m
onParse	$VIRGIL_WIZARD/src/monitors/LoopTraceMonitor.v3	/^	def onParse(module: Module, err: ErrorGen) {$/;"	m
onParse	$VIRGIL_WIZARD/src/monitors/MemStatsMonitor.v3	/^	def onParse(module: Module, err: ErrorGen) {$/;"	m
onParse	$VIRGIL_WIZARD/src/monitors/Monitor.v3	/^	def onParse(m: Module, err: ErrorGen) {$/;"	m
onParse	$VIRGIL_WIZARD/src/monitors/OpcodeMonitor.v3	/^	def onParse(m: Module, err: ErrorGen) {$/;"	m
onParse	$VIRGIL_WIZARD/src/monitors/ProfileMonitor.v3	/^	def onParse(module: Module, err: ErrorGen) {$/;"	m
onParse	$VIRGIL_WIZARD/src/monitors/R3BackEndMonitor.v3	/^	def onParse(module: Module, err: ErrorGen) {$/;"	m
onParse	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^	def onParse(module: Module, err: ErrorGen) {$/;"	m
onParse	$VIRGIL_WIZARD/src/monitors/TracePointMonitor.v3	/^	def onParse(module: Module, err: ErrorGen) {$/;"	m
onParse	$VIRGIL_WIZARD/src/monitors/WhammMonitor.v3	/^	def onParse(module: Module, err: ErrorGen) {$/;"	m
onParse	$VIRGIL_WIZARD/src/monitors/debug/StackCheck.v3	/^	def onParse(m: Module, err: ErrorGen) {$/;"	m
onProbeDisable	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^	def onProbeDisable() {$/;"	f
onProbeEnable	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^	def onProbeEnable() {$/;"	f
onReset	$VIRGIL_WIZARD/src/monitors/Monitor.v3	/^	def onReset() {$/;"	m
onReset	$VIRGIL_WIZARD/src/monitors/TimeoutMonitor.v3	/^	def onReset() {$/;"	m
onStart	$VIRGIL_WIZARD/src/monitors/Monitor.v3	/^	def onStart(f: Function) {$/;"	m
onTableGet	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^	def onTableGet(table_idx: int, entry_idx: int, table: Table) -> int {$/;"	m
onTableGrow	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^	def onTableGrow(table_idx: int, growth: u32) {$/;"	m
onTableSet	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^	def onTableSet(table_idx: int, entry_idx: int, new_val: Value) {$/;"	m
onTest	$VIRGIL_WIZARD/src/monitors/Monitor.v3	/^	def onTest(f: Function, args: Array<Value>) {$/;"	m
onTestModule	$VIRGIL_WIZARD/src/engine/Execute.v3	/^	def onTestModule(m: Module) { }$/;"	m
onTestModule	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Target.v3	/^	def onTestModule(module: Module) {$/;"	m
onTestRun	$VIRGIL_WIZARD/src/engine/Execute.v3	/^	def onTestRun(wf: WasmFunction, err: ErrorGen) { }$/;"	m
onTestRun	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Target.v3	/^	def onTestRun(wf: WasmFunction, err: ErrorGen) {$/;"	m
onTierUp	$VIRGIL_WIZARD/src/engine/Execute.v3	/^	def onTierUp(wf: WasmFunction, pc: int) -> TargetOsrInfo {$/;"	m
onTierUp	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Target.v3	/^	def onTierUp(wf: WasmFunction, pc: int) -> TargetOsrInfo {$/;"	m
oneByte	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	var oneByte = true;$/;"	d
oob	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^type EffectiveAddr(oob: bool, is64: bool, base_reg: Reg, index_reg: Reg, offset: u32) #unboxed;$/;"	d
oobMemoryHandlerOffset	$VIRGIL_WIZARD/src/engine/x86-64/X86_64PreGenStubs.v3	/^	+44	oobMemoryHandlerOffset:		i32;	\/\/ handler for signals caused by OOB memory access$/;"	d
oom	$VIRGIL_WIZARD/src/engine/Memory.v3	/^	var oom = false;  \/\/ set if allocation fails due to out-of-memory$/;"	d
oom	$VIRGIL_WIZARD/src/engine/Table.v3	/^	var oom = false;$/;"	d
op	$VIRGIL_WIZARD/src/monitors/HotnessMonitor.v3	/^private class LocCounter(func: FuncDecl, pc: int, op: Opcode, var group: int) extends CountProbe {$/;"	d
op	$VIRGIL_WIZARD/src/monitors/OpcodeMonitor.v3	/^type OpcodeEntry(op: Opcode, static_count: u32, count: CountProbe) #unboxed;$/;"	d
op	$VIRGIL_WIZARD/src/util/BasicTracing.v3	/^class MemoryTraceStoreProbe(op: Opcode, imm: MemArg, size: u8) extends Probe {$/;"	d
op	$VIRGIL_WIZARD/src/util/WasmAsm.v3	/^	def op(opcode: Opcode) -> this {$/;"	m
op	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	case Opcode(op: Opcode);$/;"	d
op14h	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def op14h(code: u16) -> u8 {$/;"	f
op14l	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def op14l(code: u16) -> u8 {$/;"	f
op16h	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def op16h(code: u16) -> u8 {$/;"	f
op16l	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def op16l(code: u16) -> u8 {$/;"	f
op7	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def op7(code: u16) -> u7 {$/;"	f
opcode	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	var opcode: u16;$/;"	d
opcode	$VIRGIL_WIZARD/src/monitors/ModuleInstrumenter.v3	/^private class AfterInstrProbe(module: Module, opcode: Opcode, destProbes: Range<AfterInstrDestProbe>, f: DynamicLoc -> ProbeAction) extends Probe {$/;"	d
opcodePatterns	$VIRGIL_WIZARD/src/monitors/WhammMonitor.v3	/^	var opcodePatterns: Array<List<(Opcode, WhammRule)>>;$/;"	d
opcode_pos	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	var opcode_pos: int;$/;"	d
opcode_read_pc	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^	var opcode_read_pc = -1;$/;"	d
opcodes	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def opcodes = Array<Opcode>.new(256);$/;"	d
opcodes_no_prefix	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def opcodes_no_prefix = Array<Opcode>.new(256);$/;"	d
operand	$VIRGIL_WIZARD/src/monitors/ModuleInstrumenter.v3	/^private class MemoryAccessProbe(imm: MemArg, operand: int, size: u64, f: (DynamicLoc, Memory, u64, u64) -> ProbeAction) extends Probe {$/;"	d
operand_len_opt	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^def operand_len_opt = E.options.newIntOption("operand_len", MAX_OPERAND_LEN, "maximum number of bytes for immediates between consecutive opcodes");$/;"	d
operands	$VIRGIL_WIZARD/src/engine/Trace.v3	/^	var operands = false;$/;"	d
operands	$VIRGIL_WIZARD/src/engine/TraceOptions.v3	/^	operands('o', "interpreter stack contents"),$/;"	d
opt	$VIRGIL_WIZARD/src/util/OptionsRegistry.v3	/^class OptionGroupEntry(opt: Opt, var displayName: string, typeName: string, help: string) { }$/;"	d
options	$VIRGIL_WIZARD/src/monitors/MonitorRegistry.v3	/^	def options = OptionGroup.new(name, BasicOptions.new());$/;"	d
orderMove	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	private def orderMove(alloc: int -> int, node: MoveNode) {$/;"	m
orig	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	case Local(orig: Token, i: u31);$/;"	d
orig_bytecode	$VIRGIL_WIZARD/src/engine/Module.v3	/^	def var orig_bytecode: Array<byte>;		\/\/ unmodified original bytecode$/;"	d
orig_bytes	$VIRGIL_WIZARD/src/engine/Module.v3	/^	var orig_bytes: Range<byte>;$/;"	d
origptr	$VIRGIL_WIZARD/src/engine/BytecodeIterator.v3	/^	private def origptr = CodePtr.new(null);$/;"	d
osr_entries	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Target.v3	/^type TargetOsrInfo(spc_entry: Pointer, osr_entries: List<(int, int)>) #unboxed { }$/;"	d
osr_entry_label	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	var osr_entry_label: MasmLabel;$/;"	d
osr_loop_label	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	var osr_loop_label: MasmLabel;$/;"	d
osr_offset	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	var osr_offset: int;$/;"	d
osr_pc	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	var osr_pc: int;$/;"	d
osr_state	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	var osr_state: Array<SpcVal>;$/;"	d
out	$VIRGIL_WIZARD/src/monitors/HotnessMonitor.v3	/^private class HotnessData(out: TraceBuilder, m: Module) {$/;"	d
out	$VIRGIL_WIZARD/src/monitors/Monitor.v3	/^	var out = Trace.OUT;$/;"	d
out	$VIRGIL_WIZARD/src/util/BasicTracing.v3	/^class TracePointProbe(out: TraceBuilder) extends Probe {$/;"	d
outgoing	$VIRGIL_WIZARD/src/util/CfgBuilder.v3	/^	var outgoing: List<(int, CfgBlock)>;$/;"	d
outline	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	var outline: ModuleOutline;$/;"	d
outline	$VIRGIL_WIZARD/src/engine/Module.v3	/^	var outline: ModuleOutline;$/;"	d
output	$VIRGIL_WIZARD/src/monitors/BlocksMonitor.v3	/^	def output(module: Module, func: FuncDecl, x: Array<BasicBlockCount>) {$/;"	m
output	$VIRGIL_WIZARD/src/monitors/FuncProfileMonitor.v3	/^def output(out: TraceBuilder, entries: Vector<EnterProbe>) {$/;"	m
output	$VIRGIL_WIZARD/src/monitors/InstrCountMonitor.v3	/^def output(out: TraceBuilder, entries: Vector<(FuncDecl, int, CountProbe)>, names: NameSection) {$/;"	m
output	$VIRGIL_WIZARD/src/monitors/OpcodeMonitor.v3	/^def output(out: TraceBuilder, entries: Vector<OpcodeEntry>) {$/;"	m
outputInstr	$VIRGIL_WIZARD/src/monitors/BranchMonitor.v3	/^def outputInstr(module: Module, source: bool, target: bool, bi: BytecodeIterator, out: TraceBuilder) {$/;"	m
outputOpAndAddr	$VIRGIL_WIZARD/src/util/BasicTracing.v3	/^def outputOpAndAddr(op: Opcode, memory_index: u31, offset: u64, index: Value) -> u64 {$/;"	m
output_folder	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^	var output_folder: string; \/\/ output folder for the profiling results, if unset, print to terminal.$/;"	d
output_folder_opt	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^def output_folder_opt = E.options.newStringOption("output_folder", null, "output folder for profiling results");$/;"	d
output_prefix	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^private class GuestProfileState(counter: CountProbe, dispatch_func_id: int, output_prefix: string) {$/;"	d
overwrite	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def overwrite(flags: byte, reg: Reg, const: int) {$/;"	m
overwriteValue	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	def overwriteValue(base: Pointer, offset: int, v: Value) {$/;"	m
pack	$VIRGIL_WIZARD/src/engine/Type.v3	/^type StorageType(valtype: ValueType, pack: Packedness, mutable: bool) { }$/;"	d
pad_fallthru	$VIRGIL_WIZARD/src/util/CfgPrinter.v3	/^	var pad_fallthru: bool;$/;"	d
page_FB	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def page_FB = page_by_prefix[0xFB] = OpcodePage.new(0xFB);$/;"	d
page_FC	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def page_FC = page_by_prefix[0xFC] = OpcodePage.new(0xFC);$/;"	d
page_FD	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def page_FD = page_by_prefix[0xFD] = OpcodePage.new(0xFD);$/;"	d
page_FE	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def page_FE = page_by_prefix[0xFE] = OpcodePage.new(0xFE);$/;"	d
page_by_prefix	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def page_by_prefix = Array<OpcodePage>.new(256);$/;"	d
pairs	$VIRGIL_WIZARD/src/engine/Sidetable.v3	/^	private def pairs = Vector<PcPair>.new();$/;"	d
palette	$VIRGIL_WIZARD/src/engine/Trace.v3	/^	var palette: Palette;$/;"	d
param	$VIRGIL_WIZARD/src/util/ProbeUtil.v3	/^class ClosureProbe<P, R>(f: P -> R, param: P) extends Probe {$/;"	d
params	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	var params: Array<ValueType>;$/;"	d
params	$VIRGIL_WIZARD/src/engine/Type.v3	/^	def params: Array<ValueType>;$/;"	d
params	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	var params: Array<ValueType>;$/;"	d
params	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^	case FuncEntryTable(idx: int, table_idx: int, table_name: string, params: Array<Value>);$/;"	d
params	$VIRGIL_WIZARD/src/util/Whamm.v3	/^type WhammRule(params: Array<WhammParam>, func: FuncDecl, pred: WhammPredicate) #unboxed;$/;"	d
params_arity	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	var params_arity = -1;$/;"	d
params_arity	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	var params_arity = -1;$/;"	d
params_len	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^	def var params_len: int;$/;"	d
params_list	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^	def var params_list: Array<Value>;$/;"	d
paranoid	$VIRGIL_WIZARD/src/engine/Debug.v3	/^	def paranoid = false;$/;"	d
parent	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^	var parent: WasmStack;$/;"	d
parent	$VIRGIL_WIZARD/src/monitors/ProfileMonitor.v3	/^private class ProfileTreeNode(parent: ProfileTreeNode, func: WasmFunction) {$/;"	d
parent_rsp_ptr	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	var parent_rsp_ptr: Pointer;$/;"	d
parse	$VIRGIL_WIZARD/src/engine/EngineOptions.v3	/^	def parse(arg: string, err: ErrorGen) -> bool {$/;"	f
parse	$VIRGIL_WIZARD/src/engine/TraceOptions.v3	/^	def parse(arg: string, err: ErrorGen) -> bool {$/;"	f
parse	$VIRGIL_WIZARD/src/modules/wasi/WasiOptions.v3	/^	def parse(arg: string, err: ErrorGen) -> bool {$/;"	f
parse	$VIRGIL_WIZARD/src/monitors/MonitorOptions.v3	/^	def parse(arg: string, err: ErrorGen) -> bool {$/;"	f
parse	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^	def parse() -> int {$/;"	m
parse	$VIRGIL_WIZARD/src/util/OptionsRegistry.v3	/^	def parse(arg: string, err: ErrorGen) -> bool {$/;"	f
parseAndDump	$VIRGIL_WIZARD/src/objdump.main.v3	/^def parseAndDump(engine: Engine, path: string) -> int {$/;"	m
parseBreakpoint	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	def parseBreakpoint(args: string) -> Breakpoint {$/;"	m
parseBytes	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^	private def parseBytes() -> (Array<byte>, bool) {$/;"	m
parseCommand	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	def parseCommand(command: string) -> DbgCommand {$/;"	m
parseDeclFilter	$VIRGIL_WIZARD/src/util/DeclFilter.v3	/^def parseDeclFilter(input: string) -> List<(Matcher, Matcher)> {$/;"	m
parseEC	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^	private def parseEC() -> (WasmEvent, bool) {$/;"	m
parseEmpty	$VIRGIL_WIZARD/src/util/OptionsRegistry.v3	/^	def parseEmpty(str: string) -> bool {$/;"	m
parseFloatHex	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^	private def parseFloatHex() -> (Value, bool) {$/;"	m
parseG	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^	private def parseG() -> (WasmEvent, bool) {$/;"	m
parseGlob	$VIRGIL_WIZARD/src/util/DeclFilter.v3	/^def parseGlob(p: TextReader) -> Matcher {$/;"	m
parseIC	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^	private def parseIC() -> (WasmEvent, bool) {$/;"	m
parseIG	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^	private def parseIG() -> (WasmEvent, bool) {$/;"	m
parseIR	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^	private def parseIR() -> (WasmEvent, bool) {$/;"	m
parseInfo	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	def parseInfo(args: string) -> Info {$/;"	m
parseIntDec	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^	private def parseIntDec() -> (Value, bool) {$/;"	m
parseL	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^	private def parseL() -> (WasmEvent, bool) {$/;"	m
parseLine	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^	private def parseLine() -> (WasmEvent, bool) {$/;"	m
parseList	$VIRGIL_WIZARD/src/monitors/BreakpointMonitor.v3	/^def parseList(args: string) -> bool {$/;"	m
parseList	$VIRGIL_WIZARD/src/monitors/TracePointMonitor.v3	/^def parseList(args: string) -> bool {$/;"	m
parseMG	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^	private def parseMG() -> (WasmEvent, bool) {$/;"	m
parseMatcherPair	$VIRGIL_WIZARD/src/util/DeclFilter.v3	/^	def parseMatcherPair(p: TextReader) -> (Matcher, Matcher) {$/;"	f
parseMonitorArgs	$VIRGIL_WIZARD/src/monitors/MonitorOptions.v3	/^	private def parseMonitorArgs(entry: MonitorRegistryEntry, args: string) {$/;"	f
parseName	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def parseName(str: Range<byte>) -> Opcode {$/;"	f
parseParam0	$VIRGIL_WIZARD/src/util/Whamm.v3	/^def parseParam0(r: TextReader) -> WhammParam {$/;"	m
parseParams	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^	private def parseParams(min_count: int) -> (Array<Value>, bool) {$/;"	m
parseParams	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	def parseParams(r: TextReader) -> Array<WhammParam> {$/;"	f
parsePredicate	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	def parsePredicate(r: TextReader) -> WhammPredicate {$/;"	f
parseProbePattern	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	def parseProbePattern(r: TextReader) -> (WhammEvent, Array<WhammParam>, WhammPredicate) {		$/;"	f
parseSequence	$VIRGIL_WIZARD/src/util/DeclFilter.v3	/^	def parseSequence(p: TextReader) -> (u32, u32) {$/;"	f
parseSet	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	def parseSet(args: string) -> DbgCommand {$/;"	m
parseSetValue	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	def parseSetValue(args: string) -> Value {$/;"	m
parseStr	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^	private def parseStr(term: byte, consume_term: bool) -> string {$/;"	m
parseString	$VIRGIL_WIZARD/src/util/DeclFilter.v3	/^	def parseString(pattern: string) -> DeclFilter {$/;"	f
parseT	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^	private def parseT() -> (WasmEvent, bool) {$/;"	m
parseTC	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^	private def parseTC() -> (WasmEvent, bool) {$/;"	m
parseTG	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^	private def parseTG() -> (WasmEvent, bool) {$/;"	m
parseUint	$VIRGIL_WIZARD/src/util/Whamm.v3	/^def parseUint<T>(r: TextReader, i: int, f: (Token, u31) -> T) -> T {$/;"	m
parseValue	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^	private def parseValue() -> (Value, bool) {$/;"	m
parser	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	private var parser: WasmParser;$/;"	d
parser	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	def parser = WasmParser.new(extensions, limits, module, err, codeptr);$/;"	d
parser	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	var parser: WasmParser;$/;"	d
parser	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	def parser = DebuggerParser.new();$/;"	d
parser	$VIRGIL_WIZARD/src/monitors/R3BackEndMonitor.v3	/^	var parser: R3TraceParser;$/;"	d
partiallyInstantiate	$VIRGIL_WIZARD/src/modules/ModuleLinker.v3	/^	private def partiallyInstantiate(module_id: int) -> Instantiator {$/;"	m
partially_instantiated	$VIRGIL_WIZARD/src/engine/Instantiator.v3	/^	private var partially_instantiated = false;$/;"	d
path	$VIRGIL_WIZARD/src/engine/Module.v3	/^type NamedModule(path: string, name: string, module: Module);$/;"	d
path	$VIRGIL_WIZARD/src/modules/wasi/WasiFdMap.v3	/^class WasiFd(sysfd: int, ftype: wasi_filetype, preopen: bool, path: string) {$/;"	d
path_create_directory	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	path_create_directory,$/;"	d
path_create_directory	$VIRGIL_WIZARD/src/modules/wasi/x86-64-linux/WspOneModule-x86-64-linux.v3	/^	def path_create_directory(fd: int, pathptr: int, pathlen: int) -> int {$/;"	m
path_create_file	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	path_create_file,$/;"	d
path_filestat_get	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	path_filestat_get,$/;"	d
path_filestat_get	$VIRGIL_WIZARD/src/modules/wasi/x86-64-linux/WspOneModule-x86-64-linux.v3	/^	def path_filestat_get(fd: int, flags: int, pathptr: int, pathlen: int, filestatptr: int) -> int {$/;"	m
path_filestat_set_size	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	path_filestat_set_size,$/;"	d
path_filestat_set_times	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	path_filestat_set_times,$/;"	d
path_filestat_set_times	$VIRGIL_WIZARD/src/modules/wasi/x86-64-linux/WspOneModule-x86-64-linux.v3	/^	def path_filestat_set_times(fd: int, flags: int, pathptr: int, pathlen: int, atim: long, mtim: long, fst_flags: int) -> int {$/;"	m
path_link	$VIRGIL_WIZARD/src/modules/wasi/x86-64-linux/WspOneModule-x86-64-linux.v3	/^	def path_link(fd1: int, flags: int, pathptr1: int, pathlen1: int, fd2: int, pathptr2: int, pathlen2: int) -> int {$/;"	m
path_link_source	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	path_link_source,$/;"	d
path_link_target	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	path_link_target,$/;"	d
path_open	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	path_open,$/;"	d
path_open	$VIRGIL_WIZARD/src/modules/wasi/x86-64-linux/WspOneModule-x86-64-linux.v3	/^	def path_open(fd: int, dflags: int, pathptr: int, pathlen: int, oflags: int, base_rights: long, inh_rights: long, fflags: int, fdptr: int) -> int {$/;"	m
path_readlink	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	path_readlink,$/;"	d
path_readlink	$VIRGIL_WIZARD/src/modules/wasi/x86-64-linux/WspOneModule-x86-64-linux.v3	/^	def path_readlink(fd: int, pathptr: int, pathlen: int, ptr: int, len: int, size: int) -> HostResult {$/;"	m
path_remove_directory	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	path_remove_directory,$/;"	d
path_remove_directory	$VIRGIL_WIZARD/src/modules/wasi/x86-64-linux/WspOneModule-x86-64-linux.v3	/^	def path_remove_directory(fd: int, pathptr: int, pathlen: int) -> HostResult {$/;"	m
path_rename	$VIRGIL_WIZARD/src/modules/wasi/x86-64-linux/WspOneModule-x86-64-linux.v3	/^	def path_rename(fd1: int, pathptr1: int, pathlen1: int, fd2: int, pathptr2: int, pathlen2: int) -> int {$/;"	m
path_rename_source	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	path_rename_source,$/;"	d
path_rename_target	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	path_rename_target,$/;"	d
path_symlink	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	path_symlink,$/;"	d
path_symlink	$VIRGIL_WIZARD/src/modules/wasi/x86-64-linux/WspOneModule-x86-64-linux.v3	/^	def path_symlink(pathptr1: int, pathlen1: int, fd: int, pathptr2: int, pathlen2: int) -> int {$/;"	m
path_unlink_file	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	path_unlink_file,$/;"	d
path_unlink_file	$VIRGIL_WIZARD/src/modules/wasi/x86-64-linux/WspOneModule-x86-64-linux.v3	/^	def path_unlink_file(fd: int, pathptr: int, pathlen: int) -> HostResult {$/;"	m
pattern	$VIRGIL_WIZARD/src/util/DeclFilter.v3	/^class DeclFilter(pattern: string, list: List<(Matcher, Matcher)>) {$/;"	d
pause	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	def pause(dynamicLoc: DynamicLoc) -> ProbeAction {$/;"	f
payload	$VIRGIL_WIZARD/src/engine/Module.v3	/^class CustomSection(name: string, payload: Array<byte>) {$/;"	d
pc	$VIRGIL_WIZARD/src/engine/BytecodeIterator.v3	/^	def var pc: int;				\/\/ current program counter$/;"	d
pc	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	case Error(error: WasmError, pc: int, msg: string) { }$/;"	d
pc	$VIRGIL_WIZARD/src/engine/Sidetable.v3	/^private type PcPair(pc: int, stp: int) #unboxed { }$/;"	d
pc	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^type DynamicLoc(func: WasmFunction, pc: int, frame: TargetFrame) #unboxed { }$/;"	d
pc	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	var pc: int;			\/\/ program counter$/;"	d
pc	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	def pc() -> int {$/;"	m
pc	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	case FunctionPc(func_index: int, pc: int) {$/;"	d
pc	$VIRGIL_WIZARD/src/monitors/HotnessMonitor.v3	/^private class LocCounter(func: FuncDecl, pc: int, op: Opcode, var group: int) extends CountProbe {$/;"	d
pc	$VIRGIL_WIZARD/src/monitors/LoopMonitor.v3	/^private class LmEntry(module: Module, func: FuncDecl, depth: int, pc: int) extends CountProbe {$/;"	d
pc	$VIRGIL_WIZARD/src/monitors/LoopTraceMonitor.v3	/^type TraceAnchorLoc(module: Module, func: FuncDecl, pc: int) {$/;"	d
pc	$VIRGIL_WIZARD/src/monitors/ModuleInstrumenter.v3	/^private class AfterInstrVisitor(module: Module, func: FuncDecl, pc: int, f: DynamicLoc -> ProbeAction) extends BytecodeVisitor {$/;"	d
pc	$VIRGIL_WIZARD/src/util/BasicBlockIterator.v3	/^	def var pc: int;				\/\/ start of current block$/;"	d
pc	$VIRGIL_WIZARD/src/util/CfgPrinter.v3	/^type CfgPrintEntry(pc: int, fw_edges: Array<CfgEdgeChar>, instr: string, bw_edges: Array<CfgEdgeChar>) #unboxed {$/;"	d
pc	$VIRGIL_WIZARD/src/util/ControlStack.v3	/^	var pc: int;$/;"	d
pc_delta	$VIRGIL_WIZARD/src/engine/Sidetable.v3	/^	+0	pc_delta:	i32;$/;"	d
pc_slot	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	var pc_slot: MasmAddr;$/;"	d
pc_slot	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^	var pc_slot: MasmAddr;$/;"	d
pc_width	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	var pc_width = 6;$/;"	d
peek	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def peek() -> SpcVal {$/;"	m
peek2	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def peek2() -> (SpcVal, SpcVal) {$/;"	m
peekK	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^	def peekK(ts: Range<ValueType>) -> Range<Value>;$/;"	m
peekRef	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	def peekRef() -> Value {$/;"	m
peekTag	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	def peekTag() -> byte {$/;"	m
peek_MemAccessKind	$VIRGIL_WIZARD/src/engine/CodePtr.v3	/^	def peek_MemAccessKind(module: Module) -> MemAccessKind {$/;"	m
plus	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def plus(delta: int) -> MasmAddr { return MasmAddr(base, offset + delta); }$/;"	m
pointList_	$VIRGIL_WIZARD/src/monitors/BreakpointMonitor.v3	/^def pointList_ = monitor_.options.newOption("br", false, "=<function pattern>:min_pc..max_pc", $/;"	d
pointList_	$VIRGIL_WIZARD/src/monitors/TracePointMonitor.v3	/^def pointList_ = monitor_.options.newOption("tr", false, "=<function pattern>:min_pc..max_pc", $/;"	d
points	$VIRGIL_WIZARD/src/monitors/BreakpointMonitor.v3	/^var points: List<(DeclFilter, u32, u32)>;$/;"	d
points	$VIRGIL_WIZARD/src/monitors/TracePointMonitor.v3	/^var points: List<(DeclFilter, u32, u32)>;$/;"	d
poll_fd_readwrite	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	poll_fd_readwrite,$/;"	d
poolIndex	$VIRGIL_WIZARD/src/engine/compiler/RegAlloc.v3	/^class SpcRaPool(regConfig: RegConfig, poolIndex: int) {$/;"	d
poolMap	$VIRGIL_WIZARD/src/engine/compiler/RegAlloc.v3	/^	def poolMap: PoolMap;$/;"	d
poolMap	$VIRGIL_WIZARD/src/engine/compiler/RegSet.v3	/^	var poolMap: PoolMap;$/;"	d
pools	$VIRGIL_WIZARD/src/engine/compiler/RegAlloc.v3	/^	private def pools: Array<RegPool32>;$/;"	d
pop	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def pop() -> SpcVal {$/;"	m
pop	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def pop() -> Value { return values.pop(); }$/;"	m
pop	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	def pop(t: ValueType) -> Value {$/;"	m
pop	$VIRGIL_WIZARD/src/monitors/ProfileMonitor.v3	/^	def pop() {$/;"	m
popAllFrames	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def popAllFrames(stacktrace: bool) -> StackSegment {$/;"	m
popAny	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	def popAny() -> (ValueType, bool) {$/;"	m
popArgsAndPushResults	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def popArgsAndPushResults(sig: SigDecl) {$/;"	m
popArray	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^	def popArray() -> HeapArray {$/;"	m
popArray	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def popArray() -> HeapArray { return HeapArray.!(Value.Ref.!(values.pop()).val); }$/;"	m
popContinuation	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def popContinuation() -> Continuation { return Continuation.!(Value.Ref.!(values.pop()).val); }$/;"	m
popE	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	def popE(expected: ValueType) {$/;"	m
popFixedReg	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def popFixedReg(reg: Reg) -> SpcVal {$/;"	m
popFrame	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	private def popFrame() -> V3Frame {$/;"	m
popFunction	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^	def popFunction() -> Function {$/;"	m
popN	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^	def popN(ts: Range<ValueType>) -> Array<Value>;$/;"	m
popN	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def popN(t: Range<ValueType>) -> Array<Value> {$/;"	m
popN	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	def popN(t: Range<ValueType>) -> Array<Value> {$/;"	m
popObject	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^	def popObject() -> Object;$/;"	m
popObject	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def popObject() -> Object { return Value.Ref.!(values.pop()).val; }$/;"	m
popObject	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	def popObject() -> Object {$/;"	m
popRef	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	def popRef() -> (ValueType, bool) {$/;"	m
popRef	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	def popRef() -> Value {$/;"	m
popRefE	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	def popRefE(expected: ValueType) -> bool {$/;"	m
popReg	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def popReg() -> SpcVal {$/;"	m
popRegToOverwrite	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def popRegToOverwrite() -> SpcVal {$/;"	m
popRegToReuse	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def popRegToReuse(delta: int) -> SpcVal {$/;"	m
popResult	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	def popResult(rt: Array<ValueType>) -> Result {$/;"	m
popStackInChain	$VIRGIL_WIZARD/src/engine/v3/V3Target.v3	/^	private def popStackInChain(stack: V3Interpreter) -> V3Interpreter {$/;"	m
popStruct	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^	def popStruct() -> HeapStruct {$/;"	m
popStruct	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def popStruct() -> HeapStruct { return HeapStruct.!(Value.Ref.!(values.pop()).val); }$/;"	m
popTmpReg	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def popTmpReg() -> SpcVal {$/;"	m
popV	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^	def popV(t: ValueType) -> Value;$/;"	m
popV	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def popV(t: ValueType) -> Value { return values.pop(); }$/;"	m
popV	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	def popV(t: ValueType) -> Value {$/;"	m
pop_Object	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def pop_Object() -> Object;$/;"	m
pop_Value	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def pop_Value(tv: TypeVar) -> Value;$/;"	m
pop_f32	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def pop_f32() -> float;$/;"	m
pop_f64	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def pop_f64() -> double;$/;"	m
pop_u32	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def pop_u32() -> u32;$/;"	m
pop_u64	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def pop_u64() -> u64;$/;"	m
pop_v128	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def pop_v128() -> v128;$/;"	m
popa	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^	def popa(size: SizeConstraint) -> u64 {$/;"	m
popb32	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	def popb32(tag: byte) -> u32 {$/;"	m
popb64	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	def popb64(tag: byte) -> u64 {$/;"	m
popcount	$VIRGIL_WIZARD/src/engine/Sidetable.v3	/^type SidetableBrEntry(dpc: int, valcount: int, popcount: int, dstp: int) #unboxed;$/;"	d
popcount	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	var popcount: u32;$/;"	d
popcount_pos	$VIRGIL_WIZARD/src/engine/Sidetable.v3	/^	def popcount_pos = 2;$/;"	d
popd	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^	def popd() -> double;$/;"	m
popd	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def popd() -> double { return Values.unbox_d(values.pop()); }$/;"	m
popf	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^	def popf() -> float;$/;"	m
popf	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def popf() -> float { return Values.unbox_f(values.pop()); }$/;"	m
popi	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^	def popi() -> i32;$/;"	m
popi	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def popi() -> i32 { return Values.unbox_i(values.pop()); }$/;"	m
popi	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	def popi() -> i32 {$/;"	m
popl	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^	def popl() -> i64;$/;"	m
popl	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def popl() -> i64 { return Values.unbox_l(values.pop()); }$/;"	m
popl	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	def popl() -> i64 {$/;"	m
popr	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^	def popr() -> Value.Ref;$/;"	m
popr	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def popr() -> Value.Ref { return Value.Ref.!(values.pop()); } \/\/ TODO: i31$/;"	m
pops	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def pops() -> (u64, u64) { return Values.unbox_s(values.pop()); }$/;"	m
popu	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^	def popu() -> u32;$/;"	m
popu	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def popu() -> u32 { return Values.unbox_u(values.pop()); }$/;"	m
popu	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	def popu() -> u32 {$/;"	m
popu16	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def popu16() -> u16 { return u16.view(Values.unbox_u(values.pop())); }$/;"	m
popu8	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def popu8() -> u8 { return u8.view(Values.unbox_u(values.pop())); }$/;"	m
popw	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^	def popw() -> u64;$/;"	m
popw	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def popw() -> u64 { return Values.unbox_w(values.pop()); }$/;"	m
popw	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	def popw() -> u64 {$/;"	m
popw16	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def popw16() -> u16 { return u16.view(Values.unbox_w(values.pop())); }$/;"	m
popw32	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def popw32() -> u32 { return u32.view(Values.unbox_w(values.pop())); }$/;"	m
popw8	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def popw8() -> u8 { return u8.view(Values.unbox_w(values.pop())); }$/;"	m
pos	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	var pos: int;$/;"	d
pos	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^	private var pos: int;$/;"	d
postOsrTierUpThreshold	$VIRGIL_WIZARD/src/engine/Tuning.v3	/^	var postOsrTierUpThreshold = 1;		\/\/ threshold after completing one OSR tierup$/;"	d
postprocess	$VIRGIL_WIZARD/src/engine/Instantiator.v3	/^	def postprocess(error: ErrorGen, instance: Instance) { }$/;"	m
postprocess	$VIRGIL_WIZARD/src/modules/DynInstrModule.v3	/^	def postprocess(error: ErrorGen, instance: Instance) {$/;"	m
postprocess	$VIRGIL_WIZARD/src/modules/HostModuleBuilder.v3	/^	def postprocess(f: (C, ErrorGen, Instance) -> void) -> this {$/;"	m
postprocess	$VIRGIL_WIZARD/src/modules/wizeng/WizengModule.v3	/^	def postprocess(error: ErrorGen, instance: Instance) {$/;"	m
postprocess_f	$VIRGIL_WIZARD/src/modules/HostModuleBuilder.v3	/^	var postprocess_f: (C, ErrorGen, Instance) -> void;$/;"	d
potential_dispatch_functions	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^	var potential_dispatch_functions: List<GuestProfileState>;$/;"	d
pred	$VIRGIL_WIZARD/src/util/Whamm.v3	/^type WhammRule(params: Array<WhammParam>, func: FuncDecl, pred: WhammPredicate) #unboxed;$/;"	d
prefix	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^enum Opcode(prefix: u8, code: u16, mnemonic: string, imms: Array<ImmKind>, sig: SigDecl) {$/;"	d
prefix	$VIRGIL_WIZARD/src/util/OpcodeMap.v3	/^private class OpcodeMapTable<T>(prefix: byte, globalOpTable: Array<Opcode>) {$/;"	d
prefix	$VIRGIL_WIZARD/src/util/PrefixTrie.v3	/^	var prefix: Array<K>;$/;"	d
pregen	$VIRGIL_WIZARD/src/engine/Debug.v3	/^	def pregen = false;$/;"	d
pregenIntoFile	$VIRGIL_WIZARD/src/engine/v3/V3Target.v3	/^	def pregenIntoFile(filename: string) -> ErrorBuilder {$/;"	f
pregenIntoFile	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Target.v3	/^	def pregenIntoFile(filename: string) -> ErrorBuilder {$/;"	f
pregen_buffer	$VIRGIL_WIZARD/src/engine/x86-64/X86_64PreGenStubs.v3	/^def pregen_buffer = Array<byte>.new(TOTAL_SIZE + PAGE_SIZE_i);$/;"	d
pregen_bytes	$VIRGIL_WIZARD/src/engine/Metrics.v3	/^	def pregen_bytes	= m("pregen:bytes", bytes, "Total pregen asm stub bytes");$/;"	d
pregen_header	$VIRGIL_WIZARD/src/engine/x86-64/X86_64PreGenStubs.v3	/^def pregen_header = Ref<X86_64PreGenHeader>.at(pregen_buffer, 0);$/;"	d
pregen_header_size	$VIRGIL_WIZARD/src/engine/x86-64/X86_64PreGenStubs.v3	/^var pregen_header_size = X86_64PreGenHeader.size;$/;"	d
pregen_time_us	$VIRGIL_WIZARD/src/engine/Metrics.v3	/^	def pregen_time_us	= t("pregen:time_us", "Time taken to create pregen asm stubs");$/;"	d
preopen	$VIRGIL_WIZARD/src/modules/wasi/WasiFdMap.v3	/^class WasiFd(sysfd: int, ftype: wasi_filetype, preopen: bool, path: string) {$/;"	d
prepareLoop	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def prepareLoop(resolver: SpcMoveResolver) {$/;"	m
prepareReturnCall	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def prepareReturnCall(sig: SigDecl) {$/;"	m
preprocess	$VIRGIL_WIZARD/src/engine/Instantiator.v3	/^	def preprocess(error: ErrorGen, module: Module, imports: Array<Exportable>) { }$/;"	m
preprocess	$VIRGIL_WIZARD/src/modules/HostModuleBuilder.v3	/^	def preprocess(error: ErrorGen, module: Module, result: Array<Exportable>) {$/;"	m
preprocess	$VIRGIL_WIZARD/src/modules/wizeng/WizengModule.v3	/^	def preprocess(error: ErrorGen, module: Module, result: Array<Exportable>) {$/;"	m
prev	$VIRGIL_WIZARD/src/engine/compiler/RegAlloc.v3	/^private class SpcRaPoolLink(reg: Reg, var prev: SpcRaPoolLink, var next: SpcRaPoolLink) {$/;"	d
prev	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^private class V3HostFrame(prev: V3Frame) extends HostFrame {$/;"	d
prev	$VIRGIL_WIZARD/src/engine/x86-64/Redzones.v3	/^class RedZone(start: Pointer, end: Pointer, var prev: RedZone, var next: RedZone) {$/;"	d
print	$VIRGIL_WIZARD/src/monitors/BranchMonitor.v3	/^def print(out: TraceBuilder, module: Module, ins: ControlInstrumentation, unused: void) {$/;"	m
print	$VIRGIL_WIZARD/src/monitors/ControlMonitor.v3	/^def print(out: TraceBuilder, funcs: Vector<(Module, ControlInstrumentation)>) {$/;"	m
print	$VIRGIL_WIZARD/src/monitors/MemStatsMonitor.v3	/^def print(out: TraceBuilder, stats: MemStats, unused: void) {$/;"	m
print	$VIRGIL_WIZARD/src/util/CfgPrinter.v3	/^	def print(module: Module, func: FuncDecl) {$/;"	m
print	$VIRGIL_WIZARD/src/util/OptionsRegistry.v3	/^	def print(buf: StringBuilder, isMonitorOpt: bool) {$/;"	m
printCSV	$VIRGIL_WIZARD/src/monitors/BranchMonitor.v3	/^def printCSV(out: TraceBuilder, module: Module, ins: ControlInstrumentation, unused: void){$/;"	m
printCfgEntries	$VIRGIL_WIZARD/src/monitors/ControlMonitor.v3	/^def printCfgEntries(out: TraceBuilder, p: CfgPrinter, module: Module, ins: ControlInstrumentation) {$/;"	m
printCode	$VIRGIL_WIZARD/src/monitors/BranchMonitor.v3	/^def printCode(out: TraceBuilder, module: Module, bi: BytecodeIterator, ins: ControlInstrumentation) {$/;"	m
printCodeBytes	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def printCodeBytes(sb: StringBuilder, from: u64, to: u64) {$/;"	m
printCodeBytes	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def printCodeBytes(sb: StringBuilder, from: u64, to: u64) {$/;"	m
printHelp	$VIRGIL_WIZARD/src/engine/EngineOptions.v3	/^	def printHelp(out: TraceBuilder) {$/;"	f
printHelp	$VIRGIL_WIZARD/src/engine/Execute.v3	/^	def printHelp(out: TraceBuilder) {$/;"	f
printHelp	$VIRGIL_WIZARD/src/engine/TraceOptions.v3	/^	def printHelp(out: TraceBuilder) {$/;"	f
printHelp	$VIRGIL_WIZARD/src/modules/wasi/WasiOptions.v3	/^	def printHelp(out: TraceBuilder) {$/;"	f
printHelp	$VIRGIL_WIZARD/src/monitors/MonitorOptions.v3	/^	def printHelp(out: TraceBuilder) {$/;"	f
printHelp	$VIRGIL_WIZARD/src/monitors/MonitorRegistry.v3	/^	def printHelp() {$/;"	f
printHelp	$VIRGIL_WIZARD/src/wizeng.main.v3	/^	def printHelp(str: string) {$/;"	f
printVersion	$VIRGIL_WIZARD/src/wizeng.main.v3	/^	def printVersion(str: string) {$/;"	f
probe	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	var probe: (CodeValidator, int, Opcode) -> void;$/;"	d
probe	$VIRGIL_WIZARD/src/engine/Probe.v3	/^private class ProbeElem(probe: Probe) {$/;"	d
probe	$VIRGIL_WIZARD/src/monitors/InstrCountMonitor.v3	/^	var probe: CountProbe;$/;"	d
probe	$VIRGIL_WIZARD/src/util/ProbeUtil.v3	/^class SamplingProbe(probe: Probe) extends Probe {$/;"	d
probeCallFreesRegs	$VIRGIL_WIZARD/src/engine/Tuning.v3	/^	def probeCallFreesRegs = true;		\/\/ probe calls frees registers in abstract state$/;"	d
probeNonLocalJumps	$VIRGIL_WIZARD/src/monitors/debug/StackCheck.v3	/^	private def probeNonLocalJumps(mm: ModuleInstrumenter, func: FuncDecl) {$/;"	m
probeSpillMode	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def probeSpillMode = if(SpcTuning.probeCallFreesRegs, SpillMode.SAVE_AND_FREE_REGS, SpillMode.SAVE_ONLY);$/;"	d
probe_fires	$VIRGIL_WIZARD/src/engine/Metrics.v3	/^	var probe_fires		= register(Metric.new("probes:fired", "count", "Number of calls to Probe.fire()"));$/;"	d
probedDispatchTableOffset	$VIRGIL_WIZARD/src/engine/x86-64/X86_64PreGenStubs.v3	/^	+16	probedDispatchTableOffset:	i32;	\/\/ dispatch table when probes enabled$/;"	d
probes	$VIRGIL_WIZARD/src/engine/Instrumentation.v3	/^	def probes = ProbeList.new();		\/\/ probes on the global interpreter loop$/;"	d
probes	$VIRGIL_WIZARD/src/engine/Module.v3	/^	var probes: Array<Array<Probe>>;$/;"	d
processEvent	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^	private def processEvent(event: WasmEvent) {$/;"	m
processFunction	$VIRGIL_WIZARD/src/engine/Instantiator.v3	/^	def processFunction(error: ErrorGen, name: string, decl: FuncDecl) -> Exportable { return null; }$/;"	m
processFunction	$VIRGIL_WIZARD/src/modules/DynInstrModule.v3	/^	def processFunction(error: ErrorGen, name: string, decl: FuncDecl) -> Exportable {$/;"	m
processGlobal	$VIRGIL_WIZARD/src/engine/Instantiator.v3	/^	def processGlobal(error: ErrorGen, name: string, decl: GlobalDecl) -> Exportable { return null; }$/;"	m
processImport	$VIRGIL_WIZARD/src/engine/Instantiator.v3	/^	def processImport(decl: Decl, f: (ImportProcessor, string) -> Exportable) -> Exportable {$/;"	m
processMemory	$VIRGIL_WIZARD/src/engine/Instantiator.v3	/^	def processMemory(error: ErrorGen, name: string, decl: MemoryDecl) -> Exportable { return null; }$/;"	m
processTable	$VIRGIL_WIZARD/src/engine/Instantiator.v3	/^	def processTable(error: ErrorGen, name: string, decl: TableDecl) -> Exportable { return null; }$/;"	m
processTag	$VIRGIL_WIZARD/src/engine/Instantiator.v3	/^	def processTag(error: ErrorGen, name: string, decl: TagDecl) -> Exportable { return null; }$/;"	m
process_cputime_id	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	process_cputime_id,$/;"	d
processors	$VIRGIL_WIZARD/src/engine/Instantiator.v3	/^	def processors = Vector<ImportProcessor>.new();$/;"	d
program_args	$VIRGIL_WIZARD/src/modules/ModuleLinker.v3	/^		   program_args: Array<string>,$/;"	d
protect	$VIRGIL_WIZARD/src/engine/x86-64/Mmap.v3	/^	def protect(start: Pointer, size: u64, prot: int) -> bool {$/;"	f
push	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	def push(x: Array<byte>, xpos: int, xlength: int) {$/;"	m
push	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	def push(v: ValueType) {$/;"	m
push	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^	def push(val: Value);$/;"	m
push	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def push(flags: byte, reg: Reg, const: int) {$/;"	m
push	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def push(val: Value) { values.push(val); }$/;"	m
push	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	def push(v: Value) {$/;"	m
push	$VIRGIL_WIZARD/src/util/ControlStack.v3	/^	private def push(opcode: Opcode) -> ControlStackEntry<B> {$/;"	m
pushAnchor	$VIRGIL_WIZARD/src/monitors/LoopTraceMonitor.v3	/^	def pushAnchor(anchor_id: u30) {$/;"	m
pushBlock	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def pushBlock(params: Array<ValueType>, results: Array<ValueType>, end_label: MasmLabel) -> SpcControl {$/;"	m
pushBranchTable	$VIRGIL_WIZARD/src/monitors/LoopTraceMonitor.v3	/^	def pushBranchTable(which: u30) {$/;"	m
pushControl	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	def pushControl(opcode: u16, params: Array<ValueType>, results: Array<ValueType>, val_stack_top: int) -> ControlEntry {$/;"	m
pushControl	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	private def pushControl(opcode: u16, params: Array<ValueType>, results: Array<ValueType>, label: MasmLabel) -> SpcControl {$/;"	m
pushFrame	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def pushFrame(f: Function, arity: int) {$/;"	m
pushIf	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def pushIf(params: Array<ValueType>, results: Array<ValueType>, else_label: MasmLabel, end_label: MasmLabel) -> SpcControl {$/;"	m
pushLocals	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def pushLocals(count: u32, vtc: ValueTypeCode) {$/;"	m
pushLoop	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def pushLoop(params: Array<ValueType>, results: Array<ValueType>, start_label: MasmLabel) -> SpcControl {$/;"	m
pushN	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^	def pushN(vs: Range<Value>);$/;"	m
pushN	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def pushN(vs: Range<Value>) { for (i < vs.length) push(vs[i]); }$/;"	m
pushN	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	def pushN(vs: Range<Value>) {$/;"	m
pushNotTaken	$VIRGIL_WIZARD/src/monitors/LoopTraceMonitor.v3	/^	def pushNotTaken() {$/;"	m
pushPair	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	def pushPair<T>(tag: byte, bits: T) {$/;"	m
pushResults	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def pushResults(results: Range<ValueType>) {$/;"	m
pushRspPointer	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	def pushRspPointer(p: Pointer) -> Pointer {$/;"	m
pushTaken	$VIRGIL_WIZARD/src/monitors/LoopTraceMonitor.v3	/^	def pushTaken() {$/;"	m
pushTypes	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	def pushTypes(r: Array<ValueType>) {$/;"	m
pushV	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def pushV(v: SpcVal) {$/;"	m
pushVals	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^	def pushVals(vals: Range<Value>);$/;"	m
push_Object	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def push_Object(v: Object);$/;"	m
push_Value	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def push_Value(tv: TypeVar, v: Value);$/;"	m
push_exnref	$VIRGIL_WIZARD/src/engine/Module.v3	/^type ExHandler(index: int, handler_pc: int, push_exnref: bool, ex_slot: int, val_stack_top: int, sidetable_pos: int) #unboxed { }$/;"	d
push_f32	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def push_f32(v: float);$/;"	m
push_f64	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def push_f64(v: double);$/;"	m
push_u32	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def push_u32(v: u32);$/;"	m
push_u64	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def push_u64(v: u64);$/;"	m
push_v128	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def push_v128(v: v128);$/;"	m
pusha	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^	def pusha(size: SizeConstraint, val: u64) {$/;"	m
pushd	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^	def pushd(val: double);$/;"	m
pushd	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def pushd(val: double) { values.push(Value.F64(u64.view(val))); }$/;"	m
pushf	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^	def pushf(val: float);$/;"	m
pushf	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def pushf(val: float) { values.push(Value.F32(u32.view(val))); }$/;"	m
pushi	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^	def pushi(val: i32);$/;"	m
pushi	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def pushi(val: i32) { values.push(Value.I32(u32.view(val))); }$/;"	m
pushi	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	def pushi(v: int) {$/;"	m
pushi16	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def pushi16(val: i16) { values.push(Value.I32(u32.view(val))); }$/;"	m
pushi8	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def pushi8(val: i8) { values.push(Value.I32(u32.view(val))); }$/;"	m
pushl	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^	def pushl(val: i64);$/;"	m
pushl	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def pushl(val: i64) { values.push(Value.I64(u64.view(val))); }$/;"	m
pushl16	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def pushl16(val: i16) { values.push(Value.I64(u64.view(val))); }$/;"	m
pushl32	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def pushl32(val: i32) { values.push(Value.I64(u64.view(val))); }$/;"	m
pushl8	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def pushl8(val: i8) { values.push(Value.I64(u64.view(val))); }$/;"	m
pushs	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def pushs(low: u64, high: u64) { values.push(Value.V128(low, high)); }$/;"	m
pushu	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^	def pushu(val: u32);$/;"	m
pushu	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def pushu(val: u32) { values.push(Value.I32(val)); }$/;"	m
pushu	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	def pushu(v: u32) {$/;"	m
pushu16	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def pushu16(val: u16) { values.push(Value.I32(val)); }$/;"	m
pushu8	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def pushu8(val: u8) { values.push(Value.I32(val)); }$/;"	m
pushw	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^	def pushw(val: u64);$/;"	m
pushw	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def pushw(val: u64) { values.push(Value.I64(val)); }$/;"	m
pushw	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	def pushw(v: u64) {$/;"	m
pushw16	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def pushw16(val: u16) { values.push(Value.I64(val)); }$/;"	m
pushw32	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def pushw32(val: u32) { values.push(Value.I64(val)); }$/;"	m
pushw8	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def pushw8(val: u8) { values.push(Value.I64(val)); }$/;"	m
pushz	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^	def pushz(val: bool);$/;"	m
pushz	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def pushz(val: bool) { values.push(if(val, Values.I32_1, Values.I32_0)); }$/;"	m
put	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def put(opcode: Opcode) {$/;"	m
putArray	$VIRGIL_WIZARD/src/engine/Trace.v3	/^	def putArray<T>(r: Range<T>, render: (T, StringBuilder) -> StringBuilder) -> this {$/;"	m
putBrEntry	$VIRGIL_WIZARD/src/engine/Sidetable.v3	/^	def putBrEntry(v: Vector<int>, dpc: int, valcount: int, popcount: int, dstp: int) {$/;"	f
putCatchEntry	$VIRGIL_WIZARD/src/engine/Sidetable.v3	/^	def putCatchEntry(v: Vector<int>, handler_pc: int, val_stack_top: int, sidetable_pos: int) {$/;"	f
putCopy	$VIRGIL_WIZARD/src/monitors/LoopTraceMonitor.v3	/^	def putCopy(all: Vector<(Array<TraceEntry>, u32)>, t: (Range<TraceEntry>, u32)) {$/;"	m
putCount	$VIRGIL_WIZARD/src/monitors/ControlMonitor.v3	/^def putCount(out: TraceBuilder, count: u64) {$/;"	m
putCsvHeader	$VIRGIL_WIZARD/src/util/TraceUtil.v3	/^	def putCsvHeader(buf: StringBuilder) {$/;"	m
putCsvRow	$VIRGIL_WIZARD/src/util/TraceUtil.v3	/^	def putCsvRow(buf: StringBuilder) {$/;"	m
putEntry	$VIRGIL_WIZARD/src/util/CfgPrinter.v3	/^	private def putEntry(pc: int, instr: string) {$/;"	m
putInstr	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def putInstr(out: StringBuilder, module: Module, d: DataReader) -> this {$/;"	m
putInstrC	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def putInstrC(out: StringBuilder, module: Module, codeptr: CodePtr) -> this {$/;"	m
putList	$VIRGIL_WIZARD/src/engine/Trace.v3	/^	def putList<T>(list: List<T>, render: (T, StringBuilder) -> StringBuilder) -> this {$/;"	m
putPcAndInstr	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def putPcAndInstr(out: TraceBuilder, module: Module, func: FuncDecl, pc: int, orig: bool) -> this {$/;"	m
putPcAndInstr2	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def putPcAndInstr2(out: TraceBuilder, module: Module, code: Range<byte>, pc: int) -> this {$/;"	m
putResumeEntry	$VIRGIL_WIZARD/src/engine/Sidetable.v3	/^	def putResumeEntry(v: Vector<int>, nargs: int, nhandlers: int) {$/;"	f
putSeq	$VIRGIL_WIZARD/src/monitors/LoopTraceMonitor.v3	/^	def putSeq(seq: Range<TraceEntry>, buf: StringBuilder) {$/;"	m
putShortX	$VIRGIL_WIZARD/src/util/ErrorBuilder.v3	/^	def putShortX(val: u64) -> this { \/\/ XXX: move into v3 lib\/StringBuilder?$/;"	m
putTableHeader	$VIRGIL_WIZARD/src/util/TraceUtil.v3	/^	def putTableHeader(buf: TraceBuilder) {$/;"	m
putTableRow	$VIRGIL_WIZARD/src/util/TraceUtil.v3	/^	def putTableRow(buf: TraceBuilder) {$/;"	m
putTuple	$VIRGIL_WIZARD/src/engine/Trace.v3	/^	def putTuple<T>(r: Range<T>, render: (T, StringBuilder) -> StringBuilder) -> this {$/;"	m
putUid	$VIRGIL_WIZARD/src/engine/Type.v3	/^	def putUid(buf: StringBuilder) -> StringBuilder {$/;"	m
putWizeng	$VIRGIL_WIZARD/src/wizeng.main.v3	/^def putWizeng(out: StringBuilder) -> StringBuilder {$/;"	m
put_blockType	$VIRGIL_WIZARD/src/util/WasmAsm.v3	/^	def put_blockType(t: ValueType) -> this {$/;"	m
put_s32leb	$VIRGIL_WIZARD/src/util/WasmAsm.v3	/^	def put_s32leb(data: int) -> this {$/;"	m
put_u32leb	$VIRGIL_WIZARD/src/util/WasmAsm.v3	/^	def put_u32leb(v: int) -> this {$/;"	m
puta	$VIRGIL_WIZARD/src/modules/wizeng/WizengModule.v3	/^	def puta(args: Range<Value>) -> HostResult {$/;"	m
putc	$VIRGIL_WIZARD/src/modules/wizeng/WizengModule.v3	/^	putc(SigCache.i_v, WizengModule.putc),$/;"	d
putd_rjustified	$VIRGIL_WIZARD/src/engine/Trace.v3	/^	def putd_rjustified<T>(width: int, val: T) -> this {$/;"	m
puti	$VIRGIL_WIZARD/src/modules/wizeng/WizengModule.v3	/^	puti(SigCache.i_v, WizengModule.puti),$/;"	d
putr_void	$VIRGIL_WIZARD/src/engine/Trace.v3	/^	def putr_void(r: Range<byte>) {$/;"	m
puts	$VIRGIL_WIZARD/src/modules/wizeng/WizengModule.v3	/^	puts(SigCache.ii_v, WizengModule.puts),$/;"	d
putsln	$VIRGIL_WIZARD/src/engine/Trace.v3	/^	def putsln(str: string) -> this {$/;"	m
putv	$VIRGIL_WIZARD/src/engine/Trace.v3	/^	def putv(v: Value) -> this {$/;"	m
query	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	def query() {$/;"	f
quoted	$VIRGIL_WIZARD/src/util/TraceUtil.v3	/^	var quoted: bool;$/;"	d
r_i	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def r_i = S(arr_r, arr_i);$/;"	d
r_r	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def r_r = S(arr_r, arr_r);$/;"	d
random_seed	$VIRGIL_WIZARD/src/modules/wasi/WasiOptions.v3	/^	var random_seed = 0;$/;"	d
range	$VIRGIL_WIZARD/src/engine/Module.v3	/^	def range(orig: Range<byte>) -> Range<byte> {$/;"	m
range	$VIRGIL_WIZARD/src/engine/x86-64/Mmap.v3	/^class Mapping(range: MemoryRange) { }$/;"	d
range_o_32z	$VIRGIL_WIZARD/src/engine/Memory.v3	/^	def range_o_32z(index: u32, max: u32) -> MaybeTrap<Range<byte>> {$/;"	m
range_oil_32	$VIRGIL_WIZARD/src/engine/Memory.v3	/^	def range_oil_32(offset: u32, index: u32, size: u32) -> MaybeTrap<Range<byte>> {$/;"	m
range_oil_64	$VIRGIL_WIZARD/src/engine/Memory.v3	/^	def range_oil_64(offset: u64, index: u64, size: u64) -> MaybeTrap<Range<byte>> {$/;"	m
range_ol_32	$VIRGIL_WIZARD/src/engine/Memory.v3	/^	def range_ol_32(index: u32, size: u32) -> MaybeTrap<Range<byte>> {$/;"	m
range_ol_64	$VIRGIL_WIZARD/src/engine/Memory.v3	/^	def range_ol_64(offset: u64, size: u64) -> MaybeTrap<Range<byte>> {$/;"	m
raw	$VIRGIL_WIZARD/src/engine/Tagging.v3	/^	def raw: int = if(simd, 16, 8);				\/\/ XXX: make unsigned$/;"	d
rbuf	$VIRGIL_WIZARD/src/util/CfgPrinter.v3	/^	private def rbuf = Vector<CfgEdgeChar>.new();$/;"	d
rdtsc	$VIRGIL_WIZARD/src/engine/v3/V3Target.v3	/^	def rdtsc() -> u64 { return u32.view(System.ticksNs()); }$/;"	f
rdtsc	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Target.v3	/^	def rdtsc() -> u64 {$/;"	f
rdtsc	$VIRGIL_WIZARD/src/modules/wizeng/WizengModule.v3	/^	rdtsc(SigCache.v_l, WizengModule.rdtsc),$/;"	d
reachable	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	var reachable = true;$/;"	d
reachable	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	var reachable = true;$/;"	d
reachable	$VIRGIL_WIZARD/src/util/ControlStack.v3	/^	def var reachable = true;$/;"	d
read	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^private class MemoryAccessor<T>(size: byte, log2_size: u3, read: Range<byte> -> T, write: (Range<byte>, T) -> void) { }$/;"	d
readAndCheckContHandlerTable	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	def readAndCheckContHandlerTable(cont: ContDecl, handlers: Array<SuspensionHandler>) {$/;"	m
readAndCheckIndex	$VIRGIL_WIZARD/src/engine/WasmParser.v3	/^	def readAndCheckIndex(quantity: string, max: int) -> (bool, u31) {$/;"	m
readAndCheckTableIndex	$VIRGIL_WIZARD/src/engine/WasmParser.v3	/^	def readAndCheckTableIndex() -> (TableDecl, int) {$/;"	m
readArrayType	$VIRGIL_WIZARD/src/engine/WasmParser.v3	/^	def readArrayType() -> ArrayDecl {$/;"	m
readBlockType	$VIRGIL_WIZARD/src/engine/WasmParser.v3	/^	def readBlockType() -> (Array<ValueType>, Array<ValueType>) {$/;"	m
readBrCastImms	$VIRGIL_WIZARD/src/engine/WasmParser.v3	/^	def readBrCastImms() -> (u32, ValueType.Ref, ValueType.Ref) {$/;"	m
readByte	$VIRGIL_WIZARD/src/engine/WasmParser.v3	/^	def readByte(quantity: string, render: (StringBuilder, byte) -> StringBuilder) -> byte {$/;"	m
readCatches	$VIRGIL_WIZARD/src/engine/WasmParser.v3	/^	def readCatches() -> Array<Catch> {$/;"	m
readCont	$VIRGIL_WIZARD/src/engine/WasmParser.v3	/^	def readCont() -> ContDecl {$/;"	m
readCountAndReserve	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	def readCountAndReserve<T>(quantity: string, vec: Vector<T>, max: u32) -> int {$/;"	m
readCustomSection	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	def readCustomSection(size: u32) {$/;"	m
readDataCountSection	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	def readDataCountSection() {$/;"	m
readDataDecl	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	def readDataDecl(index: int) {$/;"	m
readDataIndex	$VIRGIL_WIZARD/src/engine/WasmParser.v3	/^	def readDataIndex() -> u31 {$/;"	m
readDefArrayType	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	def readDefArrayType(final: bool, supertypes: Array<HeapType>) {$/;"	m
readDefContType	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	def readDefContType(final: bool, supertypes: Array<HeapType>) {$/;"	m
readDefFuncType	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	def readDefFuncType(final: bool, supertypes: Array<HeapType>) {$/;"	m
readDefSingleType	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	def readDefSingleType(pt: int, code: byte, supertypes: Array<HeapType>) {$/;"	m
readDefStructType	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	def readDefStructType(final: bool, supertypes: Array<HeapType>) {$/;"	m
readDefType	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	def readDefType(index: int) {$/;"	m
readDefTypeCode	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	def readDefTypeCode() -> byte {$/;"	m
readElemDecl	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	def readElemDecl(index: int) {$/;"	m
readElemFuncIndexes	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	def readElemFuncIndexes(table_index: int) -> ElemDetails.FuncRefs {$/;"	m
readElemInitExprs	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	def readElemInitExprs(elemType: ValueType) -> ElemDetails.Exprs {$/;"	m
readElemKind	$VIRGIL_WIZARD/src/engine/WasmParser.v3	/^	def readElemKind() {$/;"	m
readElemRef	$VIRGIL_WIZARD/src/engine/WasmParser.v3	/^	def readElemRef() -> ElemDecl {$/;"	m
readElemType	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	def readElemType() -> ValueType.Ref {$/;"	m
readExportDecl	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	def readExportDecl(index: int, exportSet: StringSet) {$/;"	m
readExportWithoutName	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	def readExportWithoutName() -> Decl {$/;"	m
readF32	$VIRGIL_WIZARD/src/engine/WasmParser.v3	/^	def readF32() -> u32 {$/;"	m
readF64	$VIRGIL_WIZARD/src/engine/WasmParser.v3	/^	def readF64() -> u64 {$/;"	m
readFieldIndex	$VIRGIL_WIZARD/src/engine/WasmParser.v3	/^	def readFieldIndex(sdecl: StructDecl) -> int {$/;"	m
readFuncDecl	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	def readFuncDecl(index: int) {$/;"	m
readFuncIndex	$VIRGIL_WIZARD/src/engine/WasmParser.v3	/^	def readFuncIndex() -> u31 {$/;"	m
readFuncRef	$VIRGIL_WIZARD/src/engine/WasmParser.v3	/^	def readFuncRef() -> FuncDecl {$/;"	m
readGlobalDecl	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	def readGlobalDecl(index: int) {$/;"	m
readGlobalRef	$VIRGIL_WIZARD/src/engine/WasmParser.v3	/^	def readGlobalRef() -> GlobalDecl {$/;"	m
readHandlers	$VIRGIL_WIZARD/src/engine/WasmParser.v3	/^	def readHandlers() -> Array<(u32, u32)> {$/;"	m
readHeapType	$VIRGIL_WIZARD/src/engine/WasmParser.v3	/^	def readHeapType() -> HeapType {$/;"	m
readI31OrObject	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	def readI31OrObject(vp: Pointer) -> Value {$/;"	m
readI32	$VIRGIL_WIZARD/src/engine/WasmParser.v3	/^	def readI32() -> i32 {$/;"	m
readI64	$VIRGIL_WIZARD/src/engine/WasmParser.v3	/^	def readI64() -> i64 {$/;"	m
readImportDecl	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	def readImportDecl(index: int) {$/;"	m
readIn	$VIRGIL_WIZARD/src/engine/Memory.v3	/^	def readIn(fd: int, dst_offset: u32, size: u32) -> int {$/;"	m
readIndex	$VIRGIL_WIZARD/src/engine/WasmParser.v3	/^	def readIndex<T>(quantity: string, space: Vector<T>) -> T {$/;"	m
readInitExpr	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	def readInitExpr(quantity: string, expected: ValueType) -> InitExpr {$/;"	m
readIp	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	def readIp() -> Pointer {$/;"	m
readLabel	$VIRGIL_WIZARD/src/engine/WasmParser.v3	/^	def readLabel() -> u32 {$/;"	m
readLabels	$VIRGIL_WIZARD/src/engine/WasmParser.v3	/^	def readLabels() -> Array<u32> {$/;"	m
readLocalIndex	$VIRGIL_WIZARD/src/engine/WasmParser.v3	/^	def readLocalIndex() -> u32 {$/;"	m
readLocals	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	def readLocals(vec: Vector<ValueType>) -> bool {$/;"	m
readLoop	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	def readLoop(thing_name: string, count: int, read: int -> void, outline: Vector<int>) {$/;"	m
readMemLimits	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	def readMemLimits() -> MemLimits {$/;"	m
readMemoryArg	$VIRGIL_WIZARD/src/engine/WasmParser.v3	/^	def readMemoryArg() -> MemArg {$/;"	m
readMemoryDecl	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	def readMemoryDecl(index: int) {$/;"	m
readMemoryIndex	$VIRGIL_WIZARD/src/engine/WasmParser.v3	/^	def readMemoryIndex() -> u31 {$/;"	m
readMemoryRef	$VIRGIL_WIZARD/src/engine/WasmParser.v3	/^	def readMemoryRef(multiMem: bool) -> MemoryDecl {$/;"	m
readMutability	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	def readMutability() -> bool {$/;"	m
readRefType	$VIRGIL_WIZARD/src/engine/WasmParser.v3	/^	def readRefType(isTable: bool) -> ValueType.Ref {$/;"	m
readRetAddr	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	def readRetAddr() -> Pointer {$/;"	m
readSigIndex	$VIRGIL_WIZARD/src/engine/WasmParser.v3	/^	def readSigIndex() -> int {$/;"	m
readSigRef	$VIRGIL_WIZARD/src/engine/WasmParser.v3	/^	def readSigRef() -> SigDecl {$/;"	m
readSizeConstraint	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	def readSizeConstraint(flags: byte, maxLegal32:u64, maxLegal64: u64, quantity: string) -> SizeConstraint {$/;"	m
readStartSection	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	def readStartSection() {$/;"	m
readStorageType	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	def readStorageType() -> StorageType {$/;"	m
readStructType	$VIRGIL_WIZARD/src/engine/WasmParser.v3	/^	def readStructType() -> StructDecl {$/;"	m
readSuspensionHandlers	$VIRGIL_WIZARD/src/engine/WasmParser.v3	/^	def readSuspensionHandlers() -> Array<SuspensionHandler> {$/;"	m
readTableDecl	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	def readTableDecl(index: int) {$/;"	m
readTableImm	$VIRGIL_WIZARD/src/engine/WasmParser.v3	/^	def readTableImm() -> int {$/;"	m
readTableIndex	$VIRGIL_WIZARD/src/engine/WasmParser.v3	/^	def readTableIndex() -> u31 {$/;"	m
readTableLimits	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	def readTableLimits() -> TableLimits {$/;"	m
readTableRef	$VIRGIL_WIZARD/src/engine/WasmParser.v3	/^	def readTableRef() -> TableDecl {$/;"	m
readTagDecl	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	def readTagDecl(index: int) {$/;"	m
readTagRef	$VIRGIL_WIZARD/src/engine/WasmParser.v3	/^	def readTagRef() -> TagDecl {$/;"	m
readTypeCode	$VIRGIL_WIZARD/src/engine/WasmParser.v3	/^	def readTypeCode() -> i32 {$/;"	m
readU32	$VIRGIL_WIZARD/src/engine/WasmParser.v3	/^	def readU32(quantity: string, max: u32) -> u32 {$/;"	m
readU32_i	$VIRGIL_WIZARD/src/engine/WasmParser.v3	/^	def readU32_i(quantity: string, max: u32) -> int {$/;"	m
readU32orU64	$VIRGIL_WIZARD/src/engine/WasmParser.v3	/^	def readU32orU64(is64: bool, quantity: string, max: u64) -> u64 {$/;"	m
readU64	$VIRGIL_WIZARD/src/engine/WasmParser.v3	/^	def readU64(quantity: string, max: u64) -> u64 {$/;"	m
readUtf8String	$VIRGIL_WIZARD/src/engine/WasmParser.v3	/^	def readUtf8String(quantity: string) -> string {$/;"	m
readValue	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	def readValue(base: Pointer, offset: int) -> Value {$/;"	m
readValueType	$VIRGIL_WIZARD/src/engine/WasmParser.v3	/^	def readValueType() -> ValueType {$/;"	m
readValueTypeSuffix	$VIRGIL_WIZARD/src/engine/WasmParser.v3	/^	def readValueTypeSuffix(pt: int, code: int) -> ValueType {$/;"	m
readValueTypes	$VIRGIL_WIZARD/src/engine/WasmParser.v3	/^	def readValueTypes(quantity: string, limit: u32) -> Array<ValueType> {$/;"	m
read_BlockTypeCode	$VIRGIL_WIZARD/src/engine/CodePtr.v3	/^	def read_BlockTypeCode() -> BlockTypeCode {$/;"	m
read_BrOnCastImm	$VIRGIL_WIZARD/src/engine/CodePtr.v3	/^	def read_BrOnCastImm() -> BrOnCastImm {$/;"	m
read_MemArg	$VIRGIL_WIZARD/src/engine/CodePtr.v3	/^	def read_MemArg() -> MemArg {$/;"	m
read_ValueTypeCode	$VIRGIL_WIZARD/src/engine/CodePtr.v3	/^	def read_ValueTypeCode() -> ValueTypeCode {$/;"	m
read_ValueTypeCodes	$VIRGIL_WIZARD/src/engine/CodePtr.v3	/^	def read_ValueTypeCodes() -> Array<ValueTypeCode> {$/;"	m
read_catch	$VIRGIL_WIZARD/src/engine/CodePtr.v3	/^	def read_catch() -> BpCatchCode { \/\/ TODO: factor out to WasmReader$/;"	m
read_catches	$VIRGIL_WIZARD/src/engine/CodePtr.v3	/^	def read_catches() -> Array<BpCatchCode> {$/;"	m
read_counts	$VIRGIL_WIZARD/src/monitors/MemStatsMonitor.v3	/^	var read_counts = Array<u64>.new(int.!((decl.size.initial << decl.log2_pageSize) + (1uL << log2_chunk_size) - 1) >> log2_chunk_size);$/;"	d
read_double	$VIRGIL_WIZARD/src/engine/Memory.v3	/^	def read_double(offset: u32, index: u32) -> MaybeTrap<double> {$/;"	m
read_float	$VIRGIL_WIZARD/src/engine/Memory.v3	/^	def read_float(offset: u32, index: u32) -> MaybeTrap<float> {$/;"	m
read_handlers	$VIRGIL_WIZARD/src/engine/CodePtr.v3	/^	def read_handlers() -> Array<(u31, u31)> {$/;"	m
read_labels	$VIRGIL_WIZARD/src/engine/CodePtr.v3	/^	def read_labels() -> Array<u31> {$/;"	m
read_linux_symlink	$VIRGIL_WIZARD/src/modules/wasi/x86-64-linux/WspOnePathResolver-x86-64-linux.v3	/^def read_linux_symlink(path: string) -> string {$/;"	m
read_opcode	$VIRGIL_WIZARD/src/engine/CodePtr.v3	/^	def read_opcode() -> Opcode {$/;"	m
read_opcode_and_skip	$VIRGIL_WIZARD/src/engine/CodePtr.v3	/^	def read_opcode_and_skip(func: FuncDecl) -> Opcode {$/;"	m
read_opcode_but_skip_probe	$VIRGIL_WIZARD/src/engine/CodePtr.v3	/^	def read_opcode_but_skip_probe(func: FuncDecl) -> Opcode {$/;"	m
read_orig_opcode	$VIRGIL_WIZARD/src/engine/CodePtr.v3	/^	def read_orig_opcode(b: byte) -> Opcode {$/;"	m
read_suspension_handler	$VIRGIL_WIZARD/src/engine/CodePtr.v3	/^	def read_suspension_handler() -> SuspensionHandler {$/;"	m
read_suspension_handlers	$VIRGIL_WIZARD/src/engine/CodePtr.v3	/^	def read_suspension_handlers() -> Array<SuspensionHandler> {$/;"	m
read_u128	$VIRGIL_WIZARD/src/engine/Memory.v3	/^	def read_u128(offset: u32, index: u32) -> MaybeTrap<(u64, u64)> {$/;"	m
read_u16	$VIRGIL_WIZARD/src/engine/Memory.v3	/^	def read_u16(offset: u32, index: u32) -> MaybeTrap<u16> {$/;"	m
read_u32	$VIRGIL_WIZARD/src/engine/Memory.v3	/^	def read_u32(offset: u32, index: u32) -> MaybeTrap<u32> {$/;"	m
read_u64	$VIRGIL_WIZARD/src/engine/Memory.v3	/^	def read_u64(offset: u32, index: u32) -> MaybeTrap<u64> {$/;"	m
read_u8	$VIRGIL_WIZARD/src/engine/Memory.v3	/^	def read_u8(offset: u32, index: u32) -> MaybeTrap<u8> {$/;"	m
read_uleb31	$VIRGIL_WIZARD/src/engine/CodePtr.v3	/^	def read_uleb31() -> u31 {$/;"	m
reader	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^	private def reader: TextReader = TextReader.new("trace", input);$/;"	d
reads	$VIRGIL_WIZARD/src/monitors/GlobalsMonitor.v3	/^	var reads = Vector<u64>.new();$/;"	d
realtime	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	realtime,$/;"	d
reason	$VIRGIL_WIZARD/src/engine/Execute.v3	/^	case Trap(reason: TrapReason, trace: bool);$/;"	d
reason	$VIRGIL_WIZARD/src/engine/Trap.v3	/^type MaybeTrap<T>(result: T, reason: TrapReason) #unboxed {$/;"	d
reassign	$VIRGIL_WIZARD/src/engine/compiler/RegAlloc.v3	/^	def reassign(reg: Reg, before: int, after: int) -> bool {$/;"	m
recGroups	$VIRGIL_WIZARD/src/engine/Canon.v3	/^	def recGroups = HashMap<RecGroup, RecGroup>.new(RecGroup.hash, RecGroup.equal);$/;"	d
recgrp_index	$VIRGIL_WIZARD/src/engine/Type.v3	/^	var recgrp_index = 0;$/;"	d
record	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^	def record(b: u8, cost: u64) {$/;"	m
recordCurIpForTraps	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^var recordCurIpForTraps = !FeatureDisable.stacktraces;$/;"	d
recordCurSourceLoc	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def recordCurSourceLoc() {$/;"	m
recordRel32	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def recordRel32(pos: int, delta: int, addr: X86_64Addr) {$/;"	m
recordRetSourceLoc	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def recordRetSourceLoc();$/;"	m
recordRetSourceLoc	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def recordRetSourceLoc() {$/;"	m
recordSourceLoc	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def recordSourceLoc(offset: int) {$/;"	m
record_copy	$VIRGIL_WIZARD/src/monitors/MemStatsMonitor.v3	/^	def record_copy(size: u64) {$/;"	m
record_fill	$VIRGIL_WIZARD/src/monitors/MemStatsMonitor.v3	/^	def record_fill(size: u64) {$/;"	m
record_init	$VIRGIL_WIZARD/src/monitors/MemStatsMonitor.v3	/^	def record_init(size: u64) {$/;"	m
record_read	$VIRGIL_WIZARD/src/monitors/MemStatsMonitor.v3	/^	def record_read(address: u64, size: u64) {$/;"	m
record_write	$VIRGIL_WIZARD/src/monitors/MemStatsMonitor.v3	/^	def record_write(address: u64, size: u64) {$/;"	m
recovered_bytecodes	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^	var recovered_bytecodes = HashMap<u32, HashMap<u32, u8>>.new(int.!<u32>, u32.==);$/;"	d
recursivelyRemoveItem	$VIRGIL_WIZARD/src/engine/compiler/RegAlloc.v3	/^	private def recursivelyRemoveItem(i: int, l: List<int>) -> List<int> {$/;"	m
recycleStack	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	def recycleStack(stack: X86_64Stack) {$/;"	f
recycleWasmStack	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Target.v3	/^	def recycleWasmStack = X86_64StackManager.recycleStack;$/;"	d
redzones_add	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Target.v3	/^	def redzones_add(mapping: Mapping, offset: u32, size: u32) -> bool {$/;"	f
ref0	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	def ref0(target: ControlEntry, pos: int) {$/;"	m
refC	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	def refC(target: ControlEntry, tag: TagDecl, exnref: bool, name: string) {$/;"	m
refElse	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	def refElse(target: ControlEntry, pos: int) {$/;"	m
refR	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	def refR(n_args: int, n_handlers: int) {$/;"	m
refS	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	def refS(target: ControlEntry, pos: int, val_stack_top: int) {$/;"	m
refV	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	def refV(target: ControlEntry, pos: int, valcount: int, popcount: int) {$/;"	m
ref_as_non_null	$VIRGIL_WIZARD/src/util/WasmAsm.v3	/^	def ref_as_non_null() -> this {$/;"	m
ref_cast	$VIRGIL_WIZARD/src/util/WasmAsm.v3	/^	def ref_cast(ft: int, tt: int) -> this {$/;"	m
ref_eq	$VIRGIL_WIZARD/src/util/WasmAsm.v3	/^	def ref_eq() -> this {$/;"	m
ref_is_null	$VIRGIL_WIZARD/src/util/WasmAsm.v3	/^	def ref_is_null() -> this {$/;"	m
ref_null	$VIRGIL_WIZARD/src/util/WasmAsm.v3	/^	def ref_null(i: int) -> this {$/;"	m
ref_test	$VIRGIL_WIZARD/src/util/WasmAsm.v3	/^	def ref_test(ft: int, tt: int) -> this {$/;"	m
reffed	$VIRGIL_WIZARD/src/engine/Module.v3	/^	var reffed: bool;$/;"	d
reg	$VIRGIL_WIZARD/src/engine/compiler/RegAlloc.v3	/^private class SpcRaPoolLink(reg: Reg, var prev: SpcRaPoolLink, var next: SpcRaPoolLink) {$/;"	d
reg	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^type SpcVal(flags: byte, reg: Reg, const: int) #unboxed {$/;"	d
regAlloc	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^class SpcState(regAlloc: RegAlloc) {$/;"	d
regConfig	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^class MacroAssembler(valuerep: Tagging, regConfig: RegConfig) {$/;"	d
regConfig	$VIRGIL_WIZARD/src/engine/compiler/RegAlloc.v3	/^class SpcRaPool(regConfig: RegConfig, poolIndex: int) {$/;"	d
regPools	$VIRGIL_WIZARD/src/engine/compiler/RegSet.v3	/^	var regPools: Array<RegPool32>;$/;"	d
regRefCounts	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^def regRefCounts = Array<int>.new(128); \/\/ used for paranoid checking of regalloc state$/;"	d
regSet	$VIRGIL_WIZARD/src/engine/compiler/RegSet.v3	/^class RegConfig(regSet: RegSet) {$/;"	d
regToPool	$VIRGIL_WIZARD/src/engine/compiler/RegAlloc.v3	/^	private def regToPool = poolMap.regToPool;	\/\/ for quicker access$/;"	d
regToPool	$VIRGIL_WIZARD/src/engine/compiler/RegSet.v3	/^	def regToPool = Array<i8>.new(numRegs);$/;"	d
register	$VIRGIL_WIZARD/src/engine/Metrics.v3	/^	private def register(m: Metric) -> Metric {$/;"	f
register	$VIRGIL_WIZARD/src/modules/HostModuleBuilder.v3	/^	def register(exposed: bool) {$/;"	m
register	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	def register(w: WspOneModule) {$/;"	f
registerDefaultMode	$VIRGIL_WIZARD/src/engine/Execute.v3	/^	def registerDefaultMode(name: string, tiering: ExecutionStrategy, help: string) -> ExecutionStrategy {$/;"	f
registerMode	$VIRGIL_WIZARD/src/engine/Execute.v3	/^	def registerMode(name: string, tiering: ExecutionStrategy, help: string) -> ExecutionStrategy {$/;"	f
regs	$VIRGIL_WIZARD/src/engine/compiler/RegSet.v3	/^class RegSet(regs: Array<Reg>, names: Array<string>) {$/;"	d
regs	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def regs = xenv;$/;"	d
rel	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	def rel(pos: int) -> int {$/;"	m
rel	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def rel(d: DataReader, pt: int) -> this {$/;"	m
remember_stored	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^enum SpillMode(free_regs: bool, remember_stored: bool) {$/;"	d
remove	$VIRGIL_WIZARD/src/engine/Probe.v3	/^	def remove(p: Probe) {$/;"	m
remove	$VIRGIL_WIZARD/src/engine/compiler/RegAlloc.v3	/^	def remove() -> this {$/;"	m
remove	$VIRGIL_WIZARD/src/engine/x86-64/Redzones.v3	/^	def remove() {$/;"	m
removeGlobalProbe	$VIRGIL_WIZARD/src/engine/Instrumentation.v3	/^	def removeGlobalProbe(p: Probe) {$/;"	f
removeLocalProbe	$VIRGIL_WIZARD/src/engine/Instrumentation.v3	/^	def removeLocalProbe(module: Module, func_id: int, offset: int, p: Probe) {$/;"	f
remove_probe	$VIRGIL_WIZARD/src/modules/DynInstrModule.v3	/^	def remove_probe(args: Range<Value>) -> HostResult {$/;"	m
render	$VIRGIL_WIZARD/src/engine/Execute.v3	/^	def render(buf: StringBuilder) -> StringBuilder {$/;"	m
render	$VIRGIL_WIZARD/src/engine/Host.v3	/^	def render(buf: StringBuilder) -> StringBuilder {$/;"	m
render	$VIRGIL_WIZARD/src/engine/Instance.v3	/^	def render(buf: StringBuilder) -> StringBuilder {$/;"	m
render	$VIRGIL_WIZARD/src/engine/Meta.v3	/^	def render(buf: StringBuilder) -> StringBuilder {$/;"	m
render	$VIRGIL_WIZARD/src/engine/Module.v3	/^	def render(names: NameSection, buf: StringBuilder) -> StringBuilder {$/;"	m
render	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def render(buf: StringBuilder, code: u16) -> StringBuilder {$/;"	f
render	$VIRGIL_WIZARD/src/engine/Type.v3	/^	def render(vt: ValueType, seen: List<Decl>, buf: StringBuilder) -> StringBuilder {$/;"	f
render	$VIRGIL_WIZARD/src/engine/compiler/RegAlloc.v3	/^	def render(buf: StringBuilder, regSet: RegSet) -> StringBuilder {$/;"	m
render	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def render(buf: StringBuilder, regSet: RegSet) -> StringBuilder {$/;"	m
render	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	def render(out: StringBuilder) -> StringBuilder;$/;"	m
render	$VIRGIL_WIZARD/src/monitors/LoopTraceMonitor.v3	/^	def render(buf: StringBuilder) -> StringBuilder {$/;"	m
render	$VIRGIL_WIZARD/src/monitors/ProfileMonitor.v3	/^	def render(out: TraceBuilder, depth: int, total: int, maxDepth: int) {$/;"	m
render	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^	def render(sb: StringBuilder) {$/;"	m
render	$VIRGIL_WIZARD/src/util/CfgPrinter.v3	/^	def render(lmax: int, rmax: int, buf: TraceBuilder) -> TraceBuilder {$/;"	m
render	$VIRGIL_WIZARD/src/util/DeclFilter.v3	/^	def render(buf: StringBuilder) -> StringBuilder {$/;"	m
render	$VIRGIL_WIZARD/src/util/ErrorBuilder.v3	/^	def render(code: WasmError, path: string, section: BpSection, error_index: int, error_pos: u64, error_msg: string) -> this {$/;"	m
render	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	def render(buf: StringBuilder) -> StringBuilder {$/;"	m
render2	$VIRGIL_WIZARD/src/engine/Type.v3	/^	def render2(seen: List<Decl>, buf: StringBuilder) -> StringBuilder {$/;"	m
renderAttribute	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	def renderAttribute(buf: StringBuilder, b: byte) -> StringBuilder {$/;"	f
renderBwEdges	$VIRGIL_WIZARD/src/util/CfgPrinter.v3	/^	def renderBwEdges(buf: StringBuilder) -> StringBuilder {$/;"	m
renderBytes	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^	def renderBytes(sb: StringBuilder, data: Array<u8>) {$/;"	m
renderCspList	$VIRGIL_WIZARD/src/engine/Trace.v3	/^	def renderCspList<T>(buf: StringBuilder, list: List<T>, render: (T, StringBuilder) -> StringBuilder) -> StringBuilder {$/;"	f
renderCspRange	$VIRGIL_WIZARD/src/engine/Trace.v3	/^	def renderCspRange<T>(buf: StringBuilder, r: Range<T>, render: (T, StringBuilder) -> StringBuilder) -> StringBuilder {$/;"	f
renderDefTypeCode	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	def renderDefTypeCode(buf: StringBuilder, b: byte) -> StringBuilder {$/;"	f
renderDot	$VIRGIL_WIZARD/src/monitors/ProfileMonitor.v3	/^	def renderDot(out: TraceBuilder, maxDepth: int) {$/;"	m
renderFraction	$VIRGIL_WIZARD/src/util/TraceUtil.v3	/^	def renderFraction(out: StringBuilder, dividend: long, divisor: long, prec: int) -> int {$/;"	f
renderFwEdges	$VIRGIL_WIZARD/src/util/CfgPrinter.v3	/^	def renderFwEdges(buf: StringBuilder) -> StringBuilder {$/;"	m
renderGraph	$VIRGIL_WIZARD/src/monitors/ProfileMonitor.v3	/^	def renderGraph(out: TraceBuilder, depth: int, maxDepth: int, overall: int) {$/;"	m
renderHeader	$VIRGIL_WIZARD/src/monitors/ProfileMonitor.v3	/^	private def renderHeader(out: TraceBuilder) {$/;"	m
renderHeapType	$VIRGIL_WIZARD/src/engine/Type.v3	/^	def renderHeapType(buf: StringBuilder, seen: List<Decl>, nullable: bool, heap: HeapType) -> StringBuilder {$/;"	f
renderImportExportDecl	$VIRGIL_WIZARD/src/objdump.main.v3	/^def renderImportExportDecl(out: StringBuilder, decl: Decl) {$/;"	m
renderImportKind	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	def renderImportKind(buf: StringBuilder, b: byte) -> StringBuilder {$/;"	f
renderIndexedRef	$VIRGIL_WIZARD/src/engine/Type.v3	/^	def renderIndexedRef(buf: StringBuilder, nullable: bool, str: string, index: int) {$/;"	f
renderMatcherPair	$VIRGIL_WIZARD/src/util/DeclFilter.v3	/^def renderMatcherPair(t: (Matcher, Matcher), buf: StringBuilder) -> StringBuilder {$/;"	m
renderMemoryFlags	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	def renderMemoryFlags(buf: StringBuilder, b: byte) -> StringBuilder {$/;"	f
renderMutability	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	def renderMutability(buf: StringBuilder, b: byte) -> StringBuilder {$/;"	f
renderNone	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	def renderNone(buf: StringBuilder, b: byte) -> StringBuilder {$/;"	f
renderParams	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^	def renderParams(sb: StringBuilder, params: Array<Value>) {$/;"	m
renderPercent	$VIRGIL_WIZARD/src/util/TraceUtil.v3	/^	def renderPercent(out: StringBuilder, dividend: long, divisor: long, prec: int) -> int { \/\/ TODO: make into u64$/;"	f
renderSectionName	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	def renderSectionName(buf: StringBuilder, b: byte) -> StringBuilder {$/;"	f
renderShort	$VIRGIL_WIZARD/src/engine/Instance.v3	/^	def renderShort(buf: StringBuilder) -> StringBuilder {$/;"	m
renderSimpleRef	$VIRGIL_WIZARD/src/engine/Type.v3	/^	def renderSimpleRef(buf: StringBuilder, nullable: bool, str: string) {$/;"	f
renderState	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	def renderState(loc: DynamicLoc) {$/;"	f
renderStorageType	$VIRGIL_WIZARD/src/engine/Type.v3	/^	def renderStorageType(t: StorageType, buf: StringBuilder) -> StringBuilder {$/;"	f
renderSuperTypes	$VIRGIL_WIZARD/src/objdump.main.v3	/^def renderSuperTypes<T>(out: StringBuilder, t: Array<T>, render: (T, StringBuilder) -> StringBuilder) -> StringBuilder {$/;"	m
renderTableFlags	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	def renderTableFlags(buf: StringBuilder, b: byte) -> StringBuilder {$/;"	f
renderThrowable	$VIRGIL_WIZARD/src/util/TraceUtil.v3	/^	def renderThrowable(out: StringBuilder, thrown: Throwable) -> StringBuilder {$/;"	f
renderTrace	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def renderTrace(buf: TraceBuilder, regSet: RegSet) -> TraceBuilder {$/;"	m
renderTrace	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^	def renderTrace(sb: StringBuilder) {$/;"	m
renderTypeCode	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	def renderTypeCode(buf: StringBuilder, val: int) -> StringBuilder {$/;"	f
renderUs	$VIRGIL_WIZARD/src/util/TraceUtil.v3	/^	def renderUs(out: TraceBuilder, time: long) -> int {$/;"	f
renderValue	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^	def renderValue(val: Value, sb: StringBuilder) {$/;"	m
renderedLength	$VIRGIL_WIZARD/src/util/TraceUtil.v3	/^	def renderedLength(out: TraceBuilder, f: StringBuilder -> StringBuilder) -> int {$/;"	f
replay	$VIRGIL_WIZARD/src/monitors/R3BackEndMonitor.v3	/^	var replay: HashMap<int, ReplayFunction>;$/;"	d
replay_map	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^	def replay_map = HashMap<int, ReplayFunction>.new(int.!<int>, int.==);$/;"	d
report	$VIRGIL_WIZARD/src/engine/Metrics.v3	/^	def report(out: StringBuilder) -> StringBuilder {$/;"	m
report	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^	def report(output_folder: string) {$/;"	m
report	$VIRGIL_WIZARD/src/monitors/CallsMonitor.v3	/^def report(out: TraceBuilder, entries: Vector<FuncStats>) {$/;"	m
report	$VIRGIL_WIZARD/src/monitors/ConstMonitor.v3	/^def report(out: TraceBuilder) {$/;"	m
report	$VIRGIL_WIZARD/src/monitors/CoverageMonitor.v3	/^def report(out: TraceBuilder,$/;"	m
report	$VIRGIL_WIZARD/src/monitors/HotnessMonitor.v3	/^	def report() {$/;"	m
report	$VIRGIL_WIZARD/src/monitors/LoopMonitor.v3	/^def report(out: TraceBuilder, entries: Vector<LmEntry>) {$/;"	m
report	$VIRGIL_WIZARD/src/monitors/LoopTraceMonitor.v3	/^	def report() {$/;"	m
reportCSV	$VIRGIL_WIZARD/src/monitors/HotnessMonitor.v3	/^	def reportCSV() {$/;"	m
reportCode	$VIRGIL_WIZARD/src/monitors/CoverageMonitor.v3	/^def reportCode(out: TraceBuilder,$/;"	m
reportCode	$VIRGIL_WIZARD/src/monitors/HotnessMonitor.v3	/^	def reportCode() {$/;"	m
reportCodeMode	$VIRGIL_WIZARD/src/monitors/LoopMonitor.v3	/^def reportCodeMode(out: TraceBuilder, entries: Vector<LmEntry>) {$/;"	m
reportCsv	$VIRGIL_WIZARD/src/monitors/ConstMonitor.v3	/^def reportCsv(out: TraceBuilder) {$/;"	m
reportCsv	$VIRGIL_WIZARD/src/monitors/LoopMonitor.v3	/^def reportCsv(out: TraceBuilder, entries: Vector<LmEntry>) {$/;"	m
reportGuestFunctionTrace	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^	def reportGuestFunctionTrace(output_folder: string) {$/;"	m
reportIndirectStats	$VIRGIL_WIZARD/src/monitors/CallsMonitor.v3	/^def reportIndirectStats(out: TraceBuilder, stats: IndirectCallStats) {$/;"	m
reportRecoveredBytecodes	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^	def reportRecoveredBytecodes(output_folder: string) {$/;"	m
reports	$VIRGIL_WIZARD/src/monitors/MonitorRegistry.v3	/^	private var reports: List<void -> void>;$/;"	d
requiresInstrumentation	$VIRGIL_WIZARD/src/util/BasicTracing.v3	/^	def requiresInstrumentation() -> bool {$/;"	f
reserve	$VIRGIL_WIZARD/src/engine/x86-64/Mmap.v3	/^	def reserve(size: u64, prot: int) -> Mapping {$/;"	f
reserveOne	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	def reserveOne<T>(pt: int, quantity: string, vec: Vector<T>, max: u32) {$/;"	m
reset	$VIRGIL_WIZARD/src/engine/BytecodeIterator.v3	/^	def reset(func: FuncDecl) -> this {$/;"	m
reset	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	private def reset(sig: SigDecl) {$/;"	m
reset	$VIRGIL_WIZARD/src/engine/Instrumentation.v3	/^	def reset() { \/\/ TODO: only used in testing.$/;"	f
reset	$VIRGIL_WIZARD/src/engine/Module.v3	/^	def reset() -> this {$/;"	m
reset	$VIRGIL_WIZARD/src/engine/WasmParser.v3	/^	def reset(d: DataReader) {$/;"	m
reset	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^	def reset(func: Function) -> this;$/;"	m
reset	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def reset(sig: SigDecl, ret_label: MasmLabel) {$/;"	m
reset	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def reset(func: Function) -> this {$/;"	m
reset	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	def reset(func: Function) -> this {$/;"	m
reset	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^	def reset() {$/;"	m
reset	$VIRGIL_WIZARD/src/util/BasicBlockIterator.v3	/^	def reset(func: FuncDecl) -> this {$/;"	m
reset	$VIRGIL_WIZARD/src/util/BasicTracing.v3	/^	def reset() {$/;"	f
reset	$VIRGIL_WIZARD/src/util/ControlStack.v3	/^	def reset() -> B {$/;"	m
reset	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def reset() -> this {$/;"	m
resetInit	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	def resetInit() {$/;"	m
resetTo	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	private def resetTo(max: u32, nstate: Array<SpcVal>) {$/;"	m
resetToHandlerStub	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	private def resetToHandlerStub(func: FuncDecl, handler: ExHandler) {$/;"	m
resetToMerge	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def resetToMerge(ctl: SpcControl) {$/;"	m
reset_state	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	var reset_state: Array<SpcVal>;$/;"	d
resolveFuncIdx	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^	private def resolveFuncIdx(table: Table, entry_idx: int) -> int {$/;"	m
resolveImport	$VIRGIL_WIZARD/src/modules/ModuleLinker.v3	/^	private def resolveImport($/;"	m
resolveImportProcessor	$VIRGIL_WIZARD/src/modules/ModuleLinker.v3	/^	private def resolveImportProcessor(imp_mod_name: string) -> ImportProcessor {$/;"	m
resolve_path	$VIRGIL_WIZARD/src/modules/wasi/PathResolver.v3	/^	def resolve_path(fdinfo: WasiFd, path: string, read_symlink: string -> string) -> (string, int) {$/;"	f
resolve_path	$VIRGIL_WIZARD/src/modules/wasi/x86-64-linux/WspOnePathResolver-x86-64-linux.v3	/^	def resolve_path(fdinfo: WasiFd, path: string, flags: i32) -> (string, int) {$/;"	f
resolve_path_without_link	$VIRGIL_WIZARD/src/modules/wasi/PathResolver.v3	/^def resolve_path_without_link(fdinfo: WasiFd, path: string) -> (string, WspOneErrno) {$/;"	m
resolver	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^class SpcMerger(state: Array<SpcVal>, num_locals: int, sp: u32, regAlloc: RegAlloc, resolver: SpcMoveResolver) {$/;"	d
result	$VIRGIL_WIZARD/src/engine/Trap.v3	/^type MaybeTrap<T>(result: T, reason: TrapReason) #unboxed {$/;"	d
results	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	var results: Array<ValueType>;$/;"	d
results	$VIRGIL_WIZARD/src/engine/Type.v3	/^	def results: Array<ValueType>;$/;"	d
results	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	var results: Array<ValueType>;$/;"	d
results	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^class ReplayContext(actions: Vector<WasmEvent>, var results: Array<Value>){}$/;"	d
resume	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^	def resume() -> Result;$/;"	m
resume	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def resume() -> Result {$/;"	m
resume	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	def resume() -> Result {$/;"	m
resumeContinuation	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def resumeContinuation(stack: V3Interpreter) {$/;"	m
resume_hsize_pos	$VIRGIL_WIZARD/src/engine/Sidetable.v3	/^	def resume_hsize_pos = 1;$/;"	d
resume_nargs_pos	$VIRGIL_WIZARD/src/engine/Sidetable.v3	/^	def resume_nargs_pos = 0;$/;"	d
ret	$VIRGIL_WIZARD/src/util/WasmAsm.v3	/^	def ret() -> this {$/;"	m
ret_label	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	var ret_label: MasmLabel;$/;"	d
ret_throw	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	var ret_throw: Reg;$/;"	d
ret_throw	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^	var ret_throw: Reg;$/;"	d
reterr	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	def reterr() -> CodeValidatorResult.Error {$/;"	m
rethrow	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	def rethrow(ex_slot: int, popcount: int) {$/;"	m
retry	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	def retry() -> bool {$/;"	m
return_arity	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	var return_arity = -1;$/;"	d
return_call_ref	$VIRGIL_WIZARD/src/util/WasmAsm.v3	/^	def return_call_ref() -> this {$/;"	m
return_results	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	var return_results: Array<ValueType>;$/;"	d
revalidating	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	var revalidating = false;$/;"	d
revoke	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def revoke(index: int) {$/;"	m
revokeRegFromRange	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def revokeRegFromRange(reg: Reg, slot: u32, start: int, end: int) {$/;"	m
rhandler_tag_pos	$VIRGIL_WIZARD/src/engine/Sidetable.v3	/^	def rhandler_tag_pos = 1;$/;"	d
ri	$VIRGIL_WIZARD/src/util/HostAdapters.v3	/^def ri(v: int) => 	HostResult.Value1(Values.box_i(v));$/;"	m
rjustify_mark	$VIRGIL_WIZARD/src/engine/Trace.v3	/^	def rjustify_mark(width: int) -> this {$/;"	m
rmax	$VIRGIL_WIZARD/src/util/CfgPrinter.v3	/^	def var rmax = 0;$/;"	d
root	$VIRGIL_WIZARD/src/util/PrefixTrie.v3	/^	private var root: PrefixTrieBranch<K, V>;$/;"	d
rootNode	$VIRGIL_WIZARD/src/monitors/ProfileMonitor.v3	/^	var rootNode: ProfileTreeNode;$/;"	d
round_s_s	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def round_s_s = if(isF64, X86_64Assembler.roundsd_s_s, X86_64Assembler.roundss_s_s);$/;"	d
rr_i	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def rr_i = S(arr_rr, arr_i);$/;"	d
rsp	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	var rsp: Pointer;$/;"	d
rsync	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^    rsync,$/;"	d
run	$VIRGIL_WIZARD/src/SpectestMode.v3	/^	def run(engine: Engine, monitors: Range<Monitor>, files: Range<string>, args: Array<string>) -> int {$/;"	f
run	$VIRGIL_WIZARD/src/WasmMode.v3	/^	def run(engine: Engine, monitors: Range<Monitor>, wasm: Range<string>, args: Array<string>) -> int {$/;"	f
run	$VIRGIL_WIZARD/src/engine/Instantiator.v3	/^	def run() -> Instance {$/;"	m
run	$VIRGIL_WIZARD/src/engine/Metrics.v3	/^	def run<P, R>(func: P -> R, p: P) -> R {$/;"	m
run	$VIRGIL_WIZARD/src/monitors/InstrCountMonitor.v3	/^	def run(f: FuncDecl) {$/;"	m
run	$VIRGIL_WIZARD/src/util/BytecodeInstrumenter.v3	/^	def run() {$/;"	m
runHostCall	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def runHostCall() {$/;"	m
runMatching	$VIRGIL_WIZARD/src/util/BytecodeInstrumenter.v3	/^	def runMatching(matcher: (Module, FuncDecl) -> bool) {$/;"	m
runOnFreshStack	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	def runOnFreshStack(f: Function, args: Range<Value>) -> Result {$/;"	f
runOne	$VIRGIL_WIZARD/src/util/BytecodeInstrumenter.v3	/^	def runOne(func: FuncDecl) {$/;"	m
runPartial	$VIRGIL_WIZARD/src/engine/Instantiator.v3	/^	def runPartial(deferred_imports: Array<int>) -> Instance {$/;"	m
runReports	$VIRGIL_WIZARD/src/monitors/MonitorRegistry.v3	/^	def runReports() {$/;"	f
runTest	$VIRGIL_WIZARD/src/SpectestMode.v3	/^	def runTest(engine: Engine, monitors: Range<Monitor>, filename: string) -> int {$/;"	f
runWasm	$VIRGIL_WIZARD/src/wizeng.main.v3	/^	var runWasm: (Engine, Range<Monitor>, Range<string>, Array<string>) -> int;$/;"	d
runWasmCode	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def runWasmCode() {$/;"	m
runWast	$VIRGIL_WIZARD/src/wizeng.main.v3	/^	var runWast: (Engine, Range<Monitor>, Range<string>, Array<string>) -> int;$/;"	d
running	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	def var running = false;$/;"	d
runtime	$VIRGIL_WIZARD/src/engine/Debug.v3	/^	def runtime = false;$/;"	d
runtimeCallFreesRegs	$VIRGIL_WIZARD/src/engine/Tuning.v3	/^	def runtimeCallFreesRegs = true;	\/\/ runtime calls frees registers in abstract state$/;"	d
runtimeSpillMode	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def runtimeSpillMode = if(SpcTuning.runtimeCallFreesRegs, SpillMode.SAVE_AND_FREE_REGS, SpillMode.SAVE_ONLY);$/;"	d
runtime_CONT_NEW	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Runtime.v3	/^	def runtime_CONT_NEW(stack: X86_64Stack, instance: Instance, cont_index: u31) -> Throwable {$/;"	f
runtime_GET_LOCAL_PROBE	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Runtime.v3	/^	def runtime_GET_LOCAL_PROBE(func: WasmFunction, pc: int) -> Probe {$/;"	f
runtime_PROBE_instr	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Runtime.v3	/^	def runtime_PROBE_instr(stack: X86_64Stack, func: WasmFunction, pc: int) -> Throwable {$/;"	f
runtime_PROBE_loop	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Runtime.v3	/^	def runtime_PROBE_loop(stack: X86_64Stack, func: WasmFunction, pc: int) -> Throwable {$/;"	f
runtime_THROW	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Runtime.v3	/^	def runtime_THROW(stack: X86_64Stack, instance: Instance, tag_index: u31) -> Throwable {$/;"	f
runtime_THROW_REF	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Runtime.v3	/^	def runtime_THROW_REF(stack: X86_64Stack, thrown: Throwable) -> Throwable {$/;"	f
runtime_TIERUP	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Runtime.v3	/^	def runtime_TIERUP(stack: X86_64Stack, func: WasmFunction, pc: int) {$/;"	f
runtime_TRAP	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Runtime.v3	/^	def runtime_TRAP(stack: X86_64Stack, func: WasmFunction, pc: int, reason: TrapReason) -> Throwable {$/;"	f
runtime_arg0	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	var runtime_arg0: Reg;$/;"	d
runtime_arg0	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^	var runtime_arg0: Reg;$/;"	d
runtime_arg1	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	var runtime_arg1: Reg;$/;"	d
runtime_arg1	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^	var runtime_arg1: Reg;$/;"	d
runtime_arg2	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	var runtime_arg2: Reg;$/;"	d
runtime_arg2	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^	var runtime_arg2: Reg;$/;"	d
runtime_arg3	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	var runtime_arg3: Reg;$/;"	d
runtime_arg3	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^	var runtime_arg3: Reg;$/;"	d
runtime_arg4	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	var runtime_arg4: Reg;$/;"	d
runtime_arg4	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^	var runtime_arg4: Reg;$/;"	d
runtime_callHost	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Runtime.v3	/^	def runtime_callHost(stack: X86_64Stack, hf: HostFunction) -> (Throwable, WasmFunction) {$/;"	f
runtime_checkFuncSigSubtyping	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Runtime.v3	/^	def runtime_checkFuncSigSubtyping(instance: Instance, sig_index: u31, func: Function) -> Function {$/;"	f
runtime_doCast	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Runtime.v3	/^	def runtime_doCast(stack: X86_64Stack, instance: Instance, nullable: byte, ht_val: int) -> bool {$/;"	f
runtime_getFrameAccessorMetaRef	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Runtime.v3	/^	def runtime_getFrameAccessorMetaRef() -> FrameAccessorRef {$/;"	f
runtime_handle_resume_throw	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Runtime.v3	/^	def runtime_handle_resume_throw(stack: X86_64Stack, instance: Instance, contStack: X86_64Stack, tag_index: u31) -> Throwable {$/;"	f
runtime_handle_suspend	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Runtime.v3	/^	def runtime_handle_suspend(stack: X86_64Stack, instance: Instance, tag_id: u31) -> Throwable {$/;"	f
runtime_handle_switch	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Runtime.v3	/^	def runtime_handle_switch(stack: X86_64Stack, instance: Instance, target_cont_idx: int, tag_id: u31) -> Throwable {$/;"	f
runtime_ret0	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	var runtime_ret0: Reg;$/;"	d
runtime_ret0	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^	var runtime_ret0: Reg;$/;"	d
runtime_ret1	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	var runtime_ret1: Reg;$/;"	d
runtime_ret1	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^	var runtime_ret1: Reg;$/;"	d
s_d	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def s_d = S(arr_s, arr_d);$/;"	d
s_f	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def s_f = S(arr_s, arr_f);$/;"	d
s_i	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def s_i = S(arr_s, arr_i);$/;"	d
s_l	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def s_l = S(arr_s, arr_l);$/;"	d
s_s	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def s_s = S(arr_s, arr_s);$/;"	d
safeCopy	$VIRGIL_WIZARD/src/util/ArrayUtil.v3	/^	def safeCopy<T>(dst: Array<T>, dst_offset: u64, src: Array<T>, src_offset: u64, size: u64) -> bool {$/;"	f
safeCopyF	$VIRGIL_WIZARD/src/util/ArrayUtil.v3	/^	def safeCopyF<D, S>(dst: Array<D>, dst_offset: u64, src: Array<S>, src_offset: u64, size: u64, f: S -> D) -> bool {$/;"	f
safeRender	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	private def safeRender(ht: HeapTypeDecl) -> StringBuilder -> StringBuilder { \/\/ XXX: factor out$/;"	m
sameValue	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def sameValue(that: SpcVal) -> bool {$/;"	m
scaleOf	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def scaleOf(kind: ValueKind) -> int {$/;"	m
scan	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	private def scan() {$/;"	m
scan	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	def scan() {$/;"	m
scanFrame	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^	def scanFrame(ip: Pointer, sp: Pointer) {$/;"	m
scanFrame	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def scanFrame(ip: Pointer, sp: Pointer) {$/;"	m
scanFrame	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	private def scanFrame(ip: Pointer, code: RiUserCode, pos: StackFramePos, v: void) -> bool {$/;"	m
sched_yield	$VIRGIL_WIZARD/src/modules/wasi/x86-64-linux/WspOneModule-x86-64-linux.v3	/^	def sched_yield() -> int {$/;"	m
scratch	$VIRGIL_WIZARD/src/engine/compiler/RegSet.v3	/^	var scratch: Reg;$/;"	d
scratch	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	var scratch: Reg;$/;"	d
scratch	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^	var scratch: Reg;$/;"	d
scratch	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	var scratch: X86_64Gpr;$/;"	d
sd_s	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def sd_s = S(arr_sd, arr_s);$/;"	d
sdecl	$VIRGIL_WIZARD/src/engine/Type.v3	/^	case Struct(sdecl: StructDecl);$/;"	d
search	$VIRGIL_WIZARD/src/util/StringSet.v3	/^	private def search(str: string, hashcode: int) -> int {$/;"	m
section	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	var section: BpSection;		\/\/ current section$/;"	d
section_decoder	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	def section_decoder = DataReader.new(null);$/;"	d
section_size	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	var section_size: u32;$/;"	d
section_start	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	var section_start: u64;$/;"	d
seen_section	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	private var seen_section = -1;$/;"	d
seen_sections	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	private var seen_sections = Array<bool>.new(BpSection.count);$/;"	d
set	$VIRGIL_WIZARD/src/engine/Instance.v3	/^	def set(v: Value) -> this {$/;"	m
set	$VIRGIL_WIZARD/src/engine/Limits.v3	/^	def set(extensions: Extension.set) -> this {$/;"	m
set	$VIRGIL_WIZARD/src/engine/Module.v3	/^	def set(start: u64, size: u32) -> Vector<int> {$/;"	m
set	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def set(slot: u32, flags: byte, reg: Reg, const: int) {$/;"	m
set	$VIRGIL_WIZARD/src/modules/wasi/WasiFdMap.v3	/^	def set(fd: int, wfd: WasiFd) {$/;"	m
set	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def set(msg: string) -> bool {$/;"	m
set	$VIRGIL_WIZARD/src/util/FileDescriptorMap.v3	/^	def set(fd: int, sys: int) {$/;"	m
set	$VIRGIL_WIZARD/src/util/OpcodeMap.v3	/^	def set(op: Opcode, v: T) {$/;"	m
set	$VIRGIL_WIZARD/src/util/TraceUtil.v3	/^	def set(width: byte, justify: Justification, color: Color) -> this {$/;"	m
set1	$VIRGIL_WIZARD/src/util/OpcodeMap.v3	/^	def set1(code: byte, v: T) {$/;"	m
set2	$VIRGIL_WIZARD/src/util/OpcodeMap.v3	/^	def set2(prefix: byte, code: u32, v: T) {$/;"	m
setFatal	$VIRGIL_WIZARD/src/engine/TraceOptions.v3	/^	def setFatal(str: string) {$/;"	f
setFlag	$VIRGIL_WIZARD/src/util/OptionsRegistry.v3	/^def setFlag(str: string, onParse: string -> void) -> bool {$/;"	m
setFrameVar	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^	def setFrameVar(i: int, v: Value);$/;"	m
setFrameVar	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def setFrameVar(i: int, v: Value) {$/;"	m
setFrameVar	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	def setFrameVar(i: int, v: Value) {$/;"	m
setGlobal	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def setGlobal(tv: TypeVar, index: u32, v: Value);$/;"	m
setImplications	$VIRGIL_WIZARD/src/engine/Extension.v3	/^	def setImplications(set: Extension.set) -> Extension.set {$/;"	f
setInit	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	def setInit(index: u32) {$/;"	m
setInterpreterFallback	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def setInterpreterFallback(decl: FuncDecl) -> Pointer {$/;"	f
setLazyCompileFor	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def setLazyCompileFor(module: Module, decl: FuncDecl) {$/;"	f
setLocal	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def setLocal(tv: TypeVar, index: u32, v: Value);$/;"	m
setLocal	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^	def setLocal(i: int, v: Value);$/;"	m
setLocal	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def setLocal(i: int, v: Value) {$/;"	m
setLocal	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	def setLocal(i: int, v: Value) {$/;"	m
setMode	$VIRGIL_WIZARD/src/engine/Execute.v3	/^	def setMode(name: Range<byte>) -> bool {$/;"	f
setNewProgramLocation	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	def setNewProgramLocation(func: FuncDecl, pc: int, stp: int) {$/;"	m
setOperand	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^	def setOperand(i: int, v: Value);$/;"	m
setOption	$VIRGIL_WIZARD/src/engine/TraceOptions.v3	/^	private def setOption(opt: TraceOption) {$/;"	f
setOrigCode	$VIRGIL_WIZARD/src/engine/Module.v3	/^	def setOrigCode(code: Array<byte>) -> this {$/;"	m
setPc	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^	def setPc(pc: u31);$/;"	m
setPool	$VIRGIL_WIZARD/src/engine/compiler/RegAlloc.v3	/^	def setPool(i: int, pool: RegPool32) -> this {$/;"	m
setRsp	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	def setRsp(ptr: Pointer) -> this {$/;"	m
setSize	$VIRGIL_WIZARD/src/engine/Memory.v3	/^	def setSize(mem: Memory, num_pages: u64, num_bytes: u64) -> Memory {$/;"	f
setStored	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def setStored(slot: u32) {$/;"	m
setTargetAddress	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def setTargetAddress(addr: u64) {$/;"	m
setTargetCode	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Target.v3	/^	def setTargetCode(f: FuncDecl, addr: Pointer, end: Pointer) {$/;"	f
setTierUpFor	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def setTierUpFor(module: Module, decl: FuncDecl) {$/;"	f
setTieredEntrypoint	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Target.v3	/^	def setTieredEntrypoint(module: Module) { \/\/ TODO: remove, move all tests\/entrypoints to validation$/;"	f
setTrampolineCode	$VIRGIL_WIZARD/src/engine/x86-64/X86_64WhammProbeTrampoline.v3	/^def setTrampolineCode(masm: X86_64MacroAssembler) -> Pointer {$/;"	m
setUnconditionalInterpreterEntryIfMultiTier	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Target.v3	/^	def setUnconditionalInterpreterEntryIfMultiTier(f: FuncDecl) {$/;"	f
setUnreachable	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	def setUnreachable() {$/;"	m
setUnreachable	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def setUnreachable() {$/;"	m
setUnreachable	$VIRGIL_WIZARD/src/util/ControlStack.v3	/^	private def setUnreachable() {$/;"	m
setV3Entry	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^	def setV3Entry() {$/;"	m
setVsp	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^	def setVsp(vsp: u31);$/;"	m
set_vsp	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	private def set_vsp(p: Pointer) {$/;"	m
setc	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^	def setc(code: WasmError, msg: string) {$/;"	m
setupCatchBlock	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	private def setupCatchBlock(tag_display: string, tag_fields: Array<ValueType>) {$/;"	m
sf_s	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def sf_s = S(arr_sf, arr_s);$/;"	d
shadowGlobals	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^	def var shadowGlobals: Array<Value>;$/;"	d
shadowMems	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^	def var shadowMems: Array<Memory>;$/;"	d
shadowTables	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^	def var shadowTables: Array<Table>;$/;"	d
shared	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^type MemLimits(size: SizeConstraint, shared: bool, log2_pageSize: u5) #unboxed { }$/;"	d
shared	$VIRGIL_WIZARD/src/engine/Module.v3	/^class MemoryDecl(size: SizeConstraint, shared: bool, log2_pageSize: u5) extends Decl {$/;"	d
short_name	$VIRGIL_WIZARD/src/engine/Extension.v3	/^enum Extension(short_name: string, help: string) {$/;"	d
showZeroCounts	$VIRGIL_WIZARD/src/monitors/BranchMonitor.v3	/^def showZeroCounts = monitor_.options.addAlias($/;"	d
showZeroCounts	$VIRGIL_WIZARD/src/monitors/LoopMonitor.v3	/^def showZeroCounts = monitor_.options.addAlias($/;"	d
si_s	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def si_s = S(arr_si, arr_s);$/;"	d
sidetable	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	def sidetable = Vector<i32>.new();$/;"	d
sidetable	$VIRGIL_WIZARD/src/engine/Module.v3	/^	var sidetable = Sidetables.NO_SIDETABLE;	\/\/ sidetable, including control transfers$/;"	d
sidetable	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	+32	sidetable	: i64;	\/\/ Array<int>$/;"	d
sidetable	$VIRGIL_WIZARD/src/monitors/ModuleInstrumenter.v3	/^	var sidetable = func.sidetable.entries; \/\/ TODO: use Sidetable abstraction$/;"	d
sidetable_entry	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case Sidetable(push_exnref: bool, sidetable_entry: int);$/;"	d
sidetable_pos	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	var sidetable_pos: int;$/;"	d
sidetable_pos	$VIRGIL_WIZARD/src/engine/Module.v3	/^type ExHandler(index: int, handler_pc: int, push_exnref: bool, ex_slot: int, val_stack_top: int, sidetable_pos: int) #unboxed { }$/;"	d
sidetable_pos	$VIRGIL_WIZARD/src/engine/Sidetable.v3	/^type SidetableCatchEntry(handler_pc: int, val_stack_top: int, sidetable_pos: int) #unboxed;$/;"	d
sidetable_slot	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^	var sidetable_slot: MasmAddr;$/;"	d
sig	$VIRGIL_WIZARD/src/engine/Canon.v3	/^	def sig(s: SigDecl) -> SigDecl {$/;"	f
sig	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	var sig: SigDecl;$/;"	d
sig	$VIRGIL_WIZARD/src/engine/Host.v3	/^type HostFunc(sig: SigDecl, invoke: Range<Value> -> HostResult) #unboxed;$/;"	d
sig	$VIRGIL_WIZARD/src/engine/Instance.v3	/^class Tag(sig: SigDecl, decl: TagDecl) extends Exportable {$/;"	d
sig	$VIRGIL_WIZARD/src/engine/Module.v3	/^	var sig: SigDecl;$/;"	d
sig	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^enum Opcode(prefix: u8, code: u16, mnemonic: string, imms: Array<ImmKind>, sig: SigDecl) {$/;"	d
sig	$VIRGIL_WIZARD/src/engine/Type.v3	/^	var sig: SigDecl;$/;"	d
sig	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	var sig: SigDecl;$/;"	d
sig	$VIRGIL_WIZARD/src/engine/x86-64/V3Offsets.v3	/^	private def sig = SigCache.i_i;$/;"	d
sig	$VIRGIL_WIZARD/src/modules/HostModuleBuilder.v3	/^private type ClosureEntry<C>(name: string, sig: SigDecl, cnew: C -> (Range<Value> -> HostResult)) #unboxed;$/;"	d
sig	$VIRGIL_WIZARD/src/modules/wizeng/WizengModule.v3	/^enum WizengExports(sig: SigDecl, invoke: (WizengModule, Range<Value>) -> HostResult) {$/;"	d
sig	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^private class R3CallIndirectProbe(sig: SigDecl, table_index: u31, handler: EventHandler) extends Probe {$/;"	d
sig	$VIRGIL_WIZARD/src/util/Whamm.v3	/^class WhammProbe(func: Function, sig: Array<WhammArg>) extends Probe {$/;"	d
sigId	$VIRGIL_WIZARD/src/engine/Canon.v3	/^	def sigId(sig: SigDecl) -> int {$/;"	f
sigPR	$VIRGIL_WIZARD/src/engine/Canon.v3	/^	def sigPR(params: Array<ValueType>, results: Array<ValueType>) -> SigDecl {$/;"	f
sig_ids	$VIRGIL_WIZARD/src/engine/Instance.v3	/^	def sig_ids = Array<int>.new(module.heaptypes.length);$/;"	d
sig_index	$VIRGIL_WIZARD/src/engine/Module.v3	/^class TagDecl(sig_index: int) extends Decl {$/;"	d
sig_ref	$VIRGIL_WIZARD/src/engine/Type.v3	/^	var sig_ref: HeapType;$/;"	d
sig_v_v	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^def sig_v_v = SigCache.v_v; \/\/ XXX: needed to force initialization$/;"	d
signExtend	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def signExtend(st: StorageType, val: Value) -> Value {$/;"	f
singleLookup	$VIRGIL_WIZARD/src/modules/ModuleLinker.v3	/^def singleLookup<T>(expect: string, result: T, key: string) -> T { \/\/ XXX: move to lib\/util\/Functions?$/;"	m
sites	$VIRGIL_WIZARD/src/monitors/CallsMonitor.v3	/^	var sites: List<(int, Probe)>;$/;"	d
size	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^type TableLimits(size: SizeConstraint) #unboxed { }$/;"	d
size	$VIRGIL_WIZARD/src/engine/Module.v3	/^class TableDecl(elemtype: ValueType.Ref, size: SizeConstraint) extends Decl {$/;"	d
size	$VIRGIL_WIZARD/src/engine/Sidetable.v3	/^	def size() -> int {$/;"	m
size	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^private class MemoryAccessor<T>(size: byte, log2_size: u3, read: Range<byte> -> T, write: (Range<byte>, T) -> void) { }$/;"	d
size	$VIRGIL_WIZARD/src/engine/x86-64/Mmap.v3	/^	def size() -> u64 {$/;"	m
size	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	def size: u32;$/;"	d
size	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	+32	size:		u64;$/;"	d
size	$VIRGIL_WIZARD/src/monitors/MemStatsMonitor.v3	/^class StoreProbe(stats: MemStats, offset: u64, size: u8) extends Probe {$/;"	d
size	$VIRGIL_WIZARD/src/monitors/ModuleInstrumenter.v3	/^private class MemoryAccessProbe(imm: MemArg, operand: int, size: u64, f: (DynamicLoc, Memory, u64, u64) -> ProbeAction) extends Probe {$/;"	d
size	$VIRGIL_WIZARD/src/util/BasicTracing.v3	/^class MemoryTraceStoreProbe(op: Opcode, imm: MemArg, size: u8) extends Probe {$/;"	d
size	$VIRGIL_WIZARD/src/util/ProbeUtil.v3	/^	var size: u8;$/;"	d
sizeOfStorage	$VIRGIL_WIZARD/src/engine/Runtime.v3	/^def sizeOfStorage(storage: StorageType) -> u32 {$/;"	m
skipRepeatedBlocks	$VIRGIL_WIZARD/src/engine/Tuning.v3	/^	def skipRepeatedBlocks = true;	\/\/ skip repeated BLOCK bytecodes$/;"	d
skip_MemArg	$VIRGIL_WIZARD/src/engine/CodePtr.v3	/^	def skip_MemArg() {$/;"	m
skip_block_type	$VIRGIL_WIZARD/src/engine/CodePtr.v3	/^	def skip_block_type() {$/;"	m
skip_catch	$VIRGIL_WIZARD/src/engine/CodePtr.v3	/^	def skip_catch() {$/;"	m
skip_catches	$VIRGIL_WIZARD/src/engine/CodePtr.v3	/^	def skip_catches() -> u31 {$/;"	m
skip_handler	$VIRGIL_WIZARD/src/engine/CodePtr.v3	/^	def skip_handler() {$/;"	m
skip_immediates	$VIRGIL_WIZARD/src/engine/CodePtr.v3	/^	def skip_immediates(imms: Array<ImmKind>) {$/;"	m
skip_label	$VIRGIL_WIZARD/src/engine/CodePtr.v3	/^	def skip_label() {$/;"	m
skip_labels	$VIRGIL_WIZARD/src/engine/CodePtr.v3	/^	def skip_labels() -> u31 {$/;"	m
skip_local_decls	$VIRGIL_WIZARD/src/engine/CodePtr.v3	/^	def skip_local_decls() {$/;"	m
skip_to_end	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	var skip_to_end: bool;$/;"	d
skip_value_type	$VIRGIL_WIZARD/src/engine/CodePtr.v3	/^	def skip_value_type() {$/;"	m
skip_value_types	$VIRGIL_WIZARD/src/engine/CodePtr.v3	/^	def skip_value_types() -> u31 {$/;"	m
sl_s	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def sl_s = S(arr_sl, arr_s);$/;"	d
slot	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	var slot: u32;		\/\/ slot, if reg == REG_NONE$/;"	d
slotAddr	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def slotAddr(slot: u32) -> MasmAddr {$/;"	m
slot_size	$VIRGIL_WIZARD/src/engine/Tagging.v3	/^	def slot_size: int = if(tagged, u31.!(raw * 2), raw);	\/\/ XXX: make unsigned$/;"	d
slot_size_log	$VIRGIL_WIZARD/src/engine/Tagging.v3	/^	def slot_size_log: u6 = if(tagged, if(simd, 5, 4), if(simd, 4, 3));$/;"	d
slots	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^	private def slots = Array<SlotAddrs>.new(depth + 1);$/;"	d
sock_accept	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	sock_accept$/;"	d
sock_shutdown	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	sock_shutdown,$/;"	d
sourcePcs	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	var sourcePcs: Vector<(int, int)>;$/;"	d
source_loc	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	var source_loc: int = -1;		\/\/ current source location, if any$/;"	d
source_locs	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	var source_locs: Vector<(int, int)>;	\/\/ list of (offset, source_loc) pairs$/;"	d
sp	$VIRGIL_WIZARD/src/engine/compiler/RegSet.v3	/^	var sp: Reg;$/;"	d
sp	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^class SpcMerger(state: Array<SpcVal>, num_locals: int, sp: u32, regAlloc: RegAlloc, resolver: SpcMoveResolver) {$/;"	d
sp	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^	var sp: Reg;$/;"	d
sp	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^class X86_64FrameAccessor(stack: X86_64Stack, sp: Pointer, decl: FuncDecl) extends FrameAccessor {$/;"	d
sp	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Target.v3	/^type TargetFrame(sp: Pointer) #unboxed {$/;"	d
spc_code	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Target.v3	/^type TargetModule(spc_code: X86_64SpcModuleCode) #unboxed { }$/;"	d
spc_code_bytes	$VIRGIL_WIZARD/src/engine/Metrics.v3	/^	def spc_code_bytes	= m("spc:code_bytes", bytes, "Total machine code bytes output by single-pass compiler");$/;"	d
spc_data_bytes	$VIRGIL_WIZARD/src/engine/Metrics.v3	/^	def spc_data_bytes	= m("spc:data_bytes", bytes, "Total data\/metadata bytes output by single-pass compiler");$/;"	d
spc_entry	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Target.v3	/^type TargetOsrInfo(spc_entry: Pointer, osr_entries: List<(int, int)>) #unboxed { }$/;"	d
spc_functions	$VIRGIL_WIZARD/src/engine/Metrics.v3	/^	def spc_functions	= m("spc:functions", "functions",$/;"	d
spc_in_bytes	$VIRGIL_WIZARD/src/engine/Metrics.v3	/^	def spc_in_bytes	= m("spc:in_bytes", bytes, "Total bytecode bytes input to single-pass compiler");$/;"	d
spc_inline_func	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	var spc_inline_func = false;$/;"	d
spc_swap_instance	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	var spc_swap_instance = false;$/;"	d
spc_swap_membase	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	var spc_swap_membase = false;$/;"	d
spc_time_per_byte	$VIRGIL_WIZARD/src/engine/Metrics.v3	/^	def spc_time_per_byte	= r("spc:time_per_byte", spc_time_us, spc_in_bytes,$/;"	d
spc_time_us	$VIRGIL_WIZARD/src/engine/Metrics.v3	/^	def spc_time_us		= t("spc:time_us", "Time taken by single-pass compiler");$/;"	d
spectest	$VIRGIL_WIZARD/src/engine/Trace.v3	/^	var spectest = false;$/;"	d
spectest	$VIRGIL_WIZARD/src/engine/TraceOptions.v3	/^	spectest('s', "specification tests"),$/;"	d
spillRegAndFree	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def spillRegAndFree(reg: Reg) {$/;"	m
split	$VIRGIL_WIZARD/src/util/PrefixTrie.v3	/^	def split(pos: int) {$/;"	m
splitBlock	$VIRGIL_WIZARD/src/util/ControlStack.v3	/^	var splitBlock: (ControlStack<B>, B) -> (B, B) = ControlStack<B>.defaultSplitBlock;$/;"	d
splitBlockInto	$VIRGIL_WIZARD/src/util/ControlStack.v3	/^	var splitBlockInto: (ControlStack<B>, B, B) -> (B, B) = ControlStack<B>.defaultSplitBlockInto;$/;"	d
splitCfgBlock	$VIRGIL_WIZARD/src/util/CfgBuilder.v3	/^	private def splitCfgBlock(cs: ControlStack<CfgBlock>, from: CfgBlock) -> (CfgBlock, CfgBlock) {$/;"	m
src	$VIRGIL_WIZARD/src/engine/Instance.v3	/^class ExportedValueType(src: ExportedType, vt: ValueType) extends ExportedType {$/;"	d
src	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	var src: MoveNode;	\/\/ source of the value for this node$/;"	d
src_index	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^private class MemoryCopyProbe(handler: EventHandler, dst_index: u31, src_index: u31) extends Probe {$/;"	d
src_stats	$VIRGIL_WIZARD/src/monitors/MemStatsMonitor.v3	/^class CopyProbe(dst_stats: MemStats, src_stats: MemStats) extends Probe {$/;"	d
ss_s	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def ss_s = S(arr_ss, arr_s);$/;"	d
sss_s	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def sss_s = S(arr_sss, arr_s);$/;"	d
stack	$VIRGIL_WIZARD/src/engine/Debug.v3	/^	def stack = false;$/;"	d
stack	$VIRGIL_WIZARD/src/engine/Execute.v3	/^	case Switch(stack: WasmStack);$/;"	d
stack	$VIRGIL_WIZARD/src/engine/Instance.v3	/^	var stack: WasmStack;$/;"	d
stack	$VIRGIL_WIZARD/src/engine/Trace.v3	/^	var stack = false;$/;"	d
stack	$VIRGIL_WIZARD/src/engine/TraceOptions.v3	/^	stack('y', "stacks"),$/;"	d
stack	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def stack: V3Interpreter;$/;"	d
stack	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^type StackFramePos(stack: X86_64Stack, frame: TargetFrame) #unboxed;$/;"	d
stack	$VIRGIL_WIZARD/src/monitors/FuncProfileMonitor.v3	/^	var stack: Vector<(u64, u64)>;$/;"	d
stack	$VIRGIL_WIZARD/src/util/ControlStack.v3	/^	private def stack = ArrayStack<ControlStackEntry<B>>.new();$/;"	d
stackDelta	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def stackDelta(func_sig: SigDecl, opcode: Opcode, parser: WasmParser) -> (int, int) {$/;"	f
stackOverflowHandlerOffset	$VIRGIL_WIZARD/src/engine/x86-64/X86_64PreGenStubs.v3	/^	+52	stackOverflowHandlerOffset:	i32;	\/\/ handler for signals caused by (value- or call-) stack overflow$/;"	d
stacktraces	$VIRGIL_WIZARD/src/engine/Tuning.v3	/^	def stacktraces = false;	\/\/ required for debugging$/;"	d
start	$VIRGIL_WIZARD/src/engine/Module.v3	/^type ExHandlerEntry(index: int, tag: int, start: int, end: int, info: ExHandlerInfo) #unboxed;$/;"	d
start	$VIRGIL_WIZARD/src/engine/native/NativeMemory.v3	/^	var start: Pointer;$/;"	d
start	$VIRGIL_WIZARD/src/engine/x86-64/Mmap.v3	/^	def var start: Pointer;$/;"	d
start	$VIRGIL_WIZARD/src/engine/x86-64/Redzones.v3	/^class RedZone(start: Pointer, end: Pointer, var prev: RedZone, var next: RedZone) {$/;"	d
start	$VIRGIL_WIZARD/src/engine/x86-64/X86_64PreGenStubs.v3	/^	+0	start:	i32;$/;"	d
start	$VIRGIL_WIZARD/src/monitors/BlocksMonitor.v3	/^type BasicBlockCount(start: int, end: int, instrs: int, counter: CountProbe) #unboxed;$/;"	d
start	$VIRGIL_WIZARD/src/monitors/CoverageMonitor.v3	/^private class CoverageMonitorProbe(module: Module, func: FuncDecl, monitor: CoverageMonitor, start: int) extends Probe {$/;"	d
start	$VIRGIL_WIZARD/src/monitors/FuncProfileMonitor.v3	/^	var start: u64;$/;"	d
startExHandler	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	def startExHandler() -> (int, int) {$/;"	m
start_function	$VIRGIL_WIZARD/src/engine/Module.v3	/^	var start_function = -1;$/;"	d
start_opcode	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	var start_opcode: u16;$/;"	d
start_opcode	$VIRGIL_WIZARD/src/util/ControlStack.v3	/^	def var start_opcode: Opcode;$/;"	d
start_pos	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	var start_pos: int;$/;"	d
start_pos	$VIRGIL_WIZARD/src/util/ControlStack.v3	/^	def var start_pos: int;$/;"	d
start_time_us	$VIRGIL_WIZARD/src/engine/Metrics.v3	/^	def start_time_us	= t("start:time_us", "Time taken to execute wasm module start function(s).");$/;"	d
starts	$VIRGIL_WIZARD/src/monitors/LoopTraceMonitor.v3	/^	def starts = Vector<u30>.new();$/;"	d
state	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	var state: BpFsmState;$/;"	d
state	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^	def state() -> StackState;$/;"	m
state	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^class SpcMerger(state: Array<SpcVal>, num_locals: int, sp: u32, regAlloc: RegAlloc, resolver: SpcMoveResolver) {$/;"	d
state	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def state() -> StackState {$/;"	m
state	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	def state() -> StackState {$/;"	m
state_	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	var state_: StackState;$/;"	d
state_	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	var state_: StackState;$/;"	d
static_count	$VIRGIL_WIZARD/src/monitors/OpcodeMonitor.v3	/^type OpcodeEntry(op: Opcode, static_count: u32, count: CountProbe) #unboxed;$/;"	d
stats	$VIRGIL_WIZARD/src/monitors/CallsMonitor.v3	/^private class CallsMonitorBytecodeVisitor(var stats: FuncStats, bi: BytecodeIterator) extends BytecodeVisitor {$/;"	d
stats	$VIRGIL_WIZARD/src/monitors/MemStatsMonitor.v3	/^class StoreProbe(stats: MemStats, offset: u64, size: u8) extends Probe {$/;"	d
statxbuf	$VIRGIL_WIZARD/src/modules/wasi/x86-64-linux/WspOneModule-x86-64-linux.v3	/^def statxbuf = Ref<statx>.of(Array<byte>.new(statx.size));$/;"	d
stealFlagBitForMemory64	$VIRGIL_WIZARD/src/engine/Tuning.v3	/^	def stealFlagBitForMemory64 = true;	\/\/ use a bit in the memarg flags for memory64$/;"	d
step	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^	def step(addr: u32, b: u8) {$/;"	m
stepProbe	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	def stepProbe: DebugStepProbe = DebugStepProbe.new();$/;"	d
storeFn	$VIRGIL_WIZARD/src/monitors/ModuleInstrumenter.v3	/^		storeFn: (DynamicLoc, Memory, u64, u64) -> ProbeAction,$/;"	d
storeMemarg	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	private def storeMemarg<T>(dst: MemArg, src: Reg, asm_mov_m_r: (X86_64Addr, X86_64Gpr) -> T) {$/;"	m
storeMemarg_b	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	private def storeMemarg_b(dst: MemArg, src: Reg) { storeMemarg(dst, src, asm.q.movb_m_r); }$/;"	m
storeMemarg_d	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	private def storeMemarg_d(dst: MemArg, src: Reg) { storeMemarg(dst, src, asm.q.movd_m_r); }$/;"	m
storeMemarg_q	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	private def storeMemarg_q(dst: MemArg, src: Reg) { storeMemarg(dst, src, asm.q.movq_m_r); }$/;"	m
storeMemarg_w	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	private def storeMemarg_w(dst: MemArg, src: Reg) { storeMemarg(dst, src, asm.q.movw_m_r); }$/;"	m
storeValue	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	def storeValue(ptr: Pointer, v: Value) {$/;"	m
stp	$VIRGIL_WIZARD/src/engine/BytecodeIterator.v3	/^	def var stp: int = -1;				\/\/ current sidetable pointer; < 0 if not tracked$/;"	d
stp	$VIRGIL_WIZARD/src/engine/Sidetable.v3	/^private type PcPair(pc: int, stp: int) #unboxed { }$/;"	d
stp	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^	def stp() -> int;$/;"	m
stp	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	var stp: int;			\/\/ sidetable pointer$/;"	d
stp	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^	var stp: Reg;$/;"	d
stp	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	def stp() -> int {$/;"	m
stp	$VIRGIL_WIZARD/src/monitors/ModuleInstrumenter.v3	/^	var stp: int;$/;"	d
stp_delta	$VIRGIL_WIZARD/src/engine/Sidetable.v3	/^	+12	stp_delta:	i32;$/;"	d
stp_slot	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^	var stp_slot: MasmAddr;$/;"	d
strings	$VIRGIL_WIZARD/src/util/StringSet.v3	/^	private def strings = Array<string>.new(mask_shift.0 + 1);$/;"	d
struct_access_kind	$VIRGIL_WIZARD/src/engine/Sidetable.v3	/^	+0	struct_access_kind:	StructAccessKind;$/;"	d
struct_get	$VIRGIL_WIZARD/src/util/WasmAsm.v3	/^	def struct_get(decl: StructDecl, field: int) -> this {$/;"	m
struct_get_s	$VIRGIL_WIZARD/src/util/WasmAsm.v3	/^	def struct_get_s(decl: StructDecl, field: int) -> this {$/;"	m
struct_get_u	$VIRGIL_WIZARD/src/util/WasmAsm.v3	/^	def struct_get_u(decl: StructDecl, field: int) -> this {$/;"	m
struct_new_canon	$VIRGIL_WIZARD/src/util/WasmAsm.v3	/^	def struct_new_canon(decl: StructDecl) -> this {$/;"	m
struct_new_canon_default	$VIRGIL_WIZARD/src/util/WasmAsm.v3	/^	def struct_new_canon_default(decl: StructDecl) -> this {$/;"	m
struct_set	$VIRGIL_WIZARD/src/util/WasmAsm.v3	/^	def struct_set(decl: StructDecl, field: int) -> this {$/;"	m
stubName	$VIRGIL_WIZARD/src/engine/x86-64/X86_64PreGenStubs.v3	/^	def stubName: string;$/;"	d
stubName	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def stubName: string;$/;"	d
stub_label	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^type SpcHandlerInfo(is_dummy: bool, dest_label: MasmLabel, stub_label: MasmLabel, merge_state: Array<SpcVal>);$/;"	d
stub_label	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Target.v3	/^	var stub_label: MasmLabel;$/;"	d
sub_s_s	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def sub_s_s = if(isF64, X86_64Assembler.subsd_s_s, X86_64Assembler.subss_s_s);$/;"	d
subpage_added	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def subpage_added () {$/;"	f
subpages	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	def subpages = Array<OpcodePage>.new(256);$/;"	d
substHeapType	$VIRGIL_WIZARD/src/engine/Canon.v3	/^	private def substHeapType(ht: HeapType) -> HeapType {$/;"	m
substStorageType	$VIRGIL_WIZARD/src/engine/Canon.v3	/^	private def substStorageType(st: StorageType) -> StorageType {$/;"	m
substValueType	$VIRGIL_WIZARD/src/engine/Canon.v3	/^	private def substValueType(vt: ValueType) -> ValueType {$/;"	m
subtype_list	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	private var subtype_list: Vector<(u64, int)>;$/;"	d
success	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	var success = true;$/;"	d
success_taken	$VIRGIL_WIZARD/src/monitors/ControlInstrumenter.v3	/^private class CiBrOnCastProbe(nullable: bool, ht_val: int, success_taken: bool) extends Probe {$/;"	d
success_taken	$VIRGIL_WIZARD/src/monitors/LoopTraceMonitor.v3	/^private class TraceBrOnCastProbe(trace: TraceBuffer, nullable: bool, ht_val: int, success_taken: bool) extends Probe {$/;"	d
supertypes	$VIRGIL_WIZARD/src/engine/Type.v3	/^class HeapTypeDecl(final: bool, supertypes: Array<HeapType>) extends Decl {$/;"	d
suspend_handlers	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	def suspend_handlers = Vector<ExHandlerEntry>.new();$/;"	d
suspend_handlers	$VIRGIL_WIZARD/src/engine/Module.v3	/^	var suspend_handlers = NO_EX_HANDLERS;$/;"	d
suspend_pc	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	var suspend_pc: int = -1;$/;"	d
swap_instance	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^type InlineConfig(swap_membase: bool, swap_instance: bool, can_inline: bool);$/;"	d
swap_membase	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^type InlineConfig(swap_membase: bool, swap_instance: bool, can_inline: bool);$/;"	d
switch_handlers	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	def switch_handlers = Vector<ExHandlerEntry>.new();$/;"	d
switch_handlers	$VIRGIL_WIZARD/src/engine/Module.v3	/^	var switch_handlers = NO_EX_HANDLERS;$/;"	d
switch_size_opt	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^def switch_size_opt = E.options.newIntOption("switch_size", MIN_DISPATCH_CASE_COUNT, "minimum number opcode switch targets to be considered a dispatch function");$/;"	d
sync	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^    sync$/;"	d
syncOptionSet	$VIRGIL_WIZARD/src/util/OptionsRegistry.v3	/^def syncOptionSet<T>(val: T, orig_on_set_func: T -> void, opt: Option<T>) {$/;"	m
sysfd	$VIRGIL_WIZARD/src/modules/wasi/WasiFdMap.v3	/^class WasiFd(sysfd: int, ftype: wasi_filetype, preopen: bool, path: string) {$/;"	d
sysfd_to_userfd	$VIRGIL_WIZARD/src/util/FileDescriptorMap.v3	/^	private def sysfd_to_userfd = HashMap<int, int>.new(int.!, int.==);$/;"	d
table	$VIRGIL_WIZARD/src/monitors/FuncProfileMonitor.v3	/^def table = initTable();$/;"	d
table	$VIRGIL_WIZARD/src/monitors/InstrCountMonitor.v3	/^def table = initTable();$/;"	d
table	$VIRGIL_WIZARD/src/monitors/MemStatsMonitor.v3	/^def table = initTable();$/;"	d
table	$VIRGIL_WIZARD/src/monitors/OpcodeMonitor.v3	/^def table = initTable();$/;"	d
table_idx	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^	case TableGrow(table_idx: int, table_name: string, amount: u32);$/;"	d
table_index	$VIRGIL_WIZARD/src/engine/Module.v3	/^	var table_index = -1;$/;"	d
table_index	$VIRGIL_WIZARD/src/monitors/CallsMonitor.v3	/^private class CallIndirectProbe(tail: bool, table_index: u31) extends Probe { \/\/ XXX: use OperandProbe_i_v, but need instance$/;"	d
table_index	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^private class TableSetProbe(handler: EventHandler, table_index: u31) extends Probe {$/;"	d
table_name	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^	case TableGrow(table_idx: int, table_name: string, amount: u32);$/;"	d
tables	$VIRGIL_WIZARD/src/engine/Instance.v3	/^	def tables = Array<Table>.new(module.tables.length);$/;"	d
tables	$VIRGIL_WIZARD/src/engine/Module.v3	/^	def tables = Vector<TableDecl>.new();$/;"	d
tag	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^type Value;$/;"	d
tag	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^enum BpFsmState {$/;"	d
tag	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^type BpCatchCode {$/;"	d
tag	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^type CodeValidatorResult {$/;"	d
tag	$VIRGIL_WIZARD/src/engine/Execute.v3	/^type Result {$/;"	d
tag	$VIRGIL_WIZARD/src/engine/Extension.v3	/^enum Extension(short_name: string, help: string) {$/;"	d
tag	$VIRGIL_WIZARD/src/engine/Host.v3	/^type HostResult {$/;"	d
tag	$VIRGIL_WIZARD/src/engine/Instance.v3	/^	def tag = ValueTypes.kind(valtype).code;$/;"	d
tag	$VIRGIL_WIZARD/src/engine/Module.v3	/^type SegmentMode {$/;"	d
tag	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^enum OpcodeAttribute {$/;"	d
tag	$VIRGIL_WIZARD/src/engine/Sidetable.v3	/^enum StructAccessKind {$/;"	d
tag	$VIRGIL_WIZARD/src/engine/TraceOptions.v3	/^enum TraceOption(ch: byte, help: string) {$/;"	d
tag	$VIRGIL_WIZARD/src/engine/Trap.v3	/^enum TrapReason {$/;"	d
tag	$VIRGIL_WIZARD/src/engine/Type.v3	/^type ValueType {$/;"	d
tag	$VIRGIL_WIZARD/src/engine/Value.v3	/^type Value {$/;"	d
tag	$VIRGIL_WIZARD/src/engine/WasmParser.v3	/^type SuspensionHandler {$/;"	d
tag	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^type ThrowResult {$/;"	d
tag	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^enum MasmBrCond		(zero: bool, 	i32: bool) {$/;"	d
tag	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^enum SpillMode(free_regs: bool, remember_stored: bool) {$/;"	d
tag	$VIRGIL_WIZARD/src/engine/v3/V3Target.v3	/^type TargetOsrInfo #unboxed { }$/;"	d
tag	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^type SlotAddrs(tag: X86_64Addr, value: X86_64Addr, upper: X86_64Addr) #unboxed { }$/;"	d
tag	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def tag = if(isI64, BpTypeCode.I64, BpTypeCode.I32).code;$/;"	d
tag	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^enum X86_64FrameState {$/;"	d
tag	$VIRGIL_WIZARD/src/modules/wali/Wali.v3	/^enum WaliErrno(code: byte) {$/;"	d
tag	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^enum wasi_filetype(code: byte) {$/;"	d
tag	$VIRGIL_WIZARD/src/modules/wizeng/WizengModule.v3	/^enum WizengExports(sig: SigDecl, invoke: (WizengModule, Range<Value>) -> HostResult) {$/;"	d
tag	$VIRGIL_WIZARD/src/monitors/AllocMonitor.v3	/^type AllocStats {$/;"	d
tag	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^private type TraceEntry {$/;"	d
tag	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^type Info {$/;"	d
tag	$VIRGIL_WIZARD/src/monitors/LoopTraceMonitor.v3	/^type TraceEntry #unboxed {$/;"	d
tag	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^private enum CallKind {INT, EXT}$/;"	d
tag	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^type WasmEvent {$/;"	d
tag	$VIRGIL_WIZARD/src/util/CfgPrinter.v3	/^enum CfgEdgeChar {$/;"	d
tag	$VIRGIL_WIZARD/src/util/DeclFilter.v3	/^type Matcher {$/;"	d
tag	$VIRGIL_WIZARD/src/util/ErrorGen.v3	/^enum WasmError {$/;"	d
tag	$VIRGIL_WIZARD/src/util/Palette.v3	/^enum Color(defstr: string) {$/;"	d
tag	$VIRGIL_WIZARD/src/util/TraceUtil.v3	/^enum Justification { LEFT, CENTER_L, CENTER_R, RIGHT }$/;"	d
tag	$VIRGIL_WIZARD/src/util/Whamm.v3	/^type WhammParam {$/;"	d
tagAddr	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	def tagAddr(slot: u32) -> MasmAddr {$/;"	m
tagStored	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def tagStored() -> bool {$/;"	m
tagToKindFlags	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^def tagToKindFlags(t: byte) -> byte {$/;"	m
tagToValue	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def tagToValue(t: byte) -> Value {$/;"	m
tag_index	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	case CatchRef(tag_index: u31, label: u31);$/;"	d
tag_index	$VIRGIL_WIZARD/src/engine/Module.v3	/^	var tag_index = -1;$/;"	d
tag_index	$VIRGIL_WIZARD/src/engine/WasmParser.v3	/^	case Switch(tag_index: u31);$/;"	d
tag_size	$VIRGIL_WIZARD/src/engine/Tagging.v3	/^	def tag_size: int = if(tagged, raw, 0);			\/\/ XXX: make unsigned$/;"	d
tagged	$VIRGIL_WIZARD/src/engine/Tagging.v3	/^class Tagging(tagged: bool, simd: bool) {$/;"	d
tagging	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Target.v3	/^	def tagging = Tagging.new(!FeatureDisable.valueTags, !FeatureDisable.simd);$/;"	d
tags	$VIRGIL_WIZARD/src/engine/Instance.v3	/^	def tags = Array<Tag>.new(module.tags.length);$/;"	d
tags	$VIRGIL_WIZARD/src/engine/Module.v3	/^	def tags = Vector<TagDecl>.new();		\/\/ exception-handling extension$/;"	d
tail	$VIRGIL_WIZARD/src/monitors/CallsMonitor.v3	/^private class CallRefProbe(tail: bool) extends Probe { \/\/ XXX: use OperandProbe_r_v, but need instance$/;"	d
tailInvoke0	$VIRGIL_WIZARD/src/modules/wizeng/WizengModule.v3	/^	def tailInvoke0(args: Range<Value>) -> HostResult {$/;"	m
tail_invoke0	$VIRGIL_WIZARD/src/modules/wizeng/WizengModule.v3	/^	tail_invoke0(SigCache.g_v, WizengModule.tailInvoke0),$/;"	d
taken	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^enum BrRepush(taken: bool, not_taken: bool) {$/;"	d
taken	$VIRGIL_WIZARD/src/monitors/ControlInstrumenter.v3	/^	def taken = Array<u64>.new(count);$/;"	d
target	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	case Call(target: Token, params: Array<WhammParam>);$/;"	d
targetIndex	$VIRGIL_WIZARD/src/monitors/ModuleInstrumenter.v3	/^private class GlobalVisitor(module: Module, f: DynamicLoc -> ProbeAction, isWrite: bool, targetIndex: u31) extends BytecodeVisitor {$/;"	d
target_code	$VIRGIL_WIZARD/src/engine/Module.v3	/^	var target_code: TargetCode;$/;"	d
target_module	$VIRGIL_WIZARD/src/engine/Module.v3	/^	var target_module: TargetModule;$/;"	d
targets	$VIRGIL_WIZARD/src/util/CfgPrinter.v3	/^	private def targets = Vector<int>.new();$/;"	d
tbind	$VIRGIL_WIZARD/src/modules/HostModuleBuilder.v3	/^class HostModuleBuilderOf<C>(name: string, tnew: void -> C, tbind: (C, Instance) -> void) {$/;"	d
test	$VIRGIL_WIZARD/src/engine/Trace.v3	/^	var test = false;$/;"	d
test	$VIRGIL_WIZARD/src/engine/TraceOptions.v3	/^	test('t', "test framework"),$/;"	d
thread_cputime_id	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^	thread_cputime_id$/;"	d
threadedDispatch	$VIRGIL_WIZARD/src/engine/Tuning.v3	/^	def threadedDispatch = true;	\/\/ inline dispatch at the end of every handler$/;"	d
thresholds	$VIRGIL_WIZARD/src/monitors/HotnessMonitor.v3	/^	var thresholds = [0.5d, 0.75d, 0.9d, 0.95d, 0.99d, 1d];$/;"	d
thresholds	$VIRGIL_WIZARD/src/monitors/ProfileMonitor.v3	/^	def thresholds = [75, 25, 10];$/;"	d
throw	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^	def throw(t: Throwable) -> ThrowResult;$/;"	m
throw	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def throw(t: Throwable) -> ThrowResult {$/;"	m
throw	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	def throw(thrown: Throwable) -> ThrowResult {$/;"	m
thrown	$VIRGIL_WIZARD/src/engine/Execute.v3	/^	case Throw(thrown: Throwable);$/;"	d
thrown	$VIRGIL_WIZARD/src/engine/Host.v3	/^	case Throw(thrown: Throwable);$/;"	d
thrown	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^	case Unhandled(thrown: Throwable);$/;"	d
thrown	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	var thrown: Throwable;			\/\/ trap reason, if any$/;"	d
thrown	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Target.v3	/^type SpcResultForStub(wf: WasmFunction, entrypoint: Pointer, thrown: Throwable) #unboxed { }$/;"	d
ticks	$VIRGIL_WIZARD/src/engine/Metrics.v3	/^	def ticks() -> u64 {$/;"	m
ticks	$VIRGIL_WIZARD/src/monitors/FuncProfileMonitor.v3	/^var ticks: void -> u64;$/;"	d
ticksNs	$VIRGIL_WIZARD/src/engine/v3/V3Target.v3	/^	def ticksNs() -> u64 { return u32.view(System.ticksNs()); }$/;"	f
ticksNs	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Target.v3	/^	def ticksNs() -> u64 {$/;"	f
tierUpOsr	$VIRGIL_WIZARD/src/engine/Tuning.v3	/^	def tierUpOsr = false;		\/\/ tier-up uses on-stack-replacement$/;"	d
tiering	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	var tiering: ExecutionStrategy;$/;"	d
tiering	$VIRGIL_WIZARD/src/engine/Execute.v3	/^	var tiering: ExecutionStrategy;$/;"	d
tiering	$VIRGIL_WIZARD/src/engine/Instantiator.v3	/^	var tiering: ExecutionStrategy;$/;"	d
tierupCompile	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	private def tierupCompile(wf: WasmFunction) -> (WasmFunction, Pointer, Throwable) {$/;"	f
tierupCompile	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Target.v3	/^	def tierupCompile(wf: WasmFunction) -> SpcResultForStub;$/;"	m
tierup_trigger	$VIRGIL_WIZARD/src/engine/Module.v3	/^	var tierup_trigger: int = int.max;$/;"	d
timespec	$VIRGIL_WIZARD/src/modules/wasi/x86-64-linux/WspOneModule-x86-64-linux.v3	/^def timespec = Array<long>.new(4);$/;"	d
tmp0	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^	var tmp0: Reg;$/;"	d
tmp1	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^	var tmp1: Reg;$/;"	d
tmp2	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^	var tmp2: Reg;$/;"	d
tmp3	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^	var tmp3: Reg;$/;"	d
tmp4	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^	var tmp4: Reg;$/;"	d
tnew	$VIRGIL_WIZARD/src/modules/HostModuleBuilder.v3	/^class HostModuleBuilderOf<C>(name: string, tnew: void -> C, tbind: (C, Instance) -> void) {$/;"	d
toAbstractBlockType	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	def toAbstractBlockType(module: Module) -> (Array<ValueType>, Array<ValueType>) {$/;"	m
toAbstractValueType	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	def toAbstractValueType(module: Module) -> ValueType {$/;"	m
toConcreteValueType	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	def toConcreteValueType(instance: Instance) -> ValueType {$/;"	m
toHeapType	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	def toHeapType() -> HeapType {$/;"	m
toHeapType	$VIRGIL_WIZARD/src/engine/WasmParser.v3	/^	def toHeapType(pt: int, index: int) -> HeapType {$/;"	m
toMergeVal	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	private def toMergeVal(from: SpcVal) -> SpcVal {$/;"	m
toPrintableChar	$VIRGIL_WIZARD/src/engine/WasmParser.v3	/^	def toPrintableChar(b: byte) -> byte {$/;"	m
toString	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^	def toString() -> string {$/;"	m
toValueKind	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	def toValueKind(instance: Instance) -> ValueKind {$/;"	m
top	$VIRGIL_WIZARD/src/util/ControlStack.v3	/^	def top() -> ControlStackEntry<B> {$/;"	m
topEndLabelIsReferenced	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	def topEndLabelIsReferenced() -> bool {$/;"	m
totalTime	$VIRGIL_WIZARD/src/monitors/ProfileMonitor.v3	/^	var totalTime: int;$/;"	d
total_bytes	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	private var total_bytes: u32;$/;"	d
trace	$VIRGIL_WIZARD/src/engine/BytecodeIterator.v3	/^	def trace(out: StringBuilder, module: Module, tracer: InstrTracer) {$/;"	m
trace	$VIRGIL_WIZARD/src/engine/Execute.v3	/^	case Trap(reason: TrapReason, trace: bool);$/;"	d
trace	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def trace() {$/;"	m
trace	$VIRGIL_WIZARD/src/modules/HostModuleBuilder.v3	/^	var trace: bool;$/;"	d
trace	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^	var trace: List<TraceEntry>;$/;"	d
trace	$VIRGIL_WIZARD/src/monitors/LoopTraceMonitor.v3	/^private class TraceIfProbe(trace: TraceBuffer) extends OperandProbe_i_v {$/;"	d
trace	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^	def trace = Vector<WasmEvent>.new();$/;"	d
trace0	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def trace0(str: string, vals: Array<SpcVal>, sp: int) {$/;"	m
traceBytes	$VIRGIL_WIZARD/src/engine/WasmParser.v3	/^	def traceBytes(pt: int, quantity: string) {$/;"	m
traceCall	$VIRGIL_WIZARD/src/util/ImportTracer.v3	/^	def traceCall(imp: ImportInfo, f: Function, args: Range<Value>) -> HostResult {$/;"	m
traceCallHostFunction	$VIRGIL_WIZARD/src/engine/Execute.v3	/^	def traceCallHostFunction(hf: HostFunction) {$/;"	f
traceFrames	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	def traceFrames(when: string, sp: Pointer) {$/;"	m
traceHandlers	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	private def traceHandlers(name: string, handlers: Vector<ExHandlerEntry>) {$/;"	m
traceIpAndSp	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	def traceIpAndSp(ip: Pointer, sp: Pointer, out: Range<byte> -> void) {$/;"	f
traceLocals	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	def traceLocals(count: u32, ltype: ValueType) {$/;"	m
traceOpcode	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	def traceOpcode() {$/;"	m
traceOpcode	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def traceOpcode(orig: bool) {$/;"	m
traceOpcodeAndStack	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def traceOpcodeAndStack(orig: bool) {$/;"	m
traceOpcodeUnreachable	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def traceOpcodeUnreachable(orig: bool) {$/;"	m
traceOrig	$VIRGIL_WIZARD/src/engine/BytecodeIterator.v3	/^	def traceOrig(out: StringBuilder, module: Module, tracer: InstrTracer) {$/;"	m
traceStack	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	def traceStack(before: bool) {$/;"	m
traceStack	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def traceStack() {$/;"	m
tracer	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	def tracer = InstrTracer.new();$/;"	d
tracer	$VIRGIL_WIZARD/src/util/BasicTracing.v3	/^	def tracer = InstrTracer.new();$/;"	d
tracer	$VIRGIL_WIZARD/src/util/CfgPrinter.v3	/^	private def tracer = InstrTracer.new();$/;"	d
trackFloat32Const	$VIRGIL_WIZARD/src/engine/Tuning.v3	/^	def trackFloat32Const = false;		\/\/ XXX: enable$/;"	d
trackFloatZeroConst	$VIRGIL_WIZARD/src/engine/Tuning.v3	/^	def trackFloatZeroConst = true;$/;"	d
trampoline	$VIRGIL_WIZARD/src/util/Whamm.v3	/^	var trampoline: TargetCode;$/;"	d
trampoline_code	$VIRGIL_WIZARD/src/engine/x86-64/X86_64WhammProbeTrampoline.v3	/^var trampoline_code: X86_64SpcModuleCode;$/;"	d
trampoline_entries	$VIRGIL_WIZARD/src/engine/x86-64/X86_64WhammProbeTrampoline.v3	/^var trampoline_entries: List<(Array<WhammArg>, Pointer)>;$/;"	d
trap	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^	def trap(r: TrapReason) -> Throwable;$/;"	m
trap	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def trap(reason: TrapReason) -> Throwable {$/;"	m
trap	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	def trap(reason: TrapReason) -> Throwable {$/;"	m
trapDivideByZero	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def trapDivideByZero();$/;"	m
trapDivideUnrepresentable	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def trapDivideUnrepresentable();$/;"	m
trapNull	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def trapNull();$/;"	m
trapObjects	$VIRGIL_WIZARD/src/engine/Execute.v3	/^	def trapObjects = Array<Trap>.new(TrapReason.count);$/;"	d
trapTableOOB	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def trapTableOOB();$/;"	m
trapUnreachable	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def trapUnreachable();$/;"	m
trapWith	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	private def trapWith(t: Throwable) {$/;"	m
trap_labels	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	var trap_labels: Array<MasmLabel>;	\/\/ maps TrapReason to a label$/;"	d
trap_labels	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def trap_labels = Vector<(TrapReason, MasmLabel)>.new();$/;"	d
trap_or	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^	def trap_or<T>(r: (T, TrapReason), push: T -> ()) -> Throwable {$/;"	m
trap_reason	$VIRGIL_WIZARD/src/engine/Instantiator.v3	/^	var trap_reason: TrapReason;$/;"	d
trap_stubs	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	var trap_stubs: X86_64SpcTrapsStub;$/;"	d
tree	$VIRGIL_WIZARD/src/monitors/ProfileMonitor.v3	/^	var tree: ProfileTree;$/;"	d
trees	$VIRGIL_WIZARD/src/monitors/LoopTraceMonitor.v3	/^	def trees = Vector<PrefixTrie<TraceEntry, u32>>.new();$/;"	d
trueToOne	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^def trueToOne(z: bool) -> int { return if(z, 1, 0); }$/;"	m
trunc	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^    trunc$/;"	d
truncF32	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def truncF32<T>(min: float, max: float, trunc: float -> T, a: float) -> (T, TrapReason) {$/;"	m
truncF32_SAT	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def truncF32_SAT<T>(min: float, max: float, tmin: T, tmax: T, trunc: float -> T, a: float) -> T {$/;"	m
truncF64	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def truncF64<T>(min: double, max: double, trunc: double -> T, a: double) -> (T, TrapReason) {$/;"	m
truncF64_SAT	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^def truncF64_SAT<T>(min: double, max: double, tmin: T, tmax: T, trunc: double -> T, a: double) -> T {$/;"	m
tryAllocReg	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def tryAllocReg(kind: ValueKind, slot: u32) -> Reg {$/;"	m
tryFold_i_i	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def tryFold_i_i(f: i32 -> i32) -> bool {$/;"	m
tryFold_i_l	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def tryFold_i_l(f: i32 -> i64) -> bool { return tryFold_x_y(ValueKind.I64, f, i32.view<i32>, i64.view<i32>, i32.view<i64>); }$/;"	m
tryFold_ii_i	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def tryFold_ii_i(f: (i32, i32) -> i32) -> bool {$/;"	m
tryFold_ii_z	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def tryFold_ii_z(f: (i32, i32) -> bool) -> bool  { return tryFold_xx_y(ValueKind.I32, f, i32.view<i32>, isNotZero, trueToOne); }$/;"	m
tryFold_l_i	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def tryFold_l_i(f: i64 -> i32) -> bool { return tryFold_x_y(ValueKind.I32, f, i64.view<i32>, i32.view<i32>, i32.view<i32>); }$/;"	m
tryFold_l_l	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def tryFold_l_l(f: i64 -> i64) -> bool { return tryFold_x_y(ValueKind.I64, f, i64.view<i32>, i64.view<i32>, i32.view<i64>); }$/;"	m
tryFold_ll_l	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def tryFold_ll_l(f: (i64, i64) -> i64) -> bool   { return tryFold_xx_y(ValueKind.I64, f, i64.view<i32>, i64.view<i32>, i32.view<i64>); }$/;"	m
tryFold_ll_z	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def tryFold_ll_z(f: (i64, i64) -> bool) -> bool  { return tryFold_xx_y(ValueKind.I32, f, i64.view<i32>, isNotZero, trueToOne); }$/;"	m
tryFold_qq_z	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def tryFold_qq_z(f: (u64, u64) -> bool) -> bool  { return tryFold_xx_y(ValueKind.I32, f, u64.view<i32>, isNotZero, trueToOne); }$/;"	m
tryFold_u_l	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def tryFold_u_l(f: u32 -> i64) -> bool { return tryFold_x_y(ValueKind.I64, f, u32.view<i32>, i64.view<i32>, i32.view<i64>); }$/;"	m
tryFold_u_u	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def tryFold_u_u(f: u32 -> u32) -> bool { return tryFold_x_y(ValueKind.I32, f, u32.view<i32>, u32.view<i32>, i32.view<u32>); }$/;"	m
tryFold_uu_u	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def tryFold_uu_u(f: (u32, u32) -> u32) -> bool   { return tryFold_xx_y(ValueKind.I32, f, u32.view<i32>, u32.view<i32>, i32.view<u32>); }$/;"	m
tryFold_uu_z	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def tryFold_uu_z(f: (u32, u32) -> bool) -> bool  { return tryFold_xx_y(ValueKind.I32, f, u32.view<i32>, isNotZero, trueToOne); }$/;"	m
tryFold_w_w	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def tryFold_w_w(f: u64 -> u64) -> bool { return tryFold_x_y(ValueKind.I64, f, u64.view<i32>, u64.view<i32>, i32.view<u64>); }$/;"	m
tryFold_ww_w	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def tryFold_ww_w(f: (u64, u64) -> u64) -> bool   { return tryFold_xx_y(ValueKind.I64, f, u64.view<i32>, u64.view<i32>, i32.view<u64>); }$/;"	m
tryFold_x_y	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def tryFold_x_y<X, Y>(kind: ValueKind, f: X -> Y, toX: i32 -> X, toY: i32 -> Y, fromY: Y -> i32) -> bool {$/;"	m
tryFold_xx_y	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def tryFold_xx_y<X, Y>(kind: ValueKind, f: (X, X) -> Y, toX: i32 -> X, toY: i32 -> Y, fromY: Y -> i32) -> bool {$/;"	m
tryHandleEx	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	private def tryHandleEx(ex: Exception, f: V3Frame) -> bool {$/;"	m
tryHandleSuspension	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^	def tryHandleSuspension(tag: Tag) -> ExHandler;$/;"	m
tryHandleSuspension	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def tryHandleSuspension(tag: Tag) -> ExHandler {$/;"	m
tryHandleSuspension	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	def tryHandleSuspension(tag: Tag) -> ExHandler {$/;"	m
tryHandleSwitch	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^	def tryHandleSwitch(tag: Tag) -> ExHandler;$/;"	m
tryHandleSwitch	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def tryHandleSwitch(tag: Tag) -> ExHandler {$/;"	m
tryHandleSwitch	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	def tryHandleSwitch(tag: Tag) -> ExHandler {$/;"	m
tryRecordOperand	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^	def tryRecordOperand(addr: u32, b: u8) {$/;"	m
try_end	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	var try_end: int;$/;"	d
typeCode1	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	def typeCode1() -> ValueTypeCode {$/;"	m
typeCode2	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	def typeCode2() -> ValueTypeCode {$/;"	m
typeCodeHasIndex	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	def typeCodeHasIndex(code: int) -> bool {$/;"	f
typeName	$VIRGIL_WIZARD/src/util/OptionsRegistry.v3	/^class OptionGroupEntry(opt: Opt, var displayName: string, typeName: string, help: string) { }$/;"	d
typeToKindFlags	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^def typeToKindFlags(vt: ValueType) -> byte {$/;"	m
u32_reinterpret_f32	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def u32_reinterpret_f32(v: float) -> u32;$/;"	m
u64_reinterpret_f64	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^def u64_reinterpret_f64(v: double) -> u64;$/;"	m
ucomi_s_s	$VIRGIL_WIZARD/src/engine/x86-64/X86_64MacroAssembler.v3	/^	def ucomi_s_s = if(isF64, X86_64Assembler.ucomisd_s_s, X86_64Assembler.ucomiss_s_s);$/;"	d
ucontext_rip_offset	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^def ucontext_rip_offset = 168;$/;"	d
ucontext_rip_offset	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^def ucontext_rip_offset = 168;$/;"	d
ucontext_rsp_offset	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^def ucontext_rsp_offset = 160;$/;"	d
ui	$VIRGIL_WIZARD/src/util/HostAdapters.v3	/^def ui = Values.unbox_i;$/;"	d
uid	$VIRGIL_WIZARD/src/engine/Canon.v3	/^	var uid = 0;$/;"	d
uid	$VIRGIL_WIZARD/src/engine/Trace.v3	/^	var uid = false;$/;"	d
uid	$VIRGIL_WIZARD/src/engine/TraceOptions.v3	/^	uid('u', "internal unique IDs"),$/;"	d
ul	$VIRGIL_WIZARD/src/util/HostAdapters.v3	/^def ul = Values.unbox_l;$/;"	d
unassign	$VIRGIL_WIZARD/src/engine/compiler/RegAlloc.v3	/^	def unassign(reg: Reg, assignment: int) -> bool {$/;"	m
undo_init_list	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	var undo_init_list: List<int>;$/;"	d
unfree	$VIRGIL_WIZARD/src/engine/compiler/RegAlloc.v3	/^	def unfree(reg: Reg) {$/;"	m
unimplemented	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^	var unimplemented: void -> void;	\/\/ function to call for unimplemented bytecodes$/;"	d
units	$VIRGIL_WIZARD/src/engine/Metrics.v3	/^class Metric(name: string, units: string, help: string) {$/;"	d
unmap	$VIRGIL_WIZARD/src/engine/x86-64/Mmap.v3	/^	def unmap() {$/;"	m
unreachable	$VIRGIL_WIZARD/src/util/WasmAsm.v3	/^	def unreachable() -> this {$/;"	m
unrefLater	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def unrefLater(reg: Reg, assign: int) { \/\/ XXX: #inline$/;"	m
unrefRegs	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def unrefRegs() {$/;"	m
unrefSlot	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def unrefSlot(slot: u32) {$/;"	m
unrefs	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def unrefs = Array<(Reg, int)>.new(config.regSet.regs.length);$/;"	d
unsupported	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def unsupported() {$/;"	m
unused_	$VIRGIL_WIZARD/src/engine/v3/V3Target.v3	/^	var unused_ = ExecuteOptions.registerDefaultMode("v3-int", V3InterpreterOnlyStrategy.new(), "slow interpreter only");$/;"	d
unused_	$VIRGIL_WIZARD/src/modules/wali/x86-64-linux/WaliModule.v3	/^def unused_ = HostModuleBuilderOf<WaliInstance>.new("wali", WaliInstance.new, WaliInstance.mbind)$/;"	d
unused_	$VIRGIL_WIZARD/src/monitors/LoopTraceMonitor.v3	/^	def unused_ = void(MonitorRegistry.addReport(trace.report));$/;"	d
unused_	$VIRGIL_WIZARD/src/util/OptionsRegistry.v3	/^	private var unused_ = ALL.numHyphens = 2;$/;"	d
unused__	$VIRGIL_WIZARD/src/engine/Metrics.v3	/^	private def unused__ = all = Lists.reverse(all);$/;"	d
unwind	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	private def unwind(p_retaddr: Pointer, new_sp: Pointer) {$/;"	m
unwindStackChain	$VIRGIL_WIZARD/src/engine/Runtime.v3	/^	def unwindStackChain(stack: WasmStack, instance: Instance, tag: u31, get_handler: (WasmStack, Tag) -> ExHandler) -> Continuation {$/;"	f
update	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^	def update(b: u8, old_cost: u64, new_cost: u64) {$/;"	m
update	$VIRGIL_WIZARD/src/util/PrefixTrie.v3	/^	def update(seq: Range<K>, f: V -> V) -> V {$/;"	m
updateDiff	$VIRGIL_WIZARD/src/engine/Metrics.v3	/^	def updateDiff(before_us: u64) -> this {$/;"	m
updateFuncs	$VIRGIL_WIZARD/src/engine/Table.v3	/^	def updateFuncs(start: int, end: int) {$/;"	m
updateImportedGlobals	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^	def updateImportedGlobals(mod: Module) -> bool {$/;"	m
updateUContextToTrapsStub	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	private def updateUContextToTrapsStub(ucontext: Pointer, reason: TrapReason) {$/;"	m
upper	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^type SlotAddrs(tag: X86_64Addr, value: X86_64Addr, upper: X86_64Addr) #unboxed { }$/;"	d
us	$VIRGIL_WIZARD/src/engine/Metrics.v3	/^	private def us = "\xCE\xBCs";$/;"	d
userCode	$VIRGIL_WIZARD/src/engine/x86-64/X86_64PreGenStubs.v3	/^	userCode: RiUserCode,$/;"	d
uu	$VIRGIL_WIZARD/src/util/HostAdapters.v3	/^def uu = Values.unbox_u;$/;"	d
v128	$VIRGIL_WIZARD/src/bytecode/CanonicalDefs.v3	/^type v128(low: u64, high: u64);$/;"	c
v_d	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def v_d = S(arr_v, arr_d);$/;"	d
v_e	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def v_e = S(arr_v, arr_e);$/;"	d
v_f	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def v_f = S(arr_v, arr_f);$/;"	d
v_g	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def v_g = S(arr_v, arr_g);$/;"	d
v_h	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def v_h = S(arr_v, arr_h);$/;"	d
v_i	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def v_i = S(arr_v, arr_i);$/;"	d
v_i	$VIRGIL_WIZARD/src/modules/wasi/WspOneModule.v3	/^def v_i = 		WasiHostAdapter<void, int>.new(_, HostAdapters.v_i);$/;"	d
v_l	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def v_l = S(arr_v, arr_l);$/;"	d
v_r	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def v_r = S(arr_v, arr_r);$/;"	d
v_s	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def v_s = S(arr_v, arr_s);$/;"	d
v_v	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def v_v = S(arr_v, arr_v);$/;"	d
v_x	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def v_x = S(arr_v, arr_x);$/;"	d
val	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^enum BpTypeCode(code: byte, val: i7) {$/;"	d
val	$VIRGIL_WIZARD/src/engine/Host.v3	/^	case Value1(val: Value);$/;"	d
val	$VIRGIL_WIZARD/src/engine/Metrics.v3	/^	var val: u64;$/;"	d
val	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case I64(val: i64);$/;"	d
val	$VIRGIL_WIZARD/src/engine/Value.v3	/^	case Ref(val: Object);$/;"	d
val_stack	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	def val_stack = ArrayStack<ValueType>.new();$/;"	d
val_stack_top	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	var val_stack_top: int;$/;"	d
val_stack_top	$VIRGIL_WIZARD/src/engine/Module.v3	/^type ExHandler(index: int, handler_pc: int, push_exnref: bool, ex_slot: int, val_stack_top: int, sidetable_pos: int) #unboxed { }$/;"	d
val_stack_top	$VIRGIL_WIZARD/src/engine/Sidetable.v3	/^type SidetableCatchEntry(handler_pc: int, val_stack_top: int, sidetable_pos: int) #unboxed;$/;"	d
val_stack_top	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	var val_stack_top: u32;$/;"	d
valcount	$VIRGIL_WIZARD/src/engine/Sidetable.v3	/^type SidetableBrEntry(dpc: int, valcount: int, popcount: int, dstp: int) #unboxed;$/;"	d
valcount	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	var valcount: u32;$/;"	d
valcount_pos	$VIRGIL_WIZARD/src/engine/Sidetable.v3	/^	def valcount_pos = 1;$/;"	d
valid	$VIRGIL_WIZARD/src/engine/Opcodes.v3	/^	private def valid = Array<u32>.new(8);  \/\/ bitmap for valid$/;"	d
valid_section	$VIRGIL_WIZARD/src/engine/BpConstants.v3	/^	def valid_section = Array<bool>.new(256);$/;"	d
validateCode	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	def validateCode() {$/;"	m
validateCtxActions	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^	def validateCtxActions(actions: Vector<WasmEvent>, mod: Module) -> bool {$/;"	f
validateExpr0	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	private def validateExpr0(sig: SigDecl, d: DataReader) -> CodeValidatorResult {$/;"	m
validateFunc	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	def validateFunc(f: FuncDecl, startAddr: u64) -> CodeValidatorResult {$/;"	m
validateFunc0	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	private def validateFunc0(func: FuncDecl) -> CodeValidatorResult {$/;"	m
validateInitExpr	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	def validateInitExpr(expected: SigDecl, d: DataReader) -> CodeValidatorResult {$/;"	m
validateReplayFunction	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^	def validateReplayFunction($/;"	f
validateValues	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^	def validateValues(vals: Array<Value>, types: Array<ValueType>) -> bool {$/;"	f
validate_bytes	$VIRGIL_WIZARD/src/engine/Metrics.v3	/^	def validate_bytes	= m("validate:bytes", bytes, "Total Wasm bytecode bytes validated");$/;"	d
validate_code	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	var validate_code = true;$/;"	d
validate_time_per_byte	$VIRGIL_WIZARD/src/engine/Metrics.v3	/^	def validate_time_per_byte = r("validate:time_per_byte", validate_time_us, validate_bytes,$/;"	d
validate_time_us	$VIRGIL_WIZARD/src/engine/Metrics.v3	/^	def validate_time_us	= t("validate:time_us", "Time taken to validate Wasm bytecode");$/;"	d
validatingInitExpr	$VIRGIL_WIZARD/src/engine/CodeValidator.v3	/^	var validatingInitExpr = false;$/;"	d
validation	$VIRGIL_WIZARD/src/engine/Trace.v3	/^	var validation = false;$/;"	d
validation	$VIRGIL_WIZARD/src/engine/TraceOptions.v3	/^	validation('v', "code validation"),$/;"	d
validationFail	$VIRGIL_WIZARD/src/monitors/R3BackEndMonitor.v3	/^	private def validationFail() {$/;"	m
validationPrecheck	$VIRGIL_WIZARD/src/monitors/R3BackEndMonitor.v3	/^	private def validationPrecheck() -> bool {$/;"	m
validator	$VIRGIL_WIZARD/src/engine/BinParser.v3	/^	private var validator: CodeValidator;$/;"	d
validator	$VIRGIL_WIZARD/src/modules/wizeng/WizengModule.v3	/^	var validator: CodeValidator;$/;"	d
validatorCallback	$VIRGIL_WIZARD/src/monitors/WhammMonitor.v3	/^	def validatorCallback(cv: CodeValidator, pc: int, opcode: Opcode) {$/;"	m
vals	$VIRGIL_WIZARD/src/engine/Execute.v3	/^	case Value(vals: Array<Value>);$/;"	d
vals	$VIRGIL_WIZARD/src/engine/Host.v3	/^	case ValueN(vals: Array<Value>);$/;"	d
vals	$VIRGIL_WIZARD/src/engine/Module.v3	/^	case Struct(t: HeapType.Struct, vals: Array<InitExpr>);$/;"	d
vals	$VIRGIL_WIZARD/src/engine/Value.v3	/^class HeapObject(decl: HeapTypeDecl, vals: Array<Value>) extends Object {}$/;"	d
vals	$VIRGIL_WIZARD/src/util/OpcodeMap.v3	/^	def vals = Array<T>.new(300);$/;"	d
valtype	$VIRGIL_WIZARD/src/engine/Instance.v3	/^class Global(valtype: ValueType, decl: GlobalDecl) extends Exportable {$/;"	d
valtype	$VIRGIL_WIZARD/src/engine/Module.v3	/^class GlobalDecl(valtype: ValueType, mutable: bool, init: InitExpr) extends Decl {$/;"	d
valtype	$VIRGIL_WIZARD/src/engine/Type.v3	/^type StorageType(valtype: ValueType, pack: Packedness, mutable: bool) { }$/;"	d
value	$VIRGIL_WIZARD/src/engine/Instance.v3	/^	private var value: Value;	\/\/ TODO: ideal #unboxed in future, has no effect yet$/;"	d
value	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^type SlotAddrs(tag: X86_64Addr, value: X86_64Addr, upper: X86_64Addr) #unboxed { }$/;"	d
value	$VIRGIL_WIZARD/src/monitors/DebugMonitor.v3	/^	case Set(local_idx: int, value: Value);$/;"	d
value	$VIRGIL_WIZARD/src/monitors/R3Utils.v3	/^	case GlobalGet(idx: int, value: Value);$/;"	d
value	$VIRGIL_WIZARD/src/util/PrefixTrie.v3	/^	var value: V;$/;"	d
valueTags	$VIRGIL_WIZARD/src/engine/Tuning.v3	/^	def valueTags = false;		\/\/ required for proper GC$/;"	d
value_size	$VIRGIL_WIZARD/src/engine/Tagging.v3	/^	def value_size: int = slot_size - tag_size;$/;"	d
valuerep	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^class MacroAssembler(valuerep: Tagging, regConfig: RegConfig) {$/;"	d
valuerep	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^class VspHelper(vsp: X86_64Gpr, valuerep: Tagging, depth: int) {$/;"	d
valuerep	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	def valuerep = Target.tagging;$/;"	d
values	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	def values = ArrayStack<Value>.new();	\/\/ storage of all WasmValues$/;"	d
verbose	$VIRGIL_WIZARD/src/engine/Debug.v3	/^	def verbose = false;$/;"	d
verbose	$VIRGIL_WIZARD/src/util/CfgBuilder.v3	/^def verbose = false;$/;"	d
verify	$VIRGIL_WIZARD/src/engine/compiler/RegAlloc.v3	/^	def verify(out: TraceBuilder) -> bool {$/;"	m
version	$VIRGIL_WIZARD/src/engine/Version.v3	/^	def version: string = "25\xCE\xB2";$/;"	d
vfp	$VIRGIL_WIZARD/src/engine/compiler/RegSet.v3	/^	var vfp: Reg;$/;"	d
vfp	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	var vfp: Reg;$/;"	d
vfp	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^	var vfp: Reg;$/;"	d
vfp	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	private def vfp() -> Pointer {$/;"	m
vfp_slot	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	var vfp_slot: MasmAddr;$/;"	d
vfp_slot	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^	var vfp_slot: MasmAddr;$/;"	d
visitAtomic	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visitAtomic(op: Opcode, imm: MemArg)	{ visitOp(op); }$/;"	m
visitBinop	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visitBinop(op: Opcode)			{ visitOp(op); }$/;"	m
visitCall	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visitCall(op: Opcode)			{ visitOp(op); }$/;"	m
visitCallDirect	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visitCallDirect(op: Opcode, index: u31, tailCall: bool) {$/;"	m
visitCallDirect	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visitCallDirect(op: Opcode, func_index: u31, tailCall: bool)	{ visitCall(op); }$/;"	m
visitCallIndirect	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visitCallIndirect(op: Opcode, sig_index: u31, table_index: u31, tailCall: bool) {$/;"	m
visitCallIndirect	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visitCallIndirect(op: Opcode, sig_index: u31, table_index: u31, tailCall: bool)	{ visitCall(op); }$/;"	m
visitCallRef	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visitCallRef(op: Opcode, index: u31, tailCall: bool) {$/;"	m
visitCallRef	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visitCallRef(op: Opcode, sig_index: u31, tailCall: bool)		{ visitCall(op); }$/;"	m
visitCompare	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visitCompare(op: Opcode)			{ visitBinop(op); }$/;"	m
visitCompareI	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	private def visitCompareI(asm: X86_64Assembler, cond: X86_64Cond) -> bool {$/;"	m
visitConst	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visitConst(op: Opcode)			{ visitOp(op); }$/;"	m
visitControl	$VIRGIL_WIZARD/src/monitors/InstrCountMonitor.v3	/^	def visitControl(op: Opcode) {$/;"	m
visitControl	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visitControl(op: Opcode) 			{ visitOp(op); }$/;"	m
visitConvert	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visitConvert(op: Opcode)			{ visitUnop(op); }$/;"	m
visitEntry	$VIRGIL_WIZARD/src/monitors/ControlInstrumenter.v3	/^	def visitEntry() {$/;"	m
visitEntry	$VIRGIL_WIZARD/src/monitors/LoopTraceMonitor.v3	/^	def visitEntry() {$/;"	m
visitEntry	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visitEntry()				{ }$/;"	m
visitFConvertI32S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	private def visitFConvertI32S(kind: ValueKind, emit_cvt: (X86_64Xmmr, X86_64Gpr) -> X86_64Assembler) {$/;"	m
visitFConvertI32U	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	private def visitFConvertI32U(kind: ValueKind, emit_cvt: (X86_64Xmmr, X86_64Gpr) -> X86_64Assembler) {$/;"	m
visitFConvertI64S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	private def visitFConvertI64S(kind: ValueKind, emit_cvt: (X86_64Xmmr, X86_64Gpr) -> X86_64Assembler) {$/;"	m
visitFConvertI64U	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	private def visitFConvertI64U(kind: ValueKind, emit_cvt: (X86_64Xmmr, X86_64Gpr, X86_64Xmmr, X86_64Gpr) -> void) {$/;"	m
visitFloatCmp	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	private def visitFloatCmp(emit_cmp: (X86_64Xmmr, X86_64Xmmr) -> X86_64Assembler, unordered_true: bool, cond: X86_64Cond) {$/;"	m
visitFloatMinOrMax	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visitFloatMinOrMax(is64: bool, isMin: bool) { \/\/ XXX: move to macro assembler?$/;"	m
visitGc	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visitGc(op: Opcode)				{ visitOp(op); }$/;"	m
visitGlobal	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visitGlobal(op: Opcode, local_index: u31)	{ visitOp(op); }$/;"	m
visitIDivRem	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	private def visitIDivRem(dst: Reg, emit: X86_64Gpr -> void) {$/;"	m
visitITruncF	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	private def visitITruncF(opcode: Opcode) {$/;"	m
visitLoad	$VIRGIL_WIZARD/src/monitors/MemStatsMonitor.v3	/^	def visitLoad(op: Opcode, imm: MemArg, size: u8) {$/;"	m
visitLoad	$VIRGIL_WIZARD/src/monitors/ModuleInstrumenter.v3	/^	def visitLoad(op: Opcode, imm: MemArg, size: u8) {$/;"	m
visitLoad	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^	def visitLoad(op: Opcode, imm: MemArg, size: u8) {$/;"	m
visitLoad	$VIRGIL_WIZARD/src/util/BasicTracing.v3	/^	def visitLoad(op: Opcode, imm: MemArg, size: u8) {$/;"	m
visitLoad	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visitLoad(op: Opcode, imm: MemArg, size: u8)	{ visitMem(op, imm.memory_index); }$/;"	m
visitLocal	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visitLocal(op: Opcode, local_index: u31)	{ visitOp(op); }$/;"	m
visitLocalDecl	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visitLocalDecl(count: u32, vtc: ValueTypeCode) {$/;"	m
visitLocalDecl	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visitLocalDecl(count: u32, vtc: ValueTypeCode)	{ }$/;"	m
visitMem	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visitMem(op: Opcode, memory_index: u31)	{ visitOp(op); }$/;"	m
visitMisc	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visitMisc(op: Opcode) 			{ visitOp(op); }$/;"	m
visitOp	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visitOp(opcode: Opcode) {$/;"	m
visitOp	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^	def visitOp(op: Opcode) {$/;"	m
visitOp	$VIRGIL_WIZARD/src/monitors/InstrCountMonitor.v3	/^	def visitOp(op: Opcode) {$/;"	m
visitOp	$VIRGIL_WIZARD/src/monitors/ModuleInstrumenter.v3	/^	def visitOp(op: Opcode) {$/;"	m
visitOp	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^	def visitOp(op: Opcode) {$/;"	m
visitOp	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visitOp(op: Opcode) 			{ }$/;"	m
visitProbe	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visitProbe(orig_op: Opcode) {$/;"	m
visitProbe	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visitProbe(orig_op: Opcode)			{ }$/;"	m
visitRef	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visitRef(op: Opcode)			{ visitOp(op); }$/;"	m
visitReinterpret	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visitReinterpret(kind: ValueKind) {$/;"	m
visitShift	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	private def visitShift(kind: ValueKind, emit_r_i: (X86_64Gpr, u6) -> X86_64Assembler, emit_r_cl: X86_64Gpr -> X86_64Assembler) -> bool {$/;"	m
visitSimpleOp2_uu_u	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	private def visitSimpleOp2_uu_u(fold: (u32, u32) -> u32,$/;"	m
visitSimpleOp2_ww_w	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	private def visitSimpleOp2_ww_w(fold: (u64, u64) -> u64,$/;"	m
visitStore	$VIRGIL_WIZARD/src/monitors/MemStatsMonitor.v3	/^	def visitStore(op: Opcode, imm: MemArg, size: u8) {$/;"	m
visitStore	$VIRGIL_WIZARD/src/monitors/ModuleInstrumenter.v3	/^	def visitStore(op: Opcode, imm: MemArg, size: u8) {$/;"	m
visitStore	$VIRGIL_WIZARD/src/util/BasicTracing.v3	/^	def visitStore(op: Opcode, imm: MemArg, size: u8) {$/;"	m
visitStore	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visitStore(op: Opcode, imm: MemArg, size: u8)	{ visitMem(op, imm.memory_index); }$/;"	m
visitSwizzle	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	private def visitSwizzle() {$/;"	m
visitTable	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visitTable(op: Opcode, table_index: u31)	{ visitOp(op); }$/;"	m
visitUnop	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visitUnop(op: Opcode)			{ visitOp(op); }$/;"	m
visit_ANY_CONVERT_EXTERN	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_ANY_CONVERT_EXTERN() { } \/\/ nop$/;"	m
visit_ANY_CONVERT_EXTERN	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_ANY_CONVERT_EXTERN	() 					{ visitGc(Opcode.ANY_CONVERT_EXTERN); }$/;"	m
visit_ARRAY_COPY	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_ARRAY_COPY(ht_index1: u31, ht_index2: u31) {$/;"	m
visit_ARRAY_COPY	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_ARRAY_COPY		(ht_index1: u31, ht_index2: u31)	{ visitGc(Opcode.ARRAY_COPY); }$/;"	m
visit_ARRAY_FILL	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_ARRAY_FILL(ht_index: u31) {$/;"	m
visit_ARRAY_FILL	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_ARRAY_FILL		(ht_index: u31)				{ visitGc(Opcode.ARRAY_FILL); }$/;"	m
visit_ARRAY_GET	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_ARRAY_GET(ht_index: u31) {$/;"	m
visit_ARRAY_GET	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_ARRAY_GET		(ht_index: u31) 			{ visitGc(Opcode.ARRAY_GET); }$/;"	m
visit_ARRAY_GET_S	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_ARRAY_GET_S(ht_index: u31) {$/;"	m
visit_ARRAY_GET_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_ARRAY_GET_S		(ht_index: u31) 			{ visitGc(Opcode.ARRAY_GET_S); }$/;"	m
visit_ARRAY_GET_U	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_ARRAY_GET_U(ht_index: u31) {$/;"	m
visit_ARRAY_GET_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_ARRAY_GET_U		(ht_index: u31) 			{ visitGc(Opcode.ARRAY_GET_U); }$/;"	m
visit_ARRAY_INIT_DATA	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_ARRAY_INIT_DATA(ht_index: u31, data_index: u31) {$/;"	m
visit_ARRAY_INIT_DATA	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_ARRAY_INIT_DATA	(ht_index: u31, data_index: u31)	{ visitGc(Opcode.ARRAY_INIT_DATA); }$/;"	m
visit_ARRAY_INIT_ELEM	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_ARRAY_INIT_ELEM(ht_index: u31, elem_index: u31) {$/;"	m
visit_ARRAY_INIT_ELEM	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_ARRAY_INIT_ELEM	(ht_index: u31, elem_index: u31)	{ visitGc(Opcode.ARRAY_INIT_ELEM); }$/;"	m
visit_ARRAY_LEN	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_ARRAY_LEN() {$/;"	m
visit_ARRAY_LEN	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_ARRAY_LEN		() 					{ visitGc(Opcode.ARRAY_LEN); }$/;"	m
visit_ARRAY_NEW	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_ARRAY_NEW(ht_index: u31) {$/;"	m
visit_ARRAY_NEW	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_ARRAY_NEW		(ht_index: u31) 			{ visitGc(Opcode.ARRAY_NEW); }$/;"	m
visit_ARRAY_NEW_DATA	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_ARRAY_NEW_DATA(ht_index: u31, data_index: u31) {$/;"	m
visit_ARRAY_NEW_DATA	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_ARRAY_NEW_DATA	(ht_index: u31, data_index: u31)	{ visitGc(Opcode.ARRAY_NEW_DATA); }$/;"	m
visit_ARRAY_NEW_DEFAULT	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_ARRAY_NEW_DEFAULT(ht_index: u31) {$/;"	m
visit_ARRAY_NEW_DEFAULT	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_ARRAY_NEW_DEFAULT	(ht_index: u31) 			{ visitGc(Opcode.ARRAY_NEW_DEFAULT); }$/;"	m
visit_ARRAY_NEW_ELEM	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_ARRAY_NEW_ELEM(ht_index: u31, elem_index: u31) {$/;"	m
visit_ARRAY_NEW_ELEM	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_ARRAY_NEW_ELEM	(ht_index: u31, elem_index: u31)	{ visitGc(Opcode.ARRAY_NEW_ELEM); }$/;"	m
visit_ARRAY_NEW_FIXED	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_ARRAY_NEW_FIXED(ht_index: u31, length: u31) {$/;"	m
visit_ARRAY_NEW_FIXED	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_ARRAY_NEW_FIXED	(ht_index: u31, length: u31)		{ visitGc(Opcode.ARRAY_NEW_FIXED); }$/;"	m
visit_ARRAY_SET	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_ARRAY_SET(ht_index: u31) {$/;"	m
visit_ARRAY_SET	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_ARRAY_SET		(ht_index: u31) 			{ visitGc(Opcode.ARRAY_SET); }$/;"	m
visit_ATOMIC_FENCE	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_ATOMIC_FENCE(flags: u8) {$/;"	m
visit_ATOMIC_FENCE	$VIRGIL_WIZARD/src/util/BasicTracing.v3	/^	def visit_ATOMIC_FENCE(flags: u8) { \/\/ TODO$/;"	m
visit_ATOMIC_FENCE	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_ATOMIC_FENCE			(flags: u8)	{ visitMisc(Opcode.ATOMIC_FENCE); }$/;"	m
visit_BLOCK	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_BLOCK(btc: BlockTypeCode) {$/;"	m
visit_BLOCK	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_BLOCK		(btc: BlockTypeCode) 				{ visitControl(Opcode.BLOCK); }$/;"	m
visit_BLOCK	$VIRGIL_WIZARD/src/util/ControlStack.v3	/^	def visit_BLOCK(btc: BlockTypeCode) {$/;"	m
visit_BR	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_BR(depth: u31) {$/;"	m
visit_BR	$VIRGIL_WIZARD/src/monitors/ControlInstrumenter.v3	/^	def visit_BR(depth: u31) {$/;"	m
visit_BR	$VIRGIL_WIZARD/src/monitors/ModuleInstrumenter.v3	/^	def visit_BR(depth: u31) {$/;"	m
visit_BR	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_BR		(depth: u31) 					{ visitControl(Opcode.BR); }$/;"	m
visit_BR	$VIRGIL_WIZARD/src/util/CfgPrinter.v3	/^	def visit_BR(depth: u31) {$/;"	m
visit_BR	$VIRGIL_WIZARD/src/util/ControlStack.v3	/^	def visit_BR(depth: u31) {$/;"	m
visit_BR_IF	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_BR_IF(depth: u31) {$/;"	m
visit_BR_IF	$VIRGIL_WIZARD/src/monitors/ControlInstrumenter.v3	/^	def visit_BR_IF(depth: u31) {$/;"	m
visit_BR_IF	$VIRGIL_WIZARD/src/monitors/LoopTraceMonitor.v3	/^	def visit_BR_IF(depth: u31) {$/;"	m
visit_BR_IF	$VIRGIL_WIZARD/src/monitors/ModuleInstrumenter.v3	/^	def visit_BR_IF(depth: u31) {$/;"	m
visit_BR_IF	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_BR_IF		(depth: u31) 					{ visitControl(Opcode.BR_IF); }$/;"	m
visit_BR_IF	$VIRGIL_WIZARD/src/util/CfgPrinter.v3	/^	def visit_BR_IF(depth: u31) {$/;"	m
visit_BR_IF	$VIRGIL_WIZARD/src/util/ControlStack.v3	/^	def visit_BR_IF(depth: u31) {$/;"	m
visit_BR_ON_CAST	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_BR_ON_CAST(imm: BrOnCastImm) {$/;"	m
visit_BR_ON_CAST	$VIRGIL_WIZARD/src/monitors/ControlInstrumenter.v3	/^	def visit_BR_ON_CAST(imm: BrOnCastImm) {$/;"	m
visit_BR_ON_CAST	$VIRGIL_WIZARD/src/monitors/LoopTraceMonitor.v3	/^	def visit_BR_ON_CAST(imm: BrOnCastImm) {$/;"	m
visit_BR_ON_CAST	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_BR_ON_CAST		(imm: BrOnCastImm)			{ visitControl(Opcode.BR_ON_CAST); }$/;"	m
visit_BR_ON_CAST	$VIRGIL_WIZARD/src/util/CfgPrinter.v3	/^	def visit_BR_ON_CAST(imm: BrOnCastImm) {$/;"	m
visit_BR_ON_CAST	$VIRGIL_WIZARD/src/util/ControlStack.v3	/^	def visit_BR_ON_CAST(imm: BrOnCastImm) {$/;"	m
visit_BR_ON_CAST_FAIL	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_BR_ON_CAST_FAIL(imm: BrOnCastImm) {$/;"	m
visit_BR_ON_CAST_FAIL	$VIRGIL_WIZARD/src/monitors/ControlInstrumenter.v3	/^	def visit_BR_ON_CAST_FAIL(imm: BrOnCastImm) {$/;"	m
visit_BR_ON_CAST_FAIL	$VIRGIL_WIZARD/src/monitors/LoopTraceMonitor.v3	/^	def visit_BR_ON_CAST_FAIL(imm: BrOnCastImm) {$/;"	m
visit_BR_ON_CAST_FAIL	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_BR_ON_CAST_FAIL	(imm: BrOnCastImm)			{ visitControl(Opcode.BR_ON_CAST_FAIL); }$/;"	m
visit_BR_ON_CAST_FAIL	$VIRGIL_WIZARD/src/util/CfgPrinter.v3	/^	def visit_BR_ON_CAST_FAIL(imm: BrOnCastImm) {$/;"	m
visit_BR_ON_CAST_FAIL	$VIRGIL_WIZARD/src/util/ControlStack.v3	/^	def visit_BR_ON_CAST_FAIL(imm: BrOnCastImm) {$/;"	m
visit_BR_ON_NON_NULL	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_BR_ON_NON_NULL(depth: u31) {$/;"	m
visit_BR_ON_NON_NULL	$VIRGIL_WIZARD/src/monitors/ControlInstrumenter.v3	/^	def visit_BR_ON_NON_NULL(depth: u31) {$/;"	m
visit_BR_ON_NON_NULL	$VIRGIL_WIZARD/src/monitors/LoopTraceMonitor.v3	/^	def visit_BR_ON_NON_NULL(depth: u31) {$/;"	m
visit_BR_ON_NON_NULL	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_BR_ON_NON_NULL	(label: u31) 		{ visitControl(Opcode.BR_ON_NON_NULL); }$/;"	m
visit_BR_ON_NON_NULL	$VIRGIL_WIZARD/src/util/CfgPrinter.v3	/^	def visit_BR_ON_NON_NULL(label: u31) {$/;"	m
visit_BR_ON_NON_NULL	$VIRGIL_WIZARD/src/util/ControlStack.v3	/^	def visit_BR_ON_NON_NULL(label: u31) {$/;"	m
visit_BR_ON_NULL	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_BR_ON_NULL(depth: u31) {$/;"	m
visit_BR_ON_NULL	$VIRGIL_WIZARD/src/monitors/ControlInstrumenter.v3	/^	def visit_BR_ON_NULL(depth: u31) {$/;"	m
visit_BR_ON_NULL	$VIRGIL_WIZARD/src/monitors/LoopTraceMonitor.v3	/^	def visit_BR_ON_NULL(depth: u31) {$/;"	m
visit_BR_ON_NULL	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_BR_ON_NULL		(label: u31) 		{ visitControl(Opcode.BR_ON_NULL); }$/;"	m
visit_BR_ON_NULL	$VIRGIL_WIZARD/src/util/CfgPrinter.v3	/^	def visit_BR_ON_NULL(label: u31) {$/;"	m
visit_BR_ON_NULL	$VIRGIL_WIZARD/src/util/ControlStack.v3	/^	def visit_BR_ON_NULL(label: u31) {$/;"	m
visit_BR_TABLE	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_BR_TABLE(depths: Range<u31>) {$/;"	m
visit_BR_TABLE	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^	def visit_BR_TABLE(labels: Range<u31>) {$/;"	m
visit_BR_TABLE	$VIRGIL_WIZARD/src/monitors/ControlInstrumenter.v3	/^	def visit_BR_TABLE(labels: Range<u31>) {$/;"	m
visit_BR_TABLE	$VIRGIL_WIZARD/src/monitors/LoopTraceMonitor.v3	/^	def visit_BR_TABLE(labels: Range<u31>) {$/;"	m
visit_BR_TABLE	$VIRGIL_WIZARD/src/monitors/ModuleInstrumenter.v3	/^	def visit_BR_TABLE(labels: Range<u31>) {$/;"	m
visit_BR_TABLE	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_BR_TABLE	(labels: Range<u31>)			 	{ visitControl(Opcode.BR_TABLE); }$/;"	m
visit_BR_TABLE	$VIRGIL_WIZARD/src/util/CfgPrinter.v3	/^	def visit_BR_TABLE(labels: Range<u31>) {$/;"	m
visit_BR_TABLE	$VIRGIL_WIZARD/src/util/ControlStack.v3	/^	def visit_BR_TABLE(labels: Range<u31>) {$/;"	m
visit_CALL	$VIRGIL_WIZARD/src/monitors/CallsMonitor.v3	/^	def visit_CALL(func_index: u31)					 { insert(CallProbe.new(false, func_index)); }$/;"	m
visit_CALL	$VIRGIL_WIZARD/src/monitors/ModuleInstrumenter.v3	/^	def visit_CALL(func_index: u31) {$/;"	m
visit_CALL	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^	def visit_CALL(func_index: u31)	{$/;"	m
visit_CALL	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_CALL		(func_index: u31) 				{ visitCallDirect(Opcode.CALL, func_index, false); }$/;"	m
visit_CALL_INDIRECT	$VIRGIL_WIZARD/src/monitors/CallsMonitor.v3	/^	def visit_CALL_INDIRECT(sig_index: u31, table_index: u31)	 { insert(CallIndirectProbe.new(false, table_index)); }$/;"	m
visit_CALL_INDIRECT	$VIRGIL_WIZARD/src/monitors/ModuleInstrumenter.v3	/^	def visit_CALL_INDIRECT(sig_index: u31, table_index: u31) {$/;"	m
visit_CALL_INDIRECT	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^	def visit_CALL_INDIRECT(sig_index: u31, table_index: u31) {$/;"	m
visit_CALL_INDIRECT	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_CALL_INDIRECT	(sig_index: u31, table_index: u31) 		{ visitCallIndirect(Opcode.CALL_INDIRECT, sig_index, table_index, false); }$/;"	m
visit_CALL_REF	$VIRGIL_WIZARD/src/monitors/CallsMonitor.v3	/^	def visit_CALL_REF(sig_index: u31)				 { insert(CallRefProbe.new(false)); }$/;"	m
visit_CALL_REF	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_CALL_REF	(sig_index: u31) 				{ visitCallRef(Opcode.CALL_REF, sig_index, false); }$/;"	m
visit_CATCH	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_CATCH(tag_code: u31) {$/;"	m
visit_CATCH	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_CATCH		(tag_code: u31) 				{ visitControl(Opcode.CATCH); }$/;"	m
visit_CATCH	$VIRGIL_WIZARD/src/util/ControlStack.v3	/^	def visit_CATCH(tag_code: u31) {$/;"	m
visit_CATCH_ALL	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_CATCH_ALL() {$/;"	m
visit_CATCH_ALL	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_CATCH_ALL	() 						{ visitControl(Opcode.CATCH_ALL); }$/;"	m
visit_CATCH_ALL	$VIRGIL_WIZARD/src/util/ControlStack.v3	/^	def visit_CATCH_ALL() {$/;"	m
visit_CONT_BIND	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_CONT_BIND(in_cont_id: u31, out_cont_id: u31) {$/;"	m
visit_CONT_BIND	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_CONT_BIND					(ct1: u31, ct2: u31) { visitOp(Opcode.CONT_BIND); }$/;"	m
visit_CONT_NEW	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_CONT_NEW(cont_index: u31) {$/;"	m
visit_CONT_NEW	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_CONT_NEW					(cont: u31) 	{ visitOp(Opcode.CONT_NEW); }$/;"	m
visit_CRASH_COMPILER	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_CRASH_COMPILER() {$/;"	m
visit_CRASH_COMPILER	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_CRASH_COMPILER()			{ }$/;"	m
visit_CRASH_EXEC	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_CRASH_EXEC() {$/;"	m
visit_CRASH_EXEC	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_CRASH_EXEC()				{ }$/;"	m
visit_DATA_DROP	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_DATA_DROP(dindex: u31) {$/;"	m
visit_DATA_DROP	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_DATA_DROP		(data_index: u31) 		{ visitMisc(Opcode.DATA_DROP); }$/;"	m
visit_DELEGATE	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_DELEGATE	(depth: u31) 					{ visitControl(Opcode.DELEGATE); }$/;"	m
visit_DROP	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_DROP() {$/;"	m
visit_DROP	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_DROP		() 						{ visitMisc(Opcode.DROP); }$/;"	m
visit_ELEM_DROP	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_ELEM_DROP(dindex: u31) {$/;"	m
visit_ELEM_DROP	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_ELEM_DROP		(elem_index: u31) 		{ visitMisc(Opcode.ELEM_DROP); }$/;"	m
visit_ELSE	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_ELSE() {$/;"	m
visit_ELSE	$VIRGIL_WIZARD/src/monitors/ModuleInstrumenter.v3	/^	def visit_ELSE() {$/;"	m
visit_ELSE	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_ELSE		() 						{ visitControl(Opcode.ELSE); }$/;"	m
visit_ELSE	$VIRGIL_WIZARD/src/util/CfgPrinter.v3	/^	def visit_ELSE() {$/;"	m
visit_ELSE	$VIRGIL_WIZARD/src/util/ControlStack.v3	/^	def visit_ELSE() {$/;"	m
visit_END	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_END() {$/;"	m
visit_END	$VIRGIL_WIZARD/src/monitors/ControlInstrumenter.v3	/^	def visit_END() {$/;"	m
visit_END	$VIRGIL_WIZARD/src/monitors/ModuleInstrumenter.v3	/^	def visit_END() {$/;"	m
visit_END	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^	def visit_END() {$/;"	m
visit_END	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_END		() 						{ visitControl(Opcode.END); }$/;"	m
visit_END	$VIRGIL_WIZARD/src/util/ControlStack.v3	/^	def visit_END() {$/;"	m
visit_EXTERN_CONVERT_ANY	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_EXTERN_CONVERT_ANY() { } \/\/ nop$/;"	m
visit_EXTERN_CONVERT_ANY	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_EXTERN_CONVERT_ANY	() 					{ visitGc(Opcode.EXTERN_CONVERT_ANY); }$/;"	m
visit_F32X4_ABS	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F32X4_ABS() { do_op1_x_gtmp_xtmp(ValueKind.V128, mmasm.emit_v128_absps); }$/;"	m
visit_F32X4_ABS	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F32X4_ABS			() { visitSimd(Opcode.F32X4_ABS); }$/;"	m
visit_F32X4_ADD	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F32X4_ADD() { do_op2_x_x(ValueKind.V128, asm.addps_s_s); }$/;"	m
visit_F32X4_ADD	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F32X4_ADD			() { visitSimd(Opcode.F32X4_ADD); }$/;"	m
visit_F32X4_CEIL	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F32X4_CEIL() { do_op1_x_x(ValueKind.V128, asm.roundps_s_s(_, _, X86_64Rounding.TO_POS_INF)); }$/;"	m
visit_F32X4_CEIL	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F32X4_CEIL			() { visitSimd(Opcode.F32X4_CEIL); }$/;"	m
visit_F32X4_CONVERT_I32X4_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F32X4_CONVERT_I32X4_S() { do_op1_x_x(ValueKind.V128, asm.cvtdq2ps_s_s); }$/;"	m
visit_F32X4_CONVERT_I32X4_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F32X4_CONVERT_I32X4_S		() { visitSimd(Opcode.F32X4_CONVERT_I32X4_S); }$/;"	m
visit_F32X4_CONVERT_I32X4_U	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F32X4_CONVERT_I32X4_U() { do_op1_x_xtmp(ValueKind.V128, mmasm.emit_f32x4_convert_i32x4_u); }$/;"	m
visit_F32X4_CONVERT_I32X4_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F32X4_CONVERT_I32X4_U		() { visitSimd(Opcode.F32X4_CONVERT_I32X4_U); }$/;"	m
visit_F32X4_DEMOTE_F64X2_ZERO	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F32X4_DEMOTE_F64X2_ZERO() { do_op1_x_x(ValueKind.V128, asm.cvtpd2ps_s_s); }$/;"	m
visit_F32X4_DEMOTE_F64X2_ZERO	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F32X4_DEMOTE_F64X2_ZERO	() { visitSimd(Opcode.F32X4_DEMOTE_F64X2_ZERO); }$/;"	m
visit_F32X4_DIV	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F32X4_DIV() { do_op2_x_x(ValueKind.V128, asm.divps_s_s); }$/;"	m
visit_F32X4_DIV	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F32X4_DIV			() { visitSimd(Opcode.F32X4_DIV); }$/;"	m
visit_F32X4_EQ	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F32X4_EQ() { do_op2_x_x(ValueKind.V128, asm.cmpeqps_s_s); }$/;"	m
visit_F32X4_EQ	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F32X4_EQ			() { visitSimd(Opcode.F32X4_EQ); }$/;"	m
visit_F32X4_EXTRACT_LANE	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F32X4_EXTRACT_LANE(lane: byte) {$/;"	m
visit_F32X4_EXTRACT_LANE	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F32X4_EXTRACT_LANE		(lane_index: u8) { visitSimd(Opcode.F32X4_EXTRACT_LANE); }$/;"	m
visit_F32X4_FLOOR	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F32X4_FLOOR() { do_op1_x_x(ValueKind.V128, asm.roundps_s_s(_, _, X86_64Rounding.TO_NEG_INF)); }$/;"	m
visit_F32X4_FLOOR	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F32X4_FLOOR			() { visitSimd(Opcode.F32X4_FLOOR); }$/;"	m
visit_F32X4_GE	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F32X4_GE() { do_c_op2_x_x(ValueKind.V128, asm.cmpleps_s_s); }$/;"	m
visit_F32X4_GE	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F32X4_GE			() { visitSimd(Opcode.F32X4_GE); }$/;"	m
visit_F32X4_GT	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F32X4_GT() { do_c_op2_x_x(ValueKind.V128, asm.cmpltps_s_s); }$/;"	m
visit_F32X4_GT	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F32X4_GT			() { visitSimd(Opcode.F32X4_GT); }$/;"	m
visit_F32X4_LE	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F32X4_LE() { do_op2_x_x(ValueKind.V128, asm.cmpleps_s_s); }$/;"	m
visit_F32X4_LE	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F32X4_LE			() { visitSimd(Opcode.F32X4_LE); }$/;"	m
visit_F32X4_LT	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F32X4_LT() { do_op2_x_x(ValueKind.V128, asm.cmpltps_s_s); }$/;"	m
visit_F32X4_LT	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F32X4_LT			() { visitSimd(Opcode.F32X4_LT); }$/;"	m
visit_F32X4_MAX	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F32X4_MAX() { do_op2_x_x_xtmp(ValueKind.V128, mmasm.emit_f32x4_max); }$/;"	m
visit_F32X4_MAX	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F32X4_MAX			() { visitSimd(Opcode.F32X4_MAX); }$/;"	m
visit_F32X4_MIN	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F32X4_MIN() { do_op2_x_x_xtmp(ValueKind.V128, mmasm.emit_f32x4_min); }$/;"	m
visit_F32X4_MIN	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F32X4_MIN			() { visitSimd(Opcode.F32X4_MIN); }$/;"	m
visit_F32X4_MUL	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F32X4_MUL() { do_op2_x_x(ValueKind.V128, asm.mulps_s_s); }$/;"	m
visit_F32X4_MUL	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F32X4_MUL			() { visitSimd(Opcode.F32X4_MUL); }$/;"	m
visit_F32X4_NE	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F32X4_NE() { do_op2_x_x(ValueKind.V128, asm.cmpneqps_s_s); }$/;"	m
visit_F32X4_NE	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F32X4_NE			() { visitSimd(Opcode.F32X4_NE); }$/;"	m
visit_F32X4_NEAREST	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F32X4_NEAREST() { do_op1_x_x(ValueKind.V128, asm.roundps_s_s(_, _, X86_64Rounding.TO_NEAREST)); }$/;"	m
visit_F32X4_NEAREST	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F32X4_NEAREST			() { visitSimd(Opcode.F32X4_NEAREST); }$/;"	m
visit_F32X4_NEG	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F32X4_NEG() { do_op1_x_gtmp_xtmp(ValueKind.V128, mmasm.emit_v128_negps); }$/;"	m
visit_F32X4_NEG	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F32X4_NEG			() { visitSimd(Opcode.F32X4_NEG); }$/;"	m
visit_F32X4_PMAX	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F32X4_PMAX() { do_c_op2_x_x(ValueKind.V128, asm.maxps_s_s); }$/;"	m
visit_F32X4_PMAX	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F32X4_PMAX			() { visitSimd(Opcode.F32X4_PMAX); }$/;"	m
visit_F32X4_PMIN	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F32X4_PMIN() { do_c_op2_x_x(ValueKind.V128, asm.minps_s_s); }$/;"	m
visit_F32X4_PMIN	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F32X4_PMIN			() { visitSimd(Opcode.F32X4_PMIN); }$/;"	m
visit_F32X4_RELAXED_MADD	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F32X4_RELAXED_MADD()	{ doMultiplyAdd(false, false); }$/;"	m
visit_F32X4_RELAXED_MADD	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F32X4_RELAXED_MADD			() { visitRelaxedSimd(Opcode.F32X4_RELAXED_MADD); }$/;"	m
visit_F32X4_RELAXED_MAX	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F32X4_RELAXED_MAX() { do_op2_x_x_xtmp(ValueKind.V128, mmasm.emit_f32x4_max); }$/;"	m
visit_F32X4_RELAXED_MAX	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F32X4_RELAXED_MAX			() { visitRelaxedSimd(Opcode.F32X4_RELAXED_MAX); }$/;"	m
visit_F32X4_RELAXED_MIN	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F32X4_RELAXED_MIN() { do_op2_x_x_xtmp(ValueKind.V128, mmasm.emit_f32x4_min); }$/;"	m
visit_F32X4_RELAXED_MIN	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F32X4_RELAXED_MIN			() { visitRelaxedSimd(Opcode.F32X4_RELAXED_MIN); }$/;"	m
visit_F32X4_RELAXED_NMADD	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F32X4_RELAXED_NMADD()	{ doMultiplyAdd(false, true); }$/;"	m
visit_F32X4_RELAXED_NMADD	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F32X4_RELAXED_NMADD			() { visitRelaxedSimd(Opcode.F32X4_RELAXED_NMADD); }$/;"	m
visit_F32X4_REPLACE_LANE	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F32X4_REPLACE_LANE(lane: byte) {$/;"	m
visit_F32X4_REPLACE_LANE	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F32X4_REPLACE_LANE		(lane_index: u8) { visitSimd(Opcode.F32X4_REPLACE_LANE); }$/;"	m
visit_F32X4_SPLAT	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F32X4_SPLAT() { visit_V128_SPLAT_F(asm.pshufd_s_s_i(_, _, 0)); }$/;"	m
visit_F32X4_SPLAT	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F32X4_SPLAT			() { visitSimd(Opcode.F32X4_SPLAT); }$/;"	m
visit_F32X4_SQRT	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F32X4_SQRT() { do_op1_x_x(ValueKind.V128, asm.sqrtps_s_s); }$/;"	m
visit_F32X4_SQRT	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F32X4_SQRT			() { visitSimd(Opcode.F32X4_SQRT); }$/;"	m
visit_F32X4_SUB	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F32X4_SUB() { do_op2_x_x(ValueKind.V128, asm.subps_s_s); }$/;"	m
visit_F32X4_SUB	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F32X4_SUB			() { visitSimd(Opcode.F32X4_SUB); }$/;"	m
visit_F32X4_TRUNC	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F32X4_TRUNC() { do_op1_x_x(ValueKind.V128, asm.roundps_s_s(_, _, X86_64Rounding.TO_ZERO)); }$/;"	m
visit_F32X4_TRUNC	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F32X4_TRUNC			() { visitSimd(Opcode.F32X4_TRUNC); }$/;"	m
visit_F32_ABS	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F32_ABS() {$/;"	m
visit_F32_ABS	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F32_ABS		() { visitUnop(Opcode.F32_ABS); }$/;"	m
visit_F32_ADD	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F32_ADD() { do_op2_x_x(ValueKind.F32, asm.addss_s_s); }$/;"	m
visit_F32_ADD	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F32_ADD		() { visitBinop(Opcode.F32_ADD); }$/;"	m
visit_F32_CEIL	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F32_CEIL() { do_op1_x_x(ValueKind.F32, asm.roundss_s_s(_, _, X86_64Rounding.TO_POS_INF)); }$/;"	m
visit_F32_CEIL	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F32_CEIL		() { visitUnop(Opcode.F32_CEIL); }$/;"	m
visit_F32_CONST	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_F32_CONST(val: u32) {$/;"	m
visit_F32_CONST	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F32_CONST		(bits: u32) { visitConst(Opcode.F32_CONST); }$/;"	m
visit_F32_CONVERT_I32_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F32_CONVERT_I32_S() { visitFConvertI32S(ValueKind.F32, asm.cvtsi2ss_s_r); }$/;"	m
visit_F32_CONVERT_I32_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F32_CONVERT_I32_S	() { visitConvert(Opcode.F32_CONVERT_I32_S); }$/;"	m
visit_F32_CONVERT_I32_U	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F32_CONVERT_I32_U() { visitFConvertI32U(ValueKind.F32, asm.cvtsi2ss_s_r); }$/;"	m
visit_F32_CONVERT_I32_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F32_CONVERT_I32_U	() { visitConvert(Opcode.F32_CONVERT_I32_U); }$/;"	m
visit_F32_CONVERT_I64_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F32_CONVERT_I64_S() { visitFConvertI64S(ValueKind.F32, asm.cvtsi2ss_s_r); }$/;"	m
visit_F32_CONVERT_I64_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F32_CONVERT_I64_S	() { visitConvert(Opcode.F32_CONVERT_I64_S); }$/;"	m
visit_F32_CONVERT_I64_U	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F32_CONVERT_I64_U() { visitFConvertI64U(ValueKind.F32, mmasm.emit_f32_convert_i64_u); }$/;"	m
visit_F32_CONVERT_I64_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F32_CONVERT_I64_U	() { visitConvert(Opcode.F32_CONVERT_I64_U); }$/;"	m
visit_F32_COPYSIGN	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F32_COPYSIGN() {$/;"	m
visit_F32_COPYSIGN	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F32_COPYSIGN		() { visitBinop(Opcode.F32_COPYSIGN); }$/;"	m
visit_F32_DEMOTE_F64	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F32_DEMOTE_F64() { do_op1_x_x(ValueKind.F32, asm.cvtsd2ss_s_s); } \/\/ XXX: try s_m addr mode$/;"	m
visit_F32_DEMOTE_F64	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F32_DEMOTE_F64	() { visitConvert(Opcode.F32_DEMOTE_F64); }$/;"	m
visit_F32_DIV	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F32_DIV() { do_op2_x_x(ValueKind.F32, asm.divss_s_s); }$/;"	m
visit_F32_DIV	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F32_DIV		() { visitBinop(Opcode.F32_DIV); }$/;"	m
visit_F32_EQ	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F32_EQ() { visitFloatCmp(asm.ucomiss_s_s, false, C.NZ); }$/;"	m
visit_F32_EQ	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F32_EQ		() { visitCompare(Opcode.F32_EQ); }$/;"	m
visit_F32_FLOOR	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F32_FLOOR() { do_op1_x_x(ValueKind.F32, asm.roundss_s_s(_, _, X86_64Rounding.TO_NEG_INF)); }$/;"	m
visit_F32_FLOOR	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F32_FLOOR		() { visitUnop(Opcode.F32_FLOOR); }$/;"	m
visit_F32_GE	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F32_GE() { visitFloatCmp(asm.ucomiss_s_s, false, C.C); }$/;"	m
visit_F32_GE	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F32_GE		() { visitCompare(Opcode.F32_GE); }$/;"	m
visit_F32_GT	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F32_GT() { visitFloatCmp(asm.ucomiss_s_s, false, C.NA); }$/;"	m
visit_F32_GT	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F32_GT		() { visitCompare(Opcode.F32_GT); }$/;"	m
visit_F32_LE	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F32_LE() { visitFloatCmp(asm.ucomiss_s_s, false, C.A); }$/;"	m
visit_F32_LE	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F32_LE		() { visitCompare(Opcode.F32_LE); }$/;"	m
visit_F32_LOAD	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_F32_LOAD(imm: MemArg) { emitLoad(ValueKind.F32, imm, masm.emit_load_r_r_r_i); }$/;"	m
visit_F32_LOAD	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F32_LOAD		(imm: MemArg) { visitLoad(Opcode.F32_LOAD, imm, 4); }$/;"	m
visit_F32_LT	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F32_LT() { visitFloatCmp(asm.ucomiss_s_s, false, C.NC); }$/;"	m
visit_F32_LT	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F32_LT		() { visitCompare(Opcode.F32_LT); }$/;"	m
visit_F32_MAX	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F32_MAX() { visitFloatMinOrMax(false, false); }$/;"	m
visit_F32_MAX	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F32_MAX		() { visitBinop(Opcode.F32_MAX); }$/;"	m
visit_F32_MIN	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F32_MIN() { visitFloatMinOrMax(false, true); }$/;"	m
visit_F32_MIN	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F32_MIN		() { visitBinop(Opcode.F32_MIN); }$/;"	m
visit_F32_MUL	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F32_MUL() { do_op2_x_x(ValueKind.F32, asm.mulss_s_s); }$/;"	m
visit_F32_MUL	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F32_MUL		() { visitBinop(Opcode.F32_MUL); }$/;"	m
visit_F32_NE	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F32_NE() { visitFloatCmp(asm.ucomiss_s_s, true, C.Z); }$/;"	m
visit_F32_NE	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F32_NE		() { visitCompare(Opcode.F32_NE); }$/;"	m
visit_F32_NEAREST	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F32_NEAREST() { do_op1_x_x(ValueKind.F32, asm.roundss_s_s(_, _, X86_64Rounding.TO_NEAREST)); }$/;"	m
visit_F32_NEAREST	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F32_NEAREST		() { visitUnop(Opcode.F32_NEAREST); }$/;"	m
visit_F32_NEG	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F32_NEG() {$/;"	m
visit_F32_NEG	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F32_NEG		() { visitUnop(Opcode.F32_NEG); }$/;"	m
visit_F32_REINTERPRET_I32	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F32_REINTERPRET_I32() { visitReinterpret(ValueKind.F32); }$/;"	m
visit_F32_REINTERPRET_I32	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F32_REINTERPRET_I32	() { visitConvert(Opcode.F32_REINTERPRET_I32); }$/;"	m
visit_F32_SQRT	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F32_SQRT() { do_op1_x_x(ValueKind.F32, asm.sqrtss_s_s); }$/;"	m
visit_F32_SQRT	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F32_SQRT		() { visitUnop(Opcode.F32_SQRT); }$/;"	m
visit_F32_STORE	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_F32_STORE(imm: MemArg) { emitStore(ValueKind.F32, imm, masm.emit_store_r_r_r_i); }$/;"	m
visit_F32_STORE	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F32_STORE		(imm: MemArg) { visitStore(Opcode.F32_STORE, imm, 4); }$/;"	m
visit_F32_SUB	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F32_SUB() { do_op2_x_x(ValueKind.F32, asm.subss_s_s); }$/;"	m
visit_F32_SUB	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F32_SUB		() { visitBinop(Opcode.F32_SUB); }$/;"	m
visit_F32_TRUNC	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F32_TRUNC() { do_op1_x_x(ValueKind.F32, asm.roundss_s_s(_, _, X86_64Rounding.TO_ZERO)); }$/;"	m
visit_F32_TRUNC	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F32_TRUNC		() { visitUnop(Opcode.F32_TRUNC); }$/;"	m
visit_F64X2_ABS	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F64X2_ABS() { do_op1_x_gtmp_xtmp(ValueKind.V128, mmasm.emit_v128_abspd); }$/;"	m
visit_F64X2_ABS	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F64X2_ABS			() { visitSimd(Opcode.F64X2_ABS); }$/;"	m
visit_F64X2_ADD	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F64X2_ADD() { do_op2_x_x(ValueKind.V128, asm.addpd_s_s); }$/;"	m
visit_F64X2_ADD	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F64X2_ADD			() { visitSimd(Opcode.F64X2_ADD); }$/;"	m
visit_F64X2_CEIL	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F64X2_CEIL() { do_op1_x_x(ValueKind.V128, asm.roundpd_s_s(_, _, X86_64Rounding.TO_POS_INF)); }$/;"	m
visit_F64X2_CEIL	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F64X2_CEIL			() { visitSimd(Opcode.F64X2_CEIL); }$/;"	m
visit_F64X2_CONVERT_LOW_I32X4_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F64X2_CONVERT_LOW_I32X4_S() { do_op1_x_x(ValueKind.V128, asm.cvtdq2pd_s_s); }$/;"	m
visit_F64X2_CONVERT_LOW_I32X4_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F64X2_CONVERT_LOW_I32X4_S	() { visitSimd(Opcode.F64X2_CONVERT_LOW_I32X4_S); }$/;"	m
visit_F64X2_CONVERT_LOW_I32X4_U	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F64X2_CONVERT_LOW_I32X4_U() { do_op1_x_gtmp_xtmp(ValueKind.V128, mmasm.emit_f64x2_convert_low_i32x4_u); }$/;"	m
visit_F64X2_CONVERT_LOW_I32X4_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F64X2_CONVERT_LOW_I32X4_U	() { visitSimd(Opcode.F64X2_CONVERT_LOW_I32X4_U); }$/;"	m
visit_F64X2_DIV	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F64X2_DIV() { do_op2_x_x(ValueKind.V128, asm.divpd_s_s); }$/;"	m
visit_F64X2_DIV	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F64X2_DIV			() { visitSimd(Opcode.F64X2_DIV); }$/;"	m
visit_F64X2_EQ	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F64X2_EQ() { do_op2_x_x(ValueKind.V128, asm.cmpeqpd_s_s); }$/;"	m
visit_F64X2_EQ	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F64X2_EQ			() { visitSimd(Opcode.F64X2_EQ); }$/;"	m
visit_F64X2_EXTRACT_LANE	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F64X2_EXTRACT_LANE(lane: byte) {$/;"	m
visit_F64X2_EXTRACT_LANE	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F64X2_EXTRACT_LANE		(lane_index: u8) { visitSimd(Opcode.F64X2_EXTRACT_LANE); }$/;"	m
visit_F64X2_FLOOR	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F64X2_FLOOR() { do_op1_x_x(ValueKind.V128, asm.roundpd_s_s(_, _, X86_64Rounding.TO_NEG_INF)); }$/;"	m
visit_F64X2_FLOOR	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F64X2_FLOOR			() { visitSimd(Opcode.F64X2_FLOOR); }$/;"	m
visit_F64X2_GE	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F64X2_GE() { do_c_op2_x_x(ValueKind.V128, asm.cmplepd_s_s); }$/;"	m
visit_F64X2_GE	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F64X2_GE			() { visitSimd(Opcode.F64X2_GE); }$/;"	m
visit_F64X2_GT	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F64X2_GT() { do_c_op2_x_x(ValueKind.V128, asm.cmpltpd_s_s); }$/;"	m
visit_F64X2_GT	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F64X2_GT			() { visitSimd(Opcode.F64X2_GT); }$/;"	m
visit_F64X2_LE	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F64X2_LE() { do_op2_x_x(ValueKind.V128, asm.cmplepd_s_s); }$/;"	m
visit_F64X2_LE	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F64X2_LE			() { visitSimd(Opcode.F64X2_LE); }$/;"	m
visit_F64X2_LT	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F64X2_LT() { do_op2_x_x(ValueKind.V128, asm.cmpltpd_s_s); }$/;"	m
visit_F64X2_LT	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F64X2_LT			() { visitSimd(Opcode.F64X2_LT); }$/;"	m
visit_F64X2_MAX	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F64X2_MAX() { do_op2_x_x_xtmp(ValueKind.V128, mmasm.emit_f64x2_max); }$/;"	m
visit_F64X2_MAX	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F64X2_MAX			() { visitSimd(Opcode.F64X2_MAX); }$/;"	m
visit_F64X2_MIN	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F64X2_MIN() { do_op2_x_x_xtmp(ValueKind.V128, mmasm.emit_f64x2_min); }$/;"	m
visit_F64X2_MIN	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F64X2_MIN			() { visitSimd(Opcode.F64X2_MIN); }$/;"	m
visit_F64X2_MUL	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F64X2_MUL() { do_op2_x_x(ValueKind.V128, asm.mulpd_s_s); }$/;"	m
visit_F64X2_MUL	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F64X2_MUL			() { visitSimd(Opcode.F64X2_MUL); }$/;"	m
visit_F64X2_NE	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F64X2_NE() { do_op2_x_x(ValueKind.V128, asm.cmpneqpd_s_s); }$/;"	m
visit_F64X2_NE	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F64X2_NE			() { visitSimd(Opcode.F64X2_NE); }$/;"	m
visit_F64X2_NEAREST	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F64X2_NEAREST() { do_op1_x_x(ValueKind.V128, asm.roundpd_s_s(_, _, X86_64Rounding.TO_NEAREST)); }$/;"	m
visit_F64X2_NEAREST	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F64X2_NEAREST			() { visitSimd(Opcode.F64X2_NEAREST); }$/;"	m
visit_F64X2_NEG	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F64X2_NEG() { do_op1_x_gtmp_xtmp(ValueKind.V128, mmasm.emit_v128_negpd); }$/;"	m
visit_F64X2_NEG	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F64X2_NEG			() { visitSimd(Opcode.F64X2_NEG); }$/;"	m
visit_F64X2_PMAX	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F64X2_PMAX() { do_c_op2_x_x(ValueKind.V128, asm.maxpd_s_s); }$/;"	m
visit_F64X2_PMAX	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F64X2_PMAX			() { visitSimd(Opcode.F64X2_PMAX); }$/;"	m
visit_F64X2_PMIN	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F64X2_PMIN() { do_c_op2_x_x(ValueKind.V128, asm.minpd_s_s); }$/;"	m
visit_F64X2_PMIN	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F64X2_PMIN			() { visitSimd(Opcode.F64X2_PMIN); }$/;"	m
visit_F64X2_PROMOTE_LOW_F32X4	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F64X2_PROMOTE_LOW_F32X4() { do_op1_x_x(ValueKind.V128, asm.cvtps2pd_s_s); }$/;"	m
visit_F64X2_PROMOTE_LOW_F32X4	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F64X2_PROMOTE_LOW_F32X4	() { visitSimd(Opcode.F64X2_PROMOTE_LOW_F32X4); }$/;"	m
visit_F64X2_RELAXED_MADD	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F64X2_RELAXED_MADD()	{ doMultiplyAdd(true, false); }$/;"	m
visit_F64X2_RELAXED_MADD	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F64X2_RELAXED_MADD			() { visitRelaxedSimd(Opcode.F64X2_RELAXED_MADD); }$/;"	m
visit_F64X2_RELAXED_MAX	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F64X2_RELAXED_MAX() { do_op2_x_x_xtmp(ValueKind.V128, mmasm.emit_f64x2_max); }$/;"	m
visit_F64X2_RELAXED_MAX	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F64X2_RELAXED_MAX			() { visitRelaxedSimd(Opcode.F64X2_RELAXED_MAX); }$/;"	m
visit_F64X2_RELAXED_MIN	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F64X2_RELAXED_MIN() { do_op2_x_x_xtmp(ValueKind.V128, mmasm.emit_f64x2_min); }$/;"	m
visit_F64X2_RELAXED_MIN	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F64X2_RELAXED_MIN			() { visitRelaxedSimd(Opcode.F64X2_RELAXED_MIN); }$/;"	m
visit_F64X2_RELAXED_NMADD	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F64X2_RELAXED_NMADD()	{ doMultiplyAdd(true, true); }$/;"	m
visit_F64X2_RELAXED_NMADD	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F64X2_RELAXED_NMADD			() { visitRelaxedSimd(Opcode.F64X2_RELAXED_NMADD); }$/;"	m
visit_F64X2_REPLACE_LANE	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F64X2_REPLACE_LANE(lane: byte) {$/;"	m
visit_F64X2_REPLACE_LANE	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F64X2_REPLACE_LANE		(lane_index: u8) { visitSimd(Opcode.F64X2_REPLACE_LANE); }$/;"	m
visit_F64X2_SPLAT	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F64X2_SPLAT() { visit_V128_SPLAT_F(asm.movddup_s_s); }$/;"	m
visit_F64X2_SPLAT	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F64X2_SPLAT			() { visitSimd(Opcode.F64X2_SPLAT); }$/;"	m
visit_F64X2_SQRT	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F64X2_SQRT() { do_op1_x_x(ValueKind.V128, asm.sqrtpd_s_s); }$/;"	m
visit_F64X2_SQRT	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F64X2_SQRT			() { visitSimd(Opcode.F64X2_SQRT); }$/;"	m
visit_F64X2_SUB	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F64X2_SUB() { do_op2_x_x(ValueKind.V128, asm.subpd_s_s); }$/;"	m
visit_F64X2_SUB	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F64X2_SUB			() { visitSimd(Opcode.F64X2_SUB); }$/;"	m
visit_F64X2_TRUNC	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F64X2_TRUNC() { do_op1_x_x(ValueKind.V128, asm.roundpd_s_s(_, _, X86_64Rounding.TO_ZERO)); }$/;"	m
visit_F64X2_TRUNC	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F64X2_TRUNC			() { visitSimd(Opcode.F64X2_TRUNC); }$/;"	m
visit_F64_ABS	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F64_ABS() {$/;"	m
visit_F64_ABS	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F64_ABS		() { visitUnop(Opcode.F64_ABS); }$/;"	m
visit_F64_ADD	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F64_ADD() { do_op2_x_x(ValueKind.F64, asm.addsd_s_s); }$/;"	m
visit_F64_ADD	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F64_ADD		() { visitBinop(Opcode.F64_ADD); }$/;"	m
visit_F64_CEIL	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F64_CEIL() { do_op1_x_x(ValueKind.F64, asm.roundsd_s_s(_, _, X86_64Rounding.TO_POS_INF)); }$/;"	m
visit_F64_CEIL	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F64_CEIL		() { visitUnop(Opcode.F64_CEIL); }$/;"	m
visit_F64_CONST	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_F64_CONST(val: u64) {$/;"	m
visit_F64_CONST	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F64_CONST		(bits: u64) { visitConst(Opcode.F64_CONST); }$/;"	m
visit_F64_CONVERT_I32_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F64_CONVERT_I32_S() { visitFConvertI32S(ValueKind.F64, asm.cvtsi2sd_s_r); }$/;"	m
visit_F64_CONVERT_I32_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F64_CONVERT_I32_S	() { visitConvert(Opcode.F64_CONVERT_I32_S); }$/;"	m
visit_F64_CONVERT_I32_U	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F64_CONVERT_I32_U() { visitFConvertI32U(ValueKind.F64, asm.cvtsi2sd_s_r); }$/;"	m
visit_F64_CONVERT_I32_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F64_CONVERT_I32_U	() { visitConvert(Opcode.F64_CONVERT_I32_U); }$/;"	m
visit_F64_CONVERT_I64_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F64_CONVERT_I64_S() { visitFConvertI64S(ValueKind.F64, asm.cvtsi2sd_s_r); }$/;"	m
visit_F64_CONVERT_I64_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F64_CONVERT_I64_S	() { visitConvert(Opcode.F64_CONVERT_I64_S); }$/;"	m
visit_F64_CONVERT_I64_U	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F64_CONVERT_I64_U() { visitFConvertI64U(ValueKind.F64, mmasm.emit_f64_convert_i64_u); }$/;"	m
visit_F64_CONVERT_I64_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F64_CONVERT_I64_U	() { visitConvert(Opcode.F64_CONVERT_I64_U); }$/;"	m
visit_F64_COPYSIGN	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F64_COPYSIGN() {$/;"	m
visit_F64_COPYSIGN	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F64_COPYSIGN		() { visitBinop(Opcode.F64_COPYSIGN); }$/;"	m
visit_F64_DIV	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F64_DIV() { do_op2_x_x(ValueKind.F64, asm.divsd_s_s); }$/;"	m
visit_F64_DIV	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F64_DIV		() { visitBinop(Opcode.F64_DIV); }$/;"	m
visit_F64_EQ	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F64_EQ() { visitFloatCmp(asm.ucomisd_s_s, false, C.NZ); }$/;"	m
visit_F64_EQ	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F64_EQ		() { visitCompare(Opcode.F64_EQ); }$/;"	m
visit_F64_FLOOR	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F64_FLOOR() { do_op1_x_x(ValueKind.F64, asm.roundsd_s_s(_, _, X86_64Rounding.TO_NEG_INF)); }$/;"	m
visit_F64_FLOOR	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F64_FLOOR		() { visitUnop(Opcode.F64_FLOOR); }$/;"	m
visit_F64_GE	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F64_GE() { visitFloatCmp(asm.ucomisd_s_s, false, C.C); }$/;"	m
visit_F64_GE	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F64_GE		() { visitCompare(Opcode.F64_GE); }$/;"	m
visit_F64_GT	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F64_GT() { visitFloatCmp(asm.ucomisd_s_s, false, C.NA); }$/;"	m
visit_F64_GT	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F64_GT		() { visitCompare(Opcode.F64_GT); }$/;"	m
visit_F64_LE	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F64_LE() { visitFloatCmp(asm.ucomisd_s_s, false, C.A); }$/;"	m
visit_F64_LE	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F64_LE		() { visitCompare(Opcode.F64_LE); }$/;"	m
visit_F64_LOAD	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_F64_LOAD(imm: MemArg) { emitLoad(ValueKind.F64, imm, masm.emit_load_r_r_r_i); }$/;"	m
visit_F64_LOAD	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F64_LOAD		(imm: MemArg) { visitLoad(Opcode.F64_LOAD, imm, 8); }$/;"	m
visit_F64_LT	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F64_LT() { visitFloatCmp(asm.ucomisd_s_s, false, C.NC); }$/;"	m
visit_F64_LT	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F64_LT		() { visitCompare(Opcode.F64_LT); }$/;"	m
visit_F64_MAX	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F64_MAX() { visitFloatMinOrMax(true, false); }$/;"	m
visit_F64_MAX	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F64_MAX		() { visitBinop(Opcode.F64_MAX); }$/;"	m
visit_F64_MIN	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F64_MIN() { visitFloatMinOrMax(true, true); }$/;"	m
visit_F64_MIN	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F64_MIN		() { visitBinop(Opcode.F64_MIN); }$/;"	m
visit_F64_MUL	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F64_MUL() { do_op2_x_x(ValueKind.F64, asm.mulsd_s_s); }$/;"	m
visit_F64_MUL	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F64_MUL		() { visitBinop(Opcode.F64_MUL); }$/;"	m
visit_F64_NE	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F64_NE() { visitFloatCmp(asm.ucomisd_s_s, true, C.Z); }$/;"	m
visit_F64_NE	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F64_NE		() { visitCompare(Opcode.F64_NE); }$/;"	m
visit_F64_NEAREST	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F64_NEAREST() { do_op1_x_x(ValueKind.F64, asm.roundsd_s_s(_, _, X86_64Rounding.TO_NEAREST)); }$/;"	m
visit_F64_NEAREST	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F64_NEAREST		() { visitUnop(Opcode.F64_NEAREST); }$/;"	m
visit_F64_NEG	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F64_NEG() {$/;"	m
visit_F64_NEG	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F64_NEG		() { visitUnop(Opcode.F64_NEG); }$/;"	m
visit_F64_PROMOTE_F32	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F64_PROMOTE_F32() { do_op1_x_x(ValueKind.F64, asm.cvtss2sd_s_s); } \/\/ XXX: try s_m addr mode$/;"	m
visit_F64_PROMOTE_F32	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F64_PROMOTE_F32	() { visitConvert(Opcode.F64_PROMOTE_F32); }$/;"	m
visit_F64_REINTERPRET_I64	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F64_REINTERPRET_I64() { visitReinterpret(ValueKind.F64); }$/;"	m
visit_F64_REINTERPRET_I64	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F64_REINTERPRET_I64	() { visitConvert(Opcode.F64_REINTERPRET_I64); }$/;"	m
visit_F64_SQRT	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F64_SQRT() { do_op1_x_x(ValueKind.F64, asm.sqrtsd_s_s); }$/;"	m
visit_F64_SQRT	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F64_SQRT		() { visitUnop(Opcode.F64_SQRT); }$/;"	m
visit_F64_STORE	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_F64_STORE(imm: MemArg) { emitStore(ValueKind.F64, imm, masm.emit_store_r_r_r_i); }$/;"	m
visit_F64_STORE	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F64_STORE		(imm: MemArg) { visitStore(Opcode.F64_STORE, imm, 8); }$/;"	m
visit_F64_SUB	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F64_SUB() { do_op2_x_x(ValueKind.F64, asm.subsd_s_s); }$/;"	m
visit_F64_SUB	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F64_SUB		() { visitBinop(Opcode.F64_SUB); }$/;"	m
visit_F64_TRUNC	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_F64_TRUNC() { do_op1_x_x(ValueKind.F64, asm.roundsd_s_s(_, _, X86_64Rounding.TO_ZERO)); }$/;"	m
visit_F64_TRUNC	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_F64_TRUNC		() { visitUnop(Opcode.F64_TRUNC); }$/;"	m
visit_GLOBAL_GET	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_GLOBAL_GET(index: u31) {$/;"	m
visit_GLOBAL_GET	$VIRGIL_WIZARD/src/monitors/ModuleInstrumenter.v3	/^	def visit_GLOBAL_GET(global_index: u31) {$/;"	m
visit_GLOBAL_GET	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^	def visit_GLOBAL_GET(global_index: u31) {$/;"	m
visit_GLOBAL_GET	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_GLOBAL_GET		(global_index: u31) { visitGlobal(Opcode.GLOBAL_GET, global_index); }$/;"	m
visit_GLOBAL_SET	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_GLOBAL_SET(index: u31) {$/;"	m
visit_GLOBAL_SET	$VIRGIL_WIZARD/src/monitors/ModuleInstrumenter.v3	/^	def visit_GLOBAL_SET(global_index: u31) {$/;"	m
visit_GLOBAL_SET	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^	def visit_GLOBAL_SET(global_index: u31) {$/;"	m
visit_GLOBAL_SET	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_GLOBAL_SET		(global_index: u31) { visitGlobal(Opcode.GLOBAL_SET, global_index); }$/;"	m
visit_I16X8_ABS	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I16X8_ABS() { do_op1_x_x(ValueKind.V128, asm.pabsw_s_s); }$/;"	m
visit_I16X8_ABS	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I16X8_ABS			() { visitSimd(Opcode.I16X8_ABS); }$/;"	m
visit_I16X8_ADD	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I16X8_ADD() { do_op2_x_x(ValueKind.V128, asm.paddw_s_s); }$/;"	m
visit_I16X8_ADD	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I16X8_ADD			() { visitSimd(Opcode.I16X8_ADD); }$/;"	m
visit_I16X8_ADD_SAT_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I16X8_ADD_SAT_S() { do_op2_x_x(ValueKind.V128, asm.paddsw_s_s); }$/;"	m
visit_I16X8_ADD_SAT_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I16X8_ADD_SAT_S		() { visitSimd(Opcode.I16X8_ADD_SAT_S); }$/;"	m
visit_I16X8_ADD_SAT_U	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I16X8_ADD_SAT_U() { do_op2_x_x(ValueKind.V128, asm.paddusw_s_s); }$/;"	m
visit_I16X8_ADD_SAT_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I16X8_ADD_SAT_U		() { visitSimd(Opcode.I16X8_ADD_SAT_U); }$/;"	m
visit_I16X8_ALLTRUE	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I16X8_ALLTRUE() { do_op1_r_x(ValueKind.I32, mmasm.emit_i16x8_alltrue(_, _, X(allocTmp(ValueKind.V128)))); }$/;"	m
visit_I16X8_ALLTRUE	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I16X8_ALLTRUE			() { visitSimd(Opcode.I16X8_ALLTRUE); }$/;"	m
visit_I16X8_AVGR_U	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I16X8_AVGR_U() { do_op2_x_x(ValueKind.V128, asm.pavgw_s_s); }$/;"	m
visit_I16X8_AVGR_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I16X8_AVGR_U			() { visitSimd(Opcode.I16X8_AVGR_U); }$/;"	m
visit_I16X8_BITMASK	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I16X8_BITMASK() { do_op1_r_x(ValueKind.I32, mmasm.emit_i16x8_bitmask); }$/;"	m
visit_I16X8_BITMASK	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I16X8_BITMASK			() { visitSimd(Opcode.I16X8_BITMASK); }$/;"	m
visit_I16X8_EQ	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I16X8_EQ() { do_op2_x_x(ValueKind.V128, asm.pcmpeqw_s_s); }$/;"	m
visit_I16X8_EQ	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I16X8_EQ			() { visitSimd(Opcode.I16X8_EQ); }$/;"	m
visit_I16X8_EXTADDPAIRWISE_I8X16_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I16X8_EXTADDPAIRWISE_I8X16_S() { do_op1_x_gtmp_xtmp(ValueKind.V128, mmasm.emit_i16x8_extadd_pairwise_i8x16_s); }$/;"	m
visit_I16X8_EXTADDPAIRWISE_I8X16_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I16X8_EXTADDPAIRWISE_I8X16_S	() { visitSimd(Opcode.I16X8_EXTADDPAIRWISE_I8X16_S); }$/;"	m
visit_I16X8_EXTADDPAIRWISE_I8X16_U	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I16X8_EXTADDPAIRWISE_I8X16_U() { do_op1_x_gtmp_xtmp(ValueKind.V128, mmasm.emit_i16x8_extadd_pairwise_i8x16_u); }$/;"	m
visit_I16X8_EXTADDPAIRWISE_I8X16_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I16X8_EXTADDPAIRWISE_I8X16_U	() { visitSimd(Opcode.I16X8_EXTADDPAIRWISE_I8X16_U); }$/;"	m
visit_I16X8_EXTEND_HIGH_I8X16_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I16X8_EXTEND_HIGH_I8X16_S() { do_op1_x(ValueKind.V128, mmasm.emit_i16x8_s_convert_i8x16_high); }$/;"	m
visit_I16X8_EXTEND_HIGH_I8X16_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I16X8_EXTEND_HIGH_I8X16_S	() { visitSimd(Opcode.I16X8_EXTEND_HIGH_I8X16_S); }$/;"	m
visit_I16X8_EXTEND_HIGH_I8X16_U	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I16X8_EXTEND_HIGH_I8X16_U() { do_op1_x_xtmp(ValueKind.V128, mmasm.emit_i16x8_u_convert_i8x16_high); }$/;"	m
visit_I16X8_EXTEND_HIGH_I8X16_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I16X8_EXTEND_HIGH_I8X16_U	() { visitSimd(Opcode.I16X8_EXTEND_HIGH_I8X16_U); }$/;"	m
visit_I16X8_EXTEND_LOW_I8X16_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I16X8_EXTEND_LOW_I8X16_S() { do_op1_x_x(ValueKind.V128, asm.pmovsxbw_s_s); }$/;"	m
visit_I16X8_EXTEND_LOW_I8X16_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I16X8_EXTEND_LOW_I8X16_S	() { visitSimd(Opcode.I16X8_EXTEND_LOW_I8X16_S); }$/;"	m
visit_I16X8_EXTEND_LOW_I8X16_U	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I16X8_EXTEND_LOW_I8X16_U() { do_op1_x_x(ValueKind.V128, asm.pmovzxbw_s_s); }$/;"	m
visit_I16X8_EXTEND_LOW_I8X16_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I16X8_EXTEND_LOW_I8X16_U	() { visitSimd(Opcode.I16X8_EXTEND_LOW_I8X16_U); }$/;"	m
visit_I16X8_EXTMUL_HIGH_I8X16_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I16X8_EXTMUL_HIGH_I8X16_S() { do_op2_x_x_xtmp(ValueKind.V128, mmasm.emit_i16x8_extmul_high_s); }$/;"	m
visit_I16X8_EXTMUL_HIGH_I8X16_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I16X8_EXTMUL_HIGH_I8X16_S	() { visitSimd(Opcode.I16X8_EXTMUL_HIGH_I8X16_S); }$/;"	m
visit_I16X8_EXTMUL_HIGH_I8X16_U	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I16X8_EXTMUL_HIGH_I8X16_U() { do_op2_x_x_xtmp(ValueKind.V128, mmasm.emit_i16x8_extmul_high_u); }$/;"	m
visit_I16X8_EXTMUL_HIGH_I8X16_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I16X8_EXTMUL_HIGH_I8X16_U	() { visitSimd(Opcode.I16X8_EXTMUL_HIGH_I8X16_U); }$/;"	m
visit_I16X8_EXTMUL_LOW_I8X16_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I16X8_EXTMUL_LOW_I8X16_S() { visit_V128_EXTMUL2(ValueKind.V128, mmasm.emit_i16x8_extmul_low, true); }$/;"	m
visit_I16X8_EXTMUL_LOW_I8X16_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I16X8_EXTMUL_LOW_I8X16_S	() { visitSimd(Opcode.I16X8_EXTMUL_LOW_I8X16_S); }$/;"	m
visit_I16X8_EXTMUL_LOW_I8X16_U	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I16X8_EXTMUL_LOW_I8X16_U() { visit_V128_EXTMUL2(ValueKind.V128, mmasm.emit_i16x8_extmul_low, false); }$/;"	m
visit_I16X8_EXTMUL_LOW_I8X16_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I16X8_EXTMUL_LOW_I8X16_U	() { visitSimd(Opcode.I16X8_EXTMUL_LOW_I8X16_U); }$/;"	m
visit_I16X8_EXTRACT_LANE_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I16X8_EXTRACT_LANE_S(lane: byte) { visit_V128_EXTRACT_LANE_S(ValueKind.I32, lane, asm.pextrw_r_s_i, asm.q.movwsx_r_r); }$/;"	m
visit_I16X8_EXTRACT_LANE_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I16X8_EXTRACT_LANE_S		(lane_index: u8) { visitSimd(Opcode.I16X8_EXTRACT_LANE_S); }$/;"	m
visit_I16X8_EXTRACT_LANE_U	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I16X8_EXTRACT_LANE_U(lane: byte) { visit_V128_EXTRACT_LANE(ValueKind.I32, lane, asm.pextrw_r_s_i); }$/;"	m
visit_I16X8_EXTRACT_LANE_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I16X8_EXTRACT_LANE_U		(lane_index: u8) { visitSimd(Opcode.I16X8_EXTRACT_LANE_U); }$/;"	m
visit_I16X8_GE_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I16X8_GE_S() { do_op2_x_x(ValueKind.V128, mmasm.emit_i16x8_ge_s); }$/;"	m
visit_I16X8_GE_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I16X8_GE_S			() { visitSimd(Opcode.I16X8_GE_S); }$/;"	m
visit_I16X8_GE_U	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I16X8_GE_U() { do_op2_x_x(ValueKind.V128, mmasm.emit_i16x8_ge_u); }$/;"	m
visit_I16X8_GE_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I16X8_GE_U			() { visitSimd(Opcode.I16X8_GE_U); }$/;"	m
visit_I16X8_GT_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I16X8_GT_S() { do_op2_x_x(ValueKind.V128, asm.pcmpgtw_s_s); }$/;"	m
visit_I16X8_GT_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I16X8_GT_S			() { visitSimd(Opcode.I16X8_GT_S); }$/;"	m
visit_I16X8_GT_U	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I16X8_GT_U() { do_op2_x_x_xtmp(ValueKind.V128, mmasm.emit_i16x8_gt_u); }$/;"	m
visit_I16X8_GT_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I16X8_GT_U			() { visitSimd(Opcode.I16X8_GT_U); }$/;"	m
visit_I16X8_LE_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I16X8_LE_S() { do_c_op2_x_x(ValueKind.V128, mmasm.emit_i16x8_ge_s); }$/;"	m
visit_I16X8_LE_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I16X8_LE_S			() { visitSimd(Opcode.I16X8_LE_S); }$/;"	m
visit_I16X8_LE_U	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I16X8_LE_U() { do_c_op2_x_x(ValueKind.V128, mmasm.emit_i16x8_ge_u); }$/;"	m
visit_I16X8_LE_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I16X8_LE_U			() { visitSimd(Opcode.I16X8_LE_U); }$/;"	m
visit_I16X8_LT_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I16X8_LT_S() { do_c_op2_x_x(ValueKind.V128, asm.pcmpgtw_s_s); }$/;"	m
visit_I16X8_LT_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I16X8_LT_S			() { visitSimd(Opcode.I16X8_LT_S); }$/;"	m
visit_I16X8_LT_U	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I16X8_LT_U() { do_c_op2_x_x_xtmp(ValueKind.V128, mmasm.emit_i16x8_gt_u); }$/;"	m
visit_I16X8_LT_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I16X8_LT_U			() { visitSimd(Opcode.I16X8_LT_U); }$/;"	m
visit_I16X8_MAX_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I16X8_MAX_S() { do_op2_x_x(ValueKind.V128, asm.pmaxsw_s_s); }$/;"	m
visit_I16X8_MAX_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I16X8_MAX_S			() { visitSimd(Opcode.I16X8_MAX_S); }$/;"	m
visit_I16X8_MAX_U	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I16X8_MAX_U() { do_op2_x_x(ValueKind.V128, asm.pmaxuw_s_s); }$/;"	m
visit_I16X8_MAX_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I16X8_MAX_U			() { visitSimd(Opcode.I16X8_MAX_U); }$/;"	m
visit_I16X8_MIN_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I16X8_MIN_S() { do_op2_x_x(ValueKind.V128, asm.pminsw_s_s); }$/;"	m
visit_I16X8_MIN_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I16X8_MIN_S			() { visitSimd(Opcode.I16X8_MIN_S); }$/;"	m
visit_I16X8_MIN_U	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I16X8_MIN_U() { do_op2_x_x(ValueKind.V128, asm.pminuw_s_s); }$/;"	m
visit_I16X8_MIN_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I16X8_MIN_U			() { visitSimd(Opcode.I16X8_MIN_U); }$/;"	m
visit_I16X8_MUL	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I16X8_MUL() { do_op2_x_x(ValueKind.V128, asm.pmullw_s_s); }$/;"	m
visit_I16X8_MUL	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I16X8_MUL			() { visitSimd(Opcode.I16X8_MUL); }$/;"	m
visit_I16X8_NARROW_I32X4_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I16X8_NARROW_I32X4_S() { do_op2_x_x(ValueKind.V128, asm.packssdw_s_s); }$/;"	m
visit_I16X8_NARROW_I32X4_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I16X8_NARROW_I32X4_S		() { visitSimd(Opcode.I16X8_NARROW_I32X4_S); }$/;"	m
visit_I16X8_NARROW_I32X4_U	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I16X8_NARROW_I32X4_U() { do_op2_x_x(ValueKind.V128, asm.packusdw_s_s); }$/;"	m
visit_I16X8_NARROW_I32X4_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I16X8_NARROW_I32X4_U		() { visitSimd(Opcode.I16X8_NARROW_I32X4_U); }$/;"	m
visit_I16X8_NE	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I16X8_NE() { do_op2_x_x(ValueKind.V128, mmasm.emit_i16x8_ne); }$/;"	m
visit_I16X8_NE	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I16X8_NE			() { visitSimd(Opcode.I16X8_NE); }$/;"	m
visit_I16X8_NEG	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I16X8_NEG() { do_op1_x_xtmp(ValueKind.V128, mmasm.emit_i16x8_neg); }$/;"	m
visit_I16X8_NEG	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I16X8_NEG			() { visitSimd(Opcode.I16X8_NEG); }$/;"	m
visit_I16X8_Q15MULRSAT_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I16X8_Q15MULRSAT_S() { do_op2_x_x_xtmp(ValueKind.V128, mmasm.emit_i16x8_q15mulrsat_s); }$/;"	m
visit_I16X8_Q15MULRSAT_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I16X8_Q15MULRSAT_S		() { visitSimd(Opcode.I16X8_Q15MULRSAT_S); }$/;"	m
visit_I16X8_RELAXED_DOT_I8X16_I7X16_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I16X8_RELAXED_DOT_I8X16_I7X16_S() { do_c_op2_x_x(ValueKind.V128, asm.pmaddubsw_s_s); }$/;"	m
visit_I16X8_RELAXED_DOT_I8X16_I7X16_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I16X8_RELAXED_DOT_I8X16_I7X16_S	() { visitRelaxedSimd(Opcode.I16X8_RELAXED_DOT_I8X16_I7X16_S); }$/;"	m
visit_I16X8_RELAXED_LANESELECT	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_I16X8_RELAXED_LANESELECT() { visit_V128_BITSELECT(); }$/;"	m
visit_I16X8_RELAXED_LANESELECT	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I16X8_RELAXED_LANESELECT		() { visitRelaxedSimd(Opcode.I16X8_RELAXED_LANESELECT); }$/;"	m
visit_I16X8_RELAXED_Q15MULR_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I16X8_RELAXED_Q15MULR_S() { do_op2_x_x_xtmp(ValueKind.V128, mmasm.emit_i16x8_q15mulrsat_s); }$/;"	m
visit_I16X8_RELAXED_Q15MULR_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I16X8_RELAXED_Q15MULR_S		() { visitRelaxedSimd(Opcode.I16X8_RELAXED_Q15MULR_S); }$/;"	m
visit_I16X8_REPLACE_LANE	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I16X8_REPLACE_LANE(lane: byte) { visit_V128_REPLACE_LANE(lane, asm.pinsrw_s_r_i); }$/;"	m
visit_I16X8_REPLACE_LANE	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I16X8_REPLACE_LANE		(lane_index: u8) { visitSimd(Opcode.I16X8_REPLACE_LANE); }$/;"	m
visit_I16X8_SHL	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I16X8_SHL() { visit_V128_SHIFT2(4, asm.psllw_s_s); }$/;"	m
visit_I16X8_SHL	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I16X8_SHL			() { visitSimd(Opcode.I16X8_SHL); }$/;"	m
visit_I16X8_SHR_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I16X8_SHR_S() {visit_V128_SHIFT2(4, asm.psraw_s_s); }$/;"	m
visit_I16X8_SHR_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I16X8_SHR_S			() { visitSimd(Opcode.I16X8_SHR_S); }$/;"	m
visit_I16X8_SHR_U	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I16X8_SHR_U() { visit_V128_SHIFT2(4, asm.psrlw_s_s); }$/;"	m
visit_I16X8_SHR_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I16X8_SHR_U			() { visitSimd(Opcode.I16X8_SHR_U); }$/;"	m
visit_I16X8_SPLAT	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I16X8_SPLAT() { visit_V128_SPLAT_I(mmasm.emit_i16x8_splat); }$/;"	m
visit_I16X8_SPLAT	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I16X8_SPLAT			() { visitSimd(Opcode.I16X8_SPLAT); }$/;"	m
visit_I16X8_SUB	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I16X8_SUB() { do_op2_x_x(ValueKind.V128, asm.psubw_s_s); }$/;"	m
visit_I16X8_SUB	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I16X8_SUB			() { visitSimd(Opcode.I16X8_SUB); }$/;"	m
visit_I16X8_SUB_SAT_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I16X8_SUB_SAT_S() { do_op2_x_x(ValueKind.V128, asm.psubsw_s_s); }$/;"	m
visit_I16X8_SUB_SAT_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I16X8_SUB_SAT_S		() { visitSimd(Opcode.I16X8_SUB_SAT_S); }$/;"	m
visit_I16X8_SUB_SAT_U	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I16X8_SUB_SAT_U() { do_op2_x_x(ValueKind.V128, asm.psubusw_s_s); }$/;"	m
visit_I16X8_SUB_SAT_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I16X8_SUB_SAT_U		() { visitSimd(Opcode.I16X8_SUB_SAT_U); }$/;"	m
visit_I31_GET_S	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_I31_GET_S() { emitI31_GET(true); }$/;"	m
visit_I31_GET_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I31_GET_S		()					{ visitGc(Opcode.I31_GET_S); }$/;"	m
visit_I31_GET_U	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_I31_GET_U() { emitI31_GET(false); }$/;"	m
visit_I31_GET_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I31_GET_U		() 					{ visitGc(Opcode.I31_GET_U); }$/;"	m
visit_I32X4_ABS	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32X4_ABS() { do_op1_x_x(ValueKind.V128, asm.pabsd_s_s); }$/;"	m
visit_I32X4_ABS	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32X4_ABS			() { visitSimd(Opcode.I32X4_ABS); }$/;"	m
visit_I32X4_ADD	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32X4_ADD() { do_op2_x_x(ValueKind.V128, asm.paddd_s_s); }$/;"	m
visit_I32X4_ADD	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32X4_ADD			() { visitSimd(Opcode.I32X4_ADD); }$/;"	m
visit_I32X4_ALLTRUE	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32X4_ALLTRUE() { do_op1_r_x(ValueKind.I32, mmasm.emit_i32x4_alltrue(_, _, X(allocTmp(ValueKind.V128)))); }$/;"	m
visit_I32X4_ALLTRUE	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32X4_ALLTRUE			() { visitSimd(Opcode.I32X4_ALLTRUE); }$/;"	m
visit_I32X4_BITMASK	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32X4_BITMASK() { do_op1_r_x(ValueKind.I32, asm.movmskps_r_s); }$/;"	m
visit_I32X4_BITMASK	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32X4_BITMASK			() { visitSimd(Opcode.I32X4_BITMASK); }$/;"	m
visit_I32X4_DOT_I16X8_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32X4_DOT_I16X8_S() { do_op2_x_x(ValueKind.V128, asm.pmaddwd_s_s); }$/;"	m
visit_I32X4_DOT_I16X8_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32X4_DOT_I16X8_S		() { visitSimd(Opcode.I32X4_DOT_I16X8_S); }$/;"	m
visit_I32X4_EQ	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32X4_EQ() { do_op2_x_x(ValueKind.V128, asm.pcmpeqd_s_s); }$/;"	m
visit_I32X4_EQ	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32X4_EQ			() { visitSimd(Opcode.I32X4_EQ); }$/;"	m
visit_I32X4_EXTADDPAIRWISE_I16X8_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32X4_EXTADDPAIRWISE_I16X8_S() { do_op1_x_gtmp_xtmp(ValueKind.V128, mmasm.emit_i32x4_extadd_pairwise_i16x8_s); }$/;"	m
visit_I32X4_EXTADDPAIRWISE_I16X8_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32X4_EXTADDPAIRWISE_I16X8_S	() { visitSimd(Opcode.I32X4_EXTADDPAIRWISE_I16X8_S); }$/;"	m
visit_I32X4_EXTADDPAIRWISE_I16X8_U	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32X4_EXTADDPAIRWISE_I16X8_U() { do_op1_x_xtmp(ValueKind.V128, mmasm.emit_i32x4_extadd_pairwise_i16x8_u); }$/;"	m
visit_I32X4_EXTADDPAIRWISE_I16X8_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32X4_EXTADDPAIRWISE_I16X8_U	() { visitSimd(Opcode.I32X4_EXTADDPAIRWISE_I16X8_U); }$/;"	m
visit_I32X4_EXTEND_HIGH_I16X8_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32X4_EXTEND_HIGH_I16X8_S() { do_op1_x(ValueKind.V128, mmasm.emit_i32x4_s_convert_i16x8_high); }$/;"	m
visit_I32X4_EXTEND_HIGH_I16X8_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32X4_EXTEND_HIGH_I16X8_S	() { visitSimd(Opcode.I32X4_EXTEND_HIGH_I16X8_S); }$/;"	m
visit_I32X4_EXTEND_HIGH_I16X8_U	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32X4_EXTEND_HIGH_I16X8_U() { do_op1_x_xtmp(ValueKind.V128, mmasm.emit_i32x4_u_convert_i16x8_high); }$/;"	m
visit_I32X4_EXTEND_HIGH_I16X8_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32X4_EXTEND_HIGH_I16X8_U	() { visitSimd(Opcode.I32X4_EXTEND_HIGH_I16X8_U); }$/;"	m
visit_I32X4_EXTEND_LOW_I16X8_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32X4_EXTEND_LOW_I16X8_S() { do_op1_x_x(ValueKind.V128, asm.pmovsxwd_s_s); }$/;"	m
visit_I32X4_EXTEND_LOW_I16X8_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32X4_EXTEND_LOW_I16X8_S	() { visitSimd(Opcode.I32X4_EXTEND_LOW_I16X8_S); }$/;"	m
visit_I32X4_EXTEND_LOW_I16X8_U	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32X4_EXTEND_LOW_I16X8_U() { do_op1_x_x(ValueKind.V128, asm.pmovzxwd_s_s); }$/;"	m
visit_I32X4_EXTEND_LOW_I16X8_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32X4_EXTEND_LOW_I16X8_U	() { visitSimd(Opcode.I32X4_EXTEND_LOW_I16X8_U); }$/;"	m
visit_I32X4_EXTMUL_HIGH_I16X8_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32X4_EXTMUL_HIGH_I16X8_S() { visit_V128_EXTMUL1(ValueKind.V128, mmasm.emit_i32x4_extmul, false, true); }$/;"	m
visit_I32X4_EXTMUL_HIGH_I16X8_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32X4_EXTMUL_HIGH_I16X8_S	() { visitSimd(Opcode.I32X4_EXTMUL_HIGH_I16X8_S); }$/;"	m
visit_I32X4_EXTMUL_HIGH_I16X8_U	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32X4_EXTMUL_HIGH_I16X8_U() { visit_V128_EXTMUL1(ValueKind.V128, mmasm.emit_i32x4_extmul, false, false); }$/;"	m
visit_I32X4_EXTMUL_HIGH_I16X8_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32X4_EXTMUL_HIGH_I16X8_U	() { visitSimd(Opcode.I32X4_EXTMUL_HIGH_I16X8_U); }$/;"	m
visit_I32X4_EXTMUL_LOW_I16X8_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32X4_EXTMUL_LOW_I16X8_S() { visit_V128_EXTMUL1(ValueKind.V128, mmasm.emit_i32x4_extmul, true, true); }$/;"	m
visit_I32X4_EXTMUL_LOW_I16X8_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32X4_EXTMUL_LOW_I16X8_S	() { visitSimd(Opcode.I32X4_EXTMUL_LOW_I16X8_S); }$/;"	m
visit_I32X4_EXTMUL_LOW_I16X8_U	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32X4_EXTMUL_LOW_I16X8_U() { visit_V128_EXTMUL1(ValueKind.V128, mmasm.emit_i32x4_extmul, true, false); }$/;"	m
visit_I32X4_EXTMUL_LOW_I16X8_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32X4_EXTMUL_LOW_I16X8_U	() { visitSimd(Opcode.I32X4_EXTMUL_LOW_I16X8_U); }$/;"	m
visit_I32X4_EXTRACT_LANE	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32X4_EXTRACT_LANE(lane: byte) { visit_V128_EXTRACT_LANE(ValueKind.I32, lane, asm.pextrd_r_s_i); }$/;"	m
visit_I32X4_EXTRACT_LANE	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32X4_EXTRACT_LANE		(lane_index: u8) { visitSimd(Opcode.I32X4_EXTRACT_LANE); }$/;"	m
visit_I32X4_GE_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32X4_GE_S() { do_op2_x_x(ValueKind.V128, mmasm.emit_i32x4_ge_s); }$/;"	m
visit_I32X4_GE_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32X4_GE_S			() { visitSimd(Opcode.I32X4_GE_S); }$/;"	m
visit_I32X4_GE_U	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32X4_GE_U() { do_op2_x_x(ValueKind.V128, mmasm.emit_i32x4_ge_u); }$/;"	m
visit_I32X4_GE_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32X4_GE_U			() { visitSimd(Opcode.I32X4_GE_U); }$/;"	m
visit_I32X4_GT_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32X4_GT_S() { do_op2_x_x(ValueKind.V128, asm.pcmpgtd_s_s); }$/;"	m
visit_I32X4_GT_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32X4_GT_S			() { visitSimd(Opcode.I32X4_GT_S); }$/;"	m
visit_I32X4_GT_U	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32X4_GT_U() { do_op2_x_x_xtmp(ValueKind.V128, mmasm.emit_i32x4_gt_u); }$/;"	m
visit_I32X4_GT_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32X4_GT_U			() { visitSimd(Opcode.I32X4_GT_U); }$/;"	m
visit_I32X4_LE_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32X4_LE_S() { do_c_op2_x_x(ValueKind.V128, mmasm.emit_i32x4_ge_s); }$/;"	m
visit_I32X4_LE_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32X4_LE_S			() { visitSimd(Opcode.I32X4_LE_S); }$/;"	m
visit_I32X4_LE_U	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32X4_LE_U() { do_c_op2_x_x(ValueKind.V128, mmasm.emit_i32x4_ge_u); }$/;"	m
visit_I32X4_LE_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32X4_LE_U			() { visitSimd(Opcode.I32X4_LE_U); }$/;"	m
visit_I32X4_LT_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32X4_LT_S() { do_c_op2_x_x(ValueKind.V128, asm.pcmpgtd_s_s); }$/;"	m
visit_I32X4_LT_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32X4_LT_S			() { visitSimd(Opcode.I32X4_LT_S); }$/;"	m
visit_I32X4_LT_U	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32X4_LT_U() { do_c_op2_x_x_xtmp(ValueKind.V128, mmasm.emit_i32x4_gt_u); }$/;"	m
visit_I32X4_LT_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32X4_LT_U			() { visitSimd(Opcode.I32X4_LT_U); }$/;"	m
visit_I32X4_MAX_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32X4_MAX_S() { do_op2_x_x(ValueKind.V128, asm.pmaxsd_s_s); }$/;"	m
visit_I32X4_MAX_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32X4_MAX_S			() { visitSimd(Opcode.I32X4_MAX_S); }$/;"	m
visit_I32X4_MAX_U	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32X4_MAX_U() { do_op2_x_x(ValueKind.V128, asm.pmaxud_s_s); }$/;"	m
visit_I32X4_MAX_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32X4_MAX_U			() { visitSimd(Opcode.I32X4_MAX_U); }$/;"	m
visit_I32X4_MIN_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32X4_MIN_S() { do_op2_x_x(ValueKind.V128, asm.pminsd_s_s); }$/;"	m
visit_I32X4_MIN_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32X4_MIN_S			() { visitSimd(Opcode.I32X4_MIN_S); }$/;"	m
visit_I32X4_MIN_U	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32X4_MIN_U() { do_op2_x_x(ValueKind.V128, asm.pminud_s_s); }$/;"	m
visit_I32X4_MIN_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32X4_MIN_U			() { visitSimd(Opcode.I32X4_MIN_U); }$/;"	m
visit_I32X4_MUL	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32X4_MUL() { do_op2_x_x(ValueKind.V128, asm.pmulld_s_s); }$/;"	m
visit_I32X4_MUL	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32X4_MUL			() { visitSimd(Opcode.I32X4_MUL); }$/;"	m
visit_I32X4_NE	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32X4_NE() { do_op2_x_x(ValueKind.V128, mmasm.emit_i32x4_ne); }$/;"	m
visit_I32X4_NE	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32X4_NE			() { visitSimd(Opcode.I32X4_NE); }$/;"	m
visit_I32X4_NEG	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32X4_NEG() { do_op1_x_xtmp(ValueKind.V128, mmasm.emit_i32x4_neg); }$/;"	m
visit_I32X4_NEG	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32X4_NEG			() { visitSimd(Opcode.I32X4_NEG); }$/;"	m
visit_I32X4_RELAXED_DOT_I8X16_I7X16_ADD_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32X4_RELAXED_DOT_I8X16_I7X16_ADD_S() {$/;"	m
visit_I32X4_RELAXED_DOT_I8X16_I7X16_ADD_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32X4_RELAXED_DOT_I8X16_I7X16_ADD_S	() { visitRelaxedSimd(Opcode.I32X4_RELAXED_DOT_I8X16_I7X16_ADD_S); }$/;"	m
visit_I32X4_RELAXED_LANESELECT	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_I32X4_RELAXED_LANESELECT() { visit_V128_BITSELECT(); }$/;"	m
visit_I32X4_RELAXED_LANESELECT	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32X4_RELAXED_LANESELECT		() { visitRelaxedSimd(Opcode.I32X4_RELAXED_LANESELECT); }$/;"	m
visit_I32X4_RELAXED_TRUNC_F32X4_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32X4_RELAXED_TRUNC_F32X4_S() { do_op1_x_xtmp(ValueKind.V128, mmasm.emit_i32x4_trunc_sat_f32x4_s); }$/;"	m
visit_I32X4_RELAXED_TRUNC_F32X4_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32X4_RELAXED_TRUNC_F32X4_S		() { visitRelaxedSimd(Opcode.I32X4_RELAXED_TRUNC_F32X4_S); }$/;"	m
visit_I32X4_RELAXED_TRUNC_F32X4_U	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32X4_RELAXED_TRUNC_F32X4_U() { do_op1_x_xtmp(ValueKind.V128, mmasm.emit_i32x4_trunc_sat_f32x4_u(_, _, X(allocTmp(ValueKind.V128)))); }$/;"	m
visit_I32X4_RELAXED_TRUNC_F32X4_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32X4_RELAXED_TRUNC_F32X4_U		() { visitRelaxedSimd(Opcode.I32X4_RELAXED_TRUNC_F32X4_U); }$/;"	m
visit_I32X4_RELAXED_TRUNC_F64X2_S_ZERO	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32X4_RELAXED_TRUNC_F64X2_S_ZERO() { do_op1_x_gtmp_xtmp(ValueKind.V128, mmasm.emit_i32x4_trunc_sat_f64x2_s_zero(_, _, _, X(allocTmp(ValueKind.V128)))); }$/;"	m
visit_I32X4_RELAXED_TRUNC_F64X2_S_ZERO	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32X4_RELAXED_TRUNC_F64X2_S_ZERO	() { visitRelaxedSimd(Opcode.I32X4_RELAXED_TRUNC_F64X2_S_ZERO); }$/;"	m
visit_I32X4_RELAXED_TRUNC_F64X2_U_ZERO	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32X4_RELAXED_TRUNC_F64X2_U_ZERO() { do_op1_x_gtmp_xtmp(ValueKind.V128, mmasm.emit_i32x4_trunc_sat_f64x2_u_zero(_, _, _, X(allocTmp(ValueKind.V128)))); }$/;"	m
visit_I32X4_RELAXED_TRUNC_F64X2_U_ZERO	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32X4_RELAXED_TRUNC_F64X2_U_ZERO	() { visitRelaxedSimd(Opcode.I32X4_RELAXED_TRUNC_F64X2_U_ZERO); }$/;"	m
visit_I32X4_REPLACE_LANE	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32X4_REPLACE_LANE(lane: byte) { visit_V128_REPLACE_LANE(lane, asm.pinsrd_s_r_i); }$/;"	m
visit_I32X4_REPLACE_LANE	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32X4_REPLACE_LANE		(lane_index: u8) { visitSimd(Opcode.I32X4_REPLACE_LANE); }$/;"	m
visit_I32X4_SHL	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32X4_SHL() { visit_V128_SHIFT2(5, asm.pslld_s_s); }$/;"	m
visit_I32X4_SHL	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32X4_SHL			() { visitSimd(Opcode.I32X4_SHL); }$/;"	m
visit_I32X4_SHR_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32X4_SHR_S() { visit_V128_SHIFT2(5, asm.psrad_s_s); }$/;"	m
visit_I32X4_SHR_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32X4_SHR_S			() { visitSimd(Opcode.I32X4_SHR_S); }$/;"	m
visit_I32X4_SHR_U	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32X4_SHR_U() { visit_V128_SHIFT2(5, asm.psrld_s_s); }$/;"	m
visit_I32X4_SHR_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32X4_SHR_U			() { visitSimd(Opcode.I32X4_SHR_U); }$/;"	m
visit_I32X4_SPLAT	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32X4_SPLAT() { visit_V128_SPLAT_I(mmasm.emit_i32x4_splat); }$/;"	m
visit_I32X4_SPLAT	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32X4_SPLAT			() { visitSimd(Opcode.I32X4_SPLAT); }$/;"	m
visit_I32X4_SUB	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32X4_SUB() { do_op2_x_x(ValueKind.V128, asm.psubd_s_s); }$/;"	m
visit_I32X4_SUB	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32X4_SUB			() { visitSimd(Opcode.I32X4_SUB); }$/;"	m
visit_I32X4_TRUNC_SAT_F32X4_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32X4_TRUNC_SAT_F32X4_S() { do_op1_x_xtmp(ValueKind.V128, mmasm.emit_i32x4_trunc_sat_f32x4_s); }$/;"	m
visit_I32X4_TRUNC_SAT_F32X4_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32X4_TRUNC_SAT_F32X4_S	() { visitSimd(Opcode.I32X4_TRUNC_SAT_F32X4_S); }$/;"	m
visit_I32X4_TRUNC_SAT_F32X4_U	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32X4_TRUNC_SAT_F32X4_U() { do_op1_x_xtmp(ValueKind.V128, mmasm.emit_i32x4_trunc_sat_f32x4_u(_, _, X(allocTmp(ValueKind.V128)))); }$/;"	m
visit_I32X4_TRUNC_SAT_F32X4_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32X4_TRUNC_SAT_F32X4_U	() { visitSimd(Opcode.I32X4_TRUNC_SAT_F32X4_U); }$/;"	m
visit_I32X4_TRUNC_SAT_F64X2_S_ZERO	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32X4_TRUNC_SAT_F64X2_S_ZERO() { do_op1_x_gtmp_xtmp(ValueKind.V128, mmasm.emit_i32x4_trunc_sat_f64x2_s_zero(_, _, _, X(allocTmp(ValueKind.V128)))); }$/;"	m
visit_I32X4_TRUNC_SAT_F64X2_S_ZERO	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32X4_TRUNC_SAT_F64X2_S_ZERO	() { visitSimd(Opcode.I32X4_TRUNC_SAT_F64X2_S_ZERO); }$/;"	m
visit_I32X4_TRUNC_SAT_F64X2_U_ZERO	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32X4_TRUNC_SAT_F64X2_U_ZERO() { do_op1_x_gtmp_xtmp(ValueKind.V128, mmasm.emit_i32x4_trunc_sat_f64x2_u_zero(_, _, _, X(allocTmp(ValueKind.V128)))); }$/;"	m
visit_I32X4_TRUNC_SAT_F64X2_U_ZERO	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32X4_TRUNC_SAT_F64X2_U_ZERO	() { visitSimd(Opcode.I32X4_TRUNC_SAT_F64X2_U_ZERO); }$/;"	m
visit_I32_ADD	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32_ADD() { visitSimpleOp2_uu_u(V3Eval.I32_ADD, asm.d.add_r_i, asm.d.add_r_m, asm.d.add_r_r); }$/;"	m
visit_I32_ADD	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32_ADD		() { visitBinop(Opcode.I32_ADD); }$/;"	m
visit_I32_AND	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32_AND() { visitSimpleOp2_uu_u(V3Eval.I32_AND, asm.d.and_r_i, asm.d.and_r_m, asm.d.and_r_r); }$/;"	m
visit_I32_AND	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32_AND		() { visitBinop(Opcode.I32_AND); }$/;"	m
visit_I32_ATOMIC_LOAD	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32_ATOMIC_LOAD		(imm: MemArg) 	{ visitAtomic(Opcode.I32_ATOMIC_LOAD, imm); }$/;"	m
visit_I32_ATOMIC_LOAD16_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32_ATOMIC_LOAD16_U		(imm: MemArg) 	{ visitAtomic(Opcode.I32_ATOMIC_LOAD16_U, imm); }$/;"	m
visit_I32_ATOMIC_LOAD8_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32_ATOMIC_LOAD8_U		(imm: MemArg) 	{ visitAtomic(Opcode.I32_ATOMIC_LOAD8_U, imm); }$/;"	m
visit_I32_ATOMIC_RMW16_ADD_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32_ATOMIC_RMW16_ADD_U	(imm: MemArg) 	{ visitAtomic(Opcode.I32_ATOMIC_RMW16_ADD_U, imm); }$/;"	m
visit_I32_ATOMIC_RMW16_AND_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32_ATOMIC_RMW16_AND_U	(imm: MemArg) 	{ visitAtomic(Opcode.I32_ATOMIC_RMW16_AND_U, imm); }$/;"	m
visit_I32_ATOMIC_RMW16_CMPXCHG_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32_ATOMIC_RMW16_CMPXCHG_U	(imm: MemArg) 	{ visitAtomic(Opcode.I32_ATOMIC_RMW16_CMPXCHG_U, imm); }$/;"	m
visit_I32_ATOMIC_RMW16_OR_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32_ATOMIC_RMW16_OR_U		(imm: MemArg) 	{ visitAtomic(Opcode.I32_ATOMIC_RMW16_OR_U, imm); }$/;"	m
visit_I32_ATOMIC_RMW16_SUB_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32_ATOMIC_RMW16_SUB_U	(imm: MemArg) 	{ visitAtomic(Opcode.I32_ATOMIC_RMW16_SUB_U, imm); }$/;"	m
visit_I32_ATOMIC_RMW16_XCHG_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32_ATOMIC_RMW16_XCHG_U	(imm: MemArg) 	{ visitAtomic(Opcode.I32_ATOMIC_RMW16_XCHG_U, imm); }$/;"	m
visit_I32_ATOMIC_RMW16_XOR_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32_ATOMIC_RMW16_XOR_U	(imm: MemArg) 	{ visitAtomic(Opcode.I32_ATOMIC_RMW16_XOR_U, imm); }$/;"	m
visit_I32_ATOMIC_RMW8_ADD_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32_ATOMIC_RMW8_ADD_U		(imm: MemArg) 	{ visitAtomic(Opcode.I32_ATOMIC_RMW8_ADD_U, imm); }$/;"	m
visit_I32_ATOMIC_RMW8_AND_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32_ATOMIC_RMW8_AND_U		(imm: MemArg) 	{ visitAtomic(Opcode.I32_ATOMIC_RMW8_AND_U, imm); }$/;"	m
visit_I32_ATOMIC_RMW8_CMPXCHG_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32_ATOMIC_RMW8_CMPXCHG_U	(imm: MemArg) 	{ visitAtomic(Opcode.I32_ATOMIC_RMW8_CMPXCHG_U, imm); }$/;"	m
visit_I32_ATOMIC_RMW8_OR_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32_ATOMIC_RMW8_OR_U		(imm: MemArg) 	{ visitAtomic(Opcode.I32_ATOMIC_RMW8_OR_U, imm); }$/;"	m
visit_I32_ATOMIC_RMW8_SUB_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32_ATOMIC_RMW8_SUB_U		(imm: MemArg) 	{ visitAtomic(Opcode.I32_ATOMIC_RMW8_SUB_U, imm); }$/;"	m
visit_I32_ATOMIC_RMW8_XCHG_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32_ATOMIC_RMW8_XCHG_U	(imm: MemArg) 	{ visitAtomic(Opcode.I32_ATOMIC_RMW8_XCHG_U, imm); }$/;"	m
visit_I32_ATOMIC_RMW8_XOR_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32_ATOMIC_RMW8_XOR_U		(imm: MemArg) 	{ visitAtomic(Opcode.I32_ATOMIC_RMW8_XOR_U, imm); }$/;"	m
visit_I32_ATOMIC_RMW_ADD	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32_ATOMIC_RMW_ADD		(imm: MemArg) 	{ visitAtomic(Opcode.I32_ATOMIC_RMW_ADD, imm); }$/;"	m
visit_I32_ATOMIC_RMW_AND	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32_ATOMIC_RMW_AND		(imm: MemArg) 	{ visitAtomic(Opcode.I32_ATOMIC_RMW_AND, imm); }$/;"	m
visit_I32_ATOMIC_RMW_CMPXCHG	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32_ATOMIC_RMW_CMPXCHG	(imm: MemArg) 	{ visitAtomic(Opcode.I32_ATOMIC_RMW_CMPXCHG, imm); }$/;"	m
visit_I32_ATOMIC_RMW_OR	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32_ATOMIC_RMW_OR		(imm: MemArg) 	{ visitAtomic(Opcode.I32_ATOMIC_RMW_OR, imm); }$/;"	m
visit_I32_ATOMIC_RMW_SUB	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32_ATOMIC_RMW_SUB		(imm: MemArg) 	{ visitAtomic(Opcode.I32_ATOMIC_RMW_SUB, imm); }$/;"	m
visit_I32_ATOMIC_RMW_XCHG	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32_ATOMIC_RMW_XCHG		(imm: MemArg) 	{ visitAtomic(Opcode.I32_ATOMIC_RMW_XCHG, imm); }$/;"	m
visit_I32_ATOMIC_RMW_XOR	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32_ATOMIC_RMW_XOR		(imm: MemArg) 	{ visitAtomic(Opcode.I32_ATOMIC_RMW_XOR, imm); }$/;"	m
visit_I32_ATOMIC_STORE	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32_ATOMIC_STORE		(imm: MemArg) 	{ visitAtomic(Opcode.I32_ATOMIC_STORE, imm); }$/;"	m
visit_I32_ATOMIC_STORE16	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32_ATOMIC_STORE16		(imm: MemArg) 	{ visitAtomic(Opcode.I32_ATOMIC_STORE16, imm); }$/;"	m
visit_I32_ATOMIC_STORE8	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32_ATOMIC_STORE8		(imm: MemArg) 	{ visitAtomic(Opcode.I32_ATOMIC_STORE8, imm); }$/;"	m
visit_I32_CLZ	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32_CLZ() {$/;"	m
visit_I32_CLZ	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32_CLZ		() { visitUnop(Opcode.I32_CLZ); }$/;"	m
visit_I32_CONST	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_I32_CONST(val: i32) {$/;"	m
visit_I32_CONST	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32_CONST		(val: i32) { visitConst(Opcode.I32_CONST); }$/;"	m
visit_I32_CTZ	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32_CTZ() {$/;"	m
visit_I32_CTZ	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32_CTZ		() { visitUnop(Opcode.I32_CTZ); }$/;"	m
visit_I32_DIV_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32_DIV_S() { visitIDivRem(X86_64MasmRegs.RAX, mmasm.emit_i32_div_s); } \/\/ XXX: fold potentially-trapping div\/rem$/;"	m
visit_I32_DIV_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32_DIV_S		() { visitBinop(Opcode.I32_DIV_S); }$/;"	m
visit_I32_DIV_U	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32_DIV_U() { visitIDivRem(X86_64MasmRegs.RAX, mmasm.emit_i32_div_u); }$/;"	m
visit_I32_DIV_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32_DIV_U		() { visitBinop(Opcode.I32_DIV_U); }$/;"	m
visit_I32_EQ	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32_EQ()   { void(tryFold_uu_z(V3Eval.I32_EQ)   || visitCompareI(asm.d, C.Z)); }$/;"	m
visit_I32_EQ	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32_EQ		() { visitCompare(Opcode.I32_EQ); }$/;"	m
visit_I32_EQZ	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32_EQZ() {$/;"	m
visit_I32_EQZ	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32_EQZ		() { visitCompare(Opcode.I32_EQZ); }$/;"	m
visit_I32_EXTEND16_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32_EXTEND16_S() {$/;"	m
visit_I32_EXTEND16_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32_EXTEND16_S	() { visitUnop(Opcode.I32_EXTEND16_S); }$/;"	m
visit_I32_EXTEND8_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32_EXTEND8_S() {$/;"	m
visit_I32_EXTEND8_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32_EXTEND8_S		() { visitUnop(Opcode.I32_EXTEND8_S); }$/;"	m
visit_I32_GE_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32_GE_S() { void(tryFold_ii_z(V3Eval.I32_GE_S) || visitCompareI(asm.d, C.GE)); }$/;"	m
visit_I32_GE_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32_GE_S		() { visitCompare(Opcode.I32_GE_S); }$/;"	m
visit_I32_GE_U	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32_GE_U() { void(tryFold_uu_z(V3Eval.I32_GE_U) || visitCompareI(asm.d, C.NC)); }$/;"	m
visit_I32_GE_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32_GE_U		() { visitCompare(Opcode.I32_GE_U); }$/;"	m
visit_I32_GT_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32_GT_S() { void(tryFold_ii_z(V3Eval.I32_GT_S) || visitCompareI(asm.d, C.G)); }$/;"	m
visit_I32_GT_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32_GT_S		() { visitCompare(Opcode.I32_GT_S); }$/;"	m
visit_I32_GT_U	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32_GT_U() { void(tryFold_uu_z(V3Eval.I32_GT_U) || visitCompareI(asm.d, C.A)); }$/;"	m
visit_I32_GT_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32_GT_U		() { visitCompare(Opcode.I32_GT_U); }$/;"	m
visit_I32_LE_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32_LE_S() { void(tryFold_ii_z(V3Eval.I32_LE_S) || visitCompareI(asm.d, C.LE)); }$/;"	m
visit_I32_LE_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32_LE_S		() { visitCompare(Opcode.I32_LE_S); }$/;"	m
visit_I32_LE_U	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32_LE_U() { void(tryFold_uu_z(V3Eval.I32_LE_U) || visitCompareI(asm.d, C.NA)); }$/;"	m
visit_I32_LE_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32_LE_U		() { visitCompare(Opcode.I32_LE_U); }$/;"	m
visit_I32_LOAD	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_I32_LOAD(imm: MemArg) { emitLoad(ValueKind.I32, imm, masm.emit_load_r_r_r_i); }$/;"	m
visit_I32_LOAD	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32_LOAD		(imm: MemArg) { visitLoad(Opcode.I32_LOAD, imm, 4); }$/;"	m
visit_I32_LOAD16_S	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_I32_LOAD16_S(imm: MemArg) { emitLoad(ValueKind.I32, imm, masm.emit_loadwsx_r_r_r_i); }$/;"	m
visit_I32_LOAD16_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32_LOAD16_S		(imm: MemArg) { visitLoad(Opcode.I32_LOAD16_S, imm, 2); }$/;"	m
visit_I32_LOAD16_U	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_I32_LOAD16_U(imm: MemArg) { emitLoad(ValueKind.I32, imm, masm.emit_loadwzx_r_r_r_i); }$/;"	m
visit_I32_LOAD16_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32_LOAD16_U		(imm: MemArg) { visitLoad(Opcode.I32_LOAD16_U, imm, 2); }$/;"	m
visit_I32_LOAD8_S	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_I32_LOAD8_S(imm: MemArg) { emitLoad(ValueKind.I32, imm, masm.emit_loadbsx_r_r_r_i); }$/;"	m
visit_I32_LOAD8_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32_LOAD8_S		(imm: MemArg) { visitLoad(Opcode.I32_LOAD8_S, imm, 1); }$/;"	m
visit_I32_LOAD8_U	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_I32_LOAD8_U(imm: MemArg) { emitLoad(ValueKind.I32, imm, masm.emit_loadbzx_r_r_r_i); }$/;"	m
visit_I32_LOAD8_U	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^	def visit_I32_LOAD8_U(imm: MemArg) {$/;"	m
visit_I32_LOAD8_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32_LOAD8_U		(imm: MemArg) { visitLoad(Opcode.I32_LOAD8_U, imm, 1); }$/;"	m
visit_I32_LT_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32_LT_S() { void(tryFold_ii_z(V3Eval.I32_LT_S) || visitCompareI(asm.d, C.L)); }$/;"	m
visit_I32_LT_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32_LT_S		() { visitCompare(Opcode.I32_LT_S); }$/;"	m
visit_I32_LT_U	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32_LT_U() { void(tryFold_uu_z(V3Eval.I32_LT_U) || visitCompareI(asm.d, C.C)); }$/;"	m
visit_I32_LT_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32_LT_U		() { visitCompare(Opcode.I32_LT_U); }$/;"	m
visit_I32_MUL	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32_MUL() { visitSimpleOp2_uu_u(V3Eval.I32_MUL, asm.d.imul_r_i, asm.d.imul_r_m, asm.d.imul_r_r); }$/;"	m
visit_I32_MUL	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32_MUL		() { visitBinop(Opcode.I32_MUL); }$/;"	m
visit_I32_NE	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32_NE()   { void(tryFold_uu_z(V3Eval.I32_NE)   || visitCompareI(asm.d, C.NZ)); }$/;"	m
visit_I32_NE	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32_NE		() { visitCompare(Opcode.I32_NE); }$/;"	m
visit_I32_OR	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32_OR()  { visitSimpleOp2_uu_u(V3Eval.I32_OR, asm.d.or_r_i, asm.d.or_r_m, asm.d.or_r_r); }$/;"	m
visit_I32_OR	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32_OR		() { visitBinop(Opcode.I32_OR); }$/;"	m
visit_I32_POPCNT	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32_POPCNT() {$/;"	m
visit_I32_POPCNT	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32_POPCNT		() { visitUnop(Opcode.I32_POPCNT); }$/;"	m
visit_I32_REINTERPRET_F32	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32_REINTERPRET_F32() { visitReinterpret(ValueKind.I32); }$/;"	m
visit_I32_REINTERPRET_F32	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32_REINTERPRET_F32	() { visitConvert(Opcode.I32_REINTERPRET_F32); }$/;"	m
visit_I32_REM_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32_REM_S() { visitIDivRem(X86_64MasmRegs.RDX, mmasm.emit_i32_rem_s); }$/;"	m
visit_I32_REM_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32_REM_S		() { visitBinop(Opcode.I32_REM_S); }$/;"	m
visit_I32_REM_U	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32_REM_U() { visitIDivRem(X86_64MasmRegs.RDX, mmasm.emit_i32_rem_u); }$/;"	m
visit_I32_REM_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32_REM_U		() { visitBinop(Opcode.I32_REM_U); }$/;"	m
visit_I32_ROTL	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32_ROTL()  { void(tryFold_uu_u(V3Eval.I32_ROTL) || visitShift(ValueKind.I32, asm.d.rol_r_i, asm.d.rol_r_cl)); }$/;"	m
visit_I32_ROTL	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32_ROTL		() { visitBinop(Opcode.I32_ROTL); }$/;"	m
visit_I32_ROTR	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32_ROTR()  { void(tryFold_uu_u(V3Eval.I32_ROTR) || visitShift(ValueKind.I32, asm.d.ror_r_i, asm.d.ror_r_cl)); }$/;"	m
visit_I32_ROTR	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32_ROTR		() { visitBinop(Opcode.I32_ROTR); }$/;"	m
visit_I32_SHL	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32_SHL()   { void(tryFold_ii_i(V3Eval.I32_SHL) || visitShift(ValueKind.I32, asm.d.shl_r_i, asm.d.shl_r_cl)); }$/;"	m
visit_I32_SHL	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32_SHL		() { visitBinop(Opcode.I32_SHL); }$/;"	m
visit_I32_SHR_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32_SHR_S() { void(tryFold_ii_i(V3Eval.I32_SHR_S) || visitShift(ValueKind.I32, asm.d.sar_r_i, asm.d.sar_r_cl)); }$/;"	m
visit_I32_SHR_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32_SHR_S		() { visitBinop(Opcode.I32_SHR_S); }$/;"	m
visit_I32_SHR_U	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32_SHR_U() { void(tryFold_ii_i(V3Eval.I32_SHR_U) || visitShift(ValueKind.I32, asm.d.shr_r_i, asm.d.shr_r_cl)); }$/;"	m
visit_I32_SHR_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32_SHR_U		() { visitBinop(Opcode.I32_SHR_U); }$/;"	m
visit_I32_STORE	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_I32_STORE(imm: MemArg) { emitStore(ValueKind.I32, imm, masm.emit_store_r_r_r_i); }$/;"	m
visit_I32_STORE	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32_STORE		(imm: MemArg) { visitStore(Opcode.I32_STORE, imm, 4); }$/;"	m
visit_I32_STORE16	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_I32_STORE16(imm: MemArg) { emitStore(ValueKind.I32, imm, masm.emit_storew_r_r_r_i); }$/;"	m
visit_I32_STORE16	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32_STORE16		(imm: MemArg) { visitStore(Opcode.I32_STORE16, imm, 2); }$/;"	m
visit_I32_STORE8	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_I32_STORE8(imm: MemArg) { emitStore(ValueKind.I32, imm, masm.emit_storeb_r_r_r_i); }$/;"	m
visit_I32_STORE8	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32_STORE8		(imm: MemArg) { visitStore(Opcode.I32_STORE8, imm, 1); }$/;"	m
visit_I32_SUB	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32_SUB() { visitSimpleOp2_uu_u(V3Eval.I32_SUB, asm.d.sub_r_i, asm.d.sub_r_m, asm.d.sub_r_r); }$/;"	m
visit_I32_SUB	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32_SUB		() { visitBinop(Opcode.I32_SUB); }$/;"	m
visit_I32_TRUNC_F32_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32_TRUNC_F32_S() { visitITruncF(Opcode.I32_TRUNC_F32_S); }$/;"	m
visit_I32_TRUNC_F32_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32_TRUNC_F32_S	() { visitConvert(Opcode.I32_TRUNC_F32_S); }$/;"	m
visit_I32_TRUNC_F32_U	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32_TRUNC_F32_U() { visitITruncF(Opcode.I32_TRUNC_F32_U); }$/;"	m
visit_I32_TRUNC_F32_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32_TRUNC_F32_U	() { visitConvert(Opcode.I32_TRUNC_F32_U); }$/;"	m
visit_I32_TRUNC_F64_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32_TRUNC_F64_S() { visitITruncF(Opcode.I32_TRUNC_F64_S); }$/;"	m
visit_I32_TRUNC_F64_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32_TRUNC_F64_S	() { visitConvert(Opcode.I32_TRUNC_F64_S); }$/;"	m
visit_I32_TRUNC_F64_U	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32_TRUNC_F64_U() { visitITruncF(Opcode.I32_TRUNC_F64_U); }$/;"	m
visit_I32_TRUNC_F64_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32_TRUNC_F64_U	() { visitConvert(Opcode.I32_TRUNC_F64_U); }$/;"	m
visit_I32_TRUNC_SAT_F32_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32_TRUNC_SAT_F32_S() { visitITruncF(Opcode.I32_TRUNC_SAT_F32_S); }$/;"	m
visit_I32_TRUNC_SAT_F32_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32_TRUNC_SAT_F32_S	() { visitConvert(Opcode.I32_TRUNC_SAT_F32_S); }$/;"	m
visit_I32_TRUNC_SAT_F32_U	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32_TRUNC_SAT_F32_U() { visitITruncF(Opcode.I32_TRUNC_SAT_F32_U); }$/;"	m
visit_I32_TRUNC_SAT_F32_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32_TRUNC_SAT_F32_U	() { visitConvert(Opcode.I32_TRUNC_SAT_F32_U); }$/;"	m
visit_I32_TRUNC_SAT_F64_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32_TRUNC_SAT_F64_S() { visitITruncF(Opcode.I32_TRUNC_SAT_F64_S); }$/;"	m
visit_I32_TRUNC_SAT_F64_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32_TRUNC_SAT_F64_S	() { visitConvert(Opcode.I32_TRUNC_SAT_F64_S); }$/;"	m
visit_I32_TRUNC_SAT_F64_U	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32_TRUNC_SAT_F64_U() { visitITruncF(Opcode.I32_TRUNC_SAT_F64_U); }$/;"	m
visit_I32_TRUNC_SAT_F64_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32_TRUNC_SAT_F64_U	() { visitConvert(Opcode.I32_TRUNC_SAT_F64_U); }$/;"	m
visit_I32_WRAP_I64	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32_WRAP_I64() {$/;"	m
visit_I32_WRAP_I64	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32_WRAP_I64		() { visitConvert(Opcode.I32_WRAP_I64); }$/;"	m
visit_I32_XOR	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I32_XOR() { visitSimpleOp2_uu_u(V3Eval.I32_XOR, asm.d.xor_r_i, asm.d.xor_r_m, asm.d.xor_r_r); }$/;"	m
visit_I32_XOR	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I32_XOR		() { visitBinop(Opcode.I32_XOR); }$/;"	m
visit_I64X2_ABS	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I64X2_ABS() { do_op1_x_xtmp(ValueKind.V128, mmasm.emit_i64x2_abs); }$/;"	m
visit_I64X2_ABS	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64X2_ABS			() { visitSimd(Opcode.I64X2_ABS); }$/;"	m
visit_I64X2_ADD	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I64X2_ADD() { do_op2_x_x(ValueKind.V128, asm.paddq_s_s); }$/;"	m
visit_I64X2_ADD	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64X2_ADD			() { visitSimd(Opcode.I64X2_ADD); }$/;"	m
visit_I64X2_ALLTRUE	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I64X2_ALLTRUE() { do_op1_r_x(ValueKind.I32, mmasm.emit_i64x2_alltrue(_, _, X(allocTmp(ValueKind.V128)))); }$/;"	m
visit_I64X2_ALLTRUE	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64X2_ALLTRUE			() { visitSimd(Opcode.I64X2_ALLTRUE); }$/;"	m
visit_I64X2_BITMASK	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I64X2_BITMASK() { do_op1_r_x(ValueKind.I32, asm.movmskpd_r_s); }$/;"	m
visit_I64X2_BITMASK	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64X2_BITMASK			() { visitSimd(Opcode.I64X2_BITMASK); }$/;"	m
visit_I64X2_EQ	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I64X2_EQ() { do_op2_x_x(ValueKind.V128, asm.pcmpeqq_s_s); }$/;"	m
visit_I64X2_EQ	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64X2_EQ			() { visitSimd(Opcode.I64X2_EQ); }$/;"	m
visit_I64X2_EXTEND_HIGH_I32X4_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I64X2_EXTEND_HIGH_I32X4_S() { do_op1_x(ValueKind.V128, mmasm.emit_i64x2_s_convert_i32x4_high); }$/;"	m
visit_I64X2_EXTEND_HIGH_I32X4_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64X2_EXTEND_HIGH_I32X4_S	() { visitSimd(Opcode.I64X2_EXTEND_HIGH_I32X4_S); }$/;"	m
visit_I64X2_EXTEND_HIGH_I32X4_U	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I64X2_EXTEND_HIGH_I32X4_U() { do_op1_x_xtmp(ValueKind.V128, mmasm.emit_i64x2_u_convert_i32x4_high); }$/;"	m
visit_I64X2_EXTEND_HIGH_I32X4_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64X2_EXTEND_HIGH_I32X4_U	() { visitSimd(Opcode.I64X2_EXTEND_HIGH_I32X4_U); }$/;"	m
visit_I64X2_EXTEND_LOW_I32X4_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I64X2_EXTEND_LOW_I32X4_S() { do_op1_x_x(ValueKind.V128, asm.pmovsxdq_s_s); }$/;"	m
visit_I64X2_EXTEND_LOW_I32X4_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64X2_EXTEND_LOW_I32X4_S	() { visitSimd(Opcode.I64X2_EXTEND_LOW_I32X4_S); }$/;"	m
visit_I64X2_EXTEND_LOW_I32X4_U	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I64X2_EXTEND_LOW_I32X4_U() { do_op1_x_x(ValueKind.V128, asm.pmovzxdq_s_s); }$/;"	m
visit_I64X2_EXTEND_LOW_I32X4_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64X2_EXTEND_LOW_I32X4_U	() { visitSimd(Opcode.I64X2_EXTEND_LOW_I32X4_U); }$/;"	m
visit_I64X2_EXTMUL_HIGH_I32X4_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I64X2_EXTMUL_HIGH_I32X4_S() { visit_V128_EXTMUL1(ValueKind.V128, mmasm.emit_i64x2_extmul, false, true); }$/;"	m
visit_I64X2_EXTMUL_HIGH_I32X4_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64X2_EXTMUL_HIGH_I32X4_S	() { visitSimd(Opcode.I64X2_EXTMUL_HIGH_I32X4_S); }$/;"	m
visit_I64X2_EXTMUL_HIGH_I32X4_U	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I64X2_EXTMUL_HIGH_I32X4_U() { visit_V128_EXTMUL1(ValueKind.V128, mmasm.emit_i64x2_extmul, false, false); }$/;"	m
visit_I64X2_EXTMUL_HIGH_I32X4_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64X2_EXTMUL_HIGH_I32X4_U	() { visitSimd(Opcode.I64X2_EXTMUL_HIGH_I32X4_U); }$/;"	m
visit_I64X2_EXTMUL_LOW_I32X4_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I64X2_EXTMUL_LOW_I32X4_S() { visit_V128_EXTMUL1(ValueKind.V128, mmasm.emit_i64x2_extmul, true, true); }$/;"	m
visit_I64X2_EXTMUL_LOW_I32X4_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64X2_EXTMUL_LOW_I32X4_S	() { visitSimd(Opcode.I64X2_EXTMUL_LOW_I32X4_S); }$/;"	m
visit_I64X2_EXTMUL_LOW_I32X4_U	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I64X2_EXTMUL_LOW_I32X4_U() { visit_V128_EXTMUL1(ValueKind.V128, mmasm.emit_i64x2_extmul, true, false); }$/;"	m
visit_I64X2_EXTMUL_LOW_I32X4_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64X2_EXTMUL_LOW_I32X4_U	() { visitSimd(Opcode.I64X2_EXTMUL_LOW_I32X4_U); }$/;"	m
visit_I64X2_EXTRACT_LANE	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I64X2_EXTRACT_LANE(lane: byte) { visit_V128_EXTRACT_LANE(ValueKind.I64, lane, asm.pextrq_r_s_i); }$/;"	m
visit_I64X2_EXTRACT_LANE	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64X2_EXTRACT_LANE		(lane_index: u8) { visitSimd(Opcode.I64X2_EXTRACT_LANE); }$/;"	m
visit_I64X2_GE_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I64X2_GE_S() { do_op2_x_x_xtmp(ValueKind.V128, mmasm.emit_i64x2_ge_s); }$/;"	m
visit_I64X2_GE_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64X2_GE_S			() { visitSimd(Opcode.I64X2_GE_S); }$/;"	m
visit_I64X2_GT_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I64X2_GT_S() { do_op2_x_x(ValueKind.V128, asm.pcmpgtq_s_s); }$/;"	m
visit_I64X2_GT_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64X2_GT_S			() { visitSimd(Opcode.I64X2_GT_S); }$/;"	m
visit_I64X2_LE_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I64X2_LE_S() { do_c_op2_x_x_xtmp(ValueKind.V128, mmasm.emit_i64x2_ge_s); }$/;"	m
visit_I64X2_LE_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64X2_LE_S			() { visitSimd(Opcode.I64X2_LE_S); }$/;"	m
visit_I64X2_LT_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I64X2_LT_S() { do_c_op2_x_x(ValueKind.V128, asm.pcmpgtq_s_s); }$/;"	m
visit_I64X2_LT_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64X2_LT_S			() { visitSimd(Opcode.I64X2_LT_S); }$/;"	m
visit_I64X2_MUL	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I64X2_MUL() { do_op2_x_x(ValueKind.V128, mmasm.emit_i64x2_mul(_, _, X(allocTmp(ValueKind.V128)), X(allocTmp(ValueKind.V128)))); }$/;"	m
visit_I64X2_MUL	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64X2_MUL			() { visitSimd(Opcode.I64X2_MUL); }$/;"	m
visit_I64X2_NE	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I64X2_NE() { do_op2_x_x(ValueKind.V128, mmasm.emit_i64x2_ne); }$/;"	m
visit_I64X2_NE	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64X2_NE			() { visitSimd(Opcode.I64X2_NE); }$/;"	m
visit_I64X2_NEG	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I64X2_NEG() { do_op1_x_xtmp(ValueKind.V128, mmasm.emit_i64x2_neg); }$/;"	m
visit_I64X2_NEG	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64X2_NEG			() { visitSimd(Opcode.I64X2_NEG); }$/;"	m
visit_I64X2_RELAXED_LANESELECT	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_I64X2_RELAXED_LANESELECT() { visit_V128_BITSELECT(); }$/;"	m
visit_I64X2_RELAXED_LANESELECT	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64X2_RELAXED_LANESELECT		() { visitRelaxedSimd(Opcode.I64X2_RELAXED_LANESELECT); }$/;"	m
visit_I64X2_REPLACE_LANE	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I64X2_REPLACE_LANE(lane: byte) { visit_V128_REPLACE_LANE(lane, asm.pinsrq_s_r_i); }$/;"	m
visit_I64X2_REPLACE_LANE	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64X2_REPLACE_LANE		(lane_index: u8) { visitSimd(Opcode.I64X2_REPLACE_LANE); }$/;"	m
visit_I64X2_SHL	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I64X2_SHL() { visit_V128_SHIFT2(6, asm.psllq_s_s); }$/;"	m
visit_I64X2_SHL	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64X2_SHL			() { visitSimd(Opcode.I64X2_SHL); }$/;"	m
visit_I64X2_SHR_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I64X2_SHR_S() { visit_V128_SHIFT1(mmasm.emit_i64x2_shr_s); }$/;"	m
visit_I64X2_SHR_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64X2_SHR_S			() { visitSimd(Opcode.I64X2_SHR_S); }$/;"	m
visit_I64X2_SHR_U	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I64X2_SHR_U() { visit_V128_SHIFT2(6, asm.psrlq_s_s); }$/;"	m
visit_I64X2_SHR_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64X2_SHR_U			() { visitSimd(Opcode.I64X2_SHR_U); }$/;"	m
visit_I64X2_SPLAT	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I64X2_SPLAT() { visit_V128_SPLAT_I(mmasm.emit_i64x2_splat); }$/;"	m
visit_I64X2_SPLAT	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64X2_SPLAT			() { visitSimd(Opcode.I64X2_SPLAT); }$/;"	m
visit_I64X2_SUB	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I64X2_SUB() { do_op2_x_x(ValueKind.V128, asm.psubq_s_s); }$/;"	m
visit_I64X2_SUB	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64X2_SUB			() { visitSimd(Opcode.I64X2_SUB); }$/;"	m
visit_I64_ADD	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I64_ADD() { visitSimpleOp2_ww_w(V3Eval.I64_ADD, asm.q.add_r_i, asm.q.add_r_m, asm.q.add_r_r); }$/;"	m
visit_I64_ADD	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_ADD		() { visitBinop(Opcode.I64_ADD); }$/;"	m
visit_I64_AND	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I64_AND() { visitSimpleOp2_ww_w(V3Eval.I64_AND, asm.q.and_r_i, asm.q.and_r_m, asm.q.and_r_r); }$/;"	m
visit_I64_AND	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_AND		() { visitBinop(Opcode.I64_AND); }$/;"	m
visit_I64_ATOMIC_LOAD	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_ATOMIC_LOAD		(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_LOAD, imm); }$/;"	m
visit_I64_ATOMIC_LOAD16_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_ATOMIC_LOAD16_U		(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_LOAD16_U, imm); }$/;"	m
visit_I64_ATOMIC_LOAD32_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_ATOMIC_LOAD32_U		(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_LOAD32_U, imm); }$/;"	m
visit_I64_ATOMIC_LOAD8_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_ATOMIC_LOAD8_U		(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_LOAD8_U, imm); }$/;"	m
visit_I64_ATOMIC_RMW16_ADD_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_ATOMIC_RMW16_ADD_U	(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_RMW16_ADD_U, imm); }$/;"	m
visit_I64_ATOMIC_RMW16_AND_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_ATOMIC_RMW16_AND_U	(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_RMW16_AND_U, imm); }$/;"	m
visit_I64_ATOMIC_RMW16_CMPXCHG_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_ATOMIC_RMW16_CMPXCHG_U	(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_RMW16_CMPXCHG_U, imm); }$/;"	m
visit_I64_ATOMIC_RMW16_OR_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_ATOMIC_RMW16_OR_U		(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_RMW16_OR_U, imm); }$/;"	m
visit_I64_ATOMIC_RMW16_SUB_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_ATOMIC_RMW16_SUB_U	(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_RMW16_SUB_U, imm); }$/;"	m
visit_I64_ATOMIC_RMW16_XCHG_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_ATOMIC_RMW16_XCHG_U	(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_RMW16_XCHG_U, imm); }$/;"	m
visit_I64_ATOMIC_RMW16_XOR_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_ATOMIC_RMW16_XOR_U	(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_RMW16_XOR_U, imm); }$/;"	m
visit_I64_ATOMIC_RMW32_ADD_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_ATOMIC_RMW32_ADD_U	(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_RMW32_ADD_U, imm); }$/;"	m
visit_I64_ATOMIC_RMW32_AND_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_ATOMIC_RMW32_AND_U	(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_RMW32_AND_U, imm); }$/;"	m
visit_I64_ATOMIC_RMW32_CMPXCHG_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_ATOMIC_RMW32_CMPXCHG_U	(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_RMW32_CMPXCHG_U, imm); }$/;"	m
visit_I64_ATOMIC_RMW32_OR_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_ATOMIC_RMW32_OR_U		(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_RMW32_OR_U, imm); }$/;"	m
visit_I64_ATOMIC_RMW32_SUB_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_ATOMIC_RMW32_SUB_U	(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_RMW32_SUB_U, imm); }$/;"	m
visit_I64_ATOMIC_RMW32_XCHG_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_ATOMIC_RMW32_XCHG_U	(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_RMW32_XCHG_U, imm); }$/;"	m
visit_I64_ATOMIC_RMW32_XOR_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_ATOMIC_RMW32_XOR_U	(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_RMW32_XOR_U, imm); }$/;"	m
visit_I64_ATOMIC_RMW8_ADD_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_ATOMIC_RMW8_ADD_U		(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_RMW8_ADD_U, imm); }$/;"	m
visit_I64_ATOMIC_RMW8_AND_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_ATOMIC_RMW8_AND_U		(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_RMW8_AND_U, imm); }$/;"	m
visit_I64_ATOMIC_RMW8_CMPXCHG_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_ATOMIC_RMW8_CMPXCHG_U	(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_RMW8_CMPXCHG_U, imm); }$/;"	m
visit_I64_ATOMIC_RMW8_OR_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_ATOMIC_RMW8_OR_U		(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_RMW8_OR_U, imm); }$/;"	m
visit_I64_ATOMIC_RMW8_SUB_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_ATOMIC_RMW8_SUB_U		(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_RMW8_SUB_U, imm); }$/;"	m
visit_I64_ATOMIC_RMW8_XCHG_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_ATOMIC_RMW8_XCHG_U	(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_RMW8_XCHG_U, imm); }$/;"	m
visit_I64_ATOMIC_RMW8_XOR_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_ATOMIC_RMW8_XOR_U		(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_RMW8_XOR_U, imm); }$/;"	m
visit_I64_ATOMIC_RMW_ADD	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_ATOMIC_RMW_ADD		(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_RMW_ADD, imm); }$/;"	m
visit_I64_ATOMIC_RMW_AND	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_ATOMIC_RMW_AND		(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_RMW_AND, imm); }$/;"	m
visit_I64_ATOMIC_RMW_CMPXCHG	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_ATOMIC_RMW_CMPXCHG	(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_RMW_CMPXCHG, imm); }$/;"	m
visit_I64_ATOMIC_RMW_OR	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_ATOMIC_RMW_OR		(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_RMW_OR, imm); }$/;"	m
visit_I64_ATOMIC_RMW_SUB	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_ATOMIC_RMW_SUB		(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_RMW_SUB, imm); }$/;"	m
visit_I64_ATOMIC_RMW_XCHG	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_ATOMIC_RMW_XCHG		(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_RMW_XCHG, imm); }$/;"	m
visit_I64_ATOMIC_RMW_XOR	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_ATOMIC_RMW_XOR		(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_RMW_XOR, imm); }$/;"	m
visit_I64_ATOMIC_STORE	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_ATOMIC_STORE		(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_STORE, imm); }$/;"	m
visit_I64_ATOMIC_STORE16	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_ATOMIC_STORE16		(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_STORE16, imm); }$/;"	m
visit_I64_ATOMIC_STORE32	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_ATOMIC_STORE32		(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_STORE32, imm); }$/;"	m
visit_I64_ATOMIC_STORE8	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_ATOMIC_STORE8		(imm: MemArg) 	{ visitAtomic(Opcode.I64_ATOMIC_STORE8, imm); }$/;"	m
visit_I64_CLZ	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I64_CLZ() {$/;"	m
visit_I64_CLZ	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_CLZ		() { visitUnop(Opcode.I64_CLZ); }$/;"	m
visit_I64_CONST	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_I64_CONST(val: i64) {$/;"	m
visit_I64_CONST	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_CONST		(val: i64) { visitConst(Opcode.I64_CONST); }$/;"	m
visit_I64_CTZ	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I64_CTZ() {$/;"	m
visit_I64_CTZ	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_CTZ		() { visitUnop(Opcode.I64_CTZ); }$/;"	m
visit_I64_DIV_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I64_DIV_S() { visitIDivRem(X86_64MasmRegs.RAX, mmasm.emit_i64_div_s); }$/;"	m
visit_I64_DIV_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_DIV_S		() { visitBinop(Opcode.I64_DIV_S); }$/;"	m
visit_I64_DIV_U	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I64_DIV_U() { visitIDivRem(X86_64MasmRegs.RAX, mmasm.emit_i64_div_u); }$/;"	m
visit_I64_DIV_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_DIV_U		() { visitBinop(Opcode.I64_DIV_U); }$/;"	m
visit_I64_EQ	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I64_EQ()   { void(tryFold_qq_z(V3Eval.I64_EQ)   || visitCompareI(asm.q, C.Z)); }$/;"	m
visit_I64_EQ	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_EQ		() { visitCompare(Opcode.I64_EQ); }$/;"	m
visit_I64_EQZ	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I64_EQZ() {$/;"	m
visit_I64_EQZ	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_EQZ		() { visitCompare(Opcode.I64_EQZ); }$/;"	m
visit_I64_EXTEND16_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I64_EXTEND16_S() {$/;"	m
visit_I64_EXTEND16_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_EXTEND16_S	() { visitUnop(Opcode.I64_EXTEND16_S); }$/;"	m
visit_I64_EXTEND32_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I64_EXTEND32_S() {$/;"	m
visit_I64_EXTEND32_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_EXTEND32_S	() { visitUnop(Opcode.I64_EXTEND32_S); }$/;"	m
visit_I64_EXTEND8_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I64_EXTEND8_S() {$/;"	m
visit_I64_EXTEND8_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_EXTEND8_S		() { visitUnop(Opcode.I64_EXTEND8_S); }$/;"	m
visit_I64_EXTEND_I32_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I64_EXTEND_I32_S() {$/;"	m
visit_I64_EXTEND_I32_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_EXTEND_I32_S	() { visitConvert(Opcode.I64_EXTEND_I32_S); }$/;"	m
visit_I64_EXTEND_I32_U	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I64_EXTEND_I32_U() {$/;"	m
visit_I64_EXTEND_I32_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_EXTEND_I32_U	() { visitConvert(Opcode.I64_EXTEND_I32_U); }$/;"	m
visit_I64_GE_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I64_GE_S() { void(tryFold_ll_z(V3Eval.I64_GE_S) || visitCompareI(asm.q, C.GE)); }$/;"	m
visit_I64_GE_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_GE_S		() { visitCompare(Opcode.I64_GE_S); }$/;"	m
visit_I64_GE_U	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I64_GE_U() { void(tryFold_qq_z(V3Eval.I64_GE_U) || visitCompareI(asm.q, C.NC)); }$/;"	m
visit_I64_GE_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_GE_U		() { visitCompare(Opcode.I64_GE_U); }$/;"	m
visit_I64_GT_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I64_GT_S() { void(tryFold_ll_z(V3Eval.I64_GT_S) || visitCompareI(asm.q, C.G)); }$/;"	m
visit_I64_GT_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_GT_S		() { visitCompare(Opcode.I64_GT_S); }$/;"	m
visit_I64_GT_U	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I64_GT_U() { void(tryFold_qq_z(V3Eval.I64_GT_U) || visitCompareI(asm.q, C.A)); }$/;"	m
visit_I64_GT_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_GT_U		() { visitCompare(Opcode.I64_GT_U); }$/;"	m
visit_I64_LE_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I64_LE_S() { void(tryFold_ll_z(V3Eval.I64_LE_S) || visitCompareI(asm.q, C.LE)); }$/;"	m
visit_I64_LE_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_LE_S		() { visitCompare(Opcode.I64_LE_S); }$/;"	m
visit_I64_LE_U	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I64_LE_U() { void(tryFold_qq_z(V3Eval.I64_LE_U) || visitCompareI(asm.q, C.NA)); }$/;"	m
visit_I64_LE_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_LE_U		() { visitCompare(Opcode.I64_LE_U); }$/;"	m
visit_I64_LOAD	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_I64_LOAD(imm: MemArg) { emitLoad(ValueKind.I64, imm, masm.emit_load_r_r_r_i); }$/;"	m
visit_I64_LOAD	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_LOAD		(imm: MemArg) { visitLoad(Opcode.I64_LOAD, imm, 8); }$/;"	m
visit_I64_LOAD16_S	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_I64_LOAD16_S(imm: MemArg) { emitLoad(ValueKind.I64, imm, masm.emit_loadwsx_r_r_r_i); }$/;"	m
visit_I64_LOAD16_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_LOAD16_S		(imm: MemArg) { visitLoad(Opcode.I64_LOAD16_S, imm, 2); }$/;"	m
visit_I64_LOAD16_U	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_I64_LOAD16_U(imm: MemArg) { emitLoad(ValueKind.I64, imm, masm.emit_loadwzx_r_r_r_i); }$/;"	m
visit_I64_LOAD16_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_LOAD16_U		(imm: MemArg) { visitLoad(Opcode.I64_LOAD16_U, imm, 2); }$/;"	m
visit_I64_LOAD32_S	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_I64_LOAD32_S(imm: MemArg) { emitLoad(ValueKind.I64, imm, masm.emit_loaddsx_r_r_r_i); }$/;"	m
visit_I64_LOAD32_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_LOAD32_S		(imm: MemArg) { visitLoad(Opcode.I64_LOAD32_S, imm, 4); }$/;"	m
visit_I64_LOAD32_U	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_I64_LOAD32_U(imm: MemArg) { emitLoad(ValueKind.I64, imm, masm.emit_loaddzx_r_r_r_i); }$/;"	m
visit_I64_LOAD32_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_LOAD32_U		(imm: MemArg) { visitLoad(Opcode.I64_LOAD32_U, imm, 4); }$/;"	m
visit_I64_LOAD8_S	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_I64_LOAD8_S(imm: MemArg) { emitLoad(ValueKind.I64, imm, masm.emit_loadbsx_r_r_r_i); }$/;"	m
visit_I64_LOAD8_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_LOAD8_S		(imm: MemArg) { visitLoad(Opcode.I64_LOAD8_S, imm, 1); }$/;"	m
visit_I64_LOAD8_U	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_I64_LOAD8_U(imm: MemArg) { emitLoad(ValueKind.I64, imm, masm.emit_loadbzx_r_r_r_i); }$/;"	m
visit_I64_LOAD8_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_LOAD8_U		(imm: MemArg) { visitLoad(Opcode.I64_LOAD8_U, imm, 1); }$/;"	m
visit_I64_LT_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I64_LT_S() { void(tryFold_ll_z(V3Eval.I64_LT_S) || visitCompareI(asm.q, C.L)); }$/;"	m
visit_I64_LT_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_LT_S		() { visitCompare(Opcode.I64_LT_S); }$/;"	m
visit_I64_LT_U	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I64_LT_U() { void(tryFold_qq_z(V3Eval.I64_LT_U) || visitCompareI(asm.q, C.C)); }$/;"	m
visit_I64_LT_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_LT_U		() { visitCompare(Opcode.I64_LT_U); }$/;"	m
visit_I64_MUL	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I64_MUL() { visitSimpleOp2_ww_w(V3Eval.I64_MUL, asm.q.imul_r_i, asm.q.imul_r_m, asm.q.imul_r_r); }$/;"	m
visit_I64_MUL	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_MUL		() { visitBinop(Opcode.I64_MUL); }$/;"	m
visit_I64_NE	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I64_NE()   { void(tryFold_qq_z(V3Eval.I64_NE)   || visitCompareI(asm.q, C.NZ)); }$/;"	m
visit_I64_NE	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_NE		() { visitCompare(Opcode.I64_NE); }$/;"	m
visit_I64_OR	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I64_OR()  { visitSimpleOp2_ww_w(V3Eval.I64_OR, asm.q.or_r_i, asm.q.or_r_m, asm.q.or_r_r); }$/;"	m
visit_I64_OR	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_OR		() { visitBinop(Opcode.I64_OR); }$/;"	m
visit_I64_POPCNT	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I64_POPCNT() {$/;"	m
visit_I64_POPCNT	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_POPCNT		() { visitUnop(Opcode.I64_POPCNT); }$/;"	m
visit_I64_REINTERPRET_F64	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I64_REINTERPRET_F64() { visitReinterpret(ValueKind.I64); }$/;"	m
visit_I64_REINTERPRET_F64	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_REINTERPRET_F64	() { visitConvert(Opcode.I64_REINTERPRET_F64); }$/;"	m
visit_I64_REM_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I64_REM_S() { visitIDivRem(X86_64MasmRegs.RDX, mmasm.emit_i64_rem_s); }$/;"	m
visit_I64_REM_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_REM_S		() { visitBinop(Opcode.I64_REM_S); }$/;"	m
visit_I64_REM_U	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I64_REM_U() { visitIDivRem(X86_64MasmRegs.RDX, mmasm.emit_i64_rem_u); }$/;"	m
visit_I64_REM_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_REM_U		() { visitBinop(Opcode.I64_REM_U); }$/;"	m
visit_I64_ROTL	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I64_ROTL()  { void(tryFold_ww_w(V3Eval.I64_ROTL) || visitShift(ValueKind.I64, asm.q.rol_r_i, asm.q.rol_r_cl)); }$/;"	m
visit_I64_ROTL	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_ROTL		() { visitBinop(Opcode.I64_ROTL); }$/;"	m
visit_I64_ROTR	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I64_ROTR()  { void(tryFold_ww_w(V3Eval.I64_ROTR) || visitShift(ValueKind.I64, asm.q.ror_r_i, asm.q.ror_r_cl)); }$/;"	m
visit_I64_ROTR	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_ROTR		() { visitBinop(Opcode.I64_ROTR); }$/;"	m
visit_I64_SHL	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I64_SHL()   { void(tryFold_ww_w(V3Eval.I64_SHL) || visitShift(ValueKind.I64, asm.q.shl_r_i, asm.q.shl_r_cl)); }$/;"	m
visit_I64_SHL	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_SHL		() { visitBinop(Opcode.I64_SHL); }$/;"	m
visit_I64_SHR_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I64_SHR_S() { void(tryFold_ll_l(V3Eval.I64_SHR_S) || visitShift(ValueKind.I64, asm.q.sar_r_i, asm.q.sar_r_cl)); }$/;"	m
visit_I64_SHR_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_SHR_S		() { visitBinop(Opcode.I64_SHR_S); }$/;"	m
visit_I64_SHR_U	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I64_SHR_U() { void(tryFold_ww_w(V3Eval.I64_SHR_U) || visitShift(ValueKind.I64, asm.q.shr_r_i, asm.q.shr_r_cl)); }$/;"	m
visit_I64_SHR_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_SHR_U		() { visitBinop(Opcode.I64_SHR_U); }$/;"	m
visit_I64_STORE	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_I64_STORE(imm: MemArg) { emitStore(ValueKind.I64, imm, masm.emit_store_r_r_r_i); }$/;"	m
visit_I64_STORE	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_STORE		(imm: MemArg) { visitStore(Opcode.I64_STORE, imm, 8); }$/;"	m
visit_I64_STORE16	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_I64_STORE16(imm: MemArg) { emitStore(ValueKind.I64, imm, masm.emit_storew_r_r_r_i); }$/;"	m
visit_I64_STORE16	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_STORE16		(imm: MemArg) { visitStore(Opcode.I64_STORE16, imm, 2); }$/;"	m
visit_I64_STORE32	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_I64_STORE32(imm: MemArg) { emitStore(ValueKind.I32, imm, masm.emit_store_r_r_r_i); }$/;"	m
visit_I64_STORE32	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_STORE32		(imm: MemArg) { visitStore(Opcode.I64_STORE32, imm, 4); }$/;"	m
visit_I64_STORE8	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_I64_STORE8(imm: MemArg) { emitStore(ValueKind.I64, imm, masm.emit_storeb_r_r_r_i); }$/;"	m
visit_I64_STORE8	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_STORE8		(imm: MemArg) { visitStore(Opcode.I64_STORE8, imm, 1); }$/;"	m
visit_I64_SUB	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I64_SUB() { visitSimpleOp2_ww_w(V3Eval.I64_SUB, asm.q.sub_r_i, asm.q.sub_r_m, asm.q.sub_r_r); }$/;"	m
visit_I64_SUB	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_SUB		() { visitBinop(Opcode.I64_SUB); }$/;"	m
visit_I64_TRUNC_F32_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I64_TRUNC_F32_S() { visitITruncF(Opcode.I64_TRUNC_F32_S); }$/;"	m
visit_I64_TRUNC_F32_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_TRUNC_F32_S	() { visitConvert(Opcode.I64_TRUNC_F32_S); }$/;"	m
visit_I64_TRUNC_F32_U	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I64_TRUNC_F32_U() { visitITruncF(Opcode.I64_TRUNC_F32_U); }$/;"	m
visit_I64_TRUNC_F32_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_TRUNC_F32_U	() { visitConvert(Opcode.I64_TRUNC_F32_U); }$/;"	m
visit_I64_TRUNC_F64_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I64_TRUNC_F64_S() { visitITruncF(Opcode.I64_TRUNC_F64_S); }$/;"	m
visit_I64_TRUNC_F64_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_TRUNC_F64_S	() { visitConvert(Opcode.I64_TRUNC_F64_S); }$/;"	m
visit_I64_TRUNC_F64_U	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I64_TRUNC_F64_U() { visitITruncF(Opcode.I64_TRUNC_F64_U); }$/;"	m
visit_I64_TRUNC_F64_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_TRUNC_F64_U	() { visitConvert(Opcode.I64_TRUNC_F64_U); }$/;"	m
visit_I64_TRUNC_SAT_F32_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I64_TRUNC_SAT_F32_S() { visitITruncF(Opcode.I64_TRUNC_SAT_F32_S); }$/;"	m
visit_I64_TRUNC_SAT_F32_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_TRUNC_SAT_F32_S	() { visitConvert(Opcode.I64_TRUNC_SAT_F32_S); }$/;"	m
visit_I64_TRUNC_SAT_F32_U	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I64_TRUNC_SAT_F32_U() { visitITruncF(Opcode.I64_TRUNC_SAT_F32_U); }$/;"	m
visit_I64_TRUNC_SAT_F32_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_TRUNC_SAT_F32_U	() { visitConvert(Opcode.I64_TRUNC_SAT_F32_U); }$/;"	m
visit_I64_TRUNC_SAT_F64_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I64_TRUNC_SAT_F64_S() { visitITruncF(Opcode.I64_TRUNC_SAT_F64_S); }$/;"	m
visit_I64_TRUNC_SAT_F64_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_TRUNC_SAT_F64_S	() { visitConvert(Opcode.I64_TRUNC_SAT_F64_S); }$/;"	m
visit_I64_TRUNC_SAT_F64_U	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I64_TRUNC_SAT_F64_U() { visitITruncF(Opcode.I64_TRUNC_SAT_F64_U); }$/;"	m
visit_I64_TRUNC_SAT_F64_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_TRUNC_SAT_F64_U	() { visitConvert(Opcode.I64_TRUNC_SAT_F64_U); }$/;"	m
visit_I64_XOR	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I64_XOR() { visitSimpleOp2_ww_w(V3Eval.I64_XOR, asm.q.xor_r_i, asm.q.xor_r_m, asm.q.xor_r_r); }$/;"	m
visit_I64_XOR	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I64_XOR		() { visitBinop(Opcode.I64_XOR); }$/;"	m
visit_I8X16_ABS	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I8X16_ABS() { do_op1_x_x(ValueKind.V128, asm.pabsb_s_s); }$/;"	m
visit_I8X16_ABS	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I8X16_ABS			() { visitSimd(Opcode.I8X16_ABS); }$/;"	m
visit_I8X16_ADD	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I8X16_ADD() { do_op2_x_x(ValueKind.V128, asm.paddb_s_s); }$/;"	m
visit_I8X16_ADD	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I8X16_ADD			() { visitSimd(Opcode.I8X16_ADD); }$/;"	m
visit_I8X16_ADD_SAT_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I8X16_ADD_SAT_S() { do_op2_x_x(ValueKind.V128, asm.paddsb_s_s); }$/;"	m
visit_I8X16_ADD_SAT_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I8X16_ADD_SAT_S		() { visitSimd(Opcode.I8X16_ADD_SAT_S); }$/;"	m
visit_I8X16_ADD_SAT_U	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I8X16_ADD_SAT_U() { do_op2_x_x(ValueKind.V128, asm.paddusb_s_s); }$/;"	m
visit_I8X16_ADD_SAT_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I8X16_ADD_SAT_U		() { visitSimd(Opcode.I8X16_ADD_SAT_U); }$/;"	m
visit_I8X16_ALLTRUE	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I8X16_ALLTRUE() { do_op1_r_x(ValueKind.I32, mmasm.emit_i8x16_alltrue(_, _, X(allocTmp(ValueKind.V128)))); }$/;"	m
visit_I8X16_ALLTRUE	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I8X16_ALLTRUE			() { visitSimd(Opcode.I8X16_ALLTRUE); }$/;"	m
visit_I8X16_AVGR_U	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I8X16_AVGR_U() { do_op2_x_x(ValueKind.V128, asm.pavgb_s_s); }$/;"	m
visit_I8X16_AVGR_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I8X16_AVGR_U			() { visitSimd(Opcode.I8X16_AVGR_U); }$/;"	m
visit_I8X16_BITMASK	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I8X16_BITMASK() { do_op1_r_x(ValueKind.I32, asm.pmovmskb_r_s); }$/;"	m
visit_I8X16_BITMASK	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I8X16_BITMASK			() { visitSimd(Opcode.I8X16_BITMASK); }$/;"	m
visit_I8X16_EQ	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I8X16_EQ() { do_op2_x_x(ValueKind.V128, asm.pcmpeqb_s_s); }$/;"	m
visit_I8X16_EQ	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I8X16_EQ			() { visitSimd(Opcode.I8X16_EQ); }$/;"	m
visit_I8X16_EXTRACT_LANE_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I8X16_EXTRACT_LANE_S(lane: byte) { visit_V128_EXTRACT_LANE_S(ValueKind.I32, lane, asm.pextrb_r_s_i, asm.q.movbsx_r_r); }$/;"	m
visit_I8X16_EXTRACT_LANE_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I8X16_EXTRACT_LANE_S		(lane_index: u8) { visitSimd(Opcode.I8X16_EXTRACT_LANE_S); }$/;"	m
visit_I8X16_EXTRACT_LANE_U	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I8X16_EXTRACT_LANE_U(lane: byte) { visit_V128_EXTRACT_LANE(ValueKind.I32, lane, asm.pextrb_r_s_i); }$/;"	m
visit_I8X16_EXTRACT_LANE_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I8X16_EXTRACT_LANE_U		(lane_index: u8) { visitSimd(Opcode.I8X16_EXTRACT_LANE_U); }$/;"	m
visit_I8X16_GE_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I8X16_GE_S() { do_op2_x_x(ValueKind.V128, mmasm.emit_i8x16_ge_s); }$/;"	m
visit_I8X16_GE_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I8X16_GE_S			() { visitSimd(Opcode.I8X16_GE_S); }$/;"	m
visit_I8X16_GE_U	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I8X16_GE_U() { do_op2_x_x(ValueKind.V128, mmasm.emit_i8x16_ge_u); }$/;"	m
visit_I8X16_GE_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I8X16_GE_U			() { visitSimd(Opcode.I8X16_GE_U); }$/;"	m
visit_I8X16_GT_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I8X16_GT_S() { do_op2_x_x(ValueKind.V128, asm.pcmpgtb_s_s); }$/;"	m
visit_I8X16_GT_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I8X16_GT_S			() { visitSimd(Opcode.I8X16_GT_S); }$/;"	m
visit_I8X16_GT_U	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I8X16_GT_U() { do_op2_x_x_xtmp(ValueKind.V128, mmasm.emit_i8x16_gt_u); }$/;"	m
visit_I8X16_GT_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I8X16_GT_U			() { visitSimd(Opcode.I8X16_GT_U); }$/;"	m
visit_I8X16_LE_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I8X16_LE_S() { do_c_op2_x_x(ValueKind.V128, mmasm.emit_i8x16_ge_s); }$/;"	m
visit_I8X16_LE_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I8X16_LE_S			() { visitSimd(Opcode.I8X16_LE_S); }$/;"	m
visit_I8X16_LE_U	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I8X16_LE_U() { do_c_op2_x_x(ValueKind.V128, mmasm.emit_i8x16_ge_u); }$/;"	m
visit_I8X16_LE_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I8X16_LE_U			() { visitSimd(Opcode.I8X16_LE_U); }$/;"	m
visit_I8X16_LT_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I8X16_LT_S() { do_c_op2_x_x(ValueKind.V128, asm.pcmpgtb_s_s); }$/;"	m
visit_I8X16_LT_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I8X16_LT_S			() { visitSimd(Opcode.I8X16_LT_S); }$/;"	m
visit_I8X16_LT_U	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I8X16_LT_U() { do_c_op2_x_x_xtmp(ValueKind.V128, mmasm.emit_i8x16_gt_u); }$/;"	m
visit_I8X16_LT_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I8X16_LT_U			() { visitSimd(Opcode.I8X16_LT_U); }$/;"	m
visit_I8X16_MAX_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I8X16_MAX_S() { do_op2_x_x(ValueKind.V128, asm.pmaxsb_s_s); }$/;"	m
visit_I8X16_MAX_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I8X16_MAX_S			() { visitSimd(Opcode.I8X16_MAX_S); }$/;"	m
visit_I8X16_MAX_U	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I8X16_MAX_U() { do_op2_x_x(ValueKind.V128, asm.pmaxub_s_s); }$/;"	m
visit_I8X16_MAX_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I8X16_MAX_U			() { visitSimd(Opcode.I8X16_MAX_U); }$/;"	m
visit_I8X16_MIN_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I8X16_MIN_S() { do_op2_x_x(ValueKind.V128, asm.pminsb_s_s); }$/;"	m
visit_I8X16_MIN_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I8X16_MIN_S			() { visitSimd(Opcode.I8X16_MIN_S); }$/;"	m
visit_I8X16_MIN_U	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I8X16_MIN_U() { do_op2_x_x(ValueKind.V128, asm.pminub_s_s); }$/;"	m
visit_I8X16_MIN_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I8X16_MIN_U			() { visitSimd(Opcode.I8X16_MIN_U); }$/;"	m
visit_I8X16_NARROW_I16X8_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I8X16_NARROW_I16X8_S() { do_op2_x_x(ValueKind.V128, asm.packsswb_s_s); }$/;"	m
visit_I8X16_NARROW_I16X8_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I8X16_NARROW_I16X8_S		() { visitSimd(Opcode.I8X16_NARROW_I16X8_S); }$/;"	m
visit_I8X16_NARROW_I16X8_U	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I8X16_NARROW_I16X8_U() { do_op2_x_x(ValueKind.V128, asm.packuswb_s_s); }$/;"	m
visit_I8X16_NARROW_I16X8_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I8X16_NARROW_I16X8_U		() { visitSimd(Opcode.I8X16_NARROW_I16X8_U); }$/;"	m
visit_I8X16_NE	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I8X16_NE() { do_op2_x_x(ValueKind.V128, mmasm.emit_i8x16_ne); }$/;"	m
visit_I8X16_NE	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I8X16_NE			() { visitSimd(Opcode.I8X16_NE); }$/;"	m
visit_I8X16_NEG	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I8X16_NEG() { do_op1_x_xtmp(ValueKind.V128, mmasm.emit_i8x16_neg); }$/;"	m
visit_I8X16_NEG	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I8X16_NEG			() { visitSimd(Opcode.I8X16_NEG); }$/;"	m
visit_I8X16_POPCNT	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I8X16_POPCNT() { do_op1_x(ValueKind.V128, mmasm.emit_i8x16_popcnt(_, G(allocTmp(ValueKind.I64)), X(allocTmp(ValueKind.V128)), X(allocTmp(ValueKind.V128)), X(allocTmp(ValueKind.V128)))); }$/;"	m
visit_I8X16_POPCNT	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I8X16_POPCNT			() { visitSimd(Opcode.I8X16_POPCNT); }$/;"	m
visit_I8X16_RELAXED_LANESELECT	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_I8X16_RELAXED_LANESELECT() { visit_V128_BITSELECT(); }$/;"	m
visit_I8X16_RELAXED_LANESELECT	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I8X16_RELAXED_LANESELECT		() { visitRelaxedSimd(Opcode.I8X16_RELAXED_LANESELECT); }$/;"	m
visit_I8X16_RELAXED_SWIZZLE	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I8X16_RELAXED_SWIZZLE() { visitSwizzle(); }$/;"	m
visit_I8X16_RELAXED_SWIZZLE	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I8X16_RELAXED_SWIZZLE			() { visitRelaxedSimd(Opcode.I8X16_RELAXED_SWIZZLE); }$/;"	m
visit_I8X16_REPLACE_LANE	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I8X16_REPLACE_LANE(lane: byte) { visit_V128_REPLACE_LANE(lane, asm.pinsrb_s_r_i); }$/;"	m
visit_I8X16_REPLACE_LANE	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I8X16_REPLACE_LANE		(lane_index: u8) { visitSimd(Opcode.I8X16_REPLACE_LANE); }$/;"	m
visit_I8X16_SHL	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I8X16_SHL() { visit_V128_SHIFT1(mmasm.emit_i8x16_shl); }$/;"	m
visit_I8X16_SHL	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I8X16_SHL			() { visitSimd(Opcode.I8X16_SHL); }$/;"	m
visit_I8X16_SHR_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I8X16_SHR_S() { visit_V128_SHIFT1(mmasm.emit_i8x16_shr_s); }$/;"	m
visit_I8X16_SHR_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I8X16_SHR_S			() { visitSimd(Opcode.I8X16_SHR_S); }$/;"	m
visit_I8X16_SHR_U	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I8X16_SHR_U() { visit_V128_SHIFT1(mmasm.emit_i8x16_shr_u); }$/;"	m
visit_I8X16_SHR_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I8X16_SHR_U			() { visitSimd(Opcode.I8X16_SHR_U); }$/;"	m
visit_I8X16_SHUFFLE	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I8X16_SHUFFLE(imms: Array<byte>) {$/;"	m
visit_I8X16_SHUFFLE	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I8X16_SHUFFLE			(lane_indexes: Array<u8>) { visitSimd(Opcode.I8X16_SHUFFLE); }$/;"	m
visit_I8X16_SPLAT	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I8X16_SPLAT() { visit_V128_SPLAT_I(mmasm.emit_i8x16_splat(_, _, X(allocTmp(ValueKind.V128)))); }$/;"	m
visit_I8X16_SPLAT	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I8X16_SPLAT			() { visitSimd(Opcode.I8X16_SPLAT); }$/;"	m
visit_I8X16_SUB	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I8X16_SUB() { do_op2_x_x(ValueKind.V128, asm.psubb_s_s); }$/;"	m
visit_I8X16_SUB	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I8X16_SUB			() { visitSimd(Opcode.I8X16_SUB); }$/;"	m
visit_I8X16_SUB_SAT_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I8X16_SUB_SAT_S() { do_op2_x_x(ValueKind.V128, asm.psubsb_s_s); }$/;"	m
visit_I8X16_SUB_SAT_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I8X16_SUB_SAT_S		() { visitSimd(Opcode.I8X16_SUB_SAT_S); }$/;"	m
visit_I8X16_SUB_SAT_U	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I8X16_SUB_SAT_U() { do_op2_x_x(ValueKind.V128, asm.psubusb_s_s); }$/;"	m
visit_I8X16_SUB_SAT_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I8X16_SUB_SAT_U		() { visitSimd(Opcode.I8X16_SUB_SAT_U); }$/;"	m
visit_I8X16_SWIZZLE	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_I8X16_SWIZZLE() { visitSwizzle(); }$/;"	m
visit_I8X16_SWIZZLE	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_I8X16_SWIZZLE			() { visitSimd(Opcode.I8X16_SWIZZLE); }$/;"	m
visit_IF	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_IF(btc: BlockTypeCode) {$/;"	m
visit_IF	$VIRGIL_WIZARD/src/monitors/ControlInstrumenter.v3	/^	def visit_IF(btc: BlockTypeCode) {$/;"	m
visit_IF	$VIRGIL_WIZARD/src/monitors/LoopTraceMonitor.v3	/^	def visit_IF(btc: BlockTypeCode) {$/;"	m
visit_IF	$VIRGIL_WIZARD/src/monitors/ModuleInstrumenter.v3	/^	def visit_IF(btc: BlockTypeCode) {$/;"	m
visit_IF	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_IF		(btc: BlockTypeCode) 				{ visitControl(Opcode.IF); }$/;"	m
visit_IF	$VIRGIL_WIZARD/src/util/CfgPrinter.v3	/^	def visit_IF(btc: BlockTypeCode) {$/;"	m
visit_IF	$VIRGIL_WIZARD/src/util/ControlStack.v3	/^	def visit_IF(btc: BlockTypeCode) {$/;"	m
visit_INVALID	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_INVALID(prefix: byte, code: u32)	{ }$/;"	m
visit_LOCAL_GET	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_LOCAL_GET(index: u31) {$/;"	m
visit_LOCAL_GET	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_LOCAL_GET(local_index: u31) { visitLocal(Opcode.LOCAL_GET, local_index); }$/;"	m
visit_LOCAL_SET	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_LOCAL_SET(index: u31) {$/;"	m
visit_LOCAL_SET	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_LOCAL_SET(local_index: u31) { visitLocal(Opcode.LOCAL_SET, local_index); }$/;"	m
visit_LOCAL_TEE	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_LOCAL_TEE(index: u31) {$/;"	m
visit_LOCAL_TEE	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_LOCAL_TEE(local_index: u31) { visitLocal(Opcode.LOCAL_TEE, local_index); }$/;"	m
visit_LOOP	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_LOOP(btc: BlockTypeCode) {$/;"	m
visit_LOOP	$VIRGIL_WIZARD/src/monitors/ControlInstrumenter.v3	/^	def visit_LOOP(btc: BlockTypeCode) {$/;"	m
visit_LOOP	$VIRGIL_WIZARD/src/monitors/LoopTraceMonitor.v3	/^	def visit_LOOP(btc: BlockTypeCode) {$/;"	m
visit_LOOP	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_LOOP		(btc: BlockTypeCode)			 	{ visitControl(Opcode.LOOP); }$/;"	m
visit_LOOP	$VIRGIL_WIZARD/src/util/ControlStack.v3	/^	def visit_LOOP(btc: BlockTypeCode) {$/;"	m
visit_MEMORY_ATOMIC_NOTIFY	$VIRGIL_WIZARD/src/util/BasicTracing.v3	/^	def visit_MEMORY_ATOMIC_NOTIFY(imm: MemArg) { \/\/ TODO$/;"	m
visit_MEMORY_ATOMIC_NOTIFY	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_MEMORY_ATOMIC_NOTIFY		(imm: MemArg) 	{ visitAtomic(Opcode.MEMORY_ATOMIC_NOTIFY, imm); }$/;"	m
visit_MEMORY_ATOMIC_WAIT32	$VIRGIL_WIZARD/src/util/BasicTracing.v3	/^	def visit_MEMORY_ATOMIC_WAIT32(imm: MemArg) { \/\/ TODO$/;"	m
visit_MEMORY_ATOMIC_WAIT32	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_MEMORY_ATOMIC_WAIT32		(imm: MemArg) 	{ visitAtomic(Opcode.MEMORY_ATOMIC_WAIT32, imm); }$/;"	m
visit_MEMORY_ATOMIC_WAIT64	$VIRGIL_WIZARD/src/util/BasicTracing.v3	/^	def visit_MEMORY_ATOMIC_WAIT64(imm: MemArg) { \/\/ TODO$/;"	m
visit_MEMORY_ATOMIC_WAIT64	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_MEMORY_ATOMIC_WAIT64		(imm: MemArg) 	{ visitAtomic(Opcode.MEMORY_ATOMIC_WAIT64, imm); }$/;"	m
visit_MEMORY_COPY	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_MEMORY_COPY(mindex1: u31, mindex2: u31) {$/;"	m
visit_MEMORY_COPY	$VIRGIL_WIZARD/src/monitors/MemStatsMonitor.v3	/^	def visit_MEMORY_COPY(dst_memory_index: u31, src_memory_index: u31) {$/;"	m
visit_MEMORY_COPY	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^	def visit_MEMORY_COPY(dst_index: u31, src_index: u31) {$/;"	m
visit_MEMORY_COPY	$VIRGIL_WIZARD/src/util/BasicTracing.v3	/^	def visit_MEMORY_COPY(dst_memory_index: u31, src_memory_index: u31) { \/\/ TODO$/;"	m
visit_MEMORY_COPY	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_MEMORY_COPY		(dst_memory_index: u31, src_memory_index: u31) { visitMem(Opcode.MEMORY_COPY, dst_memory_index); }$/;"	m
visit_MEMORY_FILL	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_MEMORY_FILL(mindex: u31) {$/;"	m
visit_MEMORY_FILL	$VIRGIL_WIZARD/src/monitors/MemStatsMonitor.v3	/^	def visit_MEMORY_FILL(memory_index: u31) {$/;"	m
visit_MEMORY_FILL	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^	def visit_MEMORY_FILL(mem_index: u31) {$/;"	m
visit_MEMORY_FILL	$VIRGIL_WIZARD/src/util/BasicTracing.v3	/^	def visit_MEMORY_FILL(memory_index: u31) { \/\/ TODO$/;"	m
visit_MEMORY_FILL	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_MEMORY_FILL		(memory_index: u31)		{ visitMem(Opcode.MEMORY_FILL, memory_index); }$/;"	m
visit_MEMORY_GROW	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_MEMORY_GROW(memory_index: u31) {$/;"	m
visit_MEMORY_GROW	$VIRGIL_WIZARD/src/monitors/MemStatsMonitor.v3	/^	def visit_MEMORY_GROW(memory_index: u31) {$/;"	m
visit_MEMORY_GROW	$VIRGIL_WIZARD/src/monitors/ModuleInstrumenter.v3	/^	def visit_MEMORY_GROW(memory_index: u31) {$/;"	m
visit_MEMORY_GROW	$VIRGIL_WIZARD/src/util/BasicTracing.v3	/^	def visit_MEMORY_GROW(memory_index: u31) {$/;"	m
visit_MEMORY_GROW	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_MEMORY_GROW		(memory_index: u31) { visitMem(Opcode.MEMORY_GROW, memory_index); }$/;"	m
visit_MEMORY_INIT	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_MEMORY_INIT(dindex: u31, mindex: u31) {$/;"	m
visit_MEMORY_INIT	$VIRGIL_WIZARD/src/monitors/MemStatsMonitor.v3	/^	def visit_MEMORY_INIT(data_index: u31, memory_index: u31) {$/;"	m
visit_MEMORY_INIT	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^	def visit_MEMORY_INIT(data_index: u31, mem_index: u31) {$/;"	m
visit_MEMORY_INIT	$VIRGIL_WIZARD/src/util/BasicTracing.v3	/^	def visit_MEMORY_INIT(data_index: u31, memory_index: u31) { \/\/ TODO$/;"	m
visit_MEMORY_INIT	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_MEMORY_INIT		(data_index: u31, memory_index: u31) { visitMem(Opcode.MEMORY_INIT, memory_index); }$/;"	m
visit_MEMORY_SIZE	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_MEMORY_SIZE(memory_index: u31) {$/;"	m
visit_MEMORY_SIZE	$VIRGIL_WIZARD/src/util/BasicTracing.v3	/^	def visit_MEMORY_SIZE(memory_index: u31) { \/\/ TODO$/;"	m
visit_MEMORY_SIZE	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_MEMORY_SIZE		(memory_index: u31) { visitMem(Opcode.MEMORY_SIZE, memory_index); }$/;"	m
visit_NOP	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_NOP() {$/;"	m
visit_NOP	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_NOP		() 						{ visitMisc(Opcode.NOP); }$/;"	m
visit_REF_AS_NON_NULL	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_REF_AS_NON_NULL() {$/;"	m
visit_REF_AS_NON_NULL	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_REF_AS_NON_NULL	() 			{ visitRef(Opcode.REF_AS_NON_NULL); }$/;"	m
visit_REF_CAST	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_REF_CAST(ht_val: int) {$/;"	m
visit_REF_CAST	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_REF_CAST		(ht_val: int)				{ visitGc(Opcode.REF_CAST); }$/;"	m
visit_REF_CAST_NULL	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_REF_CAST_NULL(ht_val: int) {$/;"	m
visit_REF_CAST_NULL	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_REF_CAST_NULL		(ht_val: int)				{ visitGc(Opcode.REF_CAST_NULL); }$/;"	m
visit_REF_EQ	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_REF_EQ()   {$/;"	m
visit_REF_EQ	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_REF_EQ		() 			{ visitRef(Opcode.REF_EQ); }$/;"	m
visit_REF_FUNC	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_REF_FUNC(func_index: u31) {$/;"	m
visit_REF_FUNC	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_REF_FUNC		(func_index: u31)	{ visitRef(Opcode.REF_FUNC); }$/;"	m
visit_REF_I31	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_REF_I31() {$/;"	m
visit_REF_I31	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_REF_I31		()					{ visitGc(Opcode.REF_I31); }$/;"	m
visit_REF_IS_NULL	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_REF_IS_NULL() {$/;"	m
visit_REF_IS_NULL	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_REF_IS_NULL		()			{ visitRef(Opcode.REF_IS_NULL); }$/;"	m
visit_REF_NULL	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_REF_NULL(ht_val: int) {$/;"	m
visit_REF_NULL	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_REF_NULL		(ht_val: int)		{ visitRef(Opcode.REF_NULL); }$/;"	m
visit_REF_TEST	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_REF_TEST(ht_val: int) {$/;"	m
visit_REF_TEST	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_REF_TEST		(ht_val: int)				{ visitGc(Opcode.REF_TEST); }$/;"	m
visit_REF_TEST_NULL	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_REF_TEST_NULL	(ht_val: int) {$/;"	m
visit_REF_TEST_NULL	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_REF_TEST_NULL		(ht_val: int)				{ visitGc(Opcode.REF_TEST_NULL); }$/;"	m
visit_RESUME	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_RESUME(cont_id: u31, handlers: Range<SuspensionHandler>) {$/;"	m
visit_RESUME	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_RESUME					(cont: u31, handlers: Range<SuspensionHandler>) 	{ visitOp(Opcode.RESUME); }$/;"	m
visit_RESUME_THROW	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_RESUME_THROW(cont_id: u31, tag_id: u31, handlers: Range<SuspensionHandler>) {$/;"	m
visit_RESUME_THROW	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_RESUME_THROW				(cont: u31, tag: u31, handlers: Range<SuspensionHandler>) 	{ visitOp(Opcode.RESUME_THROW); }$/;"	m
visit_RETHROW	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_RETHROW	(depth: u31) 					{ visitControl(Opcode.RETHROW); }$/;"	m
visit_RETHROW	$VIRGIL_WIZARD/src/util/ControlStack.v3	/^	def visit_RETHROW(depth: u31) {$/;"	m
visit_RETURN	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_RETURN() {$/;"	m
visit_RETURN	$VIRGIL_WIZARD/src/monitors/ModuleInstrumenter.v3	/^	def visit_RETURN() {$/;"	m
visit_RETURN	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^	def visit_RETURN() {$/;"	m
visit_RETURN	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_RETURN	() 						{ visitControl(Opcode.RETURN); }$/;"	m
visit_RETURN	$VIRGIL_WIZARD/src/util/ControlStack.v3	/^	def visit_RETURN() {$/;"	m
visit_RETURN_CALL	$VIRGIL_WIZARD/src/monitors/CallsMonitor.v3	/^	def visit_RETURN_CALL(func_index: u31)				 { insert(CallProbe.new(true, func_index)); }$/;"	m
visit_RETURN_CALL	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_RETURN_CALL	(func_index: u31) 				{ visitCallDirect(Opcode.RETURN_CALL, func_index, true); }$/;"	m
visit_RETURN_CALL	$VIRGIL_WIZARD/src/util/ControlStack.v3	/^	def visit_RETURN_CALL(func_index: u31) {$/;"	m
visit_RETURN_CALL_INDIRECT	$VIRGIL_WIZARD/src/monitors/CallsMonitor.v3	/^	def visit_RETURN_CALL_INDIRECT(sig_index: u31, table_index: u31) { insert(CallIndirectProbe.new(true, table_index)); }$/;"	m
visit_RETURN_CALL_INDIRECT	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_RETURN_CALL_INDIRECT(sig_index: u31, table_index: u31)	{ visitCallIndirect(Opcode.RETURN_CALL_INDIRECT, sig_index, table_index, true); }$/;"	m
visit_RETURN_CALL_INDIRECT	$VIRGIL_WIZARD/src/util/ControlStack.v3	/^	def visit_RETURN_CALL_INDIRECT(sig_index: u31, table_index: u31) {$/;"	m
visit_RETURN_CALL_REF	$VIRGIL_WIZARD/src/monitors/CallsMonitor.v3	/^	def visit_RETURN_CALL_REF(sig_index: u31)			 { insert(CallRefProbe.new(true)); }$/;"	m
visit_RETURN_CALL_REF	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_RETURN_CALL_REF(sig_index: u31) 				{ visitCallRef(Opcode.RETURN_CALL_REF, sig_index, true); }$/;"	m
visit_SELECT	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_SELECT() {$/;"	m
visit_SELECT	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_SELECT	() 						{ visitMisc(Opcode.SELECT); }$/;"	m
visit_SELECT_T	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_SELECT_T(val_types: Range<ValueTypeCode>) {$/;"	m
visit_SELECT_T	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_SELECT_T	(val_types: Range<ValueTypeCode>) 		{ visitMisc(Opcode.SELECT_T); }$/;"	m
visit_STRUCT_GET	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_STRUCT_GET(struct_index: u31, field_index: u31) {$/;"	m
visit_STRUCT_GET	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_STRUCT_GET		(ht_index: u31, field_index: u31) 	{ visitGc(Opcode.STRUCT_GET); }$/;"	m
visit_STRUCT_GET_S	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_STRUCT_GET_S(struct_index: u31, field_index: u31) {$/;"	m
visit_STRUCT_GET_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_STRUCT_GET_S		(ht_index: u31, field_index: u31) 	{ visitGc(Opcode.STRUCT_GET_S); }$/;"	m
visit_STRUCT_GET_U	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_STRUCT_GET_U(struct_index: u31, field_index: u31) {$/;"	m
visit_STRUCT_GET_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_STRUCT_GET_U		(ht_index: u31, field_index: u31) 	{ visitGc(Opcode.STRUCT_GET_U); }$/;"	m
visit_STRUCT_NEW	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_STRUCT_NEW(struct_index: u31) {$/;"	m
visit_STRUCT_NEW	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_STRUCT_NEW		(ht_index: u31) 			{ visitGc(Opcode.STRUCT_NEW); }$/;"	m
visit_STRUCT_NEW_DEFAULT	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_STRUCT_NEW_DEFAULT(struct_index: u31) {$/;"	m
visit_STRUCT_NEW_DEFAULT	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_STRUCT_NEW_DEFAULT	(ht_index: u31) 			{ visitGc(Opcode.STRUCT_NEW_DEFAULT); }$/;"	m
visit_STRUCT_SET	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_STRUCT_SET(struct_index: u31, field_index: u31) {$/;"	m
visit_STRUCT_SET	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_STRUCT_SET		(ht_index: u31, field_index: u31) 	{ visitGc(Opcode.STRUCT_SET); }$/;"	m
visit_SUSPEND	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_SUSPEND(tag_index: u31) {$/;"	m
visit_SUSPEND	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_SUSPEND					(tag: u31)  	{ visitOp(Opcode.SUSPEND); }$/;"	m
visit_SWITCH	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_SWITCH(target_cont_idx: u31, tag_index: u31) {$/;"	m
visit_SWITCH	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_SWITCH					(cont: u31, tag: u31) 	{ visitOp(Opcode.SWITCH); }$/;"	m
visit_TABLE_COPY	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_TABLE_COPY(tindex1: u31, tindex2: u31) {$/;"	m
visit_TABLE_COPY	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_TABLE_COPY		(dst_table_index: u31, src_table_index: u31)	{ visitTable(Opcode.TABLE_COPY, dst_table_index); }$/;"	m
visit_TABLE_FILL	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_TABLE_FILL(index: u31) {$/;"	m
visit_TABLE_FILL	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_TABLE_FILL		(table_index: u31)		{ visitTable(Opcode.TABLE_FILL, table_index); }$/;"	m
visit_TABLE_GET	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_TABLE_GET(index: u31) {$/;"	m
visit_TABLE_GET	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^	def visit_TABLE_GET(table_index: u31) {$/;"	m
visit_TABLE_GET	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_TABLE_GET		(table_index: u31) { visitTable(Opcode.TABLE_GET, table_index); }$/;"	m
visit_TABLE_GROW	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_TABLE_GROW(table_index: u31) {$/;"	m
visit_TABLE_GROW	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^	def visit_TABLE_GROW(table_index: u31) {$/;"	m
visit_TABLE_GROW	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_TABLE_GROW		(table_index: u31)		{ visitTable(Opcode.TABLE_GROW, table_index); }$/;"	m
visit_TABLE_INIT	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_TABLE_INIT(eindex: u31, tindex: u31) {$/;"	m
visit_TABLE_INIT	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_TABLE_INIT		(elem_index: u31, table_index: u31) { visitTable(Opcode.TABLE_INIT, table_index); }$/;"	m
visit_TABLE_SET	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_TABLE_SET(index: u31) {$/;"	m
visit_TABLE_SET	$VIRGIL_WIZARD/src/monitors/R3Monitor.v3	/^	def visit_TABLE_SET(table_index: u31) {$/;"	m
visit_TABLE_SET	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_TABLE_SET		(table_index: u31) { visitTable(Opcode.TABLE_SET, table_index); }$/;"	m
visit_TABLE_SIZE	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_TABLE_SIZE(table_index: u31) {$/;"	m
visit_TABLE_SIZE	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_TABLE_SIZE		(table_index: u31)		{ visitTable(Opcode.TABLE_SIZE, table_index); }$/;"	m
visit_THROW	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_THROW(tag_index: u31) {$/;"	m
visit_THROW	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_THROW		(tag_code: u31) 				{ visitControl(Opcode.THROW); }$/;"	m
visit_THROW	$VIRGIL_WIZARD/src/util/ControlStack.v3	/^	def visit_THROW(tag_code: u31) {$/;"	m
visit_THROW_REF	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_THROW_REF() {$/;"	m
visit_THROW_REF	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_THROW_REF	() 						{ visitControl(Opcode.THROW_REF); }$/;"	m
visit_THROW_REF	$VIRGIL_WIZARD/src/util/ControlStack.v3	/^	def visit_THROW_REF() {$/;"	m
visit_TRY	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_TRY(btc: BlockTypeCode) {$/;"	m
visit_TRY	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_TRY		(btc: BlockTypeCode) 				{ visitControl(Opcode.TRY); }$/;"	m
visit_TRY	$VIRGIL_WIZARD/src/util/ControlStack.v3	/^	def visit_TRY(btc: BlockTypeCode) {$/;"	m
visit_TRY_TABLE	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_TRY_TABLE(btc: BlockTypeCode, catches: Range<BpCatchCode>) {$/;"	m
visit_TRY_TABLE	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_TRY_TABLE	(btc: BlockTypeCode, catches: Range<BpCatchCode>) { visitControl(Opcode.TRY_TABLE); }$/;"	m
visit_TRY_TABLE	$VIRGIL_WIZARD/src/util/CfgPrinter.v3	/^	def visit_TRY_TABLE(btc: BlockTypeCode, catches: Range<BpCatchCode>) {$/;"	m
visit_TRY_TABLE	$VIRGIL_WIZARD/src/util/ControlStack.v3	/^	def visit_TRY_TABLE(btc: BlockTypeCode, catches: Range<BpCatchCode>) {$/;"	m
visit_UNREACHABLE	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_UNREACHABLE() {$/;"	m
visit_UNREACHABLE	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_UNREACHABLE	() 						{ visitMisc(Opcode.UNREACHABLE); }$/;"	m
visit_UNREACHABLE	$VIRGIL_WIZARD/src/util/ControlStack.v3	/^	def visit_UNREACHABLE()	{$/;"	m
visit_V128_AND	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_V128_AND() {do_op2_x_x(ValueKind.V128, asm.andps_s_s); }$/;"	m
visit_V128_AND	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_V128_AND			() { visitSimd(Opcode.V128_AND); }$/;"	m
visit_V128_ANDNOT	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_V128_ANDNOT() { do_c_op2_x_x(ValueKind.V128, asm.andnps_s_s); }$/;"	m
visit_V128_ANDNOT	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_V128_ANDNOT			() { visitSimd(Opcode.V128_ANDNOT); }$/;"	m
visit_V128_ANYTRUE	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_V128_ANYTRUE() { do_op1_r_x(ValueKind.I32, mmasm.emit_v128_anytrue); }$/;"	m
visit_V128_ANYTRUE	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_V128_ANYTRUE			() { visitSimd(Opcode.V128_ANYTRUE); }$/;"	m
visit_V128_BITSELECT	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_V128_BITSELECT() {$/;"	m
visit_V128_BITSELECT	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_V128_BITSELECT		() { visitSimd(Opcode.V128_BITSELECT); }$/;"	m
visit_V128_CONST	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_V128_CONST(low: u64, high: u64) {$/;"	m
visit_V128_CONST	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_V128_CONST			(low: u64, high: u64) { visitConst(Opcode.V128_CONST); }$/;"	m
visit_V128_EXTMUL1	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	private def visit_V128_EXTMUL1<T>(kind: ValueKind, emit: (X86_64Xmmr, X86_64Xmmr, X86_64Xmmr, bool, bool) -> T, is_low: bool, is_signed: bool) {$/;"	m
visit_V128_EXTMUL2	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	private def visit_V128_EXTMUL2<T>(kind: ValueKind, emit: (X86_64Xmmr, X86_64Xmmr, X86_64Xmmr, bool) -> T, is_signed: bool) {$/;"	m
visit_V128_EXTRACT_LANE	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	private def visit_V128_EXTRACT_LANE<T>(kind: ValueKind, lane: byte, asm_pext_r_s_i: (X86_64Gpr, X86_64Xmmr, byte) -> T) {$/;"	m
visit_V128_EXTRACT_LANE_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	private def visit_V128_EXTRACT_LANE_S<T>(kind: ValueKind, lane: byte, asm_pext_r_s_i: (X86_64Gpr, X86_64Xmmr, byte) -> T,  asm_movext_s_s: (X86_64Gpr, X86_64Gpr) -> T) {$/;"	m
visit_V128_LOAD	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_V128_LOAD(imm: MemArg) { emitLoad(ValueKind.V128, imm, masm.emit_load_r_r_r_i); }$/;"	m
visit_V128_LOAD	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_V128_LOAD			(imm: MemArg) { visitLoad(Opcode.V128_LOAD, imm, 16); }$/;"	m
visit_V128_LOAD_16X4_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_V128_LOAD_16X4_S(imm: MemArg) { visit_V128_LOAD_EXTEND(imm, asm.pmovsxwd_s_m); }$/;"	m
visit_V128_LOAD_16X4_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_V128_LOAD_16X4_S		(imm: MemArg) { visitLoad(Opcode.V128_LOAD_16X4_S, imm, 8); }$/;"	m
visit_V128_LOAD_16X4_U	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_V128_LOAD_16X4_U(imm: MemArg) { visit_V128_LOAD_EXTEND(imm, asm.pmovzxwd_s_m); }$/;"	m
visit_V128_LOAD_16X4_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_V128_LOAD_16X4_U		(imm: MemArg) { visitLoad(Opcode.V128_LOAD_16X4_U, imm, 8); }$/;"	m
visit_V128_LOAD_16_LANE	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_V128_LOAD_16_LANE(imm: MemArg, lane: byte) { visit_V128_LOAD_LANE(imm, lane, loadMemarg_w, asm.pinsrw_s_r_i); }$/;"	m
visit_V128_LOAD_16_LANE	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_V128_LOAD_16_LANE		(imm: MemArg, lane_index: u8) { visitLoad(Opcode.V128_LOAD_16_LANE, imm, 2); }$/;"	m
visit_V128_LOAD_16_SPLAT	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_V128_LOAD_16_SPLAT(imm: MemArg) { visit_V128_LOAD_SPLAT(imm, loadMemarg_w, mmasm.emit_i16x8_splat); }$/;"	m
visit_V128_LOAD_16_SPLAT	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_V128_LOAD_16_SPLAT		(imm: MemArg) { visitLoad(Opcode.V128_LOAD_16_SPLAT, imm, 2); }$/;"	m
visit_V128_LOAD_32X2_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_V128_LOAD_32X2_S(imm: MemArg) { visit_V128_LOAD_EXTEND(imm, asm.pmovsxdq_s_m); }$/;"	m
visit_V128_LOAD_32X2_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_V128_LOAD_32X2_S		(imm: MemArg) { visitLoad(Opcode.V128_LOAD_32X2_S, imm, 8); }$/;"	m
visit_V128_LOAD_32X2_U	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_V128_LOAD_32X2_U(imm: MemArg) { visit_V128_LOAD_EXTEND(imm, asm.pmovzxdq_s_m); }$/;"	m
visit_V128_LOAD_32X2_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_V128_LOAD_32X2_U		(imm: MemArg) { visitLoad(Opcode.V128_LOAD_32X2_U, imm, 8); }$/;"	m
visit_V128_LOAD_32_LANE	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_V128_LOAD_32_LANE(imm: MemArg, lane: byte) { visit_V128_LOAD_LANE(imm, lane, loadMemarg_d, asm.pinsrd_s_r_i); }$/;"	m
visit_V128_LOAD_32_LANE	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_V128_LOAD_32_LANE		(imm: MemArg, lane_index: u8) { visitLoad(Opcode.V128_LOAD_32_LANE, imm, 4); }$/;"	m
visit_V128_LOAD_32_SPLAT	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_V128_LOAD_32_SPLAT(imm: MemArg) { visit_V128_LOAD_SPLAT(imm, loadMemarg_d, mmasm.emit_i32x4_splat); }$/;"	m
visit_V128_LOAD_32_SPLAT	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_V128_LOAD_32_SPLAT		(imm: MemArg) { visitLoad(Opcode.V128_LOAD_32_SPLAT, imm, 4); }$/;"	m
visit_V128_LOAD_32_ZERO	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_V128_LOAD_32_ZERO(imm: MemArg) { visit_V128_LOAD_ZERO(imm, loadMemarg_d, asm.pinsrd_s_r_i); }$/;"	m
visit_V128_LOAD_32_ZERO	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_V128_LOAD_32_ZERO		(imm: MemArg) { visitLoad(Opcode.V128_LOAD_32_ZERO, imm, 4); }$/;"	m
visit_V128_LOAD_64_LANE	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_V128_LOAD_64_LANE(imm: MemArg, lane: byte) { visit_V128_LOAD_LANE(imm, lane, loadMemarg_q, asm.pinsrq_s_r_i); }$/;"	m
visit_V128_LOAD_64_LANE	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_V128_LOAD_64_LANE		(imm: MemArg, lane_index: u8) { visitLoad(Opcode.V128_LOAD_64_LANE, imm, 8); }$/;"	m
visit_V128_LOAD_64_SPLAT	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_V128_LOAD_64_SPLAT(imm: MemArg) { visit_V128_LOAD_SPLAT(imm, loadMemarg_q, mmasm.emit_i64x2_splat); }$/;"	m
visit_V128_LOAD_64_SPLAT	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_V128_LOAD_64_SPLAT		(imm: MemArg) { visitLoad(Opcode.V128_LOAD_64_SPLAT, imm, 8); }$/;"	m
visit_V128_LOAD_64_ZERO	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_V128_LOAD_64_ZERO(imm: MemArg) { visit_V128_LOAD_ZERO(imm, loadMemarg_q, asm.pinsrq_s_r_i); }$/;"	m
visit_V128_LOAD_64_ZERO	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_V128_LOAD_64_ZERO		(imm: MemArg) { visitLoad(Opcode.V128_LOAD_64_ZERO, imm, 8); }$/;"	m
visit_V128_LOAD_8X8_S	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_V128_LOAD_8X8_S(imm: MemArg) { visit_V128_LOAD_EXTEND(imm, asm.pmovsxbw_s_m); }$/;"	m
visit_V128_LOAD_8X8_S	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_V128_LOAD_8X8_S		(imm: MemArg) { visitLoad(Opcode.V128_LOAD_8X8_S, imm, 8); }$/;"	m
visit_V128_LOAD_8X8_U	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_V128_LOAD_8X8_U(imm: MemArg) { visit_V128_LOAD_EXTEND(imm, asm.pmovzxbw_s_m); }$/;"	m
visit_V128_LOAD_8X8_U	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_V128_LOAD_8X8_U		(imm: MemArg) { visitLoad(Opcode.V128_LOAD_8X8_U, imm, 8); }$/;"	m
visit_V128_LOAD_8_LANE	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_V128_LOAD_8_LANE(imm: MemArg, lane: byte) { visit_V128_LOAD_LANE(imm, lane, loadMemarg_b, asm.pinsrb_s_r_i); }$/;"	m
visit_V128_LOAD_8_LANE	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_V128_LOAD_8_LANE		(imm: MemArg, lane_index: u8) { visitLoad(Opcode.V128_LOAD_8_LANE, imm, 1); }$/;"	m
visit_V128_LOAD_8_SPLAT	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_V128_LOAD_8_SPLAT(imm: MemArg) { visit_V128_LOAD_SPLAT(imm, loadMemarg_b, mmasm.emit_i8x16_splat(_, _, X(allocTmp(ValueKind.V128)))); }$/;"	m
visit_V128_LOAD_8_SPLAT	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_V128_LOAD_8_SPLAT		(imm: MemArg) { visitLoad(Opcode.V128_LOAD_8_SPLAT, imm, 1); }$/;"	m
visit_V128_LOAD_EXTEND	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	private def visit_V128_LOAD_EXTEND<T>(imm: MemArg, asm_pmov_s_m: (X86_64Xmmr, X86_64Addr) -> T) {$/;"	m
visit_V128_LOAD_LANE	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	private def visit_V128_LOAD_LANE<T>(imm: MemArg, lane: byte, loadMem: (Reg, MemArg) -> void, asm_pins_s_r_i: (X86_64Xmmr, X86_64Gpr, byte) -> T) {$/;"	m
visit_V128_LOAD_SPLAT	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	private def visit_V128_LOAD_SPLAT<T>(imm: MemArg, loadMem: (Reg, MemArg) -> void, masm_splat: (X86_64Xmmr, X86_64Gpr) -> void) {$/;"	m
visit_V128_LOAD_ZERO	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	private def visit_V128_LOAD_ZERO<T>(imm: MemArg, loadMem: (Reg, MemArg) -> void, asm_pins_s_r_i: (X86_64Xmmr, X86_64Gpr, byte) -> T) {$/;"	m
visit_V128_NOT	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_V128_NOT() {$/;"	m
visit_V128_NOT	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_V128_NOT			() { visitSimd(Opcode.V128_NOT); }$/;"	m
visit_V128_OR	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_V128_OR() { do_op2_x_x(ValueKind.V128, asm.orps_s_s); }$/;"	m
visit_V128_OR	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_V128_OR			() { visitSimd(Opcode.V128_OR); }$/;"	m
visit_V128_REPLACE_LANE	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	private def visit_V128_REPLACE_LANE<T>(lane: byte, asm_pins_s_r_i: (X86_64Xmmr, X86_64Gpr, byte) -> T) {$/;"	m
visit_V128_SHIFT1	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	private def visit_V128_SHIFT1<T>(masm_shift: (X86_64Xmmr, X86_64Gpr, X86_64Gpr, X86_64Xmmr, X86_64Xmmr) -> T) {$/;"	m
visit_V128_SHIFT2	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	private def visit_V128_SHIFT2<T>(width: byte, asm_shift: (X86_64Xmmr, X86_64Xmmr) -> T) {$/;"	m
visit_V128_SPLAT_F	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	private def visit_V128_SPLAT_F<T>(asm_meth: (X86_64Xmmr, X86_64Xmmr) -> T) {$/;"	m
visit_V128_SPLAT_I	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	private def visit_V128_SPLAT_I<T>(masm_splat: (X86_64Xmmr, X86_64Gpr) -> T) {$/;"	m
visit_V128_STORE	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def visit_V128_STORE(imm: MemArg) { emitStore(ValueKind.V128, imm, masm.emit_store_r_r_r_i); }$/;"	m
visit_V128_STORE	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_V128_STORE			(imm: MemArg) { visitStore(Opcode.V128_STORE, imm, 16); }$/;"	m
visit_V128_STORE_16_LANE	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_V128_STORE_16_LANE(imm: MemArg, lane: byte) { visit_V128_STORE_LANE(imm, lane, storeMemarg_w, asm.pextrw_r_s_i); }$/;"	m
visit_V128_STORE_16_LANE	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_V128_STORE_16_LANE		(imm: MemArg, lane_index: u8) { visitStore(Opcode.V128_STORE_16_LANE, imm, 2); }$/;"	m
visit_V128_STORE_32_LANE	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_V128_STORE_32_LANE(imm: MemArg, lane: byte) { visit_V128_STORE_LANE(imm, lane, storeMemarg_d, asm.pextrd_r_s_i); }$/;"	m
visit_V128_STORE_32_LANE	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_V128_STORE_32_LANE		(imm: MemArg, lane_index: u8) { visitStore(Opcode.V128_STORE_32_LANE, imm, 4); }$/;"	m
visit_V128_STORE_64_LANE	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_V128_STORE_64_LANE(imm: MemArg, lane: byte) { visit_V128_STORE_LANE(imm, lane, storeMemarg_q, asm.pextrq_r_s_i); }$/;"	m
visit_V128_STORE_64_LANE	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_V128_STORE_64_LANE		(imm: MemArg, lane_index: u8) { visitStore(Opcode.V128_STORE_64_LANE, imm, 8); }$/;"	m
visit_V128_STORE_8_LANE	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_V128_STORE_8_LANE(imm: MemArg, lane: byte) { visit_V128_STORE_LANE(imm, lane, storeMemarg_b, asm.pextrb_r_s_i); }$/;"	m
visit_V128_STORE_8_LANE	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_V128_STORE_8_LANE		(imm: MemArg, lane_index: u8) { visitStore(Opcode.V128_STORE_8_LANE, imm, 1); }$/;"	m
visit_V128_STORE_LANE	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_V128_STORE_LANE<T>(imm: MemArg, lane: byte, storeMem: (MemArg, Reg) -> void, asm_pext_r_s_i: (X86_64Gpr, X86_64Xmmr, byte) -> T) {$/;"	m
visit_V128_XOR	$VIRGIL_WIZARD/src/engine/x86-64/X86_64SinglePassCompiler.v3	/^	def visit_V128_XOR() { do_op2_x_x(ValueKind.V128, asm.xorps_s_s); }$/;"	m
visit_V128_XOR	$VIRGIL_WIZARD/src/util/BytecodeVisitor.v3	/^	def visit_V128_XOR			() { visitSimd(Opcode.V128_XOR); }$/;"	m
visited_handlers	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	var visited_handlers = 0;$/;"	d
visitor	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^	var visitor: DispatchFunctionBytecodeVisitor;$/;"	d
visitor	$VIRGIL_WIZARD/src/monitors/CallsMonitor.v3	/^	def visitor = CallsMonitorBytecodeVisitor.new(null, BytecodeIterator.new());$/;"	d
vs	$VIRGIL_WIZARD/src/engine/x86-64/V3Offsets.v3	/^	private def vs = X86_64Stack.new(2u * 4096u);$/;"	d
vsp	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	var vsp: Reg;$/;"	d
vsp	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^class VspHelper(vsp: X86_64Gpr, valuerep: Tagging, depth: int) {$/;"	d
vsp	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	var vsp: Pointer;$/;"	d
vsp_slot	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	var vsp_slot: MasmAddr;$/;"	d
vsp_slot	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^	var vsp_slot: MasmAddr;$/;"	d
vt	$VIRGIL_WIZARD/src/engine/Instance.v3	/^class ExportedValueType(src: ExportedType, vt: ValueType) extends ExportedType {$/;"	d
walk	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	private def walk<P>(f: (Pointer, RiUserCode, StackFramePos, P) -> bool, param: P, start_sp: Pointer, continue_to_parent: bool) -> (bool, StackFramePos) {$/;"	m
wasi_filetype	$VIRGIL_WIZARD/src/modules/wasi/WasiUtils.v3	/^enum wasi_filetype(code: byte) {$/;"	e
wasidirentbuf	$VIRGIL_WIZARD/src/modules/wasi/x86-64-linux/WspOneModule-x86-64-linux.v3	/^def wasidirentbuf = Array<byte>.new(Wasi_dirent.size);$/;"	d
wasmFuncEvent	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^	def wasmFuncEvent(wasm_func_id: int, is_start: bool) {$/;"	m
wasm_func	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	+0	wasm_func	: i64;	\/\/ WasmFunction$/;"	d
wasm_func_slot	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	var wasm_func_slot: MasmAddr;$/;"	d
wasm_func_slot	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^	var wasm_func_slot: MasmAddr;$/;"	d
wasm_func_trace	$VIRGIL_WIZARD/src/monitors/BytecodeProfilingMonitor.v3	/^case STEP(bytecode: u8, offset: u64, cost: u64, wasm_func_trace: List<WasmFuncTrace>);$/;"	d
wf	$VIRGIL_WIZARD/src/engine/x86-64/V3Offsets.v3	/^	private def wf = WasmFunction.new(i, decl);$/;"	d
wf	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Target.v3	/^type SpcResultForStub(wf: WasmFunction, entrypoint: Pointer, thrown: Throwable) #unboxed { }$/;"	d
whamm	$VIRGIL_WIZARD/src/engine/Trace.v3	/^	var whamm = false;$/;"	d
whamm	$VIRGIL_WIZARD/src/engine/TraceOptions.v3	/^	whamm('w', "whamm monitoring")$/;"	d
whamm	$VIRGIL_WIZARD/src/monitors/WhammMonitor.v3	/^	def whamm = named_modules[0].module; \/\/ whamm monitor module is first in group$/;"	d
whammInstances	$VIRGIL_WIZARD/src/monitors/WhammMonitor.v3	/^	var whammInstances: List<WhammInstance>; \/\/ XXX: leaky$/;"	d
whammProbeTrampolineNumPages	$VIRGIL_WIZARD/src/engine/Tuning.v3	/^	def whammProbeTrampolineNumPages = 1024;$/;"	d
whammReentryOffset	$VIRGIL_WIZARD/src/engine/x86-64/X86_64PreGenStubs.v3	/^	+56	whammReentryOffset:		i32;	\/\/ reentry point for whamm trampolines$/;"	d
whamm_Probe	$VIRGIL_WIZARD/src/engine/x86-64/V3Offsets.v3	/^	private def whamm_Probe = WhammProbe.new(null, []);$/;"	d
whamm_bind_time_us	$VIRGIL_WIZARD/src/engine/Metrics.v3	/^	def whamm_bind_time_us		= t("whamm:bind_time_us", "Time taken to bind Whamm monitors, including static predicates.");$/;"	d
whamm_report_time_us	$VIRGIL_WIZARD/src/engine/Metrics.v3	/^	def whamm_report_time_us	= t("whamm:report_time_us", "Time taken to report Whamm monitors.");$/;"	d
where	$VIRGIL_WIZARD/src/engine/WasmStack.v3	/^	def where() -> FrameLoc;$/;"	m
where	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	def where() -> FrameLoc;$/;"	m
which	$VIRGIL_WIZARD/src/monitors/LoopTraceMonitor.v3	/^	case BranchTable(which: u30);$/;"	d
wi	$VIRGIL_WIZARD/src/monitors/WhammMonitor.v3	/^private class WhammInstrumenter(wm: WhammMonitor, wi: WhammInstance, err: ErrorGen) {$/;"	d
wi	$VIRGIL_WIZARD/src/util/Whamm.v3	/^class WhammVarBinder(wi: WhammInstance, err: ErrorGen) {$/;"	d
width	$VIRGIL_WIZARD/src/util/TraceUtil.v3	/^	var width: byte = 12;$/;"	d
withFlags	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def withFlags(add: byte) -> SpcVal {$/;"	m
withoutReg	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^	def withoutReg() -> SpcVal {$/;"	m
wm	$VIRGIL_WIZARD/src/monitors/WhammMonitor.v3	/^private class WhammInstrumenter(wm: WhammMonitor, wi: WhammInstance, err: ErrorGen) {$/;"	d
wrap	$VIRGIL_WIZARD/src/util/ImportTracer.v3	/^	def wrap(decl: Decl, ex: Exportable) -> Exportable {$/;"	m
write	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^private class MemoryAccessor<T>(size: byte, log2_size: u3, read: Range<byte> -> T, write: (Range<byte>, T) -> void) { }$/;"	d
writeOut	$VIRGIL_WIZARD/src/engine/Memory.v3	/^	def writeOut(fd: int, src_offset: u32, size: u32) -> int {$/;"	m
write_counts	$VIRGIL_WIZARD/src/monitors/MemStatsMonitor.v3	/^	var write_counts = Array<u64>.new(read_counts.length);$/;"	d
write_double	$VIRGIL_WIZARD/src/engine/Memory.v3	/^	def write_double(offset: u32, index: u32, val: double) -> TrapReason {$/;"	m
write_float	$VIRGIL_WIZARD/src/engine/Memory.v3	/^	def write_float(offset: u32, index: u32, val: float) -> TrapReason {$/;"	m
write_u128	$VIRGIL_WIZARD/src/engine/Memory.v3	/^	def write_u128(offset: u32, index: u32, val: (u64, u64)) -> TrapReason {$/;"	m
write_u16	$VIRGIL_WIZARD/src/engine/Memory.v3	/^	def write_u16(offset: u32, index: u32, val: u16) -> TrapReason {$/;"	m
write_u32	$VIRGIL_WIZARD/src/engine/Memory.v3	/^	def write_u32(offset: u32, index: u32, val: u32) -> TrapReason {$/;"	m
write_u64	$VIRGIL_WIZARD/src/engine/Memory.v3	/^	def write_u64(offset: u32, index: u32, val: u64) -> TrapReason {$/;"	m
write_u8	$VIRGIL_WIZARD/src/engine/Memory.v3	/^	def write_u8(offset: u32, index: u32, val: u8) -> TrapReason {$/;"	m
writer	$VIRGIL_WIZARD/src/engine/v3/V3Interpreter.v3	/^	var writer: V3FrameWriter;$/;"	d
writer	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Stack.v3	/^	var writer: X86_64FrameWriter; \/\/ non-null if any writes have been made$/;"	d
writes	$VIRGIL_WIZARD/src/monitors/GlobalsMonitor.v3	/^	var writes = Vector<u64>.new();$/;"	d
x_	$VIRGIL_WIZARD/src/modules/wasi/WspOneModule.v3	/^var x_ = void($/;"	d
x_v	$VIRGIL_WIZARD/src/engine/SigCache.v3	/^	def x_v = S(arr_x, arr_v);$/;"	d
xenv	$VIRGIL_WIZARD/src/engine/compiler/SinglePassCompiler.v3	/^class SinglePassCompiler(xenv: SpcExecEnv, masm: MacroAssembler, regAlloc: RegAlloc, extensions: Extension.set, limits: Limits) extends BytecodeVisitor {$/;"	d
xmm0	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^	var xmm0: Reg;$/;"	d
xmm1	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^	var xmm1: Reg;$/;"	d
xmm2	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^	var xmm2: Reg;$/;"	d
xmm3	$VIRGIL_WIZARD/src/engine/x86-64/X86_64Interpreter.v3	/^	var xmm3: Reg;$/;"	d
zero	$VIRGIL_WIZARD/src/engine/compiler/MacroAssembler.v3	/^enum MasmBrCond		(zero: bool, 	i32: bool) {$/;"	d
zeroExtend	$VIRGIL_WIZARD/src/engine/V3Eval.v3	/^	def zeroExtend(st: StorageType, val: Value) -> Value {$/;"	f
