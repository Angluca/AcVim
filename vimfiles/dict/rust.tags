ABOVE_NORMAL_PRIORITY_CLASS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ABOVE_NORMAL_PRIORITY_CLASS: PROCESS_CREATION_FLAGS = 32768u32;$/;"	C
ACCESS_MASK	$RUST/src/sys/pal/windows/c.rs	/^pub type ACCESS_MASK = DWORD;$/;"	t
ADDRESS_FAMILY	$RUST/src/sys/pal/windows/c.rs	/^pub type ADDRESS_FAMILY = USHORT;$/;"	t
ADDRESS_FAMILY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub type ADDRESS_FAMILY = u16;$/;"	t
ADDRINFOA	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub struct ADDRINFOA {$/;"	s
AF_INET	$RUST/src/sys/pal/sgx/net.rs	/^    pub const AF_INET: u8 = 0;$/;"	C	module:netc
AF_INET	$RUST/src/sys/pal/solid/abi/sockets.rs	/^pub const AF_INET: i32 = 2;$/;"	C
AF_INET	$RUST/src/sys/pal/teeos/net.rs	/^    pub const AF_INET: u8 = 0;$/;"	C	module:netc
AF_INET	$RUST/src/sys/pal/unsupported/net.rs	/^    pub const AF_INET: u8 = 0;$/;"	C	module:netc
AF_INET	$RUST/src/sys/pal/wasi/net.rs	/^    pub const AF_INET: u8 = 0;$/;"	C	module:netc
AF_INET	$RUST/src/sys/pal/windows/c.rs	/^pub const AF_INET: c_int = windows_sys::AF_INET as c_int;$/;"	C
AF_INET	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const AF_INET: ADDRESS_FAMILY = 2u16;$/;"	C
AF_INET	$RUST/src/sys/pal/xous/net/mod.rs	/^    pub const AF_INET: u8 = 0;$/;"	C	module:netc
AF_INET6	$RUST/src/sys/pal/sgx/net.rs	/^    pub const AF_INET6: u8 = 1;$/;"	C	module:netc
AF_INET6	$RUST/src/sys/pal/solid/abi/sockets.rs	/^pub const AF_INET6: i32 = 10;$/;"	C
AF_INET6	$RUST/src/sys/pal/teeos/net.rs	/^    pub const AF_INET6: u8 = 1;$/;"	C	module:netc
AF_INET6	$RUST/src/sys/pal/unsupported/net.rs	/^    pub const AF_INET6: u8 = 1;$/;"	C	module:netc
AF_INET6	$RUST/src/sys/pal/wasi/net.rs	/^    pub const AF_INET6: u8 = 1;$/;"	C	module:netc
AF_INET6	$RUST/src/sys/pal/windows/c.rs	/^pub const AF_INET6: c_int = windows_sys::AF_INET6 as c_int;$/;"	C
AF_INET6	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const AF_INET6: ADDRESS_FAMILY = 23u16;$/;"	C
AF_INET6	$RUST/src/sys/pal/xous/net/mod.rs	/^    pub const AF_INET6: u8 = 1;$/;"	C	module:netc
AF_UNIX	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const AF_UNIX: u16 = 1u16;$/;"	C
AF_UNSPEC	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const AF_UNSPEC: ADDRESS_FAMILY = 0u16;$/;"	C
ALL_PROCESSOR_GROUPS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ALL_PROCESSOR_GROUPS: u16 = 65535u16;$/;"	C
ALWAYS_ABORT_FLAG	$RUST/src/panicking.rs	/^    const ALWAYS_ABORT_FLAG: usize = 1 << (usize::BITS - 1);$/;"	C	module:panic_count
AMT	$RUST/src/sync/mpsc/sync_tests.rs	/^    const AMT: u32 = if cfg!(miri) { 100 } else { 1000 };$/;"	C	function:stress_shared
AMT	$RUST/src/sync/mpsc/tests.rs	/^    const AMT: u32 = if cfg!(miri) { 100 } else { 10000 };$/;"	C	function:stress_shared
ARCH	$RUST/src/env.rs	/^    pub const ARCH: &str = env!("STD_ENV_ARCH");$/;"	C	module:consts
ARGC	$RUST/src/sys/pal/hermit/args.rs	/^static ARGC: AtomicIsize = AtomicIsize::new(0);$/;"	v
ARGC	$RUST/src/sys/pal/unix/args.rs	/^    static ARGC: AtomicIsize = AtomicIsize::new(0);$/;"	v	module:imp
ARGS	$RUST/src/sys/pal/sgx/args.rs	/^static ARGS: AtomicUsize = AtomicUsize::new(0);$/;"	v
ARGV	$RUST/src/sys/pal/hermit/args.rs	/^static ARGV: AtomicPtr<*const u8> = AtomicPtr::new(ptr::null_mut());$/;"	v
ARGV	$RUST/src/sys/pal/unix/args.rs	/^    static ARGV: AtomicPtr<*const u8> = AtomicPtr::new(ptr::null_mut());$/;"	v	module:imp
ARGV_INIT_ARRAY	$RUST/src/sys/pal/unix/args.rs	/^    static ARGV_INIT_ARRAY: extern "C" fn($/;"	v	module:imp
ARM64_NT_NEON128	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^impl ::core::marker::Copy for ARM64_NT_NEON128 {}$/;"	c
ARM64_NT_NEON128_0	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub struct ARM64_NT_NEON128_0 {$/;"	s
ATR	$RUST/src/sys/pal/itron/abi.rs	/^pub type ATR = uint_t;$/;"	t
ATTRIBUTES	$RUST/src/sys/pal/windows/fs.rs	/^        static ATTRIBUTES: AtomicU32 = AtomicU32::new(c::OBJ_DONT_REPARSE);$/;"	v	function:open_link_no_reparse
AVAILABLE	$RUST/src/sys/pal/unix/kernel_copy.rs	/^    const AVAILABLE: u8 = 2;$/;"	C	function:copy_regular_files
Aborted	$RUST/src/sync/mpmc/select.rs	/^    Aborted,$/;"	e	enum:Selected
Absolute	$RUST/src/sys/pal/unix/process/process_common.rs	/^    Absolute,$/;"	e	enum:ProgramKind
Abstract	$RUST/src/os/unix/net/addr.rs	/^    Abstract(&'a [u8]),$/;"	e	enum:AddressKind
AccessDenied	$RUST/src/os/xous/ffi/definitions.rs	/^    AccessDenied = 23,$/;"	e	enum:Error
AccessError	$RUST/src/thread/local.rs	/^pub struct AccessError;$/;"	s
Acquire1	$RUST/src/io/stdio/tests.rs	/^        Acquire1,$/;"	e	enum:test_lock::State
Acquire2	$RUST/src/io/stdio/tests.rs	/^        Acquire2,$/;"	e	enum:test_lock::State
AcquireSRWLockExclusive	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn AcquireSRWLockExclusive(srwlock: *mut SRWLOCK) -> ();$/;"	f	signature:(srwlock: *mut SRWLOCK) -> ()
AcquireSRWLockShared	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn AcquireSRWLockShared(srwlock: *mut SRWLOCK) -> ();$/;"	f	signature:(srwlock: *mut SRWLOCK) -> ()
ActiveTls	$RUST/src/sys/pal/sgx/abi/tls/mod.rs	/^pub struct ActiveTls<'a> {$/;"	s
Actual	$RUST/src/backtrace.rs	/^    Actual(backtrace_rs::Frame),$/;"	e	enum:RawFrame
Adapter	$RUST/src/io/mod.rs	/^        struct Adapter<'a, T: ?Sized + 'a> {$/;"	s	method:Write::write_fmt
AddrInUse	$RUST/src/io/error.rs	/^    AddrInUse,$/;"	e	enum:ErrorKind
AddrNotAvailable	$RUST/src/io/error.rs	/^    AddrNotAvailable,$/;"	e	enum:ErrorKind
AddressKind	$RUST/src/os/unix/net/addr.rs	/^enum AddressKind<'a> {$/;"	g
AdjustProcessLimit	$RUST/src/os/xous/ffi/definitions.rs	/^    AdjustProcessLimit = 38,$/;"	e	enum:Syscall
AlertableIoFn	$RUST/src/sys/pal/windows/pipe.rs	/^type AlertableIoFn = unsafe extern "system" fn($/;"	t
Align128	$RUST/src/os/fortanix_sgx/arch.rs	/^pub struct Align128<T>(pub T);$/;"	s
Align16	$RUST/src/os/fortanix_sgx/arch.rs	/^pub struct Align16<T>(pub T);$/;"	s
Align512	$RUST/src/os/fortanix_sgx/arch.rs	/^pub struct Align512<T>(pub T);$/;"	s
Align8	$RUST/src/sys/pal/windows/mod.rs	/^pub(crate) struct Align8<T: ?Sized>(pub T);$/;"	s
All	$RUST/src/sys/pal/sgx/waitqueue/mod.rs	/^    All { count: NonZeroUsize },$/;"	e	enum:NotifiedTcs
AllocatedCondvar	$RUST/src/sys/pal/sgx/condvar.rs	/^struct AllocatedCondvar(SpinMutex<WaitVariable<()>>);$/;"	s
AllocatedCondvar	$RUST/src/sys/pal/teeos/locks/condvar.rs	/^unsafe impl Sync for AllocatedCondvar {}$/;"	c
AllocatedCondvar	$RUST/src/sys/pal/unix/locks/pthread_condvar.rs	/^unsafe impl Sync for AllocatedCondvar {}$/;"	c
AllocatedMutex	$RUST/src/sys/pal/sgx/mutex.rs	/^struct AllocatedMutex(SpinMutex<WaitVariable<bool>>);$/;"	s
AllocatedMutex	$RUST/src/sys/pal/unix/locks/pthread_mutex.rs	/^unsafe impl Sync for AllocatedMutex {}$/;"	c
AllocatedRwLock	$RUST/src/sys/pal/sgx/rwlock.rs	/^struct AllocatedRwLock {$/;"	s
AllocatedRwLock	$RUST/src/sys/pal/unix/locks/pthread_rwlock.rs	/^unsafe impl Sync for AllocatedRwLock {}$/;"	c
AllocationSize	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub AllocationSize: i64,$/;"	m	struct:FILE_STANDARD_INFO
AlreadyExists	$RUST/src/io/error.rs	/^    AlreadyExists,$/;"	e	enum:ErrorKind
Always	$RUST/src/sys/pal/windows/args.rs	/^    Always,$/;"	e	enum:Quote
AlwaysAbort	$RUST/src/panicking.rs	/^        AlwaysAbort,$/;"	e	enum:panic_count::MustAbort
Ancestors	$RUST/src/path.rs	/^pub struct Ancestors<'a> {$/;"	s
AncillaryData	$RUST/src/os/unix/net/ancillary.rs	/^pub enum AncillaryData<'a> {$/;"	g
AncillaryDataIter	$RUST/src/os/unix/net/ancillary.rs	/^struct AncillaryDataIter<'a, T> {$/;"	s
AncillaryError	$RUST/src/os/unix/net/ancillary.rs	/^pub enum AncillaryError {$/;"	g
AnonPipe	$RUST/src/sys/pal/unix/pipe.rs	/^pub struct AnonPipe(FileDesc);$/;"	s
AnonPipe	$RUST/src/sys/pal/unsupported/pipe.rs	/^pub struct AnonPipe(!);$/;"	s
AnonPipe	$RUST/src/sys/pal/windows/pipe.rs	/^pub struct AnonPipe {$/;"	s
Anonymous	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub Anonymous: SYSTEM_INFO_0,$/;"	m	struct:SYSTEM_INFO
Answer	$RUST/src/sync/remutex/tests.rs	/^pub struct Answer<'a>(pub ReentrantMutexGuard<'a, RefCell<u32>>);$/;"	s
AppendPanicMessage	$RUST/src/os/xous/services/log.rs	/^    AppendPanicMessage(&'a [u8]),$/;"	e	enum:LogScalar
Arc	$RUST/src/ffi/os_str.rs	/^impl From<OsString> for Arc<OsStr> {$/;"	c
Arc	$RUST/src/fs.rs	/^impl Write for Arc<File> {$/;"	c
Arc	$RUST/src/os/fd/owned.rs	/^impl<T: AsFd> AsFd for crate::sync::Arc<T> {$/;"	c
Arc	$RUST/src/os/fd/raw.rs	/^impl<T: AsRawFd> AsRawFd for crate::sync::Arc<T> {$/;"	c
Arc	$RUST/src/os/solid/io.rs	/^impl<T: AsFd> AsFd for crate::sync::Arc<T> {$/;"	c
Arc	$RUST/src/os/windows/io/handle.rs	/^impl<T: AsHandle> AsHandle for crate::sync::Arc<T> {$/;"	c
Arc	$RUST/src/os/windows/io/socket.rs	/^impl<T: AsSocket> AsSocket for crate::sync::Arc<T> {$/;"	c
Arc	$RUST/src/path.rs	/^impl From<PathBuf> for Arc<Path> {$/;"	c
Arg	$RUST/src/sys/pal/windows/args.rs	/^pub(crate) enum Arg {$/;"	g
Args	$RUST/src/env.rs	/^pub struct Args {$/;"	s
Args	$RUST/src/sys/pal/hermit/args.rs	/^pub struct Args {$/;"	s
Args	$RUST/src/sys/pal/sgx/args.rs	/^pub struct Args(slice::Iter<'static, OsString>);$/;"	s
Args	$RUST/src/sys/pal/uefi/args.rs	/^pub struct Args {$/;"	s
Args	$RUST/src/sys/pal/unix/args.rs	/^pub struct Args {$/;"	s
Args	$RUST/src/sys/pal/unsupported/args.rs	/^pub struct Args {}$/;"	s
Args	$RUST/src/sys/pal/wasi/args.rs	/^pub struct Args {$/;"	s
Args	$RUST/src/sys/pal/windows/args.rs	/^pub struct Args {$/;"	s
Args	$RUST/src/sys/pal/zkvm/args.rs	/^pub struct Args {$/;"	s
ArgsOs	$RUST/src/env.rs	/^pub struct ArgsOs {$/;"	s
ArgsStore	$RUST/src/sys/pal/sgx/args.rs	/^type ArgsStore = Vec<OsString>;$/;"	t
ArgumentListTooLong	$RUST/src/io/error.rs	/^    ArgumentListTooLong,$/;"	e	enum:ErrorKind
Argv	$RUST/src/sys/pal/unix/process/process_common.rs	/^unsafe impl Sync for Argv {}$/;"	c
Array	$RUST/src/sync/mpmc/mod.rs	/^    Array(counter::Sender<array::Channel<T>>),$/;"	e	enum:SenderFlavor
ArrayToken	$RUST/src/sync/mpmc/array.rs	/^pub(crate) struct ArrayToken {$/;"	s
AsFd	$RUST/src/os/fd/owned.rs	/^pub trait AsFd {$/;"	i
AsFd	$RUST/src/os/solid/io.rs	/^pub trait AsFd {$/;"	i
AsHandle	$RUST/src/os/windows/io/handle.rs	/^pub trait AsHandle {$/;"	i
AsInner	$RUST/src/sys_common/mod.rs	/^pub trait AsInner<Inner: ?Sized> {$/;"	i
AsInnerMut	$RUST/src/sys_common/mod.rs	/^pub trait AsInnerMut<Inner: ?Sized> {$/;"	i
AsRawFd	$RUST/src/os/fd/raw.rs	/^pub trait AsRawFd {$/;"	i
AsRawFd	$RUST/src/os/fortanix_sgx/io.rs	/^pub trait AsRawFd {$/;"	i
AsRawFd	$RUST/src/os/solid/io.rs	/^pub trait AsRawFd {$/;"	i
AsRawHandle	$RUST/src/os/windows/io/raw.rs	/^pub trait AsRawHandle {$/;"	i
AsRawSocket	$RUST/src/os/windows/io/raw.rs	/^pub trait AsRawSocket {$/;"	i
AsSocket	$RUST/src/os/windows/io/socket.rs	/^pub trait AsSocket {$/;"	i
AsciiExt	$RUST/src/ascii.rs	/^pub trait AsciiExt {$/;"	i
AssertEq	$RUST/src/io/cursor/tests.rs	/^    struct AssertEq<T: Eq>(pub T);$/;"	s	function:test_eq
AsyncPipe	$RUST/src/sys/pal/windows/pipe.rs	/^struct AsyncPipe<'a> {$/;"	s
AsyncResult	$RUST/src/sys/pal/windows/pipe.rs	/^        struct AsyncResult {$/;"	s	method:AnonPipe::alertable_io_internal
AtomicU32	$RUST/src/sys/pal/unix/futex.rs	/^    unsafe { libc::umtx_wakeup(futex as *const AtomicU32 as *const i32, i32::MAX) };$/;"	C	function:futex_wake_all
AtomicU32	$RUST/src/sys/pal/wasm/atomics/futex.rs	/^    unsafe { wasm32::memory_atomic_notify(futex as *const AtomicU32 as *mut i32, 1) > 0 }$/;"	C	function:futex_wake
Attributes	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub Attributes: u32,$/;"	m	struct:OBJECT_ATTRIBUTES
Auto	$RUST/src/sys/pal/windows/args.rs	/^    Auto,$/;"	e	enum:Quote
BACKSLASH	$RUST/src/sys/pal/windows/args.rs	/^    const BACKSLASH: NonZeroU16 = non_zero_u16(b'\\\\' as u16);$/;"	C	function:parse_lp_cmd_line
BCRYPTGENRANDOM_FLAGS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub type BCRYPTGENRANDOM_FLAGS = u32;$/;"	t
BCRYPT_ALG_HANDLE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub type BCRYPT_ALG_HANDLE = *mut ::core::ffi::c_void;$/;"	t
BCRYPT_USE_SYSTEM_PREFERRED_RNG	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const BCRYPT_USE_SYSTEM_PREFERRED_RNG: BCRYPTGENRANDOM_FLAGS = 2u32;$/;"	C
BCryptGenRandom	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn BCryptGenRandom($/;"	f	signature:( halgorithm: BCRYPT_ALG_HANDLE, pbbuffer: *mut u8, cbbuffer: u32, dwflags: BCRYPTGENRANDOM_FLAGS, ) -> NTSTATUS
BELOW_NORMAL_PRIORITY_CLASS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const BELOW_NORMAL_PRIORITY_CLASS: PROCESS_CREATION_FLAGS = 16384u32;$/;"	C
BLOCK_CAP	$RUST/src/sync/mpmc/list.rs	/^const BLOCK_CAP: usize = LAP - 1;$/;"	C
BOOL	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub type BOOL = i32;$/;"	t
BOOLEAN	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub type BOOLEAN = u8;$/;"	t
BOOT_SERVICES_FLAG	$RUST/src/os/uefi/env.rs	/^static BOOT_SERVICES_FLAG: AtomicBool = AtomicBool::new(false);$/;"	v
BOOT_SERVICES_UNAVAILABLE	$RUST/src/sys/pal/uefi/helpers.rs	/^const BOOT_SERVICES_UNAVAILABLE: io::Error =$/;"	C
BUFFER_SIZE	$RUST/src/sys/pal/windows/fs.rs	/^    const BUFFER_SIZE: usize = 1024;$/;"	C	implementation:DirBuff
BUSY	$RUST/src/sys/pal/sgx/abi/mod.rs	/^    const BUSY: usize = 1;$/;"	C	function:tcs_init
BYTES	$RUST/src/io/copy/tests.rs	/^        const BYTES: u64 = 1024 * 1024;$/;"	C	function:io_benches::bench_copy_buf_reader
BYTES	$RUST/src/sys/pal/unix/kernel_copy/tests.rs	/^    const BYTES: usize = 128 * 1024;$/;"	C	function:bench_socket_pipe_socket_copy
BY_HANDLE_FILE_INFORMATION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub struct BY_HANDLE_FILE_INFORMATION {$/;"	s
Backoff	$RUST/src/sync/mpmc/utils.rs	/^pub struct Backoff {$/;"	s
Backtrace	$RUST/src/backtrace.rs	/^pub struct Backtrace {$/;"	s
BacktraceFrame	$RUST/src/backtrace.rs	/^pub struct BacktraceFrame {$/;"	s
BacktraceStatus	$RUST/src/backtrace.rs	/^pub enum BacktraceStatus {$/;"	g
BacktraceStyle	$RUST/src/panic.rs	/^pub enum BacktraceStyle {$/;"	g
BacktraceSymbol	$RUST/src/backtrace.rs	/^struct BacktraceSymbol {$/;"	s
BadAddress	$RUST/src/os/xous/ffi/definitions.rs	/^    BadAddress = 2,$/;"	e	enum:Error
BadAlignment	$RUST/src/os/xous/ffi/definitions.rs	/^    BadAlignment = 1,$/;"	e	enum:Error
Barrier	$RUST/src/sync/barrier.rs	/^pub struct Barrier {$/;"	s
BarrierState	$RUST/src/sync/barrier.rs	/^struct BarrierState {$/;"	s
BarrierWaitResult	$RUST/src/sync/barrier.rs	/^pub struct BarrierWaitResult(bool);$/;"	s
Bcr	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub Bcr: [u32; 8],$/;"	m	struct:CONTEXT
BeginPanic	$RUST/src/os/xous/services/log.rs	/^    BeginPanic,$/;"	e	enum:LogScalar
Block	$RUST/src/sync/mpmc/list.rs	/^struct Block<T> {$/;"	s
BlockingScalar	$RUST/src/os/xous/ffi/definitions.rs	/^    BlockingScalar = 5,$/;"	e	enum:InvokeType
Body	$RUST/src/path.rs	/^    Body = 2,     \/\/ foo\/bar\/baz$/;"	e	enum:State
Bojji	$RUST/src/io/error/tests.rs	/^struct Bojji(bool);$/;"	s
BorrowedCursor	$RUST/src/io/impls.rs	/^impl<'a> io::Write for core::io::BorrowedCursor<'a> {$/;"	c
BorrowedFd	$RUST/src/os/fd/owned.rs	/^pub struct BorrowedFd<'fd> {$/;"	s
BorrowedFd	$RUST/src/os/solid/io.rs	/^pub struct BorrowedFd<'socket> {$/;"	s
BorrowedHandle	$RUST/src/os/windows/io/handle.rs	/^unsafe impl Sync for BorrowedHandle<'_> {}$/;"	c
BorrowedSocket	$RUST/src/os/windows/io/socket.rs	/^pub struct BorrowedSocket<'socket> {$/;"	s
Both	$RUST/src/net/mod.rs	/^    Both,$/;"	e	enum:Shutdown
Box	$RUST/src/ffi/os_str.rs	/^impl From<OsString> for Box<OsStr> {$/;"	c
Box	$RUST/src/io/impls.rs	/^impl<W: Write + ?Sized> Write for Box<W> {$/;"	c
Box	$RUST/src/io/mod.rs	/^impl<T> SizeHint for Box<T> {$/;"	c
Box	$RUST/src/os/fd/owned.rs	/^impl<T: AsFd> AsFd for Box<T> {$/;"	c
Box	$RUST/src/os/fd/raw.rs	/^impl<T: AsRawFd> AsRawFd for Box<T> {$/;"	c
Box	$RUST/src/os/solid/io.rs	/^impl<T: AsFd> AsFd for Box<T> {$/;"	c
Box	$RUST/src/os/windows/io/handle.rs	/^impl<T: AsHandle> AsHandle for Box<T> {$/;"	c
Box	$RUST/src/os/windows/io/socket.rs	/^impl<T: AsSocket> AsSocket for Box<T> {$/;"	c
Box	$RUST/src/path.rs	/^impl From<PathBuf> for Box<Path> {$/;"	c
BrokenPipe	$RUST/src/io/error.rs	/^    BrokenPipe,$/;"	e	enum:ErrorKind
Buf	$RUST/src/sys/os_str/bytes.rs	/^pub struct Buf {$/;"	s
Buf	$RUST/src/sys/os_str/wtf8.rs	/^pub struct Buf {$/;"	s
BufGuard	$RUST/src/io/buffered/bufwriter.rs	/^        struct BufGuard<'a> {$/;"	s	method:BufWriter::flush_buf
BufRead	$RUST/src/io/mod.rs	/^pub trait BufRead: Read {$/;"	i
BufReader	$RUST/src/io/buffered/bufreader.rs	/^pub struct BufReader<R: ?Sized> {$/;"	s
BufReader	$RUST/src/io/copy.rs	/^impl<I> BufferedReaderSpec for BufReader<I>$/;"	c
BufReader	$RUST/src/sys/pal/unix/kernel_copy.rs	/^impl<T: ?Sized + CopyRead> CopyRead for BufReader<T> {$/;"	c
BufWriter	$RUST/src/io/buffered/bufwriter.rs	/^pub struct BufWriter<W: ?Sized + Write> {$/;"	s
BufWriter	$RUST/src/io/copy.rs	/^impl<I: Write + ?Sized> BufferedWriterSpec for BufWriter<I> {$/;"	c
BufWriter	$RUST/src/sys/pal/unix/kernel_copy.rs	/^impl<T: ?Sized + CopyWrite> CopyWrite for BufWriter<T> {$/;"	c
Buffer	$RUST/src/io/buffered/bufreader/buffer.rs	/^pub struct Buffer {$/;"	s
Buffer	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub Buffer: PWSTR,$/;"	m	struct:UNICODE_STRING
BufferedReaderSpec	$RUST/src/io/copy.rs	/^trait BufferedReaderSpec {$/;"	i
BufferedWriterSpec	$RUST/src/io/copy.rs	/^trait BufferedWriterSpec: Write {$/;"	i
Builder	$RUST/src/thread/mod.rs	/^pub struct Builder {$/;"	s
Builder	$RUST/src/thread/scoped.rs	/^impl Builder {$/;"	c
Bvr	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub Bvr: [u64; 8],$/;"	m	struct:CONTEXT
ByteBuffer	$RUST/src/sys/pal/sgx/abi/usercalls/alloc.rs	/^unsafe impl UserSafeSized for ByteBuffer {}$/;"	c
Bytes	$RUST/src/backtrace.rs	/^    Bytes(Vec<u8>),$/;"	e	enum:BytesOrWide
Bytes	$RUST/src/io/mod.rs	/^pub struct Bytes<R> {$/;"	s
BytesOrWide	$RUST/src/backtrace.rs	/^impl fmt::Debug for BytesOrWide {$/;"	c
CALLBACK_CHUNK_FINISHED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const CALLBACK_CHUNK_FINISHED: LPPROGRESS_ROUTINE_CALLBACK_REASON = 0u32;$/;"	C
CALLBACK_STREAM_SWITCH	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const CALLBACK_STREAM_SWITCH: LPPROGRESS_ROUTINE_CALLBACK_REASON = 1u32;$/;"	C
CALLED	$RUST/src/sync/lazy_lock/tests.rs	/^    static CALLED: AtomicUsize = AtomicUsize::new(0);$/;"	v	function:sync_lazy_new
CARET	$RUST/src/sys/pal/uefi/args.rs	/^    const CARET: char = '^';$/;"	C	function:parse_lp_cmd_line
CCRandomGenerateBytes	$RUST/src/sys/pal/unix/rand.rs	/^            fn CCRandomGenerateBytes(bytes: *mut c_void, count: size_t) -> c_int;$/;"	f	function:imp::ccrandom_fill_bytes	signature:(bytes: *mut c_void, count: size_t) -> c_int
CHAR	$RUST/src/sys/pal/windows/c.rs	/^pub type CHAR = c_char;$/;"	t
CLASS	$RUST/src/sys/pal/windows/api.rs	/^    const CLASS: i32;$/;"	C	interface:SizedSetFileInformation
CLEANUP	$RUST/src/rt.rs	/^    static CLEANUP: Once = Once::new();$/;"	v	function:cleanup
CLOEXEC_MSG_FOOTER	$RUST/src/sys/pal/unix/process/process_unix.rs	/^        const CLOEXEC_MSG_FOOTER: [u8; 4] = *b"NOEX";$/;"	C	method:Command::spawn
COLON	$RUST/src/sys/pal/windows/args.rs	/^    const COLON: u16 = b':' as _;$/;"	C	function:from_wide_to_user_path
COMPARESTRING_RESULT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub type COMPARESTRING_RESULT = i32;$/;"	t
COMPLETE	$RUST/src/sys_common/once/futex.rs	/^const COMPLETE: u32 = 4;$/;"	C
COMPLETE	$RUST/src/sys_common/once/queue.rs	/^const COMPLETE: usize = 0x3;$/;"	C
CONDITION_VARIABLE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub struct CONDITION_VARIABLE {$/;"	s
CONDITION_VARIABLE_INIT	$RUST/src/sys/pal/windows/c.rs	/^pub const CONDITION_VARIABLE_INIT: CONDITION_VARIABLE = CONDITION_VARIABLE { Ptr: ptr::null_mut(/;"	C
CONSOLE_MODE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub type CONSOLE_MODE = u32;$/;"	t
CONSOLE_READCONSOLE_CONTROL	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub struct CONSOLE_READCONSOLE_CONTROL {$/;"	s
CONST	$RUST/src/io/error/tests.rs	/^    const CONST: Error = const_io_error!(NotFound, "definitely a constant!");$/;"	C	function:test_simple_message_packing
CONTESTED_BIT	$RUST/src/sys/pal/unix/locks/fuchsia_mutex.rs	/^const CONTESTED_BIT: u32 = 1;$/;"	C
CONTEXT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub struct CONTEXT {$/;"	s
CONTEXT_0	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^impl ::core::marker::Copy for CONTEXT_0 {}$/;"	c
CONTEXT_0_0	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub struct CONTEXT_0_0 {$/;"	s
CONTEXT_FLAGS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub type CONTEXT_FLAGS = u32;$/;"	t
COPYFILE_ACL	$RUST/src/sys/pal/unix/fs.rs	/^    const COPYFILE_ACL: u32 = 1 << 0;$/;"	C	function:copy
COPYFILE_ALL	$RUST/src/sys/pal/unix/fs.rs	/^    const COPYFILE_ALL: u32 = COPYFILE_METADATA | COPYFILE_DATA;$/;"	C	function:copy
COPYFILE_DATA	$RUST/src/sys/pal/unix/fs.rs	/^    const COPYFILE_DATA: u32 = 1 << 3;$/;"	C	function:copy
COPYFILE_METADATA	$RUST/src/sys/pal/unix/fs.rs	/^    const COPYFILE_METADATA: u32 = COPYFILE_SECURITY | COPYFILE_XATTR;$/;"	C	function:copy
COPYFILE_SECURITY	$RUST/src/sys/pal/unix/fs.rs	/^    const COPYFILE_SECURITY: u32 = COPYFILE_STAT | COPYFILE_ACL;$/;"	C	function:copy
COPYFILE_STAT	$RUST/src/sys/pal/unix/fs.rs	/^    const COPYFILE_STAT: u32 = 1 << 1;$/;"	C	function:copy
COPYFILE_STATE_COPIED	$RUST/src/sys/pal/unix/fs.rs	/^    const COPYFILE_STATE_COPIED: u32 = 8;$/;"	C	function:copy
COPYFILE_XATTR	$RUST/src/sys/pal/unix/fs.rs	/^    const COPYFILE_XATTR: u32 = 1 << 2;$/;"	C	function:copy
CP_UTF8	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const CP_UTF8: u32 = 65001u32;$/;"	C
CREATE_ALWAYS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const CREATE_ALWAYS: FILE_CREATION_DISPOSITION = 2u32;$/;"	C
CREATE_BREAKAWAY_FROM_JOB	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const CREATE_BREAKAWAY_FROM_JOB: PROCESS_CREATION_FLAGS = 16777216u32;$/;"	C
CREATE_DEFAULT_ERROR_MODE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const CREATE_DEFAULT_ERROR_MODE: PROCESS_CREATION_FLAGS = 67108864u32;$/;"	C
CREATE_FORCEDOS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const CREATE_FORCEDOS: PROCESS_CREATION_FLAGS = 8192u32;$/;"	C
CREATE_IGNORE_SYSTEM_DEFAULT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const CREATE_IGNORE_SYSTEM_DEFAULT: PROCESS_CREATION_FLAGS = 2147483648u32;$/;"	C
CREATE_NEW	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const CREATE_NEW: FILE_CREATION_DISPOSITION = 1u32;$/;"	C
CREATE_NEW_CONSOLE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const CREATE_NEW_CONSOLE: PROCESS_CREATION_FLAGS = 16u32;$/;"	C
CREATE_NEW_PROCESS_GROUP	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const CREATE_NEW_PROCESS_GROUP: PROCESS_CREATION_FLAGS = 512u32;$/;"	C
CREATE_NO_WINDOW	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const CREATE_NO_WINDOW: PROCESS_CREATION_FLAGS = 134217728u32;$/;"	C
CREATE_PRESERVE_CODE_AUTHZ_LEVEL	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const CREATE_PRESERVE_CODE_AUTHZ_LEVEL: PROCESS_CREATION_FLAGS = 33554432u32;$/;"	C
CREATE_PROCESS_LOCK	$RUST/src/sys/pal/windows/process.rs	/^        static CREATE_PROCESS_LOCK: Mutex<()> = Mutex::new(());$/;"	v	method:Command::spawn
CREATE_PROTECTED_PROCESS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const CREATE_PROTECTED_PROCESS: PROCESS_CREATION_FLAGS = 262144u32;$/;"	C
CREATE_SECURE_PROCESS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const CREATE_SECURE_PROCESS: PROCESS_CREATION_FLAGS = 4194304u32;$/;"	C
CREATE_SEPARATE_WOW_VDM	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const CREATE_SEPARATE_WOW_VDM: PROCESS_CREATION_FLAGS = 2048u32;$/;"	C
CREATE_SHARED_WOW_VDM	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const CREATE_SHARED_WOW_VDM: PROCESS_CREATION_FLAGS = 4096u32;$/;"	C
CREATE_SUSPENDED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const CREATE_SUSPENDED: PROCESS_CREATION_FLAGS = 4u32;$/;"	C
CREATE_SUSPENDED	$RUST/src/sys/pal/windows/process/tests.rs	/^    const CREATE_SUSPENDED: u32 = 0x00000004;$/;"	C	function:test_thread_handle
CREATE_UNICODE_ENVIRONMENT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const CREATE_UNICODE_ENVIRONMENT: PROCESS_CREATION_FLAGS = 1024u32;$/;"	C
CREATE_WAITABLE_TIMER_HIGH_RESOLUTION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const CREATE_WAITABLE_TIMER_HIGH_RESOLUTION: u32 = 2u32;$/;"	C
CREATE_WAITABLE_TIMER_MANUAL_RESET	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const CREATE_WAITABLE_TIMER_MANUAL_RESET: u32 = 1u32;$/;"	C
CSTR_EQUAL	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const CSTR_EQUAL: COMPARESTRING_RESULT = 2i32;$/;"	C
CSTR_GREATER_THAN	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const CSTR_GREATER_THAN: COMPARESTRING_RESULT = 3i32;$/;"	C
CSTR_LESS_THAN	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const CSTR_LESS_THAN: COMPARESTRING_RESULT = 1i32;$/;"	C
CStringArray	$RUST/src/sys/pal/unix/process/process_common.rs	/^pub struct CStringArray {$/;"	s
CTRL_Z	$RUST/src/sys/pal/windows/stdio.rs	/^    const CTRL_Z: u16 = 0x1A;$/;"	C	function:read_u16s
CTRL_Z_MASK	$RUST/src/sys/pal/windows/stdio.rs	/^    const CTRL_Z_MASK: c::ULONG = 1 << CTRL_Z;$/;"	C	function:read_u16s
CURSOR	$RUST/src/io/cursor/tests.rs	/^    const CURSOR: Cursor<&[u8]> = Cursor::new(&[0]);$/;"	C	function:const_cursor
C_RWLOCK_INIT	$RUST/src/sys/pal/sgx/rwlock/tests.rs	/^    const C_RWLOCK_INIT: *mut () = ptr::null_mut();$/;"	C	function:test_c_rwlock_initializer
CachePadded	$RUST/src/sync/mpmc/utils.rs	/^pub struct CachePadded<T> {$/;"	s
Call	$RUST/src/io/buffered/tests.rs	/^    enum Call {$/;"	g	function:line_vectored_partial_and_errors
Cancel	$RUST/src/sys/pal/sgx/abi/usercalls/alloc.rs	/^unsafe impl UserSafeSized for Cancel {}$/;"	c
CancelIo	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn CancelIo(hfile: HANDLE) -> BOOL;$/;"	f	signature:(hfile: HANDLE) -> BOOL
Capture	$RUST/src/backtrace.rs	/^struct Capture {$/;"	s
Captured	$RUST/src/backtrace.rs	/^    Captured,$/;"	e	enum:BacktraceStatus
Catch	$RUST/src/sys/personality/dwarf/eh.rs	/^    Catch(LPad),$/;"	e	enum:EHAction
Cgroup	$RUST/src/sys/pal/unix/thread.rs	/^    enum Cgroup {$/;"	g	module:cgroups
Chain	$RUST/src/io/mod.rs	/^pub struct Chain<T, U> {$/;"	s
ChainEntries	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub ChainEntries: [u32; 7],$/;"	m	struct:WSAPROTOCOLCHAIN
ChainLen	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub ChainLen: i32,$/;"	m	struct:WSAPROTOCOLCHAIN
ChangeTime	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub ChangeTime: i64,$/;"	m	struct:FILE_ID_BOTH_DIR_INFO
Channel	$RUST/src/sync/mpmc/array.rs	/^pub(crate) struct Channel<T> {$/;"	s
Channel	$RUST/src/sync/mpmc/list.rs	/^pub(crate) struct Channel<T> {$/;"	s
Channel	$RUST/src/sync/mpmc/zero.rs	/^pub(crate) struct Channel<T> {$/;"	s
Child	$RUST/src/os/windows/process.rs	/^impl IntoRawHandle for process::Child {$/;"	c
Child	$RUST/src/process.rs	/^pub struct Child {$/;"	s
Child	$RUST/src/sys/pal/unix/process/process_unix.rs	/^impl crate::os::linux::process::ChildExt for crate::process::Child {$/;"	c
ChildExt	$RUST/src/os/linux/process.rs	/^pub trait ChildExt: Sealed {$/;"	i
ChildExt	$RUST/src/os/windows/process.rs	/^pub trait ChildExt: Sealed {$/;"	i
ChildPipes	$RUST/src/sys/pal/unix/process/process_common.rs	/^pub struct ChildPipes {$/;"	s
ChildStderr	$RUST/src/os/unix/process.rs	/^impl IntoRawFd for process::ChildStderr {$/;"	c
ChildStderr	$RUST/src/os/windows/io/handle.rs	/^impl AsHandle for crate::process::ChildStderr {$/;"	c
ChildStderr	$RUST/src/os/windows/process.rs	/^impl IntoRawHandle for process::ChildStderr {$/;"	c
ChildStderr	$RUST/src/process.rs	/^pub struct ChildStderr {$/;"	s
ChildStderr	$RUST/src/sys/pal/unix/kernel_copy.rs	/^impl CopyRead for ChildStderr {$/;"	c
ChildStdin	$RUST/src/os/unix/process.rs	/^impl IntoRawFd for process::ChildStdin {$/;"	c
ChildStdin	$RUST/src/os/windows/io/handle.rs	/^impl AsHandle for crate::process::ChildStdin {$/;"	c
ChildStdin	$RUST/src/os/windows/process.rs	/^impl IntoRawHandle for process::ChildStdin {$/;"	c
ChildStdin	$RUST/src/process.rs	/^pub struct ChildStdin {$/;"	s
ChildStdin	$RUST/src/sys/pal/unix/kernel_copy.rs	/^impl CopyWrite for ChildStdin {$/;"	c
ChildStdio	$RUST/src/sys/pal/unix/process/process_common.rs	/^pub enum ChildStdio {$/;"	g
ChildStdout	$RUST/src/os/unix/process.rs	/^impl IntoRawFd for process::ChildStdout {$/;"	c
ChildStdout	$RUST/src/os/windows/io/handle.rs	/^impl AsHandle for crate::process::ChildStdout {$/;"	c
ChildStdout	$RUST/src/os/windows/process.rs	/^impl IntoRawHandle for process::ChildStdout {$/;"	c
ChildStdout	$RUST/src/process.rs	/^pub struct ChildStdout {$/;"	s
ChildStdout	$RUST/src/sys/pal/unix/kernel_copy.rs	/^impl CopyRead for ChildStdout {$/;"	c
Cleanup	$RUST/src/sys/personality/dwarf/eh.rs	/^    Cleanup(LPad),$/;"	e	enum:EHAction
CloseHandle	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn CloseHandle(hobject: HANDLE) -> BOOL;$/;"	f	signature:(hobject: HANDLE) -> BOOL
CodePoint	$RUST/src/sys_common/wtf8.rs	/^pub struct CodePoint {$/;"	s
Command	$RUST/src/os/linux/process.rs	/^impl CommandExt for process::Command {$/;"	c
Command	$RUST/src/os/unix/process.rs	/^impl CommandExt for process::Command {$/;"	c
Command	$RUST/src/os/windows/process.rs	/^impl CommandExt for process::Command {$/;"	c
Command	$RUST/src/process.rs	/^pub struct Command {$/;"	s
Command	$RUST/src/sys/pal/unix/process/process_common.rs	/^pub struct Command {$/;"	s
Command	$RUST/src/sys/pal/unix/process/process_fuchsia.rs	/^impl Command {$/;"	c
Command	$RUST/src/sys/pal/unix/process/process_unix.rs	/^impl Command {$/;"	c
Command	$RUST/src/sys/pal/unix/process/process_unsupported.rs	/^impl Command {$/;"	c
Command	$RUST/src/sys/pal/unix/process/process_vxworks.rs	/^impl Command {$/;"	c
Command	$RUST/src/sys/pal/unsupported/process.rs	/^pub struct Command {$/;"	s
Command	$RUST/src/sys/pal/windows/process.rs	/^pub struct Command {$/;"	s
CommandArgs	$RUST/src/process.rs	/^pub struct CommandArgs<'a> {$/;"	s
CommandArgs	$RUST/src/sys/pal/unix/process/process_common.rs	/^pub struct CommandArgs<'a> {$/;"	s
CommandArgs	$RUST/src/sys/pal/unsupported/process.rs	/^pub struct CommandArgs<'a> {$/;"	s
CommandArgs	$RUST/src/sys/pal/windows/process.rs	/^pub struct CommandArgs<'a> {$/;"	s
CommandEnv	$RUST/src/sys_common/process.rs	/^pub struct CommandEnv {$/;"	s
CommandEnvs	$RUST/src/sys_common/process.rs	/^pub struct CommandEnvs<'a> {$/;"	s
CommandExt	$RUST/src/os/linux/process.rs	/^pub trait CommandExt: Sealed {$/;"	i
CommandExt	$RUST/src/os/unix/process.rs	/^pub trait CommandExt: Sealed {$/;"	i
CommandExt	$RUST/src/os/windows/process.rs	/^pub trait CommandExt: Sealed {$/;"	i
CompareStringOrdinal	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn CompareStringOrdinal($/;"	f	signature:( lpstring1: PCWSTR, cchcount1: i32, lpstring2: PCWSTR, cchcount2: i32, bignorecase: BOOL, ) -> COMPARESTRING_RESULT
Complete	$RUST/src/sync/once.rs	/^    Complete,$/;"	e	enum:ExclusiveState
Complete	$RUST/src/sys/pal/unsupported/once.rs	/^    Complete,$/;"	e	enum:State
CompletionGuard	$RUST/src/sys/pal/unsupported/once.rs	/^struct CompletionGuard<'a> {$/;"	s
CompletionGuard	$RUST/src/sys_common/once/futex.rs	/^struct CompletionGuard<'a> {$/;"	s
Component	$RUST/src/path.rs	/^pub enum Component<'a> {$/;"	g
Components	$RUST/src/path.rs	/^pub struct Components<'a> {$/;"	s
Condvar	$RUST/src/sync/condvar.rs	/^pub struct Condvar {$/;"	s
Condvar	$RUST/src/sys/pal/itron/condvar.rs	/^unsafe impl Sync for Condvar {}$/;"	c
Condvar	$RUST/src/sys/pal/sgx/condvar.rs	/^pub struct Condvar {$/;"	s
Condvar	$RUST/src/sys/pal/teeos/locks/condvar.rs	/^pub struct Condvar {$/;"	s
Condvar	$RUST/src/sys/pal/unix/locks/futex_condvar.rs	/^pub struct Condvar {$/;"	s
Condvar	$RUST/src/sys/pal/unix/locks/pthread_condvar.rs	/^pub struct Condvar {$/;"	s
Condvar	$RUST/src/sys/pal/unsupported/locks/condvar.rs	/^pub struct Condvar {}$/;"	s
Condvar	$RUST/src/sys/pal/windows/locks/condvar.rs	/^unsafe impl Sync for Condvar {}$/;"	c
Condvar	$RUST/src/sys/pal/xous/locks/condvar.rs	/^unsafe impl Sync for Condvar {}$/;"	c
Connect	$RUST/src/os/xous/ffi/definitions.rs	/^    Connect = 17,$/;"	e	enum:Syscall
ConnectRequest	$RUST/src/os/xous/services.rs	/^    struct ConnectRequest {$/;"	s	module:ns
ConnectRequest	$RUST/src/sys/pal/xous/net/mod.rs	/^struct ConnectRequest {$/;"	s
Connection	$RUST/src/os/xous/ffi/definitions.rs	/^pub struct Connection(u32);$/;"	s
ConnectionAborted	$RUST/src/io/error.rs	/^    ConnectionAborted,$/;"	e	enum:ErrorKind
ConnectionId	$RUST/src/os/xous/ffi/definitions.rs	/^    ConnectionId = 7,$/;"	e	enum:SyscallResult
ConnectionRefused	$RUST/src/io/error.rs	/^    ConnectionRefused,$/;"	e	enum:ErrorKind
ConnectionReset	$RUST/src/io/error.rs	/^    ConnectionReset,$/;"	e	enum:ErrorKind
Context	$RUST/src/sync/mpmc/context.rs	/^pub struct Context {$/;"	s
ContextFlags	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub ContextFlags: CONTEXT_FLAGS,$/;"	m	struct:CONTEXT
ContinueDebugEvent	$RUST/src/process/tests.rs	/^        fn ContinueDebugEvent($/;"	f	function:test_creation_flags	signature:( dwProcessId: DWORD, dwThreadId: DWORD, dwContinueStatus: DWORD, ) -> BOOL
ControlWord	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub ControlWord: u32,$/;"	m	struct:FLOATING_SAVE_AREA
Copier	$RUST/src/sys/pal/unix/kernel_copy.rs	/^struct Copier<'a, 'b, R: Read + ?Sized, W: Write + ?Sized> {$/;"	s
CopyFileExW	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn CopyFileExW($/;"	f	signature:( lpexistingfilename: PCWSTR, lpnewfilename: PCWSTR, lpprogressroutine: LPPROGRESS_ROUTINE, lpdata: *const ::core::ffi::c_void, pbcancel: *mut BOOL, dwcopyflags: u32, ) -> BOOL
CopyParams	$RUST/src/sys/pal/unix/kernel_copy.rs	/^struct CopyParams(FdMeta, Option<RawFd>);$/;"	s
CopyRead	$RUST/src/sys/pal/unix/kernel_copy.rs	/^trait CopyRead: Read {$/;"	i
CopyResult	$RUST/src/sys/pal/unix/kernel_copy.rs	/^pub(super) enum CopyResult {$/;"	g
CopyWrite	$RUST/src/sys/pal/unix/kernel_copy.rs	/^trait CopyWrite: Write {$/;"	i
Counter	$RUST/src/sync/mpmc/counter.rs	/^struct Counter<C> {$/;"	s
Cow	$RUST/src/ffi/os_str.rs	/^impl<'a> From<OsString> for Cow<'a, OsStr> {$/;"	c
Cow	$RUST/src/path.rs	/^impl<'a> From<PathBuf> for Cow<'a, Path> {$/;"	c
Cpsr	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub Cpsr: u32,$/;"	m	struct:CONTEXT
Cr0NpxState	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub Cr0NpxState: u32,$/;"	m	struct:FLOATING_SAVE_AREA
CreateDirectoryW	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn CreateDirectoryW($/;"	f	signature:( lppathname: PCWSTR, lpsecurityattributes: *const SECURITY_ATTRIBUTES, ) -> BOOL
CreateEventW	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn CreateEventW($/;"	f	signature:( lpeventattributes: *const SECURITY_ATTRIBUTES, bmanualreset: BOOL, binitialstate: BOOL, lpname: PCWSTR, ) -> HANDLE
CreateFileW	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn CreateFileW($/;"	f	signature:( lpfilename: PCWSTR, dwdesiredaccess: u32, dwsharemode: FILE_SHARE_MODE, lpsecurityattributes: *const SECURITY_ATTRIBUTES, dwcreationdisposition: FILE_CREATION_DISPOSITION, dwflagsandattributes: FILE_FLAGS_AND_ATTRIBUTES, htemplatefile: HANDLE, ) -> HANDLE
CreateHardLinkW	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn CreateHardLinkW($/;"	f	signature:( lpfilename: PCWSTR, lpexistingfilename: PCWSTR, lpsecurityattributes: *const SECURITY_ATTRIBUTES, ) -> BOOL
CreateNamedPipeW	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn CreateNamedPipeW($/;"	f	signature:( lpname: PCWSTR, dwopenmode: FILE_FLAGS_AND_ATTRIBUTES, dwpipemode: NAMED_PIPE_MODE, nmaxinstances: u32, noutbuffersize: u32, ninbuffersize: u32, ndefaulttimeout: u32, lpsecurityattributes: *const SECURITY_ATTRIBUTES, ) -> HANDLE
CreateProcessW	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn CreateProcessW($/;"	f	signature:( lpapplicationname: PCWSTR, lpcommandline: PWSTR, lpprocessattributes: *const SECURITY_ATTRIBUTES, lpthreadattributes: *const SECURITY_ATTRIBUTES, binherithandles: BOOL, dwcreationflags: PROCESS_CREATION_FLAGS, lpenvironment: *const ::core::ffi::c_void, lpcurrentdirectory: PCWSTR, lpstartupinfo: *const STARTUPINFOW, lpprocessinformation: *mut PROCESS_INFORMATION, ) -> BOOL
CreateSymbolicLinkW	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn CreateSymbolicLinkW($/;"	f	signature:( lpsymlinkfilename: PCWSTR, lptargetfilename: PCWSTR, dwflags: SYMBOLIC_LINK_FLAGS, ) -> BOOLEAN
CreateThread	$RUST/src/os/xous/ffi/definitions.rs	/^    CreateThread = 18,$/;"	e	enum:Syscall
CreateThread	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn CreateThread($/;"	f	signature:( lpthreadattributes: *const SECURITY_ATTRIBUTES, dwstacksize: usize, lpstartaddress: LPTHREAD_START_ROUTINE, lpparameter: *const ::core::ffi::c_void, dwcreationflags: THREAD_CREATION_FLAGS, lpthreadid: *mut u32, ) -> HANDLE
CreateToolhelp32Snapshot	$RUST/src/process/tests.rs	/^        fn CreateToolhelp32Snapshot(dwflags: u32, th32processid: u32) -> HANDLE;$/;"	f	function:test_proc_thread_attributes	signature:(dwflags: u32, th32processid: u32) -> HANDLE
CreateWaitableTimerExW	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn CreateWaitableTimerExW($/;"	f	signature:( lptimerattributes: *const SECURITY_ATTRIBUTES, lptimername: PCWSTR, dwflags: u32, dwdesiredaccess: u32, ) -> HANDLE
CreationTime	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub CreationTime: i64,$/;"	m	struct:FILE_ID_BOTH_DIR_INFO
CrossesDevices	$RUST/src/io/error.rs	/^    CrossesDevices,$/;"	e	enum:ErrorKind
CurDir	$RUST/src/path.rs	/^    CurDir,$/;"	e	enum:Component
Current	$RUST/src/io/mod.rs	/^    Current(#[stable(feature = "rust1", since = "1.0.0")] i64),$/;"	e	enum:SeekFrom
Cursor	$RUST/src/io/cursor.rs	/^pub struct Cursor<T> {$/;"	s
Custom	$RUST/src/io/error.rs	/^struct Custom {$/;"	s
Custom	$RUST/src/panicking.rs	/^    Custom(Box<dyn Fn(&PanicInfo<'_>) + 'static + Sync + Send>),$/;"	e	enum:Hook
DBG_EXCEPTION_NOT_HANDLED	$RUST/src/process/tests.rs	/^    const DBG_EXCEPTION_NOT_HANDLED: DWORD = 0x80010001;$/;"	C	function:test_creation_flags
DEBUG	$RUST/src/sys/pal/sgx/abi/panic.rs	/^    static DEBUG: u8;$/;"	v
DEBUG_EVENT	$RUST/src/process/tests.rs	/^    struct DEBUG_EVENT {$/;"	s	function:test_creation_flags
DEBUG_ONLY_THIS_PROCESS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DEBUG_ONLY_THIS_PROCESS: PROCESS_CREATION_FLAGS = 2u32;$/;"	C
DEBUG_PROCESS	$RUST/src/process/tests.rs	/^    const DEBUG_PROCESS: DWORD = 1;$/;"	C	function:test_creation_flags
DEBUG_PROCESS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DEBUG_PROCESS: PROCESS_CREATION_FLAGS = 1u32;$/;"	C
DEFAULT	$RUST/src/sys/pal/unix/mod.rs	/^                pub const DEFAULT: u8 = 0;$/;"	C	module:init::reset_sigpipe::sigpipe
DEFAULT_BUF_SIZE	$RUST/src/io/mod.rs	/^const DEFAULT_BUF_SIZE: usize = crate::sys_common::io::DEFAULT_BUF_SIZE;$/;"	C
DEFAULT_BUF_SIZE	$RUST/src/sys_common/io.rs	/^pub const DEFAULT_BUF_SIZE: usize = if cfg!(target_os = "espidf") { 512 } else { 8 * 1024 };$/;"	C
DEFAULT_FAKE_TTL	$RUST/src/sys/pal/sgx/net.rs	/^const DEFAULT_FAKE_TTL: u32 = 64;$/;"	C
DEFAULT_MIN_STACK_SIZE	$RUST/src/sys/pal/hermit/thread.rs	/^pub const DEFAULT_MIN_STACK_SIZE: usize = 1 << 20;$/;"	C
DEFAULT_MIN_STACK_SIZE	$RUST/src/sys/pal/itron/thread.rs	/^pub const DEFAULT_MIN_STACK_SIZE: usize = 0x4000 * crate::mem::size_of::<usize>();$/;"	C
DEFAULT_MIN_STACK_SIZE	$RUST/src/sys/pal/sgx/thread.rs	/^pub const DEFAULT_MIN_STACK_SIZE: usize = 4096;$/;"	C
DEFAULT_MIN_STACK_SIZE	$RUST/src/sys/pal/teeos/thread.rs	/^pub const DEFAULT_MIN_STACK_SIZE: usize = 8 * 1024;$/;"	C
DEFAULT_MIN_STACK_SIZE	$RUST/src/sys/pal/unix/thread.rs	/^pub const DEFAULT_MIN_STACK_SIZE: usize = 256 * 1024;$/;"	C
DEFAULT_MIN_STACK_SIZE	$RUST/src/sys/pal/unsupported/thread.rs	/^pub const DEFAULT_MIN_STACK_SIZE: usize = 4096;$/;"	C
DEFAULT_MIN_STACK_SIZE	$RUST/src/sys/pal/wasi/thread.rs	/^pub const DEFAULT_MIN_STACK_SIZE: usize = 4096;$/;"	C
DEFAULT_MIN_STACK_SIZE	$RUST/src/sys/pal/wasm/atomics/thread.rs	/^pub const DEFAULT_MIN_STACK_SIZE: usize = 4096;$/;"	C
DEFAULT_MIN_STACK_SIZE	$RUST/src/sys/pal/windows/thread.rs	/^pub const DEFAULT_MIN_STACK_SIZE: usize = 2 * 1024 * 1024;$/;"	C
DEFAULT_MIN_STACK_SIZE	$RUST/src/sys/pal/xous/thread.rs	/^pub const DEFAULT_MIN_STACK_SIZE: usize = 131072;$/;"	C
DELETE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DELETE: FILE_ACCESS_RIGHTS = 65536u32;$/;"	C
DESCRIPTION	$RUST/src/io/buffered/bufwriter.rs	/^    const DESCRIPTION: &'static str =$/;"	C	implementation:WriterPanicked
DESTROY	$RUST/src/sync/mpmc/list.rs	/^const DESTROY: usize = 4;$/;"	C
DESTRUCTORS	$RUST/src/sys/pal/windows/thread_local_key.rs	/^static DESTRUCTORS: crate::cell::RefCell<Vec<(*mut u8, unsafe extern "C" fn(*mut u8))>> =$/;"	v
DETACHED_PROCESS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DETACHED_PROCESS: PROCESS_CREATION_FLAGS = 8u32;$/;"	C
DIGEST_WORDS	$RUST/src/sys/pal/zkvm/abi.rs	/^pub const DIGEST_WORDS: usize = 8;$/;"	C
DISABLE_NEWLINE_AUTO_RETURN	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DISABLE_NEWLINE_AUTO_RETURN: CONSOLE_MODE = 8u32;$/;"	C
DISALLOWED	$RUST/src/sys/pal/windows/args.rs	/^                const DISALLOWED: &[u8] = b"\\r\\n";$/;"	C	function:make_bat_command_line
DISPATCH_TIME_FOREVER	$RUST/src/sys/pal/unix/thread_parking/darwin.rs	/^const DISPATCH_TIME_FOREVER: dispatch_time_t = !0;$/;"	C
DISPATCH_TIME_NOW	$RUST/src/sys/pal/unix/thread_parking/darwin.rs	/^const DISPATCH_TIME_NOW: dispatch_time_t = 0;$/;"	C
DLL_EXTENSION	$RUST/src/env.rs	/^    pub const DLL_EXTENSION: &str = os::DLL_EXTENSION;$/;"	C	module:consts
DLL_EXTENSION	$RUST/src/sys/pal/hermit/env.rs	/^    pub const DLL_EXTENSION: &str = "";$/;"	C	module:os
DLL_EXTENSION	$RUST/src/sys/pal/sgx/env.rs	/^    pub const DLL_EXTENSION: &str = "sgxs";$/;"	C	module:os
DLL_EXTENSION	$RUST/src/sys/pal/solid/env.rs	/^    pub const DLL_EXTENSION: &str = "so";$/;"	C	module:os
DLL_EXTENSION	$RUST/src/sys/pal/uefi/env.rs	/^    pub const DLL_EXTENSION: &str = "";$/;"	C	module:os
DLL_EXTENSION	$RUST/src/sys/pal/unix/env.rs	/^    pub const DLL_EXTENSION: &str = "so";$/;"	C	module:os
DLL_EXTENSION	$RUST/src/sys/pal/unsupported/env.rs	/^    pub const DLL_EXTENSION: &str = "";$/;"	C	module:os
DLL_EXTENSION	$RUST/src/sys/pal/wasi/env.rs	/^    pub const DLL_EXTENSION: &str = "wasm";$/;"	C	module:os
DLL_EXTENSION	$RUST/src/sys/pal/wasm/env.rs	/^    pub const DLL_EXTENSION: &str = "wasm";$/;"	C	module:os
DLL_EXTENSION	$RUST/src/sys/pal/windows/env.rs	/^    pub const DLL_EXTENSION: &str = "dll";$/;"	C	module:os
DLL_EXTENSION	$RUST/src/sys/pal/zkvm/env.rs	/^    pub const DLL_EXTENSION: &str = "elf";$/;"	C	module:os
DLL_PREFIX	$RUST/src/env.rs	/^    pub const DLL_PREFIX: &str = os::DLL_PREFIX;$/;"	C	module:consts
DLL_PREFIX	$RUST/src/sys/pal/hermit/env.rs	/^    pub const DLL_PREFIX: &str = "";$/;"	C	module:os
DLL_PREFIX	$RUST/src/sys/pal/sgx/env.rs	/^    pub const DLL_PREFIX: &str = "";$/;"	C	module:os
DLL_PREFIX	$RUST/src/sys/pal/solid/env.rs	/^    pub const DLL_PREFIX: &str = "";$/;"	C	module:os
DLL_PREFIX	$RUST/src/sys/pal/uefi/env.rs	/^    pub const DLL_PREFIX: &str = "";$/;"	C	module:os
DLL_PREFIX	$RUST/src/sys/pal/unix/env.rs	/^    pub const DLL_PREFIX: &str = "lib";$/;"	C	module:os
DLL_PREFIX	$RUST/src/sys/pal/unsupported/env.rs	/^    pub const DLL_PREFIX: &str = "";$/;"	C	module:os
DLL_PREFIX	$RUST/src/sys/pal/wasi/env.rs	/^    pub const DLL_PREFIX: &str = "";$/;"	C	module:os
DLL_PREFIX	$RUST/src/sys/pal/wasm/env.rs	/^    pub const DLL_PREFIX: &str = "";$/;"	C	module:os
DLL_PREFIX	$RUST/src/sys/pal/windows/env.rs	/^    pub const DLL_PREFIX: &str = "";$/;"	C	module:os
DLL_PREFIX	$RUST/src/sys/pal/zkvm/env.rs	/^    pub const DLL_PREFIX: &str = "";$/;"	C	module:os
DLL_PROCESS_DETACH	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DLL_PROCESS_DETACH: u32 = 0u32;$/;"	C
DLL_SUFFIX	$RUST/src/env.rs	/^    pub const DLL_SUFFIX: &str = os::DLL_SUFFIX;$/;"	C	module:consts
DLL_SUFFIX	$RUST/src/sys/pal/hermit/env.rs	/^    pub const DLL_SUFFIX: &str = "";$/;"	C	module:os
DLL_SUFFIX	$RUST/src/sys/pal/sgx/env.rs	/^    pub const DLL_SUFFIX: &str = ".sgxs";$/;"	C	module:os
DLL_SUFFIX	$RUST/src/sys/pal/solid/env.rs	/^    pub const DLL_SUFFIX: &str = ".so";$/;"	C	module:os
DLL_SUFFIX	$RUST/src/sys/pal/uefi/env.rs	/^    pub const DLL_SUFFIX: &str = "";$/;"	C	module:os
DLL_SUFFIX	$RUST/src/sys/pal/unix/env.rs	/^    pub const DLL_SUFFIX: &str = ".so";$/;"	C	module:os
DLL_SUFFIX	$RUST/src/sys/pal/unsupported/env.rs	/^    pub const DLL_SUFFIX: &str = "";$/;"	C	module:os
DLL_SUFFIX	$RUST/src/sys/pal/wasi/env.rs	/^    pub const DLL_SUFFIX: &str = ".wasm";$/;"	C	module:os
DLL_SUFFIX	$RUST/src/sys/pal/wasm/env.rs	/^    pub const DLL_SUFFIX: &str = ".wasm";$/;"	C	module:os
DLL_SUFFIX	$RUST/src/sys/pal/windows/env.rs	/^    pub const DLL_SUFFIX: &str = ".dll";$/;"	C	module:os
DLL_SUFFIX	$RUST/src/sys/pal/zkvm/env.rs	/^    pub const DLL_SUFFIX: &str = ".elf";$/;"	C	module:os
DLL_THREAD_DETACH	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DLL_THREAD_DETACH: u32 = 3u32;$/;"	C
DLMALLOC	$RUST/src/sys/pal/sgx/alloc.rs	/^static DLMALLOC: SpinMutex<dlmalloc::Dlmalloc<Sgx>> =$/;"	v
DLMALLOC	$RUST/src/sys/pal/wasm/alloc.rs	/^static mut DLMALLOC: dlmalloc::Dlmalloc = dlmalloc::Dlmalloc::new();$/;"	v
DLMALLOC	$RUST/src/sys/pal/xous/alloc.rs	/^static mut DLMALLOC: dlmalloc::Dlmalloc = dlmalloc::Dlmalloc::new();$/;"	v
DLSYM	$RUST/src/sys/pal/unix/weak.rs	/^        static DLSYM: DlsymWeak<unsafe extern "C" fn($($t),*) -> $ret> =$/;"	v
DNS_CONNECTION	$RUST/src/os/xous/services/dns.rs	/^    static DNS_CONNECTION: AtomicU32 = AtomicU32::new(0);$/;"	v	function:dns_server
DNS_ERROR_ADDRESS_REQUIRED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_ADDRESS_REQUIRED: WIN32_ERROR = 9573u32;$/;"	C
DNS_ERROR_ALIAS_LOOP	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_ALIAS_LOOP: WIN32_ERROR = 9722u32;$/;"	C
DNS_ERROR_AUTOZONE_ALREADY_EXISTS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_AUTOZONE_ALREADY_EXISTS: WIN32_ERROR = 9610u32;$/;"	C
DNS_ERROR_AXFR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_AXFR: WIN32_ERROR = 9752u32;$/;"	C
DNS_ERROR_BACKGROUND_LOADING	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_BACKGROUND_LOADING: WIN32_ERROR = 9568u32;$/;"	C
DNS_ERROR_BAD_KEYMASTER	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_BAD_KEYMASTER: WIN32_ERROR = 9122u32;$/;"	C
DNS_ERROR_BAD_PACKET	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_BAD_PACKET: WIN32_ERROR = 9502u32;$/;"	C
DNS_ERROR_CANNOT_FIND_ROOT_HINTS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_CANNOT_FIND_ROOT_HINTS: WIN32_ERROR = 9564u32;$/;"	C
DNS_ERROR_CLIENT_SUBNET_ALREADY_EXISTS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_CLIENT_SUBNET_ALREADY_EXISTS: WIN32_ERROR = 9977u32;$/;"	C
DNS_ERROR_CLIENT_SUBNET_DOES_NOT_EXIST	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_CLIENT_SUBNET_DOES_NOT_EXIST: WIN32_ERROR = 9976u32;$/;"	C
DNS_ERROR_CLIENT_SUBNET_IS_ACCESSED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_CLIENT_SUBNET_IS_ACCESSED: WIN32_ERROR = 9975u32;$/;"	C
DNS_ERROR_CNAME_COLLISION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_CNAME_COLLISION: WIN32_ERROR = 9709u32;$/;"	C
DNS_ERROR_CNAME_LOOP	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_CNAME_LOOP: WIN32_ERROR = 9707u32;$/;"	C
DNS_ERROR_DATAFILE_OPEN_FAILURE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_DATAFILE_OPEN_FAILURE: WIN32_ERROR = 9653u32;$/;"	C
DNS_ERROR_DATAFILE_PARSING	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_DATAFILE_PARSING: WIN32_ERROR = 9655u32;$/;"	C
DNS_ERROR_DEFAULT_SCOPE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_DEFAULT_SCOPE: WIN32_ERROR = 9960u32;$/;"	C
DNS_ERROR_DEFAULT_VIRTUALIZATION_INSTANCE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_DEFAULT_VIRTUALIZATION_INSTANCE: WIN32_ERROR = 9925u32;$/;"	C
DNS_ERROR_DEFAULT_ZONESCOPE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_DEFAULT_ZONESCOPE: WIN32_ERROR = 9953u32;$/;"	C
DNS_ERROR_DELEGATION_REQUIRED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_DELEGATION_REQUIRED: WIN32_ERROR = 9571u32;$/;"	C
DNS_ERROR_DNAME_COLLISION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_DNAME_COLLISION: WIN32_ERROR = 9721u32;$/;"	C
DNS_ERROR_DNSSEC_IS_DISABLED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_DNSSEC_IS_DISABLED: WIN32_ERROR = 9125u32;$/;"	C
DNS_ERROR_DP_ALREADY_ENLISTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_DP_ALREADY_ENLISTED: WIN32_ERROR = 9904u32;$/;"	C
DNS_ERROR_DP_ALREADY_EXISTS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_DP_ALREADY_EXISTS: WIN32_ERROR = 9902u32;$/;"	C
DNS_ERROR_DP_DOES_NOT_EXIST	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_DP_DOES_NOT_EXIST: WIN32_ERROR = 9901u32;$/;"	C
DNS_ERROR_DP_FSMO_ERROR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_DP_FSMO_ERROR: WIN32_ERROR = 9906u32;$/;"	C
DNS_ERROR_DP_NOT_AVAILABLE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_DP_NOT_AVAILABLE: WIN32_ERROR = 9905u32;$/;"	C
DNS_ERROR_DP_NOT_ENLISTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_DP_NOT_ENLISTED: WIN32_ERROR = 9903u32;$/;"	C
DNS_ERROR_DS_UNAVAILABLE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_DS_UNAVAILABLE: WIN32_ERROR = 9717u32;$/;"	C
DNS_ERROR_DS_ZONE_ALREADY_EXISTS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_DS_ZONE_ALREADY_EXISTS: WIN32_ERROR = 9718u32;$/;"	C
DNS_ERROR_DWORD_VALUE_TOO_LARGE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_DWORD_VALUE_TOO_LARGE: WIN32_ERROR = 9567u32;$/;"	C
DNS_ERROR_DWORD_VALUE_TOO_SMALL	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_DWORD_VALUE_TOO_SMALL: WIN32_ERROR = 9566u32;$/;"	C
DNS_ERROR_FILE_WRITEBACK_FAILED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_FILE_WRITEBACK_FAILED: WIN32_ERROR = 9654u32;$/;"	C
DNS_ERROR_FORWARDER_ALREADY_EXISTS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_FORWARDER_ALREADY_EXISTS: WIN32_ERROR = 9619u32;$/;"	C
DNS_ERROR_INCONSISTENT_ROOT_HINTS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_INCONSISTENT_ROOT_HINTS: WIN32_ERROR = 9565u32;$/;"	C
DNS_ERROR_INVAILD_VIRTUALIZATION_INSTANCE_NAME	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_INVAILD_VIRTUALIZATION_INSTANCE_NAME: WIN32_ERROR = 9924u32;$/;"	C
DNS_ERROR_INVALID_CLIENT_SUBNET_NAME	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_INVALID_CLIENT_SUBNET_NAME: WIN32_ERROR = 9984u32;$/;"	C
DNS_ERROR_INVALID_DATA	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_INVALID_DATA: WIN32_ERROR = 13u32;$/;"	C
DNS_ERROR_INVALID_DATAFILE_NAME	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_INVALID_DATAFILE_NAME: WIN32_ERROR = 9652u32;$/;"	C
DNS_ERROR_INVALID_INITIAL_ROLLOVER_OFFSET	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_INVALID_INITIAL_ROLLOVER_OFFSET: WIN32_ERROR = 9115u32;$/;"	C
DNS_ERROR_INVALID_IP_ADDRESS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_INVALID_IP_ADDRESS: WIN32_ERROR = 9552u32;$/;"	C
DNS_ERROR_INVALID_KEY_SIZE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_INVALID_KEY_SIZE: WIN32_ERROR = 9106u32;$/;"	C
DNS_ERROR_INVALID_NAME	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_INVALID_NAME: WIN32_ERROR = 123u32;$/;"	C
DNS_ERROR_INVALID_NAME_CHAR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_INVALID_NAME_CHAR: WIN32_ERROR = 9560u32;$/;"	C
DNS_ERROR_INVALID_NSEC3_ITERATION_COUNT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_INVALID_NSEC3_ITERATION_COUNT: WIN32_ERROR = 9124u32;$/;"	C
DNS_ERROR_INVALID_POLICY_TABLE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_INVALID_POLICY_TABLE: WIN32_ERROR = 9572u32;$/;"	C
DNS_ERROR_INVALID_PROPERTY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_INVALID_PROPERTY: WIN32_ERROR = 9553u32;$/;"	C
DNS_ERROR_INVALID_ROLLOVER_PERIOD	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_INVALID_ROLLOVER_PERIOD: WIN32_ERROR = 9114u32;$/;"	C
DNS_ERROR_INVALID_SCOPE_NAME	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_INVALID_SCOPE_NAME: WIN32_ERROR = 9958u32;$/;"	C
DNS_ERROR_INVALID_SCOPE_OPERATION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_INVALID_SCOPE_OPERATION: WIN32_ERROR = 9961u32;$/;"	C
DNS_ERROR_INVALID_SIGNATURE_VALIDITY_PERIOD	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_INVALID_SIGNATURE_VALIDITY_PERIOD: WIN32_ERROR = 9123u32;$/;"	C
DNS_ERROR_INVALID_TYPE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_INVALID_TYPE: WIN32_ERROR = 9551u32;$/;"	C
DNS_ERROR_INVALID_XML	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_INVALID_XML: WIN32_ERROR = 9126u32;$/;"	C
DNS_ERROR_INVALID_ZONESCOPE_NAME	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_INVALID_ZONESCOPE_NAME: WIN32_ERROR = 9954u32;$/;"	C
DNS_ERROR_INVALID_ZONE_OPERATION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_INVALID_ZONE_OPERATION: WIN32_ERROR = 9603u32;$/;"	C
DNS_ERROR_INVALID_ZONE_TYPE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_INVALID_ZONE_TYPE: WIN32_ERROR = 9611u32;$/;"	C
DNS_ERROR_KEYMASTER_REQUIRED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_KEYMASTER_REQUIRED: WIN32_ERROR = 9101u32;$/;"	C
DNS_ERROR_KSP_DOES_NOT_SUPPORT_PROTECTION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_KSP_DOES_NOT_SUPPORT_PROTECTION: WIN32_ERROR = 9108u32;$/;"	C
DNS_ERROR_KSP_NOT_ACCESSIBLE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_KSP_NOT_ACCESSIBLE: WIN32_ERROR = 9112u32;$/;"	C
DNS_ERROR_LOAD_ZONESCOPE_FAILED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_LOAD_ZONESCOPE_FAILED: WIN32_ERROR = 9956u32;$/;"	C
DNS_ERROR_NAME_DOES_NOT_EXIST	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_NAME_DOES_NOT_EXIST: WIN32_ERROR = 9714u32;$/;"	C
DNS_ERROR_NAME_NOT_IN_ZONE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_NAME_NOT_IN_ZONE: WIN32_ERROR = 9706u32;$/;"	C
DNS_ERROR_NBSTAT_INIT_FAILED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_NBSTAT_INIT_FAILED: WIN32_ERROR = 9617u32;$/;"	C
DNS_ERROR_NEED_SECONDARY_ADDRESSES	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_NEED_SECONDARY_ADDRESSES: WIN32_ERROR = 9614u32;$/;"	C
DNS_ERROR_NEED_WINS_SERVERS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_NEED_WINS_SERVERS: WIN32_ERROR = 9616u32;$/;"	C
DNS_ERROR_NODE_CREATION_FAILED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_NODE_CREATION_FAILED: WIN32_ERROR = 9703u32;$/;"	C
DNS_ERROR_NODE_IS_CNAME	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_NODE_IS_CNAME: WIN32_ERROR = 9708u32;$/;"	C
DNS_ERROR_NODE_IS_DNAME	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_NODE_IS_DNAME: WIN32_ERROR = 9720u32;$/;"	C
DNS_ERROR_NON_RFC_NAME	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_NON_RFC_NAME: WIN32_ERROR = 9556u32;$/;"	C
DNS_ERROR_NOT_ALLOWED_ON_ACTIVE_SKD	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_NOT_ALLOWED_ON_ACTIVE_SKD: WIN32_ERROR = 9119u32;$/;"	C
DNS_ERROR_NOT_ALLOWED_ON_RODC	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_NOT_ALLOWED_ON_RODC: WIN32_ERROR = 9569u32;$/;"	C
DNS_ERROR_NOT_ALLOWED_ON_ROOT_SERVER	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_NOT_ALLOWED_ON_ROOT_SERVER: WIN32_ERROR = 9562u32;$/;"	C
DNS_ERROR_NOT_ALLOWED_ON_SIGNED_ZONE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_NOT_ALLOWED_ON_SIGNED_ZONE: WIN32_ERROR = 9102u32;$/;"	C
DNS_ERROR_NOT_ALLOWED_ON_UNSIGNED_ZONE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_NOT_ALLOWED_ON_UNSIGNED_ZONE: WIN32_ERROR = 9121u32;$/;"	C
DNS_ERROR_NOT_ALLOWED_ON_ZSK	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_NOT_ALLOWED_ON_ZSK: WIN32_ERROR = 9118u32;$/;"	C
DNS_ERROR_NOT_ALLOWED_UNDER_DELEGATION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_NOT_ALLOWED_UNDER_DELEGATION: WIN32_ERROR = 9563u32;$/;"	C
DNS_ERROR_NOT_ALLOWED_UNDER_DNAME	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_NOT_ALLOWED_UNDER_DNAME: WIN32_ERROR = 9570u32;$/;"	C
DNS_ERROR_NOT_ALLOWED_WITH_ZONESCOPES	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_NOT_ALLOWED_WITH_ZONESCOPES: WIN32_ERROR = 9955u32;$/;"	C
DNS_ERROR_NOT_ENOUGH_SIGNING_KEY_DESCRIPTORS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_NOT_ENOUGH_SIGNING_KEY_DESCRIPTORS: WIN32_ERROR = 9104u32;$/;"	C
DNS_ERROR_NOT_UNIQUE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_NOT_UNIQUE: WIN32_ERROR = 9555u32;$/;"	C
DNS_ERROR_NO_BOOTFILE_IF_DS_ZONE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_NO_BOOTFILE_IF_DS_ZONE: WIN32_ERROR = 9719u32;$/;"	C
DNS_ERROR_NO_CREATE_CACHE_DATA	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_NO_CREATE_CACHE_DATA: WIN32_ERROR = 9713u32;$/;"	C
DNS_ERROR_NO_DNS_SERVERS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_NO_DNS_SERVERS: WIN32_ERROR = 9852u32;$/;"	C
DNS_ERROR_NO_MEMORY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_NO_MEMORY: WIN32_ERROR = 14u32;$/;"	C
DNS_ERROR_NO_PACKET	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_NO_PACKET: WIN32_ERROR = 9503u32;$/;"	C
DNS_ERROR_NO_TCPIP	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_NO_TCPIP: WIN32_ERROR = 9851u32;$/;"	C
DNS_ERROR_NO_VALID_TRUST_ANCHORS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_NO_VALID_TRUST_ANCHORS: WIN32_ERROR = 9127u32;$/;"	C
DNS_ERROR_NO_ZONE_INFO	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_NO_ZONE_INFO: WIN32_ERROR = 9602u32;$/;"	C
DNS_ERROR_NSEC3_INCOMPATIBLE_WITH_RSA_SHA1	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_NSEC3_INCOMPATIBLE_WITH_RSA_SHA1: WIN32_ERROR = 9103u32;$/;"	C
DNS_ERROR_NSEC3_NAME_COLLISION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_NSEC3_NAME_COLLISION: WIN32_ERROR = 9129u32;$/;"	C
DNS_ERROR_NSEC_INCOMPATIBLE_WITH_NSEC3_RSA_SHA1	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_NSEC_INCOMPATIBLE_WITH_NSEC3_RSA_SHA1: WIN32_ERROR = 9130u32;$/;"	C
DNS_ERROR_NUMERIC_NAME	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_NUMERIC_NAME: WIN32_ERROR = 9561u32;$/;"	C
DNS_ERROR_POLICY_ALREADY_EXISTS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_POLICY_ALREADY_EXISTS: WIN32_ERROR = 9971u32;$/;"	C
DNS_ERROR_POLICY_DOES_NOT_EXIST	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_POLICY_DOES_NOT_EXIST: WIN32_ERROR = 9972u32;$/;"	C
DNS_ERROR_POLICY_INVALID_CRITERIA	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_POLICY_INVALID_CRITERIA: WIN32_ERROR = 9973u32;$/;"	C
DNS_ERROR_POLICY_INVALID_CRITERIA_CLIENT_SUBNET	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_POLICY_INVALID_CRITERIA_CLIENT_SUBNET: WIN32_ERROR = 9990u32;$/;"	C
DNS_ERROR_POLICY_INVALID_CRITERIA_FQDN	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_POLICY_INVALID_CRITERIA_FQDN: WIN32_ERROR = 9994u32;$/;"	C
DNS_ERROR_POLICY_INVALID_CRITERIA_INTERFACE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_POLICY_INVALID_CRITERIA_INTERFACE: WIN32_ERROR = 9993u32;$/;"	C
DNS_ERROR_POLICY_INVALID_CRITERIA_NETWORK_PROTOCOL	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_POLICY_INVALID_CRITERIA_NETWORK_PROTOCOL: WIN32_ERROR = 9992u32;$/;"	C
DNS_ERROR_POLICY_INVALID_CRITERIA_QUERY_TYPE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_POLICY_INVALID_CRITERIA_QUERY_TYPE: WIN32_ERROR = 9995u32;$/;"	C
DNS_ERROR_POLICY_INVALID_CRITERIA_TIME_OF_DAY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_POLICY_INVALID_CRITERIA_TIME_OF_DAY: WIN32_ERROR = 9996u32;$/;"	C
DNS_ERROR_POLICY_INVALID_CRITERIA_TRANSPORT_PROTOCOL	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_POLICY_INVALID_CRITERIA_TRANSPORT_PROTOCOL: WIN32_ERROR = 9991u32;$/;"	C
DNS_ERROR_POLICY_INVALID_NAME	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_POLICY_INVALID_NAME: WIN32_ERROR = 9982u32;$/;"	C
DNS_ERROR_POLICY_INVALID_SETTINGS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_POLICY_INVALID_SETTINGS: WIN32_ERROR = 9974u32;$/;"	C
DNS_ERROR_POLICY_INVALID_WEIGHT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_POLICY_INVALID_WEIGHT: WIN32_ERROR = 9981u32;$/;"	C
DNS_ERROR_POLICY_LOCKED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_POLICY_LOCKED: WIN32_ERROR = 9980u32;$/;"	C
DNS_ERROR_POLICY_MISSING_CRITERIA	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_POLICY_MISSING_CRITERIA: WIN32_ERROR = 9983u32;$/;"	C
DNS_ERROR_POLICY_PROCESSING_ORDER_INVALID	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_POLICY_PROCESSING_ORDER_INVALID: WIN32_ERROR = 9985u32;$/;"	C
DNS_ERROR_POLICY_SCOPE_MISSING	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_POLICY_SCOPE_MISSING: WIN32_ERROR = 9986u32;$/;"	C
DNS_ERROR_POLICY_SCOPE_NOT_ALLOWED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_POLICY_SCOPE_NOT_ALLOWED: WIN32_ERROR = 9987u32;$/;"	C
DNS_ERROR_PRIMARY_REQUIRES_DATAFILE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_PRIMARY_REQUIRES_DATAFILE: WIN32_ERROR = 9651u32;$/;"	C
DNS_ERROR_RCODE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_RCODE: WIN32_ERROR = 9504u32;$/;"	C
DNS_ERROR_RCODE_BADKEY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_RCODE_BADKEY: WIN32_ERROR = 9017u32;$/;"	C
DNS_ERROR_RCODE_BADSIG	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_RCODE_BADSIG: WIN32_ERROR = 9016u32;$/;"	C
DNS_ERROR_RCODE_BADTIME	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_RCODE_BADTIME: WIN32_ERROR = 9018u32;$/;"	C
DNS_ERROR_RCODE_FORMAT_ERROR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_RCODE_FORMAT_ERROR: WIN32_ERROR = 9001u32;$/;"	C
DNS_ERROR_RCODE_NAME_ERROR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_RCODE_NAME_ERROR: WIN32_ERROR = 9003u32;$/;"	C
DNS_ERROR_RCODE_NOTAUTH	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_RCODE_NOTAUTH: WIN32_ERROR = 9009u32;$/;"	C
DNS_ERROR_RCODE_NOTZONE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_RCODE_NOTZONE: WIN32_ERROR = 9010u32;$/;"	C
DNS_ERROR_RCODE_NOT_IMPLEMENTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_RCODE_NOT_IMPLEMENTED: WIN32_ERROR = 9004u32;$/;"	C
DNS_ERROR_RCODE_NXRRSET	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_RCODE_NXRRSET: WIN32_ERROR = 9008u32;$/;"	C
DNS_ERROR_RCODE_REFUSED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_RCODE_REFUSED: WIN32_ERROR = 9005u32;$/;"	C
DNS_ERROR_RCODE_SERVER_FAILURE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_RCODE_SERVER_FAILURE: WIN32_ERROR = 9002u32;$/;"	C
DNS_ERROR_RCODE_YXDOMAIN	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_RCODE_YXDOMAIN: WIN32_ERROR = 9006u32;$/;"	C
DNS_ERROR_RCODE_YXRRSET	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_RCODE_YXRRSET: WIN32_ERROR = 9007u32;$/;"	C
DNS_ERROR_RECORD_ALREADY_EXISTS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_RECORD_ALREADY_EXISTS: WIN32_ERROR = 9711u32;$/;"	C
DNS_ERROR_RECORD_DOES_NOT_EXIST	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_RECORD_DOES_NOT_EXIST: WIN32_ERROR = 9701u32;$/;"	C
DNS_ERROR_RECORD_FORMAT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_RECORD_FORMAT: WIN32_ERROR = 9702u32;$/;"	C
DNS_ERROR_RECORD_ONLY_AT_ZONE_ROOT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_RECORD_ONLY_AT_ZONE_ROOT: WIN32_ERROR = 9710u32;$/;"	C
DNS_ERROR_RECORD_TIMED_OUT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_RECORD_TIMED_OUT: WIN32_ERROR = 9705u32;$/;"	C
DNS_ERROR_ROLLOVER_ALREADY_QUEUED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_ROLLOVER_ALREADY_QUEUED: WIN32_ERROR = 9120u32;$/;"	C
DNS_ERROR_ROLLOVER_IN_PROGRESS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_ROLLOVER_IN_PROGRESS: WIN32_ERROR = 9116u32;$/;"	C
DNS_ERROR_ROLLOVER_NOT_POKEABLE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_ROLLOVER_NOT_POKEABLE: WIN32_ERROR = 9128u32;$/;"	C
DNS_ERROR_RRL_INVALID_IPV4_PREFIX	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_RRL_INVALID_IPV4_PREFIX: WIN32_ERROR = 9913u32;$/;"	C
DNS_ERROR_RRL_INVALID_IPV6_PREFIX	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_RRL_INVALID_IPV6_PREFIX: WIN32_ERROR = 9914u32;$/;"	C
DNS_ERROR_RRL_INVALID_LEAK_RATE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_RRL_INVALID_LEAK_RATE: WIN32_ERROR = 9916u32;$/;"	C
DNS_ERROR_RRL_INVALID_TC_RATE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_RRL_INVALID_TC_RATE: WIN32_ERROR = 9915u32;$/;"	C
DNS_ERROR_RRL_INVALID_WINDOW_SIZE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_RRL_INVALID_WINDOW_SIZE: WIN32_ERROR = 9912u32;$/;"	C
DNS_ERROR_RRL_LEAK_RATE_LESSTHAN_TC_RATE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_RRL_LEAK_RATE_LESSTHAN_TC_RATE: WIN32_ERROR = 9917u32;$/;"	C
DNS_ERROR_RRL_NOT_ENABLED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_RRL_NOT_ENABLED: WIN32_ERROR = 9911u32;$/;"	C
DNS_ERROR_SCOPE_ALREADY_EXISTS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_SCOPE_ALREADY_EXISTS: WIN32_ERROR = 9963u32;$/;"	C
DNS_ERROR_SCOPE_DOES_NOT_EXIST	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_SCOPE_DOES_NOT_EXIST: WIN32_ERROR = 9959u32;$/;"	C
DNS_ERROR_SCOPE_LOCKED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_SCOPE_LOCKED: WIN32_ERROR = 9962u32;$/;"	C
DNS_ERROR_SECONDARY_DATA	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_SECONDARY_DATA: WIN32_ERROR = 9712u32;$/;"	C
DNS_ERROR_SECONDARY_REQUIRES_MASTER_IP	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_SECONDARY_REQUIRES_MASTER_IP: WIN32_ERROR = 9612u32;$/;"	C
DNS_ERROR_SERVERSCOPE_IS_REFERENCED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_SERVERSCOPE_IS_REFERENCED: WIN32_ERROR = 9988u32;$/;"	C
DNS_ERROR_SIGNING_KEY_NOT_ACCESSIBLE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_SIGNING_KEY_NOT_ACCESSIBLE: WIN32_ERROR = 9107u32;$/;"	C
DNS_ERROR_SOA_DELETE_INVALID	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_SOA_DELETE_INVALID: WIN32_ERROR = 9618u32;$/;"	C
DNS_ERROR_STANDBY_KEY_NOT_PRESENT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_STANDBY_KEY_NOT_PRESENT: WIN32_ERROR = 9117u32;$/;"	C
DNS_ERROR_SUBNET_ALREADY_EXISTS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_SUBNET_ALREADY_EXISTS: WIN32_ERROR = 9979u32;$/;"	C
DNS_ERROR_SUBNET_DOES_NOT_EXIST	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_SUBNET_DOES_NOT_EXIST: WIN32_ERROR = 9978u32;$/;"	C
DNS_ERROR_TOO_MANY_SKDS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_TOO_MANY_SKDS: WIN32_ERROR = 9113u32;$/;"	C
DNS_ERROR_TRY_AGAIN_LATER	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_TRY_AGAIN_LATER: WIN32_ERROR = 9554u32;$/;"	C
DNS_ERROR_UNEXPECTED_CNG_ERROR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_UNEXPECTED_CNG_ERROR: WIN32_ERROR = 9110u32;$/;"	C
DNS_ERROR_UNEXPECTED_DATA_PROTECTION_ERROR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_UNEXPECTED_DATA_PROTECTION_ERROR: WIN32_ERROR = 9109u32;$/;"	C
DNS_ERROR_UNKNOWN_RECORD_TYPE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_UNKNOWN_RECORD_TYPE: WIN32_ERROR = 9704u32;$/;"	C
DNS_ERROR_UNKNOWN_SIGNING_PARAMETER_VERSION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_UNKNOWN_SIGNING_PARAMETER_VERSION: WIN32_ERROR = 9111u32;$/;"	C
DNS_ERROR_UNSECURE_PACKET	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_UNSECURE_PACKET: WIN32_ERROR = 9505u32;$/;"	C
DNS_ERROR_UNSUPPORTED_ALGORITHM	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_UNSUPPORTED_ALGORITHM: WIN32_ERROR = 9105u32;$/;"	C
DNS_ERROR_VIRTUALIZATION_INSTANCE_ALREADY_EXISTS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_VIRTUALIZATION_INSTANCE_ALREADY_EXISTS: WIN32_ERROR = 9921u32;$/;"	C
DNS_ERROR_VIRTUALIZATION_INSTANCE_DOES_NOT_EXIST	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_VIRTUALIZATION_INSTANCE_DOES_NOT_EXIST: WIN32_ERROR = 9922u32;$/;"	C
DNS_ERROR_VIRTUALIZATION_TREE_LOCKED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_VIRTUALIZATION_TREE_LOCKED: WIN32_ERROR = 9923u32;$/;"	C
DNS_ERROR_WINS_INIT_FAILED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_WINS_INIT_FAILED: WIN32_ERROR = 9615u32;$/;"	C
DNS_ERROR_ZONESCOPE_ALREADY_EXISTS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_ZONESCOPE_ALREADY_EXISTS: WIN32_ERROR = 9951u32;$/;"	C
DNS_ERROR_ZONESCOPE_DOES_NOT_EXIST	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_ZONESCOPE_DOES_NOT_EXIST: WIN32_ERROR = 9952u32;$/;"	C
DNS_ERROR_ZONESCOPE_FILE_WRITEBACK_FAILED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_ZONESCOPE_FILE_WRITEBACK_FAILED: WIN32_ERROR = 9957u32;$/;"	C
DNS_ERROR_ZONESCOPE_IS_REFERENCED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_ZONESCOPE_IS_REFERENCED: WIN32_ERROR = 9989u32;$/;"	C
DNS_ERROR_ZONE_ALREADY_EXISTS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_ZONE_ALREADY_EXISTS: WIN32_ERROR = 9609u32;$/;"	C
DNS_ERROR_ZONE_CONFIGURATION_ERROR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_ZONE_CONFIGURATION_ERROR: WIN32_ERROR = 9604u32;$/;"	C
DNS_ERROR_ZONE_CREATION_FAILED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_ZONE_CREATION_FAILED: WIN32_ERROR = 9608u32;$/;"	C
DNS_ERROR_ZONE_DOES_NOT_EXIST	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_ZONE_DOES_NOT_EXIST: WIN32_ERROR = 9601u32;$/;"	C
DNS_ERROR_ZONE_HAS_NO_NS_RECORDS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_ZONE_HAS_NO_NS_RECORDS: WIN32_ERROR = 9606u32;$/;"	C
DNS_ERROR_ZONE_HAS_NO_SOA_RECORD	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_ZONE_HAS_NO_SOA_RECORD: WIN32_ERROR = 9605u32;$/;"	C
DNS_ERROR_ZONE_IS_SHUTDOWN	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_ZONE_IS_SHUTDOWN: WIN32_ERROR = 9621u32;$/;"	C
DNS_ERROR_ZONE_LOCKED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_ZONE_LOCKED: WIN32_ERROR = 9607u32;$/;"	C
DNS_ERROR_ZONE_LOCKED_FOR_SIGNING	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_ZONE_LOCKED_FOR_SIGNING: WIN32_ERROR = 9622u32;$/;"	C
DNS_ERROR_ZONE_NOT_SECONDARY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_ZONE_NOT_SECONDARY: WIN32_ERROR = 9613u32;$/;"	C
DNS_ERROR_ZONE_REQUIRES_MASTER_IP	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DNS_ERROR_ZONE_REQUIRES_MASTER_IP: WIN32_ERROR = 9620u32;$/;"	C
DONE	$RUST/src/sys/pal/sgx/abi/mod.rs	/^    const DONE: usize = 2;$/;"	C	function:tcs_init
DOT	$RUST/src/sys/pal/windows/fs.rs	/^        const DOT: u16 = b'.' as u16;$/;"	C	method:DirBuffIter::next
DROPS	$RUST/src/collections/hash/map/tests.rs	/^        static DROPS: AtomicUsize = AtomicUsize::new(0);$/;"	v	function:test_extract_if::pred_panic_reuse
DROPS	$RUST/src/collections/hash/set/tests.rs	/^    static DROPS: AtomicU32 = AtomicU32::new(0);$/;"	v	function:test_extract_if_pred_panic_leak
DROP_CNT	$RUST/src/sync/once_lock/tests.rs	/^    static DROP_CNT: AtomicUsize = AtomicUsize::new(0);$/;"	v	function:sync_once_cell_drop
DTORS	$RUST/src/sys/pal/hermit/thread_local_dtor.rs	/^static DTORS: RefCell<Vec<(*mut u8, unsafe extern "C" fn(*mut u8))>> = RefCell::new(Vec::new());$/;"	v
DTORS	$RUST/src/sys/pal/solid/thread_local_dtor.rs	/^static DTORS: RefCell<Vec<(*mut u8, unsafe extern "C" fn(*mut u8))>> = RefCell::new(Vec::new());$/;"	v
DTORS	$RUST/src/sys/pal/unix/thread_local_dtor.rs	/^    static DTORS: RefCell<Vec<(*mut u8, unsafe extern "C" fn(*mut u8))>> = RefCell::new(Vec::new/;"	v	function:register_dtor
DTORS	$RUST/src/sys/pal/windows/thread_local_key.rs	/^static DTORS: AtomicPtr<StaticKey> = AtomicPtr::new(ptr::null_mut());$/;"	v
DTORS	$RUST/src/sys/pal/xous/thread_local_key.rs	/^static DTORS: AtomicPtr<Node> = AtomicPtr::new(ptr::null_mut());$/;"	v
DTORS	$RUST/src/sys_common/thread_local_dtor.rs	/^    static DTORS: StaticKey = StaticKey::new(Some(run_dtors));$/;"	v	function:register_dtor_fallback
DT_BLK	$RUST/src/sys/pal/solid/abi/fs.rs	/^pub const DT_BLK: c_uchar = 6;$/;"	C
DT_CHR	$RUST/src/sys/pal/solid/abi/fs.rs	/^pub const DT_CHR: c_uchar = 2;$/;"	C
DT_DIR	$RUST/src/sys/pal/solid/abi/fs.rs	/^pub const DT_DIR: c_uchar = 4;$/;"	C
DT_FIFO	$RUST/src/sys/pal/solid/abi/fs.rs	/^pub const DT_FIFO: c_uchar = 1;$/;"	C
DT_LNK	$RUST/src/sys/pal/solid/abi/fs.rs	/^pub const DT_LNK: c_uchar = 10;$/;"	C
DT_REG	$RUST/src/sys/pal/solid/abi/fs.rs	/^pub const DT_REG: c_uchar = 8;$/;"	C
DT_SOCK	$RUST/src/sys/pal/solid/abi/fs.rs	/^pub const DT_SOCK: c_uchar = 12;$/;"	C
DT_UNKNOWN	$RUST/src/sys/pal/solid/abi/fs.rs	/^pub const DT_UNKNOWN: c_uchar = 0;$/;"	C
DT_WHT	$RUST/src/sys/pal/solid/abi/fs.rs	/^pub const DT_WHT: c_uchar = 14;$/;"	C
DUPLICATE_CLOSE_SOURCE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DUPLICATE_CLOSE_SOURCE: DUPLICATE_HANDLE_OPTIONS = 1u32;$/;"	C
DUPLICATE_HANDLE_OPTIONS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub type DUPLICATE_HANDLE_OPTIONS = u32;$/;"	t
DUPLICATE_SAME_ACCESS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const DUPLICATE_SAME_ACCESS: DUPLICATE_HANDLE_OPTIONS = 2u32;$/;"	C
DURATIONS	$RUST/src/time/tests.rs	/^        const DURATIONS: [Duration; 2] =$/;"	C	function:big_math::check
DWORD	$RUST/src/sys/pal/windows/c.rs	/^pub type DWORD = c_ulong;$/;"	t
DW_EH_PE_absptr	$RUST/src/sys/personality/dwarf/eh.rs	/^pub const DW_EH_PE_absptr: u8 = 0x00;$/;"	C
DW_EH_PE_aligned	$RUST/src/sys/personality/dwarf/eh.rs	/^pub const DW_EH_PE_aligned: u8 = 0x50;$/;"	C
DW_EH_PE_datarel	$RUST/src/sys/personality/dwarf/eh.rs	/^pub const DW_EH_PE_datarel: u8 = 0x30;$/;"	C
DW_EH_PE_funcrel	$RUST/src/sys/personality/dwarf/eh.rs	/^pub const DW_EH_PE_funcrel: u8 = 0x40;$/;"	C
DW_EH_PE_indirect	$RUST/src/sys/personality/dwarf/eh.rs	/^pub const DW_EH_PE_indirect: u8 = 0x80;$/;"	C
DW_EH_PE_omit	$RUST/src/sys/personality/dwarf/eh.rs	/^pub const DW_EH_PE_omit: u8 = 0xFF;$/;"	C
DW_EH_PE_pcrel	$RUST/src/sys/personality/dwarf/eh.rs	/^pub const DW_EH_PE_pcrel: u8 = 0x10;$/;"	C
DW_EH_PE_sdata2	$RUST/src/sys/personality/dwarf/eh.rs	/^pub const DW_EH_PE_sdata2: u8 = 0x0A;$/;"	C
DW_EH_PE_sdata4	$RUST/src/sys/personality/dwarf/eh.rs	/^pub const DW_EH_PE_sdata4: u8 = 0x0B;$/;"	C
DW_EH_PE_sdata8	$RUST/src/sys/personality/dwarf/eh.rs	/^pub const DW_EH_PE_sdata8: u8 = 0x0C;$/;"	C
DW_EH_PE_sleb128	$RUST/src/sys/personality/dwarf/eh.rs	/^pub const DW_EH_PE_sleb128: u8 = 0x09;$/;"	C
DW_EH_PE_textrel	$RUST/src/sys/personality/dwarf/eh.rs	/^pub const DW_EH_PE_textrel: u8 = 0x20;$/;"	C
DW_EH_PE_udata2	$RUST/src/sys/personality/dwarf/eh.rs	/^pub const DW_EH_PE_udata2: u8 = 0x02;$/;"	C
DW_EH_PE_udata4	$RUST/src/sys/personality/dwarf/eh.rs	/^pub const DW_EH_PE_udata4: u8 = 0x03;$/;"	C
DW_EH_PE_udata8	$RUST/src/sys/personality/dwarf/eh.rs	/^pub const DW_EH_PE_udata8: u8 = 0x04;$/;"	C
DW_EH_PE_uleb128	$RUST/src/sys/personality/dwarf/eh.rs	/^pub const DW_EH_PE_uleb128: u8 = 0x01;$/;"	C
DataOffset	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub DataOffset: u32,$/;"	m	struct:XSAVE_FORMAT
DataSelector	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub DataSelector: u32,$/;"	m	struct:FLOATING_SAVE_AREA
Deadlock	$RUST/src/io/error.rs	/^    Deadlock,$/;"	e	enum:ErrorKind
DebugControl	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub DebugControl: u64,$/;"	m	struct:CONTEXT
DebugHelper	$RUST/src/path.rs	/^        struct DebugHelper<'a>(&'a Path);$/;"	s	method:Iter::fmt
DebugInProgress	$RUST/src/os/xous/ffi/definitions.rs	/^    DebugInProgress = 26,$/;"	e	enum:Error
Default	$RUST/src/panicking.rs	/^    Default,$/;"	e	enum:Hook
DefaultHasher	$RUST/src/hash/random.rs	/^pub struct DefaultHasher(SipHasher13);$/;"	s
DeleteFile	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub DeleteFile: BOOLEAN,$/;"	m	struct:FILE_DISPOSITION_INFO
DeleteFileW	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn DeleteFileW(lpfilename: PCWSTR) -> BOOL;$/;"	f	signature:(lpfilename: PCWSTR) -> BOOL
DeletePending	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub DeletePending: BOOLEAN,$/;"	m	struct:FILE_STANDARD_INFO
DeleteProcThreadAttributeList	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn DeleteProcThreadAttributeList(lpattributelist: LPPROC_THREAD_ATTRIBUTE_LIST) -> ();$/;"	f	signature:(lpattributelist: LPPROC_THREAD_ATTRIBUTE_LIST) -> ()
DeviceIoControl	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn DeviceIoControl($/;"	f	signature:( hdevice: HANDLE, dwiocontrolcode: u32, lpinbuffer: *const ::core::ffi::c_void, ninbuffersize: u32, lpoutbuffer: *mut ::core::ffi::c_void, noutbuffersize: u32, lpbytesreturned: *mut u32, lpoverlapped: *mut OVERLAPPED, ) -> BOOL
DeviceNS	$RUST/src/path.rs	/^    DeviceNS(#[stable(feature = "rust1", since = "1.0.0")] &'a OsStr),$/;"	e	enum:Prefix
Difference	$RUST/src/collections/hash/set.rs	/^pub struct Difference<'a, T: 'a, S: 'a> {$/;"	s
Dir	$RUST/src/sys/pal/unix/fs.rs	/^unsafe impl Sync for Dir {}$/;"	c
DirBuff	$RUST/src/sys/pal/windows/fs.rs	/^struct DirBuff {$/;"	s
DirBuffIter	$RUST/src/sys/pal/windows/fs.rs	/^struct DirBuffIter<'a> {$/;"	s
DirBuilder	$RUST/src/fs.rs	/^pub struct DirBuilder {$/;"	s
DirBuilder	$RUST/src/os/unix/fs.rs	/^impl DirBuilderExt for fs::DirBuilder {$/;"	c
DirBuilder	$RUST/src/sys/pal/hermit/fs.rs	/^pub struct DirBuilder {}$/;"	s
DirBuilder	$RUST/src/sys/pal/solid/fs.rs	/^pub struct DirBuilder {}$/;"	s
DirBuilder	$RUST/src/sys/pal/unix/fs.rs	/^pub struct DirBuilder {$/;"	s
DirBuilder	$RUST/src/sys/pal/unsupported/fs.rs	/^pub struct DirBuilder {}$/;"	s
DirBuilder	$RUST/src/sys/pal/wasi/fs.rs	/^pub struct DirBuilder {}$/;"	s
DirBuilder	$RUST/src/sys/pal/windows/fs.rs	/^pub struct DirBuilder;$/;"	s
DirBuilderExt	$RUST/src/os/unix/fs.rs	/^pub trait DirBuilderExt {$/;"	i
DirEntry	$RUST/src/fs.rs	/^pub struct DirEntry(fs_imp::DirEntry);$/;"	s
DirEntry	$RUST/src/os/unix/fs.rs	/^impl Sealed for fs::DirEntry {}$/;"	c
DirEntry	$RUST/src/os/wasi/fs.rs	/^impl DirEntryExt for fs::DirEntry {$/;"	c
DirEntry	$RUST/src/sys/pal/hermit/fs.rs	/^pub struct DirEntry(!);$/;"	s
DirEntry	$RUST/src/sys/pal/solid/fs.rs	/^pub struct DirEntry {$/;"	s
DirEntry	$RUST/src/sys/pal/unix/fs.rs	/^pub struct DirEntry {$/;"	s
DirEntry	$RUST/src/sys/pal/unsupported/fs.rs	/^pub struct DirEntry(!);$/;"	s
DirEntry	$RUST/src/sys/pal/wasi/fs.rs	/^pub struct DirEntry {$/;"	s
DirEntry	$RUST/src/sys/pal/windows/fs.rs	/^pub struct DirEntry {$/;"	s
DirEntryExt	$RUST/src/os/unix/fs.rs	/^pub trait DirEntryExt {$/;"	i
DirEntryExt	$RUST/src/os/wasi/fs.rs	/^pub trait DirEntryExt {$/;"	i
DirEntryExt2	$RUST/src/os/unix/fs.rs	/^pub trait DirEntryExt2: Sealed {$/;"	i
Directory	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub Directory: BOOLEAN,$/;"	m	struct:FILE_STANDARD_INFO
DirectoryNotEmpty	$RUST/src/io/error.rs	/^    DirectoryNotEmpty,$/;"	e	enum:ErrorKind
Disabled	$RUST/src/backtrace.rs	/^    Disabled,$/;"	e	enum:Inner
Disconnected	$RUST/src/sync/mpmc/error.rs	/^    Disconnected(T),$/;"	e	enum:SendTimeoutError
Disconnected	$RUST/src/sync/mpmc/select.rs	/^    Disconnected,$/;"	e	enum:Selected
Disconnected	$RUST/src/sync/mpsc/mod.rs	/^    Disconnected,$/;"	e	enum:TryRecvError
Disk	$RUST/src/path.rs	/^    Disk(#[stable(feature = "rust1", since = "1.0.0")] u8),$/;"	e	enum:Prefix
Display	$RUST/src/path.rs	/^pub struct Display<'a> {$/;"	s
DisplayBacktrace	$RUST/src/sys_common/backtrace.rs	/^    struct DisplayBacktrace {$/;"	s	function:_print
DlsymWeak	$RUST/src/sys/pal/unix/weak.rs	/^pub(crate) struct DlsymWeak<F> {$/;"	s
DnsError	$RUST/src/sys/pal/xous/net/dns.rs	/^pub struct DnsError {$/;"	s
DnsLendMut	$RUST/src/os/xous/services/dns.rs	/^pub(crate) enum DnsLendMut {$/;"	g
Done	$RUST/src/path.rs	/^    Done = 3,$/;"	e	enum:State
DoubleFree	$RUST/src/os/xous/ffi/definitions.rs	/^    DoubleFree = 25,$/;"	e	enum:Error
Dr0	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub Dr0: u64,$/;"	m	struct:CONTEXT
Dr1	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub Dr1: u64,$/;"	m	struct:CONTEXT
Dr2	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub Dr2: u64,$/;"	m	struct:CONTEXT
Dr3	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub Dr3: u64,$/;"	m	struct:CONTEXT
Dr6	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub Dr6: u64,$/;"	m	struct:CONTEXT
Dr7	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub Dr7: u64,$/;"	m	struct:CONTEXT
Drain	$RUST/src/collections/hash/map.rs	/^pub struct Drain<'a, K: 'a, V: 'a> {$/;"	s
Drain	$RUST/src/collections/hash/set.rs	/^pub struct Drain<'a, K: 'a> {$/;"	s
DropLock	$RUST/src/sys/pal/wasm/alloc.rs	/^    pub struct DropLock;$/;"	s	module:lock
DropLock	$RUST/src/sys/pal/xous/alloc.rs	/^    pub struct DropLock;$/;"	s	module:lock
Droppable	$RUST/src/collections/hash/map/tests.rs	/^struct Droppable {$/;"	s
Dropper	$RUST/src/sync/once_lock/tests.rs	/^    struct Dropper;$/;"	s	function:sync_once_cell_drop
Dtor	$RUST/src/sys/pal/windows/thread_local_key.rs	/^type Dtor = unsafe extern "C" fn(*mut u8);$/;"	t
Dtor	$RUST/src/sys/pal/xous/thread_local_key.rs	/^pub type Dtor = unsafe extern "C" fn(*mut u8);$/;"	t
DtorState	$RUST/src/sys/pal/common/thread_local/fast_local.rs	/^enum DtorState {$/;"	g
DtorUnwindGuard	$RUST/src/sys/pal/common/thread_local/mod.rs	/^    struct DtorUnwindGuard;$/;"	s	function:abort_on_dtor_unwind
DuplicateHandle	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn DuplicateHandle($/;"	f	signature:( hsourceprocesshandle: HANDLE, hsourcehandle: HANDLE, htargetprocesshandle: HANDLE, lptargethandle: *mut HANDLE, dwdesiredaccess: u32, binherithandle: BOOL, dwoptions: DUPLICATE_HANDLE_OPTIONS, ) -> BOOL
DwarfReader	$RUST/src/sys/personality/dwarf/mod.rs	/^pub struct DwarfReader {$/;"	s
EAI_FAIL	$RUST/src/sys/pal/solid/abi/sockets.rs	/^pub const EAI_FAIL: i32 = -2202;$/;"	C
EAI_FAMILY	$RUST/src/sys/pal/solid/abi/sockets.rs	/^pub const EAI_FAMILY: i32 = -2204;$/;"	C
EAI_MEMORY	$RUST/src/sys/pal/solid/abi/sockets.rs	/^pub const EAI_MEMORY: i32 = -2203;$/;"	C
EAI_NONAME	$RUST/src/sys/pal/solid/abi/sockets.rs	/^pub const EAI_NONAME: i32 = -2200;$/;"	C
EAI_SERVICE	$RUST/src/sys/pal/solid/abi/sockets.rs	/^pub const EAI_SERVICE: i32 = -2201;$/;"	C
EFI_MEMORY_TYPE	$RUST/src/sys/pal/uefi/alloc.rs	/^        static EFI_MEMORY_TYPE: OnceLock<u32> = OnceLock::new();$/;"	v	method:System::alloc
EFlags	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub EFlags: u32,$/;"	m	struct:CONTEXT
EHAction	$RUST/src/sys/personality/dwarf/eh.rs	/^pub enum EHAction {$/;"	g
EHContext	$RUST/src/sys/personality/dwarf/eh.rs	/^pub struct EHContext<'a> {$/;"	s
EH_FRAME_SETTINGS	$RUST/src/sys/pal/xous/os.rs	/^    pub(crate) static mut EH_FRAME_SETTINGS: EhFrameFinder = EhFrameFinder(0);$/;"	v	module:eh_unwinding
EINPROGRESS	$RUST/src/sys/pal/solid/abi/sockets.rs	/^pub const EINPROGRESS: c_int = SOLID_NET_ERR_BASE - libc::EINPROGRESS;$/;"	C
EINVAL	$RUST/src/sys/pal/sgx/rwlock.rs	/^const EINVAL: i32 = 22;$/;"	C
EMPTY	$RUST/src/sys/pal/unix/thread_parking/darwin.rs	/^const EMPTY: i8 = 0;$/;"	C
EMPTY	$RUST/src/sys/pal/unix/thread_parking/pthread.rs	/^const EMPTY: usize = 0;$/;"	C
EMPTY	$RUST/src/sys/pal/windows/thread_parking.rs	/^const EMPTY: i8 = 0;$/;"	C
EMPTY	$RUST/src/sys/pal/xous/thread_parking.rs	/^const EMPTY: i8 = 0;$/;"	C
EMPTY	$RUST/src/sys_common/thread_parking/futex.rs	/^const EMPTY: u32 = 0;$/;"	C
EMPTY	$RUST/src/sys_common/thread_parking/id.rs	/^const EMPTY: i8 = 0;$/;"	C
ENABLED	$RUST/src/backtrace.rs	/^        static ENABLED: AtomicU8 = AtomicU8::new(0);$/;"	v	method:Backtrace::enabled
ENABLE_AUTO_POSITION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ENABLE_AUTO_POSITION: CONSOLE_MODE = 256u32;$/;"	C
ENABLE_ECHO_INPUT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ENABLE_ECHO_INPUT: CONSOLE_MODE = 4u32;$/;"	C
ENABLE_EXTENDED_FLAGS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ENABLE_EXTENDED_FLAGS: CONSOLE_MODE = 128u32;$/;"	C
ENABLE_INSERT_MODE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ENABLE_INSERT_MODE: CONSOLE_MODE = 32u32;$/;"	C
ENABLE_LINE_INPUT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ENABLE_LINE_INPUT: CONSOLE_MODE = 2u32;$/;"	C
ENABLE_LVB_GRID_WORLDWIDE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ENABLE_LVB_GRID_WORLDWIDE: CONSOLE_MODE = 16u32;$/;"	C
ENABLE_MOUSE_INPUT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ENABLE_MOUSE_INPUT: CONSOLE_MODE = 16u32;$/;"	C
ENABLE_PROCESSED_INPUT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ENABLE_PROCESSED_INPUT: CONSOLE_MODE = 1u32;$/;"	C
ENABLE_PROCESSED_OUTPUT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ENABLE_PROCESSED_OUTPUT: CONSOLE_MODE = 1u32;$/;"	C
ENABLE_QUICK_EDIT_MODE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ENABLE_QUICK_EDIT_MODE: CONSOLE_MODE = 64u32;$/;"	C
ENABLE_VIRTUAL_TERMINAL_INPUT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ENABLE_VIRTUAL_TERMINAL_INPUT: CONSOLE_MODE = 512u32;$/;"	C
ENABLE_VIRTUAL_TERMINAL_PROCESSING	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ENABLE_VIRTUAL_TERMINAL_PROCESSING: CONSOLE_MODE = 4u32;$/;"	C
ENABLE_WINDOW_INPUT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ENABLE_WINDOW_INPUT: CONSOLE_MODE = 8u32;$/;"	C
ENABLE_WRAP_AT_EOL_OUTPUT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ENABLE_WRAP_AT_EOL_OUTPUT: CONSOLE_MODE = 2u32;$/;"	C
ENCLAVE_SIZE	$RUST/src/sys/pal/sgx/abi/mem.rs	/^    static ENCLAVE_SIZE: usize;$/;"	v
ENCLU_EGETKEY	$RUST/src/os/fortanix_sgx/arch.rs	/^const ENCLU_EGETKEY: u32 = 1;$/;"	C
ENCLU_EREPORT	$RUST/src/os/fortanix_sgx/arch.rs	/^const ENCLU_EREPORT: u32 = 0;$/;"	C
ENV	$RUST/src/sys/pal/hermit/os.rs	/^static mut ENV: Option<Mutex<HashMap<OsString, OsString>>> = None;$/;"	v
ENV	$RUST/src/sys/pal/sgx/os.rs	/^static ENV: AtomicUsize = AtomicUsize::new(0);$/;"	v
ENV_INIT	$RUST/src/sys/pal/sgx/os.rs	/^static ENV_INIT: Once = Once::new();$/;"	v
ENV_LOCK	$RUST/src/sys/pal/solid/os.rs	/^static ENV_LOCK: RwLock<()> = RwLock::new(());$/;"	v
ENV_LOCK	$RUST/src/sys/pal/unix/os.rs	/^static ENV_LOCK: RwLock<()> = RwLock::new(());$/;"	v
ERROR_ABANDONED_WAIT_0	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_ABANDONED_WAIT_0: WIN32_ERROR = 735u32;$/;"	C
ERROR_ABANDONED_WAIT_63	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_ABANDONED_WAIT_63: WIN32_ERROR = 736u32;$/;"	C
ERROR_ABANDON_HIBERFILE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_ABANDON_HIBERFILE: WIN32_ERROR = 787u32;$/;"	C
ERROR_ABIOS_ERROR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_ABIOS_ERROR: WIN32_ERROR = 538u32;$/;"	C
ERROR_ACCESS_AUDIT_BY_POLICY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_ACCESS_AUDIT_BY_POLICY: WIN32_ERROR = 785u32;$/;"	C
ERROR_ACCESS_DENIED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_ACCESS_DENIED: WIN32_ERROR = 5u32;$/;"	C
ERROR_ACCESS_DENIED_APPDATA	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_ACCESS_DENIED_APPDATA: WIN32_ERROR = 502u32;$/;"	C
ERROR_ACCESS_DISABLED_BY_POLICY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_ACCESS_DISABLED_BY_POLICY: WIN32_ERROR = 1260u32;$/;"	C
ERROR_ACCESS_DISABLED_NO_SAFER_UI_BY_POLICY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_ACCESS_DISABLED_NO_SAFER_UI_BY_POLICY: WIN32_ERROR = 786u32;$/;"	C
ERROR_ACCESS_DISABLED_WEBBLADE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_ACCESS_DISABLED_WEBBLADE: WIN32_ERROR = 1277u32;$/;"	C
ERROR_ACCESS_DISABLED_WEBBLADE_TAMPER	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_ACCESS_DISABLED_WEBBLADE_TAMPER: WIN32_ERROR = 1278u32;$/;"	C
ERROR_ACCOUNT_DISABLED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_ACCOUNT_DISABLED: WIN32_ERROR = 1331u32;$/;"	C
ERROR_ACCOUNT_EXPIRED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_ACCOUNT_EXPIRED: WIN32_ERROR = 1793u32;$/;"	C
ERROR_ACCOUNT_LOCKED_OUT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_ACCOUNT_LOCKED_OUT: WIN32_ERROR = 1909u32;$/;"	C
ERROR_ACCOUNT_RESTRICTION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_ACCOUNT_RESTRICTION: WIN32_ERROR = 1327u32;$/;"	C
ERROR_ACPI_ERROR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_ACPI_ERROR: WIN32_ERROR = 669u32;$/;"	C
ERROR_ACTIVE_CONNECTIONS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_ACTIVE_CONNECTIONS: WIN32_ERROR = 2402u32;$/;"	C
ERROR_ADAP_HDW_ERR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_ADAP_HDW_ERR: WIN32_ERROR = 57u32;$/;"	C
ERROR_ADDRESS_ALREADY_ASSOCIATED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_ADDRESS_ALREADY_ASSOCIATED: WIN32_ERROR = 1227u32;$/;"	C
ERROR_ADDRESS_NOT_ASSOCIATED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_ADDRESS_NOT_ASSOCIATED: WIN32_ERROR = 1228u32;$/;"	C
ERROR_ALERTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_ALERTED: WIN32_ERROR = 739u32;$/;"	C
ERROR_ALIAS_EXISTS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_ALIAS_EXISTS: WIN32_ERROR = 1379u32;$/;"	C
ERROR_ALLOCATE_BUCKET	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_ALLOCATE_BUCKET: WIN32_ERROR = 602u32;$/;"	C
ERROR_ALLOTTED_SPACE_EXCEEDED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_ALLOTTED_SPACE_EXCEEDED: WIN32_ERROR = 1344u32;$/;"	C
ERROR_ALL_USER_TRUST_QUOTA_EXCEEDED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_ALL_USER_TRUST_QUOTA_EXCEEDED: WIN32_ERROR = 1933u32;$/;"	C
ERROR_ALREADY_ASSIGNED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_ALREADY_ASSIGNED: WIN32_ERROR = 85u32;$/;"	C
ERROR_ALREADY_EXISTS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_ALREADY_EXISTS: WIN32_ERROR = 183u32;$/;"	C
ERROR_ALREADY_FIBER	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_ALREADY_FIBER: WIN32_ERROR = 1280u32;$/;"	C
ERROR_ALREADY_HAS_STREAM_ID	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_ALREADY_HAS_STREAM_ID: WIN32_ERROR = 4444u32;$/;"	C
ERROR_ALREADY_INITIALIZED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_ALREADY_INITIALIZED: WIN32_ERROR = 1247u32;$/;"	C
ERROR_ALREADY_REGISTERED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_ALREADY_REGISTERED: WIN32_ERROR = 1242u32;$/;"	C
ERROR_ALREADY_RUNNING_LKG	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_ALREADY_RUNNING_LKG: WIN32_ERROR = 1074u32;$/;"	C
ERROR_ALREADY_THREAD	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_ALREADY_THREAD: WIN32_ERROR = 1281u32;$/;"	C
ERROR_ALREADY_WAITING	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_ALREADY_WAITING: WIN32_ERROR = 1904u32;$/;"	C
ERROR_ALREADY_WIN32	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_ALREADY_WIN32: WIN32_ERROR = 719u32;$/;"	C
ERROR_API_UNAVAILABLE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_API_UNAVAILABLE: WIN32_ERROR = 15841u32;$/;"	C
ERROR_APPCONTAINER_REQUIRED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_APPCONTAINER_REQUIRED: WIN32_ERROR = 4251u32;$/;"	C
ERROR_APPEXEC_APP_COMPAT_BLOCK	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_APPEXEC_APP_COMPAT_BLOCK: WIN32_ERROR = 3068u32;$/;"	C
ERROR_APPEXEC_CALLER_WAIT_TIMEOUT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_APPEXEC_CALLER_WAIT_TIMEOUT: WIN32_ERROR = 3069u32;$/;"	C
ERROR_APPEXEC_CALLER_WAIT_TIMEOUT_LICENSING	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_APPEXEC_CALLER_WAIT_TIMEOUT_LICENSING: WIN32_ERROR = 3071u32;$/;"	C
ERROR_APPEXEC_CALLER_WAIT_TIMEOUT_RESOURCES	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_APPEXEC_CALLER_WAIT_TIMEOUT_RESOURCES: WIN32_ERROR = 3072u32;$/;"	C
ERROR_APPEXEC_CALLER_WAIT_TIMEOUT_TERMINATION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_APPEXEC_CALLER_WAIT_TIMEOUT_TERMINATION: WIN32_ERROR = 3070u32;$/;"	C
ERROR_APPEXEC_CONDITION_NOT_SATISFIED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_APPEXEC_CONDITION_NOT_SATISFIED: WIN32_ERROR = 3060u32;$/;"	C
ERROR_APPEXEC_HANDLE_INVALIDATED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_APPEXEC_HANDLE_INVALIDATED: WIN32_ERROR = 3061u32;$/;"	C
ERROR_APPEXEC_HOST_ID_MISMATCH	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_APPEXEC_HOST_ID_MISMATCH: WIN32_ERROR = 3066u32;$/;"	C
ERROR_APPEXEC_INVALID_HOST_GENERATION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_APPEXEC_INVALID_HOST_GENERATION: WIN32_ERROR = 3062u32;$/;"	C
ERROR_APPEXEC_INVALID_HOST_STATE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_APPEXEC_INVALID_HOST_STATE: WIN32_ERROR = 3064u32;$/;"	C
ERROR_APPEXEC_NO_DONOR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_APPEXEC_NO_DONOR: WIN32_ERROR = 3065u32;$/;"	C
ERROR_APPEXEC_UNEXPECTED_PROCESS_REGISTRATION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_APPEXEC_UNEXPECTED_PROCESS_REGISTRATION: WIN32_ERROR = 3063u32;$/;"	C
ERROR_APPEXEC_UNKNOWN_USER	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_APPEXEC_UNKNOWN_USER: WIN32_ERROR = 3067u32;$/;"	C
ERROR_APPHELP_BLOCK	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_APPHELP_BLOCK: WIN32_ERROR = 1259u32;$/;"	C
ERROR_APPX_FILE_NOT_ENCRYPTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_APPX_FILE_NOT_ENCRYPTED: WIN32_ERROR = 409u32;$/;"	C
ERROR_APP_HANG	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_APP_HANG: WIN32_ERROR = 1298u32;$/;"	C
ERROR_APP_INIT_FAILURE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_APP_INIT_FAILURE: WIN32_ERROR = 575u32;$/;"	C
ERROR_APP_WRONG_OS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_APP_WRONG_OS: WIN32_ERROR = 1151u32;$/;"	C
ERROR_ARBITRATION_UNHANDLED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_ARBITRATION_UNHANDLED: WIN32_ERROR = 723u32;$/;"	C
ERROR_ARENA_TRASHED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_ARENA_TRASHED: WIN32_ERROR = 7u32;$/;"	C
ERROR_ARITHMETIC_OVERFLOW	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_ARITHMETIC_OVERFLOW: WIN32_ERROR = 534u32;$/;"	C
ERROR_ASSERTION_FAILURE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_ASSERTION_FAILURE: WIN32_ERROR = 668u32;$/;"	C
ERROR_ATOMIC_LOCKS_NOT_SUPPORTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_ATOMIC_LOCKS_NOT_SUPPORTED: WIN32_ERROR = 174u32;$/;"	C
ERROR_AUDIT_FAILED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_AUDIT_FAILED: WIN32_ERROR = 606u32;$/;"	C
ERROR_AUTHENTICATION_FIREWALL_FAILED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_AUTHENTICATION_FIREWALL_FAILED: WIN32_ERROR = 1935u32;$/;"	C
ERROR_AUTHIP_FAILURE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_AUTHIP_FAILURE: WIN32_ERROR = 1469u32;$/;"	C
ERROR_AUTODATASEG_EXCEEDS_64k	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_AUTODATASEG_EXCEEDS_64k: WIN32_ERROR = 199u32;$/;"	C
ERROR_BACKUP_CONTROLLER	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_BACKUP_CONTROLLER: WIN32_ERROR = 586u32;$/;"	C
ERROR_BADDB	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_BADDB: WIN32_ERROR = 1009u32;$/;"	C
ERROR_BADKEY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_BADKEY: WIN32_ERROR = 1010u32;$/;"	C
ERROR_BADSTARTPOSITION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_BADSTARTPOSITION: WIN32_ERROR = 778u32;$/;"	C
ERROR_BAD_ACCESSOR_FLAGS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_BAD_ACCESSOR_FLAGS: WIN32_ERROR = 773u32;$/;"	C
ERROR_BAD_ARGUMENTS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_BAD_ARGUMENTS: WIN32_ERROR = 160u32;$/;"	C
ERROR_BAD_COMMAND	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_BAD_COMMAND: WIN32_ERROR = 22u32;$/;"	C
ERROR_BAD_COMPRESSION_BUFFER	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_BAD_COMPRESSION_BUFFER: WIN32_ERROR = 605u32;$/;"	C
ERROR_BAD_CONFIGURATION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_BAD_CONFIGURATION: WIN32_ERROR = 1610u32;$/;"	C
ERROR_BAD_CURRENT_DIRECTORY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_BAD_CURRENT_DIRECTORY: WIN32_ERROR = 703u32;$/;"	C
ERROR_BAD_DESCRIPTOR_FORMAT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_BAD_DESCRIPTOR_FORMAT: WIN32_ERROR = 1361u32;$/;"	C
ERROR_BAD_DEVICE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_BAD_DEVICE: WIN32_ERROR = 1200u32;$/;"	C
ERROR_BAD_DEVICE_PATH	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_BAD_DEVICE_PATH: WIN32_ERROR = 330u32;$/;"	C
ERROR_BAD_DEV_TYPE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_BAD_DEV_TYPE: WIN32_ERROR = 66u32;$/;"	C
ERROR_BAD_DLL_ENTRYPOINT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_BAD_DLL_ENTRYPOINT: WIN32_ERROR = 609u32;$/;"	C
ERROR_BAD_DRIVER_LEVEL	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_BAD_DRIVER_LEVEL: WIN32_ERROR = 119u32;$/;"	C
ERROR_BAD_ENVIRONMENT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_BAD_ENVIRONMENT: WIN32_ERROR = 10u32;$/;"	C
ERROR_BAD_EXE_FORMAT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_BAD_EXE_FORMAT: WIN32_ERROR = 193u32;$/;"	C
ERROR_BAD_FILE_TYPE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_BAD_FILE_TYPE: WIN32_ERROR = 222u32;$/;"	C
ERROR_BAD_FORMAT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_BAD_FORMAT: WIN32_ERROR = 11u32;$/;"	C
ERROR_BAD_FUNCTION_TABLE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_BAD_FUNCTION_TABLE: WIN32_ERROR = 559u32;$/;"	C
ERROR_BAD_IMPERSONATION_LEVEL	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_BAD_IMPERSONATION_LEVEL: WIN32_ERROR = 1346u32;$/;"	C
ERROR_BAD_INHERITANCE_ACL	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_BAD_INHERITANCE_ACL: WIN32_ERROR = 1340u32;$/;"	C
ERROR_BAD_LENGTH	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_BAD_LENGTH: WIN32_ERROR = 24u32;$/;"	C
ERROR_BAD_LOGON_SESSION_STATE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_BAD_LOGON_SESSION_STATE: WIN32_ERROR = 1365u32;$/;"	C
ERROR_BAD_MCFG_TABLE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_BAD_MCFG_TABLE: WIN32_ERROR = 791u32;$/;"	C
ERROR_BAD_NETPATH	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_BAD_NETPATH: WIN32_ERROR = 53u32;$/;"	C
ERROR_BAD_NET_NAME	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_BAD_NET_NAME: WIN32_ERROR = 67u32;$/;"	C
ERROR_BAD_NET_RESP	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_BAD_NET_RESP: WIN32_ERROR = 58u32;$/;"	C
ERROR_BAD_PATHNAME	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_BAD_PATHNAME: WIN32_ERROR = 161u32;$/;"	C
ERROR_BAD_PIPE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_BAD_PIPE: WIN32_ERROR = 230u32;$/;"	C
ERROR_BAD_PROFILE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_BAD_PROFILE: WIN32_ERROR = 1206u32;$/;"	C
ERROR_BAD_PROVIDER	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_BAD_PROVIDER: WIN32_ERROR = 1204u32;$/;"	C
ERROR_BAD_QUERY_SYNTAX	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_BAD_QUERY_SYNTAX: WIN32_ERROR = 1615u32;$/;"	C
ERROR_BAD_RECOVERY_POLICY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_BAD_RECOVERY_POLICY: WIN32_ERROR = 6012u32;$/;"	C
ERROR_BAD_REM_ADAP	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_BAD_REM_ADAP: WIN32_ERROR = 60u32;$/;"	C
ERROR_BAD_SERVICE_ENTRYPOINT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_BAD_SERVICE_ENTRYPOINT: WIN32_ERROR = 610u32;$/;"	C
ERROR_BAD_STACK	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_BAD_STACK: WIN32_ERROR = 543u32;$/;"	C
ERROR_BAD_THREADID_ADDR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_BAD_THREADID_ADDR: WIN32_ERROR = 159u32;$/;"	C
ERROR_BAD_TOKEN_TYPE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_BAD_TOKEN_TYPE: WIN32_ERROR = 1349u32;$/;"	C
ERROR_BAD_UNIT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_BAD_UNIT: WIN32_ERROR = 20u32;$/;"	C
ERROR_BAD_USERNAME	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_BAD_USERNAME: WIN32_ERROR = 2202u32;$/;"	C
ERROR_BAD_USER_PROFILE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_BAD_USER_PROFILE: WIN32_ERROR = 1253u32;$/;"	C
ERROR_BAD_VALIDATION_CLASS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_BAD_VALIDATION_CLASS: WIN32_ERROR = 1348u32;$/;"	C
ERROR_BEGINNING_OF_MEDIA	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_BEGINNING_OF_MEDIA: WIN32_ERROR = 1102u32;$/;"	C
ERROR_BEYOND_VDL	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_BEYOND_VDL: WIN32_ERROR = 1289u32;$/;"	C
ERROR_BIOS_FAILED_TO_CONNECT_INTERRUPT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_BIOS_FAILED_TO_CONNECT_INTERRUPT: WIN32_ERROR = 585u32;$/;"	C
ERROR_BLOCKED_BY_PARENTAL_CONTROLS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_BLOCKED_BY_PARENTAL_CONTROLS: WIN32_ERROR = 346u32;$/;"	C
ERROR_BLOCK_SHARED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_BLOCK_SHARED: WIN32_ERROR = 514u32;$/;"	C
ERROR_BLOCK_SOURCE_WEAK_REFERENCE_INVALID	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_BLOCK_SOURCE_WEAK_REFERENCE_INVALID: WIN32_ERROR = 512u32;$/;"	C
ERROR_BLOCK_TARGET_WEAK_REFERENCE_INVALID	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_BLOCK_TARGET_WEAK_REFERENCE_INVALID: WIN32_ERROR = 513u32;$/;"	C
ERROR_BLOCK_TOO_MANY_REFERENCES	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_BLOCK_TOO_MANY_REFERENCES: WIN32_ERROR = 347u32;$/;"	C
ERROR_BLOCK_WEAK_REFERENCE_INVALID	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_BLOCK_WEAK_REFERENCE_INVALID: WIN32_ERROR = 511u32;$/;"	C
ERROR_BOOT_ALREADY_ACCEPTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_BOOT_ALREADY_ACCEPTED: WIN32_ERROR = 1076u32;$/;"	C
ERROR_BROKEN_PIPE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_BROKEN_PIPE: WIN32_ERROR = 109u32;$/;"	C
ERROR_BUFFER_ALL_ZEROS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_BUFFER_ALL_ZEROS: WIN32_ERROR = 754u32;$/;"	C
ERROR_BUFFER_OVERFLOW	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_BUFFER_OVERFLOW: WIN32_ERROR = 111u32;$/;"	C
ERROR_BUSY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_BUSY: WIN32_ERROR = 170u32;$/;"	C
ERROR_BUSY_DRIVE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_BUSY_DRIVE: WIN32_ERROR = 142u32;$/;"	C
ERROR_BUS_RESET	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_BUS_RESET: WIN32_ERROR = 1111u32;$/;"	C
ERROR_BYPASSIO_FLT_NOT_SUPPORTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_BYPASSIO_FLT_NOT_SUPPORTED: WIN32_ERROR = 506u32;$/;"	C
ERROR_CACHE_PAGE_LOCKED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CACHE_PAGE_LOCKED: WIN32_ERROR = 752u32;$/;"	C
ERROR_CALLBACK_INVOKE_INLINE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CALLBACK_INVOKE_INLINE: WIN32_ERROR = 812u32;$/;"	C
ERROR_CALLBACK_POP_STACK	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CALLBACK_POP_STACK: WIN32_ERROR = 768u32;$/;"	C
ERROR_CALLBACK_SUPPLIED_INVALID_DATA	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CALLBACK_SUPPLIED_INVALID_DATA: WIN32_ERROR = 1273u32;$/;"	C
ERROR_CALL_NOT_IMPLEMENTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CALL_NOT_IMPLEMENTED: WIN32_ERROR = 120u32;$/;"	C
ERROR_CANCELLED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CANCELLED: WIN32_ERROR = 1223u32;$/;"	C
ERROR_CANCEL_VIOLATION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CANCEL_VIOLATION: WIN32_ERROR = 173u32;$/;"	C
ERROR_CANNOT_BREAK_OPLOCK	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CANNOT_BREAK_OPLOCK: WIN32_ERROR = 802u32;$/;"	C
ERROR_CANNOT_COPY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CANNOT_COPY: WIN32_ERROR = 266u32;$/;"	C
ERROR_CANNOT_DETECT_DRIVER_FAILURE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CANNOT_DETECT_DRIVER_FAILURE: WIN32_ERROR = 1080u32;$/;"	C
ERROR_CANNOT_DETECT_PROCESS_ABORT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CANNOT_DETECT_PROCESS_ABORT: WIN32_ERROR = 1081u32;$/;"	C
ERROR_CANNOT_FIND_WND_CLASS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CANNOT_FIND_WND_CLASS: WIN32_ERROR = 1407u32;$/;"	C
ERROR_CANNOT_GRANT_REQUESTED_OPLOCK	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CANNOT_GRANT_REQUESTED_OPLOCK: WIN32_ERROR = 801u32;$/;"	C
ERROR_CANNOT_IMPERSONATE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CANNOT_IMPERSONATE: WIN32_ERROR = 1368u32;$/;"	C
ERROR_CANNOT_LOAD_REGISTRY_FILE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CANNOT_LOAD_REGISTRY_FILE: WIN32_ERROR = 589u32;$/;"	C
ERROR_CANNOT_MAKE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CANNOT_MAKE: WIN32_ERROR = 82u32;$/;"	C
ERROR_CANNOT_OPEN_PROFILE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CANNOT_OPEN_PROFILE: WIN32_ERROR = 1205u32;$/;"	C
ERROR_CANTFETCHBACKWARDS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CANTFETCHBACKWARDS: WIN32_ERROR = 770u32;$/;"	C
ERROR_CANTOPEN	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CANTOPEN: WIN32_ERROR = 1011u32;$/;"	C
ERROR_CANTREAD	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CANTREAD: WIN32_ERROR = 1012u32;$/;"	C
ERROR_CANTSCROLLBACKWARDS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CANTSCROLLBACKWARDS: WIN32_ERROR = 771u32;$/;"	C
ERROR_CANTWRITE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CANTWRITE: WIN32_ERROR = 1013u32;$/;"	C
ERROR_CANT_ACCESS_DOMAIN_INFO	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CANT_ACCESS_DOMAIN_INFO: WIN32_ERROR = 1351u32;$/;"	C
ERROR_CANT_ACCESS_FILE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CANT_ACCESS_FILE: WIN32_ERROR = 1920u32;$/;"	C
ERROR_CANT_CLEAR_ENCRYPTION_FLAG	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CANT_CLEAR_ENCRYPTION_FLAG: WIN32_ERROR = 432u32;$/;"	C
ERROR_CANT_DISABLE_MANDATORY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CANT_DISABLE_MANDATORY: WIN32_ERROR = 1310u32;$/;"	C
ERROR_CANT_ENABLE_DENY_ONLY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CANT_ENABLE_DENY_ONLY: WIN32_ERROR = 629u32;$/;"	C
ERROR_CANT_OPEN_ANONYMOUS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CANT_OPEN_ANONYMOUS: WIN32_ERROR = 1347u32;$/;"	C
ERROR_CANT_RESOLVE_FILENAME	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CANT_RESOLVE_FILENAME: WIN32_ERROR = 1921u32;$/;"	C
ERROR_CANT_TERMINATE_SELF	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CANT_TERMINATE_SELF: WIN32_ERROR = 555u32;$/;"	C
ERROR_CANT_WAIT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CANT_WAIT: WIN32_ERROR = 554u32;$/;"	C
ERROR_CAN_NOT_COMPLETE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CAN_NOT_COMPLETE: WIN32_ERROR = 1003u32;$/;"	C
ERROR_CAPAUTHZ_CHANGE_TYPE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CAPAUTHZ_CHANGE_TYPE: WIN32_ERROR = 451u32;$/;"	C
ERROR_CAPAUTHZ_DB_CORRUPTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CAPAUTHZ_DB_CORRUPTED: WIN32_ERROR = 455u32;$/;"	C
ERROR_CAPAUTHZ_NOT_AUTHORIZED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CAPAUTHZ_NOT_AUTHORIZED: WIN32_ERROR = 453u32;$/;"	C
ERROR_CAPAUTHZ_NOT_DEVUNLOCKED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CAPAUTHZ_NOT_DEVUNLOCKED: WIN32_ERROR = 450u32;$/;"	C
ERROR_CAPAUTHZ_NOT_PROVISIONED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CAPAUTHZ_NOT_PROVISIONED: WIN32_ERROR = 452u32;$/;"	C
ERROR_CAPAUTHZ_NO_POLICY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CAPAUTHZ_NO_POLICY: WIN32_ERROR = 454u32;$/;"	C
ERROR_CAPAUTHZ_SCCD_DEV_MODE_REQUIRED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CAPAUTHZ_SCCD_DEV_MODE_REQUIRED: WIN32_ERROR = 459u32;$/;"	C
ERROR_CAPAUTHZ_SCCD_INVALID_CATALOG	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CAPAUTHZ_SCCD_INVALID_CATALOG: WIN32_ERROR = 456u32;$/;"	C
ERROR_CAPAUTHZ_SCCD_NO_AUTH_ENTITY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CAPAUTHZ_SCCD_NO_AUTH_ENTITY: WIN32_ERROR = 457u32;$/;"	C
ERROR_CAPAUTHZ_SCCD_NO_CAPABILITY_MATCH	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CAPAUTHZ_SCCD_NO_CAPABILITY_MATCH: WIN32_ERROR = 460u32;$/;"	C
ERROR_CAPAUTHZ_SCCD_PARSE_ERROR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CAPAUTHZ_SCCD_PARSE_ERROR: WIN32_ERROR = 458u32;$/;"	C
ERROR_CARDBUS_NOT_SUPPORTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CARDBUS_NOT_SUPPORTED: WIN32_ERROR = 724u32;$/;"	C
ERROR_CASE_DIFFERING_NAMES_IN_DIR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CASE_DIFFERING_NAMES_IN_DIR: WIN32_ERROR = 424u32;$/;"	C
ERROR_CASE_SENSITIVE_PATH	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CASE_SENSITIVE_PATH: WIN32_ERROR = 442u32;$/;"	C
ERROR_CERTIFICATE_VALIDATION_PREFERENCE_CONFLICT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CERTIFICATE_VALIDATION_PREFERENCE_CONFLICT: WIN32_ERROR = 817u32;$/;"	C
ERROR_CHECKING_FILE_SYSTEM	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CHECKING_FILE_SYSTEM: WIN32_ERROR = 712u32;$/;"	C
ERROR_CHECKOUT_REQUIRED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CHECKOUT_REQUIRED: WIN32_ERROR = 221u32;$/;"	C
ERROR_CHILD_MUST_BE_VOLATILE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CHILD_MUST_BE_VOLATILE: WIN32_ERROR = 1021u32;$/;"	C
ERROR_CHILD_NOT_COMPLETE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CHILD_NOT_COMPLETE: WIN32_ERROR = 129u32;$/;"	C
ERROR_CHILD_PROCESS_BLOCKED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CHILD_PROCESS_BLOCKED: WIN32_ERROR = 367u32;$/;"	C
ERROR_CHILD_WINDOW_MENU	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CHILD_WINDOW_MENU: WIN32_ERROR = 1436u32;$/;"	C
ERROR_CIMFS_IMAGE_CORRUPT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CIMFS_IMAGE_CORRUPT: WIN32_ERROR = 470u32;$/;"	C
ERROR_CIMFS_IMAGE_VERSION_NOT_SUPPORTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CIMFS_IMAGE_VERSION_NOT_SUPPORTED: WIN32_ERROR = 471u32;$/;"	C
ERROR_CIRCULAR_DEPENDENCY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CIRCULAR_DEPENDENCY: WIN32_ERROR = 1059u32;$/;"	C
ERROR_CLASS_ALREADY_EXISTS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CLASS_ALREADY_EXISTS: WIN32_ERROR = 1410u32;$/;"	C
ERROR_CLASS_DOES_NOT_EXIST	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CLASS_DOES_NOT_EXIST: WIN32_ERROR = 1411u32;$/;"	C
ERROR_CLASS_HAS_WINDOWS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CLASS_HAS_WINDOWS: WIN32_ERROR = 1412u32;$/;"	C
ERROR_CLIENT_SERVER_PARAMETERS_INVALID	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CLIENT_SERVER_PARAMETERS_INVALID: WIN32_ERROR = 597u32;$/;"	C
ERROR_CLIPBOARD_NOT_OPEN	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CLIPBOARD_NOT_OPEN: WIN32_ERROR = 1418u32;$/;"	C
ERROR_CLOUD_FILE_ACCESS_DENIED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CLOUD_FILE_ACCESS_DENIED: WIN32_ERROR = 395u32;$/;"	C
ERROR_CLOUD_FILE_ALREADY_CONNECTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CLOUD_FILE_ALREADY_CONNECTED: WIN32_ERROR = 378u32;$/;"	C
ERROR_CLOUD_FILE_AUTHENTICATION_FAILED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CLOUD_FILE_AUTHENTICATION_FAILED: WIN32_ERROR = 386u32;$/;"	C
ERROR_CLOUD_FILE_CONNECTED_PROVIDER_ONLY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CLOUD_FILE_CONNECTED_PROVIDER_ONLY: WIN32_ERROR = 382u32;$/;"	C
ERROR_CLOUD_FILE_DEHYDRATION_DISALLOWED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CLOUD_FILE_DEHYDRATION_DISALLOWED: WIN32_ERROR = 434u32;$/;"	C
ERROR_CLOUD_FILE_INCOMPATIBLE_HARDLINKS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CLOUD_FILE_INCOMPATIBLE_HARDLINKS: WIN32_ERROR = 396u32;$/;"	C
ERROR_CLOUD_FILE_INSUFFICIENT_RESOURCES	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CLOUD_FILE_INSUFFICIENT_RESOURCES: WIN32_ERROR = 387u32;$/;"	C
ERROR_CLOUD_FILE_INVALID_REQUEST	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CLOUD_FILE_INVALID_REQUEST: WIN32_ERROR = 380u32;$/;"	C
ERROR_CLOUD_FILE_IN_USE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CLOUD_FILE_IN_USE: WIN32_ERROR = 391u32;$/;"	C
ERROR_CLOUD_FILE_METADATA_CORRUPT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CLOUD_FILE_METADATA_CORRUPT: WIN32_ERROR = 363u32;$/;"	C
ERROR_CLOUD_FILE_METADATA_TOO_LARGE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CLOUD_FILE_METADATA_TOO_LARGE: WIN32_ERROR = 364u32;$/;"	C
ERROR_CLOUD_FILE_NETWORK_UNAVAILABLE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CLOUD_FILE_NETWORK_UNAVAILABLE: WIN32_ERROR = 388u32;$/;"	C
ERROR_CLOUD_FILE_NOT_IN_SYNC	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CLOUD_FILE_NOT_IN_SYNC: WIN32_ERROR = 377u32;$/;"	C
ERROR_CLOUD_FILE_NOT_SUPPORTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CLOUD_FILE_NOT_SUPPORTED: WIN32_ERROR = 379u32;$/;"	C
ERROR_CLOUD_FILE_NOT_UNDER_SYNC_ROOT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CLOUD_FILE_NOT_UNDER_SYNC_ROOT: WIN32_ERROR = 390u32;$/;"	C
ERROR_CLOUD_FILE_PINNED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CLOUD_FILE_PINNED: WIN32_ERROR = 392u32;$/;"	C
ERROR_CLOUD_FILE_PROPERTY_BLOB_CHECKSUM_MISMATCH	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CLOUD_FILE_PROPERTY_BLOB_CHECKSUM_MISMATCH: WIN32_ERROR = 366u32;$/;"	C
ERROR_CLOUD_FILE_PROPERTY_BLOB_TOO_LARGE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CLOUD_FILE_PROPERTY_BLOB_TOO_LARGE: WIN32_ERROR = 365u32;$/;"	C
ERROR_CLOUD_FILE_PROPERTY_CORRUPT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CLOUD_FILE_PROPERTY_CORRUPT: WIN32_ERROR = 394u32;$/;"	C
ERROR_CLOUD_FILE_PROPERTY_LOCK_CONFLICT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CLOUD_FILE_PROPERTY_LOCK_CONFLICT: WIN32_ERROR = 397u32;$/;"	C
ERROR_CLOUD_FILE_PROPERTY_VERSION_NOT_SUPPORTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CLOUD_FILE_PROPERTY_VERSION_NOT_SUPPORTED: WIN32_ERROR = 375u32;$/;"	C
ERROR_CLOUD_FILE_PROVIDER_NOT_RUNNING	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CLOUD_FILE_PROVIDER_NOT_RUNNING: WIN32_ERROR = 362u32;$/;"	C
ERROR_CLOUD_FILE_PROVIDER_TERMINATED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CLOUD_FILE_PROVIDER_TERMINATED: WIN32_ERROR = 404u32;$/;"	C
ERROR_CLOUD_FILE_READ_ONLY_VOLUME	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CLOUD_FILE_READ_ONLY_VOLUME: WIN32_ERROR = 381u32;$/;"	C
ERROR_CLOUD_FILE_REQUEST_ABORTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CLOUD_FILE_REQUEST_ABORTED: WIN32_ERROR = 393u32;$/;"	C
ERROR_CLOUD_FILE_REQUEST_CANCELED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CLOUD_FILE_REQUEST_CANCELED: WIN32_ERROR = 398u32;$/;"	C
ERROR_CLOUD_FILE_REQUEST_TIMEOUT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CLOUD_FILE_REQUEST_TIMEOUT: WIN32_ERROR = 426u32;$/;"	C
ERROR_CLOUD_FILE_SYNC_ROOT_METADATA_CORRUPT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CLOUD_FILE_SYNC_ROOT_METADATA_CORRUPT: WIN32_ERROR = 358u32;$/;"	C
ERROR_CLOUD_FILE_TOO_MANY_PROPERTY_BLOBS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CLOUD_FILE_TOO_MANY_PROPERTY_BLOBS: WIN32_ERROR = 374u32;$/;"	C
ERROR_CLOUD_FILE_UNSUCCESSFUL	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CLOUD_FILE_UNSUCCESSFUL: WIN32_ERROR = 389u32;$/;"	C
ERROR_CLOUD_FILE_US_MESSAGE_TIMEOUT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CLOUD_FILE_US_MESSAGE_TIMEOUT: WIN32_ERROR = 475u32;$/;"	C
ERROR_CLOUD_FILE_VALIDATION_FAILED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CLOUD_FILE_VALIDATION_FAILED: WIN32_ERROR = 383u32;$/;"	C
ERROR_COMMITMENT_LIMIT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_COMMITMENT_LIMIT: WIN32_ERROR = 1455u32;$/;"	C
ERROR_COMMITMENT_MINIMUM	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_COMMITMENT_MINIMUM: WIN32_ERROR = 635u32;$/;"	C
ERROR_COMPRESSED_FILE_NOT_SUPPORTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_COMPRESSED_FILE_NOT_SUPPORTED: WIN32_ERROR = 335u32;$/;"	C
ERROR_COMPRESSION_DISABLED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_COMPRESSION_DISABLED: WIN32_ERROR = 769u32;$/;"	C
ERROR_COMPRESSION_NOT_BENEFICIAL	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_COMPRESSION_NOT_BENEFICIAL: WIN32_ERROR = 344u32;$/;"	C
ERROR_CONNECTED_OTHER_PASSWORD	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CONNECTED_OTHER_PASSWORD: WIN32_ERROR = 2108u32;$/;"	C
ERROR_CONNECTED_OTHER_PASSWORD_DEFAULT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CONNECTED_OTHER_PASSWORD_DEFAULT: WIN32_ERROR = 2109u32;$/;"	C
ERROR_CONNECTION_ABORTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CONNECTION_ABORTED: WIN32_ERROR = 1236u32;$/;"	C
ERROR_CONNECTION_ACTIVE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CONNECTION_ACTIVE: WIN32_ERROR = 1230u32;$/;"	C
ERROR_CONNECTION_COUNT_LIMIT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CONNECTION_COUNT_LIMIT: WIN32_ERROR = 1238u32;$/;"	C
ERROR_CONNECTION_INVALID	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CONNECTION_INVALID: WIN32_ERROR = 1229u32;$/;"	C
ERROR_CONNECTION_REFUSED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CONNECTION_REFUSED: WIN32_ERROR = 1225u32;$/;"	C
ERROR_CONNECTION_UNAVAIL	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CONNECTION_UNAVAIL: WIN32_ERROR = 1201u32;$/;"	C
ERROR_CONTAINER_ASSIGNED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CONTAINER_ASSIGNED: WIN32_ERROR = 1504u32;$/;"	C
ERROR_CONTENT_BLOCKED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CONTENT_BLOCKED: WIN32_ERROR = 1296u32;$/;"	C
ERROR_CONTEXT_EXPIRED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CONTEXT_EXPIRED: WIN32_ERROR = 1931u32;$/;"	C
ERROR_CONTINUE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CONTINUE: WIN32_ERROR = 1246u32;$/;"	C
ERROR_CONTROL_C_EXIT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CONTROL_C_EXIT: WIN32_ERROR = 572u32;$/;"	C
ERROR_CONTROL_ID_NOT_FOUND	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CONTROL_ID_NOT_FOUND: WIN32_ERROR = 1421u32;$/;"	C
ERROR_CONVERT_TO_LARGE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CONVERT_TO_LARGE: WIN32_ERROR = 600u32;$/;"	C
ERROR_CORRUPT_LOG_CLEARED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CORRUPT_LOG_CLEARED: WIN32_ERROR = 798u32;$/;"	C
ERROR_CORRUPT_LOG_CORRUPTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CORRUPT_LOG_CORRUPTED: WIN32_ERROR = 795u32;$/;"	C
ERROR_CORRUPT_LOG_DELETED_FULL	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CORRUPT_LOG_DELETED_FULL: WIN32_ERROR = 797u32;$/;"	C
ERROR_CORRUPT_LOG_OVERFULL	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CORRUPT_LOG_OVERFULL: WIN32_ERROR = 794u32;$/;"	C
ERROR_CORRUPT_LOG_UNAVAILABLE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CORRUPT_LOG_UNAVAILABLE: WIN32_ERROR = 796u32;$/;"	C
ERROR_CORRUPT_SYSTEM_FILE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CORRUPT_SYSTEM_FILE: WIN32_ERROR = 634u32;$/;"	C
ERROR_COULD_NOT_INTERPRET	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_COULD_NOT_INTERPRET: WIN32_ERROR = 552u32;$/;"	C
ERROR_COUNTER_TIMEOUT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_COUNTER_TIMEOUT: WIN32_ERROR = 1121u32;$/;"	C
ERROR_CPU_SET_INVALID	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CPU_SET_INVALID: WIN32_ERROR = 813u32;$/;"	C
ERROR_CRASH_DUMP	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CRASH_DUMP: WIN32_ERROR = 753u32;$/;"	C
ERROR_CRC	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CRC: WIN32_ERROR = 23u32;$/;"	C
ERROR_CREATE_FAILED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CREATE_FAILED: WIN32_ERROR = 1631u32;$/;"	C
ERROR_CROSS_PARTITION_VIOLATION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CROSS_PARTITION_VIOLATION: WIN32_ERROR = 1661u32;$/;"	C
ERROR_CSCSHARE_OFFLINE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CSCSHARE_OFFLINE: WIN32_ERROR = 1262u32;$/;"	C
ERROR_CS_ENCRYPTION_EXISTING_ENCRYPTED_FILE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CS_ENCRYPTION_EXISTING_ENCRYPTED_FILE: WIN32_ERROR = 6019u32;$/;"	C
ERROR_CS_ENCRYPTION_FILE_NOT_CSE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CS_ENCRYPTION_FILE_NOT_CSE: WIN32_ERROR = 6021u32;$/;"	C
ERROR_CS_ENCRYPTION_INVALID_SERVER_RESPONSE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CS_ENCRYPTION_INVALID_SERVER_RESPONSE: WIN32_ERROR = 6017u32;$/;"	C
ERROR_CS_ENCRYPTION_NEW_ENCRYPTED_FILE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CS_ENCRYPTION_NEW_ENCRYPTED_FILE: WIN32_ERROR = 6020u32;$/;"	C
ERROR_CS_ENCRYPTION_UNSUPPORTED_SERVER	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CS_ENCRYPTION_UNSUPPORTED_SERVER: WIN32_ERROR = 6018u32;$/;"	C
ERROR_CTX_CLIENT_QUERY_TIMEOUT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CTX_CLIENT_QUERY_TIMEOUT: WIN32_ERROR = 7040u32;$/;"	C
ERROR_CTX_MODEM_RESPONSE_TIMEOUT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CTX_MODEM_RESPONSE_TIMEOUT: WIN32_ERROR = 7012u32;$/;"	C
ERROR_CURRENT_DIRECTORY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CURRENT_DIRECTORY: WIN32_ERROR = 16u32;$/;"	C
ERROR_CURRENT_DOMAIN_NOT_ALLOWED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_CURRENT_DOMAIN_NOT_ALLOWED: WIN32_ERROR = 1399u32;$/;"	C
ERROR_DATABASE_DOES_NOT_EXIST	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DATABASE_DOES_NOT_EXIST: WIN32_ERROR = 1065u32;$/;"	C
ERROR_DATATYPE_MISMATCH	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DATATYPE_MISMATCH: WIN32_ERROR = 1629u32;$/;"	C
ERROR_DATA_CHECKSUM_ERROR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DATA_CHECKSUM_ERROR: WIN32_ERROR = 323u32;$/;"	C
ERROR_DATA_NOT_ACCEPTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DATA_NOT_ACCEPTED: WIN32_ERROR = 592u32;$/;"	C
ERROR_DAX_MAPPING_EXISTS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DAX_MAPPING_EXISTS: WIN32_ERROR = 361u32;$/;"	C
ERROR_DBG_COMMAND_EXCEPTION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DBG_COMMAND_EXCEPTION: WIN32_ERROR = 697u32;$/;"	C
ERROR_DBG_CONTINUE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DBG_CONTINUE: WIN32_ERROR = 767u32;$/;"	C
ERROR_DBG_CONTROL_BREAK	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DBG_CONTROL_BREAK: WIN32_ERROR = 696u32;$/;"	C
ERROR_DBG_CONTROL_C	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DBG_CONTROL_C: WIN32_ERROR = 693u32;$/;"	C
ERROR_DBG_EXCEPTION_HANDLED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DBG_EXCEPTION_HANDLED: WIN32_ERROR = 766u32;$/;"	C
ERROR_DBG_EXCEPTION_NOT_HANDLED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DBG_EXCEPTION_NOT_HANDLED: WIN32_ERROR = 688u32;$/;"	C
ERROR_DBG_PRINTEXCEPTION_C	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DBG_PRINTEXCEPTION_C: WIN32_ERROR = 694u32;$/;"	C
ERROR_DBG_REPLY_LATER	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DBG_REPLY_LATER: WIN32_ERROR = 689u32;$/;"	C
ERROR_DBG_RIPEXCEPTION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DBG_RIPEXCEPTION: WIN32_ERROR = 695u32;$/;"	C
ERROR_DBG_TERMINATE_PROCESS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DBG_TERMINATE_PROCESS: WIN32_ERROR = 692u32;$/;"	C
ERROR_DBG_TERMINATE_THREAD	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DBG_TERMINATE_THREAD: WIN32_ERROR = 691u32;$/;"	C
ERROR_DBG_UNABLE_TO_PROVIDE_HANDLE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DBG_UNABLE_TO_PROVIDE_HANDLE: WIN32_ERROR = 690u32;$/;"	C
ERROR_DC_NOT_FOUND	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DC_NOT_FOUND: WIN32_ERROR = 1425u32;$/;"	C
ERROR_DDE_FAIL	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DDE_FAIL: WIN32_ERROR = 1156u32;$/;"	C
ERROR_DEBUGGER_INACTIVE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DEBUGGER_INACTIVE: WIN32_ERROR = 1284u32;$/;"	C
ERROR_DEBUG_ATTACH_FAILED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DEBUG_ATTACH_FAILED: WIN32_ERROR = 590u32;$/;"	C
ERROR_DECRYPTION_FAILED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DECRYPTION_FAILED: WIN32_ERROR = 6001u32;$/;"	C
ERROR_DELAY_LOAD_FAILED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DELAY_LOAD_FAILED: WIN32_ERROR = 1285u32;$/;"	C
ERROR_DELETE_PENDING	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DELETE_PENDING: WIN32_ERROR = 303u32;$/;"	C
ERROR_DEPENDENT_SERVICES_RUNNING	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DEPENDENT_SERVICES_RUNNING: WIN32_ERROR = 1051u32;$/;"	C
ERROR_DESTINATION_ELEMENT_FULL	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DESTINATION_ELEMENT_FULL: WIN32_ERROR = 1161u32;$/;"	C
ERROR_DESTROY_OBJECT_OF_OTHER_THREAD	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DESTROY_OBJECT_OF_OTHER_THREAD: WIN32_ERROR = 1435u32;$/;"	C
ERROR_DEVICE_ALREADY_ATTACHED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DEVICE_ALREADY_ATTACHED: WIN32_ERROR = 548u32;$/;"	C
ERROR_DEVICE_ALREADY_REMEMBERED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DEVICE_ALREADY_REMEMBERED: WIN32_ERROR = 1202u32;$/;"	C
ERROR_DEVICE_DOOR_OPEN	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DEVICE_DOOR_OPEN: WIN32_ERROR = 1166u32;$/;"	C
ERROR_DEVICE_ENUMERATION_ERROR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DEVICE_ENUMERATION_ERROR: WIN32_ERROR = 648u32;$/;"	C
ERROR_DEVICE_FEATURE_NOT_SUPPORTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DEVICE_FEATURE_NOT_SUPPORTED: WIN32_ERROR = 316u32;$/;"	C
ERROR_DEVICE_HARDWARE_ERROR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DEVICE_HARDWARE_ERROR: WIN32_ERROR = 483u32;$/;"	C
ERROR_DEVICE_HINT_NAME_BUFFER_TOO_SMALL	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DEVICE_HINT_NAME_BUFFER_TOO_SMALL: WIN32_ERROR = 355u32;$/;"	C
ERROR_DEVICE_IN_MAINTENANCE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DEVICE_IN_MAINTENANCE: WIN32_ERROR = 359u32;$/;"	C
ERROR_DEVICE_IN_USE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DEVICE_IN_USE: WIN32_ERROR = 2404u32;$/;"	C
ERROR_DEVICE_NOT_CONNECTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DEVICE_NOT_CONNECTED: WIN32_ERROR = 1167u32;$/;"	C
ERROR_DEVICE_NOT_PARTITIONED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DEVICE_NOT_PARTITIONED: WIN32_ERROR = 1107u32;$/;"	C
ERROR_DEVICE_NO_RESOURCES	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DEVICE_NO_RESOURCES: WIN32_ERROR = 322u32;$/;"	C
ERROR_DEVICE_REINITIALIZATION_NEEDED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DEVICE_REINITIALIZATION_NEEDED: WIN32_ERROR = 1164u32;$/;"	C
ERROR_DEVICE_REMOVED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DEVICE_REMOVED: WIN32_ERROR = 1617u32;$/;"	C
ERROR_DEVICE_REQUIRES_CLEANING	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DEVICE_REQUIRES_CLEANING: WIN32_ERROR = 1165u32;$/;"	C
ERROR_DEVICE_RESET_REQUIRED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DEVICE_RESET_REQUIRED: WIN32_ERROR = 507u32;$/;"	C
ERROR_DEVICE_SUPPORT_IN_PROGRESS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DEVICE_SUPPORT_IN_PROGRESS: WIN32_ERROR = 171u32;$/;"	C
ERROR_DEVICE_UNREACHABLE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DEVICE_UNREACHABLE: WIN32_ERROR = 321u32;$/;"	C
ERROR_DEV_NOT_EXIST	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DEV_NOT_EXIST: WIN32_ERROR = 55u32;$/;"	C
ERROR_DHCP_ADDRESS_CONFLICT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DHCP_ADDRESS_CONFLICT: WIN32_ERROR = 4100u32;$/;"	C
ERROR_DIFFERENT_SERVICE_ACCOUNT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DIFFERENT_SERVICE_ACCOUNT: WIN32_ERROR = 1079u32;$/;"	C
ERROR_DIRECTORY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DIRECTORY: WIN32_ERROR = 267u32;$/;"	C
ERROR_DIRECTORY_NOT_SUPPORTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DIRECTORY_NOT_SUPPORTED: WIN32_ERROR = 336u32;$/;"	C
ERROR_DIRECT_ACCESS_HANDLE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DIRECT_ACCESS_HANDLE: WIN32_ERROR = 130u32;$/;"	C
ERROR_DIR_EFS_DISALLOWED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DIR_EFS_DISALLOWED: WIN32_ERROR = 6010u32;$/;"	C
ERROR_DIR_NOT_EMPTY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DIR_NOT_EMPTY: WIN32_ERROR = 145u32;$/;"	C
ERROR_DIR_NOT_ROOT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DIR_NOT_ROOT: WIN32_ERROR = 144u32;$/;"	C
ERROR_DISCARDED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DISCARDED: WIN32_ERROR = 157u32;$/;"	C
ERROR_DISK_CHANGE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DISK_CHANGE: WIN32_ERROR = 107u32;$/;"	C
ERROR_DISK_CORRUPT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DISK_CORRUPT: WIN32_ERROR = 1393u32;$/;"	C
ERROR_DISK_FULL	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DISK_FULL: WIN32_ERROR = 112u32;$/;"	C
ERROR_DISK_OPERATION_FAILED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DISK_OPERATION_FAILED: WIN32_ERROR = 1127u32;$/;"	C
ERROR_DISK_QUOTA_EXCEEDED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DISK_QUOTA_EXCEEDED: WIN32_ERROR = 1295u32;$/;"	C
ERROR_DISK_RECALIBRATE_FAILED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DISK_RECALIBRATE_FAILED: WIN32_ERROR = 1126u32;$/;"	C
ERROR_DISK_REPAIR_DISABLED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DISK_REPAIR_DISABLED: WIN32_ERROR = 780u32;$/;"	C
ERROR_DISK_REPAIR_REDIRECTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DISK_REPAIR_REDIRECTED: WIN32_ERROR = 792u32;$/;"	C
ERROR_DISK_REPAIR_UNSUCCESSFUL	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DISK_REPAIR_UNSUCCESSFUL: WIN32_ERROR = 793u32;$/;"	C
ERROR_DISK_RESET_FAILED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DISK_RESET_FAILED: WIN32_ERROR = 1128u32;$/;"	C
ERROR_DISK_RESOURCES_EXHAUSTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DISK_RESOURCES_EXHAUSTED: WIN32_ERROR = 314u32;$/;"	C
ERROR_DISK_TOO_FRAGMENTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DISK_TOO_FRAGMENTED: WIN32_ERROR = 302u32;$/;"	C
ERROR_DLL_INIT_FAILED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DLL_INIT_FAILED: WIN32_ERROR = 1114u32;$/;"	C
ERROR_DLL_INIT_FAILED_LOGOFF	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DLL_INIT_FAILED_LOGOFF: WIN32_ERROR = 624u32;$/;"	C
ERROR_DLL_MIGHT_BE_INCOMPATIBLE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DLL_MIGHT_BE_INCOMPATIBLE: WIN32_ERROR = 687u32;$/;"	C
ERROR_DLL_MIGHT_BE_INSECURE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DLL_MIGHT_BE_INSECURE: WIN32_ERROR = 686u32;$/;"	C
ERROR_DLL_NOT_FOUND	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DLL_NOT_FOUND: WIN32_ERROR = 1157u32;$/;"	C
ERROR_DLP_POLICY_DENIES_OPERATION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DLP_POLICY_DENIES_OPERATION: WIN32_ERROR = 446u32;$/;"	C
ERROR_DLP_POLICY_SILENTLY_FAIL	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DLP_POLICY_SILENTLY_FAIL: WIN32_ERROR = 449u32;$/;"	C
ERROR_DLP_POLICY_WARNS_AGAINST_OPERATION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DLP_POLICY_WARNS_AGAINST_OPERATION: WIN32_ERROR = 445u32;$/;"	C
ERROR_DOMAIN_CONTROLLER_EXISTS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DOMAIN_CONTROLLER_EXISTS: WIN32_ERROR = 1250u32;$/;"	C
ERROR_DOMAIN_CONTROLLER_NOT_FOUND	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DOMAIN_CONTROLLER_NOT_FOUND: WIN32_ERROR = 1908u32;$/;"	C
ERROR_DOMAIN_CTRLR_CONFIG_ERROR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DOMAIN_CTRLR_CONFIG_ERROR: WIN32_ERROR = 581u32;$/;"	C
ERROR_DOMAIN_EXISTS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DOMAIN_EXISTS: WIN32_ERROR = 1356u32;$/;"	C
ERROR_DOMAIN_LIMIT_EXCEEDED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DOMAIN_LIMIT_EXCEEDED: WIN32_ERROR = 1357u32;$/;"	C
ERROR_DOMAIN_SID_SAME_AS_LOCAL_WORKSTATION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DOMAIN_SID_SAME_AS_LOCAL_WORKSTATION: WIN32_ERROR = 8644u32;$/;"	C
ERROR_DOMAIN_TRUST_INCONSISTENT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DOMAIN_TRUST_INCONSISTENT: WIN32_ERROR = 1810u32;$/;"	C
ERROR_DOWNGRADE_DETECTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DOWNGRADE_DETECTED: WIN32_ERROR = 1265u32;$/;"	C
ERROR_DPL_NOT_SUPPORTED_FOR_USER	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DPL_NOT_SUPPORTED_FOR_USER: WIN32_ERROR = 423u32;$/;"	C
ERROR_DRIVERS_LEAKING_LOCKED_PAGES	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DRIVERS_LEAKING_LOCKED_PAGES: WIN32_ERROR = 729u32;$/;"	C
ERROR_DRIVER_BLOCKED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DRIVER_BLOCKED: WIN32_ERROR = 1275u32;$/;"	C
ERROR_DRIVER_CANCEL_TIMEOUT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DRIVER_CANCEL_TIMEOUT: WIN32_ERROR = 594u32;$/;"	C
ERROR_DRIVER_DATABASE_ERROR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DRIVER_DATABASE_ERROR: WIN32_ERROR = 652u32;$/;"	C
ERROR_DRIVER_FAILED_PRIOR_UNLOAD	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DRIVER_FAILED_PRIOR_UNLOAD: WIN32_ERROR = 654u32;$/;"	C
ERROR_DRIVER_FAILED_SLEEP	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DRIVER_FAILED_SLEEP: WIN32_ERROR = 633u32;$/;"	C
ERROR_DRIVER_PROCESS_TERMINATED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DRIVER_PROCESS_TERMINATED: WIN32_ERROR = 1291u32;$/;"	C
ERROR_DRIVE_LOCKED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DRIVE_LOCKED: WIN32_ERROR = 108u32;$/;"	C
ERROR_DS_ADD_REPLICA_INHIBITED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_ADD_REPLICA_INHIBITED: WIN32_ERROR = 8302u32;$/;"	C
ERROR_DS_ADMIN_LIMIT_EXCEEDED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_ADMIN_LIMIT_EXCEEDED: WIN32_ERROR = 8228u32;$/;"	C
ERROR_DS_AFFECTS_MULTIPLE_DSAS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_AFFECTS_MULTIPLE_DSAS: WIN32_ERROR = 8249u32;$/;"	C
ERROR_DS_AG_CANT_HAVE_UNIVERSAL_MEMBER	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_AG_CANT_HAVE_UNIVERSAL_MEMBER: WIN32_ERROR = 8578u32;$/;"	C
ERROR_DS_ALIASED_OBJ_MISSING	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_ALIASED_OBJ_MISSING: WIN32_ERROR = 8334u32;$/;"	C
ERROR_DS_ALIAS_DEREF_PROBLEM	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_ALIAS_DEREF_PROBLEM: WIN32_ERROR = 8244u32;$/;"	C
ERROR_DS_ALIAS_POINTS_TO_ALIAS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_ALIAS_POINTS_TO_ALIAS: WIN32_ERROR = 8336u32;$/;"	C
ERROR_DS_ALIAS_PROBLEM	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_ALIAS_PROBLEM: WIN32_ERROR = 8241u32;$/;"	C
ERROR_DS_ATTRIBUTE_OR_VALUE_EXISTS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_ATTRIBUTE_OR_VALUE_EXISTS: WIN32_ERROR = 8205u32;$/;"	C
ERROR_DS_ATTRIBUTE_OWNED_BY_SAM	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_ATTRIBUTE_OWNED_BY_SAM: WIN32_ERROR = 8346u32;$/;"	C
ERROR_DS_ATTRIBUTE_TYPE_UNDEFINED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_ATTRIBUTE_TYPE_UNDEFINED: WIN32_ERROR = 8204u32;$/;"	C
ERROR_DS_ATT_ALREADY_EXISTS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_ATT_ALREADY_EXISTS: WIN32_ERROR = 8318u32;$/;"	C
ERROR_DS_ATT_IS_NOT_ON_OBJ	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_ATT_IS_NOT_ON_OBJ: WIN32_ERROR = 8310u32;$/;"	C
ERROR_DS_ATT_NOT_DEF_FOR_CLASS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_ATT_NOT_DEF_FOR_CLASS: WIN32_ERROR = 8317u32;$/;"	C
ERROR_DS_ATT_NOT_DEF_IN_SCHEMA	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_ATT_NOT_DEF_IN_SCHEMA: WIN32_ERROR = 8303u32;$/;"	C
ERROR_DS_ATT_SCHEMA_REQ_ID	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_ATT_SCHEMA_REQ_ID: WIN32_ERROR = 8399u32;$/;"	C
ERROR_DS_ATT_SCHEMA_REQ_SYNTAX	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_ATT_SCHEMA_REQ_SYNTAX: WIN32_ERROR = 8416u32;$/;"	C
ERROR_DS_ATT_VAL_ALREADY_EXISTS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_ATT_VAL_ALREADY_EXISTS: WIN32_ERROR = 8323u32;$/;"	C
ERROR_DS_AUDIT_FAILURE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_AUDIT_FAILURE: WIN32_ERROR = 8625u32;$/;"	C
ERROR_DS_AUTHORIZATION_FAILED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_AUTHORIZATION_FAILED: WIN32_ERROR = 8599u32;$/;"	C
ERROR_DS_AUTH_METHOD_NOT_SUPPORTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_AUTH_METHOD_NOT_SUPPORTED: WIN32_ERROR = 8231u32;$/;"	C
ERROR_DS_AUTH_UNKNOWN	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_AUTH_UNKNOWN: WIN32_ERROR = 8234u32;$/;"	C
ERROR_DS_AUX_CLS_TEST_FAIL	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_AUX_CLS_TEST_FAIL: WIN32_ERROR = 8389u32;$/;"	C
ERROR_DS_BACKLINK_WITHOUT_LINK	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_BACKLINK_WITHOUT_LINK: WIN32_ERROR = 8482u32;$/;"	C
ERROR_DS_BAD_ATT_SCHEMA_SYNTAX	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_BAD_ATT_SCHEMA_SYNTAX: WIN32_ERROR = 8400u32;$/;"	C
ERROR_DS_BAD_HIERARCHY_FILE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_BAD_HIERARCHY_FILE: WIN32_ERROR = 8425u32;$/;"	C
ERROR_DS_BAD_INSTANCE_TYPE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_BAD_INSTANCE_TYPE: WIN32_ERROR = 8313u32;$/;"	C
ERROR_DS_BAD_NAME_SYNTAX	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_BAD_NAME_SYNTAX: WIN32_ERROR = 8335u32;$/;"	C
ERROR_DS_BAD_RDN_ATT_ID_SYNTAX	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_BAD_RDN_ATT_ID_SYNTAX: WIN32_ERROR = 8392u32;$/;"	C
ERROR_DS_BUILD_HIERARCHY_TABLE_FAILED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_BUILD_HIERARCHY_TABLE_FAILED: WIN32_ERROR = 8426u32;$/;"	C
ERROR_DS_BUSY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_BUSY: WIN32_ERROR = 8206u32;$/;"	C
ERROR_DS_CANT_ACCESS_REMOTE_PART_OF_AD	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_CANT_ACCESS_REMOTE_PART_OF_AD: WIN32_ERROR = 8585u32;$/;"	C
ERROR_DS_CANT_ADD_ATT_VALUES	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_CANT_ADD_ATT_VALUES: WIN32_ERROR = 8320u32;$/;"	C
ERROR_DS_CANT_ADD_SYSTEM_ONLY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_CANT_ADD_SYSTEM_ONLY: WIN32_ERROR = 8358u32;$/;"	C
ERROR_DS_CANT_ADD_TO_GC	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_CANT_ADD_TO_GC: WIN32_ERROR = 8550u32;$/;"	C
ERROR_DS_CANT_CACHE_ATT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_CANT_CACHE_ATT: WIN32_ERROR = 8401u32;$/;"	C
ERROR_DS_CANT_CACHE_CLASS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_CANT_CACHE_CLASS: WIN32_ERROR = 8402u32;$/;"	C
ERROR_DS_CANT_CREATE_IN_NONDOMAIN_NC	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_CANT_CREATE_IN_NONDOMAIN_NC: WIN32_ERROR = 8553u32;$/;"	C
ERROR_DS_CANT_CREATE_UNDER_SCHEMA	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_CANT_CREATE_UNDER_SCHEMA: WIN32_ERROR = 8510u32;$/;"	C
ERROR_DS_CANT_DELETE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_CANT_DELETE: WIN32_ERROR = 8398u32;$/;"	C
ERROR_DS_CANT_DELETE_DSA_OBJ	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_CANT_DELETE_DSA_OBJ: WIN32_ERROR = 8340u32;$/;"	C
ERROR_DS_CANT_DEL_MASTER_CROSSREF	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_CANT_DEL_MASTER_CROSSREF: WIN32_ERROR = 8375u32;$/;"	C
ERROR_DS_CANT_DEMOTE_WITH_WRITEABLE_NC	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_CANT_DEMOTE_WITH_WRITEABLE_NC: WIN32_ERROR = 8604u32;$/;"	C
ERROR_DS_CANT_DEREF_ALIAS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_CANT_DEREF_ALIAS: WIN32_ERROR = 8337u32;$/;"	C
ERROR_DS_CANT_DERIVE_SPN_FOR_DELETED_DOMAIN	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_CANT_DERIVE_SPN_FOR_DELETED_DOMAIN: WIN32_ERROR = 8603u32;$/;"	C
ERROR_DS_CANT_DERIVE_SPN_WITHOUT_SERVER_REF	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_CANT_DERIVE_SPN_WITHOUT_SERVER_REF: WIN32_ERROR = 8589u32;$/;"	C
ERROR_DS_CANT_FIND_DC_FOR_SRC_DOMAIN	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_CANT_FIND_DC_FOR_SRC_DOMAIN: WIN32_ERROR = 8537u32;$/;"	C
ERROR_DS_CANT_FIND_DSA_OBJ	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_CANT_FIND_DSA_OBJ: WIN32_ERROR = 8419u32;$/;"	C
ERROR_DS_CANT_FIND_EXPECTED_NC	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_CANT_FIND_EXPECTED_NC: WIN32_ERROR = 8420u32;$/;"	C
ERROR_DS_CANT_FIND_NC_IN_CACHE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_CANT_FIND_NC_IN_CACHE: WIN32_ERROR = 8421u32;$/;"	C
ERROR_DS_CANT_MIX_MASTER_AND_REPS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_CANT_MIX_MASTER_AND_REPS: WIN32_ERROR = 8331u32;$/;"	C
ERROR_DS_CANT_MOD_OBJ_CLASS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_CANT_MOD_OBJ_CLASS: WIN32_ERROR = 8215u32;$/;"	C
ERROR_DS_CANT_MOD_PRIMARYGROUPID	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_CANT_MOD_PRIMARYGROUPID: WIN32_ERROR = 8506u32;$/;"	C
ERROR_DS_CANT_MOD_SYSTEM_ONLY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_CANT_MOD_SYSTEM_ONLY: WIN32_ERROR = 8369u32;$/;"	C
ERROR_DS_CANT_MOVE_ACCOUNT_GROUP	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_CANT_MOVE_ACCOUNT_GROUP: WIN32_ERROR = 8498u32;$/;"	C
ERROR_DS_CANT_MOVE_APP_BASIC_GROUP	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_CANT_MOVE_APP_BASIC_GROUP: WIN32_ERROR = 8608u32;$/;"	C
ERROR_DS_CANT_MOVE_APP_QUERY_GROUP	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_CANT_MOVE_APP_QUERY_GROUP: WIN32_ERROR = 8609u32;$/;"	C
ERROR_DS_CANT_MOVE_DELETED_OBJECT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_CANT_MOVE_DELETED_OBJECT: WIN32_ERROR = 8489u32;$/;"	C
ERROR_DS_CANT_MOVE_RESOURCE_GROUP	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_CANT_MOVE_RESOURCE_GROUP: WIN32_ERROR = 8499u32;$/;"	C
ERROR_DS_CANT_ON_NON_LEAF	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_CANT_ON_NON_LEAF: WIN32_ERROR = 8213u32;$/;"	C
ERROR_DS_CANT_ON_RDN	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_CANT_ON_RDN: WIN32_ERROR = 8214u32;$/;"	C
ERROR_DS_CANT_REMOVE_ATT_CACHE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_CANT_REMOVE_ATT_CACHE: WIN32_ERROR = 8403u32;$/;"	C
ERROR_DS_CANT_REMOVE_CLASS_CACHE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_CANT_REMOVE_CLASS_CACHE: WIN32_ERROR = 8404u32;$/;"	C
ERROR_DS_CANT_REM_MISSING_ATT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_CANT_REM_MISSING_ATT: WIN32_ERROR = 8324u32;$/;"	C
ERROR_DS_CANT_REM_MISSING_ATT_VAL	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_CANT_REM_MISSING_ATT_VAL: WIN32_ERROR = 8325u32;$/;"	C
ERROR_DS_CANT_REPLACE_HIDDEN_REC	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_CANT_REPLACE_HIDDEN_REC: WIN32_ERROR = 8424u32;$/;"	C
ERROR_DS_CANT_RETRIEVE_ATTS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_CANT_RETRIEVE_ATTS: WIN32_ERROR = 8481u32;$/;"	C
ERROR_DS_CANT_RETRIEVE_CHILD	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_CANT_RETRIEVE_CHILD: WIN32_ERROR = 8422u32;$/;"	C
ERROR_DS_CANT_RETRIEVE_DN	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_CANT_RETRIEVE_DN: WIN32_ERROR = 8405u32;$/;"	C
ERROR_DS_CANT_RETRIEVE_INSTANCE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_CANT_RETRIEVE_INSTANCE: WIN32_ERROR = 8407u32;$/;"	C
ERROR_DS_CANT_RETRIEVE_SD	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_CANT_RETRIEVE_SD: WIN32_ERROR = 8526u32;$/;"	C
ERROR_DS_CANT_START	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_CANT_START: WIN32_ERROR = 8531u32;$/;"	C
ERROR_DS_CANT_TREE_DELETE_CRITICAL_OBJ	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_CANT_TREE_DELETE_CRITICAL_OBJ: WIN32_ERROR = 8560u32;$/;"	C
ERROR_DS_CANT_WITH_ACCT_GROUP_MEMBERSHPS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_CANT_WITH_ACCT_GROUP_MEMBERSHPS: WIN32_ERROR = 8493u32;$/;"	C
ERROR_DS_CHILDREN_EXIST	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_CHILDREN_EXIST: WIN32_ERROR = 8332u32;$/;"	C
ERROR_DS_CLASS_MUST_BE_CONCRETE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_CLASS_MUST_BE_CONCRETE: WIN32_ERROR = 8359u32;$/;"	C
ERROR_DS_CLASS_NOT_DSA	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_CLASS_NOT_DSA: WIN32_ERROR = 8343u32;$/;"	C
ERROR_DS_CLIENT_LOOP	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_CLIENT_LOOP: WIN32_ERROR = 8259u32;$/;"	C
ERROR_DS_CODE_INCONSISTENCY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_CODE_INCONSISTENCY: WIN32_ERROR = 8408u32;$/;"	C
ERROR_DS_COMPARE_FALSE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_COMPARE_FALSE: WIN32_ERROR = 8229u32;$/;"	C
ERROR_DS_COMPARE_TRUE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_COMPARE_TRUE: WIN32_ERROR = 8230u32;$/;"	C
ERROR_DS_CONFIDENTIALITY_REQUIRED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_CONFIDENTIALITY_REQUIRED: WIN32_ERROR = 8237u32;$/;"	C
ERROR_DS_CONFIG_PARAM_MISSING	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_CONFIG_PARAM_MISSING: WIN32_ERROR = 8427u32;$/;"	C
ERROR_DS_CONSTRAINT_VIOLATION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_CONSTRAINT_VIOLATION: WIN32_ERROR = 8239u32;$/;"	C
ERROR_DS_CONSTRUCTED_ATT_MOD	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_CONSTRUCTED_ATT_MOD: WIN32_ERROR = 8475u32;$/;"	C
ERROR_DS_CONTROL_NOT_FOUND	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_CONTROL_NOT_FOUND: WIN32_ERROR = 8258u32;$/;"	C
ERROR_DS_COULDNT_CONTACT_FSMO	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_COULDNT_CONTACT_FSMO: WIN32_ERROR = 8367u32;$/;"	C
ERROR_DS_COULDNT_IDENTIFY_OBJECTS_FOR_TREE_DELETE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_COULDNT_IDENTIFY_OBJECTS_FOR_TREE_DELETE: WIN32_ERROR = 8503u32;$/;"	C
ERROR_DS_COULDNT_LOCK_TREE_FOR_DELETE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_COULDNT_LOCK_TREE_FOR_DELETE: WIN32_ERROR = 8502u32;$/;"	C
ERROR_DS_COULDNT_UPDATE_SPNS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_COULDNT_UPDATE_SPNS: WIN32_ERROR = 8525u32;$/;"	C
ERROR_DS_COUNTING_AB_INDICES_FAILED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_COUNTING_AB_INDICES_FAILED: WIN32_ERROR = 8428u32;$/;"	C
ERROR_DS_CROSS_DOMAIN_CLEANUP_REQD	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_CROSS_DOMAIN_CLEANUP_REQD: WIN32_ERROR = 8491u32;$/;"	C
ERROR_DS_CROSS_DOM_MOVE_ERROR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_CROSS_DOM_MOVE_ERROR: WIN32_ERROR = 8216u32;$/;"	C
ERROR_DS_CROSS_NC_DN_RENAME	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_CROSS_NC_DN_RENAME: WIN32_ERROR = 8368u32;$/;"	C
ERROR_DS_CROSS_REF_BUSY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_CROSS_REF_BUSY: WIN32_ERROR = 8602u32;$/;"	C
ERROR_DS_CROSS_REF_EXISTS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_CROSS_REF_EXISTS: WIN32_ERROR = 8374u32;$/;"	C
ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE: WIN32_ERROR = 8495u32;$/;"	C
ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE_V2	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE_V2: WIN32_ERROR = 8586u32;$/;"	C
ERROR_DS_DATABASE_ERROR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_DATABASE_ERROR: WIN32_ERROR = 8409u32;$/;"	C
ERROR_DS_DECODING_ERROR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_DECODING_ERROR: WIN32_ERROR = 8253u32;$/;"	C
ERROR_DS_DESTINATION_AUDITING_NOT_ENABLED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_DESTINATION_AUDITING_NOT_ENABLED: WIN32_ERROR = 8536u32;$/;"	C
ERROR_DS_DESTINATION_DOMAIN_NOT_IN_FOREST	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_DESTINATION_DOMAIN_NOT_IN_FOREST: WIN32_ERROR = 8535u32;$/;"	C
ERROR_DS_DIFFERENT_REPL_EPOCHS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_DIFFERENT_REPL_EPOCHS: WIN32_ERROR = 8593u32;$/;"	C
ERROR_DS_DISALLOWED_IN_SYSTEM_CONTAINER	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_DISALLOWED_IN_SYSTEM_CONTAINER: WIN32_ERROR = 8615u32;$/;"	C
ERROR_DS_DISALLOWED_NC_REDIRECT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_DISALLOWED_NC_REDIRECT: WIN32_ERROR = 8640u32;$/;"	C
ERROR_DS_DNS_LOOKUP_FAILURE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_DNS_LOOKUP_FAILURE: WIN32_ERROR = 8524u32;$/;"	C
ERROR_DS_DOMAIN_NAME_EXISTS_IN_FOREST	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_DOMAIN_NAME_EXISTS_IN_FOREST: WIN32_ERROR = 8634u32;$/;"	C
ERROR_DS_DOMAIN_RENAME_IN_PROGRESS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_DOMAIN_RENAME_IN_PROGRESS: WIN32_ERROR = 8612u32;$/;"	C
ERROR_DS_DOMAIN_VERSION_TOO_HIGH	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_DOMAIN_VERSION_TOO_HIGH: WIN32_ERROR = 8564u32;$/;"	C
ERROR_DS_DOMAIN_VERSION_TOO_LOW	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_DOMAIN_VERSION_TOO_LOW: WIN32_ERROR = 8566u32;$/;"	C
ERROR_DS_DRA_ABANDON_SYNC	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_DRA_ABANDON_SYNC: WIN32_ERROR = 8462u32;$/;"	C
ERROR_DS_DRA_ACCESS_DENIED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_DRA_ACCESS_DENIED: WIN32_ERROR = 8453u32;$/;"	C
ERROR_DS_DRA_BAD_DN	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_DRA_BAD_DN: WIN32_ERROR = 8439u32;$/;"	C
ERROR_DS_DRA_BAD_INSTANCE_TYPE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_DRA_BAD_INSTANCE_TYPE: WIN32_ERROR = 8445u32;$/;"	C
ERROR_DS_DRA_BAD_NC	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_DRA_BAD_NC: WIN32_ERROR = 8440u32;$/;"	C
ERROR_DS_DRA_BUSY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_DRA_BUSY: WIN32_ERROR = 8438u32;$/;"	C
ERROR_DS_DRA_CONNECTION_FAILED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_DRA_CONNECTION_FAILED: WIN32_ERROR = 8444u32;$/;"	C
ERROR_DS_DRA_CORRUPT_UTD_VECTOR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_DRA_CORRUPT_UTD_VECTOR: WIN32_ERROR = 8629u32;$/;"	C
ERROR_DS_DRA_DB_ERROR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_DRA_DB_ERROR: WIN32_ERROR = 8451u32;$/;"	C
ERROR_DS_DRA_DN_EXISTS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_DRA_DN_EXISTS: WIN32_ERROR = 8441u32;$/;"	C
ERROR_DS_DRA_EARLIER_SCHEMA_CONFLICT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_DRA_EARLIER_SCHEMA_CONFLICT: WIN32_ERROR = 8544u32;$/;"	C
ERROR_DS_DRA_EXTN_CONNECTION_FAILED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_DRA_EXTN_CONNECTION_FAILED: WIN32_ERROR = 8466u32;$/;"	C
ERROR_DS_DRA_GENERIC	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_DRA_GENERIC: WIN32_ERROR = 8436u32;$/;"	C
ERROR_DS_DRA_INCOMPATIBLE_PARTIAL_SET	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_DRA_INCOMPATIBLE_PARTIAL_SET: WIN32_ERROR = 8464u32;$/;"	C
ERROR_DS_DRA_INCONSISTENT_DIT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_DRA_INCONSISTENT_DIT: WIN32_ERROR = 8443u32;$/;"	C
ERROR_DS_DRA_INTERNAL_ERROR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_DRA_INTERNAL_ERROR: WIN32_ERROR = 8442u32;$/;"	C
ERROR_DS_DRA_INVALID_PARAMETER	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_DRA_INVALID_PARAMETER: WIN32_ERROR = 8437u32;$/;"	C
ERROR_DS_DRA_MAIL_PROBLEM	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_DRA_MAIL_PROBLEM: WIN32_ERROR = 8447u32;$/;"	C
ERROR_DS_DRA_MISSING_KRBTGT_SECRET	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_DRA_MISSING_KRBTGT_SECRET: WIN32_ERROR = 8633u32;$/;"	C
ERROR_DS_DRA_MISSING_PARENT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_DRA_MISSING_PARENT: WIN32_ERROR = 8460u32;$/;"	C
ERROR_DS_DRA_NAME_COLLISION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_DRA_NAME_COLLISION: WIN32_ERROR = 8458u32;$/;"	C
ERROR_DS_DRA_NOT_SUPPORTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_DRA_NOT_SUPPORTED: WIN32_ERROR = 8454u32;$/;"	C
ERROR_DS_DRA_NO_REPLICA	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_DRA_NO_REPLICA: WIN32_ERROR = 8452u32;$/;"	C
ERROR_DS_DRA_OBJ_IS_REP_SOURCE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_DRA_OBJ_IS_REP_SOURCE: WIN32_ERROR = 8450u32;$/;"	C
ERROR_DS_DRA_OBJ_NC_MISMATCH	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_DRA_OBJ_NC_MISMATCH: WIN32_ERROR = 8545u32;$/;"	C
ERROR_DS_DRA_OUT_OF_MEM	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_DRA_OUT_OF_MEM: WIN32_ERROR = 8446u32;$/;"	C
ERROR_DS_DRA_OUT_SCHEDULE_WINDOW	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_DRA_OUT_SCHEDULE_WINDOW: WIN32_ERROR = 8617u32;$/;"	C
ERROR_DS_DRA_PREEMPTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_DRA_PREEMPTED: WIN32_ERROR = 8461u32;$/;"	C
ERROR_DS_DRA_RECYCLED_TARGET	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_DRA_RECYCLED_TARGET: WIN32_ERROR = 8639u32;$/;"	C
ERROR_DS_DRA_REF_ALREADY_EXISTS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_DRA_REF_ALREADY_EXISTS: WIN32_ERROR = 8448u32;$/;"	C
ERROR_DS_DRA_REF_NOT_FOUND	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_DRA_REF_NOT_FOUND: WIN32_ERROR = 8449u32;$/;"	C
ERROR_DS_DRA_REPL_PENDING	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_DRA_REPL_PENDING: WIN32_ERROR = 8477u32;$/;"	C
ERROR_DS_DRA_RPC_CANCELLED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_DRA_RPC_CANCELLED: WIN32_ERROR = 8455u32;$/;"	C
ERROR_DS_DRA_SCHEMA_CONFLICT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_DRA_SCHEMA_CONFLICT: WIN32_ERROR = 8543u32;$/;"	C
ERROR_DS_DRA_SCHEMA_INFO_SHIP	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_DRA_SCHEMA_INFO_SHIP: WIN32_ERROR = 8542u32;$/;"	C
ERROR_DS_DRA_SCHEMA_MISMATCH	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_DRA_SCHEMA_MISMATCH: WIN32_ERROR = 8418u32;$/;"	C
ERROR_DS_DRA_SECRETS_DENIED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_DRA_SECRETS_DENIED: WIN32_ERROR = 8630u32;$/;"	C
ERROR_DS_DRA_SHUTDOWN	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_DRA_SHUTDOWN: WIN32_ERROR = 8463u32;$/;"	C
ERROR_DS_DRA_SINK_DISABLED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_DRA_SINK_DISABLED: WIN32_ERROR = 8457u32;$/;"	C
ERROR_DS_DRA_SOURCE_DISABLED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_DRA_SOURCE_DISABLED: WIN32_ERROR = 8456u32;$/;"	C
ERROR_DS_DRA_SOURCE_IS_PARTIAL_REPLICA	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_DRA_SOURCE_IS_PARTIAL_REPLICA: WIN32_ERROR = 8465u32;$/;"	C
ERROR_DS_DRA_SOURCE_REINSTALLED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_DRA_SOURCE_REINSTALLED: WIN32_ERROR = 8459u32;$/;"	C
ERROR_DS_DRS_EXTENSIONS_CHANGED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_DRS_EXTENSIONS_CHANGED: WIN32_ERROR = 8594u32;$/;"	C
ERROR_DS_DSA_MUST_BE_INT_MASTER	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_DSA_MUST_BE_INT_MASTER: WIN32_ERROR = 8342u32;$/;"	C
ERROR_DS_DST_DOMAIN_NOT_NATIVE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_DST_DOMAIN_NOT_NATIVE: WIN32_ERROR = 8496u32;$/;"	C
ERROR_DS_DST_NC_MISMATCH	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_DST_NC_MISMATCH: WIN32_ERROR = 8486u32;$/;"	C
ERROR_DS_DS_REQUIRED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_DS_REQUIRED: WIN32_ERROR = 8478u32;$/;"	C
ERROR_DS_DUPLICATE_ID_FOUND	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_DUPLICATE_ID_FOUND: WIN32_ERROR = 8605u32;$/;"	C
ERROR_DS_DUP_LDAP_DISPLAY_NAME	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_DUP_LDAP_DISPLAY_NAME: WIN32_ERROR = 8382u32;$/;"	C
ERROR_DS_DUP_LINK_ID	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_DUP_LINK_ID: WIN32_ERROR = 8468u32;$/;"	C
ERROR_DS_DUP_MAPI_ID	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_DUP_MAPI_ID: WIN32_ERROR = 8380u32;$/;"	C
ERROR_DS_DUP_MSDS_INTID	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_DUP_MSDS_INTID: WIN32_ERROR = 8597u32;$/;"	C
ERROR_DS_DUP_OID	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_DUP_OID: WIN32_ERROR = 8379u32;$/;"	C
ERROR_DS_DUP_RDN	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_DUP_RDN: WIN32_ERROR = 8378u32;$/;"	C
ERROR_DS_DUP_SCHEMA_ID_GUID	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_DUP_SCHEMA_ID_GUID: WIN32_ERROR = 8381u32;$/;"	C
ERROR_DS_ENCODING_ERROR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_ENCODING_ERROR: WIN32_ERROR = 8252u32;$/;"	C
ERROR_DS_EPOCH_MISMATCH	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_EPOCH_MISMATCH: WIN32_ERROR = 8483u32;$/;"	C
ERROR_DS_EXISTING_AD_CHILD_NC	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_EXISTING_AD_CHILD_NC: WIN32_ERROR = 8613u32;$/;"	C
ERROR_DS_EXISTS_IN_AUX_CLS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_EXISTS_IN_AUX_CLS: WIN32_ERROR = 8393u32;$/;"	C
ERROR_DS_EXISTS_IN_MAY_HAVE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_EXISTS_IN_MAY_HAVE: WIN32_ERROR = 8386u32;$/;"	C
ERROR_DS_EXISTS_IN_MUST_HAVE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_EXISTS_IN_MUST_HAVE: WIN32_ERROR = 8385u32;$/;"	C
ERROR_DS_EXISTS_IN_POSS_SUP	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_EXISTS_IN_POSS_SUP: WIN32_ERROR = 8395u32;$/;"	C
ERROR_DS_EXISTS_IN_RDNATTID	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_EXISTS_IN_RDNATTID: WIN32_ERROR = 8598u32;$/;"	C
ERROR_DS_EXISTS_IN_SUB_CLS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_EXISTS_IN_SUB_CLS: WIN32_ERROR = 8394u32;$/;"	C
ERROR_DS_FILTER_UNKNOWN	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_FILTER_UNKNOWN: WIN32_ERROR = 8254u32;$/;"	C
ERROR_DS_FILTER_USES_CONTRUCTED_ATTRS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_FILTER_USES_CONTRUCTED_ATTRS: WIN32_ERROR = 8555u32;$/;"	C
ERROR_DS_FLAT_NAME_EXISTS_IN_FOREST	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_FLAT_NAME_EXISTS_IN_FOREST: WIN32_ERROR = 8635u32;$/;"	C
ERROR_DS_FOREST_VERSION_TOO_HIGH	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_FOREST_VERSION_TOO_HIGH: WIN32_ERROR = 8563u32;$/;"	C
ERROR_DS_FOREST_VERSION_TOO_LOW	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_FOREST_VERSION_TOO_LOW: WIN32_ERROR = 8565u32;$/;"	C
ERROR_DS_GCVERIFY_ERROR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_GCVERIFY_ERROR: WIN32_ERROR = 8417u32;$/;"	C
ERROR_DS_GC_NOT_AVAILABLE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_GC_NOT_AVAILABLE: WIN32_ERROR = 8217u32;$/;"	C
ERROR_DS_GC_REQUIRED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_GC_REQUIRED: WIN32_ERROR = 8547u32;$/;"	C
ERROR_DS_GENERIC_ERROR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_GENERIC_ERROR: WIN32_ERROR = 8341u32;$/;"	C
ERROR_DS_GLOBAL_CANT_HAVE_CROSSDOMAIN_MEMBER	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_GLOBAL_CANT_HAVE_CROSSDOMAIN_MEMBER: WIN32_ERROR = 8519u32;$/;"	C
ERROR_DS_GLOBAL_CANT_HAVE_LOCAL_MEMBER	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_GLOBAL_CANT_HAVE_LOCAL_MEMBER: WIN32_ERROR = 8516u32;$/;"	C
ERROR_DS_GLOBAL_CANT_HAVE_UNIVERSAL_MEMBER	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_GLOBAL_CANT_HAVE_UNIVERSAL_MEMBER: WIN32_ERROR = 8517u32;$/;"	C
ERROR_DS_GOVERNSID_MISSING	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_GOVERNSID_MISSING: WIN32_ERROR = 8410u32;$/;"	C
ERROR_DS_GROUP_CONVERSION_ERROR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_GROUP_CONVERSION_ERROR: WIN32_ERROR = 8607u32;$/;"	C
ERROR_DS_HAVE_PRIMARY_MEMBERS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_HAVE_PRIMARY_MEMBERS: WIN32_ERROR = 8521u32;$/;"	C
ERROR_DS_HIERARCHY_TABLE_MALLOC_FAILED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_HIERARCHY_TABLE_MALLOC_FAILED: WIN32_ERROR = 8429u32;$/;"	C
ERROR_DS_HIERARCHY_TABLE_TOO_DEEP	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_HIERARCHY_TABLE_TOO_DEEP: WIN32_ERROR = 8628u32;$/;"	C
ERROR_DS_HIGH_ADLDS_FFL	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_HIGH_ADLDS_FFL: WIN32_ERROR = 8641u32;$/;"	C
ERROR_DS_HIGH_DSA_VERSION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_HIGH_DSA_VERSION: WIN32_ERROR = 8642u32;$/;"	C
ERROR_DS_ILLEGAL_BASE_SCHEMA_MOD	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_ILLEGAL_BASE_SCHEMA_MOD: WIN32_ERROR = 8507u32;$/;"	C
ERROR_DS_ILLEGAL_MOD_OPERATION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_ILLEGAL_MOD_OPERATION: WIN32_ERROR = 8311u32;$/;"	C
ERROR_DS_ILLEGAL_SUPERIOR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_ILLEGAL_SUPERIOR: WIN32_ERROR = 8345u32;$/;"	C
ERROR_DS_ILLEGAL_XDOM_MOVE_OPERATION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_ILLEGAL_XDOM_MOVE_OPERATION: WIN32_ERROR = 8492u32;$/;"	C
ERROR_DS_INAPPROPRIATE_AUTH	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_INAPPROPRIATE_AUTH: WIN32_ERROR = 8233u32;$/;"	C
ERROR_DS_INAPPROPRIATE_MATCHING	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_INAPPROPRIATE_MATCHING: WIN32_ERROR = 8238u32;$/;"	C
ERROR_DS_INCOMPATIBLE_CONTROLS_USED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_INCOMPATIBLE_CONTROLS_USED: WIN32_ERROR = 8574u32;$/;"	C
ERROR_DS_INCOMPATIBLE_VERSION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_INCOMPATIBLE_VERSION: WIN32_ERROR = 8567u32;$/;"	C
ERROR_DS_INCORRECT_ROLE_OWNER	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_INCORRECT_ROLE_OWNER: WIN32_ERROR = 8210u32;$/;"	C
ERROR_DS_INIT_FAILURE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_INIT_FAILURE: WIN32_ERROR = 8532u32;$/;"	C
ERROR_DS_INIT_FAILURE_CONSOLE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_INIT_FAILURE_CONSOLE: WIN32_ERROR = 8561u32;$/;"	C
ERROR_DS_INSTALL_NO_SCH_VERSION_IN_INIFILE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_INSTALL_NO_SCH_VERSION_IN_INIFILE: WIN32_ERROR = 8512u32;$/;"	C
ERROR_DS_INSTALL_NO_SRC_SCH_VERSION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_INSTALL_NO_SRC_SCH_VERSION: WIN32_ERROR = 8511u32;$/;"	C
ERROR_DS_INSTALL_SCHEMA_MISMATCH	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_INSTALL_SCHEMA_MISMATCH: WIN32_ERROR = 8467u32;$/;"	C
ERROR_DS_INSUFFICIENT_ATTR_TO_CREATE_OBJECT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_INSUFFICIENT_ATTR_TO_CREATE_OBJECT: WIN32_ERROR = 8606u32;$/;"	C
ERROR_DS_INSUFF_ACCESS_RIGHTS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_INSUFF_ACCESS_RIGHTS: WIN32_ERROR = 8344u32;$/;"	C
ERROR_DS_INTERNAL_FAILURE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_INTERNAL_FAILURE: WIN32_ERROR = 8430u32;$/;"	C
ERROR_DS_INVALID_ATTRIBUTE_SYNTAX	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_INVALID_ATTRIBUTE_SYNTAX: WIN32_ERROR = 8203u32;$/;"	C
ERROR_DS_INVALID_DN_SYNTAX	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_INVALID_DN_SYNTAX: WIN32_ERROR = 8242u32;$/;"	C
ERROR_DS_INVALID_GROUP_TYPE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_INVALID_GROUP_TYPE: WIN32_ERROR = 8513u32;$/;"	C
ERROR_DS_INVALID_LDAP_DISPLAY_NAME	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_INVALID_LDAP_DISPLAY_NAME: WIN32_ERROR = 8479u32;$/;"	C
ERROR_DS_INVALID_NAME_FOR_SPN	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_INVALID_NAME_FOR_SPN: WIN32_ERROR = 8554u32;$/;"	C
ERROR_DS_INVALID_ROLE_OWNER	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_INVALID_ROLE_OWNER: WIN32_ERROR = 8366u32;$/;"	C
ERROR_DS_INVALID_SCRIPT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_INVALID_SCRIPT: WIN32_ERROR = 8600u32;$/;"	C
ERROR_DS_INVALID_SEARCH_FLAG	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_INVALID_SEARCH_FLAG: WIN32_ERROR = 8500u32;$/;"	C
ERROR_DS_INVALID_SEARCH_FLAG_SUBTREE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_INVALID_SEARCH_FLAG_SUBTREE: WIN32_ERROR = 8626u32;$/;"	C
ERROR_DS_INVALID_SEARCH_FLAG_TUPLE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_INVALID_SEARCH_FLAG_TUPLE: WIN32_ERROR = 8627u32;$/;"	C
ERROR_DS_IS_LEAF	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_IS_LEAF: WIN32_ERROR = 8243u32;$/;"	C
ERROR_DS_KEY_NOT_UNIQUE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_KEY_NOT_UNIQUE: WIN32_ERROR = 8527u32;$/;"	C
ERROR_DS_LDAP_SEND_QUEUE_FULL	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_LDAP_SEND_QUEUE_FULL: WIN32_ERROR = 8616u32;$/;"	C
ERROR_DS_LINK_ID_NOT_AVAILABLE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_LINK_ID_NOT_AVAILABLE: WIN32_ERROR = 8577u32;$/;"	C
ERROR_DS_LOCAL_CANT_HAVE_CROSSDOMAIN_LOCAL_MEMBER	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_LOCAL_CANT_HAVE_CROSSDOMAIN_LOCAL_MEMBER: WIN32_ERROR = 8520u32;$/;"	C
ERROR_DS_LOCAL_ERROR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_LOCAL_ERROR: WIN32_ERROR = 8251u32;$/;"	C
ERROR_DS_LOCAL_MEMBER_OF_LOCAL_ONLY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_LOCAL_MEMBER_OF_LOCAL_ONLY: WIN32_ERROR = 8548u32;$/;"	C
ERROR_DS_LOOP_DETECT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_LOOP_DETECT: WIN32_ERROR = 8246u32;$/;"	C
ERROR_DS_LOW_ADLDS_FFL	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_LOW_ADLDS_FFL: WIN32_ERROR = 8643u32;$/;"	C
ERROR_DS_LOW_DSA_VERSION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_LOW_DSA_VERSION: WIN32_ERROR = 8568u32;$/;"	C
ERROR_DS_MACHINE_ACCOUNT_CREATED_PRENT4	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_MACHINE_ACCOUNT_CREATED_PRENT4: WIN32_ERROR = 8572u32;$/;"	C
ERROR_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED: WIN32_ERROR = 8557u32;$/;"	C
ERROR_DS_MAPI_ID_NOT_AVAILABLE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_MAPI_ID_NOT_AVAILABLE: WIN32_ERROR = 8632u32;$/;"	C
ERROR_DS_MASTERDSA_REQUIRED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_MASTERDSA_REQUIRED: WIN32_ERROR = 8314u32;$/;"	C
ERROR_DS_MAX_OBJ_SIZE_EXCEEDED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_MAX_OBJ_SIZE_EXCEEDED: WIN32_ERROR = 8304u32;$/;"	C
ERROR_DS_MEMBERSHIP_EVALUATED_LOCALLY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_MEMBERSHIP_EVALUATED_LOCALLY: WIN32_ERROR = 8201u32;$/;"	C
ERROR_DS_MISSING_EXPECTED_ATT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_MISSING_EXPECTED_ATT: WIN32_ERROR = 8411u32;$/;"	C
ERROR_DS_MISSING_FOREST_TRUST	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_MISSING_FOREST_TRUST: WIN32_ERROR = 8649u32;$/;"	C
ERROR_DS_MISSING_FSMO_SETTINGS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_MISSING_FSMO_SETTINGS: WIN32_ERROR = 8434u32;$/;"	C
ERROR_DS_MISSING_INFRASTRUCTURE_CONTAINER	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_MISSING_INFRASTRUCTURE_CONTAINER: WIN32_ERROR = 8497u32;$/;"	C
ERROR_DS_MISSING_REQUIRED_ATT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_MISSING_REQUIRED_ATT: WIN32_ERROR = 8316u32;$/;"	C
ERROR_DS_MISSING_SUPREF	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_MISSING_SUPREF: WIN32_ERROR = 8406u32;$/;"	C
ERROR_DS_MODIFYDN_DISALLOWED_BY_FLAG	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_MODIFYDN_DISALLOWED_BY_FLAG: WIN32_ERROR = 8581u32;$/;"	C
ERROR_DS_MODIFYDN_DISALLOWED_BY_INSTANCE_TYPE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_MODIFYDN_DISALLOWED_BY_INSTANCE_TYPE: WIN32_ERROR = 8579u32;$/;"	C
ERROR_DS_MODIFYDN_WRONG_GRANDPARENT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_MODIFYDN_WRONG_GRANDPARENT: WIN32_ERROR = 8582u32;$/;"	C
ERROR_DS_MUST_BE_RUN_ON_DST_DC	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_MUST_BE_RUN_ON_DST_DC: WIN32_ERROR = 8558u32;$/;"	C
ERROR_DS_NAME_ERROR_DOMAIN_ONLY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_NAME_ERROR_DOMAIN_ONLY: WIN32_ERROR = 8473u32;$/;"	C
ERROR_DS_NAME_ERROR_NOT_FOUND	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_NAME_ERROR_NOT_FOUND: WIN32_ERROR = 8470u32;$/;"	C
ERROR_DS_NAME_ERROR_NOT_UNIQUE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_NAME_ERROR_NOT_UNIQUE: WIN32_ERROR = 8471u32;$/;"	C
ERROR_DS_NAME_ERROR_NO_MAPPING	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_NAME_ERROR_NO_MAPPING: WIN32_ERROR = 8472u32;$/;"	C
ERROR_DS_NAME_ERROR_NO_SYNTACTICAL_MAPPING	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_NAME_ERROR_NO_SYNTACTICAL_MAPPING: WIN32_ERROR = 8474u32;$/;"	C
ERROR_DS_NAME_ERROR_RESOLVING	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_NAME_ERROR_RESOLVING: WIN32_ERROR = 8469u32;$/;"	C
ERROR_DS_NAME_ERROR_TRUST_REFERRAL	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_NAME_ERROR_TRUST_REFERRAL: WIN32_ERROR = 8583u32;$/;"	C
ERROR_DS_NAME_NOT_UNIQUE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_NAME_NOT_UNIQUE: WIN32_ERROR = 8571u32;$/;"	C
ERROR_DS_NAME_REFERENCE_INVALID	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_NAME_REFERENCE_INVALID: WIN32_ERROR = 8373u32;$/;"	C
ERROR_DS_NAME_TOO_LONG	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_NAME_TOO_LONG: WIN32_ERROR = 8348u32;$/;"	C
ERROR_DS_NAME_TOO_MANY_PARTS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_NAME_TOO_MANY_PARTS: WIN32_ERROR = 8347u32;$/;"	C
ERROR_DS_NAME_TYPE_UNKNOWN	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_NAME_TYPE_UNKNOWN: WIN32_ERROR = 8351u32;$/;"	C
ERROR_DS_NAME_UNPARSEABLE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_NAME_UNPARSEABLE: WIN32_ERROR = 8350u32;$/;"	C
ERROR_DS_NAME_VALUE_TOO_LONG	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_NAME_VALUE_TOO_LONG: WIN32_ERROR = 8349u32;$/;"	C
ERROR_DS_NAMING_MASTER_GC	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_NAMING_MASTER_GC: WIN32_ERROR = 8523u32;$/;"	C
ERROR_DS_NAMING_VIOLATION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_NAMING_VIOLATION: WIN32_ERROR = 8247u32;$/;"	C
ERROR_DS_NCNAME_MISSING_CR_REF	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_NCNAME_MISSING_CR_REF: WIN32_ERROR = 8412u32;$/;"	C
ERROR_DS_NCNAME_MUST_BE_NC	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_NCNAME_MUST_BE_NC: WIN32_ERROR = 8357u32;$/;"	C
ERROR_DS_NC_MUST_HAVE_NC_PARENT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_NC_MUST_HAVE_NC_PARENT: WIN32_ERROR = 8494u32;$/;"	C
ERROR_DS_NC_STILL_HAS_DSAS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_NC_STILL_HAS_DSAS: WIN32_ERROR = 8546u32;$/;"	C
ERROR_DS_NONEXISTENT_MAY_HAVE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_NONEXISTENT_MAY_HAVE: WIN32_ERROR = 8387u32;$/;"	C
ERROR_DS_NONEXISTENT_MUST_HAVE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_NONEXISTENT_MUST_HAVE: WIN32_ERROR = 8388u32;$/;"	C
ERROR_DS_NONEXISTENT_POSS_SUP	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_NONEXISTENT_POSS_SUP: WIN32_ERROR = 8390u32;$/;"	C
ERROR_DS_NONSAFE_SCHEMA_CHANGE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_NONSAFE_SCHEMA_CHANGE: WIN32_ERROR = 8508u32;$/;"	C
ERROR_DS_NON_ASQ_SEARCH	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_NON_ASQ_SEARCH: WIN32_ERROR = 8624u32;$/;"	C
ERROR_DS_NON_BASE_SEARCH	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_NON_BASE_SEARCH: WIN32_ERROR = 8480u32;$/;"	C
ERROR_DS_NOTIFY_FILTER_TOO_COMPLEX	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_NOTIFY_FILTER_TOO_COMPLEX: WIN32_ERROR = 8377u32;$/;"	C
ERROR_DS_NOT_AN_OBJECT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_NOT_AN_OBJECT: WIN32_ERROR = 8352u32;$/;"	C
ERROR_DS_NOT_AUTHORITIVE_FOR_DST_NC	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_NOT_AUTHORITIVE_FOR_DST_NC: WIN32_ERROR = 8487u32;$/;"	C
ERROR_DS_NOT_CLOSEST	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_NOT_CLOSEST: WIN32_ERROR = 8588u32;$/;"	C
ERROR_DS_NOT_INSTALLED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_NOT_INSTALLED: WIN32_ERROR = 8200u32;$/;"	C
ERROR_DS_NOT_ON_BACKLINK	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_NOT_ON_BACKLINK: WIN32_ERROR = 8362u32;$/;"	C
ERROR_DS_NOT_SUPPORTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_NOT_SUPPORTED: WIN32_ERROR = 8256u32;$/;"	C
ERROR_DS_NOT_SUPPORTED_SORT_ORDER	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_NOT_SUPPORTED_SORT_ORDER: WIN32_ERROR = 8570u32;$/;"	C
ERROR_DS_NO_ATTRIBUTE_OR_VALUE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_NO_ATTRIBUTE_OR_VALUE: WIN32_ERROR = 8202u32;$/;"	C
ERROR_DS_NO_BEHAVIOR_VERSION_IN_MIXEDDOMAIN	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_NO_BEHAVIOR_VERSION_IN_MIXEDDOMAIN: WIN32_ERROR = 8569u32;$/;"	C
ERROR_DS_NO_CHAINED_EVAL	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_NO_CHAINED_EVAL: WIN32_ERROR = 8328u32;$/;"	C
ERROR_DS_NO_CHAINING	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_NO_CHAINING: WIN32_ERROR = 8327u32;$/;"	C
ERROR_DS_NO_CHECKPOINT_WITH_PDC	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_NO_CHECKPOINT_WITH_PDC: WIN32_ERROR = 8551u32;$/;"	C
ERROR_DS_NO_CROSSREF_FOR_NC	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_NO_CROSSREF_FOR_NC: WIN32_ERROR = 8363u32;$/;"	C
ERROR_DS_NO_DELETED_NAME	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_NO_DELETED_NAME: WIN32_ERROR = 8355u32;$/;"	C
ERROR_DS_NO_FPO_IN_UNIVERSAL_GROUPS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_NO_FPO_IN_UNIVERSAL_GROUPS: WIN32_ERROR = 8549u32;$/;"	C
ERROR_DS_NO_MORE_RIDS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_NO_MORE_RIDS: WIN32_ERROR = 8209u32;$/;"	C
ERROR_DS_NO_MSDS_INTID	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_NO_MSDS_INTID: WIN32_ERROR = 8596u32;$/;"	C
ERROR_DS_NO_NEST_GLOBALGROUP_IN_MIXEDDOMAIN	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_NO_NEST_GLOBALGROUP_IN_MIXEDDOMAIN: WIN32_ERROR = 8514u32;$/;"	C
ERROR_DS_NO_NEST_LOCALGROUP_IN_MIXEDDOMAIN	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_NO_NEST_LOCALGROUP_IN_MIXEDDOMAIN: WIN32_ERROR = 8515u32;$/;"	C
ERROR_DS_NO_NTDSA_OBJECT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_NO_NTDSA_OBJECT: WIN32_ERROR = 8623u32;$/;"	C
ERROR_DS_NO_OBJECT_MOVE_IN_SCHEMA_NC	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_NO_OBJECT_MOVE_IN_SCHEMA_NC: WIN32_ERROR = 8580u32;$/;"	C
ERROR_DS_NO_PARENT_OBJECT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_NO_PARENT_OBJECT: WIN32_ERROR = 8329u32;$/;"	C
ERROR_DS_NO_PKT_PRIVACY_ON_CONNECTION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_NO_PKT_PRIVACY_ON_CONNECTION: WIN32_ERROR = 8533u32;$/;"	C
ERROR_DS_NO_RDN_DEFINED_IN_SCHEMA	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_NO_RDN_DEFINED_IN_SCHEMA: WIN32_ERROR = 8306u32;$/;"	C
ERROR_DS_NO_REF_DOMAIN	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_NO_REF_DOMAIN: WIN32_ERROR = 8575u32;$/;"	C
ERROR_DS_NO_REQUESTED_ATTS_FOUND	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_NO_REQUESTED_ATTS_FOUND: WIN32_ERROR = 8308u32;$/;"	C
ERROR_DS_NO_RESULTS_RETURNED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_NO_RESULTS_RETURNED: WIN32_ERROR = 8257u32;$/;"	C
ERROR_DS_NO_RIDS_ALLOCATED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_NO_RIDS_ALLOCATED: WIN32_ERROR = 8208u32;$/;"	C
ERROR_DS_NO_SERVER_OBJECT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_NO_SERVER_OBJECT: WIN32_ERROR = 8622u32;$/;"	C
ERROR_DS_NO_SUCH_OBJECT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_NO_SUCH_OBJECT: WIN32_ERROR = 8240u32;$/;"	C
ERROR_DS_NO_TREE_DELETE_ABOVE_NC	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_NO_TREE_DELETE_ABOVE_NC: WIN32_ERROR = 8501u32;$/;"	C
ERROR_DS_NTDSCRIPT_PROCESS_ERROR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_NTDSCRIPT_PROCESS_ERROR: WIN32_ERROR = 8592u32;$/;"	C
ERROR_DS_NTDSCRIPT_SYNTAX_ERROR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_NTDSCRIPT_SYNTAX_ERROR: WIN32_ERROR = 8591u32;$/;"	C
ERROR_DS_OBJECT_BEING_REMOVED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_OBJECT_BEING_REMOVED: WIN32_ERROR = 8339u32;$/;"	C
ERROR_DS_OBJECT_CLASS_REQUIRED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_OBJECT_CLASS_REQUIRED: WIN32_ERROR = 8315u32;$/;"	C
ERROR_DS_OBJECT_RESULTS_TOO_LARGE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_OBJECT_RESULTS_TOO_LARGE: WIN32_ERROR = 8248u32;$/;"	C
ERROR_DS_OBJ_CLASS_NOT_DEFINED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_OBJ_CLASS_NOT_DEFINED: WIN32_ERROR = 8371u32;$/;"	C
ERROR_DS_OBJ_CLASS_NOT_SUBCLASS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_OBJ_CLASS_NOT_SUBCLASS: WIN32_ERROR = 8372u32;$/;"	C
ERROR_DS_OBJ_CLASS_VIOLATION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_OBJ_CLASS_VIOLATION: WIN32_ERROR = 8212u32;$/;"	C
ERROR_DS_OBJ_GUID_EXISTS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_OBJ_GUID_EXISTS: WIN32_ERROR = 8361u32;$/;"	C
ERROR_DS_OBJ_NOT_FOUND	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_OBJ_NOT_FOUND: WIN32_ERROR = 8333u32;$/;"	C
ERROR_DS_OBJ_STRING_NAME_EXISTS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_OBJ_STRING_NAME_EXISTS: WIN32_ERROR = 8305u32;$/;"	C
ERROR_DS_OBJ_TOO_LARGE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_OBJ_TOO_LARGE: WIN32_ERROR = 8312u32;$/;"	C
ERROR_DS_OFFSET_RANGE_ERROR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_OFFSET_RANGE_ERROR: WIN32_ERROR = 8262u32;$/;"	C
ERROR_DS_OID_MAPPED_GROUP_CANT_HAVE_MEMBERS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_OID_MAPPED_GROUP_CANT_HAVE_MEMBERS: WIN32_ERROR = 8637u32;$/;"	C
ERROR_DS_OID_NOT_FOUND	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_OID_NOT_FOUND: WIN32_ERROR = 8638u32;$/;"	C
ERROR_DS_OPERATIONS_ERROR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_OPERATIONS_ERROR: WIN32_ERROR = 8224u32;$/;"	C
ERROR_DS_OUT_OF_SCOPE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_OUT_OF_SCOPE: WIN32_ERROR = 8338u32;$/;"	C
ERROR_DS_OUT_OF_VERSION_STORE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_OUT_OF_VERSION_STORE: WIN32_ERROR = 8573u32;$/;"	C
ERROR_DS_PARAM_ERROR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_PARAM_ERROR: WIN32_ERROR = 8255u32;$/;"	C
ERROR_DS_PARENT_IS_AN_ALIAS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_PARENT_IS_AN_ALIAS: WIN32_ERROR = 8330u32;$/;"	C
ERROR_DS_PDC_OPERATION_IN_PROGRESS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_PDC_OPERATION_IN_PROGRESS: WIN32_ERROR = 8490u32;$/;"	C
ERROR_DS_PER_ATTRIBUTE_AUTHZ_FAILED_DURING_ADD	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_PER_ATTRIBUTE_AUTHZ_FAILED_DURING_ADD: WIN32_ERROR = 8652u32;$/;"	C
ERROR_DS_POLICY_NOT_KNOWN	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_POLICY_NOT_KNOWN: WIN32_ERROR = 8618u32;$/;"	C
ERROR_DS_PROTOCOL_ERROR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_PROTOCOL_ERROR: WIN32_ERROR = 8225u32;$/;"	C
ERROR_DS_RANGE_CONSTRAINT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_RANGE_CONSTRAINT: WIN32_ERROR = 8322u32;$/;"	C
ERROR_DS_RDN_DOESNT_MATCH_SCHEMA	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_RDN_DOESNT_MATCH_SCHEMA: WIN32_ERROR = 8307u32;$/;"	C
ERROR_DS_RECALCSCHEMA_FAILED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_RECALCSCHEMA_FAILED: WIN32_ERROR = 8396u32;$/;"	C
ERROR_DS_REFERRAL	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_REFERRAL: WIN32_ERROR = 8235u32;$/;"	C
ERROR_DS_REFERRAL_LIMIT_EXCEEDED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_REFERRAL_LIMIT_EXCEEDED: WIN32_ERROR = 8260u32;$/;"	C
ERROR_DS_REFUSING_FSMO_ROLES	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_REFUSING_FSMO_ROLES: WIN32_ERROR = 8433u32;$/;"	C
ERROR_DS_REMOTE_CROSSREF_OP_FAILED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_REMOTE_CROSSREF_OP_FAILED: WIN32_ERROR = 8601u32;$/;"	C
ERROR_DS_REPLICATOR_ONLY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_REPLICATOR_ONLY: WIN32_ERROR = 8370u32;$/;"	C
ERROR_DS_REPLICA_SET_CHANGE_NOT_ALLOWED_ON_DISABLED_CR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_REPLICA_SET_CHANGE_NOT_ALLOWED_ON_DISABLED_CR: WIN32_ERROR = 8595u32;$/;"	C
ERROR_DS_REPL_LIFETIME_EXCEEDED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_REPL_LIFETIME_EXCEEDED: WIN32_ERROR = 8614u32;$/;"	C
ERROR_DS_RESERVED_LINK_ID	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_RESERVED_LINK_ID: WIN32_ERROR = 8576u32;$/;"	C
ERROR_DS_RESERVED_MAPI_ID	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_RESERVED_MAPI_ID: WIN32_ERROR = 8631u32;$/;"	C
ERROR_DS_RIDMGR_DISABLED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_RIDMGR_DISABLED: WIN32_ERROR = 8263u32;$/;"	C
ERROR_DS_RIDMGR_INIT_ERROR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_RIDMGR_INIT_ERROR: WIN32_ERROR = 8211u32;$/;"	C
ERROR_DS_ROLE_NOT_VERIFIED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_ROLE_NOT_VERIFIED: WIN32_ERROR = 8610u32;$/;"	C
ERROR_DS_ROOT_CANT_BE_SUBREF	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_ROOT_CANT_BE_SUBREF: WIN32_ERROR = 8326u32;$/;"	C
ERROR_DS_ROOT_MUST_BE_NC	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_ROOT_MUST_BE_NC: WIN32_ERROR = 8301u32;$/;"	C
ERROR_DS_ROOT_REQUIRES_CLASS_TOP	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_ROOT_REQUIRES_CLASS_TOP: WIN32_ERROR = 8432u32;$/;"	C
ERROR_DS_SAM_INIT_FAILURE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_SAM_INIT_FAILURE: WIN32_ERROR = 8504u32;$/;"	C
ERROR_DS_SAM_INIT_FAILURE_CONSOLE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_SAM_INIT_FAILURE_CONSOLE: WIN32_ERROR = 8562u32;$/;"	C
ERROR_DS_SAM_NEED_BOOTKEY_FLOPPY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_SAM_NEED_BOOTKEY_FLOPPY: WIN32_ERROR = 8530u32;$/;"	C
ERROR_DS_SAM_NEED_BOOTKEY_PASSWORD	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_SAM_NEED_BOOTKEY_PASSWORD: WIN32_ERROR = 8529u32;$/;"	C
ERROR_DS_SCHEMA_ALLOC_FAILED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_SCHEMA_ALLOC_FAILED: WIN32_ERROR = 8415u32;$/;"	C
ERROR_DS_SCHEMA_NOT_LOADED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_SCHEMA_NOT_LOADED: WIN32_ERROR = 8414u32;$/;"	C
ERROR_DS_SCHEMA_UPDATE_DISALLOWED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_SCHEMA_UPDATE_DISALLOWED: WIN32_ERROR = 8509u32;$/;"	C
ERROR_DS_SECURITY_CHECKING_ERROR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_SECURITY_CHECKING_ERROR: WIN32_ERROR = 8413u32;$/;"	C
ERROR_DS_SECURITY_ILLEGAL_MODIFY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_SECURITY_ILLEGAL_MODIFY: WIN32_ERROR = 8423u32;$/;"	C
ERROR_DS_SEC_DESC_INVALID	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_SEC_DESC_INVALID: WIN32_ERROR = 8354u32;$/;"	C
ERROR_DS_SEC_DESC_TOO_SHORT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_SEC_DESC_TOO_SHORT: WIN32_ERROR = 8353u32;$/;"	C
ERROR_DS_SEMANTIC_ATT_TEST	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_SEMANTIC_ATT_TEST: WIN32_ERROR = 8383u32;$/;"	C
ERROR_DS_SENSITIVE_GROUP_VIOLATION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_SENSITIVE_GROUP_VIOLATION: WIN32_ERROR = 8505u32;$/;"	C
ERROR_DS_SERVER_DOWN	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_SERVER_DOWN: WIN32_ERROR = 8250u32;$/;"	C
ERROR_DS_SHUTTING_DOWN	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_SHUTTING_DOWN: WIN32_ERROR = 8364u32;$/;"	C
ERROR_DS_SINGLE_USER_MODE_FAILED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_SINGLE_USER_MODE_FAILED: WIN32_ERROR = 8590u32;$/;"	C
ERROR_DS_SINGLE_VALUE_CONSTRAINT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_SINGLE_VALUE_CONSTRAINT: WIN32_ERROR = 8321u32;$/;"	C
ERROR_DS_SIZELIMIT_EXCEEDED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_SIZELIMIT_EXCEEDED: WIN32_ERROR = 8227u32;$/;"	C
ERROR_DS_SORT_CONTROL_MISSING	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_SORT_CONTROL_MISSING: WIN32_ERROR = 8261u32;$/;"	C
ERROR_DS_SOURCE_AUDITING_NOT_ENABLED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_SOURCE_AUDITING_NOT_ENABLED: WIN32_ERROR = 8552u32;$/;"	C
ERROR_DS_SOURCE_DOMAIN_IN_FOREST	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_SOURCE_DOMAIN_IN_FOREST: WIN32_ERROR = 8534u32;$/;"	C
ERROR_DS_SPN_VALUE_NOT_UNIQUE_IN_FOREST	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_SPN_VALUE_NOT_UNIQUE_IN_FOREST: WIN32_ERROR = 8647u32;$/;"	C
ERROR_DS_SRC_AND_DST_NC_IDENTICAL	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_SRC_AND_DST_NC_IDENTICAL: WIN32_ERROR = 8485u32;$/;"	C
ERROR_DS_SRC_AND_DST_OBJECT_CLASS_MISMATCH	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_SRC_AND_DST_OBJECT_CLASS_MISMATCH: WIN32_ERROR = 8540u32;$/;"	C
ERROR_DS_SRC_DC_MUST_BE_SP4_OR_GREATER	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_SRC_DC_MUST_BE_SP4_OR_GREATER: WIN32_ERROR = 8559u32;$/;"	C
ERROR_DS_SRC_GUID_MISMATCH	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_SRC_GUID_MISMATCH: WIN32_ERROR = 8488u32;$/;"	C
ERROR_DS_SRC_NAME_MISMATCH	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_SRC_NAME_MISMATCH: WIN32_ERROR = 8484u32;$/;"	C
ERROR_DS_SRC_OBJ_NOT_GROUP_OR_USER	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_SRC_OBJ_NOT_GROUP_OR_USER: WIN32_ERROR = 8538u32;$/;"	C
ERROR_DS_SRC_SID_EXISTS_IN_FOREST	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_SRC_SID_EXISTS_IN_FOREST: WIN32_ERROR = 8539u32;$/;"	C
ERROR_DS_STRING_SD_CONVERSION_FAILED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_STRING_SD_CONVERSION_FAILED: WIN32_ERROR = 8522u32;$/;"	C
ERROR_DS_STRONG_AUTH_REQUIRED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_STRONG_AUTH_REQUIRED: WIN32_ERROR = 8232u32;$/;"	C
ERROR_DS_SUBREF_MUST_HAVE_PARENT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_SUBREF_MUST_HAVE_PARENT: WIN32_ERROR = 8356u32;$/;"	C
ERROR_DS_SUBTREE_NOTIFY_NOT_NC_HEAD	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_SUBTREE_NOTIFY_NOT_NC_HEAD: WIN32_ERROR = 8376u32;$/;"	C
ERROR_DS_SUB_CLS_TEST_FAIL	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_SUB_CLS_TEST_FAIL: WIN32_ERROR = 8391u32;$/;"	C
ERROR_DS_SYNTAX_MISMATCH	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_SYNTAX_MISMATCH: WIN32_ERROR = 8384u32;$/;"	C
ERROR_DS_THREAD_LIMIT_EXCEEDED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_THREAD_LIMIT_EXCEEDED: WIN32_ERROR = 8587u32;$/;"	C
ERROR_DS_TIMELIMIT_EXCEEDED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_TIMELIMIT_EXCEEDED: WIN32_ERROR = 8226u32;$/;"	C
ERROR_DS_TREE_DELETE_NOT_FINISHED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_TREE_DELETE_NOT_FINISHED: WIN32_ERROR = 8397u32;$/;"	C
ERROR_DS_UNABLE_TO_SURRENDER_ROLES	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_UNABLE_TO_SURRENDER_ROLES: WIN32_ERROR = 8435u32;$/;"	C
ERROR_DS_UNAVAILABLE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_UNAVAILABLE: WIN32_ERROR = 8207u32;$/;"	C
ERROR_DS_UNAVAILABLE_CRIT_EXTENSION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_UNAVAILABLE_CRIT_EXTENSION: WIN32_ERROR = 8236u32;$/;"	C
ERROR_DS_UNDELETE_SAM_VALIDATION_FAILED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_UNDELETE_SAM_VALIDATION_FAILED: WIN32_ERROR = 8645u32;$/;"	C
ERROR_DS_UNICODEPWD_NOT_IN_QUOTES	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_UNICODEPWD_NOT_IN_QUOTES: WIN32_ERROR = 8556u32;$/;"	C
ERROR_DS_UNIVERSAL_CANT_HAVE_LOCAL_MEMBER	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_UNIVERSAL_CANT_HAVE_LOCAL_MEMBER: WIN32_ERROR = 8518u32;$/;"	C
ERROR_DS_UNKNOWN_ERROR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_UNKNOWN_ERROR: WIN32_ERROR = 8431u32;$/;"	C
ERROR_DS_UNKNOWN_OPERATION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_UNKNOWN_OPERATION: WIN32_ERROR = 8365u32;$/;"	C
ERROR_DS_UNWILLING_TO_PERFORM	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_UNWILLING_TO_PERFORM: WIN32_ERROR = 8245u32;$/;"	C
ERROR_DS_UPN_VALUE_NOT_UNIQUE_IN_FOREST	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_UPN_VALUE_NOT_UNIQUE_IN_FOREST: WIN32_ERROR = 8648u32;$/;"	C
ERROR_DS_USER_BUFFER_TO_SMALL	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_USER_BUFFER_TO_SMALL: WIN32_ERROR = 8309u32;$/;"	C
ERROR_DS_VALUE_KEY_NOT_UNIQUE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_VALUE_KEY_NOT_UNIQUE: WIN32_ERROR = 8650u32;$/;"	C
ERROR_DS_VERSION_CHECK_FAILURE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_VERSION_CHECK_FAILURE: WIN32_ERROR = 643u32;$/;"	C
ERROR_DS_WKO_CONTAINER_CANNOT_BE_SPECIAL	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_WKO_CONTAINER_CANNOT_BE_SPECIAL: WIN32_ERROR = 8611u32;$/;"	C
ERROR_DS_WRONG_LINKED_ATT_SYNTAX	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_WRONG_LINKED_ATT_SYNTAX: WIN32_ERROR = 8528u32;$/;"	C
ERROR_DS_WRONG_OM_OBJ_CLASS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DS_WRONG_OM_OBJ_CLASS: WIN32_ERROR = 8476u32;$/;"	C
ERROR_DUPLICATE_PRIVILEGES	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DUPLICATE_PRIVILEGES: WIN32_ERROR = 311u32;$/;"	C
ERROR_DUPLICATE_SERVICE_NAME	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DUPLICATE_SERVICE_NAME: WIN32_ERROR = 1078u32;$/;"	C
ERROR_DUP_DOMAINNAME	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DUP_DOMAINNAME: WIN32_ERROR = 1221u32;$/;"	C
ERROR_DUP_NAME	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DUP_NAME: WIN32_ERROR = 52u32;$/;"	C
ERROR_DYNAMIC_CODE_BLOCKED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DYNAMIC_CODE_BLOCKED: WIN32_ERROR = 1655u32;$/;"	C
ERROR_DYNLINK_FROM_INVALID_RING	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_DYNLINK_FROM_INVALID_RING: WIN32_ERROR = 196u32;$/;"	C
ERROR_EAS_DIDNT_FIT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_EAS_DIDNT_FIT: WIN32_ERROR = 275u32;$/;"	C
ERROR_EAS_NOT_SUPPORTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_EAS_NOT_SUPPORTED: WIN32_ERROR = 282u32;$/;"	C
ERROR_EA_ACCESS_DENIED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_EA_ACCESS_DENIED: WIN32_ERROR = 994u32;$/;"	C
ERROR_EA_FILE_CORRUPT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_EA_FILE_CORRUPT: WIN32_ERROR = 276u32;$/;"	C
ERROR_EA_LIST_INCONSISTENT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_EA_LIST_INCONSISTENT: WIN32_ERROR = 255u32;$/;"	C
ERROR_EA_TABLE_FULL	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_EA_TABLE_FULL: WIN32_ERROR = 277u32;$/;"	C
ERROR_EDP_DPL_POLICY_CANT_BE_SATISFIED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_EDP_DPL_POLICY_CANT_BE_SATISFIED: WIN32_ERROR = 357u32;$/;"	C
ERROR_EDP_POLICY_DENIES_OPERATION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_EDP_POLICY_DENIES_OPERATION: WIN32_ERROR = 356u32;$/;"	C
ERROR_EFS_ALG_BLOB_TOO_BIG	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_EFS_ALG_BLOB_TOO_BIG: WIN32_ERROR = 6013u32;$/;"	C
ERROR_EFS_DISABLED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_EFS_DISABLED: WIN32_ERROR = 6015u32;$/;"	C
ERROR_EFS_SERVER_NOT_TRUSTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_EFS_SERVER_NOT_TRUSTED: WIN32_ERROR = 6011u32;$/;"	C
ERROR_EFS_VERSION_NOT_SUPPORT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_EFS_VERSION_NOT_SUPPORT: WIN32_ERROR = 6016u32;$/;"	C
ERROR_ELEVATION_REQUIRED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_ELEVATION_REQUIRED: WIN32_ERROR = 740u32;$/;"	C
ERROR_ENCLAVE_FAILURE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_ENCLAVE_FAILURE: WIN32_ERROR = 349u32;$/;"	C
ERROR_ENCLAVE_NOT_TERMINATED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_ENCLAVE_NOT_TERMINATED: WIN32_ERROR = 814u32;$/;"	C
ERROR_ENCLAVE_VIOLATION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_ENCLAVE_VIOLATION: WIN32_ERROR = 815u32;$/;"	C
ERROR_ENCRYPTED_FILE_NOT_SUPPORTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_ENCRYPTED_FILE_NOT_SUPPORTED: WIN32_ERROR = 489u32;$/;"	C
ERROR_ENCRYPTED_IO_NOT_POSSIBLE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_ENCRYPTED_IO_NOT_POSSIBLE: WIN32_ERROR = 808u32;$/;"	C
ERROR_ENCRYPTING_METADATA_DISALLOWED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_ENCRYPTING_METADATA_DISALLOWED: WIN32_ERROR = 431u32;$/;"	C
ERROR_ENCRYPTION_DISABLED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_ENCRYPTION_DISABLED: WIN32_ERROR = 430u32;$/;"	C
ERROR_ENCRYPTION_FAILED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_ENCRYPTION_FAILED: WIN32_ERROR = 6000u32;$/;"	C
ERROR_ENCRYPTION_POLICY_DENIES_OPERATION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_ENCRYPTION_POLICY_DENIES_OPERATION: WIN32_ERROR = 6022u32;$/;"	C
ERROR_END_OF_MEDIA	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_END_OF_MEDIA: WIN32_ERROR = 1100u32;$/;"	C
ERROR_ENVVAR_NOT_FOUND	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_ENVVAR_NOT_FOUND: WIN32_ERROR = 203u32;$/;"	C
ERROR_EOM_OVERFLOW	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_EOM_OVERFLOW: WIN32_ERROR = 1129u32;$/;"	C
ERROR_ERRORS_ENCOUNTERED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_ERRORS_ENCOUNTERED: WIN32_ERROR = 774u32;$/;"	C
ERROR_EVALUATION_EXPIRATION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_EVALUATION_EXPIRATION: WIN32_ERROR = 622u32;$/;"	C
ERROR_EVENTLOG_CANT_START	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_EVENTLOG_CANT_START: WIN32_ERROR = 1501u32;$/;"	C
ERROR_EVENTLOG_FILE_CHANGED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_EVENTLOG_FILE_CHANGED: WIN32_ERROR = 1503u32;$/;"	C
ERROR_EVENTLOG_FILE_CORRUPT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_EVENTLOG_FILE_CORRUPT: WIN32_ERROR = 1500u32;$/;"	C
ERROR_EVENT_DONE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_EVENT_DONE: WIN32_ERROR = 710u32;$/;"	C
ERROR_EVENT_PENDING	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_EVENT_PENDING: WIN32_ERROR = 711u32;$/;"	C
ERROR_EXCEPTION_IN_SERVICE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_EXCEPTION_IN_SERVICE: WIN32_ERROR = 1064u32;$/;"	C
ERROR_EXCL_SEM_ALREADY_OWNED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_EXCL_SEM_ALREADY_OWNED: WIN32_ERROR = 101u32;$/;"	C
ERROR_EXE_CANNOT_MODIFY_SIGNED_BINARY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_EXE_CANNOT_MODIFY_SIGNED_BINARY: WIN32_ERROR = 217u32;$/;"	C
ERROR_EXE_CANNOT_MODIFY_STRONG_SIGNED_BINARY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_EXE_CANNOT_MODIFY_STRONG_SIGNED_BINARY: WIN32_ERROR = 218u32;$/;"	C
ERROR_EXE_MACHINE_TYPE_MISMATCH	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_EXE_MACHINE_TYPE_MISMATCH: WIN32_ERROR = 216u32;$/;"	C
ERROR_EXE_MARKED_INVALID	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_EXE_MARKED_INVALID: WIN32_ERROR = 192u32;$/;"	C
ERROR_EXTENDED_ERROR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_EXTENDED_ERROR: WIN32_ERROR = 1208u32;$/;"	C
ERROR_EXTERNAL_BACKING_PROVIDER_UNKNOWN	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_EXTERNAL_BACKING_PROVIDER_UNKNOWN: WIN32_ERROR = 343u32;$/;"	C
ERROR_EXTERNAL_SYSKEY_NOT_SUPPORTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_EXTERNAL_SYSKEY_NOT_SUPPORTED: WIN32_ERROR = 399u32;$/;"	C
ERROR_EXTRANEOUS_INFORMATION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_EXTRANEOUS_INFORMATION: WIN32_ERROR = 677u32;$/;"	C
ERROR_FAILED_DRIVER_ENTRY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_FAILED_DRIVER_ENTRY: WIN32_ERROR = 647u32;$/;"	C
ERROR_FAILED_SERVICE_CONTROLLER_CONNECT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_FAILED_SERVICE_CONTROLLER_CONNECT: WIN32_ERROR = 1063u32;$/;"	C
ERROR_FAIL_FAST_EXCEPTION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_FAIL_FAST_EXCEPTION: WIN32_ERROR = 1653u32;$/;"	C
ERROR_FAIL_I24	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_FAIL_I24: WIN32_ERROR = 83u32;$/;"	C
ERROR_FAIL_NOACTION_REBOOT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_FAIL_NOACTION_REBOOT: WIN32_ERROR = 350u32;$/;"	C
ERROR_FAIL_RESTART	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_FAIL_RESTART: WIN32_ERROR = 352u32;$/;"	C
ERROR_FAIL_SHUTDOWN	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_FAIL_SHUTDOWN: WIN32_ERROR = 351u32;$/;"	C
ERROR_FATAL_APP_EXIT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_FATAL_APP_EXIT: WIN32_ERROR = 713u32;$/;"	C
ERROR_FILEMARK_DETECTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_FILEMARK_DETECTED: WIN32_ERROR = 1101u32;$/;"	C
ERROR_FILENAME_EXCED_RANGE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_FILENAME_EXCED_RANGE: WIN32_ERROR = 206u32;$/;"	C
ERROR_FILE_CHECKED_OUT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_FILE_CHECKED_OUT: WIN32_ERROR = 220u32;$/;"	C
ERROR_FILE_CORRUPT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_FILE_CORRUPT: WIN32_ERROR = 1392u32;$/;"	C
ERROR_FILE_ENCRYPTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_FILE_ENCRYPTED: WIN32_ERROR = 6002u32;$/;"	C
ERROR_FILE_EXISTS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_FILE_EXISTS: WIN32_ERROR = 80u32;$/;"	C
ERROR_FILE_HANDLE_REVOKED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_FILE_HANDLE_REVOKED: WIN32_ERROR = 806u32;$/;"	C
ERROR_FILE_INVALID	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_FILE_INVALID: WIN32_ERROR = 1006u32;$/;"	C
ERROR_FILE_LEVEL_TRIM_NOT_SUPPORTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_FILE_LEVEL_TRIM_NOT_SUPPORTED: WIN32_ERROR = 326u32;$/;"	C
ERROR_FILE_METADATA_OPTIMIZATION_IN_PROGRESS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_FILE_METADATA_OPTIMIZATION_IN_PROGRESS: WIN32_ERROR = 809u32;$/;"	C
ERROR_FILE_NOT_ENCRYPTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_FILE_NOT_ENCRYPTED: WIN32_ERROR = 6007u32;$/;"	C
ERROR_FILE_NOT_FOUND	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_FILE_NOT_FOUND: WIN32_ERROR = 2u32;$/;"	C
ERROR_FILE_NOT_SUPPORTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_FILE_NOT_SUPPORTED: WIN32_ERROR = 425u32;$/;"	C
ERROR_FILE_OFFLINE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_FILE_OFFLINE: WIN32_ERROR = 4350u32;$/;"	C
ERROR_FILE_PROTECTED_UNDER_DPL	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_FILE_PROTECTED_UNDER_DPL: WIN32_ERROR = 406u32;$/;"	C
ERROR_FILE_READ_ONLY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_FILE_READ_ONLY: WIN32_ERROR = 6009u32;$/;"	C
ERROR_FILE_SNAP_INVALID_PARAMETER	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_FILE_SNAP_INVALID_PARAMETER: WIN32_ERROR = 440u32;$/;"	C
ERROR_FILE_SNAP_IN_PROGRESS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_FILE_SNAP_IN_PROGRESS: WIN32_ERROR = 435u32;$/;"	C
ERROR_FILE_SNAP_IO_NOT_COORDINATED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_FILE_SNAP_IO_NOT_COORDINATED: WIN32_ERROR = 438u32;$/;"	C
ERROR_FILE_SNAP_MODIFY_NOT_SUPPORTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_FILE_SNAP_MODIFY_NOT_SUPPORTED: WIN32_ERROR = 437u32;$/;"	C
ERROR_FILE_SNAP_UNEXPECTED_ERROR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_FILE_SNAP_UNEXPECTED_ERROR: WIN32_ERROR = 439u32;$/;"	C
ERROR_FILE_SNAP_USER_SECTION_NOT_SUPPORTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_FILE_SNAP_USER_SECTION_NOT_SUPPORTED: WIN32_ERROR = 436u32;$/;"	C
ERROR_FILE_SYSTEM_LIMITATION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_FILE_SYSTEM_LIMITATION: WIN32_ERROR = 665u32;$/;"	C
ERROR_FILE_SYSTEM_VIRTUALIZATION_BUSY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_FILE_SYSTEM_VIRTUALIZATION_BUSY: WIN32_ERROR = 371u32;$/;"	C
ERROR_FILE_SYSTEM_VIRTUALIZATION_INVALID_OPERATION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_FILE_SYSTEM_VIRTUALIZATION_INVALID_OPERATION: WIN32_ERROR = 385u32;$/;"	C
ERROR_FILE_SYSTEM_VIRTUALIZATION_METADATA_CORRUPT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_FILE_SYSTEM_VIRTUALIZATION_METADATA_CORRUPT: WIN32_ERROR = 370u32;$/;"	C
ERROR_FILE_SYSTEM_VIRTUALIZATION_PROVIDER_UNKNOWN	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_FILE_SYSTEM_VIRTUALIZATION_PROVIDER_UNKNOWN: WIN32_ERROR = 372u32;$/;"	C
ERROR_FILE_SYSTEM_VIRTUALIZATION_UNAVAILABLE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_FILE_SYSTEM_VIRTUALIZATION_UNAVAILABLE: WIN32_ERROR = 369u32;$/;"	C
ERROR_FILE_TOO_LARGE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_FILE_TOO_LARGE: WIN32_ERROR = 223u32;$/;"	C
ERROR_FIRMWARE_UPDATED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_FIRMWARE_UPDATED: WIN32_ERROR = 728u32;$/;"	C
ERROR_FLOAT_MULTIPLE_FAULTS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_FLOAT_MULTIPLE_FAULTS: WIN32_ERROR = 630u32;$/;"	C
ERROR_FLOAT_MULTIPLE_TRAPS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_FLOAT_MULTIPLE_TRAPS: WIN32_ERROR = 631u32;$/;"	C
ERROR_FLOPPY_BAD_REGISTERS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_FLOPPY_BAD_REGISTERS: WIN32_ERROR = 1125u32;$/;"	C
ERROR_FLOPPY_ID_MARK_NOT_FOUND	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_FLOPPY_ID_MARK_NOT_FOUND: WIN32_ERROR = 1122u32;$/;"	C
ERROR_FLOPPY_UNKNOWN_ERROR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_FLOPPY_UNKNOWN_ERROR: WIN32_ERROR = 1124u32;$/;"	C
ERROR_FLOPPY_VOLUME	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_FLOPPY_VOLUME: WIN32_ERROR = 584u32;$/;"	C
ERROR_FLOPPY_WRONG_CYLINDER	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_FLOPPY_WRONG_CYLINDER: WIN32_ERROR = 1123u32;$/;"	C
ERROR_FORMS_AUTH_REQUIRED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_FORMS_AUTH_REQUIRED: WIN32_ERROR = 224u32;$/;"	C
ERROR_FOUND_OUT_OF_SCOPE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_FOUND_OUT_OF_SCOPE: WIN32_ERROR = 601u32;$/;"	C
ERROR_FSFILTER_OP_COMPLETED_SUCCESSFULLY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_FSFILTER_OP_COMPLETED_SUCCESSFULLY: WIN32_ERROR = 762u32;$/;"	C
ERROR_FS_DRIVER_REQUIRED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_FS_DRIVER_REQUIRED: WIN32_ERROR = 588u32;$/;"	C
ERROR_FS_METADATA_INCONSISTENT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_FS_METADATA_INCONSISTENT: WIN32_ERROR = 510u32;$/;"	C
ERROR_FT_DI_SCAN_REQUIRED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_FT_DI_SCAN_REQUIRED: WIN32_ERROR = 339u32;$/;"	C
ERROR_FT_READ_FAILURE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_FT_READ_FAILURE: WIN32_ERROR = 415u32;$/;"	C
ERROR_FT_READ_FROM_COPY_FAILURE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_FT_READ_FROM_COPY_FAILURE: WIN32_ERROR = 818u32;$/;"	C
ERROR_FT_READ_RECOVERY_FROM_BACKUP	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_FT_READ_RECOVERY_FROM_BACKUP: WIN32_ERROR = 704u32;$/;"	C
ERROR_FT_WRITE_FAILURE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_FT_WRITE_FAILURE: WIN32_ERROR = 338u32;$/;"	C
ERROR_FT_WRITE_RECOVERY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_FT_WRITE_RECOVERY: WIN32_ERROR = 705u32;$/;"	C
ERROR_FULLSCREEN_MODE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_FULLSCREEN_MODE: WIN32_ERROR = 1007u32;$/;"	C
ERROR_FUNCTION_FAILED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_FUNCTION_FAILED: WIN32_ERROR = 1627u32;$/;"	C
ERROR_FUNCTION_NOT_CALLED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_FUNCTION_NOT_CALLED: WIN32_ERROR = 1626u32;$/;"	C
ERROR_GDI_HANDLE_LEAK	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_GDI_HANDLE_LEAK: WIN32_ERROR = 373u32;$/;"	C
ERROR_GENERIC_NOT_MAPPED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_GENERIC_NOT_MAPPED: WIN32_ERROR = 1360u32;$/;"	C
ERROR_GEN_FAILURE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_GEN_FAILURE: WIN32_ERROR = 31u32;$/;"	C
ERROR_GLOBAL_ONLY_HOOK	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_GLOBAL_ONLY_HOOK: WIN32_ERROR = 1429u32;$/;"	C
ERROR_GRACEFUL_DISCONNECT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_GRACEFUL_DISCONNECT: WIN32_ERROR = 1226u32;$/;"	C
ERROR_GROUP_EXISTS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_GROUP_EXISTS: WIN32_ERROR = 1318u32;$/;"	C
ERROR_GUID_SUBSTITUTION_MADE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_GUID_SUBSTITUTION_MADE: WIN32_ERROR = 680u32;$/;"	C
ERROR_HANDLES_CLOSED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_HANDLES_CLOSED: WIN32_ERROR = 676u32;$/;"	C
ERROR_HANDLE_DISK_FULL	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_HANDLE_DISK_FULL: WIN32_ERROR = 39u32;$/;"	C
ERROR_HANDLE_EOF	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_HANDLE_EOF: WIN32_ERROR = 38u32;$/;"	C
ERROR_HANDLE_REVOKED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_HANDLE_REVOKED: WIN32_ERROR = 811u32;$/;"	C
ERROR_HAS_SYSTEM_CRITICAL_FILES	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_HAS_SYSTEM_CRITICAL_FILES: WIN32_ERROR = 488u32;$/;"	C
ERROR_HIBERNATED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_HIBERNATED: WIN32_ERROR = 726u32;$/;"	C
ERROR_HIBERNATION_FAILURE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_HIBERNATION_FAILURE: WIN32_ERROR = 656u32;$/;"	C
ERROR_HOOK_NEEDS_HMOD	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_HOOK_NEEDS_HMOD: WIN32_ERROR = 1428u32;$/;"	C
ERROR_HOOK_NOT_INSTALLED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_HOOK_NOT_INSTALLED: WIN32_ERROR = 1431u32;$/;"	C
ERROR_HOOK_TYPE_NOT_ALLOWED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_HOOK_TYPE_NOT_ALLOWED: WIN32_ERROR = 1458u32;$/;"	C
ERROR_HOST_DOWN	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_HOST_DOWN: WIN32_ERROR = 1256u32;$/;"	C
ERROR_HOST_UNREACHABLE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_HOST_UNREACHABLE: WIN32_ERROR = 1232u32;$/;"	C
ERROR_HOTKEY_ALREADY_REGISTERED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_HOTKEY_ALREADY_REGISTERED: WIN32_ERROR = 1409u32;$/;"	C
ERROR_HOTKEY_NOT_REGISTERED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_HOTKEY_NOT_REGISTERED: WIN32_ERROR = 1419u32;$/;"	C
ERROR_HWNDS_HAVE_DIFF_PARENT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_HWNDS_HAVE_DIFF_PARENT: WIN32_ERROR = 1441u32;$/;"	C
ERROR_ILLEGAL_CHARACTER	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_ILLEGAL_CHARACTER: WIN32_ERROR = 582u32;$/;"	C
ERROR_ILLEGAL_DLL_RELOCATION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_ILLEGAL_DLL_RELOCATION: WIN32_ERROR = 623u32;$/;"	C
ERROR_ILLEGAL_ELEMENT_ADDRESS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_ILLEGAL_ELEMENT_ADDRESS: WIN32_ERROR = 1162u32;$/;"	C
ERROR_ILLEGAL_FLOAT_CONTEXT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_ILLEGAL_FLOAT_CONTEXT: WIN32_ERROR = 579u32;$/;"	C
ERROR_ILL_FORMED_PASSWORD	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_ILL_FORMED_PASSWORD: WIN32_ERROR = 1324u32;$/;"	C
ERROR_IMAGE_AT_DIFFERENT_BASE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_IMAGE_AT_DIFFERENT_BASE: WIN32_ERROR = 807u32;$/;"	C
ERROR_IMAGE_MACHINE_TYPE_MISMATCH	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_IMAGE_MACHINE_TYPE_MISMATCH: WIN32_ERROR = 706u32;$/;"	C
ERROR_IMAGE_MACHINE_TYPE_MISMATCH_EXE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_IMAGE_MACHINE_TYPE_MISMATCH_EXE: WIN32_ERROR = 720u32;$/;"	C
ERROR_IMAGE_NOT_AT_BASE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_IMAGE_NOT_AT_BASE: WIN32_ERROR = 700u32;$/;"	C
ERROR_IMAGE_SUBSYSTEM_NOT_PRESENT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_IMAGE_SUBSYSTEM_NOT_PRESENT: WIN32_ERROR = 308u32;$/;"	C
ERROR_IMPLEMENTATION_LIMIT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_IMPLEMENTATION_LIMIT: WIN32_ERROR = 1292u32;$/;"	C
ERROR_INCOMPATIBLE_SERVICE_PRIVILEGE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INCOMPATIBLE_SERVICE_PRIVILEGE: WIN32_ERROR = 1297u32;$/;"	C
ERROR_INCOMPATIBLE_SERVICE_SID_TYPE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INCOMPATIBLE_SERVICE_SID_TYPE: WIN32_ERROR = 1290u32;$/;"	C
ERROR_INCOMPATIBLE_WITH_GLOBAL_SHORT_NAME_REGISTRY_SETTING	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INCOMPATIBLE_WITH_GLOBAL_SHORT_NAME_REGISTRY_SETTING: WIN32_ERROR = 304u32;$/;"	C
ERROR_INCORRECT_ACCOUNT_TYPE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INCORRECT_ACCOUNT_TYPE: WIN32_ERROR = 8646u32;$/;"	C
ERROR_INCORRECT_ADDRESS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INCORRECT_ADDRESS: WIN32_ERROR = 1241u32;$/;"	C
ERROR_INCORRECT_SIZE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INCORRECT_SIZE: WIN32_ERROR = 1462u32;$/;"	C
ERROR_INDEX_ABSENT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INDEX_ABSENT: WIN32_ERROR = 1611u32;$/;"	C
ERROR_INDEX_OUT_OF_BOUNDS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INDEX_OUT_OF_BOUNDS: WIN32_ERROR = 474u32;$/;"	C
ERROR_INFLOOP_IN_RELOC_CHAIN	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INFLOOP_IN_RELOC_CHAIN: WIN32_ERROR = 202u32;$/;"	C
ERROR_INSTALL_ALREADY_RUNNING	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INSTALL_ALREADY_RUNNING: WIN32_ERROR = 1618u32;$/;"	C
ERROR_INSTALL_FAILURE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INSTALL_FAILURE: WIN32_ERROR = 1603u32;$/;"	C
ERROR_INSTALL_LANGUAGE_UNSUPPORTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INSTALL_LANGUAGE_UNSUPPORTED: WIN32_ERROR = 1623u32;$/;"	C
ERROR_INSTALL_LOG_FAILURE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INSTALL_LOG_FAILURE: WIN32_ERROR = 1622u32;$/;"	C
ERROR_INSTALL_NOTUSED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INSTALL_NOTUSED: WIN32_ERROR = 1634u32;$/;"	C
ERROR_INSTALL_PACKAGE_INVALID	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INSTALL_PACKAGE_INVALID: WIN32_ERROR = 1620u32;$/;"	C
ERROR_INSTALL_PACKAGE_OPEN_FAILED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INSTALL_PACKAGE_OPEN_FAILED: WIN32_ERROR = 1619u32;$/;"	C
ERROR_INSTALL_PACKAGE_REJECTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INSTALL_PACKAGE_REJECTED: WIN32_ERROR = 1625u32;$/;"	C
ERROR_INSTALL_PACKAGE_VERSION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INSTALL_PACKAGE_VERSION: WIN32_ERROR = 1613u32;$/;"	C
ERROR_INSTALL_PLATFORM_UNSUPPORTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INSTALL_PLATFORM_UNSUPPORTED: WIN32_ERROR = 1633u32;$/;"	C
ERROR_INSTALL_REJECTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INSTALL_REJECTED: WIN32_ERROR = 1654u32;$/;"	C
ERROR_INSTALL_REMOTE_DISALLOWED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INSTALL_REMOTE_DISALLOWED: WIN32_ERROR = 1640u32;$/;"	C
ERROR_INSTALL_REMOTE_PROHIBITED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INSTALL_REMOTE_PROHIBITED: WIN32_ERROR = 1645u32;$/;"	C
ERROR_INSTALL_SERVICE_FAILURE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INSTALL_SERVICE_FAILURE: WIN32_ERROR = 1601u32;$/;"	C
ERROR_INSTALL_SERVICE_SAFEBOOT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INSTALL_SERVICE_SAFEBOOT: WIN32_ERROR = 1652u32;$/;"	C
ERROR_INSTALL_SOURCE_ABSENT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INSTALL_SOURCE_ABSENT: WIN32_ERROR = 1612u32;$/;"	C
ERROR_INSTALL_SUSPEND	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INSTALL_SUSPEND: WIN32_ERROR = 1604u32;$/;"	C
ERROR_INSTALL_TEMP_UNWRITABLE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INSTALL_TEMP_UNWRITABLE: WIN32_ERROR = 1632u32;$/;"	C
ERROR_INSTALL_TRANSFORM_FAILURE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INSTALL_TRANSFORM_FAILURE: WIN32_ERROR = 1624u32;$/;"	C
ERROR_INSTALL_TRANSFORM_REJECTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INSTALL_TRANSFORM_REJECTED: WIN32_ERROR = 1644u32;$/;"	C
ERROR_INSTALL_UI_FAILURE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INSTALL_UI_FAILURE: WIN32_ERROR = 1621u32;$/;"	C
ERROR_INSTALL_USEREXIT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INSTALL_USEREXIT: WIN32_ERROR = 1602u32;$/;"	C
ERROR_INSTRUCTION_MISALIGNMENT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INSTRUCTION_MISALIGNMENT: WIN32_ERROR = 549u32;$/;"	C
ERROR_INSUFFICIENT_BUFFER	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INSUFFICIENT_BUFFER: WIN32_ERROR = 122u32;$/;"	C
ERROR_INSUFFICIENT_LOGON_INFO	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INSUFFICIENT_LOGON_INFO: WIN32_ERROR = 608u32;$/;"	C
ERROR_INSUFFICIENT_POWER	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INSUFFICIENT_POWER: WIN32_ERROR = 639u32;$/;"	C
ERROR_INSUFFICIENT_RESOURCE_FOR_SPECIFIED_SHARED_SECTION_SIZE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INSUFFICIENT_RESOURCE_FOR_SPECIFIED_SHARED_SECTION_SIZE: WIN32_ERROR = 781u32;$/;"	C
ERROR_INSUFFICIENT_VIRTUAL_ADDR_RESOURCES	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INSUFFICIENT_VIRTUAL_ADDR_RESOURCES: WIN32_ERROR = 473u32;$/;"	C
ERROR_INTERMIXED_KERNEL_EA_OPERATION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INTERMIXED_KERNEL_EA_OPERATION: WIN32_ERROR = 324u32;$/;"	C
ERROR_INTERNAL_DB_CORRUPTION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INTERNAL_DB_CORRUPTION: WIN32_ERROR = 1358u32;$/;"	C
ERROR_INTERNAL_DB_ERROR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INTERNAL_DB_ERROR: WIN32_ERROR = 1383u32;$/;"	C
ERROR_INTERNAL_ERROR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INTERNAL_ERROR: WIN32_ERROR = 1359u32;$/;"	C
ERROR_INTERRUPT_STILL_CONNECTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INTERRUPT_STILL_CONNECTED: WIN32_ERROR = 764u32;$/;"	C
ERROR_INTERRUPT_VECTOR_ALREADY_CONNECTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INTERRUPT_VECTOR_ALREADY_CONNECTED: WIN32_ERROR = 763u32;$/;"	C
ERROR_INVALID_ACCEL_HANDLE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_ACCEL_HANDLE: WIN32_ERROR = 1403u32;$/;"	C
ERROR_INVALID_ACCESS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_ACCESS: WIN32_ERROR = 12u32;$/;"	C
ERROR_INVALID_ACCOUNT_NAME	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_ACCOUNT_NAME: WIN32_ERROR = 1315u32;$/;"	C
ERROR_INVALID_ACE_CONDITION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_ACE_CONDITION: WIN32_ERROR = 805u32;$/;"	C
ERROR_INVALID_ACL	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_ACL: WIN32_ERROR = 1336u32;$/;"	C
ERROR_INVALID_ADDRESS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_ADDRESS: WIN32_ERROR = 487u32;$/;"	C
ERROR_INVALID_AT_INTERRUPT_TIME	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_AT_INTERRUPT_TIME: WIN32_ERROR = 104u32;$/;"	C
ERROR_INVALID_BLOCK	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_BLOCK: WIN32_ERROR = 9u32;$/;"	C
ERROR_INVALID_BLOCK_LENGTH	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_BLOCK_LENGTH: WIN32_ERROR = 1106u32;$/;"	C
ERROR_INVALID_CAP	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_CAP: WIN32_ERROR = 320u32;$/;"	C
ERROR_INVALID_CATEGORY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_CATEGORY: WIN32_ERROR = 117u32;$/;"	C
ERROR_INVALID_COMBOBOX_MESSAGE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_COMBOBOX_MESSAGE: WIN32_ERROR = 1422u32;$/;"	C
ERROR_INVALID_COMMAND_LINE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_COMMAND_LINE: WIN32_ERROR = 1639u32;$/;"	C
ERROR_INVALID_COMPUTERNAME	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_COMPUTERNAME: WIN32_ERROR = 1210u32;$/;"	C
ERROR_INVALID_CRUNTIME_PARAMETER	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_CRUNTIME_PARAMETER: WIN32_ERROR = 1288u32;$/;"	C
ERROR_INVALID_CURSOR_HANDLE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_CURSOR_HANDLE: WIN32_ERROR = 1402u32;$/;"	C
ERROR_INVALID_DATA	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_DATA: WIN32_ERROR = 13u32;$/;"	C
ERROR_INVALID_DATATYPE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_DATATYPE: WIN32_ERROR = 1804u32;$/;"	C
ERROR_INVALID_DEVICE_OBJECT_PARAMETER	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_DEVICE_OBJECT_PARAMETER: WIN32_ERROR = 650u32;$/;"	C
ERROR_INVALID_DLL	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_DLL: WIN32_ERROR = 1154u32;$/;"	C
ERROR_INVALID_DOMAINNAME	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_DOMAINNAME: WIN32_ERROR = 1212u32;$/;"	C
ERROR_INVALID_DOMAIN_ROLE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_DOMAIN_ROLE: WIN32_ERROR = 1354u32;$/;"	C
ERROR_INVALID_DOMAIN_STATE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_DOMAIN_STATE: WIN32_ERROR = 1353u32;$/;"	C
ERROR_INVALID_DRIVE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_DRIVE: WIN32_ERROR = 15u32;$/;"	C
ERROR_INVALID_DWP_HANDLE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_DWP_HANDLE: WIN32_ERROR = 1405u32;$/;"	C
ERROR_INVALID_EA_HANDLE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_EA_HANDLE: WIN32_ERROR = 278u32;$/;"	C
ERROR_INVALID_EA_NAME	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_EA_NAME: WIN32_ERROR = 254u32;$/;"	C
ERROR_INVALID_EDIT_HEIGHT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_EDIT_HEIGHT: WIN32_ERROR = 1424u32;$/;"	C
ERROR_INVALID_ENVIRONMENT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_ENVIRONMENT: WIN32_ERROR = 1805u32;$/;"	C
ERROR_INVALID_EVENTNAME	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_EVENTNAME: WIN32_ERROR = 1211u32;$/;"	C
ERROR_INVALID_EVENT_COUNT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_EVENT_COUNT: WIN32_ERROR = 151u32;$/;"	C
ERROR_INVALID_EXCEPTION_HANDLER	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_EXCEPTION_HANDLER: WIN32_ERROR = 310u32;$/;"	C
ERROR_INVALID_EXE_SIGNATURE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_EXE_SIGNATURE: WIN32_ERROR = 191u32;$/;"	C
ERROR_INVALID_FIELD	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_FIELD: WIN32_ERROR = 1616u32;$/;"	C
ERROR_INVALID_FIELD_IN_PARAMETER_LIST	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_FIELD_IN_PARAMETER_LIST: WIN32_ERROR = 328u32;$/;"	C
ERROR_INVALID_FILTER_PROC	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_FILTER_PROC: WIN32_ERROR = 1427u32;$/;"	C
ERROR_INVALID_FLAGS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_FLAGS: WIN32_ERROR = 1004u32;$/;"	C
ERROR_INVALID_FLAG_NUMBER	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_FLAG_NUMBER: WIN32_ERROR = 186u32;$/;"	C
ERROR_INVALID_FORM_NAME	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_FORM_NAME: WIN32_ERROR = 1902u32;$/;"	C
ERROR_INVALID_FORM_SIZE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_FORM_SIZE: WIN32_ERROR = 1903u32;$/;"	C
ERROR_INVALID_FUNCTION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_FUNCTION: WIN32_ERROR = 1u32;$/;"	C
ERROR_INVALID_GROUPNAME	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_GROUPNAME: WIN32_ERROR = 1209u32;$/;"	C
ERROR_INVALID_GROUP_ATTRIBUTES	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_GROUP_ATTRIBUTES: WIN32_ERROR = 1345u32;$/;"	C
ERROR_INVALID_GW_COMMAND	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_GW_COMMAND: WIN32_ERROR = 1443u32;$/;"	C
ERROR_INVALID_HANDLE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_HANDLE: WIN32_ERROR = 6u32;$/;"	C
ERROR_INVALID_HANDLE_STATE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_HANDLE_STATE: WIN32_ERROR = 1609u32;$/;"	C
ERROR_INVALID_HOOK_FILTER	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_HOOK_FILTER: WIN32_ERROR = 1426u32;$/;"	C
ERROR_INVALID_HOOK_HANDLE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_HOOK_HANDLE: WIN32_ERROR = 1404u32;$/;"	C
ERROR_INVALID_HW_PROFILE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_HW_PROFILE: WIN32_ERROR = 619u32;$/;"	C
ERROR_INVALID_ICON_HANDLE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_ICON_HANDLE: WIN32_ERROR = 1414u32;$/;"	C
ERROR_INVALID_ID_AUTHORITY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_ID_AUTHORITY: WIN32_ERROR = 1343u32;$/;"	C
ERROR_INVALID_IMAGE_HASH	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_IMAGE_HASH: WIN32_ERROR = 577u32;$/;"	C
ERROR_INVALID_IMPORT_OF_NON_DLL	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_IMPORT_OF_NON_DLL: WIN32_ERROR = 1276u32;$/;"	C
ERROR_INVALID_INDEX	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_INDEX: WIN32_ERROR = 1413u32;$/;"	C
ERROR_INVALID_KERNEL_INFO_VERSION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_KERNEL_INFO_VERSION: WIN32_ERROR = 340u32;$/;"	C
ERROR_INVALID_KEYBOARD_HANDLE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_KEYBOARD_HANDLE: WIN32_ERROR = 1457u32;$/;"	C
ERROR_INVALID_LABEL	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_LABEL: WIN32_ERROR = 1299u32;$/;"	C
ERROR_INVALID_LB_MESSAGE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_LB_MESSAGE: WIN32_ERROR = 1432u32;$/;"	C
ERROR_INVALID_LDT_DESCRIPTOR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_LDT_DESCRIPTOR: WIN32_ERROR = 564u32;$/;"	C
ERROR_INVALID_LDT_OFFSET	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_LDT_OFFSET: WIN32_ERROR = 563u32;$/;"	C
ERROR_INVALID_LDT_SIZE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_LDT_SIZE: WIN32_ERROR = 561u32;$/;"	C
ERROR_INVALID_LEVEL	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_LEVEL: WIN32_ERROR = 124u32;$/;"	C
ERROR_INVALID_LIST_FORMAT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_LIST_FORMAT: WIN32_ERROR = 153u32;$/;"	C
ERROR_INVALID_LOCK_RANGE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_LOCK_RANGE: WIN32_ERROR = 307u32;$/;"	C
ERROR_INVALID_LOGON_HOURS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_LOGON_HOURS: WIN32_ERROR = 1328u32;$/;"	C
ERROR_INVALID_LOGON_TYPE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_LOGON_TYPE: WIN32_ERROR = 1367u32;$/;"	C
ERROR_INVALID_MEMBER	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_MEMBER: WIN32_ERROR = 1388u32;$/;"	C
ERROR_INVALID_MENU_HANDLE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_MENU_HANDLE: WIN32_ERROR = 1401u32;$/;"	C
ERROR_INVALID_MESSAGE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_MESSAGE: WIN32_ERROR = 1002u32;$/;"	C
ERROR_INVALID_MESSAGEDEST	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_MESSAGEDEST: WIN32_ERROR = 1218u32;$/;"	C
ERROR_INVALID_MESSAGENAME	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_MESSAGENAME: WIN32_ERROR = 1217u32;$/;"	C
ERROR_INVALID_MINALLOCSIZE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_MINALLOCSIZE: WIN32_ERROR = 195u32;$/;"	C
ERROR_INVALID_MODULETYPE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_MODULETYPE: WIN32_ERROR = 190u32;$/;"	C
ERROR_INVALID_MONITOR_HANDLE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_MONITOR_HANDLE: WIN32_ERROR = 1461u32;$/;"	C
ERROR_INVALID_MSGBOX_STYLE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_MSGBOX_STYLE: WIN32_ERROR = 1438u32;$/;"	C
ERROR_INVALID_NAME	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_NAME: WIN32_ERROR = 123u32;$/;"	C
ERROR_INVALID_NETNAME	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_NETNAME: WIN32_ERROR = 1214u32;$/;"	C
ERROR_INVALID_OPLOCK_PROTOCOL	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_OPLOCK_PROTOCOL: WIN32_ERROR = 301u32;$/;"	C
ERROR_INVALID_ORDINAL	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_ORDINAL: WIN32_ERROR = 182u32;$/;"	C
ERROR_INVALID_OWNER	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_OWNER: WIN32_ERROR = 1307u32;$/;"	C
ERROR_INVALID_PACKAGE_SID_LENGTH	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_PACKAGE_SID_LENGTH: WIN32_ERROR = 4253u32;$/;"	C
ERROR_INVALID_PARAMETER	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_PARAMETER: WIN32_ERROR = 87u32;$/;"	C
ERROR_INVALID_PARAMETER	$RUST/src/sys/pal/windows/fs.rs	/^        const ERROR_INVALID_PARAMETER: i32 = 87;$/;"	C	method:OpenOptions::get_creation_mode
ERROR_INVALID_PASSWORD	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_PASSWORD: WIN32_ERROR = 86u32;$/;"	C
ERROR_INVALID_PASSWORDNAME	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_PASSWORDNAME: WIN32_ERROR = 1216u32;$/;"	C
ERROR_INVALID_PATCH_XML	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_PATCH_XML: WIN32_ERROR = 1650u32;$/;"	C
ERROR_INVALID_PEP_INFO_VERSION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_PEP_INFO_VERSION: WIN32_ERROR = 341u32;$/;"	C
ERROR_INVALID_PLUGPLAY_DEVICE_PATH	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_PLUGPLAY_DEVICE_PATH: WIN32_ERROR = 620u32;$/;"	C
ERROR_INVALID_PORT_ATTRIBUTES	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_PORT_ATTRIBUTES: WIN32_ERROR = 545u32;$/;"	C
ERROR_INVALID_PRIMARY_GROUP	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_PRIMARY_GROUP: WIN32_ERROR = 1308u32;$/;"	C
ERROR_INVALID_PRINTER_COMMAND	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_PRINTER_COMMAND: WIN32_ERROR = 1803u32;$/;"	C
ERROR_INVALID_PRINTER_NAME	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_PRINTER_NAME: WIN32_ERROR = 1801u32;$/;"	C
ERROR_INVALID_PRINTER_STATE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_PRINTER_STATE: WIN32_ERROR = 1906u32;$/;"	C
ERROR_INVALID_PRIORITY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_PRIORITY: WIN32_ERROR = 1800u32;$/;"	C
ERROR_INVALID_QUOTA_LOWER	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_QUOTA_LOWER: WIN32_ERROR = 547u32;$/;"	C
ERROR_INVALID_REPARSE_DATA	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_REPARSE_DATA: WIN32_ERROR = 4392u32;$/;"	C
ERROR_INVALID_SCROLLBAR_RANGE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_SCROLLBAR_RANGE: WIN32_ERROR = 1448u32;$/;"	C
ERROR_INVALID_SECURITY_DESCR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_SECURITY_DESCR: WIN32_ERROR = 1338u32;$/;"	C
ERROR_INVALID_SEGDPL	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_SEGDPL: WIN32_ERROR = 198u32;$/;"	C
ERROR_INVALID_SEGMENT_NUMBER	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_SEGMENT_NUMBER: WIN32_ERROR = 180u32;$/;"	C
ERROR_INVALID_SEPARATOR_FILE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_SEPARATOR_FILE: WIN32_ERROR = 1799u32;$/;"	C
ERROR_INVALID_SERVER_STATE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_SERVER_STATE: WIN32_ERROR = 1352u32;$/;"	C
ERROR_INVALID_SERVICENAME	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_SERVICENAME: WIN32_ERROR = 1213u32;$/;"	C
ERROR_INVALID_SERVICE_ACCOUNT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_SERVICE_ACCOUNT: WIN32_ERROR = 1057u32;$/;"	C
ERROR_INVALID_SERVICE_CONTROL	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_SERVICE_CONTROL: WIN32_ERROR = 1052u32;$/;"	C
ERROR_INVALID_SERVICE_LOCK	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_SERVICE_LOCK: WIN32_ERROR = 1071u32;$/;"	C
ERROR_INVALID_SHARENAME	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_SHARENAME: WIN32_ERROR = 1215u32;$/;"	C
ERROR_INVALID_SHOWWIN_COMMAND	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_SHOWWIN_COMMAND: WIN32_ERROR = 1449u32;$/;"	C
ERROR_INVALID_SID	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_SID: WIN32_ERROR = 1337u32;$/;"	C
ERROR_INVALID_SIGNAL_NUMBER	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_SIGNAL_NUMBER: WIN32_ERROR = 209u32;$/;"	C
ERROR_INVALID_SPI_VALUE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_SPI_VALUE: WIN32_ERROR = 1439u32;$/;"	C
ERROR_INVALID_STACKSEG	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_STACKSEG: WIN32_ERROR = 189u32;$/;"	C
ERROR_INVALID_STARTING_CODESEG	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_STARTING_CODESEG: WIN32_ERROR = 188u32;$/;"	C
ERROR_INVALID_SUB_AUTHORITY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_SUB_AUTHORITY: WIN32_ERROR = 1335u32;$/;"	C
ERROR_INVALID_TABLE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_TABLE: WIN32_ERROR = 1628u32;$/;"	C
ERROR_INVALID_TARGET_HANDLE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_TARGET_HANDLE: WIN32_ERROR = 114u32;$/;"	C
ERROR_INVALID_TASK_INDEX	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_TASK_INDEX: WIN32_ERROR = 1551u32;$/;"	C
ERROR_INVALID_TASK_NAME	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_TASK_NAME: WIN32_ERROR = 1550u32;$/;"	C
ERROR_INVALID_THREAD_ID	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_THREAD_ID: WIN32_ERROR = 1444u32;$/;"	C
ERROR_INVALID_TIME	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_TIME: WIN32_ERROR = 1901u32;$/;"	C
ERROR_INVALID_TOKEN	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_TOKEN: WIN32_ERROR = 315u32;$/;"	C
ERROR_INVALID_UNWIND_TARGET	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_UNWIND_TARGET: WIN32_ERROR = 544u32;$/;"	C
ERROR_INVALID_USER_BUFFER	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_USER_BUFFER: WIN32_ERROR = 1784u32;$/;"	C
ERROR_INVALID_USER_PRINCIPAL_NAME	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_USER_PRINCIPAL_NAME: WIN32_ERROR = 8636u32;$/;"	C
ERROR_INVALID_VARIANT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_VARIANT: WIN32_ERROR = 604u32;$/;"	C
ERROR_INVALID_VERIFY_SWITCH	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_VERIFY_SWITCH: WIN32_ERROR = 118u32;$/;"	C
ERROR_INVALID_WINDOW_HANDLE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_WINDOW_HANDLE: WIN32_ERROR = 1400u32;$/;"	C
ERROR_INVALID_WORKSTATION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_INVALID_WORKSTATION: WIN32_ERROR = 1329u32;$/;"	C
ERROR_IOPL_NOT_ENABLED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_IOPL_NOT_ENABLED: WIN32_ERROR = 197u32;$/;"	C
ERROR_IO_DEVICE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_IO_DEVICE: WIN32_ERROR = 1117u32;$/;"	C
ERROR_IO_INCOMPLETE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_IO_INCOMPLETE: WIN32_ERROR = 996u32;$/;"	C
ERROR_IO_PENDING	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_IO_PENDING: WIN32_ERROR = 997u32;$/;"	C
ERROR_IO_PRIVILEGE_FAILED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_IO_PRIVILEGE_FAILED: WIN32_ERROR = 571u32;$/;"	C
ERROR_IO_REISSUE_AS_CACHED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_IO_REISSUE_AS_CACHED: WIN32_ERROR = 3950u32;$/;"	C
ERROR_IPSEC_IKE_TIMED_OUT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_IPSEC_IKE_TIMED_OUT: WIN32_ERROR = 13805u32;$/;"	C
ERROR_IP_ADDRESS_CONFLICT1	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_IP_ADDRESS_CONFLICT1: WIN32_ERROR = 611u32;$/;"	C
ERROR_IP_ADDRESS_CONFLICT2	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_IP_ADDRESS_CONFLICT2: WIN32_ERROR = 612u32;$/;"	C
ERROR_IRQ_BUSY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_IRQ_BUSY: WIN32_ERROR = 1119u32;$/;"	C
ERROR_IS_JOINED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_IS_JOINED: WIN32_ERROR = 134u32;$/;"	C
ERROR_IS_JOIN_PATH	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_IS_JOIN_PATH: WIN32_ERROR = 147u32;$/;"	C
ERROR_IS_JOIN_TARGET	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_IS_JOIN_TARGET: WIN32_ERROR = 133u32;$/;"	C
ERROR_IS_SUBSTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_IS_SUBSTED: WIN32_ERROR = 135u32;$/;"	C
ERROR_IS_SUBST_PATH	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_IS_SUBST_PATH: WIN32_ERROR = 146u32;$/;"	C
ERROR_IS_SUBST_TARGET	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_IS_SUBST_TARGET: WIN32_ERROR = 149u32;$/;"	C
ERROR_ITERATED_DATA_EXCEEDS_64k	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_ITERATED_DATA_EXCEEDS_64k: WIN32_ERROR = 194u32;$/;"	C
ERROR_JOB_NO_CONTAINER	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_JOB_NO_CONTAINER: WIN32_ERROR = 1505u32;$/;"	C
ERROR_JOIN_TO_JOIN	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_JOIN_TO_JOIN: WIN32_ERROR = 138u32;$/;"	C
ERROR_JOIN_TO_SUBST	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_JOIN_TO_SUBST: WIN32_ERROR = 140u32;$/;"	C
ERROR_JOURNAL_DELETE_IN_PROGRESS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_JOURNAL_DELETE_IN_PROGRESS: WIN32_ERROR = 1178u32;$/;"	C
ERROR_JOURNAL_ENTRY_DELETED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_JOURNAL_ENTRY_DELETED: WIN32_ERROR = 1181u32;$/;"	C
ERROR_JOURNAL_HOOK_SET	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_JOURNAL_HOOK_SET: WIN32_ERROR = 1430u32;$/;"	C
ERROR_JOURNAL_NOT_ACTIVE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_JOURNAL_NOT_ACTIVE: WIN32_ERROR = 1179u32;$/;"	C
ERROR_KERNEL_APC	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_KERNEL_APC: WIN32_ERROR = 738u32;$/;"	C
ERROR_KEY_DELETED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_KEY_DELETED: WIN32_ERROR = 1018u32;$/;"	C
ERROR_KEY_HAS_CHILDREN	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_KEY_HAS_CHILDREN: WIN32_ERROR = 1020u32;$/;"	C
ERROR_KM_DRIVER_BLOCKED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_KM_DRIVER_BLOCKED: WIN32_ERROR = 1930u32;$/;"	C
ERROR_LABEL_TOO_LONG	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_LABEL_TOO_LONG: WIN32_ERROR = 154u32;$/;"	C
ERROR_LAST_ADMIN	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_LAST_ADMIN: WIN32_ERROR = 1322u32;$/;"	C
ERROR_LB_WITHOUT_TABSTOPS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_LB_WITHOUT_TABSTOPS: WIN32_ERROR = 1434u32;$/;"	C
ERROR_LINUX_SUBSYSTEM_NOT_PRESENT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_LINUX_SUBSYSTEM_NOT_PRESENT: WIN32_ERROR = 414u32;$/;"	C
ERROR_LINUX_SUBSYSTEM_UPDATE_REQUIRED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_LINUX_SUBSYSTEM_UPDATE_REQUIRED: WIN32_ERROR = 444u32;$/;"	C
ERROR_LISTBOX_ID_NOT_FOUND	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_LISTBOX_ID_NOT_FOUND: WIN32_ERROR = 1416u32;$/;"	C
ERROR_LM_CROSS_ENCRYPTION_REQUIRED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_LM_CROSS_ENCRYPTION_REQUIRED: WIN32_ERROR = 1390u32;$/;"	C
ERROR_LOCAL_POLICY_MODIFICATION_NOT_SUPPORTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_LOCAL_POLICY_MODIFICATION_NOT_SUPPORTED: WIN32_ERROR = 8653u32;$/;"	C
ERROR_LOCAL_USER_SESSION_KEY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_LOCAL_USER_SESSION_KEY: WIN32_ERROR = 1303u32;$/;"	C
ERROR_LOCKED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_LOCKED: WIN32_ERROR = 212u32;$/;"	C
ERROR_LOCK_FAILED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_LOCK_FAILED: WIN32_ERROR = 167u32;$/;"	C
ERROR_LOCK_VIOLATION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_LOCK_VIOLATION: WIN32_ERROR = 33u32;$/;"	C
ERROR_LOGIN_TIME_RESTRICTION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_LOGIN_TIME_RESTRICTION: WIN32_ERROR = 1239u32;$/;"	C
ERROR_LOGIN_WKSTA_RESTRICTION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_LOGIN_WKSTA_RESTRICTION: WIN32_ERROR = 1240u32;$/;"	C
ERROR_LOGON_FAILURE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_LOGON_FAILURE: WIN32_ERROR = 1326u32;$/;"	C
ERROR_LOGON_NOT_GRANTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_LOGON_NOT_GRANTED: WIN32_ERROR = 1380u32;$/;"	C
ERROR_LOGON_SERVER_CONFLICT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_LOGON_SERVER_CONFLICT: WIN32_ERROR = 568u32;$/;"	C
ERROR_LOGON_SESSION_COLLISION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_LOGON_SESSION_COLLISION: WIN32_ERROR = 1366u32;$/;"	C
ERROR_LOGON_SESSION_EXISTS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_LOGON_SESSION_EXISTS: WIN32_ERROR = 1363u32;$/;"	C
ERROR_LOGON_TYPE_NOT_GRANTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_LOGON_TYPE_NOT_GRANTED: WIN32_ERROR = 1385u32;$/;"	C
ERROR_LOG_FILE_FULL	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_LOG_FILE_FULL: WIN32_ERROR = 1502u32;$/;"	C
ERROR_LOG_HARD_ERROR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_LOG_HARD_ERROR: WIN32_ERROR = 718u32;$/;"	C
ERROR_LONGJUMP	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_LONGJUMP: WIN32_ERROR = 682u32;$/;"	C
ERROR_LOST_MODE_LOGON_RESTRICTION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_LOST_MODE_LOGON_RESTRICTION: WIN32_ERROR = 1939u32;$/;"	C
ERROR_LOST_WRITEBEHIND_DATA	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_LOST_WRITEBEHIND_DATA: WIN32_ERROR = 596u32;$/;"	C
ERROR_LOST_WRITEBEHIND_DATA_LOCAL_DISK_ERROR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_LOST_WRITEBEHIND_DATA_LOCAL_DISK_ERROR: WIN32_ERROR = 790u32;$/;"	C
ERROR_LOST_WRITEBEHIND_DATA_NETWORK_DISCONNECTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_LOST_WRITEBEHIND_DATA_NETWORK_DISCONNECTED: WIN32_ERROR = 788u32;$/;"	C
ERROR_LOST_WRITEBEHIND_DATA_NETWORK_SERVER_ERROR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_LOST_WRITEBEHIND_DATA_NETWORK_SERVER_ERROR: WIN32_ERROR = 789u32;$/;"	C
ERROR_LUIDS_EXHAUSTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_LUIDS_EXHAUSTED: WIN32_ERROR = 1334u32;$/;"	C
ERROR_MACHINE_LOCKED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_MACHINE_LOCKED: WIN32_ERROR = 1271u32;$/;"	C
ERROR_MAGAZINE_NOT_PRESENT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_MAGAZINE_NOT_PRESENT: WIN32_ERROR = 1163u32;$/;"	C
ERROR_MAPPED_ALIGNMENT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_MAPPED_ALIGNMENT: WIN32_ERROR = 1132u32;$/;"	C
ERROR_MARKED_TO_DISALLOW_WRITES	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_MARKED_TO_DISALLOW_WRITES: WIN32_ERROR = 348u32;$/;"	C
ERROR_MARSHALL_OVERFLOW	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_MARSHALL_OVERFLOW: WIN32_ERROR = 603u32;$/;"	C
ERROR_MAX_SESSIONS_REACHED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_MAX_SESSIONS_REACHED: WIN32_ERROR = 353u32;$/;"	C
ERROR_MAX_THRDS_REACHED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_MAX_THRDS_REACHED: WIN32_ERROR = 164u32;$/;"	C
ERROR_MCA_EXCEPTION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_MCA_EXCEPTION: WIN32_ERROR = 784u32;$/;"	C
ERROR_MCA_OCCURED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_MCA_OCCURED: WIN32_ERROR = 651u32;$/;"	C
ERROR_MEDIA_CHANGED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_MEDIA_CHANGED: WIN32_ERROR = 1110u32;$/;"	C
ERROR_MEDIA_CHECK	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_MEDIA_CHECK: WIN32_ERROR = 679u32;$/;"	C
ERROR_MEMBERS_PRIMARY_GROUP	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_MEMBERS_PRIMARY_GROUP: WIN32_ERROR = 1374u32;$/;"	C
ERROR_MEMBER_IN_ALIAS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_MEMBER_IN_ALIAS: WIN32_ERROR = 1378u32;$/;"	C
ERROR_MEMBER_IN_GROUP	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_MEMBER_IN_GROUP: WIN32_ERROR = 1320u32;$/;"	C
ERROR_MEMBER_NOT_IN_ALIAS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_MEMBER_NOT_IN_ALIAS: WIN32_ERROR = 1377u32;$/;"	C
ERROR_MEMBER_NOT_IN_GROUP	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_MEMBER_NOT_IN_GROUP: WIN32_ERROR = 1321u32;$/;"	C
ERROR_MEMORY_HARDWARE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_MEMORY_HARDWARE: WIN32_ERROR = 779u32;$/;"	C
ERROR_MENU_ITEM_NOT_FOUND	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_MENU_ITEM_NOT_FOUND: WIN32_ERROR = 1456u32;$/;"	C
ERROR_MESSAGE_SYNC_ONLY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_MESSAGE_SYNC_ONLY: WIN32_ERROR = 1159u32;$/;"	C
ERROR_META_EXPANSION_TOO_LONG	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_META_EXPANSION_TOO_LONG: WIN32_ERROR = 208u32;$/;"	C
ERROR_MISSING_SYSTEMFILE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_MISSING_SYSTEMFILE: WIN32_ERROR = 573u32;$/;"	C
ERROR_MOD_NOT_FOUND	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_MOD_NOT_FOUND: WIN32_ERROR = 126u32;$/;"	C
ERROR_MORE_DATA	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_MORE_DATA: WIN32_ERROR = 234u32;$/;"	C
ERROR_MORE_WRITES	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_MORE_WRITES: WIN32_ERROR = 1120u32;$/;"	C
ERROR_MOUNT_POINT_NOT_RESOLVED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_MOUNT_POINT_NOT_RESOLVED: WIN32_ERROR = 649u32;$/;"	C
ERROR_MP_PROCESSOR_MISMATCH	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_MP_PROCESSOR_MISMATCH: WIN32_ERROR = 725u32;$/;"	C
ERROR_MR_MID_NOT_FOUND	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_MR_MID_NOT_FOUND: WIN32_ERROR = 317u32;$/;"	C
ERROR_MULTIPLE_FAULT_VIOLATION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_MULTIPLE_FAULT_VIOLATION: WIN32_ERROR = 640u32;$/;"	C
ERROR_MUTANT_LIMIT_EXCEEDED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_MUTANT_LIMIT_EXCEEDED: WIN32_ERROR = 587u32;$/;"	C
ERROR_MUTUAL_AUTH_FAILED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_MUTUAL_AUTH_FAILED: WIN32_ERROR = 1397u32;$/;"	C
ERROR_NEGATIVE_SEEK	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NEGATIVE_SEEK: WIN32_ERROR = 131u32;$/;"	C
ERROR_NESTING_NOT_ALLOWED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NESTING_NOT_ALLOWED: WIN32_ERROR = 215u32;$/;"	C
ERROR_NETLOGON_NOT_STARTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NETLOGON_NOT_STARTED: WIN32_ERROR = 1792u32;$/;"	C
ERROR_NETNAME_DELETED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NETNAME_DELETED: WIN32_ERROR = 64u32;$/;"	C
ERROR_NETWORK_ACCESS_DENIED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NETWORK_ACCESS_DENIED: WIN32_ERROR = 65u32;$/;"	C
ERROR_NETWORK_ACCESS_DENIED_EDP	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NETWORK_ACCESS_DENIED_EDP: WIN32_ERROR = 354u32;$/;"	C
ERROR_NETWORK_BUSY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NETWORK_BUSY: WIN32_ERROR = 54u32;$/;"	C
ERROR_NETWORK_UNREACHABLE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NETWORK_UNREACHABLE: WIN32_ERROR = 1231u32;$/;"	C
ERROR_NET_OPEN_FAILED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NET_OPEN_FAILED: WIN32_ERROR = 570u32;$/;"	C
ERROR_NET_WRITE_FAULT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NET_WRITE_FAULT: WIN32_ERROR = 88u32;$/;"	C
ERROR_NOACCESS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NOACCESS: WIN32_ERROR = 998u32;$/;"	C
ERROR_NOINTERFACE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NOINTERFACE: WIN32_ERROR = 632u32;$/;"	C
ERROR_NOLOGON_INTERDOMAIN_TRUST_ACCOUNT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NOLOGON_INTERDOMAIN_TRUST_ACCOUNT: WIN32_ERROR = 1807u32;$/;"	C
ERROR_NOLOGON_SERVER_TRUST_ACCOUNT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NOLOGON_SERVER_TRUST_ACCOUNT: WIN32_ERROR = 1809u32;$/;"	C
ERROR_NOLOGON_WORKSTATION_TRUST_ACCOUNT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NOLOGON_WORKSTATION_TRUST_ACCOUNT: WIN32_ERROR = 1808u32;$/;"	C
ERROR_NONE_MAPPED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NONE_MAPPED: WIN32_ERROR = 1332u32;$/;"	C
ERROR_NONPAGED_SYSTEM_RESOURCES	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NONPAGED_SYSTEM_RESOURCES: WIN32_ERROR = 1451u32;$/;"	C
ERROR_NON_ACCOUNT_SID	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NON_ACCOUNT_SID: WIN32_ERROR = 1257u32;$/;"	C
ERROR_NON_DOMAIN_SID	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NON_DOMAIN_SID: WIN32_ERROR = 1258u32;$/;"	C
ERROR_NON_MDICHILD_WINDOW	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NON_MDICHILD_WINDOW: WIN32_ERROR = 1445u32;$/;"	C
ERROR_NOTHING_TO_TERMINATE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NOTHING_TO_TERMINATE: WIN32_ERROR = 758u32;$/;"	C
ERROR_NOTIFICATION_GUID_ALREADY_DEFINED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NOTIFICATION_GUID_ALREADY_DEFINED: WIN32_ERROR = 309u32;$/;"	C
ERROR_NOTIFY_CLEANUP	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NOTIFY_CLEANUP: WIN32_ERROR = 745u32;$/;"	C
ERROR_NOTIFY_ENUM_DIR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NOTIFY_ENUM_DIR: WIN32_ERROR = 1022u32;$/;"	C
ERROR_NOT_ALLOWED_ON_SYSTEM_FILE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NOT_ALLOWED_ON_SYSTEM_FILE: WIN32_ERROR = 313u32;$/;"	C
ERROR_NOT_ALL_ASSIGNED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NOT_ALL_ASSIGNED: WIN32_ERROR = 1300u32;$/;"	C
ERROR_NOT_APPCONTAINER	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NOT_APPCONTAINER: WIN32_ERROR = 4250u32;$/;"	C
ERROR_NOT_AUTHENTICATED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NOT_AUTHENTICATED: WIN32_ERROR = 1244u32;$/;"	C
ERROR_NOT_A_CLOUD_FILE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NOT_A_CLOUD_FILE: WIN32_ERROR = 376u32;$/;"	C
ERROR_NOT_A_CLOUD_SYNC_ROOT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NOT_A_CLOUD_SYNC_ROOT: WIN32_ERROR = 405u32;$/;"	C
ERROR_NOT_A_DAX_VOLUME	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NOT_A_DAX_VOLUME: WIN32_ERROR = 420u32;$/;"	C
ERROR_NOT_A_REPARSE_POINT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NOT_A_REPARSE_POINT: WIN32_ERROR = 4390u32;$/;"	C
ERROR_NOT_CAPABLE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NOT_CAPABLE: WIN32_ERROR = 775u32;$/;"	C
ERROR_NOT_CHILD_WINDOW	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NOT_CHILD_WINDOW: WIN32_ERROR = 1442u32;$/;"	C
ERROR_NOT_CONNECTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NOT_CONNECTED: WIN32_ERROR = 2250u32;$/;"	C
ERROR_NOT_CONTAINER	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NOT_CONTAINER: WIN32_ERROR = 1207u32;$/;"	C
ERROR_NOT_DAX_MAPPABLE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NOT_DAX_MAPPABLE: WIN32_ERROR = 421u32;$/;"	C
ERROR_NOT_DOS_DISK	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NOT_DOS_DISK: WIN32_ERROR = 26u32;$/;"	C
ERROR_NOT_ENOUGH_MEMORY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NOT_ENOUGH_MEMORY: WIN32_ERROR = 8u32;$/;"	C
ERROR_NOT_ENOUGH_QUOTA	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NOT_ENOUGH_QUOTA: WIN32_ERROR = 1816u32;$/;"	C
ERROR_NOT_ENOUGH_SERVER_MEMORY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NOT_ENOUGH_SERVER_MEMORY: WIN32_ERROR = 1130u32;$/;"	C
ERROR_NOT_EXPORT_FORMAT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NOT_EXPORT_FORMAT: WIN32_ERROR = 6008u32;$/;"	C
ERROR_NOT_FOUND	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NOT_FOUND: WIN32_ERROR = 1168u32;$/;"	C
ERROR_NOT_GUI_PROCESS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NOT_GUI_PROCESS: WIN32_ERROR = 1471u32;$/;"	C
ERROR_NOT_JOINED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NOT_JOINED: WIN32_ERROR = 136u32;$/;"	C
ERROR_NOT_LOCKED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NOT_LOCKED: WIN32_ERROR = 158u32;$/;"	C
ERROR_NOT_LOGGED_ON	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NOT_LOGGED_ON: WIN32_ERROR = 1245u32;$/;"	C
ERROR_NOT_LOGON_PROCESS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NOT_LOGON_PROCESS: WIN32_ERROR = 1362u32;$/;"	C
ERROR_NOT_OWNER	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NOT_OWNER: WIN32_ERROR = 288u32;$/;"	C
ERROR_NOT_READY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NOT_READY: WIN32_ERROR = 21u32;$/;"	C
ERROR_NOT_READ_FROM_COPY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NOT_READ_FROM_COPY: WIN32_ERROR = 337u32;$/;"	C
ERROR_NOT_REDUNDANT_STORAGE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NOT_REDUNDANT_STORAGE: WIN32_ERROR = 333u32;$/;"	C
ERROR_NOT_REGISTRY_FILE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NOT_REGISTRY_FILE: WIN32_ERROR = 1017u32;$/;"	C
ERROR_NOT_SAFEBOOT_SERVICE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NOT_SAFEBOOT_SERVICE: WIN32_ERROR = 1084u32;$/;"	C
ERROR_NOT_SAFE_MODE_DRIVER	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NOT_SAFE_MODE_DRIVER: WIN32_ERROR = 646u32;$/;"	C
ERROR_NOT_SAME_DEVICE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NOT_SAME_DEVICE: WIN32_ERROR = 17u32;$/;"	C
ERROR_NOT_SAME_OBJECT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NOT_SAME_OBJECT: WIN32_ERROR = 1656u32;$/;"	C
ERROR_NOT_SUBSTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NOT_SUBSTED: WIN32_ERROR = 137u32;$/;"	C
ERROR_NOT_SUPPORTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NOT_SUPPORTED: WIN32_ERROR = 50u32;$/;"	C
ERROR_NOT_SUPPORTED_IN_APPCONTAINER	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NOT_SUPPORTED_IN_APPCONTAINER: WIN32_ERROR = 4252u32;$/;"	C
ERROR_NOT_SUPPORTED_ON_DAX	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NOT_SUPPORTED_ON_DAX: WIN32_ERROR = 360u32;$/;"	C
ERROR_NOT_SUPPORTED_ON_SBS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NOT_SUPPORTED_ON_SBS: WIN32_ERROR = 1254u32;$/;"	C
ERROR_NOT_SUPPORTED_ON_STANDARD_SERVER	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NOT_SUPPORTED_ON_STANDARD_SERVER: WIN32_ERROR = 8584u32;$/;"	C
ERROR_NOT_SUPPORTED_WITH_AUDITING	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NOT_SUPPORTED_WITH_AUDITING: WIN32_ERROR = 499u32;$/;"	C
ERROR_NOT_SUPPORTED_WITH_BTT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NOT_SUPPORTED_WITH_BTT: WIN32_ERROR = 429u32;$/;"	C
ERROR_NOT_SUPPORTED_WITH_BYPASSIO	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NOT_SUPPORTED_WITH_BYPASSIO: WIN32_ERROR = 493u32;$/;"	C
ERROR_NOT_SUPPORTED_WITH_CACHED_HANDLE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NOT_SUPPORTED_WITH_CACHED_HANDLE: WIN32_ERROR = 509u32;$/;"	C
ERROR_NOT_SUPPORTED_WITH_COMPRESSION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NOT_SUPPORTED_WITH_COMPRESSION: WIN32_ERROR = 496u32;$/;"	C
ERROR_NOT_SUPPORTED_WITH_DEDUPLICATION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NOT_SUPPORTED_WITH_DEDUPLICATION: WIN32_ERROR = 498u32;$/;"	C
ERROR_NOT_SUPPORTED_WITH_ENCRYPTION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NOT_SUPPORTED_WITH_ENCRYPTION: WIN32_ERROR = 495u32;$/;"	C
ERROR_NOT_SUPPORTED_WITH_MONITORING	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NOT_SUPPORTED_WITH_MONITORING: WIN32_ERROR = 503u32;$/;"	C
ERROR_NOT_SUPPORTED_WITH_REPLICATION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NOT_SUPPORTED_WITH_REPLICATION: WIN32_ERROR = 497u32;$/;"	C
ERROR_NOT_SUPPORTED_WITH_SNAPSHOT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NOT_SUPPORTED_WITH_SNAPSHOT: WIN32_ERROR = 504u32;$/;"	C
ERROR_NOT_SUPPORTED_WITH_VIRTUALIZATION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NOT_SUPPORTED_WITH_VIRTUALIZATION: WIN32_ERROR = 505u32;$/;"	C
ERROR_NOT_TINY_STREAM	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NOT_TINY_STREAM: WIN32_ERROR = 598u32;$/;"	C
ERROR_NO_ACE_CONDITION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NO_ACE_CONDITION: WIN32_ERROR = 804u32;$/;"	C
ERROR_NO_ASSOCIATION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NO_ASSOCIATION: WIN32_ERROR = 1155u32;$/;"	C
ERROR_NO_BYPASSIO_DRIVER_SUPPORT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NO_BYPASSIO_DRIVER_SUPPORT: WIN32_ERROR = 494u32;$/;"	C
ERROR_NO_CALLBACK_ACTIVE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NO_CALLBACK_ACTIVE: WIN32_ERROR = 614u32;$/;"	C
ERROR_NO_DATA	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NO_DATA: WIN32_ERROR = 232u32;$/;"	C
ERROR_NO_DATA_DETECTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NO_DATA_DETECTED: WIN32_ERROR = 1104u32;$/;"	C
ERROR_NO_EFS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NO_EFS: WIN32_ERROR = 6004u32;$/;"	C
ERROR_NO_EVENT_PAIR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NO_EVENT_PAIR: WIN32_ERROR = 580u32;$/;"	C
ERROR_NO_GUID_TRANSLATION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NO_GUID_TRANSLATION: WIN32_ERROR = 560u32;$/;"	C
ERROR_NO_IMPERSONATION_TOKEN	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NO_IMPERSONATION_TOKEN: WIN32_ERROR = 1309u32;$/;"	C
ERROR_NO_INHERITANCE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NO_INHERITANCE: WIN32_ERROR = 1391u32;$/;"	C
ERROR_NO_LOGON_SERVERS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NO_LOGON_SERVERS: WIN32_ERROR = 1311u32;$/;"	C
ERROR_NO_LOG_SPACE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NO_LOG_SPACE: WIN32_ERROR = 1019u32;$/;"	C
ERROR_NO_MATCH	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NO_MATCH: WIN32_ERROR = 1169u32;$/;"	C
ERROR_NO_MEDIA_IN_DRIVE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NO_MEDIA_IN_DRIVE: WIN32_ERROR = 1112u32;$/;"	C
ERROR_NO_MORE_DEVICES	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NO_MORE_DEVICES: WIN32_ERROR = 1248u32;$/;"	C
ERROR_NO_MORE_FILES	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NO_MORE_FILES: WIN32_ERROR = 18u32;$/;"	C
ERROR_NO_MORE_ITEMS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NO_MORE_ITEMS: WIN32_ERROR = 259u32;$/;"	C
ERROR_NO_MORE_MATCHES	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NO_MORE_MATCHES: WIN32_ERROR = 626u32;$/;"	C
ERROR_NO_MORE_SEARCH_HANDLES	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NO_MORE_SEARCH_HANDLES: WIN32_ERROR = 113u32;$/;"	C
ERROR_NO_MORE_USER_HANDLES	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NO_MORE_USER_HANDLES: WIN32_ERROR = 1158u32;$/;"	C
ERROR_NO_NETWORK	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NO_NETWORK: WIN32_ERROR = 1222u32;$/;"	C
ERROR_NO_NET_OR_BAD_PATH	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NO_NET_OR_BAD_PATH: WIN32_ERROR = 1203u32;$/;"	C
ERROR_NO_NVRAM_RESOURCES	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NO_NVRAM_RESOURCES: WIN32_ERROR = 1470u32;$/;"	C
ERROR_NO_PAGEFILE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NO_PAGEFILE: WIN32_ERROR = 578u32;$/;"	C
ERROR_NO_PHYSICALLY_ALIGNED_FREE_SPACE_FOUND	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NO_PHYSICALLY_ALIGNED_FREE_SPACE_FOUND: WIN32_ERROR = 408u32;$/;"	C
ERROR_NO_PROC_SLOTS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NO_PROC_SLOTS: WIN32_ERROR = 89u32;$/;"	C
ERROR_NO_PROMOTION_ACTIVE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NO_PROMOTION_ACTIVE: WIN32_ERROR = 8222u32;$/;"	C
ERROR_NO_QUOTAS_FOR_ACCOUNT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NO_QUOTAS_FOR_ACCOUNT: WIN32_ERROR = 1302u32;$/;"	C
ERROR_NO_RANGES_PROCESSED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NO_RANGES_PROCESSED: WIN32_ERROR = 312u32;$/;"	C
ERROR_NO_RECOVERY_POLICY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NO_RECOVERY_POLICY: WIN32_ERROR = 6003u32;$/;"	C
ERROR_NO_RECOVERY_PROGRAM	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NO_RECOVERY_PROGRAM: WIN32_ERROR = 1082u32;$/;"	C
ERROR_NO_SCROLLBARS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NO_SCROLLBARS: WIN32_ERROR = 1447u32;$/;"	C
ERROR_NO_SECRETS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NO_SECRETS: WIN32_ERROR = 8620u32;$/;"	C
ERROR_NO_SECURITY_ON_OBJECT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NO_SECURITY_ON_OBJECT: WIN32_ERROR = 1350u32;$/;"	C
ERROR_NO_SHUTDOWN_IN_PROGRESS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NO_SHUTDOWN_IN_PROGRESS: WIN32_ERROR = 1116u32;$/;"	C
ERROR_NO_SIGNAL_SENT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NO_SIGNAL_SENT: WIN32_ERROR = 205u32;$/;"	C
ERROR_NO_SITENAME	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NO_SITENAME: WIN32_ERROR = 1919u32;$/;"	C
ERROR_NO_SITE_SETTINGS_OBJECT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NO_SITE_SETTINGS_OBJECT: WIN32_ERROR = 8619u32;$/;"	C
ERROR_NO_SPOOL_SPACE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NO_SPOOL_SPACE: WIN32_ERROR = 62u32;$/;"	C
ERROR_NO_SUCH_ALIAS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NO_SUCH_ALIAS: WIN32_ERROR = 1376u32;$/;"	C
ERROR_NO_SUCH_DEVICE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NO_SUCH_DEVICE: WIN32_ERROR = 433u32;$/;"	C
ERROR_NO_SUCH_DOMAIN	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NO_SUCH_DOMAIN: WIN32_ERROR = 1355u32;$/;"	C
ERROR_NO_SUCH_GROUP	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NO_SUCH_GROUP: WIN32_ERROR = 1319u32;$/;"	C
ERROR_NO_SUCH_LOGON_SESSION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NO_SUCH_LOGON_SESSION: WIN32_ERROR = 1312u32;$/;"	C
ERROR_NO_SUCH_MEMBER	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NO_SUCH_MEMBER: WIN32_ERROR = 1387u32;$/;"	C
ERROR_NO_SUCH_PACKAGE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NO_SUCH_PACKAGE: WIN32_ERROR = 1364u32;$/;"	C
ERROR_NO_SUCH_PRIVILEGE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NO_SUCH_PRIVILEGE: WIN32_ERROR = 1313u32;$/;"	C
ERROR_NO_SUCH_SITE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NO_SUCH_SITE: WIN32_ERROR = 1249u32;$/;"	C
ERROR_NO_SUCH_USER	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NO_SUCH_USER: WIN32_ERROR = 1317u32;$/;"	C
ERROR_NO_SYSTEM_MENU	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NO_SYSTEM_MENU: WIN32_ERROR = 1437u32;$/;"	C
ERROR_NO_SYSTEM_RESOURCES	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NO_SYSTEM_RESOURCES: WIN32_ERROR = 1450u32;$/;"	C
ERROR_NO_TASK_QUEUE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NO_TASK_QUEUE: WIN32_ERROR = 427u32;$/;"	C
ERROR_NO_TOKEN	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NO_TOKEN: WIN32_ERROR = 1008u32;$/;"	C
ERROR_NO_TRACKING_SERVICE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NO_TRACKING_SERVICE: WIN32_ERROR = 1172u32;$/;"	C
ERROR_NO_TRUST_LSA_SECRET	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NO_TRUST_LSA_SECRET: WIN32_ERROR = 1786u32;$/;"	C
ERROR_NO_TRUST_SAM_ACCOUNT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NO_TRUST_SAM_ACCOUNT: WIN32_ERROR = 1787u32;$/;"	C
ERROR_NO_UNICODE_TRANSLATION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NO_UNICODE_TRANSLATION: WIN32_ERROR = 1113u32;$/;"	C
ERROR_NO_USER_KEYS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NO_USER_KEYS: WIN32_ERROR = 6006u32;$/;"	C
ERROR_NO_USER_SESSION_KEY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NO_USER_SESSION_KEY: WIN32_ERROR = 1394u32;$/;"	C
ERROR_NO_VOLUME_ID	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NO_VOLUME_ID: WIN32_ERROR = 1173u32;$/;"	C
ERROR_NO_VOLUME_LABEL	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NO_VOLUME_LABEL: WIN32_ERROR = 125u32;$/;"	C
ERROR_NO_WILDCARD_CHARACTERS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NO_WILDCARD_CHARACTERS: WIN32_ERROR = 1417u32;$/;"	C
ERROR_NO_WORK_DONE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NO_WORK_DONE: WIN32_ERROR = 235u32;$/;"	C
ERROR_NO_WRITABLE_DC_FOUND	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NO_WRITABLE_DC_FOUND: WIN32_ERROR = 8621u32;$/;"	C
ERROR_NO_YIELD_PERFORMED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NO_YIELD_PERFORMED: WIN32_ERROR = 721u32;$/;"	C
ERROR_NTLM_BLOCKED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NTLM_BLOCKED: WIN32_ERROR = 1937u32;$/;"	C
ERROR_NT_CROSS_ENCRYPTION_REQUIRED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NT_CROSS_ENCRYPTION_REQUIRED: WIN32_ERROR = 1386u32;$/;"	C
ERROR_NULL_LM_PASSWORD	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_NULL_LM_PASSWORD: WIN32_ERROR = 1304u32;$/;"	C
ERROR_OBJECT_IS_IMMUTABLE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_OBJECT_IS_IMMUTABLE: WIN32_ERROR = 4449u32;$/;"	C
ERROR_OBJECT_NAME_EXISTS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_OBJECT_NAME_EXISTS: WIN32_ERROR = 698u32;$/;"	C
ERROR_OBJECT_NOT_EXTERNALLY_BACKED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_OBJECT_NOT_EXTERNALLY_BACKED: WIN32_ERROR = 342u32;$/;"	C
ERROR_OFFLOAD_READ_FILE_NOT_SUPPORTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_OFFLOAD_READ_FILE_NOT_SUPPORTED: WIN32_ERROR = 4442u32;$/;"	C
ERROR_OFFLOAD_READ_FLT_NOT_SUPPORTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_OFFLOAD_READ_FLT_NOT_SUPPORTED: WIN32_ERROR = 4440u32;$/;"	C
ERROR_OFFLOAD_WRITE_FILE_NOT_SUPPORTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_OFFLOAD_WRITE_FILE_NOT_SUPPORTED: WIN32_ERROR = 4443u32;$/;"	C
ERROR_OFFLOAD_WRITE_FLT_NOT_SUPPORTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_OFFLOAD_WRITE_FLT_NOT_SUPPORTED: WIN32_ERROR = 4441u32;$/;"	C
ERROR_OFFSET_ALIGNMENT_VIOLATION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_OFFSET_ALIGNMENT_VIOLATION: WIN32_ERROR = 327u32;$/;"	C
ERROR_OLD_WIN_VERSION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_OLD_WIN_VERSION: WIN32_ERROR = 1150u32;$/;"	C
ERROR_ONLY_IF_CONNECTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_ONLY_IF_CONNECTED: WIN32_ERROR = 1251u32;$/;"	C
ERROR_OPEN_FAILED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_OPEN_FAILED: WIN32_ERROR = 110u32;$/;"	C
ERROR_OPEN_FILES	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_OPEN_FILES: WIN32_ERROR = 2401u32;$/;"	C
ERROR_OPERATION_ABORTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_OPERATION_ABORTED: WIN32_ERROR = 995u32;$/;"	C
ERROR_OPERATION_IN_PROGRESS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_OPERATION_IN_PROGRESS: WIN32_ERROR = 329u32;$/;"	C
ERROR_OPLOCK_BREAK_IN_PROGRESS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_OPLOCK_BREAK_IN_PROGRESS: WIN32_ERROR = 742u32;$/;"	C
ERROR_OPLOCK_HANDLE_CLOSED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_OPLOCK_HANDLE_CLOSED: WIN32_ERROR = 803u32;$/;"	C
ERROR_OPLOCK_NOT_GRANTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_OPLOCK_NOT_GRANTED: WIN32_ERROR = 300u32;$/;"	C
ERROR_OPLOCK_SWITCHED_TO_NEW_HANDLE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_OPLOCK_SWITCHED_TO_NEW_HANDLE: WIN32_ERROR = 800u32;$/;"	C
ERROR_ORPHAN_NAME_EXHAUSTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_ORPHAN_NAME_EXHAUSTED: WIN32_ERROR = 799u32;$/;"	C
ERROR_OUTOFMEMORY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_OUTOFMEMORY: WIN32_ERROR = 14u32;$/;"	C
ERROR_OUT_OF_PAPER	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_OUT_OF_PAPER: WIN32_ERROR = 28u32;$/;"	C
ERROR_OUT_OF_STRUCTURES	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_OUT_OF_STRUCTURES: WIN32_ERROR = 84u32;$/;"	C
ERROR_OVERRIDE_NOCHANGES	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_OVERRIDE_NOCHANGES: WIN32_ERROR = 1252u32;$/;"	C
ERROR_PAGED_SYSTEM_RESOURCES	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_PAGED_SYSTEM_RESOURCES: WIN32_ERROR = 1452u32;$/;"	C
ERROR_PAGEFILE_CREATE_FAILED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_PAGEFILE_CREATE_FAILED: WIN32_ERROR = 576u32;$/;"	C
ERROR_PAGEFILE_NOT_SUPPORTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_PAGEFILE_NOT_SUPPORTED: WIN32_ERROR = 491u32;$/;"	C
ERROR_PAGEFILE_QUOTA	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_PAGEFILE_QUOTA: WIN32_ERROR = 1454u32;$/;"	C
ERROR_PAGEFILE_QUOTA_EXCEEDED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_PAGEFILE_QUOTA_EXCEEDED: WIN32_ERROR = 567u32;$/;"	C
ERROR_PAGE_FAULT_COPY_ON_WRITE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_PAGE_FAULT_COPY_ON_WRITE: WIN32_ERROR = 749u32;$/;"	C
ERROR_PAGE_FAULT_DEMAND_ZERO	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_PAGE_FAULT_DEMAND_ZERO: WIN32_ERROR = 748u32;$/;"	C
ERROR_PAGE_FAULT_GUARD_PAGE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_PAGE_FAULT_GUARD_PAGE: WIN32_ERROR = 750u32;$/;"	C
ERROR_PAGE_FAULT_PAGING_FILE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_PAGE_FAULT_PAGING_FILE: WIN32_ERROR = 751u32;$/;"	C
ERROR_PAGE_FAULT_TRANSITION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_PAGE_FAULT_TRANSITION: WIN32_ERROR = 747u32;$/;"	C
ERROR_PARAMETER_QUOTA_EXCEEDED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_PARAMETER_QUOTA_EXCEEDED: WIN32_ERROR = 1283u32;$/;"	C
ERROR_PARTIAL_COPY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_PARTIAL_COPY: WIN32_ERROR = 299u32;$/;"	C
ERROR_PARTITION_FAILURE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_PARTITION_FAILURE: WIN32_ERROR = 1105u32;$/;"	C
ERROR_PARTITION_TERMINATING	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_PARTITION_TERMINATING: WIN32_ERROR = 1184u32;$/;"	C
ERROR_PASSWORD_CHANGE_REQUIRED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_PASSWORD_CHANGE_REQUIRED: WIN32_ERROR = 1938u32;$/;"	C
ERROR_PASSWORD_EXPIRED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_PASSWORD_EXPIRED: WIN32_ERROR = 1330u32;$/;"	C
ERROR_PASSWORD_MUST_CHANGE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_PASSWORD_MUST_CHANGE: WIN32_ERROR = 1907u32;$/;"	C
ERROR_PASSWORD_RESTRICTION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_PASSWORD_RESTRICTION: WIN32_ERROR = 1325u32;$/;"	C
ERROR_PATCH_MANAGED_ADVERTISED_PRODUCT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_PATCH_MANAGED_ADVERTISED_PRODUCT: WIN32_ERROR = 1651u32;$/;"	C
ERROR_PATCH_NO_SEQUENCE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_PATCH_NO_SEQUENCE: WIN32_ERROR = 1648u32;$/;"	C
ERROR_PATCH_PACKAGE_INVALID	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_PATCH_PACKAGE_INVALID: WIN32_ERROR = 1636u32;$/;"	C
ERROR_PATCH_PACKAGE_OPEN_FAILED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_PATCH_PACKAGE_OPEN_FAILED: WIN32_ERROR = 1635u32;$/;"	C
ERROR_PATCH_PACKAGE_REJECTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_PATCH_PACKAGE_REJECTED: WIN32_ERROR = 1643u32;$/;"	C
ERROR_PATCH_PACKAGE_UNSUPPORTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_PATCH_PACKAGE_UNSUPPORTED: WIN32_ERROR = 1637u32;$/;"	C
ERROR_PATCH_REMOVAL_DISALLOWED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_PATCH_REMOVAL_DISALLOWED: WIN32_ERROR = 1649u32;$/;"	C
ERROR_PATCH_REMOVAL_UNSUPPORTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_PATCH_REMOVAL_UNSUPPORTED: WIN32_ERROR = 1646u32;$/;"	C
ERROR_PATCH_TARGET_NOT_FOUND	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_PATCH_TARGET_NOT_FOUND: WIN32_ERROR = 1642u32;$/;"	C
ERROR_PATH_BUSY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_PATH_BUSY: WIN32_ERROR = 148u32;$/;"	C
ERROR_PATH_NOT_FOUND	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_PATH_NOT_FOUND: WIN32_ERROR = 3u32;$/;"	C
ERROR_PER_USER_TRUST_QUOTA_EXCEEDED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_PER_USER_TRUST_QUOTA_EXCEEDED: WIN32_ERROR = 1932u32;$/;"	C
ERROR_PIPE_BUSY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_PIPE_BUSY: WIN32_ERROR = 231u32;$/;"	C
ERROR_PIPE_CONNECTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_PIPE_CONNECTED: WIN32_ERROR = 535u32;$/;"	C
ERROR_PIPE_LISTENING	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_PIPE_LISTENING: WIN32_ERROR = 536u32;$/;"	C
ERROR_PIPE_LOCAL	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_PIPE_LOCAL: WIN32_ERROR = 229u32;$/;"	C
ERROR_PIPE_NOT_CONNECTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_PIPE_NOT_CONNECTED: WIN32_ERROR = 233u32;$/;"	C
ERROR_PKINIT_FAILURE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_PKINIT_FAILURE: WIN32_ERROR = 1263u32;$/;"	C
ERROR_PLUGPLAY_QUERY_VETOED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_PLUGPLAY_QUERY_VETOED: WIN32_ERROR = 683u32;$/;"	C
ERROR_PNP_BAD_MPS_TABLE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_PNP_BAD_MPS_TABLE: WIN32_ERROR = 671u32;$/;"	C
ERROR_PNP_INVALID_ID	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_PNP_INVALID_ID: WIN32_ERROR = 674u32;$/;"	C
ERROR_PNP_IRQ_TRANSLATION_FAILED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_PNP_IRQ_TRANSLATION_FAILED: WIN32_ERROR = 673u32;$/;"	C
ERROR_PNP_QUERY_REMOVE_DEVICE_TIMEOUT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_PNP_QUERY_REMOVE_DEVICE_TIMEOUT: WIN32_ERROR = 480u32;$/;"	C
ERROR_PNP_QUERY_REMOVE_RELATED_DEVICE_TIMEOUT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_PNP_QUERY_REMOVE_RELATED_DEVICE_TIMEOUT: WIN32_ERROR = 481u32;$/;"	C
ERROR_PNP_QUERY_REMOVE_UNRELATED_DEVICE_TIMEOUT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_PNP_QUERY_REMOVE_UNRELATED_DEVICE_TIMEOUT: WIN32_ERROR = 482u32;$/;"	C
ERROR_PNP_REBOOT_REQUIRED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_PNP_REBOOT_REQUIRED: WIN32_ERROR = 638u32;$/;"	C
ERROR_PNP_RESTART_ENUMERATION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_PNP_RESTART_ENUMERATION: WIN32_ERROR = 636u32;$/;"	C
ERROR_PNP_TRANSLATION_FAILED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_PNP_TRANSLATION_FAILED: WIN32_ERROR = 672u32;$/;"	C
ERROR_POINT_NOT_FOUND	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_POINT_NOT_FOUND: WIN32_ERROR = 1171u32;$/;"	C
ERROR_POLICY_OBJECT_NOT_FOUND	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_POLICY_OBJECT_NOT_FOUND: WIN32_ERROR = 8219u32;$/;"	C
ERROR_POLICY_ONLY_IN_DS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_POLICY_ONLY_IN_DS: WIN32_ERROR = 8220u32;$/;"	C
ERROR_POPUP_ALREADY_ACTIVE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_POPUP_ALREADY_ACTIVE: WIN32_ERROR = 1446u32;$/;"	C
ERROR_PORT_MESSAGE_TOO_LONG	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_PORT_MESSAGE_TOO_LONG: WIN32_ERROR = 546u32;$/;"	C
ERROR_PORT_NOT_SET	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_PORT_NOT_SET: WIN32_ERROR = 642u32;$/;"	C
ERROR_PORT_UNREACHABLE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_PORT_UNREACHABLE: WIN32_ERROR = 1234u32;$/;"	C
ERROR_POSSIBLE_DEADLOCK	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_POSSIBLE_DEADLOCK: WIN32_ERROR = 1131u32;$/;"	C
ERROR_POTENTIAL_FILE_FOUND	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_POTENTIAL_FILE_FOUND: WIN32_ERROR = 1180u32;$/;"	C
ERROR_PREDEFINED_HANDLE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_PREDEFINED_HANDLE: WIN32_ERROR = 714u32;$/;"	C
ERROR_PRIMARY_TRANSPORT_CONNECT_FAILED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_PRIMARY_TRANSPORT_CONNECT_FAILED: WIN32_ERROR = 746u32;$/;"	C
ERROR_PRINTER_ALREADY_EXISTS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_PRINTER_ALREADY_EXISTS: WIN32_ERROR = 1802u32;$/;"	C
ERROR_PRINTER_DELETED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_PRINTER_DELETED: WIN32_ERROR = 1905u32;$/;"	C
ERROR_PRINTER_DRIVER_ALREADY_INSTALLED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_PRINTER_DRIVER_ALREADY_INSTALLED: WIN32_ERROR = 1795u32;$/;"	C
ERROR_PRINTQ_FULL	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_PRINTQ_FULL: WIN32_ERROR = 61u32;$/;"	C
ERROR_PRINT_CANCELLED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_PRINT_CANCELLED: WIN32_ERROR = 63u32;$/;"	C
ERROR_PRIVATE_DIALOG_INDEX	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_PRIVATE_DIALOG_INDEX: WIN32_ERROR = 1415u32;$/;"	C
ERROR_PRIVILEGE_NOT_HELD	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_PRIVILEGE_NOT_HELD: WIN32_ERROR = 1314u32;$/;"	C
ERROR_PROCESS_ABORTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_PROCESS_ABORTED: WIN32_ERROR = 1067u32;$/;"	C
ERROR_PROCESS_IN_JOB	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_PROCESS_IN_JOB: WIN32_ERROR = 760u32;$/;"	C
ERROR_PROCESS_IS_PROTECTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_PROCESS_IS_PROTECTED: WIN32_ERROR = 1293u32;$/;"	C
ERROR_PROCESS_MODE_ALREADY_BACKGROUND	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_PROCESS_MODE_ALREADY_BACKGROUND: WIN32_ERROR = 402u32;$/;"	C
ERROR_PROCESS_MODE_NOT_BACKGROUND	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_PROCESS_MODE_NOT_BACKGROUND: WIN32_ERROR = 403u32;$/;"	C
ERROR_PROCESS_NOT_IN_JOB	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_PROCESS_NOT_IN_JOB: WIN32_ERROR = 759u32;$/;"	C
ERROR_PROC_NOT_FOUND	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_PROC_NOT_FOUND: WIN32_ERROR = 127u32;$/;"	C
ERROR_PRODUCT_UNINSTALLED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_PRODUCT_UNINSTALLED: WIN32_ERROR = 1614u32;$/;"	C
ERROR_PRODUCT_VERSION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_PRODUCT_VERSION: WIN32_ERROR = 1638u32;$/;"	C
ERROR_PROFILING_AT_LIMIT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_PROFILING_AT_LIMIT: WIN32_ERROR = 553u32;$/;"	C
ERROR_PROFILING_NOT_STARTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_PROFILING_NOT_STARTED: WIN32_ERROR = 550u32;$/;"	C
ERROR_PROFILING_NOT_STOPPED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_PROFILING_NOT_STOPPED: WIN32_ERROR = 551u32;$/;"	C
ERROR_PROMOTION_ACTIVE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_PROMOTION_ACTIVE: WIN32_ERROR = 8221u32;$/;"	C
ERROR_PROTOCOL_UNREACHABLE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_PROTOCOL_UNREACHABLE: WIN32_ERROR = 1233u32;$/;"	C
ERROR_PWD_HISTORY_CONFLICT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_PWD_HISTORY_CONFLICT: WIN32_ERROR = 617u32;$/;"	C
ERROR_PWD_TOO_LONG	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_PWD_TOO_LONG: WIN32_ERROR = 657u32;$/;"	C
ERROR_PWD_TOO_RECENT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_PWD_TOO_RECENT: WIN32_ERROR = 616u32;$/;"	C
ERROR_PWD_TOO_SHORT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_PWD_TOO_SHORT: WIN32_ERROR = 615u32;$/;"	C
ERROR_QUOTA_ACTIVITY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_QUOTA_ACTIVITY: WIN32_ERROR = 810u32;$/;"	C
ERROR_QUOTA_LIST_INCONSISTENT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_QUOTA_LIST_INCONSISTENT: WIN32_ERROR = 621u32;$/;"	C
ERROR_RANGE_LIST_CONFLICT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_RANGE_LIST_CONFLICT: WIN32_ERROR = 627u32;$/;"	C
ERROR_RANGE_NOT_FOUND	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_RANGE_NOT_FOUND: WIN32_ERROR = 644u32;$/;"	C
ERROR_READ_FAULT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_READ_FAULT: WIN32_ERROR = 30u32;$/;"	C
ERROR_RECEIVE_EXPEDITED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_RECEIVE_EXPEDITED: WIN32_ERROR = 708u32;$/;"	C
ERROR_RECEIVE_PARTIAL	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_RECEIVE_PARTIAL: WIN32_ERROR = 707u32;$/;"	C
ERROR_RECEIVE_PARTIAL_EXPEDITED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_RECEIVE_PARTIAL_EXPEDITED: WIN32_ERROR = 709u32;$/;"	C
ERROR_RECOVERY_FAILURE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_RECOVERY_FAILURE: WIN32_ERROR = 1279u32;$/;"	C
ERROR_REDIRECTOR_HAS_OPEN_HANDLES	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_REDIRECTOR_HAS_OPEN_HANDLES: WIN32_ERROR = 1794u32;$/;"	C
ERROR_REDIR_PAUSED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_REDIR_PAUSED: WIN32_ERROR = 72u32;$/;"	C
ERROR_REGISTRY_CORRUPT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_REGISTRY_CORRUPT: WIN32_ERROR = 1015u32;$/;"	C
ERROR_REGISTRY_HIVE_RECOVERED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_REGISTRY_HIVE_RECOVERED: WIN32_ERROR = 685u32;$/;"	C
ERROR_REGISTRY_IO_FAILED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_REGISTRY_IO_FAILED: WIN32_ERROR = 1016u32;$/;"	C
ERROR_REGISTRY_QUOTA_LIMIT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_REGISTRY_QUOTA_LIMIT: WIN32_ERROR = 613u32;$/;"	C
ERROR_REGISTRY_RECOVERED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_REGISTRY_RECOVERED: WIN32_ERROR = 1014u32;$/;"	C
ERROR_REG_NAT_CONSUMPTION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_REG_NAT_CONSUMPTION: WIN32_ERROR = 1261u32;$/;"	C
ERROR_RELOC_CHAIN_XEEDS_SEGLIM	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_RELOC_CHAIN_XEEDS_SEGLIM: WIN32_ERROR = 201u32;$/;"	C
ERROR_REMOTE_PRINT_CONNECTIONS_BLOCKED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_REMOTE_PRINT_CONNECTIONS_BLOCKED: WIN32_ERROR = 1936u32;$/;"	C
ERROR_REMOTE_SESSION_LIMIT_EXCEEDED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_REMOTE_SESSION_LIMIT_EXCEEDED: WIN32_ERROR = 1220u32;$/;"	C
ERROR_REMOTE_STORAGE_MEDIA_ERROR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_REMOTE_STORAGE_MEDIA_ERROR: WIN32_ERROR = 4352u32;$/;"	C
ERROR_REMOTE_STORAGE_NOT_ACTIVE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_REMOTE_STORAGE_NOT_ACTIVE: WIN32_ERROR = 4351u32;$/;"	C
ERROR_REM_NOT_LIST	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_REM_NOT_LIST: WIN32_ERROR = 51u32;$/;"	C
ERROR_REPARSE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_REPARSE: WIN32_ERROR = 741u32;$/;"	C
ERROR_REPARSE_ATTRIBUTE_CONFLICT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_REPARSE_ATTRIBUTE_CONFLICT: WIN32_ERROR = 4391u32;$/;"	C
ERROR_REPARSE_OBJECT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_REPARSE_OBJECT: WIN32_ERROR = 755u32;$/;"	C
ERROR_REPARSE_POINT_ENCOUNTERED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_REPARSE_POINT_ENCOUNTERED: WIN32_ERROR = 4395u32;$/;"	C
ERROR_REPARSE_TAG_INVALID	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_REPARSE_TAG_INVALID: WIN32_ERROR = 4393u32;$/;"	C
ERROR_REPARSE_TAG_MISMATCH	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_REPARSE_TAG_MISMATCH: WIN32_ERROR = 4394u32;$/;"	C
ERROR_REPLY_MESSAGE_MISMATCH	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_REPLY_MESSAGE_MISMATCH: WIN32_ERROR = 595u32;$/;"	C
ERROR_REQUEST_ABORTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_REQUEST_ABORTED: WIN32_ERROR = 1235u32;$/;"	C
ERROR_REQUEST_OUT_OF_SEQUENCE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_REQUEST_OUT_OF_SEQUENCE: WIN32_ERROR = 776u32;$/;"	C
ERROR_REQUEST_PAUSED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_REQUEST_PAUSED: WIN32_ERROR = 3050u32;$/;"	C
ERROR_REQUIRES_INTERACTIVE_WINDOWSTATION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_REQUIRES_INTERACTIVE_WINDOWSTATION: WIN32_ERROR = 1459u32;$/;"	C
ERROR_REQ_NOT_ACCEP	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_REQ_NOT_ACCEP: WIN32_ERROR = 71u32;$/;"	C
ERROR_RESIDENT_FILE_NOT_SUPPORTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_RESIDENT_FILE_NOT_SUPPORTED: WIN32_ERROR = 334u32;$/;"	C
ERROR_RESOURCE_CALL_TIMED_OUT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_RESOURCE_CALL_TIMED_OUT: WIN32_ERROR = 5910u32;$/;"	C
ERROR_RESOURCE_DATA_NOT_FOUND	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_RESOURCE_DATA_NOT_FOUND: WIN32_ERROR = 1812u32;$/;"	C
ERROR_RESOURCE_LANG_NOT_FOUND	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_RESOURCE_LANG_NOT_FOUND: WIN32_ERROR = 1815u32;$/;"	C
ERROR_RESOURCE_NAME_NOT_FOUND	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_RESOURCE_NAME_NOT_FOUND: WIN32_ERROR = 1814u32;$/;"	C
ERROR_RESOURCE_REQUIREMENTS_CHANGED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_RESOURCE_REQUIREMENTS_CHANGED: WIN32_ERROR = 756u32;$/;"	C
ERROR_RESOURCE_TYPE_NOT_FOUND	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_RESOURCE_TYPE_NOT_FOUND: WIN32_ERROR = 1813u32;$/;"	C
ERROR_RESTART_APPLICATION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_RESTART_APPLICATION: WIN32_ERROR = 1467u32;$/;"	C
ERROR_RESUME_HIBERNATION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_RESUME_HIBERNATION: WIN32_ERROR = 727u32;$/;"	C
ERROR_RETRY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_RETRY: WIN32_ERROR = 1237u32;$/;"	C
ERROR_RETURN_ADDRESS_HIJACK_ATTEMPT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_RETURN_ADDRESS_HIJACK_ATTEMPT: WIN32_ERROR = 1662u32;$/;"	C
ERROR_REVISION_MISMATCH	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_REVISION_MISMATCH: WIN32_ERROR = 1306u32;$/;"	C
ERROR_RING2SEG_MUST_BE_MOVABLE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_RING2SEG_MUST_BE_MOVABLE: WIN32_ERROR = 200u32;$/;"	C
ERROR_RING2_STACK_IN_USE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_RING2_STACK_IN_USE: WIN32_ERROR = 207u32;$/;"	C
ERROR_RMODE_APP	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_RMODE_APP: WIN32_ERROR = 1153u32;$/;"	C
ERROR_ROWSNOTRELEASED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_ROWSNOTRELEASED: WIN32_ERROR = 772u32;$/;"	C
ERROR_RUNLEVEL_SWITCH_AGENT_TIMEOUT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_RUNLEVEL_SWITCH_AGENT_TIMEOUT: WIN32_ERROR = 15403u32;$/;"	C
ERROR_RUNLEVEL_SWITCH_TIMEOUT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_RUNLEVEL_SWITCH_TIMEOUT: WIN32_ERROR = 15402u32;$/;"	C
ERROR_RWRAW_ENCRYPTED_FILE_NOT_ENCRYPTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_RWRAW_ENCRYPTED_FILE_NOT_ENCRYPTED: WIN32_ERROR = 410u32;$/;"	C
ERROR_RWRAW_ENCRYPTED_INVALID_EDATAINFO_FILEOFFSET	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_RWRAW_ENCRYPTED_INVALID_EDATAINFO_FILEOFFSET: WIN32_ERROR = 411u32;$/;"	C
ERROR_RWRAW_ENCRYPTED_INVALID_EDATAINFO_FILERANGE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_RWRAW_ENCRYPTED_INVALID_EDATAINFO_FILERANGE: WIN32_ERROR = 412u32;$/;"	C
ERROR_RWRAW_ENCRYPTED_INVALID_EDATAINFO_PARAMETER	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_RWRAW_ENCRYPTED_INVALID_EDATAINFO_PARAMETER: WIN32_ERROR = 413u32;$/;"	C
ERROR_RXACT_COMMITTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_RXACT_COMMITTED: WIN32_ERROR = 744u32;$/;"	C
ERROR_RXACT_COMMIT_FAILURE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_RXACT_COMMIT_FAILURE: WIN32_ERROR = 1370u32;$/;"	C
ERROR_RXACT_COMMIT_NECESSARY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_RXACT_COMMIT_NECESSARY: WIN32_ERROR = 678u32;$/;"	C
ERROR_RXACT_INVALID_STATE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_RXACT_INVALID_STATE: WIN32_ERROR = 1369u32;$/;"	C
ERROR_RXACT_STATE_CREATED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_RXACT_STATE_CREATED: WIN32_ERROR = 701u32;$/;"	C
ERROR_SAME_DRIVE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SAME_DRIVE: WIN32_ERROR = 143u32;$/;"	C
ERROR_SAM_INIT_FAILURE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SAM_INIT_FAILURE: WIN32_ERROR = 8541u32;$/;"	C
ERROR_SCOPE_NOT_FOUND	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SCOPE_NOT_FOUND: WIN32_ERROR = 318u32;$/;"	C
ERROR_SCREEN_ALREADY_LOCKED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SCREEN_ALREADY_LOCKED: WIN32_ERROR = 1440u32;$/;"	C
ERROR_SCRUB_DATA_DISABLED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SCRUB_DATA_DISABLED: WIN32_ERROR = 332u32;$/;"	C
ERROR_SECRET_TOO_LONG	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SECRET_TOO_LONG: WIN32_ERROR = 1382u32;$/;"	C
ERROR_SECTION_DIRECT_MAP_ONLY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SECTION_DIRECT_MAP_ONLY: WIN32_ERROR = 819u32;$/;"	C
ERROR_SECTOR_NOT_FOUND	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SECTOR_NOT_FOUND: WIN32_ERROR = 27u32;$/;"	C
ERROR_SECURITY_DENIES_OPERATION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SECURITY_DENIES_OPERATION: WIN32_ERROR = 447u32;$/;"	C
ERROR_SECURITY_STREAM_IS_INCONSISTENT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SECURITY_STREAM_IS_INCONSISTENT: WIN32_ERROR = 306u32;$/;"	C
ERROR_SEEK	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SEEK: WIN32_ERROR = 25u32;$/;"	C
ERROR_SEEK_ON_DEVICE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SEEK_ON_DEVICE: WIN32_ERROR = 132u32;$/;"	C
ERROR_SEGMENT_NOTIFICATION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SEGMENT_NOTIFICATION: WIN32_ERROR = 702u32;$/;"	C
ERROR_SEM_IS_SET	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SEM_IS_SET: WIN32_ERROR = 102u32;$/;"	C
ERROR_SEM_NOT_FOUND	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SEM_NOT_FOUND: WIN32_ERROR = 187u32;$/;"	C
ERROR_SEM_OWNER_DIED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SEM_OWNER_DIED: WIN32_ERROR = 105u32;$/;"	C
ERROR_SEM_TIMEOUT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SEM_TIMEOUT: WIN32_ERROR = 121u32;$/;"	C
ERROR_SEM_USER_LIMIT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SEM_USER_LIMIT: WIN32_ERROR = 106u32;$/;"	C
ERROR_SERIAL_NO_DEVICE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SERIAL_NO_DEVICE: WIN32_ERROR = 1118u32;$/;"	C
ERROR_SERVER_DISABLED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SERVER_DISABLED: WIN32_ERROR = 1341u32;$/;"	C
ERROR_SERVER_HAS_OPEN_HANDLES	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SERVER_HAS_OPEN_HANDLES: WIN32_ERROR = 1811u32;$/;"	C
ERROR_SERVER_NOT_DISABLED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SERVER_NOT_DISABLED: WIN32_ERROR = 1342u32;$/;"	C
ERROR_SERVER_SHUTDOWN_IN_PROGRESS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SERVER_SHUTDOWN_IN_PROGRESS: WIN32_ERROR = 1255u32;$/;"	C
ERROR_SERVER_SID_MISMATCH	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SERVER_SID_MISMATCH: WIN32_ERROR = 628u32;$/;"	C
ERROR_SERVER_TRANSPORT_CONFLICT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SERVER_TRANSPORT_CONFLICT: WIN32_ERROR = 816u32;$/;"	C
ERROR_SERVICE_ALREADY_RUNNING	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SERVICE_ALREADY_RUNNING: WIN32_ERROR = 1056u32;$/;"	C
ERROR_SERVICE_CANNOT_ACCEPT_CTRL	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SERVICE_CANNOT_ACCEPT_CTRL: WIN32_ERROR = 1061u32;$/;"	C
ERROR_SERVICE_DATABASE_LOCKED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SERVICE_DATABASE_LOCKED: WIN32_ERROR = 1055u32;$/;"	C
ERROR_SERVICE_DEPENDENCY_DELETED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SERVICE_DEPENDENCY_DELETED: WIN32_ERROR = 1075u32;$/;"	C
ERROR_SERVICE_DEPENDENCY_FAIL	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SERVICE_DEPENDENCY_FAIL: WIN32_ERROR = 1068u32;$/;"	C
ERROR_SERVICE_DISABLED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SERVICE_DISABLED: WIN32_ERROR = 1058u32;$/;"	C
ERROR_SERVICE_DOES_NOT_EXIST	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SERVICE_DOES_NOT_EXIST: WIN32_ERROR = 1060u32;$/;"	C
ERROR_SERVICE_EXISTS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SERVICE_EXISTS: WIN32_ERROR = 1073u32;$/;"	C
ERROR_SERVICE_LOGON_FAILED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SERVICE_LOGON_FAILED: WIN32_ERROR = 1069u32;$/;"	C
ERROR_SERVICE_MARKED_FOR_DELETE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SERVICE_MARKED_FOR_DELETE: WIN32_ERROR = 1072u32;$/;"	C
ERROR_SERVICE_NEVER_STARTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SERVICE_NEVER_STARTED: WIN32_ERROR = 1077u32;$/;"	C
ERROR_SERVICE_NOTIFICATION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SERVICE_NOTIFICATION: WIN32_ERROR = 716u32;$/;"	C
ERROR_SERVICE_NOTIFY_CLIENT_LAGGING	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SERVICE_NOTIFY_CLIENT_LAGGING: WIN32_ERROR = 1294u32;$/;"	C
ERROR_SERVICE_NOT_ACTIVE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SERVICE_NOT_ACTIVE: WIN32_ERROR = 1062u32;$/;"	C
ERROR_SERVICE_NOT_FOUND	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SERVICE_NOT_FOUND: WIN32_ERROR = 1243u32;$/;"	C
ERROR_SERVICE_NOT_IN_EXE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SERVICE_NOT_IN_EXE: WIN32_ERROR = 1083u32;$/;"	C
ERROR_SERVICE_NO_THREAD	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SERVICE_NO_THREAD: WIN32_ERROR = 1054u32;$/;"	C
ERROR_SERVICE_REQUEST_TIMEOUT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SERVICE_REQUEST_TIMEOUT: WIN32_ERROR = 1053u32;$/;"	C
ERROR_SERVICE_SPECIFIC_ERROR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SERVICE_SPECIFIC_ERROR: WIN32_ERROR = 1066u32;$/;"	C
ERROR_SERVICE_START_HANG	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SERVICE_START_HANG: WIN32_ERROR = 1070u32;$/;"	C
ERROR_SESSION_CREDENTIAL_CONFLICT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SESSION_CREDENTIAL_CONFLICT: WIN32_ERROR = 1219u32;$/;"	C
ERROR_SESSION_KEY_TOO_SHORT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SESSION_KEY_TOO_SHORT: WIN32_ERROR = 501u32;$/;"	C
ERROR_SETCOUNT_ON_BAD_LB	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SETCOUNT_ON_BAD_LB: WIN32_ERROR = 1433u32;$/;"	C
ERROR_SETMARK_DETECTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SETMARK_DETECTED: WIN32_ERROR = 1103u32;$/;"	C
ERROR_SET_CONTEXT_DENIED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SET_CONTEXT_DENIED: WIN32_ERROR = 1660u32;$/;"	C
ERROR_SET_NOT_FOUND	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SET_NOT_FOUND: WIN32_ERROR = 1170u32;$/;"	C
ERROR_SET_POWER_STATE_FAILED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SET_POWER_STATE_FAILED: WIN32_ERROR = 1141u32;$/;"	C
ERROR_SET_POWER_STATE_VETOED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SET_POWER_STATE_VETOED: WIN32_ERROR = 1140u32;$/;"	C
ERROR_SHARED_POLICY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SHARED_POLICY: WIN32_ERROR = 8218u32;$/;"	C
ERROR_SHARING_BUFFER_EXCEEDED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SHARING_BUFFER_EXCEEDED: WIN32_ERROR = 36u32;$/;"	C
ERROR_SHARING_PAUSED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SHARING_PAUSED: WIN32_ERROR = 70u32;$/;"	C
ERROR_SHARING_VIOLATION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SHARING_VIOLATION: WIN32_ERROR = 32u32;$/;"	C
ERROR_SHORT_NAMES_NOT_ENABLED_ON_VOLUME	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SHORT_NAMES_NOT_ENABLED_ON_VOLUME: WIN32_ERROR = 305u32;$/;"	C
ERROR_SHUTDOWN_DISKS_NOT_IN_MAINTENANCE_MODE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SHUTDOWN_DISKS_NOT_IN_MAINTENANCE_MODE: WIN32_ERROR = 1192u32;$/;"	C
ERROR_SHUTDOWN_IN_PROGRESS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SHUTDOWN_IN_PROGRESS: WIN32_ERROR = 1115u32;$/;"	C
ERROR_SHUTDOWN_IS_SCHEDULED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SHUTDOWN_IS_SCHEDULED: WIN32_ERROR = 1190u32;$/;"	C
ERROR_SHUTDOWN_USERS_LOGGED_ON	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SHUTDOWN_USERS_LOGGED_ON: WIN32_ERROR = 1191u32;$/;"	C
ERROR_SIGNAL_PENDING	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SIGNAL_PENDING: WIN32_ERROR = 162u32;$/;"	C
ERROR_SIGNAL_REFUSED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SIGNAL_REFUSED: WIN32_ERROR = 156u32;$/;"	C
ERROR_SINGLE_INSTANCE_APP	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SINGLE_INSTANCE_APP: WIN32_ERROR = 1152u32;$/;"	C
ERROR_SMARTCARD_SUBSYSTEM_FAILURE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SMARTCARD_SUBSYSTEM_FAILURE: WIN32_ERROR = 1264u32;$/;"	C
ERROR_SMB1_NOT_AVAILABLE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SMB1_NOT_AVAILABLE: WIN32_ERROR = 384u32;$/;"	C
ERROR_SMB_GUEST_LOGON_BLOCKED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SMB_GUEST_LOGON_BLOCKED: WIN32_ERROR = 1272u32;$/;"	C
ERROR_SMR_GARBAGE_COLLECTION_REQUIRED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SMR_GARBAGE_COLLECTION_REQUIRED: WIN32_ERROR = 4445u32;$/;"	C
ERROR_SOME_NOT_MAPPED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SOME_NOT_MAPPED: WIN32_ERROR = 1301u32;$/;"	C
ERROR_SOURCE_ELEMENT_EMPTY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SOURCE_ELEMENT_EMPTY: WIN32_ERROR = 1160u32;$/;"	C
ERROR_SPARSE_FILE_NOT_SUPPORTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SPARSE_FILE_NOT_SUPPORTED: WIN32_ERROR = 490u32;$/;"	C
ERROR_SPECIAL_ACCOUNT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SPECIAL_ACCOUNT: WIN32_ERROR = 1371u32;$/;"	C
ERROR_SPECIAL_GROUP	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SPECIAL_GROUP: WIN32_ERROR = 1372u32;$/;"	C
ERROR_SPECIAL_USER	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SPECIAL_USER: WIN32_ERROR = 1373u32;$/;"	C
ERROR_SRC_SRV_DLL_LOAD_FAILED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SRC_SRV_DLL_LOAD_FAILED: WIN32_ERROR = 428u32;$/;"	C
ERROR_STACK_BUFFER_OVERRUN	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_STACK_BUFFER_OVERRUN: WIN32_ERROR = 1282u32;$/;"	C
ERROR_STACK_OVERFLOW	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_STACK_OVERFLOW: WIN32_ERROR = 1001u32;$/;"	C
ERROR_STACK_OVERFLOW_READ	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_STACK_OVERFLOW_READ: WIN32_ERROR = 599u32;$/;"	C
ERROR_STOPPED_ON_SYMLINK	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_STOPPED_ON_SYMLINK: WIN32_ERROR = 681u32;$/;"	C
ERROR_STORAGE_LOST_DATA_PERSISTENCE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_STORAGE_LOST_DATA_PERSISTENCE: WIN32_ERROR = 368u32;$/;"	C
ERROR_STORAGE_RESERVE_ALREADY_EXISTS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_STORAGE_RESERVE_ALREADY_EXISTS: WIN32_ERROR = 418u32;$/;"	C
ERROR_STORAGE_RESERVE_DOES_NOT_EXIST	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_STORAGE_RESERVE_DOES_NOT_EXIST: WIN32_ERROR = 417u32;$/;"	C
ERROR_STORAGE_RESERVE_ID_INVALID	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_STORAGE_RESERVE_ID_INVALID: WIN32_ERROR = 416u32;$/;"	C
ERROR_STORAGE_RESERVE_NOT_EMPTY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_STORAGE_RESERVE_NOT_EMPTY: WIN32_ERROR = 419u32;$/;"	C
ERROR_STORAGE_STACK_ACCESS_DENIED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_STORAGE_STACK_ACCESS_DENIED: WIN32_ERROR = 472u32;$/;"	C
ERROR_STORAGE_TOPOLOGY_ID_MISMATCH	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_STORAGE_TOPOLOGY_ID_MISMATCH: WIN32_ERROR = 345u32;$/;"	C
ERROR_STRICT_CFG_VIOLATION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_STRICT_CFG_VIOLATION: WIN32_ERROR = 1657u32;$/;"	C
ERROR_SUBST_TO_JOIN	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SUBST_TO_JOIN: WIN32_ERROR = 141u32;$/;"	C
ERROR_SUBST_TO_SUBST	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SUBST_TO_SUBST: WIN32_ERROR = 139u32;$/;"	C
ERROR_SUCCESS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SUCCESS: WIN32_ERROR = 0u32;$/;"	C
ERROR_SUCCESS_REBOOT_INITIATED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SUCCESS_REBOOT_INITIATED: WIN32_ERROR = 1641u32;$/;"	C
ERROR_SWAPERROR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SWAPERROR: WIN32_ERROR = 999u32;$/;"	C
ERROR_SYMLINK_CLASS_DISABLED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SYMLINK_CLASS_DISABLED: WIN32_ERROR = 1463u32;$/;"	C
ERROR_SYMLINK_NOT_SUPPORTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SYMLINK_NOT_SUPPORTED: WIN32_ERROR = 1464u32;$/;"	C
ERROR_SYNCHRONIZATION_REQUIRED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SYNCHRONIZATION_REQUIRED: WIN32_ERROR = 569u32;$/;"	C
ERROR_SYNC_FOREGROUND_REFRESH_REQUIRED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SYNC_FOREGROUND_REFRESH_REQUIRED: WIN32_ERROR = 1274u32;$/;"	C
ERROR_SYSTEM_HIVE_TOO_LARGE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SYSTEM_HIVE_TOO_LARGE: WIN32_ERROR = 653u32;$/;"	C
ERROR_SYSTEM_IMAGE_BAD_SIGNATURE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SYSTEM_IMAGE_BAD_SIGNATURE: WIN32_ERROR = 637u32;$/;"	C
ERROR_SYSTEM_POWERSTATE_COMPLEX_TRANSITION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SYSTEM_POWERSTATE_COMPLEX_TRANSITION: WIN32_ERROR = 783u32;$/;"	C
ERROR_SYSTEM_POWERSTATE_TRANSITION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SYSTEM_POWERSTATE_TRANSITION: WIN32_ERROR = 782u32;$/;"	C
ERROR_SYSTEM_PROCESS_TERMINATED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SYSTEM_PROCESS_TERMINATED: WIN32_ERROR = 591u32;$/;"	C
ERROR_SYSTEM_SHUTDOWN	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SYSTEM_SHUTDOWN: WIN32_ERROR = 641u32;$/;"	C
ERROR_SYSTEM_TRACE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_SYSTEM_TRACE: WIN32_ERROR = 150u32;$/;"	C
ERROR_THREAD_1_INACTIVE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_THREAD_1_INACTIVE: WIN32_ERROR = 210u32;$/;"	C
ERROR_THREAD_ALREADY_IN_TASK	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_THREAD_ALREADY_IN_TASK: WIN32_ERROR = 1552u32;$/;"	C
ERROR_THREAD_MODE_ALREADY_BACKGROUND	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_THREAD_MODE_ALREADY_BACKGROUND: WIN32_ERROR = 400u32;$/;"	C
ERROR_THREAD_MODE_NOT_BACKGROUND	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_THREAD_MODE_NOT_BACKGROUND: WIN32_ERROR = 401u32;$/;"	C
ERROR_THREAD_NOT_IN_PROCESS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_THREAD_NOT_IN_PROCESS: WIN32_ERROR = 566u32;$/;"	C
ERROR_THREAD_WAS_SUSPENDED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_THREAD_WAS_SUSPENDED: WIN32_ERROR = 699u32;$/;"	C
ERROR_TIMEOUT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_TIMEOUT: WIN32_ERROR = 1460u32;$/;"	C
ERROR_TIMER_NOT_CANCELED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_TIMER_NOT_CANCELED: WIN32_ERROR = 541u32;$/;"	C
ERROR_TIMER_RESOLUTION_NOT_SET	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_TIMER_RESOLUTION_NOT_SET: WIN32_ERROR = 607u32;$/;"	C
ERROR_TIMER_RESUME_IGNORED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_TIMER_RESUME_IGNORED: WIN32_ERROR = 722u32;$/;"	C
ERROR_TIME_SENSITIVE_THREAD	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_TIME_SENSITIVE_THREAD: WIN32_ERROR = 422u32;$/;"	C
ERROR_TIME_SKEW	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_TIME_SKEW: WIN32_ERROR = 1398u32;$/;"	C
ERROR_TLW_WITH_WSCHILD	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_TLW_WITH_WSCHILD: WIN32_ERROR = 1406u32;$/;"	C
ERROR_TOKEN_ALREADY_IN_USE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_TOKEN_ALREADY_IN_USE: WIN32_ERROR = 1375u32;$/;"	C
ERROR_TOO_MANY_CMDS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_TOO_MANY_CMDS: WIN32_ERROR = 56u32;$/;"	C
ERROR_TOO_MANY_CONTEXT_IDS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_TOO_MANY_CONTEXT_IDS: WIN32_ERROR = 1384u32;$/;"	C
ERROR_TOO_MANY_DESCRIPTORS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_TOO_MANY_DESCRIPTORS: WIN32_ERROR = 331u32;$/;"	C
ERROR_TOO_MANY_LINKS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_TOO_MANY_LINKS: WIN32_ERROR = 1142u32;$/;"	C
ERROR_TOO_MANY_LUIDS_REQUESTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_TOO_MANY_LUIDS_REQUESTED: WIN32_ERROR = 1333u32;$/;"	C
ERROR_TOO_MANY_MODULES	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_TOO_MANY_MODULES: WIN32_ERROR = 214u32;$/;"	C
ERROR_TOO_MANY_MUXWAITERS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_TOO_MANY_MUXWAITERS: WIN32_ERROR = 152u32;$/;"	C
ERROR_TOO_MANY_NAMES	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_TOO_MANY_NAMES: WIN32_ERROR = 68u32;$/;"	C
ERROR_TOO_MANY_OPEN_FILES	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_TOO_MANY_OPEN_FILES: WIN32_ERROR = 4u32;$/;"	C
ERROR_TOO_MANY_POSTS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_TOO_MANY_POSTS: WIN32_ERROR = 298u32;$/;"	C
ERROR_TOO_MANY_SECRETS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_TOO_MANY_SECRETS: WIN32_ERROR = 1381u32;$/;"	C
ERROR_TOO_MANY_SEMAPHORES	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_TOO_MANY_SEMAPHORES: WIN32_ERROR = 100u32;$/;"	C
ERROR_TOO_MANY_SEM_REQUESTS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_TOO_MANY_SEM_REQUESTS: WIN32_ERROR = 103u32;$/;"	C
ERROR_TOO_MANY_SESS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_TOO_MANY_SESS: WIN32_ERROR = 69u32;$/;"	C
ERROR_TOO_MANY_SIDS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_TOO_MANY_SIDS: WIN32_ERROR = 1389u32;$/;"	C
ERROR_TOO_MANY_TCBS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_TOO_MANY_TCBS: WIN32_ERROR = 155u32;$/;"	C
ERROR_TOO_MANY_THREADS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_TOO_MANY_THREADS: WIN32_ERROR = 565u32;$/;"	C
ERROR_TRANSLATION_COMPLETE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_TRANSLATION_COMPLETE: WIN32_ERROR = 757u32;$/;"	C
ERROR_TRUSTED_DOMAIN_FAILURE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_TRUSTED_DOMAIN_FAILURE: WIN32_ERROR = 1788u32;$/;"	C
ERROR_TRUSTED_RELATIONSHIP_FAILURE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_TRUSTED_RELATIONSHIP_FAILURE: WIN32_ERROR = 1789u32;$/;"	C
ERROR_TRUST_FAILURE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_TRUST_FAILURE: WIN32_ERROR = 1790u32;$/;"	C
ERROR_UNABLE_TO_LOCK_MEDIA	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_UNABLE_TO_LOCK_MEDIA: WIN32_ERROR = 1108u32;$/;"	C
ERROR_UNABLE_TO_MOVE_REPLACEMENT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_UNABLE_TO_MOVE_REPLACEMENT: WIN32_ERROR = 1176u32;$/;"	C
ERROR_UNABLE_TO_MOVE_REPLACEMENT_2	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_UNABLE_TO_MOVE_REPLACEMENT_2: WIN32_ERROR = 1177u32;$/;"	C
ERROR_UNABLE_TO_REMOVE_REPLACED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_UNABLE_TO_REMOVE_REPLACED: WIN32_ERROR = 1175u32;$/;"	C
ERROR_UNABLE_TO_UNLOAD_MEDIA	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_UNABLE_TO_UNLOAD_MEDIA: WIN32_ERROR = 1109u32;$/;"	C
ERROR_UNDEFINED_CHARACTER	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_UNDEFINED_CHARACTER: WIN32_ERROR = 583u32;$/;"	C
ERROR_UNDEFINED_SCOPE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_UNDEFINED_SCOPE: WIN32_ERROR = 319u32;$/;"	C
ERROR_UNEXPECTED_MM_CREATE_ERR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_UNEXPECTED_MM_CREATE_ERR: WIN32_ERROR = 556u32;$/;"	C
ERROR_UNEXPECTED_MM_EXTEND_ERR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_UNEXPECTED_MM_EXTEND_ERR: WIN32_ERROR = 558u32;$/;"	C
ERROR_UNEXPECTED_MM_MAP_ERROR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_UNEXPECTED_MM_MAP_ERROR: WIN32_ERROR = 557u32;$/;"	C
ERROR_UNEXPECTED_NTCACHEMANAGER_ERROR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_UNEXPECTED_NTCACHEMANAGER_ERROR: WIN32_ERROR = 443u32;$/;"	C
ERROR_UNEXP_NET_ERR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_UNEXP_NET_ERR: WIN32_ERROR = 59u32;$/;"	C
ERROR_UNHANDLED_EXCEPTION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_UNHANDLED_EXCEPTION: WIN32_ERROR = 574u32;$/;"	C
ERROR_UNIDENTIFIED_ERROR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_UNIDENTIFIED_ERROR: WIN32_ERROR = 1287u32;$/;"	C
ERROR_UNKNOWN_COMPONENT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_UNKNOWN_COMPONENT: WIN32_ERROR = 1607u32;$/;"	C
ERROR_UNKNOWN_FEATURE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_UNKNOWN_FEATURE: WIN32_ERROR = 1606u32;$/;"	C
ERROR_UNKNOWN_PATCH	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_UNKNOWN_PATCH: WIN32_ERROR = 1647u32;$/;"	C
ERROR_UNKNOWN_PORT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_UNKNOWN_PORT: WIN32_ERROR = 1796u32;$/;"	C
ERROR_UNKNOWN_PRINTER_DRIVER	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_UNKNOWN_PRINTER_DRIVER: WIN32_ERROR = 1797u32;$/;"	C
ERROR_UNKNOWN_PRINTPROCESSOR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_UNKNOWN_PRINTPROCESSOR: WIN32_ERROR = 1798u32;$/;"	C
ERROR_UNKNOWN_PRODUCT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_UNKNOWN_PRODUCT: WIN32_ERROR = 1605u32;$/;"	C
ERROR_UNKNOWN_PROPERTY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_UNKNOWN_PROPERTY: WIN32_ERROR = 1608u32;$/;"	C
ERROR_UNKNOWN_REVISION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_UNKNOWN_REVISION: WIN32_ERROR = 1305u32;$/;"	C
ERROR_UNRECOGNIZED_MEDIA	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_UNRECOGNIZED_MEDIA: WIN32_ERROR = 1785u32;$/;"	C
ERROR_UNRECOGNIZED_VOLUME	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_UNRECOGNIZED_VOLUME: WIN32_ERROR = 1005u32;$/;"	C
ERROR_UNSATISFIED_DEPENDENCIES	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_UNSATISFIED_DEPENDENCIES: WIN32_ERROR = 441u32;$/;"	C
ERROR_UNSUPPORTED_COMPRESSION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_UNSUPPORTED_COMPRESSION: WIN32_ERROR = 618u32;$/;"	C
ERROR_UNSUPPORTED_TYPE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_UNSUPPORTED_TYPE: WIN32_ERROR = 1630u32;$/;"	C
ERROR_UNTRUSTED_MOUNT_POINT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_UNTRUSTED_MOUNT_POINT: WIN32_ERROR = 448u32;$/;"	C
ERROR_UNWIND	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_UNWIND: WIN32_ERROR = 542u32;$/;"	C
ERROR_UNWIND_CONSOLIDATE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_UNWIND_CONSOLIDATE: WIN32_ERROR = 684u32;$/;"	C
ERROR_USER_APC	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_USER_APC: WIN32_ERROR = 737u32;$/;"	C
ERROR_USER_DELETE_TRUST_QUOTA_EXCEEDED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_USER_DELETE_TRUST_QUOTA_EXCEEDED: WIN32_ERROR = 1934u32;$/;"	C
ERROR_USER_EXISTS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_USER_EXISTS: WIN32_ERROR = 1316u32;$/;"	C
ERROR_USER_MAPPED_FILE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_USER_MAPPED_FILE: WIN32_ERROR = 1224u32;$/;"	C
ERROR_USER_PROFILE_LOAD	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_USER_PROFILE_LOAD: WIN32_ERROR = 500u32;$/;"	C
ERROR_VALIDATE_CONTINUE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_VALIDATE_CONTINUE: WIN32_ERROR = 625u32;$/;"	C
ERROR_VC_DISCONNECTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_VC_DISCONNECTED: WIN32_ERROR = 240u32;$/;"	C
ERROR_VDM_DISALLOWED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_VDM_DISALLOWED: WIN32_ERROR = 1286u32;$/;"	C
ERROR_VDM_HARD_ERROR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_VDM_HARD_ERROR: WIN32_ERROR = 593u32;$/;"	C
ERROR_VERIFIER_STOP	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_VERIFIER_STOP: WIN32_ERROR = 537u32;$/;"	C
ERROR_VERSION_PARSE_ERROR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_VERSION_PARSE_ERROR: WIN32_ERROR = 777u32;$/;"	C
ERROR_VIRUS_DELETED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_VIRUS_DELETED: WIN32_ERROR = 226u32;$/;"	C
ERROR_VIRUS_INFECTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_VIRUS_INFECTED: WIN32_ERROR = 225u32;$/;"	C
ERROR_VOLSNAP_HIBERNATE_READY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_VOLSNAP_HIBERNATE_READY: WIN32_ERROR = 761u32;$/;"	C
ERROR_VOLSNAP_PREPARE_HIBERNATE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_VOLSNAP_PREPARE_HIBERNATE: WIN32_ERROR = 655u32;$/;"	C
ERROR_VOLUME_MOUNTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_VOLUME_MOUNTED: WIN32_ERROR = 743u32;$/;"	C
ERROR_VOLUME_NOT_CLUSTER_ALIGNED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_VOLUME_NOT_CLUSTER_ALIGNED: WIN32_ERROR = 407u32;$/;"	C
ERROR_VOLUME_NOT_SIS_ENABLED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_VOLUME_NOT_SIS_ENABLED: WIN32_ERROR = 4500u32;$/;"	C
ERROR_VOLUME_NOT_SUPPORTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_VOLUME_NOT_SUPPORTED: WIN32_ERROR = 492u32;$/;"	C
ERROR_VOLUME_NOT_SUPPORT_EFS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_VOLUME_NOT_SUPPORT_EFS: WIN32_ERROR = 6014u32;$/;"	C
ERROR_VOLUME_WRITE_ACCESS_DENIED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_VOLUME_WRITE_ACCESS_DENIED: WIN32_ERROR = 508u32;$/;"	C
ERROR_WAIT_1	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_WAIT_1: WIN32_ERROR = 731u32;$/;"	C
ERROR_WAIT_2	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_WAIT_2: WIN32_ERROR = 732u32;$/;"	C
ERROR_WAIT_3	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_WAIT_3: WIN32_ERROR = 733u32;$/;"	C
ERROR_WAIT_63	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_WAIT_63: WIN32_ERROR = 734u32;$/;"	C
ERROR_WAIT_FOR_OPLOCK	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_WAIT_FOR_OPLOCK: WIN32_ERROR = 765u32;$/;"	C
ERROR_WAIT_NO_CHILDREN	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_WAIT_NO_CHILDREN: WIN32_ERROR = 128u32;$/;"	C
ERROR_WAKE_SYSTEM	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_WAKE_SYSTEM: WIN32_ERROR = 730u32;$/;"	C
ERROR_WAKE_SYSTEM_DEBUGGER	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_WAKE_SYSTEM_DEBUGGER: WIN32_ERROR = 675u32;$/;"	C
ERROR_WAS_LOCKED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_WAS_LOCKED: WIN32_ERROR = 717u32;$/;"	C
ERROR_WAS_UNLOCKED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_WAS_UNLOCKED: WIN32_ERROR = 715u32;$/;"	C
ERROR_WEAK_WHFBKEY_BLOCKED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_WEAK_WHFBKEY_BLOCKED: WIN32_ERROR = 8651u32;$/;"	C
ERROR_WINDOW_NOT_COMBOBOX	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_WINDOW_NOT_COMBOBOX: WIN32_ERROR = 1423u32;$/;"	C
ERROR_WINDOW_NOT_DIALOG	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_WINDOW_NOT_DIALOG: WIN32_ERROR = 1420u32;$/;"	C
ERROR_WINDOW_OF_OTHER_THREAD	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_WINDOW_OF_OTHER_THREAD: WIN32_ERROR = 1408u32;$/;"	C
ERROR_WIP_ENCRYPTION_FAILED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_WIP_ENCRYPTION_FAILED: WIN32_ERROR = 6023u32;$/;"	C
ERROR_WOF_FILE_RESOURCE_TABLE_CORRUPT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_WOF_FILE_RESOURCE_TABLE_CORRUPT: WIN32_ERROR = 4448u32;$/;"	C
ERROR_WOF_WIM_HEADER_CORRUPT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_WOF_WIM_HEADER_CORRUPT: WIN32_ERROR = 4446u32;$/;"	C
ERROR_WOF_WIM_RESOURCE_TABLE_CORRUPT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_WOF_WIM_RESOURCE_TABLE_CORRUPT: WIN32_ERROR = 4447u32;$/;"	C
ERROR_WORKING_SET_QUOTA	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_WORKING_SET_QUOTA: WIN32_ERROR = 1453u32;$/;"	C
ERROR_WOW_ASSERTION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_WOW_ASSERTION: WIN32_ERROR = 670u32;$/;"	C
ERROR_WRITE_FAULT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_WRITE_FAULT: WIN32_ERROR = 29u32;$/;"	C
ERROR_WRITE_PROTECT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_WRITE_PROTECT: WIN32_ERROR = 19u32;$/;"	C
ERROR_WRONG_COMPARTMENT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_WRONG_COMPARTMENT: WIN32_ERROR = 1468u32;$/;"	C
ERROR_WRONG_DISK	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_WRONG_DISK: WIN32_ERROR = 34u32;$/;"	C
ERROR_WRONG_EFS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_WRONG_EFS: WIN32_ERROR = 6005u32;$/;"	C
ERROR_WRONG_PASSWORD	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_WRONG_PASSWORD: WIN32_ERROR = 1323u32;$/;"	C
ERROR_WRONG_TARGET_NAME	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_WRONG_TARGET_NAME: WIN32_ERROR = 1396u32;$/;"	C
ERROR_WX86_ERROR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_WX86_ERROR: WIN32_ERROR = 540u32;$/;"	C
ERROR_WX86_WARNING	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_WX86_WARNING: WIN32_ERROR = 539u32;$/;"	C
ERROR_XMLDSIG_ERROR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_XMLDSIG_ERROR: WIN32_ERROR = 1466u32;$/;"	C
ERROR_XML_PARSE_ERROR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ERROR_XML_PARSE_ERROR: WIN32_ERROR = 1465u32;$/;"	C
ERR_ACCESS_DENIED	$RUST/src/sys/pal/unix/process/zircon.rs	/^pub const ERR_ACCESS_DENIED: zx_status_t = -30;$/;"	C
ERR_ALREADY_BOUND	$RUST/src/sys/pal/unix/process/zircon.rs	/^pub const ERR_ALREADY_BOUND: zx_status_t = -27;$/;"	C
ERR_ALREADY_EXISTS	$RUST/src/sys/pal/unix/process/zircon.rs	/^pub const ERR_ALREADY_EXISTS: zx_status_t = -26;$/;"	C
ERR_APPLE_TV_WATCH_NO_FORK_EXEC	$RUST/src/sys/pal/unix/process/process_unix.rs	/^    const ERR_APPLE_TV_WATCH_NO_FORK_EXEC: Error = io::const_io_error!($/;"	C	implementation:Command
ERR_BAD_HANDLE	$RUST/src/sys/pal/unix/process/zircon.rs	/^pub const ERR_BAD_HANDLE: zx_status_t = -11;$/;"	C
ERR_BAD_PATH	$RUST/src/sys/pal/unix/process/zircon.rs	/^pub const ERR_BAD_PATH: zx_status_t = -50;$/;"	C
ERR_BAD_STATE	$RUST/src/sys/pal/unix/process/zircon.rs	/^pub const ERR_BAD_STATE: zx_status_t = -20;$/;"	C
ERR_BAD_SYSCALL	$RUST/src/sys/pal/unix/process/zircon.rs	/^pub const ERR_BAD_SYSCALL: zx_status_t = -13;$/;"	C
ERR_BUFFER_TOO_SMALL	$RUST/src/sys/pal/unix/process/zircon.rs	/^pub const ERR_BUFFER_TOO_SMALL: zx_status_t = -15;$/;"	C
ERR_CALL_FAILED	$RUST/src/sys/pal/unix/process/zircon.rs	/^pub const ERR_CALL_FAILED: zx_status_t = -5;$/;"	C
ERR_CANCELED	$RUST/src/sys/pal/unix/process/zircon.rs	/^pub const ERR_CANCELED: zx_status_t = -23;$/;"	C
ERR_FILE_BIG	$RUST/src/sys/pal/unix/process/zircon.rs	/^pub const ERR_FILE_BIG: zx_status_t = -53;$/;"	C
ERR_INTERNAL	$RUST/src/sys/pal/unix/process/zircon.rs	/^pub const ERR_INTERNAL: zx_status_t = -1;$/;"	C
ERR_INTERRUPTED_RETRY	$RUST/src/sys/pal/unix/process/zircon.rs	/^pub const ERR_INTERRUPTED_RETRY: zx_status_t = -6;$/;"	C
ERR_INVALID_ARGS	$RUST/src/sys/pal/unix/process/zircon.rs	/^pub const ERR_INVALID_ARGS: zx_status_t = -10;$/;"	C
ERR_IO	$RUST/src/sys/pal/unix/process/zircon.rs	/^pub const ERR_IO: zx_status_t = -40;$/;"	C
ERR_IO_DATA_INTEGRITY	$RUST/src/sys/pal/unix/process/zircon.rs	/^pub const ERR_IO_DATA_INTEGRITY: zx_status_t = -42;$/;"	C
ERR_IO_DATA_LOSS	$RUST/src/sys/pal/unix/process/zircon.rs	/^pub const ERR_IO_DATA_LOSS: zx_status_t = -43;$/;"	C
ERR_IO_REFUSED	$RUST/src/sys/pal/unix/process/zircon.rs	/^pub const ERR_IO_REFUSED: zx_status_t = -41;$/;"	C
ERR_NOT_DIR	$RUST/src/sys/pal/unix/process/zircon.rs	/^pub const ERR_NOT_DIR: zx_status_t = -51;$/;"	C
ERR_NOT_FILE	$RUST/src/sys/pal/unix/process/zircon.rs	/^pub const ERR_NOT_FILE: zx_status_t = -52;$/;"	C
ERR_NOT_FOUND	$RUST/src/sys/pal/unix/process/zircon.rs	/^pub const ERR_NOT_FOUND: zx_status_t = -25;$/;"	C
ERR_NOT_SUPPORTED	$RUST/src/sys/pal/unix/process/zircon.rs	/^pub const ERR_NOT_SUPPORTED: zx_status_t = -2;$/;"	C
ERR_NO_MEMORY	$RUST/src/sys/pal/unix/process/zircon.rs	/^pub const ERR_NO_MEMORY: zx_status_t = -4;$/;"	C
ERR_NO_RESOURCES	$RUST/src/sys/pal/unix/process/zircon.rs	/^pub const ERR_NO_RESOURCES: zx_status_t = -3;$/;"	C
ERR_NO_SPACE	$RUST/src/sys/pal/unix/process/zircon.rs	/^pub const ERR_NO_SPACE: zx_status_t = -54;$/;"	C
ERR_OUT_OF_RANGE	$RUST/src/sys/pal/unix/process/zircon.rs	/^pub const ERR_OUT_OF_RANGE: zx_status_t = -14;$/;"	C
ERR_PEER_CLOSED	$RUST/src/sys/pal/unix/process/zircon.rs	/^pub const ERR_PEER_CLOSED: zx_status_t = -24;$/;"	C
ERR_SHOULD_WAIT	$RUST/src/sys/pal/unix/process/zircon.rs	/^pub const ERR_SHOULD_WAIT: zx_status_t = -22;$/;"	C
ERR_TIMED_OUT	$RUST/src/sys/pal/unix/process/zircon.rs	/^pub const ERR_TIMED_OUT: zx_status_t = -21;$/;"	C
ERR_UNAVAILABLE	$RUST/src/sys/pal/unix/process/zircon.rs	/^pub const ERR_UNAVAILABLE: zx_status_t = -28;$/;"	C
ERR_WRONG_TYPE	$RUST/src/sys/pal/unix/process/zircon.rs	/^pub const ERR_WRONG_TYPE: zx_status_t = -12;$/;"	C
ER_ID	$RUST/src/sys/pal/itron/abi.rs	/^pub type ER_ID = int_t;$/;"	t
EXCEPTION_DISPOSITION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub type EXCEPTION_DISPOSITION = i32;$/;"	t
EXCEPTION_MAXIMUM_PARAMETERS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const EXCEPTION_MAXIMUM_PARAMETERS: u32 = 15u32;$/;"	C
EXCEPTION_RECORD	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub struct EXCEPTION_RECORD {$/;"	s
EXCEPTION_STACK_OVERFLOW	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const EXCEPTION_STACK_OVERFLOW: NTSTATUS = -1073741571i32;$/;"	C
EXE_EXTENSION	$RUST/src/env.rs	/^    pub const EXE_EXTENSION: &str = os::EXE_EXTENSION;$/;"	C	module:consts
EXE_EXTENSION	$RUST/src/sys/pal/hermit/env.rs	/^    pub const EXE_EXTENSION: &str = "";$/;"	C	module:os
EXE_EXTENSION	$RUST/src/sys/pal/sgx/env.rs	/^    pub const EXE_EXTENSION: &str = "sgxs";$/;"	C	module:os
EXE_EXTENSION	$RUST/src/sys/pal/solid/env.rs	/^    pub const EXE_EXTENSION: &str = "";$/;"	C	module:os
EXE_EXTENSION	$RUST/src/sys/pal/uefi/env.rs	/^    pub const EXE_EXTENSION: &str = "efi";$/;"	C	module:os
EXE_EXTENSION	$RUST/src/sys/pal/unix/env.rs	/^    pub const EXE_EXTENSION: &str = "js";$/;"	C	module:os
EXE_EXTENSION	$RUST/src/sys/pal/unsupported/env.rs	/^    pub const EXE_EXTENSION: &str = "";$/;"	C	module:os
EXE_EXTENSION	$RUST/src/sys/pal/wasi/env.rs	/^    pub const EXE_EXTENSION: &str = "wasm";$/;"	C	module:os
EXE_EXTENSION	$RUST/src/sys/pal/wasm/env.rs	/^    pub const EXE_EXTENSION: &str = "wasm";$/;"	C	module:os
EXE_EXTENSION	$RUST/src/sys/pal/windows/env.rs	/^    pub const EXE_EXTENSION: &str = "exe";$/;"	C	module:os
EXE_EXTENSION	$RUST/src/sys/pal/zkvm/env.rs	/^    pub const EXE_EXTENSION: &str = "elf";$/;"	C	module:os
EXE_SUFFIX	$RUST/src/env.rs	/^    pub const EXE_SUFFIX: &str = os::EXE_SUFFIX;$/;"	C	module:consts
EXE_SUFFIX	$RUST/src/sys/pal/hermit/env.rs	/^    pub const EXE_SUFFIX: &str = "";$/;"	C	module:os
EXE_SUFFIX	$RUST/src/sys/pal/sgx/env.rs	/^    pub const EXE_SUFFIX: &str = ".sgxs";$/;"	C	module:os
EXE_SUFFIX	$RUST/src/sys/pal/solid/env.rs	/^    pub const EXE_SUFFIX: &str = "";$/;"	C	module:os
EXE_SUFFIX	$RUST/src/sys/pal/uefi/env.rs	/^    pub const EXE_SUFFIX: &str = ".efi";$/;"	C	module:os
EXE_SUFFIX	$RUST/src/sys/pal/unix/env.rs	/^    pub const EXE_SUFFIX: &str = ".js";$/;"	C	module:os
EXE_SUFFIX	$RUST/src/sys/pal/unsupported/env.rs	/^    pub const EXE_SUFFIX: &str = "";$/;"	C	module:os
EXE_SUFFIX	$RUST/src/sys/pal/wasi/env.rs	/^    pub const EXE_SUFFIX: &str = ".wasm";$/;"	C	module:os
EXE_SUFFIX	$RUST/src/sys/pal/wasm/env.rs	/^    pub const EXE_SUFFIX: &str = ".wasm";$/;"	C	module:os
EXE_SUFFIX	$RUST/src/sys/pal/windows/env.rs	/^    pub const EXE_SUFFIX: &str = ".exe";$/;"	C	module:os
EXE_SUFFIX	$RUST/src/sys/pal/zkvm/env.rs	/^    pub const EXE_SUFFIX: &str = ".elf";$/;"	C	module:os
EXINF	$RUST/src/sys/pal/itron/abi.rs	/^pub type EXINF = isize;$/;"	t
EXIT_BOOT_SERVICE_EVENT	$RUST/src/sys/pal/uefi/mod.rs	/^static EXIT_BOOT_SERVICE_EVENT: AtomicPtr<crate::ffi::c_void> =$/;"	v
EXIT_FAILURE	$RUST/src/sys/pal/windows/c.rs	/^pub const EXIT_FAILURE: u32 = 1;$/;"	C
EXIT_PROCESS_DEBUG_EVENT	$RUST/src/process/tests.rs	/^    const EXIT_PROCESS_DEBUG_EVENT: DWORD = 5;$/;"	C	function:test_creation_flags
EXIT_SUCCESS	$RUST/src/sys/pal/windows/c.rs	/^pub const EXIT_SUCCESS: u32 = 0;$/;"	C
EXTENDED_STARTUPINFO_PRESENT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const EXTENDED_STARTUPINFO_PRESENT: PROCESS_CREATION_FLAGS = 524288u32;$/;"	C
E_BOVR	$RUST/src/sys/pal/itron/abi.rs	/^pub const E_BOVR: ER = -58;$/;"	C
E_CLS	$RUST/src/sys/pal/itron/abi.rs	/^pub const E_CLS: ER = -52;$/;"	C
E_COMM	$RUST/src/sys/pal/itron/abi.rs	/^pub const E_COMM: ER = -65;$/;"	C
E_CTX	$RUST/src/sys/pal/itron/abi.rs	/^pub const E_CTX: ER = -25;$/;"	C
E_DLT	$RUST/src/sys/pal/itron/abi.rs	/^pub const E_DLT: ER = -51;$/;"	C
E_ID	$RUST/src/sys/pal/itron/abi.rs	/^pub const E_ID: ER = -18;$/;"	C
E_ILUSE	$RUST/src/sys/pal/itron/abi.rs	/^pub const E_ILUSE: ER = -28;$/;"	C
E_MACV	$RUST/src/sys/pal/itron/abi.rs	/^pub const E_MACV: ER = -26;$/;"	C
E_NOEXS	$RUST/src/sys/pal/itron/abi.rs	/^pub const E_NOEXS: ER = -42;$/;"	C
E_NOID	$RUST/src/sys/pal/itron/abi.rs	/^pub const E_NOID: ER = -34;$/;"	C
E_NOMEM	$RUST/src/sys/pal/itron/abi.rs	/^pub const E_NOMEM: ER = -33;$/;"	C
E_NORES	$RUST/src/sys/pal/itron/abi.rs	/^pub const E_NORES: ER = -35;$/;"	C
E_NOSPT	$RUST/src/sys/pal/itron/abi.rs	/^pub const E_NOSPT: ER = -9;$/;"	C
E_NOTIMPL	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const E_NOTIMPL: HRESULT = -2147467263i32;$/;"	C
E_OACV	$RUST/src/sys/pal/itron/abi.rs	/^pub const E_OACV: ER = -27;$/;"	C
E_OBJ	$RUST/src/sys/pal/itron/abi.rs	/^pub const E_OBJ: ER = -41;$/;"	C
E_OK	$RUST/src/sys/pal/itron/abi.rs	/^pub const E_OK: ER = 0;$/;"	C
E_PAR	$RUST/src/sys/pal/itron/abi.rs	/^pub const E_PAR: ER = -17;$/;"	C
E_QOVR	$RUST/src/sys/pal/itron/abi.rs	/^pub const E_QOVR: ER = -43;$/;"	C
E_RASTER	$RUST/src/sys/pal/itron/abi.rs	/^pub const E_RASTER: ER = -53;$/;"	C
E_RLWAI	$RUST/src/sys/pal/itron/abi.rs	/^pub const E_RLWAI: ER = -49;$/;"	C
E_RSATR	$RUST/src/sys/pal/itron/abi.rs	/^pub const E_RSATR: ER = -11;$/;"	C
E_RSFN	$RUST/src/sys/pal/itron/abi.rs	/^pub const E_RSFN: ER = -10;$/;"	C
E_SYS	$RUST/src/sys/pal/itron/abi.rs	/^pub const E_SYS: ER = -5;$/;"	C
E_TMOUT	$RUST/src/sys/pal/itron/abi.rs	/^pub const E_TMOUT: ER = -50;$/;"	C
E_WBLK	$RUST/src/sys/pal/itron/abi.rs	/^pub const E_WBLK: ER = -57;$/;"	C
EaSize	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub EaSize: u32,$/;"	m	struct:FILE_ID_BOTH_DIR_INFO
Eax	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub Eax: u32,$/;"	m	struct:CONTEXT
Ebp	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub Ebp: u32,$/;"	m	struct:CONTEXT
Ebx	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub Ebx: u32,$/;"	m	struct:CONTEXT
Ecx	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub Ecx: u32,$/;"	m	struct:CONTEXT
Edi	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub Edi: u32,$/;"	m	struct:CONTEXT
Edx	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub Edx: u32,$/;"	m	struct:CONTEXT
EhFrameFinder	$RUST/src/sys/pal/xous/os.rs	/^    unsafe impl unwind::EhFrameFinder for EhFrameFinder {$/;"	c	module:eh_unwinding
Eip	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub Eip: u32,$/;"	m	struct:CONTEXT
ElapsedMs	$RUST/src/os/xous/services/ticktimer.rs	/^    ElapsedMs,$/;"	e	enum:TicktimerScalar
Empty	$RUST/src/io/util.rs	/^pub struct Empty;$/;"	s
Empty	$RUST/src/sync/mpsc/mod.rs	/^    Empty,$/;"	e	enum:TryRecvError
EncodeWide	$RUST/src/sys_common/wtf8.rs	/^pub struct EncodeWide<'a> {$/;"	s
End	$RUST/src/io/mod.rs	/^    End(#[stable(feature = "rust1", since = "1.0.0")] i64),$/;"	e	enum:SeekFrom
EndOfFile	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub EndOfFile: i64,$/;"	m	struct:FILE_STANDARD_INFO
Ended	$RUST/src/sys/pal/unix/kernel_copy.rs	/^    Ended(u64),$/;"	e	enum:CopyResult
Entry	$RUST/src/collections/hash/map.rs	/^pub enum Entry<'a, K: 'a, V: 'a> {$/;"	g
Entry	$RUST/src/sync/mpmc/waker.rs	/^pub(crate) struct Entry {$/;"	s
EntryReturn	$RUST/src/sys/pal/sgx/abi/mod.rs	/^struct EntryReturn(u64, u64);$/;"	s
Env	$RUST/src/sys/pal/hermit/os.rs	/^pub struct Env {$/;"	s
Env	$RUST/src/sys/pal/sgx/os.rs	/^pub struct Env {$/;"	s
Env	$RUST/src/sys/pal/solid/os.rs	/^pub struct Env {$/;"	s
Env	$RUST/src/sys/pal/teeos/os.rs	/^pub struct Env(!);$/;"	s
Env	$RUST/src/sys/pal/uefi/os.rs	/^pub struct Env(!);$/;"	s
Env	$RUST/src/sys/pal/unix/os.rs	/^pub struct Env {$/;"	s
Env	$RUST/src/sys/pal/unsupported/os.rs	/^pub struct Env(!);$/;"	s
Env	$RUST/src/sys/pal/wasi/os.rs	/^pub struct Env {$/;"	s
Env	$RUST/src/sys/pal/windows/os.rs	/^pub struct Env {$/;"	s
Env	$RUST/src/sys/pal/xous/os.rs	/^pub struct Env(!);$/;"	s
Env	$RUST/src/sys/pal/zkvm/os.rs	/^pub struct Env(!);$/;"	s
EnvIterator	$RUST/src/sys/pal/windows/os.rs	/^struct EnvIterator(c::LPWCH);$/;"	s
EnvKey	$RUST/src/sys/pal/windows/process.rs	/^pub struct EnvKey {$/;"	s
EnvStore	$RUST/src/sys/pal/sgx/os.rs	/^type EnvStore = Mutex<HashMap<OsString, OsString>>;$/;"	t
EnvStrDebug	$RUST/src/sys/pal/hermit/os.rs	/^pub struct EnvStrDebug<'a> {$/;"	s
EnvStrDebug	$RUST/src/sys/pal/sgx/os.rs	/^pub struct EnvStrDebug<'a> {$/;"	s
EnvStrDebug	$RUST/src/sys/pal/solid/os.rs	/^pub struct EnvStrDebug<'a> {$/;"	s
EnvStrDebug	$RUST/src/sys/pal/unix/os.rs	/^pub struct EnvStrDebug<'a> {$/;"	s
EnvStrDebug	$RUST/src/sys/pal/wasi/os.rs	/^pub struct EnvStrDebug<'a> {$/;"	s
EnvStrDebug	$RUST/src/sys/pal/windows/os.rs	/^pub struct EnvStrDebug<'a> {$/;"	s
EqSorted	$RUST/src/collections/hash/map/tests.rs	/^    trait EqSorted: Iterator {$/;"	i	module:test_extract_if
Err	$RUST/src/ffi/os_str.rs	/^    type Err = core::convert::Infallible;$/;"	t	implementation:OsString
Err	$RUST/src/path.rs	/^    type Err = core::convert::Infallible;$/;"	t	implementation:PathBuf
ErrAfterFirstSeekReader	$RUST/src/io/buffered/tests.rs	/^    struct ErrAfterFirstSeekReader {$/;"	s	function:test_buffered_reader_seek_underflow_discard_buffer_between_seeks
Error	$RUST/src/ffi/os_str.rs	/^    type Error = crate::str::Utf8Error;$/;"	t	implementation:str
Error	$RUST/src/io/buffered/mod.rs	/^impl<W> From<IntoInnerError<W>> for Error {$/;"	c
Error	$RUST/src/io/error.rs	/^pub struct Error {$/;"	s
Error	$RUST/src/os/windows/io/handle.rs	/^    type Error = NullHandleError;$/;"	t	implementation:OwnedHandle
Error	$RUST/src/os/xous/ffi/definitions.rs	/^pub enum Error {$/;"	g
Error	$RUST/src/sys/pal/sgx/net.rs	/^    type Error = io::Error;$/;"	t	implementation:LookupHost
Error	$RUST/src/sys/pal/teeos/net.rs	/^    type Error = io::Error;$/;"	t	implementation:LookupHost
Error	$RUST/src/sys/pal/unix/kernel_copy.rs	/^    Error(Error, u64),$/;"	e	enum:CopyResult
Error	$RUST/src/sys/pal/unix/l4re.rs	/^        type Error = io::Error;$/;"	t	implementation:net::LookupHost
Error	$RUST/src/sys/pal/unsupported/net.rs	/^    type Error = io::Error;$/;"	t	implementation:LookupHost
Error	$RUST/src/sys/pal/wasi/net.rs	/^    type Error = io::Error;$/;"	t	implementation:LookupHost
Error	$RUST/src/sys/pal/xous/net/dns.rs	/^    type Error = io::Error;$/;"	t	implementation:LookupHost
Error	$RUST/src/sys_common/net.rs	/^    type Error = io::Error;$/;"	t	implementation:LookupHost
ErrorData	$RUST/src/io/error.rs	/^enum ErrorData<C> {$/;"	g
ErrorKind	$RUST/src/io/error.rs	/^pub enum ErrorKind {$/;"	g
ErrorOffset	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub ErrorOffset: u32,$/;"	m	struct:XSAVE_FORMAT
ErrorOpcode	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub ErrorOpcode: u16,$/;"	m	struct:XSAVE_FORMAT
ErrorSelector	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub ErrorSelector: u32,$/;"	m	struct:FLOATING_SAVE_AREA
Esi	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub Esi: u32,$/;"	m	struct:CONTEXT
Esp	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub Esp: u32,$/;"	m	struct:CONTEXT
ExampleSliceReader	$RUST/src/io/tests.rs	/^struct ExampleSliceReader<'a> {$/;"	s
ExceptionAddress	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub ExceptionAddress: *mut ::core::ffi::c_void,$/;"	m	struct:EXCEPTION_RECORD
ExceptionCode	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub ExceptionCode: NTSTATUS,$/;"	m	struct:EXCEPTION_RECORD
ExceptionCollidedUnwind	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ExceptionCollidedUnwind: EXCEPTION_DISPOSITION = 3i32;$/;"	C
ExceptionContinueExecution	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ExceptionContinueExecution: EXCEPTION_DISPOSITION = 0i32;$/;"	C
ExceptionContinueSearch	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ExceptionContinueSearch: EXCEPTION_DISPOSITION = 1i32;$/;"	C
ExceptionFlags	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub ExceptionFlags: u32,$/;"	m	struct:EXCEPTION_RECORD
ExceptionInformation	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub ExceptionInformation: [usize; 15],$/;"	m	struct:EXCEPTION_RECORD
ExceptionNestedException	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const ExceptionNestedException: EXCEPTION_DISPOSITION = 2i32;$/;"	C
ExceptionRecord	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub ExceptionRecord: *mut EXCEPTION_RECORD,$/;"	m	struct:EXCEPTION_RECORD
ExclusiveState	$RUST/src/sync/once.rs	/^pub(crate) enum ExclusiveState {$/;"	g
ExecutableFileBusy	$RUST/src/io/error.rs	/^    ExecutableFileBusy,$/;"	e	enum:ErrorKind
ExitCode	$RUST/src/os/windows/process.rs	/^impl ExitCodeExt for process::ExitCode {$/;"	c
ExitCode	$RUST/src/process.rs	/^pub struct ExitCode(imp::ExitCode);$/;"	s
ExitCode	$RUST/src/sys/pal/unix/process/process_common.rs	/^pub struct ExitCode(u8);$/;"	s
ExitCode	$RUST/src/sys/pal/unsupported/process.rs	/^pub struct ExitCode(bool);$/;"	s
ExitCode	$RUST/src/sys/pal/windows/process.rs	/^pub struct ExitCode(c::DWORD);$/;"	s
ExitCodeExt	$RUST/src/os/windows/process.rs	/^pub trait ExitCodeExt: Sealed {$/;"	i
ExitProcess	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn ExitProcess(uexitcode: u32) -> !;$/;"	f	signature:(uexitcode: u32) -> !
ExitStatus	$RUST/src/os/unix/process.rs	/^impl ExitStatusExt for process::ExitStatus {$/;"	c
ExitStatus	$RUST/src/os/windows/process.rs	/^impl ExitStatusExt for process::ExitStatus {$/;"	c
ExitStatus	$RUST/src/process.rs	/^pub struct ExitStatus(imp::ExitStatus);$/;"	s
ExitStatus	$RUST/src/sys/pal/unix/process/process_fuchsia.rs	/^pub struct ExitStatus(i64);$/;"	s
ExitStatus	$RUST/src/sys/pal/unix/process/process_unix.rs	/^pub struct ExitStatus(c_int);$/;"	s
ExitStatus	$RUST/src/sys/pal/unix/process/process_unsupported/wait_status.rs	/^pub struct ExitStatus {$/;"	s
ExitStatus	$RUST/src/sys/pal/unix/process/process_vxworks.rs	/^pub struct ExitStatus(c_int);$/;"	s
ExitStatus	$RUST/src/sys/pal/unsupported/process.rs	/^pub struct ExitStatus();$/;"	s
ExitStatus	$RUST/src/sys/pal/windows/process.rs	/^pub struct ExitStatus(c::DWORD);$/;"	s
ExitStatusError	$RUST/src/os/unix/process.rs	/^impl ExitStatusExt for process::ExitStatusError {$/;"	c
ExitStatusError	$RUST/src/process.rs	/^pub struct ExitStatusError(imp::ExitStatusError);$/;"	s
ExitStatusError	$RUST/src/sys/pal/unix/process/process_fuchsia.rs	/^pub struct ExitStatusError(NonZeroI64);$/;"	s
ExitStatusError	$RUST/src/sys/pal/unix/process/process_unix.rs	/^pub struct ExitStatusError(NonZero<c_int>);$/;"	s
ExitStatusError	$RUST/src/sys/pal/unix/process/process_unsupported.rs	/^pub struct ExitStatusError(NonZero<c_int>);$/;"	s
ExitStatusError	$RUST/src/sys/pal/unix/process/process_vxworks.rs	/^pub struct ExitStatusError(NonZero<c_int>);$/;"	s
ExitStatusError	$RUST/src/sys/pal/unsupported/process.rs	/^pub struct ExitStatusError(!);$/;"	s
ExitStatusError	$RUST/src/sys/pal/windows/process.rs	/^pub struct ExitStatusError(c::NonZeroDWORD);$/;"	s
ExitStatusExt	$RUST/src/os/unix/process.rs	/^pub trait ExitStatusExt: Sealed {$/;"	i
ExitStatusExt	$RUST/src/os/windows/process.rs	/^pub trait ExitStatusExt: Sealed {$/;"	i
Explicit	$RUST/src/sys/pal/unix/process/process_common.rs	/^    Explicit(c_int),$/;"	e	enum:ChildStdio
ExtendedRegisters	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub ExtendedRegisters: [u8; 512],$/;"	m	struct:CONTEXT
ExternWeak	$RUST/src/sys/pal/unix/weak.rs	/^pub(crate) struct ExternWeak<F: Copy> {$/;"	s
ExtractIf	$RUST/src/collections/hash/map.rs	/^pub struct ExtractIf<'a, K, V, F>$/;"	s
ExtractIf	$RUST/src/collections/hash/set.rs	/^pub struct ExtractIf<'a, K, F>$/;"	s
FACILITY_CODE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub type FACILITY_CODE = u32;$/;"	t
FACILITY_NT_BIT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FACILITY_NT_BIT: FACILITY_CODE = 268435456u32;$/;"	C
FAILURE	$RUST/src/process.rs	/^    pub const FAILURE: ExitCode = ExitCode(imp::ExitCode::FAILURE);$/;"	C	implementation:ExitCode
FAILURE	$RUST/src/sys/pal/unix/process/process_common.rs	/^    pub const FAILURE: ExitCode = ExitCode(EXIT_FAILURE as _);$/;"	C	implementation:ExitCode
FAILURE	$RUST/src/sys/pal/unsupported/process.rs	/^    pub const FAILURE: ExitCode = ExitCode(true);$/;"	C	implementation:ExitCode
FAILURE	$RUST/src/sys/pal/windows/process.rs	/^    pub const FAILURE: ExitCode = ExitCode(EXIT_FAILURE as _);$/;"	C	implementation:ExitCode
FALSE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FALSE: BOOL = 0i32;$/;"	C
FAMILY	$RUST/src/env.rs	/^    pub const FAMILY: &str = os::FAMILY;$/;"	C	module:consts
FAMILY	$RUST/src/sys/pal/hermit/env.rs	/^    pub const FAMILY: &str = "";$/;"	C	module:os
FAMILY	$RUST/src/sys/pal/sgx/env.rs	/^    pub const FAMILY: &str = "";$/;"	C	module:os
FAMILY	$RUST/src/sys/pal/solid/env.rs	/^    pub const FAMILY: &str = "itron";$/;"	C	module:os
FAMILY	$RUST/src/sys/pal/uefi/env.rs	/^    pub const FAMILY: &str = "";$/;"	C	module:os
FAMILY	$RUST/src/sys/pal/unix/env.rs	/^    pub const FAMILY: &str = "unix";$/;"	C	module:os
FAMILY	$RUST/src/sys/pal/unsupported/env.rs	/^    pub const FAMILY: &str = "";$/;"	C	module:os
FAMILY	$RUST/src/sys/pal/wasi/env.rs	/^    pub const FAMILY: &str = "";$/;"	C	module:os
FAMILY	$RUST/src/sys/pal/wasm/env.rs	/^    pub const FAMILY: &str = "";$/;"	C	module:os
FAMILY	$RUST/src/sys/pal/windows/env.rs	/^    pub const FAMILY: &str = "windows";$/;"	C	module:os
FAMILY	$RUST/src/sys/pal/zkvm/env.rs	/^    pub const FAMILY: &str = "";$/;"	C	module:os
FARPROC	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub type FARPROC = ::core::option::Option<unsafe extern "system" fn() -> isize>;$/;"	t
FAST_FAIL_FATAL_APP_EXIT	$RUST/src/sys/pal/windows/mod.rs	/^    const FAST_FAIL_FATAL_APP_EXIT: usize = 7;$/;"	C	function:abort_internal
FDIO_SPAWN_ACTION_CLONE_FD	$RUST/src/sys/pal/unix/process/zircon.rs	/^pub const FDIO_SPAWN_ACTION_CLONE_FD: u32 = 0x0001;$/;"	C
FDIO_SPAWN_ACTION_TRANSFER_FD	$RUST/src/sys/pal/unix/process/zircon.rs	/^pub const FDIO_SPAWN_ACTION_TRANSFER_FD: u32 = 0x0002;$/;"	C
FDIO_SPAWN_CLONE_ALL	$RUST/src/sys/pal/unix/process/zircon.rs	/^pub const FDIO_SPAWN_CLONE_ALL: u32 = 0xFFFF;$/;"	C
FDIO_SPAWN_CLONE_ENVIRON	$RUST/src/sys/pal/unix/process/zircon.rs	/^pub const FDIO_SPAWN_CLONE_ENVIRON: u32 = 0x0010;$/;"	C
FDIO_SPAWN_CLONE_JOB	$RUST/src/sys/pal/unix/process/zircon.rs	/^pub const FDIO_SPAWN_CLONE_JOB: u32 = 0x0001;$/;"	C
FDIO_SPAWN_CLONE_LDSVC	$RUST/src/sys/pal/unix/process/zircon.rs	/^pub const FDIO_SPAWN_CLONE_LDSVC: u32 = 0x0002;$/;"	C
FDIO_SPAWN_CLONE_NAMESPACE	$RUST/src/sys/pal/unix/process/zircon.rs	/^pub const FDIO_SPAWN_CLONE_NAMESPACE: u32 = 0x0004;$/;"	C
FDIO_SPAWN_CLONE_STDIO	$RUST/src/sys/pal/unix/process/zircon.rs	/^pub const FDIO_SPAWN_CLONE_STDIO: u32 = 0x0008;$/;"	C
FDIO_SPAWN_CLONE_UTC_CLOCK	$RUST/src/sys/pal/unix/process/zircon.rs	/^pub const FDIO_SPAWN_CLONE_UTC_CLOCK: u32 = 0x0020;$/;"	C
FD_SET	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub struct FD_SET {$/;"	s
FILETIME	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub struct FILETIME {$/;"	s
FILETIME	$RUST/src/sys/pal/windows/fs.rs	/^impl fmt::Debug for c::FILETIME {$/;"	c
FILE_ACCESS_RIGHTS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub type FILE_ACCESS_RIGHTS = u32;$/;"	t
FILE_ADD_FILE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_ADD_FILE: FILE_ACCESS_RIGHTS = 2u32;$/;"	C
FILE_ADD_SUBDIRECTORY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_ADD_SUBDIRECTORY: FILE_ACCESS_RIGHTS = 4u32;$/;"	C
FILE_ALLOCATION_INFO	$RUST/src/sys/pal/windows/api.rs	/^unsafe impl SizedSetFileInformation for c::FILE_ALLOCATION_INFO {$/;"	c
FILE_ALLOCATION_INFO	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub struct FILE_ALLOCATION_INFO {$/;"	s
FILE_ALL_ACCESS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_ALL_ACCESS: FILE_ACCESS_RIGHTS = 2032127u32;$/;"	C
FILE_APPEND_DATA	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_APPEND_DATA: FILE_ACCESS_RIGHTS = 4u32;$/;"	C
FILE_ATTRIBUTE_ARCHIVE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_ATTRIBUTE_ARCHIVE: FILE_FLAGS_AND_ATTRIBUTES = 32u32;$/;"	C
FILE_ATTRIBUTE_COMPRESSED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_ATTRIBUTE_COMPRESSED: FILE_FLAGS_AND_ATTRIBUTES = 2048u32;$/;"	C
FILE_ATTRIBUTE_DEVICE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_ATTRIBUTE_DEVICE: FILE_FLAGS_AND_ATTRIBUTES = 64u32;$/;"	C
FILE_ATTRIBUTE_DIRECTORY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_ATTRIBUTE_DIRECTORY: FILE_FLAGS_AND_ATTRIBUTES = 16u32;$/;"	C
FILE_ATTRIBUTE_EA	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_ATTRIBUTE_EA: FILE_FLAGS_AND_ATTRIBUTES = 262144u32;$/;"	C
FILE_ATTRIBUTE_ENCRYPTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_ATTRIBUTE_ENCRYPTED: FILE_FLAGS_AND_ATTRIBUTES = 16384u32;$/;"	C
FILE_ATTRIBUTE_HIDDEN	$RUST/src/fs/tests.rs	/^    const FILE_ATTRIBUTE_HIDDEN: u32 = 2;$/;"	C	function:test_hidden_file_truncation
FILE_ATTRIBUTE_HIDDEN	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_ATTRIBUTE_HIDDEN: FILE_FLAGS_AND_ATTRIBUTES = 2u32;$/;"	C
FILE_ATTRIBUTE_INTEGRITY_STREAM	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_ATTRIBUTE_INTEGRITY_STREAM: FILE_FLAGS_AND_ATTRIBUTES = 32768u32;$/;"	C
FILE_ATTRIBUTE_NORMAL	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_ATTRIBUTE_NORMAL: FILE_FLAGS_AND_ATTRIBUTES = 128u32;$/;"	C
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_ATTRIBUTE_NOT_CONTENT_INDEXED: FILE_FLAGS_AND_ATTRIBUTES = 8192u32;$/;"	C
FILE_ATTRIBUTE_NO_SCRUB_DATA	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_ATTRIBUTE_NO_SCRUB_DATA: FILE_FLAGS_AND_ATTRIBUTES = 131072u32;$/;"	C
FILE_ATTRIBUTE_OFFLINE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_ATTRIBUTE_OFFLINE: FILE_FLAGS_AND_ATTRIBUTES = 4096u32;$/;"	C
FILE_ATTRIBUTE_PINNED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_ATTRIBUTE_PINNED: FILE_FLAGS_AND_ATTRIBUTES = 524288u32;$/;"	C
FILE_ATTRIBUTE_READONLY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_ATTRIBUTE_READONLY: FILE_FLAGS_AND_ATTRIBUTES = 1u32;$/;"	C
FILE_ATTRIBUTE_RECALL_ON_DATA_ACCESS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_ATTRIBUTE_RECALL_ON_DATA_ACCESS: FILE_FLAGS_AND_ATTRIBUTES = 4194304u32;$/;"	C
FILE_ATTRIBUTE_RECALL_ON_OPEN	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_ATTRIBUTE_RECALL_ON_OPEN: FILE_FLAGS_AND_ATTRIBUTES = 262144u32;$/;"	C
FILE_ATTRIBUTE_REPARSE_POINT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_ATTRIBUTE_REPARSE_POINT: FILE_FLAGS_AND_ATTRIBUTES = 1024u32;$/;"	C
FILE_ATTRIBUTE_SPARSE_FILE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_ATTRIBUTE_SPARSE_FILE: FILE_FLAGS_AND_ATTRIBUTES = 512u32;$/;"	C
FILE_ATTRIBUTE_SYSTEM	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_ATTRIBUTE_SYSTEM: FILE_FLAGS_AND_ATTRIBUTES = 4u32;$/;"	C
FILE_ATTRIBUTE_TAG_INFO	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub struct FILE_ATTRIBUTE_TAG_INFO {$/;"	s
FILE_ATTRIBUTE_TEMPORARY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_ATTRIBUTE_TEMPORARY: FILE_FLAGS_AND_ATTRIBUTES = 256u32;$/;"	C
FILE_ATTRIBUTE_UNPINNED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_ATTRIBUTE_UNPINNED: FILE_FLAGS_AND_ATTRIBUTES = 1048576u32;$/;"	C
FILE_ATTRIBUTE_VIRTUAL	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_ATTRIBUTE_VIRTUAL: FILE_FLAGS_AND_ATTRIBUTES = 65536u32;$/;"	C
FILE_BASIC_INFO	$RUST/src/sys/pal/windows/api.rs	/^unsafe impl SizedSetFileInformation for c::FILE_BASIC_INFO {$/;"	c
FILE_BASIC_INFO	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub struct FILE_BASIC_INFO {$/;"	s
FILE_BEGIN	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_BEGIN: SET_FILE_POINTER_MOVE_METHOD = 0u32;$/;"	C
FILE_COMPLETE_IF_OPLOCKED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_COMPLETE_IF_OPLOCKED: NTCREATEFILE_CREATE_OPTIONS = 256u32;$/;"	C
FILE_CONTAINS_EXTENDED_CREATE_INFORMATION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_CONTAINS_EXTENDED_CREATE_INFORMATION: NTCREATEFILE_CREATE_OPTIONS = 268435456u32;$/;"	C
FILE_CREATE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_CREATE: NTCREATEFILE_CREATE_DISPOSITION = 2u32;$/;"	C
FILE_CREATE_PIPE_INSTANCE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_CREATE_PIPE_INSTANCE: FILE_ACCESS_RIGHTS = 4u32;$/;"	C
FILE_CREATE_TREE_CONNECTION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_CREATE_TREE_CONNECTION: NTCREATEFILE_CREATE_OPTIONS = 128u32;$/;"	C
FILE_CREATION_DISPOSITION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub type FILE_CREATION_DISPOSITION = u32;$/;"	t
FILE_CURRENT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_CURRENT: SET_FILE_POINTER_MOVE_METHOD = 1u32;$/;"	C
FILE_DELETE_CHILD	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_DELETE_CHILD: FILE_ACCESS_RIGHTS = 64u32;$/;"	C
FILE_DELETE_ON_CLOSE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_DELETE_ON_CLOSE: NTCREATEFILE_CREATE_OPTIONS = 4096u32;$/;"	C
FILE_DIRECTORY_FILE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_DIRECTORY_FILE: NTCREATEFILE_CREATE_OPTIONS = 1u32;$/;"	C
FILE_DISALLOW_EXCLUSIVE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_DISALLOW_EXCLUSIVE: NTCREATEFILE_CREATE_OPTIONS = 131072u32;$/;"	C
FILE_DISPOSITION_FLAG_DELETE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_DISPOSITION_FLAG_DELETE: FILE_DISPOSITION_INFO_EX_FLAGS = 1u32;$/;"	C
FILE_DISPOSITION_FLAG_DO_NOT_DELETE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_DISPOSITION_FLAG_DO_NOT_DELETE: FILE_DISPOSITION_INFO_EX_FLAGS = 0u32;$/;"	C
FILE_DISPOSITION_FLAG_FORCE_IMAGE_SECTION_CHECK	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_DISPOSITION_FLAG_FORCE_IMAGE_SECTION_CHECK: FILE_DISPOSITION_INFO_EX_FLAGS = 4u32/;"	C
FILE_DISPOSITION_FLAG_IGNORE_READONLY_ATTRIBUTE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_DISPOSITION_FLAG_IGNORE_READONLY_ATTRIBUTE: FILE_DISPOSITION_INFO_EX_FLAGS = 16u3/;"	C
FILE_DISPOSITION_FLAG_ON_CLOSE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_DISPOSITION_FLAG_ON_CLOSE: FILE_DISPOSITION_INFO_EX_FLAGS = 8u32;$/;"	C
FILE_DISPOSITION_FLAG_POSIX_SEMANTICS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_DISPOSITION_FLAG_POSIX_SEMANTICS: FILE_DISPOSITION_INFO_EX_FLAGS = 2u32;$/;"	C
FILE_DISPOSITION_INFO	$RUST/src/sys/pal/windows/api.rs	/^unsafe impl SizedSetFileInformation for c::FILE_DISPOSITION_INFO {$/;"	c
FILE_DISPOSITION_INFO	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub struct FILE_DISPOSITION_INFO {$/;"	s
FILE_DISPOSITION_INFO_EX	$RUST/src/sys/pal/windows/api.rs	/^unsafe impl SizedSetFileInformation for c::FILE_DISPOSITION_INFO_EX {$/;"	c
FILE_DISPOSITION_INFO_EX	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub struct FILE_DISPOSITION_INFO_EX {$/;"	s
FILE_DISPOSITION_INFO_EX_FLAGS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub type FILE_DISPOSITION_INFO_EX_FLAGS = u32;$/;"	t
FILE_END	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_END: SET_FILE_POINTER_MOVE_METHOD = 2u32;$/;"	C
FILE_END_OF_FILE_INFO	$RUST/src/sys/pal/windows/api.rs	/^unsafe impl SizedSetFileInformation for c::FILE_END_OF_FILE_INFO {$/;"	c
FILE_END_OF_FILE_INFO	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub struct FILE_END_OF_FILE_INFO {$/;"	s
FILE_EXECUTE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_EXECUTE: FILE_ACCESS_RIGHTS = 32u32;$/;"	C
FILE_FLAGS_AND_ATTRIBUTES	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub type FILE_FLAGS_AND_ATTRIBUTES = u32;$/;"	t
FILE_FLAG_BACKUP_SEMANTICS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_FLAG_BACKUP_SEMANTICS: FILE_FLAGS_AND_ATTRIBUTES = 33554432u32;$/;"	C
FILE_FLAG_DELETE_ON_CLOSE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_FLAG_DELETE_ON_CLOSE: FILE_FLAGS_AND_ATTRIBUTES = 67108864u32;$/;"	C
FILE_FLAG_FIRST_PIPE_INSTANCE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_FLAG_FIRST_PIPE_INSTANCE: FILE_FLAGS_AND_ATTRIBUTES = 524288u32;$/;"	C
FILE_FLAG_NO_BUFFERING	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_FLAG_NO_BUFFERING: FILE_FLAGS_AND_ATTRIBUTES = 536870912u32;$/;"	C
FILE_FLAG_OPEN_NO_RECALL	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_FLAG_OPEN_NO_RECALL: FILE_FLAGS_AND_ATTRIBUTES = 1048576u32;$/;"	C
FILE_FLAG_OPEN_REPARSE_POINT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_FLAG_OPEN_REPARSE_POINT: FILE_FLAGS_AND_ATTRIBUTES = 2097152u32;$/;"	C
FILE_FLAG_OVERLAPPED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_FLAG_OVERLAPPED: FILE_FLAGS_AND_ATTRIBUTES = 1073741824u32;$/;"	C
FILE_FLAG_POSIX_SEMANTICS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_FLAG_POSIX_SEMANTICS: FILE_FLAGS_AND_ATTRIBUTES = 16777216u32;$/;"	C
FILE_FLAG_RANDOM_ACCESS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_FLAG_RANDOM_ACCESS: FILE_FLAGS_AND_ATTRIBUTES = 268435456u32;$/;"	C
FILE_FLAG_SEQUENTIAL_SCAN	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_FLAG_SEQUENTIAL_SCAN: FILE_FLAGS_AND_ATTRIBUTES = 134217728u32;$/;"	C
FILE_FLAG_SESSION_AWARE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_FLAG_SESSION_AWARE: FILE_FLAGS_AND_ATTRIBUTES = 8388608u32;$/;"	C
FILE_FLAG_WRITE_THROUGH	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_FLAG_WRITE_THROUGH: FILE_FLAGS_AND_ATTRIBUTES = 2147483648u32;$/;"	C
FILE_GENERIC_EXECUTE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_GENERIC_EXECUTE: FILE_ACCESS_RIGHTS = 1179808u32;$/;"	C
FILE_GENERIC_READ	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_GENERIC_READ: FILE_ACCESS_RIGHTS = 1179785u32;$/;"	C
FILE_GENERIC_WRITE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_GENERIC_WRITE: FILE_ACCESS_RIGHTS = 1179926u32;$/;"	C
FILE_ID_BOTH_DIR_INFO	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub struct FILE_ID_BOTH_DIR_INFO {$/;"	s
FILE_INFO_BY_HANDLE_CLASS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub type FILE_INFO_BY_HANDLE_CLASS = i32;$/;"	t
FILE_IO_PRIORITY_HINT_INFO	$RUST/src/sys/pal/windows/api.rs	/^unsafe impl SizedSetFileInformation for c::FILE_IO_PRIORITY_HINT_INFO {$/;"	c
FILE_IO_PRIORITY_HINT_INFO	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub struct FILE_IO_PRIORITY_HINT_INFO {$/;"	s
FILE_LIST_DIRECTORY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_LIST_DIRECTORY: FILE_ACCESS_RIGHTS = 1u32;$/;"	C
FILE_NAME_INFO	$RUST/src/sys/pal/windows/io.rs	/^    struct FILE_NAME_INFO {$/;"	s	function:msys_tty_on
FILE_NAME_NORMALIZED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_NAME_NORMALIZED: GETFINALPATHNAMEBYHANDLE_FLAGS = 0u32;$/;"	C
FILE_NAME_OPENED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_NAME_OPENED: GETFINALPATHNAMEBYHANDLE_FLAGS = 8u32;$/;"	C
FILE_NON_DIRECTORY_FILE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_NON_DIRECTORY_FILE: NTCREATEFILE_CREATE_OPTIONS = 64u32;$/;"	C
FILE_NO_COMPRESSION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_NO_COMPRESSION: NTCREATEFILE_CREATE_OPTIONS = 32768u32;$/;"	C
FILE_NO_EA_KNOWLEDGE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_NO_EA_KNOWLEDGE: NTCREATEFILE_CREATE_OPTIONS = 512u32;$/;"	C
FILE_NO_INTERMEDIATE_BUFFERING	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_NO_INTERMEDIATE_BUFFERING: NTCREATEFILE_CREATE_OPTIONS = 8u32;$/;"	C
FILE_OPEN	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_OPEN: NTCREATEFILE_CREATE_DISPOSITION = 1u32;$/;"	C
FILE_OPEN_BY_FILE_ID	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_OPEN_BY_FILE_ID: NTCREATEFILE_CREATE_OPTIONS = 8192u32;$/;"	C
FILE_OPEN_FOR_BACKUP_INTENT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_OPEN_FOR_BACKUP_INTENT: NTCREATEFILE_CREATE_OPTIONS = 16384u32;$/;"	C
FILE_OPEN_FOR_FREE_SPACE_QUERY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_OPEN_FOR_FREE_SPACE_QUERY: NTCREATEFILE_CREATE_OPTIONS = 8388608u32;$/;"	C
FILE_OPEN_IF	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_OPEN_IF: NTCREATEFILE_CREATE_DISPOSITION = 3u32;$/;"	C
FILE_OPEN_NO_RECALL	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_OPEN_NO_RECALL: NTCREATEFILE_CREATE_OPTIONS = 4194304u32;$/;"	C
FILE_OPEN_REPARSE_POINT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_OPEN_REPARSE_POINT: NTCREATEFILE_CREATE_OPTIONS = 2097152u32;$/;"	C
FILE_OPEN_REQUIRING_OPLOCK	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_OPEN_REQUIRING_OPLOCK: NTCREATEFILE_CREATE_OPTIONS = 65536u32;$/;"	C
FILE_OVERWRITE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_OVERWRITE: NTCREATEFILE_CREATE_DISPOSITION = 4u32;$/;"	C
FILE_OVERWRITE_IF	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_OVERWRITE_IF: NTCREATEFILE_CREATE_DISPOSITION = 5u32;$/;"	C
FILE_RANDOM_ACCESS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_RANDOM_ACCESS: NTCREATEFILE_CREATE_OPTIONS = 2048u32;$/;"	C
FILE_READ_ATTRIBUTES	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_READ_ATTRIBUTES: FILE_ACCESS_RIGHTS = 128u32;$/;"	C
FILE_READ_DATA	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_READ_DATA: FILE_ACCESS_RIGHTS = 1u32;$/;"	C
FILE_READ_EA	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_READ_EA: FILE_ACCESS_RIGHTS = 8u32;$/;"	C
FILE_RESERVE_OPFILTER	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_RESERVE_OPFILTER: NTCREATEFILE_CREATE_OPTIONS = 1048576u32;$/;"	C
FILE_SEQUENTIAL_ONLY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_SEQUENTIAL_ONLY: NTCREATEFILE_CREATE_OPTIONS = 4u32;$/;"	C
FILE_SESSION_AWARE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_SESSION_AWARE: NTCREATEFILE_CREATE_OPTIONS = 262144u32;$/;"	C
FILE_SHARE_DELETE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_SHARE_DELETE: FILE_SHARE_MODE = 4u32;$/;"	C
FILE_SHARE_MODE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub type FILE_SHARE_MODE = u32;$/;"	t
FILE_SHARE_NONE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_SHARE_NONE: FILE_SHARE_MODE = 0u32;$/;"	C
FILE_SHARE_READ	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_SHARE_READ: FILE_SHARE_MODE = 1u32;$/;"	C
FILE_SHARE_WRITE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_SHARE_WRITE: FILE_SHARE_MODE = 2u32;$/;"	C
FILE_STANDARD_INFO	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub struct FILE_STANDARD_INFO {$/;"	s
FILE_SUPERSEDE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_SUPERSEDE: NTCREATEFILE_CREATE_DISPOSITION = 0u32;$/;"	C
FILE_SYNCHRONOUS_IO_ALERT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_SYNCHRONOUS_IO_ALERT: NTCREATEFILE_CREATE_OPTIONS = 16u32;$/;"	C
FILE_SYNCHRONOUS_IO_NONALERT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_SYNCHRONOUS_IO_NONALERT: NTCREATEFILE_CREATE_OPTIONS = 32u32;$/;"	C
FILE_TRAVERSE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_TRAVERSE: FILE_ACCESS_RIGHTS = 32u32;$/;"	C
FILE_TYPE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub type FILE_TYPE = u32;$/;"	t
FILE_TYPE_CHAR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_TYPE_CHAR: FILE_TYPE = 2u32;$/;"	C
FILE_TYPE_DISK	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_TYPE_DISK: FILE_TYPE = 1u32;$/;"	C
FILE_TYPE_PIPE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_TYPE_PIPE: FILE_TYPE = 3u32;$/;"	C
FILE_TYPE_REMOTE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_TYPE_REMOTE: FILE_TYPE = 32768u32;$/;"	C
FILE_TYPE_UNKNOWN	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_TYPE_UNKNOWN: FILE_TYPE = 0u32;$/;"	C
FILE_WRITE_ATTRIBUTES	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_WRITE_ATTRIBUTES: FILE_ACCESS_RIGHTS = 256u32;$/;"	C
FILE_WRITE_DATA	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_WRITE_DATA: FILE_ACCESS_RIGHTS = 2u32;$/;"	C
FILE_WRITE_EA	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_WRITE_EA: FILE_ACCESS_RIGHTS = 16u32;$/;"	C
FILE_WRITE_THROUGH	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FILE_WRITE_THROUGH: NTCREATEFILE_CREATE_OPTIONS = 2u32;$/;"	C
FIONBIO	$RUST/src/sys/pal/solid/abi/sockets.rs	/^pub const FIONBIO: c_long = 0x8008667eu32 as c_long;$/;"	C
FIONBIO	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FIONBIO: i32 = -2147195266i32;$/;"	C
FIRST_PANIC	$RUST/src/panicking.rs	/^        static FIRST_PANIC: AtomicBool = AtomicBool::new(true);$/;"	v	function:default_hook
FLGPTN	$RUST/src/sys/pal/itron/abi.rs	/^pub type FLGPTN = uint_t;$/;"	t
FLOATING_SAVE_AREA	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub struct FLOATING_SAVE_AREA {$/;"	s
FORMAT_MESSAGE_ALLOCATE_BUFFER	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FORMAT_MESSAGE_ALLOCATE_BUFFER: FORMAT_MESSAGE_OPTIONS = 256u32;$/;"	C
FORMAT_MESSAGE_ARGUMENT_ARRAY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FORMAT_MESSAGE_ARGUMENT_ARRAY: FORMAT_MESSAGE_OPTIONS = 8192u32;$/;"	C
FORMAT_MESSAGE_FROM_HMODULE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FORMAT_MESSAGE_FROM_HMODULE: FORMAT_MESSAGE_OPTIONS = 2048u32;$/;"	C
FORMAT_MESSAGE_FROM_STRING	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FORMAT_MESSAGE_FROM_STRING: FORMAT_MESSAGE_OPTIONS = 1024u32;$/;"	C
FORMAT_MESSAGE_FROM_SYSTEM	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FORMAT_MESSAGE_FROM_SYSTEM: FORMAT_MESSAGE_OPTIONS = 4096u32;$/;"	C
FORMAT_MESSAGE_IGNORE_INSERTS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FORMAT_MESSAGE_IGNORE_INSERTS: FORMAT_MESSAGE_OPTIONS = 512u32;$/;"	C
FORMAT_MESSAGE_OPTIONS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub type FORMAT_MESSAGE_OPTIONS = u32;$/;"	t
FREE	$RUST/src/os/xous/ffi/definitions/memoryflags.rs	/^    pub const FREE: Self = Self { bits: 0b0000_0000 };$/;"	C	implementation:MemoryFlags
FREQUENCY	$RUST/src/sys/pal/windows/time.rs	/^        static FREQUENCY: AtomicU64 = AtomicU64::new(0);$/;"	v	function:perf_counter::frequency
FRESH	$RUST/src/thread/local/tests.rs	/^    const FRESH: u8 = 0;$/;"	C	function:join_orders_after_tls_destructors
FRS_ERR_SYSVOL_POPULATE_TIMEOUT	$RUST/src/sys/pal/windows/c.rs	/^pub const FRS_ERR_SYSVOL_POPULATE_TIMEOUT: u32 =$/;"	C
FRS_ERR_SYSVOL_POPULATE_TIMEOUT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FRS_ERR_SYSVOL_POPULATE_TIMEOUT: i32 = 8014i32;$/;"	C
FSCTL_GET_REPARSE_POINT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FSCTL_GET_REPARSE_POINT: u32 = 589992u32;$/;"	C
FSCTL_SET_REPARSE_POINT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FSCTL_SET_REPARSE_POINT: u32 = 589988u32;$/;"	C
FailFlushWriter	$RUST/src/io/buffered/tests.rs	/^    struct FailFlushWriter;$/;"	s	function:dont_panic_in_drop_on_panicked_flush
Fake	$RUST/src/backtrace.rs	/^    Fake,$/;"	e	enum:RawFrame
Fallback	$RUST/src/sys/pal/unix/kernel_copy.rs	/^    Fallback(u64),$/;"	e	enum:CopyResult
FdHandle	$RUST/src/sys/pal/unix/kernel_copy.rs	/^enum FdHandle {$/;"	g
FdMeta	$RUST/src/sys/pal/unix/kernel_copy.rs	/^impl FdMeta {$/;"	c
FifoDescriptor	$RUST/src/sys/pal/sgx/abi/usercalls/alloc.rs	/^unsafe impl<T> UserSafeSized for FifoDescriptor<T> {}$/;"	c
File	$RUST/src/fs.rs	/^pub struct File {$/;"	s
File	$RUST/src/os/fd/owned.rs	/^impl From<OwnedFd> for fs::File {$/;"	c
File	$RUST/src/os/fd/raw.rs	/^impl IntoRawFd for fs::File {$/;"	c
File	$RUST/src/os/unix/fs.rs	/^impl FileExt for fs::File {$/;"	c
File	$RUST/src/os/wasi/fs.rs	/^impl FileExt for fs::File {$/;"	c
File	$RUST/src/os/windows/fs.rs	/^impl FileExt for fs::File {$/;"	c
File	$RUST/src/os/windows/io/handle.rs	/^impl From<OwnedHandle> for fs::File {$/;"	c
File	$RUST/src/os/windows/io/raw.rs	/^impl IntoRawHandle for fs::File {$/;"	c
File	$RUST/src/sys/pal/hermit/fs.rs	/^pub struct File(FileDesc);$/;"	s
File	$RUST/src/sys/pal/solid/fs.rs	/^pub struct File {$/;"	s
File	$RUST/src/sys/pal/unix/fs.rs	/^pub struct File(FileDesc);$/;"	s
File	$RUST/src/sys/pal/unix/kernel_copy.rs	/^impl CopyWrite for File {$/;"	c
File	$RUST/src/sys/pal/unsupported/fs.rs	/^pub struct File(!);$/;"	s
File	$RUST/src/sys/pal/wasi/fs.rs	/^pub struct File {$/;"	s
File	$RUST/src/sys/pal/windows/fs.rs	/^pub struct File {$/;"	s
FileAlignmentInfo	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FileAlignmentInfo: FILE_INFO_BY_HANDLE_CLASS = 17i32;$/;"	C
FileAllocationInfo	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FileAllocationInfo: FILE_INFO_BY_HANDLE_CLASS = 5i32;$/;"	C
FileAttr	$RUST/src/sys/pal/hermit/fs.rs	/^pub struct FileAttr(!);$/;"	s
FileAttr	$RUST/src/sys/pal/solid/fs.rs	/^pub struct FileAttr {$/;"	s
FileAttr	$RUST/src/sys/pal/unix/fs.rs	/^impl FileAttr {$/;"	c
FileAttr	$RUST/src/sys/pal/unsupported/fs.rs	/^pub struct FileAttr(!);$/;"	s
FileAttr	$RUST/src/sys/pal/wasi/fs.rs	/^pub struct FileAttr {$/;"	s
FileAttr	$RUST/src/sys/pal/windows/fs.rs	/^pub struct FileAttr {$/;"	s
FileAttributeTagInfo	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FileAttributeTagInfo: FILE_INFO_BY_HANDLE_CLASS = 9i32;$/;"	C
FileAttributes	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub FileAttributes: u32,$/;"	m	struct:FILE_ID_BOTH_DIR_INFO
FileBasicInfo	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FileBasicInfo: FILE_INFO_BY_HANDLE_CLASS = 0i32;$/;"	C
FileCaseSensitiveInfo	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FileCaseSensitiveInfo: FILE_INFO_BY_HANDLE_CLASS = 23i32;$/;"	C
FileCompressionInfo	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FileCompressionInfo: FILE_INFO_BY_HANDLE_CLASS = 8i32;$/;"	C
FileDesc	$RUST/src/os/linux/process.rs	/^struct FileDesc;$/;"	s
FileDesc	$RUST/src/sys/pal/hermit/fd.rs	/^pub struct FileDesc {$/;"	s
FileDesc	$RUST/src/sys/pal/sgx/fd.rs	/^pub struct FileDesc {$/;"	s
FileDesc	$RUST/src/sys/pal/solid/fs.rs	/^struct FileDesc {$/;"	s
FileDesc	$RUST/src/sys/pal/unix/fd.rs	/^pub struct FileDesc(OwnedFd);$/;"	s
FileDispositionInfo	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FileDispositionInfo: FILE_INFO_BY_HANDLE_CLASS = 4i32;$/;"	C
FileDispositionInfoEx	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FileDispositionInfoEx: FILE_INFO_BY_HANDLE_CLASS = 21i32;$/;"	C
FileEndOfFileInfo	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FileEndOfFileInfo: FILE_INFO_BY_HANDLE_CLASS = 6i32;$/;"	C
FileExt	$RUST/src/os/unix/fs.rs	/^pub trait FileExt {$/;"	i
FileExt	$RUST/src/os/wasi/fs.rs	/^pub trait FileExt {$/;"	i
FileExt	$RUST/src/os/windows/fs.rs	/^pub trait FileExt {$/;"	i
FileFullDirectoryInfo	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FileFullDirectoryInfo: FILE_INFO_BY_HANDLE_CLASS = 14i32;$/;"	C
FileFullDirectoryRestartInfo	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FileFullDirectoryRestartInfo: FILE_INFO_BY_HANDLE_CLASS = 15i32;$/;"	C
FileId	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub FileId: i64,$/;"	m	struct:FILE_ID_BOTH_DIR_INFO
FileIdBothDirectoryInfo	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FileIdBothDirectoryInfo: FILE_INFO_BY_HANDLE_CLASS = 10i32;$/;"	C
FileIdBothDirectoryRestartInfo	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FileIdBothDirectoryRestartInfo: FILE_INFO_BY_HANDLE_CLASS = 11i32;$/;"	C
FileIdExtdDirectoryInfo	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FileIdExtdDirectoryInfo: FILE_INFO_BY_HANDLE_CLASS = 19i32;$/;"	C
FileIdExtdDirectoryRestartInfo	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FileIdExtdDirectoryRestartInfo: FILE_INFO_BY_HANDLE_CLASS = 20i32;$/;"	C
FileIdInfo	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FileIdInfo: FILE_INFO_BY_HANDLE_CLASS = 18i32;$/;"	C
FileIndex	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub FileIndex: u32,$/;"	m	struct:FILE_ID_BOTH_DIR_INFO
FileIoPriorityHintInfo	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FileIoPriorityHintInfo: FILE_INFO_BY_HANDLE_CLASS = 12i32;$/;"	C
FileName	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub FileName: [u16; 1],$/;"	m	struct:FILE_ID_BOTH_DIR_INFO
FileName	$RUST/src/sys/pal/windows/io.rs	/^        FileName: [u16; c::MAX_PATH as usize],$/;"	m	struct:msys_tty_on::FILE_NAME_INFO
FileNameInfo	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FileNameInfo: FILE_INFO_BY_HANDLE_CLASS = 2i32;$/;"	C
FileNameLength	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub FileNameLength: u32,$/;"	m	struct:FILE_ID_BOTH_DIR_INFO
FileNameLength	$RUST/src/sys/pal/windows/io.rs	/^        FileNameLength: u32,$/;"	m	struct:msys_tty_on::FILE_NAME_INFO
FileNormalizedNameInfo	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FileNormalizedNameInfo: FILE_INFO_BY_HANDLE_CLASS = 24i32;$/;"	C
FilePermissions	$RUST/src/sys/pal/hermit/fs.rs	/^pub struct FilePermissions(!);$/;"	s
FilePermissions	$RUST/src/sys/pal/solid/fs.rs	/^pub struct FilePermissions(c_short);$/;"	s
FilePermissions	$RUST/src/sys/pal/unix/fs.rs	/^pub struct FilePermissions {$/;"	s
FilePermissions	$RUST/src/sys/pal/unsupported/fs.rs	/^pub struct FilePermissions(!);$/;"	s
FilePermissions	$RUST/src/sys/pal/wasi/fs.rs	/^pub struct FilePermissions {$/;"	s
FilePermissions	$RUST/src/sys/pal/windows/fs.rs	/^pub struct FilePermissions {$/;"	s
FileRemoteProtocolInfo	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FileRemoteProtocolInfo: FILE_INFO_BY_HANDLE_CLASS = 13i32;$/;"	C
FileRenameInfo	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FileRenameInfo: FILE_INFO_BY_HANDLE_CLASS = 3i32;$/;"	C
FileRenameInfoEx	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FileRenameInfoEx: FILE_INFO_BY_HANDLE_CLASS = 22i32;$/;"	C
FileStandardInfo	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FileStandardInfo: FILE_INFO_BY_HANDLE_CLASS = 1i32;$/;"	C
FileStorageInfo	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FileStorageInfo: FILE_INFO_BY_HANDLE_CLASS = 16i32;$/;"	C
FileStreamInfo	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const FileStreamInfo: FILE_INFO_BY_HANDLE_CLASS = 7i32;$/;"	C
FileTimes	$RUST/src/fs.rs	/^pub struct FileTimes(fs_imp::FileTimes);$/;"	s
FileTimes	$RUST/src/os/ios/fs.rs	/^impl FileTimesExt for fs::FileTimes {$/;"	c
FileTimes	$RUST/src/os/macos/fs.rs	/^impl FileTimesExt for fs::FileTimes {$/;"	c
FileTimes	$RUST/src/os/watchos/fs.rs	/^impl FileTimesExt for fs::FileTimes {$/;"	c
FileTimes	$RUST/src/os/windows/fs.rs	/^impl FileTimesExt for fs::FileTimes {$/;"	c
FileTimes	$RUST/src/sys/pal/hermit/fs.rs	/^pub struct FileTimes {}$/;"	s
FileTimes	$RUST/src/sys/pal/solid/fs.rs	/^pub struct FileTimes {}$/;"	s
FileTimes	$RUST/src/sys/pal/unix/fs.rs	/^pub struct FileTimes {$/;"	s
FileTimes	$RUST/src/sys/pal/unsupported/fs.rs	/^pub struct FileTimes {}$/;"	s
FileTimes	$RUST/src/sys/pal/wasi/fs.rs	/^pub struct FileTimes {$/;"	s
FileTimes	$RUST/src/sys/pal/windows/fs.rs	/^pub struct FileTimes {$/;"	s
FileTimesExt	$RUST/src/os/ios/fs.rs	/^pub trait FileTimesExt: Sealed {$/;"	i
FileTimesExt	$RUST/src/os/macos/fs.rs	/^pub trait FileTimesExt: Sealed {$/;"	i
FileTimesExt	$RUST/src/os/watchos/fs.rs	/^pub trait FileTimesExt: Sealed {$/;"	i
FileTimesExt	$RUST/src/os/windows/fs.rs	/^pub trait FileTimesExt: Sealed {$/;"	i
FileTooLarge	$RUST/src/io/error.rs	/^    FileTooLarge,$/;"	e	enum:ErrorKind
FileType	$RUST/src/fs.rs	/^pub struct FileType(fs_imp::FileType);$/;"	s
FileType	$RUST/src/os/unix/fs.rs	/^impl FileTypeExt for fs::FileType {$/;"	c
FileType	$RUST/src/os/wasi/fs.rs	/^impl FileTypeExt for fs::FileType {$/;"	c
FileType	$RUST/src/os/windows/fs.rs	/^impl Sealed for fs::FileType {}$/;"	c
FileType	$RUST/src/sys/pal/hermit/fs.rs	/^pub struct FileType(!);$/;"	s
FileType	$RUST/src/sys/pal/solid/fs.rs	/^pub struct FileType(c_short);$/;"	s
FileType	$RUST/src/sys/pal/unix/fs.rs	/^pub struct FileType {$/;"	s
FileType	$RUST/src/sys/pal/unsupported/fs.rs	/^pub struct FileType(!);$/;"	s
FileType	$RUST/src/sys/pal/wasi/fs.rs	/^pub struct FileType {$/;"	s
FileType	$RUST/src/sys/pal/windows/fs.rs	/^pub struct FileType {$/;"	s
FileTypeExt	$RUST/src/os/unix/fs.rs	/^pub trait FileTypeExt {$/;"	i
FileTypeExt	$RUST/src/os/wasi/fs.rs	/^pub trait FileTypeExt {$/;"	i
FileTypeExt	$RUST/src/os/windows/fs.rs	/^pub trait FileTypeExt: Sealed {$/;"	i
FilesystemLoop	$RUST/src/io/error.rs	/^    FilesystemLoop,$/;"	e	enum:ErrorKind
FilesystemQuotaExceeded	$RUST/src/io/error.rs	/^    FilesystemQuotaExceeded,$/;"	e	enum:ErrorKind
Filter	$RUST/src/sys/personality/dwarf/eh.rs	/^    Filter(LPad),$/;"	e	enum:EHAction
FindClose	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn FindClose(hfindfile: HANDLE) -> BOOL;$/;"	f	signature:(hfindfile: HANDLE) -> BOOL
FindFirstFileW	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn FindFirstFileW(lpfilename: PCWSTR, lpfindfiledata: *mut WIN32_FIND_DATAW) -> HANDLE;$/;"	f	signature:(lpfilename: PCWSTR, lpfindfiledata: *mut WIN32_FIND_DATAW) -> HANDLE
FindNextFileHandle	$RUST/src/sys/pal/windows/fs.rs	/^unsafe impl Sync for FindNextFileHandle {}$/;"	c
FindNextFileW	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn FindNextFileW(hfindfile: HANDLE, lpfindfiledata: *mut WIN32_FIND_DATAW) -> BOOL;$/;"	f	signature:(hfindfile: HANDLE, lpfindfiledata: *mut WIN32_FIND_DATAW) -> BOOL
Flag	$RUST/src/sync/poison.rs	/^pub struct Flag {$/;"	s
Flags	$RUST/src/sys/pal/windows/c.rs	/^    pub Flags: c_ulong,$/;"	m	struct:SYMBOLIC_LINK_REPARSE_BUFFER
Flags	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub Flags: FILE_DISPOSITION_INFO_EX_FLAGS,$/;"	m	struct:FILE_DISPOSITION_INFO_EX
FloatRegisters	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub FloatRegisters: [M128A; 8],$/;"	m	struct:XSAVE_FORMAT
FloatSave	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub FloatSave: FLOATING_SAVE_AREA,$/;"	m	struct:CONTEXT
Flush	$RUST/src/io/buffered/tests.rs	/^    Flush,$/;"	e	enum:RecordedEvent
FlushFileBuffers	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn FlushFileBuffers(hfile: HANDLE) -> BOOL;$/;"	f	signature:(hfile: HANDLE) -> BOOL
Follow	$RUST/src/sys/pal/windows/fs.rs	/^    Follow = 0,$/;"	e	enum:ReparsePoint
Foo	$RUST/src/collections/hash/set/tests.rs	/^    struct Foo(&'static str, #[allow(dead_code)] i32);$/;"	s	function:test_replace
Foo	$RUST/src/panic/tests.rs	/^struct Foo {$/;"	s
Foo	$RUST/src/sync/lazy_lock/tests.rs	/^    struct Foo(u8);$/;"	s	function:sync_lazy_default
Foo	$RUST/src/sync/mutex/tests.rs	/^    struct Foo(Arc<AtomicUsize>);$/;"	s	function:test_into_inner_drop
Foo	$RUST/src/sync/rwlock/tests.rs	/^    struct Foo(Arc<AtomicUsize>);$/;"	s	function:test_into_inner_drop
Foo	$RUST/src/thread/local/tests.rs	/^    struct Foo(&'static LocalKey<Foo>);$/;"	s	function:states
FormatMessageW	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn FormatMessageW($/;"	f	signature:( dwflags: FORMAT_MESSAGE_OPTIONS, lpsource: *const ::core::ffi::c_void, dwmessageid: u32, dwlanguageid: u32, lpbuffer: PWSTR, nsize: u32, arguments: *const *const i8, ) -> u32
FormatStringPayload	$RUST/src/panicking.rs	/^    unsafe impl<'a> PanicPayload for FormatStringPayload<'a> {$/;"	c	function:begin_panic_handler
Fpcr	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub Fpcr: u32,$/;"	m	struct:CONTEXT
Fpsr	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub Fpsr: u32,$/;"	m	struct:CONTEXT
FreeCondition	$RUST/src/os/xous/services/ticktimer.rs	/^    FreeCondition(usize \/* cookie *\/),$/;"	e	enum:TicktimerScalar
FreeEnvironmentStringsW	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn FreeEnvironmentStringsW(penv: PCWSTR) -> BOOL;$/;"	f	signature:(penv: PCWSTR) -> BOOL
FreeMutex	$RUST/src/os/xous/services/ticktimer.rs	/^    FreeMutex(usize \/* cookie *\/),$/;"	e	enum:TicktimerScalar
FreeOnDrop	$RUST/src/sys/pal/unix/fs.rs	/^    struct FreeOnDrop(copyfile_state_t);$/;"	s	function:copy
FromInner	$RUST/src/sys_common/mod.rs	/^pub trait FromInner<Inner> {$/;"	i
FromRawFd	$RUST/src/os/fd/raw.rs	/^pub trait FromRawFd {$/;"	i
FromRawFd	$RUST/src/os/fortanix_sgx/io.rs	/^pub trait FromRawFd {$/;"	i
FromRawFd	$RUST/src/os/solid/io.rs	/^pub trait FromRawFd {$/;"	i
FromRawHandle	$RUST/src/os/windows/io/raw.rs	/^pub trait FromRawHandle {$/;"	i
FromRawSocket	$RUST/src/os/windows/io/raw.rs	/^pub trait FromRawSocket {$/;"	i
FromSgxResult	$RUST/src/sys/pal/sgx/abi/usercalls/mod.rs	/^pub trait FromSgxResult {$/;"	i
Full	$RUST/src/panic.rs	/^    Full,$/;"	e	enum:BacktraceStyle
Full	$RUST/src/sync/mpsc/mod.rs	/^    Full(#[stable(feature = "rust1", since = "1.0.0")] T),$/;"	e	enum:TrySendError
GENERATIONS	$RUST/src/thread/tests.rs	/^    const GENERATIONS: u32 = 16;$/;"	C	function:test_child_doesnt_ref_parent
GENERIC_ACCESS_RIGHTS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub type GENERIC_ACCESS_RIGHTS = u32;$/;"	t
GENERIC_ALL	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const GENERIC_ALL: GENERIC_ACCESS_RIGHTS = 268435456u32;$/;"	C
GENERIC_EXECUTE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const GENERIC_EXECUTE: GENERIC_ACCESS_RIGHTS = 536870912u32;$/;"	C
GENERIC_READ	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const GENERIC_READ: GENERIC_ACCESS_RIGHTS = 2147483648u32;$/;"	C
GENERIC_WRITE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const GENERIC_WRITE: GENERIC_ACCESS_RIGHTS = 1073741824u32;$/;"	C
GETFINALPATHNAMEBYHANDLE_FLAGS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub type GETFINALPATHNAMEBYHANDLE_FLAGS = u32;$/;"	t
GETRANDOM_UNAVAILABLE	$RUST/src/sys/pal/unix/rand.rs	/^        static GETRANDOM_UNAVAILABLE: AtomicBool = AtomicBool::new(false);$/;"	v	function:imp::getrandom_fill_bytes
GLOBAL_PANIC_COUNT	$RUST/src/panicking.rs	/^    static GLOBAL_PANIC_COUNT: AtomicUsize = AtomicUsize::new(0);$/;"	v	module:panic_count
GRND_INSECURE_AVAILABLE	$RUST/src/sys/pal/unix/rand.rs	/^        static GRND_INSECURE_AVAILABLE: AtomicBool = AtomicBool::new(true);$/;"	v	function:imp::getrandom
GUARD_PAGES	$RUST/src/sys/pal/unix/thread.rs	/^            const GUARD_PAGES: usize = 1;$/;"	C	function:guard::init
GUARD_PAGE_SIZE	$RUST/src/sys/pal/xous/thread.rs	/^pub const GUARD_PAGE_SIZE: usize = 4096;$/;"	C
GUID	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub struct GUID {$/;"	s
GenericError	$RUST/src/error/tests.rs	/^struct GenericError<D> {$/;"	s
GetActiveProcessorCount	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn GetActiveProcessorCount(groupnumber: u16) -> u32;$/;"	f	signature:(groupnumber: u16) -> u32
GetAddress	$RUST/src/sys/pal/xous/net/mod.rs	/^pub struct GetAddress {$/;"	s
GetCommandLineW	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn GetCommandLineW() -> PCWSTR;$/;"	f	signature:() -> PCWSTR
GetConsoleMode	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn GetConsoleMode(hconsolehandle: HANDLE, lpmode: *mut CONSOLE_MODE) -> BOOL;$/;"	f	signature:(hconsolehandle: HANDLE, lpmode: *mut CONSOLE_MODE) -> BOOL
GetCurrentDirectoryW	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn GetCurrentDirectoryW(nbufferlength: u32, lpbuffer: PWSTR) -> u32;$/;"	f	signature:(nbufferlength: u32, lpbuffer: PWSTR) -> u32
GetCurrentProcess	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn GetCurrentProcess() -> HANDLE;$/;"	f	signature:() -> HANDLE
GetCurrentProcessId	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn GetCurrentProcessId() -> u32;$/;"	f	signature:() -> u32
GetCurrentThread	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn GetCurrentThread() -> HANDLE;$/;"	f	signature:() -> HANDLE
GetEnvironmentStringsW	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn GetEnvironmentStringsW() -> PWSTR;$/;"	f	signature:() -> PWSTR
GetEnvironmentVariableW	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn GetEnvironmentVariableW(lpname: PCWSTR, lpbuffer: PWSTR, nsize: u32) -> u32;$/;"	f	signature:(lpname: PCWSTR, lpbuffer: PWSTR, nsize: u32) -> u32
GetExitCodeProcess	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn GetExitCodeProcess(hprocess: HANDLE, lpexitcode: *mut u32) -> BOOL;$/;"	f	signature:(hprocess: HANDLE, lpexitcode: *mut u32) -> BOOL
GetFileAttributesW	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn GetFileAttributesW(lpfilename: PCWSTR) -> u32;$/;"	f	signature:(lpfilename: PCWSTR) -> u32
GetFileInformationByHandle	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn GetFileInformationByHandle($/;"	f	signature:( hfile: HANDLE, lpfileinformation: *mut BY_HANDLE_FILE_INFORMATION, ) -> BOOL
GetFileInformationByHandleEx	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn GetFileInformationByHandleEx($/;"	f	signature:( hfile: HANDLE, fileinformationclass: FILE_INFO_BY_HANDLE_CLASS, lpfileinformation: *mut ::core::ffi::c_void, dwbuffersize: u32, ) -> BOOL
GetFileType	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn GetFileType(hfile: HANDLE) -> FILE_TYPE;$/;"	f	signature:(hfile: HANDLE) -> FILE_TYPE
GetFinalPathNameByHandleW	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn GetFinalPathNameByHandleW($/;"	f	signature:( hfile: HANDLE, lpszfilepath: PWSTR, cchfilepath: u32, dwflags: GETFINALPATHNAMEBYHANDLE_FLAGS, ) -> u32
GetFullPathNameW	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn GetFullPathNameW($/;"	f	signature:( lpfilename: PCWSTR, nbufferlength: u32, lpbuffer: PWSTR, lpfilepart: *mut PWSTR, ) -> u32
GetLastError	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn GetLastError() -> WIN32_ERROR;$/;"	f	signature:() -> WIN32_ERROR
GetModuleFileNameW	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn GetModuleFileNameW(hmodule: HMODULE, lpfilename: PWSTR, nsize: u32) -> u32;$/;"	f	signature:(hmodule: HMODULE, lpfilename: PWSTR, nsize: u32) -> u32
GetModuleHandleA	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn GetModuleHandleA(lpmodulename: PCSTR) -> HMODULE;$/;"	f	signature:(lpmodulename: PCSTR) -> HMODULE
GetModuleHandleW	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn GetModuleHandleW(lpmodulename: PCWSTR) -> HMODULE;$/;"	f	signature:(lpmodulename: PCWSTR) -> HMODULE
GetOverlappedResult	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn GetOverlappedResult($/;"	f	signature:( hfile: HANDLE, lpoverlapped: *const OVERLAPPED, lpnumberofbytestransferred: *mut u32, bwait: BOOL, ) -> BOOL
GetProcAddress	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn GetProcAddress(hmodule: HMODULE, lpprocname: PCSTR) -> FARPROC;$/;"	f	signature:(hmodule: HMODULE, lpprocname: PCSTR) -> FARPROC
GetProcessHeap	$RUST/src/sys/pal/windows/alloc.rs	/^    fn GetProcessHeap() -> c::HANDLE;$/;"	f	signature:() -> c::HANDLE
GetProcessId	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn GetProcessId(process: HANDLE) -> u32;$/;"	f	signature:(process: HANDLE) -> u32
GetStdHandle	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn GetStdHandle(nstdhandle: STD_HANDLE) -> HANDLE;$/;"	f	signature:(nstdhandle: STD_HANDLE) -> HANDLE
GetSystemDirectoryW	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn GetSystemDirectoryW(lpbuffer: PWSTR, usize: u32) -> u32;$/;"	f	signature:(lpbuffer: PWSTR, usize: u32) -> u32
GetSystemInfo	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn GetSystemInfo(lpsysteminfo: *mut SYSTEM_INFO) -> ();$/;"	f	signature:(lpsysteminfo: *mut SYSTEM_INFO) -> ()
GetSystemTimeAsFileTime	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn GetSystemTimeAsFileTime(lpsystemtimeasfiletime: *mut FILETIME) -> ();$/;"	f	signature:(lpsystemtimeasfiletime: *mut FILETIME) -> ()
GetTempPathW	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn GetTempPathW(nbufferlength: u32, lpbuffer: PWSTR) -> u32;$/;"	f	signature:(nbufferlength: u32, lpbuffer: PWSTR) -> u32
GetThreadId	$RUST/src/os/xous/ffi/definitions.rs	/^    GetThreadId = 32,$/;"	e	enum:Syscall
GetUserProfileDirectoryW	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn GetUserProfileDirectoryW($/;"	f	signature:( htoken: HANDLE, lpprofiledir: PWSTR, lpcchsize: *mut u32, ) -> BOOL
GetUtcTimeMs	$RUST/src/os/xous/services/systime.rs	/^    GetUtcTimeMs,$/;"	e	enum:SystimeScalar
GetWindowsDirectoryW	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn GetWindowsDirectoryW(lpbuffer: PWSTR, usize: u32) -> u32;$/;"	f	signature:(lpbuffer: PWSTR, usize: u32) -> u32
Guard	$RUST/src/io/mod.rs	/^struct Guard<'a> {$/;"	s
Guard	$RUST/src/sync/poison.rs	/^pub struct Guard {$/;"	s
Guard	$RUST/src/sys/pal/hermit/thread.rs	/^    pub type Guard = !;$/;"	t	module:guard
Guard	$RUST/src/sys/pal/itron/thread.rs	/^    pub type Guard = !;$/;"	t	module:guard
Guard	$RUST/src/sys/pal/sgx/thread.rs	/^    pub type Guard = !;$/;"	t	module:guard
Guard	$RUST/src/sys/pal/teeos/thread.rs	/^    pub type Guard = Range<usize>;$/;"	t	module:guard
Guard	$RUST/src/sys/pal/unix/thread.rs	/^    pub type Guard = Range<usize>;$/;"	t	module:guard
Guard	$RUST/src/sys/pal/unsupported/thread.rs	/^    pub type Guard = !;$/;"	t	module:guard
Guard	$RUST/src/sys/pal/wasi/thread.rs	/^    pub type Guard = !;$/;"	t	module:guard
Guard	$RUST/src/sys/pal/wasm/atomics/thread.rs	/^    pub type Guard = !;$/;"	t	module:guard
Guard	$RUST/src/sys/pal/windows/thread.rs	/^    pub type Guard = !;$/;"	t	module:guard
Guard	$RUST/src/sys/pal/xous/thread.rs	/^    pub type Guard = !;$/;"	t	module:guard
HANDLE	$RUST/src/os/windows/raw.rs	/^pub type HANDLE = *mut c_void;$/;"	t
HANDLE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub type HANDLE = *mut ::core::ffi::c_void;$/;"	t
HANDLE	$RUST/src/sys/pal/windows/thread_parking.rs	/^    static HANDLE: AtomicPtr<crate::ffi::c_void> = AtomicPtr::new(INVALID);$/;"	v	function:keyed_event_handle
HANDLE_FLAGS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub type HANDLE_FLAGS = u32;$/;"	t
HANDLE_FLAG_INHERIT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const HANDLE_FLAG_INHERIT: HANDLE_FLAGS = 1u32;$/;"	C
HANDLE_FLAG_PROTECT_FROM_CLOSE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const HANDLE_FLAG_PROTECT_FROM_CLOSE: HANDLE_FLAGS = 2u32;$/;"	C
HAS_COPY_FILE_RANGE	$RUST/src/sys/pal/unix/kernel_copy.rs	/^    static HAS_COPY_FILE_RANGE: AtomicU8 = AtomicU8::new(NOT_PROBED);$/;"	v	function:copy_regular_files
HAS_DTORS	$RUST/src/sys/pal/windows/thread_local_key.rs	/^static HAS_DTORS: AtomicBool = AtomicBool::new(false);$/;"	v
HAS_FCLONEFILEAT	$RUST/src/sys/pal/unix/fs.rs	/^    static HAS_FCLONEFILEAT: AtomicBool = AtomicBool::new(true);$/;"	v	function:copy
HAS_SENDFILE	$RUST/src/sys/pal/unix/kernel_copy.rs	/^    static HAS_SENDFILE: AtomicBool = AtomicBool::new(true);$/;"	v	function:sendfile_splice
HAS_SPLICE	$RUST/src/sys/pal/unix/kernel_copy.rs	/^    static HAS_SPLICE: AtomicBool = AtomicBool::new(true);$/;"	v	function:sendfile_splice
HEAP	$RUST/src/sys/pal/windows/alloc.rs	/^static HEAP: AtomicPtr<c_void> = AtomicPtr::new(ptr::null_mut());$/;"	v
HEAP_BASE	$RUST/src/sys/pal/sgx/abi/mem.rs	/^    static HEAP_BASE: u64;$/;"	v
HEAP_SIZE	$RUST/src/sys/pal/sgx/abi/mem.rs	/^    static HEAP_SIZE: usize;$/;"	v
HEAP_ZERO_MEMORY	$RUST/src/sys/pal/windows/alloc.rs	/^const HEAP_ZERO_MEMORY: c::DWORD = 0x00000008;$/;"	C
HIGH_PRIORITY_CLASS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const HIGH_PRIORITY_CLASS: PROCESS_CREATION_FLAGS = 128u32;$/;"	C
HITS	$RUST/src/thread/local/tests.rs	/^    static mut HITS: usize = 0;$/;"	v	function:circular
HMODULE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub type HMODULE = *mut ::core::ffi::c_void;$/;"	t
HOOK	$RUST/src/alloc.rs	/^static HOOK: AtomicPtr<()> = AtomicPtr::new(ptr::null_mut());$/;"	v
HOOK	$RUST/src/panicking.rs	/^static HOOK: RwLock<Hook> = RwLock::new(Hook::Default);$/;"	v
HRESULT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub type HRESULT = i32;$/;"	t
Handle	$RUST/src/sys/pal/unix/process/zircon.rs	/^pub struct Handle {$/;"	s
Handle	$RUST/src/sys/pal/windows/handle.rs	/^pub struct Handle(OwnedHandle);$/;"	s
Handle	$RUST/src/sys/pal/windows/process.rs	/^    Handle(Handle),$/;"	e	enum:Stdio
HandleOrInvalid	$RUST/src/os/windows/io/handle.rs	/^unsafe impl Sync for HandleOrInvalid {}$/;"	c
HandleOrNull	$RUST/src/os/windows/io/handle.rs	/^unsafe impl Sync for HandleOrNull {}$/;"	c
Handler	$RUST/src/sys/pal/unix/stack_overflow.rs	/^pub struct Handler {$/;"	s
Handler	$RUST/src/sys/pal/windows/stack_overflow.rs	/^pub struct Handler;$/;"	s
Handler	$RUST/src/sys/pal/windows/stack_overflow_uwp.rs	/^pub struct Handler;$/;"	s
HashMap	$RUST/src/collections/hash/map.rs	/^pub struct HashMap<K, V, S = RandomState> {$/;"	s
HashMap	$RUST/src/panic.rs	/^impl<K, V, S> UnwindSafe for collections::HashMap<K, V, S>$/;"	c
HashSet	$RUST/src/collections/hash/set.rs	/^pub struct HashSet<T, S = RandomState> {$/;"	s
Hasher	$RUST/src/hash/random.rs	/^    type Hasher = DefaultHasher;$/;"	t	implementation:RandomState
Header	$RUST/src/sys/pal/windows/alloc.rs	/^struct Header(*mut u8);$/;"	s
Header	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub Header: [M128A; 2],$/;"	m	struct:CONTEXT_0_0
HeapAlloc	$RUST/src/sys/pal/windows/alloc.rs	/^    fn HeapAlloc(hHeap: c::HANDLE, dwFlags: c::DWORD, dwBytes: c::SIZE_T) -> c::LPVOID;$/;"	f	signature:(hHeap: c::HANDLE, dwFlags: c::DWORD, dwBytes: c::SIZE_T) -> c::LPVOID
HeapFree	$RUST/src/sys/pal/windows/alloc.rs	/^    fn HeapFree(hHeap: c::HANDLE, dwFlags: c::DWORD, lpMem: c::LPVOID) -> c::BOOL;$/;"	f	signature:(hHeap: c::HANDLE, dwFlags: c::DWORD, lpMem: c::LPVOID) -> c::BOOL
HeapMaximum	$RUST/src/os/xous/ffi/definitions.rs	/^    HeapMaximum = 1,$/;"	e	enum:Limits
HeapReAlloc	$RUST/src/sys/pal/windows/alloc.rs	/^    fn HeapReAlloc($/;"	f	signature:( hHeap: c::HANDLE, dwFlags: c::DWORD, lpMem: c::LPVOID, dwBytes: c::SIZE_T, ) -> c::LPVOID
HeapSize	$RUST/src/os/xous/ffi/definitions.rs	/^    HeapSize = 2,$/;"	e	enum:Limits
High	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub High: i64,$/;"	m	struct:M128A
Hook	$RUST/src/panicking.rs	/^impl Hook {$/;"	c
HostUnreachable	$RUST/src/io/error.rs	/^    HostUnreachable,$/;"	e	enum:ErrorKind
IDLE_PRIORITY_CLASS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const IDLE_PRIORITY_CLASS: PROCESS_CREATION_FLAGS = 64u32;$/;"	C
ID_UNINIT	$RUST/src/sys/pal/itron/spin.rs	/^const ID_UNINIT: usize = 0;$/;"	C
IMAGE_BASE	$RUST/src/sys/pal/sgx/abi/entry.S	/^IMAGE_BASE:$/;"	l
IMAGE_HANDLE	$RUST/src/os/uefi/env.rs	/^static IMAGE_HANDLE: AtomicPtr<c_void> = AtomicPtr::new(crate::ptr::null_mut());$/;"	v
IN6_ADDR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub struct IN6_ADDR {$/;"	s
IN6_ADDR_0	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^impl ::core::marker::Copy for IN6_ADDR_0 {}$/;"	c
INCOMPLETE	$RUST/src/sys_common/once/futex.rs	/^const INCOMPLETE: u32 = 0;$/;"	C
INCOMPLETE	$RUST/src/sys_common/once/queue.rs	/^const INCOMPLETE: usize = 0x0;$/;"	C
INFINITE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const INFINITE: u32 = 4294967295u32;$/;"	C
INHERIT	$RUST/src/sys/pal/unix/mod.rs	/^                pub const INHERIT: u8 = 1;$/;"	C	module:init::reset_sigpipe::sigpipe
INHERIT_CALLER_PRIORITY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const INHERIT_CALLER_PRIORITY: PROCESS_CREATION_FLAGS = 131072u32;$/;"	C
INHERIT_PARENT_AFFINITY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const INHERIT_PARENT_AFFINITY: PROCESS_CREATION_FLAGS = 65536u32;$/;"	C
INIT	$RUST/src/sys/pal/sgx/alloc.rs	/^        static INIT: AtomicBool = AtomicBool::new(false);$/;"	v	method:Sgx::alloc
INIT	$RUST/src/sys_common/thread_local_key.rs	/^pub const INIT: StaticKey = StaticKey::new(None);$/;"	C
INIT_EXPR	$RUST/src/sys/pal/common/thread_local/fast_local.rs	/^            const INIT_EXPR: $t = $init;$/;"	C	function:__getit
INIT_EXPR	$RUST/src/sys/pal/common/thread_local/os_local.rs	/^            const INIT_EXPR: $t = $init;$/;"	C	function:__getit
INIT_EXPR	$RUST/src/sys/pal/common/thread_local/static_local.rs	/^            const INIT_EXPR: $t = $init;$/;"	C	function:__getit
INIT_ONCE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^impl ::core::marker::Copy for INIT_ONCE {}$/;"	c
INIT_ONCE_INIT_FAILED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const INIT_ONCE_INIT_FAILED: u32 = 4u32;$/;"	C
INIT_ONCE_STATIC_INIT	$RUST/src/sys/pal/windows/c.rs	/^pub const INIT_ONCE_STATIC_INIT: INIT_ONCE = INIT_ONCE { Ptr: ptr::null_mut() };$/;"	C
INIT_TABLE_ENTRY	$RUST/src/sys/pal/windows/compat.rs	/^static INIT_TABLE_ENTRY: unsafe extern "C" fn() = init;$/;"	v
INPUT_23076	$RUST/src/net/socket_addr/tests.rs	/^    const INPUT_23076: &str = "1200::AB00:1234::2552:7777:1313:34300";$/;"	C	function:bind_udp_socket_bad
INSTANCE	$RUST/src/io/stdio.rs	/^    static INSTANCE: ReentrantMutex<RefCell<StderrRaw>> =$/;"	v	function:stderr
INTERVALS_PER_SEC	$RUST/src/sys/pal/windows/time.rs	/^const INTERVALS_PER_SEC: u64 = NANOS_PER_SEC \/ 100;$/;"	C
INTERVALS_TO_UNIX_EPOCH	$RUST/src/sys/pal/windows/time.rs	/^const INTERVALS_TO_UNIX_EPOCH: u64 = 11_644_473_600 * INTERVALS_PER_SEC;$/;"	C
INVALID	$RUST/src/sys/pal/windows/thread_parking.rs	/^    const INVALID: c::HANDLE = ptr::invalid_mut(!0);$/;"	C	function:keyed_event_handle
INVALID_ARGUMENT_ERROR	$RUST/src/sys/pal/windows/args.rs	/^    const INVALID_ARGUMENT_ERROR: io::Error =$/;"	C	function:make_bat_command_line
INVALID_FD	$RUST/src/sys/pal/unix/kernel_copy.rs	/^const INVALID_FD: RawFd = -1;$/;"	C
INVALID_FILE_ATTRIBUTES	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const INVALID_FILE_ATTRIBUTES: u32 = 4294967295u32;$/;"	C
INVALID_HANDLE_VALUE	$RUST/src/sys/pal/windows/c.rs	/^pub const INVALID_HANDLE_VALUE: HANDLE = ::core::ptr::invalid_mut(-1i32 as _);$/;"	C
INVALID_SOCKET	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const INVALID_SOCKET: SOCKET = -1i32 as _;$/;"	C
IN_ADDR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub struct IN_ADDR {$/;"	s
IN_ADDR_0	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^impl ::core::marker::Copy for IN_ADDR_0 {}$/;"	c
IN_ADDR_0_0	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub struct IN_ADDR_0_0 {$/;"	s
IN_ADDR_0_1	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub struct IN_ADDR_0_1 {$/;"	s
IO_REPARSE_TAG_MOUNT_POINT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const IO_REPARSE_TAG_MOUNT_POINT: u32 = 2684354563u32;$/;"	C
IO_REPARSE_TAG_SYMLINK	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const IO_REPARSE_TAG_SYMLINK: u32 = 2684354572u32;$/;"	C
IO_STATUS_BLOCK	$RUST/src/sys/pal/windows/c.rs	/^impl IO_STATUS_BLOCK {$/;"	c
IO_STATUS_BLOCK	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub struct IO_STATUS_BLOCK {$/;"	s
IO_STATUS_BLOCK_0	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^impl ::core::marker::Copy for IO_STATUS_BLOCK_0 {}$/;"	c
IPPROTO	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub type IPPROTO = i32;$/;"	t
IPPROTO_AH	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const IPPROTO_AH: IPPROTO = 51i32;$/;"	C
IPPROTO_CBT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const IPPROTO_CBT: IPPROTO = 7i32;$/;"	C
IPPROTO_DSTOPTS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const IPPROTO_DSTOPTS: IPPROTO = 60i32;$/;"	C
IPPROTO_EGP	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const IPPROTO_EGP: IPPROTO = 8i32;$/;"	C
IPPROTO_ESP	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const IPPROTO_ESP: IPPROTO = 50i32;$/;"	C
IPPROTO_FRAGMENT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const IPPROTO_FRAGMENT: IPPROTO = 44i32;$/;"	C
IPPROTO_GGP	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const IPPROTO_GGP: IPPROTO = 3i32;$/;"	C
IPPROTO_HOPOPTS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const IPPROTO_HOPOPTS: IPPROTO = 0i32;$/;"	C
IPPROTO_ICLFXBM	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const IPPROTO_ICLFXBM: IPPROTO = 78i32;$/;"	C
IPPROTO_ICMP	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const IPPROTO_ICMP: IPPROTO = 1i32;$/;"	C
IPPROTO_ICMPV6	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const IPPROTO_ICMPV6: IPPROTO = 58i32;$/;"	C
IPPROTO_IDP	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const IPPROTO_IDP: IPPROTO = 22i32;$/;"	C
IPPROTO_IGMP	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const IPPROTO_IGMP: IPPROTO = 2i32;$/;"	C
IPPROTO_IGP	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const IPPROTO_IGP: IPPROTO = 9i32;$/;"	C
IPPROTO_IP	$RUST/src/sys/pal/solid/abi/sockets.rs	/^pub const IPPROTO_IP: i32 = 0;$/;"	C
IPPROTO_IP	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const IPPROTO_IP: IPPROTO = 0i32;$/;"	C
IPPROTO_IPV4	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const IPPROTO_IPV4: IPPROTO = 4i32;$/;"	C
IPPROTO_IPV6	$RUST/src/sys/pal/solid/abi/sockets.rs	/^pub const IPPROTO_IPV6: i32 = 41;$/;"	C
IPPROTO_IPV6	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const IPPROTO_IPV6: IPPROTO = 41i32;$/;"	C
IPPROTO_L2TP	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const IPPROTO_L2TP: IPPROTO = 115i32;$/;"	C
IPPROTO_MAX	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const IPPROTO_MAX: IPPROTO = 256i32;$/;"	C
IPPROTO_ND	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const IPPROTO_ND: IPPROTO = 77i32;$/;"	C
IPPROTO_NONE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const IPPROTO_NONE: IPPROTO = 59i32;$/;"	C
IPPROTO_PGM	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const IPPROTO_PGM: IPPROTO = 113i32;$/;"	C
IPPROTO_PIM	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const IPPROTO_PIM: IPPROTO = 103i32;$/;"	C
IPPROTO_PUP	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const IPPROTO_PUP: IPPROTO = 12i32;$/;"	C
IPPROTO_RAW	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const IPPROTO_RAW: IPPROTO = 255i32;$/;"	C
IPPROTO_RDP	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const IPPROTO_RDP: IPPROTO = 27i32;$/;"	C
IPPROTO_RESERVED_IPSEC	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const IPPROTO_RESERVED_IPSEC: IPPROTO = 258i32;$/;"	C
IPPROTO_RESERVED_IPSECOFFLOAD	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const IPPROTO_RESERVED_IPSECOFFLOAD: IPPROTO = 259i32;$/;"	C
IPPROTO_RESERVED_MAX	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const IPPROTO_RESERVED_MAX: IPPROTO = 261i32;$/;"	C
IPPROTO_RESERVED_RAW	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const IPPROTO_RESERVED_RAW: IPPROTO = 257i32;$/;"	C
IPPROTO_RESERVED_WNV	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const IPPROTO_RESERVED_WNV: IPPROTO = 260i32;$/;"	C
IPPROTO_RM	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const IPPROTO_RM: IPPROTO = 113i32;$/;"	C
IPPROTO_ROUTING	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const IPPROTO_ROUTING: IPPROTO = 43i32;$/;"	C
IPPROTO_SCTP	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const IPPROTO_SCTP: IPPROTO = 132i32;$/;"	C
IPPROTO_ST	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const IPPROTO_ST: IPPROTO = 5i32;$/;"	C
IPPROTO_TCP	$RUST/src/sys/pal/solid/abi/sockets.rs	/^pub const IPPROTO_TCP: i32 = 6;$/;"	C
IPPROTO_TCP	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const IPPROTO_TCP: IPPROTO = 6i32;$/;"	C
IPPROTO_UDP	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const IPPROTO_UDP: IPPROTO = 17i32;$/;"	C
IPV6_ADD_MEMBERSHIP	$RUST/src/sys/pal/solid/abi/sockets.rs	/^pub const IPV6_ADD_MEMBERSHIP: i32 = 12;$/;"	C
IPV6_ADD_MEMBERSHIP	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const IPV6_ADD_MEMBERSHIP: i32 = 12i32;$/;"	C
IPV6_DROP_MEMBERSHIP	$RUST/src/sys/pal/solid/abi/sockets.rs	/^pub const IPV6_DROP_MEMBERSHIP: i32 = 13;$/;"	C
IPV6_DROP_MEMBERSHIP	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const IPV6_DROP_MEMBERSHIP: i32 = 13i32;$/;"	C
IPV6_MREQ	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub struct IPV6_MREQ {$/;"	s
IPV6_MULTICAST_LOOP	$RUST/src/sys/pal/solid/abi/sockets.rs	/^pub const IPV6_MULTICAST_LOOP: i32 = 19;$/;"	C
IPV6_MULTICAST_LOOP	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const IPV6_MULTICAST_LOOP: i32 = 11i32;$/;"	C
IPV6_V6ONLY	$RUST/src/sys/pal/solid/abi/sockets.rs	/^pub const IPV6_V6ONLY: i32 = 27;$/;"	C
IPV6_V6ONLY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const IPV6_V6ONLY: i32 = 27i32;$/;"	C
IP_ADD_MEMBERSHIP	$RUST/src/sys/pal/solid/abi/sockets.rs	/^pub const IP_ADD_MEMBERSHIP: i32 = 3;$/;"	C
IP_ADD_MEMBERSHIP	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const IP_ADD_MEMBERSHIP: i32 = 12i32;$/;"	C
IP_DROP_MEMBERSHIP	$RUST/src/sys/pal/solid/abi/sockets.rs	/^pub const IP_DROP_MEMBERSHIP: i32 = 4;$/;"	C
IP_DROP_MEMBERSHIP	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const IP_DROP_MEMBERSHIP: i32 = 13i32;$/;"	C
IP_MREQ	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub struct IP_MREQ {$/;"	s
IP_MULTICAST_LOOP	$RUST/src/sys/pal/solid/abi/sockets.rs	/^pub const IP_MULTICAST_LOOP: i32 = 7;$/;"	C
IP_MULTICAST_LOOP	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const IP_MULTICAST_LOOP: i32 = 11i32;$/;"	C
IP_MULTICAST_TTL	$RUST/src/sys/pal/solid/abi/sockets.rs	/^pub const IP_MULTICAST_TTL: i32 = 5;$/;"	C
IP_MULTICAST_TTL	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const IP_MULTICAST_TTL: i32 = 10i32;$/;"	C
IP_TTL	$RUST/src/sys/pal/solid/abi/sockets.rs	/^pub const IP_TTL: i32 = 2;$/;"	C
IP_TTL	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const IP_TTL: i32 = 4i32;$/;"	C
Incoming	$RUST/src/net/tcp.rs	/^pub struct Incoming<'a> {$/;"	s
Incoming	$RUST/src/os/unix/net/listener.rs	/^pub struct Incoming<'a> {$/;"	s
Incomplete	$RUST/src/sync/once.rs	/^    Incomplete,$/;"	e	enum:ExclusiveState
Incomplete	$RUST/src/sys/pal/unsupported/once.rs	/^    Incomplete,$/;"	e	enum:State
IncompleteUtf8	$RUST/src/sys/pal/windows/stdio.rs	/^struct IncompleteUtf8 {$/;"	s
Indented	$RUST/src/error.rs	/^struct Indented<'a, D> {$/;"	s
Infallible	$RUST/src/process.rs	/^impl Termination for Infallible {$/;"	c
Information	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub Information: usize,$/;"	m	struct:IO_STATUS_BLOCK
Inherit	$RUST/src/sys/pal/unix/process/process_common.rs	/^    Inherit,$/;"	e	enum:Stdio
Inherit	$RUST/src/sys/pal/unsupported/process.rs	/^    Inherit,$/;"	e	enum:Stdio
Inherit	$RUST/src/sys/pal/windows/process.rs	/^    Inherit,$/;"	e	enum:Stdio
InheritSpecific	$RUST/src/sys/pal/windows/process.rs	/^    InheritSpecific { from_stdio_id: c::DWORD },$/;"	e	enum:Stdio
InitOnceBeginInitialize	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn InitOnceBeginInitialize($/;"	f	signature:( lpinitonce: *mut INIT_ONCE, dwflags: u32, fpending: *mut BOOL, lpcontext: *mut *mut ::core::ffi::c_void, ) -> BOOL
InitOnceComplete	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn InitOnceComplete($/;"	f	signature:( lpinitonce: *mut INIT_ONCE, dwflags: u32, lpcontext: *const ::core::ffi::c_void, ) -> BOOL
InitializeProcThreadAttributeList	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn InitializeProcThreadAttributeList($/;"	f	signature:( lpattributelist: LPPROC_THREAD_ATTRIBUTE_LIST, dwattributecount: u32, dwflags: u32, lpsize: *mut usize, ) -> BOOL
Inner	$RUST/src/backtrace.rs	/^enum Inner {$/;"	g
Inner	$RUST/src/io/error/repr_unpacked.rs	/^type Inner = ErrorData<Box<Custom>>;$/;"	t
Inner	$RUST/src/sync/mpmc/context.rs	/^struct Inner {$/;"	s
Inner	$RUST/src/sync/mpmc/zero.rs	/^struct Inner {$/;"	s
Inner	$RUST/src/thread/mod.rs	/^struct Inner {$/;"	s
InnerReadDir	$RUST/src/sys/pal/solid/fs.rs	/^struct InnerReadDir {$/;"	s
InnerReadDir	$RUST/src/sys/pal/unix/fs.rs	/^struct InnerReadDir {$/;"	s
Input	$RUST/src/sys/pal/unix/kernel_copy.rs	/^    Input,$/;"	e	enum:FdHandle
Instant	$RUST/src/sys/pal/hermit/time.rs	/^pub struct Instant(Timespec);$/;"	s
Instant	$RUST/src/sys/pal/itron/time.rs	/^pub struct Instant(abi::SYSTIM);$/;"	s
Instant	$RUST/src/sys/pal/sgx/time.rs	/^pub struct Instant(Duration);$/;"	s
Instant	$RUST/src/sys/pal/unix/time.rs	/^pub struct Instant {$/;"	s
Instant	$RUST/src/sys/pal/unsupported/time.rs	/^pub struct Instant(Duration);$/;"	s
Instant	$RUST/src/sys/pal/wasi/time.rs	/^pub struct Instant(Duration);$/;"	s
Instant	$RUST/src/sys/pal/windows/time.rs	/^pub struct Instant {$/;"	s
Instant	$RUST/src/sys/pal/xous/time.rs	/^pub struct Instant(Duration);$/;"	s
Instant	$RUST/src/time.rs	/^pub struct Instant(time::Instant);$/;"	s
Internal	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub Internal: usize,$/;"	m	struct:OVERLAPPED
InternalError	$RUST/src/os/xous/ffi/definitions.rs	/^    InternalError = 14,$/;"	e	enum:Error
InternalHigh	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub InternalHigh: usize,$/;"	m	struct:OVERLAPPED
InterruptInUse	$RUST/src/os/xous/ffi/definitions.rs	/^    InterruptInUse = 6,$/;"	e	enum:Error
InterruptNotFound	$RUST/src/os/xous/ffi/definitions.rs	/^    InterruptNotFound = 5,$/;"	e	enum:Error
Interrupted	$RUST/src/io/error.rs	/^    Interrupted,$/;"	e	enum:ErrorKind
Intersection	$RUST/src/collections/hash/set.rs	/^pub struct Intersection<'a, T: 'a, S: 'a> {$/;"	s
IntoIncoming	$RUST/src/net/tcp.rs	/^pub struct IntoIncoming {$/;"	s
IntoInner	$RUST/src/sys_common/mod.rs	/^pub trait IntoInner<Inner> {$/;"	i
IntoInnerError	$RUST/src/io/buffered/mod.rs	/^pub struct IntoInnerError<W>(W, Error);$/;"	s
IntoIter	$RUST/src/collections/hash/map.rs	/^pub struct IntoIter<K, V> {$/;"	s
IntoIter	$RUST/src/collections/hash/set.rs	/^pub struct IntoIter<K> {$/;"	s
IntoIter	$RUST/src/os/unix/net/listener.rs	/^    type IntoIter = Incoming<'a>;$/;"	t	implementation:UnixListener
IntoIter	$RUST/src/path.rs	/^    type IntoIter = Iter<'a>;$/;"	t	implementation:PathBuf
IntoIter	$RUST/src/sync/mpsc/mod.rs	/^pub struct IntoIter<T> {$/;"	s
IntoKeys	$RUST/src/collections/hash/map.rs	/^pub struct IntoKeys<K, V> {$/;"	s
IntoRawFd	$RUST/src/os/fd/raw.rs	/^pub trait IntoRawFd {$/;"	i
IntoRawFd	$RUST/src/os/solid/io.rs	/^pub trait IntoRawFd {$/;"	i
IntoRawHandle	$RUST/src/os/windows/io/raw.rs	/^pub trait IntoRawHandle {$/;"	i
IntoRawSocket	$RUST/src/os/windows/io/raw.rs	/^pub trait IntoRawSocket {$/;"	i
IntoValues	$RUST/src/collections/hash/map.rs	/^pub struct IntoValues<K, V> {$/;"	s
Invalid	$RUST/src/sys/pal/xous/net/mod.rs	/^    Invalid = 4,$/;"	e	enum:NetError
InvalidData	$RUST/src/io/error.rs	/^    InvalidData,$/;"	e	enum:ErrorKind
InvalidFilename	$RUST/src/io/error.rs	/^    InvalidFilename,$/;"	e	enum:ErrorKind
InvalidHandleError	$RUST/src/os/windows/io/handle.rs	/^pub struct InvalidHandleError(());$/;"	s
InvalidInput	$RUST/src/io/error.rs	/^    InvalidInput,$/;"	e	enum:ErrorKind
InvalidLength	$RUST/src/os/xous/ffi/definitions.rs	/^    InvalidLength,$/;"	e	enum:ServerAddressError
InvalidLimit	$RUST/src/os/xous/ffi/definitions.rs	/^    InvalidLimit = 27,$/;"	e	enum:Error
InvalidPid	$RUST/src/os/xous/ffi/definitions.rs	/^    InvalidPid = 21,$/;"	e	enum:Error
InvalidString	$RUST/src/os/xous/ffi/definitions.rs	/^    InvalidString = 7,$/;"	e	enum:Error
InvalidSyscall	$RUST/src/os/xous/ffi/definitions.rs	/^    InvalidSyscall = 18,$/;"	e	enum:Error
InvalidThread	$RUST/src/os/xous/ffi/definitions.rs	/^    InvalidThread = 20,$/;"	e	enum:Error
InvokeType	$RUST/src/os/xous/ffi/definitions.rs	/^pub(crate) enum InvokeType {$/;"	g
IoResult	$RUST/src/sys/pal/windows/mod.rs	/^trait IoResult<T> {$/;"	i
IoSlice	$RUST/src/io/mod.rs	/^unsafe impl<'a> Sync for IoSlice<'a> {}$/;"	c
IoSlice	$RUST/src/sys/pal/solid/io.rs	/^pub struct IoSlice<'a> {$/;"	s
IoSlice	$RUST/src/sys/pal/unix/io.rs	/^pub struct IoSlice<'a> {$/;"	s
IoSlice	$RUST/src/sys/pal/unsupported/io.rs	/^pub struct IoSlice<'a>(&'a [u8]);$/;"	s
IoSlice	$RUST/src/sys/pal/wasi/io.rs	/^pub struct IoSlice<'a> {$/;"	s
IoSlice	$RUST/src/sys/pal/windows/io.rs	/^pub struct IoSlice<'a> {$/;"	s
IoSliceMut	$RUST/src/io/mod.rs	/^unsafe impl<'a> Sync for IoSliceMut<'a> {}$/;"	c
IoSliceMut	$RUST/src/sys/pal/solid/io.rs	/^pub struct IoSliceMut<'a> {$/;"	s
IoSliceMut	$RUST/src/sys/pal/unix/io.rs	/^pub struct IoSliceMut<'a> {$/;"	s
IoSliceMut	$RUST/src/sys/pal/unsupported/io.rs	/^pub struct IoSliceMut<'a>(&'a mut [u8]);$/;"	s
IoSliceMut	$RUST/src/sys/pal/wasi/io.rs	/^pub struct IoSliceMut<'a> {$/;"	s
IoSliceMut	$RUST/src/sys/pal/windows/io.rs	/^pub struct IoSliceMut<'a> {$/;"	s
Ipv4Addr	$RUST/src/net/ip_addr.rs	/^impl IntoInner<c::in_addr> for Ipv4Addr {$/;"	c
Ipv6Addr	$RUST/src/net/ip_addr.rs	/^impl IntoInner<c::in6_addr> for Ipv6Addr {$/;"	c
IsADirectory	$RUST/src/io/error.rs	/^    IsADirectory,$/;"	e	enum:ErrorKind
IsMinusOne	$RUST/src/sys/pal/solid/net.rs	/^pub trait IsMinusOne {$/;"	i
IsMinusOne	$RUST/src/sys/pal/teeos/mod.rs	/^pub trait IsMinusOne {$/;"	i
IsMinusOne	$RUST/src/sys/pal/unix/mod.rs	/^pub trait IsMinusOne {$/;"	i
IsMinusOne	$RUST/src/sys/pal/wasi/os.rs	/^pub trait IsMinusOne {$/;"	i
IsMinusOne	$RUST/src/sys/pal/windows/net.rs	/^pub trait IsMinusOne {$/;"	i
IsNegative	$RUST/src/sys/pal/hermit/mod.rs	/^pub trait IsNegative {$/;"	i
IsTerminal	$RUST/src/io/stdio.rs	/^pub trait IsTerminal: crate::sealed::Sealed {$/;"	i
IsZero	$RUST/src/sys/pal/windows/mod.rs	/^pub trait IsZero {$/;"	i
Item	$RUST/src/collections/hash/map.rs	/^    type Item = V;$/;"	t	implementation:IntoValues
Item	$RUST/src/collections/hash/set.rs	/^    type Item = T;$/;"	t	implementation:HashSet
Item	$RUST/src/env.rs	/^    type Item = String;$/;"	t	implementation:Args
Item	$RUST/src/fs.rs	/^    type Item = io::Result<DirEntry>;$/;"	t	implementation:ReadDir
Item	$RUST/src/io/mod.rs	/^    type Item = Result<u8>;$/;"	t	implementation:Bytes
Item	$RUST/src/net/tcp.rs	/^    type Item = io::Result<TcpStream>;$/;"	t	implementation:IntoIncoming
Item	$RUST/src/os/unix/net/ancillary.rs	/^    type Item = T;$/;"	t	implementation:AncillaryDataIter
Item	$RUST/src/os/unix/net/listener.rs	/^    type Item = io::Result<UnixStream>;$/;"	t	implementation:UnixListener
Item	$RUST/src/path.rs	/^    type Item = Component<'a>;$/;"	t	implementation:Components
Item	$RUST/src/process.rs	/^    type Item = &'a OsStr;$/;"	t	implementation:CommandArgs
Item	$RUST/src/sync/mpsc/mod.rs	/^    type Item = T;$/;"	t	implementation:TryIter
Item	$RUST/src/sys/pal/hermit/args.rs	/^    type Item = OsString;$/;"	t	implementation:Args
Item	$RUST/src/sys/pal/hermit/fs.rs	/^    type Item = io::Result<DirEntry>;$/;"	t	implementation:ReadDir
Item	$RUST/src/sys/pal/hermit/os.rs	/^    type Item = PathBuf;$/;"	t	implementation:SplitPaths
Item	$RUST/src/sys/pal/sgx/abi/tls/sync_bitset.rs	/^    type Item = usize;$/;"	t	implementation:SyncBitsetIter
Item	$RUST/src/sys/pal/sgx/abi/usercalls/alloc.rs	/^    type Item = &'a mut UserRef<T>;$/;"	t	implementation:IterMut
Item	$RUST/src/sys/pal/sgx/args.rs	/^    type Item = OsString;$/;"	t	implementation:Args
Item	$RUST/src/sys/pal/sgx/net.rs	/^    type Item = SocketAddr;$/;"	t	implementation:LookupHost
Item	$RUST/src/sys/pal/sgx/os.rs	/^    type Item = PathBuf;$/;"	t	implementation:SplitPaths
Item	$RUST/src/sys/pal/solid/fs.rs	/^    type Item = io::Result<DirEntry>;$/;"	t	implementation:ReadDir
Item	$RUST/src/sys/pal/solid/os.rs	/^    type Item = PathBuf;$/;"	t	implementation:SplitPaths
Item	$RUST/src/sys/pal/teeos/net.rs	/^    type Item = SocketAddr;$/;"	t	implementation:LookupHost
Item	$RUST/src/sys/pal/teeos/os.rs	/^    type Item = PathBuf;$/;"	t	implementation:SplitPaths
Item	$RUST/src/sys/pal/uefi/args.rs	/^    type Item = OsString;$/;"	t	implementation:Args
Item	$RUST/src/sys/pal/uefi/os.rs	/^    type Item = PathBuf;$/;"	t	implementation:SplitPaths
Item	$RUST/src/sys/pal/unix/args.rs	/^    type Item = OsString;$/;"	t	implementation:Args
Item	$RUST/src/sys/pal/unix/fs.rs	/^    type Item = io::Result<DirEntry>;$/;"	t	implementation:ReadDir
Item	$RUST/src/sys/pal/unix/l4re.rs	/^        type Item = SocketAddr;$/;"	t	implementation:net::LookupHost
Item	$RUST/src/sys/pal/unix/os.rs	/^    type Item = PathBuf;$/;"	t	implementation:SplitPaths
Item	$RUST/src/sys/pal/unix/process/process_common.rs	/^    type Item = &'a OsStr;$/;"	t	implementation:CommandArgs
Item	$RUST/src/sys/pal/unsupported/args.rs	/^    type Item = OsString;$/;"	t	implementation:Args
Item	$RUST/src/sys/pal/unsupported/fs.rs	/^    type Item = io::Result<DirEntry>;$/;"	t	implementation:ReadDir
Item	$RUST/src/sys/pal/unsupported/net.rs	/^    type Item = SocketAddr;$/;"	t	implementation:LookupHost
Item	$RUST/src/sys/pal/unsupported/os.rs	/^    type Item = PathBuf;$/;"	t	implementation:SplitPaths
Item	$RUST/src/sys/pal/unsupported/process.rs	/^    type Item = &'a OsStr;$/;"	t	implementation:CommandArgs
Item	$RUST/src/sys/pal/wasi/args.rs	/^    type Item = OsString;$/;"	t	implementation:Args
Item	$RUST/src/sys/pal/wasi/fs.rs	/^    type Item = io::Result<DirEntry>;$/;"	t	implementation:ReadDir
Item	$RUST/src/sys/pal/wasi/net.rs	/^    type Item = SocketAddr;$/;"	t	implementation:LookupHost
Item	$RUST/src/sys/pal/wasi/os.rs	/^    type Item = PathBuf;$/;"	t	implementation:SplitPaths
Item	$RUST/src/sys/pal/windows/args.rs	/^    type Item = OsString;$/;"	t	implementation:Args
Item	$RUST/src/sys/pal/windows/fs.rs	/^    type Item = io::Result<DirEntry>;$/;"	t	implementation:ReadDir
Item	$RUST/src/sys/pal/windows/os.rs	/^    type Item = PathBuf;$/;"	t	implementation:SplitPaths
Item	$RUST/src/sys/pal/windows/process.rs	/^    type Item = &'a OsStr;$/;"	t	implementation:CommandArgs
Item	$RUST/src/sys/pal/xous/net/dns.rs	/^    type Item = SocketAddr;$/;"	t	implementation:LookupHost
Item	$RUST/src/sys/pal/xous/os.rs	/^    type Item = PathBuf;$/;"	t	implementation:SplitPaths
Item	$RUST/src/sys/pal/zkvm/args.rs	/^    type Item = OsString;$/;"	t	implementation:Args
Item	$RUST/src/sys/pal/zkvm/os.rs	/^    type Item = PathBuf;$/;"	t	implementation:SplitPaths
Item	$RUST/src/sys_common/net.rs	/^    type Item = SocketAddr;$/;"	t	implementation:LookupHost
Item	$RUST/src/sys_common/process.rs	/^    type Item = (&'a OsStr, Option<&'a OsStr>);$/;"	t	implementation:CommandEnvs
Item	$RUST/src/sys_common/wstr.rs	/^    type Item = NonZeroU16;$/;"	t	implementation:WStrUnits
Item	$RUST/src/sys_common/wtf8.rs	/^    type Item = u16;$/;"	t	implementation:EncodeWide
Iter	$RUST/src/collections/hash/map.rs	/^pub struct Iter<'a, K: 'a, V: 'a> {$/;"	s
Iter	$RUST/src/collections/hash/set.rs	/^pub struct Iter<'a, K: 'a> {$/;"	s
Iter	$RUST/src/net/socket_addr.rs	/^    type Iter: Iterator<Item = SocketAddr>;$/;"	t	interface:ToSocketAddrs
Iter	$RUST/src/path.rs	/^pub struct Iter<'a> {$/;"	s
Iter	$RUST/src/sync/mpsc/mod.rs	/^pub struct Iter<'a, T: 'a> {$/;"	s
Iter	$RUST/src/sys/pal/sgx/abi/usercalls/alloc.rs	/^pub struct Iter<'a, T: 'a + UserSafe>(slice::Iter<'a, T>);$/;"	s
IterMut	$RUST/src/collections/hash/map.rs	/^pub struct IterMut<'a, K: 'a, V: 'a> {$/;"	s
IterMut	$RUST/src/sys/pal/sgx/abi/usercalls/alloc.rs	/^pub struct IterMut<'a, T: 'a + UserSafe>(slice::IterMut<'a, T>);$/;"	s
ItronError	$RUST/src/sys/pal/itron/error.rs	/^pub struct ItronError {$/;"	s
ItronError	$RUST/src/sys/pal/solid/os.rs	/^impl itron::error::ItronError {$/;"	c
JOURNAL	$RUST/src/sys/pal/zkvm/abi.rs	/^    pub const JOURNAL: u32 = 3;$/;"	C	module:fileno
JoinHandle	$RUST/src/os/unix/thread.rs	/^impl<T> JoinHandleExt for JoinHandle<T> {$/;"	c
JoinHandle	$RUST/src/os/windows/io/handle.rs	/^impl<T> AsHandle for crate::thread::JoinHandle<T> {$/;"	c
JoinHandle	$RUST/src/os/windows/thread.rs	/^impl<T> IntoRawHandle for thread::JoinHandle<T> {$/;"	c
JoinHandle	$RUST/src/sys/pal/sgx/thread.rs	/^    pub type JoinHandle = wait_notify::Waiter;$/;"	t	module:task_queue
JoinHandle	$RUST/src/thread/mod.rs	/^unsafe impl<T> Sync for JoinHandle<T> {}$/;"	c
JoinHandleExt	$RUST/src/os/unix/thread.rs	/^pub trait JoinHandleExt {$/;"	i
JoinInner	$RUST/src/thread/mod.rs	/^struct JoinInner<'scope, T> {$/;"	s
JoinNotifier	$RUST/src/sys/pal/sgx/thread.rs	/^    pub struct JoinNotifier(Option<wait_notify::Notifier>);$/;"	s	module:task_queue
JoinPathsError	$RUST/src/env.rs	/^pub struct JoinPathsError {$/;"	s
JoinPathsError	$RUST/src/sys/pal/hermit/os.rs	/^pub struct JoinPathsError;$/;"	s
JoinPathsError	$RUST/src/sys/pal/sgx/os.rs	/^pub struct JoinPathsError;$/;"	s
JoinPathsError	$RUST/src/sys/pal/solid/os.rs	/^pub struct JoinPathsError;$/;"	s
JoinPathsError	$RUST/src/sys/pal/teeos/os.rs	/^pub struct JoinPathsError;$/;"	s
JoinPathsError	$RUST/src/sys/pal/uefi/os.rs	/^pub struct JoinPathsError;$/;"	s
JoinPathsError	$RUST/src/sys/pal/unix/os.rs	/^pub struct JoinPathsError;$/;"	s
JoinPathsError	$RUST/src/sys/pal/unsupported/os.rs	/^pub struct JoinPathsError;$/;"	s
JoinPathsError	$RUST/src/sys/pal/wasi/os.rs	/^pub struct JoinPathsError;$/;"	s
JoinPathsError	$RUST/src/sys/pal/windows/os.rs	/^pub struct JoinPathsError;$/;"	s
JoinPathsError	$RUST/src/sys/pal/xous/os.rs	/^pub struct JoinPathsError;$/;"	s
JoinPathsError	$RUST/src/sys/pal/zkvm/os.rs	/^pub struct JoinPathsError;$/;"	s
JoinThread	$RUST/src/os/xous/ffi/definitions.rs	/^    JoinThread = 36,$/;"	e	enum:Syscall
Juju	$RUST/src/thread/tests.rs	/^    struct Juju;$/;"	s	function:test_try_panic_any_message_unit_struct
KCALL_DEBUG_CMD_PUT_BYTES	$RUST/src/sys/pal/teeos/stdio.rs	/^const KCALL_DEBUG_CMD_PUT_BYTES: i64 = 2;$/;"	C
KEY	$RUST/src/sys/pal/windows/thread_local_key/tests.rs	/^    static KEY: StaticKey = StaticKey::new(Some(destruct));$/;"	v	function:destructors
KEY_LEN	$RUST/src/sys/pal/teeos/rand.rs	/^    const KEY_LEN: usize = core::mem::size_of::<u64>();$/;"	C	function:hashmap_random_keys
KEY_LEN	$RUST/src/sys/pal/unix/rand.rs	/^    const KEY_LEN: usize = core::mem::size_of::<u64>();$/;"	C	function:hashmap_random_keys
KEY_SENTVAL	$RUST/src/sys_common/thread_local_key.rs	/^const KEY_SENTVAL: usize = libc::PTHREAD_KEYS_MAX + 1;$/;"	C
Key	$RUST/src/sys/pal/common/thread_local/fast_local.rs	/^pub struct Key<T> {$/;"	s
Key	$RUST/src/sys/pal/common/thread_local/os_local.rs	/^unsafe impl<T> Sync for Key<T> {}$/;"	c
Key	$RUST/src/sys/pal/common/thread_local/static_local.rs	/^unsafe impl<T> Sync for Key<T> {}$/;"	c
Key	$RUST/src/sys/pal/sgx/abi/tls/mod.rs	/^pub struct Key(NonZeroUsize);$/;"	s
Key	$RUST/src/sys/pal/sgx/thread_local_key.rs	/^pub type Key = usize;$/;"	t
Key	$RUST/src/sys/pal/solid/thread_local_key.rs	/^pub type Key = usize;$/;"	t
Key	$RUST/src/sys/pal/unix/thread_local_key.rs	/^pub type Key = libc::pthread_key_t;$/;"	t
Key	$RUST/src/sys/pal/unsupported/thread_local_key.rs	/^pub type Key = usize;$/;"	t
Key	$RUST/src/sys/pal/windows/thread_local_key.rs	/^type Key = c::DWORD;$/;"	t
Key	$RUST/src/sys/pal/xous/thread_local_key.rs	/^pub type Key = usize;$/;"	t
Key	$RUST/src/sys/pal/zkvm/thread_local_key.rs	/^pub type Key = usize;$/;"	t
Keys	$RUST/src/collections/hash/map.rs	/^pub struct Keys<'a, K: 'a, V: 'a> {$/;"	s
LAP	$RUST/src/sync/mpmc/list.rs	/^const LAP: usize = 32;$/;"	C
LARGE_INTEGER	$RUST/src/sys/pal/windows/c.rs	/^pub type LARGE_INTEGER = c_longlong;$/;"	t
LEGACY_MAX_PATH	$RUST/src/sys/pal/windows/args.rs	/^    const LEGACY_MAX_PATH: usize = 260;$/;"	C	function:from_wide_to_user_path
LIFECYCLE_DETACHED	$RUST/src/sys/pal/itron/thread.rs	/^const LIFECYCLE_DETACHED: usize = usize::MAX;$/;"	C
LIFECYCLE_DETACHED_OR_JOINED	$RUST/src/sys/pal/itron/thread.rs	/^const LIFECYCLE_DETACHED_OR_JOINED: usize = usize::MAX;$/;"	C
LIFECYCLE_EXITED_OR_FINISHED_OR_JOIN_FINALIZE	$RUST/src/sys/pal/itron/thread.rs	/^const LIFECYCLE_EXITED_OR_FINISHED_OR_JOIN_FINALIZE: usize = usize::MAX;$/;"	C
LIFECYCLE_FINISHED	$RUST/src/sys/pal/itron/thread.rs	/^const LIFECYCLE_FINISHED: usize = usize::MAX;$/;"	C
LIFECYCLE_INIT	$RUST/src/sys/pal/itron/thread.rs	/^const LIFECYCLE_INIT: usize = 0;$/;"	C
LIFECYCLE_JOIN_FINALIZE	$RUST/src/sys/pal/itron/thread.rs	/^const LIFECYCLE_JOIN_FINALIZE: usize = usize::MAX;$/;"	C
LINGER	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub struct LINGER {$/;"	s
LOCK	$RUST/src/sys_common/backtrace.rs	/^    static LOCK: Mutex<()> = Mutex::new(());$/;"	v	function:lock
LOCKED	$RUST/src/sys/pal/wasm/alloc.rs	/^    static LOCKED: AtomicI32 = AtomicI32::new(0);$/;"	v	module:lock
LOCKED	$RUST/src/sys/pal/xous/alloc.rs	/^    static LOCKED: AtomicI32 = AtomicI32::new(0);$/;"	v	module:lock
LOG_SERVER_CONNECTION	$RUST/src/os/xous/services/log.rs	/^    static LOG_SERVER_CONNECTION: AtomicU32 = AtomicU32::new(0);$/;"	v	function:log_server
LONG	$RUST/src/sys/pal/windows/c.rs	/^pub type LONG = c_long;$/;"	t
LPCVOID	$RUST/src/sys/pal/windows/c.rs	/^pub type LPCVOID = *const c_void;$/;"	t
LPHANDLE	$RUST/src/sys/pal/windows/c.rs	/^pub type LPHANDLE = *mut HANDLE;$/;"	t
LPOVERLAPPED	$RUST/src/sys/pal/windows/c.rs	/^pub type LPOVERLAPPED = *mut OVERLAPPED;$/;"	t
LPOVERLAPPED_COMPLETION_ROUTINE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub type LPOVERLAPPED_COMPLETION_ROUTINE = ::core::option::Option<$/;"	t
LPPROC_THREAD_ATTRIBUTE_LIST	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub type LPPROC_THREAD_ATTRIBUTE_LIST = *mut ::core::ffi::c_void;$/;"	t
LPPROGRESS_ROUTINE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub type LPPROGRESS_ROUTINE = ::core::option::Option<$/;"	t
LPPROGRESS_ROUTINE_CALLBACK_REASON	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub type LPPROGRESS_ROUTINE_CALLBACK_REASON = u32;$/;"	t
LPSECURITY_ATTRIBUTES	$RUST/src/sys/pal/windows/c.rs	/^pub type LPSECURITY_ATTRIBUTES = *mut SECURITY_ATTRIBUTES;$/;"	t
LPTHREAD_START_ROUTINE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub type LPTHREAD_START_ROUTINE = ::core::option::Option<$/;"	t
LPVOID	$RUST/src/sys/pal/windows/c.rs	/^pub type LPVOID = *mut c_void;$/;"	t
LPWCH	$RUST/src/sys/pal/windows/c.rs	/^pub type LPWCH = *mut WCHAR;$/;"	t
LPWSAOVERLAPPED_COMPLETION_ROUTINE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub type LPWSAOVERLAPPED_COMPLETION_ROUTINE = ::core::option::Option<$/;"	t
LPWSTR	$RUST/src/sys/pal/windows/c.rs	/^pub type LPWSTR = *mut WCHAR;$/;"	t
LPad	$RUST/src/sys/personality/dwarf/eh.rs	/^type LPad = *const u8;$/;"	t
Laborted	$RUST/src/sys/pal/sgx/abi/entry.S	/^.Laborted:$/;"	l
Lafter_init	$RUST/src/sys/pal/sgx/abi/entry.S	/^.Lafter_init:$/;"	l
LastAccessTime	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub LastAccessTime: i64,$/;"	m	struct:FILE_ID_BOTH_DIR_INFO
LastBranchFromRip	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub LastBranchFromRip: u64,$/;"	m	struct:CONTEXT
LastBranchToRip	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub LastBranchToRip: u64,$/;"	m	struct:CONTEXT
LastExceptionFromRip	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub LastExceptionFromRip: u64,$/;"	m	struct:CONTEXT
LastExceptionToRip	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub LastExceptionToRip: u64,$/;"	m	struct:CONTEXT
LastWriteTime	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub LastWriteTime: i64,$/;"	m	struct:FILE_ID_BOTH_DIR_INFO
LazyBox	$RUST/src/sys_common/lazy_box.rs	/^pub(crate) struct LazyBox<T: LazyInit> {$/;"	s
LazyInit	$RUST/src/sys_common/lazy_box.rs	/^pub(crate) trait LazyInit {$/;"	i
LazyKeyInner	$RUST/src/sys/pal/common/thread_local/mod.rs	/^    pub struct LazyKeyInner<T> {$/;"	s	module:lazy
LazyLock	$RUST/src/sync/lazy_lock.rs	/^unsafe impl<T: Sync + Send, F: Send> Sync for LazyLock<T, F> {}$/;"	c
LazyResolve	$RUST/src/backtrace.rs	/^type LazyResolve = impl (FnOnce() -> Capture) + Send + Sync + UnwindSafe;$/;"	t
Legacy	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub Legacy: [M128A; 8],$/;"	m	struct:CONTEXT_0_0
Lelf_entry_call	$RUST/src/sys/pal/sgx/abi/entry.S	/^.Lelf_entry_call:$/;"	l
Lelf_entry_error_msg	$RUST/src/sys/pal/sgx/abi/entry.S	/^.Lelf_entry_error_msg:$/;"	l
Lelf_entry_error_msg_end	$RUST/src/sys/pal/sgx/abi/entry.S	/^.Lelf_entry_error_msg_end:$/;"	l
Lelf_exit	$RUST/src/sys/pal/sgx/abi/entry.S	/^.Lelf_exit:    $/;"	l
Lend	$RUST/src/os/xous/ffi/definitions.rs	/^    Lend = 2,$/;"	e	enum:InvokeType
LendBuffer	$RUST/src/sys/pal/xous/stdio.rs	/^        struct LendBuffer([u8; 4096]);$/;"	s	method:Stdout::write
LendMut	$RUST/src/os/xous/ffi/definitions.rs	/^    LendMut = 1,$/;"	e	enum:InvokeType
Length	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub Length: u32,$/;"	m	struct:OBJECT_ATTRIBUTES
Lexit	$RUST/src/sys/pal/sgx/abi/entry.S	/^.Lexit:$/;"	l
LibraryError	$RUST/src/sys/pal/xous/net/mod.rs	/^    LibraryError = 6,$/;"	e	enum:NetError
LieAboutSize	$RUST/src/io/tests.rs	/^    struct LieAboutSize(bool);$/;"	s	function:test_take_wrong_length
Limits	$RUST/src/os/xous/ffi/definitions.rs	/^pub(crate) enum Limits {$/;"	g
LineWriter	$RUST/src/io/buffered/linewriter.rs	/^pub struct LineWriter<W: ?Sized + Write> {$/;"	s
LineWriterShim	$RUST/src/io/buffered/linewritershim.rs	/^pub struct LineWriterShim<'a, W: ?Sized + Write> {$/;"	s
Lines	$RUST/src/io/mod.rs	/^pub struct Lines<B> {$/;"	s
List	$RUST/src/sync/mpmc/mod.rs	/^    List(counter::Sender<list::Channel<T>>),$/;"	e	enum:SenderFlavor
List	$RUST/src/sys_common/thread_local_dtor.rs	/^    type List = RefCell<Vec<(*mut u8, unsafe extern "C" fn(*mut u8))>>;$/;"	t	function:register_dtor_fallback
ListHead	$RUST/src/sys/pal/itron/condvar.rs	/^    unsafe impl Sync for ListHead {}$/;"	c	module:waiter_queue
ListToken	$RUST/src/sync/mpmc/list.rs	/^pub(crate) struct ListToken {$/;"	s
LocalKey	$RUST/src/thread/local.rs	/^pub struct LocalKey<T: 'static> {$/;"	s
LocalStream	$RUST/src/io/stdio.rs	/^type LocalStream = Arc<Mutex<Vec<u8>>>;$/;"	t
Lock	$RUST/src/io/stdio/tests.rs	/^    type Lock;$/;"	t	interface:Stdio
LockMutex	$RUST/src/os/xous/services/ticktimer.rs	/^    LockMutex(usize \/* cookie *\/),$/;"	e	enum:TicktimerScalar
LockResult	$RUST/src/sync/poison.rs	/^pub type LockResult<Guard> = Result<Guard, PoisonError<Guard>>;$/;"	t
LogLend	$RUST/src/os/xous/services/log.rs	/^pub(crate) enum LogLend {$/;"	g
LogScalar	$RUST/src/os/xous/services/log.rs	/^pub(crate) enum LogScalar<'a> {$/;"	g
LookupHost	$RUST/src/sys/pal/sgx/net.rs	/^pub struct LookupHost(!);$/;"	s
LookupHost	$RUST/src/sys/pal/teeos/net.rs	/^pub struct LookupHost(!);$/;"	s
LookupHost	$RUST/src/sys/pal/unix/l4re.rs	/^    unsafe impl Sync for LookupHost {}$/;"	c	module:net
LookupHost	$RUST/src/sys/pal/unsupported/net.rs	/^pub struct LookupHost(!);$/;"	s
LookupHost	$RUST/src/sys/pal/wasi/net.rs	/^pub struct LookupHost(!);$/;"	s
LookupHost	$RUST/src/sys/pal/xous/net/dns.rs	/^pub struct LookupHost {$/;"	s
LookupHost	$RUST/src/sys_common/net.rs	/^unsafe impl Sync for LookupHost {}$/;"	c
LookupHostQuery	$RUST/src/sys/pal/xous/net/dns.rs	/^struct LookupHostQuery([u8; 4096]);$/;"	s
Low	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub Low: u64,$/;"	m	struct:M128A
Lreentry_panic	$RUST/src/sys/pal/sgx/abi/entry.S	/^.Lreentry_panic:$/;"	l
Lsgx_exit	$RUST/src/sys/pal/sgx/abi/entry.S	/^.Lsgx_exit:$/;"	l
Lskip_debug_init	$RUST/src/sys/pal/sgx/abi/entry.S	/^.Lskip_debug_init:$/;"	l
Lskip_init	$RUST/src/sys/pal/sgx/abi/entry.S	/^.Lskip_init:$/;"	l
Lusercall_abort	$RUST/src/sys/pal/sgx/abi/entry.S	/^.Lusercall_abort:$/;"	l
Lusercall_noreturn	$RUST/src/sys/pal/sgx/abi/entry.S	/^.Lusercall_noreturn:$/;"	l
Lusercall_ret	$RUST/src/sys/pal/sgx/abi/entry.S	/^.Lusercall_ret:$/;"	l
Lusercall_save_state	$RUST/src/sys/pal/sgx/abi/entry.S	/^.Lusercall_save_state:$/;"	l
Lxsave_clear	$RUST/src/sys/pal/sgx/abi/entry.S	/^.Lxsave_clear:$/;"	l
Lxsave_header	$RUST/src/sys/pal/sgx/abi/entry.S	/^.Lxsave_header:$/;"	l
Lxsave_mxcsr	$RUST/src/sys/pal/sgx/abi/entry.S	/^.Lxsave_mxcsr:$/;"	l
M128A	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub struct M128A {$/;"	s
MAIN_ALTSTACK	$RUST/src/sys/pal/unix/stack_overflow.rs	/^    static MAIN_ALTSTACK: AtomicPtr<libc::c_void> = AtomicPtr::new(ptr::null_mut());$/;"	v	module:imp
MAIN_SEP	$RUST/src/sys/pal/sgx/path.rs	/^pub const MAIN_SEP: char = '\/';$/;"	C
MAIN_SEP	$RUST/src/sys/pal/unix/path.rs	/^pub const MAIN_SEP: char = '\/';$/;"	C
MAIN_SEPARATOR	$RUST/src/path.rs	/^pub const MAIN_SEPARATOR: char = crate::sys::path::MAIN_SEP;$/;"	C
MAIN_SEPARATOR_STR	$RUST/src/path.rs	/^pub const MAIN_SEPARATOR_STR: &str = crate::sys::path::MAIN_SEP_STR;$/;"	C
MAIN_SEP_STR	$RUST/src/sys/pal/sgx/path.rs	/^pub const MAIN_SEP_STR: &str = "\/";$/;"	C
MAIN_SEP_STR	$RUST/src/sys/pal/solid/path.rs	/^pub const MAIN_SEP_STR: &str = "\\\\";$/;"	C
MAIN_SEP_STR	$RUST/src/sys/pal/uefi/path.rs	/^pub const MAIN_SEP_STR: &str = "\\\\";$/;"	C
MAIN_SEP_STR	$RUST/src/sys/pal/unix/path.rs	/^pub const MAIN_SEP_STR: &str = "\/";$/;"	C
MAIN_SEP_STR	$RUST/src/sys/pal/windows/path.rs	/^pub const MAIN_SEP_STR: &str = "\\\\";$/;"	C
MAIN_THREAD_RENDEZVOUS	$RUST/src/thread/local/tests.rs	/^    const MAIN_THREAD_RENDEZVOUS: u8 = 3;$/;"	C	function:join_orders_after_tls_destructors
MARK_BIT	$RUST/src/sync/mpmc/list.rs	/^const MARK_BIT: usize = 1;$/;"	C
MASK	$RUST/src/sys/pal/unix/locks/futex_rwlock.rs	/^const MASK: u32 = (1 << 30) - 1;$/;"	C
MAX	$RUST/src/net/tcp/tests.rs	/^    const MAX: usize = 10;$/;"	C	function:multiple_connect_interleaved_lazy_schedule
MAXIMUM_REPARSE_DATA_BUFFER_SIZE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const MAXIMUM_REPARSE_DATA_BUFFER_SIZE: u32 = 16384u32;$/;"	C
MAX_BUFFER_SIZE	$RUST/src/sys/pal/uefi/stdio.rs	/^const MAX_BUFFER_SIZE: usize = 8192;$/;"	C
MAX_BUFFER_SIZE	$RUST/src/sys/pal/windows/stdio.rs	/^const MAX_BUFFER_SIZE: usize = 8192;$/;"	C
MAX_LEN	$RUST/src/sys/pal/teeos/stdio.rs	/^    const MAX_LEN: usize = 512;$/;"	C	function:print_buf
MAX_NB_FRAMES	$RUST/src/sys_common/backtrace.rs	/^const MAX_NB_FRAMES: usize = 100;$/;"	C
MAX_PATH	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const MAX_PATH: u32 = 260u32;$/;"	C
MAX_READERS	$RUST/src/sys/pal/unix/locks/futex_rwlock.rs	/^const MAX_READERS: u32 = MASK - 1;$/;"	C
MAX_RETRIES	$RUST/src/sys/pal/windows/fs.rs	/^    const MAX_RETRIES: u32 = 10;$/;"	C	function:remove_dir_all_iterative
MAX_STACK_ALLOCATION	$RUST/src/sys/pal/common/small_c_string.rs	/^const MAX_STACK_ALLOCATION: usize = 384;$/;"	C
MAX_USIZE	$RUST/src/collections/hash/map/tests.rs	/^    const MAX_USIZE: usize = usize::MAX;$/;"	C	function:test_try_reserve
MB_COMPOSITE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const MB_COMPOSITE: MULTI_BYTE_TO_WIDE_CHAR_FLAGS = 2u32;$/;"	C
MB_ERR_INVALID_CHARS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const MB_ERR_INVALID_CHARS: MULTI_BYTE_TO_WIDE_CHAR_FLAGS = 8u32;$/;"	C
MB_PRECOMPOSED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const MB_PRECOMPOSED: MULTI_BYTE_TO_WIDE_CHAR_FLAGS = 1u32;$/;"	C
MB_USEGLYPHCHARS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const MB_USEGLYPHCHARS: MULTI_BYTE_TO_WIDE_CHAR_FLAGS = 4u32;$/;"	C
MESSAGE_DATA	$RUST/src/io/error.rs	/^        const MESSAGE_DATA: $crate::io::error::SimpleMessage =$/;"	C
MIN	$RUST/src/sys_common/thread.rs	/^    static MIN: atomic::AtomicUsize = atomic::AtomicUsize::new(0);$/;"	v	function:min_stack
MIN_ALIGN	$RUST/src/sys/pal/common/alloc.rs	/^pub const MIN_ALIGN: usize = 8;$/;"	C
MIN_STACK_SIZE	$RUST/src/sys/pal/xous/thread.rs	/^const MIN_STACK_SIZE: usize = 4096;$/;"	C
MODE	$RUST/src/sys/pal/itron/abi.rs	/^pub type MODE = uint_t;$/;"	t
MODULE_NAME	$RUST/src/sys/pal/windows/compat.rs	/^        const MODULE_NAME: &CStr = c"api-ms-win-core-synch-l1-2-0";$/;"	C	function:load_synch_functions::try_load
MOUNT_POINT_REPARSE_BUFFER	$RUST/src/sys/pal/windows/c.rs	/^pub struct MOUNT_POINT_REPARSE_BUFFER {$/;"	s
MOVEFILE_COPY_ALLOWED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const MOVEFILE_COPY_ALLOWED: MOVE_FILE_FLAGS = 2u32;$/;"	C
MOVEFILE_CREATE_HARDLINK	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const MOVEFILE_CREATE_HARDLINK: MOVE_FILE_FLAGS = 16u32;$/;"	C
MOVEFILE_DELAY_UNTIL_REBOOT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const MOVEFILE_DELAY_UNTIL_REBOOT: MOVE_FILE_FLAGS = 4u32;$/;"	C
MOVEFILE_FAIL_IF_NOT_TRACKABLE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const MOVEFILE_FAIL_IF_NOT_TRACKABLE: MOVE_FILE_FLAGS = 32u32;$/;"	C
MOVEFILE_REPLACE_EXISTING	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const MOVEFILE_REPLACE_EXISTING: MOVE_FILE_FLAGS = 1u32;$/;"	C
MOVEFILE_WRITE_THROUGH	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const MOVEFILE_WRITE_THROUGH: MOVE_FILE_FLAGS = 8u32;$/;"	C
MOVE_FILE_FLAGS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub type MOVE_FILE_FLAGS = u32;$/;"	t
MSG	$RUST/src/sync/once_lock/tests.rs	/^    const MSG: &str = "Hello, World";$/;"	C	function:sync_once_cell_does_not_leak_partially_constructed_boxes
MSG_DONTROUTE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const MSG_DONTROUTE: SEND_RECV_FLAGS = 4i32;$/;"	C
MSG_NOSIGNAL	$RUST/src/os/unix/net/datagram.rs	/^const MSG_NOSIGNAL: libc::c_int = 0x0;$/;"	C
MSG_OOB	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const MSG_OOB: SEND_RECV_FLAGS = 1i32;$/;"	C
MSG_PEEK	$RUST/src/sys/pal/solid/abi/sockets.rs	/^pub const MSG_PEEK: c_int = 1;$/;"	C
MSG_PEEK	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const MSG_PEEK: SEND_RECV_FLAGS = 2i32;$/;"	C
MSG_PUSH_IMMEDIATE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const MSG_PUSH_IMMEDIATE: SEND_RECV_FLAGS = 32i32;$/;"	C
MSG_SEND_NO_ARGUMENTS_RETURN_NSUINTEGER	$RUST/src/sys/pal/unix/args.rs	/^        const MSG_SEND_NO_ARGUMENTS_RETURN_NSUINTEGER: unsafe extern "C" fn($/;"	C	function:imp::args
MSG_SEND_NO_ARGUMENTS_RETURN_PTR	$RUST/src/sys/pal/unix/args.rs	/^        const MSG_SEND_NO_ARGUMENTS_RETURN_PTR: unsafe extern "C" fn(NsId, Sel) -> *const c_void/;"	C	function:imp::args
MSG_SEND_NSINTEGER_ARGUMENT_RETURN_PTR	$RUST/src/sys/pal/unix/args.rs	/^        const MSG_SEND_NSINTEGER_ARGUMENT_RETURN_PTR: unsafe extern "C" fn($/;"	C	function:imp::args
MSG_SEND_PTR	$RUST/src/sys/pal/unix/args.rs	/^        const MSG_SEND_PTR: unsafe extern "C" fn() = objc_msgSend;$/;"	C	function:imp::args
MSG_WAITALL	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const MSG_WAITALL: SEND_RECV_FLAGS = 8i32;$/;"	C
MULTI_BYTE_TO_WIDE_CHAR_FLAGS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub type MULTI_BYTE_TO_WIDE_CHAR_FLAGS = u32;$/;"	t
MakePipe	$RUST/src/sys/pal/unix/process/process_common.rs	/^    MakePipe,$/;"	e	enum:Stdio
MakePipe	$RUST/src/sys/pal/unsupported/process.rs	/^    MakePipe,$/;"	e	enum:Stdio
MakePipe	$RUST/src/sys/pal/windows/process.rs	/^    MakePipe,$/;"	e	enum:Stdio
MapMemory	$RUST/src/os/xous/ffi/definitions.rs	/^    MapMemory = 2,$/;"	e	enum:Syscall
Masked	$RUST/src/sys_common/once/queue.rs	/^type Masked = ();$/;"	t
MaximumFileInfoByHandleClass	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const MaximumFileInfoByHandleClass: FILE_INFO_BY_HANDLE_CLASS = 25i32;$/;"	C
MaximumLength	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub MaximumLength: u16,$/;"	m	struct:UNICODE_STRING
MaybeDangling	$RUST/src/thread/mod.rs	/^        struct MaybeDangling<T>(mem::MaybeUninit<T>);$/;"	s	method:Builder::spawn_unchecked_
MemoryFlags	$RUST/src/os/xous/ffi/definitions/memoryflags.rs	/^pub struct MemoryFlags {$/;"	s
MemoryInUse	$RUST/src/os/xous/ffi/definitions.rs	/^    MemoryInUse = 4,$/;"	e	enum:Error
MemoryRange	$RUST/src/os/xous/ffi/definitions.rs	/^    MemoryRange = 3,$/;"	e	enum:SyscallResult
MemoryReturned	$RUST/src/os/xous/ffi/definitions.rs	/^    MemoryReturned = 18,$/;"	e	enum:SyscallResult
Message	$RUST/src/os/xous/ffi/definitions.rs	/^    Message = 9,$/;"	e	enum:SyscallResult
Messages	$RUST/src/os/unix/net/ancillary.rs	/^pub struct Messages<'a> {$/;"	s
Metadata	$RUST/src/fs.rs	/^pub struct Metadata(fs_imp::FileAttr);$/;"	s
Metadata	$RUST/src/os/aix/fs.rs	/^impl MetadataExt for Metadata {$/;"	c
Metadata	$RUST/src/os/android/fs.rs	/^impl MetadataExt for Metadata {$/;"	c
Metadata	$RUST/src/os/dragonfly/fs.rs	/^impl MetadataExt for Metadata {$/;"	c
Metadata	$RUST/src/os/emscripten/fs.rs	/^impl MetadataExt for Metadata {$/;"	c
Metadata	$RUST/src/os/espidf/fs.rs	/^impl MetadataExt for Metadata {$/;"	c
Metadata	$RUST/src/os/fortanix_sgx/io.rs	/^    type Metadata: Default;$/;"	t	interface:FromRawFd
Metadata	$RUST/src/os/freebsd/fs.rs	/^impl MetadataExt for Metadata {$/;"	c
Metadata	$RUST/src/os/fuchsia/fs.rs	/^impl MetadataExt for Metadata {$/;"	c
Metadata	$RUST/src/os/haiku/fs.rs	/^impl MetadataExt for Metadata {$/;"	c
Metadata	$RUST/src/os/horizon/fs.rs	/^impl MetadataExt for Metadata {$/;"	c
Metadata	$RUST/src/os/hurd/fs.rs	/^impl MetadataExt for Metadata {$/;"	c
Metadata	$RUST/src/os/illumos/fs.rs	/^impl MetadataExt for Metadata {$/;"	c
Metadata	$RUST/src/os/ios/fs.rs	/^impl MetadataExt for Metadata {$/;"	c
Metadata	$RUST/src/os/l4re/fs.rs	/^impl MetadataExt for Metadata {$/;"	c
Metadata	$RUST/src/os/linux/fs.rs	/^impl MetadataExt for Metadata {$/;"	c
Metadata	$RUST/src/os/macos/fs.rs	/^impl MetadataExt for Metadata {$/;"	c
Metadata	$RUST/src/os/netbsd/fs.rs	/^impl MetadataExt for Metadata {$/;"	c
Metadata	$RUST/src/os/nto/fs.rs	/^impl MetadataExt for Metadata {$/;"	c
Metadata	$RUST/src/os/openbsd/fs.rs	/^impl MetadataExt for Metadata {$/;"	c
Metadata	$RUST/src/os/redox/fs.rs	/^impl MetadataExt for Metadata {$/;"	c
Metadata	$RUST/src/os/solaris/fs.rs	/^impl MetadataExt for Metadata {$/;"	c
Metadata	$RUST/src/os/unix/fs.rs	/^impl MetadataExt for fs::Metadata {$/;"	c
Metadata	$RUST/src/os/vita/fs.rs	/^impl MetadataExt for Metadata {$/;"	c
Metadata	$RUST/src/os/vxworks/fs.rs	/^impl MetadataExt for Metadata {$/;"	c
Metadata	$RUST/src/os/wasi/fs.rs	/^impl MetadataExt for fs::Metadata {$/;"	c
Metadata	$RUST/src/os/watchos/fs.rs	/^impl MetadataExt for Metadata {$/;"	c
Metadata	$RUST/src/os/windows/fs.rs	/^impl MetadataExt for Metadata {$/;"	c
Metadata	$RUST/src/sys/pal/unix/kernel_copy.rs	/^    Metadata(Metadata),$/;"	e	enum:FdMeta
MetadataExt	$RUST/src/os/aix/fs.rs	/^pub trait MetadataExt {$/;"	i
MetadataExt	$RUST/src/os/android/fs.rs	/^pub trait MetadataExt {$/;"	i
MetadataExt	$RUST/src/os/dragonfly/fs.rs	/^pub trait MetadataExt {$/;"	i
MetadataExt	$RUST/src/os/emscripten/fs.rs	/^pub trait MetadataExt {$/;"	i
MetadataExt	$RUST/src/os/espidf/fs.rs	/^pub trait MetadataExt {$/;"	i
MetadataExt	$RUST/src/os/freebsd/fs.rs	/^pub trait MetadataExt {$/;"	i
MetadataExt	$RUST/src/os/fuchsia/fs.rs	/^pub trait MetadataExt {$/;"	i
MetadataExt	$RUST/src/os/haiku/fs.rs	/^pub trait MetadataExt {$/;"	i
MetadataExt	$RUST/src/os/horizon/fs.rs	/^pub trait MetadataExt {$/;"	i
MetadataExt	$RUST/src/os/hurd/fs.rs	/^pub trait MetadataExt {$/;"	i
MetadataExt	$RUST/src/os/illumos/fs.rs	/^pub trait MetadataExt {$/;"	i
MetadataExt	$RUST/src/os/ios/fs.rs	/^pub trait MetadataExt {$/;"	i
MetadataExt	$RUST/src/os/l4re/fs.rs	/^pub trait MetadataExt {$/;"	i
MetadataExt	$RUST/src/os/linux/fs.rs	/^pub trait MetadataExt {$/;"	i
MetadataExt	$RUST/src/os/macos/fs.rs	/^pub trait MetadataExt {$/;"	i
MetadataExt	$RUST/src/os/netbsd/fs.rs	/^pub trait MetadataExt {$/;"	i
MetadataExt	$RUST/src/os/nto/fs.rs	/^pub trait MetadataExt {$/;"	i
MetadataExt	$RUST/src/os/openbsd/fs.rs	/^pub trait MetadataExt {$/;"	i
MetadataExt	$RUST/src/os/redox/fs.rs	/^pub trait MetadataExt {$/;"	i
MetadataExt	$RUST/src/os/solaris/fs.rs	/^pub trait MetadataExt {$/;"	i
MetadataExt	$RUST/src/os/unix/fs.rs	/^pub trait MetadataExt {$/;"	i
MetadataExt	$RUST/src/os/vita/fs.rs	/^pub trait MetadataExt {$/;"	i
MetadataExt	$RUST/src/os/vxworks/fs.rs	/^pub trait MetadataExt {$/;"	i
MetadataExt	$RUST/src/os/wasi/fs.rs	/^pub trait MetadataExt {$/;"	i
MetadataExt	$RUST/src/os/watchos/fs.rs	/^pub trait MetadataExt {$/;"	i
MetadataExt	$RUST/src/os/windows/fs.rs	/^pub trait MetadataExt {$/;"	i
Module	$RUST/src/sys/pal/windows/compat.rs	/^pub(in crate::sys) struct Module(NonNull<c_void>);$/;"	s
Move	$RUST/src/os/xous/ffi/definitions.rs	/^    Move = 3,$/;"	e	enum:InvokeType
MoveFileExW	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn MoveFileExW($/;"	f	signature:( lpexistingfilename: PCWSTR, lpnewfilename: PCWSTR, dwflags: MOVE_FILE_FLAGS, ) -> BOOL
MultiByteToWideChar	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn MultiByteToWideChar($/;"	f	signature:( codepage: u32, dwflags: MULTI_BYTE_TO_WIDE_CHAR_FLAGS, lpmultibytestr: PCSTR, cbmultibyte: i32, lpwidecharstr: PWSTR, cchwidechar: i32, ) -> i32
MustAbort	$RUST/src/panicking.rs	/^    pub enum MustAbort {$/;"	g	module:panic_count
Mutex	$RUST/src/panic.rs	/^impl<T: ?Sized> UnwindSafe for Mutex<T> {}$/;"	c
Mutex	$RUST/src/sync/mutex.rs	/^unsafe impl<T: ?Sized + Send> Sync for Mutex<T> {}$/;"	c
Mutex	$RUST/src/sys/pal/itron/mutex.rs	/^pub struct Mutex {$/;"	s
Mutex	$RUST/src/sys/pal/sgx/mutex.rs	/^pub struct Mutex {$/;"	s
Mutex	$RUST/src/sys/pal/unix/locks/fuchsia_mutex.rs	/^pub struct Mutex {$/;"	s
Mutex	$RUST/src/sys/pal/unix/locks/futex_mutex.rs	/^pub struct Mutex {$/;"	s
Mutex	$RUST/src/sys/pal/unix/locks/pthread_mutex.rs	/^pub struct Mutex {$/;"	s
Mutex	$RUST/src/sys/pal/unsupported/locks/mutex.rs	/^unsafe impl Sync for Mutex {} \/\/ no threads on this platform$/;"	c
Mutex	$RUST/src/sys/pal/windows/locks/mutex.rs	/^unsafe impl Sync for Mutex {}$/;"	c
Mutex	$RUST/src/sys/pal/xous/locks/mutex.rs	/^pub struct Mutex {$/;"	s
MutexGuard	$RUST/src/sync/mutex.rs	/^unsafe impl<T: ?Sized + Sync> Sync for MutexGuard<'_, T> {}$/;"	c
MutexGuard	$RUST/src/sys/pal/itron/mutex.rs	/^pub(super) struct MutexGuard<'a>(&'a Mutex);$/;"	s
MxCsr	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub MxCsr: u32,$/;"	m	struct:XSAVE_FORMAT
MxCsr_Mask	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub MxCsr_Mask: u32,$/;"	m	struct:XSAVE_FORMAT
MyMessage	$RUST/src/error/tests.rs	/^    struct MyMessage;$/;"	s	function:only_one_source
NAMED_PIPE_MODE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub type NAMED_PIPE_MODE = u32;$/;"	t
NAME_MAX_LENGTH	$RUST/src/os/xous/services.rs	/^    const NAME_MAX_LENGTH: usize = 64;$/;"	C	module:ns
NAME_SERVER_CONNECTION	$RUST/src/os/xous/services.rs	/^static NAME_SERVER_CONNECTION: AtomicU32 = AtomicU32::new(0);$/;"	v
NANOS_PER_SEC	$RUST/src/sys/pal/windows/time.rs	/^const NANOS_PER_SEC: u64 = 1_000_000_000;$/;"	C
NEED_ALTSTACK	$RUST/src/sys/pal/unix/stack_overflow.rs	/^    static NEED_ALTSTACK: AtomicBool = AtomicBool::new(false);$/;"	v	module:imp
NET_CONNECTION	$RUST/src/os/xous/services/net.rs	/^    static NET_CONNECTION: AtomicU32 = AtomicU32::new(0);$/;"	v	function:net_server
NORMAL_PRIORITY_CLASS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const NORMAL_PRIORITY_CLASS: PROCESS_CREATION_FLAGS = 32u32;$/;"	C
NOTIFIED	$RUST/src/sys/pal/unix/thread_parking/darwin.rs	/^const NOTIFIED: i8 = 1;$/;"	C
NOTIFIED	$RUST/src/sys/pal/unix/thread_parking/pthread.rs	/^const NOTIFIED: usize = 2;$/;"	C
NOTIFIED	$RUST/src/sys/pal/windows/thread_parking.rs	/^const NOTIFIED: i8 = 1;$/;"	C
NOTIFIED	$RUST/src/sys/pal/xous/thread_parking.rs	/^const NOTIFIED: i8 = 1;$/;"	C
NOTIFIED	$RUST/src/sys_common/thread_parking/futex.rs	/^const NOTIFIED: u32 = 1;$/;"	C
NOTIFIED	$RUST/src/sys_common/thread_parking/id.rs	/^const NOTIFIED: i8 = 1;$/;"	C
NOTIFY_TRIES	$RUST/src/sys/pal/xous/locks/condvar.rs	/^const NOTIFY_TRIES: usize = 3;$/;"	C
NOT_FILE_ERROR	$RUST/src/sys_common/fs.rs	/^pub(crate) const NOT_FILE_ERROR: Error = io::const_io_error!($/;"	C
NOT_PROBED	$RUST/src/sys/pal/unix/kernel_copy.rs	/^    const NOT_PROBED: u8 = 0;$/;"	C	function:copy_regular_files
NO_ERROR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const NO_ERROR: WIN32_ERROR = 0u32;$/;"	C
NSEC_PER_SEC	$RUST/src/sys/pal/unix/time.rs	/^const NSEC_PER_SEC: u64 = 1_000_000_000;$/;"	C
NSUInteger	$RUST/src/sys/pal/unix/args.rs	/^        type NSUInteger = usize;$/;"	t	function:imp::args
NTCREATEFILE_CREATE_DISPOSITION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub type NTCREATEFILE_CREATE_DISPOSITION = u32;$/;"	t
NTCREATEFILE_CREATE_OPTIONS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub type NTCREATEFILE_CREATE_OPTIONS = u32;$/;"	t
NTDLL_DLL	$RUST/src/sys/pal/windows/os.rs	/^            const NTDLL_DLL: &[u16] = &[$/;"	C	function:error_string
NTHREADS	$RUST/src/sync/mpsc/sync_tests.rs	/^    const NTHREADS: u32 = 8;$/;"	C	function:stress_shared
NTHREADS	$RUST/src/sync/mpsc/tests.rs	/^    const NTHREADS: u32 = 8;$/;"	C	function:stress_shared
NTSTATUS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub type NTSTATUS = i32;$/;"	t
NULL	$RUST/src/sys/pal/uefi/args.rs	/^    const NULL: char = '\\0';$/;"	C	function:parse_lp_cmd_line
NUL_ERR	$RUST/src/sys/pal/common/small_c_string.rs	/^const NUL_ERR: io::Error =$/;"	C
Nanoseconds	$RUST/src/sys/pal/unix/time.rs	/^struct Nanoseconds(u32);$/;"	s
NetBlockingScalar	$RUST/src/os/xous/services/net.rs	/^pub(crate) enum NetBlockingScalar {$/;"	g
NetError	$RUST/src/sys/pal/xous/net/mod.rs	/^enum NetError {$/;"	g
NetLendMut	$RUST/src/os/xous/services/net.rs	/^pub(crate) enum NetLendMut {$/;"	g
NetworkDown	$RUST/src/io/error.rs	/^    NetworkDown,$/;"	e	enum:ErrorKind
NetworkUnreachable	$RUST/src/io/error.rs	/^    NetworkUnreachable,$/;"	e	enum:ErrorKind
Never	$RUST/src/sys/pal/windows/args.rs	/^    Never,$/;"	e	enum:Quote
NewUserRef	$RUST/src/sys/pal/sgx/abi/usercalls/alloc.rs	/^trait NewUserRef<T: ?Sized> {$/;"	i
NextEntryOffset	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub NextEntryOffset: u32,$/;"	m	struct:FILE_ID_BOTH_DIR_INFO
NoError	$RUST/src/os/xous/ffi/definitions.rs	/^    NoError = 0,$/;"	e	enum:Error
Node	$RUST/src/sys/pal/xous/thread_local_key.rs	/^struct Node {$/;"	s
NonCopy	$RUST/src/sync/mutex/tests.rs	/^struct NonCopy(i32);$/;"	s
NonCopy	$RUST/src/sync/rwlock/tests.rs	/^struct NonCopy(i32);$/;"	s
NonIpSockAddr	$RUST/src/sys/pal/sgx/net.rs	/^pub struct NonIpSockAddr {$/;"	s
NonNull	$RUST/src/sys/pal/sgx/abi/usercalls/alloc.rs	/^impl<T: ?Sized> NewUserRef<NonNull<T>> for NonNull<UserRef<T>> {$/;"	c
NonZeroDWORD	$RUST/src/sys/pal/windows/c.rs	/^pub type NonZeroDWORD = NonZero<c_ulong>;$/;"	t
None	$RUST/src/sys/personality/dwarf/eh.rs	/^    None,$/;"	e	enum:EHAction
NoneObtained	$RUST/src/sys/pal/unix/kernel_copy.rs	/^    NoneObtained,$/;"	e	enum:FdMeta
Normal	$RUST/src/path.rs	/^    Normal(#[stable(feature = "rust1", since = "1.0.0")] &'a OsStr),$/;"	e	enum:Component
NotADirectory	$RUST/src/io/error.rs	/^    NotADirectory,$/;"	e	enum:ErrorKind
NotConnected	$RUST/src/io/error.rs	/^    NotConnected,$/;"	e	enum:ErrorKind
NotFound	$RUST/src/io/error.rs	/^    NotFound,$/;"	e	enum:ErrorKind
NotPresent	$RUST/src/env.rs	/^    NotPresent,$/;"	e	enum:VarError
NotReading	$RUST/src/sys/pal/windows/pipe.rs	/^    NotReading,$/;"	e	enum:State
NotSeekable	$RUST/src/io/error.rs	/^    NotSeekable,$/;"	e	enum:ErrorKind
NotUnicode	$RUST/src/env.rs	/^    NotUnicode(#[stable(feature = "env", since = "1.0.0")] OsString),$/;"	e	enum:VarError
NotifiedTcs	$RUST/src/sys/pal/sgx/waitqueue/mod.rs	/^pub enum NotifiedTcs {$/;"	g
Notifier	$RUST/src/sys/pal/sgx/thread.rs	/^    pub struct Notifier(Arc<Parker>);$/;"	s	module:wait_notify
NotifyCondition	$RUST/src/os/xous/services/ticktimer.rs	/^    NotifyCondition(usize \/* cookie *\/, usize \/* count *\/),$/;"	e	enum:TicktimerScalar
NotifyOnDrop	$RUST/src/thread/local/tests.rs	/^struct NotifyOnDrop(Signal);$/;"	s
NsId	$RUST/src/sys/pal/unix/args.rs	/^        type NsId = *const c_void;$/;"	t	function:imp::args
NtCreateFile	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn NtCreateFile($/;"	f	signature:( filehandle: *mut HANDLE, desiredaccess: FILE_ACCESS_RIGHTS, objectattributes: *const OBJECT_ATTRIBUTES, iostatusblock: *mut IO_STATUS_BLOCK, allocationsize: *const i64, fileattributes: FILE_FLAGS_AND_ATTRIBUTES, shareaccess: FILE_SHARE_MODE, createdisposition: NTCREATEFILE_CREATE_DISPOSITION, createoptions: NTCREATEFILE_CREATE_OPTIONS, eabuffer: *const ::core::ffi::c_void, ealength: u32, ) -> NTSTATUS
NtReadFile	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn NtReadFile($/;"	f	signature:( filehandle: HANDLE, event: HANDLE, apcroutine: PIO_APC_ROUTINE, apccontext: *const ::core::ffi::c_void, iostatusblock: *mut IO_STATUS_BLOCK, buffer: *mut ::core::ffi::c_void, length: u32, byteoffset: *const i64, key: *const u32, ) -> NTSTATUS
NtWriteFile	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn NtWriteFile($/;"	f	signature:( filehandle: HANDLE, event: HANDLE, apcroutine: PIO_APC_ROUTINE, apccontext: *const ::core::ffi::c_void, iostatusblock: *mut IO_STATUS_BLOCK, buffer: *const ::core::ffi::c_void, length: u32, byteoffset: *const i64, key: *const u32, ) -> NTSTATUS
Null	$RUST/src/sys/pal/unix/process/process_common.rs	/^    Null,$/;"	e	enum:Stdio
Null	$RUST/src/sys/pal/unsupported/process.rs	/^    Null,$/;"	e	enum:Stdio
Null	$RUST/src/sys/pal/windows/process.rs	/^    Null,$/;"	e	enum:Stdio
NullHandleError	$RUST/src/os/windows/io/handle.rs	/^pub struct NullHandleError(());$/;"	s
NumberOfLinks	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub NumberOfLinks: u32,$/;"	m	struct:FILE_STANDARD_INFO
NumberParameters	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub NumberParameters: u32,$/;"	m	struct:EXCEPTION_RECORD
OBJECT_ATTRIBUTES	$RUST/src/sys/pal/windows/c.rs	/^impl Default for OBJECT_ATTRIBUTES {$/;"	c
OBJECT_ATTRIBUTES	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub struct OBJECT_ATTRIBUTES {$/;"	s
OBJ_DONT_REPARSE	$RUST/src/sys/pal/windows/c.rs	/^pub const OBJ_DONT_REPARSE: u32 = windows_sys::OBJ_DONT_REPARSE as u32;$/;"	C
OBJ_DONT_REPARSE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const OBJ_DONT_REPARSE: i32 = 4096i32;$/;"	C
ONCE_CELL	$RUST/src/sync/once_lock/tests.rs	/^    static ONCE_CELL: OnceLock<i32> = OnceLock::new();$/;"	v	function:sync_once_cell
ONCE_INIT	$RUST/src/sync/once.rs	/^pub const ONCE_INIT: Once = Once::new();$/;"	C
OPEN_ALWAYS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const OPEN_ALWAYS: FILE_CREATION_DISPOSITION = 4u32;$/;"	C
OPEN_EXISTING	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const OPEN_EXISTING: FILE_CREATION_DISPOSITION = 3u32;$/;"	C
OUTPUT_CAPTURE_USED	$RUST/src/io/stdio.rs	/^static OUTPUT_CAPTURE_USED: AtomicBool = AtomicBool::new(false);$/;"	v
OVERLAPPED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub struct OVERLAPPED {$/;"	s
OVERLAPPED_0	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^impl ::core::marker::Copy for OVERLAPPED_0 {}$/;"	c
OVERLAPPED_0_0	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub struct OVERLAPPED_0_0 {$/;"	s
O_ACCMODE	$RUST/src/sys/pal/solid/abi/fs.rs	/^pub const O_ACCMODE: c_int = 0x3;$/;"	C
ObjectName	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub ObjectName: *const UNICODE_STRING,$/;"	m	struct:OBJECT_ATTRIBUTES
Occupied	$RUST/src/collections/hash/map.rs	/^    Occupied(RawOccupiedEntryMut<'a, K, V, S>),$/;"	e	enum:RawEntryMut
OccupiedEntry	$RUST/src/collections/hash/map.rs	/^pub struct OccupiedEntry<'a, K: 'a, V: 'a> {$/;"	s
OccupiedError	$RUST/src/collections/hash/map.rs	/^pub struct OccupiedError<'a, K: 'a, V: 'a> {$/;"	s
Off	$RUST/src/panic.rs	/^    Off,$/;"	e	enum:BacktraceStyle
Offset	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub Offset: u32,$/;"	m	struct:OVERLAPPED_0_0
OffsetHigh	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub OffsetHigh: u32,$/;"	m	struct:OVERLAPPED_0_0
Once	$RUST/src/sync/once.rs	/^pub struct Once {$/;"	s
Once	$RUST/src/sys/pal/unsupported/once.rs	/^unsafe impl Sync for Once {}$/;"	c
Once	$RUST/src/sys_common/once/futex.rs	/^pub struct Once {$/;"	s
Once	$RUST/src/sys_common/once/queue.rs	/^pub struct Once {$/;"	s
OnceLock	$RUST/src/sync/once_lock.rs	/^unsafe impl<T: Sync + Send> Sync for OnceLock<T> {}$/;"	c
OnceState	$RUST/src/sync/once.rs	/^pub struct OnceState {$/;"	s
OnceState	$RUST/src/sys/pal/unsupported/once.rs	/^pub struct OnceState {$/;"	s
OnceState	$RUST/src/sys_common/once/futex.rs	/^pub struct OnceState {$/;"	s
OnceState	$RUST/src/sys_common/once/queue.rs	/^pub struct OnceState {$/;"	s
OneByteReader	$RUST/src/io/buffered/tests.rs	/^    struct OneByteReader;$/;"	s	function:bufreader_full_initialize
Open	$RUST/src/sys/pal/windows/fs.rs	/^    Open = c::FILE_FLAG_OPEN_REPARSE_POINT,$/;"	e	enum:ReparsePoint
OpenOptions	$RUST/src/fs.rs	/^pub struct OpenOptions(fs_imp::OpenOptions);$/;"	s
OpenOptions	$RUST/src/os/unix/fs.rs	/^impl OpenOptionsExt for OpenOptions {$/;"	c
OpenOptions	$RUST/src/os/wasi/fs.rs	/^impl OpenOptionsExt for OpenOptions {$/;"	c
OpenOptions	$RUST/src/os/windows/fs.rs	/^impl OpenOptionsExt for OpenOptions {$/;"	c
OpenOptions	$RUST/src/sys/pal/hermit/fs.rs	/^pub struct OpenOptions {$/;"	s
OpenOptions	$RUST/src/sys/pal/solid/fs.rs	/^pub struct OpenOptions {$/;"	s
OpenOptions	$RUST/src/sys/pal/unix/fs.rs	/^pub struct OpenOptions {$/;"	s
OpenOptions	$RUST/src/sys/pal/unsupported/fs.rs	/^pub struct OpenOptions {}$/;"	s
OpenOptions	$RUST/src/sys/pal/wasi/fs.rs	/^pub struct OpenOptions {$/;"	s
OpenOptions	$RUST/src/sys/pal/windows/fs.rs	/^unsafe impl Sync for OpenOptions {}$/;"	c
OpenOptionsExt	$RUST/src/os/unix/fs.rs	/^pub trait OpenOptionsExt {$/;"	i
OpenOptionsExt	$RUST/src/os/wasi/fs.rs	/^pub trait OpenOptionsExt {$/;"	i
OpenOptionsExt	$RUST/src/os/windows/fs.rs	/^pub trait OpenOptionsExt {$/;"	i
OpenProcessToken	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn OpenProcessToken($/;"	f	signature:( processhandle: HANDLE, desiredaccess: TOKEN_ACCESS_MASK, tokenhandle: *mut HANDLE, ) -> BOOL
Operation	$RUST/src/sync/mpmc/select.rs	/^pub struct Operation(usize);$/;"	s
Option	$RUST/src/sys/pal/sgx/abi/usercalls/raw.rs	/^impl<T: RegisterArgument> RegisterArgument for Option<NonNull<T>> {$/;"	c
OsStr	$RUST/src/ffi/os_str.rs	/^pub struct OsStr {$/;"	s
OsStr	$RUST/src/os/unix/ffi/os_str.rs	/^impl OsStrExt for OsStr {$/;"	c
OsStr	$RUST/src/os/windows/ffi.rs	/^impl OsStrExt for OsStr {$/;"	c
OsStr	$RUST/src/path.rs	/^impl AsRef<Path> for OsStr {$/;"	c
OsStrExt	$RUST/src/os/unix/ffi/os_str.rs	/^pub trait OsStrExt: Sealed {$/;"	i
OsStrExt	$RUST/src/os/windows/ffi.rs	/^pub trait OsStrExt: Sealed {$/;"	i
OsString	$RUST/src/ffi/os_str.rs	/^pub struct OsString {$/;"	s
OsString	$RUST/src/os/unix/ffi/os_str.rs	/^impl OsStringExt for OsString {$/;"	c
OsString	$RUST/src/os/windows/ffi.rs	/^impl OsStringExt for OsString {$/;"	c
OsString	$RUST/src/path.rs	/^impl From<PathBuf> for OsString {$/;"	c
OsString	$RUST/src/sys/pal/windows/process.rs	/^impl From<EnvKey> for OsString {$/;"	c
OsStringExt	$RUST/src/os/unix/ffi/os_str.rs	/^pub trait OsStringExt: Sealed {$/;"	i
OsStringExt	$RUST/src/os/windows/ffi.rs	/^pub trait OsStringExt: Sealed {$/;"	i
Other	$RUST/src/io/error.rs	/^    Other,$/;"	e	enum:ErrorKind
OutOfMemory	$RUST/src/io/error.rs	/^    OutOfMemory,$/;"	e	enum:ErrorKind
OutOfMemory	$RUST/src/os/xous/ffi/definitions.rs	/^    OutOfMemory = 3,$/;"	e	enum:Error
Output	$RUST/src/collections/hash/map.rs	/^    type Output = V;$/;"	t
Output	$RUST/src/collections/hash/set.rs	/^    type Output = HashSet<T, S>;$/;"	t
Output	$RUST/src/ffi/os_str.rs	/^    type Output = OsString;$/;"	t	implementation:S
Output	$RUST/src/os/xous/ffi/definitions/memoryflags.rs	/^    type Output = Self;$/;"	t	implementation:MemoryFlags
Output	$RUST/src/process.rs	/^pub struct Output {$/;"	s
Output	$RUST/src/sys/pal/hermit/time.rs	/^    type Output = Instant;$/;"	t	implementation:Instant
Output	$RUST/src/sys/pal/sgx/abi/usercalls/alloc.rs	/^    type Output = UserRef<I::Output>;$/;"	t
Output	$RUST/src/sys/pal/unix/kernel_copy.rs	/^    Output,$/;"	e	enum:FdHandle
Output	$RUST/src/sys_common/wtf8.rs	/^    type Output = Wtf8;$/;"	t	implementation:Wtf8
Output	$RUST/src/time.rs	/^    type Output = SystemTime;$/;"	t	implementation:SystemTime
Owned	$RUST/src/ascii.rs	/^    type Owned;$/;"	t	interface:AsciiExt
Owned	$RUST/src/ffi/os_str.rs	/^    type Owned = OsString;$/;"	t	implementation:OsStr
Owned	$RUST/src/path.rs	/^    type Owned = PathBuf;$/;"	t	implementation:Path
Owned	$RUST/src/sys/pal/unix/process/process_common.rs	/^    Owned(FileDesc),$/;"	e	enum:ChildStdio
OwnedFd	$RUST/src/os/fd/owned.rs	/^pub struct OwnedFd {$/;"	s
OwnedFd	$RUST/src/os/linux/process.rs	/^impl From<PidFd> for OwnedFd {$/;"	c
OwnedFd	$RUST/src/os/solid/io.rs	/^pub struct OwnedFd {$/;"	s
OwnedFd	$RUST/src/os/unix/net/datagram.rs	/^impl From<UnixDatagram> for OwnedFd {$/;"	c
OwnedFd	$RUST/src/os/unix/net/listener.rs	/^impl From<UnixListener> for OwnedFd {$/;"	c
OwnedFd	$RUST/src/os/unix/net/stream.rs	/^impl From<UnixStream> for OwnedFd {$/;"	c
OwnedFd	$RUST/src/os/unix/process.rs	/^impl From<crate::process::ChildStdout> for OwnedFd {$/;"	c
OwnedHandle	$RUST/src/os/windows/io/handle.rs	/^unsafe impl Sync for OwnedHandle {}$/;"	c
OwnedHandle	$RUST/src/os/windows/process.rs	/^impl From<process::Child> for OwnedHandle {$/;"	c
OwnedSocket	$RUST/src/os/windows/io/socket.rs	/^pub struct OwnedSocket {$/;"	s
P1Home	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub P1Home: u64,$/;"	m	struct:CONTEXT
P2Home	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub P2Home: u64,$/;"	m	struct:CONTEXT
P3Home	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub P3Home: u64,$/;"	m	struct:CONTEXT
P4Home	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub P4Home: u64,$/;"	m	struct:CONTEXT
P5Home	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub P5Home: u64,$/;"	m	struct:CONTEXT
P6Home	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub P6Home: u64,$/;"	m	struct:CONTEXT
PAGE_SIZE	$RUST/src/sys/pal/unix/thread.rs	/^    static PAGE_SIZE: AtomicUsize = AtomicUsize::new(0);$/;"	v	module:guard
PARKED	$RUST/src/sys/pal/unix/thread_parking/darwin.rs	/^const PARKED: i8 = -1;$/;"	C
PARKED	$RUST/src/sys/pal/unix/thread_parking/pthread.rs	/^const PARKED: usize = 1;$/;"	C
PARKED	$RUST/src/sys/pal/windows/thread_parking.rs	/^const PARKED: i8 = -1;$/;"	C
PARKED	$RUST/src/sys/pal/xous/thread_parking.rs	/^const PARKED: i8 = -1;$/;"	C
PARKED	$RUST/src/sys_common/thread_parking/futex.rs	/^const PARKED: u32 = u32::MAX;$/;"	C
PARKED	$RUST/src/sys_common/thread_parking/id.rs	/^const PARKED: i8 = -1;$/;"	C
PATH_LEN	$RUST/src/fs/tests.rs	/^    const PATH_LEN: usize = 247;$/;"	C	function:create_dir_long_paths
PCSTR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub type PCSTR = *const u8;$/;"	t
PCWSTR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub type PCWSTR = *const u16;$/;"	t
PENDING	$RUST/src/sys/pal/windows/c.rs	/^    pub const PENDING: Self =$/;"	C	implementation:IO_STATUS_BLOCK
PIDFD	$RUST/src/process/tests.rs	/^    const PIDFD: &'static str =$/;"	C	function:debug_print
PIO_APC_ROUTINE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub type PIO_APC_ROUTINE = ::core::option::Option<$/;"	t
PIPE_ACCEPT_REMOTE_CLIENTS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const PIPE_ACCEPT_REMOTE_CLIENTS: NAMED_PIPE_MODE = 0u32;$/;"	C
PIPE_ACCESS_DUPLEX	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const PIPE_ACCESS_DUPLEX: FILE_FLAGS_AND_ATTRIBUTES = 3u32;$/;"	C
PIPE_ACCESS_INBOUND	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const PIPE_ACCESS_INBOUND: FILE_FLAGS_AND_ATTRIBUTES = 1u32;$/;"	C
PIPE_ACCESS_OUTBOUND	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const PIPE_ACCESS_OUTBOUND: FILE_FLAGS_AND_ATTRIBUTES = 2u32;$/;"	C
PIPE_BUFFER_CAPACITY	$RUST/src/sys/pal/windows/pipe.rs	/^    const PIPE_BUFFER_CAPACITY: u32 = 64 * 1024;$/;"	C	function:anon_pipe
PIPE_CLIENT_END	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const PIPE_CLIENT_END: NAMED_PIPE_MODE = 0u32;$/;"	C
PIPE_NOWAIT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const PIPE_NOWAIT: NAMED_PIPE_MODE = 1u32;$/;"	C
PIPE_READMODE_BYTE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const PIPE_READMODE_BYTE: NAMED_PIPE_MODE = 0u32;$/;"	C
PIPE_READMODE_MESSAGE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const PIPE_READMODE_MESSAGE: NAMED_PIPE_MODE = 2u32;$/;"	C
PIPE_REJECT_REMOTE_CLIENTS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const PIPE_REJECT_REMOTE_CLIENTS: NAMED_PIPE_MODE = 8u32;$/;"	C
PIPE_SERVER_END	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const PIPE_SERVER_END: NAMED_PIPE_MODE = 1u32;$/;"	C
PIPE_TYPE_BYTE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const PIPE_TYPE_BYTE: NAMED_PIPE_MODE = 0u32;$/;"	C
PIPE_TYPE_MESSAGE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const PIPE_TYPE_MESSAGE: NAMED_PIPE_MODE = 4u32;$/;"	C
PIPE_WAIT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const PIPE_WAIT: NAMED_PIPE_MODE = 0u32;$/;"	C
PLARGE_INTEGER	$RUST/src/sys/pal/windows/c.rs	/^pub type PLARGE_INTEGER = *mut c_longlong;$/;"	t
POISONED	$RUST/src/sys_common/once/futex.rs	/^const POISONED: u32 = 1;$/;"	C
POISONED	$RUST/src/sys_common/once/queue.rs	/^const POISONED: usize = 0x1;$/;"	C
PORT	$RUST/src/net/test.rs	/^static PORT: AtomicUsize = AtomicUsize::new(0);$/;"	v
PREDS	$RUST/src/collections/hash/map/tests.rs	/^        static PREDS: AtomicUsize = AtomicUsize::new(0);$/;"	v	function:test_extract_if::pred_panic_reuse
PREDS	$RUST/src/collections/hash/set/tests.rs	/^    static PREDS: AtomicU32 = AtomicU32::new(0);$/;"	v	function:test_extract_if_pred_panic_leak
PRI	$RUST/src/sys/pal/itron/abi.rs	/^pub type PRI = int_t;$/;"	t
PRIORITY_HINT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub type PRIORITY_HINT = i32;$/;"	t
PROBE_SIZE	$RUST/src/io/mod.rs	/^    const PROBE_SIZE: usize = 32;$/;"	C	function:default_read_to_end
PROCESSENTRY32W	$RUST/src/process/tests.rs	/^    struct PROCESSENTRY32W {$/;"	s	function:test_proc_thread_attributes
PROCESSOR_ARCHITECTURE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub type PROCESSOR_ARCHITECTURE = u16;$/;"	t
PROCESS_CREATION_FLAGS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub type PROCESS_CREATION_FLAGS = u32;$/;"	t
PROCESS_INFORMATION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub struct PROCESS_INFORMATION {$/;"	s
PROCESS_MODE_BACKGROUND_BEGIN	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const PROCESS_MODE_BACKGROUND_BEGIN: PROCESS_CREATION_FLAGS = 1048576u32;$/;"	C
PROCESS_MODE_BACKGROUND_END	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const PROCESS_MODE_BACKGROUND_END: PROCESS_CREATION_FLAGS = 2097152u32;$/;"	C
PROC_THREAD_ATTRIBUTE_PARENT_PROCESS	$RUST/src/process/tests.rs	/^    const PROC_THREAD_ATTRIBUTE_PARENT_PROCESS: usize = 0x00020000;$/;"	C	function:test_proc_thread_attributes
PROFILE_KERNEL	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const PROFILE_KERNEL: PROCESS_CREATION_FLAGS = 536870912u32;$/;"	C
PROFILE_SERVER	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const PROFILE_SERVER: PROCESS_CREATION_FLAGS = 1073741824u32;$/;"	C
PROFILE_USER	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const PROFILE_USER: PROCESS_CREATION_FLAGS = 268435456u32;$/;"	C
PROGRESS_CONTINUE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const PROGRESS_CONTINUE: u32 = 0u32;$/;"	C
PR_SET_NAME	$RUST/src/sys/pal/unix/thread.rs	/^        const PR_SET_NAME: libc::c_int = 15;$/;"	C	method:Thread::set_name
PSRWLOCK	$RUST/src/sys/pal/windows/c.rs	/^pub type PSRWLOCK = *mut SRWLOCK;$/;"	t
PSTR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub type PSTR = *mut u8;$/;"	t
PTIMERAPCROUTINE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub type PTIMERAPCROUTINE = ::core::option::Option<$/;"	t
PWSTR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub type PWSTR = *mut u16;$/;"	t
Packet	$RUST/src/sync/mpmc/zero.rs	/^struct Packet<T> {$/;"	s
Packet	$RUST/src/sync/mutex/tests.rs	/^struct Packet<T>(Arc<(Mutex<T>, Condvar)>);$/;"	s
Packet	$RUST/src/thread/mod.rs	/^unsafe impl<'scope, T: Sync> Sync for Packet<'scope, T> {}$/;"	c
PanicGuard	$RUST/src/thread/mod.rs	/^struct PanicGuard;$/;"	s
PanicInHook	$RUST/src/panicking.rs	/^        PanicInHook,$/;"	e	enum:panic_count::MustAbort
PanicOutput	$RUST/src/sys/pal/solid/stdio.rs	/^struct PanicOutput;$/;"	s
PanicWriter	$RUST/src/io/buffered/tests.rs	/^    struct PanicWriter;$/;"	s	function:panic_in_write_doesnt_flush_in_drop
PanicWriter	$RUST/src/sys/pal/xous/stdio.rs	/^pub struct PanicWriter {$/;"	s
ParentDir	$RUST/src/path.rs	/^    ParentDir,$/;"	e	enum:Component
Parker	$RUST/src/sys/pal/unix/thread_parking/darwin.rs	/^unsafe impl Sync for Parker {}$/;"	c
Parker	$RUST/src/sys/pal/unix/thread_parking/pthread.rs	/^unsafe impl Sync for Parker {}$/;"	c
Parker	$RUST/src/sys/pal/unsupported/thread_parking.rs	/^pub struct Parker {}$/;"	s
Parker	$RUST/src/sys/pal/windows/thread_parking.rs	/^pub struct Parker {$/;"	s
Parker	$RUST/src/sys/pal/xous/thread_parking.rs	/^pub struct Parker {$/;"	s
Parker	$RUST/src/sys_common/thread_parking/futex.rs	/^pub struct Parker {$/;"	s
Parker	$RUST/src/sys_common/thread_parking/id.rs	/^unsafe impl Sync for Parker {}$/;"	c
Path	$RUST/src/path.rs	/^pub struct Path {$/;"	s
PathBuf	$RUST/src/path.rs	/^pub struct PathBuf {$/;"	s
PathBuffer	$RUST/src/sys/pal/windows/c.rs	/^    pub PathBuffer: WCHAR,$/;"	m	struct:SYMBOLIC_LINK_REPARSE_BUFFER
PathLookup	$RUST/src/sys/pal/unix/process/process_common.rs	/^    PathLookup,$/;"	e	enum:ProgramKind
Pathname	$RUST/src/os/unix/net/addr.rs	/^    Pathname(&'a Path),$/;"	e	enum:AddressKind
Payload	$RUST/src/panicking.rs	/^    unsafe impl<A: Send + 'static> PanicPayload for Payload<A> {$/;"	c	function:begin_panic
Peek	$RUST/src/sys/pal/xous/net/tcpstream.rs	/^    Peek,$/;"	e	enum:ReadOrPeek
PerformanceCounterInstant	$RUST/src/sys/pal/windows/time.rs	/^    pub struct PerformanceCounterInstant {$/;"	s	module:perf_counter
PermissionDenied	$RUST/src/io/error.rs	/^    PermissionDenied,$/;"	e	enum:ErrorKind
Permissions	$RUST/src/fs.rs	/^pub struct Permissions(fs_imp::FilePermissions);$/;"	s
Permissions	$RUST/src/os/unix/fs.rs	/^impl PermissionsExt for Permissions {$/;"	c
PermissionsExt	$RUST/src/os/unix/fs.rs	/^pub trait PermissionsExt {$/;"	i
PidFd	$RUST/src/os/linux/process.rs	/^pub struct PidFd {$/;"	s
Pipe	$RUST/src/sys/pal/unix/kernel_copy.rs	/^    Pipe,$/;"	e	enum:FdMeta
Pipe	$RUST/src/sys/pal/windows/process.rs	/^    Pipe(AnonPipe),$/;"	e	enum:Stdio
Pipes	$RUST/src/sys/pal/windows/pipe.rs	/^pub struct Pipes {$/;"	s
PoisonError	$RUST/src/sync/poison.rs	/^pub struct PoisonError<T> {$/;"	s
Poisoned	$RUST/src/sync/once.rs	/^    Poisoned,$/;"	e	enum:ExclusiveState
Poisoned	$RUST/src/sync/poison.rs	/^    Poisoned(#[stable(feature = "rust1", since = "1.0.0")] PoisonError<T>),$/;"	e	enum:TryLockError
Poisoned	$RUST/src/sys/pal/unsupported/once.rs	/^    Poisoned,$/;"	e	enum:State
Position	$RUST/src/sync/mpmc/list.rs	/^struct Position<T> {$/;"	s
PositionReader	$RUST/src/io/buffered/tests.rs	/^    struct PositionReader {$/;"	s	function:test_buffered_reader_seek_underflow
PosixSpawnFileActions	$RUST/src/sys/pal/unix/process/process_unix.rs	/^        struct PosixSpawnFileActions<'a>(&'a mut MaybeUninit<libc::posix_spawn_file_actions_t>);$/;"	s	method:Command::posix_spawn
PosixSpawnattr	$RUST/src/sys/pal/unix/process/process_unix.rs	/^        struct PosixSpawnattr<'a>(&'a mut MaybeUninit<libc::posix_spawnattr_t>);$/;"	s	method:Command::posix_spawn
Prefix	$RUST/src/path.rs	/^pub enum Prefix<'a> {$/;"	g
PrefixComponent	$RUST/src/path.rs	/^pub struct PrefixComponent<'a> {$/;"	s
PrintNameLength	$RUST/src/sys/pal/windows/c.rs	/^    pub PrintNameLength: c_ushort,$/;"	m	struct:SYMBOLIC_LINK_REPARSE_BUFFER
PrintNameOffset	$RUST/src/sys/pal/windows/c.rs	/^    pub PrintNameOffset: c_ushort,$/;"	m	struct:SYMBOLIC_LINK_REPARSE_BUFFER
PriorityHint	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub PriorityHint: PRIORITY_HINT,$/;"	m	struct:FILE_IO_PRIORITY_HINT_INFO
ProcThreadAttributeList	$RUST/src/sys/pal/windows/process.rs	/^struct ProcThreadAttributeList(Box<[MaybeUninit<u8>]>);$/;"	s
ProcThreadAttributeValue	$RUST/src/sys/pal/windows/process.rs	/^struct ProcThreadAttributeValue {$/;"	s
Process	$RUST/src/sys/pal/unix/process/process_fuchsia.rs	/^pub struct Process {$/;"	s
Process	$RUST/src/sys/pal/unix/process/process_unix.rs	/^pub struct Process {$/;"	s
Process	$RUST/src/sys/pal/unix/process/process_unsupported.rs	/^pub struct Process {$/;"	s
Process	$RUST/src/sys/pal/unix/process/process_vxworks.rs	/^pub struct Process {$/;"	s
Process	$RUST/src/sys/pal/unsupported/process.rs	/^pub struct Process(!);$/;"	s
Process	$RUST/src/sys/pal/windows/process.rs	/^pub struct Process {$/;"	s
Process32First	$RUST/src/process/tests.rs	/^        fn Process32First(hsnapshot: HANDLE, lppe: *mut PROCESSENTRY32W) -> BOOL;$/;"	f	function:test_proc_thread_attributes	signature:(hsnapshot: HANDLE, lppe: *mut PROCESSENTRY32W) -> BOOL
Process32Next	$RUST/src/process/tests.rs	/^        fn Process32Next(hsnapshot: HANDLE, lppe: *mut PROCESSENTRY32W) -> BOOL;$/;"	f	function:test_proc_thread_attributes	signature:(hsnapshot: HANDLE, lppe: *mut PROCESSENTRY32W) -> BOOL
ProcessDropGuard	$RUST/src/process/tests.rs	/^    struct ProcessDropGuard(crate::process::Child);$/;"	s	function:test_proc_thread_attributes
ProcessNotChild	$RUST/src/os/xous/ffi/definitions.rs	/^    ProcessNotChild = 11,$/;"	e	enum:Error
ProcessNotFound	$RUST/src/os/xous/ffi/definitions.rs	/^    ProcessNotFound = 10,$/;"	e	enum:Error
ProcessTerminated	$RUST/src/os/xous/ffi/definitions.rs	/^    ProcessTerminated = 12,$/;"	e	enum:Error
ProgramKind	$RUST/src/sys/pal/unix/process/process_common.rs	/^pub enum ProgramKind {$/;"	g
ProgrammableSink	$RUST/src/io/buffered/tests.rs	/^struct ProgrammableSink {$/;"	s
ProtocolChain	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub ProtocolChain: WSAPROTOCOLCHAIN,$/;"	m	struct:WSAPROTOCOL_INFOW
ProviderId	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub ProviderId: GUID,$/;"	m	struct:WSAPROTOCOL_INFOW
PthreadMutexAttr	$RUST/src/sys/pal/unix/locks/pthread_mutex.rs	/^pub(super) struct PthreadMutexAttr<'a>(pub &'a mut MaybeUninit<libc::pthread_mutexattr_t>);$/;"	s
Ptr	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub Ptr: *mut ::core::ffi::c_void,$/;"	m	struct:SRWLOCK
QUERY	$RUST/src/sys/pal/windows/args.rs	/^    const QUERY: u16 = b'?' as _;$/;"	C	function:from_wide_to_user_path
QUEUED	$RUST/src/sys_common/once/futex.rs	/^const QUEUED: u32 = 3;$/;"	C
QUOTE	$RUST/src/sys/pal/uefi/args.rs	/^    const QUOTE: char = '"';$/;"	C	function:parse_lp_cmd_line
QUOTE	$RUST/src/sys/pal/windows/args.rs	/^    const QUOTE: NonZeroU16 = non_zero_u16(b'"' as u16);$/;"	C	function:parse_lp_cmd_line
QWORD_SIZE	$RUST/src/sys/pal/sgx/abi/usercalls/alloc.rs	/^    const QWORD_SIZE: usize = mem::size_of::<u64>();$/;"	C	function:u64_align_to_guaranteed
QueryPerformanceCounter	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn QueryPerformanceCounter(lpperformancecount: *mut i64) -> BOOL;$/;"	f	signature:(lpperformancecount: *mut i64) -> BOOL
QueryPerformanceFrequency	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn QueryPerformanceFrequency(lpfrequency: *mut i64) -> BOOL;$/;"	f	signature:(lpfrequency: *mut i64) -> BOOL
Quote	$RUST/src/sys/pal/windows/args.rs	/^enum Quote {$/;"	g
R10	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub R10: u64,$/;"	m	struct:CONTEXT
R11	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub R11: u64,$/;"	m	struct:CONTEXT
R12	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub R12: u64,$/;"	m	struct:CONTEXT
R13	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub R13: u64,$/;"	m	struct:CONTEXT
R14	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub R14: u64,$/;"	m	struct:CONTEXT
R15	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub R15: u64,$/;"	m	struct:CONTEXT
READ	$RUST/src/sync/mpmc/list.rs	/^const READ: usize = 2;$/;"	C
READERS_WAITING	$RUST/src/sys/pal/unix/locks/futex_rwlock.rs	/^const READERS_WAITING: u32 = 1 << 30;$/;"	C
READ_CONTROL	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const READ_CONTROL: FILE_ACCESS_RIGHTS = 131072u32;$/;"	C
READ_LIMIT	$RUST/src/sys/pal/solid/net.rs	/^const READ_LIMIT: usize = libc::ssize_t::MAX as usize;$/;"	C
READ_LIMIT	$RUST/src/sys/pal/unix/fd.rs	/^const READ_LIMIT: usize = libc::ssize_t::MAX as usize;$/;"	C
READ_LOCKED	$RUST/src/sys/pal/unix/locks/futex_rwlock.rs	/^const READ_LOCKED: u32 = 1;$/;"	C
REALTIME_PRIORITY_CLASS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const REALTIME_PRIORITY_CLASS: PROCESS_CREATION_FLAGS = 256u32;$/;"	C
REGISTERED	$RUST/src/sys/pal/solid/thread_local_dtor.rs	/^static REGISTERED: Cell<bool> = Cell::new(false);$/;"	v
REGISTERED	$RUST/src/sys/pal/unix/thread_local_dtor.rs	/^    static REGISTERED: Cell<bool> = Cell::new(false);$/;"	v	function:register_dtor
RELA	$RUST/src/sys/pal/sgx/abi/reloc.rs	/^        static RELA: u64;$/;"	v	function:relocate_elf_rela
RELACOUNT	$RUST/src/sys/pal/sgx/abi/reloc.rs	/^        static RELACOUNT: usize;$/;"	v	function:relocate_elf_rela
RELOC_STATE	$RUST/src/sys/pal/sgx/abi/mod.rs	/^    static RELOC_STATE: AtomicUsize = AtomicUsize::new(UNINIT);$/;"	v	function:tcs_init
RELTIM	$RUST/src/sys/pal/itron/abi.rs	/^pub type RELTIM = u32;$/;"	t
REPARSE_DATA_BUFFER	$RUST/src/sys/pal/windows/c.rs	/^pub struct REPARSE_DATA_BUFFER {$/;"	s
REPARSE_MOUNTPOINT_DATA_BUFFER	$RUST/src/sys/pal/windows/c.rs	/^pub struct REPARSE_MOUNTPOINT_DATA_BUFFER {$/;"	s
RESERVE	$RUST/src/os/xous/ffi/definitions/memoryflags.rs	/^    pub const RESERVE: Self = Self { bits: 0b0000_0001 };$/;"	C	implementation:MemoryFlags
RNG_INIT	$RUST/src/sys/pal/unix/rand.rs	/^        static RNG_INIT: AtomicBool = AtomicBool::new(false);$/;"	v	function:imp::fill_bytes
RUN	$RUST/src/sync/once/tests.rs	/^    static mut RUN: bool = false;$/;"	v	function:stampede_once
RUNNING	$RUST/src/sys_common/once/futex.rs	/^const RUNNING: u32 = 2;$/;"	C
RUNNING	$RUST/src/sys_common/once/queue.rs	/^const RUNNING: usize = 0x2;$/;"	C
RUST_RWLOCK_INIT	$RUST/src/sys/pal/sgx/rwlock/tests.rs	/^    static RUST_RWLOCK_INIT: RwLock = RwLock::new();$/;"	v	function:test_c_rwlock_initializer
RWLOCK_FREE	$RUST/src/sys/pal/xous/locks/rwlock.rs	/^const RWLOCK_FREE: isize = 0;$/;"	C
RWLOCK_WRITING	$RUST/src/sys/pal/xous/locks/rwlock.rs	/^const RWLOCK_WRITING: isize = -1;$/;"	C
R_X86_64_RELATIVE	$RUST/src/sys/pal/sgx/abi/reloc.rs	/^const R_X86_64_RELATIVE: u32 = 8;$/;"	C
RandomState	$RUST/src/hash/random.rs	/^pub struct RandomState {$/;"	s
Raw	$RUST/src/sys/pal/windows/args.rs	/^    Raw(OsString),$/;"	e	enum:Arg
RawEntryBuilder	$RUST/src/collections/hash/map.rs	/^pub struct RawEntryBuilder<'a, K: 'a, V: 'a, S: 'a> {$/;"	s
RawEntryBuilderMut	$RUST/src/collections/hash/map.rs	/^pub struct RawEntryBuilderMut<'a, K: 'a, V: 'a, S: 'a> {$/;"	s
RawEntryMut	$RUST/src/collections/hash/map.rs	/^pub enum RawEntryMut<'a, K: 'a, V: 'a, S: 'a> {$/;"	g
RawFd	$RUST/src/os/fd/raw.rs	/^pub type RawFd = raw::c_int;$/;"	t
RawFd	$RUST/src/os/solid/io.rs	/^pub type RawFd = i32;$/;"	t
RawFrame	$RUST/src/backtrace.rs	/^impl RawFrame {$/;"	c
RawHandle	$RUST/src/os/windows/io/raw.rs	/^pub type RawHandle = raw::HANDLE;$/;"	t
RawLookup	$RUST/src/os/xous/services/dns.rs	/^    RawLookup = 6,$/;"	e	enum:DnsLendMut
RawOccupiedEntryMut	$RUST/src/collections/hash/map.rs	/^pub struct RawOccupiedEntryMut<'a, K: 'a, V: 'a, S: 'a> {$/;"	s
RawOsError	$RUST/src/io/error.rs	/^pub type RawOsError = sys::RawOsError;$/;"	t
RawOsError	$RUST/src/sys/pal/mod.rs	/^pub type RawOsError = i32;$/;"	t
RawOsError	$RUST/src/sys/pal/uefi/mod.rs	/^pub type RawOsError = usize;$/;"	t
RawPthread	$RUST/src/os/unix/thread.rs	/^pub type RawPthread = pthread_t;$/;"	t
RawSocket	$RUST/src/os/windows/io/raw.rs	/^pub type RawSocket = raw::SOCKET;$/;"	t
RawVacantEntryMut	$RUST/src/collections/hash/map.rs	/^pub struct RawVacantEntryMut<'a, K: 'a, V: 'a, S: 'a> {$/;"	s
Rax	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub Rax: u64,$/;"	m	struct:CONTEXT
Rbp	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub Rbp: u64,$/;"	m	struct:CONTEXT
Rbx	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub Rbx: u64,$/;"	m	struct:CONTEXT
Rcx	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub Rcx: u64,$/;"	m	struct:CONTEXT
Rdi	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub Rdi: u64,$/;"	m	struct:CONTEXT
Rdx	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub Rdx: u64,$/;"	m	struct:CONTEXT
Read	$RUST/src/io/mod.rs	/^pub trait Read {$/;"	i
Read	$RUST/src/net/mod.rs	/^    Read,$/;"	e	enum:Shutdown
Read	$RUST/src/sys/pal/windows/pipe.rs	/^    Read(usize),$/;"	e	enum:State
Read	$RUST/src/sys/pal/xous/net/tcpstream.rs	/^    Read,$/;"	e	enum:ReadOrPeek
ReadConsoleW	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn ReadConsoleW($/;"	f	signature:( hconsoleinput: HANDLE, lpbuffer: *mut ::core::ffi::c_void, nnumberofcharstoread: u32, lpnumberofcharsread: *mut u32, pinputcontrol: *const CONSOLE_READCONSOLE_CONTROL, ) -> BOOL
ReadDir	$RUST/src/fs.rs	/^pub struct ReadDir(fs_imp::ReadDir);$/;"	s
ReadDir	$RUST/src/sys/pal/hermit/fs.rs	/^pub struct ReadDir(!);$/;"	s
ReadDir	$RUST/src/sys/pal/solid/fs.rs	/^pub struct ReadDir {$/;"	s
ReadDir	$RUST/src/sys/pal/unix/fs.rs	/^pub struct ReadDir {$/;"	s
ReadDir	$RUST/src/sys/pal/unsupported/fs.rs	/^pub struct ReadDir(!);$/;"	s
ReadDir	$RUST/src/sys/pal/wasi/fs.rs	/^pub struct ReadDir {$/;"	s
ReadDir	$RUST/src/sys/pal/windows/fs.rs	/^pub struct ReadDir {$/;"	s
ReadDirInner	$RUST/src/sys/pal/wasi/fs.rs	/^struct ReadDirInner {$/;"	s
ReadFile	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn ReadFile($/;"	f	signature:( hfile: HANDLE, lpbuffer: *mut u8, nnumberofbytestoread: u32, lpnumberofbytesread: *mut u32, lpoverlapped: *mut OVERLAPPED, ) -> BOOL
ReadFileEx	$RUST/src/sys/pal/windows/c.rs	/^pub unsafe extern "system" fn ReadFileEx($/;"	f	signature:( hFile: BorrowedHandle<'_>, lpBuffer: *mut ::core::ffi::c_void, nNumberOfBytesToRead: u32, lpOverlapped: *mut OVERLAPPED, lpCompletionRoutine: LPOVERLAPPED_COMPLETION_ROUTINE, ) -> BOOL
ReadFileEx	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn ReadFileEx($/;"	f	signature:( hfile: HANDLE, lpbuffer: *mut u8, nnumberofbytestoread: u32, lpoverlapped: *mut OVERLAPPED, lpcompletionroutine: LPOVERLAPPED_COMPLETION_ROUTINE, ) -> BOOL
ReadOnlyFilesystem	$RUST/src/io/error.rs	/^    ReadOnlyFilesystem,$/;"	e	enum:ErrorKind
ReadOrPeek	$RUST/src/sys/pal/xous/net/tcpstream.rs	/^enum ReadOrPeek {$/;"	g
Reading	$RUST/src/sys/pal/windows/pipe.rs	/^    Reading,$/;"	e	enum:State
ReceiveData	$RUST/src/sys/pal/xous/net/mod.rs	/^pub struct ReceiveData {$/;"	s
ReceiveMessage	$RUST/src/os/xous/ffi/definitions.rs	/^    ReceiveMessage = 15,$/;"	e	enum:Syscall
Receiver	$RUST/src/sync/mpmc/counter.rs	/^pub(crate) struct Receiver<C> {$/;"	s
Receiver	$RUST/src/sync/mpmc/mod.rs	/^unsafe impl<T: Send> Sync for Receiver<T> {}$/;"	c
Receiver	$RUST/src/sync/mpsc/mod.rs	/^unsafe impl<T: Send> Send for Receiver<T> {}$/;"	c
ReceiverFlavor	$RUST/src/sync/mpmc/mod.rs	/^enum ReceiverFlavor<T> {$/;"	g
RecordedEvent	$RUST/src/io/buffered/tests.rs	/^enum RecordedEvent {$/;"	g
RecvError	$RUST/src/sync/mpsc/mod.rs	/^pub struct RecvError;$/;"	s
RecvTimeoutError	$RUST/src/sync/mpsc/mod.rs	/^pub enum RecvTimeoutError {$/;"	g
ReentrantMutex	$RUST/src/sync/remutex.rs	/^unsafe impl<T: Send> Sync for ReentrantMutex<T> {}$/;"	c
ReentrantMutexGuard	$RUST/src/sync/remutex.rs	/^pub struct ReentrantMutexGuard<'a, T: 'a> {$/;"	s
Register	$RUST/src/sys/pal/sgx/abi/usercalls/raw.rs	/^pub type Register = u64;$/;"	t
RegisterArea	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub RegisterArea: [u8; 80],$/;"	m	struct:FLOATING_SAVE_AREA
RegisterArgument	$RUST/src/sys/pal/sgx/abi/usercalls/raw.rs	/^pub trait RegisterArgument {$/;"	i
Registered	$RUST/src/sys/pal/common/thread_local/fast_local.rs	/^    Registered,$/;"	e	enum:DtorState
Regular	$RUST/src/sys/pal/windows/args.rs	/^    Regular(OsString),$/;"	e	enum:Arg
Rela	$RUST/src/sys/pal/sgx/abi/reloc.rs	/^struct Rela<T> {$/;"	s
Relative	$RUST/src/sys/pal/unix/process/process_common.rs	/^    Relative,$/;"	e	enum:ProgramKind
Release1	$RUST/src/io/stdio/tests.rs	/^        Release1,$/;"	e	enum:test_lock::State
Release2	$RUST/src/io/stdio/tests.rs	/^        Release2,$/;"	e	enum:test_lock::State
ReleaseSRWLockExclusive	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn ReleaseSRWLockExclusive(srwlock: *mut SRWLOCK) -> ();$/;"	f	signature:(srwlock: *mut SRWLOCK) -> ()
ReleaseSRWLockShared	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn ReleaseSRWLockShared(srwlock: *mut SRWLOCK) -> ();$/;"	f	signature:(srwlock: *mut SRWLOCK) -> ()
RemoveDirectoryW	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn RemoveDirectoryW(lppathname: PCWSTR) -> BOOL;$/;"	f	signature:(lppathname: PCWSTR) -> BOOL
ReparseDataLength	$RUST/src/sys/pal/windows/c.rs	/^    pub ReparseDataLength: c_ushort,$/;"	m	struct:REPARSE_DATA_BUFFER
ReparsePoint	$RUST/src/sys/pal/windows/fs.rs	/^impl ReparsePoint {$/;"	c
ReparseTag	$RUST/src/sys/pal/windows/c.rs	/^    pub ReparseTag: c_uint,$/;"	m	struct:REPARSE_DATA_BUFFER
ReparseTag	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub ReparseTag: u32,$/;"	m	struct:FILE_ATTRIBUTE_TAG_INFO
ReparseTarget	$RUST/src/sys/pal/windows/c.rs	/^    pub ReparseTarget: WCHAR,$/;"	m	struct:REPARSE_MOUNTPOINT_DATA_BUFFER
ReparseTargetLength	$RUST/src/sys/pal/windows/c.rs	/^    pub ReparseTargetLength: WORD,$/;"	m	struct:REPARSE_MOUNTPOINT_DATA_BUFFER
ReparseTargetMaximumLength	$RUST/src/sys/pal/windows/c.rs	/^    pub ReparseTargetMaximumLength: WORD,$/;"	m	struct:REPARSE_MOUNTPOINT_DATA_BUFFER
Repeat	$RUST/src/io/util.rs	/^pub struct Repeat {$/;"	s
Report	$RUST/src/error.rs	/^pub struct Report<E = Box<dyn Error>> {$/;"	s
Repr	$RUST/src/io/error.rs	/^impl fmt::Debug for Repr {$/;"	c
Repr	$RUST/src/io/error/repr_bitpacked.rs	/^unsafe impl Sync for Repr {}$/;"	c
Repr	$RUST/src/io/error/repr_unpacked.rs	/^pub(super) struct Repr(Inner);$/;"	s
Request	$RUST/src/sys/pal/xous/stdio.rs	/^            struct Request([u8; 4096]);$/;"	s	method:PanicWriter::write
Reserved	$RUST/src/sys/pal/windows/c.rs	/^    pub Reserved: c_ushort,$/;"	m	struct:REPARSE_DATA_BUFFER
Reserved1	$RUST/src/sys/pal/windows/c.rs	/^    pub Reserved1: WORD,$/;"	m	struct:REPARSE_MOUNTPOINT_DATA_BUFFER
Reserved1	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub Reserved1: u8,$/;"	m	struct:XSAVE_FORMAT
Reserved2	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub Reserved2: u16,$/;"	m	struct:XSAVE_FORMAT
Reserved3	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub Reserved3: u16,$/;"	m	struct:XSAVE_FORMAT
Reserved4	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub Reserved4: [u8; 96],$/;"	m	struct:XSAVE_FORMAT
Reset	$RUST/src/sys/pal/unix/process/process_unix.rs	/^            struct Reset(*const *const libc::c_char);$/;"	s	method:Command::do_exec
ResourceBusy	$RUST/src/io/error.rs	/^    ResourceBusy,$/;"	e	enum:ErrorKind
Result	$RUST/src/io/error.rs	/^pub type Result<T> = result::Result<T, Error>;$/;"	t
Result	$RUST/src/process.rs	/^impl<T: Termination, E: fmt::Debug> Termination for Result<T, E> {$/;"	c
Result	$RUST/src/sys/pal/sgx/abi/usercalls/mod.rs	/^impl FromSgxResult for Result {$/;"	c
Result	$RUST/src/sys/pal/windows/mod.rs	/^impl<T> IoResult<T> for Result<T, api::WinError> {$/;"	c
Result	$RUST/src/thread/mod.rs	/^pub type Result<T> = crate::result::Result<T, Box<dyn Any + Send + 'static>>;$/;"	t
ResumeThread	$RUST/src/sys/pal/windows/process/tests.rs	/^        fn ResumeThread(_: BorrowedHandle<'_>) -> u32;$/;"	f	function:test_thread_handle	signature:(_: BorrowedHandle<'_>) -> u32
Return	$RUST/src/sys/pal/sgx/abi/usercalls/alloc.rs	/^unsafe impl UserSafeSized for Return {}$/;"	c
Return	$RUST/src/sys/pal/sgx/abi/usercalls/mod.rs	/^    type Return;$/;"	t	interface:FromSgxResult
ReturnMemory	$RUST/src/os/xous/ffi/definitions.rs	/^    ReturnMemory = 20,$/;"	e	enum:Syscall
ReturnScalar	$RUST/src/os/xous/ffi/definitions.rs	/^    ReturnScalar = 40,$/;"	e	enum:Syscall
ReturnValue	$RUST/src/sys/pal/sgx/abi/usercalls/raw.rs	/^pub trait ReturnValue {$/;"	i
RewrapBox	$RUST/src/panicking.rs	/^    unsafe impl PanicPayload for RewrapBox {$/;"	c	function:rust_panic_without_hook
Rip	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub Rip: u64,$/;"	m	struct:CONTEXT
RootDir	$RUST/src/path.rs	/^    RootDir,$/;"	e	enum:Component
RootDirectory	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub RootDirectory: HANDLE,$/;"	m	struct:OBJECT_ATTRIBUTES
Rsi	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub Rsi: u64,$/;"	m	struct:CONTEXT
Rsp	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub Rsp: u64,$/;"	m	struct:CONTEXT
RtlGenRandom	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn RtlGenRandom(randombuffer: *mut ::core::ffi::c_void, randombufferlength: u32)$/;"	f	signature:(randombuffer: *mut ::core::ffi::c_void, randombufferlength: u32) -> BOOLEAN
RtlNtStatusToDosError	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn RtlNtStatusToDosError(status: NTSTATUS) -> u32;$/;"	f	signature:(status: NTSTATUS) -> u32
Running	$RUST/src/sys/pal/unsupported/once.rs	/^    Running,$/;"	e	enum:State
RunningOrHasRun	$RUST/src/sys/pal/common/thread_local/fast_local.rs	/^    RunningOrHasRun,$/;"	e	enum:DtorState
RwLock	$RUST/src/panic.rs	/^impl<T: ?Sized> UnwindSafe for RwLock<T> {}$/;"	c
RwLock	$RUST/src/sync/rwlock.rs	/^unsafe impl<T: ?Sized + Send> Send for RwLock<T> {}$/;"	c
RwLock	$RUST/src/sys/pal/sgx/rwlock.rs	/^pub struct RwLock {$/;"	s
RwLock	$RUST/src/sys/pal/solid/rwlock.rs	/^unsafe impl Sync for RwLock {}$/;"	c
RwLock	$RUST/src/sys/pal/teeos/locks/rwlock.rs	/^pub struct RwLock {$/;"	s
RwLock	$RUST/src/sys/pal/unix/locks/futex_rwlock.rs	/^pub struct RwLock {$/;"	s
RwLock	$RUST/src/sys/pal/unix/locks/pthread_rwlock.rs	/^pub struct RwLock {$/;"	s
RwLock	$RUST/src/sys/pal/unsupported/locks/rwlock.rs	/^unsafe impl Sync for RwLock {} \/\/ no threads on this platform$/;"	c
RwLock	$RUST/src/sys/pal/windows/locks/rwlock.rs	/^unsafe impl Sync for RwLock {}$/;"	c
RwLock	$RUST/src/sys/pal/xous/locks/rwlock.rs	/^unsafe impl Sync for RwLock {}$/;"	c
RwLockReadGuard	$RUST/src/sync/rwlock.rs	/^unsafe impl<T: ?Sized + Sync> Sync for RwLockReadGuard<'_, T> {}$/;"	c
RwLockWriteGuard	$RUST/src/sync/rwlock.rs	/^unsafe impl<T: ?Sized + Sync> Sync for RwLockWriteGuard<'_, T> {}$/;"	c
SCM_MSG_LEN	$RUST/src/sys/pal/unix/process/process_unix.rs	/^            const SCM_MSG_LEN: usize = mem::size_of::<[c_int; 1]>();$/;"	C	method:Command::send_pidfd
SD_BOTH	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const SD_BOTH: WINSOCK_SHUTDOWN_HOW = 2i32;$/;"	C
SD_RECEIVE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const SD_RECEIVE: WINSOCK_SHUTDOWN_HOW = 0i32;$/;"	C
SD_SEND	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const SD_SEND: WINSOCK_SHUTDOWN_HOW = 1i32;$/;"	C
SECURITY_ANONYMOUS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const SECURITY_ANONYMOUS: FILE_FLAGS_AND_ATTRIBUTES = 0u32;$/;"	C
SECURITY_ATTRIBUTES	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub struct SECURITY_ATTRIBUTES {$/;"	s
SECURITY_CONTEXT_TRACKING	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const SECURITY_CONTEXT_TRACKING: FILE_FLAGS_AND_ATTRIBUTES = 262144u32;$/;"	C
SECURITY_DELEGATION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const SECURITY_DELEGATION: FILE_FLAGS_AND_ATTRIBUTES = 196608u32;$/;"	C
SECURITY_EFFECTIVE_ONLY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const SECURITY_EFFECTIVE_ONLY: FILE_FLAGS_AND_ATTRIBUTES = 524288u32;$/;"	C
SECURITY_IDENTIFICATION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const SECURITY_IDENTIFICATION: FILE_FLAGS_AND_ATTRIBUTES = 65536u32;$/;"	C
SECURITY_IMPERSONATION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const SECURITY_IMPERSONATION: FILE_FLAGS_AND_ATTRIBUTES = 131072u32;$/;"	C
SECURITY_SQOS_PRESENT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const SECURITY_SQOS_PRESENT: FILE_FLAGS_AND_ATTRIBUTES = 1048576u32;$/;"	C
SECURITY_VALID_SQOS_FLAGS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const SECURITY_VALID_SQOS_FLAGS: FILE_FLAGS_AND_ATTRIBUTES = 2031616u32;$/;"	C
SEND_RECV_FLAGS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub type SEND_RECV_FLAGS = i32;$/;"	t
SEP	$RUST/src/sys/pal/windows/args.rs	/^    const SEP: u16 = b'\\\\' as _;$/;"	C	function:from_wide_to_user_path
SET_FILE_POINTER_MOVE_METHOD	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub type SET_FILE_POINTER_MOVE_METHOD = u32;$/;"	t
SGX_INEFFECTIVE_ERROR	$RUST/src/sys/pal/sgx/mod.rs	/^    static SGX_INEFFECTIVE_ERROR: AtomicBool = AtomicBool::new(false);$/;"	v	function:sgx_ineffective
SHIFT	$RUST/src/sync/mpmc/list.rs	/^const SHIFT: usize = 1;$/;"	C
SHOULD_CAPTURE	$RUST/src/panic.rs	/^static SHOULD_CAPTURE: AtomicUsize = AtomicUsize::new(0);$/;"	v
SHUT_RD	$RUST/src/sys/pal/solid/abi/sockets.rs	/^pub const SHUT_RD: i32 = 0;$/;"	C
SHUT_RDWR	$RUST/src/sys/pal/solid/abi/sockets.rs	/^pub const SHUT_RDWR: i32 = 2;$/;"	C
SHUT_WR	$RUST/src/sys/pal/solid/abi/sockets.rs	/^pub const SHUT_WR: i32 = 1;$/;"	C
SIG_DFL	$RUST/src/sys/pal/unix/mod.rs	/^                pub const SIG_DFL: u8 = 3;$/;"	C	module:init::reset_sigpipe::sigpipe
SIG_IGN	$RUST/src/sys/pal/unix/mod.rs	/^                pub const SIG_IGN: u8 = 2;$/;"	C	module:init::reset_sigpipe::sigpipe
SIMPLE_MESSAGE	$RUST/src/io/error/tests.rs	/^    const SIMPLE_MESSAGE: SimpleMessage =$/;"	C	function:test_std_io_error_downcast
SIZE_T	$RUST/src/sys/pal/windows/c.rs	/^pub type SIZE_T = usize;$/;"	t
SOCKADDR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub struct SOCKADDR {$/;"	s
SOCKADDR_STORAGE_LH	$RUST/src/sys/pal/windows/c.rs	/^pub struct SOCKADDR_STORAGE_LH {$/;"	s
SOCKADDR_UN	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub struct SOCKADDR_UN {$/;"	s
SOCKET	$RUST/src/os/windows/raw.rs	/^pub type SOCKET = u64;$/;"	t
SOCKET	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub type SOCKET = usize;$/;"	t
SOCKET_ERROR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const SOCKET_ERROR: i32 = -1i32;$/;"	C
SOCK_DGRAM	$RUST/src/sys/pal/solid/abi/sockets.rs	/^pub const SOCK_DGRAM: i32 = 2;$/;"	C
SOCK_DGRAM	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const SOCK_DGRAM: WINSOCK_SOCKET_TYPE = 2i32;$/;"	C
SOCK_RAW	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const SOCK_RAW: WINSOCK_SOCKET_TYPE = 3i32;$/;"	C
SOCK_RDM	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const SOCK_RDM: WINSOCK_SOCKET_TYPE = 4i32;$/;"	C
SOCK_SEQPACKET	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const SOCK_SEQPACKET: WINSOCK_SOCKET_TYPE = 5i32;$/;"	C
SOCK_STREAM	$RUST/src/sys/pal/solid/abi/sockets.rs	/^pub const SOCK_STREAM: i32 = 1;$/;"	C
SOCK_STREAM	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const SOCK_STREAM: WINSOCK_SOCKET_TYPE = 1i32;$/;"	C
SOLID_ERR_ALREADYUSED	$RUST/src/sys/pal/solid/abi/mod.rs	/^pub const SOLID_ERR_ALREADYUSED: ER = -1005;$/;"	C
SOLID_ERR_BADSEQUENCE	$RUST/src/sys/pal/solid/abi/mod.rs	/^pub const SOLID_ERR_BADSEQUENCE: ER = -1007;$/;"	C
SOLID_ERR_BUSY	$RUST/src/sys/pal/solid/abi/mod.rs	/^pub const SOLID_ERR_BUSY: ER = -1009;$/;"	C
SOLID_ERR_EBADF	$RUST/src/sys/pal/solid/abi/mod.rs	/^pub const SOLID_ERR_EBADF: ER = -1002;$/;"	C
SOLID_ERR_INVALIDACCESS	$RUST/src/sys/pal/solid/abi/mod.rs	/^pub const SOLID_ERR_INVALIDACCESS: ER = -1011;$/;"	C
SOLID_ERR_INVALIDCONTENT	$RUST/src/sys/pal/solid/abi/mod.rs	/^pub const SOLID_ERR_INVALIDCONTENT: ER = -1003;$/;"	C
SOLID_ERR_NOTFOUND	$RUST/src/sys/pal/solid/abi/mod.rs	/^pub const SOLID_ERR_NOTFOUND: ER = -1000;$/;"	C
SOLID_ERR_NOTREADY	$RUST/src/sys/pal/solid/abi/mod.rs	/^pub const SOLID_ERR_NOTREADY: ER = -1012;$/;"	C
SOLID_ERR_NOTSUPPORTED	$RUST/src/sys/pal/solid/abi/mod.rs	/^pub const SOLID_ERR_NOTSUPPORTED: ER = -1001;$/;"	C
SOLID_ERR_NOTUSED	$RUST/src/sys/pal/solid/abi/mod.rs	/^pub const SOLID_ERR_NOTUSED: ER = -1004;$/;"	C
SOLID_ERR_OUTOFBOUND	$RUST/src/sys/pal/solid/abi/mod.rs	/^pub const SOLID_ERR_OUTOFBOUND: ER = -1006;$/;"	C
SOLID_ERR_TIMEOUT	$RUST/src/sys/pal/solid/abi/mod.rs	/^pub const SOLID_ERR_TIMEOUT: ER = -1010;$/;"	C
SOLID_ERR_UNKNOWNDEVICE	$RUST/src/sys/pal/solid/abi/mod.rs	/^pub const SOLID_ERR_UNKNOWNDEVICE: ER = -1008;$/;"	C
SOLID_FS_Chmod	$RUST/src/sys/pal/solid/abi/fs.rs	/^    pub fn SOLID_FS_Chmod(path: *const c_char, mode: c_int) -> c_int;$/;"	f	signature:(path: *const c_char, mode: c_int) -> c_int
SOLID_FS_Close	$RUST/src/sys/pal/solid/abi/fs.rs	/^    pub fn SOLID_FS_Close(fd: c_int) -> c_int;$/;"	f	signature:(fd: c_int) -> c_int
SOLID_FS_CloseDir	$RUST/src/sys/pal/solid/abi/fs.rs	/^    pub fn SOLID_FS_CloseDir(dir: S_DIR) -> c_int;$/;"	f	signature:(dir: S_DIR) -> c_int
SOLID_FS_Feof	$RUST/src/sys/pal/solid/abi/fs.rs	/^    pub fn SOLID_FS_Feof(fd: c_int, result: *mut c_int) -> c_int;$/;"	f	signature:(fd: c_int, result: *mut c_int) -> c_int
SOLID_FS_Fsize	$RUST/src/sys/pal/solid/abi/fs.rs	/^    pub fn SOLID_FS_Fsize(fd: c_int, result: *mut usize) -> c_int;$/;"	f	signature:(fd: c_int, result: *mut usize) -> c_int
SOLID_FS_Ftell	$RUST/src/sys/pal/solid/abi/fs.rs	/^    pub fn SOLID_FS_Ftell(fd: c_int, result: *mut off_t) -> c_int;$/;"	f	signature:(fd: c_int, result: *mut off_t) -> c_int
SOLID_FS_Lseek	$RUST/src/sys/pal/solid/abi/fs.rs	/^    pub fn SOLID_FS_Lseek(fd: c_int, offset: off_t, whence: c_int) -> c_int;$/;"	f	signature:(fd: c_int, offset: off_t, whence: c_int) -> c_int
SOLID_FS_Mkdir	$RUST/src/sys/pal/solid/abi/fs.rs	/^    pub fn SOLID_FS_Mkdir(path: *const c_char) -> c_int;$/;"	f	signature:(path: *const c_char) -> c_int
SOLID_FS_Open	$RUST/src/sys/pal/solid/abi/fs.rs	/^    pub fn SOLID_FS_Open(fd: *mut c_int, path: *const c_char, mode: c_int) -> c_int;$/;"	f	signature:(fd: *mut c_int, path: *const c_char, mode: c_int) -> c_int
SOLID_FS_OpenDir	$RUST/src/sys/pal/solid/abi/fs.rs	/^    pub fn SOLID_FS_OpenDir(path: *const c_char, pDir: *mut S_DIR) -> c_int;$/;"	f	signature:(path: *const c_char, pDir: *mut S_DIR) -> c_int
SOLID_FS_Read	$RUST/src/sys/pal/solid/abi/fs.rs	/^    pub fn SOLID_FS_Read(fd: c_int, buf: *mut u8, size: usize, result: *mut usize) -> c_int;$/;"	f	signature:(fd: c_int, buf: *mut u8, size: usize, result: *mut usize) -> c_int
SOLID_FS_ReadDir	$RUST/src/sys/pal/solid/abi/fs.rs	/^    pub fn SOLID_FS_ReadDir(dir: S_DIR, dirp: *mut dirent) -> c_int;$/;"	f	signature:(dir: S_DIR, dirp: *mut dirent) -> c_int
SOLID_FS_Rename	$RUST/src/sys/pal/solid/abi/fs.rs	/^    pub fn SOLID_FS_Rename(oldpath: *const c_char, newpath: *const c_char) -> c_int;$/;"	f	signature:(oldpath: *const c_char, newpath: *const c_char) -> c_int
SOLID_FS_Stat	$RUST/src/sys/pal/solid/abi/fs.rs	/^    pub fn SOLID_FS_Stat(path: *const c_char, buf: *mut stat) -> c_int;$/;"	f	signature:(path: *const c_char, buf: *mut stat) -> c_int
SOLID_FS_Sync	$RUST/src/sys/pal/solid/abi/fs.rs	/^    pub fn SOLID_FS_Sync(fd: c_int) -> c_int;$/;"	f	signature:(fd: c_int) -> c_int
SOLID_FS_Truncate	$RUST/src/sys/pal/solid/abi/fs.rs	/^    pub fn SOLID_FS_Truncate(path: *const c_char, size: off_t) -> c_int;$/;"	f	signature:(path: *const c_char, size: off_t) -> c_int
SOLID_FS_Unlink	$RUST/src/sys/pal/solid/abi/fs.rs	/^    pub fn SOLID_FS_Unlink(path: *const c_char) -> c_int;$/;"	f	signature:(path: *const c_char) -> c_int
SOLID_FS_Utime	$RUST/src/sys/pal/solid/abi/fs.rs	/^    pub fn SOLID_FS_Utime(path: *const c_char, time: time_t) -> c_int;$/;"	f	signature:(path: *const c_char, time: time_t) -> c_int
SOLID_FS_Write	$RUST/src/sys/pal/solid/abi/fs.rs	/^    pub fn SOLID_FS_Write(fd: c_int, buf: *const u8, size: usize, result: *mut usize) -> c_int;$/;"	f	signature:(fd: c_int, buf: *const u8, size: usize, result: *mut usize) -> c_int
SOLID_LOG_write	$RUST/src/sys/pal/solid/abi/mod.rs	/^    pub fn SOLID_LOG_write(s: *const u8, l: usize);$/;"	f	signature:(s: *const u8, l: usize)
SOLID_MAX_PATH	$RUST/src/sys/pal/solid/abi/fs.rs	/^pub const SOLID_MAX_PATH: usize = 256;$/;"	C
SOLID_NET_ERR_BASE	$RUST/src/sys/pal/solid/abi/sockets.rs	/^pub const SOLID_NET_ERR_BASE: c_int = -2000;$/;"	C
SOLID_NET_FD_SETSIZE	$RUST/src/sys/pal/solid/abi/sockets.rs	/^pub const SOLID_NET_FD_SETSIZE: usize = 1;$/;"	C
SOLID_NET_GetLastError	$RUST/src/sys/pal/solid/abi/sockets.rs	/^    pub fn SOLID_NET_GetLastError() -> c_int;$/;"	f	signature:() -> c_int
SOLID_RNG_SampleRandomBytes	$RUST/src/sys/pal/solid/abi/mod.rs	/^    pub fn SOLID_RNG_SampleRandomBytes(buffer: *mut u8, length: usize) -> c_int;$/;"	f	signature:(buffer: *mut u8, length: usize) -> c_int
SOLID_RTC_ReadTime	$RUST/src/sys/pal/solid/abi/mod.rs	/^    pub fn SOLID_RTC_ReadTime(time: *mut SOLID_RTC_TIME) -> c_int;$/;"	f	signature:(time: *mut SOLID_RTC_TIME) -> c_int
SOLID_RTC_TIME	$RUST/src/sys/pal/solid/abi/mod.rs	/^pub struct SOLID_RTC_TIME {$/;"	s
SOLID_TLS_AddDestructor	$RUST/src/sys/pal/solid/abi/mod.rs	/^    pub fn SOLID_TLS_AddDestructor(id: i32, dtor: unsafe extern "C" fn(*mut u8));$/;"	f	signature:(id: i32, dtor: unsafe extern "C" fn(*mut u8))
SOL_SOCKET	$RUST/src/sys/pal/solid/abi/sockets.rs	/^pub const SOL_SOCKET: i32 = 4095;$/;"	C
SOL_SOCKET	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const SOL_SOCKET: i32 = 65535i32;$/;"	C
SO_BROADCAST	$RUST/src/sys/pal/solid/abi/sockets.rs	/^pub const SO_BROADCAST: i32 = 32;$/;"	C
SO_BROADCAST	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const SO_BROADCAST: i32 = 32i32;$/;"	C
SO_ERROR	$RUST/src/sys/pal/solid/abi/sockets.rs	/^pub const SO_ERROR: i32 = 4103;$/;"	C
SO_ERROR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const SO_ERROR: i32 = 4103i32;$/;"	C
SO_LINGER	$RUST/src/sys/pal/solid/abi/sockets.rs	/^pub const SO_LINGER: i32 = 128;$/;"	C
SO_LINGER	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const SO_LINGER: i32 = 128i32;$/;"	C
SO_RCVTIMEO	$RUST/src/sys/pal/solid/abi/sockets.rs	/^pub const SO_RCVTIMEO: i32 = 4102;$/;"	C
SO_RCVTIMEO	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const SO_RCVTIMEO: i32 = 4102i32;$/;"	C
SO_REUSEADDR	$RUST/src/sys/pal/solid/abi/sockets.rs	/^pub const SO_REUSEADDR: i32 = 4;$/;"	C
SO_SNDTIMEO	$RUST/src/sys/pal/solid/abi/sockets.rs	/^pub const SO_SNDTIMEO: i32 = 4101;$/;"	C
SO_SNDTIMEO	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const SO_SNDTIMEO: i32 = 4101i32;$/;"	C
SPACE	$RUST/src/sys/pal/uefi/args.rs	/^    const SPACE: char = ' ';$/;"	C	function:parse_lp_cmd_line
SPACE	$RUST/src/sys/pal/windows/args.rs	/^    const SPACE: NonZeroU16 = non_zero_u16(b' ' as u16);$/;"	C	function:parse_lp_cmd_line
SPECIFIC_RIGHTS_ALL	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const SPECIFIC_RIGHTS_ALL: FILE_ACCESS_RIGHTS = 65535u32;$/;"	C
SPIN_LIMIT	$RUST/src/sync/mpmc/utils.rs	/^const SPIN_LIMIT: u32 = 6;$/;"	C
SRWLOCK	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub struct SRWLOCK {$/;"	s
SRWLOCK_INIT	$RUST/src/sys/pal/windows/c.rs	/^pub const SRWLOCK_INIT: SRWLOCK = SRWLOCK { Ptr: ptr::null_mut() };$/;"	C
STACK_SIZE_PARAM_IS_A_RESERVATION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const STACK_SIZE_PARAM_IS_A_RESERVATION: THREAD_CREATION_FLAGS = 65536u32;$/;"	C
STANDARD_RIGHTS_ALL	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const STANDARD_RIGHTS_ALL: FILE_ACCESS_RIGHTS = 2031616u32;$/;"	C
STANDARD_RIGHTS_EXECUTE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const STANDARD_RIGHTS_EXECUTE: FILE_ACCESS_RIGHTS = 131072u32;$/;"	C
STANDARD_RIGHTS_READ	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const STANDARD_RIGHTS_READ: FILE_ACCESS_RIGHTS = 131072u32;$/;"	C
STANDARD_RIGHTS_REQUIRED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const STANDARD_RIGHTS_REQUIRED: FILE_ACCESS_RIGHTS = 983040u32;$/;"	C
STANDARD_RIGHTS_WRITE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const STANDARD_RIGHTS_WRITE: FILE_ACCESS_RIGHTS = 131072u32;$/;"	C
STARTF_FORCEOFFFEEDBACK	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const STARTF_FORCEOFFFEEDBACK: STARTUPINFOW_FLAGS = 128u32;$/;"	C
STARTF_FORCEONFEEDBACK	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const STARTF_FORCEONFEEDBACK: STARTUPINFOW_FLAGS = 64u32;$/;"	C
STARTF_PREVENTPINNING	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const STARTF_PREVENTPINNING: STARTUPINFOW_FLAGS = 8192u32;$/;"	C
STARTF_RUNFULLSCREEN	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const STARTF_RUNFULLSCREEN: STARTUPINFOW_FLAGS = 32u32;$/;"	C
STARTF_TITLEISAPPID	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const STARTF_TITLEISAPPID: STARTUPINFOW_FLAGS = 4096u32;$/;"	C
STARTF_TITLEISLINKNAME	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const STARTF_TITLEISLINKNAME: STARTUPINFOW_FLAGS = 2048u32;$/;"	C
STARTF_UNTRUSTEDSOURCE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const STARTF_UNTRUSTEDSOURCE: STARTUPINFOW_FLAGS = 32768u32;$/;"	C
STARTF_USECOUNTCHARS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const STARTF_USECOUNTCHARS: STARTUPINFOW_FLAGS = 8u32;$/;"	C
STARTF_USEFILLATTRIBUTE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const STARTF_USEFILLATTRIBUTE: STARTUPINFOW_FLAGS = 16u32;$/;"	C
STARTF_USEHOTKEY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const STARTF_USEHOTKEY: STARTUPINFOW_FLAGS = 512u32;$/;"	C
STARTF_USEPOSITION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const STARTF_USEPOSITION: STARTUPINFOW_FLAGS = 4u32;$/;"	C
STARTF_USESHOWWINDOW	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const STARTF_USESHOWWINDOW: STARTUPINFOW_FLAGS = 1u32;$/;"	C
STARTF_USESIZE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const STARTF_USESIZE: STARTUPINFOW_FLAGS = 2u32;$/;"	C
STARTF_USESTDHANDLES	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const STARTF_USESTDHANDLES: STARTUPINFOW_FLAGS = 256u32;$/;"	C
STARTUPINFOEXW	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub struct STARTUPINFOEXW {$/;"	s
STARTUPINFOW	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub struct STARTUPINFOW {$/;"	s
STARTUPINFOW_FLAGS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub type STARTUPINFOW_FLAGS = u32;$/;"	t
STATE	$RUST/src/sys/pal/common/thread_local/fast_local.rs	/^            static STATE: $crate::cell::Cell<$crate::primitive::u8> = $crate::cell::Cell::new(0)/;"	v	function:__getit
STATE_MASK	$RUST/src/sys_common/once/queue.rs	/^const STATE_MASK: usize = 0x3;$/;"	C
STATIC	$RUST/src/io/error/tests.rs	/^    static STATIC: Error = const_io_error!(BrokenPipe, "a constant, sort of!");$/;"	v	function:test_simple_message_packing
STATUS_DELETE_PENDING	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const STATUS_DELETE_PENDING: NTSTATUS = -1073741738i32;$/;"	C
STATUS_END_OF_FILE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const STATUS_END_OF_FILE: NTSTATUS = -1073741807i32;$/;"	C
STATUS_INVALID_PARAMETER	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const STATUS_INVALID_PARAMETER: NTSTATUS = -1073741811i32;$/;"	C
STATUS_NOT_IMPLEMENTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const STATUS_NOT_IMPLEMENTED: NTSTATUS = -1073741822i32;$/;"	C
STATUS_PENDING	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const STATUS_PENDING: NTSTATUS = 259i32;$/;"	C
STATUS_SUCCESS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const STATUS_SUCCESS: NTSTATUS = 0i32;$/;"	C
STATUS_UNSUCCESSFUL	$RUST/src/sys/pal/windows/os/tests.rs	/^    const STATUS_UNSUCCESSFUL: u32 = 0xc000_0001;$/;"	C	function:ntstatus_error
STDERR	$RUST/src/sys/pal/zkvm/abi.rs	/^    pub const STDERR: u32 = 2;$/;"	C	module:fileno
STDIN	$RUST/src/sys/pal/zkvm/abi.rs	/^    pub const STDIN: u32 = 0;$/;"	C	module:fileno
STDIN_BUF_SIZE	$RUST/src/sys/pal/hermit/stdio.rs	/^pub const STDIN_BUF_SIZE: usize = 0;$/;"	C
STDIN_BUF_SIZE	$RUST/src/sys/pal/sgx/stdio.rs	/^pub const STDIN_BUF_SIZE: usize = crate::sys_common::io::DEFAULT_BUF_SIZE;$/;"	C
STDIN_BUF_SIZE	$RUST/src/sys/pal/solid/stdio.rs	/^pub const STDIN_BUF_SIZE: usize = 0;$/;"	C
STDIN_BUF_SIZE	$RUST/src/sys/pal/teeos/stdio.rs	/^pub const STDIN_BUF_SIZE: usize = 0;$/;"	C
STDIN_BUF_SIZE	$RUST/src/sys/pal/uefi/stdio.rs	/^pub const STDIN_BUF_SIZE: usize = 3;$/;"	C
STDIN_BUF_SIZE	$RUST/src/sys/pal/unix/stdio.rs	/^pub const STDIN_BUF_SIZE: usize = crate::sys_common::io::DEFAULT_BUF_SIZE;$/;"	C
STDIN_BUF_SIZE	$RUST/src/sys/pal/unsupported/stdio.rs	/^pub const STDIN_BUF_SIZE: usize = 0;$/;"	C
STDIN_BUF_SIZE	$RUST/src/sys/pal/wasi/stdio.rs	/^pub const STDIN_BUF_SIZE: usize = crate::sys_common::io::DEFAULT_BUF_SIZE;$/;"	C
STDIN_BUF_SIZE	$RUST/src/sys/pal/windows/stdio.rs	/^pub const STDIN_BUF_SIZE: usize = MAX_BUFFER_SIZE \/ 2 * 3;$/;"	C
STDIN_BUF_SIZE	$RUST/src/sys/pal/xous/stdio.rs	/^pub const STDIN_BUF_SIZE: usize = 0;$/;"	C
STDIN_BUF_SIZE	$RUST/src/sys/pal/zkvm/stdio.rs	/^pub const STDIN_BUF_SIZE: usize = crate::sys_common::io::DEFAULT_BUF_SIZE;$/;"	C
STDOUT	$RUST/src/io/stdio.rs	/^static STDOUT: OnceLock<ReentrantMutex<RefCell<LineWriter<StdoutRaw>>>> = OnceLock::new();$/;"	v
STDOUT	$RUST/src/sys/pal/zkvm/abi.rs	/^    pub const STDOUT: u32 = 1;$/;"	C	module:fileno
STD_ERROR_HANDLE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const STD_ERROR_HANDLE: STD_HANDLE = 4294967284u32;$/;"	C
STD_HANDLE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub type STD_HANDLE = u32;$/;"	t
STD_INPUT_HANDLE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const STD_INPUT_HANDLE: STD_HANDLE = 4294967286u32;$/;"	C
STD_OUTPUT_HANDLE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const STD_OUTPUT_HANDLE: STD_HANDLE = 4294967285u32;$/;"	C
SUCCESS	$RUST/src/process.rs	/^    pub const SUCCESS: ExitCode = ExitCode(imp::ExitCode::SUCCESS);$/;"	C	implementation:ExitCode
SUCCESS	$RUST/src/sys/pal/unix/process/process_common.rs	/^    pub const SUCCESS: ExitCode = ExitCode(EXIT_SUCCESS as _);$/;"	C	implementation:ExitCode
SUCCESS	$RUST/src/sys/pal/unsupported/process.rs	/^    pub const SUCCESS: ExitCode = ExitCode(false);$/;"	C	implementation:ExitCode
SUCCESS	$RUST/src/sys/pal/windows/process.rs	/^    pub const SUCCESS: ExitCode = ExitCode(EXIT_SUCCESS as _);$/;"	C	implementation:ExitCode
SYMBOLIC_LINK_FLAGS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub type SYMBOLIC_LINK_FLAGS = u32;$/;"	t
SYMBOLIC_LINK_FLAG_ALLOW_UNPRIVILEGED_CREATE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const SYMBOLIC_LINK_FLAG_ALLOW_UNPRIVILEGED_CREATE: SYMBOLIC_LINK_FLAGS = 2u32;$/;"	C
SYMBOLIC_LINK_FLAG_DIRECTORY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const SYMBOLIC_LINK_FLAG_DIRECTORY: SYMBOLIC_LINK_FLAGS = 1u32;$/;"	C
SYMBOLIC_LINK_REPARSE_BUFFER	$RUST/src/sys/pal/windows/c.rs	/^pub struct SYMBOLIC_LINK_REPARSE_BUFFER {$/;"	s
SYMLINK_FLAG_RELATIVE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const SYMLINK_FLAG_RELATIVE: u32 = 1u32;$/;"	C
SYNCHRONIZATION_ACCESS_RIGHTS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub type SYNCHRONIZATION_ACCESS_RIGHTS = u32;$/;"	t
SYNCHRONIZE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const SYNCHRONIZE: FILE_ACCESS_RIGHTS = 1048576u32;$/;"	C
SYNC_BITSET_INIT	$RUST/src/sys/pal/sgx/abi/tls/sync_bitset.rs	/^pub(super) const SYNC_BITSET_INIT: SyncBitset =$/;"	C
SYNC_LAZY	$RUST/src/sync/lazy_lock/tests.rs	/^    static SYNC_LAZY: LazyLock<i32> = LazyLock::new(|| {$/;"	v	function:sync_lazy_new
SYNC_STATE	$RUST/src/thread/local/tests.rs	/^    static SYNC_STATE: AtomicU8 = AtomicU8::new(FRESH);$/;"	v	function:join_orders_after_tls_destructors
SYSTEM_INFO	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub struct SYSTEM_INFO {$/;"	s
SYSTEM_INFO_0	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^impl ::core::marker::Copy for SYSTEM_INFO_0 {}$/;"	c
SYSTEM_INFO_0_0	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub struct SYSTEM_INFO_0_0 {$/;"	s
SYSTEM_TABLE	$RUST/src/os/uefi/env.rs	/^static SYSTEM_TABLE: AtomicPtr<c_void> = AtomicPtr::new(crate::ptr::null_mut());$/;"	v
SYSTIM	$RUST/src/sys/pal/itron/abi.rs	/^pub type SYSTIM = u64;$/;"	t
SYSTIME_SERVER_CONNECTION	$RUST/src/os/xous/services/systime.rs	/^    static SYSTIME_SERVER_CONNECTION: AtomicU32 = AtomicU32::new(0);$/;"	v	function:systime_server
S_DIR	$RUST/src/sys/pal/solid/abi/fs.rs	/^pub type S_DIR = c_int;$/;"	t
S_un	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub S_un: IN_ADDR_0,$/;"	m	struct:IN_ADDR
Scalar	$RUST/src/os/xous/ffi/definitions.rs	/^    Scalar = 4,$/;"	e	enum:InvokeType
Scalar1	$RUST/src/os/xous/ffi/definitions.rs	/^    Scalar1 = 14,$/;"	e	enum:SyscallResult
Scalar2	$RUST/src/os/xous/ffi/definitions.rs	/^    Scalar2 = 15,$/;"	e	enum:SyscallResult
Scalar5	$RUST/src/os/xous/ffi/definitions.rs	/^    Scalar5 = 20,$/;"	e	enum:SyscallResult
ScmCredentials	$RUST/src/os/unix/net/ancillary.rs	/^pub struct ScmCredentials<'a>(AncillaryDataIter<'a, libc::ucred>);$/;"	s
ScmRights	$RUST/src/os/unix/net/ancillary.rs	/^pub struct ScmRights<'a>(AncillaryDataIter<'a, RawFd>);$/;"	s
Scope	$RUST/src/thread/scoped.rs	/^pub struct Scope<'scope, 'env: 'scope> {$/;"	s
ScopeData	$RUST/src/thread/scoped.rs	/^pub(super) struct ScopeData {$/;"	s
ScopedJoinHandle	$RUST/src/thread/scoped.rs	/^pub struct ScopedJoinHandle<'scope, T>(JoinInner<'scope, T>);$/;"	s
Sealed	$RUST/src/lib.rs	/^    pub trait Sealed {}$/;"	i	module:sealed
SecurityDescriptor	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub SecurityDescriptor: *const ::core::ffi::c_void,$/;"	m	struct:OBJECT_ATTRIBUTES
SecurityQualityOfService	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub SecurityQualityOfService: *const ::core::ffi::c_void,$/;"	m	struct:OBJECT_ATTRIBUTES
Seek	$RUST/src/io/mod.rs	/^pub trait Seek {$/;"	i
SeekFrom	$RUST/src/io/mod.rs	/^pub enum SeekFrom {$/;"	g
SegCs	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub SegCs: u32,$/;"	m	struct:CONTEXT
SegDs	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub SegDs: u32,$/;"	m	struct:CONTEXT
SegEs	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub SegEs: u32,$/;"	m	struct:CONTEXT
SegFs	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub SegFs: u32,$/;"	m	struct:CONTEXT
SegGs	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub SegGs: u32,$/;"	m	struct:CONTEXT
SegSs	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub SegSs: u32,$/;"	m	struct:CONTEXT
Sel	$RUST/src/sys/pal/unix/args.rs	/^        type Sel = *const c_void;$/;"	t	function:imp::args
Selected	$RUST/src/sync/mpmc/select.rs	/^pub enum Selected {$/;"	g
Self	$RUST/src/sys/pal/sgx/abi/usercalls/alloc.rs	/^        unsafe { &*(ptr as *const Self) }$/;"	C	function:from_ptr
SendData	$RUST/src/sys/pal/xous/net/mod.rs	/^struct SendData {$/;"	s
SendError	$RUST/src/sync/mpsc/mod.rs	/^pub struct SendError<T>(#[stable(feature = "rust1", since = "1.0.0")] pub T);$/;"	s
SendMessage	$RUST/src/os/xous/ffi/definitions.rs	/^    SendMessage = 16,$/;"	e	enum:Syscall
SendTimeoutError	$RUST/src/sync/mpmc/error.rs	/^pub enum SendTimeoutError<T> {$/;"	g
Sender	$RUST/src/sync/mpmc/counter.rs	/^pub(crate) struct Sender<C> {$/;"	s
Sender	$RUST/src/sync/mpmc/mod.rs	/^unsafe impl<T: Send> Sync for Sender<T> {}$/;"	c
Sender	$RUST/src/sync/mpsc/mod.rs	/^unsafe impl<T: Send> Sync for Sender<T> {}$/;"	c
SenderFlavor	$RUST/src/sync/mpmc/mod.rs	/^enum SenderFlavor<T> {$/;"	g
Sendfile	$RUST/src/sys/pal/unix/kernel_copy.rs	/^    Sendfile,$/;"	e	enum:SpliceMode
ServerAddress	$RUST/src/os/xous/ffi/definitions.rs	/^pub struct ServerAddress([u32; 4]);$/;"	s
ServerAddressError	$RUST/src/os/xous/ffi/definitions.rs	/^pub enum ServerAddressError {$/;"	g
ServerExists	$RUST/src/os/xous/ffi/definitions.rs	/^    ServerExists = 8,$/;"	e	enum:Error
ServerNotFound	$RUST/src/os/xous/ffi/definitions.rs	/^    ServerNotFound = 9,$/;"	e	enum:Error
ServerQueueFull	$RUST/src/os/xous/ffi/definitions.rs	/^    ServerQueueFull = 15,$/;"	e	enum:Error
SetCurrentDirectoryW	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn SetCurrentDirectoryW(lppathname: PCWSTR) -> BOOL;$/;"	f	signature:(lppathname: PCWSTR) -> BOOL
SetEnvironmentVariableW	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn SetEnvironmentVariableW(lpname: PCWSTR, lpvalue: PCWSTR) -> BOOL;$/;"	f	signature:(lpname: PCWSTR, lpvalue: PCWSTR) -> BOOL
SetFileAttributesW	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn SetFileAttributesW($/;"	f	signature:( lpfilename: PCWSTR, dwfileattributes: FILE_FLAGS_AND_ATTRIBUTES, ) -> BOOL
SetFileInformation	$RUST/src/sys/pal/windows/api.rs	/^pub unsafe trait SetFileInformation {$/;"	i
SetFileInformationByHandle	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn SetFileInformationByHandle($/;"	f	signature:( hfile: HANDLE, fileinformationclass: FILE_INFO_BY_HANDLE_CLASS, lpfileinformation: *const ::core::ffi::c_void, dwbuffersize: u32, ) -> BOOL
SetFilePointerEx	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn SetFilePointerEx($/;"	f	signature:( hfile: HANDLE, lidistancetomove: i64, lpnewfilepointer: *mut i64, dwmovemethod: SET_FILE_POINTER_MOVE_METHOD, ) -> BOOL
SetFileTime	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn SetFileTime($/;"	f	signature:( hfile: HANDLE, lpcreationtime: *const FILETIME, lplastaccesstime: *const FILETIME, lplastwritetime: *const FILETIME, ) -> BOOL
SetHandleInformation	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn SetHandleInformation(hobject: HANDLE, dwmask: u32, dwflags: HANDLE_FLAGS) -> BOOL;$/;"	f	signature:(hobject: HANDLE, dwmask: u32, dwflags: HANDLE_FLAGS) -> BOOL
SetLastError	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn SetLastError(dwerrcode: WIN32_ERROR) -> ();$/;"	f	signature:(dwerrcode: WIN32_ERROR) -> ()
SetThreadStackGuarantee	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn SetThreadStackGuarantee(stacksizeinbytes: *mut u32) -> BOOL;$/;"	f	signature:(stacksizeinbytes: *mut u32) -> BOOL
SetWaitableTimer	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn SetWaitableTimer($/;"	f	signature:( htimer: HANDLE, lpduetime: *const i64, lperiod: i32, pfncompletionroutine: PTIMERAPCROUTINE, lpargtocompletionroutine: *const ::core::ffi::c_void, fresume: BOOL, ) -> BOOL
Sgx	$RUST/src/sys/pal/sgx/alloc.rs	/^unsafe impl dlmalloc::Allocator for Sgx {$/;"	c
SgxPanicOutput	$RUST/src/sys/pal/sgx/abi/panic.rs	/^pub(crate) struct SgxPanicOutput(Option<&'static mut UserRef<[u8]>>);$/;"	s
ShareViolation	$RUST/src/os/xous/ffi/definitions.rs	/^    ShareViolation = 19,$/;"	e	enum:Error
Short	$RUST/src/panic.rs	/^    Short,$/;"	e	enum:BacktraceStyle
ShortName	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub ShortName: [u16; 12],$/;"	m	struct:FILE_ID_BOTH_DIR_INFO
ShortNameLength	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub ShortNameLength: i8,$/;"	m	struct:FILE_ID_BOTH_DIR_INFO
ShortReader	$RUST/src/io/buffered/tests.rs	/^pub struct ShortReader {$/;"	s
ShortReader	$RUST/src/io/copy/tests.rs	/^struct ShortReader {$/;"	s
Shutdown	$RUST/src/net/mod.rs	/^pub enum Shutdown {$/;"	g
Signal	$RUST/src/thread/local/tests.rs	/^struct Signal(Arc<(Mutex<bool>, Condvar)>);$/;"	s
Simple	$RUST/src/io/error.rs	/^    Simple(ErrorKind),$/;"	e	enum:ErrorData
SimpleMessage	$RUST/src/io/error.rs	/^pub(crate) struct SimpleMessage {$/;"	s
Single	$RUST/src/sys/pal/sgx/waitqueue/mod.rs	/^    Single(Tcs),$/;"	e	enum:NotifiedTcs
Sink	$RUST/src/io/util.rs	/^pub struct Sink;$/;"	s
SizeHint	$RUST/src/io/mod.rs	/^trait SizeHint {$/;"	i
SizedSetFileInformation	$RUST/src/sys/pal/windows/api.rs	/^unsafe trait SizedSetFileInformation: Sized {$/;"	i
Sleep	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn Sleep(dwmilliseconds: u32) -> ();$/;"	f	signature:(dwmilliseconds: u32) -> ()
SleepConditionVariableSRW	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn SleepConditionVariableSRW($/;"	f	signature:( conditionvariable: *mut CONDITION_VARIABLE, srwlock: *mut SRWLOCK, dwmilliseconds: u32, flags: u32, ) -> BOOL
SleepEx	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn SleepEx(dwmilliseconds: u32, balertable: BOOL) -> u32;$/;"	f	signature:(dwmilliseconds: u32, balertable: BOOL) -> u32
SleepMs	$RUST/src/os/xous/services/ticktimer.rs	/^    SleepMs(usize),$/;"	e	enum:TicktimerScalar
Slice	$RUST/src/ffi/os_str.rs	/^        unsafe { &*(inner as *const Slice as *const OsStr) }$/;"	C	method:OsStr::from_inner
Slice	$RUST/src/sys/os_str/bytes.rs	/^pub struct Slice {$/;"	s
Slice	$RUST/src/sys/os_str/wtf8.rs	/^pub struct Slice {$/;"	s
Slot	$RUST/src/sync/mpmc/array.rs	/^struct Slot<T> {$/;"	s
Slot	$RUST/src/sync/mpmc/list.rs	/^struct Slot<T> {$/;"	s
Socket	$RUST/src/sys/pal/hermit/net.rs	/^pub struct Socket(FileDesc);$/;"	s
Socket	$RUST/src/sys/pal/sgx/net.rs	/^pub struct Socket {$/;"	s
Socket	$RUST/src/sys/pal/solid/net.rs	/^pub struct Socket(OwnedFd);$/;"	s
Socket	$RUST/src/sys/pal/teeos/net.rs	/^pub type Socket = UdpSocket;$/;"	t
Socket	$RUST/src/sys/pal/unix/kernel_copy.rs	/^    Socket,$/;"	e	enum:FdMeta
Socket	$RUST/src/sys/pal/unix/l4re.rs	/^    pub struct Socket(FileDesc);$/;"	s	module:net
Socket	$RUST/src/sys/pal/unix/net.rs	/^pub struct Socket(FileDesc);$/;"	s
Socket	$RUST/src/sys/pal/wasi/net.rs	/^pub struct Socket(WasiFd);$/;"	s
Socket	$RUST/src/sys/pal/windows/net.rs	/^pub struct Socket(OwnedSocket);$/;"	s
SocketAddr	$RUST/src/net/socket_addr.rs	/^impl<'a> ToSocketAddrs for &'a [SocketAddr] {$/;"	c
SocketAddr	$RUST/src/os/unix/net/addr.rs	/^pub struct SocketAddr {$/;"	s
SocketAddr	$RUST/src/sys_common/net.rs	/^impl<'a> IntoInner<(SocketAddrCRepr, c::socklen_t)> for &'a SocketAddr {$/;"	c
SocketAddrCRepr	$RUST/src/sys_common/net.rs	/^impl SocketAddrCRepr {$/;"	c
SocketAddrExt	$RUST/src/os/net/linux_ext/addr.rs	/^pub trait SocketAddrExt: Sealed {$/;"	i
SocketAddrV4	$RUST/src/net/socket_addr.rs	/^impl ToSocketAddrs for SocketAddrV4 {$/;"	c
SocketAddrV6	$RUST/src/net/socket_addr.rs	/^impl ToSocketAddrs for SocketAddrV6 {$/;"	c
SocketAncillary	$RUST/src/os/unix/net/ancillary.rs	/^pub struct SocketAncillary<'a> {$/;"	s
SocketCred	$RUST/src/os/unix/net/ancillary.rs	/^pub struct SocketCred(libc::ucred);$/;"	s
SocketInUse	$RUST/src/sys/pal/xous/net/mod.rs	/^    SocketInUse = 2,$/;"	e	enum:NetError
Spare0	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub Spare0: u32,$/;"	m	struct:FLOATING_SAVE_AREA
SpecCopy	$RUST/src/sys/pal/unix/kernel_copy.rs	/^trait SpecCopy {$/;"	i
SpecReadByte	$RUST/src/io/mod.rs	/^trait SpecReadByte {$/;"	i
SpinIdOnceCell	$RUST/src/sys/pal/itron/spin.rs	/^pub struct SpinIdOnceCell<T = ()> {$/;"	s
SpinMutex	$RUST/src/sys/pal/itron/spin.rs	/^pub struct SpinMutex<T = ()> {$/;"	s
SpinMutex	$RUST/src/sys/pal/sgx/waitqueue/spin_mutex.rs	/^unsafe impl<T: Send> Sync for SpinMutex<T> {}$/;"	c
SpinMutexGuard	$RUST/src/sys/pal/itron/spin.rs	/^        struct SpinMutexGuard<'a>(&'a AtomicBool);$/;"	s	method:SpinMutex::with_locked
SpinMutexGuard	$RUST/src/sys/pal/sgx/waitqueue/spin_mutex.rs	/^unsafe impl<'a, T: Sync> Sync for SpinMutexGuard<'a, T> {}$/;"	c
Splice	$RUST/src/sys/pal/unix/kernel_copy.rs	/^    Splice,$/;"	e	enum:SpliceMode
SpliceMode	$RUST/src/sys/pal/unix/kernel_copy.rs	/^enum SpliceMode {$/;"	g
Split	$RUST/src/io/mod.rs	/^pub struct Split<B> {$/;"	s
SplitPaths	$RUST/src/env.rs	/^pub struct SplitPaths<'a> {$/;"	s
SplitPaths	$RUST/src/sys/pal/hermit/os.rs	/^pub struct SplitPaths<'a>(!, PhantomData<&'a ()>);$/;"	s
SplitPaths	$RUST/src/sys/pal/sgx/os.rs	/^pub struct SplitPaths<'a>(!, PhantomData<&'a ()>);$/;"	s
SplitPaths	$RUST/src/sys/pal/solid/os.rs	/^pub struct SplitPaths<'a>(&'a !);$/;"	s
SplitPaths	$RUST/src/sys/pal/teeos/os.rs	/^pub struct SplitPaths<'a>(!, PhantomData<&'a ()>);$/;"	s
SplitPaths	$RUST/src/sys/pal/uefi/os.rs	/^pub struct SplitPaths<'a>(!, PhantomData<&'a ()>);$/;"	s
SplitPaths	$RUST/src/sys/pal/unix/os.rs	/^pub struct SplitPaths<'a> {$/;"	s
SplitPaths	$RUST/src/sys/pal/unsupported/os.rs	/^pub struct SplitPaths<'a>(!, PhantomData<&'a ()>);$/;"	s
SplitPaths	$RUST/src/sys/pal/wasi/os.rs	/^pub struct SplitPaths<'a>(!, PhantomData<&'a ()>);$/;"	s
SplitPaths	$RUST/src/sys/pal/windows/os.rs	/^pub struct SplitPaths<'a> {$/;"	s
SplitPaths	$RUST/src/sys/pal/xous/os.rs	/^pub struct SplitPaths<'a>(!, PhantomData<&'a ()>);$/;"	s
SplitPaths	$RUST/src/sys/pal/zkvm/os.rs	/^pub struct SplitPaths<'a>(!, PhantomData<&'a ()>);$/;"	s
StaleNetworkFileHandle	$RUST/src/io/error.rs	/^    StaleNetworkFileHandle,$/;"	e	enum:ErrorKind
StandardError	$RUST/src/os/xous/services/log.rs	/^    StandardError = 2,$/;"	e	enum:LogLend
StandardOutput	$RUST/src/os/xous/services/log.rs	/^    StandardOutput = 1,$/;"	e	enum:LogLend
Start	$RUST/src/io/mod.rs	/^    Start(#[stable(feature = "rust1", since = "1.0.0")] u64),$/;"	e	enum:SeekFrom
Start1	$RUST/src/io/stdio/tests.rs	/^        Start1,$/;"	e	enum:test_lock::State
Start2	$RUST/src/io/stdio/tests.rs	/^        Start2,$/;"	e	enum:test_lock::State
StartDir	$RUST/src/path.rs	/^    StartDir = 1, \/\/ \/ or . or nothing$/;"	e	enum:State
StartupInfo	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub StartupInfo: STARTUPINFOW,$/;"	m	struct:STARTUPINFOEXW
State	$RUST/src/io/stdio/tests.rs	/^    enum State {$/;"	g	function:test_lock
State	$RUST/src/path.rs	/^enum State {$/;"	g
State	$RUST/src/sys/pal/unsupported/once.rs	/^enum State {$/;"	g
State	$RUST/src/sys/pal/windows/pipe.rs	/^enum State {$/;"	g
StaticFd	$RUST/src/sys/pal/unix/process/process_common.rs	/^    StaticFd(BorrowedFd<'static>),$/;"	e	enum:Stdio
StaticKey	$RUST/src/sys/pal/windows/thread_local_key.rs	/^unsafe impl Sync for StaticKey {}$/;"	c
StaticKey	$RUST/src/sys_common/thread_local_key.rs	/^pub struct StaticKey {$/;"	s
StaticStrPayload	$RUST/src/panicking.rs	/^    unsafe impl PanicPayload for StaticStrPayload {$/;"	c	function:begin_panic_handler
StatusWord	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub StatusWord: u32,$/;"	m	struct:FLOATING_SAVE_AREA
StdGetAddress	$RUST/src/os/xous/services/net.rs	/^    StdGetAddress(u16 \/* fd *\/),                      \/* 35 *\/$/;"	e	enum:NetLendMut
StdGetNodelay	$RUST/src/os/xous/services/net.rs	/^    StdGetNodelay(u16 \/* fd *\/),               \/* 38 *\/$/;"	e	enum:NetBlockingScalar
StdGetTtlTcp	$RUST/src/os/xous/services/net.rs	/^    StdGetTtlTcp(u16 \/* fd *\/),                \/* 36 *\/$/;"	e	enum:NetBlockingScalar
StdGetTtlUdp	$RUST/src/os/xous/services/net.rs	/^    StdGetTtlUdp(u16 \/* fd *\/),                \/* 36 *\/$/;"	e	enum:NetBlockingScalar
StdSetNodelay	$RUST/src/os/xous/services/net.rs	/^    StdSetNodelay(u16 \/* fd *\/, bool),         \/* 39 *\/$/;"	e	enum:NetBlockingScalar
StdSetTtlTcp	$RUST/src/os/xous/services/net.rs	/^    StdSetTtlTcp(u16 \/* fd *\/, u32 \/* ttl *\/), \/* 37 *\/$/;"	e	enum:NetBlockingScalar
StdSetTtlUdp	$RUST/src/os/xous/services/net.rs	/^    StdSetTtlUdp(u16 \/* fd *\/, u32 \/* ttl *\/), \/* 37 *\/$/;"	e	enum:NetBlockingScalar
StdTcpAccept	$RUST/src/os/xous/services/net.rs	/^    StdTcpAccept(u16 \/* fd *\/),                       \/* 45 *\/$/;"	e	enum:NetLendMut
StdTcpClose	$RUST/src/os/xous/services/net.rs	/^    StdTcpClose(u16 \/* fd *\/),                 \/* 34 *\/$/;"	e	enum:NetBlockingScalar
StdTcpConnect	$RUST/src/os/xous/services/net.rs	/^    StdTcpConnect,                                    \/* 30 *\/$/;"	e	enum:NetLendMut
StdTcpListen	$RUST/src/os/xous/services/net.rs	/^    StdTcpListen,                                     \/* 44 *\/$/;"	e	enum:NetLendMut
StdTcpPeek	$RUST/src/os/xous/services/net.rs	/^    StdTcpPeek(u16 \/* fd *\/, bool \/* nonblocking *\/), \/* 32 *\/$/;"	e	enum:NetLendMut
StdTcpRx	$RUST/src/os/xous/services/net.rs	/^    StdTcpRx(u16 \/* fd *\/, bool \/* nonblocking *\/),   \/* 33 *\/$/;"	e	enum:NetLendMut
StdTcpStreamShutdown	$RUST/src/os/xous/services/net.rs	/^    StdTcpStreamShutdown(u16 \/* fd *\/, crate::net::Shutdown \/* how *\/), \/* 46 *\/$/;"	e	enum:NetBlockingScalar
StdTcpTx	$RUST/src/os/xous/services/net.rs	/^    StdTcpTx(u16 \/* fd *\/),                           \/* 31 *\/$/;"	e	enum:NetLendMut
StdUdpBind	$RUST/src/os/xous/services/net.rs	/^    StdUdpBind,                                       \/* 40 *\/$/;"	e	enum:NetLendMut
StdUdpClose	$RUST/src/os/xous/services/net.rs	/^    StdUdpClose(u16 \/* fd *\/),                 \/* 41 *\/$/;"	e	enum:NetBlockingScalar
StdUdpRx	$RUST/src/os/xous/services/net.rs	/^    StdUdpRx(u16 \/* fd *\/),                           \/* 42 *\/$/;"	e	enum:NetLendMut
StdUdpTx	$RUST/src/os/xous/services/net.rs	/^    StdUdpTx(u16 \/* fd *\/),                           \/* 43 *\/$/;"	e	enum:NetLendMut
Stderr	$RUST/src/io/stdio.rs	/^pub struct Stderr {$/;"	s
Stderr	$RUST/src/io/stdio/tests.rs	/^impl<'a> Stdio<'a> for Stderr {$/;"	c
Stderr	$RUST/src/os/fd/owned.rs	/^impl AsFd for io::Stderr {$/;"	c
Stderr	$RUST/src/os/fd/raw.rs	/^impl AsRawFd for io::Stderr {$/;"	c
Stderr	$RUST/src/os/windows/io/handle.rs	/^impl AsHandle for crate::io::Stderr {$/;"	c
Stderr	$RUST/src/os/windows/io/raw.rs	/^impl AsRawHandle for io::Stderr {$/;"	c
Stderr	$RUST/src/sys/pal/hermit/stdio.rs	/^pub struct Stderr;$/;"	s
Stderr	$RUST/src/sys/pal/sgx/stdio.rs	/^pub struct Stderr(());$/;"	s
Stderr	$RUST/src/sys/pal/solid/stdio.rs	/^pub struct Stderr;$/;"	s
Stderr	$RUST/src/sys/pal/teeos/stdio.rs	/^pub struct Stderr;$/;"	s
Stderr	$RUST/src/sys/pal/uefi/stdio.rs	/^pub struct Stderr;$/;"	s
Stderr	$RUST/src/sys/pal/unix/stdio.rs	/^pub struct Stderr(());$/;"	s
Stderr	$RUST/src/sys/pal/unsupported/stdio.rs	/^pub struct Stderr;$/;"	s
Stderr	$RUST/src/sys/pal/wasi/stdio.rs	/^pub struct Stderr;$/;"	s
Stderr	$RUST/src/sys/pal/windows/stdio.rs	/^pub struct Stderr {$/;"	s
Stderr	$RUST/src/sys/pal/xous/stdio.rs	/^pub struct Stderr;$/;"	s
Stderr	$RUST/src/sys/pal/zkvm/stdio.rs	/^pub struct Stderr;$/;"	s
StderrLock	$RUST/src/io/stdio.rs	/^pub struct StderrLock<'a> {$/;"	s
StderrLock	$RUST/src/io/stdio/tests.rs	/^impl StdioOwnedLock for StderrLock<'static> {}$/;"	c
StderrLock	$RUST/src/os/fd/owned.rs	/^impl<'a> AsFd for io::StderrLock<'a> {$/;"	c
StderrLock	$RUST/src/os/fd/raw.rs	/^impl<'a> AsRawFd for io::StderrLock<'a> {$/;"	c
StderrLock	$RUST/src/os/windows/io/handle.rs	/^impl<'a> AsHandle for crate::io::StderrLock<'a> {$/;"	c
StderrLock	$RUST/src/os/windows/io/raw.rs	/^impl<'a> AsRawHandle for io::StderrLock<'a> {$/;"	c
StderrLock	$RUST/src/sys/pal/unix/kernel_copy.rs	/^impl CopyWrite for StderrLock<'_> {$/;"	c
StderrRaw	$RUST/src/io/stdio.rs	/^struct StderrRaw(stdio::Stderr);$/;"	s
Stdin	$RUST/src/io/stdio.rs	/^pub struct Stdin {$/;"	s
Stdin	$RUST/src/io/stdio/tests.rs	/^impl<'a> Stdio<'a> for Stdin {$/;"	c
Stdin	$RUST/src/os/fd/owned.rs	/^impl AsFd for io::Stdin {$/;"	c
Stdin	$RUST/src/os/fd/raw.rs	/^impl AsRawFd for io::Stdin {$/;"	c
Stdin	$RUST/src/os/windows/io/handle.rs	/^impl AsHandle for crate::io::Stdin {$/;"	c
Stdin	$RUST/src/os/windows/io/raw.rs	/^impl AsRawHandle for io::Stdin {$/;"	c
Stdin	$RUST/src/sys/pal/hermit/stdio.rs	/^pub struct Stdin;$/;"	s
Stdin	$RUST/src/sys/pal/sgx/stdio.rs	/^pub struct Stdin(());$/;"	s
Stdin	$RUST/src/sys/pal/solid/stdio.rs	/^pub struct Stdin;$/;"	s
Stdin	$RUST/src/sys/pal/teeos/stdio.rs	/^pub struct Stdin;$/;"	s
Stdin	$RUST/src/sys/pal/uefi/stdio.rs	/^pub struct Stdin;$/;"	s
Stdin	$RUST/src/sys/pal/unix/stdio.rs	/^pub struct Stdin(());$/;"	s
Stdin	$RUST/src/sys/pal/unsupported/stdio.rs	/^pub struct Stdin;$/;"	s
Stdin	$RUST/src/sys/pal/wasi/stdio.rs	/^pub struct Stdin;$/;"	s
Stdin	$RUST/src/sys/pal/windows/stdio.rs	/^pub struct Stdin {$/;"	s
Stdin	$RUST/src/sys/pal/xous/stdio.rs	/^pub struct Stdin;$/;"	s
Stdin	$RUST/src/sys/pal/zkvm/stdio.rs	/^pub struct Stdin;$/;"	s
StdinLock	$RUST/src/io/stdio.rs	/^pub struct StdinLock<'a> {$/;"	s
StdinLock	$RUST/src/io/stdio/tests.rs	/^impl StdioOwnedLock for StdinLock<'static> {}$/;"	c
StdinLock	$RUST/src/os/fd/owned.rs	/^impl<'a> AsFd for io::StdinLock<'a> {$/;"	c
StdinLock	$RUST/src/os/fd/raw.rs	/^impl<'a> AsRawFd for io::StdinLock<'a> {$/;"	c
StdinLock	$RUST/src/os/windows/io/handle.rs	/^impl<'a> AsHandle for crate::io::StdinLock<'a> {$/;"	c
StdinLock	$RUST/src/os/windows/io/raw.rs	/^impl<'a> AsRawHandle for io::StdinLock<'a> {$/;"	c
StdinLock	$RUST/src/sys/pal/unix/kernel_copy.rs	/^impl CopyRead for StdinLock<'_> {$/;"	c
StdinRaw	$RUST/src/io/stdio.rs	/^struct StdinRaw(stdio::Stdin);$/;"	s
Stdio	$RUST/src/io/stdio/tests.rs	/^trait Stdio<'a>: 'static$/;"	i
Stdio	$RUST/src/os/unix/process.rs	/^impl FromRawFd for process::Stdio {$/;"	c
Stdio	$RUST/src/os/windows/process.rs	/^impl FromRawHandle for process::Stdio {$/;"	c
Stdio	$RUST/src/process.rs	/^pub struct Stdio(imp::Stdio);$/;"	s
Stdio	$RUST/src/sys/pal/unix/process/process_common.rs	/^pub enum Stdio {$/;"	g
Stdio	$RUST/src/sys/pal/unsupported/process.rs	/^pub enum Stdio {$/;"	g
Stdio	$RUST/src/sys/pal/windows/process.rs	/^pub enum Stdio {$/;"	g
StdioOwnedLock	$RUST/src/io/stdio/tests.rs	/^trait StdioOwnedLock: 'static {}$/;"	i
StdioPipes	$RUST/src/sys/pal/unix/process/process_common.rs	/^pub struct StdioPipes {$/;"	s
StdioPipes	$RUST/src/sys/pal/unsupported/process.rs	/^pub struct StdioPipes {$/;"	s
StdioPipes	$RUST/src/sys/pal/windows/process.rs	/^pub struct StdioPipes {$/;"	s
Stdout	$RUST/src/io/stdio.rs	/^pub struct Stdout {$/;"	s
Stdout	$RUST/src/io/stdio/tests.rs	/^impl<'a> Stdio<'a> for Stdout {$/;"	c
Stdout	$RUST/src/os/fd/owned.rs	/^impl AsFd for io::Stdout {$/;"	c
Stdout	$RUST/src/os/fd/raw.rs	/^impl AsRawFd for io::Stdout {$/;"	c
Stdout	$RUST/src/os/windows/io/handle.rs	/^impl AsHandle for crate::io::Stdout {$/;"	c
Stdout	$RUST/src/os/windows/io/raw.rs	/^impl AsRawHandle for io::Stdout {$/;"	c
Stdout	$RUST/src/sys/pal/hermit/stdio.rs	/^pub struct Stdout;$/;"	s
Stdout	$RUST/src/sys/pal/sgx/stdio.rs	/^pub struct Stdout(());$/;"	s
Stdout	$RUST/src/sys/pal/solid/stdio.rs	/^pub struct Stdout;$/;"	s
Stdout	$RUST/src/sys/pal/teeos/stdio.rs	/^pub struct Stdout;$/;"	s
Stdout	$RUST/src/sys/pal/uefi/stdio.rs	/^pub struct Stdout;$/;"	s
Stdout	$RUST/src/sys/pal/unix/stdio.rs	/^pub struct Stdout(());$/;"	s
Stdout	$RUST/src/sys/pal/unsupported/stdio.rs	/^pub struct Stdout;$/;"	s
Stdout	$RUST/src/sys/pal/wasi/stdio.rs	/^pub struct Stdout;$/;"	s
Stdout	$RUST/src/sys/pal/windows/stdio.rs	/^pub struct Stdout {$/;"	s
Stdout	$RUST/src/sys/pal/xous/stdio.rs	/^pub struct Stdout {}$/;"	s
Stdout	$RUST/src/sys/pal/zkvm/stdio.rs	/^pub struct Stdout;$/;"	s
StdoutLock	$RUST/src/io/stdio.rs	/^pub struct StdoutLock<'a> {$/;"	s
StdoutLock	$RUST/src/io/stdio/tests.rs	/^impl StdioOwnedLock for StdoutLock<'static> {}$/;"	c
StdoutLock	$RUST/src/os/fd/owned.rs	/^impl<'a> AsFd for io::StdoutLock<'a> {$/;"	c
StdoutLock	$RUST/src/os/fd/raw.rs	/^impl<'a> AsRawFd for io::StdoutLock<'a> {$/;"	c
StdoutLock	$RUST/src/os/windows/io/handle.rs	/^impl<'a> AsHandle for crate::io::StdoutLock<'a> {$/;"	c
StdoutLock	$RUST/src/os/windows/io/raw.rs	/^impl<'a> AsRawHandle for io::StdoutLock<'a> {$/;"	c
StdoutLock	$RUST/src/sys/pal/unix/kernel_copy.rs	/^impl CopyWrite for StdoutLock<'_> {$/;"	c
StdoutRaw	$RUST/src/io/stdio.rs	/^struct StdoutRaw(stdio::Stdout);$/;"	s
StorageFull	$RUST/src/io/error.rs	/^    StorageFull,$/;"	e	enum:ErrorKind
String	$RUST/src/ffi/os_str.rs	/^impl AsRef<OsStr> for String {$/;"	c
String	$RUST/src/net/socket_addr.rs	/^impl ToSocketAddrs for String {$/;"	c
String	$RUST/src/path.rs	/^impl AsRef<Path> for String {$/;"	c
StripPrefixError	$RUST/src/path.rs	/^pub struct StripPrefixError(());$/;"	s
SubstituteNameLength	$RUST/src/sys/pal/windows/c.rs	/^    pub SubstituteNameLength: c_ushort,$/;"	m	struct:SYMBOLIC_LINK_REPARSE_BUFFER
SubstituteNameOffset	$RUST/src/sys/pal/windows/c.rs	/^    pub SubstituteNameOffset: c_ushort,$/;"	m	struct:SYMBOLIC_LINK_REPARSE_BUFFER
SuperError	$RUST/src/error/tests.rs	/^struct SuperError {$/;"	s
SuperErrorSideKick	$RUST/src/error/tests.rs	/^struct SuperErrorSideKick;$/;"	s
SwitchToThread	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn SwitchToThread() -> BOOL;$/;"	f	signature:() -> BOOL
SymmetricDifference	$RUST/src/collections/hash/set.rs	/^pub struct SymmetricDifference<'a, T: 'a, S: 'a> {$/;"	s
SyncBitset	$RUST/src/sys/pal/sgx/abi/tls/sync_bitset.rs	/^pub(super) struct SyncBitset([AtomicUsize; TLS_KEYS_BITSET_SIZE]);$/;"	s
SyncBitsetIter	$RUST/src/sys/pal/sgx/abi/tls/sync_bitset.rs	/^pub(super) struct SyncBitsetIter<'a> {$/;"	s
SyncSender	$RUST/src/sync/mpsc/mod.rs	/^unsafe impl<T: Send> Send for SyncSender<T> {}$/;"	c
SyncWaker	$RUST/src/sync/mpmc/waker.rs	/^pub(crate) struct SyncWaker {$/;"	s
Syscall	$RUST/src/os/xous/ffi/definitions.rs	/^pub enum Syscall {$/;"	g
SyscallResult	$RUST/src/os/xous/ffi/definitions.rs	/^pub enum SyscallResult {$/;"	g
System	$RUST/src/alloc.rs	/^unsafe impl Allocator for System {$/;"	c
System	$RUST/src/sys/pal/hermit/alloc.rs	/^unsafe impl GlobalAlloc for System {$/;"	c
System	$RUST/src/sys/pal/sgx/alloc.rs	/^unsafe impl GlobalAlloc for System {$/;"	c
System	$RUST/src/sys/pal/solid/alloc.rs	/^unsafe impl GlobalAlloc for System {$/;"	c
System	$RUST/src/sys/pal/teeos/alloc.rs	/^unsafe impl GlobalAlloc for System {$/;"	c
System	$RUST/src/sys/pal/uefi/alloc.rs	/^unsafe impl GlobalAlloc for System {$/;"	c
System	$RUST/src/sys/pal/unix/alloc.rs	/^unsafe impl GlobalAlloc for System {$/;"	c
System	$RUST/src/sys/pal/unsupported/alloc.rs	/^unsafe impl GlobalAlloc for System {$/;"	c
System	$RUST/src/sys/pal/wasm/alloc.rs	/^unsafe impl GlobalAlloc for System {$/;"	c
System	$RUST/src/sys/pal/windows/alloc.rs	/^unsafe impl GlobalAlloc for System {$/;"	c
System	$RUST/src/sys/pal/xous/alloc.rs	/^unsafe impl GlobalAlloc for System {$/;"	c
System	$RUST/src/sys/pal/zkvm/alloc.rs	/^unsafe impl GlobalAlloc for System {$/;"	c
SystemTime	$RUST/src/sys/pal/hermit/time.rs	/^pub struct SystemTime(Timespec);$/;"	s
SystemTime	$RUST/src/sys/pal/sgx/time.rs	/^pub struct SystemTime(Duration);$/;"	s
SystemTime	$RUST/src/sys/pal/solid/time.rs	/^pub struct SystemTime(abi::time_t);$/;"	s
SystemTime	$RUST/src/sys/pal/unix/time.rs	/^pub struct SystemTime {$/;"	s
SystemTime	$RUST/src/sys/pal/unsupported/time.rs	/^pub struct SystemTime(Duration);$/;"	s
SystemTime	$RUST/src/sys/pal/wasi/time.rs	/^pub struct SystemTime(Duration);$/;"	s
SystemTime	$RUST/src/sys/pal/windows/time.rs	/^pub struct SystemTime {$/;"	s
SystemTime	$RUST/src/sys/pal/xous/time.rs	/^pub struct SystemTime(Duration);$/;"	s
SystemTime	$RUST/src/time.rs	/^pub struct SystemTime(time::SystemTime);$/;"	s
SystemTimeError	$RUST/src/time.rs	/^pub struct SystemTimeError(Duration);$/;"	s
SystimeScalar	$RUST/src/os/xous/services/systime.rs	/^pub(crate) enum SystimeScalar {$/;"	g
TAB	$RUST/src/sys/pal/windows/args.rs	/^    const TAB: NonZeroU16 = non_zero_u16(b'\\t' as u16);$/;"	C	function:parse_lp_cmd_line
TAG_CUSTOM	$RUST/src/io/error/repr_bitpacked.rs	/^const TAG_CUSTOM: usize = 0b01;$/;"	C
TAG_MASK	$RUST/src/io/error/repr_bitpacked.rs	/^const TAG_MASK: usize = 0b11;$/;"	C
TAG_OS	$RUST/src/io/error/repr_bitpacked.rs	/^const TAG_OS: usize = 0b10;$/;"	C
TAG_SIMPLE	$RUST/src/io/error/repr_bitpacked.rs	/^const TAG_SIMPLE: usize = 0b11;$/;"	C
TAG_SIMPLE_MESSAGE	$RUST/src/io/error/repr_bitpacked.rs	/^const TAG_SIMPLE_MESSAGE: usize = 0b00;$/;"	C
TASK	$RUST/src/sys/pal/itron/abi.rs	/^pub type TASK = Option<unsafe extern "C" fn(EXINF)>;$/;"	t
TASK_COMM_LEN	$RUST/src/sys/pal/unix/thread.rs	/^        const TASK_COMM_LEN: usize = 16;$/;"	C	method:Thread::set_name
TASK_QUEUE	$RUST/src/sys/pal/sgx/thread.rs	/^    static mut TASK_QUEUE: Option<Mutex<Vec<Task>>> = None;$/;"	v	module:task_queue
TASK_QUEUE_INIT	$RUST/src/sys/pal/sgx/thread.rs	/^    static TASK_QUEUE_INIT: Once = Once::new();$/;"	v	module:task_queue
TA_ACT	$RUST/src/sys/pal/itron/abi.rs	/^pub const TA_ACT: ATR = 0x01;$/;"	C
TA_CLR	$RUST/src/sys/pal/itron/abi.rs	/^pub const TA_CLR: ATR = 0x04;$/;"	C
TA_FIFO	$RUST/src/sys/pal/itron/abi.rs	/^pub const TA_FIFO: ATR = 0;$/;"	C
TA_INHERIT	$RUST/src/sys/pal/itron/abi.rs	/^pub const TA_INHERIT: ATR = 0x02;$/;"	C
TA_WSGL	$RUST/src/sys/pal/itron/abi.rs	/^pub const TA_WSGL: ATR = 0;$/;"	C
TCP_NODELAY	$RUST/src/sys/pal/solid/abi/sockets.rs	/^pub const TCP_NODELAY: i32 = 1;$/;"	C
TCP_NODELAY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const TCP_NODELAY: i32 = 1i32;$/;"	C
TEE_GenerateRandom	$RUST/src/sys/pal/teeos/rand.rs	/^        fn TEE_GenerateRandom(randomBuffer: *mut core::ffi::c_void, randomBufferLen: libc::size_/;"	f	module:imp	signature:(randomBuffer: *mut core::ffi::c_void, randomBufferLen: libc::size_t)
TEE_Wait	$RUST/src/sys/pal/teeos/thread.rs	/^    pub fn TEE_Wait(timeout: u32) -> u32;$/;"	f	signature:(timeout: u32) -> u32
TH32CS_SNAPPROCESS	$RUST/src/process/tests.rs	/^    const TH32CS_SNAPPROCESS: u32 = 0x00000002;$/;"	C	function:test_proc_thread_attributes
THREAD1_WAITING	$RUST/src/thread/local/tests.rs	/^    const THREAD1_WAITING: u8 = 2;$/;"	C	function:join_orders_after_tls_destructors
THREAD2_JOINED	$RUST/src/thread/local/tests.rs	/^    const THREAD2_JOINED: u8 = 4;$/;"	C	function:join_orders_after_tls_destructors
THREAD2_LAUNCHED	$RUST/src/thread/local/tests.rs	/^    const THREAD2_LAUNCHED: u8 = 1;$/;"	C	function:join_orders_after_tls_destructors
THREAD_CREATE_RUN_IMMEDIATELY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const THREAD_CREATE_RUN_IMMEDIATELY: THREAD_CREATION_FLAGS = 0u32;$/;"	C
THREAD_CREATE_SUSPENDED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const THREAD_CREATE_SUSPENDED: THREAD_CREATION_FLAGS = 4u32;$/;"	C
THREAD_CREATION_FLAGS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub type THREAD_CREATION_FLAGS = u32;$/;"	t
TICKTIMER_SERVER_CONNECTION	$RUST/src/os/xous/services/ticktimer.rs	/^    static TICKTIMER_SERVER_CONNECTION: AtomicU32 = AtomicU32::new(0);$/;"	v	function:ticktimer_server
TIMER_ALL_ACCESS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const TIMER_ALL_ACCESS: SYNCHRONIZATION_ACCESS_RIGHTS = 2031619u32;$/;"	C
TIMER_MODIFY_STATE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const TIMER_MODIFY_STATE: SYNCHRONIZATION_ACCESS_RIGHTS = 2u32;$/;"	C
TIMESPEC_MAX	$RUST/src/sys/pal/unix/time.rs	/^pub const TIMESPEC_MAX: libc::timespec =$/;"	C
TIMESPEC_MAX_CAPPED	$RUST/src/sys/pal/unix/time.rs	/^pub(super) const TIMESPEC_MAX_CAPPED: libc::timespec = libc::timespec {$/;"	C
TIMEVAL	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub struct TIMEVAL {$/;"	s
TLS_DESTRUCTOR	$RUST/src/sys/pal/sgx/abi/tls/mod.rs	/^static TLS_DESTRUCTOR: [AtomicUsize; TLS_KEYS] = dup!((* * * * * * *) (AtomicUsize::new(0)));$/;"	v
TLS_KEYS	$RUST/src/sys/pal/sgx/abi/tls/mod.rs	/^const TLS_KEYS: usize = 128; \/\/ Same as POSIX minimum$/;"	C
TLS_KEYS_BITSET_SIZE	$RUST/src/sys/pal/sgx/abi/tls/mod.rs	/^const TLS_KEYS_BITSET_SIZE: usize = (TLS_KEYS + (USIZE_BITS - 1)) \/ USIZE_BITS;$/;"	C
TLS_KEY_INDEX	$RUST/src/sys/pal/xous/thread_local_key.rs	/^static TLS_KEY_INDEX: AtomicUsize = AtomicUsize::new(1);$/;"	v
TLS_KEY_IN_USE	$RUST/src/sys/pal/sgx/abi/tls/mod.rs	/^static TLS_KEY_IN_USE: SyncBitset = SYNC_BITSET_INIT;$/;"	v
TLS_MEMORY_SIZE	$RUST/src/sys/pal/xous/thread_local_key.rs	/^const TLS_MEMORY_SIZE: usize = 4096;$/;"	C
TLS_OUT_OF_INDEXES	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const TLS_OUT_OF_INDEXES: u32 = 4294967295u32;$/;"	C
TMAX_MAXSEM	$RUST/src/sys/pal/itron/abi.rs	/^pub const TMAX_MAXSEM: uint_t = uint_t::MAX;$/;"	C
TMAX_RELTIM	$RUST/src/sys/pal/itron/abi.rs	/^pub const TMAX_RELTIM: RELTIM = 4_000_000_000;$/;"	C
TMO	$RUST/src/sys/pal/itron/abi.rs	/^pub type TMO = u32;$/;"	t
TMO_FEVR	$RUST/src/sys/pal/itron/abi.rs	/^pub const TMO_FEVR: TMO = TMO::MAX;$/;"	C
TMPBUF_SZ	$RUST/src/sys/pal/unix/os.rs	/^const TMPBUF_SZ: usize = 128;$/;"	C
TOKEN_ACCESS_MASK	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub type TOKEN_ACCESS_MASK = u32;$/;"	t
TOKEN_ACCESS_PSEUDO_HANDLE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const TOKEN_ACCESS_PSEUDO_HANDLE: TOKEN_ACCESS_MASK = 24u32;$/;"	C
TOKEN_ACCESS_PSEUDO_HANDLE_WIN8	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const TOKEN_ACCESS_PSEUDO_HANDLE_WIN8: TOKEN_ACCESS_MASK = 24u32;$/;"	C
TOKEN_ACCESS_SYSTEM_SECURITY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const TOKEN_ACCESS_SYSTEM_SECURITY: TOKEN_ACCESS_MASK = 16777216u32;$/;"	C
TOKEN_ADJUST_DEFAULT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const TOKEN_ADJUST_DEFAULT: TOKEN_ACCESS_MASK = 128u32;$/;"	C
TOKEN_ADJUST_GROUPS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const TOKEN_ADJUST_GROUPS: TOKEN_ACCESS_MASK = 64u32;$/;"	C
TOKEN_ADJUST_PRIVILEGES	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const TOKEN_ADJUST_PRIVILEGES: TOKEN_ACCESS_MASK = 32u32;$/;"	C
TOKEN_ADJUST_SESSIONID	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const TOKEN_ADJUST_SESSIONID: TOKEN_ACCESS_MASK = 256u32;$/;"	C
TOKEN_ALL_ACCESS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const TOKEN_ALL_ACCESS: TOKEN_ACCESS_MASK = 983551u32;$/;"	C
TOKEN_ASSIGN_PRIMARY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const TOKEN_ASSIGN_PRIMARY: TOKEN_ACCESS_MASK = 1u32;$/;"	C
TOKEN_DELETE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const TOKEN_DELETE: TOKEN_ACCESS_MASK = 65536u32;$/;"	C
TOKEN_DUPLICATE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const TOKEN_DUPLICATE: TOKEN_ACCESS_MASK = 2u32;$/;"	C
TOKEN_EXECUTE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const TOKEN_EXECUTE: TOKEN_ACCESS_MASK = 131072u32;$/;"	C
TOKEN_IMPERSONATE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const TOKEN_IMPERSONATE: TOKEN_ACCESS_MASK = 4u32;$/;"	C
TOKEN_QUERY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const TOKEN_QUERY: TOKEN_ACCESS_MASK = 8u32;$/;"	C
TOKEN_QUERY_SOURCE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const TOKEN_QUERY_SOURCE: TOKEN_ACCESS_MASK = 16u32;$/;"	C
TOKEN_READ	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const TOKEN_READ: TOKEN_ACCESS_MASK = 131080u32;$/;"	C
TOKEN_READ_CONTROL	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const TOKEN_READ_CONTROL: TOKEN_ACCESS_MASK = 131072u32;$/;"	C
TOKEN_TRUST_CONSTRAINT_MASK	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const TOKEN_TRUST_CONSTRAINT_MASK: TOKEN_ACCESS_MASK = 131096u32;$/;"	C
TOKEN_WRITE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const TOKEN_WRITE: TOKEN_ACCESS_MASK = 131296u32;$/;"	C
TOKEN_WRITE_DAC	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const TOKEN_WRITE_DAC: TOKEN_ACCESS_MASK = 262144u32;$/;"	C
TOKEN_WRITE_OWNER	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const TOKEN_WRITE_OWNER: TOKEN_ACCESS_MASK = 524288u32;$/;"	C
TPRI_SELF	$RUST/src/sys/pal/itron/abi.rs	/^pub const TPRI_SELF: PRI = 0;$/;"	C
TRUE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const TRUE: BOOL = 1i32;$/;"	C
TRUNCATE_EXISTING	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const TRUNCATE_EXISTING: FILE_CREATION_DISPOSITION = 5u32;$/;"	C
TSK_SELF	$RUST/src/sys/pal/itron/abi.rs	/^pub const TSK_SELF: ID = 0;$/;"	C
TWF_ORW	$RUST/src/sys/pal/itron/abi.rs	/^pub const TWF_ORW: MODE = 0x01;$/;"	C
T_CFLG	$RUST/src/sys/pal/itron/abi.rs	/^pub struct T_CFLG {$/;"	s
T_CMTX	$RUST/src/sys/pal/itron/abi.rs	/^pub struct T_CMTX {$/;"	s
T_CSEM	$RUST/src/sys/pal/itron/abi.rs	/^pub struct T_CSEM {$/;"	s
T_CTSK	$RUST/src/sys/pal/itron/abi.rs	/^pub struct T_CTSK {$/;"	s
TagWord	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub TagWord: u8,$/;"	m	struct:XSAVE_FORMAT
Take	$RUST/src/io/mod.rs	/^pub struct Take<T> {$/;"	s
Take	$RUST/src/sys/pal/unix/kernel_copy.rs	/^impl<T: CopyRead> CopyRead for Take<T> {$/;"	c
Target	$RUST/src/ffi/os_str.rs	/^    type Target = OsStr;$/;"	t	implementation:OsString
Target	$RUST/src/io/mod.rs	/^    type Target = [u8];$/;"	t	implementation:IoSliceMut
Target	$RUST/src/path.rs	/^    type Target = Path;$/;"	t	implementation:PathBuf
Target	$RUST/src/sync/lazy_lock.rs	/^    type Target = T;$/;"	t	implementation:LazyLock
Target	$RUST/src/sync/mpmc/counter.rs	/^    type Target = C;$/;"	t	implementation:Sender
Target	$RUST/src/sync/mpmc/utils.rs	/^    type Target = T;$/;"	t	implementation:CachePadded
Target	$RUST/src/sync/mutex.rs	/^    type Target = T;$/;"	t	implementation:MutexGuard
Target	$RUST/src/sync/remutex.rs	/^    type Target = T;$/;"	t	implementation:ReentrantMutexGuard
Target	$RUST/src/sync/rwlock.rs	/^    type Target = T;$/;"	t	implementation:RwLockWriteGuard
Target	$RUST/src/sys/pal/sgx/abi/usercalls/alloc.rs	/^    type Target = UserRef<T>;$/;"	t
Target	$RUST/src/sys/pal/sgx/waitqueue/mod.rs	/^    type Target = SpinMutexGuard<'a, WaitVariable<T>>;$/;"	t	implementation:WaitGuard
Target	$RUST/src/sys/pal/sgx/waitqueue/spin_mutex.rs	/^    type Target = T;$/;"	t	implementation:SpinMutexGuard
Target	$RUST/src/sys_common/lazy_box.rs	/^    type Target = T;$/;"	t	implementation:LazyBox
Target	$RUST/src/sys_common/wtf8.rs	/^    type Target = Wtf8;$/;"	t	implementation:Wtf8Buf
Task	$RUST/src/sys/pal/sgx/thread.rs	/^    pub(super) struct Task {$/;"	s	module:task_queue
TcpListener	$RUST/src/net/tcp.rs	/^pub struct TcpListener(net_imp::TcpListener);$/;"	s
TcpListener	$RUST/src/os/fd/owned.rs	/^impl From<OwnedFd> for crate::net::TcpListener {$/;"	c
TcpListener	$RUST/src/os/fortanix_sgx/io.rs	/^impl TryIntoRawFd for net::TcpListener {$/;"	c
TcpListener	$RUST/src/os/wasi/net/mod.rs	/^impl TcpListenerExt for net::TcpListener {$/;"	c
TcpListener	$RUST/src/os/windows/io/raw.rs	/^impl IntoRawSocket for net::TcpListener {$/;"	c
TcpListener	$RUST/src/os/windows/io/socket.rs	/^impl From<OwnedSocket> for crate::net::TcpListener {$/;"	c
TcpListener	$RUST/src/sys/pal/sgx/net.rs	/^pub struct TcpListener {$/;"	s
TcpListener	$RUST/src/sys/pal/teeos/net.rs	/^pub struct TcpListener(!);$/;"	s
TcpListener	$RUST/src/sys/pal/unix/l4re.rs	/^    pub struct TcpListener {$/;"	s	module:net
TcpListener	$RUST/src/sys/pal/unsupported/net.rs	/^pub struct TcpListener(!);$/;"	s
TcpListener	$RUST/src/sys/pal/wasi/net.rs	/^pub struct TcpListener {$/;"	s
TcpListener	$RUST/src/sys/pal/xous/net/tcplistener.rs	/^pub struct TcpListener {$/;"	s
TcpListener	$RUST/src/sys_common/net.rs	/^pub struct TcpListener {$/;"	s
TcpListenerExt	$RUST/src/os/wasi/net/mod.rs	/^pub trait TcpListenerExt {$/;"	i
TcpListenerMetadata	$RUST/src/os/fortanix_sgx/io.rs	/^pub struct TcpListenerMetadata {$/;"	s
TcpStream	$RUST/src/net/tcp.rs	/^pub struct TcpStream(net_imp::TcpStream);$/;"	s
TcpStream	$RUST/src/os/fd/owned.rs	/^impl From<OwnedFd> for crate::net::TcpStream {$/;"	c
TcpStream	$RUST/src/os/fortanix_sgx/io.rs	/^impl TryIntoRawFd for net::TcpStream {$/;"	c
TcpStream	$RUST/src/os/net/linux_ext/tcp.rs	/^impl TcpStreamExt for net::TcpStream {$/;"	c
TcpStream	$RUST/src/os/windows/io/raw.rs	/^impl IntoRawSocket for net::TcpStream {$/;"	c
TcpStream	$RUST/src/os/windows/io/socket.rs	/^impl From<OwnedSocket> for crate::net::TcpStream {$/;"	c
TcpStream	$RUST/src/sys/pal/sgx/net.rs	/^pub struct TcpStream {$/;"	s
TcpStream	$RUST/src/sys/pal/teeos/net.rs	/^pub struct TcpStream(!);$/;"	s
TcpStream	$RUST/src/sys/pal/unix/kernel_copy.rs	/^impl CopyWrite for TcpStream {$/;"	c
TcpStream	$RUST/src/sys/pal/unix/l4re.rs	/^    pub struct TcpStream {$/;"	s	module:net
TcpStream	$RUST/src/sys/pal/unsupported/net.rs	/^pub struct TcpStream(!);$/;"	s
TcpStream	$RUST/src/sys/pal/wasi/net.rs	/^pub struct TcpStream {$/;"	s
TcpStream	$RUST/src/sys/pal/xous/net/tcpstream.rs	/^pub struct TcpStream {$/;"	s
TcpStream	$RUST/src/sys_common/net.rs	/^pub struct TcpStream {$/;"	s
TcpStreamExt	$RUST/src/os/net/linux_ext/tcp.rs	/^pub trait TcpStreamExt: Sealed {$/;"	i
TcpStreamMetadata	$RUST/src/os/fortanix_sgx/io.rs	/^pub struct TcpStreamMetadata {$/;"	s
TempDir	$RUST/src/sys_common/io.rs	/^    pub struct TempDir(PathBuf);$/;"	s	module:test
Terminate	$RUST/src/sys/personality/dwarf/eh.rs	/^    Terminate,$/;"	e	enum:EHAction
TerminateProcess	$RUST/src/os/xous/ffi/definitions.rs	/^    TerminateProcess = 22,$/;"	e	enum:Syscall
TerminateProcess	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn TerminateProcess(hprocess: HANDLE, uexitcode: u32) -> BOOL;$/;"	f	signature:(hprocess: HANDLE, uexitcode: u32) -> BOOL
Termination	$RUST/src/process.rs	/^pub trait Termination {$/;"	i
TestError	$RUST/src/io/error/tests.rs	/^    struct TestError;$/;"	s	function:test_downcasting
TestWriter	$RUST/src/io/tests.rs	/^struct TestWriter {$/;"	s
Thread	$RUST/src/sys/pal/hermit/thread.rs	/^unsafe impl Sync for Thread {}$/;"	c
Thread	$RUST/src/sys/pal/itron/thread.rs	/^unsafe impl Sync for Thread {}$/;"	c
Thread	$RUST/src/sys/pal/sgx/thread.rs	/^pub struct Thread(task_queue::JoinHandle);$/;"	s
Thread	$RUST/src/sys/pal/teeos/thread.rs	/^unsafe impl Sync for Thread {}$/;"	c
Thread	$RUST/src/sys/pal/unix/thread.rs	/^unsafe impl Sync for Thread {}$/;"	c
Thread	$RUST/src/sys/pal/unsupported/thread.rs	/^pub struct Thread(!);$/;"	s
Thread	$RUST/src/sys/pal/wasi/thread.rs	/^impl Thread {$/;"	c
Thread	$RUST/src/sys/pal/wasm/atomics/thread.rs	/^pub struct Thread(!);$/;"	s
Thread	$RUST/src/sys/pal/windows/thread.rs	/^pub struct Thread {$/;"	s
Thread	$RUST/src/sys/pal/xous/thread.rs	/^pub struct Thread {$/;"	s
Thread	$RUST/src/thread/mod.rs	/^pub struct Thread {$/;"	s
ThreadId	$RUST/src/os/xous/ffi/definitions.rs	/^pub(crate) struct ThreadId(usize);$/;"	s
ThreadId	$RUST/src/sys/pal/itron/thread_parking.rs	/^pub type ThreadId = abi::ID;$/;"	t
ThreadId	$RUST/src/sys/pal/sgx/thread_parking.rs	/^pub type ThreadId = fortanix_sgx_abi::Tcs;$/;"	t
ThreadId	$RUST/src/sys/pal/unix/thread_parking/netbsd.rs	/^pub type ThreadId = lwpid_t;$/;"	t
ThreadId	$RUST/src/thread/mod.rs	/^pub struct ThreadId(NonZeroU64);$/;"	s
ThreadInfo	$RUST/src/sys_common/thread_info.rs	/^struct ThreadInfo {$/;"	s
ThreadInner	$RUST/src/sys/pal/itron/thread.rs	/^unsafe impl Sync for ThreadInner {}$/;"	c
ThreadNotAvailable	$RUST/src/os/xous/ffi/definitions.rs	/^    ThreadNotAvailable = 16,$/;"	e	enum:Error
TicktimerScalar	$RUST/src/os/xous/services/ticktimer.rs	/^pub(crate) enum TicktimerScalar {$/;"	g
Tid	$RUST/src/sys/pal/hermit/thread.rs	/^pub type Tid = abi::Tid;$/;"	t
TimedOut	$RUST/src/io/error.rs	/^    TimedOut,$/;"	e	enum:ErrorKind
TimedOut	$RUST/src/sys/pal/xous/net/mod.rs	/^    TimedOut = 8,$/;"	e	enum:NetError
Timeout	$RUST/src/os/xous/ffi/definitions.rs	/^    Timeout = 13,$/;"	e	enum:Error
Timeout	$RUST/src/sync/mpmc/error.rs	/^    Timeout(T),$/;"	e	enum:SendTimeoutError
Timeout	$RUST/src/sync/mpsc/mod.rs	/^    Timeout,$/;"	e	enum:RecvTimeoutError
Timespec	$RUST/src/sys/pal/hermit/time.rs	/^struct Timespec {$/;"	s
Timespec	$RUST/src/sys/pal/unix/time.rs	/^pub(crate) struct Timespec {$/;"	s
TlDrop	$RUST/src/thread/local/tests.rs	/^                struct TlDrop;$/;"	s	function:join_orders_after_tls_destructors
Tls	$RUST/src/sys/pal/sgx/abi/tls/mod.rs	/^pub struct Tls {$/;"	s
TlsAlloc	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn TlsAlloc() -> u32;$/;"	f	signature:() -> u32
TlsFree	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn TlsFree(dwtlsindex: u32) -> BOOL;$/;"	f	signature:(dwtlsindex: u32) -> BOOL
TlsGetValue	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn TlsGetValue(dwtlsindex: u32) -> *mut ::core::ffi::c_void;$/;"	f	signature:(dwtlsindex: u32) -> *mut ::core::ffi::c_void
TlsSetValue	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn TlsSetValue(dwtlsindex: u32, lptlsvalue: *const ::core::ffi::c_void) -> BOOL;$/;"	f	signature:(dwtlsindex: u32, lptlsvalue: *const ::core::ffi::c_void) -> BOOL
ToSocketAddrs	$RUST/src/net/socket_addr.rs	/^pub trait ToSocketAddrs {$/;"	i
Token	$RUST/src/sync/mpmc/select.rs	/^pub struct Token {$/;"	s
TooManyLinks	$RUST/src/io/error.rs	/^    TooManyLinks,$/;"	e	enum:ErrorKind
Trait	$RUST/src/panic/tests.rs	/^        trait Trait: UnwindSafe {}$/;"	i	function:panic_safety_traits
TryAcquireSRWLockExclusive	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn TryAcquireSRWLockExclusive(srwlock: *mut SRWLOCK) -> BOOLEAN;$/;"	f	signature:(srwlock: *mut SRWLOCK) -> BOOLEAN
TryAcquireSRWLockShared	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn TryAcquireSRWLockShared(srwlock: *mut SRWLOCK) -> BOOLEAN;$/;"	f	signature:(srwlock: *mut SRWLOCK) -> BOOLEAN
TryConnect	$RUST/src/os/xous/ffi/definitions.rs	/^    TryConnect = 25,$/;"	e	enum:Syscall
TryIntoInner	$RUST/src/sys/pal/sgx/mod.rs	/^pub trait TryIntoInner<Inner>: Sized {$/;"	i
TryIntoRawFd	$RUST/src/os/fortanix_sgx/io.rs	/^pub trait TryIntoRawFd: Sized {$/;"	i
TryIter	$RUST/src/sync/mpsc/mod.rs	/^pub struct TryIter<'a, T: 'a> {$/;"	s
TryLockError	$RUST/src/sync/poison.rs	/^pub enum TryLockError<T> {$/;"	g
TryLockResult	$RUST/src/sync/poison.rs	/^pub type TryLockResult<Guard> = Result<Guard, TryLockError<Guard>>;$/;"	t
TryRecvError	$RUST/src/sync/mpsc/mod.rs	/^pub enum TryRecvError {$/;"	g
TrySendError	$RUST/src/sync/mpsc/mod.rs	/^pub enum TrySendError<T> {$/;"	g
TrySendMessage	$RUST/src/os/xous/ffi/definitions.rs	/^    TrySendMessage = 24,$/;"	e	enum:Syscall
UCred	$RUST/src/os/unix/ucred.rs	/^pub struct UCred {$/;"	s
UINT	$RUST/src/sys/pal/windows/c.rs	/^pub type UINT = c_uint;$/;"	t
ULONG	$RUST/src/sys/pal/windows/c.rs	/^pub type ULONG = c_ulong;$/;"	t
UNAVAILABLE	$RUST/src/sys/pal/unix/kernel_copy.rs	/^    const UNAVAILABLE: u8 = 1;$/;"	C	function:copy_regular_files
UNC	$RUST/src/path.rs	/^    UNC($/;"	e	enum:Prefix
UNICODE_STRING	$RUST/src/sys/pal/windows/c.rs	/^impl UNICODE_STRING {$/;"	c
UNICODE_STRING	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub struct UNICODE_STRING {$/;"	s
UNINIT	$RUST/src/sys/pal/sgx/abi/mod.rs	/^    const UNINIT: usize = 0;$/;"	C	function:tcs_init
UNIX_EPOCH	$RUST/src/sys/pal/hermit/time.rs	/^pub const UNIX_EPOCH: SystemTime = SystemTime(Timespec::zero());$/;"	C
UNIX_EPOCH	$RUST/src/sys/pal/sgx/time.rs	/^pub const UNIX_EPOCH: SystemTime = SystemTime(Duration::from_secs(0));$/;"	C
UNIX_EPOCH	$RUST/src/sys/pal/solid/time.rs	/^pub const UNIX_EPOCH: SystemTime = SystemTime(0);$/;"	C
UNIX_EPOCH	$RUST/src/sys/pal/unix/time.rs	/^pub const UNIX_EPOCH: SystemTime = SystemTime { t: Timespec::zero() };$/;"	C
UNIX_EPOCH	$RUST/src/sys/pal/unsupported/time.rs	/^pub const UNIX_EPOCH: SystemTime = SystemTime(Duration::from_secs(0));$/;"	C
UNIX_EPOCH	$RUST/src/sys/pal/wasi/time.rs	/^pub const UNIX_EPOCH: SystemTime = SystemTime(Duration::from_secs(0));$/;"	C
UNIX_EPOCH	$RUST/src/sys/pal/windows/time.rs	/^pub const UNIX_EPOCH: SystemTime = SystemTime {$/;"	C
UNIX_EPOCH	$RUST/src/sys/pal/xous/time.rs	/^pub const UNIX_EPOCH: SystemTime = SystemTime(Duration::from_secs(0));$/;"	C
UNIX_EPOCH	$RUST/src/time.rs	/^pub const UNIX_EPOCH: SystemTime = SystemTime(time::UNIX_EPOCH);$/;"	C
UNIX_SIGPIPE_ATTR_SPECIFIED	$RUST/src/sys/pal/unix/mod.rs	/^static UNIX_SIGPIPE_ATTR_SPECIFIED: crate::sync::atomic::AtomicBool =$/;"	v
UNLOCKED	$RUST/src/sys/pal/unix/locks/fuchsia_mutex.rs	/^const UNLOCKED: u32 = 0;$/;"	C
UNQUOTED	$RUST/src/sys/pal/windows/args.rs	/^            static UNQUOTED: &str = r"#$*+-.\/:?@\\_";$/;"	v	function:append_bat_arg
UNWIND_DATA_REG	$RUST/src/sys/personality/gcc.rs	/^const UNWIND_DATA_REG: (i32, i32) = (6, 7); \/\/ R6, R7$/;"	C
USERDATA	$RUST/src/sys/pal/wasi/thread.rs	/^        const USERDATA: wasi::Userdata = 0x0123_45678;$/;"	C	method:Thread::sleep
USHORT	$RUST/src/sys/pal/windows/c.rs	/^pub type USHORT = c_ushort;$/;"	t
USING_SJLJ_EXCEPTIONS	$RUST/src/sys/personality/dwarf/eh.rs	/^pub const USING_SJLJ_EXCEPTIONS: bool = cfg!(all(target_os = "ios", target_arch = "arm"));$/;"	C
USIZE_BITS	$RUST/src/sys/pal/sgx/abi/tls/mod.rs	/^const USIZE_BITS: usize = 64;$/;"	C
UTF8_REPLACEMENT_CHARACTER	$RUST/src/sys_common/wtf8.rs	/^const UTF8_REPLACEMENT_CHARACTER: &str = "\\u{FFFD}";$/;"	C
UdpSocket	$RUST/src/net/udp.rs	/^pub struct UdpSocket(net_imp::UdpSocket);$/;"	s
UdpSocket	$RUST/src/os/fd/owned.rs	/^impl From<OwnedFd> for crate::net::UdpSocket {$/;"	c
UdpSocket	$RUST/src/os/windows/io/raw.rs	/^impl IntoRawSocket for net::UdpSocket {$/;"	c
UdpSocket	$RUST/src/os/windows/io/socket.rs	/^impl From<OwnedSocket> for crate::net::UdpSocket {$/;"	c
UdpSocket	$RUST/src/sys/pal/sgx/net.rs	/^pub struct UdpSocket(!);$/;"	s
UdpSocket	$RUST/src/sys/pal/teeos/net.rs	/^pub struct UdpSocket(!);$/;"	s
UdpSocket	$RUST/src/sys/pal/unix/l4re.rs	/^    pub struct UdpSocket {$/;"	s	module:net
UdpSocket	$RUST/src/sys/pal/unsupported/net.rs	/^pub struct UdpSocket(!);$/;"	s
UdpSocket	$RUST/src/sys/pal/wasi/net.rs	/^pub struct UdpSocket {$/;"	s
UdpSocket	$RUST/src/sys/pal/xous/net/udp.rs	/^pub struct UdpSocket {$/;"	s
UdpSocket	$RUST/src/sys_common/net.rs	/^pub struct UdpSocket {$/;"	s
Unaddressable	$RUST/src/sys/pal/xous/net/mod.rs	/^    Unaddressable = 1,$/;"	e	enum:NetError
Unaligned	$RUST/src/sys/personality/dwarf/mod.rs	/^struct Unaligned<T>(T);$/;"	s
Uncategorized	$RUST/src/io/error.rs	/^    Uncategorized,$/;"	e	enum:ErrorKind
UnexpectedEof	$RUST/src/io/error.rs	/^    UnexpectedEof,$/;"	e	enum:ErrorKind
UnhandledSyscall	$RUST/src/os/xous/ffi/definitions.rs	/^    UnhandledSyscall = 17,$/;"	e	enum:Error
Union	$RUST/src/collections/hash/set.rs	/^pub struct Union<'a, T: 'a, S: 'a> {$/;"	s
UnixDatagram	$RUST/src/os/unix/net/datagram.rs	/^pub struct UnixDatagram(Socket);$/;"	s
UnixListener	$RUST/src/os/unix/net/listener.rs	/^pub struct UnixListener(Socket);$/;"	s
UnixStream	$RUST/src/os/unix/net/stream.rs	/^pub struct UnixStream(pub(super) Socket);$/;"	s
UnixStream	$RUST/src/sys/pal/unix/kernel_copy.rs	/^impl CopyWrite for UnixStream {$/;"	c
Unknown	$RUST/src/os/unix/net/ancillary.rs	/^    Unknown { cmsg_level: i32, cmsg_type: i32 },$/;"	e	enum:AncillaryError
UnknownError	$RUST/src/os/xous/ffi/definitions.rs	/^    UnknownError = 22,$/;"	e	enum:Error
UnlockMutex	$RUST/src/os/xous/services/ticktimer.rs	/^    UnlockMutex(usize \/* cookie *\/),$/;"	e	enum:TicktimerScalar
UnmapMemory	$RUST/src/os/xous/ffi/definitions.rs	/^    UnmapMemory = 19,$/;"	e	enum:Syscall
Unnamed	$RUST/src/os/unix/net/addr.rs	/^    Unnamed,$/;"	e	enum:AddressKind
Unregistered	$RUST/src/sys/pal/common/thread_local/fast_local.rs	/^    Unregistered,$/;"	e	enum:DtorState
UnsafeList	$RUST/src/sys/pal/sgx/waitqueue/unsafe_list.rs	/^pub struct UnsafeList<T> {$/;"	s
UnsafeListEntry	$RUST/src/sys/pal/sgx/waitqueue/unsafe_list.rs	/^pub struct UnsafeListEntry<T> {$/;"	s
Unsupported	$RUST/src/backtrace.rs	/^    Unsupported,$/;"	e	enum:Inner
Unsupported	$RUST/src/io/error.rs	/^    Unsupported,$/;"	e	enum:ErrorKind
Unwinder	$RUST/src/sync/mutex/tests.rs	/^        struct Unwinder {$/;"	s	function:test_mutex_arc_access_in_unwind
Unwinder	$RUST/src/sync/rwlock/tests.rs	/^        struct Unwinder {$/;"	s	function:test_rw_arc_access_in_unwind
UpdateMemoryFlags	$RUST/src/os/xous/ffi/definitions.rs	/^    UpdateMemoryFlags = 12,$/;"	e	enum:Syscall
UpdateProcThreadAttribute	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn UpdateProcThreadAttribute($/;"	f	signature:( lpattributelist: LPPROC_THREAD_ATTRIBUTE_LIST, dwflags: u32, attribute: usize, lpvalue: *const ::core::ffi::c_void, cbsize: usize, lppreviousvalue: *mut ::core::ffi::c_void, lpreturnsize: *const usize, ) -> BOOL
UseBeforeInit	$RUST/src/os/xous/ffi/definitions.rs	/^    UseBeforeInit = 24,$/;"	e	enum:Error
User	$RUST/src/sys/pal/sgx/abi/usercalls/alloc.rs	/^unsafe impl<T: UserSafeSized> Send for User<[T]> {}$/;"	c
UserRef	$RUST/src/sys/pal/sgx/abi/usercalls/alloc.rs	/^pub struct UserRef<T: ?Sized>(UnsafeCell<T>);$/;"	s
UserSafe	$RUST/src/sys/pal/sgx/abi/usercalls/alloc.rs	/^pub unsafe trait UserSafe {$/;"	i
UserSafeSized	$RUST/src/sys/pal/sgx/abi/usercalls/alloc.rs	/^pub unsafe trait UserSafeSized: Copy + Sized {}$/;"	i
Usercall	$RUST/src/sys/pal/sgx/abi/usercalls/alloc.rs	/^unsafe impl UserSafeSized for Usercall {}$/;"	c
UsercallReturn	$RUST/src/sys/pal/sgx/abi/usercalls/raw.rs	/^struct UsercallReturn(u64, u64);$/;"	s
VAL	$RUST/src/sys/pal/common/thread_local/fast_local.rs	/^            static mut VAL: $t = INIT_EXPR;$/;"	v	function:__getit
VAL	$RUST/src/sys/pal/common/thread_local/static_local.rs	/^            static mut VAL: $t = INIT_EXPR;$/;"	v	function:__getit
VOLUME_NAME_DOS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const VOLUME_NAME_DOS: GETFINALPATHNAMEBYHANDLE_FLAGS = 0u32;$/;"	C
VOLUME_NAME_GUID	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const VOLUME_NAME_GUID: GETFINALPATHNAMEBYHANDLE_FLAGS = 1u32;$/;"	C
VOLUME_NAME_NONE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const VOLUME_NAME_NONE: GETFINALPATHNAMEBYHANDLE_FLAGS = 4u32;$/;"	C
Vacant	$RUST/src/collections/hash/map.rs	/^    Vacant(RawVacantEntryMut<'a, K, V, S>),$/;"	e	enum:RawEntryMut
VacantEntry	$RUST/src/collections/hash/map.rs	/^pub struct VacantEntry<'a, K: 'a, V: 'a> {$/;"	s
Value	$RUST/src/sys/pal/common/thread_local/os_local.rs	/^struct Value<T: 'static> {$/;"	s
Values	$RUST/src/collections/hash/map.rs	/^pub struct Values<'a, K: 'a, V: 'a> {$/;"	s
ValuesMut	$RUST/src/collections/hash/map.rs	/^pub struct ValuesMut<'a, K: 'a, V: 'a> {$/;"	s
VarError	$RUST/src/env.rs	/^pub enum VarError {$/;"	g
Vars	$RUST/src/env.rs	/^pub struct Vars {$/;"	s
VarsOs	$RUST/src/env.rs	/^pub struct VarsOs {$/;"	s
Vec	$RUST/src/io/copy.rs	/^impl BufferedWriterSpec for Vec<u8> {$/;"	c
Vec	$RUST/src/io/impls.rs	/^impl<A: Allocator> Write for Vec<u8, A> {$/;"	c
Vec	$RUST/src/sync/once_lock/tests.rs	/^    let fib: &'static Vec<i32> = eval_once! {$/;"	v	function:eval_once_macro
VecDeque	$RUST/src/io/copy.rs	/^impl<A: Allocator> BufferedReaderSpec for VecDeque<u8, A> {$/;"	c
VecDeque	$RUST/src/io/impls.rs	/^impl<A: Allocator> Write for VecDeque<u8, A> {$/;"	c
VectorControl	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub VectorControl: u64,$/;"	m	struct:CONTEXT
VectorRegister	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub VectorRegister: [M128A; 26],$/;"	m	struct:CONTEXT
Verbatim	$RUST/src/path.rs	/^    Verbatim(#[stable(feature = "rust1", since = "1.0.0")] &'a OsStr),$/;"	e	enum:Prefix
VerbatimDisk	$RUST/src/path.rs	/^    VerbatimDisk(#[stable(feature = "rust1", since = "1.0.0")] u8),$/;"	e	enum:Prefix
VerbatimUNC	$RUST/src/path.rs	/^    VerbatimUNC($/;"	e	enum:Prefix
WAIT_ABANDONED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WAIT_ABANDONED: WAIT_EVENT = 128u32;$/;"	C
WAIT_ABANDONED_0	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WAIT_ABANDONED_0: WAIT_EVENT = 128u32;$/;"	C
WAIT_EVENT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub type WAIT_EVENT = u32;$/;"	t
WAIT_FAILED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WAIT_FAILED: WAIT_EVENT = 4294967295u32;$/;"	C
WAIT_IO_COMPLETION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WAIT_IO_COMPLETION: WAIT_EVENT = 192u32;$/;"	C
WAIT_OBJECT_0	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WAIT_OBJECT_0: WAIT_EVENT = 0u32;$/;"	C
WAIT_ON_ADDRESS	$RUST/src/sys/pal/windows/compat.rs	/^        const WAIT_ON_ADDRESS: &CStr = c"WaitOnAddress";$/;"	C	function:load_synch_functions::try_load
WAIT_TIMEOUT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WAIT_TIMEOUT: WAIT_EVENT = 258u32;$/;"	C
WAKE_BY_ADDRESS_SINGLE	$RUST/src/sys/pal/windows/compat.rs	/^        const WAKE_BY_ADDRESS_SINGLE: &CStr = c"WakeByAddressSingle";$/;"	C	function:load_synch_functions::try_load
WCHAR	$RUST/src/sys/pal/windows/c.rs	/^pub type WCHAR = u16;$/;"	t
WC_ERR_INVALID_CHARS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WC_ERR_INVALID_CHARS: u32 = 128u32;$/;"	C
WIN32_ERROR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub type WIN32_ERROR = u32;$/;"	t
WIN32_FIND_DATAW	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub struct WIN32_FIND_DATAW {$/;"	s
WIN32_SIZE_OF	$RUST/src/sys/pal/windows/api.rs	/^        const WIN32_SIZE_OF: u32 = {$/;"	C	interface:win32_size_of::Win32SizeOf
WINSOCK_SHUTDOWN_HOW	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub type WINSOCK_SHUTDOWN_HOW = i32;$/;"	t
WINSOCK_SOCKET_TYPE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub type WINSOCK_SOCKET_TYPE = i32;$/;"	t
WORD	$RUST/src/sys/pal/windows/c.rs	/^pub type WORD = u16;$/;"	t
WORD_SIZE	$RUST/src/sys/pal/zkvm/mod.rs	/^const WORD_SIZE: usize = core::mem::size_of::<u32>();$/;"	C
WRITE	$RUST/src/sync/mpmc/list.rs	/^const WRITE: usize = 1;$/;"	C
WRITERS_WAITING	$RUST/src/sys/pal/unix/locks/futex_rwlock.rs	/^const WRITERS_WAITING: u32 = 1 << 31;$/;"	C
WRITES	$RUST/src/io/buffered/tests.rs	/^    static WRITES: AtomicUsize = AtomicUsize::new(0);$/;"	v	function:panic_in_write_doesnt_flush_in_drop
WRITE_DAC	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WRITE_DAC: FILE_ACCESS_RIGHTS = 262144u32;$/;"	C
WRITE_LOCKED	$RUST/src/sys/pal/unix/locks/futex_rwlock.rs	/^const WRITE_LOCKED: u32 = MASK;$/;"	C
WRITE_OWNER	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WRITE_OWNER: FILE_ACCESS_RIGHTS = 524288u32;$/;"	C
WSABASEERR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSABASEERR: WSA_ERROR = 10000i32;$/;"	C
WSABUF	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub struct WSABUF {$/;"	s
WSACleanup	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn WSACleanup() -> i32;$/;"	f	signature:() -> i32
WSADATA	$RUST/src/sys/pal/windows/c.rs	/^pub struct WSADATA {$/;"	s
WSADATA	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub struct WSADATA {$/;"	s
WSADuplicateSocketW	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn WSADuplicateSocketW($/;"	f	signature:( s: SOCKET, dwprocessid: u32, lpprotocolinfo: *mut WSAPROTOCOL_INFOW, ) -> i32
WSAEACCES	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSAEACCES: WSA_ERROR = 10013i32;$/;"	C
WSAEADDRINUSE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSAEADDRINUSE: WSA_ERROR = 10048i32;$/;"	C
WSAEADDRNOTAVAIL	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSAEADDRNOTAVAIL: WSA_ERROR = 10049i32;$/;"	C
WSAEAFNOSUPPORT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSAEAFNOSUPPORT: WSA_ERROR = 10047i32;$/;"	C
WSAEALREADY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSAEALREADY: WSA_ERROR = 10037i32;$/;"	C
WSAEBADF	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSAEBADF: WSA_ERROR = 10009i32;$/;"	C
WSAECANCELLED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSAECANCELLED: WSA_ERROR = 10103i32;$/;"	C
WSAECONNABORTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSAECONNABORTED: WSA_ERROR = 10053i32;$/;"	C
WSAECONNREFUSED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSAECONNREFUSED: WSA_ERROR = 10061i32;$/;"	C
WSAECONNRESET	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSAECONNRESET: WSA_ERROR = 10054i32;$/;"	C
WSAEDESTADDRREQ	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSAEDESTADDRREQ: WSA_ERROR = 10039i32;$/;"	C
WSAEDISCON	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSAEDISCON: WSA_ERROR = 10101i32;$/;"	C
WSAEDQUOT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSAEDQUOT: WSA_ERROR = 10069i32;$/;"	C
WSAEFAULT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSAEFAULT: WSA_ERROR = 10014i32;$/;"	C
WSAEHOSTDOWN	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSAEHOSTDOWN: WSA_ERROR = 10064i32;$/;"	C
WSAEHOSTUNREACH	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSAEHOSTUNREACH: WSA_ERROR = 10065i32;$/;"	C
WSAEINPROGRESS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSAEINPROGRESS: WSA_ERROR = 10036i32;$/;"	C
WSAEINTR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSAEINTR: WSA_ERROR = 10004i32;$/;"	C
WSAEINVAL	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSAEINVAL: WSA_ERROR = 10022i32;$/;"	C
WSAEINVALIDPROCTABLE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSAEINVALIDPROCTABLE: WSA_ERROR = 10104i32;$/;"	C
WSAEINVALIDPROVIDER	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSAEINVALIDPROVIDER: WSA_ERROR = 10105i32;$/;"	C
WSAEISCONN	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSAEISCONN: WSA_ERROR = 10056i32;$/;"	C
WSAELOOP	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSAELOOP: WSA_ERROR = 10062i32;$/;"	C
WSAEMFILE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSAEMFILE: WSA_ERROR = 10024i32;$/;"	C
WSAEMSGSIZE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSAEMSGSIZE: WSA_ERROR = 10040i32;$/;"	C
WSAENAMETOOLONG	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSAENAMETOOLONG: WSA_ERROR = 10063i32;$/;"	C
WSAENETDOWN	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSAENETDOWN: WSA_ERROR = 10050i32;$/;"	C
WSAENETRESET	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSAENETRESET: WSA_ERROR = 10052i32;$/;"	C
WSAENETUNREACH	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSAENETUNREACH: WSA_ERROR = 10051i32;$/;"	C
WSAENOBUFS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSAENOBUFS: WSA_ERROR = 10055i32;$/;"	C
WSAENOMORE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSAENOMORE: WSA_ERROR = 10102i32;$/;"	C
WSAENOPROTOOPT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSAENOPROTOOPT: WSA_ERROR = 10042i32;$/;"	C
WSAENOTCONN	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSAENOTCONN: WSA_ERROR = 10057i32;$/;"	C
WSAENOTEMPTY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSAENOTEMPTY: WSA_ERROR = 10066i32;$/;"	C
WSAENOTSOCK	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSAENOTSOCK: WSA_ERROR = 10038i32;$/;"	C
WSAEOPNOTSUPP	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSAEOPNOTSUPP: WSA_ERROR = 10045i32;$/;"	C
WSAEPFNOSUPPORT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSAEPFNOSUPPORT: WSA_ERROR = 10046i32;$/;"	C
WSAEPROCLIM	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSAEPROCLIM: WSA_ERROR = 10067i32;$/;"	C
WSAEPROTONOSUPPORT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSAEPROTONOSUPPORT: WSA_ERROR = 10043i32;$/;"	C
WSAEPROTOTYPE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSAEPROTOTYPE: WSA_ERROR = 10041i32;$/;"	C
WSAEPROVIDERFAILEDINIT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSAEPROVIDERFAILEDINIT: WSA_ERROR = 10106i32;$/;"	C
WSAEREFUSED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSAEREFUSED: WSA_ERROR = 10112i32;$/;"	C
WSAEREMOTE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSAEREMOTE: WSA_ERROR = 10071i32;$/;"	C
WSAESHUTDOWN	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSAESHUTDOWN: WSA_ERROR = 10058i32;$/;"	C
WSAESOCKTNOSUPPORT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSAESOCKTNOSUPPORT: WSA_ERROR = 10044i32;$/;"	C
WSAESTALE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSAESTALE: WSA_ERROR = 10070i32;$/;"	C
WSAETIMEDOUT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSAETIMEDOUT: WSA_ERROR = 10060i32;$/;"	C
WSAETOOMANYREFS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSAETOOMANYREFS: WSA_ERROR = 10059i32;$/;"	C
WSAEUSERS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSAEUSERS: WSA_ERROR = 10068i32;$/;"	C
WSAEWOULDBLOCK	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSAEWOULDBLOCK: WSA_ERROR = 10035i32;$/;"	C
WSAGetLastError	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn WSAGetLastError() -> WSA_ERROR;$/;"	f	signature:() -> WSA_ERROR
WSAHOST_NOT_FOUND	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSAHOST_NOT_FOUND: WSA_ERROR = 11001i32;$/;"	C
WSANOTINITIALISED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSANOTINITIALISED: WSA_ERROR = 10093i32;$/;"	C
WSANO_DATA	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSANO_DATA: WSA_ERROR = 11004i32;$/;"	C
WSANO_RECOVERY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSANO_RECOVERY: WSA_ERROR = 11003i32;$/;"	C
WSAPROTOCOLCHAIN	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub struct WSAPROTOCOLCHAIN {$/;"	s
WSAPROTOCOL_INFOW	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub struct WSAPROTOCOL_INFOW {$/;"	s
WSARecv	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn WSARecv($/;"	f	signature:( s: SOCKET, lpbuffers: *const WSABUF, dwbuffercount: u32, lpnumberofbytesrecvd: *mut u32, lpflags: *mut u32, lpoverlapped: *mut OVERLAPPED, lpcompletionroutine: LPWSAOVERLAPPED_COMPLETION_ROUTINE, ) -> i32
WSASERVICE_NOT_FOUND	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSASERVICE_NOT_FOUND: WSA_ERROR = 10108i32;$/;"	C
WSASYSCALLFAILURE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSASYSCALLFAILURE: WSA_ERROR = 10107i32;$/;"	C
WSASYSNOTREADY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSASYSNOTREADY: WSA_ERROR = 10091i32;$/;"	C
WSASend	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn WSASend($/;"	f	signature:( s: SOCKET, lpbuffers: *const WSABUF, dwbuffercount: u32, lpnumberofbytessent: *mut u32, dwflags: u32, lpoverlapped: *mut OVERLAPPED, lpcompletionroutine: LPWSAOVERLAPPED_COMPLETION_ROUTINE, ) -> i32
WSASocketW	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn WSASocketW($/;"	f	signature:( af: i32, r#type: i32, protocol: i32, lpprotocolinfo: *const WSAPROTOCOL_INFOW, g: u32, dwflags: u32, ) -> SOCKET
WSAStartup	$RUST/src/sys/pal/windows/c.rs	/^    pub fn WSAStartup(wversionrequested: u16, lpwsadata: *mut WSADATA) -> i32;$/;"	f	signature:(wversionrequested: u16, lpwsadata: *mut WSADATA) -> i32
WSATRY_AGAIN	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSATRY_AGAIN: WSA_ERROR = 11002i32;$/;"	C
WSATYPE_NOT_FOUND	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSATYPE_NOT_FOUND: WSA_ERROR = 10109i32;$/;"	C
WSAVERNOTSUPPORTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSAVERNOTSUPPORTED: WSA_ERROR = 10092i32;$/;"	C
WSA_CLEANUP	$RUST/src/sys/pal/windows/net.rs	/^static WSA_CLEANUP: OnceLock<unsafe extern "system" fn() -> i32> = OnceLock::new();$/;"	v
WSA_ERROR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub type WSA_ERROR = i32;$/;"	t
WSA_E_CANCELLED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSA_E_CANCELLED: WSA_ERROR = 10111i32;$/;"	C
WSA_E_NO_MORE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSA_E_NO_MORE: WSA_ERROR = 10110i32;$/;"	C
WSA_FLAG_NO_HANDLE_INHERIT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSA_FLAG_NO_HANDLE_INHERIT: u32 = 128u32;$/;"	C
WSA_FLAG_OVERLAPPED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSA_FLAG_OVERLAPPED: u32 = 1u32;$/;"	C
WSA_INVALID_HANDLE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSA_INVALID_HANDLE: WSA_ERROR = 6i32;$/;"	C
WSA_INVALID_PARAMETER	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSA_INVALID_PARAMETER: WSA_ERROR = 87i32;$/;"	C
WSA_IO_INCOMPLETE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSA_IO_INCOMPLETE: WSA_ERROR = 996i32;$/;"	C
WSA_IO_PENDING	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSA_IO_PENDING: WSA_ERROR = 997i32;$/;"	C
WSA_IPSEC_NAME_POLICY_ERROR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSA_IPSEC_NAME_POLICY_ERROR: WSA_ERROR = 11033i32;$/;"	C
WSA_NOT_ENOUGH_MEMORY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSA_NOT_ENOUGH_MEMORY: WSA_ERROR = 8i32;$/;"	C
WSA_OPERATION_ABORTED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSA_OPERATION_ABORTED: WSA_ERROR = 995i32;$/;"	C
WSA_QOS_ADMISSION_FAILURE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSA_QOS_ADMISSION_FAILURE: WSA_ERROR = 11010i32;$/;"	C
WSA_QOS_BAD_OBJECT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSA_QOS_BAD_OBJECT: WSA_ERROR = 11013i32;$/;"	C
WSA_QOS_BAD_STYLE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSA_QOS_BAD_STYLE: WSA_ERROR = 11012i32;$/;"	C
WSA_QOS_EFILTERCOUNT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSA_QOS_EFILTERCOUNT: WSA_ERROR = 11021i32;$/;"	C
WSA_QOS_EFILTERSTYLE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSA_QOS_EFILTERSTYLE: WSA_ERROR = 11019i32;$/;"	C
WSA_QOS_EFILTERTYPE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSA_QOS_EFILTERTYPE: WSA_ERROR = 11020i32;$/;"	C
WSA_QOS_EFLOWCOUNT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSA_QOS_EFLOWCOUNT: WSA_ERROR = 11023i32;$/;"	C
WSA_QOS_EFLOWDESC	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSA_QOS_EFLOWDESC: WSA_ERROR = 11026i32;$/;"	C
WSA_QOS_EFLOWSPEC	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSA_QOS_EFLOWSPEC: WSA_ERROR = 11017i32;$/;"	C
WSA_QOS_EOBJLENGTH	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSA_QOS_EOBJLENGTH: WSA_ERROR = 11022i32;$/;"	C
WSA_QOS_EPOLICYOBJ	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSA_QOS_EPOLICYOBJ: WSA_ERROR = 11025i32;$/;"	C
WSA_QOS_EPROVSPECBUF	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSA_QOS_EPROVSPECBUF: WSA_ERROR = 11018i32;$/;"	C
WSA_QOS_EPSFILTERSPEC	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSA_QOS_EPSFILTERSPEC: WSA_ERROR = 11028i32;$/;"	C
WSA_QOS_EPSFLOWSPEC	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSA_QOS_EPSFLOWSPEC: WSA_ERROR = 11027i32;$/;"	C
WSA_QOS_ESDMODEOBJ	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSA_QOS_ESDMODEOBJ: WSA_ERROR = 11029i32;$/;"	C
WSA_QOS_ESERVICETYPE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSA_QOS_ESERVICETYPE: WSA_ERROR = 11016i32;$/;"	C
WSA_QOS_ESHAPERATEOBJ	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSA_QOS_ESHAPERATEOBJ: WSA_ERROR = 11030i32;$/;"	C
WSA_QOS_EUNKOWNPSOBJ	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSA_QOS_EUNKOWNPSOBJ: WSA_ERROR = 11024i32;$/;"	C
WSA_QOS_GENERIC_ERROR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSA_QOS_GENERIC_ERROR: WSA_ERROR = 11015i32;$/;"	C
WSA_QOS_NO_RECEIVERS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSA_QOS_NO_RECEIVERS: WSA_ERROR = 11008i32;$/;"	C
WSA_QOS_NO_SENDERS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSA_QOS_NO_SENDERS: WSA_ERROR = 11007i32;$/;"	C
WSA_QOS_POLICY_FAILURE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSA_QOS_POLICY_FAILURE: WSA_ERROR = 11011i32;$/;"	C
WSA_QOS_RECEIVERS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSA_QOS_RECEIVERS: WSA_ERROR = 11005i32;$/;"	C
WSA_QOS_REQUEST_CONFIRMED	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSA_QOS_REQUEST_CONFIRMED: WSA_ERROR = 11009i32;$/;"	C
WSA_QOS_RESERVED_PETYPE	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSA_QOS_RESERVED_PETYPE: WSA_ERROR = 11031i32;$/;"	C
WSA_QOS_SENDERS	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSA_QOS_SENDERS: WSA_ERROR = 11006i32;$/;"	C
WSA_QOS_TRAFFIC_CTRL_ERROR	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSA_QOS_TRAFFIC_CTRL_ERROR: WSA_ERROR = 11014i32;$/;"	C
WSA_SECURE_HOST_NOT_FOUND	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSA_SECURE_HOST_NOT_FOUND: WSA_ERROR = 11032i32;$/;"	C
WSA_WAIT_EVENT_0	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSA_WAIT_EVENT_0: WSA_ERROR = 0i32;$/;"	C
WSA_WAIT_IO_COMPLETION	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub const WSA_WAIT_IO_COMPLETION: WSA_ERROR = 192i32;$/;"	C
WStrUnits	$RUST/src/sys_common/wstr.rs	/^pub struct WStrUnits<'a> {$/;"	s
WaitEntry	$RUST/src/sys/pal/sgx/waitqueue/mod.rs	/^struct WaitEntry {$/;"	s
WaitForCondition	$RUST/src/os/xous/services/ticktimer.rs	/^    WaitForCondition(usize \/* cookie *\/, usize \/* timeout (ms) *\/),$/;"	e	enum:TicktimerScalar
WaitForDebugEvent	$RUST/src/process/tests.rs	/^        fn WaitForDebugEvent(lpDebugEvent: *mut DEBUG_EVENT, dwMilliseconds: DWORD) -> BOOL;$/;"	f	function:test_creation_flags	signature:(lpDebugEvent: *mut DEBUG_EVENT, dwMilliseconds: DWORD) -> BOOL
WaitForMultipleObjects	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn WaitForMultipleObjects($/;"	f	signature:( ncount: u32, lphandles: *const HANDLE, bwaitall: BOOL, dwmilliseconds: u32, ) -> WAIT_EVENT
WaitForSingleObject	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn WaitForSingleObject(hhandle: HANDLE, dwmilliseconds: u32) -> WAIT_EVENT;$/;"	f	signature:(hhandle: HANDLE, dwmilliseconds: u32) -> WAIT_EVENT
WaitGuard	$RUST/src/sys/pal/sgx/waitqueue/mod.rs	/^pub struct WaitGuard<'a, T: 'a> {$/;"	s
WaitQueue	$RUST/src/sys/pal/sgx/waitqueue/mod.rs	/^unsafe impl Send for WaitQueue {}$/;"	c
WaitTimeoutResult	$RUST/src/sync/condvar.rs	/^pub struct WaitTimeoutResult(bool);$/;"	s
WaitVariable	$RUST/src/sys/pal/sgx/waitqueue/mod.rs	/^pub struct WaitVariable<T> {$/;"	s
WaitableTimer	$RUST/src/sys/pal/windows/time.rs	/^pub(super) struct WaitableTimer {$/;"	s
Waiter	$RUST/src/sys/pal/itron/condvar.rs	/^    unsafe impl Sync for Waiter {}$/;"	c	module:waiter_queue
Waiter	$RUST/src/sys/pal/sgx/thread.rs	/^    pub struct Waiter(Arc<Parker>);$/;"	s	module:wait_notify
Waiter	$RUST/src/sys_common/once/queue.rs	/^struct Waiter {$/;"	s
WaiterQueue	$RUST/src/sys/pal/itron/condvar.rs	/^    pub struct WaiterQueue {$/;"	s	module:waiter_queue
WaiterQueue	$RUST/src/sys_common/once/queue.rs	/^struct WaiterQueue<'a> {$/;"	s
Waiting	$RUST/src/sync/mpmc/select.rs	/^    Waiting,$/;"	e	enum:Selected
WakeAllConditionVariable	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn WakeAllConditionVariable(conditionvariable: *mut CONDITION_VARIABLE) -> ();$/;"	f	signature:(conditionvariable: *mut CONDITION_VARIABLE) -> ()
WakeConditionVariable	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn WakeConditionVariable(conditionvariable: *mut CONDITION_VARIABLE) -> ();$/;"	f	signature:(conditionvariable: *mut CONDITION_VARIABLE) -> ()
Waker	$RUST/src/sync/mpmc/waker.rs	/^pub(crate) struct Waker {$/;"	s
WasiFd	$RUST/src/sys/pal/wasi/fd.rs	/^pub struct WasiFd {$/;"	s
Wcr	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub Wcr: [u32; 2],$/;"	m	struct:CONTEXT
Wide	$RUST/src/backtrace.rs	/^    Wide(Vec<u16>),$/;"	e	enum:BytesOrWide
WideCharToMultiByte	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn WideCharToMultiByte($/;"	f	signature:( codepage: u32, dwflags: u32, lpwidecharstr: PCWSTR, cchwidechar: i32, lpmultibytestr: PSTR, cbmultibyte: i32, lpdefaultchar: PCSTR, lpuseddefaultchar: *mut BOOL, ) -> i32
Win32SizeOf	$RUST/src/sys/pal/windows/api.rs	/^    trait Win32SizeOf: Sized {$/;"	i	function:win32_size_of
WinError	$RUST/src/sys/pal/windows/api.rs	/^pub struct WinError {$/;"	s
WouldBlock	$RUST/src/io/error.rs	/^    WouldBlock,$/;"	e	enum:ErrorKind
WouldBlock	$RUST/src/sync/poison.rs	/^    WouldBlock,$/;"	e	enum:TryLockError
WouldBlock	$RUST/src/sys/pal/xous/net/mod.rs	/^    WouldBlock = 9,$/;"	e	enum:NetError
Write	$RUST/src/io/buffered/tests.rs	/^    Write(String),$/;"	e	enum:RecordedEvent
Write	$RUST/src/io/mod.rs	/^pub trait Write {$/;"	i
Write	$RUST/src/net/mod.rs	/^    Write,$/;"	e	enum:Shutdown
WriteConsoleW	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn WriteConsoleW($/;"	f	signature:( hconsoleoutput: HANDLE, lpbuffer: *const ::core::ffi::c_void, nnumberofcharstowrite: u32, lpnumberofcharswritten: *mut u32, lpreserved: *const ::core::ffi::c_void, ) -> BOOL
WriteFileEx	$RUST/src/sys/pal/windows/c.rs	/^pub unsafe extern "system" fn WriteFileEx($/;"	f	signature:( hFile: BorrowedHandle<'_>, lpBuffer: *mut ::core::ffi::c_void, nNumberOfBytesToWrite: u32, lpOverlapped: *mut OVERLAPPED, lpCompletionRoutine: LPOVERLAPPED_COMPLETION_ROUTINE, ) -> BOOL
WriteFileEx	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn WriteFileEx($/;"	f	signature:( hfile: HANDLE, lpbuffer: *const u8, nnumberofbytestowrite: u32, lpoverlapped: *mut OVERLAPPED, lpcompletionroutine: LPOVERLAPPED_COMPLETION_ROUTINE, ) -> BOOL
WriteObserver	$RUST/src/io/copy/tests.rs	/^struct WriteObserver {$/;"	s
WriteRecorder	$RUST/src/io/buffered/tests.rs	/^struct WriteRecorder {$/;"	s
WriteZero	$RUST/src/io/error.rs	/^    WriteZero,$/;"	e	enum:ErrorKind
Writer	$RUST/src/io/buffered/tests.rs	/^    struct Writer {$/;"	s	function:line_vectored_partial_and_errors
WriterPanicked	$RUST/src/io/buffered/bufwriter.rs	/^pub struct WriterPanicked {$/;"	s
Wtf8	$RUST/src/sys_common/wtf8.rs	/^pub struct Wtf8 {$/;"	s
Wtf8Buf	$RUST/src/sys_common/wtf8.rs	/^pub struct Wtf8Buf {$/;"	s
Wtf8CodePoints	$RUST/src/sys_common/wtf8.rs	/^pub struct Wtf8CodePoints<'a> {$/;"	s
Wvr	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub Wvr: [u64; 2],$/;"	m	struct:CONTEXT
X10	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub X10: u64,$/;"	m	struct:CONTEXT_0_0
X11	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub X11: u64,$/;"	m	struct:CONTEXT_0_0
X12	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub X12: u64,$/;"	m	struct:CONTEXT_0_0
X13	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub X13: u64,$/;"	m	struct:CONTEXT_0_0
X14	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub X14: u64,$/;"	m	struct:CONTEXT_0_0
X15	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub X15: u64,$/;"	m	struct:CONTEXT_0_0
X16	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub X16: u64,$/;"	m	struct:CONTEXT_0_0
X17	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub X17: u64,$/;"	m	struct:CONTEXT_0_0
X18	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub X18: u64,$/;"	m	struct:CONTEXT_0_0
X19	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub X19: u64,$/;"	m	struct:CONTEXT_0_0
X20	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub X20: u64,$/;"	m	struct:CONTEXT_0_0
X21	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub X21: u64,$/;"	m	struct:CONTEXT_0_0
X22	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub X22: u64,$/;"	m	struct:CONTEXT_0_0
X23	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub X23: u64,$/;"	m	struct:CONTEXT_0_0
X24	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub X24: u64,$/;"	m	struct:CONTEXT_0_0
X25	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub X25: u64,$/;"	m	struct:CONTEXT_0_0
X26	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub X26: u64,$/;"	m	struct:CONTEXT_0_0
X27	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub X27: u64,$/;"	m	struct:CONTEXT_0_0
X28	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub X28: u64,$/;"	m	struct:CONTEXT_0_0
XSAVE_FORMAT	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub struct XSAVE_FORMAT {$/;"	s
Xmm0	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub Xmm0: M128A,$/;"	m	struct:CONTEXT_0_0
Xmm1	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub Xmm1: M128A,$/;"	m	struct:CONTEXT_0_0
Xmm10	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub Xmm10: M128A,$/;"	m	struct:CONTEXT_0_0
Xmm11	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub Xmm11: M128A,$/;"	m	struct:CONTEXT_0_0
Xmm12	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub Xmm12: M128A,$/;"	m	struct:CONTEXT_0_0
Xmm13	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub Xmm13: M128A,$/;"	m	struct:CONTEXT_0_0
Xmm14	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub Xmm14: M128A,$/;"	m	struct:CONTEXT_0_0
Xmm15	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub Xmm15: M128A,$/;"	m	struct:CONTEXT_0_0
Xmm2	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub Xmm2: M128A,$/;"	m	struct:CONTEXT_0_0
Xmm3	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub Xmm3: M128A,$/;"	m	struct:CONTEXT_0_0
Xmm4	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub Xmm4: M128A,$/;"	m	struct:CONTEXT_0_0
Xmm5	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub Xmm5: M128A,$/;"	m	struct:CONTEXT_0_0
Xmm6	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub Xmm6: M128A,$/;"	m	struct:CONTEXT_0_0
Xmm7	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub Xmm7: M128A,$/;"	m	struct:CONTEXT_0_0
Xmm8	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub Xmm8: M128A,$/;"	m	struct:CONTEXT_0_0
Xmm9	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub Xmm9: M128A,$/;"	m	struct:CONTEXT_0_0
XmmRegisters	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub XmmRegisters: [M128A; 8],$/;"	m	struct:XSAVE_FORMAT
Yield	$RUST/src/os/xous/ffi/definitions.rs	/^    Yield = 3,$/;"	e	enum:Syscall
ZX_ERR_BAD_HANDLE	$RUST/src/sys/pal/unix/futex.rs	/^    pub const ZX_ERR_BAD_HANDLE: zx_status_t = -11;$/;"	C	module:zircon
ZX_ERR_BAD_STATE	$RUST/src/sys/pal/unix/futex.rs	/^    pub const ZX_ERR_BAD_STATE: zx_status_t = -20;$/;"	C	module:zircon
ZX_ERR_INVALID_ARGS	$RUST/src/sys/pal/unix/futex.rs	/^    pub const ZX_ERR_INVALID_ARGS: zx_status_t = -10;$/;"	C	module:zircon
ZX_ERR_TIMED_OUT	$RUST/src/sys/pal/unix/futex.rs	/^    pub const ZX_ERR_TIMED_OUT: zx_status_t = -21;$/;"	C	module:zircon
ZX_ERR_WRONG_TYPE	$RUST/src/sys/pal/unix/futex.rs	/^    pub const ZX_ERR_WRONG_TYPE: zx_status_t = -12;$/;"	C	module:zircon
ZX_HANDLE_INVALID	$RUST/src/sys/pal/unix/futex.rs	/^    pub const ZX_HANDLE_INVALID: zx_handle_t = 0;$/;"	C	module:zircon
ZX_HANDLE_INVALID	$RUST/src/sys/pal/unix/process/zircon.rs	/^pub const ZX_HANDLE_INVALID: zx_handle_t = 0;$/;"	C
ZX_INFO_PROCESS	$RUST/src/sys/pal/unix/process/zircon.rs	/^pub const ZX_INFO_PROCESS: zx_object_info_topic_t = 3 | (1 << 28);$/;"	C
ZX_OBJECT_SIGNAL_3	$RUST/src/sys/pal/unix/process/zircon.rs	/^pub const ZX_OBJECT_SIGNAL_3: zx_signals_t = 1 << 3;$/;"	C
ZX_OK	$RUST/src/sys/pal/unix/futex.rs	/^    pub const ZX_OK: zx_status_t = 0;$/;"	C	module:zircon
ZX_PROP_NAME	$RUST/src/sys/pal/unix/thread.rs	/^    pub const ZX_PROP_NAME: u32 = 3;$/;"	C	module:zircon
ZX_RIGHT_SAME_RIGHTS	$RUST/src/sys/pal/unix/process/zircon.rs	/^pub const ZX_RIGHT_SAME_RIGHTS: zx_rights_t = 1 << 31;$/;"	C
ZX_TASK_TERMINATED	$RUST/src/sys/pal/unix/process/zircon.rs	/^pub const ZX_TASK_TERMINATED: zx_signals_t = ZX_OBJECT_SIGNAL_3;$/;"	C
ZX_TIME_INFINITE	$RUST/src/sys/pal/unix/futex.rs	/^    pub const ZX_TIME_INFINITE: zx_time_t = zx_time_t::MAX;$/;"	C	module:zircon
ZX_TIME_INFINITE	$RUST/src/sys/pal/unix/process/zircon.rs	/^pub const ZX_TIME_INFINITE: zx_time_t = i64::MAX;$/;"	C
Zero	$RUST/src/sync/mpmc/mod.rs	/^    Zero(counter::Sender<zero::Channel<T>>),$/;"	e	enum:SenderFlavor
ZeroToken	$RUST/src/sync/mpmc/zero.rs	/^pub(crate) struct ZeroToken(*mut ());$/;"	s
\\name	$RUST/src/sys/pal/sgx/abi/entry.S	/^    .global \\name$/;"	s	inputSection:.rodata
_NSGetArgc	$RUST/src/sys/pal/unix/args.rs	/^            fn _NSGetArgc() -> *mut libc::c_int;$/;"	f	function:imp::args	signature:() -> *mut libc::c_int
_NSGetArgv	$RUST/src/sys/pal/unix/args.rs	/^            fn _NSGetArgv() -> *mut *mut *mut libc::c_char;$/;"	f	function:imp::args	signature:() -> *mut *mut *mut libc::c_char
__KEY	$RUST/src/sys/pal/common/thread_local/fast_local.rs	/^                static __KEY: $crate::thread::local_impl::Key<$t> =$/;"	v	function:__getit
__KEY	$RUST/src/sys/pal/common/thread_local/os_local.rs	/^            static __KEY: $crate::thread::local_impl::Key<$t> =$/;"	v	function:__getit
__KEY	$RUST/src/sys/pal/common/thread_local/static_local.rs	/^                static __KEY: $crate::thread::local_impl::Key<$t> =$/;"	v	function:__getit
___lwp_park60	$RUST/src/sys/pal/unix/thread_parking/netbsd.rs	/^    fn ___lwp_park60($/;"	f	signature:( clock_id: clockid_t, flags: c_int, ts: *mut timespec, unpark: lwpid_t, hint: *const c_void, unparkhint: *const c_void, ) -> c_int
__cxa_thread_atexit_impl	$RUST/src/sys/pal/unix/thread_local_dtor.rs	/^        static __cxa_thread_atexit_impl: Option<$/;"	v	function:register_dtor
__default_lib_allocator	$RUST/src/alloc.rs	/^pub mod __default_lib_allocator {$/;"	n
__dso_handle	$RUST/src/sys/pal/unix/thread_local_dtor.rs	/^        static __dso_handle: *mut u8;$/;"	v	function:register_dtor
__getit	$RUST/src/sys/pal/common/thread_local/fast_local.rs	/^        unsafe fn __getit($/;"	f	signature:( _init: $crate::option::Option<&mut $crate::option::Option<$t>>, ) -> $crate::option::Option<&'static $t>
__getit	$RUST/src/sys/pal/common/thread_local/os_local.rs	/^        unsafe fn __getit($/;"	f	signature:( _init: $crate::option::Option<&mut $crate::option::Option<$t>>, ) -> $crate::option::Option<&'static $t>
__getit	$RUST/src/sys/pal/common/thread_local/static_local.rs	/^        unsafe fn __getit($/;"	f	signature:( _init: $crate::option::Option<&mut $crate::option::Option<$t>>, ) -> $crate::option::Option<&'static $t>
__init	$RUST/src/sys/pal/common/thread_local/fast_local.rs	/^            fn __init() -> $t { $init }$/;"	f	signature:() -> $t
__init	$RUST/src/sys/pal/common/thread_local/os_local.rs	/^            fn __init() -> $t { $init }$/;"	f	signature:() -> $t
__init	$RUST/src/sys/pal/common/thread_local/static_local.rs	/^            fn __init() -> $t { $init }$/;"	f	signature:() -> $t
__pad0	$RUST/src/os/android/raw.rs	/^        pub __pad0: c_uint,$/;"	m	struct:arch::stat
__pad0	$RUST/src/os/fuchsia/raw.rs	/^        pub __pad0: c_int,$/;"	m	struct:arch::stat
__pad0	$RUST/src/os/l4re/raw.rs	/^        pub __pad0: c_int,$/;"	m	struct:arch::stat
__pad0	$RUST/src/os/linux/raw.rs	/^        pub __pad0: c_int,$/;"	m	struct:arch::stat
__pad1	$RUST/src/os/android/raw.rs	/^        pub __pad1: c_ulong,$/;"	m	struct:arch::stat
__pad1	$RUST/src/os/emscripten/raw.rs	/^    pub __pad1: c_short,$/;"	m	struct:stat
__pad1	$RUST/src/os/fuchsia/raw.rs	/^        pub __pad1: u64,$/;"	m	struct:arch::stat
__pad1	$RUST/src/os/l4re/raw.rs	/^        pub __pad1: u64,$/;"	m	struct:arch::stat
__pad1	$RUST/src/os/linux/raw.rs	/^        pub __pad1: u64,$/;"	m	struct:arch::stat
__pad2	$RUST/src/os/android/raw.rs	/^        pub __pad2: c_int,$/;"	m	struct:arch::stat
__pad2	$RUST/src/os/emscripten/raw.rs	/^    pub __pad2: c_uint,$/;"	m	struct:stat
__pad2	$RUST/src/os/fuchsia/raw.rs	/^        pub __pad2: c_uint,$/;"	m	struct:arch::stat
__pad2	$RUST/src/os/l4re/raw.rs	/^        pub __pad2: i32,$/;"	m	struct:arch::stat
__pad2	$RUST/src/os/linux/raw.rs	/^        pub __pad2: i32,$/;"	m	struct:arch::stat
__pad3	$RUST/src/os/android/raw.rs	/^        pub __pad3: [c_uchar; 4],$/;"	m	struct:arch::stat
__pad3	$RUST/src/os/l4re/raw.rs	/^        pub __pad3: [c_int; 2],$/;"	m	struct:arch::stat
__pad3	$RUST/src/os/linux/raw.rs	/^        pub __pad3: [c_int; 2],$/;"	m	struct:arch::stat
__rdl_alloc	$RUST/src/alloc.rs	/^    pub unsafe extern "C" fn __rdl_alloc(size: usize, align: usize) -> *mut u8 {$/;"	f	module:__default_lib_allocator	signature:(size: usize, align: usize) -> *mut u8
__rdl_alloc_zeroed	$RUST/src/alloc.rs	/^    pub unsafe extern "C" fn __rdl_alloc_zeroed(size: usize, align: usize) -> *mut u8 {$/;"	f	module:__default_lib_allocator	signature:(size: usize, align: usize) -> *mut u8
__rdl_dealloc	$RUST/src/alloc.rs	/^    pub unsafe extern "C" fn __rdl_dealloc(ptr: *mut u8, size: usize, align: usize) {$/;"	f	module:__default_lib_allocator	signature:(ptr: *mut u8, size: usize, align: usize)
__rdl_realloc	$RUST/src/alloc.rs	/^    pub unsafe extern "C" fn __rdl_realloc($/;"	f	module:__default_lib_allocator	signature:( ptr: *mut u8, old_size: usize, align: usize, new_size: usize, ) -> *mut u8
__read_unlock	$RUST/src/sys/pal/sgx/rwlock.rs	/^    unsafe fn __read_unlock($/;"	P	implementation:RwLock	signature:( &self, mut rguard: SpinMutexGuard<'_, WaitVariable<Option<NonZeroUsize>>>, wguard: SpinMutexGuard<'_, WaitVariable<bool>>, )
__restricted_std_workaround	$RUST/src/lib.rs	/^mod __restricted_std_workaround {}$/;"	n
__rust_abort	$RUST/src/sys/pal/hermit/mod.rs	/^pub extern "C" fn __rust_abort() {$/;"	f	signature:()
__rust_abort	$RUST/src/sys/pal/sgx/mod.rs	/^pub extern "C" fn __rust_abort() {$/;"	f	signature:()
__rust_abort	$RUST/src/sys/pal/uefi/mod.rs	/^pub extern "C" fn __rust_abort() {$/;"	f	signature:()
__rust_abort	$RUST/src/sys/pal/xous/os.rs	/^    pub extern "C" fn __rust_abort() -> ! {$/;"	f	module:c_compat	signature:() -> !
__rust_alloc_error_handler_should_panic	$RUST/src/alloc.rs	/^        static __rust_alloc_error_handler_should_panic: u8;$/;"	v	function:default_alloc_error_hook
__rust_begin_short_backtrace	$RUST/src/sys_common/backtrace.rs	/^pub fn __rust_begin_short_backtrace<F, T>(f: F) -> T$/;"	f	signature:<F, T>(f: F) -> T where F: FnOnce() -> T,
__rust_c_alloc	$RUST/src/sys/pal/sgx/alloc.rs	/^pub unsafe extern "C" fn __rust_c_alloc(size: usize, align: usize) -> *mut u8 {$/;"	f	signature:(size: usize, align: usize) -> *mut u8
__rust_c_dealloc	$RUST/src/sys/pal/sgx/alloc.rs	/^pub unsafe extern "C" fn __rust_c_dealloc(ptr: *mut u8, size: usize, align: usize) {$/;"	f	signature:(ptr: *mut u8, size: usize, align: usize)
__rust_drop_panic	$RUST/src/panicking.rs	/^extern "C" fn __rust_drop_panic() -> ! {$/;"	f	signature:() -> !
__rust_end_short_backtrace	$RUST/src/sys_common/backtrace.rs	/^pub fn __rust_end_short_backtrace<F, T>(f: F) -> T$/;"	f	signature:<F, T>(f: F) -> T where F: FnOnce() -> T,
__rust_foreign_exception	$RUST/src/panicking.rs	/^extern "C" fn __rust_foreign_exception() -> ! {$/;"	f	signature:() -> !
__rust_panic_cleanup	$RUST/src/panicking.rs	/^    fn __rust_panic_cleanup(payload: *mut u8) -> *mut (dyn Any + Send + 'static);$/;"	f	signature:(payload: *mut u8) -> *mut (dyn Any + Send + 'static)
__rust_print_err	$RUST/src/sys/pal/sgx/stdio.rs	/^pub unsafe extern "C" fn __rust_print_err(m: *mut u8, s: i32) {$/;"	f	signature:(m: *mut u8, s: i32)
__rust_rwlock_rdlock	$RUST/src/sys/pal/sgx/rwlock.rs	/^pub unsafe extern "C" fn __rust_rwlock_rdlock(p: *mut RwLock) -> i32 {$/;"	f	signature:(p: *mut RwLock) -> i32
__rust_rwlock_unlock	$RUST/src/sys/pal/sgx/rwlock.rs	/^pub unsafe extern "C" fn __rust_rwlock_unlock(p: *mut RwLock) -> i32 {$/;"	f	signature:(p: *mut RwLock) -> i32
__rust_rwlock_wrlock	$RUST/src/sys/pal/sgx/rwlock.rs	/^pub unsafe extern "C" fn __rust_rwlock_wrlock(p: *mut RwLock) -> i32 {$/;"	f	signature:(p: *mut RwLock) -> i32
__rust_start_panic	$RUST/src/panicking.rs	/^    fn __rust_start_panic(payload: &mut dyn PanicPayload) -> u32;$/;"	f	signature:(payload: &mut dyn PanicPayload) -> u32
__ss_align	$RUST/src/sys/pal/windows/c.rs	/^    pub __ss_align: i64,$/;"	m	struct:SOCKADDR_STORAGE_LH
__ss_pad1	$RUST/src/sys/pal/windows/c.rs	/^    pub __ss_pad1: [CHAR; 6],$/;"	m	struct:SOCKADDR_STORAGE_LH
__ss_pad2	$RUST/src/sys/pal/windows/c.rs	/^    pub __ss_pad2: [CHAR; 112],$/;"	m	struct:SOCKADDR_STORAGE_LH
__st_ino	$RUST/src/os/android/raw.rs	/^        pub __st_ino: u32,$/;"	m	struct:arch::stat
__st_ino	$RUST/src/os/emscripten/raw.rs	/^    pub __st_ino: u32,$/;"	m	struct:stat
__st_ino	$RUST/src/os/fuchsia/raw.rs	/^        pub __st_ino: u32,$/;"	m	struct:arch::stat
__st_ino	$RUST/src/os/l4re/raw.rs	/^        pub __st_ino: u32,$/;"	m	struct:arch::stat
__st_ino	$RUST/src/os/linux/raw.rs	/^        pub __st_ino: u32,$/;"	m	struct:arch::stat
__timespec64	$RUST/src/sys/pal/unix/time.rs	/^pub(crate) struct __timespec64 {$/;"	s
__unused	$RUST/src/os/freebsd/raw.rs	/^    pub __unused: [u8; 8],$/;"	m	struct:stat
__unused	$RUST/src/os/fuchsia/raw.rs	/^        pub __unused: [c_long; 3],$/;"	m	struct:arch::stat
__unused	$RUST/src/os/illumos/raw.rs	/^    pub __unused: [u8; 16],$/;"	m	struct:stat
__unused	$RUST/src/os/l4re/raw.rs	/^        pub __unused: [c_long; 3],$/;"	m	struct:arch::stat
__unused	$RUST/src/os/linux/raw.rs	/^        pub __unused: [c_long; 3],$/;"	m	struct:arch::stat
__unused	$RUST/src/os/solaris/raw.rs	/^    pub __unused: [u8; 16],$/;"	m	struct:stat
__unused4	$RUST/src/os/android/raw.rs	/^        pub __unused4: c_uint,$/;"	m	struct:arch::stat
__unused5	$RUST/src/os/android/raw.rs	/^        pub __unused5: c_uint,$/;"	m	struct:arch::stat
__wasilibc_find_relpath	$RUST/src/sys/pal/wasi/fs.rs	/^            pub fn __wasilibc_find_relpath($/;"	f	function:open_parent	signature:( path: *const libc::c_char, abs_prefix: *mut *const libc::c_char, relative_path: *mut *const libc::c_char, relative_path_len: libc::size_t, ) -> libc::c_int
__wasilibc_get_environ	$RUST/src/sys/pal/wasi/os.rs	/^        pub fn __wasilibc_get_environ() -> *mut *mut c_char;$/;"	f	module:libc	signature:() -> *mut *mut c_char
__write_unlock	$RUST/src/sys/pal/sgx/rwlock.rs	/^    unsafe fn __write_unlock($/;"	P	implementation:RwLock	signature:( &self, rguard: SpinMutexGuard<'_, WaitVariable<Option<NonZeroUsize>>>, wguard: SpinMutexGuard<'_, WaitVariable<bool>>, )
_assert	$RUST/src/backtrace.rs	/^    fn _assert<T: Send + Sync>() {}$/;"	f	function:_assert_send_sync	signature:<T: Send + Sync>()
_assert_both	$RUST/src/thread/mod.rs	/^    fn _assert_both<T: Send + Sync>() {}$/;"	f	function:_assert_sync_and_send	signature:<T: Send + Sync>()
_assert_error_is_sync_send	$RUST/src/io/error.rs	/^fn _assert_error_is_sync_send() {$/;"	f	signature:()
_assert_hashmap_is_unwind_safe	$RUST/src/collections/hash/map/tests.rs	/^fn _assert_hashmap_is_unwind_safe() {$/;"	f	signature:()
_assert_send_sync	$RUST/src/backtrace.rs	/^fn _assert_send_sync() {$/;"	f	signature:()
_assert_send_sync	$RUST/src/fs/tests.rs	/^fn _assert_send_sync() {$/;"	f	signature:()
_assert_sync_and_send	$RUST/src/thread/mod.rs	/^fn _assert_sync_and_send() {$/;"	f	signature:()
_create	$RUST/src/fs.rs	/^    fn _create(&self, path: &Path) -> io::Result<()> {$/;"	P	implementation:DirBuilder	signature:(&self, path: &Path) -> io::Result<()>
_ends_with	$RUST/src/path.rs	/^    fn _ends_with(&self, child: &Path) -> bool {$/;"	P	implementation:Path	signature:(&self, child: &Path) -> bool
_eprint	$RUST/src/io/stdio.rs	/^pub fn _eprint(args: fmt::Arguments<'_>) {$/;"	f	signature:(args: fmt::Arguments<'_>)
_handle	$RUST/src/sys/pal/unix/process/process_unsupported.rs	/^    _handle: pid_t,$/;"	m	struct:Process
_is_sync_send	$RUST/src/io/error.rs	/^    fn _is_sync_send<T: Sync + Send>() {}$/;"	f	function:_assert_error_is_sync_send	signature:<T: Sync + Send>()
_join	$RUST/src/path.rs	/^    fn _join(&self, path: &Path) -> PathBuf {$/;"	P	implementation:Path	signature:(&self, path: &Path) -> PathBuf
_junk	$RUST/src/process/tests.rs	/^        pub _junk: [u8; 164],$/;"	m	struct:test_creation_flags::DEBUG_EVENT
_lwp_unpark	$RUST/src/sys/pal/unix/thread_parking/netbsd.rs	/^    fn _lwp_unpark(lwp: lwpid_t, hint: *const c_void) -> c_int;$/;"	f	signature:(lwp: lwpid_t, hint: *const c_void) -> c_int
_marker	$RUST/src/sync/mpmc/list.rs	/^    _marker: PhantomData<T>,$/;"	m	struct:Channel
_marker	$RUST/src/sync/mpmc/zero.rs	/^    _marker: PhantomData<T>,$/;"	m	struct:Channel
_marker	$RUST/src/sync/once_lock.rs	/^    _marker: PhantomData<T>,$/;"	m	struct:OnceLock
_marker	$RUST/src/sys/pal/unix/weak.rs	/^    _marker: PhantomData<F>,$/;"	m	struct:DlsymWeak
_marker	$RUST/src/thread/mod.rs	/^    _marker: PhantomData<Option<&'scope scoped::ScopeData>>,$/;"	m	struct:Packet
_new	$RUST/src/io/error.rs	/^    fn _new(kind: ErrorKind, error: Box<dyn error::Error + Send + Sync>) -> Error {$/;"	P	implementation:Error	signature:(kind: ErrorKind, error: Box<dyn error::Error + Send + Sync>) -> Error
_open	$RUST/src/fs.rs	/^    fn _open(&self, path: &Path) -> io::Result<File> {$/;"	P	implementation:OpenOptions	signature:(&self, path: &Path) -> io::Result<File>
_pad	$RUST/src/os/redox/raw.rs	/^    pub _pad: [c_char; 24],$/;"	m	struct:stat
_padding	$RUST/src/sys/pal/unix/time.rs	/^    _padding: i32,$/;"	m	struct:__timespec64
_phantom	$RUST/src/os/fd/owned.rs	/^    _phantom: PhantomData<&'fd OwnedFd>,$/;"	m	struct:BorrowedFd
_phantom	$RUST/src/os/solid/io.rs	/^    _phantom: PhantomData<&'socket OwnedFd>,$/;"	m	struct:BorrowedFd
_phantom	$RUST/src/os/windows/io/handle.rs	/^    _phantom: PhantomData<&'handle OwnedHandle>,$/;"	m	struct:BorrowedHandle
_phantom	$RUST/src/os/windows/io/socket.rs	/^    _phantom: PhantomData<&'socket OwnedSocket>,$/;"	m	struct:BorrowedSocket
_phantom	$RUST/src/sys_common/lazy_box.rs	/^    _phantom: PhantomData<T>,$/;"	m	struct:LazyBox
_pinned	$RUST/src/sys/pal/unix/thread_parking/pthread.rs	/^    _pinned: PhantomPinned,$/;"	m	struct:Parker
_print	$RUST/src/io/stdio.rs	/^pub fn _print(args: fmt::Arguments<'_>) {$/;"	f	signature:(args: fmt::Arguments<'_>)
_print	$RUST/src/sys_common/backtrace.rs	/^unsafe fn _print(w: &mut dyn Write, format: PrintFmt) -> io::Result<()> {$/;"	f	signature:(w: &mut dyn Write, format: PrintFmt) -> io::Result<()>
_print_fmt	$RUST/src/sys_common/backtrace.rs	/^unsafe fn _print_fmt(fmt: &mut fmt::Formatter<'_>, print_fmt: PrintFmt) -> fmt::Result {$/;"	f	signature:(fmt: &mut fmt::Formatter<'_>, print_fmt: PrintFmt) -> fmt::Result
_push	$RUST/src/path.rs	/^    fn _push(&mut self, path: &Path) {$/;"	P	implementation:PathBuf	signature:(&mut self, path: &Path)
_remove_var	$RUST/src/env.rs	/^fn _remove_var(key: &OsStr) {$/;"	f	signature:(key: &OsStr)
_set_extension	$RUST/src/path.rs	/^    fn _set_extension(&mut self, extension: &OsStr) -> bool {$/;"	P	implementation:PathBuf	signature:(&mut self, extension: &OsStr) -> bool
_set_file_name	$RUST/src/path.rs	/^    fn _set_file_name(&mut self, file_name: &OsStr) {$/;"	P	implementation:PathBuf	signature:(&mut self, file_name: &OsStr)
_set_var	$RUST/src/env.rs	/^fn _set_var(key: &OsStr, value: &OsStr) {$/;"	f	signature:(key: &OsStr, value: &OsStr)
_start	$RUST/src/sys/pal/xous/os.rs	/^    pub extern "C" fn _start(eh_frame: usize) {$/;"	f	module:c_compat	signature:(eh_frame: usize)
_starts_with	$RUST/src/path.rs	/^    fn _starts_with(&self, base: &Path) -> bool {$/;"	P	implementation:Path	signature:(&self, base: &Path) -> bool
_strip_prefix	$RUST/src/path.rs	/^    fn _strip_prefix(&self, base: &Path) -> Result<&Path, StripPrefixError> {$/;"	P	implementation:Path	signature:(&self, base: &Path) -> Result<&Path, StripPrefixError>
_tls_used	$RUST/src/sys/pal/windows/thread_local_key.rs	/^            static _tls_used: u8;$/;"	v	function:on_tls_callback::reference_tls_used
_tlv_atexit	$RUST/src/sys/pal/unix/thread_local_dtor.rs	/^        fn _tlv_atexit(dtor: unsafe extern "C" fn(*mut u8), arg: *mut u8);$/;"	f	function:register_dtor	signature:(dtor: unsafe extern "C" fn(*mut u8), arg: *mut u8)
_var	$RUST/src/env.rs	/^fn _var(key: &OsStr) -> Result<String, VarError> {$/;"	f	signature:(key: &OsStr) -> Result<String, VarError>
_var_os	$RUST/src/env.rs	/^fn _var_os(key: &OsStr) -> Option<OsString> {$/;"	f	signature:(key: &OsStr) -> Option<OsString>
_with_extension	$RUST/src/path.rs	/^    fn _with_extension(&self, extension: &OsStr) -> PathBuf {$/;"	P	implementation:Path	signature:(&self, extension: &OsStr) -> PathBuf
_with_file_name	$RUST/src/path.rs	/^    fn _with_file_name(&self, file_name: &OsStr) -> PathBuf {$/;"	P	implementation:Path	signature:(&self, file_name: &OsStr) -> PathBuf
a_thread_panicked	$RUST/src/thread/scoped.rs	/^    a_thread_panicked: AtomicBool,$/;"	m	struct:ScopeData
abi	$RUST/src/sys/pal/hermit/futex.rs	/^            timespec.as_ref().map_or(null(), |t| t as *const abi::timespec),$/;"	C	function:futex_wait
abi	$RUST/src/sys/pal/sgx/mod.rs	/^pub mod abi;$/;"	n
abi	$RUST/src/sys/pal/solid/mod.rs	/^mod abi;$/;"	n
abi	$RUST/src/sys/pal/zkvm/mod.rs	/^mod abi;$/;"	n
able_to_not_follow_symlinks_while_hard_linking	$RUST/src/fs/tests.rs	/^fn able_to_not_follow_symlinks_while_hard_linking() -> bool {$/;"	f	signature:() -> bool
abort	$RUST/src/process.rs	/^pub fn abort() -> ! {$/;"	f	signature:() -> !
abort	$RUST/src/sys/pal/xous/os.rs	/^    pub extern "C" fn abort() {$/;"	f	module:c_compat	signature:()
abort_internal	$RUST/src/sys/pal/hermit/mod.rs	/^pub fn abort_internal() -> ! {$/;"	f	signature:() -> !
abort_internal	$RUST/src/sys/pal/sgx/mod.rs	/^pub fn abort_internal() -> ! {$/;"	f	signature:() -> !
abort_internal	$RUST/src/sys/pal/solid/mod.rs	/^pub fn abort_internal() -> ! {$/;"	f	signature:() -> !
abort_internal	$RUST/src/sys/pal/teeos/mod.rs	/^pub fn abort_internal() -> ! {$/;"	f	signature:() -> !
abort_internal	$RUST/src/sys/pal/uefi/mod.rs	/^pub fn abort_internal() -> ! {$/;"	f	signature:() -> !
abort_internal	$RUST/src/sys/pal/unix/mod.rs	/^pub fn abort_internal() -> ! {$/;"	f	signature:() -> !
abort_internal	$RUST/src/sys/pal/unsupported/common.rs	/^pub fn abort_internal() -> ! {$/;"	f	signature:() -> !
abort_internal	$RUST/src/sys/pal/wasi/mod.rs	/^pub fn abort_internal() -> ! {$/;"	f	signature:() -> !
abort_internal	$RUST/src/sys/pal/windows/mod.rs	/^pub fn abort_internal() -> ! {$/;"	f	signature:() -> !
abort_internal	$RUST/src/sys/pal/zkvm/mod.rs	/^pub fn abort_internal() -> ! {$/;"	f	signature:() -> !
abort_on_dtor_unwind	$RUST/src/sys/pal/common/thread_local/mod.rs	/^pub fn abort_on_dtor_unwind(f: impl FnOnce()) {$/;"	f	signature:(f: impl FnOnce())
abort_reentry	$RUST/src/sys/pal/sgx/abi/mod.rs	/^extern "C" fn abort_reentry() -> ! {$/;"	f	signature:() -> !
abs	$RUST/src/f32.rs	/^    pub fn abs(self) -> f32 {$/;"	P	implementation:f32	signature:(self) -> f32
abs	$RUST/src/f64.rs	/^    pub fn abs(self) -> f64 {$/;"	P	implementation:f64	signature:(self) -> f64
abs_sub	$RUST/src/f32.rs	/^    pub fn abs_sub(self, other: f32) -> f32 {$/;"	P	implementation:f32	signature:(self, other: f32) -> f32
abs_sub	$RUST/src/f64.rs	/^    pub fn abs_sub(self, other: f64) -> f64 {$/;"	P	implementation:f64	signature:(self, other: f64) -> f64
absolute	$RUST/src/path.rs	/^pub fn absolute<P: AsRef<Path>>(path: P) -> io::Result<PathBuf> {$/;"	f	signature:<P: AsRef<Path>>(path: P) -> io::Result<PathBuf>
absolute	$RUST/src/sys/pal/sgx/path.rs	/^pub(crate) fn absolute(_path: &Path) -> io::Result<PathBuf> {$/;"	f	signature:(_path: &Path) -> io::Result<PathBuf>
absolute	$RUST/src/sys/pal/unix/path.rs	/^pub(crate) fn absolute(path: &Path) -> io::Result<PathBuf> {$/;"	f	signature:(path: &Path) -> io::Result<PathBuf>
abstract_namespace_not_allowed_connect	$RUST/src/os/unix/net/tests.rs	/^fn abstract_namespace_not_allowed_connect() {$/;"	f	signature:()
accept	$RUST/src/net/tcp.rs	/^    pub fn accept(&self) -> io::Result<(TcpStream, SocketAddr)> {$/;"	P	implementation:TcpListener	signature:(&self) -> io::Result<(TcpStream, SocketAddr)>
accept	$RUST/src/os/unix/net/listener.rs	/^    pub fn accept(&self) -> io::Result<(UnixStream, SocketAddr)> {$/;"	P	implementation:UnixListener	signature:(&self) -> io::Result<(UnixStream, SocketAddr)>
accept	$RUST/src/sys/pal/hermit/net.rs	/^    pub fn accept($/;"	P	implementation:Socket	signature:( &self, storage: *mut netc::sockaddr, len: *mut netc::socklen_t, ) -> io::Result<Socket>
accept	$RUST/src/sys/pal/sgx/net.rs	/^    pub fn accept(&self) -> io::Result<(TcpStream, SocketAddr)> {$/;"	P	implementation:TcpListener	signature:(&self) -> io::Result<(TcpStream, SocketAddr)>
accept	$RUST/src/sys/pal/solid/abi/sockets.rs	/^    pub fn accept(s: c_int, addr: *mut sockaddr, addrlen: *mut socklen_t) -> c_int;$/;"	f	signature:(s: c_int, addr: *mut sockaddr, addrlen: *mut socklen_t) -> c_int
accept	$RUST/src/sys/pal/solid/net.rs	/^    pub fn accept(&self, storage: *mut sockaddr, len: *mut socklen_t) -> io::Result<Socket> {$/;"	P	implementation:Socket	signature:(&self, storage: *mut sockaddr, len: *mut socklen_t) -> io::Result<Socket>
accept	$RUST/src/sys/pal/teeos/net.rs	/^    pub fn accept(&self) -> io::Result<(TcpStream, SocketAddr)> {$/;"	P	implementation:TcpListener	signature:(&self) -> io::Result<(TcpStream, SocketAddr)>
accept	$RUST/src/sys/pal/unix/l4re.rs	/^        pub fn accept(&self) -> io::Result<(TcpStream, SocketAddr)> {$/;"	P	implementation:net::TcpListener	signature:(&self) -> io::Result<(TcpStream, SocketAddr)>
accept	$RUST/src/sys/pal/unix/net.rs	/^    pub fn accept(&self, storage: *mut sockaddr, len: *mut socklen_t) -> io::Result<Socket> {$/;"	P	implementation:Socket	signature:(&self, storage: *mut sockaddr, len: *mut socklen_t) -> io::Result<Socket>
accept	$RUST/src/sys/pal/unsupported/net.rs	/^    pub fn accept(&self) -> io::Result<(TcpStream, SocketAddr)> {$/;"	P	implementation:TcpListener	signature:(&self) -> io::Result<(TcpStream, SocketAddr)>
accept	$RUST/src/sys/pal/wasi/net.rs	/^    pub fn accept(&self) -> io::Result<(TcpStream, SocketAddr)> {$/;"	P	implementation:TcpListener	signature:(&self) -> io::Result<(TcpStream, SocketAddr)>
accept	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn accept(s: SOCKET, addr: *mut SOCKADDR, addrlen: *mut i32) -> SOCKET;$/;"	f	signature:(s: SOCKET, addr: *mut SOCKADDR, addrlen: *mut i32) -> SOCKET
accept	$RUST/src/sys/pal/windows/net.rs	/^    pub fn accept(&self, storage: *mut c::SOCKADDR, len: *mut c_int) -> io::Result<Socket> {$/;"	P	implementation:Socket	signature:(&self, storage: *mut c::SOCKADDR, len: *mut c_int) -> io::Result<Socket>
accept	$RUST/src/sys/pal/xous/net/tcplistener.rs	/^    pub fn accept(&self) -> io::Result<(TcpStream, SocketAddr)> {$/;"	P	implementation:TcpListener	signature:(&self) -> io::Result<(TcpStream, SocketAddr)>
accept	$RUST/src/sys_common/net.rs	/^    pub fn accept(&self) -> io::Result<(TcpStream, SocketAddr)> {$/;"	P	implementation:TcpListener	signature:(&self) -> io::Result<(TcpStream, SocketAddr)>
accept_prefix	$RUST/src/io/buffered/tests.rs	/^    pub accept_prefix: Option<usize>,$/;"	m	struct:ProgrammableSink
accept_stream	$RUST/src/sys/pal/sgx/abi/usercalls/mod.rs	/^pub fn accept_stream(fd: Fd) -> IoResult<(Fd, String, String)> {$/;"	f	signature:(fd: Fd) -> IoResult<(Fd, String, String)>
access_mode	$RUST/src/os/windows/fs.rs	/^    fn access_mode(&mut self, access: u32) -> &mut Self;$/;"	P	interface:OpenOptionsExt	signature:(&mut self, access: u32) -> &mut Self
access_mode	$RUST/src/sys/pal/windows/fs.rs	/^    pub fn access_mode(&mut self, access_mode: u32) {$/;"	P	implementation:OpenOptions	signature:(&mut self, access_mode: u32)
accessed	$RUST/src/fs.rs	/^    pub fn accessed(&self) -> io::Result<SystemTime> {$/;"	P	implementation:Metadata	signature:(&self) -> io::Result<SystemTime>
accessed	$RUST/src/sys/pal/hermit/fs.rs	/^    pub fn accessed(&self) -> io::Result<SystemTime> {$/;"	P	implementation:FileAttr	signature:(&self) -> io::Result<SystemTime>
accessed	$RUST/src/sys/pal/solid/fs.rs	/^    pub fn accessed(&self) -> io::Result<SystemTime> {$/;"	P	implementation:FileAttr	signature:(&self) -> io::Result<SystemTime>
accessed	$RUST/src/sys/pal/unix/fs.rs	/^    pub fn accessed(&self) -> io::Result<SystemTime> {$/;"	P	implementation:FileAttr	signature:(&self) -> io::Result<SystemTime>
accessed	$RUST/src/sys/pal/unsupported/fs.rs	/^    pub fn accessed(&self) -> io::Result<SystemTime> {$/;"	P	implementation:FileAttr	signature:(&self) -> io::Result<SystemTime>
accessed	$RUST/src/sys/pal/wasi/fs.rs	/^    pub fn accessed(&self) -> io::Result<SystemTime> {$/;"	P	implementation:FileAttr	signature:(&self) -> io::Result<SystemTime>
accessed	$RUST/src/sys/pal/windows/fs.rs	/^    pub fn accessed(&self) -> io::Result<SystemTime> {$/;"	P	implementation:FileAttr	signature:(&self) -> io::Result<SystemTime>
accessed_u64	$RUST/src/sys/pal/windows/fs.rs	/^    pub fn accessed_u64(&self) -> u64 {$/;"	P	implementation:FileAttr	signature:(&self) -> u64
acos	$RUST/src/f32.rs	/^    pub fn acos(self) -> f32 {$/;"	P	implementation:f32	signature:(self) -> f32
acos	$RUST/src/f64.rs	/^    pub fn acos(self) -> f64 {$/;"	P	implementation:f64	signature:(self) -> f64
acos	$RUST/src/sys/cmath/builtins.rs	/^    pub fn acos(n: f64) -> f64;$/;"	f	signature:(n: f64) -> f64
acos	$RUST/src/sys/cmath/windows.rs	/^    pub fn acos(n: c_double) -> c_double;$/;"	f	signature:(n: c_double) -> c_double
acosf	$RUST/src/sys/cmath/builtins.rs	/^    pub fn acosf(n: f32) -> f32;$/;"	f	signature:(n: f32) -> f32
acosf	$RUST/src/sys/cmath/windows.rs	/^    pub unsafe fn acosf(n: c_float) -> c_float {$/;"	f	module:shims	signature:(n: c_float) -> c_float
acosh	$RUST/src/f32.rs	/^    pub fn acosh(self) -> f32 {$/;"	P	implementation:f32	signature:(self) -> f32
acosh	$RUST/src/f64.rs	/^    pub fn acosh(self) -> f64 {$/;"	P	implementation:f64	signature:(self) -> f64
acquire	$RUST/src/sync/mpmc/counter.rs	/^    pub(crate) fn acquire(&self) -> Sender<C> {$/;"	P	implementation:Sender	signature:(&self) -> Sender<C>
acre_flg	$RUST/src/sys/pal/itron/abi.rs	/^    pub fn acre_flg(pk_cflg: *const T_CFLG) -> ER_ID;$/;"	f	signature:(pk_cflg: *const T_CFLG) -> ER_ID
acre_mtx	$RUST/src/sys/pal/itron/abi.rs	/^    pub fn acre_mtx(pk_cmtx: *const T_CMTX) -> ER_ID;$/;"	f	signature:(pk_cmtx: *const T_CMTX) -> ER_ID
acre_tsk	$RUST/src/sys/pal/itron/abi.rs	/^    pub fn acre_tsk(pk_ctsk: *const T_CTSK) -> ER_ID;$/;"	f	signature:(pk_ctsk: *const T_CTSK) -> ER_ID
action	$RUST/src/sys/pal/unix/process/zircon.rs	/^    pub action: u32,$/;"	m	struct:fdio_spawn_action_t
activate	$RUST/src/sys/pal/sgx/abi/tls/mod.rs	/^    pub unsafe fn activate(&self) -> ActiveTls<'_> {$/;"	P	implementation:Tls	signature:(&self) -> ActiveTls<'_>
activate_persistent	$RUST/src/sys/pal/sgx/abi/tls/mod.rs	/^    pub unsafe fn activate_persistent(self: Box<Self>) {$/;"	P	implementation:Tls	signature:(self: Box<Self>)
actual_start	$RUST/src/backtrace.rs	/^    actual_start: usize,$/;"	m	struct:Capture
add	$RUST/src/sys/pal/hermit/time.rs	/^    fn add(self, other: Duration) -> Instant {$/;"	P	implementation:Instant	signature:(self, other: Duration) -> Instant
add	$RUST/src/time.rs	/^    fn add(self, other: Duration) -> Instant {$/;"	P	implementation:Instant	signature:(self, other: Duration) -> Instant
add_assign	$RUST/src/sys/pal/hermit/time.rs	/^    fn add_assign(&mut self, other: Duration) {$/;"	P	implementation:Instant	signature:(&mut self, other: Duration)
add_assign	$RUST/src/time.rs	/^    fn add_assign(&mut self, other: Duration) {$/;"	P	implementation:SystemTime	signature:(&mut self, other: Duration)
add_creds	$RUST/src/os/unix/net/ancillary.rs	/^    pub fn add_creds(&mut self, creds: &[SocketCred]) -> bool {$/;"	P	implementation:SocketAncillary	signature:(&mut self, creds: &[SocketCred]) -> bool
add_fds	$RUST/src/os/unix/net/ancillary.rs	/^    pub fn add_fds(&mut self, fds: &[RawFd]) -> bool {$/;"	P	implementation:SocketAncillary	signature:(&mut self, fds: &[RawFd]) -> bool
add_to_ancillary_data	$RUST/src/os/unix/net/ancillary.rs	/^fn add_to_ancillary_data<T>($/;"	f	signature:<T>( buffer: &mut [u8], length: &mut usize, source: &[T], cmsg_level: libc::c_int, cmsg_type: libc::c_int, ) -> bool
addend	$RUST/src/sys/pal/sgx/abi/reloc.rs	/^    addend: T,$/;"	m	struct:Rela
addr	$RUST/src/os/net/linux_ext/mod.rs	/^pub(crate) mod addr;$/;"	n
addr	$RUST/src/os/unix/net/addr.rs	/^    pub(super) addr: libc::sockaddr_un,$/;"	m	struct:SocketAddr
addr	$RUST/src/os/unix/net/mod.rs	/^mod addr;$/;"	n
addr_to_sockaddr	$RUST/src/sys/pal/sgx/net.rs	/^fn addr_to_sockaddr(addr: &Option<String>) -> io::Result<SocketAddr> {$/;"	f	signature:(addr: &Option<String>) -> io::Result<SocketAddr>
address	$RUST/src/os/unix/net/addr.rs	/^    fn address(&self) -> AddressKind<'_> {$/;"	P	implementation:SocketAddr	signature:(&self) -> AddressKind<'_>
addrinfo	$RUST/src/sys/pal/solid/abi/sockets.rs	/^pub struct addrinfo {$/;"	s
adjust_limit	$RUST/src/os/xous/ffi.rs	/^pub(crate) fn adjust_limit(knob: Limits, current: usize, new: usize) -> Result<usize, Error> {$/;"	f	signature:(knob: Limits, current: usize, new: usize) -> Result<usize, Error>
advance	$RUST/src/io/mod.rs	/^    pub fn advance(&mut self, n: usize) {$/;"	P	implementation:IoSliceMut	signature:(&mut self, n: usize)
advance	$RUST/src/sys/pal/solid/io.rs	/^    pub fn advance(&mut self, n: usize) {$/;"	P	implementation:IoSliceMut	signature:(&mut self, n: usize)
advance	$RUST/src/sys/pal/unix/io.rs	/^    pub fn advance(&mut self, n: usize) {$/;"	P	implementation:IoSliceMut	signature:(&mut self, n: usize)
advance	$RUST/src/sys/pal/unsupported/io.rs	/^    pub fn advance(&mut self, n: usize) {$/;"	P	implementation:IoSliceMut	signature:(&mut self, n: usize)
advance	$RUST/src/sys/pal/wasi/io.rs	/^    pub fn advance(&mut self, n: usize) {$/;"	P	implementation:IoSliceMut	signature:(&mut self, n: usize)
advance	$RUST/src/sys/pal/windows/io.rs	/^    pub fn advance(&mut self, n: usize) {$/;"	P	implementation:IoSliceMut	signature:(&mut self, n: usize)
advance_slices	$RUST/src/io/mod.rs	/^    pub fn advance_slices(bufs: &mut &mut [IoSliceMut<'a>], n: usize) {$/;"	P	implementation:IoSliceMut	signature:(bufs: &mut &mut [IoSliceMut<'a>], n: usize)
advance_while	$RUST/src/sys_common/wstr.rs	/^    pub fn advance_while<P: FnMut(NonZeroU16) -> bool>(&mut self, mut predicate: P) -> usize {$/;"	P	implementation:WStrUnits	signature:<P: FnMut(NonZeroU16) -> bool>(&mut self, mut predicate: P) -> usize
advise	$RUST/src/os/wasi/fs.rs	/^    fn advise(&self, offset: u64, len: u64, advice: u8) -> io::Result<()>;$/;"	P	interface:FileExt	signature:(&self, offset: u64, len: u64, advice: u8) -> io::Result<()>
advise	$RUST/src/sys/pal/wasi/fd.rs	/^    pub(crate) fn advise(&self, offset: u64, len: u64, advice: wasi::Advice) -> io::Result<()> {$/;"	P	implementation:WasiFd	signature:(&self, offset: u64, len: u64, advice: wasi::Advice) -> io::Result<()>
ai_addr	$RUST/src/sys/pal/solid/abi/sockets.rs	/^    pub ai_addr: *mut sockaddr,$/;"	m	struct:addrinfo
ai_addr	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub ai_addr: *mut SOCKADDR,$/;"	m	struct:ADDRINFOA
ai_addrlen	$RUST/src/sys/pal/solid/abi/sockets.rs	/^    pub ai_addrlen: socklen_t,$/;"	m	struct:addrinfo
ai_addrlen	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub ai_addrlen: usize,$/;"	m	struct:ADDRINFOA
ai_canonname	$RUST/src/sys/pal/solid/abi/sockets.rs	/^    pub ai_canonname: *mut c_char,$/;"	m	struct:addrinfo
ai_canonname	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub ai_canonname: PSTR,$/;"	m	struct:ADDRINFOA
ai_family	$RUST/src/sys/pal/solid/abi/sockets.rs	/^    pub ai_family: c_int,$/;"	m	struct:addrinfo
ai_family	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub ai_family: i32,$/;"	m	struct:ADDRINFOA
ai_flags	$RUST/src/sys/pal/solid/abi/sockets.rs	/^    pub ai_flags: c_int,$/;"	m	struct:addrinfo
ai_flags	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub ai_flags: i32,$/;"	m	struct:ADDRINFOA
ai_next	$RUST/src/sys/pal/solid/abi/sockets.rs	/^    pub ai_next: *mut addrinfo,$/;"	m	struct:addrinfo
ai_next	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub ai_next: *mut ADDRINFOA,$/;"	m	struct:ADDRINFOA
ai_protocol	$RUST/src/sys/pal/solid/abi/sockets.rs	/^    pub ai_protocol: c_int,$/;"	m	struct:addrinfo
ai_protocol	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub ai_protocol: i32,$/;"	m	struct:ADDRINFOA
ai_socktype	$RUST/src/sys/pal/solid/abi/sockets.rs	/^    pub ai_socktype: c_int,$/;"	m	struct:addrinfo
ai_socktype	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub ai_socktype: i32,$/;"	m	struct:ADDRINFOA
aix	$RUST/src/os/mod.rs	/^pub mod aix;$/;"	n
alertable_io_internal	$RUST/src/sys/pal/windows/pipe.rs	/^    unsafe fn alertable_io_internal($/;"	P	implementation:AnonPipe	signature:( &self, io: AlertableIoFn, buf: c::LPVOID, len: c::DWORD, ) -> io::Result<usize>
alias_core_ffi	$RUST/src/os/raw/mod.rs	/^macro_rules! alias_core_ffi {$/;"	M
align	$RUST/src/sys/pal/uefi/tests.rs	/^fn align() {$/;"	f	signature:()
align_of	$RUST/src/sys/pal/sgx/abi/usercalls/alloc.rs	/^    fn align_of() -> usize;$/;"	P	interface:UserSafe	signature:() -> usize
aligned_malloc	$RUST/src/sys/pal/teeos/alloc.rs	/^unsafe fn aligned_malloc(layout: &Layout) -> *mut u8 {$/;"	f	signature:(layout: &Layout) -> *mut u8
all	$RUST/src/os/xous/ffi/definitions/memoryflags.rs	/^    pub fn all() -> MemoryFlags {$/;"	P	implementation:MemoryFlags	signature:() -> MemoryFlags
alloc	$RUST/src/lib.rs	/^pub mod alloc;$/;"	n
alloc	$RUST/src/os/fortanix_sgx/mod.rs	/^    pub mod alloc {$/;"	n	module:usercalls
alloc	$RUST/src/sys/pal/common/mod.rs	/^pub mod alloc;$/;"	n
alloc	$RUST/src/sys/pal/hermit/alloc.rs	/^    unsafe fn alloc(&self, layout: Layout) -> *mut u8 {$/;"	P	implementation:System	signature:(&self, layout: Layout) -> *mut u8
alloc	$RUST/src/sys/pal/hermit/mod.rs	/^pub mod alloc;$/;"	n
alloc	$RUST/src/sys/pal/sgx/abi/usercalls/mod.rs	/^pub(crate) mod alloc;$/;"	n
alloc	$RUST/src/sys/pal/sgx/alloc.rs	/^    unsafe fn alloc(&self, layout: Layout) -> *mut u8 {$/;"	P	implementation:System	signature:(&self, layout: Layout) -> *mut u8
alloc	$RUST/src/sys/pal/sgx/mod.rs	/^pub mod alloc;$/;"	n
alloc	$RUST/src/sys/pal/solid/alloc.rs	/^    unsafe fn alloc(&self, layout: Layout) -> *mut u8 {$/;"	P	implementation:System	signature:(&self, layout: Layout) -> *mut u8
alloc	$RUST/src/sys/pal/solid/mod.rs	/^pub mod alloc;$/;"	n
alloc	$RUST/src/sys/pal/teeos/alloc.rs	/^    unsafe fn alloc(&self, layout: Layout) -> *mut u8 {$/;"	P	implementation:System	signature:(&self, layout: Layout) -> *mut u8
alloc	$RUST/src/sys/pal/teeos/mod.rs	/^pub mod alloc;$/;"	n
alloc	$RUST/src/sys/pal/uefi/alloc.rs	/^    unsafe fn alloc(&self, layout: Layout) -> *mut u8 {$/;"	P	implementation:System	signature:(&self, layout: Layout) -> *mut u8
alloc	$RUST/src/sys/pal/uefi/mod.rs	/^pub mod alloc;$/;"	n
alloc	$RUST/src/sys/pal/unix/alloc.rs	/^    unsafe fn alloc(&self, layout: Layout) -> *mut u8 {$/;"	P	implementation:System	signature:(&self, layout: Layout) -> *mut u8
alloc	$RUST/src/sys/pal/unix/mod.rs	/^pub mod alloc;$/;"	n
alloc	$RUST/src/sys/pal/unsupported/alloc.rs	/^    unsafe fn alloc(&self, _layout: Layout) -> *mut u8 {$/;"	P	implementation:System	signature:(&self, _layout: Layout) -> *mut u8
alloc	$RUST/src/sys/pal/unsupported/mod.rs	/^pub mod alloc;$/;"	n
alloc	$RUST/src/sys/pal/wasi/mod.rs	/^pub mod alloc;$/;"	n
alloc	$RUST/src/sys/pal/wasm/alloc.rs	/^    unsafe fn alloc(&self, layout: Layout) -> *mut u8 {$/;"	P	implementation:System	signature:(&self, layout: Layout) -> *mut u8
alloc	$RUST/src/sys/pal/wasm/mod.rs	/^pub mod alloc;$/;"	n
alloc	$RUST/src/sys/pal/windows/alloc.rs	/^    unsafe fn alloc(&self, layout: Layout) -> *mut u8 {$/;"	P	implementation:System	signature:(&self, layout: Layout) -> *mut u8
alloc	$RUST/src/sys/pal/windows/mod.rs	/^pub mod alloc;$/;"	n
alloc	$RUST/src/sys/pal/xous/alloc.rs	/^    unsafe fn alloc(&self, layout: Layout) -> *mut u8 {$/;"	P	implementation:System	signature:(&self, layout: Layout) -> *mut u8
alloc	$RUST/src/sys/pal/xous/mod.rs	/^pub mod alloc;$/;"	n
alloc	$RUST/src/sys/pal/zkvm/alloc.rs	/^    unsafe fn alloc(&self, layout: Layout) -> *mut u8 {$/;"	P	implementation:System	signature:(&self, layout: Layout) -> *mut u8
alloc	$RUST/src/sys/pal/zkvm/mod.rs	/^pub mod alloc;$/;"	n
alloc_header	$RUST/src/sys/pal/windows/alloc/tests.rs	/^fn alloc_header() {$/;"	f	signature:()
alloc_impl	$RUST/src/alloc.rs	/^    fn alloc_impl(&self, layout: Layout, zeroed: bool) -> Result<NonNull<[u8]>, AllocError> {$/;"	P	implementation:System	signature:(&self, layout: Layout, zeroed: bool) -> Result<NonNull<[u8]>, AllocError>
alloc_zeroed	$RUST/src/sys/pal/hermit/alloc.rs	/^    unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {$/;"	P	implementation:System	signature:(&self, layout: Layout) -> *mut u8
alloc_zeroed	$RUST/src/sys/pal/sgx/alloc.rs	/^    unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {$/;"	P	implementation:System	signature:(&self, layout: Layout) -> *mut u8
alloc_zeroed	$RUST/src/sys/pal/teeos/alloc.rs	/^    unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {$/;"	P	implementation:System	signature:(&self, layout: Layout) -> *mut u8
alloc_zeroed	$RUST/src/sys/pal/unix/alloc.rs	/^    unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {$/;"	P	implementation:System	signature:(&self, layout: Layout) -> *mut u8
alloc_zeroed	$RUST/src/sys/pal/unsupported/alloc.rs	/^    unsafe fn alloc_zeroed(&self, _layout: Layout) -> *mut u8 {$/;"	P	implementation:System	signature:(&self, _layout: Layout) -> *mut u8
alloc_zeroed	$RUST/src/sys/pal/wasm/alloc.rs	/^    unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {$/;"	P	implementation:System	signature:(&self, layout: Layout) -> *mut u8
alloc_zeroed	$RUST/src/sys/pal/windows/alloc.rs	/^    unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {$/;"	P	implementation:System	signature:(&self, layout: Layout) -> *mut u8
alloc_zeroed	$RUST/src/sys/pal/xous/alloc.rs	/^    unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {$/;"	P	implementation:System	signature:(&self, layout: Layout) -> *mut u8
allocate	$RUST/src/alloc.rs	/^    fn allocate(&self, layout: Layout) -> Result<NonNull<[u8]>, AllocError> {$/;"	P	implementation:System	signature:(&self, layout: Layout) -> Result<NonNull<[u8]>, AllocError>
allocate	$RUST/src/os/wasi/fs.rs	/^    fn allocate(&self, offset: u64, len: u64) -> io::Result<()>;$/;"	P	interface:FileExt	signature:(&self, offset: u64, len: u64) -> io::Result<()>
allocate	$RUST/src/sys/pal/wasi/fd.rs	/^    pub fn allocate(&self, offset: u64, len: u64) -> io::Result<()> {$/;"	P	implementation:WasiFd	signature:(&self, offset: u64, len: u64) -> io::Result<()>
allocate	$RUST/src/sys/pal/windows/alloc.rs	/^unsafe fn allocate(layout: Layout, zeroed: bool) -> *mut u8 {$/;"	f	signature:(layout: Layout, zeroed: bool) -> *mut u8
allocate_zeroed	$RUST/src/alloc.rs	/^    fn allocate_zeroed(&self, layout: Layout) -> Result<NonNull<[u8]>, AllocError> {$/;"	P	implementation:System	signature:(&self, layout: Layout) -> Result<NonNull<[u8]>, AllocError>
allocates_zeros	$RUST/src/sys/pal/sgx/alloc.rs	/^    fn allocates_zeros(&self) -> bool {$/;"	P	implementation:Sgx	signature:(&self) -> bool
always_abort	$RUST/src/panic.rs	/^pub fn always_abort() {$/;"	f	signature:()
always_flush_error	$RUST/src/io/buffered/tests.rs	/^    pub always_flush_error: bool,$/;"	m	struct:ProgrammableSink
always_write_error	$RUST/src/io/buffered/tests.rs	/^    pub always_write_error: bool,$/;"	m	struct:ProgrammableSink
ancestors	$RUST/src/path.rs	/^    pub fn ancestors(&self) -> Ancestors<'_> {$/;"	P	implementation:Path	signature:(&self) -> Ancestors<'_>
ancillary	$RUST/src/os/unix/net/mod.rs	/^mod ancillary;$/;"	n
and_modify	$RUST/src/collections/hash/map.rs	/^    pub fn and_modify<F>(self, f: F) -> Self$/;"	P	implementation:RawEntryMut	signature:<F>(self, f: F) -> Self where F: FnOnce(&mut K, &mut V),
android	$RUST/src/os/mod.rs	/^pub mod android;$/;"	n
android	$RUST/src/sys/pal/unix/mod.rs	/^pub mod android;$/;"	n
anon_pipe	$RUST/src/sys/pal/unix/pipe.rs	/^pub fn anon_pipe() -> io::Result<(AnonPipe, AnonPipe)> {$/;"	f	signature:() -> io::Result<(AnonPipe, AnonPipe)>
anon_pipe	$RUST/src/sys/pal/windows/pipe.rs	/^pub fn anon_pipe(ours_readable: bool, their_handle_inheritable: bool) -> io::Result<Pipes> {$/;"	f	signature:(ours_readable: bool, their_handle_inheritable: bool) -> io::Result<Pipes>
ansi_str	$RUST/src/sys/pal/windows/compat.rs	/^macro_rules! ansi_str {$/;"	M
api	$RUST/src/sys/pal/windows/mod.rs	/^mod api;$/;"	n
append	$RUST/src/fs.rs	/^    pub fn append(&mut self, append: bool) -> &mut Self {$/;"	P	implementation:OpenOptions	signature:(&mut self, append: bool) -> &mut Self
append	$RUST/src/sys/pal/hermit/fs.rs	/^    pub fn append(&mut self, append: bool) {$/;"	P	implementation:OpenOptions	signature:(&mut self, append: bool)
append	$RUST/src/sys/pal/solid/fs.rs	/^    pub fn append(&mut self, append: bool) {$/;"	P	implementation:OpenOptions	signature:(&mut self, append: bool)
append	$RUST/src/sys/pal/unix/fs.rs	/^    pub fn append(&mut self, append: bool) {$/;"	P	implementation:OpenOptions	signature:(&mut self, append: bool)
append	$RUST/src/sys/pal/unsupported/fs.rs	/^    pub fn append(&mut self, _append: bool) {}$/;"	P	implementation:OpenOptions	signature:(&mut self, _append: bool)
append	$RUST/src/sys/pal/wasi/fs.rs	/^    pub fn append(&mut self, append: bool) {$/;"	P	implementation:OpenOptions	signature:(&mut self, append: bool)
append	$RUST/src/sys/pal/windows/fs.rs	/^    pub fn append(&mut self, append: bool) {$/;"	P	implementation:OpenOptions	signature:(&mut self, append: bool)
append_arg	$RUST/src/sys/pal/windows/args.rs	/^pub(crate) fn append_arg(cmd: &mut Vec<u16>, arg: &Arg, force_quotes: bool) -> io::Result<()> {$/;"	f	signature:(cmd: &mut Vec<u16>, arg: &Arg, force_quotes: bool) -> io::Result<()>
append_bat_arg	$RUST/src/sys/pal/windows/args.rs	/^fn append_bat_arg(cmd: &mut Vec<u16>, arg: &OsStr, mut quote: bool) -> io::Result<()> {$/;"	f	signature:(cmd: &mut Vec<u16>, arg: &OsStr, mut quote: bool) -> io::Result<()>
append_to_string	$RUST/src/io/mod.rs	/^pub(crate) unsafe fn append_to_string<F>(buf: &mut String, f: F) -> Result<usize>$/;"	f	signature:<F>(buf: &mut String, f: F) -> Result<usize> where F: FnOnce(&mut Vec<u8>) -> Result<usize>,
arch	$RUST/src/lib.rs	/^pub mod arch {$/;"	n
arch	$RUST/src/os/android/raw.rs	/^mod arch {$/;"	n
arch	$RUST/src/os/fortanix_sgx/mod.rs	/^pub mod arch;$/;"	n
arch	$RUST/src/os/fuchsia/raw.rs	/^mod arch {$/;"	n
arch	$RUST/src/os/l4re/raw.rs	/^mod arch {$/;"	n
arch	$RUST/src/os/linux/raw.rs	/^mod arch {$/;"	n
arch	$RUST/src/os/nto/raw.rs	/^mod arch {$/;"	n
arg	$RUST/src/process.rs	/^    pub fn arg<S: AsRef<OsStr>>(&mut self, arg: S) -> &mut Command {$/;"	P	implementation:Command	signature:<S: AsRef<OsStr>>(&mut self, arg: S) -> &mut Command
arg	$RUST/src/sys/pal/unix/process/process_common.rs	/^    pub fn arg(&mut self, arg: &OsStr) {$/;"	P	implementation:Command	signature:(&mut self, arg: &OsStr)
arg	$RUST/src/sys/pal/unsupported/process.rs	/^    pub fn arg(&mut self, _arg: &OsStr) {}$/;"	P	implementation:Command	signature:(&mut self, _arg: &OsStr)
arg	$RUST/src/sys/pal/windows/process.rs	/^    pub fn arg(&mut self, arg: &OsStr) {$/;"	P	implementation:Command	signature:(&mut self, arg: &OsStr)
arg0	$RUST/src/os/unix/process.rs	/^    fn arg0<S>(&mut self, arg: S) -> &mut process::Command$/;"	P	interface:CommandExt	signature:<S>(&mut self, arg: S) -> &mut process::Command where S: AsRef<OsStr>
args	$RUST/src/env.rs	/^pub fn args() -> Args {$/;"	f	signature:() -> Args
args	$RUST/src/process.rs	/^    pub fn args<I, S>(&mut self, args: I) -> &mut Command$/;"	P	implementation:Command	signature:<I, S>(&mut self, args: I) -> &mut Command where I: IntoIterator<Item = S>, S: AsRef<OsStr>,
args	$RUST/src/sys/pal/hermit/args.rs	/^pub fn args() -> Args {$/;"	f	signature:() -> Args
args	$RUST/src/sys/pal/hermit/mod.rs	/^pub mod args;$/;"	n
args	$RUST/src/sys/pal/sgx/args.rs	/^pub fn args() -> Args {$/;"	f	signature:() -> Args
args	$RUST/src/sys/pal/sgx/mod.rs	/^pub mod args;$/;"	n
args	$RUST/src/sys/pal/solid/mod.rs	/^pub mod args;$/;"	n
args	$RUST/src/sys/pal/teeos/mod.rs	/^pub mod args;$/;"	n
args	$RUST/src/sys/pal/uefi/args.rs	/^pub fn args() -> Args {$/;"	f	signature:() -> Args
args	$RUST/src/sys/pal/uefi/mod.rs	/^pub mod args;$/;"	n
args	$RUST/src/sys/pal/unix/args.rs	/^pub fn args() -> Args {$/;"	f	signature:() -> Args
args	$RUST/src/sys/pal/unix/mod.rs	/^pub mod args;$/;"	n
args	$RUST/src/sys/pal/unix/process/process_common.rs	/^    args: Vec<CString>,$/;"	m	struct:Command
args	$RUST/src/sys/pal/unsupported/args.rs	/^pub fn args() -> Args {$/;"	f	signature:() -> Args
args	$RUST/src/sys/pal/unsupported/mod.rs	/^pub mod args;$/;"	n
args	$RUST/src/sys/pal/wasi/args.rs	/^pub fn args() -> Args {$/;"	f	signature:() -> Args
args	$RUST/src/sys/pal/wasi/mod.rs	/^pub mod args;$/;"	n
args	$RUST/src/sys/pal/wasm/mod.rs	/^pub mod args;$/;"	n
args	$RUST/src/sys/pal/windows/args.rs	/^pub fn args() -> Args {$/;"	f	signature:() -> Args
args	$RUST/src/sys/pal/windows/mod.rs	/^pub mod args;$/;"	n
args	$RUST/src/sys/pal/windows/process.rs	/^    args: Vec<Arg>,$/;"	m	struct:Command
args	$RUST/src/sys/pal/xous/mod.rs	/^pub mod args;$/;"	n
args	$RUST/src/sys/pal/zkvm/args.rs	/^pub fn args() -> Args {$/;"	f	signature:() -> Args
args	$RUST/src/sys/pal/zkvm/mod.rs	/^pub mod args;$/;"	n
args_debug	$RUST/src/env/tests.rs	/^fn args_debug() {$/;"	f	signature:()
args_os	$RUST/src/env.rs	/^pub fn args_os() -> ArgsOs {$/;"	f	signature:() -> ArgsOs
args_os_debug	$RUST/src/env/tests.rs	/^fn args_os_debug() {$/;"	f	signature:()
argv	$RUST/src/sys/pal/unix/process/process_common.rs	/^    argv: Argv,$/;"	m	struct:Command
argv	$RUST/src/sys/pal/zkvm/args.rs	/^    fn argv(i: usize) -> OsString {$/;"	P	implementation:Args	signature:(i: usize) -> OsString
array	$RUST/src/sync/mpmc/mod.rs	/^mod array;$/;"	n
array	$RUST/src/sync/mpmc/select.rs	/^    pub(crate) array: super::array::ArrayToken,$/;"	m	struct:Token
as_abstract_name	$RUST/src/os/net/linux_ext/addr.rs	/^    fn as_abstract_name(&self) -> Option<&[u8]>;$/;"	P	interface:SocketAddrExt	signature:(&self) -> Option<&[u8]>
as_abstract_name	$RUST/src/os/unix/net/addr.rs	/^    fn as_abstract_name(&self) -> Option<&[u8]> {$/;"	P	implementation:SocketAddr	signature:(&self) -> Option<&[u8]>
as_bytes	$RUST/src/os/unix/ffi/os_str.rs	/^    fn as_bytes(&self) -> &[u8];$/;"	P	interface:OsStrExt	signature:(&self) -> &[u8]
as_bytes	$RUST/src/sys_common/wtf8.rs	/^    pub fn as_bytes(&self) -> &[u8] {$/;"	P	implementation:Wtf8	signature:(&self) -> &[u8]
as_credentials	$RUST/src/os/unix/net/ancillary.rs	/^    unsafe fn as_credentials(data: &'a [u8]) -> Self {$/;"	P	implementation:AncillaryData	signature:(data: &'a [u8]) -> Self
as_encoded_bytes	$RUST/src/ffi/os_str.rs	/^    pub fn as_encoded_bytes(&self) -> &[u8] {$/;"	P	implementation:OsStr	signature:(&self) -> &[u8]
as_encoded_bytes	$RUST/src/sys/os_str/bytes.rs	/^    pub fn as_encoded_bytes(&self) -> &[u8] {$/;"	P	implementation:Slice	signature:(&self) -> &[u8]
as_encoded_bytes	$RUST/src/sys/os_str/wtf8.rs	/^    pub fn as_encoded_bytes(&self) -> &[u8] {$/;"	P	implementation:Slice	signature:(&self) -> &[u8]
as_fd	$RUST/src/os/fd/owned.rs	/^    fn as_fd(&self) -> BorrowedFd<'_>;$/;"	P	interface:AsFd	signature:(&self) -> BorrowedFd<'_>
as_fd	$RUST/src/os/linux/process.rs	/^    fn as_fd(&self) -> BorrowedFd<'_> {$/;"	P	implementation:PidFd	signature:(&self) -> BorrowedFd<'_>
as_fd	$RUST/src/os/solid/io.rs	/^    fn as_fd(&self) -> BorrowedFd<'_>;$/;"	P	interface:AsFd	signature:(&self) -> BorrowedFd<'_>
as_fd	$RUST/src/os/unix/net/datagram.rs	/^    fn as_fd(&self) -> BorrowedFd<'_> {$/;"	P	implementation:UnixDatagram	signature:(&self) -> BorrowedFd<'_>
as_fd	$RUST/src/os/unix/net/listener.rs	/^    fn as_fd(&self) -> BorrowedFd<'_> {$/;"	P	implementation:UnixListener	signature:(&self) -> BorrowedFd<'_>
as_fd	$RUST/src/os/unix/net/stream.rs	/^    fn as_fd(&self) -> BorrowedFd<'_> {$/;"	P	implementation:UnixStream	signature:(&self) -> BorrowedFd<'_>
as_fd	$RUST/src/os/unix/process.rs	/^    fn as_fd(&self) -> BorrowedFd<'_> {$/;"	P	implementation:ChildStdout	signature:(&self) -> BorrowedFd<'_>
as_fd	$RUST/src/sys/pal/hermit/fd.rs	/^    fn as_fd(&self) -> BorrowedFd<'_> {$/;"	P	implementation:FileDesc	signature:(&self) -> BorrowedFd<'_>
as_fd	$RUST/src/sys/pal/hermit/fs.rs	/^    fn as_fd(&self) -> BorrowedFd<'_> {$/;"	P	implementation:File	signature:(&self) -> BorrowedFd<'_>
as_fd	$RUST/src/sys/pal/hermit/net.rs	/^    fn as_fd(&self) -> BorrowedFd<'_> {$/;"	P	implementation:Socket	signature:(&self) -> BorrowedFd<'_>
as_fd	$RUST/src/sys/pal/solid/net.rs	/^    fn as_fd(&self) -> BorrowedFd<'_> {$/;"	P	implementation:Socket	signature:(&self) -> BorrowedFd<'_>
as_fd	$RUST/src/sys/pal/unix/fd.rs	/^    fn as_fd(&self) -> BorrowedFd<'_> {$/;"	P	implementation:FileDesc	signature:(&self) -> BorrowedFd<'_>
as_fd	$RUST/src/sys/pal/unix/fs.rs	/^    fn as_fd(&self) -> BorrowedFd<'_> {$/;"	P	implementation:File	signature:(&self) -> BorrowedFd<'_>
as_fd	$RUST/src/sys/pal/unix/l4re.rs	/^        fn as_fd(&self) -> BorrowedFd<'_> {$/;"	P	implementation:net::Socket	signature:(&self) -> BorrowedFd<'_>
as_fd	$RUST/src/sys/pal/unix/net.rs	/^    fn as_fd(&self) -> BorrowedFd<'_> {$/;"	P	implementation:Socket	signature:(&self) -> BorrowedFd<'_>
as_fd	$RUST/src/sys/pal/unix/pipe.rs	/^    fn as_fd(&self) -> BorrowedFd<'_> {$/;"	P	implementation:AnonPipe	signature:(&self) -> BorrowedFd<'_>
as_fd	$RUST/src/sys/pal/wasi/fd.rs	/^    fn as_fd(&self) -> BorrowedFd<'_> {$/;"	P	implementation:WasiFd	signature:(&self) -> BorrowedFd<'_>
as_fd	$RUST/src/sys/pal/wasi/fs.rs	/^    fn as_fd(&self) -> BorrowedFd<'_> {$/;"	P	implementation:File	signature:(&self) -> BorrowedFd<'_>
as_fd	$RUST/src/sys/pal/wasi/net.rs	/^    fn as_fd(&self) -> BorrowedFd<'_> {$/;"	P	implementation:Socket	signature:(&self) -> BorrowedFd<'_>
as_flag	$RUST/src/sys/pal/windows/fs.rs	/^    fn as_flag(self) -> u32 {$/;"	P	implementation:ReparsePoint	signature:(self) -> u32
as_handle	$RUST/src/os/windows/io/handle.rs	/^    fn as_handle(&self) -> BorrowedHandle<'_>;$/;"	P	interface:AsHandle	signature:(&self) -> BorrowedHandle<'_>
as_handle	$RUST/src/os/windows/process.rs	/^    fn as_handle(&self) -> BorrowedHandle<'_> {$/;"	P	implementation:Child	signature:(&self) -> BorrowedHandle<'_>
as_handle	$RUST/src/sys/pal/windows/fs.rs	/^    fn as_handle(&self) -> BorrowedHandle<'_> {$/;"	P	implementation:File	signature:(&self) -> BorrowedHandle<'_>
as_handle	$RUST/src/sys/pal/windows/handle.rs	/^    fn as_handle(&self) -> BorrowedHandle<'_> {$/;"	P	implementation:Handle	signature:(&self) -> BorrowedHandle<'_>
as_i32	$RUST/src/sys/pal/unix/process/process_common.rs	/^    pub fn as_i32(&self) -> i32 {$/;"	P	implementation:ExitCode	signature:(&self) -> i32
as_i32	$RUST/src/sys/pal/unsupported/process.rs	/^    pub fn as_i32(&self) -> i32 {$/;"	P	implementation:ExitCode	signature:(&self) -> i32
as_i32	$RUST/src/sys/pal/windows/process.rs	/^    pub fn as_i32(&self) -> i32 {$/;"	P	implementation:ExitCode	signature:(&self) -> i32
as_inner	$RUST/src/ffi/os_str.rs	/^    fn as_inner(&self) -> &Slice {$/;"	P	implementation:OsStr	signature:(&self) -> &Slice
as_inner	$RUST/src/fs.rs	/^    fn as_inner(&self) -> &fs_imp::OpenOptions {$/;"	P	implementation:OpenOptions	signature:(&self) -> &fs_imp::OpenOptions
as_inner	$RUST/src/net/tcp.rs	/^    fn as_inner(&self) -> &net_imp::TcpStream {$/;"	P	implementation:TcpStream	signature:(&self) -> &net_imp::TcpStream
as_inner	$RUST/src/net/udp.rs	/^    fn as_inner(&self) -> &net_imp::UdpSocket {$/;"	P	implementation:UdpSocket	signature:(&self) -> &net_imp::UdpSocket
as_inner	$RUST/src/os/linux/process.rs	/^    fn as_inner(&self) -> &FileDesc {$/;"	P	implementation:PidFd	signature:(&self) -> &FileDesc
as_inner	$RUST/src/process.rs	/^    fn as_inner(&self) -> &imp::Process {$/;"	P	implementation:Child	signature:(&self) -> &imp::Process
as_inner	$RUST/src/sys/os_str/bytes.rs	/^    fn as_inner(&self) -> &[u8] {$/;"	P	implementation:Buf	signature:(&self) -> &[u8]
as_inner	$RUST/src/sys/os_str/wtf8.rs	/^    fn as_inner(&self) -> &Wtf8 {$/;"	P	implementation:Buf	signature:(&self) -> &Wtf8
as_inner	$RUST/src/sys/pal/hermit/fd.rs	/^    fn as_inner(&self) -> &OwnedFd {$/;"	P	implementation:FileDesc	signature:(&self) -> &OwnedFd
as_inner	$RUST/src/sys/pal/hermit/fs.rs	/^    fn as_inner(&self) -> &FileDesc {$/;"	P	implementation:File	signature:(&self) -> &FileDesc
as_inner	$RUST/src/sys/pal/hermit/net.rs	/^    fn as_inner(&self) -> &FileDesc {$/;"	P	implementation:Socket	signature:(&self) -> &FileDesc
as_inner	$RUST/src/sys/pal/sgx/fd.rs	/^    fn as_inner(&self) -> &Fd {$/;"	P	implementation:FileDesc	signature:(&self) -> &Fd
as_inner	$RUST/src/sys/pal/sgx/net.rs	/^    fn as_inner(&self) -> &Socket {$/;"	P	implementation:TcpStream	signature:(&self) -> &Socket
as_inner	$RUST/src/sys/pal/unix/fd.rs	/^    fn as_inner(&self) -> &OwnedFd {$/;"	P	implementation:FileDesc	signature:(&self) -> &OwnedFd
as_inner	$RUST/src/sys/pal/unix/fs.rs	/^    fn as_inner(&self) -> &stat64 {$/;"	P	implementation:FileAttr	signature:(&self) -> &stat64
as_inner	$RUST/src/sys/pal/unix/l4re.rs	/^        fn as_inner(&self) -> &FileDesc {$/;"	P	implementation:net::Socket	signature:(&self) -> &FileDesc
as_inner	$RUST/src/sys/pal/unix/net.rs	/^    fn as_inner(&self) -> &FileDesc {$/;"	P	implementation:Socket	signature:(&self) -> &FileDesc
as_inner	$RUST/src/sys/pal/wasi/fd.rs	/^    fn as_inner(&self) -> &OwnedFd {$/;"	P	implementation:WasiFd	signature:(&self) -> &OwnedFd
as_inner	$RUST/src/sys/pal/wasi/fs.rs	/^    fn as_inner(&self) -> &WasiFd {$/;"	P	implementation:File	signature:(&self) -> &WasiFd
as_inner	$RUST/src/sys/pal/wasi/net.rs	/^    fn as_inner(&self) -> &WasiFd {$/;"	P	implementation:Socket	signature:(&self) -> &WasiFd
as_inner	$RUST/src/sys/pal/windows/fs.rs	/^    fn as_inner(&self) -> &Handle {$/;"	P	implementation:File	signature:(&self) -> &Handle
as_inner	$RUST/src/sys/pal/windows/handle.rs	/^    fn as_inner(&self) -> &OwnedHandle {$/;"	P	implementation:Handle	signature:(&self) -> &OwnedHandle
as_inner	$RUST/src/sys/pal/windows/net.rs	/^    fn as_inner(&self) -> &OwnedSocket {$/;"	P	implementation:Socket	signature:(&self) -> &OwnedSocket
as_inner	$RUST/src/sys_common/mod.rs	/^    fn as_inner(&self) -> &Inner;$/;"	P	interface:AsInner	signature:(&self) -> &Inner
as_inner	$RUST/src/sys_common/net.rs	/^    fn as_inner(&self) -> &Socket {$/;"	P	implementation:TcpStream	signature:(&self) -> &Socket
as_inner	$RUST/src/sys_common/wtf8.rs	/^    fn as_inner(&self) -> &[u8] {$/;"	P	implementation:Wtf8	signature:(&self) -> &[u8]
as_inner	$RUST/src/thread/mod.rs	/^    fn as_inner(&self) -> &imp::Thread {$/;"	P	implementation:JoinHandle	signature:(&self) -> &imp::Thread
as_inner_mut	$RUST/src/fs.rs	/^    fn as_inner_mut(&mut self) -> &mut fs_imp::OpenOptions {$/;"	P	implementation:OpenOptions	signature:(&mut self) -> &mut fs_imp::OpenOptions
as_inner_mut	$RUST/src/process.rs	/^    fn as_inner_mut(&mut self) -> &mut imp::Command {$/;"	P	implementation:Command	signature:(&mut self) -> &mut imp::Command
as_inner_mut	$RUST/src/sys/pal/hermit/fs.rs	/^    fn as_inner_mut(&mut self) -> &mut FileDesc {$/;"	P	implementation:File	signature:(&mut self) -> &mut FileDesc
as_inner_mut	$RUST/src/sys/pal/unix/fs.rs	/^    fn as_inner_mut(&mut self) -> &mut FileDesc {$/;"	P	implementation:File	signature:(&mut self) -> &mut FileDesc
as_inner_mut	$RUST/src/sys/pal/wasi/fd.rs	/^    fn as_inner_mut(&mut self) -> &mut OwnedFd {$/;"	P	implementation:WasiFd	signature:(&mut self) -> &mut OwnedFd
as_inner_mut	$RUST/src/sys_common/mod.rs	/^    fn as_inner_mut(&mut self) -> &mut Inner;$/;"	P	interface:AsInnerMut	signature:(&mut self) -> &mut Inner
as_io_error	$RUST/src/sys/pal/solid/os.rs	/^    pub(crate) fn as_io_error(self) -> crate::io::Error {$/;"	P	implementation:ItronError	signature:(self) -> crate::io::Error
as_keyword	$RUST/src/keyword_docs.rs	/^mod as_keyword {}$/;"	n
as_mut_buf	$RUST/src/io/stdio.rs	/^    pub(crate) fn as_mut_buf(&mut self) -> &mut BufReader<impl Read> {$/;"	P	implementation:StdinLock	signature:(&mut self) -> &mut BufReader<impl Read>
as_mut_os_str	$RUST/src/path.rs	/^    pub fn as_mut_os_str(&mut self) -> &mut OsStr {$/;"	P	implementation:Path	signature:(&mut self) -> &mut OsStr
as_mut_os_string	$RUST/src/path.rs	/^    pub fn as_mut_os_string(&mut self) -> &mut OsString {$/;"	P	implementation:PathBuf	signature:(&mut self) -> &mut OsString
as_mut_ptr	$RUST/src/sys/pal/sgx/abi/usercalls/alloc.rs	/^    pub fn as_mut_ptr(&mut self) -> *mut T {$/;"	f	signature:(&mut self) -> *mut T
as_mut_ptr	$RUST/src/sys/pal/windows/fs.rs	/^    fn as_mut_ptr(&mut self) -> *mut u8 {$/;"	P	implementation:DirBuff	signature:(&mut self) -> *mut u8
as_mut_slice	$RUST/src/sys/os_str/bytes.rs	/^    pub fn as_mut_slice(&mut self) -> &mut Slice {$/;"	P	implementation:Buf	signature:(&mut self) -> &mut Slice
as_mut_slice	$RUST/src/sys/os_str/wtf8.rs	/^    pub fn as_mut_slice(&mut self) -> &mut Slice {$/;"	P	implementation:Buf	signature:(&mut self) -> &mut Slice
as_mut_slice	$RUST/src/sys/pal/solid/io.rs	/^    pub fn as_mut_slice(&mut self) -> &mut [u8] {$/;"	P	implementation:IoSliceMut	signature:(&mut self) -> &mut [u8]
as_mut_slice	$RUST/src/sys/pal/unix/io.rs	/^    pub fn as_mut_slice(&mut self) -> &mut [u8] {$/;"	P	implementation:IoSliceMut	signature:(&mut self) -> &mut [u8]
as_mut_slice	$RUST/src/sys/pal/unsupported/io.rs	/^    pub fn as_mut_slice(&mut self) -> &mut [u8] {$/;"	P	implementation:IoSliceMut	signature:(&mut self) -> &mut [u8]
as_mut_slice	$RUST/src/sys/pal/wasi/io.rs	/^    pub fn as_mut_slice(&mut self) -> &mut [u8] {$/;"	P	implementation:IoSliceMut	signature:(&mut self) -> &mut [u8]
as_mut_slice	$RUST/src/sys/pal/windows/io.rs	/^    pub fn as_mut_slice(&mut self) -> &mut [u8] {$/;"	P	implementation:IoSliceMut	signature:(&mut self) -> &mut [u8]
as_mut_slice	$RUST/src/sys_common/wtf8.rs	/^    pub fn as_mut_slice(&mut self) -> &mut Wtf8 {$/;"	P	implementation:Wtf8Buf	signature:(&mut self) -> &mut Wtf8
as_mut_vec	$RUST/src/path.rs	/^    fn as_mut_vec(&mut self) -> &mut Vec<u8> {$/;"	P	implementation:PathBuf	signature:(&mut self) -> &mut Vec<u8>
as_os_str	$RUST/src/ffi/os_str.rs	/^    pub fn as_os_str(&self) -> &OsStr {$/;"	P	implementation:OsString	signature:(&self) -> &OsStr
as_os_str	$RUST/src/path.rs	/^    pub fn as_os_str(self) -> &'a OsStr {$/;"	P	implementation:Component	signature:(self) -> &'a OsStr
as_path	$RUST/src/path.rs	/^    pub fn as_path(&self) -> &Path {$/;"	P	implementation:PathBuf	signature:(&self) -> &Path
as_pathname	$RUST/src/os/unix/net/addr.rs	/^    pub fn as_pathname(&self) -> Option<&Path> {$/;"	P	implementation:SocketAddr	signature:(&self) -> Option<&Path>
as_pthread_t	$RUST/src/os/unix/thread.rs	/^    fn as_pthread_t(&self) -> RawPthread;$/;"	P	interface:JoinHandleExt	signature:(&self) -> RawPthread
as_ptr	$RUST/src/sys/pal/sgx/abi/usercalls/alloc.rs	/^    pub fn as_ptr(&self) -> *const T {$/;"	f	signature:(&self) -> *const T
as_ptr	$RUST/src/sys/pal/unix/process/process_common.rs	/^    pub fn as_ptr(&self) -> *const *const c_char {$/;"	P	implementation:CStringArray	signature:(&self) -> *const *const c_char
as_ptr	$RUST/src/sys/pal/windows/api.rs	/^    fn as_ptr(&self) -> *const c_void;$/;"	P	interface:SetFileInformation	signature:(&self) -> *const c_void
as_ptr	$RUST/src/sys_common/net.rs	/^    pub fn as_ptr(&self) -> *const c::sockaddr {$/;"	P	implementation:SocketAddrCRepr	signature:(&self) -> *const c::sockaddr
as_raw	$RUST/src/sys/pal/hermit/net.rs	/^    pub fn as_raw(&self) -> RawFd {$/;"	P	implementation:Socket	signature:(&self) -> RawFd
as_raw	$RUST/src/sys/pal/itron/error.rs	/^    pub fn as_raw(&self) -> abi::ER {$/;"	P	implementation:ItronError	signature:(&self) -> abi::ER
as_raw	$RUST/src/sys/pal/solid/net.rs	/^    pub fn as_raw(&self) -> c_int {$/;"	P	implementation:Socket	signature:(&self) -> c_int
as_raw	$RUST/src/sys/pal/unix/l4re.rs	/^        pub fn as_raw(&self) -> RawFd {$/;"	P	implementation:net::Socket	signature:(&self) -> RawFd
as_raw	$RUST/src/sys/pal/unix/net.rs	/^    pub fn as_raw(&self) -> RawFd {$/;"	P	implementation:Socket	signature:(&self) -> RawFd
as_raw	$RUST/src/sys/pal/windows/net.rs	/^    pub fn as_raw(&self) -> c::SOCKET {$/;"	P	implementation:Socket	signature:(&self) -> c::SOCKET
as_raw_fd	$RUST/src/os/fd/owned.rs	/^    fn as_raw_fd(&self) -> RawFd {$/;"	P	implementation:OwnedFd	signature:(&self) -> RawFd
as_raw_fd	$RUST/src/os/fd/raw.rs	/^    fn as_raw_fd(&self) -> RawFd;$/;"	P	interface:AsRawFd	signature:(&self) -> RawFd
as_raw_fd	$RUST/src/os/fortanix_sgx/io.rs	/^    fn as_raw_fd(&self) -> RawFd;$/;"	P	interface:AsRawFd	signature:(&self) -> RawFd
as_raw_fd	$RUST/src/os/linux/process.rs	/^    fn as_raw_fd(&self) -> RawFd {$/;"	P	implementation:PidFd	signature:(&self) -> RawFd
as_raw_fd	$RUST/src/os/solid/io.rs	/^    fn as_raw_fd(&self) -> RawFd;$/;"	P	interface:AsRawFd	signature:(&self) -> RawFd
as_raw_fd	$RUST/src/os/unix/net/datagram.rs	/^    fn as_raw_fd(&self) -> RawFd {$/;"	P	implementation:UnixDatagram	signature:(&self) -> RawFd
as_raw_fd	$RUST/src/os/unix/net/listener.rs	/^    fn as_raw_fd(&self) -> RawFd {$/;"	P	implementation:UnixListener	signature:(&self) -> RawFd
as_raw_fd	$RUST/src/os/unix/net/stream.rs	/^    fn as_raw_fd(&self) -> RawFd {$/;"	P	implementation:UnixStream	signature:(&self) -> RawFd
as_raw_fd	$RUST/src/os/unix/process.rs	/^    fn as_raw_fd(&self) -> RawFd {$/;"	P	implementation:ChildStdout	signature:(&self) -> RawFd
as_raw_fd	$RUST/src/sys/pal/hermit/fd.rs	/^    fn as_raw_fd(&self) -> RawFd {$/;"	P	implementation:FileDesc	signature:(&self) -> RawFd
as_raw_fd	$RUST/src/sys/pal/hermit/fs.rs	/^    fn as_raw_fd(&self) -> RawFd {$/;"	P	implementation:File	signature:(&self) -> RawFd
as_raw_fd	$RUST/src/sys/pal/hermit/net.rs	/^    fn as_raw_fd(&self) -> RawFd {$/;"	P	implementation:Socket	signature:(&self) -> RawFd
as_raw_fd	$RUST/src/sys/pal/solid/net.rs	/^    fn as_raw_fd(&self) -> c_int {$/;"	P	implementation:Socket	signature:(&self) -> c_int
as_raw_fd	$RUST/src/sys/pal/unix/fd.rs	/^    fn as_raw_fd(&self) -> RawFd {$/;"	P	implementation:FileDesc	signature:(&self) -> RawFd
as_raw_fd	$RUST/src/sys/pal/unix/fs.rs	/^    fn as_raw_fd(&self) -> RawFd {$/;"	P	implementation:File	signature:(&self) -> RawFd
as_raw_fd	$RUST/src/sys/pal/unix/l4re.rs	/^        fn as_raw_fd(&self) -> RawFd {$/;"	P	implementation:net::Socket	signature:(&self) -> RawFd
as_raw_fd	$RUST/src/sys/pal/unix/net.rs	/^    fn as_raw_fd(&self) -> RawFd {$/;"	P	implementation:Socket	signature:(&self) -> RawFd
as_raw_fd	$RUST/src/sys/pal/unix/pipe.rs	/^    fn as_raw_fd(&self) -> RawFd {$/;"	P	implementation:AnonPipe	signature:(&self) -> RawFd
as_raw_fd	$RUST/src/sys/pal/wasi/fd.rs	/^    fn as_raw_fd(&self) -> RawFd {$/;"	P	implementation:WasiFd	signature:(&self) -> RawFd
as_raw_fd	$RUST/src/sys/pal/wasi/fs.rs	/^    fn as_raw_fd(&self) -> RawFd {$/;"	P	implementation:File	signature:(&self) -> RawFd
as_raw_fd	$RUST/src/sys/pal/wasi/net.rs	/^    fn as_raw_fd(&self) -> RawFd {$/;"	P	implementation:Socket	signature:(&self) -> RawFd
as_raw_fd	$RUST/src/sys/pal/wasi/stdio.rs	/^    fn as_raw_fd(&self) -> raw::c_int {$/;"	P	implementation:Stdout	signature:(&self) -> raw::c_int
as_raw_handle	$RUST/src/os/windows/io/handle.rs	/^    fn as_raw_handle(&self) -> RawHandle {$/;"	P	implementation:OwnedHandle	signature:(&self) -> RawHandle
as_raw_handle	$RUST/src/os/windows/io/raw.rs	/^    fn as_raw_handle(&self) -> RawHandle;$/;"	P	interface:AsRawHandle	signature:(&self) -> RawHandle
as_raw_handle	$RUST/src/os/windows/process.rs	/^    fn as_raw_handle(&self) -> RawHandle {$/;"	P	implementation:ChildStdout	signature:(&self) -> RawHandle
as_raw_handle	$RUST/src/os/windows/thread.rs	/^    fn as_raw_handle(&self) -> RawHandle {$/;"	P	implementation:JoinHandle	signature:(&self) -> RawHandle
as_raw_handle	$RUST/src/sys/pal/windows/fs.rs	/^    fn as_raw_handle(&self) -> RawHandle {$/;"	P	implementation:File	signature:(&self) -> RawHandle
as_raw_handle	$RUST/src/sys/pal/windows/handle.rs	/^    fn as_raw_handle(&self) -> RawHandle {$/;"	P	implementation:Handle	signature:(&self) -> RawHandle
as_raw_mut_ptr	$RUST/src/sys/pal/sgx/abi/usercalls/alloc.rs	/^    pub fn as_raw_mut_ptr(&mut self) -> *mut T {$/;"	f	signature:(&mut self) -> *mut T
as_raw_ptr	$RUST/src/sys/pal/sgx/abi/usercalls/alloc.rs	/^    pub fn as_raw_ptr(&self) -> *const T {$/;"	f	signature:(&self) -> *const T
as_raw_socket	$RUST/src/os/windows/io/raw.rs	/^    fn as_raw_socket(&self) -> RawSocket;$/;"	P	interface:AsRawSocket	signature:(&self) -> RawSocket
as_raw_socket	$RUST/src/os/windows/io/socket.rs	/^    fn as_raw_socket(&self) -> RawSocket {$/;"	P	implementation:OwnedSocket	signature:(&self) -> RawSocket
as_raw_socket	$RUST/src/sys/pal/windows/net.rs	/^    fn as_raw_socket(&self) -> RawSocket {$/;"	P	implementation:Socket	signature:(&self) -> RawSocket
as_raw_stat	$RUST/src/os/android/fs.rs	/^    fn as_raw_stat(&self) -> &raw::stat;$/;"	P	interface:MetadataExt	signature:(&self) -> &raw::stat
as_raw_stat	$RUST/src/os/dragonfly/fs.rs	/^    fn as_raw_stat(&self) -> &raw::stat;$/;"	P	interface:MetadataExt	signature:(&self) -> &raw::stat
as_raw_stat	$RUST/src/os/emscripten/fs.rs	/^    fn as_raw_stat(&self) -> &raw::stat;$/;"	P	interface:MetadataExt	signature:(&self) -> &raw::stat
as_raw_stat	$RUST/src/os/espidf/fs.rs	/^    fn as_raw_stat(&self) -> &raw::stat;$/;"	P	interface:MetadataExt	signature:(&self) -> &raw::stat
as_raw_stat	$RUST/src/os/freebsd/fs.rs	/^    fn as_raw_stat(&self) -> &raw::stat;$/;"	P	interface:MetadataExt	signature:(&self) -> &raw::stat
as_raw_stat	$RUST/src/os/haiku/fs.rs	/^    fn as_raw_stat(&self) -> &raw::stat;$/;"	P	interface:MetadataExt	signature:(&self) -> &raw::stat
as_raw_stat	$RUST/src/os/illumos/fs.rs	/^    fn as_raw_stat(&self) -> &raw::stat;$/;"	P	interface:MetadataExt	signature:(&self) -> &raw::stat
as_raw_stat	$RUST/src/os/ios/fs.rs	/^    fn as_raw_stat(&self) -> &raw::stat;$/;"	P	interface:MetadataExt	signature:(&self) -> &raw::stat
as_raw_stat	$RUST/src/os/l4re/fs.rs	/^    fn as_raw_stat(&self) -> &raw::stat;$/;"	P	interface:MetadataExt	signature:(&self) -> &raw::stat
as_raw_stat	$RUST/src/os/linux/fs.rs	/^    fn as_raw_stat(&self) -> &raw::stat;$/;"	P	interface:MetadataExt	signature:(&self) -> &raw::stat
as_raw_stat	$RUST/src/os/macos/fs.rs	/^    fn as_raw_stat(&self) -> &raw::stat;$/;"	P	interface:MetadataExt	signature:(&self) -> &raw::stat
as_raw_stat	$RUST/src/os/netbsd/fs.rs	/^    fn as_raw_stat(&self) -> &raw::stat;$/;"	P	interface:MetadataExt	signature:(&self) -> &raw::stat
as_raw_stat	$RUST/src/os/openbsd/fs.rs	/^    fn as_raw_stat(&self) -> &raw::stat;$/;"	P	interface:MetadataExt	signature:(&self) -> &raw::stat
as_raw_stat	$RUST/src/os/redox/fs.rs	/^    fn as_raw_stat(&self) -> &raw::stat;$/;"	P	interface:MetadataExt	signature:(&self) -> &raw::stat
as_raw_stat	$RUST/src/os/solaris/fs.rs	/^    fn as_raw_stat(&self) -> &raw::stat;$/;"	P	interface:MetadataExt	signature:(&self) -> &raw::stat
as_raw_stat	$RUST/src/os/watchos/fs.rs	/^    fn as_raw_stat(&self) -> &raw::stat;$/;"	P	interface:MetadataExt	signature:(&self) -> &raw::stat
as_ref	$RUST/src/ffi/os_str.rs	/^    fn as_ref(&self) -> &OsStr {$/;"	P	implementation:str	signature:(&self) -> &OsStr
as_ref	$RUST/src/path.rs	/^    fn as_ref(&self) -> &Path {$/;"	P	implementation:str	signature:(&self) -> &Path
as_ref	$RUST/src/sys/pal/windows/fs.rs	/^    fn as_ref(&self) -> &[MaybeUninit<u8>] {$/;"	P	implementation:DirBuff	signature:(&self) -> &[MaybeUninit<u8>]
as_ref	$RUST/src/sys/pal/windows/process.rs	/^    fn as_ref(&self) -> &OsStr {$/;"	P	implementation:EnvKey	signature:(&self) -> &OsStr
as_rights	$RUST/src/os/unix/net/ancillary.rs	/^    unsafe fn as_rights(data: &'a [u8]) -> Self {$/;"	P	implementation:AncillaryData	signature:(data: &'a [u8]) -> Self
as_slice	$RUST/src/sys/os_str/bytes.rs	/^    pub fn as_slice(&self) -> &Slice {$/;"	P	implementation:Buf	signature:(&self) -> &Slice
as_slice	$RUST/src/sys/os_str/wtf8.rs	/^    pub fn as_slice(&self) -> &Slice {$/;"	P	implementation:Buf	signature:(&self) -> &Slice
as_slice	$RUST/src/sys/pal/solid/io.rs	/^    pub fn as_slice(&self) -> &[u8] {$/;"	P	implementation:IoSliceMut	signature:(&self) -> &[u8]
as_slice	$RUST/src/sys/pal/unix/io.rs	/^    pub fn as_slice(&self) -> &[u8] {$/;"	P	implementation:IoSliceMut	signature:(&self) -> &[u8]
as_slice	$RUST/src/sys/pal/unsupported/io.rs	/^    pub fn as_slice(&self) -> &[u8] {$/;"	P	implementation:IoSliceMut	signature:(&self) -> &[u8]
as_slice	$RUST/src/sys/pal/wasi/io.rs	/^    pub fn as_slice(&self) -> &[u8] {$/;"	P	implementation:IoSliceMut	signature:(&self) -> &[u8]
as_slice	$RUST/src/sys/pal/windows/io.rs	/^    pub fn as_slice(&self) -> &[u8] {$/;"	P	implementation:IoSliceMut	signature:(&self) -> &[u8]
as_slice	$RUST/src/sys_common/wtf8.rs	/^    pub fn as_slice(&self) -> &Wtf8 {$/;"	P	implementation:Wtf8Buf	signature:(&self) -> &Wtf8
as_socket	$RUST/src/os/windows/io/socket.rs	/^    fn as_socket(&self) -> BorrowedSocket<'_>;$/;"	P	interface:AsSocket	signature:(&self) -> BorrowedSocket<'_>
as_socket	$RUST/src/sys/pal/windows/net.rs	/^    fn as_socket(&self) -> BorrowedSocket<'_> {$/;"	P	implementation:Socket	signature:(&self) -> BorrowedSocket<'_>
as_str	$RUST/src/io/error.rs	/^    pub(crate) fn as_str(&self) -> &'static str {$/;"	P	implementation:ErrorKind	signature:(&self) -> &'static str
as_str	$RUST/src/sys_common/wtf8.rs	/^    pub fn as_str(&self) -> Result<&str, str::Utf8Error> {$/;"	P	implementation:Wtf8	signature:(&self) -> Result<&str, str::Utf8Error>
as_u64	$RUST/src/thread/mod.rs	/^    pub fn as_u64(&self) -> NonZeroU64 {$/;"	P	implementation:ThreadId	signature:(&self) -> NonZeroU64
as_u8_slice	$RUST/src/path.rs	/^    fn as_u8_slice(&self) -> &[u8] {$/;"	P	implementation:Path	signature:(&self) -> &[u8]
as_usize	$RUST/src/panic.rs	/^    fn as_usize(self) -> usize {$/;"	P	implementation:BacktraceStyle	signature:(self) -> usize
as_usize	$RUST/src/sys/pal/sgx/abi/tls/mod.rs	/^    pub fn as_usize(self) -> usize {$/;"	P	implementation:Key	signature:(self) -> usize
as_wasi	$RUST/src/sys/pal/wasi/fs.rs	/^    pub(crate) fn as_wasi(&self) -> &wasi::Filestat {$/;"	P	implementation:FileAttr	signature:(&self) -> &wasi::Filestat
ascii	$RUST/src/lib.rs	/^pub mod ascii;$/;"	n
ascii_byte_at	$RUST/src/sys_common/wtf8.rs	/^    pub fn ascii_byte_at(&self, position: usize) -> u8 {$/;"	P	implementation:Wtf8	signature:(&self, position: usize) -> u8
asin	$RUST/src/f32.rs	/^    pub fn asin(self) -> f32 {$/;"	P	implementation:f32	signature:(self) -> f32
asin	$RUST/src/f64.rs	/^    pub fn asin(self) -> f64 {$/;"	P	implementation:f64	signature:(self) -> f64
asin	$RUST/src/sys/cmath/builtins.rs	/^    pub fn asin(n: f64) -> f64;$/;"	f	signature:(n: f64) -> f64
asin	$RUST/src/sys/cmath/windows.rs	/^    pub fn asin(n: c_double) -> c_double;$/;"	f	signature:(n: c_double) -> c_double
asinf	$RUST/src/sys/cmath/builtins.rs	/^    pub fn asinf(n: f32) -> f32;$/;"	f	signature:(n: f32) -> f32
asinf	$RUST/src/sys/cmath/windows.rs	/^    pub unsafe fn asinf(n: c_float) -> c_float {$/;"	f	module:shims	signature:(n: c_float) -> c_float
asinh	$RUST/src/f32.rs	/^    pub fn asinh(self) -> f32 {$/;"	P	implementation:f32	signature:(self) -> f32
asinh	$RUST/src/f64.rs	/^    pub fn asinh(self) -> f64 {$/;"	P	implementation:f64	signature:(self) -> f64
assert	$RUST/src/panic/tests.rs	/^fn assert<T: UnwindSafe + ?Sized>() {}$/;"	f	signature:<T: UnwindSafe + ?Sized>()
assert_almost_eq	$RUST/src/time/tests.rs	/^macro_rules! assert_almost_eq {$/;"	M
assert_approx_eq	$RUST/src/macros.rs	/^macro_rules! assert_approx_eq {$/;"	M
assert_covariance	$RUST/src/collections/hash/map.rs	/^fn assert_covariance() {$/;"	f	signature:()
assert_covariance	$RUST/src/collections/hash/set.rs	/^fn assert_covariance() {$/;"	f	signature:()
assert_empty	$RUST/src/sys/pal/sgx/waitqueue/unsafe_list/tests.rs	/^unsafe fn assert_empty<T>(list: &mut UnsafeList<T>) {$/;"	f	signature:<T>(list: &mut UnsafeList<T>)
assert_f32_biteq	$RUST/src/f32/tests.rs	/^macro_rules! assert_f32_biteq {$/;"	M
assert_f64_biteq	$RUST/src/f64/tests.rs	/^macro_rules! assert_f64_biteq {$/;"	M
assert_pow	$RUST/src/num/tests.rs	/^    macro_rules! assert_pow {$/;"	M	function:test_pow
assert_traits	$RUST/src/sync/lazy_lock/tests.rs	/^    fn assert_traits<T: Send + Sync>() {}$/;"	f	function:is_sync_send	signature:<T: Send + Sync>()
assert_traits	$RUST/src/sync/once_lock/tests.rs	/^    fn assert_traits<T: Send + Sync>() {}$/;"	f	function:is_sync_send	signature:<T: Send + Sync>()
assert_unwind_safe	$RUST/src/backtrace/tests.rs	/^    fn assert_unwind_safe<T: UnwindSafe + RefUnwindSafe>() {}$/;"	f	function:backtrace_unwind_safe	signature:<T: UnwindSafe + RefUnwindSafe>()
assert_unwind_safe	$RUST/src/collections/hash/map/tests.rs	/^    fn assert_unwind_safe<T: crate::panic::UnwindSafe>() {}$/;"	f	function:_assert_hashmap_is_unwind_safe	signature:<T: crate::panic::UnwindSafe>()
assert_unwind_safe	$RUST/src/io/stdio/tests.rs	/^fn assert_unwind_safe<T: UnwindSafe + RefUnwindSafe>() {}$/;"	f	signature:<T: UnwindSafe + RefUnwindSafe>()
async_keyword	$RUST/src/keyword_docs.rs	/^mod async_keyword {}$/;"	n
async_pipes	$RUST/src/os/windows/process.rs	/^    fn async_pipes(&mut self, always_async: bool) -> &mut process::Command;$/;"	P	interface:CommandExt	signature:(&mut self, always_async: bool) -> &mut process::Command
atan	$RUST/src/f32.rs	/^    pub fn atan(self) -> f32 {$/;"	P	implementation:f32	signature:(self) -> f32
atan	$RUST/src/f64.rs	/^    pub fn atan(self) -> f64 {$/;"	P	implementation:f64	signature:(self) -> f64
atan	$RUST/src/sys/cmath/builtins.rs	/^    pub fn atan(n: f64) -> f64;$/;"	f	signature:(n: f64) -> f64
atan	$RUST/src/sys/cmath/windows.rs	/^    pub fn atan(n: c_double) -> c_double;$/;"	f	signature:(n: c_double) -> c_double
atan2	$RUST/src/f32.rs	/^    pub fn atan2(self, other: f32) -> f32 {$/;"	P	implementation:f32	signature:(self, other: f32) -> f32
atan2	$RUST/src/f64.rs	/^    pub fn atan2(self, other: f64) -> f64 {$/;"	P	implementation:f64	signature:(self, other: f64) -> f64
atan2	$RUST/src/sys/cmath/builtins.rs	/^    pub fn atan2(a: f64, b: f64) -> f64;$/;"	f	signature:(a: f64, b: f64) -> f64
atan2	$RUST/src/sys/cmath/windows.rs	/^    pub fn atan2(a: c_double, b: c_double) -> c_double;$/;"	f	signature:(a: c_double, b: c_double) -> c_double
atan2f	$RUST/src/sys/cmath/builtins.rs	/^    pub fn atan2f(a: f32, b: f32) -> f32;$/;"	f	signature:(a: f32, b: f32) -> f32
atan2f	$RUST/src/sys/cmath/windows.rs	/^    pub unsafe fn atan2f(n: c_float, b: c_float) -> c_float {$/;"	f	module:shims	signature:(n: c_float, b: c_float) -> c_float
atanf	$RUST/src/sys/cmath/builtins.rs	/^    pub fn atanf(n: f32) -> f32;$/;"	f	signature:(n: f32) -> f32
atanf	$RUST/src/sys/cmath/windows.rs	/^    pub unsafe fn atanf(n: c_float) -> c_float {$/;"	f	module:shims	signature:(n: c_float) -> c_float
atanh	$RUST/src/f32.rs	/^    pub fn atanh(self) -> f32 {$/;"	P	implementation:f32	signature:(self) -> f32
atanh	$RUST/src/f64.rs	/^    pub fn atanh(self) -> f64 {$/;"	P	implementation:f64	signature:(self) -> f64
atim	$RUST/src/os/wasi/fs.rs	/^    fn atim(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
atime	$RUST/src/os/unix/fs.rs	/^    fn atime(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
atime_nsec	$RUST/src/os/unix/fs.rs	/^    fn atime_nsec(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
attempt_print_to_stderr	$RUST/src/io/stdio.rs	/^pub(crate) fn attempt_print_to_stderr(args: fmt::Arguments<'_>) {$/;"	f	signature:(args: fmt::Arguments<'_>)
attrib	$RUST/src/os/unix/fs.rs	/^    fn attrib(&self) -> u8;$/;"	P	interface:MetadataExt	signature:(&self) -> u8
attributes	$RUST/src/os/windows/fs.rs	/^    fn attributes(&mut self, val: u32) -> &mut Self;$/;"	P	interface:OpenOptionsExt	signature:(&mut self, val: u32) -> &mut Self
attributes	$RUST/src/sys/pal/windows/fs.rs	/^    pub fn attributes(&mut self, attrs: u32) {$/;"	P	implementation:OpenOptions	signature:(&mut self, attrs: u32)
attrs	$RUST/src/sys/pal/windows/fs.rs	/^    pub fn attrs(&self) -> u32 {$/;"	P	implementation:FileAttr	signature:(&self) -> u32
available_parallelism	$RUST/src/sys/pal/hermit/thread.rs	/^pub fn available_parallelism() -> io::Result<NonZeroUsize> {$/;"	f	signature:() -> io::Result<NonZeroUsize>
available_parallelism	$RUST/src/sys/pal/itron/thread.rs	/^pub fn available_parallelism() -> io::Result<crate::num::NonZeroUsize> {$/;"	f	signature:() -> io::Result<crate::num::NonZeroUsize>
available_parallelism	$RUST/src/sys/pal/sgx/thread.rs	/^pub fn available_parallelism() -> io::Result<NonZeroUsize> {$/;"	f	signature:() -> io::Result<NonZeroUsize>
available_parallelism	$RUST/src/sys/pal/teeos/thread.rs	/^pub fn available_parallelism() -> io::Result<NonZeroUsize> {$/;"	f	signature:() -> io::Result<NonZeroUsize>
available_parallelism	$RUST/src/sys/pal/unix/thread.rs	/^pub fn available_parallelism() -> io::Result<NonZeroUsize> {$/;"	f	signature:() -> io::Result<NonZeroUsize>
available_parallelism	$RUST/src/sys/pal/unsupported/thread.rs	/^pub fn available_parallelism() -> io::Result<NonZeroUsize> {$/;"	f	signature:() -> io::Result<NonZeroUsize>
available_parallelism	$RUST/src/sys/pal/wasi/thread.rs	/^pub fn available_parallelism() -> io::Result<NonZeroUsize> {$/;"	f	signature:() -> io::Result<NonZeroUsize>
available_parallelism	$RUST/src/sys/pal/wasm/atomics/thread.rs	/^pub fn available_parallelism() -> io::Result<NonZeroUsize> {$/;"	f	signature:() -> io::Result<NonZeroUsize>
available_parallelism	$RUST/src/sys/pal/windows/thread.rs	/^pub fn available_parallelism() -> io::Result<NonZeroUsize> {$/;"	f	signature:() -> io::Result<NonZeroUsize>
available_parallelism	$RUST/src/sys/pal/xous/thread.rs	/^pub fn available_parallelism() -> io::Result<NonZeroUsize> {$/;"	f	signature:() -> io::Result<NonZeroUsize>
available_parallelism	$RUST/src/thread/mod.rs	/^pub fn available_parallelism() -> io::Result<NonZeroUsize> {$/;"	f	signature:() -> io::Result<NonZeroUsize>
avoid_copying_the_body	$RUST/src/thread/tests.rs	/^fn avoid_copying_the_body<F>(spawnfn: F)$/;"	f	signature:<F>(spawnfn: F) where F: FnOnce(Box<dyn Fn() + Send>),
await_keyword	$RUST/src/keyword_docs.rs	/^mod await_keyword {}$/;"	n
bInheritHandle	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub bInheritHandle: BOOL,$/;"	m	struct:SECURITY_ATTRIBUTES
back	$RUST/src/path.rs	/^    back: State,$/;"	m	struct:Components
backlog	$RUST/src/os/unix/net/listener.rs	/^            const backlog: libc::c_int = libc::SOMAXCONN;$/;"	C	method:UnixListener::bind
backtrace	$RUST/src/error.rs	/^    fn backtrace(&self) -> Option<&Backtrace> {$/;"	f	signature:(&self) -> Option<&Backtrace>
backtrace	$RUST/src/error/tests.rs	/^    backtrace: Option<Backtrace>,$/;"	m	struct:GenericError
backtrace	$RUST/src/lib.rs	/^pub mod backtrace;$/;"	n
backtrace	$RUST/src/sys_common/mod.rs	/^pub mod backtrace;$/;"	n
backtrace_rs	$RUST/src/lib.rs	/^mod backtrace_rs;$/;"	n
backtrace_unwind_safe	$RUST/src/backtrace/tests.rs	/^fn backtrace_unwind_safe() {$/;"	f	signature:()
bar	$RUST/src/panic/tests.rs	/^    fn bar<T>() {$/;"	f	function:panic_safety_traits	signature:<T>()
barrier	$RUST/src/sync/mod.rs	/^mod barrier;$/;"	n
base	$RUST/src/collections/hash/map.rs	/^    base: base::RustcVacantEntry<'a, K, V>,$/;"	m	struct:VacantEntry
base	$RUST/src/collections/hash/set.rs	/^    base: base::Iter<'a, K>,$/;"	m	struct:Iter
base	$RUST/src/sys/pal/windows/os.rs	/^    base: c::LPWCH,$/;"	m	struct:Env
base_port	$RUST/src/net/test.rs	/^fn base_port() -> u16 {$/;"	f	signature:() -> u16
basic	$RUST/src/os/unix/net/tests.rs	/^fn basic() {$/;"	f	signature:()
basic_info	$RUST/src/sys/pal/windows/fs.rs	/^    fn basic_info(&self) -> io::Result<c::FILE_BASIC_INFO> {$/;"	P	implementation:File	signature:(&self) -> io::Result<c::FILE_BASIC_INFO>
baz	$RUST/src/panic/tests.rs	/^    fn baz<T: UnwindSafe>() {$/;"	f	function:panic_safety_traits	signature:<T: UnwindSafe>()
before_exec	$RUST/src/os/unix/process.rs	/^    fn before_exec<F>(&mut self, f: F) -> &mut process::Command$/;"	P	interface:CommandExt	signature:<F>(&mut self, f: F) -> &mut process::Command where F: FnMut() -> io::Result<()> + Send + Sync + 'static,
begin_panic	$RUST/src/panicking.rs	/^pub const fn begin_panic<M: Any + Send>(msg: M) -> ! {$/;"	f	signature:<M: Any + Send>(msg: M) -> !
begin_panic_handler	$RUST/src/panicking.rs	/^pub fn begin_panic_handler(info: &PanicInfo<'_>) -> ! {$/;"	f	signature:(info: &PanicInfo<'_>) -> !
bench_buffered_reader	$RUST/src/io/buffered/tests.rs	/^fn bench_buffered_reader(b: &mut test::Bencher) {$/;"	f	signature:(b: &mut test::Bencher)
bench_buffered_reader_small_reads	$RUST/src/io/buffered/tests.rs	/^fn bench_buffered_reader_small_reads(b: &mut test::Bencher) {$/;"	f	signature:(b: &mut test::Bencher)
bench_buffered_writer	$RUST/src/io/buffered/tests.rs	/^fn bench_buffered_writer(b: &mut test::Bencher) {$/;"	f	signature:(b: &mut test::Bencher)
bench_copy_buf_reader	$RUST/src/io/copy/tests.rs	/^    fn bench_copy_buf_reader(b: &mut Bencher) {$/;"	f	module:io_benches	signature:(b: &mut Bencher)
bench_file_to_file_copy	$RUST/src/sys/pal/unix/kernel_copy/tests.rs	/^fn bench_file_to_file_copy(b: &mut test::Bencher) {$/;"	f	signature:(b: &mut test::Bencher)
bench_file_to_socket_copy	$RUST/src/sys/pal/unix/kernel_copy/tests.rs	/^fn bench_file_to_socket_copy(b: &mut test::Bencher) {$/;"	f	signature:(b: &mut test::Bencher)
bench_file_to_uds_copy	$RUST/src/sys/pal/unix/kernel_copy/tests.rs	/^fn bench_file_to_uds_copy(b: &mut test::Bencher) {$/;"	f	signature:(b: &mut test::Bencher)
bench_heap_path_alloc	$RUST/src/sys/pal/common/tests.rs	/^fn bench_heap_path_alloc(b: &mut test::Bencher) {$/;"	f	signature:(b: &mut test::Bencher)
bench_instant_threaded	$RUST/src/time/tests.rs	/^macro_rules! bench_instant_threaded {$/;"	M
bench_read_slice	$RUST/src/io/impls/tests.rs	/^fn bench_read_slice(b: &mut test::Bencher) {$/;"	f	signature:(b: &mut test::Bencher)
bench_read_to_end	$RUST/src/io/tests.rs	/^fn bench_read_to_end(b: &mut test::Bencher) {$/;"	f	signature:(b: &mut test::Bencher)
bench_read_vec	$RUST/src/io/impls/tests.rs	/^fn bench_read_vec(b: &mut test::Bencher) {$/;"	f	signature:(b: &mut test::Bencher)
bench_socket_pipe_socket_copy	$RUST/src/sys/pal/unix/kernel_copy/tests.rs	/^fn bench_socket_pipe_socket_copy(b: &mut test::Bencher) {$/;"	f	signature:(b: &mut test::Bencher)
bench_stack_path_alloc	$RUST/src/sys/pal/common/tests.rs	/^fn bench_stack_path_alloc(b: &mut test::Bencher) {$/;"	f	signature:(b: &mut test::Bencher)
bench_take_read	$RUST/src/io/tests.rs	/^fn bench_take_read(b: &mut test::Bencher) {$/;"	f	signature:(b: &mut test::Bencher)
bench_take_read_buf	$RUST/src/io/tests.rs	/^fn bench_take_read_buf(b: &mut test::Bencher) {$/;"	f	signature:(b: &mut test::Bencher)
bench_write_slice	$RUST/src/io/impls/tests.rs	/^fn bench_write_slice(b: &mut test::Bencher) {$/;"	f	signature:(b: &mut test::Bencher)
bench_write_vec	$RUST/src/io/cursor/tests.rs	/^fn bench_write_vec(b: &mut test::Bencher) {$/;"	f	signature:(b: &mut test::Bencher)
bench_write_vec	$RUST/src/io/impls/tests.rs	/^fn bench_write_vec(b: &mut test::Bencher) {$/;"	f	signature:(b: &mut test::Bencher)
bench_write_vec_vectored	$RUST/src/io/cursor/tests.rs	/^fn bench_write_vec_vectored(b: &mut test::Bencher) {$/;"	f	signature:(b: &mut test::Bencher)
big_math	$RUST/src/time/tests.rs	/^fn big_math() {$/;"	f	signature:()
binary_file	$RUST/src/fs/tests.rs	/^fn binary_file() {$/;"	f	signature:()
bind	$RUST/src/net/tcp.rs	/^    pub fn bind<A: ToSocketAddrs>(addr: A) -> io::Result<TcpListener> {$/;"	P	implementation:TcpListener	signature:<A: ToSocketAddrs>(addr: A) -> io::Result<TcpListener>
bind	$RUST/src/net/udp.rs	/^    pub fn bind<A: ToSocketAddrs>(addr: A) -> io::Result<UdpSocket> {$/;"	P	implementation:UdpSocket	signature:<A: ToSocketAddrs>(addr: A) -> io::Result<UdpSocket>
bind	$RUST/src/os/unix/net/datagram.rs	/^    pub fn bind<P: AsRef<Path>>(path: P) -> io::Result<UnixDatagram> {$/;"	P	implementation:UnixDatagram	signature:<P: AsRef<Path>>(path: P) -> io::Result<UnixDatagram>
bind	$RUST/src/os/unix/net/listener.rs	/^    pub fn bind<P: AsRef<Path>>(path: P) -> io::Result<UnixListener> {$/;"	P	implementation:UnixListener	signature:<P: AsRef<Path>>(path: P) -> io::Result<UnixListener>
bind	$RUST/src/sys/pal/sgx/net.rs	/^    pub fn bind(addr: io::Result<&SocketAddr>) -> io::Result<TcpListener> {$/;"	P	implementation:TcpListener	signature:(addr: io::Result<&SocketAddr>) -> io::Result<TcpListener>
bind	$RUST/src/sys/pal/solid/abi/sockets.rs	/^    pub fn bind(s: c_int, name: *const sockaddr, namelen: socklen_t) -> c_int;$/;"	f	signature:(s: c_int, name: *const sockaddr, namelen: socklen_t) -> c_int
bind	$RUST/src/sys/pal/teeos/net.rs	/^    pub fn bind(_: io::Result<&SocketAddr>) -> io::Result<UdpSocket> {$/;"	P	implementation:UdpSocket	signature:(_: io::Result<&SocketAddr>) -> io::Result<UdpSocket>
bind	$RUST/src/sys/pal/unix/l4re.rs	/^        pub fn bind(_: io::Result<&SocketAddr>) -> io::Result<UdpSocket> {$/;"	P	implementation:net::UdpSocket	signature:(_: io::Result<&SocketAddr>) -> io::Result<UdpSocket>
bind	$RUST/src/sys/pal/unsupported/net.rs	/^    pub fn bind(_: io::Result<&SocketAddr>) -> io::Result<UdpSocket> {$/;"	P	implementation:UdpSocket	signature:(_: io::Result<&SocketAddr>) -> io::Result<UdpSocket>
bind	$RUST/src/sys/pal/wasi/net.rs	/^    pub fn bind(_: io::Result<&SocketAddr>) -> io::Result<UdpSocket> {$/;"	P	implementation:UdpSocket	signature:(_: io::Result<&SocketAddr>) -> io::Result<UdpSocket>
bind	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn bind(s: SOCKET, name: *const SOCKADDR, namelen: i32) -> i32;$/;"	f	signature:(s: SOCKET, name: *const SOCKADDR, namelen: i32) -> i32
bind	$RUST/src/sys/pal/xous/net/tcplistener.rs	/^    pub fn bind(socketaddr: io::Result<&SocketAddr>) -> io::Result<TcpListener> {$/;"	P	implementation:TcpListener	signature:(socketaddr: io::Result<&SocketAddr>) -> io::Result<TcpListener>
bind	$RUST/src/sys/pal/xous/net/udp.rs	/^    pub fn bind(socketaddr: io::Result<&SocketAddr>) -> io::Result<UdpSocket> {$/;"	P	implementation:UdpSocket	signature:(socketaddr: io::Result<&SocketAddr>) -> io::Result<UdpSocket>
bind	$RUST/src/sys_common/net.rs	/^    pub fn bind(addr: io::Result<&SocketAddr>) -> io::Result<UdpSocket> {$/;"	P	implementation:UdpSocket	signature:(addr: io::Result<&SocketAddr>) -> io::Result<UdpSocket>
bind_addr	$RUST/src/os/unix/net/datagram.rs	/^    pub fn bind_addr(socket_addr: &SocketAddr) -> io::Result<UnixDatagram> {$/;"	P	implementation:UnixDatagram	signature:(socket_addr: &SocketAddr) -> io::Result<UnixDatagram>
bind_addr	$RUST/src/os/unix/net/listener.rs	/^    pub fn bind_addr(socket_addr: &SocketAddr) -> io::Result<UnixListener> {$/;"	P	implementation:UnixListener	signature:(socket_addr: &SocketAddr) -> io::Result<UnixListener>
bind_error	$RUST/src/net/tcp/tests.rs	/^fn bind_error() {$/;"	f	signature:()
bind_error	$RUST/src/net/udp/tests.rs	/^fn bind_error() {$/;"	f	signature:()
bind_inner	$RUST/src/sys/pal/xous/net/tcplistener.rs	/^    fn bind_inner(addr: &mut SocketAddr) -> io::Result<u16> {$/;"	P	implementation:TcpListener	signature:(addr: &mut SocketAddr) -> io::Result<u16>
bind_stream	$RUST/src/sys/pal/sgx/abi/usercalls/mod.rs	/^pub fn bind_stream(addr: &str) -> IoResult<(Fd, String)> {$/;"	f	signature:(addr: &str) -> IoResult<(Fd, String)>
bind_udp_socket_bad	$RUST/src/net/socket_addr/tests.rs	/^fn bind_udp_socket_bad() {$/;"	f	signature:()
bitand	$RUST/src/collections/hash/set.rs	/^    fn bitand(self, rhs: &HashSet<T, S>) -> HashSet<T, S> {$/;"	f	signature:(self, rhs: &HashSet<T, S>) -> HashSet<T, S>
bitand	$RUST/src/os/xous/ffi/definitions/memoryflags.rs	/^    fn bitand(self, other: Self) -> Self {$/;"	P	implementation:MemoryFlags	signature:(self, other: Self) -> Self
bitand_assign	$RUST/src/os/xous/ffi/definitions/memoryflags.rs	/^    fn bitand_assign(&mut self, other: Self) {$/;"	P	implementation:MemoryFlags	signature:(&mut self, other: Self)
bitor	$RUST/src/collections/hash/set.rs	/^    fn bitor(self, rhs: &HashSet<T, S>) -> HashSet<T, S> {$/;"	f	signature:(self, rhs: &HashSet<T, S>) -> HashSet<T, S>
bitor	$RUST/src/os/xous/ffi/definitions/memoryflags.rs	/^    fn bitor(self, other: MemoryFlags) -> Self {$/;"	P	implementation:MemoryFlags	signature:(self, other: MemoryFlags) -> Self
bitor_assign	$RUST/src/os/xous/ffi/definitions/memoryflags.rs	/^    fn bitor_assign(&mut self, other: Self) {$/;"	P	implementation:MemoryFlags	signature:(&mut self, other: Self)
bits	$RUST/src/os/xous/ffi/definitions/memoryflags.rs	/^    pub fn bits(&self) -> usize {$/;"	P	implementation:MemoryFlags	signature:(&self) -> usize
bits	$RUST/src/sys/pal/wasi/fs.rs	/^    pub(crate) fn bits(&self) -> wasi::Filetype {$/;"	P	implementation:FileType	signature:(&self) -> wasi::Filetype
bitxor	$RUST/src/collections/hash/set.rs	/^    fn bitxor(self, rhs: &HashSet<T, S>) -> HashSet<T, S> {$/;"	f	signature:(self, rhs: &HashSet<T, S>) -> HashSet<T, S>
bitxor	$RUST/src/os/xous/ffi/definitions/memoryflags.rs	/^    fn bitxor(self, other: Self) -> Self {$/;"	P	implementation:MemoryFlags	signature:(self, other: Self) -> Self
bitxor_assign	$RUST/src/os/xous/ffi/definitions/memoryflags.rs	/^    fn bitxor_assign(&mut self, other: Self) {$/;"	P	implementation:MemoryFlags	signature:(&mut self, other: Self)
blkcnt_t	$RUST/src/os/android/raw.rs	/^    pub type blkcnt_t = c_ulong;$/;"	t	module:arch
blkcnt_t	$RUST/src/os/dragonfly/raw.rs	/^pub type blkcnt_t = u64;$/;"	t
blkcnt_t	$RUST/src/os/emscripten/raw.rs	/^pub type blkcnt_t = u64;$/;"	t
blkcnt_t	$RUST/src/os/espidf/raw.rs	/^pub type blkcnt_t = libc::blkcnt_t;$/;"	t
blkcnt_t	$RUST/src/os/freebsd/raw.rs	/^pub type blkcnt_t = u64;$/;"	t
blkcnt_t	$RUST/src/os/fuchsia/raw.rs	/^    pub type blkcnt_t = u64;$/;"	t	module:arch
blkcnt_t	$RUST/src/os/haiku/raw.rs	/^pub type blkcnt_t = i64;$/;"	t
blkcnt_t	$RUST/src/os/horizon/raw.rs	/^pub type blkcnt_t = libc::blkcnt_t;$/;"	t
blkcnt_t	$RUST/src/os/hurd/raw.rs	/^pub type blkcnt_t = u64;$/;"	t
blkcnt_t	$RUST/src/os/illumos/raw.rs	/^pub type blkcnt_t = u64;$/;"	t
blkcnt_t	$RUST/src/os/ios/raw.rs	/^pub type blkcnt_t = u64;$/;"	t
blkcnt_t	$RUST/src/os/l4re/raw.rs	/^    pub type blkcnt_t = u64;$/;"	t	module:arch
blkcnt_t	$RUST/src/os/linux/raw.rs	/^    pub type blkcnt_t = u64;$/;"	t	module:arch
blkcnt_t	$RUST/src/os/macos/raw.rs	/^pub type blkcnt_t = u64;$/;"	t
blkcnt_t	$RUST/src/os/netbsd/raw.rs	/^pub type blkcnt_t = u64;$/;"	t
blkcnt_t	$RUST/src/os/nto/raw.rs	/^    pub type blkcnt_t = i64;$/;"	t	module:arch
blkcnt_t	$RUST/src/os/openbsd/raw.rs	/^pub type blkcnt_t = u64;$/;"	t
blkcnt_t	$RUST/src/os/redox/raw.rs	/^pub type blkcnt_t = c_ulong;$/;"	t
blkcnt_t	$RUST/src/os/solaris/raw.rs	/^pub type blkcnt_t = u64;$/;"	t
blkcnt_t	$RUST/src/os/vita/raw.rs	/^pub type blkcnt_t = libc::blkcnt_t;$/;"	t
blkcnt_t	$RUST/src/os/watchos/raw.rs	/^pub type blkcnt_t = u64;$/;"	t
blksize	$RUST/src/os/unix/fs.rs	/^    fn blksize(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
blksize_t	$RUST/src/os/android/raw.rs	/^    pub type blksize_t = c_ulong;$/;"	t	module:arch
blksize_t	$RUST/src/os/dragonfly/raw.rs	/^pub type blksize_t = u64;$/;"	t
blksize_t	$RUST/src/os/emscripten/raw.rs	/^pub type blksize_t = u64;$/;"	t
blksize_t	$RUST/src/os/espidf/raw.rs	/^pub type blksize_t = libc::blksize_t;$/;"	t
blksize_t	$RUST/src/os/freebsd/raw.rs	/^pub type blksize_t = u64;$/;"	t
blksize_t	$RUST/src/os/fuchsia/raw.rs	/^    pub type blksize_t = u64;$/;"	t	module:arch
blksize_t	$RUST/src/os/haiku/raw.rs	/^pub type blksize_t = i32;$/;"	t
blksize_t	$RUST/src/os/horizon/raw.rs	/^pub type blksize_t = libc::blksize_t;$/;"	t
blksize_t	$RUST/src/os/hurd/raw.rs	/^pub type blksize_t = c_long;$/;"	t
blksize_t	$RUST/src/os/illumos/raw.rs	/^pub type blksize_t = u64;$/;"	t
blksize_t	$RUST/src/os/ios/raw.rs	/^pub type blksize_t = u64;$/;"	t
blksize_t	$RUST/src/os/l4re/raw.rs	/^    pub type blksize_t = u64;$/;"	t	module:arch
blksize_t	$RUST/src/os/linux/raw.rs	/^    pub type blksize_t = u64;$/;"	t	module:arch
blksize_t	$RUST/src/os/macos/raw.rs	/^pub type blksize_t = u64;$/;"	t
blksize_t	$RUST/src/os/netbsd/raw.rs	/^pub type blksize_t = u64;$/;"	t
blksize_t	$RUST/src/os/nto/raw.rs	/^    pub type blksize_t = i32;$/;"	t	module:arch
blksize_t	$RUST/src/os/openbsd/raw.rs	/^pub type blksize_t = u64;$/;"	t
blksize_t	$RUST/src/os/redox/raw.rs	/^pub type blksize_t = c_ulong;$/;"	t
blksize_t	$RUST/src/os/solaris/raw.rs	/^pub type blksize_t = u64;$/;"	t
blksize_t	$RUST/src/os/vita/raw.rs	/^pub type blksize_t = libc::blksize_t;$/;"	t
blksize_t	$RUST/src/os/watchos/raw.rs	/^pub type blksize_t = u64;$/;"	t
block	$RUST/src/sync/mpmc/list.rs	/^    block: AtomicPtr<Block<T>>,$/;"	m	struct:Position
blocking_scalar	$RUST/src/os/xous/ffi.rs	/^pub(crate) fn blocking_scalar($/;"	f	signature:( connection: Connection, args: [usize; 5], ) -> Result<[usize; 5], Error>
blocking_scalar_impl	$RUST/src/os/xous/ffi.rs	/^fn blocking_scalar_impl($/;"	f	signature:( connection: Connection, args: [usize; 5], blocking: bool, ) -> Result<[usize; 5], Error>
blocks	$RUST/src/os/unix/fs.rs	/^    fn blocks(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
bool	$RUST/src/sys/pal/sgx/abi/usercalls/raw.rs	/^impl RegisterArgument for bool {$/;"	c
bool_t	$RUST/src/sys/pal/itron/abi.rs	/^pub type bool_t = int_t;$/;"	t
boot_services	$RUST/src/os/uefi/env.rs	/^pub fn boot_services() -> Option<NonNull<c_void>> {$/;"	f	signature:() -> Option<NonNull<c_void>>
borrow	$RUST/src/ffi/os_str.rs	/^    fn borrow(&self) -> &OsStr {$/;"	P	implementation:OsString	signature:(&self) -> &OsStr
borrow	$RUST/src/path.rs	/^    fn borrow(&self) -> &Path {$/;"	P	implementation:PathBuf	signature:(&self) -> &Path
borrow	$RUST/src/sync/poison.rs	/^    pub fn borrow(&self) -> LockResult<()> {$/;"	P	implementation:Flag	signature:(&self) -> LockResult<()>
borrow_raw	$RUST/src/os/fd/owned.rs	/^    pub const unsafe fn borrow_raw(fd: RawFd) -> Self {$/;"	P	implementation:BorrowedFd	signature:(fd: RawFd) -> Self
borrow_raw	$RUST/src/os/solid/io.rs	/^    pub const unsafe fn borrow_raw(fd: RawFd) -> Self {$/;"	P	implementation:BorrowedFd	signature:(fd: RawFd) -> Self
borrow_raw	$RUST/src/os/windows/io/handle.rs	/^    pub const unsafe fn borrow_raw(handle: RawHandle) -> Self {$/;"	P	implementation:BorrowedHandle	signature:(handle: RawHandle) -> Self
borrow_raw	$RUST/src/os/windows/io/socket.rs	/^    pub const unsafe fn borrow_raw(socket: RawSocket) -> Self {$/;"	P	implementation:BorrowedSocket	signature:(socket: RawSocket) -> Self
boxed_default	$RUST/src/ffi/os_str/tests.rs	/^fn boxed_default() {$/;"	f	signature:()
break_keyword	$RUST/src/keyword_docs.rs	/^mod break_keyword {}$/;"	n
broadcast	$RUST/src/net/udp.rs	/^    pub fn broadcast(&self) -> io::Result<bool> {$/;"	P	implementation:UdpSocket	signature:(&self) -> io::Result<bool>
broadcast	$RUST/src/sys/pal/sgx/net.rs	/^    pub fn broadcast(&self) -> io::Result<bool> {$/;"	P	implementation:UdpSocket	signature:(&self) -> io::Result<bool>
broadcast	$RUST/src/sys/pal/teeos/net.rs	/^    pub fn broadcast(&self) -> io::Result<bool> {$/;"	P	implementation:UdpSocket	signature:(&self) -> io::Result<bool>
broadcast	$RUST/src/sys/pal/unix/l4re.rs	/^        pub fn broadcast(&self) -> io::Result<bool> {$/;"	P	implementation:net::UdpSocket	signature:(&self) -> io::Result<bool>
broadcast	$RUST/src/sys/pal/unsupported/net.rs	/^    pub fn broadcast(&self) -> io::Result<bool> {$/;"	P	implementation:UdpSocket	signature:(&self) -> io::Result<bool>
broadcast	$RUST/src/sys/pal/wasi/net.rs	/^    pub fn broadcast(&self) -> io::Result<bool> {$/;"	P	implementation:UdpSocket	signature:(&self) -> io::Result<bool>
broadcast	$RUST/src/sys/pal/xous/net/udp.rs	/^    pub fn broadcast(&self) -> io::Result<bool> {$/;"	P	implementation:UdpSocket	signature:(&self) -> io::Result<bool>
broadcast	$RUST/src/sys_common/net.rs	/^    pub fn broadcast(&self) -> io::Result<bool> {$/;"	P	implementation:UdpSocket	signature:(&self) -> io::Result<bool>
broken_unc_path	$RUST/src/sys/pal/windows/path/tests.rs	/^fn broken_unc_path() {$/;"	f	signature:()
buf	$RUST/src/io/buffered/bufreader.rs	/^    buf: Buffer,$/;"	m	struct:BufReader
buf	$RUST/src/io/buffered/bufreader/buffer.rs	/^    buf: Box<[MaybeUninit<u8>]>,$/;"	m	struct:Buffer
buf	$RUST/src/io/buffered/bufwriter.rs	/^    buf: Vec<u8>,$/;"	m	struct:WriterPanicked
buf	$RUST/src/io/mod.rs	/^    buf: B,$/;"	m	struct:Split
buf	$RUST/src/sys/pal/wasi/fs.rs	/^    buf: Vec<u8>,$/;"	m	struct:ReadDir
buf	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub buf: PSTR,$/;"	m	struct:WSABUF
buf_read_has_data_left	$RUST/src/io/tests.rs	/^fn buf_read_has_data_left() {$/;"	f	signature:()
buffer	$RUST/src/io/buffered/bufreader.rs	/^mod buffer;$/;"	n
buffer	$RUST/src/io/buffered/bufreader/buffer.rs	/^    pub fn buffer(&self) -> &[u8] {$/;"	P	implementation:Buffer	signature:(&self) -> &[u8]
buffer	$RUST/src/io/buffered/bufwriter.rs	/^    pub fn buffer(&self) -> &[u8] {$/;"	P	implementation:BufWriter	signature:(&self) -> &[u8]
buffer	$RUST/src/io/buffered/linewritershim.rs	/^    buffer: &'a mut BufWriter<W>,$/;"	m	struct:LineWriterShim
buffer	$RUST/src/io/buffered/tests.rs	/^    pub buffer: Vec<u8>,$/;"	m	struct:ProgrammableSink
buffer	$RUST/src/os/unix/net/ancillary.rs	/^    buffer: &'a mut [u8],$/;"	m	struct:SocketAncillary
buffer	$RUST/src/sync/mpmc/array.rs	/^    buffer: Box<[Slot<T>]>,$/;"	m	struct:Channel
buffer	$RUST/src/sys/pal/windows/fs.rs	/^    buffer: Option<&'a [MaybeUninit<u8>]>,$/;"	m	struct:DirBuffIter
buffer_capacity_required	$RUST/src/fs.rs	/^fn buffer_capacity_required(mut file: &File) -> Option<usize> {$/;"	f	signature:(mut file: &File) -> Option<usize>
buffer_mut	$RUST/src/io/buffered/bufwriter.rs	/^    pub(in crate::io) fn buffer_mut(&mut self) -> &mut Vec<u8> {$/;"	P	implementation:BufWriter	signature:(&mut self) -> &mut Vec<u8>
buffer_size	$RUST/src/io/copy.rs	/^    fn buffer_size(&self) -> usize;$/;"	P	interface:BufferedWriterSpec	signature:(&self) -> usize
buffered	$RUST/src/io/buffered/linewritershim.rs	/^    fn buffered(&self) -> &[u8] {$/;"	P	implementation:LineWriterShim	signature:(&self) -> &[u8]
buffered	$RUST/src/io/mod.rs	/^mod buffered;$/;"	n
bufreader	$RUST/src/io/buffered/mod.rs	/^mod bufreader;$/;"	n
bufreader_full_initialize	$RUST/src/io/buffered/tests.rs	/^fn bufreader_full_initialize() {$/;"	f	signature:()
bufreader_size_hint	$RUST/src/io/tests.rs	/^fn bufreader_size_hint() {$/;"	f	signature:()
bufwriter	$RUST/src/io/buffered/mod.rs	/^mod bufwriter;$/;"	n
build_hasher	$RUST/src/hash/random.rs	/^    fn build_hasher(&self) -> DefaultHasher {$/;"	P	implementation:RandomState	signature:(&self) -> DefaultHasher
by_ref	$RUST/src/io/mod.rs	/^    fn by_ref(&mut self) -> &mut Self$/;"	P	interface:Write	signature:(&mut self) -> &mut Self where Self: Sized,
byte	$RUST/src/io/util.rs	/^    byte: u8,$/;"	m	struct:Repeat
bytes	$RUST/src/io/mod.rs	/^    fn bytes(self) -> Bytes<Self>$/;"	P	interface:Read	signature:(self) -> Bytes<Self> where Self: Sized,
bytes	$RUST/src/sys/pal/windows/stdio.rs	/^    bytes: [u8; 4],$/;"	m	struct:IncompleteUtf8
bytes	$RUST/src/sys_common/wtf8.rs	/^    bytes: slice::Iter<'a, u8>,$/;"	m	struct:Wtf8CodePoints
bytes_to_path	$RUST/src/sys/pal/unix/os.rs	/^    fn bytes_to_path(b: &[u8]) -> PathBuf {$/;"	f	function:split_paths	signature:(b: &[u8]) -> PathBuf
cAlternateFileName	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub cAlternateFileName: [u16; 14],$/;"	m	struct:WIN32_FIND_DATAW
cFileName	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub cFileName: [u16; 260],$/;"	m	struct:WIN32_FIND_DATAW
c_char	$RUST/src/sys/pal/hermit/args.rs	/^            let cstr = CStr::from_ptr(*argv.offset(i) as *const c_char);$/;"	C	function:args
c_char	$RUST/src/sys/pal/solid/os.rs	/^        static mut environ: *const *const c_char;$/;"	C	function:env
c_char	$RUST/src/sys/pal/unix/args.rs	/^                let utf_c_str: *const c_char =$/;"	C	function:imp::args
c_char	$RUST/src/sys/pal/unix/os.rs	/^    libc::_NSGetEnviron() as *mut *const *const c_char$/;"	C	function:environ
c_char	$RUST/src/sys/pal/unix/process/process_vxworks.rs	/^                self.get_argv().as_ptr() as *mut *const c_char, \/\/ argv$/;"	C	method:Command::spawn
c_compat	$RUST/src/sys/pal/xous/os.rs	/^mod c_compat {$/;"	n
c_int	$RUST/src/sys/pal/unix/thread_local_dtor.rs	/^    pub struct c_int(pub libc::c_int);$/;"	s	function:register_dtor
c_void	$RUST/src/sys/pal/solid/net.rs	/^                buf.as_ptr() as *const c_void,$/;"	C	method:Socket::write
c_void	$RUST/src/sys/pal/unix/args.rs	/^        type Sel = *const c_void;$/;"	C	function:imp::args
c_void	$RUST/src/sys/pal/windows/c.rs	/^pub type LPCVOID = *const c_void;$/;"	C
c_void	$RUST/src/sys_common/net.rs	/^            c::send(self.inner.as_raw(), buf.as_ptr() as *const c_void, len, MSG_NOSIGNAL)$/;"	C	method:UdpSocket::send
call	$RUST/src/sys/pal/unsupported/once.rs	/^    pub fn call(&self, ignore_poisoning: bool, f: &mut impl FnMut(&public::OnceState)) {$/;"	P	implementation:Once	signature:(&self, ignore_poisoning: bool, f: &mut impl FnMut(&public::OnceState))
call	$RUST/src/sys_common/once/futex.rs	/^    pub fn call(&self, ignore_poisoning: bool, f: &mut impl FnMut(&public::OnceState)) {$/;"	P	implementation:Once	signature:(&self, ignore_poisoning: bool, f: &mut impl FnMut(&public::OnceState))
call	$RUST/src/sys_common/once/queue.rs	/^    pub fn call(&self, ignore_poisoning: bool, init: &mut dyn FnMut(&public::OnceState)) {$/;"	P	implementation:Once	signature:(&self, ignore_poisoning: bool, init: &mut dyn FnMut(&public::OnceState))
call_once	$RUST/src/sync/once.rs	/^    pub fn call_once<F>(&self, f: F)$/;"	P	implementation:Once	signature:<F>(&self, f: F) where F: FnOnce(),
call_once_force	$RUST/src/sync/once.rs	/^    pub fn call_once_force<F>(&self, f: F)$/;"	P	implementation:Once	signature:<F>(&self, f: F) where F: FnOnce(&OnceState),
callback	$RUST/src/sys/pal/windows/fs.rs	/^    unsafe extern "system" fn callback($/;"	f	function:copy	signature:( _TotalFileSize: c::LARGE_INTEGER, _TotalBytesTransferred: c::LARGE_INTEGER, _StreamSize: c::LARGE_INTEGER, StreamBytesTransferred: c::LARGE_INTEGER, dwStreamNumber: c::DWORD, _dwCallbackReason: c::DWORD, _hSourceFile: c::HANDLE, _hDestinationFile: c::HANDLE, lpData: c::LPCVOID, ) -> c::DWORD
callback	$RUST/src/sys/pal/windows/pipe.rs	/^        unsafe extern "system" fn callback($/;"	f	method:AnonPipe::alertable_io_internal	signature:( dwErrorCode: u32, dwNumberOfBytesTransferred: u32, lpOverlapped: *mut c::OVERLAPPED, )
calls	$RUST/src/io/buffered/tests.rs	/^        calls: VecDeque<Call>,$/;"	m	struct:line_vectored_partial_and_errors::Writer
can_release_part	$RUST/src/sys/pal/sgx/alloc.rs	/^    fn can_release_part(&self, _flags: u32) -> bool {$/;"	P	implementation:Sgx	signature:(&self, _flags: u32) -> bool
cancel_init	$RUST/src/sys/pal/unix/locks/pthread_mutex.rs	/^    fn cancel_init(_: Box<Self>) {$/;"	P	implementation:AllocatedMutex	signature:(_: Box<Self>)
cancel_init	$RUST/src/sys/pal/unix/locks/pthread_rwlock.rs	/^    fn cancel_init(_: Box<Self>) {$/;"	P	implementation:AllocatedRwLock	signature:(_: Box<Self>)
cancel_init	$RUST/src/sys_common/lazy_box.rs	/^    fn cancel_init(x: Box<Self>) {$/;"	P	interface:LazyInit	signature:(x: Box<Self>)
cancel_io	$RUST/src/sys/pal/windows/handle.rs	/^    pub fn cancel_io(&self) -> io::Result<()> {$/;"	P	implementation:Handle	signature:(&self) -> io::Result<()>
canonicalize	$RUST/src/fs.rs	/^pub fn canonicalize<P: AsRef<Path>>(path: P) -> io::Result<PathBuf> {$/;"	f	signature:<P: AsRef<Path>>(path: P) -> io::Result<PathBuf>
canonicalize	$RUST/src/path.rs	/^    pub fn canonicalize(&self) -> io::Result<PathBuf> {$/;"	P	implementation:Path	signature:(&self) -> io::Result<PathBuf>
canonicalize	$RUST/src/sys/pal/hermit/fs.rs	/^pub fn canonicalize(_p: &Path) -> io::Result<PathBuf> {$/;"	f	signature:(_p: &Path) -> io::Result<PathBuf>
canonicalize	$RUST/src/sys/pal/unix/fs.rs	/^pub fn canonicalize(p: &Path) -> io::Result<PathBuf> {$/;"	f	signature:(p: &Path) -> io::Result<PathBuf>
canonicalize	$RUST/src/sys/pal/unsupported/fs.rs	/^pub fn canonicalize(_p: &Path) -> io::Result<PathBuf> {$/;"	f	signature:(_p: &Path) -> io::Result<PathBuf>
canonicalize	$RUST/src/sys/pal/wasi/fs.rs	/^pub fn canonicalize(_p: &Path) -> io::Result<PathBuf> {$/;"	f	signature:(_p: &Path) -> io::Result<PathBuf>
canonicalize	$RUST/src/sys/pal/windows/fs.rs	/^pub fn canonicalize(p: &Path) -> io::Result<PathBuf> {$/;"	f	signature:(p: &Path) -> io::Result<PathBuf>
canonicalize_works_simple	$RUST/src/fs/tests.rs	/^fn canonicalize_works_simple() {$/;"	f	signature:()
cap	$RUST/src/io/copy/tests.rs	/^    cap: usize,$/;"	m	struct:ShortReader
cap	$RUST/src/sync/mpmc/array.rs	/^    cap: usize,$/;"	m	struct:Channel
cap	$RUST/src/sys/pal/wasi/fs.rs	/^    cap: usize,$/;"	m	struct:ReadDir
capacity	$RUST/src/collections/hash/map.rs	/^    pub fn capacity(&self) -> usize {$/;"	P	implementation:HashMap	signature:(&self) -> usize
capacity	$RUST/src/collections/hash/set.rs	/^    pub fn capacity(&self) -> usize {$/;"	P	implementation:HashSet	signature:(&self) -> usize
capacity	$RUST/src/ffi/os_str.rs	/^    pub fn capacity(&self) -> usize {$/;"	P	implementation:OsString	signature:(&self) -> usize
capacity	$RUST/src/io/buffered/bufreader.rs	/^    pub fn capacity(&self) -> usize {$/;"	P	implementation:BufReader	signature:(&self) -> usize
capacity	$RUST/src/io/buffered/bufreader/buffer.rs	/^    pub fn capacity(&self) -> usize {$/;"	P	implementation:Buffer	signature:(&self) -> usize
capacity	$RUST/src/io/buffered/bufwriter.rs	/^    pub fn capacity(&self) -> usize {$/;"	P	implementation:BufWriter	signature:(&self) -> usize
capacity	$RUST/src/os/unix/net/ancillary.rs	/^    pub fn capacity(&self) -> usize {$/;"	P	implementation:SocketAncillary	signature:(&self) -> usize
capacity	$RUST/src/path.rs	/^    pub fn capacity(&self) -> usize {$/;"	P	implementation:PathBuf	signature:(&self) -> usize
capacity	$RUST/src/sync/mpmc/array.rs	/^    pub(crate) fn capacity(&self) -> Option<usize> {$/;"	P	implementation:Channel	signature:(&self) -> Option<usize>
capacity	$RUST/src/sync/mpmc/list.rs	/^    pub(crate) fn capacity(&self) -> Option<usize> {$/;"	P	implementation:Channel	signature:(&self) -> Option<usize>
capacity	$RUST/src/sync/mpmc/mod.rs	/^    pub fn capacity(&self) -> Option<usize> {$/;"	P	implementation:Sender	signature:(&self) -> Option<usize>
capacity	$RUST/src/sync/mpmc/zero.rs	/^    pub(crate) fn capacity(&self) -> Option<usize> {$/;"	P	implementation:Channel	signature:(&self) -> Option<usize>
capacity	$RUST/src/sys/os_str/bytes.rs	/^    pub fn capacity(&self) -> usize {$/;"	P	implementation:Buf	signature:(&self) -> usize
capacity	$RUST/src/sys/os_str/wtf8.rs	/^    pub fn capacity(&self) -> usize {$/;"	P	implementation:Buf	signature:(&self) -> usize
capacity	$RUST/src/sys/pal/windows/fs.rs	/^    fn capacity(&self) -> usize {$/;"	P	implementation:DirBuff	signature:(&self) -> usize
capacity	$RUST/src/sys_common/wtf8.rs	/^    pub fn capacity(&self) -> usize {$/;"	P	implementation:Wtf8Buf	signature:(&self) -> usize
capture	$RUST/src/backtrace.rs	/^    pub fn capture() -> Backtrace {$/;"	P	implementation:Backtrace	signature:() -> Backtrace
capture	$RUST/src/sys_common/process.rs	/^    pub fn capture(&self) -> BTreeMap<EnvKey, OsString> {$/;"	P	implementation:CommandEnv	signature:(&self) -> BTreeMap<EnvKey, OsString>
capture_env	$RUST/src/sys/pal/unix/process/process_common.rs	/^    pub fn capture_env(&mut self) -> Option<CStringArray> {$/;"	P	implementation:Command	signature:(&mut self) -> Option<CStringArray>
capture_if_changed	$RUST/src/sys_common/process.rs	/^    pub fn capture_if_changed(&self) -> Option<BTreeMap<EnvKey, OsString>> {$/;"	P	implementation:CommandEnv	signature:(&self) -> Option<BTreeMap<EnvKey, OsString>>
catch_unwind	$RUST/src/panic.rs	/^pub fn catch_unwind<F: FnOnce() -> R + UnwindSafe, R>(f: F) -> Result<R> {$/;"	f	signature:<F: FnOnce() -> R + UnwindSafe, R>(f: F) -> Result<R>
cause	$RUST/src/io/error.rs	/^    fn cause(&self) -> Option<&dyn error::Error> {$/;"	P	implementation:Error	signature:(&self) -> Option<&dyn error::Error>
cause	$RUST/src/sync/poison.rs	/^    fn cause(&self) -> Option<&dyn Error> {$/;"	P	implementation:TryLockError	signature:(&self) -> Option<&dyn Error>
cbReserved2	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub cbReserved2: u16,$/;"	m	struct:STARTUPINFOW
cbrt	$RUST/src/f32.rs	/^    pub fn cbrt(self) -> f32 {$/;"	P	implementation:f32	signature:(self) -> f32
cbrt	$RUST/src/f64.rs	/^    pub fn cbrt(self) -> f64 {$/;"	P	implementation:f64	signature:(self) -> f64
cbrt	$RUST/src/sys/cmath/builtins.rs	/^    pub fn cbrt(n: f64) -> f64;$/;"	f	signature:(n: f64) -> f64
cbrt	$RUST/src/sys/cmath/windows.rs	/^    pub fn cbrt(n: c_double) -> c_double;$/;"	f	signature:(n: c_double) -> c_double
cbrtf	$RUST/src/sys/cmath/builtins.rs	/^    pub fn cbrtf(n: f32) -> f32;$/;"	f	signature:(n: f32) -> f32
cbrtf	$RUST/src/sys/cmath/windows.rs	/^    pub fn cbrtf(n: c_float) -> c_float;$/;"	f	signature:(n: c_float) -> c_float
ccrandom_fill_bytes	$RUST/src/sys/pal/unix/rand.rs	/^    fn ccrandom_fill_bytes(v: &mut [u8]) {$/;"	f	module:imp	signature:(v: &mut [u8])
ceil	$RUST/src/f32.rs	/^    pub fn ceil(self) -> f32 {$/;"	P	implementation:f32	signature:(self) -> f32
ceil	$RUST/src/f64.rs	/^    pub fn ceil(self) -> f64 {$/;"	P	implementation:f64	signature:(self) -> f64
ceilpri	$RUST/src/sys/pal/itron/abi.rs	/^    pub ceilpri: PRI,$/;"	m	struct:T_CMTX
cell	$RUST/src/sys/pal/sgx/waitqueue/unsafe_list/tests.rs	/^fn cell() {$/;"	f	signature:()
cfg_has_statx	$RUST/src/sys/pal/unix/fs.rs	/^macro_rules! cfg_has_statx {$/;"	M
cgroups	$RUST/src/sys/pal/unix/thread.rs	/^mod cgroups {$/;"	n
chain	$RUST/src/io/mod.rs	/^    fn chain<R: Read>(self, next: R) -> Chain<Self, R>$/;"	P	interface:Read	signature:<R: Read>(self, next: R) -> Chain<Self, R> where Self: Sized,
chain_bufread	$RUST/src/io/tests.rs	/^fn chain_bufread() {$/;"	f	signature:()
chain_empty_size_hint	$RUST/src/io/tests.rs	/^fn chain_empty_size_hint() {$/;"	f	signature:()
chain_size_hint	$RUST/src/io/tests.rs	/^fn chain_size_hint() {$/;"	f	signature:()
chain_zero_length_read_is_not_eof	$RUST/src/io/tests.rs	/^fn chain_zero_length_read_is_not_eof() {$/;"	f	signature:()
chan	$RUST/src/sync/mpmc/counter.rs	/^    chan: C,$/;"	m	struct:Counter
chan_gone_concurrent	$RUST/src/sync/mpsc/sync_tests.rs	/^fn chan_gone_concurrent() {$/;"	f	signature:()
chan_gone_concurrent	$RUST/src/sync/mpsc/tests.rs	/^fn chan_gone_concurrent() {$/;"	f	signature:()
channel	$RUST/src/sync/mpmc/mod.rs	/^pub fn channel<T>() -> (Sender<T>, Receiver<T>) {$/;"	f	signature:<T>() -> (Sender<T>, Receiver<T>)
channel	$RUST/src/sync/mpsc/mod.rs	/^pub fn channel<T>() -> (Sender<T>, Receiver<T>) {$/;"	f	signature:<T>() -> (Sender<T>, Receiver<T>)
char	$RUST/src/ascii.rs	/^impl AsciiExt for char {$/;"	c
chdir	$RUST/src/sys/pal/hermit/os.rs	/^pub fn chdir(_: &path::Path) -> io::Result<()> {$/;"	f	signature:(_: &path::Path) -> io::Result<()>
chdir	$RUST/src/sys/pal/sgx/os.rs	/^pub fn chdir(_: &path::Path) -> io::Result<()> {$/;"	f	signature:(_: &path::Path) -> io::Result<()>
chdir	$RUST/src/sys/pal/solid/os.rs	/^pub fn chdir(_: &path::Path) -> io::Result<()> {$/;"	f	signature:(_: &path::Path) -> io::Result<()>
chdir	$RUST/src/sys/pal/teeos/os.rs	/^pub fn chdir(_: &path::Path) -> io::Result<()> {$/;"	f	signature:(_: &path::Path) -> io::Result<()>
chdir	$RUST/src/sys/pal/uefi/os.rs	/^pub fn chdir(_: &path::Path) -> io::Result<()> {$/;"	f	signature:(_: &path::Path) -> io::Result<()>
chdir	$RUST/src/sys/pal/unix/os.rs	/^pub fn chdir(p: &path::Path) -> io::Result<()> {$/;"	f	signature:(p: &path::Path) -> io::Result<()>
chdir	$RUST/src/sys/pal/unsupported/os.rs	/^pub fn chdir(_: &path::Path) -> io::Result<()> {$/;"	f	signature:(_: &path::Path) -> io::Result<()>
chdir	$RUST/src/sys/pal/wasi/os.rs	/^pub fn chdir(p: &path::Path) -> io::Result<()> {$/;"	f	signature:(p: &path::Path) -> io::Result<()>
chdir	$RUST/src/sys/pal/windows/os.rs	/^pub fn chdir(p: &path::Path) -> io::Result<()> {$/;"	f	signature:(p: &path::Path) -> io::Result<()>
chdir	$RUST/src/sys/pal/xous/os.rs	/^pub fn chdir(_: &path::Path) -> io::Result<()> {$/;"	f	signature:(_: &path::Path) -> io::Result<()>
chdir	$RUST/src/sys/pal/zkvm/os.rs	/^pub fn chdir(_: &path::Path) -> io::Result<()> {$/;"	f	signature:(_: &path::Path) -> io::Result<()>
check	$RUST/src/collections/hash/map/tests.rs	/^    fn check(m: &HashMap<i32, ()>) {$/;"	f	function:test_entry_take_doesnt_corrupt	signature:(m: &HashMap<i32, ()>)
check	$RUST/src/fs/tests.rs	/^macro_rules! check {$/;"	M
check	$RUST/src/sys/pal/windows/path/tests.rs	/^    fn check(path: &str, expected: &str) {$/;"	f	function:verbatim	signature:(path: &str, expected: &str)
check	$RUST/src/time/tests.rs	/^    fn check<T: Eq + Copy + Debug>(start: Option<T>, op: impl Fn(&T, Duration) -> Option<T>) {$/;"	f	function:big_math	signature:<T: Eq + Copy + Debug>(start: Option<T>, op: impl Fn(&T, Duration) -> Option<T>)
check_os_error	$RUST/src/sys/pal/sgx/abi/usercalls/mod.rs	/^fn check_os_error(err: Result) -> i32 {$/;"	f	signature:(err: Result) -> i32
check_parse	$RUST/src/env/tests.rs	/^    fn check_parse(unparsed: &str, parsed: &[&str]) -> bool {$/;"	f	function:split_paths_windows	signature:(unparsed: &str, parsed: &[&str]) -> bool
check_ptr	$RUST/src/sys/pal/sgx/abi/usercalls/alloc.rs	/^    unsafe fn check_ptr(ptr: *const Self) {$/;"	P	interface:UserSafe	signature:(ptr: *const Self)
check_simple_msg	$RUST/src/io/error/tests.rs	/^    macro_rules! check_simple_msg {$/;"	M	function:test_simple_message_packing
check_valid_boundary	$RUST/src/ffi/os_str.rs	/^        fn check_valid_boundary(bytes: &[u8], index: usize) {$/;"	f	method:OsStr::slice_encoded_bytes	signature:(bytes: &[u8], index: usize)
checked_add	$RUST/src/sys/pal/hermit/time.rs	/^    pub fn checked_add(&self, duration: Duration) -> Option<Instant> {$/;"	P	implementation:Instant	signature:(&self, duration: Duration) -> Option<Instant>
checked_add	$RUST/src/time.rs	/^    pub fn checked_add(&self, duration: Duration) -> Option<SystemTime> {$/;"	P	implementation:SystemTime	signature:(&self, duration: Duration) -> Option<SystemTime>
checked_add_duration	$RUST/src/sys/pal/hermit/time.rs	/^    pub fn checked_add_duration(&self, other: &Duration) -> Option<SystemTime> {$/;"	P	implementation:SystemTime	signature:(&self, other: &Duration) -> Option<SystemTime>
checked_add_duration	$RUST/src/sys/pal/itron/time.rs	/^    pub fn checked_add_duration(&self, other: &Duration) -> Option<Instant> {$/;"	P	implementation:Instant	signature:(&self, other: &Duration) -> Option<Instant>
checked_add_duration	$RUST/src/sys/pal/sgx/time.rs	/^    pub fn checked_add_duration(&self, other: &Duration) -> Option<SystemTime> {$/;"	P	implementation:SystemTime	signature:(&self, other: &Duration) -> Option<SystemTime>
checked_add_duration	$RUST/src/sys/pal/solid/time.rs	/^    pub fn checked_add_duration(&self, other: &Duration) -> Option<SystemTime> {$/;"	P	implementation:SystemTime	signature:(&self, other: &Duration) -> Option<SystemTime>
checked_add_duration	$RUST/src/sys/pal/unix/time.rs	/^    pub fn checked_add_duration(&self, other: &Duration) -> Option<Timespec> {$/;"	P	implementation:Timespec	signature:(&self, other: &Duration) -> Option<Timespec>
checked_add_duration	$RUST/src/sys/pal/unsupported/time.rs	/^    pub fn checked_add_duration(&self, other: &Duration) -> Option<SystemTime> {$/;"	P	implementation:SystemTime	signature:(&self, other: &Duration) -> Option<SystemTime>
checked_add_duration	$RUST/src/sys/pal/wasi/time.rs	/^    pub fn checked_add_duration(&self, other: &Duration) -> Option<SystemTime> {$/;"	P	implementation:SystemTime	signature:(&self, other: &Duration) -> Option<SystemTime>
checked_add_duration	$RUST/src/sys/pal/windows/time.rs	/^    pub fn checked_add_duration(&self, other: &Duration) -> Option<SystemTime> {$/;"	P	implementation:SystemTime	signature:(&self, other: &Duration) -> Option<SystemTime>
checked_add_duration	$RUST/src/sys/pal/xous/time.rs	/^    pub fn checked_add_duration(&self, other: &Duration) -> Option<SystemTime> {$/;"	P	implementation:SystemTime	signature:(&self, other: &Duration) -> Option<SystemTime>
checked_dur2intervals	$RUST/src/sys/pal/windows/time.rs	/^fn checked_dur2intervals(dur: &Duration) -> Option<i64> {$/;"	f	signature:(dur: &Duration) -> Option<i64>
checked_duration_since	$RUST/src/sys/pal/hermit/time.rs	/^    pub fn checked_duration_since(&self, earlier: Instant) -> Option<Duration> {$/;"	P	implementation:Instant	signature:(&self, earlier: Instant) -> Option<Duration>
checked_duration_since	$RUST/src/time.rs	/^    pub fn checked_duration_since(&self, earlier: Instant) -> Option<Duration> {$/;"	P	implementation:Instant	signature:(&self, earlier: Instant) -> Option<Duration>
checked_sub	$RUST/src/sys/pal/hermit/time.rs	/^    pub fn checked_sub(&self, duration: Duration) -> Option<Instant> {$/;"	P	implementation:Instant	signature:(&self, duration: Duration) -> Option<Instant>
checked_sub	$RUST/src/time.rs	/^    pub fn checked_sub(&self, duration: Duration) -> Option<SystemTime> {$/;"	P	implementation:SystemTime	signature:(&self, duration: Duration) -> Option<SystemTime>
checked_sub_duration	$RUST/src/sys/pal/hermit/time.rs	/^    pub fn checked_sub_duration(&self, other: &Duration) -> Option<SystemTime> {$/;"	P	implementation:SystemTime	signature:(&self, other: &Duration) -> Option<SystemTime>
checked_sub_duration	$RUST/src/sys/pal/itron/time.rs	/^    pub fn checked_sub_duration(&self, other: &Duration) -> Option<Instant> {$/;"	P	implementation:Instant	signature:(&self, other: &Duration) -> Option<Instant>
checked_sub_duration	$RUST/src/sys/pal/sgx/time.rs	/^    pub fn checked_sub_duration(&self, other: &Duration) -> Option<SystemTime> {$/;"	P	implementation:SystemTime	signature:(&self, other: &Duration) -> Option<SystemTime>
checked_sub_duration	$RUST/src/sys/pal/solid/time.rs	/^    pub fn checked_sub_duration(&self, other: &Duration) -> Option<SystemTime> {$/;"	P	implementation:SystemTime	signature:(&self, other: &Duration) -> Option<SystemTime>
checked_sub_duration	$RUST/src/sys/pal/unix/time.rs	/^    pub fn checked_sub_duration(&self, other: &Duration) -> Option<Timespec> {$/;"	P	implementation:Timespec	signature:(&self, other: &Duration) -> Option<Timespec>
checked_sub_duration	$RUST/src/sys/pal/unsupported/time.rs	/^    pub fn checked_sub_duration(&self, other: &Duration) -> Option<SystemTime> {$/;"	P	implementation:SystemTime	signature:(&self, other: &Duration) -> Option<SystemTime>
checked_sub_duration	$RUST/src/sys/pal/wasi/time.rs	/^    pub fn checked_sub_duration(&self, other: &Duration) -> Option<SystemTime> {$/;"	P	implementation:SystemTime	signature:(&self, other: &Duration) -> Option<SystemTime>
checked_sub_duration	$RUST/src/sys/pal/windows/time.rs	/^    pub fn checked_sub_duration(&self, other: &Duration) -> Option<SystemTime> {$/;"	P	implementation:SystemTime	signature:(&self, other: &Duration) -> Option<SystemTime>
checked_sub_duration	$RUST/src/sys/pal/xous/time.rs	/^    pub fn checked_sub_duration(&self, other: &Duration) -> Option<SystemTime> {$/;"	P	implementation:SystemTime	signature:(&self, other: &Duration) -> Option<SystemTime>
checked_sub_instant	$RUST/src/sys/pal/hermit/time.rs	/^    pub fn checked_sub_instant(&self, other: &Instant) -> Option<Duration> {$/;"	P	implementation:Instant	signature:(&self, other: &Instant) -> Option<Duration>
checked_sub_instant	$RUST/src/sys/pal/itron/time.rs	/^    pub fn checked_sub_instant(&self, other: &Instant) -> Option<Duration> {$/;"	P	implementation:Instant	signature:(&self, other: &Instant) -> Option<Duration>
checked_sub_instant	$RUST/src/sys/pal/sgx/time.rs	/^    pub fn checked_sub_instant(&self, other: &Instant) -> Option<Duration> {$/;"	P	implementation:Instant	signature:(&self, other: &Instant) -> Option<Duration>
checked_sub_instant	$RUST/src/sys/pal/unix/time.rs	/^    pub fn checked_sub_instant(&self, other: &Instant) -> Option<Duration> {$/;"	P	implementation:Instant	signature:(&self, other: &Instant) -> Option<Duration>
checked_sub_instant	$RUST/src/sys/pal/unsupported/time.rs	/^    pub fn checked_sub_instant(&self, other: &Instant) -> Option<Duration> {$/;"	P	implementation:Instant	signature:(&self, other: &Instant) -> Option<Duration>
checked_sub_instant	$RUST/src/sys/pal/wasi/time.rs	/^    pub fn checked_sub_instant(&self, other: &Instant) -> Option<Duration> {$/;"	P	implementation:Instant	signature:(&self, other: &Instant) -> Option<Duration>
checked_sub_instant	$RUST/src/sys/pal/windows/time.rs	/^    pub fn checked_sub_instant(&self, other: &Instant) -> Option<Duration> {$/;"	P	implementation:Instant	signature:(&self, other: &Instant) -> Option<Duration>
checked_sub_instant	$RUST/src/sys/pal/xous/time.rs	/^    pub fn checked_sub_instant(&self, other: &Instant) -> Option<Duration> {$/;"	P	implementation:Instant	signature:(&self, other: &Instant) -> Option<Duration>
child_no	$RUST/src/thread/tests.rs	/^    fn child_no(x: u32) -> Box<dyn Fn() + Send> {$/;"	f	function:test_child_doesnt_ref_parent	signature:(x: u32) -> Box<dyn Fn() + Send>
child_stdout_read_buf	$RUST/src/process/tests.rs	/^fn child_stdout_read_buf() {$/;"	f	signature:()
chk	$RUST/src/sys/pal/windows/args/tests.rs	/^fn chk(string: &str, parts: &[&str]) {$/;"	f	signature:(string: &str, parts: &[&str])
chmod_works	$RUST/src/fs/tests.rs	/^fn chmod_works() {$/;"	f	signature:()
chown	$RUST/src/os/unix/fs.rs	/^pub fn chown<P: AsRef<Path>>(dir: P, uid: Option<u32>, gid: Option<u32>) -> io::Result<()> {$/;"	f	signature:<P: AsRef<Path>>(dir: P, uid: Option<u32>, gid: Option<u32>) -> io::Result<()>
chown	$RUST/src/sys/pal/unix/fs.rs	/^pub fn chown(path: &Path, uid: u32, gid: u32) -> io::Result<()> {$/;"	f	signature:(path: &Path, uid: u32, gid: u32) -> io::Result<()>
chroot	$RUST/src/os/unix/fs.rs	/^pub fn chroot<P: AsRef<Path>>(dir: P) -> io::Result<()> {$/;"	f	signature:<P: AsRef<Path>>(dir: P) -> io::Result<()>
chroot	$RUST/src/sys/pal/unix/fs.rs	/^pub fn chroot(dir: &Path) -> io::Result<()> {$/;"	f	signature:(dir: &Path) -> io::Result<()>
ciovec	$RUST/src/sys/pal/wasi/fd.rs	/^fn ciovec<'a>(a: &'a [IoSlice<'_>]) -> &'a [wasi::Ciovec] {$/;"	f	signature:<'a>(a: &'a [IoSlice<'_>]) -> &'a [wasi::Ciovec]
circular	$RUST/src/thread/local/tests.rs	/^fn circular() {$/;"	f	signature:()
cleanup	$RUST/src/io/stdio.rs	/^pub fn cleanup() {$/;"	f	signature:()
cleanup	$RUST/src/panicking.rs	/^    unsafe fn cleanup(payload: *mut u8) -> Box<dyn Any + Send + 'static> {$/;"	f	signature:(payload: *mut u8) -> Box<dyn Any + Send + 'static>
cleanup	$RUST/src/rt.rs	/^pub(crate) fn cleanup() {$/;"	f	signature:()
cleanup	$RUST/src/sys/pal/hermit/mod.rs	/^pub unsafe fn cleanup() {}$/;"	f	signature:()
cleanup	$RUST/src/sys/pal/sgx/mod.rs	/^pub unsafe fn cleanup() {}$/;"	f	signature:()
cleanup	$RUST/src/sys/pal/solid/mod.rs	/^pub unsafe fn cleanup() {}$/;"	f	signature:()
cleanup	$RUST/src/sys/pal/teeos/mod.rs	/^pub unsafe fn cleanup() {$/;"	f	signature:()
cleanup	$RUST/src/sys/pal/uefi/mod.rs	/^pub unsafe fn cleanup() {$/;"	f	signature:()
cleanup	$RUST/src/sys/pal/unix/mod.rs	/^pub unsafe fn cleanup() {$/;"	f	signature:()
cleanup	$RUST/src/sys/pal/unix/stack_overflow.rs	/^    pub unsafe fn cleanup() {}$/;"	f	module:imp	signature:()
cleanup	$RUST/src/sys/pal/unsupported/common.rs	/^pub unsafe fn cleanup() {}$/;"	f	signature:()
cleanup	$RUST/src/sys/pal/windows/mod.rs	/^pub unsafe fn cleanup() {$/;"	f	signature:()
cleanup	$RUST/src/sys/pal/windows/net.rs	/^pub fn cleanup() {$/;"	f	signature:()
cleanup	$RUST/src/sys/pal/zkvm/mod.rs	/^pub unsafe fn cleanup() {}$/;"	f	signature:()
clear	$RUST/src/collections/hash/map.rs	/^    pub fn clear(&mut self) {$/;"	P	implementation:HashMap	signature:(&mut self)
clear	$RUST/src/collections/hash/set.rs	/^    pub fn clear(&mut self) {$/;"	P	implementation:HashSet	signature:(&mut self)
clear	$RUST/src/ffi/os_str.rs	/^    pub fn clear(&mut self) {$/;"	P	implementation:OsString	signature:(&mut self)
clear	$RUST/src/os/unix/net/ancillary.rs	/^    pub fn clear(&mut self) {$/;"	P	implementation:SocketAncillary	signature:(&mut self)
clear	$RUST/src/path.rs	/^    pub fn clear(&mut self) {$/;"	P	implementation:PathBuf	signature:(&mut self)
clear	$RUST/src/sync/poison.rs	/^    pub fn clear(&self) {$/;"	P	implementation:Flag	signature:(&self)
clear	$RUST/src/sys/os_str/bytes.rs	/^    pub fn clear(&mut self) {$/;"	P	implementation:Buf	signature:(&mut self)
clear	$RUST/src/sys/os_str/wtf8.rs	/^    pub fn clear(&mut self) {$/;"	P	implementation:Buf	signature:(&mut self)
clear	$RUST/src/sys/pal/sgx/abi/tls/sync_bitset.rs	/^    pub fn clear(&self, index: usize) {$/;"	P	implementation:SyncBitset	signature:(&self, index: usize)
clear	$RUST/src/sys_common/process.rs	/^    pub fn clear(&mut self) {$/;"	P	implementation:CommandEnv	signature:(&mut self)
clear	$RUST/src/sys_common/wtf8.rs	/^    pub fn clear(&mut self) {$/;"	P	implementation:Wtf8Buf	signature:(&mut self)
clear_poison	$RUST/src/sync/mutex.rs	/^    pub fn clear_poison(&self) {$/;"	P	implementation:Mutex	signature:(&self)
clear_poison	$RUST/src/sync/rwlock.rs	/^    pub fn clear_poison(&self) {$/;"	P	implementation:RwLock	signature:(&self)
clock_id	$RUST/src/sys/pal/unix/time.rs	/^        const clock_id: libc::clockid_t = libc::CLOCK_UPTIME_RAW;$/;"	C	method:Instant::now
clone	$RUST/src/collections/hash/map.rs	/^    fn clone(&self) -> Self {$/;"	f	signature:(&self) -> Self
clone	$RUST/src/collections/hash/map/tests.rs	/^    fn clone(&self) -> Droppable {$/;"	P	implementation:Droppable	signature:(&self) -> Droppable
clone	$RUST/src/collections/hash/set.rs	/^    fn clone(&self) -> Self {$/;"	f	signature:(&self) -> Self
clone	$RUST/src/ffi/os_str.rs	/^    fn clone(&self) -> Self {$/;"	P	implementation:OsString	signature:(&self) -> Self
clone	$RUST/src/io/cursor.rs	/^    fn clone(&self) -> Self {$/;"	f	signature:(&self) -> Self
clone	$RUST/src/path.rs	/^    fn clone(&self) -> Self {$/;"	P	implementation:PathBuf	signature:(&self) -> Self
clone	$RUST/src/sync/mpmc/mod.rs	/^    fn clone(&self) -> Self {$/;"	P	implementation:Sender	signature:(&self) -> Self
clone	$RUST/src/sync/mpsc/mod.rs	/^    fn clone(&self) -> SyncSender<T> {$/;"	P	implementation:SyncSender	signature:(&self) -> SyncSender<T>
clone	$RUST/src/sync/once_lock.rs	/^    fn clone(&self) -> OnceLock<T> {$/;"	P	implementation:OnceLock	signature:(&self) -> OnceLock<T>
clone	$RUST/src/sync/once_lock/tests.rs	/^fn clone() {$/;"	f	signature:()
clone	$RUST/src/sys/os_str/bytes.rs	/^    fn clone(&self) -> Self {$/;"	P	implementation:Buf	signature:(&self) -> Self
clone	$RUST/src/sys/pal/hermit/fs.rs	/^    fn clone(&self) -> FileType {$/;"	P	implementation:FileType	signature:(&self) -> FileType
clone	$RUST/src/sys/pal/unix/args.rs	/^    fn clone() -> Vec<OsString> {$/;"	f	module:imp	signature:() -> Vec<OsString>
clone	$RUST/src/sys/pal/unsupported/fs.rs	/^    fn clone(&self) -> FileType {$/;"	P	implementation:FileType	signature:(&self) -> FileType
clone	$RUST/src/sys/pal/unsupported/process.rs	/^    fn clone(&self) -> ExitStatusError {$/;"	P	implementation:ExitStatusError	signature:(&self) -> ExitStatusError
clone	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    fn clone(&self) -> Self {$/;"	P	implementation:XSAVE_FORMAT	signature:(&self) -> Self
clone_accept_concurrent	$RUST/src/net/tcp/tests.rs	/^fn clone_accept_concurrent() {$/;"	f	signature:()
clone_accept_smoke	$RUST/src/net/tcp/tests.rs	/^fn clone_accept_smoke() {$/;"	f	signature:()
clone_from	$RUST/src/collections/hash/map.rs	/^    fn clone_from(&mut self, other: &Self) {$/;"	f	signature:(&mut self, other: &Self)
clone_from	$RUST/src/collections/hash/set.rs	/^    fn clone_from(&mut self, other: &Self) {$/;"	f	signature:(&mut self, other: &Self)
clone_from	$RUST/src/ffi/os_str.rs	/^    fn clone_from(&mut self, source: &Self) {$/;"	P	implementation:OsString	signature:(&mut self, source: &Self)
clone_from	$RUST/src/io/cursor.rs	/^    fn clone_from(&mut self, other: &Self) {$/;"	f	signature:(&mut self, other: &Self)
clone_from	$RUST/src/path.rs	/^    fn clone_from(&mut self, source: &Self) {$/;"	P	implementation:PathBuf	signature:(&mut self, source: &Self)
clone_from	$RUST/src/sys/os_str/bytes.rs	/^    fn clone_from(&mut self, source: &Self) {$/;"	P	implementation:Buf	signature:(&mut self, source: &Self)
clone_into	$RUST/src/ffi/os_str.rs	/^    fn clone_into(&self, target: &mut OsString) {$/;"	P	implementation:OsStr	signature:(&self, target: &mut OsString)
clone_into	$RUST/src/path.rs	/^    fn clone_into(&self, target: &mut PathBuf) {$/;"	P	implementation:Path	signature:(&self, target: &mut PathBuf)
clone_into	$RUST/src/sys/os_str/bytes.rs	/^    pub fn clone_into(&self, buf: &mut Buf) {$/;"	P	implementation:Slice	signature:(&self, buf: &mut Buf)
clone_into	$RUST/src/sys/os_str/wtf8.rs	/^    pub fn clone_into(&self, buf: &mut Buf) {$/;"	P	implementation:Slice	signature:(&self, buf: &mut Buf)
clone_into	$RUST/src/sys_common/wtf8.rs	/^    pub fn clone_into(&self, buf: &mut Wtf8Buf) {$/;"	P	implementation:Wtf8	signature:(&self, buf: &mut Wtf8Buf)
clone_while_reading	$RUST/src/net/tcp/tests.rs	/^fn clone_while_reading() {$/;"	f	signature:()
close	$RUST/src/sys/pal/sgx/abi/usercalls/mod.rs	/^pub fn close(fd: Fd) {$/;"	f	signature:(fd: Fd)
close	$RUST/src/sys/pal/solid/abi/sockets.rs	/^    pub fn close(s: c_int) -> c_int;$/;"	f	signature:(s: c_int) -> c_int
close_event	$RUST/src/sys/pal/uefi/helpers.rs	/^pub(crate) unsafe fn close_event(evt: NonNull<crate::ffi::c_void>) -> io::Result<()> {$/;"	f	signature:(evt: NonNull<crate::ffi::c_void>) -> io::Result<()>
close_read_wakes_up	$RUST/src/net/tcp/tests.rs	/^fn close_read_wakes_up() {$/;"	f	signature:()
close_readwrite_smoke	$RUST/src/net/tcp/tests.rs	/^fn close_readwrite_smoke() {$/;"	f	signature:()
closesocket	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn closesocket(s: SOCKET) -> i32;$/;"	f	signature:(s: SOCKET) -> i32
closures	$RUST/src/sys/pal/unix/process/process_common.rs	/^    closures: Vec<Box<dyn FnMut() -> io::Result<()> + Send + Sync>>,$/;"	m	struct:Command
clr_flg	$RUST/src/sys/pal/itron/abi.rs	/^    pub fn clr_flg(flgid: ID, clrptn: FLGPTN) -> ER;$/;"	f	signature:(flgid: ID, clrptn: FLGPTN) -> ER
cmath	$RUST/src/sys/mod.rs	/^pub mod cmath;$/;"	n
cmath	$RUST/src/sys/pal/zkvm/mod.rs	/^pub mod cmath;$/;"	n
cmp	$RUST/src/ffi/os_str.rs	/^    fn cmp(&self, other: &OsString) -> cmp::Ordering {$/;"	P	implementation:OsString	signature:(&self, other: &OsString) -> cmp::Ordering
cmp	$RUST/src/path.rs	/^    fn cmp(&self, other: &Self) -> cmp::Ordering {$/;"	P	implementation:PrefixComponent	signature:(&self, other: &Self) -> cmp::Ordering
cmp	$RUST/src/sys/pal/hermit/time.rs	/^    fn cmp(&self, other: &Timespec) -> Ordering {$/;"	P	implementation:Timespec	signature:(&self, other: &Timespec) -> Ordering
cmp	$RUST/src/sys/pal/windows/process.rs	/^    fn cmp(&self, other: &Self) -> cmp::Ordering {$/;"	P	implementation:EnvKey	signature:(&self, other: &Self) -> cmp::Ordering
cmp	$RUST/src/sys/pal/windows/time.rs	/^    fn cmp(&self, other: &SystemTime) -> Ordering {$/;"	P	implementation:SystemTime	signature:(&self, other: &SystemTime) -> Ordering
cmp_bufread	$RUST/src/io/tests.rs	/^fn cmp_bufread<Br1: BufRead, Br2: BufRead>(mut br1: Br1, mut br2: Br2, exp: &[u8]) {$/;"	f	signature:<Br1: BufRead, Br2: BufRead>(mut br1: Br1, mut br2: Br2, exp: &[u8])
cmsghdr	$RUST/src/os/unix/net/ancillary.rs	/^    pub struct cmsghdr;$/;"	s	module:libc
cname	$RUST/src/thread/mod.rs	/^    fn cname(&self) -> Option<&CStr> {$/;"	P	implementation:Thread	signature:(&self) -> Option<&CStr>
cntThreads	$RUST/src/process/tests.rs	/^        cntThreads: u32,$/;"	m	struct:test_proc_thread_attributes::PROCESSENTRY32W
cntUsage	$RUST/src/process/tests.rs	/^        cntUsage: u32,$/;"	m	struct:test_proc_thread_attributes::PROCESSENTRY32W
code	$RUST/src/process.rs	/^    pub fn code(&self) -> Option<i32> {$/;"	P	implementation:ExitStatusError	signature:(&self) -> Option<i32>
code	$RUST/src/sys/pal/unix/process/process_fuchsia.rs	/^    pub fn code(self) -> Option<NonZeroI32> {$/;"	P	implementation:ExitStatusError	signature:(self) -> Option<NonZeroI32>
code	$RUST/src/sys/pal/unix/process/process_unix.rs	/^    pub fn code(self) -> Option<NonZeroI32> {$/;"	P	implementation:ExitStatusError	signature:(self) -> Option<NonZeroI32>
code	$RUST/src/sys/pal/unix/process/process_unsupported.rs	/^    pub fn code(self) -> Option<NonZeroI32> {$/;"	P	implementation:ExitStatusError	signature:(self) -> Option<NonZeroI32>
code	$RUST/src/sys/pal/unix/process/process_unsupported/wait_status.rs	/^    pub fn code(&self) -> Option<i32> {$/;"	P	implementation:ExitStatus	signature:(&self) -> Option<i32>
code	$RUST/src/sys/pal/unix/process/process_vxworks.rs	/^    pub fn code(self) -> Option<NonZeroI32> {$/;"	P	implementation:ExitStatusError	signature:(self) -> Option<NonZeroI32>
code	$RUST/src/sys/pal/unsupported/process.rs	/^    pub fn code(self) -> Option<NonZeroI32> {$/;"	P	implementation:ExitStatusError	signature:(self) -> Option<NonZeroI32>
code	$RUST/src/sys/pal/windows/api.rs	/^    pub code: u32,$/;"	m	struct:WinError
code	$RUST/src/sys/pal/windows/process.rs	/^    pub fn code(self) -> Option<NonZeroI32> {$/;"	P	implementation:ExitStatusError	signature:(self) -> Option<NonZeroI32>
code	$RUST/src/sys/pal/xous/net/dns.rs	/^    pub code: u8,$/;"	m	struct:DnsError
code_nonzero	$RUST/src/process.rs	/^    pub fn code_nonzero(&self) -> Option<NonZeroI32> {$/;"	P	implementation:ExitStatusError	signature:(&self) -> Option<NonZeroI32>
code_point_from_char	$RUST/src/sys_common/wtf8/tests.rs	/^fn code_point_from_char() {$/;"	f	signature:()
code_point_from_u32	$RUST/src/sys_common/wtf8/tests.rs	/^fn code_point_from_u32() {$/;"	f	signature:()
code_point_to_char	$RUST/src/sys_common/wtf8/tests.rs	/^fn code_point_to_char() {$/;"	f	signature:()
code_point_to_char_lossy	$RUST/src/sys_common/wtf8/tests.rs	/^fn code_point_to_char_lossy() {$/;"	f	signature:()
code_point_to_lead_surrogate	$RUST/src/sys_common/wtf8/tests.rs	/^fn code_point_to_lead_surrogate() {$/;"	f	signature:()
code_point_to_string	$RUST/src/sys_common/wtf8/tests.rs	/^fn code_point_to_string() {$/;"	f	signature:()
code_point_to_trail_surrogate	$RUST/src/sys_common/wtf8/tests.rs	/^fn code_point_to_trail_surrogate() {$/;"	f	signature:()
code_point_to_u32	$RUST/src/sys_common/wtf8/tests.rs	/^fn code_point_to_u32() {$/;"	f	signature:()
code_points	$RUST/src/sys_common/wtf8.rs	/^    pub fn code_points(&self) -> Wtf8CodePoints<'_> {$/;"	P	implementation:Wtf8	signature:(&self) -> Wtf8CodePoints<'_>
collections	$RUST/src/lib.rs	/^pub mod collections;$/;"	n
colno	$RUST/src/backtrace.rs	/^    colno: Option<u32>,$/;"	m	struct:BacktraceSymbol
command_prompt	$RUST/src/sys/pal/windows/process.rs	/^fn command_prompt() -> io::Result<Vec<u16>> {$/;"	f	signature:() -> io::Result<Vec<u16>>
common	$RUST/src/sys/pal/mod.rs	/^pub mod common;$/;"	n
common	$RUST/src/sys/pal/unsupported/mod.rs	/^mod common;$/;"	n
common	$RUST/src/sys/pal/wasi/mod.rs	/^mod common;$/;"	n
common	$RUST/src/sys/pal/wasm/mod.rs	/^mod common;$/;"	n
common	$RUST/src/sys/pal/xous/mod.rs	/^mod common;$/;"	n
compare	$RUST/src/net/socket_addr/tests.rs	/^fn compare() {$/;"	f	signature:()
compare	$RUST/src/sys/pal/unix/process/process_unsupported/wait_status/tests.rs	/^        macro_rules! compare { { $method:ident } => {$/;"	M	function:compare_with_linux
compare_components	$RUST/src/path.rs	/^fn compare_components(mut left: Components<'_>, mut right: Components<'_>) -> cmp::Ordering {$/;"	f	signature:(mut left: Components<'_>, mut right: Components<'_>) -> cmp::Ordering
compare_with_linux	$RUST/src/sys/pal/unix/process/process_unsupported/wait_status/tests.rs	/^fn compare_with_linux() {$/;"	f	signature:()
compat	$RUST/src/sys/pal/windows/mod.rs	/^pub mod compat;$/;"	n
compat_fn_optional	$RUST/src/sys/pal/windows/compat.rs	/^macro_rules! compat_fn_optional {$/;"	M
compat_fn_with_fallback	$RUST/src/sys/pal/windows/compat.rs	/^macro_rules! compat_fn_with_fallback {$/;"	M
complex_pushes_pops	$RUST/src/sys/pal/sgx/waitqueue/unsafe_list/tests.rs	/^fn complex_pushes_pops() {$/;"	f	signature:()
components	$RUST/src/path.rs	/^    pub fn components(&self) -> Components<'_> {$/;"	P	implementation:Path	signature:(&self) -> Components<'_>
concurrent_recursive_mkdir	$RUST/src/fs/tests.rs	/^fn concurrent_recursive_mkdir() {$/;"	f	signature:()
condvar	$RUST/src/sync/mod.rs	/^mod condvar;$/;"	n
condvar	$RUST/src/sys/pal/sgx/mod.rs	/^mod condvar;$/;"	n
condvar	$RUST/src/sys/pal/solid/mod.rs	/^    pub mod condvar;$/;"	n	module:itron
condvar	$RUST/src/sys/pal/teeos/locks/mod.rs	/^pub mod condvar;$/;"	n
condvar	$RUST/src/sys/pal/unsupported/locks/mod.rs	/^mod condvar;$/;"	n
condvar	$RUST/src/sys/pal/windows/locks/mod.rs	/^mod condvar;$/;"	n
condvar	$RUST/src/sys/pal/xous/locks/mod.rs	/^mod condvar;$/;"	n
connect	$RUST/src/net/tcp.rs	/^    pub fn connect<A: ToSocketAddrs>(addr: A) -> io::Result<TcpStream> {$/;"	P	implementation:TcpStream	signature:<A: ToSocketAddrs>(addr: A) -> io::Result<TcpStream>
connect	$RUST/src/net/tcp/tests.rs	/^    fn connect(i: usize, addr: SocketAddr) {$/;"	f	function:multiple_connect_interleaved_lazy_schedule	signature:(i: usize, addr: SocketAddr)
connect	$RUST/src/net/udp.rs	/^    pub fn connect<A: ToSocketAddrs>(&self, addr: A) -> io::Result<()> {$/;"	P	implementation:UdpSocket	signature:<A: ToSocketAddrs>(&self, addr: A) -> io::Result<()>
connect	$RUST/src/os/unix/net/datagram.rs	/^    pub fn connect<P: AsRef<Path>>(&self, path: P) -> io::Result<()> {$/;"	P	implementation:UnixDatagram	signature:<P: AsRef<Path>>(&self, path: P) -> io::Result<()>
connect	$RUST/src/os/unix/net/stream.rs	/^    pub fn connect<P: AsRef<Path>>(path: P) -> io::Result<UnixStream> {$/;"	P	implementation:UnixStream	signature:<P: AsRef<Path>>(path: P) -> io::Result<UnixStream>
connect	$RUST/src/os/xous/ffi.rs	/^pub(crate) fn connect(address: ServerAddress) -> Result<Connection, Error> {$/;"	f	signature:(address: ServerAddress) -> Result<Connection, Error>
connect	$RUST/src/os/xous/services.rs	/^pub fn connect(name: &str) -> Option<Connection> {$/;"	f	signature:(name: &str) -> Option<Connection>
connect	$RUST/src/sys/pal/hermit/net.rs	/^    pub fn connect(&self, addr: &SocketAddr) -> io::Result<()> {$/;"	P	implementation:Socket	signature:(&self, addr: &SocketAddr) -> io::Result<()>
connect	$RUST/src/sys/pal/sgx/net.rs	/^    pub fn connect(addr: io::Result<&SocketAddr>) -> io::Result<TcpStream> {$/;"	P	implementation:TcpStream	signature:(addr: io::Result<&SocketAddr>) -> io::Result<TcpStream>
connect	$RUST/src/sys/pal/solid/abi/sockets.rs	/^    pub fn connect(s: c_int, name: *const sockaddr, namelen: socklen_t) -> c_int;$/;"	f	signature:(s: c_int, name: *const sockaddr, namelen: socklen_t) -> c_int
connect	$RUST/src/sys/pal/solid/net.rs	/^    pub fn connect(&self, addr: &SocketAddr) -> io::Result<()> {$/;"	P	implementation:Socket	signature:(&self, addr: &SocketAddr) -> io::Result<()>
connect	$RUST/src/sys/pal/teeos/net.rs	/^    pub fn connect(_: io::Result<&SocketAddr>) -> io::Result<TcpStream> {$/;"	P	implementation:TcpStream	signature:(_: io::Result<&SocketAddr>) -> io::Result<TcpStream>
connect	$RUST/src/sys/pal/unix/l4re.rs	/^        pub fn connect(_: io::Result<&SocketAddr>) -> io::Result<TcpStream> {$/;"	P	implementation:net::TcpStream	signature:(_: io::Result<&SocketAddr>) -> io::Result<TcpStream>
connect	$RUST/src/sys/pal/unix/net.rs	/^    pub fn connect(&self, addr: &SocketAddr) -> io::Result<()> {$/;"	P	implementation:Socket	signature:(&self, addr: &SocketAddr) -> io::Result<()>
connect	$RUST/src/sys/pal/unsupported/net.rs	/^    pub fn connect(_: io::Result<&SocketAddr>) -> io::Result<TcpStream> {$/;"	P	implementation:TcpStream	signature:(_: io::Result<&SocketAddr>) -> io::Result<TcpStream>
connect	$RUST/src/sys/pal/wasi/net.rs	/^    pub fn connect(_: io::Result<&SocketAddr>) -> io::Result<TcpStream> {$/;"	P	implementation:TcpStream	signature:(_: io::Result<&SocketAddr>) -> io::Result<TcpStream>
connect	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn connect(s: SOCKET, name: *const SOCKADDR, namelen: i32) -> i32;$/;"	f	signature:(s: SOCKET, name: *const SOCKADDR, namelen: i32) -> i32
connect	$RUST/src/sys/pal/windows/net.rs	/^    pub fn connect(&self, addr: &SocketAddr) -> io::Result<()> {$/;"	P	implementation:Socket	signature:(&self, addr: &SocketAddr) -> io::Result<()>
connect	$RUST/src/sys/pal/xous/net/tcpstream.rs	/^    pub fn connect(socketaddr: io::Result<&SocketAddr>) -> io::Result<TcpStream> {$/;"	P	implementation:TcpStream	signature:(socketaddr: io::Result<&SocketAddr>) -> io::Result<TcpStream>
connect	$RUST/src/sys/pal/xous/net/udp.rs	/^    pub fn connect(&self, maybe_addr: io::Result<&SocketAddr>) -> io::Result<()> {$/;"	P	implementation:UdpSocket	signature:(&self, maybe_addr: io::Result<&SocketAddr>) -> io::Result<()>
connect	$RUST/src/sys_common/net.rs	/^    pub fn connect(addr: io::Result<&SocketAddr>) -> io::Result<TcpStream> {$/;"	P	implementation:TcpStream	signature:(addr: io::Result<&SocketAddr>) -> io::Result<TcpStream>
connect_addr	$RUST/src/os/unix/net/datagram.rs	/^    pub fn connect_addr(&self, socket_addr: &SocketAddr) -> io::Result<()> {$/;"	P	implementation:UnixDatagram	signature:(&self, socket_addr: &SocketAddr) -> io::Result<()>
connect_addr	$RUST/src/os/unix/net/stream.rs	/^    pub fn connect_addr(socket_addr: &SocketAddr) -> io::Result<UnixStream> {$/;"	P	implementation:UnixStream	signature:(socket_addr: &SocketAddr) -> io::Result<UnixStream>
connect_error	$RUST/src/net/tcp/tests.rs	/^fn connect_error() {$/;"	f	signature:()
connect_impl	$RUST/src/os/xous/ffi.rs	/^fn connect_impl(address: ServerAddress, blocking: bool) -> Result<Connection, Error> {$/;"	f	signature:(address: ServerAddress, blocking: bool) -> Result<Connection, Error>
connect_loopback	$RUST/src/net/tcp/tests.rs	/^fn connect_loopback() {$/;"	f	signature:()
connect_send_peek_recv	$RUST/src/net/udp/tests.rs	/^fn connect_send_peek_recv() {$/;"	f	signature:()
connect_send_recv	$RUST/src/net/udp/tests.rs	/^fn connect_send_recv() {$/;"	f	signature:()
connect_stream	$RUST/src/sys/pal/sgx/abi/usercalls/mod.rs	/^pub fn connect_stream(addr: &str) -> IoResult<(Fd, String, String)> {$/;"	f	signature:(addr: &str) -> IoResult<(Fd, String, String)>
connect_timeout	$RUST/src/net/tcp.rs	/^    pub fn connect_timeout(addr: &SocketAddr, timeout: Duration) -> io::Result<TcpStream> {$/;"	P	implementation:TcpStream	signature:(addr: &SocketAddr, timeout: Duration) -> io::Result<TcpStream>
connect_timeout	$RUST/src/sys/pal/hermit/net.rs	/^    pub fn connect_timeout(&self, addr: &SocketAddr, timeout: Duration) -> io::Result<()> {$/;"	P	implementation:Socket	signature:(&self, addr: &SocketAddr, timeout: Duration) -> io::Result<()>
connect_timeout	$RUST/src/sys/pal/sgx/net.rs	/^    pub fn connect_timeout(addr: &SocketAddr, dur: Duration) -> io::Result<TcpStream> {$/;"	P	implementation:TcpStream	signature:(addr: &SocketAddr, dur: Duration) -> io::Result<TcpStream>
connect_timeout	$RUST/src/sys/pal/solid/net.rs	/^    pub fn connect_timeout(&self, addr: &SocketAddr, timeout: Duration) -> io::Result<()> {$/;"	P	implementation:Socket	signature:(&self, addr: &SocketAddr, timeout: Duration) -> io::Result<()>
connect_timeout	$RUST/src/sys/pal/teeos/net.rs	/^    pub fn connect_timeout(_: &SocketAddr, _: Duration) -> io::Result<TcpStream> {$/;"	P	implementation:TcpStream	signature:(_: &SocketAddr, _: Duration) -> io::Result<TcpStream>
connect_timeout	$RUST/src/sys/pal/unix/l4re.rs	/^        pub fn connect_timeout(_: &SocketAddr, _: Duration) -> io::Result<TcpStream> {$/;"	P	implementation:net::TcpStream	signature:(_: &SocketAddr, _: Duration) -> io::Result<TcpStream>
connect_timeout	$RUST/src/sys/pal/unix/net.rs	/^    pub fn connect_timeout(&self, addr: &SocketAddr, timeout: Duration) -> io::Result<()> {$/;"	P	implementation:Socket	signature:(&self, addr: &SocketAddr, timeout: Duration) -> io::Result<()>
connect_timeout	$RUST/src/sys/pal/unsupported/net.rs	/^    pub fn connect_timeout(_: &SocketAddr, _: Duration) -> io::Result<TcpStream> {$/;"	P	implementation:TcpStream	signature:(_: &SocketAddr, _: Duration) -> io::Result<TcpStream>
connect_timeout	$RUST/src/sys/pal/wasi/net.rs	/^    pub fn connect_timeout(_: &SocketAddr, _: Duration) -> io::Result<TcpStream> {$/;"	P	implementation:TcpStream	signature:(_: &SocketAddr, _: Duration) -> io::Result<TcpStream>
connect_timeout	$RUST/src/sys/pal/windows/net.rs	/^    pub fn connect_timeout(&self, addr: &SocketAddr, timeout: Duration) -> io::Result<()> {$/;"	P	implementation:Socket	signature:(&self, addr: &SocketAddr, timeout: Duration) -> io::Result<()>
connect_timeout	$RUST/src/sys/pal/xous/net/tcpstream.rs	/^    pub fn connect_timeout(addr: &SocketAddr, duration: Duration) -> io::Result<TcpStream> {$/;"	P	implementation:TcpStream	signature:(addr: &SocketAddr, duration: Duration) -> io::Result<TcpStream>
connect_timeout	$RUST/src/sys_common/net.rs	/^    pub fn connect_timeout(addr: &SocketAddr, timeout: Duration) -> io::Result<TcpStream> {$/;"	P	implementation:TcpStream	signature:(addr: &SocketAddr, timeout: Duration) -> io::Result<TcpStream>
connect_timeout_error	$RUST/src/net/tcp/tests.rs	/^fn connect_timeout_error() {$/;"	f	signature:()
connect_timeout_valid	$RUST/src/net/tcp/tests.rs	/^fn connect_timeout_valid() {$/;"	f	signature:()
connect_with_name	$RUST/src/os/xous/services.rs	/^    pub fn connect_with_name(name: &str) -> Option<Connection> {$/;"	f	module:ns	signature:(name: &str) -> Option<Connection>
connect_with_name_impl	$RUST/src/os/xous/services.rs	/^    pub fn connect_with_name_impl(name: &str, blocking: bool) -> Option<Connection> {$/;"	f	module:ns	signature:(name: &str, blocking: bool) -> Option<Connection>
const_cstr_from_bytes	$RUST/src/sys/pal/windows/compat.rs	/^pub(crate) const fn const_cstr_from_bytes(bytes: &'static [u8]) -> &'static CStr {$/;"	f	signature:(bytes: &'static [u8]) -> &'static CStr
const_cursor	$RUST/src/io/cursor/tests.rs	/^fn const_cursor() {$/;"	f	signature:()
const_keyword	$RUST/src/keyword_docs.rs	/^mod const_keyword {}$/;"	n
const_utils	$RUST/src/io/util/tests.rs	/^fn const_utils() {$/;"	f	signature:()
const_with_hasher	$RUST/src/collections/hash/map/tests.rs	/^fn const_with_hasher() {$/;"	f	signature:()
const_with_hasher	$RUST/src/collections/hash/set/tests.rs	/^fn const_with_hasher() {$/;"	f	signature:()
construct_envp	$RUST/src/sys/pal/unix/process/process_common.rs	/^fn construct_envp(env: BTreeMap<OsString, OsString>, saw_nul: &mut bool) -> CStringArray {$/;"	f	signature:(env: BTreeMap<OsString, OsString>, saw_nul: &mut bool) -> CStringArray
consts	$RUST/src/env.rs	/^pub mod consts {$/;"	n
consume	$RUST/src/io/buffered/bufreader.rs	/^    fn consume(&mut self, amt: usize) {$/;"	P	implementation:BufReader	signature:(&mut self, amt: usize)
consume	$RUST/src/io/buffered/bufreader/buffer.rs	/^    pub fn consume(&mut self, amt: usize) {$/;"	P	implementation:Buffer	signature:(&mut self, amt: usize)
consume	$RUST/src/io/buffered/bufwriter.rs	/^            fn consume(&mut self, amt: usize) {$/;"	P	implementation:BufWriter::flush_buf::BufGuard	signature:(&mut self, amt: usize)
consume	$RUST/src/io/cursor.rs	/^    fn consume(&mut self, amt: usize) {$/;"	f	signature:(&mut self, amt: usize)
consume	$RUST/src/io/impls.rs	/^    fn consume(&mut self, amt: usize) {$/;"	P	implementation:u8	signature:(&mut self, amt: usize)
consume	$RUST/src/io/mod.rs	/^    fn consume(&mut self, amt: usize);$/;"	P	interface:BufRead	signature:(&mut self, amt: usize)
consume	$RUST/src/io/stdio.rs	/^    fn consume(&mut self, n: usize) {$/;"	P	implementation:StdinLock	signature:(&mut self, n: usize)
consume	$RUST/src/io/tests.rs	/^        fn consume(&mut self, _amt: usize) {}$/;"	P	implementation:take_eof::R	signature:(&mut self, _amt: usize)
consume	$RUST/src/io/util.rs	/^    fn consume(&mut self, _n: usize) {}$/;"	P	implementation:Empty	signature:(&mut self, _n: usize)
consume_with	$RUST/src/io/buffered/bufreader/buffer.rs	/^    pub fn consume_with<V>(&mut self, amt: usize, mut visitor: V) -> bool$/;"	P	implementation:Buffer	signature:<V>(&mut self, amt: usize, mut visitor: V) -> bool where V: FnMut(&[u8]),
consuming_all	$RUST/src/collections/hash/map/tests.rs	/^    fn consuming_all() {$/;"	f	module:test_extract_if	signature:()
consuming_nothing	$RUST/src/collections/hash/map/tests.rs	/^    fn consuming_nothing() {$/;"	f	module:test_extract_if	signature:()
contains	$RUST/src/collections/hash/set.rs	/^    pub fn contains<Q: ?Sized>(&self, value: &Q) -> bool$/;"	f	signature:<Q: ?Sized>(&self, value: &Q) -> bool where T: Borrow<Q>, Q: Hash + Eq,
contains_key	$RUST/src/collections/hash/map.rs	/^    pub fn contains_key<Q: ?Sized>(&self, k: &Q) -> bool$/;"	f	signature:<Q: ?Sized>(&self, k: &Q) -> bool where K: Borrow<Q>, Q: Hash + Eq,
contended	$RUST/src/sys/pal/xous/locks/mutex.rs	/^    contended: AtomicBool,$/;"	m	struct:Mutex
context	$RUST/src/sync/mpmc/mod.rs	/^mod context;$/;"	n
continue_keyword	$RUST/src/keyword_docs.rs	/^mod continue_keyword {}$/;"	n
continued	$RUST/src/os/unix/process.rs	/^    fn continued(&self) -> bool;$/;"	P	interface:ExitStatusExt	signature:(&self) -> bool
continued	$RUST/src/sys/pal/unix/process/process_fuchsia.rs	/^    pub fn continued(&self) -> bool {$/;"	P	implementation:ExitStatus	signature:(&self) -> bool
continued	$RUST/src/sys/pal/unix/process/process_unix.rs	/^    pub fn continued(&self) -> bool {$/;"	P	implementation:ExitStatus	signature:(&self) -> bool
continued	$RUST/src/sys/pal/unix/process/process_unsupported/wait_status.rs	/^    pub fn continued(&self) -> bool {$/;"	P	implementation:ExitStatus	signature:(&self) -> bool
continued	$RUST/src/sys/pal/unix/process/process_vxworks.rs	/^    pub fn continued(&self) -> bool {$/;"	P	implementation:ExitStatus	signature:(&self) -> bool
cookie	$RUST/src/sys/pal/wasi/fs.rs	/^    cookie: Option<wasi::Dircookie>,$/;"	m	struct:ReadDir
copies_append_mode_sink	$RUST/src/sys/pal/unix/kernel_copy/tests.rs	/^fn copies_append_mode_sink() -> Result<()> {$/;"	f	signature:() -> Result<()>
copy	$RUST/src/fs.rs	/^pub fn copy<P: AsRef<Path>, Q: AsRef<Path>>(from: P, to: Q) -> io::Result<u64> {$/;"	f	signature:<P: AsRef<Path>, Q: AsRef<Path>>(from: P, to: Q) -> io::Result<u64>
copy	$RUST/src/io/copy.rs	/^pub fn copy<R: ?Sized, W: ?Sized>(reader: &mut R, writer: &mut W) -> Result<u64>$/;"	f	signature:<R: ?Sized, W: ?Sized>(reader: &mut R, writer: &mut W) -> Result<u64> where R: Read, W: Write,
copy	$RUST/src/io/mod.rs	/^pub(crate) mod copy;$/;"	n
copy	$RUST/src/sys/pal/unix/fs.rs	/^pub fn copy(from: &Path, to: &Path) -> io::Result<u64> {$/;"	f	signature:(from: &Path, to: &Path) -> io::Result<u64>
copy	$RUST/src/sys/pal/unix/kernel_copy.rs	/^    fn copy(self) -> Result<u64>;$/;"	P	interface:SpecCopy	signature:(self) -> Result<u64>
copy	$RUST/src/sys/pal/unsupported/fs.rs	/^pub fn copy(_from: &Path, _to: &Path) -> io::Result<u64> {$/;"	f	signature:(_from: &Path, _to: &Path) -> io::Result<u64>
copy	$RUST/src/sys/pal/wasi/fs.rs	/^pub fn copy(from: &Path, to: &Path) -> io::Result<u64> {$/;"	f	signature:(from: &Path, to: &Path) -> io::Result<u64>
copy	$RUST/src/sys/pal/windows/fs.rs	/^pub fn copy(from: &Path, to: &Path) -> io::Result<u64> {$/;"	f	signature:(from: &Path, to: &Path) -> io::Result<u64>
copy	$RUST/src/sys_common/fs.rs	/^pub fn copy(from: &Path, to: &Path) -> io::Result<u64> {$/;"	f	signature:(from: &Path, to: &Path) -> io::Result<u64>
copy_copies	$RUST/src/io/copy/tests.rs	/^fn copy_copies() {$/;"	f	signature:()
copy_file_does_not_exist	$RUST/src/fs/tests.rs	/^fn copy_file_does_not_exist() {$/;"	f	signature:()
copy_file_dst_dir	$RUST/src/fs/tests.rs	/^fn copy_file_dst_dir() {$/;"	f	signature:()
copy_file_dst_exists	$RUST/src/fs/tests.rs	/^fn copy_file_dst_exists() {$/;"	f	signature:()
copy_file_follows_dst_symlink	$RUST/src/fs/tests.rs	/^fn copy_file_follows_dst_symlink() {$/;"	f	signature:()
copy_file_ok	$RUST/src/fs/tests.rs	/^fn copy_file_ok() {$/;"	f	signature:()
copy_file_preserves_perm_bits	$RUST/src/fs/tests.rs	/^fn copy_file_preserves_perm_bits() {$/;"	f	signature:()
copy_file_preserves_streams	$RUST/src/fs/tests.rs	/^fn copy_file_preserves_streams() {$/;"	f	signature:()
copy_file_range_candidate	$RUST/src/sys/pal/unix/kernel_copy.rs	/^    fn copy_file_range_candidate(&self, f: FdHandle) -> bool {$/;"	P	implementation:FdMeta	signature:(&self, f: FdHandle) -> bool
copy_file_returns_metadata_len	$RUST/src/fs/tests.rs	/^fn copy_file_returns_metadata_len() {$/;"	f	signature:()
copy_file_src_dir	$RUST/src/fs/tests.rs	/^fn copy_file_src_dir() {$/;"	f	signature:()
copy_from	$RUST/src/io/copy.rs	/^    fn copy_from<R: Read + ?Sized>(&mut self, reader: &mut R) -> Result<u64>;$/;"	P	interface:BufferedWriterSpec	signature:<R: Read + ?Sized>(&mut self, reader: &mut R) -> Result<u64>
copy_from_enclave	$RUST/src/sys/pal/sgx/abi/usercalls/alloc.rs	/^    pub fn copy_from_enclave(&mut self, val: &T) {$/;"	f	signature:(&mut self, val: &T)
copy_from_userspace	$RUST/src/sys/pal/sgx/abi/usercalls/alloc.rs	/^pub(crate) unsafe fn copy_from_userspace(src: *const u8, dst: *mut u8, len: usize) {$/;"	f	signature:(src: *const u8, dst: *mut u8, len: usize)
copy_handle	$RUST/src/sys/pal/windows/fs.rs	/^    fn copy_handle(f: &File) -> mem::ManuallyDrop<File> {$/;"	f	function:remove_dir_all_iterative	signature:(f: &File) -> mem::ManuallyDrop<File>
copy_quadwords	$RUST/src/sys/pal/sgx/abi/usercalls/alloc.rs	/^unsafe fn copy_quadwords(src: *const u8, dst: *mut u8, len: usize) {$/;"	f	signature:(src: *const u8, dst: *mut u8, len: usize)
copy_regular_files	$RUST/src/sys/pal/unix/kernel_copy.rs	/^pub(super) fn copy_regular_files(reader: RawFd, writer: RawFd, max_len: u64) -> CopyResult {$/;"	f	signature:(reader: RawFd, writer: RawFd, max_len: u64) -> CopyResult
copy_spec	$RUST/src/sys/pal/unix/kernel_copy.rs	/^pub(crate) fn copy_spec<R: Read + ?Sized, W: Write + ?Sized>($/;"	f	signature:<R: Read + ?Sized, W: Write + ?Sized>( read: &mut R, write: &mut W, ) -> Result<u64>
copy_specialization	$RUST/src/sys/pal/unix/kernel_copy/tests.rs	/^fn copy_specialization() -> Result<()> {$/;"	f	signature:() -> Result<()>
copy_specializes_bufreader	$RUST/src/io/copy/tests.rs	/^fn copy_specializes_bufreader() {$/;"	f	signature:()
copy_specializes_bufwriter	$RUST/src/io/copy/tests.rs	/^fn copy_specializes_bufwriter() {$/;"	f	signature:()
copy_specializes_from_slice	$RUST/src/io/copy/tests.rs	/^fn copy_specializes_from_slice() {$/;"	f	signature:()
copy_specializes_from_vecdeque	$RUST/src/io/copy/tests.rs	/^fn copy_specializes_from_vecdeque() {$/;"	f	signature:()
copy_specializes_to_vec	$RUST/src/io/copy/tests.rs	/^fn copy_specializes_to_vec() {$/;"	f	signature:()
copy_src_does_not_exist	$RUST/src/fs/tests.rs	/^fn copy_src_does_not_exist() {$/;"	f	signature:()
copy_to	$RUST/src/io/copy.rs	/^    fn copy_to(&mut self, to: &mut (impl Write + ?Sized)) -> Result<u64>;$/;"	P	interface:BufferedReaderSpec	signature:(&mut self, to: &mut (impl Write + ?Sized)) -> Result<u64>
copy_to_enclave	$RUST/src/sys/pal/sgx/abi/usercalls/alloc.rs	/^    pub fn copy_to_enclave(&self, dest: &mut T) {$/;"	f	signature:(&self, dest: &mut T)
copy_to_enclave_vec	$RUST/src/sys/pal/sgx/abi/usercalls/alloc.rs	/^    pub fn copy_to_enclave_vec(&self, dest: &mut Vec<T>) {$/;"	f	signature:(&self, dest: &mut Vec<T>)
copy_to_userspace	$RUST/src/sys/pal/sgx/abi/usercalls/alloc.rs	/^pub(crate) unsafe fn copy_to_userspace(src: *const u8, dst: *mut u8, len: usize) {$/;"	f	signature:(src: *const u8, dst: *mut u8, len: usize)
copy_user_buffer	$RUST/src/sys/pal/sgx/abi/usercalls/alloc.rs	/^    pub fn copy_user_buffer(&self) -> Vec<u8> {$/;"	P	implementation:UserRef	signature:(&self) -> Vec<u8>
copyfile_flags_t	$RUST/src/sys/pal/unix/fs.rs	/^    type copyfile_flags_t = u32;$/;"	t	function:copy
copyfile_state_alloc	$RUST/src/sys/pal/unix/fs.rs	/^        fn copyfile_state_alloc() -> copyfile_state_t;$/;"	f	function:copy	signature:() -> copyfile_state_t
copyfile_state_free	$RUST/src/sys/pal/unix/fs.rs	/^        fn copyfile_state_free(state: copyfile_state_t) -> libc::c_int;$/;"	f	function:copy	signature:(state: copyfile_state_t) -> libc::c_int
copyfile_state_get	$RUST/src/sys/pal/unix/fs.rs	/^        fn copyfile_state_get($/;"	f	function:copy	signature:( state: copyfile_state_t, flag: u32, dst: *mut libc::c_void, ) -> libc::c_int
copyfile_state_t	$RUST/src/sys/pal/unix/fs.rs	/^    type copyfile_state_t = *mut libc::c_void;$/;"	t	function:copy
copysign	$RUST/src/f32.rs	/^    pub fn copysign(self, sign: f32) -> f32 {$/;"	P	implementation:f32	signature:(self, sign: f32) -> f32
copysign	$RUST/src/f64.rs	/^    pub fn copysign(self, sign: f64) -> f64 {$/;"	P	implementation:f64	signature:(self, sign: f64) -> f64
core_dumped	$RUST/src/os/unix/process.rs	/^    fn core_dumped(&self) -> bool;$/;"	P	interface:ExitStatusExt	signature:(&self) -> bool
core_dumped	$RUST/src/sys/pal/unix/process/process_fuchsia.rs	/^    pub fn core_dumped(&self) -> bool {$/;"	P	implementation:ExitStatus	signature:(&self) -> bool
core_dumped	$RUST/src/sys/pal/unix/process/process_unix.rs	/^    pub fn core_dumped(&self) -> bool {$/;"	P	implementation:ExitStatus	signature:(&self) -> bool
core_dumped	$RUST/src/sys/pal/unix/process/process_unsupported/wait_status.rs	/^    pub fn core_dumped(&self) -> bool {$/;"	P	implementation:ExitStatus	signature:(&self) -> bool
core_dumped	$RUST/src/sys/pal/unix/process/process_vxworks.rs	/^    pub fn core_dumped(&self) -> bool {$/;"	P	implementation:ExitStatus	signature:(&self) -> bool
cos	$RUST/src/f32.rs	/^    pub fn cos(self) -> f32 {$/;"	P	implementation:f32	signature:(self) -> f32
cos	$RUST/src/f64.rs	/^    pub fn cos(self) -> f64 {$/;"	P	implementation:f64	signature:(self) -> f64
cosh	$RUST/src/f32.rs	/^    pub fn cosh(self) -> f32 {$/;"	P	implementation:f32	signature:(self) -> f32
cosh	$RUST/src/f64.rs	/^    pub fn cosh(self) -> f64 {$/;"	P	implementation:f64	signature:(self) -> f64
cosh	$RUST/src/sys/cmath/builtins.rs	/^    pub fn cosh(n: f64) -> f64;$/;"	f	signature:(n: f64) -> f64
cosh	$RUST/src/sys/cmath/windows.rs	/^    pub fn cosh(n: c_double) -> c_double;$/;"	f	signature:(n: c_double) -> c_double
coshf	$RUST/src/sys/cmath/builtins.rs	/^    pub fn coshf(n: f32) -> f32;$/;"	f	signature:(n: f32) -> f32
coshf	$RUST/src/sys/cmath/windows.rs	/^    pub unsafe fn coshf(n: c_float) -> c_float {$/;"	f	module:shims	signature:(n: c_float) -> c_float
count	$RUST/src/collections/hash/map.rs	/^    fn count(self) -> usize {$/;"	P	implementation:ValuesMut	signature:(self) -> usize
count	$RUST/src/collections/hash/set.rs	/^    fn count(self) -> usize {$/;"	f	signature:(self) -> usize
count	$RUST/src/sync/barrier.rs	/^    count: usize,$/;"	m	struct:BarrierState
count	$RUST/src/sys/pal/xous/net/dns.rs	/^    count: usize,$/;"	m	struct:LookupHost
count	$RUST/src/sys/pal/zkvm/args.rs	/^    count: usize,$/;"	m	struct:Args
count_is_zero	$RUST/src/panicking.rs	/^    pub fn count_is_zero() -> bool {$/;"	f	module:panic_count	signature:() -> bool
counter	$RUST/src/sync/mpmc/counter.rs	/^    fn counter(&self) -> &Counter<C> {$/;"	P	implementation:Sender	signature:(&self) -> &Counter<C>
counter	$RUST/src/sync/mpmc/mod.rs	/^mod counter;$/;"	n
counter	$RUST/src/sys/pal/xous/locks/condvar.rs	/^    counter: AtomicUsize,$/;"	m	struct:Condvar
crate_keyword	$RUST/src/keyword_docs.rs	/^mod crate_keyword {}$/;"	n
create	$RUST/src/backtrace.rs	/^    fn create(ip: usize) -> Backtrace {$/;"	P	implementation:Backtrace	signature:(ip: usize) -> Backtrace
create	$RUST/src/fs.rs	/^    pub fn create<P: AsRef<Path>>(path: P) -> io::Result<File> {$/;"	P	implementation:File	signature:<P: AsRef<Path>>(path: P) -> io::Result<File>
create	$RUST/src/sys/pal/hermit/fs.rs	/^    pub fn create(&mut self, create: bool) {$/;"	P	implementation:OpenOptions	signature:(&mut self, create: bool)
create	$RUST/src/sys/pal/sgx/abi/tls/mod.rs	/^    pub fn create(dtor: Option<unsafe extern "C" fn(*mut u8)>) -> Key {$/;"	P	implementation:Tls	signature:(dtor: Option<unsafe extern "C" fn(*mut u8)>) -> Key
create	$RUST/src/sys/pal/sgx/thread_local_key.rs	/^pub unsafe fn create(dtor: Option<unsafe extern "C" fn(*mut u8)>) -> Key {$/;"	f	signature:(dtor: Option<unsafe extern "C" fn(*mut u8)>) -> Key
create	$RUST/src/sys/pal/solid/fs.rs	/^    pub fn create(&mut self, create: bool) {$/;"	P	implementation:OpenOptions	signature:(&mut self, create: bool)
create	$RUST/src/sys/pal/solid/thread_local_key.rs	/^pub unsafe fn create(_dtor: Option<unsafe extern "C" fn(*mut u8)>) -> Key {$/;"	f	signature:(_dtor: Option<unsafe extern "C" fn(*mut u8)>) -> Key
create	$RUST/src/sys/pal/unix/fs.rs	/^    pub fn create(&mut self, create: bool) {$/;"	P	implementation:OpenOptions	signature:(&mut self, create: bool)
create	$RUST/src/sys/pal/unix/thread_local_key.rs	/^pub unsafe fn create(dtor: Option<unsafe extern "C" fn(*mut u8)>) -> Key {$/;"	f	signature:(dtor: Option<unsafe extern "C" fn(*mut u8)>) -> Key
create	$RUST/src/sys/pal/unsupported/fs.rs	/^    pub fn create(&mut self, _create: bool) {}$/;"	P	implementation:OpenOptions	signature:(&mut self, _create: bool)
create	$RUST/src/sys/pal/unsupported/thread_local_key.rs	/^pub unsafe fn create(_dtor: Option<unsafe extern "C" fn(*mut u8)>) -> Key {$/;"	f	signature:(_dtor: Option<unsafe extern "C" fn(*mut u8)>) -> Key
create	$RUST/src/sys/pal/wasi/fs.rs	/^    pub fn create(&mut self, create: bool) {$/;"	P	implementation:OpenOptions	signature:(&mut self, create: bool)
create	$RUST/src/sys/pal/windows/fs.rs	/^    pub fn create(&mut self, create: bool) {$/;"	P	implementation:OpenOptions	signature:(&mut self, create: bool)
create	$RUST/src/sys/pal/xous/thread_local_key.rs	/^pub unsafe fn create(dtor: Option<Dtor>) -> Key {$/;"	f	signature:(dtor: Option<Dtor>) -> Key
create	$RUST/src/sys/pal/zkvm/thread_local_key.rs	/^pub unsafe fn create(_dtor: Option<unsafe extern "C" fn(*mut u8)>) -> Key {$/;"	f	signature:(_dtor: Option<unsafe extern "C" fn(*mut u8)>) -> Key
create_dir	$RUST/src/fs.rs	/^pub fn create_dir<P: AsRef<Path>>(path: P) -> io::Result<()> {$/;"	f	signature:<P: AsRef<Path>>(path: P) -> io::Result<()>
create_dir_all	$RUST/src/fs.rs	/^pub fn create_dir_all<P: AsRef<Path>>(path: P) -> io::Result<()> {$/;"	f	signature:<P: AsRef<Path>>(path: P) -> io::Result<()>
create_dir_all_with_junctions	$RUST/src/fs/tests.rs	/^fn create_dir_all_with_junctions() {$/;"	f	signature:()
create_dir_long_paths	$RUST/src/fs/tests.rs	/^fn create_dir_long_paths() {$/;"	f	signature:()
create_directory	$RUST/src/os/wasi/fs.rs	/^    fn create_directory<P: AsRef<Path>>(&self, dir: P) -> io::Result<()>;$/;"	P	interface:FileExt	signature:<P: AsRef<Path>>(&self, dir: P) -> io::Result<()>
create_directory	$RUST/src/sys/pal/wasi/fd.rs	/^    pub fn create_directory(&self, path: &str) -> io::Result<()> {$/;"	P	implementation:WasiFd	signature:(&self, path: &str) -> io::Result<()>
create_env_store	$RUST/src/sys/pal/sgx/os.rs	/^fn create_env_store() -> &'static EnvStore {$/;"	f	signature:() -> &'static EnvStore
create_event	$RUST/src/sys/pal/uefi/helpers.rs	/^pub(crate) fn create_event($/;"	f	signature:( signal: u32, tpl: efi::Tpl, handler: Option<efi::EventNotify>, context: *mut crate::ffi::c_void, ) -> io::Result<NonNull<crate::ffi::c_void>>
create_new	$RUST/src/fs.rs	/^    pub fn create_new<P: AsRef<Path>>(path: P) -> io::Result<File> {$/;"	P	implementation:File	signature:<P: AsRef<Path>>(path: P) -> io::Result<File>
create_new	$RUST/src/sys/pal/hermit/fs.rs	/^    pub fn create_new(&mut self, create_new: bool) {$/;"	P	implementation:OpenOptions	signature:(&mut self, create_new: bool)
create_new	$RUST/src/sys/pal/solid/fs.rs	/^    pub fn create_new(&mut self, create_new: bool) {$/;"	P	implementation:OpenOptions	signature:(&mut self, create_new: bool)
create_new	$RUST/src/sys/pal/unix/fs.rs	/^    pub fn create_new(&mut self, create_new: bool) {$/;"	P	implementation:OpenOptions	signature:(&mut self, create_new: bool)
create_new	$RUST/src/sys/pal/unsupported/fs.rs	/^    pub fn create_new(&mut self, _create_new: bool) {}$/;"	P	implementation:OpenOptions	signature:(&mut self, _create_new: bool)
create_new	$RUST/src/sys/pal/wasi/fs.rs	/^    pub fn create_new(&mut self, create_new: bool) {$/;"	P	implementation:OpenOptions	signature:(&mut self, create_new: bool)
create_new	$RUST/src/sys/pal/windows/fs.rs	/^    pub fn create_new(&mut self, create_new: bool) {$/;"	P	implementation:OpenOptions	signature:(&mut self, create_new: bool)
create_pidfd	$RUST/src/os/linux/process.rs	/^    fn create_pidfd(&mut self, val: bool) -> &mut process::Command;$/;"	P	interface:CommandExt	signature:(&mut self, val: bool) -> &mut process::Command
create_pidfd	$RUST/src/sys/pal/unix/process/process_common.rs	/^    pub fn create_pidfd(&mut self, val: bool) {$/;"	P	implementation:Command	signature:(&mut self, val: bool)
create_thread	$RUST/src/os/xous/ffi.rs	/^pub(crate) fn create_thread($/;"	f	signature:( start: *mut usize, stack: *mut [u8], arg0: usize, arg1: usize, arg2: usize, arg3: usize, ) -> Result<ThreadId, Error>
created	$RUST/src/fs.rs	/^    pub fn created(&self) -> io::Result<SystemTime> {$/;"	P	implementation:Metadata	signature:(&self) -> io::Result<SystemTime>
created	$RUST/src/sys/pal/hermit/fs.rs	/^    pub fn created(&self) -> io::Result<SystemTime> {$/;"	P	implementation:FileAttr	signature:(&self) -> io::Result<SystemTime>
created	$RUST/src/sys/pal/solid/fs.rs	/^    pub fn created(&self) -> io::Result<SystemTime> {$/;"	P	implementation:FileAttr	signature:(&self) -> io::Result<SystemTime>
created	$RUST/src/sys/pal/unix/fs.rs	/^    pub fn created(&self) -> io::Result<SystemTime> {$/;"	P	implementation:FileAttr	signature:(&self) -> io::Result<SystemTime>
created	$RUST/src/sys/pal/unsupported/fs.rs	/^    pub fn created(&self) -> io::Result<SystemTime> {$/;"	P	implementation:FileAttr	signature:(&self) -> io::Result<SystemTime>
created	$RUST/src/sys/pal/wasi/fs.rs	/^    pub fn created(&self) -> io::Result<SystemTime> {$/;"	P	implementation:FileAttr	signature:(&self) -> io::Result<SystemTime>
created	$RUST/src/sys/pal/windows/fs.rs	/^    pub fn created(&self) -> io::Result<SystemTime> {$/;"	P	implementation:FileAttr	signature:(&self) -> io::Result<SystemTime>
created_u64	$RUST/src/sys/pal/windows/fs.rs	/^    pub fn created_u64(&self) -> u64 {$/;"	P	implementation:FileAttr	signature:(&self) -> u64
creation_flags	$RUST/src/os/windows/process.rs	/^    fn creation_flags(&mut self, flags: u32) -> &mut process::Command;$/;"	P	interface:CommandExt	signature:(&mut self, flags: u32) -> &mut process::Command
creation_flags	$RUST/src/sys/pal/windows/process.rs	/^    pub fn creation_flags(&mut self, flags: u32) {$/;"	P	implementation:Command	signature:(&mut self, flags: u32)
creation_time	$RUST/src/os/windows/fs.rs	/^    fn creation_time(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
creation_time	$RUST/src/sys/pal/windows/fs.rs	/^    creation_time: c::FILETIME,$/;"	m	struct:FileAttr
cstr	$RUST/src/sys/pal/solid/fs.rs	/^fn cstr(path: &Path) -> io::Result<CString> {$/;"	f	signature:(path: &Path) -> io::Result<CString>
ctim	$RUST/src/os/wasi/fs.rs	/^    fn ctim(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
ctime	$RUST/src/os/unix/fs.rs	/^    fn ctime(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
ctime_nsec	$RUST/src/os/unix/fs.rs	/^    fn ctime_nsec(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
cur	$RUST/src/sys/pal/unix/l4re.rs	/^        cur: *mut libc::addrinfo,$/;"	m	struct:net::LookupHost
cur	$RUST/src/sys_common/net.rs	/^    cur: *mut c::addrinfo,$/;"	m	struct:LookupHost
current	$RUST/src/os/unix/net/ancillary.rs	/^    current: Option<&'a libc::cmsghdr>,$/;"	m	struct:Messages
current	$RUST/src/sys/pal/hermit/thread.rs	/^    pub unsafe fn current() -> Option<Guard> {$/;"	f	module:guard	signature:() -> Option<Guard>
current	$RUST/src/sys/pal/itron/thread.rs	/^    pub unsafe fn current() -> Option<Guard> {$/;"	f	module:guard	signature:() -> Option<Guard>
current	$RUST/src/sys/pal/sgx/abi/thread.rs	/^pub fn current() -> Tcs {$/;"	f	signature:() -> Tcs
current	$RUST/src/sys/pal/sgx/abi/tls/mod.rs	/^    unsafe fn current<'a>() -> &'a Tls {$/;"	P	implementation:Tls	signature:<'a>() -> &'a Tls
current	$RUST/src/sys/pal/sgx/thread.rs	/^    pub unsafe fn current() -> Option<Guard> {$/;"	f	module:guard	signature:() -> Option<Guard>
current	$RUST/src/sys/pal/teeos/thread.rs	/^    pub unsafe fn current() -> Option<Guard> {$/;"	f	module:guard	signature:() -> Option<Guard>
current	$RUST/src/sys/pal/unix/thread.rs	/^    pub unsafe fn current() -> Option<Guard> {$/;"	f	module:guard	signature:() -> Option<Guard>
current	$RUST/src/sys/pal/unix/thread_parking/netbsd.rs	/^pub fn current() -> ThreadId {$/;"	f	signature:() -> ThreadId
current	$RUST/src/sys/pal/unsupported/thread.rs	/^    pub unsafe fn current() -> Option<Guard> {$/;"	f	module:guard	signature:() -> Option<Guard>
current	$RUST/src/sys/pal/wasi/thread.rs	/^    pub unsafe fn current() -> Option<Guard> {$/;"	f	module:guard	signature:() -> Option<Guard>
current	$RUST/src/sys/pal/wasm/atomics/thread.rs	/^    pub unsafe fn current() -> Option<Guard> {$/;"	f	module:guard	signature:() -> Option<Guard>
current	$RUST/src/sys/pal/windows/thread.rs	/^    pub unsafe fn current() -> Option<Guard> {$/;"	f	module:guard	signature:() -> Option<Guard>
current	$RUST/src/sys/pal/xous/thread.rs	/^    pub unsafe fn current() -> Option<Guard> {$/;"	f	module:guard	signature:() -> Option<Guard>
current	$RUST/src/thread/mod.rs	/^pub fn current() -> Thread {$/;"	f	signature:() -> Thread
current_dir	$RUST/src/env.rs	/^pub fn current_dir() -> io::Result<PathBuf> {$/;"	f	signature:() -> io::Result<PathBuf>
current_dir	$RUST/src/process.rs	/^    pub fn current_dir<P: AsRef<Path>>(&mut self, dir: P) -> &mut Command {$/;"	P	implementation:Command	signature:<P: AsRef<Path>>(&mut self, dir: P) -> &mut Command
current_exe	$RUST/src/env.rs	/^pub fn current_exe() -> io::Result<PathBuf> {$/;"	f	signature:() -> io::Result<PathBuf>
current_exe	$RUST/src/sys/pal/hermit/os.rs	/^pub fn current_exe() -> io::Result<PathBuf> {$/;"	f	signature:() -> io::Result<PathBuf>
current_exe	$RUST/src/sys/pal/sgx/os.rs	/^pub fn current_exe() -> io::Result<PathBuf> {$/;"	f	signature:() -> io::Result<PathBuf>
current_exe	$RUST/src/sys/pal/solid/os.rs	/^pub fn current_exe() -> io::Result<PathBuf> {$/;"	f	signature:() -> io::Result<PathBuf>
current_exe	$RUST/src/sys/pal/teeos/os.rs	/^pub fn current_exe() -> io::Result<PathBuf> {$/;"	f	signature:() -> io::Result<PathBuf>
current_exe	$RUST/src/sys/pal/uefi/os.rs	/^pub fn current_exe() -> io::Result<PathBuf> {$/;"	f	signature:() -> io::Result<PathBuf>
current_exe	$RUST/src/sys/pal/unix/os.rs	/^pub fn current_exe() -> io::Result<PathBuf> {$/;"	f	signature:() -> io::Result<PathBuf>
current_exe	$RUST/src/sys/pal/unsupported/os.rs	/^pub fn current_exe() -> io::Result<PathBuf> {$/;"	f	signature:() -> io::Result<PathBuf>
current_exe	$RUST/src/sys/pal/wasi/os.rs	/^pub fn current_exe() -> io::Result<PathBuf> {$/;"	f	signature:() -> io::Result<PathBuf>
current_exe	$RUST/src/sys/pal/windows/os.rs	/^pub fn current_exe() -> io::Result<PathBuf> {$/;"	f	signature:() -> io::Result<PathBuf>
current_exe	$RUST/src/sys/pal/xous/os.rs	/^pub fn current_exe() -> io::Result<PathBuf> {$/;"	f	signature:() -> io::Result<PathBuf>
current_exe	$RUST/src/sys/pal/zkvm/os.rs	/^pub fn current_exe() -> io::Result<PathBuf> {$/;"	f	signature:() -> io::Result<PathBuf>
current_task_id	$RUST/src/sys/pal/itron/task.rs	/^pub fn current_task_id() -> abi::ID {$/;"	f	signature:() -> abi::ID
current_task_id_aborting	$RUST/src/sys/pal/itron/task.rs	/^pub fn current_task_id_aborting() -> abi::ID {$/;"	f	signature:() -> abi::ID
current_thread	$RUST/src/sys_common/thread_info.rs	/^pub fn current_thread() -> Option<Thread> {$/;"	f	signature:() -> Option<Thread>
current_thread_id	$RUST/src/sync/mpmc/waker.rs	/^pub fn current_thread_id() -> usize {$/;"	f	signature:() -> usize
current_thread_unique_ptr	$RUST/src/sync/remutex.rs	/^pub fn current_thread_unique_ptr() -> usize {$/;"	f	signature:() -> usize
current_time	$RUST/src/sys/pal/wasi/time.rs	/^fn current_time(clock: wasi::Clockid) -> Duration {$/;"	f	signature:(clock: wasi::Clockid) -> Duration
cursor	$RUST/src/io/mod.rs	/^mod cursor;$/;"	n
cursor	$RUST/src/sys/pal/windows/fs.rs	/^    cursor: usize,$/;"	m	struct:DirBuffIter
custom_flags	$RUST/src/os/unix/fs.rs	/^    fn custom_flags(&mut self, flags: i32) -> &mut Self;$/;"	P	interface:OpenOptionsExt	signature:(&mut self, flags: i32) -> &mut Self
custom_flags	$RUST/src/os/windows/fs.rs	/^    fn custom_flags(&mut self, flags: u32) -> &mut Self;$/;"	P	interface:OpenOptionsExt	signature:(&mut self, flags: u32) -> &mut Self
custom_flags	$RUST/src/sys/pal/solid/fs.rs	/^    pub fn custom_flags(&mut self, flags: i32) {$/;"	P	implementation:OpenOptions	signature:(&mut self, flags: i32)
custom_flags	$RUST/src/sys/pal/unix/fs.rs	/^    pub fn custom_flags(&mut self, flags: i32) {$/;"	P	implementation:OpenOptions	signature:(&mut self, flags: i32)
custom_flags	$RUST/src/sys/pal/windows/fs.rs	/^    pub fn custom_flags(&mut self, flags: u32) {$/;"	P	implementation:OpenOptions	signature:(&mut self, flags: u32)
cvar	$RUST/src/sync/barrier.rs	/^    cvar: Condvar,$/;"	m	struct:Barrier
cvar	$RUST/src/sys/pal/unix/thread_parking/pthread.rs	/^    cvar: UnsafeCell<libc::pthread_cond_t>,$/;"	m	struct:Parker
cvt	$RUST/src/sys/pal/hermit/mod.rs	/^pub fn cvt<T: IsNegative>(t: T) -> crate::io::Result<T> {$/;"	f	signature:<T: IsNegative>(t: T) -> crate::io::Result<T>
cvt	$RUST/src/sys/pal/solid/net.rs	/^pub fn cvt<T: IsMinusOne>(t: T) -> io::Result<T> {$/;"	f	signature:<T: IsMinusOne>(t: T) -> io::Result<T>
cvt	$RUST/src/sys/pal/teeos/mod.rs	/^pub fn cvt<T: IsMinusOne>(t: T) -> crate::io::Result<T> {$/;"	f	signature:<T: IsMinusOne>(t: T) -> crate::io::Result<T>
cvt	$RUST/src/sys/pal/unix/mod.rs	/^pub fn cvt<T: IsMinusOne>(t: T) -> crate::io::Result<T> {$/;"	f	signature:<T: IsMinusOne>(t: T) -> crate::io::Result<T>
cvt	$RUST/src/sys/pal/wasi/os.rs	/^fn cvt<T: IsMinusOne>(t: T) -> io::Result<T> {$/;"	f	signature:<T: IsMinusOne>(t: T) -> io::Result<T>
cvt	$RUST/src/sys/pal/windows/mod.rs	/^pub fn cvt<I: IsZero>(i: I) -> crate::io::Result<I> {$/;"	f	signature:<I: IsZero>(i: I) -> crate::io::Result<I>
cvt	$RUST/src/sys/pal/windows/net.rs	/^pub fn cvt<T: IsMinusOne>(t: T) -> io::Result<T> {$/;"	f	signature:<T: IsMinusOne>(t: T) -> io::Result<T>
cvt_env	$RUST/src/sys/pal/solid/os.rs	/^fn cvt_env(t: c_int) -> io::Result<c_int> {$/;"	f	signature:(t: c_int) -> io::Result<c_int>
cvt_gai	$RUST/src/sys/pal/hermit/net.rs	/^pub fn cvt_gai(err: i32) -> io::Result<()> {$/;"	f	signature:(err: i32) -> io::Result<()>
cvt_gai	$RUST/src/sys/pal/solid/net.rs	/^pub fn cvt_gai(err: c_int) -> io::Result<()> {$/;"	f	signature:(err: c_int) -> io::Result<()>
cvt_gai	$RUST/src/sys/pal/unix/net.rs	/^pub fn cvt_gai(err: c_int) -> io::Result<()> {$/;"	f	signature:(err: c_int) -> io::Result<()>
cvt_gai	$RUST/src/sys/pal/windows/net.rs	/^pub fn cvt_gai(err: c_int) -> io::Result<()> {$/;"	f	signature:(err: c_int) -> io::Result<()>
cvt_nz	$RUST/src/sys/pal/teeos/mod.rs	/^pub fn cvt_nz(error: libc::c_int) -> crate::io::Result<()> {$/;"	f	signature:(error: libc::c_int) -> crate::io::Result<()>
cvt_nz	$RUST/src/sys/pal/unix/mod.rs	/^pub fn cvt_nz(error: libc::c_int) -> crate::io::Result<()> {$/;"	f	signature:(error: libc::c_int) -> crate::io::Result<()>
cvt_r	$RUST/src/sys/pal/hermit/mod.rs	/^pub fn cvt_r<T, F>(mut f: F) -> crate::io::Result<T>$/;"	f	signature:<T, F>(mut f: F) -> crate::io::Result<T> where T: IsNegative, F: FnMut() -> T,
cvt_r	$RUST/src/sys/pal/solid/net.rs	/^pub fn cvt_r<T, F>(mut f: F) -> io::Result<T>$/;"	f	signature:<T, F>(mut f: F) -> io::Result<T> where T: IsMinusOne, F: FnMut() -> T,
cvt_r	$RUST/src/sys/pal/teeos/mod.rs	/^pub fn cvt_r<T, F>(mut f: F) -> crate::io::Result<T>$/;"	f	signature:<T, F>(mut f: F) -> crate::io::Result<T> where T: IsMinusOne, F: FnMut() -> T,
cvt_r	$RUST/src/sys/pal/unix/mod.rs	/^pub fn cvt_r<T, F>(mut f: F) -> crate::io::Result<T>$/;"	f	signature:<T, F>(mut f: F) -> crate::io::Result<T> where T: IsMinusOne, F: FnMut() -> T,
cvt_r	$RUST/src/sys/pal/windows/net.rs	/^pub fn cvt_r<T, F>(mut f: F) -> io::Result<T>$/;"	f	signature:<T, F>(mut f: F) -> io::Result<T> where T: IsMinusOne, F: FnMut() -> T,
cwd	$RUST/src/sys/pal/unix/process/process_common.rs	/^    pub fn cwd(&mut self, dir: &OsStr) {$/;"	P	implementation:Command	signature:(&mut self, dir: &OsStr)
cwd	$RUST/src/sys/pal/unsupported/process.rs	/^    pub fn cwd(&mut self, _dir: &OsStr) {}$/;"	P	implementation:Command	signature:(&mut self, _dir: &OsStr)
cwd	$RUST/src/sys/pal/windows/process.rs	/^    pub fn cwd(&mut self, dir: &OsStr) {$/;"	P	implementation:Command	signature:(&mut self, dir: &OsStr)
d_ino	$RUST/src/sys/pal/solid/abi/fs.rs	/^    pub d_ino: ino_t,$/;"	m	struct:dirent
d_ino	$RUST/src/sys/pal/unix/fs.rs	/^    d_ino: u64,$/;"	m	struct:dirent64_min
d_name	$RUST/src/sys/pal/solid/abi/fs.rs	/^    pub d_name: [c_char; 256usize],$/;"	m	struct:dirent
d_type	$RUST/src/sys/pal/solid/abi/fs.rs	/^    pub d_type: c_uchar,$/;"	m	struct:dirent
d_type	$RUST/src/sys/pal/unix/fs.rs	/^    d_type: u8,$/;"	m	struct:dirent64_min
data	$RUST/src/io/error/repr_bitpacked.rs	/^    pub(super) fn data(&self) -> ErrorData<&Custom> {$/;"	P	implementation:Repr	signature:(&self) -> ErrorData<&Custom>
data	$RUST/src/io/error/repr_unpacked.rs	/^    pub(super) fn data(&self) -> ErrorData<&Custom> {$/;"	P	implementation:Repr	signature:(&self) -> ErrorData<&Custom>
data	$RUST/src/os/unix/net/ancillary.rs	/^    data: &'a [u8],$/;"	m	struct:AncillaryDataIter
data	$RUST/src/os/xous/services.rs	/^        data: [u8; 4096],$/;"	m	struct:ns::ConnectRequest
data	$RUST/src/sync/lazy_lock.rs	/^    data: UnsafeCell<Data<T, F>>,$/;"	m	struct:LazyLock
data	$RUST/src/sync/mutex.rs	/^    data: UnsafeCell<T>,$/;"	m	struct:Mutex
data	$RUST/src/sync/remutex.rs	/^    data: T,$/;"	m	struct:ReentrantMutex
data	$RUST/src/sync/rwlock.rs	/^    data: UnsafeCell<T>,$/;"	m	struct:RwLock
data	$RUST/src/sys/pal/itron/spin.rs	/^    data: UnsafeCell<T>,$/;"	m	struct:SpinMutex
data	$RUST/src/sys/pal/sgx/abi/tls/mod.rs	/^    data: [Cell<*mut u8>; TLS_KEYS],$/;"	m	struct:Tls
data	$RUST/src/sys/pal/unix/stack_overflow.rs	/^    data: *mut libc::c_void,$/;"	m	struct:Handler
data	$RUST/src/sys/pal/windows/fs.rs	/^    data: c::WIN32_FIND_DATAW,$/;"	m	struct:DirEntry
data	$RUST/src/sys/pal/windows/os.rs	/^    data: EncodeWide<'a>,$/;"	m	struct:SplitPaths
data	$RUST/src/sys/pal/windows/process.rs	/^    data: Box<dyn Send + Sync>,$/;"	m	struct:ProcThreadAttributeValue
data	$RUST/src/sys/pal/xous/net/dns.rs	/^    data: LookupHostQuery,$/;"	m	struct:LookupHost
data	$RUST/src/thread/scoped.rs	/^    data: Arc<ScopeData>,$/;"	m	struct:Scope
data1	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub data1: u32,$/;"	m	struct:GUID
data2	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub data2: u16,$/;"	m	struct:GUID
data3	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub data3: u16,$/;"	m	struct:GUID
data4	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub data4: [u8; 8],$/;"	m	struct:GUID
data_mut	$RUST/src/io/error/repr_bitpacked.rs	/^    pub(super) fn data_mut(&mut self) -> ErrorData<&mut Custom> {$/;"	P	implementation:Repr	signature:(&mut self) -> ErrorData<&mut Custom>
data_mut	$RUST/src/io/error/repr_unpacked.rs	/^    pub(super) fn data_mut(&mut self) -> ErrorData<&mut Custom> {$/;"	P	implementation:Repr	signature:(&mut self) -> ErrorData<&mut Custom>
datagram	$RUST/src/os/unix/net/mod.rs	/^mod datagram;$/;"	n
datagram_pair	$RUST/src/os/unix/net/tests.rs	/^fn datagram_pair() {$/;"	f	signature:()
datasync	$RUST/src/sys/pal/hermit/fs.rs	/^    pub fn datasync(&self) -> io::Result<()> {$/;"	P	implementation:File	signature:(&self) -> io::Result<()>
datasync	$RUST/src/sys/pal/unix/fs.rs	/^    pub fn datasync(&self) -> io::Result<()> {$/;"	P	implementation:File	signature:(&self) -> io::Result<()>
datasync	$RUST/src/sys/pal/unsupported/fs.rs	/^    pub fn datasync(&self) -> io::Result<()> {$/;"	P	implementation:File	signature:(&self) -> io::Result<()>
datasync	$RUST/src/sys/pal/wasi/fd.rs	/^    pub fn datasync(&self) -> io::Result<()> {$/;"	P	implementation:WasiFd	signature:(&self) -> io::Result<()>
datasync	$RUST/src/sys/pal/wasi/fs.rs	/^    pub fn datasync(&self) -> io::Result<()> {$/;"	P	implementation:File	signature:(&self) -> io::Result<()>
datasync	$RUST/src/sys/pal/windows/fs.rs	/^    pub fn datasync(&self) -> io::Result<()> {$/;"	P	implementation:File	signature:(&self) -> io::Result<()>
dbg	$RUST/src/macros.rs	/^macro_rules! dbg {$/;"	M
dealloc	$RUST/src/sys/pal/hermit/alloc.rs	/^    unsafe fn dealloc(&self, ptr: *mut u8, layout: Layout) {$/;"	P	implementation:System	signature:(&self, ptr: *mut u8, layout: Layout)
dealloc	$RUST/src/sys/pal/sgx/alloc.rs	/^    unsafe fn dealloc(&self, ptr: *mut u8, layout: Layout) {$/;"	P	implementation:System	signature:(&self, ptr: *mut u8, layout: Layout)
dealloc	$RUST/src/sys/pal/solid/alloc.rs	/^    unsafe fn dealloc(&self, ptr: *mut u8, _layout: Layout) {$/;"	P	implementation:System	signature:(&self, ptr: *mut u8, _layout: Layout)
dealloc	$RUST/src/sys/pal/teeos/alloc.rs	/^    unsafe fn dealloc(&self, ptr: *mut u8, _layout: Layout) {$/;"	P	implementation:System	signature:(&self, ptr: *mut u8, _layout: Layout)
dealloc	$RUST/src/sys/pal/uefi/alloc.rs	/^    unsafe fn dealloc(&self, ptr: *mut u8, layout: Layout) {$/;"	P	implementation:System	signature:(&self, ptr: *mut u8, layout: Layout)
dealloc	$RUST/src/sys/pal/unix/alloc.rs	/^    unsafe fn dealloc(&self, ptr: *mut u8, _layout: Layout) {$/;"	P	implementation:System	signature:(&self, ptr: *mut u8, _layout: Layout)
dealloc	$RUST/src/sys/pal/unsupported/alloc.rs	/^    unsafe fn dealloc(&self, _ptr: *mut u8, _layout: Layout) {}$/;"	P	implementation:System	signature:(&self, _ptr: *mut u8, _layout: Layout)
dealloc	$RUST/src/sys/pal/wasm/alloc.rs	/^    unsafe fn dealloc(&self, ptr: *mut u8, layout: Layout) {$/;"	P	implementation:System	signature:(&self, ptr: *mut u8, layout: Layout)
dealloc	$RUST/src/sys/pal/windows/alloc.rs	/^    unsafe fn dealloc(&self, ptr: *mut u8, layout: Layout) {$/;"	P	implementation:System	signature:(&self, ptr: *mut u8, layout: Layout)
dealloc	$RUST/src/sys/pal/xous/alloc.rs	/^    unsafe fn dealloc(&self, ptr: *mut u8, layout: Layout) {$/;"	P	implementation:System	signature:(&self, ptr: *mut u8, layout: Layout)
dealloc	$RUST/src/sys/pal/zkvm/alloc.rs	/^    unsafe fn dealloc(&self, _ptr: *mut u8, _layout: Layout) {$/;"	P	implementation:System	signature:(&self, _ptr: *mut u8, _layout: Layout)
deallocate	$RUST/src/alloc.rs	/^    unsafe fn deallocate(&self, ptr: NonNull<u8>, layout: Layout) {$/;"	P	implementation:System	signature:(&self, ptr: NonNull<u8>, layout: Layout)
debug	$RUST/src/net/tcp/tests.rs	/^fn debug() {$/;"	f	signature:()
debug	$RUST/src/net/udp/tests.rs	/^fn debug() {$/;"	f	signature:()
debug_call	$RUST/src/sys/pal/teeos/stdio.rs	/^unsafe fn debug_call(cap_ref: u64, call_no: i64, arg1: u64, arg2: u64) -> i32 {$/;"	f	signature:(cap_ref: u64, call_no: i64, arg1: u64, arg2: u64) -> i32
debug_print	$RUST/src/process/tests.rs	/^fn debug_print() {$/;"	f	signature:()
decode_error_kind	$RUST/src/sys/pal/hermit/mod.rs	/^pub fn decode_error_kind(errno: i32) -> ErrorKind {$/;"	f	signature:(errno: i32) -> ErrorKind
decode_error_kind	$RUST/src/sys/pal/itron/error.rs	/^pub fn decode_error_kind(er: abi::ER) -> ErrorKind {$/;"	f	signature:(er: abi::ER) -> ErrorKind
decode_error_kind	$RUST/src/sys/pal/sgx/mod.rs	/^pub fn decode_error_kind(code: i32) -> ErrorKind {$/;"	f	signature:(code: i32) -> ErrorKind
decode_error_kind	$RUST/src/sys/pal/solid/error.rs	/^pub fn decode_error_kind(er: abi::ER) -> ErrorKind {$/;"	f	signature:(er: abi::ER) -> ErrorKind
decode_error_kind	$RUST/src/sys/pal/solid/mod.rs	/^pub fn decode_error_kind(code: i32) -> crate::io::ErrorKind {$/;"	f	signature:(code: i32) -> crate::io::ErrorKind
decode_error_kind	$RUST/src/sys/pal/solid/net.rs	/^pub(super) fn decode_error_kind(er: abi::ER) -> ErrorKind {$/;"	f	signature:(er: abi::ER) -> ErrorKind
decode_error_kind	$RUST/src/sys/pal/teeos/mod.rs	/^pub fn decode_error_kind(errno: i32) -> ErrorKind {$/;"	f	signature:(errno: i32) -> ErrorKind
decode_error_kind	$RUST/src/sys/pal/uefi/mod.rs	/^pub fn decode_error_kind(code: RawOsError) -> crate::io::ErrorKind {$/;"	f	signature:(code: RawOsError) -> crate::io::ErrorKind
decode_error_kind	$RUST/src/sys/pal/unix/mod.rs	/^pub fn decode_error_kind(errno: i32) -> ErrorKind {$/;"	f	signature:(errno: i32) -> ErrorKind
decode_error_kind	$RUST/src/sys/pal/unsupported/common.rs	/^pub fn decode_error_kind(_code: i32) -> crate::io::ErrorKind {$/;"	f	signature:(_code: i32) -> crate::io::ErrorKind
decode_error_kind	$RUST/src/sys/pal/wasi/mod.rs	/^pub fn decode_error_kind(errno: i32) -> std_io::ErrorKind {$/;"	f	signature:(errno: i32) -> std_io::ErrorKind
decode_error_kind	$RUST/src/sys/pal/windows/mod.rs	/^pub fn decode_error_kind(errno: i32) -> ErrorKind {$/;"	f	signature:(errno: i32) -> ErrorKind
decode_error_kind	$RUST/src/sys/pal/zkvm/mod.rs	/^pub fn decode_error_kind(_code: i32) -> crate::io::ErrorKind {$/;"	f	signature:(_code: i32) -> crate::io::ErrorKind
decode_repr	$RUST/src/io/error/repr_bitpacked.rs	/^unsafe fn decode_repr<C, F>(ptr: NonNull<()>, make_custom: F) -> ErrorData<C>$/;"	f	signature:<C, F>(ptr: NonNull<()>, make_custom: F) -> ErrorData<C> where F: FnOnce(*mut Custom) -> C,
decode_surrogate	$RUST/src/sys_common/wtf8.rs	/^fn decode_surrogate(second_byte: u8, third_byte: u8) -> u16 {$/;"	f	signature:(second_byte: u8, third_byte: u8) -> u16
decode_surrogate_pair	$RUST/src/sys_common/wtf8.rs	/^fn decode_surrogate_pair(lead: u16, trail: u16) -> char {$/;"	f	signature:(lead: u16, trail: u16) -> char
decrease	$RUST/src/panicking.rs	/^    pub fn decrease() {}$/;"	f	module:panic_count	signature:()
decrement_num_running_threads	$RUST/src/thread/scoped.rs	/^    pub(super) fn decrement_num_running_threads(&self, panic: bool) {$/;"	P	implementation:ScopeData	signature:(&self, panic: bool)
default	$RUST/src/collections/hash/map.rs	/^    fn default() -> HashMap<K, V, S> {$/;"	f	signature:() -> HashMap<K, V, S>
default	$RUST/src/collections/hash/set.rs	/^    fn default() -> HashSet<T, S> {$/;"	f	signature:() -> HashSet<T, S>
default	$RUST/src/ffi/os_str.rs	/^    fn default() -> Self {$/;"	P	implementation:OsStr	signature:() -> Self
default	$RUST/src/hash/random.rs	/^    fn default() -> RandomState {$/;"	P	implementation:RandomState	signature:() -> RandomState
default	$RUST/src/panicking.rs	/^    fn default() -> Hook {$/;"	P	implementation:Hook	signature:() -> Hook
default	$RUST/src/path.rs	/^    fn default() -> Self {$/;"	P	implementation:PathBuf	signature:() -> Self
default	$RUST/src/process.rs	/^    fn default() -> Self {$/;"	P	implementation:ExitStatus	signature:() -> Self
default	$RUST/src/sync/condvar.rs	/^    fn default() -> Condvar {$/;"	P	implementation:Condvar	signature:() -> Condvar
default	$RUST/src/sync/lazy_lock.rs	/^    fn default() -> LazyLock<T> {$/;"	P	implementation:LazyLock	signature:() -> LazyLock<T>
default	$RUST/src/sync/lazy_lock/tests.rs	/^        fn default() -> Self {$/;"	P	implementation:sync_lazy_default::Foo	signature:() -> Self
default	$RUST/src/sync/mpmc/array.rs	/^    fn default() -> Self {$/;"	P	implementation:ArrayToken	signature:() -> Self
default	$RUST/src/sync/mpmc/list.rs	/^    fn default() -> Self {$/;"	P	implementation:ListToken	signature:() -> Self
default	$RUST/src/sync/mpmc/zero.rs	/^    fn default() -> Self {$/;"	P	implementation:ZeroToken	signature:() -> Self
default	$RUST/src/sync/mutex.rs	/^    fn default() -> Mutex<T> {$/;"	P	implementation:Mutex	signature:() -> Mutex<T>
default	$RUST/src/sync/once_lock.rs	/^    fn default() -> OnceLock<T> {$/;"	P	implementation:OnceLock	signature:() -> OnceLock<T>
default	$RUST/src/sync/rwlock.rs	/^    fn default() -> RwLock<T> {$/;"	P	implementation:RwLock	signature:() -> RwLock<T>
default	$RUST/src/sys/pal/sgx/waitqueue/mod.rs	/^    fn default() -> Self {$/;"	P	implementation:WaitQueue	signature:() -> Self
default	$RUST/src/sys/pal/windows/c.rs	/^    fn default() -> Self {$/;"	P	implementation:OBJECT_ATTRIBUTES	signature:() -> Self
default	$RUST/src/sys_common/process.rs	/^    fn default() -> Self {$/;"	P	implementation:CommandEnv	signature:() -> Self
default_alloc_error_hook	$RUST/src/alloc.rs	/^fn default_alloc_error_hook(layout: Layout) {$/;"	f	signature:(layout: Layout)
default_hook	$RUST/src/panicking.rs	/^fn default_hook(info: &PanicInfo<'_>) {$/;"	f	signature:(info: &PanicInfo<'_>)
default_read_buf	$RUST/src/io/mod.rs	/^pub(crate) fn default_read_buf<F>(read: F, mut cursor: BorrowedCursor<'_>) -> Result<()>$/;"	f	signature:<F>(read: F, mut cursor: BorrowedCursor<'_>) -> Result<()> where F: FnOnce(&mut [u8]) -> Result<usize>,
default_read_exact	$RUST/src/io/mod.rs	/^pub(crate) fn default_read_exact<R: Read + ?Sized>(this: &mut R, mut buf: &mut [u8]) -> Result<(/;"	f	signature:<R: Read + ?Sized>(this: &mut R, mut buf: &mut [u8]) -> Result<()>
default_read_to_end	$RUST/src/io/mod.rs	/^pub(crate) fn default_read_to_end<R: Read + ?Sized>($/;"	f	signature:<R: Read + ?Sized>( r: &mut R, buf: &mut Vec<u8>, size_hint: Option<usize>, ) -> Result<usize>
default_read_to_string	$RUST/src/io/mod.rs	/^pub(crate) fn default_read_to_string<R: Read + ?Sized>($/;"	f	signature:<R: Read + ?Sized>( r: &mut R, buf: &mut String, size_hint: Option<usize>, ) -> Result<usize>
default_read_vectored	$RUST/src/io/mod.rs	/^pub(crate) fn default_read_vectored<F>(read: F, bufs: &mut [IoSliceMut<'_>]) -> Result<usize>$/;"	f	signature:<F>(read: F, bufs: &mut [IoSliceMut<'_>]) -> Result<usize> where F: FnOnce(&mut [u8]) -> Result<usize>,
default_write_vectored	$RUST/src/io/mod.rs	/^pub(crate) fn default_write_vectored<F>(write: F, bufs: &[IoSlice<'_>]) -> Result<usize>$/;"	f	signature:<F>(write: F, bufs: &[IoSlice<'_>]) -> Result<usize> where F: FnOnce(&[u8]) -> Result<usize>,
define_ra	$RUST/src/sys/pal/sgx/abi/usercalls/raw.rs	/^macro_rules! define_ra {$/;"	M
define_usercalls	$RUST/src/sys/pal/sgx/abi/usercalls/raw.rs	/^macro_rules! define_usercalls {$/;"	M
definitions	$RUST/src/os/xous/ffi.rs	/^mod definitions;$/;"	n
del_flg	$RUST/src/sys/pal/itron/abi.rs	/^    pub fn del_flg(flgid: ID) -> ER;$/;"	f	signature:(flgid: ID) -> ER
del_mtx	$RUST/src/sys/pal/itron/abi.rs	/^    pub fn del_mtx(tskid: ID) -> ER;$/;"	f	signature:(tskid: ID) -> ER
del_tsk	$RUST/src/sys/pal/itron/abi.rs	/^    pub fn del_tsk(tskid: ID) -> ER;$/;"	f	signature:(tskid: ID) -> ER
delegating_ascii_methods	$RUST/src/ascii.rs	/^macro_rules! delegating_ascii_methods {$/;"	M
delim	$RUST/src/io/mod.rs	/^    delim: u8,$/;"	m	struct:Split
deref	$RUST/src/ffi/os_str.rs	/^    fn deref(&self) -> &OsStr {$/;"	P	implementation:OsString	signature:(&self) -> &OsStr
deref	$RUST/src/io/mod.rs	/^    fn deref(&self) -> &[u8] {$/;"	P	implementation:IoSliceMut	signature:(&self) -> &[u8]
deref	$RUST/src/path.rs	/^    fn deref(&self) -> &Path {$/;"	P	implementation:PathBuf	signature:(&self) -> &Path
deref	$RUST/src/sync/lazy_lock.rs	/^    fn deref(&self) -> &T {$/;"	P	implementation:LazyLock	signature:(&self) -> &T
deref	$RUST/src/sync/mpmc/counter.rs	/^    fn deref(&self) -> &C {$/;"	P	implementation:Sender	signature:(&self) -> &C
deref	$RUST/src/sync/mpmc/utils.rs	/^    fn deref(&self) -> &T {$/;"	P	implementation:CachePadded	signature:(&self) -> &T
deref	$RUST/src/sync/mutex.rs	/^    fn deref(&self) -> &T {$/;"	P	implementation:MutexGuard	signature:(&self) -> &T
deref	$RUST/src/sync/remutex.rs	/^    fn deref(&self) -> &T {$/;"	P	implementation:ReentrantMutexGuard	signature:(&self) -> &T
deref	$RUST/src/sync/rwlock.rs	/^    fn deref(&self) -> &T {$/;"	P	implementation:RwLockWriteGuard	signature:(&self) -> &T
deref	$RUST/src/sys/pal/sgx/abi/usercalls/alloc.rs	/^    fn deref(&self) -> &Self::Target {$/;"	f	signature:(&self) -> &Self::Target
deref	$RUST/src/sys/pal/sgx/waitqueue/mod.rs	/^    fn deref(&self) -> &Self::Target {$/;"	P	implementation:WaitGuard	signature:(&self) -> &Self::Target
deref	$RUST/src/sys/pal/sgx/waitqueue/spin_mutex.rs	/^    fn deref(&self) -> &T {$/;"	P	implementation:SpinMutexGuard	signature:(&self) -> &T
deref	$RUST/src/sys_common/lazy_box.rs	/^    fn deref(&self) -> &T {$/;"	P	implementation:LazyBox	signature:(&self) -> &T
deref	$RUST/src/sys_common/wtf8.rs	/^    fn deref(&self) -> &Wtf8 {$/;"	P	implementation:Wtf8Buf	signature:(&self) -> &Wtf8
deref_mut	$RUST/src/ffi/os_str.rs	/^    fn deref_mut(&mut self) -> &mut OsStr {$/;"	P	implementation:OsString	signature:(&mut self) -> &mut OsStr
deref_mut	$RUST/src/io/mod.rs	/^    fn deref_mut(&mut self) -> &mut [u8] {$/;"	P	implementation:IoSliceMut	signature:(&mut self) -> &mut [u8]
deref_mut	$RUST/src/path.rs	/^    fn deref_mut(&mut self) -> &mut Path {$/;"	P	implementation:PathBuf	signature:(&mut self) -> &mut Path
deref_mut	$RUST/src/sync/mpmc/utils.rs	/^    fn deref_mut(&mut self) -> &mut T {$/;"	P	implementation:CachePadded	signature:(&mut self) -> &mut T
deref_mut	$RUST/src/sync/mutex.rs	/^    fn deref_mut(&mut self) -> &mut T {$/;"	P	implementation:MutexGuard	signature:(&mut self) -> &mut T
deref_mut	$RUST/src/sync/rwlock.rs	/^    fn deref_mut(&mut self) -> &mut T {$/;"	P	implementation:RwLockWriteGuard	signature:(&mut self) -> &mut T
deref_mut	$RUST/src/sys/pal/sgx/abi/usercalls/alloc.rs	/^    fn deref_mut(&mut self) -> &mut Self::Target {$/;"	f	signature:(&mut self) -> &mut Self::Target
deref_mut	$RUST/src/sys/pal/sgx/waitqueue/mod.rs	/^    fn deref_mut(&mut self) -> &mut Self::Target {$/;"	P	implementation:WaitGuard	signature:(&mut self) -> &mut Self::Target
deref_mut	$RUST/src/sys/pal/sgx/waitqueue/spin_mutex.rs	/^    fn deref_mut(&mut self) -> &mut T {$/;"	P	implementation:SpinMutexGuard	signature:(&mut self) -> &mut T
deref_mut	$RUST/src/sys_common/lazy_box.rs	/^    fn deref_mut(&mut self) -> &mut T {$/;"	P	implementation:LazyBox	signature:(&mut self) -> &mut T
deref_mut	$RUST/src/sys_common/wtf8.rs	/^    fn deref_mut(&mut self) -> &mut Wtf8 {$/;"	P	implementation:Wtf8Buf	signature:(&mut self) -> &mut Wtf8
description	$RUST/src/collections/hash/map.rs	/^    fn description(&self) -> &str {$/;"	P	implementation:OccupiedError	signature:(&self) -> &str
description	$RUST/src/env.rs	/^    fn description(&self) -> &str {$/;"	P	implementation:VarError	signature:(&self) -> &str
description	$RUST/src/io/buffered/bufwriter.rs	/^    fn description(&self) -> &str {$/;"	P	implementation:WriterPanicked	signature:(&self) -> &str
description	$RUST/src/io/buffered/mod.rs	/^    fn description(&self) -> &str {$/;"	P	implementation:IntoInnerError	signature:(&self) -> &str
description	$RUST/src/io/error.rs	/^    fn description(&self) -> &str {$/;"	P	implementation:Error	signature:(&self) -> &str
description	$RUST/src/path.rs	/^    fn description(&self) -> &str {$/;"	P	implementation:StripPrefixError	signature:(&self) -> &str
description	$RUST/src/sync/mpsc/mod.rs	/^    fn description(&self) -> &str {$/;"	P	implementation:TrySendError	signature:(&self) -> &str
description	$RUST/src/sync/poison.rs	/^    fn description(&self) -> &str {$/;"	P	implementation:TryLockError	signature:(&self) -> &str
description	$RUST/src/sys/pal/hermit/os.rs	/^    fn description(&self) -> &str {$/;"	P	implementation:JoinPathsError	signature:(&self) -> &str
description	$RUST/src/sys/pal/sgx/net.rs	/^    fn description(&self) -> &str {$/;"	P	implementation:NonIpSockAddr	signature:(&self) -> &str
description	$RUST/src/sys/pal/sgx/os.rs	/^    fn description(&self) -> &str {$/;"	P	implementation:JoinPathsError	signature:(&self) -> &str
description	$RUST/src/sys/pal/solid/os.rs	/^    fn description(&self) -> &str {$/;"	P	implementation:JoinPathsError	signature:(&self) -> &str
description	$RUST/src/sys/pal/teeos/os.rs	/^    fn description(&self) -> &str {$/;"	P	implementation:JoinPathsError	signature:(&self) -> &str
description	$RUST/src/sys/pal/unix/os.rs	/^    fn description(&self) -> &str {$/;"	P	implementation:JoinPathsError	signature:(&self) -> &str
description	$RUST/src/sys/pal/unsupported/os.rs	/^    fn description(&self) -> &str {$/;"	P	implementation:JoinPathsError	signature:(&self) -> &str
description	$RUST/src/sys/pal/wasi/os.rs	/^    fn description(&self) -> &str {$/;"	P	implementation:JoinPathsError	signature:(&self) -> &str
description	$RUST/src/sys/pal/windows/os.rs	/^    fn description(&self) -> &str {$/;"	P	implementation:JoinPathsError	signature:(&self) -> &str
description	$RUST/src/sys/pal/xous/os.rs	/^    fn description(&self) -> &str {$/;"	P	implementation:JoinPathsError	signature:(&self) -> &str
description	$RUST/src/sys/pal/zkvm/os.rs	/^    fn description(&self) -> &str {$/;"	P	implementation:JoinPathsError	signature:(&self) -> &str
description	$RUST/src/time.rs	/^    fn description(&self) -> &str {$/;"	P	implementation:SystemTimeError	signature:(&self) -> &str
destroy	$RUST/src/sync/mpmc/counter.rs	/^    destroy: AtomicBool,$/;"	m	struct:Counter
destroy	$RUST/src/sync/mpmc/list.rs	/^    unsafe fn destroy(this: *mut Block<T>, start: usize) {$/;"	P	implementation:Block	signature:(this: *mut Block<T>, start: usize)
destroy	$RUST/src/sys/pal/common/thread_local/fast_local.rs	/^            unsafe extern "C" fn destroy(ptr: *mut $crate::primitive::u8) {$/;"	f	function:__getit	signature:(ptr: *mut $crate::primitive::u8)
destroy	$RUST/src/sys/pal/sgx/abi/tls/mod.rs	/^    pub fn destroy(key: Key) {$/;"	P	implementation:Tls	signature:(key: Key)
destroy	$RUST/src/sys/pal/sgx/thread_local_key.rs	/^pub unsafe fn destroy(key: Key) {$/;"	f	signature:(key: Key)
destroy	$RUST/src/sys/pal/solid/thread_local_key.rs	/^pub unsafe fn destroy(_key: Key) {$/;"	f	signature:(_key: Key)
destroy	$RUST/src/sys/pal/unix/locks/pthread_mutex.rs	/^    fn destroy(mutex: Box<Self>) {$/;"	P	implementation:AllocatedMutex	signature:(mutex: Box<Self>)
destroy	$RUST/src/sys/pal/unix/locks/pthread_rwlock.rs	/^    fn destroy(mut rwlock: Box<Self>) {$/;"	P	implementation:AllocatedRwLock	signature:(mut rwlock: Box<Self>)
destroy	$RUST/src/sys/pal/unix/thread_local_key.rs	/^pub unsafe fn destroy(key: Key) {$/;"	f	signature:(key: Key)
destroy	$RUST/src/sys/pal/unsupported/thread_local_key.rs	/^pub unsafe fn destroy(_key: Key) {$/;"	f	signature:(_key: Key)
destroy	$RUST/src/sys/pal/xous/thread_local_key.rs	/^pub unsafe fn destroy(_key: Key) {$/;"	f	signature:(_key: Key)
destroy	$RUST/src/sys/pal/zkvm/thread_local_key.rs	/^pub unsafe fn destroy(_key: Key) {}$/;"	f	signature:(_key: Key)
destroy	$RUST/src/sys_common/lazy_box.rs	/^    fn destroy(_: Box<Self>) {}$/;"	P	interface:LazyInit	signature:(_: Box<Self>)
destroy_tls	$RUST/src/sys/pal/xous/thread_local_key.rs	/^pub unsafe fn destroy_tls() {$/;"	f	signature:()
destroy_upgraded_shared_port_when_sender_still_active	$RUST/src/sync/mpsc/sync_tests.rs	/^fn destroy_upgraded_shared_port_when_sender_still_active() {$/;"	f	signature:()
destroy_upgraded_shared_port_when_sender_still_active	$RUST/src/sync/mpsc/tests.rs	/^fn destroy_upgraded_shared_port_when_sender_still_active() {$/;"	f	signature:()
destroy_value	$RUST/src/sys/pal/common/thread_local/fast_local.rs	/^unsafe extern "C" fn destroy_value<T>(ptr: *mut u8) {$/;"	f	signature:<T>(ptr: *mut u8)
destroy_value	$RUST/src/sys/pal/common/thread_local/os_local.rs	/^unsafe extern "C" fn destroy_value<T: 'static>(ptr: *mut u8) {$/;"	f	signature:<T: 'static>(ptr: *mut u8)
destruct	$RUST/src/sys/pal/windows/thread_local_key/tests.rs	/^    unsafe extern "C" fn destruct(ptr: *mut u8) {$/;"	f	function:destructors	signature:(ptr: *mut u8)
destructors	$RUST/src/sys/pal/windows/thread_local_key/tests.rs	/^fn destructors() {$/;"	f	signature:()
detach	$RUST/src/sys/pal/windows/process.rs	/^    detach: bool, \/\/ not currently exposed in std::process$/;"	m	struct:Command
dev	$RUST/src/os/unix/fs.rs	/^    fn dev(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
dev	$RUST/src/os/wasi/fs.rs	/^    fn dev(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
dev_t	$RUST/src/os/android/raw.rs	/^    pub type dev_t = u64;$/;"	t	module:arch
dev_t	$RUST/src/os/dragonfly/raw.rs	/^pub type dev_t = u64;$/;"	t
dev_t	$RUST/src/os/emscripten/raw.rs	/^pub type dev_t = u64;$/;"	t
dev_t	$RUST/src/os/espidf/raw.rs	/^pub type dev_t = libc::dev_t;$/;"	t
dev_t	$RUST/src/os/freebsd/raw.rs	/^pub type dev_t = u64;$/;"	t
dev_t	$RUST/src/os/fuchsia/raw.rs	/^pub type dev_t = u64;$/;"	t
dev_t	$RUST/src/os/haiku/raw.rs	/^pub type dev_t = i32;$/;"	t
dev_t	$RUST/src/os/horizon/raw.rs	/^pub type dev_t = libc::dev_t;$/;"	t
dev_t	$RUST/src/os/hurd/raw.rs	/^pub type dev_t = c_ulong;$/;"	t
dev_t	$RUST/src/os/illumos/raw.rs	/^pub type dev_t = u64;$/;"	t
dev_t	$RUST/src/os/ios/raw.rs	/^pub type dev_t = u64;$/;"	t
dev_t	$RUST/src/os/l4re/raw.rs	/^pub type dev_t = u64;$/;"	t
dev_t	$RUST/src/os/linux/raw.rs	/^pub type dev_t = u64;$/;"	t
dev_t	$RUST/src/os/macos/raw.rs	/^pub type dev_t = u64;$/;"	t
dev_t	$RUST/src/os/netbsd/raw.rs	/^pub type dev_t = u64;$/;"	t
dev_t	$RUST/src/os/nto/raw.rs	/^pub type dev_t = u32;$/;"	t
dev_t	$RUST/src/os/openbsd/raw.rs	/^pub type dev_t = u64;$/;"	t
dev_t	$RUST/src/os/redox/raw.rs	/^pub type dev_t = c_long;$/;"	t
dev_t	$RUST/src/os/solaris/raw.rs	/^pub type dev_t = u64;$/;"	t
dev_t	$RUST/src/os/vita/raw.rs	/^pub type dev_t = libc::dev_t;$/;"	t
dev_t	$RUST/src/os/watchos/raw.rs	/^pub type dev_t = u64;$/;"	t
difference	$RUST/src/collections/hash/set.rs	/^    pub fn difference<'a>(&'a self, other: &'a HashSet<T, S>) -> Difference<'a, T, S> {$/;"	f	signature:<'a>(&'a self, other: &'a HashSet<T, S>) -> Difference<'a, T, S>
dir	$RUST/src/sys/pal/unix/fs.rs	/^    dir: Arc<InnerReadDir>,$/;"	m	struct:DirEntry
dir	$RUST/src/sys/pal/wasi/fs.rs	/^    dir: File,$/;"	m	struct:ReadDirInner
dir_entry_debug	$RUST/src/fs/tests.rs	/^fn dir_entry_debug() {$/;"	f	signature:()
dir_entry_methods	$RUST/src/fs/tests.rs	/^fn dir_entry_methods() {$/;"	f	signature:()
directory	$RUST/src/os/wasi/fs.rs	/^    fn directory(&mut self, dir: bool) -> &mut Self;$/;"	P	interface:OpenOptionsExt	signature:(&mut self, dir: bool) -> &mut Self
directory	$RUST/src/sys/pal/wasi/fs.rs	/^    pub fn directory(&mut self, directory: bool) {$/;"	P	implementation:OpenOptions	signature:(&mut self, directory: bool)
dirent	$RUST/src/sys/pal/solid/abi/fs.rs	/^pub struct dirent {$/;"	s
dirent64_min	$RUST/src/sys/pal/unix/fs.rs	/^struct dirent64_min {$/;"	s
dirflags	$RUST/src/sys/pal/wasi/fs.rs	/^    dirflags: wasi::Lookupflags,$/;"	m	struct:OpenOptions
dirp	$RUST/src/sys/pal/solid/fs.rs	/^    dirp: abi::S_DIR,$/;"	m	struct:InnerReadDir
dirp	$RUST/src/sys/pal/unix/fs.rs	/^    dirp: Dir,$/;"	m	struct:InnerReadDir
dis_dsp	$RUST/src/sys/pal/itron/abi.rs	/^    pub fn dis_dsp() -> ER;$/;"	f	signature:() -> ER
disable_boot_services	$RUST/src/os/uefi/env.rs	/^pub(crate) fn disable_boot_services() {$/;"	f	signature:()
disabled	$RUST/src/backtrace.rs	/^    pub const fn disabled() -> Backtrace {$/;"	P	implementation:Backtrace	signature:() -> Backtrace
discard_all_messages	$RUST/src/sync/mpmc/array.rs	/^    unsafe fn discard_all_messages(&self, tail: usize) {$/;"	P	implementation:Channel	signature:(&self, tail: usize)
discard_all_messages	$RUST/src/sync/mpmc/list.rs	/^    fn discard_all_messages(&self) {$/;"	P	implementation:Channel	signature:(&self)
discard_buffer	$RUST/src/io/buffered/bufreader.rs	/^    pub(in crate::io) fn discard_buffer(&mut self) {$/;"	P	implementation:BufReader	signature:(&mut self)
discard_buffer	$RUST/src/io/buffered/bufreader/buffer.rs	/^    pub fn discard_buffer(&mut self) {$/;"	P	implementation:Buffer	signature:(&mut self)
disconnect	$RUST/src/sync/mpmc/waker.rs	/^    pub(crate) fn disconnect(&self) {$/;"	P	implementation:SyncWaker	signature:(&self)
disconnect	$RUST/src/sync/mpmc/zero.rs	/^    pub(crate) fn disconnect(&self) -> bool {$/;"	P	implementation:Channel	signature:(&self) -> bool
disconnect_receivers	$RUST/src/sync/mpmc/array.rs	/^    pub(crate) unsafe fn disconnect_receivers(&self) -> bool {$/;"	P	implementation:Channel	signature:(&self) -> bool
disconnect_receivers	$RUST/src/sync/mpmc/list.rs	/^    pub(crate) fn disconnect_receivers(&self) -> bool {$/;"	P	implementation:Channel	signature:(&self) -> bool
disconnect_senders	$RUST/src/sync/mpmc/array.rs	/^    pub(crate) fn disconnect_senders(&self) -> bool {$/;"	P	implementation:Channel	signature:(&self) -> bool
disconnect_senders	$RUST/src/sync/mpmc/list.rs	/^    pub(crate) fn disconnect_senders(&self) -> bool {$/;"	P	implementation:Channel	signature:(&self) -> bool
dispatch_release	$RUST/src/sys/pal/unix/thread_parking/darwin.rs	/^    fn dispatch_release(object: *mut crate::ffi::c_void);$/;"	f	signature:(object: *mut crate::ffi::c_void)
dispatch_semaphore_create	$RUST/src/sys/pal/unix/thread_parking/darwin.rs	/^    fn dispatch_semaphore_create(val: isize) -> dispatch_semaphore_t;$/;"	f	signature:(val: isize) -> dispatch_semaphore_t
dispatch_semaphore_signal	$RUST/src/sys/pal/unix/thread_parking/darwin.rs	/^    fn dispatch_semaphore_signal(dsema: dispatch_semaphore_t) -> isize;$/;"	f	signature:(dsema: dispatch_semaphore_t) -> isize
dispatch_semaphore_t	$RUST/src/sys/pal/unix/thread_parking/darwin.rs	/^type dispatch_semaphore_t = *mut crate::ffi::c_void;$/;"	t
dispatch_semaphore_wait	$RUST/src/sys/pal/unix/thread_parking/darwin.rs	/^    fn dispatch_semaphore_wait(dsema: dispatch_semaphore_t, timeout: dispatch_time_t) -> isize;$/;"	f	signature:(dsema: dispatch_semaphore_t, timeout: dispatch_time_t) -> isize
dispatch_time	$RUST/src/sys/pal/unix/thread_parking/darwin.rs	/^    fn dispatch_time(when: dispatch_time_t, delta: i64) -> dispatch_time_t;$/;"	f	signature:(when: dispatch_time_t, delta: i64) -> dispatch_time_t
dispatch_time_t	$RUST/src/sys/pal/unix/thread_parking/darwin.rs	/^type dispatch_time_t = u64;$/;"	t
display	$RUST/src/ffi/os_str.rs	/^    pub(crate) fn display(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:OsStr	signature:(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result
display	$RUST/src/path.rs	/^    pub fn display(&self) -> Display<'_> {$/;"	P	implementation:Path	signature:(&self) -> Display<'_>
display	$RUST/src/sys/os_str/bytes/tests.rs	/^fn display() {$/;"	f	signature:()
div_euclid	$RUST/src/f32.rs	/^    pub fn div_euclid(self, rhs: f32) -> f32 {$/;"	P	implementation:f32	signature:(self, rhs: f32) -> f32
div_euclid	$RUST/src/f64.rs	/^    pub fn div_euclid(self, rhs: f64) -> f64 {$/;"	P	implementation:f64	signature:(self, rhs: f64) -> f64
diverge	$RUST/src/sys/pal/unsupported/pipe.rs	/^    pub fn diverge(&self) -> ! {$/;"	P	implementation:AnonPipe	signature:(&self) -> !
dly_tsk	$RUST/src/sys/pal/itron/abi.rs	/^    pub fn dly_tsk(dlytim: RELTIM) -> ER;$/;"	f	signature:(dlytim: RELTIM) -> ER
dns	$RUST/src/os/xous/services.rs	/^mod dns;$/;"	n
dns	$RUST/src/sys/pal/xous/net/mod.rs	/^mod dns;$/;"	n
dns_server	$RUST/src/os/xous/services/dns.rs	/^pub(crate) fn dns_server() -> Connection {$/;"	f	signature:() -> Connection
do_call	$RUST/src/panicking.rs	/^    fn do_call<F: FnOnce() -> R, R>(data: *mut u8) {$/;"	f	signature:<F: FnOnce() -> R, R>(data: *mut u8)
do_catch	$RUST/src/panicking.rs	/^    fn do_catch<F: FnOnce() -> R, R>(data: *mut u8, payload: *mut u8) {$/;"	f	signature:<F: FnOnce() -> R, R>(data: *mut u8, payload: *mut u8)
do_exec	$RUST/src/sys/pal/unix/process/process_fuchsia.rs	/^    unsafe fn do_exec($/;"	P	implementation:Command	signature:( &mut self, stdio: ChildPipes, maybe_envp: Option<&CStringArray>, ) -> io::Result<zx_handle_t>
do_exec	$RUST/src/sys/pal/unix/process/process_unix.rs	/^    unsafe fn do_exec($/;"	P	implementation:Command	signature:( &mut self, stdio: ChildPipes, maybe_envp: Option<&CStringArray>, ) -> Result<!, io::Error>
do_fork	$RUST/src/sys/pal/unix/process/process_unix.rs	/^    unsafe fn do_fork(&mut self) -> Result<pid_t, io::Error> {$/;"	P	implementation:Command	signature:(&mut self) -> Result<pid_t, io::Error>
do_stuff	$RUST/src/sync/rwlock/tests.rs	/^    fn do_stuff<'a>(_: RwLockReadGuard<'_, &'a i32>, _: &'a i32) {}$/;"	f	function:test_read_guard_covariance	signature:<'a>(_: RwLockReadGuard<'_, &'a i32>, _: &'a i32)
do_usercall	$RUST/src/sys/pal/sgx/abi/usercalls/raw.rs	/^pub unsafe fn do_usercall($/;"	f	signature:( nr: NonZeroU64, p1: u64, p2: u64, p3: u64, p4: u64, abort: bool, ) -> (u64, u64)
do_yield	$RUST/src/os/xous/ffi.rs	/^pub(crate) fn do_yield() {$/;"	f	signature:()
does_clear	$RUST/src/sys_common/process.rs	/^    pub fn does_clear(&self) -> bool {$/;"	P	implementation:CommandEnv	signature:(&self) -> bool
done	$RUST/src/io/buffered/bufwriter.rs	/^            fn done(&self) -> bool {$/;"	P	implementation:BufWriter::flush_buf::BufGuard	signature:(&self) -> bool
done	$RUST/src/sync/poison.rs	/^    pub fn done(&self, guard: &Guard) {$/;"	P	implementation:Flag	signature:(&self, guard: &Guard)
done	$RUST/src/sys/pal/sgx/thread.rs	/^        done: JoinNotifier,$/;"	m	struct:task_queue::Task
done_first	$RUST/src/io/mod.rs	/^    done_first: bool,$/;"	m	struct:Chain
dont_panic_in_drop_on_panicked_flush	$RUST/src/io/buffered/tests.rs	/^fn dont_panic_in_drop_on_panicked_flush() {$/;"	f	signature:()
dont_splice_pipes_from_files	$RUST/src/sys/pal/unix/kernel_copy/tests.rs	/^fn dont_splice_pipes_from_files() -> Result<()> {$/;"	f	signature:() -> Result<()>
double_bind	$RUST/src/net/tcp/tests.rs	/^fn double_bind() {$/;"	f	signature:()
downcast	$RUST/src/io/error.rs	/^    pub fn downcast<E>(self) -> result::Result<E, Self>$/;"	P	implementation:Error	signature:<E>(self) -> result::Result<E, Self> where E: error::Error + Send + Sync + 'static,
downcasting	$RUST/src/error/tests.rs	/^fn downcasting() {$/;"	f	signature:()
dragonfly	$RUST/src/os/mod.rs	/^pub mod dragonfly;$/;"	n
drain	$RUST/src/collections/hash/map.rs	/^    pub fn drain(&mut self) -> Drain<'_, K, V> {$/;"	P	implementation:HashMap	signature:(&mut self) -> Drain<'_, K, V>
drain	$RUST/src/collections/hash/set.rs	/^    pub fn drain(&mut self) -> Drain<'_, T> {$/;"	P	implementation:HashSet	signature:(&mut self) -> Drain<'_, T>
drain_to	$RUST/src/sys/pal/unix/kernel_copy.rs	/^    fn drain_to<W: Write>(&mut self, writer: &mut W, outer_limit: u64) -> Result<u64> {$/;"	P	implementation:Take	signature:<W: Write>(&mut self, writer: &mut W, outer_limit: u64) -> Result<u64>
drop	$RUST/src/collections/hash/map/tests.rs	/^    fn drop(&mut self) {$/;"	P	implementation:Droppable	signature:(&mut self)
drop	$RUST/src/collections/hash/set/tests.rs	/^        fn drop(&mut self) {$/;"	P	implementation:test_extract_if_pred_panic_leak::D	signature:(&mut self)
drop	$RUST/src/io/buffered/bufwriter.rs	/^    fn drop(&mut self) {$/;"	P	implementation:BufWriter	signature:(&mut self)
drop	$RUST/src/io/buffered/tests.rs	/^        fn drop(&mut self) {$/;"	P	implementation:line_vectored_partial_and_errors::Writer	signature:(&mut self)
drop	$RUST/src/io/error/repr_bitpacked.rs	/^    fn drop(&mut self) {$/;"	P	implementation:Repr	signature:(&mut self)
drop	$RUST/src/io/mod.rs	/^    fn drop(&mut self) {$/;"	P	implementation:Guard	signature:(&mut self)
drop	$RUST/src/os/fd/owned.rs	/^    fn drop(&mut self) {$/;"	P	implementation:OwnedFd	signature:(&mut self)
drop	$RUST/src/os/solid/io.rs	/^    fn drop(&mut self) {$/;"	P	implementation:OwnedFd	signature:(&mut self)
drop	$RUST/src/os/windows/io/handle.rs	/^    fn drop(&mut self) {$/;"	P	implementation:OwnedHandle	signature:(&mut self)
drop	$RUST/src/os/windows/io/socket.rs	/^    fn drop(&mut self) {$/;"	P	implementation:OwnedSocket	signature:(&mut self)
drop	$RUST/src/process/tests.rs	/^        fn drop(&mut self) {$/;"	P	implementation:test_proc_thread_attributes::ProcessDropGuard	signature:(&mut self)
drop	$RUST/src/sync/lazy_lock.rs	/^    fn drop(&mut self) {$/;"	P	implementation:LazyLock	signature:(&mut self)
drop	$RUST/src/sync/mpmc/list.rs	/^    fn drop(&mut self) {$/;"	P	implementation:Channel	signature:(&mut self)
drop	$RUST/src/sync/mpmc/mod.rs	/^    fn drop(&mut self) {$/;"	P	implementation:Sender	signature:(&mut self)
drop	$RUST/src/sync/mpmc/waker.rs	/^    fn drop(&mut self) {$/;"	P	implementation:Waker	signature:(&mut self)
drop	$RUST/src/sync/mutex.rs	/^    fn drop(&mut self) {$/;"	P	implementation:MutexGuard	signature:(&mut self)
drop	$RUST/src/sync/mutex/tests.rs	/^        fn drop(&mut self) {$/;"	P	implementation:test_into_inner_drop::Foo	signature:(&mut self)
drop	$RUST/src/sync/once_lock.rs	/^    fn drop(&mut self) {$/;"	P	implementation:OnceLock	signature:(&mut self)
drop	$RUST/src/sync/once_lock/tests.rs	/^        fn drop(&mut self) {$/;"	P	implementation:sync_once_cell_drop::Dropper	signature:(&mut self)
drop	$RUST/src/sync/remutex.rs	/^    fn drop(&mut self) {$/;"	P	implementation:ReentrantMutexGuard	signature:(&mut self)
drop	$RUST/src/sync/remutex/tests.rs	/^    fn drop(&mut self) {$/;"	P	implementation:Answer	signature:(&mut self)
drop	$RUST/src/sync/rwlock.rs	/^    fn drop(&mut self) {$/;"	P	implementation:RwLockWriteGuard	signature:(&mut self)
drop	$RUST/src/sync/rwlock/tests.rs	/^        fn drop(&mut self) {$/;"	P	implementation:test_into_inner_drop::Foo	signature:(&mut self)
drop	$RUST/src/sys/pal/common/thread_local/mod.rs	/^        fn drop(&mut self) {$/;"	P	implementation:abort_on_dtor_unwind::DtorUnwindGuard	signature:(&mut self)
drop	$RUST/src/sys/pal/itron/mutex.rs	/^    fn drop(&mut self) {$/;"	P	implementation:MutexGuard	signature:(&mut self)
drop	$RUST/src/sys/pal/itron/spin.rs	/^    fn drop(&mut self) {$/;"	P	implementation:SpinIdOnceCell	signature:(&mut self)
drop	$RUST/src/sys/pal/itron/thread.rs	/^    fn drop(&mut self) {$/;"	P	implementation:Thread	signature:(&mut self)
drop	$RUST/src/sys/pal/sgx/abi/tls/mod.rs	/^    fn drop(&mut self) {$/;"	P	implementation:ActiveTls	signature:(&mut self)
drop	$RUST/src/sys/pal/sgx/abi/usercalls/alloc.rs	/^    fn drop(&mut self) {$/;"	f	signature:(&mut self)
drop	$RUST/src/sys/pal/sgx/fd.rs	/^    fn drop(&mut self) {$/;"	P	implementation:FileDesc	signature:(&mut self)
drop	$RUST/src/sys/pal/sgx/thread.rs	/^        fn drop(&mut self) {$/;"	P	implementation:task_queue::JoinNotifier	signature:(&mut self)
drop	$RUST/src/sys/pal/sgx/waitqueue/mod.rs	/^    fn drop(&mut self) {$/;"	P	implementation:WaitGuard	signature:(&mut self)
drop	$RUST/src/sys/pal/sgx/waitqueue/spin_mutex.rs	/^    fn drop(&mut self) {$/;"	P	implementation:SpinMutexGuard	signature:(&mut self)
drop	$RUST/src/sys/pal/solid/fs.rs	/^    fn drop(&mut self) {$/;"	P	implementation:InnerReadDir	signature:(&mut self)
drop	$RUST/src/sys/pal/solid/rwlock.rs	/^    fn drop(&mut self) {$/;"	P	implementation:RwLock	signature:(&mut self)
drop	$RUST/src/sys/pal/teeos/locks/condvar.rs	/^    fn drop(&mut self) {$/;"	P	implementation:AllocatedCondvar	signature:(&mut self)
drop	$RUST/src/sys/pal/teeos/thread.rs	/^    fn drop(&mut self) {$/;"	P	implementation:Thread	signature:(&mut self)
drop	$RUST/src/sys/pal/unix/fs.rs	/^    fn drop(&mut self) {$/;"	P	implementation:Dir	signature:(&mut self)
drop	$RUST/src/sys/pal/unix/locks/pthread_condvar.rs	/^    fn drop(&mut self) {$/;"	P	implementation:AllocatedCondvar	signature:(&mut self)
drop	$RUST/src/sys/pal/unix/locks/pthread_mutex.rs	/^    fn drop(&mut self) {$/;"	P	implementation:PthreadMutexAttr	signature:(&mut self)
drop	$RUST/src/sys/pal/unix/locks/pthread_rwlock.rs	/^    fn drop(&mut self) {$/;"	P	implementation:AllocatedRwLock	signature:(&mut self)
drop	$RUST/src/sys/pal/unix/process/process_unix.rs	/^            fn drop(&mut self) {$/;"	P	implementation:Command::posix_spawn::PosixSpawnattr	signature:(&mut self)
drop	$RUST/src/sys/pal/unix/process/zircon.rs	/^    fn drop(&mut self) {$/;"	P	implementation:Handle	signature:(&mut self)
drop	$RUST/src/sys/pal/unix/stack_overflow.rs	/^    fn drop(&mut self) {$/;"	P	implementation:Handler	signature:(&mut self)
drop	$RUST/src/sys/pal/unix/thread.rs	/^    fn drop(&mut self) {$/;"	P	implementation:Thread	signature:(&mut self)
drop	$RUST/src/sys/pal/unix/thread_parking/darwin.rs	/^    fn drop(&mut self) {$/;"	P	implementation:Parker	signature:(&mut self)
drop	$RUST/src/sys/pal/unix/thread_parking/pthread.rs	/^    fn drop(&mut self) {$/;"	P	implementation:Parker	signature:(&mut self)
drop	$RUST/src/sys/pal/unsupported/once.rs	/^    fn drop(&mut self) {$/;"	P	implementation:CompletionGuard	signature:(&mut self)
drop	$RUST/src/sys/pal/wasm/alloc.rs	/^        fn drop(&mut self) {$/;"	P	implementation:lock::DropLock	signature:(&mut self)
drop	$RUST/src/sys/pal/windows/fs.rs	/^    fn drop(&mut self) {$/;"	P	implementation:FindNextFileHandle	signature:(&mut self)
drop	$RUST/src/sys/pal/windows/os.rs	/^    fn drop(&mut self) {$/;"	P	implementation:Env	signature:(&mut self)
drop	$RUST/src/sys/pal/windows/pipe.rs	/^    fn drop(&mut self) {$/;"	P	implementation:AsyncPipe	signature:(&mut self)
drop	$RUST/src/sys/pal/windows/process.rs	/^    fn drop(&mut self) {$/;"	P	implementation:ProcThreadAttributeList	signature:(&mut self)
drop	$RUST/src/sys/pal/windows/time.rs	/^    fn drop(&mut self) {$/;"	P	implementation:WaitableTimer	signature:(&mut self)
drop	$RUST/src/sys/pal/xous/alloc.rs	/^        fn drop(&mut self) {$/;"	P	implementation:lock::DropLock	signature:(&mut self)
drop	$RUST/src/sys/pal/xous/locks/condvar.rs	/^    fn drop(&mut self) {$/;"	P	implementation:Condvar	signature:(&mut self)
drop	$RUST/src/sys/pal/xous/locks/mutex.rs	/^    fn drop(&mut self) {$/;"	P	implementation:Mutex	signature:(&mut self)
drop	$RUST/src/sys/pal/xous/net/tcplistener.rs	/^    fn drop(&mut self) {$/;"	P	implementation:TcpListener	signature:(&mut self)
drop	$RUST/src/sys/pal/xous/net/tcpstream.rs	/^    fn drop(&mut self) {$/;"	P	implementation:TcpStream	signature:(&mut self)
drop	$RUST/src/sys/pal/xous/net/udp.rs	/^    fn drop(&mut self) {$/;"	P	implementation:UdpSocket	signature:(&mut self)
drop	$RUST/src/sys/pal/xous/thread_parking.rs	/^    fn drop(&mut self) {$/;"	P	implementation:Parker	signature:(&mut self)
drop	$RUST/src/sys_common/io.rs	/^        fn drop(&mut self) {$/;"	P	implementation:test::TempDir	signature:(&mut self)
drop	$RUST/src/sys_common/lazy_box.rs	/^    fn drop(&mut self) {$/;"	P	implementation:LazyBox	signature:(&mut self)
drop	$RUST/src/sys_common/net.rs	/^    fn drop(&mut self) {$/;"	P	implementation:LookupHost	signature:(&mut self)
drop	$RUST/src/sys_common/once/futex.rs	/^    fn drop(&mut self) {$/;"	P	implementation:CompletionGuard	signature:(&mut self)
drop	$RUST/src/sys_common/once/queue.rs	/^    fn drop(&mut self) {$/;"	P	implementation:WaiterQueue	signature:(&mut self)
drop	$RUST/src/thread/local/tests.rs	/^    fn drop(&mut self) {$/;"	P	implementation:NotifyOnDrop	signature:(&mut self)
drop	$RUST/src/thread/mod.rs	/^    fn drop(&mut self) {$/;"	P	implementation:PanicGuard	signature:(&mut self)
drop	$RUST/src/thread/tests.rs	/^        fn drop(&mut self) {$/;"	P	implementation:test_scoped_threads_drop_result_before_join::X	signature:(&mut self)
drop_after	$RUST/src/sys/pal/sgx/waitqueue/mod.rs	/^    pub fn drop_after<U>(self, guard: U) {$/;"	P	implementation:WaitGuard	signature:<U>(self, guard: U)
drop_full	$RUST/src/sync/mpsc/sync_tests.rs	/^fn drop_full() {$/;"	f	signature:()
drop_full	$RUST/src/sync/mpsc/tests.rs	/^fn drop_full() {$/;"	f	signature:()
drop_full_shared	$RUST/src/sync/mpsc/tests.rs	/^fn drop_full_shared() {$/;"	f	signature:()
drop_handler	$RUST/src/sys/pal/unix/stack_overflow.rs	/^    pub unsafe fn drop_handler(data: *mut libc::c_void) {$/;"	f	module:imp	signature:(data: *mut libc::c_void)
drop_panic_leak	$RUST/src/collections/hash/map/tests.rs	/^    fn drop_panic_leak() {$/;"	f	module:test_extract_if	signature:()
drop_unreceived	$RUST/src/sync/mpsc/sync_tests.rs	/^fn drop_unreceived() {$/;"	f	signature:()
dropck	$RUST/src/sync/once_lock/tests.rs	/^fn dropck() {$/;"	f	signature:()
dst	$RUST/src/sys/pal/windows/pipe.rs	/^    dst: &'a mut Vec<u8>,$/;"	m	struct:AsyncPipe
dsync	$RUST/src/os/wasi/fs.rs	/^    fn dsync(&mut self, enabled: bool) -> &mut OpenOptions {$/;"	P	implementation:OpenOptions	signature:(&mut self, enabled: bool) -> &mut OpenOptions
dsync	$RUST/src/sys/pal/wasi/fs.rs	/^    pub fn dsync(&mut self, set: bool) {$/;"	P	implementation:OpenOptions	signature:(&mut self, set: bool)
dtor	$RUST/src/sys/pal/windows/thread_local_key.rs	/^    dtor: Option<Dtor>,$/;"	m	struct:StaticKey
dtor	$RUST/src/sys/pal/xous/thread_local_key.rs	/^    dtor: Dtor,$/;"	m	struct:Node
dtor	$RUST/src/sys_common/thread_local_key.rs	/^    dtor: Option<unsafe extern "C" fn(*mut u8)>,$/;"	m	struct:StaticKey
dtor_state	$RUST/src/sys/pal/common/thread_local/fast_local.rs	/^    dtor_state: Cell<DtorState>,$/;"	m	struct:Key
dtors_in_dtors_in_dtors	$RUST/src/thread/local/tests.rs	/^fn dtors_in_dtors_in_dtors() {$/;"	f	signature:()
dtors_in_dtors_in_dtors_const_init	$RUST/src/thread/local/tests.rs	/^fn dtors_in_dtors_in_dtors_const_init() {$/;"	f	signature:()
dummy	$RUST/src/sys/pal/sgx/waitqueue/unsafe_list.rs	/^    fn dummy() -> Self {$/;"	P	implementation:UnsafeListEntry	signature:() -> Self
dup	$RUST/src/sys/pal/sgx/abi/tls/mod.rs	/^macro_rules! dup {$/;"	M
dup	$RUST/src/sys/pal/solid/abi/sockets.rs	/^    pub fn dup(s: c_int) -> c_int;$/;"	f	signature:(s: c_int) -> c_int
duplicate	$RUST/src/os/windows/io/handle.rs	/^    pub(crate) fn duplicate($/;"	P	implementation:BorrowedHandle	signature:( &self, access: u32, inherit: bool, options: u32, ) -> io::Result<OwnedHandle>
duplicate	$RUST/src/sys/pal/hermit/fd.rs	/^    pub fn duplicate(&self) -> io::Result<FileDesc> {$/;"	P	implementation:FileDesc	signature:(&self) -> io::Result<FileDesc>
duplicate	$RUST/src/sys/pal/hermit/fs.rs	/^    pub fn duplicate(&self) -> io::Result<File> {$/;"	P	implementation:File	signature:(&self) -> io::Result<File>
duplicate	$RUST/src/sys/pal/hermit/net.rs	/^    pub fn duplicate(&self) -> io::Result<Socket> {$/;"	P	implementation:Socket	signature:(&self) -> io::Result<Socket>
duplicate	$RUST/src/sys/pal/sgx/net.rs	/^    pub fn duplicate(&self) -> io::Result<UdpSocket> {$/;"	P	implementation:UdpSocket	signature:(&self) -> io::Result<UdpSocket>
duplicate	$RUST/src/sys/pal/solid/net.rs	/^    pub fn duplicate(&self) -> io::Result<Socket> {$/;"	P	implementation:Socket	signature:(&self) -> io::Result<Socket>
duplicate	$RUST/src/sys/pal/teeos/net.rs	/^    pub fn duplicate(&self) -> io::Result<UdpSocket> {$/;"	P	implementation:UdpSocket	signature:(&self) -> io::Result<UdpSocket>
duplicate	$RUST/src/sys/pal/unix/fd.rs	/^    pub fn duplicate(&self) -> io::Result<FileDesc> {$/;"	P	implementation:FileDesc	signature:(&self) -> io::Result<FileDesc>
duplicate	$RUST/src/sys/pal/unix/fs.rs	/^    pub fn duplicate(&self) -> io::Result<File> {$/;"	P	implementation:File	signature:(&self) -> io::Result<File>
duplicate	$RUST/src/sys/pal/unix/l4re.rs	/^        pub fn duplicate(&self) -> io::Result<UdpSocket> {$/;"	P	implementation:net::UdpSocket	signature:(&self) -> io::Result<UdpSocket>
duplicate	$RUST/src/sys/pal/unix/net.rs	/^    pub fn duplicate(&self) -> io::Result<Socket> {$/;"	P	implementation:Socket	signature:(&self) -> io::Result<Socket>
duplicate	$RUST/src/sys/pal/unsupported/fs.rs	/^    pub fn duplicate(&self) -> io::Result<File> {$/;"	P	implementation:File	signature:(&self) -> io::Result<File>
duplicate	$RUST/src/sys/pal/unsupported/net.rs	/^    pub fn duplicate(&self) -> io::Result<UdpSocket> {$/;"	P	implementation:UdpSocket	signature:(&self) -> io::Result<UdpSocket>
duplicate	$RUST/src/sys/pal/wasi/fs.rs	/^    pub fn duplicate(&self) -> io::Result<File> {$/;"	P	implementation:File	signature:(&self) -> io::Result<File>
duplicate	$RUST/src/sys/pal/wasi/net.rs	/^    pub fn duplicate(&self) -> io::Result<UdpSocket> {$/;"	P	implementation:UdpSocket	signature:(&self) -> io::Result<UdpSocket>
duplicate	$RUST/src/sys/pal/windows/fs.rs	/^    pub fn duplicate(&self) -> io::Result<File> {$/;"	P	implementation:File	signature:(&self) -> io::Result<File>
duplicate	$RUST/src/sys/pal/windows/handle.rs	/^    pub fn duplicate($/;"	P	implementation:Handle	signature:( &self, access: c::DWORD, inherit: bool, options: c::DWORD, ) -> io::Result<Self>
duplicate	$RUST/src/sys/pal/windows/net.rs	/^    pub fn duplicate(&self) -> io::Result<Socket> {$/;"	P	implementation:Socket	signature:(&self) -> io::Result<Socket>
duplicate	$RUST/src/sys/pal/windows/pipe.rs	/^    fn duplicate(&self) -> io::Result<Self> {$/;"	P	implementation:AnonPipe	signature:(&self) -> io::Result<Self>
duplicate	$RUST/src/sys/pal/xous/net/tcplistener.rs	/^    pub fn duplicate(&self) -> io::Result<TcpListener> {$/;"	P	implementation:TcpListener	signature:(&self) -> io::Result<TcpListener>
duplicate	$RUST/src/sys/pal/xous/net/tcpstream.rs	/^    pub fn duplicate(&self) -> io::Result<TcpStream> {$/;"	P	implementation:TcpStream	signature:(&self) -> io::Result<TcpStream>
duplicate	$RUST/src/sys/pal/xous/net/udp.rs	/^    pub fn duplicate(&self) -> io::Result<UdpSocket> {$/;"	P	implementation:UdpSocket	signature:(&self) -> io::Result<UdpSocket>
duplicate	$RUST/src/sys_common/net.rs	/^    pub fn duplicate(&self) -> io::Result<UdpSocket> {$/;"	P	implementation:UdpSocket	signature:(&self) -> io::Result<UdpSocket>
duplicate_path	$RUST/src/sys/pal/hermit/fd.rs	/^    pub fn duplicate_path(&self, _path: &[u8]) -> io::Result<FileDesc> {$/;"	P	implementation:FileDesc	signature:(&self, _path: &[u8]) -> io::Result<FileDesc>
dur2reltims	$RUST/src/sys/pal/itron/time.rs	/^pub fn dur2reltims(dur: Duration) -> impl Iterator<Item = abi::RELTIM> {$/;"	f	signature:(dur: Duration) -> impl Iterator<Item = abi::RELTIM>
dur2timeout	$RUST/src/sys/pal/windows/mod.rs	/^pub fn dur2timeout(dur: Duration) -> c::DWORD {$/;"	f	signature:(dur: Duration) -> c::DWORD
dur2tmos	$RUST/src/sys/pal/itron/time.rs	/^fn dur2tmos(dur: Duration) -> impl Iterator<Item = abi::TMO> {$/;"	f	signature:(dur: Duration) -> impl Iterator<Item = abi::TMO>
duration	$RUST/src/time.rs	/^    pub fn duration(&self) -> Duration {$/;"	P	implementation:SystemTimeError	signature:(&self) -> Duration
duration_since	$RUST/src/sys/pal/hermit/time.rs	/^    pub fn duration_since(&self, earlier: Instant) -> Duration {$/;"	P	implementation:Instant	signature:(&self, earlier: Instant) -> Duration
duration_since	$RUST/src/time.rs	/^    pub fn duration_since(&self, earlier: SystemTime) -> Result<Duration, SystemTimeError> {$/;"	P	implementation:SystemTime	signature:(&self, earlier: SystemTime) -> Result<Duration, SystemTimeError>
dwActiveProcessorMask	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub dwActiveProcessorMask: usize,$/;"	m	struct:SYSTEM_INFO
dwAllocationGranularity	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub dwAllocationGranularity: u32,$/;"	m	struct:SYSTEM_INFO
dwCatalogEntryId	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub dwCatalogEntryId: u32,$/;"	m	struct:WSAPROTOCOL_INFOW
dwControlKeyState	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub dwControlKeyState: u32,$/;"	m	struct:CONSOLE_READCONSOLE_CONTROL
dwCtrlWakeupMask	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub dwCtrlWakeupMask: u32,$/;"	m	struct:CONSOLE_READCONSOLE_CONTROL
dwFileAttributes	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub dwFileAttributes: u32,$/;"	m	struct:WIN32_FIND_DATAW
dwFillAttribute	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub dwFillAttribute: u32,$/;"	m	struct:STARTUPINFOW
dwFlags	$RUST/src/process/tests.rs	/^        dwFlags: u32,$/;"	m	struct:test_proc_thread_attributes::PROCESSENTRY32W
dwFlags	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub dwFlags: STARTUPINFOW_FLAGS,$/;"	m	struct:STARTUPINFOW
dwHighDateTime	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub dwHighDateTime: u32,$/;"	m	struct:FILETIME
dwLowDateTime	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub dwLowDateTime: u32,$/;"	m	struct:FILETIME
dwMessageSize	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub dwMessageSize: u32,$/;"	m	struct:WSAPROTOCOL_INFOW
dwNumberOfProcessors	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub dwNumberOfProcessors: u32,$/;"	m	struct:SYSTEM_INFO
dwPageSize	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub dwPageSize: u32,$/;"	m	struct:SYSTEM_INFO
dwProcessId	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub dwProcessId: u32,$/;"	m	struct:PROCESS_INFORMATION
dwProcessorType	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub dwProcessorType: u32,$/;"	m	struct:SYSTEM_INFO
dwProviderFlags	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub dwProviderFlags: u32,$/;"	m	struct:WSAPROTOCOL_INFOW
dwProviderReserved	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub dwProviderReserved: u32,$/;"	m	struct:WSAPROTOCOL_INFOW
dwReserved0	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub dwReserved0: u32,$/;"	m	struct:WIN32_FIND_DATAW
dwReserved1	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub dwReserved1: u32,$/;"	m	struct:WIN32_FIND_DATAW
dwServiceFlags1	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub dwServiceFlags1: u32,$/;"	m	struct:WSAPROTOCOL_INFOW
dwServiceFlags2	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub dwServiceFlags2: u32,$/;"	m	struct:WSAPROTOCOL_INFOW
dwServiceFlags3	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub dwServiceFlags3: u32,$/;"	m	struct:WSAPROTOCOL_INFOW
dwServiceFlags4	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub dwServiceFlags4: u32,$/;"	m	struct:WSAPROTOCOL_INFOW
dwSize	$RUST/src/process/tests.rs	/^        dwSize: u32,$/;"	m	struct:test_proc_thread_attributes::PROCESSENTRY32W
dwThreadId	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub dwThreadId: u32,$/;"	m	struct:PROCESS_INFORMATION
dwVolumeSerialNumber	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub dwVolumeSerialNumber: u32,$/;"	m	struct:BY_HANDLE_FILE_INFORMATION
dwX	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub dwX: u32,$/;"	m	struct:STARTUPINFOW
dwXCountChars	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub dwXCountChars: u32,$/;"	m	struct:STARTUPINFOW
dwXSize	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub dwXSize: u32,$/;"	m	struct:STARTUPINFOW
dwY	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub dwY: u32,$/;"	m	struct:STARTUPINFOW
dwYCountChars	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub dwYCountChars: u32,$/;"	m	struct:STARTUPINFOW
dwYSize	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub dwYSize: u32,$/;"	m	struct:STARTUPINFOW
dwarf	$RUST/src/sys/personality/mod.rs	/^mod dwarf;$/;"	n
dwarf_reader	$RUST/src/sys/personality/dwarf/tests.rs	/^fn dwarf_reader() {$/;"	f	signature:()
dyn_keyword	$RUST/src/keyword_docs.rs	/^mod dyn_keyword {}$/;"	n
dynamic_tests	$RUST/src/thread/local.rs	/^mod dynamic_tests;$/;"	n
each_addr	$RUST/src/net/mod.rs	/^fn each_addr<A: ToSocketAddrs, F, T>(addr: A, mut f: F) -> io::Result<T>$/;"	f	signature:<A: ToSocketAddrs, F, T>(addr: A, mut f: F) -> io::Result<T> where F: FnMut(io::Result<&SocketAddr>) -> io::Result<T>,
each_alignment	$RUST/src/sys_common/memchr/tests.rs	/^fn each_alignment() {$/;"	f	signature:()
each_ip	$RUST/src/net/tcp/tests.rs	/^fn each_ip(f: &mut dyn FnMut(SocketAddr)) {$/;"	f	signature:(f: &mut dyn FnMut(SocketAddr))
each_ip	$RUST/src/net/udp/tests.rs	/^fn each_ip(f: &mut dyn FnMut(SocketAddr, SocketAddr)) {$/;"	f	signature:(f: &mut dyn FnMut(SocketAddr, SocketAddr))
egetkey	$RUST/src/os/fortanix_sgx/arch.rs	/^pub fn egetkey(request: &Align512<[u8; 512]>) -> Result<Align16<[u8; 16]>, u32> {$/;"	f	signature:(request: &Align512<[u8; 512]>) -> Result<Align16<[u8; 16]>, u32>
eh_unwinding	$RUST/src/sys/pal/xous/os.rs	/^mod eh_unwinding {$/;"	n
elapsed	$RUST/src/sys/pal/hermit/time.rs	/^    pub fn elapsed(&self) -> Duration {$/;"	P	implementation:Instant	signature:(&self) -> Duration
elapsed	$RUST/src/time.rs	/^    pub fn elapsed(&self) -> Result<Duration, SystemTimeError> {$/;"	P	implementation:SystemTime	signature:(&self) -> Result<Duration, SystemTimeError>
elem_idx	$RUST/src/sys/pal/sgx/abi/tls/sync_bitset.rs	/^    elem_idx: usize,$/;"	m	struct:SyncBitsetIter
elf_entry	$RUST/src/sys/pal/sgx/abi/entry.S	/^elf_entry:$/;"	l
else_keyword	$RUST/src/keyword_docs.rs	/^mod else_keyword {}$/;"	n
empty	$RUST/src/collections/hash/map/tests.rs	/^    fn empty() {$/;"	f	module:test_extract_if	signature:()
empty	$RUST/src/io/util.rs	/^pub const fn empty() -> Empty {$/;"	f	signature:() -> Empty
empty	$RUST/src/os/xous/ffi/definitions/memoryflags.rs	/^    pub fn empty() -> MemoryFlags {$/;"	P	implementation:MemoryFlags	signature:() -> MemoryFlags
empty	$RUST/src/sys/pal/windows/args/tests.rs	/^fn empty() {$/;"	f	signature:()
empty_box	$RUST/src/sys/os_str/bytes.rs	/^    pub fn empty_box() -> Box<Slice> {$/;"	P	implementation:Slice	signature:() -> Box<Slice>
empty_box	$RUST/src/sys/os_str/wtf8.rs	/^    pub fn empty_box() -> Box<Slice> {$/;"	P	implementation:Slice	signature:() -> Box<Slice>
empty_box	$RUST/src/sys_common/wtf8.rs	/^    pub fn empty_box() -> Box<Wtf8> {$/;"	P	implementation:Wtf8	signature:() -> Box<Wtf8>
empty_lines_mid_message	$RUST/src/error/tests.rs	/^fn empty_lines_mid_message() {$/;"	f	signature:()
empty_on_stack	$RUST/src/sync/mpmc/zero.rs	/^    fn empty_on_stack() -> Packet<T> {$/;"	P	implementation:Packet	signature:() -> Packet<T>
empty_reads	$RUST/src/io/util/tests.rs	/^fn empty_reads() {$/;"	f	signature:()
empty_seeks	$RUST/src/io/util/tests.rs	/^fn empty_seeks() {$/;"	f	signature:()
empty_sinks	$RUST/src/io/util/tests.rs	/^fn empty_sinks() {$/;"	f	signature:()
empty_size_hint	$RUST/src/io/tests.rs	/^fn empty_size_hint() {$/;"	f	signature:()
empty_user_slice	$RUST/src/sys/pal/sgx/abi/panic.rs	/^fn empty_user_slice() -> &'static mut UserRef<[u8]> {$/;"	f	signature:() -> &'static mut UserRef<[u8]>
emscripten	$RUST/src/os/mod.rs	/^pub mod emscripten;$/;"	n
emscripten_futex_wait	$RUST/src/sys/pal/unix/futex.rs	/^    fn emscripten_futex_wait($/;"	f	signature:( addr: *const AtomicU32, val: libc::c_uint, max_wait_ms: libc::c_double, ) -> libc::c_int
emscripten_futex_wake	$RUST/src/sys/pal/unix/futex.rs	/^    fn emscripten_futex_wake(addr: *const AtomicU32, count: libc::c_int) -> libc::c_int;$/;"	f	signature:(addr: *const AtomicU32, count: libc::c_int) -> libc::c_int
ena_dsp	$RUST/src/sys/pal/itron/abi.rs	/^    pub fn ena_dsp() -> ER;$/;"	f	signature:() -> ER
enabled	$RUST/src/backtrace.rs	/^    fn enabled() -> bool {$/;"	P	implementation:Backtrace	signature:() -> bool
enclave_usercalls_internal_define_usercalls	$RUST/src/sys/pal/sgx/abi/usercalls/raw.rs	/^macro_rules! enclave_usercalls_internal_define_usercalls {$/;"	M
encode_wide	$RUST/src/os/windows/ffi.rs	/^    fn encode_wide(&self) -> EncodeWide<'_>;$/;"	P	interface:OsStrExt	signature:(&self) -> EncodeWide<'_>
encode_wide	$RUST/src/sys_common/wtf8.rs	/^    pub fn encode_wide(&self) -> EncodeWide<'_> {$/;"	P	implementation:Wtf8	signature:(&self) -> EncodeWide<'_>
end_of_stream	$RUST/src/sys/pal/unix/fs.rs	/^    end_of_stream: bool,$/;"	m	struct:ReadDir
ends_with	$RUST/src/path.rs	/^    pub fn ends_with<P: AsRef<Path>>(&self, child: P) -> bool {$/;"	P	implementation:Path	signature:<P: AsRef<Path>>(&self, child: P) -> bool
ensure_no_nuls	$RUST/src/sys/pal/windows/process.rs	/^pub(crate) fn ensure_no_nuls<T: AsRef<OsStr>>(str: T) -> io::Result<T> {$/;"	f	signature:<T: AsRef<OsStr>>(str: T) -> io::Result<T>
entry	$RUST/src/collections/hash/map.rs	/^    pub fn entry(&mut self, key: K) -> Entry<'_, K, V> {$/;"	f	signature:(&mut self, key: K) -> Entry<'_, K, V>
entry	$RUST/src/sys/pal/sgx/abi/mod.rs	/^extern "C" fn entry(p1: u64, p2: u64, p3: u64, secondary: bool, p4: u64, p5: u64) -> EntryReturn/;"	f	signature:(p1: u64, p2: u64, p3: u64, secondary: bool, p4: u64, p5: u64) -> EntryReturn
entry	$RUST/src/sys/pal/sgx/thread.rs	/^    pub(super) fn entry() -> JoinNotifier {$/;"	P	implementation:Thread	signature:() -> JoinNotifier
entry	$RUST/src/sys/pal/solid/fs.rs	/^    entry: abi::dirent,$/;"	m	struct:DirEntry
entry	$RUST/src/sys/pal/unix/fs.rs	/^    entry: dirent64_min,$/;"	m	struct:DirEntry
entry_sanitize_final	$RUST/src/sys/pal/sgx/abi/entry.S	/^.macro entry_sanitize_final$/;"	m
enum_keyword	$RUST/src/keyword_docs.rs	/^mod enum_keyword {}$/;"	n
env	$RUST/src/lib.rs	/^pub mod env;$/;"	n
env	$RUST/src/os/uefi/mod.rs	/^pub mod env;$/;"	n
env	$RUST/src/process.rs	/^    pub fn env<K, V>(&mut self, key: K, val: V) -> &mut Command$/;"	P	implementation:Command	signature:<K, V>(&mut self, key: K, val: V) -> &mut Command where K: AsRef<OsStr>, V: AsRef<OsStr>,
env	$RUST/src/sys/pal/hermit/mod.rs	/^pub mod env;$/;"	n
env	$RUST/src/sys/pal/hermit/os.rs	/^pub fn env() -> Env {$/;"	f	signature:() -> Env
env	$RUST/src/sys/pal/sgx/mod.rs	/^pub mod env;$/;"	n
env	$RUST/src/sys/pal/sgx/os.rs	/^pub fn env() -> Env {$/;"	f	signature:() -> Env
env	$RUST/src/sys/pal/solid/mod.rs	/^pub mod env;$/;"	n
env	$RUST/src/sys/pal/solid/os.rs	/^pub fn env() -> Env {$/;"	f	signature:() -> Env
env	$RUST/src/sys/pal/teeos/mod.rs	/^pub mod env;$/;"	n
env	$RUST/src/sys/pal/teeos/os.rs	/^pub fn env() -> Env {$/;"	f	signature:() -> Env
env	$RUST/src/sys/pal/uefi/mod.rs	/^pub mod env;$/;"	n
env	$RUST/src/sys/pal/uefi/os.rs	/^pub fn env() -> Env {$/;"	f	signature:() -> Env
env	$RUST/src/sys/pal/unix/mod.rs	/^pub mod env;$/;"	n
env	$RUST/src/sys/pal/unix/os.rs	/^pub fn env() -> Env {$/;"	f	signature:() -> Env
env	$RUST/src/sys/pal/unix/process/process_common.rs	/^    env: CommandEnv,$/;"	m	struct:Command
env	$RUST/src/sys/pal/unsupported/mod.rs	/^pub mod env;$/;"	n
env	$RUST/src/sys/pal/unsupported/os.rs	/^pub fn env() -> Env {$/;"	f	signature:() -> Env
env	$RUST/src/sys/pal/unsupported/process.rs	/^    env: CommandEnv,$/;"	m	struct:Command
env	$RUST/src/sys/pal/wasi/mod.rs	/^pub mod env;$/;"	n
env	$RUST/src/sys/pal/wasi/os.rs	/^pub fn env() -> Env {$/;"	f	signature:() -> Env
env	$RUST/src/sys/pal/wasm/mod.rs	/^pub mod env;$/;"	n
env	$RUST/src/sys/pal/windows/mod.rs	/^pub mod env;$/;"	n
env	$RUST/src/sys/pal/windows/os.rs	/^pub fn env() -> Env {$/;"	f	signature:() -> Env
env	$RUST/src/sys/pal/windows/process.rs	/^    env: CommandEnv,$/;"	m	struct:Command
env	$RUST/src/sys/pal/xous/mod.rs	/^pub mod env;$/;"	n
env	$RUST/src/sys/pal/xous/os.rs	/^pub fn env() -> Env {$/;"	f	signature:() -> Env
env	$RUST/src/sys/pal/zkvm/mod.rs	/^pub mod env;$/;"	n
env	$RUST/src/sys/pal/zkvm/os.rs	/^pub fn env() -> Env {$/;"	f	signature:() -> Env
env	$RUST/src/thread/scoped.rs	/^    env: PhantomData<&'env mut &'env ()>,$/;"	m	struct:Scope
env_clear	$RUST/src/process.rs	/^    pub fn env_clear(&mut self) -> &mut Command {$/;"	P	implementation:Command	signature:(&mut self) -> &mut Command
env_empty	$RUST/src/process/tests.rs	/^fn env_empty() {$/;"	f	signature:()
env_mut	$RUST/src/sys/pal/unix/process/process_common.rs	/^    pub fn env_mut(&mut self) -> &mut CommandEnv {$/;"	P	implementation:Command	signature:(&mut self) -> &mut CommandEnv
env_mut	$RUST/src/sys/pal/unsupported/process.rs	/^    pub fn env_mut(&mut self) -> &mut CommandEnv {$/;"	P	implementation:Command	signature:(&mut self) -> &mut CommandEnv
env_mut	$RUST/src/sys/pal/windows/process.rs	/^    pub fn env_mut(&mut self) -> &mut CommandEnv {$/;"	P	implementation:Command	signature:(&mut self) -> &mut CommandEnv
env_read_lock	$RUST/src/sys/pal/solid/os.rs	/^pub fn env_read_lock() -> impl Drop {$/;"	f	signature:() -> impl Drop
env_read_lock	$RUST/src/sys/pal/unix/os.rs	/^pub fn env_read_lock() -> impl Drop {$/;"	f	signature:() -> impl Drop
env_remove	$RUST/src/process.rs	/^    pub fn env_remove<K: AsRef<OsStr>>(&mut self, key: K) -> &mut Command {$/;"	P	implementation:Command	signature:<K: AsRef<OsStr>>(&mut self, key: K) -> &mut Command
env_saw_path	$RUST/src/sys/pal/unix/process/process_common.rs	/^    pub fn env_saw_path(&self) -> bool {$/;"	P	implementation:Command	signature:(&self) -> bool
environ	$RUST/src/sys/pal/solid/os.rs	/^        static mut environ: *const *const c_char;$/;"	v	function:env
environ	$RUST/src/sys/pal/unix/os.rs	/^pub unsafe fn environ() -> *mut *const *const c_char {$/;"	f	signature:() -> *mut *const *const c_char
envs	$RUST/src/process.rs	/^    pub fn envs<I, K, V>(&mut self, vars: I) -> &mut Command$/;"	P	implementation:Command	signature:<I, K, V>(&mut self, vars: I) -> &mut Command where I: IntoIterator<Item = (K, V)>, K: AsRef<OsStr>, V: AsRef<OsStr>,
eprint	$RUST/src/macros.rs	/^macro_rules! eprint {$/;"	M
eprintln	$RUST/src/macros.rs	/^macro_rules! eprintln {$/;"	M
epsilon	$RUST/src/sys/pal/windows/time.rs	/^        pub fn epsilon() -> Duration {$/;"	P	implementation:perf_counter::PerformanceCounterInstant	signature:() -> Duration
eq_ignore_ascii_case	$RUST/src/ascii.rs	/^    fn eq_ignore_ascii_case(&self, other: &Self) -> bool;$/;"	P	interface:AsciiExt	signature:(&self, other: &Self) -> bool
eq_ignore_ascii_case	$RUST/src/ffi/os_str.rs	/^    pub fn eq_ignore_ascii_case<S: AsRef<OsStr>>(&self, other: S) -> bool {$/;"	P	implementation:OsStr	signature:<S: AsRef<OsStr>>(&self, other: S) -> bool
eq_ignore_ascii_case	$RUST/src/sys/os_str/bytes.rs	/^    pub fn eq_ignore_ascii_case(&self, other: &Self) -> bool {$/;"	P	implementation:Slice	signature:(&self, other: &Self) -> bool
eq_ignore_ascii_case	$RUST/src/sys/os_str/wtf8.rs	/^    pub fn eq_ignore_ascii_case(&self, other: &Self) -> bool {$/;"	P	implementation:Slice	signature:(&self, other: &Self) -> bool
eq_ignore_ascii_case	$RUST/src/sys_common/wtf8.rs	/^    pub fn eq_ignore_ascii_case(&self, other: &Self) -> bool {$/;"	P	implementation:Wtf8	signature:(&self, other: &Self) -> bool
eq_sorted	$RUST/src/collections/hash/map/tests.rs	/^        fn eq_sorted<I: IntoIterator<Item = Self::Item>>(self, other: I) -> bool;$/;"	P	interface:test_extract_if::EqSorted	signature:<I: IntoIterator<Item = Self::Item>>(self, other: I) -> bool
ereport	$RUST/src/os/fortanix_sgx/arch.rs	/^pub fn ereport($/;"	f	signature:( targetinfo: &Align512<[u8; 512]>, reportdata: &Align128<[u8; 64]>, ) -> Align512<[u8; 432]>
err	$RUST/src/io/buffered/tests.rs	/^    fn err() -> io::Error {$/;"	f	function:line_vectored_partial_and_errors	signature:() -> io::Error
err2io	$RUST/src/sys/pal/wasi/mod.rs	/^fn err2io(err: wasi::Errno) -> std_io::Error {$/;"	f	signature:(err: wasi::Errno) -> std_io::Error
err_if_negative	$RUST/src/sys/pal/itron/error.rs	/^    pub fn err_if_negative(er: abi::ER) -> Result<abi::ER, Self> {$/;"	P	implementation:ItronError	signature:(er: abi::ER) -> Result<abi::ER, Self>
errno	$RUST/src/sys/pal/hermit/os.rs	/^pub fn errno() -> i32 {$/;"	f	signature:() -> i32
errno	$RUST/src/sys/pal/sgx/os.rs	/^pub fn errno() -> i32 {$/;"	f	signature:() -> i32
errno	$RUST/src/sys/pal/solid/os.rs	/^pub fn errno() -> i32 {$/;"	f	signature:() -> i32
errno	$RUST/src/sys/pal/teeos/os.rs	/^pub fn errno() -> i32 {$/;"	f	signature:() -> i32
errno	$RUST/src/sys/pal/uefi/os.rs	/^pub fn errno() -> RawOsError {$/;"	f	signature:() -> RawOsError
errno	$RUST/src/sys/pal/unix/os.rs	/^pub fn errno() -> i32 {$/;"	f	signature:() -> i32
errno	$RUST/src/sys/pal/unsupported/os.rs	/^pub fn errno() -> i32 {$/;"	f	signature:() -> i32
errno	$RUST/src/sys/pal/wasi/os.rs	/^pub fn errno() -> i32 {$/;"	f	signature:() -> i32
errno	$RUST/src/sys/pal/windows/os.rs	/^pub fn errno() -> i32 {$/;"	f	signature:() -> i32
errno	$RUST/src/sys/pal/xous/os.rs	/^pub fn errno() -> i32 {$/;"	f	signature:() -> i32
errno	$RUST/src/sys/pal/zkvm/os.rs	/^pub fn errno() -> i32 {$/;"	f	signature:() -> i32
errno_location	$RUST/src/sys/pal/unix/os.rs	/^    fn errno_location() -> *mut c_int;$/;"	f	signature:() -> *mut c_int
erroneous_flush_retried	$RUST/src/io/buffered/tests.rs	/^fn erroneous_flush_retried() {$/;"	f	signature:()
error	$RUST/src/error.rs	/^    error: E,$/;"	m	struct:Report
error	$RUST/src/fs/tests.rs	/^macro_rules! error {$/;"	M
error	$RUST/src/io/buffered/mod.rs	/^    pub fn error(&self) -> &Error {$/;"	P	implementation:IntoInnerError	signature:(&self) -> &Error
error	$RUST/src/io/error.rs	/^    error: Box<dyn error::Error + Send + Sync>,$/;"	m	struct:Custom
error	$RUST/src/io/mod.rs	/^mod error;$/;"	n
error	$RUST/src/lib.rs	/^pub mod error;$/;"	n
error	$RUST/src/sync/mpmc/mod.rs	/^mod error;$/;"	n
error	$RUST/src/sys/pal/solid/mod.rs	/^pub(crate) mod error;$/;"	n
error	$RUST/src/sys/pal/windows/pipe.rs	/^            error: u32,$/;"	m	struct:AnonPipe::alertable_io_internal::AsyncResult
error_after_max_writes	$RUST/src/io/buffered/tests.rs	/^    pub error_after_max_writes: bool,$/;"	m	struct:ProgrammableSink
error_contains	$RUST/src/fs/tests.rs	/^macro_rules! error_contains {$/;"	M
error_formats_multi_line_with_rude_display_impl	$RUST/src/error/tests.rs	/^fn error_formats_multi_line_with_rude_display_impl() {$/;"	f	signature:()
error_formats_single_line_with_rude_display_impl	$RUST/src/error/tests.rs	/^fn error_formats_single_line_with_rude_display_impl() {$/;"	f	signature:()
error_name	$RUST/src/sys/pal/itron/error.rs	/^pub fn error_name(er: abi::ER) -> Option<&'static str> {$/;"	f	signature:(er: abi::ER) -> Option<&'static str>
error_name	$RUST/src/sys/pal/solid/error.rs	/^pub fn error_name(er: abi::ER) -> Option<&'static str> {$/;"	f	signature:(er: abi::ER) -> Option<&'static str>
error_name	$RUST/src/sys/pal/solid/net.rs	/^pub(super) fn error_name(er: abi::ER) -> Option<&'static str> {$/;"	f	signature:(er: abi::ER) -> Option<&'static str>
error_string	$RUST/src/sys/pal/hermit/os.rs	/^pub fn error_string(_errno: i32) -> String {$/;"	f	signature:(_errno: i32) -> String
error_string	$RUST/src/sys/pal/sgx/os.rs	/^pub fn error_string(errno: i32) -> String {$/;"	f	signature:(errno: i32) -> String
error_string	$RUST/src/sys/pal/solid/os.rs	/^pub fn error_string(errno: i32) -> String {$/;"	f	signature:(errno: i32) -> String
error_string	$RUST/src/sys/pal/teeos/os.rs	/^pub fn error_string(_errno: i32) -> String {$/;"	f	signature:(_errno: i32) -> String
error_string	$RUST/src/sys/pal/uefi/os.rs	/^pub fn error_string(errno: RawOsError) -> String {$/;"	f	signature:(errno: RawOsError) -> String
error_string	$RUST/src/sys/pal/unix/os.rs	/^pub fn error_string(errno: i32) -> String {$/;"	f	signature:(errno: i32) -> String
error_string	$RUST/src/sys/pal/unsupported/os.rs	/^pub fn error_string(_errno: i32) -> String {$/;"	f	signature:(_errno: i32) -> String
error_string	$RUST/src/sys/pal/wasi/os.rs	/^pub fn error_string(errno: i32) -> String {$/;"	f	signature:(errno: i32) -> String
error_string	$RUST/src/sys/pal/windows/os.rs	/^pub fn error_string(mut errnum: i32) -> String {$/;"	f	signature:(mut errnum: i32) -> String
error_string	$RUST/src/sys/pal/xous/os.rs	/^pub fn error_string(errno: i32) -> String {$/;"	f	signature:(errno: i32) -> String
error_string	$RUST/src/sys/pal/zkvm/os.rs	/^pub fn error_string(_errno: i32) -> String {$/;"	f	signature:(_errno: i32) -> String
error_with_backtrace_outputs_correctly_with_one_source	$RUST/src/error/tests.rs	/^fn error_with_backtrace_outputs_correctly_with_one_source() {$/;"	f	signature:()
error_with_backtrace_outputs_correctly_with_two_sources	$RUST/src/error/tests.rs	/^fn error_with_backtrace_outputs_correctly_with_two_sources() {$/;"	f	signature:()
error_with_no_sources_formats_multi_line_correctly	$RUST/src/error/tests.rs	/^fn error_with_no_sources_formats_multi_line_correctly() {$/;"	f	signature:()
error_with_no_sources_formats_single_line_correctly	$RUST/src/error/tests.rs	/^fn error_with_no_sources_formats_single_line_correctly() {$/;"	f	signature:()
errors_that_start_with_newline_formats_correctly	$RUST/src/error/tests.rs	/^fn errors_that_start_with_newline_formats_correctly() {$/;"	f	signature:()
errors_with_multiple_writes_on_same_line_dont_insert_erroneous_newlines	$RUST/src/error/tests.rs	/^fn errors_with_multiple_writes_on_same_line_dont_insert_erroneous_newlines() {$/;"	f	signature:()
errors_with_string_interpolation_formats_correctly	$RUST/src/error/tests.rs	/^fn errors_with_string_interpolation_formats_correctly() {$/;"	f	signature:()
espidf	$RUST/src/os/mod.rs	/^pub mod espidf;$/;"	n
eval_once	$RUST/src/sync/once_lock/tests.rs	/^    macro_rules! eval_once {$/;"	M	function:eval_once_macro
eval_once_macro	$RUST/src/sync/once_lock/tests.rs	/^fn eval_once_macro() {$/;"	f	signature:()
event	$RUST/src/sys/pal/windows/pipe.rs	/^    event: Handle,$/;"	m	struct:AsyncPipe
event_code	$RUST/src/process/tests.rs	/^        pub event_code: DWORD,$/;"	m	struct:test_creation_flags::DEBUG_EVENT
events	$RUST/src/io/buffered/tests.rs	/^    pub events: Vec<RecordedEvent>,$/;"	m	struct:WriteRecorder
exd_tsk	$RUST/src/sys/pal/itron/abi.rs	/^    pub fn exd_tsk() -> ER;$/;"	f	signature:() -> ER
exec	$RUST/src/os/unix/process.rs	/^    fn exec(&mut self) -> io::Error;$/;"	P	interface:CommandExt	signature:(&mut self) -> io::Error
exec	$RUST/src/sys/pal/unix/process/process_fuchsia.rs	/^    pub fn exec(&mut self, default: Stdio) -> io::Error {$/;"	P	implementation:Command	signature:(&mut self, default: Stdio) -> io::Error
exec	$RUST/src/sys/pal/unix/process/process_unix.rs	/^    pub fn exec(&mut self, default: Stdio) -> io::Error {$/;"	P	implementation:Command	signature:(&mut self, default: Stdio) -> io::Error
exec	$RUST/src/sys/pal/unix/process/process_unsupported.rs	/^    pub fn exec(&mut self, _default: Stdio) -> io::Error {$/;"	P	implementation:Command	signature:(&mut self, _default: Stdio) -> io::Error
exec	$RUST/src/sys/pal/unix/process/process_vxworks.rs	/^    pub fn exec(&mut self, default: Stdio) -> io::Error {$/;"	P	implementation:Command	signature:(&mut self, default: Stdio) -> io::Error
exhausted	$RUST/src/thread/mod.rs	/^        fn exhausted() -> ! {$/;"	f	method:ThreadId::new	signature:() -> !
exinf	$RUST/src/sys/pal/itron/abi.rs	/^    pub exinf: EXINF,$/;"	m	struct:T_CTSK
exists	$RUST/src/path.rs	/^    pub fn exists(&self) -> bool {$/;"	P	implementation:Path	signature:(&self) -> bool
exit	$RUST/src/os/xous/ffi.rs	/^pub(crate) fn exit(return_code: u32) -> ! {$/;"	f	signature:(return_code: u32) -> !
exit	$RUST/src/process.rs	/^pub fn exit(code: i32) -> ! {$/;"	f	signature:(code: i32) -> !
exit	$RUST/src/sys/pal/hermit/os.rs	/^pub fn exit(code: i32) -> ! {$/;"	f	signature:(code: i32) -> !
exit	$RUST/src/sys/pal/sgx/abi/usercalls/mod.rs	/^pub fn exit(panic: bool) -> ! {$/;"	f	signature:(panic: bool) -> !
exit	$RUST/src/sys/pal/sgx/os.rs	/^pub fn exit(code: i32) -> ! {$/;"	f	signature:(code: i32) -> !
exit	$RUST/src/sys/pal/solid/os.rs	/^pub fn exit(code: i32) -> ! {$/;"	f	signature:(code: i32) -> !
exit	$RUST/src/sys/pal/teeos/os.rs	/^pub fn exit(_code: i32) -> ! {$/;"	f	signature:(_code: i32) -> !
exit	$RUST/src/sys/pal/uefi/os.rs	/^pub fn exit(code: i32) -> ! {$/;"	f	signature:(code: i32) -> !
exit	$RUST/src/sys/pal/unix/os.rs	/^pub fn exit(code: i32) -> ! {$/;"	f	signature:(code: i32) -> !
exit	$RUST/src/sys/pal/unsupported/os.rs	/^pub fn exit(_code: i32) -> ! {$/;"	f	signature:(_code: i32) -> !
exit	$RUST/src/sys/pal/wasi/os.rs	/^pub fn exit(code: i32) -> ! {$/;"	f	signature:(code: i32) -> !
exit	$RUST/src/sys/pal/windows/os.rs	/^pub fn exit(code: i32) -> ! {$/;"	f	signature:(code: i32) -> !
exit	$RUST/src/sys/pal/xous/os.rs	/^pub fn exit(code: i32) -> ! {$/;"	f	signature:(code: i32) -> !
exit	$RUST/src/sys/pal/zkvm/os.rs	/^pub fn exit(_code: i32) -> ! {$/;"	f	signature:(_code: i32) -> !
exit_boot_service_handler	$RUST/src/sys/pal/uefi/mod.rs	/^extern "efiapi" fn exit_boot_service_handler(_e: r_efi::efi::Event, _ctx: *mut crate::ffi::c_voi/;"	f	signature:(_e: r_efi::efi::Event, _ctx: *mut crate::ffi::c_void)
exit_ok	$RUST/src/process.rs	/^    pub fn exit_ok(&self) -> Result<(), ExitStatusError> {$/;"	P	implementation:ExitStatus	signature:(&self) -> Result<(), ExitStatusError>
exit_ok	$RUST/src/sys/pal/unix/process/process_fuchsia.rs	/^    pub fn exit_ok(&self) -> Result<(), ExitStatusError> {$/;"	P	implementation:ExitStatus	signature:(&self) -> Result<(), ExitStatusError>
exit_ok	$RUST/src/sys/pal/unix/process/process_unix.rs	/^    pub fn exit_ok(&self) -> Result<(), ExitStatusError> {$/;"	P	implementation:ExitStatus	signature:(&self) -> Result<(), ExitStatusError>
exit_ok	$RUST/src/sys/pal/unix/process/process_unsupported/wait_status.rs	/^    pub fn exit_ok(&self) -> Result<(), ExitStatusError> {$/;"	P	implementation:ExitStatus	signature:(&self) -> Result<(), ExitStatusError>
exit_ok	$RUST/src/sys/pal/unix/process/process_vxworks.rs	/^    pub fn exit_ok(&self) -> Result<(), ExitStatusError> {$/;"	P	implementation:ExitStatus	signature:(&self) -> Result<(), ExitStatusError>
exit_ok	$RUST/src/sys/pal/unsupported/process.rs	/^    pub fn exit_ok(&self) -> Result<(), ExitStatusError> {$/;"	P	implementation:ExitStatus	signature:(&self) -> Result<(), ExitStatusError>
exit_ok	$RUST/src/sys/pal/windows/process.rs	/^    pub fn exit_ok(&self) -> Result<(), ExitStatusError> {$/;"	P	implementation:ExitStatus	signature:(&self) -> Result<(), ExitStatusError>
exit_process	$RUST/src/process.rs	/^    pub fn exit_process(self) -> ! {$/;"	P	implementation:ExitCode	signature:(self) -> !
exit_reported_right	$RUST/src/process/tests.rs	/^fn exit_reported_right() {$/;"	f	signature:()
exit_with_code	$RUST/src/sys/pal/sgx/abi/mod.rs	/^pub(super) fn exit_with_code(code: isize) -> ! {$/;"	f	signature:(code: isize) -> !
exited	$RUST/src/sys/pal/unix/process/process_unix.rs	/^    fn exited(&self) -> bool {$/;"	P	implementation:ExitStatus	signature:(&self) -> bool
exited	$RUST/src/sys/pal/unix/process/process_vxworks.rs	/^    fn exited(&self) -> bool {$/;"	P	implementation:ExitStatus	signature:(&self) -> bool
exitstatus_display_tests	$RUST/src/sys/pal/unix/process/process_unix/tests.rs	/^fn exitstatus_display_tests() {$/;"	f	signature:()
exp	$RUST/src/f32.rs	/^    pub fn exp(self) -> f32 {$/;"	P	implementation:f32	signature:(self) -> f32
exp	$RUST/src/f64.rs	/^    pub fn exp(self) -> f64 {$/;"	P	implementation:f64	signature:(self) -> f64
exp2	$RUST/src/f32.rs	/^    pub fn exp2(self) -> f32 {$/;"	P	implementation:f32	signature:(self) -> f32
exp2	$RUST/src/f64.rs	/^    pub fn exp2(self) -> f64 {$/;"	P	implementation:f64	signature:(self) -> f64
exp_m1	$RUST/src/f32.rs	/^    pub fn exp_m1(self) -> f32 {$/;"	P	implementation:f32	signature:(self) -> f32
exp_m1	$RUST/src/f64.rs	/^    pub fn exp_m1(self) -> f64 {$/;"	P	implementation:f64	signature:(self) -> f64
expect_success	$RUST/src/sys/pal/itron/error.rs	/^pub fn expect_success(er: abi::ER, msg: &&str) -> abi::ER {$/;"	f	signature:(er: abi::ER, msg: &&str) -> abi::ER
expect_success_aborting	$RUST/src/sys/pal/itron/error.rs	/^pub fn expect_success_aborting(er: abi::ER, msg: &&str) -> abi::ER {$/;"	f	signature:(er: abi::ER, msg: &&str) -> abi::ER
expm1	$RUST/src/sys/cmath/builtins.rs	/^    pub fn expm1(n: f64) -> f64;$/;"	f	signature:(n: f64) -> f64
expm1	$RUST/src/sys/cmath/windows.rs	/^    pub fn expm1(n: c_double) -> c_double;$/;"	f	signature:(n: c_double) -> c_double
expm1f	$RUST/src/sys/cmath/builtins.rs	/^    pub fn expm1f(n: f32) -> f32;$/;"	f	signature:(n: f32) -> f32
expm1f	$RUST/src/sys/cmath/windows.rs	/^    pub fn expm1f(n: c_float) -> c_float;$/;"	f	signature:(n: c_float) -> c_float
extend	$RUST/src/collections/hash/map.rs	/^    fn extend<T: IntoIterator<Item = (K, V)>>(&mut self, iter: T) {$/;"	f	signature:<T: IntoIterator<Item = (K, V)>>(&mut self, iter: T)
extend	$RUST/src/collections/hash/set.rs	/^    fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {$/;"	f	signature:<I: IntoIterator<Item = T>>(&mut self, iter: I)
extend	$RUST/src/ffi/os_str.rs	/^    fn extend<T: IntoIterator<Item = OsString>>(&mut self, iter: T) {$/;"	P	implementation:OsString	signature:<T: IntoIterator<Item = OsString>>(&mut self, iter: T)
extend	$RUST/src/path.rs	/^    fn extend<I: IntoIterator<Item = P>>(&mut self, iter: I) {$/;"	P	implementation:PathBuf	signature:<I: IntoIterator<Item = P>>(&mut self, iter: I)
extend	$RUST/src/sys_common/wtf8.rs	/^    fn extend<T: IntoIterator<Item = CodePoint>>(&mut self, iter: T) {$/;"	P	implementation:Wtf8Buf	signature:<T: IntoIterator<Item = CodePoint>>(&mut self, iter: T)
extend_one	$RUST/src/collections/hash/map.rs	/^    fn extend_one(&mut self, (k, v): (K, V)) {$/;"	f	signature:(&mut self, (k, v): (K, V))
extend_one	$RUST/src/collections/hash/set.rs	/^    fn extend_one(&mut self, item: T) {$/;"	f	signature:(&mut self, item: T)
extend_one	$RUST/src/path.rs	/^    fn extend_one(&mut self, p: P) {$/;"	P	implementation:PathBuf	signature:(&mut self, p: P)
extend_one	$RUST/src/sys_common/wtf8.rs	/^    fn extend_one(&mut self, code_point: CodePoint) {$/;"	P	implementation:Wtf8Buf	signature:(&mut self, code_point: CodePoint)
extend_reserve	$RUST/src/collections/hash/map.rs	/^    fn extend_reserve(&mut self, additional: usize) {$/;"	f	signature:(&mut self, additional: usize)
extend_reserve	$RUST/src/collections/hash/set.rs	/^    fn extend_reserve(&mut self, additional: usize) {$/;"	f	signature:(&mut self, additional: usize)
extend_reserve	$RUST/src/sys_common/wtf8.rs	/^    fn extend_reserve(&mut self, additional: usize) {$/;"	P	implementation:Wtf8Buf	signature:(&mut self, additional: usize)
extension	$RUST/src/path.rs	/^    pub fn extension(&self) -> Option<&OsStr> {$/;"	P	implementation:Path	signature:(&self) -> Option<&OsStr>
extern_keyword	$RUST/src/keyword_docs.rs	/^mod extern_keyword {}$/;"	n
extra	$RUST/src/sys/pal/itron/spin.rs	/^    extra: UnsafeCell<MaybeUninit<T>>,$/;"	m	struct:SpinIdOnceCell
extra	$RUST/src/sys_common/wtf8.rs	/^    extra: u16,$/;"	m	struct:EncodeWide
extract_if	$RUST/src/collections/hash/map.rs	/^    pub fn extract_if<F>(&mut self, pred: F) -> ExtractIf<'_, K, V, F>$/;"	P	implementation:HashMap	signature:<F>(&mut self, pred: F) -> ExtractIf<'_, K, V, F> where F: FnMut(&K, &mut V) -> bool,
extract_if	$RUST/src/collections/hash/set.rs	/^    pub fn extract_if<F>(&mut self, pred: F) -> ExtractIf<'_, T, F>$/;"	P	implementation:HashSet	signature:<F>(&mut self, pred: F) -> ExtractIf<'_, T, F> where F: FnMut(&T) -> bool,
f32	$RUST/src/f32.rs	/^impl f32 {$/;"	c
f32	$RUST/src/lib.rs	/^pub mod f32;$/;"	n
f64	$RUST/src/f64.rs	/^impl f64 {$/;"	c
f64	$RUST/src/lib.rs	/^pub mod f64;$/;"	n
fail	$RUST/src/sys/pal/itron/error.rs	/^pub fn fail(e: impl fmt::Display, msg: &&str) -> ! {$/;"	f	signature:(e: impl fmt::Display, msg: &&str) -> !
fail_aborting	$RUST/src/sys/pal/itron/error.rs	/^pub fn fail_aborting(e: impl fmt::Display, msg: &&str) -> ! {$/;"	f	signature:(e: impl fmt::Display, msg: &&str) -> !
failed	$RUST/src/sync/poison.rs	/^    failed: AtomicBool,$/;"	m	struct:Flag
fallback	$RUST/src/sys/pal/unix/os.rs	/^    unsafe fn fallback() -> Option<OsString> {$/;"	f	function:home_dir	signature:() -> Option<OsString>
fallback_rng	$RUST/src/sys/pal/windows/rand.rs	/^fn fallback_rng() -> (u64, u64) {$/;"	f	signature:() -> (u64, u64)
false_keyword	$RUST/src/keyword_docs.rs	/^mod false_keyword {}$/;"	n
fchmod_works	$RUST/src/fs/tests.rs	/^fn fchmod_works() {$/;"	f	signature:()
fchown	$RUST/src/os/unix/fs.rs	/^pub fn fchown<F: AsFd>(fd: F, uid: Option<u32>, gid: Option<u32>) -> io::Result<()> {$/;"	f	signature:<F: AsFd>(fd: F, uid: Option<u32>, gid: Option<u32>) -> io::Result<()>
fchown	$RUST/src/sys/pal/unix/fs.rs	/^pub fn fchown(fd: c_int, uid: u32, gid: u32) -> io::Result<()> {$/;"	f	signature:(fd: c_int, uid: u32, gid: u32) -> io::Result<()>
fcopyfile	$RUST/src/sys/pal/unix/fs.rs	/^        fn fcopyfile($/;"	f	function:copy	signature:( from: libc::c_int, to: libc::c_int, state: copyfile_state_t, flags: copyfile_flags_t, ) -> libc::c_int
fd_array	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fd_array: [SOCKET; 64],$/;"	m	struct:FD_SET
fd_count	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fd_count: u32,$/;"	m	struct:FD_SET
fd_set	$RUST/src/sys/pal/solid/abi/sockets.rs	/^pub struct fd_set {$/;"	s
fd_to_meta	$RUST/src/sys/pal/unix/kernel_copy.rs	/^fn fd_to_meta<T: AsRawFd>(fd: &T) -> FdMeta {$/;"	f	signature:<T: AsRawFd>(fd: &T) -> FdMeta
fdflag	$RUST/src/sys/pal/wasi/fs.rs	/^    fn fdflag(&mut self, bit: wasi::Fdflags, set: bool) {$/;"	P	implementation:OpenOptions	signature:(&mut self, bit: wasi::Fdflags, set: bool)
fdflags	$RUST/src/sys/pal/wasi/fs.rs	/^    fdflags: wasi::Fdflags,$/;"	m	struct:OpenOptions
fdim	$RUST/src/sys/cmath/builtins.rs	/^    pub fn fdim(a: f64, b: f64) -> f64;$/;"	f	signature:(a: f64, b: f64) -> f64
fdim	$RUST/src/sys/cmath/windows.rs	/^    pub fn fdim(a: c_double, b: c_double) -> c_double;$/;"	f	signature:(a: c_double, b: c_double) -> c_double
fdimf	$RUST/src/sys/cmath/builtins.rs	/^    pub fn fdimf(a: f32, b: f32) -> f32;$/;"	f	signature:(a: f32, b: f32) -> f32
fdimf	$RUST/src/sys/cmath/windows.rs	/^    pub fn fdimf(a: c_float, b: c_float) -> c_float;$/;"	f	signature:(a: c_float, b: c_float) -> c_float
fdio_fd_clone	$RUST/src/sys/pal/unix/process/zircon.rs	/^    pub fn fdio_fd_clone(fd: c_int, out_handle: *mut zx_handle_t) -> zx_status_t;$/;"	f	signature:(fd: c_int, out_handle: *mut zx_handle_t) -> zx_status_t
fdio_fd_create	$RUST/src/sys/pal/unix/process/zircon.rs	/^    pub fn fdio_fd_create(handle: zx_handle_t, fd: *mut c_int) -> zx_status_t;$/;"	f	signature:(handle: zx_handle_t, fd: *mut c_int) -> zx_status_t
fdio_spawn_action_t	$RUST/src/sys/pal/unix/process/zircon.rs	/^pub struct fdio_spawn_action_t {$/;"	s
fdio_spawn_etc	$RUST/src/sys/pal/unix/process/zircon.rs	/^    pub fn fdio_spawn_etc($/;"	f	signature:( job: zx_handle_t, flags: u32, path: *const c_char, argv: *const *const c_char, envp: *const *const c_char, action_count: size_t, actions: *const fdio_spawn_action_t, process: *mut zx_handle_t, err_msg: *mut c_char, ) -> zx_status_t
fdopendir	$RUST/src/sys/pal/unix/fs.rs	/^        pub unsafe fn fdopendir(fd: c_int) -> *mut DIR {$/;"	f	module:remove_dir_impl::macos_weak	signature:(fd: c_int) -> *mut DIR
fdreaddir	$RUST/src/sys/pal/unix/fs.rs	/^    fn fdreaddir(dir_fd: OwnedFd) -> io::Result<(ReadDir, RawFd)> {$/;"	f	module:remove_dir_impl	signature:(dir_fd: OwnedFd) -> io::Result<(ReadDir, RawFd)>
fds	$RUST/src/sys/pal/solid/abi/sockets.rs	/^    pub fds: [c_int; SOLID_NET_FD_SETSIZE],$/;"	m	struct:fd_set
fdstat_set_flags	$RUST/src/os/wasi/fs.rs	/^    fn fdstat_set_flags(&self, flags: u16) -> io::Result<()>;$/;"	P	interface:FileExt	signature:(&self, flags: u16) -> io::Result<()>
fdstat_set_rights	$RUST/src/os/wasi/fs.rs	/^    fn fdstat_set_rights(&self, rights: u64, inheriting: u64) -> io::Result<()>;$/;"	P	interface:FileExt	signature:(&self, rights: u64, inheriting: u64) -> io::Result<()>
fetch	$RUST/src/sys/pal/unix/weak.rs	/^unsafe fn fetch(name: &str) -> *mut libc::c_void {$/;"	f	signature:(name: &str) -> *mut libc::c_void
ffi	$RUST/src/lib.rs	/^pub mod ffi;$/;"	n
ffi	$RUST/src/os/fortanix_sgx/mod.rs	/^pub mod ffi;$/;"	n
ffi	$RUST/src/os/hermit/mod.rs	/^pub mod ffi;$/;"	n
ffi	$RUST/src/os/solid/mod.rs	/^pub mod ffi;$/;"	n
ffi	$RUST/src/os/uefi/mod.rs	/^pub mod ffi;$/;"	n
ffi	$RUST/src/os/unix/mod.rs	/^pub mod ffi;$/;"	n
ffi	$RUST/src/os/wasi/mod.rs	/^pub mod ffi;$/;"	n
ffi	$RUST/src/os/windows/mod.rs	/^pub mod ffi;$/;"	n
ffi	$RUST/src/os/xous/mod.rs	/^pub mod ffi;$/;"	n
fflags_t	$RUST/src/os/dragonfly/raw.rs	/^pub type fflags_t = u32;$/;"	t
fflags_t	$RUST/src/os/freebsd/raw.rs	/^pub type fflags_t = u32;$/;"	t
fflags_t	$RUST/src/os/illumos/raw.rs	/^pub type fflags_t = u32;$/;"	t
fflags_t	$RUST/src/os/netbsd/raw.rs	/^pub type fflags_t = u32;$/;"	t
fflags_t	$RUST/src/os/openbsd/raw.rs	/^pub type fflags_t = u32;$/;"	t
fflags_t	$RUST/src/os/solaris/raw.rs	/^pub type fflags_t = u32;$/;"	t
file_attr	$RUST/src/sys/pal/hermit/fs.rs	/^    pub fn file_attr(&self) -> io::Result<FileAttr> {$/;"	P	implementation:File	signature:(&self) -> io::Result<FileAttr>
file_attr	$RUST/src/sys/pal/unix/fs.rs	/^    pub fn file_attr(&self) -> io::Result<FileAttr> {$/;"	P	implementation:File	signature:(&self) -> io::Result<FileAttr>
file_attr	$RUST/src/sys/pal/unsupported/fs.rs	/^    pub fn file_attr(&self) -> io::Result<FileAttr> {$/;"	P	implementation:File	signature:(&self) -> io::Result<FileAttr>
file_attr	$RUST/src/sys/pal/wasi/fs.rs	/^    pub fn file_attr(&self) -> io::Result<FileAttr> {$/;"	P	implementation:File	signature:(&self) -> io::Result<FileAttr>
file_attr	$RUST/src/sys/pal/windows/fs.rs	/^    pub fn file_attr(&self) -> io::Result<FileAttr> {$/;"	P	implementation:File	signature:(&self) -> io::Result<FileAttr>
file_attributes	$RUST/src/os/windows/fs.rs	/^    fn file_attributes(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
file_create_new_already_exists_error	$RUST/src/fs/tests.rs	/^fn file_create_new_already_exists_error() {$/;"	f	signature:()
file_index	$RUST/src/os/windows/fs.rs	/^    fn file_index(&self) -> Option<u64>;$/;"	P	interface:MetadataExt	signature:(&self) -> Option<u64>
file_index	$RUST/src/sys/pal/windows/fs.rs	/^    pub fn file_index(&self) -> Option<u64> {$/;"	P	implementation:FileAttr	signature:(&self) -> Option<u64>
file_name	$RUST/src/fs.rs	/^    pub fn file_name(&self) -> OsString {$/;"	P	implementation:DirEntry	signature:(&self) -> OsString
file_name	$RUST/src/path.rs	/^    pub fn file_name(&self) -> Option<&OsStr> {$/;"	P	implementation:Path	signature:(&self) -> Option<&OsStr>
file_name	$RUST/src/sys/pal/hermit/fs.rs	/^    pub fn file_name(&self) -> OsString {$/;"	P	implementation:DirEntry	signature:(&self) -> OsString
file_name	$RUST/src/sys/pal/solid/fs.rs	/^    pub fn file_name(&self) -> OsString {$/;"	P	implementation:DirEntry	signature:(&self) -> OsString
file_name	$RUST/src/sys/pal/unix/fs.rs	/^    pub fn file_name(&self) -> OsString {$/;"	P	implementation:DirEntry	signature:(&self) -> OsString
file_name	$RUST/src/sys/pal/unsupported/fs.rs	/^    pub fn file_name(&self) -> OsString {$/;"	P	implementation:DirEntry	signature:(&self) -> OsString
file_name	$RUST/src/sys/pal/wasi/fs.rs	/^    pub fn file_name(&self) -> OsString {$/;"	P	implementation:DirEntry	signature:(&self) -> OsString
file_name	$RUST/src/sys/pal/windows/fs.rs	/^    pub fn file_name(&self) -> OsString {$/;"	P	implementation:DirEntry	signature:(&self) -> OsString
file_name_os_str	$RUST/src/sys/pal/unix/fs.rs	/^    pub fn file_name_os_str(&self) -> &OsStr {$/;"	P	implementation:DirEntry	signature:(&self) -> &OsStr
file_name_ref	$RUST/src/os/unix/fs.rs	/^    fn file_name_ref(&self) -> &OsStr;$/;"	P	interface:DirEntryExt2	signature:(&self) -> &OsStr
file_open_not_found	$RUST/src/fs/tests.rs	/^fn file_open_not_found() {$/;"	f	signature:()
file_prefix	$RUST/src/path.rs	/^    pub fn file_prefix(&self) -> Option<&OsStr> {$/;"	P	implementation:Path	signature:(&self) -> Option<&OsStr>
file_size	$RUST/src/os/windows/fs.rs	/^    fn file_size(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
file_size	$RUST/src/sys/pal/windows/fs.rs	/^    file_size: u64,$/;"	m	struct:FileAttr
file_stem	$RUST/src/path.rs	/^    pub fn file_stem(&self) -> Option<&OsStr> {$/;"	P	implementation:Path	signature:(&self) -> Option<&OsStr>
file_test_directoryinfo_check_exists_before_and_after_mkdir	$RUST/src/fs/tests.rs	/^fn file_test_directoryinfo_check_exists_before_and_after_mkdir() {$/;"	f	signature:()
file_test_directoryinfo_readdir	$RUST/src/fs/tests.rs	/^fn file_test_directoryinfo_readdir() {$/;"	f	signature:()
file_test_fileinfo_check_exists_before_and_after_file_creation	$RUST/src/fs/tests.rs	/^fn file_test_fileinfo_check_exists_before_and_after_file_creation() {$/;"	f	signature:()
file_test_fileinfo_false_when_checking_is_file_on_a_directory	$RUST/src/fs/tests.rs	/^fn file_test_fileinfo_false_when_checking_is_file_on_a_directory() {$/;"	f	signature:()
file_test_io_eof	$RUST/src/fs/tests.rs	/^fn file_test_io_eof() {$/;"	f	signature:()
file_test_io_non_positional_read	$RUST/src/fs/tests.rs	/^fn file_test_io_non_positional_read() {$/;"	f	signature:()
file_test_io_read_write_at	$RUST/src/fs/tests.rs	/^fn file_test_io_read_write_at() {$/;"	f	signature:()
file_test_io_seek_and_tell_smoke_test	$RUST/src/fs/tests.rs	/^fn file_test_io_seek_and_tell_smoke_test() {$/;"	f	signature:()
file_test_io_seek_and_write	$RUST/src/fs/tests.rs	/^fn file_test_io_seek_and_write() {$/;"	f	signature:()
file_test_io_seek_read_write	$RUST/src/fs/tests.rs	/^fn file_test_io_seek_read_write() {$/;"	f	signature:()
file_test_io_seek_shakedown	$RUST/src/fs/tests.rs	/^fn file_test_io_seek_shakedown() {$/;"	f	signature:()
file_test_io_smoke_test	$RUST/src/fs/tests.rs	/^fn file_test_io_smoke_test() {$/;"	f	signature:()
file_test_iounlinking_invalid_path_should_raise_condition	$RUST/src/fs/tests.rs	/^fn file_test_iounlinking_invalid_path_should_raise_condition() {$/;"	f	signature:()
file_test_read_buf	$RUST/src/fs/tests.rs	/^fn file_test_read_buf() {$/;"	f	signature:()
file_test_stat_is_correct_on_is_dir	$RUST/src/fs/tests.rs	/^fn file_test_stat_is_correct_on_is_dir() {$/;"	f	signature:()
file_test_stat_is_correct_on_is_file	$RUST/src/fs/tests.rs	/^fn file_test_stat_is_correct_on_is_file() {$/;"	f	signature:()
file_try_clone	$RUST/src/fs/tests.rs	/^fn file_try_clone() {$/;"	f	signature:()
file_type	$RUST/src/fs.rs	/^    pub fn file_type(&self) -> io::Result<FileType> {$/;"	P	implementation:DirEntry	signature:(&self) -> io::Result<FileType>
file_type	$RUST/src/sys/pal/hermit/fs.rs	/^    pub fn file_type(&self) -> io::Result<FileType> {$/;"	P	implementation:DirEntry	signature:(&self) -> io::Result<FileType>
file_type	$RUST/src/sys/pal/solid/fs.rs	/^    pub fn file_type(&self) -> io::Result<FileType> {$/;"	P	implementation:DirEntry	signature:(&self) -> io::Result<FileType>
file_type	$RUST/src/sys/pal/unix/fs.rs	/^    pub fn file_type(&self) -> io::Result<FileType> {$/;"	P	implementation:DirEntry	signature:(&self) -> io::Result<FileType>
file_type	$RUST/src/sys/pal/unsupported/fs.rs	/^    pub fn file_type(&self) -> io::Result<FileType> {$/;"	P	implementation:DirEntry	signature:(&self) -> io::Result<FileType>
file_type	$RUST/src/sys/pal/wasi/fs.rs	/^    pub fn file_type(&self) -> io::Result<FileType> {$/;"	P	implementation:DirEntry	signature:(&self) -> io::Result<FileType>
file_type	$RUST/src/sys/pal/windows/fs.rs	/^    pub fn file_type(&self) -> io::Result<FileType> {$/;"	P	implementation:DirEntry	signature:(&self) -> io::Result<FileType>
filename	$RUST/src/backtrace.rs	/^    filename: Option<BytesOrWide>,$/;"	m	struct:BacktraceSymbol
fileno	$RUST/src/sys/pal/zkvm/abi.rs	/^pub mod fileno {$/;"	n
filestat_get	$RUST/src/sys/pal/wasi/fd.rs	/^    pub(crate) fn filestat_get(&self) -> io::Result<wasi::Filestat> {$/;"	P	implementation:WasiFd	signature:(&self) -> io::Result<wasi::Filestat>
filestat_set_size	$RUST/src/sys/pal/wasi/fd.rs	/^    pub fn filestat_set_size(&self, size: u64) -> io::Result<()> {$/;"	P	implementation:WasiFd	signature:(&self, size: u64) -> io::Result<()>
filestat_set_times	$RUST/src/sys/pal/wasi/fd.rs	/^    pub fn filestat_set_times($/;"	P	implementation:WasiFd	signature:( &self, atim: wasi::Timestamp, mtim: wasi::Timestamp, fstflags: wasi::Fstflags, ) -> io::Result<()>
fill	$RUST/src/panicking.rs	/^        fn fill(&mut self) -> &mut String {$/;"	P	implementation:begin_panic_handler::FormatStringPayload	signature:(&mut self) -> &mut String
fill_buf	$RUST/src/io/buffered/bufreader.rs	/^    fn fill_buf(&mut self) -> io::Result<&[u8]> {$/;"	P	implementation:BufReader	signature:(&mut self) -> io::Result<&[u8]>
fill_buf	$RUST/src/io/buffered/bufreader/buffer.rs	/^    pub fn fill_buf(&mut self, mut reader: impl Read) -> io::Result<&[u8]> {$/;"	P	implementation:Buffer	signature:(&mut self, mut reader: impl Read) -> io::Result<&[u8]>
fill_buf	$RUST/src/io/cursor.rs	/^    fn fill_buf(&mut self) -> io::Result<&[u8]> {$/;"	f	signature:(&mut self) -> io::Result<&[u8]>
fill_buf	$RUST/src/io/impls.rs	/^    fn fill_buf(&mut self) -> io::Result<&[u8]> {$/;"	P	implementation:u8	signature:(&mut self) -> io::Result<&[u8]>
fill_buf	$RUST/src/io/mod.rs	/^    fn fill_buf(&mut self) -> Result<&[u8]>;$/;"	P	interface:BufRead	signature:(&mut self) -> Result<&[u8]>
fill_buf	$RUST/src/io/stdio.rs	/^    fn fill_buf(&mut self) -> io::Result<&[u8]> {$/;"	P	implementation:StdinLock	signature:(&mut self) -> io::Result<&[u8]>
fill_buf	$RUST/src/io/tests.rs	/^        fn fill_buf(&mut self) -> io::Result<&[u8]> {$/;"	P	implementation:take_eof::R	signature:(&mut self) -> io::Result<&[u8]>
fill_buf	$RUST/src/io/util.rs	/^    fn fill_buf(&mut self) -> io::Result<&[u8]> {$/;"	P	implementation:Empty	signature:(&mut self) -> io::Result<&[u8]>
fill_bytes	$RUST/src/sys/pal/teeos/rand.rs	/^    pub fn fill_bytes(v: &mut [u8]) {$/;"	f	module:imp	signature:(v: &mut [u8])
fill_bytes	$RUST/src/sys/pal/unix/rand.rs	/^    pub fn fill_bytes(v: &mut [u8]) {$/;"	f	module:imp	signature:(v: &mut [u8])
fill_dir_buff	$RUST/src/sys/pal/windows/fs.rs	/^    fn fill_dir_buff(&self, buffer: &mut DirBuff, restart: bool) -> io::Result<bool> {$/;"	P	implementation:File	signature:(&self, buffer: &mut DirBuff, restart: bool) -> io::Result<bool>
fill_utf16_buf	$RUST/src/sys/pal/windows/mod.rs	/^fn fill_utf16_buf<F1, F2, T>(mut f1: F1, f2: F2) -> crate::io::Result<T>$/;"	f	signature:<F1, F2, T>(mut f1: F1, f2: F2) -> crate::io::Result<T> where F1: FnMut(*mut u16, c::DWORD) -> c::DWORD, F2: FnOnce(&[u16]) -> T,
filled	$RUST/src/io/buffered/bufreader/buffer.rs	/^    pub fn filled(&self) -> usize {$/;"	P	implementation:Buffer	signature:(&self) -> usize
final_lead_surrogate	$RUST/src/sys_common/wtf8.rs	/^    fn final_lead_surrogate(&self) -> Option<u16> {$/;"	P	implementation:Wtf8	signature:(&self) -> Option<u16>
find	$RUST/src/sys/pal/xous/os.rs	/^        fn find(&self, _pc: usize) -> Option<unwind::FrameInfo> {$/;"	P	implementation:eh_unwinding::EhFrameFinder	signature:(&self, _pc: usize) -> Option<unwind::FrameInfo>
find_eh_action	$RUST/src/sys/personality/dwarf/eh.rs	/^pub unsafe fn find_eh_action(lsda: *const u8, context: &EHContext<'_>) -> Result<EHAction, ()> {$/;"	f	signature:(lsda: *const u8, context: &EHContext<'_>) -> Result<EHAction, ()>
find_eh_action	$RUST/src/sys/personality/gcc.rs	/^unsafe fn find_eh_action(context: *mut uw::_Unwind_Context) -> Result<EHAction, ()> {$/;"	f	signature:(context: *mut uw::_Unwind_Context) -> Result<EHAction, ()>
find_existing	$RUST/benches/hash/map.rs	/^fn find_existing(b: &mut Bencher) {$/;"	f	signature:(b: &mut Bencher)
find_mountpoint	$RUST/src/sys/pal/unix/thread.rs	/^    fn find_mountpoint(group_path: &Path) -> Option<(Cow<'static, str>, &Path)> {$/;"	f	module:cgroups	signature:(group_path: &Path) -> Option<(Cow<'static, str>, &Path)>
find_nonexisting	$RUST/benches/hash/map.rs	/^fn find_nonexisting(b: &mut Bencher) {$/;"	f	signature:(b: &mut Bencher)
finish	$RUST/src/hash/random.rs	/^    fn finish(&self) -> u64 {$/;"	P	implementation:DefaultHasher	signature:(&self) -> u64
finish	$RUST/src/sys/pal/windows/pipe.rs	/^    fn finish(&mut self) -> io::Result<()> {$/;"	P	implementation:AsyncPipe	signature:(&mut self) -> io::Result<()>
finished	$RUST/src/path.rs	/^    fn finished(&self) -> bool {$/;"	P	implementation:Components	signature:(&self) -> bool
finished_panic_hook	$RUST/src/panicking.rs	/^    pub fn finished_panic_hook() {}$/;"	f	module:panic_count	signature:()
first	$RUST/src/io/mod.rs	/^    first: T,$/;"	m	struct:Chain
first	$RUST/src/sys/pal/itron/condvar.rs	/^        first: NonNull<Waiter>,$/;"	m	struct:waiter_queue::ListHead
first	$RUST/src/sys/pal/windows/fs.rs	/^    first: Option<c::WIN32_FIND_DATAW>,$/;"	m	struct:ReadDir
first_seek	$RUST/src/io/buffered/tests.rs	/^        first_seek: bool,$/;"	m	struct:test_buffered_reader_seek_underflow_discard_buffer_between_seeks::ErrAfterFirstSeekReader
flags	$RUST/src/sys/pal/unix/process/zircon.rs	/^    pub flags: zx_info_process_flags_t,$/;"	m	struct:zx_info_process_t
flags	$RUST/src/sys/pal/windows/process.rs	/^    flags: u32,$/;"	m	struct:Command
flavor	$RUST/src/sync/mpmc/mod.rs	/^    flavor: SenderFlavor<T>,$/;"	m	struct:Sender
flgatr	$RUST/src/sys/pal/itron/abi.rs	/^    pub flgatr: ATR,$/;"	m	struct:T_CFLG
floor	$RUST/src/f32.rs	/^    pub fn floor(self) -> f32 {$/;"	P	implementation:f32	signature:(self) -> f32
floor	$RUST/src/f64.rs	/^    pub fn floor(self) -> f64 {$/;"	P	implementation:f64	signature:(self) -> f64
flush	$RUST/src/fs.rs	/^    fn flush(&mut self) -> io::Result<()> {$/;"	P	implementation:File	signature:(&mut self) -> io::Result<()>
flush	$RUST/src/io/buffered/bufwriter.rs	/^    fn flush(&mut self) -> io::Result<()> {$/;"	P	implementation:BufWriter	signature:(&mut self) -> io::Result<()>
flush	$RUST/src/io/buffered/linewriter.rs	/^    fn flush(&mut self) -> io::Result<()> {$/;"	P	implementation:LineWriter	signature:(&mut self) -> io::Result<()>
flush	$RUST/src/io/buffered/linewritershim.rs	/^    fn flush(&mut self) -> io::Result<()> {$/;"	P	implementation:LineWriterShim	signature:(&mut self) -> io::Result<()>
flush	$RUST/src/io/buffered/tests.rs	/^    fn flush(&mut self) -> io::Result<()> {$/;"	P	implementation:WriteRecorder	signature:(&mut self) -> io::Result<()>
flush	$RUST/src/io/copy/tests.rs	/^    fn flush(&mut self) -> Result<()> {$/;"	P	implementation:WriteObserver	signature:(&mut self) -> Result<()>
flush	$RUST/src/io/cursor.rs	/^    fn flush(&mut self) -> io::Result<()> {$/;"	f	signature:(&mut self) -> io::Result<()>
flush	$RUST/src/io/impls.rs	/^    fn flush(&mut self) -> io::Result<()> {$/;"	P	implementation:u8	signature:(&mut self) -> io::Result<()>
flush	$RUST/src/io/mod.rs	/^    fn flush(&mut self) -> Result<()>;$/;"	P	interface:Write	signature:(&mut self) -> Result<()>
flush	$RUST/src/io/stdio.rs	/^    fn flush(&mut self) -> io::Result<()> {$/;"	P	implementation:StdoutRaw	signature:(&mut self) -> io::Result<()>
flush	$RUST/src/io/tests.rs	/^    fn flush(&mut self) -> io::Result<()> {$/;"	P	implementation:TestWriter	signature:(&mut self) -> io::Result<()>
flush	$RUST/src/io/util.rs	/^    fn flush(&mut self) -> io::Result<()> {$/;"	P	implementation:Sink	signature:(&mut self) -> io::Result<()>
flush	$RUST/src/net/tcp.rs	/^    fn flush(&mut self) -> io::Result<()> {$/;"	P	implementation:TcpStream	signature:(&mut self) -> io::Result<()>
flush	$RUST/src/os/unix/net/stream.rs	/^    fn flush(&mut self) -> io::Result<()> {$/;"	P	implementation:UnixStream	signature:(&mut self) -> io::Result<()>
flush	$RUST/src/process.rs	/^    fn flush(&mut self) -> io::Result<()> {$/;"	P	implementation:ChildStdin	signature:(&mut self) -> io::Result<()>
flush	$RUST/src/sys/pal/hermit/fs.rs	/^    pub fn flush(&self) -> io::Result<()> {$/;"	P	implementation:File	signature:(&self) -> io::Result<()>
flush	$RUST/src/sys/pal/hermit/stdio.rs	/^    fn flush(&mut self) -> io::Result<()> {$/;"	P	implementation:Stdout	signature:(&mut self) -> io::Result<()>
flush	$RUST/src/sys/pal/sgx/abi/panic.rs	/^    fn flush(&mut self) -> io::Result<()> {$/;"	P	implementation:SgxPanicOutput	signature:(&mut self) -> io::Result<()>
flush	$RUST/src/sys/pal/sgx/abi/usercalls/mod.rs	/^pub fn flush(fd: Fd) -> IoResult<()> {$/;"	f	signature:(fd: Fd) -> IoResult<()>
flush	$RUST/src/sys/pal/sgx/fd.rs	/^    pub fn flush(&self) -> io::Result<()> {$/;"	P	implementation:FileDesc	signature:(&self) -> io::Result<()>
flush	$RUST/src/sys/pal/sgx/stdio.rs	/^    fn flush(&mut self) -> io::Result<()> {$/;"	P	implementation:Stdout	signature:(&mut self) -> io::Result<()>
flush	$RUST/src/sys/pal/solid/stdio.rs	/^    fn flush(&mut self) -> io::Result<()> {$/;"	P	implementation:Stdout	signature:(&mut self) -> io::Result<()>
flush	$RUST/src/sys/pal/teeos/stdio.rs	/^    fn flush(&mut self) -> io::Result<()> {$/;"	P	implementation:Stdout	signature:(&mut self) -> io::Result<()>
flush	$RUST/src/sys/pal/uefi/stdio.rs	/^    fn flush(&mut self) -> io::Result<()> {$/;"	P	implementation:Stdout	signature:(&mut self) -> io::Result<()>
flush	$RUST/src/sys/pal/unix/fs.rs	/^    pub fn flush(&self) -> io::Result<()> {$/;"	P	implementation:File	signature:(&self) -> io::Result<()>
flush	$RUST/src/sys/pal/unix/stdio.rs	/^    fn flush(&mut self) -> io::Result<()> {$/;"	P	implementation:Stdout	signature:(&mut self) -> io::Result<()>
flush	$RUST/src/sys/pal/unsupported/fs.rs	/^    pub fn flush(&self) -> io::Result<()> {$/;"	P	implementation:File	signature:(&self) -> io::Result<()>
flush	$RUST/src/sys/pal/unsupported/stdio.rs	/^    fn flush(&mut self) -> io::Result<()> {$/;"	P	implementation:Stdout	signature:(&mut self) -> io::Result<()>
flush	$RUST/src/sys/pal/wasi/fs.rs	/^    pub fn flush(&self) -> io::Result<()> {$/;"	P	implementation:File	signature:(&self) -> io::Result<()>
flush	$RUST/src/sys/pal/wasi/stdio.rs	/^    fn flush(&mut self) -> io::Result<()> {$/;"	P	implementation:Stdout	signature:(&mut self) -> io::Result<()>
flush	$RUST/src/sys/pal/windows/fs.rs	/^    pub fn flush(&self) -> io::Result<()> {$/;"	P	implementation:File	signature:(&self) -> io::Result<()>
flush	$RUST/src/sys/pal/windows/stdio.rs	/^    fn flush(&mut self) -> io::Result<()> {$/;"	P	implementation:Stdout	signature:(&mut self) -> io::Result<()>
flush	$RUST/src/sys/pal/xous/stdio.rs	/^    fn flush(&mut self) -> io::Result<()> {$/;"	P	implementation:Stdout	signature:(&mut self) -> io::Result<()>
flush	$RUST/src/sys/pal/zkvm/stdio.rs	/^    fn flush(&mut self) -> io::Result<()> {$/;"	P	implementation:Stdout	signature:(&mut self) -> io::Result<()>
flush_buf	$RUST/src/io/buffered/bufwriter.rs	/^    pub(in crate::io) fn flush_buf(&mut self) -> io::Result<()> {$/;"	P	implementation:BufWriter	signature:(&mut self) -> io::Result<()>
flush_if_completed_line	$RUST/src/io/buffered/linewritershim.rs	/^    fn flush_if_completed_line(&mut self) -> io::Result<()> {$/;"	P	implementation:LineWriterShim	signature:(&mut self) -> io::Result<()>
fmt	$RUST/src/backtrace.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:BytesOrWide	signature:(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/collections/hash/map.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	f	signature:(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/collections/hash/set.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	f	signature:(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/env.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:VarsOs	signature:(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/error.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	f	signature:(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/error/tests.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	f	signature:(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/ffi/os_str.rs	/^    fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:OsString	signature:(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/fs.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Metadata	signature:(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/hash/random.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:RandomState	signature:(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/io/buffered/bufreader.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	f	signature:(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/io/buffered/bufwriter.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	f	signature:(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/io/buffered/linewriter.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	f	signature:(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/io/buffered/mod.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:IntoInnerError	signature:(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/io/error.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Repr	signature:(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/io/error/tests.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Bojji	signature:(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/io/mod.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:IoSliceMut	signature:(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/io/stdio.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:StdoutLock	signature:(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/io/util.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Repeat	signature:(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/net/tcp.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:TcpStream	signature:(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/net/udp.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:UdpSocket	signature:(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/os/fd/owned.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:OwnedFd	signature:(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/os/solid/io.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:OwnedFd	signature:(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/os/unix/net/addr.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:SocketAddr	signature:(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/os/unix/net/datagram.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:UnixDatagram	signature:(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/os/unix/net/listener.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:UnixListener	signature:(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/os/unix/net/stream.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:UnixStream	signature:(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/os/windows/io/handle.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:NullHandleError	signature:(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/os/windows/io/socket.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:OwnedSocket	signature:(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/os/xous/ffi/definitions.rs	/^    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {$/;"	P	implementation:Error	signature:(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
fmt	$RUST/src/os/xous/ffi/definitions/memoryflags.rs	/^    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {$/;"	P	implementation:MemoryFlags	signature:(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
fmt	$RUST/src/path.rs	/^    fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:PathBuf	signature:(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/process.rs	/^    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Output	signature:(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/sync/barrier.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:BarrierWaitResult	signature:(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/sync/condvar.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Condvar	signature:(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/sync/lazy_lock.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:LazyLock	signature:(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/sync/mpmc/error.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:SendTimeoutError	signature:(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/sync/mpmc/mod.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Sender	signature:(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/sync/mpmc/zero.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:ZeroToken	signature:(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/sync/mpsc/mod.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:TrySendError	signature:(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/sync/mutex.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:MutexGuard	signature:(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/sync/once.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:OnceState	signature:(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/sync/once_lock.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:OnceLock	signature:(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/sync/poison.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:TryLockError	signature:(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/sync/rwlock.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:RwLockWriteGuard	signature:(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/sys/os_str/bytes.rs	/^    fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Buf	signature:(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/sys/os_str/wtf8.rs	/^    fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Slice	signature:(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/sys/pal/common/thread_local/fast_local.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Key	signature:(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/sys/pal/common/thread_local/os_local.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Key	signature:(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/sys/pal/common/thread_local/static_local.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Key	signature:(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/sys/pal/hermit/args.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Args	signature:(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/sys/pal/hermit/fs.rs	/^    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:ReadDir	signature:(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/sys/pal/hermit/os.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:JoinPathsError	signature:(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/sys/pal/itron/error.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:ItronError	signature:(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/sys/pal/sgx/args.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Args	signature:(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/sys/pal/sgx/net.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:TcpStream	signature:(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/sys/pal/sgx/os.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:JoinPathsError	signature:(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/sys/pal/solid/fs.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:ReadDir	signature:(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/sys/pal/solid/os.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:JoinPathsError	signature:(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/sys/pal/teeos/net.rs	/^    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:UdpSocket	signature:(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/sys/pal/teeos/os.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:JoinPathsError	signature:(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/sys/pal/uefi/args.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Args	signature:(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/sys/pal/uefi/os.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:JoinPathsError	signature:(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/sys/pal/unix/args.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Args	signature:(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/sys/pal/unix/fs.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:ReadDir	signature:(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/sys/pal/unix/l4re.rs	/^        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:net::UdpSocket	signature:(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/sys/pal/unix/os.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:JoinPathsError	signature:(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/sys/pal/unix/process/process_common.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:ExitCode	signature:(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/sys/pal/unix/process/process_fuchsia.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:ExitStatus	signature:(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/sys/pal/unix/process/process_unix.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:ExitStatusError	signature:(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/sys/pal/unix/process/process_unsupported/wait_status.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:ExitStatus	signature:(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/sys/pal/unix/process/process_vxworks.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:ExitStatus	signature:(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/sys/pal/unix/time.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:SystemTime	signature:(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/sys/pal/unsupported/args.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Args	signature:(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/sys/pal/unsupported/fs.rs	/^    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:ReadDir	signature:(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/sys/pal/unsupported/net.rs	/^    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:UdpSocket	signature:(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/sys/pal/unsupported/os.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:JoinPathsError	signature:(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/sys/pal/unsupported/process.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:ExitStatus	signature:(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/sys/pal/wasi/args.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Args	signature:(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/sys/pal/wasi/fs.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:ReadDir	signature:(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/sys/pal/wasi/net.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:UdpSocket	signature:(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/sys/pal/wasi/os.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:JoinPathsError	signature:(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/sys/pal/windows/args.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Args	signature:(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/sys/pal/windows/fs.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:ReadDir	signature:(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/sys/pal/windows/os.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:JoinPathsError	signature:(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/sys/pal/windows/process.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:ExitStatus	signature:(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/sys/pal/windows/time.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:SystemTime	signature:(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/sys/pal/xous/net/tcplistener.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:TcpListener	signature:(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/sys/pal/xous/net/tcpstream.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:TcpStream	signature:(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/sys/pal/xous/net/udp.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:UdpSocket	signature:(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/sys/pal/xous/os.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:JoinPathsError	signature:(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/sys/pal/zkvm/args.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Args	signature:(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/sys/pal/zkvm/os.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:JoinPathsError	signature:(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/sys_common/backtrace.rs	/^        fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:_print::DisplayBacktrace	signature:(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/sys_common/net.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:UdpSocket	signature:(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/sys_common/once/queue.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Once	signature:(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/sys_common/process.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:CommandEnv	signature:(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/sys_common/wtf8.rs	/^    fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Wtf8Buf	signature:(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/thread/local.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:LocalKey	signature:(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/thread/mod.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:Thread	signature:(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/thread/scoped.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:ScopedJoinHandle	signature:(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
fmt	$RUST/src/time.rs	/^    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	P	implementation:SystemTimeError	signature:(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
fmt_multiline	$RUST/src/error.rs	/^    fn fmt_multiline(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	f	signature:(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
fmt_singleline	$RUST/src/error.rs	/^    fn fmt_singleline(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {$/;"	f	signature:(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
fn_keyword	$RUST/src/keyword_docs.rs	/^mod fn_keyword {}$/;"	n
fold	$RUST/src/collections/hash/map.rs	/^    fn fold<B, F>(self, init: B, mut f: F) -> B$/;"	P	implementation:ValuesMut	signature:<B, F>(self, init: B, mut f: F) -> B where Self: Sized, F: FnMut(B, Self::Item) -> B,
fold	$RUST/src/collections/hash/set.rs	/^    fn fold<B, F>(self, init: B, mut f: F) -> B$/;"	f	signature:<B, F>(self, init: B, mut f: F) -> B where Self: Sized, F: FnMut(B, Self::Item) -> B,
foo	$RUST/src/thread/tests.rs	/^    fn foo(x: &u8) {$/;"	f	function:test_scoped_threads_nll	signature:(x: &u8)
for_keyword	$RUST/src/keyword_docs.rs	/^mod for_keyword {}$/;"	n
force	$RUST/src/sync/lazy_lock.rs	/^    pub fn force(this: &LazyLock<T, F>) -> &T {$/;"	P	implementation:LazyLock	signature:(this: &LazyLock<T, F>) -> &T
force_capture	$RUST/src/backtrace.rs	/^    pub fn force_capture() -> Backtrace {$/;"	P	implementation:Backtrace	signature:() -> Backtrace
force_quotes	$RUST/src/os/windows/process.rs	/^    fn force_quotes(&mut self, enabled: bool) -> &mut process::Command;$/;"	P	interface:CommandExt	signature:(&mut self, enabled: bool) -> &mut process::Command
force_quotes	$RUST/src/sys/pal/windows/process.rs	/^    pub fn force_quotes(&mut self, enabled: bool) {$/;"	P	implementation:Command	signature:(&mut self, enabled: bool)
force_quotes_enabled	$RUST/src/sys/pal/windows/process.rs	/^    force_quotes_enabled: bool,$/;"	m	struct:Command
format	$RUST/src/sys_common/backtrace.rs	/^        format: PrintFmt,$/;"	m	struct:_print::DisplayBacktrace
fortanix_sgx	$RUST/src/os/mod.rs	/^pub mod fortanix_sgx;$/;"	n
fract	$RUST/src/f32.rs	/^    pub fn fract(self) -> f32 {$/;"	P	implementation:f32	signature:(self) -> f32
fract	$RUST/src/f64.rs	/^    pub fn fract(self) -> f64 {$/;"	P	implementation:f64	signature:(self) -> f64
frame	$RUST/src/backtrace.rs	/^    frame: RawFrame,$/;"	m	struct:BacktraceFrame
frames	$RUST/src/backtrace.rs	/^    pub fn frames(&'a self) -> &'a [BacktraceFrame] {$/;"	P	implementation:Backtrace	signature:(&'a self) -> &'a [BacktraceFrame]
free	$RUST/src/sys/pal/sgx/alloc.rs	/^    fn free(&self, _ptr: *mut u8, _size: usize) -> bool {$/;"	P	implementation:Sgx	signature:(&self, _ptr: *mut u8, _size: usize) -> bool
free_part	$RUST/src/sys/pal/sgx/alloc.rs	/^    fn free_part(&self, _ptr: *mut u8, _oldsize: usize, _newsize: usize) -> bool {$/;"	P	implementation:Sgx	signature:(&self, _ptr: *mut u8, _oldsize: usize, _newsize: usize) -> bool
freeaddrinfo	$RUST/src/sys/pal/solid/abi/sockets.rs	/^    pub fn freeaddrinfo(ai: *mut addrinfo);$/;"	f	signature:(ai: *mut addrinfo)
freeaddrinfo	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn freeaddrinfo(paddrinfo: *const ADDRINFOA) -> ();$/;"	f	signature:(paddrinfo: *const ADDRINFOA) -> ()
freebsd	$RUST/src/os/mod.rs	/^pub mod freebsd;$/;"	n
frequency	$RUST/src/sys/pal/windows/time.rs	/^    fn frequency() -> c::LARGE_INTEGER {$/;"	f	module:perf_counter	signature:() -> c::LARGE_INTEGER
frob	$RUST/src/sync/rwlock/tests.rs	/^fn frob() {$/;"	f	signature:()
from	$RUST/src/collections/hash/map.rs	/^    fn from(arr: [(K, V); N]) -> Self {$/;"	f	signature:(arr: [(K, V); N]) -> Self
from	$RUST/src/collections/hash/set.rs	/^    fn from(arr: [T; N]) -> Self {$/;"	f	signature:(arr: [T; N]) -> Self
from	$RUST/src/error.rs	/^    fn from(error: E) -> Self {$/;"	f	signature:(error: E) -> Self
from	$RUST/src/ffi/os_str.rs	/^    fn from(s: String) -> OsString {$/;"	P	implementation:OsString	signature:(s: String) -> OsString
from	$RUST/src/io/buffered/mod.rs	/^    fn from(iie: IntoInnerError<W>) -> Error {$/;"	P	implementation:Error	signature:(iie: IntoInnerError<W>) -> Error
from	$RUST/src/io/error.rs	/^    fn from(kind: ErrorKind) -> Error {$/;"	P	implementation:Error	signature:(kind: ErrorKind) -> Error
from	$RUST/src/os/fd/owned.rs	/^    fn from(udp_socket: crate::net::UdpSocket) -> OwnedFd {$/;"	P	implementation:OwnedFd	signature:(udp_socket: crate::net::UdpSocket) -> OwnedFd
from	$RUST/src/os/linux/process.rs	/^    fn from(pid_fd: PidFd) -> Self {$/;"	P	implementation:OwnedFd	signature:(pid_fd: PidFd) -> Self
from	$RUST/src/os/unix/net/datagram.rs	/^    fn from(unix_datagram: UnixDatagram) -> OwnedFd {$/;"	P	implementation:OwnedFd	signature:(unix_datagram: UnixDatagram) -> OwnedFd
from	$RUST/src/os/unix/net/listener.rs	/^    fn from(listener: UnixListener) -> OwnedFd {$/;"	P	implementation:OwnedFd	signature:(listener: UnixListener) -> OwnedFd
from	$RUST/src/os/unix/net/stream.rs	/^    fn from(unix_stream: UnixStream) -> OwnedFd {$/;"	P	implementation:OwnedFd	signature:(unix_stream: UnixStream) -> OwnedFd
from	$RUST/src/os/unix/process.rs	/^    fn from(fd: OwnedFd) -> process::Stdio {$/;"	P	implementation:Stdio	signature:(fd: OwnedFd) -> process::Stdio
from	$RUST/src/os/windows/io/handle.rs	/^    fn from(owned: OwnedHandle) -> Self {$/;"	P	implementation:File	signature:(owned: OwnedHandle) -> Self
from	$RUST/src/os/windows/io/socket.rs	/^    fn from(udp_socket: crate::net::UdpSocket) -> OwnedSocket {$/;"	P	implementation:OwnedSocket	signature:(udp_socket: crate::net::UdpSocket) -> OwnedSocket
from	$RUST/src/os/windows/process.rs	/^    fn from(handle: OwnedHandle) -> process::Stdio {$/;"	P	implementation:Stdio	signature:(handle: OwnedHandle) -> process::Stdio
from	$RUST/src/os/xous/ffi/definitions.rs	/^    fn from(src: usize) -> ThreadId {$/;"	P	implementation:ThreadId	signature:(src: usize) -> ThreadId
from	$RUST/src/path.rs	/^    fn from(s: String) -> PathBuf {$/;"	P	implementation:PathBuf	signature:(s: String) -> PathBuf
from	$RUST/src/process.rs	/^    fn from(inherit: io::Stdout) -> Stdio {$/;"	P	implementation:Stdio	signature:(inherit: io::Stdout) -> Stdio
from	$RUST/src/sync/mpmc/error.rs	/^    fn from(err: SendError<T>) -> SendTimeoutError<T> {$/;"	P	implementation:SendTimeoutError	signature:(err: SendError<T>) -> SendTimeoutError<T>
from	$RUST/src/sync/mpmc/select.rs	/^    fn from(val: usize) -> Selected {$/;"	P	implementation:Selected	signature:(val: usize) -> Selected
from	$RUST/src/sync/mpsc/mod.rs	/^    fn from(err: SendError<T>) -> TrySendError<T> {$/;"	P	implementation:TrySendError	signature:(err: SendError<T>) -> TrySendError<T>
from	$RUST/src/sync/mutex.rs	/^    fn from(t: T) -> Self {$/;"	P	implementation:Mutex	signature:(t: T) -> Self
from	$RUST/src/sync/once_lock.rs	/^    fn from(value: T) -> Self {$/;"	P	implementation:OnceLock	signature:(value: T) -> Self
from	$RUST/src/sync/poison.rs	/^    fn from(err: PoisonError<T>) -> TryLockError<T> {$/;"	P	implementation:TryLockError	signature:(err: PoisonError<T>) -> TryLockError<T>
from	$RUST/src/sync/rwlock.rs	/^    fn from(t: T) -> Self {$/;"	P	implementation:RwLock	signature:(t: T) -> Self
from	$RUST/src/sys/pal/unix/process/process_common.rs	/^    fn from(pipe: AnonPipe) -> Stdio {$/;"	P	implementation:Stdio	signature:(pipe: AnonPipe) -> Stdio
from	$RUST/src/sys/pal/unix/process/process_fuchsia.rs	/^    fn from(a: c_int) -> ExitStatus {$/;"	P	implementation:ExitStatus	signature:(a: c_int) -> ExitStatus
from	$RUST/src/sys/pal/unix/process/process_unix.rs	/^    fn from(a: c_int) -> ExitStatus {$/;"	P	implementation:ExitStatus	signature:(a: c_int) -> ExitStatus
from	$RUST/src/sys/pal/unix/process/process_unsupported/wait_status.rs	/^    fn from(wait_status: c_int) -> ExitStatus {$/;"	P	implementation:ExitStatus	signature:(wait_status: c_int) -> ExitStatus
from	$RUST/src/sys/pal/unix/process/process_vxworks.rs	/^    fn from(a: c_int) -> ExitStatus {$/;"	P	implementation:ExitStatus	signature:(a: c_int) -> ExitStatus
from	$RUST/src/sys/pal/unix/time.rs	/^    fn from(t: libc::timespec) -> Timespec {$/;"	P	implementation:Timespec	signature:(t: libc::timespec) -> Timespec
from	$RUST/src/sys/pal/unsupported/process.rs	/^    fn from(pipe: AnonPipe) -> Stdio {$/;"	P	implementation:Stdio	signature:(pipe: AnonPipe) -> Stdio
from	$RUST/src/sys/pal/windows/fs.rs	/^    fn from(wfd: c::WIN32_FIND_DATAW) -> Self {$/;"	P	implementation:FileAttr	signature:(wfd: c::WIN32_FIND_DATAW) -> Self
from	$RUST/src/sys/pal/windows/process.rs	/^    fn from(u: c::DWORD) -> ExitStatus {$/;"	P	implementation:ExitStatus	signature:(u: c::DWORD) -> ExitStatus
from	$RUST/src/sys/pal/windows/time.rs	/^    fn from(t: c::FILETIME) -> SystemTime {$/;"	P	implementation:SystemTime	signature:(t: c::FILETIME) -> SystemTime
from_abstract_name	$RUST/src/os/net/linux_ext/addr.rs	/^    fn from_abstract_name<N>(name: N) -> crate::io::Result<SocketAddr>$/;"	P	interface:SocketAddrExt	signature:<N>(name: N) -> crate::io::Result<SocketAddr> where N: AsRef<[u8]>
from_abstract_name	$RUST/src/os/unix/net/addr.rs	/^    fn from_abstract_name<N>(name: N) -> crate::io::Result<Self>$/;"	P	implementation:SocketAddr	signature:<N>(name: N) -> crate::io::Result<Self> where N: AsRef<[u8]>,
from_array	$RUST/src/collections/hash/map/tests.rs	/^fn from_array() {$/;"	f	signature:()
from_array	$RUST/src/collections/hash/set/tests.rs	/^fn from_array() {$/;"	f	signature:()
from_bits	$RUST/src/os/xous/ffi/definitions/memoryflags.rs	/^    pub fn from_bits(raw: usize) -> Option<MemoryFlags> {$/;"	P	implementation:MemoryFlags	signature:(raw: usize) -> Option<MemoryFlags>
from_box	$RUST/src/sys/os_str/bytes.rs	/^    pub fn from_box(boxed: Box<Slice>) -> Buf {$/;"	P	implementation:Buf	signature:(boxed: Box<Slice>) -> Buf
from_box	$RUST/src/sys/os_str/wtf8.rs	/^    pub fn from_box(boxed: Box<Slice>) -> Buf {$/;"	P	implementation:Buf	signature:(boxed: Box<Slice>) -> Buf
from_box	$RUST/src/sys_common/wtf8.rs	/^    pub fn from_box(boxed: Box<Wtf8>) -> Wtf8Buf {$/;"	P	implementation:Wtf8Buf	signature:(boxed: Box<Wtf8>) -> Wtf8Buf
from_bytes	$RUST/src/os/unix/ffi/os_str.rs	/^    fn from_bytes(slice: &[u8]) -> &Self;$/;"	P	interface:OsStrExt	signature:(slice: &[u8]) -> &Self
from_bytes_unchecked	$RUST/src/sys_common/wtf8.rs	/^    pub unsafe fn from_bytes_unchecked(value: Vec<u8>) -> Wtf8Buf {$/;"	P	implementation:Wtf8Buf	signature:(value: Vec<u8>) -> Wtf8Buf
from_char	$RUST/src/sys_common/wtf8.rs	/^    pub fn from_char(value: char) -> CodePoint {$/;"	P	implementation:CodePoint	signature:(value: char) -> CodePoint
from_encoded_bytes_unchecked	$RUST/src/ffi/os_str.rs	/^    pub unsafe fn from_encoded_bytes_unchecked(bytes: Vec<u8>) -> Self {$/;"	P	implementation:OsString	signature:(bytes: Vec<u8>) -> Self
from_encoded_bytes_unchecked	$RUST/src/sys/os_str/bytes.rs	/^    pub unsafe fn from_encoded_bytes_unchecked(s: Vec<u8>) -> Self {$/;"	P	implementation:Buf	signature:(s: Vec<u8>) -> Self
from_encoded_bytes_unchecked	$RUST/src/sys/os_str/wtf8.rs	/^    pub unsafe fn from_encoded_bytes_unchecked(s: Vec<u8>) -> Self {$/;"	P	implementation:Buf	signature:(s: Vec<u8>) -> Self
from_hash	$RUST/src/collections/hash/map.rs	/^    pub fn from_hash<F>(self, hash: u64, is_match: F) -> RawEntryMut<'a, K, V, S>$/;"	f	signature:<F>(self, hash: u64, is_match: F) -> RawEntryMut<'a, K, V, S> where for<'b> F: FnMut(&'b K) -> bool,
from_impl	$RUST/src/sync/once_lock/tests.rs	/^fn from_impl() {$/;"	f	signature:()
from_index	$RUST/src/sys/pal/sgx/abi/tls/mod.rs	/^    fn from_index(index: usize) -> Self {$/;"	P	implementation:Key	signature:(index: usize) -> Self
from_inner	$RUST/src/ffi/os_str.rs	/^    fn from_inner(inner: &Slice) -> &OsStr {$/;"	P	implementation:OsStr	signature:(inner: &Slice) -> &OsStr
from_inner	$RUST/src/fs.rs	/^    fn from_inner(f: fs_imp::FilePermissions) -> Permissions {$/;"	P	implementation:Permissions	signature:(f: fs_imp::FilePermissions) -> Permissions
from_inner	$RUST/src/net/ip_addr.rs	/^    fn from_inner(addr: c::in_addr) -> Ipv4Addr {$/;"	P	implementation:Ipv4Addr	signature:(addr: c::in_addr) -> Ipv4Addr
from_inner	$RUST/src/net/socket_addr.rs	/^    fn from_inner(addr: c::sockaddr_in6) -> SocketAddrV6 {$/;"	P	implementation:SocketAddrV6	signature:(addr: c::sockaddr_in6) -> SocketAddrV6
from_inner	$RUST/src/net/tcp.rs	/^    fn from_inner(inner: net_imp::TcpStream) -> TcpStream {$/;"	P	implementation:TcpStream	signature:(inner: net_imp::TcpStream) -> TcpStream
from_inner	$RUST/src/net/udp.rs	/^    fn from_inner(inner: net_imp::UdpSocket) -> UdpSocket {$/;"	P	implementation:UdpSocket	signature:(inner: net_imp::UdpSocket) -> UdpSocket
from_inner	$RUST/src/os/linux/process.rs	/^    fn from_inner(inner: FileDesc) -> PidFd {$/;"	P	implementation:PidFd	signature:(inner: FileDesc) -> PidFd
from_inner	$RUST/src/process.rs	/^    fn from_inner(s: imp::ExitStatus) -> ExitStatus {$/;"	P	implementation:ExitStatus	signature:(s: imp::ExitStatus) -> ExitStatus
from_inner	$RUST/src/sys/os_str/wtf8.rs	/^    fn from_inner(inner: Wtf8Buf) -> Self {$/;"	P	implementation:Buf	signature:(inner: Wtf8Buf) -> Self
from_inner	$RUST/src/sys/pal/hermit/fd.rs	/^    fn from_inner(owned_fd: OwnedFd) -> Self {$/;"	P	implementation:FileDesc	signature:(owned_fd: OwnedFd) -> Self
from_inner	$RUST/src/sys/pal/hermit/fs.rs	/^    fn from_inner(file_desc: FileDesc) -> Self {$/;"	P	implementation:File	signature:(file_desc: FileDesc) -> Self
from_inner	$RUST/src/sys/pal/hermit/net.rs	/^    fn from_inner(file_desc: FileDesc) -> Self {$/;"	P	implementation:Socket	signature:(file_desc: FileDesc) -> Self
from_inner	$RUST/src/sys/pal/sgx/fd.rs	/^    fn from_inner(fd: Fd) -> FileDesc {$/;"	P	implementation:FileDesc	signature:(fd: Fd) -> FileDesc
from_inner	$RUST/src/sys/pal/sgx/net.rs	/^    fn from_inner(inner: Socket) -> TcpListener {$/;"	P	implementation:TcpListener	signature:(inner: Socket) -> TcpListener
from_inner	$RUST/src/sys/pal/solid/net.rs	/^    fn from_inner(sock: OwnedFd) -> Socket {$/;"	P	implementation:Socket	signature:(sock: OwnedFd) -> Socket
from_inner	$RUST/src/sys/pal/unix/fd.rs	/^    fn from_inner(owned_fd: OwnedFd) -> Self {$/;"	P	implementation:FileDesc	signature:(owned_fd: OwnedFd) -> Self
from_inner	$RUST/src/sys/pal/unix/fs.rs	/^    fn from_inner(mode: u32) -> FilePermissions {$/;"	P	implementation:FilePermissions	signature:(mode: u32) -> FilePermissions
from_inner	$RUST/src/sys/pal/unix/l4re.rs	/^        fn from_inner(socket: Socket) -> UdpSocket {$/;"	P	implementation:net::UdpSocket	signature:(socket: Socket) -> UdpSocket
from_inner	$RUST/src/sys/pal/unix/net.rs	/^    fn from_inner(file_desc: FileDesc) -> Self {$/;"	P	implementation:Socket	signature:(file_desc: FileDesc) -> Self
from_inner	$RUST/src/sys/pal/unix/pipe.rs	/^    fn from_inner(fd: FileDesc) -> Self {$/;"	P	implementation:AnonPipe	signature:(fd: FileDesc) -> Self
from_inner	$RUST/src/sys/pal/wasi/fd.rs	/^    fn from_inner(owned_fd: OwnedFd) -> Self {$/;"	P	implementation:WasiFd	signature:(owned_fd: OwnedFd) -> Self
from_inner	$RUST/src/sys/pal/wasi/fs.rs	/^    fn from_inner(fd: WasiFd) -> File {$/;"	P	implementation:File	signature:(fd: WasiFd) -> File
from_inner	$RUST/src/sys/pal/wasi/net.rs	/^    fn from_inner(socket: Socket) -> TcpStream {$/;"	P	implementation:TcpStream	signature:(socket: Socket) -> TcpStream
from_inner	$RUST/src/sys/pal/windows/fs.rs	/^    fn from_inner(handle: Handle) -> File {$/;"	P	implementation:File	signature:(handle: Handle) -> File
from_inner	$RUST/src/sys/pal/windows/handle.rs	/^    fn from_inner(file_desc: OwnedHandle) -> Self {$/;"	P	implementation:Handle	signature:(file_desc: OwnedHandle) -> Self
from_inner	$RUST/src/sys/pal/windows/net.rs	/^    fn from_inner(sock: OwnedSocket) -> Socket {$/;"	P	implementation:Socket	signature:(sock: OwnedSocket) -> Socket
from_inner	$RUST/src/sys/pal/windows/pipe.rs	/^    fn from_inner(inner: Handle) -> AnonPipe {$/;"	P	implementation:AnonPipe	signature:(inner: Handle) -> AnonPipe
from_inner	$RUST/src/sys_common/mod.rs	/^    fn from_inner(inner: Inner) -> Self;$/;"	P	interface:FromInner	signature:(inner: Inner) -> Self
from_inner	$RUST/src/sys_common/net.rs	/^    fn from_inner(socket: Socket) -> UdpSocket {$/;"	P	implementation:UdpSocket	signature:(socket: Socket) -> UdpSocket
from_inner	$RUST/src/time.rs	/^    fn from_inner(time: time::SystemTime) -> SystemTime {$/;"	P	implementation:SystemTime	signature:(time: time::SystemTime) -> SystemTime
from_inner_mut	$RUST/src/ffi/os_str.rs	/^    fn from_inner_mut(inner: &mut Slice) -> &mut OsStr {$/;"	P	implementation:OsStr	signature:(inner: &mut Slice) -> &mut OsStr
from_inner_mut	$RUST/src/path.rs	/^    fn from_inner_mut(inner: &mut OsStr) -> &mut Path {$/;"	P	implementation:Path	signature:(inner: &mut OsStr) -> &mut Path
from_intervals	$RUST/src/sys/pal/windows/time.rs	/^    fn from_intervals(intervals: i64) -> SystemTime {$/;"	P	implementation:SystemTime	signature:(intervals: i64) -> SystemTime
from_iter	$RUST/src/collections/hash/map.rs	/^    fn from_iter<T: IntoIterator<Item = (K, V)>>(iter: T) -> HashMap<K, V, S> {$/;"	f	signature:<T: IntoIterator<Item = (K, V)>>(iter: T) -> HashMap<K, V, S>
from_iter	$RUST/src/collections/hash/set.rs	/^    fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> HashSet<T, S> {$/;"	f	signature:<I: IntoIterator<Item = T>>(iter: I) -> HashSet<T, S>
from_iter	$RUST/src/ffi/os_str.rs	/^    fn from_iter<I: IntoIterator<Item = OsString>>(iter: I) -> Self {$/;"	P	implementation:OsString	signature:<I: IntoIterator<Item = OsString>>(iter: I) -> Self
from_iter	$RUST/src/path.rs	/^    fn from_iter<I: IntoIterator<Item = P>>(iter: I) -> PathBuf {$/;"	P	implementation:PathBuf	signature:<I: IntoIterator<Item = P>>(iter: I) -> PathBuf
from_iter	$RUST/src/sys_common/wtf8.rs	/^    fn from_iter<T: IntoIterator<Item = CodePoint>>(iter: T) -> Wtf8Buf {$/;"	P	implementation:Wtf8Buf	signature:<T: IntoIterator<Item = CodePoint>>(iter: T) -> Wtf8Buf
from_key	$RUST/src/collections/hash/map.rs	/^    pub fn from_key<Q: ?Sized>(self, k: &Q) -> RawEntryMut<'a, K, V, S>$/;"	f	signature:<Q: ?Sized>(self, k: &Q) -> RawEntryMut<'a, K, V, S> where K: Borrow<Q>, Q: Hash + Eq,
from_key_hashed_nocheck	$RUST/src/collections/hash/map.rs	/^    pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> RawEntryMut<'a, K, V, S/;"	f	signature:<Q: ?Sized>(self, hash: u64, k: &Q) -> RawEntryMut<'a, K, V, S> where K: Borrow<Q>, Q: Eq,
from_listener	$RUST/src/sys/pal/xous/net/tcpstream.rs	/^    pub(crate) fn from_listener($/;"	P	implementation:TcpStream	signature:( fd: u16, local_port: u16, remote_port: u16, peer_addr: SocketAddr, ) -> TcpStream
from_maybe_unaligned	$RUST/src/sys/pal/windows/fs.rs	/^unsafe fn from_maybe_unaligned<'a>(p: *const u16, len: usize) -> Cow<'a, [u16]> {$/;"	f	signature:<'a>(p: *const u16, len: usize) -> Cow<'a, [u16]>
from_mode	$RUST/src/os/unix/fs.rs	/^    fn from_mode(mode: u32) -> Self;$/;"	P	interface:PermissionsExt	signature:(mode: u32) -> Self
from_mut_bytes_unchecked	$RUST/src/sys_common/wtf8.rs	/^    unsafe fn from_mut_bytes_unchecked(value: &mut [u8]) -> &mut Wtf8 {$/;"	P	implementation:Wtf8	signature:(value: &mut [u8]) -> &mut Wtf8
from_mut_ptr	$RUST/src/sys/pal/sgx/abi/usercalls/alloc.rs	/^    pub unsafe fn from_mut_ptr<'a>(ptr: *mut T) -> &'a mut Self {$/;"	f	signature:<'a>(ptr: *mut T) -> &'a mut Self
from_parts	$RUST/src/os/unix/net/addr.rs	/^    pub(super) fn from_parts($/;"	P	implementation:SocketAddr	signature:( addr: libc::sockaddr_un, mut len: libc::socklen_t, ) -> io::Result<SocketAddr>
from_pathname	$RUST/src/os/unix/net/addr.rs	/^    pub fn from_pathname<P>(path: P) -> io::Result<SocketAddr>$/;"	P	implementation:SocketAddr	signature:<P>(path: P) -> io::Result<SocketAddr> where P: AsRef<Path>,
from_prim	$RUST/src/io/error/repr_bitpacked.rs	/^    macro_rules! from_prim {$/;"	M	function:kind_from_prim
from_ptr	$RUST/src/sys/pal/sgx/abi/usercalls/alloc.rs	/^    pub unsafe fn from_ptr<'a>(ptr: *const T) -> &'a Self {$/;"	f	signature:<'a>(ptr: *const T) -> &'a Self
from_raw	$RUST/src/os/unix/process.rs	/^    fn from_raw(raw: i32) -> Self;$/;"	P	interface:ExitStatusExt	signature:(raw: i32) -> Self
from_raw	$RUST/src/os/windows/process.rs	/^    fn from_raw(raw: u32) -> Self;$/;"	P	interface:ExitStatusExt	signature:(raw: u32) -> Self
from_raw	$RUST/src/sys/pal/sgx/abi/usercalls/alloc.rs	/^    pub unsafe fn from_raw(ptr: *mut T) -> Self {$/;"	f	signature:(ptr: *mut T) -> Self
from_raw	$RUST/src/sys/pal/windows/net.rs	/^    pub unsafe fn from_raw(raw: c::SOCKET) -> Self {$/;"	P	implementation:Socket	signature:(raw: c::SOCKET) -> Self
from_raw_fd	$RUST/src/os/fd/owned.rs	/^    unsafe fn from_raw_fd(fd: RawFd) -> Self {$/;"	P	implementation:OwnedFd	signature:(fd: RawFd) -> Self
from_raw_fd	$RUST/src/os/fd/raw.rs	/^    unsafe fn from_raw_fd(fd: RawFd) -> fs::File {$/;"	P	implementation:File	signature:(fd: RawFd) -> fs::File
from_raw_fd	$RUST/src/os/fortanix_sgx/io.rs	/^    unsafe fn from_raw_fd(fd: RawFd, metadata: Self::Metadata) -> net::TcpStream {$/;"	P	implementation:TcpStream	signature:(fd: RawFd, metadata: Self::Metadata) -> net::TcpStream
from_raw_fd	$RUST/src/os/linux/process.rs	/^    unsafe fn from_raw_fd(fd: RawFd) -> Self {$/;"	P	implementation:PidFd	signature:(fd: RawFd) -> Self
from_raw_fd	$RUST/src/os/solid/io.rs	/^    unsafe fn from_raw_fd(fd: RawFd) -> Self;$/;"	P	interface:FromRawFd	signature:(fd: RawFd) -> Self
from_raw_fd	$RUST/src/os/unix/net/datagram.rs	/^    unsafe fn from_raw_fd(fd: RawFd) -> UnixDatagram {$/;"	P	implementation:UnixDatagram	signature:(fd: RawFd) -> UnixDatagram
from_raw_fd	$RUST/src/os/unix/net/listener.rs	/^    unsafe fn from_raw_fd(fd: RawFd) -> UnixListener {$/;"	P	implementation:UnixListener	signature:(fd: RawFd) -> UnixListener
from_raw_fd	$RUST/src/os/unix/net/stream.rs	/^    unsafe fn from_raw_fd(fd: RawFd) -> UnixStream {$/;"	P	implementation:UnixStream	signature:(fd: RawFd) -> UnixStream
from_raw_fd	$RUST/src/os/unix/process.rs	/^    unsafe fn from_raw_fd(fd: RawFd) -> process::Stdio {$/;"	P	implementation:Stdio	signature:(fd: RawFd) -> process::Stdio
from_raw_fd	$RUST/src/sys/pal/hermit/fd.rs	/^    unsafe fn from_raw_fd(raw_fd: RawFd) -> Self {$/;"	P	implementation:FileDesc	signature:(raw_fd: RawFd) -> Self
from_raw_fd	$RUST/src/sys/pal/hermit/fs.rs	/^    unsafe fn from_raw_fd(raw_fd: RawFd) -> Self {$/;"	P	implementation:File	signature:(raw_fd: RawFd) -> Self
from_raw_fd	$RUST/src/sys/pal/solid/net.rs	/^    unsafe fn from_raw_fd(fd: c_int) -> Socket {$/;"	P	implementation:Socket	signature:(fd: c_int) -> Socket
from_raw_fd	$RUST/src/sys/pal/unix/fd.rs	/^    unsafe fn from_raw_fd(raw_fd: RawFd) -> Self {$/;"	P	implementation:FileDesc	signature:(raw_fd: RawFd) -> Self
from_raw_fd	$RUST/src/sys/pal/unix/fs.rs	/^    unsafe fn from_raw_fd(raw_fd: RawFd) -> Self {$/;"	P	implementation:File	signature:(raw_fd: RawFd) -> Self
from_raw_fd	$RUST/src/sys/pal/unix/l4re.rs	/^        unsafe fn from_raw_fd(raw_fd: RawFd) -> Self {$/;"	P	implementation:net::Socket	signature:(raw_fd: RawFd) -> Self
from_raw_fd	$RUST/src/sys/pal/unix/net.rs	/^    unsafe fn from_raw_fd(raw_fd: RawFd) -> Self {$/;"	P	implementation:Socket	signature:(raw_fd: RawFd) -> Self
from_raw_fd	$RUST/src/sys/pal/unix/pipe.rs	/^    unsafe fn from_raw_fd(raw_fd: RawFd) -> Self {$/;"	P	implementation:AnonPipe	signature:(raw_fd: RawFd) -> Self
from_raw_fd	$RUST/src/sys/pal/wasi/fd.rs	/^    unsafe fn from_raw_fd(raw_fd: RawFd) -> Self {$/;"	P	implementation:WasiFd	signature:(raw_fd: RawFd) -> Self
from_raw_fd	$RUST/src/sys/pal/wasi/fs.rs	/^    unsafe fn from_raw_fd(raw_fd: RawFd) -> Self {$/;"	P	implementation:File	signature:(raw_fd: RawFd) -> Self
from_raw_fd	$RUST/src/sys/pal/wasi/net.rs	/^    unsafe fn from_raw_fd(raw_fd: RawFd) -> Self {$/;"	P	implementation:Socket	signature:(raw_fd: RawFd) -> Self
from_raw_handle	$RUST/src/os/windows/io/handle.rs	/^    unsafe fn from_raw_handle(handle: RawHandle) -> Self {$/;"	P	implementation:OwnedHandle	signature:(handle: RawHandle) -> Self
from_raw_handle	$RUST/src/os/windows/io/raw.rs	/^    unsafe fn from_raw_handle(handle: RawHandle) -> fs::File {$/;"	P	implementation:File	signature:(handle: RawHandle) -> fs::File
from_raw_handle	$RUST/src/os/windows/process.rs	/^    unsafe fn from_raw_handle(handle: RawHandle) -> process::Stdio {$/;"	P	implementation:Stdio	signature:(handle: RawHandle) -> process::Stdio
from_raw_handle	$RUST/src/sys/pal/windows/fs.rs	/^    unsafe fn from_raw_handle(raw_handle: RawHandle) -> Self {$/;"	P	implementation:File	signature:(raw_handle: RawHandle) -> Self
from_raw_handle	$RUST/src/sys/pal/windows/handle.rs	/^    unsafe fn from_raw_handle(raw_handle: RawHandle) -> Self {$/;"	P	implementation:Handle	signature:(raw_handle: RawHandle) -> Self
from_raw_os_error	$RUST/src/io/error.rs	/^    pub fn from_raw_os_error(code: RawOsError) -> Error {$/;"	P	implementation:Error	signature:(code: RawOsError) -> Error
from_raw_parts	$RUST/src/sys/pal/sgx/abi/usercalls/alloc.rs	/^    pub unsafe fn from_raw_parts<'a>(ptr: *const T, len: usize) -> &'a Self {$/;"	f	signature:<'a>(ptr: *const T, len: usize) -> &'a Self
from_raw_parts_mut	$RUST/src/sys/pal/sgx/abi/usercalls/alloc.rs	/^    pub unsafe fn from_raw_parts_mut<'a>(ptr: *mut T, len: usize) -> &'a mut Self {$/;"	f	signature:<'a>(ptr: *mut T, len: usize) -> &'a mut Self
from_raw_sized	$RUST/src/sys/pal/sgx/abi/usercalls/alloc.rs	/^    unsafe fn from_raw_sized(ptr: *mut u8, size: usize) -> NonNull<Self> {$/;"	P	interface:UserSafe	signature:(ptr: *mut u8, size: usize) -> NonNull<Self>
from_raw_sized_unchecked	$RUST/src/sys/pal/sgx/abi/usercalls/alloc.rs	/^    unsafe fn from_raw_sized_unchecked(ptr: *mut u8, size: usize) -> *mut Self;$/;"	P	interface:UserSafe	signature:(ptr: *mut u8, size: usize) -> *mut Self
from_raw_socket	$RUST/src/os/windows/io/raw.rs	/^    unsafe fn from_raw_socket(sock: RawSocket) -> net::UdpSocket {$/;"	P	implementation:UdpSocket	signature:(sock: RawSocket) -> net::UdpSocket
from_raw_socket	$RUST/src/os/windows/io/socket.rs	/^    unsafe fn from_raw_socket(socket: RawSocket) -> Self {$/;"	P	implementation:OwnedSocket	signature:(socket: RawSocket) -> Self
from_raw_socket	$RUST/src/sys/pal/windows/net.rs	/^    unsafe fn from_raw_socket(raw_socket: RawSocket) -> Self {$/;"	P	implementation:Socket	signature:(raw_socket: RawSocket) -> Self
from_ref	$RUST/src/sys/pal/windows/c.rs	/^    pub fn from_ref(slice: &[u16]) -> Self {$/;"	P	implementation:UNICODE_STRING	signature:(slice: &[u16]) -> Self
from_register	$RUST/src/sys/pal/sgx/abi/usercalls/raw.rs	/^    fn from_register(a: Register) -> bool {$/;"	P	implementation:bool	signature:(a: Register) -> bool
from_registers	$RUST/src/sys/pal/sgx/abi/usercalls/raw.rs	/^    fn from_registers(call: &'static str, usercall_retval: (Register, Register)) -> Self {$/;"	P	implementation:T	signature:(call: &'static str, usercall_retval: (Register, Register)) -> Self
from_sgx_result	$RUST/src/sys/pal/sgx/abi/usercalls/mod.rs	/^    fn from_sgx_result(self) -> IoResult<Self::Return>;$/;"	P	interface:FromSgxResult	signature:(self) -> IoResult<Self::Return>
from_static_message	$RUST/src/io/error.rs	/^    pub(crate) const fn from_static_message(msg: &'static SimpleMessage) -> Error {$/;"	P	implementation:Error	signature:(msg: &'static SimpleMessage) -> Error
from_str	$RUST/src/ffi/os_str.rs	/^    fn from_str(s: &str) -> Result<Self, Self::Err> {$/;"	P	implementation:OsString	signature:(s: &str) -> Result<Self, Self::Err>
from_str	$RUST/src/num/tests.rs	/^fn from_str<T: crate::str::FromStr>(t: &str) -> Option<T> {$/;"	f	signature:<T: crate::str::FromStr>(t: &str) -> Option<T>
from_str	$RUST/src/path.rs	/^    fn from_str(s: &str) -> Result<Self, Self::Err> {$/;"	P	implementation:PathBuf	signature:(s: &str) -> Result<Self, Self::Err>
from_str	$RUST/src/sys/os_str/bytes.rs	/^    pub fn from_str(s: &str) -> &Slice {$/;"	P	implementation:Slice	signature:(s: &str) -> &Slice
from_str	$RUST/src/sys/os_str/wtf8.rs	/^    pub fn from_str(s: &str) -> &Slice {$/;"	P	implementation:Slice	signature:(s: &str) -> &Slice
from_str	$RUST/src/sys_common/wtf8.rs	/^    pub fn from_str(value: &str) -> &Wtf8 {$/;"	P	implementation:Wtf8	signature:(value: &str) -> &Wtf8
from_string	$RUST/src/sys/os_str/bytes.rs	/^    pub fn from_string(s: String) -> Buf {$/;"	P	implementation:Buf	signature:(s: String) -> Buf
from_string	$RUST/src/sys/os_str/wtf8.rs	/^    pub fn from_string(s: String) -> Buf {$/;"	P	implementation:Buf	signature:(s: String) -> Buf
from_string	$RUST/src/sys_common/wtf8.rs	/^    pub fn from_string(string: String) -> Wtf8Buf {$/;"	P	implementation:Wtf8Buf	signature:(string: String) -> Wtf8Buf
from_time_t	$RUST/src/sys/pal/solid/time.rs	/^    pub(super) fn from_time_t(t: abi::time_t) -> Self {$/;"	P	implementation:SystemTime	signature:(t: abi::time_t) -> Self
from_u128	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub const fn from_u128(uuid: u128) -> Self {$/;"	P	implementation:GUID	signature:(uuid: u128) -> Self
from_u32	$RUST/src/sys_common/wtf8.rs	/^    pub fn from_u32(value: u32) -> Option<CodePoint> {$/;"	P	implementation:CodePoint	signature:(value: u32) -> Option<CodePoint>
from_u32_unchecked	$RUST/src/sys_common/wtf8.rs	/^    pub unsafe fn from_u32_unchecked(value: u32) -> CodePoint {$/;"	P	implementation:CodePoint	signature:(value: u32) -> CodePoint
from_u8_slice	$RUST/src/path.rs	/^    unsafe fn from_u8_slice(s: &[u8]) -> &Path {$/;"	P	implementation:Path	signature:(s: &[u8]) -> &Path
from_usize	$RUST/src/panic.rs	/^    fn from_usize(s: usize) -> Option<Self> {$/;"	P	implementation:BacktraceStyle	signature:(s: usize) -> Option<Self>
from_usize	$RUST/src/sys/pal/sgx/abi/tls/mod.rs	/^    pub fn from_usize(index: usize) -> Self {$/;"	P	implementation:Key	signature:(index: usize) -> Self
from_vec	$RUST/src/os/unix/ffi/os_str.rs	/^    fn from_vec(vec: Vec<u8>) -> Self;$/;"	P	interface:OsStringExt	signature:(vec: Vec<u8>) -> Self
from_waitid_siginfo	$RUST/src/sys/pal/unix/process/process_unix.rs	/^    pub fn from_waitid_siginfo(siginfo: libc::siginfo_t) -> ExitStatus {$/;"	P	implementation:ExitStatus	signature:(siginfo: libc::siginfo_t) -> ExitStatus
from_wasi_timestamp	$RUST/src/sys/pal/wasi/time.rs	/^    pub fn from_wasi_timestamp(ts: wasi::Timestamp) -> SystemTime {$/;"	P	implementation:SystemTime	signature:(ts: wasi::Timestamp) -> SystemTime
from_wide	$RUST/src/os/windows/ffi.rs	/^    fn from_wide(wide: &[u16]) -> Self;$/;"	P	interface:OsStringExt	signature:(wide: &[u16]) -> Self
from_wide	$RUST/src/sys_common/wtf8.rs	/^    pub fn from_wide(v: &[u16]) -> Wtf8Buf {$/;"	P	implementation:Wtf8Buf	signature:(v: &[u16]) -> Wtf8Buf
from_wide_to_user_path	$RUST/src/sys/pal/windows/args.rs	/^pub(crate) fn from_wide_to_user_path(mut path: Vec<u16>) -> io::Result<Vec<u16>> {$/;"	f	signature:(mut path: Vec<u16>) -> io::Result<Vec<u16>>
front	$RUST/src/path.rs	/^    front: State,$/;"	m	struct:Components
fs_rights_base	$RUST/src/os/wasi/fs.rs	/^    fn fs_rights_base(&mut self, rights: u64) -> &mut Self;$/;"	P	interface:OpenOptionsExt	signature:(&mut self, rights: u64) -> &mut Self
fs_rights_base	$RUST/src/sys/pal/wasi/fs.rs	/^    pub fn fs_rights_base(&mut self, rights: wasi::Rights) {$/;"	P	implementation:OpenOptions	signature:(&mut self, rights: wasi::Rights)
fs_rights_inheriting	$RUST/src/os/wasi/fs.rs	/^    fn fs_rights_inheriting(&mut self, rights: u64) -> &mut Self;$/;"	P	interface:OpenOptionsExt	signature:(&mut self, rights: u64) -> &mut Self
fs_rights_inheriting	$RUST/src/sys/pal/wasi/fs.rs	/^    pub fn fs_rights_inheriting(&mut self, rights: wasi::Rights) {$/;"	P	implementation:OpenOptions	signature:(&mut self, rights: wasi::Rights)
fsync	$RUST/src/sys/pal/hermit/fs.rs	/^    pub fn fsync(&self) -> io::Result<()> {$/;"	P	implementation:File	signature:(&self) -> io::Result<()>
fsync	$RUST/src/sys/pal/unix/fs.rs	/^    pub fn fsync(&self) -> io::Result<()> {$/;"	P	implementation:File	signature:(&self) -> io::Result<()>
fsync	$RUST/src/sys/pal/unsupported/fs.rs	/^    pub fn fsync(&self) -> io::Result<()> {$/;"	P	implementation:File	signature:(&self) -> io::Result<()>
fsync	$RUST/src/sys/pal/wasi/fs.rs	/^    pub fn fsync(&self) -> io::Result<()> {$/;"	P	implementation:File	signature:(&self) -> io::Result<()>
fsync	$RUST/src/sys/pal/windows/fs.rs	/^    pub fn fsync(&self) -> io::Result<()> {$/;"	P	implementation:File	signature:(&self) -> io::Result<()>
ftCreationTime	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub ftCreationTime: FILETIME,$/;"	m	struct:WIN32_FIND_DATAW
ftLastAccessTime	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub ftLastAccessTime: FILETIME,$/;"	m	struct:WIN32_FIND_DATAW
ftLastWriteTime	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub ftLastWriteTime: FILETIME,$/;"	m	struct:WIN32_FIND_DATAW
fuchsia	$RUST/src/os/mod.rs	/^pub mod fuchsia;$/;"	n
full	$RUST/src/panic.rs	/^    pub(crate) fn full() -> Option<Self> {$/;"	P	implementation:BacktraceStyle	signature:() -> Option<Self>
func	$RUST/src/sys/pal/unix/weak.rs	/^    func: AtomicPtr<libc::c_void>,$/;"	m	struct:DlsymWeak
func_start	$RUST/src/sys/personality/dwarf/eh.rs	/^    pub func_start: *const u8,                     \/\/ Pointer to the current function$/;"	m	struct:EHContext
futex	$RUST/src/sys/pal/hermit/mod.rs	/^pub mod futex;$/;"	n
futex	$RUST/src/sys/pal/unix/locks/fuchsia_mutex.rs	/^    futex: AtomicU32,$/;"	m	struct:Mutex
futex	$RUST/src/sys/pal/unix/locks/futex_condvar.rs	/^    futex: AtomicU32,$/;"	m	struct:Condvar
futex	$RUST/src/sys/pal/unix/locks/futex_mutex.rs	/^    futex: AtomicU32,$/;"	m	struct:Mutex
futex	$RUST/src/sys/pal/unix/mod.rs	/^pub mod futex;$/;"	n
futex	$RUST/src/sys/pal/wasi/mod.rs	/^pub mod futex;$/;"	n
futex_condvar	$RUST/src/sys/pal/hermit/mod.rs	/^    mod futex_condvar;$/;"	n	module:locks
futex_mutex	$RUST/src/sys/pal/hermit/mod.rs	/^    mod futex_mutex;$/;"	n	module:locks
futex_rwlock	$RUST/src/sys/pal/hermit/mod.rs	/^    mod futex_rwlock;$/;"	n	module:locks
futex_wait	$RUST/src/sys/pal/hermit/futex.rs	/^pub fn futex_wait(futex: &AtomicU32, expected: u32, timeout: Option<Duration>) -> bool {$/;"	f	signature:(futex: &AtomicU32, expected: u32, timeout: Option<Duration>) -> bool
futex_wait	$RUST/src/sys/pal/unix/futex.rs	/^pub fn futex_wait(futex: &AtomicU32, expected: u32, timeout: Option<Duration>) -> bool {$/;"	f	signature:(futex: &AtomicU32, expected: u32, timeout: Option<Duration>) -> bool
futex_wait	$RUST/src/sys/pal/wasm/atomics/futex.rs	/^pub fn futex_wait(futex: &AtomicU32, expected: u32, timeout: Option<Duration>) -> bool {$/;"	f	signature:(futex: &AtomicU32, expected: u32, timeout: Option<Duration>) -> bool
futex_wake	$RUST/src/sys/pal/hermit/futex.rs	/^pub fn futex_wake(futex: &AtomicU32) -> bool {$/;"	f	signature:(futex: &AtomicU32) -> bool
futex_wake	$RUST/src/sys/pal/unix/futex.rs	/^pub fn futex_wake(futex: &AtomicU32) -> bool {$/;"	f	signature:(futex: &AtomicU32) -> bool
futex_wake	$RUST/src/sys/pal/wasm/atomics/futex.rs	/^pub fn futex_wake(futex: &AtomicU32) -> bool {$/;"	f	signature:(futex: &AtomicU32) -> bool
futex_wake_all	$RUST/src/sys/pal/hermit/futex.rs	/^pub fn futex_wake_all(futex: &AtomicU32) {$/;"	f	signature:(futex: &AtomicU32)
futex_wake_all	$RUST/src/sys/pal/unix/futex.rs	/^pub fn futex_wake_all(futex: &AtomicU32) {$/;"	f	signature:(futex: &AtomicU32)
futex_wake_all	$RUST/src/sys/pal/wasm/atomics/futex.rs	/^pub fn futex_wake_all(futex: &AtomicU32) {$/;"	f	signature:(futex: &AtomicU32)
gamma	$RUST/src/f32.rs	/^    pub fn gamma(self) -> f32 {$/;"	P	implementation:f32	signature:(self) -> f32
gamma	$RUST/src/f64.rs	/^    pub fn gamma(self) -> f64 {$/;"	P	implementation:f64	signature:(self) -> f64
generate_fake_frames	$RUST/src/backtrace/tests.rs	/^fn generate_fake_frames() -> Vec<BacktraceFrame> {$/;"	f	signature:() -> Vec<BacktraceFrame>
generation_id	$RUST/src/sync/barrier.rs	/^    generation_id: usize,$/;"	m	struct:BarrierState
generic_copy	$RUST/src/io/copy.rs	/^pub(crate) fn generic_copy<R: ?Sized, W: ?Sized>(reader: &mut R, writer: &mut W) -> Result<u64>$/;"	f	signature:<R: ?Sized, W: ?Sized>(reader: &mut R, writer: &mut W) -> Result<u64> where R: Read, W: Write,
genius_quotes	$RUST/src/sys/pal/windows/args/tests.rs	/^fn genius_quotes() {$/;"	f	signature:()
get	$RUST/src/collections/hash/map.rs	/^    pub fn get<Q: ?Sized>(&self, k: &Q) -> Option<&V>$/;"	f	signature:<Q: ?Sized>(&self, k: &Q) -> Option<&V> where K: Borrow<Q>, Q: Hash + Eq,
get	$RUST/src/collections/hash/set.rs	/^    pub fn get<Q: ?Sized>(&self, value: &Q) -> Option<&T>$/;"	f	signature:<Q: ?Sized>(&self, value: &Q) -> Option<&T> where T: Borrow<Q>, Q: Hash + Eq,
get	$RUST/src/panicking.rs	/^        fn get(&mut self) -> &(dyn Any + Send) {$/;"	P	implementation:rust_panic_without_hook::RewrapBox	signature:(&mut self) -> &(dyn Any + Send)
get	$RUST/src/sync/lazy_lock.rs	/^    fn get(&self) -> Option<&T> {$/;"	P	implementation:LazyLock	signature:(&self) -> Option<&T>
get	$RUST/src/sync/once_lock.rs	/^    pub fn get(&self) -> Option<&T> {$/;"	P	implementation:OnceLock	signature:(&self) -> Option<&T>
get	$RUST/src/sync/poison.rs	/^    pub fn get(&self) -> bool {$/;"	P	implementation:Flag	signature:(&self) -> bool
get	$RUST/src/sys/pal/common/thread_local/fast_local.rs	/^    pub unsafe fn get<F: FnOnce() -> T>(&self, init: F) -> Option<&'static T> {$/;"	P	implementation:Key	signature:<F: FnOnce() -> T>(&self, init: F) -> Option<&'static T>
get	$RUST/src/sys/pal/common/thread_local/mod.rs	/^        pub unsafe fn get(&self) -> Option<&'static T> {$/;"	P	implementation:lazy::LazyKeyInner	signature:(&self) -> Option<&'static T>
get	$RUST/src/sys/pal/common/thread_local/os_local.rs	/^    pub unsafe fn get(&'static self, init: impl FnOnce() -> T) -> Option<&'static T> {$/;"	P	implementation:Key	signature:(&'static self, init: impl FnOnce() -> T) -> Option<&'static T>
get	$RUST/src/sys/pal/common/thread_local/static_local.rs	/^    pub unsafe fn get(&self, init: impl FnOnce() -> T) -> Option<&'static T> {$/;"	P	implementation:Key	signature:(&self, init: impl FnOnce() -> T) -> Option<&'static T>
get	$RUST/src/sys/pal/itron/spin.rs	/^    pub fn get(&self) -> Option<(abi::ID, &T)> {$/;"	P	implementation:SpinIdOnceCell	signature:(&self) -> Option<(abi::ID, &T)>
get	$RUST/src/sys/pal/sgx/abi/tls/mod.rs	/^    pub fn get(key: Key) -> *mut u8 {$/;"	P	implementation:Tls	signature:(key: Key) -> *mut u8
get	$RUST/src/sys/pal/sgx/abi/tls/sync_bitset.rs	/^    pub fn get(&self, index: usize) -> bool {$/;"	P	implementation:SyncBitset	signature:(&self, index: usize) -> bool
get	$RUST/src/sys/pal/sgx/thread_local_key.rs	/^pub unsafe fn get(key: Key) -> *mut u8 {$/;"	f	signature:(key: Key) -> *mut u8
get	$RUST/src/sys/pal/solid/thread_local_key.rs	/^pub unsafe fn get(_key: Key) -> *mut u8 {$/;"	f	signature:(_key: Key) -> *mut u8
get	$RUST/src/sys/pal/unix/thread_local_key.rs	/^pub unsafe fn get(key: Key) -> *mut u8 {$/;"	f	signature:(key: Key) -> *mut u8
get	$RUST/src/sys/pal/unix/weak.rs	/^    pub(crate) fn get(&self) -> Option<F> {$/;"	P	implementation:ExternWeak	signature:(&self) -> Option<F>
get	$RUST/src/sys/pal/unsupported/thread_local_key.rs	/^pub unsafe fn get(_key: Key) -> *mut u8 {$/;"	f	signature:(_key: Key) -> *mut u8
get	$RUST/src/sys/pal/windows/thread_local_key.rs	/^    pub unsafe fn get(&'static self) -> *mut u8 {$/;"	P	implementation:StaticKey	signature:(&'static self) -> *mut u8
get	$RUST/src/sys/pal/xous/thread_local_key.rs	/^pub unsafe fn get(key: Key) -> *mut u8 {$/;"	f	signature:(key: Key) -> *mut u8
get	$RUST/src/sys/pal/zkvm/thread_local_key.rs	/^pub unsafe fn get(key: Key) -> *mut u8 {$/;"	f	signature:(key: Key) -> *mut u8
get	$RUST/src/sys_common/thread_local_key.rs	/^    pub unsafe fn get(&self) -> *mut u8 {$/;"	P	implementation:StaticKey	signature:(&self) -> *mut u8
get	$RUST/src/thread/local.rs	/^    pub fn get(&'static self) -> T$/;"	P	implementation:LocalKey	signature:(&'static self) -> T where T: Copy,
get_access_mode	$RUST/src/sys/pal/hermit/fs.rs	/^    fn get_access_mode(&self) -> io::Result<i32> {$/;"	P	implementation:OpenOptions	signature:(&self) -> io::Result<i32>
get_access_mode	$RUST/src/sys/pal/solid/fs.rs	/^    fn get_access_mode(&self) -> io::Result<c_int> {$/;"	P	implementation:OpenOptions	signature:(&self) -> io::Result<c_int>
get_access_mode	$RUST/src/sys/pal/unix/fs.rs	/^    fn get_access_mode(&self) -> io::Result<c_int> {$/;"	P	implementation:OpenOptions	signature:(&self) -> io::Result<c_int>
get_access_mode	$RUST/src/sys/pal/windows/fs.rs	/^    fn get_access_mode(&self) -> io::Result<c::DWORD> {$/;"	P	implementation:OpenOptions	signature:(&self) -> io::Result<c::DWORD>
get_args	$RUST/src/process.rs	/^    pub fn get_args(&self) -> CommandArgs<'_> {$/;"	P	implementation:Command	signature:(&self) -> CommandArgs<'_>
get_args	$RUST/src/sys/pal/unix/process/process_common.rs	/^    pub fn get_args(&self) -> CommandArgs<'_> {$/;"	P	implementation:Command	signature:(&self) -> CommandArgs<'_>
get_args	$RUST/src/sys/pal/unsupported/process.rs	/^    pub fn get_args(&self) -> CommandArgs<'_> {$/;"	P	implementation:Command	signature:(&self) -> CommandArgs<'_>
get_args	$RUST/src/sys/pal/windows/process.rs	/^    pub fn get_args(&self) -> CommandArgs<'_> {$/;"	P	implementation:Command	signature:(&self) -> CommandArgs<'_>
get_argv	$RUST/src/sys/pal/unix/process/process_common.rs	/^    pub fn get_argv(&self) -> &Vec<*const c_char> {$/;"	P	implementation:Command	signature:(&self) -> &Vec<*const c_char>
get_backtrace_style	$RUST/src/panic.rs	/^pub fn get_backtrace_style() -> Option<BacktraceStyle> {$/;"	f	signature:() -> Option<BacktraceStyle>
get_closures	$RUST/src/sys/pal/unix/process/process_common.rs	/^    pub fn get_closures(&mut self) -> &mut Vec<Box<dyn FnMut() -> io::Result<()> + Send + Sync>>/;"	P	implementation:Command	signature:(&mut self) -> &mut Vec<Box<dyn FnMut() -> io::Result<()> + Send + Sync>>
get_count	$RUST/src/panicking.rs	/^    pub fn get_count() -> usize {$/;"	f	module:panic_count	signature:() -> usize
get_create_pidfd	$RUST/src/sys/pal/unix/process/process_common.rs	/^    pub fn get_create_pidfd(&self) -> bool {$/;"	P	implementation:Command	signature:(&self) -> bool
get_creation_mode	$RUST/src/sys/pal/hermit/fs.rs	/^    fn get_creation_mode(&self) -> io::Result<i32> {$/;"	P	implementation:OpenOptions	signature:(&self) -> io::Result<i32>
get_creation_mode	$RUST/src/sys/pal/solid/fs.rs	/^    fn get_creation_mode(&self) -> io::Result<c_int> {$/;"	P	implementation:OpenOptions	signature:(&self) -> io::Result<c_int>
get_creation_mode	$RUST/src/sys/pal/unix/fs.rs	/^    fn get_creation_mode(&self) -> io::Result<c_int> {$/;"	P	implementation:OpenOptions	signature:(&self) -> io::Result<c_int>
get_creation_mode	$RUST/src/sys/pal/windows/fs.rs	/^    fn get_creation_mode(&self) -> io::Result<c::DWORD> {$/;"	P	implementation:OpenOptions	signature:(&self) -> io::Result<c::DWORD>
get_current_dir	$RUST/src/process.rs	/^    pub fn get_current_dir(&self) -> Option<&Path> {$/;"	P	implementation:Command	signature:(&self) -> Option<&Path>
get_current_dir	$RUST/src/sys/pal/unix/process/process_common.rs	/^    pub fn get_current_dir(&self) -> Option<&Path> {$/;"	P	implementation:Command	signature:(&self) -> Option<&Path>
get_current_dir	$RUST/src/sys/pal/unsupported/process.rs	/^    pub fn get_current_dir(&self) -> Option<&Path> {$/;"	P	implementation:Command	signature:(&self) -> Option<&Path>
get_current_dir	$RUST/src/sys/pal/windows/process.rs	/^    pub fn get_current_dir(&self) -> Option<&Path> {$/;"	P	implementation:Command	signature:(&self) -> Option<&Path>
get_cwd	$RUST/src/sys/pal/unix/process/process_common.rs	/^    pub fn get_cwd(&self) -> &Option<CString> {$/;"	P	implementation:Command	signature:(&self) -> &Option<CString>
get_data_start	$RUST/src/sys/personality/dwarf/eh.rs	/^    pub get_data_start: &'a dyn Fn() -> *const u8, \/\/ Get pointer to the data section$/;"	m	struct:EHContext
get_env_store	$RUST/src/sys/pal/sgx/os.rs	/^fn get_env_store() -> Option<&'static EnvStore> {$/;"	f	signature:() -> Option<&'static EnvStore>
get_envs	$RUST/src/process.rs	/^    pub fn get_envs(&self) -> CommandEnvs<'_> {$/;"	P	implementation:Command	signature:(&self) -> CommandEnvs<'_>
get_envs	$RUST/src/sys/pal/unix/process/process_common.rs	/^    pub fn get_envs(&self) -> CommandEnvs<'_> {$/;"	P	implementation:Command	signature:(&self) -> CommandEnvs<'_>
get_envs	$RUST/src/sys/pal/unsupported/process.rs	/^    pub fn get_envs(&self) -> CommandEnvs<'_> {$/;"	P	implementation:Command	signature:(&self) -> CommandEnvs<'_>
get_envs	$RUST/src/sys/pal/windows/process.rs	/^    pub fn get_envs(&self) -> CommandEnvs<'_> {$/;"	P	implementation:Command	signature:(&self) -> CommandEnvs<'_>
get_flags_and_attributes	$RUST/src/sys/pal/windows/fs.rs	/^    fn get_flags_and_attributes(&self) -> c::DWORD {$/;"	P	implementation:OpenOptions	signature:(&self) -> c::DWORD
get_gid	$RUST/src/os/unix/net/ancillary.rs	/^    pub fn get_gid(&self) -> libc::gid_t {$/;"	P	implementation:SocketCred	signature:(&self) -> libc::gid_t
get_gid	$RUST/src/sys/pal/unix/process/process_common.rs	/^    pub fn get_gid(&self) -> Option<gid_t> {$/;"	P	implementation:Command	signature:(&self) -> Option<gid_t>
get_groups	$RUST/src/sys/pal/unix/process/process_common.rs	/^    pub fn get_groups(&self) -> Option<&[gid_t]> {$/;"	P	implementation:Command	signature:(&self) -> Option<&[gid_t]>
get_handle	$RUST/src/sys/pal/windows/stdio.rs	/^pub fn get_handle(handle_id: c::DWORD) -> io::Result<c::HANDLE> {$/;"	f	signature:(handle_id: c::DWORD) -> io::Result<c::HANDLE>
get_key_value	$RUST/src/collections/hash/map.rs	/^    pub fn get_key_value<Q: ?Sized>(&self, k: &Q) -> Option<(&K, &V)>$/;"	f	signature:<Q: ?Sized>(&self, k: &Q) -> Option<(&K, &V)> where K: Borrow<Q>, Q: Hash + Eq,
get_key_value_mut	$RUST/src/collections/hash/map.rs	/^    pub fn get_key_value_mut(&mut self) -> (&mut K, &mut V) {$/;"	P	implementation:RawOccupiedEntryMut	signature:(&mut self) -> (&mut K, &mut V)
get_last_error	$RUST/src/sys/pal/windows/api.rs	/^pub fn get_last_error() -> WinError {$/;"	f	signature:() -> WinError
get_many_mut	$RUST/src/collections/hash/map.rs	/^    pub fn get_many_mut<Q: ?Sized, const N: usize>(&mut self, ks: [&Q; N]) -> Option<[&'_ mut V;/;"	f	signature:<Q: ?Sized, const N: usize>(&mut self, ks: [&Q; N]) -> Option<[&'_ mut V; N]> where K: Borrow<Q>, Q: Hash + Eq,
get_many_unchecked_mut	$RUST/src/collections/hash/map.rs	/^    pub unsafe fn get_many_unchecked_mut<Q: ?Sized, const N: usize>($/;"	f	signature:<Q: ?Sized, const N: usize>( &mut self, ks: [&Q; N], ) -> Option<[&'_ mut V; N]> where K: Borrow<Q>, Q: Hash + Eq,
get_mode	$RUST/src/sys/pal/unix/fs.rs	/^        fn get_mode(fd: c_int) -> Option<(bool, bool)> {$/;"	f	method:File::fmt	signature:(fd: c_int) -> Option<(bool, bool)>
get_mut	$RUST/src/collections/hash/map.rs	/^    pub fn get_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut V>$/;"	f	signature:<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut V> where K: Borrow<Q>, Q: Hash + Eq,
get_mut	$RUST/src/io/buffered/bufreader.rs	/^    pub fn get_mut(&mut self) -> &mut R {$/;"	P	implementation:BufReader	signature:(&mut self) -> &mut R
get_mut	$RUST/src/io/buffered/bufwriter.rs	/^    pub fn get_mut(&mut self) -> &mut W {$/;"	P	implementation:BufWriter	signature:(&mut self) -> &mut W
get_mut	$RUST/src/io/buffered/linewriter.rs	/^    pub fn get_mut(&mut self) -> &mut W {$/;"	P	implementation:LineWriter	signature:(&mut self) -> &mut W
get_mut	$RUST/src/io/cursor.rs	/^    pub fn get_mut(&mut self) -> &mut T {$/;"	P	implementation:Cursor	signature:(&mut self) -> &mut T
get_mut	$RUST/src/io/error.rs	/^    pub fn get_mut(&mut self) -> Option<&mut (dyn error::Error + Send + Sync + 'static)> {$/;"	P	implementation:Error	signature:(&mut self) -> Option<&mut (dyn error::Error + Send + Sync + 'static)>
get_mut	$RUST/src/io/mod.rs	/^    pub fn get_mut(&mut self) -> (&mut T, &mut U) {$/;"	P	implementation:Chain	signature:(&mut self) -> (&mut T, &mut U)
get_mut	$RUST/src/sync/mutex.rs	/^    pub fn get_mut(&mut self) -> LockResult<&mut T> {$/;"	P	implementation:Mutex	signature:(&mut self) -> LockResult<&mut T>
get_mut	$RUST/src/sync/once_lock.rs	/^    pub fn get_mut(&mut self) -> Option<&mut T> {$/;"	P	implementation:OnceLock	signature:(&mut self) -> Option<&mut T>
get_mut	$RUST/src/sync/poison.rs	/^    pub fn get_mut(&mut self) -> &mut T {$/;"	P	implementation:PoisonError	signature:(&mut self) -> &mut T
get_mut	$RUST/src/sync/rwlock.rs	/^    pub fn get_mut(&mut self) -> LockResult<&mut T> {$/;"	P	implementation:RwLock	signature:(&mut self) -> LockResult<&mut T>
get_mut	$RUST/src/sys/pal/itron/spin.rs	/^    pub fn get_mut(&mut self) -> Option<(abi::ID, &mut T)> {$/;"	P	implementation:SpinIdOnceCell	signature:(&mut self) -> Option<(abi::ID, &mut T)>
get_openat_fn	$RUST/src/sys/pal/unix/fs.rs	/^        fn get_openat_fn() -> Option<unsafe extern "C" fn(c_int, *const c_char, c_int) -> c_int>/;"	f	module:remove_dir_impl::macos_weak	signature:() -> Option<unsafe extern "C" fn(c_int, *const c_char, c_int) -> c_int>
get_or_init	$RUST/src/sync/once_lock.rs	/^    pub fn get_or_init<F>(&self, f: F) -> &T$/;"	P	implementation:OnceLock	signature:<F>(&self, f: F) -> &T where F: FnOnce() -> T,
get_or_insert	$RUST/src/collections/hash/set.rs	/^    pub fn get_or_insert(&mut self, value: T) -> &T {$/;"	f	signature:(&mut self, value: T) -> &T
get_or_insert_owned	$RUST/src/collections/hash/set.rs	/^    pub fn get_or_insert_owned<Q: ?Sized>(&mut self, value: &Q) -> &T$/;"	f	signature:<Q: ?Sized>(&mut self, value: &Q) -> &T where T: Borrow<Q>, Q: Hash + Eq + ToOwned<Owned = T>,
get_or_insert_with	$RUST/src/collections/hash/set.rs	/^    pub fn get_or_insert_with<Q: ?Sized, F>(&mut self, value: &Q, f: F) -> &T$/;"	f	signature:<Q: ?Sized, F>(&mut self, value: &Q, f: F) -> &T where T: Borrow<Q>, Q: Hash + Eq, F: FnOnce(&Q) -> T,
get_or_try_init	$RUST/src/sync/once_lock.rs	/^    pub fn get_or_try_init<F, E>(&self, f: F) -> Result<&T, E>$/;"	P	implementation:OnceLock	signature:<F, E>(&self, f: F) -> Result<&T, E> where F: FnOnce() -> Result<T, E>,
get_or_try_init	$RUST/src/sync/once_lock/tests.rs	/^fn get_or_try_init() {$/;"	f	signature:()
get_or_try_init	$RUST/src/sys/pal/itron/spin.rs	/^    pub fn get_or_try_init<F, E>(&self, f: F) -> Result<(abi::ID, &T), E>$/;"	P	implementation:SpinIdOnceCell	signature:<F, E>(&self, f: F) -> Result<(abi::ID, &T), E> where F: FnOnce() -> Result<(abi::ID, T), E>,
get_path	$RUST/src/sys/pal/unix/fs.rs	/^        fn get_path(fd: c_int) -> Option<PathBuf> {$/;"	f	method:File::fmt	signature:(fd: c_int) -> Option<PathBuf>
get_path	$RUST/src/sys/pal/windows/fs.rs	/^fn get_path(f: &File) -> io::Result<PathBuf> {$/;"	f	signature:(f: &File) -> io::Result<PathBuf>
get_pgroup	$RUST/src/sys/pal/unix/process/process_common.rs	/^    pub fn get_pgroup(&self) -> Option<pid_t> {$/;"	P	implementation:Command	signature:(&self) -> Option<pid_t>
get_pid	$RUST/src/os/unix/net/ancillary.rs	/^    pub fn get_pid(&self) -> libc::pid_t {$/;"	P	implementation:SocketCred	signature:(&self) -> libc::pid_t
get_pointer	$RUST/src/sys_common/lazy_box.rs	/^    fn get_pointer(&self) -> *mut T {$/;"	P	implementation:LazyBox	signature:(&self) -> *mut T
get_pri	$RUST/src/sys/pal/itron/abi.rs	/^    pub fn get_pri(tskid: ID, p_tskpri: *mut PRI) -> ER;$/;"	f	signature:(tskid: ID, p_tskpri: *mut PRI) -> ER
get_process_heap	$RUST/src/sys/pal/windows/alloc.rs	/^unsafe fn get_process_heap() -> c::HANDLE {$/;"	f	signature:() -> c::HANDLE
get_program	$RUST/src/process.rs	/^    pub fn get_program(&self) -> &OsStr {$/;"	P	implementation:Command	signature:(&self) -> &OsStr
get_program	$RUST/src/sys/pal/unix/process/process_common.rs	/^    pub fn get_program(&self) -> &OsStr {$/;"	P	implementation:Command	signature:(&self) -> &OsStr
get_program	$RUST/src/sys/pal/unsupported/process.rs	/^    pub fn get_program(&self) -> &OsStr {$/;"	P	implementation:Command	signature:(&self) -> &OsStr
get_program	$RUST/src/sys/pal/windows/process.rs	/^    pub fn get_program(&self) -> &OsStr {$/;"	P	implementation:Command	signature:(&self) -> &OsStr
get_program_cstr	$RUST/src/sys/pal/unix/process/process_common.rs	/^    pub fn get_program_cstr(&self) -> &CStr {$/;"	P	implementation:Command	signature:(&self) -> &CStr
get_program_kind	$RUST/src/sys/pal/unix/process/process_common.rs	/^    pub fn get_program_kind(&self) -> ProgramKind {$/;"	P	implementation:Command	signature:(&self) -> ProgramKind
get_random	$RUST/src/sys/pal/uefi/mod.rs	/^fn get_random() -> Option<(u64, u64)> {$/;"	f	signature:() -> Option<(u64, u64)>
get_ref	$RUST/src/io/buffered/bufreader.rs	/^    pub fn get_ref(&self) -> &R {$/;"	P	implementation:BufReader	signature:(&self) -> &R
get_ref	$RUST/src/io/buffered/bufwriter.rs	/^    pub fn get_ref(&self) -> &W {$/;"	P	implementation:BufWriter	signature:(&self) -> &W
get_ref	$RUST/src/io/buffered/linewriter.rs	/^    pub fn get_ref(&self) -> &W {$/;"	P	implementation:LineWriter	signature:(&self) -> &W
get_ref	$RUST/src/io/cursor.rs	/^    pub const fn get_ref(&self) -> &T {$/;"	P	implementation:Cursor	signature:(&self) -> &T
get_ref	$RUST/src/io/error.rs	/^    pub fn get_ref(&self) -> Option<&(dyn error::Error + Send + Sync + 'static)> {$/;"	P	implementation:Error	signature:(&self) -> Option<&(dyn error::Error + Send + Sync + 'static)>
get_ref	$RUST/src/io/mod.rs	/^    pub fn get_ref(&self) -> (&T, &U) {$/;"	P	implementation:Chain	signature:(&self) -> (&T, &U)
get_ref	$RUST/src/sync/poison.rs	/^    pub fn get_ref(&self) -> &T {$/;"	P	implementation:PoisonError	signature:(&self) -> &T
get_remove_insert	$RUST/benches/hash/map.rs	/^fn get_remove_insert(b: &mut Bencher) {$/;"	f	signature:(b: &mut Bencher)
get_stack	$RUST/src/sys/pal/unix/stack_overflow.rs	/^    unsafe fn get_stack() -> libc::stack_t {$/;"	f	module:imp	signature:() -> libc::stack_t
get_stack_start	$RUST/src/sys/pal/unix/thread.rs	/^    unsafe fn get_stack_start() -> Option<*mut libc::c_void> {$/;"	f	module:guard	signature:() -> Option<*mut libc::c_void>
get_stack_start_aligned	$RUST/src/sys/pal/unix/thread.rs	/^    unsafe fn get_stack_start_aligned() -> Option<*mut libc::c_void> {$/;"	f	module:guard	signature:() -> Option<*mut libc::c_void>
get_stackp	$RUST/src/sys/pal/unix/stack_overflow.rs	/^    unsafe fn get_stackp() -> *mut libc::c_void {$/;"	f	module:imp	signature:() -> *mut libc::c_void
get_tcs_addr	$RUST/src/sys/pal/sgx/abi/entry.S	/^get_tcs_addr:$/;"	l
get_tcs_addr	$RUST/src/sys/pal/sgx/abi/thread.rs	/^        fn get_tcs_addr() -> *mut u8;$/;"	f	function:current	signature:() -> *mut u8
get_text_start	$RUST/src/sys/personality/dwarf/eh.rs	/^    pub get_text_start: &'a dyn Fn() -> *const u8, \/\/ Get pointer to the code section$/;"	m	struct:EHContext
get_tid	$RUST/src/sys/pal/itron/abi.rs	/^    pub fn get_tid(p_tskid: *mut ID) -> ER;$/;"	f	signature:(p_tskid: *mut ID) -> ER
get_tim	$RUST/src/sys/pal/itron/abi.rs	/^    pub fn get_tim(p_systim: *mut SYSTIM) -> ER;$/;"	f	signature:(p_systim: *mut SYSTIM) -> ER
get_tls_ptr	$RUST/src/sys/pal/sgx/abi/entry.S	/^get_tls_ptr:$/;"	l
get_tls_ptr	$RUST/src/sys/pal/sgx/abi/tls/mod.rs	/^    fn get_tls_ptr() -> *const u8;$/;"	f	signature:() -> *const u8
get_uid	$RUST/src/os/unix/net/ancillary.rs	/^    pub fn get_uid(&self) -> libc::uid_t {$/;"	P	implementation:SocketCred	signature:(&self) -> libc::uid_t
get_uid	$RUST/src/sys/pal/unix/process/process_common.rs	/^    pub fn get_uid(&self) -> Option<uid_t> {$/;"	P	implementation:Command	signature:(&self) -> Option<uid_t>
get_unchecked	$RUST/src/sync/once_lock.rs	/^    unsafe fn get_unchecked(&self) -> &T {$/;"	P	implementation:OnceLock	signature:(&self) -> &T
get_unchecked	$RUST/src/sys/pal/itron/spin.rs	/^    pub unsafe fn get_unchecked(&self) -> (abi::ID, &T) {$/;"	P	implementation:SpinIdOnceCell	signature:(&self) -> (abi::ID, &T)
get_unchecked_mut	$RUST/src/sync/once_lock.rs	/^    unsafe fn get_unchecked_mut(&mut self) -> &mut T {$/;"	P	implementation:OnceLock	signature:(&mut self) -> &mut T
getaddrinfo	$RUST/src/sys/pal/solid/abi/sockets.rs	/^    pub fn getaddrinfo($/;"	f	signature:( nodename: *const c_char, servname: *const c_char, hints: *const addrinfo, res: *mut *mut addrinfo, ) -> c_int
getaddrinfo	$RUST/src/sys/pal/windows/c.rs	/^pub unsafe fn getaddrinfo($/;"	f	signature:( node: *const c_char, service: *const c_char, hints: *const ADDRINFOA, res: *mut *mut ADDRINFOA, ) -> c_int
getaddrinfo	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn getaddrinfo($/;"	f	signature:( pnodename: PCSTR, pservicename: PCSTR, phints: *const ADDRINFOA, ppresult: *mut *mut ADDRINFOA, ) -> i32
getcwd	$RUST/src/sys/pal/hermit/os.rs	/^pub fn getcwd() -> io::Result<PathBuf> {$/;"	f	signature:() -> io::Result<PathBuf>
getcwd	$RUST/src/sys/pal/sgx/os.rs	/^pub fn getcwd() -> io::Result<PathBuf> {$/;"	f	signature:() -> io::Result<PathBuf>
getcwd	$RUST/src/sys/pal/solid/os.rs	/^pub fn getcwd() -> io::Result<PathBuf> {$/;"	f	signature:() -> io::Result<PathBuf>
getcwd	$RUST/src/sys/pal/teeos/os.rs	/^pub fn getcwd() -> io::Result<PathBuf> {$/;"	f	signature:() -> io::Result<PathBuf>
getcwd	$RUST/src/sys/pal/uefi/os.rs	/^pub fn getcwd() -> io::Result<PathBuf> {$/;"	f	signature:() -> io::Result<PathBuf>
getcwd	$RUST/src/sys/pal/unix/os.rs	/^pub fn getcwd() -> io::Result<PathBuf> {$/;"	f	signature:() -> io::Result<PathBuf>
getcwd	$RUST/src/sys/pal/unsupported/os.rs	/^pub fn getcwd() -> io::Result<PathBuf> {$/;"	f	signature:() -> io::Result<PathBuf>
getcwd	$RUST/src/sys/pal/wasi/os.rs	/^pub fn getcwd() -> io::Result<PathBuf> {$/;"	f	signature:() -> io::Result<PathBuf>
getcwd	$RUST/src/sys/pal/windows/os.rs	/^pub fn getcwd() -> io::Result<PathBuf> {$/;"	f	signature:() -> io::Result<PathBuf>
getcwd	$RUST/src/sys/pal/xous/os.rs	/^pub fn getcwd() -> io::Result<PathBuf> {$/;"	f	signature:() -> io::Result<PathBuf>
getcwd	$RUST/src/sys/pal/zkvm/os.rs	/^pub fn getcwd() -> io::Result<PathBuf> {$/;"	f	signature:() -> io::Result<PathBuf>
getentropy	$RUST/src/sys/pal/unix/rand.rs	/^            fn getentropy(bytes: *mut c_void, count: size_t) -> c_int;$/;"	f	function:imp::getentropy_fill_bytes	signature:(bytes: *mut c_void, count: size_t) -> c_int
getentropy_fill_bytes	$RUST/src/sys/pal/unix/rand.rs	/^    fn getentropy_fill_bytes(v: &mut [u8]) {$/;"	f	module:imp	signature:(v: &mut [u8])
getenv	$RUST/src/sys/pal/hermit/os.rs	/^pub fn getenv(k: &OsStr) -> Option<OsString> {$/;"	f	signature:(k: &OsStr) -> Option<OsString>
getenv	$RUST/src/sys/pal/sgx/os.rs	/^pub fn getenv(k: &OsStr) -> Option<OsString> {$/;"	f	signature:(k: &OsStr) -> Option<OsString>
getenv	$RUST/src/sys/pal/solid/os.rs	/^pub fn getenv(k: &OsStr) -> Option<OsString> {$/;"	f	signature:(k: &OsStr) -> Option<OsString>
getenv	$RUST/src/sys/pal/teeos/os.rs	/^pub fn getenv(_: &OsStr) -> Option<OsString> {$/;"	f	signature:(_: &OsStr) -> Option<OsString>
getenv	$RUST/src/sys/pal/uefi/os.rs	/^pub fn getenv(_: &OsStr) -> Option<OsString> {$/;"	f	signature:(_: &OsStr) -> Option<OsString>
getenv	$RUST/src/sys/pal/unix/os.rs	/^pub fn getenv(k: &OsStr) -> Option<OsString> {$/;"	f	signature:(k: &OsStr) -> Option<OsString>
getenv	$RUST/src/sys/pal/unsupported/os.rs	/^pub fn getenv(_: &OsStr) -> Option<OsString> {$/;"	f	signature:(_: &OsStr) -> Option<OsString>
getenv	$RUST/src/sys/pal/wasi/os.rs	/^pub fn getenv(k: &OsStr) -> Option<OsString> {$/;"	f	signature:(k: &OsStr) -> Option<OsString>
getenv	$RUST/src/sys/pal/windows/os.rs	/^pub fn getenv(k: &OsStr) -> Option<OsString> {$/;"	f	signature:(k: &OsStr) -> Option<OsString>
getenv	$RUST/src/sys/pal/xous/os.rs	/^pub fn getenv(_: &OsStr) -> Option<OsString> {$/;"	f	signature:(_: &OsStr) -> Option<OsString>
getenv	$RUST/src/sys/pal/zkvm/os.rs	/^pub fn getenv(varname: &OsStr) -> Option<OsString> {$/;"	f	signature:(varname: &OsStr) -> Option<OsString>
getgid	$RUST/src/os/unix/net/tests.rs	/^    fn getgid() -> libc::gid_t {$/;"	f	function:test_send_vectored_with_ancillary_to_unix_datagram	signature:() -> libc::gid_t
getpeername	$RUST/src/sys/pal/solid/abi/sockets.rs	/^    pub fn getpeername(s: c_int, name: *mut sockaddr, namelen: *mut socklen_t) -> c_int;$/;"	f	signature:(s: c_int, name: *mut sockaddr, namelen: *mut socklen_t) -> c_int
getpeername	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn getpeername(s: SOCKET, name: *mut SOCKADDR, namelen: *mut i32) -> i32;$/;"	f	signature:(s: SOCKET, name: *mut SOCKADDR, namelen: *mut i32) -> i32
getpid	$RUST/src/os/unix/net/tests.rs	/^    fn getpid() -> libc::pid_t {$/;"	f	function:test_send_vectored_with_ancillary_to_unix_datagram	signature:() -> libc::pid_t
getpid	$RUST/src/sys/pal/hermit/os.rs	/^pub fn getpid() -> u32 {$/;"	f	signature:() -> u32
getpid	$RUST/src/sys/pal/sgx/os.rs	/^pub fn getpid() -> u32 {$/;"	f	signature:() -> u32
getpid	$RUST/src/sys/pal/solid/os.rs	/^pub fn getpid() -> u32 {$/;"	f	signature:() -> u32
getpid	$RUST/src/sys/pal/teeos/os.rs	/^pub fn getpid() -> u32 {$/;"	f	signature:() -> u32
getpid	$RUST/src/sys/pal/uefi/os.rs	/^pub fn getpid() -> u32 {$/;"	f	signature:() -> u32
getpid	$RUST/src/sys/pal/unix/os.rs	/^pub fn getpid() -> u32 {$/;"	f	signature:() -> u32
getpid	$RUST/src/sys/pal/unsupported/os.rs	/^pub fn getpid() -> u32 {$/;"	f	signature:() -> u32
getpid	$RUST/src/sys/pal/wasi/os.rs	/^pub fn getpid() -> u32 {$/;"	f	signature:() -> u32
getpid	$RUST/src/sys/pal/windows/os.rs	/^pub fn getpid() -> u32 {$/;"	f	signature:() -> u32
getpid	$RUST/src/sys/pal/xous/os.rs	/^pub fn getpid() -> u32 {$/;"	f	signature:() -> u32
getpid	$RUST/src/sys/pal/zkvm/os.rs	/^pub fn getpid() -> u32 {$/;"	f	signature:() -> u32
getppid	$RUST/src/sys/pal/unix/os.rs	/^pub fn getppid() -> u32 {$/;"	f	signature:() -> u32
getrandom	$RUST/src/sys/pal/unix/rand.rs	/^    fn getrandom(buf: &mut [u8]) -> libc::ssize_t {$/;"	f	module:imp	signature:(buf: &mut [u8]) -> libc::ssize_t
getrandom_fill_bytes	$RUST/src/sys/pal/unix/rand.rs	/^    fn getrandom_fill_bytes(v: &mut [u8]) -> bool {$/;"	f	module:imp	signature:(v: &mut [u8]) -> bool
getsockname	$RUST/src/sys/pal/solid/abi/sockets.rs	/^    pub fn getsockname(s: c_int, name: *mut sockaddr, namelen: *mut socklen_t) -> c_int;$/;"	f	signature:(s: c_int, name: *mut sockaddr, namelen: *mut socklen_t) -> c_int
getsockname	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn getsockname(s: SOCKET, name: *mut SOCKADDR, namelen: *mut i32) -> i32;$/;"	f	signature:(s: SOCKET, name: *mut SOCKADDR, namelen: *mut i32) -> i32
getsockopt	$RUST/src/sys/pal/solid/abi/sockets.rs	/^    pub fn getsockopt($/;"	f	signature:( s: c_int, level: c_int, optname: c_int, optval: *mut c_void, optlen: *mut socklen_t, ) -> c_int
getsockopt	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn getsockopt(s: SOCKET, level: i32, optname: i32, optval: PSTR, optlen: *mut i32) -> i3/;"	f	signature:(s: SOCKET, level: i32, optname: i32, optval: PSTR, optlen: *mut i32) -> i32
getsockopt	$RUST/src/sys_common/net.rs	/^pub fn getsockopt<T: Copy>(sock: &Socket, level: c_int, option_name: c_int) -> io::Result<T> {$/;"	f	signature:<T: Copy>(sock: &Socket, level: c_int, option_name: c_int) -> io::Result<T>
getuid	$RUST/src/os/unix/net/tests.rs	/^    fn getuid() -> libc::uid_t {$/;"	f	function:test_send_vectored_with_ancillary_to_unix_datagram	signature:() -> libc::uid_t
gfx	$RUST/src/sys/pal/xous/stdio.rs	/^    gfx: Option<Connection>,$/;"	m	struct:PanicWriter
gid	$RUST/src/os/unix/fs.rs	/^    fn gid(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
gid	$RUST/src/os/unix/process.rs	/^    fn gid(&mut self, id: GroupId) -> &mut process::Command;$/;"	P	interface:CommandExt	signature:(&mut self, id: GroupId) -> &mut process::Command
gid	$RUST/src/os/unix/ucred.rs	/^    pub gid: gid_t,$/;"	m	struct:UCred
gid	$RUST/src/sys/pal/unix/process/process_common.rs	/^    pub fn gid(&mut self, id: gid_t) {$/;"	P	implementation:Command	signature:(&mut self, id: gid_t)
gid_t	$RUST/src/os/redox/raw.rs	/^pub type gid_t = c_int;$/;"	t
gid_t	$RUST/src/os/unix/net/ancillary.rs	/^    pub type gid_t = u32;$/;"	t	module:libc
gid_t	$RUST/src/os/unix/raw.rs	/^pub type gid_t = u32;$/;"	t
glibc_version	$RUST/src/sys/pal/unix/os.rs	/^pub fn glibc_version() -> Option<(usize, usize)> {$/;"	f	signature:() -> Option<(usize, usize)>
globvar	$RUST/src/sys/pal/sgx/abi/entry.S	/^.macro globvar name:req size:req$/;"	m	signature:name:req size:req
gnu_get_libc_version	$RUST/src/sys/pal/unix/os.rs	/^        fn gnu_get_libc_version() -> *const libc::c_char;$/;"	f	function:glibc_version	signature:() -> *const libc::c_char
got_symlink_permission	$RUST/src/fs/tests.rs	/^pub fn got_symlink_permission(tmpdir: &TempDir) -> bool {$/;"	f	signature:(tmpdir: &TempDir) -> bool
group_or_null	$RUST/src/os/xous/services/log.rs	/^fn group_or_null(data: &[u8], offset: usize) -> usize {$/;"	f	signature:(data: &[u8], offset: usize) -> usize
groups	$RUST/src/os/unix/process.rs	/^    fn groups(&mut self, groups: &[GroupId]) -> &mut process::Command;$/;"	P	interface:CommandExt	signature:(&mut self, groups: &[GroupId]) -> &mut process::Command
groups	$RUST/src/sys/pal/unix/process/process_common.rs	/^    pub fn groups(&mut self, groups: &[gid_t]) {$/;"	P	implementation:Command	signature:(&mut self, groups: &[gid_t])
grow	$RUST/src/alloc.rs	/^    unsafe fn grow($/;"	P	implementation:System	signature:( &self, ptr: NonNull<u8>, old_layout: Layout, new_layout: Layout, ) -> Result<NonNull<[u8]>, AllocError>
grow_by_insertion	$RUST/benches/hash/map.rs	/^fn grow_by_insertion(b: &mut Bencher) {$/;"	f	signature:(b: &mut Bencher)
grow_impl	$RUST/src/alloc.rs	/^    unsafe fn grow_impl($/;"	P	implementation:System	signature:( &self, ptr: NonNull<u8>, old_layout: Layout, new_layout: Layout, zeroed: bool, ) -> Result<NonNull<[u8]>, AllocError>
grow_zeroed	$RUST/src/alloc.rs	/^    unsafe fn grow_zeroed($/;"	P	implementation:System	signature:( &self, ptr: NonNull<u8>, old_layout: Layout, new_layout: Layout, ) -> Result<NonNull<[u8]>, AllocError>
guard	$RUST/src/sync/poison.rs	/^    pub fn guard(&self) -> LockResult<Guard> {$/;"	P	implementation:Flag	signature:(&self) -> LockResult<Guard>
guard	$RUST/src/sys/pal/hermit/thread.rs	/^pub mod guard {$/;"	n
guard	$RUST/src/sys/pal/itron/thread.rs	/^pub mod guard {$/;"	n
guard	$RUST/src/sys/pal/sgx/thread.rs	/^pub mod guard {$/;"	n
guard	$RUST/src/sys/pal/teeos/thread.rs	/^pub mod guard {$/;"	n
guard	$RUST/src/sys/pal/unix/thread.rs	/^pub mod guard {$/;"	n
guard	$RUST/src/sys/pal/unsupported/thread.rs	/^pub mod guard {$/;"	n
guard	$RUST/src/sys/pal/wasi/thread.rs	/^pub mod guard {$/;"	n
guard	$RUST/src/sys/pal/wasm/atomics/thread.rs	/^pub mod guard {$/;"	n
guard	$RUST/src/sys/pal/windows/thread.rs	/^pub mod guard {$/;"	n
guard	$RUST/src/sys/pal/xous/thread.rs	/^pub mod guard {$/;"	n
guard_lock	$RUST/src/sync/mutex.rs	/^pub fn guard_lock<'a, T: ?Sized>(guard: &MutexGuard<'a, T>) -> &'a sys::Mutex {$/;"	f	signature:<'a, T: ?Sized>(guard: &MutexGuard<'a, T>) -> &'a sys::Mutex
guard_poison	$RUST/src/sync/mutex.rs	/^pub fn guard_poison<'a, T: ?Sized>(guard: &MutexGuard<'a, T>) -> &'a poison::Flag {$/;"	f	signature:<'a, T: ?Sized>(guard: &MutexGuard<'a, T>) -> &'a poison::Flag
hEvent	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub hEvent: HANDLE,$/;"	m	struct:OVERLAPPED
hProcess	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub hProcess: HANDLE,$/;"	m	struct:PROCESS_INFORMATION
hStdError	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub hStdError: HANDLE,$/;"	m	struct:STARTUPINFOW
hStdInput	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub hStdInput: HANDLE,$/;"	m	struct:STARTUPINFOW
hStdOutput	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub hStdOutput: HANDLE,$/;"	m	struct:STARTUPINFOW
hThread	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub hThread: HANDLE,$/;"	m	struct:PROCESS_INFORMATION
haiku	$RUST/src/os/mod.rs	/^pub mod haiku;$/;"	n
handle	$RUST/src/os/windows/io/handle.rs	/^    handle: RawHandle,$/;"	m	struct:OwnedHandle
handle	$RUST/src/os/windows/io/mod.rs	/^mod handle;$/;"	n
handle	$RUST/src/process.rs	/^    pub(crate) handle: imp::Process,$/;"	m	struct:Child
handle	$RUST/src/sys/pal/unix/process/process_fuchsia.rs	/^    handle: Handle,$/;"	m	struct:Process
handle	$RUST/src/sys/pal/windows/fs.rs	/^    handle: Handle,$/;"	m	struct:File
handle	$RUST/src/sys/pal/windows/mod.rs	/^pub mod handle;$/;"	n
handle	$RUST/src/sys/pal/windows/pipe.rs	/^    pub fn handle(&self) -> &Handle {$/;"	P	implementation:AnonPipe	signature:(&self) -> &Handle
handle	$RUST/src/sys/pal/windows/process.rs	/^    pub fn handle(&self) -> &Handle {$/;"	P	implementation:Process	signature:(&self) -> &Handle
handle	$RUST/src/sys/pal/windows/thread.rs	/^    pub fn handle(&self) -> &Handle {$/;"	P	implementation:Thread	signature:(&self) -> &Handle
handle	$RUST/src/sys/pal/windows/time.rs	/^    handle: c::HANDLE,$/;"	m	struct:WaitableTimer
handle_count	$RUST/src/sys/pal/xous/net/tcplistener.rs	/^    handle_count: Arc<AtomicUsize>,$/;"	m	struct:TcpListener
handle_count	$RUST/src/sys/pal/xous/net/tcpstream.rs	/^    handle_count: Arc<AtomicUsize>,$/;"	m	struct:TcpStream
handle_count	$RUST/src/sys/pal/xous/net/udp.rs	/^    handle_count: Arc<AtomicUsize>,$/;"	m	struct:UdpSocket
handle_ebadf	$RUST/src/io/stdio.rs	/^fn handle_ebadf<T>(r: io::Result<T>, default: T) -> io::Result<T> {$/;"	f	signature:<T>(r: io::Result<T>, default: T) -> io::Result<T>
handle_is_console	$RUST/src/sys/pal/windows/io.rs	/^unsafe fn handle_is_console(handle: BorrowedHandle<'_>) -> bool {$/;"	f	signature:(handle: BorrowedHandle<'_>) -> bool
hard_link	$RUST/src/fs.rs	/^pub fn hard_link<P: AsRef<Path>, Q: AsRef<Path>>(original: P, link: Q) -> io::Result<()> {$/;"	f	signature:<P: AsRef<Path>, Q: AsRef<Path>>(original: P, link: Q) -> io::Result<()>
has_data_left	$RUST/src/io/mod.rs	/^    fn has_data_left(&mut self) -> Result<bool> {$/;"	P	interface:BufRead	signature:(&mut self) -> Result<bool>
has_implicit_root	$RUST/src/path.rs	/^    fn has_implicit_root(&self) -> bool {$/;"	P	implementation:Prefix	signature:(&self) -> bool
has_openat	$RUST/src/sys/pal/unix/fs.rs	/^        pub fn has_openat() -> bool {$/;"	f	module:remove_dir_impl::macos_weak	signature:() -> bool
has_physical_root	$RUST/src/path.rs	/^fn has_physical_root(s: &[u8], prefix: Option<Prefix<'_>>) -> bool {$/;"	f	signature:(s: &[u8], prefix: Option<Prefix<'_>>) -> bool
has_reached_max_readers	$RUST/src/sys/pal/unix/locks/futex_rwlock.rs	/^fn has_reached_max_readers(state: u32) -> bool {$/;"	f	signature:(state: u32) -> bool
has_readers_waiting	$RUST/src/sys/pal/unix/locks/futex_rwlock.rs	/^fn has_readers_waiting(state: u32) -> bool {$/;"	f	signature:(state: u32) -> bool
has_redox_scheme	$RUST/src/path.rs	/^fn has_redox_scheme(s: &[u8]) -> bool {$/;"	f	signature:(s: &[u8]) -> bool
has_root	$RUST/src/path.rs	/^    pub fn has_root(&self) -> bool {$/;"	P	implementation:Path	signature:(&self) -> bool
has_writers_waiting	$RUST/src/sys/pal/unix/locks/futex_rwlock.rs	/^fn has_writers_waiting(state: u32) -> bool {$/;"	f	signature:(state: u32) -> bool
hash	$RUST/benches/lib.rs	/^mod hash;$/;"	n
hash	$RUST/src/collections/hash/set/tests.rs	/^        fn hash<H: hash::Hasher>(&self, h: &mut H) {$/;"	P	implementation:test_replace::Foo	signature:<H: hash::Hasher>(&self, h: &mut H)
hash	$RUST/src/collections/mod.rs	/^mod hash;$/;"	n
hash	$RUST/src/ffi/os_str.rs	/^    fn hash<H: Hasher>(&self, state: &mut H) {$/;"	P	implementation:OsString	signature:<H: Hasher>(&self, state: &mut H)
hash	$RUST/src/lib.rs	/^pub mod hash;$/;"	n
hash	$RUST/src/path.rs	/^    fn hash<H: Hasher>(&self, h: &mut H) {$/;"	P	implementation:PrefixComponent	signature:<H: Hasher>(&self, h: &mut H)
hash	$RUST/src/sys/pal/hermit/fs.rs	/^    fn hash<H: Hasher>(&self, _h: &mut H) {$/;"	P	implementation:FileType	signature:<H: Hasher>(&self, _h: &mut H)
hash	$RUST/src/sys/pal/hermit/time.rs	/^    fn hash<H: Hasher>(&self, state: &mut H) {$/;"	P	implementation:Timespec	signature:<H: Hasher>(&self, state: &mut H)
hash	$RUST/src/sys/pal/unix/fs.rs	/^    fn hash<H: core::hash::Hasher>(&self, state: &mut H) {$/;"	P	implementation:FileType	signature:<H: core::hash::Hasher>(&self, state: &mut H)
hash	$RUST/src/sys/pal/unsupported/fs.rs	/^    fn hash<H: Hasher>(&self, _h: &mut H) {$/;"	P	implementation:FileType	signature:<H: Hasher>(&self, _h: &mut H)
hash	$RUST/src/sys/pal/windows/time.rs	/^    fn hash<H: Hasher>(&self, state: &mut H) {$/;"	P	implementation:SystemTime	signature:<H: Hasher>(&self, state: &mut H)
hash	$RUST/src/sys_common/wtf8.rs	/^    fn hash<H: Hasher>(&self, state: &mut H) {$/;"	P	implementation:Wtf8Buf	signature:<H: Hasher>(&self, state: &mut H)
hash_map	$RUST/src/collections/mod.rs	/^pub mod hash_map {$/;"	n
hash_set	$RUST/src/collections/mod.rs	/^pub mod hash_set {$/;"	n
hasher	$RUST/src/collections/hash/map.rs	/^    pub fn hasher(&self) -> &S {$/;"	P	implementation:HashMap	signature:(&self) -> &S
hasher	$RUST/src/collections/hash/set.rs	/^    pub fn hasher(&self) -> &S {$/;"	P	implementation:HashSet	signature:(&self) -> &S
hashmap	$RUST/src/thread/local/dynamic_tests.rs	/^fn hashmap() {$/;"	f	signature:()
hashmap_as_queue	$RUST/benches/hash/map.rs	/^fn hashmap_as_queue(b: &mut Bencher) {$/;"	f	signature:(b: &mut Bencher)
hashmap_random_keys	$RUST/src/sys/pal/hermit/mod.rs	/^pub fn hashmap_random_keys() -> (u64, u64) {$/;"	f	signature:() -> (u64, u64)
hashmap_random_keys	$RUST/src/sys/pal/sgx/mod.rs	/^pub fn hashmap_random_keys() -> (u64, u64) {$/;"	f	signature:() -> (u64, u64)
hashmap_random_keys	$RUST/src/sys/pal/solid/mod.rs	/^pub fn hashmap_random_keys() -> (u64, u64) {$/;"	f	signature:() -> (u64, u64)
hashmap_random_keys	$RUST/src/sys/pal/teeos/rand.rs	/^pub fn hashmap_random_keys() -> (u64, u64) {$/;"	f	signature:() -> (u64, u64)
hashmap_random_keys	$RUST/src/sys/pal/uefi/mod.rs	/^pub fn hashmap_random_keys() -> (u64, u64) {$/;"	f	signature:() -> (u64, u64)
hashmap_random_keys	$RUST/src/sys/pal/unix/rand.rs	/^pub fn hashmap_random_keys() -> (u64, u64) {$/;"	f	signature:() -> (u64, u64)
hashmap_random_keys	$RUST/src/sys/pal/unsupported/common.rs	/^pub fn hashmap_random_keys() -> (u64, u64) {$/;"	f	signature:() -> (u64, u64)
hashmap_random_keys	$RUST/src/sys/pal/wasi/mod.rs	/^pub fn hashmap_random_keys() -> (u64, u64) {$/;"	f	signature:() -> (u64, u64)
hashmap_random_keys	$RUST/src/sys/pal/windows/rand.rs	/^pub fn hashmap_random_keys() -> (u64, u64) {$/;"	f	signature:() -> (u64, u64)
hashmap_random_keys	$RUST/src/sys/pal/zkvm/mod.rs	/^pub fn hashmap_random_keys() -> (u64, u64) {$/;"	f	signature:() -> (u64, u64)
have_changed_path	$RUST/src/sys_common/process.rs	/^    pub fn have_changed_path(&self) -> bool {$/;"	P	implementation:CommandEnv	signature:(&self) -> bool
head	$RUST/src/sync/mpmc/array.rs	/^    head: CachePadded<AtomicUsize>,$/;"	m	struct:Channel
head	$RUST/src/sync/mpmc/list.rs	/^    head: CachePadded<Position<T>>,$/;"	m	struct:Channel
head	$RUST/src/sys/pal/itron/condvar.rs	/^        head: Option<ListHead>,$/;"	m	struct:waiter_queue::WaiterQueue
head_tail	$RUST/src/sys/pal/sgx/waitqueue/unsafe_list.rs	/^    head_tail: NonNull<UnsafeListEntry<T>>,$/;"	m	struct:UnsafeList
head_tail_entry	$RUST/src/sys/pal/sgx/waitqueue/unsafe_list.rs	/^    head_tail_entry: Option<UnsafeListEntry<T>>,$/;"	m	struct:UnsafeList
heap_allocation_fails	$RUST/src/sys/pal/common/tests.rs	/^fn heap_allocation_fails() {$/;"	f	signature:()
heap_allocation_works	$RUST/src/sys/pal/common/tests.rs	/^fn heap_allocation_works() {$/;"	f	signature:()
heap_base	$RUST/src/sys/pal/sgx/abi/mem.rs	/^pub(crate) fn heap_base() -> *const u8 {$/;"	f	signature:() -> *const u8
heap_size	$RUST/src/sys/pal/sgx/abi/mem.rs	/^pub(crate) fn heap_size() -> usize {$/;"	f	signature:() -> usize
helpers	$RUST/src/sys/pal/uefi/mod.rs	/^mod helpers;$/;"	n
hermit	$RUST/src/os/mod.rs	/^pub mod hermit;$/;"	n
hiberfil_sys	$RUST/src/fs/tests.rs	/^fn hiberfil_sys() {$/;"	f	signature:()
high_precision_sleep	$RUST/src/sys/pal/windows/thread.rs	/^        fn high_precision_sleep(dur: Duration) -> Result<(), ()> {$/;"	f	method:Thread::sleep	signature:(dur: Duration) -> Result<(), ()>
high_resolution	$RUST/src/sys/pal/windows/time.rs	/^    pub fn high_resolution() -> Result<Self, ()> {$/;"	P	implementation:WaitableTimer	signature:() -> Result<Self, ()>
home_dir	$RUST/src/env.rs	/^pub fn home_dir() -> Option<PathBuf> {$/;"	f	signature:() -> Option<PathBuf>
home_dir	$RUST/src/sys/pal/hermit/os.rs	/^pub fn home_dir() -> Option<PathBuf> {$/;"	f	signature:() -> Option<PathBuf>
home_dir	$RUST/src/sys/pal/sgx/os.rs	/^pub fn home_dir() -> Option<PathBuf> {$/;"	f	signature:() -> Option<PathBuf>
home_dir	$RUST/src/sys/pal/solid/os.rs	/^pub fn home_dir() -> Option<PathBuf> {$/;"	f	signature:() -> Option<PathBuf>
home_dir	$RUST/src/sys/pal/teeos/os.rs	/^pub fn home_dir() -> Option<PathBuf> {$/;"	f	signature:() -> Option<PathBuf>
home_dir	$RUST/src/sys/pal/uefi/os.rs	/^pub fn home_dir() -> Option<PathBuf> {$/;"	f	signature:() -> Option<PathBuf>
home_dir	$RUST/src/sys/pal/unix/os.rs	/^pub fn home_dir() -> Option<PathBuf> {$/;"	f	signature:() -> Option<PathBuf>
home_dir	$RUST/src/sys/pal/unsupported/os.rs	/^pub fn home_dir() -> Option<PathBuf> {$/;"	f	signature:() -> Option<PathBuf>
home_dir	$RUST/src/sys/pal/wasi/os.rs	/^pub fn home_dir() -> Option<PathBuf> {$/;"	f	signature:() -> Option<PathBuf>
home_dir	$RUST/src/sys/pal/windows/os.rs	/^pub fn home_dir() -> Option<PathBuf> {$/;"	f	signature:() -> Option<PathBuf>
home_dir	$RUST/src/sys/pal/xous/os.rs	/^pub fn home_dir() -> Option<PathBuf> {$/;"	f	signature:() -> Option<PathBuf>
home_dir	$RUST/src/sys/pal/zkvm/os.rs	/^pub fn home_dir() -> Option<PathBuf> {$/;"	f	signature:() -> Option<PathBuf>
home_dir_crt	$RUST/src/sys/pal/windows/os.rs	/^fn home_dir_crt() -> Option<PathBuf> {$/;"	f	signature:() -> Option<PathBuf>
hook	$RUST/src/sync/mpmc/select.rs	/^    pub fn hook<T>(r: &mut T) -> Operation {$/;"	P	implementation:Operation	signature:<T>(r: &mut T) -> Operation
horizon	$RUST/src/os/mod.rs	/^pub mod horizon;$/;"	n
host	$RUST/src/sys/pal/sgx/net.rs	/^    host: String,$/;"	m	struct:NonIpSockAddr
hurd	$RUST/src/os/mod.rs	/^pub mod hurd;$/;"	n
hypot	$RUST/src/f32.rs	/^    pub fn hypot(self, other: f32) -> f32 {$/;"	P	implementation:f32	signature:(self, other: f32) -> f32
hypot	$RUST/src/f64.rs	/^    pub fn hypot(self, other: f64) -> f64 {$/;"	P	implementation:f64	signature:(self, other: f64) -> f64
hypot	$RUST/src/sys/cmath/builtins.rs	/^    pub fn hypot(x: f64, y: f64) -> f64;$/;"	f	signature:(x: f64, y: f64) -> f64
hypot	$RUST/src/sys/cmath/windows.rs	/^    pub fn hypot(x: c_double, y: c_double) -> c_double;$/;"	f	signature:(x: c_double, y: c_double) -> c_double
hypotf	$RUST/src/sys/cmath/builtins.rs	/^    pub fn hypotf(x: f32, y: f32) -> f32;$/;"	f	signature:(x: f32, y: f32) -> f32
hypotf	$RUST/src/sys/cmath/windows.rs	/^    pub fn hypotf(x: c_float, y: c_float) -> c_float;$/;"	f	signature:(x: c_float, y: c_float) -> c_float
i32	$RUST/src/panic/tests.rs	/^    assert::<*const i32>();$/;"	C	function:panic_safety_traits
i32	$RUST/src/sys/pal/hermit/mod.rs	/^impl IsNegative for i32 {$/;"	c
i32	$RUST/src/sys/pal/unix/futex.rs	/^    unsafe { libc::umtx_wakeup(futex as *const AtomicU32 as *const i32, i32::MAX) };$/;"	C	function:futex_wake_all
i32	$RUST/src/thread/tests.rs	/^    let x_in_parent = (&*x) as *const i32 as usize;$/;"	C	function:avoid_copying_the_body
iAddressFamily	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub iAddressFamily: i32,$/;"	m	struct:WSAPROTOCOL_INFOW
iMaxSockAddr	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub iMaxSockAddr: i32,$/;"	m	struct:WSAPROTOCOL_INFOW
iMaxSockets	$RUST/src/sys/pal/windows/c.rs	/^    pub iMaxSockets: u16,$/;"	m	struct:WSADATA
iMaxSockets	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub iMaxSockets: u16,$/;"	m	struct:WSADATA
iMaxUdpDg	$RUST/src/sys/pal/windows/c.rs	/^    pub iMaxUdpDg: u16,$/;"	m	struct:WSADATA
iMaxUdpDg	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub iMaxUdpDg: u16,$/;"	m	struct:WSADATA
iMinSockAddr	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub iMinSockAddr: i32,$/;"	m	struct:WSAPROTOCOL_INFOW
iNetworkByteOrder	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub iNetworkByteOrder: i32,$/;"	m	struct:WSAPROTOCOL_INFOW
iProtocol	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub iProtocol: i32,$/;"	m	struct:WSAPROTOCOL_INFOW
iProtocolMaxOffset	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub iProtocolMaxOffset: i32,$/;"	m	struct:WSAPROTOCOL_INFOW
iSecurityScheme	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub iSecurityScheme: i32,$/;"	m	struct:WSAPROTOCOL_INFOW
iSocketType	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub iSocketType: i32,$/;"	m	struct:WSAPROTOCOL_INFOW
iVersion	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub iVersion: i32,$/;"	m	struct:WSAPROTOCOL_INFOW
i_back	$RUST/src/sys/pal/zkvm/args.rs	/^    i_back: usize,$/;"	m	struct:Args
i_forward	$RUST/src/sys/pal/zkvm/args.rs	/^    i_forward: usize,$/;"	m	struct:Args
if_keyword	$RUST/src/keyword_docs.rs	/^mod if_keyword {}$/;"	n
if_return	$RUST/src/sys/pal/windows/mod.rs	/^        macro_rules! if_return {$/;"	M	function:unrolled_find_u16s
iflgptn	$RUST/src/sys/pal/itron/abi.rs	/^    pub iflgptn: FLGPTN,$/;"	m	struct:T_CFLG
illumos	$RUST/src/os/mod.rs	/^pub mod illumos;$/;"	n
image_base	$RUST/src/sys/pal/sgx/abi/mem.rs	/^pub fn image_base() -> u64 {$/;"	f	signature:() -> u64
image_handle	$RUST/src/os/uefi/env.rs	/^pub fn image_handle() -> NonNull<c_void> {$/;"	f	signature:() -> NonNull<c_void>
image_handle_protocol	$RUST/src/sys/pal/uefi/helpers.rs	/^pub(crate) fn image_handle_protocol<T>(protocol_guid: Guid) -> Option<NonNull<T>> {$/;"	f	signature:<T>(protocol_guid: Guid) -> Option<NonNull<T>>
imp	$RUST/src/sys/pal/teeos/rand.rs	/^mod imp {$/;"	n
imp	$RUST/src/sys/pal/unix/args.rs	/^mod imp {$/;"	n
imp	$RUST/src/sys/pal/unix/rand.rs	/^mod imp {$/;"	n
imp	$RUST/src/sys/pal/unix/stack_overflow.rs	/^mod imp {$/;"	n
impl_as_raw_fd	$RUST/src/os/fd/net.rs	/^macro_rules! impl_as_raw_fd {$/;"	M
impl_as_raw_fd	$RUST/src/os/hermit/io/net.rs	/^macro_rules! impl_as_raw_fd {$/;"	M
impl_as_raw_fd	$RUST/src/os/solid/io.rs	/^macro_rules! impl_as_raw_fd {$/;"	M
impl_bsd	$RUST/src/os/unix/ucred.rs	/^pub mod impl_bsd {$/;"	n
impl_cmp	$RUST/src/ffi/os_str.rs	/^macro_rules! impl_cmp {$/;"	M
impl_cmp	$RUST/src/path.rs	/^macro_rules! impl_cmp {$/;"	M
impl_cmp_os_str	$RUST/src/path.rs	/^macro_rules! impl_cmp_os_str {$/;"	M
impl_from_raw_fd	$RUST/src/os/fd/net.rs	/^macro_rules! impl_from_raw_fd {$/;"	M
impl_from_raw_fd	$RUST/src/os/hermit/io/net.rs	/^macro_rules! impl_from_raw_fd {$/;"	M
impl_from_raw_fd	$RUST/src/os/solid/io.rs	/^macro_rules! impl_from_raw_fd {$/;"	M
impl_into_raw_fd	$RUST/src/os/fd/net.rs	/^macro_rules! impl_into_raw_fd {$/;"	M
impl_into_raw_fd	$RUST/src/os/hermit/io/net.rs	/^macro_rules! impl_into_raw_fd {$/;"	M
impl_into_raw_fd	$RUST/src/os/solid/io.rs	/^macro_rules! impl_into_raw_fd {$/;"	M
impl_is_minus_one	$RUST/src/sys/pal/solid/net.rs	/^macro_rules! impl_is_minus_one {$/;"	M
impl_is_minus_one	$RUST/src/sys/pal/teeos/mod.rs	/^macro_rules! impl_is_minus_one {$/;"	M
impl_is_minus_one	$RUST/src/sys/pal/unix/mod.rs	/^macro_rules! impl_is_minus_one {$/;"	M
impl_is_minus_one	$RUST/src/sys/pal/wasi/os.rs	/^macro_rules! impl_is_minus_one {$/;"	M
impl_is_minus_one	$RUST/src/sys/pal/windows/net.rs	/^macro_rules! impl_is_minus_one {$/;"	M
impl_is_negative	$RUST/src/sys/pal/hermit/mod.rs	/^macro_rules! impl_is_negative {$/;"	M
impl_is_terminal	$RUST/src/io/stdio.rs	/^macro_rules! impl_is_terminal {$/;"	M
impl_is_terminal	$RUST/src/os/fd/owned.rs	/^macro_rules! impl_is_terminal {$/;"	M
impl_is_terminal	$RUST/src/os/solid/io.rs	/^macro_rules! impl_is_terminal {$/;"	M
impl_is_terminal	$RUST/src/os/windows/io/handle.rs	/^macro_rules! impl_is_terminal {$/;"	M
impl_is_zero	$RUST/src/sys/pal/windows/mod.rs	/^macro_rules! impl_is_zero {$/;"	M
impl_keyword	$RUST/src/keyword_docs.rs	/^mod impl_keyword {}$/;"	n
impl_linux	$RUST/src/os/unix/ucred.rs	/^pub mod impl_linux {$/;"	n
impl_mac	$RUST/src/os/unix/ucred.rs	/^pub mod impl_mac {$/;"	n
impl_owned_fd_traits	$RUST/src/os/solid/io.rs	/^macro_rules! impl_owned_fd_traits {$/;"	M
impls	$RUST/src/io/mod.rs	/^mod impls;$/;"	n
imr_interface	$RUST/src/sys/pal/solid/abi/sockets.rs	/^    pub imr_interface: in_addr,$/;"	m	struct:ip_mreq
imr_interface	$RUST/src/sys/pal/windows/c.rs	/^    pub imr_interface: in_addr,$/;"	m	struct:ip_mreq
imr_interface	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub imr_interface: IN_ADDR,$/;"	m	struct:IP_MREQ
imr_multiaddr	$RUST/src/sys/pal/solid/abi/sockets.rs	/^    pub imr_multiaddr: in_addr,$/;"	m	struct:ip_mreq
imr_multiaddr	$RUST/src/sys/pal/windows/c.rs	/^    pub imr_multiaddr: in_addr,$/;"	m	struct:ip_mreq
imr_multiaddr	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub imr_multiaddr: IN_ADDR,$/;"	m	struct:IP_MREQ
in6_addr	$RUST/src/sys/pal/sgx/net.rs	/^    pub struct in6_addr {$/;"	s	module:netc
in6_addr	$RUST/src/sys/pal/solid/abi/sockets.rs	/^pub struct in6_addr {$/;"	s
in6_addr	$RUST/src/sys/pal/teeos/net.rs	/^    pub struct in6_addr {$/;"	s	module:netc
in6_addr	$RUST/src/sys/pal/unsupported/net.rs	/^    pub struct in6_addr {$/;"	s	module:netc
in6_addr	$RUST/src/sys/pal/wasi/net.rs	/^    pub struct in6_addr {$/;"	s	module:netc
in6_addr	$RUST/src/sys/pal/windows/c.rs	/^pub struct in6_addr {$/;"	s
in6_addr	$RUST/src/sys/pal/xous/net/mod.rs	/^    pub struct in6_addr {$/;"	s	module:netc
in_addr	$RUST/src/sys/pal/sgx/net.rs	/^    pub struct in_addr {$/;"	s	module:netc
in_addr	$RUST/src/sys/pal/solid/abi/sockets.rs	/^pub struct in_addr {$/;"	s
in_addr	$RUST/src/sys/pal/teeos/net.rs	/^    pub struct in_addr {$/;"	s	module:netc
in_addr	$RUST/src/sys/pal/unsupported/net.rs	/^    pub struct in_addr {$/;"	s	module:netc
in_addr	$RUST/src/sys/pal/wasi/net.rs	/^    pub struct in_addr {$/;"	s	module:netc
in_addr	$RUST/src/sys/pal/windows/c.rs	/^pub struct in_addr {$/;"	s
in_addr	$RUST/src/sys/pal/xous/net/mod.rs	/^    pub struct in_addr {$/;"	s	module:netc
in_addr_t	$RUST/src/sys/pal/solid/abi/sockets.rs	/^pub type in_addr_t = u32;$/;"	t
in_keyword	$RUST/src/keyword_docs.rs	/^mod in_keyword {}$/;"	n
in_port_t	$RUST/src/sys/pal/solid/abi/sockets.rs	/^pub type in_port_t = u16;$/;"	t
inc	$RUST/src/sync/mutex/tests.rs	/^    fn inc(m: &Mutex<u32>) {$/;"	f	function:lots_and_lots	signature:(m: &Mutex<u32>)
include_cur_dir	$RUST/src/path.rs	/^    fn include_cur_dir(&self) -> bool {$/;"	P	implementation:Components	signature:(&self) -> bool
incoming	$RUST/src/net/tcp.rs	/^    pub fn incoming(&self) -> Incoming<'_> {$/;"	P	implementation:TcpListener	signature:(&self) -> Incoming<'_>
incoming	$RUST/src/os/unix/net/listener.rs	/^    pub fn incoming(&self) -> Incoming<'_> {$/;"	P	implementation:UnixListener	signature:(&self) -> Incoming<'_>
incomplete_utf8	$RUST/src/sys/pal/windows/stdio.rs	/^    incomplete_utf8: IncompleteUtf8,$/;"	m	struct:Stdout
increase	$RUST/src/panicking.rs	/^    pub fn increase(run_panic_hook: bool) -> Option<MustAbort> {$/;"	f	module:panic_count	signature:(run_panic_hook: bool) -> Option<MustAbort>
increment_lock_count	$RUST/src/sync/remutex.rs	/^    unsafe fn increment_lock_count(&self) {$/;"	P	implementation:ReentrantMutex	signature:(&self)
increment_num_running_threads	$RUST/src/thread/scoped.rs	/^    pub(super) fn increment_num_running_threads(&self) {$/;"	P	implementation:ScopeData	signature:(&self)
index	$RUST/src/collections/hash/map.rs	/^    fn index(&self, key: &Q) -> &V {$/;"	f	signature:(&self, key: &Q) -> &V
index	$RUST/src/ffi/os_str.rs	/^    fn index(&self, _index: ops::RangeFull) -> &OsStr {$/;"	P	implementation:OsString	signature:(&self, _index: ops::RangeFull) -> &OsStr
index	$RUST/src/sync/mpmc/list.rs	/^    index: AtomicUsize,$/;"	m	struct:Position
index	$RUST/src/sys/pal/sgx/abi/usercalls/alloc.rs	/^    fn index(&self, index: I) -> &UserRef<I::Output> {$/;"	f	signature:(&self, index: I) -> &UserRef<I::Output>
index	$RUST/src/sys/pal/xous/locks/condvar.rs	/^    fn index(&self) -> usize {$/;"	P	implementation:Condvar	signature:(&self) -> usize
index	$RUST/src/sys/pal/xous/locks/mutex.rs	/^    fn index(&self) -> usize {$/;"	P	implementation:Mutex	signature:(&self) -> usize
index	$RUST/src/sys/pal/xous/thread_parking.rs	/^    fn index(&self) -> usize {$/;"	P	implementation:Parker	signature:(&self) -> usize
index	$RUST/src/sys_common/wtf8.rs	/^    fn index(&self, range: ops::RangeTo<usize>) -> &Wtf8 {$/;"	P	implementation:Wtf8	signature:(&self, range: ops::RangeTo<usize>) -> &Wtf8
index_mut	$RUST/src/ffi/os_str.rs	/^    fn index_mut(&mut self, _index: ops::RangeFull) -> &mut OsStr {$/;"	P	implementation:OsString	signature:(&mut self, _index: ops::RangeFull) -> &mut OsStr
index_mut	$RUST/src/sys/pal/sgx/abi/usercalls/alloc.rs	/^    fn index_mut(&mut self, index: I) -> &mut UserRef<I::Output> {$/;"	f	signature:(&mut self, index: I) -> &mut UserRef<I::Output>
info	$RUST/src/sys/pal/sgx/abi/reloc.rs	/^    info: T,$/;"	m	struct:Rela
inherit	$RUST/src/process.rs	/^    pub fn inherit() -> Stdio {$/;"	P	implementation:Stdio	signature:() -> Stdio
init	$RUST/src/rt.rs	/^unsafe fn init(argc: isize, argv: *const *const u8, sigpipe: u8) {$/;"	f	signature:(argc: isize, argv: *const *const u8, sigpipe: u8)
init	$RUST/src/sys/pal/hermit/args.rs	/^pub unsafe fn init(argc: isize, argv: *const *const u8) {$/;"	f	signature:(argc: isize, argv: *const *const u8)
init	$RUST/src/sys/pal/hermit/mod.rs	/^pub unsafe fn init(argc: isize, argv: *const *const u8, _sigpipe: u8) {$/;"	f	signature:(argc: isize, argv: *const *const u8, _sigpipe: u8)
init	$RUST/src/sys/pal/hermit/net.rs	/^pub fn init() {}$/;"	f	signature:()
init	$RUST/src/sys/pal/hermit/thread.rs	/^    pub unsafe fn init() -> Option<Guard> {$/;"	f	module:guard	signature:() -> Option<Guard>
init	$RUST/src/sys/pal/itron/thread.rs	/^    pub unsafe fn init() -> Option<Guard> {$/;"	f	module:guard	signature:() -> Option<Guard>
init	$RUST/src/sys/pal/sgx/abi/panic.rs	/^    fn init(&mut self) -> &mut &'static mut UserRef<[u8]> {$/;"	P	implementation:SgxPanicOutput	signature:(&mut self) -> &mut &'static mut UserRef<[u8]>
init	$RUST/src/sys/pal/sgx/args.rs	/^pub unsafe fn init(argc: isize, argv: *const *const u8) {$/;"	f	signature:(argc: isize, argv: *const *const u8)
init	$RUST/src/sys/pal/sgx/condvar.rs	/^    fn init() -> Box<Self> {$/;"	P	implementation:AllocatedCondvar	signature:() -> Box<Self>
init	$RUST/src/sys/pal/sgx/mod.rs	/^pub unsafe fn init(argc: isize, argv: *const *const u8, _sigpipe: u8) {$/;"	f	signature:(argc: isize, argv: *const *const u8, _sigpipe: u8)
init	$RUST/src/sys/pal/sgx/mutex.rs	/^    fn init() -> Box<Self> {$/;"	P	implementation:AllocatedMutex	signature:() -> Box<Self>
init	$RUST/src/sys/pal/sgx/rwlock.rs	/^    fn init() -> Box<Self> {$/;"	P	implementation:AllocatedRwLock	signature:() -> Box<Self>
init	$RUST/src/sys/pal/sgx/thread.rs	/^    pub unsafe fn init() -> Option<Guard> {$/;"	f	module:guard	signature:() -> Option<Guard>
init	$RUST/src/sys/pal/sgx/waitqueue/unsafe_list.rs	/^    unsafe fn init(&mut self) {$/;"	P	implementation:UnsafeList	signature:(&mut self)
init	$RUST/src/sys/pal/solid/mod.rs	/^pub unsafe fn init(_argc: isize, _argv: *const *const u8, _sigpipe: u8) {}$/;"	f	signature:(_argc: isize, _argv: *const *const u8, _sigpipe: u8)
init	$RUST/src/sys/pal/solid/net.rs	/^pub fn init() {}$/;"	f	signature:()
init	$RUST/src/sys/pal/teeos/locks/condvar.rs	/^    fn init() -> Box<Self> {$/;"	P	implementation:AllocatedCondvar	signature:() -> Box<Self>
init	$RUST/src/sys/pal/teeos/mod.rs	/^pub fn init(argc: isize, argv: *const *const u8, sigpipe: u8) {}$/;"	f	signature:(argc: isize, argv: *const *const u8, sigpipe: u8)
init	$RUST/src/sys/pal/teeos/thread.rs	/^    pub unsafe fn init() -> Option<Guard> {$/;"	f	module:guard	signature:() -> Option<Guard>
init	$RUST/src/sys/pal/uefi/mod.rs	/^pub(crate) unsafe fn init(argc: isize, argv: *const *const u8, _sigpipe: u8) {$/;"	f	signature:(argc: isize, argv: *const *const u8, _sigpipe: u8)
init	$RUST/src/sys/pal/unix/args.rs	/^pub unsafe fn init(argc: isize, argv: *const *const u8) {$/;"	f	signature:(argc: isize, argv: *const *const u8)
init	$RUST/src/sys/pal/unix/locks/pthread_condvar.rs	/^    fn init() -> Box<Self> {$/;"	P	implementation:AllocatedCondvar	signature:() -> Box<Self>
init	$RUST/src/sys/pal/unix/locks/pthread_mutex.rs	/^    fn init() -> Box<Self> {$/;"	P	implementation:AllocatedMutex	signature:() -> Box<Self>
init	$RUST/src/sys/pal/unix/locks/pthread_rwlock.rs	/^    fn init() -> Box<Self> {$/;"	P	implementation:AllocatedRwLock	signature:() -> Box<Self>
init	$RUST/src/sys/pal/unix/mod.rs	/^pub unsafe fn init(argc: isize, argv: *const *const u8, sigpipe: u8) {$/;"	f	signature:(argc: isize, argv: *const *const u8, sigpipe: u8)
init	$RUST/src/sys/pal/unix/net.rs	/^pub fn init() {}$/;"	f	signature:()
init	$RUST/src/sys/pal/unix/stack_overflow.rs	/^    pub unsafe fn init() {}$/;"	f	module:imp	signature:()
init	$RUST/src/sys/pal/unix/thread.rs	/^    pub unsafe fn init() -> Option<Guard> {$/;"	f	module:guard	signature:() -> Option<Guard>
init	$RUST/src/sys/pal/unsupported/common.rs	/^pub unsafe fn init(_argc: isize, _argv: *const *const u8, _sigpipe: u8) {}$/;"	f	signature:(_argc: isize, _argv: *const *const u8, _sigpipe: u8)
init	$RUST/src/sys/pal/unsupported/thread.rs	/^    pub unsafe fn init() -> Option<Guard> {$/;"	f	module:guard	signature:() -> Option<Guard>
init	$RUST/src/sys/pal/wasi/thread.rs	/^    pub unsafe fn init() -> Option<Guard> {$/;"	f	module:guard	signature:() -> Option<Guard>
init	$RUST/src/sys/pal/wasm/atomics/thread.rs	/^    pub unsafe fn init() -> Option<Guard> {$/;"	f	module:guard	signature:() -> Option<Guard>
init	$RUST/src/sys/pal/windows/compat.rs	/^unsafe extern "C" fn init() {$/;"	f	signature:()
init	$RUST/src/sys/pal/windows/mod.rs	/^pub unsafe fn init(_argc: isize, _argv: *const *const u8, _sigpipe: u8) {$/;"	f	signature:(_argc: isize, _argv: *const *const u8, _sigpipe: u8)
init	$RUST/src/sys/pal/windows/net.rs	/^pub fn init() {$/;"	f	signature:()
init	$RUST/src/sys/pal/windows/stack_overflow.rs	/^pub unsafe fn init() {$/;"	f	signature:()
init	$RUST/src/sys/pal/windows/stack_overflow_uwp.rs	/^pub unsafe fn init() {}$/;"	f	signature:()
init	$RUST/src/sys/pal/windows/thread.rs	/^    pub unsafe fn init() -> Option<Guard> {$/;"	f	module:guard	signature:() -> Option<Guard>
init	$RUST/src/sys/pal/windows/thread_local_key.rs	/^    unsafe fn init(&'static self) -> Key {$/;"	P	implementation:StaticKey	signature:(&'static self) -> Key
init	$RUST/src/sys/pal/xous/os.rs	/^        pub(crate) unsafe fn init(&mut self, eh_frame: usize) {$/;"	P	implementation:eh_unwinding::EhFrameFinder	signature:(&mut self, eh_frame: usize)
init	$RUST/src/sys/pal/xous/thread.rs	/^    pub unsafe fn init() -> Option<Guard> {$/;"	f	module:guard	signature:() -> Option<Guard>
init	$RUST/src/sys/pal/zkvm/mod.rs	/^pub unsafe fn init(_argc: isize, _argv: *const *const u8, _sigpipe: u8) {}$/;"	f	signature:(_argc: isize, _argv: *const *const u8, _sigpipe: u8)
init	$RUST/src/sys_common/lazy_box.rs	/^    fn init() -> Box<Self>;$/;"	P	interface:LazyInit	signature:() -> Box<Self>
init_empty	$RUST/src/sys/pal/sgx/waitqueue/unsafe_list/tests.rs	/^fn init_empty() {$/;"	f	signature:()
init_environment	$RUST/src/sys/pal/hermit/os.rs	/^pub fn init_environment(env: *const *const i8) {$/;"	f	signature:(env: *const *const i8)
init_globals	$RUST/src/os/uefi/env.rs	/^pub(crate) unsafe fn init_globals(handle: NonNull<c_void>, system_table: NonNull<c_void>) {$/;"	f	signature:(handle: NonNull<c_void>, system_table: NonNull<c_void>)
init_or_get_process_heap	$RUST/src/sys/pal/windows/alloc.rs	/^fn init_or_get_process_heap() -> c::HANDLE {$/;"	f	signature:() -> c::HANDLE
init_tid	$RUST/src/sys_common/thread_parking/id.rs	/^    unsafe fn init_tid(&self) {$/;"	P	implementation:Parker	signature:(&self)
init_wrapper	$RUST/src/sys/pal/unix/args.rs	/^        extern "C" fn init_wrapper($/;"	f	module:imp	signature:( argc: crate::os::raw::c_int, argv: *const *const u8, _envp: *const *const u8, )
initial_trail_surrogate	$RUST/src/sys_common/wtf8.rs	/^    fn initial_trail_surrogate(&self) -> Option<u16> {$/;"	P	implementation:Wtf8	signature:(&self) -> Option<u16>
initialize	$RUST/src/sync/once_lock.rs	/^    fn initialize<F, E>(&self, f: F) -> Result<(), E>$/;"	P	implementation:OnceLock	signature:<F, E>(&self, f: F) -> Result<(), E> where F: FnOnce() -> Result<T, E>,
initialize	$RUST/src/sys/pal/common/thread_local/mod.rs	/^        pub unsafe fn initialize<F: FnOnce() -> T>(&self, init: F) -> &'static T {$/;"	P	implementation:lazy::LazyKeyInner	signature:<F: FnOnce() -> T>(&self, init: F) -> &'static T
initialize	$RUST/src/sys/pal/itron/spin.rs	/^    fn initialize<F, E>(&self, f: F) -> Result<(), E>$/;"	P	implementation:SpinIdOnceCell	signature:<F, E>(&self, f: F) -> Result<(), E> where F: FnOnce() -> Result<(abi::ID, T), E>,
initialize	$RUST/src/sys/pal/unix/weak.rs	/^    unsafe fn initialize(&self) -> Option<F> {$/;"	P	implementation:DlsymWeak	signature:(&self) -> Option<F>
initialize	$RUST/src/sys_common/lazy_box.rs	/^    fn initialize(&self) -> *mut T {$/;"	P	implementation:LazyBox	signature:(&self) -> *mut T
initialize_with	$RUST/src/thread/local.rs	/^    fn initialize_with<F, R>(&'static self, init: T, f: F) -> R$/;"	P	implementation:LocalKey	signature:<F, R>(&'static self, init: T, f: F) -> R where F: FnOnce(Option<T>, &T) -> R,
initialized	$RUST/src/io/buffered/bufreader.rs	/^    pub fn initialized(&self) -> usize {$/;"	P	implementation:BufReader	signature:(&self) -> usize
initialized	$RUST/src/io/buffered/bufreader/buffer.rs	/^    pub fn initialized(&self) -> usize {$/;"	P	implementation:Buffer	signature:(&self) -> usize
inlined_slow_read_byte	$RUST/src/io/mod.rs	/^fn inlined_slow_read_byte<R: Read>(reader: &mut R) -> Option<Result<u8>> {$/;"	f	signature:<R: Read>(reader: &mut R) -> Option<Result<u8>>
inner	$RUST/src/backtrace.rs	/^    inner: Inner,$/;"	m	struct:Backtrace
inner	$RUST/src/collections/hash/map.rs	/^    inner: IterMut<'a, K, V>,$/;"	m	struct:ValuesMut
inner	$RUST/src/env.rs	/^    inner: sys::args::Args,$/;"	m	struct:ArgsOs
inner	$RUST/src/error.rs	/^    inner: &'a mut D,$/;"	m	struct:Indented
inner	$RUST/src/ffi/os_str.rs	/^    inner: Slice,$/;"	m	struct:OsStr
inner	$RUST/src/fs.rs	/^    inner: fs_imp::File,$/;"	m	struct:File
inner	$RUST/src/io/buffered/bufreader.rs	/^    inner: R,$/;"	m	struct:BufReader
inner	$RUST/src/io/buffered/bufwriter.rs	/^    inner: W,$/;"	m	struct:BufWriter
inner	$RUST/src/io/buffered/linewriter.rs	/^    inner: BufWriter<W>,$/;"	m	struct:LineWriter
inner	$RUST/src/io/buffered/linewritershim.rs	/^    fn inner(&self) -> &W {$/;"	P	implementation:LineWriterShim	signature:(&self) -> &W
inner	$RUST/src/io/cursor.rs	/^    inner: T,$/;"	m	struct:Cursor
inner	$RUST/src/io/mod.rs	/^    inner: T,$/;"	m	struct:Take
inner	$RUST/src/io/stdio.rs	/^    inner: ReentrantMutexGuard<'a, RefCell<StderrRaw>>,$/;"	m	struct:StderrLock
inner	$RUST/src/os/linux/process.rs	/^    inner: FileDesc,$/;"	m	struct:PidFd
inner	$RUST/src/panicking.rs	/^        inner: Option<A>,$/;"	m	struct:begin_panic::Payload
inner	$RUST/src/path.rs	/^    inner: OsString,$/;"	m	struct:PathBuf
inner	$RUST/src/process.rs	/^    inner: imp::CommandArgs<'a>,$/;"	m	struct:CommandArgs
inner	$RUST/src/sync/condvar.rs	/^    inner: sys::Condvar,$/;"	m	struct:Condvar
inner	$RUST/src/sync/mpmc/context.rs	/^    inner: Arc<Inner>,$/;"	m	struct:Context
inner	$RUST/src/sync/mpmc/waker.rs	/^    inner: Mutex<Waker>,$/;"	m	struct:SyncWaker
inner	$RUST/src/sync/mpmc/zero.rs	/^    inner: Mutex<Inner>,$/;"	m	struct:Channel
inner	$RUST/src/sync/mpsc/mod.rs	/^    inner: mpmc::Sender<T>,$/;"	m	struct:SyncSender
inner	$RUST/src/sync/mutex.rs	/^    inner: sys::Mutex,$/;"	m	struct:Mutex
inner	$RUST/src/sync/once.rs	/^    pub(crate) inner: sys::OnceState,$/;"	m	struct:OnceState
inner	$RUST/src/sync/rwlock.rs	/^    inner: sys::RwLock,$/;"	m	struct:RwLock
inner	$RUST/src/sys/os_str/bytes.rs	/^    pub inner: [u8],$/;"	m	struct:Slice
inner	$RUST/src/sys/os_str/wtf8.rs	/^    pub inner: Wtf8Buf,$/;"	m	struct:Buf
inner	$RUST/src/sys/pal/common/thread_local/fast_local.rs	/^    inner: LazyKeyInner<T>,$/;"	m	struct:Key
inner	$RUST/src/sys/pal/common/thread_local/mod.rs	/^        inner: UnsafeCell<Option<T>>,$/;"	m	struct:lazy::LazyKeyInner
inner	$RUST/src/sys/pal/common/thread_local/os_local.rs	/^    inner: LazyKeyInner<T>,$/;"	m	struct:Value
inner	$RUST/src/sys/pal/common/thread_local/static_local.rs	/^    inner: LazyKeyInner<T>,$/;"	m	struct:Key
inner	$RUST/src/sys/pal/sgx/condvar.rs	/^    inner: LazyBox<AllocatedCondvar>,$/;"	m	struct:Condvar
inner	$RUST/src/sys/pal/sgx/mutex.rs	/^    inner: LazyBox<AllocatedMutex>,$/;"	m	struct:Mutex
inner	$RUST/src/sys/pal/sgx/net.rs	/^    inner: Socket,$/;"	m	struct:TcpStream
inner	$RUST/src/sys/pal/sgx/rwlock.rs	/^    inner: LazyBox<AllocatedRwLock>,$/;"	m	struct:RwLock
inner	$RUST/src/sys/pal/sgx/waitqueue/mod.rs	/^    inner: UnsafeList<SpinMutex<WaitEntry>>,$/;"	m	struct:WaitQueue
inner	$RUST/src/sys/pal/solid/fs.rs	/^    inner: Arc<InnerReadDir>,$/;"	m	struct:ReadDir
inner	$RUST/src/sys/pal/teeos/locks/condvar.rs	/^    inner: LazyBox<AllocatedCondvar>,$/;"	m	struct:Condvar
inner	$RUST/src/sys/pal/teeos/locks/rwlock.rs	/^    inner: Mutex,$/;"	m	struct:RwLock
inner	$RUST/src/sys/pal/uefi/helpers.rs	/^    fn inner($/;"	f	function:locate_handles	signature:( guid: &mut Guid, boot_services: NonNull<r_efi::efi::BootServices>, buf_size: &mut usize, buf: *mut r_efi::efi::Handle, ) -> io::Result<()>
inner	$RUST/src/sys/pal/unix/fs.rs	/^    inner: Arc<InnerReadDir>,$/;"	m	struct:ReadDir
inner	$RUST/src/sys/pal/unix/l4re.rs	/^        inner: Socket,$/;"	m	struct:net::UdpSocket
inner	$RUST/src/sys/pal/unix/locks/pthread_condvar.rs	/^    inner: LazyBox<AllocatedCondvar>,$/;"	m	struct:Condvar
inner	$RUST/src/sys/pal/unix/locks/pthread_mutex.rs	/^    inner: LazyBox<AllocatedMutex>,$/;"	m	struct:Mutex
inner	$RUST/src/sys/pal/unix/locks/pthread_rwlock.rs	/^    inner: UnsafeCell<libc::pthread_rwlock_t>,$/;"	m	struct:AllocatedRwLock
inner	$RUST/src/sys/pal/wasi/fs.rs	/^    inner: Arc<ReadDirInner>,$/;"	m	struct:ReadDir
inner	$RUST/src/sys/pal/wasi/net.rs	/^    inner: Socket,$/;"	m	struct:UdpSocket
inner	$RUST/src/sys/pal/windows/locks/condvar.rs	/^    inner: UnsafeCell<c::CONDITION_VARIABLE>,$/;"	m	struct:Condvar
inner	$RUST/src/sys/pal/windows/locks/rwlock.rs	/^    inner: UnsafeCell<c::SRWLOCK>,$/;"	m	struct:RwLock
inner	$RUST/src/sys/pal/windows/mod.rs	/^    fn inner(s: &OsStr) -> crate::io::Result<Vec<u16>> {$/;"	f	function:to_u16s	signature:(s: &OsStr) -> crate::io::Result<Vec<u16>>
inner	$RUST/src/sys/pal/windows/pipe.rs	/^    inner: Handle,$/;"	m	struct:AnonPipe
inner	$RUST/src/sys_common/net.rs	/^    inner: Socket,$/;"	m	struct:UdpSocket
inner	$RUST/src/thread/local.rs	/^    inner: unsafe fn(Option<&mut Option<T>>) -> Option<&'static T>,$/;"	m	struct:LocalKey
inner	$RUST/src/thread/mod.rs	/^    inner: Pin<Arc<Inner>>,$/;"	m	struct:Thread
inner_lock	$RUST/src/sync/rwlock.rs	/^    inner_lock: &'a sys::RwLock,$/;"	m	struct:RwLockReadGuard
inner_mut	$RUST/src/io/buffered/linewritershim.rs	/^    fn inner_mut(&mut self) -> &mut W {$/;"	P	implementation:LineWriterShim	signature:(&mut self) -> &mut W
ino	$RUST/src/os/unix/fs.rs	/^    fn ino(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
ino	$RUST/src/os/wasi/fs.rs	/^    fn ino(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
ino	$RUST/src/sys/pal/unix/fs.rs	/^    pub fn ino(&self) -> u64 {$/;"	P	implementation:DirEntry	signature:(&self) -> u64
ino	$RUST/src/sys/pal/wasi/fs.rs	/^    pub fn ino(&self) -> wasi::Inode {$/;"	P	implementation:DirEntry	signature:(&self) -> wasi::Inode
ino_t	$RUST/src/os/android/raw.rs	/^    pub type ino_t = c_ulong;$/;"	t	module:arch
ino_t	$RUST/src/os/dragonfly/raw.rs	/^pub type ino_t = u64;$/;"	t
ino_t	$RUST/src/os/emscripten/raw.rs	/^pub type ino_t = u64;$/;"	t
ino_t	$RUST/src/os/espidf/raw.rs	/^pub type ino_t = libc::ino_t;$/;"	t
ino_t	$RUST/src/os/freebsd/raw.rs	/^pub type ino_t = u64;$/;"	t
ino_t	$RUST/src/os/fuchsia/raw.rs	/^    pub type ino_t = u64;$/;"	t	module:arch
ino_t	$RUST/src/os/haiku/raw.rs	/^pub type ino_t = i64;$/;"	t
ino_t	$RUST/src/os/horizon/raw.rs	/^pub type ino_t = libc::ino_t;$/;"	t
ino_t	$RUST/src/os/hurd/raw.rs	/^pub type ino_t = u64;$/;"	t
ino_t	$RUST/src/os/illumos/raw.rs	/^pub type ino_t = u64;$/;"	t
ino_t	$RUST/src/os/ios/raw.rs	/^pub type ino_t = u64;$/;"	t
ino_t	$RUST/src/os/l4re/raw.rs	/^    pub type ino_t = u64;$/;"	t	module:arch
ino_t	$RUST/src/os/linux/raw.rs	/^    pub type ino_t = u64;$/;"	t	module:arch
ino_t	$RUST/src/os/macos/raw.rs	/^pub type ino_t = u64;$/;"	t
ino_t	$RUST/src/os/netbsd/raw.rs	/^pub type ino_t = u64;$/;"	t
ino_t	$RUST/src/os/nto/raw.rs	/^    pub type ino_t = u64;$/;"	t	module:arch
ino_t	$RUST/src/os/openbsd/raw.rs	/^pub type ino_t = u64;$/;"	t
ino_t	$RUST/src/os/redox/raw.rs	/^pub type ino_t = c_ulong;$/;"	t
ino_t	$RUST/src/os/solaris/raw.rs	/^pub type ino_t = u64;$/;"	t
ino_t	$RUST/src/os/vita/raw.rs	/^pub type ino_t = libc::ino_t;$/;"	t
ino_t	$RUST/src/os/watchos/raw.rs	/^pub type ino_t = u64;$/;"	t
insecure_time	$RUST/src/sys/pal/sgx/abi/usercalls/mod.rs	/^pub fn insecure_time() -> Duration {$/;"	f	signature:() -> Duration
insert	$RUST/src/collections/hash/map.rs	/^    pub fn insert(self, value: V) -> &'a mut V {$/;"	P	implementation:VacantEntry	signature:(self, value: V) -> &'a mut V
insert	$RUST/src/collections/hash/set.rs	/^    pub fn insert(&mut self, value: T) -> bool {$/;"	f	signature:(&mut self, value: T) -> bool
insert	$RUST/src/sys/pal/itron/condvar.rs	/^        pub unsafe fn insert(&mut self, mut waiter_ptr: NonNull<Waiter>) {$/;"	P	implementation:waiter_queue::WaiterQueue	signature:(&mut self, mut waiter_ptr: NonNull<Waiter>)
insert_entry	$RUST/src/collections/hash/map.rs	/^    pub fn insert_entry(self, value: V) -> OccupiedEntry<'a, K, V> {$/;"	P	implementation:VacantEntry	signature:(self, value: V) -> OccupiedEntry<'a, K, V>
insert_hashed_nocheck	$RUST/src/collections/hash/map.rs	/^    pub fn insert_hashed_nocheck(self, hash: u64, key: K, value: V) -> (&'a mut K, &'a mut V)$/;"	P	implementation:RawVacantEntryMut	signature:(self, hash: u64, key: K, value: V) -> (&'a mut K, &'a mut V) where K: Hash, S: BuildHasher,
insert_key	$RUST/src/collections/hash/map.rs	/^    pub fn insert_key(&mut self, key: K) -> K {$/;"	P	implementation:RawOccupiedEntryMut	signature:(&mut self, key: K) -> K
instant_checked_duration_since_nopanic	$RUST/src/time/tests.rs	/^fn instant_checked_duration_since_nopanic() {$/;"	f	signature:()
instant_duration_since_saturates	$RUST/src/time/tests.rs	/^fn instant_duration_since_saturates() {$/;"	f	signature:()
instant_elapsed	$RUST/src/time/tests.rs	/^fn instant_elapsed() {$/;"	f	signature:()
instant_math	$RUST/src/time/tests.rs	/^fn instant_math() {$/;"	f	signature:()
instant_math_is_associative	$RUST/src/time/tests.rs	/^fn instant_math_is_associative() {$/;"	f	signature:()
instant_monotonic	$RUST/src/time/tests.rs	/^fn instant_monotonic() {$/;"	f	signature:()
instant_monotonic_concurrent	$RUST/src/time/tests.rs	/^fn instant_monotonic_concurrent() -> crate::thread::Result<()> {$/;"	f	signature:() -> crate::thread::Result<()>
instant_saturating_duration_since_nopanic	$RUST/src/time/tests.rs	/^fn instant_saturating_duration_since_nopanic() {$/;"	f	signature:()
int_t	$RUST/src/sys/pal/itron/abi.rs	/^pub type int_t = crate::os::raw::c_int;$/;"	t
interpret_cs_action	$RUST/src/sys/personality/dwarf/eh.rs	/^unsafe fn interpret_cs_action($/;"	f	signature:( action_table: *const u8, cs_action_entry: u64, lpad: LPad, ) -> EHAction
intersection	$RUST/src/collections/hash/set.rs	/^    pub fn intersection<'a>(&'a self, other: &'a HashSet<T, S>) -> Intersection<'a, T, S> {$/;"	f	signature:<'a>(&'a self, other: &'a HashSet<T, S>) -> Intersection<'a, T, S>
intervals	$RUST/src/sys/pal/windows/time.rs	/^    fn intervals(&self) -> i64 {$/;"	P	implementation:SystemTime	signature:(&self) -> i64
intervals2dur	$RUST/src/sys/pal/windows/time.rs	/^fn intervals2dur(intervals: u64) -> Duration {$/;"	f	signature:(intervals: u64) -> Duration
into	$RUST/src/os/xous/ffi/definitions.rs	/^    fn into(self) -> usize {$/;"	P	implementation:ThreadId	signature:(self) -> usize
into	$RUST/src/os/xous/services/dns.rs	/^    fn into(self) -> usize {$/;"	P	implementation:DnsLendMut	signature:(self) -> usize
into	$RUST/src/os/xous/services/log.rs	/^    fn into(self) -> usize {$/;"	P	implementation:LogLend	signature:(self) -> usize
into	$RUST/src/os/xous/services/net.rs	/^    fn into(self) -> usize {$/;"	P	implementation:NetLendMut	signature:(self) -> usize
into	$RUST/src/os/xous/services/systime.rs	/^    fn into(self) -> [usize; 5] {$/;"	P	implementation:SystimeScalar	signature:(self) -> [usize; 5]
into	$RUST/src/os/xous/services/ticktimer.rs	/^    fn into(self) -> [usize; 5] {$/;"	P	implementation:TicktimerScalar	signature:(self) -> [usize; 5]
into	$RUST/src/path/tests.rs	/^fn into() {$/;"	f	signature:()
into	$RUST/src/sync/mpmc/select.rs	/^    fn into(self) -> usize {$/;"	P	implementation:Selected	signature:(self) -> usize
into	$RUST/src/sys/pal/unix/process/process_fuchsia.rs	/^    fn into(self) -> ExitStatus {$/;"	P	implementation:ExitStatusError	signature:(self) -> ExitStatus
into	$RUST/src/sys/pal/unix/process/process_unix.rs	/^    fn into(self) -> ExitStatus {$/;"	P	implementation:ExitStatusError	signature:(self) -> ExitStatus
into	$RUST/src/sys/pal/unix/process/process_unsupported.rs	/^    fn into(self) -> ExitStatus {$/;"	P	implementation:ExitStatusError	signature:(self) -> ExitStatus
into	$RUST/src/sys/pal/unix/process/process_vxworks.rs	/^    fn into(self) -> ExitStatus {$/;"	P	implementation:ExitStatusError	signature:(self) -> ExitStatus
into	$RUST/src/sys/pal/unsupported/process.rs	/^    fn into(self) -> ExitStatus {$/;"	P	implementation:ExitStatusError	signature:(self) -> ExitStatus
into	$RUST/src/sys/pal/windows/process.rs	/^    fn into(self) -> ExitStatus {$/;"	P	implementation:ExitStatusError	signature:(self) -> ExitStatus
into_arc	$RUST/src/sys/os_str/bytes.rs	/^    pub fn into_arc(&self) -> Arc<Slice> {$/;"	P	implementation:Slice	signature:(&self) -> Arc<Slice>
into_arc	$RUST/src/sys/os_str/wtf8.rs	/^    pub fn into_arc(&self) -> Arc<Slice> {$/;"	P	implementation:Slice	signature:(&self) -> Arc<Slice>
into_arc	$RUST/src/sys_common/wtf8.rs	/^    pub fn into_arc(&self) -> Arc<Wtf8> {$/;"	P	implementation:Wtf8	signature:(&self) -> Arc<Wtf8>
into_box	$RUST/src/panicking.rs	/^    fn into_box(self) -> Box<dyn Fn(&PanicInfo<'_>) + 'static + Sync + Send> {$/;"	P	implementation:Hook	signature:(self) -> Box<dyn Fn(&PanicInfo<'_>) + 'static + Sync + Send>
into_box	$RUST/src/sys/os_str/bytes.rs	/^    pub fn into_box(self) -> Box<Slice> {$/;"	P	implementation:Buf	signature:(self) -> Box<Slice>
into_box	$RUST/src/sys/os_str/wtf8.rs	/^    pub fn into_box(self) -> Box<Slice> {$/;"	P	implementation:Buf	signature:(self) -> Box<Slice>
into_box	$RUST/src/sys_common/wtf8.rs	/^    pub fn into_box(self) -> Box<Wtf8> {$/;"	P	implementation:Wtf8Buf	signature:(self) -> Box<Wtf8>
into_boxed	$RUST/src/ffi/os_str/tests.rs	/^fn into_boxed() {$/;"	f	signature:()
into_boxed_os_str	$RUST/src/ffi/os_str.rs	/^    pub fn into_boxed_os_str(self) -> Box<OsStr> {$/;"	P	implementation:OsString	signature:(self) -> Box<OsStr>
into_boxed_path	$RUST/src/path.rs	/^    pub fn into_boxed_path(self) -> Box<Path> {$/;"	P	implementation:PathBuf	signature:(self) -> Box<Path>
into_bytes	$RUST/src/sys_common/wtf8.rs	/^    pub fn into_bytes(self) -> Vec<u8> {$/;"	P	implementation:Wtf8Buf	signature:(self) -> Vec<u8>
into_data	$RUST/src/io/error/repr_bitpacked.rs	/^    pub(super) fn into_data(self) -> ErrorData<Box<Custom>> {$/;"	P	implementation:Repr	signature:(self) -> ErrorData<Box<Custom>>
into_data	$RUST/src/io/error/repr_unpacked.rs	/^    pub(super) fn into_data(self) -> ErrorData<Box<Custom>> {$/;"	P	implementation:Repr	signature:(self) -> ErrorData<Box<Custom>>
into_encoded_bytes	$RUST/src/ffi/os_str.rs	/^    pub fn into_encoded_bytes(self) -> Vec<u8> {$/;"	P	implementation:OsString	signature:(self) -> Vec<u8>
into_encoded_bytes	$RUST/src/sys/os_str/bytes.rs	/^    pub fn into_encoded_bytes(self) -> Vec<u8> {$/;"	P	implementation:Buf	signature:(self) -> Vec<u8>
into_encoded_bytes	$RUST/src/sys/os_str/wtf8.rs	/^    pub fn into_encoded_bytes(self) -> Vec<u8> {$/;"	P	implementation:Buf	signature:(self) -> Vec<u8>
into_error	$RUST/src/io/buffered/mod.rs	/^    pub fn into_error(self) -> Error {$/;"	P	implementation:IntoInnerError	signature:(self) -> Error
into_handle	$RUST/src/sys/pal/windows/pipe.rs	/^    pub fn into_handle(self) -> Handle {$/;"	P	implementation:AnonPipe	signature:(self) -> Handle
into_handle	$RUST/src/sys/pal/windows/process.rs	/^    pub fn into_handle(self) -> Handle {$/;"	P	implementation:Process	signature:(self) -> Handle
into_handle	$RUST/src/sys/pal/windows/thread.rs	/^    pub fn into_handle(self) -> Handle {$/;"	P	implementation:Thread	signature:(self) -> Handle
into_id	$RUST/src/sys/pal/hermit/thread.rs	/^    pub fn into_id(self) -> Tid {$/;"	P	implementation:Thread	signature:(self) -> Tid
into_id	$RUST/src/sys/pal/teeos/thread.rs	/^    pub fn into_id(self) -> libc::pthread_t {$/;"	P	implementation:Thread	signature:(self) -> libc::pthread_t
into_id	$RUST/src/sys/pal/unix/thread.rs	/^    pub fn into_id(self) -> libc::pthread_t {$/;"	P	implementation:Thread	signature:(self) -> libc::pthread_t
into_incoming	$RUST/src/net/tcp.rs	/^    pub fn into_incoming(self) -> IntoIncoming {$/;"	P	implementation:TcpListener	signature:(self) -> IntoIncoming
into_inner	$RUST/src/ffi/os_str.rs	/^    fn into_inner(self) -> Buf {$/;"	P	implementation:OsString	signature:(self) -> Buf
into_inner	$RUST/src/fs.rs	/^    fn into_inner(self) -> fs_imp::File {$/;"	P	implementation:File	signature:(self) -> fs_imp::File
into_inner	$RUST/src/io/buffered/bufreader.rs	/^    pub fn into_inner(self) -> R$/;"	P	implementation:BufReader	signature:(self) -> R where R: Sized,
into_inner	$RUST/src/io/buffered/bufwriter.rs	/^    pub fn into_inner(self) -> Vec<u8> {$/;"	P	implementation:WriterPanicked	signature:(self) -> Vec<u8>
into_inner	$RUST/src/io/buffered/linewriter.rs	/^    pub fn into_inner(self) -> Result<W, IntoInnerError<LineWriter<W>>> {$/;"	P	implementation:LineWriter	signature:(self) -> Result<W, IntoInnerError<LineWriter<W>>>
into_inner	$RUST/src/io/buffered/mod.rs	/^    pub fn into_inner(self) -> W {$/;"	P	implementation:IntoInnerError	signature:(self) -> W
into_inner	$RUST/src/io/cursor.rs	/^    pub fn into_inner(self) -> T {$/;"	P	implementation:Cursor	signature:(self) -> T
into_inner	$RUST/src/io/error.rs	/^    pub fn into_inner(self) -> Option<Box<dyn error::Error + Send + Sync>> {$/;"	P	implementation:Error	signature:(self) -> Option<Box<dyn error::Error + Send + Sync>>
into_inner	$RUST/src/io/mod.rs	/^    pub fn into_inner(self) -> T {$/;"	P	implementation:Take	signature:(self) -> T
into_inner	$RUST/src/net/ip_addr.rs	/^    fn into_inner(self) -> c::in_addr {$/;"	P	implementation:Ipv4Addr	signature:(self) -> c::in_addr
into_inner	$RUST/src/net/socket_addr.rs	/^    fn into_inner(self) -> c::sockaddr_in6 {$/;"	P	implementation:SocketAddrV6	signature:(self) -> c::sockaddr_in6
into_inner	$RUST/src/net/tcp.rs	/^    fn into_inner(self) -> net_imp::TcpStream {$/;"	P	implementation:TcpStream	signature:(self) -> net_imp::TcpStream
into_inner	$RUST/src/net/udp.rs	/^    fn into_inner(self) -> net_imp::UdpSocket {$/;"	P	implementation:UdpSocket	signature:(self) -> net_imp::UdpSocket
into_inner	$RUST/src/os/linux/process.rs	/^    fn into_inner(self) -> FileDesc {$/;"	P	implementation:PidFd	signature:(self) -> FileDesc
into_inner	$RUST/src/process.rs	/^    fn into_inner(self) -> imp::Process {$/;"	P	implementation:Child	signature:(self) -> imp::Process
into_inner	$RUST/src/sync/lazy_lock.rs	/^    pub fn into_inner(mut this: Self) -> Result<T, F> {$/;"	P	implementation:LazyLock	signature:(mut this: Self) -> Result<T, F>
into_inner	$RUST/src/sync/mutex.rs	/^    pub fn into_inner(self) -> LockResult<T>$/;"	P	implementation:Mutex	signature:(self) -> LockResult<T> where T: Sized,
into_inner	$RUST/src/sync/once_lock.rs	/^    pub fn into_inner(mut self) -> Option<T> {$/;"	P	implementation:OnceLock	signature:(mut self) -> Option<T>
into_inner	$RUST/src/sync/once_lock/tests.rs	/^fn into_inner() {$/;"	f	signature:()
into_inner	$RUST/src/sync/poison.rs	/^    pub fn into_inner(self) -> T {$/;"	P	implementation:PoisonError	signature:(self) -> T
into_inner	$RUST/src/sync/rwlock.rs	/^    pub fn into_inner(self) -> LockResult<T>$/;"	P	implementation:RwLock	signature:(self) -> LockResult<T> where T: Sized,
into_inner	$RUST/src/sys/os_str/bytes.rs	/^    fn into_inner(self) -> Vec<u8> {$/;"	P	implementation:Buf	signature:(self) -> Vec<u8>
into_inner	$RUST/src/sys/os_str/wtf8.rs	/^    fn into_inner(self) -> Wtf8Buf {$/;"	P	implementation:Buf	signature:(self) -> Wtf8Buf
into_inner	$RUST/src/sys/pal/hermit/fd.rs	/^    fn into_inner(self) -> OwnedFd {$/;"	P	implementation:FileDesc	signature:(self) -> OwnedFd
into_inner	$RUST/src/sys/pal/hermit/fs.rs	/^    fn into_inner(self) -> FileDesc {$/;"	P	implementation:File	signature:(self) -> FileDesc
into_inner	$RUST/src/sys/pal/hermit/net.rs	/^    fn into_inner(self) -> FileDesc {$/;"	P	implementation:Socket	signature:(self) -> FileDesc
into_inner	$RUST/src/sys/pal/sgx/fd.rs	/^    fn into_inner(self) -> Fd {$/;"	P	implementation:FileDesc	signature:(self) -> Fd
into_inner	$RUST/src/sys/pal/sgx/net.rs	/^    fn into_inner(self) -> Socket {$/;"	P	implementation:TcpListener	signature:(self) -> Socket
into_inner	$RUST/src/sys/pal/solid/net.rs	/^    fn into_inner(self) -> OwnedFd {$/;"	P	implementation:Socket	signature:(self) -> OwnedFd
into_inner	$RUST/src/sys/pal/unix/fd.rs	/^    fn into_inner(self) -> OwnedFd {$/;"	P	implementation:FileDesc	signature:(self) -> OwnedFd
into_inner	$RUST/src/sys/pal/unix/fs.rs	/^    fn into_inner(self) -> FileDesc {$/;"	P	implementation:File	signature:(self) -> FileDesc
into_inner	$RUST/src/sys/pal/unix/l4re.rs	/^        fn into_inner(self) -> FileDesc {$/;"	P	implementation:net::Socket	signature:(self) -> FileDesc
into_inner	$RUST/src/sys/pal/unix/net.rs	/^    fn into_inner(self) -> FileDesc {$/;"	P	implementation:Socket	signature:(self) -> FileDesc
into_inner	$RUST/src/sys/pal/unix/pipe.rs	/^    fn into_inner(self) -> FileDesc {$/;"	P	implementation:AnonPipe	signature:(self) -> FileDesc
into_inner	$RUST/src/sys/pal/wasi/fd.rs	/^    fn into_inner(self) -> OwnedFd {$/;"	P	implementation:WasiFd	signature:(self) -> OwnedFd
into_inner	$RUST/src/sys/pal/wasi/fs.rs	/^    fn into_inner(self) -> WasiFd {$/;"	P	implementation:File	signature:(self) -> WasiFd
into_inner	$RUST/src/sys/pal/wasi/net.rs	/^    fn into_inner(self) -> WasiFd {$/;"	P	implementation:Socket	signature:(self) -> WasiFd
into_inner	$RUST/src/sys/pal/windows/fs.rs	/^    fn into_inner(self) -> Handle {$/;"	P	implementation:File	signature:(self) -> Handle
into_inner	$RUST/src/sys/pal/windows/handle.rs	/^    fn into_inner(self) -> OwnedHandle {$/;"	P	implementation:Handle	signature:(self) -> OwnedHandle
into_inner	$RUST/src/sys/pal/windows/net.rs	/^    fn into_inner(self) -> OwnedSocket {$/;"	P	implementation:Socket	signature:(self) -> OwnedSocket
into_inner	$RUST/src/sys/pal/windows/pipe.rs	/^    fn into_inner(self) -> Handle {$/;"	P	implementation:AnonPipe	signature:(self) -> Handle
into_inner	$RUST/src/sys/pal/windows/time.rs	/^    fn into_inner(self) -> c::FILETIME {$/;"	P	implementation:SystemTime	signature:(self) -> c::FILETIME
into_inner	$RUST/src/sys_common/mod.rs	/^    fn into_inner(self) -> Inner;$/;"	P	interface:IntoInner	signature:(self) -> Inner
into_inner	$RUST/src/sys_common/net.rs	/^    fn into_inner(self) -> (SocketAddrCRepr, c::socklen_t) {$/;"	P	implementation:SocketAddr	signature:(self) -> (SocketAddrCRepr, c::socklen_t)
into_inner	$RUST/src/thread/mod.rs	/^    fn into_inner(self) -> imp::Thread {$/;"	P	implementation:JoinHandle	signature:(self) -> imp::Thread
into_inner	$RUST/src/time.rs	/^    fn into_inner(self) -> time::SystemTime {$/;"	P	implementation:SystemTime	signature:(self) -> time::SystemTime
into_iter	$RUST/src/collections/hash/map.rs	/^    fn into_iter(self) -> IterMut<'a, K, V> {$/;"	P	implementation:HashMap	signature:(self) -> IterMut<'a, K, V>
into_iter	$RUST/src/collections/hash/set.rs	/^    fn into_iter<'new>(v: IntoIter<&'static str>) -> IntoIter<&'new str> {$/;"	f	function:assert_covariance	signature:<'new>(v: IntoIter<&'static str>) -> IntoIter<&'new str>
into_iter	$RUST/src/os/unix/net/listener.rs	/^    fn into_iter(self) -> Incoming<'a> {$/;"	P	implementation:UnixListener	signature:(self) -> Incoming<'a>
into_iter	$RUST/src/path.rs	/^    fn into_iter(self) -> Iter<'a> {$/;"	P	implementation:PathBuf	signature:(self) -> Iter<'a>
into_iter	$RUST/src/sync/mpsc/mod.rs	/^    fn into_iter(self) -> Iter<'a, T> {$/;"	P	implementation:Receiver	signature:(self) -> Iter<'a, T>
into_iter_key	$RUST/src/collections/hash/map.rs	/^    fn into_iter_key<'new>(v: IntoIter<&'static str, u8>) -> IntoIter<&'new str, u8> {$/;"	f	function:assert_covariance	signature:<'new>(v: IntoIter<&'static str, u8>) -> IntoIter<&'new str, u8>
into_iter_val	$RUST/src/collections/hash/map.rs	/^    fn into_iter_val<'new>(v: IntoIter<u8, &'static str>) -> IntoIter<u8, &'new str> {$/;"	f	function:assert_covariance	signature:<'new>(v: IntoIter<u8, &'static str>) -> IntoIter<u8, &'new str>
into_key	$RUST/src/collections/hash/map.rs	/^    pub fn into_key(self) -> K {$/;"	P	implementation:VacantEntry	signature:(self) -> K
into_key_value	$RUST/src/collections/hash/map.rs	/^    pub fn into_key_value(self) -> (&'a mut K, &'a mut V) {$/;"	P	implementation:RawOccupiedEntryMut	signature:(self) -> (&'a mut K, &'a mut V)
into_keys	$RUST/src/collections/hash/map.rs	/^    pub fn into_keys(self) -> IntoKeys<K, V> {$/;"	P	implementation:HashMap	signature:(self) -> IntoKeys<K, V>
into_mut	$RUST/src/collections/hash/map.rs	/^    pub fn into_mut(self) -> &'a mut V {$/;"	P	implementation:RawOccupiedEntryMut	signature:(self) -> &'a mut V
into_os_string	$RUST/src/ffi/os_str.rs	/^    pub fn into_os_string(self: Box<OsStr>) -> OsString {$/;"	P	implementation:OsStr	signature:(self: Box<OsStr>) -> OsString
into_os_string	$RUST/src/path.rs	/^    pub fn into_os_string(self) -> OsString {$/;"	P	implementation:PathBuf	signature:(self) -> OsString
into_parts	$RUST/src/io/buffered/bufwriter.rs	/^    pub fn into_parts(mut self) -> (W, Result<Vec<u8>, WriterPanicked>) {$/;"	P	implementation:BufWriter	signature:(mut self) -> (W, Result<Vec<u8>, WriterPanicked>)
into_parts	$RUST/src/io/buffered/mod.rs	/^    pub fn into_parts(self) -> (Error, W) {$/;"	P	implementation:IntoInnerError	signature:(self) -> (Error, W)
into_path_buf	$RUST/src/path.rs	/^    pub fn into_path_buf(self: Box<Path>) -> PathBuf {$/;"	P	implementation:Path	signature:(self: Box<Path>) -> PathBuf
into_pthread_t	$RUST/src/os/unix/thread.rs	/^    fn into_pthread_t(self) -> RawPthread;$/;"	P	interface:JoinHandleExt	signature:(self) -> RawPthread
into_raw	$RUST/src/os/unix/process.rs	/^    fn into_raw(self) -> i32;$/;"	P	interface:ExitStatusExt	signature:(self) -> i32
into_raw	$RUST/src/sys/pal/sgx/abi/usercalls/alloc.rs	/^    pub fn into_raw(self) -> *mut T {$/;"	f	signature:(self) -> *mut T
into_raw	$RUST/src/sys/pal/sgx/fd.rs	/^    pub fn into_raw(self) -> Fd {$/;"	P	implementation:FileDesc	signature:(self) -> Fd
into_raw	$RUST/src/sys/pal/unix/process/process_fuchsia.rs	/^    pub fn into_raw(&self) -> c_int {$/;"	P	implementation:ExitStatus	signature:(&self) -> c_int
into_raw	$RUST/src/sys/pal/unix/process/process_unix.rs	/^    pub fn into_raw(&self) -> c_int {$/;"	P	implementation:ExitStatus	signature:(&self) -> c_int
into_raw	$RUST/src/sys/pal/unix/process/process_unsupported/wait_status.rs	/^    pub fn into_raw(&self) -> c_int {$/;"	P	implementation:ExitStatus	signature:(&self) -> c_int
into_raw	$RUST/src/sys/pal/unix/process/process_vxworks.rs	/^    pub fn into_raw(&self) -> c_int {$/;"	P	implementation:ExitStatus	signature:(&self) -> c_int
into_raw_fd	$RUST/src/os/fd/owned.rs	/^    fn into_raw_fd(self) -> RawFd {$/;"	P	implementation:OwnedFd	signature:(self) -> RawFd
into_raw_fd	$RUST/src/os/fd/raw.rs	/^    fn into_raw_fd(self) -> RawFd;$/;"	P	interface:IntoRawFd	signature:(self) -> RawFd
into_raw_fd	$RUST/src/os/linux/process.rs	/^    fn into_raw_fd(self) -> RawFd {$/;"	P	implementation:PidFd	signature:(self) -> RawFd
into_raw_fd	$RUST/src/os/solid/io.rs	/^    fn into_raw_fd(self) -> RawFd;$/;"	P	interface:IntoRawFd	signature:(self) -> RawFd
into_raw_fd	$RUST/src/os/unix/net/datagram.rs	/^    fn into_raw_fd(self) -> RawFd {$/;"	P	implementation:UnixDatagram	signature:(self) -> RawFd
into_raw_fd	$RUST/src/os/unix/net/listener.rs	/^    fn into_raw_fd(self) -> RawFd {$/;"	P	implementation:UnixListener	signature:(self) -> RawFd
into_raw_fd	$RUST/src/os/unix/net/stream.rs	/^    fn into_raw_fd(self) -> RawFd {$/;"	P	implementation:UnixStream	signature:(self) -> RawFd
into_raw_fd	$RUST/src/os/unix/process.rs	/^    fn into_raw_fd(self) -> RawFd {$/;"	P	implementation:ChildStdout	signature:(self) -> RawFd
into_raw_fd	$RUST/src/sys/pal/hermit/fd.rs	/^    fn into_raw_fd(self) -> RawFd {$/;"	P	implementation:FileDesc	signature:(self) -> RawFd
into_raw_fd	$RUST/src/sys/pal/hermit/fs.rs	/^    fn into_raw_fd(self) -> RawFd {$/;"	P	implementation:File	signature:(self) -> RawFd
into_raw_fd	$RUST/src/sys/pal/solid/net.rs	/^    fn into_raw_fd(self) -> c_int {$/;"	P	implementation:Socket	signature:(self) -> c_int
into_raw_fd	$RUST/src/sys/pal/unix/fd.rs	/^    fn into_raw_fd(self) -> RawFd {$/;"	P	implementation:FileDesc	signature:(self) -> RawFd
into_raw_fd	$RUST/src/sys/pal/unix/fs.rs	/^    fn into_raw_fd(self) -> RawFd {$/;"	P	implementation:File	signature:(self) -> RawFd
into_raw_fd	$RUST/src/sys/pal/unix/l4re.rs	/^        fn into_raw_fd(self) -> RawFd {$/;"	P	implementation:net::Socket	signature:(self) -> RawFd
into_raw_fd	$RUST/src/sys/pal/unix/net.rs	/^    fn into_raw_fd(self) -> RawFd {$/;"	P	implementation:Socket	signature:(self) -> RawFd
into_raw_fd	$RUST/src/sys/pal/unix/pipe.rs	/^    fn into_raw_fd(self) -> RawFd {$/;"	P	implementation:AnonPipe	signature:(self) -> RawFd
into_raw_fd	$RUST/src/sys/pal/wasi/fd.rs	/^    fn into_raw_fd(self) -> RawFd {$/;"	P	implementation:WasiFd	signature:(self) -> RawFd
into_raw_fd	$RUST/src/sys/pal/wasi/fs.rs	/^    fn into_raw_fd(self) -> RawFd {$/;"	P	implementation:File	signature:(self) -> RawFd
into_raw_fd	$RUST/src/sys/pal/wasi/net.rs	/^    fn into_raw_fd(self) -> RawFd {$/;"	P	implementation:Socket	signature:(self) -> RawFd
into_raw_handle	$RUST/src/os/windows/io/handle.rs	/^    fn into_raw_handle(self) -> RawHandle {$/;"	P	implementation:OwnedHandle	signature:(self) -> RawHandle
into_raw_handle	$RUST/src/os/windows/io/raw.rs	/^    fn into_raw_handle(self) -> RawHandle;$/;"	P	interface:IntoRawHandle	signature:(self) -> RawHandle
into_raw_handle	$RUST/src/os/windows/process.rs	/^    fn into_raw_handle(self) -> RawHandle {$/;"	P	implementation:ChildStdout	signature:(self) -> RawHandle
into_raw_handle	$RUST/src/os/windows/thread.rs	/^    fn into_raw_handle(self) -> RawHandle {$/;"	P	implementation:JoinHandle	signature:(self) -> RawHandle
into_raw_handle	$RUST/src/sys/pal/windows/fs.rs	/^    fn into_raw_handle(self) -> RawHandle {$/;"	P	implementation:File	signature:(self) -> RawHandle
into_raw_handle	$RUST/src/sys/pal/windows/handle.rs	/^    fn into_raw_handle(self) -> RawHandle {$/;"	P	implementation:Handle	signature:(self) -> RawHandle
into_raw_socket	$RUST/src/os/windows/io/raw.rs	/^    fn into_raw_socket(self) -> RawSocket;$/;"	P	interface:IntoRawSocket	signature:(self) -> RawSocket
into_raw_socket	$RUST/src/os/windows/io/socket.rs	/^    fn into_raw_socket(self) -> RawSocket {$/;"	P	implementation:OwnedSocket	signature:(self) -> RawSocket
into_raw_socket	$RUST/src/sys/pal/windows/net.rs	/^    fn into_raw_socket(self) -> RawSocket {$/;"	P	implementation:Socket	signature:(self) -> RawSocket
into_rc	$RUST/src/ffi/os_str/tests.rs	/^fn into_rc() {$/;"	f	signature:()
into_rc	$RUST/src/sys/os_str/bytes.rs	/^    pub fn into_rc(&self) -> Rc<Slice> {$/;"	P	implementation:Slice	signature:(&self) -> Rc<Slice>
into_rc	$RUST/src/sys/os_str/wtf8.rs	/^    pub fn into_rc(&self) -> Rc<Slice> {$/;"	P	implementation:Slice	signature:(&self) -> Rc<Slice>
into_rc	$RUST/src/sys_common/wtf8.rs	/^    pub fn into_rc(&self) -> Rc<Wtf8> {$/;"	P	implementation:Wtf8	signature:(&self) -> Rc<Wtf8>
into_register	$RUST/src/sys/pal/sgx/abi/usercalls/raw.rs	/^    fn into_register(self) -> Register;$/;"	P	interface:RegisterArgument	signature:(self) -> Register
into_socket	$RUST/src/sys/pal/unix/l4re.rs	/^        pub fn into_socket(self) -> Socket {$/;"	P	implementation:net::UdpSocket	signature:(self) -> Socket
into_socket	$RUST/src/sys/pal/wasi/net.rs	/^    pub fn into_socket(self) -> Socket {$/;"	P	implementation:UdpSocket	signature:(self) -> Socket
into_socket	$RUST/src/sys_common/net.rs	/^    pub fn into_socket(self) -> Socket {$/;"	P	implementation:UdpSocket	signature:(self) -> Socket
into_status	$RUST/src/process.rs	/^    pub fn into_status(&self) -> ExitStatus {$/;"	P	implementation:ExitStatusError	signature:(&self) -> ExitStatus
into_string	$RUST/src/ffi/os_str.rs	/^    pub fn into_string(self) -> Result<String, OsString> {$/;"	P	implementation:OsString	signature:(self) -> Result<String, OsString>
into_string	$RUST/src/sys/os_str/bytes.rs	/^    pub fn into_string(self) -> Result<String, Buf> {$/;"	P	implementation:Buf	signature:(self) -> Result<String, Buf>
into_string	$RUST/src/sys/os_str/wtf8.rs	/^    pub fn into_string(self) -> Result<String, Buf> {$/;"	P	implementation:Buf	signature:(self) -> Result<String, Buf>
into_string	$RUST/src/sys_common/wtf8.rs	/^    pub fn into_string(self) -> Result<String, Wtf8Buf> {$/;"	P	implementation:Wtf8Buf	signature:(self) -> Result<String, Wtf8Buf>
into_string_lossy	$RUST/src/sys_common/wtf8.rs	/^    pub fn into_string_lossy(mut self) -> String {$/;"	P	implementation:Wtf8Buf	signature:(mut self) -> String
into_values	$RUST/src/collections/hash/map.rs	/^    pub fn into_values(self) -> IntoValues<K, V> {$/;"	P	implementation:HashMap	signature:(self) -> IntoValues<K, V>
into_vec	$RUST/src/os/unix/ffi/os_str.rs	/^    fn into_vec(self) -> Vec<u8>;$/;"	P	interface:OsStringExt	signature:(self) -> Vec<u8>
invalid_path_raises	$RUST/src/fs/tests.rs	/^fn invalid_path_raises() {$/;"	f	signature:()
io_benches	$RUST/src/io/copy/tests.rs	/^mod io_benches {$/;"	n
io_err_to_addr	$RUST/src/sys/pal/sgx/net.rs	/^fn io_err_to_addr(result: io::Result<&SocketAddr>) -> io::Result<String> {$/;"	f	signature:(result: io::Result<&SocketAddr>) -> io::Result<String>
io_result	$RUST/src/sys/pal/windows/mod.rs	/^    fn io_result(self) -> crate::io::Result<T>;$/;"	P	interface:IoResult	signature:(self) -> crate::io::Result<T>
io_slice_advance_slices	$RUST/src/io/tests.rs	/^fn io_slice_advance_slices() {$/;"	f	signature:()
io_slice_advance_slices_beyond_total_length	$RUST/src/io/tests.rs	/^fn io_slice_advance_slices_beyond_total_length() {$/;"	f	signature:()
io_slice_advance_slices_empty_slice	$RUST/src/io/tests.rs	/^fn io_slice_advance_slices_empty_slice() {$/;"	f	signature:()
io_slice_mut_advance_slices	$RUST/src/io/tests.rs	/^fn io_slice_mut_advance_slices() {$/;"	f	signature:()
io_slice_mut_advance_slices_beyond_total_length	$RUST/src/io/tests.rs	/^fn io_slice_mut_advance_slices_beyond_total_length() {$/;"	f	signature:()
io_slice_mut_advance_slices_empty_slice	$RUST/src/io/tests.rs	/^fn io_slice_mut_advance_slices_empty_slice() {$/;"	f	signature:()
ioctl	$RUST/src/sys/pal/solid/abi/sockets.rs	/^    pub fn ioctl(s: c_int, cmd: c_long, argp: *mut c_void) -> c_int;$/;"	f	signature:(s: c_int, cmd: c_long, argp: *mut c_void) -> c_int
ioctlsocket	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn ioctlsocket(s: SOCKET, cmd: i32, argp: *mut u32) -> i32;$/;"	f	signature:(s: SOCKET, cmd: i32, argp: *mut u32) -> i32
ios	$RUST/src/os/mod.rs	/^pub mod ios;$/;"	n
iov_base	$RUST/src/sys/pal/solid/abi/sockets.rs	/^    pub iov_base: *mut c_void,$/;"	m	struct:iovec
iov_len	$RUST/src/sys/pal/solid/abi/sockets.rs	/^    pub iov_len: usize,$/;"	m	struct:iovec
iovec	$RUST/src/sys/pal/solid/abi/sockets.rs	/^pub struct iovec {$/;"	s
iovec	$RUST/src/sys/pal/wasi/fd.rs	/^fn iovec<'a>(a: &'a mut [IoSliceMut<'_>]) -> &'a [wasi::Iovec] {$/;"	f	signature:<'a>(a: &'a mut [IoSliceMut<'_>]) -> &'a [wasi::Iovec]
ip4	$RUST/src/net/socket_addr/tests.rs	/^    fn ip4(low: u8) -> Ipv4Addr {$/;"	f	function:set_ip	signature:(low: u8) -> Ipv4Addr
ip6	$RUST/src/net/socket_addr/tests.rs	/^    fn ip6(low: u16) -> Ipv6Addr {$/;"	f	function:set_ip	signature:(low: u16) -> Ipv6Addr
ip_addr	$RUST/src/net/mod.rs	/^mod ip_addr;$/;"	n
ip_mreq	$RUST/src/sys/pal/solid/abi/sockets.rs	/^pub struct ip_mreq {$/;"	s
ip_mreq	$RUST/src/sys/pal/windows/c.rs	/^pub struct ip_mreq {$/;"	s
ipv4_socket_addr_to_string	$RUST/src/net/socket_addr/tests.rs	/^fn ipv4_socket_addr_to_string() {$/;"	f	signature:()
ipv6_mreq	$RUST/src/sys/pal/solid/abi/sockets.rs	/^pub struct ipv6_mreq {$/;"	s
ipv6_mreq	$RUST/src/sys/pal/windows/c.rs	/^pub struct ipv6_mreq {$/;"	s
ipv6_socket_addr_to_string	$RUST/src/net/socket_addr/tests.rs	/^fn ipv6_socket_addr_to_string() {$/;"	f	signature:()
ipv6mr_interface	$RUST/src/sys/pal/solid/abi/sockets.rs	/^    pub ipv6mr_interface: c_uint,$/;"	m	struct:ipv6_mreq
ipv6mr_interface	$RUST/src/sys/pal/windows/c.rs	/^    pub ipv6mr_interface: c_uint,$/;"	m	struct:ipv6_mreq
ipv6mr_interface	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub ipv6mr_interface: u32,$/;"	m	struct:IPV6_MREQ
ipv6mr_multiaddr	$RUST/src/sys/pal/solid/abi/sockets.rs	/^    pub ipv6mr_multiaddr: in6_addr,$/;"	m	struct:ipv6_mreq
ipv6mr_multiaddr	$RUST/src/sys/pal/windows/c.rs	/^    pub ipv6mr_multiaddr: in6_addr,$/;"	m	struct:ipv6_mreq
ipv6mr_multiaddr	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub ipv6mr_multiaddr: IN6_ADDR,$/;"	m	struct:IPV6_MREQ
is_absolute	$RUST/src/path.rs	/^    pub fn is_absolute(&self) -> bool {$/;"	P	implementation:Path	signature:(&self) -> bool
is_ascii	$RUST/src/ascii.rs	/^    fn is_ascii(&self) -> bool;$/;"	P	interface:AsciiExt	signature:(&self) -> bool
is_ascii	$RUST/src/ffi/os_str.rs	/^    pub fn is_ascii(&self) -> bool {$/;"	P	implementation:OsStr	signature:(&self) -> bool
is_ascii	$RUST/src/sys/os_str/bytes.rs	/^    pub fn is_ascii(&self) -> bool {$/;"	P	implementation:Slice	signature:(&self) -> bool
is_ascii	$RUST/src/sys/os_str/wtf8.rs	/^    pub fn is_ascii(&self) -> bool {$/;"	P	implementation:Slice	signature:(&self) -> bool
is_ascii	$RUST/src/sys_common/wtf8.rs	/^    pub fn is_ascii(&self) -> bool {$/;"	P	implementation:Wtf8	signature:(&self) -> bool
is_block_device	$RUST/src/os/unix/fs.rs	/^    fn is_block_device(&self) -> bool;$/;"	P	interface:FileTypeExt	signature:(&self) -> bool
is_block_device	$RUST/src/os/wasi/fs.rs	/^    fn is_block_device(&self) -> bool;$/;"	P	interface:FileTypeExt	signature:(&self) -> bool
is_char_device	$RUST/src/os/unix/fs.rs	/^    fn is_char_device(&self) -> bool;$/;"	P	interface:FileTypeExt	signature:(&self) -> bool
is_char_device	$RUST/src/os/wasi/fs.rs	/^    fn is_char_device(&self) -> bool;$/;"	P	interface:FileTypeExt	signature:(&self) -> bool
is_code_point_boundary	$RUST/src/sys_common/wtf8.rs	/^pub fn is_code_point_boundary(slice: &Wtf8, index: usize) -> bool {$/;"	f	signature:(slice: &Wtf8, index: usize) -> bool
is_completed	$RUST/src/sync/once.rs	/^    pub fn is_completed(&self) -> bool {$/;"	P	implementation:Once	signature:(&self) -> bool
is_completed	$RUST/src/sys/pal/unsupported/once.rs	/^    pub fn is_completed(&self) -> bool {$/;"	P	implementation:Once	signature:(&self) -> bool
is_completed	$RUST/src/sys_common/once/futex.rs	/^    pub fn is_completed(&self) -> bool {$/;"	P	implementation:Once	signature:(&self) -> bool
is_completed	$RUST/src/sys_common/once/queue.rs	/^    pub fn is_completed(&self) -> bool {$/;"	P	implementation:Once	signature:(&self) -> bool
is_console	$RUST/src/sys/pal/windows/stdio.rs	/^fn is_console(handle: c::HANDLE) -> bool {$/;"	f	signature:(handle: c::HANDLE) -> bool
is_contested	$RUST/src/sys/pal/unix/locks/fuchsia_mutex.rs	/^fn is_contested(state: u32) -> bool {$/;"	f	signature:(state: u32) -> bool
is_dir	$RUST/src/fs.rs	/^    pub fn is_dir(&self) -> bool {$/;"	P	implementation:Metadata	signature:(&self) -> bool
is_dir	$RUST/src/path.rs	/^    pub fn is_dir(&self) -> bool {$/;"	P	implementation:Path	signature:(&self) -> bool
is_dir	$RUST/src/sys/pal/hermit/fs.rs	/^    pub fn is_dir(&self) -> bool {$/;"	P	implementation:FileType	signature:(&self) -> bool
is_dir	$RUST/src/sys/pal/solid/fs.rs	/^    pub fn is_dir(&self) -> bool {$/;"	P	implementation:FileType	signature:(&self) -> bool
is_dir	$RUST/src/sys/pal/unix/fs.rs	/^    pub fn is_dir(&self) -> bool {$/;"	P	implementation:FileType	signature:(&self) -> bool
is_dir	$RUST/src/sys/pal/unsupported/fs.rs	/^    pub fn is_dir(&self) -> bool {$/;"	P	implementation:FileType	signature:(&self) -> bool
is_dir	$RUST/src/sys/pal/wasi/fs.rs	/^    pub fn is_dir(&self) -> bool {$/;"	P	implementation:FileType	signature:(&self) -> bool
is_dir	$RUST/src/sys/pal/windows/fs.rs	/^    pub fn is_dir(&self) -> bool {$/;"	P	implementation:FileType	signature:(&self) -> bool
is_directory	$RUST/src/sys/pal/windows/fs.rs	/^    fn is_directory(&self) -> bool {$/;"	P	implementation:FileType	signature:(&self) -> bool
is_disconnected	$RUST/src/sync/mpmc/array.rs	/^    pub(crate) fn is_disconnected(&self) -> bool {$/;"	P	implementation:Channel	signature:(&self) -> bool
is_disconnected	$RUST/src/sync/mpmc/list.rs	/^    pub(crate) fn is_disconnected(&self) -> bool {$/;"	P	implementation:Channel	signature:(&self) -> bool
is_disconnected	$RUST/src/sync/mpmc/zero.rs	/^    is_disconnected: bool,$/;"	m	struct:Inner
is_disjoint	$RUST/src/collections/hash/set.rs	/^    pub fn is_disjoint(&self, other: &HashSet<T, S>) -> bool {$/;"	f	signature:(&self, other: &HashSet<T, S>) -> bool
is_drive	$RUST/src/path.rs	/^    fn is_drive(&self) -> bool {$/;"	P	implementation:Prefix	signature:(&self) -> bool
is_ebadf	$RUST/src/sys/pal/hermit/stdio.rs	/^pub fn is_ebadf(_err: &io::Error) -> bool {$/;"	f	signature:(_err: &io::Error) -> bool
is_ebadf	$RUST/src/sys/pal/sgx/stdio.rs	/^pub fn is_ebadf(err: &io::Error) -> bool {$/;"	f	signature:(err: &io::Error) -> bool
is_ebadf	$RUST/src/sys/pal/solid/stdio.rs	/^pub fn is_ebadf(_err: &io::Error) -> bool {$/;"	f	signature:(_err: &io::Error) -> bool
is_ebadf	$RUST/src/sys/pal/teeos/stdio.rs	/^pub fn is_ebadf(err: &io::Error) -> bool {$/;"	f	signature:(err: &io::Error) -> bool
is_ebadf	$RUST/src/sys/pal/uefi/stdio.rs	/^pub fn is_ebadf(_err: &io::Error) -> bool {$/;"	f	signature:(_err: &io::Error) -> bool
is_ebadf	$RUST/src/sys/pal/unix/stdio.rs	/^pub fn is_ebadf(err: &io::Error) -> bool {$/;"	f	signature:(err: &io::Error) -> bool
is_ebadf	$RUST/src/sys/pal/unsupported/stdio.rs	/^pub fn is_ebadf(_err: &io::Error) -> bool {$/;"	f	signature:(_err: &io::Error) -> bool
is_ebadf	$RUST/src/sys/pal/wasi/stdio.rs	/^pub fn is_ebadf(err: &io::Error) -> bool {$/;"	f	signature:(err: &io::Error) -> bool
is_ebadf	$RUST/src/sys/pal/windows/stdio.rs	/^pub fn is_ebadf(err: &io::Error) -> bool {$/;"	f	signature:(err: &io::Error) -> bool
is_ebadf	$RUST/src/sys/pal/xous/stdio.rs	/^pub fn is_ebadf(_err: &io::Error) -> bool {$/;"	f	signature:(_err: &io::Error) -> bool
is_ebadf	$RUST/src/sys/pal/zkvm/stdio.rs	/^pub fn is_ebadf(_err: &io::Error) -> bool {$/;"	f	signature:(_err: &io::Error) -> bool
is_empty	$RUST/src/collections/hash/map.rs	/^    pub fn is_empty(&self) -> bool {$/;"	P	implementation:HashMap	signature:(&self) -> bool
is_empty	$RUST/src/collections/hash/set.rs	/^    pub fn is_empty(&self) -> bool {$/;"	P	implementation:HashSet	signature:(&self) -> bool
is_empty	$RUST/src/env.rs	/^    fn is_empty(&self) -> bool {$/;"	P	implementation:ArgsOs	signature:(&self) -> bool
is_empty	$RUST/src/ffi/os_str.rs	/^    pub fn is_empty(&self) -> bool {$/;"	P	implementation:OsStr	signature:(&self) -> bool
is_empty	$RUST/src/io/cursor.rs	/^    pub fn is_empty(&self) -> bool {$/;"	f	signature:(&self) -> bool
is_empty	$RUST/src/os/unix/net/ancillary.rs	/^    pub fn is_empty(&self) -> bool {$/;"	P	implementation:SocketAncillary	signature:(&self) -> bool
is_empty	$RUST/src/os/xous/ffi/definitions/memoryflags.rs	/^    pub fn is_empty(&self) -> bool {$/;"	P	implementation:MemoryFlags	signature:(&self) -> bool
is_empty	$RUST/src/process.rs	/^    fn is_empty(&self) -> bool {$/;"	P	implementation:CommandArgs	signature:(&self) -> bool
is_empty	$RUST/src/sync/mpmc/array.rs	/^    pub(crate) fn is_empty(&self) -> bool {$/;"	P	implementation:Channel	signature:(&self) -> bool
is_empty	$RUST/src/sync/mpmc/list.rs	/^    pub(crate) fn is_empty(&self) -> bool {$/;"	P	implementation:Channel	signature:(&self) -> bool
is_empty	$RUST/src/sync/mpmc/mod.rs	/^    pub fn is_empty(&self) -> bool {$/;"	P	implementation:Sender	signature:(&self) -> bool
is_empty	$RUST/src/sync/mpmc/waker.rs	/^    is_empty: AtomicBool,$/;"	m	struct:SyncWaker
is_empty	$RUST/src/sync/mpmc/zero.rs	/^    pub(crate) fn is_empty(&self) -> bool {$/;"	P	implementation:Channel	signature:(&self) -> bool
is_empty	$RUST/src/sys/pal/sgx/waitqueue/mod.rs	/^    pub fn is_empty(&self) -> bool {$/;"	P	implementation:WaitQueue	signature:(&self) -> bool
is_empty	$RUST/src/sys/pal/sgx/waitqueue/unsafe_list.rs	/^    pub fn is_empty(&self) -> bool {$/;"	P	implementation:UnsafeList	signature:(&self) -> bool
is_empty	$RUST/src/sys/pal/unix/process/process_common.rs	/^    fn is_empty(&self) -> bool {$/;"	P	implementation:CommandArgs	signature:(&self) -> bool
is_empty	$RUST/src/sys/pal/windows/process.rs	/^    fn is_empty(&self) -> bool {$/;"	P	implementation:CommandArgs	signature:(&self) -> bool
is_empty	$RUST/src/sys_common/process.rs	/^    fn is_empty(&self) -> bool {$/;"	P	implementation:CommandEnvs	signature:(&self) -> bool
is_empty	$RUST/src/sys_common/wtf8.rs	/^    pub fn is_empty(&self) -> bool {$/;"	P	implementation:Wtf8	signature:(&self) -> bool
is_enclave_range	$RUST/src/sys/pal/sgx/abi/mem.rs	/^pub fn is_enclave_range(p: *const u8, len: usize) -> bool {$/;"	f	signature:(p: *const u8, len: usize) -> bool
is_fifo	$RUST/src/os/unix/fs.rs	/^    fn is_fifo(&self) -> bool;$/;"	P	interface:FileTypeExt	signature:(&self) -> bool
is_file	$RUST/src/fs.rs	/^    pub fn is_file(&self) -> bool {$/;"	P	implementation:Metadata	signature:(&self) -> bool
is_file	$RUST/src/path.rs	/^    pub fn is_file(&self) -> bool {$/;"	P	implementation:Path	signature:(&self) -> bool
is_file	$RUST/src/sys/pal/hermit/fs.rs	/^    pub fn is_file(&self) -> bool {$/;"	P	implementation:FileType	signature:(&self) -> bool
is_file	$RUST/src/sys/pal/solid/fs.rs	/^    pub fn is_file(&self) -> bool {$/;"	P	implementation:FileType	signature:(&self) -> bool
is_file	$RUST/src/sys/pal/unix/fs.rs	/^    pub fn is_file(&self) -> bool {$/;"	P	implementation:FileType	signature:(&self) -> bool
is_file	$RUST/src/sys/pal/unsupported/fs.rs	/^    pub fn is_file(&self) -> bool {$/;"	P	implementation:FileType	signature:(&self) -> bool
is_file	$RUST/src/sys/pal/wasi/fs.rs	/^    pub fn is_file(&self) -> bool {$/;"	P	implementation:FileType	signature:(&self) -> bool
is_file	$RUST/src/sys/pal/windows/fs.rs	/^    pub fn is_file(&self) -> bool {$/;"	P	implementation:FileType	signature:(&self) -> bool
is_finished	$RUST/src/thread/mod.rs	/^    pub fn is_finished(&self) -> bool {$/;"	P	implementation:JoinHandle	signature:(&self) -> bool
is_finished	$RUST/src/thread/scoped.rs	/^    pub fn is_finished(&self) -> bool {$/;"	P	implementation:ScopedJoinHandle	signature:(&self) -> bool
is_full	$RUST/src/sync/mpmc/array.rs	/^    pub(crate) fn is_full(&self) -> bool {$/;"	P	implementation:Channel	signature:(&self) -> bool
is_full	$RUST/src/sync/mpmc/list.rs	/^    pub(crate) fn is_full(&self) -> bool {$/;"	P	implementation:Channel	signature:(&self) -> bool
is_full	$RUST/src/sync/mpmc/mod.rs	/^    pub fn is_full(&self) -> bool {$/;"	P	implementation:Sender	signature:(&self) -> bool
is_full	$RUST/src/sync/mpmc/zero.rs	/^    pub(crate) fn is_full(&self) -> bool {$/;"	P	implementation:Channel	signature:(&self) -> bool
is_initialized	$RUST/src/sync/once_lock.rs	/^    fn is_initialized(&self) -> bool {$/;"	P	implementation:OnceLock	signature:(&self) -> bool
is_interrupted	$RUST/src/io/error.rs	/^    pub(crate) fn is_interrupted(&self) -> bool {$/;"	P	implementation:Error	signature:(&self) -> bool
is_interrupted	$RUST/src/sys/pal/hermit/mod.rs	/^pub(crate) fn is_interrupted(errno: i32) -> bool {$/;"	f	signature:(errno: i32) -> bool
is_interrupted	$RUST/src/sys/pal/itron/error.rs	/^pub fn is_interrupted(er: abi::ER) -> bool {$/;"	f	signature:(er: abi::ER) -> bool
is_interrupted	$RUST/src/sys/pal/sgx/mod.rs	/^pub fn is_interrupted(code: i32) -> bool {$/;"	f	signature:(code: i32) -> bool
is_interrupted	$RUST/src/sys/pal/solid/mod.rs	/^pub fn is_interrupted(code: i32) -> bool {$/;"	f	signature:(code: i32) -> bool
is_interrupted	$RUST/src/sys/pal/solid/net.rs	/^pub fn is_interrupted(er: abi::ER) -> bool {$/;"	f	signature:(er: abi::ER) -> bool
is_interrupted	$RUST/src/sys/pal/teeos/mod.rs	/^pub(crate) fn is_interrupted(errno: i32) -> bool {$/;"	f	signature:(errno: i32) -> bool
is_interrupted	$RUST/src/sys/pal/uefi/mod.rs	/^pub fn is_interrupted(_code: RawOsError) -> bool {$/;"	f	signature:(_code: RawOsError) -> bool
is_interrupted	$RUST/src/sys/pal/unix/mod.rs	/^pub(crate) fn is_interrupted(errno: i32) -> bool {$/;"	f	signature:(errno: i32) -> bool
is_interrupted	$RUST/src/sys/pal/unsupported/common.rs	/^pub fn is_interrupted(_code: i32) -> bool {$/;"	f	signature:(_code: i32) -> bool
is_interrupted	$RUST/src/sys/pal/wasi/mod.rs	/^pub fn is_interrupted(errno: i32) -> bool {$/;"	f	signature:(errno: i32) -> bool
is_interrupted	$RUST/src/sys/pal/windows/mod.rs	/^pub fn is_interrupted(_errno: i32) -> bool {$/;"	f	signature:(_errno: i32) -> bool
is_interrupted	$RUST/src/sys/pal/zkvm/mod.rs	/^pub fn is_interrupted(_code: i32) -> bool {$/;"	f	signature:(_code: i32) -> bool
is_known_utf8	$RUST/src/sys_common/wtf8.rs	/^    is_known_utf8: bool,$/;"	m	struct:Wtf8Buf
is_leader	$RUST/src/sync/barrier.rs	/^    pub fn is_leader(&self) -> bool {$/;"	P	implementation:BarrierWaitResult	signature:(&self) -> bool
is_minus_one	$RUST/src/sys/pal/solid/net.rs	/^    fn is_minus_one(&self) -> bool;$/;"	P	interface:IsMinusOne	signature:(&self) -> bool
is_minus_one	$RUST/src/sys/pal/teeos/mod.rs	/^    fn is_minus_one(&self) -> bool;$/;"	P	interface:IsMinusOne	signature:(&self) -> bool
is_minus_one	$RUST/src/sys/pal/unix/mod.rs	/^    fn is_minus_one(&self) -> bool;$/;"	P	interface:IsMinusOne	signature:(&self) -> bool
is_minus_one	$RUST/src/sys/pal/wasi/os.rs	/^    fn is_minus_one(&self) -> bool;$/;"	P	interface:IsMinusOne	signature:(&self) -> bool
is_minus_one	$RUST/src/sys/pal/windows/net.rs	/^    fn is_minus_one(&self) -> bool;$/;"	P	interface:IsMinusOne	signature:(&self) -> bool
is_mutex	$RUST/src/sync/remutex/tests.rs	/^fn is_mutex() {$/;"	f	signature:()
is_negative	$RUST/src/sys/pal/hermit/mod.rs	/^    fn is_negative(&self) -> bool;$/;"	P	interface:IsNegative	signature:(&self) -> bool
is_poisoned	$RUST/src/sync/mutex.rs	/^    pub fn is_poisoned(&self) -> bool {$/;"	P	implementation:Mutex	signature:(&self) -> bool
is_poisoned	$RUST/src/sync/once.rs	/^    pub fn is_poisoned(&self) -> bool {$/;"	P	implementation:OnceState	signature:(&self) -> bool
is_poisoned	$RUST/src/sync/rwlock.rs	/^    pub fn is_poisoned(&self) -> bool {$/;"	P	implementation:RwLock	signature:(&self) -> bool
is_poisoned	$RUST/src/sys/pal/unsupported/once.rs	/^    pub fn is_poisoned(&self) -> bool {$/;"	P	implementation:OnceState	signature:(&self) -> bool
is_poisoned	$RUST/src/sys_common/once/futex.rs	/^    pub fn is_poisoned(&self) -> bool {$/;"	P	implementation:OnceState	signature:(&self) -> bool
is_poisoned	$RUST/src/sys_common/once/queue.rs	/^    pub fn is_poisoned(&self) -> bool {$/;"	P	implementation:OnceState	signature:(&self) -> bool
is_queued	$RUST/src/sys/pal/itron/condvar.rs	/^        pub unsafe fn is_queued(&self, waiter: NonNull<Waiter>) -> bool {$/;"	P	implementation:waiter_queue::WaiterQueue	signature:(&self, waiter: NonNull<Waiter>) -> bool
is_read_lockable	$RUST/src/sys/pal/unix/locks/futex_rwlock.rs	/^fn is_read_lockable(state: u32) -> bool {$/;"	f	signature:(state: u32) -> bool
is_read_vectored	$RUST/src/fs.rs	/^    fn is_read_vectored(&self) -> bool {$/;"	P	implementation:File	signature:(&self) -> bool
is_read_vectored	$RUST/src/io/buffered/bufreader.rs	/^    fn is_read_vectored(&self) -> bool {$/;"	P	implementation:BufReader	signature:(&self) -> bool
is_read_vectored	$RUST/src/io/cursor.rs	/^    fn is_read_vectored(&self) -> bool {$/;"	f	signature:(&self) -> bool
is_read_vectored	$RUST/src/io/impls.rs	/^    fn is_read_vectored(&self) -> bool {$/;"	P	implementation:u8	signature:(&self) -> bool
is_read_vectored	$RUST/src/io/mod.rs	/^    fn is_read_vectored(&self) -> bool {$/;"	P	interface:Read	signature:(&self) -> bool
is_read_vectored	$RUST/src/io/stdio.rs	/^    fn is_read_vectored(&self) -> bool {$/;"	P	implementation:StdinRaw	signature:(&self) -> bool
is_read_vectored	$RUST/src/io/util.rs	/^    fn is_read_vectored(&self) -> bool {$/;"	P	implementation:Repeat	signature:(&self) -> bool
is_read_vectored	$RUST/src/net/tcp.rs	/^    fn is_read_vectored(&self) -> bool {$/;"	P	implementation:TcpStream	signature:(&self) -> bool
is_read_vectored	$RUST/src/os/unix/net/stream.rs	/^    fn is_read_vectored(&self) -> bool {$/;"	P	implementation:UnixStream	signature:(&self) -> bool
is_read_vectored	$RUST/src/process.rs	/^    fn is_read_vectored(&self) -> bool {$/;"	P	implementation:ChildStdout	signature:(&self) -> bool
is_read_vectored	$RUST/src/sys/pal/hermit/fs.rs	/^    pub fn is_read_vectored(&self) -> bool {$/;"	P	implementation:File	signature:(&self) -> bool
is_read_vectored	$RUST/src/sys/pal/hermit/net.rs	/^    pub fn is_read_vectored(&self) -> bool {$/;"	P	implementation:Socket	signature:(&self) -> bool
is_read_vectored	$RUST/src/sys/pal/hermit/stdio.rs	/^    fn is_read_vectored(&self) -> bool {$/;"	P	implementation:Stdin	signature:(&self) -> bool
is_read_vectored	$RUST/src/sys/pal/sgx/fd.rs	/^    pub fn is_read_vectored(&self) -> bool {$/;"	P	implementation:FileDesc	signature:(&self) -> bool
is_read_vectored	$RUST/src/sys/pal/sgx/net.rs	/^    pub fn is_read_vectored(&self) -> bool {$/;"	P	implementation:TcpStream	signature:(&self) -> bool
is_read_vectored	$RUST/src/sys/pal/solid/net.rs	/^    pub fn is_read_vectored(&self) -> bool {$/;"	P	implementation:Socket	signature:(&self) -> bool
is_read_vectored	$RUST/src/sys/pal/teeos/net.rs	/^    pub fn is_read_vectored(&self) -> bool {$/;"	P	implementation:TcpStream	signature:(&self) -> bool
is_read_vectored	$RUST/src/sys/pal/unix/fd.rs	/^    pub fn is_read_vectored(&self) -> bool {$/;"	P	implementation:FileDesc	signature:(&self) -> bool
is_read_vectored	$RUST/src/sys/pal/unix/fs.rs	/^    pub fn is_read_vectored(&self) -> bool {$/;"	P	implementation:File	signature:(&self) -> bool
is_read_vectored	$RUST/src/sys/pal/unix/l4re.rs	/^        pub fn is_read_vectored(&self) -> bool {$/;"	P	implementation:net::TcpStream	signature:(&self) -> bool
is_read_vectored	$RUST/src/sys/pal/unix/net.rs	/^    pub fn is_read_vectored(&self) -> bool {$/;"	P	implementation:Socket	signature:(&self) -> bool
is_read_vectored	$RUST/src/sys/pal/unix/pipe.rs	/^    pub fn is_read_vectored(&self) -> bool {$/;"	P	implementation:AnonPipe	signature:(&self) -> bool
is_read_vectored	$RUST/src/sys/pal/unix/stdio.rs	/^    fn is_read_vectored(&self) -> bool {$/;"	P	implementation:Stdin	signature:(&self) -> bool
is_read_vectored	$RUST/src/sys/pal/unsupported/fs.rs	/^    pub fn is_read_vectored(&self) -> bool {$/;"	P	implementation:File	signature:(&self) -> bool
is_read_vectored	$RUST/src/sys/pal/unsupported/net.rs	/^    pub fn is_read_vectored(&self) -> bool {$/;"	P	implementation:TcpStream	signature:(&self) -> bool
is_read_vectored	$RUST/src/sys/pal/unsupported/pipe.rs	/^    pub fn is_read_vectored(&self) -> bool {$/;"	P	implementation:AnonPipe	signature:(&self) -> bool
is_read_vectored	$RUST/src/sys/pal/wasi/fs.rs	/^    pub fn is_read_vectored(&self) -> bool {$/;"	P	implementation:File	signature:(&self) -> bool
is_read_vectored	$RUST/src/sys/pal/wasi/net.rs	/^    pub fn is_read_vectored(&self) -> bool {$/;"	P	implementation:TcpStream	signature:(&self) -> bool
is_read_vectored	$RUST/src/sys/pal/wasi/stdio.rs	/^    fn is_read_vectored(&self) -> bool {$/;"	P	implementation:Stdin	signature:(&self) -> bool
is_read_vectored	$RUST/src/sys/pal/windows/fs.rs	/^    pub fn is_read_vectored(&self) -> bool {$/;"	P	implementation:File	signature:(&self) -> bool
is_read_vectored	$RUST/src/sys/pal/windows/handle.rs	/^    pub fn is_read_vectored(&self) -> bool {$/;"	P	implementation:Handle	signature:(&self) -> bool
is_read_vectored	$RUST/src/sys/pal/windows/net.rs	/^    pub fn is_read_vectored(&self) -> bool {$/;"	P	implementation:Socket	signature:(&self) -> bool
is_read_vectored	$RUST/src/sys/pal/windows/pipe.rs	/^    pub fn is_read_vectored(&self) -> bool {$/;"	P	implementation:AnonPipe	signature:(&self) -> bool
is_read_vectored	$RUST/src/sys/pal/xous/net/tcpstream.rs	/^    pub fn is_read_vectored(&self) -> bool {$/;"	P	implementation:TcpStream	signature:(&self) -> bool
is_read_vectored	$RUST/src/sys_common/net.rs	/^    pub fn is_read_vectored(&self) -> bool {$/;"	P	implementation:TcpStream	signature:(&self) -> bool
is_relative	$RUST/src/path.rs	/^    pub fn is_relative(&self) -> bool {$/;"	P	implementation:Path	signature:(&self) -> bool
is_reparse_point	$RUST/src/sys/pal/windows/fs.rs	/^    fn is_reparse_point(&self) -> bool {$/;"	P	implementation:FileType	signature:(&self) -> bool
is_reparse_tag_name_surrogate	$RUST/src/sys/pal/windows/fs.rs	/^    fn is_reparse_tag_name_surrogate(&self) -> bool {$/;"	P	implementation:FileType	signature:(&self) -> bool
is_sep_byte	$RUST/src/path.rs	/^    fn is_sep_byte(&self, b: u8) -> bool {$/;"	P	implementation:Components	signature:(&self, b: u8) -> bool
is_sep_byte	$RUST/src/sys/pal/sgx/path.rs	/^pub fn is_sep_byte(b: u8) -> bool {$/;"	f	signature:(b: u8) -> bool
is_sep_byte	$RUST/src/sys/pal/solid/path.rs	/^pub fn is_sep_byte(b: u8) -> bool {$/;"	f	signature:(b: u8) -> bool
is_sep_byte	$RUST/src/sys/pal/unix/path.rs	/^pub fn is_sep_byte(b: u8) -> bool {$/;"	f	signature:(b: u8) -> bool
is_separator	$RUST/src/path.rs	/^pub fn is_separator(c: char) -> bool {$/;"	f	signature:(c: char) -> bool
is_separator	$RUST/src/sys/pal/unix/os.rs	/^    fn is_separator(b: &u8) -> bool {$/;"	f	function:split_paths	signature:(b: &u8) -> bool
is_socket	$RUST/src/os/unix/fs.rs	/^    fn is_socket(&self) -> bool;$/;"	P	interface:FileTypeExt	signature:(&self) -> bool
is_socket	$RUST/src/os/wasi/fs.rs	/^    fn is_socket(&self) -> bool {$/;"	P	interface:FileTypeExt	signature:(&self) -> bool
is_socket_dgram	$RUST/src/os/wasi/fs.rs	/^    fn is_socket_dgram(&self) -> bool;$/;"	P	interface:FileTypeExt	signature:(&self) -> bool
is_socket_stream	$RUST/src/os/wasi/fs.rs	/^    fn is_socket_stream(&self) -> bool;$/;"	P	interface:FileTypeExt	signature:(&self) -> bool
is_subset	$RUST/src/collections/hash/set.rs	/^    pub fn is_subset(&self, other: &HashSet<T, S>) -> bool {$/;"	f	signature:(&self, other: &HashSet<T, S>) -> bool
is_superset	$RUST/src/collections/hash/set.rs	/^    pub fn is_superset(&self, other: &HashSet<T, S>) -> bool {$/;"	f	signature:(&self, other: &HashSet<T, S>) -> bool
is_symlink	$RUST/src/fs.rs	/^    pub fn is_symlink(&self) -> bool {$/;"	P	implementation:Metadata	signature:(&self) -> bool
is_symlink	$RUST/src/path.rs	/^    pub fn is_symlink(&self) -> bool {$/;"	P	implementation:Path	signature:(&self) -> bool
is_symlink	$RUST/src/sys/pal/hermit/fs.rs	/^    pub fn is_symlink(&self) -> bool {$/;"	P	implementation:FileType	signature:(&self) -> bool
is_symlink	$RUST/src/sys/pal/solid/fs.rs	/^    pub fn is_symlink(&self) -> bool {$/;"	P	implementation:FileType	signature:(&self) -> bool
is_symlink	$RUST/src/sys/pal/unix/fs.rs	/^    pub fn is_symlink(&self) -> bool {$/;"	P	implementation:FileType	signature:(&self) -> bool
is_symlink	$RUST/src/sys/pal/unsupported/fs.rs	/^    pub fn is_symlink(&self) -> bool {$/;"	P	implementation:FileType	signature:(&self) -> bool
is_symlink	$RUST/src/sys/pal/wasi/fs.rs	/^    pub fn is_symlink(&self) -> bool {$/;"	P	implementation:FileType	signature:(&self) -> bool
is_symlink	$RUST/src/sys/pal/windows/fs.rs	/^    pub fn is_symlink(&self) -> bool {$/;"	P	implementation:FileType	signature:(&self) -> bool
is_symlink_dir	$RUST/src/os/windows/fs.rs	/^    fn is_symlink_dir(&self) -> bool;$/;"	P	interface:FileTypeExt	signature:(&self) -> bool
is_symlink_dir	$RUST/src/sys/pal/windows/fs.rs	/^    pub fn is_symlink_dir(&self) -> bool {$/;"	P	implementation:FileType	signature:(&self) -> bool
is_symlink_file	$RUST/src/os/windows/fs.rs	/^    fn is_symlink_file(&self) -> bool;$/;"	P	interface:FileTypeExt	signature:(&self) -> bool
is_symlink_file	$RUST/src/sys/pal/windows/fs.rs	/^    pub fn is_symlink_file(&self) -> bool {$/;"	P	implementation:FileType	signature:(&self) -> bool
is_sync_send	$RUST/src/sync/lazy_lock/tests.rs	/^fn is_sync_send() {$/;"	f	signature:()
is_sync_send	$RUST/src/sync/once_lock/tests.rs	/^fn is_sync_send() {$/;"	f	signature:()
is_terminal	$RUST/src/io/stdio.rs	/^    fn is_terminal(&self) -> bool;$/;"	P	interface:IsTerminal	signature:(&self) -> bool
is_terminal	$RUST/src/sys/pal/solid/io.rs	/^pub fn is_terminal<T>(_: &T) -> bool {$/;"	f	signature:<T>(_: &T) -> bool
is_terminal	$RUST/src/sys/pal/unix/io.rs	/^pub fn is_terminal(fd: &impl AsFd) -> bool {$/;"	f	signature:(fd: &impl AsFd) -> bool
is_terminal	$RUST/src/sys/pal/unsupported/io.rs	/^pub fn is_terminal<T>(_: &T) -> bool {$/;"	f	signature:<T>(_: &T) -> bool
is_terminal	$RUST/src/sys/pal/wasi/io.rs	/^pub fn is_terminal(fd: &impl AsFd) -> bool {$/;"	f	signature:(fd: &impl AsFd) -> bool
is_terminal	$RUST/src/sys/pal/windows/io.rs	/^pub fn is_terminal(h: &impl AsHandle) -> bool {$/;"	f	signature:(h: &impl AsHandle) -> bool
is_unchanged	$RUST/src/sys_common/process.rs	/^    pub fn is_unchanged(&self) -> bool {$/;"	P	implementation:CommandEnv	signature:(&self) -> bool
is_unlocked	$RUST/src/sys/pal/unix/locks/futex_rwlock.rs	/^fn is_unlocked(state: u32) -> bool {$/;"	f	signature:(state: u32) -> bool
is_unnamed	$RUST/src/os/unix/net/addr.rs	/^    pub fn is_unnamed(&self) -> bool {$/;"	P	implementation:SocketAddr	signature:(&self) -> bool
is_user_range	$RUST/src/sys/pal/sgx/abi/mem.rs	/^pub fn is_user_range(p: *const u8, len: usize) -> bool {$/;"	f	signature:(p: *const u8, len: usize) -> bool
is_v4	$RUST/src/net/socket_addr/tests.rs	/^fn is_v4() {$/;"	f	signature:()
is_v6	$RUST/src/net/socket_addr/tests.rs	/^fn is_v6() {$/;"	f	signature:()
is_verbatim	$RUST/src/path.rs	/^    pub fn is_verbatim(&self) -> bool {$/;"	P	implementation:Prefix	signature:(&self) -> bool
is_verbatim_sep	$RUST/src/sys/pal/sgx/path.rs	/^pub fn is_verbatim_sep(b: u8) -> bool {$/;"	f	signature:(b: u8) -> bool
is_verbatim_sep	$RUST/src/sys/pal/solid/path.rs	/^pub fn is_verbatim_sep(b: u8) -> bool {$/;"	f	signature:(b: u8) -> bool
is_verbatim_sep	$RUST/src/sys/pal/unix/path.rs	/^pub fn is_verbatim_sep(b: u8) -> bool {$/;"	f	signature:(b: u8) -> bool
is_write_locked	$RUST/src/sys/pal/unix/locks/futex_rwlock.rs	/^fn is_write_locked(state: u32) -> bool {$/;"	f	signature:(state: u32) -> bool
is_write_vectored	$RUST/src/fs.rs	/^    fn is_write_vectored(&self) -> bool {$/;"	P	implementation:File	signature:(&self) -> bool
is_write_vectored	$RUST/src/io/buffered/bufwriter.rs	/^    fn is_write_vectored(&self) -> bool {$/;"	P	implementation:BufWriter	signature:(&self) -> bool
is_write_vectored	$RUST/src/io/buffered/linewriter.rs	/^    fn is_write_vectored(&self) -> bool {$/;"	P	implementation:LineWriter	signature:(&self) -> bool
is_write_vectored	$RUST/src/io/buffered/linewritershim.rs	/^    fn is_write_vectored(&self) -> bool {$/;"	P	implementation:LineWriterShim	signature:(&self) -> bool
is_write_vectored	$RUST/src/io/buffered/tests.rs	/^        fn is_write_vectored(&self) -> bool {$/;"	P	implementation:line_vectored_partial_and_errors::Writer	signature:(&self) -> bool
is_write_vectored	$RUST/src/io/cursor.rs	/^    fn is_write_vectored(&self) -> bool {$/;"	f	signature:(&self) -> bool
is_write_vectored	$RUST/src/io/impls.rs	/^    fn is_write_vectored(&self) -> bool {$/;"	P	implementation:u8	signature:(&self) -> bool
is_write_vectored	$RUST/src/io/mod.rs	/^    fn is_write_vectored(&self) -> bool {$/;"	P	interface:Write	signature:(&self) -> bool
is_write_vectored	$RUST/src/io/stdio.rs	/^    fn is_write_vectored(&self) -> bool {$/;"	P	implementation:StdoutRaw	signature:(&self) -> bool
is_write_vectored	$RUST/src/io/util.rs	/^    fn is_write_vectored(&self) -> bool {$/;"	P	implementation:Sink	signature:(&self) -> bool
is_write_vectored	$RUST/src/net/tcp.rs	/^    fn is_write_vectored(&self) -> bool {$/;"	P	implementation:TcpStream	signature:(&self) -> bool
is_write_vectored	$RUST/src/os/unix/net/stream.rs	/^    fn is_write_vectored(&self) -> bool {$/;"	P	implementation:UnixStream	signature:(&self) -> bool
is_write_vectored	$RUST/src/process.rs	/^    fn is_write_vectored(&self) -> bool {$/;"	P	implementation:ChildStdin	signature:(&self) -> bool
is_write_vectored	$RUST/src/sys/pal/hermit/fs.rs	/^    pub fn is_write_vectored(&self) -> bool {$/;"	P	implementation:File	signature:(&self) -> bool
is_write_vectored	$RUST/src/sys/pal/hermit/net.rs	/^    pub fn is_write_vectored(&self) -> bool {$/;"	P	implementation:Socket	signature:(&self) -> bool
is_write_vectored	$RUST/src/sys/pal/hermit/stdio.rs	/^    fn is_write_vectored(&self) -> bool {$/;"	P	implementation:Stdout	signature:(&self) -> bool
is_write_vectored	$RUST/src/sys/pal/sgx/fd.rs	/^    pub fn is_write_vectored(&self) -> bool {$/;"	P	implementation:FileDesc	signature:(&self) -> bool
is_write_vectored	$RUST/src/sys/pal/sgx/net.rs	/^    pub fn is_write_vectored(&self) -> bool {$/;"	P	implementation:TcpStream	signature:(&self) -> bool
is_write_vectored	$RUST/src/sys/pal/solid/net.rs	/^    pub fn is_write_vectored(&self) -> bool {$/;"	P	implementation:Socket	signature:(&self) -> bool
is_write_vectored	$RUST/src/sys/pal/teeos/net.rs	/^    pub fn is_write_vectored(&self) -> bool {$/;"	P	implementation:TcpStream	signature:(&self) -> bool
is_write_vectored	$RUST/src/sys/pal/unix/fd.rs	/^    pub fn is_write_vectored(&self) -> bool {$/;"	P	implementation:FileDesc	signature:(&self) -> bool
is_write_vectored	$RUST/src/sys/pal/unix/fs.rs	/^    pub fn is_write_vectored(&self) -> bool {$/;"	P	implementation:File	signature:(&self) -> bool
is_write_vectored	$RUST/src/sys/pal/unix/l4re.rs	/^        pub fn is_write_vectored(&self) -> bool {$/;"	P	implementation:net::TcpStream	signature:(&self) -> bool
is_write_vectored	$RUST/src/sys/pal/unix/net.rs	/^    pub fn is_write_vectored(&self) -> bool {$/;"	P	implementation:Socket	signature:(&self) -> bool
is_write_vectored	$RUST/src/sys/pal/unix/pipe.rs	/^    pub fn is_write_vectored(&self) -> bool {$/;"	P	implementation:AnonPipe	signature:(&self) -> bool
is_write_vectored	$RUST/src/sys/pal/unix/stdio.rs	/^    fn is_write_vectored(&self) -> bool {$/;"	P	implementation:Stdout	signature:(&self) -> bool
is_write_vectored	$RUST/src/sys/pal/unsupported/fs.rs	/^    pub fn is_write_vectored(&self) -> bool {$/;"	P	implementation:File	signature:(&self) -> bool
is_write_vectored	$RUST/src/sys/pal/unsupported/net.rs	/^    pub fn is_write_vectored(&self) -> bool {$/;"	P	implementation:TcpStream	signature:(&self) -> bool
is_write_vectored	$RUST/src/sys/pal/unsupported/pipe.rs	/^    pub fn is_write_vectored(&self) -> bool {$/;"	P	implementation:AnonPipe	signature:(&self) -> bool
is_write_vectored	$RUST/src/sys/pal/wasi/fs.rs	/^    pub fn is_write_vectored(&self) -> bool {$/;"	P	implementation:File	signature:(&self) -> bool
is_write_vectored	$RUST/src/sys/pal/wasi/net.rs	/^    pub fn is_write_vectored(&self) -> bool {$/;"	P	implementation:TcpStream	signature:(&self) -> bool
is_write_vectored	$RUST/src/sys/pal/wasi/stdio.rs	/^    fn is_write_vectored(&self) -> bool {$/;"	P	implementation:Stdout	signature:(&self) -> bool
is_write_vectored	$RUST/src/sys/pal/windows/fs.rs	/^    pub fn is_write_vectored(&self) -> bool {$/;"	P	implementation:File	signature:(&self) -> bool
is_write_vectored	$RUST/src/sys/pal/windows/handle.rs	/^    pub fn is_write_vectored(&self) -> bool {$/;"	P	implementation:Handle	signature:(&self) -> bool
is_write_vectored	$RUST/src/sys/pal/windows/net.rs	/^    pub fn is_write_vectored(&self) -> bool {$/;"	P	implementation:Socket	signature:(&self) -> bool
is_write_vectored	$RUST/src/sys/pal/windows/pipe.rs	/^    pub fn is_write_vectored(&self) -> bool {$/;"	P	implementation:AnonPipe	signature:(&self) -> bool
is_write_vectored	$RUST/src/sys/pal/xous/net/tcpstream.rs	/^    pub fn is_write_vectored(&self) -> bool {$/;"	P	implementation:TcpStream	signature:(&self) -> bool
is_write_vectored	$RUST/src/sys_common/net.rs	/^    pub fn is_write_vectored(&self) -> bool {$/;"	P	implementation:TcpStream	signature:(&self) -> bool
is_zero	$RUST/src/sys/pal/windows/mod.rs	/^    fn is_zero(&self) -> bool;$/;"	P	interface:IsZero	signature:(&self) -> bool
is_zero_slow_path	$RUST/src/panicking.rs	/^    fn is_zero_slow_path() -> bool {$/;"	f	module:panic_count	signature:() -> bool
isemcnt	$RUST/src/sys/pal/itron/abi.rs	/^    pub isemcnt: uint_t,$/;"	m	struct:T_CSEM
issue_15761	$RUST/src/sync/mpsc/sync_tests.rs	/^fn issue_15761() {$/;"	f	signature:()
issue_32114	$RUST/src/sync/mpsc/tests.rs	/^fn issue_32114() {$/;"	f	signature:()
issue_39364	$RUST/src/sync/mpsc/tests.rs	/^fn issue_39364() {$/;"	f	signature:()
items	$RUST/src/sys/pal/unix/process/process_common.rs	/^    items: Vec<CString>,$/;"	m	struct:CStringArray
iter	$RUST/src/collections/hash/map.rs	/^    pub(super) fn iter(&self) -> Iter<'_, K, V> {$/;"	P	implementation:IterMut	signature:(&self) -> Iter<'_, K, V>
iter	$RUST/src/collections/hash/set.rs	/^    pub fn iter(&self) -> Iter<'_, T> {$/;"	P	implementation:HashSet	signature:(&self) -> Iter<'_, T>
iter	$RUST/src/os/unix/net/tests.rs	/^fn iter() {$/;"	f	signature:()
iter	$RUST/src/path.rs	/^    pub fn iter(&self) -> Iter<'_> {$/;"	P	implementation:Path	signature:(&self) -> Iter<'_>
iter	$RUST/src/sync/mpsc/mod.rs	/^    pub fn iter(&self) -> Iter<'_, T> {$/;"	P	implementation:Receiver	signature:(&self) -> Iter<'_, T>
iter	$RUST/src/sys/pal/hermit/args.rs	/^    iter: vec::IntoIter<OsString>,$/;"	m	struct:Args
iter	$RUST/src/sys/pal/hermit/os.rs	/^    iter: vec::IntoIter<(OsString, OsString)>,$/;"	m	struct:Env
iter	$RUST/src/sys/pal/sgx/abi/tls/sync_bitset.rs	/^    pub fn iter(&self) -> SyncBitsetIter<'_> {$/;"	P	implementation:SyncBitset	signature:(&self) -> SyncBitsetIter<'_>
iter	$RUST/src/sys/pal/sgx/abi/tls/sync_bitset/tests.rs	/^fn iter() {$/;"	f	signature:()
iter	$RUST/src/sys/pal/sgx/abi/usercalls/alloc.rs	/^    pub fn iter(&self) -> Iter<'_, T>$/;"	f	signature:(&self) -> Iter<'_, T> where T: UserSafe,
iter	$RUST/src/sys/pal/sgx/os.rs	/^    iter: vec::IntoIter<(OsString, OsString)>,$/;"	m	struct:Env
iter	$RUST/src/sys/pal/solid/os.rs	/^    iter: vec::IntoIter<(OsString, OsString)>,$/;"	m	struct:Env
iter	$RUST/src/sys/pal/unix/args.rs	/^    iter: vec::IntoIter<OsString>,$/;"	m	struct:Args
iter	$RUST/src/sys/pal/unix/os.rs	/^    iter: vec::IntoIter<(OsString, OsString)>,$/;"	m	struct:Env
iter	$RUST/src/sys/pal/unix/process/process_common.rs	/^    iter: crate::slice::Iter<'a, CString>,$/;"	m	struct:CommandArgs
iter	$RUST/src/sys/pal/wasi/args.rs	/^    iter: vec::IntoIter<OsString>,$/;"	m	struct:Args
iter	$RUST/src/sys/pal/wasi/os.rs	/^    iter: vec::IntoIter<(OsString, OsString)>,$/;"	m	struct:Env
iter	$RUST/src/sys/pal/windows/fs.rs	/^    fn iter(&self) -> DirBuffIter<'_> {$/;"	P	implementation:DirBuff	signature:(&self) -> DirBuffIter<'_>
iter	$RUST/src/sys/pal/windows/os.rs	/^    iter: EnvIterator,$/;"	m	struct:Env
iter	$RUST/src/sys/pal/windows/process.rs	/^    iter: crate::slice::Iter<'a, Arg>,$/;"	m	struct:CommandArgs
iter	$RUST/src/sys_common/process.rs	/^    pub fn iter(&self) -> CommandEnvs<'_> {$/;"	P	implementation:CommandEnv	signature:(&self) -> CommandEnvs<'_>
iter_after	$RUST/src/path.rs	/^fn iter_after<'a, 'b, I, J>(mut iter: I, mut prefix: J) -> Option<I>$/;"	f	signature:<'a, 'b, I, J>(mut iter: I, mut prefix: J) -> Option<I> where I: Iterator<Item = Component<'a>> + Clone, J: Iterator<Item = Component<'b>>,
iter_key	$RUST/src/collections/hash/map.rs	/^    fn iter_key<'a, 'new>(v: Iter<'a, &'static str, u8>) -> Iter<'a, &'new str, u8> {$/;"	f	function:assert_covariance	signature:<'a, 'new>(v: Iter<'a, &'static str, u8>) -> Iter<'a, &'new str, u8>
iter_mut	$RUST/src/collections/hash/map.rs	/^    pub fn iter_mut(&mut self) -> IterMut<'_, K, V> {$/;"	P	implementation:HashMap	signature:(&mut self) -> IterMut<'_, K, V>
iter_mut	$RUST/src/sys/pal/sgx/abi/usercalls/alloc.rs	/^    pub fn iter_mut(&mut self) -> IterMut<'_, T>$/;"	f	signature:(&mut self) -> IterMut<'_, T> where T: UserSafe,
iter_val	$RUST/src/collections/hash/map.rs	/^    fn iter_val<'a, 'new>(v: Iter<'a, u8, &'static str>) -> Iter<'a, u8, &'new str> {$/;"	f	function:assert_covariance	signature:<'a, 'new>(v: Iter<'a, u8, &'static str>) -> Iter<'a, u8, &'new str>
itron	$RUST/src/sys/pal/solid/mod.rs	/^mod itron {$/;"	n
itskpri	$RUST/src/sys/pal/itron/abi.rs	/^    pub itskpri: PRI,$/;"	m	struct:T_CTSK
join	$RUST/src/ffi/os_str.rs	/^    fn join(slice: &Self, sep: &OsStr) -> OsString {$/;"	P	implementation:S	signature:(slice: &Self, sep: &OsStr) -> OsString
join	$RUST/src/path.rs	/^    pub fn join<P: AsRef<Path>>(&self, path: P) -> PathBuf {$/;"	P	implementation:Path	signature:<P: AsRef<Path>>(&self, path: P) -> PathBuf
join	$RUST/src/sys/pal/hermit/thread.rs	/^    pub fn join(self) {$/;"	P	implementation:Thread	signature:(self)
join	$RUST/src/sys/pal/itron/thread.rs	/^    pub fn join(self) {$/;"	P	implementation:Thread	signature:(self)
join	$RUST/src/sys/pal/sgx/thread.rs	/^    pub fn join(self) {$/;"	P	implementation:Thread	signature:(self)
join	$RUST/src/sys/pal/teeos/thread.rs	/^    pub fn join(self) {$/;"	P	implementation:Thread	signature:(self)
join	$RUST/src/sys/pal/unix/thread.rs	/^    pub fn join(self) {$/;"	P	implementation:Thread	signature:(self)
join	$RUST/src/sys/pal/unsupported/thread.rs	/^    pub fn join(self) {$/;"	P	implementation:Thread	signature:(self)
join	$RUST/src/sys/pal/wasi/thread.rs	/^    pub fn join(self) {$/;"	P	implementation:Thread	signature:(self)
join	$RUST/src/sys/pal/wasm/atomics/thread.rs	/^    pub fn join(self) {}$/;"	P	implementation:Thread	signature:(self)
join	$RUST/src/sys/pal/windows/thread.rs	/^    pub fn join(self) {$/;"	P	implementation:Thread	signature:(self)
join	$RUST/src/sys/pal/xous/thread.rs	/^    pub fn join(self) {$/;"	P	implementation:Thread	signature:(self)
join	$RUST/src/sys_common/io.rs	/^        pub fn join(&self, path: &str) -> PathBuf {$/;"	P	implementation:test::TempDir	signature:(&self, path: &str) -> PathBuf
join	$RUST/src/thread/mod.rs	/^    pub fn join(self) -> Result<T> {$/;"	P	implementation:JoinHandle	signature:(self) -> Result<T>
join	$RUST/src/thread/scoped.rs	/^    pub fn join(self) -> Result<T> {$/;"	P	implementation:ScopedJoinHandle	signature:(self) -> Result<T>
join_multicast_v4	$RUST/src/net/udp.rs	/^    pub fn join_multicast_v4(&self, multiaddr: &Ipv4Addr, interface: &Ipv4Addr) -> io::Result<()/;"	P	implementation:UdpSocket	signature:(&self, multiaddr: &Ipv4Addr, interface: &Ipv4Addr) -> io::Result<()>
join_multicast_v4	$RUST/src/sys/pal/sgx/net.rs	/^    pub fn join_multicast_v4(&self, _: &Ipv4Addr, _: &Ipv4Addr) -> io::Result<()> {$/;"	P	implementation:UdpSocket	signature:(&self, _: &Ipv4Addr, _: &Ipv4Addr) -> io::Result<()>
join_multicast_v4	$RUST/src/sys/pal/teeos/net.rs	/^    pub fn join_multicast_v4(&self, _: &Ipv4Addr, _: &Ipv4Addr) -> io::Result<()> {$/;"	P	implementation:UdpSocket	signature:(&self, _: &Ipv4Addr, _: &Ipv4Addr) -> io::Result<()>
join_multicast_v4	$RUST/src/sys/pal/unix/l4re.rs	/^        pub fn join_multicast_v4(&self, _: &Ipv4Addr, _: &Ipv4Addr) -> io::Result<()> {$/;"	P	implementation:net::UdpSocket	signature:(&self, _: &Ipv4Addr, _: &Ipv4Addr) -> io::Result<()>
join_multicast_v4	$RUST/src/sys/pal/unsupported/net.rs	/^    pub fn join_multicast_v4(&self, _: &Ipv4Addr, _: &Ipv4Addr) -> io::Result<()> {$/;"	P	implementation:UdpSocket	signature:(&self, _: &Ipv4Addr, _: &Ipv4Addr) -> io::Result<()>
join_multicast_v4	$RUST/src/sys/pal/wasi/net.rs	/^    pub fn join_multicast_v4(&self, _: &Ipv4Addr, _: &Ipv4Addr) -> io::Result<()> {$/;"	P	implementation:UdpSocket	signature:(&self, _: &Ipv4Addr, _: &Ipv4Addr) -> io::Result<()>
join_multicast_v4	$RUST/src/sys/pal/xous/net/udp.rs	/^    pub fn join_multicast_v4(&self, _: &Ipv4Addr, _: &Ipv4Addr) -> io::Result<()> {$/;"	P	implementation:UdpSocket	signature:(&self, _: &Ipv4Addr, _: &Ipv4Addr) -> io::Result<()>
join_multicast_v4	$RUST/src/sys_common/net.rs	/^    pub fn join_multicast_v4(&self, multiaddr: &Ipv4Addr, interface: &Ipv4Addr) -> io::Result<()/;"	P	implementation:UdpSocket	signature:(&self, multiaddr: &Ipv4Addr, interface: &Ipv4Addr) -> io::Result<()>
join_multicast_v6	$RUST/src/net/udp.rs	/^    pub fn join_multicast_v6(&self, multiaddr: &Ipv6Addr, interface: u32) -> io::Result<()> {$/;"	P	implementation:UdpSocket	signature:(&self, multiaddr: &Ipv6Addr, interface: u32) -> io::Result<()>
join_multicast_v6	$RUST/src/sys/pal/sgx/net.rs	/^    pub fn join_multicast_v6(&self, _: &Ipv6Addr, _: u32) -> io::Result<()> {$/;"	P	implementation:UdpSocket	signature:(&self, _: &Ipv6Addr, _: u32) -> io::Result<()>
join_multicast_v6	$RUST/src/sys/pal/teeos/net.rs	/^    pub fn join_multicast_v6(&self, _: &Ipv6Addr, _: u32) -> io::Result<()> {$/;"	P	implementation:UdpSocket	signature:(&self, _: &Ipv6Addr, _: u32) -> io::Result<()>
join_multicast_v6	$RUST/src/sys/pal/unix/l4re.rs	/^        pub fn join_multicast_v6(&self, _: &Ipv6Addr, _: u32) -> io::Result<()> {$/;"	P	implementation:net::UdpSocket	signature:(&self, _: &Ipv6Addr, _: u32) -> io::Result<()>
join_multicast_v6	$RUST/src/sys/pal/unsupported/net.rs	/^    pub fn join_multicast_v6(&self, _: &Ipv6Addr, _: u32) -> io::Result<()> {$/;"	P	implementation:UdpSocket	signature:(&self, _: &Ipv6Addr, _: u32) -> io::Result<()>
join_multicast_v6	$RUST/src/sys/pal/wasi/net.rs	/^    pub fn join_multicast_v6(&self, _: &Ipv6Addr, _: u32) -> io::Result<()> {$/;"	P	implementation:UdpSocket	signature:(&self, _: &Ipv6Addr, _: u32) -> io::Result<()>
join_multicast_v6	$RUST/src/sys/pal/xous/net/udp.rs	/^    pub fn join_multicast_v6(&self, _: &Ipv6Addr, _: u32) -> io::Result<()> {$/;"	P	implementation:UdpSocket	signature:(&self, _: &Ipv6Addr, _: u32) -> io::Result<()>
join_multicast_v6	$RUST/src/sys_common/net.rs	/^    pub fn join_multicast_v6(&self, multiaddr: &Ipv6Addr, interface: u32) -> io::Result<()> {$/;"	P	implementation:UdpSocket	signature:(&self, multiaddr: &Ipv6Addr, interface: u32) -> io::Result<()>
join_orders_after_tls_destructors	$RUST/src/thread/local/tests.rs	/^fn join_orders_after_tls_destructors() {$/;"	f	signature:()
join_paths	$RUST/src/env.rs	/^pub fn join_paths<I, T>(paths: I) -> Result<OsString, JoinPathsError>$/;"	f	signature:<I, T>(paths: I) -> Result<OsString, JoinPathsError> where I: IntoIterator<Item = T>, T: AsRef<OsStr>,
join_paths	$RUST/src/sys/pal/hermit/os.rs	/^pub fn join_paths<I, T>(_paths: I) -> Result<OsString, JoinPathsError>$/;"	f	signature:<I, T>(_paths: I) -> Result<OsString, JoinPathsError> where I: Iterator<Item = T>, T: AsRef<OsStr>,
join_paths	$RUST/src/sys/pal/sgx/os.rs	/^pub fn join_paths<I, T>(_paths: I) -> Result<OsString, JoinPathsError>$/;"	f	signature:<I, T>(_paths: I) -> Result<OsString, JoinPathsError> where I: Iterator<Item = T>, T: AsRef<OsStr>,
join_paths	$RUST/src/sys/pal/solid/os.rs	/^pub fn join_paths<I, T>(_paths: I) -> Result<OsString, JoinPathsError>$/;"	f	signature:<I, T>(_paths: I) -> Result<OsString, JoinPathsError> where I: Iterator<Item = T>, T: AsRef<OsStr>,
join_paths	$RUST/src/sys/pal/teeos/os.rs	/^pub fn join_paths<I, T>(_paths: I) -> Result<OsString, JoinPathsError>$/;"	f	signature:<I, T>(_paths: I) -> Result<OsString, JoinPathsError> where I: Iterator<Item = T>, T: AsRef<OsStr>,
join_paths	$RUST/src/sys/pal/uefi/os.rs	/^pub fn join_paths<I, T>(_paths: I) -> Result<OsString, JoinPathsError>$/;"	f	signature:<I, T>(_paths: I) -> Result<OsString, JoinPathsError> where I: Iterator<Item = T>, T: AsRef<OsStr>,
join_paths	$RUST/src/sys/pal/unix/os.rs	/^pub fn join_paths<I, T>(paths: I) -> Result<OsString, JoinPathsError>$/;"	f	signature:<I, T>(paths: I) -> Result<OsString, JoinPathsError> where I: Iterator<Item = T>, T: AsRef<OsStr>,
join_paths	$RUST/src/sys/pal/unsupported/os.rs	/^pub fn join_paths<I, T>(_paths: I) -> Result<OsString, JoinPathsError>$/;"	f	signature:<I, T>(_paths: I) -> Result<OsString, JoinPathsError> where I: Iterator<Item = T>, T: AsRef<OsStr>,
join_paths	$RUST/src/sys/pal/wasi/os.rs	/^pub fn join_paths<I, T>(_paths: I) -> Result<OsString, JoinPathsError>$/;"	f	signature:<I, T>(_paths: I) -> Result<OsString, JoinPathsError> where I: Iterator<Item = T>, T: AsRef<OsStr>,
join_paths	$RUST/src/sys/pal/windows/os.rs	/^pub fn join_paths<I, T>(paths: I) -> Result<OsString, JoinPathsError>$/;"	f	signature:<I, T>(paths: I) -> Result<OsString, JoinPathsError> where I: Iterator<Item = T>, T: AsRef<OsStr>,
join_paths	$RUST/src/sys/pal/xous/os.rs	/^pub fn join_paths<I, T>(_paths: I) -> Result<OsString, JoinPathsError>$/;"	f	signature:<I, T>(_paths: I) -> Result<OsString, JoinPathsError> where I: Iterator<Item = T>, T: AsRef<OsStr>,
join_paths	$RUST/src/sys/pal/zkvm/os.rs	/^pub fn join_paths<I, T>(_paths: I) -> Result<OsString, JoinPathsError>$/;"	f	signature:<I, T>(_paths: I) -> Result<OsString, JoinPathsError> where I: Iterator<Item = T>, T: AsRef<OsStr>,
join_paths_unix	$RUST/src/env/tests.rs	/^fn join_paths_unix() {$/;"	f	signature:()
join_paths_windows	$RUST/src/env/tests.rs	/^fn join_paths_windows() {$/;"	f	signature:()
join_thread	$RUST/src/os/xous/ffi.rs	/^pub(crate) fn join_thread(thread_id: ThreadId) -> Result<usize, Error> {$/;"	f	signature:(thread_id: ThreadId) -> Result<usize, Error>
kernel_copy	$RUST/src/sys/pal/unix/mod.rs	/^pub mod kernel_copy;$/;"	n
key	$RUST/src/collections/hash/map.rs	/^    pub fn key(&self) -> &K {$/;"	P	implementation:VacantEntry	signature:(&self) -> &K
key	$RUST/src/sys/pal/common/thread_local/os_local.rs	/^    key: &'static Key<T>,$/;"	m	struct:Value
key	$RUST/src/sys/pal/windows/thread_local_key.rs	/^    unsafe fn key(&'static self) -> Key {$/;"	P	implementation:StaticKey	signature:(&'static self) -> Key
key	$RUST/src/sys/pal/xous/thread_local_key.rs	/^    key: Key,$/;"	m	struct:Node
key	$RUST/src/sys_common/thread_local_key.rs	/^    unsafe fn key(&self) -> imp::Key {$/;"	P	implementation:StaticKey	signature:(&self) -> imp::Key
key_mut	$RUST/src/collections/hash/map.rs	/^    pub fn key_mut(&mut self) -> &mut K {$/;"	P	implementation:RawOccupiedEntryMut	signature:(&mut self) -> &mut K
keyed_event_handle	$RUST/src/sys/pal/windows/thread_parking.rs	/^fn keyed_event_handle() -> c::HANDLE {$/;"	f	signature:() -> c::HANDLE
keys	$RUST/src/collections/hash/map.rs	/^    pub fn keys(&self) -> Keys<'_, K, V> {$/;"	P	implementation:HashMap	signature:(&self) -> Keys<'_, K, V>
keys_key	$RUST/src/collections/hash/map.rs	/^    fn keys_key<'a, 'new>(v: Keys<'a, &'static str, u8>) -> Keys<'a, &'new str, u8> {$/;"	f	function:assert_covariance	signature:<'a, 'new>(v: Keys<'a, &'static str, u8>) -> Keys<'a, &'new str, u8>
keys_val	$RUST/src/collections/hash/map.rs	/^    fn keys_val<'a, 'new>(v: Keys<'a, u8, &'static str>) -> Keys<'a, u8, &'new str> {$/;"	f	function:assert_covariance	signature:<'a, 'new>(v: Keys<'a, u8, &'static str>) -> Keys<'a, u8, &'new str>
kill	$RUST/src/process.rs	/^    pub fn kill(&mut self) -> io::Result<()> {$/;"	P	implementation:Child	signature:(&mut self) -> io::Result<()>
kill	$RUST/src/sys/pal/unix/process/process_fuchsia.rs	/^    pub fn kill(&mut self) -> io::Result<()> {$/;"	P	implementation:Process	signature:(&mut self) -> io::Result<()>
kill	$RUST/src/sys/pal/unix/process/process_unix.rs	/^    pub fn kill(&mut self) -> io::Result<()> {$/;"	P	implementation:Process	signature:(&mut self) -> io::Result<()>
kill	$RUST/src/sys/pal/unix/process/process_unsupported.rs	/^    pub fn kill(&mut self) -> io::Result<()> {$/;"	P	implementation:Process	signature:(&mut self) -> io::Result<()>
kill	$RUST/src/sys/pal/unix/process/process_vxworks.rs	/^    pub fn kill(&mut self) -> io::Result<()> {$/;"	P	implementation:Process	signature:(&mut self) -> io::Result<()>
kill	$RUST/src/sys/pal/unsupported/process.rs	/^    pub fn kill(&mut self) -> io::Result<()> {$/;"	P	implementation:Process	signature:(&mut self) -> io::Result<()>
kill	$RUST/src/sys/pal/windows/process.rs	/^    pub fn kill(&mut self) -> io::Result<()> {$/;"	P	implementation:Process	signature:(&mut self) -> io::Result<()>
kind	$RUST/src/io/error.rs	/^    pub fn kind(&self) -> ErrorKind {$/;"	P	implementation:Error	signature:(&self) -> ErrorKind
kind	$RUST/src/path.rs	/^    pub fn kind(&self) -> Prefix<'a> {$/;"	P	implementation:PrefixComponent	signature:(&self) -> Prefix<'a>
kind_from_prim	$RUST/src/io/error/repr_bitpacked.rs	/^fn kind_from_prim(ek: u32) -> Option<ErrorKind> {$/;"	f	signature:(ek: u32) -> Option<ErrorKind>
known_command	$RUST/src/process/tests.rs	/^fn known_command() -> Command {$/;"	f	signature:() -> Command
l4re	$RUST/src/os/mod.rs	/^pub mod l4re;$/;"	n
l4re	$RUST/src/sys/pal/unix/mod.rs	/^mod l4re;$/;"	n
l_linger	$RUST/src/sys/pal/solid/abi/sockets.rs	/^    pub l_linger: c_int,$/;"	m	struct:linger
l_linger	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub l_linger: u16,$/;"	m	struct:LINGER
l_onoff	$RUST/src/sys/pal/solid/abi/sockets.rs	/^    pub l_onoff: c_int,$/;"	m	struct:linger
l_onoff	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub l_onoff: u16,$/;"	m	struct:LINGER
lang_start	$RUST/src/rt.rs	/^fn lang_start<T: crate::process::Termination + 'static>($/;"	f	signature:<T: crate::process::Termination + 'static>( main: fn() -> T, argc: isize, argv: *const *const u8, sigpipe: u8, ) -> isize
lang_start_internal	$RUST/src/rt.rs	/^fn lang_start_internal($/;"	f	signature:( main: &(dyn Fn() -> i32 + Sync + crate::panic::RefUnwindSafe), argc: isize, argv: *const *const u8, sigpipe: u8, ) -> Result<isize, !>
last	$RUST/src/sys/pal/itron/condvar.rs	/^        last: NonNull<Waiter>,$/;"	m	struct:waiter_queue::ListHead
last_access_time	$RUST/src/os/windows/fs.rs	/^    fn last_access_time(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
last_access_time	$RUST/src/sys/pal/windows/fs.rs	/^    last_access_time: c::FILETIME,$/;"	m	struct:FileAttr
last_error	$RUST/src/os/windows/io/socket.rs	/^fn last_error() -> io::Error {$/;"	f	signature:() -> io::Error
last_error	$RUST/src/sys/pal/solid/net.rs	/^fn last_error() -> io::Error {$/;"	f	signature:() -> io::Error
last_error	$RUST/src/sys/pal/windows/net.rs	/^fn last_error() -> io::Error {$/;"	f	signature:() -> io::Error
last_os_error	$RUST/src/io/error.rs	/^    pub fn last_os_error() -> Error {$/;"	P	implementation:Error	signature:() -> Error
last_write_time	$RUST/src/os/windows/fs.rs	/^    fn last_write_time(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
last_write_time	$RUST/src/sys/pal/windows/fs.rs	/^    last_write_time: c::FILETIME,$/;"	m	struct:FileAttr
launch_thread	$RUST/src/sys/pal/sgx/abi/usercalls/mod.rs	/^pub unsafe fn launch_thread() -> IoResult<()> {$/;"	f	signature:() -> IoResult<()>
lazy	$RUST/src/sys/pal/common/thread_local/mod.rs	/^mod lazy {$/;"	n
lazy_box	$RUST/src/sys_common/mod.rs	/^pub mod lazy_box;$/;"	n
lazy_default	$RUST/src/sync/lazy_lock/tests.rs	/^fn lazy_default() {$/;"	f	signature:()
lazy_init	$RUST/src/sys_common/thread_local_key.rs	/^    unsafe fn lazy_init(&self) -> usize {$/;"	P	implementation:StaticKey	signature:(&self) -> usize
lazy_lock	$RUST/src/sync/mod.rs	/^mod lazy_lock;$/;"	n
lazy_poisoning	$RUST/src/sync/lazy_lock/tests.rs	/^fn lazy_poisoning() {$/;"	f	signature:()
lazy_type_inference	$RUST/src/sync/lazy_lock/tests.rs	/^fn lazy_type_inference() {$/;"	f	signature:()
lchown	$RUST/src/os/unix/fs.rs	/^pub fn lchown<P: AsRef<Path>>(dir: P, uid: Option<u32>, gid: Option<u32>) -> io::Result<()> {$/;"	f	signature:<P: AsRef<Path>>(dir: P, uid: Option<u32>, gid: Option<u32>) -> io::Result<()>
lchown	$RUST/src/sys/pal/unix/fs.rs	/^pub fn lchown(path: &Path, uid: u32, gid: u32) -> io::Result<()> {$/;"	f	signature:(path: &Path, uid: u32, gid: u32) -> io::Result<()>
leave_multicast_v4	$RUST/src/net/udp.rs	/^    pub fn leave_multicast_v4(&self, multiaddr: &Ipv4Addr, interface: &Ipv4Addr) -> io::Result<(/;"	P	implementation:UdpSocket	signature:(&self, multiaddr: &Ipv4Addr, interface: &Ipv4Addr) -> io::Result<()>
leave_multicast_v4	$RUST/src/sys/pal/sgx/net.rs	/^    pub fn leave_multicast_v4(&self, _: &Ipv4Addr, _: &Ipv4Addr) -> io::Result<()> {$/;"	P	implementation:UdpSocket	signature:(&self, _: &Ipv4Addr, _: &Ipv4Addr) -> io::Result<()>
leave_multicast_v4	$RUST/src/sys/pal/teeos/net.rs	/^    pub fn leave_multicast_v4(&self, _: &Ipv4Addr, _: &Ipv4Addr) -> io::Result<()> {$/;"	P	implementation:UdpSocket	signature:(&self, _: &Ipv4Addr, _: &Ipv4Addr) -> io::Result<()>
leave_multicast_v4	$RUST/src/sys/pal/unix/l4re.rs	/^        pub fn leave_multicast_v4(&self, _: &Ipv4Addr, _: &Ipv4Addr) -> io::Result<()> {$/;"	P	implementation:net::UdpSocket	signature:(&self, _: &Ipv4Addr, _: &Ipv4Addr) -> io::Result<()>
leave_multicast_v4	$RUST/src/sys/pal/unsupported/net.rs	/^    pub fn leave_multicast_v4(&self, _: &Ipv4Addr, _: &Ipv4Addr) -> io::Result<()> {$/;"	P	implementation:UdpSocket	signature:(&self, _: &Ipv4Addr, _: &Ipv4Addr) -> io::Result<()>
leave_multicast_v4	$RUST/src/sys/pal/wasi/net.rs	/^    pub fn leave_multicast_v4(&self, _: &Ipv4Addr, _: &Ipv4Addr) -> io::Result<()> {$/;"	P	implementation:UdpSocket	signature:(&self, _: &Ipv4Addr, _: &Ipv4Addr) -> io::Result<()>
leave_multicast_v4	$RUST/src/sys/pal/xous/net/udp.rs	/^    pub fn leave_multicast_v4(&self, _: &Ipv4Addr, _: &Ipv4Addr) -> io::Result<()> {$/;"	P	implementation:UdpSocket	signature:(&self, _: &Ipv4Addr, _: &Ipv4Addr) -> io::Result<()>
leave_multicast_v4	$RUST/src/sys_common/net.rs	/^    pub fn leave_multicast_v4(&self, multiaddr: &Ipv4Addr, interface: &Ipv4Addr) -> io::Result<(/;"	P	implementation:UdpSocket	signature:(&self, multiaddr: &Ipv4Addr, interface: &Ipv4Addr) -> io::Result<()>
leave_multicast_v6	$RUST/src/net/udp.rs	/^    pub fn leave_multicast_v6(&self, multiaddr: &Ipv6Addr, interface: u32) -> io::Result<()> {$/;"	P	implementation:UdpSocket	signature:(&self, multiaddr: &Ipv6Addr, interface: u32) -> io::Result<()>
leave_multicast_v6	$RUST/src/sys/pal/sgx/net.rs	/^    pub fn leave_multicast_v6(&self, _: &Ipv6Addr, _: u32) -> io::Result<()> {$/;"	P	implementation:UdpSocket	signature:(&self, _: &Ipv6Addr, _: u32) -> io::Result<()>
leave_multicast_v6	$RUST/src/sys/pal/teeos/net.rs	/^    pub fn leave_multicast_v6(&self, _: &Ipv6Addr, _: u32) -> io::Result<()> {$/;"	P	implementation:UdpSocket	signature:(&self, _: &Ipv6Addr, _: u32) -> io::Result<()>
leave_multicast_v6	$RUST/src/sys/pal/unix/l4re.rs	/^        pub fn leave_multicast_v6(&self, _: &Ipv6Addr, _: u32) -> io::Result<()> {$/;"	P	implementation:net::UdpSocket	signature:(&self, _: &Ipv6Addr, _: u32) -> io::Result<()>
leave_multicast_v6	$RUST/src/sys/pal/unsupported/net.rs	/^    pub fn leave_multicast_v6(&self, _: &Ipv6Addr, _: u32) -> io::Result<()> {$/;"	P	implementation:UdpSocket	signature:(&self, _: &Ipv6Addr, _: u32) -> io::Result<()>
leave_multicast_v6	$RUST/src/sys/pal/wasi/net.rs	/^    pub fn leave_multicast_v6(&self, _: &Ipv6Addr, _: u32) -> io::Result<()> {$/;"	P	implementation:UdpSocket	signature:(&self, _: &Ipv6Addr, _: u32) -> io::Result<()>
leave_multicast_v6	$RUST/src/sys/pal/xous/net/udp.rs	/^    pub fn leave_multicast_v6(&self, _: &Ipv6Addr, _: u32) -> io::Result<()> {$/;"	P	implementation:UdpSocket	signature:(&self, _: &Ipv6Addr, _: u32) -> io::Result<()>
leave_multicast_v6	$RUST/src/sys_common/net.rs	/^    pub fn leave_multicast_v6(&self, multiaddr: &Ipv6Addr, interface: u32) -> io::Result<()> {$/;"	P	implementation:UdpSocket	signature:(&self, multiaddr: &Ipv6Addr, interface: u32) -> io::Result<()>
len	$RUST/src/collections/hash/map.rs	/^    pub fn len(&self) -> usize {$/;"	P	implementation:HashMap	signature:(&self) -> usize
len	$RUST/src/collections/hash/set.rs	/^    pub fn len(&self) -> usize {$/;"	P	implementation:HashSet	signature:(&self) -> usize
len	$RUST/src/env.rs	/^    fn len(&self) -> usize {$/;"	P	implementation:ArgsOs	signature:(&self) -> usize
len	$RUST/src/ffi/os_str.rs	/^    pub fn len(&self) -> usize {$/;"	P	implementation:OsStr	signature:(&self) -> usize
len	$RUST/src/fs.rs	/^    pub fn len(&self) -> u64 {$/;"	P	implementation:Metadata	signature:(&self) -> u64
len	$RUST/src/io/mod.rs	/^    len: usize,$/;"	m	struct:Guard
len	$RUST/src/os/unix/net/addr.rs	/^    pub(super) len: libc::socklen_t,$/;"	m	struct:SocketAddr
len	$RUST/src/os/unix/net/ancillary.rs	/^    pub fn len(&self) -> usize {$/;"	P	implementation:SocketAncillary	signature:(&self) -> usize
len	$RUST/src/path.rs	/^    fn len(&self) -> usize {$/;"	P	implementation:Prefix	signature:(&self) -> usize
len	$RUST/src/process.rs	/^    fn len(&self) -> usize {$/;"	P	implementation:CommandArgs	signature:(&self) -> usize
len	$RUST/src/sync/mpmc/array.rs	/^    pub(crate) fn len(&self) -> usize {$/;"	P	implementation:Channel	signature:(&self) -> usize
len	$RUST/src/sync/mpmc/list.rs	/^    pub(crate) fn len(&self) -> usize {$/;"	P	implementation:Channel	signature:(&self) -> usize
len	$RUST/src/sync/mpmc/mod.rs	/^    pub fn len(&self) -> usize {$/;"	P	implementation:Sender	signature:(&self) -> usize
len	$RUST/src/sync/mpmc/zero.rs	/^    pub(crate) fn len(&self) -> usize {$/;"	P	implementation:Channel	signature:(&self) -> usize
len	$RUST/src/sys/pal/hermit/args.rs	/^    fn len(&self) -> usize {$/;"	P	implementation:Args	signature:(&self) -> usize
len	$RUST/src/sys/pal/sgx/abi/usercalls/alloc.rs	/^    pub fn len(&self) -> usize {$/;"	f	signature:(&self) -> usize
len	$RUST/src/sys/pal/sgx/args.rs	/^    fn len(&self) -> usize {$/;"	P	implementation:Args	signature:(&self) -> usize
len	$RUST/src/sys/pal/uefi/args.rs	/^    fn len(&self) -> usize {$/;"	P	implementation:Args	signature:(&self) -> usize
len	$RUST/src/sys/pal/unix/args.rs	/^    fn len(&self) -> usize {$/;"	P	implementation:Args	signature:(&self) -> usize
len	$RUST/src/sys/pal/unix/process/process_common.rs	/^    fn len(&self) -> usize {$/;"	P	implementation:CommandArgs	signature:(&self) -> usize
len	$RUST/src/sys/pal/unsupported/args.rs	/^    fn len(&self) -> usize {$/;"	P	implementation:Args	signature:(&self) -> usize
len	$RUST/src/sys/pal/wasi/args.rs	/^    fn len(&self) -> usize {$/;"	P	implementation:Args	signature:(&self) -> usize
len	$RUST/src/sys/pal/windows/args.rs	/^    fn len(&self) -> usize {$/;"	P	implementation:Args	signature:(&self) -> usize
len	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub len: u32,$/;"	m	struct:WSABUF
len	$RUST/src/sys/pal/windows/process.rs	/^    fn len(&self) -> usize {$/;"	P	implementation:CommandArgs	signature:(&self) -> usize
len	$RUST/src/sys/pal/windows/stdio.rs	/^    len: u8,$/;"	m	struct:IncompleteUtf8
len	$RUST/src/sys/pal/zkvm/args.rs	/^    fn len(&self) -> usize {$/;"	P	implementation:Args	signature:(&self) -> usize
len	$RUST/src/sys_common/process.rs	/^    fn len(&self) -> usize {$/;"	P	implementation:CommandEnvs	signature:(&self) -> usize
len	$RUST/src/sys_common/wtf8.rs	/^    pub fn len(&self) -> usize {$/;"	P	implementation:Wtf8	signature:(&self) -> usize
len_before_body	$RUST/src/path.rs	/^    fn len_before_body(&self) -> usize {$/;"	P	implementation:Components	signature:(&self) -> usize
lend	$RUST/src/os/xous/ffi.rs	/^pub(crate) fn lend($/;"	f	signature:( connection: Connection, opcode: usize, data: &[u8], arg1: usize, arg2: usize, ) -> Result<(usize, usize), Error>
lend_impl	$RUST/src/os/xous/ffi.rs	/^fn lend_impl($/;"	f	signature:( connection: Connection, opcode: usize, data: &[u8], arg1: usize, arg2: usize, blocking: bool, ) -> Result<(usize, usize), Error>
lend_mut	$RUST/src/os/xous/ffi.rs	/^pub(crate) fn lend_mut($/;"	f	signature:( connection: Connection, opcode: usize, data: &mut [u8], arg1: usize, arg2: usize, ) -> Result<(usize, usize), Error>
lend_mut_impl	$RUST/src/os/xous/ffi.rs	/^fn lend_mut_impl($/;"	f	signature:( connection: Connection, opcode: usize, data: &mut [u8], arg1: usize, arg2: usize, blocking: bool, ) -> Result<(usize, usize), Error>
length	$RUST/src/os/unix/net/ancillary.rs	/^    length: usize,$/;"	m	struct:SocketAncillary
lengths	$RUST/src/io/buffered/tests.rs	/^    lengths: Vec<usize>,$/;"	m	struct:ShortReader
let_keyword	$RUST/src/keyword_docs.rs	/^mod let_keyword {}$/;"	n
lgamma_r	$RUST/src/sys/cmath/builtins.rs	/^    pub fn lgamma_r(n: f64, s: &mut i32) -> f64;$/;"	f	signature:(n: f64, s: &mut i32) -> f64
lgamma_r	$RUST/src/sys/cmath/windows.rs	/^    pub fn lgamma_r(n: c_double, s: &mut c_int) -> c_double;$/;"	f	signature:(n: c_double, s: &mut c_int) -> c_double
lgammaf_r	$RUST/src/sys/cmath/builtins.rs	/^    pub fn lgammaf_r(n: f32, s: &mut i32) -> f32;$/;"	f	signature:(n: f32, s: &mut i32) -> f32
lgammaf_r	$RUST/src/sys/cmath/windows.rs	/^    pub fn lgammaf_r(n: c_float, s: &mut c_int) -> c_float;$/;"	f	signature:(n: c_float, s: &mut c_int) -> c_float
libc	$RUST/src/os/android/fs.rs	/^        unsafe { &*(self.as_inner().as_inner() as *const libc::stat as *const raw::stat) }$/;"	C	method:Metadata::as_raw_stat
libc	$RUST/src/os/dragonfly/fs.rs	/^        unsafe { &*(self.as_inner().as_inner() as *const libc::stat as *const raw::stat) }$/;"	C	method:Metadata::as_raw_stat
libc	$RUST/src/os/emscripten/fs.rs	/^        unsafe { &*(self.as_inner().as_inner() as *const libc::stat64 as *const raw::stat) }$/;"	C	method:Metadata::as_raw_stat
libc	$RUST/src/os/espidf/fs.rs	/^        unsafe { &*(self.as_inner().as_inner() as *const libc::stat as *const raw::stat) }$/;"	C	method:Metadata::as_raw_stat
libc	$RUST/src/os/haiku/fs.rs	/^        unsafe { &*(self.as_inner().as_inner() as *const libc::stat as *const raw::stat) }$/;"	C	method:Metadata::as_raw_stat
libc	$RUST/src/os/illumos/fs.rs	/^        unsafe { &*(self.as_inner().as_inner() as *const libc::stat as *const raw::stat) }$/;"	C	method:Metadata::as_raw_stat
libc	$RUST/src/os/ios/fs.rs	/^        unsafe { &*(self.as_inner().as_inner() as *const libc::stat as *const raw::stat) }$/;"	C	method:Metadata::as_raw_stat
libc	$RUST/src/os/l4re/fs.rs	/^        unsafe { &*(self.as_inner().as_inner() as *const libc::stat64 as *const raw::stat) }$/;"	C	method:Metadata::as_raw_stat
libc	$RUST/src/os/linux/fs.rs	/^            &*(self.as_inner().as_inner() as *const libc::stat64 as *const raw::stat)$/;"	C	method:Metadata::as_raw_stat
libc	$RUST/src/os/macos/fs.rs	/^        unsafe { &*(self.as_inner().as_inner() as *const libc::stat as *const raw::stat) }$/;"	C	method:Metadata::as_raw_stat
libc	$RUST/src/os/netbsd/fs.rs	/^        unsafe { &*(self.as_inner().as_inner() as *const libc::stat as *const raw::stat) }$/;"	C	method:Metadata::as_raw_stat
libc	$RUST/src/os/openbsd/fs.rs	/^        unsafe { &*(self.as_inner().as_inner() as *const libc::stat as *const raw::stat) }$/;"	C	method:Metadata::as_raw_stat
libc	$RUST/src/os/redox/fs.rs	/^        unsafe { &*(self.as_inner().as_inner() as *const libc::stat as *const raw::stat) }$/;"	C	method:Metadata::as_raw_stat
libc	$RUST/src/os/solaris/fs.rs	/^        unsafe { &*(self.as_inner().as_inner() as *const libc::stat as *const raw::stat) }$/;"	C	method:Metadata::as_raw_stat
libc	$RUST/src/os/unix/net/addr.rs	/^mod libc {$/;"	n
libc	$RUST/src/os/unix/net/ancillary.rs	/^mod libc {$/;"	n
libc	$RUST/src/os/watchos/fs.rs	/^        unsafe { &*(self.as_inner().as_inner() as *const libc::stat as *const raw::stat) }$/;"	C	method:Metadata::as_raw_stat
libc	$RUST/src/sys/pal/solid/memchr.rs	/^            haystack.as_ptr() as *const libc::c_void,$/;"	C	function:memrchr
libc	$RUST/src/sys/pal/solid/os.rs	/^        let v = unsafe { libc::getenv(k.as_ptr()) } as *const libc::c_char;$/;"	C	function:getenv
libc	$RUST/src/sys/pal/unix/args.rs	/^                let ptr = *argv.offset(i) as *const libc::c_char;$/;"	C	function:imp::clone
libc	$RUST/src/sys/pal/unix/fd.rs	/^                bufs.as_ptr() as *const libc::iovec,$/;"	C	method:FileDesc::write_vectored_at
libc	$RUST/src/sys/pal/unix/futex.rs	/^            timespec.as_ref().map_or(null(), |t| t as *const libc::timespec),$/;"	C	function:futex_wait
libc	$RUST/src/sys/pal/unix/memchr.rs	/^            haystack.as_ptr() as *const libc::c_void,$/;"	C	function:memchr
libc	$RUST/src/sys/pal/unix/os.rs	/^        let v = unsafe { libc::getenv(k.as_ptr()) } as *const libc::c_char;$/;"	C	function:getenv
libc	$RUST/src/sys/pal/unix/thread.rs	/^                name.as_ptr() as *const libc::c_void,$/;"	C	method:Thread::set_name
libc	$RUST/src/sys/pal/wasi/os.rs	/^mod libc {$/;"	n
lifecycle	$RUST/src/sys/pal/itron/thread.rs	/^    lifecycle: AtomicUsize,$/;"	m	struct:ThreadInner
lifetime	$RUST/src/sys_common/wstr.rs	/^    lifetime: PhantomData<&'a [u16]>,$/;"	m	struct:WStrUnits
limit	$RUST/src/io/mod.rs	/^    pub fn limit(&self) -> u64 {$/;"	P	implementation:Take	signature:(&self) -> u64
limit_vector_count	$RUST/src/sys/pal/unix/fd/tests.rs	/^fn limit_vector_count() {$/;"	f	signature:()
line_buffer_write0_error	$RUST/src/io/buffered/tests.rs	/^fn line_buffer_write0_error() {$/;"	f	signature:()
line_buffer_write0_normal	$RUST/src/io/buffered/tests.rs	/^fn line_buffer_write0_normal() {$/;"	f	signature:()
line_long_tail_not_flushed	$RUST/src/io/buffered/tests.rs	/^fn line_long_tail_not_flushed() {$/;"	f	signature:()
line_vectored	$RUST/src/io/buffered/tests.rs	/^fn line_vectored() {$/;"	f	signature:()
line_vectored_ignored	$RUST/src/io/buffered/tests.rs	/^fn line_vectored_ignored() {$/;"	f	signature:()
line_vectored_partial_and_errors	$RUST/src/io/buffered/tests.rs	/^fn line_vectored_partial_and_errors() {$/;"	f	signature:()
line_write_all	$RUST/src/io/buffered/tests.rs	/^fn line_write_all() {$/;"	f	signature:()
line_write_all_error	$RUST/src/io/buffered/tests.rs	/^fn line_write_all_error() {$/;"	f	signature:()
lineno	$RUST/src/backtrace.rs	/^    lineno: Option<u32>,$/;"	m	struct:BacktraceSymbol
lines	$RUST/src/io/mod.rs	/^    fn lines(self) -> Lines<Self>$/;"	P	interface:BufRead	signature:(self) -> Lines<Self> where Self: Sized,
lines	$RUST/src/io/stdio.rs	/^    pub fn lines(self) -> Lines<StdinLock<'static>> {$/;"	P	implementation:Stdin	signature:(self) -> Lines<StdinLock<'static>>
lines	$RUST/src/io/tests.rs	/^fn lines() {$/;"	f	signature:()
linewriter	$RUST/src/io/buffered/mod.rs	/^mod linewriter;$/;"	n
linewritershim	$RUST/src/io/buffered/mod.rs	/^mod linewritershim;$/;"	n
linger	$RUST/src/net/tcp.rs	/^    pub fn linger(&self) -> io::Result<Option<Duration>> {$/;"	P	implementation:TcpStream	signature:(&self) -> io::Result<Option<Duration>>
linger	$RUST/src/net/tcp/tests.rs	/^fn linger() {$/;"	f	signature:()
linger	$RUST/src/sys/pal/hermit/net.rs	/^    pub fn linger(&self) -> io::Result<Option<Duration>> {$/;"	P	implementation:Socket	signature:(&self) -> io::Result<Option<Duration>>
linger	$RUST/src/sys/pal/sgx/net.rs	/^    pub fn linger(&self) -> io::Result<Option<Duration>> {$/;"	P	implementation:TcpStream	signature:(&self) -> io::Result<Option<Duration>>
linger	$RUST/src/sys/pal/solid/abi/sockets.rs	/^pub struct linger {$/;"	s
linger	$RUST/src/sys/pal/solid/net.rs	/^    pub fn linger(&self) -> io::Result<Option<Duration>> {$/;"	P	implementation:Socket	signature:(&self) -> io::Result<Option<Duration>>
linger	$RUST/src/sys/pal/teeos/net.rs	/^    pub fn linger(&self) -> io::Result<Option<Duration>> {$/;"	P	implementation:TcpStream	signature:(&self) -> io::Result<Option<Duration>>
linger	$RUST/src/sys/pal/unix/l4re.rs	/^        pub fn linger(&self) -> io::Result<Option<Duration>> {$/;"	P	implementation:net::TcpStream	signature:(&self) -> io::Result<Option<Duration>>
linger	$RUST/src/sys/pal/unix/net.rs	/^    pub fn linger(&self) -> io::Result<Option<Duration>> {$/;"	P	implementation:Socket	signature:(&self) -> io::Result<Option<Duration>>
linger	$RUST/src/sys/pal/unsupported/net.rs	/^    pub fn linger(&self) -> io::Result<Option<Duration>> {$/;"	P	implementation:TcpStream	signature:(&self) -> io::Result<Option<Duration>>
linger	$RUST/src/sys/pal/wasi/net.rs	/^    pub fn linger(&self) -> io::Result<Option<Duration>> {$/;"	P	implementation:TcpStream	signature:(&self) -> io::Result<Option<Duration>>
linger	$RUST/src/sys/pal/windows/net.rs	/^    pub fn linger(&self) -> io::Result<Option<Duration>> {$/;"	P	implementation:Socket	signature:(&self) -> io::Result<Option<Duration>>
linger	$RUST/src/sys/pal/xous/net/tcpstream.rs	/^    pub fn linger(&self) -> io::Result<Option<Duration>> {$/;"	P	implementation:TcpStream	signature:(&self) -> io::Result<Option<Duration>>
linger	$RUST/src/sys_common/net.rs	/^    pub fn linger(&self) -> io::Result<Option<Duration>> {$/;"	P	implementation:TcpStream	signature:(&self) -> io::Result<Option<Duration>>
link	$RUST/src/os/wasi/fs.rs	/^pub fn link<P: AsRef<Path>, U: AsRef<Path>>($/;"	f	signature:<P: AsRef<Path>, U: AsRef<Path>>( old_fd: &File, old_flags: u32, old_path: P, new_fd: &File, new_path: U, ) -> io::Result<()>
link	$RUST/src/sys/pal/hermit/fs.rs	/^pub fn link(_original: &Path, _link: &Path) -> io::Result<()> {$/;"	f	signature:(_original: &Path, _link: &Path) -> io::Result<()>
link	$RUST/src/sys/pal/unix/fs.rs	/^pub fn link(original: &Path, link: &Path) -> io::Result<()> {$/;"	f	signature:(original: &Path, link: &Path) -> io::Result<()>
link	$RUST/src/sys/pal/unsupported/fs.rs	/^pub fn link(_src: &Path, _dst: &Path) -> io::Result<()> {$/;"	f	signature:(_src: &Path, _dst: &Path) -> io::Result<()>
link	$RUST/src/sys/pal/wasi/fd.rs	/^    pub fn link($/;"	P	implementation:WasiFd	signature:( &self, old_flags: wasi::Lookupflags, old_path: &str, new_fd: &WasiFd, new_path: &str, ) -> io::Result<()>
link	$RUST/src/sys/pal/wasi/fs.rs	/^pub fn link(original: &Path, link: &Path) -> io::Result<()> {$/;"	f	signature:(original: &Path, link: &Path) -> io::Result<()>
link	$RUST/src/sys/pal/windows/fs.rs	/^pub fn link(original: &Path, link: &Path) -> io::Result<()> {$/;"	f	signature:(original: &Path, link: &Path) -> io::Result<()>
links_work	$RUST/src/fs/tests.rs	/^fn links_work() {$/;"	f	signature:()
linux	$RUST/src/os/mod.rs	/^pub mod linux;$/;"	n
linux_ext	$RUST/src/os/net/mod.rs	/^pub(super) mod linux_ext;$/;"	n
list	$RUST/src/sync/mpmc/mod.rs	/^mod list;$/;"	n
list	$RUST/src/sync/mpmc/select.rs	/^    pub(crate) list: super::list::ListToken,$/;"	m	struct:Token
listen	$RUST/src/sys/pal/solid/abi/sockets.rs	/^    pub fn listen(s: c_int, backlog: c_int) -> c_int;$/;"	f	signature:(s: c_int, backlog: c_int) -> c_int
listen	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn listen(s: SOCKET, backlog: i32) -> i32;$/;"	f	signature:(s: SOCKET, backlog: i32) -> i32
listen_localhost	$RUST/src/net/tcp/tests.rs	/^fn listen_localhost() {$/;"	f	signature:()
listener	$RUST/src/net/tcp.rs	/^    listener: TcpListener,$/;"	m	struct:IntoIncoming
listener	$RUST/src/os/unix/net/listener.rs	/^    listener: &'a UnixListener,$/;"	m	struct:Incoming
listener	$RUST/src/os/unix/net/mod.rs	/^mod listener;$/;"	n
ln_1p	$RUST/src/f32.rs	/^    pub fn ln_1p(self) -> f32 {$/;"	P	implementation:f32	signature:(self) -> f32
ln_1p	$RUST/src/f64.rs	/^    pub fn ln_1p(self) -> f64 {$/;"	P	implementation:f64	signature:(self) -> f64
ln_gamma	$RUST/src/f32.rs	/^    pub fn ln_gamma(self) -> (f32, i32) {$/;"	P	implementation:f32	signature:(self) -> (f32, i32)
ln_gamma	$RUST/src/f64.rs	/^    pub fn ln_gamma(self) -> (f64, i32) {$/;"	P	implementation:f64	signature:(self) -> (f64, i32)
load_synch_functions	$RUST/src/sys/pal/windows/compat.rs	/^pub(super) fn load_synch_functions() {$/;"	f	signature:()
load_tcsls_flag_secondary_bool	$RUST/src/sys/pal/sgx/abi/entry.S	/^.macro load_tcsls_flag_secondary_bool reg:req comments:vararg$/;"	m	signature:reg:req comments:vararg
loc_mtx	$RUST/src/sys/pal/itron/abi.rs	/^    pub fn loc_mtx(mtxid: ID) -> ER;$/;"	f	signature:(mtxid: ID) -> ER
local	$RUST/src/sys/pal/xous/net/tcplistener.rs	/^    local: SocketAddr,$/;"	m	struct:TcpListener
local	$RUST/src/sys/pal/xous/net/udp.rs	/^    local: SocketAddr,$/;"	m	struct:UdpSocket
local	$RUST/src/thread/mod.rs	/^mod local;$/;"	n
local_addr	$RUST/src/net/tcp.rs	/^    pub fn local_addr(&self) -> io::Result<SocketAddr> {$/;"	P	implementation:TcpStream	signature:(&self) -> io::Result<SocketAddr>
local_addr	$RUST/src/net/udp.rs	/^    pub fn local_addr(&self) -> io::Result<SocketAddr> {$/;"	P	implementation:UdpSocket	signature:(&self) -> io::Result<SocketAddr>
local_addr	$RUST/src/os/fortanix_sgx/io.rs	/^    pub local_addr: Option<String>,$/;"	m	struct:TcpStreamMetadata
local_addr	$RUST/src/os/unix/net/datagram.rs	/^    pub fn local_addr(&self) -> io::Result<SocketAddr> {$/;"	P	implementation:UnixDatagram	signature:(&self) -> io::Result<SocketAddr>
local_addr	$RUST/src/os/unix/net/listener.rs	/^    pub fn local_addr(&self) -> io::Result<SocketAddr> {$/;"	P	implementation:UnixListener	signature:(&self) -> io::Result<SocketAddr>
local_addr	$RUST/src/os/unix/net/stream.rs	/^    pub fn local_addr(&self) -> io::Result<SocketAddr> {$/;"	P	implementation:UnixStream	signature:(&self) -> io::Result<SocketAddr>
local_addr	$RUST/src/sys/pal/sgx/net.rs	/^    local_addr: Option<String>,$/;"	m	struct:Socket
local_fd	$RUST/src/sys/pal/unix/process/zircon.rs	/^    pub local_fd: i32,$/;"	m	struct:fdio_spawn_action_t
local_port	$RUST/src/sys/pal/xous/net/tcpstream.rs	/^    local_port: u16,$/;"	m	struct:TcpStream
locate_handles	$RUST/src/sys/pal/uefi/helpers.rs	/^pub(crate) fn locate_handles(mut guid: Guid) -> io::Result<Vec<NonNull<crate::ffi::c_void>>> {$/;"	f	signature:(mut guid: Guid) -> io::Result<Vec<NonNull<crate::ffi::c_void>>>
lock	$RUST/src/io/stdio.rs	/^    pub fn lock(&self) -> StdoutLock<'static> {$/;"	P	implementation:Stdout	signature:(&self) -> StdoutLock<'static>
lock	$RUST/src/io/stdio/tests.rs	/^    fn lock(&'a self) -> StdoutLock<'a> {$/;"	P	implementation:Stdout	signature:(&'a self) -> StdoutLock<'a>
lock	$RUST/src/sync/barrier.rs	/^    lock: Mutex<BarrierState>,$/;"	m	struct:Barrier
lock	$RUST/src/sync/mutex.rs	/^    pub fn lock(&self) -> LockResult<MutexGuard<'_, T>> {$/;"	P	implementation:Mutex	signature:(&self) -> LockResult<MutexGuard<'_, T>>
lock	$RUST/src/sync/remutex.rs	/^    pub fn lock(&self) -> ReentrantMutexGuard<'_, T> {$/;"	P	implementation:ReentrantMutex	signature:(&self) -> ReentrantMutexGuard<'_, T>
lock	$RUST/src/sync/rwlock.rs	/^    lock: &'a RwLock<T>,$/;"	m	struct:RwLockWriteGuard
lock	$RUST/src/sys/pal/itron/mutex.rs	/^    pub(super) fn lock(x: &'a Mutex) -> Self {$/;"	P	implementation:MutexGuard	signature:(x: &'a Mutex) -> Self
lock	$RUST/src/sys/pal/sgx/mutex.rs	/^    pub fn lock(&self) {$/;"	P	implementation:Mutex	signature:(&self)
lock	$RUST/src/sys/pal/sgx/thread.rs	/^    pub(super) fn lock() -> MutexGuard<'static, Vec<Task>> {$/;"	f	module:task_queue	signature:() -> MutexGuard<'static, Vec<Task>>
lock	$RUST/src/sys/pal/sgx/waitqueue/mod.rs	/^    lock: T,$/;"	m	struct:WaitVariable
lock	$RUST/src/sys/pal/sgx/waitqueue/spin_mutex.rs	/^    pub fn lock(&self) -> SpinMutexGuard<'_, T> {$/;"	P	implementation:SpinMutex	signature:(&self) -> SpinMutexGuard<'_, T>
lock	$RUST/src/sys/pal/unix/locks/fuchsia_mutex.rs	/^    pub fn lock(&self) {$/;"	P	implementation:Mutex	signature:(&self)
lock	$RUST/src/sys/pal/unix/locks/futex_mutex.rs	/^    pub fn lock(&self) {$/;"	P	implementation:Mutex	signature:(&self)
lock	$RUST/src/sys/pal/unix/locks/pthread_mutex.rs	/^    pub unsafe fn lock(&self) {$/;"	P	implementation:Mutex	signature:(&self)
lock	$RUST/src/sys/pal/unix/thread_parking/pthread.rs	/^unsafe fn lock(lock: *mut libc::pthread_mutex_t) {$/;"	f	signature:(lock: *mut libc::pthread_mutex_t)
lock	$RUST/src/sys/pal/unsupported/locks/mutex.rs	/^    pub fn lock(&self) {$/;"	P	implementation:Mutex	signature:(&self)
lock	$RUST/src/sys/pal/wasm/alloc.rs	/^mod lock {$/;"	n
lock	$RUST/src/sys/pal/windows/locks/mutex.rs	/^    pub fn lock(&self) {$/;"	P	implementation:Mutex	signature:(&self)
lock	$RUST/src/sys/pal/xous/alloc.rs	/^mod lock {$/;"	n
lock	$RUST/src/sys/pal/xous/locks/mutex.rs	/^    pub unsafe fn lock(&self) {$/;"	P	implementation:Mutex	signature:(&self)
lock	$RUST/src/sys_common/backtrace.rs	/^pub fn lock() -> impl Drop {$/;"	f	signature:() -> impl Drop
lock_contended	$RUST/src/sys/pal/unix/locks/futex_mutex.rs	/^    fn lock_contended(&self) {$/;"	P	implementation:Mutex	signature:(&self)
lock_contested	$RUST/src/sys/pal/unix/locks/fuchsia_mutex.rs	/^    unsafe fn lock_contested(&self, mut state: u32, thread_self: zx_handle_t) {$/;"	P	implementation:Mutex	signature:(&self, mut state: u32, thread_self: zx_handle_t)
lock_count	$RUST/src/sync/remutex.rs	/^    lock_count: UnsafeCell<u32>,$/;"	m	struct:ReentrantMutex
lock_var	$RUST/src/sys/pal/sgx/waitqueue/mod.rs	/^    pub fn lock_var(&self) -> &T {$/;"	P	implementation:WaitVariable	signature:(&self) -> &T
lock_var_mut	$RUST/src/sys/pal/sgx/waitqueue/mod.rs	/^    pub fn lock_var_mut(&mut self) -> &mut T {$/;"	P	implementation:WaitVariable	signature:(&mut self) -> &mut T
locked	$RUST/src/sys/pal/itron/spin.rs	/^    locked: AtomicBool,$/;"	m	struct:SpinMutex
locked	$RUST/src/sys/pal/unsupported/locks/mutex.rs	/^    locked: Cell<bool>,$/;"	m	struct:Mutex
locked	$RUST/src/sys/pal/xous/locks/mutex.rs	/^    locked: AtomicUsize,$/;"	m	struct:Mutex
locks	$RUST/src/sys/pal/hermit/mod.rs	/^pub mod locks {$/;"	n
locks	$RUST/src/sys/pal/sgx/mod.rs	/^pub mod locks {$/;"	n
locks	$RUST/src/sys/pal/solid/mod.rs	/^pub mod locks {$/;"	n
locks	$RUST/src/sys/pal/teeos/mod.rs	/^pub mod locks;$/;"	n
locks	$RUST/src/sys/pal/uefi/mod.rs	/^pub mod locks;$/;"	n
locks	$RUST/src/sys/pal/unix/mod.rs	/^pub mod locks;$/;"	n
locks	$RUST/src/sys/pal/unsupported/mod.rs	/^pub mod locks;$/;"	n
locks	$RUST/src/sys/pal/windows/mod.rs	/^pub mod locks;$/;"	n
locks	$RUST/src/sys/pal/xous/mod.rs	/^pub mod locks;$/;"	n
locks	$RUST/src/sys/pal/zkvm/mod.rs	/^pub mod locks;$/;"	n
log	$RUST/src/f32.rs	/^    pub fn log(self, base: f32) -> f32 {$/;"	P	implementation:f32	signature:(self, base: f32) -> f32
log	$RUST/src/f64.rs	/^    pub fn log(self, base: f64) -> f64 {$/;"	P	implementation:f64	signature:(self, base: f64) -> f64
log	$RUST/src/os/xous/services.rs	/^mod log;$/;"	n
log	$RUST/src/sys/pal/xous/stdio.rs	/^    log: Connection,$/;"	m	struct:PanicWriter
log10	$RUST/src/f32.rs	/^    pub fn log10(self) -> f32 {$/;"	P	implementation:f32	signature:(self) -> f32
log10	$RUST/src/f64.rs	/^    pub fn log10(self) -> f64 {$/;"	P	implementation:f64	signature:(self) -> f64
log1p	$RUST/src/sys/cmath/builtins.rs	/^    pub fn log1p(n: f64) -> f64;$/;"	f	signature:(n: f64) -> f64
log1p	$RUST/src/sys/cmath/windows.rs	/^    pub fn log1p(n: c_double) -> c_double;$/;"	f	signature:(n: c_double) -> c_double
log1pf	$RUST/src/sys/cmath/builtins.rs	/^    pub fn log1pf(n: f32) -> f32;$/;"	f	signature:(n: f32) -> f32
log1pf	$RUST/src/sys/cmath/windows.rs	/^    pub fn log1pf(n: c_float) -> c_float;$/;"	f	signature:(n: c_float) -> c_float
log2	$RUST/src/f32.rs	/^    pub fn log2(self) -> f32 {$/;"	P	implementation:f32	signature:(self) -> f32
log2	$RUST/src/f64.rs	/^    pub fn log2(self) -> f64 {$/;"	P	implementation:f64	signature:(self) -> f64
log2f32	$RUST/src/sys/pal/unix/android.rs	/^pub fn log2f32(f: f32) -> f32 {$/;"	f	signature:(f: f32) -> f32
log2f64	$RUST/src/sys/pal/unix/android.rs	/^pub fn log2f64(f: f64) -> f64 {$/;"	f	signature:(f: f64) -> f64
log_server	$RUST/src/os/xous/services/log.rs	/^pub(crate) fn log_server() -> Connection {$/;"	f	signature:() -> Connection
log_wrapper	$RUST/src/sys/pal/mod.rs	/^pub fn log_wrapper<F: Fn(f64) -> f64>(n: f64, log_fn: F) -> f64 {$/;"	f	signature:<F: Fn(f64) -> f64>(n: f64, log_fn: F) -> f64
long_line_flushed	$RUST/src/io/buffered/tests.rs	/^fn long_line_flushed() {$/;"	f	signature:()
long_path	$RUST/src/os/unix/net/tests.rs	/^fn long_path() {$/;"	f	signature:()
lookup	$RUST/src/sys/pal/xous/net/dns.rs	/^pub fn lookup(query: &str, port: u16) -> Result<LookupHost, DnsError> {$/;"	f	signature:(query: &str, port: u16) -> Result<LookupHost, DnsError>
lookup_flags	$RUST/src/os/wasi/fs.rs	/^    fn lookup_flags(&mut self, flags: u32) -> &mut Self;$/;"	P	interface:OpenOptionsExt	signature:(&mut self, flags: u32) -> &mut Self
lookup_flags	$RUST/src/sys/pal/wasi/fs.rs	/^    pub fn lookup_flags(&mut self, flags: wasi::Lookupflags) {$/;"	P	implementation:OpenOptions	signature:(&mut self, flags: wasi::Lookupflags)
loop_keyword	$RUST/src/keyword_docs.rs	/^mod loop_keyword {}$/;"	n
lots_and_lots	$RUST/src/sync/mutex/tests.rs	/^fn lots_and_lots() {$/;"	f	signature:()
lower_bound	$RUST/src/io/buffered/bufreader.rs	/^    fn lower_bound(&self) -> usize {$/;"	P	implementation:BufReader	signature:(&self) -> usize
lower_bound	$RUST/src/io/mod.rs	/^    fn lower_bound(&self) -> usize;$/;"	P	interface:SizeHint	signature:(&self) -> usize
lower_bound	$RUST/src/io/util.rs	/^    fn lower_bound(&self) -> usize {$/;"	P	implementation:Repeat	signature:(&self) -> usize
lpAttributeList	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub lpAttributeList: LPPROC_THREAD_ATTRIBUTE_LIST,$/;"	m	struct:STARTUPINFOEXW
lpDesktop	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub lpDesktop: PWSTR,$/;"	m	struct:STARTUPINFOW
lpMaximumApplicationAddress	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub lpMaximumApplicationAddress: *mut ::core::ffi::c_void,$/;"	m	struct:SYSTEM_INFO
lpMinimumApplicationAddress	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub lpMinimumApplicationAddress: *mut ::core::ffi::c_void,$/;"	m	struct:SYSTEM_INFO
lpReserved	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub lpReserved: PWSTR,$/;"	m	struct:STARTUPINFOW
lpReserved2	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub lpReserved2: *mut u8,$/;"	m	struct:STARTUPINFOW
lpSecurityDescriptor	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub lpSecurityDescriptor: *mut ::core::ffi::c_void,$/;"	m	struct:SECURITY_ATTRIBUTES
lpTitle	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub lpTitle: PWSTR,$/;"	m	struct:STARTUPINFOW
lpVendorInfo	$RUST/src/sys/pal/windows/c.rs	/^    pub lpVendorInfo: PSTR,$/;"	m	struct:WSADATA
lpVendorInfo	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub lpVendorInfo: PSTR,$/;"	m	struct:WSADATA
lpwstr	$RUST/src/sys_common/wstr.rs	/^    lpwstr: NonNull<u16>,$/;"	m	struct:WStrUnits
lstat	$RUST/src/sys/pal/hermit/fs.rs	/^pub fn lstat(_p: &Path) -> io::Result<FileAttr> {$/;"	f	signature:(_p: &Path) -> io::Result<FileAttr>
lstat	$RUST/src/sys/pal/unix/fs.rs	/^pub fn lstat(p: &Path) -> io::Result<FileAttr> {$/;"	f	signature:(p: &Path) -> io::Result<FileAttr>
lstat	$RUST/src/sys/pal/unsupported/fs.rs	/^pub fn lstat(_p: &Path) -> io::Result<FileAttr> {$/;"	f	signature:(_p: &Path) -> io::Result<FileAttr>
lstat	$RUST/src/sys/pal/wasi/fs.rs	/^pub fn lstat(p: &Path) -> io::Result<FileAttr> {$/;"	f	signature:(p: &Path) -> io::Result<FileAttr>
lstat	$RUST/src/sys/pal/windows/fs.rs	/^pub fn lstat(path: &Path) -> io::Result<FileAttr> {$/;"	f	signature:(path: &Path) -> io::Result<FileAttr>
macos	$RUST/src/os/mod.rs	/^pub mod macos;$/;"	n
macos_weak	$RUST/src/sys/pal/unix/fs.rs	/^    mod macos_weak {$/;"	n	module:remove_dir_impl
macros	$RUST/src/lib.rs	/^mod macros;$/;"	n
main	$RUST/build.rs	/^fn main() {$/;"	f	signature:()
main	$RUST/src/sys/pal/hermit/mod.rs	/^        fn main(argc: isize, argv: *const *const c_char) -> i32;$/;"	f	function:runtime_entry	signature:(argc: isize, argv: *const *const c_char) -> i32
main	$RUST/src/sys/pal/sgx/abi/mod.rs	/^            fn main(argc: isize, argv: *const *const u8) -> isize;$/;"	f	function:entry	signature:(argc: isize, argv: *const *const u8) -> isize
main	$RUST/src/sys/pal/xous/os.rs	/^        fn main() -> u32;$/;"	f	module:c_compat	signature:() -> u32
main_thread	$RUST/src/thread/scoped.rs	/^    main_thread: Thread,$/;"	m	struct:ScopeData
main_thread_handle	$RUST/src/os/windows/process.rs	/^    fn main_thread_handle(&self) -> BorrowedHandle<'_>;$/;"	P	interface:ChildExt	signature:(&self) -> BorrowedHandle<'_>
main_thread_handle	$RUST/src/sys/pal/windows/process.rs	/^    pub fn main_thread_handle(&self) -> BorrowedHandle<'_> {$/;"	P	implementation:Process	signature:(&self) -> BorrowedHandle<'_>
make_ascii_lowercase	$RUST/src/ascii.rs	/^    fn make_ascii_lowercase(&mut self);$/;"	P	interface:AsciiExt	signature:(&mut self)
make_ascii_lowercase	$RUST/src/ffi/os_str.rs	/^    pub fn make_ascii_lowercase(&mut self) {$/;"	P	implementation:OsStr	signature:(&mut self)
make_ascii_lowercase	$RUST/src/sys/os_str/bytes.rs	/^    pub fn make_ascii_lowercase(&mut self) {$/;"	P	implementation:Slice	signature:(&mut self)
make_ascii_lowercase	$RUST/src/sys/os_str/wtf8.rs	/^    pub fn make_ascii_lowercase(&mut self) {$/;"	P	implementation:Slice	signature:(&mut self)
make_ascii_lowercase	$RUST/src/sys_common/wtf8.rs	/^    pub fn make_ascii_lowercase(&mut self) {$/;"	P	implementation:Wtf8	signature:(&mut self)
make_ascii_uppercase	$RUST/src/ascii.rs	/^    fn make_ascii_uppercase(&mut self);$/;"	P	interface:AsciiExt	signature:(&mut self)
make_ascii_uppercase	$RUST/src/ffi/os_str.rs	/^    pub fn make_ascii_uppercase(&mut self) {$/;"	P	implementation:OsStr	signature:(&mut self)
make_ascii_uppercase	$RUST/src/sys/os_str/bytes.rs	/^    pub fn make_ascii_uppercase(&mut self) {$/;"	P	implementation:Slice	signature:(&mut self)
make_ascii_uppercase	$RUST/src/sys/os_str/wtf8.rs	/^    pub fn make_ascii_uppercase(&mut self) {$/;"	P	implementation:Slice	signature:(&mut self)
make_ascii_uppercase	$RUST/src/sys_common/wtf8.rs	/^    pub fn make_ascii_uppercase(&mut self) {$/;"	P	implementation:Wtf8	signature:(&mut self)
make_bat_command_line	$RUST/src/sys/pal/windows/args.rs	/^pub(crate) fn make_bat_command_line($/;"	f	signature:( script: &[u16], args: &[Arg], force_quotes: bool, ) -> io::Result<Vec<u16>>
make_command_line	$RUST/src/sys/pal/windows/process.rs	/^fn make_command_line(argv0: &OsStr, args: &[Arg], force_quotes: bool) -> io::Result<Vec<u16>> {$/;"	f	signature:(argv0: &OsStr, args: &[Arg], force_quotes: bool) -> io::Result<Vec<u16>>
make_dirp	$RUST/src/sys/pal/windows/process.rs	/^fn make_dirp(d: Option<&OsString>) -> io::Result<(*const u16, Vec<u16>)> {$/;"	f	signature:(d: Option<&OsString>) -> io::Result<(*const u16, Vec<u16>)>
make_envp	$RUST/src/sys/pal/windows/process.rs	/^fn make_envp(maybe_env: Option<BTreeMap<EnvKey, OsString>>) -> io::Result<(*mut c_void, Vec<u16>/;"	f	signature:(maybe_env: Option<BTreeMap<EnvKey, OsString>>) -> io::Result<(*mut c_void, Vec<u16>)>
make_handler	$RUST/src/sys/pal/unix/stack_overflow.rs	/^    pub unsafe fn make_handler() -> super::Handler {$/;"	f	module:imp	signature:() -> super::Handler
make_proc_thread_attribute_list	$RUST/src/sys/pal/windows/process.rs	/^fn make_proc_thread_attribute_list($/;"	f	signature:( attributes: &BTreeMap<usize, ProcThreadAttributeValue>, ) -> io::Result<ProcThreadAttributeList>
makes_pipe	$RUST/src/process.rs	/^    pub fn makes_pipe(&self) -> bool {$/;"	P	implementation:Stdio	signature:(&self) -> bool
map	$RUST/benches/hash/mod.rs	/^mod map;$/;"	n
map	$RUST/src/collections/hash/map.rs	/^    map: &'a mut HashMap<K, V, S>,$/;"	m	struct:RawEntryBuilderMut
map	$RUST/src/collections/hash/mod.rs	/^pub mod map;$/;"	n
map	$RUST/src/thread/local/dynamic_tests.rs	/^    fn map() -> RefCell<HashMap<i32, i32>> {$/;"	f	function:hashmap	signature:() -> RefCell<HashMap<i32, i32>>
map_entry	$RUST/src/collections/hash/map.rs	/^fn map_entry<'a, K: 'a, V: 'a>(raw: base::RustcEntry<'a, K, V>) -> Entry<'a, K, V> {$/;"	f	signature:<'a, K: 'a, V: 'a>(raw: base::RustcEntry<'a, K, V>) -> Entry<'a, K, V>
map_key	$RUST/src/collections/hash/map.rs	/^    fn map_key<'new>(v: HashMap<&'static str, u8>) -> HashMap<&'new str, u8> {$/;"	f	function:assert_covariance	signature:<'new>(v: HashMap<&'static str, u8>) -> HashMap<&'new str, u8>
map_memory	$RUST/src/os/xous/ffi.rs	/^pub(crate) unsafe fn map_memory<T>($/;"	f	signature:<T>( phys: Option<core::ptr::NonNull<T>>, virt: Option<core::ptr::NonNull<T>>, count: usize, flags: MemoryFlags, ) -> Result<&'static mut [T], Error>
map_raw_entry	$RUST/src/collections/hash/map.rs	/^fn map_raw_entry<'a, K: 'a, V: 'a, S: 'a>($/;"	f	signature:<'a, K: 'a, V: 'a, S: 'a>( raw: base::RawEntryMut<'a, K, V, S>, ) -> RawEntryMut<'a, K, V, S>
map_result	$RUST/src/sync/poison.rs	/^pub fn map_result<T, U, F>(result: LockResult<T>, f: F) -> LockResult<U>$/;"	f	signature:<T, U, F>(result: LockResult<T>, f: F) -> LockResult<U> where F: FnOnce(T) -> U,
map_try_reserve_error	$RUST/src/collections/hash/map.rs	/^pub(super) fn map_try_reserve_error(err: hashbrown::TryReserveError) -> TryReserveError {$/;"	f	signature:(err: hashbrown::TryReserveError) -> TryReserveError
map_val	$RUST/src/collections/hash/map.rs	/^    fn map_val<'new>(v: HashMap<u8, &'static str>) -> HashMap<u8, &'new str> {$/;"	f	function:assert_covariance	signature:<'new>(v: HashMap<u8, &'static str>) -> HashMap<u8, &'new str>
mark_bit	$RUST/src/sync/mpmc/array.rs	/^    mark_bit: usize,$/;"	m	struct:Channel
mark_contested	$RUST/src/sys/pal/unix/locks/fuchsia_mutex.rs	/^fn mark_contested(state: u32) -> u32 {$/;"	f	signature:(state: u32) -> u32
marker	$RUST/src/sys/pal/common/thread_local/os_local.rs	/^    marker: marker::PhantomData<Cell<T>>,$/;"	m	struct:Key
masked	$RUST/src/sys/pal/unix/fs.rs	/^    fn masked(&self) -> mode_t {$/;"	P	implementation:FileType	signature:(&self) -> mode_t
match_errno	$RUST/src/sys/pal/wasi/mod.rs	/^    macro_rules! match_errno {$/;"	M	function:decode_error_kind
match_keyword	$RUST/src/keyword_docs.rs	/^mod match_keyword {}$/;"	n
matches_begin	$RUST/src/sys_common/memchr/tests.rs	/^fn matches_begin() {$/;"	f	signature:()
matches_begin_reversed	$RUST/src/sys_common/memchr/tests.rs	/^fn matches_begin_reversed() {$/;"	f	signature:()
matches_end	$RUST/src/sys_common/memchr/tests.rs	/^fn matches_end() {$/;"	f	signature:()
matches_end_reversed	$RUST/src/sys_common/memchr/tests.rs	/^fn matches_end_reversed() {$/;"	f	signature:()
matches_nul	$RUST/src/sys_common/memchr/tests.rs	/^fn matches_nul() {$/;"	f	signature:()
matches_nul_reversed	$RUST/src/sys_common/memchr/tests.rs	/^fn matches_nul_reversed() {$/;"	f	signature:()
matches_one	$RUST/src/sys_common/memchr/tests.rs	/^fn matches_one() {$/;"	f	signature:()
matches_one_reversed	$RUST/src/sys_common/memchr/tests.rs	/^fn matches_one_reversed() {$/;"	f	signature:()
matches_past_nul	$RUST/src/sys_common/memchr/tests.rs	/^fn matches_past_nul() {$/;"	f	signature:()
matches_past_nul_reversed	$RUST/src/sys_common/memchr/tests.rs	/^fn matches_past_nul_reversed() {$/;"	f	signature:()
max_iov	$RUST/src/sys/pal/solid/net.rs	/^const fn max_iov() -> usize {$/;"	f	signature:() -> usize
max_iov	$RUST/src/sys/pal/unix/fd.rs	/^const fn max_iov() -> usize {$/;"	f	signature:() -> usize
max_subnorm	$RUST/src/f32/tests.rs	/^    fn max_subnorm() -> f32 {$/;"	f	function:test_total_cmp	signature:() -> f32
max_subnorm	$RUST/src/f64/tests.rs	/^    fn max_subnorm() -> f64 {$/;"	f	function:test_total_cmp	signature:() -> f64
max_writes	$RUST/src/io/buffered/tests.rs	/^    pub max_writes: Option<usize>,$/;"	m	struct:ProgrammableSink
maxsem	$RUST/src/sys/pal/itron/abi.rs	/^    pub maxsem: uint_t,$/;"	m	struct:T_CSEM
maybe_args	$RUST/src/sys/pal/wasi/args.rs	/^fn maybe_args() -> Option<Vec<OsString>> {$/;"	f	signature:() -> Option<Vec<OsString>>
maybe_fifo	$RUST/src/sys/pal/unix/kernel_copy.rs	/^    fn maybe_fifo(&self) -> bool {$/;"	P	implementation:FdMeta	signature:(&self) -> bool
maybe_saw_path	$RUST/src/sys_common/process.rs	/^    fn maybe_saw_path(&mut self, key: &EnvKey) {$/;"	P	implementation:CommandEnv	signature:(&mut self, key: &EnvKey)
mem	$RUST/src/os/fortanix_sgx/mod.rs	/^pub mod mem {$/;"	n
mem	$RUST/src/sys/pal/sgx/abi/mod.rs	/^pub mod mem;$/;"	n
memchr	$RUST/src/sys/pal/hermit/mod.rs	/^pub mod memchr;$/;"	n
memchr	$RUST/src/sys/pal/sgx/mod.rs	/^pub mod memchr;$/;"	n
memchr	$RUST/src/sys/pal/solid/memchr.rs	/^pub fn memchr(needle: u8, haystack: &[u8]) -> Option<usize> {$/;"	f	signature:(needle: u8, haystack: &[u8]) -> Option<usize>
memchr	$RUST/src/sys/pal/solid/mod.rs	/^pub mod memchr;$/;"	n
memchr	$RUST/src/sys/pal/teeos/mod.rs	/^pub mod memchr;$/;"	n
memchr	$RUST/src/sys/pal/uefi/mod.rs	/^pub mod memchr {$/;"	n
memchr	$RUST/src/sys/pal/unix/memchr.rs	/^pub fn memchr(needle: u8, haystack: &[u8]) -> Option<usize> {$/;"	f	signature:(needle: u8, haystack: &[u8]) -> Option<usize>
memchr	$RUST/src/sys/pal/unix/mod.rs	/^pub mod memchr;$/;"	n
memchr	$RUST/src/sys/pal/unsupported/common.rs	/^pub mod memchr {$/;"	n
memchr	$RUST/src/sys/pal/windows/mod.rs	/^pub mod memchr;$/;"	n
memchr	$RUST/src/sys/pal/zkvm/mod.rs	/^pub mod memchr {$/;"	n
memchr	$RUST/src/sys_common/memchr.rs	/^pub fn memchr(needle: u8, haystack: &[u8]) -> Option<usize> {$/;"	f	signature:(needle: u8, haystack: &[u8]) -> Option<usize>
memchr	$RUST/src/sys_common/mod.rs	/^pub mod memchr;$/;"	n
memoryflags	$RUST/src/os/xous/ffi/definitions.rs	/^mod memoryflags;$/;"	n
memrchr	$RUST/src/sys/pal/solid/memchr.rs	/^pub fn memrchr(needle: u8, haystack: &[u8]) -> Option<usize> {$/;"	f	signature:(needle: u8, haystack: &[u8]) -> Option<usize>
memrchr	$RUST/src/sys/pal/unix/memchr.rs	/^pub fn memrchr(needle: u8, haystack: &[u8]) -> Option<usize> {$/;"	f	signature:(needle: u8, haystack: &[u8]) -> Option<usize>
memrchr	$RUST/src/sys_common/memchr.rs	/^pub fn memrchr(needle: u8, haystack: &[u8]) -> Option<usize> {$/;"	f	signature:(needle: u8, haystack: &[u8]) -> Option<usize>
memrchr_specific	$RUST/src/sys/pal/unix/memchr.rs	/^    fn memrchr_specific(needle: u8, haystack: &[u8]) -> Option<usize> {$/;"	f	function:memrchr	signature:(needle: u8, haystack: &[u8]) -> Option<usize>
message	$RUST/src/error/tests.rs	/^    message: D,$/;"	m	struct:GenericError
message	$RUST/src/io/error.rs	/^    message: &'static str,$/;"	m	struct:SimpleMessage
message_on_stack	$RUST/src/sync/mpmc/zero.rs	/^    fn message_on_stack(msg: T) -> Packet<T> {$/;"	P	implementation:Packet	signature:(msg: T) -> Packet<T>
messages	$RUST/src/os/unix/net/ancillary.rs	/^    pub fn messages(&self) -> Messages<'_> {$/;"	P	implementation:SocketAncillary	signature:(&self) -> Messages<'_>
meta	$RUST/src/sys/pal/wasi/fs.rs	/^    meta: wasi::Filestat,$/;"	m	struct:FileAttr
metadata	$RUST/src/fs.rs	/^pub fn metadata<P: AsRef<Path>>(path: P) -> io::Result<Metadata> {$/;"	f	signature:<P: AsRef<Path>>(path: P) -> io::Result<Metadata>
metadata	$RUST/src/path.rs	/^    pub fn metadata(&self) -> io::Result<fs::Metadata> {$/;"	P	implementation:Path	signature:(&self) -> io::Result<fs::Metadata>
metadata	$RUST/src/sys/pal/hermit/fs.rs	/^    pub fn metadata(&self) -> io::Result<FileAttr> {$/;"	P	implementation:DirEntry	signature:(&self) -> io::Result<FileAttr>
metadata	$RUST/src/sys/pal/solid/fs.rs	/^    pub fn metadata(&self) -> io::Result<FileAttr> {$/;"	P	implementation:DirEntry	signature:(&self) -> io::Result<FileAttr>
metadata	$RUST/src/sys/pal/unix/fs.rs	/^    pub fn metadata(&self) -> io::Result<FileAttr> {$/;"	P	implementation:DirEntry	signature:(&self) -> io::Result<FileAttr>
metadata	$RUST/src/sys/pal/unsupported/fs.rs	/^    pub fn metadata(&self) -> io::Result<FileAttr> {$/;"	P	implementation:DirEntry	signature:(&self) -> io::Result<FileAttr>
metadata	$RUST/src/sys/pal/wasi/fs.rs	/^    pub fn metadata(&self) -> io::Result<FileAttr> {$/;"	P	implementation:DirEntry	signature:(&self) -> io::Result<FileAttr>
metadata	$RUST/src/sys/pal/windows/fs.rs	/^fn metadata(path: &Path, reparse: ReparsePoint) -> io::Result<FileAttr> {$/;"	f	signature:(path: &Path, reparse: ReparsePoint) -> io::Result<FileAttr>
metadata_access_times	$RUST/src/fs/tests.rs	/^fn metadata_access_times() {$/;"	f	signature:()
metadata_at	$RUST/src/os/wasi/fs.rs	/^    fn metadata_at<P: AsRef<Path>>(&self, lookup_flags: u32, path: P) -> io::Result<Metadata>;$/;"	P	interface:FileExt	signature:<P: AsRef<Path>>(&self, lookup_flags: u32, path: P) -> io::Result<Metadata>
metadata_at	$RUST/src/sys/pal/wasi/fs.rs	/^fn metadata_at(fd: &WasiFd, flags: wasi::Lookupflags, path: &Path) -> io::Result<FileAttr> {$/;"	f	signature:(fd: &WasiFd, flags: wasi::Lookupflags, path: &Path) -> io::Result<FileAttr>
min_limit	$RUST/src/sys/pal/unix/kernel_copy.rs	/^    fn min_limit(&self) -> u64 {$/;"	f	signature:(&self) -> u64
min_stack	$RUST/src/sys_common/thread.rs	/^pub fn min_stack() -> usize {$/;"	f	signature:() -> usize
min_stack_size	$RUST/src/sys/pal/teeos/thread.rs	/^fn min_stack_size(_: *const libc::pthread_attr_t) -> usize {$/;"	f	signature:(_: *const libc::pthread_attr_t) -> usize
min_stack_size	$RUST/src/sys/pal/unix/thread.rs	/^fn min_stack_size(attr: *const libc::pthread_attr_t) -> usize {$/;"	f	signature:(attr: *const libc::pthread_attr_t) -> usize
min_subnorm	$RUST/src/f32/tests.rs	/^    fn min_subnorm() -> f32 {$/;"	f	function:test_total_cmp	signature:() -> f32
min_subnorm	$RUST/src/f64/tests.rs	/^    fn min_subnorm() -> f64 {$/;"	f	function:test_total_cmp	signature:() -> f64
mkdir	$RUST/src/sys/pal/hermit/fs.rs	/^    pub fn mkdir(&self, _p: &Path) -> io::Result<()> {$/;"	P	implementation:DirBuilder	signature:(&self, _p: &Path) -> io::Result<()>
mkdir	$RUST/src/sys/pal/unix/fs.rs	/^    pub fn mkdir(&self, p: &Path) -> io::Result<()> {$/;"	P	implementation:DirBuilder	signature:(&self, p: &Path) -> io::Result<()>
mkdir	$RUST/src/sys/pal/unsupported/fs.rs	/^    pub fn mkdir(&self, _p: &Path) -> io::Result<()> {$/;"	P	implementation:DirBuilder	signature:(&self, _p: &Path) -> io::Result<()>
mkdir	$RUST/src/sys/pal/wasi/fs.rs	/^    pub fn mkdir(&self, p: &Path) -> io::Result<()> {$/;"	P	implementation:DirBuilder	signature:(&self, p: &Path) -> io::Result<()>
mkdir	$RUST/src/sys/pal/windows/fs.rs	/^    pub fn mkdir(&self, p: &Path) -> io::Result<()> {$/;"	P	implementation:DirBuilder	signature:(&self, p: &Path) -> io::Result<()>
mkdir_path_already_exists_error	$RUST/src/fs/tests.rs	/^fn mkdir_path_already_exists_error() {$/;"	f	signature:()
mkdir_trailing_slash	$RUST/src/fs/tests.rs	/^fn mkdir_trailing_slash() {$/;"	f	signature:()
mod_keyword	$RUST/src/keyword_docs.rs	/^mod mod_keyword {}$/;"	n
mode	$RUST/src/os/unix/fs.rs	/^    fn mode(&self) -> u32;$/;"	P	interface:PermissionsExt	signature:(&self) -> u32
mode	$RUST/src/sys/pal/hermit/fs.rs	/^    mode: i32,$/;"	m	struct:OpenOptions
mode	$RUST/src/sys/pal/solid/fs.rs	/^    pub fn mode(&mut self, _mode: u32) {}$/;"	P	implementation:OpenOptions	signature:(&mut self, _mode: u32)
mode	$RUST/src/sys/pal/unix/fs.rs	/^    pub fn mode(&self) -> u32 {$/;"	P	implementation:FilePermissions	signature:(&self) -> u32
mode	$RUST/src/sys/pal/unsupported/locks/rwlock.rs	/^    mode: Cell<isize>,$/;"	m	struct:RwLock
mode	$RUST/src/sys/pal/xous/locks/rwlock.rs	/^    mode: AtomicIsize,$/;"	m	struct:RwLock
mode_t	$RUST/src/os/android/raw.rs	/^    pub type mode_t = c_uint;$/;"	t	module:arch
mode_t	$RUST/src/os/dragonfly/raw.rs	/^pub type mode_t = u32;$/;"	t
mode_t	$RUST/src/os/emscripten/raw.rs	/^pub type mode_t = u32;$/;"	t
mode_t	$RUST/src/os/espidf/raw.rs	/^pub type mode_t = libc::mode_t;$/;"	t
mode_t	$RUST/src/os/freebsd/raw.rs	/^pub type mode_t = u32;$/;"	t
mode_t	$RUST/src/os/fuchsia/raw.rs	/^pub type mode_t = u32;$/;"	t
mode_t	$RUST/src/os/haiku/raw.rs	/^pub type mode_t = u32;$/;"	t
mode_t	$RUST/src/os/horizon/raw.rs	/^pub type mode_t = libc::mode_t;$/;"	t
mode_t	$RUST/src/os/hurd/raw.rs	/^pub type mode_t = c_uint;$/;"	t
mode_t	$RUST/src/os/illumos/raw.rs	/^pub type mode_t = u32;$/;"	t
mode_t	$RUST/src/os/ios/raw.rs	/^pub type mode_t = u32;$/;"	t
mode_t	$RUST/src/os/l4re/raw.rs	/^pub type mode_t = u32;$/;"	t
mode_t	$RUST/src/os/linux/raw.rs	/^pub type mode_t = u32;$/;"	t
mode_t	$RUST/src/os/macos/raw.rs	/^pub type mode_t = u32;$/;"	t
mode_t	$RUST/src/os/netbsd/raw.rs	/^pub type mode_t = u32;$/;"	t
mode_t	$RUST/src/os/nto/raw.rs	/^pub type mode_t = u32;$/;"	t
mode_t	$RUST/src/os/openbsd/raw.rs	/^pub type mode_t = u32;$/;"	t
mode_t	$RUST/src/os/redox/raw.rs	/^pub type mode_t = c_int;$/;"	t
mode_t	$RUST/src/os/solaris/raw.rs	/^pub type mode_t = u32;$/;"	t
mode_t	$RUST/src/os/vita/raw.rs	/^pub type mode_t = libc::mode_t;$/;"	t
mode_t	$RUST/src/os/watchos/raw.rs	/^pub type mode_t = u32;$/;"	t
modified	$RUST/src/fs.rs	/^    pub fn modified(&self) -> io::Result<SystemTime> {$/;"	P	implementation:Metadata	signature:(&self) -> io::Result<SystemTime>
modified	$RUST/src/sys/pal/hermit/fs.rs	/^    pub fn modified(&self) -> io::Result<SystemTime> {$/;"	P	implementation:FileAttr	signature:(&self) -> io::Result<SystemTime>
modified	$RUST/src/sys/pal/solid/fs.rs	/^    pub fn modified(&self) -> io::Result<SystemTime> {$/;"	P	implementation:FileAttr	signature:(&self) -> io::Result<SystemTime>
modified	$RUST/src/sys/pal/unix/fs.rs	/^    pub fn modified(&self) -> io::Result<SystemTime> {$/;"	P	implementation:FileAttr	signature:(&self) -> io::Result<SystemTime>
modified	$RUST/src/sys/pal/unsupported/fs.rs	/^    pub fn modified(&self) -> io::Result<SystemTime> {$/;"	P	implementation:FileAttr	signature:(&self) -> io::Result<SystemTime>
modified	$RUST/src/sys/pal/wasi/fs.rs	/^    pub fn modified(&self) -> io::Result<SystemTime> {$/;"	P	implementation:FileAttr	signature:(&self) -> io::Result<SystemTime>
modified	$RUST/src/sys/pal/windows/fs.rs	/^    pub fn modified(&self) -> io::Result<SystemTime> {$/;"	P	implementation:FileAttr	signature:(&self) -> io::Result<SystemTime>
modified_u64	$RUST/src/sys/pal/windows/fs.rs	/^    pub fn modified_u64(&self) -> u64 {$/;"	P	implementation:FileAttr	signature:(&self) -> u64
move_keyword	$RUST/src/keyword_docs.rs	/^mod move_keyword {}$/;"	n
mpmc	$RUST/src/sync/mod.rs	/^mod mpmc;$/;"	n
mpsc	$RUST/src/sync/mod.rs	/^pub mod mpsc;$/;"	n
msg	$RUST/src/sync/mpmc/array.rs	/^    msg: UnsafeCell<MaybeUninit<T>>,$/;"	m	struct:Slot
msg	$RUST/src/sync/mpmc/list.rs	/^    msg: UnsafeCell<MaybeUninit<T>>,$/;"	m	struct:Slot
msg	$RUST/src/sync/mpmc/zero.rs	/^    msg: UnsafeCell<Option<T>>,$/;"	m	struct:Packet
msg_control	$RUST/src/sys/pal/solid/abi/sockets.rs	/^    pub msg_control: *mut c_void,$/;"	m	struct:msghdr
msg_controllen	$RUST/src/sys/pal/solid/abi/sockets.rs	/^    pub msg_controllen: socklen_t,$/;"	m	struct:msghdr
msg_flags	$RUST/src/sys/pal/solid/abi/sockets.rs	/^    pub msg_flags: c_int,$/;"	m	struct:msghdr
msg_iov	$RUST/src/sys/pal/solid/abi/sockets.rs	/^    pub msg_iov: *mut iovec,$/;"	m	struct:msghdr
msg_iovlen	$RUST/src/sys/pal/solid/abi/sockets.rs	/^    pub msg_iovlen: c_int,$/;"	m	struct:msghdr
msg_name	$RUST/src/sys/pal/solid/abi/sockets.rs	/^    pub msg_name: *mut c_void,$/;"	m	struct:msghdr
msg_namelen	$RUST/src/sys/pal/solid/abi/sockets.rs	/^    pub msg_namelen: socklen_t,$/;"	m	struct:msghdr
msghdr	$RUST/src/sys/pal/solid/abi/sockets.rs	/^pub struct msghdr {$/;"	s
msys_tty_on	$RUST/src/sys/pal/windows/io.rs	/^unsafe fn msys_tty_on(handle: c::HANDLE) -> bool {$/;"	f	signature:(handle: c::HANDLE) -> bool
mtim	$RUST/src/os/wasi/fs.rs	/^    fn mtim(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
mtime	$RUST/src/os/unix/fs.rs	/^    fn mtime(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
mtime_nsec	$RUST/src/os/unix/fs.rs	/^    fn mtime_nsec(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
mtx	$RUST/src/sys/pal/itron/mutex.rs	/^    mtx: SpinIdOnceCell<()>,$/;"	m	struct:Mutex
mtxatr	$RUST/src/sys/pal/itron/abi.rs	/^    pub mtxatr: ATR,$/;"	m	struct:T_CMTX
mul_add	$RUST/src/f32.rs	/^    pub fn mul_add(self, a: f32, b: f32) -> f32 {$/;"	P	implementation:f32	signature:(self, a: f32, b: f32) -> f32
mul_add	$RUST/src/f64.rs	/^    pub fn mul_add(self, a: f64, b: f64) -> f64 {$/;"	P	implementation:f64	signature:(self, a: f64, b: f64) -> f64
mul_div_u64	$RUST/src/sys_common/mod.rs	/^pub fn mul_div_u64(value: u64, numer: u64, denom: u64) -> u64 {$/;"	f	signature:(value: u64, numer: u64, denom: u64) -> u64
multi_line_formatting	$RUST/src/error/tests.rs	/^fn multi_line_formatting() {$/;"	f	signature:()
multicast_loop_v4	$RUST/src/net/udp.rs	/^    pub fn multicast_loop_v4(&self) -> io::Result<bool> {$/;"	P	implementation:UdpSocket	signature:(&self) -> io::Result<bool>
multicast_loop_v4	$RUST/src/sys/pal/sgx/net.rs	/^    pub fn multicast_loop_v4(&self) -> io::Result<bool> {$/;"	P	implementation:UdpSocket	signature:(&self) -> io::Result<bool>
multicast_loop_v4	$RUST/src/sys/pal/teeos/net.rs	/^    pub fn multicast_loop_v4(&self) -> io::Result<bool> {$/;"	P	implementation:UdpSocket	signature:(&self) -> io::Result<bool>
multicast_loop_v4	$RUST/src/sys/pal/unix/l4re.rs	/^        pub fn multicast_loop_v4(&self) -> io::Result<bool> {$/;"	P	implementation:net::UdpSocket	signature:(&self) -> io::Result<bool>
multicast_loop_v4	$RUST/src/sys/pal/unsupported/net.rs	/^    pub fn multicast_loop_v4(&self) -> io::Result<bool> {$/;"	P	implementation:UdpSocket	signature:(&self) -> io::Result<bool>
multicast_loop_v4	$RUST/src/sys/pal/wasi/net.rs	/^    pub fn multicast_loop_v4(&self) -> io::Result<bool> {$/;"	P	implementation:UdpSocket	signature:(&self) -> io::Result<bool>
multicast_loop_v4	$RUST/src/sys/pal/xous/net/udp.rs	/^    pub fn multicast_loop_v4(&self) -> io::Result<bool> {$/;"	P	implementation:UdpSocket	signature:(&self) -> io::Result<bool>
multicast_loop_v4	$RUST/src/sys_common/net.rs	/^    pub fn multicast_loop_v4(&self) -> io::Result<bool> {$/;"	P	implementation:UdpSocket	signature:(&self) -> io::Result<bool>
multicast_loop_v6	$RUST/src/net/udp.rs	/^    pub fn multicast_loop_v6(&self) -> io::Result<bool> {$/;"	P	implementation:UdpSocket	signature:(&self) -> io::Result<bool>
multicast_loop_v6	$RUST/src/sys/pal/sgx/net.rs	/^    pub fn multicast_loop_v6(&self) -> io::Result<bool> {$/;"	P	implementation:UdpSocket	signature:(&self) -> io::Result<bool>
multicast_loop_v6	$RUST/src/sys/pal/teeos/net.rs	/^    pub fn multicast_loop_v6(&self) -> io::Result<bool> {$/;"	P	implementation:UdpSocket	signature:(&self) -> io::Result<bool>
multicast_loop_v6	$RUST/src/sys/pal/unix/l4re.rs	/^        pub fn multicast_loop_v6(&self) -> io::Result<bool> {$/;"	P	implementation:net::UdpSocket	signature:(&self) -> io::Result<bool>
multicast_loop_v6	$RUST/src/sys/pal/unsupported/net.rs	/^    pub fn multicast_loop_v6(&self) -> io::Result<bool> {$/;"	P	implementation:UdpSocket	signature:(&self) -> io::Result<bool>
multicast_loop_v6	$RUST/src/sys/pal/wasi/net.rs	/^    pub fn multicast_loop_v6(&self) -> io::Result<bool> {$/;"	P	implementation:UdpSocket	signature:(&self) -> io::Result<bool>
multicast_loop_v6	$RUST/src/sys/pal/xous/net/udp.rs	/^    pub fn multicast_loop_v6(&self) -> io::Result<bool> {$/;"	P	implementation:UdpSocket	signature:(&self) -> io::Result<bool>
multicast_loop_v6	$RUST/src/sys_common/net.rs	/^    pub fn multicast_loop_v6(&self) -> io::Result<bool> {$/;"	P	implementation:UdpSocket	signature:(&self) -> io::Result<bool>
multicast_ttl_v4	$RUST/src/net/udp.rs	/^    pub fn multicast_ttl_v4(&self) -> io::Result<u32> {$/;"	P	implementation:UdpSocket	signature:(&self) -> io::Result<u32>
multicast_ttl_v4	$RUST/src/sys/pal/sgx/net.rs	/^    pub fn multicast_ttl_v4(&self) -> io::Result<u32> {$/;"	P	implementation:UdpSocket	signature:(&self) -> io::Result<u32>
multicast_ttl_v4	$RUST/src/sys/pal/teeos/net.rs	/^    pub fn multicast_ttl_v4(&self) -> io::Result<u32> {$/;"	P	implementation:UdpSocket	signature:(&self) -> io::Result<u32>
multicast_ttl_v4	$RUST/src/sys/pal/unix/l4re.rs	/^        pub fn multicast_ttl_v4(&self) -> io::Result<u32> {$/;"	P	implementation:net::UdpSocket	signature:(&self) -> io::Result<u32>
multicast_ttl_v4	$RUST/src/sys/pal/unsupported/net.rs	/^    pub fn multicast_ttl_v4(&self) -> io::Result<u32> {$/;"	P	implementation:UdpSocket	signature:(&self) -> io::Result<u32>
multicast_ttl_v4	$RUST/src/sys/pal/wasi/net.rs	/^    pub fn multicast_ttl_v4(&self) -> io::Result<u32> {$/;"	P	implementation:UdpSocket	signature:(&self) -> io::Result<u32>
multicast_ttl_v4	$RUST/src/sys/pal/xous/net/udp.rs	/^    pub fn multicast_ttl_v4(&self) -> io::Result<u32> {$/;"	P	implementation:UdpSocket	signature:(&self) -> io::Result<u32>
multicast_ttl_v4	$RUST/src/sys_common/net.rs	/^    pub fn multicast_ttl_v4(&self) -> io::Result<u32> {$/;"	P	implementation:UdpSocket	signature:(&self) -> io::Result<u32>
multiple_connect_interleaved_greedy_schedule	$RUST/src/net/tcp/tests.rs	/^fn multiple_connect_interleaved_greedy_schedule() {$/;"	f	signature:()
multiple_connect_interleaved_lazy_schedule	$RUST/src/net/tcp/tests.rs	/^fn multiple_connect_interleaved_lazy_schedule() {$/;"	f	signature:()
multiple_connect_serial	$RUST/src/net/tcp/tests.rs	/^fn multiple_connect_serial() {$/;"	f	signature:()
must_yield	$RUST/src/sys/pal/windows/os.rs	/^    must_yield: bool,$/;"	m	struct:SplitPaths
mut_keyword	$RUST/src/keyword_docs.rs	/^mod mut_keyword {}$/;"	n
mutating_and_keeping	$RUST/src/collections/hash/map/tests.rs	/^    fn mutating_and_keeping() {$/;"	f	module:test_extract_if	signature:()
mutating_and_removing	$RUST/src/collections/hash/map/tests.rs	/^    fn mutating_and_removing() {$/;"	f	module:test_extract_if	signature:()
mutex	$RUST/src/sync/mod.rs	/^mod mutex;$/;"	n
mutex	$RUST/src/sync/remutex.rs	/^    mutex: sys::Mutex,$/;"	m	struct:ReentrantMutex
mutex	$RUST/src/sys/pal/sgx/mod.rs	/^mod mutex;$/;"	n
mutex	$RUST/src/sys/pal/sgx/waitqueue/spin_mutex.rs	/^    mutex: &'a SpinMutex<T>,$/;"	m	struct:SpinMutexGuard
mutex	$RUST/src/sys/pal/solid/mod.rs	/^    pub mod mutex;$/;"	n	module:itron
mutex	$RUST/src/sys/pal/teeos/locks/condvar.rs	/^    mutex: AtomicPtr<libc::pthread_mutex_t>,$/;"	m	struct:Condvar
mutex	$RUST/src/sys/pal/teeos/locks/mod.rs	/^pub mod mutex;$/;"	n
mutex	$RUST/src/sys/pal/unix/locks/pthread_condvar.rs	/^    mutex: AtomicPtr<libc::pthread_mutex_t>,$/;"	m	struct:Condvar
mutex	$RUST/src/sys/pal/unsupported/locks/mod.rs	/^mod mutex;$/;"	n
mutex	$RUST/src/sys/pal/windows/locks/mod.rs	/^mod mutex;$/;"	n
mutex	$RUST/src/sys/pal/xous/locks/mod.rs	/^mod mutex;$/;"	n
mutex_guard	$RUST/src/sys/pal/sgx/waitqueue/mod.rs	/^    mutex_guard: Option<SpinMutexGuard<'a, WaitVariable<T>>>,$/;"	m	struct:WaitGuard
nFileIndexHigh	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub nFileIndexHigh: u32,$/;"	m	struct:BY_HANDLE_FILE_INFORMATION
nFileIndexLow	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub nFileIndexLow: u32,$/;"	m	struct:BY_HANDLE_FILE_INFORMATION
nFileSizeHigh	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub nFileSizeHigh: u32,$/;"	m	struct:WIN32_FIND_DATAW
nFileSizeLow	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub nFileSizeLow: u32,$/;"	m	struct:WIN32_FIND_DATAW
nInitialChars	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub nInitialChars: u32,$/;"	m	struct:CONSOLE_READCONSOLE_CONTROL
nLength	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub nLength: u32,$/;"	m	struct:SECURITY_ATTRIBUTES
nNumberOfLinks	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub nNumberOfLinks: u32,$/;"	m	struct:BY_HANDLE_FILE_INFORMATION
n_bufs	$RUST/src/io/tests.rs	/^    n_bufs: usize,$/;"	m	struct:TestWriter
naive_pow	$RUST/src/num/tests.rs	/^    fn naive_pow<T: Mul<Output = T> + Copy>(one: T, base: T, exp: usize) -> T {$/;"	f	function:test_pow	signature:<T: Mul<Output = T> + Copy>(one: T, base: T, exp: usize) -> T
name	$RUST/src/backtrace.rs	/^    name: Option<Vec<u8>>,$/;"	m	struct:BacktraceSymbol
name	$RUST/src/sys/pal/unix/fs.rs	/^    name: crate::ffi::CString,$/;"	m	struct:DirEntry
name	$RUST/src/sys/pal/unix/weak.rs	/^    name: &'static str,$/;"	m	struct:DlsymWeak
name	$RUST/src/sys/pal/wasi/fs.rs	/^    name: Vec<u8>,$/;"	m	struct:DirEntry
name	$RUST/src/thread/mod.rs	/^    pub fn name(mut self, name: String) -> Builder {$/;"	P	implementation:Builder	signature:(mut self, name: String) -> Builder
name_bytes	$RUST/src/sys/pal/unix/fs.rs	/^    fn name_bytes(&self) -> &[u8] {$/;"	P	implementation:DirEntry	signature:(&self) -> &[u8]
name_cstr	$RUST/src/sys/pal/unix/fs.rs	/^    fn name_cstr(&self) -> &CStr {$/;"	P	implementation:DirEntry	signature:(&self) -> &CStr
name_server	$RUST/src/os/xous/services.rs	/^pub(crate) fn name_server() -> Connection {$/;"	f	signature:() -> Connection
native	$RUST/src/thread/mod.rs	/^    native: imp::Thread,$/;"	m	struct:JoinInner
negate	$RUST/src/sys/pal/hermit/mod.rs	/^    fn negate(&self) -> i32;$/;"	P	interface:IsNegative	signature:(&self) -> i32
net	$RUST/src/lib.rs	/^pub mod net;$/;"	n
net	$RUST/src/os/android/mod.rs	/^pub mod net;$/;"	n
net	$RUST/src/os/fd/mod.rs	/^mod net;$/;"	n
net	$RUST/src/os/hermit/io/mod.rs	/^mod net;$/;"	n
net	$RUST/src/os/linux/mod.rs	/^pub mod net;$/;"	n
net	$RUST/src/os/mod.rs	/^mod net;$/;"	n
net	$RUST/src/os/unix/mod.rs	/^pub mod net;$/;"	n
net	$RUST/src/os/wasi/mod.rs	/^pub mod net;$/;"	n
net	$RUST/src/os/xous/services.rs	/^mod net;$/;"	n
net	$RUST/src/sys/pal/hermit/mod.rs	/^pub mod net;$/;"	n
net	$RUST/src/sys/pal/sgx/mod.rs	/^pub mod net;$/;"	n
net	$RUST/src/sys/pal/solid/mod.rs	/^pub mod net;$/;"	n
net	$RUST/src/sys/pal/teeos/mod.rs	/^pub mod net;$/;"	n
net	$RUST/src/sys/pal/uefi/mod.rs	/^pub mod net;$/;"	n
net	$RUST/src/sys/pal/unix/l4re.rs	/^pub mod net {$/;"	n
net	$RUST/src/sys/pal/unix/mod.rs	/^pub mod net;$/;"	n
net	$RUST/src/sys/pal/unsupported/mod.rs	/^pub mod net;$/;"	n
net	$RUST/src/sys/pal/wasi/mod.rs	/^pub mod net;$/;"	n
net	$RUST/src/sys/pal/wasm/mod.rs	/^pub mod net;$/;"	n
net	$RUST/src/sys/pal/windows/mod.rs	/^pub mod net;$/;"	n
net	$RUST/src/sys/pal/xous/mod.rs	/^pub mod net;$/;"	n
net	$RUST/src/sys/pal/zkvm/mod.rs	/^pub mod net;$/;"	n
net_server	$RUST/src/os/xous/services/net.rs	/^pub(crate) fn net_server() -> Connection {$/;"	f	signature:() -> Connection
netbsd	$RUST/src/os/mod.rs	/^pub mod netbsd;$/;"	n
netc	$RUST/src/sys/pal/sgx/net.rs	/^pub mod netc {$/;"	n
netc	$RUST/src/sys/pal/solid/net.rs	/^pub mod netc {$/;"	n
netc	$RUST/src/sys/pal/teeos/net.rs	/^pub mod netc {$/;"	n
netc	$RUST/src/sys/pal/unsupported/net.rs	/^pub mod netc {$/;"	n
netc	$RUST/src/sys/pal/wasi/net.rs	/^pub mod netc {$/;"	n
netc	$RUST/src/sys/pal/windows/net.rs	/^pub mod netc {$/;"	n
netc	$RUST/src/sys/pal/xous/net/mod.rs	/^pub mod netc {$/;"	n
new	$RUST/src/collections/hash/map.rs	/^    pub fn new() -> HashMap<K, V, RandomState> {$/;"	P	implementation:HashMap	signature:() -> HashMap<K, V, RandomState>
new	$RUST/src/collections/hash/map/tests.rs	/^    fn new(k: usize) -> Droppable {$/;"	P	implementation:Droppable	signature:(k: usize) -> Droppable
new	$RUST/src/collections/hash/set.rs	/^    pub fn new() -> HashSet<T, RandomState> {$/;"	P	implementation:HashSet	signature:() -> HashSet<T, RandomState>
new	$RUST/src/error.rs	/^    pub fn new(error: E) -> Report<E> {$/;"	f	signature:(error: E) -> Report<E>
new	$RUST/src/error/tests.rs	/^    fn new(message: D) -> GenericError<D> {$/;"	P	implementation:GenericError	signature:(message: D) -> GenericError<D>
new	$RUST/src/ffi/os_str.rs	/^    pub fn new<S: AsRef<OsStr> + ?Sized>(s: &S) -> &OsStr {$/;"	P	implementation:OsStr	signature:<S: AsRef<OsStr> + ?Sized>(s: &S) -> &OsStr
new	$RUST/src/fs.rs	/^    pub fn new() -> Self {$/;"	P	implementation:OpenOptions	signature:() -> Self
new	$RUST/src/hash/random.rs	/^    pub fn new() -> RandomState {$/;"	P	implementation:RandomState	signature:() -> RandomState
new	$RUST/src/io/buffered/bufreader.rs	/^    pub fn new(inner: R) -> BufReader<R> {$/;"	P	implementation:BufReader	signature:(inner: R) -> BufReader<R>
new	$RUST/src/io/buffered/bufwriter.rs	/^    pub fn new(inner: W) -> BufWriter<W> {$/;"	P	implementation:BufWriter	signature:(inner: W) -> BufWriter<W>
new	$RUST/src/io/buffered/linewriter.rs	/^    pub fn new(inner: W) -> LineWriter<W> {$/;"	P	implementation:LineWriter	signature:(inner: W) -> LineWriter<W>
new	$RUST/src/io/buffered/linewritershim.rs	/^    pub fn new(buffer: &'a mut BufWriter<W>) -> Self {$/;"	P	implementation:LineWriterShim	signature:(buffer: &'a mut BufWriter<W>) -> Self
new	$RUST/src/io/buffered/mod.rs	/^    fn new(writer: W, error: Error) -> Self {$/;"	P	implementation:IntoInnerError	signature:(writer: W, error: Error) -> Self
new	$RUST/src/io/cursor.rs	/^    pub const fn new(inner: T) -> Cursor<T> {$/;"	P	implementation:Cursor	signature:(inner: T) -> Cursor<T>
new	$RUST/src/io/error.rs	/^    pub(crate) const fn new(kind: ErrorKind, message: &'static str) -> Self {$/;"	P	implementation:SimpleMessage	signature:(kind: ErrorKind, message: &'static str) -> Self
new	$RUST/src/io/error/repr_bitpacked.rs	/^    pub(super) fn new(dat: ErrorData<Box<Custom>>) -> Self {$/;"	P	implementation:Repr	signature:(dat: ErrorData<Box<Custom>>) -> Self
new	$RUST/src/io/error/repr_unpacked.rs	/^    pub(super) fn new(dat: ErrorData<Box<Custom>>) -> Self {$/;"	P	implementation:Repr	signature:(dat: ErrorData<Box<Custom>>) -> Self
new	$RUST/src/io/mod.rs	/^    pub fn new(buf: &'a mut [u8]) -> IoSliceMut<'a> {$/;"	P	implementation:IoSliceMut	signature:(buf: &'a mut [u8]) -> IoSliceMut<'a>
new	$RUST/src/os/unix/net/addr.rs	/^    pub(super) fn new<F>(f: F) -> io::Result<SocketAddr>$/;"	P	implementation:SocketAddr	signature:<F>(f: F) -> io::Result<SocketAddr> where F: FnOnce(*mut libc::sockaddr, *mut libc::socklen_t) -> libc::c_int,
new	$RUST/src/os/unix/net/ancillary.rs	/^    unsafe fn new(data: &'a [u8]) -> AncillaryDataIter<'a, T> {$/;"	P	implementation:AncillaryDataIter	signature:(data: &'a [u8]) -> AncillaryDataIter<'a, T>
new	$RUST/src/os/xous/services.rs	/^        pub fn new(name: &str) -> Self {$/;"	P	implementation:ns::ConnectRequest	signature:(name: &str) -> Self
new	$RUST/src/panicking.rs	/^        fn new(inner: A) -> Payload<A> {$/;"	P	implementation:begin_panic::Payload	signature:(inner: A) -> Payload<A>
new	$RUST/src/path.rs	/^    pub fn new<S: AsRef<OsStr> + ?Sized>(s: &S) -> &Path {$/;"	P	implementation:Path	signature:<S: AsRef<OsStr> + ?Sized>(s: &S) -> &Path
new	$RUST/src/process.rs	/^    pub fn new<S: AsRef<OsStr>>(program: S) -> Command {$/;"	P	implementation:Command	signature:<S: AsRef<OsStr>>(program: S) -> Command
new	$RUST/src/sync/barrier.rs	/^    pub fn new(n: usize) -> Barrier {$/;"	P	implementation:Barrier	signature:(n: usize) -> Barrier
new	$RUST/src/sync/condvar.rs	/^    pub const fn new() -> Condvar {$/;"	P	implementation:Condvar	signature:() -> Condvar
new	$RUST/src/sync/lazy_lock.rs	/^    pub const fn new(f: F) -> LazyLock<T, F> {$/;"	P	implementation:LazyLock	signature:(f: F) -> LazyLock<T, F>
new	$RUST/src/sync/mpmc/context.rs	/^    fn new() -> Context {$/;"	P	implementation:Context	signature:() -> Context
new	$RUST/src/sync/mpmc/counter.rs	/^pub(crate) fn new<C>(chan: C) -> (Sender<C>, Receiver<C>) {$/;"	f	signature:<C>(chan: C) -> (Sender<C>, Receiver<C>)
new	$RUST/src/sync/mpmc/list.rs	/^    pub(crate) fn new() -> Self {$/;"	P	implementation:Channel	signature:() -> Self
new	$RUST/src/sync/mpmc/utils.rs	/^    pub fn new(value: T) -> CachePadded<T> {$/;"	P	implementation:CachePadded	signature:(value: T) -> CachePadded<T>
new	$RUST/src/sync/mpmc/waker.rs	/^    pub(crate) fn new() -> Self {$/;"	P	implementation:Waker	signature:() -> Self
new	$RUST/src/sync/mpmc/zero.rs	/^    pub(crate) fn new() -> Self {$/;"	P	implementation:Channel	signature:() -> Self
new	$RUST/src/sync/mutex.rs	/^    unsafe fn new(lock: &'mutex Mutex<T>) -> LockResult<MutexGuard<'mutex, T>> {$/;"	P	implementation:MutexGuard	signature:(lock: &'mutex Mutex<T>) -> LockResult<MutexGuard<'mutex, T>>
new	$RUST/src/sync/once.rs	/^    pub const fn new() -> Once {$/;"	P	implementation:Once	signature:() -> Once
new	$RUST/src/sync/once_lock.rs	/^    pub const fn new() -> OnceLock<T> {$/;"	P	implementation:OnceLock	signature:() -> OnceLock<T>
new	$RUST/src/sync/poison.rs	/^    pub fn new(guard: T) -> PoisonError<T> {$/;"	P	implementation:PoisonError	signature:(guard: T) -> PoisonError<T>
new	$RUST/src/sync/remutex.rs	/^    pub const fn new(t: T) -> ReentrantMutex<T> {$/;"	P	implementation:ReentrantMutex	signature:(t: T) -> ReentrantMutex<T>
new	$RUST/src/sync/rwlock.rs	/^    unsafe fn new(lock: &'rwlock RwLock<T>) -> LockResult<RwLockWriteGuard<'rwlock, T>> {$/;"	P	implementation:RwLockWriteGuard	signature:(lock: &'rwlock RwLock<T>) -> LockResult<RwLockWriteGuard<'rwlock, T>>
new	$RUST/src/sys/pal/common/thread_local/fast_local.rs	/^    pub const fn new() -> Key<T> {$/;"	P	implementation:Key	signature:() -> Key<T>
new	$RUST/src/sys/pal/common/thread_local/mod.rs	/^        pub const fn new() -> LazyKeyInner<T> {$/;"	P	implementation:lazy::LazyKeyInner	signature:() -> LazyKeyInner<T>
new	$RUST/src/sys/pal/common/thread_local/os_local.rs	/^    pub const fn new() -> Key<T> {$/;"	P	implementation:Key	signature:() -> Key<T>
new	$RUST/src/sys/pal/common/thread_local/static_local.rs	/^    pub const fn new() -> Key<T> {$/;"	P	implementation:Key	signature:() -> Key<T>
new	$RUST/src/sys/pal/hermit/fs.rs	/^    pub fn new() -> OpenOptions {$/;"	P	implementation:OpenOptions	signature:() -> OpenOptions
new	$RUST/src/sys/pal/hermit/net.rs	/^    pub fn new(addr: &SocketAddr, ty: i32) -> io::Result<Socket> {$/;"	P	implementation:Socket	signature:(addr: &SocketAddr, ty: i32) -> io::Result<Socket>
new	$RUST/src/sys/pal/hermit/stdio.rs	/^    pub const fn new() -> Stdout {$/;"	P	implementation:Stdout	signature:() -> Stdout
new	$RUST/src/sys/pal/hermit/thread.rs	/^    pub unsafe fn new(stack: usize, p: Box<dyn FnOnce()>) -> io::Result<Thread> {$/;"	P	implementation:Thread	signature:(stack: usize, p: Box<dyn FnOnce()>) -> io::Result<Thread>
new	$RUST/src/sys/pal/itron/condvar.rs	/^    pub const fn new() -> Condvar {$/;"	P	implementation:Condvar	signature:() -> Condvar
new	$RUST/src/sys/pal/itron/error.rs	/^    pub fn new(er: abi::ER) -> Option<Self> {$/;"	P	implementation:ItronError	signature:(er: abi::ER) -> Option<Self>
new	$RUST/src/sys/pal/itron/mutex.rs	/^    pub const fn new() -> Mutex {$/;"	P	implementation:Mutex	signature:() -> Mutex
new	$RUST/src/sys/pal/itron/spin.rs	/^    pub const fn new(x: T) -> Self {$/;"	P	implementation:SpinMutex	signature:(x: T) -> Self
new	$RUST/src/sys/pal/itron/thread.rs	/^    pub unsafe fn new(stack: usize, p: Box<dyn FnOnce()>) -> io::Result<Thread> {$/;"	P	implementation:Thread	signature:(stack: usize, p: Box<dyn FnOnce()>) -> io::Result<Thread>
new	$RUST/src/sys/pal/sgx/abi/panic.rs	/^    pub(crate) fn new() -> Option<Self> {$/;"	P	implementation:SgxPanicOutput	signature:() -> Option<Self>
new	$RUST/src/sys/pal/sgx/abi/tls/mod.rs	/^    pub fn new() -> Tls {$/;"	P	implementation:Tls	signature:() -> Tls
new	$RUST/src/sys/pal/sgx/condvar.rs	/^    pub const fn new() -> Condvar {$/;"	P	implementation:Condvar	signature:() -> Condvar
new	$RUST/src/sys/pal/sgx/fd.rs	/^    pub fn new(fd: Fd) -> FileDesc {$/;"	P	implementation:FileDesc	signature:(fd: Fd) -> FileDesc
new	$RUST/src/sys/pal/sgx/mutex.rs	/^    pub const fn new() -> Mutex {$/;"	P	implementation:Mutex	signature:() -> Mutex
new	$RUST/src/sys/pal/sgx/net.rs	/^    fn new(host: String) -> io::Result<LookupHost> {$/;"	P	implementation:LookupHost	signature:(host: String) -> io::Result<LookupHost>
new	$RUST/src/sys/pal/sgx/rwlock.rs	/^    pub const fn new() -> RwLock {$/;"	P	implementation:RwLock	signature:() -> RwLock
new	$RUST/src/sys/pal/sgx/stdio.rs	/^    pub const fn new() -> Stdout {$/;"	P	implementation:Stdout	signature:() -> Stdout
new	$RUST/src/sys/pal/sgx/thread.rs	/^    pub unsafe fn new(_stack: usize, p: Box<dyn FnOnce()>) -> io::Result<Thread> {$/;"	P	implementation:Thread	signature:(_stack: usize, p: Box<dyn FnOnce()>) -> io::Result<Thread>
new	$RUST/src/sys/pal/sgx/waitqueue/mod.rs	/^    pub const fn new(var: T) -> Self {$/;"	P	implementation:WaitVariable	signature:(var: T) -> Self
new	$RUST/src/sys/pal/sgx/waitqueue/spin_mutex.rs	/^    pub const fn new(value: T) -> Self {$/;"	P	implementation:SpinMutex	signature:(value: T) -> Self
new	$RUST/src/sys/pal/sgx/waitqueue/unsafe_list.rs	/^    pub fn new(value: T) -> Self {$/;"	P	implementation:UnsafeListEntry	signature:(value: T) -> Self
new	$RUST/src/sys/pal/solid/fs.rs	/^    pub fn new() -> OpenOptions {$/;"	P	implementation:OpenOptions	signature:() -> OpenOptions
new	$RUST/src/sys/pal/solid/io.rs	/^    pub fn new(buf: &'a mut [u8]) -> IoSliceMut<'a> {$/;"	P	implementation:IoSliceMut	signature:(buf: &'a mut [u8]) -> IoSliceMut<'a>
new	$RUST/src/sys/pal/solid/net.rs	/^    pub fn new(addr: &SocketAddr, ty: c_int) -> io::Result<Socket> {$/;"	P	implementation:Socket	signature:(addr: &SocketAddr, ty: c_int) -> io::Result<Socket>
new	$RUST/src/sys/pal/solid/rwlock.rs	/^    pub const fn new() -> RwLock {$/;"	P	implementation:RwLock	signature:() -> RwLock
new	$RUST/src/sys/pal/solid/stdio.rs	/^    pub const fn new() -> Stdout {$/;"	P	implementation:Stdout	signature:() -> Stdout
new	$RUST/src/sys/pal/teeos/locks/condvar.rs	/^    pub const fn new() -> Condvar {$/;"	P	implementation:Condvar	signature:() -> Condvar
new	$RUST/src/sys/pal/teeos/locks/rwlock.rs	/^    pub const fn new() -> RwLock {$/;"	P	implementation:RwLock	signature:() -> RwLock
new	$RUST/src/sys/pal/teeos/stdio.rs	/^    pub const fn new() -> Stdout {$/;"	P	implementation:Stdout	signature:() -> Stdout
new	$RUST/src/sys/pal/teeos/thread.rs	/^    pub unsafe fn new(stack: usize, p: Box<dyn FnOnce()>) -> io::Result<Thread> {$/;"	P	implementation:Thread	signature:(stack: usize, p: Box<dyn FnOnce()>) -> io::Result<Thread>
new	$RUST/src/sys/pal/uefi/stdio.rs	/^    pub const fn new() -> Stdout {$/;"	P	implementation:Stdout	signature:() -> Stdout
new	$RUST/src/sys/pal/unix/fs.rs	/^    pub fn new() -> OpenOptions {$/;"	P	implementation:OpenOptions	signature:() -> OpenOptions
new	$RUST/src/sys/pal/unix/io.rs	/^    pub fn new(buf: &'a mut [u8]) -> IoSliceMut<'a> {$/;"	P	implementation:IoSliceMut	signature:(buf: &'a mut [u8]) -> IoSliceMut<'a>
new	$RUST/src/sys/pal/unix/l4re.rs	/^        pub fn new(_: &SocketAddr, _: libc::c_int) -> io::Result<Socket> {$/;"	P	implementation:net::Socket	signature:(_: &SocketAddr, _: libc::c_int) -> io::Result<Socket>
new	$RUST/src/sys/pal/unix/locks/fuchsia_mutex.rs	/^    pub const fn new() -> Mutex {$/;"	P	implementation:Mutex	signature:() -> Mutex
new	$RUST/src/sys/pal/unix/locks/futex_condvar.rs	/^    pub const fn new() -> Self {$/;"	P	implementation:Condvar	signature:() -> Self
new	$RUST/src/sys/pal/unix/locks/futex_mutex.rs	/^    pub const fn new() -> Self {$/;"	P	implementation:Mutex	signature:() -> Self
new	$RUST/src/sys/pal/unix/locks/futex_rwlock.rs	/^    pub const fn new() -> Self {$/;"	P	implementation:RwLock	signature:() -> Self
new	$RUST/src/sys/pal/unix/locks/pthread_condvar.rs	/^    pub const fn new() -> Condvar {$/;"	P	implementation:Condvar	signature:() -> Condvar
new	$RUST/src/sys/pal/unix/locks/pthread_mutex.rs	/^    pub const fn new() -> Mutex {$/;"	P	implementation:Mutex	signature:() -> Mutex
new	$RUST/src/sys/pal/unix/locks/pthread_rwlock.rs	/^    pub const fn new() -> RwLock {$/;"	P	implementation:RwLock	signature:() -> RwLock
new	$RUST/src/sys/pal/unix/net.rs	/^    pub fn new(addr: &SocketAddr, ty: c_int) -> io::Result<Socket> {$/;"	P	implementation:Socket	signature:(addr: &SocketAddr, ty: c_int) -> io::Result<Socket>
new	$RUST/src/sys/pal/unix/process/process_common.rs	/^    pub fn new(program: &OsStr) -> Command {$/;"	P	implementation:Command	signature:(program: &OsStr) -> Command
new	$RUST/src/sys/pal/unix/process/process_unix.rs	/^    unsafe fn new(pid: pid_t, pidfd: pid_t) -> Self {$/;"	P	implementation:Process	signature:(pid: pid_t, pidfd: pid_t) -> Self
new	$RUST/src/sys/pal/unix/process/process_vxworks.rs	/^    pub fn new(status: c_int) -> ExitStatus {$/;"	P	implementation:ExitStatus	signature:(status: c_int) -> ExitStatus
new	$RUST/src/sys/pal/unix/process/zircon.rs	/^    pub fn new(raw: zx_handle_t) -> Handle {$/;"	P	implementation:Handle	signature:(raw: zx_handle_t) -> Handle
new	$RUST/src/sys/pal/unix/stack_overflow.rs	/^    pub unsafe fn new() -> Handler {$/;"	P	implementation:Handler	signature:() -> Handler
new	$RUST/src/sys/pal/unix/stdio.rs	/^    pub const fn new() -> Stdout {$/;"	P	implementation:Stdout	signature:() -> Stdout
new	$RUST/src/sys/pal/unix/thread.rs	/^    pub unsafe fn new(stack: usize, p: Box<dyn FnOnce()>) -> io::Result<Thread> {$/;"	P	implementation:Thread	signature:(stack: usize, p: Box<dyn FnOnce()>) -> io::Result<Thread>
new	$RUST/src/sys/pal/unix/time.rs	/^    pub(crate) fn new(tv_sec: i64, tv_nsec: i32) -> Self {$/;"	P	implementation:__timespec64	signature:(tv_sec: i64, tv_nsec: i32) -> Self
new	$RUST/src/sys/pal/unix/weak.rs	/^    pub(crate) fn new(weak_ptr: Option<F>) -> Self {$/;"	P	implementation:ExternWeak	signature:(weak_ptr: Option<F>) -> Self
new	$RUST/src/sys/pal/unsupported/fs.rs	/^    pub fn new() -> OpenOptions {$/;"	P	implementation:OpenOptions	signature:() -> OpenOptions
new	$RUST/src/sys/pal/unsupported/io.rs	/^    pub fn new(buf: &'a mut [u8]) -> IoSliceMut<'a> {$/;"	P	implementation:IoSliceMut	signature:(buf: &'a mut [u8]) -> IoSliceMut<'a>
new	$RUST/src/sys/pal/unsupported/locks/condvar.rs	/^    pub const fn new() -> Condvar {$/;"	P	implementation:Condvar	signature:() -> Condvar
new	$RUST/src/sys/pal/unsupported/locks/mutex.rs	/^    pub const fn new() -> Mutex {$/;"	P	implementation:Mutex	signature:() -> Mutex
new	$RUST/src/sys/pal/unsupported/locks/rwlock.rs	/^    pub const fn new() -> RwLock {$/;"	P	implementation:RwLock	signature:() -> RwLock
new	$RUST/src/sys/pal/unsupported/once.rs	/^    pub const fn new() -> Once {$/;"	P	implementation:Once	signature:() -> Once
new	$RUST/src/sys/pal/unsupported/process.rs	/^    pub fn new(_program: &OsStr) -> Command {$/;"	P	implementation:Command	signature:(_program: &OsStr) -> Command
new	$RUST/src/sys/pal/unsupported/stdio.rs	/^    pub const fn new() -> Stdout {$/;"	P	implementation:Stdout	signature:() -> Stdout
new	$RUST/src/sys/pal/unsupported/thread.rs	/^    pub unsafe fn new(_stack: usize, _p: Box<dyn FnOnce()>) -> io::Result<Thread> {$/;"	P	implementation:Thread	signature:(_stack: usize, _p: Box<dyn FnOnce()>) -> io::Result<Thread>
new	$RUST/src/sys/pal/wasi/fs.rs	/^    pub fn new() -> OpenOptions {$/;"	P	implementation:OpenOptions	signature:() -> OpenOptions
new	$RUST/src/sys/pal/wasi/io.rs	/^    pub fn new(buf: &'a mut [u8]) -> IoSliceMut<'a> {$/;"	P	implementation:IoSliceMut	signature:(buf: &'a mut [u8]) -> IoSliceMut<'a>
new	$RUST/src/sys/pal/wasi/stdio.rs	/^    pub const fn new() -> Stdout {$/;"	P	implementation:Stdout	signature:() -> Stdout
new	$RUST/src/sys/pal/wasm/atomics/thread.rs	/^    pub unsafe fn new(_stack: usize, _p: Box<dyn FnOnce()>) -> io::Result<Thread> {$/;"	P	implementation:Thread	signature:(_stack: usize, _p: Box<dyn FnOnce()>) -> io::Result<Thread>
new	$RUST/src/sys/pal/windows/compat.rs	/^    pub unsafe fn new(name: &CStr) -> Option<Self> {$/;"	P	implementation:Module	signature:(name: &CStr) -> Option<Self>
new	$RUST/src/sys/pal/windows/fs.rs	/^    pub fn new() -> OpenOptions {$/;"	P	implementation:OpenOptions	signature:() -> OpenOptions
new	$RUST/src/sys/pal/windows/io.rs	/^    pub fn new(buf: &'a mut [u8]) -> IoSliceMut<'a> {$/;"	P	implementation:IoSliceMut	signature:(buf: &'a mut [u8]) -> IoSliceMut<'a>
new	$RUST/src/sys/pal/windows/locks/condvar.rs	/^    pub const fn new() -> Condvar {$/;"	P	implementation:Condvar	signature:() -> Condvar
new	$RUST/src/sys/pal/windows/locks/mutex.rs	/^    pub const fn new() -> Mutex {$/;"	P	implementation:Mutex	signature:() -> Mutex
new	$RUST/src/sys/pal/windows/locks/rwlock.rs	/^    pub const fn new() -> RwLock {$/;"	P	implementation:RwLock	signature:() -> RwLock
new	$RUST/src/sys/pal/windows/net.rs	/^    pub fn new(addr: &SocketAddr, ty: c_int) -> io::Result<Socket> {$/;"	P	implementation:Socket	signature:(addr: &SocketAddr, ty: c_int) -> io::Result<Socket>
new	$RUST/src/sys/pal/windows/pipe.rs	/^    fn new(pipe: Handle, dst: &'a mut Vec<u8>) -> io::Result<AsyncPipe<'a>> {$/;"	P	implementation:AsyncPipe	signature:(pipe: Handle, dst: &'a mut Vec<u8>) -> io::Result<AsyncPipe<'a>>
new	$RUST/src/sys/pal/windows/process.rs	/^    pub fn new(program: &OsStr) -> Command {$/;"	P	implementation:Command	signature:(program: &OsStr) -> Command
new	$RUST/src/sys/pal/windows/stack_overflow.rs	/^    pub unsafe fn new() -> Handler {$/;"	P	implementation:Handler	signature:() -> Handler
new	$RUST/src/sys/pal/windows/stack_overflow_uwp.rs	/^    pub fn new() -> Handler {$/;"	P	implementation:Handler	signature:() -> Handler
new	$RUST/src/sys/pal/windows/stdio.rs	/^    pub const fn new() -> Stdout {$/;"	P	implementation:Stdout	signature:() -> Stdout
new	$RUST/src/sys/pal/windows/thread.rs	/^    pub unsafe fn new(stack: usize, p: Box<dyn FnOnce()>) -> io::Result<Thread> {$/;"	P	implementation:Thread	signature:(stack: usize, p: Box<dyn FnOnce()>) -> io::Result<Thread>
new	$RUST/src/sys/pal/windows/thread_local_key.rs	/^    pub const fn new(dtor: Option<Dtor>) -> StaticKey {$/;"	P	implementation:StaticKey	signature:(dtor: Option<Dtor>) -> StaticKey
new	$RUST/src/sys/pal/xous/locks/condvar.rs	/^    pub const fn new() -> Condvar {$/;"	P	implementation:Condvar	signature:() -> Condvar
new	$RUST/src/sys/pal/xous/locks/mutex.rs	/^    pub const fn new() -> Mutex {$/;"	P	implementation:Mutex	signature:() -> Mutex
new	$RUST/src/sys/pal/xous/locks/rwlock.rs	/^    pub const fn new() -> RwLock {$/;"	P	implementation:RwLock	signature:() -> RwLock
new	$RUST/src/sys/pal/xous/stdio.rs	/^    pub const fn new() -> Stdout {$/;"	P	implementation:Stdout	signature:() -> Stdout
new	$RUST/src/sys/pal/xous/thread.rs	/^    pub unsafe fn new(stack: usize, p: Box<dyn FnOnce()>) -> io::Result<Thread> {$/;"	P	implementation:Thread	signature:(stack: usize, p: Box<dyn FnOnce()>) -> io::Result<Thread>
new	$RUST/src/sys/pal/zkvm/stdio.rs	/^    pub const fn new() -> Stdout {$/;"	P	implementation:Stdout	signature:() -> Stdout
new	$RUST/src/sys/personality/dwarf/mod.rs	/^    pub fn new(ptr: *const u8) -> DwarfReader {$/;"	P	implementation:DwarfReader	signature:(ptr: *const u8) -> DwarfReader
new	$RUST/src/sys_common/lazy_box.rs	/^    pub const fn new() -> Self {$/;"	P	implementation:LazyBox	signature:() -> Self
new	$RUST/src/sys_common/once/futex.rs	/^    pub const fn new() -> Once {$/;"	P	implementation:Once	signature:() -> Once
new	$RUST/src/sys_common/once/queue.rs	/^    pub const fn new() -> Once {$/;"	P	implementation:Once	signature:() -> Once
new	$RUST/src/sys_common/thread_local_key.rs	/^    pub const fn new(dtor: Option<unsafe extern "C" fn(*mut u8)>) -> StaticKey {$/;"	P	implementation:StaticKey	signature:(dtor: Option<unsafe extern "C" fn(*mut u8)>) -> StaticKey
new	$RUST/src/sys_common/thread_parking/id.rs	/^    pub fn new() -> Parker {$/;"	P	implementation:Parker	signature:() -> Parker
new	$RUST/src/sys_common/wstr.rs	/^    pub unsafe fn new(lpwstr: *const u16) -> Option<Self> {$/;"	P	implementation:WStrUnits	signature:(lpwstr: *const u16) -> Option<Self>
new	$RUST/src/sys_common/wtf8.rs	/^    pub fn new() -> Wtf8Buf {$/;"	P	implementation:Wtf8Buf	signature:() -> Wtf8Buf
new	$RUST/src/thread/local.rs	/^    pub const unsafe fn new($/;"	P	implementation:LocalKey	signature:( inner: unsafe fn(Option<&mut Option<T>>) -> Option<&'static T>, ) -> LocalKey<T>
new	$RUST/src/thread/mod.rs	/^    pub(crate) fn new(name: Option<CString>) -> Thread {$/;"	P	implementation:Thread	signature:(name: Option<CString>) -> Thread
new_custom	$RUST/src/io/error/repr_bitpacked.rs	/^    pub(super) fn new_custom(b: Box<Custom>) -> Self {$/;"	P	implementation:Repr	signature:(b: Box<Custom>) -> Self
new_custom	$RUST/src/io/error/repr_unpacked.rs	/^    pub(super) fn new_custom(b: Box<Custom>) -> Self {$/;"	P	implementation:Repr	signature:(b: Box<Custom>) -> Self
new_drop	$RUST/benches/hash/map.rs	/^fn new_drop(b: &mut Bencher) {$/;"	f	signature:(b: &mut Bencher)
new_event	$RUST/src/sys/pal/windows/handle.rs	/^    pub fn new_event(manual: bool, init: bool) -> io::Result<Handle> {$/;"	P	implementation:Handle	signature:(manual: bool, init: bool) -> io::Result<Handle>
new_from_enclave	$RUST/src/sys/pal/sgx/abi/usercalls/alloc.rs	/^    pub fn new_from_enclave(val: &T) -> Self {$/;"	f	signature:(val: &T) -> Self
new_in_place	$RUST/src/sys/pal/unix/thread_parking/darwin.rs	/^    pub unsafe fn new_in_place(parker: *mut Parker) {$/;"	P	implementation:Parker	signature:(parker: *mut Parker)
new_in_place	$RUST/src/sys/pal/unix/thread_parking/pthread.rs	/^    pub unsafe fn new_in_place(parker: *mut Parker) {$/;"	P	implementation:Parker	signature:(parker: *mut Parker)
new_in_place	$RUST/src/sys/pal/unsupported/thread_parking.rs	/^    pub unsafe fn new_in_place(_parker: *mut Parker) {}$/;"	P	implementation:Parker	signature:(_parker: *mut Parker)
new_in_place	$RUST/src/sys/pal/windows/thread_parking.rs	/^    pub unsafe fn new_in_place(parker: *mut Parker) {$/;"	P	implementation:Parker	signature:(parker: *mut Parker)
new_in_place	$RUST/src/sys/pal/xous/thread_parking.rs	/^    pub unsafe fn new_in_place(parker: *mut Parker) {$/;"	P	implementation:Parker	signature:(parker: *mut Parker)
new_in_place	$RUST/src/sys_common/thread_parking/futex.rs	/^    pub unsafe fn new_in_place(parker: *mut Parker) {$/;"	P	implementation:Parker	signature:(parker: *mut Parker)
new_in_place	$RUST/src/sys_common/thread_parking/id.rs	/^    pub unsafe fn new_in_place(parker: *mut Parker) {$/;"	P	implementation:Parker	signature:(parker: *mut Parker)
new_insert_drop	$RUST/benches/hash/map.rs	/^fn new_insert_drop(b: &mut Bencher) {$/;"	f	signature:(b: &mut Bencher)
new_mtx	$RUST/src/sys/pal/itron/mutex.rs	/^fn new_mtx() -> Result<abi::ID, ItronError> {$/;"	f	signature:() -> Result<abi::ID, ItronError>
new_os	$RUST/src/io/error/repr_bitpacked.rs	/^    pub(super) fn new_os(code: RawOsError) -> Self {$/;"	P	implementation:Repr	signature:(code: RawOsError) -> Self
new_os	$RUST/src/io/error/repr_unpacked.rs	/^    pub(super) fn new_os(code: RawOsError) -> Self {$/;"	P	implementation:Repr	signature:(code: RawOsError) -> Self
new_pair	$RUST/src/sys/pal/hermit/net.rs	/^    pub fn new_pair(_fam: i32, _ty: i32) -> io::Result<(Socket, Socket)> {$/;"	P	implementation:Socket	signature:(_fam: i32, _ty: i32) -> io::Result<(Socket, Socket)>
new_pair	$RUST/src/sys/pal/unix/l4re.rs	/^        pub fn new_pair(_: libc::c_int, _: libc::c_int) -> io::Result<(Socket, Socket)> {$/;"	P	implementation:net::Socket	signature:(_: libc::c_int, _: libc::c_int) -> io::Result<(Socket, Socket)>
new_pair	$RUST/src/sys/pal/unix/net.rs	/^    pub fn new_pair(fam: c_int, ty: c_int) -> io::Result<(Socket, Socket)> {$/;"	P	implementation:Socket	signature:(fam: c_int, ty: c_int) -> io::Result<(Socket, Socket)>
new_raw	$RUST/src/sys/pal/hermit/net.rs	/^    pub fn new_raw(fam: i32, ty: i32) -> io::Result<Socket> {$/;"	P	implementation:Socket	signature:(fam: i32, ty: i32) -> io::Result<Socket>
new_raw	$RUST/src/sys/pal/solid/net.rs	/^    pub fn new_raw(fam: c_int, ty: c_int) -> io::Result<Socket> {$/;"	P	implementation:Socket	signature:(fam: c_int, ty: c_int) -> io::Result<Socket>
new_raw	$RUST/src/sys/pal/unix/l4re.rs	/^        pub fn new_raw(_: libc::c_int, _: libc::c_int) -> io::Result<Socket> {$/;"	P	implementation:net::Socket	signature:(_: libc::c_int, _: libc::c_int) -> io::Result<Socket>
new_raw	$RUST/src/sys/pal/unix/net.rs	/^    pub fn new_raw(fam: c_int, ty: c_int) -> io::Result<Socket> {$/;"	P	implementation:Socket	signature:(fam: c_int, ty: c_int) -> io::Result<Socket>
new_rwl	$RUST/src/sys/pal/solid/rwlock.rs	/^fn new_rwl() -> Result<abi::ID, ItronError> {$/;"	f	signature:() -> Result<abi::ID, ItronError>
new_simple	$RUST/src/io/error/repr_bitpacked.rs	/^    pub(super) fn new_simple(kind: ErrorKind) -> Self {$/;"	P	implementation:Repr	signature:(kind: ErrorKind) -> Self
new_simple	$RUST/src/io/error/repr_unpacked.rs	/^    pub(super) fn new_simple(kind: ErrorKind) -> Self {$/;"	P	implementation:Repr	signature:(kind: ErrorKind) -> Self
new_simple_message	$RUST/src/io/error/repr_bitpacked.rs	/^    pub(super) const fn new_simple_message(m: &'static SimpleMessage) -> Self {$/;"	P	implementation:Repr	signature:(m: &'static SimpleMessage) -> Self
new_simple_message	$RUST/src/io/error/repr_unpacked.rs	/^    pub(super) const fn new_simple_message(m: &'static SimpleMessage) -> Self {$/;"	P	implementation:Repr	signature:(m: &'static SimpleMessage) -> Self
new_uninit_bytes	$RUST/src/sys/pal/sgx/abi/usercalls/alloc.rs	/^    fn new_uninit_bytes(size: usize) -> Self {$/;"	f	signature:(size: usize) -> Self
new_userref	$RUST/src/sys/pal/sgx/abi/usercalls/alloc.rs	/^    unsafe fn new_userref(v: T) -> Self;$/;"	P	interface:NewUserRef	signature:(v: T) -> Self
new_with_coreid	$RUST/src/sys/pal/hermit/thread.rs	/^    pub unsafe fn new_with_coreid($/;"	P	implementation:Thread	signature:( stack: usize, p: Box<dyn FnOnce()>, core_id: isize, ) -> io::Result<Thread>
new_with_source	$RUST/src/error/tests.rs	/^    fn new_with_source<E>(message: D, source: E) -> GenericError<D>$/;"	P	implementation:GenericError	signature:<E>(message: D, source: E) -> GenericError<D> where E: Error + 'static,
new_wrapped	$RUST/src/io/buffered/mod.rs	/^    fn new_wrapped<W2>(self, f: impl FnOnce(W) -> W2) -> IntoInnerError<W2> {$/;"	P	implementation:IntoInnerError	signature:<W2>(self, f: impl FnOnce(W) -> W2) -> IntoInnerError<W2>
next	$RUST/src/collections/hash/map.rs	/^    fn next(&mut self) -> Option<V> {$/;"	P	implementation:IntoValues	signature:(&mut self) -> Option<V>
next	$RUST/src/collections/hash/set.rs	/^    fn next(&mut self) -> Option<K> {$/;"	f	signature:(&mut self) -> Option<K>
next	$RUST/src/env.rs	/^    fn next(&mut self) -> Option<String> {$/;"	P	implementation:Args	signature:(&mut self) -> Option<String>
next	$RUST/src/fs.rs	/^    fn next(&mut self) -> Option<io::Result<DirEntry>> {$/;"	P	implementation:ReadDir	signature:(&mut self) -> Option<io::Result<DirEntry>>
next	$RUST/src/io/mod.rs	/^    fn next(&mut self) -> Option<Result<u8>> {$/;"	P	implementation:Bytes	signature:(&mut self) -> Option<Result<u8>>
next	$RUST/src/net/tcp.rs	/^    fn next(&mut self) -> Option<io::Result<TcpStream>> {$/;"	P	implementation:IntoIncoming	signature:(&mut self) -> Option<io::Result<TcpStream>>
next	$RUST/src/os/unix/net/ancillary.rs	/^    fn next(&mut self) -> Option<T> {$/;"	P	implementation:AncillaryDataIter	signature:(&mut self) -> Option<T>
next	$RUST/src/os/unix/net/listener.rs	/^    fn next(&mut self) -> Option<io::Result<UnixStream>> {$/;"	P	implementation:Incoming	signature:(&mut self) -> Option<io::Result<UnixStream>>
next	$RUST/src/path.rs	/^    next: Option<&'a Path>,$/;"	m	struct:Ancestors
next	$RUST/src/process.rs	/^    fn next(&mut self) -> Option<&'a OsStr> {$/;"	P	implementation:CommandArgs	signature:(&mut self) -> Option<&'a OsStr>
next	$RUST/src/sync/mpmc/list.rs	/^    next: AtomicPtr<Block<T>>,$/;"	m	struct:Block
next	$RUST/src/sync/mpsc/mod.rs	/^    fn next(&mut self) -> Option<T> {$/;"	P	implementation:TryIter	signature:(&mut self) -> Option<T>
next	$RUST/src/sys/pal/hermit/args.rs	/^    fn next(&mut self) -> Option<OsString> {$/;"	P	implementation:Args	signature:(&mut self) -> Option<OsString>
next	$RUST/src/sys/pal/hermit/fs.rs	/^    fn next(&mut self) -> Option<io::Result<DirEntry>> {$/;"	P	implementation:ReadDir	signature:(&mut self) -> Option<io::Result<DirEntry>>
next	$RUST/src/sys/pal/hermit/os.rs	/^    fn next(&mut self) -> Option<PathBuf> {$/;"	P	implementation:SplitPaths	signature:(&mut self) -> Option<PathBuf>
next	$RUST/src/sys/pal/itron/condvar.rs	/^        next: Option<NonNull<Waiter>>,$/;"	m	struct:waiter_queue::Waiter
next	$RUST/src/sys/pal/sgx/abi/tls/sync_bitset.rs	/^    fn next(&mut self) -> Option<usize> {$/;"	P	implementation:SyncBitsetIter	signature:(&mut self) -> Option<usize>
next	$RUST/src/sys/pal/sgx/abi/usercalls/alloc.rs	/^    fn next(&mut self) -> Option<Self::Item> {$/;"	P	implementation:IterMut	signature:(&mut self) -> Option<Self::Item>
next	$RUST/src/sys/pal/sgx/args.rs	/^    fn next(&mut self) -> Option<OsString> {$/;"	P	implementation:Args	signature:(&mut self) -> Option<OsString>
next	$RUST/src/sys/pal/sgx/net.rs	/^    fn next(&mut self) -> Option<SocketAddr> {$/;"	P	implementation:LookupHost	signature:(&mut self) -> Option<SocketAddr>
next	$RUST/src/sys/pal/sgx/os.rs	/^    fn next(&mut self) -> Option<PathBuf> {$/;"	P	implementation:SplitPaths	signature:(&mut self) -> Option<PathBuf>
next	$RUST/src/sys/pal/sgx/waitqueue/unsafe_list.rs	/^    next: NonNull<UnsafeListEntry<T>>,$/;"	m	struct:UnsafeListEntry
next	$RUST/src/sys/pal/solid/fs.rs	/^    fn next(&mut self) -> Option<io::Result<DirEntry>> {$/;"	P	implementation:ReadDir	signature:(&mut self) -> Option<io::Result<DirEntry>>
next	$RUST/src/sys/pal/solid/os.rs	/^    fn next(&mut self) -> Option<PathBuf> {$/;"	P	implementation:SplitPaths	signature:(&mut self) -> Option<PathBuf>
next	$RUST/src/sys/pal/teeos/net.rs	/^    fn next(&mut self) -> Option<SocketAddr> {$/;"	P	implementation:LookupHost	signature:(&mut self) -> Option<SocketAddr>
next	$RUST/src/sys/pal/teeos/os.rs	/^    fn next(&mut self) -> Option<PathBuf> {$/;"	P	implementation:SplitPaths	signature:(&mut self) -> Option<PathBuf>
next	$RUST/src/sys/pal/uefi/args.rs	/^    fn next(&mut self) -> Option<OsString> {$/;"	P	implementation:Args	signature:(&mut self) -> Option<OsString>
next	$RUST/src/sys/pal/uefi/os.rs	/^    fn next(&mut self) -> Option<PathBuf> {$/;"	P	implementation:SplitPaths	signature:(&mut self) -> Option<PathBuf>
next	$RUST/src/sys/pal/unix/args.rs	/^    fn next(&mut self) -> Option<OsString> {$/;"	P	implementation:Args	signature:(&mut self) -> Option<OsString>
next	$RUST/src/sys/pal/unix/fs.rs	/^    fn next(&mut self) -> Option<io::Result<DirEntry>> {$/;"	P	implementation:ReadDir	signature:(&mut self) -> Option<io::Result<DirEntry>>
next	$RUST/src/sys/pal/unix/l4re.rs	/^        fn next(&mut self) -> Option<SocketAddr> {$/;"	P	implementation:net::LookupHost	signature:(&mut self) -> Option<SocketAddr>
next	$RUST/src/sys/pal/unix/os.rs	/^    fn next(&mut self) -> Option<PathBuf> {$/;"	P	implementation:SplitPaths	signature:(&mut self) -> Option<PathBuf>
next	$RUST/src/sys/pal/unix/process/process_common.rs	/^    fn next(&mut self) -> Option<&'a OsStr> {$/;"	P	implementation:CommandArgs	signature:(&mut self) -> Option<&'a OsStr>
next	$RUST/src/sys/pal/unsupported/args.rs	/^    fn next(&mut self) -> Option<OsString> {$/;"	P	implementation:Args	signature:(&mut self) -> Option<OsString>
next	$RUST/src/sys/pal/unsupported/fs.rs	/^    fn next(&mut self) -> Option<io::Result<DirEntry>> {$/;"	P	implementation:ReadDir	signature:(&mut self) -> Option<io::Result<DirEntry>>
next	$RUST/src/sys/pal/unsupported/net.rs	/^    fn next(&mut self) -> Option<SocketAddr> {$/;"	P	implementation:LookupHost	signature:(&mut self) -> Option<SocketAddr>
next	$RUST/src/sys/pal/unsupported/os.rs	/^    fn next(&mut self) -> Option<PathBuf> {$/;"	P	implementation:SplitPaths	signature:(&mut self) -> Option<PathBuf>
next	$RUST/src/sys/pal/unsupported/process.rs	/^    fn next(&mut self) -> Option<&'a OsStr> {$/;"	P	implementation:CommandArgs	signature:(&mut self) -> Option<&'a OsStr>
next	$RUST/src/sys/pal/wasi/args.rs	/^    fn next(&mut self) -> Option<OsString> {$/;"	P	implementation:Args	signature:(&mut self) -> Option<OsString>
next	$RUST/src/sys/pal/wasi/fs.rs	/^    fn next(&mut self) -> Option<io::Result<DirEntry>> {$/;"	P	implementation:ReadDir	signature:(&mut self) -> Option<io::Result<DirEntry>>
next	$RUST/src/sys/pal/wasi/net.rs	/^    fn next(&mut self) -> Option<SocketAddr> {$/;"	P	implementation:LookupHost	signature:(&mut self) -> Option<SocketAddr>
next	$RUST/src/sys/pal/wasi/os.rs	/^    fn next(&mut self) -> Option<PathBuf> {$/;"	P	implementation:SplitPaths	signature:(&mut self) -> Option<PathBuf>
next	$RUST/src/sys/pal/windows/args.rs	/^    fn next(&mut self) -> Option<OsString> {$/;"	P	implementation:Args	signature:(&mut self) -> Option<OsString>
next	$RUST/src/sys/pal/windows/fs.rs	/^    fn next(&mut self) -> Option<io::Result<DirEntry>> {$/;"	P	implementation:ReadDir	signature:(&mut self) -> Option<io::Result<DirEntry>>
next	$RUST/src/sys/pal/windows/os.rs	/^    fn next(&mut self) -> Option<PathBuf> {$/;"	P	implementation:SplitPaths	signature:(&mut self) -> Option<PathBuf>
next	$RUST/src/sys/pal/windows/process.rs	/^    fn next(&mut self) -> Option<&'a OsStr> {$/;"	P	implementation:CommandArgs	signature:(&mut self) -> Option<&'a OsStr>
next	$RUST/src/sys/pal/windows/thread_local_key.rs	/^    next: AtomicPtr<StaticKey>,$/;"	m	struct:StaticKey
next	$RUST/src/sys/pal/xous/net/dns.rs	/^    fn next(&mut self) -> Option<SocketAddr> {$/;"	P	implementation:LookupHost	signature:(&mut self) -> Option<SocketAddr>
next	$RUST/src/sys/pal/xous/os.rs	/^    fn next(&mut self) -> Option<PathBuf> {$/;"	P	implementation:SplitPaths	signature:(&mut self) -> Option<PathBuf>
next	$RUST/src/sys/pal/xous/thread_local_key.rs	/^    next: *mut Node,$/;"	m	struct:Node
next	$RUST/src/sys/pal/zkvm/args.rs	/^    fn next(&mut self) -> Option<OsString> {$/;"	P	implementation:Args	signature:(&mut self) -> Option<OsString>
next	$RUST/src/sys/pal/zkvm/os.rs	/^    fn next(&mut self) -> Option<PathBuf> {$/;"	P	implementation:SplitPaths	signature:(&mut self) -> Option<PathBuf>
next	$RUST/src/sys_common/net.rs	/^    fn next(&mut self) -> Option<SocketAddr> {$/;"	P	implementation:LookupHost	signature:(&mut self) -> Option<SocketAddr>
next	$RUST/src/sys_common/once/queue.rs	/^    next: *const Waiter,$/;"	m	struct:Waiter
next	$RUST/src/sys_common/process.rs	/^    fn next(&mut self) -> Option<Self::Item> {$/;"	P	implementation:CommandEnvs	signature:(&mut self) -> Option<Self::Item>
next	$RUST/src/sys_common/wstr.rs	/^    fn next(&mut self) -> Option<NonZeroU16> {$/;"	P	implementation:WStrUnits	signature:(&mut self) -> Option<NonZeroU16>
next	$RUST/src/sys_common/wtf8.rs	/^    fn next(&mut self) -> Option<u16> {$/;"	P	implementation:EncodeWide	signature:(&mut self) -> Option<u16>
next_back	$RUST/src/env.rs	/^    fn next_back(&mut self) -> Option<String> {$/;"	P	implementation:Args	signature:(&mut self) -> Option<String>
next_back	$RUST/src/path.rs	/^    fn next_back(&mut self) -> Option<Component<'a>> {$/;"	P	implementation:Components	signature:(&mut self) -> Option<Component<'a>>
next_back	$RUST/src/sys/pal/hermit/args.rs	/^    fn next_back(&mut self) -> Option<OsString> {$/;"	P	implementation:Args	signature:(&mut self) -> Option<OsString>
next_back	$RUST/src/sys/pal/sgx/args.rs	/^    fn next_back(&mut self) -> Option<OsString> {$/;"	P	implementation:Args	signature:(&mut self) -> Option<OsString>
next_back	$RUST/src/sys/pal/uefi/args.rs	/^    fn next_back(&mut self) -> Option<OsString> {$/;"	P	implementation:Args	signature:(&mut self) -> Option<OsString>
next_back	$RUST/src/sys/pal/unix/args.rs	/^    fn next_back(&mut self) -> Option<OsString> {$/;"	P	implementation:Args	signature:(&mut self) -> Option<OsString>
next_back	$RUST/src/sys/pal/unsupported/args.rs	/^    fn next_back(&mut self) -> Option<OsString> {$/;"	P	implementation:Args	signature:(&mut self) -> Option<OsString>
next_back	$RUST/src/sys/pal/wasi/args.rs	/^    fn next_back(&mut self) -> Option<OsString> {$/;"	P	implementation:Args	signature:(&mut self) -> Option<OsString>
next_back	$RUST/src/sys/pal/windows/args.rs	/^    fn next_back(&mut self) -> Option<OsString> {$/;"	P	implementation:Args	signature:(&mut self) -> Option<OsString>
next_back	$RUST/src/sys/pal/zkvm/args.rs	/^    fn next_back(&mut self) -> Option<OsString> {$/;"	P	implementation:Args	signature:(&mut self) -> Option<OsString>
next_surrogate	$RUST/src/sys_common/wtf8.rs	/^    fn next_surrogate(&self, mut pos: usize) -> Option<(usize, u16)> {$/;"	P	implementation:Wtf8	signature:(&self, mut pos: usize) -> Option<(usize, u16)>
next_test_ip4	$RUST/src/net/test.rs	/^pub fn next_test_ip4() -> SocketAddr {$/;"	f	signature:() -> SocketAddr
next_test_ip6	$RUST/src/net/test.rs	/^pub fn next_test_ip6() -> SocketAddr {$/;"	f	signature:() -> SocketAddr
nlink	$RUST/src/os/unix/fs.rs	/^    fn nlink(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
nlink	$RUST/src/os/wasi/fs.rs	/^    fn nlink(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
nlink_t	$RUST/src/os/android/raw.rs	/^    pub type nlink_t = u32;$/;"	t	module:arch
nlink_t	$RUST/src/os/dragonfly/raw.rs	/^pub type nlink_t = u64;$/;"	t
nlink_t	$RUST/src/os/emscripten/raw.rs	/^pub type nlink_t = u64;$/;"	t
nlink_t	$RUST/src/os/espidf/raw.rs	/^pub type nlink_t = libc::nlink_t;$/;"	t
nlink_t	$RUST/src/os/freebsd/raw.rs	/^pub type nlink_t = u64;$/;"	t
nlink_t	$RUST/src/os/fuchsia/raw.rs	/^    pub type nlink_t = u64;$/;"	t	module:arch
nlink_t	$RUST/src/os/haiku/raw.rs	/^pub type nlink_t = i32;$/;"	t
nlink_t	$RUST/src/os/horizon/raw.rs	/^pub type nlink_t = libc::nlink_t;$/;"	t
nlink_t	$RUST/src/os/hurd/raw.rs	/^pub type nlink_t = c_ulong;$/;"	t
nlink_t	$RUST/src/os/illumos/raw.rs	/^pub type nlink_t = u64;$/;"	t
nlink_t	$RUST/src/os/ios/raw.rs	/^pub type nlink_t = u64;$/;"	t
nlink_t	$RUST/src/os/l4re/raw.rs	/^    pub type nlink_t = u64;$/;"	t	module:arch
nlink_t	$RUST/src/os/linux/raw.rs	/^    pub type nlink_t = u64;$/;"	t	module:arch
nlink_t	$RUST/src/os/macos/raw.rs	/^pub type nlink_t = u64;$/;"	t
nlink_t	$RUST/src/os/netbsd/raw.rs	/^pub type nlink_t = u64;$/;"	t
nlink_t	$RUST/src/os/nto/raw.rs	/^    pub type nlink_t = u32;$/;"	t	module:arch
nlink_t	$RUST/src/os/openbsd/raw.rs	/^pub type nlink_t = u64;$/;"	t
nlink_t	$RUST/src/os/redox/raw.rs	/^pub type nlink_t = c_ulong;$/;"	t
nlink_t	$RUST/src/os/solaris/raw.rs	/^pub type nlink_t = u64;$/;"	t
nlink_t	$RUST/src/os/vita/raw.rs	/^pub type nlink_t = libc::nlink_t;$/;"	t
nlink_t	$RUST/src/os/watchos/raw.rs	/^pub type nlink_t = u64;$/;"	t
no_lookup_host_duplicates	$RUST/src/sys_common/net/tests.rs	/^fn no_lookup_host_duplicates() {$/;"	f	signature:()
no_match	$RUST/src/sys_common/memchr/tests.rs	/^fn no_match() {$/;"	f	signature:()
no_match_empty	$RUST/src/sys_common/memchr/tests.rs	/^fn no_match_empty() {$/;"	f	signature:()
no_match_empty_reversed	$RUST/src/sys_common/memchr/tests.rs	/^fn no_match_empty_reversed() {$/;"	f	signature:()
no_match_reversed	$RUST/src/sys_common/memchr/tests.rs	/^fn no_match_reversed() {$/;"	f	signature:()
no_runtime	$RUST/src/sync/mpsc/tests.rs	/^fn no_runtime() {$/;"	f	signature:()
nodelay	$RUST/src/net/tcp.rs	/^    pub fn nodelay(&self) -> io::Result<bool> {$/;"	P	implementation:TcpStream	signature:(&self) -> io::Result<bool>
nodelay	$RUST/src/net/tcp/tests.rs	/^fn nodelay() {$/;"	f	signature:()
nodelay	$RUST/src/sys/pal/hermit/net.rs	/^    pub fn nodelay(&self) -> io::Result<bool> {$/;"	P	implementation:Socket	signature:(&self) -> io::Result<bool>
nodelay	$RUST/src/sys/pal/sgx/net.rs	/^    pub fn nodelay(&self) -> io::Result<bool> {$/;"	P	implementation:TcpStream	signature:(&self) -> io::Result<bool>
nodelay	$RUST/src/sys/pal/solid/net.rs	/^    pub fn nodelay(&self) -> io::Result<bool> {$/;"	P	implementation:Socket	signature:(&self) -> io::Result<bool>
nodelay	$RUST/src/sys/pal/teeos/net.rs	/^    pub fn nodelay(&self) -> io::Result<bool> {$/;"	P	implementation:TcpStream	signature:(&self) -> io::Result<bool>
nodelay	$RUST/src/sys/pal/unix/l4re.rs	/^        pub fn nodelay(&self) -> io::Result<bool> {$/;"	P	implementation:net::TcpStream	signature:(&self) -> io::Result<bool>
nodelay	$RUST/src/sys/pal/unix/net.rs	/^    pub fn nodelay(&self) -> io::Result<bool> {$/;"	P	implementation:Socket	signature:(&self) -> io::Result<bool>
nodelay	$RUST/src/sys/pal/unsupported/net.rs	/^    pub fn nodelay(&self) -> io::Result<bool> {$/;"	P	implementation:TcpStream	signature:(&self) -> io::Result<bool>
nodelay	$RUST/src/sys/pal/wasi/net.rs	/^    pub fn nodelay(&self) -> io::Result<bool> {$/;"	P	implementation:TcpStream	signature:(&self) -> io::Result<bool>
nodelay	$RUST/src/sys/pal/windows/net.rs	/^    pub fn nodelay(&self) -> io::Result<bool> {$/;"	P	implementation:Socket	signature:(&self) -> io::Result<bool>
nodelay	$RUST/src/sys/pal/xous/net/tcpstream.rs	/^    pub fn nodelay(&self) -> io::Result<bool> {$/;"	P	implementation:TcpStream	signature:(&self) -> io::Result<bool>
nodelay	$RUST/src/sys_common/net.rs	/^    pub fn nodelay(&self) -> io::Result<bool> {$/;"	P	implementation:TcpStream	signature:(&self) -> io::Result<bool>
non_zero_u16	$RUST/src/sys/pal/windows/args.rs	/^const fn non_zero_u16(n: u16) -> NonZeroU16 {$/;"	f	signature:(n: u16) -> NonZeroU16
nonblock	$RUST/src/os/wasi/fs.rs	/^    fn nonblock(&mut self, nonblock: bool) -> &mut Self;$/;"	P	interface:OpenOptionsExt	signature:(&mut self, nonblock: bool) -> &mut Self
nonblock	$RUST/src/sys/pal/wasi/fs.rs	/^    pub fn nonblock(&mut self, set: bool) {$/;"	P	implementation:OpenOptions	signature:(&mut self, set: bool)
nonblocking	$RUST/src/sys/pal/hermit/fd.rs	/^    pub fn nonblocking(&self) -> io::Result<bool> {$/;"	P	implementation:FileDesc	signature:(&self) -> io::Result<bool>
nonblocking	$RUST/src/sys/pal/xous/net/tcplistener.rs	/^    nonblocking: Arc<AtomicBool>,$/;"	m	struct:TcpListener
nonblocking	$RUST/src/sys/pal/xous/net/tcpstream.rs	/^    nonblocking: Arc<AtomicBool>,$/;"	m	struct:TcpStream
nonblocking	$RUST/src/sys/pal/xous/net/udp.rs	/^    nonblocking: Cell<bool>,$/;"	m	struct:UdpSocket
not	$RUST/src/os/xous/ffi/definitions/memoryflags.rs	/^    fn not(self) -> Self {$/;"	P	implementation:MemoryFlags	signature:(self) -> Self
notified_tcs	$RUST/src/sys/pal/sgx/waitqueue/mod.rs	/^    pub fn notified_tcs(&self) -> NotifiedTcs {$/;"	P	implementation:WaitGuard	signature:(&self) -> NotifiedTcs
notify	$RUST/src/sync/mpmc/waker.rs	/^    pub(crate) fn notify(&self) {$/;"	P	implementation:SyncWaker	signature:(&self)
notify	$RUST/src/sys/pal/sgx/thread.rs	/^        pub fn notify(self) {$/;"	P	implementation:wait_notify::Notifier	signature:(self)
notify	$RUST/src/thread/local/tests.rs	/^    fn notify(&self) {$/;"	P	implementation:Signal	signature:(&self)
notify_all	$RUST/src/sync/condvar.rs	/^    pub fn notify_all(&self) {$/;"	P	implementation:Condvar	signature:(&self)
notify_all	$RUST/src/sync/condvar/tests.rs	/^fn notify_all() {$/;"	f	signature:()
notify_all	$RUST/src/sys/pal/itron/condvar.rs	/^    pub fn notify_all(&self) {$/;"	P	implementation:Condvar	signature:(&self)
notify_all	$RUST/src/sys/pal/sgx/condvar.rs	/^    pub fn notify_all(&self) {$/;"	P	implementation:Condvar	signature:(&self)
notify_all	$RUST/src/sys/pal/sgx/waitqueue/mod.rs	/^    pub fn notify_all<T>($/;"	P	implementation:WaitQueue	signature:<T>( mut guard: SpinMutexGuard<'_, WaitVariable<T>>, ) -> Result<WaitGuard<'_, T>, SpinMutexGuard<'_, WaitVariable<T>>>
notify_all	$RUST/src/sys/pal/teeos/locks/condvar.rs	/^    pub fn notify_all(&self) {$/;"	P	implementation:Condvar	signature:(&self)
notify_all	$RUST/src/sys/pal/unix/locks/futex_condvar.rs	/^    pub fn notify_all(&self) {$/;"	P	implementation:Condvar	signature:(&self)
notify_all	$RUST/src/sys/pal/unix/locks/pthread_condvar.rs	/^    pub fn notify_all(&self) {$/;"	P	implementation:Condvar	signature:(&self)
notify_all	$RUST/src/sys/pal/unsupported/locks/condvar.rs	/^    pub fn notify_all(&self) {}$/;"	P	implementation:Condvar	signature:(&self)
notify_all	$RUST/src/sys/pal/windows/locks/condvar.rs	/^    pub fn notify_all(&self) {$/;"	P	implementation:Condvar	signature:(&self)
notify_all	$RUST/src/sys/pal/xous/locks/condvar.rs	/^    pub fn notify_all(&self) {$/;"	P	implementation:Condvar	signature:(&self)
notify_one	$RUST/src/sync/condvar.rs	/^    pub fn notify_one(&self) {$/;"	P	implementation:Condvar	signature:(&self)
notify_one	$RUST/src/sync/condvar/tests.rs	/^fn notify_one() {$/;"	f	signature:()
notify_one	$RUST/src/sys/pal/itron/condvar.rs	/^    pub fn notify_one(&self) {$/;"	P	implementation:Condvar	signature:(&self)
notify_one	$RUST/src/sys/pal/sgx/condvar.rs	/^    pub fn notify_one(&self) {$/;"	P	implementation:Condvar	signature:(&self)
notify_one	$RUST/src/sys/pal/sgx/waitqueue/mod.rs	/^    pub fn notify_one<T>($/;"	P	implementation:WaitQueue	signature:<T>( mut guard: SpinMutexGuard<'_, WaitVariable<T>>, ) -> Result<WaitGuard<'_, T>, SpinMutexGuard<'_, WaitVariable<T>>>
notify_one	$RUST/src/sys/pal/teeos/locks/condvar.rs	/^    pub fn notify_one(&self) {$/;"	P	implementation:Condvar	signature:(&self)
notify_one	$RUST/src/sys/pal/unix/locks/futex_condvar.rs	/^    pub fn notify_one(&self) {$/;"	P	implementation:Condvar	signature:(&self)
notify_one	$RUST/src/sys/pal/unix/locks/pthread_condvar.rs	/^    pub fn notify_one(&self) {$/;"	P	implementation:Condvar	signature:(&self)
notify_one	$RUST/src/sys/pal/unix/thread_parking/pthread.rs	/^unsafe fn notify_one(cond: *mut libc::pthread_cond_t) {$/;"	f	signature:(cond: *mut libc::pthread_cond_t)
notify_one	$RUST/src/sys/pal/unsupported/locks/condvar.rs	/^    pub fn notify_one(&self) {}$/;"	P	implementation:Condvar	signature:(&self)
notify_one	$RUST/src/sys/pal/windows/locks/condvar.rs	/^    pub fn notify_one(&self) {$/;"	P	implementation:Condvar	signature:(&self)
notify_one	$RUST/src/sys/pal/xous/locks/condvar.rs	/^    pub fn notify_one(&self) {$/;"	P	implementation:Condvar	signature:(&self)
notify_some	$RUST/src/sys/pal/xous/locks/condvar.rs	/^    fn notify_some(&self, to_notify: usize) {$/;"	P	implementation:Condvar	signature:(&self, to_notify: usize)
now	$RUST/src/sys/pal/hermit/time.rs	/^    pub fn now() -> SystemTime {$/;"	P	implementation:SystemTime	signature:() -> SystemTime
now	$RUST/src/sys/pal/itron/time.rs	/^    pub fn now() -> Instant {$/;"	P	implementation:Instant	signature:() -> Instant
now	$RUST/src/sys/pal/sgx/time.rs	/^    pub fn now() -> SystemTime {$/;"	P	implementation:SystemTime	signature:() -> SystemTime
now	$RUST/src/sys/pal/solid/time.rs	/^    pub fn now() -> SystemTime {$/;"	P	implementation:SystemTime	signature:() -> SystemTime
now	$RUST/src/sys/pal/unix/time.rs	/^    pub fn now(clock: libc::clockid_t) -> Timespec {$/;"	P	implementation:Timespec	signature:(clock: libc::clockid_t) -> Timespec
now	$RUST/src/sys/pal/unsupported/time.rs	/^    pub fn now() -> SystemTime {$/;"	P	implementation:SystemTime	signature:() -> SystemTime
now	$RUST/src/sys/pal/wasi/time.rs	/^    pub fn now() -> SystemTime {$/;"	P	implementation:SystemTime	signature:() -> SystemTime
now	$RUST/src/sys/pal/windows/time.rs	/^    pub fn now() -> SystemTime {$/;"	P	implementation:SystemTime	signature:() -> SystemTime
now	$RUST/src/sys/pal/xous/time.rs	/^    pub fn now() -> SystemTime {$/;"	P	implementation:SystemTime	signature:() -> SystemTime
now	$RUST/src/time.rs	/^    pub fn now() -> SystemTime {$/;"	P	implementation:SystemTime	signature:() -> SystemTime
nt_success	$RUST/src/sys/pal/windows/c.rs	/^pub fn nt_success(status: NTSTATUS) -> bool {$/;"	f	signature:(status: NTSTATUS) -> bool
nto	$RUST/src/os/mod.rs	/^pub mod nto;$/;"	n
ntstatus_error	$RUST/src/sys/pal/windows/os/tests.rs	/^fn ntstatus_error() {$/;"	f	signature:()
null	$RUST/src/process.rs	/^    pub fn null() -> Stdio {$/;"	P	implementation:Stdio	signature:() -> Stdio
null	$RUST/src/sys/pal/unix/stack_overflow.rs	/^    fn null() -> Handler {$/;"	P	implementation:Handler	signature:() -> Handler
num	$RUST/src/lib.rs	/^pub mod num;$/;"	n
num_fds	$RUST/src/sys/pal/solid/abi/sockets.rs	/^    pub num_fds: usize,$/;"	m	struct:fd_set
num_readers	$RUST/src/sys/pal/unix/locks/pthread_rwlock.rs	/^    num_readers: AtomicUsize,$/;"	m	struct:AllocatedRwLock
num_running_threads	$RUST/src/thread/scoped.rs	/^    num_running_threads: AtomicUsize,$/;"	m	struct:ScopeData
num_threads	$RUST/src/sync/barrier.rs	/^    num_threads: usize,$/;"	m	struct:Barrier
number_of_links	$RUST/src/os/windows/fs.rs	/^    fn number_of_links(&self) -> Option<u32>;$/;"	P	interface:MetadataExt	signature:(&self) -> Option<u32>
number_of_links	$RUST/src/sys/pal/windows/fs.rs	/^    pub fn number_of_links(&self) -> Option<u32> {$/;"	P	implementation:FileAttr	signature:(&self) -> Option<u32>
objc_getClass	$RUST/src/sys/pal/unix/args.rs	/^            fn objc_getClass(class_name: *const c_char) -> NsId;$/;"	f	function:imp::args	signature:(class_name: *const c_char) -> NsId
objc_msgSend	$RUST/src/sys/pal/unix/args.rs	/^            fn objc_msgSend();$/;"	f	function:imp::args	signature:()
observed_buffer	$RUST/src/io/copy/tests.rs	/^    observed_buffer: usize,$/;"	m	struct:WriteObserver
observers	$RUST/src/sync/mpmc/waker.rs	/^    observers: Vec<Entry>,$/;"	m	struct:Waker
off_t	$RUST/src/os/android/raw.rs	/^    pub type off_t = i64;$/;"	t	module:arch
off_t	$RUST/src/os/dragonfly/raw.rs	/^pub type off_t = u64;$/;"	t
off_t	$RUST/src/os/emscripten/raw.rs	/^pub type off_t = u64;$/;"	t
off_t	$RUST/src/os/espidf/raw.rs	/^pub type off_t = libc::off_t;$/;"	t
off_t	$RUST/src/os/freebsd/raw.rs	/^pub type off_t = u64;$/;"	t
off_t	$RUST/src/os/fuchsia/raw.rs	/^    pub type off_t = u64;$/;"	t	module:arch
off_t	$RUST/src/os/haiku/raw.rs	/^pub type off_t = i64;$/;"	t
off_t	$RUST/src/os/horizon/raw.rs	/^pub type off_t = libc::off_t;$/;"	t
off_t	$RUST/src/os/hurd/raw.rs	/^pub type off_t = u64;$/;"	t
off_t	$RUST/src/os/illumos/raw.rs	/^pub type off_t = u64;$/;"	t
off_t	$RUST/src/os/ios/raw.rs	/^pub type off_t = u64;$/;"	t
off_t	$RUST/src/os/l4re/raw.rs	/^    pub type off_t = u64;$/;"	t	module:arch
off_t	$RUST/src/os/linux/raw.rs	/^    pub type off_t = u64;$/;"	t	module:arch
off_t	$RUST/src/os/macos/raw.rs	/^pub type off_t = u64;$/;"	t
off_t	$RUST/src/os/netbsd/raw.rs	/^pub type off_t = u64;$/;"	t
off_t	$RUST/src/os/nto/raw.rs	/^    pub type off_t = i64;$/;"	t	module:arch
off_t	$RUST/src/os/openbsd/raw.rs	/^pub type off_t = u64;$/;"	t
off_t	$RUST/src/os/redox/raw.rs	/^pub type off_t = c_long;$/;"	t
off_t	$RUST/src/os/solaris/raw.rs	/^pub type off_t = u64;$/;"	t
off_t	$RUST/src/os/vita/raw.rs	/^pub type off_t = libc::off_t;$/;"	t
off_t	$RUST/src/os/watchos/raw.rs	/^pub type off_t = u64;$/;"	t
official_examples	$RUST/src/sys/pal/windows/args/tests.rs	/^fn official_examples() {$/;"	f	signature:()
offset	$RUST/src/sync/mpmc/list.rs	/^    offset: usize,$/;"	m	struct:ListToken
offset	$RUST/src/sys/pal/sgx/abi/reloc.rs	/^    offset: T,$/;"	m	struct:Rela
offset	$RUST/src/sys/pal/wasi/fs.rs	/^    offset: usize,$/;"	m	struct:ReadDir
offset	$RUST/src/sys/pal/xous/net/dns.rs	/^    offset: usize,$/;"	m	struct:LookupHost
offset_ptr	$RUST/src/sys/pal/unix/fs.rs	/^                macro_rules! offset_ptr {$/;"	M	method:ReadDir::next
oflag	$RUST/src/sys/pal/wasi/fs.rs	/^    fn oflag(&mut self, bit: wasi::Oflags, set: bool) {$/;"	P	implementation:OpenOptions	signature:(&mut self, bit: wasi::Oflags, set: bool)
oflags	$RUST/src/sys/pal/wasi/fs.rs	/^    oflags: wasi::Oflags,$/;"	m	struct:OpenOptions
on_resolver_failure	$RUST/src/sys/pal/unix/net.rs	/^fn on_resolver_failure() {}$/;"	f	signature:()
on_stack	$RUST/src/sync/mpmc/zero.rs	/^    on_stack: bool,$/;"	m	struct:Packet
on_tls_callback	$RUST/src/sys/pal/windows/thread_local_key.rs	/^unsafe extern "system" fn on_tls_callback(h: c::LPVOID, dwReason: c::DWORD, pv: c::LPVOID) {$/;"	f	signature:(h: c::LPVOID, dwReason: c::DWORD, pv: c::LPVOID)
once	$RUST/src/sync/lazy_lock.rs	/^    once: Once,$/;"	m	struct:LazyLock
once	$RUST/src/sync/mod.rs	/^pub(crate) mod once;$/;"	n
once	$RUST/src/sync/once_lock.rs	/^    once: Once,$/;"	m	struct:OnceLock
once	$RUST/src/sys/pal/teeos/mod.rs	/^pub mod once;$/;"	n
once	$RUST/src/sys/pal/uefi/mod.rs	/^pub mod once;$/;"	n
once	$RUST/src/sys/pal/unsupported/mod.rs	/^pub mod once;$/;"	n
once	$RUST/src/sys/pal/windows/thread_local_key.rs	/^    once: UnsafeCell<c::INIT_ONCE>,$/;"	m	struct:StaticKey
once	$RUST/src/sys/pal/zkvm/mod.rs	/^pub mod once;$/;"	n
once	$RUST/src/sys_common/mod.rs	/^pub mod once;$/;"	n
once_lock	$RUST/src/sync/mod.rs	/^mod once_lock;$/;"	n
one_lap	$RUST/src/sync/mpmc/array.rs	/^    one_lap: usize,$/;"	m	struct:Channel
oneshot_multi_task_recv_then_close	$RUST/src/sync/mpsc/sync_tests.rs	/^fn oneshot_multi_task_recv_then_close() {$/;"	f	signature:()
oneshot_multi_task_recv_then_close	$RUST/src/sync/mpsc/tests.rs	/^fn oneshot_multi_task_recv_then_close() {$/;"	f	signature:()
oneshot_multi_task_recv_then_send	$RUST/src/sync/mpsc/sync_tests.rs	/^fn oneshot_multi_task_recv_then_send() {$/;"	f	signature:()
oneshot_multi_task_recv_then_send	$RUST/src/sync/mpsc/tests.rs	/^fn oneshot_multi_task_recv_then_send() {$/;"	f	signature:()
oneshot_multi_thread_close_stress	$RUST/src/sync/mpsc/sync_tests.rs	/^fn oneshot_multi_thread_close_stress() {$/;"	f	signature:()
oneshot_multi_thread_close_stress	$RUST/src/sync/mpsc/tests.rs	/^fn oneshot_multi_thread_close_stress() {$/;"	f	signature:()
oneshot_multi_thread_recv_close_stress	$RUST/src/sync/mpsc/sync_tests.rs	/^fn oneshot_multi_thread_recv_close_stress() {$/;"	f	signature:()
oneshot_multi_thread_recv_close_stress	$RUST/src/sync/mpsc/tests.rs	/^fn oneshot_multi_thread_recv_close_stress() {$/;"	f	signature:()
oneshot_multi_thread_send_close_stress	$RUST/src/sync/mpsc/sync_tests.rs	/^fn oneshot_multi_thread_send_close_stress() {$/;"	f	signature:()
oneshot_multi_thread_send_close_stress	$RUST/src/sync/mpsc/tests.rs	/^fn oneshot_multi_thread_send_close_stress() {$/;"	f	signature:()
oneshot_multi_thread_send_recv_stress	$RUST/src/sync/mpsc/sync_tests.rs	/^fn oneshot_multi_thread_send_recv_stress() {$/;"	f	signature:()
oneshot_multi_thread_send_recv_stress	$RUST/src/sync/mpsc/tests.rs	/^fn oneshot_multi_thread_send_recv_stress() {$/;"	f	signature:()
oneshot_single_thread_close_chan_first	$RUST/src/sync/mpsc/sync_tests.rs	/^fn oneshot_single_thread_close_chan_first() {$/;"	f	signature:()
oneshot_single_thread_close_chan_first	$RUST/src/sync/mpsc/tests.rs	/^fn oneshot_single_thread_close_chan_first() {$/;"	f	signature:()
oneshot_single_thread_close_port_first	$RUST/src/sync/mpsc/sync_tests.rs	/^fn oneshot_single_thread_close_port_first() {$/;"	f	signature:()
oneshot_single_thread_close_port_first	$RUST/src/sync/mpsc/tests.rs	/^fn oneshot_single_thread_close_port_first() {$/;"	f	signature:()
oneshot_single_thread_peek_close	$RUST/src/sync/mpsc/sync_tests.rs	/^fn oneshot_single_thread_peek_close() {$/;"	f	signature:()
oneshot_single_thread_peek_close	$RUST/src/sync/mpsc/tests.rs	/^fn oneshot_single_thread_peek_close() {$/;"	f	signature:()
oneshot_single_thread_peek_data	$RUST/src/sync/mpsc/sync_tests.rs	/^fn oneshot_single_thread_peek_data() {$/;"	f	signature:()
oneshot_single_thread_peek_data	$RUST/src/sync/mpsc/tests.rs	/^fn oneshot_single_thread_peek_data() {$/;"	f	signature:()
oneshot_single_thread_peek_open	$RUST/src/sync/mpsc/sync_tests.rs	/^fn oneshot_single_thread_peek_open() {$/;"	f	signature:()
oneshot_single_thread_peek_open	$RUST/src/sync/mpsc/tests.rs	/^fn oneshot_single_thread_peek_open() {$/;"	f	signature:()
oneshot_single_thread_recv_chan_close	$RUST/src/sync/mpsc/sync_tests.rs	/^fn oneshot_single_thread_recv_chan_close() {$/;"	f	signature:()
oneshot_single_thread_recv_chan_close	$RUST/src/sync/mpsc/tests.rs	/^fn oneshot_single_thread_recv_chan_close() {$/;"	f	signature:()
oneshot_single_thread_recv_timeout	$RUST/src/sync/mpsc/tests.rs	/^fn oneshot_single_thread_recv_timeout() {$/;"	f	signature:()
oneshot_single_thread_send_port_close	$RUST/src/sync/mpsc/sync_tests.rs	/^fn oneshot_single_thread_send_port_close() {$/;"	f	signature:()
oneshot_single_thread_send_port_close	$RUST/src/sync/mpsc/tests.rs	/^fn oneshot_single_thread_send_port_close() {$/;"	f	signature:()
oneshot_single_thread_send_then_recv	$RUST/src/sync/mpsc/sync_tests.rs	/^fn oneshot_single_thread_send_then_recv() {$/;"	f	signature:()
oneshot_single_thread_send_then_recv	$RUST/src/sync/mpsc/tests.rs	/^fn oneshot_single_thread_send_then_recv() {$/;"	f	signature:()
oneshot_single_thread_try_recv_closed	$RUST/src/sync/mpsc/sync_tests.rs	/^fn oneshot_single_thread_try_recv_closed() {$/;"	f	signature:()
oneshot_single_thread_try_recv_closed	$RUST/src/sync/mpsc/tests.rs	/^fn oneshot_single_thread_try_recv_closed() {$/;"	f	signature:()
oneshot_single_thread_try_recv_closed_with_data	$RUST/src/sync/mpsc/sync_tests.rs	/^fn oneshot_single_thread_try_recv_closed_with_data() {$/;"	f	signature:()
oneshot_single_thread_try_recv_open	$RUST/src/sync/mpsc/sync_tests.rs	/^fn oneshot_single_thread_try_recv_open() {$/;"	f	signature:()
oneshot_single_thread_try_recv_open	$RUST/src/sync/mpsc/tests.rs	/^fn oneshot_single_thread_try_recv_open() {$/;"	f	signature:()
oneshot_single_thread_try_send_closed	$RUST/src/sync/mpsc/sync_tests.rs	/^fn oneshot_single_thread_try_send_closed() {$/;"	f	signature:()
oneshot_single_thread_try_send_closed	$RUST/src/sync/mpsc/tests.rs	/^fn oneshot_single_thread_try_send_closed() {$/;"	f	signature:()
oneshot_single_thread_try_send_closed2	$RUST/src/sync/mpsc/sync_tests.rs	/^fn oneshot_single_thread_try_send_closed2() {$/;"	f	signature:()
oneshot_single_thread_try_send_open	$RUST/src/sync/mpsc/sync_tests.rs	/^fn oneshot_single_thread_try_send_open() {$/;"	f	signature:()
oneshot_single_thread_try_send_open	$RUST/src/sync/mpsc/tests.rs	/^fn oneshot_single_thread_try_send_open() {$/;"	f	signature:()
only_one_source	$RUST/src/error/tests.rs	/^fn only_one_source() {$/;"	f	signature:()
only_v6	$RUST/src/net/tcp.rs	/^    pub fn only_v6(&self) -> io::Result<bool> {$/;"	P	implementation:TcpListener	signature:(&self) -> io::Result<bool>
only_v6	$RUST/src/sys/pal/sgx/net.rs	/^    pub fn only_v6(&self) -> io::Result<bool> {$/;"	P	implementation:TcpListener	signature:(&self) -> io::Result<bool>
only_v6	$RUST/src/sys/pal/teeos/net.rs	/^    pub fn only_v6(&self) -> io::Result<bool> {$/;"	P	implementation:TcpListener	signature:(&self) -> io::Result<bool>
only_v6	$RUST/src/sys/pal/unix/l4re.rs	/^        pub fn only_v6(&self) -> io::Result<bool> {$/;"	P	implementation:net::TcpListener	signature:(&self) -> io::Result<bool>
only_v6	$RUST/src/sys/pal/unsupported/net.rs	/^    pub fn only_v6(&self) -> io::Result<bool> {$/;"	P	implementation:TcpListener	signature:(&self) -> io::Result<bool>
only_v6	$RUST/src/sys/pal/wasi/net.rs	/^    pub fn only_v6(&self) -> io::Result<bool> {$/;"	P	implementation:TcpListener	signature:(&self) -> io::Result<bool>
only_v6	$RUST/src/sys/pal/xous/net/tcplistener.rs	/^    pub fn only_v6(&self) -> io::Result<bool> {$/;"	P	implementation:TcpListener	signature:(&self) -> io::Result<bool>
only_v6	$RUST/src/sys_common/net.rs	/^    pub fn only_v6(&self) -> io::Result<bool> {$/;"	P	implementation:TcpListener	signature:(&self) -> io::Result<bool>
open	$RUST/src/fs.rs	/^    pub fn open<P: AsRef<Path>>(path: P) -> io::Result<File> {$/;"	P	implementation:File	signature:<P: AsRef<Path>>(path: P) -> io::Result<File>
open	$RUST/src/sys/pal/hermit/fs.rs	/^    pub fn open(path: &Path, opts: &OpenOptions) -> io::Result<File> {$/;"	P	implementation:File	signature:(path: &Path, opts: &OpenOptions) -> io::Result<File>
open	$RUST/src/sys/pal/unix/fs.rs	/^    pub fn open(path: &Path, opts: &OpenOptions) -> io::Result<File> {$/;"	P	implementation:File	signature:(path: &Path, opts: &OpenOptions) -> io::Result<File>
open	$RUST/src/sys/pal/unsupported/fs.rs	/^    pub fn open(_path: &Path, _opts: &OpenOptions) -> io::Result<File> {$/;"	P	implementation:File	signature:(_path: &Path, _opts: &OpenOptions) -> io::Result<File>
open	$RUST/src/sys/pal/wasi/fd.rs	/^    pub fn open($/;"	P	implementation:WasiFd	signature:( &self, dirflags: wasi::Lookupflags, path: &str, oflags: wasi::Oflags, fs_rights_base: wasi::Rights, fs_rights_inheriting: wasi::Rights, fs_flags: wasi::Fdflags, ) -> io::Result<WasiFd>
open	$RUST/src/sys/pal/wasi/fs.rs	/^    pub fn open(path: &Path, opts: &OpenOptions) -> io::Result<File> {$/;"	P	implementation:File	signature:(path: &Path, opts: &OpenOptions) -> io::Result<File>
open	$RUST/src/sys/pal/windows/fs.rs	/^    pub fn open(path: &Path, opts: &OpenOptions) -> io::Result<File> {$/;"	P	implementation:File	signature:(path: &Path, opts: &OpenOptions) -> io::Result<File>
open_at	$RUST/src/os/wasi/fs.rs	/^    fn open_at<P: AsRef<Path>>(&self, file: &File, path: P) -> io::Result<File>;$/;"	P	interface:OpenOptionsExt	signature:<P: AsRef<Path>>(&self, file: &File, path: P) -> io::Result<File>
open_at	$RUST/src/sys/pal/wasi/fs.rs	/^fn open_at(fd: &WasiFd, path: &Path, opts: &OpenOptions) -> io::Result<File> {$/;"	f	signature:(fd: &WasiFd, path: &Path, opts: &OpenOptions) -> io::Result<File>
open_c	$RUST/src/sys/pal/hermit/fs.rs	/^    pub fn open_c(path: &CStr, opts: &OpenOptions) -> io::Result<File> {$/;"	P	implementation:File	signature:(path: &CStr, opts: &OpenOptions) -> io::Result<File>
open_c	$RUST/src/sys/pal/unix/fs.rs	/^    pub fn open_c(path: &CStr, opts: &OpenOptions) -> io::Result<File> {$/;"	P	implementation:File	signature:(path: &CStr, opts: &OpenOptions) -> io::Result<File>
open_flavors	$RUST/src/fs/tests.rs	/^fn open_flavors() {$/;"	f	signature:()
open_from	$RUST/src/sys/pal/unix/fs.rs	/^fn open_from(from: &Path) -> io::Result<(crate::fs::File, crate::fs::Metadata)> {$/;"	f	signature:(from: &Path) -> io::Result<(crate::fs::File, crate::fs::Metadata)>
open_link	$RUST/src/sys/pal/windows/fs.rs	/^fn open_link(path: &Path, access_mode: u32) -> io::Result<File> {$/;"	f	signature:(path: &Path, access_mode: u32) -> io::Result<File>
open_link_no_reparse	$RUST/src/sys/pal/windows/fs.rs	/^fn open_link_no_reparse(parent: &File, name: &[u16], access: u32) -> io::Result<File> {$/;"	f	signature:(parent: &File, name: &[u16], access: u32) -> io::Result<File>
open_parent	$RUST/src/sys/pal/wasi/fs.rs	/^fn open_parent(p: &Path) -> io::Result<(ManuallyDrop<WasiFd>, PathBuf)> {$/;"	f	signature:(p: &Path) -> io::Result<(ManuallyDrop<WasiFd>, PathBuf)>
open_protocol	$RUST/src/sys/pal/uefi/helpers.rs	/^pub(crate) fn open_protocol<T>($/;"	f	signature:<T>( handle: NonNull<crate::ffi::c_void>, mut protocol_guid: Guid, ) -> io::Result<NonNull<T>>
open_to_and_set_permissions	$RUST/src/sys/pal/unix/fs.rs	/^fn open_to_and_set_permissions($/;"	f	signature:( to: &Path, reader_metadata: crate::fs::Metadata, ) -> io::Result<(crate::fs::File, crate::fs::Metadata)>
openat	$RUST/src/sys/pal/unix/fs.rs	/^        pub unsafe fn openat(dirfd: c_int, pathname: *const c_char, flags: c_int) -> c_int {$/;"	f	module:remove_dir_impl::macos_weak	signature:(dirfd: c_int, pathname: *const c_char, flags: c_int) -> c_int
openat_nofollow_dironly	$RUST/src/sys/pal/unix/fs.rs	/^    pub fn openat_nofollow_dironly(parent_fd: Option<RawFd>, p: &CStr) -> io::Result<OwnedFd> {$/;"	f	module:remove_dir_impl	signature:(parent_fd: Option<RawFd>, p: &CStr) -> io::Result<OwnedFd>
openbsd	$RUST/src/os/mod.rs	/^pub mod openbsd;$/;"	n
oper	$RUST/src/sync/mpmc/waker.rs	/^    pub(crate) oper: Operation,$/;"	m	struct:Entry
options	$RUST/src/fs.rs	/^    pub fn options() -> OpenOptions {$/;"	P	implementation:File	signature:() -> OpenOptions
or_default	$RUST/src/collections/hash/map.rs	/^    pub fn or_default(self) -> &'a mut V {$/;"	P	implementation:Entry	signature:(self) -> &'a mut V
or_insert	$RUST/src/collections/hash/map.rs	/^    pub fn or_insert(self, default_key: K, default_val: V) -> (&'a mut K, &'a mut V)$/;"	P	implementation:RawEntryMut	signature:(self, default_key: K, default_val: V) -> (&'a mut K, &'a mut V) where K: Hash, S: BuildHasher,
or_insert_with	$RUST/src/collections/hash/map.rs	/^    pub fn or_insert_with<F>(self, default: F) -> (&'a mut K, &'a mut V)$/;"	P	implementation:RawEntryMut	signature:<F>(self, default: F) -> (&'a mut K, &'a mut V) where F: FnOnce() -> (K, V), K: Hash, S: BuildHasher,
or_insert_with_key	$RUST/src/collections/hash/map.rs	/^    pub fn or_insert_with_key<F: FnOnce(&K) -> V>(self, default: F) -> &'a mut V {$/;"	P	implementation:Entry	signature:<F: FnOnce(&K) -> V>(self, default: F) -> &'a mut V
or_panic	$RUST/src/os/unix/net/tests.rs	/^macro_rules! or_panic {$/;"	M
original	$RUST/src/sys/pal/unix/l4re.rs	/^        original: *mut libc::addrinfo,$/;"	m	struct:net::LookupHost
original	$RUST/src/sys_common/net.rs	/^    original: *mut c::addrinfo,$/;"	m	struct:LookupHost
os2c	$RUST/src/sys/pal/unix/process/process_common.rs	/^fn os2c(s: &OsStr, saw_nul: &mut bool) -> CString {$/;"	f	signature:(s: &OsStr, saw_nul: &mut bool) -> CString
os2path	$RUST/src/sys/pal/windows/mod.rs	/^fn os2path(s: &[u16]) -> PathBuf {$/;"	f	signature:(s: &[u16]) -> PathBuf
os_datasync	$RUST/src/sys/pal/unix/fs.rs	/^        unsafe fn os_datasync(fd: c_int) -> c_int {$/;"	f	method:File::datasync	signature:(fd: c_int) -> c_int
os_fsync	$RUST/src/sys/pal/unix/fs.rs	/^        unsafe fn os_fsync(fd: c_int) -> c_int {$/;"	f	method:File::fsync	signature:(fd: c_int) -> c_int
os_str	$RUST/src/ffi/mod.rs	/^mod os_str;$/;"	n
os_str	$RUST/src/os/fortanix_sgx/ffi.rs	/^mod os_str;$/;"	n
os_str	$RUST/src/os/hermit/ffi.rs	/^mod os_str;$/;"	n
os_str	$RUST/src/os/solid/ffi.rs	/^mod os_str;$/;"	n
os_str	$RUST/src/os/unix/ffi/mod.rs	/^mod os_str;$/;"	n
os_str	$RUST/src/os/wasi/ffi.rs	/^mod os_str;$/;"	n
os_str	$RUST/src/os/xous/ffi.rs	/^mod os_str;$/;"	n
os_str	$RUST/src/sys/mod.rs	/^pub mod os_str;$/;"	n
os_str	$RUST/src/sys/pal/zkvm/mod.rs	/^pub mod os_str;$/;"	n
os_str_len	$RUST/src/path.rs	/^        fn os_str_len(s: &OsStr) -> usize {$/;"	f	method:Prefix::len	signature:(s: &OsStr) -> usize
os_string	$RUST/src/sys/pal/windows/process.rs	/^    os_string: OsString,$/;"	m	struct:EnvKey
osstr2str	$RUST/src/os/wasi/fs.rs	/^fn osstr2str(f: &OsStr) -> io::Result<&str> {$/;"	f	signature:(f: &OsStr) -> io::Result<&str>
osstr2str	$RUST/src/sys/pal/wasi/fs.rs	/^pub fn osstr2str(f: &OsStr) -> io::Result<&str> {$/;"	f	signature:(f: &OsStr) -> io::Result<&str>
other	$RUST/src/collections/hash/set.rs	/^    other: &'a HashSet<T, S>,$/;"	m	struct:Intersection
other	$RUST/src/io/error.rs	/^    pub fn other<E>(error: E) -> Error$/;"	P	implementation:Error	signature:<E>(error: E) -> Error where E: Into<Box<dyn error::Error + Send + Sync>>,
ours	$RUST/src/sys/pal/windows/pipe.rs	/^    pub ours: AnonPipe,$/;"	m	struct:Pipes
output	$RUST/src/process.rs	/^    pub fn output(&mut self) -> io::Result<Output> {$/;"	P	implementation:Command	signature:(&mut self) -> io::Result<Output>
output	$RUST/src/sys/pal/unix/process/process_fuchsia.rs	/^    pub fn output(&mut self) -> io::Result<(ExitStatus, Vec<u8>, Vec<u8>)> {$/;"	P	implementation:Command	signature:(&mut self) -> io::Result<(ExitStatus, Vec<u8>, Vec<u8>)>
output	$RUST/src/sys/pal/unix/process/process_unix.rs	/^    pub fn output(&mut self) -> io::Result<(ExitStatus, Vec<u8>, Vec<u8>)> {$/;"	P	implementation:Command	signature:(&mut self) -> io::Result<(ExitStatus, Vec<u8>, Vec<u8>)>
output	$RUST/src/sys/pal/unix/process/process_unsupported.rs	/^    pub fn output(&mut self) -> io::Result<(ExitStatus, Vec<u8>, Vec<u8>)> {$/;"	P	implementation:Command	signature:(&mut self) -> io::Result<(ExitStatus, Vec<u8>, Vec<u8>)>
output	$RUST/src/sys/pal/unix/process/process_vxworks.rs	/^    pub fn output(&mut self) -> io::Result<(ExitStatus, Vec<u8>, Vec<u8>)> {$/;"	P	implementation:Command	signature:(&mut self) -> io::Result<(ExitStatus, Vec<u8>, Vec<u8>)>
output	$RUST/src/sys/pal/unsupported/process.rs	/^    pub fn output(&mut self) -> io::Result<(ExitStatus, Vec<u8>, Vec<u8>)> {$/;"	P	implementation:Command	signature:(&mut self) -> io::Result<(ExitStatus, Vec<u8>, Vec<u8>)>
output	$RUST/src/sys/pal/windows/process.rs	/^    pub fn output(&mut self) -> io::Result<(ExitStatus, Vec<u8>, Vec<u8>)> {$/;"	P	implementation:Command	signature:(&mut self) -> io::Result<(ExitStatus, Vec<u8>, Vec<u8>)>
output_filename	$RUST/src/sys_common/backtrace.rs	/^pub fn output_filename($/;"	f	signature:( fmt: &mut fmt::Formatter<'_>, bows: BytesOrWideString<'_>, print_fmt: PrintFmt, cwd: Option<&PathBuf>, ) -> fmt::Result
overlapped	$RUST/src/sys/pal/windows/pipe.rs	/^    overlapped: Box<c::OVERLAPPED>, \/\/ needs a stable address$/;"	m	struct:AsyncPipe
overlapped_handle_fallback	$RUST/src/sys/pal/windows/handle/tests.rs	/^fn overlapped_handle_fallback() {$/;"	f	signature:()
overlapped_result	$RUST/src/sys/pal/windows/handle.rs	/^    pub fn overlapped_result($/;"	P	implementation:Handle	signature:( &self, overlapped: *mut c::OVERLAPPED, wait: bool, ) -> io::Result<usize>
owned	$RUST/src/os/fd/mod.rs	/^mod owned;$/;"	n
owned	$RUST/src/os/hermit/io/mod.rs	/^mod owned;$/;"	n
owner	$RUST/src/sync/remutex.rs	/^    owner: AtomicUsize,$/;"	m	struct:ReentrantMutex
p_inner	$RUST/src/sys/pal/itron/thread.rs	/^    p_inner: NonNull<ThreadInner>,$/;"	m	struct:Thread
p_thread_callback	$RUST/src/sys/pal/windows/thread_local_key.rs	/^pub static p_thread_callback: unsafe extern "system" fn(c::LPVOID, c::DWORD, c::LPVOID) =$/;"	v
packet	$RUST/src/sync/mpmc/context.rs	/^    packet: AtomicPtr<()>,$/;"	m	struct:Inner
packet	$RUST/src/sync/mpmc/waker.rs	/^    pub(crate) packet: *mut (),$/;"	m	struct:Entry
packet	$RUST/src/thread/mod.rs	/^    packet: Arc<Packet<'scope, T>>,$/;"	m	struct:JoinInner
page_size	$RUST/src/sys/pal/sgx/alloc.rs	/^    fn page_size(&self) -> usize {$/;"	P	implementation:Sgx	signature:(&self) -> usize
page_size	$RUST/src/sys/pal/teeos/os.rs	/^pub fn page_size() -> usize {$/;"	f	signature:() -> usize
page_size	$RUST/src/sys/pal/unix/os.rs	/^pub fn page_size() -> usize {$/;"	f	signature:() -> usize
page_size	$RUST/src/sys/pal/wasi/os.rs	/^pub fn page_size() -> usize {$/;"	f	signature:() -> usize
pair	$RUST/src/os/unix/net/datagram.rs	/^    pub fn pair() -> io::Result<(UnixDatagram, UnixDatagram)> {$/;"	P	implementation:UnixDatagram	signature:() -> io::Result<(UnixDatagram, UnixDatagram)>
pair	$RUST/src/os/unix/net/stream.rs	/^    pub fn pair() -> io::Result<(UnixStream, UnixStream)> {$/;"	P	implementation:UnixStream	signature:() -> io::Result<(UnixStream, UnixStream)>
pair	$RUST/src/os/unix/net/tests.rs	/^fn pair() {$/;"	f	signature:()
pal	$RUST/src/sys/mod.rs	/^mod pal;$/;"	n
panic	$RUST/src/lib.rs	/^pub mod panic;$/;"	n
panic	$RUST/src/macros.rs	/^macro_rules! panic {$/;"	M
panic	$RUST/src/sys/pal/sgx/abi/mod.rs	/^pub(super) mod panic;$/;"	n
panic_any	$RUST/src/panic.rs	/^pub fn panic_any<M: 'static + Any + Send>(msg: M) -> ! {$/;"	f	signature:<M: 'static + Any + Send>(msg: M) -> !
panic_count	$RUST/src/panicking.rs	/^pub mod panic_count {$/;"	n
panic_doesnt_poison	$RUST/src/io/stdio/tests.rs	/^fn panic_doesnt_poison() {$/;"	f	signature:()
panic_in_write_doesnt_flush_in_drop	$RUST/src/io/buffered/tests.rs	/^fn panic_in_write_doesnt_flush_in_drop() {$/;"	f	signature:()
panic_output	$RUST/src/sys/pal/hermit/stdio.rs	/^pub fn panic_output() -> Option<impl io::Write> {$/;"	f	signature:() -> Option<impl io::Write>
panic_output	$RUST/src/sys/pal/sgx/stdio.rs	/^pub fn panic_output() -> Option<impl io::Write> {$/;"	f	signature:() -> Option<impl io::Write>
panic_output	$RUST/src/sys/pal/solid/stdio.rs	/^pub fn panic_output() -> Option<impl io::Write> {$/;"	f	signature:() -> Option<impl io::Write>
panic_output	$RUST/src/sys/pal/teeos/stdio.rs	/^pub fn panic_output() -> Option<impl io::Write> {$/;"	f	signature:() -> Option<impl io::Write>
panic_output	$RUST/src/sys/pal/uefi/stdio.rs	/^pub fn panic_output() -> Option<impl io::Write> {$/;"	f	signature:() -> Option<impl io::Write>
panic_output	$RUST/src/sys/pal/unix/stdio.rs	/^pub fn panic_output() -> Option<impl io::Write> {$/;"	f	signature:() -> Option<impl io::Write>
panic_output	$RUST/src/sys/pal/unsupported/stdio.rs	/^pub fn panic_output() -> Option<Vec<u8>> {$/;"	f	signature:() -> Option<Vec<u8>>
panic_output	$RUST/src/sys/pal/wasi/stdio.rs	/^pub fn panic_output() -> Option<impl io::Write> {$/;"	f	signature:() -> Option<impl io::Write>
panic_output	$RUST/src/sys/pal/windows/stdio.rs	/^pub fn panic_output() -> Option<impl io::Write> {$/;"	f	signature:() -> Option<impl io::Write>
panic_output	$RUST/src/sys/pal/xous/stdio.rs	/^pub fn panic_output() -> Option<impl io::Write> {$/;"	f	signature:() -> Option<impl io::Write>
panic_output	$RUST/src/sys/pal/zkvm/stdio.rs	/^pub fn panic_output() -> Option<impl io::Write> {$/;"	f	signature:() -> Option<impl io::Write>
panic_safety_traits	$RUST/src/panic/tests.rs	/^fn panic_safety_traits() {$/;"	f	signature:()
panicked	$RUST/src/io/buffered/bufwriter.rs	/^    panicked: bool,$/;"	m	struct:BufWriter
panicking	$RUST/src/lib.rs	/^mod panicking;$/;"	n
panicking	$RUST/src/panicking.rs	/^pub fn panicking() -> bool {$/;"	f	signature:() -> bool
panicking	$RUST/src/sync/poison.rs	/^    panicking: bool,$/;"	m	struct:Guard
panicking	$RUST/src/thread/mod.rs	/^pub fn panicking() -> bool {$/;"	f	signature:() -> bool
parent	$RUST/src/path.rs	/^    pub fn parent(&self) -> Option<&Path> {$/;"	P	implementation:Path	signature:(&self) -> Option<&Path>
parent_id	$RUST/src/os/unix/process.rs	/^pub fn parent_id() -> u32 {$/;"	f	signature:() -> u32
park	$RUST/src/sys/pal/itron/thread_parking.rs	/^pub fn park(_hint: usize) {$/;"	f	signature:(_hint: usize)
park	$RUST/src/sys/pal/sgx/thread_parking.rs	/^pub fn park(_hint: usize) {$/;"	f	signature:(_hint: usize)
park	$RUST/src/sys/pal/unix/thread_parking/darwin.rs	/^    pub unsafe fn park(self: Pin<&Self>) {$/;"	P	implementation:Parker	signature:(self: Pin<&Self>)
park	$RUST/src/sys/pal/unix/thread_parking/netbsd.rs	/^pub fn park(hint: usize) {$/;"	f	signature:(hint: usize)
park	$RUST/src/sys/pal/unix/thread_parking/pthread.rs	/^    pub unsafe fn park(self: Pin<&Self>) {$/;"	P	implementation:Parker	signature:(self: Pin<&Self>)
park	$RUST/src/sys/pal/unsupported/thread_parking.rs	/^    pub unsafe fn park(self: Pin<&Self>) {}$/;"	P	implementation:Parker	signature:(self: Pin<&Self>)
park	$RUST/src/sys/pal/windows/thread_parking.rs	/^    pub unsafe fn park(self: Pin<&Self>) {$/;"	P	implementation:Parker	signature:(self: Pin<&Self>)
park	$RUST/src/sys/pal/xous/thread_parking.rs	/^    pub unsafe fn park(self: Pin<&Self>) {$/;"	P	implementation:Parker	signature:(self: Pin<&Self>)
park	$RUST/src/sys_common/thread_parking/futex.rs	/^    pub unsafe fn park(self: Pin<&Self>) {$/;"	P	implementation:Parker	signature:(self: Pin<&Self>)
park	$RUST/src/sys_common/thread_parking/id.rs	/^    pub unsafe fn park(self: Pin<&Self>) {$/;"	P	implementation:Parker	signature:(self: Pin<&Self>)
park	$RUST/src/thread/mod.rs	/^pub fn park() {$/;"	f	signature:()
park_timeout	$RUST/src/sys/pal/itron/thread_parking.rs	/^pub fn park_timeout(dur: Duration, _hint: usize) {$/;"	f	signature:(dur: Duration, _hint: usize)
park_timeout	$RUST/src/sys/pal/sgx/thread_parking.rs	/^pub fn park_timeout(dur: Duration, _hint: usize) {$/;"	f	signature:(dur: Duration, _hint: usize)
park_timeout	$RUST/src/sys/pal/unix/thread_parking/darwin.rs	/^    pub unsafe fn park_timeout(self: Pin<&Self>, dur: Duration) {$/;"	P	implementation:Parker	signature:(self: Pin<&Self>, dur: Duration)
park_timeout	$RUST/src/sys/pal/unix/thread_parking/netbsd.rs	/^pub fn park_timeout(dur: Duration, hint: usize) {$/;"	f	signature:(dur: Duration, hint: usize)
park_timeout	$RUST/src/sys/pal/unix/thread_parking/pthread.rs	/^    pub unsafe fn park_timeout(self: Pin<&Self>, dur: Duration) {$/;"	P	implementation:Parker	signature:(self: Pin<&Self>, dur: Duration)
park_timeout	$RUST/src/sys/pal/unsupported/thread_parking.rs	/^    pub unsafe fn park_timeout(self: Pin<&Self>, _dur: Duration) {}$/;"	P	implementation:Parker	signature:(self: Pin<&Self>, _dur: Duration)
park_timeout	$RUST/src/sys/pal/windows/thread_parking.rs	/^    pub unsafe fn park_timeout(self: Pin<&Self>, timeout: Duration) {$/;"	P	implementation:Parker	signature:(self: Pin<&Self>, timeout: Duration)
park_timeout	$RUST/src/sys/pal/xous/thread_parking.rs	/^    pub unsafe fn park_timeout(self: Pin<&Self>, timeout: Duration) {$/;"	P	implementation:Parker	signature:(self: Pin<&Self>, timeout: Duration)
park_timeout	$RUST/src/sys_common/thread_parking/futex.rs	/^    pub unsafe fn park_timeout(self: Pin<&Self>, timeout: Duration) {$/;"	P	implementation:Parker	signature:(self: Pin<&Self>, timeout: Duration)
park_timeout	$RUST/src/sys_common/thread_parking/id.rs	/^    pub unsafe fn park_timeout(self: Pin<&Self>, dur: Duration) {$/;"	P	implementation:Parker	signature:(self: Pin<&Self>, dur: Duration)
park_timeout	$RUST/src/thread/mod.rs	/^pub fn park_timeout(dur: Duration) {$/;"	f	signature:(dur: Duration)
park_timeout_ms	$RUST/src/thread/mod.rs	/^pub fn park_timeout_ms(ms: u32) {$/;"	f	signature:(ms: u32)
parker	$RUST/src/thread/mod.rs	/^    parker: Parker,$/;"	m	struct:Inner
parse	$RUST/src/sys/pal/hermit/os.rs	/^    fn parse(input: &[u8]) -> Option<(OsString, OsString)> {$/;"	f	function:init_environment	signature:(input: &[u8]) -> Option<(OsString, OsString)>
parse	$RUST/src/sys/pal/solid/os.rs	/^    fn parse(input: &[u8]) -> Option<(OsString, OsString)> {$/;"	f	function:env	signature:(input: &[u8]) -> Option<(OsString, OsString)>
parse	$RUST/src/sys/pal/unix/os.rs	/^    fn parse(input: &[u8]) -> Option<(OsString, OsString)> {$/;"	f	function:env	signature:(input: &[u8]) -> Option<(OsString, OsString)>
parse	$RUST/src/sys/pal/wasi/os.rs	/^    fn parse(input: &[u8]) -> Option<(OsString, OsString)> {$/;"	f	function:env	signature:(input: &[u8]) -> Option<(OsString, OsString)>
parse_glibc_version	$RUST/src/sys/pal/unix/os.rs	/^fn parse_glibc_version(version: &str) -> Option<(usize, usize)> {$/;"	f	signature:(version: &str) -> Option<(usize, usize)>
parse_lp_cmd_line	$RUST/src/sys/pal/uefi/args.rs	/^fn parse_lp_cmd_line(code_units: &[u16]) -> Option<Vec<OsString>> {$/;"	f	signature:(code_units: &[u16]) -> Option<Vec<OsString>>
parse_lp_cmd_line	$RUST/src/sys/pal/windows/args.rs	/^fn parse_lp_cmd_line<'a, F: Fn() -> OsString>($/;"	f	signature:<'a, F: Fn() -> OsString>( lp_cmd_line: Option<WStrUnits<'a>>, exe_name: F, ) -> Vec<OsString>
parse_next_component	$RUST/src/path.rs	/^    fn parse_next_component(&self) -> (usize, Option<Component<'a>>) {$/;"	P	implementation:Components	signature:(&self) -> (usize, Option<Component<'a>>)
parse_next_component_back	$RUST/src/path.rs	/^    fn parse_next_component_back(&self) -> (usize, Option<Component<'a>>) {$/;"	P	implementation:Components	signature:(&self) -> (usize, Option<Component<'a>>)
parse_prefix	$RUST/src/sys/pal/sgx/path.rs	/^pub fn parse_prefix(_: &OsStr) -> Option<Prefix<'_>> {$/;"	f	signature:(_: &OsStr) -> Option<Prefix<'_>>
parse_prefix	$RUST/src/sys/pal/solid/path.rs	/^pub fn parse_prefix(_: &OsStr) -> Option<Prefix<'_>> {$/;"	f	signature:(_: &OsStr) -> Option<Prefix<'_>>
parse_prefix	$RUST/src/sys/pal/unix/path.rs	/^pub fn parse_prefix(_: &OsStr) -> Option<Prefix<'_>> {$/;"	f	signature:(_: &OsStr) -> Option<Prefix<'_>>
parse_prefix	$RUST/src/sys/pal/windows/path/tests.rs	/^fn parse_prefix(path: &str) -> Option<Prefix<'_>> {$/;"	f	signature:(path: &str) -> Option<Prefix<'_>>
parse_single_component	$RUST/src/path.rs	/^    unsafe fn parse_single_component<'b>(&self, comp: &'b [u8]) -> Option<Component<'b>> {$/;"	P	implementation:Components	signature:<'b>(&self, comp: &'b [u8]) -> Option<Component<'b>>
parsed	$RUST/src/path.rs	/^    parsed: Prefix<'a>,$/;"	m	struct:PrefixComponent
parsed_args_list	$RUST/src/sys/pal/uefi/args.rs	/^    parsed_args_list: vec::IntoIter<OsString>,$/;"	m	struct:Args
parsed_args_list	$RUST/src/sys/pal/windows/args.rs	/^    parsed_args_list: vec::IntoIter<OsString>,$/;"	m	struct:Args
partial_cmp	$RUST/src/ffi/os_str.rs	/^    fn partial_cmp(&self, other: &str) -> Option<cmp::Ordering> {$/;"	P	implementation:OsString	signature:(&self, other: &str) -> Option<cmp::Ordering>
partial_cmp	$RUST/src/path.rs	/^    fn partial_cmp(&self, other: &PrefixComponent<'a>) -> Option<cmp::Ordering> {$/;"	P	implementation:PrefixComponent	signature:(&self, other: &PrefixComponent<'a>) -> Option<cmp::Ordering>
partial_cmp	$RUST/src/sys/pal/hermit/time.rs	/^    fn partial_cmp(&self, other: &Timespec) -> Option<Ordering> {$/;"	P	implementation:Timespec	signature:(&self, other: &Timespec) -> Option<Ordering>
partial_cmp	$RUST/src/sys/pal/windows/process.rs	/^    fn partial_cmp(&self, other: &str) -> Option<cmp::Ordering> {$/;"	P	implementation:EnvKey	signature:(&self, other: &str) -> Option<cmp::Ordering>
partial_cmp	$RUST/src/sys/pal/windows/time.rs	/^    fn partial_cmp(&self, other: &SystemTime) -> Option<Ordering> {$/;"	P	implementation:SystemTime	signature:(&self, other: &SystemTime) -> Option<Ordering>
partial_line_buffered_after_line_write	$RUST/src/io/buffered/tests.rs	/^fn partial_line_buffered_after_line_write() {$/;"	f	signature:()
partial_multiline_buffering	$RUST/src/io/buffered/tests.rs	/^fn partial_multiline_buffering() {$/;"	f	signature:()
partial_multiline_buffering_without_full_line	$RUST/src/io/buffered/tests.rs	/^fn partial_multiline_buffering_without_full_line() {$/;"	f	signature:()
partial_read	$RUST/src/net/tcp/tests.rs	/^fn partial_read() {$/;"	f	signature:()
partial_write_buffers_line	$RUST/src/io/buffered/tests.rs	/^fn partial_write_buffers_line() {$/;"	f	signature:()
partialeq_impl	$RUST/src/sync/once_lock/tests.rs	/^fn partialeq_impl() {$/;"	f	signature:()
passcred	$RUST/src/os/unix/net/datagram.rs	/^    pub fn passcred(&self) -> io::Result<bool> {$/;"	P	implementation:UnixDatagram	signature:(&self) -> io::Result<bool>
passcred	$RUST/src/os/unix/net/stream.rs	/^    pub fn passcred(&self) -> io::Result<bool> {$/;"	P	implementation:UnixStream	signature:(&self) -> io::Result<bool>
passcred	$RUST/src/sys/pal/unix/net.rs	/^    pub fn passcred(&self) -> io::Result<bool> {$/;"	P	implementation:Socket	signature:(&self) -> io::Result<bool>
path	$RUST/src/fs.rs	/^    pub fn path(&self) -> PathBuf {$/;"	P	implementation:DirEntry	signature:(&self) -> PathBuf
path	$RUST/src/lib.rs	/^pub mod path;$/;"	n
path	$RUST/src/path.rs	/^    path: &'a [u8],$/;"	m	struct:Components
path	$RUST/src/sys/pal/hermit/fs.rs	/^    pub fn path(&self) -> PathBuf {$/;"	P	implementation:DirEntry	signature:(&self) -> PathBuf
path	$RUST/src/sys/pal/hermit/mod.rs	/^pub mod path;$/;"	n
path	$RUST/src/sys/pal/sgx/mod.rs	/^pub mod path;$/;"	n
path	$RUST/src/sys/pal/solid/fs.rs	/^    pub fn path(&self) -> PathBuf {$/;"	P	implementation:DirEntry	signature:(&self) -> PathBuf
path	$RUST/src/sys/pal/solid/mod.rs	/^pub mod path;$/;"	n
path	$RUST/src/sys/pal/teeos/mod.rs	/^pub mod path;$/;"	n
path	$RUST/src/sys/pal/uefi/mod.rs	/^pub mod path;$/;"	n
path	$RUST/src/sys/pal/unix/fs.rs	/^    pub fn path(&self) -> PathBuf {$/;"	P	implementation:DirEntry	signature:(&self) -> PathBuf
path	$RUST/src/sys/pal/unix/mod.rs	/^pub mod path;$/;"	n
path	$RUST/src/sys/pal/unsupported/fs.rs	/^    pub fn path(&self) -> PathBuf {$/;"	P	implementation:DirEntry	signature:(&self) -> PathBuf
path	$RUST/src/sys/pal/unsupported/mod.rs	/^pub mod path;$/;"	n
path	$RUST/src/sys/pal/wasi/fs.rs	/^    pub fn path(&self) -> PathBuf {$/;"	P	implementation:DirEntry	signature:(&self) -> PathBuf
path	$RUST/src/sys/pal/wasi/mod.rs	/^pub mod path;$/;"	n
path	$RUST/src/sys/pal/wasm/mod.rs	/^pub mod path;$/;"	n
path	$RUST/src/sys/pal/windows/fs.rs	/^    pub fn path(&self) -> PathBuf {$/;"	P	implementation:DirEntry	signature:(&self) -> PathBuf
path	$RUST/src/sys/pal/windows/mod.rs	/^pub mod path;$/;"	n
path	$RUST/src/sys/pal/xous/mod.rs	/^pub mod path;$/;"	n
path	$RUST/src/sys/pal/zkvm/mod.rs	/^pub mod path;$/;"	n
path	$RUST/src/sys_common/io.rs	/^        pub fn path(&self) -> &Path {$/;"	P	implementation:test::TempDir	signature:(&self) -> &Path
path_filestat_get	$RUST/src/sys/pal/wasi/fd.rs	/^    pub(crate) fn path_filestat_get($/;"	P	implementation:WasiFd	signature:( &self, flags: wasi::Lookupflags, path: &str, ) -> io::Result<wasi::Filestat>
path_filestat_set_times	$RUST/src/sys/pal/wasi/fd.rs	/^    pub fn path_filestat_set_times($/;"	P	implementation:WasiFd	signature:( &self, flags: wasi::Lookupflags, path: &str, atim: wasi::Timestamp, mtim: wasi::Timestamp, fstflags: wasi::Fstflags, ) -> io::Result<()>
pcPriClassBase	$RUST/src/process/tests.rs	/^        pcPriClassBase: i32,$/;"	m	struct:test_proc_thread_attributes::PROCESSENTRY32W
peek	$RUST/src/net/tcp.rs	/^    pub fn peek(&self, buf: &mut [u8]) -> io::Result<usize> {$/;"	P	implementation:TcpStream	signature:(&self, buf: &mut [u8]) -> io::Result<usize>
peek	$RUST/src/net/tcp/tests.rs	/^fn peek() {$/;"	f	signature:()
peek	$RUST/src/net/udp.rs	/^    pub fn peek(&self, buf: &mut [u8]) -> io::Result<usize> {$/;"	P	implementation:UdpSocket	signature:(&self, buf: &mut [u8]) -> io::Result<usize>
peek	$RUST/src/os/unix/net/datagram.rs	/^    pub fn peek(&self, buf: &mut [u8]) -> io::Result<usize> {$/;"	P	implementation:UnixDatagram	signature:(&self, buf: &mut [u8]) -> io::Result<usize>
peek	$RUST/src/os/unix/net/stream.rs	/^    pub fn peek(&self, buf: &mut [u8]) -> io::Result<usize> {$/;"	P	implementation:UnixStream	signature:(&self, buf: &mut [u8]) -> io::Result<usize>
peek	$RUST/src/sys/pal/hermit/net.rs	/^    pub fn peek(&self, buf: &mut [u8]) -> io::Result<usize> {$/;"	P	implementation:Socket	signature:(&self, buf: &mut [u8]) -> io::Result<usize>
peek	$RUST/src/sys/pal/sgx/net.rs	/^    pub fn peek(&self, _: &mut [u8]) -> io::Result<usize> {$/;"	P	implementation:UdpSocket	signature:(&self, _: &mut [u8]) -> io::Result<usize>
peek	$RUST/src/sys/pal/solid/net.rs	/^    pub fn peek(&self, buf: &mut [u8]) -> io::Result<usize> {$/;"	P	implementation:Socket	signature:(&self, buf: &mut [u8]) -> io::Result<usize>
peek	$RUST/src/sys/pal/teeos/net.rs	/^    pub fn peek(&self, _: &mut [u8]) -> io::Result<usize> {$/;"	P	implementation:UdpSocket	signature:(&self, _: &mut [u8]) -> io::Result<usize>
peek	$RUST/src/sys/pal/unix/l4re.rs	/^        pub fn peek(&self, _: &mut [u8]) -> io::Result<usize> {$/;"	P	implementation:net::UdpSocket	signature:(&self, _: &mut [u8]) -> io::Result<usize>
peek	$RUST/src/sys/pal/unix/net.rs	/^    pub fn peek(&self, buf: &mut [u8]) -> io::Result<usize> {$/;"	P	implementation:Socket	signature:(&self, buf: &mut [u8]) -> io::Result<usize>
peek	$RUST/src/sys/pal/unsupported/net.rs	/^    pub fn peek(&self, _: &mut [u8]) -> io::Result<usize> {$/;"	P	implementation:UdpSocket	signature:(&self, _: &mut [u8]) -> io::Result<usize>
peek	$RUST/src/sys/pal/wasi/net.rs	/^    pub fn peek(&self, _: &mut [u8]) -> io::Result<usize> {$/;"	P	implementation:UdpSocket	signature:(&self, _: &mut [u8]) -> io::Result<usize>
peek	$RUST/src/sys/pal/windows/net.rs	/^    pub fn peek(&self, buf: &mut [u8]) -> io::Result<usize> {$/;"	P	implementation:Socket	signature:(&self, buf: &mut [u8]) -> io::Result<usize>
peek	$RUST/src/sys/pal/xous/net/tcpstream.rs	/^    pub fn peek(&self, buf: &mut [u8]) -> io::Result<usize> {$/;"	P	implementation:TcpStream	signature:(&self, buf: &mut [u8]) -> io::Result<usize>
peek	$RUST/src/sys/pal/xous/net/udp.rs	/^    pub fn peek(&self, buf: &mut [u8]) -> io::Result<usize> {$/;"	P	implementation:UdpSocket	signature:(&self, buf: &mut [u8]) -> io::Result<usize>
peek	$RUST/src/sys_common/net.rs	/^    pub fn peek(&self, buf: &mut [u8]) -> io::Result<usize> {$/;"	P	implementation:UdpSocket	signature:(&self, buf: &mut [u8]) -> io::Result<usize>
peek	$RUST/src/sys_common/wstr.rs	/^    pub fn peek(&self) -> Option<NonZeroU16> {$/;"	P	implementation:WStrUnits	signature:(&self) -> Option<NonZeroU16>
peek_from	$RUST/src/net/udp.rs	/^    pub fn peek_from(&self, buf: &mut [u8]) -> io::Result<(usize, SocketAddr)> {$/;"	P	implementation:UdpSocket	signature:(&self, buf: &mut [u8]) -> io::Result<(usize, SocketAddr)>
peek_from	$RUST/src/net/udp/tests.rs	/^fn peek_from() {$/;"	f	signature:()
peek_from	$RUST/src/os/unix/net/datagram.rs	/^    pub fn peek_from(&self, buf: &mut [u8]) -> io::Result<(usize, SocketAddr)> {$/;"	P	implementation:UnixDatagram	signature:(&self, buf: &mut [u8]) -> io::Result<(usize, SocketAddr)>
peek_from	$RUST/src/sys/pal/hermit/net.rs	/^    pub fn peek_from(&self, buf: &mut [u8]) -> io::Result<(usize, SocketAddr)> {$/;"	P	implementation:Socket	signature:(&self, buf: &mut [u8]) -> io::Result<(usize, SocketAddr)>
peek_from	$RUST/src/sys/pal/sgx/net.rs	/^    pub fn peek_from(&self, _: &mut [u8]) -> io::Result<(usize, SocketAddr)> {$/;"	P	implementation:UdpSocket	signature:(&self, _: &mut [u8]) -> io::Result<(usize, SocketAddr)>
peek_from	$RUST/src/sys/pal/solid/net.rs	/^    pub fn peek_from(&self, buf: &mut [u8]) -> io::Result<(usize, SocketAddr)> {$/;"	P	implementation:Socket	signature:(&self, buf: &mut [u8]) -> io::Result<(usize, SocketAddr)>
peek_from	$RUST/src/sys/pal/teeos/net.rs	/^    pub fn peek_from(&self, _: &mut [u8]) -> io::Result<(usize, SocketAddr)> {$/;"	P	implementation:UdpSocket	signature:(&self, _: &mut [u8]) -> io::Result<(usize, SocketAddr)>
peek_from	$RUST/src/sys/pal/unix/l4re.rs	/^        pub fn peek_from(&self, _: &mut [u8]) -> io::Result<(usize, SocketAddr)> {$/;"	P	implementation:net::UdpSocket	signature:(&self, _: &mut [u8]) -> io::Result<(usize, SocketAddr)>
peek_from	$RUST/src/sys/pal/unix/net.rs	/^    pub fn peek_from(&self, buf: &mut [u8]) -> io::Result<(usize, SocketAddr)> {$/;"	P	implementation:Socket	signature:(&self, buf: &mut [u8]) -> io::Result<(usize, SocketAddr)>
peek_from	$RUST/src/sys/pal/unsupported/net.rs	/^    pub fn peek_from(&self, _: &mut [u8]) -> io::Result<(usize, SocketAddr)> {$/;"	P	implementation:UdpSocket	signature:(&self, _: &mut [u8]) -> io::Result<(usize, SocketAddr)>
peek_from	$RUST/src/sys/pal/wasi/net.rs	/^    pub fn peek_from(&self, _: &mut [u8]) -> io::Result<(usize, SocketAddr)> {$/;"	P	implementation:UdpSocket	signature:(&self, _: &mut [u8]) -> io::Result<(usize, SocketAddr)>
peek_from	$RUST/src/sys/pal/windows/net.rs	/^    pub fn peek_from(&self, buf: &mut [u8]) -> io::Result<(usize, SocketAddr)> {$/;"	P	implementation:Socket	signature:(&self, buf: &mut [u8]) -> io::Result<(usize, SocketAddr)>
peek_from	$RUST/src/sys/pal/xous/net/udp.rs	/^    pub fn peek_from(&self, buf: &mut [u8]) -> io::Result<(usize, SocketAddr)> {$/;"	P	implementation:UdpSocket	signature:(&self, buf: &mut [u8]) -> io::Result<(usize, SocketAddr)>
peek_from	$RUST/src/sys_common/net.rs	/^    pub fn peek_from(&self, buf: &mut [u8]) -> io::Result<(usize, SocketAddr)> {$/;"	P	implementation:UdpSocket	signature:(&self, buf: &mut [u8]) -> io::Result<(usize, SocketAddr)>
peer_addr	$RUST/src/net/tcp.rs	/^    pub fn peer_addr(&self) -> io::Result<SocketAddr> {$/;"	P	implementation:TcpStream	signature:(&self) -> io::Result<SocketAddr>
peer_addr	$RUST/src/net/udp.rs	/^    pub fn peer_addr(&self) -> io::Result<SocketAddr> {$/;"	P	implementation:UdpSocket	signature:(&self) -> io::Result<SocketAddr>
peer_addr	$RUST/src/os/fortanix_sgx/io.rs	/^    pub peer_addr: Option<String>,$/;"	m	struct:TcpStreamMetadata
peer_addr	$RUST/src/os/unix/net/datagram.rs	/^    pub fn peer_addr(&self) -> io::Result<SocketAddr> {$/;"	P	implementation:UnixDatagram	signature:(&self) -> io::Result<SocketAddr>
peer_addr	$RUST/src/os/unix/net/stream.rs	/^    pub fn peer_addr(&self) -> io::Result<SocketAddr> {$/;"	P	implementation:UnixStream	signature:(&self) -> io::Result<SocketAddr>
peer_addr	$RUST/src/sys/pal/sgx/net.rs	/^    pub fn peer_addr(&self) -> io::Result<SocketAddr> {$/;"	P	implementation:UdpSocket	signature:(&self) -> io::Result<SocketAddr>
peer_addr	$RUST/src/sys/pal/teeos/net.rs	/^    pub fn peer_addr(&self) -> io::Result<SocketAddr> {$/;"	P	implementation:UdpSocket	signature:(&self) -> io::Result<SocketAddr>
peer_addr	$RUST/src/sys/pal/unix/l4re.rs	/^        pub fn peer_addr(&self) -> io::Result<SocketAddr> {$/;"	P	implementation:net::UdpSocket	signature:(&self) -> io::Result<SocketAddr>
peer_addr	$RUST/src/sys/pal/unsupported/net.rs	/^    pub fn peer_addr(&self) -> io::Result<SocketAddr> {$/;"	P	implementation:UdpSocket	signature:(&self) -> io::Result<SocketAddr>
peer_addr	$RUST/src/sys/pal/wasi/net.rs	/^    pub fn peer_addr(&self) -> io::Result<SocketAddr> {$/;"	P	implementation:UdpSocket	signature:(&self) -> io::Result<SocketAddr>
peer_addr	$RUST/src/sys/pal/xous/net/tcpstream.rs	/^    pub fn peer_addr(&self) -> io::Result<SocketAddr> {$/;"	P	implementation:TcpStream	signature:(&self) -> io::Result<SocketAddr>
peer_addr	$RUST/src/sys/pal/xous/net/udp.rs	/^    pub fn peer_addr(&self) -> io::Result<SocketAddr> {$/;"	P	implementation:UdpSocket	signature:(&self) -> io::Result<SocketAddr>
peer_addr	$RUST/src/sys_common/net.rs	/^    pub fn peer_addr(&self) -> io::Result<SocketAddr> {$/;"	P	implementation:UdpSocket	signature:(&self) -> io::Result<SocketAddr>
peer_cred	$RUST/src/os/unix/net/stream.rs	/^    pub fn peer_cred(&self) -> io::Result<UCred> {$/;"	P	implementation:UnixStream	signature:(&self) -> io::Result<UCred>
peer_cred	$RUST/src/os/unix/ucred.rs	/^    pub fn peer_cred(socket: &UnixStream) -> io::Result<UCred> {$/;"	f	module:impl_mac	signature:(socket: &UnixStream) -> io::Result<UCred>
per_call	$RUST/src/io/tests.rs	/^    per_call: usize,$/;"	m	struct:TestWriter
perf_counter	$RUST/src/sys/pal/windows/time.rs	/^mod perf_counter {$/;"	n
perm	$RUST/src/sys/pal/hermit/fs.rs	/^    pub fn perm(&self) -> FilePermissions {$/;"	P	implementation:FileAttr	signature:(&self) -> FilePermissions
perm	$RUST/src/sys/pal/solid/fs.rs	/^    pub fn perm(&self) -> FilePermissions {$/;"	P	implementation:FileAttr	signature:(&self) -> FilePermissions
perm	$RUST/src/sys/pal/unix/fs.rs	/^    pub fn perm(&self) -> FilePermissions {$/;"	P	implementation:FileAttr	signature:(&self) -> FilePermissions
perm	$RUST/src/sys/pal/unsupported/fs.rs	/^    pub fn perm(&self) -> FilePermissions {$/;"	P	implementation:FileAttr	signature:(&self) -> FilePermissions
perm	$RUST/src/sys/pal/wasi/fs.rs	/^    pub fn perm(&self) -> FilePermissions {$/;"	P	implementation:FileAttr	signature:(&self) -> FilePermissions
perm	$RUST/src/sys/pal/windows/fs.rs	/^    pub fn perm(&self) -> FilePermissions {$/;"	P	implementation:FileAttr	signature:(&self) -> FilePermissions
permissions	$RUST/src/fs.rs	/^    pub fn permissions(&self) -> Permissions {$/;"	P	implementation:Metadata	signature:(&self) -> Permissions
personality	$RUST/src/sys/mod.rs	/^mod personality;$/;"	n
pgroup	$RUST/src/sys/pal/unix/process/process_common.rs	/^    pub fn pgroup(&mut self, pgroup: pid_t) {$/;"	P	implementation:Command	signature:(&mut self, pgroup: pid_t)
phantom	$RUST/src/os/unix/net/ancillary.rs	/^    phantom: PhantomData<T>,$/;"	m	struct:AncillaryDataIter
pid	$RUST/src/os/unix/ucred.rs	/^    pub pid: Option<pid_t>,$/;"	m	struct:UCred
pid	$RUST/src/sys/pal/unix/process/process_unix.rs	/^    pid: pid_t,$/;"	m	struct:Process
pid	$RUST/src/sys/pal/unix/process/process_vxworks.rs	/^    pid: RTP_ID,$/;"	m	struct:Process
pid_t	$RUST/src/os/unix/net/ancillary.rs	/^    pub type pid_t = i32;$/;"	t	module:libc
pid_t	$RUST/src/os/unix/raw.rs	/^pub type pid_t = i32;$/;"	t
pidfd	$RUST/src/os/linux/process.rs	/^    fn pidfd(&self) -> Result<&PidFd>;$/;"	P	interface:ChildExt	signature:(&self) -> Result<&PidFd>
pidfd	$RUST/src/sys/pal/unix/process/process_unix.rs	/^    pidfd: Option<PidFd>,$/;"	m	struct:Process
pipe	$RUST/src/sys/pal/hermit/mod.rs	/^pub mod pipe;$/;"	n
pipe	$RUST/src/sys/pal/sgx/mod.rs	/^pub mod pipe;$/;"	n
pipe	$RUST/src/sys/pal/solid/mod.rs	/^pub mod pipe;$/;"	n
pipe	$RUST/src/sys/pal/teeos/mod.rs	/^pub mod pipe;$/;"	n
pipe	$RUST/src/sys/pal/uefi/mod.rs	/^pub mod pipe;$/;"	n
pipe	$RUST/src/sys/pal/unix/mod.rs	/^pub mod pipe;$/;"	n
pipe	$RUST/src/sys/pal/unsupported/mod.rs	/^pub mod pipe;$/;"	n
pipe	$RUST/src/sys/pal/wasi/mod.rs	/^pub mod pipe;$/;"	n
pipe	$RUST/src/sys/pal/wasm/mod.rs	/^pub mod pipe;$/;"	n
pipe	$RUST/src/sys/pal/windows/mod.rs	/^pub mod pipe;$/;"	n
pipe	$RUST/src/sys/pal/windows/pipe.rs	/^    pipe: Handle,$/;"	m	struct:AsyncPipe
pipe	$RUST/src/sys/pal/xous/mod.rs	/^pub mod pipe;$/;"	n
pipe	$RUST/src/sys/pal/zkvm/mod.rs	/^pub mod pipe;$/;"	n
piped	$RUST/src/process.rs	/^    pub fn piped() -> Stdio {$/;"	P	implementation:Stdio	signature:() -> Stdio
platform	$RUST/src/os/unix/mod.rs	/^mod platform {$/;"	n
ploc_mtx	$RUST/src/sys/pal/itron/abi.rs	/^    pub fn ploc_mtx(mtxid: ID) -> ER;$/;"	f	signature:(mtxid: ID) -> ER
poison	$RUST/src/sync/mod.rs	/^mod poison;$/;"	n
poison	$RUST/src/sync/mutex.rs	/^    poison: poison::Guard,$/;"	m	struct:MutexGuard
poison	$RUST/src/sync/once.rs	/^    pub(crate) fn poison(&self) {$/;"	P	implementation:OnceState	signature:(&self)
poison	$RUST/src/sync/rwlock.rs	/^    poison: poison::Guard,$/;"	m	struct:RwLockWriteGuard
poison	$RUST/src/sys/pal/unsupported/once.rs	/^    pub fn poison(&self) {$/;"	P	implementation:OnceState	signature:(&self)
poison	$RUST/src/sys_common/once/futex.rs	/^    pub fn poison(&self) {$/;"	P	implementation:OnceState	signature:(&self)
poison	$RUST/src/sys_common/once/queue.rs	/^    pub fn poison(&self) {$/;"	P	implementation:OnceState	signature:(&self)
poison_bad	$RUST/src/sync/once/tests.rs	/^fn poison_bad() {$/;"	f	signature:()
poisoned	$RUST/src/sys/pal/unsupported/once.rs	/^    poisoned: bool,$/;"	m	struct:OnceState
poisoned	$RUST/src/sys_common/once/futex.rs	/^    poisoned: bool,$/;"	m	struct:OnceState
poisoned	$RUST/src/sys_common/once/queue.rs	/^    poisoned: bool,$/;"	m	struct:OnceState
pop	$RUST/src/path.rs	/^    pub fn pop(&mut self) -> bool {$/;"	P	implementation:PathBuf	signature:(&mut self) -> bool
pop	$RUST/src/sys/pal/sgx/waitqueue/unsafe_list.rs	/^    pub unsafe fn pop<'a>(&mut self) -> Option<&'a T> {$/;"	P	implementation:UnsafeList	signature:<'a>(&mut self) -> Option<&'a T>
pop_front	$RUST/src/sys/pal/itron/condvar.rs	/^        pub fn pop_front(&mut self) -> Option<abi::ID> {$/;"	P	implementation:waiter_queue::WaiterQueue	signature:(&mut self) -> Option<abi::ID>
port	$RUST/src/sys/pal/sgx/net.rs	/^    pub fn port(&self) -> u16 {$/;"	P	implementation:LookupHost	signature:(&self) -> u16
port	$RUST/src/sys/pal/teeos/net.rs	/^    pub fn port(&self) -> u16 {$/;"	P	implementation:LookupHost	signature:(&self) -> u16
port	$RUST/src/sys/pal/unix/l4re.rs	/^        pub fn port(&self) -> u16 {$/;"	P	implementation:net::LookupHost	signature:(&self) -> u16
port	$RUST/src/sys/pal/unsupported/net.rs	/^    pub fn port(&self) -> u16 {$/;"	P	implementation:LookupHost	signature:(&self) -> u16
port	$RUST/src/sys/pal/wasi/net.rs	/^    pub fn port(&self) -> u16 {$/;"	P	implementation:LookupHost	signature:(&self) -> u16
port	$RUST/src/sys/pal/xous/net/dns.rs	/^    pub fn port(&self) -> u16 {$/;"	P	implementation:LookupHost	signature:(&self) -> u16
port	$RUST/src/sys_common/net.rs	/^    pub fn port(&self) -> u16 {$/;"	P	implementation:LookupHost	signature:(&self) -> u16
port_gone_concurrent	$RUST/src/sync/mpsc/sync_tests.rs	/^fn port_gone_concurrent() {$/;"	f	signature:()
port_gone_concurrent	$RUST/src/sync/mpsc/tests.rs	/^fn port_gone_concurrent() {$/;"	f	signature:()
port_gone_concurrent_shared	$RUST/src/sync/mpsc/sync_tests.rs	/^fn port_gone_concurrent_shared() {$/;"	f	signature:()
port_gone_concurrent_shared	$RUST/src/sync/mpsc/tests.rs	/^fn port_gone_concurrent_shared() {$/;"	f	signature:()
pos	$RUST/src/io/buffered/bufreader/buffer.rs	/^    pub fn pos(&self) -> usize {$/;"	P	implementation:Buffer	signature:(&self) -> usize
pos	$RUST/src/io/buffered/tests.rs	/^        pos: u64,$/;"	m	struct:test_buffered_reader_seek_underflow::PositionReader
pos	$RUST/src/io/cursor.rs	/^    pos: u64,$/;"	m	struct:Cursor
position	$RUST/src/io/cursor.rs	/^    pub const fn position(&self) -> u64 {$/;"	P	implementation:Cursor	signature:(&self) -> u64
posix_delete	$RUST/src/sys/pal/windows/fs.rs	/^    fn posix_delete(&self) -> io::Result<()> {$/;"	P	implementation:File	signature:(&self) -> io::Result<()>
posix_spawn	$RUST/src/sys/pal/unix/process/process_unix.rs	/^    fn posix_spawn($/;"	P	implementation:Command	signature:( &mut self, stdio: &ChildPipes, envp: Option<&CStringArray>, ) -> io::Result<Option<Process>>
post_2008	$RUST/src/sys/pal/windows/args/tests.rs	/^fn post_2008() {$/;"	f	signature:()
potential_sendfile_source	$RUST/src/sys/pal/unix/kernel_copy.rs	/^    fn potential_sendfile_source(&self) -> bool {$/;"	P	implementation:FdMeta	signature:(&self) -> bool
powf	$RUST/src/f32.rs	/^    pub fn powf(self, n: f32) -> f32 {$/;"	P	implementation:f32	signature:(self, n: f32) -> f32
powf	$RUST/src/f64.rs	/^    pub fn powf(self, n: f64) -> f64 {$/;"	P	implementation:f64	signature:(self, n: f64) -> f64
powi	$RUST/src/f32.rs	/^    pub fn powi(self, n: i32) -> f32 {$/;"	P	implementation:f32	signature:(self, n: i32) -> f32
powi	$RUST/src/f64.rs	/^    pub fn powi(self, n: i32) -> f64 {$/;"	P	implementation:f64	signature:(self, n: i32) -> f64
pre_exec	$RUST/src/os/unix/process.rs	/^    unsafe fn pre_exec<F>(&mut self, f: F) -> &mut process::Command$/;"	P	interface:CommandExt	signature:<F>(&mut self, f: F) -> &mut process::Command where F: FnMut() -> io::Result<()> + Send + Sync + 'static
pre_exec	$RUST/src/sys/pal/unix/process/process_common.rs	/^    pub unsafe fn pre_exec(&mut self, f: Box<dyn FnMut() -> io::Result<()> + Send + Sync>) {$/;"	P	implementation:Command	signature:(&mut self, f: Box<dyn FnMut() -> io::Result<()> + Send + Sync>)
pread	$RUST/src/sys/pal/wasi/fd.rs	/^    pub fn pread(&self, bufs: &mut [IoSliceMut<'_>], offset: u64) -> io::Result<usize> {$/;"	P	implementation:WasiFd	signature:(&self, bufs: &mut [IoSliceMut<'_>], offset: u64) -> io::Result<usize>
pred_panic_leak	$RUST/src/collections/hash/map/tests.rs	/^    fn pred_panic_leak() {$/;"	f	module:test_extract_if	signature:()
pred_panic_reuse	$RUST/src/collections/hash/map/tests.rs	/^    fn pred_panic_reuse() {$/;"	f	module:test_extract_if	signature:()
prefix	$RUST/src/path.rs	/^    prefix: Option<Prefix<'a>>,$/;"	m	struct:Components
prefix_len	$RUST/src/path.rs	/^    fn prefix_len(&self) -> usize {$/;"	P	implementation:Components	signature:(&self) -> usize
prefix_remaining	$RUST/src/path.rs	/^    fn prefix_remaining(&self) -> usize {$/;"	P	implementation:Components	signature:(&self) -> usize
prefix_verbatim	$RUST/src/path.rs	/^    fn prefix_verbatim(&self) -> bool {$/;"	P	implementation:Components	signature:(&self) -> bool
preinit	$RUST/src/sync/lazy_lock.rs	/^    pub(crate) fn preinit(value: T) -> LazyLock<T, F> {$/;"	P	implementation:LazyLock	signature:(value: T) -> LazyLock<T, F>
prelude	$RUST/src/io/mod.rs	/^pub mod prelude;$/;"	n
prelude	$RUST/src/lib.rs	/^pub mod prelude;$/;"	n
prelude	$RUST/src/os/hermit/mod.rs	/^pub mod prelude {$/;"	n
prelude	$RUST/src/os/solid/mod.rs	/^pub mod prelude {$/;"	n
prelude	$RUST/src/os/unix/mod.rs	/^pub mod prelude {$/;"	n
prelude	$RUST/src/os/wasi/mod.rs	/^pub mod prelude {$/;"	n
prelude	$RUST/src/os/windows/mod.rs	/^pub mod prelude {$/;"	n
prelude	$RUST/src/os/xous/mod.rs	/^pub mod prelude {$/;"	n
pretty	$RUST/src/error.rs	/^    pub fn pretty(mut self, pretty: bool) -> Self {$/;"	P	implementation:Report	signature:(mut self, pretty: bool) -> Self
prev	$RUST/src/sys/pal/itron/condvar.rs	/^        prev: Option<NonNull<Waiter>>,$/;"	m	struct:waiter_queue::Waiter
prev	$RUST/src/sys/pal/sgx/waitqueue/unsafe_list.rs	/^    prev: NonNull<UnsafeListEntry<T>>,$/;"	m	struct:UnsafeListEntry
print	$RUST/src/macros.rs	/^macro_rules! print {$/;"	M
print	$RUST/src/sys_common/backtrace.rs	/^pub fn print(w: &mut dyn Write, format: PrintFmt) -> io::Result<()> {$/;"	f	signature:(w: &mut dyn Write, format: PrintFmt) -> io::Result<()>
print_buf	$RUST/src/sys/pal/teeos/stdio.rs	/^fn print_buf(s: &[u8]) -> io::Result<usize> {$/;"	f	signature:(s: &[u8]) -> io::Result<usize>
print_to	$RUST/src/io/stdio.rs	/^fn print_to<T>(args: fmt::Arguments<'_>, global_s: fn() -> T, label: &str)$/;"	f	signature:<T>(args: fmt::Arguments<'_>, global_s: fn() -> T, label: &str) where T: Write,
print_to_buffer_if_capture_used	$RUST/src/io/stdio.rs	/^fn print_to_buffer_if_capture_used(args: fmt::Arguments<'_>) -> bool {$/;"	f	signature:(args: fmt::Arguments<'_>) -> bool
println	$RUST/src/macros.rs	/^macro_rules! println {$/;"	M
priority	$RUST/src/sys/pal/itron/condvar.rs	/^        priority: abi::PRI,$/;"	m	struct:waiter_queue::Waiter
proc_address	$RUST/src/sys/pal/windows/compat.rs	/^    pub fn proc_address(self, name: &CStr) -> Option<NonNull<c_void>> {$/;"	P	implementation:Module	signature:(self, name: &CStr) -> Option<NonNull<c_void>>
proc_thread_attributes	$RUST/src/sys/pal/windows/process.rs	/^    proc_thread_attributes: BTreeMap<usize, ProcThreadAttributeValue>,$/;"	m	struct:Command
process	$RUST/src/lib.rs	/^pub mod process;$/;"	n
process	$RUST/src/os/linux/mod.rs	/^pub mod process;$/;"	n
process	$RUST/src/os/unix/mod.rs	/^pub mod process;$/;"	n
process	$RUST/src/os/windows/mod.rs	/^pub mod process;$/;"	n
process	$RUST/src/sys/pal/hermit/mod.rs	/^pub mod process;$/;"	n
process	$RUST/src/sys/pal/sgx/mod.rs	/^pub mod process;$/;"	n
process	$RUST/src/sys/pal/solid/mod.rs	/^pub mod process;$/;"	n
process	$RUST/src/sys/pal/teeos/mod.rs	/^pub mod process;$/;"	n
process	$RUST/src/sys/pal/uefi/mod.rs	/^pub mod process;$/;"	n
process	$RUST/src/sys/pal/unix/mod.rs	/^pub mod process;$/;"	n
process	$RUST/src/sys/pal/unsupported/mod.rs	/^pub mod process;$/;"	n
process	$RUST/src/sys/pal/wasi/mod.rs	/^pub mod process;$/;"	n
process	$RUST/src/sys/pal/wasm/mod.rs	/^pub mod process;$/;"	n
process	$RUST/src/sys/pal/windows/mod.rs	/^pub mod process;$/;"	n
process	$RUST/src/sys/pal/xous/mod.rs	/^pub mod process;$/;"	n
process	$RUST/src/sys/pal/zkvm/mod.rs	/^pub mod process;$/;"	n
process	$RUST/src/sys_common/mod.rs	/^pub mod process;$/;"	n
process_common	$RUST/src/sys/pal/unix/process/mod.rs	/^mod process_common;$/;"	n
process_group	$RUST/src/os/unix/process.rs	/^    fn process_group(&mut self, pgroup: i32) -> &mut process::Command;$/;"	P	interface:CommandExt	signature:(&mut self, pgroup: i32) -> &mut process::Command
process_heap_alloc	$RUST/src/sys/pal/windows/alloc.rs	/^fn process_heap_alloc(flags: c::DWORD, dwBytes: c::SIZE_T) -> c::LPVOID {$/;"	f	signature:(flags: c::DWORD, dwBytes: c::SIZE_T) -> c::LPVOID
process_id	$RUST/src/process/tests.rs	/^        pub process_id: DWORD,$/;"	m	struct:test_creation_flags::DEBUG_EVENT
process_unsupported	$RUST/src/sys/pal/unix/process/mod.rs	/^mod process_unsupported;$/;"	n
process_unsupported_wait_status	$RUST/src/sys/pal/unix/process/process_unix.rs	/^mod process_unsupported_wait_status;$/;"	n
procfs	$RUST/src/sys/pal/unix/os.rs	/^    fn procfs() -> io::Result<PathBuf> {$/;"	f	function:current_exe	signature:() -> io::Result<PathBuf>
program	$RUST/src/sys/pal/unix/process/process_common.rs	/^    program: CString,$/;"	m	struct:Command
program	$RUST/src/sys/pal/windows/process.rs	/^    program: OsString,$/;"	m	struct:Command
program_exists	$RUST/src/sys/pal/windows/process.rs	/^fn program_exists(path: &Path) -> Option<Vec<u16>> {$/;"	f	signature:(path: &Path) -> Option<Vec<u16>>
program_is_path	$RUST/src/sys/pal/unix/process/process_common.rs	/^    pub fn program_is_path(&self) -> bool {$/;"	P	implementation:Command	signature:(&self) -> bool
program_kind	$RUST/src/sys/pal/unix/process/process_common.rs	/^    program_kind: ProgramKind,$/;"	m	struct:Command
properties	$RUST/src/sys/pal/unix/kernel_copy.rs	/^    fn properties(&self) -> CopyParams;$/;"	P	interface:CopyWrite	signature:(&self) -> CopyParams
provide	$RUST/src/error/tests.rs	/^    fn provide<'a>(&'a self, req: &mut Request<'a>) {$/;"	f	signature:<'a>(&'a self, req: &mut Request<'a>)
pthread_cond_timedwait	$RUST/src/sys/pal/teeos/locks/condvar.rs	/^    pub fn pthread_cond_timedwait($/;"	f	signature:( cond: *mut libc::pthread_cond_t, lock: *mut libc::pthread_mutex_t, adstime: *const libc::timespec, ) -> libc::c_int
pthread_t	$RUST/src/os/android/raw.rs	/^pub type pthread_t = c_long;$/;"	t
pthread_t	$RUST/src/os/dragonfly/raw.rs	/^pub type pthread_t = usize;$/;"	t
pthread_t	$RUST/src/os/emscripten/raw.rs	/^pub type pthread_t = c_ulong;$/;"	t
pthread_t	$RUST/src/os/espidf/raw.rs	/^pub type pthread_t = libc::pthread_t;$/;"	t
pthread_t	$RUST/src/os/freebsd/raw.rs	/^pub type pthread_t = usize;$/;"	t
pthread_t	$RUST/src/os/fuchsia/raw.rs	/^pub type pthread_t = c_ulong;$/;"	t
pthread_t	$RUST/src/os/haiku/raw.rs	/^pub type pthread_t = usize;$/;"	t
pthread_t	$RUST/src/os/horizon/raw.rs	/^pub type pthread_t = libc::pthread_t;$/;"	t
pthread_t	$RUST/src/os/hurd/raw.rs	/^pub type pthread_t = c_long;$/;"	t
pthread_t	$RUST/src/os/illumos/raw.rs	/^pub type pthread_t = u32;$/;"	t
pthread_t	$RUST/src/os/ios/raw.rs	/^pub type pthread_t = usize;$/;"	t
pthread_t	$RUST/src/os/l4re/raw.rs	/^pub type pthread_t = c_ulong;$/;"	t
pthread_t	$RUST/src/os/linux/raw.rs	/^pub type pthread_t = c_ulong;$/;"	t
pthread_t	$RUST/src/os/macos/raw.rs	/^pub type pthread_t = usize;$/;"	t
pthread_t	$RUST/src/os/netbsd/raw.rs	/^pub type pthread_t = usize;$/;"	t
pthread_t	$RUST/src/os/nto/raw.rs	/^pub type pthread_t = c_int;$/;"	t
pthread_t	$RUST/src/os/openbsd/raw.rs	/^pub type pthread_t = usize;$/;"	t
pthread_t	$RUST/src/os/redox/raw.rs	/^pub type pthread_t = *mut c_void;$/;"	t
pthread_t	$RUST/src/os/solaris/raw.rs	/^pub type pthread_t = u32;$/;"	t
pthread_t	$RUST/src/os/vita/raw.rs	/^pub type pthread_t = libc::pthread_t;$/;"	t
pthread_t	$RUST/src/os/vxworks/raw.rs	/^pub type pthread_t = c_ulong;$/;"	t
pthread_t	$RUST/src/os/watchos/raw.rs	/^pub type pthread_t = usize;$/;"	t
ptr	$RUST/src/sys/pal/windows/thread_parking.rs	/^    fn ptr(&self) -> c::LPVOID {$/;"	P	implementation:Parker	signature:(&self) -> c::LPVOID
ptr	$RUST/src/sys/personality/dwarf/mod.rs	/^    pub ptr: *const u8,$/;"	m	struct:DwarfReader
ptr	$RUST/src/sys_common/lazy_box.rs	/^    ptr: AtomicPtr<T>,$/;"	m	struct:LazyBox
ptrs	$RUST/src/sys/pal/unix/process/process_common.rs	/^    ptrs: Vec<*const c_char>,$/;"	m	struct:CStringArray
pub_keyword	$RUST/src/keyword_docs.rs	/^mod pub_keyword {}$/;"	n
push	$RUST/src/ffi/os_str.rs	/^    pub fn push<T: AsRef<OsStr>>(&mut self, s: T) {$/;"	P	implementation:OsString	signature:<T: AsRef<OsStr>>(&mut self, s: T)
push	$RUST/src/path.rs	/^    pub fn push<P: AsRef<Path>>(&mut self, path: P) {$/;"	P	implementation:PathBuf	signature:<P: AsRef<Path>>(&mut self, path: P)
push	$RUST/src/sys/pal/sgx/waitqueue/unsafe_list.rs	/^    pub unsafe fn push<'a>(&mut self, entry: &'a mut UnsafeListEntry<T>) -> &'a T {$/;"	P	implementation:UnsafeList	signature:<'a>(&mut self, entry: &'a mut UnsafeListEntry<T>) -> &'a T
push	$RUST/src/sys/pal/unix/process/process_common.rs	/^    pub fn push(&mut self, item: CString) {$/;"	P	implementation:CStringArray	signature:(&mut self, item: CString)
push	$RUST/src/sys_common/wtf8.rs	/^    pub fn push(&mut self, code_point: CodePoint) {$/;"	P	implementation:Wtf8Buf	signature:(&mut self, code_point: CodePoint)
push_char	$RUST/src/sys_common/wtf8.rs	/^    pub fn push_char(&mut self, c: char) {$/;"	P	implementation:Wtf8Buf	signature:(&mut self, c: char)
push_code_point_unchecked	$RUST/src/sys_common/wtf8.rs	/^    fn push_code_point_unchecked(&mut self, code_point: CodePoint) {$/;"	P	implementation:Wtf8Buf	signature:(&mut self, code_point: CodePoint)
push_pop	$RUST/src/sys/pal/sgx/waitqueue/unsafe_list/tests.rs	/^fn push_pop() {$/;"	f	signature:()
push_remove	$RUST/src/sys/pal/sgx/waitqueue/unsafe_list/tests.rs	/^fn push_remove() {$/;"	f	signature:()
push_remove_pop	$RUST/src/sys/pal/sgx/waitqueue/unsafe_list/tests.rs	/^fn push_remove_pop() {$/;"	f	signature:()
push_slice	$RUST/src/sys/os_str/bytes.rs	/^    pub fn push_slice(&mut self, s: &Slice) {$/;"	P	implementation:Buf	signature:(&mut self, s: &Slice)
push_slice	$RUST/src/sys/os_str/wtf8.rs	/^    pub fn push_slice(&mut self, s: &Slice) {$/;"	P	implementation:Buf	signature:(&mut self, s: &Slice)
push_str	$RUST/src/sys_common/wtf8.rs	/^    pub fn push_str(&mut self, other: &str) {$/;"	P	implementation:Wtf8Buf	signature:(&mut self, other: &str)
push_wtf8	$RUST/src/sys_common/wtf8.rs	/^    pub fn push_wtf8(&mut self, other: &Wtf8) {$/;"	P	implementation:Wtf8Buf	signature:(&mut self, other: &Wtf8)
pwrite	$RUST/src/sys/pal/wasi/fd.rs	/^    pub fn pwrite(&self, bufs: &[IoSlice<'_>], offset: u64) -> io::Result<usize> {$/;"	P	implementation:WasiFd	signature:(&self, bufs: &[IoSlice<'_>], offset: u64) -> io::Result<usize>
q_nan	$RUST/src/f32/tests.rs	/^    fn q_nan() -> f32 {$/;"	f	function:test_total_cmp	signature:() -> f32
q_nan	$RUST/src/f64/tests.rs	/^    fn q_nan() -> f64 {$/;"	f	function:test_total_cmp	signature:() -> f64
query	$RUST/src/sys/pal/windows/time.rs	/^    fn query() -> c::LARGE_INTEGER {$/;"	f	module:perf_counter	signature:() -> c::LARGE_INTEGER
queue	$RUST/src/sys/pal/sgx/waitqueue/mod.rs	/^    queue: WaitQueue,$/;"	m	struct:WaitVariable
queue	$RUST/src/sys/pal/sgx/waitqueue/tests.rs	/^fn queue() {$/;"	f	signature:()
queue_empty	$RUST/src/sys/pal/sgx/waitqueue/mod.rs	/^    pub fn queue_empty(&self) -> bool {$/;"	P	implementation:WaitVariable	signature:(&self) -> bool
quickack	$RUST/src/os/net/linux_ext/tcp.rs	/^    fn quickack(&self) -> io::Result<bool>;$/;"	P	interface:TcpStreamExt	signature:(&self) -> io::Result<bool>
quickack	$RUST/src/os/net/linux_ext/tests.rs	/^fn quickack() {$/;"	f	signature:()
quickack	$RUST/src/sys/pal/unix/net.rs	/^    pub fn quickack(&self) -> io::Result<bool> {$/;"	P	implementation:Socket	signature:(&self) -> io::Result<bool>
quiet_bit_mask	$RUST/src/f32/tests.rs	/^    fn quiet_bit_mask() -> u32 {$/;"	f	function:test_total_cmp	signature:() -> u32
quiet_bit_mask	$RUST/src/f64/tests.rs	/^    fn quiet_bit_mask() -> u64 {$/;"	f	function:test_total_cmp	signature:() -> u64
quota	$RUST/src/sys/pal/unix/thread.rs	/^    pub(super) fn quota() -> usize {$/;"	f	module:cgroups	signature:() -> usize
quota_v1	$RUST/src/sys/pal/unix/thread.rs	/^    fn quota_v1(group_path: PathBuf) -> usize {$/;"	f	module:cgroups	signature:(group_path: PathBuf) -> usize
quota_v2	$RUST/src/sys/pal/unix/thread.rs	/^    fn quota_v2(group_path: PathBuf) -> usize {$/;"	f	module:cgroups	signature:(group_path: PathBuf) -> usize
rand	$RUST/src/sys/pal/sgx/mod.rs	/^pub mod rand {$/;"	n
rand	$RUST/src/sys/pal/teeos/mod.rs	/^mod rand;$/;"	n
rand	$RUST/src/sys/pal/unix/mod.rs	/^pub mod rand;$/;"	n
rand	$RUST/src/sys/pal/windows/mod.rs	/^pub mod rand;$/;"	n
random	$RUST/src/hash/mod.rs	/^pub(crate) mod random;$/;"	n
random_failure	$RUST/src/sys/pal/unix/rand.rs	/^    fn random_failure() -> ! {$/;"	f	module:imp	signature:() -> !
random_number	$RUST/src/sys/pal/windows/pipe.rs	/^fn random_number() -> usize {$/;"	f	signature:() -> usize
raw	$RUST/src/os/aix/mod.rs	/^pub mod raw;$/;"	n
raw	$RUST/src/os/android/fs.rs	/^        unsafe { &*(self.as_inner().as_inner() as *const libc::stat as *const raw::stat) }$/;"	C	method:Metadata::as_raw_stat
raw	$RUST/src/os/android/mod.rs	/^pub mod raw;$/;"	n
raw	$RUST/src/os/dragonfly/fs.rs	/^        unsafe { &*(self.as_inner().as_inner() as *const libc::stat as *const raw::stat) }$/;"	C	method:Metadata::as_raw_stat
raw	$RUST/src/os/dragonfly/mod.rs	/^pub mod raw;$/;"	n
raw	$RUST/src/os/emscripten/fs.rs	/^        unsafe { &*(self.as_inner().as_inner() as *const libc::stat64 as *const raw::stat) }$/;"	C	method:Metadata::as_raw_stat
raw	$RUST/src/os/emscripten/mod.rs	/^pub mod raw;$/;"	n
raw	$RUST/src/os/espidf/fs.rs	/^        unsafe { &*(self.as_inner().as_inner() as *const libc::stat as *const raw::stat) }$/;"	C	method:Metadata::as_raw_stat
raw	$RUST/src/os/espidf/mod.rs	/^pub mod raw;$/;"	n
raw	$RUST/src/os/fd/mod.rs	/^mod raw;$/;"	n
raw	$RUST/src/os/fortanix_sgx/mod.rs	/^    pub mod raw {$/;"	n	module:usercalls
raw	$RUST/src/os/freebsd/mod.rs	/^pub mod raw;$/;"	n
raw	$RUST/src/os/fuchsia/mod.rs	/^pub mod raw;$/;"	n
raw	$RUST/src/os/haiku/fs.rs	/^        unsafe { &*(self.as_inner().as_inner() as *const libc::stat as *const raw::stat) }$/;"	C	method:Metadata::as_raw_stat
raw	$RUST/src/os/haiku/mod.rs	/^pub mod raw;$/;"	n
raw	$RUST/src/os/hermit/io/mod.rs	/^mod raw;$/;"	n
raw	$RUST/src/os/horizon/mod.rs	/^pub(crate) mod raw;$/;"	n
raw	$RUST/src/os/hurd/mod.rs	/^pub mod raw;$/;"	n
raw	$RUST/src/os/illumos/fs.rs	/^        unsafe { &*(self.as_inner().as_inner() as *const libc::stat as *const raw::stat) }$/;"	C	method:Metadata::as_raw_stat
raw	$RUST/src/os/illumos/mod.rs	/^pub mod raw;$/;"	n
raw	$RUST/src/os/ios/fs.rs	/^        unsafe { &*(self.as_inner().as_inner() as *const libc::stat as *const raw::stat) }$/;"	C	method:Metadata::as_raw_stat
raw	$RUST/src/os/ios/mod.rs	/^pub mod raw;$/;"	n
raw	$RUST/src/os/l4re/fs.rs	/^        unsafe { &*(self.as_inner().as_inner() as *const libc::stat64 as *const raw::stat) }$/;"	C	method:Metadata::as_raw_stat
raw	$RUST/src/os/l4re/mod.rs	/^pub mod raw;$/;"	n
raw	$RUST/src/os/linux/fs.rs	/^            &*(self.as_inner().as_inner() as *const libc::stat64 as *const raw::stat)$/;"	C	method:Metadata::as_raw_stat
raw	$RUST/src/os/linux/mod.rs	/^pub mod raw;$/;"	n
raw	$RUST/src/os/macos/fs.rs	/^        unsafe { &*(self.as_inner().as_inner() as *const libc::stat as *const raw::stat) }$/;"	C	method:Metadata::as_raw_stat
raw	$RUST/src/os/macos/mod.rs	/^pub mod raw;$/;"	n
raw	$RUST/src/os/mod.rs	/^pub mod raw;$/;"	n
raw	$RUST/src/os/netbsd/fs.rs	/^        unsafe { &*(self.as_inner().as_inner() as *const libc::stat as *const raw::stat) }$/;"	C	method:Metadata::as_raw_stat
raw	$RUST/src/os/netbsd/mod.rs	/^pub mod raw;$/;"	n
raw	$RUST/src/os/nto/mod.rs	/^pub(super) mod raw;$/;"	n
raw	$RUST/src/os/openbsd/fs.rs	/^        unsafe { &*(self.as_inner().as_inner() as *const libc::stat as *const raw::stat) }$/;"	C	method:Metadata::as_raw_stat
raw	$RUST/src/os/openbsd/mod.rs	/^pub mod raw;$/;"	n
raw	$RUST/src/os/redox/fs.rs	/^        unsafe { &*(self.as_inner().as_inner() as *const libc::stat as *const raw::stat) }$/;"	C	method:Metadata::as_raw_stat
raw	$RUST/src/os/redox/mod.rs	/^pub mod raw;$/;"	n
raw	$RUST/src/os/solaris/fs.rs	/^        unsafe { &*(self.as_inner().as_inner() as *const libc::stat as *const raw::stat) }$/;"	C	method:Metadata::as_raw_stat
raw	$RUST/src/os/solaris/mod.rs	/^pub mod raw;$/;"	n
raw	$RUST/src/os/unix/mod.rs	/^pub mod raw;$/;"	n
raw	$RUST/src/os/vita/mod.rs	/^pub(crate) mod raw;$/;"	n
raw	$RUST/src/os/vxworks/mod.rs	/^pub mod raw;$/;"	n
raw	$RUST/src/os/watchos/fs.rs	/^        unsafe { &*(self.as_inner().as_inner() as *const libc::stat as *const raw::stat) }$/;"	C	method:Metadata::as_raw_stat
raw	$RUST/src/os/watchos/mod.rs	/^pub mod raw;$/;"	n
raw	$RUST/src/os/windows/io/mod.rs	/^mod raw;$/;"	n
raw	$RUST/src/os/windows/mod.rs	/^pub mod raw;$/;"	n
raw	$RUST/src/path.rs	/^    raw: &'a OsStr,$/;"	m	struct:PrefixComponent
raw	$RUST/src/sys/pal/itron/mutex.rs	/^    fn raw(&self) -> abi::ID {$/;"	P	implementation:Mutex	signature:(&self) -> abi::ID
raw	$RUST/src/sys/pal/sgx/abi/usercalls/mod.rs	/^pub(crate) mod raw;$/;"	n
raw	$RUST/src/sys/pal/sgx/fd.rs	/^    pub fn raw(&self) -> Fd {$/;"	P	implementation:FileDesc	signature:(&self) -> Fd
raw	$RUST/src/sys/pal/solid/fs.rs	/^    fn raw(&self) -> c_int {$/;"	P	implementation:FileDesc	signature:(&self) -> c_int
raw	$RUST/src/sys/pal/solid/rwlock.rs	/^    fn raw(&self) -> abi::ID {$/;"	P	implementation:RwLock	signature:(&self) -> abi::ID
raw	$RUST/src/sys/pal/teeos/locks/condvar.rs	/^fn raw(c: &Condvar) -> *mut libc::pthread_cond_t {$/;"	f	signature:(c: &Condvar) -> *mut libc::pthread_cond_t
raw	$RUST/src/sys/pal/unix/locks/pthread_condvar.rs	/^fn raw(c: &Condvar) -> *mut libc::pthread_cond_t {$/;"	f	signature:(c: &Condvar) -> *mut libc::pthread_cond_t
raw	$RUST/src/sys/pal/unix/locks/pthread_mutex.rs	/^pub unsafe fn raw(m: &Mutex) -> *mut libc::pthread_mutex_t {$/;"	f	signature:(m: &Mutex) -> *mut libc::pthread_mutex_t
raw	$RUST/src/sys/pal/unix/process/zircon.rs	/^    raw: zx_handle_t,$/;"	m	struct:Handle
raw	$RUST/src/sys/pal/windows/locks/mutex.rs	/^pub unsafe fn raw(m: &Mutex) -> c::PSRWLOCK {$/;"	f	signature:(m: &Mutex) -> c::PSRWLOCK
raw	$RUST/src/sys/pal/xous/net/mod.rs	/^    raw: [u8; 4096],$/;"	m	struct:SendData
raw_arg	$RUST/src/os/windows/process.rs	/^    fn raw_arg<S: AsRef<OsStr>>(&mut self, text_to_append_as_is: S) -> &mut process::Command;$/;"	P	interface:CommandExt	signature:<S: AsRef<OsStr>>(&mut self, text_to_append_as_is: S) -> &mut process::Command
raw_arg	$RUST/src/sys/pal/windows/process.rs	/^    pub fn raw_arg(&mut self, command_str_to_append: &OsStr) {$/;"	P	implementation:Command	signature:(&mut self, command_str_to_append: &OsStr)
raw_attribute	$RUST/src/os/windows/process.rs	/^    unsafe fn raw_attribute<T: Copy + Send + Sync + 'static>($/;"	P	interface:CommandExt	signature:<T: Copy + Send + Sync + 'static>( &mut self, attribute: usize, value: T, ) -> &mut process::Command
raw_attribute	$RUST/src/sys/pal/windows/process.rs	/^    pub unsafe fn raw_attribute<T: Copy + Send + Sync + 'static>($/;"	P	implementation:Command	signature:<T: Copy + Send + Sync + 'static>( &mut self, attribute: usize, value: T, )
raw_entry	$RUST/src/collections/hash/map.rs	/^    pub fn raw_entry(&self) -> RawEntryBuilder<'_, K, V, S> {$/;"	f	signature:(&self) -> RawEntryBuilder<'_, K, V, S>
raw_entry_mut	$RUST/src/collections/hash/map.rs	/^    pub fn raw_entry_mut(&mut self) -> RawEntryBuilderMut<'_, K, V, S> {$/;"	f	signature:(&mut self) -> RawEntryBuilderMut<'_, K, V, S>
raw_os_error	$RUST/src/io/error.rs	/^    pub fn raw_os_error(&self) -> Option<RawOsError> {$/;"	P	implementation:Error	signature:(&self) -> Option<RawOsError>
raw_unlock	$RUST/src/sys/pal/unix/locks/pthread_rwlock.rs	/^    unsafe fn raw_unlock(&self) {$/;"	P	implementation:AllocatedRwLock	signature:(&self)
rdev	$RUST/src/os/unix/fs.rs	/^    fn rdev(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
rdrand64	$RUST/src/sys/pal/sgx/mod.rs	/^    pub fn rdrand64() -> u64 {$/;"	f	module:rand	signature:() -> u64
read	$RUST/src/fs.rs	/^pub fn read<P: AsRef<Path>>(path: P) -> io::Result<Vec<u8>> {$/;"	f	signature:<P: AsRef<Path>>(path: P) -> io::Result<Vec<u8>>
read	$RUST/src/io/buffered/bufreader.rs	/^    fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {$/;"	P	implementation:BufReader	signature:(&mut self, buf: &mut [u8]) -> io::Result<usize>
read	$RUST/src/io/buffered/tests.rs	/^    fn read(&mut self, _: &mut [u8]) -> io::Result<usize> {$/;"	P	implementation:ShortReader	signature:(&mut self, _: &mut [u8]) -> io::Result<usize>
read	$RUST/src/io/copy/tests.rs	/^    fn read(&mut self, buf: &mut [u8]) -> Result<usize> {$/;"	P	implementation:ShortReader	signature:(&mut self, buf: &mut [u8]) -> Result<usize>
read	$RUST/src/io/cursor.rs	/^    fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {$/;"	f	signature:(&mut self, buf: &mut [u8]) -> io::Result<usize>
read	$RUST/src/io/impls.rs	/^    fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {$/;"	P	implementation:u8	signature:(&mut self, buf: &mut [u8]) -> io::Result<usize>
read	$RUST/src/io/mod.rs	/^    fn read(&mut self, buf: &mut [u8]) -> Result<usize>;$/;"	P	interface:Read	signature:(&mut self, buf: &mut [u8]) -> Result<usize>
read	$RUST/src/io/stdio.rs	/^    fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {$/;"	P	implementation:StdinRaw	signature:(&mut self, buf: &mut [u8]) -> io::Result<usize>
read	$RUST/src/io/tests.rs	/^    fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {$/;"	P	implementation:ExampleSliceReader	signature:(&mut self, buf: &mut [u8]) -> io::Result<usize>
read	$RUST/src/io/util.rs	/^    fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {$/;"	P	implementation:Repeat	signature:(&mut self, buf: &mut [u8]) -> io::Result<usize>
read	$RUST/src/net/tcp.rs	/^    fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {$/;"	P	implementation:TcpStream	signature:(&mut self, buf: &mut [u8]) -> io::Result<usize>
read	$RUST/src/os/unix/net/stream.rs	/^    fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {$/;"	P	implementation:UnixStream	signature:(&mut self, buf: &mut [u8]) -> io::Result<usize>
read	$RUST/src/process.rs	/^    fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {$/;"	P	implementation:ChildStdout	signature:(&mut self, buf: &mut [u8]) -> io::Result<usize>
read	$RUST/src/sync/mpmc/array.rs	/^    pub(crate) unsafe fn read(&self, token: &mut Token) -> Result<T, ()> {$/;"	P	implementation:Channel	signature:(&self, token: &mut Token) -> Result<T, ()>
read	$RUST/src/sync/mpmc/list.rs	/^    pub(crate) unsafe fn read(&self, token: &mut Token) -> Result<T, ()> {$/;"	P	implementation:Channel	signature:(&self, token: &mut Token) -> Result<T, ()>
read	$RUST/src/sync/mpmc/zero.rs	/^    pub(crate) unsafe fn read(&self, token: &mut Token) -> Result<T, ()> {$/;"	P	implementation:Channel	signature:(&self, token: &mut Token) -> Result<T, ()>
read	$RUST/src/sync/rwlock.rs	/^    pub fn read(&self) -> LockResult<RwLockReadGuard<'_, T>> {$/;"	P	implementation:RwLock	signature:(&self) -> LockResult<RwLockReadGuard<'_, T>>
read	$RUST/src/sys/pal/hermit/fd.rs	/^    pub fn read(&self, buf: &mut [u8]) -> io::Result<usize> {$/;"	P	implementation:FileDesc	signature:(&self, buf: &mut [u8]) -> io::Result<usize>
read	$RUST/src/sys/pal/hermit/fs.rs	/^    read: bool,$/;"	m	struct:OpenOptions
read	$RUST/src/sys/pal/hermit/net.rs	/^    pub fn read(&self, buf: &mut [u8]) -> io::Result<usize> {$/;"	P	implementation:Socket	signature:(&self, buf: &mut [u8]) -> io::Result<usize>
read	$RUST/src/sys/pal/hermit/stdio.rs	/^    fn read(&mut self, data: &mut [u8]) -> io::Result<usize> {$/;"	P	implementation:Stdin	signature:(&mut self, data: &mut [u8]) -> io::Result<usize>
read	$RUST/src/sys/pal/sgx/abi/usercalls/mod.rs	/^pub fn read(fd: Fd, bufs: &mut [IoSliceMut<'_>]) -> IoResult<usize> {$/;"	f	signature:(fd: Fd, bufs: &mut [IoSliceMut<'_>]) -> IoResult<usize>
read	$RUST/src/sys/pal/sgx/fd.rs	/^    pub fn read(&self, buf: &mut [u8]) -> io::Result<usize> {$/;"	P	implementation:FileDesc	signature:(&self, buf: &mut [u8]) -> io::Result<usize>
read	$RUST/src/sys/pal/sgx/net.rs	/^    pub fn read(&self, buf: &mut [u8]) -> io::Result<usize> {$/;"	P	implementation:TcpStream	signature:(&self, buf: &mut [u8]) -> io::Result<usize>
read	$RUST/src/sys/pal/sgx/rwlock.rs	/^    pub fn read(&self) {$/;"	P	implementation:RwLock	signature:(&self)
read	$RUST/src/sys/pal/sgx/stdio.rs	/^    fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {$/;"	P	implementation:Stdin	signature:(&mut self, buf: &mut [u8]) -> io::Result<usize>
read	$RUST/src/sys/pal/solid/abi/sockets.rs	/^    pub fn read(s: c_int, mem: *mut c_void, len: size_t) -> ssize_t;$/;"	f	signature:(s: c_int, mem: *mut c_void, len: size_t) -> ssize_t
read	$RUST/src/sys/pal/solid/fs.rs	/^    read: bool,$/;"	m	struct:OpenOptions
read	$RUST/src/sys/pal/solid/net.rs	/^    pub fn read(&self, buf: &mut [u8]) -> io::Result<usize> {$/;"	P	implementation:Socket	signature:(&self, buf: &mut [u8]) -> io::Result<usize>
read	$RUST/src/sys/pal/solid/rwlock.rs	/^    pub fn read(&self) {$/;"	P	implementation:RwLock	signature:(&self)
read	$RUST/src/sys/pal/solid/stdio.rs	/^    fn read(&mut self, _buf: &mut [u8]) -> io::Result<usize> {$/;"	P	implementation:Stdin	signature:(&mut self, _buf: &mut [u8]) -> io::Result<usize>
read	$RUST/src/sys/pal/teeos/locks/rwlock.rs	/^    pub fn read(&self) {$/;"	P	implementation:RwLock	signature:(&self)
read	$RUST/src/sys/pal/teeos/net.rs	/^    pub fn read(&self, _: &mut [u8]) -> io::Result<usize> {$/;"	P	implementation:TcpStream	signature:(&self, _: &mut [u8]) -> io::Result<usize>
read	$RUST/src/sys/pal/teeos/stdio.rs	/^    fn read(&mut self, _buf: &mut [u8]) -> io::Result<usize> {$/;"	P	implementation:Stdin	signature:(&mut self, _buf: &mut [u8]) -> io::Result<usize>
read	$RUST/src/sys/pal/uefi/stdio.rs	/^    fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {$/;"	P	implementation:Stdin	signature:(&mut self, buf: &mut [u8]) -> io::Result<usize>
read	$RUST/src/sys/pal/unix/fd.rs	/^    pub fn read(&self, buf: &mut [u8]) -> io::Result<usize> {$/;"	P	implementation:FileDesc	signature:(&self, buf: &mut [u8]) -> io::Result<usize>
read	$RUST/src/sys/pal/unix/fs.rs	/^    read: bool,$/;"	m	struct:OpenOptions
read	$RUST/src/sys/pal/unix/kernel_copy.rs	/^    read: &'a mut R,$/;"	m	struct:Copier
read	$RUST/src/sys/pal/unix/l4re.rs	/^        pub fn read(&self, _: &mut [u8]) -> io::Result<usize> {$/;"	P	implementation:net::TcpStream	signature:(&self, _: &mut [u8]) -> io::Result<usize>
read	$RUST/src/sys/pal/unix/locks/futex_rwlock.rs	/^    pub fn read(&self) {$/;"	P	implementation:RwLock	signature:(&self)
read	$RUST/src/sys/pal/unix/locks/pthread_rwlock.rs	/^    pub fn read(&self) {$/;"	P	implementation:RwLock	signature:(&self)
read	$RUST/src/sys/pal/unix/net.rs	/^    pub fn read(&self, buf: &mut [u8]) -> io::Result<usize> {$/;"	P	implementation:Socket	signature:(&self, buf: &mut [u8]) -> io::Result<usize>
read	$RUST/src/sys/pal/unix/pipe.rs	/^    pub fn read(&self, buf: &mut [u8]) -> io::Result<usize> {$/;"	P	implementation:AnonPipe	signature:(&self, buf: &mut [u8]) -> io::Result<usize>
read	$RUST/src/sys/pal/unix/stdio.rs	/^    fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {$/;"	P	implementation:Stdin	signature:(&mut self, buf: &mut [u8]) -> io::Result<usize>
read	$RUST/src/sys/pal/unsupported/fs.rs	/^    pub fn read(&self, _buf: &mut [u8]) -> io::Result<usize> {$/;"	P	implementation:File	signature:(&self, _buf: &mut [u8]) -> io::Result<usize>
read	$RUST/src/sys/pal/unsupported/locks/rwlock.rs	/^    pub fn read(&self) {$/;"	P	implementation:RwLock	signature:(&self)
read	$RUST/src/sys/pal/unsupported/net.rs	/^    pub fn read(&self, _: &mut [u8]) -> io::Result<usize> {$/;"	P	implementation:TcpStream	signature:(&self, _: &mut [u8]) -> io::Result<usize>
read	$RUST/src/sys/pal/unsupported/pipe.rs	/^    pub fn read(&self, _buf: &mut [u8]) -> io::Result<usize> {$/;"	P	implementation:AnonPipe	signature:(&self, _buf: &mut [u8]) -> io::Result<usize>
read	$RUST/src/sys/pal/unsupported/stdio.rs	/^    fn read(&mut self, _buf: &mut [u8]) -> io::Result<usize> {$/;"	P	implementation:Stdin	signature:(&mut self, _buf: &mut [u8]) -> io::Result<usize>
read	$RUST/src/sys/pal/wasi/fd.rs	/^    pub fn read(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {$/;"	P	implementation:WasiFd	signature:(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize>
read	$RUST/src/sys/pal/wasi/fs.rs	/^    read: bool,$/;"	m	struct:OpenOptions
read	$RUST/src/sys/pal/wasi/net.rs	/^    pub fn read(&self, buf: &mut [u8]) -> io::Result<usize> {$/;"	P	implementation:TcpStream	signature:(&self, buf: &mut [u8]) -> io::Result<usize>
read	$RUST/src/sys/pal/wasi/stdio.rs	/^    fn read(&mut self, data: &mut [u8]) -> io::Result<usize> {$/;"	P	implementation:Stdin	signature:(&mut self, data: &mut [u8]) -> io::Result<usize>
read	$RUST/src/sys/pal/windows/fs.rs	/^    read: bool,$/;"	m	struct:OpenOptions
read	$RUST/src/sys/pal/windows/handle.rs	/^    pub fn read(&self, buf: &mut [u8]) -> io::Result<usize> {$/;"	P	implementation:Handle	signature:(&self, buf: &mut [u8]) -> io::Result<usize>
read	$RUST/src/sys/pal/windows/locks/rwlock.rs	/^    pub fn read(&self) {$/;"	P	implementation:RwLock	signature:(&self)
read	$RUST/src/sys/pal/windows/net.rs	/^    pub fn read(&self, buf: &mut [u8]) -> io::Result<usize> {$/;"	P	implementation:Socket	signature:(&self, buf: &mut [u8]) -> io::Result<usize>
read	$RUST/src/sys/pal/windows/pipe.rs	/^    pub fn read(&self, buf: &mut [u8]) -> io::Result<usize> {$/;"	P	implementation:AnonPipe	signature:(&self, buf: &mut [u8]) -> io::Result<usize>
read	$RUST/src/sys/pal/windows/stdio.rs	/^    fn read(&mut self, buf: &mut [u8]) -> usize {$/;"	P	implementation:IncompleteUtf8	signature:(&mut self, buf: &mut [u8]) -> usize
read	$RUST/src/sys/pal/xous/locks/rwlock.rs	/^    pub unsafe fn read(&self) {$/;"	P	implementation:RwLock	signature:(&self)
read	$RUST/src/sys/pal/xous/net/tcpstream.rs	/^    pub fn read(&self, buf: &mut [u8]) -> io::Result<usize> {$/;"	P	implementation:TcpStream	signature:(&self, buf: &mut [u8]) -> io::Result<usize>
read	$RUST/src/sys/pal/xous/stdio.rs	/^    fn read(&mut self, _buf: &mut [u8]) -> io::Result<usize> {$/;"	P	implementation:Stdin	signature:(&mut self, _buf: &mut [u8]) -> io::Result<usize>
read	$RUST/src/sys/pal/zkvm/stdio.rs	/^    fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {$/;"	P	implementation:Stdin	signature:(&mut self, buf: &mut [u8]) -> io::Result<usize>
read	$RUST/src/sys/personality/dwarf/mod.rs	/^    pub unsafe fn read<T: Copy>(&mut self) -> T {$/;"	P	implementation:DwarfReader	signature:<T: Copy>(&mut self) -> T
read	$RUST/src/sys_common/net.rs	/^    pub fn read(&self, buf: &mut [u8]) -> io::Result<usize> {$/;"	P	implementation:TcpStream	signature:(&self, buf: &mut [u8]) -> io::Result<usize>
read2	$RUST/src/sys/pal/unix/pipe.rs	/^pub fn read2(p1: AnonPipe, v1: &mut Vec<u8>, p2: AnonPipe, v2: &mut Vec<u8>) -> io::Result<()> {$/;"	f	signature:(p1: AnonPipe, v1: &mut Vec<u8>, p2: AnonPipe, v2: &mut Vec<u8>) -> io::Result<()>
read2	$RUST/src/sys/pal/unsupported/pipe.rs	/^pub fn read2(p1: AnonPipe, _v1: &mut Vec<u8>, _p2: AnonPipe, _v2: &mut Vec<u8>) -> io::Result<()/;"	f	signature:(p1: AnonPipe, _v1: &mut Vec<u8>, _p2: AnonPipe, _v2: &mut Vec<u8>) -> io::Result<()>
read2	$RUST/src/sys/pal/windows/pipe.rs	/^pub fn read2(p1: AnonPipe, v1: &mut Vec<u8>, p2: AnonPipe, v2: &mut Vec<u8>) -> io::Result<()> {$/;"	f	signature:(p1: AnonPipe, v1: &mut Vec<u8>, p2: AnonPipe, v2: &mut Vec<u8>) -> io::Result<()>
read_alloc	$RUST/src/sys/pal/sgx/abi/usercalls/mod.rs	/^pub fn read_alloc(fd: Fd) -> IoResult<Vec<u8>> {$/;"	f	signature:(fd: Fd) -> IoResult<Vec<u8>>
read_at	$RUST/src/os/unix/fs.rs	/^    fn read_at(&self, buf: &mut [u8], offset: u64) -> io::Result<usize>;$/;"	P	interface:FileExt	signature:(&self, buf: &mut [u8], offset: u64) -> io::Result<usize>
read_at	$RUST/src/os/wasi/fs.rs	/^    fn read_at(&self, buf: &mut [u8], offset: u64) -> io::Result<usize> {$/;"	P	interface:FileExt	signature:(&self, buf: &mut [u8], offset: u64) -> io::Result<usize>
read_at	$RUST/src/sys/pal/unix/fd.rs	/^    pub fn read_at(&self, buf: &mut [u8], offset: u64) -> io::Result<usize> {$/;"	P	implementation:FileDesc	signature:(&self, buf: &mut [u8], offset: u64) -> io::Result<usize>
read_at	$RUST/src/sys/pal/unix/fs.rs	/^    pub fn read_at(&self, buf: &mut [u8], offset: u64) -> io::Result<usize> {$/;"	P	implementation:File	signature:(&self, buf: &mut [u8], offset: u64) -> io::Result<usize>
read_at	$RUST/src/sys/pal/windows/fs.rs	/^    pub fn read_at(&self, buf: &mut [u8], offset: u64) -> io::Result<usize> {$/;"	P	implementation:File	signature:(&self, buf: &mut [u8], offset: u64) -> io::Result<usize>
read_at	$RUST/src/sys/pal/windows/handle.rs	/^    pub fn read_at(&self, buf: &mut [u8], offset: u64) -> io::Result<usize> {$/;"	P	implementation:Handle	signature:(&self, buf: &mut [u8], offset: u64) -> io::Result<usize>
read_buf	$RUST/src/fs.rs	/^    fn read_buf(&mut self, cursor: BorrowedCursor<'_>) -> io::Result<()> {$/;"	P	implementation:File	signature:(&mut self, cursor: BorrowedCursor<'_>) -> io::Result<()>
read_buf	$RUST/src/io/buffered/bufreader.rs	/^    fn read_buf(&mut self, mut cursor: BorrowedCursor<'_>) -> io::Result<()> {$/;"	P	implementation:BufReader	signature:(&mut self, mut cursor: BorrowedCursor<'_>) -> io::Result<()>
read_buf	$RUST/src/io/cursor.rs	/^    fn read_buf(&mut self, mut cursor: BorrowedCursor<'_>) -> io::Result<()> {$/;"	f	signature:(&mut self, mut cursor: BorrowedCursor<'_>) -> io::Result<()>
read_buf	$RUST/src/io/impls.rs	/^    fn read_buf(&mut self, mut cursor: BorrowedCursor<'_>) -> io::Result<()> {$/;"	P	implementation:u8	signature:(&mut self, mut cursor: BorrowedCursor<'_>) -> io::Result<()>
read_buf	$RUST/src/io/mod.rs	/^    fn read_buf(&mut self, mut buf: BorrowedCursor<'_>) -> Result<()> {$/;"	P	implementation:Take	signature:(&mut self, mut buf: BorrowedCursor<'_>) -> Result<()>
read_buf	$RUST/src/io/stdio.rs	/^    fn read_buf(&mut self, buf: BorrowedCursor<'_>) -> io::Result<()> {$/;"	P	implementation:StdinRaw	signature:(&mut self, buf: BorrowedCursor<'_>) -> io::Result<()>
read_buf	$RUST/src/io/util.rs	/^    fn read_buf(&mut self, mut buf: BorrowedCursor<'_>) -> io::Result<()> {$/;"	P	implementation:Repeat	signature:(&mut self, mut buf: BorrowedCursor<'_>) -> io::Result<()>
read_buf	$RUST/src/net/tcp.rs	/^    fn read_buf(&mut self, buf: BorrowedCursor<'_>) -> io::Result<()> {$/;"	P	implementation:TcpStream	signature:(&mut self, buf: BorrowedCursor<'_>) -> io::Result<()>
read_buf	$RUST/src/net/tcp/tests.rs	/^fn read_buf() {$/;"	f	signature:()
read_buf	$RUST/src/process.rs	/^    fn read_buf(&mut self, buf: BorrowedCursor<'_>) -> io::Result<()> {$/;"	P	implementation:ChildStdout	signature:(&mut self, buf: BorrowedCursor<'_>) -> io::Result<()>
read_buf	$RUST/src/sys/pal/hermit/fs.rs	/^    pub fn read_buf(&self, cursor: BorrowedCursor<'_>) -> io::Result<()> {$/;"	P	implementation:File	signature:(&self, cursor: BorrowedCursor<'_>) -> io::Result<()>
read_buf	$RUST/src/sys/pal/hermit/net.rs	/^    pub fn read_buf(&self, buf: BorrowedCursor<'_>) -> io::Result<()> {$/;"	P	implementation:Socket	signature:(&self, buf: BorrowedCursor<'_>) -> io::Result<()>
read_buf	$RUST/src/sys/pal/sgx/fd.rs	/^    pub fn read_buf(&self, buf: BorrowedCursor<'_>) -> io::Result<()> {$/;"	P	implementation:FileDesc	signature:(&self, buf: BorrowedCursor<'_>) -> io::Result<()>
read_buf	$RUST/src/sys/pal/sgx/net.rs	/^    pub fn read_buf(&self, buf: BorrowedCursor<'_>) -> io::Result<()> {$/;"	P	implementation:TcpStream	signature:(&self, buf: BorrowedCursor<'_>) -> io::Result<()>
read_buf	$RUST/src/sys/pal/solid/net.rs	/^    pub fn read_buf(&self, buf: BorrowedCursor<'_>) -> io::Result<()> {$/;"	P	implementation:Socket	signature:(&self, buf: BorrowedCursor<'_>) -> io::Result<()>
read_buf	$RUST/src/sys/pal/teeos/net.rs	/^    pub fn read_buf(&self, _buf: BorrowedCursor<'_>) -> io::Result<()> {$/;"	P	implementation:TcpStream	signature:(&self, _buf: BorrowedCursor<'_>) -> io::Result<()>
read_buf	$RUST/src/sys/pal/unix/fd.rs	/^    pub fn read_buf(&self, mut cursor: BorrowedCursor<'_>) -> io::Result<()> {$/;"	P	implementation:FileDesc	signature:(&self, mut cursor: BorrowedCursor<'_>) -> io::Result<()>
read_buf	$RUST/src/sys/pal/unix/fs.rs	/^    pub fn read_buf(&self, cursor: BorrowedCursor<'_>) -> io::Result<()> {$/;"	P	implementation:File	signature:(&self, cursor: BorrowedCursor<'_>) -> io::Result<()>
read_buf	$RUST/src/sys/pal/unix/l4re.rs	/^        pub fn read_buf(&self, _: BorrowedCursor<'_>) -> io::Result<()> {$/;"	P	implementation:net::TcpStream	signature:(&self, _: BorrowedCursor<'_>) -> io::Result<()>
read_buf	$RUST/src/sys/pal/unix/net.rs	/^    pub fn read_buf(&self, buf: BorrowedCursor<'_>) -> io::Result<()> {$/;"	P	implementation:Socket	signature:(&self, buf: BorrowedCursor<'_>) -> io::Result<()>
read_buf	$RUST/src/sys/pal/unix/pipe.rs	/^    pub fn read_buf(&self, buf: BorrowedCursor<'_>) -> io::Result<()> {$/;"	P	implementation:AnonPipe	signature:(&self, buf: BorrowedCursor<'_>) -> io::Result<()>
read_buf	$RUST/src/sys/pal/unix/stdio.rs	/^    fn read_buf(&mut self, buf: BorrowedCursor<'_>) -> io::Result<()> {$/;"	P	implementation:Stdin	signature:(&mut self, buf: BorrowedCursor<'_>) -> io::Result<()>
read_buf	$RUST/src/sys/pal/unsupported/fs.rs	/^    pub fn read_buf(&self, _cursor: BorrowedCursor<'_>) -> io::Result<()> {$/;"	P	implementation:File	signature:(&self, _cursor: BorrowedCursor<'_>) -> io::Result<()>
read_buf	$RUST/src/sys/pal/unsupported/net.rs	/^    pub fn read_buf(&self, _buf: BorrowedCursor<'_>) -> io::Result<()> {$/;"	P	implementation:TcpStream	signature:(&self, _buf: BorrowedCursor<'_>) -> io::Result<()>
read_buf	$RUST/src/sys/pal/unsupported/pipe.rs	/^    pub fn read_buf(&self, _buf: BorrowedCursor<'_>) -> io::Result<()> {$/;"	P	implementation:AnonPipe	signature:(&self, _buf: BorrowedCursor<'_>) -> io::Result<()>
read_buf	$RUST/src/sys/pal/wasi/fd.rs	/^    pub fn read_buf(&self, mut buf: BorrowedCursor<'_>) -> io::Result<()> {$/;"	P	implementation:WasiFd	signature:(&self, mut buf: BorrowedCursor<'_>) -> io::Result<()>
read_buf	$RUST/src/sys/pal/wasi/fs.rs	/^    pub fn read_buf(&self, cursor: BorrowedCursor<'_>) -> io::Result<()> {$/;"	P	implementation:File	signature:(&self, cursor: BorrowedCursor<'_>) -> io::Result<()>
read_buf	$RUST/src/sys/pal/wasi/net.rs	/^    pub fn read_buf(&self, buf: BorrowedCursor<'_>) -> io::Result<()> {$/;"	P	implementation:TcpStream	signature:(&self, buf: BorrowedCursor<'_>) -> io::Result<()>
read_buf	$RUST/src/sys/pal/windows/fs.rs	/^    pub fn read_buf(&self, cursor: BorrowedCursor<'_>) -> io::Result<()> {$/;"	P	implementation:File	signature:(&self, cursor: BorrowedCursor<'_>) -> io::Result<()>
read_buf	$RUST/src/sys/pal/windows/handle.rs	/^    pub fn read_buf(&self, mut cursor: BorrowedCursor<'_>) -> io::Result<()> {$/;"	P	implementation:Handle	signature:(&self, mut cursor: BorrowedCursor<'_>) -> io::Result<()>
read_buf	$RUST/src/sys/pal/windows/net.rs	/^    pub fn read_buf(&self, buf: BorrowedCursor<'_>) -> io::Result<()> {$/;"	P	implementation:Socket	signature:(&self, buf: BorrowedCursor<'_>) -> io::Result<()>
read_buf	$RUST/src/sys/pal/windows/pipe.rs	/^    pub fn read_buf(&self, mut buf: BorrowedCursor<'_>) -> io::Result<()> {$/;"	P	implementation:AnonPipe	signature:(&self, mut buf: BorrowedCursor<'_>) -> io::Result<()>
read_buf	$RUST/src/sys/pal/xous/net/tcpstream.rs	/^    pub fn read_buf(&self, cursor: BorrowedCursor<'_>) -> io::Result<()> {$/;"	P	implementation:TcpStream	signature:(&self, cursor: BorrowedCursor<'_>) -> io::Result<()>
read_buf	$RUST/src/sys_common/net.rs	/^    pub fn read_buf(&self, buf: BorrowedCursor<'_>) -> io::Result<()> {$/;"	P	implementation:TcpStream	signature:(&self, buf: BorrowedCursor<'_>) -> io::Result<()>
read_buf_exact	$RUST/src/io/mod.rs	/^    fn read_buf_exact(&mut self, mut cursor: BorrowedCursor<'_>) -> Result<()> {$/;"	P	interface:Read	signature:(&mut self, mut cursor: BorrowedCursor<'_>) -> Result<()>
read_buf_exact	$RUST/src/io/tests.rs	/^fn read_buf_exact() {$/;"	f	signature:()
read_contended	$RUST/src/sys/pal/unix/locks/futex_rwlock.rs	/^    fn read_contended(&self) {$/;"	P	implementation:RwLock	signature:(&self)
read_dir	$RUST/src/fs.rs	/^pub fn read_dir<P: AsRef<Path>>(path: P) -> io::Result<ReadDir> {$/;"	f	signature:<P: AsRef<Path>>(path: P) -> io::Result<ReadDir>
read_dir	$RUST/src/path.rs	/^    pub fn read_dir(&self) -> io::Result<fs::ReadDir> {$/;"	P	implementation:Path	signature:(&self) -> io::Result<fs::ReadDir>
read_dir_not_found	$RUST/src/fs/tests.rs	/^fn read_dir_not_found() {$/;"	f	signature:()
read_encoded_offset	$RUST/src/sys/personality/dwarf/eh.rs	/^unsafe fn read_encoded_offset(reader: &mut DwarfReader, encoding: u8) -> Result<usize, ()> {$/;"	f	signature:(reader: &mut DwarfReader, encoding: u8) -> Result<usize, ()>
read_encoded_pointer	$RUST/src/sys/personality/dwarf/eh.rs	/^unsafe fn read_encoded_pointer($/;"	f	signature:( reader: &mut DwarfReader, context: &EHContext<'_>, encoding: u8, ) -> Result<*const u8, ()>
read_eof	$RUST/src/net/tcp/tests.rs	/^fn read_eof() {$/;"	f	signature:()
read_exact	$RUST/src/io/buffered/bufreader.rs	/^    fn read_exact(&mut self, buf: &mut [u8]) -> io::Result<()> {$/;"	P	implementation:BufReader	signature:(&mut self, buf: &mut [u8]) -> io::Result<()>
read_exact	$RUST/src/io/cursor.rs	/^    fn read_exact(&mut self, buf: &mut [u8]) -> io::Result<()> {$/;"	f	signature:(&mut self, buf: &mut [u8]) -> io::Result<()>
read_exact	$RUST/src/io/impls.rs	/^    fn read_exact(&mut self, buf: &mut [u8]) -> io::Result<()> {$/;"	P	implementation:u8	signature:(&mut self, buf: &mut [u8]) -> io::Result<()>
read_exact	$RUST/src/io/mod.rs	/^    fn read_exact(&mut self, buf: &mut [u8]) -> Result<()> {$/;"	P	interface:Read	signature:(&mut self, buf: &mut [u8]) -> Result<()>
read_exact	$RUST/src/io/stdio.rs	/^    fn read_exact(&mut self, buf: &mut [u8]) -> io::Result<()> {$/;"	P	implementation:StdinLock	signature:(&mut self, buf: &mut [u8]) -> io::Result<()>
read_exact	$RUST/src/io/tests.rs	/^fn read_exact() {$/;"	f	signature:()
read_exact_at	$RUST/src/os/unix/fs.rs	/^    fn read_exact_at(&self, mut buf: &mut [u8], mut offset: u64) -> io::Result<()> {$/;"	P	interface:FileExt	signature:(&self, mut buf: &mut [u8], mut offset: u64) -> io::Result<()>
read_exact_at	$RUST/src/os/wasi/fs.rs	/^    fn read_exact_at(&self, mut buf: &mut [u8], mut offset: u64) -> io::Result<()> {$/;"	P	interface:FileExt	signature:(&self, mut buf: &mut [u8], mut offset: u64) -> io::Result<()>
read_exact_slice	$RUST/src/io/tests.rs	/^fn read_exact_slice() {$/;"	f	signature:()
read_key_stroke	$RUST/src/sys/pal/uefi/stdio.rs	/^fn read_key_stroke($/;"	f	signature:( stdin: *mut r_efi::protocols::simple_text_input::Protocol, ) -> Result<r_efi::protocols::simple_text_input::InputKey, r_efi::efi::Status>
read_large_dir	$RUST/src/fs/tests.rs	/^fn read_large_dir() {$/;"	f	signature:()
read_line	$RUST/src/io/impls.rs	/^    fn read_line(&mut self, buf: &mut String) -> io::Result<usize> {$/;"	P	implementation:Box	signature:(&mut self, buf: &mut String) -> io::Result<usize>
read_line	$RUST/src/io/mod.rs	/^    fn read_line(&mut self, buf: &mut String) -> Result<usize> {$/;"	P	interface:BufRead	signature:(&mut self, buf: &mut String) -> Result<usize>
read_line	$RUST/src/io/stdio.rs	/^    pub fn read_line(&self, buf: &mut String) -> io::Result<usize> {$/;"	P	implementation:Stdin	signature:(&self, buf: &mut String) -> io::Result<usize>
read_line	$RUST/src/io/tests.rs	/^fn read_line() {$/;"	f	signature:()
read_link	$RUST/src/fs.rs	/^pub fn read_link<P: AsRef<Path>>(path: P) -> io::Result<PathBuf> {$/;"	f	signature:<P: AsRef<Path>>(path: P) -> io::Result<PathBuf>
read_link	$RUST/src/fs/tests.rs	/^fn read_link() {$/;"	f	signature:()
read_link	$RUST/src/os/wasi/fs.rs	/^    fn read_link<P: AsRef<Path>>(&self, path: P) -> io::Result<PathBuf>;$/;"	P	interface:FileExt	signature:<P: AsRef<Path>>(&self, path: P) -> io::Result<PathBuf>
read_link	$RUST/src/path.rs	/^    pub fn read_link(&self) -> io::Result<PathBuf> {$/;"	P	implementation:Path	signature:(&self) -> io::Result<PathBuf>
read_link	$RUST/src/sys/pal/wasi/fs.rs	/^fn read_link(fd: &WasiFd, file: &Path) -> io::Result<PathBuf> {$/;"	f	signature:(fd: &WasiFd, file: &Path) -> io::Result<PathBuf>
read_misaligned_from_userspace	$RUST/src/sys/pal/sgx/abi/usercalls/alloc.rs	/^    unsafe fn read_misaligned_from_userspace(src: *const u8, dst: *mut u8, len: usize) {$/;"	f	function:copy_from_userspace	signature:(src: *const u8, dst: *mut u8, len: usize)
read_or_peek	$RUST/src/sys/pal/xous/net/tcpstream.rs	/^    fn read_or_peek(&self, buf: &mut [u8], op: ReadOrPeek) -> io::Result<usize> {$/;"	P	implementation:TcpStream	signature:(&self, buf: &mut [u8], op: ReadOrPeek) -> io::Result<usize>
read_overlapped	$RUST/src/sys/pal/windows/handle.rs	/^    pub unsafe fn read_overlapped($/;"	P	implementation:Handle	signature:( &self, buf: &mut [u8], overlapped: *mut c::OVERLAPPED, ) -> io::Result<Option<usize>>
read_size	$RUST/src/io/copy/tests.rs	/^    read_size: usize,$/;"	m	struct:ShortReader
read_sleb128	$RUST/src/sys/personality/dwarf/mod.rs	/^    pub unsafe fn read_sleb128(&mut self) -> i64 {$/;"	P	implementation:DwarfReader	signature:(&mut self) -> i64
read_timeout	$RUST/src/net/tcp.rs	/^    pub fn read_timeout(&self) -> io::Result<Option<Duration>> {$/;"	P	implementation:TcpStream	signature:(&self) -> io::Result<Option<Duration>>
read_timeout	$RUST/src/net/udp.rs	/^    pub fn read_timeout(&self) -> io::Result<Option<Duration>> {$/;"	P	implementation:UdpSocket	signature:(&self) -> io::Result<Option<Duration>>
read_timeout	$RUST/src/os/unix/net/datagram.rs	/^    pub fn read_timeout(&self) -> io::Result<Option<Duration>> {$/;"	P	implementation:UnixDatagram	signature:(&self) -> io::Result<Option<Duration>>
read_timeout	$RUST/src/os/unix/net/stream.rs	/^    pub fn read_timeout(&self) -> io::Result<Option<Duration>> {$/;"	P	implementation:UnixStream	signature:(&self) -> io::Result<Option<Duration>>
read_timeout	$RUST/src/sys/pal/sgx/net.rs	/^    pub fn read_timeout(&self) -> io::Result<Option<Duration>> {$/;"	P	implementation:UdpSocket	signature:(&self) -> io::Result<Option<Duration>>
read_timeout	$RUST/src/sys/pal/teeos/net.rs	/^    pub fn read_timeout(&self) -> io::Result<Option<Duration>> {$/;"	P	implementation:UdpSocket	signature:(&self) -> io::Result<Option<Duration>>
read_timeout	$RUST/src/sys/pal/unix/l4re.rs	/^        pub fn read_timeout(&self) -> io::Result<Option<Duration>> {$/;"	P	implementation:net::UdpSocket	signature:(&self) -> io::Result<Option<Duration>>
read_timeout	$RUST/src/sys/pal/unsupported/net.rs	/^    pub fn read_timeout(&self) -> io::Result<Option<Duration>> {$/;"	P	implementation:UdpSocket	signature:(&self) -> io::Result<Option<Duration>>
read_timeout	$RUST/src/sys/pal/wasi/net.rs	/^    pub fn read_timeout(&self) -> io::Result<Option<Duration>> {$/;"	P	implementation:UdpSocket	signature:(&self) -> io::Result<Option<Duration>>
read_timeout	$RUST/src/sys/pal/xous/net/tcpstream.rs	/^    read_timeout: Arc<AtomicU32>,$/;"	m	struct:TcpStream
read_timeout	$RUST/src/sys/pal/xous/net/udp.rs	/^    read_timeout: Cell<u64>,$/;"	m	struct:UdpSocket
read_timeout	$RUST/src/sys_common/net.rs	/^    pub fn read_timeout(&self) -> io::Result<Option<Duration>> {$/;"	P	implementation:UdpSocket	signature:(&self) -> io::Result<Option<Duration>>
read_to_end	$RUST/src/fs.rs	/^    fn read_to_end(&mut self, buf: &mut Vec<u8>) -> io::Result<usize> {$/;"	P	implementation:File	signature:(&mut self, buf: &mut Vec<u8>) -> io::Result<usize>
read_to_end	$RUST/src/io/buffered/bufreader.rs	/^    fn read_to_end(&mut self, buf: &mut Vec<u8>) -> io::Result<usize> {$/;"	P	implementation:BufReader	signature:(&mut self, buf: &mut Vec<u8>) -> io::Result<usize>
read_to_end	$RUST/src/io/cursor/tests.rs	/^fn read_to_end() {$/;"	f	signature:()
read_to_end	$RUST/src/io/impls.rs	/^    fn read_to_end(&mut self, buf: &mut Vec<u8>) -> io::Result<usize> {$/;"	P	implementation:u8	signature:(&mut self, buf: &mut Vec<u8>) -> io::Result<usize>
read_to_end	$RUST/src/io/mod.rs	/^    fn read_to_end(&mut self, buf: &mut Vec<u8>) -> Result<usize> {$/;"	P	interface:Read	signature:(&mut self, buf: &mut Vec<u8>) -> Result<usize>
read_to_end	$RUST/src/io/stdio.rs	/^    fn read_to_end(&mut self, buf: &mut Vec<u8>) -> io::Result<usize> {$/;"	P	implementation:StdinRaw	signature:(&mut self, buf: &mut Vec<u8>) -> io::Result<usize>
read_to_end	$RUST/src/io/tests.rs	/^fn read_to_end() {$/;"	f	signature:()
read_to_end	$RUST/src/io/util.rs	/^    fn read_to_end(&mut self, _: &mut Vec<u8>) -> io::Result<usize> {$/;"	P	implementation:Repeat	signature:(&mut self, _: &mut Vec<u8>) -> io::Result<usize>
read_to_end	$RUST/src/process.rs	/^    fn read_to_end(&mut self, buf: &mut Vec<u8>) -> io::Result<usize> {$/;"	P	implementation:ChildStdout	signature:(&mut self, buf: &mut Vec<u8>) -> io::Result<usize>
read_to_end	$RUST/src/sys/pal/hermit/fd.rs	/^    pub fn read_to_end(&self, buf: &mut Vec<u8>) -> io::Result<usize> {$/;"	P	implementation:FileDesc	signature:(&self, buf: &mut Vec<u8>) -> io::Result<usize>
read_to_end	$RUST/src/sys/pal/unix/fd.rs	/^    pub fn read_to_end(&self, buf: &mut Vec<u8>) -> io::Result<usize> {$/;"	P	implementation:FileDesc	signature:(&self, buf: &mut Vec<u8>) -> io::Result<usize>
read_to_end	$RUST/src/sys/pal/unix/pipe.rs	/^    pub fn read_to_end(&self, buf: &mut Vec<u8>) -> io::Result<usize> {$/;"	P	implementation:AnonPipe	signature:(&self, buf: &mut Vec<u8>) -> io::Result<usize>
read_to_end	$RUST/src/sys/pal/unsupported/pipe.rs	/^    pub fn read_to_end(&self, _buf: &mut Vec<u8>) -> io::Result<usize> {$/;"	P	implementation:AnonPipe	signature:(&self, _buf: &mut Vec<u8>) -> io::Result<usize>
read_to_end	$RUST/src/sys/pal/windows/pipe.rs	/^    pub fn read_to_end(&self, buf: &mut Vec<u8>) -> io::Result<usize> {$/;"	P	implementation:AnonPipe	signature:(&self, buf: &mut Vec<u8>) -> io::Result<usize>
read_to_string	$RUST/src/fs.rs	/^pub fn read_to_string<P: AsRef<Path>>(path: P) -> io::Result<String> {$/;"	f	signature:<P: AsRef<Path>>(path: P) -> io::Result<String>
read_to_string	$RUST/src/io/buffered/bufreader.rs	/^    fn read_to_string(&mut self, buf: &mut String) -> io::Result<usize> {$/;"	P	implementation:BufReader	signature:(&mut self, buf: &mut String) -> io::Result<usize>
read_to_string	$RUST/src/io/impls.rs	/^    fn read_to_string(&mut self, buf: &mut String) -> io::Result<usize> {$/;"	P	implementation:u8	signature:(&mut self, buf: &mut String) -> io::Result<usize>
read_to_string	$RUST/src/io/mod.rs	/^pub fn read_to_string<R: Read>(mut reader: R) -> Result<String> {$/;"	f	signature:<R: Read>(mut reader: R) -> Result<String>
read_to_string	$RUST/src/io/stdio.rs	/^    fn read_to_string(&mut self, buf: &mut String) -> io::Result<usize> {$/;"	P	implementation:StdinRaw	signature:(&mut self, buf: &mut String) -> io::Result<usize>
read_to_string	$RUST/src/io/tests.rs	/^fn read_to_string() {$/;"	f	signature:()
read_to_string	$RUST/src/io/util.rs	/^    fn read_to_string(&mut self, _: &mut String) -> io::Result<usize> {$/;"	P	implementation:Repeat	signature:(&mut self, _: &mut String) -> io::Result<usize>
read_u16s	$RUST/src/sys/pal/windows/stdio.rs	/^fn read_u16s(handle: c::HANDLE, buf: &mut [MaybeUninit<u16>]) -> io::Result<usize> {$/;"	f	signature:(handle: c::HANDLE, buf: &mut [MaybeUninit<u16>]) -> io::Result<usize>
read_u16s_fixup_surrogates	$RUST/src/sys/pal/windows/stdio.rs	/^fn read_u16s_fixup_surrogates($/;"	f	signature:( handle: c::HANDLE, buf: &mut [MaybeUninit<u16>], mut amount: usize, surrogate: &mut u16, ) -> io::Result<usize>
read_uleb128	$RUST/src/sys/personality/dwarf/mod.rs	/^    pub unsafe fn read_uleb128(&mut self) -> u64 {$/;"	P	implementation:DwarfReader	signature:(&mut self) -> u64
read_unlock	$RUST/src/sys/pal/sgx/rwlock.rs	/^    pub unsafe fn read_unlock(&self) {$/;"	P	implementation:RwLock	signature:(&self)
read_unlock	$RUST/src/sys/pal/solid/rwlock.rs	/^    pub unsafe fn read_unlock(&self) {$/;"	P	implementation:RwLock	signature:(&self)
read_unlock	$RUST/src/sys/pal/teeos/locks/rwlock.rs	/^    pub unsafe fn read_unlock(&self) {$/;"	P	implementation:RwLock	signature:(&self)
read_unlock	$RUST/src/sys/pal/unix/locks/futex_rwlock.rs	/^    pub unsafe fn read_unlock(&self) {$/;"	P	implementation:RwLock	signature:(&self)
read_unlock	$RUST/src/sys/pal/unix/locks/pthread_rwlock.rs	/^    pub unsafe fn read_unlock(&self) {$/;"	P	implementation:RwLock	signature:(&self)
read_unlock	$RUST/src/sys/pal/unsupported/locks/rwlock.rs	/^    pub unsafe fn read_unlock(&self) {$/;"	P	implementation:RwLock	signature:(&self)
read_unlock	$RUST/src/sys/pal/windows/locks/rwlock.rs	/^    pub unsafe fn read_unlock(&self) {$/;"	P	implementation:RwLock	signature:(&self)
read_unlock	$RUST/src/sys/pal/xous/locks/rwlock.rs	/^    pub unsafe fn read_unlock(&self) {$/;"	P	implementation:RwLock	signature:(&self)
read_until	$RUST/src/io/impls.rs	/^    fn read_until(&mut self, byte: u8, buf: &mut Vec<u8>) -> io::Result<usize> {$/;"	P	implementation:Box	signature:(&mut self, byte: u8, buf: &mut Vec<u8>) -> io::Result<usize>
read_until	$RUST/src/io/mod.rs	/^fn read_until<R: BufRead + ?Sized>(r: &mut R, delim: u8, buf: &mut Vec<u8>) -> Result<usize> {$/;"	f	signature:<R: BufRead + ?Sized>(r: &mut R, delim: u8, buf: &mut Vec<u8>) -> Result<usize>
read_until	$RUST/src/io/stdio.rs	/^    fn read_until(&mut self, byte: u8, buf: &mut Vec<u8>) -> io::Result<usize> {$/;"	P	implementation:StdinLock	signature:(&mut self, byte: u8, buf: &mut Vec<u8>) -> io::Result<usize>
read_until	$RUST/src/io/tests.rs	/^fn read_until() {$/;"	f	signature:()
read_vectored	$RUST/src/fs.rs	/^    fn read_vectored(&mut self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {$/;"	P	implementation:File	signature:(&mut self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize>
read_vectored	$RUST/src/io/buffered/bufreader.rs	/^    fn read_vectored(&mut self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {$/;"	P	implementation:BufReader	signature:(&mut self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize>
read_vectored	$RUST/src/io/cursor.rs	/^    fn read_vectored(&mut self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {$/;"	f	signature:(&mut self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize>
read_vectored	$RUST/src/io/impls.rs	/^    fn read_vectored(&mut self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {$/;"	P	implementation:u8	signature:(&mut self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize>
read_vectored	$RUST/src/io/mod.rs	/^    fn read_vectored(&mut self, bufs: &mut [IoSliceMut<'_>]) -> Result<usize> {$/;"	P	interface:Read	signature:(&mut self, bufs: &mut [IoSliceMut<'_>]) -> Result<usize>
read_vectored	$RUST/src/io/stdio.rs	/^    fn read_vectored(&mut self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {$/;"	P	implementation:StdinRaw	signature:(&mut self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize>
read_vectored	$RUST/src/io/util.rs	/^    fn read_vectored(&mut self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {$/;"	P	implementation:Repeat	signature:(&mut self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize>
read_vectored	$RUST/src/net/tcp.rs	/^    fn read_vectored(&mut self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {$/;"	P	implementation:TcpStream	signature:(&mut self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize>
read_vectored	$RUST/src/net/tcp/tests.rs	/^fn read_vectored() {$/;"	f	signature:()
read_vectored	$RUST/src/os/unix/net/stream.rs	/^    fn read_vectored(&mut self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {$/;"	P	implementation:UnixStream	signature:(&mut self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize>
read_vectored	$RUST/src/process.rs	/^    fn read_vectored(&mut self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {$/;"	P	implementation:ChildStdout	signature:(&mut self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize>
read_vectored	$RUST/src/sys/pal/hermit/fs.rs	/^    pub fn read_vectored(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {$/;"	P	implementation:File	signature:(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize>
read_vectored	$RUST/src/sys/pal/hermit/net.rs	/^    pub fn read_vectored(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {$/;"	P	implementation:Socket	signature:(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize>
read_vectored	$RUST/src/sys/pal/hermit/stdio.rs	/^    fn read_vectored(&mut self, _data: &mut [IoSliceMut<'_>]) -> io::Result<usize> {$/;"	P	implementation:Stdin	signature:(&mut self, _data: &mut [IoSliceMut<'_>]) -> io::Result<usize>
read_vectored	$RUST/src/sys/pal/sgx/fd.rs	/^    pub fn read_vectored(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {$/;"	P	implementation:FileDesc	signature:(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize>
read_vectored	$RUST/src/sys/pal/sgx/net.rs	/^    pub fn read_vectored(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {$/;"	P	implementation:TcpStream	signature:(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize>
read_vectored	$RUST/src/sys/pal/solid/net.rs	/^    pub fn read_vectored(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {$/;"	P	implementation:Socket	signature:(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize>
read_vectored	$RUST/src/sys/pal/teeos/net.rs	/^    pub fn read_vectored(&self, _: &mut [IoSliceMut<'_>]) -> io::Result<usize> {$/;"	P	implementation:TcpStream	signature:(&self, _: &mut [IoSliceMut<'_>]) -> io::Result<usize>
read_vectored	$RUST/src/sys/pal/unix/fd.rs	/^    pub fn read_vectored(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {$/;"	P	implementation:FileDesc	signature:(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize>
read_vectored	$RUST/src/sys/pal/unix/fs.rs	/^    pub fn read_vectored(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {$/;"	P	implementation:File	signature:(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize>
read_vectored	$RUST/src/sys/pal/unix/l4re.rs	/^        pub fn read_vectored(&self, _: &mut [IoSliceMut<'_>]) -> io::Result<usize> {$/;"	P	implementation:net::TcpStream	signature:(&self, _: &mut [IoSliceMut<'_>]) -> io::Result<usize>
read_vectored	$RUST/src/sys/pal/unix/net.rs	/^    pub fn read_vectored(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {$/;"	P	implementation:Socket	signature:(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize>
read_vectored	$RUST/src/sys/pal/unix/pipe.rs	/^    pub fn read_vectored(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {$/;"	P	implementation:AnonPipe	signature:(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize>
read_vectored	$RUST/src/sys/pal/unix/stdio.rs	/^    fn read_vectored(&mut self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {$/;"	P	implementation:Stdin	signature:(&mut self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize>
read_vectored	$RUST/src/sys/pal/unsupported/fs.rs	/^    pub fn read_vectored(&self, _bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {$/;"	P	implementation:File	signature:(&self, _bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize>
read_vectored	$RUST/src/sys/pal/unsupported/net.rs	/^    pub fn read_vectored(&self, _: &mut [IoSliceMut<'_>]) -> io::Result<usize> {$/;"	P	implementation:TcpStream	signature:(&self, _: &mut [IoSliceMut<'_>]) -> io::Result<usize>
read_vectored	$RUST/src/sys/pal/unsupported/pipe.rs	/^    pub fn read_vectored(&self, _bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {$/;"	P	implementation:AnonPipe	signature:(&self, _bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize>
read_vectored	$RUST/src/sys/pal/wasi/fs.rs	/^    pub fn read_vectored(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {$/;"	P	implementation:File	signature:(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize>
read_vectored	$RUST/src/sys/pal/wasi/net.rs	/^    pub fn read_vectored(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {$/;"	P	implementation:TcpStream	signature:(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize>
read_vectored	$RUST/src/sys/pal/wasi/stdio.rs	/^    fn read_vectored(&mut self, data: &mut [IoSliceMut<'_>]) -> io::Result<usize> {$/;"	P	implementation:Stdin	signature:(&mut self, data: &mut [IoSliceMut<'_>]) -> io::Result<usize>
read_vectored	$RUST/src/sys/pal/windows/fs.rs	/^    pub fn read_vectored(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {$/;"	P	implementation:File	signature:(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize>
read_vectored	$RUST/src/sys/pal/windows/handle.rs	/^    pub fn read_vectored(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {$/;"	P	implementation:Handle	signature:(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize>
read_vectored	$RUST/src/sys/pal/windows/net.rs	/^    pub fn read_vectored(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {$/;"	P	implementation:Socket	signature:(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize>
read_vectored	$RUST/src/sys/pal/windows/pipe.rs	/^    pub fn read_vectored(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {$/;"	P	implementation:AnonPipe	signature:(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize>
read_vectored	$RUST/src/sys/pal/xous/net/tcpstream.rs	/^    pub fn read_vectored(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {$/;"	P	implementation:TcpStream	signature:(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize>
read_vectored	$RUST/src/sys_common/net.rs	/^    pub fn read_vectored(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {$/;"	P	implementation:TcpStream	signature:(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize>
read_vectored_at	$RUST/src/os/unix/fs.rs	/^    fn read_vectored_at(&self, bufs: &mut [io::IoSliceMut<'_>], offset: u64) -> io::Result<usize/;"	P	interface:FileExt	signature:(&self, bufs: &mut [io::IoSliceMut<'_>], offset: u64) -> io::Result<usize>
read_vectored_at	$RUST/src/os/unix/fs/tests.rs	/^fn read_vectored_at() {$/;"	f	signature:()
read_vectored_at	$RUST/src/os/wasi/fs.rs	/^    fn read_vectored_at(&self, bufs: &mut [IoSliceMut<'_>], offset: u64) -> io::Result<usize>;$/;"	P	interface:FileExt	signature:(&self, bufs: &mut [IoSliceMut<'_>], offset: u64) -> io::Result<usize>
read_vectored_at	$RUST/src/sys/pal/unix/fd.rs	/^    pub fn read_vectored_at(&self, bufs: &mut [IoSliceMut<'_>], offset: u64) -> io::Result<usize/;"	P	implementation:FileDesc	signature:(&self, bufs: &mut [IoSliceMut<'_>], offset: u64) -> io::Result<usize>
read_vectored_at	$RUST/src/sys/pal/unix/fs.rs	/^    pub fn read_vectored_at(&self, bufs: &mut [IoSliceMut<'_>], offset: u64) -> io::Result<usize/;"	P	implementation:File	signature:(&self, bufs: &mut [IoSliceMut<'_>], offset: u64) -> io::Result<usize>
readdir	$RUST/src/sys/pal/hermit/fs.rs	/^pub fn readdir(_p: &Path) -> io::Result<ReadDir> {$/;"	f	signature:(_p: &Path) -> io::Result<ReadDir>
readdir	$RUST/src/sys/pal/solid/fs.rs	/^pub fn readdir(p: &Path) -> io::Result<ReadDir> {$/;"	f	signature:(p: &Path) -> io::Result<ReadDir>
readdir	$RUST/src/sys/pal/unix/fs.rs	/^pub fn readdir(path: &Path) -> io::Result<ReadDir> {$/;"	f	signature:(path: &Path) -> io::Result<ReadDir>
readdir	$RUST/src/sys/pal/unsupported/fs.rs	/^pub fn readdir(_p: &Path) -> io::Result<ReadDir> {$/;"	f	signature:(_p: &Path) -> io::Result<ReadDir>
readdir	$RUST/src/sys/pal/wasi/fd.rs	/^    pub fn readdir(&self, buf: &mut [u8], cookie: wasi::Dircookie) -> io::Result<usize> {$/;"	P	implementation:WasiFd	signature:(&self, buf: &mut [u8], cookie: wasi::Dircookie) -> io::Result<usize>
readdir	$RUST/src/sys/pal/wasi/fs.rs	/^pub fn readdir(p: &Path) -> io::Result<ReadDir> {$/;"	f	signature:(p: &Path) -> io::Result<ReadDir>
readdir	$RUST/src/sys/pal/windows/fs.rs	/^pub fn readdir(p: &Path) -> io::Result<ReadDir> {$/;"	f	signature:(p: &Path) -> io::Result<ReadDir>
readers	$RUST/src/sys/pal/sgx/rwlock.rs	/^    readers: SpinMutex<WaitVariable<Option<NonZeroUsize>>>,$/;"	m	struct:AllocatedRwLock
readlink	$RUST/src/sys/pal/hermit/fs.rs	/^pub fn readlink(_p: &Path) -> io::Result<PathBuf> {$/;"	f	signature:(_p: &Path) -> io::Result<PathBuf>
readlink	$RUST/src/sys/pal/unix/fs.rs	/^pub fn readlink(p: &Path) -> io::Result<PathBuf> {$/;"	f	signature:(p: &Path) -> io::Result<PathBuf>
readlink	$RUST/src/sys/pal/unsupported/fs.rs	/^pub fn readlink(_p: &Path) -> io::Result<PathBuf> {$/;"	f	signature:(_p: &Path) -> io::Result<PathBuf>
readlink	$RUST/src/sys/pal/wasi/fd.rs	/^    pub fn readlink(&self, path: &str, buf: &mut [u8]) -> io::Result<usize> {$/;"	P	implementation:WasiFd	signature:(&self, path: &str, buf: &mut [u8]) -> io::Result<usize>
readlink	$RUST/src/sys/pal/wasi/fs.rs	/^pub fn readlink(p: &Path) -> io::Result<PathBuf> {$/;"	f	signature:(p: &Path) -> io::Result<PathBuf>
readlink	$RUST/src/sys/pal/windows/fs.rs	/^pub fn readlink(path: &Path) -> io::Result<PathBuf> {$/;"	f	signature:(path: &Path) -> io::Result<PathBuf>
readlink_not_symlink	$RUST/src/fs/tests.rs	/^fn readlink_not_symlink() {$/;"	f	signature:()
readonly	$RUST/src/fs.rs	/^    pub fn readonly(&self) -> bool {$/;"	P	implementation:Permissions	signature:(&self) -> bool
readonly	$RUST/src/sys/pal/hermit/fs.rs	/^    pub fn readonly(&self) -> bool {$/;"	P	implementation:FilePermissions	signature:(&self) -> bool
readonly	$RUST/src/sys/pal/solid/fs.rs	/^    pub fn readonly(&self) -> bool {$/;"	P	implementation:FilePermissions	signature:(&self) -> bool
readonly	$RUST/src/sys/pal/unix/fs.rs	/^    pub fn readonly(&self) -> bool {$/;"	P	implementation:FilePermissions	signature:(&self) -> bool
readonly	$RUST/src/sys/pal/unsupported/fs.rs	/^    pub fn readonly(&self) -> bool {$/;"	P	implementation:FilePermissions	signature:(&self) -> bool
readonly	$RUST/src/sys/pal/wasi/fs.rs	/^    readonly: bool,$/;"	m	struct:FilePermissions
readonly	$RUST/src/sys/pal/windows/fs.rs	/^    pub fn readonly(&self) -> bool {$/;"	P	implementation:FilePermissions	signature:(&self) -> bool
readv	$RUST/src/sys/pal/solid/abi/sockets.rs	/^    pub fn readv(s: c_int, bufs: *const iovec, bufcnt: c_int) -> ssize_t;$/;"	f	signature:(s: c_int, bufs: *const iovec, bufcnt: c_int) -> ssize_t
ready	$RUST/src/sync/mpmc/zero.rs	/^    ready: AtomicBool,$/;"	m	struct:Packet
realloc	$RUST/src/sys/pal/hermit/alloc.rs	/^    unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {$/;"	P	implementation:System	signature:(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8
realloc	$RUST/src/sys/pal/sgx/alloc.rs	/^    unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {$/;"	P	implementation:System	signature:(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8
realloc	$RUST/src/sys/pal/solid/alloc.rs	/^    unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {$/;"	P	implementation:System	signature:(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8
realloc	$RUST/src/sys/pal/teeos/alloc.rs	/^    unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {$/;"	P	implementation:System	signature:(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8
realloc	$RUST/src/sys/pal/unix/alloc.rs	/^    unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {$/;"	P	implementation:System	signature:(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8
realloc	$RUST/src/sys/pal/unsupported/alloc.rs	/^    unsafe fn realloc(&self, _ptr: *mut u8, _layout: Layout, _new_size: usize) -> *mut u8 {$/;"	P	implementation:System	signature:(&self, _ptr: *mut u8, _layout: Layout, _new_size: usize) -> *mut u8
realloc	$RUST/src/sys/pal/wasm/alloc.rs	/^    unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {$/;"	P	implementation:System	signature:(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8
realloc	$RUST/src/sys/pal/windows/alloc.rs	/^    unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {$/;"	P	implementation:System	signature:(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8
realloc	$RUST/src/sys/pal/xous/alloc.rs	/^    unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {$/;"	P	implementation:System	signature:(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8
realloc_fallback	$RUST/src/sys/pal/common/alloc.rs	/^pub unsafe fn realloc_fallback($/;"	f	signature:( alloc: &System, ptr: *mut u8, old_layout: Layout, new_size: usize, ) -> *mut u8
really_init	$RUST/src/sys/pal/unix/args.rs	/^    unsafe fn really_init(argc: isize, argv: *const *const u8) {$/;"	f	module:imp	signature:(argc: isize, argv: *const *const u8)
realpath_works	$RUST/src/fs/tests.rs	/^fn realpath_works() {$/;"	f	signature:()
realpath_works_tricky	$RUST/src/fs/tests.rs	/^fn realpath_works_tricky() {$/;"	f	signature:()
receivers	$RUST/src/sync/mpmc/array.rs	/^    receivers: SyncWaker,$/;"	m	struct:Channel
receivers	$RUST/src/sync/mpmc/counter.rs	/^    receivers: AtomicUsize,$/;"	m	struct:Counter
receivers	$RUST/src/sync/mpmc/list.rs	/^    receivers: SyncWaker,$/;"	m	struct:Channel
receivers	$RUST/src/sync/mpmc/zero.rs	/^    receivers: Waker,$/;"	m	struct:Inner
recursive	$RUST/src/fs.rs	/^    recursive: bool,$/;"	m	struct:DirBuilder
recursive_mkdir	$RUST/src/fs/tests.rs	/^fn recursive_mkdir() {$/;"	f	signature:()
recursive_mkdir_dot	$RUST/src/fs/tests.rs	/^fn recursive_mkdir_dot() {$/;"	f	signature:()
recursive_mkdir_empty	$RUST/src/fs/tests.rs	/^fn recursive_mkdir_empty() {$/;"	f	signature:()
recursive_mkdir_failure	$RUST/src/fs/tests.rs	/^fn recursive_mkdir_failure() {$/;"	f	signature:()
recursive_mkdir_slash	$RUST/src/fs/tests.rs	/^fn recursive_mkdir_slash() {$/;"	f	signature:()
recursive_rmdir	$RUST/src/fs/tests.rs	/^fn recursive_rmdir() {$/;"	f	signature:()
recursive_rmdir_of_file_fails	$RUST/src/fs/tests.rs	/^fn recursive_rmdir_of_file_fails() {$/;"	f	signature:()
recursive_rmdir_of_file_symlink	$RUST/src/fs/tests.rs	/^fn recursive_rmdir_of_file_symlink() {$/;"	f	signature:()
recursive_rmdir_of_symlink	$RUST/src/fs/tests.rs	/^fn recursive_rmdir_of_symlink() {$/;"	f	signature:()
recursive_rmdir_toctou	$RUST/src/fs/tests.rs	/^fn recursive_rmdir_toctou() {$/;"	f	signature:()
recv	$RUST/src/net/udp.rs	/^    pub fn recv(&self, buf: &mut [u8]) -> io::Result<usize> {$/;"	P	implementation:UdpSocket	signature:(&self, buf: &mut [u8]) -> io::Result<usize>
recv	$RUST/src/os/unix/net/datagram.rs	/^    pub fn recv(&self, buf: &mut [u8]) -> io::Result<usize> {$/;"	P	implementation:UnixDatagram	signature:(&self, buf: &mut [u8]) -> io::Result<usize>
recv	$RUST/src/sync/mpmc/array.rs	/^    pub(crate) fn recv(&self, deadline: Option<Instant>) -> Result<T, RecvTimeoutError> {$/;"	P	implementation:Channel	signature:(&self, deadline: Option<Instant>) -> Result<T, RecvTimeoutError>
recv	$RUST/src/sync/mpmc/list.rs	/^    pub(crate) fn recv(&self, deadline: Option<Instant>) -> Result<T, RecvTimeoutError> {$/;"	P	implementation:Channel	signature:(&self, deadline: Option<Instant>) -> Result<T, RecvTimeoutError>
recv	$RUST/src/sync/mpmc/mod.rs	/^    pub fn recv(&self) -> Result<T, RecvError> {$/;"	P	implementation:Receiver	signature:(&self) -> Result<T, RecvError>
recv	$RUST/src/sync/mpmc/zero.rs	/^    pub(crate) fn recv(&self, deadline: Option<Instant>) -> Result<T, RecvTimeoutError> {$/;"	P	implementation:Channel	signature:(&self, deadline: Option<Instant>) -> Result<T, RecvTimeoutError>
recv	$RUST/src/sync/mpsc/mod.rs	/^    pub fn recv(&self) -> Result<T, RecvError> {$/;"	P	implementation:Receiver	signature:(&self) -> Result<T, RecvError>
recv	$RUST/src/sync/mpsc/sync_tests.rs	/^        fn recv(rx: Receiver<Box<i32>>, i: i32) {$/;"	f	function:stream_send_recv_stress	signature:(rx: Receiver<Box<i32>>, i: i32)
recv	$RUST/src/sync/mpsc/tests.rs	/^        fn recv(rx: Receiver<Box<i32>>, i: i32) {$/;"	f	function:stream_send_recv_stress	signature:(rx: Receiver<Box<i32>>, i: i32)
recv	$RUST/src/sys/pal/sgx/net.rs	/^    pub fn recv(&self, _: &mut [u8]) -> io::Result<usize> {$/;"	P	implementation:UdpSocket	signature:(&self, _: &mut [u8]) -> io::Result<usize>
recv	$RUST/src/sys/pal/solid/abi/sockets.rs	/^    pub fn recv(s: c_int, mem: *mut c_void, len: size_t, flags: c_int) -> ssize_t;$/;"	f	signature:(s: c_int, mem: *mut c_void, len: size_t, flags: c_int) -> ssize_t
recv	$RUST/src/sys/pal/teeos/net.rs	/^    pub fn recv(&self, _: &mut [u8]) -> io::Result<usize> {$/;"	P	implementation:UdpSocket	signature:(&self, _: &mut [u8]) -> io::Result<usize>
recv	$RUST/src/sys/pal/unix/l4re.rs	/^        pub fn recv(&self, _: &mut [u8]) -> io::Result<usize> {$/;"	P	implementation:net::UdpSocket	signature:(&self, _: &mut [u8]) -> io::Result<usize>
recv	$RUST/src/sys/pal/unsupported/net.rs	/^    pub fn recv(&self, _: &mut [u8]) -> io::Result<usize> {$/;"	P	implementation:UdpSocket	signature:(&self, _: &mut [u8]) -> io::Result<usize>
recv	$RUST/src/sys/pal/wasi/net.rs	/^    pub fn recv(&self, _: &mut [u8]) -> io::Result<usize> {$/;"	P	implementation:UdpSocket	signature:(&self, _: &mut [u8]) -> io::Result<usize>
recv	$RUST/src/sys/pal/windows/c.rs	/^pub unsafe fn recv(socket: SOCKET, buf: *mut c_void, len: c_int, flags: c_int) -> c_int {$/;"	f	signature:(socket: SOCKET, buf: *mut c_void, len: c_int, flags: c_int) -> c_int
recv	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn recv(s: SOCKET, buf: PSTR, len: i32, flags: SEND_RECV_FLAGS) -> i32;$/;"	f	signature:(s: SOCKET, buf: PSTR, len: i32, flags: SEND_RECV_FLAGS) -> i32
recv	$RUST/src/sys/pal/xous/net/udp.rs	/^    pub fn recv(&self, buf: &mut [u8]) -> io::Result<usize> {$/;"	P	implementation:UdpSocket	signature:(&self, buf: &mut [u8]) -> io::Result<usize>
recv	$RUST/src/sys_common/net.rs	/^    pub fn recv(&self, buf: &mut [u8]) -> io::Result<usize> {$/;"	P	implementation:UdpSocket	signature:(&self, buf: &mut [u8]) -> io::Result<usize>
recv_a_lot	$RUST/src/sync/mpsc/sync_tests.rs	/^fn recv_a_lot() {$/;"	f	signature:()
recv_a_lot	$RUST/src/sync/mpsc/tests.rs	/^fn recv_a_lot() {$/;"	f	signature:()
recv_deadline	$RUST/src/sync/mpmc/mod.rs	/^    pub fn recv_deadline(&self, deadline: Instant) -> Result<T, RecvTimeoutError> {$/;"	P	implementation:Receiver	signature:(&self, deadline: Instant) -> Result<T, RecvTimeoutError>
recv_deadline	$RUST/src/sync/mpsc/mod.rs	/^    pub fn recv_deadline(&self, deadline: Instant) -> Result<T, RecvTimeoutError> {$/;"	P	implementation:Receiver	signature:(&self, deadline: Instant) -> Result<T, RecvTimeoutError>
recv_from	$RUST/src/net/udp.rs	/^    pub fn recv_from(&self, buf: &mut [u8]) -> io::Result<(usize, SocketAddr)> {$/;"	P	implementation:UdpSocket	signature:(&self, buf: &mut [u8]) -> io::Result<(usize, SocketAddr)>
recv_from	$RUST/src/os/unix/net/datagram.rs	/^    pub fn recv_from(&self, buf: &mut [u8]) -> io::Result<(usize, SocketAddr)> {$/;"	P	implementation:UnixDatagram	signature:(&self, buf: &mut [u8]) -> io::Result<(usize, SocketAddr)>
recv_from	$RUST/src/sys/pal/hermit/net.rs	/^    pub fn recv_from(&self, buf: &mut [u8]) -> io::Result<(usize, SocketAddr)> {$/;"	P	implementation:Socket	signature:(&self, buf: &mut [u8]) -> io::Result<(usize, SocketAddr)>
recv_from	$RUST/src/sys/pal/sgx/net.rs	/^    pub fn recv_from(&self, _: &mut [u8]) -> io::Result<(usize, SocketAddr)> {$/;"	P	implementation:UdpSocket	signature:(&self, _: &mut [u8]) -> io::Result<(usize, SocketAddr)>
recv_from	$RUST/src/sys/pal/solid/net.rs	/^    pub fn recv_from(&self, buf: &mut [u8]) -> io::Result<(usize, SocketAddr)> {$/;"	P	implementation:Socket	signature:(&self, buf: &mut [u8]) -> io::Result<(usize, SocketAddr)>
recv_from	$RUST/src/sys/pal/teeos/net.rs	/^    pub fn recv_from(&self, _: &mut [u8]) -> io::Result<(usize, SocketAddr)> {$/;"	P	implementation:UdpSocket	signature:(&self, _: &mut [u8]) -> io::Result<(usize, SocketAddr)>
recv_from	$RUST/src/sys/pal/unix/l4re.rs	/^        pub fn recv_from(&self, _: &mut [u8]) -> io::Result<(usize, SocketAddr)> {$/;"	P	implementation:net::UdpSocket	signature:(&self, _: &mut [u8]) -> io::Result<(usize, SocketAddr)>
recv_from	$RUST/src/sys/pal/unix/net.rs	/^    pub fn recv_from(&self, buf: &mut [u8]) -> io::Result<(usize, SocketAddr)> {$/;"	P	implementation:Socket	signature:(&self, buf: &mut [u8]) -> io::Result<(usize, SocketAddr)>
recv_from	$RUST/src/sys/pal/unsupported/net.rs	/^    pub fn recv_from(&self, _: &mut [u8]) -> io::Result<(usize, SocketAddr)> {$/;"	P	implementation:UdpSocket	signature:(&self, _: &mut [u8]) -> io::Result<(usize, SocketAddr)>
recv_from	$RUST/src/sys/pal/wasi/net.rs	/^    pub fn recv_from(&self, _: &mut [u8]) -> io::Result<(usize, SocketAddr)> {$/;"	P	implementation:UdpSocket	signature:(&self, _: &mut [u8]) -> io::Result<(usize, SocketAddr)>
recv_from	$RUST/src/sys/pal/windows/net.rs	/^    pub fn recv_from(&self, buf: &mut [u8]) -> io::Result<(usize, SocketAddr)> {$/;"	P	implementation:Socket	signature:(&self, buf: &mut [u8]) -> io::Result<(usize, SocketAddr)>
recv_from	$RUST/src/sys/pal/xous/net/udp.rs	/^    pub fn recv_from(&self, buf: &mut [u8]) -> io::Result<(usize, SocketAddr)> {$/;"	P	implementation:UdpSocket	signature:(&self, buf: &mut [u8]) -> io::Result<(usize, SocketAddr)>
recv_from	$RUST/src/sys_common/net.rs	/^    pub fn recv_from(&self, buf: &mut [u8]) -> io::Result<(usize, SocketAddr)> {$/;"	P	implementation:UdpSocket	signature:(&self, buf: &mut [u8]) -> io::Result<(usize, SocketAddr)>
recv_from_flags	$RUST/src/os/unix/net/datagram.rs	/^    fn recv_from_flags($/;"	P	implementation:UnixDatagram	signature:( &self, buf: &mut [u8], flags: libc::c_int, ) -> io::Result<(usize, SocketAddr)>
recv_from_outside_runtime	$RUST/src/sync/mpsc/tests.rs	/^fn recv_from_outside_runtime() {$/;"	f	signature:()
recv_from_with_flags	$RUST/src/sys/pal/hermit/net.rs	/^    fn recv_from_with_flags(&self, buf: &mut [u8], flags: i32) -> io::Result<(usize, SocketAddr)/;"	P	implementation:Socket	signature:(&self, buf: &mut [u8], flags: i32) -> io::Result<(usize, SocketAddr)>
recv_from_with_flags	$RUST/src/sys/pal/solid/net.rs	/^    fn recv_from_with_flags($/;"	P	implementation:Socket	signature:( &self, buf: &mut [u8], flags: c_int, ) -> io::Result<(usize, SocketAddr)>
recv_from_with_flags	$RUST/src/sys/pal/unix/net.rs	/^    fn recv_from_with_flags($/;"	P	implementation:Socket	signature:( &self, buf: &mut [u8], flags: c_int, ) -> io::Result<(usize, SocketAddr)>
recv_from_with_flags	$RUST/src/sys/pal/windows/net.rs	/^    fn recv_from_with_flags($/;"	P	implementation:Socket	signature:( &self, buf: &mut [u8], flags: c_int, ) -> io::Result<(usize, SocketAddr)>
recv_inner	$RUST/src/sys/pal/xous/net/udp.rs	/^    fn recv_inner(&self, buf: &mut [u8], do_peek: bool) -> io::Result<(usize, SocketAddr)> {$/;"	P	implementation:UdpSocket	signature:(&self, buf: &mut [u8], do_peek: bool) -> io::Result<(usize, SocketAddr)>
recv_msg	$RUST/src/sys/pal/unix/net.rs	/^    pub fn recv_msg(&self, msg: &mut libc::msghdr) -> io::Result<usize> {$/;"	P	implementation:Socket	signature:(&self, msg: &mut libc::msghdr) -> io::Result<usize>
recv_pidfd	$RUST/src/sys/pal/unix/process/process_unix.rs	/^    fn recv_pidfd(&self, sock: &crate::sys::net::Socket) -> pid_t {$/;"	P	implementation:Command	signature:(&self, sock: &crate::sys::net::Socket) -> pid_t
recv_timeout	$RUST/src/sync/mpmc/mod.rs	/^    pub fn recv_timeout(&self, timeout: Duration) -> Result<T, RecvTimeoutError> {$/;"	P	implementation:Receiver	signature:(&self, timeout: Duration) -> Result<T, RecvTimeoutError>
recv_timeout	$RUST/src/sync/mpsc/mod.rs	/^    pub fn recv_timeout(&self, timeout: Duration) -> Result<T, RecvTimeoutError> {$/;"	P	implementation:Receiver	signature:(&self, timeout: Duration) -> Result<T, RecvTimeoutError>
recv_timeout	$RUST/src/sync/mpsc/sync_tests.rs	/^fn recv_timeout() {$/;"	f	signature:()
recv_timeout_upgrade	$RUST/src/sync/mpsc/tests.rs	/^fn recv_timeout_upgrade() {$/;"	f	signature:()
recv_vectored_with_ancillary	$RUST/src/os/unix/net/datagram.rs	/^    pub fn recv_vectored_with_ancillary($/;"	P	implementation:UnixDatagram	signature:( &self, bufs: &mut [IoSliceMut<'_>], ancillary: &mut SocketAncillary<'_>, ) -> io::Result<(usize, bool)>
recv_vectored_with_ancillary	$RUST/src/os/unix/net/stream.rs	/^    pub fn recv_vectored_with_ancillary($/;"	P	implementation:UnixStream	signature:( &self, bufs: &mut [IoSliceMut<'_>], ancillary: &mut SocketAncillary<'_>, ) -> io::Result<usize>
recv_vectored_with_ancillary_from	$RUST/src/os/unix/net/ancillary.rs	/^pub(super) fn recv_vectored_with_ancillary_from($/;"	f	signature:( socket: &Socket, bufs: &mut [IoSliceMut<'_>], ancillary: &mut SocketAncillary<'_>, ) -> io::Result<(usize, bool, io::Result<SocketAddr>)>
recv_vectored_with_ancillary_from	$RUST/src/os/unix/net/datagram.rs	/^    pub fn recv_vectored_with_ancillary_from($/;"	P	implementation:UnixDatagram	signature:( &self, bufs: &mut [IoSliceMut<'_>], ancillary: &mut SocketAncillary<'_>, ) -> io::Result<(usize, bool, SocketAddr)>
recv_with_flags	$RUST/src/sys/pal/hermit/net.rs	/^    fn recv_with_flags(&self, mut buf: BorrowedCursor<'_>, flags: i32) -> io::Result<()> {$/;"	P	implementation:Socket	signature:(&self, mut buf: BorrowedCursor<'_>, flags: i32) -> io::Result<()>
recv_with_flags	$RUST/src/sys/pal/solid/net.rs	/^    fn recv_with_flags(&self, mut buf: BorrowedCursor<'_>, flags: c_int) -> io::Result<()> {$/;"	P	implementation:Socket	signature:(&self, mut buf: BorrowedCursor<'_>, flags: c_int) -> io::Result<()>
recv_with_flags	$RUST/src/sys/pal/unix/net.rs	/^    fn recv_with_flags(&self, mut buf: BorrowedCursor<'_>, flags: c_int) -> io::Result<()> {$/;"	P	implementation:Socket	signature:(&self, mut buf: BorrowedCursor<'_>, flags: c_int) -> io::Result<()>
recv_with_flags	$RUST/src/sys/pal/windows/net.rs	/^    fn recv_with_flags(&self, mut buf: BorrowedCursor<'_>, flags: c_int) -> io::Result<()> {$/;"	P	implementation:Socket	signature:(&self, mut buf: BorrowedCursor<'_>, flags: c_int) -> io::Result<()>
recvfrom	$RUST/src/sys/pal/solid/abi/sockets.rs	/^    pub fn recvfrom($/;"	f	signature:( s: c_int, mem: *mut c_void, len: size_t, flags: c_int, from: *mut sockaddr, fromlen: *mut socklen_t, ) -> ssize_t
recvfrom	$RUST/src/sys/pal/windows/c.rs	/^pub unsafe fn recvfrom($/;"	f	signature:( socket: SOCKET, buf: *mut c_void, len: c_int, flags: c_int, addr: *mut SOCKADDR, addrlen: *mut c_int, ) -> c_int
recvfrom	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn recvfrom($/;"	f	signature:( s: SOCKET, buf: PSTR, len: i32, flags: i32, from: *mut SOCKADDR, fromlen: *mut i32, ) -> i32
redox	$RUST/src/os/mod.rs	/^pub mod redox;$/;"	n
ref_keyword	$RUST/src/keyword_docs.rs	/^mod ref_keyword {}$/;"	n
refcell_vec	$RUST/src/thread/local/dynamic_tests.rs	/^fn refcell_vec() {$/;"	f	signature:()
reference_tls_used	$RUST/src/sys/pal/windows/thread_local_key.rs	/^    unsafe fn reference_tls_used() {}$/;"	f	function:on_tls_callback	signature:()
register	$RUST/src/sync/mpmc/waker.rs	/^    pub(crate) fn register(&self, oper: Operation, cx: &Context) {$/;"	P	implementation:SyncWaker	signature:(&self, oper: Operation, cx: &Context)
register_dtor	$RUST/src/sys/pal/common/thread_local/fast_local.rs	/^    pub unsafe fn register_dtor(a: *mut u8, dtor: unsafe extern "C" fn(*mut u8)) {$/;"	P	implementation:Key	signature:(a: *mut u8, dtor: unsafe extern "C" fn(*mut u8))
register_dtor	$RUST/src/sys/pal/hermit/thread_local_dtor.rs	/^pub unsafe fn register_dtor(t: *mut u8, dtor: unsafe extern "C" fn(*mut u8)) {$/;"	f	signature:(t: *mut u8, dtor: unsafe extern "C" fn(*mut u8))
register_dtor	$RUST/src/sys/pal/solid/thread_local_dtor.rs	/^pub unsafe fn register_dtor(t: *mut u8, dtor: unsafe extern "C" fn(*mut u8)) {$/;"	f	signature:(t: *mut u8, dtor: unsafe extern "C" fn(*mut u8))
register_dtor	$RUST/src/sys/pal/teeos/thread_local_dtor.rs	/^pub unsafe fn register_dtor(t: *mut u8, dtor: unsafe extern "C" fn(*mut u8)) {$/;"	f	signature:(t: *mut u8, dtor: unsafe extern "C" fn(*mut u8))
register_dtor	$RUST/src/sys/pal/unix/thread_local_dtor.rs	/^pub unsafe fn register_dtor(t: *mut u8, dtor: unsafe extern "C" fn(*mut u8)) {$/;"	f	signature:(t: *mut u8, dtor: unsafe extern "C" fn(*mut u8))
register_dtor	$RUST/src/sys/pal/unsupported/thread_local_dtor.rs	/^pub unsafe fn register_dtor(_t: *mut u8, _dtor: unsafe extern "C" fn(*mut u8)) {$/;"	f	signature:(_t: *mut u8, _dtor: unsafe extern "C" fn(*mut u8))
register_dtor	$RUST/src/sys/pal/windows/thread_local_key.rs	/^unsafe fn register_dtor(key: &'static StaticKey) {$/;"	f	signature:(key: &'static StaticKey)
register_dtor	$RUST/src/sys/pal/xous/thread_local_key.rs	/^unsafe fn register_dtor(key: Key, dtor: Dtor) {$/;"	f	signature:(key: Key, dtor: Dtor)
register_dtor_fallback	$RUST/src/sys_common/thread_local_dtor.rs	/^pub unsafe fn register_dtor_fallback(t: *mut u8, dtor: unsafe extern "C" fn(*mut u8)) {$/;"	f	signature:(t: *mut u8, dtor: unsafe extern "C" fn(*mut u8))
register_keyless_dtor	$RUST/src/sys/pal/windows/thread_local_key.rs	/^pub unsafe fn register_keyless_dtor(t: *mut u8, dtor: unsafe extern "C" fn(*mut u8)) {$/;"	f	signature:(t: *mut u8, dtor: unsafe extern "C" fn(*mut u8))
register_with_packet	$RUST/src/sync/mpmc/waker.rs	/^    pub(crate) fn register_with_packet(&mut self, oper: Operation, packet: *mut (), cx: &Context/;"	P	implementation:Waker	signature:(&mut self, oper: Operation, packet: *mut (), cx: &Context)
rel_ptr	$RUST/src/sys/pal/sgx/abi/mem.rs	/^pub(crate) unsafe fn rel_ptr<T>(offset: u64) -> *const T {$/;"	f	signature:<T>(offset: u64) -> *const T
rel_ptr_mut	$RUST/src/sys/pal/sgx/abi/mem.rs	/^pub(crate) unsafe fn rel_ptr_mut<T>(offset: u64) -> *mut T {$/;"	f	signature:<T>(offset: u64) -> *mut T
release	$RUST/src/sync/mpmc/counter.rs	/^    pub(crate) unsafe fn release<F: FnOnce(&C) -> bool>(&self, disconnect: F) {$/;"	P	implementation:Sender	signature:<F: FnOnce(&C) -> bool>(&self, disconnect: F)
reloc	$RUST/src/sys/pal/sgx/abi/mod.rs	/^mod reloc;$/;"	n
relocate_elf_rela	$RUST/src/sys/pal/sgx/abi/reloc.rs	/^pub fn relocate_elf_rela() {$/;"	f	signature:()
reltim2dur	$RUST/src/sys/pal/itron/time/tests.rs	/^fn reltim2dur(t: u64) -> Duration {$/;"	f	signature:(t: u64) -> Duration
rem_euclid	$RUST/src/f32.rs	/^    pub fn rem_euclid(self, rhs: f32) -> f32 {$/;"	P	implementation:f32	signature:(self, rhs: f32) -> f32
rem_euclid	$RUST/src/f64.rs	/^    pub fn rem_euclid(self, rhs: f64) -> f64 {$/;"	P	implementation:f64	signature:(self, rhs: f64) -> f64
remaining	$RUST/src/io/buffered/bufwriter.rs	/^            fn remaining(&self) -> &[u8] {$/;"	P	implementation:BufWriter::flush_buf::BufGuard	signature:(&self) -> &[u8]
remaining_slice	$RUST/src/io/cursor.rs	/^    pub fn remaining_slice(&self) -> &[u8] {$/;"	f	signature:(&self) -> &[u8]
remap	$RUST/src/sys/pal/sgx/alloc.rs	/^    fn remap(&self, _ptr: *mut u8, _oldsize: usize, _newsize: usize, _can_move: bool) -> *mut u8/;"	P	implementation:Sgx	signature:(&self, _ptr: *mut u8, _oldsize: usize, _newsize: usize, _can_move: bool) -> *mut u8
remote	$RUST/src/sys/pal/xous/net/udp.rs	/^    remote: Cell<Option<SocketAddr>>,$/;"	m	struct:UdpSocket
remote_port	$RUST/src/sys/pal/xous/net/tcpstream.rs	/^    remote_port: u16,$/;"	m	struct:TcpStream
remove	$RUST/src/collections/hash/map.rs	/^    pub fn remove<Q: ?Sized>(&mut self, k: &Q) -> Option<V>$/;"	f	signature:<Q: ?Sized>(&mut self, k: &Q) -> Option<V> where K: Borrow<Q>, Q: Hash + Eq,
remove	$RUST/src/collections/hash/set.rs	/^    pub fn remove<Q: ?Sized>(&mut self, value: &Q) -> bool$/;"	f	signature:<Q: ?Sized>(&mut self, value: &Q) -> bool where T: Borrow<Q>, Q: Hash + Eq,
remove	$RUST/src/sys/pal/itron/condvar.rs	/^        pub unsafe fn remove(&mut self, mut waiter_ptr: NonNull<Waiter>) -> bool {$/;"	P	implementation:waiter_queue::WaiterQueue	signature:(&mut self, mut waiter_ptr: NonNull<Waiter>) -> bool
remove	$RUST/src/sys/pal/sgx/waitqueue/unsafe_list.rs	/^    pub unsafe fn remove(&mut self, entry: &mut UnsafeListEntry<T>) {$/;"	P	implementation:UnsafeList	signature:(&mut self, entry: &mut UnsafeListEntry<T>)
remove	$RUST/src/sys_common/process.rs	/^    pub fn remove(&mut self, key: &OsStr) {$/;"	P	implementation:CommandEnv	signature:(&mut self, key: &OsStr)
remove_dir	$RUST/src/fs.rs	/^pub fn remove_dir<P: AsRef<Path>>(path: P) -> io::Result<()> {$/;"	f	signature:<P: AsRef<Path>>(path: P) -> io::Result<()>
remove_dir_all	$RUST/src/fs.rs	/^pub fn remove_dir_all<P: AsRef<Path>>(path: P) -> io::Result<()> {$/;"	f	signature:<P: AsRef<Path>>(path: P) -> io::Result<()>
remove_dir_all	$RUST/src/sys/pal/hermit/fs.rs	/^pub fn remove_dir_all(_path: &Path) -> io::Result<()> {$/;"	f	signature:(_path: &Path) -> io::Result<()>
remove_dir_all	$RUST/src/sys/pal/unix/fs.rs	/^    pub fn remove_dir_all(p: &Path) -> io::Result<()> {$/;"	f	module:remove_dir_impl	signature:(p: &Path) -> io::Result<()>
remove_dir_all	$RUST/src/sys/pal/unsupported/fs.rs	/^pub fn remove_dir_all(_path: &Path) -> io::Result<()> {$/;"	f	signature:(_path: &Path) -> io::Result<()>
remove_dir_all	$RUST/src/sys/pal/wasi/fs.rs	/^pub fn remove_dir_all(path: &Path) -> io::Result<()> {$/;"	f	signature:(path: &Path) -> io::Result<()>
remove_dir_all	$RUST/src/sys/pal/windows/fs.rs	/^pub fn remove_dir_all(path: &Path) -> io::Result<()> {$/;"	f	signature:(path: &Path) -> io::Result<()>
remove_dir_all	$RUST/src/sys_common/fs.rs	/^pub fn remove_dir_all(path: &Path) -> io::Result<()> {$/;"	f	signature:(path: &Path) -> io::Result<()>
remove_dir_all_iterative	$RUST/src/sys/pal/windows/fs.rs	/^fn remove_dir_all_iterative(f: &File, delete: fn(&File) -> io::Result<()>) -> io::Result<()> {$/;"	f	signature:(f: &File, delete: fn(&File) -> io::Result<()>) -> io::Result<()>
remove_dir_all_modern	$RUST/src/sys/pal/unix/fs.rs	/^    fn remove_dir_all_modern(p: &Path) -> io::Result<()> {$/;"	f	module:remove_dir_impl	signature:(p: &Path) -> io::Result<()>
remove_dir_all_recursive	$RUST/src/sys/pal/unix/fs.rs	/^    fn remove_dir_all_recursive(parent_fd: Option<RawFd>, path: &CStr) -> io::Result<()> {$/;"	f	module:remove_dir_impl	signature:(parent_fd: Option<RawFd>, path: &CStr) -> io::Result<()>
remove_dir_all_recursive	$RUST/src/sys/pal/wasi/fs.rs	/^fn remove_dir_all_recursive(parent: &WasiFd, path: &Path) -> io::Result<()> {$/;"	f	signature:(parent: &WasiFd, path: &Path) -> io::Result<()>
remove_dir_all_recursive	$RUST/src/sys_common/fs.rs	/^fn remove_dir_all_recursive(path: &Path) -> io::Result<()> {$/;"	f	signature:(path: &Path) -> io::Result<()>
remove_dir_impl	$RUST/src/sys/pal/unix/fs.rs	/^mod remove_dir_impl {$/;"	n
remove_directory	$RUST/src/os/wasi/fs.rs	/^    fn remove_directory<P: AsRef<Path>>(&self, path: P) -> io::Result<()>;$/;"	P	interface:FileExt	signature:<P: AsRef<Path>>(&self, path: P) -> io::Result<()>
remove_directory	$RUST/src/sys/pal/wasi/fd.rs	/^    pub fn remove_directory(&self, path: &str) -> io::Result<()> {$/;"	P	implementation:WasiFd	signature:(&self, path: &str) -> io::Result<()>
remove_entry	$RUST/src/collections/hash/map.rs	/^    pub fn remove_entry<Q: ?Sized>(&mut self, k: &Q) -> Option<(K, V)>$/;"	f	signature:<Q: ?Sized>(&mut self, k: &Q) -> Option<(K, V)> where K: Borrow<Q>, Q: Hash + Eq,
remove_file	$RUST/src/fs.rs	/^pub fn remove_file<P: AsRef<Path>>(path: P) -> io::Result<()> {$/;"	f	signature:<P: AsRef<Path>>(path: P) -> io::Result<()>
remove_file	$RUST/src/os/wasi/fs.rs	/^    fn remove_file<P: AsRef<Path>>(&self, path: P) -> io::Result<()>;$/;"	P	interface:FileExt	signature:<P: AsRef<Path>>(&self, path: P) -> io::Result<()>
remove_var	$RUST/src/env.rs	/^pub fn remove_var<K: AsRef<OsStr>>(key: K) {$/;"	f	signature:<K: AsRef<OsStr>>(key: K)
remutex	$RUST/src/sync/mod.rs	/^mod remutex;$/;"	n
rename	$RUST/src/fs.rs	/^pub fn rename<P: AsRef<Path>, Q: AsRef<Path>>(from: P, to: Q) -> io::Result<()> {$/;"	f	signature:<P: AsRef<Path>, Q: AsRef<Path>>(from: P, to: Q) -> io::Result<()>
rename	$RUST/src/os/wasi/fs.rs	/^pub fn rename<P: AsRef<Path>, U: AsRef<Path>>($/;"	f	signature:<P: AsRef<Path>, U: AsRef<Path>>( old_fd: &File, old_path: P, new_fd: &File, new_path: U, ) -> io::Result<()>
rename	$RUST/src/sys/pal/hermit/fs.rs	/^pub fn rename(_old: &Path, _new: &Path) -> io::Result<()> {$/;"	f	signature:(_old: &Path, _new: &Path) -> io::Result<()>
rename	$RUST/src/sys/pal/unix/fs.rs	/^pub fn rename(old: &Path, new: &Path) -> io::Result<()> {$/;"	f	signature:(old: &Path, new: &Path) -> io::Result<()>
rename	$RUST/src/sys/pal/unsupported/fs.rs	/^pub fn rename(_old: &Path, _new: &Path) -> io::Result<()> {$/;"	f	signature:(_old: &Path, _new: &Path) -> io::Result<()>
rename	$RUST/src/sys/pal/wasi/fd.rs	/^    pub fn rename(&self, old_path: &str, new_fd: &WasiFd, new_path: &str) -> io::Result<()> {$/;"	P	implementation:WasiFd	signature:(&self, old_path: &str, new_fd: &WasiFd, new_path: &str) -> io::Result<()>
rename	$RUST/src/sys/pal/wasi/fs.rs	/^pub fn rename(old: &Path, new: &Path) -> io::Result<()> {$/;"	f	signature:(old: &Path, new: &Path) -> io::Result<()>
rename	$RUST/src/sys/pal/windows/fs.rs	/^pub fn rename(old: &Path, new: &Path) -> io::Result<()> {$/;"	f	signature:(old: &Path, new: &Path) -> io::Result<()>
rename_directory	$RUST/src/fs/tests.rs	/^fn rename_directory() {$/;"	f	signature:()
render_inner	$RUST/src/net/tcp/tests.rs	/^    fn render_inner(addr: &dyn crate::os::windows::io::AsRawSocket) -> impl fmt::Debug {$/;"	f	function:debug	signature:(addr: &dyn crate::os::windows::io::AsRawSocket) -> impl fmt::Debug
render_socket_addr	$RUST/src/net/tcp/tests.rs	/^    fn render_socket_addr<'a>(addr: &'a SocketAddr) -> impl fmt::Debug + 'a {$/;"	f	function:debug	signature:<'a>(addr: &'a SocketAddr) -> impl fmt::Debug + 'a
reparse_point	$RUST/src/sys/pal/windows/fs.rs	/^    fn reparse_point($/;"	P	implementation:File	signature:( &self, space: &mut Align8<[MaybeUninit<u8>]>, ) -> io::Result<(c::DWORD, *mut c::REPARSE_DATA_BUFFER)>
reparse_tag	$RUST/src/sys/pal/windows/fs.rs	/^    reparse_tag: c::DWORD,$/;"	m	struct:FileType
repeat	$RUST/src/io/util.rs	/^pub const fn repeat(byte: u8) -> Repeat {$/;"	f	signature:(byte: u8) -> Repeat
repeat_repeats	$RUST/src/io/util/tests.rs	/^fn repeat_repeats() {$/;"	f	signature:()
replace	$RUST/src/collections/hash/set.rs	/^    pub fn replace(&mut self, value: T) -> Option<T> {$/;"	f	signature:(&mut self, value: T) -> Option<T>
replace	$RUST/src/thread/local.rs	/^    pub fn replace(&'static self, value: T) -> T {$/;"	P	implementation:LocalKey	signature:(&'static self, value: T) -> T
replace_entry	$RUST/src/collections/hash/map.rs	/^    pub fn replace_entry(self, value: V) -> (K, V) {$/;"	P	implementation:OccupiedEntry	signature:(self, value: V) -> (K, V)
replace_key	$RUST/src/collections/hash/map.rs	/^    pub fn replace_key(self) -> K {$/;"	P	implementation:OccupiedEntry	signature:(self) -> K
report	$RUST/src/process.rs	/^    fn report(self) -> ExitCode;$/;"	P	interface:Termination	signature:(self) -> ExitCode
repr	$RUST/src/io/error.rs	/^    repr: Repr,$/;"	m	struct:Error
repr_bitpacked	$RUST/src/io/error.rs	/^mod repr_bitpacked;$/;"	n
repr_unpacked	$RUST/src/io/error.rs	/^mod repr_unpacked;$/;"	n
repro	$RUST/src/sync/mpsc/sync_tests.rs	/^    fn repro() {$/;"	f	function:issue_15761	signature:()
reserve	$RUST/src/collections/hash/map.rs	/^    pub fn reserve(&mut self, additional: usize) {$/;"	f	signature:(&mut self, additional: usize)
reserve	$RUST/src/collections/hash/set.rs	/^    pub fn reserve(&mut self, additional: usize) {$/;"	f	signature:(&mut self, additional: usize)
reserve	$RUST/src/ffi/os_str.rs	/^    pub fn reserve(&mut self, additional: usize) {$/;"	P	implementation:OsString	signature:(&mut self, additional: usize)
reserve	$RUST/src/path.rs	/^    pub fn reserve(&mut self, additional: usize) {$/;"	P	implementation:PathBuf	signature:(&mut self, additional: usize)
reserve	$RUST/src/sys/os_str/bytes.rs	/^    pub fn reserve(&mut self, additional: usize) {$/;"	P	implementation:Buf	signature:(&mut self, additional: usize)
reserve	$RUST/src/sys/os_str/wtf8.rs	/^    pub fn reserve(&mut self, additional: usize) {$/;"	P	implementation:Buf	signature:(&mut self, additional: usize)
reserve	$RUST/src/sys_common/wtf8.rs	/^    pub fn reserve(&mut self, additional: usize) {$/;"	P	implementation:Wtf8Buf	signature:(&mut self, additional: usize)
reserve_and_pad	$RUST/src/io/cursor.rs	/^fn reserve_and_pad<A: Allocator>($/;"	f	signature:<A: Allocator>( pos_mut: &mut u64, vec: &mut Vec<u8, A>, buf_len: usize, ) -> io::Result<usize>
reserve_exact	$RUST/src/ffi/os_str.rs	/^    pub fn reserve_exact(&mut self, additional: usize) {$/;"	P	implementation:OsString	signature:(&mut self, additional: usize)
reserve_exact	$RUST/src/path.rs	/^    pub fn reserve_exact(&mut self, additional: usize) {$/;"	P	implementation:PathBuf	signature:(&mut self, additional: usize)
reserve_exact	$RUST/src/sys/os_str/bytes.rs	/^    pub fn reserve_exact(&mut self, additional: usize) {$/;"	P	implementation:Buf	signature:(&mut self, additional: usize)
reserve_exact	$RUST/src/sys/os_str/wtf8.rs	/^    pub fn reserve_exact(&mut self, additional: usize) {$/;"	P	implementation:Buf	signature:(&mut self, additional: usize)
reserve_exact	$RUST/src/sys_common/wtf8.rs	/^    pub fn reserve_exact(&mut self, additional: usize) {$/;"	P	implementation:Wtf8Buf	signature:(&mut self, additional: usize)
reserved0	$RUST/src/sys/pal/unix/process/zircon.rs	/^    pub reserved0: u32,$/;"	m	struct:fdio_spawn_action_t
reserved1	$RUST/src/sys/pal/unix/process/zircon.rs	/^    pub reserved1: u64,$/;"	m	struct:fdio_spawn_action_t
reset	$RUST/src/sync/mpmc/context.rs	/^    fn reset(&self) {$/;"	P	implementation:Context	signature:(&self)
reset_sigpipe	$RUST/src/sys/pal/unix/mod.rs	/^    unsafe fn reset_sigpipe(#[allow(unused_variables)] sigpipe: u8) {$/;"	f	function:init	signature:(#[allow(unused_variables)] sigpipe: u8)
resolve_exe	$RUST/src/sys/pal/windows/process.rs	/^fn resolve_exe<'a>($/;"	f	signature:<'a>( exe_path: &'a OsStr, parent_paths: impl FnOnce() -> Option<OsString>, child_paths: Option<&OsStr>, ) -> io::Result<Vec<u16>>
resolve_socket_addr	$RUST/src/net/socket_addr.rs	/^fn resolve_socket_addr(lh: LookupHost) -> io::Result<vec::IntoIter<SocketAddr>> {$/;"	f	signature:(lh: LookupHost) -> io::Result<vec::IntoIter<SocketAddr>>
rest	$RUST/src/sys/pal/windows/c.rs	/^    pub rest: (),$/;"	m	struct:REPARSE_DATA_BUFFER
result	$RUST/src/sys/pal/windows/pipe.rs	/^    fn result(&mut self) -> io::Result<bool> {$/;"	P	implementation:AsyncPipe	signature:(&mut self) -> io::Result<bool>
result	$RUST/src/thread/mod.rs	/^    result: UnsafeCell<Option<Result<T>>>,$/;"	m	struct:Packet
resume_unwind	$RUST/src/panic.rs	/^pub fn resume_unwind(payload: Box<dyn Any + Send>) -> ! {$/;"	f	signature:(payload: Box<dyn Any + Send>) -> !
retain	$RUST/src/collections/hash/map.rs	/^    pub fn retain<F>(&mut self, f: F)$/;"	P	implementation:HashMap	signature:<F>(&mut self, f: F) where F: FnMut(&K, &mut V) -> bool,
retain	$RUST/src/collections/hash/set.rs	/^    pub fn retain<F>(&mut self, f: F)$/;"	P	implementation:HashSet	signature:<F>(&mut self, f: F) where F: FnMut(&T) -> bool,
retrying_libc_posix_spawnp	$RUST/src/sys/pal/unix/process/process_unix.rs	/^        unsafe fn retrying_libc_posix_spawnp($/;"	f	method:Command::posix_spawn	signature:( pid: *mut pid_t, file: *const c_char, file_actions: *const posix_spawn_file_actions_t, attrp: *const posix_spawnattr_t, argv: *const *mut c_char, envp: *const *mut c_char, ) -> io::Result<i32>
return_code	$RUST/src/sys/pal/unix/process/zircon.rs	/^    pub return_code: i64,$/;"	m	struct:zx_info_process_t
return_keyword	$RUST/src/keyword_docs.rs	/^mod return_keyword {}$/;"	n
return_type_is_abort	$RUST/src/sys/pal/sgx/abi/usercalls/raw.rs	/^macro_rules! return_type_is_abort {$/;"	M
rewind	$RUST/src/io/mod.rs	/^    fn rewind(&mut self) -> Result<()> {$/;"	P	interface:Seek	signature:(&mut self) -> Result<()>
rights_base	$RUST/src/sys/pal/wasi/fs.rs	/^    rights_base: Option<wasi::Rights>,$/;"	m	struct:OpenOptions
rights_inheriting	$RUST/src/sys/pal/wasi/fs.rs	/^    rights_inheriting: Option<wasi::Rights>,$/;"	m	struct:OpenOptions
rmdir	$RUST/src/sys/pal/hermit/fs.rs	/^pub fn rmdir(_p: &Path) -> io::Result<()> {$/;"	f	signature:(_p: &Path) -> io::Result<()>
rmdir	$RUST/src/sys/pal/unix/fs.rs	/^pub fn rmdir(p: &Path) -> io::Result<()> {$/;"	f	signature:(p: &Path) -> io::Result<()>
rmdir	$RUST/src/sys/pal/unsupported/fs.rs	/^pub fn rmdir(_p: &Path) -> io::Result<()> {$/;"	f	signature:(_p: &Path) -> io::Result<()>
rmdir	$RUST/src/sys/pal/wasi/fs.rs	/^pub fn rmdir(p: &Path) -> io::Result<()> {$/;"	f	signature:(p: &Path) -> io::Result<()>
rmdir	$RUST/src/sys/pal/windows/fs.rs	/^pub fn rmdir(p: &Path) -> io::Result<()> {$/;"	f	signature:(p: &Path) -> io::Result<()>
root	$RUST/src/sys/pal/solid/fs.rs	/^    root: PathBuf,$/;"	m	struct:InnerReadDir
root	$RUST/src/sys/pal/unix/fs.rs	/^    root: PathBuf,$/;"	m	struct:InnerReadDir
root	$RUST/src/sys/pal/wasi/fs.rs	/^    root: PathBuf,$/;"	m	struct:ReadDirInner
root	$RUST/src/sys/pal/windows/fs.rs	/^    root: Arc<PathBuf>,$/;"	m	struct:ReadDir
rot_rdq	$RUST/src/sys/pal/itron/abi.rs	/^    pub fn rot_rdq(tskpri: PRI) -> ER;$/;"	f	signature:(tskpri: PRI) -> ER
round	$RUST/src/f32.rs	/^    pub fn round(self) -> f32 {$/;"	P	implementation:f32	signature:(self) -> f32
round	$RUST/src/f64.rs	/^    pub fn round(self) -> f64 {$/;"	P	implementation:f64	signature:(self) -> f64
round_ties_even	$RUST/src/f32.rs	/^    pub fn round_ties_even(self) -> f32 {$/;"	P	implementation:f32	signature:(self) -> f32
round_ties_even	$RUST/src/f64.rs	/^    pub fn round_ties_even(self) -> f64 {$/;"	P	implementation:f64	signature:(self) -> f64
round_up	$RUST/src/sys/personality/dwarf/eh.rs	/^fn round_up(unrounded: usize, align: usize) -> Result<usize, ()> {$/;"	f	signature:(unrounded: usize, align: usize) -> Result<usize, ()>
rsplit_file_at_dot	$RUST/src/path.rs	/^fn rsplit_file_at_dot(file: &OsStr) -> (Option<&OsStr>, Option<&OsStr>) {$/;"	f	signature:(file: &OsStr) -> (Option<&OsStr>, Option<&OsStr>)
rsync	$RUST/src/os/wasi/fs.rs	/^    fn rsync(&mut self, rsync: bool) -> &mut Self;$/;"	P	interface:OpenOptionsExt	signature:(&mut self, rsync: bool) -> &mut Self
rsync	$RUST/src/sys/pal/wasi/fs.rs	/^    pub fn rsync(&mut self, set: bool) {$/;"	P	implementation:OpenOptions	signature:(&mut self, set: bool)
rtabort	$RUST/src/rt.rs	/^macro_rules! rtabort {$/;"	M
rtassert	$RUST/src/rt.rs	/^macro_rules! rtassert {$/;"	M
rtprintpanic	$RUST/src/rt.rs	/^macro_rules! rtprintpanic {$/;"	M
rtunwrap	$RUST/src/rt.rs	/^macro_rules! rtunwrap {$/;"	M
run	$RUST/src/sys/pal/sgx/thread.rs	/^        pub(super) fn run(self) -> JoinNotifier {$/;"	P	implementation:task_queue::Task	signature:(self) -> JoinNotifier
run	$RUST/src/thread/local/tests.rs	/^    fn run(key: &'static LocalKey<UnsafeCell<Option<NotifyOnDrop>>>) {$/;"	f	function:smoke_dtor	signature:(key: &'static LocalKey<UnsafeCell<Option<NotifyOnDrop>>>)
run_bat_script	$RUST/src/process/tests.rs	/^fn run_bat_script() {$/;"	f	signature:()
run_canonical_bat_script	$RUST/src/process/tests.rs	/^fn run_canonical_bat_script() {$/;"	f	signature:()
run_dtors	$RUST/src/sys/pal/hermit/thread_local_dtor.rs	/^pub unsafe fn run_dtors() {$/;"	f	signature:()
run_dtors	$RUST/src/sys/pal/solid/thread_local_dtor.rs	/^pub unsafe fn run_dtors() {$/;"	f	signature:()
run_dtors	$RUST/src/sys/pal/unix/thread_local_dtor.rs	/^    unsafe extern "C" fn run_dtors(_: *mut u8) {$/;"	f	function:register_dtor	signature:(_: *mut u8)
run_dtors	$RUST/src/sys/pal/windows/thread_local_key.rs	/^unsafe fn run_dtors() {$/;"	f	signature:()
run_dtors	$RUST/src/sys/pal/xous/thread_local_key.rs	/^unsafe fn run_dtors() {$/;"	f	signature:()
run_dtors	$RUST/src/sys_common/thread_local_dtor.rs	/^    unsafe extern "C" fn run_dtors(mut ptr: *mut u8) {$/;"	f	function:register_dtor_fallback	signature:(mut ptr: *mut u8)
run_keyless_dtors	$RUST/src/sys/pal/windows/thread_local_key.rs	/^unsafe fn run_keyless_dtors() {$/;"	f	signature:()
run_output	$RUST/src/process/tests.rs	/^pub fn run_output(mut cmd: Command) -> String {$/;"	f	signature:(mut cmd: Command) -> String
run_path_with_cstr	$RUST/src/sys/pal/common/small_c_string.rs	/^pub fn run_path_with_cstr<T, F>(path: &Path, f: F) -> io::Result<T>$/;"	f	signature:<T, F>(path: &Path, f: F) -> io::Result<T> where F: FnOnce(&CStr) -> io::Result<T>,
run_with_cstr	$RUST/src/sys/pal/common/small_c_string.rs	/^pub fn run_with_cstr<T, F>(bytes: &[u8], f: F) -> io::Result<T>$/;"	f	signature:<T, F>(bytes: &[u8], f: F) -> io::Result<T> where F: FnOnce(&CStr) -> io::Result<T>,
run_with_cstr_allocating	$RUST/src/sys/pal/common/small_c_string.rs	/^fn run_with_cstr_allocating<T, F>(bytes: &[u8], f: F) -> io::Result<T>$/;"	f	signature:<T, F>(bytes: &[u8], f: F) -> io::Result<T> where F: FnOnce(&CStr) -> io::Result<T>,
runtime_entry	$RUST/src/sys/pal/hermit/mod.rs	/^pub unsafe extern "C" fn runtime_entry($/;"	f	signature:( argc: i32, argv: *const *const c_char, env: *const *const c_char, ) -> !
rust_2015	$RUST/src/prelude/mod.rs	/^pub mod rust_2015 {$/;"	n
rust_2018	$RUST/src/prelude/mod.rs	/^pub mod rust_2018 {$/;"	n
rust_2021	$RUST/src/prelude/mod.rs	/^pub mod rust_2021 {$/;"	n
rust_2024	$RUST/src/prelude/mod.rs	/^pub mod rust_2024 {$/;"	n
rust_eh_personality	$RUST/src/sys/personality/emcc.rs	/^unsafe extern "C" fn rust_eh_personality($/;"	f	signature:( _version: c_int, _actions: uw::_Unwind_Action, _exception_class: uw::_Unwind_Exception_Class, _exception_object: *mut uw::_Unwind_Exception, _context: *mut uw::_Unwind_Context, ) -> uw::_Unwind_Reason_Code
rust_oom	$RUST/src/alloc.rs	/^pub fn rust_oom(layout: Layout) -> ! {$/;"	f	signature:(layout: Layout) -> !
rust_panic	$RUST/src/panicking.rs	/^fn rust_panic(msg: &mut dyn PanicPayload) -> ! {$/;"	f	signature:(msg: &mut dyn PanicPayload) -> !
rust_panic_with_hook	$RUST/src/panicking.rs	/^fn rust_panic_with_hook($/;"	f	signature:( payload: &mut dyn PanicPayload, message: Option<&fmt::Arguments<'_>>, location: &Location<'_>, can_unwind: bool, force_no_backtrace: bool, ) -> !
rust_panic_without_hook	$RUST/src/panicking.rs	/^pub fn rust_panic_without_hook(payload: Box<dyn Any + Send>) -> ! {$/;"	f	signature:(payload: Box<dyn Any + Send>) -> !
rwl	$RUST/src/sys/pal/solid/rwlock.rs	/^    rwl: SpinIdOnceCell<()>,$/;"	m	struct:RwLock
rwl_acre_rwl	$RUST/src/sys/pal/solid/abi/mod.rs	/^    pub fn rwl_acre_rwl() -> ER_ID;$/;"	f	signature:() -> ER_ID
rwl_del_rwl	$RUST/src/sys/pal/solid/abi/mod.rs	/^    pub fn rwl_del_rwl(id: ID) -> ER;$/;"	f	signature:(id: ID) -> ER
rwl_loc_rdl	$RUST/src/sys/pal/solid/abi/mod.rs	/^    pub fn rwl_loc_rdl(id: ID) -> ER;$/;"	f	signature:(id: ID) -> ER
rwl_loc_wrl	$RUST/src/sys/pal/solid/abi/mod.rs	/^    pub fn rwl_loc_wrl(id: ID) -> ER;$/;"	f	signature:(id: ID) -> ER
rwl_ploc_rdl	$RUST/src/sys/pal/solid/abi/mod.rs	/^    pub fn rwl_ploc_rdl(id: ID) -> ER;$/;"	f	signature:(id: ID) -> ER
rwl_ploc_wrl	$RUST/src/sys/pal/solid/abi/mod.rs	/^    pub fn rwl_ploc_wrl(id: ID) -> ER;$/;"	f	signature:(id: ID) -> ER
rwl_unl_rwl	$RUST/src/sys/pal/solid/abi/mod.rs	/^    pub fn rwl_unl_rwl(id: ID) -> ER;$/;"	f	signature:(id: ID) -> ER
rwlock	$RUST/src/sync/mod.rs	/^mod rwlock;$/;"	n
rwlock	$RUST/src/sys/pal/sgx/mod.rs	/^mod rwlock;$/;"	n
rwlock	$RUST/src/sys/pal/solid/mod.rs	/^mod rwlock;$/;"	n
rwlock	$RUST/src/sys/pal/teeos/locks/mod.rs	/^pub mod rwlock;$/;"	n
rwlock	$RUST/src/sys/pal/unsupported/locks/mod.rs	/^mod rwlock;$/;"	n
rwlock	$RUST/src/sys/pal/windows/locks/mod.rs	/^mod rwlock;$/;"	n
rwlock	$RUST/src/sys/pal/xous/locks/mod.rs	/^mod rwlock;$/;"	n
s2_data1	$RUST/src/sys/pal/solid/abi/sockets.rs	/^    pub s2_data1: [c_char; 2usize],$/;"	m	struct:sockaddr_storage
s2_data2	$RUST/src/sys/pal/solid/abi/sockets.rs	/^    pub s2_data2: [u32; 3usize],$/;"	m	struct:sockaddr_storage
s2_len	$RUST/src/sys/pal/solid/abi/sockets.rs	/^    pub s2_len: u8,$/;"	m	struct:sockaddr_storage
s6_addr	$RUST/src/sys/pal/sgx/net.rs	/^        pub s6_addr: [u8; 16],$/;"	m	struct:netc::in6_addr
s6_addr	$RUST/src/sys/pal/solid/abi/sockets.rs	/^    pub s6_addr: [u8; 16],$/;"	m	struct:in6_addr
s6_addr	$RUST/src/sys/pal/teeos/net.rs	/^        pub s6_addr: [u8; 16],$/;"	m	struct:netc::in6_addr
s6_addr	$RUST/src/sys/pal/unsupported/net.rs	/^        pub s6_addr: [u8; 16],$/;"	m	struct:netc::in6_addr
s6_addr	$RUST/src/sys/pal/wasi/net.rs	/^        pub s6_addr: [u8; 16],$/;"	m	struct:netc::in6_addr
s6_addr	$RUST/src/sys/pal/windows/c.rs	/^    pub s6_addr: [u8; 16],$/;"	m	struct:in6_addr
s6_addr	$RUST/src/sys/pal/xous/net/mod.rs	/^        pub s6_addr: [u8; 16],$/;"	m	struct:netc::in6_addr
s_addr	$RUST/src/sys/pal/sgx/net.rs	/^        pub s_addr: u32,$/;"	m	struct:netc::in_addr
s_addr	$RUST/src/sys/pal/solid/abi/sockets.rs	/^    pub s_addr: in_addr_t,$/;"	m	struct:in_addr
s_addr	$RUST/src/sys/pal/teeos/net.rs	/^        pub s_addr: u32,$/;"	m	struct:netc::in_addr
s_addr	$RUST/src/sys/pal/unsupported/net.rs	/^        pub s_addr: u32,$/;"	m	struct:netc::in_addr
s_addr	$RUST/src/sys/pal/wasi/net.rs	/^        pub s_addr: u32,$/;"	m	struct:netc::in_addr
s_addr	$RUST/src/sys/pal/windows/c.rs	/^    pub s_addr: u32,$/;"	m	struct:in_addr
s_addr	$RUST/src/sys/pal/xous/net/mod.rs	/^        pub s_addr: u32,$/;"	m	struct:netc::in_addr
s_b1	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub s_b1: u8,$/;"	m	struct:IN_ADDR_0_0
s_b2	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub s_b2: u8,$/;"	m	struct:IN_ADDR_0_0
s_b3	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub s_b3: u8,$/;"	m	struct:IN_ADDR_0_0
s_b4	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub s_b4: u8,$/;"	m	struct:IN_ADDR_0_0
s_nan	$RUST/src/f32/tests.rs	/^    fn s_nan() -> f32 {$/;"	f	function:test_total_cmp	signature:() -> f32
s_nan	$RUST/src/f64/tests.rs	/^    fn s_nan() -> f64 {$/;"	f	function:test_total_cmp	signature:() -> f64
s_w1	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub s_w1: u16,$/;"	m	struct:IN_ADDR_0_1
s_w2	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub s_w2: u16,$/;"	m	struct:IN_ADDR_0_1
sa4	$RUST/src/net/test.rs	/^pub fn sa4(a: Ipv4Addr, p: u16) -> SocketAddr {$/;"	f	signature:(a: Ipv4Addr, p: u16) -> SocketAddr
sa6	$RUST/src/net/test.rs	/^pub fn sa6(a: Ipv6Addr, p: u16) -> SocketAddr {$/;"	f	signature:(a: Ipv6Addr, p: u16) -> SocketAddr
sa_data	$RUST/src/sys/pal/solid/abi/sockets.rs	/^    pub sa_data: [c_char; 14usize],$/;"	m	struct:sockaddr
sa_data	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub sa_data: [u8; 14],$/;"	m	struct:SOCKADDR
sa_family	$RUST/src/sys/pal/solid/abi/sockets.rs	/^    pub sa_family: sa_family_t,$/;"	m	struct:sockaddr
sa_family	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub sa_family: ADDRESS_FAMILY,$/;"	m	struct:SOCKADDR
sa_family_t	$RUST/src/sys/pal/sgx/net.rs	/^    pub type sa_family_t = u8;$/;"	t	module:netc
sa_family_t	$RUST/src/sys/pal/solid/abi/sockets.rs	/^pub type sa_family_t = u8;$/;"	t
sa_family_t	$RUST/src/sys/pal/teeos/net.rs	/^    pub type sa_family_t = u8;$/;"	t	module:netc
sa_family_t	$RUST/src/sys/pal/unsupported/net.rs	/^    pub type sa_family_t = u8;$/;"	t	module:netc
sa_family_t	$RUST/src/sys/pal/wasi/net.rs	/^    pub type sa_family_t = u8;$/;"	t	module:netc
sa_family_t	$RUST/src/sys/pal/xous/net/mod.rs	/^    pub type sa_family_t = u8;$/;"	t	module:netc
sa_len	$RUST/src/sys/pal/solid/abi/sockets.rs	/^    pub sa_len: u8,$/;"	m	struct:sockaddr
safe_kernel_copy	$RUST/src/sys/pal/unix/kernel_copy.rs	/^fn safe_kernel_copy(source: &FdMeta, sink: &FdMeta) -> bool {$/;"	f	signature:(source: &FdMeta, sink: &FdMeta) -> bool
same	$RUST/src/os/raw/tests.rs	/^fn same() {$/;"	f	signature:()
same_channel	$RUST/src/sync/mpmc/mod.rs	/^    pub fn same_channel(&self, other: &Sender<T>) -> bool {$/;"	P	implementation:Sender	signature:(&self, other: &Sender<T>) -> bool
sanitize_standard_fds	$RUST/src/sys/pal/unix/mod.rs	/^    unsafe fn sanitize_standard_fds() {$/;"	f	function:init	signature:()
saturating_duration_since	$RUST/src/time.rs	/^    pub fn saturating_duration_since(&self, earlier: Instant) -> Duration {$/;"	P	implementation:Instant	signature:(&self, earlier: Instant) -> Duration
saw_nul	$RUST/src/sys/pal/unix/process/process_common.rs	/^    saw_nul: bool,$/;"	m	struct:Command
saw_path	$RUST/src/sys_common/process.rs	/^    saw_path: bool,$/;"	m	struct:CommandEnv
scalar	$RUST/src/os/xous/ffi.rs	/^pub(crate) fn scalar(connection: Connection, args: [usize; 5]) -> Result<(), Error> {$/;"	f	signature:(connection: Connection, args: [usize; 5]) -> Result<(), Error>
scalar_impl	$RUST/src/os/xous/ffi.rs	/^fn scalar_impl(connection: Connection, args: [usize; 5], blocking: bool) -> Result<(), Error> {$/;"	f	signature:(connection: Connection, args: [usize; 5], blocking: bool) -> Result<(), Error>
schedule_read	$RUST/src/sys/pal/windows/pipe.rs	/^    fn schedule_read(&mut self) -> io::Result<bool> {$/;"	P	implementation:AsyncPipe	signature:(&mut self) -> io::Result<bool>
scope	$RUST/src/thread/mod.rs	/^    scope: Option<Arc<scoped::ScopeData>>,$/;"	m	struct:Packet
scope	$RUST/src/thread/scoped.rs	/^pub fn scope<'env, F, T>(f: F) -> T$/;"	f	signature:<'env, F, T>(f: F) -> T where F: for<'scope> FnOnce(&'scope Scope<'scope, 'env>) -> T,
scope_join_race	$RUST/src/thread/tests.rs	/^fn scope_join_race() {$/;"	f	signature:()
scoped	$RUST/src/thread/mod.rs	/^mod scoped;$/;"	n
sealed	$RUST/src/lib.rs	/^mod sealed {$/;"	n
search_paths	$RUST/src/sys/pal/windows/process.rs	/^fn search_paths<Paths, Exists>($/;"	f	signature:<Paths, Exists>( parent_paths: Paths, child_paths: Option<&OsStr>, mut exists: Exists, ) -> Option<Vec<u16>> where Paths: FnOnce() -> Option<OsString>, Exists: FnMut(PathBuf) -> Option<Vec<u16>>,
second	$RUST/src/io/mod.rs	/^    second: U,$/;"	m	struct:Chain
security_attributes	$RUST/src/sys/pal/windows/fs.rs	/^    security_attributes: c::LPSECURITY_ATTRIBUTES,$/;"	m	struct:OpenOptions
security_qos_flags	$RUST/src/os/windows/fs.rs	/^    fn security_qos_flags(&mut self, flags: u32) -> &mut Self;$/;"	P	interface:OpenOptionsExt	signature:(&mut self, flags: u32) -> &mut Self
security_qos_flags	$RUST/src/sys/pal/windows/fs.rs	/^    security_qos_flags: c::DWORD,$/;"	m	struct:OpenOptions
seek	$RUST/src/fs.rs	/^    fn seek(&mut self, pos: SeekFrom) -> io::Result<u64> {$/;"	P	implementation:File	signature:(&mut self, pos: SeekFrom) -> io::Result<u64>
seek	$RUST/src/io/buffered/bufreader.rs	/^    fn seek(&mut self, pos: SeekFrom) -> io::Result<u64> {$/;"	P	implementation:BufReader	signature:(&mut self, pos: SeekFrom) -> io::Result<u64>
seek	$RUST/src/io/buffered/bufwriter.rs	/^    fn seek(&mut self, pos: SeekFrom) -> io::Result<u64> {$/;"	P	implementation:BufWriter	signature:(&mut self, pos: SeekFrom) -> io::Result<u64>
seek	$RUST/src/io/buffered/tests.rs	/^        fn seek(&mut self, pos: SeekFrom) -> io::Result<u64> {$/;"	P	implementation:test_buffered_reader_seek_underflow::PositionReader	signature:(&mut self, pos: SeekFrom) -> io::Result<u64>
seek	$RUST/src/io/cursor.rs	/^    fn seek(&mut self, style: SeekFrom) -> io::Result<u64> {$/;"	f	signature:(&mut self, style: SeekFrom) -> io::Result<u64>
seek	$RUST/src/io/impls.rs	/^    fn seek(&mut self, pos: SeekFrom) -> io::Result<u64> {$/;"	P	implementation:S	signature:(&mut self, pos: SeekFrom) -> io::Result<u64>
seek	$RUST/src/io/mod.rs	/^    fn seek(&mut self, pos: SeekFrom) -> Result<u64>;$/;"	P	interface:Seek	signature:(&mut self, pos: SeekFrom) -> Result<u64>
seek	$RUST/src/io/util.rs	/^    fn seek(&mut self, _pos: SeekFrom) -> io::Result<u64> {$/;"	P	implementation:Empty	signature:(&mut self, _pos: SeekFrom) -> io::Result<u64>
seek	$RUST/src/sys/pal/hermit/fs.rs	/^    pub fn seek(&self, _pos: SeekFrom) -> io::Result<u64> {$/;"	P	implementation:File	signature:(&self, _pos: SeekFrom) -> io::Result<u64>
seek	$RUST/src/sys/pal/unix/fs.rs	/^    pub fn seek(&self, pos: SeekFrom) -> io::Result<u64> {$/;"	P	implementation:File	signature:(&self, pos: SeekFrom) -> io::Result<u64>
seek	$RUST/src/sys/pal/unsupported/fs.rs	/^    pub fn seek(&self, _pos: SeekFrom) -> io::Result<u64> {$/;"	P	implementation:File	signature:(&self, _pos: SeekFrom) -> io::Result<u64>
seek	$RUST/src/sys/pal/wasi/fd.rs	/^    pub fn seek(&self, pos: SeekFrom) -> io::Result<u64> {$/;"	P	implementation:WasiFd	signature:(&self, pos: SeekFrom) -> io::Result<u64>
seek	$RUST/src/sys/pal/wasi/fs.rs	/^    pub fn seek(&self, pos: SeekFrom) -> io::Result<u64> {$/;"	P	implementation:File	signature:(&self, pos: SeekFrom) -> io::Result<u64>
seek	$RUST/src/sys/pal/windows/fs.rs	/^    pub fn seek(&self, pos: SeekFrom) -> io::Result<u64> {$/;"	P	implementation:File	signature:(&self, pos: SeekFrom) -> io::Result<u64>
seek_before_0	$RUST/src/io/cursor/tests.rs	/^fn seek_before_0() {$/;"	f	signature:()
seek_len	$RUST/src/io/tests.rs	/^fn seek_len() -> io::Result<()> {$/;"	f	signature:() -> io::Result<()>
seek_past_end	$RUST/src/io/cursor/tests.rs	/^fn seek_past_end() {$/;"	f	signature:()
seek_past_i64	$RUST/src/io/cursor/tests.rs	/^fn seek_past_i64() {$/;"	f	signature:()
seek_position	$RUST/src/io/tests.rs	/^fn seek_position() -> io::Result<()> {$/;"	f	signature:() -> io::Result<()>
seek_read	$RUST/src/os/windows/fs.rs	/^    fn seek_read(&self, buf: &mut [u8], offset: u64) -> io::Result<usize>;$/;"	P	interface:FileExt	signature:(&self, buf: &mut [u8], offset: u64) -> io::Result<usize>
seek_relative	$RUST/src/io/buffered/bufreader.rs	/^    pub fn seek_relative(&mut self, offset: i64) -> io::Result<()> {$/;"	P	implementation:BufReader	signature:(&mut self, offset: i64) -> io::Result<()>
seek_relative	$RUST/src/io/mod.rs	/^    fn seek_relative(&mut self, offset: i64) -> Result<()> {$/;"	P	interface:Seek	signature:(&mut self, offset: i64) -> Result<()>
seek_write	$RUST/src/os/windows/fs.rs	/^    fn seek_write(&self, buf: &[u8], offset: u64) -> io::Result<usize>;$/;"	P	interface:FileExt	signature:(&self, buf: &[u8], offset: u64) -> io::Result<usize>
sel_registerName	$RUST/src/sys/pal/unix/args.rs	/^            fn sel_registerName(name: *const c_char) -> Sel;$/;"	f	function:imp::args	signature:(name: *const c_char) -> Sel
select	$RUST/src/sync/mpmc/context.rs	/^    select: AtomicUsize,$/;"	m	struct:Inner
select	$RUST/src/sync/mpmc/mod.rs	/^mod select;$/;"	n
select	$RUST/src/sys/pal/solid/abi/sockets.rs	/^    pub fn select($/;"	f	signature:( maxfdp1: c_int, readset: *mut fd_set, writeset: *mut fd_set, exceptset: *mut fd_set, timeout: *mut timeval, ) -> c_int
select	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn select($/;"	f	signature:( nfds: i32, readfds: *mut FD_SET, writefds: *mut FD_SET, exceptfds: *mut FD_SET, timeout: *const TIMEVAL, ) -> i32
selectors	$RUST/src/sync/mpmc/waker.rs	/^    selectors: Vec<Entry>,$/;"	m	struct:Waker
self_keyword	$RUST/src/keyword_docs.rs	/^mod self_keyword {}$/;"	n
self_referential	$RUST/src/thread/local/tests.rs	/^fn self_referential() {$/;"	f	signature:()
self_upper_keyword	$RUST/src/keyword_docs.rs	/^mod self_upper_keyword {}$/;"	n
semaphore	$RUST/src/sys/pal/unix/thread_parking/darwin.rs	/^    semaphore: dispatch_semaphore_t,$/;"	m	struct:Parker
sematr	$RUST/src/sys/pal/itron/abi.rs	/^    pub sematr: ATR,$/;"	m	struct:T_CSEM
send	$RUST/src/net/udp.rs	/^    pub fn send(&self, buf: &[u8]) -> io::Result<usize> {$/;"	P	implementation:UdpSocket	signature:(&self, buf: &[u8]) -> io::Result<usize>
send	$RUST/src/os/unix/net/datagram.rs	/^    pub fn send(&self, buf: &[u8]) -> io::Result<usize> {$/;"	P	implementation:UnixDatagram	signature:(&self, buf: &[u8]) -> io::Result<usize>
send	$RUST/src/sync/mpmc/array.rs	/^    pub(crate) fn send($/;"	P	implementation:Channel	signature:( &self, msg: T, deadline: Option<Instant>, ) -> Result<(), SendTimeoutError<T>>
send	$RUST/src/sync/mpmc/list.rs	/^    pub(crate) fn send($/;"	P	implementation:Channel	signature:( &self, msg: T, _deadline: Option<Instant>, ) -> Result<(), SendTimeoutError<T>>
send	$RUST/src/sync/mpmc/mod.rs	/^    pub fn send(&self, msg: T) -> Result<(), SendError<T>> {$/;"	P	implementation:Sender	signature:(&self, msg: T) -> Result<(), SendError<T>>
send	$RUST/src/sync/mpmc/zero.rs	/^    pub(crate) fn send($/;"	P	implementation:Channel	signature:( &self, msg: T, deadline: Option<Instant>, ) -> Result<(), SendTimeoutError<T>>
send	$RUST/src/sync/mpsc/mod.rs	/^    pub fn send(&self, t: T) -> Result<(), SendError<T>> {$/;"	P	implementation:SyncSender	signature:(&self, t: T) -> Result<(), SendError<T>>
send	$RUST/src/sync/mpsc/sync_tests.rs	/^        fn send(tx: SyncSender<Box<i32>>, i: i32) {$/;"	f	function:stream_send_recv_stress	signature:(tx: SyncSender<Box<i32>>, i: i32)
send	$RUST/src/sync/mpsc/tests.rs	/^        fn send(tx: Sender<Box<i32>>, i: i32) {$/;"	f	function:stream_send_recv_stress	signature:(tx: Sender<Box<i32>>, i: i32)
send	$RUST/src/sys/pal/sgx/abi/usercalls/mod.rs	/^pub fn send(event_set: u64, tcs: Option<Tcs>) -> IoResult<()> {$/;"	f	signature:(event_set: u64, tcs: Option<Tcs>) -> IoResult<()>
send	$RUST/src/sys/pal/sgx/net.rs	/^    pub fn send(&self, _: &[u8]) -> io::Result<usize> {$/;"	P	implementation:UdpSocket	signature:(&self, _: &[u8]) -> io::Result<usize>
send	$RUST/src/sys/pal/solid/abi/sockets.rs	/^    pub fn send(s: c_int, mem: *const c_void, len: size_t, flags: c_int) -> ssize_t;$/;"	f	signature:(s: c_int, mem: *const c_void, len: size_t, flags: c_int) -> ssize_t
send	$RUST/src/sys/pal/teeos/net.rs	/^    pub fn send(&self, _: &[u8]) -> io::Result<usize> {$/;"	P	implementation:UdpSocket	signature:(&self, _: &[u8]) -> io::Result<usize>
send	$RUST/src/sys/pal/unix/l4re.rs	/^        pub fn send(&self, _: &[u8]) -> io::Result<usize> {$/;"	P	implementation:net::UdpSocket	signature:(&self, _: &[u8]) -> io::Result<usize>
send	$RUST/src/sys/pal/unsupported/net.rs	/^    pub fn send(&self, _: &[u8]) -> io::Result<usize> {$/;"	P	implementation:UdpSocket	signature:(&self, _: &[u8]) -> io::Result<usize>
send	$RUST/src/sys/pal/wasi/net.rs	/^    pub fn send(&self, _: &[u8]) -> io::Result<usize> {$/;"	P	implementation:UdpSocket	signature:(&self, _: &[u8]) -> io::Result<usize>
send	$RUST/src/sys/pal/windows/c.rs	/^pub unsafe fn send(socket: SOCKET, buf: *const c_void, len: c_int, flags: c_int) -> c_int {$/;"	f	signature:(socket: SOCKET, buf: *const c_void, len: c_int, flags: c_int) -> c_int
send	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn send(s: SOCKET, buf: PCSTR, len: i32, flags: SEND_RECV_FLAGS) -> i32;$/;"	f	signature:(s: SOCKET, buf: PCSTR, len: i32, flags: SEND_RECV_FLAGS) -> i32
send	$RUST/src/sys/pal/xous/net/udp.rs	/^    pub fn send(&self, buf: &[u8]) -> io::Result<usize> {$/;"	P	implementation:UdpSocket	signature:(&self, buf: &[u8]) -> io::Result<usize>
send	$RUST/src/sys_common/net.rs	/^    pub fn send(&self, buf: &[u8]) -> io::Result<usize> {$/;"	P	implementation:UdpSocket	signature:(&self, buf: &[u8]) -> io::Result<usize>
send1	$RUST/src/sync/mpsc/sync_tests.rs	/^fn send1() {$/;"	f	signature:()
send2	$RUST/src/sync/mpsc/sync_tests.rs	/^fn send2() {$/;"	f	signature:()
send3	$RUST/src/sync/mpsc/sync_tests.rs	/^fn send3() {$/;"	f	signature:()
send4	$RUST/src/sync/mpsc/sync_tests.rs	/^fn send4() {$/;"	f	signature:()
send_deadline	$RUST/src/sync/mpmc/mod.rs	/^    pub fn send_deadline(&self, msg: T, deadline: Instant) -> Result<(), SendTimeoutError<T>> {$/;"	P	implementation:Sender	signature:(&self, msg: T, deadline: Instant) -> Result<(), SendTimeoutError<T>>
send_from_outside_runtime	$RUST/src/sync/mpsc/tests.rs	/^fn send_from_outside_runtime() {$/;"	f	signature:()
send_msg	$RUST/src/sys/pal/unix/net.rs	/^    pub fn send_msg(&self, msg: &mut libc::msghdr) -> io::Result<usize> {$/;"	P	implementation:Socket	signature:(&self, msg: &mut libc::msghdr) -> io::Result<usize>
send_pidfd	$RUST/src/sys/pal/unix/process/process_unix.rs	/^    fn send_pidfd(&self, sock: &crate::sys::net::Socket) {$/;"	P	implementation:Command	signature:(&self, sock: &crate::sys::net::Socket)
send_timeout	$RUST/src/sync/mpmc/mod.rs	/^    pub fn send_timeout(&self, msg: T, timeout: Duration) -> Result<(), SendTimeoutError<T>> {$/;"	P	implementation:Sender	signature:(&self, msg: T, timeout: Duration) -> Result<(), SendTimeoutError<T>>
send_timeout	$RUST/src/sync/mpsc/mod.rs	/^    fn send_timeout(&self, t: T, timeout: Duration) -> Result<(), mpmc::SendTimeoutError<T>> {$/;"	P	implementation:SyncSender	signature:(&self, t: T, timeout: Duration) -> Result<(), mpmc::SendTimeoutError<T>>
send_timeout	$RUST/src/sync/mpsc/sync_tests.rs	/^fn send_timeout() {$/;"	f	signature:()
send_to	$RUST/src/net/udp.rs	/^    pub fn send_to<A: ToSocketAddrs>(&self, buf: &[u8], addr: A) -> io::Result<usize> {$/;"	P	implementation:UdpSocket	signature:<A: ToSocketAddrs>(&self, buf: &[u8], addr: A) -> io::Result<usize>
send_to	$RUST/src/os/unix/net/datagram.rs	/^    pub fn send_to<P: AsRef<Path>>(&self, buf: &[u8], path: P) -> io::Result<usize> {$/;"	P	implementation:UnixDatagram	signature:<P: AsRef<Path>>(&self, buf: &[u8], path: P) -> io::Result<usize>
send_to	$RUST/src/sys/pal/sgx/net.rs	/^    pub fn send_to(&self, _: &[u8], _: &SocketAddr) -> io::Result<usize> {$/;"	P	implementation:UdpSocket	signature:(&self, _: &[u8], _: &SocketAddr) -> io::Result<usize>
send_to	$RUST/src/sys/pal/teeos/net.rs	/^    pub fn send_to(&self, _: &[u8], _: &SocketAddr) -> io::Result<usize> {$/;"	P	implementation:UdpSocket	signature:(&self, _: &[u8], _: &SocketAddr) -> io::Result<usize>
send_to	$RUST/src/sys/pal/unix/l4re.rs	/^        pub fn send_to(&self, _: &[u8], _: &SocketAddr) -> io::Result<usize> {$/;"	P	implementation:net::UdpSocket	signature:(&self, _: &[u8], _: &SocketAddr) -> io::Result<usize>
send_to	$RUST/src/sys/pal/unsupported/net.rs	/^    pub fn send_to(&self, _: &[u8], _: &SocketAddr) -> io::Result<usize> {$/;"	P	implementation:UdpSocket	signature:(&self, _: &[u8], _: &SocketAddr) -> io::Result<usize>
send_to	$RUST/src/sys/pal/wasi/net.rs	/^    pub fn send_to(&self, _: &[u8], _: &SocketAddr) -> io::Result<usize> {$/;"	P	implementation:UdpSocket	signature:(&self, _: &[u8], _: &SocketAddr) -> io::Result<usize>
send_to	$RUST/src/sys/pal/xous/net/udp.rs	/^    pub fn send_to(&self, buf: &[u8], addr: &SocketAddr) -> io::Result<usize> {$/;"	P	implementation:UdpSocket	signature:(&self, buf: &[u8], addr: &SocketAddr) -> io::Result<usize>
send_to	$RUST/src/sys_common/net.rs	/^    pub fn send_to(&self, buf: &[u8], dst: &SocketAddr) -> io::Result<usize> {$/;"	P	implementation:UdpSocket	signature:(&self, buf: &[u8], dst: &SocketAddr) -> io::Result<usize>
send_to_addr	$RUST/src/os/unix/net/datagram.rs	/^    pub fn send_to_addr(&self, buf: &[u8], socket_addr: &SocketAddr) -> io::Result<usize> {$/;"	P	implementation:UnixDatagram	signature:(&self, buf: &[u8], socket_addr: &SocketAddr) -> io::Result<usize>
send_vectored_with_ancillary	$RUST/src/os/unix/net/datagram.rs	/^    pub fn send_vectored_with_ancillary($/;"	P	implementation:UnixDatagram	signature:( &self, bufs: &[IoSlice<'_>], ancillary: &mut SocketAncillary<'_>, ) -> io::Result<usize>
send_vectored_with_ancillary	$RUST/src/os/unix/net/stream.rs	/^    pub fn send_vectored_with_ancillary($/;"	P	implementation:UnixStream	signature:( &self, bufs: &[IoSlice<'_>], ancillary: &mut SocketAncillary<'_>, ) -> io::Result<usize>
send_vectored_with_ancillary_to	$RUST/src/os/unix/net/ancillary.rs	/^pub(super) fn send_vectored_with_ancillary_to($/;"	f	signature:( socket: &Socket, path: Option<&Path>, bufs: &[IoSlice<'_>], ancillary: &mut SocketAncillary<'_>, ) -> io::Result<usize>
send_vectored_with_ancillary_to	$RUST/src/os/unix/net/datagram.rs	/^    pub fn send_vectored_with_ancillary_to<P: AsRef<Path>>($/;"	P	implementation:UnixDatagram	signature:<P: AsRef<Path>>( &self, bufs: &[IoSlice<'_>], ancillary: &mut SocketAncillary<'_>, path: P, ) -> io::Result<usize>
senders	$RUST/src/sync/mpmc/array.rs	/^    senders: SyncWaker,$/;"	m	struct:Channel
senders	$RUST/src/sync/mpmc/counter.rs	/^    senders: AtomicUsize,$/;"	m	struct:Counter
senders	$RUST/src/sync/mpmc/zero.rs	/^    senders: Waker,$/;"	m	struct:Inner
sendfile_splice	$RUST/src/sys/pal/unix/kernel_copy.rs	/^fn sendfile_splice(mode: SpliceMode, reader: RawFd, writer: RawFd, len: u64) -> CopyResult {$/;"	f	signature:(mode: SpliceMode, reader: RawFd, writer: RawFd, len: u64) -> CopyResult
sendmsg	$RUST/src/sys/pal/solid/abi/sockets.rs	/^    pub fn sendmsg(s: c_int, message: *const msghdr, flags: c_int) -> ssize_t;$/;"	f	signature:(s: c_int, message: *const msghdr, flags: c_int) -> ssize_t
sendto	$RUST/src/sys/pal/solid/abi/sockets.rs	/^    pub fn sendto($/;"	f	signature:( s: c_int, mem: *const c_void, len: size_t, flags: c_int, to: *const sockaddr, tolen: socklen_t, ) -> ssize_t
sendto	$RUST/src/sys/pal/windows/c.rs	/^pub unsafe fn sendto($/;"	f	signature:( socket: SOCKET, buf: *const c_void, len: c_int, flags: c_int, addr: *const SOCKADDR, addrlen: c_int, ) -> c_int
sendto	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn sendto($/;"	f	signature:( s: SOCKET, buf: PCSTR, len: i32, flags: i32, to: *const SOCKADDR, tolen: i32, ) -> i32
services	$RUST/src/os/xous/mod.rs	/^pub mod services;$/;"	n
set	$RUST/src/collections/hash/mod.rs	/^pub mod set;$/;"	n
set	$RUST/src/collections/hash/set.rs	/^    fn set<'new>(v: HashSet<&'static str>) -> HashSet<&'new str> {$/;"	f	function:assert_covariance	signature:<'new>(v: HashSet<&'static str>) -> HashSet<&'new str>
set	$RUST/src/sync/once_lock.rs	/^    pub fn set(&self, value: T) -> Result<(), T> {$/;"	P	implementation:OnceLock	signature:(&self, value: T) -> Result<(), T>
set	$RUST/src/sys/pal/sgx/abi/tls/mod.rs	/^    pub fn set(key: Key, value: *mut u8) {$/;"	P	implementation:Tls	signature:(key: Key, value: *mut u8)
set	$RUST/src/sys/pal/sgx/abi/tls/sync_bitset.rs	/^    pub fn set(&self) -> Option<usize> {$/;"	P	implementation:SyncBitset	signature:(&self) -> Option<usize>
set	$RUST/src/sys/pal/sgx/thread_local_key.rs	/^pub unsafe fn set(key: Key, value: *mut u8) {$/;"	f	signature:(key: Key, value: *mut u8)
set	$RUST/src/sys/pal/solid/thread_local_key.rs	/^pub unsafe fn set(_key: Key, _value: *mut u8) {$/;"	f	signature:(_key: Key, _value: *mut u8)
set	$RUST/src/sys/pal/unix/thread_local_key.rs	/^pub unsafe fn set(key: Key, value: *mut u8) {$/;"	f	signature:(key: Key, value: *mut u8)
set	$RUST/src/sys/pal/unsupported/thread_local_key.rs	/^pub unsafe fn set(_key: Key, _value: *mut u8) {$/;"	f	signature:(_key: Key, _value: *mut u8)
set	$RUST/src/sys/pal/windows/thread_local_key.rs	/^    pub unsafe fn set(&'static self, val: *mut u8) {$/;"	P	implementation:StaticKey	signature:(&'static self, val: *mut u8)
set	$RUST/src/sys/pal/windows/time.rs	/^    pub fn set(&self, duration: Duration) -> Result<(), ()> {$/;"	P	implementation:WaitableTimer	signature:(&self, duration: Duration) -> Result<(), ()>
set	$RUST/src/sys/pal/xous/thread_local_key.rs	/^pub unsafe fn set(key: Key, value: *mut u8) {$/;"	f	signature:(key: Key, value: *mut u8)
set	$RUST/src/sys/pal/zkvm/thread_local_key.rs	/^pub unsafe fn set(key: Key, value: *mut u8) {$/;"	f	signature:(key: Key, value: *mut u8)
set	$RUST/src/sys_common/process.rs	/^    pub fn set(&mut self, key: &OsStr, value: &OsStr) {$/;"	P	implementation:CommandEnv	signature:(&mut self, key: &OsStr, value: &OsStr)
set	$RUST/src/sys_common/thread_info.rs	/^pub fn set(stack_guard: Option<Guard>, thread: Thread) {$/;"	f	signature:(stack_guard: Option<Guard>, thread: Thread)
set	$RUST/src/sys_common/thread_local_key.rs	/^    pub unsafe fn set(&self, val: *mut u8) {$/;"	P	implementation:StaticKey	signature:(&self, val: *mut u8)
set	$RUST/src/thread/local.rs	/^    pub fn set(&'static self, value: T) {$/;"	P	implementation:LocalKey	signature:(&'static self, value: T)
set_accessed	$RUST/src/fs.rs	/^    pub fn set_accessed(mut self, t: SystemTime) -> Self {$/;"	P	implementation:FileTimes	signature:(mut self, t: SystemTime) -> Self
set_accessed	$RUST/src/sys/pal/hermit/fs.rs	/^    pub fn set_accessed(&mut self, _t: SystemTime) {}$/;"	P	implementation:FileTimes	signature:(&mut self, _t: SystemTime)
set_accessed	$RUST/src/sys/pal/solid/fs.rs	/^    pub fn set_accessed(&mut self, _t: SystemTime) {}$/;"	P	implementation:FileTimes	signature:(&mut self, _t: SystemTime)
set_accessed	$RUST/src/sys/pal/unix/fs.rs	/^    pub fn set_accessed(&mut self, t: SystemTime) {$/;"	P	implementation:FileTimes	signature:(&mut self, t: SystemTime)
set_accessed	$RUST/src/sys/pal/unsupported/fs.rs	/^    pub fn set_accessed(&mut self, _t: SystemTime) {}$/;"	P	implementation:FileTimes	signature:(&mut self, _t: SystemTime)
set_accessed	$RUST/src/sys/pal/wasi/fs.rs	/^    pub fn set_accessed(&mut self, t: SystemTime) {$/;"	P	implementation:FileTimes	signature:(&mut self, t: SystemTime)
set_accessed	$RUST/src/sys/pal/windows/fs.rs	/^    pub fn set_accessed(&mut self, t: SystemTime) {$/;"	P	implementation:FileTimes	signature:(&mut self, t: SystemTime)
set_alloc_error_hook	$RUST/src/alloc.rs	/^pub fn set_alloc_error_hook(hook: fn(Layout)) {$/;"	f	signature:(hook: fn(Layout))
set_always_abort	$RUST/src/panicking.rs	/^    pub fn set_always_abort() {}$/;"	f	module:panic_count	signature:()
set_arg_0	$RUST/src/sys/pal/unix/process/process_common.rs	/^    pub fn set_arg_0(&mut self, arg: &OsStr) {$/;"	P	implementation:Command	signature:(&mut self, arg: &OsStr)
set_backtrace_style	$RUST/src/panic.rs	/^pub fn set_backtrace_style(style: BacktraceStyle) {$/;"	f	signature:(style: BacktraceStyle)
set_broadcast	$RUST/src/net/udp.rs	/^    pub fn set_broadcast(&self, broadcast: bool) -> io::Result<()> {$/;"	P	implementation:UdpSocket	signature:(&self, broadcast: bool) -> io::Result<()>
set_broadcast	$RUST/src/sys/pal/sgx/net.rs	/^    pub fn set_broadcast(&self, _: bool) -> io::Result<()> {$/;"	P	implementation:UdpSocket	signature:(&self, _: bool) -> io::Result<()>
set_broadcast	$RUST/src/sys/pal/teeos/net.rs	/^    pub fn set_broadcast(&self, _: bool) -> io::Result<()> {$/;"	P	implementation:UdpSocket	signature:(&self, _: bool) -> io::Result<()>
set_broadcast	$RUST/src/sys/pal/unix/l4re.rs	/^        pub fn set_broadcast(&self, _: bool) -> io::Result<()> {$/;"	P	implementation:net::UdpSocket	signature:(&self, _: bool) -> io::Result<()>
set_broadcast	$RUST/src/sys/pal/unsupported/net.rs	/^    pub fn set_broadcast(&self, _: bool) -> io::Result<()> {$/;"	P	implementation:UdpSocket	signature:(&self, _: bool) -> io::Result<()>
set_broadcast	$RUST/src/sys/pal/wasi/net.rs	/^    pub fn set_broadcast(&self, _: bool) -> io::Result<()> {$/;"	P	implementation:UdpSocket	signature:(&self, _: bool) -> io::Result<()>
set_broadcast	$RUST/src/sys/pal/xous/net/udp.rs	/^    pub fn set_broadcast(&self, _: bool) -> io::Result<()> {$/;"	P	implementation:UdpSocket	signature:(&self, _: bool) -> io::Result<()>
set_broadcast	$RUST/src/sys_common/net.rs	/^    pub fn set_broadcast(&self, broadcast: bool) -> io::Result<()> {$/;"	P	implementation:UdpSocket	signature:(&self, broadcast: bool) -> io::Result<()>
set_cloexec	$RUST/src/sys/pal/hermit/fd.rs	/^    pub fn set_cloexec(&self) -> io::Result<()> {$/;"	P	implementation:FileDesc	signature:(&self) -> io::Result<()>
set_cloexec	$RUST/src/sys/pal/unix/fd.rs	/^    pub fn set_cloexec(&self) -> io::Result<()> {$/;"	P	implementation:FileDesc	signature:(&self) -> io::Result<()>
set_created	$RUST/src/os/ios/fs.rs	/^    fn set_created(self, t: SystemTime) -> Self;$/;"	P	interface:FileTimesExt	signature:(self, t: SystemTime) -> Self
set_created	$RUST/src/os/macos/fs.rs	/^    fn set_created(self, t: SystemTime) -> Self;$/;"	P	interface:FileTimesExt	signature:(self, t: SystemTime) -> Self
set_created	$RUST/src/os/watchos/fs.rs	/^    fn set_created(self, t: SystemTime) -> Self;$/;"	P	interface:FileTimesExt	signature:(self, t: SystemTime) -> Self
set_created	$RUST/src/os/windows/fs.rs	/^    fn set_created(self, t: SystemTime) -> Self;$/;"	P	interface:FileTimesExt	signature:(self, t: SystemTime) -> Self
set_created	$RUST/src/sys/pal/unix/fs.rs	/^    pub fn set_created(&mut self, t: SystemTime) {$/;"	P	implementation:FileTimes	signature:(&mut self, t: SystemTime)
set_created	$RUST/src/sys/pal/windows/fs.rs	/^    pub fn set_created(&mut self, t: SystemTime) {$/;"	P	implementation:FileTimes	signature:(&mut self, t: SystemTime)
set_current_dir	$RUST/src/env.rs	/^pub fn set_current_dir<P: AsRef<Path>>(path: P) -> io::Result<()> {$/;"	f	signature:<P: AsRef<Path>>(path: P) -> io::Result<()>
set_current_dir_works	$RUST/src/process/tests.rs	/^fn set_current_dir_works() {$/;"	f	signature:()
set_difference	$RUST/benches/hash/set_ops.rs	/^fn set_difference(b: &mut Bencher) {$/;"	f	signature:(b: &mut Bencher)
set_errno	$RUST/src/sys/pal/unix/os.rs	/^pub fn set_errno(e: i32) {$/;"	f	signature:(e: i32)
set_extension	$RUST/src/path.rs	/^    pub fn set_extension<S: AsRef<OsStr>>(&mut self, extension: S) -> bool {$/;"	P	implementation:PathBuf	signature:<S: AsRef<OsStr>>(&mut self, extension: S) -> bool
set_file_information_by_handle	$RUST/src/sys/pal/windows/api.rs	/^pub fn set_file_information_by_handle<T: SetFileInformation>($/;"	f	signature:<T: SetFileInformation>( handle: c::HANDLE, info: &T, ) -> Result<(), WinError>
set_file_name	$RUST/src/path.rs	/^    pub fn set_file_name<S: AsRef<OsStr>>(&mut self, file_name: S) {$/;"	P	implementation:PathBuf	signature:<S: AsRef<OsStr>>(&mut self, file_name: S)
set_flags	$RUST/src/sys/pal/wasi/fd.rs	/^    pub fn set_flags(&self, flags: wasi::Fdflags) -> io::Result<()> {$/;"	P	implementation:WasiFd	signature:(&self, flags: wasi::Fdflags) -> io::Result<()>
set_flg	$RUST/src/sys/pal/itron/abi.rs	/^    pub fn set_flg(flgid: ID, setptn: FLGPTN) -> ER;$/;"	f	signature:(flgid: ID, setptn: FLGPTN) -> ER
set_flowinfo	$RUST/src/net/socket_addr/tests.rs	/^fn set_flowinfo() {$/;"	f	signature:()
set_get_clear	$RUST/src/sys/pal/sgx/abi/tls/sync_bitset/tests.rs	/^fn set_get_clear() {$/;"	f	signature:()
set_get_unix_permissions	$RUST/src/fs/tests.rs	/^fn set_get_unix_permissions() {$/;"	f	signature:()
set_gid	$RUST/src/os/unix/net/ancillary.rs	/^    pub fn set_gid(&mut self, gid: libc::gid_t) {$/;"	P	implementation:SocketCred	signature:(&mut self, gid: libc::gid_t)
set_hook	$RUST/src/panicking.rs	/^pub fn set_hook(hook: Box<dyn Fn(&PanicInfo<'_>) + 'static + Sync + Send>) {$/;"	f	signature:(hook: Box<dyn Fn(&PanicInfo<'_>) + 'static + Sync + Send>)
set_image_base	$RUST/src/sys_common/backtrace.rs	/^pub fn set_image_base() {$/;"	f	signature:()
set_info	$RUST/src/sys/pal/windows/api.rs	/^    unsafe fn set_info($/;"	f	function:set_file_information_by_handle	signature:( handle: c::HANDLE, class: i32, info: *const c_void, size: u32, ) -> Result<(), WinError>
set_intersection	$RUST/benches/hash/set_ops.rs	/^fn set_intersection(b: &mut Bencher) {$/;"	f	signature:(b: &mut Bencher)
set_ip	$RUST/src/net/socket_addr/tests.rs	/^fn set_ip() {$/;"	f	signature:()
set_is_subset	$RUST/benches/hash/set_ops.rs	/^fn set_is_subset(b: &mut Bencher) {$/;"	f	signature:(b: &mut Bencher)
set_len	$RUST/src/fs.rs	/^    pub fn set_len(&self, size: u64) -> io::Result<()> {$/;"	P	implementation:File	signature:(&self, size: u64) -> io::Result<()>
set_limit	$RUST/src/io/mod.rs	/^    pub fn set_limit(&mut self, limit: u64) {$/;"	P	implementation:Take	signature:(&mut self, limit: u64)
set_linger	$RUST/src/net/tcp.rs	/^    pub fn set_linger(&self, linger: Option<Duration>) -> io::Result<()> {$/;"	P	implementation:TcpStream	signature:(&self, linger: Option<Duration>) -> io::Result<()>
set_linger	$RUST/src/sys/pal/hermit/net.rs	/^    pub fn set_linger(&self, linger: Option<Duration>) -> io::Result<()> {$/;"	P	implementation:Socket	signature:(&self, linger: Option<Duration>) -> io::Result<()>
set_linger	$RUST/src/sys/pal/sgx/net.rs	/^    pub fn set_linger(&self, _: Option<Duration>) -> io::Result<()> {$/;"	P	implementation:TcpStream	signature:(&self, _: Option<Duration>) -> io::Result<()>
set_linger	$RUST/src/sys/pal/solid/net.rs	/^    pub fn set_linger(&self, linger: Option<Duration>) -> io::Result<()> {$/;"	P	implementation:Socket	signature:(&self, linger: Option<Duration>) -> io::Result<()>
set_linger	$RUST/src/sys/pal/teeos/net.rs	/^    pub fn set_linger(&self, _: Option<Duration>) -> io::Result<()> {$/;"	P	implementation:TcpStream	signature:(&self, _: Option<Duration>) -> io::Result<()>
set_linger	$RUST/src/sys/pal/unix/l4re.rs	/^        pub fn set_linger(&self, _: Option<Duration>) -> io::Result<()> {$/;"	P	implementation:net::TcpStream	signature:(&self, _: Option<Duration>) -> io::Result<()>
set_linger	$RUST/src/sys/pal/unix/net.rs	/^    pub fn set_linger(&self, linger: Option<Duration>) -> io::Result<()> {$/;"	P	implementation:Socket	signature:(&self, linger: Option<Duration>) -> io::Result<()>
set_linger	$RUST/src/sys/pal/unsupported/net.rs	/^    pub fn set_linger(&self, _: Option<Duration>) -> io::Result<()> {$/;"	P	implementation:TcpStream	signature:(&self, _: Option<Duration>) -> io::Result<()>
set_linger	$RUST/src/sys/pal/wasi/net.rs	/^    pub fn set_linger(&self, _: Option<Duration>) -> io::Result<()> {$/;"	P	implementation:TcpStream	signature:(&self, _: Option<Duration>) -> io::Result<()>
set_linger	$RUST/src/sys/pal/windows/net.rs	/^    pub fn set_linger(&self, linger: Option<Duration>) -> io::Result<()> {$/;"	P	implementation:Socket	signature:(&self, linger: Option<Duration>) -> io::Result<()>
set_linger	$RUST/src/sys/pal/xous/net/tcpstream.rs	/^    pub fn set_linger(&self, _: Option<Duration>) -> io::Result<()> {$/;"	P	implementation:TcpStream	signature:(&self, _: Option<Duration>) -> io::Result<()>
set_linger	$RUST/src/sys_common/net.rs	/^    pub fn set_linger(&self, linger: Option<Duration>) -> io::Result<()> {$/;"	P	implementation:TcpStream	signature:(&self, linger: Option<Duration>) -> io::Result<()>
set_mark	$RUST/src/os/unix/net/datagram.rs	/^    pub fn set_mark(&self, mark: u32) -> io::Result<()> {$/;"	P	implementation:UnixDatagram	signature:(&self, mark: u32) -> io::Result<()>
set_mark	$RUST/src/os/unix/net/stream.rs	/^    pub fn set_mark(&self, mark: u32) -> io::Result<()> {$/;"	P	implementation:UnixStream	signature:(&self, mark: u32) -> io::Result<()>
set_mark	$RUST/src/sys/pal/unix/net.rs	/^    pub fn set_mark(&self, mark: u32) -> io::Result<()> {$/;"	P	implementation:Socket	signature:(&self, mark: u32) -> io::Result<()>
set_mode	$RUST/src/os/unix/fs.rs	/^    fn set_mode(&mut self, mode: u32);$/;"	P	interface:PermissionsExt	signature:(&mut self, mode: u32)
set_mode	$RUST/src/sys/pal/unix/fs.rs	/^    pub fn set_mode(&mut self, mode: u32) {$/;"	P	implementation:DirBuilder	signature:(&mut self, mode: u32)
set_modified	$RUST/src/fs.rs	/^    pub fn set_modified(mut self, t: SystemTime) -> Self {$/;"	P	implementation:FileTimes	signature:(mut self, t: SystemTime) -> Self
set_modified	$RUST/src/sys/pal/hermit/fs.rs	/^    pub fn set_modified(&mut self, _t: SystemTime) {}$/;"	P	implementation:FileTimes	signature:(&mut self, _t: SystemTime)
set_modified	$RUST/src/sys/pal/solid/fs.rs	/^    pub fn set_modified(&mut self, _t: SystemTime) {}$/;"	P	implementation:FileTimes	signature:(&mut self, _t: SystemTime)
set_modified	$RUST/src/sys/pal/unix/fs.rs	/^    pub fn set_modified(&mut self, t: SystemTime) {$/;"	P	implementation:FileTimes	signature:(&mut self, t: SystemTime)
set_modified	$RUST/src/sys/pal/unsupported/fs.rs	/^    pub fn set_modified(&mut self, _t: SystemTime) {}$/;"	P	implementation:FileTimes	signature:(&mut self, _t: SystemTime)
set_modified	$RUST/src/sys/pal/wasi/fs.rs	/^    pub fn set_modified(&mut self, t: SystemTime) {$/;"	P	implementation:FileTimes	signature:(&mut self, t: SystemTime)
set_modified	$RUST/src/sys/pal/windows/fs.rs	/^    pub fn set_modified(&mut self, t: SystemTime) {$/;"	P	implementation:FileTimes	signature:(&mut self, t: SystemTime)
set_multicast_loop_v4	$RUST/src/net/udp.rs	/^    pub fn set_multicast_loop_v4(&self, multicast_loop_v4: bool) -> io::Result<()> {$/;"	P	implementation:UdpSocket	signature:(&self, multicast_loop_v4: bool) -> io::Result<()>
set_multicast_loop_v4	$RUST/src/sys/pal/sgx/net.rs	/^    pub fn set_multicast_loop_v4(&self, _: bool) -> io::Result<()> {$/;"	P	implementation:UdpSocket	signature:(&self, _: bool) -> io::Result<()>
set_multicast_loop_v4	$RUST/src/sys/pal/teeos/net.rs	/^    pub fn set_multicast_loop_v4(&self, _: bool) -> io::Result<()> {$/;"	P	implementation:UdpSocket	signature:(&self, _: bool) -> io::Result<()>
set_multicast_loop_v4	$RUST/src/sys/pal/unix/l4re.rs	/^        pub fn set_multicast_loop_v4(&self, _: bool) -> io::Result<()> {$/;"	P	implementation:net::UdpSocket	signature:(&self, _: bool) -> io::Result<()>
set_multicast_loop_v4	$RUST/src/sys/pal/unsupported/net.rs	/^    pub fn set_multicast_loop_v4(&self, _: bool) -> io::Result<()> {$/;"	P	implementation:UdpSocket	signature:(&self, _: bool) -> io::Result<()>
set_multicast_loop_v4	$RUST/src/sys/pal/wasi/net.rs	/^    pub fn set_multicast_loop_v4(&self, _: bool) -> io::Result<()> {$/;"	P	implementation:UdpSocket	signature:(&self, _: bool) -> io::Result<()>
set_multicast_loop_v4	$RUST/src/sys/pal/xous/net/udp.rs	/^    pub fn set_multicast_loop_v4(&self, _: bool) -> io::Result<()> {$/;"	P	implementation:UdpSocket	signature:(&self, _: bool) -> io::Result<()>
set_multicast_loop_v4	$RUST/src/sys_common/net.rs	/^    pub fn set_multicast_loop_v4(&self, multicast_loop_v4: bool) -> io::Result<()> {$/;"	P	implementation:UdpSocket	signature:(&self, multicast_loop_v4: bool) -> io::Result<()>
set_multicast_loop_v6	$RUST/src/net/udp.rs	/^    pub fn set_multicast_loop_v6(&self, multicast_loop_v6: bool) -> io::Result<()> {$/;"	P	implementation:UdpSocket	signature:(&self, multicast_loop_v6: bool) -> io::Result<()>
set_multicast_loop_v6	$RUST/src/sys/pal/sgx/net.rs	/^    pub fn set_multicast_loop_v6(&self, _: bool) -> io::Result<()> {$/;"	P	implementation:UdpSocket	signature:(&self, _: bool) -> io::Result<()>
set_multicast_loop_v6	$RUST/src/sys/pal/teeos/net.rs	/^    pub fn set_multicast_loop_v6(&self, _: bool) -> io::Result<()> {$/;"	P	implementation:UdpSocket	signature:(&self, _: bool) -> io::Result<()>
set_multicast_loop_v6	$RUST/src/sys/pal/unix/l4re.rs	/^        pub fn set_multicast_loop_v6(&self, _: bool) -> io::Result<()> {$/;"	P	implementation:net::UdpSocket	signature:(&self, _: bool) -> io::Result<()>
set_multicast_loop_v6	$RUST/src/sys/pal/unsupported/net.rs	/^    pub fn set_multicast_loop_v6(&self, _: bool) -> io::Result<()> {$/;"	P	implementation:UdpSocket	signature:(&self, _: bool) -> io::Result<()>
set_multicast_loop_v6	$RUST/src/sys/pal/wasi/net.rs	/^    pub fn set_multicast_loop_v6(&self, _: bool) -> io::Result<()> {$/;"	P	implementation:UdpSocket	signature:(&self, _: bool) -> io::Result<()>
set_multicast_loop_v6	$RUST/src/sys/pal/xous/net/udp.rs	/^    pub fn set_multicast_loop_v6(&self, _: bool) -> io::Result<()> {$/;"	P	implementation:UdpSocket	signature:(&self, _: bool) -> io::Result<()>
set_multicast_loop_v6	$RUST/src/sys_common/net.rs	/^    pub fn set_multicast_loop_v6(&self, multicast_loop_v6: bool) -> io::Result<()> {$/;"	P	implementation:UdpSocket	signature:(&self, multicast_loop_v6: bool) -> io::Result<()>
set_multicast_ttl_v4	$RUST/src/net/udp.rs	/^    pub fn set_multicast_ttl_v4(&self, multicast_ttl_v4: u32) -> io::Result<()> {$/;"	P	implementation:UdpSocket	signature:(&self, multicast_ttl_v4: u32) -> io::Result<()>
set_multicast_ttl_v4	$RUST/src/sys/pal/sgx/net.rs	/^    pub fn set_multicast_ttl_v4(&self, _: u32) -> io::Result<()> {$/;"	P	implementation:UdpSocket	signature:(&self, _: u32) -> io::Result<()>
set_multicast_ttl_v4	$RUST/src/sys/pal/teeos/net.rs	/^    pub fn set_multicast_ttl_v4(&self, _: u32) -> io::Result<()> {$/;"	P	implementation:UdpSocket	signature:(&self, _: u32) -> io::Result<()>
set_multicast_ttl_v4	$RUST/src/sys/pal/unix/l4re.rs	/^        pub fn set_multicast_ttl_v4(&self, _: u32) -> io::Result<()> {$/;"	P	implementation:net::UdpSocket	signature:(&self, _: u32) -> io::Result<()>
set_multicast_ttl_v4	$RUST/src/sys/pal/unsupported/net.rs	/^    pub fn set_multicast_ttl_v4(&self, _: u32) -> io::Result<()> {$/;"	P	implementation:UdpSocket	signature:(&self, _: u32) -> io::Result<()>
set_multicast_ttl_v4	$RUST/src/sys/pal/wasi/net.rs	/^    pub fn set_multicast_ttl_v4(&self, _: u32) -> io::Result<()> {$/;"	P	implementation:UdpSocket	signature:(&self, _: u32) -> io::Result<()>
set_multicast_ttl_v4	$RUST/src/sys/pal/xous/net/udp.rs	/^    pub fn set_multicast_ttl_v4(&self, _: u32) -> io::Result<()> {$/;"	P	implementation:UdpSocket	signature:(&self, _: u32) -> io::Result<()>
set_multicast_ttl_v4	$RUST/src/sys_common/net.rs	/^    pub fn set_multicast_ttl_v4(&self, multicast_ttl_v4: u32) -> io::Result<()> {$/;"	P	implementation:UdpSocket	signature:(&self, multicast_ttl_v4: u32) -> io::Result<()>
set_name	$RUST/src/sys/pal/hermit/thread.rs	/^    pub fn set_name(_name: &CStr) {$/;"	P	implementation:Thread	signature:(_name: &CStr)
set_name	$RUST/src/sys/pal/itron/thread.rs	/^    pub fn set_name(_name: &CStr) {$/;"	P	implementation:Thread	signature:(_name: &CStr)
set_name	$RUST/src/sys/pal/sgx/thread.rs	/^    pub fn set_name(_name: &CStr) {$/;"	P	implementation:Thread	signature:(_name: &CStr)
set_name	$RUST/src/sys/pal/teeos/thread.rs	/^    pub fn set_name(_name: &CStr) {$/;"	P	implementation:Thread	signature:(_name: &CStr)
set_name	$RUST/src/sys/pal/unix/thread.rs	/^    pub fn set_name(name: &CStr) {$/;"	P	implementation:Thread	signature:(name: &CStr)
set_name	$RUST/src/sys/pal/unsupported/thread.rs	/^    pub fn set_name(_name: &CStr) {$/;"	P	implementation:Thread	signature:(_name: &CStr)
set_name	$RUST/src/sys/pal/wasi/thread.rs	/^    pub fn set_name(_name: &CStr) {$/;"	P	implementation:Thread	signature:(_name: &CStr)
set_name	$RUST/src/sys/pal/wasm/atomics/thread.rs	/^    pub fn set_name(_name: &CStr) {}$/;"	P	implementation:Thread	signature:(_name: &CStr)
set_name	$RUST/src/sys/pal/windows/thread.rs	/^    pub fn set_name(name: &CStr) {$/;"	P	implementation:Thread	signature:(name: &CStr)
set_name	$RUST/src/sys/pal/xous/thread.rs	/^    pub fn set_name(_name: &CStr) {$/;"	P	implementation:Thread	signature:(_name: &CStr)
set_no_inherit	$RUST/src/os/windows/io/socket.rs	/^    pub(crate) fn set_no_inherit(&self) -> io::Result<()> {$/;"	P	implementation:OwnedSocket	signature:(&self) -> io::Result<()>
set_nodelay	$RUST/src/net/tcp.rs	/^    pub fn set_nodelay(&self, nodelay: bool) -> io::Result<()> {$/;"	P	implementation:TcpStream	signature:(&self, nodelay: bool) -> io::Result<()>
set_nodelay	$RUST/src/sys/pal/hermit/net.rs	/^    pub fn set_nodelay(&self, nodelay: bool) -> io::Result<()> {$/;"	P	implementation:Socket	signature:(&self, nodelay: bool) -> io::Result<()>
set_nodelay	$RUST/src/sys/pal/sgx/net.rs	/^    pub fn set_nodelay(&self, _: bool) -> io::Result<()> {$/;"	P	implementation:TcpStream	signature:(&self, _: bool) -> io::Result<()>
set_nodelay	$RUST/src/sys/pal/solid/net.rs	/^    pub fn set_nodelay(&self, nodelay: bool) -> io::Result<()> {$/;"	P	implementation:Socket	signature:(&self, nodelay: bool) -> io::Result<()>
set_nodelay	$RUST/src/sys/pal/teeos/net.rs	/^    pub fn set_nodelay(&self, _: bool) -> io::Result<()> {$/;"	P	implementation:TcpStream	signature:(&self, _: bool) -> io::Result<()>
set_nodelay	$RUST/src/sys/pal/unix/l4re.rs	/^        pub fn set_nodelay(&self, _: bool) -> io::Result<()> {$/;"	P	implementation:net::TcpStream	signature:(&self, _: bool) -> io::Result<()>
set_nodelay	$RUST/src/sys/pal/unix/net.rs	/^    pub fn set_nodelay(&self, nodelay: bool) -> io::Result<()> {$/;"	P	implementation:Socket	signature:(&self, nodelay: bool) -> io::Result<()>
set_nodelay	$RUST/src/sys/pal/unsupported/net.rs	/^    pub fn set_nodelay(&self, _: bool) -> io::Result<()> {$/;"	P	implementation:TcpStream	signature:(&self, _: bool) -> io::Result<()>
set_nodelay	$RUST/src/sys/pal/wasi/net.rs	/^    pub fn set_nodelay(&self, _: bool) -> io::Result<()> {$/;"	P	implementation:TcpStream	signature:(&self, _: bool) -> io::Result<()>
set_nodelay	$RUST/src/sys/pal/windows/net.rs	/^    pub fn set_nodelay(&self, nodelay: bool) -> io::Result<()> {$/;"	P	implementation:Socket	signature:(&self, nodelay: bool) -> io::Result<()>
set_nodelay	$RUST/src/sys/pal/xous/net/tcpstream.rs	/^    pub fn set_nodelay(&self, enabled: bool) -> io::Result<()> {$/;"	P	implementation:TcpStream	signature:(&self, enabled: bool) -> io::Result<()>
set_nodelay	$RUST/src/sys_common/net.rs	/^    pub fn set_nodelay(&self, nodelay: bool) -> io::Result<()> {$/;"	P	implementation:TcpStream	signature:(&self, nodelay: bool) -> io::Result<()>
set_nonblocking	$RUST/src/net/tcp.rs	/^    pub fn set_nonblocking(&self, nonblocking: bool) -> io::Result<()> {$/;"	P	implementation:TcpStream	signature:(&self, nonblocking: bool) -> io::Result<()>
set_nonblocking	$RUST/src/net/tcp/tests.rs	/^fn set_nonblocking() {$/;"	f	signature:()
set_nonblocking	$RUST/src/net/udp.rs	/^    pub fn set_nonblocking(&self, nonblocking: bool) -> io::Result<()> {$/;"	P	implementation:UdpSocket	signature:(&self, nonblocking: bool) -> io::Result<()>
set_nonblocking	$RUST/src/net/udp/tests.rs	/^fn set_nonblocking() {$/;"	f	signature:()
set_nonblocking	$RUST/src/os/unix/net/datagram.rs	/^    pub fn set_nonblocking(&self, nonblocking: bool) -> io::Result<()> {$/;"	P	implementation:UnixDatagram	signature:(&self, nonblocking: bool) -> io::Result<()>
set_nonblocking	$RUST/src/os/unix/net/listener.rs	/^    pub fn set_nonblocking(&self, nonblocking: bool) -> io::Result<()> {$/;"	P	implementation:UnixListener	signature:(&self, nonblocking: bool) -> io::Result<()>
set_nonblocking	$RUST/src/os/unix/net/stream.rs	/^    pub fn set_nonblocking(&self, nonblocking: bool) -> io::Result<()> {$/;"	P	implementation:UnixStream	signature:(&self, nonblocking: bool) -> io::Result<()>
set_nonblocking	$RUST/src/sys/pal/hermit/fd.rs	/^    pub fn set_nonblocking(&self, _nonblocking: bool) -> io::Result<()> {$/;"	P	implementation:FileDesc	signature:(&self, _nonblocking: bool) -> io::Result<()>
set_nonblocking	$RUST/src/sys/pal/hermit/net.rs	/^    pub fn set_nonblocking(&self, nonblocking: bool) -> io::Result<()> {$/;"	P	implementation:Socket	signature:(&self, nonblocking: bool) -> io::Result<()>
set_nonblocking	$RUST/src/sys/pal/sgx/net.rs	/^    pub fn set_nonblocking(&self, _: bool) -> io::Result<()> {$/;"	P	implementation:UdpSocket	signature:(&self, _: bool) -> io::Result<()>
set_nonblocking	$RUST/src/sys/pal/solid/net.rs	/^    pub fn set_nonblocking(&self, nonblocking: bool) -> io::Result<()> {$/;"	P	implementation:Socket	signature:(&self, nonblocking: bool) -> io::Result<()>
set_nonblocking	$RUST/src/sys/pal/teeos/net.rs	/^    pub fn set_nonblocking(&self, _: bool) -> io::Result<()> {$/;"	P	implementation:UdpSocket	signature:(&self, _: bool) -> io::Result<()>
set_nonblocking	$RUST/src/sys/pal/unix/fd.rs	/^    pub fn set_nonblocking(&self, nonblocking: bool) -> io::Result<()> {$/;"	P	implementation:FileDesc	signature:(&self, nonblocking: bool) -> io::Result<()>
set_nonblocking	$RUST/src/sys/pal/unix/l4re.rs	/^        pub fn set_nonblocking(&self, _: bool) -> io::Result<()> {$/;"	P	implementation:net::UdpSocket	signature:(&self, _: bool) -> io::Result<()>
set_nonblocking	$RUST/src/sys/pal/unix/net.rs	/^    pub fn set_nonblocking(&self, nonblocking: bool) -> io::Result<()> {$/;"	P	implementation:Socket	signature:(&self, nonblocking: bool) -> io::Result<()>
set_nonblocking	$RUST/src/sys/pal/unsupported/net.rs	/^    pub fn set_nonblocking(&self, _: bool) -> io::Result<()> {$/;"	P	implementation:UdpSocket	signature:(&self, _: bool) -> io::Result<()>
set_nonblocking	$RUST/src/sys/pal/wasi/net.rs	/^    pub fn set_nonblocking(&self, state: bool) -> io::Result<()> {$/;"	P	implementation:TcpStream	signature:(&self, state: bool) -> io::Result<()>
set_nonblocking	$RUST/src/sys/pal/windows/net.rs	/^    pub fn set_nonblocking(&self, nonblocking: bool) -> io::Result<()> {$/;"	P	implementation:Socket	signature:(&self, nonblocking: bool) -> io::Result<()>
set_nonblocking	$RUST/src/sys/pal/xous/net/tcplistener.rs	/^    pub fn set_nonblocking(&self, nonblocking: bool) -> io::Result<()> {$/;"	P	implementation:TcpListener	signature:(&self, nonblocking: bool) -> io::Result<()>
set_nonblocking	$RUST/src/sys/pal/xous/net/tcpstream.rs	/^    pub fn set_nonblocking(&self, nonblocking: bool) -> io::Result<()> {$/;"	P	implementation:TcpStream	signature:(&self, nonblocking: bool) -> io::Result<()>
set_nonblocking	$RUST/src/sys/pal/xous/net/udp.rs	/^    pub fn set_nonblocking(&self, nonblocking: bool) -> io::Result<()> {$/;"	P	implementation:UdpSocket	signature:(&self, nonblocking: bool) -> io::Result<()>
set_nonblocking	$RUST/src/sys_common/net.rs	/^    pub fn set_nonblocking(&self, nonblocking: bool) -> io::Result<()> {$/;"	P	implementation:UdpSocket	signature:(&self, nonblocking: bool) -> io::Result<()>
set_only_v6	$RUST/src/net/tcp.rs	/^    pub fn set_only_v6(&self, only_v6: bool) -> io::Result<()> {$/;"	P	implementation:TcpListener	signature:(&self, only_v6: bool) -> io::Result<()>
set_only_v6	$RUST/src/sys/pal/sgx/net.rs	/^    pub fn set_only_v6(&self, _: bool) -> io::Result<()> {$/;"	P	implementation:TcpListener	signature:(&self, _: bool) -> io::Result<()>
set_only_v6	$RUST/src/sys/pal/teeos/net.rs	/^    pub fn set_only_v6(&self, _: bool) -> io::Result<()> {$/;"	P	implementation:TcpListener	signature:(&self, _: bool) -> io::Result<()>
set_only_v6	$RUST/src/sys/pal/unix/l4re.rs	/^        pub fn set_only_v6(&self, _: bool) -> io::Result<()> {$/;"	P	implementation:net::TcpListener	signature:(&self, _: bool) -> io::Result<()>
set_only_v6	$RUST/src/sys/pal/unsupported/net.rs	/^    pub fn set_only_v6(&self, _: bool) -> io::Result<()> {$/;"	P	implementation:TcpListener	signature:(&self, _: bool) -> io::Result<()>
set_only_v6	$RUST/src/sys/pal/wasi/net.rs	/^    pub fn set_only_v6(&self, _: bool) -> io::Result<()> {$/;"	P	implementation:TcpListener	signature:(&self, _: bool) -> io::Result<()>
set_only_v6	$RUST/src/sys/pal/xous/net/tcplistener.rs	/^    pub fn set_only_v6(&self, _: bool) -> io::Result<()> {$/;"	P	implementation:TcpListener	signature:(&self, _: bool) -> io::Result<()>
set_only_v6	$RUST/src/sys_common/net.rs	/^    pub fn set_only_v6(&self, only_v6: bool) -> io::Result<()> {$/;"	P	implementation:TcpListener	signature:(&self, only_v6: bool) -> io::Result<()>
set_ops	$RUST/benches/hash/mod.rs	/^mod set_ops;$/;"	n
set_output_capture	$RUST/src/io/stdio.rs	/^pub fn set_output_capture(sink: Option<LocalStream>) -> Option<LocalStream> {$/;"	f	signature:(sink: Option<LocalStream>) -> Option<LocalStream>
set_passcred	$RUST/src/os/unix/net/datagram.rs	/^    pub fn set_passcred(&self, passcred: bool) -> io::Result<()> {$/;"	P	implementation:UnixDatagram	signature:(&self, passcred: bool) -> io::Result<()>
set_passcred	$RUST/src/os/unix/net/stream.rs	/^    pub fn set_passcred(&self, passcred: bool) -> io::Result<()> {$/;"	P	implementation:UnixStream	signature:(&self, passcred: bool) -> io::Result<()>
set_passcred	$RUST/src/sys/pal/unix/net.rs	/^    pub fn set_passcred(&self, passcred: bool) -> io::Result<()> {$/;"	P	implementation:Socket	signature:(&self, passcred: bool) -> io::Result<()>
set_perm	$RUST/src/sys/pal/hermit/fs.rs	/^pub fn set_perm(_p: &Path, perm: FilePermissions) -> io::Result<()> {$/;"	f	signature:(_p: &Path, perm: FilePermissions) -> io::Result<()>
set_perm	$RUST/src/sys/pal/unix/fs.rs	/^pub fn set_perm(p: &Path, perm: FilePermissions) -> io::Result<()> {$/;"	f	signature:(p: &Path, perm: FilePermissions) -> io::Result<()>
set_perm	$RUST/src/sys/pal/unsupported/fs.rs	/^pub fn set_perm(_p: &Path, perm: FilePermissions) -> io::Result<()> {$/;"	f	signature:(_p: &Path, perm: FilePermissions) -> io::Result<()>
set_perm	$RUST/src/sys/pal/wasi/fs.rs	/^pub fn set_perm(_p: &Path, _perm: FilePermissions) -> io::Result<()> {$/;"	f	signature:(_p: &Path, _perm: FilePermissions) -> io::Result<()>
set_perm	$RUST/src/sys/pal/windows/fs.rs	/^pub fn set_perm(p: &Path, perm: FilePermissions) -> io::Result<()> {$/;"	f	signature:(p: &Path, perm: FilePermissions) -> io::Result<()>
set_permissions	$RUST/src/fs.rs	/^pub fn set_permissions<P: AsRef<Path>>(path: P, perm: Permissions) -> io::Result<()> {$/;"	f	signature:<P: AsRef<Path>>(path: P, perm: Permissions) -> io::Result<()>
set_permissions	$RUST/src/sys/pal/hermit/fs.rs	/^    pub fn set_permissions(&self, _perm: FilePermissions) -> io::Result<()> {$/;"	P	implementation:File	signature:(&self, _perm: FilePermissions) -> io::Result<()>
set_permissions	$RUST/src/sys/pal/unix/fs.rs	/^    pub fn set_permissions(&self, perm: FilePermissions) -> io::Result<()> {$/;"	P	implementation:File	signature:(&self, perm: FilePermissions) -> io::Result<()>
set_permissions	$RUST/src/sys/pal/unsupported/fs.rs	/^    pub fn set_permissions(&self, _perm: FilePermissions) -> io::Result<()> {$/;"	P	implementation:File	signature:(&self, _perm: FilePermissions) -> io::Result<()>
set_permissions	$RUST/src/sys/pal/wasi/fs.rs	/^    pub fn set_permissions(&self, _perm: FilePermissions) -> io::Result<()> {$/;"	P	implementation:File	signature:(&self, _perm: FilePermissions) -> io::Result<()>
set_permissions	$RUST/src/sys/pal/windows/fs.rs	/^    pub fn set_permissions(&self, perm: FilePermissions) -> io::Result<()> {$/;"	P	implementation:File	signature:(&self, perm: FilePermissions) -> io::Result<()>
set_pid	$RUST/src/os/unix/net/ancillary.rs	/^    pub fn set_pid(&mut self, pid: libc::pid_t) {$/;"	P	implementation:SocketCred	signature:(&mut self, pid: libc::pid_t)
set_port	$RUST/src/net/socket_addr/tests.rs	/^fn set_port() {$/;"	f	signature:()
set_position	$RUST/src/io/cursor.rs	/^    pub fn set_position(&mut self, pos: u64) {$/;"	P	implementation:Cursor	signature:(&mut self, pos: u64)
set_quickack	$RUST/src/os/net/linux_ext/tcp.rs	/^    fn set_quickack(&self, quickack: bool) -> io::Result<()>;$/;"	P	interface:TcpStreamExt	signature:(&self, quickack: bool) -> io::Result<()>
set_quickack	$RUST/src/sys/pal/unix/net.rs	/^    pub fn set_quickack(&self, quickack: bool) -> io::Result<()> {$/;"	P	implementation:Socket	signature:(&self, quickack: bool) -> io::Result<()>
set_read_timeout	$RUST/src/net/tcp.rs	/^    pub fn set_read_timeout(&self, dur: Option<Duration>) -> io::Result<()> {$/;"	P	implementation:TcpStream	signature:(&self, dur: Option<Duration>) -> io::Result<()>
set_read_timeout	$RUST/src/net/udp.rs	/^    pub fn set_read_timeout(&self, dur: Option<Duration>) -> io::Result<()> {$/;"	P	implementation:UdpSocket	signature:(&self, dur: Option<Duration>) -> io::Result<()>
set_read_timeout	$RUST/src/os/unix/net/datagram.rs	/^    pub fn set_read_timeout(&self, timeout: Option<Duration>) -> io::Result<()> {$/;"	P	implementation:UnixDatagram	signature:(&self, timeout: Option<Duration>) -> io::Result<()>
set_read_timeout	$RUST/src/os/unix/net/stream.rs	/^    pub fn set_read_timeout(&self, timeout: Option<Duration>) -> io::Result<()> {$/;"	P	implementation:UnixStream	signature:(&self, timeout: Option<Duration>) -> io::Result<()>
set_read_timeout	$RUST/src/sys/pal/sgx/net.rs	/^    pub fn set_read_timeout(&self, dur: Option<Duration>) -> io::Result<()> {$/;"	P	implementation:TcpStream	signature:(&self, dur: Option<Duration>) -> io::Result<()>
set_read_timeout	$RUST/src/sys/pal/teeos/net.rs	/^    pub fn set_read_timeout(&self, _: Option<Duration>) -> io::Result<()> {$/;"	P	implementation:UdpSocket	signature:(&self, _: Option<Duration>) -> io::Result<()>
set_read_timeout	$RUST/src/sys/pal/unix/l4re.rs	/^        pub fn set_read_timeout(&self, _: Option<Duration>) -> io::Result<()> {$/;"	P	implementation:net::UdpSocket	signature:(&self, _: Option<Duration>) -> io::Result<()>
set_read_timeout	$RUST/src/sys/pal/unsupported/net.rs	/^    pub fn set_read_timeout(&self, _: Option<Duration>) -> io::Result<()> {$/;"	P	implementation:UdpSocket	signature:(&self, _: Option<Duration>) -> io::Result<()>
set_read_timeout	$RUST/src/sys/pal/wasi/net.rs	/^    pub fn set_read_timeout(&self, _: Option<Duration>) -> io::Result<()> {$/;"	P	implementation:UdpSocket	signature:(&self, _: Option<Duration>) -> io::Result<()>
set_read_timeout	$RUST/src/sys/pal/xous/net/tcpstream.rs	/^    pub fn set_read_timeout(&self, timeout: Option<Duration>) -> io::Result<()> {$/;"	P	implementation:TcpStream	signature:(&self, timeout: Option<Duration>) -> io::Result<()>
set_read_timeout	$RUST/src/sys/pal/xous/net/udp.rs	/^    pub fn set_read_timeout(&self, timeout: Option<Duration>) -> io::Result<()> {$/;"	P	implementation:UdpSocket	signature:(&self, timeout: Option<Duration>) -> io::Result<()>
set_read_timeout	$RUST/src/sys_common/net.rs	/^    pub fn set_read_timeout(&self, dur: Option<Duration>) -> io::Result<()> {$/;"	P	implementation:UdpSocket	signature:(&self, dur: Option<Duration>) -> io::Result<()>
set_readonly	$RUST/src/fs.rs	/^    pub fn set_readonly(&mut self, readonly: bool) {$/;"	P	implementation:Permissions	signature:(&mut self, readonly: bool)
set_readonly	$RUST/src/sys/pal/hermit/fs.rs	/^    pub fn set_readonly(&mut self, _readonly: bool) {$/;"	P	implementation:FilePermissions	signature:(&mut self, _readonly: bool)
set_readonly	$RUST/src/sys/pal/solid/fs.rs	/^    pub fn set_readonly(&mut self, readonly: bool) {$/;"	P	implementation:FilePermissions	signature:(&mut self, readonly: bool)
set_readonly	$RUST/src/sys/pal/unix/fs.rs	/^    pub fn set_readonly(&mut self, readonly: bool) {$/;"	P	implementation:FilePermissions	signature:(&mut self, readonly: bool)
set_readonly	$RUST/src/sys/pal/unsupported/fs.rs	/^    pub fn set_readonly(&mut self, _readonly: bool) {$/;"	P	implementation:FilePermissions	signature:(&mut self, _readonly: bool)
set_readonly	$RUST/src/sys/pal/wasi/fs.rs	/^    pub fn set_readonly(&mut self, readonly: bool) {$/;"	P	implementation:FilePermissions	signature:(&mut self, readonly: bool)
set_readonly	$RUST/src/sys/pal/windows/fs.rs	/^    pub fn set_readonly(&mut self, readonly: bool) {$/;"	P	implementation:FilePermissions	signature:(&mut self, readonly: bool)
set_rights	$RUST/src/sys/pal/wasi/fd.rs	/^    pub fn set_rights(&self, base: wasi::Rights, inheriting: wasi::Rights) -> io::Result<()> {$/;"	P	implementation:WasiFd	signature:(&self, base: wasi::Rights, inheriting: wasi::Rights) -> io::Result<()>
set_scope_id	$RUST/src/net/socket_addr/tests.rs	/^fn set_scope_id() {$/;"	f	signature:()
set_state_on_drop_to	$RUST/src/sys/pal/unsupported/once.rs	/^    set_state_on_drop_to: State,$/;"	m	struct:CompletionGuard
set_state_on_drop_to	$RUST/src/sys_common/once/futex.rs	/^    set_state_on_drop_to: u32,$/;"	m	struct:CompletionGuard
set_state_on_drop_to	$RUST/src/sys_common/once/queue.rs	/^    set_state_on_drop_to: Cell<*mut Masked>,$/;"	m	struct:OnceState
set_state_to	$RUST/src/sys/pal/unsupported/once.rs	/^    set_state_to: Cell<State>,$/;"	m	struct:OnceState
set_state_to	$RUST/src/sys_common/once/futex.rs	/^    set_state_to: Cell<u32>,$/;"	m	struct:OnceState
set_symmetric_difference	$RUST/benches/hash/set_ops.rs	/^fn set_symmetric_difference(b: &mut Bencher) {$/;"	f	signature:(b: &mut Bencher)
set_timeout	$RUST/src/sys/pal/hermit/net.rs	/^    pub fn set_timeout(&self, dur: Option<Duration>, kind: i32) -> io::Result<()> {$/;"	P	implementation:Socket	signature:(&self, dur: Option<Duration>, kind: i32) -> io::Result<()>
set_timeout	$RUST/src/sys/pal/solid/net.rs	/^    pub fn set_timeout(&self, dur: Option<Duration>, kind: c_int) -> io::Result<()> {$/;"	P	implementation:Socket	signature:(&self, dur: Option<Duration>, kind: c_int) -> io::Result<()>
set_timeout	$RUST/src/sys/pal/unix/l4re.rs	/^        pub fn set_timeout(&self, _: Option<Duration>, _: libc::c_int) -> io::Result<()> {$/;"	P	implementation:net::Socket	signature:(&self, _: Option<Duration>, _: libc::c_int) -> io::Result<()>
set_timeout	$RUST/src/sys/pal/unix/net.rs	/^    pub fn set_timeout(&self, dur: Option<Duration>, kind: libc::c_int) -> io::Result<()> {$/;"	P	implementation:Socket	signature:(&self, dur: Option<Duration>, kind: libc::c_int) -> io::Result<()>
set_timeout	$RUST/src/sys/pal/windows/net.rs	/^    pub fn set_timeout(&self, dur: Option<Duration>, kind: c_int) -> io::Result<()> {$/;"	P	implementation:Socket	signature:(&self, dur: Option<Duration>, kind: c_int) -> io::Result<()>
set_times	$RUST/src/fs.rs	/^    pub fn set_times(&self, times: FileTimes) -> io::Result<()> {$/;"	P	implementation:File	signature:(&self, times: FileTimes) -> io::Result<()>
set_times	$RUST/src/sys/pal/hermit/fs.rs	/^    pub fn set_times(&self, _times: FileTimes) -> io::Result<()> {$/;"	P	implementation:File	signature:(&self, _times: FileTimes) -> io::Result<()>
set_times	$RUST/src/sys/pal/unix/fs.rs	/^    pub fn set_times(&self, times: FileTimes) -> io::Result<()> {$/;"	P	implementation:File	signature:(&self, times: FileTimes) -> io::Result<()>
set_times	$RUST/src/sys/pal/unsupported/fs.rs	/^    pub fn set_times(&self, _times: FileTimes) -> io::Result<()> {$/;"	P	implementation:File	signature:(&self, _times: FileTimes) -> io::Result<()>
set_times	$RUST/src/sys/pal/wasi/fs.rs	/^    pub fn set_times(&self, times: FileTimes) -> io::Result<()> {$/;"	P	implementation:File	signature:(&self, times: FileTimes) -> io::Result<()>
set_times	$RUST/src/sys/pal/windows/fs.rs	/^    pub fn set_times(&self, times: FileTimes) -> io::Result<()> {$/;"	P	implementation:File	signature:(&self, times: FileTimes) -> io::Result<()>
set_tls_ptr	$RUST/src/sys/pal/sgx/abi/entry.S	/^set_tls_ptr:$/;"	l
set_tls_ptr	$RUST/src/sys/pal/sgx/abi/tls/mod.rs	/^    fn set_tls_ptr(tls: *const u8);$/;"	f	signature:(tls: *const u8)
set_ttl	$RUST/src/net/tcp.rs	/^    pub fn set_ttl(&self, ttl: u32) -> io::Result<()> {$/;"	P	implementation:TcpStream	signature:(&self, ttl: u32) -> io::Result<()>
set_ttl	$RUST/src/net/udp.rs	/^    pub fn set_ttl(&self, ttl: u32) -> io::Result<()> {$/;"	P	implementation:UdpSocket	signature:(&self, ttl: u32) -> io::Result<()>
set_ttl	$RUST/src/sys/pal/sgx/net.rs	/^    pub fn set_ttl(&self, _: u32) -> io::Result<()> {$/;"	P	implementation:UdpSocket	signature:(&self, _: u32) -> io::Result<()>
set_ttl	$RUST/src/sys/pal/teeos/net.rs	/^    pub fn set_ttl(&self, _: u32) -> io::Result<()> {$/;"	P	implementation:UdpSocket	signature:(&self, _: u32) -> io::Result<()>
set_ttl	$RUST/src/sys/pal/unix/l4re.rs	/^        pub fn set_ttl(&self, _: u32) -> io::Result<()> {$/;"	P	implementation:net::UdpSocket	signature:(&self, _: u32) -> io::Result<()>
set_ttl	$RUST/src/sys/pal/unsupported/net.rs	/^    pub fn set_ttl(&self, _: u32) -> io::Result<()> {$/;"	P	implementation:UdpSocket	signature:(&self, _: u32) -> io::Result<()>
set_ttl	$RUST/src/sys/pal/wasi/net.rs	/^    pub fn set_ttl(&self, _: u32) -> io::Result<()> {$/;"	P	implementation:UdpSocket	signature:(&self, _: u32) -> io::Result<()>
set_ttl	$RUST/src/sys/pal/xous/net/tcplistener.rs	/^    pub fn set_ttl(&self, ttl: u32) -> io::Result<()> {$/;"	P	implementation:TcpListener	signature:(&self, ttl: u32) -> io::Result<()>
set_ttl	$RUST/src/sys/pal/xous/net/tcpstream.rs	/^    pub fn set_ttl(&self, ttl: u32) -> io::Result<()> {$/;"	P	implementation:TcpStream	signature:(&self, ttl: u32) -> io::Result<()>
set_ttl	$RUST/src/sys/pal/xous/net/udp.rs	/^    pub fn set_ttl(&self, ttl: u32) -> io::Result<()> {$/;"	P	implementation:UdpSocket	signature:(&self, ttl: u32) -> io::Result<()>
set_ttl	$RUST/src/sys_common/net.rs	/^    pub fn set_ttl(&self, ttl: u32) -> io::Result<()> {$/;"	P	implementation:UdpSocket	signature:(&self, ttl: u32) -> io::Result<()>
set_uid	$RUST/src/os/unix/net/ancillary.rs	/^    pub fn set_uid(&mut self, uid: libc::uid_t) {$/;"	P	implementation:SocketCred	signature:(&mut self, uid: libc::uid_t)
set_unchecked	$RUST/src/sys/pal/itron/spin.rs	/^    pub unsafe fn set_unchecked(&self, (id, extra): (abi::ID, T)) {$/;"	P	implementation:SpinIdOnceCell	signature:(&self, (id, extra): (abi::ID, T))
set_union	$RUST/benches/hash/set_ops.rs	/^fn set_union(b: &mut Bencher) {$/;"	f	signature:(b: &mut Bencher)
set_var	$RUST/src/env.rs	/^pub fn set_var<K: AsRef<OsStr>, V: AsRef<OsStr>>(key: K, value: V) {$/;"	f	signature:<K: AsRef<OsStr>, V: AsRef<OsStr>>(key: K, value: V)
set_write_timeout	$RUST/src/net/tcp.rs	/^    pub fn set_write_timeout(&self, dur: Option<Duration>) -> io::Result<()> {$/;"	P	implementation:TcpStream	signature:(&self, dur: Option<Duration>) -> io::Result<()>
set_write_timeout	$RUST/src/net/udp.rs	/^    pub fn set_write_timeout(&self, dur: Option<Duration>) -> io::Result<()> {$/;"	P	implementation:UdpSocket	signature:(&self, dur: Option<Duration>) -> io::Result<()>
set_write_timeout	$RUST/src/os/unix/net/datagram.rs	/^    pub fn set_write_timeout(&self, timeout: Option<Duration>) -> io::Result<()> {$/;"	P	implementation:UnixDatagram	signature:(&self, timeout: Option<Duration>) -> io::Result<()>
set_write_timeout	$RUST/src/os/unix/net/stream.rs	/^    pub fn set_write_timeout(&self, timeout: Option<Duration>) -> io::Result<()> {$/;"	P	implementation:UnixStream	signature:(&self, timeout: Option<Duration>) -> io::Result<()>
set_write_timeout	$RUST/src/sys/pal/sgx/net.rs	/^    pub fn set_write_timeout(&self, dur: Option<Duration>) -> io::Result<()> {$/;"	P	implementation:TcpStream	signature:(&self, dur: Option<Duration>) -> io::Result<()>
set_write_timeout	$RUST/src/sys/pal/teeos/net.rs	/^    pub fn set_write_timeout(&self, _: Option<Duration>) -> io::Result<()> {$/;"	P	implementation:UdpSocket	signature:(&self, _: Option<Duration>) -> io::Result<()>
set_write_timeout	$RUST/src/sys/pal/unix/l4re.rs	/^        pub fn set_write_timeout(&self, _: Option<Duration>) -> io::Result<()> {$/;"	P	implementation:net::UdpSocket	signature:(&self, _: Option<Duration>) -> io::Result<()>
set_write_timeout	$RUST/src/sys/pal/unsupported/net.rs	/^    pub fn set_write_timeout(&self, _: Option<Duration>) -> io::Result<()> {$/;"	P	implementation:UdpSocket	signature:(&self, _: Option<Duration>) -> io::Result<()>
set_write_timeout	$RUST/src/sys/pal/wasi/net.rs	/^    pub fn set_write_timeout(&self, _: Option<Duration>) -> io::Result<()> {$/;"	P	implementation:UdpSocket	signature:(&self, _: Option<Duration>) -> io::Result<()>
set_write_timeout	$RUST/src/sys/pal/xous/net/tcpstream.rs	/^    pub fn set_write_timeout(&self, timeout: Option<Duration>) -> io::Result<()> {$/;"	P	implementation:TcpStream	signature:(&self, timeout: Option<Duration>) -> io::Result<()>
set_write_timeout	$RUST/src/sys/pal/xous/net/udp.rs	/^    pub fn set_write_timeout(&self, timeout: Option<Duration>) -> io::Result<()> {$/;"	P	implementation:UdpSocket	signature:(&self, timeout: Option<Duration>) -> io::Result<()>
set_write_timeout	$RUST/src/sys_common/net.rs	/^    pub fn set_write_timeout(&self, dur: Option<Duration>) -> io::Result<()> {$/;"	P	implementation:UdpSocket	signature:(&self, dur: Option<Duration>) -> io::Result<()>
setenv	$RUST/src/sys/pal/hermit/os.rs	/^pub fn setenv(k: &OsStr, v: &OsStr) -> io::Result<()> {$/;"	f	signature:(k: &OsStr, v: &OsStr) -> io::Result<()>
setenv	$RUST/src/sys/pal/sgx/os.rs	/^pub fn setenv(k: &OsStr, v: &OsStr) -> io::Result<()> {$/;"	f	signature:(k: &OsStr, v: &OsStr) -> io::Result<()>
setenv	$RUST/src/sys/pal/solid/os.rs	/^pub fn setenv(k: &OsStr, v: &OsStr) -> io::Result<()> {$/;"	f	signature:(k: &OsStr, v: &OsStr) -> io::Result<()>
setenv	$RUST/src/sys/pal/teeos/os.rs	/^pub fn setenv(_: &OsStr, _: &OsStr) -> io::Result<()> {$/;"	f	signature:(_: &OsStr, _: &OsStr) -> io::Result<()>
setenv	$RUST/src/sys/pal/uefi/os.rs	/^pub fn setenv(_: &OsStr, _: &OsStr) -> io::Result<()> {$/;"	f	signature:(_: &OsStr, _: &OsStr) -> io::Result<()>
setenv	$RUST/src/sys/pal/unix/os.rs	/^pub fn setenv(k: &OsStr, v: &OsStr) -> io::Result<()> {$/;"	f	signature:(k: &OsStr, v: &OsStr) -> io::Result<()>
setenv	$RUST/src/sys/pal/unsupported/os.rs	/^pub fn setenv(_: &OsStr, _: &OsStr) -> io::Result<()> {$/;"	f	signature:(_: &OsStr, _: &OsStr) -> io::Result<()>
setenv	$RUST/src/sys/pal/wasi/os.rs	/^pub fn setenv(k: &OsStr, v: &OsStr) -> io::Result<()> {$/;"	f	signature:(k: &OsStr, v: &OsStr) -> io::Result<()>
setenv	$RUST/src/sys/pal/windows/os.rs	/^pub fn setenv(k: &OsStr, v: &OsStr) -> io::Result<()> {$/;"	f	signature:(k: &OsStr, v: &OsStr) -> io::Result<()>
setenv	$RUST/src/sys/pal/xous/os.rs	/^pub fn setenv(_: &OsStr, _: &OsStr) -> io::Result<()> {$/;"	f	signature:(_: &OsStr, _: &OsStr) -> io::Result<()>
setenv	$RUST/src/sys/pal/zkvm/os.rs	/^pub fn setenv(_: &OsStr, _: &OsStr) -> io::Result<()> {$/;"	f	signature:(_: &OsStr, _: &OsStr) -> io::Result<()>
setsockopt	$RUST/src/sys/pal/solid/abi/sockets.rs	/^    pub fn setsockopt($/;"	f	signature:( s: c_int, level: c_int, optname: c_int, optval: *const c_void, optlen: socklen_t, ) -> c_int
setsockopt	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn setsockopt(s: SOCKET, level: i32, optname: i32, optval: PCSTR, optlen: i32) -> i32;$/;"	f	signature:(s: SOCKET, level: i32, optname: i32, optval: PCSTR, optlen: i32) -> i32
setsockopt	$RUST/src/sys_common/net.rs	/^pub fn setsockopt<T>($/;"	f	signature:<T>( sock: &Socket, level: c_int, option_name: c_int, option_value: T, ) -> io::Result<()>
setup_io	$RUST/src/sys/pal/unix/process/process_common.rs	/^    pub fn setup_io($/;"	P	implementation:Command	signature:( &self, default: Stdio, needs_stdin: bool, ) -> io::Result<(StdioPipes, ChildPipes)>
sgx_entry	$RUST/src/sys/pal/sgx/abi/entry.S	/^sgx_entry:$/;"	l
sgx_ineffective	$RUST/src/sys/pal/sgx/mod.rs	/^pub fn sgx_ineffective<T>(v: T) -> crate::io::Result<T> {$/;"	f	signature:<T>(v: T) -> crate::io::Result<T>
share_mode	$RUST/src/os/windows/fs.rs	/^    fn share_mode(&mut self, val: u32) -> &mut Self;$/;"	P	interface:OpenOptionsExt	signature:(&mut self, val: u32) -> &mut Self
share_mode	$RUST/src/sys/pal/windows/fs.rs	/^    share_mode: c::DWORD,$/;"	m	struct:OpenOptions
shared_chan_stress	$RUST/src/sync/mpsc/sync_tests.rs	/^fn shared_chan_stress() {$/;"	f	signature:()
shared_chan_stress	$RUST/src/sync/mpsc/tests.rs	/^fn shared_chan_stress() {$/;"	f	signature:()
shared_recv_timeout	$RUST/src/sync/mpsc/tests.rs	/^fn shared_recv_timeout() {$/;"	f	signature:()
shims	$RUST/src/sys/cmath/windows.rs	/^mod shims {$/;"	n
show_backtrace	$RUST/src/error.rs	/^    show_backtrace: bool,$/;"	m	struct:Report
shrink	$RUST/src/alloc.rs	/^    unsafe fn shrink($/;"	P	implementation:System	signature:( &self, ptr: NonNull<u8>, old_layout: Layout, new_layout: Layout, ) -> Result<NonNull<[u8]>, AllocError>
shrink_to	$RUST/src/collections/hash/map.rs	/^    pub fn shrink_to(&mut self, min_capacity: usize) {$/;"	f	signature:(&mut self, min_capacity: usize)
shrink_to	$RUST/src/collections/hash/set.rs	/^    pub fn shrink_to(&mut self, min_capacity: usize) {$/;"	f	signature:(&mut self, min_capacity: usize)
shrink_to	$RUST/src/ffi/os_str.rs	/^    pub fn shrink_to(&mut self, min_capacity: usize) {$/;"	P	implementation:OsString	signature:(&mut self, min_capacity: usize)
shrink_to	$RUST/src/path.rs	/^    pub fn shrink_to(&mut self, min_capacity: usize) {$/;"	P	implementation:PathBuf	signature:(&mut self, min_capacity: usize)
shrink_to	$RUST/src/sys/os_str/bytes.rs	/^    pub fn shrink_to(&mut self, min_capacity: usize) {$/;"	P	implementation:Buf	signature:(&mut self, min_capacity: usize)
shrink_to	$RUST/src/sys/os_str/wtf8.rs	/^    pub fn shrink_to(&mut self, min_capacity: usize) {$/;"	P	implementation:Buf	signature:(&mut self, min_capacity: usize)
shrink_to	$RUST/src/sys_common/wtf8.rs	/^    pub fn shrink_to(&mut self, min_capacity: usize) {$/;"	P	implementation:Wtf8Buf	signature:(&mut self, min_capacity: usize)
shrink_to_fit	$RUST/src/collections/hash/map.rs	/^    pub fn shrink_to_fit(&mut self) {$/;"	f	signature:(&mut self)
shrink_to_fit	$RUST/src/collections/hash/set.rs	/^    pub fn shrink_to_fit(&mut self) {$/;"	f	signature:(&mut self)
shrink_to_fit	$RUST/src/ffi/os_str.rs	/^    pub fn shrink_to_fit(&mut self) {$/;"	P	implementation:OsString	signature:(&mut self)
shrink_to_fit	$RUST/src/path.rs	/^    pub fn shrink_to_fit(&mut self) {$/;"	P	implementation:PathBuf	signature:(&mut self)
shrink_to_fit	$RUST/src/sys/os_str/bytes.rs	/^    pub fn shrink_to_fit(&mut self) {$/;"	P	implementation:Buf	signature:(&mut self)
shrink_to_fit	$RUST/src/sys/os_str/wtf8.rs	/^    pub fn shrink_to_fit(&mut self) {$/;"	P	implementation:Buf	signature:(&mut self)
shrink_to_fit	$RUST/src/sys_common/wtf8.rs	/^    pub fn shrink_to_fit(&mut self) {$/;"	P	implementation:Wtf8Buf	signature:(&mut self)
shutdown	$RUST/src/net/tcp.rs	/^    pub fn shutdown(&self, how: Shutdown) -> io::Result<()> {$/;"	P	implementation:TcpStream	signature:(&self, how: Shutdown) -> io::Result<()>
shutdown	$RUST/src/os/unix/net/datagram.rs	/^    pub fn shutdown(&self, how: Shutdown) -> io::Result<()> {$/;"	P	implementation:UnixDatagram	signature:(&self, how: Shutdown) -> io::Result<()>
shutdown	$RUST/src/os/unix/net/stream.rs	/^    pub fn shutdown(&self, how: Shutdown) -> io::Result<()> {$/;"	P	implementation:UnixStream	signature:(&self, how: Shutdown) -> io::Result<()>
shutdown	$RUST/src/sys/pal/hermit/net.rs	/^    pub fn shutdown(&self, how: Shutdown) -> io::Result<()> {$/;"	P	implementation:Socket	signature:(&self, how: Shutdown) -> io::Result<()>
shutdown	$RUST/src/sys/pal/sgx/net.rs	/^    pub fn shutdown(&self, _: Shutdown) -> io::Result<()> {$/;"	P	implementation:TcpStream	signature:(&self, _: Shutdown) -> io::Result<()>
shutdown	$RUST/src/sys/pal/solid/abi/sockets.rs	/^    pub fn shutdown(s: c_int, how: c_int) -> c_int;$/;"	f	signature:(s: c_int, how: c_int) -> c_int
shutdown	$RUST/src/sys/pal/solid/net.rs	/^    pub fn shutdown(&self, how: Shutdown) -> io::Result<()> {$/;"	P	implementation:Socket	signature:(&self, how: Shutdown) -> io::Result<()>
shutdown	$RUST/src/sys/pal/teeos/net.rs	/^    pub fn shutdown(&self, _: Shutdown) -> io::Result<()> {$/;"	P	implementation:TcpStream	signature:(&self, _: Shutdown) -> io::Result<()>
shutdown	$RUST/src/sys/pal/unix/l4re.rs	/^        pub fn shutdown(&self, _: Shutdown) -> io::Result<()> {$/;"	P	implementation:net::TcpStream	signature:(&self, _: Shutdown) -> io::Result<()>
shutdown	$RUST/src/sys/pal/unix/net.rs	/^    pub fn shutdown(&self, how: Shutdown) -> io::Result<()> {$/;"	P	implementation:Socket	signature:(&self, how: Shutdown) -> io::Result<()>
shutdown	$RUST/src/sys/pal/unsupported/net.rs	/^    pub fn shutdown(&self, _: Shutdown) -> io::Result<()> {$/;"	P	implementation:TcpStream	signature:(&self, _: Shutdown) -> io::Result<()>
shutdown	$RUST/src/sys/pal/wasi/net.rs	/^    pub fn shutdown(&self, how: Shutdown) -> io::Result<()> {$/;"	P	implementation:TcpStream	signature:(&self, how: Shutdown) -> io::Result<()>
shutdown	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub fn shutdown(s: SOCKET, how: WINSOCK_SHUTDOWN_HOW) -> i32;$/;"	f	signature:(s: SOCKET, how: WINSOCK_SHUTDOWN_HOW) -> i32
shutdown	$RUST/src/sys/pal/windows/net.rs	/^    pub fn shutdown(&self, how: Shutdown) -> io::Result<()> {$/;"	P	implementation:Socket	signature:(&self, how: Shutdown) -> io::Result<()>
shutdown	$RUST/src/sys/pal/xous/net/tcpstream.rs	/^    pub fn shutdown(&self, how: Shutdown) -> io::Result<()> {$/;"	P	implementation:TcpStream	signature:(&self, how: Shutdown) -> io::Result<()>
shutdown	$RUST/src/sys_common/net.rs	/^    pub fn shutdown(&self, how: Shutdown) -> io::Result<()> {$/;"	P	implementation:TcpStream	signature:(&self, how: Shutdown) -> io::Result<()>
shutdown_smoke	$RUST/src/net/tcp/tests.rs	/^fn shutdown_smoke() {$/;"	f	signature:()
signal	$RUST/src/os/unix/process.rs	/^    fn signal(&self) -> Option<i32>;$/;"	P	interface:ExitStatusExt	signature:(&self) -> Option<i32>
signal	$RUST/src/sys/pal/unix/android.rs	/^pub unsafe fn signal(signum: c_int, handler: sighandler_t) -> sighandler_t {$/;"	f	signature:(signum: c_int, handler: sighandler_t) -> sighandler_t
signal	$RUST/src/sys/pal/unix/process/process_fuchsia.rs	/^    pub fn signal(&self) -> Option<i32> {$/;"	P	implementation:ExitStatus	signature:(&self) -> Option<i32>
signal	$RUST/src/sys/pal/unix/process/process_unix.rs	/^    pub fn signal(&self) -> Option<i32> {$/;"	P	implementation:ExitStatus	signature:(&self) -> Option<i32>
signal	$RUST/src/sys/pal/unix/process/process_unsupported/wait_status.rs	/^    pub fn signal(&self) -> Option<i32> {$/;"	P	implementation:ExitStatus	signature:(&self) -> Option<i32>
signal	$RUST/src/sys/pal/unix/process/process_vxworks.rs	/^    pub fn signal(&self) -> Option<i32> {$/;"	P	implementation:ExitStatus	signature:(&self) -> Option<i32>
signal_handler	$RUST/src/sys/pal/unix/stack_overflow.rs	/^    unsafe extern "C" fn signal_handler($/;"	f	module:imp	signature:( signum: libc::c_int, info: *mut libc::siginfo_t, _data: *mut libc::c_void, )
signal_reported_right	$RUST/src/process/tests.rs	/^fn signal_reported_right() {$/;"	f	signature:()
signal_string	$RUST/src/sys/pal/unix/process/process_unix.rs	/^fn signal_string(signal: i32) -> &'static str {$/;"	f	signature:(signal: i32) -> &'static str
signaled	$RUST/src/sys_common/once/queue.rs	/^    signaled: AtomicBool,$/;"	m	struct:Waiter
signum	$RUST/src/f32.rs	/^    pub fn signum(self) -> f32 {$/;"	P	implementation:f32	signature:(self) -> f32
signum	$RUST/src/f64.rs	/^    pub fn signum(self) -> f64 {$/;"	P	implementation:f64	signature:(self) -> f64
sigpipe	$RUST/src/sys/pal/unix/mod.rs	/^            mod sigpipe {$/;"	n	function:init::reset_sigpipe
simple_text_output	$RUST/src/sys/pal/uefi/stdio.rs	/^unsafe fn simple_text_output($/;"	f	signature:( protocol: *mut r_efi::protocols::simple_text_output::Protocol, buf: &mut [u16], ) -> io::Result<()>
sin	$RUST/src/f32.rs	/^    pub fn sin(self) -> f32 {$/;"	P	implementation:f32	signature:(self) -> f32
sin	$RUST/src/f64.rs	/^    pub fn sin(self) -> f64 {$/;"	P	implementation:f64	signature:(self) -> f64
sin6_addr	$RUST/src/sys/pal/sgx/net.rs	/^        pub sin6_addr: in6_addr,$/;"	m	struct:netc::sockaddr_in6
sin6_addr	$RUST/src/sys/pal/solid/abi/sockets.rs	/^    pub sin6_addr: in6_addr,$/;"	m	struct:sockaddr_in6
sin6_addr	$RUST/src/sys/pal/teeos/net.rs	/^        pub sin6_addr: in6_addr,$/;"	m	struct:netc::sockaddr_in6
sin6_addr	$RUST/src/sys/pal/unsupported/net.rs	/^        pub sin6_addr: in6_addr,$/;"	m	struct:netc::sockaddr_in6
sin6_addr	$RUST/src/sys/pal/wasi/net.rs	/^        pub sin6_addr: in6_addr,$/;"	m	struct:netc::sockaddr_in6
sin6_addr	$RUST/src/sys/pal/windows/c.rs	/^    pub sin6_addr: in6_addr,$/;"	m	struct:sockaddr_in6
sin6_addr	$RUST/src/sys/pal/xous/net/mod.rs	/^        pub sin6_addr: in6_addr,$/;"	m	struct:netc::sockaddr_in6
sin6_family	$RUST/src/sys/pal/sgx/net.rs	/^        pub sin6_family: sa_family_t,$/;"	m	struct:netc::sockaddr_in6
sin6_family	$RUST/src/sys/pal/solid/abi/sockets.rs	/^    pub sin6_family: sa_family_t,$/;"	m	struct:sockaddr_in6
sin6_family	$RUST/src/sys/pal/teeos/net.rs	/^        pub sin6_family: sa_family_t,$/;"	m	struct:netc::sockaddr_in6
sin6_family	$RUST/src/sys/pal/unsupported/net.rs	/^        pub sin6_family: sa_family_t,$/;"	m	struct:netc::sockaddr_in6
sin6_family	$RUST/src/sys/pal/wasi/net.rs	/^        pub sin6_family: sa_family_t,$/;"	m	struct:netc::sockaddr_in6
sin6_family	$RUST/src/sys/pal/windows/c.rs	/^    pub sin6_family: ADDRESS_FAMILY,$/;"	m	struct:sockaddr_in6
sin6_family	$RUST/src/sys/pal/xous/net/mod.rs	/^        pub sin6_family: sa_family_t,$/;"	m	struct:netc::sockaddr_in6
sin6_flowinfo	$RUST/src/sys/pal/sgx/net.rs	/^        pub sin6_flowinfo: u32,$/;"	m	struct:netc::sockaddr_in6
sin6_flowinfo	$RUST/src/sys/pal/solid/abi/sockets.rs	/^    pub sin6_flowinfo: u32,$/;"	m	struct:sockaddr_in6
sin6_flowinfo	$RUST/src/sys/pal/teeos/net.rs	/^        pub sin6_flowinfo: u32,$/;"	m	struct:netc::sockaddr_in6
sin6_flowinfo	$RUST/src/sys/pal/unsupported/net.rs	/^        pub sin6_flowinfo: u32,$/;"	m	struct:netc::sockaddr_in6
sin6_flowinfo	$RUST/src/sys/pal/wasi/net.rs	/^        pub sin6_flowinfo: u32,$/;"	m	struct:netc::sockaddr_in6
sin6_flowinfo	$RUST/src/sys/pal/windows/c.rs	/^    pub sin6_flowinfo: c_ulong,$/;"	m	struct:sockaddr_in6
sin6_flowinfo	$RUST/src/sys/pal/xous/net/mod.rs	/^        pub sin6_flowinfo: u32,$/;"	m	struct:netc::sockaddr_in6
sin6_len	$RUST/src/sys/pal/solid/abi/sockets.rs	/^    pub sin6_len: u8,$/;"	m	struct:sockaddr_in6
sin6_port	$RUST/src/sys/pal/sgx/net.rs	/^        pub sin6_port: u16,$/;"	m	struct:netc::sockaddr_in6
sin6_port	$RUST/src/sys/pal/solid/abi/sockets.rs	/^    pub sin6_port: in_port_t,$/;"	m	struct:sockaddr_in6
sin6_port	$RUST/src/sys/pal/teeos/net.rs	/^        pub sin6_port: u16,$/;"	m	struct:netc::sockaddr_in6
sin6_port	$RUST/src/sys/pal/unsupported/net.rs	/^        pub sin6_port: u16,$/;"	m	struct:netc::sockaddr_in6
sin6_port	$RUST/src/sys/pal/wasi/net.rs	/^        pub sin6_port: u16,$/;"	m	struct:netc::sockaddr_in6
sin6_port	$RUST/src/sys/pal/windows/c.rs	/^    pub sin6_port: USHORT,$/;"	m	struct:sockaddr_in6
sin6_port	$RUST/src/sys/pal/xous/net/mod.rs	/^        pub sin6_port: u16,$/;"	m	struct:netc::sockaddr_in6
sin6_scope_id	$RUST/src/sys/pal/sgx/net.rs	/^        pub sin6_scope_id: u32,$/;"	m	struct:netc::sockaddr_in6
sin6_scope_id	$RUST/src/sys/pal/solid/abi/sockets.rs	/^    pub sin6_scope_id: u32,$/;"	m	struct:sockaddr_in6
sin6_scope_id	$RUST/src/sys/pal/teeos/net.rs	/^        pub sin6_scope_id: u32,$/;"	m	struct:netc::sockaddr_in6
sin6_scope_id	$RUST/src/sys/pal/unsupported/net.rs	/^        pub sin6_scope_id: u32,$/;"	m	struct:netc::sockaddr_in6
sin6_scope_id	$RUST/src/sys/pal/wasi/net.rs	/^        pub sin6_scope_id: u32,$/;"	m	struct:netc::sockaddr_in6
sin6_scope_id	$RUST/src/sys/pal/windows/c.rs	/^    pub sin6_scope_id: c_ulong,$/;"	m	struct:sockaddr_in6
sin6_scope_id	$RUST/src/sys/pal/xous/net/mod.rs	/^        pub sin6_scope_id: u32,$/;"	m	struct:netc::sockaddr_in6
sin_addr	$RUST/src/sys/pal/sgx/net.rs	/^        pub sin_addr: in_addr,$/;"	m	struct:netc::sockaddr_in
sin_addr	$RUST/src/sys/pal/solid/abi/sockets.rs	/^    pub sin_addr: in_addr,$/;"	m	struct:sockaddr_in
sin_addr	$RUST/src/sys/pal/teeos/net.rs	/^        pub sin_addr: in_addr,$/;"	m	struct:netc::sockaddr_in
sin_addr	$RUST/src/sys/pal/unsupported/net.rs	/^        pub sin_addr: in_addr,$/;"	m	struct:netc::sockaddr_in
sin_addr	$RUST/src/sys/pal/wasi/net.rs	/^        pub sin_addr: in_addr,$/;"	m	struct:netc::sockaddr_in
sin_addr	$RUST/src/sys/pal/windows/c.rs	/^    pub sin_addr: in_addr,$/;"	m	struct:sockaddr_in
sin_addr	$RUST/src/sys/pal/xous/net/mod.rs	/^        pub sin_addr: in_addr,$/;"	m	struct:netc::sockaddr_in
sin_cos	$RUST/src/f32.rs	/^    pub fn sin_cos(self) -> (f32, f32) {$/;"	P	implementation:f32	signature:(self) -> (f32, f32)
sin_cos	$RUST/src/f64.rs	/^    pub fn sin_cos(self) -> (f64, f64) {$/;"	P	implementation:f64	signature:(self) -> (f64, f64)
sin_family	$RUST/src/sys/pal/sgx/net.rs	/^        pub sin_family: sa_family_t,$/;"	m	struct:netc::sockaddr_in
sin_family	$RUST/src/sys/pal/solid/abi/sockets.rs	/^    pub sin_family: sa_family_t,$/;"	m	struct:sockaddr_in
sin_family	$RUST/src/sys/pal/teeos/net.rs	/^        pub sin_family: sa_family_t,$/;"	m	struct:netc::sockaddr_in
sin_family	$RUST/src/sys/pal/unsupported/net.rs	/^        pub sin_family: sa_family_t,$/;"	m	struct:netc::sockaddr_in
sin_family	$RUST/src/sys/pal/wasi/net.rs	/^        pub sin_family: sa_family_t,$/;"	m	struct:netc::sockaddr_in
sin_family	$RUST/src/sys/pal/windows/c.rs	/^    pub sin_family: ADDRESS_FAMILY,$/;"	m	struct:sockaddr_in
sin_family	$RUST/src/sys/pal/xous/net/mod.rs	/^        pub sin_family: sa_family_t,$/;"	m	struct:netc::sockaddr_in
sin_len	$RUST/src/sys/pal/solid/abi/sockets.rs	/^    pub sin_len: u8,$/;"	m	struct:sockaddr_in
sin_port	$RUST/src/sys/pal/sgx/net.rs	/^        pub sin_port: u16,$/;"	m	struct:netc::sockaddr_in
sin_port	$RUST/src/sys/pal/solid/abi/sockets.rs	/^    pub sin_port: in_port_t,$/;"	m	struct:sockaddr_in
sin_port	$RUST/src/sys/pal/teeos/net.rs	/^        pub sin_port: u16,$/;"	m	struct:netc::sockaddr_in
sin_port	$RUST/src/sys/pal/unsupported/net.rs	/^        pub sin_port: u16,$/;"	m	struct:netc::sockaddr_in
sin_port	$RUST/src/sys/pal/wasi/net.rs	/^        pub sin_port: u16,$/;"	m	struct:netc::sockaddr_in
sin_port	$RUST/src/sys/pal/windows/c.rs	/^    pub sin_port: USHORT,$/;"	m	struct:sockaddr_in
sin_port	$RUST/src/sys/pal/xous/net/mod.rs	/^        pub sin_port: u16,$/;"	m	struct:netc::sockaddr_in
sin_zero	$RUST/src/sys/pal/solid/abi/sockets.rs	/^    pub sin_zero: [c_char; 8usize],$/;"	m	struct:sockaddr_in
sin_zero	$RUST/src/sys/pal/windows/c.rs	/^    pub sin_zero: [CHAR; 8],$/;"	m	struct:sockaddr_in
since_epoch	$RUST/src/time/tests.rs	/^fn since_epoch() {$/;"	f	signature:()
single_formatted_write	$RUST/src/io/buffered/tests.rs	/^fn single_formatted_write() {$/;"	f	signature:()
single_line_formatting	$RUST/src/error/tests.rs	/^fn single_line_formatting() {$/;"	f	signature:()
single_words	$RUST/src/sys/pal/windows/args/tests.rs	/^fn single_words() {$/;"	f	signature:()
sinh	$RUST/src/f32.rs	/^    pub fn sinh(self) -> f32 {$/;"	P	implementation:f32	signature:(self) -> f32
sinh	$RUST/src/f64.rs	/^    pub fn sinh(self) -> f64 {$/;"	P	implementation:f64	signature:(self) -> f64
sinh	$RUST/src/sys/cmath/builtins.rs	/^    pub fn sinh(n: f64) -> f64;$/;"	f	signature:(n: f64) -> f64
sinh	$RUST/src/sys/cmath/windows.rs	/^    pub fn sinh(n: c_double) -> c_double;$/;"	f	signature:(n: c_double) -> c_double
sinhf	$RUST/src/sys/cmath/builtins.rs	/^    pub fn sinhf(n: f32) -> f32;$/;"	f	signature:(n: f32) -> f32
sinhf	$RUST/src/sys/cmath/windows.rs	/^    pub unsafe fn sinhf(n: c_float) -> c_float {$/;"	f	module:shims	signature:(n: c_float) -> c_float
sink	$RUST/src/io/util.rs	/^pub const fn sink() -> Sink {$/;"	f	signature:() -> Sink
sink_sinks	$RUST/src/io/util/tests.rs	/^fn sink_sinks() {$/;"	f	signature:()
size	$RUST/src/os/unix/fs.rs	/^    fn size(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
size	$RUST/src/os/wasi/fs.rs	/^    fn size(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
size	$RUST/src/sys/pal/hermit/fs.rs	/^    pub fn size(&self) -> u64 {$/;"	P	implementation:FileAttr	signature:(&self) -> u64
size	$RUST/src/sys/pal/solid/fs.rs	/^    pub fn size(&self) -> u64 {$/;"	P	implementation:FileAttr	signature:(&self) -> u64
size	$RUST/src/sys/pal/unix/fs.rs	/^    pub fn size(&self) -> u64 {$/;"	P	implementation:FileAttr	signature:(&self) -> u64
size	$RUST/src/sys/pal/unsupported/fs.rs	/^    pub fn size(&self) -> u64 {$/;"	P	implementation:FileAttr	signature:(&self) -> u64
size	$RUST/src/sys/pal/wasi/fs.rs	/^    pub fn size(&self) -> u64 {$/;"	P	implementation:FileAttr	signature:(&self) -> u64
size	$RUST/src/sys/pal/windows/api.rs	/^    fn size(&self) -> u32;$/;"	P	interface:SetFileInformation	signature:(&self) -> u32
size	$RUST/src/sys/pal/windows/fs.rs	/^    pub fn size(&self) -> u64 {$/;"	P	implementation:FileAttr	signature:(&self) -> u64
size	$RUST/src/sys/pal/windows/process.rs	/^    size: usize,$/;"	m	struct:ProcThreadAttributeValue
size_hint	$RUST/src/collections/hash/map.rs	/^    fn size_hint(&self) -> (usize, Option<usize>) {$/;"	f	signature:(&self) -> (usize, Option<usize>)
size_hint	$RUST/src/collections/hash/set.rs	/^    fn size_hint(&self) -> (usize, Option<usize>) {$/;"	f	signature:(&self) -> (usize, Option<usize>)
size_hint	$RUST/src/env.rs	/^    fn size_hint(&self) -> (usize, Option<usize>) {$/;"	P	implementation:VarsOs	signature:(&self) -> (usize, Option<usize>)
size_hint	$RUST/src/io/mod.rs	/^    fn size_hint(&self) -> (usize, Option<usize>) {$/;"	P	interface:SizeHint	signature:(&self) -> (usize, Option<usize>)
size_hint	$RUST/src/os/unix/net/listener.rs	/^    fn size_hint(&self) -> (usize, Option<usize>) {$/;"	P	implementation:Incoming	signature:(&self) -> (usize, Option<usize>)
size_hint	$RUST/src/process.rs	/^    fn size_hint(&self) -> (usize, Option<usize>) {$/;"	P	implementation:CommandArgs	signature:(&self) -> (usize, Option<usize>)
size_hint	$RUST/src/sys/pal/hermit/args.rs	/^    fn size_hint(&self) -> (usize, Option<usize>) {$/;"	P	implementation:Args	signature:(&self) -> (usize, Option<usize>)
size_hint	$RUST/src/sys/pal/hermit/os.rs	/^    fn size_hint(&self) -> (usize, Option<usize>) {$/;"	P	implementation:Env	signature:(&self) -> (usize, Option<usize>)
size_hint	$RUST/src/sys/pal/sgx/args.rs	/^    fn size_hint(&self) -> (usize, Option<usize>) {$/;"	P	implementation:Args	signature:(&self) -> (usize, Option<usize>)
size_hint	$RUST/src/sys/pal/sgx/os.rs	/^    fn size_hint(&self) -> (usize, Option<usize>) {$/;"	P	implementation:Env	signature:(&self) -> (usize, Option<usize>)
size_hint	$RUST/src/sys/pal/solid/os.rs	/^    fn size_hint(&self) -> (usize, Option<usize>) {$/;"	P	implementation:Env	signature:(&self) -> (usize, Option<usize>)
size_hint	$RUST/src/sys/pal/uefi/args.rs	/^    fn size_hint(&self) -> (usize, Option<usize>) {$/;"	P	implementation:Args	signature:(&self) -> (usize, Option<usize>)
size_hint	$RUST/src/sys/pal/unix/args.rs	/^    fn size_hint(&self) -> (usize, Option<usize>) {$/;"	P	implementation:Args	signature:(&self) -> (usize, Option<usize>)
size_hint	$RUST/src/sys/pal/unix/os.rs	/^    fn size_hint(&self) -> (usize, Option<usize>) {$/;"	P	implementation:SplitPaths	signature:(&self) -> (usize, Option<usize>)
size_hint	$RUST/src/sys/pal/unix/process/process_common.rs	/^    fn size_hint(&self) -> (usize, Option<usize>) {$/;"	P	implementation:CommandArgs	signature:(&self) -> (usize, Option<usize>)
size_hint	$RUST/src/sys/pal/unsupported/args.rs	/^    fn size_hint(&self) -> (usize, Option<usize>) {$/;"	P	implementation:Args	signature:(&self) -> (usize, Option<usize>)
size_hint	$RUST/src/sys/pal/unsupported/process.rs	/^    fn size_hint(&self) -> (usize, Option<usize>) {$/;"	P	implementation:CommandArgs	signature:(&self) -> (usize, Option<usize>)
size_hint	$RUST/src/sys/pal/wasi/args.rs	/^    fn size_hint(&self) -> (usize, Option<usize>) {$/;"	P	implementation:Args	signature:(&self) -> (usize, Option<usize>)
size_hint	$RUST/src/sys/pal/wasi/os.rs	/^    fn size_hint(&self) -> (usize, Option<usize>) {$/;"	P	implementation:Env	signature:(&self) -> (usize, Option<usize>)
size_hint	$RUST/src/sys/pal/windows/args.rs	/^    fn size_hint(&self) -> (usize, Option<usize>) {$/;"	P	implementation:Args	signature:(&self) -> (usize, Option<usize>)
size_hint	$RUST/src/sys/pal/windows/process.rs	/^    fn size_hint(&self) -> (usize, Option<usize>) {$/;"	P	implementation:CommandArgs	signature:(&self) -> (usize, Option<usize>)
size_hint	$RUST/src/sys/pal/zkvm/args.rs	/^    fn size_hint(&self) -> (usize, Option<usize>) {$/;"	P	implementation:Args	signature:(&self) -> (usize, Option<usize>)
size_hint	$RUST/src/sys_common/process.rs	/^    fn size_hint(&self) -> (usize, Option<usize>) {$/;"	P	implementation:CommandEnvs	signature:(&self) -> (usize, Option<usize>)
size_hint	$RUST/src/sys_common/wtf8.rs	/^    fn size_hint(&self) -> (usize, Option<usize>) {$/;"	P	implementation:Wtf8CodePoints	signature:(&self) -> (usize, Option<usize>)
skip_until	$RUST/src/io/mod.rs	/^fn skip_until<R: BufRead + ?Sized>(r: &mut R, delim: u8) -> Result<usize> {$/;"	f	signature:<R: BufRead + ?Sized>(r: &mut R, delim: u8) -> Result<usize>
skip_until	$RUST/src/io/tests.rs	/^fn skip_until() {$/;"	f	signature:()
sleep	$RUST/src/sys/pal/hermit/thread.rs	/^    pub fn sleep(dur: Duration) {$/;"	P	implementation:Thread	signature:(dur: Duration)
sleep	$RUST/src/sys/pal/itron/thread.rs	/^    pub fn sleep(dur: Duration) {$/;"	P	implementation:Thread	signature:(dur: Duration)
sleep	$RUST/src/sys/pal/sgx/thread.rs	/^    pub fn sleep(dur: Duration) {$/;"	P	implementation:Thread	signature:(dur: Duration)
sleep	$RUST/src/sys/pal/sgx/waitqueue/spin_mutex/tests.rs	/^fn sleep() {$/;"	f	signature:()
sleep	$RUST/src/sys/pal/teeos/thread.rs	/^    pub fn sleep(dur: Duration) {$/;"	P	implementation:Thread	signature:(dur: Duration)
sleep	$RUST/src/sys/pal/unix/thread.rs	/^    pub fn sleep(dur: Duration) {$/;"	P	implementation:Thread	signature:(dur: Duration)
sleep	$RUST/src/sys/pal/unsupported/thread.rs	/^    pub fn sleep(_dur: Duration) {$/;"	P	implementation:Thread	signature:(_dur: Duration)
sleep	$RUST/src/sys/pal/wasi/thread.rs	/^    pub fn sleep(dur: Duration) {$/;"	P	implementation:Thread	signature:(dur: Duration)
sleep	$RUST/src/sys/pal/wasm/atomics/thread.rs	/^    pub fn sleep(dur: Duration) {$/;"	P	implementation:Thread	signature:(dur: Duration)
sleep	$RUST/src/sys/pal/windows/thread.rs	/^    pub fn sleep(dur: Duration) {$/;"	P	implementation:Thread	signature:(dur: Duration)
sleep	$RUST/src/sys/pal/xous/thread.rs	/^    pub fn sleep(dur: Duration) {$/;"	P	implementation:Thread	signature:(dur: Duration)
sleep	$RUST/src/thread/mod.rs	/^pub fn sleep(dur: Duration) {$/;"	f	signature:(dur: Duration)
sleep_ms	$RUST/src/thread/mod.rs	/^pub fn sleep_ms(ms: u32) {$/;"	f	signature:(ms: u32)
sleep_ms_smoke	$RUST/src/thread/tests.rs	/^fn sleep_ms_smoke() {$/;"	f	signature:()
sleep_until	$RUST/src/thread/mod.rs	/^pub fn sleep_until(deadline: Instant) {$/;"	f	signature:(deadline: Instant)
slice	$RUST/src/io/tests.rs	/^    slice: &'a [u8],$/;"	m	struct:ExampleSliceReader
slice	$RUST/src/sys/pal/hermit/os.rs	/^    slice: &'a [(OsString, OsString)],$/;"	m	struct:EnvStrDebug
slice	$RUST/src/sys/pal/sgx/os.rs	/^    slice: &'a [(OsString, OsString)],$/;"	m	struct:EnvStrDebug
slice	$RUST/src/sys/pal/solid/os.rs	/^    slice: &'a [(OsString, OsString)],$/;"	m	struct:EnvStrDebug
slice	$RUST/src/sys/pal/unix/os.rs	/^    slice: &'a [(OsString, OsString)],$/;"	m	struct:EnvStrDebug
slice	$RUST/src/sys/pal/wasi/os.rs	/^    slice: &'a [(OsString, OsString)],$/;"	m	struct:EnvStrDebug
slice_between_surrogates	$RUST/src/ffi/os_str/tests.rs	/^fn slice_between_surrogates() {$/;"	f	signature:()
slice_debug_output	$RUST/src/sys/os_str/bytes/tests.rs	/^fn slice_debug_output() {$/;"	f	signature:()
slice_encoded_bytes	$RUST/src/ffi/os_str.rs	/^    pub fn slice_encoded_bytes<R: ops::RangeBounds<usize>>(&self, range: R) -> &Self {$/;"	P	implementation:OsStr	signature:<R: ops::RangeBounds<usize>>(&self, range: R) -> &Self
slice_encoded_bytes	$RUST/src/ffi/os_str/tests.rs	/^fn slice_encoded_bytes() {$/;"	f	signature:()
slice_error_fail	$RUST/src/sys_common/wtf8.rs	/^pub fn slice_error_fail(s: &Wtf8, begin: usize, end: usize) -> ! {$/;"	f	signature:(s: &Wtf8, begin: usize, end: usize) -> !
slice_mid_char	$RUST/src/ffi/os_str/tests.rs	/^fn slice_mid_char() {$/;"	f	signature:()
slice_size_hint	$RUST/src/io/tests.rs	/^fn slice_size_hint() {$/;"	f	signature:()
slice_surrogate_edge	$RUST/src/ffi/os_str/tests.rs	/^fn slice_surrogate_edge() {$/;"	f	signature:()
slice_to_end	$RUST/src/sys/pal/windows/pipe.rs	/^unsafe fn slice_to_end(v: &mut Vec<u8>) -> &mut [u8] {$/;"	f	signature:(v: &mut Vec<u8>) -> &mut [u8]
slice_unchecked	$RUST/src/sys_common/wtf8.rs	/^pub unsafe fn slice_unchecked(s: &Wtf8, begin: usize, end: usize) -> &Wtf8 {$/;"	f	signature:(s: &Wtf8, begin: usize, end: usize) -> &Wtf8
slice_write	$RUST/src/io/cursor.rs	/^fn slice_write(pos_mut: &mut u64, slice: &mut [u8], buf: &[u8]) -> io::Result<usize> {$/;"	f	signature:(pos_mut: &mut u64, slice: &mut [u8], buf: &[u8]) -> io::Result<usize>
slice_write_vectored	$RUST/src/io/cursor.rs	/^fn slice_write_vectored($/;"	f	signature:( pos_mut: &mut u64, slice: &mut [u8], bufs: &[IoSlice<'_>], ) -> io::Result<usize>
slot	$RUST/src/sync/mpmc/array.rs	/^    slot: *const u8,$/;"	m	struct:ArrayToken
slots	$RUST/src/sync/mpmc/list.rs	/^    slots: [Slot<T>; BLOCK_CAP],$/;"	m	struct:Block
slp_tsk	$RUST/src/sys/pal/itron/abi.rs	/^    pub fn slp_tsk() -> ER;$/;"	f	signature:() -> ER
small_c_string	$RUST/src/sys/pal/common/mod.rs	/^pub mod small_c_string;$/;"	n
small_probe_read	$RUST/src/io/mod.rs	/^    fn small_probe_read<R: Read + ?Sized>(r: &mut R, buf: &mut Vec<u8>) -> Result<usize> {$/;"	f	function:default_read_to_end	signature:<R: Read + ?Sized>(r: &mut R, buf: &mut Vec<u8>) -> Result<usize>
smoke	$RUST/src/process/tests.rs	/^fn smoke() {$/;"	f	signature:()
smoke	$RUST/src/sync/condvar/tests.rs	/^fn smoke() {$/;"	f	signature:()
smoke	$RUST/src/sync/mpsc/sync_tests.rs	/^fn smoke() {$/;"	f	signature:()
smoke	$RUST/src/sync/mpsc/tests.rs	/^fn smoke() {$/;"	f	signature:()
smoke	$RUST/src/sync/mutex/tests.rs	/^fn smoke() {$/;"	f	signature:()
smoke	$RUST/src/sync/remutex/tests.rs	/^fn smoke() {$/;"	f	signature:()
smoke	$RUST/src/sync/rwlock/tests.rs	/^fn smoke() {$/;"	f	signature:()
smoke	$RUST/src/sys/pal/windows/thread_local_key/tests.rs	/^fn smoke() {$/;"	f	signature:()
smoke	$RUST/src/thread/local/dynamic_tests.rs	/^fn smoke() {$/;"	f	signature:()
smoke_chan_gone	$RUST/src/sync/mpsc/sync_tests.rs	/^fn smoke_chan_gone() {$/;"	f	signature:()
smoke_chan_gone	$RUST/src/sync/mpsc/tests.rs	/^fn smoke_chan_gone() {$/;"	f	signature:()
smoke_chan_gone_shared	$RUST/src/sync/mpsc/sync_tests.rs	/^fn smoke_chan_gone_shared() {$/;"	f	signature:()
smoke_chan_gone_shared	$RUST/src/sync/mpsc/tests.rs	/^fn smoke_chan_gone_shared() {$/;"	f	signature:()
smoke_dtor	$RUST/src/thread/local/tests.rs	/^fn smoke_dtor() {$/;"	f	signature:()
smoke_failure	$RUST/src/process/tests.rs	/^fn smoke_failure() {$/;"	f	signature:()
smoke_no_dtor	$RUST/src/thread/local/tests.rs	/^fn smoke_no_dtor() {$/;"	f	signature:()
smoke_once	$RUST/src/sync/once/tests.rs	/^fn smoke_once() {$/;"	f	signature:()
smoke_port_gone	$RUST/src/sync/mpsc/sync_tests.rs	/^fn smoke_port_gone() {$/;"	f	signature:()
smoke_port_gone	$RUST/src/sync/mpsc/tests.rs	/^fn smoke_port_gone() {$/;"	f	signature:()
smoke_shared	$RUST/src/sync/mpsc/sync_tests.rs	/^fn smoke_shared() {$/;"	f	signature:()
smoke_shared	$RUST/src/sync/mpsc/tests.rs	/^fn smoke_shared() {$/;"	f	signature:()
smoke_shared_port_gone	$RUST/src/sync/mpsc/tests.rs	/^fn smoke_shared_port_gone() {$/;"	f	signature:()
smoke_shared_port_gone2	$RUST/src/sync/mpsc/sync_tests.rs	/^fn smoke_shared_port_gone2() {$/;"	f	signature:()
smoke_shared_port_gone2	$RUST/src/sync/mpsc/tests.rs	/^fn smoke_shared_port_gone2() {$/;"	f	signature:()
smoke_test	$RUST/src/net/tcp/tests.rs	/^fn smoke_test() {$/;"	f	signature:()
smoke_threads	$RUST/src/sync/mpsc/sync_tests.rs	/^fn smoke_threads() {$/;"	f	signature:()
smoke_threads	$RUST/src/sync/mpsc/tests.rs	/^fn smoke_threads() {$/;"	f	signature:()
sns_dsp	$RUST/src/sys/pal/itron/abi.rs	/^    pub fn sns_dsp() -> bool_t;$/;"	f	signature:() -> bool_t
sock_accept	$RUST/src/os/wasi/net/mod.rs	/^    fn sock_accept(&self, flags: u16) -> io::Result<u32>;$/;"	P	interface:TcpListenerExt	signature:(&self, flags: u16) -> io::Result<u32>
sock_accept	$RUST/src/sys/pal/wasi/fd.rs	/^    pub fn sock_accept(&self, flags: wasi::Fdflags) -> io::Result<wasi::Fd> {$/;"	P	implementation:WasiFd	signature:(&self, flags: wasi::Fdflags) -> io::Result<wasi::Fd>
sock_recv	$RUST/src/sys/pal/wasi/fd.rs	/^    pub fn sock_recv($/;"	P	implementation:WasiFd	signature:( &self, ri_data: &mut [IoSliceMut<'_>], ri_flags: wasi::Riflags, ) -> io::Result<(usize, wasi::Roflags)>
sock_send	$RUST/src/sys/pal/wasi/fd.rs	/^    pub fn sock_send(&self, si_data: &[IoSlice<'_>], si_flags: wasi::Siflags) -> io::Result<usiz/;"	P	implementation:WasiFd	signature:(&self, si_data: &[IoSlice<'_>], si_flags: wasi::Siflags) -> io::Result<usize>
sock_shutdown	$RUST/src/sys/pal/wasi/fd.rs	/^    pub fn sock_shutdown(&self, how: Shutdown) -> io::Result<()> {$/;"	P	implementation:WasiFd	signature:(&self, how: Shutdown) -> io::Result<()>
sockaddr	$RUST/src/os/unix/net/addr.rs	/^    pub struct sockaddr;$/;"	s	module:libc
sockaddr	$RUST/src/sys/pal/sgx/net.rs	/^    pub struct sockaddr {}$/;"	s	module:netc
sockaddr	$RUST/src/sys/pal/solid/abi/sockets.rs	/^pub struct sockaddr {$/;"	s
sockaddr	$RUST/src/sys/pal/teeos/net.rs	/^    pub struct sockaddr {}$/;"	s	module:netc
sockaddr	$RUST/src/sys/pal/xous/net/mod.rs	/^    pub struct sockaddr {}$/;"	s	module:netc
sockaddr_in	$RUST/src/sys/pal/sgx/net.rs	/^    pub struct sockaddr_in {$/;"	s	module:netc
sockaddr_in	$RUST/src/sys/pal/solid/abi/sockets.rs	/^pub struct sockaddr_in {$/;"	s
sockaddr_in	$RUST/src/sys/pal/teeos/net.rs	/^    pub struct sockaddr_in {$/;"	s	module:netc
sockaddr_in	$RUST/src/sys/pal/unsupported/net.rs	/^    pub struct sockaddr_in {$/;"	s	module:netc
sockaddr_in	$RUST/src/sys/pal/wasi/net.rs	/^    pub struct sockaddr_in {$/;"	s	module:netc
sockaddr_in	$RUST/src/sys/pal/windows/c.rs	/^pub struct sockaddr_in {$/;"	s
sockaddr_in	$RUST/src/sys/pal/xous/net/mod.rs	/^    pub struct sockaddr_in {$/;"	s	module:netc
sockaddr_in6	$RUST/src/sys/pal/sgx/net.rs	/^    pub struct sockaddr_in6 {$/;"	s	module:netc
sockaddr_in6	$RUST/src/sys/pal/solid/abi/sockets.rs	/^pub struct sockaddr_in6 {$/;"	s
sockaddr_in6	$RUST/src/sys/pal/teeos/net.rs	/^    pub struct sockaddr_in6 {$/;"	s	module:netc
sockaddr_in6	$RUST/src/sys/pal/unsupported/net.rs	/^    pub struct sockaddr_in6 {$/;"	s	module:netc
sockaddr_in6	$RUST/src/sys/pal/wasi/net.rs	/^    pub struct sockaddr_in6 {$/;"	s	module:netc
sockaddr_in6	$RUST/src/sys/pal/windows/c.rs	/^pub struct sockaddr_in6 {$/;"	s
sockaddr_in6	$RUST/src/sys/pal/xous/net/mod.rs	/^    pub struct sockaddr_in6 {$/;"	s	module:netc
sockaddr_storage	$RUST/src/sys/pal/solid/abi/sockets.rs	/^pub struct sockaddr_storage {$/;"	s
sockaddr_to_addr	$RUST/src/sys_common/net.rs	/^pub fn sockaddr_to_addr(storage: &c::sockaddr_storage, len: usize) -> io::Result<SocketAddr> {$/;"	f	signature:(storage: &c::sockaddr_storage, len: usize) -> io::Result<SocketAddr>
sockaddr_to_buf	$RUST/src/sys/pal/xous/net/tcpstream.rs	/^fn sockaddr_to_buf(duration: Duration, addr: &SocketAddr, buf: &mut [u8]) {$/;"	f	signature:(duration: Duration, addr: &SocketAddr, buf: &mut [u8])
sockaddr_un	$RUST/src/os/unix/net/addr.rs	/^pub(super) fn sockaddr_un(path: &Path) -> io::Result<(libc::sockaddr_un, libc::socklen_t)> {$/;"	f	signature:(path: &Path) -> io::Result<(libc::sockaddr_un, libc::socklen_t)>
sockcred2	$RUST/src/os/unix/net/ancillary.rs	/^    pub struct sockcred2;$/;"	s	module:libc
socket	$RUST/src/os/windows/io/mod.rs	/^mod socket;$/;"	n
socket	$RUST/src/os/windows/io/socket.rs	/^    socket: RawSocket,$/;"	m	struct:OwnedSocket
socket	$RUST/src/sys/pal/solid/abi/sockets.rs	/^    pub fn socket(domain: c_int, type_: c_int, protocol: c_int) -> c_int;$/;"	f	signature:(domain: c_int, type_: c_int, protocol: c_int) -> c_int
socket	$RUST/src/sys/pal/unix/l4re.rs	/^        pub fn socket(&self) -> &Socket {$/;"	P	implementation:net::UdpSocket	signature:(&self) -> &Socket
socket	$RUST/src/sys/pal/wasi/net.rs	/^    pub fn socket(&self) -> &Socket {$/;"	P	implementation:UdpSocket	signature:(&self) -> &Socket
socket	$RUST/src/sys_common/net.rs	/^    pub fn socket(&self) -> &Socket {$/;"	P	implementation:UdpSocket	signature:(&self) -> &Socket
socket_addr	$RUST/src/net/mod.rs	/^mod socket_addr;$/;"	n
socket_addr	$RUST/src/sys/pal/sgx/net.rs	/^    pub fn socket_addr(&self) -> io::Result<SocketAddr> {$/;"	P	implementation:UdpSocket	signature:(&self) -> io::Result<SocketAddr>
socket_addr	$RUST/src/sys/pal/teeos/net.rs	/^    pub fn socket_addr(&self) -> io::Result<SocketAddr> {$/;"	P	implementation:UdpSocket	signature:(&self) -> io::Result<SocketAddr>
socket_addr	$RUST/src/sys/pal/unix/l4re.rs	/^        pub fn socket_addr(&self) -> io::Result<SocketAddr> {$/;"	P	implementation:net::UdpSocket	signature:(&self) -> io::Result<SocketAddr>
socket_addr	$RUST/src/sys/pal/unsupported/net.rs	/^    pub fn socket_addr(&self) -> io::Result<SocketAddr> {$/;"	P	implementation:UdpSocket	signature:(&self) -> io::Result<SocketAddr>
socket_addr	$RUST/src/sys/pal/wasi/net.rs	/^    pub fn socket_addr(&self) -> io::Result<SocketAddr> {$/;"	P	implementation:UdpSocket	signature:(&self) -> io::Result<SocketAddr>
socket_addr	$RUST/src/sys/pal/xous/net/tcplistener.rs	/^    pub fn socket_addr(&self) -> io::Result<SocketAddr> {$/;"	P	implementation:TcpListener	signature:(&self) -> io::Result<SocketAddr>
socket_addr	$RUST/src/sys/pal/xous/net/tcpstream.rs	/^    pub fn socket_addr(&self) -> io::Result<SocketAddr> {$/;"	P	implementation:TcpStream	signature:(&self) -> io::Result<SocketAddr>
socket_addr	$RUST/src/sys/pal/xous/net/udp.rs	/^    pub fn socket_addr(&self) -> io::Result<SocketAddr> {$/;"	P	implementation:UdpSocket	signature:(&self) -> io::Result<SocketAddr>
socket_addr	$RUST/src/sys_common/net.rs	/^    pub fn socket_addr(&self) -> io::Result<SocketAddr> {$/;"	P	implementation:UdpSocket	signature:(&self) -> io::Result<SocketAddr>
socket_and_peer_name	$RUST/src/net/tcp/tests.rs	/^fn socket_and_peer_name() {$/;"	f	signature:()
socket_name	$RUST/src/net/udp/tests.rs	/^fn socket_name() {$/;"	f	signature:()
socket_peer	$RUST/src/net/udp/tests.rs	/^fn socket_peer() {$/;"	f	signature:()
socket_smoke_test_ip4	$RUST/src/net/udp/tests.rs	/^fn socket_smoke_test_ip4() {$/;"	f	signature:()
socket_v4_to_str	$RUST/src/net/socket_addr/tests.rs	/^fn socket_v4_to_str() {$/;"	f	signature:()
socket_v6_to_str	$RUST/src/net/socket_addr/tests.rs	/^fn socket_v6_to_str() {$/;"	f	signature:()
sockets	$RUST/src/sys/pal/solid/abi/mod.rs	/^pub mod sockets;$/;"	n
socklen_t	$RUST/src/os/unix/net/addr.rs	/^    pub type socklen_t = u32;$/;"	t	module:libc
socklen_t	$RUST/src/sys/pal/solid/abi/sockets.rs	/^pub type socklen_t = u32;$/;"	t
socklen_t	$RUST/src/sys/pal/windows/c.rs	/^pub type socklen_t = c_int;$/;"	t
sockname	$RUST/src/sys_common/net.rs	/^fn sockname<F>(f: F) -> io::Result<SocketAddr>$/;"	f	signature:<F>(f: F) -> io::Result<SocketAddr> where F: FnOnce(*mut c::sockaddr, *mut c::socklen_t) -> c_int,
soft_link	$RUST/src/fs.rs	/^pub fn soft_link<P: AsRef<Path>, Q: AsRef<Path>>(original: P, link: Q) -> io::Result<()> {$/;"	f	signature:<P: AsRef<Path>, Q: AsRef<Path>>(original: P, link: Q) -> io::Result<()>
solaris	$RUST/src/os/mod.rs	/^pub mod solaris;$/;"	n
solid	$RUST/src/os/mod.rs	/^pub mod solid;$/;"	n
source	$RUST/src/error/tests.rs	/^    source: SuperErrorSideKick,$/;"	m	struct:SuperError
source	$RUST/src/io/error.rs	/^    fn source(&self) -> Option<&(dyn error::Error + 'static)> {$/;"	P	implementation:Error	signature:(&self) -> Option<&(dyn error::Error + 'static)>
spare_capacity	$RUST/src/io/buffered/bufwriter.rs	/^    fn spare_capacity(&self) -> usize {$/;"	P	implementation:BufWriter	signature:(&self) -> usize
spawn	$RUST/src/process.rs	/^    pub fn spawn(&mut self) -> io::Result<Child> {$/;"	P	implementation:Command	signature:(&mut self) -> io::Result<Child>
spawn	$RUST/src/sys/pal/unix/process/process_fuchsia.rs	/^    pub fn spawn($/;"	P	implementation:Command	signature:( &mut self, default: Stdio, needs_stdin: bool, ) -> io::Result<(Process, StdioPipes)>
spawn	$RUST/src/sys/pal/unix/process/process_unix.rs	/^    pub fn spawn($/;"	P	implementation:Command	signature:( &mut self, default: Stdio, needs_stdin: bool, ) -> io::Result<(Process, StdioPipes)>
spawn	$RUST/src/sys/pal/unix/process/process_unsupported.rs	/^    pub fn spawn($/;"	P	implementation:Command	signature:( &mut self, _default: Stdio, _needs_stdin: bool, ) -> io::Result<(Process, StdioPipes)>
spawn	$RUST/src/sys/pal/unix/process/process_vxworks.rs	/^    pub fn spawn($/;"	P	implementation:Command	signature:( &mut self, default: Stdio, needs_stdin: bool, ) -> io::Result<(Process, StdioPipes)>
spawn	$RUST/src/sys/pal/unsupported/process.rs	/^    pub fn spawn($/;"	P	implementation:Command	signature:( &mut self, _default: Stdio, _needs_stdin: bool, ) -> io::Result<(Process, StdioPipes)>
spawn	$RUST/src/sys/pal/windows/process.rs	/^    pub fn spawn($/;"	P	implementation:Command	signature:( &mut self, default: Stdio, needs_stdin: bool, ) -> io::Result<(Process, StdioPipes)>
spawn	$RUST/src/thread/mod.rs	/^pub fn spawn<F, T>(f: F) -> JoinHandle<T>$/;"	f	signature:<F, T>(f: F) -> JoinHandle<T> where F: FnOnce() -> T, F: Send + 'static, T: Send + 'static,
spawn	$RUST/src/thread/scoped.rs	/^    pub fn spawn<F, T>(&'scope self, f: F) -> ScopedJoinHandle<'scope, T>$/;"	P	implementation:Scope	signature:<F, T>(&'scope self, f: F) -> ScopedJoinHandle<'scope, T> where F: FnOnce() -> T + Send + 'scope, T: Send + 'scope,
spawn_and_wait	$RUST/src/sync/lazy_lock/tests.rs	/^fn spawn_and_wait<R: Send + 'static>(f: impl FnOnce() -> R + Send + 'static) -> R {$/;"	f	signature:<R: Send + 'static>(f: impl FnOnce() -> R + Send + 'static) -> R
spawn_and_wait	$RUST/src/sync/once_lock/tests.rs	/^fn spawn_and_wait<R: Send + 'static>(f: impl FnOnce() -> R + Send + 'static) -> R {$/;"	f	signature:<R: Send + 'static>(f: impl FnOnce() -> R + Send + 'static) -> R
spawn_pipe_relay	$RUST/src/sys/pal/windows/pipe.rs	/^pub fn spawn_pipe_relay($/;"	f	signature:( source: &AnonPipe, ours_readable: bool, their_handle_inheritable: bool, ) -> io::Result<AnonPipe>
spawn_scoped	$RUST/src/thread/scoped.rs	/^    pub fn spawn_scoped<'scope, 'env, F, T>($/;"	P	implementation:Builder	signature:<'scope, 'env, F, T>( self, scope: &'scope Scope<'scope, 'env>, f: F, ) -> io::Result<ScopedJoinHandle<'scope, T>> where F: FnOnce() -> T + Send + 'scope, T: Send + 'scope,
spawn_unchecked	$RUST/src/thread/mod.rs	/^    pub unsafe fn spawn_unchecked<'a, F, T>(self, f: F) -> io::Result<JoinHandle<T>>$/;"	P	implementation:Builder	signature:<'a, F, T>(self, f: F) -> io::Result<JoinHandle<T>> where F: FnOnce() -> T, F: Send + 'a, T: Send + 'a,
spawn_unchecked_	$RUST/src/thread/mod.rs	/^    unsafe fn spawn_unchecked_<'a, 'scope, F, T>($/;"	P	implementation:Builder	signature:<'a, 'scope, F, T>( self, f: F, scope_data: Option<Arc<scoped::ScopeData>>, ) -> io::Result<JoinInner<'scope, T>> where F: FnOnce() -> T, F: Send + 'a, T: Send + 'a, 'scope: 'a,
spec_read_byte	$RUST/src/io/buffered/bufreader.rs	/^    fn spec_read_byte(&mut self) -> Option<io::Result<u8>> {$/;"	f	signature:(&mut self) -> Option<io::Result<u8>>
spec_read_byte	$RUST/src/io/mod.rs	/^    fn spec_read_byte(&mut self) -> Option<Result<u8>>;$/;"	P	interface:SpecReadByte	signature:(&mut self) -> Option<Result<u8>>
spec_read_byte	$RUST/src/io/stdio.rs	/^    fn spec_read_byte(&mut self) -> Option<io::Result<u8>> {$/;"	P	implementation:StdinLock	signature:(&mut self) -> Option<io::Result<u8>>
spin	$RUST/src/sys/pal/itron/spin.rs	/^    spin: SpinMutex<()>,$/;"	m	struct:SpinIdOnceCell
spin	$RUST/src/sys/pal/solid/mod.rs	/^    pub(super) mod spin;$/;"	n	module:itron
spin	$RUST/src/sys/pal/unix/locks/futex_mutex.rs	/^    fn spin(&self) -> u32 {$/;"	P	implementation:Mutex	signature:(&self) -> u32
spin_heavy	$RUST/src/sync/mpmc/utils.rs	/^    pub fn spin_heavy(&self) {$/;"	P	implementation:Backoff	signature:(&self)
spin_light	$RUST/src/sync/mpmc/utils.rs	/^    pub fn spin_light(&self) {$/;"	P	implementation:Backoff	signature:(&self)
spin_mutex	$RUST/src/sys/pal/sgx/waitqueue/mod.rs	/^mod spin_mutex;$/;"	n
spin_read	$RUST/src/sys/pal/unix/locks/futex_rwlock.rs	/^    fn spin_read(&self) -> u32 {$/;"	P	implementation:RwLock	signature:(&self) -> u32
spin_until	$RUST/src/sys/pal/unix/locks/futex_rwlock.rs	/^    fn spin_until(&self, f: impl Fn(u32) -> bool) -> u32 {$/;"	P	implementation:RwLock	signature:(&self, f: impl Fn(u32) -> bool) -> u32
spin_write	$RUST/src/sys/pal/unix/locks/futex_rwlock.rs	/^    fn spin_write(&self) -> u32 {$/;"	P	implementation:RwLock	signature:(&self) -> u32
split	$RUST/src/io/mod.rs	/^    fn split(self, byte: u8) -> Split<Self>$/;"	P	interface:BufRead	signature:(self, byte: u8) -> Split<Self> where Self: Sized,
split	$RUST/src/io/tests.rs	/^fn split() {$/;"	f	signature:()
split	$RUST/src/sys/pal/sgx/abi/tls/sync_bitset.rs	/^    fn split(index: usize) -> (usize, usize) {$/;"	P	implementation:SyncBitset	signature:(index: usize) -> (usize, usize)
split_file_at_dot	$RUST/src/path.rs	/^fn split_file_at_dot(file: &OsStr) -> (&OsStr, Option<&OsStr>) {$/;"	f	signature:(file: &OsStr) -> (&OsStr, Option<&OsStr>)
split_paths	$RUST/src/env.rs	/^pub fn split_paths<T: AsRef<OsStr> + ?Sized>(unparsed: &T) -> SplitPaths<'_> {$/;"	f	signature:<T: AsRef<OsStr> + ?Sized>(unparsed: &T) -> SplitPaths<'_>
split_paths	$RUST/src/sys/pal/hermit/os.rs	/^pub fn split_paths(_unparsed: &OsStr) -> SplitPaths<'_> {$/;"	f	signature:(_unparsed: &OsStr) -> SplitPaths<'_>
split_paths	$RUST/src/sys/pal/sgx/os.rs	/^pub fn split_paths(_unparsed: &OsStr) -> SplitPaths<'_> {$/;"	f	signature:(_unparsed: &OsStr) -> SplitPaths<'_>
split_paths	$RUST/src/sys/pal/solid/os.rs	/^pub fn split_paths(_unparsed: &OsStr) -> SplitPaths<'_> {$/;"	f	signature:(_unparsed: &OsStr) -> SplitPaths<'_>
split_paths	$RUST/src/sys/pal/teeos/os.rs	/^pub fn split_paths(_unparsed: &OsStr) -> SplitPaths<'_> {$/;"	f	signature:(_unparsed: &OsStr) -> SplitPaths<'_>
split_paths	$RUST/src/sys/pal/uefi/os.rs	/^pub fn split_paths(_unparsed: &OsStr) -> SplitPaths<'_> {$/;"	f	signature:(_unparsed: &OsStr) -> SplitPaths<'_>
split_paths	$RUST/src/sys/pal/unix/os.rs	/^pub fn split_paths(unparsed: &OsStr) -> SplitPaths<'_> {$/;"	f	signature:(unparsed: &OsStr) -> SplitPaths<'_>
split_paths	$RUST/src/sys/pal/unsupported/os.rs	/^pub fn split_paths(_unparsed: &OsStr) -> SplitPaths<'_> {$/;"	f	signature:(_unparsed: &OsStr) -> SplitPaths<'_>
split_paths	$RUST/src/sys/pal/wasi/os.rs	/^pub fn split_paths(_unparsed: &OsStr) -> SplitPaths<'_> {$/;"	f	signature:(_unparsed: &OsStr) -> SplitPaths<'_>
split_paths	$RUST/src/sys/pal/windows/os.rs	/^pub fn split_paths(unparsed: &OsStr) -> SplitPaths<'_> {$/;"	f	signature:(unparsed: &OsStr) -> SplitPaths<'_>
split_paths	$RUST/src/sys/pal/xous/os.rs	/^pub fn split_paths(_unparsed: &OsStr) -> SplitPaths<'_> {$/;"	f	signature:(_unparsed: &OsStr) -> SplitPaths<'_>
split_paths	$RUST/src/sys/pal/zkvm/os.rs	/^pub fn split_paths(_unparsed: &OsStr) -> SplitPaths<'_> {$/;"	f	signature:(_unparsed: &OsStr) -> SplitPaths<'_>
split_paths_unix	$RUST/src/env/tests.rs	/^fn split_paths_unix() {$/;"	f	signature:()
split_paths_windows	$RUST/src/env/tests.rs	/^fn split_paths_windows() {$/;"	f	signature:()
sqrt	$RUST/src/f32.rs	/^    pub fn sqrt(self) -> f32 {$/;"	P	implementation:f32	signature:(self) -> f32
sqrt	$RUST/src/f64.rs	/^    pub fn sqrt(self) -> f64 {$/;"	P	implementation:f64	signature:(self) -> f64
square	$RUST/src/thread/local/dynamic_tests.rs	/^    fn square(i: i32) -> i32 {$/;"	f	function:smoke	signature:(i: i32) -> i32
srwlock	$RUST/src/sys/pal/windows/locks/mutex.rs	/^    srwlock: UnsafeCell<c::SRWLOCK>,$/;"	m	struct:Mutex
ss_family	$RUST/src/sys/pal/solid/abi/sockets.rs	/^    pub ss_family: sa_family_t,$/;"	m	struct:sockaddr_storage
ss_family	$RUST/src/sys/pal/windows/c.rs	/^    pub ss_family: ADDRESS_FAMILY,$/;"	m	struct:SOCKADDR_STORAGE_LH
st_atime	$RUST/src/os/aix/fs.rs	/^    fn st_atime(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_atime	$RUST/src/os/android/fs.rs	/^    fn st_atime(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_atime	$RUST/src/os/android/raw.rs	/^        pub st_atime: time_t,$/;"	m	struct:arch::stat
st_atime	$RUST/src/os/dragonfly/fs.rs	/^    fn st_atime(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_atime	$RUST/src/os/dragonfly/raw.rs	/^    pub st_atime: c_long,$/;"	m	struct:stat
st_atime	$RUST/src/os/emscripten/fs.rs	/^    fn st_atime(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_atime	$RUST/src/os/emscripten/raw.rs	/^    pub st_atime: time_t,$/;"	m	struct:stat
st_atime	$RUST/src/os/espidf/fs.rs	/^    fn st_atime(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_atime	$RUST/src/os/espidf/raw.rs	/^    pub st_atime: time_t,$/;"	m	struct:stat
st_atime	$RUST/src/os/freebsd/fs.rs	/^    fn st_atime(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_atime	$RUST/src/os/freebsd/raw.rs	/^    pub st_atime: c_long,$/;"	m	struct:stat
st_atime	$RUST/src/os/fuchsia/fs.rs	/^    fn st_atime(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_atime	$RUST/src/os/fuchsia/raw.rs	/^        pub st_atime: i64,$/;"	m	struct:arch::stat
st_atime	$RUST/src/os/haiku/fs.rs	/^    fn st_atime(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_atime	$RUST/src/os/haiku/raw.rs	/^    pub st_atime: time_t,$/;"	m	struct:stat
st_atime	$RUST/src/os/horizon/fs.rs	/^    fn st_atime(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_atime	$RUST/src/os/horizon/raw.rs	/^    pub st_atime: time_t,$/;"	m	struct:stat
st_atime	$RUST/src/os/hurd/fs.rs	/^    fn st_atime(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_atime	$RUST/src/os/illumos/fs.rs	/^    fn st_atime(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_atime	$RUST/src/os/illumos/raw.rs	/^    pub st_atime: time_t,$/;"	m	struct:stat
st_atime	$RUST/src/os/ios/fs.rs	/^    fn st_atime(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_atime	$RUST/src/os/ios/raw.rs	/^    pub st_atime: c_long,$/;"	m	struct:stat
st_atime	$RUST/src/os/l4re/fs.rs	/^    fn st_atime(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_atime	$RUST/src/os/l4re/raw.rs	/^        pub st_atime: time_t,$/;"	m	struct:arch::stat
st_atime	$RUST/src/os/linux/fs.rs	/^    fn st_atime(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_atime	$RUST/src/os/linux/raw.rs	/^        pub st_atime: time_t,$/;"	m	struct:arch::stat
st_atime	$RUST/src/os/macos/fs.rs	/^    fn st_atime(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_atime	$RUST/src/os/macos/raw.rs	/^    pub st_atime: c_long,$/;"	m	struct:stat
st_atime	$RUST/src/os/netbsd/fs.rs	/^    fn st_atime(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_atime	$RUST/src/os/netbsd/raw.rs	/^    pub st_atime: i64,$/;"	m	struct:stat
st_atime	$RUST/src/os/nto/fs.rs	/^    fn st_atime(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_atime	$RUST/src/os/openbsd/fs.rs	/^    fn st_atime(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_atime	$RUST/src/os/openbsd/raw.rs	/^    pub st_atime: i64,$/;"	m	struct:stat
st_atime	$RUST/src/os/redox/fs.rs	/^    fn st_atime(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_atime	$RUST/src/os/redox/raw.rs	/^    pub st_atime: time_t,$/;"	m	struct:stat
st_atime	$RUST/src/os/solaris/fs.rs	/^    fn st_atime(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_atime	$RUST/src/os/solaris/raw.rs	/^    pub st_atime: time_t,$/;"	m	struct:stat
st_atime	$RUST/src/os/vita/fs.rs	/^    fn st_atime(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_atime	$RUST/src/os/vita/raw.rs	/^    pub st_atime: time_t,$/;"	m	struct:stat
st_atime	$RUST/src/os/vxworks/fs.rs	/^    fn st_atime(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_atime	$RUST/src/os/watchos/fs.rs	/^    fn st_atime(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_atime	$RUST/src/os/watchos/raw.rs	/^    pub st_atime: c_long,$/;"	m	struct:stat
st_atime_nsec	$RUST/src/os/aix/fs.rs	/^    fn st_atime_nsec(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_atime_nsec	$RUST/src/os/android/fs.rs	/^    fn st_atime_nsec(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_atime_nsec	$RUST/src/os/android/raw.rs	/^        pub st_atime_nsec: c_long,$/;"	m	struct:arch::stat
st_atime_nsec	$RUST/src/os/dragonfly/fs.rs	/^    fn st_atime_nsec(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_atime_nsec	$RUST/src/os/dragonfly/raw.rs	/^    pub st_atime_nsec: c_long,$/;"	m	struct:stat
st_atime_nsec	$RUST/src/os/emscripten/fs.rs	/^    fn st_atime_nsec(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_atime_nsec	$RUST/src/os/emscripten/raw.rs	/^    pub st_atime_nsec: c_long,$/;"	m	struct:stat
st_atime_nsec	$RUST/src/os/espidf/fs.rs	/^    fn st_atime_nsec(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_atime_nsec	$RUST/src/os/freebsd/fs.rs	/^    fn st_atime_nsec(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_atime_nsec	$RUST/src/os/freebsd/raw.rs	/^    pub st_atime_nsec: c_long,$/;"	m	struct:stat
st_atime_nsec	$RUST/src/os/fuchsia/fs.rs	/^    fn st_atime_nsec(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_atime_nsec	$RUST/src/os/fuchsia/raw.rs	/^        pub st_atime_nsec: c_long,$/;"	m	struct:arch::stat
st_atime_nsec	$RUST/src/os/haiku/fs.rs	/^    fn st_atime_nsec(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_atime_nsec	$RUST/src/os/haiku/raw.rs	/^    pub st_atime_nsec: c_long,$/;"	m	struct:stat
st_atime_nsec	$RUST/src/os/horizon/fs.rs	/^    fn st_atime_nsec(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_atime_nsec	$RUST/src/os/hurd/fs.rs	/^    fn st_atime_nsec(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_atime_nsec	$RUST/src/os/illumos/fs.rs	/^    fn st_atime_nsec(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_atime_nsec	$RUST/src/os/illumos/raw.rs	/^    pub st_atime_nsec: c_long,$/;"	m	struct:stat
st_atime_nsec	$RUST/src/os/ios/fs.rs	/^    fn st_atime_nsec(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_atime_nsec	$RUST/src/os/ios/raw.rs	/^    pub st_atime_nsec: c_long,$/;"	m	struct:stat
st_atime_nsec	$RUST/src/os/l4re/fs.rs	/^    fn st_atime_nsec(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_atime_nsec	$RUST/src/os/l4re/raw.rs	/^        pub st_atime_nsec: c_long,$/;"	m	struct:arch::stat
st_atime_nsec	$RUST/src/os/linux/fs.rs	/^    fn st_atime_nsec(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_atime_nsec	$RUST/src/os/linux/raw.rs	/^        pub st_atime_nsec: c_long,$/;"	m	struct:arch::stat
st_atime_nsec	$RUST/src/os/macos/fs.rs	/^    fn st_atime_nsec(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_atime_nsec	$RUST/src/os/macos/raw.rs	/^    pub st_atime_nsec: c_long,$/;"	m	struct:stat
st_atime_nsec	$RUST/src/os/netbsd/fs.rs	/^    fn st_atime_nsec(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_atime_nsec	$RUST/src/os/netbsd/raw.rs	/^    pub st_atime_nsec: c_long,$/;"	m	struct:stat
st_atime_nsec	$RUST/src/os/nto/fs.rs	/^    fn st_atime_nsec(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_atime_nsec	$RUST/src/os/openbsd/fs.rs	/^    fn st_atime_nsec(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_atime_nsec	$RUST/src/os/openbsd/raw.rs	/^    pub st_atime_nsec: c_long,$/;"	m	struct:stat
st_atime_nsec	$RUST/src/os/redox/fs.rs	/^    fn st_atime_nsec(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_atime_nsec	$RUST/src/os/redox/raw.rs	/^    pub st_atime_nsec: c_long,$/;"	m	struct:stat
st_atime_nsec	$RUST/src/os/solaris/fs.rs	/^    fn st_atime_nsec(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_atime_nsec	$RUST/src/os/solaris/raw.rs	/^    pub st_atime_nsec: c_long,$/;"	m	struct:stat
st_atime_nsec	$RUST/src/os/vita/fs.rs	/^    fn st_atime_nsec(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_atime_nsec	$RUST/src/os/vxworks/fs.rs	/^    fn st_atime_nsec(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_atime_nsec	$RUST/src/os/watchos/fs.rs	/^    fn st_atime_nsec(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_atime_nsec	$RUST/src/os/watchos/raw.rs	/^    pub st_atime_nsec: c_long,$/;"	m	struct:stat
st_attrib	$RUST/src/os/vxworks/fs.rs	/^    fn st_attrib(&self) -> u8;$/;"	P	interface:MetadataExt	signature:(&self) -> u8
st_birthtime	$RUST/src/os/dragonfly/raw.rs	/^    pub st_birthtime: c_long,$/;"	m	struct:stat
st_birthtime	$RUST/src/os/freebsd/fs.rs	/^    fn st_birthtime(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_birthtime	$RUST/src/os/freebsd/raw.rs	/^    pub st_birthtime: c_long,$/;"	m	struct:stat
st_birthtime	$RUST/src/os/ios/fs.rs	/^    fn st_birthtime(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_birthtime	$RUST/src/os/ios/raw.rs	/^    pub st_birthtime: c_long,$/;"	m	struct:stat
st_birthtime	$RUST/src/os/macos/fs.rs	/^    fn st_birthtime(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_birthtime	$RUST/src/os/macos/raw.rs	/^    pub st_birthtime: c_long,$/;"	m	struct:stat
st_birthtime	$RUST/src/os/netbsd/fs.rs	/^    fn st_birthtime(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_birthtime	$RUST/src/os/netbsd/raw.rs	/^    pub st_birthtime: i64,$/;"	m	struct:stat
st_birthtime	$RUST/src/os/openbsd/fs.rs	/^    fn st_birthtime(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_birthtime	$RUST/src/os/openbsd/raw.rs	/^    pub st_birthtime: i64,$/;"	m	struct:stat
st_birthtime	$RUST/src/os/watchos/fs.rs	/^    fn st_birthtime(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_birthtime	$RUST/src/os/watchos/raw.rs	/^    pub st_birthtime: c_long,$/;"	m	struct:stat
st_birthtime_nsec	$RUST/src/os/dragonfly/raw.rs	/^    pub st_birthtime_nsec: c_long,$/;"	m	struct:stat
st_birthtime_nsec	$RUST/src/os/freebsd/fs.rs	/^    fn st_birthtime_nsec(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_birthtime_nsec	$RUST/src/os/freebsd/raw.rs	/^    pub st_birthtime_nsec: c_long,$/;"	m	struct:stat
st_birthtime_nsec	$RUST/src/os/ios/fs.rs	/^    fn st_birthtime_nsec(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_birthtime_nsec	$RUST/src/os/ios/raw.rs	/^    pub st_birthtime_nsec: c_long,$/;"	m	struct:stat
st_birthtime_nsec	$RUST/src/os/macos/fs.rs	/^    fn st_birthtime_nsec(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_birthtime_nsec	$RUST/src/os/macos/raw.rs	/^    pub st_birthtime_nsec: c_long,$/;"	m	struct:stat
st_birthtime_nsec	$RUST/src/os/netbsd/fs.rs	/^    fn st_birthtime_nsec(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_birthtime_nsec	$RUST/src/os/netbsd/raw.rs	/^    pub st_birthtime_nsec: c_long,$/;"	m	struct:stat
st_birthtime_nsec	$RUST/src/os/openbsd/fs.rs	/^    fn st_birthtime_nsec(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_birthtime_nsec	$RUST/src/os/openbsd/raw.rs	/^    pub st_birthtime_nsec: c_long,$/;"	m	struct:stat
st_birthtime_nsec	$RUST/src/os/watchos/fs.rs	/^    fn st_birthtime_nsec(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_birthtime_nsec	$RUST/src/os/watchos/raw.rs	/^    pub st_birthtime_nsec: c_long,$/;"	m	struct:stat
st_blksize	$RUST/src/os/aix/fs.rs	/^    fn st_blksize(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_blksize	$RUST/src/os/android/fs.rs	/^    fn st_blksize(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_blksize	$RUST/src/os/android/raw.rs	/^        pub st_blksize: u32,$/;"	m	struct:arch::stat
st_blksize	$RUST/src/os/dragonfly/fs.rs	/^    fn st_blksize(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_blksize	$RUST/src/os/dragonfly/raw.rs	/^    pub st_blksize: u32,$/;"	m	struct:stat
st_blksize	$RUST/src/os/emscripten/fs.rs	/^    fn st_blksize(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_blksize	$RUST/src/os/emscripten/raw.rs	/^    pub st_blksize: i32,$/;"	m	struct:stat
st_blksize	$RUST/src/os/espidf/fs.rs	/^    fn st_blksize(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_blksize	$RUST/src/os/espidf/raw.rs	/^    pub st_blksize: blksize_t,$/;"	m	struct:stat
st_blksize	$RUST/src/os/freebsd/fs.rs	/^    fn st_blksize(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_blksize	$RUST/src/os/freebsd/raw.rs	/^    pub st_blksize: u32,$/;"	m	struct:stat
st_blksize	$RUST/src/os/fuchsia/fs.rs	/^    fn st_blksize(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_blksize	$RUST/src/os/fuchsia/raw.rs	/^        pub st_blksize: i64,$/;"	m	struct:arch::stat
st_blksize	$RUST/src/os/haiku/fs.rs	/^    fn st_blksize(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_blksize	$RUST/src/os/haiku/raw.rs	/^    pub st_blksize: blksize_t,$/;"	m	struct:stat
st_blksize	$RUST/src/os/horizon/fs.rs	/^    fn st_blksize(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_blksize	$RUST/src/os/horizon/raw.rs	/^    pub st_blksize: blksize_t,$/;"	m	struct:stat
st_blksize	$RUST/src/os/hurd/fs.rs	/^    fn st_blksize(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_blksize	$RUST/src/os/illumos/fs.rs	/^    fn st_blksize(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_blksize	$RUST/src/os/illumos/raw.rs	/^    pub st_blksize: blksize_t,$/;"	m	struct:stat
st_blksize	$RUST/src/os/ios/fs.rs	/^    fn st_blksize(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_blksize	$RUST/src/os/ios/raw.rs	/^    pub st_blksize: i32,$/;"	m	struct:stat
st_blksize	$RUST/src/os/l4re/fs.rs	/^    fn st_blksize(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_blksize	$RUST/src/os/l4re/raw.rs	/^        pub st_blksize: i64,$/;"	m	struct:arch::stat
st_blksize	$RUST/src/os/linux/fs.rs	/^    fn st_blksize(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_blksize	$RUST/src/os/linux/raw.rs	/^        pub st_blksize: i64,$/;"	m	struct:arch::stat
st_blksize	$RUST/src/os/macos/fs.rs	/^    fn st_blksize(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_blksize	$RUST/src/os/macos/raw.rs	/^    pub st_blksize: i32,$/;"	m	struct:stat
st_blksize	$RUST/src/os/netbsd/fs.rs	/^    fn st_blksize(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_blksize	$RUST/src/os/netbsd/raw.rs	/^    pub st_blksize: i32,$/;"	m	struct:stat
st_blksize	$RUST/src/os/nto/fs.rs	/^    fn st_blksize(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_blksize	$RUST/src/os/openbsd/fs.rs	/^    fn st_blksize(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_blksize	$RUST/src/os/openbsd/raw.rs	/^    pub st_blksize: i32,$/;"	m	struct:stat
st_blksize	$RUST/src/os/redox/fs.rs	/^    fn st_blksize(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_blksize	$RUST/src/os/redox/raw.rs	/^    pub st_blksize: blksize_t,$/;"	m	struct:stat
st_blksize	$RUST/src/os/solaris/fs.rs	/^    fn st_blksize(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_blksize	$RUST/src/os/solaris/raw.rs	/^    pub st_blksize: blksize_t,$/;"	m	struct:stat
st_blksize	$RUST/src/os/vita/fs.rs	/^    fn st_blksize(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_blksize	$RUST/src/os/vita/raw.rs	/^    pub st_blksize: blksize_t,$/;"	m	struct:stat
st_blksize	$RUST/src/os/vxworks/fs.rs	/^    fn st_blksize(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_blksize	$RUST/src/os/watchos/fs.rs	/^    fn st_blksize(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_blksize	$RUST/src/os/watchos/raw.rs	/^    pub st_blksize: i32,$/;"	m	struct:stat
st_blocks	$RUST/src/os/aix/fs.rs	/^    fn st_blocks(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_blocks	$RUST/src/os/android/fs.rs	/^    fn st_blocks(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_blocks	$RUST/src/os/android/raw.rs	/^        pub st_blocks: c_ulonglong,$/;"	m	struct:arch::stat
st_blocks	$RUST/src/os/dragonfly/fs.rs	/^    fn st_blocks(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_blocks	$RUST/src/os/dragonfly/raw.rs	/^    pub st_blocks: i64,$/;"	m	struct:stat
st_blocks	$RUST/src/os/emscripten/fs.rs	/^    fn st_blocks(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_blocks	$RUST/src/os/emscripten/raw.rs	/^    pub st_blocks: i64,$/;"	m	struct:stat
st_blocks	$RUST/src/os/espidf/fs.rs	/^    fn st_blocks(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_blocks	$RUST/src/os/espidf/raw.rs	/^    pub st_blocks: blkcnt_t,$/;"	m	struct:stat
st_blocks	$RUST/src/os/freebsd/fs.rs	/^    fn st_blocks(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_blocks	$RUST/src/os/freebsd/raw.rs	/^    pub st_blocks: i64,$/;"	m	struct:stat
st_blocks	$RUST/src/os/fuchsia/fs.rs	/^    fn st_blocks(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_blocks	$RUST/src/os/fuchsia/raw.rs	/^        pub st_blocks: i64,$/;"	m	struct:arch::stat
st_blocks	$RUST/src/os/haiku/fs.rs	/^    fn st_blocks(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_blocks	$RUST/src/os/haiku/raw.rs	/^    pub st_blocks: blkcnt_t,$/;"	m	struct:stat
st_blocks	$RUST/src/os/horizon/fs.rs	/^    fn st_blocks(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_blocks	$RUST/src/os/horizon/raw.rs	/^    pub st_blocks: blkcnt_t,$/;"	m	struct:stat
st_blocks	$RUST/src/os/hurd/fs.rs	/^    fn st_blocks(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_blocks	$RUST/src/os/illumos/fs.rs	/^    fn st_blocks(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_blocks	$RUST/src/os/illumos/raw.rs	/^    pub st_blocks: blkcnt_t,$/;"	m	struct:stat
st_blocks	$RUST/src/os/ios/fs.rs	/^    fn st_blocks(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_blocks	$RUST/src/os/ios/raw.rs	/^    pub st_blocks: i64,$/;"	m	struct:stat
st_blocks	$RUST/src/os/l4re/fs.rs	/^    fn st_blocks(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_blocks	$RUST/src/os/l4re/raw.rs	/^        pub st_blocks: i64,$/;"	m	struct:arch::stat
st_blocks	$RUST/src/os/linux/fs.rs	/^    fn st_blocks(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_blocks	$RUST/src/os/linux/raw.rs	/^        pub st_blocks: i64,$/;"	m	struct:arch::stat
st_blocks	$RUST/src/os/macos/fs.rs	/^    fn st_blocks(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_blocks	$RUST/src/os/macos/raw.rs	/^    pub st_blocks: i64,$/;"	m	struct:stat
st_blocks	$RUST/src/os/netbsd/fs.rs	/^    fn st_blocks(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_blocks	$RUST/src/os/netbsd/raw.rs	/^    pub st_blocks: i64,$/;"	m	struct:stat
st_blocks	$RUST/src/os/nto/fs.rs	/^    fn st_blocks(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_blocks	$RUST/src/os/openbsd/fs.rs	/^    fn st_blocks(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_blocks	$RUST/src/os/openbsd/raw.rs	/^    pub st_blocks: i64,$/;"	m	struct:stat
st_blocks	$RUST/src/os/redox/fs.rs	/^    fn st_blocks(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_blocks	$RUST/src/os/redox/raw.rs	/^    pub st_blocks: blkcnt_t,$/;"	m	struct:stat
st_blocks	$RUST/src/os/solaris/fs.rs	/^    fn st_blocks(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_blocks	$RUST/src/os/solaris/raw.rs	/^    pub st_blocks: blkcnt_t,$/;"	m	struct:stat
st_blocks	$RUST/src/os/vita/fs.rs	/^    fn st_blocks(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_blocks	$RUST/src/os/vita/raw.rs	/^    pub st_blocks: blkcnt_t,$/;"	m	struct:stat
st_blocks	$RUST/src/os/vxworks/fs.rs	/^    fn st_blocks(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_blocks	$RUST/src/os/watchos/fs.rs	/^    fn st_blocks(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_blocks	$RUST/src/os/watchos/raw.rs	/^    pub st_blocks: i64,$/;"	m	struct:stat
st_crtime	$RUST/src/os/haiku/fs.rs	/^    fn st_crtime(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_crtime	$RUST/src/os/haiku/raw.rs	/^    pub st_crtime: time_t,$/;"	m	struct:stat
st_crtime_nsec	$RUST/src/os/haiku/fs.rs	/^    fn st_crtime_nsec(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_crtime_nsec	$RUST/src/os/haiku/raw.rs	/^    pub st_crtime_nsec: c_long,$/;"	m	struct:stat
st_ctime	$RUST/src/os/aix/fs.rs	/^    fn st_ctime(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_ctime	$RUST/src/os/android/fs.rs	/^    fn st_ctime(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_ctime	$RUST/src/os/android/raw.rs	/^        pub st_ctime: time_t,$/;"	m	struct:arch::stat
st_ctime	$RUST/src/os/dragonfly/fs.rs	/^    fn st_ctime(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_ctime	$RUST/src/os/dragonfly/raw.rs	/^    pub st_ctime: c_long,$/;"	m	struct:stat
st_ctime	$RUST/src/os/emscripten/fs.rs	/^    fn st_ctime(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_ctime	$RUST/src/os/emscripten/raw.rs	/^    pub st_ctime: time_t,$/;"	m	struct:stat
st_ctime	$RUST/src/os/espidf/fs.rs	/^    fn st_ctime(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_ctime	$RUST/src/os/espidf/raw.rs	/^    pub st_ctime: time_t,$/;"	m	struct:stat
st_ctime	$RUST/src/os/freebsd/fs.rs	/^    fn st_ctime(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_ctime	$RUST/src/os/freebsd/raw.rs	/^    pub st_ctime: c_long,$/;"	m	struct:stat
st_ctime	$RUST/src/os/fuchsia/fs.rs	/^    fn st_ctime(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_ctime	$RUST/src/os/fuchsia/raw.rs	/^        pub st_ctime: i64,$/;"	m	struct:arch::stat
st_ctime	$RUST/src/os/haiku/fs.rs	/^    fn st_ctime(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_ctime	$RUST/src/os/haiku/raw.rs	/^    pub st_ctime: time_t,$/;"	m	struct:stat
st_ctime	$RUST/src/os/horizon/fs.rs	/^    fn st_ctime(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_ctime	$RUST/src/os/horizon/raw.rs	/^    pub st_ctime: time_t,$/;"	m	struct:stat
st_ctime	$RUST/src/os/hurd/fs.rs	/^    fn st_ctime(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_ctime	$RUST/src/os/illumos/fs.rs	/^    fn st_ctime(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_ctime	$RUST/src/os/illumos/raw.rs	/^    pub st_ctime: time_t,$/;"	m	struct:stat
st_ctime	$RUST/src/os/ios/fs.rs	/^    fn st_ctime(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_ctime	$RUST/src/os/ios/raw.rs	/^    pub st_ctime: c_long,$/;"	m	struct:stat
st_ctime	$RUST/src/os/l4re/fs.rs	/^    fn st_ctime(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_ctime	$RUST/src/os/l4re/raw.rs	/^        pub st_ctime: time_t,$/;"	m	struct:arch::stat
st_ctime	$RUST/src/os/linux/fs.rs	/^    fn st_ctime(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_ctime	$RUST/src/os/linux/raw.rs	/^        pub st_ctime: time_t,$/;"	m	struct:arch::stat
st_ctime	$RUST/src/os/macos/fs.rs	/^    fn st_ctime(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_ctime	$RUST/src/os/macos/raw.rs	/^    pub st_ctime: c_long,$/;"	m	struct:stat
st_ctime	$RUST/src/os/netbsd/fs.rs	/^    fn st_ctime(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_ctime	$RUST/src/os/netbsd/raw.rs	/^    pub st_ctime: i64,$/;"	m	struct:stat
st_ctime	$RUST/src/os/nto/fs.rs	/^    fn st_ctime(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_ctime	$RUST/src/os/openbsd/fs.rs	/^    fn st_ctime(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_ctime	$RUST/src/os/openbsd/raw.rs	/^    pub st_ctime: i64,$/;"	m	struct:stat
st_ctime	$RUST/src/os/redox/fs.rs	/^    fn st_ctime(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_ctime	$RUST/src/os/redox/raw.rs	/^    pub st_ctime: time_t,$/;"	m	struct:stat
st_ctime	$RUST/src/os/solaris/fs.rs	/^    fn st_ctime(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_ctime	$RUST/src/os/solaris/raw.rs	/^    pub st_ctime: time_t,$/;"	m	struct:stat
st_ctime	$RUST/src/os/vita/fs.rs	/^    fn st_ctime(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_ctime	$RUST/src/os/vita/raw.rs	/^    pub st_ctime: time_t,$/;"	m	struct:stat
st_ctime	$RUST/src/os/vxworks/fs.rs	/^    fn st_ctime(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_ctime	$RUST/src/os/watchos/fs.rs	/^    fn st_ctime(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_ctime	$RUST/src/os/watchos/raw.rs	/^    pub st_ctime: c_long,$/;"	m	struct:stat
st_ctime_nsec	$RUST/src/os/aix/fs.rs	/^    fn st_ctime_nsec(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_ctime_nsec	$RUST/src/os/android/fs.rs	/^    fn st_ctime_nsec(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_ctime_nsec	$RUST/src/os/android/raw.rs	/^        pub st_ctime_nsec: c_long,$/;"	m	struct:arch::stat
st_ctime_nsec	$RUST/src/os/dragonfly/fs.rs	/^    fn st_ctime_nsec(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_ctime_nsec	$RUST/src/os/dragonfly/raw.rs	/^    pub st_ctime_nsec: c_long,$/;"	m	struct:stat
st_ctime_nsec	$RUST/src/os/emscripten/fs.rs	/^    fn st_ctime_nsec(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_ctime_nsec	$RUST/src/os/emscripten/raw.rs	/^    pub st_ctime_nsec: c_long,$/;"	m	struct:stat
st_ctime_nsec	$RUST/src/os/espidf/fs.rs	/^    fn st_ctime_nsec(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_ctime_nsec	$RUST/src/os/freebsd/fs.rs	/^    fn st_ctime_nsec(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_ctime_nsec	$RUST/src/os/freebsd/raw.rs	/^    pub st_ctime_nsec: c_long,$/;"	m	struct:stat
st_ctime_nsec	$RUST/src/os/fuchsia/fs.rs	/^    fn st_ctime_nsec(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_ctime_nsec	$RUST/src/os/fuchsia/raw.rs	/^        pub st_ctime_nsec: c_long,$/;"	m	struct:arch::stat
st_ctime_nsec	$RUST/src/os/haiku/fs.rs	/^    fn st_ctime_nsec(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_ctime_nsec	$RUST/src/os/haiku/raw.rs	/^    pub st_ctime_nsec: c_long,$/;"	m	struct:stat
st_ctime_nsec	$RUST/src/os/horizon/fs.rs	/^    fn st_ctime_nsec(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_ctime_nsec	$RUST/src/os/hurd/fs.rs	/^    fn st_ctime_nsec(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_ctime_nsec	$RUST/src/os/illumos/fs.rs	/^    fn st_ctime_nsec(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_ctime_nsec	$RUST/src/os/illumos/raw.rs	/^    pub st_ctime_nsec: c_long,$/;"	m	struct:stat
st_ctime_nsec	$RUST/src/os/ios/fs.rs	/^    fn st_ctime_nsec(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_ctime_nsec	$RUST/src/os/ios/raw.rs	/^    pub st_ctime_nsec: c_long,$/;"	m	struct:stat
st_ctime_nsec	$RUST/src/os/l4re/fs.rs	/^    fn st_ctime_nsec(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_ctime_nsec	$RUST/src/os/l4re/raw.rs	/^        pub st_ctime_nsec: c_long,$/;"	m	struct:arch::stat
st_ctime_nsec	$RUST/src/os/linux/fs.rs	/^    fn st_ctime_nsec(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_ctime_nsec	$RUST/src/os/linux/raw.rs	/^        pub st_ctime_nsec: c_long,$/;"	m	struct:arch::stat
st_ctime_nsec	$RUST/src/os/macos/fs.rs	/^    fn st_ctime_nsec(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_ctime_nsec	$RUST/src/os/macos/raw.rs	/^    pub st_ctime_nsec: c_long,$/;"	m	struct:stat
st_ctime_nsec	$RUST/src/os/netbsd/fs.rs	/^    fn st_ctime_nsec(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_ctime_nsec	$RUST/src/os/netbsd/raw.rs	/^    pub st_ctime_nsec: c_long,$/;"	m	struct:stat
st_ctime_nsec	$RUST/src/os/nto/fs.rs	/^    fn st_ctime_nsec(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_ctime_nsec	$RUST/src/os/openbsd/fs.rs	/^    fn st_ctime_nsec(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_ctime_nsec	$RUST/src/os/openbsd/raw.rs	/^    pub st_ctime_nsec: c_long,$/;"	m	struct:stat
st_ctime_nsec	$RUST/src/os/redox/fs.rs	/^    fn st_ctime_nsec(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_ctime_nsec	$RUST/src/os/redox/raw.rs	/^    pub st_ctime_nsec: c_long,$/;"	m	struct:stat
st_ctime_nsec	$RUST/src/os/solaris/fs.rs	/^    fn st_ctime_nsec(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_ctime_nsec	$RUST/src/os/solaris/raw.rs	/^    pub st_ctime_nsec: c_long,$/;"	m	struct:stat
st_ctime_nsec	$RUST/src/os/vita/fs.rs	/^    fn st_ctime_nsec(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_ctime_nsec	$RUST/src/os/vxworks/fs.rs	/^    fn st_ctime_nsec(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_ctime_nsec	$RUST/src/os/watchos/fs.rs	/^    fn st_ctime_nsec(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_ctime_nsec	$RUST/src/os/watchos/raw.rs	/^    pub st_ctime_nsec: c_long,$/;"	m	struct:stat
st_dev	$RUST/src/os/aix/fs.rs	/^    fn st_dev(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_dev	$RUST/src/os/android/fs.rs	/^    fn st_dev(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_dev	$RUST/src/os/android/raw.rs	/^        pub st_dev: dev_t,$/;"	m	struct:arch::stat
st_dev	$RUST/src/os/dragonfly/fs.rs	/^    fn st_dev(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_dev	$RUST/src/os/dragonfly/raw.rs	/^    pub st_dev: u32,$/;"	m	struct:stat
st_dev	$RUST/src/os/emscripten/fs.rs	/^    fn st_dev(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_dev	$RUST/src/os/emscripten/raw.rs	/^    pub st_dev: u64,$/;"	m	struct:stat
st_dev	$RUST/src/os/espidf/fs.rs	/^    fn st_dev(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_dev	$RUST/src/os/espidf/raw.rs	/^    pub st_dev: dev_t,$/;"	m	struct:stat
st_dev	$RUST/src/os/freebsd/fs.rs	/^    fn st_dev(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_dev	$RUST/src/os/freebsd/raw.rs	/^    pub st_dev: u32,$/;"	m	struct:stat
st_dev	$RUST/src/os/fuchsia/fs.rs	/^    fn st_dev(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_dev	$RUST/src/os/fuchsia/raw.rs	/^        pub st_dev: u64,$/;"	m	struct:arch::stat
st_dev	$RUST/src/os/haiku/fs.rs	/^    fn st_dev(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_dev	$RUST/src/os/haiku/raw.rs	/^    pub st_dev: dev_t,$/;"	m	struct:stat
st_dev	$RUST/src/os/horizon/fs.rs	/^    fn st_dev(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_dev	$RUST/src/os/horizon/raw.rs	/^    pub st_dev: dev_t,$/;"	m	struct:stat
st_dev	$RUST/src/os/hurd/fs.rs	/^    fn st_dev(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_dev	$RUST/src/os/illumos/fs.rs	/^    fn st_dev(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_dev	$RUST/src/os/illumos/raw.rs	/^    pub st_dev: dev_t,$/;"	m	struct:stat
st_dev	$RUST/src/os/ios/fs.rs	/^    fn st_dev(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_dev	$RUST/src/os/ios/raw.rs	/^    pub st_dev: i32,$/;"	m	struct:stat
st_dev	$RUST/src/os/l4re/fs.rs	/^    fn st_dev(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_dev	$RUST/src/os/l4re/raw.rs	/^        pub st_dev: u64,$/;"	m	struct:arch::stat
st_dev	$RUST/src/os/linux/fs.rs	/^    fn st_dev(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_dev	$RUST/src/os/linux/raw.rs	/^        pub st_dev: u64,$/;"	m	struct:arch::stat
st_dev	$RUST/src/os/macos/fs.rs	/^    fn st_dev(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_dev	$RUST/src/os/macos/raw.rs	/^    pub st_dev: i32,$/;"	m	struct:stat
st_dev	$RUST/src/os/netbsd/fs.rs	/^    fn st_dev(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_dev	$RUST/src/os/netbsd/raw.rs	/^    pub st_dev: u64,$/;"	m	struct:stat
st_dev	$RUST/src/os/nto/fs.rs	/^    fn st_dev(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_dev	$RUST/src/os/openbsd/fs.rs	/^    fn st_dev(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_dev	$RUST/src/os/openbsd/raw.rs	/^    pub st_dev: i32,$/;"	m	struct:stat
st_dev	$RUST/src/os/redox/fs.rs	/^    fn st_dev(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_dev	$RUST/src/os/redox/raw.rs	/^    pub st_dev: dev_t,$/;"	m	struct:stat
st_dev	$RUST/src/os/solaris/fs.rs	/^    fn st_dev(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_dev	$RUST/src/os/solaris/raw.rs	/^    pub st_dev: dev_t,$/;"	m	struct:stat
st_dev	$RUST/src/os/vita/fs.rs	/^    fn st_dev(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_dev	$RUST/src/os/vita/raw.rs	/^    pub st_dev: dev_t,$/;"	m	struct:stat
st_dev	$RUST/src/os/vxworks/fs.rs	/^    fn st_dev(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_dev	$RUST/src/os/watchos/fs.rs	/^    fn st_dev(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_dev	$RUST/src/os/watchos/raw.rs	/^    pub st_dev: i32,$/;"	m	struct:stat
st_flags	$RUST/src/os/dragonfly/fs.rs	/^    fn st_flags(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_flags	$RUST/src/os/dragonfly/raw.rs	/^    pub st_flags: u32,$/;"	m	struct:stat
st_flags	$RUST/src/os/freebsd/fs.rs	/^    fn st_flags(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_flags	$RUST/src/os/freebsd/raw.rs	/^    pub st_flags: u32,$/;"	m	struct:stat
st_flags	$RUST/src/os/ios/fs.rs	/^    fn st_flags(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_flags	$RUST/src/os/ios/raw.rs	/^    pub st_flags: u32,$/;"	m	struct:stat
st_flags	$RUST/src/os/macos/fs.rs	/^    fn st_flags(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_flags	$RUST/src/os/macos/raw.rs	/^    pub st_flags: u32,$/;"	m	struct:stat
st_flags	$RUST/src/os/netbsd/fs.rs	/^    fn st_flags(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_flags	$RUST/src/os/netbsd/raw.rs	/^    pub st_flags: u32,$/;"	m	struct:stat
st_flags	$RUST/src/os/openbsd/fs.rs	/^    fn st_flags(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_flags	$RUST/src/os/openbsd/raw.rs	/^    pub st_flags: u32,$/;"	m	struct:stat
st_flags	$RUST/src/os/watchos/fs.rs	/^    fn st_flags(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_flags	$RUST/src/os/watchos/raw.rs	/^    pub st_flags: u32,$/;"	m	struct:stat
st_gen	$RUST/src/os/dragonfly/fs.rs	/^    fn st_gen(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_gen	$RUST/src/os/dragonfly/raw.rs	/^    pub st_gen: u32,$/;"	m	struct:stat
st_gen	$RUST/src/os/freebsd/fs.rs	/^    fn st_gen(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_gen	$RUST/src/os/freebsd/raw.rs	/^    pub st_gen: u32,$/;"	m	struct:stat
st_gen	$RUST/src/os/ios/fs.rs	/^    fn st_gen(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_gen	$RUST/src/os/ios/raw.rs	/^    pub st_gen: u32,$/;"	m	struct:stat
st_gen	$RUST/src/os/macos/fs.rs	/^    fn st_gen(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_gen	$RUST/src/os/macos/raw.rs	/^    pub st_gen: u32,$/;"	m	struct:stat
st_gen	$RUST/src/os/netbsd/fs.rs	/^    fn st_gen(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_gen	$RUST/src/os/netbsd/raw.rs	/^    pub st_gen: u32,$/;"	m	struct:stat
st_gen	$RUST/src/os/openbsd/fs.rs	/^    fn st_gen(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_gen	$RUST/src/os/openbsd/raw.rs	/^    pub st_gen: u32,$/;"	m	struct:stat
st_gen	$RUST/src/os/watchos/fs.rs	/^    fn st_gen(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_gen	$RUST/src/os/watchos/raw.rs	/^    pub st_gen: u32,$/;"	m	struct:stat
st_gid	$RUST/src/os/aix/fs.rs	/^    fn st_gid(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_gid	$RUST/src/os/android/fs.rs	/^    fn st_gid(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_gid	$RUST/src/os/android/raw.rs	/^        pub st_gid: gid_t,$/;"	m	struct:arch::stat
st_gid	$RUST/src/os/dragonfly/fs.rs	/^    fn st_gid(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_gid	$RUST/src/os/dragonfly/raw.rs	/^    pub st_gid: u32,$/;"	m	struct:stat
st_gid	$RUST/src/os/emscripten/fs.rs	/^    fn st_gid(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_gid	$RUST/src/os/emscripten/raw.rs	/^    pub st_gid: u32,$/;"	m	struct:stat
st_gid	$RUST/src/os/espidf/fs.rs	/^    fn st_gid(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_gid	$RUST/src/os/espidf/raw.rs	/^    pub st_gid: gid_t,$/;"	m	struct:stat
st_gid	$RUST/src/os/freebsd/fs.rs	/^    fn st_gid(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_gid	$RUST/src/os/freebsd/raw.rs	/^    pub st_gid: u32,$/;"	m	struct:stat
st_gid	$RUST/src/os/fuchsia/fs.rs	/^    fn st_gid(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_gid	$RUST/src/os/fuchsia/raw.rs	/^        pub st_gid: u32,$/;"	m	struct:arch::stat
st_gid	$RUST/src/os/haiku/fs.rs	/^    fn st_gid(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_gid	$RUST/src/os/haiku/raw.rs	/^    pub st_gid: gid_t,$/;"	m	struct:stat
st_gid	$RUST/src/os/horizon/fs.rs	/^    fn st_gid(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_gid	$RUST/src/os/horizon/raw.rs	/^    pub st_gid: gid_t,$/;"	m	struct:stat
st_gid	$RUST/src/os/hurd/fs.rs	/^    fn st_gid(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_gid	$RUST/src/os/illumos/fs.rs	/^    fn st_gid(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_gid	$RUST/src/os/illumos/raw.rs	/^    pub st_gid: gid_t,$/;"	m	struct:stat
st_gid	$RUST/src/os/ios/fs.rs	/^    fn st_gid(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_gid	$RUST/src/os/ios/raw.rs	/^    pub st_gid: u32,$/;"	m	struct:stat
st_gid	$RUST/src/os/l4re/fs.rs	/^    fn st_gid(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_gid	$RUST/src/os/l4re/raw.rs	/^        pub st_gid: u32,$/;"	m	struct:arch::stat
st_gid	$RUST/src/os/linux/fs.rs	/^    fn st_gid(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_gid	$RUST/src/os/linux/raw.rs	/^        pub st_gid: u32,$/;"	m	struct:arch::stat
st_gid	$RUST/src/os/macos/fs.rs	/^    fn st_gid(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_gid	$RUST/src/os/macos/raw.rs	/^    pub st_gid: u32,$/;"	m	struct:stat
st_gid	$RUST/src/os/netbsd/fs.rs	/^    fn st_gid(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_gid	$RUST/src/os/netbsd/raw.rs	/^    pub st_gid: gid_t,$/;"	m	struct:stat
st_gid	$RUST/src/os/nto/fs.rs	/^    fn st_gid(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_gid	$RUST/src/os/openbsd/fs.rs	/^    fn st_gid(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_gid	$RUST/src/os/openbsd/raw.rs	/^    pub st_gid: u32,$/;"	m	struct:stat
st_gid	$RUST/src/os/redox/fs.rs	/^    fn st_gid(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_gid	$RUST/src/os/redox/raw.rs	/^    pub st_gid: gid_t,$/;"	m	struct:stat
st_gid	$RUST/src/os/solaris/fs.rs	/^    fn st_gid(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_gid	$RUST/src/os/solaris/raw.rs	/^    pub st_gid: gid_t,$/;"	m	struct:stat
st_gid	$RUST/src/os/vita/fs.rs	/^    fn st_gid(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_gid	$RUST/src/os/vita/raw.rs	/^    pub st_gid: gid_t,$/;"	m	struct:stat
st_gid	$RUST/src/os/vxworks/fs.rs	/^    fn st_gid(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_gid	$RUST/src/os/watchos/fs.rs	/^    fn st_gid(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_gid	$RUST/src/os/watchos/raw.rs	/^    pub st_gid: u32,$/;"	m	struct:stat
st_ino	$RUST/src/os/aix/fs.rs	/^    fn st_ino(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_ino	$RUST/src/os/android/fs.rs	/^    fn st_ino(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_ino	$RUST/src/os/android/raw.rs	/^        pub st_ino: ino_t,$/;"	m	struct:arch::stat
st_ino	$RUST/src/os/dragonfly/fs.rs	/^    fn st_ino(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_ino	$RUST/src/os/dragonfly/raw.rs	/^    pub st_ino: u32,$/;"	m	struct:stat
st_ino	$RUST/src/os/emscripten/fs.rs	/^    fn st_ino(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_ino	$RUST/src/os/emscripten/raw.rs	/^    pub st_ino: u64,$/;"	m	struct:stat
st_ino	$RUST/src/os/espidf/fs.rs	/^    fn st_ino(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_ino	$RUST/src/os/espidf/raw.rs	/^    pub st_ino: ino_t,$/;"	m	struct:stat
st_ino	$RUST/src/os/freebsd/fs.rs	/^    fn st_ino(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_ino	$RUST/src/os/freebsd/raw.rs	/^    pub st_ino: u32,$/;"	m	struct:stat
st_ino	$RUST/src/os/fuchsia/fs.rs	/^    fn st_ino(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_ino	$RUST/src/os/fuchsia/raw.rs	/^        pub st_ino: u64,$/;"	m	struct:arch::stat
st_ino	$RUST/src/os/haiku/fs.rs	/^    fn st_ino(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_ino	$RUST/src/os/haiku/raw.rs	/^    pub st_ino: ino_t,$/;"	m	struct:stat
st_ino	$RUST/src/os/horizon/fs.rs	/^    fn st_ino(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_ino	$RUST/src/os/horizon/raw.rs	/^    pub st_ino: ino_t,$/;"	m	struct:stat
st_ino	$RUST/src/os/hurd/fs.rs	/^    fn st_ino(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_ino	$RUST/src/os/illumos/fs.rs	/^    fn st_ino(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_ino	$RUST/src/os/illumos/raw.rs	/^    pub st_ino: ino_t,$/;"	m	struct:stat
st_ino	$RUST/src/os/ios/fs.rs	/^    fn st_ino(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_ino	$RUST/src/os/ios/raw.rs	/^    pub st_ino: u64,$/;"	m	struct:stat
st_ino	$RUST/src/os/l4re/fs.rs	/^    fn st_ino(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_ino	$RUST/src/os/l4re/raw.rs	/^        pub st_ino: u64,$/;"	m	struct:arch::stat
st_ino	$RUST/src/os/linux/fs.rs	/^    fn st_ino(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_ino	$RUST/src/os/linux/raw.rs	/^        pub st_ino: u64,$/;"	m	struct:arch::stat
st_ino	$RUST/src/os/macos/fs.rs	/^    fn st_ino(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_ino	$RUST/src/os/macos/raw.rs	/^    pub st_ino: u64,$/;"	m	struct:stat
st_ino	$RUST/src/os/netbsd/fs.rs	/^    fn st_ino(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_ino	$RUST/src/os/netbsd/raw.rs	/^    pub st_ino: u64,$/;"	m	struct:stat
st_ino	$RUST/src/os/nto/fs.rs	/^    fn st_ino(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_ino	$RUST/src/os/openbsd/fs.rs	/^    fn st_ino(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_ino	$RUST/src/os/openbsd/raw.rs	/^    pub st_ino: u64,$/;"	m	struct:stat
st_ino	$RUST/src/os/redox/fs.rs	/^    fn st_ino(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_ino	$RUST/src/os/redox/raw.rs	/^    pub st_ino: ino_t,$/;"	m	struct:stat
st_ino	$RUST/src/os/solaris/fs.rs	/^    fn st_ino(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_ino	$RUST/src/os/solaris/raw.rs	/^    pub st_ino: ino_t,$/;"	m	struct:stat
st_ino	$RUST/src/os/vita/fs.rs	/^    fn st_ino(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_ino	$RUST/src/os/vita/raw.rs	/^    pub st_ino: ino_t,$/;"	m	struct:stat
st_ino	$RUST/src/os/vxworks/fs.rs	/^    fn st_ino(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_ino	$RUST/src/os/watchos/fs.rs	/^    fn st_ino(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_ino	$RUST/src/os/watchos/raw.rs	/^    pub st_ino: u64,$/;"	m	struct:stat
st_lspare	$RUST/src/os/dragonfly/fs.rs	/^    fn st_lspare(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_lspare	$RUST/src/os/dragonfly/raw.rs	/^    pub st_lspare: i32,$/;"	m	struct:stat
st_lspare	$RUST/src/os/freebsd/fs.rs	/^    fn st_lspare(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_lspare	$RUST/src/os/freebsd/raw.rs	/^    pub st_lspare: i32,$/;"	m	struct:stat
st_lspare	$RUST/src/os/ios/fs.rs	/^    fn st_lspare(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_lspare	$RUST/src/os/ios/raw.rs	/^    pub st_lspare: i32,$/;"	m	struct:stat
st_lspare	$RUST/src/os/macos/fs.rs	/^    fn st_lspare(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_lspare	$RUST/src/os/macos/raw.rs	/^    pub st_lspare: i32,$/;"	m	struct:stat
st_lspare	$RUST/src/os/watchos/fs.rs	/^    fn st_lspare(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_lspare	$RUST/src/os/watchos/raw.rs	/^    pub st_lspare: i32,$/;"	m	struct:stat
st_mode	$RUST/src/os/aix/fs.rs	/^    fn st_mode(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_mode	$RUST/src/os/android/fs.rs	/^    fn st_mode(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_mode	$RUST/src/os/android/raw.rs	/^        pub st_mode: mode_t,$/;"	m	struct:arch::stat
st_mode	$RUST/src/os/dragonfly/fs.rs	/^    fn st_mode(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_mode	$RUST/src/os/dragonfly/raw.rs	/^    pub st_mode: u16,$/;"	m	struct:stat
st_mode	$RUST/src/os/emscripten/fs.rs	/^    fn st_mode(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_mode	$RUST/src/os/emscripten/raw.rs	/^    pub st_mode: u32,$/;"	m	struct:stat
st_mode	$RUST/src/os/espidf/fs.rs	/^    fn st_mode(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_mode	$RUST/src/os/espidf/raw.rs	/^    pub st_mode: mode_t,$/;"	m	struct:stat
st_mode	$RUST/src/os/freebsd/fs.rs	/^    fn st_mode(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_mode	$RUST/src/os/freebsd/raw.rs	/^    pub st_mode: u16,$/;"	m	struct:stat
st_mode	$RUST/src/os/fuchsia/fs.rs	/^    fn st_mode(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_mode	$RUST/src/os/fuchsia/raw.rs	/^        pub st_mode: u32,$/;"	m	struct:arch::stat
st_mode	$RUST/src/os/haiku/fs.rs	/^    fn st_mode(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_mode	$RUST/src/os/haiku/raw.rs	/^    pub st_mode: mode_t,$/;"	m	struct:stat
st_mode	$RUST/src/os/horizon/fs.rs	/^    fn st_mode(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_mode	$RUST/src/os/horizon/raw.rs	/^    pub st_mode: mode_t,$/;"	m	struct:stat
st_mode	$RUST/src/os/hurd/fs.rs	/^    fn st_mode(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_mode	$RUST/src/os/illumos/fs.rs	/^    fn st_mode(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_mode	$RUST/src/os/illumos/raw.rs	/^    pub st_mode: mode_t,$/;"	m	struct:stat
st_mode	$RUST/src/os/ios/fs.rs	/^    fn st_mode(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_mode	$RUST/src/os/ios/raw.rs	/^    pub st_mode: u16,$/;"	m	struct:stat
st_mode	$RUST/src/os/l4re/fs.rs	/^    fn st_mode(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_mode	$RUST/src/os/l4re/raw.rs	/^        pub st_mode: u32,$/;"	m	struct:arch::stat
st_mode	$RUST/src/os/linux/fs.rs	/^    fn st_mode(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_mode	$RUST/src/os/linux/raw.rs	/^        pub st_mode: u32,$/;"	m	struct:arch::stat
st_mode	$RUST/src/os/macos/fs.rs	/^    fn st_mode(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_mode	$RUST/src/os/macos/raw.rs	/^    pub st_mode: u16,$/;"	m	struct:stat
st_mode	$RUST/src/os/netbsd/fs.rs	/^    fn st_mode(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_mode	$RUST/src/os/netbsd/raw.rs	/^    pub st_mode: u32,$/;"	m	struct:stat
st_mode	$RUST/src/os/nto/fs.rs	/^    fn st_mode(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_mode	$RUST/src/os/openbsd/fs.rs	/^    fn st_mode(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_mode	$RUST/src/os/openbsd/raw.rs	/^    pub st_mode: u32,$/;"	m	struct:stat
st_mode	$RUST/src/os/redox/fs.rs	/^    fn st_mode(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_mode	$RUST/src/os/redox/raw.rs	/^    pub st_mode: mode_t,$/;"	m	struct:stat
st_mode	$RUST/src/os/solaris/fs.rs	/^    fn st_mode(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_mode	$RUST/src/os/solaris/raw.rs	/^    pub st_mode: mode_t,$/;"	m	struct:stat
st_mode	$RUST/src/os/vita/fs.rs	/^    fn st_mode(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_mode	$RUST/src/os/vita/raw.rs	/^    pub st_mode: mode_t,$/;"	m	struct:stat
st_mode	$RUST/src/os/vxworks/fs.rs	/^    fn st_mode(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_mode	$RUST/src/os/watchos/fs.rs	/^    fn st_mode(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_mode	$RUST/src/os/watchos/raw.rs	/^    pub st_mode: u16,$/;"	m	struct:stat
st_mtime	$RUST/src/os/aix/fs.rs	/^    fn st_mtime(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_mtime	$RUST/src/os/android/fs.rs	/^    fn st_mtime(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_mtime	$RUST/src/os/android/raw.rs	/^        pub st_mtime: time_t,$/;"	m	struct:arch::stat
st_mtime	$RUST/src/os/dragonfly/fs.rs	/^    fn st_mtime(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_mtime	$RUST/src/os/dragonfly/raw.rs	/^    pub st_mtime: c_long,$/;"	m	struct:stat
st_mtime	$RUST/src/os/emscripten/fs.rs	/^    fn st_mtime(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_mtime	$RUST/src/os/emscripten/raw.rs	/^    pub st_mtime: time_t,$/;"	m	struct:stat
st_mtime	$RUST/src/os/espidf/fs.rs	/^    fn st_mtime(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_mtime	$RUST/src/os/espidf/raw.rs	/^    pub st_mtime: time_t,$/;"	m	struct:stat
st_mtime	$RUST/src/os/freebsd/fs.rs	/^    fn st_mtime(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_mtime	$RUST/src/os/freebsd/raw.rs	/^    pub st_mtime: c_long,$/;"	m	struct:stat
st_mtime	$RUST/src/os/fuchsia/fs.rs	/^    fn st_mtime(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_mtime	$RUST/src/os/fuchsia/raw.rs	/^        pub st_mtime: i64,$/;"	m	struct:arch::stat
st_mtime	$RUST/src/os/haiku/fs.rs	/^    fn st_mtime(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_mtime	$RUST/src/os/haiku/raw.rs	/^    pub st_mtime: time_t,$/;"	m	struct:stat
st_mtime	$RUST/src/os/horizon/fs.rs	/^    fn st_mtime(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_mtime	$RUST/src/os/horizon/raw.rs	/^    pub st_mtime: time_t,$/;"	m	struct:stat
st_mtime	$RUST/src/os/hurd/fs.rs	/^    fn st_mtime(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_mtime	$RUST/src/os/illumos/fs.rs	/^    fn st_mtime(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_mtime	$RUST/src/os/illumos/raw.rs	/^    pub st_mtime: time_t,$/;"	m	struct:stat
st_mtime	$RUST/src/os/ios/fs.rs	/^    fn st_mtime(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_mtime	$RUST/src/os/ios/raw.rs	/^    pub st_mtime: c_long,$/;"	m	struct:stat
st_mtime	$RUST/src/os/l4re/fs.rs	/^    fn st_mtime(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_mtime	$RUST/src/os/l4re/raw.rs	/^        pub st_mtime: time_t,$/;"	m	struct:arch::stat
st_mtime	$RUST/src/os/linux/fs.rs	/^    fn st_mtime(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_mtime	$RUST/src/os/linux/raw.rs	/^        pub st_mtime: time_t,$/;"	m	struct:arch::stat
st_mtime	$RUST/src/os/macos/fs.rs	/^    fn st_mtime(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_mtime	$RUST/src/os/macos/raw.rs	/^    pub st_mtime: c_long,$/;"	m	struct:stat
st_mtime	$RUST/src/os/netbsd/fs.rs	/^    fn st_mtime(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_mtime	$RUST/src/os/netbsd/raw.rs	/^    pub st_mtime: i64,$/;"	m	struct:stat
st_mtime	$RUST/src/os/nto/fs.rs	/^    fn st_mtime(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_mtime	$RUST/src/os/openbsd/fs.rs	/^    fn st_mtime(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_mtime	$RUST/src/os/openbsd/raw.rs	/^    pub st_mtime: i64,$/;"	m	struct:stat
st_mtime	$RUST/src/os/redox/fs.rs	/^    fn st_mtime(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_mtime	$RUST/src/os/redox/raw.rs	/^    pub st_mtime: time_t,$/;"	m	struct:stat
st_mtime	$RUST/src/os/solaris/fs.rs	/^    fn st_mtime(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_mtime	$RUST/src/os/solaris/raw.rs	/^    pub st_mtime: time_t,$/;"	m	struct:stat
st_mtime	$RUST/src/os/vita/fs.rs	/^    fn st_mtime(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_mtime	$RUST/src/os/vita/raw.rs	/^    pub st_mtime: time_t,$/;"	m	struct:stat
st_mtime	$RUST/src/os/vxworks/fs.rs	/^    fn st_mtime(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_mtime	$RUST/src/os/watchos/fs.rs	/^    fn st_mtime(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_mtime	$RUST/src/os/watchos/raw.rs	/^    pub st_mtime: c_long,$/;"	m	struct:stat
st_mtime_nsec	$RUST/src/os/aix/fs.rs	/^    fn st_mtime_nsec(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_mtime_nsec	$RUST/src/os/android/fs.rs	/^    fn st_mtime_nsec(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_mtime_nsec	$RUST/src/os/android/raw.rs	/^        pub st_mtime_nsec: c_long,$/;"	m	struct:arch::stat
st_mtime_nsec	$RUST/src/os/dragonfly/fs.rs	/^    fn st_mtime_nsec(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_mtime_nsec	$RUST/src/os/dragonfly/raw.rs	/^    pub st_mtime_nsec: c_long,$/;"	m	struct:stat
st_mtime_nsec	$RUST/src/os/emscripten/fs.rs	/^    fn st_mtime_nsec(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_mtime_nsec	$RUST/src/os/emscripten/raw.rs	/^    pub st_mtime_nsec: c_long,$/;"	m	struct:stat
st_mtime_nsec	$RUST/src/os/espidf/fs.rs	/^    fn st_mtime_nsec(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_mtime_nsec	$RUST/src/os/freebsd/fs.rs	/^    fn st_mtime_nsec(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_mtime_nsec	$RUST/src/os/freebsd/raw.rs	/^    pub st_mtime_nsec: c_long,$/;"	m	struct:stat
st_mtime_nsec	$RUST/src/os/fuchsia/fs.rs	/^    fn st_mtime_nsec(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_mtime_nsec	$RUST/src/os/fuchsia/raw.rs	/^        pub st_mtime_nsec: c_long,$/;"	m	struct:arch::stat
st_mtime_nsec	$RUST/src/os/haiku/fs.rs	/^    fn st_mtime_nsec(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_mtime_nsec	$RUST/src/os/haiku/raw.rs	/^    pub st_mtime_nsec: c_long,$/;"	m	struct:stat
st_mtime_nsec	$RUST/src/os/horizon/fs.rs	/^    fn st_mtime_nsec(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_mtime_nsec	$RUST/src/os/hurd/fs.rs	/^    fn st_mtime_nsec(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_mtime_nsec	$RUST/src/os/illumos/fs.rs	/^    fn st_mtime_nsec(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_mtime_nsec	$RUST/src/os/illumos/raw.rs	/^    pub st_mtime_nsec: c_long,$/;"	m	struct:stat
st_mtime_nsec	$RUST/src/os/ios/fs.rs	/^    fn st_mtime_nsec(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_mtime_nsec	$RUST/src/os/ios/raw.rs	/^    pub st_mtime_nsec: c_long,$/;"	m	struct:stat
st_mtime_nsec	$RUST/src/os/l4re/fs.rs	/^    fn st_mtime_nsec(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_mtime_nsec	$RUST/src/os/l4re/raw.rs	/^        pub st_mtime_nsec: c_long,$/;"	m	struct:arch::stat
st_mtime_nsec	$RUST/src/os/linux/fs.rs	/^    fn st_mtime_nsec(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_mtime_nsec	$RUST/src/os/linux/raw.rs	/^        pub st_mtime_nsec: c_long,$/;"	m	struct:arch::stat
st_mtime_nsec	$RUST/src/os/macos/fs.rs	/^    fn st_mtime_nsec(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_mtime_nsec	$RUST/src/os/macos/raw.rs	/^    pub st_mtime_nsec: c_long,$/;"	m	struct:stat
st_mtime_nsec	$RUST/src/os/netbsd/fs.rs	/^    fn st_mtime_nsec(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_mtime_nsec	$RUST/src/os/netbsd/raw.rs	/^    pub st_mtime_nsec: c_long,$/;"	m	struct:stat
st_mtime_nsec	$RUST/src/os/nto/fs.rs	/^    fn st_mtime_nsec(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_mtime_nsec	$RUST/src/os/openbsd/fs.rs	/^    fn st_mtime_nsec(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_mtime_nsec	$RUST/src/os/openbsd/raw.rs	/^    pub st_mtime_nsec: c_long,$/;"	m	struct:stat
st_mtime_nsec	$RUST/src/os/redox/fs.rs	/^    fn st_mtime_nsec(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_mtime_nsec	$RUST/src/os/redox/raw.rs	/^    pub st_mtime_nsec: c_long,$/;"	m	struct:stat
st_mtime_nsec	$RUST/src/os/solaris/fs.rs	/^    fn st_mtime_nsec(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_mtime_nsec	$RUST/src/os/solaris/raw.rs	/^    pub st_mtime_nsec: c_long,$/;"	m	struct:stat
st_mtime_nsec	$RUST/src/os/vita/fs.rs	/^    fn st_mtime_nsec(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_mtime_nsec	$RUST/src/os/vxworks/fs.rs	/^    fn st_mtime_nsec(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_mtime_nsec	$RUST/src/os/watchos/fs.rs	/^    fn st_mtime_nsec(&self) -> i64;$/;"	P	interface:MetadataExt	signature:(&self) -> i64
st_mtime_nsec	$RUST/src/os/watchos/raw.rs	/^    pub st_mtime_nsec: c_long,$/;"	m	struct:stat
st_nlink	$RUST/src/os/aix/fs.rs	/^    fn st_nlink(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_nlink	$RUST/src/os/android/fs.rs	/^    fn st_nlink(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_nlink	$RUST/src/os/android/raw.rs	/^        pub st_nlink: nlink_t,$/;"	m	struct:arch::stat
st_nlink	$RUST/src/os/dragonfly/fs.rs	/^    fn st_nlink(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_nlink	$RUST/src/os/dragonfly/raw.rs	/^    pub st_nlink: u16,$/;"	m	struct:stat
st_nlink	$RUST/src/os/emscripten/fs.rs	/^    fn st_nlink(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_nlink	$RUST/src/os/emscripten/raw.rs	/^    pub st_nlink: u32,$/;"	m	struct:stat
st_nlink	$RUST/src/os/espidf/fs.rs	/^    fn st_nlink(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_nlink	$RUST/src/os/espidf/raw.rs	/^    pub st_nlink: nlink_t,$/;"	m	struct:stat
st_nlink	$RUST/src/os/freebsd/fs.rs	/^    fn st_nlink(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_nlink	$RUST/src/os/freebsd/raw.rs	/^    pub st_nlink: u16,$/;"	m	struct:stat
st_nlink	$RUST/src/os/fuchsia/fs.rs	/^    fn st_nlink(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_nlink	$RUST/src/os/fuchsia/raw.rs	/^        pub st_nlink: u64,$/;"	m	struct:arch::stat
st_nlink	$RUST/src/os/haiku/fs.rs	/^    fn st_nlink(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_nlink	$RUST/src/os/haiku/raw.rs	/^    pub st_nlink: nlink_t,$/;"	m	struct:stat
st_nlink	$RUST/src/os/horizon/fs.rs	/^    fn st_nlink(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_nlink	$RUST/src/os/horizon/raw.rs	/^    pub st_nlink: nlink_t,$/;"	m	struct:stat
st_nlink	$RUST/src/os/hurd/fs.rs	/^    fn st_nlink(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_nlink	$RUST/src/os/illumos/fs.rs	/^    fn st_nlink(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_nlink	$RUST/src/os/illumos/raw.rs	/^    pub st_nlink: nlink_t,$/;"	m	struct:stat
st_nlink	$RUST/src/os/ios/fs.rs	/^    fn st_nlink(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_nlink	$RUST/src/os/ios/raw.rs	/^    pub st_nlink: u16,$/;"	m	struct:stat
st_nlink	$RUST/src/os/l4re/fs.rs	/^    fn st_nlink(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_nlink	$RUST/src/os/l4re/raw.rs	/^        pub st_nlink: u64,$/;"	m	struct:arch::stat
st_nlink	$RUST/src/os/linux/fs.rs	/^    fn st_nlink(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_nlink	$RUST/src/os/linux/raw.rs	/^        pub st_nlink: u64,$/;"	m	struct:arch::stat
st_nlink	$RUST/src/os/macos/fs.rs	/^    fn st_nlink(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_nlink	$RUST/src/os/macos/raw.rs	/^    pub st_nlink: u16,$/;"	m	struct:stat
st_nlink	$RUST/src/os/netbsd/fs.rs	/^    fn st_nlink(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_nlink	$RUST/src/os/netbsd/raw.rs	/^    pub st_nlink: u32,$/;"	m	struct:stat
st_nlink	$RUST/src/os/nto/fs.rs	/^    fn st_nlink(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_nlink	$RUST/src/os/openbsd/fs.rs	/^    fn st_nlink(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_nlink	$RUST/src/os/openbsd/raw.rs	/^    pub st_nlink: u32,$/;"	m	struct:stat
st_nlink	$RUST/src/os/redox/fs.rs	/^    fn st_nlink(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_nlink	$RUST/src/os/redox/raw.rs	/^    pub st_nlink: nlink_t,$/;"	m	struct:stat
st_nlink	$RUST/src/os/solaris/fs.rs	/^    fn st_nlink(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_nlink	$RUST/src/os/solaris/raw.rs	/^    pub st_nlink: nlink_t,$/;"	m	struct:stat
st_nlink	$RUST/src/os/vita/fs.rs	/^    fn st_nlink(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_nlink	$RUST/src/os/vita/raw.rs	/^    pub st_nlink: nlink_t,$/;"	m	struct:stat
st_nlink	$RUST/src/os/vxworks/fs.rs	/^    fn st_nlink(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_nlink	$RUST/src/os/watchos/fs.rs	/^    fn st_nlink(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_nlink	$RUST/src/os/watchos/raw.rs	/^    pub st_nlink: u16,$/;"	m	struct:stat
st_pad1	$RUST/src/os/fuchsia/raw.rs	/^        pub st_pad1: [c_long; 3],$/;"	m	struct:arch::stat
st_pad1	$RUST/src/os/l4re/raw.rs	/^        pub st_pad1: [c_long; 3],$/;"	m	struct:arch::stat
st_pad1	$RUST/src/os/linux/raw.rs	/^        pub st_pad1: [c_long; 3],$/;"	m	struct:arch::stat
st_pad2	$RUST/src/os/fuchsia/raw.rs	/^        pub st_pad2: [c_long; 2],$/;"	m	struct:arch::stat
st_pad2	$RUST/src/os/l4re/raw.rs	/^        pub st_pad2: [c_long; 2],$/;"	m	struct:arch::stat
st_pad2	$RUST/src/os/linux/raw.rs	/^        pub st_pad2: [c_long; 2],$/;"	m	struct:arch::stat
st_pad5	$RUST/src/os/fuchsia/raw.rs	/^        pub st_pad5: [c_long; 14],$/;"	m	struct:arch::stat
st_pad5	$RUST/src/os/l4re/raw.rs	/^        pub st_pad5: [c_long; 14],$/;"	m	struct:arch::stat
st_pad5	$RUST/src/os/linux/raw.rs	/^        pub st_pad5: [c_long; 14],$/;"	m	struct:arch::stat
st_qspare	$RUST/src/os/ios/raw.rs	/^    pub st_qspare: [i64; 2],$/;"	m	struct:stat
st_qspare	$RUST/src/os/macos/fs.rs	/^    fn st_qspare(&self) -> [u64; 2];$/;"	P	interface:MetadataExt	signature:(&self) -> [u64; 2]
st_qspare	$RUST/src/os/macos/raw.rs	/^    pub st_qspare: [i64; 2],$/;"	m	struct:stat
st_qspare	$RUST/src/os/watchos/raw.rs	/^    pub st_qspare: [i64; 2],$/;"	m	struct:stat
st_rdev	$RUST/src/os/aix/fs.rs	/^    fn st_rdev(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_rdev	$RUST/src/os/android/fs.rs	/^    fn st_rdev(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_rdev	$RUST/src/os/android/raw.rs	/^        pub st_rdev: dev_t,$/;"	m	struct:arch::stat
st_rdev	$RUST/src/os/dragonfly/fs.rs	/^    fn st_rdev(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_rdev	$RUST/src/os/dragonfly/raw.rs	/^    pub st_rdev: u32,$/;"	m	struct:stat
st_rdev	$RUST/src/os/emscripten/fs.rs	/^    fn st_rdev(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_rdev	$RUST/src/os/emscripten/raw.rs	/^    pub st_rdev: u64,$/;"	m	struct:stat
st_rdev	$RUST/src/os/espidf/fs.rs	/^    fn st_rdev(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_rdev	$RUST/src/os/espidf/raw.rs	/^    pub st_rdev: dev_t,$/;"	m	struct:stat
st_rdev	$RUST/src/os/freebsd/fs.rs	/^    fn st_rdev(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_rdev	$RUST/src/os/freebsd/raw.rs	/^    pub st_rdev: u32,$/;"	m	struct:stat
st_rdev	$RUST/src/os/fuchsia/fs.rs	/^    fn st_rdev(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_rdev	$RUST/src/os/fuchsia/raw.rs	/^        pub st_rdev: u64,$/;"	m	struct:arch::stat
st_rdev	$RUST/src/os/haiku/fs.rs	/^    fn st_rdev(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_rdev	$RUST/src/os/haiku/raw.rs	/^    pub st_rdev: dev_t,$/;"	m	struct:stat
st_rdev	$RUST/src/os/horizon/fs.rs	/^    fn st_rdev(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_rdev	$RUST/src/os/horizon/raw.rs	/^    pub st_rdev: dev_t,$/;"	m	struct:stat
st_rdev	$RUST/src/os/hurd/fs.rs	/^    fn st_rdev(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_rdev	$RUST/src/os/illumos/fs.rs	/^    fn st_rdev(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_rdev	$RUST/src/os/illumos/raw.rs	/^    pub st_rdev: dev_t,$/;"	m	struct:stat
st_rdev	$RUST/src/os/ios/fs.rs	/^    fn st_rdev(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_rdev	$RUST/src/os/ios/raw.rs	/^    pub st_rdev: i32,$/;"	m	struct:stat
st_rdev	$RUST/src/os/l4re/fs.rs	/^    fn st_rdev(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_rdev	$RUST/src/os/l4re/raw.rs	/^        pub st_rdev: u64,$/;"	m	struct:arch::stat
st_rdev	$RUST/src/os/linux/fs.rs	/^    fn st_rdev(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_rdev	$RUST/src/os/linux/raw.rs	/^        pub st_rdev: u64,$/;"	m	struct:arch::stat
st_rdev	$RUST/src/os/macos/fs.rs	/^    fn st_rdev(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_rdev	$RUST/src/os/macos/raw.rs	/^    pub st_rdev: i32,$/;"	m	struct:stat
st_rdev	$RUST/src/os/netbsd/fs.rs	/^    fn st_rdev(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_rdev	$RUST/src/os/netbsd/raw.rs	/^    pub st_rdev: u64,$/;"	m	struct:stat
st_rdev	$RUST/src/os/nto/fs.rs	/^    fn st_rdev(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_rdev	$RUST/src/os/openbsd/fs.rs	/^    fn st_rdev(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_rdev	$RUST/src/os/openbsd/raw.rs	/^    pub st_rdev: i32,$/;"	m	struct:stat
st_rdev	$RUST/src/os/redox/fs.rs	/^    fn st_rdev(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_rdev	$RUST/src/os/redox/raw.rs	/^    pub st_rdev: dev_t,$/;"	m	struct:stat
st_rdev	$RUST/src/os/solaris/fs.rs	/^    fn st_rdev(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_rdev	$RUST/src/os/solaris/raw.rs	/^    pub st_rdev: dev_t,$/;"	m	struct:stat
st_rdev	$RUST/src/os/vita/fs.rs	/^    fn st_rdev(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_rdev	$RUST/src/os/vita/raw.rs	/^    pub st_rdev: dev_t,$/;"	m	struct:stat
st_rdev	$RUST/src/os/vxworks/fs.rs	/^    fn st_rdev(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_rdev	$RUST/src/os/watchos/fs.rs	/^    fn st_rdev(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_rdev	$RUST/src/os/watchos/raw.rs	/^    pub st_rdev: i32,$/;"	m	struct:stat
st_size	$RUST/src/os/aix/fs.rs	/^    fn st_size(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_size	$RUST/src/os/android/fs.rs	/^    fn st_size(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_size	$RUST/src/os/android/raw.rs	/^        pub st_size: off_t,$/;"	m	struct:arch::stat
st_size	$RUST/src/os/dragonfly/fs.rs	/^    fn st_size(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_size	$RUST/src/os/dragonfly/raw.rs	/^    pub st_size: i64,$/;"	m	struct:stat
st_size	$RUST/src/os/emscripten/fs.rs	/^    fn st_size(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_size	$RUST/src/os/emscripten/raw.rs	/^    pub st_size: i64,$/;"	m	struct:stat
st_size	$RUST/src/os/espidf/fs.rs	/^    fn st_size(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_size	$RUST/src/os/espidf/raw.rs	/^    pub st_size: off_t,$/;"	m	struct:stat
st_size	$RUST/src/os/freebsd/fs.rs	/^    fn st_size(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_size	$RUST/src/os/freebsd/raw.rs	/^    pub st_size: i64,$/;"	m	struct:stat
st_size	$RUST/src/os/fuchsia/fs.rs	/^    fn st_size(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_size	$RUST/src/os/fuchsia/raw.rs	/^        pub st_size: i64,$/;"	m	struct:arch::stat
st_size	$RUST/src/os/haiku/fs.rs	/^    fn st_size(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_size	$RUST/src/os/haiku/raw.rs	/^    pub st_size: off_t,$/;"	m	struct:stat
st_size	$RUST/src/os/horizon/fs.rs	/^    fn st_size(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_size	$RUST/src/os/horizon/raw.rs	/^    pub st_size: off_t,$/;"	m	struct:stat
st_size	$RUST/src/os/hurd/fs.rs	/^    fn st_size(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_size	$RUST/src/os/illumos/fs.rs	/^    fn st_size(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_size	$RUST/src/os/illumos/raw.rs	/^    pub st_size: off_t,$/;"	m	struct:stat
st_size	$RUST/src/os/ios/fs.rs	/^    fn st_size(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_size	$RUST/src/os/ios/raw.rs	/^    pub st_size: i64,$/;"	m	struct:stat
st_size	$RUST/src/os/l4re/fs.rs	/^    fn st_size(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_size	$RUST/src/os/l4re/raw.rs	/^        pub st_size: i64,$/;"	m	struct:arch::stat
st_size	$RUST/src/os/linux/fs.rs	/^    fn st_size(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_size	$RUST/src/os/linux/raw.rs	/^        pub st_size: i64,$/;"	m	struct:arch::stat
st_size	$RUST/src/os/macos/fs.rs	/^    fn st_size(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_size	$RUST/src/os/macos/raw.rs	/^    pub st_size: i64,$/;"	m	struct:stat
st_size	$RUST/src/os/netbsd/fs.rs	/^    fn st_size(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_size	$RUST/src/os/netbsd/raw.rs	/^    pub st_size: i64,$/;"	m	struct:stat
st_size	$RUST/src/os/nto/fs.rs	/^    fn st_size(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_size	$RUST/src/os/openbsd/fs.rs	/^    fn st_size(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_size	$RUST/src/os/openbsd/raw.rs	/^    pub st_size: i64,$/;"	m	struct:stat
st_size	$RUST/src/os/redox/fs.rs	/^    fn st_size(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_size	$RUST/src/os/redox/raw.rs	/^    pub st_size: off_t,$/;"	m	struct:stat
st_size	$RUST/src/os/solaris/fs.rs	/^    fn st_size(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_size	$RUST/src/os/solaris/raw.rs	/^    pub st_size: off_t,$/;"	m	struct:stat
st_size	$RUST/src/os/vita/fs.rs	/^    fn st_size(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_size	$RUST/src/os/vita/raw.rs	/^    pub st_size: off_t,$/;"	m	struct:stat
st_size	$RUST/src/os/vxworks/fs.rs	/^    fn st_size(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_size	$RUST/src/os/watchos/fs.rs	/^    fn st_size(&self) -> u64;$/;"	P	interface:MetadataExt	signature:(&self) -> u64
st_size	$RUST/src/os/watchos/raw.rs	/^    pub st_size: i64,$/;"	m	struct:stat
st_spare	$RUST/src/os/netbsd/raw.rs	/^    st_spare: [u32; 2],$/;"	m	struct:stat
st_spare4	$RUST/src/os/espidf/fs.rs	/^    fn st_spare4(&self) -> [u32; 2];$/;"	P	interface:MetadataExt	signature:(&self) -> [u32; 2]
st_spare4	$RUST/src/os/espidf/raw.rs	/^    pub st_spare4: [c_long; 2usize],$/;"	m	struct:stat
st_spare4	$RUST/src/os/horizon/raw.rs	/^    pub st_spare4: [c_long; 2usize],$/;"	m	struct:stat
st_spare4	$RUST/src/os/vita/raw.rs	/^    pub st_spare4: [c_long; 2usize],$/;"	m	struct:stat
st_type	$RUST/src/os/haiku/raw.rs	/^    pub st_type: u32,$/;"	m	struct:stat
st_uid	$RUST/src/os/aix/fs.rs	/^    fn st_uid(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_uid	$RUST/src/os/android/fs.rs	/^    fn st_uid(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_uid	$RUST/src/os/android/raw.rs	/^        pub st_uid: uid_t,$/;"	m	struct:arch::stat
st_uid	$RUST/src/os/dragonfly/fs.rs	/^    fn st_uid(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_uid	$RUST/src/os/dragonfly/raw.rs	/^    pub st_uid: u32,$/;"	m	struct:stat
st_uid	$RUST/src/os/emscripten/fs.rs	/^    fn st_uid(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_uid	$RUST/src/os/emscripten/raw.rs	/^    pub st_uid: u32,$/;"	m	struct:stat
st_uid	$RUST/src/os/espidf/fs.rs	/^    fn st_uid(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_uid	$RUST/src/os/espidf/raw.rs	/^    pub st_uid: uid_t,$/;"	m	struct:stat
st_uid	$RUST/src/os/freebsd/fs.rs	/^    fn st_uid(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_uid	$RUST/src/os/freebsd/raw.rs	/^    pub st_uid: u32,$/;"	m	struct:stat
st_uid	$RUST/src/os/fuchsia/fs.rs	/^    fn st_uid(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_uid	$RUST/src/os/fuchsia/raw.rs	/^        pub st_uid: u32,$/;"	m	struct:arch::stat
st_uid	$RUST/src/os/haiku/fs.rs	/^    fn st_uid(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_uid	$RUST/src/os/haiku/raw.rs	/^    pub st_uid: uid_t,$/;"	m	struct:stat
st_uid	$RUST/src/os/horizon/fs.rs	/^    fn st_uid(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_uid	$RUST/src/os/horizon/raw.rs	/^    pub st_uid: uid_t,$/;"	m	struct:stat
st_uid	$RUST/src/os/hurd/fs.rs	/^    fn st_uid(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_uid	$RUST/src/os/illumos/fs.rs	/^    fn st_uid(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_uid	$RUST/src/os/illumos/raw.rs	/^    pub st_uid: uid_t,$/;"	m	struct:stat
st_uid	$RUST/src/os/ios/fs.rs	/^    fn st_uid(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_uid	$RUST/src/os/ios/raw.rs	/^    pub st_uid: u32,$/;"	m	struct:stat
st_uid	$RUST/src/os/l4re/fs.rs	/^    fn st_uid(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_uid	$RUST/src/os/l4re/raw.rs	/^        pub st_uid: u32,$/;"	m	struct:arch::stat
st_uid	$RUST/src/os/linux/fs.rs	/^    fn st_uid(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_uid	$RUST/src/os/linux/raw.rs	/^        pub st_uid: u32,$/;"	m	struct:arch::stat
st_uid	$RUST/src/os/macos/fs.rs	/^    fn st_uid(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_uid	$RUST/src/os/macos/raw.rs	/^    pub st_uid: u32,$/;"	m	struct:stat
st_uid	$RUST/src/os/netbsd/fs.rs	/^    fn st_uid(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_uid	$RUST/src/os/netbsd/raw.rs	/^    pub st_uid: uid_t,$/;"	m	struct:stat
st_uid	$RUST/src/os/nto/fs.rs	/^    fn st_uid(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_uid	$RUST/src/os/openbsd/fs.rs	/^    fn st_uid(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_uid	$RUST/src/os/openbsd/raw.rs	/^    pub st_uid: u32,$/;"	m	struct:stat
st_uid	$RUST/src/os/redox/fs.rs	/^    fn st_uid(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_uid	$RUST/src/os/redox/raw.rs	/^    pub st_uid: uid_t,$/;"	m	struct:stat
st_uid	$RUST/src/os/solaris/fs.rs	/^    fn st_uid(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_uid	$RUST/src/os/solaris/raw.rs	/^    pub st_uid: uid_t,$/;"	m	struct:stat
st_uid	$RUST/src/os/vita/fs.rs	/^    fn st_uid(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_uid	$RUST/src/os/vita/raw.rs	/^    pub st_uid: uid_t,$/;"	m	struct:stat
st_uid	$RUST/src/os/vxworks/fs.rs	/^    fn st_uid(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_uid	$RUST/src/os/watchos/fs.rs	/^    fn st_uid(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
st_uid	$RUST/src/os/watchos/raw.rs	/^    pub st_uid: u32,$/;"	m	struct:stat
stack_allocation_fails	$RUST/src/sys/pal/common/tests.rs	/^fn stack_allocation_fails() {$/;"	f	signature:()
stack_allocation_works	$RUST/src/sys/pal/common/tests.rs	/^fn stack_allocation_works() {$/;"	f	signature:()
stack_buffer_copy	$RUST/src/io/copy.rs	/^pub fn stack_buffer_copy<R: Read + ?Sized, W: Write + ?Sized>($/;"	f	signature:<R: Read + ?Sized, W: Write + ?Sized>( reader: &mut R, writer: &mut W, ) -> Result<u64>
stack_guard	$RUST/src/sys_common/thread_info.rs	/^pub fn stack_guard() -> Option<Guard> {$/;"	f	signature:() -> Option<Guard>
stack_overflow	$RUST/src/sys/pal/unix/mod.rs	/^pub mod stack_overflow;$/;"	n
stack_size	$RUST/src/thread/mod.rs	/^    stack_size: Option<usize>,$/;"	m	struct:Builder
stamp	$RUST/src/sync/mpmc/array.rs	/^    stamp: usize,$/;"	m	struct:ArrayToken
stampede_once	$RUST/src/sync/once/tests.rs	/^fn stampede_once() {$/;"	f	signature:()
start	$RUST/src/sys/pal/itron/thread.rs	/^    start: UnsafeCell<ManuallyDrop<Box<dyn FnOnce()>>>,$/;"	m	struct:ThreadInner
start_recv	$RUST/src/sync/mpmc/array.rs	/^    fn start_recv(&self, token: &mut Token) -> bool {$/;"	P	implementation:Channel	signature:(&self, token: &mut Token) -> bool
start_recv	$RUST/src/sync/mpmc/list.rs	/^    fn start_recv(&self, token: &mut Token) -> bool {$/;"	P	implementation:Channel	signature:(&self, token: &mut Token) -> bool
start_send	$RUST/src/sync/mpmc/array.rs	/^    fn start_send(&self, token: &mut Token) -> bool {$/;"	P	implementation:Channel	signature:(&self, token: &mut Token) -> bool
start_send	$RUST/src/sync/mpmc/list.rs	/^    fn start_send(&self, token: &mut Token) -> bool {$/;"	P	implementation:Channel	signature:(&self, token: &mut Token) -> bool
start_time	$RUST/src/sys/pal/unix/process/zircon.rs	/^    pub start_time: zx_time_t,$/;"	m	struct:zx_info_process_t
starts_with	$RUST/src/path.rs	/^    pub fn starts_with<P: AsRef<Path>>(&self, base: P) -> bool {$/;"	P	implementation:Path	signature:<P: AsRef<Path>>(&self, base: P) -> bool
stat	$RUST/src/os/android/raw.rs	/^    pub struct stat {$/;"	s	module:arch
stat	$RUST/src/os/dragonfly/raw.rs	/^pub struct stat {$/;"	s
stat	$RUST/src/os/emscripten/raw.rs	/^pub struct stat {$/;"	s
stat	$RUST/src/os/espidf/raw.rs	/^pub struct stat {$/;"	s
stat	$RUST/src/os/freebsd/raw.rs	/^pub struct stat {$/;"	s
stat	$RUST/src/os/fuchsia/raw.rs	/^    pub struct stat {$/;"	s	module:arch
stat	$RUST/src/os/haiku/raw.rs	/^pub struct stat {$/;"	s
stat	$RUST/src/os/horizon/raw.rs	/^pub struct stat {$/;"	s
stat	$RUST/src/os/illumos/raw.rs	/^pub struct stat {$/;"	s
stat	$RUST/src/os/ios/raw.rs	/^pub struct stat {$/;"	s
stat	$RUST/src/os/l4re/raw.rs	/^    pub struct stat {$/;"	s	module:arch
stat	$RUST/src/os/linux/raw.rs	/^    pub struct stat {$/;"	s	module:arch
stat	$RUST/src/os/macos/raw.rs	/^pub struct stat {$/;"	s
stat	$RUST/src/os/netbsd/raw.rs	/^pub struct stat {$/;"	s
stat	$RUST/src/os/openbsd/raw.rs	/^pub struct stat {$/;"	s
stat	$RUST/src/os/redox/raw.rs	/^pub struct stat {$/;"	s
stat	$RUST/src/os/solaris/raw.rs	/^pub struct stat {$/;"	s
stat	$RUST/src/os/vita/raw.rs	/^pub struct stat {$/;"	s
stat	$RUST/src/os/watchos/raw.rs	/^pub struct stat {$/;"	s
stat	$RUST/src/sys/pal/hermit/fs.rs	/^pub fn stat(_p: &Path) -> io::Result<FileAttr> {$/;"	f	signature:(_p: &Path) -> io::Result<FileAttr>
stat	$RUST/src/sys/pal/solid/fs.rs	/^    stat: abi::stat,$/;"	m	struct:FileAttr
stat	$RUST/src/sys/pal/unix/fs.rs	/^pub fn stat(p: &Path) -> io::Result<FileAttr> {$/;"	f	signature:(p: &Path) -> io::Result<FileAttr>
stat	$RUST/src/sys/pal/unsupported/fs.rs	/^pub fn stat(_p: &Path) -> io::Result<FileAttr> {$/;"	f	signature:(_p: &Path) -> io::Result<FileAttr>
stat	$RUST/src/sys/pal/wasi/fs.rs	/^pub fn stat(p: &Path) -> io::Result<FileAttr> {$/;"	f	signature:(p: &Path) -> io::Result<FileAttr>
stat	$RUST/src/sys/pal/windows/fs.rs	/^pub fn stat(path: &Path) -> io::Result<FileAttr> {$/;"	f	signature:(path: &Path) -> io::Result<FileAttr>
state	$RUST/src/sync/mpmc/list.rs	/^    state: AtomicUsize,$/;"	m	struct:Slot
state	$RUST/src/sync/once.rs	/^    pub(crate) fn state(&mut self) -> ExclusiveState {$/;"	P	implementation:Once	signature:(&mut self) -> ExclusiveState
state	$RUST/src/sys/pal/unix/locks/futex_rwlock.rs	/^    state: AtomicU32,$/;"	m	struct:RwLock
state	$RUST/src/sys/pal/unix/thread_parking/darwin.rs	/^    state: AtomicI8,$/;"	m	struct:Parker
state	$RUST/src/sys/pal/unix/thread_parking/pthread.rs	/^    state: AtomicUsize,$/;"	m	struct:Parker
state	$RUST/src/sys/pal/unsupported/once.rs	/^    state: Cell<State>,$/;"	m	struct:Once
state	$RUST/src/sys/pal/windows/pipe.rs	/^    state: State,$/;"	m	struct:AsyncPipe
state	$RUST/src/sys/pal/windows/thread_parking.rs	/^    state: AtomicI8,$/;"	m	struct:Parker
state	$RUST/src/sys/pal/xous/thread_parking.rs	/^    state: AtomicI8,$/;"	m	struct:Parker
state	$RUST/src/sys_common/once/futex.rs	/^    state: AtomicU32,$/;"	m	struct:Once
state	$RUST/src/sys_common/once/queue.rs	/^    pub(crate) fn state(&mut self) -> ExclusiveState {$/;"	P	implementation:Once	signature:(&mut self) -> ExclusiveState
state	$RUST/src/sys_common/thread_parking/futex.rs	/^    state: AtomicU32,$/;"	m	struct:Parker
state	$RUST/src/sys_common/thread_parking/id.rs	/^    state: AtomicI8,$/;"	m	struct:Parker
state_and_queue	$RUST/src/sys_common/once/queue.rs	/^    state_and_queue: AtomicPtr<Masked>,$/;"	m	struct:Once
states	$RUST/src/thread/local/tests.rs	/^fn states() {$/;"	f	signature:()
static_assert	$RUST/src/io/error/repr_bitpacked.rs	/^macro_rules! static_assert {$/;"	M
static_keyword	$RUST/src/keyword_docs.rs	/^mod static_keyword {}$/;"	n
static_sync_lazy	$RUST/src/sync/lazy_lock/tests.rs	/^fn static_sync_lazy() {$/;"	f	signature:()
static_sync_lazy_via_fn	$RUST/src/sync/lazy_lock/tests.rs	/^fn static_sync_lazy_via_fn() {$/;"	f	signature:()
statik	$RUST/src/sys_common/thread_local_key/tests.rs	/^fn statik() {$/;"	f	signature:()
status	$RUST/src/backtrace.rs	/^    pub fn status(&self) -> BacktraceStatus {$/;"	P	implementation:Backtrace	signature:(&self) -> BacktraceStatus
status	$RUST/src/process.rs	/^    pub status: ExitStatus,$/;"	m	struct:Output
status	$RUST/src/sys/pal/unix/process/process_unix.rs	/^    status: Option<ExitStatus>,$/;"	m	struct:Process
status	$RUST/src/sys/pal/unix/process/process_vxworks.rs	/^    status: Option<ExitStatus>,$/;"	m	struct:Process
status	$RUST/src/sys/pal/windows/c.rs	/^    pub fn status(&self) -> NTSTATUS {$/;"	P	implementation:IO_STATUS_BLOCK	signature:(&self) -> NTSTATUS
std_float	$RUST/src/lib.rs	/^mod std_float;$/;"	n
stderr	$RUST/src/io/stdio.rs	/^pub fn stderr() -> Stderr {$/;"	f	signature:() -> Stderr
stderr	$RUST/src/process.rs	/^    pub stderr: Vec<u8>,$/;"	m	struct:Output
stderr	$RUST/src/sys/pal/unix/process/process_common.rs	/^    stderr: Option<Stdio>,$/;"	m	struct:Command
stderr	$RUST/src/sys/pal/unsupported/process.rs	/^    pub stderr: Option<AnonPipe>,$/;"	m	struct:StdioPipes
stderr	$RUST/src/sys/pal/windows/process.rs	/^    stderr: Option<Stdio>,$/;"	m	struct:Command
stderr_raw	$RUST/src/io/stdio.rs	/^const fn stderr_raw() -> StderrRaw {$/;"	f	signature:() -> StderrRaw
stderr_unwind_safe	$RUST/src/io/stdio/tests.rs	/^fn stderr_unwind_safe() {$/;"	f	signature:()
stderrlock_unwind_safe	$RUST/src/io/stdio/tests.rs	/^fn stderrlock_unwind_safe() {$/;"	f	signature:()
stdin	$RUST/src/io/stdio.rs	/^pub fn stdin() -> Stdin {$/;"	f	signature:() -> Stdin
stdin	$RUST/src/process.rs	/^    pub stdin: Option<ChildStdin>,$/;"	m	struct:Child
stdin	$RUST/src/sys/pal/unix/process/process_common.rs	/^    stdin: Option<Stdio>,$/;"	m	struct:Command
stdin	$RUST/src/sys/pal/unsupported/process.rs	/^    pub stdin: Option<AnonPipe>,$/;"	m	struct:StdioPipes
stdin	$RUST/src/sys/pal/windows/process.rs	/^    stdin: Option<Stdio>,$/;"	m	struct:Command
stdin_raw	$RUST/src/io/stdio.rs	/^const fn stdin_raw() -> StdinRaw {$/;"	f	signature:() -> StdinRaw
stdin_works	$RUST/src/process/tests.rs	/^fn stdin_works() {$/;"	f	signature:()
stdio	$RUST/src/io/mod.rs	/^mod stdio;$/;"	n
stdio	$RUST/src/sys/pal/hermit/mod.rs	/^pub mod stdio;$/;"	n
stdio	$RUST/src/sys/pal/sgx/mod.rs	/^pub mod stdio;$/;"	n
stdio	$RUST/src/sys/pal/solid/mod.rs	/^pub mod stdio;$/;"	n
stdio	$RUST/src/sys/pal/teeos/mod.rs	/^pub mod stdio;$/;"	n
stdio	$RUST/src/sys/pal/uefi/mod.rs	/^pub mod stdio;$/;"	n
stdio	$RUST/src/sys/pal/unix/mod.rs	/^pub mod stdio;$/;"	n
stdio	$RUST/src/sys/pal/unsupported/mod.rs	/^pub mod stdio;$/;"	n
stdio	$RUST/src/sys/pal/wasi/mod.rs	/^pub mod stdio;$/;"	n
stdio	$RUST/src/sys/pal/wasm/mod.rs	/^pub mod stdio;$/;"	n
stdio	$RUST/src/sys/pal/windows/mod.rs	/^pub mod stdio;$/;"	n
stdio	$RUST/src/sys/pal/xous/mod.rs	/^pub mod stdio;$/;"	n
stdio	$RUST/src/sys/pal/zkvm/mod.rs	/^pub mod stdio;$/;"	n
stdio_handle	$RUST/src/os/windows/io/raw.rs	/^fn stdio_handle(raw: RawHandle) -> RawHandle {$/;"	f	signature:(raw: RawHandle) -> RawHandle
stdout	$RUST/src/io/stdio.rs	/^pub fn stdout() -> Stdout {$/;"	f	signature:() -> Stdout
stdout	$RUST/src/process.rs	/^    pub stdout: Vec<u8>,$/;"	m	struct:Output
stdout	$RUST/src/sys/pal/unix/process/process_common.rs	/^    stdout: Option<Stdio>,$/;"	m	struct:Command
stdout	$RUST/src/sys/pal/unsupported/process.rs	/^    pub stdout: Option<AnonPipe>,$/;"	m	struct:StdioPipes
stdout	$RUST/src/sys/pal/windows/process.rs	/^    stdout: Option<Stdio>,$/;"	m	struct:Command
stdout_raw	$RUST/src/io/stdio.rs	/^const fn stdout_raw() -> StdoutRaw {$/;"	f	signature:() -> StdoutRaw
stdout_unwind_safe	$RUST/src/io/stdio/tests.rs	/^fn stdout_unwind_safe() {$/;"	f	signature:()
stdout_works	$RUST/src/process/tests.rs	/^fn stdout_works() {$/;"	f	signature:()
stdoutlock_unwind_safe	$RUST/src/io/stdio/tests.rs	/^fn stdoutlock_unwind_safe() {$/;"	f	signature:()
step	$RUST/src/sync/mpmc/utils.rs	/^    step: Cell<u32>,$/;"	m	struct:Backoff
stk	$RUST/src/sys/pal/itron/abi.rs	/^    pub stk: *mut u8,$/;"	m	struct:T_CTSK
stksz	$RUST/src/sys/pal/itron/abi.rs	/^    pub stksz: usize,$/;"	m	struct:T_CTSK
stopped_signal	$RUST/src/os/unix/process.rs	/^    fn stopped_signal(&self) -> Option<i32>;$/;"	P	interface:ExitStatusExt	signature:(&self) -> Option<i32>
stopped_signal	$RUST/src/sys/pal/unix/process/process_fuchsia.rs	/^    pub fn stopped_signal(&self) -> Option<i32> {$/;"	P	implementation:ExitStatus	signature:(&self) -> Option<i32>
stopped_signal	$RUST/src/sys/pal/unix/process/process_unix.rs	/^    pub fn stopped_signal(&self) -> Option<i32> {$/;"	P	implementation:ExitStatus	signature:(&self) -> Option<i32>
stopped_signal	$RUST/src/sys/pal/unix/process/process_unsupported/wait_status.rs	/^    pub fn stopped_signal(&self) -> Option<i32> {$/;"	P	implementation:ExitStatus	signature:(&self) -> Option<i32>
stopped_signal	$RUST/src/sys/pal/unix/process/process_vxworks.rs	/^    pub fn stopped_signal(&self) -> Option<i32> {$/;"	P	implementation:ExitStatus	signature:(&self) -> Option<i32>
store_packet	$RUST/src/sync/mpmc/context.rs	/^    pub fn store_packet(&self, packet: *mut ()) {$/;"	P	implementation:Context	signature:(&self, packet: *mut ())
str	$RUST/src/ascii.rs	/^impl AsciiExt for str {$/;"	c
str	$RUST/src/ffi/os_str.rs	/^impl<'a> TryFrom<&'a OsStr> for &'a str {$/;"	c
str	$RUST/src/io/buffered/bufwriter.rs	/^    const DESCRIPTION: &'static str =$/;"	v	implementation:WriterPanicked
str	$RUST/src/net/socket_addr.rs	/^impl ToSocketAddrs for str {$/;"	c
str	$RUST/src/panicking.rs	/^    let msg = match info.payload().downcast_ref::<&'static str>() {$/;"	v	function:default_hook
str	$RUST/src/path.rs	/^impl AsRef<Path> for str {$/;"	c
str	$RUST/src/process/tests.rs	/^    const PIDFD: &'static str =$/;"	v	function:debug_print
str	$RUST/src/thread/tests.rs	/^            type T = &'static str;$/;"	v	function:test_try_panic_message_string_literal
str_debug	$RUST/src/sys/pal/hermit/os.rs	/^    pub fn str_debug(&self) -> impl fmt::Debug + '_ {$/;"	P	implementation:Env	signature:(&self) -> impl fmt::Debug + '_
str_debug	$RUST/src/sys/pal/sgx/os.rs	/^    pub fn str_debug(&self) -> impl fmt::Debug + '_ {$/;"	P	implementation:Env	signature:(&self) -> impl fmt::Debug + '_
str_debug	$RUST/src/sys/pal/solid/os.rs	/^    pub fn str_debug(&self) -> impl fmt::Debug + '_ {$/;"	P	implementation:Env	signature:(&self) -> impl fmt::Debug + '_
str_debug	$RUST/src/sys/pal/teeos/os.rs	/^    pub fn str_debug(&self) -> impl fmt::Debug + '_ {$/;"	P	implementation:Env	signature:(&self) -> impl fmt::Debug + '_
str_debug	$RUST/src/sys/pal/uefi/os.rs	/^    pub fn str_debug(&self) -> impl fmt::Debug + '_ {$/;"	P	implementation:Env	signature:(&self) -> impl fmt::Debug + '_
str_debug	$RUST/src/sys/pal/unix/os.rs	/^    pub fn str_debug(&self) -> impl fmt::Debug + '_ {$/;"	P	implementation:Env	signature:(&self) -> impl fmt::Debug + '_
str_debug	$RUST/src/sys/pal/unsupported/os.rs	/^    pub fn str_debug(&self) -> impl fmt::Debug + '_ {$/;"	P	implementation:Env	signature:(&self) -> impl fmt::Debug + '_
str_debug	$RUST/src/sys/pal/wasi/os.rs	/^    pub fn str_debug(&self) -> impl fmt::Debug + '_ {$/;"	P	implementation:Env	signature:(&self) -> impl fmt::Debug + '_
str_debug	$RUST/src/sys/pal/windows/os.rs	/^    pub fn str_debug(&self) -> impl fmt::Debug + '_ {$/;"	P	implementation:Env	signature:(&self) -> impl fmt::Debug + '_
str_debug	$RUST/src/sys/pal/xous/os.rs	/^    pub fn str_debug(&self) -> impl fmt::Debug + '_ {$/;"	P	implementation:Env	signature:(&self) -> impl fmt::Debug + '_
str_debug	$RUST/src/sys/pal/zkvm/os.rs	/^    pub fn str_debug(&self) -> impl fmt::Debug + '_ {$/;"	P	implementation:Env	signature:(&self) -> impl fmt::Debug + '_
stream	$RUST/src/os/unix/net/mod.rs	/^mod stream;$/;"	n
stream_len	$RUST/src/io/cursor.rs	/^    fn stream_len(&mut self) -> io::Result<u64> {$/;"	f	signature:(&mut self) -> io::Result<u64>
stream_len	$RUST/src/io/mod.rs	/^    fn stream_len(&mut self) -> Result<u64> {$/;"	P	interface:Seek	signature:(&mut self) -> Result<u64>
stream_len	$RUST/src/io/util.rs	/^    fn stream_len(&mut self) -> io::Result<u64> {$/;"	P	implementation:Empty	signature:(&mut self) -> io::Result<u64>
stream_position	$RUST/src/io/buffered/bufreader.rs	/^    fn stream_position(&mut self) -> io::Result<u64> {$/;"	P	implementation:BufReader	signature:(&mut self) -> io::Result<u64>
stream_position	$RUST/src/io/cursor.rs	/^    fn stream_position(&mut self) -> io::Result<u64> {$/;"	f	signature:(&mut self) -> io::Result<u64>
stream_position	$RUST/src/io/impls.rs	/^    fn stream_position(&mut self) -> io::Result<u64> {$/;"	P	implementation:S	signature:(&mut self) -> io::Result<u64>
stream_position	$RUST/src/io/mod.rs	/^    fn stream_position(&mut self) -> Result<u64> {$/;"	P	interface:Seek	signature:(&mut self) -> Result<u64>
stream_position	$RUST/src/io/util.rs	/^    fn stream_position(&mut self) -> io::Result<u64> {$/;"	P	implementation:Empty	signature:(&mut self) -> io::Result<u64>
stream_send_recv_stress	$RUST/src/sync/mpsc/sync_tests.rs	/^fn stream_send_recv_stress() {$/;"	f	signature:()
stream_send_recv_stress	$RUST/src/sync/mpsc/tests.rs	/^fn stream_send_recv_stress() {$/;"	f	signature:()
strerror	$RUST/src/sys/pal/solid/abi/sockets.rs	/^    pub fn strerror(errnum: c_int) -> *const c_char;$/;"	f	signature:(errnum: c_int) -> *const c_char
strerror_r	$RUST/src/sys/pal/unix/os.rs	/^        fn strerror_r(errnum: c_int, buf: *mut c_char, buflen: libc::size_t) -> c_int;$/;"	f	function:error_string	signature:(errnum: c_int, buf: *mut c_char, buflen: libc::size_t) -> c_int
stress	$RUST/src/sync/mpsc/sync_tests.rs	/^fn stress() {$/;"	f	signature:()
stress	$RUST/src/sync/mpsc/tests.rs	/^fn stress() {$/;"	f	signature:()
stress_factor	$RUST/src/sync/mpsc/sync_tests.rs	/^pub fn stress_factor() -> usize {$/;"	f	signature:() -> usize
stress_factor	$RUST/src/sync/mpsc/tests.rs	/^pub fn stress_factor() -> usize {$/;"	f	signature:() -> usize
stress_recv_timeout_shared	$RUST/src/sync/mpsc/sync_tests.rs	/^fn stress_recv_timeout_shared() {$/;"	f	signature:()
stress_recv_timeout_shared	$RUST/src/sync/mpsc/tests.rs	/^fn stress_recv_timeout_shared() {$/;"	f	signature:()
stress_recv_timeout_two_threads	$RUST/src/sync/mpsc/sync_tests.rs	/^fn stress_recv_timeout_two_threads() {$/;"	f	signature:()
stress_recv_timeout_two_threads	$RUST/src/sync/mpsc/tests.rs	/^fn stress_recv_timeout_two_threads() {$/;"	f	signature:()
stress_shared	$RUST/src/sync/mpsc/sync_tests.rs	/^fn stress_shared() {$/;"	f	signature:()
stress_shared	$RUST/src/sync/mpsc/tests.rs	/^fn stress_shared() {$/;"	f	signature:()
string	$RUST/src/panicking.rs	/^        string: Option<String>,$/;"	m	struct:begin_panic_handler::FormatStringPayload
string_from_bytebuffer	$RUST/src/sys/pal/sgx/abi/usercalls/mod.rs	/^fn string_from_bytebuffer(buf: &alloc::UserRef<ByteBuffer>, usercall: &str, arg: &str) -> String/;"	f	signature:(buf: &alloc::UserRef<ByteBuffer>, usercall: &str, arg: &str) -> String
strip_prefix	$RUST/src/path.rs	/^    pub fn strip_prefix<P>(&self, base: P) -> Result<&Path, StripPrefixError>$/;"	P	implementation:Path	signature:<P>(&self, base: P) -> Result<&Path, StripPrefixError> where P: AsRef<Path>,
struct_keyword	$RUST/src/keyword_docs.rs	/^mod struct_keyword {}$/;"	n
sub	$RUST/src/collections/hash/set.rs	/^    fn sub(self, rhs: &HashSet<T, S>) -> HashSet<T, S> {$/;"	f	signature:(self, rhs: &HashSet<T, S>) -> HashSet<T, S>
sub	$RUST/src/os/xous/ffi/definitions/memoryflags.rs	/^    fn sub(self, other: Self) -> Self {$/;"	P	implementation:MemoryFlags	signature:(self, other: Self) -> Self
sub	$RUST/src/sys/pal/hermit/time.rs	/^    fn sub(self, other: Instant) -> Duration {$/;"	P	implementation:Instant	signature:(self, other: Instant) -> Duration
sub	$RUST/src/time.rs	/^    fn sub(self, other: Instant) -> Duration {$/;"	P	implementation:Instant	signature:(self, other: Instant) -> Duration
sub_assign	$RUST/src/os/xous/ffi/definitions/memoryflags.rs	/^    fn sub_assign(&mut self, other: Self) {$/;"	P	implementation:MemoryFlags	signature:(&mut self, other: Self)
sub_assign	$RUST/src/sys/pal/hermit/time.rs	/^    fn sub_assign(&mut self, other: Duration) {$/;"	P	implementation:Instant	signature:(&mut self, other: Duration)
sub_assign	$RUST/src/time.rs	/^    fn sub_assign(&mut self, other: Duration) {$/;"	P	implementation:SystemTime	signature:(&mut self, other: Duration)
sub_time	$RUST/src/sys/pal/hermit/time.rs	/^    pub fn sub_time(&self, other: &SystemTime) -> Result<Duration, Duration> {$/;"	P	implementation:SystemTime	signature:(&self, other: &SystemTime) -> Result<Duration, Duration>
sub_time	$RUST/src/sys/pal/sgx/time.rs	/^    pub fn sub_time(&self, other: &SystemTime) -> Result<Duration, Duration> {$/;"	P	implementation:SystemTime	signature:(&self, other: &SystemTime) -> Result<Duration, Duration>
sub_time	$RUST/src/sys/pal/solid/time.rs	/^    pub fn sub_time(&self, other: &SystemTime) -> Result<Duration, Duration> {$/;"	P	implementation:SystemTime	signature:(&self, other: &SystemTime) -> Result<Duration, Duration>
sub_time	$RUST/src/sys/pal/unix/time.rs	/^    pub fn sub_time(&self, other: &SystemTime) -> Result<Duration, Duration> {$/;"	P	implementation:SystemTime	signature:(&self, other: &SystemTime) -> Result<Duration, Duration>
sub_time	$RUST/src/sys/pal/unsupported/time.rs	/^    pub fn sub_time(&self, other: &SystemTime) -> Result<Duration, Duration> {$/;"	P	implementation:SystemTime	signature:(&self, other: &SystemTime) -> Result<Duration, Duration>
sub_time	$RUST/src/sys/pal/wasi/time.rs	/^    pub fn sub_time(&self, other: &SystemTime) -> Result<Duration, Duration> {$/;"	P	implementation:SystemTime	signature:(&self, other: &SystemTime) -> Result<Duration, Duration>
sub_time	$RUST/src/sys/pal/windows/time.rs	/^    pub fn sub_time(&self, other: &SystemTime) -> Result<Duration, Duration> {$/;"	P	implementation:SystemTime	signature:(&self, other: &SystemTime) -> Result<Duration, Duration>
sub_time	$RUST/src/sys/pal/xous/time.rs	/^    pub fn sub_time(&self, other: &SystemTime) -> Result<Duration, Duration> {$/;"	P	implementation:SystemTime	signature:(&self, other: &SystemTime) -> Result<Duration, Duration>
sub_timespec	$RUST/src/sys/pal/hermit/time.rs	/^    fn sub_timespec(&self, other: &Timespec) -> Result<Duration, Duration> {$/;"	P	implementation:Timespec	signature:(&self, other: &Timespec) -> Result<Duration, Duration>
sub_timespec	$RUST/src/sys/pal/unix/time.rs	/^    pub fn sub_timespec(&self, other: &Timespec) -> Result<Duration, Duration> {$/;"	P	implementation:Timespec	signature:(&self, other: &Timespec) -> Result<Duration, Duration>
success	$RUST/src/process.rs	/^    pub fn success(&self) -> bool {$/;"	P	implementation:ExitStatus	signature:(&self) -> bool
sun_family	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub sun_family: ADDRESS_FAMILY,$/;"	m	struct:SOCKADDR_UN
sun_path	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub sun_path: [u8; 108],$/;"	m	struct:SOCKADDR_UN
sun_path_offset	$RUST/src/os/unix/net/addr.rs	/^fn sun_path_offset(addr: &libc::sockaddr_un) -> usize {$/;"	f	signature:(addr: &libc::sockaddr_un) -> usize
super_keyword	$RUST/src/keyword_docs.rs	/^mod super_keyword {}$/;"	n
surrogate	$RUST/src/sys/pal/windows/stdio.rs	/^    surrogate: u16,$/;"	m	struct:Stdin
symbols	$RUST/src/backtrace.rs	/^    symbols: Vec<BacktraceSymbol>,$/;"	m	struct:BacktraceFrame
symlink	$RUST/src/os/unix/fs.rs	/^pub fn symlink<P: AsRef<Path>, Q: AsRef<Path>>(original: P, link: Q) -> io::Result<()> {$/;"	f	signature:<P: AsRef<Path>, Q: AsRef<Path>>(original: P, link: Q) -> io::Result<()>
symlink	$RUST/src/os/wasi/fs.rs	/^pub fn symlink<P: AsRef<Path>, U: AsRef<Path>>($/;"	f	signature:<P: AsRef<Path>, U: AsRef<Path>>( old_path: P, fd: &File, new_path: U, ) -> io::Result<()>
symlink	$RUST/src/sys/pal/hermit/fs.rs	/^pub fn symlink(_original: &Path, _link: &Path) -> io::Result<()> {$/;"	f	signature:(_original: &Path, _link: &Path) -> io::Result<()>
symlink	$RUST/src/sys/pal/unix/fs.rs	/^pub fn symlink(original: &Path, link: &Path) -> io::Result<()> {$/;"	f	signature:(original: &Path, link: &Path) -> io::Result<()>
symlink	$RUST/src/sys/pal/unsupported/fs.rs	/^pub fn symlink(_original: &Path, _link: &Path) -> io::Result<()> {$/;"	f	signature:(_original: &Path, _link: &Path) -> io::Result<()>
symlink	$RUST/src/sys/pal/wasi/fd.rs	/^    pub fn symlink(&self, old_path: &str, new_path: &str) -> io::Result<()> {$/;"	P	implementation:WasiFd	signature:(&self, old_path: &str, new_path: &str) -> io::Result<()>
symlink	$RUST/src/sys/pal/wasi/fs.rs	/^pub fn symlink(original: &Path, link: &Path) -> io::Result<()> {$/;"	f	signature:(original: &Path, link: &Path) -> io::Result<()>
symlink	$RUST/src/sys/pal/windows/fs.rs	/^pub fn symlink(original: &Path, link: &Path) -> io::Result<()> {$/;"	f	signature:(original: &Path, link: &Path) -> io::Result<()>
symlink_dir	$RUST/src/os/windows/fs.rs	/^pub fn symlink_dir<P: AsRef<Path>, Q: AsRef<Path>>(original: P, link: Q) -> io::Result<()> {$/;"	f	signature:<P: AsRef<Path>, Q: AsRef<Path>>(original: P, link: Q) -> io::Result<()>
symlink_file	$RUST/src/os/windows/fs.rs	/^pub fn symlink_file<P: AsRef<Path>, Q: AsRef<Path>>(original: P, link: Q) -> io::Result<()> {$/;"	f	signature:<P: AsRef<Path>, Q: AsRef<Path>>(original: P, link: Q) -> io::Result<()>
symlink_hard_link	$RUST/src/fs/tests.rs	/^fn symlink_hard_link() {$/;"	f	signature:()
symlink_inner	$RUST/src/sys/pal/windows/fs.rs	/^pub fn symlink_inner(original: &Path, link: &Path, dir: bool) -> io::Result<()> {$/;"	f	signature:(original: &Path, link: &Path, dir: bool) -> io::Result<()>
symlink_junction	$RUST/src/sys/pal/windows/fs.rs	/^pub fn symlink_junction<P: AsRef<Path>, Q: AsRef<Path>>($/;"	f	signature:<P: AsRef<Path>, Q: AsRef<Path>>( original: P, junction: Q, ) -> io::Result<()>
symlink_junction_inner	$RUST/src/sys/pal/windows/fs.rs	/^fn symlink_junction_inner(original: &Path, junction: &Path) -> io::Result<()> {$/;"	f	signature:(original: &Path, junction: &Path) -> io::Result<()>
symlink_metadata	$RUST/src/fs.rs	/^pub fn symlink_metadata<P: AsRef<Path>>(path: P) -> io::Result<Metadata> {$/;"	f	signature:<P: AsRef<Path>>(path: P) -> io::Result<Metadata>
symlink_metadata	$RUST/src/path.rs	/^    pub fn symlink_metadata(&self) -> io::Result<fs::Metadata> {$/;"	P	implementation:Path	signature:(&self) -> io::Result<fs::Metadata>
symlink_noexist	$RUST/src/fs/tests.rs	/^fn symlink_noexist() {$/;"	f	signature:()
symlink_path	$RUST/src/os/wasi/fs.rs	/^pub fn symlink_path<P: AsRef<Path>, U: AsRef<Path>>(old_path: P, new_path: U) -> io::Result<()> /;"	f	signature:<P: AsRef<Path>, U: AsRef<Path>>(old_path: P, new_path: U) -> io::Result<()>
symlinks_work	$RUST/src/fs/tests.rs	/^fn symlinks_work() {$/;"	f	signature:()
symmetric_difference	$RUST/src/collections/hash/set.rs	/^    pub fn symmetric_difference<'a>($/;"	f	signature:<'a>( &'a self, other: &'a HashSet<T, S>, ) -> SymmetricDifference<'a, T, S>
sync	$RUST/src/lib.rs	/^pub mod sync;$/;"	n
sync	$RUST/src/os/wasi/fs.rs	/^    fn sync(&mut self, sync: bool) -> &mut Self;$/;"	P	interface:OpenOptionsExt	signature:(&mut self, sync: bool) -> &mut Self
sync	$RUST/src/sys/pal/wasi/fd.rs	/^    pub fn sync(&self) -> io::Result<()> {$/;"	P	implementation:WasiFd	signature:(&self) -> io::Result<()>
sync	$RUST/src/sys/pal/wasi/fs.rs	/^    pub fn sync(&mut self, set: bool) {$/;"	P	implementation:OpenOptions	signature:(&mut self, set: bool)
sync_all	$RUST/src/fs.rs	/^    pub fn sync_all(&self) -> io::Result<()> {$/;"	P	implementation:File	signature:(&self) -> io::Result<()>
sync_bitset	$RUST/src/sys/pal/sgx/abi/tls/mod.rs	/^mod sync_bitset;$/;"	n
sync_channel	$RUST/src/sync/mpmc/mod.rs	/^pub fn sync_channel<T>(cap: usize) -> (Sender<T>, Receiver<T>) {$/;"	f	signature:<T>(cap: usize) -> (Sender<T>, Receiver<T>)
sync_channel	$RUST/src/sync/mpsc/mod.rs	/^pub fn sync_channel<T>(bound: usize) -> (SyncSender<T>, Receiver<T>) {$/;"	f	signature:<T>(bound: usize) -> (SyncSender<T>, Receiver<T>)
sync_data	$RUST/src/fs.rs	/^    pub fn sync_data(&self) -> io::Result<()> {$/;"	P	implementation:File	signature:(&self) -> io::Result<()>
sync_doesnt_kill_anything	$RUST/src/fs/tests.rs	/^fn sync_doesnt_kill_anything() {$/;"	f	signature:()
sync_lazy_default	$RUST/src/sync/lazy_lock/tests.rs	/^fn sync_lazy_default() {$/;"	f	signature:()
sync_lazy_new	$RUST/src/sync/lazy_lock/tests.rs	/^fn sync_lazy_new() {$/;"	f	signature:()
sync_lazy_poisoning	$RUST/src/sync/lazy_lock/tests.rs	/^fn sync_lazy_poisoning() {$/;"	f	signature:()
sync_once_cell	$RUST/src/sync/once_lock/tests.rs	/^fn sync_once_cell() {$/;"	f	signature:()
sync_once_cell_does_not_leak_partially_constructed_boxes	$RUST/src/sync/once_lock/tests.rs	/^fn sync_once_cell_does_not_leak_partially_constructed_boxes() {$/;"	f	signature:()
sync_once_cell_drop	$RUST/src/sync/once_lock/tests.rs	/^fn sync_once_cell_drop() {$/;"	f	signature:()
sync_once_cell_drop_empty	$RUST/src/sync/once_lock/tests.rs	/^fn sync_once_cell_drop_empty() {$/;"	f	signature:()
sync_once_cell_get_mut	$RUST/src/sync/once_lock/tests.rs	/^fn sync_once_cell_get_mut() {$/;"	f	signature:()
sync_once_cell_get_unchecked	$RUST/src/sync/once_lock/tests.rs	/^fn sync_once_cell_get_unchecked() {$/;"	f	signature:()
sync_tests	$RUST/src/sync/mpsc/mod.rs	/^mod sync_tests;$/;"	n
synchronous_read	$RUST/src/sys/pal/windows/handle.rs	/^    unsafe fn synchronous_read($/;"	P	implementation:Handle	signature:( &self, buf: *mut mem::MaybeUninit<u8>, len: usize, offset: Option<u64>, ) -> io::Result<usize>
synchronous_write	$RUST/src/sys/pal/windows/handle.rs	/^    fn synchronous_write(&self, buf: &[u8], offset: Option<u64>) -> io::Result<usize> {$/;"	P	implementation:Handle	signature:(&self, buf: &[u8], offset: Option<u64>) -> io::Result<usize>
sys	$RUST/src/lib.rs	/^mod sys;$/;"	n
sys_alloc_aligned	$RUST/src/sys/pal/zkvm/abi.rs	/^    pub fn sys_alloc_aligned(nwords: usize, align: usize) -> *mut u8;$/;"	f	signature:(nwords: usize, align: usize) -> *mut u8
sys_alloc_words	$RUST/src/sys/pal/zkvm/abi.rs	/^    pub fn sys_alloc_words(nwords: usize) -> *mut u32;$/;"	f	signature:(nwords: usize) -> *mut u32
sys_argc	$RUST/src/sys/pal/zkvm/abi.rs	/^    pub fn sys_argc() -> usize;$/;"	f	signature:() -> usize
sys_argv	$RUST/src/sys/pal/zkvm/abi.rs	/^    pub fn sys_argv(out_words: *mut u32, out_nwords: usize, arg_index: usize) -> usize;$/;"	f	signature:(out_words: *mut u32, out_nwords: usize, arg_index: usize) -> usize
sys_common	$RUST/src/lib.rs	/^mod sys_common;$/;"	n
sys_cycle_count	$RUST/src/sys/pal/zkvm/abi.rs	/^    pub fn sys_cycle_count() -> usize;$/;"	f	signature:() -> usize
sys_getenv	$RUST/src/sys/pal/zkvm/abi.rs	/^    pub fn sys_getenv($/;"	f	signature:( recv_buf: *mut u32, words: usize, varname: *const u8, varname_len: usize, ) -> usize
sys_halt	$RUST/src/sys/pal/zkvm/abi.rs	/^    pub fn sys_halt();$/;"	f	signature:()
sys_log	$RUST/src/sys/pal/zkvm/abi.rs	/^    pub fn sys_log(msg_ptr: *const u8, len: usize);$/;"	f	signature:(msg_ptr: *const u8, len: usize)
sys_output	$RUST/src/sys/pal/zkvm/abi.rs	/^    pub fn sys_output(output_id: u32, output_value: u32);$/;"	f	signature:(output_id: u32, output_value: u32)
sys_panic	$RUST/src/sys/pal/zkvm/abi.rs	/^    pub fn sys_panic(msg_ptr: *const u8, len: usize) -> !;$/;"	f	signature:(msg_ptr: *const u8, len: usize) -> !
sys_rand	$RUST/src/sys/pal/zkvm/abi.rs	/^    pub fn sys_rand(recv_buf: *mut u32, words: usize);$/;"	f	signature:(recv_buf: *mut u32, words: usize)
sys_read	$RUST/src/sys/pal/zkvm/abi.rs	/^    pub fn sys_read(fd: u32, recv_buf: *mut u8, nrequested: usize) -> usize;$/;"	f	signature:(fd: u32, recv_buf: *mut u8, nrequested: usize) -> usize
sys_sha_buffer	$RUST/src/sys/pal/zkvm/abi.rs	/^    pub fn sys_sha_buffer($/;"	f	signature:( out_state: *mut [u32; DIGEST_WORDS], in_state: *const [u32; DIGEST_WORDS], buf: *const u8, count: u32, )
sys_sha_compress	$RUST/src/sys/pal/zkvm/abi.rs	/^    pub fn sys_sha_compress($/;"	f	signature:( out_state: *mut [u32; DIGEST_WORDS], in_state: *const [u32; DIGEST_WORDS], block1_ptr: *const [u32; DIGEST_WORDS], block2_ptr: *const [u32; DIGEST_WORDS], )
sys_write	$RUST/src/sys/pal/zkvm/abi.rs	/^    pub fn sys_write(fd: u32, write_buf: *const u8, nbytes: usize);$/;"	f	signature:(fd: u32, write_buf: *const u8, nbytes: usize)
sysctl	$RUST/src/sys/pal/unix/os.rs	/^    fn sysctl() -> io::Result<PathBuf> {$/;"	f	function:current_exe	signature:() -> io::Result<PathBuf>
system_table	$RUST/src/os/uefi/env.rs	/^pub fn system_table() -> NonNull<c_void> {$/;"	f	signature:() -> NonNull<c_void>
system_time_elapsed	$RUST/src/time/tests.rs	/^fn system_time_elapsed() {$/;"	f	signature:()
system_time_math	$RUST/src/time/tests.rs	/^fn system_time_math() {$/;"	f	signature:()
systime	$RUST/src/os/xous/services.rs	/^mod systime;$/;"	n
systime_server	$RUST/src/os/xous/services/systime.rs	/^pub(crate) fn systime_server() -> Connection {$/;"	f	signature:() -> Connection
szDescription	$RUST/src/sys/pal/windows/c.rs	/^    pub szDescription: [u8; 257],$/;"	m	struct:WSADATA
szDescription	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub szDescription: [u8; 257],$/;"	m	struct:WSADATA
szExeFile	$RUST/src/process/tests.rs	/^        szExeFile: [u16; 260],$/;"	m	struct:test_proc_thread_attributes::PROCESSENTRY32W
szProtocol	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub szProtocol: [u16; 256],$/;"	m	struct:WSAPROTOCOL_INFOW
szSystemStatus	$RUST/src/sys/pal/windows/c.rs	/^    pub szSystemStatus: [u8; 129],$/;"	m	struct:WSADATA
szSystemStatus	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub szSystemStatus: [u8; 129],$/;"	m	struct:WSADATA
tail	$RUST/src/sync/mpmc/array.rs	/^    tail: CachePadded<AtomicUsize>,$/;"	m	struct:Channel
tail	$RUST/src/sync/mpmc/list.rs	/^    tail: CachePadded<Position<T>>,$/;"	m	struct:Channel
take	$RUST/src/collections/hash/set.rs	/^    pub fn take<Q: ?Sized>(&mut self, value: &Q) -> Option<T>$/;"	f	signature:<Q: ?Sized>(&mut self, value: &Q) -> Option<T> where T: Borrow<Q>, Q: Hash + Eq,
take	$RUST/src/io/mod.rs	/^    fn take(self, limit: u64) -> Take<Self>$/;"	P	interface:Read	signature:(self, limit: u64) -> Take<Self> where Self: Sized,
take	$RUST/src/sync/once_lock.rs	/^    pub fn take(&mut self) -> Option<T> {$/;"	P	implementation:OnceLock	signature:(&mut self) -> Option<T>
take	$RUST/src/sys/pal/common/thread_local/mod.rs	/^        pub unsafe fn take(&mut self) -> Option<T> {$/;"	P	implementation:lazy::LazyKeyInner	signature:(&mut self) -> Option<T>
take	$RUST/src/thread/local.rs	/^    pub fn take(&'static self) -> T$/;"	P	implementation:LocalKey	signature:(&'static self) -> T where T: Default,
take_alloc_error_hook	$RUST/src/alloc.rs	/^pub fn take_alloc_error_hook() -> fn(Layout) {$/;"	f	signature:() -> fn(Layout)
take_box	$RUST/src/panicking.rs	/^        fn take_box(&mut self) -> *mut (dyn Any + Send) {$/;"	P	implementation:rust_panic_without_hook::RewrapBox	signature:(&mut self) -> *mut (dyn Any + Send)
take_debug_panic_buf_ptr	$RUST/src/sys/pal/sgx/abi/entry.S	/^take_debug_panic_buf_ptr:$/;"	l
take_debug_panic_buf_ptr	$RUST/src/sys/pal/sgx/abi/panic.rs	/^    fn take_debug_panic_buf_ptr() -> *mut u8;$/;"	f	signature:() -> *mut u8
take_eof	$RUST/src/io/tests.rs	/^fn take_eof() {$/;"	f	signature:()
take_error	$RUST/src/net/tcp.rs	/^    pub fn take_error(&self) -> io::Result<Option<io::Error>> {$/;"	P	implementation:TcpStream	signature:(&self) -> io::Result<Option<io::Error>>
take_error	$RUST/src/net/udp.rs	/^    pub fn take_error(&self) -> io::Result<Option<io::Error>> {$/;"	P	implementation:UdpSocket	signature:(&self) -> io::Result<Option<io::Error>>
take_error	$RUST/src/os/unix/net/datagram.rs	/^    pub fn take_error(&self) -> io::Result<Option<io::Error>> {$/;"	P	implementation:UnixDatagram	signature:(&self) -> io::Result<Option<io::Error>>
take_error	$RUST/src/os/unix/net/listener.rs	/^    pub fn take_error(&self) -> io::Result<Option<io::Error>> {$/;"	P	implementation:UnixListener	signature:(&self) -> io::Result<Option<io::Error>>
take_error	$RUST/src/os/unix/net/stream.rs	/^    pub fn take_error(&self) -> io::Result<Option<io::Error>> {$/;"	P	implementation:UnixStream	signature:(&self) -> io::Result<Option<io::Error>>
take_error	$RUST/src/sys/pal/hermit/net.rs	/^    pub fn take_error(&self) -> io::Result<Option<io::Error>> {$/;"	P	implementation:Socket	signature:(&self) -> io::Result<Option<io::Error>>
take_error	$RUST/src/sys/pal/sgx/net.rs	/^    pub fn take_error(&self) -> io::Result<Option<io::Error>> {$/;"	P	implementation:UdpSocket	signature:(&self) -> io::Result<Option<io::Error>>
take_error	$RUST/src/sys/pal/solid/net.rs	/^    pub fn take_error(&self) -> io::Result<Option<io::Error>> {$/;"	P	implementation:Socket	signature:(&self) -> io::Result<Option<io::Error>>
take_error	$RUST/src/sys/pal/teeos/net.rs	/^    pub fn take_error(&self) -> io::Result<Option<io::Error>> {$/;"	P	implementation:UdpSocket	signature:(&self) -> io::Result<Option<io::Error>>
take_error	$RUST/src/sys/pal/unix/l4re.rs	/^        pub fn take_error(&self) -> io::Result<Option<io::Error>> {$/;"	P	implementation:net::UdpSocket	signature:(&self) -> io::Result<Option<io::Error>>
take_error	$RUST/src/sys/pal/unix/net.rs	/^    pub fn take_error(&self) -> io::Result<Option<io::Error>> {$/;"	P	implementation:Socket	signature:(&self) -> io::Result<Option<io::Error>>
take_error	$RUST/src/sys/pal/unsupported/net.rs	/^    pub fn take_error(&self) -> io::Result<Option<io::Error>> {$/;"	P	implementation:UdpSocket	signature:(&self) -> io::Result<Option<io::Error>>
take_error	$RUST/src/sys/pal/wasi/net.rs	/^    pub fn take_error(&self) -> io::Result<Option<io::Error>> {$/;"	P	implementation:UdpSocket	signature:(&self) -> io::Result<Option<io::Error>>
take_error	$RUST/src/sys/pal/windows/net.rs	/^    pub fn take_error(&self) -> io::Result<Option<io::Error>> {$/;"	P	implementation:Socket	signature:(&self) -> io::Result<Option<io::Error>>
take_error	$RUST/src/sys/pal/xous/net/tcplistener.rs	/^    pub fn take_error(&self) -> io::Result<Option<io::Error>> {$/;"	P	implementation:TcpListener	signature:(&self) -> io::Result<Option<io::Error>>
take_error	$RUST/src/sys/pal/xous/net/tcpstream.rs	/^    pub fn take_error(&self) -> io::Result<Option<io::Error>> {$/;"	P	implementation:TcpStream	signature:(&self) -> io::Result<Option<io::Error>>
take_error	$RUST/src/sys/pal/xous/net/udp.rs	/^    pub fn take_error(&self) -> io::Result<Option<io::Error>> {$/;"	P	implementation:UdpSocket	signature:(&self) -> io::Result<Option<io::Error>>
take_error	$RUST/src/sys_common/net.rs	/^    pub fn take_error(&self) -> io::Result<Option<io::Error>> {$/;"	P	implementation:UdpSocket	signature:(&self) -> io::Result<Option<io::Error>>
take_hook	$RUST/src/panicking.rs	/^pub fn take_hook() -> Box<dyn Fn(&PanicInfo<'_>) + 'static + Sync + Send> {$/;"	f	signature:() -> Box<dyn Fn(&PanicInfo<'_>) + 'static + Sync + Send>
take_pidfd	$RUST/src/os/linux/process.rs	/^    fn take_pidfd(&mut self) -> Result<PidFd>;$/;"	P	interface:ChildExt	signature:(&mut self) -> Result<PidFd>
take_pidfd	$RUST/src/sys/pal/unix/process/process_unix.rs	/^    fn take_pidfd(&mut self) -> io::Result<PidFd> {$/;"	P	implementation:Child	signature:(&mut self) -> io::Result<PidFd>
take_send_sync_type	$RUST/src/process/tests.rs	/^    fn take_send_sync_type<T: Send + Sync>(_: T) {}$/;"	f	function:test_command_implements_send_sync	signature:<T: Send + Sync>(_: T)
take_size_hint	$RUST/src/io/tests.rs	/^fn take_size_hint() {$/;"	f	signature:()
take_some_bytes	$RUST/src/io/util/tests.rs	/^fn take_some_bytes() {$/;"	f	signature:()
taken	$RUST/src/sys/pal/unix/kernel_copy.rs	/^    fn taken(&mut self, bytes: u64) {$/;"	f	signature:(&mut self, bytes: u64)
tan	$RUST/src/f32.rs	/^    pub fn tan(self) -> f32 {$/;"	P	implementation:f32	signature:(self) -> f32
tan	$RUST/src/f64.rs	/^    pub fn tan(self) -> f64 {$/;"	P	implementation:f64	signature:(self) -> f64
tan	$RUST/src/sys/cmath/builtins.rs	/^    pub fn tan(n: f64) -> f64;$/;"	f	signature:(n: f64) -> f64
tan	$RUST/src/sys/cmath/windows.rs	/^    pub fn tan(n: c_double) -> c_double;$/;"	f	signature:(n: c_double) -> c_double
tanf	$RUST/src/sys/cmath/builtins.rs	/^    pub fn tanf(n: f32) -> f32;$/;"	f	signature:(n: f32) -> f32
tanf	$RUST/src/sys/cmath/windows.rs	/^    pub unsafe fn tanf(n: c_float) -> c_float {$/;"	f	module:shims	signature:(n: c_float) -> c_float
tanh	$RUST/src/f32.rs	/^    pub fn tanh(self) -> f32 {$/;"	P	implementation:f32	signature:(self) -> f32
tanh	$RUST/src/f64.rs	/^    pub fn tanh(self) -> f64 {$/;"	P	implementation:f64	signature:(self) -> f64
tanh	$RUST/src/sys/cmath/builtins.rs	/^    pub fn tanh(n: f64) -> f64;$/;"	f	signature:(n: f64) -> f64
tanh	$RUST/src/sys/cmath/windows.rs	/^    pub fn tanh(n: c_double) -> c_double;$/;"	f	signature:(n: c_double) -> c_double
tanhf	$RUST/src/sys/cmath/builtins.rs	/^    pub fn tanhf(n: f32) -> f32;$/;"	f	signature:(n: f32) -> f32
tanhf	$RUST/src/sys/cmath/windows.rs	/^    pub unsafe fn tanhf(n: c_float) -> c_float {$/;"	f	module:shims	signature:(n: c_float) -> c_float
target_fd	$RUST/src/sys/pal/unix/process/zircon.rs	/^    pub target_fd: i32,$/;"	m	struct:fdio_spawn_action_t
task	$RUST/src/lib.rs	/^pub mod task {$/;"	n
task	$RUST/src/sys/pal/itron/abi.rs	/^    pub task: TASK,$/;"	m	struct:T_CTSK
task	$RUST/src/sys/pal/itron/condvar.rs	/^        task: abi::ID,$/;"	m	struct:waiter_queue::Waiter
task	$RUST/src/sys/pal/itron/thread.rs	/^    task: abi::ID,$/;"	m	struct:Thread
task	$RUST/src/sys/pal/solid/mod.rs	/^    pub(super) mod task;$/;"	n	module:itron
task_priority	$RUST/src/sys/pal/itron/task.rs	/^pub fn task_priority(task: abi::ID) -> abi::PRI {$/;"	f	signature:(task: abi::ID) -> abi::PRI
task_queue	$RUST/src/sys/pal/sgx/thread.rs	/^mod task_queue {$/;"	n
tcp	$RUST/src/net/mod.rs	/^mod tcp;$/;"	n
tcp	$RUST/src/os/net/linux_ext/mod.rs	/^pub(crate) mod tcp;$/;"	n
tcp_clone_smoke	$RUST/src/net/tcp/tests.rs	/^fn tcp_clone_smoke() {$/;"	f	signature:()
tcp_clone_two_read	$RUST/src/net/tcp/tests.rs	/^fn tcp_clone_two_read() {$/;"	f	signature:()
tcp_clone_two_write	$RUST/src/net/tcp/tests.rs	/^fn tcp_clone_two_write() {$/;"	f	signature:()
tcplistener	$RUST/src/sys/pal/xous/net/mod.rs	/^mod tcplistener;$/;"	n
tcpstream	$RUST/src/sys/pal/xous/net/mod.rs	/^mod tcpstream;$/;"	n
tcs	$RUST/src/sys/pal/sgx/waitqueue/mod.rs	/^    tcs: Tcs,$/;"	m	struct:WaitEntry
tcs_init	$RUST/src/sys/pal/sgx/abi/mod.rs	/^unsafe extern "C" fn tcs_init(secondary: bool) {$/;"	f	signature:(secondary: bool)
tcsls_debug_panic_buf_ptr	$RUST/src/sys/pal/sgx/abi/entry.S	/^.equ tcsls_debug_panic_buf_ptr, 0x20 \/*  initialized by loader to 0 *\/$/;"	d
tcsls_flag_init_once	$RUST/src/sys/pal/sgx/abi/entry.S	/^.equ tcsls_flag_init_once,      1    \/*  initialized by loader to 0 *\/$/;"	d
tcsls_flag_secondary	$RUST/src/sys/pal/sgx/abi/entry.S	/^.equ tcsls_flag_secondary,      0    \/*  initialized by loader; 0 = standard TCS, 1 = secondary/;"	d
tcsls_flags	$RUST/src/sys/pal/sgx/abi/entry.S	/^.equ tcsls_flags,               0x08 \/*  initialized by loader *\/$/;"	d
tcsls_last_rsp	$RUST/src/sys/pal/sgx/abi/entry.S	/^.equ tcsls_last_rsp,            0x10 \/*  initialized by loader to 0 *\/$/;"	d
tcsls_panic_last_rsp	$RUST/src/sys/pal/sgx/abi/entry.S	/^.equ tcsls_panic_last_rsp,      0x18 \/*  initialized by loader to 0 *\/$/;"	d
tcsls_tcs_addr	$RUST/src/sys/pal/sgx/abi/entry.S	/^.equ tcsls_tcs_addr,            0x68$/;"	d
tcsls_tls_ptr	$RUST/src/sys/pal/sgx/abi/entry.S	/^.equ tcsls_tls_ptr,             0x60$/;"	d
tcsls_tos	$RUST/src/sys/pal/sgx/abi/entry.S	/^.equ tcsls_tos,                 0x00 \/*  initialized by loader to *offset* from image base to T/;"	d
tcsls_user_fcw	$RUST/src/sys/pal/sgx/abi/entry.S	/^.equ tcsls_user_fcw,            0x0a$/;"	d
tcsls_user_mxcsr	$RUST/src/sys/pal/sgx/abi/entry.S	/^.equ tcsls_user_mxcsr,          0x0c$/;"	d
tcsls_user_r12	$RUST/src/sys/pal/sgx/abi/entry.S	/^.equ tcsls_user_r12,            0x40$/;"	d
tcsls_user_r13	$RUST/src/sys/pal/sgx/abi/entry.S	/^.equ tcsls_user_r13,            0x48$/;"	d
tcsls_user_r14	$RUST/src/sys/pal/sgx/abi/entry.S	/^.equ tcsls_user_r14,            0x50$/;"	d
tcsls_user_r15	$RUST/src/sys/pal/sgx/abi/entry.S	/^.equ tcsls_user_r15,            0x58$/;"	d
tcsls_user_rbp	$RUST/src/sys/pal/sgx/abi/entry.S	/^.equ tcsls_user_rbp,            0x38$/;"	d
tcsls_user_retip	$RUST/src/sys/pal/sgx/abi/entry.S	/^.equ tcsls_user_retip,          0x30$/;"	d
tcsls_user_rsp	$RUST/src/sys/pal/sgx/abi/entry.S	/^.equ tcsls_user_rsp,            0x28$/;"	d
tell	$RUST/src/os/wasi/fs.rs	/^    fn tell(&self) -> io::Result<u64>;$/;"	P	interface:FileExt	signature:(&self) -> io::Result<u64>
tell	$RUST/src/sys/pal/wasi/fd.rs	/^    pub fn tell(&self) -> io::Result<u64> {$/;"	P	implementation:WasiFd	signature:(&self) -> io::Result<u64>
temp_dir	$RUST/src/env.rs	/^pub fn temp_dir() -> PathBuf {$/;"	f	signature:() -> PathBuf
temp_dir	$RUST/src/sys/pal/hermit/os.rs	/^pub fn temp_dir() -> PathBuf {$/;"	f	signature:() -> PathBuf
temp_dir	$RUST/src/sys/pal/sgx/os.rs	/^pub fn temp_dir() -> PathBuf {$/;"	f	signature:() -> PathBuf
temp_dir	$RUST/src/sys/pal/solid/os.rs	/^pub fn temp_dir() -> PathBuf {$/;"	f	signature:() -> PathBuf
temp_dir	$RUST/src/sys/pal/teeos/os.rs	/^pub fn temp_dir() -> PathBuf {$/;"	f	signature:() -> PathBuf
temp_dir	$RUST/src/sys/pal/uefi/os.rs	/^pub fn temp_dir() -> PathBuf {$/;"	f	signature:() -> PathBuf
temp_dir	$RUST/src/sys/pal/unix/os.rs	/^pub fn temp_dir() -> PathBuf {$/;"	f	signature:() -> PathBuf
temp_dir	$RUST/src/sys/pal/unsupported/os.rs	/^pub fn temp_dir() -> PathBuf {$/;"	f	signature:() -> PathBuf
temp_dir	$RUST/src/sys/pal/wasi/os.rs	/^pub fn temp_dir() -> PathBuf {$/;"	f	signature:() -> PathBuf
temp_dir	$RUST/src/sys/pal/windows/os.rs	/^pub fn temp_dir() -> PathBuf {$/;"	f	signature:() -> PathBuf
temp_dir	$RUST/src/sys/pal/xous/os.rs	/^pub fn temp_dir() -> PathBuf {$/;"	f	signature:() -> PathBuf
temp_dir	$RUST/src/sys/pal/zkvm/os.rs	/^pub fn temp_dir() -> PathBuf {$/;"	f	signature:() -> PathBuf
ter_tsk	$RUST/src/sys/pal/itron/abi.rs	/^    pub fn ter_tsk(tskid: ID) -> ER;$/;"	f	signature:(tskid: ID) -> ER
terminate_and_delete_current_task	$RUST/src/sys/pal/itron/thread.rs	/^unsafe fn terminate_and_delete_current_task() -> ! {$/;"	f	signature:() -> !
terminate_and_delete_task	$RUST/src/sys/pal/itron/thread.rs	/^unsafe fn terminate_and_delete_task(deleted_task: abi::ID) {$/;"	f	signature:(deleted_task: abi::ID)
terminate_exited_process	$RUST/src/process/tests.rs	/^fn terminate_exited_process() {$/;"	f	signature:()
test	$RUST/src/env/tests.rs	/^fn test() {$/;"	f	signature:()
test	$RUST/src/net/mod.rs	/^pub(crate) mod test;$/;"	n
test	$RUST/src/sys_common/io.rs	/^pub mod test {$/;"	n
test_abs	$RUST/src/f32/tests.rs	/^fn test_abs() {$/;"	f	signature:()
test_abs	$RUST/src/f64/tests.rs	/^fn test_abs() {$/;"	f	signature:()
test_abstract_datagram_bind_send_to_addr	$RUST/src/os/unix/net/tests.rs	/^fn test_abstract_datagram_bind_send_to_addr() {$/;"	f	signature:()
test_abstract_datagram_connect_addr	$RUST/src/os/unix/net/tests.rs	/^fn test_abstract_datagram_connect_addr() {$/;"	f	signature:()
test_abstract_name_too_long	$RUST/src/os/unix/net/tests.rs	/^fn test_abstract_name_too_long() {$/;"	f	signature:()
test_abstract_no_pathname_and_not_unnamed	$RUST/src/os/unix/net/tests.rs	/^fn test_abstract_no_pathname_and_not_unnamed() {$/;"	f	signature:()
test_abstract_stream_connect	$RUST/src/os/unix/net/tests.rs	/^fn test_abstract_stream_connect() {$/;"	f	signature:()
test_abstract_stream_iter	$RUST/src/os/unix/net/tests.rs	/^fn test_abstract_stream_iter() {$/;"	f	signature:()
test_acosh	$RUST/src/f32/tests.rs	/^fn test_acosh() {$/;"	f	signature:()
test_acosh	$RUST/src/f64/tests.rs	/^fn test_acosh() {$/;"	f	signature:()
test_add_to_env	$RUST/src/process/tests.rs	/^fn test_add_to_env() {$/;"	f	signature:()
test_arc_condvar_poison	$RUST/src/sync/mutex/tests.rs	/^fn test_arc_condvar_poison() {$/;"	f	signature:()
test_array_writer	$RUST/src/io/cursor/tests.rs	/^fn test_array_writer() {$/;"	f	signature:()
test_array_writer_vectored	$RUST/src/io/cursor/tests.rs	/^fn test_array_writer_vectored() {$/;"	f	signature:()
test_asinh	$RUST/src/f32/tests.rs	/^fn test_asinh() {$/;"	f	signature:()
test_asinh	$RUST/src/f64/tests.rs	/^fn test_asinh() {$/;"	f	signature:()
test_atanh	$RUST/src/f32/tests.rs	/^fn test_atanh() {$/;"	f	signature:()
test_atanh	$RUST/src/f64/tests.rs	/^fn test_atanh() {$/;"	f	signature:()
test_avoid_copying_the_body_join	$RUST/src/thread/tests.rs	/^fn test_avoid_copying_the_body_join() {$/;"	f	signature:()
test_avoid_copying_the_body_spawn	$RUST/src/thread/tests.rs	/^fn test_avoid_copying_the_body_spawn() {$/;"	f	signature:()
test_avoid_copying_the_body_thread_spawn	$RUST/src/thread/tests.rs	/^fn test_avoid_copying_the_body_thread_spawn() {$/;"	f	signature:()
test_barrier	$RUST/src/sync/barrier/tests.rs	/^fn test_barrier() {$/;"	f	signature:()
test_box_slice_writer	$RUST/src/io/cursor/tests.rs	/^fn test_box_slice_writer() {$/;"	f	signature:()
test_box_slice_writer_vectored	$RUST/src/io/cursor/tests.rs	/^fn test_box_slice_writer_vectored() {$/;"	f	signature:()
test_boxed_slice_reader	$RUST/src/io/cursor/tests.rs	/^fn test_boxed_slice_reader() {$/;"	f	signature:()
test_boxed_slice_reader_vectored	$RUST/src/io/cursor/tests.rs	/^fn test_boxed_slice_reader_vectored() {$/;"	f	signature:()
test_buf_reader	$RUST/src/io/cursor/tests.rs	/^fn test_buf_reader() {$/;"	f	signature:()
test_buf_writer	$RUST/src/io/cursor/tests.rs	/^fn test_buf_writer() {$/;"	f	signature:()
test_buf_writer_error	$RUST/src/io/cursor/tests.rs	/^fn test_buf_writer_error() {$/;"	f	signature:()
test_buf_writer_seek	$RUST/src/io/cursor/tests.rs	/^fn test_buf_writer_seek() {$/;"	f	signature:()
test_buf_writer_vectored	$RUST/src/io/cursor/tests.rs	/^fn test_buf_writer_vectored() {$/;"	f	signature:()
test_buffered_reader	$RUST/src/io/buffered/tests.rs	/^fn test_buffered_reader() {$/;"	f	signature:()
test_buffered_reader_invalidated_after_read	$RUST/src/io/buffered/tests.rs	/^fn test_buffered_reader_invalidated_after_read() {$/;"	f	signature:()
test_buffered_reader_invalidated_after_seek	$RUST/src/io/buffered/tests.rs	/^fn test_buffered_reader_invalidated_after_seek() {$/;"	f	signature:()
test_buffered_reader_read_buf	$RUST/src/io/buffered/tests.rs	/^fn test_buffered_reader_read_buf() {$/;"	f	signature:()
test_buffered_reader_read_to_end_consumes_buffer	$RUST/src/io/buffered/tests.rs	/^fn test_buffered_reader_read_to_end_consumes_buffer() {$/;"	f	signature:()
test_buffered_reader_read_to_string_consumes_buffer	$RUST/src/io/buffered/tests.rs	/^fn test_buffered_reader_read_to_string_consumes_buffer() {$/;"	f	signature:()
test_buffered_reader_seek	$RUST/src/io/buffered/tests.rs	/^fn test_buffered_reader_seek() {$/;"	f	signature:()
test_buffered_reader_seek_relative	$RUST/src/io/buffered/tests.rs	/^fn test_buffered_reader_seek_relative() {$/;"	f	signature:()
test_buffered_reader_seek_underflow	$RUST/src/io/buffered/tests.rs	/^fn test_buffered_reader_seek_underflow() {$/;"	f	signature:()
test_buffered_reader_seek_underflow_discard_buffer_between_seeks	$RUST/src/io/buffered/tests.rs	/^fn test_buffered_reader_seek_underflow_discard_buffer_between_seeks() {$/;"	f	signature:()
test_buffered_reader_stream_position	$RUST/src/io/buffered/tests.rs	/^fn test_buffered_reader_stream_position() {$/;"	f	signature:()
test_buffered_reader_stream_position_panic	$RUST/src/io/buffered/tests.rs	/^fn test_buffered_reader_stream_position_panic() {$/;"	f	signature:()
test_buffered_writer	$RUST/src/io/buffered/tests.rs	/^fn test_buffered_writer() {$/;"	f	signature:()
test_buffered_writer_inner_flushes	$RUST/src/io/buffered/tests.rs	/^fn test_buffered_writer_inner_flushes() {$/;"	f	signature:()
test_buffered_writer_seek	$RUST/src/io/buffered/tests.rs	/^fn test_buffered_writer_seek() {$/;"	f	signature:()
test_c_rwlock_initializer	$RUST/src/sys/pal/sgx/rwlock/tests.rs	/^fn test_c_rwlock_initializer() {$/;"	f	signature:()
test_capacity_not_less_than_len	$RUST/src/collections/hash/map/tests.rs	/^fn test_capacity_not_less_than_len() {$/;"	f	signature:()
test_capture_env_at_spawn	$RUST/src/process/tests.rs	/^fn test_capture_env_at_spawn() {$/;"	f	signature:()
test_ceil	$RUST/src/f32/tests.rs	/^fn test_ceil() {$/;"	f	signature:()
test_ceil	$RUST/src/f64/tests.rs	/^fn test_ceil() {$/;"	f	signature:()
test_checked_add	$RUST/src/num/tests.rs	/^fn test_checked_add() {$/;"	f	signature:()
test_checked_mul	$RUST/src/num/tests.rs	/^fn test_checked_mul() {$/;"	f	signature:()
test_checked_next_power_of_two	$RUST/src/num/tests.rs	/^macro_rules! test_checked_next_power_of_two {$/;"	M
test_checked_sub	$RUST/src/num/tests.rs	/^fn test_checked_sub() {$/;"	f	signature:()
test_child_doesnt_ref_parent	$RUST/src/thread/tests.rs	/^fn test_child_doesnt_ref_parent() {$/;"	f	signature:()
test_clamp_max_is_nan	$RUST/src/f32/tests.rs	/^fn test_clamp_max_is_nan() {$/;"	f	signature:()
test_clamp_max_is_nan	$RUST/src/f64/tests.rs	/^fn test_clamp_max_is_nan() {$/;"	f	signature:()
test_clamp_min_greater_than_max	$RUST/src/f32/tests.rs	/^fn test_clamp_min_greater_than_max() {$/;"	f	signature:()
test_clamp_min_greater_than_max	$RUST/src/f64/tests.rs	/^fn test_clamp_min_greater_than_max() {$/;"	f	signature:()
test_clamp_min_is_nan	$RUST/src/f32/tests.rs	/^fn test_clamp_min_is_nan() {$/;"	f	signature:()
test_clamp_min_is_nan	$RUST/src/f64/tests.rs	/^fn test_clamp_min_is_nan() {$/;"	f	signature:()
test_classify	$RUST/src/f32/tests.rs	/^fn test_classify() {$/;"	f	signature:()
test_classify	$RUST/src/f64/tests.rs	/^fn test_classify() {$/;"	f	signature:()
test_clone	$RUST/src/collections/hash/map/tests.rs	/^fn test_clone() {$/;"	f	signature:()
test_command_fork_no_unwind	$RUST/src/sys/pal/unix/process/process_unix/tests.rs	/^fn test_command_fork_no_unwind() {$/;"	f	signature:()
test_command_implements_send_sync	$RUST/src/process/tests.rs	/^fn test_command_implements_send_sync() {$/;"	f	signature:()
test_command_pidfd	$RUST/src/sys/pal/unix/process/process_unix/tests.rs	/^fn test_command_pidfd() {$/;"	f	signature:()
test_conflict_remove	$RUST/src/collections/hash/map/tests.rs	/^fn test_conflict_remove() {$/;"	f	signature:()
test_connect_unix_datagram	$RUST/src/os/unix/net/tests.rs	/^fn test_connect_unix_datagram() {$/;"	f	signature:()
test_const	$RUST/src/io/error/tests.rs	/^fn test_const() {$/;"	f	signature:()
test_copy_from_userspace_function	$RUST/src/sys/pal/sgx/abi/usercalls/tests.rs	/^fn test_copy_from_userspace_function() {$/;"	f	signature:()
test_copy_to_userspace_function	$RUST/src/sys/pal/sgx/abi/usercalls/tests.rs	/^fn test_copy_to_userspace_function() {$/;"	f	signature:()
test_create_capacity_zero	$RUST/src/collections/hash/map/tests.rs	/^fn test_create_capacity_zero() {$/;"	f	signature:()
test_creation_flags	$RUST/src/process/tests.rs	/^fn test_creation_flags() {$/;"	f	signature:()
test_custom_error_packing	$RUST/src/io/error/tests.rs	/^fn test_custom_error_packing() {$/;"	f	signature:()
test_data	$RUST/src/sys/pal/sgx/abi/tls/sync_bitset/tests.rs	/^fn test_data(bitset: [usize; 2], bit_indices: &[usize]) {$/;"	f	signature:(bitset: [usize; 2], bit_indices: &[usize])
test_debug	$RUST/src/backtrace/tests.rs	/^fn test_debug() {$/;"	f	signature:()
test_debug_error	$RUST/src/io/error/tests.rs	/^fn test_debug_error() {$/;"	f	signature:()
test_decompositions_unix	$RUST/src/path/tests.rs	/^pub fn test_decompositions_unix() {$/;"	f	signature:()
test_decompositions_windows	$RUST/src/path/tests.rs	/^pub fn test_decompositions_windows() {$/;"	f	signature:()
test_difference	$RUST/src/collections/hash/set/tests.rs	/^fn test_difference() {$/;"	f	signature:()
test_disjoint	$RUST/src/collections/hash/set/tests.rs	/^fn test_disjoint() {$/;"	f	signature:()
test_downcasting	$RUST/src/io/error/tests.rs	/^fn test_downcasting() {$/;"	f	signature:()
test_drain	$RUST/src/collections/hash/set/tests.rs	/^fn test_drain() {$/;"	f	signature:()
test_drops	$RUST/src/collections/hash/map/tests.rs	/^fn test_drops() {$/;"	f	signature:()
test_dur2reltims	$RUST/src/sys/pal/itron/time/tests.rs	/^fn test_dur2reltims() {$/;"	f	signature:()
test_dur2tmos	$RUST/src/sys/pal/itron/time/tests.rs	/^fn test_dur2tmos() {$/;"	f	signature:()
test_empty_entry	$RUST/src/collections/hash/map/tests.rs	/^fn test_empty_entry() {$/;"	f	signature:()
test_empty_iter	$RUST/src/collections/hash/map/tests.rs	/^fn test_empty_iter() {$/;"	f	signature:()
test_empty_remove	$RUST/src/collections/hash/map/tests.rs	/^fn test_empty_remove() {$/;"	f	signature:()
test_entry	$RUST/src/collections/hash/map/tests.rs	/^fn test_entry() {$/;"	f	signature:()
test_entry_take_doesnt_corrupt	$RUST/src/collections/hash/map/tests.rs	/^fn test_entry_take_doesnt_corrupt() {$/;"	f	signature:()
test_eq	$RUST/src/collections/hash/map/tests.rs	/^fn test_eq() {$/;"	f	signature:()
test_eq	$RUST/src/collections/hash/set/tests.rs	/^fn test_eq() {$/;"	f	signature:()
test_eq	$RUST/src/env/tests.rs	/^    fn test_eq(input: &[&str], output: &str) -> bool {$/;"	f	function:join_paths_windows	signature:(input: &[&str], output: &str) -> bool
test_eq	$RUST/src/io/cursor/tests.rs	/^fn test_eq() {$/;"	f	signature:()
test_eq_direntry_metadata	$RUST/src/fs/tests.rs	/^fn test_eq_direntry_metadata() {$/;"	f	signature:()
test_errorkind_packing	$RUST/src/io/error/tests.rs	/^fn test_errorkind_packing() {$/;"	f	signature:()
test_exp	$RUST/src/f32/tests.rs	/^fn test_exp() {$/;"	f	signature:()
test_exp	$RUST/src/f64/tests.rs	/^fn test_exp() {$/;"	f	signature:()
test_exp2	$RUST/src/f32/tests.rs	/^fn test_exp2() {$/;"	f	signature:()
test_exp2	$RUST/src/f64/tests.rs	/^fn test_exp2() {$/;"	f	signature:()
test_extend_ref	$RUST/src/collections/hash/map/tests.rs	/^fn test_extend_ref() {$/;"	f	signature:()
test_extend_ref	$RUST/src/collections/hash/set/tests.rs	/^fn test_extend_ref() {$/;"	f	signature:()
test_extract_if	$RUST/src/collections/hash/map/tests.rs	/^mod test_extract_if {$/;"	n
test_extract_if	$RUST/src/collections/hash/set/tests.rs	/^fn test_extract_if() {$/;"	f	signature:()
test_extract_if_drop_panic_leak	$RUST/src/collections/hash/set/tests.rs	/^fn test_extract_if_drop_panic_leak() {$/;"	f	signature:()
test_extract_if_pred_panic_leak	$RUST/src/collections/hash/set/tests.rs	/^fn test_extract_if_pred_panic_leak() {$/;"	f	signature:()
test_fd	$RUST/src/os/fd/tests.rs	/^fn test_fd() {$/;"	f	signature:()
test_file_times	$RUST/src/fs/tests.rs	/^fn test_file_times() {$/;"	f	signature:()
test_file_times_pre_epoch_with_nanos	$RUST/src/fs/tests.rs	/^fn test_file_times_pre_epoch_with_nanos() {$/;"	f	signature:()
test_find	$RUST/src/collections/hash/map/tests.rs	/^fn test_find() {$/;"	f	signature:()
test_find_mut	$RUST/src/collections/hash/map/tests.rs	/^fn test_find_mut() {$/;"	f	signature:()
test_finish_once	$RUST/src/process/tests.rs	/^fn test_finish_once() {$/;"	f	signature:()
test_finish_twice	$RUST/src/process/tests.rs	/^fn test_finish_twice() {$/;"	f	signature:()
test_float_bits_conv	$RUST/src/f32/tests.rs	/^fn test_float_bits_conv() {$/;"	f	signature:()
test_float_bits_conv	$RUST/src/f64/tests.rs	/^fn test_float_bits_conv() {$/;"	f	signature:()
test_floor	$RUST/src/f32/tests.rs	/^fn test_floor() {$/;"	f	signature:()
test_floor	$RUST/src/f64/tests.rs	/^fn test_floor() {$/;"	f	signature:()
test_fract	$RUST/src/f32/tests.rs	/^fn test_fract() {$/;"	f	signature:()
test_fract	$RUST/src/f64/tests.rs	/^fn test_fract() {$/;"	f	signature:()
test_frames	$RUST/src/backtrace/tests.rs	/^fn test_frames() {$/;"	f	signature:()
test_from_iter	$RUST/src/collections/hash/map/tests.rs	/^fn test_from_iter() {$/;"	f	signature:()
test_from_iter	$RUST/src/collections/hash/set/tests.rs	/^fn test_from_iter() {$/;"	f	signature:()
test_gamma	$RUST/src/f32/tests.rs	/^fn test_gamma() {$/;"	f	signature:()
test_gamma	$RUST/src/f64/tests.rs	/^fn test_gamma() {$/;"	f	signature:()
test_get_mut	$RUST/src/sync/mutex/tests.rs	/^fn test_get_mut() {$/;"	f	signature:()
test_get_mut	$RUST/src/sync/rwlock/tests.rs	/^fn test_get_mut() {$/;"	f	signature:()
test_get_mut_poison	$RUST/src/sync/mutex/tests.rs	/^fn test_get_mut_poison() {$/;"	f	signature:()
test_get_mut_poison	$RUST/src/sync/rwlock/tests.rs	/^fn test_get_mut_poison() {$/;"	f	signature:()
test_glibc_version	$RUST/src/sys/pal/unix/os/tests.rs	/^fn test_glibc_version() {$/;"	f	signature:()
test_helpers	$RUST/src/lib.rs	/^pub(crate) mod test_helpers {$/;"	n
test_hidden_file_truncation	$RUST/src/fs/tests.rs	/^fn test_hidden_file_truncation() {$/;"	f	signature:()
test_index	$RUST/src/collections/hash/map/tests.rs	/^fn test_index() {$/;"	f	signature:()
test_index_nonexistent	$RUST/src/collections/hash/map/tests.rs	/^fn test_index_nonexistent() {$/;"	f	signature:()
test_infinity	$RUST/src/f32/tests.rs	/^fn test_infinity() {$/;"	f	signature:()
test_infinity	$RUST/src/f64/tests.rs	/^fn test_infinity() {$/;"	f	signature:()
test_inner	$RUST/src/sys/pal/unix/process/process_common/tests.rs	/^    fn test_inner(mut cmd: Command) {$/;"	f	function:test_process_mask	signature:(mut cmd: Command)
test_insert	$RUST/src/collections/hash/map/tests.rs	/^fn test_insert() {$/;"	f	signature:()
test_insert_conflicts	$RUST/src/collections/hash/map/tests.rs	/^fn test_insert_conflicts() {$/;"	f	signature:()
test_insert_does_not_overwrite_the_value	$RUST/src/collections/hash/set/tests.rs	/^fn test_insert_does_not_overwrite_the_value() {$/;"	f	signature:()
test_insert_overwrite	$RUST/src/collections/hash/map/tests.rs	/^fn test_insert_overwrite() {$/;"	f	signature:()
test_interior_nul_in_arg_is_error	$RUST/src/process/tests.rs	/^fn test_interior_nul_in_arg_is_error() {$/;"	f	signature:()
test_interior_nul_in_args_is_error	$RUST/src/process/tests.rs	/^fn test_interior_nul_in_args_is_error() {$/;"	f	signature:()
test_interior_nul_in_current_dir_is_error	$RUST/src/process/tests.rs	/^fn test_interior_nul_in_current_dir_is_error() {$/;"	f	signature:()
test_interior_nul_in_env_key_is_error	$RUST/src/process/tests.rs	/^fn test_interior_nul_in_env_key_is_error() {$/;"	f	signature:()
test_interior_nul_in_env_value_is_error	$RUST/src/process/tests.rs	/^fn test_interior_nul_in_env_value_is_error() {$/;"	f	signature:()
test_interior_nul_in_progname_is_error	$RUST/src/process/tests.rs	/^fn test_interior_nul_in_progname_is_error() {$/;"	f	signature:()
test_intersection	$RUST/src/collections/hash/set/tests.rs	/^fn test_intersection() {$/;"	f	signature:()
test_into_inner	$RUST/src/sync/mutex/tests.rs	/^fn test_into_inner() {$/;"	f	signature:()
test_into_inner	$RUST/src/sync/rwlock/tests.rs	/^fn test_into_inner() {$/;"	f	signature:()
test_into_inner_drop	$RUST/src/sync/mutex/tests.rs	/^fn test_into_inner_drop() {$/;"	f	signature:()
test_into_inner_drop	$RUST/src/sync/rwlock/tests.rs	/^fn test_into_inner_drop() {$/;"	f	signature:()
test_into_inner_poison	$RUST/src/sync/mutex/tests.rs	/^fn test_into_inner_poison() {$/;"	f	signature:()
test_into_inner_poison	$RUST/src/sync/rwlock/tests.rs	/^fn test_into_inner_poison() {$/;"	f	signature:()
test_into_iter_drops	$RUST/src/collections/hash/map/tests.rs	/^fn test_into_iter_drops() {$/;"	f	signature:()
test_into_keys	$RUST/src/collections/hash/map/tests.rs	/^fn test_into_keys() {$/;"	f	signature:()
test_into_values	$RUST/src/collections/hash/map/tests.rs	/^fn test_into_values() {$/;"	f	signature:()
test_invalid_named_thread	$RUST/src/thread/tests.rs	/^fn test_invalid_named_thread() {$/;"	f	signature:()
test_is_empty	$RUST/src/collections/hash/map/tests.rs	/^fn test_is_empty() {$/;"	f	signature:()
test_is_finished	$RUST/src/thread/tests.rs	/^fn test_is_finished() {$/;"	f	signature:()
test_is_finite	$RUST/src/f32/tests.rs	/^fn test_is_finite() {$/;"	f	signature:()
test_is_finite	$RUST/src/f64/tests.rs	/^fn test_is_finite() {$/;"	f	signature:()
test_is_infinite	$RUST/src/f32/tests.rs	/^fn test_is_infinite() {$/;"	f	signature:()
test_is_infinite	$RUST/src/f64/tests.rs	/^fn test_is_infinite() {$/;"	f	signature:()
test_is_nan	$RUST/src/f32/tests.rs	/^fn test_is_nan() {$/;"	f	signature:()
test_is_nan	$RUST/src/f64/tests.rs	/^fn test_is_nan() {$/;"	f	signature:()
test_is_normal	$RUST/src/f32/tests.rs	/^fn test_is_normal() {$/;"	f	signature:()
test_is_normal	$RUST/src/f64/tests.rs	/^fn test_is_normal() {$/;"	f	signature:()
test_is_power_of_two	$RUST/src/num/tests.rs	/^macro_rules! test_is_power_of_two {$/;"	M
test_is_sign_negative	$RUST/src/f32/tests.rs	/^fn test_is_sign_negative() {$/;"	f	signature:()
test_is_sign_negative	$RUST/src/f64/tests.rs	/^fn test_is_sign_negative() {$/;"	f	signature:()
test_is_sign_positive	$RUST/src/f32/tests.rs	/^fn test_is_sign_positive() {$/;"	f	signature:()
test_is_sign_positive	$RUST/src/f64/tests.rs	/^fn test_is_sign_positive() {$/;"	f	signature:()
test_iter_len	$RUST/src/collections/hash/map/tests.rs	/^fn test_iter_len() {$/;"	f	signature:()
test_iter_mut_len	$RUST/src/collections/hash/map/tests.rs	/^fn test_iter_mut_len() {$/;"	f	signature:()
test_iterate	$RUST/src/collections/hash/map/tests.rs	/^fn test_iterate() {$/;"	f	signature:()
test_iterate	$RUST/src/collections/hash/set/tests.rs	/^fn test_iterate() {$/;"	f	signature:()
test_join_panic	$RUST/src/thread/tests.rs	/^fn test_join_panic() {$/;"	f	signature:()
test_keys	$RUST/src/collections/hash/map/tests.rs	/^fn test_keys() {$/;"	f	signature:()
test_line_buffer	$RUST/src/io/buffered/tests.rs	/^fn test_line_buffer() {$/;"	f	signature:()
test_lines	$RUST/src/io/buffered/tests.rs	/^fn test_lines() {$/;"	f	signature:()
test_ln	$RUST/src/f32/tests.rs	/^fn test_ln() {$/;"	f	signature:()
test_ln	$RUST/src/f64/tests.rs	/^fn test_ln() {$/;"	f	signature:()
test_ln_gamma	$RUST/src/f32/tests.rs	/^fn test_ln_gamma() {$/;"	f	signature:()
test_ln_gamma	$RUST/src/f64/tests.rs	/^fn test_ln_gamma() {$/;"	f	signature:()
test_lock	$RUST/src/io/stdio/tests.rs	/^fn test_lock<T, U>(get_handle: fn() -> T, get_locked: fn() -> U)$/;"	f	signature:<T, U>(get_handle: fn() -> T, get_locked: fn() -> U) where T: for<'a> Stdio<'a>, U: StdioOwnedLock,
test_lock_stderr	$RUST/src/io/stdio/tests.rs	/^fn test_lock_stderr() {$/;"	f	signature:()
test_lock_stdin	$RUST/src/io/stdio/tests.rs	/^fn test_lock_stdin() {$/;"	f	signature:()
test_lock_stdout	$RUST/src/io/stdio/tests.rs	/^fn test_lock_stdout() {$/;"	f	signature:()
test_log	$RUST/src/f32/tests.rs	/^fn test_log() {$/;"	f	signature:()
test_log	$RUST/src/f64/tests.rs	/^fn test_log() {$/;"	f	signature:()
test_log10	$RUST/src/f32/tests.rs	/^fn test_log10() {$/;"	f	signature:()
test_log10	$RUST/src/f64/tests.rs	/^fn test_log10() {$/;"	f	signature:()
test_log2	$RUST/src/f32/tests.rs	/^fn test_log2() {$/;"	f	signature:()
test_log2	$RUST/src/f64/tests.rs	/^fn test_log2() {$/;"	f	signature:()
test_lots_of_insertions	$RUST/src/collections/hash/map/tests.rs	/^fn test_lots_of_insertions() {$/;"	f	signature:()
test_make_command_line	$RUST/src/sys/pal/windows/process/tests.rs	/^fn test_make_command_line() {$/;"	f	signature:()
test_max_nan	$RUST/src/f32/tests.rs	/^fn test_max_nan() {$/;"	f	signature:()
test_max_nan	$RUST/src/f64/tests.rs	/^fn test_max_nan() {$/;"	f	signature:()
test_maximum	$RUST/src/f32/tests.rs	/^fn test_maximum() {$/;"	f	signature:()
test_mem_mut_writer	$RUST/src/io/cursor/tests.rs	/^fn test_mem_mut_writer() {$/;"	f	signature:()
test_mem_reader	$RUST/src/io/cursor/tests.rs	/^fn test_mem_reader() {$/;"	f	signature:()
test_mem_reader_vectored	$RUST/src/io/cursor/tests.rs	/^fn test_mem_reader_vectored() {$/;"	f	signature:()
test_mem_writer	$RUST/src/io/cursor/tests.rs	/^fn test_mem_writer() {$/;"	f	signature:()
test_mem_writer_preallocated	$RUST/src/io/cursor/tests.rs	/^fn test_mem_writer_preallocated() {$/;"	f	signature:()
test_min_nan	$RUST/src/f32/tests.rs	/^fn test_min_nan() {$/;"	f	signature:()
test_min_nan	$RUST/src/f64/tests.rs	/^fn test_min_nan() {$/;"	f	signature:()
test_minimum	$RUST/src/f32/tests.rs	/^fn test_minimum() {$/;"	f	signature:()
test_move_iter	$RUST/src/collections/hash/set/tests.rs	/^fn test_move_iter() {$/;"	f	signature:()
test_mul_add	$RUST/src/f32/tests.rs	/^fn test_mul_add() {$/;"	f	signature:()
test_mul_add	$RUST/src/f64/tests.rs	/^fn test_mul_add() {$/;"	f	signature:()
test_muldiv	$RUST/src/sys_common/tests.rs	/^fn test_muldiv() {$/;"	f	signature:()
test_mut_size_hint	$RUST/src/collections/hash/map/tests.rs	/^fn test_mut_size_hint() {$/;"	f	signature:()
test_mutex_arc_access_in_unwind	$RUST/src/sync/mutex/tests.rs	/^fn test_mutex_arc_access_in_unwind() {$/;"	f	signature:()
test_mutex_arc_condvar	$RUST/src/sync/mutex/tests.rs	/^fn test_mutex_arc_condvar() {$/;"	f	signature:()
test_mutex_arc_nested	$RUST/src/sync/mutex/tests.rs	/^fn test_mutex_arc_nested() {$/;"	f	signature:()
test_mutex_arc_poison	$RUST/src/sync/mutex/tests.rs	/^fn test_mutex_arc_poison() {$/;"	f	signature:()
test_mutex_unsized	$RUST/src/sync/mutex/tests.rs	/^fn test_mutex_unsized() {$/;"	f	signature:()
test_named_thread	$RUST/src/thread/tests.rs	/^fn test_named_thread() {$/;"	f	signature:()
test_named_thread_truncation	$RUST/src/thread/tests.rs	/^fn test_named_thread_truncation() {$/;"	f	signature:()
test_nan	$RUST/src/f32/tests.rs	/^fn test_nan() {$/;"	f	signature:()
test_nan	$RUST/src/f64/tests.rs	/^fn test_nan() {$/;"	f	signature:()
test_neg_infinity	$RUST/src/f32/tests.rs	/^fn test_neg_infinity() {$/;"	f	signature:()
test_neg_infinity	$RUST/src/f64/tests.rs	/^fn test_neg_infinity() {$/;"	f	signature:()
test_neg_zero	$RUST/src/f32/tests.rs	/^fn test_neg_zero() {$/;"	f	signature:()
test_neg_zero	$RUST/src/f64/tests.rs	/^fn test_neg_zero() {$/;"	f	signature:()
test_nested_recv_iter	$RUST/src/sync/mpsc/sync_tests.rs	/^fn test_nested_recv_iter() {$/;"	f	signature:()
test_nested_recv_iter	$RUST/src/sync/mpsc/tests.rs	/^fn test_nested_recv_iter() {$/;"	f	signature:()
test_next_down	$RUST/src/f32/tests.rs	/^fn test_next_down() {$/;"	f	signature:()
test_next_down	$RUST/src/f64/tests.rs	/^fn test_next_down() {$/;"	f	signature:()
test_next_power_of_two	$RUST/src/num/tests.rs	/^macro_rules! test_next_power_of_two {$/;"	M
test_next_up	$RUST/src/f32/tests.rs	/^fn test_next_up() {$/;"	f	signature:()
test_next_up	$RUST/src/f64/tests.rs	/^fn test_next_up() {$/;"	f	signature:()
test_niche_optimizations	$RUST/src/os/fd/tests.rs	/^fn test_niche_optimizations() {$/;"	f	signature:()
test_niche_optimizations_socket	$RUST/src/os/windows/io/tests.rs	/^fn test_niche_optimizations_socket() {$/;"	f	signature:()
test_num	$RUST/src/num.rs	/^pub fn test_num<T>(ten: T, two: T)$/;"	f	signature:<T>(ten: T, two: T) where T: PartialEq + Add<Output = T> + Sub<Output = T> + Mul<Output = T> + Div<Output = T> + Rem<Output = T> + fmt::Debug + Copy,
test_num_f32	$RUST/src/f32/tests.rs	/^fn test_num_f32() {$/;"	f	signature:()
test_num_f64	$RUST/src/f64/tests.rs	/^fn test_num_f64() {$/;"	f	signature:()
test_occupied_entry_key	$RUST/src/collections/hash/map/tests.rs	/^fn test_occupied_entry_key() {$/;"	f	signature:()
test_one	$RUST/src/f32/tests.rs	/^fn test_one() {$/;"	f	signature:()
test_one	$RUST/src/f64/tests.rs	/^fn test_one() {$/;"	f	signature:()
test_os_packing	$RUST/src/io/error/tests.rs	/^fn test_os_packing() {$/;"	f	signature:()
test_os_str_clone_into	$RUST/src/ffi/os_str/tests.rs	/^fn test_os_str_clone_into() {$/;"	f	signature:()
test_os_str_default	$RUST/src/ffi/os_str/tests.rs	/^fn test_os_str_default() {$/;"	f	signature:()
test_os_str_is_empty	$RUST/src/ffi/os_str/tests.rs	/^fn test_os_str_is_empty() {$/;"	f	signature:()
test_os_str_len	$RUST/src/ffi/os_str/tests.rs	/^fn test_os_str_len() {$/;"	f	signature:()
test_os_string_capacity	$RUST/src/ffi/os_str/tests.rs	/^fn test_os_string_capacity() {$/;"	f	signature:()
test_os_string_clear	$RUST/src/ffi/os_str/tests.rs	/^fn test_os_string_clear() {$/;"	f	signature:()
test_os_string_default	$RUST/src/ffi/os_str/tests.rs	/^fn test_os_string_default() {$/;"	f	signature:()
test_os_string_join	$RUST/src/ffi/os_str/tests.rs	/^fn test_os_string_join() {$/;"	f	signature:()
test_os_string_reserve	$RUST/src/ffi/os_str/tests.rs	/^fn test_os_string_reserve() {$/;"	f	signature:()
test_os_string_reserve_exact	$RUST/src/ffi/os_str/tests.rs	/^fn test_os_string_reserve_exact() {$/;"	f	signature:()
test_os_string_with_capacity	$RUST/src/ffi/os_str/tests.rs	/^fn test_os_string_with_capacity() {$/;"	f	signature:()
test_override_env	$RUST/src/process/tests.rs	/^fn test_override_env() {$/;"	f	signature:()
test_park_timeout_unpark_before	$RUST/src/thread/tests.rs	/^fn test_park_timeout_unpark_before() {$/;"	f	signature:()
test_park_timeout_unpark_called_other_thread	$RUST/src/thread/tests.rs	/^fn test_park_timeout_unpark_called_other_thread() {$/;"	f	signature:()
test_park_timeout_unpark_not_called	$RUST/src/thread/tests.rs	/^fn test_park_timeout_unpark_not_called() {$/;"	f	signature:()
test_park_unpark_before	$RUST/src/thread/tests.rs	/^fn test_park_unpark_before() {$/;"	f	signature:()
test_park_unpark_called_other_thread	$RUST/src/thread/tests.rs	/^fn test_park_unpark_called_other_thread() {$/;"	f	signature:()
test_parse_glibc_version	$RUST/src/sys/pal/unix/os/tests.rs	/^fn test_parse_glibc_version() {$/;"	f	signature:()
test_parse_next_component	$RUST/src/sys/pal/windows/path/tests.rs	/^fn test_parse_next_component() {$/;"	f	signature:()
test_parse_prefix_verbatim	$RUST/src/sys/pal/windows/path/tests.rs	/^fn test_parse_prefix_verbatim() {$/;"	f	signature:()
test_parse_prefix_verbatim_device	$RUST/src/sys/pal/windows/path/tests.rs	/^fn test_parse_prefix_verbatim_device() {$/;"	f	signature:()
test_partial_eq	$RUST/src/io/cursor/tests.rs	/^fn test_partial_eq() {$/;"	f	signature:()
test_pow	$RUST/src/num/tests.rs	/^fn test_pow() {$/;"	f	signature:()
test_powf	$RUST/src/f32/tests.rs	/^fn test_powf() {$/;"	f	signature:()
test_powf	$RUST/src/f64/tests.rs	/^fn test_powf() {$/;"	f	signature:()
test_powi	$RUST/src/f32/tests.rs	/^fn test_powi() {$/;"	f	signature:()
test_powi	$RUST/src/f64/tests.rs	/^fn test_powi() {$/;"	f	signature:()
test_proc_thread_attributes	$RUST/src/process/tests.rs	/^fn test_proc_thread_attributes() {$/;"	f	signature:()
test_process_group_no_posix_spawn	$RUST/src/sys/pal/unix/process/process_common/tests.rs	/^fn test_process_group_no_posix_spawn() {$/;"	f	signature:()
test_process_group_posix_spawn	$RUST/src/sys/pal/unix/process/process_common/tests.rs	/^fn test_process_group_posix_spawn() {$/;"	f	signature:()
test_process_mask	$RUST/src/sys/pal/unix/process/process_common/tests.rs	/^fn test_process_mask() {$/;"	f	signature:()
test_process_output_error	$RUST/src/process/tests.rs	/^fn test_process_output_error() {$/;"	f	signature:()
test_process_output_fail_to_start	$RUST/src/process/tests.rs	/^fn test_process_output_fail_to_start() {$/;"	f	signature:()
test_process_output_output	$RUST/src/process/tests.rs	/^fn test_process_output_output() {$/;"	f	signature:()
test_process_status	$RUST/src/process/tests.rs	/^fn test_process_status() {$/;"	f	signature:()
test_program_kind	$RUST/src/sys/pal/unix/process/process_common/tests.rs	/^fn test_program_kind() {$/;"	f	signature:()
test_raw_args	$RUST/src/sys/pal/windows/process/tests.rs	/^fn test_raw_args() {$/;"	f	signature:()
test_raw_entry	$RUST/src/collections/hash/map/tests.rs	/^fn test_raw_entry() {$/;"	f	signature:()
test_raw_fd	$RUST/src/os/fd/tests.rs	/^fn test_raw_fd() {$/;"	f	signature:()
test_raw_fd_layout	$RUST/src/os/unix/io/tests.rs	/^fn test_raw_fd_layout() {$/;"	f	signature:()
test_raw_fd_layout	$RUST/src/os/wasi/io/fd/tests.rs	/^fn test_raw_fd_layout() {$/;"	f	signature:()
test_read_dir_infinite_loop	$RUST/src/fs/tests.rs	/^fn test_read_dir_infinite_loop() {$/;"	f	signature:()
test_read_exact	$RUST/src/io/cursor/tests.rs	/^fn test_read_exact() {$/;"	f	signature:()
test_read_guard_covariance	$RUST/src/sync/rwlock/tests.rs	/^fn test_read_guard_covariance() {$/;"	f	signature:()
test_read_line	$RUST/src/io/buffered/tests.rs	/^fn test_read_line() {$/;"	f	signature:()
test_read_timeout	$RUST/src/net/tcp/tests.rs	/^fn test_read_timeout() {$/;"	f	signature:()
test_read_timeout	$RUST/src/net/udp/tests.rs	/^fn test_read_timeout() {$/;"	f	signature:()
test_read_timeout	$RUST/src/os/unix/net/tests.rs	/^fn test_read_timeout() {$/;"	f	signature:()
test_read_to_end_capacity	$RUST/src/io/tests.rs	/^fn test_read_to_end_capacity() -> io::Result<()> {$/;"	f	signature:() -> io::Result<()>
test_read_until	$RUST/src/io/buffered/tests.rs	/^fn test_read_until() {$/;"	f	signature:()
test_read_with_timeout	$RUST/src/net/tcp/tests.rs	/^fn test_read_with_timeout() {$/;"	f	signature:()
test_read_with_timeout	$RUST/src/net/udp/tests.rs	/^fn test_read_with_timeout() {$/;"	f	signature:()
test_read_with_timeout	$RUST/src/os/unix/net/tests.rs	/^fn test_read_with_timeout() {$/;"	f	signature:()
test_real_consts	$RUST/src/f32/tests.rs	/^fn test_real_consts() {$/;"	f	signature:()
test_real_consts	$RUST/src/f64/tests.rs	/^fn test_real_consts() {$/;"	f	signature:()
test_recip	$RUST/src/f32/tests.rs	/^fn test_recip() {$/;"	f	signature:()
test_recip	$RUST/src/f64/tests.rs	/^fn test_recip() {$/;"	f	signature:()
test_recv_into_iter_borrowed	$RUST/src/sync/mpsc/tests.rs	/^fn test_recv_into_iter_borrowed() {$/;"	f	signature:()
test_recv_into_iter_owned	$RUST/src/sync/mpsc/tests.rs	/^fn test_recv_into_iter_owned() {$/;"	f	signature:()
test_recv_iter_break	$RUST/src/sync/mpsc/sync_tests.rs	/^fn test_recv_iter_break() {$/;"	f	signature:()
test_recv_iter_break	$RUST/src/sync/mpsc/tests.rs	/^fn test_recv_iter_break() {$/;"	f	signature:()
test_recv_try_iter	$RUST/src/sync/mpsc/tests.rs	/^fn test_recv_try_iter() {$/;"	f	signature:()
test_remove	$RUST/src/collections/hash/map/tests.rs	/^fn test_remove() {$/;"	f	signature:()
test_remove_entry	$RUST/src/collections/hash/map/tests.rs	/^fn test_remove_entry() {$/;"	f	signature:()
test_replace	$RUST/src/collections/hash/set/tests.rs	/^fn test_replace() {$/;"	f	signature:()
test_reserve_shrink_to_fit	$RUST/src/collections/hash/map/tests.rs	/^fn test_reserve_shrink_to_fit() {$/;"	f	signature:()
test_retain	$RUST/src/collections/hash/map/tests.rs	/^fn test_retain() {$/;"	f	signature:()
test_retain	$RUST/src/collections/hash/set/tests.rs	/^fn test_retain() {$/;"	f	signature:()
test_rng	$RUST/src/lib.rs	/^    pub(crate) fn test_rng() -> rand_xorshift::XorShiftRng {$/;"	f	module:test_helpers	signature:() -> rand_xorshift::XorShiftRng
test_round	$RUST/src/f32/tests.rs	/^fn test_round() {$/;"	f	signature:()
test_round	$RUST/src/f64/tests.rs	/^fn test_round() {$/;"	f	signature:()
test_round_ties_even	$RUST/src/f32/tests.rs	/^fn test_round_ties_even() {$/;"	f	signature:()
test_round_ties_even	$RUST/src/f64/tests.rs	/^fn test_round_ties_even() {$/;"	f	signature:()
test_run_basic	$RUST/src/thread/tests.rs	/^fn test_run_basic() {$/;"	f	signature:()
test_rw_arc	$RUST/src/sync/rwlock/tests.rs	/^fn test_rw_arc() {$/;"	f	signature:()
test_rw_arc_access_in_unwind	$RUST/src/sync/rwlock/tests.rs	/^fn test_rw_arc_access_in_unwind() {$/;"	f	signature:()
test_rw_arc_no_poison_rr	$RUST/src/sync/rwlock/tests.rs	/^fn test_rw_arc_no_poison_rr() {$/;"	f	signature:()
test_rw_arc_no_poison_rw	$RUST/src/sync/rwlock/tests.rs	/^fn test_rw_arc_no_poison_rw() {$/;"	f	signature:()
test_rw_arc_poison_wr	$RUST/src/sync/rwlock/tests.rs	/^fn test_rw_arc_poison_wr() {$/;"	f	signature:()
test_rw_arc_poison_ww	$RUST/src/sync/rwlock/tests.rs	/^fn test_rw_arc_poison_ww() {$/;"	f	signature:()
test_rwlock_try_write	$RUST/src/sync/rwlock/tests.rs	/^fn test_rwlock_try_write() {$/;"	f	signature:()
test_rwlock_unsized	$RUST/src/sync/rwlock/tests.rs	/^fn test_rwlock_unsized() {$/;"	f	signature:()
test_saturating_add_int	$RUST/src/num/tests.rs	/^fn test_saturating_add_int() {$/;"	f	signature:()
test_saturating_add_uint	$RUST/src/num/tests.rs	/^fn test_saturating_add_uint() {$/;"	f	signature:()
test_saturating_sub_int	$RUST/src/num/tests.rs	/^fn test_saturating_sub_int() {$/;"	f	signature:()
test_saturating_sub_uint	$RUST/src/num/tests.rs	/^fn test_saturating_sub_uint() {$/;"	f	signature:()
test_scoped_threads_drop_result_before_join	$RUST/src/thread/tests.rs	/^fn test_scoped_threads_drop_result_before_join() {$/;"	f	signature:()
test_scoped_threads_nll	$RUST/src/thread/tests.rs	/^fn test_scoped_threads_nll() {$/;"	f	signature:()
test_seekable_mem_writer	$RUST/src/io/cursor/tests.rs	/^fn test_seekable_mem_writer() {$/;"	f	signature:()
test_self_exe_path	$RUST/src/env/tests.rs	/^fn test_self_exe_path() {$/;"	f	signature:()
test_send_vectored_fds_unix_stream	$RUST/src/os/unix/net/tests.rs	/^fn test_send_vectored_fds_unix_stream() {$/;"	f	signature:()
test_send_vectored_with_ancillary_to_unix_datagram	$RUST/src/os/unix/net/tests.rs	/^fn test_send_vectored_with_ancillary_to_unix_datagram() {$/;"	f	signature:()
test_send_vectored_with_ancillary_unix_datagram	$RUST/src/os/unix/net/tests.rs	/^fn test_send_vectored_with_ancillary_unix_datagram() {$/;"	f	signature:()
test_short_reads	$RUST/src/io/buffered/tests.rs	/^fn test_short_reads() {$/;"	f	signature:()
test_show	$RUST/src/collections/hash/map/tests.rs	/^fn test_show() {$/;"	f	signature:()
test_show	$RUST/src/collections/hash/set/tests.rs	/^fn test_show() {$/;"	f	signature:()
test_signum	$RUST/src/f32/tests.rs	/^fn test_signum() {$/;"	f	signature:()
test_signum	$RUST/src/f64/tests.rs	/^fn test_signum() {$/;"	f	signature:()
test_simple_message_packing	$RUST/src/io/error/tests.rs	/^fn test_simple_message_packing() {$/;"	f	signature:()
test_simple_newsched_spawn	$RUST/src/thread/tests.rs	/^fn test_simple_newsched_spawn() {$/;"	f	signature:()
test_size	$RUST/src/io/error/tests.rs	/^fn test_size() {$/;"	f	signature:()
test_size_hint	$RUST/src/collections/hash/map/tests.rs	/^fn test_size_hint() {$/;"	f	signature:()
test_size_of_option_thread_id	$RUST/src/thread/tests.rs	/^fn test_size_of_option_thread_id() {$/;"	f	signature:()
test_slice_reader	$RUST/src/io/cursor/tests.rs	/^fn test_slice_reader() {$/;"	f	signature:()
test_slice_reader_vectored	$RUST/src/io/cursor/tests.rs	/^fn test_slice_reader_vectored() {$/;"	f	signature:()
test_slice_writer	$RUST/src/io/cursor/tests.rs	/^fn test_slice_writer<T>(writer: &mut Cursor<T>)$/;"	f	signature:<T>(writer: &mut Cursor<T>) where T: AsRef<[u8]>, Cursor<T>: Write,
test_slice_writer_vectored	$RUST/src/io/cursor/tests.rs	/^fn test_slice_writer_vectored<T>(writer: &mut Cursor<T>)$/;"	f	signature:<T>(writer: &mut Cursor<T>) where T: AsRef<[u8]>, Cursor<T>: Write,
test_socket_pair	$RUST/src/os/unix/ucred/tests.rs	/^fn test_socket_pair() {$/;"	f	signature:()
test_socket_pair_pids	$RUST/src/os/unix/ucred/tests.rs	/^fn test_socket_pair_pids(arg: Type) -> RetType {$/;"	f	signature:(arg: Type) -> RetType
test_spawn_sched	$RUST/src/thread/tests.rs	/^fn test_spawn_sched() {$/;"	f	signature:()
test_spawn_sched_childs_on_default_sched	$RUST/src/thread/tests.rs	/^fn test_spawn_sched_childs_on_default_sched() {$/;"	f	signature:()
test_sqrt_domain	$RUST/src/f32/tests.rs	/^fn test_sqrt_domain() {$/;"	f	signature:()
test_sqrt_domain	$RUST/src/f64/tests.rs	/^fn test_sqrt_domain() {$/;"	f	signature:()
test_std_io_error_downcast	$RUST/src/io/error/tests.rs	/^fn test_std_io_error_downcast() {$/;"	f	signature:()
test_subset_and_superset	$RUST/src/collections/hash/set/tests.rs	/^fn test_subset_and_superset() {$/;"	f	signature:()
test_symmetric_difference	$RUST/src/collections/hash/set/tests.rs	/^fn test_symmetric_difference() {$/;"	f	signature:()
test_take_wrong_length	$RUST/src/io/tests.rs	/^fn test_take_wrong_length() {$/;"	f	signature:()
test_thread_handle	$RUST/src/sys/pal/windows/process/tests.rs	/^fn test_thread_handle() {$/;"	f	signature:()
test_thread_id_equal	$RUST/src/thread/tests.rs	/^fn test_thread_id_equal() {$/;"	f	signature:()
test_thread_id_not_equal	$RUST/src/thread/tests.rs	/^fn test_thread_id_not_equal() {$/;"	f	signature:()
test_timeout_zero_duration	$RUST/src/net/tcp/tests.rs	/^fn test_timeout_zero_duration() {$/;"	f	signature:()
test_timeout_zero_duration	$RUST/src/net/udp/tests.rs	/^fn test_timeout_zero_duration() {$/;"	f	signature:()
test_to_degrees	$RUST/src/f32/tests.rs	/^fn test_to_degrees() {$/;"	f	signature:()
test_to_degrees	$RUST/src/f64/tests.rs	/^fn test_to_degrees() {$/;"	f	signature:()
test_to_radians	$RUST/src/f32/tests.rs	/^fn test_to_radians() {$/;"	f	signature:()
test_to_radians	$RUST/src/f64/tests.rs	/^fn test_to_radians() {$/;"	f	signature:()
test_total_cmp	$RUST/src/f32/tests.rs	/^fn test_total_cmp() {$/;"	f	signature:()
test_total_cmp	$RUST/src/f64/tests.rs	/^fn test_total_cmp() {$/;"	f	signature:()
test_trivial_drain	$RUST/src/collections/hash/set/tests.rs	/^fn test_trivial_drain() {$/;"	f	signature:()
test_trunc	$RUST/src/f32/tests.rs	/^fn test_trunc() {$/;"	f	signature:()
test_trunc	$RUST/src/f64/tests.rs	/^fn test_trunc() {$/;"	f	signature:()
test_try_panic_any_message_any	$RUST/src/thread/tests.rs	/^fn test_try_panic_any_message_any() {$/;"	f	signature:()
test_try_panic_any_message_owned_str	$RUST/src/thread/tests.rs	/^fn test_try_panic_any_message_owned_str() {$/;"	f	signature:()
test_try_panic_any_message_unit_struct	$RUST/src/thread/tests.rs	/^fn test_try_panic_any_message_unit_struct() {$/;"	f	signature:()
test_try_panic_message_string_literal	$RUST/src/thread/tests.rs	/^fn test_try_panic_message_string_literal() {$/;"	f	signature:()
test_try_reserve	$RUST/src/collections/hash/map/tests.rs	/^fn test_try_reserve() {$/;"	f	signature:()
test_uint_from_str_overflow	$RUST/src/num/tests.rs	/^fn test_uint_from_str_overflow() {$/;"	f	signature:()
test_uint_to_str_overflow	$RUST/src/num/tests.rs	/^fn test_uint_to_str_overflow() {$/;"	f	signature:()
test_union	$RUST/src/collections/hash/set/tests.rs	/^fn test_union() {$/;"	f	signature:()
test_unix_datagram	$RUST/src/os/unix/net/tests.rs	/^fn test_unix_datagram() {$/;"	f	signature:()
test_unix_datagram_connect_to_recv_addr	$RUST/src/os/unix/net/tests.rs	/^fn test_unix_datagram_connect_to_recv_addr() {$/;"	f	signature:()
test_unix_datagram_peek	$RUST/src/os/unix/net/tests.rs	/^fn test_unix_datagram_peek() {$/;"	f	signature:()
test_unix_datagram_peek_from	$RUST/src/os/unix/net/tests.rs	/^fn test_unix_datagram_peek_from() {$/;"	f	signature:()
test_unix_datagram_recv	$RUST/src/os/unix/net/tests.rs	/^fn test_unix_datagram_recv() {$/;"	f	signature:()
test_unix_datagram_timeout_zero_duration	$RUST/src/os/unix/net/tests.rs	/^fn test_unix_datagram_timeout_zero_duration() {$/;"	f	signature:()
test_unix_stream_peek	$RUST/src/os/unix/net/tests.rs	/^fn test_unix_stream_peek() {$/;"	f	signature:()
test_unix_stream_timeout_zero_duration	$RUST/src/os/unix/net/tests.rs	/^fn test_unix_stream_timeout_zero_duration() {$/;"	f	signature:()
test_unnamed_thread	$RUST/src/thread/tests.rs	/^fn test_unnamed_thread() {$/;"	f	signature:()
test_unnamed_unix_datagram	$RUST/src/os/unix/net/tests.rs	/^fn test_unnamed_unix_datagram() {$/;"	f	signature:()
test_vacant_entry_key	$RUST/src/collections/hash/map/tests.rs	/^fn test_vacant_entry_key() {$/;"	f	signature:()
test_values	$RUST/src/collections/hash/map/tests.rs	/^fn test_values() {$/;"	f	signature:()
test_values_mut	$RUST/src/collections/hash/map/tests.rs	/^fn test_values_mut() {$/;"	f	signature:()
test_vec_writer	$RUST/src/io/cursor/tests.rs	/^fn test_vec_writer() {$/;"	f	signature:()
test_wait_with_output_once	$RUST/src/process/tests.rs	/^fn test_wait_with_output_once() {$/;"	f	signature:()
test_windows_prefix_components	$RUST/src/sys/pal/windows/path/tests.rs	/^fn test_windows_prefix_components() {$/;"	f	signature:()
test_wrapper	$RUST/src/sys/pal/windows/process/tests.rs	/^    fn test_wrapper(prog: &str, args: &[&str], force_quotes: bool) -> String {$/;"	f	function:test_make_command_line	signature:(prog: &str, args: &[&str], force_quotes: bool) -> String
test_write_all_vectored	$RUST/src/io/tests.rs	/^fn test_write_all_vectored() {$/;"	f	signature:()
test_writer	$RUST/src/io/tests.rs	/^fn test_writer(n_bufs: usize, per_call: usize) -> TestWriter {$/;"	f	signature:(n_bufs: usize, per_call: usize) -> TestWriter
test_writer_read_from_multiple_bufs	$RUST/src/io/tests.rs	/^fn test_writer_read_from_multiple_bufs() {$/;"	f	signature:()
test_writer_read_from_one_buf	$RUST/src/io/tests.rs	/^fn test_writer_read_from_one_buf() {$/;"	f	signature:()
test_zero	$RUST/src/f32/tests.rs	/^fn test_zero() {$/;"	f	signature:()
test_zero	$RUST/src/f64/tests.rs	/^fn test_zero() {$/;"	f	signature:()
test_zero_capacities	$RUST/src/collections/hash/map/tests.rs	/^fn test_zero_capacities() {$/;"	f	signature:()
test_zero_capacities	$RUST/src/collections/hash/set/tests.rs	/^fn test_zero_capacities() {$/;"	f	signature:()
tests	$RUST/src/backtrace.rs	/^mod tests;$/;"	n
tests	$RUST/src/collections/hash/map.rs	/^mod tests;$/;"	n
tests	$RUST/src/collections/hash/set.rs	/^mod tests;$/;"	n
tests	$RUST/src/env.rs	/^mod tests;$/;"	n
tests	$RUST/src/error.rs	/^mod tests;$/;"	n
tests	$RUST/src/f32.rs	/^mod tests;$/;"	n
tests	$RUST/src/f64.rs	/^mod tests;$/;"	n
tests	$RUST/src/ffi/os_str.rs	/^mod tests;$/;"	n
tests	$RUST/src/fs.rs	/^mod tests;$/;"	n
tests	$RUST/src/io/buffered/mod.rs	/^mod tests;$/;"	n
tests	$RUST/src/io/copy.rs	/^mod tests;$/;"	n
tests	$RUST/src/io/cursor.rs	/^mod tests;$/;"	n
tests	$RUST/src/io/error.rs	/^mod tests;$/;"	n
tests	$RUST/src/io/impls.rs	/^mod tests;$/;"	n
tests	$RUST/src/io/mod.rs	/^mod tests;$/;"	n
tests	$RUST/src/io/stdio.rs	/^mod tests;$/;"	n
tests	$RUST/src/io/util.rs	/^mod tests;$/;"	n
tests	$RUST/src/net/ip_addr.rs	/^mod tests;$/;"	n
tests	$RUST/src/net/socket_addr.rs	/^mod tests;$/;"	n
tests	$RUST/src/net/tcp.rs	/^mod tests;$/;"	n
tests	$RUST/src/net/udp.rs	/^mod tests;$/;"	n
tests	$RUST/src/num.rs	/^mod tests;$/;"	n
tests	$RUST/src/os/fd/mod.rs	/^mod tests;$/;"	n
tests	$RUST/src/os/net/linux_ext/mod.rs	/^mod tests;$/;"	n
tests	$RUST/src/os/raw/mod.rs	/^mod tests;$/;"	n
tests	$RUST/src/os/unix/fs.rs	/^mod tests;$/;"	n
tests	$RUST/src/os/unix/io/mod.rs	/^mod tests;$/;"	n
tests	$RUST/src/os/unix/net/mod.rs	/^mod tests;$/;"	n
tests	$RUST/src/os/wasi/io/fd.rs	/^mod tests;$/;"	n
tests	$RUST/src/os/windows/io/mod.rs	/^mod tests;$/;"	n
tests	$RUST/src/panic.rs	/^mod tests;$/;"	n
tests	$RUST/src/path.rs	/^mod tests;$/;"	n
tests	$RUST/src/process.rs	/^mod tests;$/;"	n
tests	$RUST/src/sync/barrier.rs	/^mod tests;$/;"	n
tests	$RUST/src/sync/condvar.rs	/^mod tests;$/;"	n
tests	$RUST/src/sync/lazy_lock.rs	/^mod tests;$/;"	n
tests	$RUST/src/sync/mpsc/mod.rs	/^mod tests;$/;"	n
tests	$RUST/src/sync/mutex.rs	/^mod tests;$/;"	n
tests	$RUST/src/sync/once.rs	/^mod tests;$/;"	n
tests	$RUST/src/sync/once_lock.rs	/^mod tests;$/;"	n
tests	$RUST/src/sync/remutex.rs	/^mod tests;$/;"	n
tests	$RUST/src/sync/rwlock.rs	/^mod tests;$/;"	n
tests	$RUST/src/sys/os_str/bytes.rs	/^mod tests;$/;"	n
tests	$RUST/src/sys/pal/common/mod.rs	/^mod tests;$/;"	n
tests	$RUST/src/sys/pal/itron/time.rs	/^mod tests;$/;"	n
tests	$RUST/src/sys/pal/sgx/abi/tls/sync_bitset.rs	/^mod tests;$/;"	n
tests	$RUST/src/sys/pal/sgx/abi/usercalls/mod.rs	/^mod tests;$/;"	n
tests	$RUST/src/sys/pal/sgx/rwlock.rs	/^mod tests;$/;"	n
tests	$RUST/src/sys/pal/sgx/waitqueue/mod.rs	/^mod tests;$/;"	n
tests	$RUST/src/sys/pal/sgx/waitqueue/spin_mutex.rs	/^mod tests;$/;"	n
tests	$RUST/src/sys/pal/sgx/waitqueue/unsafe_list.rs	/^mod tests;$/;"	n
tests	$RUST/src/sys/pal/uefi/mod.rs	/^mod tests;$/;"	n
tests	$RUST/src/sys/pal/unix/fd.rs	/^mod tests;$/;"	n
tests	$RUST/src/sys/pal/unix/kernel_copy.rs	/^mod tests;$/;"	n
tests	$RUST/src/sys/pal/unix/os.rs	/^mod tests;$/;"	n
tests	$RUST/src/sys/pal/unix/process/process_common.rs	/^mod tests;$/;"	n
tests	$RUST/src/sys/pal/unix/process/process_unix.rs	/^mod tests;$/;"	n
tests	$RUST/src/sys/pal/unix/process/process_unsupported/wait_status.rs	/^mod tests;$/;"	n
tests	$RUST/src/sys/pal/windows/alloc.rs	/^mod tests;$/;"	n
tests	$RUST/src/sys/pal/windows/args.rs	/^mod tests;$/;"	n
tests	$RUST/src/sys/pal/windows/handle.rs	/^mod tests;$/;"	n
tests	$RUST/src/sys/pal/windows/os.rs	/^mod tests;$/;"	n
tests	$RUST/src/sys/pal/windows/path.rs	/^mod tests;$/;"	n
tests	$RUST/src/sys/pal/windows/process.rs	/^mod tests;$/;"	n
tests	$RUST/src/sys/pal/windows/stdio.rs	/^mod tests;$/;"	n
tests	$RUST/src/sys/pal/windows/thread_local_key.rs	/^mod tests;$/;"	n
tests	$RUST/src/sys/personality/dwarf/mod.rs	/^mod tests;$/;"	n
tests	$RUST/src/sys_common/memchr.rs	/^mod tests;$/;"	n
tests	$RUST/src/sys_common/mod.rs	/^mod tests;$/;"	n
tests	$RUST/src/sys_common/net.rs	/^mod tests;$/;"	n
tests	$RUST/src/sys_common/thread_local_key.rs	/^mod tests;$/;"	n
tests	$RUST/src/sys_common/wtf8.rs	/^mod tests;$/;"	n
tests	$RUST/src/thread/local.rs	/^mod tests;$/;"	n
tests	$RUST/src/thread/mod.rs	/^mod tests;$/;"	n
tests	$RUST/src/time.rs	/^mod tests;$/;"	n
tgamma	$RUST/src/sys/cmath/builtins.rs	/^    pub fn tgamma(n: f64) -> f64;$/;"	f	signature:(n: f64) -> f64
tgamma	$RUST/src/sys/cmath/windows.rs	/^    pub fn tgamma(n: c_double) -> c_double;$/;"	f	signature:(n: c_double) -> c_double
tgammaf	$RUST/src/sys/cmath/builtins.rs	/^    pub fn tgammaf(n: f32) -> f32;$/;"	f	signature:(n: f32) -> f32
tgammaf	$RUST/src/sys/cmath/windows.rs	/^    pub fn tgammaf(n: c_float) -> c_float;$/;"	f	signature:(n: c_float) -> c_float
th32DefaultHeapID	$RUST/src/process/tests.rs	/^        th32DefaultHeapID: usize,$/;"	m	struct:test_proc_thread_attributes::PROCESSENTRY32W
th32ModuleID	$RUST/src/process/tests.rs	/^        th32ModuleID: u32,$/;"	m	struct:test_proc_thread_attributes::PROCESSENTRY32W
th32ParentProcessID	$RUST/src/process/tests.rs	/^        th32ParentProcessID: u32,$/;"	m	struct:test_proc_thread_attributes::PROCESSENTRY32W
th32ProcessID	$RUST/src/process/tests.rs	/^        th32ProcessID: u32,$/;"	m	struct:test_proc_thread_attributes::PROCESSENTRY32W
theirs	$RUST/src/sys/pal/windows/pipe.rs	/^    pub theirs: AnonPipe,$/;"	m	struct:Pipes
thread	$RUST/src/lib.rs	/^pub mod thread;$/;"	n
thread	$RUST/src/os/fortanix_sgx/mod.rs	/^pub mod thread {$/;"	n
thread	$RUST/src/os/unix/mod.rs	/^pub mod thread;$/;"	n
thread	$RUST/src/os/windows/mod.rs	/^pub mod thread;$/;"	n
thread	$RUST/src/sync/mpmc/context.rs	/^    thread: Thread,$/;"	m	struct:Inner
thread	$RUST/src/sys/pal/hermit/mod.rs	/^pub mod thread;$/;"	n
thread	$RUST/src/sys/pal/sgx/abi/mod.rs	/^pub mod thread;$/;"	n
thread	$RUST/src/sys/pal/sgx/mod.rs	/^pub mod thread;$/;"	n
thread	$RUST/src/sys/pal/solid/mod.rs	/^    pub mod thread;$/;"	n	module:itron
thread	$RUST/src/sys/pal/teeos/mod.rs	/^pub mod thread;$/;"	n
thread	$RUST/src/sys/pal/uefi/mod.rs	/^pub mod thread;$/;"	n
thread	$RUST/src/sys/pal/unix/mod.rs	/^pub mod thread;$/;"	n
thread	$RUST/src/sys/pal/unsupported/mod.rs	/^pub mod thread;$/;"	n
thread	$RUST/src/sys/pal/wasi/mod.rs	/^pub mod thread;$/;"	n
thread	$RUST/src/sys/pal/windows/mod.rs	/^pub mod thread;$/;"	n
thread	$RUST/src/sys/pal/xous/mod.rs	/^pub mod thread;$/;"	n
thread	$RUST/src/sys/pal/zkvm/mod.rs	/^pub mod thread;$/;"	n
thread	$RUST/src/sys_common/mod.rs	/^pub mod thread;$/;"	n
thread	$RUST/src/sys_common/once/queue.rs	/^    thread: Cell<Option<Thread>>,$/;"	m	struct:Waiter
thread	$RUST/src/sys_common/thread_info.rs	/^    thread: OnceCell<Thread>,$/;"	m	struct:ThreadInfo
thread	$RUST/src/thread/mod.rs	/^    thread: Thread,$/;"	m	struct:JoinInner
thread	$RUST/src/thread/scoped.rs	/^    pub fn thread(&self) -> &Thread {$/;"	P	implementation:ScopedJoinHandle	signature:(&self) -> &Thread
thread_id	$RUST/src/os/xous/ffi.rs	/^pub(crate) fn thread_id() -> Result<ThreadId, Error> {$/;"	f	signature:() -> Result<ThreadId, Error>
thread_id	$RUST/src/process/tests.rs	/^        pub thread_id: DWORD,$/;"	m	struct:test_creation_flags::DEBUG_EVENT
thread_id	$RUST/src/sync/mpmc/context.rs	/^    thread_id: usize,$/;"	m	struct:Inner
thread_info	$RUST/src/sys_common/mod.rs	/^pub mod thread_info;$/;"	n
thread_local	$RUST/src/sys/pal/common/mod.rs	/^pub mod thread_local;$/;"	n
thread_local	$RUST/src/thread/local.rs	/^macro_rules! thread_local {$/;"	M
thread_local_dtor	$RUST/src/sys/pal/hermit/mod.rs	/^pub mod thread_local_dtor;$/;"	n
thread_local_dtor	$RUST/src/sys/pal/solid/mod.rs	/^pub mod thread_local_dtor;$/;"	n
thread_local_dtor	$RUST/src/sys/pal/teeos/mod.rs	/^pub mod thread_local_dtor;$/;"	n
thread_local_dtor	$RUST/src/sys/pal/unix/mod.rs	/^pub mod thread_local_dtor;$/;"	n
thread_local_dtor	$RUST/src/sys/pal/unsupported/mod.rs	/^pub mod thread_local_dtor;$/;"	n
thread_local_dtor	$RUST/src/sys/pal/wasi/mod.rs	/^pub mod thread_local_dtor;$/;"	n
thread_local_dtor	$RUST/src/sys/pal/wasm/mod.rs	/^pub mod thread_local_dtor;$/;"	n
thread_local_dtor	$RUST/src/sys/pal/windows/mod.rs	/^pub mod thread_local_dtor;$/;"	n
thread_local_dtor	$RUST/src/sys_common/mod.rs	/^pub mod thread_local_dtor;$/;"	n
thread_local_key	$RUST/src/sys/pal/hermit/mod.rs	/^pub mod thread_local_key;$/;"	n
thread_local_key	$RUST/src/sys/pal/sgx/mod.rs	/^pub mod thread_local_key;$/;"	n
thread_local_key	$RUST/src/sys/pal/solid/mod.rs	/^pub mod thread_local_key;$/;"	n
thread_local_key	$RUST/src/sys/pal/teeos/mod.rs	/^pub mod thread_local_key;$/;"	n
thread_local_key	$RUST/src/sys/pal/uefi/mod.rs	/^pub mod thread_local_key;$/;"	n
thread_local_key	$RUST/src/sys/pal/unix/mod.rs	/^pub mod thread_local_key;$/;"	n
thread_local_key	$RUST/src/sys/pal/unsupported/mod.rs	/^pub mod thread_local_key;$/;"	n
thread_local_key	$RUST/src/sys/pal/wasi/mod.rs	/^pub mod thread_local_key;$/;"	n
thread_local_key	$RUST/src/sys/pal/wasm/mod.rs	/^pub mod thread_local_key;$/;"	n
thread_local_key	$RUST/src/sys/pal/windows/mod.rs	/^pub mod thread_local_key;$/;"	n
thread_local_key	$RUST/src/sys/pal/xous/mod.rs	/^pub mod thread_local_key;$/;"	n
thread_local_key	$RUST/src/sys/pal/zkvm/mod.rs	/^pub mod thread_local_key;$/;"	n
thread_parking	$RUST/src/sys/pal/sgx/mod.rs	/^pub mod thread_parking;$/;"	n
thread_parking	$RUST/src/sys/pal/solid/mod.rs	/^    pub mod thread_parking;$/;"	n	module:itron
thread_parking	$RUST/src/sys/pal/teeos/mod.rs	/^pub mod thread_parking;$/;"	n
thread_parking	$RUST/src/sys/pal/uefi/mod.rs	/^pub mod thread_parking;$/;"	n
thread_parking	$RUST/src/sys/pal/unix/mod.rs	/^pub mod thread_parking;$/;"	n
thread_parking	$RUST/src/sys/pal/unsupported/mod.rs	/^pub mod thread_parking;$/;"	n
thread_parking	$RUST/src/sys/pal/windows/mod.rs	/^pub mod thread_parking;$/;"	n
thread_parking	$RUST/src/sys/pal/xous/mod.rs	/^pub mod thread_parking;$/;"	n
thread_parking	$RUST/src/sys/pal/zkvm/mod.rs	/^pub mod thread_parking;$/;"	n
thread_parking	$RUST/src/sys_common/mod.rs	/^pub mod thread_parking;$/;"	n
thread_start	$RUST/src/sys/pal/hermit/thread.rs	/^        extern "C" fn thread_start(main: usize) {$/;"	f	method:Thread::new_with_coreid	signature:(main: usize)
thread_start	$RUST/src/sys/pal/teeos/thread.rs	/^        extern "C" fn thread_start(main: *mut libc::c_void) -> *mut libc::c_void {$/;"	f	method:Thread::new	signature:(main: *mut libc::c_void) -> *mut libc::c_void
thread_start	$RUST/src/sys/pal/unix/thread.rs	/^        extern "C" fn thread_start(main: *mut libc::c_void) -> *mut libc::c_void {$/;"	f	method:Thread::new	signature:(main: *mut libc::c_void) -> *mut libc::c_void
thread_start	$RUST/src/sys/pal/windows/thread.rs	/^        extern "system" fn thread_start(main: *mut c_void) -> c::DWORD {$/;"	f	method:Thread::new	signature:(main: *mut c_void) -> c::DWORD
thread_start	$RUST/src/sys/pal/xous/thread.rs	/^        extern "C" fn thread_start($/;"	f	method:Thread::new	signature:( main: *mut usize, guard_page_pre: usize, stack_size: usize, ) -> !
ticktimer	$RUST/src/os/xous/services.rs	/^mod ticktimer;$/;"	n
ticktimer_server	$RUST/src/os/xous/services/ticktimer.rs	/^pub(crate) fn ticktimer_server() -> Connection {$/;"	f	signature:() -> Connection
tid	$RUST/src/sys/pal/hermit/thread.rs	/^    tid: Tid,$/;"	m	struct:Thread
tid	$RUST/src/sys/pal/xous/thread.rs	/^    tid: ThreadId,$/;"	m	struct:Thread
tid	$RUST/src/sys_common/thread_parking/id.rs	/^    tid: UnsafeCell<Option<ThreadId>>,$/;"	m	struct:Parker
time	$RUST/src/lib.rs	/^pub mod time;$/;"	n
time	$RUST/src/sys/pal/hermit/mod.rs	/^pub mod time;$/;"	n
time	$RUST/src/sys/pal/sgx/mod.rs	/^pub mod time;$/;"	n
time	$RUST/src/sys/pal/solid/mod.rs	/^pub mod time;$/;"	n
time	$RUST/src/sys/pal/teeos/mod.rs	/^pub mod time;$/;"	n
time	$RUST/src/sys/pal/uefi/mod.rs	/^pub mod time;$/;"	n
time	$RUST/src/sys/pal/unix/mod.rs	/^pub mod time;$/;"	n
time	$RUST/src/sys/pal/unsupported/mod.rs	/^pub mod time;$/;"	n
time	$RUST/src/sys/pal/wasi/mod.rs	/^pub mod time;$/;"	n
time	$RUST/src/sys/pal/wasm/mod.rs	/^pub mod time;$/;"	n
time	$RUST/src/sys/pal/windows/mod.rs	/^pub mod time;$/;"	n
time	$RUST/src/sys/pal/xous/mod.rs	/^pub mod time;$/;"	n
time	$RUST/src/sys/pal/zkvm/mod.rs	/^pub mod time;$/;"	n
time_t	$RUST/src/os/android/raw.rs	/^    pub type time_t = c_long;$/;"	t	module:arch
time_t	$RUST/src/os/dragonfly/raw.rs	/^pub type time_t = i64;$/;"	t
time_t	$RUST/src/os/emscripten/raw.rs	/^pub type time_t = c_long;$/;"	t
time_t	$RUST/src/os/espidf/raw.rs	/^pub type time_t = libc::time_t;$/;"	t
time_t	$RUST/src/os/freebsd/raw.rs	/^pub type time_t = i64;$/;"	t
time_t	$RUST/src/os/fuchsia/raw.rs	/^    pub type time_t = i64;$/;"	t	module:arch
time_t	$RUST/src/os/haiku/raw.rs	/^pub type time_t = i32;$/;"	t
time_t	$RUST/src/os/horizon/raw.rs	/^pub type time_t = libc::time_t;$/;"	t
time_t	$RUST/src/os/hurd/raw.rs	/^pub type time_t = c_long;$/;"	t
time_t	$RUST/src/os/illumos/raw.rs	/^pub type time_t = i64;$/;"	t
time_t	$RUST/src/os/ios/raw.rs	/^pub type time_t = i64;$/;"	t
time_t	$RUST/src/os/l4re/raw.rs	/^    pub type time_t = i64;$/;"	t	module:arch
time_t	$RUST/src/os/linux/raw.rs	/^    pub type time_t = i64;$/;"	t	module:arch
time_t	$RUST/src/os/macos/raw.rs	/^pub type time_t = i64;$/;"	t
time_t	$RUST/src/os/netbsd/raw.rs	/^pub type time_t = i64;$/;"	t
time_t	$RUST/src/os/nto/raw.rs	/^    pub type time_t = c_long;$/;"	t	module:arch
time_t	$RUST/src/os/openbsd/raw.rs	/^pub type time_t = i64;$/;"	t
time_t	$RUST/src/os/redox/raw.rs	/^pub type time_t = c_long;$/;"	t
time_t	$RUST/src/os/solaris/raw.rs	/^pub type time_t = i64;$/;"	t
time_t	$RUST/src/os/vita/raw.rs	/^pub type time_t = libc::time_t;$/;"	t
time_t	$RUST/src/os/watchos/raw.rs	/^pub type time_t = i64;$/;"	t
timed_out	$RUST/src/sync/condvar.rs	/^    pub fn timed_out(&self) -> bool {$/;"	P	implementation:WaitTimeoutResult	signature:(&self) -> bool
timed_out	$RUST/src/sys/pal/xous/locks/condvar.rs	/^    timed_out: AtomicUsize,$/;"	m	struct:Condvar
timeout	$RUST/src/sys/pal/hermit/net.rs	/^    pub fn timeout(&self, kind: i32) -> io::Result<Option<Duration>> {$/;"	P	implementation:Socket	signature:(&self, kind: i32) -> io::Result<Option<Duration>>
timeout	$RUST/src/sys/pal/solid/net.rs	/^    pub fn timeout(&self, kind: c_int) -> io::Result<Option<Duration>> {$/;"	P	implementation:Socket	signature:(&self, kind: c_int) -> io::Result<Option<Duration>>
timeout	$RUST/src/sys/pal/unix/l4re.rs	/^        pub fn timeout(&self, _: libc::c_int) -> io::Result<Option<Duration>> {$/;"	P	implementation:net::Socket	signature:(&self, _: libc::c_int) -> io::Result<Option<Duration>>
timeout	$RUST/src/sys/pal/unix/net.rs	/^    pub fn timeout(&self, kind: libc::c_int) -> io::Result<Option<Duration>> {$/;"	P	implementation:Socket	signature:(&self, kind: libc::c_int) -> io::Result<Option<Duration>>
timeout	$RUST/src/sys/pal/windows/net.rs	/^    pub fn timeout(&self, kind: c_int) -> io::Result<Option<Duration>> {$/;"	P	implementation:Socket	signature:(&self, kind: c_int) -> io::Result<Option<Duration>>
timeouts	$RUST/src/net/tcp/tests.rs	/^fn timeouts() {$/;"	f	signature:()
timeouts	$RUST/src/net/udp/tests.rs	/^fn timeouts() {$/;"	f	signature:()
timeouts	$RUST/src/os/unix/net/tests.rs	/^fn timeouts() {$/;"	f	signature:()
tloc_mtx	$RUST/src/sys/pal/itron/abi.rs	/^    pub fn tloc_mtx(mtxid: ID, tmout: TMO) -> ER;$/;"	f	signature:(mtxid: ID, tmout: TMO) -> ER
tls	$RUST/src/sys/pal/sgx/abi/mod.rs	/^pub mod tls;$/;"	n
tls	$RUST/src/sys/pal/sgx/abi/tls/mod.rs	/^    tls: &'a Tls,$/;"	m	struct:ActiveTls
tls_dtor	$RUST/src/sys/pal/solid/thread_local_dtor.rs	/^unsafe extern "C" fn tls_dtor(_unused: *mut u8) {$/;"	f	signature:(_unused: *mut u8)
tls_ptr_addr	$RUST/src/sys/pal/xous/thread_local_key.rs	/^fn tls_ptr_addr() -> *mut *mut u8 {$/;"	f	signature:() -> *mut *mut u8
tls_table	$RUST/src/sys/pal/xous/thread_local_key.rs	/^fn tls_table() -> &'static mut [*mut u8] {$/;"	f	signature:() -> &'static mut [*mut u8]
tm_hour	$RUST/src/sys/pal/solid/abi/mod.rs	/^    pub tm_hour: c_int,$/;"	m	struct:SOLID_RTC_TIME
tm_mday	$RUST/src/sys/pal/solid/abi/mod.rs	/^    pub tm_mday: c_int,$/;"	m	struct:SOLID_RTC_TIME
tm_min	$RUST/src/sys/pal/solid/abi/mod.rs	/^    pub tm_min: c_int,$/;"	m	struct:SOLID_RTC_TIME
tm_mon	$RUST/src/sys/pal/solid/abi/mod.rs	/^    pub tm_mon: c_int,$/;"	m	struct:SOLID_RTC_TIME
tm_sec	$RUST/src/sys/pal/solid/abi/mod.rs	/^    pub tm_sec: c_int,$/;"	m	struct:SOLID_RTC_TIME
tm_wday	$RUST/src/sys/pal/solid/abi/mod.rs	/^    pub tm_wday: c_int,$/;"	m	struct:SOLID_RTC_TIME
tm_year	$RUST/src/sys/pal/solid/abi/mod.rs	/^    pub tm_year: c_int,$/;"	m	struct:SOLID_RTC_TIME
tmpdir	$RUST/src/sys_common/io.rs	/^    pub fn tmpdir() -> TempDir {$/;"	f	module:test	signature:() -> TempDir
to_ascii_lowercase	$RUST/src/ascii.rs	/^    fn to_ascii_lowercase(&self) -> Self::Owned;$/;"	P	interface:AsciiExt	signature:(&self) -> Self::Owned
to_ascii_lowercase	$RUST/src/ffi/os_str.rs	/^    pub fn to_ascii_lowercase(&self) -> OsString {$/;"	P	implementation:OsStr	signature:(&self) -> OsString
to_ascii_lowercase	$RUST/src/sys/os_str/bytes.rs	/^    pub fn to_ascii_lowercase(&self) -> Buf {$/;"	P	implementation:Slice	signature:(&self) -> Buf
to_ascii_lowercase	$RUST/src/sys/os_str/wtf8.rs	/^    pub fn to_ascii_lowercase(&self) -> Buf {$/;"	P	implementation:Slice	signature:(&self) -> Buf
to_ascii_lowercase	$RUST/src/sys_common/wtf8.rs	/^    pub fn to_ascii_lowercase(&self) -> Wtf8Buf {$/;"	P	implementation:Wtf8	signature:(&self) -> Wtf8Buf
to_ascii_uppercase	$RUST/src/ascii.rs	/^    fn to_ascii_uppercase(&self) -> Self::Owned;$/;"	P	interface:AsciiExt	signature:(&self) -> Self::Owned
to_ascii_uppercase	$RUST/src/ffi/os_str.rs	/^    pub fn to_ascii_uppercase(&self) -> OsString {$/;"	P	implementation:OsStr	signature:(&self) -> OsString
to_ascii_uppercase	$RUST/src/sys/os_str/bytes.rs	/^    pub fn to_ascii_uppercase(&self) -> Buf {$/;"	P	implementation:Slice	signature:(&self) -> Buf
to_ascii_uppercase	$RUST/src/sys/os_str/wtf8.rs	/^    pub fn to_ascii_uppercase(&self) -> Buf {$/;"	P	implementation:Slice	signature:(&self) -> Buf
to_ascii_uppercase	$RUST/src/sys_common/wtf8.rs	/^    pub fn to_ascii_uppercase(&self) -> Wtf8Buf {$/;"	P	implementation:Wtf8	signature:(&self) -> Wtf8Buf
to_char	$RUST/src/sys_common/wtf8.rs	/^    pub fn to_char(&self) -> Option<char> {$/;"	P	implementation:CodePoint	signature:(&self) -> Option<char>
to_char_lossy	$RUST/src/sys_common/wtf8.rs	/^    pub fn to_char_lossy(&self) -> char {$/;"	P	implementation:CodePoint	signature:(&self) -> char
to_child_stdio	$RUST/src/sys/pal/unix/process/process_common.rs	/^    pub fn to_child_stdio(&self, readable: bool) -> io::Result<(ChildStdio, Option<AnonPipe>)> {$/;"	P	implementation:Stdio	signature:(&self, readable: bool) -> io::Result<(ChildStdio, Option<AnonPipe>)>
to_enclave	$RUST/src/sys/pal/sgx/abi/usercalls/alloc.rs	/^    pub fn to_enclave(&self) -> Vec<T> {$/;"	f	signature:(&self) -> Vec<T>
to_handle	$RUST/src/sys/pal/windows/process.rs	/^    fn to_handle(&self, stdio_id: c::DWORD, pipe: &mut Option<AnonPipe>) -> io::Result<Handle> {$/;"	P	implementation:Stdio	signature:(&self, stdio_id: c::DWORD, pipe: &mut Option<AnonPipe>) -> io::Result<Handle>
to_i32	$RUST/src/process.rs	/^    pub fn to_i32(self) -> i32 {$/;"	P	implementation:ExitCode	signature:(self) -> i32
to_index	$RUST/src/sys/pal/sgx/abi/tls/mod.rs	/^    fn to_index(self) -> usize {$/;"	P	implementation:Key	signature:(self) -> usize
to_ipv6mr_interface	$RUST/src/sys_common/net.rs	/^fn to_ipv6mr_interface(value: u32) -> crate::ffi::c_uint {$/;"	f	signature:(value: u32) -> crate::ffi::c_uint
to_lead_surrogate	$RUST/src/sys_common/wtf8.rs	/^    pub fn to_lead_surrogate(&self) -> Option<u16> {$/;"	P	implementation:CodePoint	signature:(&self) -> Option<u16>
to_os_string	$RUST/src/ffi/os_str.rs	/^    pub fn to_os_string(&self) -> OsString {$/;"	P	implementation:OsStr	signature:(&self) -> OsString
to_owned	$RUST/src/ffi/os_str.rs	/^    fn to_owned(&self) -> OsString {$/;"	P	implementation:OsStr	signature:(&self) -> OsString
to_owned	$RUST/src/path.rs	/^    fn to_owned(&self) -> PathBuf {$/;"	P	implementation:Path	signature:(&self) -> PathBuf
to_owned	$RUST/src/sys/os_str/bytes.rs	/^    pub fn to_owned(&self) -> Buf {$/;"	P	implementation:Slice	signature:(&self) -> Buf
to_owned	$RUST/src/sys/os_str/wtf8.rs	/^    pub fn to_owned(&self) -> Buf {$/;"	P	implementation:Slice	signature:(&self) -> Buf
to_owned	$RUST/src/sys_common/wtf8.rs	/^    pub fn to_owned(&self) -> Wtf8Buf {$/;"	P	implementation:Wtf8	signature:(&self) -> Wtf8Buf
to_owner	$RUST/src/sys/pal/unix/locks/fuchsia_mutex.rs	/^fn to_owner(state: u32) -> zx_handle_t {$/;"	f	signature:(state: u32) -> zx_handle_t
to_path_buf	$RUST/src/path.rs	/^    pub fn to_path_buf(&self) -> PathBuf {$/;"	P	implementation:Path	signature:(&self) -> PathBuf
to_socket_addr_ipaddr_u16	$RUST/src/net/socket_addr/tests.rs	/^fn to_socket_addr_ipaddr_u16() {$/;"	f	signature:()
to_socket_addr_socketaddr	$RUST/src/net/ip_addr/tests.rs	/^fn to_socket_addr_socketaddr() {$/;"	f	signature:()
to_socket_addr_str	$RUST/src/net/socket_addr/tests.rs	/^fn to_socket_addr_str() {$/;"	f	signature:()
to_socket_addr_str_u16	$RUST/src/net/socket_addr/tests.rs	/^fn to_socket_addr_str_u16() {$/;"	f	signature:()
to_socket_addr_string	$RUST/src/net/socket_addr/tests.rs	/^fn to_socket_addr_string() {$/;"	f	signature:()
to_socket_addrs	$RUST/src/net/socket_addr.rs	/^    fn to_socket_addrs(&self) -> io::Result<vec::IntoIter<SocketAddr>> {$/;"	P	implementation:u16	signature:(&self) -> io::Result<vec::IntoIter<SocketAddr>>
to_state	$RUST/src/sys/pal/unix/locks/fuchsia_mutex.rs	/^fn to_state(owner: zx_handle_t) -> u32 {$/;"	f	signature:(owner: zx_handle_t) -> u32
to_str	$RUST/src/ffi/os_str.rs	/^    pub fn to_str(&self) -> Option<&str> {$/;"	P	implementation:OsStr	signature:(&self) -> Option<&str>
to_str	$RUST/src/path.rs	/^    pub fn to_str(&self) -> Option<&str> {$/;"	P	implementation:Path	signature:(&self) -> Option<&str>
to_str	$RUST/src/sys/os_str/bytes.rs	/^    pub fn to_str(&self) -> Result<&str, crate::str::Utf8Error> {$/;"	P	implementation:Slice	signature:(&self) -> Result<&str, crate::str::Utf8Error>
to_str	$RUST/src/sys/os_str/wtf8.rs	/^    pub fn to_str(&self) -> Result<&str, crate::str::Utf8Error> {$/;"	P	implementation:Slice	signature:(&self) -> Result<&str, crate::str::Utf8Error>
to_string_lossy	$RUST/src/ffi/os_str.rs	/^    pub fn to_string_lossy(&self) -> Cow<'_, str> {$/;"	P	implementation:OsStr	signature:(&self) -> Cow<'_, str>
to_string_lossy	$RUST/src/path.rs	/^    pub fn to_string_lossy(&self) -> Cow<'_, str> {$/;"	P	implementation:Path	signature:(&self) -> Cow<'_, str>
to_string_lossy	$RUST/src/sys/os_str/bytes.rs	/^    pub fn to_string_lossy(&self) -> Cow<'_, str> {$/;"	P	implementation:Slice	signature:(&self) -> Cow<'_, str>
to_string_lossy	$RUST/src/sys/os_str/wtf8.rs	/^    pub fn to_string_lossy(&self) -> Cow<'_, str> {$/;"	P	implementation:Slice	signature:(&self) -> Cow<'_, str>
to_string_lossy	$RUST/src/sys_common/wtf8.rs	/^    pub fn to_string_lossy(&self) -> Cow<'_, str> {$/;"	P	implementation:Wtf8	signature:(&self) -> Cow<'_, str>
to_timespec	$RUST/src/sys/pal/unix/time.rs	/^    pub fn to_timespec(&self) -> Option<libc::timespec> {$/;"	P	implementation:Timespec	signature:(&self) -> Option<libc::timespec>
to_timespec64	$RUST/src/sys/pal/unix/time.rs	/^    pub fn to_timespec64(&self) -> __timespec64 {$/;"	P	implementation:Timespec	signature:(&self) -> __timespec64
to_timespec_capped	$RUST/src/sys/pal/unix/time.rs	/^    pub(super) fn to_timespec_capped(&self) -> Option<libc::timespec> {$/;"	P	implementation:Timespec	signature:(&self) -> Option<libc::timespec>
to_trail_surrogate	$RUST/src/sys_common/wtf8.rs	/^    pub fn to_trail_surrogate(&self) -> Option<u16> {$/;"	P	implementation:CodePoint	signature:(&self) -> Option<u16>
to_u16s	$RUST/src/sys/pal/windows/mod.rs	/^pub fn to_u16s<S: AsRef<OsStr>>(s: S) -> crate::io::Result<Vec<u16>> {$/;"	f	signature:<S: AsRef<OsStr>>(s: S) -> crate::io::Result<Vec<u16>>
to_u32	$RUST/src/sys_common/wtf8.rs	/^    pub fn to_u32(&self) -> u32 {$/;"	P	implementation:CodePoint	signature:(&self) -> u32
to_u64	$RUST/src/sys/pal/windows/fs.rs	/^fn to_u64(ft: &c::FILETIME) -> u64 {$/;"	f	signature:(ft: &c::FILETIME) -> u64
to_user_path	$RUST/src/sys/pal/windows/args.rs	/^pub(crate) fn to_user_path(path: &Path) -> io::Result<Vec<u16>> {$/;"	f	signature:(path: &Path) -> io::Result<Vec<u16>>
to_wasi_timestamp	$RUST/src/sys/pal/wasi/time.rs	/^    pub fn to_wasi_timestamp(&self) -> Option<wasi::Timestamp> {$/;"	P	implementation:SystemTime	signature:(&self) -> Option<wasi::Timestamp>
trait_keyword	$RUST/src/keyword_docs.rs	/^mod trait_keyword {}$/;"	n
trampoline	$RUST/src/sys/pal/itron/thread.rs	/^        unsafe extern "C" fn trampoline(exinf: isize) {$/;"	f	method:Thread::new	signature:(exinf: isize)
transferred	$RUST/src/sys/pal/windows/pipe.rs	/^            transferred: u32,$/;"	m	struct:AnonPipe::alertable_io_internal::AsyncResult
trim_left	$RUST/src/path.rs	/^    fn trim_left(&mut self) {$/;"	P	implementation:Components	signature:(&mut self)
trim_right	$RUST/src/path.rs	/^    fn trim_right(&mut self) {$/;"	P	implementation:Components	signature:(&mut self)
true_keyword	$RUST/src/keyword_docs.rs	/^mod true_keyword {}$/;"	n
trunc	$RUST/src/f32.rs	/^    pub fn trunc(self) -> f32 {$/;"	P	implementation:f32	signature:(self) -> f32
trunc	$RUST/src/f64.rs	/^    pub fn trunc(self) -> f64 {$/;"	P	implementation:f64	signature:(self) -> f64
truncate	$RUST/src/fs.rs	/^    pub fn truncate(&mut self, truncate: bool) -> &mut Self {$/;"	P	implementation:OpenOptions	signature:(&mut self, truncate: bool) -> &mut Self
truncate	$RUST/src/sys/pal/hermit/fs.rs	/^    truncate: bool,$/;"	m	struct:OpenOptions
truncate	$RUST/src/sys/pal/solid/fs.rs	/^    truncate: bool,$/;"	m	struct:OpenOptions
truncate	$RUST/src/sys/pal/unix/fs.rs	/^    truncate: bool,$/;"	m	struct:OpenOptions
truncate	$RUST/src/sys/pal/unsupported/fs.rs	/^    pub fn truncate(&self, _size: u64) -> io::Result<()> {$/;"	P	implementation:File	signature:(&self, _size: u64) -> io::Result<()>
truncate	$RUST/src/sys/pal/wasi/fs.rs	/^    pub fn truncate(&self, size: u64) -> io::Result<()> {$/;"	P	implementation:File	signature:(&self, size: u64) -> io::Result<()>
truncate	$RUST/src/sys/pal/windows/fs.rs	/^    truncate: bool,$/;"	m	struct:OpenOptions
truncate	$RUST/src/sys_common/wtf8.rs	/^    pub fn truncate(&mut self, new_len: usize) {$/;"	P	implementation:Wtf8Buf	signature:(&mut self, new_len: usize)
truncate_cstr	$RUST/src/sys/pal/unix/thread.rs	/^fn truncate_cstr<const MAX_WITH_NUL: usize>(cstr: &CStr) -> [libc::c_char; MAX_WITH_NUL] {$/;"	f	signature:<const MAX_WITH_NUL: usize>(cstr: &CStr) -> [libc::c_char; MAX_WITH_NUL]
truncate_utf16_at_nul	$RUST/src/sys/pal/windows/mod.rs	/^pub fn truncate_utf16_at_nul(v: &[u16]) -> &[u16] {$/;"	f	signature:(v: &[u16]) -> &[u16]
truncate_works	$RUST/src/fs/tests.rs	/^fn truncate_works() {$/;"	f	signature:()
truncated	$RUST/src/os/unix/net/ancillary.rs	/^    truncated: bool,$/;"	m	struct:SocketAncillary
try_blocking_scalar	$RUST/src/os/xous/ffi.rs	/^pub(crate) fn try_blocking_scalar($/;"	f	signature:( connection: Connection, args: [usize; 5], ) -> Result<[usize; 5], Error>
try_clone	$RUST/src/fs.rs	/^    pub fn try_clone(&self) -> io::Result<File> {$/;"	P	implementation:File	signature:(&self) -> io::Result<File>
try_clone	$RUST/src/net/tcp.rs	/^    pub fn try_clone(&self) -> io::Result<TcpStream> {$/;"	P	implementation:TcpStream	signature:(&self) -> io::Result<TcpStream>
try_clone	$RUST/src/net/udp.rs	/^    pub fn try_clone(&self) -> io::Result<UdpSocket> {$/;"	P	implementation:UdpSocket	signature:(&self) -> io::Result<UdpSocket>
try_clone	$RUST/src/os/fd/owned.rs	/^    pub fn try_clone(&self) -> crate::io::Result<Self> {$/;"	P	implementation:OwnedFd	signature:(&self) -> crate::io::Result<Self>
try_clone	$RUST/src/os/solid/io.rs	/^    pub fn try_clone(&self) -> crate::io::Result<Self> {$/;"	P	implementation:OwnedFd	signature:(&self) -> crate::io::Result<Self>
try_clone	$RUST/src/os/unix/net/datagram.rs	/^    pub fn try_clone(&self) -> io::Result<UnixDatagram> {$/;"	P	implementation:UnixDatagram	signature:(&self) -> io::Result<UnixDatagram>
try_clone	$RUST/src/os/unix/net/listener.rs	/^    pub fn try_clone(&self) -> io::Result<UnixListener> {$/;"	P	implementation:UnixListener	signature:(&self) -> io::Result<UnixListener>
try_clone	$RUST/src/os/unix/net/stream.rs	/^    pub fn try_clone(&self) -> io::Result<UnixStream> {$/;"	P	implementation:UnixStream	signature:(&self) -> io::Result<UnixStream>
try_clone	$RUST/src/os/unix/net/tests.rs	/^fn try_clone() {$/;"	f	signature:()
try_clone	$RUST/src/os/windows/io/handle.rs	/^    pub fn try_clone(&self) -> crate::io::Result<Self> {$/;"	P	implementation:OwnedHandle	signature:(&self) -> crate::io::Result<Self>
try_clone	$RUST/src/os/windows/io/socket.rs	/^    pub fn try_clone(&self) -> io::Result<Self> {$/;"	P	implementation:OwnedSocket	signature:(&self) -> io::Result<Self>
try_clone	$RUST/src/sys/pal/windows/handle.rs	/^    pub fn try_clone(&self) -> io::Result<Self> {$/;"	P	implementation:Handle	signature:(&self) -> io::Result<Self>
try_clone_to_owned	$RUST/src/os/fd/owned.rs	/^    pub fn try_clone_to_owned(&self) -> crate::io::Result<OwnedFd> {$/;"	P	implementation:BorrowedFd	signature:(&self) -> crate::io::Result<OwnedFd>
try_clone_to_owned	$RUST/src/os/solid/io.rs	/^    pub fn try_clone_to_owned(&self) -> crate::io::Result<OwnedFd> {$/;"	P	implementation:BorrowedFd	signature:(&self) -> crate::io::Result<OwnedFd>
try_clone_to_owned	$RUST/src/os/windows/io/handle.rs	/^    pub fn try_clone_to_owned(&self) -> crate::io::Result<OwnedHandle> {$/;"	P	implementation:BorrowedHandle	signature:(&self) -> crate::io::Result<OwnedHandle>
try_clone_to_owned	$RUST/src/os/windows/io/socket.rs	/^    pub fn try_clone_to_owned(&self) -> io::Result<OwnedSocket> {$/;"	P	implementation:BorrowedSocket	signature:(&self) -> io::Result<OwnedSocket>
try_connect	$RUST/src/os/xous/ffi.rs	/^pub(crate) fn try_connect(address: ServerAddress) -> Result<Option<Connection>, Error> {$/;"	f	signature:(address: ServerAddress) -> Result<Option<Connection>, Error>
try_connect	$RUST/src/os/xous/services.rs	/^pub fn try_connect(name: &str) -> Option<Connection> {$/;"	f	signature:(name: &str) -> Option<Connection>
try_connect_with_name	$RUST/src/os/xous/services.rs	/^    pub fn try_connect_with_name(name: &str) -> Option<Connection> {$/;"	f	module:ns	signature:(name: &str) -> Option<Connection>
try_current_task_id	$RUST/src/sys/pal/itron/task.rs	/^pub fn try_current_task_id() -> Result<abi::ID, ItronError> {$/;"	f	signature:() -> Result<abi::ID, ItronError>
try_exists	$RUST/src/fs.rs	/^pub fn try_exists<P: AsRef<Path>>(path: P) -> io::Result<bool> {$/;"	f	signature:<P: AsRef<Path>>(path: P) -> io::Result<bool>
try_exists	$RUST/src/path.rs	/^    pub fn try_exists(&self) -> io::Result<bool> {$/;"	P	implementation:Path	signature:(&self) -> io::Result<bool>
try_exists	$RUST/src/sys/pal/unsupported/fs.rs	/^pub fn try_exists(_path: &Path) -> io::Result<bool> {$/;"	f	signature:(_path: &Path) -> io::Result<bool>
try_exists	$RUST/src/sys_common/fs.rs	/^pub fn try_exists(path: &Path) -> io::Result<bool> {$/;"	f	signature:(path: &Path) -> io::Result<bool>
try_from	$RUST/src/ffi/os_str.rs	/^    fn try_from(value: &'a OsStr) -> Result<Self, Self::Error> {$/;"	P	implementation:str	signature:(value: &'a OsStr) -> Result<Self, Self::Error>
try_from	$RUST/src/os/windows/io/handle.rs	/^    fn try_from(handle_or_null: HandleOrNull) -> Result<Self, NullHandleError> {$/;"	P	implementation:OwnedHandle	signature:(handle_or_null: HandleOrNull) -> Result<Self, NullHandleError>
try_from	$RUST/src/os/xous/ffi/definitions.rs	/^    fn try_from(value: &str) -> Result<Self, Self::Error> {$/;"	P	implementation:ServerAddress	signature:(value: &str) -> Result<Self, Self::Error>
try_from	$RUST/src/sys/pal/sgx/net.rs	/^    fn try_from(v: &str) -> io::Result<LookupHost> {$/;"	P	implementation:LookupHost	signature:(v: &str) -> io::Result<LookupHost>
try_from	$RUST/src/sys/pal/teeos/net.rs	/^    fn try_from(_v: (&'a str, u16)) -> io::Result<LookupHost> {$/;"	P	implementation:LookupHost	signature:(_v: (&'a str, u16)) -> io::Result<LookupHost>
try_from	$RUST/src/sys/pal/unix/l4re.rs	/^        fn try_from(_v: (&'a str, u16)) -> io::Result<LookupHost> {$/;"	P	implementation:net::LookupHost	signature:(_v: (&'a str, u16)) -> io::Result<LookupHost>
try_from	$RUST/src/sys/pal/unsupported/net.rs	/^    fn try_from(_v: (&'a str, u16)) -> io::Result<LookupHost> {$/;"	P	implementation:LookupHost	signature:(_v: (&'a str, u16)) -> io::Result<LookupHost>
try_from	$RUST/src/sys/pal/wasi/net.rs	/^    fn try_from(_v: (&'a str, u16)) -> io::Result<LookupHost> {$/;"	P	implementation:LookupHost	signature:(_v: (&'a str, u16)) -> io::Result<LookupHost>
try_from	$RUST/src/sys/pal/xous/net/dns.rs	/^    fn try_from(v: (&str, u16)) -> io::Result<LookupHost> {$/;"	P	implementation:LookupHost	signature:(v: (&str, u16)) -> io::Result<LookupHost>
try_from	$RUST/src/sys_common/net.rs	/^    fn try_from(s: &str) -> io::Result<LookupHost> {$/;"	P	implementation:LookupHost	signature:(s: &str) -> io::Result<LookupHost>
try_from_cmsghdr	$RUST/src/os/unix/net/ancillary.rs	/^    fn try_from_cmsghdr(cmsg: &'a libc::cmsghdr) -> Result<Self, AncillaryError> {$/;"	P	implementation:AncillaryData	signature:(cmsg: &'a libc::cmsghdr) -> Result<Self, AncillaryError>
try_image_handle	$RUST/src/os/uefi/env.rs	/^pub(crate) fn try_image_handle() -> Option<NonNull<c_void>> {$/;"	f	signature:() -> Option<NonNull<c_void>>
try_initialize	$RUST/src/sys/pal/common/thread_local/fast_local.rs	/^    unsafe fn try_initialize<F: FnOnce() -> T>(&self, init: F) -> Option<&'static T> {$/;"	P	implementation:Key	signature:<F: FnOnce() -> T>(&self, init: F) -> Option<&'static T>
try_initialize	$RUST/src/sys/pal/common/thread_local/os_local.rs	/^    unsafe fn try_initialize(&'static self, init: impl FnOnce() -> T) -> Option<&'static T> {$/;"	P	implementation:Key	signature:(&'static self, init: impl FnOnce() -> T) -> Option<&'static T>
try_insert	$RUST/src/collections/hash/map.rs	/^    pub fn try_insert(&mut self, key: K, value: V) -> Result<&mut V, OccupiedError<'_, K, V>> {$/;"	f	signature:(&mut self, key: K, value: V) -> Result<&mut V, OccupiedError<'_, K, V>>
try_insert	$RUST/src/sync/once_lock.rs	/^    pub fn try_insert(&self, value: T) -> Result<&T, (&T, T)> {$/;"	P	implementation:OnceLock	signature:(&self, value: T) -> Result<&T, (&T, T)>
try_into	$RUST/src/os/xous/ffi/definitions.rs	/^    fn try_into(self) -> Result<usize, Self::Error> {$/;"	P	implementation:Connection	signature:(self) -> Result<usize, Self::Error>
try_into_inner	$RUST/src/sys/pal/sgx/mod.rs	/^    fn try_into_inner(self) -> Result<Inner, Self>;$/;"	P	interface:TryIntoInner	signature:(self) -> Result<Inner, Self>
try_into_inner	$RUST/src/sys/pal/sgx/net.rs	/^    fn try_into_inner(self) -> Result<FileDesc, Socket> {$/;"	P	implementation:Socket	signature:(self) -> Result<FileDesc, Socket>
try_into_raw_fd	$RUST/src/os/fortanix_sgx/io.rs	/^    fn try_into_raw_fd(self) -> Result<RawFd, Self>;$/;"	P	interface:TryIntoRawFd	signature:(self) -> Result<RawFd, Self>
try_iter	$RUST/src/sync/mpsc/mod.rs	/^    pub fn try_iter(&self) -> TryIter<'_, T> {$/;"	P	implementation:Receiver	signature:(&self) -> TryIter<'_, T>
try_lend	$RUST/src/os/xous/ffi.rs	/^pub(crate) fn try_lend($/;"	f	signature:( connection: Connection, opcode: usize, data: &[u8], arg1: usize, arg2: usize, ) -> Result<(usize, usize), Error>
try_lend_mut	$RUST/src/os/xous/ffi.rs	/^pub(crate) fn try_lend_mut($/;"	f	signature:( connection: Connection, opcode: usize, data: &mut [u8], arg1: usize, arg2: usize, ) -> Result<(usize, usize), Error>
try_load	$RUST/src/sys/pal/windows/compat.rs	/^    fn try_load() -> Option<()> {$/;"	f	function:load_synch_functions	signature:() -> Option<()>
try_lock	$RUST/src/sync/mutex.rs	/^    pub fn try_lock(&self) -> TryLockResult<MutexGuard<'_, T>> {$/;"	P	implementation:Mutex	signature:(&self) -> TryLockResult<MutexGuard<'_, T>>
try_lock	$RUST/src/sync/mutex/tests.rs	/^fn try_lock() {$/;"	f	signature:()
try_lock	$RUST/src/sync/remutex.rs	/^    pub fn try_lock(&self) -> Option<ReentrantMutexGuard<'_, T>> {$/;"	P	implementation:ReentrantMutex	signature:(&self) -> Option<ReentrantMutexGuard<'_, T>>
try_lock	$RUST/src/sys/pal/itron/mutex.rs	/^    pub fn try_lock(&self) -> bool {$/;"	P	implementation:Mutex	signature:(&self) -> bool
try_lock	$RUST/src/sys/pal/sgx/mutex.rs	/^    pub fn try_lock(&self) -> bool {$/;"	P	implementation:Mutex	signature:(&self) -> bool
try_lock	$RUST/src/sys/pal/sgx/waitqueue/spin_mutex.rs	/^    pub fn try_lock(&self) -> Option<SpinMutexGuard<'_, T>> {$/;"	P	implementation:SpinMutex	signature:(&self) -> Option<SpinMutexGuard<'_, T>>
try_lock	$RUST/src/sys/pal/unix/locks/fuchsia_mutex.rs	/^    pub fn try_lock(&self) -> bool {$/;"	P	implementation:Mutex	signature:(&self) -> bool
try_lock	$RUST/src/sys/pal/unix/locks/futex_mutex.rs	/^    pub fn try_lock(&self) -> bool {$/;"	P	implementation:Mutex	signature:(&self) -> bool
try_lock	$RUST/src/sys/pal/unix/locks/pthread_mutex.rs	/^    pub unsafe fn try_lock(&self) -> bool {$/;"	P	implementation:Mutex	signature:(&self) -> bool
try_lock	$RUST/src/sys/pal/unsupported/locks/mutex.rs	/^    pub fn try_lock(&self) -> bool {$/;"	P	implementation:Mutex	signature:(&self) -> bool
try_lock	$RUST/src/sys/pal/windows/locks/mutex.rs	/^    pub fn try_lock(&self) -> bool {$/;"	P	implementation:Mutex	signature:(&self) -> bool
try_lock	$RUST/src/sys/pal/xous/locks/mutex.rs	/^    pub unsafe fn try_lock(&self) -> bool {$/;"	P	implementation:Mutex	signature:(&self) -> bool
try_lock_or_poison	$RUST/src/sys/pal/xous/locks/mutex.rs	/^    pub unsafe fn try_lock_or_poison(&self) -> bool {$/;"	P	implementation:Mutex	signature:(&self) -> bool
try_name_server	$RUST/src/os/xous/services.rs	/^fn try_name_server() -> Option<Connection> {$/;"	f	signature:() -> Option<Connection>
try_opt	$RUST/src/sys/pal/xous/net/dns.rs	/^        macro_rules! try_opt {$/;"	M	method:LookupHost::try_from
try_opt	$RUST/src/sys_common/net.rs	/^        macro_rules! try_opt {$/;"	M	method:LookupHost::try_from
try_read	$RUST/src/sync/rwlock.rs	/^    pub fn try_read(&self) -> TryLockResult<RwLockReadGuard<'_, T>> {$/;"	P	implementation:RwLock	signature:(&self) -> TryLockResult<RwLockReadGuard<'_, T>>
try_read	$RUST/src/sys/pal/sgx/rwlock.rs	/^    pub unsafe fn try_read(&self) -> bool {$/;"	P	implementation:RwLock	signature:(&self) -> bool
try_read	$RUST/src/sys/pal/solid/rwlock.rs	/^    pub fn try_read(&self) -> bool {$/;"	P	implementation:RwLock	signature:(&self) -> bool
try_read	$RUST/src/sys/pal/teeos/locks/rwlock.rs	/^    pub fn try_read(&self) -> bool {$/;"	P	implementation:RwLock	signature:(&self) -> bool
try_read	$RUST/src/sys/pal/unix/locks/futex_rwlock.rs	/^    pub fn try_read(&self) -> bool {$/;"	P	implementation:RwLock	signature:(&self) -> bool
try_read	$RUST/src/sys/pal/unix/locks/pthread_rwlock.rs	/^    pub fn try_read(&self) -> bool {$/;"	P	implementation:RwLock	signature:(&self) -> bool
try_read	$RUST/src/sys/pal/unsupported/locks/rwlock.rs	/^    pub fn try_read(&self) -> bool {$/;"	P	implementation:RwLock	signature:(&self) -> bool
try_read	$RUST/src/sys/pal/windows/locks/rwlock.rs	/^    pub fn try_read(&self) -> bool {$/;"	P	implementation:RwLock	signature:(&self) -> bool
try_read	$RUST/src/sys/pal/xous/locks/rwlock.rs	/^    pub unsafe fn try_read(&self) -> bool {$/;"	P	implementation:RwLock	signature:(&self) -> bool
try_recv	$RUST/src/sync/mpmc/array.rs	/^    pub(crate) fn try_recv(&self) -> Result<T, TryRecvError> {$/;"	P	implementation:Channel	signature:(&self) -> Result<T, TryRecvError>
try_recv	$RUST/src/sync/mpmc/list.rs	/^    pub(crate) fn try_recv(&self) -> Result<T, TryRecvError> {$/;"	P	implementation:Channel	signature:(&self) -> Result<T, TryRecvError>
try_recv	$RUST/src/sync/mpmc/mod.rs	/^    pub fn try_recv(&self) -> Result<T, TryRecvError> {$/;"	P	implementation:Receiver	signature:(&self) -> Result<T, TryRecvError>
try_recv	$RUST/src/sync/mpmc/zero.rs	/^    pub(crate) fn try_recv(&self) -> Result<T, TryRecvError> {$/;"	P	implementation:Channel	signature:(&self) -> Result<T, TryRecvError>
try_recv	$RUST/src/sync/mpsc/mod.rs	/^    pub fn try_recv(&self) -> Result<T, TryRecvError> {$/;"	P	implementation:Receiver	signature:(&self) -> Result<T, TryRecvError>
try_recv_states	$RUST/src/sync/mpsc/sync_tests.rs	/^fn try_recv_states() {$/;"	f	signature:()
try_recv_states	$RUST/src/sync/mpsc/tests.rs	/^fn try_recv_states() {$/;"	f	signature:()
try_register_dtor	$RUST/src/sys/pal/common/thread_local/fast_local.rs	/^    unsafe fn try_register_dtor(&self) -> bool {$/;"	P	implementation:Key	signature:(&self) -> bool
try_reserve	$RUST/src/collections/hash/map.rs	/^    pub fn try_reserve(&mut self, additional: usize) -> Result<(), TryReserveError> {$/;"	f	signature:(&mut self, additional: usize) -> Result<(), TryReserveError>
try_reserve	$RUST/src/collections/hash/set.rs	/^    pub fn try_reserve(&mut self, additional: usize) -> Result<(), TryReserveError> {$/;"	f	signature:(&mut self, additional: usize) -> Result<(), TryReserveError>
try_reserve	$RUST/src/ffi/os_str.rs	/^    pub fn try_reserve(&mut self, additional: usize) -> Result<(), TryReserveError> {$/;"	P	implementation:OsString	signature:(&mut self, additional: usize) -> Result<(), TryReserveError>
try_reserve	$RUST/src/path.rs	/^    pub fn try_reserve(&mut self, additional: usize) -> Result<(), TryReserveError> {$/;"	P	implementation:PathBuf	signature:(&mut self, additional: usize) -> Result<(), TryReserveError>
try_reserve	$RUST/src/sys/os_str/bytes.rs	/^    pub fn try_reserve(&mut self, additional: usize) -> Result<(), TryReserveError> {$/;"	P	implementation:Buf	signature:(&mut self, additional: usize) -> Result<(), TryReserveError>
try_reserve	$RUST/src/sys/os_str/wtf8.rs	/^    pub fn try_reserve(&mut self, additional: usize) -> Result<(), TryReserveError> {$/;"	P	implementation:Buf	signature:(&mut self, additional: usize) -> Result<(), TryReserveError>
try_reserve	$RUST/src/sys_common/wtf8.rs	/^    pub fn try_reserve(&mut self, additional: usize) -> Result<(), TryReserveError> {$/;"	P	implementation:Wtf8Buf	signature:(&mut self, additional: usize) -> Result<(), TryReserveError>
try_reserve_exact	$RUST/src/ffi/os_str.rs	/^    pub fn try_reserve_exact(&mut self, additional: usize) -> Result<(), TryReserveError> {$/;"	P	implementation:OsString	signature:(&mut self, additional: usize) -> Result<(), TryReserveError>
try_reserve_exact	$RUST/src/path.rs	/^    pub fn try_reserve_exact(&mut self, additional: usize) -> Result<(), TryReserveError> {$/;"	P	implementation:PathBuf	signature:(&mut self, additional: usize) -> Result<(), TryReserveError>
try_reserve_exact	$RUST/src/sys/os_str/bytes.rs	/^    pub fn try_reserve_exact(&mut self, additional: usize) -> Result<(), TryReserveError> {$/;"	P	implementation:Buf	signature:(&mut self, additional: usize) -> Result<(), TryReserveError>
try_reserve_exact	$RUST/src/sys/os_str/wtf8.rs	/^    pub fn try_reserve_exact(&mut self, additional: usize) -> Result<(), TryReserveError> {$/;"	P	implementation:Buf	signature:(&mut self, additional: usize) -> Result<(), TryReserveError>
try_reserve_exact	$RUST/src/sys_common/wtf8.rs	/^    pub fn try_reserve_exact(&mut self, additional: usize) -> Result<(), TryReserveError> {$/;"	P	implementation:Wtf8Buf	signature:(&mut self, additional: usize) -> Result<(), TryReserveError>
try_scalar	$RUST/src/os/xous/ffi.rs	/^pub(crate) fn try_scalar(connection: Connection, args: [usize; 5]) -> Result<(), Error> {$/;"	f	signature:(connection: Connection, args: [usize; 5]) -> Result<(), Error>
try_select	$RUST/src/sync/mpmc/context.rs	/^    pub fn try_select(&self, select: Selected) -> Result<(), Selected> {$/;"	P	implementation:Context	signature:(&self, select: Selected) -> Result<(), Selected>
try_select	$RUST/src/sync/mpmc/waker.rs	/^    pub(crate) fn try_select(&mut self) -> Option<Entry> {$/;"	P	implementation:Waker	signature:(&mut self) -> Option<Entry>
try_send	$RUST/src/sync/mpmc/array.rs	/^    pub(crate) fn try_send(&self, msg: T) -> Result<(), TrySendError<T>> {$/;"	P	implementation:Channel	signature:(&self, msg: T) -> Result<(), TrySendError<T>>
try_send	$RUST/src/sync/mpmc/list.rs	/^    pub(crate) fn try_send(&self, msg: T) -> Result<(), TrySendError<T>> {$/;"	P	implementation:Channel	signature:(&self, msg: T) -> Result<(), TrySendError<T>>
try_send	$RUST/src/sync/mpmc/mod.rs	/^    pub fn try_send(&self, msg: T) -> Result<(), TrySendError<T>> {$/;"	P	implementation:Sender	signature:(&self, msg: T) -> Result<(), TrySendError<T>>
try_send	$RUST/src/sync/mpmc/zero.rs	/^    pub(crate) fn try_send(&self, msg: T) -> Result<(), TrySendError<T>> {$/;"	P	implementation:Channel	signature:(&self, msg: T) -> Result<(), TrySendError<T>>
try_send	$RUST/src/sync/mpsc/mod.rs	/^    pub fn try_send(&self, t: T) -> Result<(), TrySendError<T>> {$/;"	P	implementation:SyncSender	signature:(&self, t: T) -> Result<(), TrySendError<T>>
try_send1	$RUST/src/sync/mpsc/sync_tests.rs	/^fn try_send1() {$/;"	f	signature:()
try_send2	$RUST/src/sync/mpsc/sync_tests.rs	/^fn try_send2() {$/;"	f	signature:()
try_send3	$RUST/src/sync/mpsc/sync_tests.rs	/^fn try_send3() {$/;"	f	signature:()
try_system_table	$RUST/src/os/uefi/env.rs	/^pub(crate) fn try_system_table() -> Option<NonNull<c_void>> {$/;"	f	signature:() -> Option<NonNull<c_void>>
try_task_priority	$RUST/src/sys/pal/itron/task.rs	/^pub fn try_task_priority(task: abi::ID) -> Result<abi::PRI, ItronError> {$/;"	f	signature:(task: abi::ID) -> Result<abi::PRI, ItronError>
try_wait	$RUST/src/process.rs	/^    pub fn try_wait(&mut self) -> io::Result<Option<ExitStatus>> {$/;"	P	implementation:Child	signature:(&mut self) -> io::Result<Option<ExitStatus>>
try_wait	$RUST/src/sys/pal/unix/process/process_fuchsia.rs	/^    pub fn try_wait(&mut self) -> io::Result<Option<ExitStatus>> {$/;"	P	implementation:Process	signature:(&mut self) -> io::Result<Option<ExitStatus>>
try_wait	$RUST/src/sys/pal/unix/process/process_unix.rs	/^    pub fn try_wait(&mut self) -> io::Result<Option<ExitStatus>> {$/;"	P	implementation:Process	signature:(&mut self) -> io::Result<Option<ExitStatus>>
try_wait	$RUST/src/sys/pal/unix/process/process_unsupported.rs	/^    pub fn try_wait(&mut self) -> io::Result<Option<ExitStatus>> {$/;"	P	implementation:Process	signature:(&mut self) -> io::Result<Option<ExitStatus>>
try_wait	$RUST/src/sys/pal/unix/process/process_vxworks.rs	/^    pub fn try_wait(&mut self) -> io::Result<Option<ExitStatus>> {$/;"	P	implementation:Process	signature:(&mut self) -> io::Result<Option<ExitStatus>>
try_wait	$RUST/src/sys/pal/unsupported/process.rs	/^    pub fn try_wait(&mut self) -> io::Result<Option<ExitStatus>> {$/;"	P	implementation:Process	signature:(&mut self) -> io::Result<Option<ExitStatus>>
try_wait	$RUST/src/sys/pal/windows/process.rs	/^    pub fn try_wait(&mut self) -> io::Result<Option<ExitStatus>> {$/;"	P	implementation:Process	signature:(&mut self) -> io::Result<Option<ExitStatus>>
try_with	$RUST/src/thread/local.rs	/^    pub fn try_with<F, R>(&'static self, f: F) -> Result<R, AccessError>$/;"	P	implementation:LocalKey	signature:<F, R>(&'static self, f: F) -> Result<R, AccessError> where F: FnOnce(&T) -> R,
try_write	$RUST/src/sync/rwlock.rs	/^    pub fn try_write(&self) -> TryLockResult<RwLockWriteGuard<'_, T>> {$/;"	P	implementation:RwLock	signature:(&self) -> TryLockResult<RwLockWriteGuard<'_, T>>
try_write	$RUST/src/sys/pal/sgx/rwlock.rs	/^    pub fn try_write(&self) -> bool {$/;"	P	implementation:RwLock	signature:(&self) -> bool
try_write	$RUST/src/sys/pal/solid/rwlock.rs	/^    pub fn try_write(&self) -> bool {$/;"	P	implementation:RwLock	signature:(&self) -> bool
try_write	$RUST/src/sys/pal/teeos/locks/rwlock.rs	/^    pub unsafe fn try_write(&self) -> bool {$/;"	P	implementation:RwLock	signature:(&self) -> bool
try_write	$RUST/src/sys/pal/unix/locks/futex_rwlock.rs	/^    pub fn try_write(&self) -> bool {$/;"	P	implementation:RwLock	signature:(&self) -> bool
try_write	$RUST/src/sys/pal/unix/locks/pthread_rwlock.rs	/^    pub unsafe fn try_write(&self) -> bool {$/;"	P	implementation:RwLock	signature:(&self) -> bool
try_write	$RUST/src/sys/pal/unsupported/locks/rwlock.rs	/^    pub fn try_write(&self) -> bool {$/;"	P	implementation:RwLock	signature:(&self) -> bool
try_write	$RUST/src/sys/pal/windows/locks/rwlock.rs	/^    pub fn try_write(&self) -> bool {$/;"	P	implementation:RwLock	signature:(&self) -> bool
try_write	$RUST/src/sys/pal/xous/locks/rwlock.rs	/^    pub unsafe fn try_write(&self) -> bool {$/;"	P	implementation:RwLock	signature:(&self) -> bool
trylock_works	$RUST/src/sync/remutex/tests.rs	/^fn trylock_works() {$/;"	f	signature:()
tsa	$RUST/src/net/test.rs	/^pub fn tsa<A: ToSocketAddrs>(a: A) -> Result<Vec<SocketAddr>, String> {$/;"	f	signature:<A: ToSocketAddrs>(a: A) -> Result<Vec<SocketAddr>, String>
tskatr	$RUST/src/sys/pal/itron/abi.rs	/^    pub tskatr: ATR,$/;"	m	struct:T_CTSK
tslp_tsk	$RUST/src/sys/pal/itron/abi.rs	/^    pub fn tslp_tsk(tmout: TMO) -> ER;$/;"	f	signature:(tmout: TMO) -> ER
ttl	$RUST/src/net/tcp.rs	/^    pub fn ttl(&self) -> io::Result<u32> {$/;"	P	implementation:TcpStream	signature:(&self) -> io::Result<u32>
ttl	$RUST/src/net/tcp/tests.rs	/^fn ttl() {$/;"	f	signature:()
ttl	$RUST/src/net/udp.rs	/^    pub fn ttl(&self) -> io::Result<u32> {$/;"	P	implementation:UdpSocket	signature:(&self) -> io::Result<u32>
ttl	$RUST/src/net/udp/tests.rs	/^fn ttl() {$/;"	f	signature:()
ttl	$RUST/src/sys/pal/sgx/net.rs	/^    pub fn ttl(&self) -> io::Result<u32> {$/;"	P	implementation:UdpSocket	signature:(&self) -> io::Result<u32>
ttl	$RUST/src/sys/pal/teeos/net.rs	/^    pub fn ttl(&self) -> io::Result<u32> {$/;"	P	implementation:UdpSocket	signature:(&self) -> io::Result<u32>
ttl	$RUST/src/sys/pal/unix/l4re.rs	/^        pub fn ttl(&self) -> io::Result<u32> {$/;"	P	implementation:net::UdpSocket	signature:(&self) -> io::Result<u32>
ttl	$RUST/src/sys/pal/unsupported/net.rs	/^    pub fn ttl(&self) -> io::Result<u32> {$/;"	P	implementation:UdpSocket	signature:(&self) -> io::Result<u32>
ttl	$RUST/src/sys/pal/wasi/net.rs	/^    pub fn ttl(&self) -> io::Result<u32> {$/;"	P	implementation:UdpSocket	signature:(&self) -> io::Result<u32>
ttl	$RUST/src/sys/pal/xous/net/tcplistener.rs	/^    pub fn ttl(&self) -> io::Result<u32> {$/;"	P	implementation:TcpListener	signature:(&self) -> io::Result<u32>
ttl	$RUST/src/sys/pal/xous/net/tcpstream.rs	/^    pub fn ttl(&self) -> io::Result<u32> {$/;"	P	implementation:TcpStream	signature:(&self) -> io::Result<u32>
ttl	$RUST/src/sys/pal/xous/net/udp.rs	/^    pub fn ttl(&self) -> io::Result<u32> {$/;"	P	implementation:UdpSocket	signature:(&self) -> io::Result<u32>
ttl	$RUST/src/sys_common/net.rs	/^    pub fn ttl(&self) -> io::Result<u32> {$/;"	P	implementation:UdpSocket	signature:(&self) -> io::Result<u32>
tv_nsec	$RUST/src/sys/pal/unix/time.rs	/^    tv_nsec: Nanoseconds,$/;"	m	struct:Timespec
tv_sec	$RUST/src/sys/pal/unix/time.rs	/^    tv_sec: i64,$/;"	m	struct:Timespec
tv_sec	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub tv_sec: i32,$/;"	m	struct:TIMEVAL
tv_usec	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub tv_usec: i32,$/;"	m	struct:TIMEVAL
tvos	$RUST/src/os/mod.rs	/^pub(crate) mod tvos;$/;"	n
twai_flg	$RUST/src/sys/pal/itron/abi.rs	/^    pub fn twai_flg($/;"	f	signature:( flgid: ID, waiptn: FLGPTN, wfmode: MODE, p_flgptn: *mut FLGPTN, tmout: TMO, ) -> ER
type_keyword	$RUST/src/keyword_docs.rs	/^mod type_keyword {}$/;"	n
u16	$RUST/src/net/socket_addr.rs	/^impl ToSocketAddrs for (String, u16) {$/;"	c
u16	$RUST/src/sys/pal/uefi/args.rs	/^    let lp_cmd_line = unsafe { (*protocol.as_ptr()).load_options as *const u16 };$/;"	C	function:args
u16	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^pub type PCWSTR = *const u16;$/;"	C
u16	$RUST/src/sys/pal/windows/mod.rs	/^            return Some(((c as *const u16).addr() - ptr.addr()) \/ 2);$/;"	C	function:unrolled_find_u16s
u16	$RUST/src/sys/pal/windows/os.rs	/^                let p = *cur as *const u16;$/;"	C	method:EnvIterator::next
u64_align_to_guaranteed	$RUST/src/sys/pal/sgx/abi/usercalls/alloc.rs	/^fn u64_align_to_guaranteed(ptr: *const u8, mut len: usize) -> (usize, usize, usize) {$/;"	f	signature:(ptr: *const u8, mut len: usize) -> (usize, usize, usize)
ucred	$RUST/src/os/unix/mod.rs	/^pub mod ucred;$/;"	n
ucred	$RUST/src/os/unix/net/ancillary.rs	/^    pub struct ucred;$/;"	s	module:libc
udp	$RUST/src/net/mod.rs	/^mod udp;$/;"	n
udp	$RUST/src/sys/pal/xous/net/mod.rs	/^mod udp;$/;"	n
udp_clone_smoke	$RUST/src/net/udp/tests.rs	/^fn udp_clone_smoke() {$/;"	f	signature:()
udp_clone_two_read	$RUST/src/net/udp/tests.rs	/^fn udp_clone_two_read() {$/;"	f	signature:()
udp_clone_two_write	$RUST/src/net/udp/tests.rs	/^fn udp_clone_two_write() {$/;"	f	signature:()
uefi	$RUST/src/os/mod.rs	/^pub mod uefi;$/;"	n
uid	$RUST/src/os/unix/fs.rs	/^    fn uid(&self) -> u32;$/;"	P	interface:MetadataExt	signature:(&self) -> u32
uid	$RUST/src/os/unix/process.rs	/^    fn uid(&mut self, id: UserId) -> &mut process::Command;$/;"	P	interface:CommandExt	signature:(&mut self, id: UserId) -> &mut process::Command
uid	$RUST/src/os/unix/ucred.rs	/^    pub uid: uid_t,$/;"	m	struct:UCred
uid	$RUST/src/sys/pal/unix/process/process_common.rs	/^    uid: Option<uid_t>,$/;"	m	struct:Command
uid_t	$RUST/src/os/redox/raw.rs	/^pub type uid_t = c_int;$/;"	t
uid_t	$RUST/src/os/unix/net/ancillary.rs	/^    pub type uid_t = u32;$/;"	t	module:libc
uid_t	$RUST/src/os/unix/raw.rs	/^pub type uid_t = u32;$/;"	t
uint_t	$RUST/src/sys/pal/itron/abi.rs	/^pub type uint_t = crate::os::raw::c_uint;$/;"	t
unbound	$RUST/src/os/unix/net/datagram.rs	/^    pub fn unbound() -> io::Result<UnixDatagram> {$/;"	P	implementation:UnixDatagram	signature:() -> io::Result<UnixDatagram>
unconsume	$RUST/src/io/buffered/bufreader/buffer.rs	/^    pub fn unconsume(&mut self, amt: usize) {$/;"	P	implementation:Buffer	signature:(&mut self, amt: usize)
unicode_path_exists	$RUST/src/fs/tests.rs	/^fn unicode_path_exists() {$/;"	f	signature:()
unicode_path_is_dir	$RUST/src/fs/tests.rs	/^fn unicode_path_is_dir() {$/;"	f	signature:()
unimpl	$RUST/src/sys/pal/unix/l4re.rs	/^macro_rules! unimpl {$/;"	M
unimpl	$RUST/src/sys/pal/xous/net/tcplistener.rs	/^macro_rules! unimpl {$/;"	M
unimpl	$RUST/src/sys/pal/xous/net/tcpstream.rs	/^macro_rules! unimpl {$/;"	M
unimpl	$RUST/src/sys/pal/xous/net/udp.rs	/^macro_rules! unimpl {$/;"	M
uninitialized	$RUST/src/sys/pal/sgx/abi/usercalls/alloc.rs	/^    pub fn uninitialized(n: usize) -> Self {$/;"	f	signature:(n: usize) -> Self
uninlined_slow_read_byte	$RUST/src/io/mod.rs	/^fn uninlined_slow_read_byte<R: Read>(reader: &mut R) -> Option<Result<u8>> {$/;"	f	signature:<R: Read>(reader: &mut R) -> Option<Result<u8>>
union	$RUST/src/collections/hash/set.rs	/^    pub fn union<'a>(&'a self, other: &'a HashSet<T, S>) -> Union<'a, T, S> {$/;"	f	signature:<'a>(&'a self, other: &'a HashSet<T, S>) -> Union<'a, T, S>
union_keyword	$RUST/src/keyword_docs.rs	/^mod union_keyword {}$/;"	n
unix	$RUST/src/os/mod.rs	/^pub mod unix;$/;"	n
unix_exit_statuses	$RUST/src/sys/pal/unix/process/process_common/tests.rs	/^fn unix_exit_statuses() {$/;"	f	signature:()
unix_sigpipe_attr_specified	$RUST/src/sys/pal/unix/mod.rs	/^pub(crate) fn unix_sigpipe_attr_specified() -> bool {$/;"	f	signature:() -> bool
unl_cpu	$RUST/src/sys/pal/itron/abi.rs	/^    pub fn unl_cpu() -> ER;$/;"	f	signature:() -> ER
unl_mtx	$RUST/src/sys/pal/itron/abi.rs	/^    pub fn unl_mtx(mtxid: ID) -> ER;$/;"	f	signature:(mtxid: ID) -> ER
unlink	$RUST/src/sys/pal/hermit/fs.rs	/^pub fn unlink(path: &Path) -> io::Result<()> {$/;"	f	signature:(path: &Path) -> io::Result<()>
unlink	$RUST/src/sys/pal/unix/fs.rs	/^pub fn unlink(p: &Path) -> io::Result<()> {$/;"	f	signature:(p: &Path) -> io::Result<()>
unlink	$RUST/src/sys/pal/unsupported/fs.rs	/^pub fn unlink(_p: &Path) -> io::Result<()> {$/;"	f	signature:(_p: &Path) -> io::Result<()>
unlink	$RUST/src/sys/pal/wasi/fs.rs	/^pub fn unlink(p: &Path) -> io::Result<()> {$/;"	f	signature:(p: &Path) -> io::Result<()>
unlink	$RUST/src/sys/pal/windows/fs.rs	/^pub fn unlink(p: &Path) -> io::Result<()> {$/;"	f	signature:(p: &Path) -> io::Result<()>
unlink_file	$RUST/src/sys/pal/wasi/fd.rs	/^    pub fn unlink_file(&self, path: &str) -> io::Result<()> {$/;"	P	implementation:WasiFd	signature:(&self, path: &str) -> io::Result<()>
unlink_readonly	$RUST/src/fs/tests.rs	/^fn unlink_readonly() {$/;"	f	signature:()
unlinkat	$RUST/src/sys/pal/unix/fs.rs	/^        pub unsafe fn unlinkat(dirfd: c_int, pathname: *const c_char, flags: c_int) -> c_int {$/;"	f	module:remove_dir_impl::macos_weak	signature:(dirfd: c_int, pathname: *const c_char, flags: c_int) -> c_int
unlock	$RUST/src/sync/mutex.rs	/^    pub fn unlock(guard: MutexGuard<'_, T>) {$/;"	P	implementation:Mutex	signature:(guard: MutexGuard<'_, T>)
unlock	$RUST/src/sys/pal/itron/mutex.rs	/^    pub unsafe fn unlock(&self) {$/;"	P	implementation:Mutex	signature:(&self)
unlock	$RUST/src/sys/pal/sgx/mutex.rs	/^    pub unsafe fn unlock(&self) {$/;"	P	implementation:Mutex	signature:(&self)
unlock	$RUST/src/sys/pal/sgx/rwlock.rs	/^    unsafe fn unlock(&self) {$/;"	P	implementation:RwLock	signature:(&self)
unlock	$RUST/src/sys/pal/unix/locks/fuchsia_mutex.rs	/^    pub unsafe fn unlock(&self) {$/;"	P	implementation:Mutex	signature:(&self)
unlock	$RUST/src/sys/pal/unix/locks/futex_mutex.rs	/^    pub unsafe fn unlock(&self) {$/;"	P	implementation:Mutex	signature:(&self)
unlock	$RUST/src/sys/pal/unix/locks/pthread_mutex.rs	/^    pub unsafe fn unlock(&self) {$/;"	P	implementation:Mutex	signature:(&self)
unlock	$RUST/src/sys/pal/unix/thread_parking/pthread.rs	/^unsafe fn unlock(lock: *mut libc::pthread_mutex_t) {$/;"	f	signature:(lock: *mut libc::pthread_mutex_t)
unlock	$RUST/src/sys/pal/unsupported/locks/mutex.rs	/^    pub unsafe fn unlock(&self) {$/;"	P	implementation:Mutex	signature:(&self)
unlock	$RUST/src/sys/pal/windows/locks/mutex.rs	/^    pub unsafe fn unlock(&self) {$/;"	P	implementation:Mutex	signature:(&self)
unlock	$RUST/src/sys/pal/xous/locks/mutex.rs	/^    pub unsafe fn unlock(&self) {$/;"	P	implementation:Mutex	signature:(&self)
unmap_memory	$RUST/src/os/xous/ffi.rs	/^pub(crate) unsafe fn unmap_memory<T>(range: *mut [T]) -> Result<(), Error> {$/;"	f	signature:<T>(range: *mut [T]) -> Result<(), Error>
unpark	$RUST/src/sync/mpmc/context.rs	/^    pub fn unpark(&self) {$/;"	P	implementation:Context	signature:(&self)
unpark	$RUST/src/sys/pal/itron/thread_parking.rs	/^pub fn unpark(id: ThreadId, _hint: usize) {$/;"	f	signature:(id: ThreadId, _hint: usize)
unpark	$RUST/src/sys/pal/sgx/thread_parking.rs	/^pub fn unpark(tid: ThreadId, _hint: usize) {$/;"	f	signature:(tid: ThreadId, _hint: usize)
unpark	$RUST/src/sys/pal/unix/thread_parking/darwin.rs	/^    pub fn unpark(self: Pin<&Self>) {$/;"	P	implementation:Parker	signature:(self: Pin<&Self>)
unpark	$RUST/src/sys/pal/unix/thread_parking/netbsd.rs	/^pub fn unpark(tid: ThreadId, hint: usize) {$/;"	f	signature:(tid: ThreadId, hint: usize)
unpark	$RUST/src/sys/pal/unix/thread_parking/pthread.rs	/^    pub fn unpark(self: Pin<&Self>) {$/;"	P	implementation:Parker	signature:(self: Pin<&Self>)
unpark	$RUST/src/sys/pal/unsupported/thread_parking.rs	/^    pub fn unpark(self: Pin<&Self>) {}$/;"	P	implementation:Parker	signature:(self: Pin<&Self>)
unpark	$RUST/src/sys/pal/windows/thread_parking.rs	/^    pub fn unpark(self: Pin<&Self>) {$/;"	P	implementation:Parker	signature:(self: Pin<&Self>)
unpark	$RUST/src/sys/pal/xous/thread_parking.rs	/^    pub fn unpark(self: Pin<&Self>) {$/;"	P	implementation:Parker	signature:(self: Pin<&Self>)
unpark	$RUST/src/sys_common/thread_parking/futex.rs	/^    pub fn unpark(self: Pin<&Self>) {$/;"	P	implementation:Parker	signature:(self: Pin<&Self>)
unpark	$RUST/src/sys_common/thread_parking/id.rs	/^    pub fn unpark(self: Pin<&Self>) {$/;"	P	implementation:Parker	signature:(self: Pin<&Self>)
unpark	$RUST/src/thread/mod.rs	/^    pub fn unpark(&self) {$/;"	P	implementation:Thread	signature:(&self)
unregister	$RUST/src/sync/mpmc/waker.rs	/^    pub(crate) fn unregister(&self, oper: Operation) -> Option<Entry> {$/;"	P	implementation:SyncWaker	signature:(&self, oper: Operation) -> Option<Entry>
unrolled_find_u16s	$RUST/src/sys/pal/windows/mod.rs	/^pub fn unrolled_find_u16s(needle: u16, haystack: &[u16]) -> Option<usize> {$/;"	f	signature:(needle: u16, haystack: &[u16]) -> Option<usize>
unsafe	$RUST/src/os/fd/owned.rs	/^    pub const unsafe fn borrow_raw(fd: RawFd) -> Self {$/;"	C	implementation:BorrowedFd
unsafe	$RUST/src/os/solid/io.rs	/^    pub const unsafe fn borrow_raw(fd: RawFd) -> Self {$/;"	C	implementation:BorrowedFd
unsafe	$RUST/src/os/windows/io/handle.rs	/^    pub const unsafe fn borrow_raw(handle: RawHandle) -> Self {$/;"	C	implementation:BorrowedHandle
unsafe	$RUST/src/os/windows/io/socket.rs	/^    pub const unsafe fn borrow_raw(socket: RawSocket) -> Self {$/;"	C	implementation:BorrowedSocket
unsafe	$RUST/src/thread/local.rs	/^    pub const unsafe fn new($/;"	C	implementation:LocalKey
unsafe_keyword	$RUST/src/keyword_docs.rs	/^mod unsafe_keyword {}$/;"	n
unsafe_list	$RUST/src/sys/pal/sgx/waitqueue/mod.rs	/^mod unsafe_list;$/;"	n
unsetenv	$RUST/src/sys/pal/hermit/os.rs	/^pub fn unsetenv(k: &OsStr) -> io::Result<()> {$/;"	f	signature:(k: &OsStr) -> io::Result<()>
unsetenv	$RUST/src/sys/pal/sgx/os.rs	/^pub fn unsetenv(k: &OsStr) -> io::Result<()> {$/;"	f	signature:(k: &OsStr) -> io::Result<()>
unsetenv	$RUST/src/sys/pal/solid/os.rs	/^pub fn unsetenv(n: &OsStr) -> io::Result<()> {$/;"	f	signature:(n: &OsStr) -> io::Result<()>
unsetenv	$RUST/src/sys/pal/teeos/os.rs	/^pub fn unsetenv(_: &OsStr) -> io::Result<()> {$/;"	f	signature:(_: &OsStr) -> io::Result<()>
unsetenv	$RUST/src/sys/pal/uefi/os.rs	/^pub fn unsetenv(_: &OsStr) -> io::Result<()> {$/;"	f	signature:(_: &OsStr) -> io::Result<()>
unsetenv	$RUST/src/sys/pal/unix/os.rs	/^pub fn unsetenv(n: &OsStr) -> io::Result<()> {$/;"	f	signature:(n: &OsStr) -> io::Result<()>
unsetenv	$RUST/src/sys/pal/unsupported/os.rs	/^pub fn unsetenv(_: &OsStr) -> io::Result<()> {$/;"	f	signature:(_: &OsStr) -> io::Result<()>
unsetenv	$RUST/src/sys/pal/wasi/os.rs	/^pub fn unsetenv(n: &OsStr) -> io::Result<()> {$/;"	f	signature:(n: &OsStr) -> io::Result<()>
unsetenv	$RUST/src/sys/pal/windows/os.rs	/^pub fn unsetenv(n: &OsStr) -> io::Result<()> {$/;"	f	signature:(n: &OsStr) -> io::Result<()>
unsetenv	$RUST/src/sys/pal/xous/os.rs	/^pub fn unsetenv(_: &OsStr) -> io::Result<()> {$/;"	f	signature:(_: &OsStr) -> io::Result<()>
unsetenv	$RUST/src/sys/pal/zkvm/os.rs	/^pub fn unsetenv(_: &OsStr) -> io::Result<()> {$/;"	f	signature:(_: &OsStr) -> io::Result<()>
unsupported	$RUST/src/sys/pal/hermit/mod.rs	/^pub fn unsupported<T>() -> crate::io::Result<T> {$/;"	f	signature:<T>() -> crate::io::Result<T>
unsupported	$RUST/src/sys/pal/sgx/mod.rs	/^pub fn unsupported<T>() -> crate::io::Result<T> {$/;"	f	signature:<T>() -> crate::io::Result<T>
unsupported	$RUST/src/sys/pal/solid/mod.rs	/^pub fn unsupported<T>() -> crate::io::Result<T> {$/;"	f	signature:<T>() -> crate::io::Result<T>
unsupported	$RUST/src/sys/pal/teeos/mod.rs	/^pub fn unsupported<T>() -> std_io::Result<T> {$/;"	f	signature:<T>() -> std_io::Result<T>
unsupported	$RUST/src/sys/pal/uefi/mod.rs	/^pub const fn unsupported<T>() -> std_io::Result<T> {$/;"	f	signature:<T>() -> std_io::Result<T>
unsupported	$RUST/src/sys/pal/unix/mod.rs	/^mod unsupported {$/;"	n
unsupported	$RUST/src/sys/pal/unsupported/common.rs	/^pub fn unsupported<T>() -> std_io::Result<T> {$/;"	f	signature:<T>() -> std_io::Result<T>
unsupported	$RUST/src/sys/pal/zkvm/mod.rs	/^pub fn unsupported<T>() -> std_io::Result<T> {$/;"	f	signature:<T>() -> std_io::Result<T>
unsupported_err	$RUST/src/sys/pal/hermit/mod.rs	/^pub fn unsupported_err() -> crate::io::Error {$/;"	f	signature:() -> crate::io::Error
unsupported_err	$RUST/src/sys/pal/sgx/mod.rs	/^pub fn unsupported_err() -> crate::io::Error {$/;"	f	signature:() -> crate::io::Error
unsupported_err	$RUST/src/sys/pal/solid/mod.rs	/^pub fn unsupported_err() -> crate::io::Error {$/;"	f	signature:() -> crate::io::Error
unsupported_err	$RUST/src/sys/pal/teeos/mod.rs	/^pub fn unsupported_err() -> std_io::Error {$/;"	f	signature:() -> std_io::Error
unsupported_err	$RUST/src/sys/pal/uefi/mod.rs	/^pub const fn unsupported_err() -> std_io::Error {$/;"	f	signature:() -> std_io::Error
unsupported_err	$RUST/src/sys/pal/unix/mod.rs	/^    pub fn unsupported_err() -> io::Error {$/;"	f	module:unsupported	signature:() -> io::Error
unsupported_err	$RUST/src/sys/pal/unsupported/common.rs	/^pub fn unsupported_err() -> std_io::Error {$/;"	f	signature:() -> std_io::Error
unsupported_err	$RUST/src/sys/pal/zkvm/mod.rs	/^pub fn unsupported_err() -> std_io::Error {$/;"	f	signature:() -> std_io::Error
update_hook	$RUST/src/panicking.rs	/^pub fn update_hook<F>(hook_fn: F)$/;"	f	signature:<F>(hook_fn: F) where F: Fn(&(dyn Fn(&PanicInfo<'_>) + Send + Sync + 'static), &PanicInfo<'_>) + Sync + Send + 'static,
update_memory_flags	$RUST/src/os/xous/ffi.rs	/^pub(crate) unsafe fn update_memory_flags<T>($/;"	f	signature:<T>( range: *mut [T], new_flags: MemoryFlags, ) -> Result<(), Error>
update_take	$RUST/src/sys/pal/unix/kernel_copy.rs	/^    fn update_take(&self, reader: &mut impl CopyRead) {$/;"	P	implementation:CopyResult	signature:(&self, reader: &mut impl CopyRead)
upper_bound	$RUST/src/io/buffered/bufreader.rs	/^    fn upper_bound(&self) -> Option<usize> {$/;"	P	implementation:BufReader	signature:(&self) -> Option<usize>
upper_bound	$RUST/src/io/mod.rs	/^    fn upper_bound(&self) -> Option<usize>;$/;"	P	interface:SizeHint	signature:(&self) -> Option<usize>
upper_bound	$RUST/src/io/util.rs	/^    fn upper_bound(&self) -> Option<usize> {$/;"	P	implementation:Repeat	signature:(&self) -> Option<usize>
use_keyword	$RUST/src/keyword_docs.rs	/^mod use_keyword {}$/;"	n
usercall	$RUST/src/sys/pal/sgx/abi/entry.S	/^usercall:$/;"	l
usercall	$RUST/src/sys/pal/sgx/abi/usercalls/raw.rs	/^    fn usercall(nr: NonZeroU64, p1: u64, p2: u64, abort: u64, p3: u64, p4: u64) -> UsercallRetur/;"	f	signature:(nr: NonZeroU64, p1: u64, p2: u64, abort: u64, p3: u64, p4: u64) -> UsercallReturn
usercalls	$RUST/src/os/fortanix_sgx/mod.rs	/^pub mod usercalls {$/;"	n
usercalls	$RUST/src/sys/pal/sgx/abi/mod.rs	/^pub mod usercalls;$/;"	n
utf16	$RUST/src/sys/pal/windows/process.rs	/^    utf16: Vec<u16>,$/;"	m	struct:EnvKey
utf16_to_utf8	$RUST/src/sys/pal/windows/stdio.rs	/^fn utf16_to_utf8(utf16: &[u16], utf8: &mut [u8]) -> io::Result<usize> {$/;"	f	signature:(utf16: &[u16], utf8: &mut [u8]) -> io::Result<usize>
util	$RUST/src/io/mod.rs	/^mod util;$/;"	n
utils	$RUST/src/sync/mpmc/mod.rs	/^mod utils;$/;"	n
value	$RUST/src/collections/hash/map.rs	/^    pub value: V,$/;"	m	struct:OccupiedError
value	$RUST/src/sync/mpmc/utils.rs	/^    value: T,$/;"	m	struct:CachePadded
value	$RUST/src/sync/once_lock.rs	/^    value: UnsafeCell<MaybeUninit<T>>,$/;"	m	struct:OnceLock
value	$RUST/src/sys/pal/sgx/waitqueue/spin_mutex.rs	/^    value: UnsafeCell<T>,$/;"	m	struct:SpinMutex
value	$RUST/src/sys/pal/sgx/waitqueue/unsafe_list.rs	/^    value: Option<T>,$/;"	m	struct:UnsafeListEntry
value	$RUST/src/sys_common/wtf8.rs	/^    value: u32,$/;"	m	struct:CodePoint
values	$RUST/src/collections/hash/map.rs	/^    pub fn values(&self) -> Values<'_, K, V> {$/;"	P	implementation:HashMap	signature:(&self) -> Values<'_, K, V>
values_key	$RUST/src/collections/hash/map.rs	/^    fn values_key<'a, 'new>(v: Values<'a, &'static str, u8>) -> Values<'a, &'new str, u8> {$/;"	f	function:assert_covariance	signature:<'a, 'new>(v: Values<'a, &'static str, u8>) -> Values<'a, &'new str, u8>
values_mut	$RUST/src/collections/hash/map.rs	/^    pub fn values_mut(&mut self) -> ValuesMut<'_, K, V> {$/;"	P	implementation:HashMap	signature:(&mut self) -> ValuesMut<'_, K, V>
values_val	$RUST/src/collections/hash/map.rs	/^    fn values_val<'a, 'new>(v: Values<'a, u8, &'static str>) -> Values<'a, u8, &'new str> {$/;"	f	function:assert_covariance	signature:<'a, 'new>(v: Values<'a, u8, &'static str>) -> Values<'a, u8, &'new str>
var	$RUST/src/env.rs	/^pub fn var<K: AsRef<OsStr>>(key: K) -> Result<String, VarError> {$/;"	f	signature:<K: AsRef<OsStr>>(key: K) -> Result<String, VarError>
var_os	$RUST/src/env.rs	/^pub fn var_os<K: AsRef<OsStr>>(key: K) -> Option<OsString> {$/;"	f	signature:<K: AsRef<OsStr>>(key: K) -> Option<OsString>
vars	$RUST/src/env.rs	/^pub fn vars() -> Vars {$/;"	f	signature:() -> Vars
vars	$RUST/src/sys_common/process.rs	/^    vars: BTreeMap<EnvKey, Option<OsString>>,$/;"	m	struct:CommandEnv
vars_debug	$RUST/src/env/tests.rs	/^fn vars_debug() {$/;"	f	signature:()
vars_os	$RUST/src/env.rs	/^pub fn vars_os() -> VarsOs {$/;"	f	signature:() -> VarsOs
vars_os_debug	$RUST/src/env/tests.rs	/^fn vars_os_debug() {$/;"	f	signature:()
vec	$RUST/src/sys/pal/solid/io.rs	/^    vec: iovec,$/;"	m	struct:IoSliceMut
vec	$RUST/src/sys/pal/unix/io.rs	/^    vec: iovec,$/;"	m	struct:IoSliceMut
vec	$RUST/src/sys/pal/wasi/io.rs	/^    vec: wasi::Iovec,$/;"	m	struct:IoSliceMut
vec	$RUST/src/sys/pal/windows/io.rs	/^    vec: c::WSABUF,$/;"	m	struct:IoSliceMut
vec_seek_and_write_past_usize_max	$RUST/src/io/cursor/tests.rs	/^fn vec_seek_and_write_past_usize_max() {$/;"	f	signature:()
vec_seek_before_0	$RUST/src/io/cursor/tests.rs	/^fn vec_seek_before_0() {$/;"	f	signature:()
vec_seek_past_end	$RUST/src/io/cursor/tests.rs	/^fn vec_seek_past_end() {$/;"	f	signature:()
vec_write	$RUST/src/io/cursor.rs	/^fn vec_write<A>(pos_mut: &mut u64, vec: &mut Vec<u8, A>, buf: &[u8]) -> io::Result<usize>$/;"	f	signature:<A>(pos_mut: &mut u64, vec: &mut Vec<u8, A>, buf: &[u8]) -> io::Result<usize> where A: Allocator,
vec_write_unchecked	$RUST/src/io/cursor.rs	/^unsafe fn vec_write_unchecked<A>(pos: usize, vec: &mut Vec<u8, A>, buf: &[u8]) -> usize$/;"	f	signature:<A>(pos: usize, vec: &mut Vec<u8, A>, buf: &[u8]) -> usize where A: Allocator,
vec_write_vectored	$RUST/src/io/cursor.rs	/^fn vec_write_vectored<A>($/;"	f	signature:<A>( pos_mut: &mut u64, vec: &mut Vec<u8, A>, bufs: &[IoSlice<'_>], ) -> io::Result<usize> where A: Allocator,
vectored	$RUST/src/os/unix/net/tests.rs	/^fn vectored() {$/;"	f	signature:()
vectored_handler	$RUST/src/sys/pal/windows/stack_overflow.rs	/^unsafe extern "system" fn vectored_handler(ExceptionInfo: *mut c::EXCEPTION_POINTERS) -> c::LONG/;"	f	signature:(ExceptionInfo: *mut c::EXCEPTION_POINTERS) -> c::LONG
verbatim	$RUST/src/sys/pal/windows/path/tests.rs	/^fn verbatim() {$/;"	f	signature:()
verify	$RUST/src/sys/pal/teeos/locks/condvar.rs	/^    fn verify(&self, mutex: *mut libc::pthread_mutex_t) {$/;"	P	implementation:Condvar	signature:(&self, mutex: *mut libc::pthread_mutex_t)
verify	$RUST/src/sys/pal/unix/locks/pthread_condvar.rs	/^    fn verify(&self, mutex: *mut libc::pthread_mutex_t) {$/;"	P	implementation:Condvar	signature:(&self, mutex: *mut libc::pthread_mutex_t)
very_long_recv_timeout_wont_panic	$RUST/src/sync/mpsc/tests.rs	/^fn very_long_recv_timeout_wont_panic() {$/;"	f	signature:()
vita	$RUST/src/os/mod.rs	/^pub mod vita;$/;"	n
volume_serial_number	$RUST/src/os/windows/fs.rs	/^    fn volume_serial_number(&self) -> Option<u32>;$/;"	P	interface:MetadataExt	signature:(&self) -> Option<u32>
volume_serial_number	$RUST/src/sys/pal/windows/fs.rs	/^    volume_serial_number: Option<u32>,$/;"	m	struct:FileAttr
vxworks	$RUST/src/os/mod.rs	/^pub mod vxworks;$/;"	n
wHighVersion	$RUST/src/sys/pal/windows/c.rs	/^    pub wHighVersion: u16,$/;"	m	struct:WSADATA
wHighVersion	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub wHighVersion: u16,$/;"	m	struct:WSADATA
wProcessorArchitecture	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub wProcessorArchitecture: PROCESSOR_ARCHITECTURE,$/;"	m	struct:SYSTEM_INFO_0_0
wProcessorLevel	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub wProcessorLevel: u16,$/;"	m	struct:SYSTEM_INFO
wProcessorRevision	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub wProcessorRevision: u16,$/;"	m	struct:SYSTEM_INFO
wReserved	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub wReserved: u16,$/;"	m	struct:SYSTEM_INFO_0_0
wShowWindow	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub wShowWindow: u16,$/;"	m	struct:STARTUPINFOW
wVersion	$RUST/src/sys/pal/windows/c.rs	/^    pub wVersion: u16,$/;"	m	struct:WSADATA
wVersion	$RUST/src/sys/pal/windows/c/windows_sys.rs	/^    pub wVersion: u16,$/;"	m	struct:WSADATA
wai_flg	$RUST/src/sys/pal/itron/abi.rs	/^    pub fn wai_flg(flgid: ID, waiptn: FLGPTN, wfmode: MODE, p_flgptn: *mut FLGPTN) -> ER;$/;"	f	signature:(flgid: ID, waiptn: FLGPTN, wfmode: MODE, p_flgptn: *mut FLGPTN) -> ER
wait	$RUST/src/process.rs	/^    pub fn wait(&mut self) -> io::Result<ExitStatus> {$/;"	P	implementation:Child	signature:(&mut self) -> io::Result<ExitStatus>
wait	$RUST/src/sync/barrier.rs	/^    pub fn wait(&self) -> BarrierWaitResult {$/;"	P	implementation:Barrier	signature:(&self) -> BarrierWaitResult
wait	$RUST/src/sync/condvar.rs	/^    pub fn wait<'a, T>(&self, guard: MutexGuard<'a, T>) -> LockResult<MutexGuard<'a, T>> {$/;"	P	implementation:Condvar	signature:<'a, T>(&self, guard: MutexGuard<'a, T>) -> LockResult<MutexGuard<'a, T>>
wait	$RUST/src/sys/pal/itron/condvar.rs	/^    pub unsafe fn wait(&self, mutex: &Mutex) {$/;"	P	implementation:Condvar	signature:(&self, mutex: &Mutex)
wait	$RUST/src/sys/pal/sgx/abi/usercalls/mod.rs	/^pub fn wait(event_mask: u64, mut timeout: u64) -> IoResult<u64> {$/;"	f	signature:(event_mask: u64, mut timeout: u64) -> IoResult<u64>
wait	$RUST/src/sys/pal/sgx/condvar.rs	/^    pub unsafe fn wait(&self, mutex: &Mutex) {$/;"	P	implementation:Condvar	signature:(&self, mutex: &Mutex)
wait	$RUST/src/sys/pal/sgx/thread.rs	/^        pub fn wait(self) {$/;"	P	implementation:wait_notify::Waiter	signature:(self)
wait	$RUST/src/sys/pal/sgx/waitqueue/mod.rs	/^    pub fn wait<T, F: FnOnce()>(mut guard: SpinMutexGuard<'_, WaitVariable<T>>, before_wait: F) /;"	P	implementation:WaitQueue	signature:<T, F: FnOnce()>(mut guard: SpinMutexGuard<'_, WaitVariable<T>>, before_wait: F)
wait	$RUST/src/sys/pal/teeos/locks/condvar.rs	/^    pub unsafe fn wait(&self, mutex: &Mutex) {$/;"	P	implementation:Condvar	signature:(&self, mutex: &Mutex)
wait	$RUST/src/sys/pal/unix/locks/futex_condvar.rs	/^    pub unsafe fn wait(&self, mutex: &Mutex) {$/;"	P	implementation:Condvar	signature:(&self, mutex: &Mutex)
wait	$RUST/src/sys/pal/unix/locks/pthread_condvar.rs	/^    pub unsafe fn wait(&self, mutex: &Mutex) {$/;"	P	implementation:Condvar	signature:(&self, mutex: &Mutex)
wait	$RUST/src/sys/pal/unix/process/process_fuchsia.rs	/^    pub fn wait(&mut self) -> io::Result<ExitStatus> {$/;"	P	implementation:Process	signature:(&mut self) -> io::Result<ExitStatus>
wait	$RUST/src/sys/pal/unix/process/process_unix.rs	/^    pub fn wait(&mut self) -> io::Result<ExitStatus> {$/;"	P	implementation:Process	signature:(&mut self) -> io::Result<ExitStatus>
wait	$RUST/src/sys/pal/unix/process/process_unsupported.rs	/^    pub fn wait(&mut self) -> io::Result<ExitStatus> {$/;"	P	implementation:Process	signature:(&mut self) -> io::Result<ExitStatus>
wait	$RUST/src/sys/pal/unix/process/process_vxworks.rs	/^    pub fn wait(&mut self) -> io::Result<ExitStatus> {$/;"	P	implementation:Process	signature:(&mut self) -> io::Result<ExitStatus>
wait	$RUST/src/sys/pal/unix/thread_parking/pthread.rs	/^unsafe fn wait(cond: *mut libc::pthread_cond_t, lock: *mut libc::pthread_mutex_t) {$/;"	f	signature:(cond: *mut libc::pthread_cond_t, lock: *mut libc::pthread_mutex_t)
wait	$RUST/src/sys/pal/unsupported/locks/condvar.rs	/^    pub unsafe fn wait(&self, _mutex: &Mutex) {$/;"	P	implementation:Condvar	signature:(&self, _mutex: &Mutex)
wait	$RUST/src/sys/pal/unsupported/process.rs	/^    pub fn wait(&mut self) -> io::Result<ExitStatus> {$/;"	P	implementation:Process	signature:(&mut self) -> io::Result<ExitStatus>
wait	$RUST/src/sys/pal/windows/locks/condvar.rs	/^    pub unsafe fn wait(&self, mutex: &Mutex) {$/;"	P	implementation:Condvar	signature:(&self, mutex: &Mutex)
wait	$RUST/src/sys/pal/windows/process.rs	/^    pub fn wait(&mut self) -> io::Result<ExitStatus> {$/;"	P	implementation:Process	signature:(&mut self) -> io::Result<ExitStatus>
wait	$RUST/src/sys/pal/windows/time.rs	/^    pub fn wait(&self) -> Result<(), ()> {$/;"	P	implementation:WaitableTimer	signature:(&self) -> Result<(), ()>
wait	$RUST/src/sys/pal/xous/locks/condvar.rs	/^    pub unsafe fn wait(&self, mutex: &Mutex) {$/;"	P	implementation:Condvar	signature:(&self, mutex: &Mutex)
wait	$RUST/src/sys_common/once/queue.rs	/^fn wait(state_and_queue: &AtomicPtr<Masked>, mut current_state: *mut Masked) {$/;"	f	signature:(state_and_queue: &AtomicPtr<Masked>, mut current_state: *mut Masked)
wait	$RUST/src/thread/local/tests.rs	/^    fn wait(&self) {$/;"	P	implementation:Signal	signature:(&self)
wait_checked	$RUST/src/sys/pal/sgx/abi/usercalls/mod.rs	/^    fn wait_checked(event_mask: u64, duration: Option<Duration>) -> bool {$/;"	f	function:wait_timeout	signature:(event_mask: u64, duration: Option<Duration>) -> bool
wait_for_force_to_finish	$RUST/src/sync/once/tests.rs	/^fn wait_for_force_to_finish() {$/;"	f	signature:()
wait_ms	$RUST/src/sys/pal/xous/locks/condvar.rs	/^    fn wait_ms(&self, mutex: &Mutex, ms: usize) -> bool {$/;"	P	implementation:Condvar	signature:(&self, mutex: &Mutex, ms: usize) -> bool
wait_next	$RUST/src/sync/mpmc/list.rs	/^    fn wait_next(&self) -> *mut Block<T> {$/;"	P	implementation:Block	signature:(&self) -> *mut Block<T>
wait_notify	$RUST/src/sys/pal/sgx/thread.rs	/^pub mod wait_notify {$/;"	n
wait_optional_timeout	$RUST/src/sys/pal/unix/locks/futex_condvar.rs	/^    unsafe fn wait_optional_timeout(&self, mutex: &Mutex, timeout: Option<Duration>) -> bool {$/;"	P	implementation:Condvar	signature:(&self, mutex: &Mutex, timeout: Option<Duration>) -> bool
wait_ready	$RUST/src/sync/mpmc/zero.rs	/^    fn wait_ready(&self) {$/;"	P	implementation:Packet	signature:(&self)
wait_status	$RUST/src/sys/pal/unix/process/process_unsupported.rs	/^mod wait_status;$/;"	n
wait_status	$RUST/src/sys/pal/unix/process/process_unsupported/wait_status.rs	/^    wait_status: c_int,$/;"	m	struct:ExitStatus
wait_stdin	$RUST/src/sys/pal/uefi/stdio.rs	/^fn wait_stdin(stdin: *mut r_efi::protocols::simple_text_input::Protocol) -> io::Result<()> {$/;"	f	signature:(stdin: *mut r_efi::protocols::simple_text_input::Protocol) -> io::Result<()>
wait_timeout	$RUST/src/sync/condvar.rs	/^    pub fn wait_timeout<'a, T>($/;"	P	implementation:Condvar	signature:<'a, T>( &self, guard: MutexGuard<'a, T>, dur: Duration, ) -> LockResult<(MutexGuard<'a, T>, WaitTimeoutResult)>
wait_timeout	$RUST/src/sys/pal/itron/condvar.rs	/^    pub unsafe fn wait_timeout(&self, mutex: &Mutex, dur: Duration) -> bool {$/;"	P	implementation:Condvar	signature:(&self, mutex: &Mutex, dur: Duration) -> bool
wait_timeout	$RUST/src/sys/pal/sgx/abi/usercalls/mod.rs	/^pub fn wait_timeout<F>(event_mask: u64, duration: Duration, should_wake_up: F)$/;"	f	signature:<F>(event_mask: u64, duration: Duration, should_wake_up: F) where F: Fn() -> bool,
wait_timeout	$RUST/src/sys/pal/sgx/condvar.rs	/^    pub unsafe fn wait_timeout(&self, mutex: &Mutex, dur: Duration) -> bool {$/;"	P	implementation:Condvar	signature:(&self, mutex: &Mutex, dur: Duration) -> bool
wait_timeout	$RUST/src/sys/pal/sgx/waitqueue/mod.rs	/^    pub fn wait_timeout<T, F: FnOnce()>($/;"	P	implementation:WaitQueue	signature:<T, F: FnOnce()>( lock: &SpinMutex<WaitVariable<T>>, timeout: Duration, before_wait: F, ) -> bool
wait_timeout	$RUST/src/sys/pal/teeos/locks/condvar.rs	/^    pub unsafe fn wait_timeout(&self, mutex: &Mutex, dur: Duration) -> bool {$/;"	P	implementation:Condvar	signature:(&self, mutex: &Mutex, dur: Duration) -> bool
wait_timeout	$RUST/src/sys/pal/unix/locks/futex_condvar.rs	/^    pub unsafe fn wait_timeout(&self, mutex: &Mutex, timeout: Duration) -> bool {$/;"	P	implementation:Condvar	signature:(&self, mutex: &Mutex, timeout: Duration) -> bool
wait_timeout	$RUST/src/sys/pal/unix/locks/pthread_condvar.rs	/^    pub unsafe fn wait_timeout(&self, mutex: &Mutex, dur: Duration) -> bool {$/;"	P	implementation:Condvar	signature:(&self, mutex: &Mutex, dur: Duration) -> bool
wait_timeout	$RUST/src/sys/pal/unix/thread_parking/pthread.rs	/^unsafe fn wait_timeout($/;"	f	signature:( cond: *mut libc::pthread_cond_t, lock: *mut libc::pthread_mutex_t, dur: Duration, )
wait_timeout	$RUST/src/sys/pal/unsupported/locks/condvar.rs	/^    pub unsafe fn wait_timeout(&self, _mutex: &Mutex, _dur: Duration) -> bool {$/;"	P	implementation:Condvar	signature:(&self, _mutex: &Mutex, _dur: Duration) -> bool
wait_timeout	$RUST/src/sys/pal/windows/locks/condvar.rs	/^    pub unsafe fn wait_timeout(&self, mutex: &Mutex, dur: Duration) -> bool {$/;"	P	implementation:Condvar	signature:(&self, mutex: &Mutex, dur: Duration) -> bool
wait_timeout	$RUST/src/sys/pal/xous/locks/condvar.rs	/^    pub unsafe fn wait_timeout(&self, mutex: &Mutex, dur: Duration) -> bool {$/;"	P	implementation:Condvar	signature:(&self, mutex: &Mutex, dur: Duration) -> bool
wait_timeout_ms	$RUST/src/sync/condvar.rs	/^    pub fn wait_timeout_ms<'a, T>($/;"	P	implementation:Condvar	signature:<'a, T>( &self, guard: MutexGuard<'a, T>, ms: u32, ) -> LockResult<(MutexGuard<'a, T>, bool)>
wait_timeout_wait	$RUST/src/sync/condvar/tests.rs	/^fn wait_timeout_wait() {$/;"	f	signature:()
wait_timeout_wake	$RUST/src/sync/condvar/tests.rs	/^fn wait_timeout_wake() {$/;"	f	signature:()
wait_timeout_while	$RUST/src/sync/condvar.rs	/^    pub fn wait_timeout_while<'a, T, F>($/;"	P	implementation:Condvar	signature:<'a, T, F>( &self, mut guard: MutexGuard<'a, T>, dur: Duration, mut condition: F, ) -> LockResult<(MutexGuard<'a, T>, WaitTimeoutResult)> where F: FnMut(&mut T) -> bool,
wait_timeout_while_instant_satisfy	$RUST/src/sync/condvar/tests.rs	/^fn wait_timeout_while_instant_satisfy() {$/;"	f	signature:()
wait_timeout_while_wait	$RUST/src/sync/condvar/tests.rs	/^fn wait_timeout_while_wait() {$/;"	f	signature:()
wait_timeout_while_wake	$RUST/src/sync/condvar/tests.rs	/^fn wait_timeout_while_wake() {$/;"	f	signature:()
wait_until	$RUST/src/sync/mpmc/context.rs	/^    pub fn wait_until(&self, deadline: Option<Instant>) -> Selected {$/;"	P	implementation:Context	signature:(&self, deadline: Option<Instant>) -> Selected
wait_while	$RUST/src/sync/condvar.rs	/^    pub fn wait_while<'a, T, F>($/;"	P	implementation:Condvar	signature:<'a, T, F>( &self, mut guard: MutexGuard<'a, T>, mut condition: F, ) -> LockResult<MutexGuard<'a, T>> where F: FnMut(&mut T) -> bool,
wait_while	$RUST/src/sync/condvar/tests.rs	/^fn wait_while() {$/;"	f	signature:()
wait_with_output	$RUST/src/process.rs	/^    pub fn wait_with_output(mut self) -> io::Result<Output> {$/;"	P	implementation:Child	signature:(mut self) -> io::Result<Output>
wait_with_output	$RUST/src/sys_common/process.rs	/^pub fn wait_with_output($/;"	f	signature:( mut process: Process, mut pipes: StdioPipes, ) -> io::Result<(ExitStatus, Vec<u8>, Vec<u8>)>
wait_write	$RUST/src/sync/mpmc/list.rs	/^    fn wait_write(&self) {$/;"	P	implementation:Slot	signature:(&self)
waiter_queue	$RUST/src/sys/pal/itron/condvar.rs	/^mod waiter_queue {$/;"	n
waiters	$RUST/src/sys/pal/itron/condvar.rs	/^    waiters: SpinMutex<waiter_queue::WaiterQueue>,$/;"	m	struct:Condvar
waitqueue	$RUST/src/sys/pal/sgx/mod.rs	/^mod waitqueue;$/;"	n
wake	$RUST/src/sys/pal/sgx/waitqueue/mod.rs	/^    wake: bool,$/;"	m	struct:WaitEntry
wake	$RUST/src/sys/pal/unix/locks/fuchsia_mutex.rs	/^    fn wake(&self) {$/;"	P	implementation:Mutex	signature:(&self)
wake	$RUST/src/sys/pal/unix/locks/futex_mutex.rs	/^    fn wake(&self) {$/;"	P	implementation:Mutex	signature:(&self)
wake_writer	$RUST/src/sys/pal/unix/locks/futex_rwlock.rs	/^    fn wake_writer(&self) -> bool {$/;"	P	implementation:RwLock	signature:(&self) -> bool
wake_writer_or_readers	$RUST/src/sys/pal/unix/locks/futex_rwlock.rs	/^    fn wake_writer_or_readers(&self, mut state: u32) {$/;"	P	implementation:RwLock	signature:(&self, mut state: u32)
waker	$RUST/src/sync/mpmc/mod.rs	/^mod waker;$/;"	n
wasi	$RUST/src/os/mod.rs	/^pub mod wasi;$/;"	n
wasi	$RUST/src/sys/pal/wasi/fs.rs	/^            let dirent = unsafe { ptr::read_unaligned(dirent.as_ptr() as *const wasi::Dirent) };$/;"	C	method:ReadDir::next
watchos	$RUST/src/os/mod.rs	/^pub(crate) mod watchos;$/;"	n
weak	$RUST/src/sys/pal/unix/mod.rs	/^pub mod weak;$/;"	n
weak_ptr	$RUST/src/sys/pal/unix/weak.rs	/^    weak_ptr: Option<F>,$/;"	m	struct:ExternWeak
where_keyword	$RUST/src/keyword_docs.rs	/^mod where_keyword {}$/;"	n
while_keyword	$RUST/src/keyword_docs.rs	/^mod while_keyword {}$/;"	n
whitespace_behavior	$RUST/src/sys/pal/windows/args/tests.rs	/^fn whitespace_behavior() {$/;"	f	signature:()
win32_delete	$RUST/src/sys/pal/windows/fs.rs	/^    fn win32_delete(&self) -> io::Result<()> {$/;"	P	implementation:File	signature:(&self) -> io::Result<()>
win32_size_of	$RUST/src/sys/pal/windows/api.rs	/^const fn win32_size_of<T: Sized>() -> u32 {$/;"	f	signature:<T: Sized>() -> u32
windows	$RUST/src/os/mod.rs	/^pub mod windows;$/;"	n
windows_sys	$RUST/src/sys/pal/windows/c.rs	/^mod windows_sys;$/;"	n
windows_unix_socket_exists	$RUST/src/fs/tests.rs	/^fn windows_unix_socket_exists() {$/;"	f	signature:()
with	$RUST/src/sync/mpmc/context.rs	/^    pub fn with<F, R>(f: F) -> R$/;"	P	implementation:Context	signature:<F, R>(f: F) -> R where F: FnOnce(&Context) -> R,
with	$RUST/src/sys_common/thread_info.rs	/^    fn with<R, F>(f: F) -> Option<R>$/;"	P	implementation:ThreadInfo	signature:<R, F>(f: F) -> Option<R> where F: FnOnce(&Thread, &OnceCell<Guard>) -> R,
with	$RUST/src/thread/local.rs	/^    pub fn with<F, R>(&'static self, f: F) -> R$/;"	P	implementation:LocalKey	signature:<F, R>(&'static self, f: F) -> R where F: FnOnce(&T) -> R,
with_borrow	$RUST/src/thread/local.rs	/^    pub fn with_borrow<F, R>(&'static self, f: F) -> R$/;"	P	implementation:LocalKey	signature:<F, R>(&'static self, f: F) -> R where F: FnOnce(&T) -> R,
with_borrow_mut	$RUST/src/thread/local.rs	/^    pub fn with_borrow_mut<F, R>(&'static self, f: F) -> R$/;"	P	implementation:LocalKey	signature:<F, R>(&'static self, f: F) -> R where F: FnOnce(&mut T) -> R,
with_capacity	$RUST/src/collections/hash/map.rs	/^    pub fn with_capacity(capacity: usize) -> HashMap<K, V, RandomState> {$/;"	P	implementation:HashMap	signature:(capacity: usize) -> HashMap<K, V, RandomState>
with_capacity	$RUST/src/collections/hash/set.rs	/^    pub fn with_capacity(capacity: usize) -> HashSet<T, RandomState> {$/;"	P	implementation:HashSet	signature:(capacity: usize) -> HashSet<T, RandomState>
with_capacity	$RUST/src/ffi/os_str.rs	/^    pub fn with_capacity(capacity: usize) -> OsString {$/;"	P	implementation:OsString	signature:(capacity: usize) -> OsString
with_capacity	$RUST/src/io/buffered/bufreader.rs	/^    pub fn with_capacity(capacity: usize, inner: R) -> BufReader<R> {$/;"	P	implementation:BufReader	signature:(capacity: usize, inner: R) -> BufReader<R>
with_capacity	$RUST/src/io/buffered/bufreader/buffer.rs	/^    pub fn with_capacity(capacity: usize) -> Self {$/;"	P	implementation:Buffer	signature:(capacity: usize) -> Self
with_capacity	$RUST/src/io/buffered/bufwriter.rs	/^    pub fn with_capacity(capacity: usize, inner: W) -> BufWriter<W> {$/;"	P	implementation:BufWriter	signature:(capacity: usize, inner: W) -> BufWriter<W>
with_capacity	$RUST/src/io/buffered/linewriter.rs	/^    pub fn with_capacity(capacity: usize, inner: W) -> LineWriter<W> {$/;"	P	implementation:LineWriter	signature:(capacity: usize, inner: W) -> LineWriter<W>
with_capacity	$RUST/src/path.rs	/^    pub fn with_capacity(capacity: usize) -> PathBuf {$/;"	P	implementation:PathBuf	signature:(capacity: usize) -> PathBuf
with_capacity	$RUST/src/sync/mpmc/array.rs	/^    pub(crate) fn with_capacity(cap: usize) -> Self {$/;"	P	implementation:Channel	signature:(cap: usize) -> Self
with_capacity	$RUST/src/sys/os_str/bytes.rs	/^    pub fn with_capacity(capacity: usize) -> Buf {$/;"	P	implementation:Buf	signature:(capacity: usize) -> Buf
with_capacity	$RUST/src/sys/os_str/wtf8.rs	/^    pub fn with_capacity(capacity: usize) -> Buf {$/;"	P	implementation:Buf	signature:(capacity: usize) -> Buf
with_capacity	$RUST/src/sys/pal/unix/process/process_common.rs	/^    pub fn with_capacity(capacity: usize) -> Self {$/;"	P	implementation:CStringArray	signature:(capacity: usize) -> Self
with_capacity	$RUST/src/sys_common/wtf8.rs	/^    pub fn with_capacity(capacity: usize) -> Wtf8Buf {$/;"	P	implementation:Wtf8Buf	signature:(capacity: usize) -> Wtf8Buf
with_capacity_and_hasher	$RUST/src/collections/hash/map.rs	/^    pub fn with_capacity_and_hasher(capacity: usize, hasher: S) -> HashMap<K, V, S> {$/;"	P	implementation:HashMap	signature:(capacity: usize, hasher: S) -> HashMap<K, V, S>
with_capacity_and_hasher	$RUST/src/collections/hash/set.rs	/^    pub fn with_capacity_and_hasher(capacity: usize, hasher: S) -> HashSet<T, S> {$/;"	P	implementation:HashSet	signature:(capacity: usize, hasher: S) -> HashSet<T, S>
with_extension	$RUST/src/path.rs	/^    pub fn with_extension<S: AsRef<OsStr>>(&self, extension: S) -> PathBuf {$/;"	P	implementation:Path	signature:<S: AsRef<OsStr>>(&self, extension: S) -> PathBuf
with_file_name	$RUST/src/path.rs	/^    pub fn with_file_name<S: AsRef<OsStr>>(&self, file_name: S) -> PathBuf {$/;"	P	implementation:Path	signature:<S: AsRef<OsStr>>(&self, file_name: S) -> PathBuf
with_hasher	$RUST/src/collections/hash/map.rs	/^    pub const fn with_hasher(hash_builder: S) -> HashMap<K, V, S> {$/;"	P	implementation:HashMap	signature:(hash_builder: S) -> HashMap<K, V, S>
with_hasher	$RUST/src/collections/hash/set.rs	/^    pub const fn with_hasher(hasher: S) -> HashSet<T, S> {$/;"	P	implementation:HashSet	signature:(hasher: S) -> HashSet<T, S>
with_locked	$RUST/src/sys/pal/itron/spin.rs	/^    pub fn with_locked<R>(&self, f: impl FnOnce(&mut T) -> R) -> R {$/;"	P	implementation:SpinMutex	signature:<R>(&self, f: impl FnOnce(&mut T) -> R) -> R
with_std_fd	$RUST/src/sys/pal/sgx/stdio.rs	/^fn with_std_fd<F: FnOnce(&FileDesc) -> R, R>(fd: abi::Fd, f: F) -> R {$/;"	f	signature:<F: FnOnce(&FileDesc) -> R, R>(fd: abi::Fd, f: F) -> R
with_tmos	$RUST/src/sys/pal/itron/time.rs	/^pub fn with_tmos(dur: Duration, mut f: impl FnMut(abi::TMO) -> abi::ER) -> abi::ER {$/;"	f	signature:(dur: Duration, mut f: impl FnMut(abi::TMO) -> abi::ER) -> abi::ER
with_tmos_strong	$RUST/src/sys/pal/itron/time.rs	/^pub fn with_tmos_strong(dur: Duration, mut f: impl FnMut(abi::TMO) -> abi::ER) -> abi::ER {$/;"	f	signature:(dur: Duration, mut f: impl FnMut(abi::TMO) -> abi::ER) -> abi::ER
write	$RUST/src/fs.rs	/^pub fn write<P: AsRef<Path>, C: AsRef<[u8]>>(path: P, contents: C) -> io::Result<()> {$/;"	f	signature:<P: AsRef<Path>, C: AsRef<[u8]>>(path: P, contents: C) -> io::Result<()>
write	$RUST/src/hash/random.rs	/^    fn write(&mut self, msg: &[u8]) {$/;"	P	implementation:DefaultHasher	signature:(&mut self, msg: &[u8])
write	$RUST/src/io/buffered/bufwriter.rs	/^    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {$/;"	P	implementation:BufWriter	signature:(&mut self, buf: &[u8]) -> io::Result<usize>
write	$RUST/src/io/buffered/linewriter.rs	/^    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {$/;"	P	implementation:LineWriter	signature:(&mut self, buf: &[u8]) -> io::Result<usize>
write	$RUST/src/io/buffered/linewritershim.rs	/^    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {$/;"	P	implementation:LineWriterShim	signature:(&mut self, buf: &[u8]) -> io::Result<usize>
write	$RUST/src/io/buffered/tests.rs	/^    fn write(&mut self, data: &[u8]) -> io::Result<usize> {$/;"	P	implementation:ProgrammableSink	signature:(&mut self, data: &[u8]) -> io::Result<usize>
write	$RUST/src/io/copy/tests.rs	/^    fn write(&mut self, buf: &[u8]) -> Result<usize> {$/;"	P	implementation:WriteObserver	signature:(&mut self, buf: &[u8]) -> Result<usize>
write	$RUST/src/io/cursor.rs	/^    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {$/;"	f	signature:(&mut self, buf: &[u8]) -> io::Result<usize>
write	$RUST/src/io/impls.rs	/^    fn write(&mut self, data: &[u8]) -> io::Result<usize> {$/;"	P	implementation:u8	signature:(&mut self, data: &[u8]) -> io::Result<usize>
write	$RUST/src/io/mod.rs	/^    fn write(&mut self, buf: &[u8]) -> Result<usize>;$/;"	P	interface:Write	signature:(&mut self, buf: &[u8]) -> Result<usize>
write	$RUST/src/io/stdio.rs	/^    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {$/;"	P	implementation:StdoutRaw	signature:(&mut self, buf: &[u8]) -> io::Result<usize>
write	$RUST/src/io/tests.rs	/^    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {$/;"	P	implementation:TestWriter	signature:(&mut self, buf: &[u8]) -> io::Result<usize>
write	$RUST/src/io/util.rs	/^    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {$/;"	P	implementation:Sink	signature:(&mut self, buf: &[u8]) -> io::Result<usize>
write	$RUST/src/net/tcp.rs	/^    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {$/;"	P	implementation:TcpStream	signature:(&mut self, buf: &[u8]) -> io::Result<usize>
write	$RUST/src/os/unix/net/stream.rs	/^    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {$/;"	P	implementation:UnixStream	signature:(&mut self, buf: &[u8]) -> io::Result<usize>
write	$RUST/src/process.rs	/^    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {$/;"	P	implementation:ChildStdin	signature:(&mut self, buf: &[u8]) -> io::Result<usize>
write	$RUST/src/sync/mpmc/array.rs	/^    pub(crate) unsafe fn write(&self, token: &mut Token, msg: T) -> Result<(), T> {$/;"	P	implementation:Channel	signature:(&self, token: &mut Token, msg: T) -> Result<(), T>
write	$RUST/src/sync/mpmc/list.rs	/^    pub(crate) unsafe fn write(&self, token: &mut Token, msg: T) -> Result<(), T> {$/;"	P	implementation:Channel	signature:(&self, token: &mut Token, msg: T) -> Result<(), T>
write	$RUST/src/sync/mpmc/zero.rs	/^    pub(crate) unsafe fn write(&self, token: &mut Token, msg: T) -> Result<(), T> {$/;"	P	implementation:Channel	signature:(&self, token: &mut Token, msg: T) -> Result<(), T>
write	$RUST/src/sync/rwlock.rs	/^    pub fn write(&self) -> LockResult<RwLockWriteGuard<'_, T>> {$/;"	P	implementation:RwLock	signature:(&self) -> LockResult<RwLockWriteGuard<'_, T>>
write	$RUST/src/sys/pal/hermit/fd.rs	/^    pub fn write(&self, buf: &[u8]) -> io::Result<usize> {$/;"	P	implementation:FileDesc	signature:(&self, buf: &[u8]) -> io::Result<usize>
write	$RUST/src/sys/pal/hermit/fs.rs	/^    write: bool,$/;"	m	struct:OpenOptions
write	$RUST/src/sys/pal/hermit/net.rs	/^    pub fn write(&self, buf: &[u8]) -> io::Result<usize> {$/;"	P	implementation:Socket	signature:(&self, buf: &[u8]) -> io::Result<usize>
write	$RUST/src/sys/pal/hermit/stdio.rs	/^    fn write(&mut self, data: &[u8]) -> io::Result<usize> {$/;"	P	implementation:Stdout	signature:(&mut self, data: &[u8]) -> io::Result<usize>
write	$RUST/src/sys/pal/sgx/abi/panic.rs	/^    fn write(&mut self, src: &[u8]) -> io::Result<usize> {$/;"	P	implementation:SgxPanicOutput	signature:(&mut self, src: &[u8]) -> io::Result<usize>
write	$RUST/src/sys/pal/sgx/abi/usercalls/mod.rs	/^pub fn write(fd: Fd, bufs: &[IoSlice<'_>]) -> IoResult<usize> {$/;"	f	signature:(fd: Fd, bufs: &[IoSlice<'_>]) -> IoResult<usize>
write	$RUST/src/sys/pal/sgx/fd.rs	/^    pub fn write(&self, buf: &[u8]) -> io::Result<usize> {$/;"	P	implementation:FileDesc	signature:(&self, buf: &[u8]) -> io::Result<usize>
write	$RUST/src/sys/pal/sgx/net.rs	/^    pub fn write(&self, buf: &[u8]) -> io::Result<usize> {$/;"	P	implementation:TcpStream	signature:(&self, buf: &[u8]) -> io::Result<usize>
write	$RUST/src/sys/pal/sgx/rwlock.rs	/^    pub fn write(&self) {$/;"	P	implementation:RwLock	signature:(&self)
write	$RUST/src/sys/pal/sgx/stdio.rs	/^    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {$/;"	P	implementation:Stdout	signature:(&mut self, buf: &[u8]) -> io::Result<usize>
write	$RUST/src/sys/pal/solid/abi/sockets.rs	/^    pub fn write(s: c_int, mem: *const c_void, len: size_t) -> ssize_t;$/;"	f	signature:(s: c_int, mem: *const c_void, len: size_t) -> ssize_t
write	$RUST/src/sys/pal/solid/fs.rs	/^    write: bool,$/;"	m	struct:OpenOptions
write	$RUST/src/sys/pal/solid/net.rs	/^    pub fn write(&self, buf: &[u8]) -> io::Result<usize> {$/;"	P	implementation:Socket	signature:(&self, buf: &[u8]) -> io::Result<usize>
write	$RUST/src/sys/pal/solid/rwlock.rs	/^    pub fn write(&self) {$/;"	P	implementation:RwLock	signature:(&self)
write	$RUST/src/sys/pal/solid/stdio.rs	/^    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {$/;"	P	implementation:Stdout	signature:(&mut self, buf: &[u8]) -> io::Result<usize>
write	$RUST/src/sys/pal/teeos/locks/rwlock.rs	/^    pub fn write(&self) {$/;"	P	implementation:RwLock	signature:(&self)
write	$RUST/src/sys/pal/teeos/net.rs	/^    pub fn write(&self, _: &[u8]) -> io::Result<usize> {$/;"	P	implementation:TcpStream	signature:(&self, _: &[u8]) -> io::Result<usize>
write	$RUST/src/sys/pal/teeos/stdio.rs	/^    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {$/;"	P	implementation:Stdout	signature:(&mut self, buf: &[u8]) -> io::Result<usize>
write	$RUST/src/sys/pal/uefi/stdio.rs	/^fn write($/;"	f	signature:( protocol: *mut r_efi::protocols::simple_text_output::Protocol, buf: &[u8], ) -> io::Result<usize>
write	$RUST/src/sys/pal/unix/fd.rs	/^    pub fn write(&self, buf: &[u8]) -> io::Result<usize> {$/;"	P	implementation:FileDesc	signature:(&self, buf: &[u8]) -> io::Result<usize>
write	$RUST/src/sys/pal/unix/fs.rs	/^    write: bool,$/;"	m	struct:OpenOptions
write	$RUST/src/sys/pal/unix/kernel_copy.rs	/^    write: &'b mut W,$/;"	m	struct:Copier
write	$RUST/src/sys/pal/unix/l4re.rs	/^        pub fn write(&self, _: &[u8]) -> io::Result<usize> {$/;"	P	implementation:net::TcpStream	signature:(&self, _: &[u8]) -> io::Result<usize>
write	$RUST/src/sys/pal/unix/locks/futex_rwlock.rs	/^    pub fn write(&self) {$/;"	P	implementation:RwLock	signature:(&self)
write	$RUST/src/sys/pal/unix/locks/pthread_rwlock.rs	/^    pub fn write(&self) {$/;"	P	implementation:RwLock	signature:(&self)
write	$RUST/src/sys/pal/unix/net.rs	/^    pub fn write(&self, buf: &[u8]) -> io::Result<usize> {$/;"	P	implementation:Socket	signature:(&self, buf: &[u8]) -> io::Result<usize>
write	$RUST/src/sys/pal/unix/pipe.rs	/^    pub fn write(&self, buf: &[u8]) -> io::Result<usize> {$/;"	P	implementation:AnonPipe	signature:(&self, buf: &[u8]) -> io::Result<usize>
write	$RUST/src/sys/pal/unix/stdio.rs	/^    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {$/;"	P	implementation:Stdout	signature:(&mut self, buf: &[u8]) -> io::Result<usize>
write	$RUST/src/sys/pal/unsupported/fs.rs	/^    pub fn write(&self, _buf: &[u8]) -> io::Result<usize> {$/;"	P	implementation:File	signature:(&self, _buf: &[u8]) -> io::Result<usize>
write	$RUST/src/sys/pal/unsupported/locks/rwlock.rs	/^    pub fn write(&self) {$/;"	P	implementation:RwLock	signature:(&self)
write	$RUST/src/sys/pal/unsupported/net.rs	/^    pub fn write(&self, _: &[u8]) -> io::Result<usize> {$/;"	P	implementation:TcpStream	signature:(&self, _: &[u8]) -> io::Result<usize>
write	$RUST/src/sys/pal/unsupported/pipe.rs	/^    pub fn write(&self, _buf: &[u8]) -> io::Result<usize> {$/;"	P	implementation:AnonPipe	signature:(&self, _buf: &[u8]) -> io::Result<usize>
write	$RUST/src/sys/pal/unsupported/stdio.rs	/^    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {$/;"	P	implementation:Stdout	signature:(&mut self, buf: &[u8]) -> io::Result<usize>
write	$RUST/src/sys/pal/wasi/fd.rs	/^    pub fn write(&self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {$/;"	P	implementation:WasiFd	signature:(&self, bufs: &[IoSlice<'_>]) -> io::Result<usize>
write	$RUST/src/sys/pal/wasi/fs.rs	/^    write: bool,$/;"	m	struct:OpenOptions
write	$RUST/src/sys/pal/wasi/net.rs	/^    pub fn write(&self, buf: &[u8]) -> io::Result<usize> {$/;"	P	implementation:TcpStream	signature:(&self, buf: &[u8]) -> io::Result<usize>
write	$RUST/src/sys/pal/wasi/stdio.rs	/^    fn write(&mut self, data: &[u8]) -> io::Result<usize> {$/;"	P	implementation:Stdout	signature:(&mut self, data: &[u8]) -> io::Result<usize>
write	$RUST/src/sys/pal/windows/fs.rs	/^    write: bool,$/;"	m	struct:OpenOptions
write	$RUST/src/sys/pal/windows/handle.rs	/^    pub fn write(&self, buf: &[u8]) -> io::Result<usize> {$/;"	P	implementation:Handle	signature:(&self, buf: &[u8]) -> io::Result<usize>
write	$RUST/src/sys/pal/windows/locks/rwlock.rs	/^    pub fn write(&self) {$/;"	P	implementation:RwLock	signature:(&self)
write	$RUST/src/sys/pal/windows/pipe.rs	/^    pub fn write(&self, buf: &[u8]) -> io::Result<usize> {$/;"	P	implementation:AnonPipe	signature:(&self, buf: &[u8]) -> io::Result<usize>
write	$RUST/src/sys/pal/windows/stdio.rs	/^fn write($/;"	f	signature:( handle_id: c::DWORD, data: &[u8], incomplete_utf8: &mut IncompleteUtf8, ) -> io::Result<usize>
write	$RUST/src/sys/pal/xous/locks/rwlock.rs	/^    pub unsafe fn write(&self) {$/;"	P	implementation:RwLock	signature:(&self)
write	$RUST/src/sys/pal/xous/net/tcpstream.rs	/^    pub fn write(&self, buf: &[u8]) -> io::Result<usize> {$/;"	P	implementation:TcpStream	signature:(&self, buf: &[u8]) -> io::Result<usize>
write	$RUST/src/sys/pal/xous/stdio.rs	/^    fn write(&mut self, s: &[u8]) -> core::result::Result<usize, io::Error> {$/;"	P	implementation:PanicWriter	signature:(&mut self, s: &[u8]) -> core::result::Result<usize, io::Error>
write	$RUST/src/sys/pal/zkvm/stdio.rs	/^    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {$/;"	P	implementation:Stdout	signature:(&mut self, buf: &[u8]) -> io::Result<usize>
write	$RUST/src/sys_common/net.rs	/^    pub fn write(&self, buf: &[u8]) -> io::Result<usize> {$/;"	P	implementation:TcpStream	signature:(&self, buf: &[u8]) -> io::Result<usize>
write_all	$RUST/src/io/buffered/bufwriter.rs	/^    fn write_all(&mut self, buf: &[u8]) -> io::Result<()> {$/;"	P	implementation:BufWriter	signature:(&mut self, buf: &[u8]) -> io::Result<()>
write_all	$RUST/src/io/buffered/linewriter.rs	/^    fn write_all(&mut self, buf: &[u8]) -> io::Result<()> {$/;"	P	implementation:LineWriter	signature:(&mut self, buf: &[u8]) -> io::Result<()>
write_all	$RUST/src/io/buffered/linewritershim.rs	/^    fn write_all(&mut self, buf: &[u8]) -> io::Result<()> {$/;"	P	implementation:LineWriterShim	signature:(&mut self, buf: &[u8]) -> io::Result<()>
write_all	$RUST/src/io/impls.rs	/^    fn write_all(&mut self, data: &[u8]) -> io::Result<()> {$/;"	P	implementation:u8	signature:(&mut self, data: &[u8]) -> io::Result<()>
write_all	$RUST/src/io/mod.rs	/^    fn write_all(&mut self, mut buf: &[u8]) -> Result<()> {$/;"	P	interface:Write	signature:(&mut self, mut buf: &[u8]) -> Result<()>
write_all	$RUST/src/io/stdio.rs	/^    fn write_all(&mut self, buf: &[u8]) -> io::Result<()> {$/;"	P	implementation:StdoutRaw	signature:(&mut self, buf: &[u8]) -> io::Result<()>
write_all_at	$RUST/src/os/unix/fs.rs	/^    fn write_all_at(&self, mut buf: &[u8], mut offset: u64) -> io::Result<()> {$/;"	P	interface:FileExt	signature:(&self, mut buf: &[u8], mut offset: u64) -> io::Result<()>
write_all_at	$RUST/src/os/wasi/fs.rs	/^    fn write_all_at(&self, mut buf: &[u8], mut offset: u64) -> io::Result<()> {$/;"	P	interface:FileExt	signature:(&self, mut buf: &[u8], mut offset: u64) -> io::Result<()>
write_all_cold	$RUST/src/io/buffered/bufwriter.rs	/^    fn write_all_cold(&mut self, buf: &[u8]) -> io::Result<()> {$/;"	P	implementation:BufWriter	signature:(&mut self, buf: &[u8]) -> io::Result<()>
write_all_vectored	$RUST/src/io/buffered/linewriter.rs	/^    fn write_all_vectored(&mut self, bufs: &mut [IoSlice<'_>]) -> io::Result<()> {$/;"	P	implementation:LineWriter	signature:(&mut self, bufs: &mut [IoSlice<'_>]) -> io::Result<()>
write_all_vectored	$RUST/src/io/mod.rs	/^    fn write_all_vectored(&mut self, mut bufs: &mut [IoSlice<'_>]) -> Result<()> {$/;"	P	interface:Write	signature:(&mut self, mut bufs: &mut [IoSlice<'_>]) -> Result<()>
write_all_vectored	$RUST/src/io/stdio.rs	/^    fn write_all_vectored(&mut self, bufs: &mut [IoSlice<'_>]) -> io::Result<()> {$/;"	P	implementation:StdoutRaw	signature:(&mut self, bufs: &mut [IoSlice<'_>]) -> io::Result<()>
write_at	$RUST/src/os/unix/fs.rs	/^    fn write_at(&self, buf: &[u8], offset: u64) -> io::Result<usize>;$/;"	P	interface:FileExt	signature:(&self, buf: &[u8], offset: u64) -> io::Result<usize>
write_at	$RUST/src/os/wasi/fs.rs	/^    fn write_at(&self, buf: &[u8], offset: u64) -> io::Result<usize> {$/;"	P	interface:FileExt	signature:(&self, buf: &[u8], offset: u64) -> io::Result<usize>
write_at	$RUST/src/sys/pal/unix/fd.rs	/^    pub fn write_at(&self, buf: &[u8], offset: u64) -> io::Result<usize> {$/;"	P	implementation:FileDesc	signature:(&self, buf: &[u8], offset: u64) -> io::Result<usize>
write_at	$RUST/src/sys/pal/unix/fs.rs	/^    pub fn write_at(&self, buf: &[u8], offset: u64) -> io::Result<usize> {$/;"	P	implementation:File	signature:(&self, buf: &[u8], offset: u64) -> io::Result<usize>
write_at	$RUST/src/sys/pal/windows/fs.rs	/^    pub fn write_at(&self, buf: &[u8], offset: u64) -> io::Result<usize> {$/;"	P	implementation:File	signature:(&self, buf: &[u8], offset: u64) -> io::Result<usize>
write_at	$RUST/src/sys/pal/windows/handle.rs	/^    pub fn write_at(&self, buf: &[u8], offset: u64) -> io::Result<usize> {$/;"	P	implementation:Handle	signature:(&self, buf: &[u8], offset: u64) -> io::Result<usize>
write_bytewise_to_userspace	$RUST/src/sys/pal/sgx/abi/usercalls/alloc.rs	/^    unsafe fn write_bytewise_to_userspace(src: *const u8, dst: *mut u8, len: usize) {$/;"	f	function:copy_to_userspace	signature:(src: *const u8, dst: *mut u8, len: usize)
write_close	$RUST/src/net/tcp/tests.rs	/^fn write_close() {$/;"	f	signature:()
write_cold	$RUST/src/io/buffered/bufwriter.rs	/^    fn write_cold(&mut self, buf: &[u8]) -> io::Result<usize> {$/;"	P	implementation:BufWriter	signature:(&mut self, buf: &[u8]) -> io::Result<usize>
write_contended	$RUST/src/sys/pal/unix/locks/futex_rwlock.rs	/^    fn write_contended(&self) {$/;"	P	implementation:RwLock	signature:(&self)
write_fmt	$RUST/src/io/buffered/linewriter.rs	/^    fn write_fmt(&mut self, fmt: fmt::Arguments<'_>) -> io::Result<()> {$/;"	P	implementation:LineWriter	signature:(&mut self, fmt: fmt::Arguments<'_>) -> io::Result<()>
write_fmt	$RUST/src/io/impls.rs	/^    fn write_fmt(&mut self, fmt: fmt::Arguments<'_>) -> io::Result<()> {$/;"	P	implementation:W	signature:(&mut self, fmt: fmt::Arguments<'_>) -> io::Result<()>
write_fmt	$RUST/src/io/mod.rs	/^    fn write_fmt(&mut self, fmt: fmt::Arguments<'_>) -> Result<()> {$/;"	P	interface:Write	signature:(&mut self, fmt: fmt::Arguments<'_>) -> Result<()>
write_fmt	$RUST/src/io/stdio.rs	/^    fn write_fmt(&mut self, fmt: fmt::Arguments<'_>) -> io::Result<()> {$/;"	P	implementation:StdoutRaw	signature:(&mut self, fmt: fmt::Arguments<'_>) -> io::Result<()>
write_locked	$RUST/src/sys/pal/unix/locks/pthread_rwlock.rs	/^    write_locked: UnsafeCell<bool>, \/\/ guarded by the `inner` RwLock$/;"	m	struct:AllocatedRwLock
write_str	$RUST/src/error.rs	/^    fn write_str(&mut self, s: &str) -> fmt::Result {$/;"	f	signature:(&mut self, s: &str) -> fmt::Result
write_str	$RUST/src/ffi/os_str.rs	/^    fn write_str(&mut self, s: &str) -> fmt::Result {$/;"	P	implementation:OsString	signature:(&mut self, s: &str) -> fmt::Result
write_str	$RUST/src/hash/random.rs	/^    fn write_str(&mut self, s: &str) {$/;"	P	implementation:DefaultHasher	signature:(&mut self, s: &str)
write_str	$RUST/src/io/mod.rs	/^            fn write_str(&mut self, s: &str) -> fmt::Result {$/;"	P	implementation:Write::write_fmt::Adapter	signature:(&mut self, s: &str) -> fmt::Result
write_str_escaped	$RUST/src/sys_common/wtf8.rs	/^        fn write_str_escaped(f: &mut fmt::Formatter<'_>, s: &str) -> fmt::Result {$/;"	f	method:Wtf8::fmt	signature:(f: &mut fmt::Formatter<'_>, s: &str) -> fmt::Result
write_then_read	$RUST/src/fs/tests.rs	/^fn write_then_read() {$/;"	f	signature:()
write_timeout	$RUST/src/net/tcp.rs	/^    pub fn write_timeout(&self) -> io::Result<Option<Duration>> {$/;"	P	implementation:TcpStream	signature:(&self) -> io::Result<Option<Duration>>
write_timeout	$RUST/src/net/udp.rs	/^    pub fn write_timeout(&self) -> io::Result<Option<Duration>> {$/;"	P	implementation:UdpSocket	signature:(&self) -> io::Result<Option<Duration>>
write_timeout	$RUST/src/os/unix/net/datagram.rs	/^    pub fn write_timeout(&self) -> io::Result<Option<Duration>> {$/;"	P	implementation:UnixDatagram	signature:(&self) -> io::Result<Option<Duration>>
write_timeout	$RUST/src/os/unix/net/stream.rs	/^    pub fn write_timeout(&self) -> io::Result<Option<Duration>> {$/;"	P	implementation:UnixStream	signature:(&self) -> io::Result<Option<Duration>>
write_timeout	$RUST/src/sys/pal/sgx/net.rs	/^    pub fn write_timeout(&self) -> io::Result<Option<Duration>> {$/;"	P	implementation:UdpSocket	signature:(&self) -> io::Result<Option<Duration>>
write_timeout	$RUST/src/sys/pal/teeos/net.rs	/^    pub fn write_timeout(&self) -> io::Result<Option<Duration>> {$/;"	P	implementation:UdpSocket	signature:(&self) -> io::Result<Option<Duration>>
write_timeout	$RUST/src/sys/pal/unix/l4re.rs	/^        pub fn write_timeout(&self) -> io::Result<Option<Duration>> {$/;"	P	implementation:net::UdpSocket	signature:(&self) -> io::Result<Option<Duration>>
write_timeout	$RUST/src/sys/pal/unsupported/net.rs	/^    pub fn write_timeout(&self) -> io::Result<Option<Duration>> {$/;"	P	implementation:UdpSocket	signature:(&self) -> io::Result<Option<Duration>>
write_timeout	$RUST/src/sys/pal/wasi/net.rs	/^    pub fn write_timeout(&self) -> io::Result<Option<Duration>> {$/;"	P	implementation:UdpSocket	signature:(&self) -> io::Result<Option<Duration>>
write_timeout	$RUST/src/sys/pal/xous/net/tcpstream.rs	/^    write_timeout: Arc<AtomicU32>,$/;"	m	struct:TcpStream
write_timeout	$RUST/src/sys/pal/xous/net/udp.rs	/^    write_timeout: Cell<u64>,$/;"	m	struct:UdpSocket
write_timeout	$RUST/src/sys_common/net.rs	/^    pub fn write_timeout(&self) -> io::Result<Option<Duration>> {$/;"	P	implementation:UdpSocket	signature:(&self) -> io::Result<Option<Duration>>
write_to_buf	$RUST/src/io/buffered/bufwriter.rs	/^    pub(super) fn write_to_buf(&mut self, buf: &[u8]) -> usize {$/;"	P	implementation:BufWriter	signature:(&mut self, buf: &[u8]) -> usize
write_to_buffer_unchecked	$RUST/src/io/buffered/bufwriter.rs	/^    unsafe fn write_to_buffer_unchecked(&mut self, buf: &[u8]) {$/;"	P	implementation:BufWriter	signature:(&mut self, buf: &[u8])
write_u16s	$RUST/src/sys/pal/windows/stdio.rs	/^fn write_u16s(handle: c::HANDLE, data: &[u16]) -> io::Result<usize> {$/;"	f	signature:(handle: c::HANDLE, data: &[u16]) -> io::Result<usize>
write_unlock	$RUST/src/sys/pal/sgx/rwlock.rs	/^    pub unsafe fn write_unlock(&self) {$/;"	P	implementation:RwLock	signature:(&self)
write_unlock	$RUST/src/sys/pal/solid/rwlock.rs	/^    pub unsafe fn write_unlock(&self) {$/;"	P	implementation:RwLock	signature:(&self)
write_unlock	$RUST/src/sys/pal/teeos/locks/rwlock.rs	/^    pub unsafe fn write_unlock(&self) {$/;"	P	implementation:RwLock	signature:(&self)
write_unlock	$RUST/src/sys/pal/unix/locks/futex_rwlock.rs	/^    pub unsafe fn write_unlock(&self) {$/;"	P	implementation:RwLock	signature:(&self)
write_unlock	$RUST/src/sys/pal/unix/locks/pthread_rwlock.rs	/^    pub unsafe fn write_unlock(&self) {$/;"	P	implementation:RwLock	signature:(&self)
write_unlock	$RUST/src/sys/pal/unsupported/locks/rwlock.rs	/^    pub unsafe fn write_unlock(&self) {$/;"	P	implementation:RwLock	signature:(&self)
write_unlock	$RUST/src/sys/pal/windows/locks/rwlock.rs	/^    pub unsafe fn write_unlock(&self) {$/;"	P	implementation:RwLock	signature:(&self)
write_unlock	$RUST/src/sys/pal/xous/locks/rwlock.rs	/^    pub unsafe fn write_unlock(&self) {$/;"	P	implementation:RwLock	signature:(&self)
write_valid_utf8_to_console	$RUST/src/sys/pal/windows/stdio.rs	/^fn write_valid_utf8_to_console(handle: c::HANDLE, utf8: &str) -> io::Result<usize> {$/;"	f	signature:(handle: c::HANDLE, utf8: &str) -> io::Result<usize>
write_vectored	$RUST/src/fs.rs	/^    fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {$/;"	P	implementation:File	signature:(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize>
write_vectored	$RUST/src/io/buffered/bufwriter.rs	/^    fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {$/;"	P	implementation:BufWriter	signature:(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize>
write_vectored	$RUST/src/io/buffered/linewriter.rs	/^    fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {$/;"	P	implementation:LineWriter	signature:(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize>
write_vectored	$RUST/src/io/buffered/linewritershim.rs	/^    fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {$/;"	P	implementation:LineWriterShim	signature:(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize>
write_vectored	$RUST/src/io/buffered/tests.rs	/^        fn write_vectored(&mut self, buf: &[IoSlice<'_>]) -> io::Result<usize> {$/;"	P	implementation:line_vectored_partial_and_errors::Writer	signature:(&mut self, buf: &[IoSlice<'_>]) -> io::Result<usize>
write_vectored	$RUST/src/io/cursor.rs	/^    fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {$/;"	f	signature:(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize>
write_vectored	$RUST/src/io/impls.rs	/^    fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {$/;"	P	implementation:u8	signature:(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize>
write_vectored	$RUST/src/io/mod.rs	/^    fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> Result<usize> {$/;"	P	interface:Write	signature:(&mut self, bufs: &[IoSlice<'_>]) -> Result<usize>
write_vectored	$RUST/src/io/stdio.rs	/^    fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {$/;"	P	implementation:StdoutRaw	signature:(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize>
write_vectored	$RUST/src/io/tests.rs	/^    fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {$/;"	P	implementation:TestWriter	signature:(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize>
write_vectored	$RUST/src/io/util.rs	/^    fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {$/;"	P	implementation:Sink	signature:(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize>
write_vectored	$RUST/src/net/tcp.rs	/^    fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {$/;"	P	implementation:TcpStream	signature:(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize>
write_vectored	$RUST/src/net/tcp/tests.rs	/^fn write_vectored() {$/;"	f	signature:()
write_vectored	$RUST/src/os/unix/net/stream.rs	/^    fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {$/;"	P	implementation:UnixStream	signature:(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize>
write_vectored	$RUST/src/process.rs	/^    fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {$/;"	P	implementation:ChildStdin	signature:(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize>
write_vectored	$RUST/src/sys/pal/hermit/fs.rs	/^    pub fn write_vectored(&self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {$/;"	P	implementation:File	signature:(&self, bufs: &[IoSlice<'_>]) -> io::Result<usize>
write_vectored	$RUST/src/sys/pal/hermit/net.rs	/^    pub fn write_vectored(&self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {$/;"	P	implementation:Socket	signature:(&self, bufs: &[IoSlice<'_>]) -> io::Result<usize>
write_vectored	$RUST/src/sys/pal/hermit/stdio.rs	/^    fn write_vectored(&mut self, data: &[IoSlice<'_>]) -> io::Result<usize> {$/;"	P	implementation:Stdout	signature:(&mut self, data: &[IoSlice<'_>]) -> io::Result<usize>
write_vectored	$RUST/src/sys/pal/sgx/fd.rs	/^    pub fn write_vectored(&self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {$/;"	P	implementation:FileDesc	signature:(&self, bufs: &[IoSlice<'_>]) -> io::Result<usize>
write_vectored	$RUST/src/sys/pal/sgx/net.rs	/^    pub fn write_vectored(&self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {$/;"	P	implementation:TcpStream	signature:(&self, bufs: &[IoSlice<'_>]) -> io::Result<usize>
write_vectored	$RUST/src/sys/pal/solid/net.rs	/^    pub fn write_vectored(&self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {$/;"	P	implementation:Socket	signature:(&self, bufs: &[IoSlice<'_>]) -> io::Result<usize>
write_vectored	$RUST/src/sys/pal/teeos/net.rs	/^    pub fn write_vectored(&self, _: &[IoSlice<'_>]) -> io::Result<usize> {$/;"	P	implementation:TcpStream	signature:(&self, _: &[IoSlice<'_>]) -> io::Result<usize>
write_vectored	$RUST/src/sys/pal/unix/fd.rs	/^    pub fn write_vectored(&self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {$/;"	P	implementation:FileDesc	signature:(&self, bufs: &[IoSlice<'_>]) -> io::Result<usize>
write_vectored	$RUST/src/sys/pal/unix/fs.rs	/^    pub fn write_vectored(&self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {$/;"	P	implementation:File	signature:(&self, bufs: &[IoSlice<'_>]) -> io::Result<usize>
write_vectored	$RUST/src/sys/pal/unix/l4re.rs	/^        pub fn write_vectored(&self, _: &[IoSlice<'_>]) -> io::Result<usize> {$/;"	P	implementation:net::TcpStream	signature:(&self, _: &[IoSlice<'_>]) -> io::Result<usize>
write_vectored	$RUST/src/sys/pal/unix/net.rs	/^    pub fn write_vectored(&self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {$/;"	P	implementation:Socket	signature:(&self, bufs: &[IoSlice<'_>]) -> io::Result<usize>
write_vectored	$RUST/src/sys/pal/unix/pipe.rs	/^    pub fn write_vectored(&self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {$/;"	P	implementation:AnonPipe	signature:(&self, bufs: &[IoSlice<'_>]) -> io::Result<usize>
write_vectored	$RUST/src/sys/pal/unix/stdio.rs	/^    fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {$/;"	P	implementation:Stdout	signature:(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize>
write_vectored	$RUST/src/sys/pal/unsupported/fs.rs	/^    pub fn write_vectored(&self, _bufs: &[IoSlice<'_>]) -> io::Result<usize> {$/;"	P	implementation:File	signature:(&self, _bufs: &[IoSlice<'_>]) -> io::Result<usize>
write_vectored	$RUST/src/sys/pal/unsupported/net.rs	/^    pub fn write_vectored(&self, _: &[IoSlice<'_>]) -> io::Result<usize> {$/;"	P	implementation:TcpStream	signature:(&self, _: &[IoSlice<'_>]) -> io::Result<usize>
write_vectored	$RUST/src/sys/pal/unsupported/pipe.rs	/^    pub fn write_vectored(&self, _bufs: &[IoSlice<'_>]) -> io::Result<usize> {$/;"	P	implementation:AnonPipe	signature:(&self, _bufs: &[IoSlice<'_>]) -> io::Result<usize>
write_vectored	$RUST/src/sys/pal/wasi/fs.rs	/^    pub fn write_vectored(&self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {$/;"	P	implementation:File	signature:(&self, bufs: &[IoSlice<'_>]) -> io::Result<usize>
write_vectored	$RUST/src/sys/pal/wasi/net.rs	/^    pub fn write_vectored(&self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {$/;"	P	implementation:TcpStream	signature:(&self, bufs: &[IoSlice<'_>]) -> io::Result<usize>
write_vectored	$RUST/src/sys/pal/wasi/stdio.rs	/^    fn write_vectored(&mut self, data: &[IoSlice<'_>]) -> io::Result<usize> {$/;"	P	implementation:Stdout	signature:(&mut self, data: &[IoSlice<'_>]) -> io::Result<usize>
write_vectored	$RUST/src/sys/pal/windows/fs.rs	/^    pub fn write_vectored(&self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {$/;"	P	implementation:File	signature:(&self, bufs: &[IoSlice<'_>]) -> io::Result<usize>
write_vectored	$RUST/src/sys/pal/windows/handle.rs	/^    pub fn write_vectored(&self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {$/;"	P	implementation:Handle	signature:(&self, bufs: &[IoSlice<'_>]) -> io::Result<usize>
write_vectored	$RUST/src/sys/pal/windows/net.rs	/^    pub fn write_vectored(&self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {$/;"	P	implementation:Socket	signature:(&self, bufs: &[IoSlice<'_>]) -> io::Result<usize>
write_vectored	$RUST/src/sys/pal/windows/pipe.rs	/^    pub fn write_vectored(&self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {$/;"	P	implementation:AnonPipe	signature:(&self, bufs: &[IoSlice<'_>]) -> io::Result<usize>
write_vectored	$RUST/src/sys/pal/xous/net/tcpstream.rs	/^    pub fn write_vectored(&self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {$/;"	P	implementation:TcpStream	signature:(&self, bufs: &[IoSlice<'_>]) -> io::Result<usize>
write_vectored	$RUST/src/sys_common/net.rs	/^    pub fn write_vectored(&self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {$/;"	P	implementation:TcpStream	signature:(&self, bufs: &[IoSlice<'_>]) -> io::Result<usize>
write_vectored_at	$RUST/src/os/unix/fs.rs	/^    fn write_vectored_at(&self, bufs: &[io::IoSlice<'_>], offset: u64) -> io::Result<usize> {$/;"	P	interface:FileExt	signature:(&self, bufs: &[io::IoSlice<'_>], offset: u64) -> io::Result<usize>
write_vectored_at	$RUST/src/os/unix/fs/tests.rs	/^fn write_vectored_at() {$/;"	f	signature:()
write_vectored_at	$RUST/src/os/wasi/fs.rs	/^    fn write_vectored_at(&self, bufs: &[IoSlice<'_>], offset: u64) -> io::Result<usize>;$/;"	P	interface:FileExt	signature:(&self, bufs: &[IoSlice<'_>], offset: u64) -> io::Result<usize>
write_vectored_at	$RUST/src/sys/pal/unix/fd.rs	/^    pub fn write_vectored_at(&self, bufs: &[IoSlice<'_>], offset: u64) -> io::Result<usize> {$/;"	P	implementation:FileDesc	signature:(&self, bufs: &[IoSlice<'_>], offset: u64) -> io::Result<usize>
write_vectored_at	$RUST/src/sys/pal/unix/fs.rs	/^    pub fn write_vectored_at(&self, bufs: &[IoSlice<'_>], offset: u64) -> io::Result<usize> {$/;"	P	implementation:File	signature:(&self, bufs: &[IoSlice<'_>], offset: u64) -> io::Result<usize>
writer	$RUST/src/sys/pal/sgx/rwlock.rs	/^    writer: SpinMutex<WaitVariable<bool>>,$/;"	m	struct:AllocatedRwLock
writer_notify	$RUST/src/sys/pal/unix/locks/futex_rwlock.rs	/^    writer_notify: AtomicU32,$/;"	m	struct:RwLock
writev	$RUST/src/sys/pal/solid/abi/sockets.rs	/^    pub fn writev(s: c_int, bufs: *const iovec, bufcnt: c_int) -> ssize_t;$/;"	f	signature:(s: c_int, bufs: *const iovec, bufcnt: c_int) -> ssize_t
written	$RUST/src/io/buffered/bufwriter.rs	/^            written: usize,$/;"	m	struct:BufWriter::flush_buf::BufGuard
written	$RUST/src/io/tests.rs	/^    written: Vec<u8>,$/;"	m	struct:TestWriter
wrlen_t	$RUST/src/sys/pal/hermit/net.rs	/^pub type wrlen_t = usize;$/;"	t
wrlen_t	$RUST/src/sys/pal/solid/net.rs	/^pub type wrlen_t = size_t;$/;"	t
wrlen_t	$RUST/src/sys/pal/unix/net.rs	/^pub type wrlen_t = size_t;$/;"	t
wrlen_t	$RUST/src/sys/pal/windows/net.rs	/^pub type wrlen_t = i32;$/;"	t
wstr	$RUST/src/sys_common/mod.rs	/^pub mod wstr;$/;"	n
wtf8	$RUST/src/sys_common/mod.rs	/^pub mod wtf8;$/;"	n
wtf8_as_str	$RUST/src/sys_common/wtf8/tests.rs	/^fn wtf8_as_str() {$/;"	f	signature:()
wtf8_ascii_byte_at	$RUST/src/sys_common/wtf8/tests.rs	/^fn wtf8_ascii_byte_at() {$/;"	f	signature:()
wtf8_clone_into	$RUST/src/sys_common/wtf8/tests.rs	/^fn wtf8_clone_into() {$/;"	f	signature:()
wtf8_code_points	$RUST/src/sys_common/wtf8/tests.rs	/^fn wtf8_code_points() {$/;"	f	signature:()
wtf8_display	$RUST/src/sys_common/wtf8/tests.rs	/^fn wtf8_display() {$/;"	f	signature:()
wtf8_encode_wide	$RUST/src/sys_common/wtf8/tests.rs	/^fn wtf8_encode_wide() {$/;"	f	signature:()
wtf8_encode_wide_size_hint	$RUST/src/sys_common/wtf8/tests.rs	/^fn wtf8_encode_wide_size_hint() {$/;"	f	signature:()
wtf8_from_str	$RUST/src/sys_common/wtf8/tests.rs	/^fn wtf8_from_str() {$/;"	f	signature:()
wtf8_len	$RUST/src/sys_common/wtf8/tests.rs	/^fn wtf8_len() {$/;"	f	signature:()
wtf8_make_ascii_lowercase	$RUST/src/sys_common/wtf8/tests.rs	/^fn wtf8_make_ascii_lowercase() {$/;"	f	signature:()
wtf8_make_ascii_uppercase	$RUST/src/sys_common/wtf8/tests.rs	/^fn wtf8_make_ascii_uppercase() {$/;"	f	signature:()
wtf8_slice	$RUST/src/sys_common/wtf8/tests.rs	/^fn wtf8_slice() {$/;"	f	signature:()
wtf8_slice_from	$RUST/src/sys_common/wtf8/tests.rs	/^fn wtf8_slice_from() {$/;"	f	signature:()
wtf8_slice_from_not_code_point_boundary	$RUST/src/sys_common/wtf8/tests.rs	/^fn wtf8_slice_from_not_code_point_boundary() {$/;"	f	signature:()
wtf8_slice_not_code_point_boundary	$RUST/src/sys_common/wtf8/tests.rs	/^fn wtf8_slice_not_code_point_boundary() {$/;"	f	signature:()
wtf8_slice_to	$RUST/src/sys_common/wtf8/tests.rs	/^fn wtf8_slice_to() {$/;"	f	signature:()
wtf8_slice_to_not_code_point_boundary	$RUST/src/sys_common/wtf8/tests.rs	/^fn wtf8_slice_to_not_code_point_boundary() {$/;"	f	signature:()
wtf8_to_ascii_lowercase	$RUST/src/sys_common/wtf8/tests.rs	/^fn wtf8_to_ascii_lowercase() {$/;"	f	signature:()
wtf8_to_ascii_uppercase	$RUST/src/sys_common/wtf8/tests.rs	/^fn wtf8_to_ascii_uppercase() {$/;"	f	signature:()
wtf8_to_owned	$RUST/src/sys_common/wtf8/tests.rs	/^fn wtf8_to_owned() {$/;"	f	signature:()
wtf8_to_string_lossy	$RUST/src/sys_common/wtf8/tests.rs	/^fn wtf8_to_string_lossy() {$/;"	f	signature:()
wtf8buf_as_slice	$RUST/src/sys_common/wtf8/tests.rs	/^fn wtf8buf_as_slice() {$/;"	f	signature:()
wtf8buf_extend	$RUST/src/sys_common/wtf8/tests.rs	/^fn wtf8buf_extend() {$/;"	f	signature:()
wtf8buf_from_iterator	$RUST/src/sys_common/wtf8/tests.rs	/^fn wtf8buf_from_iterator() {$/;"	f	signature:()
wtf8buf_from_str	$RUST/src/sys_common/wtf8/tests.rs	/^fn wtf8buf_from_str() {$/;"	f	signature:()
wtf8buf_from_string	$RUST/src/sys_common/wtf8/tests.rs	/^fn wtf8buf_from_string() {$/;"	f	signature:()
wtf8buf_from_wide	$RUST/src/sys_common/wtf8/tests.rs	/^fn wtf8buf_from_wide() {$/;"	f	signature:()
wtf8buf_into_string	$RUST/src/sys_common/wtf8/tests.rs	/^fn wtf8buf_into_string() {$/;"	f	signature:()
wtf8buf_into_string_lossy	$RUST/src/sys_common/wtf8/tests.rs	/^fn wtf8buf_into_string_lossy() {$/;"	f	signature:()
wtf8buf_new	$RUST/src/sys_common/wtf8/tests.rs	/^fn wtf8buf_new() {$/;"	f	signature:()
wtf8buf_push	$RUST/src/sys_common/wtf8/tests.rs	/^fn wtf8buf_push() {$/;"	f	signature:()
wtf8buf_push_char	$RUST/src/sys_common/wtf8/tests.rs	/^fn wtf8buf_push_char() {$/;"	f	signature:()
wtf8buf_push_str	$RUST/src/sys_common/wtf8/tests.rs	/^fn wtf8buf_push_str() {$/;"	f	signature:()
wtf8buf_push_wtf8	$RUST/src/sys_common/wtf8/tests.rs	/^fn wtf8buf_push_wtf8() {$/;"	f	signature:()
wtf8buf_show	$RUST/src/sys_common/wtf8/tests.rs	/^fn wtf8buf_show() {$/;"	f	signature:()
wtf8buf_show_str	$RUST/src/sys_common/wtf8/tests.rs	/^fn wtf8buf_show_str() {$/;"	f	signature:()
wtf8buf_truncate	$RUST/src/sys_common/wtf8/tests.rs	/^fn wtf8buf_truncate() {$/;"	f	signature:()
wtf8buf_truncate_around_non_bmp	$RUST/src/sys_common/wtf8/tests.rs	/^fn wtf8buf_truncate_around_non_bmp() {$/;"	f	signature:()
wtf8buf_truncate_fail_code_point_boundary	$RUST/src/sys_common/wtf8/tests.rs	/^fn wtf8buf_truncate_fail_code_point_boundary() {$/;"	f	signature:()
wtf8buf_truncate_fail_longer	$RUST/src/sys_common/wtf8/tests.rs	/^fn wtf8buf_truncate_fail_longer() {$/;"	f	signature:()
wtf8buf_truncate_splitting_non_bmp1	$RUST/src/sys_common/wtf8/tests.rs	/^fn wtf8buf_truncate_splitting_non_bmp1() {$/;"	f	signature:()
wtf8buf_truncate_splitting_non_bmp2	$RUST/src/sys_common/wtf8/tests.rs	/^fn wtf8buf_truncate_splitting_non_bmp2() {$/;"	f	signature:()
wtf8buf_truncate_splitting_non_bmp3	$RUST/src/sys_common/wtf8/tests.rs	/^fn wtf8buf_truncate_splitting_non_bmp3() {$/;"	f	signature:()
wup_tsk	$RUST/src/sys/pal/itron/abi.rs	/^    pub fn wup_tsk(tskid: ID) -> ER;$/;"	f	signature:(tskid: ID) -> ER
xous	$RUST/src/os/mod.rs	/^pub mod xous;$/;"	n
yield_now	$RUST/src/sys/pal/hermit/thread.rs	/^    pub fn yield_now() {$/;"	P	implementation:Thread	signature:()
yield_now	$RUST/src/sys/pal/itron/thread.rs	/^    pub fn yield_now() {$/;"	P	implementation:Thread	signature:()
yield_now	$RUST/src/sys/pal/sgx/thread.rs	/^    pub fn yield_now() {$/;"	P	implementation:Thread	signature:()
yield_now	$RUST/src/sys/pal/teeos/thread.rs	/^    pub fn yield_now() {$/;"	P	implementation:Thread	signature:()
yield_now	$RUST/src/sys/pal/unix/thread.rs	/^    pub fn yield_now() {$/;"	P	implementation:Thread	signature:()
yield_now	$RUST/src/sys/pal/unsupported/thread.rs	/^    pub fn yield_now() {$/;"	P	implementation:Thread	signature:()
yield_now	$RUST/src/sys/pal/wasi/thread.rs	/^    pub fn yield_now() {$/;"	P	implementation:Thread	signature:()
yield_now	$RUST/src/sys/pal/wasm/atomics/thread.rs	/^    pub fn yield_now() {}$/;"	P	implementation:Thread	signature:()
yield_now	$RUST/src/sys/pal/windows/thread.rs	/^    pub fn yield_now() {$/;"	P	implementation:Thread	signature:()
yield_now	$RUST/src/sys/pal/xous/thread.rs	/^    pub fn yield_now() {$/;"	P	implementation:Thread	signature:()
yield_now	$RUST/src/thread/mod.rs	/^pub fn yield_now() {$/;"	f	signature:()
zero	$RUST/src/sync/mpmc/mod.rs	/^mod zero;$/;"	n
zero	$RUST/src/sync/mpmc/select.rs	/^    pub(crate) zero: super::zero::ZeroToken,$/;"	m	struct:Token
zero	$RUST/src/sys/pal/hermit/time.rs	/^    const fn zero() -> Timespec {$/;"	P	implementation:Timespec	signature:() -> Timespec
zero	$RUST/src/sys/pal/unix/time.rs	/^    pub const fn zero() -> Timespec {$/;"	P	implementation:Timespec	signature:() -> Timespec
zero_size_read	$RUST/src/sys/pal/windows/stdio/tests.rs	/^fn zero_size_read() {$/;"	f	signature:()
zeroed_process_information	$RUST/src/sys/pal/windows/process.rs	/^fn zeroed_process_information() -> c::PROCESS_INFORMATION {$/;"	f	signature:() -> c::PROCESS_INFORMATION
zeroed_startupinfo	$RUST/src/sys/pal/windows/process.rs	/^fn zeroed_startupinfo() -> c::STARTUPINFOW {$/;"	f	signature:() -> c::STARTUPINFOW
zircon	$RUST/src/sys/pal/unix/futex.rs	/^pub mod zircon {$/;"	n
zircon	$RUST/src/sys/pal/unix/thread.rs	/^mod zircon {$/;"	n
zx_clock_get_monotonic	$RUST/src/sys/pal/unix/futex.rs	/^        pub fn zx_clock_get_monotonic() -> zx_time_t;$/;"	f	module:zircon	signature:() -> zx_time_t
zx_cprng_draw	$RUST/src/sys/pal/unix/rand.rs	/^        fn zx_cprng_draw(buffer: *mut u8, len: usize);$/;"	f	module:imp	signature:(buffer: *mut u8, len: usize)
zx_cvt	$RUST/src/sys/pal/unix/process/zircon.rs	/^pub fn zx_cvt<T>(t: T) -> io::Result<T>$/;"	f	signature:<T>(t: T) -> io::Result<T> where T: TryInto<zx_status_t> + Copy,
zx_futex_t	$RUST/src/sys/pal/unix/futex.rs	/^    pub type zx_futex_t = crate::sync::atomic::AtomicU32;$/;"	t	module:zircon
zx_futex_wait	$RUST/src/sys/pal/unix/futex.rs	/^        pub fn zx_futex_wait($/;"	f	module:zircon	signature:( value_ptr: *const zx_futex_t, current_value: zx_futex_t, new_futex_owner: zx_handle_t, deadline: zx_time_t, ) -> zx_status_t
zx_futex_wake	$RUST/src/sys/pal/unix/futex.rs	/^        pub fn zx_futex_wake(value_ptr: *const zx_futex_t, wake_count: u32) -> zx_status_t;$/;"	f	module:zircon	signature:(value_ptr: *const zx_futex_t, wake_count: u32) -> zx_status_t
zx_futex_wake_single_owner	$RUST/src/sys/pal/unix/futex.rs	/^        pub fn zx_futex_wake_single_owner(value_ptr: *const zx_futex_t) -> zx_status_t;$/;"	f	module:zircon	signature:(value_ptr: *const zx_futex_t) -> zx_status_t
zx_handle_close	$RUST/src/sys/pal/unix/process/zircon.rs	/^    pub fn zx_handle_close(handle: zx_handle_t) -> zx_status_t;$/;"	f	signature:(handle: zx_handle_t) -> zx_status_t
zx_handle_duplicate	$RUST/src/sys/pal/unix/process/zircon.rs	/^    pub fn zx_handle_duplicate($/;"	f	signature:( handle: zx_handle_t, rights: zx_rights_t, out: *const zx_handle_t, ) -> zx_handle_t
zx_handle_t	$RUST/src/sys/pal/unix/futex.rs	/^    pub type zx_handle_t = u32;$/;"	t	module:zircon
zx_handle_t	$RUST/src/sys/pal/unix/process/zircon.rs	/^pub type zx_handle_t = u32;$/;"	t
zx_handle_t	$RUST/src/sys/pal/unix/thread.rs	/^    type zx_handle_t = u32;$/;"	t	module:zircon
zx_info_process_flags_t	$RUST/src/sys/pal/unix/process/zircon.rs	/^pub type zx_info_process_flags_t = u32;$/;"	t
zx_info_process_t	$RUST/src/sys/pal/unix/process/zircon.rs	/^pub struct zx_info_process_t {$/;"	s
zx_job_default	$RUST/src/sys/pal/unix/process/zircon.rs	/^    pub fn zx_job_default() -> zx_handle_t;$/;"	f	signature:() -> zx_handle_t
zx_object_get_info	$RUST/src/sys/pal/unix/process/zircon.rs	/^    pub fn zx_object_get_info($/;"	f	signature:( handle: zx_handle_t, topic: u32, buffer: *mut c_void, buffer_size: size_t, actual_size: *mut size_t, avail: *mut size_t, ) -> zx_status_t
zx_object_info_topic_t	$RUST/src/sys/pal/unix/process/zircon.rs	/^pub type zx_object_info_topic_t = u32;$/;"	t
zx_object_set_property	$RUST/src/sys/pal/unix/thread.rs	/^        pub fn zx_object_set_property($/;"	f	module:zircon	signature:( handle: zx_handle_t, property: u32, value: *const libc::c_void, value_size: libc::size_t, ) -> zx_status_t
zx_object_wait_one	$RUST/src/sys/pal/unix/process/zircon.rs	/^    pub fn zx_object_wait_one($/;"	f	signature:( handle: zx_handle_t, signals: zx_signals_t, timeout: zx_time_t, pending: *mut zx_signals_t, ) -> zx_status_t
zx_rights_t	$RUST/src/sys/pal/unix/process/zircon.rs	/^pub type zx_rights_t = u32;$/;"	t
zx_signals_t	$RUST/src/sys/pal/unix/process/zircon.rs	/^pub type zx_signals_t = u32;$/;"	t
zx_status_t	$RUST/src/sys/pal/unix/futex.rs	/^    pub type zx_status_t = i32;$/;"	t	module:zircon
zx_status_t	$RUST/src/sys/pal/unix/process/zircon.rs	/^pub type zx_status_t = i32;$/;"	t
zx_status_t	$RUST/src/sys/pal/unix/thread.rs	/^    type zx_status_t = i32;$/;"	t	module:zircon
zx_task_kill	$RUST/src/sys/pal/unix/process/zircon.rs	/^    pub fn zx_task_kill(handle: zx_handle_t) -> zx_status_t;$/;"	f	signature:(handle: zx_handle_t) -> zx_status_t
zx_thread_self	$RUST/src/sys/pal/unix/futex.rs	/^        pub fn zx_thread_self() -> zx_handle_t;$/;"	f	module:zircon	signature:() -> zx_handle_t
zx_thread_self	$RUST/src/sys/pal/unix/thread.rs	/^        pub fn zx_thread_self() -> zx_handle_t;$/;"	f	module:zircon	signature:() -> zx_handle_t
zx_time_t	$RUST/src/sys/pal/unix/futex.rs	/^    pub type zx_time_t = i64;$/;"	t	module:zircon
zx_time_t	$RUST/src/sys/pal/unix/process/zircon.rs	/^pub type zx_time_t = i64;$/;"	t
zx_vaddr_t	$RUST/src/sys/pal/unix/process/zircon.rs	/^pub type zx_vaddr_t = usize;$/;"	t
