AMP	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^    AMP,$/;"	v
AT	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^    AT,$/;"	v
Abort	$C2_LIBDIR/../ast/ast_evaluator.c2	/^    Abort,      \/\/ abort invoked (eg: assert)$/;"	v
Action	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^type Action enum u8 {$/;"	t
Add	$C2_LIBDIR/../analyser/module_analyser_binop.c2	/^    Add,            ptr(l\/r), int$/;"	v
Add	$C2_LIBDIR/../ast/binary_operator.c2	/^    Add,$/;"	v
Add	$C2_LIBDIR/../common/c2_prec.c2	/^    [BinaryOpcode.Add]         = Additive,$/;"	v
Add	$C2_LIBDIR/../common/c_prec.c2	/^    [BinaryOpcode.Add]         = Additive,$/;"	v
Add	$C2_LIBDIR/../ir/instr_kind.c2	/^    Add,$/;"	v
AddAssign	$C2_LIBDIR/../analyser/module_analyser_binop.c2	/^    AddAssign,      ptr(l), int$/;"	v
AddAssign	$C2_LIBDIR/../ast/binary_operator.c2	/^    AddAssign,$/;"	v
AddAssign	$C2_LIBDIR/../common/c2_prec.c2	/^    [BinaryOpcode.AddAssign]   = Assignment,$/;"	v
AddAssign	$C2_LIBDIR/../common/c_prec.c2	/^    [BinaryOpcode.AddAssign]   = Assignment,$/;"	v
Additive	$C2_LIBDIR/../common/c2_prec.c2	/^    Additive,       \/\/ -, +$/;"	v
Additive	$C2_LIBDIR/../common/c_prec.c2	/^    Additive,       \/\/ -, +$/;"	v
Addr	$C2_LIBDIR/../ast/member_expr.c2	/^    Addr,       \/\/ Foo -> Foo* (ie &f)$/;"	v
AddrOf	$C2_LIBDIR/../ast/unary_operator.c2	/^    AddrOf,         \/\/ &a$/;"	v
Algorithm	$C2_LIBDIR/../ir/slot_collector.c2	/^        Algorithm, for each block:$/;"	v
Alias	$C2_LIBDIR/../ast/type.c2	/^    Alias,$/;"	v
AliasType	$C2_LIBDIR/../ast/decl.c2	/^    AliasType,$/;"	v
Aligned	$C2_LIBDIR/../ast_utils/attr.c2	/^    [AttrKind.Aligned]      = AttrReq.Number,$/;"	v
Alloc1	$C2_LIBDIR/../ir/instr_kind.c2	/^    Alloc1,$/;"	v
Alloc2	$C2_LIBDIR/../ir/instr_kind.c2	/^    Alloc2,$/;"	v
Alloc4	$C2_LIBDIR/../ir/instr_kind.c2	/^    Alloc4,$/;"	v
Alloc8	$C2_LIBDIR/../ir/instr_kind.c2	/^    Alloc8,$/;"	v
Amp	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    [Kind.Amp] = 7,$/;"	v
Amp	$C2_LIBDIR/../parser/token.c2	/^    [Kind.Amp]              = "&",$/;"	v
AmpAmp	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    [Kind.AmpAmp]   = LogicalAndOr,$/;"	v
AmpAmp	$C2_LIBDIR/../parser/token.c2	/^    [Kind.AmpAmp]           = "&&",$/;"	v
AmpEqual	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    [Kind.AmpEqual]       = AndAssign,$/;"	v
AmpEqual	$C2_LIBDIR/../parser/token.c2	/^    [Kind.AmpEqual]         = "&=",$/;"	v
And	$C2_LIBDIR/../analyser/module_analyser_binop.c2	/^    And,            int$/;"	v
And	$C2_LIBDIR/../ast/binary_operator.c2	/^    And,$/;"	v
And	$C2_LIBDIR/../common/c2_prec.c2	/^    [BinaryOpcode.And]         = Bitwise,$/;"	v
And	$C2_LIBDIR/../common/c_prec.c2	/^    [BinaryOpcode.And]         = And,$/;"	v
And	$C2_LIBDIR/../ir/instr_kind.c2	/^    And,$/;"	v
AndAssign	$C2_LIBDIR/../analyser/module_analyser_binop.c2	/^    AndAssign,      int$/;"	v
AndAssign	$C2_LIBDIR/../ast/binary_operator.c2	/^    AndAssign,$/;"	v
AndAssign	$C2_LIBDIR/../common/c2_prec.c2	/^    [BinaryOpcode.AndAssign]   = Assignment,$/;"	v
AndAssign	$C2_LIBDIR/../common/c_prec.c2	/^    [BinaryOpcode.AndAssign]   = Assignment,$/;"	v
AndTrue	$C2_LIBDIR/../ir/block.c2	/^    AndTrue,$/;"	v
Arena	$C2_LIBDIR/../ir/interference_graph.c2	/^type Arena struct {$/;"	t
Arena	$C2_LIBDIR/../ir/live_map.c2	/^type Arena struct {$/;"	t
Arena	$C2_LIBDIR/../ir/slot_writes_map.c2	/^type Arena struct {$/;"	t
Arg	$C2_LIBDIR/../ast_utils/attr.c2	/^    Arg,$/;"	v
Arg	$C2_LIBDIR/../ir/instr_kind.c2	/^    Arg,$/;"	v
ArgValue	$C2_LIBDIR/../generator/c/c_generator_pure_call.c2	/^type ArgValue struct {$/;"	t
Array	$C2_LIBDIR/../ast/type.c2	/^    Array,$/;"	v
ArrayDesignatedInit	$C2_LIBDIR/../ast/expr.c2	/^    ArrayDesignatedInit,$/;"	v
ArraySubscript	$C2_LIBDIR/../ast/expr.c2	/^    ArraySubscript,$/;"	v
ArraySubscriptExprBits	$C2_LIBDIR/../ast/array_subscript_expr.c2	/^type ArraySubscriptExprBits struct {$/;"	t
ArrayToPointerDecay	$C2_LIBDIR/../ast/implicit_cast_expr.c2	/^    ArrayToPointerDecay,$/;"	v
ArrayTypeBits	$C2_LIBDIR/../ast/array_type.c2	/^type ArrayTypeBits struct {$/;"	t
ArrayValueList	$C2_LIBDIR/../ast/array_value_list.c2	/^type ArrayValueList struct {$/;"	t
Asm	$C2_LIBDIR/../ast/stmt.c2	/^    Asm,$/;"	v
AsmFile	$C2_LIBDIR/../compiler/c2recipe_parser.c2	/^    AsmFile,$/;"	v
AsmStmtBits	$C2_LIBDIR/../ast/asm_stmt.c2	/^type AsmStmtBits struct {$/;"	t
Assert	$C2_LIBDIR/../ast/stmt.c2	/^    Assert,$/;"	v
Assign	$C2_LIBDIR/../analyser/module_analyser_binop.c2	/^    Assign,         struct(both), ptr, int$/;"	v
Assign	$C2_LIBDIR/../ast/binary_operator.c2	/^    Assign,$/;"	v
Assign	$C2_LIBDIR/../common/c2_prec.c2	/^    [BinaryOpcode.Assign]      = Assignment,$/;"	v
Assign	$C2_LIBDIR/../common/c_prec.c2	/^    [BinaryOpcode.Assign]      = Assignment,$/;"	v
Assignment	$C2_LIBDIR/../common/c2_prec.c2	/^    Assignment,     \/\/ =, *=, \/=, %=, +=, -=, <<=, >>=, &=, ^=, |=$/;"	v
Assignment	$C2_LIBDIR/../common/c_prec.c2	/^    Assignment,     \/\/ =, *=, \/=, %=, +=, -=, <<=, >>=, &=, ^=, |=$/;"	v
At	$C2_LIBDIR/../parser/token.c2	/^    [Kind.At]               = "@",$/;"	v
Attr	$C2_LIBDIR/../ast_utils/attr_table.c2	/^type Attr struct {$/;"	t
AutoAttr	$C2_LIBDIR/../ast/var_decl.c2	/^type AutoAttr enum u32 {$/;"	t
AutoFile	$C2_LIBDIR/../ast_utils/attr.c2	/^    [AttrKind.AutoFile]     = AttrReq.NoArg,$/;"	v
AutoFunc	$C2_LIBDIR/../ast_utils/attr.c2	/^    [AttrKind.AutoFunc]     = AttrReq.NoArg,$/;"	v
AutoLine	$C2_LIBDIR/../ast_utils/attr.c2	/^    [AttrKind.AutoLine]     = AttrReq.NoArg,$/;"	v
B2	$C2_LIBDIR/../ir/register_alloc.c2	/^            jmp_if B2, ..                      B1:$/;"	v
BQUOTE	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^    BQUOTE,$/;"	v
BUF_SIZE	$C2_LIBDIR/../common/console.c2	/^const u32 BUF_SIZE = 4096;$/;"	v
Backend	$C2_LIBDIR/../compiler/c2recipe_parser.c2	/^    Backend,$/;"	v
BasicStructLayouter	$C2_LIBDIR/../generator/ir/basic_struct_layouter.c2	/^type BasicStructLayouter struct {$/;"	t
Bblue	$C2_LIBDIR/../ast_utils/color.c2	/^public const char[] Bblue    = "\\033[01;34m";$/;"	v
Bcyan	$C2_LIBDIR/../ast_utils/color.c2	/^public const char[] Bcyan    = "\\033[01;36m";$/;"	v
Bgreen	$C2_LIBDIR/../ast_utils/color.c2	/^public const char[] Bgreen   = "\\033[01;32m";$/;"	v
BinOpPrecLookup	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^const Prec[128] BinOpPrecLookup = {$/;"	v
BinOpTokenLookup	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^const BinaryOpcode[128] BinOpTokenLookup = {$/;"	v
Binary	$C2_LIBDIR/../ast_utils/number_radix.c2	/^    Binary,$/;"	v
BinaryOperator	$C2_LIBDIR/../ast/expr.c2	/^    BinaryOperator,$/;"	v
BinaryOperatorBits	$C2_LIBDIR/../ast/binary_operator.c2	/^type BinaryOperatorBits struct {$/;"	t
Binop_lhs	$C2_LIBDIR/../analyser/module_analyser_binop.c2	/^const u32[] Binop_lhs = {$/;"	v
BitCast	$C2_LIBDIR/../ast/implicit_cast_expr.c2	/^    BitCast,    \/\/ pointer conversion (char* -> i32*, or void* -> FunctionPtr)$/;"	v
BitFieldInfo	$C2_LIBDIR/../ast/var_decl.c2	/^type BitFieldInfo struct {$/;"	t
BitOffset	$C2_LIBDIR/../ast/expr.c2	/^    BitOffset,$/;"	v
BitOffsetExprBits	$C2_LIBDIR/../ast/bitoffset_expr.c2	/^type BitOffsetExprBits struct {$/;"	t
Bitwise	$C2_LIBDIR/../common/c2_prec.c2	/^    Bitwise,        \/\/ ^, |, &$/;"	v
Black	$C2_LIBDIR/../ast_utils/color.c2	/^public const char[] Black    = "\\033[0;30m";$/;"	v
Block	$C2_LIBDIR/../ast_utils/context.c2	/^type Block struct {$/;"	t
Block	$C2_LIBDIR/../ir/ref.c2	/^    Block,     \/\/ only used by Switch to store join_blk in args[1]$/;"	v
BlockComment	$C2_LIBDIR/../parser/token.c2	/^    [Kind.BlockComment]     = "b-comment",$/;"	v
BlockWrites	$C2_LIBDIR/../ir/slot_writes_map.c2	/^type BlockWrites struct {$/;"	t
Blue	$C2_LIBDIR/../ast_utils/color.c2	/^public const char[] Blue     = "\\033[0;34m";$/;"	v
Blue	$C2_LIBDIR/../plugins/unit_test2.c2	/^public const char[] Blue     = "\\033[0;34m";$/;"	v
Bmagenta	$C2_LIBDIR/../ast_utils/color.c2	/^public const char[] Bmagenta = "\\033[01;35m";$/;"	v
Bool	$C2_LIBDIR/../ast/builtin_type.c2	/^    [BuiltinKind.Bool] = true,$/;"	v
Bool	$C2_LIBDIR/../generator/c/c_generator_expr.c2	/^    [BuiltinKind.Bool] = false,$/;"	v
Bool	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^    [BuiltinKind.Bool]    = I8,    \/\/ TODO ir.Type.I1?$/;"	v
Bool	$C2_LIBDIR/../parser/c2_parser.c2	/^    Bool,       \/\/ KW_bool$/;"	v
BooleanLiteral	$C2_LIBDIR/../ast/expr.c2	/^    BooleanLiteral,$/;"	v
BooleanLiteralBits	$C2_LIBDIR/../ast/boolean_literal.c2	/^type BooleanLiteralBits struct {$/;"	t
Break	$C2_LIBDIR/../analyser/module_analyser_stmt.c2	/^    Break,$/;"	v
Break	$C2_LIBDIR/../analyser/scope.c2	/^public const u32 Break       = 0x2;$/;"	v
Break	$C2_LIBDIR/../ast/ast_evaluator.c2	/^    Break,      \/\/ break statement$/;"	v
Break	$C2_LIBDIR/../ast/stmt.c2	/^    Break,$/;"	v
Bred	$C2_LIBDIR/../ast_utils/color.c2	/^public const char[] Bred     = "\\033[01;31m";$/;"	v
Builder	$C2_LIBDIR/../ir/context.c2	/^type Builder struct {$/;"	t
Builtin	$C2_LIBDIR/../ast/expr.c2	/^    Builtin,$/;"	v
Builtin	$C2_LIBDIR/../ast/type.c2	/^    Builtin,$/;"	v
Builtin	$C2_LIBDIR/../ast/type_ref.c2	/^    Builtin,$/;"	v
BuiltinExprBits	$C2_LIBDIR/../ast/builtin_expr.c2	/^type BuiltinExprBits struct {$/;"	t
BuiltinTypeBits	$C2_LIBDIR/../ast/builtin_type.c2	/^type BuiltinTypeBits struct {$/;"	t
BuiltinType_default_sizes	$C2_LIBDIR/../ast/builtin_type.c2	/^const u32[] BuiltinType_default_sizes = {$/;"	v
BuiltinType_default_widths	$C2_LIBDIR/../ast/builtin_type.c2	/^const u32[] BuiltinType_default_widths = {$/;"	v
BuiltinType_integer	$C2_LIBDIR/../ast/builtin_type.c2	/^const bool[] BuiltinType_integer = {$/;"	v
BuiltinType_promotable	$C2_LIBDIR/../ast/builtin_type.c2	/^const bool[] BuiltinType_promotable = {$/;"	v
BuiltinType_signed	$C2_LIBDIR/../ast/builtin_type.c2	/^const bool[] BuiltinType_signed = {$/;"	v
BuiltinType_unsigned	$C2_LIBDIR/../ast/builtin_type.c2	/^const bool[] BuiltinType_unsigned = {$/;"	v
Byellow	$C2_LIBDIR/../ast_utils/color.c2	/^public const char[] Byellow  = "\\033[01;33m";$/;"	v
Byte	$C2_LIBDIR/../ir/init_value.c2	/^    Byte,       \/\/ stored in initvalue$/;"	v
C2_assert	$C2_LIBDIR/../generator/c/c_generator.c2	/^const char[] C2_assert =$/;"	v
C2_strswitch	$C2_LIBDIR/../generator/c/c_generator.c2	/^const char[] C2_strswitch =$/;"	v
C2_trace	$C2_LIBDIR/../compiler/compiler.c2	/^const char[] C2_trace @(embed="generator\/c2_trace.c2");$/;"	v
C2_types_header	$C2_LIBDIR/../generator/c/c_generator_special.c2	/^const char[] C2_types_header =$/;"	v
CARET	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^    CARET,$/;"	v
CDef	$C2_LIBDIR/../ast_utils/attr.c2	/^    [AttrKind.CDef]         = AttrReq.String,$/;"	v
CName	$C2_LIBDIR/../ast_utils/attr.c2	/^    [AttrKind.CName]        = AttrReq.String,$/;"	v
COLON	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^    COLON,$/;"	v
COMMA	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^    COMMA,$/;"	v
CR	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^    CR,$/;"	v
C_defines	$C2_LIBDIR/../generator/c/c_generator.c2	/^const char[] C_defines =$/;"	v
C_keywords	$C2_LIBDIR/../parser/keywords.c2	/^const char[] C_keywords = "alignas alignof auto constexpr do double extern"$/;"	v
C_types	$C2_LIBDIR/../generator/c/c_generator.c2	/^const char[] C_types =$/;"	v
Call	$C2_LIBDIR/../ast/expr.c2	/^    Call,$/;"	v
Call	$C2_LIBDIR/../ir/instr_kind.c2	/^    Call,$/;"	v
CallExprBits	$C2_LIBDIR/../ast/call_expr.c2	/^type CallExprBits struct {$/;"	t
Caps	$C2_LIBDIR/../ir/interference_graph.c2	/^const u16[NumArenas] Caps   = { 0, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 }$/;"	v
Caps	$C2_LIBDIR/../ir/live_map.c2	/^const u16[NumArenas] Caps   = { 0, 2, 4, 8, 16, 32, 64, 128, 256, }$/;"	v
Caps	$C2_LIBDIR/../ir/slot_writes_map.c2	/^const u16[NumArenas] Caps   = { 0, 2, 4, 8, 16, 32, 64, 128, 256, }$/;"	v
Caret	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    [Kind.Caret] = Bitwise,$/;"	v
Caret	$C2_LIBDIR/../parser/token.c2	/^    [Kind.Caret]            = "^",$/;"	v
CaretEqual	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    [Kind.CaretEqual]     = XorAssign,$/;"	v
CaretEqual	$C2_LIBDIR/../parser/token.c2	/^    [Kind.CaretEqual]       = "^=",$/;"	v
CastExprTokenLookup	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^const u8[128] CastExprTokenLookup = {$/;"	v
Category	$C2_LIBDIR/../common/diagnostics.c2	/^type Category enum u8 {$/;"	t
Char	$C2_LIBDIR/../analyser_utils/printf_utils.c2	/^    Char,           \/\/ %c$/;"	v
Char	$C2_LIBDIR/../ast/builtin_type.c2	/^    [BuiltinKind.Char] = true,$/;"	v
Char	$C2_LIBDIR/../generator/c/c_generator_expr.c2	/^    [BuiltinKind.Char] = false,$/;"	v
Char	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^    [BuiltinKind.Char]    = I8,$/;"	v
Char	$C2_LIBDIR/../parser/c2_parser.c2	/^    Char,       \/\/ KW_char$/;"	v
CharLiteral	$C2_LIBDIR/../ast/expr.c2	/^    CharLiteral,$/;"	v
CharLiteral	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    [Kind.CharLiteral] = 4,$/;"	v
CharLiteral	$C2_LIBDIR/../parser/token.c2	/^    [Kind.CharLiteral]      = "character",$/;"	v
CharLiteralBits	$C2_LIBDIR/../ast/char_literal.c2	/^type CharLiteralBits struct {$/;"	t
Char_lookup	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^const Action[256] Char_lookup = {$/;"	v
CheckPoint	$C2_LIBDIR/../common/source_mgr.c2	/^type CheckPoint struct {$/;"	t
CheckPointSize	$C2_LIBDIR/../common/source_mgr.c2	/^const u32 CheckPointSize = 128;$/;"	v
Checked	$C2_LIBDIR/../ast/decl.c2	/^    Checked,$/;"	v
Checker	$C2_LIBDIR/../analyser/unused_checker.c2	/^type Checker struct {$/;"	t
CmpEq	$C2_LIBDIR/../ir/instr_kind.c2	/^    CmpEq,$/;"	v
CmpGe	$C2_LIBDIR/../ir/instr_kind.c2	/^    CmpGe,$/;"	v
CmpGt	$C2_LIBDIR/../ir/instr_kind.c2	/^    CmpGt,$/;"	v
CmpLe	$C2_LIBDIR/../ir/instr_kind.c2	/^    CmpLe,$/;"	v
CmpLt	$C2_LIBDIR/../ir/instr_kind.c2	/^    CmpLt,$/;"	v
CmpNe	$C2_LIBDIR/../ir/instr_kind.c2	/^    CmpNe,$/;"	v
Colon	$C2_LIBDIR/../common/yaml/yaml_tokenizer.c2	/^    Colon,$/;"	v
Colon	$C2_LIBDIR/../parser/token.c2	/^    [Kind.Colon]            = ":",$/;"	v
Comma	$C2_LIBDIR/../common/c2_prec.c2	/^    Comma,          \/\/ ,$/;"	v
Comma	$C2_LIBDIR/../common/c_prec.c2	/^    Comma,          \/\/ ,$/;"	v
Comma	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    [Kind.Comma] = Comma,$/;"	v
Comma	$C2_LIBDIR/../parser/token.c2	/^    [Kind.Comma]            = ",",$/;"	v
Comment	$C2_LIBDIR/../ir/instr_kind.c2	/^    Comment, \/\/ KEEP THIS THE LAST OPERATION!$/;"	v
Compiler	$C2_LIBDIR/../compiler/compiler.c2	/^type Compiler struct {$/;"	t
Compound	$C2_LIBDIR/../ast/stmt.c2	/^    Compound,$/;"	v
CompoundStmtBits	$C2_LIBDIR/../ast/compound_stmt.c2	/^type CompoundStmtBits struct {$/;"	t
CondFalse	$C2_LIBDIR/../ir/block.c2	/^    CondFalse,$/;"	v
CondJoin	$C2_LIBDIR/../ir/block.c2	/^    CondJoin,$/;"	v
CondTrue	$C2_LIBDIR/../ir/block.c2	/^    CondTrue,$/;"	v
Conditional	$C2_LIBDIR/../common/c2_prec.c2	/^    Conditional,    \/\/ ?$/;"	v
Conditional	$C2_LIBDIR/../common/c_prec.c2	/^    Conditional,    \/\/ ?$/;"	v
ConditionalOperator	$C2_LIBDIR/../ast/expr.c2	/^    ConditionalOperator,$/;"	v
Config	$C2_LIBDIR/../compiler/c2recipe_parser.c2	/^    Config,$/;"	v
Constant	$C2_LIBDIR/../ir/constant.c2	/^type Constant struct {$/;"	t
ConstantList	$C2_LIBDIR/../ir/constant_list.c2	/^type ConstantList struct {$/;"	t
Constructor	$C2_LIBDIR/../ast_utils/attr.c2	/^    [AttrKind.Constructor]  = AttrReq.NoArg,$/;"	v
Cont	$C2_LIBDIR/../ast/ast_evaluator.c2	/^type Cont enum u8 {$/;"	t
Content1	$C2_LIBDIR/../plugins/unit_test_plugin.c2	/^const char[] Content1 @(embed="plugins\/unit_test1.c2");$/;"	v
Content2	$C2_LIBDIR/../plugins/unit_test_plugin.c2	/^const char[] Content2 @(embed="plugins\/unit_test2.c2");$/;"	v
Context	$C2_LIBDIR/../compiler/main.c2	/^type Context struct {$/;"	t
Continue	$C2_LIBDIR/../analyser/module_analyser_stmt.c2	/^    Continue,$/;"	v
Continue	$C2_LIBDIR/../analyser/scope.c2	/^public const u32 Continue    = 0x4;$/;"	v
Continue	$C2_LIBDIR/../ast/ast_evaluator.c2	/^    Continue,   \/\/ continue statement$/;"	v
Continue	$C2_LIBDIR/../ast/stmt.c2	/^    Continue,$/;"	v
Control	$C2_LIBDIR/../analyser/scope.c2	/^public const u32 Control     = 0x10;      \/\/ TODO remove?$/;"	v
Copy	$C2_LIBDIR/../ir/instr_kind.c2	/^    Copy,$/;"	v
Cyan	$C2_LIBDIR/../ast_utils/color.c2	/^public const char[] Cyan     = "\\033[0;36m";$/;"	v
DATA_ALIGN	$C2_LIBDIR/../ast_utils/string_pool.c2	/^const u32 DATA_ALIGN = 1 << INDEX_SHIFT;$/;"	v
DIGIT	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^    DIGIT,$/;"	v
DOT	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^    DOT,$/;"	v
DQUOTE	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^    DQUOTE,$/;"	v
Darkgrey	$C2_LIBDIR/../ast_utils/color.c2	/^public const char[] Darkgrey = "\\033[01;30m";$/;"	v
Dash	$C2_LIBDIR/../common/yaml/yaml_tokenizer.c2	/^    Dash,$/;"	v
Data	$C2_LIBDIR/../common/yaml/yaml_data.c2	/^type Data struct {$/;"	t
Decl	$C2_LIBDIR/../analyser/scope.c2	/^public const u32 Decl        = 0x8;$/;"	v
Decl	$C2_LIBDIR/../ast/stmt.c2	/^    Decl,$/;"	v
DeclBits	$C2_LIBDIR/../ast/decl.c2	/^type DeclBits struct {$/;"	t
DeclStmtBits	$C2_LIBDIR/../ast/decl_stmt.c2	/^type DeclStmtBits struct {$/;"	t
Dedent	$C2_LIBDIR/../common/yaml/yaml_tokenizer.c2	/^    Dedent,$/;"	v
Default	$C2_LIBDIR/../ast_utils/number_radix.c2	/^    Default,$/;"	v
Deref	$C2_LIBDIR/../ast/member_expr.c2	/^    Deref,      \/\/ Foo* -> Foo (ie *f)$/;"	v
Deref	$C2_LIBDIR/../ast/unary_operator.c2	/^    Deref,          \/\/ *a$/;"	v
Destructor	$C2_LIBDIR/../ast_utils/attr.c2	/^    [AttrKind.Destructor]   = AttrReq.NoArg,$/;"	v
DiagStaticThoughVar	$C2_LIBDIR/../analyser/module_analyser_member.c2	/^const char[] DiagStaticThoughVar = "cannot access static type-function through variable";$/;"	v
DiagTooFewArgs	$C2_LIBDIR/../analyser/module_analyser_call.c2	/^const char[] DiagTooFewArgs = "too few arguments to %sfunction call, expected %d, have %d";$/;"	v
DiagTooManyArgs	$C2_LIBDIR/../analyser/module_analyser_call.c2	/^const char[] DiagTooManyArgs = "too many arguments to %sfunction call, expected %d, have %d";$/;"	v
Dir	$C2_LIBDIR/../generator/c/c_generator.c2	/^const char[] Dir = "cgen";$/;"	v
Dir	$C2_LIBDIR/../plugins/deps_generator.c2	/^type Dir struct {$/;"	t
Directive	$C2_LIBDIR/../common/yaml/yaml_tokenizer.c2	/^    Directive,$/;"	v
DisableAsserts	$C2_LIBDIR/../compiler/c2recipe_parser.c2	/^    DisableAsserts,$/;"	v
Div	$C2_LIBDIR/../ir/instr_kind.c2	/^    Div,$/;"	v
DivAssign	$C2_LIBDIR/../analyser/module_analyser_binop.c2	/^    DivAssign,      int$/;"	v
DivAssign	$C2_LIBDIR/../ast/binary_operator.c2	/^    DivAssign,$/;"	v
DivAssign	$C2_LIBDIR/../common/c2_prec.c2	/^    [BinaryOpcode.DivAssign]   = Assignment,$/;"	v
DivAssign	$C2_LIBDIR/../common/c_prec.c2	/^    [BinaryOpcode.DivAssign]   = Assignment,$/;"	v
Divide	$C2_LIBDIR/../ast/binary_operator.c2	/^    Divide,$/;"	v
Divide	$C2_LIBDIR/../common/c2_prec.c2	/^    [BinaryOpcode.Divide]      = Multiplicative,$/;"	v
Divide	$C2_LIBDIR/../common/c_prec.c2	/^    [BinaryOpcode.Divide]      = Multiplicative,$/;"	v
Doc_End	$C2_LIBDIR/../common/yaml/yaml_tokenizer.c2	/^    Doc_End,$/;"	v
Doc_Start	$C2_LIBDIR/../common/yaml/yaml_tokenizer.c2	/^    Doc_Start,$/;"	v
Dot	$C2_LIBDIR/../parser/token.c2	/^    [Kind.Dot]              = ".",$/;"	v
Double	$C2_LIBDIR/../ir/ref.c2	/^    Double,    \/\/ constant_idx$/;"	v
Double_Quoted_Scalar	$C2_LIBDIR/../common/yaml/yaml_tokenizer.c2	/^    Double_Quoted_Scalar,$/;"	v
DynamicLibrary	$C2_LIBDIR/../common/build_target.c2	/^    DynamicLibrary,$/;"	v
DynamicLibrary	$C2_LIBDIR/../common/component.c2	/^    DynamicLibrary,$/;"	v
EOF	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^    EOF,$/;"	v
EQUAL	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^    EQUAL,$/;"	v
EXCLAIM	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^    EXCLAIM,$/;"	v
Elemsof	$C2_LIBDIR/../ast/builtin_expr.c2	/^    Elemsof,$/;"	v
Ellipsis	$C2_LIBDIR/../parser/token.c2	/^    [Kind.Ellipsis]         = "...",$/;"	v
Embed	$C2_LIBDIR/../ast_utils/attr.c2	/^    [AttrKind.Embed]        = AttrReq.String,$/;"	v
End	$C2_LIBDIR/../compiler/c2recipe_parser.c2	/^    End,$/;"	v
Entry	$C2_LIBDIR/../common/attr_handler.c2	/^type Entry struct {$/;"	t
Enum	$C2_LIBDIR/../ast/type.c2	/^    Enum,$/;"	v
EnumConstant	$C2_LIBDIR/../ast/decl.c2	/^    EnumConstant,$/;"	v
EnumConstant	$C2_LIBDIR/../ast/identifier_expr.c2	/^    EnumConstant,$/;"	v
EnumConstantDeclBits	$C2_LIBDIR/../ast/enum_constant_decl.c2	/^type EnumConstantDeclBits struct {$/;"	t
EnumMax	$C2_LIBDIR/../ast/builtin_expr.c2	/^    EnumMax,$/;"	v
EnumMin	$C2_LIBDIR/../ast/builtin_expr.c2	/^    EnumMin,$/;"	v
EnumType	$C2_LIBDIR/../ast/decl.c2	/^    EnumType,$/;"	v
EnumTypeDeclBits	$C2_LIBDIR/../ast/enum_type_decl.c2	/^type EnumTypeDeclBits struct {$/;"	t
Eof	$C2_LIBDIR/../common/yaml/yaml_tokenizer.c2	/^    Eof,$/;"	v
Eof	$C2_LIBDIR/../compiler/c2recipe_parser.c2	/^    Eof,$/;"	v
Eof	$C2_LIBDIR/../parser/token.c2	/^    [Kind.Eof]              = "eof",$/;"	v
Equal	$C2_LIBDIR/../analyser/module_analyser_binop.c2	/^    Equal,          ptr(both), int (both)$/;"	v
Equal	$C2_LIBDIR/../ast/binary_operator.c2	/^    Equal,$/;"	v
Equal	$C2_LIBDIR/../common/c2_prec.c2	/^    [BinaryOpcode.Equal]       = Relational,$/;"	v
Equal	$C2_LIBDIR/../common/c_prec.c2	/^    [BinaryOpcode.Equal]       = Equality,$/;"	v
Equal	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    [Kind.Equal]          = Assign,$/;"	v
Equal	$C2_LIBDIR/../parser/token.c2	/^    [Kind.Equal]            = "=",$/;"	v
EqualEqual	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    [Kind.EqualEqual]   = Relational,$/;"	v
EqualEqual	$C2_LIBDIR/../parser/token.c2	/^    [Kind.EqualEqual]       = "==",$/;"	v
Equality	$C2_LIBDIR/../common/c_prec.c2	/^    Equality,       \/\/ !=, ==$/;"	v
Err_not_a_file	$C2_LIBDIR/../common/file/file_utils.c2	/^const i32 Err_not_a_file = 2001;$/;"	v
Err_read_error	$C2_LIBDIR/../common/file/file_utils.c2	/^const i32 Err_read_error = 2002;$/;"	v
Err_too_large	$C2_LIBDIR/../common/file/file_utils.c2	/^const i32 Err_too_large = 2003;$/;"	v
Err_write_error	$C2_LIBDIR/../common/file/file_utils.c2	/^const i32 Err_write_error = 2004;$/;"	v
Error	$C2_LIBDIR/../analyser/module_analyser_stmt.c2	/^    Error,$/;"	v
Error	$C2_LIBDIR/../ast/ast_evaluator.c2	/^    Error,      \/\/ evaluation error (eg: overflow, complexity, stack overflow)$/;"	v
Error	$C2_LIBDIR/../ast/value.c2	/^    Error,$/;"	v
Error	$C2_LIBDIR/../common/diagnostics.c2	/^    Error,$/;"	v
Error	$C2_LIBDIR/../common/yaml/yaml_tokenizer.c2	/^    Error,$/;"	v
Error	$C2_LIBDIR/../parser/token.c2	/^    [Kind.Error]            = "error",$/;"	v
Evaluator	$C2_LIBDIR/../ast/ast_evaluator.c2	/^type Evaluator struct {$/;"	t
Evaluator	$C2_LIBDIR/../generator/c/c_generator_pure_call.c2	/^type Evaluator struct {$/;"	t
Exclaim	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    [Kind.Exclaim] = 7,$/;"	v
Exclaim	$C2_LIBDIR/../parser/token.c2	/^    [Kind.Exclaim]          = "!",$/;"	v
ExclaimEqual	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    [Kind.ExclaimEqual] = Relational,$/;"	v
ExclaimEqual	$C2_LIBDIR/../parser/token.c2	/^    [Kind.ExclaimEqual]     = "!=",$/;"	v
Executable	$C2_LIBDIR/../common/build_target.c2	/^    Executable,$/;"	v
Executable	$C2_LIBDIR/../common/component.c2	/^    Executable,$/;"	v
Executable	$C2_LIBDIR/../compiler/c2recipe_parser.c2	/^    Executable,$/;"	v
ExplicitCast	$C2_LIBDIR/../ast/expr.c2	/^    ExplicitCast,$/;"	v
ExplicitCastExprBits	$C2_LIBDIR/../ast/explicit_cast_expr.c2	/^type ExplicitCastExprBits struct {$/;"	t
Export	$C2_LIBDIR/../ast_utils/attr.c2	/^    [AttrKind.Export]       = AttrReq.NoArg,$/;"	v
Export	$C2_LIBDIR/../compiler/c2recipe_parser.c2	/^    Export,$/;"	v
Expr	$C2_LIBDIR/../ast/stmt.c2	/^    Expr,$/;"	v
ExprBits	$C2_LIBDIR/../ast/expr.c2	/^type ExprBits struct {$/;"	t
ExprWidth	$C2_LIBDIR/../analyser/conversion_checker_expr.c2	/^type ExprWidth struct {$/;"	t
ExternalDynamic	$C2_LIBDIR/../common/component.c2	/^    ExternalDynamic,$/;"	v
ExternalStatic	$C2_LIBDIR/../common/component.c2	/^    ExternalStatic, \/\/ must be first external kind$/;"	v
F32	$C2_LIBDIR/../ir/context.c2	/^    [Type.F32] = InstrKind.Store4,$/;"	v
F32	$C2_LIBDIR/../ir/types.c2	/^    F32,$/;"	v
F64	$C2_LIBDIR/../ir/context.c2	/^    [Type.F64] = InstrKind.Store8,$/;"	v
F64	$C2_LIBDIR/../ir/types.c2	/^    F64,$/;"	v
FP64	$C2_LIBDIR/../ast/value.c2	/^type FP64 union { f64 d; u64 bits; }$/;"	t
Fallthrough	$C2_LIBDIR/../ast/stmt.c2	/^    Fallthrough,$/;"	v
Feat_elif	$C2_LIBDIR/../parser/token.c2	/^    [Kind.Feat_elif]        = "#elif",$/;"	v
Feat_else	$C2_LIBDIR/../parser/token.c2	/^    [Kind.Feat_else]        = "#else",$/;"	v
Feat_endif	$C2_LIBDIR/../parser/token.c2	/^    [Kind.Feat_endif]       = "#endif",$/;"	v
Feat_error	$C2_LIBDIR/../parser/token.c2	/^    [Kind.Feat_error]       = "#error",$/;"	v
Feat_if	$C2_LIBDIR/../parser/token.c2	/^    [Kind.Feat_if]          = "#if",$/;"	v
Feat_ifdef	$C2_LIBDIR/../parser/token.c2	/^    [Kind.Feat_ifdef]       = "#ifdef",$/;"	v
Feat_ifndef	$C2_LIBDIR/../parser/token.c2	/^    [Kind.Feat_ifndef]      = "#ifndef",$/;"	v
Feat_warning	$C2_LIBDIR/../parser/token.c2	/^    [Kind.Feat_warning]     = "#warning",$/;"	v
FieldDesignatedInit	$C2_LIBDIR/../ast/expr.c2	/^    FieldDesignatedInit,$/;"	v
FieldInit	$C2_LIBDIR/../generator/ir/field_struct_layouter.c2	/^type FieldInit struct {$/;"	t
FieldStructLayouter	$C2_LIBDIR/../generator/ir/field_struct_layouter.c2	/^type FieldStructLayouter struct {$/;"	t
File	$C2_LIBDIR/../ast/var_decl.c2	/^    File,$/;"	v
File	$C2_LIBDIR/../common/source_mgr.c2	/^type File struct {$/;"	t
File	$C2_LIBDIR/../compiler/c2recipe_parser.c2	/^    File,$/;"	v
File	$C2_LIBDIR/../generator/c2refs.c2	/^type File struct {$/;"	t
FileIndexSize	$C2_LIBDIR/../common/source_mgr.c2	/^const u32 FileIndexSize = 4096;$/;"	v
Files	$C2_LIBDIR/../generator/c2refs.c2	/^type Files struct {$/;"	t
FillInfo	$C2_LIBDIR/../analyser/module_analyser_init.c2	/^type FillInfo struct {$/;"	t
Float	$C2_LIBDIR/../ast/value.c2	/^    Float,$/;"	v
Float	$C2_LIBDIR/../ir/ref.c2	/^    Float,     \/\/ constant_idx$/;"	v
Float32	$C2_LIBDIR/../analyser/conversion_checker.c2	/^     4 Float32,$/;"	v
Float32	$C2_LIBDIR/../ast/builtin_type.c2	/^    [BuiltinKind.Float32] = true,$/;"	v
Float32	$C2_LIBDIR/../generator/c/c_generator_expr.c2	/^    [BuiltinKind.Float32] = false,$/;"	v
Float32	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^    [BuiltinKind.Float32] = F32,$/;"	v
Float32	$C2_LIBDIR/../parser/c2_parser.c2	/^    Float32,    \/\/ KW_f32$/;"	v
Float64	$C2_LIBDIR/../analyser/conversion_checker.c2	/^     5 Float64,$/;"	v
Float64	$C2_LIBDIR/../ast/builtin_type.c2	/^    [BuiltinKind.Float64] = true,$/;"	v
Float64	$C2_LIBDIR/../generator/c/c_generator_expr.c2	/^    [BuiltinKind.Float64] = true,$/;"	v
Float64	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^    [BuiltinKind.Float64] = F64,$/;"	v
Float64	$C2_LIBDIR/../parser/c2_parser.c2	/^    Float64,    \/\/ KW_f64$/;"	v
FloatLiteral	$C2_LIBDIR/../ast/expr.c2	/^    FloatLiteral,$/;"	v
FloatLiteral	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    [Kind.FloatLiteral] = 3,$/;"	v
FloatLiteral	$C2_LIBDIR/../parser/token.c2	/^    [Kind.FloatLiteral]     = "float",$/;"	v
FloatLiteralBits	$C2_LIBDIR/../ast/float_literal.c2	/^type FloatLiteralBits struct {$/;"	t
FloatingPoint	$C2_LIBDIR/../analyser_utils/printf_utils.c2	/^    FloatingPoint,  \/\/ %f$/;"	v
Flow	$C2_LIBDIR/../analyser/module_analyser_stmt.c2	/^type Flow enum u8 {$/;"	t
FlowBits	$C2_LIBDIR/../analyser/module_analyser_stmt.c2	/^type FlowBits u32;$/;"	t
FlowBreak	$C2_LIBDIR/../analyser/module_analyser_stmt.c2	/^const FlowBits FlowBreak     = 1 << Flow.Break;$/;"	v
FlowContinue	$C2_LIBDIR/../analyser/module_analyser_stmt.c2	/^const FlowBits FlowContinue  = 1 << Flow.Continue;$/;"	v
FlowError	$C2_LIBDIR/../analyser/module_analyser_stmt.c2	/^const FlowBits FlowError     = 1 << Flow.Error;$/;"	v
FlowError	$C2_LIBDIR/../analyser/module_analyser_switch.c2	/^    return FlowError;$/;"	v
FlowGoto	$C2_LIBDIR/../analyser/module_analyser_stmt.c2	/^const FlowBits FlowGoto      = 1 << Flow.Goto;$/;"	v
FlowNext	$C2_LIBDIR/../analyser/module_analyser_stmt.c2	/^const FlowBits FlowNext      = 1 << Flow.Next;$/;"	v
FlowNext	$C2_LIBDIR/../analyser/module_analyser_switch.c2	/^        return FlowNext;$/;"	v
FlowNoReturn	$C2_LIBDIR/../analyser/module_analyser_stmt.c2	/^const FlowBits FlowNoReturn  = 1 << Flow.NoReturn;$/;"	v
FlowReturn	$C2_LIBDIR/../analyser/module_analyser_stmt.c2	/^const FlowBits FlowReturn    = 1 << Flow.Return;$/;"	v
FnStart	$C2_LIBDIR/../ir/block.c2	/^    FnStart,$/;"	v
For	$C2_LIBDIR/../ast/stmt.c2	/^    For,$/;"	v
ForBody	$C2_LIBDIR/../ir/block.c2	/^    ForBody,$/;"	v
ForCond	$C2_LIBDIR/../ir/block.c2	/^    ForCond,$/;"	v
ForCont	$C2_LIBDIR/../ir/block.c2	/^    ForCont,$/;"	v
ForJoin	$C2_LIBDIR/../ir/block.c2	/^    ForJoin,$/;"	v
FormatAnalyser	$C2_LIBDIR/../analyser/module_analyser_call.c2	/^type FormatAnalyser struct {$/;"	t
FormatChanger	$C2_LIBDIR/../generator/c/c_generator_expr.c2	/^type FormatChanger struct {$/;"	t
Fragment	$C2_LIBDIR/../generator/c/c_generator.c2	/^type Fragment struct {$/;"	t
Fun	$C2_LIBDIR/../ast/ast_evaluator.c2	/^type Fun union {$/;"	t
FunDD	$C2_LIBDIR/../ast/ast_evaluator.c2	/^type FunDD fn i64 (f64 a);$/;"	t
FunII	$C2_LIBDIR/../ast/ast_evaluator.c2	/^type FunII fn i32 (i32 a);$/;"	t
Func	$C2_LIBDIR/../ast/var_decl.c2	/^    Func,$/;"	v
Function	$C2_LIBDIR/../analyser/scope.c2	/^public const u32 Function    = 0x1;$/;"	v
Function	$C2_LIBDIR/../ast/decl.c2	/^    Function,$/;"	v
Function	$C2_LIBDIR/../ast/identifier_expr.c2	/^    Function,$/;"	v
Function	$C2_LIBDIR/../ast/type.c2	/^    Function,$/;"	v
FunctionDeclBits	$C2_LIBDIR/../ast/function_decl.c2	/^type FunctionDeclBits struct {$/;"	t
FunctionDeclFlags	$C2_LIBDIR/../ast/function_decl.c2	/^type FunctionDeclFlags struct {$/;"	t
FunctionParam	$C2_LIBDIR/../ast/var_decl.c2	/^    FunctionParam,$/;"	v
FunctionType	$C2_LIBDIR/../ast/decl.c2	/^    FunctionType,$/;"	v
GREATER	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^    GREATER,$/;"	v
Generator	$C2_LIBDIR/../generator/c/c_generator.c2	/^type Generator struct {$/;"	t
Generator	$C2_LIBDIR/../generator/c2i/c2i_generator.c2	/^type Generator struct {$/;"	t
Generator	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^type Generator struct {$/;"	t
Generator	$C2_LIBDIR/../plugins/deps_generator.c2	/^type Generator struct {$/;"	t
Generator	$C2_LIBDIR/../plugins/refs_generator.c2	/^type Generator struct {$/;"	t
GlobalVar	$C2_LIBDIR/../ast/var_decl.c2	/^    GlobalVar,$/;"	v
Goto	$C2_LIBDIR/../analyser/module_analyser_stmt.c2	/^    Goto,$/;"	v
Goto	$C2_LIBDIR/../ast/ast_evaluator.c2	/^    Goto,       \/\/ goto statement (unsupported yet)$/;"	v
Goto	$C2_LIBDIR/../ast/stmt.c2	/^    Goto,$/;"	v
Greater	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    [Kind.Greater]      = Relational,$/;"	v
Greater	$C2_LIBDIR/../parser/token.c2	/^    [Kind.Greater]          = ">",$/;"	v
GreaterEqual	$C2_LIBDIR/../analyser/module_analyser_binop.c2	/^    GreaterEqual,   ptr(both), int (hoth)$/;"	v
GreaterEqual	$C2_LIBDIR/../ast/binary_operator.c2	/^    GreaterEqual,$/;"	v
GreaterEqual	$C2_LIBDIR/../common/c2_prec.c2	/^    [BinaryOpcode.GreaterEqual] = Relational,$/;"	v
GreaterEqual	$C2_LIBDIR/../common/c_prec.c2	/^    [BinaryOpcode.GreaterEqual] = Relative,$/;"	v
GreaterEqual	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    [Kind.GreaterEqual] = Relational,$/;"	v
GreaterEqual	$C2_LIBDIR/../parser/token.c2	/^    [Kind.GreaterEqual]     = ">=",$/;"	v
GreaterGreater	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    [Kind.GreaterGreater] = ShiftRight,$/;"	v
GreaterGreater	$C2_LIBDIR/../parser/token.c2	/^    [Kind.GreaterGreater]   = ">>",$/;"	v
GreaterGreaterEqual	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    [Kind.GreaterGreaterEqual] = ShrAssign,$/;"	v
GreaterGreaterEqual	$C2_LIBDIR/../parser/token.c2	/^    [Kind.GreaterGreaterEqual] = ">>=",$/;"	v
GreaterThan	$C2_LIBDIR/../analyser/module_analyser_binop.c2	/^    GreaterThan,    ptr(both), int (both)$/;"	v
GreaterThan	$C2_LIBDIR/../ast/binary_operator.c2	/^    GreaterThan,$/;"	v
GreaterThan	$C2_LIBDIR/../common/c2_prec.c2	/^    [BinaryOpcode.GreaterThan] = Relational,$/;"	v
GreaterThan	$C2_LIBDIR/../common/c_prec.c2	/^    [BinaryOpcode.GreaterThan] = Relative,$/;"	v
Green	$C2_LIBDIR/../ast_utils/color.c2	/^public const char[] Green    = "\\033[0;32m";$/;"	v
Green	$C2_LIBDIR/../plugins/unit_test2.c2	/^public const char[] Green    = "\\033[0;32m";$/;"	v
Grey	$C2_LIBDIR/../ast_utils/color.c2	/^public const char[] Grey     = "\\033[0;37m";$/;"	v
HASH_BUCKETS	$C2_LIBDIR/../generator/c/c_generator_trace.c2	/^const u32 HASH_BUCKETS = 256;$/;"	v
HASH_INITIAL	$C2_LIBDIR/../ast_utils/string_pool.c2	/^const u32 HASH_INITIAL = 13;$/;"	v
HASH_INITIAL	$C2_LIBDIR/../generator/c/c_generator_trace.c2	/^const u32 HASH_INITIAL = 13;$/;"	v
HASH_PRIME	$C2_LIBDIR/../ast_utils/string_pool.c2	/^const u32 HASH_PRIME = 17;$/;"	v
HASH_PRIME	$C2_LIBDIR/../generator/c/c_generator_trace.c2	/^const u32 HASH_PRIME = 17;$/;"	v
Halt	$C2_LIBDIR/../ir/instr_kind.c2	/^    Halt,$/;"	v
HashEntry	$C2_LIBDIR/../ast_utils/string_pool.c2	/^type HashEntry u64;$/;"	t
Hex	$C2_LIBDIR/../ast_utils/number_radix.c2	/^    Hex,$/;"	v
I16	$C2_LIBDIR/../ir/context.c2	/^    [Type.I16] = InstrKind.Store2,$/;"	v
I16	$C2_LIBDIR/../ir/types.c2	/^    I16,$/;"	v
I32	$C2_LIBDIR/../ir/context.c2	/^    [Type.I32] = InstrKind.Store4,$/;"	v
I32	$C2_LIBDIR/../ir/types.c2	/^    I32,$/;"	v
I64	$C2_LIBDIR/../ir/context.c2	/^    [Type.I64] = InstrKind.Store8,$/;"	v
I64	$C2_LIBDIR/../ir/types.c2	/^    I64,$/;"	v
I8	$C2_LIBDIR/../ir/context.c2	/^    [Type.I8]  = InstrKind.Store1,$/;"	v
I8	$C2_LIBDIR/../ir/types.c2	/^    I8,$/;"	v
IDENT	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^    IDENT,$/;"	v
IDiv	$C2_LIBDIR/../ir/instr_kind.c2	/^    IDiv,$/;"	v
INDEX_BITS	$C2_LIBDIR/../ast_utils/string_pool.c2	/^const u64 INDEX_BITS = 0xffffffff;$/;"	v
INDEX_SHIFT	$C2_LIBDIR/../ast_utils/string_pool.c2	/^const u32 INDEX_SHIFT = 2;$/;"	v
INVALID	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^    INVALID = 0,  \/\/ ensure the default Action in Char_lookup is INVALID$/;"	v
IR	$C2_LIBDIR/../common/build_target.c2	/^    IR,$/;"	v
ISize	$C2_LIBDIR/../ast/builtin_type.c2	/^    [BuiltinKind.ISize] = true,$/;"	v
ISize	$C2_LIBDIR/../generator/c/c_generator_expr.c2	/^    [BuiltinKind.ISize] = true,$/;"	v
ISize	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^    [BuiltinKind.ISize]   = I64,  \/\/ TODO 32-bit$/;"	v
ISize	$C2_LIBDIR/../parser/c2_parser.c2	/^    ISize,      \/\/ KW_isize$/;"	v
Identifier	$C2_LIBDIR/../ast/expr.c2	/^    Identifier,$/;"	v
Identifier	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    [Kind.Identifier] = 1,$/;"	v
Identifier	$C2_LIBDIR/../parser/token.c2	/^    [Kind.Identifier]       = "identifier",$/;"	v
IdentifierExprBits	$C2_LIBDIR/../ast/identifier_expr.c2	/^type IdentifierExprBits struct {$/;"	t
Identifier_char	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^const u8[256] Identifier_char = {$/;"	v
If	$C2_LIBDIR/../ast/stmt.c2	/^    If,$/;"	v
IfFalse	$C2_LIBDIR/../ir/block.c2	/^    IfFalse,$/;"	v
IfJoin	$C2_LIBDIR/../ir/block.c2	/^    IfJoin,$/;"	v
IfStmtBits	$C2_LIBDIR/../ast/if_stmt.c2	/^type IfStmtBits struct {$/;"	t
IfTrue	$C2_LIBDIR/../ir/block.c2	/^    IfTrue,$/;"	v
Image	$C2_LIBDIR/../common/build_target.c2	/^    Image,$/;"	v
Image	$C2_LIBDIR/../common/component.c2	/^    Image,$/;"	v
Image	$C2_LIBDIR/../compiler/c2recipe_parser.c2	/^    Image,$/;"	v
ImplicitCast	$C2_LIBDIR/../ast/expr.c2	/^    ImplicitCast,$/;"	v
ImplicitCastBits	$C2_LIBDIR/../ast/implicit_cast_expr.c2	/^type ImplicitCastBits struct {$/;"	t
Import	$C2_LIBDIR/../ast/decl.c2	/^    Import,$/;"	v
ImportDeclBits	$C2_LIBDIR/../ast/import_decl.c2	/^type ImportDeclBits struct {$/;"	t
InProgress	$C2_LIBDIR/../ast/decl.c2	/^    InProgress,$/;"	v
Include_guard1	$C2_LIBDIR/../generator/c/c_generator.c2	/^const char[] Include_guard1 =$/;"	v
Indent	$C2_LIBDIR/../common/yaml/yaml_tokenizer.c2	/^    Indent,$/;"	v
InitList	$C2_LIBDIR/../ast/expr.c2	/^    InitList,$/;"	v
InitListExprBits	$C2_LIBDIR/../ast/init_list_expr.c2	/^type InitListExprBits struct {$/;"	t
InitValue	$C2_LIBDIR/../ir/init_value.c2	/^type InitValue struct {$/;"	t
InitValueKind	$C2_LIBDIR/../ir/init_value.c2	/^type InitValueKind enum u8 {$/;"	t
InitValueList	$C2_LIBDIR/../ir/init_value_list.c2	/^type InitValueList struct {$/;"	t
InitialMaxFiles	$C2_LIBDIR/../common/source_mgr.c2	/^const u32 InitialMaxFiles = 32;$/;"	v
Inline	$C2_LIBDIR/../ast_utils/attr.c2	/^    [AttrKind.Inline]       = AttrReq.NoArg,$/;"	v
InstanceTable	$C2_LIBDIR/../ast/instance_table.c2	/^type InstanceTable struct {$/;"	t
Int16	$C2_LIBDIR/../ast/builtin_type.c2	/^    [BuiltinKind.Int16] = true,$/;"	v
Int16	$C2_LIBDIR/../generator/c/c_generator_expr.c2	/^    [BuiltinKind.Int16] = false,$/;"	v
Int16	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^    [BuiltinKind.Int16]   = I16,$/;"	v
Int16	$C2_LIBDIR/../parser/c2_parser.c2	/^    Int16,      \/\/ KW_i16$/;"	v
Int32	$C2_LIBDIR/../ast/builtin_type.c2	/^    [BuiltinKind.Int32] = true,$/;"	v
Int32	$C2_LIBDIR/../generator/c/c_generator_expr.c2	/^    [BuiltinKind.Int32] = false,$/;"	v
Int32	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^    [BuiltinKind.Int32]   = I32,$/;"	v
Int32	$C2_LIBDIR/../parser/c2_parser.c2	/^    Int32,      \/\/ KW_i32$/;"	v
Int64	$C2_LIBDIR/../analyser/conversion_checker.c2	/^     2 Int64,$/;"	v
Int64	$C2_LIBDIR/../ast/builtin_type.c2	/^    [BuiltinKind.Int64] = true,$/;"	v
Int64	$C2_LIBDIR/../generator/c/c_generator_expr.c2	/^    [BuiltinKind.Int64] = true,$/;"	v
Int64	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^    [BuiltinKind.Int64]   = I64,$/;"	v
Int64	$C2_LIBDIR/../parser/c2_parser.c2	/^    Int64,      \/\/ KW_i64$/;"	v
Int8	$C2_LIBDIR/../ast/builtin_type.c2	/^    [BuiltinKind.Int8] = true,$/;"	v
Int8	$C2_LIBDIR/../generator/c/c_generator_expr.c2	/^    [BuiltinKind.Int8] = false,$/;"	v
Int8	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^    [BuiltinKind.Int8]    = I8,$/;"	v
Int8	$C2_LIBDIR/../parser/c2_parser.c2	/^    Int8,       \/\/ KW_i8$/;"	v
Integer	$C2_LIBDIR/../analyser_utils/printf_utils.c2	/^    Integer,        \/\/ %i, %-i, %-8i, %08i, %x, %o$/;"	v
Integer	$C2_LIBDIR/../ast/value.c2	/^    Integer,$/;"	v
Integer	$C2_LIBDIR/../ir/ref.c2	/^    Integer,   \/\/ constant_idx$/;"	v
IntegerLiteral	$C2_LIBDIR/../ast/expr.c2	/^    IntegerLiteral,$/;"	v
IntegerLiteral	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    [Kind.IntegerLiteral] = 2,$/;"	v
IntegerLiteral	$C2_LIBDIR/../parser/token.c2	/^    [Kind.IntegerLiteral]   = "integer",$/;"	v
IntegerLiteralBits	$C2_LIBDIR/../ast/integer_literal.c2	/^type IntegerLiteralBits struct {$/;"	t
IntegralCast	$C2_LIBDIR/../ast/implicit_cast_expr.c2	/^    IntegralCast,$/;"	v
Internal	$C2_LIBDIR/../common/component.c2	/^    Internal,$/;"	v
Invalid	$C2_LIBDIR/../analyser_utils/printf_utils.c2	/^    Invalid,        \/\/ other$/;"	v
Invalid	$C2_LIBDIR/../ast/function_decl.c2	/^    Invalid,$/;"	v
Invalid	$C2_LIBDIR/../parser/token.c2	/^    [Kind.Invalid]          = "invalid",$/;"	v
Iter	$C2_LIBDIR/../generator/radix_tree/radix_tree.c2	/^type Iter struct {$/;"	t
Jmp	$C2_LIBDIR/../ir/instr_kind.c2	/^    Jmp,$/;"	v
JmpDest	$C2_LIBDIR/../ir/ref.c2	/^    JmpDest,   \/\/ for jmp\/jmp_if, value is cur BlockId$/;"	v
JmpIf	$C2_LIBDIR/../ir/instr_kind.c2	/^    JmpIf,$/;"	v
JumpScope	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^type JumpScope struct {$/;"	t
KIND	$C2_LIBDIR/../analyser/conversion_checker.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../analyser/conversion_checker_expr.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../analyser/incr_array_list.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../analyser/init_checker.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../analyser/label_vector.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../analyser/module_analyser.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../analyser/module_analyser_binop.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../analyser/module_analyser_builtin.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../analyser/module_analyser_call.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../analyser/module_analyser_expr.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../analyser/module_analyser_function.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../analyser/module_analyser_init.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../analyser/module_analyser_member.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../analyser/module_analyser_stmt.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../analyser/module_analyser_struct.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../analyser/module_analyser_switch.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../analyser/module_analyser_type.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../analyser/module_analyser_unaryop.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../analyser/module_sorter.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../analyser/name_vector.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../analyser/scope.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../analyser/size_analyser.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../analyser/struct_field_init_checker.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../analyser/struct_func_list.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../analyser/unused_checker.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../analyser_utils/ctv_analyser.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../analyser_utils/printf_utils.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast/alias_type.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast/alias_type_decl.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast/array_designated_init_expr.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast/array_subscript_expr.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast/array_type.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast/array_value.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast/array_value_list.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast/asm_stmt.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast/assert_stmt.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast/ast.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast/ast_evaluator.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast/binary_operator.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast/bitoffset_expr.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast/boolean_literal.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast/break_stmt.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast/builtin_expr.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast/builtin_type.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast/call_expr.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast/char_literal.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast/compound_stmt.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast/conditional_operator.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast/continue_stmt.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast/decl.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast/decl_list.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast/decl_stmt.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast/enum_constant_decl.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast/enum_type.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast/enum_type_decl.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast/explicit_cast_expr.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast/expr.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast/expr_list.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast/fallthrough_stmt.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast/field_designated_init_expr.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast/float_literal.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast/for_stmt.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast/function_decl.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast/function_decl_list.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast/function_type.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast/function_type_decl.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast/goto_stmt.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast/identifier_expr.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast/if_stmt.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast/implicit_cast_expr.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast/import_decl.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast/import_decl_list.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast/init_list_expr.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast/instance_table.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast/instantiator.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast/integer_literal.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast/label_stmt.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast/member_expr.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast/module.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast/module_type.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast/nil_expr.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast/paren_expr.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast/pointer_pool.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast/pointer_type.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast/qualtype.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast/range_expr.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast/return_stmt.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast/static_assert.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast/static_assert_list.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast/statistics.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast/stmt.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast/string_literal.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast/string_type_pool.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast/struct_type.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast/struct_type_decl.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast/switch_case.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast/switch_stmt.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast/symbol_table.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast/type.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast/type_expr.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast/type_ref.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast/unary_operator.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast/utils.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast/value.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast/var_decl.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast/while_stmt.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast_utils/attr.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast_utils/attr_table.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast_utils/color.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast_utils/constants.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast_utils/context.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast_utils/number_radix.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast_utils/src_loc.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast_utils/string_buffer.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ast_utils/string_pool.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../common/attr_handler.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../common/bit_array.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../common/bit_utils.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../common/build_file.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../common/build_target.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../common/c2_prec.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../common/c_prec.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../common/component.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../common/component_sorter.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../common/console.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../common/diagnostics.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../common/dsm_sorter.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../common/file/file_utils.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../common/file/reader.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../common/file/writer.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../common/index_list.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../common/library_list.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../common/linked_list.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../common/manifest_writer.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../common/module_list.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../common/process_utils.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../common/quicksort.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../common/source_mgr.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../common/string_list.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../common/string_utils.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../common/target_info.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../common/utf8.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../common/utils.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../common/value_maplist.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../common/warning_flags.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../common/yaml/yaml_data.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../common/yaml/yaml_dump.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../common/yaml/yaml_iterator.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../common/yaml/yaml_parser.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../common/yaml/yaml_tokenizer.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../compiler/c2recipe.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../compiler/c2recipe_parser.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../compiler/c2recipe_yaml.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../compiler/compiler.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../compiler/compiler_libs.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../compiler/main.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../compiler/manifest.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../compiler/plugin_mgr.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../generator/ast_visitor.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../generator/ast_visitor_expr.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../generator/c/c_generator.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../generator/c/c_generator_call.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../generator/c/c_generator_expr.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../generator/c/c_generator_pure_call.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../generator/c/c_generator_special.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../generator/c/c_generator_stmt.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../generator/c/c_generator_trace.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../generator/c/dep_finder.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../generator/c2i/c2i_generator.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../generator/c2i/c2i_generator_decl.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../generator/c2i/c2i_generator_expr.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../generator/c2i/c2i_generator_stmt.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../generator/c2refs.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../generator/generator_utils.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../generator/ir/array_init_sorter.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../generator/ir/basic_struct_layouter.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../generator/ir/field_struct_layouter.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../generator/ir/ir_generator_binop.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../generator/ir/ir_generator_call.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../generator/ir/ir_generator_expr.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../generator/ir/ir_generator_locals.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../generator/ir/ir_generator_member.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../generator/ir/ir_generator_stmt.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../generator/ir/ir_generator_switch.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../generator/ir/ref_list.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../generator/radix_tree/radix_tree.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../generator/radix_tree/radix_tree_dump.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../generator/radix_tree/radix_tree_fs.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ir/block.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ir/block_list.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ir/case_list.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ir/common.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ir/constant.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ir/constant_list.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ir/context.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ir/copy_list.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ir/function_info.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ir/graphviz.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ir/init_value.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ir/init_value_list.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ir/inserter.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ir/instr.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ir/instr_kind.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ir/instr_list.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ir/interference_graph.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ir/live_map.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ir/lookup_table.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ir/phi_list.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ir/print.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ir/ref.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ir/register_alloc.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ir/rev_list.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ir/rpo.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ir/slot_collector.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ir/slot_values.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ir/slot_writes_map.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ir/ssa.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ir/switch.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ir/symbol_list.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ir/types.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../ir/work_queue.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../parser/ast_builder.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../parser/c2_parser.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../parser/c2_parser_stmt.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../parser/c2_parser_switch.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../parser/c2_parser_type.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../parser/case_list.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../parser/expr_list.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../parser/keywords.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../parser/stmt_list.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../parser/token.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../plugins/deps_generator.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../plugins/deps_generator_plugin.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../plugins/deps_generator_utils.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../plugins/git_version_plugin.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../plugins/plugin_info.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../plugins/refs_generator.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../plugins/refs_generator_plugin.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../plugins/shell_cmd_plugin.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KIND	$C2_LIBDIR/../plugins/unit_test_plugin.c2	/^ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.$/;"	v
KW_as	$C2_LIBDIR/../parser/token.c2	/^    [Kind.KW_as]            = "as",$/;"	v
KW_asm	$C2_LIBDIR/../parser/token.c2	/^    [Kind.KW_asm]           = "asm",$/;"	v
KW_assert	$C2_LIBDIR/../parser/token.c2	/^    [Kind.KW_assert]        = "assert",$/;"	v
KW_bool	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    [Kind.KW_bool] = 16,$/;"	v
KW_bool	$C2_LIBDIR/../parser/token.c2	/^    [Kind.KW_bool]          = "bool",$/;"	v
KW_break	$C2_LIBDIR/../parser/token.c2	/^    [Kind.KW_break]         = "break",$/;"	v
KW_case	$C2_LIBDIR/../parser/token.c2	/^    [Kind.KW_case]          = "case",$/;"	v
KW_cast	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    [Kind.KW_cast] = 8,$/;"	v
KW_cast	$C2_LIBDIR/../parser/token.c2	/^    [Kind.KW_cast]          = "cast",$/;"	v
KW_char	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    [Kind.KW_char] = 16,$/;"	v
KW_char	$C2_LIBDIR/../parser/token.c2	/^    [Kind.KW_char]          = "char",$/;"	v
KW_const	$C2_LIBDIR/../parser/token.c2	/^    [Kind.KW_const]         = "const",$/;"	v
KW_continue	$C2_LIBDIR/../parser/token.c2	/^    [Kind.KW_continue]      = "continue",$/;"	v
KW_default	$C2_LIBDIR/../parser/token.c2	/^    [Kind.KW_default]       = "default",$/;"	v
KW_elemsof	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    [Kind.KW_elemsof] = 9,$/;"	v
KW_elemsof	$C2_LIBDIR/../parser/token.c2	/^    [Kind.KW_elemsof]       = "elemsof",$/;"	v
KW_else	$C2_LIBDIR/../parser/token.c2	/^    [Kind.KW_else]          = "else",$/;"	v
KW_enum	$C2_LIBDIR/../parser/token.c2	/^    [Kind.KW_enum]          = "enum",$/;"	v
KW_enum_max	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    [Kind.KW_enum_max] = 10,$/;"	v
KW_enum_max	$C2_LIBDIR/../parser/token.c2	/^    [Kind.KW_enum_max]      = "enum_max",$/;"	v
KW_enum_min	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    [Kind.KW_enum_min] = 10,$/;"	v
KW_enum_min	$C2_LIBDIR/../parser/token.c2	/^    [Kind.KW_enum_min]      = "enum_min",$/;"	v
KW_f32	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    [Kind.KW_f32] = 16,$/;"	v
KW_f32	$C2_LIBDIR/../parser/token.c2	/^    [Kind.KW_f32]           = "f32",$/;"	v
KW_f64	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    [Kind.KW_f64] = 16,$/;"	v
KW_f64	$C2_LIBDIR/../parser/token.c2	/^    [Kind.KW_f64]           = "f64",$/;"	v
KW_fallthrough	$C2_LIBDIR/../parser/token.c2	/^    [Kind.KW_fallthrough]   = "fallthrough",$/;"	v
KW_false	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    [Kind.KW_false] = 11,$/;"	v
KW_false	$C2_LIBDIR/../parser/token.c2	/^    [Kind.KW_false]         = "false",$/;"	v
KW_fn	$C2_LIBDIR/../parser/token.c2	/^    [Kind.KW_fn]            = "fn",$/;"	v
KW_for	$C2_LIBDIR/../parser/token.c2	/^    [Kind.KW_for]           = "for",$/;"	v
KW_goto	$C2_LIBDIR/../parser/token.c2	/^    [Kind.KW_goto]          = "goto",$/;"	v
KW_i16	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    [Kind.KW_i16] = 16,$/;"	v
KW_i16	$C2_LIBDIR/../parser/token.c2	/^    [Kind.KW_i16]           = "i16",$/;"	v
KW_i32	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    [Kind.KW_i32] = 16,$/;"	v
KW_i32	$C2_LIBDIR/../parser/token.c2	/^    [Kind.KW_i32]           = "i32",$/;"	v
KW_i64	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    [Kind.KW_i64] = 16,$/;"	v
KW_i64	$C2_LIBDIR/../parser/token.c2	/^    [Kind.KW_i64]           = "i64",$/;"	v
KW_i8	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    [Kind.KW_i8] = 16,$/;"	v
KW_i8	$C2_LIBDIR/../parser/token.c2	/^    [Kind.KW_i8]            = "i8",$/;"	v
KW_if	$C2_LIBDIR/../parser/token.c2	/^    [Kind.KW_if]            = "if",$/;"	v
KW_import	$C2_LIBDIR/../parser/token.c2	/^    [Kind.KW_import]        = "import",$/;"	v
KW_isize	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    [Kind.KW_isize] = 16,$/;"	v
KW_isize	$C2_LIBDIR/../parser/token.c2	/^    [Kind.KW_isize]         = "isize",$/;"	v
KW_local	$C2_LIBDIR/../parser/token.c2	/^    [Kind.KW_local]         = "local",$/;"	v
KW_module	$C2_LIBDIR/../parser/token.c2	/^    [Kind.KW_module]        = "module",$/;"	v
KW_nil	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    [Kind.KW_nil] = 12,$/;"	v
KW_nil	$C2_LIBDIR/../parser/token.c2	/^    [Kind.KW_nil]           = "nil",$/;"	v
KW_offsetof	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    [Kind.KW_offsetof] = 13,$/;"	v
KW_offsetof	$C2_LIBDIR/../parser/token.c2	/^    [Kind.KW_offsetof]      = "offsetof",$/;"	v
KW_public	$C2_LIBDIR/../parser/token.c2	/^    [Kind.KW_public]        = "public",$/;"	v
KW_reg16	$C2_LIBDIR/../parser/token.c2	/^    [Kind.KW_reg16]         = "reg16",$/;"	v
KW_reg32	$C2_LIBDIR/../parser/token.c2	/^    [Kind.KW_reg32]         = "reg32",$/;"	v
KW_reg64	$C2_LIBDIR/../parser/token.c2	/^    [Kind.KW_reg64]         = "reg64",$/;"	v
KW_reg8	$C2_LIBDIR/../parser/token.c2	/^    [Kind.KW_reg8]          = "reg8",$/;"	v
KW_return	$C2_LIBDIR/../parser/token.c2	/^    [Kind.KW_return]        = "return",$/;"	v
KW_sizeof	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    [Kind.KW_sizeof] = 14,$/;"	v
KW_sizeof	$C2_LIBDIR/../parser/token.c2	/^    [Kind.KW_sizeof]        = "sizeof",$/;"	v
KW_static_assert	$C2_LIBDIR/../parser/token.c2	/^    [Kind.KW_static_assert] = "static_assert",$/;"	v
KW_struct	$C2_LIBDIR/../parser/token.c2	/^    [Kind.KW_struct]        = "struct",$/;"	v
KW_switch	$C2_LIBDIR/../parser/token.c2	/^    [Kind.KW_switch]        = "switch",$/;"	v
KW_template	$C2_LIBDIR/../parser/token.c2	/^    [Kind.KW_template]      = "template",$/;"	v
KW_to_container	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    [Kind.KW_to_container] = 15,$/;"	v
KW_to_container	$C2_LIBDIR/../parser/token.c2	/^    [Kind.KW_to_container]  = "to_container",$/;"	v
KW_true	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    [Kind.KW_true] = 11,$/;"	v
KW_true	$C2_LIBDIR/../parser/token.c2	/^    [Kind.KW_true]          = "true",$/;"	v
KW_type	$C2_LIBDIR/../parser/token.c2	/^    [Kind.KW_type]          = "type",$/;"	v
KW_u16	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    [Kind.KW_u16] = 16,$/;"	v
KW_u16	$C2_LIBDIR/../parser/token.c2	/^    [Kind.KW_u16]           = "u16",$/;"	v
KW_u32	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    [Kind.KW_u32] = 16,$/;"	v
KW_u32	$C2_LIBDIR/../parser/token.c2	/^    [Kind.KW_u32]           = "u32",$/;"	v
KW_u64	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    [Kind.KW_u64] = 16,$/;"	v
KW_u64	$C2_LIBDIR/../parser/token.c2	/^    [Kind.KW_u64]           = "u64",$/;"	v
KW_u8	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    [Kind.KW_u8] = 16,$/;"	v
KW_u8	$C2_LIBDIR/../parser/token.c2	/^    [Kind.KW_u8]            = "u8",$/;"	v
KW_union	$C2_LIBDIR/../parser/token.c2	/^    [Kind.KW_union]         = "union",$/;"	v
KW_usize	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    [Kind.KW_usize] = 16,$/;"	v
KW_usize	$C2_LIBDIR/../parser/token.c2	/^    [Kind.KW_usize]         = "usize",$/;"	v
KW_void	$C2_LIBDIR/../parser/token.c2	/^    [Kind.KW_void]          = "void",$/;"	v
KW_volatile	$C2_LIBDIR/../parser/token.c2	/^    [Kind.KW_volatile]      = "volatile",$/;"	v
KW_while	$C2_LIBDIR/../parser/token.c2	/^    [Kind.KW_while]         = "while",$/;"	v
Kind	$C2_LIBDIR/../compiler/c2recipe_parser.c2	/^type Kind enum u8 {$/;"	t
LAnd	$C2_LIBDIR/../analyser/module_analyser_binop.c2	/^    LAnd,           ptr, int$/;"	v
LAnd	$C2_LIBDIR/../ast/binary_operator.c2	/^    LAnd,$/;"	v
LAnd	$C2_LIBDIR/../common/c2_prec.c2	/^    [BinaryOpcode.LAnd]        = LogicalAndOr,$/;"	v
LAnd	$C2_LIBDIR/../common/c_prec.c2	/^    [BinaryOpcode.LAnd]        = LogicalAnd,$/;"	v
LBRACE	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^    LBRACE,$/;"	v
LBrace	$C2_LIBDIR/../parser/token.c2	/^    [Kind.LBrace]           = "{",$/;"	v
LESS	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^    LESS,$/;"	v
LHS	$C2_LIBDIR/../analyser/module_analyser.c2	/^const u32 LHS = 0x01;$/;"	v
LHS	$C2_LIBDIR/../analyser/module_analyser_binop.c2	/^    LHS,        \/\/ Assign$/;"	v
LNot	$C2_LIBDIR/../ast/unary_operator.c2	/^    LNot,           \/\/ !a$/;"	v
LOr	$C2_LIBDIR/../analyser/module_analyser_binop.c2	/^    LOr,            ptr, int$/;"	v
LOr	$C2_LIBDIR/../ast/binary_operator.c2	/^    LOr,$/;"	v
LOr	$C2_LIBDIR/../common/c2_prec.c2	/^    [BinaryOpcode.LOr]         = LogicalAndOr,$/;"	v
LOr	$C2_LIBDIR/../common/c_prec.c2	/^    [BinaryOpcode.LOr]         = LogicalOr,$/;"	v
LPAREN	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^    LPAREN,$/;"	v
LParen	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    [Kind.LParen] = 6,$/;"	v
LParen	$C2_LIBDIR/../parser/token.c2	/^    [Kind.LParen]           = "(",$/;"	v
LSQUARE	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^    LSQUARE,$/;"	v
LSquare	$C2_LIBDIR/../parser/token.c2	/^    [Kind.LSquare]          = "[",$/;"	v
LValue	$C2_LIBDIR/../ast/expr.c2	/^    LValue, \/\/ can be used as LHS \/ RHS of assignment$/;"	v
LValueToRValue	$C2_LIBDIR/../ast/implicit_cast_expr.c2	/^    LValueToRValue,$/;"	v
Label	$C2_LIBDIR/../ast/identifier_expr.c2	/^    Label,$/;"	v
Label	$C2_LIBDIR/../ast/stmt.c2	/^    Label,$/;"	v
Label	$C2_LIBDIR/../ir/block.c2	/^    Label,$/;"	v
LabelStmtBits	$C2_LIBDIR/../ast/label_stmt.c2	/^type LabelStmtBits struct {$/;"	t
Lengths	$C2_LIBDIR/../generator/c2refs.c2	/^type Lengths struct {$/;"	t
Less	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    [Kind.Less]         = Relational,$/;"	v
Less	$C2_LIBDIR/../parser/token.c2	/^    [Kind.Less]             = "<",$/;"	v
LessEqual	$C2_LIBDIR/../analyser/module_analyser_binop.c2	/^    LessEqual,      ptr(both), int (both)$/;"	v
LessEqual	$C2_LIBDIR/../ast/binary_operator.c2	/^    LessEqual,$/;"	v
LessEqual	$C2_LIBDIR/../common/c2_prec.c2	/^    [BinaryOpcode.LessEqual]   = Relational,$/;"	v
LessEqual	$C2_LIBDIR/../common/c_prec.c2	/^    [BinaryOpcode.LessEqual]   = Relative,$/;"	v
LessEqual	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    [Kind.LessEqual]    = Relational,$/;"	v
LessEqual	$C2_LIBDIR/../parser/token.c2	/^    [Kind.LessEqual]        = "<=",$/;"	v
LessLess	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    [Kind.LessLess] = Shift,$/;"	v
LessLess	$C2_LIBDIR/../parser/token.c2	/^    [Kind.LessLess]         = "<<",$/;"	v
LessLessEqual	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    [Kind.LessLessEqual]  = ShlAssign,$/;"	v
LessLessEqual	$C2_LIBDIR/../parser/token.c2	/^    [Kind.LessLessEqual]    = "<<=",$/;"	v
LessThan	$C2_LIBDIR/../analyser/module_analyser_binop.c2	/^    LessThan,       ptr(both), int (both)$/;"	v
LessThan	$C2_LIBDIR/../ast/binary_operator.c2	/^    LessThan,$/;"	v
LessThan	$C2_LIBDIR/../common/c2_prec.c2	/^    [BinaryOpcode.LessThan]    = Relational,$/;"	v
LessThan	$C2_LIBDIR/../common/c_prec.c2	/^    [BinaryOpcode.LessThan]    = Relative,$/;"	v
Level	$C2_LIBDIR/../analyser/scope.c2	/^type Level struct {$/;"	t
Lib	$C2_LIBDIR/../compiler/c2recipe_parser.c2	/^    Lib,$/;"	v
License	$C2_LIBDIR/../analyser/conversion_checker.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../analyser/conversion_checker_expr.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../analyser/incr_array_list.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../analyser/init_checker.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../analyser/label_vector.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../analyser/module_analyser.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../analyser/module_analyser_binop.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../analyser/module_analyser_builtin.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../analyser/module_analyser_call.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../analyser/module_analyser_expr.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../analyser/module_analyser_function.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../analyser/module_analyser_init.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../analyser/module_analyser_member.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../analyser/module_analyser_stmt.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../analyser/module_analyser_struct.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../analyser/module_analyser_switch.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../analyser/module_analyser_type.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../analyser/module_analyser_unaryop.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../analyser/module_sorter.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../analyser/name_vector.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../analyser/scope.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../analyser/size_analyser.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../analyser/struct_field_init_checker.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../analyser/struct_func_list.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../analyser/unused_checker.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../analyser_utils/ctv_analyser.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../analyser_utils/printf_utils.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast/alias_type.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast/alias_type_decl.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast/array_designated_init_expr.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast/array_subscript_expr.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast/array_type.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast/array_value.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast/array_value_list.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast/asm_stmt.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast/assert_stmt.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast/ast.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast/ast_evaluator.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast/binary_operator.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast/bitoffset_expr.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast/boolean_literal.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast/break_stmt.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast/builtin_expr.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast/builtin_type.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast/call_expr.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast/char_literal.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast/compound_stmt.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast/conditional_operator.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast/continue_stmt.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast/decl.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast/decl_list.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast/decl_stmt.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast/enum_constant_decl.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast/enum_type.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast/enum_type_decl.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast/explicit_cast_expr.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast/expr.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast/expr_list.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast/fallthrough_stmt.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast/field_designated_init_expr.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast/float_literal.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast/for_stmt.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast/function_decl.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast/function_decl_list.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast/function_type.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast/function_type_decl.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast/goto_stmt.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast/identifier_expr.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast/if_stmt.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast/implicit_cast_expr.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast/import_decl.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast/import_decl_list.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast/init_list_expr.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast/instance_table.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast/instantiator.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast/integer_literal.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast/label_stmt.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast/member_expr.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast/module.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast/module_type.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast/nil_expr.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast/paren_expr.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast/pointer_pool.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast/pointer_type.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast/qualtype.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast/range_expr.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast/return_stmt.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast/static_assert.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast/static_assert_list.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast/statistics.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast/stmt.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast/string_literal.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast/string_type_pool.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast/struct_type.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast/struct_type_decl.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast/switch_case.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast/switch_stmt.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast/symbol_table.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast/type.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast/type_expr.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast/type_ref.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast/unary_operator.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast/utils.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast/value.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast/var_decl.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast/while_stmt.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast_utils/attr.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast_utils/attr_table.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast_utils/color.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast_utils/constants.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast_utils/context.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast_utils/number_radix.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast_utils/src_loc.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast_utils/string_buffer.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ast_utils/string_pool.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../common/attr_handler.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../common/bit_array.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../common/bit_utils.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../common/build_file.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../common/build_target.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../common/c2_prec.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../common/c_prec.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../common/component.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../common/component_sorter.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../common/console.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../common/diagnostics.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../common/dsm_sorter.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../common/file/file_utils.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../common/file/reader.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../common/file/writer.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../common/index_list.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../common/library_list.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../common/linked_list.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../common/manifest_writer.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../common/module_list.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../common/process_utils.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../common/quicksort.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../common/source_mgr.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../common/string_list.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../common/string_utils.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../common/target_info.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../common/utf8.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../common/utils.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../common/value_maplist.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../common/warning_flags.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../common/yaml/yaml_data.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../common/yaml/yaml_dump.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../common/yaml/yaml_iterator.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../common/yaml/yaml_parser.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../common/yaml/yaml_tokenizer.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../compiler/c2recipe.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../compiler/c2recipe_parser.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../compiler/c2recipe_yaml.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../compiler/compiler.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../compiler/compiler_libs.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../compiler/main.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../compiler/manifest.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../compiler/plugin_mgr.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../generator/ast_visitor.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../generator/ast_visitor_expr.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../generator/c/c_generator.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../generator/c/c_generator_call.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../generator/c/c_generator_expr.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../generator/c/c_generator_pure_call.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../generator/c/c_generator_special.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../generator/c/c_generator_stmt.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../generator/c/c_generator_trace.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../generator/c/dep_finder.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../generator/c2i/c2i_generator.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../generator/c2i/c2i_generator_decl.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../generator/c2i/c2i_generator_expr.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../generator/c2i/c2i_generator_stmt.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../generator/c2refs.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../generator/generator_utils.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../generator/ir/array_init_sorter.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../generator/ir/basic_struct_layouter.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../generator/ir/field_struct_layouter.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../generator/ir/ir_generator_binop.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../generator/ir/ir_generator_call.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../generator/ir/ir_generator_expr.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../generator/ir/ir_generator_locals.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../generator/ir/ir_generator_member.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../generator/ir/ir_generator_stmt.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../generator/ir/ir_generator_switch.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../generator/ir/ref_list.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../generator/radix_tree/radix_tree.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../generator/radix_tree/radix_tree_dump.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../generator/radix_tree/radix_tree_fs.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ir/block.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ir/block_list.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ir/case_list.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ir/common.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ir/constant.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ir/constant_list.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ir/context.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ir/copy_list.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ir/function_info.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ir/graphviz.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ir/init_value.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ir/init_value_list.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ir/inserter.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ir/instr.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ir/instr_kind.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ir/instr_list.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ir/interference_graph.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ir/live_map.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ir/lookup_table.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ir/phi_list.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ir/print.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ir/ref.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ir/register_alloc.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ir/rev_list.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ir/rpo.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ir/slot_collector.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ir/slot_values.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ir/slot_writes_map.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ir/ssa.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ir/switch.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ir/symbol_list.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ir/types.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../ir/work_queue.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../parser/ast_builder.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../parser/c2_parser.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../parser/c2_parser_stmt.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../parser/c2_parser_switch.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../parser/c2_parser_type.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../parser/case_list.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../parser/expr_list.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../parser/keywords.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../parser/stmt_list.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../parser/token.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../plugins/deps_generator.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../plugins/deps_generator_plugin.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../plugins/deps_generator_utils.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../plugins/git_version_plugin.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../plugins/plugin_info.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../plugins/refs_generator.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../plugins/refs_generator_plugin.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../plugins/shell_cmd_plugin.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
License	$C2_LIBDIR/../plugins/unit_test_plugin.c2	/^ * Licensed under the Apache License, Version 2.0 (the "License");$/;"	v
Limit	$C2_LIBDIR/../analyser_utils/ctv_analyser.c2	/^type Limit struct {$/;"	t
Line	$C2_LIBDIR/../ast/var_decl.c2	/^    Line,$/;"	v
LineComment	$C2_LIBDIR/../parser/token.c2	/^    [Kind.LineComment]      = "l-comment",$/;"	v
LineCounter	$C2_LIBDIR/../plugins/refs_generator.c2	/^type LineCounter struct {$/;"	t
Link	$C2_LIBDIR/../generator/c2refs.c2	/^type Link struct {$/;"	t
Links	$C2_LIBDIR/../generator/c2refs.c2	/^type Links struct {$/;"	t
LiveVector	$C2_LIBDIR/../ir/register_alloc.c2	/^type LiveVector struct  {$/;"	t
Load1	$C2_LIBDIR/../ir/instr_kind.c2	/^    Load1,$/;"	v
Load2	$C2_LIBDIR/../ir/instr_kind.c2	/^    Load2,$/;"	v
Load4	$C2_LIBDIR/../ir/instr_kind.c2	/^    Load4,$/;"	v
Load8	$C2_LIBDIR/../ir/instr_kind.c2	/^    Load8,$/;"	v
Loc	$C2_LIBDIR/../plugins/refs_generator.c2	/^type Loc struct {$/;"	t
LocalVar	$C2_LIBDIR/../ast/var_decl.c2	/^    LocalVar,$/;"	v
Location	$C2_LIBDIR/../common/yaml/yaml_tokenizer.c2	/^type Location struct {$/;"	t
LogFile	$C2_LIBDIR/../generator/c/c_generator.c2	/^const char[] LogFile = "build.log";$/;"	v
LogicJoin	$C2_LIBDIR/../ir/block.c2	/^    LogicJoin,$/;"	v
LogicalAnd	$C2_LIBDIR/../common/c_prec.c2	/^    LogicalAnd,     \/\/ &&$/;"	v
LogicalAndOr	$C2_LIBDIR/../common/c2_prec.c2	/^    LogicalAndOr,   \/\/ &&, ||$/;"	v
LogicalOr	$C2_LIBDIR/../common/c_prec.c2	/^    LogicalOr,      \/\/ ||$/;"	v
Long	$C2_LIBDIR/../ir/init_value.c2	/^    Long,       \/\/ stored in initvalue$/;"	v
Long2	$C2_LIBDIR/../ir/init_value.c2	/^    Long2,      \/\/ stored in constants$/;"	v
MAX_ARGS	$C2_LIBDIR/../common/process_utils.c2	/^const u32 MAX_ARGS = 16;$/;"	v
MAX_ARG_LEN	$C2_LIBDIR/../common/process_utils.c2	/^const u32 MAX_ARG_LEN = 512;$/;"	v
MAX_LEVEL	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^const u32 MAX_LEVEL = 16;$/;"	v
MAX_THREADS	$C2_LIBDIR/../ir/work_queue.c2	/^const u32 MAX_THREADS = 32;$/;"	v
MINUS	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^    MINUS,$/;"	v
Magenta	$C2_LIBDIR/../ast_utils/color.c2	/^public const char[] Magenta  = "\\033[0;35m";$/;"	v
MainMarker	$C2_LIBDIR/../analyser/module_analyser.c2	/^type MainMarker struct {$/;"	t
Map	$C2_LIBDIR/../common/yaml/yaml_data.c2	/^    Map,$/;"	v
MapFile	$C2_LIBDIR/../generator/c2refs.c2	/^type MapFile struct {$/;"	t
MaxBits	$C2_LIBDIR/../common/bit_array.c2	/^public const u32 MaxBits = 256;    \/\/ must be 64-bit multiple$/;"	v
MaxCallArgs	$C2_LIBDIR/../ast_utils/constants.c2	/^public const u32 MaxCallArgs = 24;$/;"	v
MaxDepth	$C2_LIBDIR/../analyser/module_analyser.c2	/^const u32 MaxDepth = 8;$/;"	v
MaxDepth	$C2_LIBDIR/../common/yaml/yaml_data.c2	/^const u32 MaxDepth = 8;$/;"	v
MaxDiag	$C2_LIBDIR/../common/yaml/yaml_parser.c2	/^const u32 MaxDiag = 256;$/;"	v
MaxErrorMsgLen	$C2_LIBDIR/../ast_utils/constants.c2	/^public const u32 MaxErrorMsgLen = 31;   \/\/ for #error "msg"$/;"	v
MaxFeatureDepth	$C2_LIBDIR/../ast_utils/constants.c2	/^public const u32 MaxFeatureDepth = 6;$/;"	v
MaxIdentifierLen	$C2_LIBDIR/../ast_utils/constants.c2	/^public const u32 MaxIdentifierLen = 31;$/;"	v
MaxLookahead	$C2_LIBDIR/../parser/c2_parser.c2	/^const u32 MaxLookahead = 64;    \/\/ must be power of 2$/;"	v
MaxMultiDecl	$C2_LIBDIR/../ast_utils/constants.c2	/^public const u32 MaxMultiDecl = (1 << MaxMultiDeclBits) - 1;$/;"	v
MaxMultiDeclBits	$C2_LIBDIR/../ast_utils/constants.c2	/^public const u32 MaxMultiDeclBits = 4;$/;"	v
MaxMultiString	$C2_LIBDIR/../ast_utils/constants.c2	/^public const u32 MaxMultiString = 64*1024;$/;"	v
MaxScopes	$C2_LIBDIR/../ast_utils/constants.c2	/^public const u32 MaxScopes = 32;$/;"	v
MaxTemps	$C2_LIBDIR/../ir/print.c2	/^const u32 MaxTemps = 4096;$/;"	v
Max_complexity	$C2_LIBDIR/../ast/ast_evaluator.c2	/^const u32 Max_complexity = 1000000;$/;"	v
Max_depth	$C2_LIBDIR/../ast/ast_evaluator.c2	/^const u32 Max_depth = 100;$/;"	v
Max_path	$C2_LIBDIR/../common/file/file_utils.c2	/^public const u32 Max_path = 512;$/;"	v
Member	$C2_LIBDIR/../ast/expr.c2	/^    Member,$/;"	v
MemberExprBits	$C2_LIBDIR/../ast/member_expr.c2	/^type MemberExprBits struct {$/;"	t
MemberExprMaxDepth	$C2_LIBDIR/../ast/member_expr.c2	/^public const u32 MemberExprMaxDepth = 7;$/;"	v
MemberRef	$C2_LIBDIR/../ast/member_expr.c2	/^type MemberRef union {$/;"	t
Minus	$C2_LIBDIR/../ast/unary_operator.c2	/^    Minus,          \/\/ -a$/;"	v
Minus	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    [Kind.Minus] = Additive,$/;"	v
Minus	$C2_LIBDIR/../parser/token.c2	/^    [Kind.Minus]            = "-",$/;"	v
MinusEqual	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    [Kind.MinusEqual]     = SubAssign,$/;"	v
MinusEqual	$C2_LIBDIR/../parser/token.c2	/^    [Kind.MinusEqual]       = "-=",$/;"	v
MinusMinus	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    [Kind.MinusMinus] = 7,$/;"	v
MinusMinus	$C2_LIBDIR/../parser/token.c2	/^    [Kind.MinusMinus]       = "--",$/;"	v
Module	$C2_LIBDIR/../ast/identifier_expr.c2	/^    Module,$/;"	v
Module	$C2_LIBDIR/../ast/type.c2	/^    Module,$/;"	v
ModuleSorter	$C2_LIBDIR/../analyser/module_sorter.c2	/^type ModuleSorter struct {$/;"	t
Mul	$C2_LIBDIR/../ir/instr_kind.c2	/^    Mul,$/;"	v
MulAssign	$C2_LIBDIR/../analyser/module_analyser_binop.c2	/^    MulAssign,      int$/;"	v
MulAssign	$C2_LIBDIR/../ast/binary_operator.c2	/^    MulAssign,$/;"	v
MulAssign	$C2_LIBDIR/../common/c2_prec.c2	/^    [BinaryOpcode.MulAssign]   = Assignment,$/;"	v
MulAssign	$C2_LIBDIR/../common/c_prec.c2	/^    [BinaryOpcode.MulAssign]   = Assignment,$/;"	v
Multiplicative	$C2_LIBDIR/../common/c2_prec.c2	/^    Multiplicative, \/\/ *, \/, %$/;"	v
Multiplicative	$C2_LIBDIR/../common/c_prec.c2	/^    Multiplicative, \/\/ *, \/, %$/;"	v
Multiply	$C2_LIBDIR/../analyser/module_analyser_binop.c2	/^    Multiply,       int$/;"	v
Multiply	$C2_LIBDIR/../ast/binary_operator.c2	/^    Multiply,$/;"	v
Multiply	$C2_LIBDIR/../common/c2_prec.c2	/^    [BinaryOpcode.Multiply]    = Multiplicative,$/;"	v
Multiply	$C2_LIBDIR/../common/c_prec.c2	/^    [BinaryOpcode.Multiply]    = Multiplicative,$/;"	v
NEWLINE	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^    NEWLINE,$/;"	v
NEXT_SHIFT	$C2_LIBDIR/../ast_utils/string_pool.c2	/^const u32 NEXT_SHIFT = 32;$/;"	v
NOT_FOUND	$C2_LIBDIR/../generator/c2refs.c2	/^const u32 NOT_FOUND = u32.max;$/;"	v
NULL	$C2_LIBDIR/../ir/interference_graph.c2	/^const u16 NULL = u16.max;$/;"	v
NULL	$C2_LIBDIR/../ir/live_map.c2	/^const u16 NULL = u16.max;$/;"	v
NULL	$C2_LIBDIR/../ir/slot_writes_map.c2	/^const u16 NULL = u16.max;$/;"	v
NValue	$C2_LIBDIR/../ast/expr.c2	/^    NValue, \/\/ cannot be used except in sizeof, etc (eg. Type, mod.Type, static Struct\/Enum f/;"	v
Next	$C2_LIBDIR/../analyser/module_analyser_stmt.c2	/^    Next,$/;"	v
Nil	$C2_LIBDIR/../ast/expr.c2	/^    Nil,$/;"	v
NoArg	$C2_LIBDIR/../ast_utils/attr.c2	/^    NoArg = 0,$/;"	v
NoLibc	$C2_LIBDIR/../compiler/c2recipe_parser.c2	/^    NoLibc,$/;"	v
NoReturn	$C2_LIBDIR/../analyser/module_analyser_stmt.c2	/^    NoReturn,$/;"	v
NoReturn	$C2_LIBDIR/../ast_utils/attr.c2	/^    [AttrKind.NoReturn]     = AttrReq.NoArg,$/;"	v
NoTypeDef	$C2_LIBDIR/../ast_utils/attr.c2	/^    [AttrKind.NoTypeDef]    = AttrReq.NoArg,$/;"	v
Node	$C2_LIBDIR/../generator/radix_tree/radix_tree.c2	/^type Node struct @(aligned=4) {$/;"	t
NodeKind	$C2_LIBDIR/../common/yaml/yaml_data.c2	/^type NodeKind enum u8 {$/;"	t
Nodes	$C2_LIBDIR/../generator/radix_tree/radix_tree.c2	/^type Nodes struct {$/;"	t
None	$C2_LIBDIR/../ast/member_expr.c2	/^    None,$/;"	v
None	$C2_LIBDIR/../ast/var_decl.c2	/^    None,$/;"	v
None	$C2_LIBDIR/../ast_utils/attr.c2	/^    None,$/;"	v
None	$C2_LIBDIR/../common/build_target.c2	/^    None,$/;"	v
None	$C2_LIBDIR/../common/yaml/yaml_tokenizer.c2	/^    None,$/;"	v
None	$C2_LIBDIR/../ir/init_value.c2	/^    None,$/;"	v
None	$C2_LIBDIR/../ir/instr_kind.c2	/^    None,   \/\/ used when removing instructions$/;"	v
None	$C2_LIBDIR/../ir/ref.c2	/^    None,$/;"	v
None	$C2_LIBDIR/../ir/types.c2	/^    None,$/;"	v
None	$C2_LIBDIR/../parser/token.c2	/^    [Kind.None]             = "none",$/;"	v
Normal	$C2_LIBDIR/../ast/ast_evaluator.c2	/^    Normal,     \/\/ default continuation$/;"	v
Normal	$C2_LIBDIR/../ast/function_decl.c2	/^    Normal,$/;"	v
Normal	$C2_LIBDIR/../ast_utils/color.c2	/^public const char[] Normal   = "\\033[0m";$/;"	v
Normal	$C2_LIBDIR/../plugins/unit_test2.c2	/^public const char[] Normal   = "\\033[0m";$/;"	v
Not	$C2_LIBDIR/../ast/unary_operator.c2	/^    Not,            \/\/ ~a$/;"	v
NotEqual	$C2_LIBDIR/../analyser/module_analyser_binop.c2	/^    NotEqual,       ptr(both), int (both)$/;"	v
NotEqual	$C2_LIBDIR/../ast/binary_operator.c2	/^    NotEqual,$/;"	v
NotEqual	$C2_LIBDIR/../common/c2_prec.c2	/^    [BinaryOpcode.NotEqual]    = Relational,$/;"	v
NotEqual	$C2_LIBDIR/../common/c_prec.c2	/^    [BinaryOpcode.NotEqual]    = Equality,$/;"	v
Note	$C2_LIBDIR/../common/diagnostics.c2	/^    Note,$/;"	v
NoteDeclaredHere	$C2_LIBDIR/../analyser/module_analyser_call.c2	/^const char[] NoteDeclaredHere = "'%s' is defined here";$/;"	v
NumArenas	$C2_LIBDIR/../ir/interference_graph.c2	/^const u32 NumArenas = 11;$/;"	v
NumArenas	$C2_LIBDIR/../ir/live_map.c2	/^const u32 NumArenas = 9;$/;"	v
NumArenas	$C2_LIBDIR/../ir/slot_writes_map.c2	/^const u32 NumArenas = 9;$/;"	v
NumDeclBits	$C2_LIBDIR/../ast/decl.c2	/^const u32 NumDeclBits = 15;  \/\/ should match bitfields above$/;"	v
NumExprBits	$C2_LIBDIR/../ast/expr.c2	/^const u32 NumExprBits = NumStmtBits + 10;$/;"	v
NumStmtBits	$C2_LIBDIR/../ast/stmt.c2	/^const u32 NumStmtBits = 4;$/;"	v
NumStmtLists	$C2_LIBDIR/../parser/c2_parser.c2	/^const u32 NumStmtLists = 16;    \/\/ max used for c2c is 8$/;"	v
NumTypeBits	$C2_LIBDIR/../ast/type.c2	/^const u32 NumTypeBits = 8;$/;"	v
Number	$C2_LIBDIR/../ast_utils/attr.c2	/^    Number,$/;"	v
Octal	$C2_LIBDIR/../ast_utils/number_radix.c2	/^    Octal,$/;"	v
OffsetOf	$C2_LIBDIR/../ast/builtin_expr.c2	/^    OffsetOf,$/;"	v
OffsetOfData	$C2_LIBDIR/../ast/builtin_expr.c2	/^type OffsetOfData struct {$/;"	t
Ok	$C2_LIBDIR/../ast_utils/attr.c2	/^    Ok,$/;"	v
Opaque	$C2_LIBDIR/../ast_utils/attr.c2	/^    [AttrKind.Opaque]       = AttrReq.NoArg,$/;"	v
Operand	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^type Operand struct {$/;"	t
Options	$C2_LIBDIR/../compiler/main.c2	/^type Options struct {$/;"	t
Or	$C2_LIBDIR/../analyser/module_analyser_binop.c2	/^    Or,             int$/;"	v
Or	$C2_LIBDIR/../ast/binary_operator.c2	/^    Or,$/;"	v
Or	$C2_LIBDIR/../common/c2_prec.c2	/^    [BinaryOpcode.Or]          = Bitwise,$/;"	v
Or	$C2_LIBDIR/../common/c_prec.c2	/^    [BinaryOpcode.Or]          = Or,$/;"	v
Or	$C2_LIBDIR/../ir/instr_kind.c2	/^    Or,$/;"	v
OrAssign	$C2_LIBDIR/../analyser/module_analyser_binop.c2	/^    OrAssign,       int$/;"	v
OrAssign	$C2_LIBDIR/../ast/binary_operator.c2	/^    OrAssign,$/;"	v
OrAssign	$C2_LIBDIR/../common/c2_prec.c2	/^    [BinaryOpcode.OrAssign]    = Assignment,$/;"	v
OrAssign	$C2_LIBDIR/../common/c_prec.c2	/^    [BinaryOpcode.OrAssign]    = Assignment,$/;"	v
OrFalse	$C2_LIBDIR/../ir/block.c2	/^    OrFalse,$/;"	v
Other	$C2_LIBDIR/../analyser_utils/printf_utils.c2	/^    Other,          \/\/ %% or unknown$/;"	v
PERCENT	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^    PERCENT,$/;"	v
PIPE	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^    PIPE,$/;"	v
PLUS	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^    PLUS,$/;"	v
POUND	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^    POUND,$/;"	v
Packed	$C2_LIBDIR/../ast_utils/attr.c2	/^    [AttrKind.Packed]       = AttrReq.NoArg,$/;"	v
Param	$C2_LIBDIR/../ir/instr_kind.c2	/^    Param,$/;"	v
Paren	$C2_LIBDIR/../ast/expr.c2	/^    Paren,$/;"	v
ParenExprBits	$C2_LIBDIR/../ast/paren_expr.c2	/^type ParenExprBits struct {$/;"	t
Parser	$C2_LIBDIR/../compiler/c2recipe_parser.c2	/^type Parser struct {$/;"	t
Percent	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    [Kind.Percent] = Multiplicative,$/;"	v
Percent	$C2_LIBDIR/../parser/token.c2	/^    [Kind.Percent]          = "%",$/;"	v
PercentEqual	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    [Kind.PercentEqual]   = RemAssign,$/;"	v
PercentEqual	$C2_LIBDIR/../parser/token.c2	/^    [Kind.PercentEqual]     = "%=",$/;"	v
Phi	$C2_LIBDIR/../ir/instr_kind.c2	/^    Phi,$/;"	v
PhiClause	$C2_LIBDIR/../ir/ref.c2	/^    PhiClause, \/\/ only for Phi instructions. args[0]=start, args[1]=count$/;"	v
PhiSplit	$C2_LIBDIR/../ir/block.c2	/^    PhiSplit,$/;"	v
Pipe	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    [Kind.Pipe]  = Bitwise,$/;"	v
Pipe	$C2_LIBDIR/../parser/token.c2	/^    [Kind.Pipe]             = "|",$/;"	v
PipeEqual	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    [Kind.PipeEqual]      = OrAssign,$/;"	v
PipeEqual	$C2_LIBDIR/../parser/token.c2	/^    [Kind.PipeEqual]        = "|=",$/;"	v
PipePipe	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    [Kind.PipePipe] = LogicalAndOr,$/;"	v
PipePipe	$C2_LIBDIR/../parser/token.c2	/^    [Kind.PipePipe]         = "||",$/;"	v
Plain_Scalar	$C2_LIBDIR/../common/yaml/yaml_tokenizer.c2	/^    Plain_Scalar,$/;"	v
Plugin	$C2_LIBDIR/../compiler/c2recipe_parser.c2	/^    Plugin,$/;"	v
Plugin	$C2_LIBDIR/../compiler/plugin_mgr.c2	/^type Plugin struct {$/;"	t
Plugin	$C2_LIBDIR/../plugins/deps_generator_plugin.c2	/^type Plugin struct {$/;"	t
Plugin	$C2_LIBDIR/../plugins/git_version_plugin.c2	/^type Plugin struct {$/;"	t
Plugin	$C2_LIBDIR/../plugins/refs_generator_plugin.c2	/^type Plugin struct {$/;"	t
Plugin	$C2_LIBDIR/../plugins/shell_cmd_plugin.c2	/^type Plugin struct {$/;"	t
Plugin	$C2_LIBDIR/../plugins/unit_test_plugin.c2	/^type Plugin struct {$/;"	t
PluginOptions	$C2_LIBDIR/../compiler/c2recipe_parser.c2	/^    PluginOptions,$/;"	v
Plus	$C2_LIBDIR/../ast/unary_operator.c2	/^    Plus,           \/\/ +a$/;"	v
Plus	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    [Kind.Plus] = 7,$/;"	v
Plus	$C2_LIBDIR/../parser/token.c2	/^    [Kind.Plus]             = "+",$/;"	v
PlusEqual	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    [Kind.PlusEqual]      = AddAssign,$/;"	v
PlusEqual	$C2_LIBDIR/../parser/token.c2	/^    [Kind.PlusEqual]        = "+=",$/;"	v
PlusPlus	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    [Kind.PlusPlus] = 7,$/;"	v
PlusPlus	$C2_LIBDIR/../parser/token.c2	/^    [Kind.PlusPlus]         = "++",$/;"	v
Pointer	$C2_LIBDIR/../analyser_utils/printf_utils.c2	/^    Pointer,        \/\/ %p$/;"	v
Pointer	$C2_LIBDIR/../ast/type.c2	/^    Pointer,$/;"	v
PointerPool	$C2_LIBDIR/../ast/pointer_pool.c2	/^type PointerPool struct {$/;"	t
PointerPoolSlot	$C2_LIBDIR/../ast/pointer_pool.c2	/^type PointerPoolSlot struct {$/;"	t
PointerToBoolean	$C2_LIBDIR/../ast/implicit_cast_expr.c2	/^    PointerToBoolean,$/;"	v
PointerToInteger	$C2_LIBDIR/../ast/implicit_cast_expr.c2	/^    PointerToInteger,$/;"	v
PostDec	$C2_LIBDIR/../ast/unary_operator.c2	/^    PostDec,        \/\/ a--$/;"	v
PostInc	$C2_LIBDIR/../ast/unary_operator.c2	/^    PostInc,        \/\/ a++$/;"	v
Postfix	$C2_LIBDIR/../common/c_prec.c2	/^    Postfix,        \/\/ .member, ->member, [], (), postfix ++, --$/;"	v
Power2	$C2_LIBDIR/../ast_utils/attr.c2	/^    Power2,$/;"	v
PreDec	$C2_LIBDIR/../ast/unary_operator.c2	/^    PreDec,         \/\/ --a$/;"	v
PreInc	$C2_LIBDIR/../ast/unary_operator.c2	/^    PreInc,         \/\/ ++a$/;"	v
Prefix	$C2_LIBDIR/../common/c_prec.c2	/^    Prefix,         \/\/ unary !, +, -, ~, &, *, prefix ++, --, c-cast$/;"	v
PrintHelper	$C2_LIBDIR/../ir/print.c2	/^type PrintHelper struct {$/;"	t
PrintfFormat	$C2_LIBDIR/../ast_utils/attr.c2	/^    [AttrKind.PrintfFormat] = AttrReq.NoArg,$/;"	v
Pure	$C2_LIBDIR/../ast_utils/attr.c2	/^    [AttrKind.Pure]         = AttrReq.NoArg,$/;"	v
QUESTION	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^    QUESTION,$/;"	v
QualType_Const	$C2_LIBDIR/../ast/qualtype.c2	/^public const usize QualType_Const    = 0x1;$/;"	v
QualType_Invalid	$C2_LIBDIR/../analyser/conversion_checker.c2	/^    return QualType_Invalid;$/;"	v
QualType_Invalid	$C2_LIBDIR/../analyser/module_analyser_binop.c2	/^    return QualType_Invalid;$/;"	v
QualType_Invalid	$C2_LIBDIR/../analyser/module_analyser_builtin.c2	/^    return QualType_Invalid;$/;"	v
QualType_Invalid	$C2_LIBDIR/../analyser/module_analyser_call.c2	/^    return QualType_Invalid;$/;"	v
QualType_Invalid	$C2_LIBDIR/../analyser/module_analyser_expr.c2	/^    return QualType_Invalid;$/;"	v
QualType_Invalid	$C2_LIBDIR/../analyser/module_analyser_member.c2	/^                return QualType_Invalid;$/;"	v
QualType_Invalid	$C2_LIBDIR/../analyser/module_analyser_stmt.c2	/^        return QualType_Invalid;$/;"	v
QualType_Invalid	$C2_LIBDIR/../analyser/module_analyser_type.c2	/^        return QualType_Invalid;$/;"	v
QualType_Invalid	$C2_LIBDIR/../analyser/module_analyser_unaryop.c2	/^    return QualType_Invalid;$/;"	v
QualType_Invalid	$C2_LIBDIR/../ast/utils.c2	/^public const QualType QualType_Invalid = { }$/;"	v
QualType_Mask	$C2_LIBDIR/../ast/qualtype.c2	/^const usize QualType_Mask     = 0x3;$/;"	v
QualType_Volatile	$C2_LIBDIR/../ast/qualtype.c2	/^public const usize QualType_Volatile = 0x2;$/;"	v
Question	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    [Kind.Question] = Conditional,$/;"	v
Question	$C2_LIBDIR/../parser/token.c2	/^    [Kind.Question]         = "?",$/;"	v
QueueWorker	$C2_LIBDIR/../ir/work_queue.c2	/^type QueueWorker struct {$/;"	t
RBRACE	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^    RBRACE,$/;"	v
RBrace	$C2_LIBDIR/../parser/token.c2	/^    [Kind.RBrace]           = "}",$/;"	v
RHS	$C2_LIBDIR/../analyser/module_analyser.c2	/^const u32 RHS = 0x02;$/;"	v
RHS	$C2_LIBDIR/../analyser/module_analyser_binop.c2	/^    RHS,        \/\/ Xor$/;"	v
RPAREN	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^    RPAREN,$/;"	v
RParen	$C2_LIBDIR/../parser/token.c2	/^    [Kind.RParen]           = ")",$/;"	v
RSQUARE	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^    RSQUARE,$/;"	v
RSquare	$C2_LIBDIR/../parser/token.c2	/^    [Kind.RSquare]          = "]",$/;"	v
RValue	$C2_LIBDIR/../ast/expr.c2	/^    RValue, \/\/ can only be used as RHS of assignement$/;"	v
Range	$C2_LIBDIR/../ast/expr.c2	/^    Range,$/;"	v
Recipe_help	$C2_LIBDIR/../compiler/main.c2	/^const char[] Recipe_help =$/;"	v
Red	$C2_LIBDIR/../ast_utils/color.c2	/^public const char[] Red      = "\\033[0;31m";$/;"	v
Red	$C2_LIBDIR/../plugins/unit_test2.c2	/^public const char[] Red      = "\\033[0;31m";$/;"	v
Register	$C2_LIBDIR/../ir/ref.c2	/^    Register,  \/\/ nr (0,1,..)$/;"	v
Relational	$C2_LIBDIR/../common/c2_prec.c2	/^    Relational,     \/\/ ==, !=, >=, <=, >, <$/;"	v
Relative	$C2_LIBDIR/../common/c_prec.c2	/^    Relative,       \/\/ >=, <=, >, <$/;"	v
Rem	$C2_LIBDIR/../ir/instr_kind.c2	/^    Rem,$/;"	v
RemAssign	$C2_LIBDIR/../analyser/module_analyser_binop.c2	/^    RemAssign,      int$/;"	v
RemAssign	$C2_LIBDIR/../ast/binary_operator.c2	/^    RemAssign,$/;"	v
RemAssign	$C2_LIBDIR/../common/c2_prec.c2	/^    [BinaryOpcode.RemAssign]   = Assignment,$/;"	v
RemAssign	$C2_LIBDIR/../common/c_prec.c2	/^    [BinaryOpcode.RemAssign]   = Assignment,$/;"	v
Remainder	$C2_LIBDIR/../analyser/module_analyser_binop.c2	/^    Remainder,      int$/;"	v
Remainder	$C2_LIBDIR/../ast/binary_operator.c2	/^    Remainder,$/;"	v
Remainder	$C2_LIBDIR/../common/c2_prec.c2	/^    [BinaryOpcode.Remainder]   = Multiplicative,$/;"	v
Remainder	$C2_LIBDIR/../common/c_prec.c2	/^    [BinaryOpcode.Remainder]   = Multiplicative,$/;"	v
Required_arg	$C2_LIBDIR/../ast_utils/attr.c2	/^const AttrReq[] Required_arg = {$/;"	v
Ret	$C2_LIBDIR/../ir/instr_kind.c2	/^    Ret,$/;"	v
Return	$C2_LIBDIR/../analyser/module_analyser_stmt.c2	/^    Return,$/;"	v
Return	$C2_LIBDIR/../ast/ast_evaluator.c2	/^    Return,     \/\/ return with or without value$/;"	v
Return	$C2_LIBDIR/../ast/stmt.c2	/^    Return,$/;"	v
ReturnStmtBits	$C2_LIBDIR/../ast/return_stmt.c2	/^type ReturnStmtBits struct {$/;"	t
SEMI_COLON	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^    SEMI_COLON,$/;"	v
SLASH	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^    SLASH,$/;"	v
SQUOTE	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^    SQUOTE,$/;"	v
STAR	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^    STAR,$/;"	v
Scalar	$C2_LIBDIR/../common/yaml/yaml_data.c2	/^    Scalar,$/;"	v
Section	$C2_LIBDIR/../ast_utils/attr.c2	/^    [AttrKind.Section]      = AttrReq.String,$/;"	v
Semicolon	$C2_LIBDIR/../parser/token.c2	/^    [Kind.Semicolon]        = ";",$/;"	v
Sequence	$C2_LIBDIR/../common/yaml/yaml_data.c2	/^    Sequence,$/;"	v
Set	$C2_LIBDIR/../compiler/c2recipe_parser.c2	/^type Set struct {$/;"	t
SetUse	$C2_LIBDIR/../compiler/c2recipe_parser.c2	/^    SetUse,$/;"	v
Shift	$C2_LIBDIR/../common/c2_prec.c2	/^    Shift,          \/\/ <<, >>$/;"	v
Shift	$C2_LIBDIR/../common/c_prec.c2	/^    Shift,          \/\/ <<, >>$/;"	v
ShiftLeft	$C2_LIBDIR/../analyser/module_analyser_binop.c2	/^    ShiftLeft,      int$/;"	v
ShiftLeft	$C2_LIBDIR/../ast/binary_operator.c2	/^    ShiftLeft,$/;"	v
ShiftLeft	$C2_LIBDIR/../common/c2_prec.c2	/^    [BinaryOpcode.ShiftLeft]   = Shift,$/;"	v
ShiftLeft	$C2_LIBDIR/../common/c_prec.c2	/^    [BinaryOpcode.ShiftLeft]   = Shift,$/;"	v
ShiftRight	$C2_LIBDIR/../analyser/module_analyser_binop.c2	/^    ShiftRight,     int$/;"	v
ShiftRight	$C2_LIBDIR/../ast/binary_operator.c2	/^    ShiftRight,$/;"	v
ShiftRight	$C2_LIBDIR/../common/c2_prec.c2	/^    [BinaryOpcode.ShiftRight]  = Shift,$/;"	v
ShiftRight	$C2_LIBDIR/../common/c_prec.c2	/^    [BinaryOpcode.ShiftRight]  = Shift,$/;"	v
Shl	$C2_LIBDIR/../ir/instr_kind.c2	/^    Shl,$/;"	v
ShlAssign	$C2_LIBDIR/../analyser/module_analyser_binop.c2	/^    ShlAssign,      int$/;"	v
ShlAssign	$C2_LIBDIR/../ast/binary_operator.c2	/^    ShlAssign,$/;"	v
ShlAssign	$C2_LIBDIR/../common/c2_prec.c2	/^    [BinaryOpcode.ShlAssign]   = Assignment,$/;"	v
ShlAssign	$C2_LIBDIR/../common/c_prec.c2	/^    [BinaryOpcode.ShlAssign]   = Assignment,$/;"	v
Short	$C2_LIBDIR/../ir/init_value.c2	/^    Short,      \/\/ stored in initvalue$/;"	v
Shr	$C2_LIBDIR/../ir/instr_kind.c2	/^    Shr,$/;"	v
ShrASsign	$C2_LIBDIR/../analyser/module_analyser_binop.c2	/^    ShrASsign,      int$/;"	v
ShrAssign	$C2_LIBDIR/../ast/binary_operator.c2	/^    ShrAssign,$/;"	v
ShrAssign	$C2_LIBDIR/../common/c2_prec.c2	/^    [BinaryOpcode.ShrAssign]   = Assignment,$/;"	v
ShrAssign	$C2_LIBDIR/../common/c_prec.c2	/^    [BinaryOpcode.ShrAssign]   = Assignment,$/;"	v
Single_Quoted_Scalar	$C2_LIBDIR/../common/yaml/yaml_tokenizer.c2	/^    Single_Quoted_Scalar,$/;"	v
Size_prefix	$C2_LIBDIR/../generator/c/c_generator_expr.c2	/^const bool[] Size_prefix = {$/;"	v
Sizeof	$C2_LIBDIR/../ast/builtin_expr.c2	/^    Sizeof,$/;"	v
Slash	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    [Kind.Slash]   = Multiplicative,$/;"	v
Slash	$C2_LIBDIR/../parser/token.c2	/^    [Kind.Slash]            = "\/",$/;"	v
SlashEqual	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    [Kind.SlashEqual]     = DivAssign,$/;"	v
SlashEqual	$C2_LIBDIR/../parser/token.c2	/^    [Kind.SlashEqual]       = "\/=",$/;"	v
Slot	$C2_LIBDIR/../ir/ref.c2	/^    Slot,      \/\/ slot_idx$/;"	v
SlotMax	$C2_LIBDIR/../ir/common.c2	/^public const u32 SlotMax = 256;$/;"	v
StackLayer	$C2_LIBDIR/../analyser/module_analyser.c2	/^type StackLayer struct {$/;"	t
StackLevel	$C2_LIBDIR/../common/yaml/yaml_data.c2	/^type StackLevel struct {$/;"	t
StackSize	$C2_LIBDIR/../parser/case_list.c2	/^public const u32 StackSize = 4;$/;"	v
StackSize	$C2_LIBDIR/../parser/expr_list.c2	/^public const u32 StackSize = 4;$/;"	v
StackSize	$C2_LIBDIR/../parser/stmt_list.c2	/^public const u32 StackSize = 4;$/;"	v
Star	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    [Kind.Star] = 7,$/;"	v
Star	$C2_LIBDIR/../parser/token.c2	/^    [Kind.Star]             = "*",$/;"	v
StarEqual	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    [Kind.StarEqual]      = MulAssign,$/;"	v
StarEqual	$C2_LIBDIR/../parser/token.c2	/^    [Kind.StarEqual]        = "*=",$/;"	v
Stat	$C2_LIBDIR/../ast/statistics.c2	/^type Stat struct {$/;"	t
StaticAssertList	$C2_LIBDIR/../ast/static_assert_list.c2	/^type StaticAssertList struct {$/;"	t
StaticLibrary	$C2_LIBDIR/../common/build_target.c2	/^    StaticLibrary,$/;"	v
StaticLibrary	$C2_LIBDIR/../common/component.c2	/^    StaticLibrary,$/;"	v
StaticTypeFunc	$C2_LIBDIR/../ast/function_decl.c2	/^    StaticTypeFunc,$/;"	v
Stats	$C2_LIBDIR/../ast/statistics.c2	/^type Stats struct {$/;"	t
Stats	$C2_LIBDIR/../generator/radix_tree/radix_tree_dump.c2	/^type Stats struct {$/;"	t
StmtBits	$C2_LIBDIR/../ast/stmt.c2	/^type StmtBits struct {$/;"	t
Store1	$C2_LIBDIR/../ir/instr_kind.c2	/^    Store1,$/;"	v
Store2	$C2_LIBDIR/../ir/instr_kind.c2	/^    Store2,$/;"	v
Store4	$C2_LIBDIR/../ir/instr_kind.c2	/^    Store4,$/;"	v
Store8	$C2_LIBDIR/../ir/instr_kind.c2	/^    Store8,$/;"	v
String	$C2_LIBDIR/../analyser_utils/printf_utils.c2	/^    String,         \/\/ %s, %-s, %4s$/;"	v
String	$C2_LIBDIR/../ast_utils/attr.c2	/^    String,$/;"	v
StringList	$C2_LIBDIR/../generator/c/c_generator_trace.c2	/^type StringList struct {$/;"	t
StringLiteral	$C2_LIBDIR/../ast/expr.c2	/^    StringLiteral,$/;"	v
StringLiteral	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    [Kind.StringLiteral] = 5,$/;"	v
StringLiteral	$C2_LIBDIR/../parser/token.c2	/^    [Kind.StringLiteral]    = "string",$/;"	v
StringLiteralBits	$C2_LIBDIR/../ast/string_literal.c2	/^type StringLiteralBits struct {$/;"	t
StringTypePool	$C2_LIBDIR/../ast/string_type_pool.c2	/^type StringTypePool struct {$/;"	t
StringTypeSlot	$C2_LIBDIR/../ast/string_type_pool.c2	/^type StringTypeSlot struct {$/;"	t
Struct	$C2_LIBDIR/../ast/type.c2	/^    Struct,$/;"	v
StructFieldInitChecker	$C2_LIBDIR/../analyser/struct_field_init_checker.c2	/^type StructFieldInitChecker struct {$/;"	t
StructMember	$C2_LIBDIR/../ast/identifier_expr.c2	/^    StructMember,          \/\/ struct-var.member$/;"	v
StructMember	$C2_LIBDIR/../ast/var_decl.c2	/^    StructMember,$/;"	v
StructMemberType	$C2_LIBDIR/../ast/type_ref.c2	/^    StructMemberType,$/;"	v
StructType	$C2_LIBDIR/../ast/decl.c2	/^    StructType,$/;"	v
StructTypeDeclBits	$C2_LIBDIR/../ast/struct_type_decl.c2	/^type StructTypeDeclBits struct {$/;"	t
Sub	$C2_LIBDIR/../ir/instr_kind.c2	/^    Sub,$/;"	v
SubAssign	$C2_LIBDIR/../analyser/module_analyser_binop.c2	/^    SubAssign,      ptr(l), int$/;"	v
SubAssign	$C2_LIBDIR/../ast/binary_operator.c2	/^    SubAssign,$/;"	v
SubAssign	$C2_LIBDIR/../common/c2_prec.c2	/^    [BinaryOpcode.SubAssign]   = Assignment,$/;"	v
SubAssign	$C2_LIBDIR/../common/c_prec.c2	/^    [BinaryOpcode.SubAssign]   = Assignment,$/;"	v
Subtract	$C2_LIBDIR/../analyser/module_analyser_binop.c2	/^    Subtract,       ptr(l\/both), int$/;"	v
Subtract	$C2_LIBDIR/../ast/binary_operator.c2	/^    Subtract,$/;"	v
Subtract	$C2_LIBDIR/../common/c2_prec.c2	/^    [BinaryOpcode.Subtract]    = Additive,$/;"	v
Subtract	$C2_LIBDIR/../common/c_prec.c2	/^    [BinaryOpcode.Subtract]    = Additive,$/;"	v
Switch	$C2_LIBDIR/../ast/stmt.c2	/^    Switch,$/;"	v
Switch	$C2_LIBDIR/../ir/instr_kind.c2	/^    Switch,$/;"	v
SwitchCase	$C2_LIBDIR/../ir/block.c2	/^    SwitchCase,$/;"	v
SwitchCaseBits	$C2_LIBDIR/../ast/switch_case.c2	/^type SwitchCaseBits struct {$/;"	t
SwitchCond	$C2_LIBDIR/../ir/block.c2	/^    SwitchCond,$/;"	v
SwitchDefault	$C2_LIBDIR/../ir/block.c2	/^    SwitchDefault,$/;"	v
SwitchJoin	$C2_LIBDIR/../ir/block.c2	/^    SwitchJoin,$/;"	v
SwitchStmtBits	$C2_LIBDIR/../ast/switch_stmt.c2	/^type SwitchStmtBits struct {$/;"	t
Symbol	$C2_LIBDIR/../ir/init_value.c2	/^    Symbol,$/;"	v
Symbol	$C2_LIBDIR/../ir/ref.c2	/^    Symbol,    \/\/ index into symbols$/;"	v
Symbol	$C2_LIBDIR/../ir/symbol_list.c2	/^type Symbol struct {$/;"	t
SymbolList	$C2_LIBDIR/../ir/symbol_list.c2	/^type SymbolList struct {$/;"	t
TABSPACE	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^    TABSPACE,$/;"	v
TILDE	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^    TILDE,$/;"	v
Temp	$C2_LIBDIR/../ir/ref.c2	/^    Temp,      \/\/ temp_idx (already resolved)$/;"	v
TemplateFunction	$C2_LIBDIR/../ast/instance_table.c2	/^type TemplateFunction struct {$/;"	t
TemplateInstance	$C2_LIBDIR/../ast/instance_table.c2	/^type TemplateInstance struct {$/;"	t
Text	$C2_LIBDIR/../compiler/c2recipe_parser.c2	/^    Text,           \/\/ can also be a text number (eg '10')$/;"	v
Text	$C2_LIBDIR/../ir/init_value.c2	/^    Text,$/;"	v
Text	$C2_LIBDIR/../ir/ref.c2	/^    Text,      \/\/ idx into string pool, for comment$/;"	v
Tilde	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    [Kind.Tilde] = 7,$/;"	v
Tilde	$C2_LIBDIR/../parser/token.c2	/^    [Kind.Tilde]            = "~",$/;"	v
ToContainer	$C2_LIBDIR/../ast/builtin_expr.c2	/^    ToContainer,$/;"	v
ToContainerData	$C2_LIBDIR/../ast/builtin_expr.c2	/^type ToContainerData struct {$/;"	t
ToHex	$C2_LIBDIR/../ast_utils/string_buffer.c2	/^const u8[16] ToHex = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E'/;"	v
Tok2builtin	$C2_LIBDIR/../parser/c2_parser.c2	/^const BuiltinKind[] Tok2builtin = {$/;"	v
Token	$C2_LIBDIR/../common/yaml/yaml_tokenizer.c2	/^type Token struct {$/;"	t
Token	$C2_LIBDIR/../compiler/c2recipe_parser.c2	/^type Token struct {$/;"	t
TokenKind	$C2_LIBDIR/../common/yaml/yaml_tokenizer.c2	/^type TokenKind enum u8 {$/;"	t
Tokenizer	$C2_LIBDIR/../common/yaml/yaml_tokenizer.c2	/^type Tokenizer struct {$/;"	t
Tools	$C2_LIBDIR/../ir/context.c2	/^type Tools struct {$/;"	t
TraceCall	$C2_LIBDIR/../generator/c/c_generator_trace.c2	/^type TraceCall struct {$/;"	t
TraceCallList	$C2_LIBDIR/../generator/c/c_generator_trace.c2	/^type TraceCallList struct {$/;"	t
Trimmer	$C2_LIBDIR/../generator/radix_tree/radix_tree_fs.c2	/^type Trimmer struct {$/;"	t
Type	$C2_LIBDIR/../ast/expr.c2	/^    Type,$/;"	v
Type	$C2_LIBDIR/../ast/identifier_expr.c2	/^    Type,$/;"	v
TypeBits	$C2_LIBDIR/../ast/type.c2	/^type TypeBits struct {$/;"	t
TypeExprBits	$C2_LIBDIR/../ast/type_expr.c2	/^type TypeExprBits struct {$/;"	t
TypeFunc	$C2_LIBDIR/../ast/function_decl.c2	/^    TypeFunc,$/;"	v
TypeRefBits	$C2_LIBDIR/../ast/type_ref.c2	/^type TypeRefBits struct {$/;"	t
U16	$C2_LIBDIR/../ir/context.c2	/^    [Type.U16] = InstrKind.Store2,$/;"	v
U16	$C2_LIBDIR/../ir/types.c2	/^    U16,$/;"	v
U32	$C2_LIBDIR/../ir/context.c2	/^    [Type.U32] = InstrKind.Store4,$/;"	v
U32	$C2_LIBDIR/../ir/types.c2	/^    U32,$/;"	v
U64	$C2_LIBDIR/../ir/context.c2	/^    [Type.U64] = InstrKind.Store8,$/;"	v
U64	$C2_LIBDIR/../ir/types.c2	/^    U64,$/;"	v
U8	$C2_LIBDIR/../ir/context.c2	/^    [Type.U8]  = InstrKind.Store1,$/;"	v
U8	$C2_LIBDIR/../ir/types.c2	/^    U8,$/;"	v
UInt16	$C2_LIBDIR/../ast/builtin_type.c2	/^    [BuiltinKind.UInt16] = true,$/;"	v
UInt16	$C2_LIBDIR/../generator/c/c_generator_expr.c2	/^    [BuiltinKind.UInt16] = false,$/;"	v
UInt16	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^    [BuiltinKind.UInt16]  = U16,$/;"	v
UInt16	$C2_LIBDIR/../parser/c2_parser.c2	/^    UInt16,     \/\/ KW_u16$/;"	v
UInt32	$C2_LIBDIR/../analyser/conversion_checker.c2	/^     1 UInt32,$/;"	v
UInt32	$C2_LIBDIR/../ast/builtin_type.c2	/^    [BuiltinKind.UInt32] = true,$/;"	v
UInt32	$C2_LIBDIR/../generator/c/c_generator_expr.c2	/^    [BuiltinKind.UInt32] = false,$/;"	v
UInt32	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^    [BuiltinKind.UInt32]  = U32,$/;"	v
UInt32	$C2_LIBDIR/../parser/c2_parser.c2	/^    UInt32,     \/\/ KW_u32$/;"	v
UInt64	$C2_LIBDIR/../analyser/conversion_checker.c2	/^     3 UInt64,$/;"	v
UInt64	$C2_LIBDIR/../ast/builtin_type.c2	/^    [BuiltinKind.UInt64] = true,$/;"	v
UInt64	$C2_LIBDIR/../generator/c/c_generator_expr.c2	/^    [BuiltinKind.UInt64] = true,$/;"	v
UInt64	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^    [BuiltinKind.UInt64]  = U64,$/;"	v
UInt64	$C2_LIBDIR/../parser/c2_parser.c2	/^    UInt64,     \/\/ KW_u64$/;"	v
UInt8	$C2_LIBDIR/../ast/builtin_type.c2	/^    [BuiltinKind.UInt8] = true,$/;"	v
UInt8	$C2_LIBDIR/../generator/c/c_generator_expr.c2	/^    [BuiltinKind.UInt8] = false,$/;"	v
UInt8	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^    [BuiltinKind.UInt8]   = U8,$/;"	v
UInt8	$C2_LIBDIR/../parser/c2_parser.c2	/^    UInt8,      \/\/ KW_u8$/;"	v
USize	$C2_LIBDIR/../ast/builtin_type.c2	/^    [BuiltinKind.USize] = true,$/;"	v
USize	$C2_LIBDIR/../generator/c/c_generator_expr.c2	/^    [BuiltinKind.USize] = true,$/;"	v
USize	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^    [BuiltinKind.USize]   = U64,  \/\/ TODO 32-bit$/;"	v
USize	$C2_LIBDIR/../parser/c2_parser.c2	/^    USize,      \/\/ KW_usize$/;"	v
UnaryOperator	$C2_LIBDIR/../ast/expr.c2	/^    UnaryOperator,$/;"	v
UnaryOperatorBits	$C2_LIBDIR/../ast/unary_operator.c2	/^type UnaryOperatorBits struct {$/;"	t
Unchecked	$C2_LIBDIR/../ast/decl.c2	/^    Unchecked,$/;"	v
Unknown	$C2_LIBDIR/../ast_utils/attr.c2	/^    [AttrKind.Unknown]      = AttrReq.NoArg,$/;"	v
Unknown	$C2_LIBDIR/../common/c2_prec.c2	/^    Unknown,        \/\/ Not binary operator.$/;"	v
Unknown	$C2_LIBDIR/../common/c_prec.c2	/^    Unknown,        \/\/ Not binary operator.$/;"	v
Unknown	$C2_LIBDIR/../common/yaml/yaml_data.c2	/^    Unknown,$/;"	v
Unreachable	$C2_LIBDIR/../analyser/scope.c2	/^const u32 Unreachable = 0x80;    \/\/ set after return\/goto\/break\/continue\/no-return func$/;"	v
Unresolved	$C2_LIBDIR/../ast/identifier_expr.c2	/^    Unresolved,$/;"	v
Unspecified	$C2_LIBDIR/../ir/block.c2	/^    Unspecified,$/;"	v
Unused	$C2_LIBDIR/../ast_utils/attr.c2	/^    [AttrKind.Unused]       = AttrReq.NoArg,$/;"	v
UnusedParams	$C2_LIBDIR/../ast_utils/attr.c2	/^    [AttrKind.UnusedParams] = AttrReq.NoArg,$/;"	v
Usage_help	$C2_LIBDIR/../compiler/main.c2	/^const char[] Usage_help =$/;"	v
Use	$C2_LIBDIR/../compiler/c2recipe_parser.c2	/^    Use,$/;"	v
User	$C2_LIBDIR/../ast/type_ref.c2	/^    User,$/;"	v
VAR_QUEUED	$C2_LIBDIR/../ir/interference_graph.c2	/^const u8 VAR_QUEUED = 253;$/;"	v
VAR_TODO	$C2_LIBDIR/../ir/interference_graph.c2	/^const u8 VAR_TODO   = 254;$/;"	v
VAR_UNUSED	$C2_LIBDIR/../ir/interference_graph.c2	/^const u8 VAR_UNUSED = 255;$/;"	v
Value	$C2_LIBDIR/../ir/ref.c2	/^    Value,     \/\/ int value that fits 28 bits$/;"	v
Var	$C2_LIBDIR/../ast/identifier_expr.c2	/^    Var,$/;"	v
VarDeclBits	$C2_LIBDIR/../ast/var_decl.c2	/^type VarDeclBits struct {$/;"	t
VarDeclInit	$C2_LIBDIR/../ast/var_decl.c2	/^type VarDeclInit struct {$/;"	t
Variable	$C2_LIBDIR/../ast/decl.c2	/^    Variable,$/;"	v
Variable	$C2_LIBDIR/../ir/interference_graph.c2	/^type Variable struct {$/;"	t
Variable	$C2_LIBDIR/../ir/live_map.c2	/^type Variable struct {$/;"	t
Void	$C2_LIBDIR/../ast/builtin_type.c2	/^    [BuiltinKind.Void] = false,$/;"	v
Void	$C2_LIBDIR/../generator/c/c_generator_expr.c2	/^    [BuiltinKind.Void] = false,$/;"	v
Void	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^    [BuiltinKind.Void]    = None,$/;"	v
Void	$C2_LIBDIR/../parser/c2_parser.c2	/^    Void,       \/\/ KW_void$/;"	v
Warning	$C2_LIBDIR/../common/diagnostics.c2	/^    Warning,$/;"	v
Warning	$C2_LIBDIR/../parser/token.c2	/^    [Kind.Warning]          = "warning",$/;"	v
Warning_control	$C2_LIBDIR/../generator/c/c_generator.c2	/^const char[] Warning_control =$/;"	v
Warnings	$C2_LIBDIR/../compiler/c2recipe_parser.c2	/^    Warnings,$/;"	v
Weak	$C2_LIBDIR/../ast_utils/attr.c2	/^    [AttrKind.Weak]         = AttrReq.NoArg,$/;"	v
While	$C2_LIBDIR/../ast/stmt.c2	/^    While,$/;"	v
WhileBody	$C2_LIBDIR/../ir/block.c2	/^    WhileBody,$/;"	v
WhileCond	$C2_LIBDIR/../ir/block.c2	/^    WhileCond,$/;"	v
WhileJoin	$C2_LIBDIR/../ir/block.c2	/^    WhileJoin,$/;"	v
White	$C2_LIBDIR/../ast_utils/color.c2	/^public const char[] White    = "\\033[01;37m";$/;"	v
Word	$C2_LIBDIR/../ir/init_value.c2	/^    Word,       \/\/ stored in initvalue$/;"	v
Word2	$C2_LIBDIR/../ir/init_value.c2	/^    Word2,      \/\/ stored in constants$/;"	v
Words	$C2_LIBDIR/../generator/radix_tree/radix_tree.c2	/^type Words struct {$/;"	t
WorkQueue	$C2_LIBDIR/../ir/work_queue.c2	/^type WorkQueue struct {$/;"	t
Wrapper	$C2_LIBDIR/../generator/generator_utils.c2	/^type Wrapper struct {$/;"	t
WriteSlotAccess	$C2_LIBDIR/../ir/slot_collector.c2	/^type WriteSlotAccess struct {$/;"	t
Xor	$C2_LIBDIR/../analyser/module_analyser_binop.c2	/^    Xor,            int$/;"	v
Xor	$C2_LIBDIR/../ast/binary_operator.c2	/^    Xor,$/;"	v
Xor	$C2_LIBDIR/../common/c2_prec.c2	/^    [BinaryOpcode.Xor]         = Bitwise,$/;"	v
Xor	$C2_LIBDIR/../common/c_prec.c2	/^    [BinaryOpcode.Xor]         = Xor,$/;"	v
Xor	$C2_LIBDIR/../ir/instr_kind.c2	/^    Xor,$/;"	v
XorAssign	$C2_LIBDIR/../analyser/module_analyser_binop.c2	/^    XorAssign,      int$/;"	v
XorAssign	$C2_LIBDIR/../ast/binary_operator.c2	/^    XorAssign,$/;"	v
XorAssign	$C2_LIBDIR/../common/c2_prec.c2	/^    [BinaryOpcode.XorAssign]   = Assignment,$/;"	v
XorAssign	$C2_LIBDIR/../common/c_prec.c2	/^    [BinaryOpcode.XorAssign]   = Assignment,$/;"	v
Yellow	$C2_LIBDIR/../ast_utils/color.c2	/^public const char[] Yellow   = "\\033[0;33m";$/;"	v
Yellow	$C2_LIBDIR/../plugins/unit_test2.c2	/^public const char[] Yellow   = "\\033[0;33m";$/;"	v
Zero	$C2_LIBDIR/../ir/init_value.c2	/^    Zero,       \/\/ argument is number of bytes$/;"	v
Zone	$C2_LIBDIR/../generator/radix_tree/radix_tree.c2	/^type Zone struct {$/;"	t
a1	$C2_LIBDIR/../analyser/conversion_checker.c2	/^        Decl* a1 = args1[i];$/;"	v
a1	$C2_LIBDIR/../ir/interference_graph.c2	/^    Arena* a1 = &g.arenas[arena_idx];$/;"	v
a1	$C2_LIBDIR/../ir/live_map.c2	/^    Arena* a1 = &g.arenas[arena_idx];$/;"	v
a1	$C2_LIBDIR/../ir/slot_writes_map.c2	/^    Arena* a1 = &m.arenas[arena_idx];$/;"	v
a2	$C2_LIBDIR/../analyser/conversion_checker.c2	/^        Decl* a2 = args2[i];$/;"	v
a2	$C2_LIBDIR/../ir/interference_graph.c2	/^    Arena* a2 = &g.arenas[arena_idx+1];$/;"	v
a2	$C2_LIBDIR/../ir/live_map.c2	/^    Arena* a2 = &g.arenas[arena_idx+1];$/;"	v
a2	$C2_LIBDIR/../ir/slot_writes_map.c2	/^    Arena* a2 = &m.arenas[arena_idx+1];$/;"	v
a8	$C2_LIBDIR/../analyser/size_analyser.c2	/^                u32 a8 = align * 8;$/;"	v
abi	$C2_LIBDIR/../common/target_info.c2	/^    Abi abi;$/;"	v
abi_names	$C2_LIBDIR/../common/target_info.c2	/^const char*[] abi_names = { "unknown", "gnu", "gnueabi", "macho", "win32", "rv32", "bsd" }$/;"	v
abi_str	$C2_LIBDIR/../common/target_info.c2	/^    char[32] abi_str;$/;"	v
act	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^        Action act = Char_lookup[(u8)(*t.cur)];$/;"	v
ad	$C2_LIBDIR/../analyser/module_analyser_init.c2	/^    ArrayDesignatedInitExpr* ad = (ArrayDesignatedInitExpr*)e;$/;"	v
ad	$C2_LIBDIR/../generator/c/c_generator_expr.c2	/^    ArrayDesignatedInitExpr* ad = cast<ArrayDesignatedInitExpr*>(e);$/;"	v
ad	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^                const ArrayDesignatedInitExpr* ad = cast<ArrayDesignatedInitExpr*>(ie);$/;"	v
addAST	$C2_LIBDIR/../ast/utils.c2	/^fn u32 addAST(AST* ast_) {$/;"	f
addSource	$C2_LIBDIR/../plugins/plugin_info.c2	/^    AddSourceFn addSource;$/;"	v
add_char	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^        goto add_char;$/;"	v
add_gen_warning	$C2_LIBDIR/../generator/c/c_generator.c2	/^fn void add_gen_warning(string_buffer.Buf* out) {$/;"	f
add_utf8	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^        goto add_utf8;$/;"	v
address	$C2_LIBDIR/../ast/ast_evaluator.c2	/^    void* address;$/;"	v
after	$C2_LIBDIR/../compiler/c2recipe_yaml.c2	/^        const char* after = get_prefix(name, prefix, sizeof(prefix));$/;"	v
after_analysis	$C2_LIBDIR/../compiler/compiler.c2	/^    PluginFn after_analysis;      \/\/ after analysis$/;"	v
after_parsing	$C2_LIBDIR/../compiler/compiler.c2	/^    PluginFn after_parsing;       \/\/ after parsing, before analysis$/;"	v
ahead	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    u32 ahead = 1;$/;"	v
ahead	$C2_LIBDIR/../parser/c2_parser_stmt.c2	/^    u32 ahead = 1;$/;"	v
alias_idx	$C2_LIBDIR/../ast/import_decl.c2	/^    u32 alias_idx;$/;"	v
alias_idx	$C2_LIBDIR/../ast/member_expr.c2	/^            u32 alias_idx = id.getAliasNameIdx();$/;"	v
alias_loc	$C2_LIBDIR/../ast/import_decl.c2	/^    SrcLoc alias_loc;$/;"	v
alias_loc	$C2_LIBDIR/../parser/ast_builder.c2	/^                                   SrcLoc alias_loc,$/;"	v
alias_loc	$C2_LIBDIR/../parser/c2_parser.c2	/^        SrcLoc alias_loc = 0;$/;"	v
alias_name	$C2_LIBDIR/../ast/import_decl.c2	/^                                          u32 alias_name,$/;"	v
alias_name	$C2_LIBDIR/../parser/ast_builder.c2	/^                                   u32 alias_name,$/;"	v
alias_name	$C2_LIBDIR/../parser/c2_parser.c2	/^        u32 alias_name = 0;$/;"	v
align	$C2_LIBDIR/../analyser/size_analyser.c2	/^        u32 align = member.align;   \/\/ alignment for the current member$/;"	v
align	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^    u32 align;$/;"	v
alignment	$C2_LIBDIR/../ast/struct_type_decl.c2	/^    u32 alignment;$/;"	v
all	$C2_LIBDIR/../ir/ssa.c2	/^    Instr* all = fi.instructions.get(0);$/;"	v
allBitsSet	$C2_LIBDIR/../generator/ir/ir_generator_binop.c2	/^    bool allBitsSet = false;$/;"	v
allbits	$C2_LIBDIR/../ast/switch_case.c2	/^        u32 allbits;$/;"	v
alloc_slot	$C2_LIBDIR/../ir/slot_collector.c2	/^    u16 alloc_slot = 0;$/;"	v
allocated	$C2_LIBDIR/../ast_utils/context.c2	/^    u32 allocated;$/;"	v
ambiguous	$C2_LIBDIR/../analyser/scope.c2	/^    bool ambiguous = false;$/;"	v
ambiguous	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    bool ambiguous = true;$/;"	v
analyser	$C2_LIBDIR/../analyser/module_analyser_call.c2	/^        Analyser* analyser = create(ma.diags, ma.context, ma.astPool, ma.builder, ma.allmodules,/;"	v
and_true	$C2_LIBDIR/../generator/ir/ir_generator_expr.c2	/^    BlockId and_true = gen.ctx.createBlock(BlockKind.AndTrue);$/;"	v
arch	$C2_LIBDIR/../common/target_info.c2	/^    Arch arch;$/;"	v
arch_names	$C2_LIBDIR/../common/target_info.c2	/^const char*[] arch_names = { "unknown", "i686", "arm", "x86_64", "amd64", "arm64", "riscv32" }$/;"	v
arch_str	$C2_LIBDIR/../common/target_info.c2	/^    char[32] arch_str;$/;"	v
are_errors	$C2_LIBDIR/../common/warning_flags.c2	/^    bool are_errors;$/;"	v
arena_idx	$C2_LIBDIR/../ir/interference_graph.c2	/^    u32 arena_idx = findArena(r.capacity);$/;"	v
arena_idx	$C2_LIBDIR/../ir/live_map.c2	/^    u32 arena_idx = findArena(r.capacity);$/;"	v
arena_idx	$C2_LIBDIR/../ir/slot_writes_map.c2	/^    u32 arena_idx = findArena(r.capacity);$/;"	v
arenas	$C2_LIBDIR/../ir/interference_graph.c2	/^    Arena[NumArenas] arenas;$/;"	v
arenas	$C2_LIBDIR/../ir/live_map.c2	/^    Arena[NumArenas] arenas;$/;"	v
arenas	$C2_LIBDIR/../ir/slot_writes_map.c2	/^    Arena[NumArenas] arenas;$/;"	v
arg	$C2_LIBDIR/../analyser/module_analyser_call.c2	/^    Expr* arg = args[fa.idx];$/;"	v
arg	$C2_LIBDIR/../analyser/module_analyser_stmt.c2	/^    Expr** arg = r.getValue2();$/;"	v
arg	$C2_LIBDIR/../analyser/module_analyser_unaryop.c2	/^    const char* arg = "";$/;"	v
arg	$C2_LIBDIR/../ast/instantiator.c2	/^    void* arg;$/;"	v
arg	$C2_LIBDIR/../common/attr_handler.c2	/^    void* arg;$/;"	v
arg	$C2_LIBDIR/../compiler/compiler.c2	/^    void* arg;$/;"	v
arg	$C2_LIBDIR/../compiler/main.c2	/^    const char* arg = argv[i];$/;"	v
arg	$C2_LIBDIR/../compiler/plugin_mgr.c2	/^    void* arg; \/\/ from load$/;"	v
arg	$C2_LIBDIR/../generator/ast_visitor.c2	/^    void* arg;$/;"	v
arg	$C2_LIBDIR/../generator/c/c_generator.c2	/^        Decl* arg = cast<Decl*>(params[i]);$/;"	v
arg	$C2_LIBDIR/../generator/c/c_generator_call.c2	/^                Expr* arg = (call_index < call_num_args) ?$/;"	v
arg	$C2_LIBDIR/../generator/c/dep_finder.c2	/^    void* arg;$/;"	v
arg	$C2_LIBDIR/../generator/radix_tree/radix_tree.c2	/^    void* arg;$/;"	v
arg0	$C2_LIBDIR/../analyser/module_analyser_call.c2	/^        VarDecl* arg0 = func_args[0];$/;"	v
arg1	$C2_LIBDIR/../ir/context.c2	/^    const void* arg1;   \/\/ Context*$/;"	v
arg2	$C2_LIBDIR/../ir/context.c2	/^    const void* arg2;   \/\/ Symbol*$/;"	v
argbuf	$C2_LIBDIR/../common/process_utils.c2	/^        char[MAX_ARG_LEN] argbuf;$/;"	v
argc	$C2_LIBDIR/../common/process_utils.c2	/^    u32 argc = 0;$/;"	v
args	$C2_LIBDIR/../analyser/module_analyser.c2	/^    va_list args;$/;"	v
args	$C2_LIBDIR/../analyser/module_analyser_call.c2	/^    Expr** args;$/;"	v
args	$C2_LIBDIR/../ast/ast_evaluator.c2	/^    Value[16] args;$/;"	v
args	$C2_LIBDIR/../ast/call_expr.c2	/^    Expr*[0] args; \/\/ tail-allocated$/;"	v
args	$C2_LIBDIR/../ast_utils/string_buffer.c2	/^    va_list args;$/;"	v
args	$C2_LIBDIR/../common/console.c2	/^    va_list args;$/;"	v
args	$C2_LIBDIR/../common/diagnostics.c2	/^    va_list args;$/;"	v
args	$C2_LIBDIR/../common/process_utils.c2	/^    va_list args;$/;"	v
args	$C2_LIBDIR/../common/yaml/yaml_parser.c2	/^    va_list args;$/;"	v
args	$C2_LIBDIR/../compiler/c2recipe_parser.c2	/^    va_list args;$/;"	v
args	$C2_LIBDIR/../generator/ast_visitor.c2	/^    VarDecl** args = d.getParams();$/;"	v
args	$C2_LIBDIR/../generator/ast_visitor_expr.c2	/^    Expr** args  = c.getArgs();$/;"	v
args	$C2_LIBDIR/../generator/c/c_generator_call.c2	/^    Expr** args = call.getArgs();$/;"	v
args	$C2_LIBDIR/../generator/c/c_generator_expr.c2	/^    Expr** args;$/;"	v
args	$C2_LIBDIR/../generator/c/c_generator_pure_call.c2	/^    Expr** args = c.getArgs();$/;"	v
args	$C2_LIBDIR/../generator/c/dep_finder.c2	/^    VarDecl** args = d.getParams();$/;"	v
args	$C2_LIBDIR/../generator/c2i/c2i_generator_expr.c2	/^    Expr** args = ((CallExpr*)call).getArgs();$/;"	v
args	$C2_LIBDIR/../generator/ir/ir_generator_call.c2	/^    Expr** args = call.getArgs();$/;"	v
args	$C2_LIBDIR/../ir/instr.c2	/^    Ref[2] args; \/\/ most instructions$/;"	v
args	$C2_LIBDIR/../parser/ast_builder.c2	/^                                      Expr** args,$/;"	v
args	$C2_LIBDIR/../parser/c2_parser.c2	/^    va_list args;$/;"	v
args	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^    va_list args;$/;"	v
args	$C2_LIBDIR/../plugins/shell_cmd_plugin.c2	/^    const char* args = cmd.cmd + args_off;$/;"	v
args	$C2_LIBDIR/../plugins/unit_test1.c2	/^  va_list args;$/;"	v
args	$C2_LIBDIR/../plugins/unit_test2.c2	/^  va_list args;$/;"	v
args1	$C2_LIBDIR/../analyser/conversion_checker.c2	/^    Decl** args1 = (Decl**)fdl.getParams();$/;"	v
args2	$C2_LIBDIR/../analyser/conversion_checker.c2	/^    Decl** args2 = (Decl**)fdr.getParams();$/;"	v
args_off	$C2_LIBDIR/../plugins/shell_cmd_plugin.c2	/^    usize args_off = cmd_len + strspn(cmd.cmd + cmd_len, " \\t");$/;"	v
argx	$C2_LIBDIR/../generator/c/c_generator.c2	/^        Decl* argx = cast<Decl*>(params[i]);$/;"	v
arr	$C2_LIBDIR/../ast_utils/string_buffer.c2	/^                char[4] arr;$/;"	v
array	$C2_LIBDIR/../analyser/module_sorter.c2	/^    const u8* array = s.dsm.get_array();$/;"	v
array	$C2_LIBDIR/../common/dsm_sorter.c2	/^    u8* array;$/;"	v
array	$C2_LIBDIR/../generator/c/c_generator_trace.c2	/^    TraceCall* array;$/;"	v
arraySize	$C2_LIBDIR/../analyser/module_analyser_init.c2	/^            u32 arraySize = at.getSize();$/;"	v
arraySubscriptExprBits	$C2_LIBDIR/../ast/stmt.c2	/^        ArraySubscriptExprBits arraySubscriptExprBits;$/;"	v
arrayType	$C2_LIBDIR/../analyser/size_analyser.c2	/^        ArrayType* arrayType = (ArrayType*)t;$/;"	v
arrayTypeBits	$C2_LIBDIR/../ast/type.c2	/^        ArrayTypeBits arrayTypeBits;$/;"	v
array_init_sorter	$C2_LIBDIR/../generator/ir/array_init_sorter.c2	/^module array_init_sorter;$/;"	v
array_init_sorter	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^import array_init_sorter;$/;"	v
array_size	$C2_LIBDIR/../analyser/module_analyser_init.c2	/^        i32 array_size = -1; \/\/ will be determined by init-expr$/;"	v
array_size	$C2_LIBDIR/../generator/ir/array_init_sorter.c2	/^    u32 array_size;$/;"	v
array_size	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^    u32 array_size = at.getSize();  \/\/ TODO use for un-initialized stuff$/;"	v
array_values	$C2_LIBDIR/../ast/ast.c2	/^    ArrayValueList array_values;$/;"	v
arrays	$C2_LIBDIR/../ast/type_ref.c2	/^    Expr*[3] arrays;    \/\/ Note: in order of parsing: so [4][20] -> [4] [20]$/;"	v
asan	$C2_LIBDIR/../compiler/compiler.c2	/^    bool asan;$/;"	v
asan	$C2_LIBDIR/../generator/c/c_generator.c2	/^    bool asan;$/;"	v
asmStmtBits	$C2_LIBDIR/../ast/stmt.c2	/^        AsmStmtBits asmStmtBits;$/;"	v
asm_file_count	$C2_LIBDIR/../common/build_target.c2	/^    u32 asm_file_count;$/;"	v
asm_file_max	$C2_LIBDIR/../common/build_target.c2	/^    u32 asm_file_max;$/;"	v
asm_files	$C2_LIBDIR/../common/build_target.c2	/^    File* asm_files;$/;"	v
asm_string	$C2_LIBDIR/../ast/asm_stmt.c2	/^    StringLiteral* asm_string;$/;"	v
asmflags	$C2_LIBDIR/../common/build_file.c2	/^    u32 asmflags;$/;"	v
asmflags	$C2_LIBDIR/../generator/c/c_generator_special.c2	/^    const char* asmflags = "";$/;"	v
assert_generated	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^    bool assert_generated;$/;"	v
asserts	$C2_LIBDIR/../ast/ast.c2	/^    StaticAssert** asserts = a.static_asserts.get();$/;"	v
asserts	$C2_LIBDIR/../ast/static_assert_list.c2	/^    StaticAssert** asserts;$/;"	v
asserts2	$C2_LIBDIR/../ast/static_assert_list.c2	/^        void* asserts2 = malloc(l.capacity * sizeof(StaticAssert*));$/;"	v
assignLoc	$C2_LIBDIR/../ast/var_decl.c2	/^                                    SrcLoc assignLoc,$/;"	v
assignLoc	$C2_LIBDIR/../parser/ast_builder.c2	/^                          assignLoc,$/;"	v
assignLoc	$C2_LIBDIR/../parser/c2_parser.c2	/^    SrcLoc assignLoc = 0;$/;"	v
assignLoc	$C2_LIBDIR/../parser/c2_parser_stmt.c2	/^        SrcLoc assignLoc = 0;$/;"	v
ast	$C2_LIBDIR/../analyser/incr_array_list.c2	/^import ast;$/;"	v
ast	$C2_LIBDIR/../analyser/label_vector.c2	/^import ast;$/;"	v
ast	$C2_LIBDIR/../analyser/module_sorter.c2	/^import ast;$/;"	v
ast	$C2_LIBDIR/../analyser/scope.c2	/^import ast;$/;"	v
ast	$C2_LIBDIR/../analyser/struct_func_list.c2	/^import ast;$/;"	v
ast	$C2_LIBDIR/../ast/alias_type.c2	/^module ast;$/;"	v
ast	$C2_LIBDIR/../ast/alias_type_decl.c2	/^module ast;$/;"	v
ast	$C2_LIBDIR/../ast/array_designated_init_expr.c2	/^module ast;$/;"	v
ast	$C2_LIBDIR/../ast/array_subscript_expr.c2	/^module ast;$/;"	v
ast	$C2_LIBDIR/../ast/array_type.c2	/^module ast;$/;"	v
ast	$C2_LIBDIR/../ast/array_value.c2	/^module ast;$/;"	v
ast	$C2_LIBDIR/../ast/array_value_list.c2	/^module ast;$/;"	v
ast	$C2_LIBDIR/../ast/asm_stmt.c2	/^module ast;$/;"	v
ast	$C2_LIBDIR/../ast/assert_stmt.c2	/^module ast;$/;"	v
ast	$C2_LIBDIR/../ast/ast.c2	/^module ast;$/;"	v
ast	$C2_LIBDIR/../ast/ast_evaluator.c2	/^module ast;$/;"	v
ast	$C2_LIBDIR/../ast/binary_operator.c2	/^module ast;$/;"	v
ast	$C2_LIBDIR/../ast/bitoffset_expr.c2	/^module ast;$/;"	v
ast	$C2_LIBDIR/../ast/boolean_literal.c2	/^module ast;$/;"	v
ast	$C2_LIBDIR/../ast/break_stmt.c2	/^module ast;$/;"	v
ast	$C2_LIBDIR/../ast/builtin_expr.c2	/^module ast;$/;"	v
ast	$C2_LIBDIR/../ast/builtin_type.c2	/^module ast;$/;"	v
ast	$C2_LIBDIR/../ast/call_expr.c2	/^module ast;$/;"	v
ast	$C2_LIBDIR/../ast/char_literal.c2	/^module ast;$/;"	v
ast	$C2_LIBDIR/../ast/compound_stmt.c2	/^module ast;$/;"	v
ast	$C2_LIBDIR/../ast/conditional_operator.c2	/^module ast;$/;"	v
ast	$C2_LIBDIR/../ast/continue_stmt.c2	/^module ast;$/;"	v
ast	$C2_LIBDIR/../ast/decl.c2	/^module ast;$/;"	v
ast	$C2_LIBDIR/../ast/decl_list.c2	/^module ast;$/;"	v
ast	$C2_LIBDIR/../ast/decl_stmt.c2	/^module ast;$/;"	v
ast	$C2_LIBDIR/../ast/enum_constant_decl.c2	/^module ast;$/;"	v
ast	$C2_LIBDIR/../ast/enum_type.c2	/^module ast;$/;"	v
ast	$C2_LIBDIR/../ast/enum_type_decl.c2	/^module ast;$/;"	v
ast	$C2_LIBDIR/../ast/explicit_cast_expr.c2	/^module ast;$/;"	v
ast	$C2_LIBDIR/../ast/expr.c2	/^module ast;$/;"	v
ast	$C2_LIBDIR/../ast/expr_list.c2	/^module ast;$/;"	v
ast	$C2_LIBDIR/../ast/fallthrough_stmt.c2	/^module ast;$/;"	v
ast	$C2_LIBDIR/../ast/field_designated_init_expr.c2	/^module ast;$/;"	v
ast	$C2_LIBDIR/../ast/float_literal.c2	/^module ast;$/;"	v
ast	$C2_LIBDIR/../ast/for_stmt.c2	/^module ast;$/;"	v
ast	$C2_LIBDIR/../ast/function_decl.c2	/^module ast;$/;"	v
ast	$C2_LIBDIR/../ast/function_decl_list.c2	/^module ast;$/;"	v
ast	$C2_LIBDIR/../ast/function_type.c2	/^module ast;$/;"	v
ast	$C2_LIBDIR/../ast/function_type_decl.c2	/^module ast;$/;"	v
ast	$C2_LIBDIR/../ast/goto_stmt.c2	/^module ast;$/;"	v
ast	$C2_LIBDIR/../ast/identifier_expr.c2	/^module ast;$/;"	v
ast	$C2_LIBDIR/../ast/if_stmt.c2	/^module ast;$/;"	v
ast	$C2_LIBDIR/../ast/implicit_cast_expr.c2	/^module ast;$/;"	v
ast	$C2_LIBDIR/../ast/import_decl.c2	/^module ast;$/;"	v
ast	$C2_LIBDIR/../ast/import_decl_list.c2	/^module ast;$/;"	v
ast	$C2_LIBDIR/../ast/init_list_expr.c2	/^module ast;$/;"	v
ast	$C2_LIBDIR/../ast/instance_table.c2	/^module ast;$/;"	v
ast	$C2_LIBDIR/../ast/instantiator.c2	/^module ast;$/;"	v
ast	$C2_LIBDIR/../ast/integer_literal.c2	/^module ast;$/;"	v
ast	$C2_LIBDIR/../ast/label_stmt.c2	/^module ast;$/;"	v
ast	$C2_LIBDIR/../ast/member_expr.c2	/^module ast;$/;"	v
ast	$C2_LIBDIR/../ast/module.c2	/^module ast;$/;"	v
ast	$C2_LIBDIR/../ast/module_type.c2	/^module ast;$/;"	v
ast	$C2_LIBDIR/../ast/nil_expr.c2	/^module ast;$/;"	v
ast	$C2_LIBDIR/../ast/paren_expr.c2	/^module ast;$/;"	v
ast	$C2_LIBDIR/../ast/pointer_pool.c2	/^module ast;$/;"	v
ast	$C2_LIBDIR/../ast/pointer_type.c2	/^module ast;$/;"	v
ast	$C2_LIBDIR/../ast/qualtype.c2	/^module ast;$/;"	v
ast	$C2_LIBDIR/../ast/range_expr.c2	/^module ast;$/;"	v
ast	$C2_LIBDIR/../ast/return_stmt.c2	/^module ast;$/;"	v
ast	$C2_LIBDIR/../ast/static_assert.c2	/^module ast;$/;"	v
ast	$C2_LIBDIR/../ast/static_assert_list.c2	/^module ast;$/;"	v
ast	$C2_LIBDIR/../ast/statistics.c2	/^module ast;$/;"	v
ast	$C2_LIBDIR/../ast/stmt.c2	/^module ast;$/;"	v
ast	$C2_LIBDIR/../ast/string_literal.c2	/^module ast;$/;"	v
ast	$C2_LIBDIR/../ast/string_type_pool.c2	/^module ast;$/;"	v
ast	$C2_LIBDIR/../ast/struct_type.c2	/^module ast;$/;"	v
ast	$C2_LIBDIR/../ast/struct_type_decl.c2	/^module ast;$/;"	v
ast	$C2_LIBDIR/../ast/switch_case.c2	/^module ast;$/;"	v
ast	$C2_LIBDIR/../ast/switch_stmt.c2	/^module ast;$/;"	v
ast	$C2_LIBDIR/../ast/symbol_table.c2	/^module ast;$/;"	v
ast	$C2_LIBDIR/../ast/type.c2	/^module ast;$/;"	v
ast	$C2_LIBDIR/../ast/type_expr.c2	/^module ast;$/;"	v
ast	$C2_LIBDIR/../ast/type_ref.c2	/^module ast;$/;"	v
ast	$C2_LIBDIR/../ast/unary_operator.c2	/^module ast;$/;"	v
ast	$C2_LIBDIR/../ast/utils.c2	/^module ast;$/;"	v
ast	$C2_LIBDIR/../ast/value.c2	/^module ast;$/;"	v
ast	$C2_LIBDIR/../ast/var_decl.c2	/^module ast;$/;"	v
ast	$C2_LIBDIR/../ast/while_stmt.c2	/^module ast;$/;"	v
ast	$C2_LIBDIR/../common/attr_handler.c2	/^import ast;$/;"	v
ast	$C2_LIBDIR/../common/component.c2	/^import ast;$/;"	v
ast	$C2_LIBDIR/../common/manifest_writer.c2	/^import ast;$/;"	v
ast	$C2_LIBDIR/../common/module_list.c2	/^import ast;$/;"	v
ast	$C2_LIBDIR/../compiler/compiler.c2	/^import ast;$/;"	v
ast	$C2_LIBDIR/../compiler/compiler_libs.c2	/^import ast;$/;"	v
ast	$C2_LIBDIR/../generator/c/c_generator_special.c2	/^import ast;$/;"	v
ast	$C2_LIBDIR/../generator/ir/array_init_sorter.c2	/^import ast;$/;"	v
ast	$C2_LIBDIR/../generator/ir/basic_struct_layouter.c2	/^import ast;$/;"	v
ast	$C2_LIBDIR/../generator/ir/field_struct_layouter.c2	/^import ast;$/;"	v
ast	$C2_LIBDIR/../generator/ir/ir_generator_locals.c2	/^import ast;$/;"	v
ast	$C2_LIBDIR/../parser/ast_builder.c2	/^    AST* ast;$/;"	v
ast	$C2_LIBDIR/../plugins/deps_generator_plugin.c2	/^import ast;$/;"	v
ast	$C2_LIBDIR/../plugins/git_version_plugin.c2	/^import ast;$/;"	v
ast	$C2_LIBDIR/../plugins/plugin_info.c2	/^import ast;$/;"	v
ast	$C2_LIBDIR/../plugins/refs_generator_plugin.c2	/^import ast;$/;"	v
ast	$C2_LIBDIR/../plugins/shell_cmd_plugin.c2	/^import ast;$/;"	v
ast_builder	$C2_LIBDIR/../analyser/conversion_checker.c2	/^import ast_builder;$/;"	v
ast_builder	$C2_LIBDIR/../analyser/module_analyser.c2	/^import ast_builder;$/;"	v
ast_builder	$C2_LIBDIR/../analyser/module_analyser_expr.c2	/^import ast_builder;$/;"	v
ast_builder	$C2_LIBDIR/../compiler/compiler.c2	/^import ast_builder;$/;"	v
ast_builder	$C2_LIBDIR/../parser/ast_builder.c2	/^module ast_builder;$/;"	v
ast_builder	$C2_LIBDIR/../plugins/plugin_info.c2	/^import ast_builder;$/;"	v
ast_capacity	$C2_LIBDIR/../ast/utils.c2	/^    u32 ast_capacity;$/;"	v
ast_context	$C2_LIBDIR/../analyser/module_analyser.c2	/^import ast_context;$/;"	v
ast_context	$C2_LIBDIR/../ast/alias_type.c2	/^import ast_context;$/;"	v
ast_context	$C2_LIBDIR/../ast/alias_type_decl.c2	/^import ast_context;$/;"	v
ast_context	$C2_LIBDIR/../ast/array_designated_init_expr.c2	/^import ast_context;$/;"	v
ast_context	$C2_LIBDIR/../ast/array_subscript_expr.c2	/^import ast_context;$/;"	v
ast_context	$C2_LIBDIR/../ast/array_type.c2	/^import ast_context;$/;"	v
ast_context	$C2_LIBDIR/../ast/array_value.c2	/^import ast_context;$/;"	v
ast_context	$C2_LIBDIR/../ast/asm_stmt.c2	/^import ast_context;$/;"	v
ast_context	$C2_LIBDIR/../ast/assert_stmt.c2	/^import ast_context;$/;"	v
ast_context	$C2_LIBDIR/../ast/binary_operator.c2	/^import ast_context;$/;"	v
ast_context	$C2_LIBDIR/../ast/bitoffset_expr.c2	/^import ast_context;$/;"	v
ast_context	$C2_LIBDIR/../ast/boolean_literal.c2	/^import ast_context;$/;"	v
ast_context	$C2_LIBDIR/../ast/break_stmt.c2	/^import ast_context;$/;"	v
ast_context	$C2_LIBDIR/../ast/builtin_expr.c2	/^import ast_context;$/;"	v
ast_context	$C2_LIBDIR/../ast/builtin_type.c2	/^import ast_context;$/;"	v
ast_context	$C2_LIBDIR/../ast/call_expr.c2	/^import ast_context;$/;"	v
ast_context	$C2_LIBDIR/../ast/char_literal.c2	/^import ast_context;$/;"	v
ast_context	$C2_LIBDIR/../ast/compound_stmt.c2	/^import ast_context;$/;"	v
ast_context	$C2_LIBDIR/../ast/conditional_operator.c2	/^import ast_context;$/;"	v
ast_context	$C2_LIBDIR/../ast/continue_stmt.c2	/^import ast_context;$/;"	v
ast_context	$C2_LIBDIR/../ast/decl_stmt.c2	/^import ast_context;$/;"	v
ast_context	$C2_LIBDIR/../ast/enum_constant_decl.c2	/^import ast_context;$/;"	v
ast_context	$C2_LIBDIR/../ast/enum_type.c2	/^import ast_context;$/;"	v
ast_context	$C2_LIBDIR/../ast/enum_type_decl.c2	/^import ast_context;$/;"	v
ast_context	$C2_LIBDIR/../ast/explicit_cast_expr.c2	/^import ast_context;$/;"	v
ast_context	$C2_LIBDIR/../ast/fallthrough_stmt.c2	/^import ast_context;$/;"	v
ast_context	$C2_LIBDIR/../ast/field_designated_init_expr.c2	/^import ast_context;$/;"	v
ast_context	$C2_LIBDIR/../ast/float_literal.c2	/^import ast_context;$/;"	v
ast_context	$C2_LIBDIR/../ast/for_stmt.c2	/^import ast_context;$/;"	v
ast_context	$C2_LIBDIR/../ast/function_decl.c2	/^import ast_context;$/;"	v
ast_context	$C2_LIBDIR/../ast/function_type.c2	/^import ast_context;$/;"	v
ast_context	$C2_LIBDIR/../ast/function_type_decl.c2	/^import ast_context;$/;"	v
ast_context	$C2_LIBDIR/../ast/goto_stmt.c2	/^import ast_context;$/;"	v
ast_context	$C2_LIBDIR/../ast/identifier_expr.c2	/^import ast_context;$/;"	v
ast_context	$C2_LIBDIR/../ast/if_stmt.c2	/^import ast_context;$/;"	v
ast_context	$C2_LIBDIR/../ast/implicit_cast_expr.c2	/^import ast_context;$/;"	v
ast_context	$C2_LIBDIR/../ast/import_decl.c2	/^import ast_context;$/;"	v
ast_context	$C2_LIBDIR/../ast/init_list_expr.c2	/^import ast_context;$/;"	v
ast_context	$C2_LIBDIR/../ast/instantiator.c2	/^import ast_context;$/;"	v
ast_context	$C2_LIBDIR/../ast/integer_literal.c2	/^import ast_context;$/;"	v
ast_context	$C2_LIBDIR/../ast/label_stmt.c2	/^import ast_context;$/;"	v
ast_context	$C2_LIBDIR/../ast/member_expr.c2	/^import ast_context;$/;"	v
ast_context	$C2_LIBDIR/../ast/module.c2	/^import ast_context;$/;"	v
ast_context	$C2_LIBDIR/../ast/module_type.c2	/^import ast_context;$/;"	v
ast_context	$C2_LIBDIR/../ast/nil_expr.c2	/^import ast_context;$/;"	v
ast_context	$C2_LIBDIR/../ast/paren_expr.c2	/^import ast_context;$/;"	v
ast_context	$C2_LIBDIR/../ast/pointer_pool.c2	/^import ast_context;$/;"	v
ast_context	$C2_LIBDIR/../ast/pointer_type.c2	/^import ast_context;$/;"	v
ast_context	$C2_LIBDIR/../ast/range_expr.c2	/^import ast_context;$/;"	v
ast_context	$C2_LIBDIR/../ast/return_stmt.c2	/^import ast_context;$/;"	v
ast_context	$C2_LIBDIR/../ast/static_assert.c2	/^import ast_context;$/;"	v
ast_context	$C2_LIBDIR/../ast/string_literal.c2	/^import ast_context;$/;"	v
ast_context	$C2_LIBDIR/../ast/string_type_pool.c2	/^import ast_context;$/;"	v
ast_context	$C2_LIBDIR/../ast/struct_type.c2	/^import ast_context;$/;"	v
ast_context	$C2_LIBDIR/../ast/struct_type_decl.c2	/^import ast_context;$/;"	v
ast_context	$C2_LIBDIR/../ast/switch_case.c2	/^import ast_context;$/;"	v
ast_context	$C2_LIBDIR/../ast/switch_stmt.c2	/^import ast_context;$/;"	v
ast_context	$C2_LIBDIR/../ast/type_expr.c2	/^import ast_context;$/;"	v
ast_context	$C2_LIBDIR/../ast/unary_operator.c2	/^import ast_context;$/;"	v
ast_context	$C2_LIBDIR/../ast/var_decl.c2	/^import ast_context;$/;"	v
ast_context	$C2_LIBDIR/../ast/while_stmt.c2	/^import ast_context;$/;"	v
ast_context	$C2_LIBDIR/../ast_utils/context.c2	/^module ast_context;$/;"	v
ast_context	$C2_LIBDIR/../common/component.c2	/^import ast_context;$/;"	v
ast_context	$C2_LIBDIR/../compiler/compiler.c2	/^import ast_context;$/;"	v
ast_context	$C2_LIBDIR/../plugins/plugin_info.c2	/^import ast_context;$/;"	v
ast_count	$C2_LIBDIR/../ast/utils.c2	/^    u32 ast_count;      \/\/ Note: first index used to indicate nil$/;"	v
ast_idx	$C2_LIBDIR/../ast/alias_type_decl.c2	/^                                                u32 ast_idx,$/;"	v
ast_idx	$C2_LIBDIR/../ast/call_expr.c2	/^                                              u32 ast_idx,$/;"	v
ast_idx	$C2_LIBDIR/../ast/decl.c2	/^    u16 ast_idx;    \/\/ into globals.ast_list, 0 means nil$/;"	v
ast_idx	$C2_LIBDIR/../ast/enum_constant_decl.c2	/^                                                      u32 ast_idx,$/;"	v
ast_idx	$C2_LIBDIR/../ast/enum_type_decl.c2	/^                                              u32 ast_idx,$/;"	v
ast_idx	$C2_LIBDIR/../ast/function_decl.c2	/^                                              u32 ast_idx,$/;"	v
ast_idx	$C2_LIBDIR/../ast/import_decl.c2	/^                                          u32 ast_idx,$/;"	v
ast_idx	$C2_LIBDIR/../ast/static_assert.c2	/^    u32 ast_idx;    \/\/ into globals.ast_list, 0 means nil$/;"	v
ast_idx	$C2_LIBDIR/../ast/struct_type_decl.c2	/^                                                  u32 ast_idx,$/;"	v
ast_idx	$C2_LIBDIR/../ast/var_decl.c2	/^                                    u32 ast_idx,$/;"	v
ast_idx	$C2_LIBDIR/../parser/ast_builder.c2	/^    u32 ast_idx;$/;"	v
ast_list	$C2_LIBDIR/../ast/utils.c2	/^    AST** ast_list;$/;"	v
ast_visitor	$C2_LIBDIR/../generator/ast_visitor.c2	/^module ast_visitor;$/;"	v
ast_visitor	$C2_LIBDIR/../generator/ast_visitor_expr.c2	/^module ast_visitor;$/;"	v
ast_visitor	$C2_LIBDIR/../generator/generator_utils.c2	/^import ast_visitor;$/;"	v
ast_visitor	$C2_LIBDIR/../plugins/deps_generator.c2	/^import ast_visitor;$/;"	v
ast_visitor	$C2_LIBDIR/../plugins/refs_generator.c2	/^import ast_visitor;$/;"	v
at	$C2_LIBDIR/../analyser/module_analyser.c2	/^        const ArrayType* at = canon.getArrayType();$/;"	v
at	$C2_LIBDIR/../analyser/module_analyser_builtin.c2	/^    const ArrayType* at = qt.getArrayTypeOrNil();$/;"	v
at	$C2_LIBDIR/../analyser/module_analyser_expr.c2	/^        ArrayType* at = q2.getArrayTypeOrNil();$/;"	v
at	$C2_LIBDIR/../analyser/module_analyser_init.c2	/^    ArrayType* at = expectedType.getArrayType();$/;"	v
at	$C2_LIBDIR/../analyser/module_analyser_stmt.c2	/^        const ArrayType* at = res.getArrayTypeOrNil();$/;"	v
at	$C2_LIBDIR/../analyser/module_analyser_struct.c2	/^        ArrayType* at = res.getArrayType();$/;"	v
at	$C2_LIBDIR/../analyser/module_analyser_type.c2	/^    Type* at = qt.getTypeOrNil();$/;"	v
at	$C2_LIBDIR/../analyser_utils/printf_utils.c2	/^        ArrayType* at = qt.getArrayType();$/;"	v
at	$C2_LIBDIR/../ast/alias_type_decl.c2	/^    AliasType* at = AliasType.create(c, d);$/;"	v
at	$C2_LIBDIR/../ast/array_type.c2	/^    ArrayType* at = t.elem.getArrayTypeOrNil();$/;"	v
at	$C2_LIBDIR/../ast/qualtype.c2	/^    ArrayType* at = qt.getArrayType();$/;"	v
at	$C2_LIBDIR/../ast/type.c2	/^        const ArrayType* at =  (ArrayType*)t;$/;"	v
at	$C2_LIBDIR/../ast/utils.c2	/^        ArrayType* at = (ArrayType*)t;$/;"	v
at	$C2_LIBDIR/../generator/c/c_generator.c2	/^    ArrayType* at = cast<ArrayType*>(qt.getType());$/;"	v
at	$C2_LIBDIR/../generator/c/dep_finder.c2	/^        AliasTypeDecl* at = cast<AliasTypeDecl*>(d);$/;"	v
at	$C2_LIBDIR/../generator/c2i/c2i_generator_decl.c2	/^    ArrayType* at = cast<ArrayType*>(qt.getType());$/;"	v
at	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^    ArrayType* at = qt.getArrayType();$/;"	v
at2	$C2_LIBDIR/../analyser/module_analyser_init.c2	/^                ArrayType* at2 = st.getArrayType();$/;"	v
at_bol	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^    bool at_bol = false;$/;"	v
atd	$C2_LIBDIR/../generator/ast_visitor.c2	/^        AliasTypeDecl* atd = cast<AliasTypeDecl*>(d);$/;"	v
attr	$C2_LIBDIR/../analyser/module_analyser.c2	/^import attr;$/;"	v
attr	$C2_LIBDIR/../ast/ast.c2	/^import attr;$/;"	v
attr	$C2_LIBDIR/../ast/decl.c2	/^import attr;$/;"	v
attr	$C2_LIBDIR/../ast/utils.c2	/^import attr;$/;"	v
attr	$C2_LIBDIR/../ast_utils/attr.c2	/^module attr;$/;"	v
attr	$C2_LIBDIR/../ast_utils/attr_table.c2	/^import attr;$/;"	v
attr	$C2_LIBDIR/../common/attr_handler.c2	/^import attr;$/;"	v
attr	$C2_LIBDIR/../parser/c2_parser.c2	/^import attr;$/;"	v
attr	$C2_LIBDIR/../plugins/unit_test_plugin.c2	/^import attr;$/;"	v
attrKind_names	$C2_LIBDIR/../ast_utils/attr.c2	/^const char*[] attrKind_names = {$/;"	v
attr_alignment	$C2_LIBDIR/../ast/struct_type_decl.c2	/^    u32 attr_alignment; \/\/ can be removed? (should be same as alignment)$/;"	v
attr_handler	$C2_LIBDIR/../common/attr_handler.c2	/^module attr_handler;$/;"	v
attr_handler	$C2_LIBDIR/../compiler/compiler.c2	/^import attr_handler;$/;"	v
attr_handler	$C2_LIBDIR/../parser/ast_builder.c2	/^import attr_handler;$/;"	v
attr_id	$C2_LIBDIR/../parser/c2_parser.c2	/^        u32 attr_id = p.tok.name_idx;$/;"	v
attr_name	$C2_LIBDIR/../plugins/unit_test_plugin.c2	/^    u32 attr_name;$/;"	v
attr_printf_arg	$C2_LIBDIR/../ast/function_decl.c2	/^    u8 attr_printf_arg;        \/\/ 0 means not present$/;"	v
attr_table	$C2_LIBDIR/../ast/ast.c2	/^import attr_table;$/;"	v
attr_table	$C2_LIBDIR/../ast_utils/attr_table.c2	/^module attr_table;$/;"	v
attrs	$C2_LIBDIR/../ast_utils/attr_table.c2	/^    Attr* attrs;$/;"	v
attrs	$C2_LIBDIR/../parser/ast_builder.c2	/^    Attr[8] attrs;$/;"	v
attrs2	$C2_LIBDIR/../ast_utils/attr_table.c2	/^    Attr* attrs2 = stdlib.malloc(capacity * sizeof(Attr));$/;"	v
auto_arg_count	$C2_LIBDIR/../analyser/module_analyser_function.c2	/^    u32 auto_arg_count = 0;$/;"	v
avail	$C2_LIBDIR/../ast_utils/context.c2	/^    u32 avail = 0;$/;"	v
avail	$C2_LIBDIR/../ir/case_list.c2	/^    u32 avail = l.capacity - l.count;$/;"	v
available_dynamic	$C2_LIBDIR/../common/component.c2	/^    bool available_dynamic; \/\/ only for external$/;"	v
available_static	$C2_LIBDIR/../common/component.c2	/^    bool available_static;  \/\/ only for external$/;"	v
avd	$C2_LIBDIR/../parser/ast_builder.c2	/^    ArrayValue* avd = ArrayValue.create(b.context, name, loc, initValue);$/;"	v
avg	$C2_LIBDIR/../ast_utils/context.c2	/^    u32 avg = 0;$/;"	v
b2	$C2_LIBDIR/../ir/register_alloc.c2	/^            Block* b2 = &blocks[i];$/;"	v
b_id	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^    return b_id;$/;"	v
b_idx	$C2_LIBDIR/../ir/print.c2	/^        Index b_idx = b.getInstructions();$/;"	v
backend	$C2_LIBDIR/../common/build_target.c2	/^    BackEndKind backend;$/;"	v
backend_fast	$C2_LIBDIR/../common/build_target.c2	/^    bool backend_fast;$/;"	v
backend_kind	$C2_LIBDIR/../compiler/c2recipe_parser.c2	/^    const char* backend_kind = p.pool.idx2str(p.token.value);$/;"	v
backend_no_build	$C2_LIBDIR/../common/build_target.c2	/^    bool backend_no_build;$/;"	v
base	$C2_LIBDIR/../analyser/module_analyser_expr.c2	/^        Expr* base = sub.getBase();$/;"	v
base	$C2_LIBDIR/../analyser/module_analyser_type.c2	/^    QualType base;$/;"	v
base	$C2_LIBDIR/../ast/alias_type.c2	/^    Type base;$/;"	v
base	$C2_LIBDIR/../ast/alias_type_decl.c2	/^    Decl base;$/;"	v
base	$C2_LIBDIR/../ast/array_designated_init_expr.c2	/^    Expr base;$/;"	v
base	$C2_LIBDIR/../ast/array_subscript_expr.c2	/^    Expr base;$/;"	v
base	$C2_LIBDIR/../ast/array_type.c2	/^    Type base;$/;"	v
base	$C2_LIBDIR/../ast/asm_stmt.c2	/^    Stmt base;$/;"	v
base	$C2_LIBDIR/../ast/assert_stmt.c2	/^    Stmt base;$/;"	v
base	$C2_LIBDIR/../ast/binary_operator.c2	/^    Expr base;$/;"	v
base	$C2_LIBDIR/../ast/bitoffset_expr.c2	/^    Expr base;$/;"	v
base	$C2_LIBDIR/../ast/boolean_literal.c2	/^    Expr base;$/;"	v
base	$C2_LIBDIR/../ast/break_stmt.c2	/^    Stmt base;$/;"	v
base	$C2_LIBDIR/../ast/builtin_expr.c2	/^    Expr base;$/;"	v
base	$C2_LIBDIR/../ast/builtin_type.c2	/^    Type base;$/;"	v
base	$C2_LIBDIR/../ast/call_expr.c2	/^    Expr base;$/;"	v
base	$C2_LIBDIR/../ast/char_literal.c2	/^    Expr base;$/;"	v
base	$C2_LIBDIR/../ast/compound_stmt.c2	/^    Stmt base;$/;"	v
base	$C2_LIBDIR/../ast/conditional_operator.c2	/^    Expr base;$/;"	v
base	$C2_LIBDIR/../ast/continue_stmt.c2	/^    Stmt base;$/;"	v
base	$C2_LIBDIR/../ast/decl_stmt.c2	/^    Stmt base;$/;"	v
base	$C2_LIBDIR/../ast/enum_constant_decl.c2	/^    Decl base;$/;"	v
base	$C2_LIBDIR/../ast/enum_type.c2	/^    Type base;$/;"	v
base	$C2_LIBDIR/../ast/enum_type_decl.c2	/^    Decl base;$/;"	v
base	$C2_LIBDIR/../ast/explicit_cast_expr.c2	/^    Expr base;$/;"	v
base	$C2_LIBDIR/../ast/expr.c2	/^    Stmt base;$/;"	v
base	$C2_LIBDIR/../ast/fallthrough_stmt.c2	/^    Stmt base;$/;"	v
base	$C2_LIBDIR/../ast/field_designated_init_expr.c2	/^    Expr base;$/;"	v
base	$C2_LIBDIR/../ast/float_literal.c2	/^    Expr base;$/;"	v
base	$C2_LIBDIR/../ast/for_stmt.c2	/^    Stmt base;$/;"	v
base	$C2_LIBDIR/../ast/function_decl.c2	/^    Decl base;$/;"	v
base	$C2_LIBDIR/../ast/function_type.c2	/^    Type base;$/;"	v
base	$C2_LIBDIR/../ast/function_type_decl.c2	/^    Decl base;$/;"	v
base	$C2_LIBDIR/../ast/goto_stmt.c2	/^    Stmt base;$/;"	v
base	$C2_LIBDIR/../ast/identifier_expr.c2	/^    Expr base;$/;"	v
base	$C2_LIBDIR/../ast/if_stmt.c2	/^    Stmt base;$/;"	v
base	$C2_LIBDIR/../ast/implicit_cast_expr.c2	/^    Expr base;$/;"	v
base	$C2_LIBDIR/../ast/import_decl.c2	/^    Decl base;$/;"	v
base	$C2_LIBDIR/../ast/init_list_expr.c2	/^    Expr base;$/;"	v
base	$C2_LIBDIR/../ast/integer_literal.c2	/^    Expr base;$/;"	v
base	$C2_LIBDIR/../ast/label_stmt.c2	/^    Stmt base;$/;"	v
base	$C2_LIBDIR/../ast/member_expr.c2	/^    Expr* base = e.getExprBase();$/;"	v
base	$C2_LIBDIR/../ast/module_type.c2	/^    Type base;$/;"	v
base	$C2_LIBDIR/../ast/nil_expr.c2	/^    Expr base;$/;"	v
base	$C2_LIBDIR/../ast/paren_expr.c2	/^    Expr base;$/;"	v
base	$C2_LIBDIR/../ast/pointer_type.c2	/^    Type base;$/;"	v
base	$C2_LIBDIR/../ast/range_expr.c2	/^    Expr base;$/;"	v
base	$C2_LIBDIR/../ast/return_stmt.c2	/^    Stmt base;$/;"	v
base	$C2_LIBDIR/../ast/string_literal.c2	/^    Expr base;$/;"	v
base	$C2_LIBDIR/../ast/struct_type.c2	/^    Type base;$/;"	v
base	$C2_LIBDIR/../ast/struct_type_decl.c2	/^    Decl base;$/;"	v
base	$C2_LIBDIR/../ast/switch_stmt.c2	/^    Stmt base;$/;"	v
base	$C2_LIBDIR/../ast/type_expr.c2	/^    Expr base;$/;"	v
base	$C2_LIBDIR/../ast/unary_operator.c2	/^    Expr base;$/;"	v
base	$C2_LIBDIR/../ast/var_decl.c2	/^    Decl base;$/;"	v
base	$C2_LIBDIR/../ast/while_stmt.c2	/^    Stmt base;$/;"	v
base	$C2_LIBDIR/../common/file/file_utils.c2	/^    return base;$/;"	v
base	$C2_LIBDIR/../generator/c/c_generator_expr.c2	/^        Expr* base = m.getExprBase();$/;"	v
base	$C2_LIBDIR/../generator/c2i/c2i_generator_expr.c2	/^    const Expr* base = m.getExprBase();$/;"	v
base	$C2_LIBDIR/../generator/ir/ir_generator_expr.c2	/^    Expr* base = a.getBase();$/;"	v
base	$C2_LIBDIR/../generator/ir/ir_generator_member.c2	/^        const Expr* base = m.getExprBase();$/;"	v
baseLoc	$C2_LIBDIR/../analyser/module_analyser_member.c2	/^    SrcLoc baseLoc = 0;$/;"	v
baseType	$C2_LIBDIR/../analyser/module_analyser_call.c2	/^    QualType baseType;$/;"	v
baseType	$C2_LIBDIR/../analyser/module_analyser_member.c2	/^    return baseType;$/;"	v
baseType	$C2_LIBDIR/../generator/c/c_generator_expr.c2	/^    QualType baseType = { }$/;"	v
base_bi	$C2_LIBDIR/../analyser/module_analyser_expr.c2	/^    BuiltinType* base_bi = baseType.getBuiltin();$/;"	v
base_offset	$C2_LIBDIR/../analyser/module_analyser_builtin.c2	/^    u32 base_offset = 0;$/;"	v
base_ref	$C2_LIBDIR/../generator/ir/ir_generator_member.c2	/^        base_ref = c.addLoadInstr(gen.ptr_type, base_ref);$/;"	v
base_size	$C2_LIBDIR/../generator/ir/ir_generator_expr.c2	/^    u32 base_size = qt.getSize(true);$/;"	v
base_type	$C2_LIBDIR/../generator/ir/ir_generator_member.c2	/^    QualType base_type;$/;"	v
based	$C2_LIBDIR/../plugins/deps_generator.c2	/^        -> DEPS are only string based, so easy (dont actually need to lookup)$/;"	v
basename	$C2_LIBDIR/../compiler/main.c2	/^        const char* basename = file_utils.get_basename(c.opts.files.get(0));$/;"	v
basic_mode	$C2_LIBDIR/../plugins/deps_generator.c2	/^    bool basic_mode;$/;"	v
begin	$C2_LIBDIR/../common/quicksort.c2	/^    u8* begin = items;$/;"	v
bi	$C2_LIBDIR/../analyser/conversion_checker.c2	/^    const BuiltinType* bi = (BuiltinType*)rcanon;$/;"	v
bi	$C2_LIBDIR/../analyser/conversion_checker_expr.c2	/^        const BuiltinType* bi = qt.getBuiltin();$/;"	v
bi	$C2_LIBDIR/../analyser/module_analyser_binop.c2	/^    BuiltinType* bi = optype.getBuiltin();$/;"	v
bi	$C2_LIBDIR/../analyser/module_analyser_call.c2	/^        BuiltinType* bi = qt.getBuiltinTypeOrNil();$/;"	v
bi	$C2_LIBDIR/../analyser/module_analyser_expr.c2	/^    BuiltinType* bi = canon.getBuiltin();$/;"	v
bi	$C2_LIBDIR/../analyser/module_analyser_unaryop.c2	/^    BuiltinType* bi = qt.getBuiltin();$/;"	v
bi	$C2_LIBDIR/../analyser/size_analyser.c2	/^        const BuiltinType* bi = (BuiltinType*)t;$/;"	v
bi	$C2_LIBDIR/../analyser_utils/ctv_analyser.c2	/^    BuiltinType* bi = canon.getBuiltin();$/;"	v
bi	$C2_LIBDIR/../ast/ast_evaluator.c2	/^        const BuiltinExpr* bi = cast<BuiltinExpr*>(e);$/;"	v
bi	$C2_LIBDIR/../ast/builtin_expr.c2	/^    BuiltinExpr* bi = nil;$/;"	v
bi	$C2_LIBDIR/../ast/qualtype.c2	/^    const BuiltinType* bi = (BuiltinType*)t;$/;"	v
bi	$C2_LIBDIR/../ast/type.c2	/^        const BuiltinType* bi =  (BuiltinType*)t;$/;"	v
bi	$C2_LIBDIR/../ast/value.c2	/^    BuiltinType* bi = qt.getBuiltin();$/;"	v
bi	$C2_LIBDIR/../generator/ast_visitor_expr.c2	/^        BitOffsetExpr* bi = cast<BitOffsetExpr*>(e);$/;"	v
bi	$C2_LIBDIR/../generator/c/c_generator_pure_call.c2	/^        const BuiltinExpr* bi = cast<BuiltinExpr*>(e);$/;"	v
bi	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^        BuiltinType* bi = canon.getBuiltin();$/;"	v
bi	$C2_LIBDIR/../generator/ir/ir_generator_expr.c2	/^    const BuiltinExpr* bi = cast<BuiltinExpr*>(e);$/;"	v
bi	$C2_LIBDIR/../ir/slot_collector.c2	/^    const BlockIndex* bi = &c.indexes[blk_id];$/;"	v
bi1	$C2_LIBDIR/../analyser/conversion_checker.c2	/^    BuiltinType* bi1 = t1.getBuiltin();$/;"	v
bi2	$C2_LIBDIR/../analyser/conversion_checker.c2	/^    BuiltinType* bi2 = t2.getBuiltin();$/;"	v
binaryOpcode_names	$C2_LIBDIR/../ast/binary_operator.c2	/^const char*[] binaryOpcode_names = {$/;"	v
binaryOperatorBits	$C2_LIBDIR/../ast/stmt.c2	/^        BinaryOperatorBits binaryOperatorBits;$/;"	v
binop	$C2_LIBDIR/../ast/expr.c2	/^        const BinaryOperator* binop = (BinaryOperator*)e;$/;"	v
bitOffsetBits	$C2_LIBDIR/../ast/stmt.c2	/^        BitOffsetExprBits bitOffsetBits;$/;"	v
bit_array	$C2_LIBDIR/../common/bit_array.c2	/^module bit_array;$/;"	v
bit_array	$C2_LIBDIR/../ir/context.c2	/^import bit_array;$/;"	v
bit_layout	$C2_LIBDIR/../analyser/module_analyser_init.c2	/^            BitFieldLayout* bit_layout = nil;$/;"	v
bit_layout	$C2_LIBDIR/../analyser/size_analyser.c2	/^        BitFieldLayout* bit_layout = nil;$/;"	v
bit_offset	$C2_LIBDIR/../ast/var_decl.c2	/^    u8 bit_offset;$/;"	v
bit_offset	$C2_LIBDIR/../generator/ir/ir_generator_binop.c2	/^    u32 bit_offset = 0; \/\/ TODO get bitfield-offset$/;"	v
bit_pos	$C2_LIBDIR/../analyser/size_analyser.c2	/^    u32 bit_pos = 0;   \/\/ bit offset of the next bitfield member$/;"	v
bit_size	$C2_LIBDIR/../analyser/size_analyser.c2	/^            u32 bit_size = bit_layout.bit_width;$/;"	v
bit_utils	$C2_LIBDIR/../common/bit_utils.c2	/^module bit_utils;$/;"	v
bit_utils	$C2_LIBDIR/../generator/ir/ir_generator_binop.c2	/^import bit_utils;$/;"	v
bit_utils	$C2_LIBDIR/../generator/ir/ir_generator_member.c2	/^import bit_utils;$/;"	v
bit_width	$C2_LIBDIR/../ast/var_decl.c2	/^    u8 bit_width;$/;"	v
bitfield	$C2_LIBDIR/../analyser/module_analyser_struct.c2	/^            Expr* bitfield = vd.getBitfield();$/;"	v
bitfield	$C2_LIBDIR/../generator/ast_visitor.c2	/^    Expr* bitfield = d.getBitfield();$/;"	v
bitfield	$C2_LIBDIR/../generator/c/c_generator.c2	/^        Expr* bitfield = vd.getBitfield();$/;"	v
bitfield	$C2_LIBDIR/../generator/c2i/c2i_generator_decl.c2	/^    Expr* bitfield = vd.getBitfield();$/;"	v
bitfield	$C2_LIBDIR/../generator/ir/ir_generator_binop.c2	/^    const Expr* bitfield = vd.getBitfield();$/;"	v
bitfield	$C2_LIBDIR/../parser/c2_parser_type.c2	/^            Expr* bitfield = nil;$/;"	v
bitfield_base_size	$C2_LIBDIR/../generator/ir/basic_struct_layouter.c2	/^    u32 bitfield_base_size;$/;"	v
bitfield_base_size	$C2_LIBDIR/../generator/ir/field_struct_layouter.c2	/^    u8 bitfield_base_size = 0;   \/\/ in bytes of whole field$/;"	v
bitfield_offset	$C2_LIBDIR/../ast/struct_type_decl.c2	/^    u8 bitfield_offset;$/;"	v
bitfield_ref	$C2_LIBDIR/../generator/ir/field_struct_layouter.c2	/^                    bitfield_ref = ctx.addBinaryInstr(InstrKind.Or, bitfield_ref, value_ref);$/;"	v
bitfield_value	$C2_LIBDIR/../generator/ir/basic_struct_layouter.c2	/^    u64 bitfield_value;$/;"	v
bitfield_value	$C2_LIBDIR/../generator/ir/field_struct_layouter.c2	/^    u64 bitfield_value = 0; \/\/ will be downsized to correct size later$/;"	v
bitfield_width	$C2_LIBDIR/../ast/struct_type_decl.c2	/^    u8 bitfield_width;$/;"	v
bits	$C2_LIBDIR/../ast/decl.c2	/^        u32 bits;$/;"	v
bits	$C2_LIBDIR/../ast/member_expr.c2	/^    const MemberExprBits* bits = &m.base.base.memberExprBits;$/;"	v
bits	$C2_LIBDIR/../ast/stmt.c2	/^        u32 bits;$/;"	v
bits	$C2_LIBDIR/../ast/switch_case.c2	/^        SwitchCaseBits bits;$/;"	v
bits	$C2_LIBDIR/../ast/type.c2	/^        u32 bits;$/;"	v
bits	$C2_LIBDIR/../ir/instr.c2	/^        u32 bits;$/;"	v
bl	$C2_LIBDIR/../analyser/module_analyser_binop.c2	/^    BuiltinType* bl = lcanon.getBuiltinTypeOrNil();$/;"	v
blk	$C2_LIBDIR/../ast_utils/context.c2	/^    Block* blk = c.blk_head;$/;"	v
blk	$C2_LIBDIR/../ir/context.c2	/^    blk = c.b.tmp_info.blocks.get(b2);$/;"	v
blk_count	$C2_LIBDIR/../ir/context.c2	/^    u32 blk_count = 0;$/;"	v
blk_head	$C2_LIBDIR/../ast_utils/context.c2	/^    Block* blk_head;$/;"	v
blk_id	$C2_LIBDIR/../ir/context.c2	/^        BlockId blk_id = order[i];$/;"	v
blk_id	$C2_LIBDIR/../ir/inserter.c2	/^    u32 blk_id; \/\/ new block$/;"	v
blk_id	$C2_LIBDIR/../ir/print.c2	/^            u32 blk_id = pc.src;$/;"	v
blk_id	$C2_LIBDIR/../ir/register_alloc.c2	/^    u32 blk_id = num_blocks-1;$/;"	v
blk_id	$C2_LIBDIR/../ir/rpo.c2	/^        u16 blk_id = rpo.blocks[idx];$/;"	v
blk_id	$C2_LIBDIR/../ir/slot_writes_map.c2	/^    u16 blk_id = a.first_var;$/;"	v
blk_id	$C2_LIBDIR/../ir/ssa.c2	/^        BlockId blk_id = clauses[i].src;$/;"	v
blk_instr_count	$C2_LIBDIR/../ir/print.c2	/^    u32 blk_instr_count;$/;"	v
blk_instr_start	$C2_LIBDIR/../ir/print.c2	/^    u32 blk_instr_start;$/;"	v
blk_size	$C2_LIBDIR/../ast_utils/context.c2	/^    u32 blk_size;$/;"	v
blk_start_instr	$C2_LIBDIR/../ir/context.c2	/^    u32 blk_start_instr;    \/\/ used to note starting instruction$/;"	v
blk_tail	$C2_LIBDIR/../ast_utils/context.c2	/^    Block* blk_tail;$/;"	v
blks	$C2_LIBDIR/../ir/print.c2	/^    const Block* blks = ph.blocks.get(0);$/;"	v
block	$C2_LIBDIR/../ir/case_list.c2	/^    BlockId block;$/;"	v
block1	$C2_LIBDIR/../generator/ir/ir_generator_binop.c2	/^    BlockId block1 = c.getCurBlock();$/;"	v
block_capacity	$C2_LIBDIR/../ir/rev_list.c2	/^    u32 block_capacity;$/;"	v
block_count	$C2_LIBDIR/../ir/rev_list.c2	/^    u32 block_count;$/;"	v
block_terminated	$C2_LIBDIR/../ir/context.c2	/^    bool block_terminated;$/;"	v
blocks	$C2_LIBDIR/../ast_utils/context.c2	/^    u32 blocks = 0;$/;"	v
blocks	$C2_LIBDIR/../ir/block_list.c2	/^    Block* blocks;  \/\/ global list, index = nr$/;"	v
blocks	$C2_LIBDIR/../ir/context.c2	/^    Block* blocks = fi.blocks.get(0);$/;"	v
blocks	$C2_LIBDIR/../ir/function_info.c2	/^    BlockList blocks;$/;"	v
blocks	$C2_LIBDIR/../ir/print.c2	/^    const BlockList* blocks;$/;"	v
blocks	$C2_LIBDIR/../ir/register_alloc.c2	/^    Block* blocks = fi.blocks.get(0);$/;"	v
blocks	$C2_LIBDIR/../ir/rpo.c2	/^    u16* blocks;$/;"	v
blocks	$C2_LIBDIR/../ir/slot_writes_map.c2	/^    BlockWrites* blocks;$/;"	v
blocks	$C2_LIBDIR/../ir/ssa.c2	/^    Block* blocks = fi.blocks.get(0);$/;"	v
blocks	$C2_LIBDIR/../ir/switch.c2	/^    Block* blocks = fi.blocks.get(0);$/;"	v
blocks1	$C2_LIBDIR/../ir/context.c2	/^    Block* blocks1 = fi.blocks.get(0);$/;"	v
blocks2	$C2_LIBDIR/../ir/block_list.c2	/^    Block* blocks2 = stdlib.calloc(l.capacity, sizeof(Block));$/;"	v
blocks2	$C2_LIBDIR/../ir/context.c2	/^    BlockId* blocks2 = stdlib.malloc(num_blocks * sizeof(BlockId));$/;"	v
bo	$C2_LIBDIR/../analyser/module_analyser_expr.c2	/^    BitOffsetExpr* bo = (BitOffsetExpr*)e;$/;"	v
bo	$C2_LIBDIR/../analyser_utils/ctv_analyser.c2	/^        BitOffsetExpr* bo = (BitOffsetExpr*)index;$/;"	v
bo	$C2_LIBDIR/../ast/ast_evaluator.c2	/^        BitOffsetExpr* bo = cast<BitOffsetExpr*>(index);$/;"	v
bo	$C2_LIBDIR/../generator/c/c_generator_expr.c2	/^    BitOffsetExpr* bo = cast<BitOffsetExpr*>(index);$/;"	v
bo	$C2_LIBDIR/../generator/c/c_generator_pure_call.c2	/^        BitOffsetExpr* bo = cast<BitOffsetExpr*>(index);$/;"	v
bo	$C2_LIBDIR/../generator/c2i/c2i_generator_expr.c2	/^        const BitOffsetExpr* bo = cast<BitOffsetExpr*>(e);$/;"	v
body	$C2_LIBDIR/../analyser/module_analyser_function.c2	/^    CompoundStmt* body = fd.getBody();$/;"	v
body	$C2_LIBDIR/../ast/ast_evaluator.c2	/^    CompoundStmt* body = fd.getBody();$/;"	v
body	$C2_LIBDIR/../ast/for_stmt.c2	/^    Stmt* body;$/;"	v
body	$C2_LIBDIR/../ast/function_decl.c2	/^        CompoundStmt* body;$/;"	v
body	$C2_LIBDIR/../ast/while_stmt.c2	/^    Stmt* body;$/;"	v
body	$C2_LIBDIR/../generator/ast_visitor.c2	/^    CompoundStmt* body = d.getBody();$/;"	v
body	$C2_LIBDIR/../generator/c/c_generator_pure_call.c2	/^    CompoundStmt* body = fd.getBody();$/;"	v
body	$C2_LIBDIR/../generator/c/c_generator_stmt.c2	/^        Stmt* body = w.getBody();$/;"	v
body	$C2_LIBDIR/../generator/c2i/c2i_generator_stmt.c2	/^        Stmt* body = w.getBody();$/;"	v
body	$C2_LIBDIR/../parser/c2_parser.c2	/^    CompoundStmt* body = p.parseCompoundStmt();$/;"	v
body	$C2_LIBDIR/../parser/c2_parser_stmt.c2	/^    Stmt* body = p.parseStmt();$/;"	v
body2	$C2_LIBDIR/../ast/for_stmt.c2	/^    Stmt* body2 = s.body ? s.body.instantiate(inst) : nil;$/;"	v
body2	$C2_LIBDIR/../ast/while_stmt.c2	/^    Stmt* body2 = s.body.instantiate(inst);$/;"	v
body_blk	$C2_LIBDIR/../generator/ir/ir_generator_stmt.c2	/^    char[32] body_blk;$/;"	v
body_stmt	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^        Stmt* body_stmt = for_stmt.getBody();$/;"	v
bol	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^    const char* bol = p;$/;"	v
booleanLiteralBits	$C2_LIBDIR/../ast/stmt.c2	/^        BooleanLiteralBits booleanLiteralBits;$/;"	v
bounds	$C2_LIBDIR/../common/quicksort.c2	/^     * To see that these inner while loops do not run out bounds, notice that:$/;"	v
br	$C2_LIBDIR/../analyser/module_analyser_binop.c2	/^    BuiltinType* br = rcanon.getBuiltinTypeOrNil();$/;"	v
brace	$C2_LIBDIR/../generator/c/c_generator_stmt.c2	/^    const char* brace = c.hasDecls() ? " {" : "";$/;"	v
break	$C2_LIBDIR/../analyser/conversion_checker.c2	/^        break;$/;"	v
break	$C2_LIBDIR/../analyser/conversion_checker_expr.c2	/^        break;$/;"	v
break	$C2_LIBDIR/../analyser/module_analyser.c2	/^        break;$/;"	v
break	$C2_LIBDIR/../analyser/module_analyser_binop.c2	/^        break;$/;"	v
break	$C2_LIBDIR/../analyser/module_analyser_call.c2	/^        break;$/;"	v
break	$C2_LIBDIR/../analyser/module_analyser_expr.c2	/^        break;$/;"	v
break	$C2_LIBDIR/../analyser/module_analyser_member.c2	/^        break;$/;"	v
break	$C2_LIBDIR/../analyser/module_analyser_stmt.c2	/^        break;$/;"	v
break	$C2_LIBDIR/../analyser/module_analyser_switch.c2	/^        break;$/;"	v
break	$C2_LIBDIR/../analyser/module_analyser_type.c2	/^        break;$/;"	v
break	$C2_LIBDIR/../analyser/module_analyser_unaryop.c2	/^        break;$/;"	v
break	$C2_LIBDIR/../analyser/scope.c2	/^            break;$/;"	v
break	$C2_LIBDIR/../analyser/size_analyser.c2	/^        break;$/;"	v
break	$C2_LIBDIR/../analyser/unused_checker.c2	/^        break;$/;"	v
break	$C2_LIBDIR/../analyser_utils/ctv_analyser.c2	/^        break;$/;"	v
break	$C2_LIBDIR/../analyser_utils/printf_utils.c2	/^        break;$/;"	v
break	$C2_LIBDIR/../ast/ast_evaluator.c2	/^        break;$/;"	v
break	$C2_LIBDIR/../ast/builtin_expr.c2	/^        break;$/;"	v
break	$C2_LIBDIR/../ast/decl.c2	/^        break;$/;"	v
break	$C2_LIBDIR/../ast/expr.c2	/^        break;$/;"	v
break	$C2_LIBDIR/../ast/float_literal.c2	/^        break;$/;"	v
break	$C2_LIBDIR/../ast/implicit_cast_expr.c2	/^        break;$/;"	v
break	$C2_LIBDIR/../ast/integer_literal.c2	/^        break;$/;"	v
break	$C2_LIBDIR/../ast/member_expr.c2	/^        break;$/;"	v
break	$C2_LIBDIR/../ast/stmt.c2	/^        break;$/;"	v
break	$C2_LIBDIR/../ast/type.c2	/^        break;$/;"	v
break	$C2_LIBDIR/../ast/type_ref.c2	/^        break;$/;"	v
break	$C2_LIBDIR/../ast/utils.c2	/^        break;$/;"	v
break	$C2_LIBDIR/../ast/value.c2	/^        break;$/;"	v
break	$C2_LIBDIR/../ast_utils/attr.c2	/^        break;$/;"	v
break	$C2_LIBDIR/../ast_utils/string_buffer.c2	/^            break;$/;"	v
break	$C2_LIBDIR/../ast_utils/string_pool.c2	/^                    break;$/;"	v
break	$C2_LIBDIR/../common/build_target.c2	/^        break;$/;"	v
break	$C2_LIBDIR/../common/dsm_sorter.c2	/^                break;$/;"	v
break	$C2_LIBDIR/../common/file/file_utils.c2	/^        break;$/;"	v
break	$C2_LIBDIR/../common/manifest_writer.c2	/^        break;$/;"	v
break	$C2_LIBDIR/../common/process_utils.c2	/^            break;$/;"	v
break	$C2_LIBDIR/../common/target_info.c2	/^        break;$/;"	v
break	$C2_LIBDIR/../common/yaml/yaml_dump.c2	/^        break;$/;"	v
break	$C2_LIBDIR/../common/yaml/yaml_parser.c2	/^        break;$/;"	v
break	$C2_LIBDIR/../common/yaml/yaml_tokenizer.c2	/^        break;$/;"	v
break	$C2_LIBDIR/../compiler/c2recipe_parser.c2	/^        break;$/;"	v
break	$C2_LIBDIR/../compiler/c2recipe_yaml.c2	/^            break;$/;"	v
break	$C2_LIBDIR/../compiler/compiler.c2	/^        break;$/;"	v
break	$C2_LIBDIR/../compiler/main.c2	/^        break;$/;"	v
break	$C2_LIBDIR/../compiler/manifest.c2	/^            break;$/;"	v
break	$C2_LIBDIR/../generator/ast_visitor.c2	/^        break;$/;"	v
break	$C2_LIBDIR/../generator/ast_visitor_expr.c2	/^        break;$/;"	v
break	$C2_LIBDIR/../generator/c/c_generator.c2	/^        break;$/;"	v
break	$C2_LIBDIR/../generator/c/c_generator_call.c2	/^                    break;$/;"	v
break	$C2_LIBDIR/../generator/c/c_generator_expr.c2	/^        break;$/;"	v
break	$C2_LIBDIR/../generator/c/c_generator_pure_call.c2	/^        break;$/;"	v
break	$C2_LIBDIR/../generator/c/c_generator_special.c2	/^        break;$/;"	v
break	$C2_LIBDIR/../generator/c/c_generator_stmt.c2	/^        break;$/;"	v
break	$C2_LIBDIR/../generator/c/dep_finder.c2	/^        break;$/;"	v
break	$C2_LIBDIR/../generator/c2_trace.c2	/^            break;$/;"	v
break	$C2_LIBDIR/../generator/c2i/c2i_generator_decl.c2	/^        break;$/;"	v
break	$C2_LIBDIR/../generator/c2i/c2i_generator_expr.c2	/^        break;$/;"	v
break	$C2_LIBDIR/../generator/c2i/c2i_generator_stmt.c2	/^        break;$/;"	v
break	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^        break;$/;"	v
break	$C2_LIBDIR/../generator/ir/ir_generator_binop.c2	/^        break;$/;"	v
break	$C2_LIBDIR/../generator/ir/ir_generator_expr.c2	/^        break;$/;"	v
break	$C2_LIBDIR/../generator/ir/ir_generator_stmt.c2	/^        break;$/;"	v
break	$C2_LIBDIR/../generator/radix_tree/radix_tree.c2	/^            break;$/;"	v
break	$C2_LIBDIR/../ir/context.c2	/^        break;$/;"	v
break	$C2_LIBDIR/../ir/instr_list.c2	/^        else break;$/;"	v
break	$C2_LIBDIR/../ir/print.c2	/^        break;$/;"	v
break	$C2_LIBDIR/../ir/register_alloc.c2	/^                break;$/;"	v
break	$C2_LIBDIR/../ir/slot_collector.c2	/^            break;$/;"	v
break	$C2_LIBDIR/../ir/ssa.c2	/^            break;$/;"	v
break	$C2_LIBDIR/../parser/ast_builder.c2	/^        break;$/;"	v
break	$C2_LIBDIR/../parser/c2_parser.c2	/^        break;$/;"	v
break	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^        break;$/;"	v
break	$C2_LIBDIR/../parser/c2_parser_stmt.c2	/^        break;$/;"	v
break	$C2_LIBDIR/../parser/c2_parser_switch.c2	/^            break;$/;"	v
break	$C2_LIBDIR/../parser/c2_parser_type.c2	/^        break;$/;"	v
break	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^        break;$/;"	v
break	$C2_LIBDIR/../plugins/deps_generator.c2	/^        break;$/;"	v
break	$C2_LIBDIR/../plugins/deps_generator_utils.c2	/^        break;$/;"	v
break	$C2_LIBDIR/../plugins/refs_generator.c2	/^        break;$/;"	v
break_block	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^    u32 break_block;    \/\/ 0 means invalid (assert)$/;"	v
bt	$C2_LIBDIR/../generator/c/c_generator.c2	/^        BuiltinType* bt = cast<BuiltinType*>(qt.getType());$/;"	v
bt	$C2_LIBDIR/../generator/c/c_generator_expr.c2	/^        BuiltinType* bt = qt.getBuiltinTypeOrNil();$/;"	v
bt	$C2_LIBDIR/../generator/c2i/c2i_generator_decl.c2	/^        BuiltinType* bt = cast<BuiltinType*>(qt.getType());$/;"	v
bucket	$C2_LIBDIR/../generator/c/c_generator_trace.c2	/^    u32 bucket = hash % HASH_BUCKETS;$/;"	v
buf	$C2_LIBDIR/../ast/float_literal.c2	/^        char[32] buf;$/;"	v
buf	$C2_LIBDIR/../ast/module.c2	/^    void* buf = stdlib.malloc(m.max_files * sizeof(ast.AST*));$/;"	v
buf	$C2_LIBDIR/../ast/utils.c2	/^        void* buf = stdlib.malloc(globals.ast_capacity * sizeof(ast.AST*));$/;"	v
buf	$C2_LIBDIR/../ast/value.c2	/^    char[32] buf;$/;"	v
buf	$C2_LIBDIR/../ast_utils/string_buffer.c2	/^    return buf;$/;"	v
buf	$C2_LIBDIR/../common/console.c2	/^    char[BUF_SIZE] buf;$/;"	v
buf	$C2_LIBDIR/../common/module_list.c2	/^    void* buf = stdlib.malloc(l.max_mods * sizeof(ast.Module*));$/;"	v
buf	$C2_LIBDIR/../common/string_utils.c2	/^    return buf;$/;"	v
buf	$C2_LIBDIR/../common/utils.c2	/^    Stat buf;$/;"	v
buf	$C2_LIBDIR/../generator/radix_tree/radix_tree.c2	/^    char[128] buf;  \/\/ to print words$/;"	v
buf	$C2_LIBDIR/../ir/ref.c2	/^    local char[4][24] buf;$/;"	v
buf	$C2_LIBDIR/../parser/c2_parser.c2	/^            char[32] buf;$/;"	v
buf	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^    char[4096] buf;$/;"	v
build_file	$C2_LIBDIR/../common/build_file.c2	/^module build_file;$/;"	v
build_file	$C2_LIBDIR/../compiler/compiler.c2	/^import build_file;$/;"	v
build_file	$C2_LIBDIR/../compiler/main.c2	/^import build_file;$/;"	v
build_file	$C2_LIBDIR/../generator/c/c_generator.c2	/^import build_file;$/;"	v
build_file	$C2_LIBDIR/../generator/c/c_generator_special.c2	/^import build_file;$/;"	v
build_target	$C2_LIBDIR/../common/build_target.c2	/^module build_target;$/;"	v
build_target	$C2_LIBDIR/../compiler/c2recipe.c2	/^import build_target;$/;"	v
build_target	$C2_LIBDIR/../compiler/c2recipe_parser.c2	/^import build_target;$/;"	v
build_target	$C2_LIBDIR/../compiler/compiler.c2	/^import build_target;$/;"	v
build_target	$C2_LIBDIR/../compiler/main.c2	/^import build_target;$/;"	v
build_target	$C2_LIBDIR/../generator/c/c_generator.c2	/^import build_target;$/;"	v
build_target	$C2_LIBDIR/../generator/c/c_generator_special.c2	/^import build_target;$/;"	v
build_target	$C2_LIBDIR/../plugins/plugin_info.c2	/^import build_target;$/;"	v
builder	$C2_LIBDIR/../parser/c2_parser.c2	/^    Builder* builder;$/;"	v
buildfile_name	$C2_LIBDIR/../ast_utils/constants.c2	/^public const char* buildfile_name = "build.yaml";$/;"	v
builtin2irtype	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^fn ir.Type builtin2irtype(BuiltinKind k) {$/;"	f
builtinExprBits	$C2_LIBDIR/../ast/stmt.c2	/^        BuiltinExprBits builtinExprBits;$/;"	v
builtinTypeBits	$C2_LIBDIR/../ast/type.c2	/^        BuiltinTypeBits builtinTypeBits;$/;"	v
builtinType_cnames	$C2_LIBDIR/../generator/c/c_generator.c2	/^const char*[] builtinType_cnames = {$/;"	v
builtinType_names	$C2_LIBDIR/../ast/builtin_type.c2	/^const char*[] builtinType_names = {$/;"	v
builtin_defs	$C2_LIBDIR/../generator/c/c_generator.c2	/^        const char[] builtin_defs =$/;"	v
builtin_names	$C2_LIBDIR/../ast/builtin_expr.c2	/^const char*[] builtin_names = {$/;"	v
builtins	$C2_LIBDIR/../ast/utils.c2	/^public QualType* builtins;$/;"	v
c1	$C2_LIBDIR/../generator/c2_trace.c2	/^        char c1, c2;$/;"	v
c2	$C2_LIBDIR/../generator/c2_trace.c2	/^            c2 = *pattern++;$/;"	v
c2	$C2_LIBDIR/../ir/usage_counter.c2	/^import c2;$/;"	v
c2_idx	$C2_LIBDIR/../compiler/compiler.c2	/^    u32 c2_idx = c.astPool.addStr("c2", true);$/;"	v
c2_name	$C2_LIBDIR/../parser/ast_builder.c2	/^    u32 c2_name;$/;"	v
c2_p1	$C2_LIBDIR/../analyser/module_analyser_binop.c2	/^    Prec c2_p1 = Prec_table[op1];$/;"	v
c2_p2	$C2_LIBDIR/../analyser/module_analyser_binop.c2	/^    Prec c2_p2 = Prec_table[op2];$/;"	v
c2_parser	$C2_LIBDIR/../compiler/compiler.c2	/^import c2_parser;$/;"	v
c2_parser	$C2_LIBDIR/../parser/c2_parser.c2	/^module c2_parser;$/;"	v
c2_parser	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^module c2_parser;$/;"	v
c2_parser	$C2_LIBDIR/../parser/c2_parser_stmt.c2	/^module c2_parser;$/;"	v
c2_parser	$C2_LIBDIR/../parser/c2_parser_switch.c2	/^module c2_parser;$/;"	v
c2_parser	$C2_LIBDIR/../parser/c2_parser_type.c2	/^module c2_parser;$/;"	v
c2_prec	$C2_LIBDIR/../common/c2_prec.c2	/^module c2_prec;$/;"	v
c2_tokenizer	$C2_LIBDIR/../parser/c2_parser.c2	/^import c2_tokenizer;$/;"	v
c2_tokenizer	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^module c2_tokenizer;$/;"	v
c2_trace	$C2_LIBDIR/../generator/c2_trace.c2	/^module c2_trace;$/;"	v
c2c_main	$C2_LIBDIR/../compiler/main.c2	/^module c2c_main;$/;"	v
c2i_generator	$C2_LIBDIR/../compiler/compiler.c2	/^import c2i_generator;$/;"	v
c2i_generator	$C2_LIBDIR/../generator/c2i/c2i_generator.c2	/^module c2i_generator;$/;"	v
c2i_generator	$C2_LIBDIR/../generator/c2i/c2i_generator_decl.c2	/^module c2i_generator;$/;"	v
c2i_generator	$C2_LIBDIR/../generator/c2i/c2i_generator_expr.c2	/^module c2i_generator;$/;"	v
c2i_generator	$C2_LIBDIR/../generator/c2i/c2i_generator_stmt.c2	/^module c2i_generator;$/;"	v
c2recipe	$C2_LIBDIR/../compiler/c2recipe.c2	/^module c2recipe;$/;"	v
c2recipe	$C2_LIBDIR/../compiler/c2recipe_parser.c2	/^module c2recipe;$/;"	v
c2recipe	$C2_LIBDIR/../compiler/c2recipe_yaml.c2	/^module c2recipe;$/;"	v
c2recipe	$C2_LIBDIR/../compiler/main.c2	/^import c2recipe;$/;"	v
c2refs	$C2_LIBDIR/../generator/c2refs.c2	/^module c2refs;$/;"	v
c2test	$C2_LIBDIR/../plugins/unit_test1.c2	/^module c2test;$/;"	v
c_generator	$C2_LIBDIR/../compiler/compiler.c2	/^import c_generator;$/;"	v
c_generator	$C2_LIBDIR/../generator/c/c_generator.c2	/^module c_generator;$/;"	v
c_generator	$C2_LIBDIR/../generator/c/c_generator_call.c2	/^module c_generator;$/;"	v
c_generator	$C2_LIBDIR/../generator/c/c_generator_expr.c2	/^module c_generator;$/;"	v
c_generator	$C2_LIBDIR/../generator/c/c_generator_pure_call.c2	/^module c_generator;$/;"	v
c_generator	$C2_LIBDIR/../generator/c/c_generator_special.c2	/^module c_generator;$/;"	v
c_generator	$C2_LIBDIR/../generator/c/c_generator_stmt.c2	/^module c_generator;$/;"	v
c_generator	$C2_LIBDIR/../generator/c/c_generator_trace.c2	/^module c_generator;$/;"	v
c_p1	$C2_LIBDIR/../analyser/module_analyser_binop.c2	/^    C_Prec c_p1 = C_Prec_table[op1];$/;"	v
c_p2	$C2_LIBDIR/../analyser/module_analyser_binop.c2	/^    C_Prec c_p2 = C_Prec_table[op2];$/;"	v
c_prec	$C2_LIBDIR/../common/c_prec.c2	/^module c_prec;$/;"	v
cache_capacity	$C2_LIBDIR/../analyser/scope.c2	/^    u32 cache_capacity;$/;"	v
cache_count	$C2_LIBDIR/../analyser/scope.c2	/^    u32 cache_count;$/;"	v
cache_symbols	$C2_LIBDIR/../analyser/scope.c2	/^    u32* cache_symbols;$/;"	v
call	$C2_LIBDIR/../analyser/module_analyser_call.c2	/^    CallExpr* call = (CallExpr*)e;$/;"	v
call	$C2_LIBDIR/../generator/c/c_generator_call.c2	/^    CallExpr* call = cast<CallExpr*>(e);$/;"	v
call	$C2_LIBDIR/../generator/c/c_generator_trace.c2	/^    TraceCall call = {$/;"	v
call	$C2_LIBDIR/../generator/ir/ir_generator_call.c2	/^    CallExpr* call = cast<CallExpr*>(e);$/;"	v
callExprBits	$C2_LIBDIR/../ast/stmt.c2	/^        CallExprBits callExprBits;$/;"	v
callKind_names	$C2_LIBDIR/../ast/function_decl.c2	/^const char*[] callKind_names = {$/;"	v
callType	$C2_LIBDIR/../analyser/module_analyser_call.c2	/^            QualType callType = ma.analyseExpr(&call_args[call_arg_index], true, RHS);$/;"	v
call_arg	$C2_LIBDIR/../analyser/module_analyser_call.c2	/^            Expr* call_arg = call_args[call_arg_index];$/;"	v
call_arg_index	$C2_LIBDIR/../analyser/module_analyser_call.c2	/^    u32 call_arg_index = 0;$/;"	v
call_args	$C2_LIBDIR/../analyser/module_analyser_call.c2	/^    Expr** call_args = call.getArgs();$/;"	v
call_index	$C2_LIBDIR/../generator/c/c_generator_call.c2	/^    u32 call_index = 0;$/;"	v
call_num_args	$C2_LIBDIR/../analyser/module_analyser_call.c2	/^    u32 call_num_args = call.getNumArgs();$/;"	v
call_num_args	$C2_LIBDIR/../generator/c/c_generator_call.c2	/^    u32 call_num_args = call.getNumArgs();$/;"	v
callee_idx	$C2_LIBDIR/../generator/c/c_generator_trace.c2	/^    u16 callee_idx;$/;"	v
caller_idx	$C2_LIBDIR/../generator/c/c_generator_trace.c2	/^    u16 caller_idx;$/;"	v
callkind	$C2_LIBDIR/../analyser/module_analyser_member.c2	/^        CallKind callkind = fd.getCallKind();$/;"	v
calls	$C2_LIBDIR/../generator/c/c_generator.c2	/^    TraceCallList calls;$/;"	v
canon	$C2_LIBDIR/../analyser/module_analyser.c2	/^    QualType canon = res.getCanonicalType();$/;"	v
canon	$C2_LIBDIR/../analyser/module_analyser_binop.c2	/^    QualType canon = qt.getCanonicalType();$/;"	v
canon	$C2_LIBDIR/../analyser/module_analyser_expr.c2	/^    QualType canon = qt.getCanonicalType();$/;"	v
canon	$C2_LIBDIR/../analyser/module_analyser_function.c2	/^    QualType canon = qt.getCanonicalType();$/;"	v
canon	$C2_LIBDIR/../analyser/module_analyser_member.c2	/^            QualType canon = baseType.getCanonicalType();$/;"	v
canon	$C2_LIBDIR/../analyser/module_analyser_type.c2	/^    QualType canon = res.getCanonicalType();$/;"	v
canon	$C2_LIBDIR/../analyser/module_analyser_unaryop.c2	/^    QualType canon = t.getCanonicalType();$/;"	v
canon	$C2_LIBDIR/../analyser_utils/ctv_analyser.c2	/^    QualType canon = qt.getCanonicalType();$/;"	v
canon	$C2_LIBDIR/../ast/qualtype.c2	/^    return canon;$/;"	v
canon	$C2_LIBDIR/../ast/type.c2	/^    Type* canon = t.canonicalType.getTypeOrNil();$/;"	v
canon	$C2_LIBDIR/../generator/c/c_generator.c2	/^    QualType canon = qt.getCanonicalType();$/;"	v
canon	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^    QualType canon = qt.getCanonicalType();$/;"	v
canon	$C2_LIBDIR/../parser/ast_builder.c2	/^    QualType canon = inner.getCanonicalType();$/;"	v
canonicalType	$C2_LIBDIR/../ast/type.c2	/^    QualType canonicalType;$/;"	v
cap	$C2_LIBDIR/../generator/c2refs.c2	/^    u32 cap;            \/\/ max number of entries$/;"	v
cap	$C2_LIBDIR/../ir/interference_graph.c2	/^    u16 cap = Caps[arena_idx];$/;"	v
cap	$C2_LIBDIR/../ir/live_map.c2	/^    u16 cap = Caps[arena_idx];$/;"	v
cap	$C2_LIBDIR/../ir/register_alloc.c2	/^    u32 cap;$/;"	v
cap	$C2_LIBDIR/../ir/slot_writes_map.c2	/^    u16 cap = Caps[arena_idx];$/;"	v
cap	$C2_LIBDIR/../plugins/refs_generator.c2	/^    u32 cap;$/;"	v
cap2	$C2_LIBDIR/../ir/phi_list.c2	/^            u32 cap2 = c.capacity + c.capacity \/ 2 + 2;$/;"	v
capacity	$C2_LIBDIR/../analyser/incr_array_list.c2	/^    u32 capacity;$/;"	v
capacity	$C2_LIBDIR/../analyser/init_checker.c2	/^    u32 capacity;$/;"	v
capacity	$C2_LIBDIR/../analyser/label_vector.c2	/^    u32 capacity;$/;"	v
capacity	$C2_LIBDIR/../analyser/name_vector.c2	/^    u32 capacity;$/;"	v
capacity	$C2_LIBDIR/../analyser/struct_func_list.c2	/^    u32 capacity;$/;"	v
capacity	$C2_LIBDIR/../ast/array_value_list.c2	/^    u32 capacity;$/;"	v
capacity	$C2_LIBDIR/../ast/decl_list.c2	/^    u32 capacity;$/;"	v
capacity	$C2_LIBDIR/../ast/expr_list.c2	/^    u32 capacity;$/;"	v
capacity	$C2_LIBDIR/../ast/function_decl_list.c2	/^    u32 capacity;$/;"	v
capacity	$C2_LIBDIR/../ast/import_decl_list.c2	/^    u32 capacity;$/;"	v
capacity	$C2_LIBDIR/../ast/instance_table.c2	/^    u32 capacity;$/;"	v
capacity	$C2_LIBDIR/../ast/pointer_pool.c2	/^    u32 capacity;$/;"	v
capacity	$C2_LIBDIR/../ast/static_assert_list.c2	/^    u32 capacity;$/;"	v
capacity	$C2_LIBDIR/../ast/string_type_pool.c2	/^    u32 capacity;$/;"	v
capacity	$C2_LIBDIR/../ast/symbol_table.c2	/^    u32 capacity;$/;"	v
capacity	$C2_LIBDIR/../ast_utils/attr_table.c2	/^    u32 capacity;$/;"	v
capacity	$C2_LIBDIR/../ast_utils/string_buffer.c2	/^    u32 capacity;$/;"	v
capacity	$C2_LIBDIR/../common/attr_handler.c2	/^    u32 capacity;$/;"	v
capacity	$C2_LIBDIR/../common/build_target.c2	/^    u32 capacity;$/;"	v
capacity	$C2_LIBDIR/../common/component.c2	/^    u32 capacity;$/;"	v
capacity	$C2_LIBDIR/../common/index_list.c2	/^    u32 capacity;$/;"	v
capacity	$C2_LIBDIR/../common/library_list.c2	/^    u32 capacity;$/;"	v
capacity	$C2_LIBDIR/../common/string_list.c2	/^    u32 capacity;$/;"	v
capacity	$C2_LIBDIR/../common/value_maplist.c2	/^    u32 capacity;$/;"	v
capacity	$C2_LIBDIR/../generator/c/c_generator_trace.c2	/^    u32 capacity;$/;"	v
capacity	$C2_LIBDIR/../generator/c2refs.c2	/^    u32 capacity;$/;"	v
capacity	$C2_LIBDIR/../generator/ir/ir_generator_locals.c2	/^    u32 capacity;$/;"	v
capacity	$C2_LIBDIR/../generator/ir/ref_list.c2	/^    u32 capacity;$/;"	v
capacity	$C2_LIBDIR/../generator/radix_tree/radix_tree.c2	/^    u32 capacity;$/;"	v
capacity	$C2_LIBDIR/../ir/block_list.c2	/^    u32 capacity;$/;"	v
capacity	$C2_LIBDIR/../ir/case_list.c2	/^    u32 capacity;$/;"	v
capacity	$C2_LIBDIR/../ir/constant_list.c2	/^    u32 capacity;$/;"	v
capacity	$C2_LIBDIR/../ir/copy_list.c2	/^    u32 capacity;$/;"	v
capacity	$C2_LIBDIR/../ir/init_value_list.c2	/^    u32 capacity;$/;"	v
capacity	$C2_LIBDIR/../ir/inserter.c2	/^    u32 capacity;$/;"	v
capacity	$C2_LIBDIR/../ir/instr_list.c2	/^    u32 capacity;$/;"	v
capacity	$C2_LIBDIR/../ir/interference_graph.c2	/^    u16 capacity;$/;"	v
capacity	$C2_LIBDIR/../ir/live_map.c2	/^    u16 capacity;$/;"	v
capacity	$C2_LIBDIR/../ir/lookup_table.c2	/^    u32 capacity;$/;"	v
capacity	$C2_LIBDIR/../ir/phi_list.c2	/^    u32 capacity;$/;"	v
capacity	$C2_LIBDIR/../ir/rev_list.c2	/^    u32 capacity;$/;"	v
capacity	$C2_LIBDIR/../ir/slot_writes_map.c2	/^    u16 capacity;$/;"	v
capacity	$C2_LIBDIR/../ir/symbol_list.c2	/^    u32 capacity;$/;"	v
capacity	$C2_LIBDIR/../ir/usage_counter.c2	/^    u32 capacity;$/;"	v
capacity	$C2_LIBDIR/../ir/work_queue.c2	/^    u32 capacity;$/;"	v
capacity	$C2_LIBDIR/../parser/case_list.c2	/^    u32 capacity;$/;"	v
capacity	$C2_LIBDIR/../parser/expr_list.c2	/^    u32 capacity;$/;"	v
capacity	$C2_LIBDIR/../parser/stmt_list.c2	/^    u32 capacity;$/;"	v
capacity	$C2_LIBDIR/../plugins/deps_generator.c2	/^    u32 capacity;$/;"	v
capacity2	$C2_LIBDIR/../ast/decl_list.c2	/^            u32 capacity2 = l.capacity + l.capacity \/ 2 + 2;$/;"	v
capacity2	$C2_LIBDIR/../ast/expr_list.c2	/^            u32 capacity2 = l.capacity + l.capacity \/ 2 + 2;$/;"	v
caseId	$C2_LIBDIR/../generator/ir/ir_generator_switch.c2	/^    CaseId caseId = gen.ctx.addSwitchInstr(ref, join_blk, num_cases);$/;"	v
case_blk	$C2_LIBDIR/../generator/ir/ir_generator_switch.c2	/^    BlockId case_blk = c.createBlock(kind);$/;"	v
case_cond	$C2_LIBDIR/../generator/ir/ir_generator_switch.c2	/^    Expr* case_cond = sc.getCond(0);$/;"	v
case_id	$C2_LIBDIR/../ir/common.c2	/^        CaseId case_id = b.dests[0];$/;"	v
case_id	$C2_LIBDIR/../ir/context.c2	/^    return case_id;$/;"	v
case_id	$C2_LIBDIR/../ir/print.c2	/^        CaseId case_id = ph.cur_block.dests[0];$/;"	v
case_id	$C2_LIBDIR/../ir/switch.c2	/^    CaseId case_id = b.dests[0];$/;"	v
case_list	$C2_LIBDIR/../parser/c2_parser_switch.c2	/^import case_list;$/;"	v
case_list	$C2_LIBDIR/../parser/case_list.c2	/^module case_list;$/;"	v
cases	$C2_LIBDIR/../analyser/module_analyser_switch.c2	/^    SwitchCase** cases = sw.getCases();$/;"	v
cases	$C2_LIBDIR/../ast/switch_stmt.c2	/^    SwitchCase*[0] cases; \/\/ tail-allocated$/;"	v
cases	$C2_LIBDIR/../generator/ast_visitor.c2	/^        SwitchCase** cases = sw.getCases();$/;"	v
cases	$C2_LIBDIR/../generator/c/c_generator_stmt.c2	/^    SwitchCase** cases = sw.getCases();$/;"	v
cases	$C2_LIBDIR/../generator/c2i/c2i_generator_stmt.c2	/^    SwitchCase** cases = sw.getCases();$/;"	v
cases	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^        SwitchCase** cases = sw.getCases();$/;"	v
cases	$C2_LIBDIR/../generator/ir/ir_generator_switch.c2	/^    SwitchCase** cases = sw.getCases();$/;"	v
cases	$C2_LIBDIR/../ir/case_list.c2	/^    Case* cases;$/;"	v
cases	$C2_LIBDIR/../ir/function_info.c2	/^    CaseList cases;$/;"	v
cases	$C2_LIBDIR/../ir/print.c2	/^        const Case* cases = info.cases.get(0);$/;"	v
cases	$C2_LIBDIR/../parser/ast_builder.c2	/^                                        SwitchCase** cases, u32 num_cases,$/;"	v
cases2	$C2_LIBDIR/../ir/case_list.c2	/^    Case* cases2 = stdlib.calloc(l.capacity, sizeof(Case));$/;"	v
category	$C2_LIBDIR/../common/diagnostics.c2	/^    Category category = Category.Warning;$/;"	v
category_colors	$C2_LIBDIR/../common/diagnostics.c2	/^const char*[] category_colors = {$/;"	v
category_names	$C2_LIBDIR/../common/diagnostics.c2	/^const char*[] category_names = {$/;"	v
cc	$C2_LIBDIR/../ast/char_literal.c2	/^        char cc = c;$/;"	v
cc	$C2_LIBDIR/../ast_utils/string_pool.c2	/^    u32[256] cc = {}$/;"	v
cc	$C2_LIBDIR/../common/build_file.c2	/^    u32 cc;$/;"	v
cc	$C2_LIBDIR/../generator/c/c_generator_special.c2	/^    const char* cc = "gcc";$/;"	v
cc	$C2_LIBDIR/../ir/print.c2	/^            Case* cc = ph.cur_info.cases.get(case_id+j);$/;"	v
cc	$C2_LIBDIR/../ir/switch.c2	/^        Case* cc = fi.cases.get(case_id+j);$/;"	v
cc	$C2_LIBDIR/../parser/c2_parser.c2	/^            char cc = tok.char_value;$/;"	v
cc	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^    u32 cc;$/;"	v
cd	$C2_LIBDIR/../analyser/module_analyser_type.c2	/^        Decl* cd = (Decl*)c;$/;"	v
cdef	$C2_LIBDIR/../generator/c/c_generator.c2	/^    const char* cdef = d.getCDef();$/;"	v
cfg	$C2_LIBDIR/../plugins/unit_test2.c2	/^  Config cfg = {$/;"	v
cflags	$C2_LIBDIR/../common/build_file.c2	/^    u32 cflags;$/;"	v
cflags	$C2_LIBDIR/../generator/c/c_generator_special.c2	/^    const char* cflags = nil;$/;"	v
cgen_dir	$C2_LIBDIR/../generator/c/c_generator.c2	/^    const char* cgen_dir;       \/\/ output\/<target>\/cgen$/;"	v
ch	$C2_LIBDIR/../compiler/compiler.c2	/^        u8 ch = cast<u8>(tmp[i]);$/;"	v
change_format	$C2_LIBDIR/../analyser/module_analyser_call.c2	/^    bool change_format;$/;"	v
changed	$C2_LIBDIR/../ir/context.c2	/^    bool changed = t.convert_switches();$/;"	v
changed	$C2_LIBDIR/../ir/register_alloc.c2	/^    bool changed = true;$/;"	v
changed	$C2_LIBDIR/../ir/ssa.c2	/^    return changed;$/;"	v
charLiteralBits	$C2_LIBDIR/../ast/stmt.c2	/^        CharLiteralBits charLiteralBits;$/;"	v
char_value	$C2_LIBDIR/../parser/token.c2	/^        u8 char_value;     \/\/ CharLiteral$/;"	v
check	$C2_LIBDIR/../generator/ir/ir_generator_stmt.c2	/^    ExprRef check;$/;"	v
checkDest	$C2_LIBDIR/../ir/context.c2	/^fn BlockId checkDest(FunctionInfo* fi, BlockId id) {$/;"	f
checkFunc2Func	$C2_LIBDIR/../analyser/conversion_checker.c2	/^fn bool checkFunc2Func(const FunctionDecl* fdl, const FunctionDecl* fdr) {$/;"	f
checkIndex	$C2_LIBDIR/../analyser/module_analyser.c2	/^    u32 checkIndex;$/;"	v
checkStack	$C2_LIBDIR/../analyser/module_analyser.c2	/^    StackLayer[MaxDepth] checkStack;$/;"	v
check_exported_decls	$C2_LIBDIR/../generator/generator_utils.c2	/^fn void check_exported_decls(void* arg, Decl* d) {$/;"	f
check_idx	$C2_LIBDIR/../analyser/module_analyser.c2	/^    u32 check_idx;$/;"	v
check_module	$C2_LIBDIR/../generator/generator_utils.c2	/^fn void check_module(void* arg, ast.Module* m) {$/;"	f
check_only	$C2_LIBDIR/../compiler/compiler.c2	/^    bool check_only;$/;"	v
check_overflow	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^        goto check_overflow;$/;"	v
child	$C2_LIBDIR/../generator/radix_tree/radix_tree.c2	/^    Node* child = t.idx2node(idx);$/;"	v
child_error	$C2_LIBDIR/../common/process_utils.c2	/^fn void child_error(i32 fd, const char* format @(printf_format), ...) @(noreturn) {$/;"	f
child_idx	$C2_LIBDIR/../common/yaml/yaml_data.c2	/^        u32 child_idx;  \/\/ node index, for MAP + SEQUENC$/;"	v
child_idx	$C2_LIBDIR/../generator/radix_tree/radix_tree.c2	/^        u32 child_idx = n.children[i];$/;"	v
child_pid	$C2_LIBDIR/../common/process_utils.c2	/^    Pid child_pid = fork();$/;"	v
children	$C2_LIBDIR/../generator/radix_tree/radix_tree.c2	/^    u32[0] children;$/;"	v
children	$C2_LIBDIR/../generator/radix_tree/radix_tree_dump.c2	/^    u32[128] children;$/;"	v
chunk	$C2_LIBDIR/../common/source_mgr.c2	/^    u32 chunk = offset % CheckPointSize;$/;"	v
ck	$C2_LIBDIR/../analyser/module_analyser_member.c2	/^    CallKind ck = CallKind.Invalid;$/;"	v
ck	$C2_LIBDIR/../ast/function_decl.c2	/^    CallKind ck = d.getCallKind();$/;"	v
clause	$C2_LIBDIR/../ir/phi_list.c2	/^    PhiClause* clause;$/;"	v
clauses	$C2_LIBDIR/../ir/phi_list.c2	/^    const PhiClause* clauses = c.getClauses();$/;"	v
clauses	$C2_LIBDIR/../ir/print.c2	/^        const PhiClause* clauses = ph.cur_info.phis.get(i.args[0].value);$/;"	v
clauses	$C2_LIBDIR/../ir/register_alloc.c2	/^    PhiClause* clauses = fi.phis.get(0);$/;"	v
clauses	$C2_LIBDIR/../ir/ssa.c2	/^    const PhiClause* clauses = cache.getClauses();$/;"	v
clauses2	$C2_LIBDIR/../ir/phi_list.c2	/^    PhiClause* clauses2 = calloc(l.capacity, sizeof(PhiClause));$/;"	v
clear_used_decl	$C2_LIBDIR/../generator/generator_utils.c2	/^fn void clear_used_decl(void* arg, Decl* d) {$/;"	f
clear_used_mod	$C2_LIBDIR/../generator/generator_utils.c2	/^fn void clear_used_mod(void* arg, ast.Module* m) {$/;"	f
clen	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^            u32 clen = utf8.encode(tab, elemsof(tab), cc);$/;"	v
clobbers	$C2_LIBDIR/../ast/asm_stmt.c2	/^    Expr*[0] clobbers;  \/\/ StringLiterals$/;"	v
clobbers	$C2_LIBDIR/../generator/c/c_generator_stmt.c2	/^            Expr** clobbers = a.getClobbers();$/;"	v
clobbers	$C2_LIBDIR/../generator/c2i/c2i_generator_stmt.c2	/^            Expr** clobbers = a.getClobbers();$/;"	v
clobbers	$C2_LIBDIR/../parser/ast_builder.c2	/^                                      clobbers,$/;"	v
closeKind	$C2_LIBDIR/../parser/c2_parser_stmt.c2	/^    Kind[8] closeKind = { endKind }$/;"	v
close_file	$C2_LIBDIR/../generator/c2refs.c2	/^fn void close_file(MapFile f) {$/;"	f
cmd_len	$C2_LIBDIR/../plugins/shell_cmd_plugin.c2	/^    usize cmd_len = strcspn(cmd.cmd, " \\t");$/;"	v
cmd_str	$C2_LIBDIR/../plugins/shell_cmd_plugin.c2	/^    char[256] cmd_str;$/;"	v
cmp_calls	$C2_LIBDIR/../generator/c2_trace.c2	/^fn i32 cmp_calls(const void *a, const void *b) {$/;"	f
cmp_funcs	$C2_LIBDIR/../generator/c2_trace.c2	/^fn i32 cmp_funcs(const void *a, const void *b) {$/;"	f
cname	$C2_LIBDIR/../ast/ast_evaluator.c2	/^            const char* cname = fd.getCName();$/;"	v
cname	$C2_LIBDIR/../ast/function_decl.c2	/^    return cname;$/;"	v
cname	$C2_LIBDIR/../generator/c/c_generator.c2	/^    const char* cname = d.getCName();$/;"	v
cname	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^        const char* cname = d.getCName();$/;"	v
co	$C2_LIBDIR/../compiler/compiler_libs.c2	/^        Component* co = c.components.get(i);$/;"	v
co	$C2_LIBDIR/../generator/ir/ir_generator_expr.c2	/^    const ConditionalOperator* co = cast<ConditionalOperator*>(e);$/;"	v
col	$C2_LIBDIR/../ast/symbol_table.c2	/^        const char* col = d.isUsed() ? color.Normal : color.Grey;$/;"	v
col	$C2_LIBDIR/../common/component.c2	/^        const char* col = m.isUsed() ? color.Normal : color.Grey;$/;"	v
col	$C2_LIBDIR/../generator/c2refs.c2	/^    u16 col;$/;"	v
col_Attr	$C2_LIBDIR/../ast/utils.c2	/^const char* col_Attr = color.Blue;$/;"	v
col_Attr	$C2_LIBDIR/../ir/print.c2	/^const char* col_Attr = color.Bmagenta;$/;"	v
col_Block	$C2_LIBDIR/../ir/print.c2	/^const char* col_Block = color.Cyan;$/;"	v
col_Calc	$C2_LIBDIR/../ast/utils.c2	/^const char* col_Calc = color.Yellow;    \/\/ all calculated value$/;"	v
col_Comment	$C2_LIBDIR/../ir/print.c2	/^const char* col_Comment = color.Grey;$/;"	v
col_Data	$C2_LIBDIR/../ir/print.c2	/^const char* col_Data = color.Bcyan;$/;"	v
col_Decl	$C2_LIBDIR/../ast/utils.c2	/^const char* col_Decl = color.Bgreen;$/;"	v
col_Decl	$C2_LIBDIR/../ir/print.c2	/^const char* col_Decl = color.Magenta;$/;"	v
col_Error	$C2_LIBDIR/../ast/utils.c2	/^const char* col_Error = color.Red;$/;"	v
col_Expr	$C2_LIBDIR/../ast/utils.c2	/^const char* col_Expr = color.Bmagenta;$/;"	v
col_Fixup	$C2_LIBDIR/../ir/print.c2	/^const char* col_Fixup = color.Bred;$/;"	v
col_Instr	$C2_LIBDIR/../ir/print.c2	/^const char* col_Instr = color.Normal;$/;"	v
col_Name	$C2_LIBDIR/../ir/print.c2	/^const char* col_Name = color.White;$/;"	v
col_Normal	$C2_LIBDIR/../ast/utils.c2	/^const char* col_Normal = color.Normal;$/;"	v
col_PseudoInstr	$C2_LIBDIR/../ir/print.c2	/^const char* col_PseudoInstr = color.Bred;$/;"	v
col_Register	$C2_LIBDIR/../ir/print.c2	/^const char* col_Register = color.Bgreen;$/;"	v
col_Slot	$C2_LIBDIR/../ir/print.c2	/^const char* col_Slot = color.Bcyan;$/;"	v
col_Stmt	$C2_LIBDIR/../ast/utils.c2	/^const char* col_Stmt = color.Bmagenta;$/;"	v
col_Symbol	$C2_LIBDIR/../ir/print.c2	/^const char* col_Symbol = color.Bblue;$/;"	v
col_Temp	$C2_LIBDIR/../ir/print.c2	/^const char* col_Temp = color.Bgreen;$/;"	v
col_Template	$C2_LIBDIR/../ast/utils.c2	/^const char* col_Template = color.Green;$/;"	v
col_Type	$C2_LIBDIR/../ast/utils.c2	/^const char* col_Type = color.Green;$/;"	v
col_Type	$C2_LIBDIR/../ir/print.c2	/^const char* col_Type = color.Green;$/;"	v
col_Unknown	$C2_LIBDIR/../ir/print.c2	/^const char* col_Unknown = color.Yellow;$/;"	v
col_Value	$C2_LIBDIR/../ast/utils.c2	/^const char* col_Value = color.Bcyan;$/;"	v
col_Value	$C2_LIBDIR/../ir/print.c2	/^const char* col_Value = color.Magenta;$/;"	v
collector	$C2_LIBDIR/../ir/context.c2	/^    SlotCollector collector;$/;"	v
colonLoc	$C2_LIBDIR/../ast/conditional_operator.c2	/^    SrcLoc colonLoc;$/;"	v
colonLoc	$C2_LIBDIR/../parser/ast_builder.c2	/^                                                 SrcLoc colonLoc,$/;"	v
colonLoc	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    SrcLoc colonLoc = 0;$/;"	v
colon_loc	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^                SrcLoc colon_loc = p.tok.loc;$/;"	v
color	$C2_LIBDIR/../ast/module.c2	/^import color;$/;"	v
color	$C2_LIBDIR/../ast/qualtype.c2	/^import color;$/;"	v
color	$C2_LIBDIR/../ast/symbol_table.c2	/^import color;$/;"	v
color	$C2_LIBDIR/../ast/type.c2	/^import color;$/;"	v
color	$C2_LIBDIR/../ast/utils.c2	/^import color;$/;"	v
color	$C2_LIBDIR/../ast_utils/color.c2	/^module color;$/;"	v
color	$C2_LIBDIR/../common/component.c2	/^import color;$/;"	v
color	$C2_LIBDIR/../common/diagnostics.c2	/^import color;$/;"	v
color	$C2_LIBDIR/../common/source_mgr.c2	/^import color;$/;"	v
color	$C2_LIBDIR/../compiler/c2recipe_parser.c2	/^import color;$/;"	v
color	$C2_LIBDIR/../compiler/compiler.c2	/^import color;$/;"	v
color	$C2_LIBDIR/../compiler/compiler_libs.c2	/^import color;$/;"	v
color	$C2_LIBDIR/../compiler/main.c2	/^import color;$/;"	v
color	$C2_LIBDIR/../parser/c2_parser.c2	/^import color;$/;"	v
color	$C2_LIBDIR/../plugins/unit_test2.c2	/^  const char* color = stats.failed ? Red : Green;$/;"	v
color_output	$C2_LIBDIR/../plugins/unit_test2.c2	/^bool color_output;$/;"	v
color_print	$C2_LIBDIR/../plugins/unit_test2.c2	/^fn void color_print(const char* color, const char* text) {$/;"	f
colors	$C2_LIBDIR/../ast_utils/string_buffer.c2	/^    bool colors;$/;"	v
column	$C2_LIBDIR/../common/source_mgr.c2	/^    u32 column;$/;"	v
column	$C2_LIBDIR/../common/yaml/yaml_tokenizer.c2	/^    u32 column;$/;"	v
column	$C2_LIBDIR/../generator/c/c_generator_trace.c2	/^    u8 column;$/;"	v
column	$C2_LIBDIR/../plugins/refs_generator.c2	/^    u32 column;$/;"	v
comp	$C2_LIBDIR/../compiler/compiler_libs.c2	/^    Component* comp = component.create(c.context, c.auxPool, &c.allmodules, name, kind, is_direc/;"	v
compare_word	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^fn bool compare_word(const char* cur, const char* expect) {$/;"	f
compiler	$C2_LIBDIR/../compiler/compiler.c2	/^module compiler;$/;"	v
compiler	$C2_LIBDIR/../compiler/compiler_libs.c2	/^module compiler;$/;"	v
compiler	$C2_LIBDIR/../compiler/main.c2	/^import compiler;$/;"	v
complexity	$C2_LIBDIR/../ast/ast_evaluator.c2	/^    u32 complexity;$/;"	v
component	$C2_LIBDIR/../analyser/module_sorter.c2	/^import component;$/;"	v
component	$C2_LIBDIR/../common/component.c2	/^module component;$/;"	v
component	$C2_LIBDIR/../common/manifest_writer.c2	/^import component;$/;"	v
component	$C2_LIBDIR/../compiler/compiler.c2	/^import component;$/;"	v
component	$C2_LIBDIR/../compiler/manifest.c2	/^import component;$/;"	v
component	$C2_LIBDIR/../generator/c/c_generator.c2	/^import component;$/;"	v
component	$C2_LIBDIR/../generator/c/c_generator_special.c2	/^import component;$/;"	v
component	$C2_LIBDIR/../generator/c2i/c2i_generator.c2	/^import component;$/;"	v
component	$C2_LIBDIR/../generator/generator_utils.c2	/^import component;$/;"	v
component	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^import component;$/;"	v
component	$C2_LIBDIR/../parser/ast_builder.c2	/^import component;$/;"	v
component	$C2_LIBDIR/../plugins/deps_generator.c2	/^import component;$/;"	v
component	$C2_LIBDIR/../plugins/git_version_plugin.c2	/^import component;$/;"	v
component	$C2_LIBDIR/../plugins/plugin_info.c2	/^import component;$/;"	v
component	$C2_LIBDIR/../plugins/refs_generator.c2	/^import component;$/;"	v
component_sorter	$C2_LIBDIR/../common/component_sorter.c2	/^module component_sorter;$/;"	v
component_sorter	$C2_LIBDIR/../compiler/compiler_libs.c2	/^import component_sorter;$/;"	v
components	$C2_LIBDIR/../common/component.c2	/^    Component** components;$/;"	v
compoundStmtBits	$C2_LIBDIR/../ast/stmt.c2	/^        CompoundStmtBits compoundStmtBits;$/;"	v
comps2	$C2_LIBDIR/../common/component.c2	/^    Component** comps2 = malloc(l.capacity * sizeof(Component*));$/;"	v
con	$C2_LIBDIR/../ir/print.c2	/^        const Constant* con = ph.c.constants.get(v.value);$/;"	v
cond	$C2_LIBDIR/../analyser/module_analyser_expr.c2	/^    ConditionalOperator* cond = (ConditionalOperator*)e;$/;"	v
cond	$C2_LIBDIR/../analyser/module_analyser_stmt.c2	/^    Expr** cond = f.getCond2();$/;"	v
cond	$C2_LIBDIR/../analyser/module_analyser_switch.c2	/^                                 Expr* cond, u32 *indexp, u32 *name_idxp) {$/;"	v
cond	$C2_LIBDIR/../ast/ast_evaluator.c2	/^    Stmt* cond = s.getCond();$/;"	v
cond	$C2_LIBDIR/../ast/conditional_operator.c2	/^    Expr* cond;$/;"	v
cond	$C2_LIBDIR/../ast/for_stmt.c2	/^    Expr* cond;$/;"	v
cond	$C2_LIBDIR/../ast/if_stmt.c2	/^    Stmt* cond;$/;"	v
cond	$C2_LIBDIR/../ast/switch_stmt.c2	/^    Expr* cond;$/;"	v
cond	$C2_LIBDIR/../ast/while_stmt.c2	/^    Stmt* cond;$/;"	v
cond	$C2_LIBDIR/../generator/ast_visitor.c2	/^        Expr* cond = f.getCond();$/;"	v
cond	$C2_LIBDIR/../generator/c/c_generator_stmt.c2	/^        Stmt* cond = w.getCond();$/;"	v
cond	$C2_LIBDIR/../generator/ir/ir_generator_stmt.c2	/^    const Stmt* cond = if_stmt.getCond();$/;"	v
cond	$C2_LIBDIR/../generator/ir/ir_generator_switch.c2	/^    Expr* cond = sw.getCond();$/;"	v
cond	$C2_LIBDIR/../ir/switch.c2	/^    Ref cond = ii.args[0];$/;"	v
cond	$C2_LIBDIR/../parser/ast_builder.c2	/^                                     Expr* cond,$/;"	v
cond	$C2_LIBDIR/../parser/c2_parser_stmt.c2	/^    Stmt* cond = p.parseCondition();$/;"	v
cond	$C2_LIBDIR/../parser/c2_parser_switch.c2	/^    Expr* cond = p.parseExpr();$/;"	v
cond2	$C2_LIBDIR/../ast/for_stmt.c2	/^    Expr* cond2 = s.cond ? s.cond.instantiate(inst) : nil;$/;"	v
cond2	$C2_LIBDIR/../ast/if_stmt.c2	/^    Stmt* cond2 = s.cond.instantiate(inst);$/;"	v
cond2	$C2_LIBDIR/../ast/while_stmt.c2	/^    Stmt* cond2 = s.cond.instantiate(inst);$/;"	v
cond_blk	$C2_LIBDIR/../generator/ir/ir_generator_stmt.c2	/^    BlockId cond_blk = c.createBlock(BlockKind.WhileCond);$/;"	v
cond_str	$C2_LIBDIR/../generator/ir/ir_generator_stmt.c2	/^    ExprRef cond_str;$/;"	v
conds	$C2_LIBDIR/../ast/switch_case.c2	/^    Expr*[0] conds;    \/\/ tail-allocated$/;"	v
conds	$C2_LIBDIR/../parser/ast_builder.c2	/^                             conds, num_conds, stmts, num_stmts);$/;"	v
config_file	$C2_LIBDIR/../plugins/shell_cmd_plugin.c2	/^    const char* config_file; \/\/ no ownership$/;"	v
console	$C2_LIBDIR/../common/console.c2	/^module console;$/;"	v
console	$C2_LIBDIR/../common/manifest_writer.c2	/^import console;$/;"	v
console	$C2_LIBDIR/../common/target_info.c2	/^import console;$/;"	v
console	$C2_LIBDIR/../compiler/compiler.c2	/^import console;$/;"	v
console	$C2_LIBDIR/../compiler/compiler_libs.c2	/^import console;$/;"	v
console	$C2_LIBDIR/../compiler/main.c2	/^import console;$/;"	v
console	$C2_LIBDIR/../compiler/manifest.c2	/^import console;$/;"	v
console	$C2_LIBDIR/../compiler/plugin_mgr.c2	/^import console;$/;"	v
console	$C2_LIBDIR/../generator/c/c_generator.c2	/^import console;$/;"	v
console	$C2_LIBDIR/../generator/c/c_generator_special.c2	/^import console;$/;"	v
console	$C2_LIBDIR/../generator/c2i/c2i_generator.c2	/^import console;$/;"	v
console	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^import console;$/;"	v
console	$C2_LIBDIR/../plugins/deps_generator_plugin.c2	/^import console;$/;"	v
console	$C2_LIBDIR/../plugins/git_version_plugin.c2	/^import console;$/;"	v
console	$C2_LIBDIR/../plugins/refs_generator.c2	/^import console;$/;"	v
console	$C2_LIBDIR/../plugins/refs_generator_plugin.c2	/^import console;$/;"	v
console	$C2_LIBDIR/../plugins/shell_cmd_plugin.c2	/^import console;$/;"	v
console	$C2_LIBDIR/../plugins/unit_test_plugin.c2	/^import console;$/;"	v
console_debug	$C2_LIBDIR/../compiler/plugin_mgr.c2	/^    bool console_debug;$/;"	v
console_timing	$C2_LIBDIR/../compiler/plugin_mgr.c2	/^    bool console_timing;$/;"	v
const_loc	$C2_LIBDIR/../parser/c2_parser_type.c2	/^            SrcLoc const_loc = p.tok.loc;$/;"	v
const_name	$C2_LIBDIR/../parser/c2_parser_type.c2	/^            u32 const_name = p.tok.name_idx;$/;"	v
constant	$C2_LIBDIR/../ir/context.c2	/^        Constant constant = { .uvalue = value }$/;"	v
constant	$C2_LIBDIR/../parser/c2_parser_type.c2	/^            EnumConstantDecl* constant = p.builder.actOnEnumConstant(const_name,$/;"	v
constants	$C2_LIBDIR/../analyser/module_analyser_builtin.c2	/^    EnumConstantDecl** constants = etd.getConstants();$/;"	v
constants	$C2_LIBDIR/../analyser/module_analyser_member.c2	/^                        EnumConstantDecl** constants = etd.getConstants();$/;"	v
constants	$C2_LIBDIR/../analyser/module_analyser_type.c2	/^    EnumConstantDecl** constants = d.getConstants();$/;"	v
constants	$C2_LIBDIR/../analyser/scope.c2	/^import constants;$/;"	v
constants	$C2_LIBDIR/../analyser/unused_checker.c2	/^    EnumConstantDecl** constants = d.getConstants();$/;"	v
constants	$C2_LIBDIR/../ast/enum_type_decl.c2	/^    EnumConstantDecl*[0] constants; \/\/ tail-allocated, for non-incremental enums$/;"	v
constants	$C2_LIBDIR/../ast_utils/constants.c2	/^module constants;$/;"	v
constants	$C2_LIBDIR/../common/utils.c2	/^import constants;$/;"	v
constants	$C2_LIBDIR/../compiler/compiler.c2	/^import constants;$/;"	v
constants	$C2_LIBDIR/../compiler/compiler_libs.c2	/^import constants;$/;"	v
constants	$C2_LIBDIR/../compiler/main.c2	/^import constants;$/;"	v
constants	$C2_LIBDIR/../generator/c/c_generator.c2	/^import constants;$/;"	v
constants	$C2_LIBDIR/../generator/c/dep_finder.c2	/^    EnumConstantDecl** constants = etd.getConstants();$/;"	v
constants	$C2_LIBDIR/../generator/c2i/c2i_generator_decl.c2	/^    EnumConstantDecl** constants = etd.getConstants();$/;"	v
constants	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^import constants;$/;"	v
constants	$C2_LIBDIR/../ir/constant_list.c2	/^    Constant* constants;$/;"	v
constants	$C2_LIBDIR/../ir/context.c2	/^    ConstantList constants;$/;"	v
constants	$C2_LIBDIR/../ir/function_info.c2	/^import constants;$/;"	v
constants	$C2_LIBDIR/../parser/ast_builder.c2	/^                                        EnumConstantDecl** constants,$/;"	v
constants	$C2_LIBDIR/../parser/c2_parser.c2	/^import constants;$/;"	v
constants	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^import constants;$/;"	v
constants	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^import constants;$/;"	v
constants	$C2_LIBDIR/../plugins/deps_generator.c2	/^        EnumConstantDecl** constants = etd.getConstants();$/;"	v
constants	$C2_LIBDIR/../plugins/refs_generator.c2	/^        EnumConstantDecl** constants = etd.getConstants();$/;"	v
constants	$C2_LIBDIR/../plugins/refs_generator_plugin.c2	/^import constants;$/;"	v
constants2	$C2_LIBDIR/../ir/constant_list.c2	/^        void* constants2 = stdlib.malloc(l.capacity * sizeof(Constant));$/;"	v
constraints	$C2_LIBDIR/../ast/asm_stmt.c2	/^    Expr*[0] constraints;   \/\/ StringLiterals$/;"	v
constraints	$C2_LIBDIR/../generator/c/c_generator_stmt.c2	/^        const Expr** constraints = a.getConstraints();$/;"	v
constraints	$C2_LIBDIR/../generator/c2i/c2i_generator_stmt.c2	/^        const Expr** constraints = a.getConstraints();$/;"	v
constraints	$C2_LIBDIR/../parser/ast_builder.c2	/^                                      constraints,$/;"	v
constraints	$C2_LIBDIR/../parser/c2_parser_stmt.c2	/^                                   ExprList* constraints,$/;"	v
cont	$C2_LIBDIR/../analyser/module_analyser_stmt.c2	/^    Expr** cont = f.getCont2();$/;"	v
cont	$C2_LIBDIR/../ast/ast_evaluator.c2	/^    Cont cont;$/;"	v
cont	$C2_LIBDIR/../ast/for_stmt.c2	/^    Expr* cont;$/;"	v
cont	$C2_LIBDIR/../generator/ast_visitor.c2	/^        Expr* cont = f.getCont();$/;"	v
cont	$C2_LIBDIR/../generator/c/c_generator_stmt.c2	/^        Expr* cont = f.getCont();$/;"	v
cont	$C2_LIBDIR/../generator/c2i/c2i_generator_stmt.c2	/^        Expr* cont = f.getCont();$/;"	v
cont	$C2_LIBDIR/../generator/ir/ir_generator_stmt.c2	/^    Expr* cont = f.getCont();$/;"	v
cont2	$C2_LIBDIR/../ast/for_stmt.c2	/^    Expr* cont2 = s.cont ? s.cont.instantiate(inst) : nil;$/;"	v
cont_blk	$C2_LIBDIR/../generator/ir/ir_generator_stmt.c2	/^    BlockId cont_blk = c.createBlock(BlockKind.ForCont);$/;"	v
container	$C2_LIBDIR/../ast/builtin_expr.c2	/^    ToContainerData[0] container;   \/\/ tail-allocated, only for to_container$/;"	v
contents	$C2_LIBDIR/../common/file/file_utils.c2	/^    void* contents;$/;"	v
contents_size	$C2_LIBDIR/../common/file/file_utils.c2	/^    u32 contents_size;$/;"	v
context	$C2_LIBDIR/../parser/ast_builder.c2	/^    Context* context;           \/\/ no ownership$/;"	v
continue	$C2_LIBDIR/../analyser/module_analyser_call.c2	/^            continue;$/;"	v
continue	$C2_LIBDIR/../analyser/module_analyser_function.c2	/^            continue;$/;"	v
continue	$C2_LIBDIR/../analyser/module_analyser_init.c2	/^            continue;$/;"	v
continue	$C2_LIBDIR/../analyser/module_analyser_switch.c2	/^            continue;$/;"	v
continue	$C2_LIBDIR/../analyser/scope.c2	/^            continue;$/;"	v
continue	$C2_LIBDIR/../analyser_utils/printf_utils.c2	/^            continue;$/;"	v
continue	$C2_LIBDIR/../common/source_mgr.c2	/^            continue;$/;"	v
continue	$C2_LIBDIR/../common/yaml/yaml_iterator.c2	/^                continue;$/;"	v
continue	$C2_LIBDIR/../common/yaml/yaml_tokenizer.c2	/^            continue;$/;"	v
continue	$C2_LIBDIR/../compiler/compiler_libs.c2	/^                continue;$/;"	v
continue	$C2_LIBDIR/../compiler/main.c2	/^            continue;$/;"	v
continue	$C2_LIBDIR/../compiler/plugin_mgr.c2	/^            continue;$/;"	v
continue	$C2_LIBDIR/../generator/c/c_generator.c2	/^            continue;$/;"	v
continue	$C2_LIBDIR/../generator/c/c_generator_call.c2	/^                continue;$/;"	v
continue	$C2_LIBDIR/../generator/c/c_generator_special.c2	/^                    continue;$/;"	v
continue	$C2_LIBDIR/../generator/c/c_generator_stmt.c2	/^                continue;$/;"	v
continue	$C2_LIBDIR/../generator/ir/field_struct_layouter.c2	/^            continue;$/;"	v
continue	$C2_LIBDIR/../ir/context.c2	/^            continue;$/;"	v
continue	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^            continue;$/;"	v
continue	$C2_LIBDIR/../parser/c2_parser_type.c2	/^            continue;$/;"	v
continue	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^            continue;$/;"	v
continue	$C2_LIBDIR/../parser/keywords.c2	/^            continue;$/;"	v
continue_block	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^    u32 continue_block;$/;"	v
conv	$C2_LIBDIR/../analyser/module_analyser.c2	/^import conversion_checker as conv;$/;"	v
conv	$C2_LIBDIR/../generator/ir/ir_generator_member.c2	/^    MemberConversion conv = m.getConversion();$/;"	v
conversion_checker	$C2_LIBDIR/../analyser/conversion_checker.c2	/^module conversion_checker;$/;"	v
conversion_checker	$C2_LIBDIR/../analyser/conversion_checker_expr.c2	/^module conversion_checker;$/;"	v
conversion_checker	$C2_LIBDIR/../analyser/module_analyser_binop.c2	/^import conversion_checker;$/;"	v
conversion_checker	$C2_LIBDIR/../analyser/module_analyser_expr.c2	/^import conversion_checker;$/;"	v
convertTokenToUnaryOpcode	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^fn UnaryOpcode convertTokenToUnaryOpcode(Kind kind) {$/;"	f
copies	$C2_LIBDIR/../ir/context.c2	/^    CopyList copies;$/;"	v
copies	$C2_LIBDIR/../ir/copy_list.c2	/^    CopyInfo* copies;$/;"	v
copies2	$C2_LIBDIR/../ir/copy_list.c2	/^    CopyInfo* copies2 = malloc(capacity * sizeof(CopyInfo));$/;"	v
copy	$C2_LIBDIR/../ast_utils/string_buffer.c2	/^    u32 copy = 0;$/;"	v
copy	$C2_LIBDIR/../common/component_sorter.c2	/^    Component** copy = stdlib.malloc(count * sizeof(Component*));$/;"	v
copy	$C2_LIBDIR/../ir/copy_list.c2	/^        Ref* copy = l.find(ref.value);$/;"	v
copy	$C2_LIBDIR/../ir/register_alloc.c2	/^        Instr* copy = t.inserter.getLastInstr();$/;"	v
copy	$C2_LIBDIR/../ir/ssa.c2	/^                Ref* copy = t.copies.find(r.value);$/;"	v
copy_dirname	$C2_LIBDIR/../common/file/file_utils.c2	/^fn usize copy_dirname(char *buf, usize size, const char* dir) {$/;"	f
copy_node	$C2_LIBDIR/../generator/radix_tree/radix_tree.c2	/^        Node* copy_node = t.idx2node(copy_node_idx);$/;"	v
copy_node_idx	$C2_LIBDIR/../generator/radix_tree/radix_tree.c2	/^        u32 copy_node_idx = t.add_node(n.num_children + 1, n.word_idx, 0);$/;"	v
couldBeTemplateCall	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    bool couldBeTemplateCall = false;$/;"	v
count	$C2_LIBDIR/../analyser/incr_array_list.c2	/^    u32 count;$/;"	v
count	$C2_LIBDIR/../analyser/init_checker.c2	/^    u32 count;$/;"	v
count	$C2_LIBDIR/../analyser/label_vector.c2	/^    u32 count;$/;"	v
count	$C2_LIBDIR/../analyser/module_analyser_stmt.c2	/^    u32 count = ds.getDeclCount();$/;"	v
count	$C2_LIBDIR/../analyser/module_analyser_struct.c2	/^    u32 count = d.getNumMembers();$/;"	v
count	$C2_LIBDIR/../analyser/module_analyser_switch.c2	/^    const u32 count = c.getNumStmts();$/;"	v
count	$C2_LIBDIR/../analyser/module_sorter.c2	/^    const u32 count = mods.length();$/;"	v
count	$C2_LIBDIR/../analyser/name_vector.c2	/^    u32 count;$/;"	v
count	$C2_LIBDIR/../analyser/struct_func_list.c2	/^    u32 count;$/;"	v
count	$C2_LIBDIR/../ast/array_value_list.c2	/^    u32 count;$/;"	v
count	$C2_LIBDIR/../ast/ast_evaluator.c2	/^    u32 count = body.getCount();$/;"	v
count	$C2_LIBDIR/../ast/compound_stmt.c2	/^    u32 count = s.getCount();$/;"	v
count	$C2_LIBDIR/../ast/decl_list.c2	/^    u32 count;$/;"	v
count	$C2_LIBDIR/../ast/decl_stmt.c2	/^    u32 count = s.base.declStmtBits.count;$/;"	v
count	$C2_LIBDIR/../ast/expr_list.c2	/^    u32 count;$/;"	v
count	$C2_LIBDIR/../ast/function_decl_list.c2	/^    u32 count;$/;"	v
count	$C2_LIBDIR/../ast/import_decl_list.c2	/^    u32 count;$/;"	v
count	$C2_LIBDIR/../ast/instance_table.c2	/^    u32 count;$/;"	v
count	$C2_LIBDIR/../ast/pointer_pool.c2	/^    u32 count;$/;"	v
count	$C2_LIBDIR/../ast/static_assert_list.c2	/^    u32 count;$/;"	v
count	$C2_LIBDIR/../ast/statistics.c2	/^    u32 count;$/;"	v
count	$C2_LIBDIR/../ast/string_type_pool.c2	/^    u32 count;$/;"	v
count	$C2_LIBDIR/../ast/struct_type_decl.c2	/^    u32 count = s.getNumMembers();$/;"	v
count	$C2_LIBDIR/../ast/symbol_table.c2	/^    u32 count = t.num_public + t.num_private;$/;"	v
count	$C2_LIBDIR/../ast_utils/attr_table.c2	/^    u32 count;$/;"	v
count	$C2_LIBDIR/../ast_utils/string_pool.c2	/^    u32 count = 0;$/;"	v
count	$C2_LIBDIR/../common/attr_handler.c2	/^    u32 count;$/;"	v
count	$C2_LIBDIR/../common/build_target.c2	/^    u32 count;$/;"	v
count	$C2_LIBDIR/../common/component.c2	/^    u32 count;$/;"	v
count	$C2_LIBDIR/../common/dsm_sorter.c2	/^    u32 count;$/;"	v
count	$C2_LIBDIR/../common/index_list.c2	/^    u32 count;$/;"	v
count	$C2_LIBDIR/../common/library_list.c2	/^    u32 count;$/;"	v
count	$C2_LIBDIR/../common/linked_list.c2	/^    u64 count = 0;$/;"	v
count	$C2_LIBDIR/../common/string_list.c2	/^    u32 count;$/;"	v
count	$C2_LIBDIR/../common/value_maplist.c2	/^    u32 count;$/;"	v
count	$C2_LIBDIR/../common/yaml/yaml_tokenizer.c2	/^    u32 count;$/;"	v
count	$C2_LIBDIR/../generator/ast_visitor.c2	/^    u32 count = s.getCount();$/;"	v
count	$C2_LIBDIR/../generator/ast_visitor_expr.c2	/^        u32 count = ili.getNumValues();$/;"	v
count	$C2_LIBDIR/../generator/c/c_generator_pure_call.c2	/^    u32 count = body.getCount();$/;"	v
count	$C2_LIBDIR/../generator/c/c_generator_special.c2	/^    u32 count = mods.length();$/;"	v
count	$C2_LIBDIR/../generator/c/c_generator_stmt.c2	/^        u32 count = ds.getDeclCount();$/;"	v
count	$C2_LIBDIR/../generator/c/c_generator_trace.c2	/^    u32 count;$/;"	v
count	$C2_LIBDIR/../generator/c/dep_finder.c2	/^    u32 count = ile.getNumValues();$/;"	v
count	$C2_LIBDIR/../generator/c2i/c2i_generator_stmt.c2	/^        u32 count = ds.getDeclCount();$/;"	v
count	$C2_LIBDIR/../generator/c2refs.c2	/^    u32 count;$/;"	v
count	$C2_LIBDIR/../generator/ir/array_init_sorter.c2	/^    u32 count;$/;"	v
count	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^        u32 count = ds.getDeclCount();$/;"	v
count	$C2_LIBDIR/../generator/ir/ir_generator_locals.c2	/^    u32 count;$/;"	v
count	$C2_LIBDIR/../generator/ir/ir_generator_stmt.c2	/^        u32 count = ds.getDeclCount();$/;"	v
count	$C2_LIBDIR/../generator/ir/ref_list.c2	/^    u32 count;$/;"	v
count	$C2_LIBDIR/../generator/radix_tree/radix_tree_dump.c2	/^    u32* count = arg;$/;"	v
count	$C2_LIBDIR/../ir/block_list.c2	/^    u32 count;$/;"	v
count	$C2_LIBDIR/../ir/case_list.c2	/^    u32 count;$/;"	v
count	$C2_LIBDIR/../ir/constant_list.c2	/^    u32 count;$/;"	v
count	$C2_LIBDIR/../ir/copy_list.c2	/^    u32 count;$/;"	v
count	$C2_LIBDIR/../ir/init_value_list.c2	/^    u32 count;$/;"	v
count	$C2_LIBDIR/../ir/inserter.c2	/^    u32 count;$/;"	v
count	$C2_LIBDIR/../ir/instr_list.c2	/^    u32 count;$/;"	v
count	$C2_LIBDIR/../ir/interference_graph.c2	/^    u32 count;$/;"	v
count	$C2_LIBDIR/../ir/live_map.c2	/^    u32 count;$/;"	v
count	$C2_LIBDIR/../ir/phi_list.c2	/^    u32 count;$/;"	v
count	$C2_LIBDIR/../ir/register_alloc.c2	/^    u32 count;$/;"	v
count	$C2_LIBDIR/../ir/rev_list.c2	/^    u32 count;$/;"	v
count	$C2_LIBDIR/../ir/slot_collector.c2	/^    u32 count = c.info.instructions.getCount();$/;"	v
count	$C2_LIBDIR/../ir/slot_writes_map.c2	/^    u32 count;$/;"	v
count	$C2_LIBDIR/../ir/symbol_list.c2	/^    u32 count;$/;"	v
count	$C2_LIBDIR/../ir/types.c2	/^    u32 count;$/;"	v
count	$C2_LIBDIR/../ir/usage_counter.c2	/^    u32 count;$/;"	v
count	$C2_LIBDIR/../ir/work_queue.c2	/^    u32 count;$/;"	v
count	$C2_LIBDIR/../parser/c2_parser_stmt.c2	/^    count =         \/\/ id = var$/;"	v
count	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^    u32 count;$/;"	v
count	$C2_LIBDIR/../parser/case_list.c2	/^    u32 count;$/;"	v
count	$C2_LIBDIR/../parser/expr_list.c2	/^    u32 count;$/;"	v
count	$C2_LIBDIR/../parser/stmt_list.c2	/^    u32 count;$/;"	v
count	$C2_LIBDIR/../plugins/deps_generator.c2	/^    u32 count;$/;"	v
count	$C2_LIBDIR/../plugins/refs_generator.c2	/^    u32 count;$/;"	v
count1	$C2_LIBDIR/../generator/c2_trace.c2	/^        u32 count1 = func.count;$/;"	v
count2	$C2_LIBDIR/../generator/c2_trace.c2	/^        u32 count2 = cp.count;$/;"	v
count_word	$C2_LIBDIR/../generator/radix_tree/radix_tree_dump.c2	/^fn void count_word(void* arg, const char* text, u32 value) {$/;"	f
counts	$C2_LIBDIR/../ir/usage_counter.c2	/^    u8* counts;$/;"	v
cp	$C2_LIBDIR/../analyser_utils/printf_utils.c2	/^    const char* cp = format;$/;"	v
cp	$C2_LIBDIR/../ast/integer_literal.c2	/^    char* cp = &tmp[elemsof(tmp) - 1];$/;"	v
cp	$C2_LIBDIR/../ast_utils/string_buffer.c2	/^    char* cp = &buf.data_[buf.size_];$/;"	v
cp	$C2_LIBDIR/../ast_utils/string_pool.c2	/^    const char* cp = p.data;$/;"	v
cp	$C2_LIBDIR/../common/source_mgr.c2	/^    return cp;$/;"	v
cp	$C2_LIBDIR/../common/yaml/yaml_dump.c2	/^        const char* cp = d.text + 1;$/;"	v
cp	$C2_LIBDIR/../common/yaml/yaml_parser.c2	/^    char* cp = p.message;$/;"	v
cp	$C2_LIBDIR/../generator/c2refs.c2	/^    char* cp = (char*)f;$/;"	v
cp	$C2_LIBDIR/../generator/radix_tree/radix_tree_dump.c2	/^        const char* cp = t.idx2word(idx);$/;"	v
cp	$C2_LIBDIR/../plugins/deps_generator.c2	/^        const char* cp = filename;$/;"	v
create_project	$C2_LIBDIR/../compiler/main.c2	/^fn void create_project(const char* name) {$/;"	f
create_template_name	$C2_LIBDIR/../analyser/module_analyser_call.c2	/^fn void create_template_name(char* name, const char* orig, u16 idx) {$/;"	f
cs	$C2_LIBDIR/../ast/decl.c2	/^    DeclCheckState cs = d.getCheckState();$/;"	v
cs	$C2_LIBDIR/../generator/c/c_generator_stmt.c2	/^    const StringLiteral* cs = cast<StringLiteral*>(c);$/;"	v
cs	$C2_LIBDIR/../generator/c2i/c2i_generator_stmt.c2	/^    const StringLiteral* cs = cast<StringLiteral*>(c);$/;"	v
cs	$C2_LIBDIR/../ir/common.c2	/^            Case* cs = cases.get(case_id+j);$/;"	v
cs	$C2_LIBDIR/../ir/context.c2	/^            Case* cs = fi.cases.get(case_id+i);$/;"	v
ct	$C2_LIBDIR/../analyser/module_analyser_stmt.c2	/^        QualType ct = ma.analyseCondition(init, false);$/;"	v
ct	$C2_LIBDIR/../analyser/module_analyser_switch.c2	/^    QualType ct = ma.analyseExpr(sw.getCond2(), true, RHS);$/;"	v
ctc	$C2_LIBDIR/../analyser/module_analyser_init.c2	/^    bool ctc = true;$/;"	v
ctc	$C2_LIBDIR/../ast/expr.c2	/^                  bool ctc,$/;"	v
ctv	$C2_LIBDIR/../analyser/module_analyser_type.c2	/^            Value ctv = ctv_analyser.get_value(initval);$/;"	v
ctv	$C2_LIBDIR/../ast/expr.c2	/^                  bool ctv,$/;"	v
ctv_analyser	$C2_LIBDIR/../analyser/conversion_checker.c2	/^import ctv_analyser;$/;"	v
ctv_analyser	$C2_LIBDIR/../analyser/conversion_checker_expr.c2	/^import ctv_analyser;$/;"	v
ctv_analyser	$C2_LIBDIR/../analyser/module_analyser.c2	/^import ctv_analyser;$/;"	v
ctv_analyser	$C2_LIBDIR/../analyser/module_analyser_binop.c2	/^import ctv_analyser;$/;"	v
ctv_analyser	$C2_LIBDIR/../analyser/module_analyser_expr.c2	/^import ctv_analyser;$/;"	v
ctv_analyser	$C2_LIBDIR/../analyser/module_analyser_init.c2	/^import ctv_analyser;$/;"	v
ctv_analyser	$C2_LIBDIR/../analyser/module_analyser_stmt.c2	/^import ctv_analyser;$/;"	v
ctv_analyser	$C2_LIBDIR/../analyser/module_analyser_struct.c2	/^import ctv_analyser;$/;"	v
ctv_analyser	$C2_LIBDIR/../analyser/module_analyser_switch.c2	/^import ctv_analyser;$/;"	v
ctv_analyser	$C2_LIBDIR/../analyser/module_analyser_type.c2	/^import ctv_analyser;$/;"	v
ctv_analyser	$C2_LIBDIR/../analyser_utils/ctv_analyser.c2	/^module ctv_analyser;$/;"	v
ctv_analyser	$C2_LIBDIR/../generator/c/c_generator_pure_call.c2	/^import ctv_analyser;$/;"	v
ctv_analyser	$C2_LIBDIR/../generator/ir/basic_struct_layouter.c2	/^import ctv_analyser;$/;"	v
ctv_analyser	$C2_LIBDIR/../generator/ir/field_struct_layouter.c2	/^import ctv_analyser;$/;"	v
ctv_analyser	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^import ctv_analyser;$/;"	v
ctv_analyser	$C2_LIBDIR/../generator/ir/ir_generator_expr.c2	/^import ctv_analyser;$/;"	v
ctv_analyser	$C2_LIBDIR/../generator/ir/ir_generator_switch.c2	/^import ctv_analyser;$/;"	v
ctype	$C2_LIBDIR/../analyser/module_analyser.c2	/^import ctype;$/;"	v
ctype	$C2_LIBDIR/../analyser/module_analyser_member.c2	/^import ctype;$/;"	v
ctype	$C2_LIBDIR/../analyser_utils/printf_utils.c2	/^import ctype;$/;"	v
ctype	$C2_LIBDIR/../compiler/c2recipe_parser.c2	/^import ctype;$/;"	v
ctype	$C2_LIBDIR/../compiler/compiler.c2	/^import ctype;$/;"	v
cur	$C2_LIBDIR/../ast_utils/context.c2	/^    void* cur = c.cur_data + c.cur_size;$/;"	v
cur	$C2_LIBDIR/../ast_utils/string_buffer.c2	/^    char* cur = buf.data_ + buf.size_;$/;"	v
cur	$C2_LIBDIR/../common/yaml/yaml_tokenizer.c2	/^    const char* cur;$/;"	v
cur	$C2_LIBDIR/../compiler/c2recipe_parser.c2	/^    const char* cur;$/;"	v
cur	$C2_LIBDIR/../generator/radix_tree/radix_tree.c2	/^        cur = cur.next;$/;"	v
cur	$C2_LIBDIR/../generator/radix_tree/radix_tree_dump.c2	/^        cur = cur.next;$/;"	v
cur	$C2_LIBDIR/../generator/radix_tree/radix_tree_fs.c2	/^        cur = cur.next;$/;"	v
cur	$C2_LIBDIR/../ir/inserter.c2	/^    u32 cur;        \/\/ current insertion index$/;"	v
cur	$C2_LIBDIR/../ir/register_alloc.c2	/^                    Block* cur = t.inserter.getLastBlock();$/;"	v
cur	$C2_LIBDIR/../ir/slot_collector.c2	/^        Instr* cur = &ii[i];$/;"	v
cur	$C2_LIBDIR/../ir/switch.c2	/^        Block* cur = inserter.getLastBlock();$/;"	v
cur	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^    const char* cur;$/;"	v
curFunction	$C2_LIBDIR/../analyser/module_analyser.c2	/^    FunctionDecl* curFunction; \/\/ set when analysing a function-body$/;"	v
cur_allocated	$C2_LIBDIR/../ast_utils/context.c2	/^    u32 cur_allocated;$/;"	v
cur_blk	$C2_LIBDIR/../ir/slot_collector.c2	/^    BlockId cur_blk;$/;"	v
cur_block	$C2_LIBDIR/../ir/context.c2	/^    BlockId cur_block;$/;"	v
cur_block	$C2_LIBDIR/../ir/print.c2	/^    const Block* cur_block;$/;"	v
cur_data	$C2_LIBDIR/../ast_utils/context.c2	/^    u8* cur_data;$/;"	v
cur_external	$C2_LIBDIR/../generator/c/c_generator.c2	/^    bool cur_external;  \/\/ whether current component is external$/;"	v
cur_file_idx	$C2_LIBDIR/../generator/c2refs.c2	/^    u32 cur_file_idx;   \/\/ TODO remove$/;"	v
cur_file_idx2	$C2_LIBDIR/../generator/c2refs.c2	/^    u32 cur_file_idx2;$/;"	v
cur_func	$C2_LIBDIR/../ir/context.c2	/^    SymbolId cur_func;$/;"	v
cur_function	$C2_LIBDIR/../generator/c/c_generator.c2	/^    FunctionDecl* cur_function; \/\/ needed for assert$/;"	v
cur_function	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^    FunctionDecl* cur_function;$/;"	v
cur_global	$C2_LIBDIR/../ir/context.c2	/^    SymbolId cur_global;$/;"	v
cur_indent	$C2_LIBDIR/../common/yaml/yaml_parser.c2	/^    i32 cur_indent;$/;"	v
cur_indent	$C2_LIBDIR/../common/yaml/yaml_tokenizer.c2	/^    i32 cur_indent;$/;"	v
cur_info	$C2_LIBDIR/../ir/print.c2	/^    const FunctionInfo* cur_info;$/;"	v
cur_match	$C2_LIBDIR/../generator/radix_tree/radix_tree.c2	/^    u32 cur_match = 0;$/;"	v
cur_mod_idx	$C2_LIBDIR/../analyser/module_sorter.c2	/^    u32 cur_mod_idx;$/;"	v
cur_offset	$C2_LIBDIR/../generator/ir/basic_struct_layouter.c2	/^    u32 cur_offset;$/;"	v
cur_offset	$C2_LIBDIR/../generator/ir/field_struct_layouter.c2	/^    u32 cur_offset = 0;$/;"	v
cur_prefix	$C2_LIBDIR/../plugins/unit_test_plugin.c2	/^    u32 cur_prefix;$/;"	v
cur_size	$C2_LIBDIR/../ast_utils/context.c2	/^    u32 cur_size;$/;"	v
curfile	$C2_LIBDIR/../plugins/deps_generator.c2	/^    const char* curfile;$/;"	v
curfile	$C2_LIBDIR/../plugins/refs_generator.c2	/^    const char* curfile;$/;"	v
current	$C2_LIBDIR/../generator/c/dep_finder.c2	/^    Decl* current;$/;"	v
current_index	$C2_LIBDIR/../analyser/module_analyser_init.c2	/^    u32 current_index = 0;$/;"	v
d1	$C2_LIBDIR/../ir/context.c2	/^    Block* d1 = c.b.tmp_info.blocks.get(dest1);$/;"	v
d2	$C2_LIBDIR/../ir/context.c2	/^    Block* d2 = c.b.tmp_info.blocks.get(dest2);$/;"	v
data	$C2_LIBDIR/../analyser/label_vector.c2	/^    Label* data;$/;"	v
data	$C2_LIBDIR/../analyser/name_vector.c2	/^    u32* data;$/;"	v
data	$C2_LIBDIR/../analyser/struct_func_list.c2	/^    Info* data;$/;"	v
data	$C2_LIBDIR/../ast_utils/context.c2	/^    u8[0] data;  \/\/ tail allocated$/;"	v
data	$C2_LIBDIR/../ast_utils/string_buffer.c2	/^        void* data = realloc(buf.data_, buf.size_ + 1);$/;"	v
data	$C2_LIBDIR/../ast_utils/string_pool.c2	/^    char* data;$/;"	v
data	$C2_LIBDIR/../common/file/reader.c2	/^    void* data = file.contents;$/;"	v
data	$C2_LIBDIR/../common/index_list.c2	/^    u32* data;$/;"	v
data	$C2_LIBDIR/../common/source_mgr.c2	/^    char* data;$/;"	v
data	$C2_LIBDIR/../common/yaml/yaml_iterator.c2	/^    const void* data;$/;"	v
data	$C2_LIBDIR/../common/yaml/yaml_parser.c2	/^    Data data;$/;"	v
data	$C2_LIBDIR/../common/yaml/yaml_tokenizer.c2	/^    Data* data;$/;"	v
data	$C2_LIBDIR/../compiler/c2recipe_parser.c2	/^    const char* data = sm.get_content(file_id);$/;"	v
data	$C2_LIBDIR/../compiler/c2recipe_yaml.c2	/^    const char* data = r.sm.get_content(file_id);$/;"	v
data	$C2_LIBDIR/../compiler/manifest.c2	/^    const char* data = sm.get_content(file_id);$/;"	v
data	$C2_LIBDIR/../generator/c2_trace.c2	/^    c2_trace_t* data = c2_trace_data;$/;"	v
data	$C2_LIBDIR/../generator/c2refs.c2	/^    Link[0] data;$/;"	v
data	$C2_LIBDIR/../generator/radix_tree/radix_tree.c2	/^    char[0] data;$/;"	v
data	$C2_LIBDIR/../generator/radix_tree/radix_tree_fs.c2	/^    u8* data;$/;"	v
data	$C2_LIBDIR/../ir/lookup_table.c2	/^    u32* data;$/;"	v
data	$C2_LIBDIR/../parser/expr_list.c2	/^    Expr** data;$/;"	v
data	$C2_LIBDIR/../parser/stmt_list.c2	/^    Stmt** data;$/;"	v
data2	$C2_LIBDIR/../analyser/label_vector.c2	/^    void* data2 = stdlib.malloc(v.capacity * sizeof(Label));$/;"	v
data2	$C2_LIBDIR/../analyser/name_vector.c2	/^    void* data2 = stdlib.malloc(v.capacity * sizeof(u32));$/;"	v
data2	$C2_LIBDIR/../analyser/struct_func_list.c2	/^    Info* data2 = stdlib.malloc(v.capacity * sizeof(Info));$/;"	v
data2	$C2_LIBDIR/../ast_utils/string_buffer.c2	/^    char* data2 = malloc(new_cap);$/;"	v
data2	$C2_LIBDIR/../ast_utils/string_pool.c2	/^    char* data2 = stdlib.malloc(capacity);$/;"	v
data2	$C2_LIBDIR/../common/index_list.c2	/^    u32* data2 = stdlib.malloc(l.capacity * sizeof(u32));$/;"	v
data2	$C2_LIBDIR/../ir/lookup_table.c2	/^    u32* data2 = stdlib.calloc(capacity2, sizeof(u32));$/;"	v
data2	$C2_LIBDIR/../parser/expr_list.c2	/^        Expr** data2 = malloc(l.capacity * sizeof(Expr*));$/;"	v
data2	$C2_LIBDIR/../parser/stmt_list.c2	/^        Stmt** data2 = malloc(l.capacity * sizeof(Stmt*));$/;"	v
data_	$C2_LIBDIR/../ast_utils/string_buffer.c2	/^    char* data_;$/;"	v
data_capacity	$C2_LIBDIR/../ast_utils/string_pool.c2	/^    u32 data_capacity;$/;"	v
data_size	$C2_LIBDIR/../ast_utils/string_pool.c2	/^    u32 data_size;      \/\/ number of bytes used$/;"	v
data_size	$C2_LIBDIR/../common/source_mgr.c2	/^    u32 data_size;$/;"	v
dd	$C2_LIBDIR/../analyser/module_analyser_struct.c2	/^        Decl* dd = (Decl*)d;$/;"	v
dd	$C2_LIBDIR/../analyser/unused_checker.c2	/^        Decl* dd = (Decl*)ecd;$/;"	v
dd	$C2_LIBDIR/../generator/ir/ir_generator_member.c2	/^        Decl* dd = std.findMember(d.getNameIdx(), &offset);$/;"	v
dd	$C2_LIBDIR/../parser/ast_builder.c2	/^    return dd;$/;"	v
de	$C2_LIBDIR/../analyser/module_analyser_init.c2	/^    Expr* de = ad.getDesignator();$/;"	v
decimals	$C2_LIBDIR/../ast/value.c2	/^    char* decimals = exp;$/;"	v
decl	$C2_LIBDIR/../analyser/module_analyser.c2	/^    Decl* decl;$/;"	v
decl	$C2_LIBDIR/../analyser/scope.c2	/^    return decl;$/;"	v
decl	$C2_LIBDIR/../analyser_utils/printf_utils.c2	/^        Decl* decl = m.getFullDecl();$/;"	v
decl	$C2_LIBDIR/../ast/alias_type.c2	/^    AliasTypeDecl* decl;$/;"	v
decl	$C2_LIBDIR/../ast/decl_stmt.c2	/^    VarDecl*[0] decl;$/;"	v
decl	$C2_LIBDIR/../ast/enum_type.c2	/^    EnumTypeDecl* decl;$/;"	v
decl	$C2_LIBDIR/../ast/function_type.c2	/^    FunctionDecl* decl;$/;"	v
decl	$C2_LIBDIR/../ast/identifier_expr.c2	/^        Decl* decl;     \/\/ set during analysis$/;"	v
decl	$C2_LIBDIR/../ast/member_expr.c2	/^    Decl* decl;     \/\/ set during analysis$/;"	v
decl	$C2_LIBDIR/../ast/struct_type.c2	/^    StructTypeDecl* decl;$/;"	v
decl	$C2_LIBDIR/../ast/struct_type_decl.c2	/^    Decl* decl;    \/\/ can point to anonymous sub-struct members as well$/;"	v
decl	$C2_LIBDIR/../ast/type_ref.c2	/^    Decl* decl; \/\/ set during analysis, or during parsing for StructMemberType$/;"	v
decl	$C2_LIBDIR/../ast_utils/attr_table.c2	/^    void* decl;$/;"	v
decl	$C2_LIBDIR/../generator/c/c_generator.c2	/^    Decl* decl = nil;$/;"	v
decl	$C2_LIBDIR/../generator/c2i/c2i_generator_decl.c2	/^    Decl* decl = nil;$/;"	v
decl	$C2_LIBDIR/../parser/c2_parser.c2	/^        VarDecl* decl = p.parseParamDecl(is_public, accept_default);$/;"	v
decl2valtype	$C2_LIBDIR/../analyser/module_analyser_member.c2	/^fn ValType decl2valtype(const Decl* d) {$/;"	f
declBits	$C2_LIBDIR/../ast/decl.c2	/^        DeclBits declBits;$/;"	v
declCheckState_names	$C2_LIBDIR/../ast/decl.c2	/^const char*[] declCheckState_names = {$/;"	v
declCount	$C2_LIBDIR/../ast/statistics.c2	/^    u32 declCount = 0;$/;"	v
declKind_names	$C2_LIBDIR/../ast/decl.c2	/^const char*[] declKind_names = {$/;"	v
declStmtBits	$C2_LIBDIR/../ast/stmt.c2	/^        DeclStmtBits declStmtBits;$/;"	v
declTotal	$C2_LIBDIR/../ast/statistics.c2	/^    u32 declTotal = 0;$/;"	v
decls	$C2_LIBDIR/../ast/decl_list.c2	/^    Decl** decls;$/;"	v
decls	$C2_LIBDIR/../ast/enum_type_decl.c2	/^    EnumConstantDecl** decls = c.alloc(size);$/;"	v
decls	$C2_LIBDIR/../ast/function_decl_list.c2	/^    FunctionDecl** decls;$/;"	v
decls	$C2_LIBDIR/../ast/import_decl_list.c2	/^    ImportDecl** decls;$/;"	v
decls	$C2_LIBDIR/../generator/c/c_generator.c2	/^    EnumConstantDecl** decls = etd.getConstants();$/;"	v
decls	$C2_LIBDIR/../parser/c2_parser_stmt.c2	/^    VarDecl*[MaxMultiDecl] decls;$/;"	v
decls	$C2_LIBDIR/../plugins/unit_test_plugin.c2	/^    DeclList decls;$/;"	v
decls2	$C2_LIBDIR/../ast/decl_list.c2	/^            void* decls2 = malloc(capacity2 * sizeof(Decl*));$/;"	v
decls2	$C2_LIBDIR/../ast/function_decl_list.c2	/^        void* decls2 = stdlib.malloc(l.capacity * sizeof(FunctionDecl*));$/;"	v
decls2	$C2_LIBDIR/../ast/import_decl_list.c2	/^        void* decls2 = malloc(l.capacity * sizeof(ImportDecl*));$/;"	v
defaultCase	$C2_LIBDIR/../analyser/module_analyser_switch.c2	/^    SwitchCase* defaultCase = nil;$/;"	v
dep	$C2_LIBDIR/../plugins/deps_generator.c2	/^        Decl* dep = gen.deps[i];$/;"	v
dep_finder	$C2_LIBDIR/../generator/c/c_generator.c2	/^import dep_finder;$/;"	v
dep_finder	$C2_LIBDIR/../generator/c/dep_finder.c2	/^module dep_finder;$/;"	v
dep_idx	$C2_LIBDIR/../common/component.c2	/^    u32 dep_idx = c.auxPool.addStr(dep, true);$/;"	v
depname	$C2_LIBDIR/../compiler/compiler_libs.c2	/^        u32 depname = deps.get_idx(i);$/;"	v
deps	$C2_LIBDIR/../plugins/deps_generator.c2	/^    Decl** deps;$/;"	v
deps_capacity	$C2_LIBDIR/../plugins/deps_generator.c2	/^    u32 deps_capacity;$/;"	v
deps_count	$C2_LIBDIR/../plugins/deps_generator.c2	/^    u32 deps_count;$/;"	v
deps_generator	$C2_LIBDIR/../plugins/deps_generator.c2	/^module deps_generator;$/;"	v
deps_generator	$C2_LIBDIR/../plugins/deps_generator_plugin.c2	/^import deps_generator;$/;"	v
deps_generator_utils	$C2_LIBDIR/../plugins/deps_generator.c2	/^import deps_generator_utils;$/;"	v
deps_generator_utils	$C2_LIBDIR/../plugins/deps_generator_utils.c2	/^module deps_generator_utils;$/;"	v
depth	$C2_LIBDIR/../ast/ast_evaluator.c2	/^    u32 depth;$/;"	v
depth	$C2_LIBDIR/../parser/c2_parser.c2	/^    u32 depth = 0;$/;"	v
depth	$C2_LIBDIR/../parser/c2_parser_stmt.c2	/^    u32 depth = 1;$/;"	v
desig	$C2_LIBDIR/../analyser/module_analyser_init.c2	/^            Expr* desig = ad.getDesignator();$/;"	v
desig	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^                const Expr* desig = ad.getDesignator();$/;"	v
designator	$C2_LIBDIR/../ast/array_designated_init_expr.c2	/^    Expr* designator;$/;"	v
designator	$C2_LIBDIR/../parser/ast_builder.c2	/^                                                 Expr* designator,$/;"	v
designator	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    Expr* designator = p.parseAssignmentExpression();$/;"	v
dest	$C2_LIBDIR/../analyser/module_analyser.c2	/^    Module* dest = id.getDest();$/;"	v
dest	$C2_LIBDIR/../ast/enum_type_decl.c2	/^    FunctionDecl** dest = c.alloc(size);$/;"	v
dest	$C2_LIBDIR/../ast/explicit_cast_expr.c2	/^    TypeRef dest;    \/\/ note: variable length!$/;"	v
dest	$C2_LIBDIR/../ast/import_decl.c2	/^    Module* dest;$/;"	v
dest	$C2_LIBDIR/../ast/struct_type_decl.c2	/^    FunctionDecl** dest = c.alloc(size);$/;"	v
dest	$C2_LIBDIR/../ast/type_ref.c2	/^        u32 dest;       \/\/ index into TypePool. only used by user type, but must be 8-byte ali/;"	v
dest	$C2_LIBDIR/../ast/value.c2	/^    return dest;$/;"	v
dest	$C2_LIBDIR/../ast_utils/string_pool.c2	/^    char* dest = p.data + idx;$/;"	v
dest	$C2_LIBDIR/../common/process_utils.c2	/^            return dest;$/;"	v
dest	$C2_LIBDIR/../generator/c/c_generator_call.c2	/^    Decl* dest;$/;"	v
dest	$C2_LIBDIR/../generator/c2refs.c2	/^    u32 dest;$/;"	v
dest	$C2_LIBDIR/../generator/ir/ir_generator_binop.c2	/^    dest = c.addBinaryInstr(InstrKind.Or, dest, src);$/;"	v
dest	$C2_LIBDIR/../ir/context.c2	/^            Block* dest = &blocks[dest_id];$/;"	v
dest	$C2_LIBDIR/../ir/inserter.c2	/^    u32 dest;   \/\/ original dest$/;"	v
dest	$C2_LIBDIR/../ir/print.c2	/^        Block* dest = ph.blocks.get(join_blk);$/;"	v
dest	$C2_LIBDIR/../ir/register_alloc.c2	/^        u32 dest = b.dests[0];$/;"	v
dest	$C2_LIBDIR/../ir/rev_list.c2	/^        u32 dest = i;$/;"	v
dest	$C2_LIBDIR/../ir/rpo.c2	/^            Block* dest = &blocks[dest_id];$/;"	v
dest	$C2_LIBDIR/../ir/switch.c2	/^            Block* dest = fi.blocks.get(cc.block);$/;"	v
dest	$C2_LIBDIR/../plugins/deps_generator.c2	/^    Module* dest = d.getDest();$/;"	v
destRef	$C2_LIBDIR/../ast/call_expr.c2	/^    TypeRef* destRef = cast<TypeRef*>(&e.args[num_args]);$/;"	v
destType	$C2_LIBDIR/../analyser/module_analyser_expr.c2	/^    return destType;$/;"	v
dest_file_idx	$C2_LIBDIR/../generator/c2refs.c2	/^    u16 dest_file_idx;$/;"	v
dest_file_ptr	$C2_LIBDIR/../generator/c2refs.c2	/^    const char* dest_file_ptr;$/;"	v
dest_id	$C2_LIBDIR/../ir/context.c2	/^            BlockId dest_id = b.dests[d];$/;"	v
dest_id	$C2_LIBDIR/../ir/rpo.c2	/^            u32 dest_id = b.dests[d];$/;"	v
dest_idx	$C2_LIBDIR/../analyser/module_sorter.c2	/^    u32 dest_idx = s.mod2idx(dest);$/;"	v
dest_idx	$C2_LIBDIR/../common/component_sorter.c2	/^            u32 dest_idx = find_idx(orig, count, dest_name);$/;"	v
dest_idx	$C2_LIBDIR/../ir/interference_graph.c2	/^    u32 dest_idx = a.map_start + a.max_elems - a.free_slots * cap;$/;"	v
dest_idx	$C2_LIBDIR/../ir/live_map.c2	/^    u32 dest_idx = a.map_start + a.max_elems - a.free_slots * cap;$/;"	v
dest_idx	$C2_LIBDIR/../ir/phi_list.c2	/^    u32 dest_idx;   \/\/ = TempRef value$/;"	v
dest_idx	$C2_LIBDIR/../ir/slot_writes_map.c2	/^    u32 dest_idx = a.map_start + a.max_elems - a.free_slots * cap;$/;"	v
dest_loc	$C2_LIBDIR/../generator/c2refs.c2	/^    u32 dest_loc = r.links.find(src_loc);$/;"	v
dest_name	$C2_LIBDIR/../common/component_sorter.c2	/^            u32 dest_name = deps.get_idx(j);$/;"	v
dest_ref	$C2_LIBDIR/../generator/ir/field_struct_layouter.c2	/^    Ref dest_ref = base_ref;$/;"	v
dest_ref	$C2_LIBDIR/../generator/ir/ir_generator_expr.c2	/^            dest_ref = gen.ctx.addBinaryInstr(InstrKind.Add, dest_ref, offset_ref);$/;"	v
dest_type	$C2_LIBDIR/../ast/explicit_cast_expr.c2	/^    QualType dest_type;  \/\/ set during analysis, can differ from expr.qt$/;"	v
dests	$C2_LIBDIR/../ir/block.c2	/^    BlockId[2] dests;   \/\/ used if not 0$/;"	v
diagnostics	$C2_LIBDIR/../analyser/conversion_checker.c2	/^import diagnostics;$/;"	v
diagnostics	$C2_LIBDIR/../analyser/module_analyser.c2	/^import diagnostics;$/;"	v
diagnostics	$C2_LIBDIR/../analyser/module_sorter.c2	/^import diagnostics;$/;"	v
diagnostics	$C2_LIBDIR/../analyser/scope.c2	/^import diagnostics;$/;"	v
diagnostics	$C2_LIBDIR/../analyser/unused_checker.c2	/^import diagnostics;$/;"	v
diagnostics	$C2_LIBDIR/../analyser_utils/ctv_analyser.c2	/^import diagnostics;$/;"	v
diagnostics	$C2_LIBDIR/../common/attr_handler.c2	/^import diagnostics;$/;"	v
diagnostics	$C2_LIBDIR/../common/component_sorter.c2	/^import diagnostics;$/;"	v
diagnostics	$C2_LIBDIR/../common/diagnostics.c2	/^module diagnostics;$/;"	v
diagnostics	$C2_LIBDIR/../compiler/compiler.c2	/^import diagnostics;$/;"	v
diagnostics	$C2_LIBDIR/../compiler/main.c2	/^import diagnostics;$/;"	v
diagnostics	$C2_LIBDIR/../generator/c/c_generator.c2	/^import diagnostics;$/;"	v
diagnostics	$C2_LIBDIR/../parser/ast_builder.c2	/^import diagnostics;$/;"	v
diagnostics	$C2_LIBDIR/../parser/c2_parser.c2	/^import diagnostics;$/;"	v
diagnostics	$C2_LIBDIR/../plugins/plugin_info.c2	/^import diagnostics;$/;"	v
diags	$C2_LIBDIR/../common/diagnostics.c2	/^    return diags;$/;"	v
diags	$C2_LIBDIR/../compiler/compiler.c2	/^                                diags,$/;"	v
digit	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^        u32 digit = (u32)(*p++ - '0');$/;"	v
dir	$C2_LIBDIR/../common/build_file.c2	/^        const char* dir = iter.getValue();$/;"	v
dir	$C2_LIBDIR/../compiler/compiler_libs.c2	/^    DIR* dir = opendir(dirname);$/;"	v
dir	$C2_LIBDIR/../compiler/plugin_mgr.c2	/^        DIR* dir = opendir(path);$/;"	v
dirname	$C2_LIBDIR/../compiler/compiler_libs.c2	/^    u32 dirname = c.auxPool.addStr(libdir, false);$/;"	v
dirname	$C2_LIBDIR/../plugins/deps_generator.c2	/^        const char* dirname = pool.idx2str(subdir.name_idx);$/;"	v
dirname_idx	$C2_LIBDIR/../common/component.c2	/^    u32 dirname_idx;   \/\/ into auxPool$/;"	v
dirs	$C2_LIBDIR/../common/build_file.c2	/^    dirs = parser.findNode("plugindir");$/;"	v
disable	$C2_LIBDIR/../compiler/c2recipe_parser.c2	/^        bool disable = false;$/;"	v
disable_asserts	$C2_LIBDIR/../common/build_target.c2	/^    bool disable_asserts;$/;"	v
dk	$C2_LIBDIR/../parser/ast_builder.c2	/^    DeclKind dk = d.getKind();$/;"	v
doWIFEXITED	$C2_LIBDIR/../common/process_utils.c2	/^fn bool doWIFEXITED(i32 state) {$/;"	f
doWIFSIGNALED	$C2_LIBDIR/../common/process_utils.c2	/^fn bool doWIFSIGNALED(i32 state) {$/;"	f
doc_started	$C2_LIBDIR/../common/yaml/yaml_parser.c2	/^    bool doc_started;$/;"	v
done	$C2_LIBDIR/../plugins/unit_test2.c2	/^  u32 done;$/;"	v
ds	$C2_LIBDIR/../analyser/module_analyser_stmt.c2	/^    DeclStmt* ds = (DeclStmt*)s;$/;"	v
ds	$C2_LIBDIR/../generator/c/c_generator_stmt.c2	/^        DeclStmt* ds = cast<DeclStmt*>(s);$/;"	v
ds	$C2_LIBDIR/../generator/c2i/c2i_generator_stmt.c2	/^        DeclStmt* ds = cast<DeclStmt*>(s);$/;"	v
ds	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^        const DeclStmt* ds = cast<DeclStmt*>(s);$/;"	v
ds	$C2_LIBDIR/../generator/ir/ir_generator_stmt.c2	/^        const DeclStmt* ds = cast<DeclStmt*>(s);$/;"	v
dsm_sorter	$C2_LIBDIR/../analyser/module_sorter.c2	/^import dsm_sorter;$/;"	v
dsm_sorter	$C2_LIBDIR/../common/component_sorter.c2	/^import dsm_sorter;$/;"	v
dsm_sorter	$C2_LIBDIR/../common/dsm_sorter.c2	/^module dsm_sorter;$/;"	v
dst	$C2_LIBDIR/../ast/function_decl.c2	/^    VarDecl** dst = fd2.rtype.getPointerAfter();$/;"	v
dst	$C2_LIBDIR/../ast/switch_case.c2	/^    return dst;$/;"	v
dst_stmts	$C2_LIBDIR/../ast/switch_case.c2	/^    Stmt** dst_stmts = s.getStmts();$/;"	v
dump_function	$C2_LIBDIR/../ir/print.c2	/^fn void dump_function(const FunctionInfo* info, const char* name) @(unused) {$/;"	f
dump_function_info	$C2_LIBDIR/../ir/print.c2	/^fn void dump_function_info(string_buffer.Buf* out, const FunctionInfo* info) @(unused) {$/;"	f
dump_tokens	$C2_LIBDIR/../compiler/compiler.c2	/^    u32 dump_tokens = 1;$/;"	v
duplicate	$C2_LIBDIR/../analyser/module_analyser_init.c2	/^        SrcLoc duplicate = checker.find((u32)current_index);$/;"	v
duplicate	$C2_LIBDIR/../analyser/module_analyser_switch.c2	/^        SrcLoc duplicate = checker.find(index);$/;"	v
dups	$C2_LIBDIR/../parser/c2_parser.c2	/^    u32[16] dups;$/;"	v
dvalue	$C2_LIBDIR/../ir/constant.c2	/^        f64 dvalue;$/;"	v
e1	$C2_LIBDIR/../analyser/module_analyser_unaryop.c2	/^        UnaryOperator* e1 = (UnaryOperator*)e;$/;"	v
e1	$C2_LIBDIR/../parser/c2_parser_switch.c2	/^            Expr* e1 = p.parseExpr();$/;"	v
e2	$C2_LIBDIR/../ast/call_expr.c2	/^    CallExpr* e2 = inst.c.alloc(size);$/;"	v
e2	$C2_LIBDIR/../ast/explicit_cast_expr.c2	/^    ExplicitCastExpr* e2 = inst.c.alloc(size);$/;"	v
e2	$C2_LIBDIR/../ast/init_list_expr.c2	/^    InitListExpr* e2 = inst.c.alloc(size);$/;"	v
e2	$C2_LIBDIR/../ast/member_expr.c2	/^    MemberExpr* e2 = inst.c.alloc(size);$/;"	v
e2	$C2_LIBDIR/../ast/type_expr.c2	/^    TypeExpr* e2 = inst.c.alloc(size);$/;"	v
e_ptr	$C2_LIBDIR/../parser/ast_builder.c2	/^                                          Expr** e_ptr,$/;"	v
ec	$C2_LIBDIR/../generator/ast_visitor_expr.c2	/^        ExplicitCastExpr* ec = cast<ExplicitCastExpr*>(e);$/;"	v
ec	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^        const ExplicitCastExpr* ec = cast<ExplicitCastExpr*>(e);$/;"	v
ec	$C2_LIBDIR/../generator/ir/ir_generator_expr.c2	/^        ExplicitCastExpr* ec = cast<ExplicitCastExpr*>(e);$/;"	v
ecd	$C2_LIBDIR/../analyser/module_analyser_init.c2	/^        EnumConstantDecl* ecd = etd.findConstant(ie.getNameIdx());$/;"	v
ecd	$C2_LIBDIR/../analyser/module_analyser_member.c2	/^                    EnumConstantDecl* ecd;$/;"	v
ecd	$C2_LIBDIR/../analyser/module_analyser_switch.c2	/^    EnumConstantDecl* ecd = etd.findConstant(*name_idxp);$/;"	v
ecd	$C2_LIBDIR/../analyser/module_analyser_type.c2	/^        Decl* ecd = (Decl*)c;$/;"	v
ecd	$C2_LIBDIR/../analyser/unused_checker.c2	/^        EnumConstantDecl* ecd = constants[i];$/;"	v
ecd	$C2_LIBDIR/../analyser_utils/ctv_analyser.c2	/^        const EnumConstantDecl* ecd = (EnumConstantDecl*)d;$/;"	v
ecd	$C2_LIBDIR/../ast/ast_evaluator.c2	/^        const EnumConstantDecl* ecd = cast<EnumConstantDecl*>(d);$/;"	v
ecd	$C2_LIBDIR/../ast/enum_type_decl.c2	/^        EnumConstantDecl* ecd = constants[i];$/;"	v
ecd	$C2_LIBDIR/../generator/ast_visitor.c2	/^        const EnumConstantDecl* ecd = cast<EnumConstantDecl*>(d);$/;"	v
ecd	$C2_LIBDIR/../generator/c/c_generator.c2	/^        EnumConstantDecl* ecd = decls[i];$/;"	v
ecd	$C2_LIBDIR/../generator/c/c_generator_pure_call.c2	/^        const EnumConstantDecl* ecd = cast<EnumConstantDecl*>(d);$/;"	v
ecd	$C2_LIBDIR/../generator/c2i/c2i_generator_decl.c2	/^        EnumConstantDecl* ecd = constants[i];$/;"	v
ecd	$C2_LIBDIR/../plugins/deps_generator.c2	/^            Decl* ecd = cast<Decl*>(constants[i]);$/;"	v
ecd	$C2_LIBDIR/../plugins/refs_generator.c2	/^            Decl* ecd = cast<Decl*>(constants[i]);$/;"	v
ed	$C2_LIBDIR/../ast/decl.c2	/^        Decl* ed = (Decl*)etd;$/;"	v
ed	$C2_LIBDIR/../ast/enum_type_decl.c2	/^        Decl* ed = (Decl*)ecd;$/;"	v
ef	$C2_LIBDIR/../analyser/module_analyser_member.c2	/^                    Decl* ef = etd.findFunction(name_idx);$/;"	v
ef	$C2_LIBDIR/../ast/enum_type_decl.c2	/^        Decl* ef = (Decl*)d.enum_functions[i];$/;"	v
elem	$C2_LIBDIR/../analyser/module_analyser_expr.c2	/^    QualType elem = a.getElemType();$/;"	v
elem	$C2_LIBDIR/../analyser/module_analyser_init.c2	/^                QualType elem = at.getElemType();$/;"	v
elem	$C2_LIBDIR/../ast/array_type.c2	/^    QualType elem;$/;"	v
elem	$C2_LIBDIR/../ast/qualtype.c2	/^    QualType elem = at.getElemType();$/;"	v
elem	$C2_LIBDIR/../ast/type.c2	/^        QualType elem = at.getElemType();$/;"	v
elem	$C2_LIBDIR/../parser/ast_builder.c2	/^                                          QualType elem,$/;"	v
elem_size	$C2_LIBDIR/../generator/ir/array_init_sorter.c2	/^    u32 elem_size;$/;"	v
elem_size	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^    u32 elem_size = et.getSize(false);$/;"	v
elem_size	$C2_LIBDIR/../generator/ir/ir_generator_expr.c2	/^        const u32 elem_size = var.ir_type.size();$/;"	v
else2	$C2_LIBDIR/../ast/if_stmt.c2	/^    Stmt* else2 = nil;$/;"	v
elseStmt	$C2_LIBDIR/../generator/c/c_generator_stmt.c2	/^        Stmt* elseStmt = i.getElse();$/;"	v
elseStmt	$C2_LIBDIR/../generator/c2i/c2i_generator_stmt.c2	/^        Stmt* elseStmt = i.getElse();$/;"	v
else_	$C2_LIBDIR/../analyser/module_analyser_stmt.c2	/^    Stmt* else_ = i.getElse();$/;"	v
else_blk	$C2_LIBDIR/../generator/ir/ir_generator_expr.c2	/^    BlockId else_blk = c.createBlock(BlockKind.CondFalse);$/;"	v
else_blk	$C2_LIBDIR/../generator/ir/ir_generator_stmt.c2	/^    BlockId else_blk = 0;$/;"	v
else_stmt	$C2_LIBDIR/../ast/if_stmt.c2	/^    Stmt*[0] else_stmt; \/\/ tail-allocated$/;"	v
else_stmt	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^        Stmt* else_stmt = if_stmt.getElse();$/;"	v
else_stmt	$C2_LIBDIR/../generator/ir/ir_generator_stmt.c2	/^    const Stmt* else_stmt = if_stmt.getElse();$/;"	v
else_stmt	$C2_LIBDIR/../parser/c2_parser_stmt.c2	/^    Stmt* else_stmt = nil;$/;"	v
emitAsDefine	$C2_LIBDIR/../generator/c/c_generator.c2	/^fn bool emitAsDefine(const VarDecl* vd) {$/;"	f
emitAsmPart	$C2_LIBDIR/../generator/c/c_generator_stmt.c2	/^fn void emitAsmPart(string_buffer.Buf* out, bool multi_line, u32 indent) {$/;"	f
emitAsmPart	$C2_LIBDIR/../generator/c2i/c2i_generator_stmt.c2	/^fn void emitAsmPart(string_buffer.Buf* out, bool multi_line, u32 indent) {$/;"	f
emitDotOrArrow	$C2_LIBDIR/../generator/c/c_generator_expr.c2	/^fn void emitDotOrArrow(string_buffer.Buf* out, QualType qt) {$/;"	f
emitNumberFormat	$C2_LIBDIR/../generator/c/c_generator_expr.c2	/^fn void emitNumberFormat(BuiltinKind kind, char letter, string_buffer.Buf* out) {$/;"	f
emit_header	$C2_LIBDIR/../generator/c/c_generator.c2	/^    bool emit_header = gen.fast_build && d.isPublic();$/;"	v
empty_block	$C2_LIBDIR/../ir/context.c2	/^fn bool empty_block(const Block* b, const InstrList* instructions) {$/;"	f
enable_asserts	$C2_LIBDIR/../generator/c/c_generator.c2	/^    bool enable_asserts;$/;"	v
enable_asserts	$C2_LIBDIR/../generator/c/c_generator_special.c2	/^                                 bool enable_asserts,$/;"	v
enable_asserts	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^    bool enable_asserts;$/;"	v
end	$C2_LIBDIR/../ast_utils/src_loc.c2	/^    SrcLoc end;$/;"	v
end	$C2_LIBDIR/../ast_utils/string_buffer.c2	/^    const char* end = p + len;$/;"	v
end	$C2_LIBDIR/../ast_utils/string_pool.c2	/^    const char* end = p.data + p.data_size;$/;"	v
end	$C2_LIBDIR/../common/quicksort.c2	/^    u8* end = begin + count * item_size;$/;"	v
end	$C2_LIBDIR/../compiler/c2recipe_parser.c2	/^    const char* end = p.cur;$/;"	v
end	$C2_LIBDIR/../ir/slot_collector.c2	/^            u32 end = bi.rd_start + bi.rd_count;$/;"	v
end	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^    const char* end = t.cur + 1;$/;"	v
endLoc	$C2_LIBDIR/../ast/call_expr.c2	/^    SrcLoc endLoc;$/;"	v
endLoc	$C2_LIBDIR/../ast/init_list_expr.c2	/^    SrcLoc endLoc;$/;"	v
endLoc	$C2_LIBDIR/../parser/ast_builder.c2	/^                                      SrcLoc endLoc,$/;"	v
endLoc	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    SrcLoc endLoc = p.tok.loc + 1;$/;"	v
endLoc	$C2_LIBDIR/../parser/c2_parser_stmt.c2	/^    SrcLoc endLoc = p.tok.loc + 1;$/;"	v
end_col	$C2_LIBDIR/../common/diagnostics.c2	/^        u32 end_col = loc_col + 1;      \/\/ column number where to stop the cursor$/;"	v
end_target	$C2_LIBDIR/../compiler/compiler.c2	/^    PluginFn end_target;          \/\/ target done$/;"	v
entries	$C2_LIBDIR/../analyser/incr_array_list.c2	/^    Info* entries;$/;"	v
entries	$C2_LIBDIR/../analyser/init_checker.c2	/^    InitEntry* entries;$/;"	v
entries	$C2_LIBDIR/../ast_utils/string_pool.c2	/^    HashEntry* entries; \/\/ contain hash table followed by collision lists$/;"	v
entries	$C2_LIBDIR/../common/attr_handler.c2	/^    Entry* entries;$/;"	v
entries	$C2_LIBDIR/../generator/ir/array_init_sorter.c2	/^    InitEntry* entries;$/;"	v
entries2	$C2_LIBDIR/../analyser/incr_array_list.c2	/^    Info* entries2 = stdlib.malloc(v.capacity * sizeof(Info));$/;"	v
entries2	$C2_LIBDIR/../common/attr_handler.c2	/^        Entry* entries2 = stdlib.malloc(h.capacity * sizeof(Entry));$/;"	v
entry	$C2_LIBDIR/../analyser/init_checker.c2	/^    InitEntry* entry = &c.entries[c.count];$/;"	v
entry	$C2_LIBDIR/../generator/ir/array_init_sorter.c2	/^    InitEntry entry = { .index= index, .expr = e }$/;"	v
entry_capacity	$C2_LIBDIR/../ast_utils/string_pool.c2	/^    u32 entry_capacity;$/;"	v
entry_size	$C2_LIBDIR/../ast_utils/string_pool.c2	/^    u32 entry_size;     \/\/ index of the first available entry after hash table$/;"	v
enumConstantDeclBits	$C2_LIBDIR/../ast/decl.c2	/^        EnumConstantDeclBits enumConstantDeclBits;$/;"	v
enumTypeDeclBits	$C2_LIBDIR/../ast/decl.c2	/^        EnumTypeDeclBits enumTypeDeclBits;$/;"	v
enum_functions	$C2_LIBDIR/../ast/enum_type_decl.c2	/^    FunctionDecl** enum_functions;$/;"	v
eptr	$C2_LIBDIR/../analyser/module_analyser_builtin.c2	/^    Expr* eptr = b.getToContainerPointer();$/;"	v
equals	$C2_LIBDIR/../compiler/c2recipe_parser.c2	/^fn bool equals(const char* str, const char* expect, u32 len) {$/;"	f
err	$C2_LIBDIR/../generator/c2refs.c2	/^    i32 err = stat(filename, &statbuf);$/;"	v
errno	$C2_LIBDIR/../common/file/file_utils.c2	/^    errno = ENAMETOOLONG;$/;"	v
error	$C2_LIBDIR/../analyser/conversion_checker.c2	/^     6 error,$/;"	v
error	$C2_LIBDIR/../analyser/module_analyser.c2	/^    bool error = false;$/;"	v
error	$C2_LIBDIR/../analyser/module_analyser_function.c2	/^            bool error = ma.scope.add(p);$/;"	v
error	$C2_LIBDIR/../common/file/file_utils.c2	/^    i32 error;$/;"	v
error	$C2_LIBDIR/../common/process_utils.c2	/^        char[256] error;$/;"	v
error	$C2_LIBDIR/../common/utils.c2	/^    i32 error = stat(constants.buildfile_name, &buf);$/;"	v
error_buffer	$C2_LIBDIR/../plugins/unit_test2.c2	/^char[4096] error_buffer;$/;"	v
error_msg	$C2_LIBDIR/../ast/value.c2	/^        const char* error_msg;$/;"	v
error_msg	$C2_LIBDIR/../common/yaml/yaml_tokenizer.c2	/^    char* error_msg;$/;"	v
error_msg	$C2_LIBDIR/../compiler/plugin_mgr.c2	/^    char[256] error_msg;$/;"	v
error_msg	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^    char[256] error_msg;$/;"	v
error_msg	$C2_LIBDIR/../parser/token.c2	/^        const char* error_msg;  \/\/ ERROR$/;"	v
error_msg	$C2_LIBDIR/../plugins/unit_test2.c2	/^char* error_msg;$/;"	v
error_pipe	$C2_LIBDIR/../common/process_utils.c2	/^    i32[2] error_pipe;  \/\/ pipe for errors from the child process$/;"	v
error_size	$C2_LIBDIR/../plugins/unit_test2.c2	/^u32 error_size;$/;"	v
esc_len	$C2_LIBDIR/../ast_utils/string_buffer.c2	/^                u32 esc_len = 4;$/;"	v
esc_len	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^        u32 esc_len = t.lex_escaped_char(result, "character constant");$/;"	v
et	$C2_LIBDIR/../analyser/conversion_checker.c2	/^        const EnumType* et = (EnumType*)rcanon;$/;"	v
et	$C2_LIBDIR/../analyser/conversion_checker_expr.c2	/^        EnumType* et = qt.getEnumType();$/;"	v
et	$C2_LIBDIR/../analyser/module_analyser_binop.c2	/^        EnumType* et = rcanon.getEnum();$/;"	v
et	$C2_LIBDIR/../analyser/module_analyser_builtin.c2	/^    const EnumType* et = qt.getEnumTypeOrNil();$/;"	v
et	$C2_LIBDIR/../analyser/module_analyser_call.c2	/^            EnumType* et = qt.getEnumType();$/;"	v
et	$C2_LIBDIR/../analyser/module_analyser_init.c2	/^    QualType et = at.getElemType();$/;"	v
et	$C2_LIBDIR/../analyser/module_analyser_member.c2	/^                EnumType* et = (EnumType*)t;$/;"	v
et	$C2_LIBDIR/../analyser/module_analyser_switch.c2	/^        EnumType* et = ct.getEnumTypeOrNil();$/;"	v
et	$C2_LIBDIR/../analyser/size_analyser.c2	/^        EnumType* et = (EnumType*)t;$/;"	v
et	$C2_LIBDIR/../ast/decl.c2	/^        EnumType* et = qt.getEnumType();$/;"	v
et	$C2_LIBDIR/../ast/qualtype.c2	/^        EnumType* et = (EnumType*)t;$/;"	v
et	$C2_LIBDIR/../ast/utils.c2	/^        EnumType* et = (EnumType*)t;$/;"	v
et	$C2_LIBDIR/../generator/c/c_generator.c2	/^        QualType et = at.getElemType();$/;"	v
et	$C2_LIBDIR/../generator/c/c_generator_expr.c2	/^            EnumType* et = qt.getEnumType();$/;"	v
et	$C2_LIBDIR/../generator/c2i/c2i_generator_decl.c2	/^        EnumType* et = cast<EnumType*>(qt.getType());$/;"	v
et	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^    QualType et = at.getElemType();$/;"	v
etd	$C2_LIBDIR/../analyser/conversion_checker.c2	/^        const EnumTypeDecl* etd = et.getDecl();$/;"	v
etd	$C2_LIBDIR/../analyser/module_analyser.c2	/^        EnumTypeDecl* etd = (EnumTypeDecl*)d;$/;"	v
etd	$C2_LIBDIR/../analyser/module_analyser_binop.c2	/^        EnumTypeDecl* etd = et.getDecl();$/;"	v
etd	$C2_LIBDIR/../analyser/module_analyser_builtin.c2	/^    EnumTypeDecl* etd = et.getDecl();$/;"	v
etd	$C2_LIBDIR/../analyser/module_analyser_init.c2	/^        EnumTypeDecl* etd = et.getDecl();$/;"	v
etd	$C2_LIBDIR/../analyser/module_analyser_member.c2	/^                EnumTypeDecl* etd = et.getDecl();$/;"	v
etd	$C2_LIBDIR/../analyser/module_analyser_switch.c2	/^    EnumTypeDecl* etd = nil;$/;"	v
etd	$C2_LIBDIR/../analyser/size_analyser.c2	/^        EnumTypeDecl* etd = et.getDecl();$/;"	v
etd	$C2_LIBDIR/../ast/decl.c2	/^        EnumTypeDecl* etd = et.getDecl();$/;"	v
etd	$C2_LIBDIR/../ast/type.c2	/^        const EnumTypeDecl* etd = e.getDecl();$/;"	v
etd	$C2_LIBDIR/../generator/c/c_generator.c2	/^    EnumTypeDecl* etd = cast<EnumTypeDecl*>(d);$/;"	v
etd	$C2_LIBDIR/../generator/c2i/c2i_generator_decl.c2	/^    EnumTypeDecl* etd = cast<EnumTypeDecl*>(d);$/;"	v
etd	$C2_LIBDIR/../plugins/deps_generator.c2	/^        EnumTypeDecl* etd = cast<EnumTypeDecl*>(d);$/;"	v
etd	$C2_LIBDIR/../plugins/refs_generator.c2	/^        EnumTypeDecl* etd = cast<EnumTypeDecl*>(d);$/;"	v
etype	$C2_LIBDIR/../ast/enum_type_decl.c2	/^    EnumType* etype = EnumType.create(c, d);$/;"	v
eval	$C2_LIBDIR/../ast/ast_evaluator.c2	/^    Evaluator eval;$/;"	v
eval	$C2_LIBDIR/../generator/c/c_generator_pure_call.c2	/^    Evaluator eval;$/;"	v
exitcode	$C2_LIBDIR/../common/process_utils.c2	/^            char exitcode = getWEXITSTATUS(state);$/;"	v
expand	$C2_LIBDIR/../common/build_file.c2	/^        const char* expand = stdlib.getenv(raw + 1);$/;"	v
expectedType	$C2_LIBDIR/../analyser/module_analyser_call.c2	/^        QualType expectedType = arg0.asDecl().getType();$/;"	v
expected_args	$C2_LIBDIR/../analyser/module_analyser_call.c2	/^    u32 expected_args = func_num_args - num_auto_args - isTypeFuncCall;$/;"	v
explicitCastExprBits	$C2_LIBDIR/../ast/stmt.c2	/^        ExplicitCastExprBits explicitCastExprBits;$/;"	v
expr	$C2_LIBDIR/../ast/member_expr.c2	/^    Expr* expr;     \/\/ for first ref in non-pure mode$/;"	v
expr	$C2_LIBDIR/../ast/var_decl.c2	/^    Expr* expr;$/;"	v
expr	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    Expr* expr = p.parseExpr();$/;"	v
expr2function	$C2_LIBDIR/../ast/ast_evaluator.c2	/^fn FunctionDecl* expr2function(Expr* e) {$/;"	f
expr2function	$C2_LIBDIR/../generator/c/c_generator_pure_call.c2	/^fn FunctionDecl* expr2function(Expr* e) {$/;"	f
exprBase	$C2_LIBDIR/../analyser/module_analyser_member.c2	/^        Expr* exprBase = m.getExprBase();$/;"	v
exprBits	$C2_LIBDIR/../ast/stmt.c2	/^        ExprBits exprBits;$/;"	v
exprCount	$C2_LIBDIR/../ast/statistics.c2	/^    u32 exprCount = 0;$/;"	v
exprKind_names	$C2_LIBDIR/../ast/expr.c2	/^const char*[] exprKind_names = {$/;"	v
exprTotal	$C2_LIBDIR/../ast/statistics.c2	/^    u32 exprTotal = 0;$/;"	v
expr_list	$C2_LIBDIR/../parser/c2_parser_switch.c2	/^import expr_list;$/;"	v
expr_list	$C2_LIBDIR/../parser/expr_list.c2	/^module expr_list;$/;"	v
expr_ptr	$C2_LIBDIR/../analyser/conversion_checker.c2	/^    Expr** expr_ptr;$/;"	v
exprs	$C2_LIBDIR/../analyser/module_analyser_stmt.c2	/^    Expr** exprs = a.getExprs();$/;"	v
exprs	$C2_LIBDIR/../ast/asm_stmt.c2	/^    Expr*[0] exprs;$/;"	v
exprs	$C2_LIBDIR/../ast/expr_list.c2	/^    Expr** exprs;$/;"	v
exprs	$C2_LIBDIR/../generator/ast_visitor.c2	/^        Expr** exprs = a.getExprs();$/;"	v
exprs	$C2_LIBDIR/../generator/ast_visitor_expr.c2	/^        Expr** exprs = ili.getValues();$/;"	v
exprs	$C2_LIBDIR/../generator/c/c_generator_stmt.c2	/^        Expr** exprs = a.getExprs();$/;"	v
exprs	$C2_LIBDIR/../generator/c/dep_finder.c2	/^    Expr** exprs = ile.getValues();$/;"	v
exprs	$C2_LIBDIR/../generator/c2i/c2i_generator_stmt.c2	/^        Expr** exprs = a.getExprs();$/;"	v
exprs	$C2_LIBDIR/../parser/ast_builder.c2	/^                                      exprs,$/;"	v
exprs2	$C2_LIBDIR/../ast/expr_list.c2	/^            void* exprs2 = malloc(capacity2 * sizeof(Expr*));$/;"	v
ext	$C2_LIBDIR/../common/file/file_utils.c2	/^    const char* ext = nil;$/;"	v
ext	$C2_LIBDIR/../compiler/main.c2	/^        const char* ext = file_utils.get_extension(basename);$/;"	v
external	$C2_LIBDIR/../analyser/module_analyser_type.c2	/^    bool external = (ma.mod != d.getModule());$/;"	v
external	$C2_LIBDIR/../analyser/scope.c2	/^    bool external = (s.mod != d.getModule());$/;"	v
extra	$C2_LIBDIR/../ast/explicit_cast_expr.c2	/^    u32 extra = matches ? inst.ref.getExtraSize() : e.dest.getExtraSize();$/;"	v
extra	$C2_LIBDIR/../ast/function_decl.c2	/^    u32 extra = rtype_matches ? inst.ref.getExtraSize() : fd.rtype.getExtraSize();$/;"	v
extra	$C2_LIBDIR/../ast/type_expr.c2	/^    u32 extra = matches ? inst.ref.getExtraSize() : e.typeRef.getExtraSize();$/;"	v
extra	$C2_LIBDIR/../ast/type_ref.c2	/^    u32 extra = numrefs * sizeof(Ref);$/;"	v
extra	$C2_LIBDIR/../ast/var_decl.c2	/^    u32 extra = matches ? inst.ref.getExtraSize() : vd.typeRef.getExtraSize();$/;"	v
extra	$C2_LIBDIR/../ir/phi_list.c2	/^    u32 extra = cache.getCount();$/;"	v
f2	$C2_LIBDIR/../generator/c2refs.c2	/^    return f2;$/;"	v
fa	$C2_LIBDIR/../analyser/module_analyser_call.c2	/^    FormatAnalyser* fa = context;$/;"	v
fabs	$C2_LIBDIR/../ast/value.c2	/^fn f64 fabs(f64 d) {$/;"	f
failed	$C2_LIBDIR/../plugins/unit_test2.c2	/^  u32 failed;$/;"	v
fallthrough	$C2_LIBDIR/../analyser/conversion_checker_expr.c2	/^        fallthrough;$/;"	v
fallthrough	$C2_LIBDIR/../analyser/module_analyser_binop.c2	/^        fallthrough;$/;"	v
fallthrough	$C2_LIBDIR/../ast/ast_evaluator.c2	/^            fallthrough;$/;"	v
fallthrough	$C2_LIBDIR/../ast_utils/string_buffer.c2	/^            fallthrough;$/;"	v
fallthrough	$C2_LIBDIR/../common/yaml/yaml_tokenizer.c2	/^            fallthrough;$/;"	v
fallthrough	$C2_LIBDIR/../generator/c/c_generator_expr.c2	/^        fallthrough;$/;"	v
fallthrough	$C2_LIBDIR/../parser/c2_parser.c2	/^            fallthrough;$/;"	v
fallthrough	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^            fallthrough;$/;"	v
false	$C2_LIBDIR/../analyser/conversion_checker.c2	/^    return false;$/;"	v
false	$C2_LIBDIR/../analyser/module_analyser.c2	/^        return false;$/;"	v
false	$C2_LIBDIR/../analyser/module_analyser_binop.c2	/^    return false;$/;"	v
false	$C2_LIBDIR/../analyser/module_analyser_call.c2	/^        return false;$/;"	v
false	$C2_LIBDIR/../analyser/module_analyser_expr.c2	/^        return false;$/;"	v
false	$C2_LIBDIR/../analyser/module_analyser_init.c2	/^    return false;$/;"	v
false	$C2_LIBDIR/../analyser/module_analyser_switch.c2	/^    return false;$/;"	v
false	$C2_LIBDIR/../analyser/module_analyser_type.c2	/^            return false;$/;"	v
false	$C2_LIBDIR/../analyser/module_analyser_unaryop.c2	/^    return false;$/;"	v
false	$C2_LIBDIR/../analyser/name_vector.c2	/^    return false;$/;"	v
false	$C2_LIBDIR/../analyser/scope.c2	/^    return false;$/;"	v
false	$C2_LIBDIR/../analyser_utils/ctv_analyser.c2	/^        return false;$/;"	v
false	$C2_LIBDIR/../analyser_utils/printf_utils.c2	/^                    return false;$/;"	v
false	$C2_LIBDIR/../ast/decl.c2	/^    return false;$/;"	v
false	$C2_LIBDIR/../ast/expr.c2	/^    return false;$/;"	v
false	$C2_LIBDIR/../ast/qualtype.c2	/^    return false;$/;"	v
false	$C2_LIBDIR/../ast/value.c2	/^    return false;$/;"	v
false	$C2_LIBDIR/../ast_utils/string_buffer.c2	/^        return false;$/;"	v
false	$C2_LIBDIR/../ast_utils/string_pool.c2	/^            return false;$/;"	v
false	$C2_LIBDIR/../common/attr_handler.c2	/^    return false;$/;"	v
false	$C2_LIBDIR/../common/build_target.c2	/^    return false;$/;"	v
false	$C2_LIBDIR/../common/file/file_utils.c2	/^        return false;$/;"	v
false	$C2_LIBDIR/../common/file/reader.c2	/^        return false;$/;"	v
false	$C2_LIBDIR/../common/file/writer.c2	/^        return false;$/;"	v
false	$C2_LIBDIR/../common/library_list.c2	/^    return false;$/;"	v
false	$C2_LIBDIR/../common/module_list.c2	/^    return false;$/;"	v
false	$C2_LIBDIR/../common/string_list.c2	/^    return false;$/;"	v
false	$C2_LIBDIR/../common/target_info.c2	/^        return false;$/;"	v
false	$C2_LIBDIR/../common/utils.c2	/^    return false; \/\/ to satisfy compiler$/;"	v
false	$C2_LIBDIR/../common/yaml/yaml_parser.c2	/^        return false;$/;"	v
false	$C2_LIBDIR/../common/yaml/yaml_tokenizer.c2	/^    return false;$/;"	v
false	$C2_LIBDIR/../compiler/c2recipe_parser.c2	/^    return false;$/;"	v
false	$C2_LIBDIR/../compiler/c2recipe_yaml.c2	/^        return false;$/;"	v
false	$C2_LIBDIR/../compiler/compiler.c2	/^            return false;$/;"	v
false	$C2_LIBDIR/../compiler/compiler_libs.c2	/^    return false;$/;"	v
false	$C2_LIBDIR/../compiler/main.c2	/^            return false;$/;"	v
false	$C2_LIBDIR/../compiler/plugin_mgr.c2	/^    return false;$/;"	v
false	$C2_LIBDIR/../generator/c/c_generator.c2	/^    return false;$/;"	v
false	$C2_LIBDIR/../generator/c2_trace.c2	/^    return false;$/;"	v
false	$C2_LIBDIR/../generator/c2refs.c2	/^        return false;$/;"	v
false	$C2_LIBDIR/../generator/generator_utils.c2	/^    return false;$/;"	v
false	$C2_LIBDIR/../generator/ir/ir_generator_expr.c2	/^        return false;$/;"	v
false	$C2_LIBDIR/../generator/ir/ir_generator_stmt.c2	/^        return false;$/;"	v
false	$C2_LIBDIR/../generator/radix_tree/radix_tree.c2	/^    return false; \/\/ not a value, only an internal node$/;"	v
false	$C2_LIBDIR/../ir/common.c2	/^    return false;$/;"	v
false	$C2_LIBDIR/../ir/context.c2	/^    return false;$/;"	v
false	$C2_LIBDIR/../ir/live_map.c2	/^    return false;$/;"	v
false	$C2_LIBDIR/../ir/phi_list.c2	/^    return false;$/;"	v
false	$C2_LIBDIR/../ir/switch.c2	/^    return false;$/;"	v
false	$C2_LIBDIR/../parser/ast_builder.c2	/^    return false;$/;"	v
false	$C2_LIBDIR/../parser/c2_parser.c2	/^    return false;$/;"	v
false	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    return false;$/;"	v
false	$C2_LIBDIR/../parser/c2_parser_stmt.c2	/^    return false;$/;"	v
false	$C2_LIBDIR/../parser/c2_parser_type.c2	/^                                                               false,$/;"	v
false	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^    return false;$/;"	v
false	$C2_LIBDIR/../plugins/deps_generator_utils.c2	/^        return false;$/;"	v
false	$C2_LIBDIR/../plugins/shell_cmd_plugin.c2	/^        return false;$/;"	v
false	$C2_LIBDIR/../plugins/unit_test_plugin.c2	/^        return false;$/;"	v
false_blk	$C2_LIBDIR/../generator/ir/ir_generator_binop.c2	/^    false_blk = c.getCurBlock();$/;"	v
false_blk	$C2_LIBDIR/../generator/ir/ir_generator_stmt.c2	/^    BlockId false_blk = join_blk;$/;"	v
fast_build	$C2_LIBDIR/../compiler/compiler.c2	/^    bool fast_build;$/;"	v
fast_build	$C2_LIBDIR/../generator/c/c_generator.c2	/^    bool fast_build;$/;"	v
fc	$C2_LIBDIR/../generator/c/c_generator_call.c2	/^                FormatChanger fc = { format_text, &args[call_index], 0, 0, out }$/;"	v
fc	$C2_LIBDIR/../generator/c/c_generator_expr.c2	/^    FormatChanger* fc = context;$/;"	v
fd	$C2_LIBDIR/../analyser/conversion_checker.c2	/^        FunctionDecl* fd = ft.getDecl();$/;"	v
fd	$C2_LIBDIR/../analyser/module_analyser.c2	/^            StructTypeDecl* fd = (StructTypeDecl*)info.decl;$/;"	v
fd	$C2_LIBDIR/../analyser/module_analyser_binop.c2	/^    FunctionDecl* fd = ft.getDecl();$/;"	v
fd	$C2_LIBDIR/../analyser/module_analyser_call.c2	/^    FunctionDecl* fd = ft.getDecl();$/;"	v
fd	$C2_LIBDIR/../analyser/module_analyser_member.c2	/^        FunctionDecl* fd = (FunctionDecl*)d;$/;"	v
fd	$C2_LIBDIR/../analyser/module_analyser_switch.c2	/^        const FunctionDecl* fd = ft.getDecl();$/;"	v
fd	$C2_LIBDIR/../analyser/module_analyser_type.c2	/^    FunctionDecl* fd = ftd.getDecl();$/;"	v
fd	$C2_LIBDIR/../ast/ast_evaluator.c2	/^    FunctionDecl* fd;$/;"	v
fd	$C2_LIBDIR/../ast/decl.c2	/^        const FunctionDecl* fd = (FunctionDecl*)d;$/;"	v
fd	$C2_LIBDIR/../ast/function_decl_list.c2	/^        FunctionDecl* fd = l.decls[i];$/;"	v
fd	$C2_LIBDIR/../ast/instance_table.c2	/^    const FunctionDecl* fd;$/;"	v
fd	$C2_LIBDIR/../ast/symbol_table.c2	/^                Decl* fd = (Decl*)fds[j];$/;"	v
fd	$C2_LIBDIR/../ast/type_ref.c2	/^        const FunctionDecl* fd = (FunctionDecl*)r.refs[0].decl;$/;"	v
fd	$C2_LIBDIR/../common/file/reader.c2	/^    i32 fd = open(file.path, O_RDONLY | O_BINARY);$/;"	v
fd	$C2_LIBDIR/../common/file/writer.c2	/^    i32 fd = open(file.path, O_CREAT | O_WRONLY | O_TRUNC | O_BINARY, 0660);$/;"	v
fd	$C2_LIBDIR/../generator/c/c_generator.c2	/^    FunctionDecl* fd = ftd.getDecl();$/;"	v
fd	$C2_LIBDIR/../generator/c/c_generator_call.c2	/^    FunctionDecl* fd = get_function(dest);$/;"	v
fd	$C2_LIBDIR/../generator/c/c_generator_pure_call.c2	/^    FunctionDecl* fd = expr2function(c.getFunc());$/;"	v
fd	$C2_LIBDIR/../generator/c2i/c2i_generator_decl.c2	/^    FunctionDecl* fd = cast<FunctionDecl*>(d);$/;"	v
fd	$C2_LIBDIR/../generator/c2refs.c2	/^    i32 fd = open(filename, O_RDONLY | O_CLOEXEC);$/;"	v
fd	$C2_LIBDIR/../generator/generator_utils.c2	/^        FunctionDecl* fd = cast<FunctionDecl*>(d);$/;"	v
fd	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^                FunctionDecl* fd = cast<FunctionDecl*>(d);$/;"	v
fd	$C2_LIBDIR/../parser/ast_builder.c2	/^    FunctionDecl* fd = FunctionDecl.create(b.context,$/;"	v
fd	$C2_LIBDIR/../parser/c2_parser_type.c2	/^            Decl* fd = p.builder.actOnStructMemberType(&rtype,$/;"	v
fd	$C2_LIBDIR/../plugins/deps_generator.c2	/^        FunctionDecl* fd = cast<FunctionDecl*>(d);$/;"	v
fd	$C2_LIBDIR/../plugins/deps_generator_utils.c2	/^        const FunctionDecl* fd = cast<FunctionDecl*>(d);$/;"	v
fd2	$C2_LIBDIR/../ast/function_decl.c2	/^    return fd2;$/;"	v
fdd	$C2_LIBDIR/../analyser/module_analyser_call.c2	/^        Decl* fdd = (Decl*)fd;$/;"	v
fdi	$C2_LIBDIR/../analyser/module_analyser_init.c2	/^        FieldDesignatedInitExpr* fdi = (FieldDesignatedInitExpr*)value;$/;"	v
fdi	$C2_LIBDIR/../generator/c/c_generator_expr.c2	/^    FieldDesignatedInitExpr* fdi = cast<FieldDesignatedInitExpr*>(e);$/;"	v
fdi	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^            FieldDesignatedInitExpr* fdi = cast<FieldDesignatedInitExpr*>(values[i]);$/;"	v
fdi	$C2_LIBDIR/../generator/ir/ir_generator_expr.c2	/^            FieldDesignatedInitExpr* fdi = cast<FieldDesignatedInitExpr*>(values[i]);$/;"	v
fdl	$C2_LIBDIR/../analyser/conversion_checker.c2	/^    FunctionDecl* fdl = ftl.getDecl();$/;"	v
fdout	$C2_LIBDIR/../common/process_utils.c2	/^        i32 fdout = open(filename, O_TRUNC | O_CREAT | O_WRONLY, 0644);$/;"	v
fdr	$C2_LIBDIR/../analyser/conversion_checker.c2	/^    FunctionDecl* fdr = ftr.getDecl();$/;"	v
fds	$C2_LIBDIR/../ast/symbol_table.c2	/^            const FunctionDecl** fds = std.getStructFunctions();$/;"	v
feature_count	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^    u32 feature_count;$/;"	v
fi	$C2_LIBDIR/../analyser/module_analyser_init.c2	/^    FillInfo fi = { .fii = fii }$/;"	v
fi	$C2_LIBDIR/../ast/instance_table.c2	/^    const TemplateFunction* fi = t.findFunc(fd);$/;"	v
fi	$C2_LIBDIR/../generator/ir/field_struct_layouter.c2	/^    const FieldInit* fi = &l.inits[init_idx];$/;"	v
fi	$C2_LIBDIR/../ir/context.c2	/^    FunctionInfo* fi;   \/\/ no ownership$/;"	v
fi	$C2_LIBDIR/../ir/function_info.c2	/^    return fi;$/;"	v
fi	$C2_LIBDIR/../ir/register_alloc.c2	/^    FunctionInfo* fi = t.fi;$/;"	v
fi	$C2_LIBDIR/../ir/ssa.c2	/^    FunctionInfo* fi = t.fi;$/;"	v
fi	$C2_LIBDIR/../ir/switch.c2	/^    FunctionInfo* fi = t.fi;$/;"	v
fi	$C2_LIBDIR/../ir/work_queue.c2	/^    return fi;$/;"	v
field	$C2_LIBDIR/../ast/field_designated_init_expr.c2	/^                                                                  u32 field,$/;"	v
field	$C2_LIBDIR/../parser/ast_builder.c2	/^                                                 u32 field,$/;"	v
field	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    u32 field = p.tok.name_idx;$/;"	v
field_info	$C2_LIBDIR/../ast/struct_type_decl.c2	/^    FieldInitInfo* field_info;  \/\/ set lazily on Field-Designated inits$/;"	v
field_name	$C2_LIBDIR/../analyser/module_analyser_init.c2	/^        u32 field_name = fdi.getField();$/;"	v
field_name	$C2_LIBDIR/../ast/field_designated_init_expr.c2	/^    u32 field_name;$/;"	v
field_width	$C2_LIBDIR/../analyser/module_analyser_struct.c2	/^                u32 field_width = value.as_u32();$/;"	v
fields	$C2_LIBDIR/../ast/struct_type_decl.c2	/^    FieldInitField[0] fields;$/;"	v
fif	$C2_LIBDIR/../analyser/module_analyser_init.c2	/^        const FieldInitField* fif = fii.find(field_name);$/;"	v
fif	$C2_LIBDIR/../ast/field_designated_init_expr.c2	/^    const FieldInitField* fif; \/\/ set during analysis$/;"	v
fif	$C2_LIBDIR/../ast/struct_type_decl.c2	/^        const FieldInitInfo* fif = d.field_info;$/;"	v
fif	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^            const FieldInitField* fif = fdi.getMemberInfo();$/;"	v
fif	$C2_LIBDIR/../generator/ir/ir_generator_expr.c2	/^            const FieldInitField* fif = fdi.getMemberInfo();$/;"	v
fii	$C2_LIBDIR/../analyser/module_analyser_init.c2	/^    return fii;$/;"	v
file	$C2_LIBDIR/../common/source_mgr.c2	/^        u32 file = sm.index[loc \/ FileIndexSize];$/;"	v
file	$C2_LIBDIR/../generator/c2refs.c2	/^    return file;$/;"	v
file_id	$C2_LIBDIR/../common/build_file.c2	/^    i32 file_id = sm.loadFile(filename, 0);$/;"	v
file_id	$C2_LIBDIR/../common/source_mgr.c2	/^    return file_id;$/;"	v
file_id	$C2_LIBDIR/../compiler/compiler.c2	/^    i32 file_id = c.sm.addGenerated(name, data, size);$/;"	v
file_id	$C2_LIBDIR/../compiler/compiler_libs.c2	/^    i32 file_id = c.sm.loadFile(fullname, 0);$/;"	v
file_id	$C2_LIBDIR/../compiler/manifest.c2	/^                     i32 file_id,$/;"	v
file_id	$C2_LIBDIR/../generator/c2refs.c2	/^    u32 file_id = r.files.name2idx(origin.filename);$/;"	v
file_id	$C2_LIBDIR/../parser/c2_parser.c2	/^    i32 file_id;$/;"	v
file_idx	$C2_LIBDIR/../generator/c2refs.c2	/^    u32 file_idx = f.files_count -1;$/;"	v
file_offset	$C2_LIBDIR/../generator/c2refs.c2	/^    u32 file_offset = r.line_lengths.get_offset(file.len_start, origin.line, origin.col);$/;"	v
file_utils	$C2_LIBDIR/../analyser/module_analyser.c2	/^import file_utils;$/;"	v
file_utils	$C2_LIBDIR/../common/file/file_utils.c2	/^module file_utils;$/;"	v
file_utils	$C2_LIBDIR/../common/file/reader.c2	/^module file_utils;$/;"	v
file_utils	$C2_LIBDIR/../common/file/writer.c2	/^module file_utils;$/;"	v
file_utils	$C2_LIBDIR/../common/manifest_writer.c2	/^import file_utils;$/;"	v
file_utils	$C2_LIBDIR/../common/process_utils.c2	/^import file_utils;$/;"	v
file_utils	$C2_LIBDIR/../common/source_mgr.c2	/^import file_utils;$/;"	v
file_utils	$C2_LIBDIR/../common/utils.c2	/^import file_utils;$/;"	v
file_utils	$C2_LIBDIR/../compiler/compiler.c2	/^import file_utils;$/;"	v
file_utils	$C2_LIBDIR/../compiler/compiler_libs.c2	/^import file_utils;$/;"	v
file_utils	$C2_LIBDIR/../compiler/main.c2	/^import file_utils;$/;"	v
file_utils	$C2_LIBDIR/../compiler/plugin_mgr.c2	/^import file_utils;$/;"	v
file_utils	$C2_LIBDIR/../generator/c/c_generator.c2	/^import file_utils;$/;"	v
file_utils	$C2_LIBDIR/../generator/c/c_generator_special.c2	/^import file_utils;$/;"	v
file_utils	$C2_LIBDIR/../generator/c2i/c2i_generator.c2	/^import file_utils;$/;"	v
file_utils	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^import file_utils;$/;"	v
file_utils	$C2_LIBDIR/../plugins/deps_generator.c2	/^import file_utils;$/;"	v
file_utils	$C2_LIBDIR/../plugins/plugin_info.c2	/^import file_utils;$/;"	v
file_utils	$C2_LIBDIR/../plugins/refs_generator.c2	/^import file_utils;$/;"	v
file_utils	$C2_LIBDIR/../plugins/shell_cmd_plugin.c2	/^import file_utils;$/;"	v
filename	$C2_LIBDIR/../analyser/module_analyser.c2	/^        const char* filename = ma.astPool.idx2str(embed.text);$/;"	v
filename	$C2_LIBDIR/../common/build_file.c2	/^    const char* filename;   \/\/ no ownership$/;"	v
filename	$C2_LIBDIR/../common/source_mgr.c2	/^    u32 filename;$/;"	v
filename	$C2_LIBDIR/../compiler/plugin_mgr.c2	/^    const char* filename = entry.d_name;$/;"	v
filename	$C2_LIBDIR/../generator/c/c_generator_special.c2	/^            const char* filename = asm_files.get(i);$/;"	v
filename	$C2_LIBDIR/../generator/c2refs.c2	/^    const char* filename;$/;"	v
filename	$C2_LIBDIR/../parser/ast_builder.c2	/^                                   u32 filename,$/;"	v
filename	$C2_LIBDIR/../plugins/deps_generator.c2	/^        const char* filename = m.getFirstFilename();$/;"	v
filename	$C2_LIBDIR/../plugins/refs_generator.c2	/^        filename = "-";$/;"	v
filename_idx	$C2_LIBDIR/../generator/c/c_generator_trace.c2	/^    u8 filename_idx;$/;"	v
filenames	$C2_LIBDIR/../generator/c/c_generator.c2	/^    StringList filenames;$/;"	v
files	$C2_LIBDIR/../common/build_target.c2	/^    File* files;$/;"	v
files	$C2_LIBDIR/../common/source_mgr.c2	/^    File* files;$/;"	v
files	$C2_LIBDIR/../generator/c2refs.c2	/^    Files* files;$/;"	v
files2	$C2_LIBDIR/../common/build_target.c2	/^        File* files2 = stdlib.malloc(t.max_files * sizeof(File));$/;"	v
files2	$C2_LIBDIR/../common/source_mgr.c2	/^    File* files2 = stdlib.malloc(sizeof(File) * sm.max_files);$/;"	v
files_cap	$C2_LIBDIR/../generator/c2refs.c2	/^    u32 files_cap;$/;"	v
files_count	$C2_LIBDIR/../generator/c2refs.c2	/^    u32 files_count;       \/\/ used when creating$/;"	v
files_started	$C2_LIBDIR/../compiler/c2recipe_parser.c2	/^    bool files_started = false;$/;"	v
fillFieldInfo	$C2_LIBDIR/../analyser/module_analyser_init.c2	/^fn void fillFieldInfo(StructTypeDecl* std, FillInfo* fi, u32 base_offset) {$/;"	f
findArena	$C2_LIBDIR/../ir/interference_graph.c2	/^fn u32 findArena(u16 capacity) {$/;"	f
findArena	$C2_LIBDIR/../ir/live_map.c2	/^fn u32 findArena(u16 capacity) {$/;"	f
findArena	$C2_LIBDIR/../ir/slot_writes_map.c2	/^fn u32 findArena(u16 capacity) {$/;"	f
findMainFunction	$C2_LIBDIR/../analyser/module_analyser.c2	/^fn void findMainFunction(void* arg, FunctionDecl* fd) {$/;"	f
find_bin	$C2_LIBDIR/../common/process_utils.c2	/^fn const char* find_bin(char *dest, usize size, const char* name) {$/;"	f
find_idx	$C2_LIBDIR/../common/component_sorter.c2	/^fn u32 find_idx(Component** comps, u32 count, u32 name) {$/;"	f
first	$C2_LIBDIR/../analyser/scope.c2	/^    u32 first = s.levels[s.lvl].first_index;$/;"	v
first	$C2_LIBDIR/../generator/c/c_generator_stmt.c2	/^        bool first = true;$/;"	v
first	$C2_LIBDIR/../generator/c2i/c2i_generator_stmt.c2	/^        bool first = true;$/;"	v
first	$C2_LIBDIR/../ir/register_alloc.c2	/^    u32 first = b.instr.start;$/;"	v
first_auto_arg	$C2_LIBDIR/../analyser/module_analyser_function.c2	/^    u32 first_auto_arg = 0;$/;"	v
first_index	$C2_LIBDIR/../analyser/scope.c2	/^    u32 first_index;$/;"	v
first_var	$C2_LIBDIR/../ir/interference_graph.c2	/^    u16 first_var;   \/\/ NULL if none$/;"	v
first_var	$C2_LIBDIR/../ir/live_map.c2	/^    u16 first_var;   \/\/ NULL if none$/;"	v
first_var	$C2_LIBDIR/../ir/slot_writes_map.c2	/^    u16 first_var;   \/\/ NULL if none$/;"	v
fixture	$C2_LIBDIR/../plugins/unit_test2.c2	/^  u8[256] fixture;$/;"	v
fixture_size	$C2_LIBDIR/../plugins/unit_test1.c2	/^   u32 fixture_size;$/;"	v
flagBits	$C2_LIBDIR/../ast/function_decl.c2	/^        u32 flagBits;$/;"	v
flagBits	$C2_LIBDIR/../ast/type_ref.c2	/^        u32 flagBits;$/;"	v
flags	$C2_LIBDIR/../analyser/scope.c2	/^    u32 flags;              \/\/ combination of Flags$/;"	v
flags	$C2_LIBDIR/../ast/function_decl.c2	/^        FunctionDeclFlags flags;$/;"	v
flags	$C2_LIBDIR/../ast/type_ref.c2	/^        TypeRefBits flags;$/;"	v
flags	$C2_LIBDIR/../generator/c2refs.c2	/^    i32 flags = MAP_PRIVATE;$/;"	v
floatLiteralBits	$C2_LIBDIR/../ast/stmt.c2	/^        FloatLiteralBits floatLiteralBits;$/;"	v
float_value	$C2_LIBDIR/../parser/token.c2	/^        f64 float_value;   \/\/ FloatLiteral$/;"	v
flow	$C2_LIBDIR/../analyser/module_analyser_function.c2	/^    FlowBits flow = ma.analyseCompoundStmt(body);$/;"	v
flow	$C2_LIBDIR/../analyser/module_analyser_stmt.c2	/^    return flow;$/;"	v
flow	$C2_LIBDIR/../analyser/module_analyser_switch.c2	/^    return flow;$/;"	v
flow2	$C2_LIBDIR/../analyser/module_analyser_stmt.c2	/^    FlowBits flow2 = ma.analyseStmt(w.getBody(), true);$/;"	v
flow2	$C2_LIBDIR/../analyser/module_analyser_switch.c2	/^    FlowBits flow2 = FlowNext;$/;"	v
fn2	$C2_LIBDIR/../analyser/module_analyser_call.c2	/^        Expr* fn2 = call.getFunc();$/;"	v
fn_arg	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^    void* fn_arg;$/;"	v
fn_arg	$C2_LIBDIR/../plugins/plugin_info.c2	/^    void* fn_arg;$/;"	v
for_stmt	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^        const ForStmt* for_stmt = cast<ForStmt*>(s);$/;"	v
force_warnings	$C2_LIBDIR/../compiler/main.c2	/^    bool force_warnings;$/;"	v
format	$C2_LIBDIR/../analyser/module_analyser_call.c2	/^    format = ic.getInner();$/;"	v
format	$C2_LIBDIR/../common/diagnostics.c2	/^                       const char* format,$/;"	v
format	$C2_LIBDIR/../generator/c/c_generator_call.c2	/^                format = ic.getInner();$/;"	v
format	$C2_LIBDIR/../generator/c/c_generator_expr.c2	/^    const char* format;$/;"	v
format_idx	$C2_LIBDIR/../generator/c/c_generator_call.c2	/^    u32 format_idx = call.needFormatChange() ? call.getPrintfFormat() : 1000;$/;"	v
format_loc	$C2_LIBDIR/../analyser/module_analyser_call.c2	/^    SrcLoc format_loc;$/;"	v
format_loc	$C2_LIBDIR/../generator/c/c_generator_call.c2	/^                SrcLoc format_loc;$/;"	v
format_text	$C2_LIBDIR/../analyser/module_analyser_call.c2	/^    const char* format_text = printf_utils.get_format(format, &format_loc);$/;"	v
format_text	$C2_LIBDIR/../analyser_utils/printf_utils.c2	/^    return format_text;$/;"	v
format_text	$C2_LIBDIR/../generator/c/c_generator_call.c2	/^                const char* format_text = printf_utils.get_format(format, &format_loc);$/;"	v
found	$C2_LIBDIR/../analyser/module_analyser.c2	/^        found = ma.prefixes.find(prefix_name_idx, &index);$/;"	v
found	$C2_LIBDIR/../ir/slot_collector.c2	/^            bool found = false;$/;"	v
free_slots	$C2_LIBDIR/../ir/interference_graph.c2	/^    u16 free_slots;$/;"	v
free_slots	$C2_LIBDIR/../ir/live_map.c2	/^    u16 free_slots;$/;"	v
free_slots	$C2_LIBDIR/../ir/slot_writes_map.c2	/^    u16 free_slots;$/;"	v
ft	$C2_LIBDIR/../analyser/conversion_checker.c2	/^        FunctionType* ft = (FunctionType*)rcanon;$/;"	v
ft	$C2_LIBDIR/../analyser/module_analyser_binop.c2	/^    FunctionType* ft = rcanon.getFunctionType();$/;"	v
ft	$C2_LIBDIR/../analyser/module_analyser_call.c2	/^    FunctionType* ft = qt.getFunctionTypeOrNil();$/;"	v
ft	$C2_LIBDIR/../analyser/module_analyser_switch.c2	/^        const FunctionType* ft = qt.getFunctionTypeOrNil();$/;"	v
ft	$C2_LIBDIR/../generator/c/c_generator.c2	/^        FunctionType* ft = cast<FunctionType*>(qt.getType());$/;"	v
ft	$C2_LIBDIR/../generator/c/c_generator_call.c2	/^        FunctionType* ft = qt.getFunctionTypeOrNil();$/;"	v
ft	$C2_LIBDIR/../generator/c2i/c2i_generator_decl.c2	/^        FunctionType* ft = cast<FunctionType*>(qt.getType());$/;"	v
ftd	$C2_LIBDIR/../analyser/module_analyser_type.c2	/^    FunctionTypeDecl* ftd = (FunctionTypeDecl*)d;$/;"	v
ftd	$C2_LIBDIR/../ast/function_type_decl.c2	/^    return ftd;$/;"	v
ftd	$C2_LIBDIR/../generator/ast_visitor.c2	/^        FunctionTypeDecl* ftd = cast<FunctionTypeDecl*>(d);$/;"	v
ftd	$C2_LIBDIR/../generator/c/c_generator.c2	/^    FunctionTypeDecl* ftd = cast<FunctionTypeDecl*>(d);$/;"	v
ftd	$C2_LIBDIR/../generator/c/dep_finder.c2	/^        FunctionTypeDecl* ftd = cast<FunctionTypeDecl*>(d);$/;"	v
ftd	$C2_LIBDIR/../generator/c2i/c2i_generator_decl.c2	/^    const FunctionTypeDecl* ftd = cast<FunctionTypeDecl*>(d);$/;"	v
ftd	$C2_LIBDIR/../parser/ast_builder.c2	/^        FunctionTypeDecl* ftd = (FunctionTypeDecl*)d;$/;"	v
ftd	$C2_LIBDIR/../parser/c2_parser_type.c2	/^    Decl* ftd = p.builder.actOnFunctionTypeDecl(name,$/;"	v
ftl	$C2_LIBDIR/../analyser/conversion_checker.c2	/^    FunctionType* ftl = (FunctionType*)lcanon;$/;"	v
ftr	$C2_LIBDIR/../analyser/conversion_checker.c2	/^    FunctionType* ftr = (FunctionType*)rcanon;$/;"	v
ftype	$C2_LIBDIR/../ast/function_decl.c2	/^    FunctionType* ftype = FunctionType.create(inst.c, fd2);$/;"	v
full	$C2_LIBDIR/../analyser/module_analyser_type.c2	/^    bool full = !ref.isPointer();$/;"	v
fullname	$C2_LIBDIR/../plugins/deps_generator.c2	/^            char[64] fullname;$/;"	v
fullname	$C2_LIBDIR/../plugins/deps_generator_utils.c2	/^            return fullname;$/;"	v
fun	$C2_LIBDIR/../ast/ast_evaluator.c2	/^        Fun fun = { .address = fd.getAddress() }$/;"	v
funDD	$C2_LIBDIR/../ast/ast_evaluator.c2	/^    FunDD funDD;$/;"	v
funII	$C2_LIBDIR/../ast/ast_evaluator.c2	/^    FunII funII;$/;"	v
func	$C2_LIBDIR/../analyser/module_analyser_call.c2	/^    Expr** func = call.getFunc2();$/;"	v
func	$C2_LIBDIR/../ast/call_expr.c2	/^    Expr* func;$/;"	v
func	$C2_LIBDIR/../ast/function_type_decl.c2	/^    FunctionDecl* func;$/;"	v
func	$C2_LIBDIR/../generator/c/c_generator_call.c2	/^        Expr* func = call.getFunc();$/;"	v
func	$C2_LIBDIR/../generator/c2i/c2i_generator_expr.c2	/^    func = ic.getInner();$/;"	v
func	$C2_LIBDIR/../generator/ir/ir_generator_call.c2	/^        Expr* func = call.getFunc();$/;"	v
func	$C2_LIBDIR/../generator/radix_tree/radix_tree.c2	/^    MatchFn func;$/;"	v
func	$C2_LIBDIR/../parser/ast_builder.c2	/^                                      Expr* func,$/;"	v
func	$C2_LIBDIR/../parser/c2_parser_stmt.c2	/^                Expr* func = p.builder.actOnMemberExpr(nil, refs, 2);$/;"	v
func	$C2_LIBDIR/../plugins/unit_test1.c2	/^   TestFn func;$/;"	v
func	$C2_LIBDIR/../plugins/unit_test_plugin.c2	/^            Decl* func = cast<Decl*>(tests[j]);$/;"	v
func_arg_index	$C2_LIBDIR/../analyser/module_analyser_call.c2	/^    u32 func_arg_index = 0;$/;"	v
func_args	$C2_LIBDIR/../analyser/module_analyser_call.c2	/^    VarDecl** func_args = fd.getParams();$/;"	v
func_args	$C2_LIBDIR/../generator/c/c_generator_call.c2	/^    VarDecl** func_args = fd.getParams();$/;"	v
func_index	$C2_LIBDIR/../generator/c/c_generator_call.c2	/^    u32 func_index = 0;$/;"	v
func_loc	$C2_LIBDIR/../parser/c2_parser.c2	/^    SrcLoc func_loc = p.tok.loc;$/;"	v
func_name	$C2_LIBDIR/../parser/c2_parser.c2	/^    u32 func_name = p.tok.name_idx;$/;"	v
func_num_args	$C2_LIBDIR/../analyser/module_analyser_call.c2	/^    u32 func_num_args = fd.getNumParams();$/;"	v
func_num_args	$C2_LIBDIR/../generator/c/c_generator_call.c2	/^    u32 func_num_args = fd.getNumParams();$/;"	v
funcname	$C2_LIBDIR/../generator/c/c_generator_stmt.c2	/^            const char* funcname = gen.cur_function.asDecl().getFullName();$/;"	v
funcname	$C2_LIBDIR/../generator/ir/ir_generator_stmt.c2	/^    const char* funcname = gen.cur_function.asDecl().getFullName();$/;"	v
funcnames	$C2_LIBDIR/../generator/c/c_generator.c2	/^    StringList funcnames;$/;"	v
funcs	$C2_LIBDIR/../ast/instance_table.c2	/^    TemplateFunction* funcs;$/;"	v
funcs2	$C2_LIBDIR/../ast/instance_table.c2	/^    TemplateFunction* funcs2 = stdlib.malloc(capacity * sizeof(TemplateFunction));$/;"	v
function	$C2_LIBDIR/../analyser/module_analyser.c2	/^    FunctionDecl* function; \/\/ only set when analysing function bodies$/;"	v
functionDeclBits	$C2_LIBDIR/../ast/decl.c2	/^        FunctionDeclBits functionDeclBits;$/;"	v
functions	$C2_LIBDIR/../ast/ast.c2	/^    FunctionDeclList functions;$/;"	v
fvalue	$C2_LIBDIR/../ast/value.c2	/^        f64 fvalue;$/;"	v
g_cfg	$C2_LIBDIR/../plugins/unit_test1.c2	/^Config g_cfg;$/;"	v
gen	$C2_LIBDIR/../generator/c/c_generator.c2	/^    Generator* gen = arg;$/;"	v
gen	$C2_LIBDIR/../generator/c2i/c2i_generator.c2	/^    Generator* gen = arg;$/;"	v
gen	$C2_LIBDIR/../generator/ir/basic_struct_layouter.c2	/^    Generator* gen;$/;"	v
gen	$C2_LIBDIR/../generator/ir/field_struct_layouter.c2	/^    Generator* gen;$/;"	v
gen	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^    Generator* gen = arg;$/;"	v
gen	$C2_LIBDIR/../plugins/deps_generator.c2	/^    Generator* gen = arg;$/;"	v
gen	$C2_LIBDIR/../plugins/refs_generator.c2	/^    Generator* gen = arg;$/;"	v
gen3	$C2_LIBDIR/../compiler/compiler.c2	/^        u64 gen3 = utils.now();$/;"	v
gen4	$C2_LIBDIR/../compiler/compiler.c2	/^        u64 gen4 = utils.now();$/;"	v
gen_idx	$C2_LIBDIR/../ast/decl.c2	/^        u32 gen_idx;    \/\/ can be used during generation for VarDecls, since SrcLoc is not use/;"	v
gen_idx	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^    u32 gen_idx = d.getGenIdx();$/;"	v
gen_idx	$C2_LIBDIR/../generator/ir/ir_generator_expr.c2	/^        u32 gen_idx = d.getGenIdx();$/;"	v
generate_module	$C2_LIBDIR/../plugins/git_version_plugin.c2	/^fn void generate_module(void* arg) {$/;"	f
generate_tests	$C2_LIBDIR/../plugins/unit_test_plugin.c2	/^fn void generate_tests(void* arg) {$/;"	f
generate_types	$C2_LIBDIR/../plugins/unit_test_plugin.c2	/^fn void generate_types(Plugin *p) {$/;"	f
generator_utils	$C2_LIBDIR/../compiler/compiler.c2	/^import generator_utils;$/;"	v
generator_utils	$C2_LIBDIR/../generator/generator_utils.c2	/^module generator_utils;$/;"	v
getBinOpWidth	$C2_LIBDIR/../analyser/conversion_checker_expr.c2	/^fn ExprWidth getBinOpWidth(const BinaryOperator* b) {$/;"	f
getCondExpr	$C2_LIBDIR/../analyser/module_analyser_stmt.c2	/^fn Expr* getCondExpr(const Stmt* cond) {$/;"	f
getCondOpWidth	$C2_LIBDIR/../analyser/conversion_checker_expr.c2	/^fn ExprWidth getCondOpWidth(const ConditionalOperator* c) {$/;"	f
getExprWidth	$C2_LIBDIR/../analyser/conversion_checker_expr.c2	/^fn ExprWidth getExprWidth(const Expr* e) {$/;"	f
getInnerExprAddressOf	$C2_LIBDIR/../analyser/module_analyser_unaryop.c2	/^fn IdentifierKind getInnerExprAddressOf(Expr* e) {$/;"	f
getKindStr	$C2_LIBDIR/../common/manifest_writer.c2	/^fn const char* getKindStr(const component.Component* c) {$/;"	f
getMinusType	$C2_LIBDIR/../analyser/module_analyser_unaryop.c2	/^fn QualType getMinusType(QualType qt) {$/;"	f
getPointerFromArray	$C2_LIBDIR/../analyser/module_analyser_expr.c2	/^fn QualType getPointerFromArray(ast_builder.Builder* builder, QualType q) {$/;"	f
getSlotName	$C2_LIBDIR/../ir/context.c2	/^fn u32 getSlotName(u32 slot) {$/;"	f
getSpecifier	$C2_LIBDIR/../analyser_utils/printf_utils.c2	/^fn Specifier getSpecifier(const char* format, u32* len, i32 *pstars, char* c) {$/;"	f
getStringType	$C2_LIBDIR/../ast/utils.c2	/^fn QualType getStringType(u32 len) {$/;"	f
getTypeWidth	$C2_LIBDIR/../analyser/conversion_checker_expr.c2	/^fn ExprWidth getTypeWidth(QualType qt) {$/;"	f
getUnaryOpWidth	$C2_LIBDIR/../analyser/conversion_checker_expr.c2	/^fn ExprWidth getUnaryOpWidth(const UnaryOperator* u) {$/;"	f
getVarDecl	$C2_LIBDIR/../analyser/module_analyser_unaryop.c2	/^fn VarDecl* getVarDecl(const Expr* e) {$/;"	f
getWEXITSTATUS	$C2_LIBDIR/../common/process_utils.c2	/^fn char getWEXITSTATUS(i32 state) {$/;"	f
getYamlInfo	$C2_LIBDIR/../common/build_file.c2	/^fn bool getYamlInfo(yaml.Parser* parser, Info* info) {$/;"	f
getYamlInfo	$C2_LIBDIR/../compiler/manifest.c2	/^fn bool getYamlInfo(yaml.Parser* parser,$/;"	f
get_binaryop_value	$C2_LIBDIR/../analyser_utils/ctv_analyser.c2	/^fn Value get_binaryop_value(const BinaryOperator* e) {$/;"	f
get_checked	$C2_LIBDIR/../common/build_file.c2	/^fn const yaml.Node* get_checked(yaml.Parser* parser, const char* path) {$/;"	f
get_checked	$C2_LIBDIR/../compiler/manifest.c2	/^fn const yaml.Node* get_checked(yaml.Parser* parser, const char* path) {$/;"	f
get_decl_value	$C2_LIBDIR/../analyser_utils/ctv_analyser.c2	/^fn Value get_decl_value(const Decl* d) {$/;"	f
get_function	$C2_LIBDIR/../generator/c/c_generator_call.c2	/^fn FunctionDecl* get_function(Decl* dest) {$/;"	f
get_match	$C2_LIBDIR/../generator/radix_tree/radix_tree.c2	/^fn u32 get_match(const char* s1, const char* s2) {$/;"	f
get_prefix	$C2_LIBDIR/../compiler/c2recipe_yaml.c2	/^fn const char* get_prefix(const char* input, char* output, u32 maxlen) {$/;"	f
get_unaryop_value	$C2_LIBDIR/../analyser_utils/ctv_analyser.c2	/^fn Value get_unaryop_value(const UnaryOperator* e) {$/;"	f
git_version	$C2_LIBDIR/../compiler/main.c2	/^import git_version; \/\/ from plugin$/;"	v
globals	$C2_LIBDIR/../ast/utils.c2	/^Globals* globals;$/;"	v
grow	$C2_LIBDIR/../ast_utils/string_buffer.c2	/^    bool grow;      \/\/ data_ should be reallocated$/;"	v
gs	$C2_LIBDIR/../analyser/module_analyser_stmt.c2	/^    GotoStmt* gs = (GotoStmt*)s;$/;"	v
handle	$C2_LIBDIR/../common/file/file_utils.c2	/^    i32 handle;  \/\/ 0:none, otherwise unix handle +1$/;"	v
handle	$C2_LIBDIR/../compiler/plugin_mgr.c2	/^    void* handle; \/\/ from dlopen$/;"	v
handle_attr	$C2_LIBDIR/../plugins/unit_test_plugin.c2	/^fn bool handle_attr(void* arg, Decl* d, const attr.Attr* a) {$/;"	f
handle_symbol	$C2_LIBDIR/../compiler/plugin_mgr.c2	/^    void* handle_symbol = dlsym(p.handle, "plugin_main_handle");$/;"	v
hasError	$C2_LIBDIR/../compiler/main.c2	/^    return hasError;$/;"	v
has_decls	$C2_LIBDIR/../analyser/module_analyser_switch.c2	/^    bool has_decls = false;$/;"	v
has_default	$C2_LIBDIR/../analyser/module_analyser_function.c2	/^    bool has_default = false;$/;"	v
has_default	$C2_LIBDIR/../parser/c2_parser_switch.c2	/^    bool has_default = false;$/;"	v
has_deps	$C2_LIBDIR/../common/dsm_sorter.c2	/^        bool has_deps = false;$/;"	v
has_effect	$C2_LIBDIR/../ast/expr.c2	/^                  bool has_effect,$/;"	v
has_embed	$C2_LIBDIR/../ast/var_decl.c2	/^                                    bool has_embed,$/;"	v
has_embed	$C2_LIBDIR/../parser/ast_builder.c2	/^                                 has_embed,$/;"	v
has_embed	$C2_LIBDIR/../parser/c2_parser.c2	/^        bool has_embed = p.builder.hasEmbedAttr();$/;"	v
has_error	$C2_LIBDIR/../analyser/module_analyser.c2	/^    bool has_error;$/;"	v
has_error	$C2_LIBDIR/../parser/c2_parser.c2	/^    bool has_error = false;$/;"	v
has_filter	$C2_LIBDIR/../compiler/main.c2	/^    bool has_filter = (c.opts.targets.length() != 0);$/;"	v
has_init	$C2_LIBDIR/../analyser/module_analyser_stmt.c2	/^    bool has_init = false;$/;"	v
has_init_call	$C2_LIBDIR/../analyser/module_analyser_stmt.c2	/^    bool has_init_call = vd.hasInitCall();$/;"	v
has_init_call	$C2_LIBDIR/../parser/c2_parser_stmt.c2	/^        bool has_init_call = false;$/;"	v
has_local	$C2_LIBDIR/../parser/ast_builder.c2	/^                                        bool has_local,$/;"	v
has_local	$C2_LIBDIR/../parser/c2_parser_stmt.c2	/^    bool has_local = false;$/;"	v
has_paren	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^                    bool has_paren = false;$/;"	v
has_prefix	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^    bool has_prefix = !d.isPublic() || (string.strcmp(d.getName(), "main") != 0);$/;"	v
has_printf_format	$C2_LIBDIR/../analyser/module_analyser_call.c2	/^    bool has_printf_format = false;$/;"	v
has_result	$C2_LIBDIR/../generator/ir/ir_generator_call.c2	/^    bool has_result = !qt.isVoid();$/;"	v
has_s2	$C2_LIBDIR/../generator/c/c_generator_stmt.c2	/^        bool has_s2 = false;$/;"	v
has_size	$C2_LIBDIR/../ast/array_type.c2	/^                                        bool has_size,$/;"	v
has_size	$C2_LIBDIR/../parser/ast_builder.c2	/^                                          bool has_size,$/;"	v
hash	$C2_LIBDIR/../ast_utils/string_pool.c2	/^fn u32 hash(const char* text, usize len) {$/;"	f
hash	$C2_LIBDIR/../generator/c/c_generator_trace.c2	/^    u32 hash = HASH_INITIAL;$/;"	v
hash_array	$C2_LIBDIR/../generator/c/c_generator_trace.c2	/^    u32* hash_array;$/;"	v
hash_capacity	$C2_LIBDIR/../generator/c/c_generator_trace.c2	/^    u32 hash_capacity;$/;"	v
hash_count	$C2_LIBDIR/../ast_utils/string_pool.c2	/^    u32 hash_count;$/;"	v
hash_count	$C2_LIBDIR/../generator/c/c_generator_trace.c2	/^    u32 hash_count;$/;"	v
hash_mask	$C2_LIBDIR/../ast_utils/string_pool.c2	/^    u32 hash_mask;$/;"	v
hash_size	$C2_LIBDIR/../ast_utils/string_pool.c2	/^    u32 hash_size = p.hash_mask + 1;$/;"	v
haveDesignators	$C2_LIBDIR/../analyser/module_analyser_init.c2	/^    const bool haveDesignators = values[0].isFieldDesignatedInit();$/;"	v
have_bitfield	$C2_LIBDIR/../generator/ir/field_struct_layouter.c2	/^    bool have_bitfield = false;$/;"	v
have_designators	$C2_LIBDIR/../analyser/module_analyser_init.c2	/^    bool have_designators = false;$/;"	v
head	$C2_LIBDIR/../common/dsm_sorter.c2	/^    u32 head = 0;$/;"	v
head	$C2_LIBDIR/../ir/context.c2	/^    u32 head = 1;   \/\/ insert point$/;"	v
head	$C2_LIBDIR/../ir/interference_graph.c2	/^        Variable* head = &g.variables[r.next];$/;"	v
head	$C2_LIBDIR/../ir/live_map.c2	/^        Variable* head = &g.variables[r.next];$/;"	v
head	$C2_LIBDIR/../ir/slot_writes_map.c2	/^        BlockWrites* head = &m.blocks[r.next];$/;"	v
heap	$C2_LIBDIR/../parser/case_list.c2	/^    SwitchCase** heap;$/;"	v
heap2	$C2_LIBDIR/../parser/case_list.c2	/^        SwitchCase** heap2 = malloc(l.capacity * sizeof(SwitchCase*));$/;"	v
here	$C2_LIBDIR/../analyser/module_analyser_expr.c2	/^        The 2nd case is ok here, but set const explicitly in first case$/;"	v
hex2val	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^fn u8 hex2val(char c) {$/;"	f
hexconv	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^fn u32 hexconv(const char* p, u32 maxn, u32* pc) {$/;"	f
high	$C2_LIBDIR/../analyser_utils/ctv_analyser.c2	/^        Value high = get_value(bo.getLHS());$/;"	v
high	$C2_LIBDIR/../ast/ast_evaluator.c2	/^        Value high = eval.get_value(bo.getLHS());$/;"	v
high	$C2_LIBDIR/../generator/c/c_generator_pure_call.c2	/^        Value high = eval.get_value(bo.getLHS());$/;"	v
i8	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    i8,u8,.      - type$/;"	v
i_count	$C2_LIBDIR/../ir/ssa.c2	/^        u32 i_count = b.instr.count;$/;"	v
i_idx	$C2_LIBDIR/../ir/print.c2	/^        Index i_idx = b.getInstructions();$/;"	v
i_start	$C2_LIBDIR/../ir/ssa.c2	/^        u32 i_start = b.instr.start;$/;"	v
ia_list	$C2_LIBDIR/../analyser/module_analyser.c2	/^import incr_array_list as ia_list;$/;"	v
ic	$C2_LIBDIR/../analyser/conversion_checker.c2	/^        const ImplicitCastExpr* ic = (ImplicitCastExpr*)e;$/;"	v
ic	$C2_LIBDIR/../analyser/module_analyser_call.c2	/^    ImplicitCastExpr* ic = (ImplicitCastExpr*)format;$/;"	v
ic	$C2_LIBDIR/../ast/ast_evaluator.c2	/^        ImplicitCastExpr* ic = cast<ImplicitCastExpr*>(e);$/;"	v
ic	$C2_LIBDIR/../generator/ast_visitor_expr.c2	/^        ImplicitCastExpr* ic = cast<ImplicitCastExpr*>(e);$/;"	v
ic	$C2_LIBDIR/../generator/c/c_generator_call.c2	/^            ImplicitCastExpr* ic = cast<ImplicitCastExpr*>(func);$/;"	v
ic	$C2_LIBDIR/../generator/c/c_generator_pure_call.c2	/^        ImplicitCastExpr* ic = cast<ImplicitCastExpr*>(e);$/;"	v
ic	$C2_LIBDIR/../generator/c/c_generator_stmt.c2	/^                const ImplicitCastExpr* ic = cast<ImplicitCastExpr*>(e);$/;"	v
ic	$C2_LIBDIR/../generator/c2i/c2i_generator_expr.c2	/^    ImplicitCastExpr* ic = cast<ImplicitCastExpr*>(func);$/;"	v
ic	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^        const ImplicitCastExpr* ic = cast<ImplicitCastExpr*>(e);$/;"	v
ic	$C2_LIBDIR/../generator/ir/ir_generator_expr.c2	/^        ImplicitCastExpr* ic = cast<ImplicitCastExpr*>(e);$/;"	v
ic	$C2_LIBDIR/../parser/ast_builder.c2	/^    Expr* ic = (Expr*)ImplicitCastExpr.create(b.context, inner.getLoc(), kind, inner);$/;"	v
id	$C2_LIBDIR/../analyser/module_analyser_stmt.c2	/^    IdentifierExpr* id = (IdentifierExpr*)inner;$/;"	v
id	$C2_LIBDIR/../analyser/module_analyser_switch.c2	/^        IdentifierExpr* id = (IdentifierExpr*)cond;$/;"	v
id	$C2_LIBDIR/../analyser_utils/printf_utils.c2	/^        IdentifierExpr* id = (IdentifierExpr*)format;$/;"	v
id	$C2_LIBDIR/../ast/enum_type_decl.c2	/^        IdentifierExpr* id = constants[i];$/;"	v
id	$C2_LIBDIR/../ast/member_expr.c2	/^            const ImportDecl* id = (ImportDecl*)d;$/;"	v
id	$C2_LIBDIR/../generator/c/c_generator.c2	/^        ImportDecl* id = cast<ImportDecl*>(d);$/;"	v
id	$C2_LIBDIR/../generator/ir/ir_generator_expr.c2	/^        SymbolId id = gen.ctx.addStringLiteral(gen.createStringVar(), s.getText(), s.getSize());$/;"	v
id	$C2_LIBDIR/../ir/context.c2	/^    return id;$/;"	v
id	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^                        id = t.pool.idx2str(result.name_idx);$/;"	v
identifierExprBits	$C2_LIBDIR/../ast/stmt.c2	/^        IdentifierExprBits identifierExprBits;$/;"	v
ids	$C2_LIBDIR/../ir/interference_graph.c2	/^    const u16* ids;$/;"	v
ids	$C2_LIBDIR/../ir/live_map.c2	/^    const u16* ids;$/;"	v
ids	$C2_LIBDIR/../ir/slot_writes_map.c2	/^    SlotWrite* ids;     \/\/ allow changes$/;"	v
idx	$C2_LIBDIR/../analyser/module_analyser_call.c2	/^    u32 idx;$/;"	v
idx	$C2_LIBDIR/../analyser/module_analyser_expr.c2	/^                u64 idx = val.as_u64();$/;"	v
idx	$C2_LIBDIR/../analyser/module_analyser_init.c2	/^    u32 idx;    \/\/ index into fields$/;"	v
idx	$C2_LIBDIR/../ast/array_subscript_expr.c2	/^    Expr* idx;$/;"	v
idx	$C2_LIBDIR/../ast/ast.c2	/^    u32 idx;    \/\/ ast idx$/;"	v
idx	$C2_LIBDIR/../ast/instance_table.c2	/^    u16 idx = f.count;$/;"	v
idx	$C2_LIBDIR/../ast/string_type_pool.c2	/^    u32 idx = p.count;$/;"	v
idx	$C2_LIBDIR/../ast/utils.c2	/^    u32 idx = globals.ast_count;$/;"	v
idx	$C2_LIBDIR/../ast_utils/string_pool.c2	/^    u32 idx = p.data_size;$/;"	v
idx	$C2_LIBDIR/../common/dsm_sorter.c2	/^        u8 idx = ringbuf[head];$/;"	v
idx	$C2_LIBDIR/../common/yaml/yaml_data.c2	/^    u32 idx = cast<u32>(d.text_cur - d.text);$/;"	v
idx	$C2_LIBDIR/../generator/c/c_generator.c2	/^        return idx;$/;"	v
idx	$C2_LIBDIR/../generator/c/c_generator_call.c2	/^        u32 idx = call.getTemplateIdx();$/;"	v
idx	$C2_LIBDIR/../generator/c/c_generator_expr.c2	/^    u32 idx;$/;"	v
idx	$C2_LIBDIR/../generator/c/c_generator_stmt.c2	/^                u32 idx = i + num_outputs;$/;"	v
idx	$C2_LIBDIR/../generator/c2i/c2i_generator_stmt.c2	/^                u32 idx = i + num_outputs;$/;"	v
idx	$C2_LIBDIR/../generator/c2refs.c2	/^    u32 idx = t.count;$/;"	v
idx	$C2_LIBDIR/../generator/ir/array_init_sorter.c2	/^    u32 idx = s.count;$/;"	v
idx	$C2_LIBDIR/../generator/ir/basic_struct_layouter.c2	/^                                 u32 idx,$/;"	v
idx	$C2_LIBDIR/../generator/ir/field_struct_layouter.c2	/^    u32 idx = l.num_inits;$/;"	v
idx	$C2_LIBDIR/../generator/ir/ir_generator_locals.c2	/^    u32 idx = d.getGenIdx();$/;"	v
idx	$C2_LIBDIR/../generator/ir/ir_generator_member.c2	/^    u32 idx = 0;$/;"	v
idx	$C2_LIBDIR/../generator/radix_tree/radix_tree.c2	/^    u32 idx = t.allocate_node(node_size);$/;"	v
idx	$C2_LIBDIR/../generator/radix_tree/radix_tree_dump.c2	/^        u32 idx = sizeof(Node);$/;"	v
idx	$C2_LIBDIR/../ir/block_list.c2	/^    return idx;$/;"	v
idx	$C2_LIBDIR/../ir/case_list.c2	/^    return idx;$/;"	v
idx	$C2_LIBDIR/../ir/context.c2	/^    u32 idx = c.pool.addStr(text, false);$/;"	v
idx	$C2_LIBDIR/../ir/inserter.c2	/^    u32 idx = ins.count;$/;"	v
idx	$C2_LIBDIR/../ir/interference_graph.c2	/^    u32 idx = r.start + r.count;$/;"	v
idx	$C2_LIBDIR/../ir/live_map.c2	/^    u32 idx = r.start + r.count;$/;"	v
idx	$C2_LIBDIR/../ir/ref.c2	/^    local u32 idx;$/;"	v
idx	$C2_LIBDIR/../ir/rpo.c2	/^    u32 idx = todo; \/\/ check point$/;"	v
idx	$C2_LIBDIR/../ir/slot_collector.c2	/^            u16 idx = cast<u16>(b.instr.start + i);$/;"	v
idx	$C2_LIBDIR/../ir/slot_writes_map.c2	/^        u32 idx = r.start + r.count;$/;"	v
idx	$C2_LIBDIR/../ir/symbol_list.c2	/^    return idx;$/;"	v
idx	$C2_LIBDIR/../ir/usage_counter.c2	/^    u32 idx = c.work_queue[c.queue_head];$/;"	v
idx	$C2_LIBDIR/../ir/work_queue.c2	/^    u32 idx;$/;"	v
idx	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    u32 idx = p.tok.text_idx;$/;"	v
idx	$C2_LIBDIR/../parser/keywords.c2	/^    u32 idx = 0;$/;"	v
idx2ast	$C2_LIBDIR/../ast/utils.c2	/^fn AST* idx2ast(u32 idx) {$/;"	f
ie	$C2_LIBDIR/../analyser/module_analyser_init.c2	/^        IdentifierExpr* ie = (IdentifierExpr*)e;$/;"	v
ie	$C2_LIBDIR/../generator/c/c_generator.c2	/^        Expr* ie = vd.getInit();$/;"	v
ie	$C2_LIBDIR/../generator/c/c_generator_stmt.c2	/^    Expr* ie = vd.getInit();$/;"	v
ie	$C2_LIBDIR/../generator/c2i/c2i_generator_decl.c2	/^    const Expr* ie = vd.getInit();$/;"	v
ie	$C2_LIBDIR/../generator/ir/array_init_sorter.c2	/^        const InitEntry* ie = &s.entries[i];$/;"	v
ie	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^    const Expr* ie = vd.getInit();$/;"	v
ie	$C2_LIBDIR/../generator/ir/ir_generator_stmt.c2	/^    const Stmt* ie = f.getInit();$/;"	v
ifStmtBits	$C2_LIBDIR/../ast/stmt.c2	/^        IfStmtBits ifStmtBits;$/;"	v
if_stmt	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^        const IfStmt* if_stmt = cast<IfStmt*>(s);$/;"	v
if_stmt	$C2_LIBDIR/../generator/ir/ir_generator_stmt.c2	/^    const IfStmt* if_stmt = cast<IfStmt*>(s);$/;"	v
ii	$C2_LIBDIR/../generator/c/c_generator_trace.c2	/^            u32 ii = sl.hash_array[i];$/;"	v
ii	$C2_LIBDIR/../ir/context.c2	/^        Instr* ii = c.b.tmp_info.instructions.add();$/;"	v
ii	$C2_LIBDIR/../ir/inserter.c2	/^    InstrInsertion* ii = &ins.ins[insert_idx];$/;"	v
ii	$C2_LIBDIR/../ir/print.c2	/^        const Instr* ii = &instr[i];$/;"	v
ii	$C2_LIBDIR/../ir/register_alloc.c2	/^        const Instr* ii = &instrs[i];$/;"	v
ii	$C2_LIBDIR/../ir/slot_collector.c2	/^    Instr* ii = c.info.instructions.get(b.instr.start);$/;"	v
ii	$C2_LIBDIR/../ir/ssa.c2	/^    Instr* ii = t.inserter.getLastInstr();$/;"	v
ii	$C2_LIBDIR/../ir/switch.c2	/^    Instr* ii = fi.instructions.get(switch_loc);$/;"	v
ii2	$C2_LIBDIR/../ir/ssa.c2	/^    Instr* ii2 = t.inserter.getLastInstr();$/;"	v
ile	$C2_LIBDIR/../analyser/module_analyser.c2	/^            InitListExpr* ile = (InitListExpr*)init_expr;$/;"	v
ile	$C2_LIBDIR/../generator/c/c_generator_expr.c2	/^        InitListExpr* ile = cast<InitListExpr*>(e);$/;"	v
ile	$C2_LIBDIR/../generator/c2i/c2i_generator_expr.c2	/^        InitListExpr* ile = cast<InitListExpr*>(e);$/;"	v
ile	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^    const InitListExpr* ile = cast<InitListExpr*>(e);$/;"	v
ile	$C2_LIBDIR/../generator/ir/ir_generator_expr.c2	/^    const InitListExpr* ile = (InitListExpr*)e;$/;"	v
ili	$C2_LIBDIR/../generator/ast_visitor_expr.c2	/^        InitListExpr* ili = cast<InitListExpr*>(e);$/;"	v
impl	$C2_LIBDIR/../analyser/conversion_checker.c2	/^        QualType impl = etd.getImplType();$/;"	v
impl	$C2_LIBDIR/../ast/qualtype.c2	/^        QualType impl = et.getImplType();$/;"	v
implType	$C2_LIBDIR/../analyser/module_analyser_type.c2	/^    QualType implType = d.getImplType();$/;"	v
implType	$C2_LIBDIR/../ast/enum_type_decl.c2	/^    QualType implType;$/;"	v
implType	$C2_LIBDIR/../generator/c2i/c2i_generator_decl.c2	/^    QualType implType = etd.getImplType();$/;"	v
implType	$C2_LIBDIR/../parser/ast_builder.c2	/^                                        QualType implType,$/;"	v
implType	$C2_LIBDIR/../parser/c2_parser_type.c2	/^    QualType implType = p.builder.actOnBuiltinType(tokKindToBuiltinKind(p.tok.kind));$/;"	v
implicitCastBits	$C2_LIBDIR/../ast/stmt.c2	/^        ImplicitCastBits implicitCastBits;$/;"	v
implicitCastKind_names	$C2_LIBDIR/../ast/implicit_cast_expr.c2	/^const char*[] implicitCastKind_names = {$/;"	v
importDeclBits	$C2_LIBDIR/../ast/decl.c2	/^        ImportDeclBits importDeclBits;$/;"	v
imports	$C2_LIBDIR/../ast/ast.c2	/^    Represents a single file with all its imports, decls, etc$/;"	v
in	$C2_LIBDIR/../common/quicksort.c2	/^     * Each element x to the left of the left pointer was either swapped in, or it was not.$/;"	v
in	$C2_LIBDIR/../generator/ast_visitor.c2	/^        Stmt* in = f.getInit();$/;"	v
in1	$C2_LIBDIR/../analyser/conversion_checker.c2	/^    const Type* in1 = linner.getTypeOrNil();$/;"	v
in2	$C2_LIBDIR/../analyser/conversion_checker.c2	/^    const Type* in2 = rinner.getTypeOrNil();$/;"	v
in_block	$C2_LIBDIR/../ir/context.c2	/^    bool in_block;$/;"	v
in_body	$C2_LIBDIR/../generator/c2i/c2i_generator.c2	/^    bool in_body;$/;"	v
in_document	$C2_LIBDIR/../common/yaml/yaml_parser.c2	/^    bool in_document;$/;"	v
in_header	$C2_LIBDIR/../generator/c/c_generator.c2	/^        bool in_header = gen.emitGlobalVarDecl(f.buf, d);$/;"	v
incompatible_opcodes	$C2_LIBDIR/../analyser/module_analyser_binop.c2	/^fn bool incompatible_opcodes(BinaryOpcode op1, BinaryOpcode op2) {$/;"	f
incr	$C2_LIBDIR/../parser/ast_builder.c2	/^                                     Expr* incr,$/;"	v
incr	$C2_LIBDIR/../parser/c2_parser_stmt.c2	/^    Expr* incr = nil;$/;"	v
incr_array_list	$C2_LIBDIR/../analyser/incr_array_list.c2	/^module incr_array_list;$/;"	v
incr_constants	$C2_LIBDIR/../ast/enum_type_decl.c2	/^    EnumConstantDecl**[0] incr_constants; \/\/ tail-allocated, for incremental enums$/;"	v
indent	$C2_LIBDIR/../common/yaml/yaml_data.c2	/^    i32 indent;     \/\/ -1 for root node$/;"	v
indent	$C2_LIBDIR/../common/yaml/yaml_parser.c2	/^    i32 indent = p.cur_indent;$/;"	v
indent	$C2_LIBDIR/../common/yaml/yaml_tokenizer.c2	/^    i32 indent = cast<i32>(t.cur - start);$/;"	v
indent	$C2_LIBDIR/../generator/c2_trace.c2	/^        indent = 0;$/;"	v
indent	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^    u32 indent = 0;$/;"	v
indent	$C2_LIBDIR/../plugins/deps_generator.c2	/^    u32 indent;$/;"	v
indent_step	$C2_LIBDIR/../ast_utils/string_buffer.c2	/^    u32 indent_step;$/;"	v
index	$C2_LIBDIR/../analyser/init_checker.c2	/^    u32 index;$/;"	v
index	$C2_LIBDIR/../analyser/label_vector.c2	/^    u32 index = v.count;$/;"	v
index	$C2_LIBDIR/../analyser/module_analyser.c2	/^    u32 index = 0;$/;"	v
index	$C2_LIBDIR/../analyser/module_analyser_builtin.c2	/^    u32 index = 0;$/;"	v
index	$C2_LIBDIR/../analyser/module_analyser_expr.c2	/^    index = sub.getIndex();$/;"	v
index	$C2_LIBDIR/../analyser/module_analyser_switch.c2	/^    u32 index = v.as_u32();$/;"	v
index	$C2_LIBDIR/../analyser/module_analyser_unaryop.c2	/^        Expr* index = a.getIndex();$/;"	v
index	$C2_LIBDIR/../analyser/name_vector.c2	/^    u32 index = v.count;$/;"	v
index	$C2_LIBDIR/../analyser_utils/ctv_analyser.c2	/^        Expr* index = a.getIndex();$/;"	v
index	$C2_LIBDIR/../ast/ast_evaluator.c2	/^        Expr* index = a.getIndex();$/;"	v
index	$C2_LIBDIR/../ast/value.c2	/^    local u8 index = 0;$/;"	v
index	$C2_LIBDIR/../ast_utils/string_pool.c2	/^                u32 index = (v & INDEX_BITS) << INDEX_SHIFT;$/;"	v
index	$C2_LIBDIR/../common/source_mgr.c2	/^    u16* index;$/;"	v
index	$C2_LIBDIR/../generator/c/c_generator_expr.c2	/^        Expr* index = a.getIndex();$/;"	v
index	$C2_LIBDIR/../generator/c/c_generator_pure_call.c2	/^        Expr* index = a.getIndex();$/;"	v
index	$C2_LIBDIR/../generator/c/c_generator_trace.c2	/^    u32 index = sl.string_count++;$/;"	v
index	$C2_LIBDIR/../generator/ir/array_init_sorter.c2	/^    u32 index;$/;"	v
index	$C2_LIBDIR/../generator/ir/ir_generator_expr.c2	/^    Expr* index = a.getIndex();$/;"	v
index	$C2_LIBDIR/../generator/ir/ir_generator_locals.c2	/^    u32 index; \/\/ first free$/;"	v
index	$C2_LIBDIR/../ir/work_queue.c2	/^    u32 index;$/;"	v
index_capacity	$C2_LIBDIR/../common/source_mgr.c2	/^    u32 index_capacity;$/;"	v
index_count	$C2_LIBDIR/../common/source_mgr.c2	/^    u32 index_count;$/;"	v
index_list	$C2_LIBDIR/../common/index_list.c2	/^module index_list;$/;"	v
index_list	$C2_LIBDIR/../ir/context.c2	/^import index_list;$/;"	v
index_list	$C2_LIBDIR/../ir/switch.c2	/^import index_list;$/;"	v
index_max	$C2_LIBDIR/../common/source_mgr.c2	/^    u32 index_max = sm.max_offset \/ FileIndexSize;$/;"	v
index_pos	$C2_LIBDIR/../common/source_mgr.c2	/^    u32 index_pos = sm.index_count;$/;"	v
indexes	$C2_LIBDIR/../common/string_list.c2	/^    u32* indexes;   \/\/ into pool$/;"	v
indexes	$C2_LIBDIR/../ir/rev_list.c2	/^    RevIndex* indexes;  \/\/ [num_blocks]$/;"	v
indexes	$C2_LIBDIR/../ir/slot_collector.c2	/^    BlockIndex* indexes;$/;"	v
indexes	$C2_LIBDIR/../parser/keywords.c2	/^    Kind[656] indexes;$/;"	v
indexes2	$C2_LIBDIR/../common/string_list.c2	/^    u32* indexes2 = stdlib.malloc(capacity * sizeof(u32));$/;"	v
info	$C2_LIBDIR/../analyser/incr_array_list.c2	/^        Info* info = &v.entries[v.count];$/;"	v
info	$C2_LIBDIR/../analyser/struct_func_list.c2	/^    Info* info = &v.data[v.count];$/;"	v
info	$C2_LIBDIR/../ast/var_decl.c2	/^    BitFieldInfo* info = d.getBitFieldInfo();$/;"	v
info	$C2_LIBDIR/../common/build_file.c2	/^    Info info = {}$/;"	v
info	$C2_LIBDIR/../ir/copy_list.c2	/^    CopyInfo* info = &l.copies[l.count++];$/;"	v
info	$C2_LIBDIR/../ir/print.c2	/^                               const FunctionInfo* info,$/;"	v
info	$C2_LIBDIR/../ir/slot_collector.c2	/^    FunctionInfo* info;$/;"	v
info	$C2_LIBDIR/../ir/symbol_list.c2	/^            FunctionInfo* info;$/;"	v
info1	$C2_LIBDIR/../ast/var_decl.c2	/^        BitFieldInfo* info1 = vd.typeRef.getPointerAfter();$/;"	v
info2	$C2_LIBDIR/../ast/var_decl.c2	/^        BitFieldInfo* info2 = vd2.typeRef.getPointerAfter();$/;"	v
init	$C2_LIBDIR/../analyser/module_analyser.c2	/^        Expr* init = ma.builder.actOnStringLiteral(embed.loc, src_len, value, len);$/;"	v
init	$C2_LIBDIR/../analyser/module_analyser_expr.c2	/^        const Expr* init = vd.getInit();$/;"	v
init	$C2_LIBDIR/../analyser/module_analyser_stmt.c2	/^    Stmt** init = f.getInit2();$/;"	v
init	$C2_LIBDIR/../ast/enum_constant_decl.c2	/^    Expr*[0] init;  \/\/ tail-allocated$/;"	v
init	$C2_LIBDIR/../ast/for_stmt.c2	/^    Stmt* init;$/;"	v
init	$C2_LIBDIR/../ast/var_decl.c2	/^    VarDeclInit* init = d.typeRef.getPointerAfter();$/;"	v
init	$C2_LIBDIR/../generator/ir/field_struct_layouter.c2	/^    FieldInit init;$/;"	v
init	$C2_LIBDIR/../parser/ast_builder.c2	/^                                     Stmt* init,$/;"	v
init	$C2_LIBDIR/../parser/c2_parser_stmt.c2	/^    Stmt* init = nil;$/;"	v
init	$C2_LIBDIR/../plugins/deps_generator_plugin.c2	/^fn void init(void* arg, plugin_info.Info* info) {$/;"	f
init	$C2_LIBDIR/../plugins/git_version_plugin.c2	/^fn void init(void* arg, plugin_info.Info* info) {$/;"	f
init	$C2_LIBDIR/../plugins/plugin_info.c2	/^    InitFn init;$/;"	v
init	$C2_LIBDIR/../plugins/refs_generator_plugin.c2	/^fn void init(void* arg, plugin_info.Info* info) {$/;"	f
init	$C2_LIBDIR/../plugins/shell_cmd_plugin.c2	/^fn void init(void* arg, plugin_info.Info* info) {$/;"	f
init1	$C2_LIBDIR/../ast/var_decl.c2	/^        VarDeclInit* init1 = vd.typeRef.getPointerAfter();$/;"	v
init2	$C2_LIBDIR/../ast/for_stmt.c2	/^    Stmt* init2 = s.init ? s.init.instantiate(inst) : nil;$/;"	v
init2	$C2_LIBDIR/../ast/var_decl.c2	/^        VarDeclInit* init2 = vd2.typeRef.getPointerAfter();$/;"	v
initExpr	$C2_LIBDIR/../analyser/module_analyser_function.c2	/^            Expr** initExpr = vd.getInit2();$/;"	v
initExpr	$C2_LIBDIR/../analyser/module_analyser_stmt.c2	/^    Expr** initExpr = vd.getInit2();$/;"	v
initExpr	$C2_LIBDIR/../analyser_utils/printf_utils.c2	/^        Expr* initExpr = vd.getInit();$/;"	v
initExpr	$C2_LIBDIR/../generator/c/c_generator.c2	/^    const Expr* initExpr = vd.getInit();$/;"	v
initExpr	$C2_LIBDIR/../generator/c/dep_finder.c2	/^        Expr* initExpr = c.getInit();$/;"	v
initExpr	$C2_LIBDIR/../generator/c2i/c2i_generator_decl.c2	/^        Expr* initExpr = v.getInit();$/;"	v
initListExprBits	$C2_LIBDIR/../ast/stmt.c2	/^        InitListExprBits initListExprBits;$/;"	v
initStmt	$C2_LIBDIR/../generator/c/c_generator_stmt.c2	/^        Stmt* initStmt = f.getInit();$/;"	v
initStmt	$C2_LIBDIR/../generator/c2i/c2i_generator_stmt.c2	/^        Stmt* initStmt = f.getInit();$/;"	v
initValue	$C2_LIBDIR/../ast/array_designated_init_expr.c2	/^    Expr* initValue;$/;"	v
initValue	$C2_LIBDIR/../ast/field_designated_init_expr.c2	/^    Expr* initValue;$/;"	v
initValue	$C2_LIBDIR/../parser/ast_builder.c2	/^                                        Expr* initValue,$/;"	v
initValue	$C2_LIBDIR/../parser/c2_parser.c2	/^    Expr* initValue = p.parseInitValue(false);$/;"	v
initValue	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    Expr* initValue = p.parseInitValue(false);$/;"	v
initValue	$C2_LIBDIR/../parser/c2_parser_stmt.c2	/^        Expr* initValue = nil;$/;"	v
init_checker	$C2_LIBDIR/../analyser/init_checker.c2	/^module init_checker;$/;"	v
init_checker	$C2_LIBDIR/../analyser/module_analyser.c2	/^import init_checker;$/;"	v
init_checker	$C2_LIBDIR/../analyser/module_analyser_init.c2	/^import init_checker;$/;"	v
init_checker	$C2_LIBDIR/../analyser/module_analyser_switch.c2	/^import init_checker;$/;"	v
init_err	$C2_LIBDIR/../analyser/module_analyser_stmt.c2	/^    bool init_err = false;$/;"	v
init_expr	$C2_LIBDIR/../analyser/module_analyser.c2	/^    Expr* init_expr = v.getInit();$/;"	v
init_expr	$C2_LIBDIR/../generator/ast_visitor.c2	/^    Expr* init_expr = d.getInit();$/;"	v
init_expr	$C2_LIBDIR/../generator/c/dep_finder.c2	/^    Expr* init_expr = d.getInit();$/;"	v
init_expr	$C2_LIBDIR/../parser/c2_parser_type.c2	/^            Expr* init_expr = nil;$/;"	v
init_idx	$C2_LIBDIR/../generator/ir/field_struct_layouter.c2	/^    u32 init_idx = 0;$/;"	v
init_stmt	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^        Stmt* init_stmt = for_stmt.getInit();$/;"	v
init_value_count	$C2_LIBDIR/../ir/print.c2	/^            u32 init_value_count;$/;"	v
init_value_count	$C2_LIBDIR/../ir/symbol_list.c2	/^            u32 init_value_count;$/;"	v
init_value_idx	$C2_LIBDIR/../ir/print.c2	/^            u32 init_value_idx;$/;"	v
init_value_idx	$C2_LIBDIR/../ir/symbol_list.c2	/^            u32 init_value_idx;$/;"	v
init_values	$C2_LIBDIR/../ir/context.c2	/^    InitValueList init_values;$/;"	v
inits	$C2_LIBDIR/../analyser/struct_field_init_checker.c2	/^    SrcLoc* inits;$/;"	v
inits	$C2_LIBDIR/../generator/ir/field_struct_layouter.c2	/^    FieldInit* inits;$/;"	v
initval	$C2_LIBDIR/../analyser/module_analyser_type.c2	/^        Expr* initval = c.getInit();$/;"	v
initval	$C2_LIBDIR/../analyser_utils/ctv_analyser.c2	/^        const Expr* initval = vd.getInit();$/;"	v
initval	$C2_LIBDIR/../ast/ast_evaluator.c2	/^            const Expr* initval = vd.getInit();$/;"	v
initval	$C2_LIBDIR/../generator/c/c_generator_pure_call.c2	/^            const Expr* initval = vd.getInit();$/;"	v
inner	$C2_LIBDIR/../analyser/conversion_checker.c2	/^    QualType inner = ptr.getInner();$/;"	v
inner	$C2_LIBDIR/../analyser/module_analyser_binop.c2	/^    QualType inner = pt.getInner();$/;"	v
inner	$C2_LIBDIR/../analyser/module_analyser_builtin.c2	/^    Expr* inner = e.getInner();$/;"	v
inner	$C2_LIBDIR/../analyser/module_analyser_expr.c2	/^    Expr* inner = c.getInner();$/;"	v
inner	$C2_LIBDIR/../analyser/module_analyser_init.c2	/^        Expr* inner = fdi.getInit();$/;"	v
inner	$C2_LIBDIR/../analyser/module_analyser_member.c2	/^                QualType inner = pt.getInner();$/;"	v
inner	$C2_LIBDIR/../analyser/module_analyser_stmt.c2	/^    Expr* inner = uo.getInner();$/;"	v
inner	$C2_LIBDIR/../analyser/module_analyser_unaryop.c2	/^    Expr* inner = u.getInner();$/;"	v
inner	$C2_LIBDIR/../analyser_utils/ctv_analyser.c2	/^    const Expr* inner = e.getInner();$/;"	v
inner	$C2_LIBDIR/../ast/assert_stmt.c2	/^    Expr* inner;$/;"	v
inner	$C2_LIBDIR/../ast/ast_evaluator.c2	/^    const Expr* inner = e.getInner();$/;"	v
inner	$C2_LIBDIR/../ast/builtin_expr.c2	/^    Expr* inner;$/;"	v
inner	$C2_LIBDIR/../ast/explicit_cast_expr.c2	/^    Expr* inner;$/;"	v
inner	$C2_LIBDIR/../ast/implicit_cast_expr.c2	/^    Expr* inner;$/;"	v
inner	$C2_LIBDIR/../ast/paren_expr.c2	/^    Expr* inner;$/;"	v
inner	$C2_LIBDIR/../ast/pointer_type.c2	/^    QualType inner;$/;"	v
inner	$C2_LIBDIR/../ast/qualtype.c2	/^    inner = inner.getCanonicalType();$/;"	v
inner	$C2_LIBDIR/../ast/type.c2	/^            QualType inner = pt.getInner();$/;"	v
inner	$C2_LIBDIR/../ast/unary_operator.c2	/^    Expr* inner;$/;"	v
inner	$C2_LIBDIR/../generator/c/c_generator_pure_call.c2	/^    const Expr* inner = e.getInner();$/;"	v
inner	$C2_LIBDIR/../generator/c/c_generator_stmt.c2	/^        Expr* inner = a.getInner();$/;"	v
inner	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^        Stmt* inner = ls.getStmt();$/;"	v
inner	$C2_LIBDIR/../generator/ir/ir_generator_stmt.c2	/^    Expr* inner = a.getInner();$/;"	v
inner	$C2_LIBDIR/../parser/ast_builder.c2	/^    Expr* inner = *e_ptr;$/;"	v
inner	$C2_LIBDIR/../parser/c2_parser_stmt.c2	/^    Expr* inner = p.parseExpr();$/;"	v
inner_const	$C2_LIBDIR/../analyser/module_analyser_member.c2	/^            bool inner_const = false;$/;"	v
input	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^                              const char* input,$/;"	v
input_start	$C2_LIBDIR/../common/yaml/yaml_tokenizer.c2	/^    const char* input_start;$/;"	v
input_start	$C2_LIBDIR/../compiler/c2recipe_parser.c2	/^    const char* input_start;$/;"	v
input_start	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^    const char* input_start;$/;"	v
ins	$C2_LIBDIR/../ir/inserter.c2	/^    InstrInsertion* ins;$/;"	v
ins2	$C2_LIBDIR/../ir/inserter.c2	/^    InstrInsertion* ins2 = stdlib.malloc(ins.capacity * sizeof(InstrInsertion));$/;"	v
insert_idx	$C2_LIBDIR/../ir/inserter.c2	/^    u32 insert_idx = ins.getAddIndex(loc);$/;"	v
insert_loc	$C2_LIBDIR/../ir/register_alloc.c2	/^    u32 insert_loc = fi.instructions.getCount();    \/\/ after all others$/;"	v
inserter	$C2_LIBDIR/../ir/switch.c2	/^    Inserter* inserter = &t.inserter;$/;"	v
inst	$C2_LIBDIR/../analyser/module_analyser_call.c2	/^        Instantiator inst = {$/;"	v
inst2	$C2_LIBDIR/../ast/instance_table.c2	/^    TemplateInstance* inst2 = stdlib.malloc(capacity* sizeof(TemplateInstance));$/;"	v
instance	$C2_LIBDIR/../analyser/module_analyser_call.c2	/^    return instance;$/;"	v
instance	$C2_LIBDIR/../ast/instance_table.c2	/^    FunctionDecl* instance;$/;"	v
instance	$C2_LIBDIR/../generator/c/c_generator_call.c2	/^        FunctionDecl* instance = gen.mod.getInstance(template_fd, idx);$/;"	v
instance_ast_idx	$C2_LIBDIR/../ast/call_expr.c2	/^    u16 instance_ast_idx; \/\/ for template function calls$/;"	v
instance_ast_idx	$C2_LIBDIR/../ast/instantiator.c2	/^    u16 instance_ast_idx;$/;"	v
instance_idx	$C2_LIBDIR/../analyser/module_analyser_call.c2	/^        u16 instance_idx = ma.mod.addInstance(fd, templateType, instance);$/;"	v
instance_idx	$C2_LIBDIR/../ast/function_decl.c2	/^    u16 instance_idx;     \/\/ template functions only$/;"	v
instances	$C2_LIBDIR/../ast/instance_table.c2	/^    TemplateInstance* instances;$/;"	v
instances	$C2_LIBDIR/../ast/module.c2	/^    InstanceTable instances;$/;"	v
instr	$C2_LIBDIR/../ir/block.c2	/^    Index instr;        \/\/ index into FuncInfo.instructions$/;"	v
instr	$C2_LIBDIR/../ir/context.c2	/^        instr = instructions.get(b.instr.start+1);$/;"	v
instr	$C2_LIBDIR/../ir/inserter.c2	/^    Instr instr;$/;"	v
instr	$C2_LIBDIR/../ir/print.c2	/^    const Instr* instr = ph.cur_info.instructions.get(0);$/;"	v
instr	$C2_LIBDIR/../ir/ssa.c2	/^        Instr* instr = &all[i];$/;"	v
instrBits	$C2_LIBDIR/../ir/instr.c2	/^        InstrBits instrBits;$/;"	v
instr_count	$C2_LIBDIR/../ir/print.c2	/^    u32 instr_count = info.instructions.getCount();$/;"	v
instr_idx	$C2_LIBDIR/../ir/context.c2	/^        u32 instr_idx = b.instr.start + b.instr.count - 1;$/;"	v
instr_idx	$C2_LIBDIR/../ir/copy_list.c2	/^    u32 instr_idx;$/;"	v
instr_idx	$C2_LIBDIR/../ir/inserter.c2	/^    u32 instr_idx;  \/\/ place where instruction is currently stored$/;"	v
instr_idx	$C2_LIBDIR/../ir/register_alloc.c2	/^        u32 instr_idx = b.instr.start + b.instr.count -1;$/;"	v
instr_idx	$C2_LIBDIR/../ir/ssa.c2	/^    u32 instr_idx = t.inserter.addInstr(loc);$/;"	v
instr_idx2	$C2_LIBDIR/../ir/register_alloc.c2	/^        u32 instr_idx2 = t.inserter.addInstr(instr_idx);$/;"	v
instrs	$C2_LIBDIR/../ir/context.c2	/^            Instr* instrs = fi.instructions.get(old.instr.start);$/;"	v
instrs	$C2_LIBDIR/../ir/instr_list.c2	/^    Instr* instrs;$/;"	v
instrs	$C2_LIBDIR/../ir/print.c2	/^        const Instr* instrs = info.instructions.get(i_idx.start);$/;"	v
instrs	$C2_LIBDIR/../ir/register_alloc.c2	/^    Instr* instrs = fi.instructions.get(0);$/;"	v
instrs	$C2_LIBDIR/../ir/slot_collector.c2	/^    Instr* instrs = c.info.instructions.get(0);$/;"	v
instrs	$C2_LIBDIR/../ir/ssa.c2	/^    Instr* instrs = fi.instructions.get(0);$/;"	v
instrs2	$C2_LIBDIR/../ir/instr_list.c2	/^    Instr* instrs2 = stdlib.malloc(l.capacity * sizeof(Instr));$/;"	v
instructions	$C2_LIBDIR/../ir/function_info.c2	/^    InstrList instructions;$/;"	v
int16_t	$C2_LIBDIR/../generator/c/c_generator.c2	/^    typedef signed short int16_t;$/;"	v
int16_t	$C2_LIBDIR/../generator/c/c_generator_special.c2	/^    typedef signed short int int16_t;$/;"	v
int32_t	$C2_LIBDIR/../generator/c/c_generator.c2	/^    typedef signed int int32_t;$/;"	v
int32_t	$C2_LIBDIR/../generator/c/c_generator_special.c2	/^    typedef signed int int32_t;$/;"	v
int64_t	$C2_LIBDIR/../generator/c/c_generator.c2	/^                typedef signed long long int64_t;$/;"	v
int64_t	$C2_LIBDIR/../generator/c/c_generator_special.c2	/^    typedef signed long int64_t;$/;"	v
int8_t	$C2_LIBDIR/../generator/c/c_generator.c2	/^    typedef signed char int8_t;$/;"	v
int8_t	$C2_LIBDIR/../generator/c/c_generator_special.c2	/^    typedef signed char int8_t;$/;"	v
intWidth	$C2_LIBDIR/../common/target_info.c2	/^    u32 intWidth;   \/\/ 32\/64$/;"	v
int_value	$C2_LIBDIR/../parser/token.c2	/^        u64 int_value;     \/\/ IntegerLiteral$/;"	v
integerLiteralBits	$C2_LIBDIR/../ast/stmt.c2	/^        IntegerLiteralBits integerLiteralBits;$/;"	v
interferences	$C2_LIBDIR/../ir/register_alloc.c2	/^    InterferenceGraph* interferences;   \/\/ temp_id is index$/;"	v
internal_nodes	$C2_LIBDIR/../generator/radix_tree/radix_tree_dump.c2	/^    u32 internal_nodes;$/;"	v
invalid	$C2_LIBDIR/../parser/token.c2	/^        char[8] invalid;   \/\/ Invalid$/;"	v
invalid_char	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^            goto invalid_char;$/;"	v
ip	$C2_LIBDIR/../analyser/module_analyser_switch.c2	/^                                       u32* ip,$/;"	v
ir	$C2_LIBDIR/../generator/ir/ir_generator_locals.c2	/^import ir;$/;"	v
ir	$C2_LIBDIR/../generator/ir/ref_list.c2	/^import ir;$/;"	v
ir	$C2_LIBDIR/../ir/block.c2	/^module ir;$/;"	v
ir	$C2_LIBDIR/../ir/block_list.c2	/^module ir;$/;"	v
ir	$C2_LIBDIR/../ir/case_list.c2	/^module ir;$/;"	v
ir	$C2_LIBDIR/../ir/common.c2	/^module ir;$/;"	v
ir	$C2_LIBDIR/../ir/function_info.c2	/^module ir;$/;"	v
ir	$C2_LIBDIR/../ir/instr.c2	/^module ir;$/;"	v
ir	$C2_LIBDIR/../ir/instr_kind.c2	/^module ir;$/;"	v
ir	$C2_LIBDIR/../ir/instr_list.c2	/^module ir;$/;"	v
ir	$C2_LIBDIR/../ir/phi_list.c2	/^module ir;$/;"	v
ir	$C2_LIBDIR/../ir/ref.c2	/^module ir;$/;"	v
ir	$C2_LIBDIR/../ir/slot_writes_map.c2	/^import ir;$/;"	v
ir	$C2_LIBDIR/../ir/types.c2	/^module ir;$/;"	v
ir	$C2_LIBDIR/../ir/work_queue.c2	/^import ir;$/;"	v
ir_context	$C2_LIBDIR/../generator/ir/field_struct_layouter.c2	/^import ir_context;$/;"	v
ir_context	$C2_LIBDIR/../generator/ir/ir_generator_binop.c2	/^import ir_context;$/;"	v
ir_context	$C2_LIBDIR/../generator/ir/ir_generator_call.c2	/^import ir_context;$/;"	v
ir_context	$C2_LIBDIR/../generator/ir/ir_generator_member.c2	/^import ir_context;$/;"	v
ir_context	$C2_LIBDIR/../generator/ir/ir_generator_stmt.c2	/^import ir_context;$/;"	v
ir_context	$C2_LIBDIR/../generator/ir/ir_generator_switch.c2	/^import ir_context;$/;"	v
ir_context	$C2_LIBDIR/../ir/constant.c2	/^module ir_context;$/;"	v
ir_context	$C2_LIBDIR/../ir/constant_list.c2	/^module ir_context;$/;"	v
ir_context	$C2_LIBDIR/../ir/context.c2	/^module ir_context;$/;"	v
ir_context	$C2_LIBDIR/../ir/graphviz.c2	/^module ir_context;$/;"	v
ir_context	$C2_LIBDIR/../ir/init_value.c2	/^module ir_context;$/;"	v
ir_context	$C2_LIBDIR/../ir/init_value_list.c2	/^module ir_context;$/;"	v
ir_context	$C2_LIBDIR/../ir/print.c2	/^module ir_context;$/;"	v
ir_context	$C2_LIBDIR/../ir/register_alloc.c2	/^module ir_context;$/;"	v
ir_context	$C2_LIBDIR/../ir/ssa.c2	/^module ir_context;$/;"	v
ir_context	$C2_LIBDIR/../ir/switch.c2	/^module ir_context;$/;"	v
ir_context	$C2_LIBDIR/../ir/symbol_list.c2	/^module ir_context;$/;"	v
ir_context	$C2_LIBDIR/../ir/work_queue.c2	/^module ir_context;$/;"	v
ir_copy_list	$C2_LIBDIR/../ir/copy_list.c2	/^module ir_copy_list;$/;"	v
ir_gen_locals	$C2_LIBDIR/../generator/ir/ir_generator_locals.c2	/^module ir_gen_locals;$/;"	v
ir_generator	$C2_LIBDIR/../compiler/compiler.c2	/^import ir_generator;$/;"	v
ir_generator	$C2_LIBDIR/../generator/ir/basic_struct_layouter.c2	/^module ir_generator;$/;"	v
ir_generator	$C2_LIBDIR/../generator/ir/field_struct_layouter.c2	/^module ir_generator;$/;"	v
ir_generator	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^module ir_generator;$/;"	v
ir_generator	$C2_LIBDIR/../generator/ir/ir_generator_binop.c2	/^module ir_generator;$/;"	v
ir_generator	$C2_LIBDIR/../generator/ir/ir_generator_call.c2	/^module ir_generator;$/;"	v
ir_generator	$C2_LIBDIR/../generator/ir/ir_generator_expr.c2	/^module ir_generator;$/;"	v
ir_generator	$C2_LIBDIR/../generator/ir/ir_generator_member.c2	/^module ir_generator;$/;"	v
ir_generator	$C2_LIBDIR/../generator/ir/ir_generator_stmt.c2	/^module ir_generator;$/;"	v
ir_generator	$C2_LIBDIR/../generator/ir/ir_generator_switch.c2	/^module ir_generator;$/;"	v
ir_inserter	$C2_LIBDIR/../ir/context.c2	/^import ir_inserter;$/;"	v
ir_inserter	$C2_LIBDIR/../ir/inserter.c2	/^module ir_inserter;$/;"	v
ir_interference_graph	$C2_LIBDIR/../ir/interference_graph.c2	/^module ir_interference_graph;$/;"	v
ir_live_map	$C2_LIBDIR/../ir/live_map.c2	/^module ir_live_map;$/;"	v
ir_live_map	$C2_LIBDIR/../ir/register_alloc.c2	/^import ir_live_map;$/;"	v
ir_lookup_table	$C2_LIBDIR/../ir/context.c2	/^import ir_lookup_table;$/;"	v
ir_lookup_table	$C2_LIBDIR/../ir/lookup_table.c2	/^module ir_lookup_table;$/;"	v
ir_rev_list	$C2_LIBDIR/../ir/rev_list.c2	/^module ir_rev_list;$/;"	v
ir_rpo	$C2_LIBDIR/../ir/register_alloc.c2	/^import ir_rpo;$/;"	v
ir_rpo	$C2_LIBDIR/../ir/rpo.c2	/^module ir_rpo;$/;"	v
ir_slot_collector	$C2_LIBDIR/../ir/slot_collector.c2	/^module ir_slot_collector;$/;"	v
ir_slot_values	$C2_LIBDIR/../ir/slot_values.c2	/^module ir_slot_values;$/;"	v
ir_slot_writes_map	$C2_LIBDIR/../ir/slot_writes_map.c2	/^module ir_slot_writes_map;$/;"	v
is	$C2_LIBDIR/../analyser/module_analyser_switch.c2	/^        const IfStmt* is = (IfStmt*)s;$/;"	v
is	$C2_LIBDIR/../ir/inserter.c2	/^        const Instr* is = &ii.instr;$/;"	v
is	$C2_LIBDIR/../ir/ssa.c2	/^        Instr* is = &all[i];$/;"	v
isAddressOfOperand	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^            isAddressOfOperand = false;$/;"	v
isCharPtr	$C2_LIBDIR/../analyser/module_analyser_switch.c2	/^    bool isCharPtr = ct.isCharPointer();$/;"	v
isDecl	$C2_LIBDIR/../parser/c2_parser_stmt.c2	/^    bool isDecl = p.isTypeSpec();$/;"	v
isEntryPoint	$C2_LIBDIR/../generator/generator_utils.c2	/^fn bool isEntryPoint(Decl* d) {$/;"	f
isPowerOf2	$C2_LIBDIR/../ast_utils/attr.c2	/^fn bool isPowerOf2(u32 val) {$/;"	f
isRightAssoc	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^        bool isRightAssoc = (thisPrec == Prec.Conditional || thisPrec == Prec.Assignment);$/;"	v
isStruct	$C2_LIBDIR/../analyser/module_analyser_init.c2	/^    bool isStruct = std.isStruct();$/;"	v
isTerminatingStmt	$C2_LIBDIR/../analyser/module_analyser_switch.c2	/^fn bool isTerminatingStmt(const Stmt* s, bool is_default) {$/;"	f
isTypeFuncCall	$C2_LIBDIR/../analyser/module_analyser_call.c2	/^    bool isTypeFuncCall = false;  \/\/ Not for static type-functions!$/;"	v
is_active	$C2_LIBDIR/../compiler/plugin_mgr.c2	/^    bool is_active; \/\/ only for non-global plugins$/;"	v
is_addrof_op	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^        bool is_addrof_op = (savedKind == Kind.Amp);$/;"	v
is_basic	$C2_LIBDIR/../ast/asm_stmt.c2	/^                                    bool is_basic,$/;"	v
is_basic	$C2_LIBDIR/../parser/ast_builder.c2	/^                                      is_basic, is_volatile,$/;"	v
is_binary	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^fn bool is_binary(char c) {$/;"	f
is_c_type	$C2_LIBDIR/../generator/c/c_generator.c2	/^fn bool is_c_type(const char* s) {$/;"	f
is_char	$C2_LIBDIR/../analyser/module_analyser.c2	/^        bool is_char = false;$/;"	v
is_const	$C2_LIBDIR/../analyser/module_analyser_member.c2	/^                bool is_const = baseType.isConst();$/;"	v
is_const	$C2_LIBDIR/../common/source_mgr.c2	/^    bool is_const;$/;"	v
is_created	$C2_LIBDIR/../generator/radix_tree/radix_tree.c2	/^    bool is_created; \/\/ otherwise loaded, dont free sections$/;"	v
is_decl	$C2_LIBDIR/../generator/c/c_generator_stmt.c2	/^        bool is_decl = cond.isDecl();$/;"	v
is_default	$C2_LIBDIR/../analyser/module_analyser_switch.c2	/^    bool is_default = c.isDefault();$/;"	v
is_default	$C2_LIBDIR/../ast/switch_case.c2	/^                                        bool is_default,$/;"	v
is_default	$C2_LIBDIR/../parser/ast_builder.c2	/^                                        bool is_default,$/;"	v
is_direct	$C2_LIBDIR/../ast/module.c2	/^    bool is_direct; \/\/ otherwise indirectly loaded via library.$/;"	v
is_direct	$C2_LIBDIR/../common/component.c2	/^    bool is_direct; \/\/ only for external, if used directly (otherwise sub-dep)$/;"	v
is_else	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^    bool is_else;   \/\/ inside the #else block$/;"	v
is_exported	$C2_LIBDIR/../ast/module.c2	/^    bool is_exported;$/;"	v
is_external	$C2_LIBDIR/../analyser/module_analyser_builtin.c2	/^                bool is_external = ma.mod != d.getModule();$/;"	v
is_external	$C2_LIBDIR/../analyser/module_analyser_type.c2	/^            bool is_external = ma.mod != d.getModule();$/;"	v
is_external	$C2_LIBDIR/../ast/module.c2	/^    bool is_external;$/;"	v
is_external	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^        bool is_external = gen.isExternal(d);$/;"	v
is_external	$C2_LIBDIR/../plugins/deps_generator.c2	/^    bool is_external;  \/\/ current component is external$/;"	v
is_foreign	$C2_LIBDIR/../ast/module.c2	/^    bool is_foreign; \/\/ module identifiers are not mangled$/;"	v
is_foreign	$C2_LIBDIR/../common/component.c2	/^    bool is_foreign;        \/\/ only for external$/;"	v
is_generated	$C2_LIBDIR/../ast/ast.c2	/^    bool is_generated;$/;"	v
is_generated	$C2_LIBDIR/../common/source_mgr.c2	/^    bool is_generated;$/;"	v
is_global	$C2_LIBDIR/../ast/struct_type_decl.c2	/^    bool is_global = d.base.structTypeDeclBits.is_global;$/;"	v
is_global	$C2_LIBDIR/../compiler/plugin_mgr.c2	/^    bool is_global;$/;"	v
is_global	$C2_LIBDIR/../parser/ast_builder.c2	/^                                              is_global,$/;"	v
is_image	$C2_LIBDIR/../compiler/compiler.c2	/^    bool is_image; \/\/ require build-file, dont allow dynamic libs, dont allow module exports$/;"	v
is_incr	$C2_LIBDIR/../parser/ast_builder.c2	/^                                        bool is_incr,$/;"	v
is_incr	$C2_LIBDIR/../parser/c2_parser_type.c2	/^    bool is_incr = false;$/;"	v
is_incremental	$C2_LIBDIR/../ast/enum_type_decl.c2	/^                                              bool is_incremental,$/;"	v
is_interface	$C2_LIBDIR/../ast/ast.c2	/^    bool is_interface;$/;"	v
is_interface	$C2_LIBDIR/../parser/ast_builder.c2	/^    bool is_interface;$/;"	v
is_interface	$C2_LIBDIR/../parser/c2_parser.c2	/^    bool is_interface;$/;"	v
is_internal	$C2_LIBDIR/../ast/module.c2	/^    bool is_internal; \/\/ currently only for c2 module$/;"	v
is_label	$C2_LIBDIR/../analyser/label_vector.c2	/^    bool is_label; \/\/ otherwise goto$/;"	v
is_last	$C2_LIBDIR/../analyser/module_analyser_switch.c2	/^        bool is_last = (i+1 == numCases);$/;"	v
is_loaded	$C2_LIBDIR/../ast/module.c2	/^    bool is_loaded; \/\/ the file(s) parsed. For external libs$/;"	v
is_local	$C2_LIBDIR/../generator/c/c_generator_expr.c2	/^    bool is_local = false;$/;"	v
is_name	$C2_LIBDIR/../compiler/c2recipe_parser.c2	/^fn bool is_name(char c) {$/;"	f
is_non_static	$C2_LIBDIR/../analyser/module_analyser_function.c2	/^        bool is_non_static = true;$/;"	v
is_octal	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^fn bool is_octal(char c) {$/;"	f
is_packed	$C2_LIBDIR/../analyser/module_analyser_struct.c2	/^    bool is_packed = d.isPacked();$/;"	v
is_plugin	$C2_LIBDIR/../compiler/plugin_mgr.c2	/^fn bool is_plugin(const Dirent* entry) {$/;"	f
is_pointer	$C2_LIBDIR/../generator/ir/ir_generator_member.c2	/^        bool is_pointer = base_type.isPointer();$/;"	v
is_ptr	$C2_LIBDIR/../analyser/module_analyser_member.c2	/^            bool is_ptr = canon.isPointer();$/;"	v
is_public	$C2_LIBDIR/../analyser/module_analyser_function.c2	/^    bool is_public = fd.asDecl().isPublic();$/;"	v
is_public	$C2_LIBDIR/../ast/alias_type_decl.c2	/^                                                bool is_public,$/;"	v
is_public	$C2_LIBDIR/../ast/enum_constant_decl.c2	/^                                                      bool is_public,$/;"	v
is_public	$C2_LIBDIR/../ast/enum_type_decl.c2	/^                                              bool is_public,$/;"	v
is_public	$C2_LIBDIR/../ast/function_decl.c2	/^                                              bool is_public,$/;"	v
is_public	$C2_LIBDIR/../ast/struct_type_decl.c2	/^                                                  bool is_public,$/;"	v
is_public	$C2_LIBDIR/../ast/var_decl.c2	/^                                    bool is_public,$/;"	v
is_public	$C2_LIBDIR/../parser/ast_builder.c2	/^                          is_public,$/;"	v
is_public	$C2_LIBDIR/../parser/c2_parser.c2	/^    bool is_public = p.parseOptionalAccessSpecifier();$/;"	v
is_public	$C2_LIBDIR/../parser/c2_parser_type.c2	/^                                      is_public,$/;"	v
is_signed	$C2_LIBDIR/../analyser/conversion_checker_expr.c2	/^    bool is_signed;$/;"	v
is_static	$C2_LIBDIR/../common/library_list.c2	/^    bool is_static;$/;"	v
is_static	$C2_LIBDIR/../compiler/c2recipe_parser.c2	/^            bool is_static = false;$/;"	v
is_string	$C2_LIBDIR/../analyser/module_analyser_switch.c2	/^    bool is_string = false;$/;"	v
is_string	$C2_LIBDIR/../common/yaml/yaml_tokenizer.c2	/^fn bool is_string(char c) {$/;"	f
is_struct	$C2_LIBDIR/../ast/struct_type_decl.c2	/^                                                  bool is_struct,$/;"	v
is_struct	$C2_LIBDIR/../parser/ast_builder.c2	/^                                              is_struct,$/;"	v
is_struct	$C2_LIBDIR/../parser/c2_parser_type.c2	/^            bool is_struct = p.tok.kind == Kind.KW_struct;$/;"	v
is_tf	$C2_LIBDIR/../generator/c/c_generator_call.c2	/^    bool is_tf = call.isTypeFunc();$/;"	v
is_tf	$C2_LIBDIR/../generator/ir/ir_generator_call.c2	/^    bool is_tf = call.isTypeFunc();$/;"	v
is_typefn	$C2_LIBDIR/../analyser/module_analyser_function.c2	/^    bool is_typefn = false;$/;"	v
is_used	$C2_LIBDIR/../ast/module.c2	/^    bool is_used;$/;"	v
is_variadic	$C2_LIBDIR/../ast/function_decl.c2	/^                                              bool is_variadic,$/;"	v
is_variadic	$C2_LIBDIR/../parser/ast_builder.c2	/^                                          is_variadic,$/;"	v
is_variadic	$C2_LIBDIR/../parser/c2_parser.c2	/^    return is_variadic;$/;"	v
is_variadic	$C2_LIBDIR/../parser/c2_parser_type.c2	/^    bool is_variadic = p.parseFunctionParams(&params, is_public, false);$/;"	v
is_volatile	$C2_LIBDIR/../ast/asm_stmt.c2	/^                                    bool is_volatile,$/;"	v
is_volatile	$C2_LIBDIR/../parser/ast_builder.c2	/^                                       bool is_volatile,$/;"	v
is_volatile	$C2_LIBDIR/../parser/c2_parser_stmt.c2	/^    bool is_volatile = (quals == QualType_Volatile);$/;"	v
isfinite	$C2_LIBDIR/../ast/value.c2	/^fn bool isfinite(f64 d) {$/;"	f
islocal	$C2_LIBDIR/../parser/c2_parser.c2	/^        bool islocal = false;$/;"	v
it	$C2_LIBDIR/../ast/type.c2	/^        QualType it = etd.getImplType();$/;"	v
it	$C2_LIBDIR/../common/quicksort.c2	/^     * If it was swapped in it, then x satisfies the swap condition: !is_less(pivot, x), In the /;"	v
iter	$C2_LIBDIR/../common/build_file.c2	/^    iter = parser.getNodeChildIter(root);$/;"	v
iter	$C2_LIBDIR/../common/yaml/yaml_iterator.c2	/^    return iter;$/;"	v
iter	$C2_LIBDIR/../compiler/manifest.c2	/^    iter = parser.getNodeChildIter(modulesNode);$/;"	v
iter	$C2_LIBDIR/../generator/radix_tree/radix_tree.c2	/^        Iter iter = { func, arg, 0 }$/;"	v
iter	$C2_LIBDIR/../generator/radix_tree/radix_tree_dump.c2	/^    Iter iter = { print_word, nil, 0 }$/;"	v
iter	$C2_LIBDIR/../ir/interference_graph.c2	/^    Iter iter = g.getList(var_idx);$/;"	v
iter	$C2_LIBDIR/../ir/register_alloc.c2	/^        iter = v.live_out.getList((u16)i);$/;"	v
iter	$C2_LIBDIR/../ir/slot_collector.c2	/^    Iter iter = c.writes.getList((u16)c.cur_blk);$/;"	v
iter	$C2_LIBDIR/../ir/slot_writes_map.c2	/^        Iter iter = m.getList((u16)i);$/;"	v
iterations	$C2_LIBDIR/../common/dsm_sorter.c2	/^    u32 iterations = 0;$/;"	v
ivalue	$C2_LIBDIR/../ir/constant.c2	/^        i64 ivalue;$/;"	v
jmp	$C2_LIBDIR/../ir/register_alloc.c2	/^                    Instr* jmp = t.inserter.getLastInstr();$/;"	v
jmp_err	$C2_LIBDIR/../common/yaml/yaml_parser.c2	/^    JmpBufTag jmp_err;$/;"	v
jmp_ref	$C2_LIBDIR/../ir/register_alloc.c2	/^                    Ref jmp_ref = { .kind = RefKind.JmpDest, .value = 0 }$/;"	v
jmpbuf	$C2_LIBDIR/../compiler/c2recipe_parser.c2	/^    JmpBufTag jmpbuf;$/;"	v
jmpbuf	$C2_LIBDIR/../parser/c2_parser.c2	/^    JmpBufTag jmpbuf;$/;"	v
jmpbuf	$C2_LIBDIR/../plugins/unit_test2.c2	/^JmpBufTag jmpbuf;$/;"	v
join_blk	$C2_LIBDIR/../generator/ir/ir_generator_binop.c2	/^    BlockId join_blk = c.createBlock(BlockKind.LogicJoin);$/;"	v
join_blk	$C2_LIBDIR/../generator/ir/ir_generator_expr.c2	/^    BlockId join_blk = c.createBlock(BlockKind.CondJoin);$/;"	v
join_blk	$C2_LIBDIR/../generator/ir/ir_generator_stmt.c2	/^    char[32] join_blk;$/;"	v
join_blk	$C2_LIBDIR/../generator/ir/ir_generator_switch.c2	/^    BlockId join_blk = c.createBlock(BlockKind.SwitchJoin);$/;"	v
join_blk	$C2_LIBDIR/../ir/print.c2	/^        u32 join_blk = i.args[1].value;$/;"	v
join_blk	$C2_LIBDIR/../ir/switch.c2	/^    BlockId join_blk = ii.args[1].value;$/;"	v
join_ref	$C2_LIBDIR/../ir/context.c2	/^        Ref* join_ref = &switch_instr.args[1];$/;"	v
k1	$C2_LIBDIR/../analyser/conversion_checker.c2	/^    BuiltinKind k1 = b1.getBaseKind();$/;"	v
k2	$C2_LIBDIR/../analyser/conversion_checker.c2	/^    BuiltinKind k2 = b2.getBaseKind();$/;"	v
key	$C2_LIBDIR/../common/value_maplist.c2	/^    u32 key;$/;"	v
keywords	$C2_LIBDIR/../compiler/compiler.c2	/^import keywords;$/;"	v
keywords	$C2_LIBDIR/../parser/c2_parser.c2	/^import keywords;$/;"	v
keywords	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^import keywords;$/;"	v
keywords	$C2_LIBDIR/../parser/keywords.c2	/^module keywords;$/;"	v
kind	$C2_LIBDIR/../analyser/conversion_checker.c2	/^    BuiltinKind kind = bi.getKind();$/;"	v
kind	$C2_LIBDIR/../analyser/module_analyser_builtin.c2	/^        const char* kind = (b.getKind() == BuiltinExprKind.EnumMin) ? "enum_min" : "enum_max";$/;"	v
kind	$C2_LIBDIR/../analyser/module_analyser_expr.c2	/^    return kind;$/;"	v
kind	$C2_LIBDIR/../analyser/module_analyser_init.c2	/^            IdentifierKind kind = ma.setExprFlags(e_ptr, d);$/;"	v
kind	$C2_LIBDIR/../analyser/module_analyser_member.c2	/^    IdentifierKind kind = ma.setExprFlags(e_ptr, d);$/;"	v
kind	$C2_LIBDIR/../analyser/module_analyser_type.c2	/^        BuiltinKind kind = ref.getBuiltinKind();$/;"	v
kind	$C2_LIBDIR/../analyser/module_analyser_unaryop.c2	/^    IdentifierKind kind = getInnerExprAddressOf(e);$/;"	v
kind	$C2_LIBDIR/../ast/identifier_expr.c2	/^    IdentifierKind kind = e.getKind();$/;"	v
kind	$C2_LIBDIR/../ast/member_expr.c2	/^    IdentifierKind kind = e.getKind();$/;"	v
kind	$C2_LIBDIR/../ast/unary_operator.c2	/^                kind == UnaryOpcode.Deref ? ValType.LValue : ValType.RValue);$/;"	v
kind	$C2_LIBDIR/../ast/value.c2	/^    ValueKind kind;$/;"	v
kind	$C2_LIBDIR/../ast/var_decl.c2	/^                                    VarDeclKind kind,$/;"	v
kind	$C2_LIBDIR/../ast_utils/attr.c2	/^    AttrKind kind;$/;"	v
kind	$C2_LIBDIR/../common/build_target.c2	/^    Kind kind;$/;"	v
kind	$C2_LIBDIR/../common/component.c2	/^    Kind kind;$/;"	v
kind	$C2_LIBDIR/../common/yaml/yaml_data.c2	/^    NodeKind kind;$/;"	v
kind	$C2_LIBDIR/../common/yaml/yaml_tokenizer.c2	/^    TokenKind kind;$/;"	v
kind	$C2_LIBDIR/../compiler/c2recipe_parser.c2	/^    Kind kind;$/;"	v
kind	$C2_LIBDIR/../compiler/compiler_libs.c2	/^    Kind kind = is_static ? Kind.ExternalStatic : Kind.ExternalDynamic;$/;"	v
kind	$C2_LIBDIR/../compiler/manifest.c2	/^        const char* kind = iter.getValue();$/;"	v
kind	$C2_LIBDIR/../generator/ir/ir_generator_binop.c2	/^    InstrKind kind = InstrKind.None;$/;"	v
kind	$C2_LIBDIR/../generator/ir/ir_generator_member.c2	/^    IdentifierKind kind = m.getKind();$/;"	v
kind	$C2_LIBDIR/../generator/ir/ir_generator_switch.c2	/^    BlockKind kind = sc.isDefault() ? BlockKind.SwitchDefault : BlockKind.SwitchCase;$/;"	v
kind	$C2_LIBDIR/../ir/context.c2	/^    InstrKind kind;$/;"	v
kind	$C2_LIBDIR/../parser/ast_builder.c2	/^    AttrKind kind = attr.find(name);$/;"	v
kind	$C2_LIBDIR/../parser/c2_parser.c2	/^    Kind kind = p.tok.kind;$/;"	v
kind	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    Kind kind = p.tok.kind;$/;"	v
kind	$C2_LIBDIR/../parser/c2_parser_stmt.c2	/^    const Kind kind = p.tok.kind;$/;"	v
kind	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^    Kind kind;$/;"	v
kind	$C2_LIBDIR/../parser/token.c2	/^    return kind == Kind.KW_const || kind == Kind.KW_volatile;$/;"	v
kind_dynamic	$C2_LIBDIR/../compiler/manifest.c2	/^    bool kind_dynamic = false;$/;"	v
kind_name	$C2_LIBDIR/../compiler/c2recipe_parser.c2	/^    u32 kind_name = p.token.value;$/;"	v
kind_names	$C2_LIBDIR/../common/component.c2	/^const char*[] kind_names = {$/;"	v
kind_names	$C2_LIBDIR/../compiler/c2recipe_parser.c2	/^const char*[] kind_names = {$/;"	v
kind_static	$C2_LIBDIR/../compiler/manifest.c2	/^    bool kind_static = false;$/;"	v
kind_str	$C2_LIBDIR/../analyser/module_analyser_expr.c2	/^        const char* kind_str = type2str(qt);$/;"	v
lab	$C2_LIBDIR/../analyser/module_analyser_stmt.c2	/^        Label lab = { .name_idx = name, .loc = s.getLoc(), .is_label = true, .used = false, .stm/;"	v
lab	$C2_LIBDIR/../generator/c/c_generator_stmt.c2	/^        u32 lab = 2;$/;"	v
label	$C2_LIBDIR/../analyser/module_analyser_stmt.c2	/^    Label* label = ma.labels.find(name);$/;"	v
labelStmtBits	$C2_LIBDIR/../ast/stmt.c2	/^        LabelStmtBits labelStmtBits;$/;"	v
label_blk	$C2_LIBDIR/../generator/ir/ir_generator_stmt.c2	/^        BlockId label_blk = gen.getLabelBlock(g.getNameIdx());$/;"	v
label_vector	$C2_LIBDIR/../analyser/label_vector.c2	/^module label_vector;$/;"	v
labels	$C2_LIBDIR/../analyser/module_analyser.c2	/^    LabelVector labels;$/;"	v
labels	$C2_LIBDIR/../analyser/module_analyser_function.c2	/^    const Label* labels = ma.labels.getLabels();$/;"	v
language	$C2_LIBDIR/../compiler/manifest.c2	/^    const char* language = parser.getScalarValue("info.language");$/;"	v
last	$C2_LIBDIR/../analyser/module_analyser_member.c2	/^                const char* last = m.getLastMemberName();$/;"	v
last	$C2_LIBDIR/../analyser/module_analyser_switch.c2	/^    Stmt* last = c.getStmt(count-1);$/;"	v
last	$C2_LIBDIR/../analyser/scope.c2	/^        u32 last = s.stack_count;$/;"	v
last	$C2_LIBDIR/../ast/member_expr.c2	/^    u32 last = e.getNumRefs() - 1;$/;"	v
last	$C2_LIBDIR/../ast_utils/context.c2	/^        Block* last = c.blk_tail;$/;"	v
last	$C2_LIBDIR/../common/source_mgr.c2	/^            u32 last = f.offset + f.data_size - 1;$/;"	v
last	$C2_LIBDIR/../generator/c2_trace.c2	/^            last = func;$/;"	v
last	$C2_LIBDIR/../generator/c2refs.c2	/^    u32* last = (u32*)f;$/;"	v
last	$C2_LIBDIR/../generator/ir/array_init_sorter.c2	/^    u32 last = 0;$/;"	v
last	$C2_LIBDIR/../ir/context.c2	/^        Instr* last = fi.instructions.get(b.instr.start + b.instr.count -1);$/;"	v
last	$C2_LIBDIR/../ir/instr_list.c2	/^        Instr* last = &l.instrs[l.count-1];$/;"	v
last	$C2_LIBDIR/../ir/interference_graph.c2	/^    Variable* last = &g.variables[last_idx];$/;"	v
last	$C2_LIBDIR/../ir/live_map.c2	/^    Variable* last = &g.variables[last_idx];$/;"	v
last	$C2_LIBDIR/../ir/print.c2	/^        u32 last = i_idx.start + i_idx.count;$/;"	v
last	$C2_LIBDIR/../ir/register_alloc.c2	/^    u32 last = b.instr.start + b.instr.count - 1;$/;"	v
last	$C2_LIBDIR/../ir/slot_writes_map.c2	/^    BlockWrites* last = &m.blocks[last_idx];$/;"	v
last	$C2_LIBDIR/../ir/ssa.c2	/^        u32 last = b.instr.start + b.instr.count;$/;"	v
last_case	$C2_LIBDIR/../ir/switch.c2	/^        bool last_case = (j == num_cases-1);$/;"	v
last_child	$C2_LIBDIR/../common/yaml/yaml_data.c2	/^    Node* last_child;$/;"	v
last_child_idx	$C2_LIBDIR/../common/yaml/yaml_data.c2	/^            u32 last_child_idx = cast<u32>(sl.last_child - d.nodes);$/;"	v
last_idx	$C2_LIBDIR/../ir/interference_graph.c2	/^    u16 last_idx = a.last_var;$/;"	v
last_idx	$C2_LIBDIR/../ir/live_map.c2	/^    u16 last_idx = a.last_var;$/;"	v
last_idx	$C2_LIBDIR/../ir/slot_writes_map.c2	/^    u16 last_idx = a.last_var;$/;"	v
last_index	$C2_LIBDIR/../generator/c/c_generator_trace.c2	/^    u32 last_index;$/;"	v
last_inserted_instr	$C2_LIBDIR/../ir/inserter.c2	/^    u32 last_inserted_instr;$/;"	v
last_line	$C2_LIBDIR/../generator/c2refs.c2	/^    u32 last_line = start + line - 1; \/\/ lines are 1-based$/;"	v
last_offset	$C2_LIBDIR/../generator/c/c_generator_expr.c2	/^    u32 last_offset;$/;"	v
last_var	$C2_LIBDIR/../ir/interference_graph.c2	/^    u16 last_var;   \/\/ NULL if none$/;"	v
last_var	$C2_LIBDIR/../ir/live_map.c2	/^    u16 last_var;   \/\/ NULL if none$/;"	v
last_var	$C2_LIBDIR/../ir/slot_writes_map.c2	/^    u16 last_var;   \/\/ NULL if none$/;"	v
lasterr	$C2_LIBDIR/../common/process_utils.c2	/^        i32 lasterr = errno;$/;"	v
layout	$C2_LIBDIR/../analyser/module_analyser_init.c2	/^    const StructLayout* layout = std.getLayout();$/;"	v
layout	$C2_LIBDIR/../analyser/size_analyser.c2	/^    StructLayout* layout = s.getLayout();$/;"	v
layout	$C2_LIBDIR/../ast/struct_type_decl.c2	/^    StructLayout* layout = d.getLayout();$/;"	v
layout	$C2_LIBDIR/../ast/var_decl.c2	/^    BitFieldLayout layout;$/;"	v
layout	$C2_LIBDIR/../generator/ir/ir_generator_expr.c2	/^    const StructLayout* layout = std.getLayout();$/;"	v
layout	$C2_LIBDIR/../generator/ir/ir_generator_member.c2	/^            const BitFieldLayout* layout = vd.getBitfieldLayout();$/;"	v
layouter	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^        FieldStructLayouter layouter;$/;"	v
layouter	$C2_LIBDIR/../generator/ir/ir_generator_expr.c2	/^        FieldStructLayouter layouter;$/;"	v
lbuiltin	$C2_LIBDIR/../analyser/conversion_checker.c2	/^    const BuiltinType* lbuiltin = (BuiltinType*)lcanon;$/;"	v
lcanon	$C2_LIBDIR/../analyser/conversion_checker.c2	/^    const Type* lcanon = t1.getTypeOrNil();$/;"	v
lcanon	$C2_LIBDIR/../analyser/module_analyser_binop.c2	/^    QualType lcanon = lhs.getCanonicalType();$/;"	v
lcanon	$C2_LIBDIR/../analyser/module_analyser_expr.c2	/^    QualType lcanon = lhs.getCanonicalType();$/;"	v
ldflags	$C2_LIBDIR/../common/build_file.c2	/^    u32 ldflags;    \/\/ before other flags$/;"	v
ldflags	$C2_LIBDIR/../generator/c/c_generator_special.c2	/^    const char* ldflags = "";$/;"	v
ldflags2	$C2_LIBDIR/../common/build_file.c2	/^    u32 ldflags2;   \/\/ after other flags$/;"	v
ldflags2	$C2_LIBDIR/../generator/c/c_generator_special.c2	/^    const char* ldflags2 = "";$/;"	v
leaf_nodes	$C2_LIBDIR/../generator/radix_tree/radix_tree_dump.c2	/^    u32 leaf_nodes;$/;"	v
left	$C2_LIBDIR/../analyser_utils/ctv_analyser.c2	/^    Value left = get_value(e.getLHS());$/;"	v
left	$C2_LIBDIR/../ast/ast_evaluator.c2	/^    Value left = eval.get_value(e.getLHS());$/;"	v
left	$C2_LIBDIR/../common/quicksort.c2	/^    u8* left = begin;$/;"	v
left	$C2_LIBDIR/../generator/c/c_generator_pure_call.c2	/^    Value left = eval.get_value(e.getLHS());$/;"	v
len	$C2_LIBDIR/../analyser/module_analyser.c2	/^        u32 len = reader.data_size();$/;"	v
len	$C2_LIBDIR/../analyser/module_analyser_switch.c2	/^                u32 len = lit.getSize() - 1;$/;"	v
len	$C2_LIBDIR/../analyser_utils/printf_utils.c2	/^            u32 len = 0;$/;"	v
len	$C2_LIBDIR/../ast/string_type_pool.c2	/^    u32 len;$/;"	v
len	$C2_LIBDIR/../ast/value.c2	/^    usize len = size - 1;$/;"	v
len	$C2_LIBDIR/../ast_utils/context.c2	/^    len = (len + 7) & ~0x7; \/\/ always round to 8-byte boundaries$/;"	v
len	$C2_LIBDIR/../ast_utils/string_buffer.c2	/^    u32 len = (u32)strlen(text);$/;"	v
len	$C2_LIBDIR/../common/diagnostics.c2	/^        u32 len = 0;$/;"	v
len	$C2_LIBDIR/../common/file/file_utils.c2	/^    u32 len = (u32)strlen(file.path);$/;"	v
len	$C2_LIBDIR/../common/process_utils.c2	/^    usize len = strlen(args);$/;"	v
len	$C2_LIBDIR/../common/string_utils.c2	/^    usize len = strlen(text);$/;"	v
len	$C2_LIBDIR/../common/yaml/yaml_dump.c2	/^            u32 len = cast<u32>(strlen(cp));$/;"	v
len	$C2_LIBDIR/../common/yaml/yaml_iterator.c2	/^    u32 len = cast<u32>(string.strlen(start));$/;"	v
len	$C2_LIBDIR/../compiler/c2recipe_parser.c2	/^    u32 len = cast<u32>(p.cur - start);$/;"	v
len	$C2_LIBDIR/../generator/c/c_generator.c2	/^        usize len;$/;"	v
len	$C2_LIBDIR/../generator/c2refs.c2	/^    u32 len = cast<u32>(strlen(filename)) + 1; \/\/ add 0-terminator$/;"	v
len	$C2_LIBDIR/../generator/radix_tree/radix_tree.c2	/^    u32 len; \/\/ in buf$/;"	v
len	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    u32 len = p.tok.text_len;$/;"	v
len	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^    usize len = (usize)(t.cur - start);$/;"	v
len	$C2_LIBDIR/../parser/keywords.c2	/^        u32 len;$/;"	v
len	$C2_LIBDIR/../plugins/deps_generator.c2	/^                u32 len = cast<u32>(cp - start);$/;"	v
len	$C2_LIBDIR/../plugins/git_version_plugin.c2	/^    u32 len = cast<u32>(strlen(p.version));$/;"	v
len	$C2_LIBDIR/../plugins/refs_generator.c2	/^    u16 len = cast<u16>(string.strlen(idx2name(ref.name_idx)));$/;"	v
len2	$C2_LIBDIR/../common/process_utils.c2	/^        i32 len2 = (len > 0 && s[len - 1] != '\/');$/;"	v
len2	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^            usize len2 = p.tok.text_len;$/;"	v
len3	$C2_LIBDIR/../common/process_utils.c2	/^        i32 len3 = snprintf(dest, size, "%.*s%.*s%s", len, s, len2, "\/", name);$/;"	v
len_count	$C2_LIBDIR/../generator/c2refs.c2	/^    u32 len_count;$/;"	v
len_count	$C2_LIBDIR/../plugins/refs_generator.c2	/^    u32 len_count = 0;$/;"	v
len_start	$C2_LIBDIR/../generator/c2refs.c2	/^    u32 len_start;$/;"	v
len_start	$C2_LIBDIR/../plugins/refs_generator.c2	/^    u32 len_start = 0;$/;"	v
lengths	$C2_LIBDIR/../generator/c2refs.c2	/^    u8[0] lengths;$/;"	v
lengths	$C2_LIBDIR/../plugins/refs_generator.c2	/^    u8* lengths;$/;"	v
lengths2	$C2_LIBDIR/../plugins/refs_generator.c2	/^    u8* lengths2 = stdlib.malloc(l.cap * sizeof(u8));$/;"	v
letter	$C2_LIBDIR/../generator/c/c_generator_expr.c2	/^        letter = 'u';$/;"	v
lhs	$C2_LIBDIR/../analyser/conversion_checker.c2	/^    QualType lhs;$/;"	v
lhs	$C2_LIBDIR/../analyser/conversion_checker_expr.c2	/^    ExprWidth lhs = getExprWidth(c.getLHS());$/;"	v
lhs	$C2_LIBDIR/../analyser/module_analyser.c2	/^    Expr* lhs = sa.getLhs();$/;"	v
lhs	$C2_LIBDIR/../analyser/module_analyser_binop.c2	/^    Expr* lhs = b.getLHS();$/;"	v
lhs	$C2_LIBDIR/../analyser/module_analyser_expr.c2	/^    QualType lhs = ma.analyseExpr(cond.getLHS2(), true, RHS);$/;"	v
lhs	$C2_LIBDIR/../analyser/module_analyser_switch.c2	/^            Expr* lhs = re.getLHS();$/;"	v
lhs	$C2_LIBDIR/../analyser/module_analyser_unaryop.c2	/^        QualType lhs = getMinusType(canon);$/;"	v
lhs	$C2_LIBDIR/../ast/array_subscript_expr.c2	/^    Expr* lhs;$/;"	v
lhs	$C2_LIBDIR/../ast/binary_operator.c2	/^    Expr* lhs;$/;"	v
lhs	$C2_LIBDIR/../ast/bitoffset_expr.c2	/^    Expr* lhs;$/;"	v
lhs	$C2_LIBDIR/../ast/conditional_operator.c2	/^    Expr* lhs;$/;"	v
lhs	$C2_LIBDIR/../ast/range_expr.c2	/^    Expr* lhs;$/;"	v
lhs	$C2_LIBDIR/../ast/static_assert.c2	/^    Expr* lhs;$/;"	v
lhs	$C2_LIBDIR/../generator/c/c_generator_expr.c2	/^    Expr* lhs = b.getLHS();$/;"	v
lhs	$C2_LIBDIR/../parser/ast_builder.c2	/^                                            Expr* lhs,$/;"	v
lhs	$C2_LIBDIR/../parser/c2_parser.c2	/^    Expr* lhs = p.parseExpr();$/;"	v
lhs	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    Expr* lhs = p.parseCastExpr(false, false);$/;"	v
lhs_index	$C2_LIBDIR/../analyser/module_analyser_switch.c2	/^            u32 lhs_index = 0;  \/\/ numerical case value (or string index)$/;"	v
lhs_len	$C2_LIBDIR/../analyser/module_analyser_init.c2	/^                    u32 lhs_len = at.getSize();$/;"	v
lhs_name_idx	$C2_LIBDIR/../analyser/module_analyser_switch.c2	/^            u32 lhs_name_idx = 0;   \/\/ name index of enum constant$/;"	v
lib	$C2_LIBDIR/../common/library_list.c2	/^        const Lib* lib = &l.libs[i];$/;"	v
libc_name	$C2_LIBDIR/../compiler/compiler.c2	/^    u32 libc_name; \/\/ in auxPool$/;"	v
libc_name	$C2_LIBDIR/../generator/c/c_generator.c2	/^    u32 libc_name = auxPool.addStr("libc", true);$/;"	v
libdir	$C2_LIBDIR/../compiler/compiler.c2	/^    u32 libdir; \/\/ from environment varible C2_LIBDIR, into auxPool$/;"	v
libdir	$C2_LIBDIR/../compiler/main.c2	/^    const char* libdir = getenv("C2_LIBDIR");$/;"	v
libname	$C2_LIBDIR/../compiler/c2recipe_parser.c2	/^            u32 libname = p.token.value;$/;"	v
library_list	$C2_LIBDIR/../common/build_target.c2	/^import library_list;$/;"	v
library_list	$C2_LIBDIR/../common/library_list.c2	/^module library_list;$/;"	v
libs	$C2_LIBDIR/../common/library_list.c2	/^    Lib* libs;$/;"	v
libs2	$C2_LIBDIR/../common/library_list.c2	/^    Lib* libs2 = stdlib.malloc(l.capacity * sizeof(Lib));$/;"	v
libstr	$C2_LIBDIR/../compiler/compiler_libs.c2	/^    const char* libstr = comp.getName();$/;"	v
libtype	$C2_LIBDIR/../compiler/c2recipe_parser.c2	/^            const char* libtype = p.pool.idx2str(p.token.value);$/;"	v
line	$C2_LIBDIR/../common/source_mgr.c2	/^    u32 line;$/;"	v
line	$C2_LIBDIR/../common/yaml/yaml_tokenizer.c2	/^    u32 line;$/;"	v
line	$C2_LIBDIR/../generator/c/c_generator_trace.c2	/^    u16 line;$/;"	v
line	$C2_LIBDIR/../generator/c2refs.c2	/^    u32 line;$/;"	v
line	$C2_LIBDIR/../plugins/refs_generator.c2	/^    u32 line;$/;"	v
line_len	$C2_LIBDIR/../plugins/refs_generator.c2	/^        u8 line_len = l.lengths[line];$/;"	v
line_lengths	$C2_LIBDIR/../generator/c2refs.c2	/^    Lengths* line_lengths;$/;"	v
line_start	$C2_LIBDIR/../common/source_mgr.c2	/^    const char* line_start;$/;"	v
line_start	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^    const char* line_start;$/;"	v
lines	$C2_LIBDIR/../common/source_mgr.c2	/^        u32 lines = 0;$/;"	v
lines	$C2_LIBDIR/../plugins/refs_generator.c2	/^    LineCounter lines;$/;"	v
link	$C2_LIBDIR/../generator/c2refs.c2	/^    Link* link = &t.data[idx];$/;"	v
link_count	$C2_LIBDIR/../generator/c2refs.c2	/^    u32 link_count;$/;"	v
link_start	$C2_LIBDIR/../generator/c2refs.c2	/^    u32 link_start;$/;"	v
linked_list	$C2_LIBDIR/../common/linked_list.c2	/^module linked_list;$/;"	v
linked_list	$C2_LIBDIR/../generator/c/c_generator.c2	/^import linked_list;$/;"	v
linked_list	$C2_LIBDIR/../generator/radix_tree/radix_tree.c2	/^import linked_list;$/;"	v
linked_list	$C2_LIBDIR/../generator/radix_tree/radix_tree_dump.c2	/^import linked_list;$/;"	v
linked_list	$C2_LIBDIR/../generator/radix_tree/radix_tree_fs.c2	/^import linked_list;$/;"	v
linkerscript	$C2_LIBDIR/../common/build_file.c2	/^    u32 linkerscript;$/;"	v
linkname	$C2_LIBDIR/../common/component.c2	/^    u32 linkname;   \/\/ into auxPool$/;"	v
linkname	$C2_LIBDIR/../compiler/manifest.c2	/^    const char* linkname = parser.getScalarValue("info.linkname");$/;"	v
linkname	$C2_LIBDIR/../generator/c/c_generator_special.c2	/^            const char* linkname = c.getLinkName();$/;"	v
links	$C2_LIBDIR/../generator/c2refs.c2	/^    const Link* links = r.links.data;$/;"	v
linner	$C2_LIBDIR/../analyser/conversion_checker.c2	/^    QualType linner = ltype.getInner();$/;"	v
list_calls	$C2_LIBDIR/../generator/c2_trace.c2	/^fn void list_calls() @(destructor, unused) {$/;"	f
lit	$C2_LIBDIR/../analyser/module_analyser_switch.c2	/^                StringLiteral* lit = (StringLiteral*)orig;$/;"	v
lit	$C2_LIBDIR/../generator/c/c_generator_stmt.c2	/^                StringLiteral* lit = cast<StringLiteral*>(e);$/;"	v
load	$C2_LIBDIR/../plugins/deps_generator_plugin.c2	/^fn void* load(const char* options, bool show_timing, bool show_debug) {$/;"	f
load	$C2_LIBDIR/../plugins/git_version_plugin.c2	/^fn void* load(const char* options, bool show_timing, bool show_debug) {$/;"	f
load	$C2_LIBDIR/../plugins/plugin_info.c2	/^    LoadFn load;$/;"	v
load	$C2_LIBDIR/../plugins/refs_generator_plugin.c2	/^fn void* load(const char* options, bool show_timing, bool show_debug) {$/;"	f
load	$C2_LIBDIR/../plugins/shell_cmd_plugin.c2	/^fn void* load(const char* options, bool show_timing, bool show_debug) {$/;"	f
load	$C2_LIBDIR/../plugins/unit_test_plugin.c2	/^fn void* load(const char* options, bool show_timing, bool show_debug) {$/;"	f
load_size	$C2_LIBDIR/../generator/c2refs.c2	/^    u32 load_size = section_size(section);$/;"	v
load_size	$C2_LIBDIR/../generator/radix_tree/radix_tree_fs.c2	/^    u32 load_size = section_size(section);$/;"	v
loc	$C2_LIBDIR/../analyser/conversion_checker.c2	/^    SrcLoc loc;$/;"	v
loc	$C2_LIBDIR/../analyser/incr_array_list.c2	/^    SrcLoc loc; \/\/ only for first entry$/;"	v
loc	$C2_LIBDIR/../analyser/init_checker.c2	/^    SrcLoc loc;$/;"	v
loc	$C2_LIBDIR/../analyser/label_vector.c2	/^    SrcLoc loc;$/;"	v
loc	$C2_LIBDIR/../analyser/module_analyser_builtin.c2	/^            SrcLoc loc = m.getLoc(i);$/;"	v
loc	$C2_LIBDIR/../analyser/module_analyser_call.c2	/^    SrcLoc loc;$/;"	v
loc	$C2_LIBDIR/../analyser/module_analyser_init.c2	/^        SrcLoc loc;$/;"	v
loc	$C2_LIBDIR/../analyser/module_analyser_member.c2	/^        SrcLoc loc = m.getLoc(i);$/;"	v
loc	$C2_LIBDIR/../analyser/module_analyser_switch.c2	/^    SrcLoc loc = last.getLoc();$/;"	v
loc	$C2_LIBDIR/../analyser_utils/ctv_analyser.c2	/^            loc = e.getLoc();$/;"	v
loc	$C2_LIBDIR/../ast/alias_type_decl.c2	/^                                                SrcLoc loc,$/;"	v
loc	$C2_LIBDIR/../ast/array_designated_init_expr.c2	/^                                                                    SrcLoc loc,$/;"	v
loc	$C2_LIBDIR/../ast/array_subscript_expr.c2	/^                                                          SrcLoc loc, u32 src_len,$/;"	v
loc	$C2_LIBDIR/../ast/array_value.c2	/^    SrcLoc loc;$/;"	v
loc	$C2_LIBDIR/../ast/asm_stmt.c2	/^                                    SrcLoc loc,$/;"	v
loc	$C2_LIBDIR/../ast/assert_stmt.c2	/^                                          SrcLoc loc,$/;"	v
loc	$C2_LIBDIR/../ast/call_expr.c2	/^                                      SrcLoc loc,$/;"	v
loc	$C2_LIBDIR/../ast/decl.c2	/^        SrcLoc loc;$/;"	v
loc	$C2_LIBDIR/../ast/enum_constant_decl.c2	/^                                                      SrcLoc loc,$/;"	v
loc	$C2_LIBDIR/../ast/enum_type_decl.c2	/^                                              SrcLoc loc,$/;"	v
loc	$C2_LIBDIR/../ast/explicit_cast_expr.c2	/^                                                      SrcLoc loc, u32 src_len,$/;"	v
loc	$C2_LIBDIR/../ast/expr.c2	/^                  SrcLoc loc,$/;"	v
loc	$C2_LIBDIR/../ast/field_designated_init_expr.c2	/^                                                                  SrcLoc loc,$/;"	v
loc	$C2_LIBDIR/../ast/function_decl.c2	/^                                              SrcLoc loc,$/;"	v
loc	$C2_LIBDIR/../ast/import_decl.c2	/^                                          SrcLoc loc,$/;"	v
loc	$C2_LIBDIR/../ast/static_assert.c2	/^    u32 loc;$/;"	v
loc	$C2_LIBDIR/../ast/stmt.c2	/^    SrcLoc loc;$/;"	v
loc	$C2_LIBDIR/../ast/struct_type_decl.c2	/^                                                  SrcLoc loc,$/;"	v
loc	$C2_LIBDIR/../ast/switch_case.c2	/^    SrcLoc loc;$/;"	v
loc	$C2_LIBDIR/../ast/switch_stmt.c2	/^                                          SrcLoc loc,$/;"	v
loc	$C2_LIBDIR/../ast/type_expr.c2	/^                                    SrcLoc loc,$/;"	v
loc	$C2_LIBDIR/../ast/type_ref.c2	/^    SrcLoc loc;$/;"	v
loc	$C2_LIBDIR/../ast/var_decl.c2	/^    SrcLoc loc;$/;"	v
loc	$C2_LIBDIR/../ast_utils/attr.c2	/^    SrcLoc loc;$/;"	v
loc	$C2_LIBDIR/../common/build_file.c2	/^    SrcLoc loc; \/\/ TODO FILL (is in yaml parser)$/;"	v
loc	$C2_LIBDIR/../common/build_target.c2	/^    SrcLoc loc;$/;"	v
loc	$C2_LIBDIR/../common/diagnostics.c2	/^                                SrcLoc loc,$/;"	v
loc	$C2_LIBDIR/../common/source_mgr.c2	/^    Location loc = sm.locate(sloc);$/;"	v
loc	$C2_LIBDIR/../common/yaml/yaml_tokenizer.c2	/^    Location loc;$/;"	v
loc	$C2_LIBDIR/../compiler/c2recipe_parser.c2	/^    SrcLoc loc;$/;"	v
loc	$C2_LIBDIR/../ir/inserter.c2	/^    return loc == ins.next_loc;$/;"	v
loc	$C2_LIBDIR/../ir/ssa.c2	/^            u32 loc = b.instr.start;$/;"	v
loc	$C2_LIBDIR/../ir/switch.c2	/^    u32 loc = fi.instructions.getCount();$/;"	v
loc	$C2_LIBDIR/../parser/ast_builder.c2	/^                          loc,$/;"	v
loc	$C2_LIBDIR/../parser/c2_parser.c2	/^    SrcLoc loc = p.tok.loc;$/;"	v
loc	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    SrcLoc loc = p.tok.loc;$/;"	v
loc	$C2_LIBDIR/../parser/c2_parser_stmt.c2	/^    SrcLoc loc = p.tok.loc;$/;"	v
loc	$C2_LIBDIR/../parser/c2_parser_switch.c2	/^    SrcLoc loc = p.tok.loc;$/;"	v
loc	$C2_LIBDIR/../parser/c2_parser_type.c2	/^            SrcLoc loc;$/;"	v
loc	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^    SrcLoc loc;     \/\/ location of the initial #if\/#ifdef...$/;"	v
loc	$C2_LIBDIR/../parser/token.c2	/^    SrcLoc loc;$/;"	v
loc	$C2_LIBDIR/../plugins/refs_generator.c2	/^    return loc;$/;"	v
loc_col	$C2_LIBDIR/../common/diagnostics.c2	/^        u32 loc_col = loc.column;       \/\/ column number for the error$/;"	v
loc_start	$C2_LIBDIR/../compiler/c2recipe_parser.c2	/^    SrcLoc loc_start;$/;"	v
loc_start	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^    SrcLoc loc_start;$/;"	v
loc_str	$C2_LIBDIR/../compiler/main.c2	/^            char[256] loc_str;$/;"	v
loc_str	$C2_LIBDIR/../generator/ir/ir_generator_stmt.c2	/^    ExprRef loc_str;$/;"	v
local	$C2_LIBDIR/../analyser/conversion_checker.c2	/^import src_loc local;$/;"	v
local	$C2_LIBDIR/../analyser/conversion_checker_expr.c2	/^import ast local;$/;"	v
local	$C2_LIBDIR/../analyser/incr_array_list.c2	/^import src_loc local;$/;"	v
local	$C2_LIBDIR/../analyser/init_checker.c2	/^import src_loc local;$/;"	v
local	$C2_LIBDIR/../analyser/label_vector.c2	/^import src_loc local;$/;"	v
local	$C2_LIBDIR/../analyser/module_analyser.c2	/^import stdarg local;$/;"	v
local	$C2_LIBDIR/../analyser/module_analyser_binop.c2	/^import c_prec local;$/;"	v
local	$C2_LIBDIR/../analyser/module_analyser_builtin.c2	/^import src_loc local;$/;"	v
local	$C2_LIBDIR/../analyser/module_analyser_call.c2	/^import src_loc local;$/;"	v
local	$C2_LIBDIR/../analyser/module_analyser_expr.c2	/^import src_loc local;$/;"	v
local	$C2_LIBDIR/../analyser/module_analyser_function.c2	/^import label_vector local;$/;"	v
local	$C2_LIBDIR/../analyser/module_analyser_init.c2	/^import src_loc local;$/;"	v
local	$C2_LIBDIR/../analyser/module_analyser_member.c2	/^import src_loc local;$/;"	v
local	$C2_LIBDIR/../analyser/module_analyser_stmt.c2	/^import label_vector local;$/;"	v
local	$C2_LIBDIR/../analyser/module_analyser_struct.c2	/^import name_vector local;$/;"	v
local	$C2_LIBDIR/../analyser/module_analyser_switch.c2	/^import src_loc local;$/;"	v
local	$C2_LIBDIR/../analyser/module_analyser_type.c2	/^import src_loc local;$/;"	v
local	$C2_LIBDIR/../analyser/module_analyser_unaryop.c2	/^import src_loc local;$/;"	v
local	$C2_LIBDIR/../analyser/module_sorter.c2	/^import stdio local;$/;"	v
local	$C2_LIBDIR/../analyser/scope.c2	/^import src_loc local;$/;"	v
local	$C2_LIBDIR/../analyser/size_analyser.c2	/^import ast local;$/;"	v
local	$C2_LIBDIR/../analyser/struct_field_init_checker.c2	/^import src_loc local;$/;"	v
local	$C2_LIBDIR/../analyser/unused_checker.c2	/^import ast local;$/;"	v
local	$C2_LIBDIR/../analyser_utils/ctv_analyser.c2	/^import src_loc local;$/;"	v
local	$C2_LIBDIR/../analyser_utils/printf_utils.c2	/^import src_loc local;$/;"	v
local	$C2_LIBDIR/../ast/alias_type_decl.c2	/^import src_loc local;$/;"	v
local	$C2_LIBDIR/../ast/array_designated_init_expr.c2	/^import src_loc local;$/;"	v
local	$C2_LIBDIR/../ast/array_subscript_expr.c2	/^import src_loc local;$/;"	v
local	$C2_LIBDIR/../ast/array_value.c2	/^import src_loc local;$/;"	v
local	$C2_LIBDIR/../ast/array_value_list.c2	/^import string local;$/;"	v
local	$C2_LIBDIR/../ast/asm_stmt.c2	/^import src_loc local;$/;"	v
local	$C2_LIBDIR/../ast/assert_stmt.c2	/^import src_loc local;$/;"	v
local	$C2_LIBDIR/../ast/ast.c2	/^import src_loc local;$/;"	v
local	$C2_LIBDIR/../ast/ast_evaluator.c2	/^import stdio local;$/;"	v
local	$C2_LIBDIR/../ast/binary_operator.c2	/^import src_loc local;$/;"	v
local	$C2_LIBDIR/../ast/bitoffset_expr.c2	/^import src_loc local;$/;"	v
local	$C2_LIBDIR/../ast/boolean_literal.c2	/^import src_loc local;$/;"	v
local	$C2_LIBDIR/../ast/break_stmt.c2	/^import src_loc local;$/;"	v
local	$C2_LIBDIR/../ast/builtin_expr.c2	/^import src_loc local;$/;"	v
local	$C2_LIBDIR/../ast/call_expr.c2	/^import src_loc local;$/;"	v
local	$C2_LIBDIR/../ast/char_literal.c2	/^import src_loc local;$/;"	v
local	$C2_LIBDIR/../ast/compound_stmt.c2	/^import src_loc local;$/;"	v
local	$C2_LIBDIR/../ast/conditional_operator.c2	/^import src_loc local;$/;"	v
local	$C2_LIBDIR/../ast/continue_stmt.c2	/^import src_loc local;$/;"	v
local	$C2_LIBDIR/../ast/decl.c2	/^import src_loc local;$/;"	v
local	$C2_LIBDIR/../ast/decl_list.c2	/^import string local;$/;"	v
local	$C2_LIBDIR/../ast/decl_stmt.c2	/^import string local;$/;"	v
local	$C2_LIBDIR/../ast/enum_constant_decl.c2	/^import src_loc local;$/;"	v
local	$C2_LIBDIR/../ast/enum_type_decl.c2	/^import src_loc local;$/;"	v
local	$C2_LIBDIR/../ast/explicit_cast_expr.c2	/^import src_loc local;$/;"	v
local	$C2_LIBDIR/../ast/expr.c2	/^import src_loc local;$/;"	v
local	$C2_LIBDIR/../ast/expr_list.c2	/^import string local;$/;"	v
local	$C2_LIBDIR/../ast/fallthrough_stmt.c2	/^import src_loc local;$/;"	v
local	$C2_LIBDIR/../ast/field_designated_init_expr.c2	/^import src_loc local;$/;"	v
local	$C2_LIBDIR/../ast/float_literal.c2	/^import src_loc local;$/;"	v
local	$C2_LIBDIR/../ast/for_stmt.c2	/^import src_loc local;$/;"	v
local	$C2_LIBDIR/../ast/function_decl.c2	/^import src_loc local;$/;"	v
local	$C2_LIBDIR/../ast/goto_stmt.c2	/^import src_loc local;$/;"	v
local	$C2_LIBDIR/../ast/identifier_expr.c2	/^import string local;$/;"	v
local	$C2_LIBDIR/../ast/if_stmt.c2	/^import src_loc local;$/;"	v
local	$C2_LIBDIR/../ast/implicit_cast_expr.c2	/^import src_loc local;$/;"	v
local	$C2_LIBDIR/../ast/import_decl.c2	/^import src_loc local;$/;"	v
local	$C2_LIBDIR/../ast/import_decl_list.c2	/^import string local;$/;"	v
local	$C2_LIBDIR/../ast/init_list_expr.c2	/^import src_loc local;$/;"	v
local	$C2_LIBDIR/../ast/integer_literal.c2	/^import src_loc local;$/;"	v
local	$C2_LIBDIR/../ast/label_stmt.c2	/^import src_loc local;$/;"	v
local	$C2_LIBDIR/../ast/member_expr.c2	/^import src_loc local;$/;"	v
local	$C2_LIBDIR/../ast/nil_expr.c2	/^import src_loc local;$/;"	v
local	$C2_LIBDIR/../ast/paren_expr.c2	/^import src_loc local;$/;"	v
local	$C2_LIBDIR/../ast/pointer_pool.c2	/^import string local;$/;"	v
local	$C2_LIBDIR/../ast/qualtype.c2	/^import stdio local;$/;"	v
local	$C2_LIBDIR/../ast/range_expr.c2	/^import src_loc local;$/;"	v
local	$C2_LIBDIR/../ast/return_stmt.c2	/^import src_loc local;$/;"	v
local	$C2_LIBDIR/../ast/static_assert.c2	/^import src_loc local;$/;"	v
local	$C2_LIBDIR/../ast/static_assert_list.c2	/^import string local;$/;"	v
local	$C2_LIBDIR/../ast/statistics.c2	/^import stdio local;$/;"	v
local	$C2_LIBDIR/../ast/stmt.c2	/^import src_loc local;$/;"	v
local	$C2_LIBDIR/../ast/string_literal.c2	/^import src_loc local;$/;"	v
local	$C2_LIBDIR/../ast/string_type_pool.c2	/^import string local;$/;"	v
local	$C2_LIBDIR/../ast/struct_type_decl.c2	/^import src_loc local;$/;"	v
local	$C2_LIBDIR/../ast/switch_case.c2	/^import src_loc local;$/;"	v
local	$C2_LIBDIR/../ast/switch_stmt.c2	/^import src_loc local;$/;"	v
local	$C2_LIBDIR/../ast/symbol_table.c2	/^import stdio local;$/;"	v
local	$C2_LIBDIR/../ast/type_expr.c2	/^import src_loc local;$/;"	v
local	$C2_LIBDIR/../ast/type_ref.c2	/^import src_loc local;$/;"	v
local	$C2_LIBDIR/../ast/unary_operator.c2	/^import src_loc local;$/;"	v
local	$C2_LIBDIR/../ast/utils.c2	/^import ast_context local;$/;"	v
local	$C2_LIBDIR/../ast/value.c2	/^import c2 local;$/;"	v
local	$C2_LIBDIR/../ast/var_decl.c2	/^import src_loc local;$/;"	v
local	$C2_LIBDIR/../ast/while_stmt.c2	/^import src_loc local;$/;"	v
local	$C2_LIBDIR/../ast_utils/attr.c2	/^import src_loc local;$/;"	v
local	$C2_LIBDIR/../ast_utils/context.c2	/^import string local;$/;"	v
local	$C2_LIBDIR/../ast_utils/string_buffer.c2	/^import string local;$/;"	v
local	$C2_LIBDIR/../common/build_file.c2	/^import stdio local;$/;"	v
local	$C2_LIBDIR/../common/build_target.c2	/^import src_loc local;$/;"	v
local	$C2_LIBDIR/../common/c2_prec.c2	/^import ast local;$/;"	v
local	$C2_LIBDIR/../common/c_prec.c2	/^import ast local;$/;"	v
local	$C2_LIBDIR/../common/component.c2	/^import stdlib local;$/;"	v
local	$C2_LIBDIR/../common/component_sorter.c2	/^import component local;$/;"	v
local	$C2_LIBDIR/../common/console.c2	/^import stdio local;$/;"	v
local	$C2_LIBDIR/../common/diagnostics.c2	/^import stdio local;$/;"	v
local	$C2_LIBDIR/../common/file/file_utils.c2	/^import sys_stat local;$/;"	v
local	$C2_LIBDIR/../common/file/reader.c2	/^import unistd local;$/;"	v
local	$C2_LIBDIR/../common/file/writer.c2	/^import unistd local;$/;"	v
local	$C2_LIBDIR/../common/manifest_writer.c2	/^import stdlib local;$/;"	v
local	$C2_LIBDIR/../common/process_utils.c2	/^import unistd local;$/;"	v
local	$C2_LIBDIR/../common/source_mgr.c2	/^import src_loc local;$/;"	v
local	$C2_LIBDIR/../common/string_list.c2	/^import string local;$/;"	v
local	$C2_LIBDIR/../common/string_utils.c2	/^import string local;$/;"	v
local	$C2_LIBDIR/../common/target_info.c2	/^import string local;$/;"	v
local	$C2_LIBDIR/../common/utils.c2	/^import sys_stat local;$/;"	v
local	$C2_LIBDIR/../common/yaml/yaml_data.c2	/^import string local;$/;"	v
local	$C2_LIBDIR/../common/yaml/yaml_dump.c2	/^import string local;$/;"	v
local	$C2_LIBDIR/../common/yaml/yaml_parser.c2	/^import stdlib local;$/;"	v
local	$C2_LIBDIR/../common/yaml/yaml_tokenizer.c2	/^import string local;$/;"	v
local	$C2_LIBDIR/../compiler/c2recipe.c2	/^import src_loc local;$/;"	v
local	$C2_LIBDIR/../compiler/c2recipe_parser.c2	/^import stdio local;$/;"	v
local	$C2_LIBDIR/../compiler/c2recipe_yaml.c2	/^import stdio local;$/;"	v
local	$C2_LIBDIR/../compiler/compiler.c2	/^import c_errno local;$/;"	v
local	$C2_LIBDIR/../compiler/compiler_libs.c2	/^import libc_dirent local;$/;"	v
local	$C2_LIBDIR/../compiler/main.c2	/^import string local;$/;"	v
local	$C2_LIBDIR/../compiler/manifest.c2	/^import string local;$/;"	v
local	$C2_LIBDIR/../compiler/plugin_mgr.c2	/^import string local;$/;"	v
local	$C2_LIBDIR/../generator/ast_visitor.c2	/^import ast local;$/;"	v
local	$C2_LIBDIR/../generator/ast_visitor_expr.c2	/^import ast local;$/;"	v
local	$C2_LIBDIR/../generator/c/c_generator.c2	/^import c_prec local;$/;"	v
local	$C2_LIBDIR/../generator/c/c_generator_call.c2	/^import src_loc local;$/;"	v
local	$C2_LIBDIR/../generator/c/c_generator_expr.c2	/^import c_prec local;$/;"	v
local	$C2_LIBDIR/../generator/c/c_generator_pure_call.c2	/^import ast local;$/;"	v
local	$C2_LIBDIR/../generator/c/c_generator_stmt.c2	/^import ast local;$/;"	v
local	$C2_LIBDIR/../generator/c/c_generator_trace.c2	/^import src_loc local;$/;"	v
local	$C2_LIBDIR/../generator/c/dep_finder.c2	/^import ast local;$/;"	v
local	$C2_LIBDIR/../generator/c2_trace.c2	/^import string local;$/;"	v
local	$C2_LIBDIR/../generator/c2i/c2i_generator.c2	/^import ast local;$/;"	v
local	$C2_LIBDIR/../generator/c2i/c2i_generator_decl.c2	/^import ast local;$/;"	v
local	$C2_LIBDIR/../generator/c2i/c2i_generator_expr.c2	/^import ast local;$/;"	v
local	$C2_LIBDIR/../generator/c2i/c2i_generator_stmt.c2	/^import ast local;$/;"	v
local	$C2_LIBDIR/../generator/c2refs.c2	/^import unistd local;$/;"	v
local	$C2_LIBDIR/../generator/generator_utils.c2	/^import ast local;$/;"	v
local	$C2_LIBDIR/../generator/ir/field_struct_layouter.c2	/^import ir local;$/;"	v
local	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^import ir_gen_locals local;$/;"	v
local	$C2_LIBDIR/../generator/ir/ir_generator_binop.c2	/^import ir local;$/;"	v
local	$C2_LIBDIR/../generator/ir/ir_generator_call.c2	/^import ref_list local;$/;"	v
local	$C2_LIBDIR/../generator/ir/ir_generator_expr.c2	/^import ir_gen_locals local;$/;"	v
local	$C2_LIBDIR/../generator/ir/ir_generator_member.c2	/^import ir local;$/;"	v
local	$C2_LIBDIR/../generator/ir/ir_generator_stmt.c2	/^import ir local;$/;"	v
local	$C2_LIBDIR/../generator/ir/ir_generator_switch.c2	/^import ir local;$/;"	v
local	$C2_LIBDIR/../generator/ir/ref_list.c2	/^import string local;$/;"	v
local	$C2_LIBDIR/../generator/radix_tree/radix_tree.c2	/^import string local;$/;"	v
local	$C2_LIBDIR/../generator/radix_tree/radix_tree_dump.c2	/^import stdio local;$/;"	v
local	$C2_LIBDIR/../generator/radix_tree/radix_tree_fs.c2	/^import string local;$/;"	v
local	$C2_LIBDIR/../ir/block_list.c2	/^import string local;$/;"	v
local	$C2_LIBDIR/../ir/case_list.c2	/^import string local;$/;"	v
local	$C2_LIBDIR/../ir/constant_list.c2	/^import string local;$/;"	v
local	$C2_LIBDIR/../ir/context.c2	/^import ir_slot_values local;$/;"	v
local	$C2_LIBDIR/../ir/copy_list.c2	/^import string local;$/;"	v
local	$C2_LIBDIR/../ir/graphviz.c2	/^import ir local;$/;"	v
local	$C2_LIBDIR/../ir/init_value_list.c2	/^import string local;$/;"	v
local	$C2_LIBDIR/../ir/inserter.c2	/^import stdio local;$/;"	v
local	$C2_LIBDIR/../ir/instr.c2	/^import string local;$/;"	v
local	$C2_LIBDIR/../ir/instr_list.c2	/^import string local;$/;"	v
local	$C2_LIBDIR/../ir/interference_graph.c2	/^import stdio local;$/;"	v
local	$C2_LIBDIR/../ir/live_map.c2	/^import stdio local;$/;"	v
local	$C2_LIBDIR/../ir/phi_list.c2	/^import string local;$/;"	v
local	$C2_LIBDIR/../ir/print.c2	/^import ir local;$/;"	v
local	$C2_LIBDIR/../ir/register_alloc.c2	/^import stdio local;$/;"	v
local	$C2_LIBDIR/../ir/rev_list.c2	/^import stdio local;$/;"	v
local	$C2_LIBDIR/../ir/rpo.c2	/^import ir local;$/;"	v
local	$C2_LIBDIR/../ir/slot_collector.c2	/^import string local;$/;"	v
local	$C2_LIBDIR/../ir/slot_values.c2	/^import stdio local;$/;"	v
local	$C2_LIBDIR/../ir/slot_writes_map.c2	/^import stdio local;$/;"	v
local	$C2_LIBDIR/../ir/ssa.c2	/^import stdio local;$/;"	v
local	$C2_LIBDIR/../ir/switch.c2	/^import ir_inserter local;$/;"	v
local	$C2_LIBDIR/../ir/symbol_list.c2	/^import string local;$/;"	v
local	$C2_LIBDIR/../ir/usage_counter.c2	/^import string local;$/;"	v
local	$C2_LIBDIR/../ir/work_queue.c2	/^import string local;$/;"	v
local	$C2_LIBDIR/../parser/ast_builder.c2	/^import stdlib local;$/;"	v
local	$C2_LIBDIR/../parser/c2_parser.c2	/^import token local;$/;"	v
local	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^import token local;$/;"	v
local	$C2_LIBDIR/../parser/c2_parser_stmt.c2	/^import token local;$/;"	v
local	$C2_LIBDIR/../parser/c2_parser_switch.c2	/^import token local;$/;"	v
local	$C2_LIBDIR/../parser/c2_parser_type.c2	/^import token local;$/;"	v
local	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^import token local;$/;"	v
local	$C2_LIBDIR/../parser/case_list.c2	/^import string local;$/;"	v
local	$C2_LIBDIR/../parser/expr_list.c2	/^import string local;$/;"	v
local	$C2_LIBDIR/../parser/keywords.c2	/^import token local;$/;"	v
local	$C2_LIBDIR/../parser/stmt_list.c2	/^import string local;$/;"	v
local	$C2_LIBDIR/../parser/token.c2	/^import src_loc local;$/;"	v
local	$C2_LIBDIR/../plugins/deps_generator.c2	/^import string local;$/;"	v
local	$C2_LIBDIR/../plugins/deps_generator_plugin.c2	/^import stdlib local;$/;"	v
local	$C2_LIBDIR/../plugins/deps_generator_utils.c2	/^import ast local;$/;"	v
local	$C2_LIBDIR/../plugins/git_version_plugin.c2	/^import string local;$/;"	v
local	$C2_LIBDIR/../plugins/refs_generator.c2	/^import string_utils local;$/;"	v
local	$C2_LIBDIR/../plugins/refs_generator_plugin.c2	/^import stdlib local;$/;"	v
local	$C2_LIBDIR/../plugins/shell_cmd_plugin.c2	/^import string local;$/;"	v
local	$C2_LIBDIR/../plugins/unit_test1.c2	/^import stdarg local;$/;"	v
local	$C2_LIBDIR/../plugins/unit_test2.c2	/^import stdio local;$/;"	v
local	$C2_LIBDIR/../plugins/unit_test_plugin.c2	/^import stdlib local;$/;"	v
locals	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^    Locals locals;$/;"	v
location	$C2_LIBDIR/../generator/ir/ir_generator_stmt.c2	/^    char[512] location;$/;"	v
location	$C2_LIBDIR/../ir/inserter.c2	/^    u32 location;   \/\/ instr to insert before$/;"	v
locs	$C2_LIBDIR/../ast/member_expr.c2	/^    SrcLoc* locs = cast<SrcLoc*>(&e.refs[refcount + offset]);$/;"	v
locstr	$C2_LIBDIR/../compiler/c2recipe_parser.c2	/^    char[256] locstr;$/;"	v
locstr	$C2_LIBDIR/../parser/c2_parser.c2	/^    char[256] locstr;$/;"	v
log_verbose	$C2_LIBDIR/../compiler/main.c2	/^    bool log_verbose;$/;"	v
low	$C2_LIBDIR/../analyser_utils/ctv_analyser.c2	/^        Value low = get_value(bo.getRHS());$/;"	v
low	$C2_LIBDIR/../ast/ast_evaluator.c2	/^        Value low = eval.get_value(bo.getRHS());$/;"	v
low	$C2_LIBDIR/../generator/c/c_generator_pure_call.c2	/^        Value low = eval.get_value(bo.getRHS());$/;"	v
lquals	$C2_LIBDIR/../analyser/conversion_checker.c2	/^    u32 lquals = linner.getQuals();$/;"	v
ls	$C2_LIBDIR/../analyser/module_analyser_stmt.c2	/^    LabelStmt* ls = (LabelStmt*)s;$/;"	v
ls	$C2_LIBDIR/../analyser/module_analyser_switch.c2	/^        const LabelStmt* ls = (LabelStmt*)s;$/;"	v
ls	$C2_LIBDIR/../generator/ast_visitor.c2	/^        LabelStmt* ls = cast<LabelStmt*>(s);$/;"	v
ls	$C2_LIBDIR/../generator/c/c_generator_stmt.c2	/^        LabelStmt* ls = cast<LabelStmt*>(s);$/;"	v
ls	$C2_LIBDIR/../generator/c2i/c2i_generator_stmt.c2	/^        LabelStmt* ls = cast<LabelStmt*>(s);$/;"	v
ls	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^        LabelStmt* ls = cast<LabelStmt*>(s);$/;"	v
ls	$C2_LIBDIR/../generator/ir/ir_generator_stmt.c2	/^        const Stmt* ls = l.getStmt();$/;"	v
lss	$C2_LIBDIR/../analyser/module_analyser_stmt.c2	/^    Stmt* lss = ls.getStmt();$/;"	v
ltype	$C2_LIBDIR/../analyser/conversion_checker.c2	/^    const PointerType* ltype = (PointerType*)lcanon;$/;"	v
ltype	$C2_LIBDIR/../analyser/module_analyser_binop.c2	/^    QualType ltype = ma.analyseExpr(b.getLHS2(), need_lhs_rvalue, Binop_lhs[opcode]);$/;"	v
ltype	$C2_LIBDIR/../analyser/module_analyser_expr.c2	/^    return ltype;$/;"	v
lval	$C2_LIBDIR/../analyser/module_analyser_expr.c2	/^    Value lval;$/;"	v
lvalid	$C2_LIBDIR/../analyser/module_analyser_expr.c2	/^    bool lvalid = ma.analyseBitOffsetIndex(bo.getLHS2(), canon, &lval);$/;"	v
lvl	$C2_LIBDIR/../analyser/scope.c2	/^    u32 lvl;$/;"	v
ma	$C2_LIBDIR/../analyser/module_analyser.c2	/^    return ma;$/;"	v
ma	$C2_LIBDIR/../analyser/module_analyser_call.c2	/^    Analyser* ma;$/;"	v
main	$C2_LIBDIR/../analyser/module_analyser.c2	/^    Decl* main;$/;"	v
mainFunc	$C2_LIBDIR/../generator/c/c_generator.c2	/^    Decl* mainFunc;$/;"	v
main_idx	$C2_LIBDIR/../compiler/compiler.c2	/^    u32 main_idx;  \/\/ in astPool$/;"	v
main_name	$C2_LIBDIR/../parser/ast_builder.c2	/^    u32 main_name;$/;"	v
make	$C2_LIBDIR/../generator/c/c_generator.c2	/^    const char* make = "make";$/;"	v
manifest	$C2_LIBDIR/../compiler/compiler_libs.c2	/^import manifest;$/;"	v
manifest	$C2_LIBDIR/../compiler/manifest.c2	/^module manifest;$/;"	v
manifest_name	$C2_LIBDIR/../ast_utils/constants.c2	/^public const char* manifest_name = "manifest.yaml";$/;"	v
manifest_writer	$C2_LIBDIR/../common/manifest_writer.c2	/^module manifest_writer;$/;"	v
manifest_writer	$C2_LIBDIR/../generator/c/c_generator.c2	/^import manifest_writer;$/;"	v
map	$C2_LIBDIR/../generator/c2refs.c2	/^    void* map;$/;"	v
map	$C2_LIBDIR/../ir/interference_graph.c2	/^    u16* map;$/;"	v
map	$C2_LIBDIR/../ir/live_map.c2	/^    u16* map;$/;"	v
map	$C2_LIBDIR/../ir/slot_writes_map.c2	/^    SlotWrite* map;$/;"	v
map_start	$C2_LIBDIR/../ir/interference_graph.c2	/^    u32 map_start;$/;"	v
map_start	$C2_LIBDIR/../ir/live_map.c2	/^    u32 map_start;$/;"	v
map_start	$C2_LIBDIR/../ir/slot_writes_map.c2	/^    u32 map_start;$/;"	v
mark_test_mode_decl	$C2_LIBDIR/../generator/generator_utils.c2	/^fn void mark_test_mode_decl(void* arg, Decl* d) {$/;"	f
mark_test_mode_mod	$C2_LIBDIR/../generator/generator_utils.c2	/^fn void mark_test_mode_mod(void* arg, ast.Module* m) {$/;"	f
mark_used_decl	$C2_LIBDIR/../generator/generator_utils.c2	/^fn void mark_used_decl(void* arg, const Ref* ref) {$/;"	f
marker	$C2_LIBDIR/../analyser/module_analyser.c2	/^    MainMarker marker = { name_idx, nil }$/;"	v
mask	$C2_LIBDIR/../ast/value.c2	/^        u64 mask = sbit - 1;$/;"	v
mask	$C2_LIBDIR/../common/source_mgr.c2	/^        u32 mask = (src[i] == '\\n');$/;"	v
mask	$C2_LIBDIR/../generator/c/c_generator_expr.c2	/^    u64 mask = 1;$/;"	v
mask	$C2_LIBDIR/../generator/ir/ir_generator_binop.c2	/^    u32 mask = bit_utils.get_mask32(width); \/\/ TEMP u32$/;"	v
mask	$C2_LIBDIR/../generator/ir/ir_generator_member.c2	/^            u32 mask = bit_utils.get_mask32(layout.bit_width); \/\/ TEMP u32$/;"	v
mask_value	$C2_LIBDIR/../generator/ir/field_struct_layouter.c2	/^                    Ref mask_value = ctx.addIntegerConstant((1 << ml.bitfield_width) -1);$/;"	v
match	$C2_LIBDIR/../analyser/module_analyser.c2	/^        Decl* match = std.findMember(d.getNameIdx(), nil);$/;"	v
match	$C2_LIBDIR/../generator/radix_tree/radix_tree.c2	/^    u32 match = get_match(word, text);$/;"	v
match_name	$C2_LIBDIR/../generator/c2_trace.c2	/^fn bool match_name(const char *name, const char *pattern) {$/;"	f
match_pattern	$C2_LIBDIR/../generator/c2_trace.c2	/^fn bool match_pattern(const char *name, const char *pattern) {$/;"	f
match_type	$C2_LIBDIR/../generator/c/c_generator.c2	/^fn bool match_type(const char* s, const char* list, const char** sp) {$/;"	f
matches	$C2_LIBDIR/../ast/explicit_cast_expr.c2	/^    bool matches = e.dest.matchesTemplate(inst.template_name);$/;"	v
matches	$C2_LIBDIR/../ast/type_expr.c2	/^    bool matches = e.typeRef.matchesTemplate(inst.template_name);$/;"	v
matches	$C2_LIBDIR/../ast/var_decl.c2	/^    bool matches = vd.typeRef.matchesTemplate(inst.template_name);$/;"	v
matches	$C2_LIBDIR/../ir/ssa.c2	/^    u32 matches = 0;$/;"	v
max	$C2_LIBDIR/../analyser/init_checker.c2	/^    u32 max;$/;"	v
max	$C2_LIBDIR/../ast_utils/string_pool.c2	/^    u32 max = 0;$/;"	v
max	$C2_LIBDIR/../ir/print.c2	/^    u32 max = 0;$/;"	v
max_27_bits	$C2_LIBDIR/../ir/context.c2	/^    const i32 max_27_bits = 0x3FFFFFF;$/;"	v
max_align	$C2_LIBDIR/../analyser/size_analyser.c2	/^    u32 max_align = s.getAttrAlignment();$/;"	v
max_elems	$C2_LIBDIR/../ir/interference_graph.c2	/^    u32 max_elems;$/;"	v
max_elems	$C2_LIBDIR/../ir/live_map.c2	/^    u32 max_elems;$/;"	v
max_elems	$C2_LIBDIR/../ir/slot_writes_map.c2	/^    u32 max_elems;$/;"	v
max_files	$C2_LIBDIR/../ast/module.c2	/^    u32 max_files;$/;"	v
max_files	$C2_LIBDIR/../common/build_target.c2	/^    u32 max_files;$/;"	v
max_files	$C2_LIBDIR/../common/source_mgr.c2	/^    u32 max_files;$/;"	v
max_files	$C2_LIBDIR/../compiler/c2recipe_parser.c2	/^    u32 max_files;$/;"	v
max_idx	$C2_LIBDIR/../analyser/module_analyser.c2	/^    u32 max_idx;$/;"	v
max_idx	$C2_LIBDIR/../ir/usage_counter.c2	/^    u32 max_idx;$/;"	v
max_index	$C2_LIBDIR/../analyser/module_analyser_init.c2	/^    i32 max_index = 0;$/;"	v
max_index	$C2_LIBDIR/../parser/keywords.c2	/^    u32 max_index;$/;"	v
max_inits	$C2_LIBDIR/../generator/ir/field_struct_layouter.c2	/^    u32 max_inits;$/;"	v
max_mods	$C2_LIBDIR/../common/module_list.c2	/^    u32 max_mods;$/;"	v
max_offset	$C2_LIBDIR/../common/source_mgr.c2	/^    u32 max_offset;$/;"	v
max_size	$C2_LIBDIR/../analyser/size_analyser.c2	/^    u32 max_size = 0;$/;"	v
max_targets	$C2_LIBDIR/../compiler/c2recipe.c2	/^    u32 max_targets;$/;"	v
max_val	$C2_LIBDIR/../analyser_utils/ctv_analyser.c2	/^    u64 max_val;$/;"	v
mem_blocks	$C2_LIBDIR/../ir/slot_writes_map.c2	/^        u32 mem_blocks = m.num_blocks * sizeof(BlockWrites);$/;"	v
mem_map	$C2_LIBDIR/../ir/interference_graph.c2	/^        u32 mem_map = g.max_elems * sizeof(u16);$/;"	v
mem_map	$C2_LIBDIR/../ir/live_map.c2	/^        u32 mem_map = g.max_elems * sizeof(u16);$/;"	v
mem_map	$C2_LIBDIR/../ir/slot_writes_map.c2	/^        u32 mem_map = m.max_elems * sizeof(u16);$/;"	v
mem_usage	$C2_LIBDIR/../ir/interference_graph.c2	/^        u32 mem_usage = mem_variables + mem_map;$/;"	v
mem_usage	$C2_LIBDIR/../ir/live_map.c2	/^        u32 mem_usage = mem_variables + mem_map;$/;"	v
mem_usage	$C2_LIBDIR/../ir/slot_writes_map.c2	/^        u32 mem_usage = mem_blocks + mem_map;$/;"	v
mem_variables	$C2_LIBDIR/../ir/interference_graph.c2	/^        u32 mem_variables = g.num_variables * sizeof(Variable);$/;"	v
mem_variables	$C2_LIBDIR/../ir/live_map.c2	/^        u32 mem_variables = g.num_variables * sizeof(Variable);$/;"	v
member	$C2_LIBDIR/../analyser/module_analyser_builtin.c2	/^    Expr* member = b.getToContainerMember();$/;"	v
member	$C2_LIBDIR/../analyser/module_analyser_init.c2	/^        Decl* member = fif.decl;$/;"	v
member	$C2_LIBDIR/../analyser/module_analyser_struct.c2	/^        Decl* member = members[i];$/;"	v
member	$C2_LIBDIR/../analyser/module_analyser_type.c2	/^    const Ref* member = ref.getStructMemberType();$/;"	v
member	$C2_LIBDIR/../analyser/size_analyser.c2	/^        TypeSize member = sizeOfType(d.getType());$/;"	v
member	$C2_LIBDIR/../analyser/unused_checker.c2	/^        Decl* member = members[i];$/;"	v
member	$C2_LIBDIR/../ast/builtin_expr.c2	/^    Expr* member;$/;"	v
member	$C2_LIBDIR/../parser/ast_builder.c2	/^                                             Expr* member,$/;"	v
member	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    Expr* member = p.parseFullIdentifier();$/;"	v
member	$C2_LIBDIR/../parser/c2_parser_type.c2	/^            VarDecl* member = p.builder.actOnStructMember(name, loc, is_public, &ref, nil);$/;"	v
memberExprBits	$C2_LIBDIR/../ast/stmt.c2	/^        MemberExprBits memberExprBits;$/;"	v
member_idx	$C2_LIBDIR/../analyser/module_analyser_init.c2	/^    u32 member_idx; \/\/ virtual index (same for union members)$/;"	v
member_idx	$C2_LIBDIR/../ast/struct_type_decl.c2	/^    u32 member_idx; \/\/ used during analysis to detect duplicate inits, same for anonymous sub-/;"	v
member_name	$C2_LIBDIR/../analyser/module_analyser_init.c2	/^        u32 member_name = d.getNameIdx();$/;"	v
member_name	$C2_LIBDIR/../ast/struct_type_decl.c2	/^        u32 member_name = m.getNameIdx();$/;"	v
members	$C2_LIBDIR/../analyser/module_analyser_init.c2	/^    Decl** members = std.getMembers();$/;"	v
members	$C2_LIBDIR/../analyser/module_analyser_struct.c2	/^    Decl** members = d.getMembers();$/;"	v
members	$C2_LIBDIR/../analyser/size_analyser.c2	/^    Decl** members = s.getMembers();$/;"	v
members	$C2_LIBDIR/../analyser/unused_checker.c2	/^    Decl** members = std.getMembers();$/;"	v
members	$C2_LIBDIR/../ast/struct_type_decl.c2	/^    StructMemberLayout[0] members;$/;"	v
members	$C2_LIBDIR/../generator/ast_visitor.c2	/^        Decl** members = s.getMembers();$/;"	v
members	$C2_LIBDIR/../generator/c/c_generator.c2	/^    Decl** members = std.getMembers();$/;"	v
members	$C2_LIBDIR/../generator/c/dep_finder.c2	/^    Decl** members = d.getMembers();$/;"	v
members	$C2_LIBDIR/../generator/c2i/c2i_generator_decl.c2	/^        Decl** members = std.getMembers();$/;"	v
members	$C2_LIBDIR/../parser/ast_builder.c2	/^                                              members,$/;"	v
members	$C2_LIBDIR/../plugins/deps_generator.c2	/^        Decl** members = s.getMembers();$/;"	v
message	$C2_LIBDIR/../common/yaml/yaml_parser.c2	/^    char[MaxDiag] message;$/;"	v
min	$C2_LIBDIR/../ast_utils/string_pool.c2	/^    u32 min = 999;$/;"	v
min	$C2_LIBDIR/../generator/c2_trace.c2	/^    u32 min = 1, min2 = 1;$/;"	v
min2	$C2_LIBDIR/../generator/c2_trace.c2	/^        min2 = min;$/;"	v
min_27bits	$C2_LIBDIR/../ir/context.c2	/^    const i32 min_27bits = -0x3FFFFFF-1;$/;"	v
min_idx	$C2_LIBDIR/../analyser/module_analyser.c2	/^    u32 min_idx;$/;"	v
min_val	$C2_LIBDIR/../analyser_utils/ctv_analyser.c2	/^    i64 min_val;$/;"	v
missing	$C2_LIBDIR/../analyser/module_analyser_switch.c2	/^                u32 missing = 0;$/;"	v
missing	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^        u32 missing = array_size - num_values;$/;"	v
missing_arg	$C2_LIBDIR/../compiler/main.c2	/^fn void missing_arg(const char* option) {$/;"	f
missing_args	$C2_LIBDIR/../analyser/module_analyser_call.c2	/^        u32 missing_args = 0;$/;"	v
ml	$C2_LIBDIR/../analyser/module_analyser_init.c2	/^        const StructMemberLayout* ml = &layout.members[member_idx];$/;"	v
ml	$C2_LIBDIR/../analyser/size_analyser.c2	/^        StructMemberLayout* ml = &layout.members[i];$/;"	v
ml	$C2_LIBDIR/../ast/struct_type_decl.c2	/^        const StructMemberLayout* ml = &layout.members[i];$/;"	v
ml	$C2_LIBDIR/../generator/ir/ir_generator_expr.c2	/^        const StructMemberLayout* ml = &layout.members[i];$/;"	v
mname	$C2_LIBDIR/../plugins/shell_cmd_plugin.c2	/^    const char* mname = "shell_cmd";$/;"	v
mod	$C2_LIBDIR/../analyser/module_analyser.c2	/^    Module* mod;$/;"	v
mod	$C2_LIBDIR/../analyser/module_analyser_type.c2	/^        Module* mod = i.getDest();$/;"	v
mod	$C2_LIBDIR/../ast/ast.c2	/^    Module* mod;$/;"	v
mod	$C2_LIBDIR/../ast/decl.c2	/^    const Module* mod = a.getMod();$/;"	v
mod	$C2_LIBDIR/../ast/module_type.c2	/^    Module* mod;$/;"	v
mod	$C2_LIBDIR/../generator/c/c_generator.c2	/^    Module* mod;$/;"	v
mod	$C2_LIBDIR/../generator/c/dep_finder.c2	/^    Module* mod;    \/\/ the current module$/;"	v
mod	$C2_LIBDIR/../generator/c2i/c2i_generator.c2	/^    Module* mod;$/;"	v
mod	$C2_LIBDIR/../generator/c2i/c2i_generator_decl.c2	/^        Module* mod = d.getModule();$/;"	v
mod	$C2_LIBDIR/../parser/ast_builder.c2	/^    Module* mod;                \/\/ no ownership$/;"	v
mod_loc	$C2_LIBDIR/../parser/ast_builder.c2	/^                                   SrcLoc mod_loc,$/;"	v
mod_loc	$C2_LIBDIR/../parser/c2_parser.c2	/^        SrcLoc mod_loc = p.tok.loc;$/;"	v
mod_name	$C2_LIBDIR/../compiler/compiler_libs.c2	/^        u32 mod_name = mods.get_idx(i);$/;"	v
mod_name	$C2_LIBDIR/../generator/c/c_generator.c2	/^    const char* mod_name; \/\/ set per module$/;"	v
mod_name	$C2_LIBDIR/../generator/c2i/c2i_generator.c2	/^    const char* mod_name;$/;"	v
mod_name	$C2_LIBDIR/../parser/ast_builder.c2	/^                                   u32 mod_name,$/;"	v
mod_name	$C2_LIBDIR/../parser/c2_parser.c2	/^        u32 mod_name = p.tok.name_idx;$/;"	v
mod_name	$C2_LIBDIR/../plugins/git_version_plugin.c2	/^    u32 mod_name = p.info.astPool.addStr("git_version", true);$/;"	v
mod_name	$C2_LIBDIR/../plugins/shell_cmd_plugin.c2	/^    const char* mod_name = parser.getScalarValue("shell.module");$/;"	v
modname	$C2_LIBDIR/../ast/decl.c2	/^    const char* modname = d.getModuleName();$/;"	v
modname	$C2_LIBDIR/../compiler/manifest.c2	/^        u32 modname = astPool.addStr(value, true);$/;"	v
mods	$C2_LIBDIR/../plugins/deps_generator.c2	/^    const Module** mods = modlist.getConst();$/;"	v
module_analyser	$C2_LIBDIR/../analyser/module_analyser.c2	/^module module_analyser;$/;"	v
module_analyser	$C2_LIBDIR/../analyser/module_analyser_binop.c2	/^module module_analyser;$/;"	v
module_analyser	$C2_LIBDIR/../analyser/module_analyser_builtin.c2	/^module module_analyser;$/;"	v
module_analyser	$C2_LIBDIR/../analyser/module_analyser_call.c2	/^module module_analyser;$/;"	v
module_analyser	$C2_LIBDIR/../analyser/module_analyser_expr.c2	/^module module_analyser;$/;"	v
module_analyser	$C2_LIBDIR/../analyser/module_analyser_function.c2	/^module module_analyser;$/;"	v
module_analyser	$C2_LIBDIR/../analyser/module_analyser_init.c2	/^module module_analyser;$/;"	v
module_analyser	$C2_LIBDIR/../analyser/module_analyser_member.c2	/^module module_analyser;$/;"	v
module_analyser	$C2_LIBDIR/../analyser/module_analyser_stmt.c2	/^module module_analyser;$/;"	v
module_analyser	$C2_LIBDIR/../analyser/module_analyser_struct.c2	/^module module_analyser;$/;"	v
module_analyser	$C2_LIBDIR/../analyser/module_analyser_switch.c2	/^module module_analyser;$/;"	v
module_analyser	$C2_LIBDIR/../analyser/module_analyser_type.c2	/^module module_analyser;$/;"	v
module_analyser	$C2_LIBDIR/../analyser/module_analyser_unaryop.c2	/^module module_analyser;$/;"	v
module_analyser	$C2_LIBDIR/../analyser/struct_field_init_checker.c2	/^module module_analyser;$/;"	v
module_analyser	$C2_LIBDIR/../compiler/compiler.c2	/^import module_analyser;$/;"	v
module_list	$C2_LIBDIR/../analyser/module_analyser.c2	/^import module_list;$/;"	v
module_list	$C2_LIBDIR/../analyser/module_sorter.c2	/^import module_list;$/;"	v
module_list	$C2_LIBDIR/../analyser/scope.c2	/^import module_list;$/;"	v
module_list	$C2_LIBDIR/../common/component.c2	/^import module_list;$/;"	v
module_list	$C2_LIBDIR/../common/module_list.c2	/^module module_list;$/;"	v
module_list	$C2_LIBDIR/../compiler/compiler.c2	/^import module_list;$/;"	v
module_list	$C2_LIBDIR/../compiler/compiler_libs.c2	/^import module_list;$/;"	v
module_list	$C2_LIBDIR/../generator/c/c_generator.c2	/^import module_list;$/;"	v
module_list	$C2_LIBDIR/../generator/c/c_generator_special.c2	/^import module_list;$/;"	v
module_list	$C2_LIBDIR/../generator/generator_utils.c2	/^import module_list;$/;"	v
module_sorter	$C2_LIBDIR/../analyser/module_sorter.c2	/^module module_sorter;$/;"	v
module_sorter	$C2_LIBDIR/../compiler/compiler.c2	/^import module_sorter;$/;"	v
module_sorter	$C2_LIBDIR/../compiler/compiler_libs.c2	/^import module_sorter;$/;"	v
more	$C2_LIBDIR/../parser/c2_parser_switch.c2	/^    bool more = true;$/;"	v
msan	$C2_LIBDIR/../compiler/compiler.c2	/^    bool msan;$/;"	v
msan	$C2_LIBDIR/../generator/c/c_generator.c2	/^    bool msan;$/;"	v
msg	$C2_LIBDIR/../analyser/module_analyser.c2	/^            const char* msg = "a type-function type must be a struct\/union\/enum";$/;"	v
msg	$C2_LIBDIR/../ast/qualtype.c2	/^    return msg;$/;"	v
msg	$C2_LIBDIR/../common/process_utils.c2	/^    char[256] msg;$/;"	v
msg	$C2_LIBDIR/../common/yaml/yaml_tokenizer.c2	/^    return msg;$/;"	v
msg	$C2_LIBDIR/../compiler/c2recipe_parser.c2	/^    char[128] msg;$/;"	v
msg_end	$C2_LIBDIR/../plugins/unit_test2.c2	/^fn void msg_end() {$/;"	f
msg_id	$C2_LIBDIR/../ast/qualtype.c2	/^    msg_id = (msg_id + 1) % elemsof(msgs);$/;"	v
msg_start	$C2_LIBDIR/../plugins/unit_test2.c2	/^fn void msg_start(const char* color, const char* title) {$/;"	f
msgs	$C2_LIBDIR/../ast/qualtype.c2	/^    local char[4][128] msgs;$/;"	v
mt	$C2_LIBDIR/../analyser/module_analyser_member.c2	/^                ModuleType* mt = (ModuleType*)t;$/;"	v
mt	$C2_LIBDIR/../ast/module.c2	/^    ModuleType* mt;$/;"	v
multi_line	$C2_LIBDIR/../generator/c/c_generator_stmt.c2	/^    bool multi_line = false;$/;"	v
multi_line	$C2_LIBDIR/../generator/c2i/c2i_generator_stmt.c2	/^    bool multi_line = false;$/;"	v
my_read	$C2_LIBDIR/../ir/ssa.c2	/^        ReadSlotAccess* my_read = t.collector.findRead(blk_id, slot);$/;"	v
n2	$C2_LIBDIR/../generator/radix_tree/radix_tree_fs.c2	/^    Node* n2 = tr.nodes.idx2node(node_idx2);$/;"	v
n_idx	$C2_LIBDIR/../common/yaml/yaml_parser.c2	/^    u32 n_idx = p.data.node2idx(n);$/;"	v
name	$C2_LIBDIR/../analyser/incr_array_list.c2	/^    u32 name;$/;"	v
name	$C2_LIBDIR/../analyser/module_analyser.c2	/^    u32 name = entry.name;$/;"	v
name	$C2_LIBDIR/../analyser/module_analyser_call.c2	/^        char[64] name;$/;"	v
name	$C2_LIBDIR/../analyser/module_analyser_stmt.c2	/^    u32 name = ls.getNameIdx();$/;"	v
name	$C2_LIBDIR/../analyser/module_analyser_struct.c2	/^                const char* name = vd.getName();$/;"	v
name	$C2_LIBDIR/../analyser/scope.c2	/^        const char* name = ast.idx2name(name_idx);$/;"	v
name	$C2_LIBDIR/../ast/alias_type_decl.c2	/^                                                u32 name,$/;"	v
name	$C2_LIBDIR/../ast/array_value.c2	/^                                          u32 name,$/;"	v
name	$C2_LIBDIR/../ast/ast.c2	/^    u32 name;   \/\/ into auxPool$/;"	v
name	$C2_LIBDIR/../ast/enum_constant_decl.c2	/^                                                      u32 name,$/;"	v
name	$C2_LIBDIR/../ast/enum_type_decl.c2	/^                                              u32 name,$/;"	v
name	$C2_LIBDIR/../ast/function_decl.c2	/^                                              u32 name,$/;"	v
name	$C2_LIBDIR/../ast/goto_stmt.c2	/^    u32 name;$/;"	v
name	$C2_LIBDIR/../ast/import_decl.c2	/^                                          u32 name,$/;"	v
name	$C2_LIBDIR/../ast/label_stmt.c2	/^    u32 name;$/;"	v
name	$C2_LIBDIR/../ast/struct_type.c2	/^    const char* name = t.decl.base.getName();$/;"	v
name	$C2_LIBDIR/../ast/struct_type_decl.c2	/^                                                  u32 name,$/;"	v
name	$C2_LIBDIR/../ast/symbol_table.c2	/^        const char* name = ast.idx2name(t.symbols[i]);$/;"	v
name	$C2_LIBDIR/../ast/var_decl.c2	/^                                    u32 name,$/;"	v
name	$C2_LIBDIR/../ast_utils/attr.c2	/^    u32 name;  \/\/ needed for unknown attributes$/;"	v
name	$C2_LIBDIR/../common/attr_handler.c2	/^    u32 name;$/;"	v
name	$C2_LIBDIR/../common/build_file.c2	/^    u32 name;    \/\/  index into pool$/;"	v
name	$C2_LIBDIR/../common/build_target.c2	/^    u32 name; \/\/ into pool$/;"	v
name	$C2_LIBDIR/../common/library_list.c2	/^    u32 name; \/\/ into auxPool$/;"	v
name	$C2_LIBDIR/../common/yaml/yaml_iterator.c2	/^            const char* name = &d.text[node.name_idx];$/;"	v
name	$C2_LIBDIR/../compiler/c2recipe_parser.c2	/^    u32 name = p.token.value;$/;"	v
name	$C2_LIBDIR/../compiler/c2recipe_yaml.c2	/^        const char* name = iter.getName();$/;"	v
name	$C2_LIBDIR/../compiler/compiler.c2	/^        const char* name = exports.get(i);  \/\/ NOTE: from auxPool!$/;"	v
name	$C2_LIBDIR/../compiler/compiler_libs.c2	/^        const char* name = entry.d_name;$/;"	v
name	$C2_LIBDIR/../compiler/main.c2	/^            const char* name = c.opts.targets.get(i);$/;"	v
name	$C2_LIBDIR/../compiler/plugin_mgr.c2	/^    u32 name; \/\/ in auxPool$/;"	v
name	$C2_LIBDIR/../generator/c/c_generator.c2	/^        const char* name = argx.getName();$/;"	v
name	$C2_LIBDIR/../generator/c/c_generator_pure_call.c2	/^    u32 name;$/;"	v
name	$C2_LIBDIR/../generator/c2refs.c2	/^        const char* name = names + file.name_idx;$/;"	v
name	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^    const char* name = vd.asDecl().getName();$/;"	v
name	$C2_LIBDIR/../generator/ir/ir_generator_stmt.c2	/^    local const char[] name = "$gbl_assert_str";$/;"	v
name	$C2_LIBDIR/../generator/radix_tree/radix_tree.c2	/^                const char* name = t.idx2word(child.word_idx);$/;"	v
name	$C2_LIBDIR/../ir/symbol_list.c2	/^    u32 name;$/;"	v
name	$C2_LIBDIR/../parser/ast_builder.c2	/^                          name,$/;"	v
name	$C2_LIBDIR/../parser/c2_parser.c2	/^    u32 name = p.tok.name_idx;$/;"	v
name	$C2_LIBDIR/../parser/c2_parser_stmt.c2	/^    u32 name = p.tok.name_idx;$/;"	v
name	$C2_LIBDIR/../parser/c2_parser_type.c2	/^    u32 name = p.tok.name_idx;$/;"	v
name	$C2_LIBDIR/../plugins/deps_generator.c2	/^    u32 name = dest.getNameIdx();$/;"	v
name	$C2_LIBDIR/../plugins/plugin_info.c2	/^    const char* name;$/;"	v
name	$C2_LIBDIR/../plugins/refs_generator.c2	/^    const char* name = d.getName();$/;"	v
name	$C2_LIBDIR/../plugins/shell_cmd_plugin.c2	/^    const char* name;$/;"	v
name	$C2_LIBDIR/../plugins/unit_test1.c2	/^   const char* name;$/;"	v
name	$C2_LIBDIR/../plugins/unit_test_plugin.c2	/^    const char* name = d.getName();$/;"	v
name_idx	$C2_LIBDIR/../analyser/label_vector.c2	/^    u32 name_idx;$/;"	v
name_idx	$C2_LIBDIR/../analyser/module_analyser.c2	/^    u32 name_idx;$/;"	v
name_idx	$C2_LIBDIR/../analyser/module_analyser_builtin.c2	/^        u32 name_idx = i.getNameIdx();$/;"	v
name_idx	$C2_LIBDIR/../analyser/module_analyser_expr.c2	/^                                   u32 name_idx,$/;"	v
name_idx	$C2_LIBDIR/../analyser/module_analyser_member.c2	/^        u32 name_idx = m.getNameIdx(i);$/;"	v
name_idx	$C2_LIBDIR/../analyser/module_analyser_struct.c2	/^        u32 name_idx = member.getNameIdx();$/;"	v
name_idx	$C2_LIBDIR/../analyser/module_analyser_switch.c2	/^            u32 name_idx;   \/\/ name index of enum constant$/;"	v
name_idx	$C2_LIBDIR/../analyser/module_analyser_type.c2	/^        u32 name_idx = cd.getNameIdx();$/;"	v
name_idx	$C2_LIBDIR/../analyser/scope.c2	/^    const u32 name_idx = d.getNameIdx();$/;"	v
name_idx	$C2_LIBDIR/../ast/array_value.c2	/^    u32 name_idx;   \/\/ 0 means nil$/;"	v
name_idx	$C2_LIBDIR/../ast/decl.c2	/^    u32 name_idx;$/;"	v
name_idx	$C2_LIBDIR/../ast/identifier_expr.c2	/^        u32 name_idx;$/;"	v
name_idx	$C2_LIBDIR/../ast/member_expr.c2	/^    u32 name_idx;$/;"	v
name_idx	$C2_LIBDIR/../ast/module.c2	/^    u32 name_idx;$/;"	v
name_idx	$C2_LIBDIR/../ast/struct_type_decl.c2	/^    u32 name_idx;$/;"	v
name_idx	$C2_LIBDIR/../ast/symbol_table.c2	/^        u32 name_idx = t.symbols[i];$/;"	v
name_idx	$C2_LIBDIR/../ast/type_ref.c2	/^    u32 name_idx;$/;"	v
name_idx	$C2_LIBDIR/../common/build_target.c2	/^    u32 name_idx;       \/\/ index into auxPool$/;"	v
name_idx	$C2_LIBDIR/../common/component.c2	/^    u32 name_idx;   \/\/ into auxPool$/;"	v
name_idx	$C2_LIBDIR/../common/yaml/yaml_data.c2	/^    u32 name_idx;   \/\/ text index$/;"	v
name_idx	$C2_LIBDIR/../compiler/c2recipe_parser.c2	/^    u32 name_idx;       \/\/ into aux pool$/;"	v
name_idx	$C2_LIBDIR/../compiler/compiler.c2	/^    u32 name_idx = d.getNameIdx();$/;"	v
name_idx	$C2_LIBDIR/../compiler/compiler_libs.c2	/^                u32 name_idx = c.auxPool.addStr(name, true);$/;"	v
name_idx	$C2_LIBDIR/../generator/c/c_generator.c2	/^    u32 name_idx = d.getNameIdx();$/;"	v
name_idx	$C2_LIBDIR/../generator/c/c_generator_pure_call.c2	/^        const u32 name_idx = d.getNameIdx();$/;"	v
name_idx	$C2_LIBDIR/../generator/c2i/c2i_generator.c2	/^    u32 name_idx = d.getNameIdx();$/;"	v
name_idx	$C2_LIBDIR/../generator/c2refs.c2	/^    u32 name_idx;$/;"	v
name_idx	$C2_LIBDIR/../ir/context.c2	/^    u32 name_idx = c.pool.addStr(name, false);$/;"	v
name_idx	$C2_LIBDIR/../parser/token.c2	/^        u32 name_idx;      \/\/ Identifier and all keywords$/;"	v
name_idx	$C2_LIBDIR/../plugins/deps_generator.c2	/^    u32 name_idx;$/;"	v
name_indexes	$C2_LIBDIR/../ast_utils/attr.c2	/^const u32* name_indexes;$/;"	v
name_str	$C2_LIBDIR/../compiler/plugin_mgr.c2	/^    const char* name_str = m.auxPool.idx2str(name);$/;"	v
name_str	$C2_LIBDIR/../parser/c2_parser_type.c2	/^            const char* name_str = p.pool.idx2str(const_name);$/;"	v
name_vector	$C2_LIBDIR/../analyser/name_vector.c2	/^module name_vector;$/;"	v
names	$C2_LIBDIR/../ast/asm_stmt.c2	/^    u32[0] names;   \/\/ tail-allocated$/;"	v
names	$C2_LIBDIR/../generator/c/c_generator_stmt.c2	/^        u32* names = a.getNames();$/;"	v
names	$C2_LIBDIR/../generator/c2i/c2i_generator_stmt.c2	/^        u32* names = a.getNames();$/;"	v
names	$C2_LIBDIR/../generator/c2refs.c2	/^    const char* names = f.names();$/;"	v
names	$C2_LIBDIR/../parser/ast_builder.c2	/^                                      names,$/;"	v
names_cap	$C2_LIBDIR/../generator/c2refs.c2	/^    u32 names_cap;$/;"	v
names_len	$C2_LIBDIR/../generator/c2refs.c2	/^    u32 names_len;          \/\/ total len of 0-terminated names$/;"	v
native_kind	$C2_LIBDIR/../analyser/conversion_checker.c2	/^    BuiltinKind native_kind;$/;"	v
nc	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^    u32 nc = 1;$/;"	v
ncheck	$C2_LIBDIR/../common/source_mgr.c2	/^    u32 ncheck = f.data_size \/ CheckPointSize;$/;"	v
ncpus	$C2_LIBDIR/../ir/work_queue.c2	/^    i64 ncpus = unistd.sysconf(unistd._SC_NPROCESSORS_ONLN);$/;"	v
need_const_expr	$C2_LIBDIR/../generator/c/c_generator.c2	/^    u32 need_const_expr;$/;"	v
need_dot	$C2_LIBDIR/../generator/c/c_generator_expr.c2	/^    bool need_dot = false;$/;"	v
need_lhs_rvalue	$C2_LIBDIR/../analyser/module_analyser_binop.c2	/^    bool need_lhs_rvalue = true;$/;"	v
need_paren	$C2_LIBDIR/../generator/c/c_generator_expr.c2	/^    bool need_paren = prec > prec2;$/;"	v
need_rvalue	$C2_LIBDIR/../analyser/module_analyser_stmt.c2	/^        bool need_rvalue;$/;"	v
need_rvalue	$C2_LIBDIR/../analyser/module_analyser_unaryop.c2	/^    bool need_rvalue = true;$/;"	v
need_semi	$C2_LIBDIR/../parser/c2_parser.c2	/^    bool need_semi = true;$/;"	v
need_semi	$C2_LIBDIR/../parser/c2_parser_stmt.c2	/^    bool need_semi = true;$/;"	v
needed	$C2_LIBDIR/../generator/c2refs.c2	/^    u32 needed = f.count + count;$/;"	v
needs_comma	$C2_LIBDIR/../generator/c/c_generator_call.c2	/^    bool needs_comma = is_tf;$/;"	v
negative	$C2_LIBDIR/../ast/value.c2	/^    bool negative;  \/\/ true if kind is Integer and value strictly negative$/;"	v
neighbor	$C2_LIBDIR/../ir/interference_graph.c2	/^        u16 neighbor = iter.ids[i];$/;"	v
new_blk	$C2_LIBDIR/../ir/context.c2	/^        return new_blk;$/;"	v
new_blk	$C2_LIBDIR/../ir/register_alloc.c2	/^                BlockId new_blk = t.inserter.findSplitEdge(pc.src, blk_id);$/;"	v
new_blk	$C2_LIBDIR/../ir/switch.c2	/^        BlockId new_blk = inserter.addBlock(BlockKind.SwitchCond);$/;"	v
new_blk_id	$C2_LIBDIR/../ir/inserter.c2	/^    BlockId new_blk_id; \/\/ start id for new blocks$/;"	v
new_blocks	$C2_LIBDIR/../ir/inserter.c2	/^    BlockList new_blocks;$/;"	v
new_cap	$C2_LIBDIR/../ast_utils/string_buffer.c2	/^    u32 new_cap = buf.capacity * 2;$/;"	v
new_capacity	$C2_LIBDIR/../common/source_mgr.c2	/^        u32 new_capacity = sm.index_capacity;$/;"	v
new_count	$C2_LIBDIR/../ir/instr_list.c2	/^    u32 new_count = l.count + extra;$/;"	v
new_index	$C2_LIBDIR/../common/source_mgr.c2	/^        u16* new_index = stdlib.malloc(new_capacity * sizeof(u16));$/;"	v
new_index	$C2_LIBDIR/../ir/ssa.c2	/^    u32 new_index = 0;$/;"	v
new_instr_idx	$C2_LIBDIR/../ir/inserter.c2	/^    u32 new_instr_idx;$/;"	v
new_line	$C2_LIBDIR/../compiler/c2recipe_parser.c2	/^    bool new_line;$/;"	v
new_node	$C2_LIBDIR/../generator/radix_tree/radix_tree.c2	/^    u32 new_node = t.add_node(0, t.add_word(text, len), value);$/;"	v
new_start	$C2_LIBDIR/../ir/ssa.c2	/^        u32 new_start = new_index;$/;"	v
new_zone	$C2_LIBDIR/../generator/radix_tree/radix_tree.c2	/^    Zone* new_zone = to_container(Zone, list, e);$/;"	v
newb	$C2_LIBDIR/../ast_utils/context.c2	/^        Block* newb = Block.create(len > c.blk_size ? len : c.blk_size);$/;"	v
newlines	$C2_LIBDIR/../generator/c/c_generator_expr.c2	/^        bool newlines = false;$/;"	v
newlines	$C2_LIBDIR/../generator/c2i/c2i_generator_expr.c2	/^        bool newlines = false;$/;"	v
next	$C2_LIBDIR/../ast_utils/context.c2	/^    return next;$/;"	v
next	$C2_LIBDIR/../ast_utils/string_pool.c2	/^            next = p.entry_size;$/;"	v
next	$C2_LIBDIR/../common/linked_list.c2	/^    Element* next;$/;"	v
next	$C2_LIBDIR/../common/yaml/yaml_iterator.c2	/^        next = node.next_idx;$/;"	v
next	$C2_LIBDIR/../common/yaml/yaml_parser.c2	/^        Token* next = p.tokenizer.lex_next();$/;"	v
next	$C2_LIBDIR/../common/yaml/yaml_tokenizer.c2	/^    Token next;$/;"	v
next	$C2_LIBDIR/../compiler/c2recipe_parser.c2	/^    Set* next;$/;"	v
next	$C2_LIBDIR/../generator/c/c_generator_trace.c2	/^        u32 next = sl.hash_count++;$/;"	v
next	$C2_LIBDIR/../generator/ir/ir_generator_member.c2	/^            goto next;$/;"	v
next	$C2_LIBDIR/../generator/radix_tree/radix_tree.c2	/^        Zone* next = to_container(Zone, list, zone.list.next);$/;"	v
next	$C2_LIBDIR/../ir/interference_graph.c2	/^    u16 next;$/;"	v
next	$C2_LIBDIR/../ir/live_map.c2	/^    u16 next;$/;"	v
next	$C2_LIBDIR/../ir/slot_collector.c2	/^                Instr* next = &ii[i+1];$/;"	v
next	$C2_LIBDIR/../ir/slot_writes_map.c2	/^    u16 next;$/;"	v
next	$C2_LIBDIR/../parser/c2_parser.c2	/^    Token[MaxLookahead] next;$/;"	v
next	$C2_LIBDIR/../parser/c2_parser_stmt.c2	/^        Token next;$/;"	v
nextTokPrec	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    Prec nextTokPrec = BinOpPrecLookup[p.tok.kind];$/;"	v
next_blk	$C2_LIBDIR/../ir/switch.c2	/^        BlockId next_blk = (last_case) ? join_blk : new_blk +1;$/;"	v
next_count	$C2_LIBDIR/../parser/c2_parser.c2	/^    u32 next_count;$/;"	v
next_head	$C2_LIBDIR/../parser/c2_parser.c2	/^    u32 next_head;  \/\/ index of next token (circular index into next)$/;"	v
next_idx	$C2_LIBDIR/../common/yaml/yaml_data.c2	/^    u32 next_idx;   \/\/ node index$/;"	v
next_loc	$C2_LIBDIR/../ir/inserter.c2	/^    u32 next_loc;  \/\/ for insertion$/;"	v
nil	$C2_LIBDIR/../analyser/incr_array_list.c2	/^    return nil;$/;"	v
nil	$C2_LIBDIR/../analyser/label_vector.c2	/^    return nil;$/;"	v
nil	$C2_LIBDIR/../analyser/module_analyser_expr.c2	/^        return nil;$/;"	v
nil	$C2_LIBDIR/../analyser/module_analyser_member.c2	/^            return nil;$/;"	v
nil	$C2_LIBDIR/../analyser/module_analyser_stmt.c2	/^    return nil;$/;"	v
nil	$C2_LIBDIR/../analyser/module_analyser_unaryop.c2	/^    return nil;$/;"	v
nil	$C2_LIBDIR/../analyser/scope.c2	/^    return nil;$/;"	v
nil	$C2_LIBDIR/../ast/ast.c2	/^    return nil;$/;"	v
nil	$C2_LIBDIR/../ast/ast_evaluator.c2	/^    return nil;$/;"	v
nil	$C2_LIBDIR/../ast/call_expr.c2	/^    return nil;$/;"	v
nil	$C2_LIBDIR/../ast/compound_stmt.c2	/^    return nil;$/;"	v
nil	$C2_LIBDIR/../ast/decl.c2	/^    return nil;$/;"	v
nil	$C2_LIBDIR/../ast/enum_constant_decl.c2	/^    return nil;$/;"	v
nil	$C2_LIBDIR/../ast/enum_type_decl.c2	/^    return nil;$/;"	v
nil	$C2_LIBDIR/../ast/expr.c2	/^    return nil;$/;"	v
nil	$C2_LIBDIR/../ast/field_designated_init_expr.c2	/^    return nil;$/;"	v
nil	$C2_LIBDIR/../ast/function_decl.c2	/^    return nil;$/;"	v
nil	$C2_LIBDIR/../ast/function_decl_list.c2	/^    return nil;$/;"	v
nil	$C2_LIBDIR/../ast/if_stmt.c2	/^    return nil;$/;"	v
nil	$C2_LIBDIR/../ast/import_decl_list.c2	/^    return nil;$/;"	v
nil	$C2_LIBDIR/../ast/instance_table.c2	/^    return nil;$/;"	v
nil	$C2_LIBDIR/../ast/member_expr.c2	/^    return nil;$/;"	v
nil	$C2_LIBDIR/../ast/module.c2	/^    return nil;$/;"	v
nil	$C2_LIBDIR/../ast/qualtype.c2	/^    return nil;$/;"	v
nil	$C2_LIBDIR/../ast/return_stmt.c2	/^    return nil;$/;"	v
nil	$C2_LIBDIR/../ast/stmt.c2	/^    return nil;$/;"	v
nil	$C2_LIBDIR/../ast/struct_type_decl.c2	/^    return nil;$/;"	v
nil	$C2_LIBDIR/../ast/switch_case.c2	/^    return nil;$/;"	v
nil	$C2_LIBDIR/../ast/symbol_table.c2	/^    return nil;$/;"	v
nil	$C2_LIBDIR/../ast/type_ref.c2	/^    return nil;$/;"	v
nil	$C2_LIBDIR/../ast/utils.c2	/^    return nil;$/;"	v
nil	$C2_LIBDIR/../ast/var_decl.c2	/^    return nil;$/;"	v
nil	$C2_LIBDIR/../ast_utils/attr_table.c2	/^    return nil;$/;"	v
nil	$C2_LIBDIR/../common/build_file.c2	/^    return nil;$/;"	v
nil	$C2_LIBDIR/../common/component.c2	/^    return nil;$/;"	v
nil	$C2_LIBDIR/../common/dsm_sorter.c2	/^            return nil; \/\/ circular dependencies$/;"	v
nil	$C2_LIBDIR/../common/file/file_utils.c2	/^    return nil;$/;"	v
nil	$C2_LIBDIR/../common/module_list.c2	/^    return nil;$/;"	v
nil	$C2_LIBDIR/../common/process_utils.c2	/^    return nil;$/;"	v
nil	$C2_LIBDIR/../common/source_mgr.c2	/^    return nil;$/;"	v
nil	$C2_LIBDIR/../common/yaml/yaml_iterator.c2	/^    return nil;$/;"	v
nil	$C2_LIBDIR/../compiler/c2recipe_parser.c2	/^    return nil;$/;"	v
nil	$C2_LIBDIR/../compiler/compiler_libs.c2	/^    return nil;$/;"	v
nil	$C2_LIBDIR/../generator/c/c_generator_pure_call.c2	/^    return nil;$/;"	v
nil	$C2_LIBDIR/../generator/radix_tree/radix_tree_fs.c2	/^        return nil;$/;"	v
nil	$C2_LIBDIR/../ir/copy_list.c2	/^    return nil;$/;"	v
nil	$C2_LIBDIR/../ir/ref.c2	/^    return nil;$/;"	v
nil	$C2_LIBDIR/../ir/slot_collector.c2	/^    return nil;$/;"	v
nil	$C2_LIBDIR/../ir/work_queue.c2	/^    return nil;$/;"	v
nil	$C2_LIBDIR/../parser/ast_builder.c2	/^                                           nil,$/;"	v
nil	$C2_LIBDIR/../parser/c2_parser.c2	/^                     nil,$/;"	v
nil	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    return nil;$/;"	v
nil	$C2_LIBDIR/../parser/c2_parser_stmt.c2	/^    return nil;$/;"	v
no_libc	$C2_LIBDIR/../common/build_target.c2	/^    bool no_libc;$/;"	v
no_plugins	$C2_LIBDIR/../compiler/main.c2	/^    bool no_plugins;$/;"	v
no_plugins	$C2_LIBDIR/../compiler/plugin_mgr.c2	/^    bool no_plugins;$/;"	v
no_trace	$C2_LIBDIR/../generator/c/c_generator.c2	/^    bool no_trace;  \/\/to disable tracing on c2_trace module$/;"	v
no_trace	$C2_LIBDIR/../generator/c/c_generator_call.c2	/^            bool no_trace = gen.no_trace;$/;"	v
no_unreachable_code	$C2_LIBDIR/../common/warning_flags.c2	/^    bool no_unreachable_code;$/;"	v
no_unused	$C2_LIBDIR/../common/warning_flags.c2	/^    bool no_unused;$/;"	v
no_unused_enum_constant	$C2_LIBDIR/../common/warning_flags.c2	/^    bool no_unused_enum_constant;$/;"	v
no_unused_function	$C2_LIBDIR/../common/warning_flags.c2	/^    bool no_unused_function;$/;"	v
no_unused_import	$C2_LIBDIR/../common/warning_flags.c2	/^    bool no_unused_import;$/;"	v
no_unused_label	$C2_LIBDIR/../common/warning_flags.c2	/^    bool no_unused_label;$/;"	v
no_unused_module	$C2_LIBDIR/../common/warning_flags.c2	/^    bool no_unused_module;$/;"	v
no_unused_parameter	$C2_LIBDIR/../common/warning_flags.c2	/^    bool no_unused_parameter;$/;"	v
no_unused_public	$C2_LIBDIR/../common/warning_flags.c2	/^    bool no_unused_public;$/;"	v
no_unused_type	$C2_LIBDIR/../common/warning_flags.c2	/^    bool no_unused_type;$/;"	v
no_unused_variable	$C2_LIBDIR/../common/warning_flags.c2	/^    bool no_unused_variable;$/;"	v
node	$C2_LIBDIR/../common/build_file.c2	/^    return node;$/;"	v
node	$C2_LIBDIR/../common/linked_list.c2	/^    return node;$/;"	v
node	$C2_LIBDIR/../common/yaml/yaml_data.c2	/^    Node* node;$/;"	v
node	$C2_LIBDIR/../common/yaml/yaml_iterator.c2	/^    const Node* node;$/;"	v
node	$C2_LIBDIR/../compiler/manifest.c2	/^    return node;$/;"	v
node_count	$C2_LIBDIR/../common/yaml/yaml_dump.c2	/^    u32 node_count = cast<u32>(d.nodes_cur - d.nodes);$/;"	v
node_count	$C2_LIBDIR/../common/yaml/yaml_iterator.c2	/^    u32 node_count = cast<u32>(p.data.nodes_cur - p.data.nodes) - 1;$/;"	v
node_idx	$C2_LIBDIR/../common/yaml/yaml_data.c2	/^            u32 node_idx = cast<u32>(sl.node - d.nodes);$/;"	v
node_idx	$C2_LIBDIR/../generator/radix_tree/radix_tree.c2	/^    u32 node_idx = t.match_node(t.nodes.root_idx, text, cast<u32>(strlen(text)), &cur_match);$/;"	v
node_idx	$C2_LIBDIR/../generator/radix_tree/radix_tree_fs.c2	/^    u32 node_idx = tr.nodes_size;$/;"	v
node_idx2	$C2_LIBDIR/../generator/radix_tree/radix_tree_fs.c2	/^    u32 node_idx2 = tr.add_node(n.num_children, word_idx);$/;"	v
node_names	$C2_LIBDIR/../common/yaml/yaml_data.c2	/^const char*[] node_names = { "UNK", "SCA", "MAP", "SEQ" }$/;"	v
node_size	$C2_LIBDIR/../generator/radix_tree/radix_tree.c2	/^    u32 node_size = sizeof(Node) + num_children * sizeof(u32);$/;"	v
node_size	$C2_LIBDIR/../generator/radix_tree/radix_tree_fs.c2	/^    u32 node_size = sizeof(Node) + num_children * sizeof(u32);$/;"	v
nodes	$C2_LIBDIR/../common/yaml/yaml_data.c2	/^    Node* nodes;$/;"	v
nodes	$C2_LIBDIR/../generator/radix_tree/radix_tree.c2	/^    u8[0] nodes;$/;"	v
nodes	$C2_LIBDIR/../generator/radix_tree/radix_tree_fs.c2	/^    Nodes* nodes;$/;"	v
nodes	$C2_LIBDIR/../ir/rev_list.c2	/^    u8* nodes;$/;"	v
nodes2	$C2_LIBDIR/../common/yaml/yaml_data.c2	/^    Node* nodes2 = malloc(d.nodes_count * sizeof(Node));$/;"	v
nodes2	$C2_LIBDIR/../generator/radix_tree/radix_tree.c2	/^    Nodes* nodes2 = Nodes.create(capacity);$/;"	v
nodes_count	$C2_LIBDIR/../common/yaml/yaml_data.c2	/^    u32 nodes_count;$/;"	v
nodes_cur	$C2_LIBDIR/../common/yaml/yaml_data.c2	/^    Node* nodes_cur;$/;"	v
nodes_size	$C2_LIBDIR/../generator/radix_tree/radix_tree_fs.c2	/^    u32 nodes_size;$/;"	v
now64	$C2_LIBDIR/../common/utils.c2	/^    u64 now64 = cast<u64>(tv.tv_sec);$/;"	v
now64	$C2_LIBDIR/../plugins/unit_test2.c2	/^  u64 now64 = cast<u64>(tv.tv_sec);$/;"	v
nread	$C2_LIBDIR/../common/file/reader.c2	/^        isize nread = read(hd, p, len);$/;"	v
num	$C2_LIBDIR/../analyser/module_analyser_builtin.c2	/^    u32 num = etd.getNumConstants();$/;"	v
num	$C2_LIBDIR/../ast/member_expr.c2	/^    u32 num = e.getNumRefs();$/;"	v
num	$C2_LIBDIR/../ast_utils/string_pool.c2	/^            u32 num = 1;$/;"	v
num	$C2_LIBDIR/../generator/c/c_generator_stmt.c2	/^                u32 num = 1;$/;"	v
num	$C2_LIBDIR/../parser/c2_parser_stmt.c2	/^    Number num = .     \/\/ id = type$/;"	v
num1	$C2_LIBDIR/../analyser/conversion_checker.c2	/^    u32 num1 = fdl.getNumParams();$/;"	v
num2	$C2_LIBDIR/../analyser/conversion_checker.c2	/^    u32 num2 = fdr.getNumParams();$/;"	v
numCases	$C2_LIBDIR/../analyser/module_analyser_switch.c2	/^    const u32 numCases = sw.getNumCases();$/;"	v
numCases	$C2_LIBDIR/../ast/switch_stmt.c2	/^    u32 numCases = s.getNumCases();$/;"	v
numConstants	$C2_LIBDIR/../analyser/module_analyser_switch.c2	/^        const u32 numConstants = etd.getNumConstants();$/;"	v
numRefs	$C2_LIBDIR/../ast/member_expr.c2	/^    u32 numRefs = m.getNumRefs();$/;"	v
numValues	$C2_LIBDIR/../analyser/module_analyser_init.c2	/^    u32 numValues = ile.getNumValues();$/;"	v
num_adds	$C2_LIBDIR/../ast_utils/string_pool.c2	/^    u32 num_adds;$/;"	v
num_allocs	$C2_LIBDIR/../ast_utils/context.c2	/^    u32 num_allocs;$/;"	v
num_args	$C2_LIBDIR/../analyser/module_analyser_call.c2	/^    u32 num_args;$/;"	v
num_args	$C2_LIBDIR/../ast/ast_evaluator.c2	/^    u32 num_args;$/;"	v
num_args	$C2_LIBDIR/../ast/call_expr.c2	/^    u32 num_args = e.base.base.callExprBits.num_args;$/;"	v
num_args	$C2_LIBDIR/../generator/ast_visitor_expr.c2	/^    u32 num_args = c.getNumArgs();$/;"	v
num_args	$C2_LIBDIR/../generator/c/c_generator_pure_call.c2	/^    u32 num_args = c.getNumArgs();$/;"	v
num_args	$C2_LIBDIR/../generator/c2i/c2i_generator_expr.c2	/^    u32 num_args = call.getNumArgs();$/;"	v
num_args	$C2_LIBDIR/../generator/ir/ir_generator_call.c2	/^    u32 num_args = call.getNumArgs();$/;"	v
num_args	$C2_LIBDIR/../ir/function_info.c2	/^    u8 num_args;$/;"	v
num_args	$C2_LIBDIR/../parser/ast_builder.c2	/^                                              u32 num_args,$/;"	v
num_arrays	$C2_LIBDIR/../analyser/module_analyser_type.c2	/^    u32 num_arrays = ref.getNumArrays();$/;"	v
num_arrays	$C2_LIBDIR/../generator/ast_visitor.c2	/^    u32 num_arrays = r.getNumArrays();$/;"	v
num_arrays	$C2_LIBDIR/../generator/c/dep_finder.c2	/^    u32 num_arrays = r.getNumArrays();$/;"	v
num_attrs	$C2_LIBDIR/../parser/ast_builder.c2	/^    u32 num_attrs;$/;"	v
num_attrs	$C2_LIBDIR/../parser/c2_parser.c2	/^    u32 num_attrs = 0;$/;"	v
num_auto_args	$C2_LIBDIR/../analyser/module_analyser_call.c2	/^    u32 num_auto_args = fd.getNumAutoArgs();$/;"	v
num_blks	$C2_LIBDIR/../ir/print.c2	/^    u32 num_blks = info.blocks.getCount();$/;"	v
num_blocks	$C2_LIBDIR/../ir/context.c2	/^    u32 num_blocks = fi.blocks.getCount();$/;"	v
num_blocks	$C2_LIBDIR/../ir/graphviz.c2	/^    u32 num_blocks = fi.blocks.getCount();$/;"	v
num_blocks	$C2_LIBDIR/../ir/register_alloc.c2	/^    u32 num_blocks = fi.blocks.getCount();$/;"	v
num_blocks	$C2_LIBDIR/../ir/rev_list.c2	/^    u32 num_blocks = info.blocks.getCount();$/;"	v
num_blocks	$C2_LIBDIR/../ir/rpo.c2	/^    u32 num_blocks = fi.blocks.getCount();$/;"	v
num_blocks	$C2_LIBDIR/../ir/slot_collector.c2	/^    u32 num_blocks;$/;"	v
num_blocks	$C2_LIBDIR/../ir/slot_writes_map.c2	/^    u32 num_blocks;$/;"	v
num_blocks	$C2_LIBDIR/../ir/ssa.c2	/^    u32 num_blocks = fi.blocks.getCount();$/;"	v
num_blocks	$C2_LIBDIR/../ir/switch.c2	/^    u32 num_blocks = fi.blocks.getCount();$/;"	v
num_cases	$C2_LIBDIR/../generator/c/c_generator_stmt.c2	/^    const u32 num_cases = sw.getNumCases();$/;"	v
num_cases	$C2_LIBDIR/../generator/c2i/c2i_generator_stmt.c2	/^    const u32 num_cases = sw.getNumCases();$/;"	v
num_cases	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^        u32 num_cases = sw.getNumCases();$/;"	v
num_cases	$C2_LIBDIR/../generator/ir/ir_generator_switch.c2	/^    u32 num_cases = sw.getNumCases();$/;"	v
num_cases	$C2_LIBDIR/../ir/common.c2	/^        u32 num_cases = b.dests[1];$/;"	v
num_cases	$C2_LIBDIR/../ir/context.c2	/^        u32 num_cases = b.dests[1];$/;"	v
num_cases	$C2_LIBDIR/../ir/print.c2	/^    u32 num_cases = info.cases.getCount();$/;"	v
num_cases	$C2_LIBDIR/../ir/switch.c2	/^    u32 num_cases = b.dests[1];$/;"	v
num_children	$C2_LIBDIR/../generator/radix_tree/radix_tree.c2	/^        u32 num_children;$/;"	v
num_clauses	$C2_LIBDIR/../ir/print.c2	/^    u32 num_clauses = info.phis.getCount();$/;"	v
num_clauses	$C2_LIBDIR/../ir/register_alloc.c2	/^        u32 num_clauses = fi.phis.getCount();$/;"	v
num_clobbers	$C2_LIBDIR/../ast/asm_stmt.c2	/^    u8 num_clobbers;$/;"	v
num_clobbers	$C2_LIBDIR/../generator/c/c_generator_stmt.c2	/^    u32 num_clobbers = a.getNumClobbers();$/;"	v
num_clobbers	$C2_LIBDIR/../generator/c2i/c2i_generator_stmt.c2	/^    u32 num_clobbers = a.getNumClobbers();$/;"	v
num_conds	$C2_LIBDIR/../analyser/module_analyser_switch.c2	/^    u32 num_conds = c.getNumConds();$/;"	v
num_conds	$C2_LIBDIR/../ast/switch_case.c2	/^    u32 num_conds = src.bits.num_conds;$/;"	v
num_conds	$C2_LIBDIR/../generator/c/c_generator_stmt.c2	/^            u32 num_conds = c.getNumConds();$/;"	v
num_conds	$C2_LIBDIR/../generator/c2i/c2i_generator_stmt.c2	/^        u32 num_conds = c.getNumConds();$/;"	v
num_constants	$C2_LIBDIR/../analyser/module_analyser_switch.c2	/^                    u32 num_constants = etd.getNumConstants();$/;"	v
num_constants	$C2_LIBDIR/../analyser/module_analyser_type.c2	/^    u32 num_constants = d.getNumConstants();$/;"	v
num_constants	$C2_LIBDIR/../generator/c/c_generator.c2	/^    u32 num_constants = etd.getNumConstants();$/;"	v
num_constants	$C2_LIBDIR/../generator/c/dep_finder.c2	/^    u32 num_constants = etd.getNumConstants();$/;"	v
num_constants	$C2_LIBDIR/../generator/c2i/c2i_generator_decl.c2	/^    u32 num_constants = etd.getNumConstants();$/;"	v
num_constraints	$C2_LIBDIR/../ast/asm_stmt.c2	/^    u8 num_constraints;$/;"	v
num_consts	$C2_LIBDIR/../analyser/unused_checker.c2	/^    u32 num_consts = d.getNumConstants();$/;"	v
num_decls	$C2_LIBDIR/../parser/c2_parser_stmt.c2	/^    u32 num_decls = 0;$/;"	v
num_deps	$C2_LIBDIR/../compiler/compiler_libs.c2	/^                u32 num_deps = deps.length();$/;"	v
num_enum_functions	$C2_LIBDIR/../ast/enum_type_decl.c2	/^    u32 num_enum_functions;$/;"	v
num_errors	$C2_LIBDIR/../common/diagnostics.c2	/^    u32 num_errors;$/;"	v
num_errors	$C2_LIBDIR/../compiler/main.c2	/^    u32 num_errors = c.diags.getNumErrors();$/;"	v
num_exprs	$C2_LIBDIR/../analyser/module_analyser_stmt.c2	/^    u32 num_exprs = a.getNumExprs();$/;"	v
num_exprs	$C2_LIBDIR/../ast/asm_stmt.c2	/^    u8 num_exprs;$/;"	v
num_exprs	$C2_LIBDIR/../generator/ast_visitor.c2	/^        u32 num_exprs = a.getNumExprs();$/;"	v
num_fields	$C2_LIBDIR/../ast/struct_type_decl.c2	/^    u32 num_fields;     \/\/ fields[num_fields]$/;"	v
num_files	$C2_LIBDIR/../ast/module.c2	/^    u32 num_files;$/;"	v
num_files	$C2_LIBDIR/../common/build_target.c2	/^    u32 num_files;$/;"	v
num_files	$C2_LIBDIR/../common/source_mgr.c2	/^    u32 num_files;$/;"	v
num_files	$C2_LIBDIR/../compiler/c2recipe_parser.c2	/^    u32 num_files;$/;"	v
num_files	$C2_LIBDIR/../compiler/main.c2	/^    u32 num_files = opts.files.length();$/;"	v
num_imports	$C2_LIBDIR/../analyser/scope.c2	/^    u32 num_imports = s.imports.size();$/;"	v
num_indexes	$C2_LIBDIR/../ast/struct_type_decl.c2	/^    u32 num_indexes;    \/\/ number of different indexes (unions use 1)$/;"	v
num_inits	$C2_LIBDIR/../generator/ir/field_struct_layouter.c2	/^    u32 num_inits;$/;"	v
num_inputs	$C2_LIBDIR/../ast/asm_stmt.c2	/^    u8 num_inputs;$/;"	v
num_inputs	$C2_LIBDIR/../generator/c/c_generator_stmt.c2	/^    u32 num_inputs = a.getNumInputs();$/;"	v
num_inputs	$C2_LIBDIR/../generator/c2i/c2i_generator_stmt.c2	/^    u32 num_inputs = a.getNumInputs();$/;"	v
num_inputs	$C2_LIBDIR/../parser/ast_builder.c2	/^                                       u32 num_inputs,$/;"	v
num_inputs	$C2_LIBDIR/../parser/c2_parser_stmt.c2	/^    u32 num_inputs = names.length() - num_outputs;$/;"	v
num_instr	$C2_LIBDIR/../ir/register_alloc.c2	/^    u32 num_instr = fi.instructions.getCount();$/;"	v
num_labels	$C2_LIBDIR/../analyser/module_analyser_function.c2	/^    u32 num_labels = ma.labels.getCount();$/;"	v
num_members	$C2_LIBDIR/../analyser/module_analyser_init.c2	/^    const u32 num_members = std.getNumMembers();$/;"	v
num_members	$C2_LIBDIR/../analyser/module_analyser_struct.c2	/^    u32 num_members = d.getNumMembers();$/;"	v
num_members	$C2_LIBDIR/../analyser/size_analyser.c2	/^    u32 num_members = s.getNumMembers();$/;"	v
num_members	$C2_LIBDIR/../analyser/unused_checker.c2	/^    u32 num_members = std.getNumMembers();$/;"	v
num_members	$C2_LIBDIR/../ast/struct_type_decl.c2	/^    u32 num_members;$/;"	v
num_members	$C2_LIBDIR/../generator/ast_visitor.c2	/^        u32 num_members = s.getNumMembers();$/;"	v
num_members	$C2_LIBDIR/../generator/c/c_generator.c2	/^    u32 num_members = std.getNumMembers();$/;"	v
num_members	$C2_LIBDIR/../generator/c/dep_finder.c2	/^    u32 num_members = d.getNumMembers();$/;"	v
num_members	$C2_LIBDIR/../generator/c2i/c2i_generator_decl.c2	/^        u32 num_members = std.getNumMembers();$/;"	v
num_members	$C2_LIBDIR/../generator/ir/field_struct_layouter.c2	/^    u32 num_members = std.getNumMembers();$/;"	v
num_members	$C2_LIBDIR/../generator/ir/ir_generator_expr.c2	/^    u32 num_members = std.getNumMembers();$/;"	v
num_members	$C2_LIBDIR/../plugins/deps_generator.c2	/^        u32 num_members = s.getNumMembers();$/;"	v
num_mods	$C2_LIBDIR/../analyser/module_sorter.c2	/^    u32 num_mods;$/;"	v
num_mods	$C2_LIBDIR/../common/module_list.c2	/^    u32 num_mods;$/;"	v
num_names	$C2_LIBDIR/../ast/asm_stmt.c2	/^    u32 num_names = num_outputs + num_inputs;$/;"	v
num_outputs	$C2_LIBDIR/../analyser/module_analyser_stmt.c2	/^    u32 num_outputs = a.getNumOutputs();$/;"	v
num_outputs	$C2_LIBDIR/../ast/asm_stmt.c2	/^    u8 num_outputs;$/;"	v
num_outputs	$C2_LIBDIR/../generator/c/c_generator_stmt.c2	/^    u32 num_outputs = a.getNumOutputs();$/;"	v
num_outputs	$C2_LIBDIR/../generator/c2i/c2i_generator_stmt.c2	/^    u32 num_outputs = a.getNumOutputs();$/;"	v
num_outputs	$C2_LIBDIR/../parser/ast_builder.c2	/^                                      num_outputs, num_inputs,$/;"	v
num_outputs	$C2_LIBDIR/../parser/c2_parser_stmt.c2	/^    u32 num_outputs = names.length();$/;"	v
num_params	$C2_LIBDIR/../analyser/module_analyser_function.c2	/^    u32 num_params = fd.getNumParams();$/;"	v
num_params	$C2_LIBDIR/../ast/function_decl.c2	/^    u8 num_params;$/;"	v
num_params	$C2_LIBDIR/../generator/ast_visitor.c2	/^    u32 num_params = d.getNumParams();$/;"	v
num_params	$C2_LIBDIR/../generator/c/c_generator.c2	/^    u32 num_params = fd.getNumParams();$/;"	v
num_params	$C2_LIBDIR/../generator/c/dep_finder.c2	/^    u32 num_params = d.getNumParams();$/;"	v
num_params	$C2_LIBDIR/../generator/c2i/c2i_generator_decl.c2	/^    u32 num_params = fd.getNumParams();$/;"	v
num_params	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^    u32 num_params = fd.getNumParams();$/;"	v
num_params	$C2_LIBDIR/../parser/ast_builder.c2	/^                                          num_params,$/;"	v
num_private	$C2_LIBDIR/../ast/symbol_table.c2	/^    u32 num_private;$/;"	v
num_ptrs	$C2_LIBDIR/../analyser/module_analyser_type.c2	/^    u32 num_ptrs = ref.getNumPointers();$/;"	v
num_public	$C2_LIBDIR/../ast/symbol_table.c2	/^    u32 num_public;$/;"	v
num_refs	$C2_LIBDIR/../ast/type_ref.c2	/^    u32 num_refs = 0;$/;"	v
num_scopes	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^    u32 num_scopes;$/;"	v
num_scopes	$C2_LIBDIR/../ir/context.c2	/^    u32 num_scopes;$/;"	v
num_slots	$C2_LIBDIR/../ir/function_info.c2	/^    u16 num_slots;$/;"	v
num_static_slots	$C2_LIBDIR/../ir/slot_collector.c2	/^    u32 num_static_slots;$/;"	v
num_stmts	$C2_LIBDIR/../ast/switch_case.c2	/^    u32 num_stmts = src.bits.num_stmts;$/;"	v
num_stmts	$C2_LIBDIR/../generator/c/c_generator_stmt.c2	/^    const u32 num_stmts = c.getNumStmts();$/;"	v
num_stmts	$C2_LIBDIR/../generator/c2i/c2i_generator_stmt.c2	/^    const u32 num_stmts = c.getNumStmts();$/;"	v
num_stmts	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^        const u32 num_stmts = c.getCount();$/;"	v
num_stmts	$C2_LIBDIR/../generator/ir/ir_generator_stmt.c2	/^        const u32 num_stmts = c.getCount();$/;"	v
num_stmts	$C2_LIBDIR/../generator/ir/ir_generator_switch.c2	/^    u32 num_stmts = sc.getNumStmts();$/;"	v
num_struct_functions	$C2_LIBDIR/../ast/struct_type_decl.c2	/^    u32 num_struct_functions;$/;"	v
num_symbols	$C2_LIBDIR/../generator/c/c_generator_special.c2	/^        u32 num_symbols = symbols.size();$/;"	v
num_targets	$C2_LIBDIR/../compiler/c2recipe.c2	/^    u32 num_targets;$/;"	v
num_targets	$C2_LIBDIR/../compiler/main.c2	/^    u32 num_targets = opts.targets.length();$/;"	v
num_tests	$C2_LIBDIR/../plugins/unit_test1.c2	/^   u32 num_tests;$/;"	v
num_values	$C2_LIBDIR/../analyser/module_analyser.c2	/^        u32 num_values = entry.values.size();$/;"	v
num_values	$C2_LIBDIR/../ast/init_list_expr.c2	/^    u32 num_values;$/;"	v
num_values	$C2_LIBDIR/../generator/c/c_generator_expr.c2	/^        u32 num_values = ile.getNumValues();$/;"	v
num_values	$C2_LIBDIR/../generator/c/c_generator_pure_call.c2	/^    u32 num_values;$/;"	v
num_values	$C2_LIBDIR/../generator/c2i/c2i_generator_expr.c2	/^        u32 num_values = ile.getNumValues();$/;"	v
num_values	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^    u32 num_values = ile.getNumValues();$/;"	v
num_values	$C2_LIBDIR/../generator/ir/ir_generator_expr.c2	/^    u32 num_values = ile.getNumValues();$/;"	v
num_variables	$C2_LIBDIR/../ir/interference_graph.c2	/^    u32 num_variables;$/;"	v
num_variables	$C2_LIBDIR/../ir/live_map.c2	/^    u32 num_variables;$/;"	v
num_warnings	$C2_LIBDIR/../common/diagnostics.c2	/^    u32 num_warnings;$/;"	v
num_words	$C2_LIBDIR/../common/bit_array.c2	/^    u32 num_words = (cap + 63) \/ 64;$/;"	v
num_words	$C2_LIBDIR/../generator/radix_tree/radix_tree_dump.c2	/^    u32 num_words = t.count_words();$/;"	v
number	$C2_LIBDIR/../ast_utils/attr.c2	/^        u32 number;$/;"	v
number_radix	$C2_LIBDIR/../ast_utils/number_radix.c2	/^module number_radix;$/;"	v
numcases	$C2_LIBDIR/../generator/ast_visitor.c2	/^        const u32 numcases = sw.getNumCases();$/;"	v
numconds	$C2_LIBDIR/../generator/ast_visitor.c2	/^            u32 numconds = c.getNumConds();$/;"	v
numread	$C2_LIBDIR/../common/file/reader.c2	/^    isize numread = read2(fd, region, size);$/;"	v
numread	$C2_LIBDIR/../common/process_utils.c2	/^        isize numread = read(error_pipe[0], error, sizeof(error)-1);$/;"	v
numrefs	$C2_LIBDIR/../ast/type_ref.c2	/^    u32 numrefs = (r.flags.kind != TypeRefKind.Builtin) + r.flags.has_prefix;$/;"	v
numrefs	$C2_LIBDIR/../generator/c/c_generator_expr.c2	/^    u32 numrefs = m.getNumRefs();$/;"	v
numrefs	$C2_LIBDIR/../generator/ir/ir_generator_member.c2	/^    u32 numrefs = m.getNumRefs();$/;"	v
numstmts	$C2_LIBDIR/../generator/ast_visitor.c2	/^            u32 numstmts = c.getNumStmts();$/;"	v
octconv	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^fn u32 octconv(const char* p, u32 maxn, u32* pc) {$/;"	f
off	$C2_LIBDIR/../ast/ast_evaluator.c2	/^            u32 off = vd.getOffset();$/;"	v
offset	$C2_LIBDIR/../analyser/module_analyser_init.c2	/^        u32 offset = base_offset + ml.offset;$/;"	v
offset	$C2_LIBDIR/../ast/builtin_expr.c2	/^    OffsetOfData[0] offset;     \/\/ tail-allocated, only for offsetof$/;"	v
offset	$C2_LIBDIR/../ast/decl.c2	/^    u16 offset; \/\/ for struct members? TODO move to VarDecl tail info$/;"	v
offset	$C2_LIBDIR/../ast/member_expr.c2	/^    u32 offset = 0;$/;"	v
offset	$C2_LIBDIR/../ast/struct_type_decl.c2	/^    u32 offset;$/;"	v
offset	$C2_LIBDIR/../ast_utils/string_pool.c2	/^            isize offset = text - p.data;$/;"	v
offset	$C2_LIBDIR/../common/dsm_sorter.c2	/^    u32 offset = src * s.count + dst;$/;"	v
offset	$C2_LIBDIR/../common/source_mgr.c2	/^    u32 offset;$/;"	v
offset	$C2_LIBDIR/../common/yaml/yaml_dump.c2	/^            u32 offset = cast<u32>(cp - d.text);$/;"	v
offset	$C2_LIBDIR/../generator/c2refs.c2	/^    u32 offset = loc - file.start;$/;"	v
offset	$C2_LIBDIR/../generator/ir/basic_struct_layouter.c2	/^    u32 offset = ml.offset;$/;"	v
offset	$C2_LIBDIR/../generator/ir/field_struct_layouter.c2	/^    u32 offset = info.offset;$/;"	v
offset	$C2_LIBDIR/../generator/ir/ir_generator_expr.c2	/^    u32 offset = 0;$/;"	v
offset	$C2_LIBDIR/../generator/ir/ir_generator_member.c2	/^        u32 offset = 0;$/;"	v
offset	$C2_LIBDIR/../generator/radix_tree/radix_tree.c2	/^            isize offset = text - t.words.data;$/;"	v
offset	$C2_LIBDIR/../plugins/refs_generator.c2	/^    u32 offset = 0;$/;"	v
offset_ref	$C2_LIBDIR/../generator/ir/field_struct_layouter.c2	/^            Ref offset_ref = ctx.addIntegerConstant(ml.offset - cur_offset);$/;"	v
ofs	$C2_LIBDIR/../analyser/size_analyser.c2	/^                u32 ofs = ((pos * 8 + bit_pos) % a8 + bit_size + a8 - 1) \/ a8;$/;"	v
ok	$C2_LIBDIR/../analyser/conversion_checker.c2	/^    bool ok = inner.isVoid();$/;"	v
ok	$C2_LIBDIR/../analyser/module_analyser.c2	/^    return ok;$/;"	v
ok	$C2_LIBDIR/../analyser/module_analyser_binop.c2	/^    bool ok = ma.checker.check(builtins[BuiltinKind.Bool], lhs, b.getLHS2(), b.getLHS().getLoc()/;"	v
ok	$C2_LIBDIR/../analyser/module_analyser_call.c2	/^        bool ok = ma.checker.check(expectedType, baseType, e_ptr, loc);$/;"	v
ok	$C2_LIBDIR/../analyser/module_analyser_expr.c2	/^        bool ok = ma.checker.check(lhs, rhs, e_ptr, e.getLoc());$/;"	v
ok	$C2_LIBDIR/../analyser/module_analyser_init.c2	/^    return ok;$/;"	v
ok	$C2_LIBDIR/../common/build_file.c2	/^    return ok;$/;"	v
ok	$C2_LIBDIR/../compiler/c2recipe_yaml.c2	/^    return ok;$/;"	v
ok	$C2_LIBDIR/../compiler/compiler_libs.c2	/^    bool ok = manifest.parse(c.sm, file_id, c.astPool, comp, &mods);$/;"	v
ok	$C2_LIBDIR/../compiler/manifest.c2	/^    return ok;$/;"	v
ok	$C2_LIBDIR/../plugins/unit_test2.c2	/^  u32 ok;$/;"	v
old	$C2_LIBDIR/../ast/array_value_list.c2	/^        void* old = l.values;$/;"	v
old	$C2_LIBDIR/../ast/function_decl_list.c2	/^        void* old = l.decls;$/;"	v
old	$C2_LIBDIR/../ast/import_decl_list.c2	/^        void* old = l.decls;$/;"	v
old	$C2_LIBDIR/../ast/module.c2	/^        void* old = m.files;$/;"	v
old	$C2_LIBDIR/../ast/static_assert_list.c2	/^        void* old = l.asserts;$/;"	v
old	$C2_LIBDIR/../ast/utils.c2	/^            void* old = globals.ast_list;$/;"	v
old	$C2_LIBDIR/../common/module_list.c2	/^        void* old = l.mods;$/;"	v
old	$C2_LIBDIR/../compiler/c2recipe_parser.c2	/^    Set* old = p.findSet(p.token.value);$/;"	v
old	$C2_LIBDIR/../ir/constant_list.c2	/^        void* old = cast<void*>(l.constants);$/;"	v
old	$C2_LIBDIR/../ir/context.c2	/^        const Block* old = &blocks1[blk_id];$/;"	v
old	$C2_LIBDIR/../parser/ast_builder.c2	/^    ImportDecl* old = b.ast.findImport(mod_name);$/;"	v
old_capacity	$C2_LIBDIR/../generator/radix_tree/radix_tree.c2	/^    u32 old_capacity = 0;$/;"	v
old_head	$C2_LIBDIR/../common/linked_list.c2	/^    Element* old_head = src.next;$/;"	v
old_icount	$C2_LIBDIR/../ir/ssa.c2	/^    u32 old_icount = fi.instructions.getCount();$/;"	v
old_index	$C2_LIBDIR/../analyser/module_analyser_struct.c2	/^            u32 old_index;$/;"	v
old_instrs	$C2_LIBDIR/../ir/ssa.c2	/^    const Instr* old_instrs = fi.instructions.get(0);$/;"	v
old_len	$C2_LIBDIR/../generator/radix_tree/radix_tree.c2	/^        u32 old_len = iter.len;$/;"	v
old_tail	$C2_LIBDIR/../common/linked_list.c2	/^    Element* old_tail = src.prev;$/;"	v
on_decl	$C2_LIBDIR/../generator/c/dep_finder.c2	/^    OnDecl on_decl;$/;"	v
on_decl	$C2_LIBDIR/../generator/c2i/c2i_generator.c2	/^fn void on_decl(void* arg, Decl* d) {$/;"	f
on_error	$C2_LIBDIR/../ast/instantiator.c2	/^    OpaqueErrorfn on_error;$/;"	v
on_error	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^    HandlerFn on_error;$/;"	v
on_error	$C2_LIBDIR/../plugins/unit_test1.c2	/^  ErrorFn on_error;$/;"	v
on_error	$C2_LIBDIR/../plugins/unit_test2.c2	/^fn void on_error(const char* fmt @(printf_format), ...) {$/;"	f
on_expr	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^fn void on_expr(void* arg, const Expr* e, u32 elem_size) {$/;"	f
on_format_specifier	$C2_LIBDIR/../analyser/module_analyser_call.c2	/^fn bool on_format_specifier(void* context, printf_utils.Specifier specifier, u32 offset, i32 sta/;"	f
on_format_specifier	$C2_LIBDIR/../generator/c/c_generator_expr.c2	/^fn bool on_format_specifier(void* context, printf_utils.Specifier specifier, u32 offset, i32 sta/;"	f
on_function_decl	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^fn void on_function_decl(void* arg, FunctionDecl* d) {$/;"	f
on_import	$C2_LIBDIR/../generator/c2i/c2i_generator.c2	/^fn void on_import(void* arg, ImportDecl* i) {$/;"	f
on_log	$C2_LIBDIR/../plugins/unit_test1.c2	/^  LogFn on_log;$/;"	v
on_module	$C2_LIBDIR/../common/manifest_writer.c2	/^fn void on_module(void* arg, ast.Module* m) {$/;"	f
on_ref	$C2_LIBDIR/../generator/ast_visitor.c2	/^    OnRef on_ref;$/;"	v
on_tokenizer_error	$C2_LIBDIR/../parser/c2_parser.c2	/^fn void on_tokenizer_error(void* arg, SrcLoc loc) {$/;"	f
on_tokenizer_warning	$C2_LIBDIR/../parser/c2_parser.c2	/^fn void on_tokenizer_warning(void* arg, SrcLoc loc) {$/;"	f
on_var_decl	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^fn void on_var_decl(void* arg, VarDecl* vd) {$/;"	f
on_warning	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^    HandlerFn on_warning;$/;"	v
on_zero	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^fn void on_zero(void* arg, u32 size) {$/;"	f
one	$C2_LIBDIR/../ast/value.c2	/^        u64 one = 1;$/;"	v
online_cpus	$C2_LIBDIR/../ir/work_queue.c2	/^fn u32 online_cpus() {$/;"	f
op	$C2_LIBDIR/../ast/ast_evaluator.c2	/^    BinaryOpcode op = e.getOpcode();$/;"	v
op	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^    Kind op;$/;"	v
op1	$C2_LIBDIR/../analyser/module_analyser_binop.c2	/^        BinaryOpcode op1 = cast<BinaryOperator*>(lhs).getOpcode();$/;"	v
op2	$C2_LIBDIR/../analyser/module_analyser_binop.c2	/^        BinaryOpcode op2 = cast<BinaryOperator*>(rhs).getOpcode();$/;"	v
opToken	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^        Token opToken = p.tok;$/;"	v
opcode	$C2_LIBDIR/../analyser/module_analyser_binop.c2	/^    BinaryOpcode opcode = b.getOpcode();$/;"	v
opcode	$C2_LIBDIR/../ast/unary_operator.c2	/^    const char* opcode = unaryOpcode_names[e.getOpcode()];$/;"	v
opcode	$C2_LIBDIR/../generator/c/c_generator_expr.c2	/^    BinaryOpcode opcode = b.getOpcode();$/;"	v
opcode	$C2_LIBDIR/../parser/ast_builder.c2	/^                                            BinaryOpcode opcode,$/;"	v
opcode	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^        UnaryOpcode opcode = convertTokenToUnaryOpcode(savedKind);$/;"	v
open_file	$C2_LIBDIR/../generator/c2refs.c2	/^fn MapFile open_file(const char* filename) {$/;"	f
operand	$C2_LIBDIR/../analyser/module_analyser_unaryop.c2	/^    const char* operand = is_incr ? "increment operand" : "decrement operand";$/;"	v
option	$C2_LIBDIR/../compiler/c2recipe_parser.c2	/^    char[24] option;$/;"	v
options	$C2_LIBDIR/../common/build_file.c2	/^    u32 options; \/\/ index into pool$/;"	v
options	$C2_LIBDIR/../common/build_target.c2	/^    u32 options; \/\/ into pool$/;"	v
options	$C2_LIBDIR/../compiler/c2recipe_parser.c2	/^    u32 options = 0;$/;"	v
opts	$C2_LIBDIR/../compiler/compiler.c2	/^    const Options* opts;        \/\/ no ownership$/;"	v
opts	$C2_LIBDIR/../compiler/main.c2	/^    Options opts;$/;"	v
optype	$C2_LIBDIR/../analyser/module_analyser_binop.c2	/^    return optype;$/;"	v
or_false	$C2_LIBDIR/../generator/ir/ir_generator_expr.c2	/^    BlockId or_false = gen.ctx.createBlock(BlockKind.OrFalse);$/;"	v
order	$C2_LIBDIR/../ir/context.c2	/^    const u32* order = block_order.getFrom(0);$/;"	v
orig	$C2_LIBDIR/../analyser/module_analyser_expr.c2	/^    Expr* orig = sub.getBase(); \/\/ save orig (might be wrapped in ImplicitCast(ArrayToPointerD/;"	v
orig	$C2_LIBDIR/../analyser/module_analyser_switch.c2	/^        Expr* orig = cond;$/;"	v
origFn	$C2_LIBDIR/../analyser/module_analyser_call.c2	/^    Expr* origFn = call.getFunc();  \/\/ store here to avoid the likely inserted FunctionPointer/;"	v
other	$C2_LIBDIR/../analyser/module_analyser.c2	/^    FunctionDecl* other = ma.type_fn_decls.findFunc(index, d.getNameIdx());$/;"	v
other	$C2_LIBDIR/../analyser/module_analyser_type.c2	/^        Module* other = d.getModule();$/;"	v
other	$C2_LIBDIR/../compiler/compiler_libs.c2	/^            Component* other = c.find_component(m);$/;"	v
otherCount	$C2_LIBDIR/../ast/statistics.c2	/^    u32 otherCount = 0;$/;"	v
otherTotal	$C2_LIBDIR/../ast/statistics.c2	/^    u32 otherTotal = 0;$/;"	v
other_dir	$C2_LIBDIR/../compiler/main.c2	/^    const char* other_dir;$/;"	v
other_error	$C2_LIBDIR/../analyser/scope.c2	/^    bool other_error = false;$/;"	v
other_names	$C2_LIBDIR/../ast/statistics.c2	/^const char*[] other_names = { "ArrayValue", "StaticAssert", "SwitchCase" }$/;"	v
others	$C2_LIBDIR/../ast/statistics.c2	/^    Stat[3] others; \/\/ 0=ArrayValue, 1=StaticAssert, 2=SwitchCase$/;"	v
out	$C2_LIBDIR/../analyser/module_analyser_init.c2	/^            goto out;$/;"	v
out	$C2_LIBDIR/../ast/value.c2	/^    return out;$/;"	v
out	$C2_LIBDIR/../common/yaml/yaml_tokenizer.c2	/^            goto out;$/;"	v
out	$C2_LIBDIR/../generator/c/c_generator.c2	/^    return out;$/;"	v
out	$C2_LIBDIR/../ir/context.c2	/^    return out;$/;"	v
out	$C2_LIBDIR/../ir/ssa.c2	/^    return out;$/;"	v
outfile	$C2_LIBDIR/../generator/c/c_generator.c2	/^    char[64] outfile;$/;"	v
output	$C2_LIBDIR/../common/string_utils.c2	/^    return output;$/;"	v
output	$C2_LIBDIR/../plugins/shell_cmd_plugin.c2	/^    char[4096] output;$/;"	v
outputDir	$C2_LIBDIR/../common/build_file.c2	/^    const char* outputDir = parser.getScalarValue("output_dir");$/;"	v
output_base	$C2_LIBDIR/../compiler/compiler.c2	/^    const char* output_base = constants.output_dir;$/;"	v
output_dir	$C2_LIBDIR/../ast_utils/constants.c2	/^public const char* output_dir = "output";$/;"	v
output_dir	$C2_LIBDIR/../common/build_file.c2	/^    u32 output_dir;$/;"	v
output_dir	$C2_LIBDIR/../generator/c/c_generator.c2	/^    const char* output_dir;     \/\/ output\/<target>$/;"	v
output_dir	$C2_LIBDIR/../generator/c/c_generator_special.c2	/^                                 const char* output_dir,$/;"	v
output_dir	$C2_LIBDIR/../generator/c2i/c2i_generator.c2	/^    const char* output_dir;$/;"	v
output_dir	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^    const char* output_dir;$/;"	v
output_dir2	$C2_LIBDIR/../compiler/compiler.c2	/^        const char* output_dir2 = c.build_info.getOutputDir();$/;"	v
output_name	$C2_LIBDIR/../compiler/main.c2	/^    const char* output_name;$/;"	v
output_pipe	$C2_LIBDIR/../common/process_utils.c2	/^    i32[2] output_pipe; \/\/ for command output to stdout and stderr$/;"	v
overflow	$C2_LIBDIR/../ast/value.c2	/^    bool overflow;  \/\/ true if kind is Integer and absolute value exceeds range of u64$/;"	v
overflow	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^    bool overflow = false;$/;"	v
own	$C2_LIBDIR/../ast_utils/string_buffer.c2	/^    bool own;       \/\/ data_ should be freed$/;"	v
owns_modules	$C2_LIBDIR/../common/module_list.c2	/^    bool owns_modules;$/;"	v
packed	$C2_LIBDIR/../analyser/size_analyser.c2	/^    bool packed = s.isPacked();$/;"	v
pad	$C2_LIBDIR/../ast/asm_stmt.c2	/^    u8[2] pad; \/\/ keep names in right place without other members$/;"	v
pad	$C2_LIBDIR/../generator/ir/basic_struct_layouter.c2	/^    u32 pad = offset - l.cur_offset;$/;"	v
pad	$C2_LIBDIR/../generator/ir/field_struct_layouter.c2	/^        u32 pad = l.size - cur_offset;$/;"	v
param	$C2_LIBDIR/../parser/c2_parser.c2	/^    return param;$/;"	v
param_ref	$C2_LIBDIR/../analyser/module_analyser_function.c2	/^        const Ref* param_ref = ref.getUser();$/;"	v
params	$C2_LIBDIR/../analyser/module_analyser_function.c2	/^    VarDecl** params = fd.getParams();$/;"	v
params	$C2_LIBDIR/../ast/ast_evaluator.c2	/^            VarDecl** params = fd.getParams();$/;"	v
params	$C2_LIBDIR/../ast/function_decl.c2	/^    VarDecl** params = d.getParams();$/;"	v
params	$C2_LIBDIR/../generator/c/c_generator.c2	/^    VarDecl** params = fd.getParams();$/;"	v
params	$C2_LIBDIR/../generator/c/c_generator_pure_call.c2	/^    VarDecl** params = fd.getParams();$/;"	v
params	$C2_LIBDIR/../generator/c2i/c2i_generator_decl.c2	/^    VarDecl** params = fd.getParams();$/;"	v
params	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^    VarDecl** params = fd.getParams();$/;"	v
params	$C2_LIBDIR/../parser/ast_builder.c2	/^                                          params,$/;"	v
parenExprBits	$C2_LIBDIR/../ast/stmt.c2	/^        ParenExprBits parenExprBits;$/;"	v
parent	$C2_LIBDIR/../analyser/scope.c2	/^        const Level* parent = &s.levels[s.lvl-1];$/;"	v
parent	$C2_LIBDIR/../common/yaml/yaml_parser.c2	/^    Node* parent = prev.node;$/;"	v
parseArgs	$C2_LIBDIR/../common/process_utils.c2	/^fn u32 parseArgs(const char* args, char** argv, u32 maxargs, char *tmp, usize tmp_size) {$/;"	f
parse_config	$C2_LIBDIR/../plugins/shell_cmd_plugin.c2	/^fn bool parse_config(yaml.Parser* parser, const char* config_file, string_buffer.Buf* out) {$/;"	f
parse_long_opt	$C2_LIBDIR/../compiler/main.c2	/^fn i32 parse_long_opt(i32 i, i32 argc, char** argv, compiler.Options* comp_opts, Options* opts) /;"	f
parse_opts	$C2_LIBDIR/../compiler/main.c2	/^fn void parse_opts(i32 argc, char** argv, compiler.Options* comp_opts, Options* opts) {$/;"	f
part_items	$C2_LIBDIR/../common/quicksort.c2	/^        usize part_items = (right - begin + item_size) \/ item_size;$/;"	v
path	$C2_LIBDIR/../common/file/file_utils.c2	/^    char[Max_path] path;$/;"	v
path	$C2_LIBDIR/../common/utils.c2	/^        char* path = unistd.getcwd(buffer, elemsof(buffer));$/;"	v
path	$C2_LIBDIR/../common/yaml/yaml_iterator.c2	/^                path = rest;$/;"	v
path	$C2_LIBDIR/../compiler/plugin_mgr.c2	/^        const char* path = m.paths.get(i);$/;"	v
path	$C2_LIBDIR/../plugins/shell_cmd_plugin.c2	/^    const char* path;$/;"	v
path_name	$C2_LIBDIR/../compiler/main.c2	/^            u32 path_name = c.auxPool.addStr(plugin_dir, true);$/;"	v
path_prefix	$C2_LIBDIR/../common/utils.c2	/^                char* path_prefix = base_path + strlen(path);$/;"	v
pc	$C2_LIBDIR/../ir/context.c2	/^        PhiClause* pc = fi.phis.get(i);$/;"	v
pc	$C2_LIBDIR/../ir/print.c2	/^            const PhiClause* pc = info.phis.get(i);$/;"	v
pc	$C2_LIBDIR/../ir/register_alloc.c2	/^        PhiClause* pc = &clauses[i];$/;"	v
pc	$C2_LIBDIR/../ir/ssa.c2	/^                    PhiClause* pc = &clauses[p];$/;"	v
pd	$C2_LIBDIR/../analyser/module_analyser_function.c2	/^        const Decl* pd = prefix.decl;$/;"	v
phi_start	$C2_LIBDIR/../ir/ssa.c2	/^    u32 phi_start = fi.phis.addCache(instr_idx, cache);$/;"	v
phis	$C2_LIBDIR/../ir/function_info.c2	/^    PhiList phis;   \/\/ for phi instructions$/;"	v
pid	$C2_LIBDIR/../common/process_utils.c2	/^        Pid pid = waitpid(child_pid, &state, 0);$/;"	v
pivot	$C2_LIBDIR/../common/quicksort.c2	/^    u8* pivot = begin + (count \/ 2) * item_size;$/;"	v
pluginHandler	$C2_LIBDIR/../compiler/compiler.c2	/^                         PluginHandler* pluginHandler,$/;"	v
plugin_count	$C2_LIBDIR/../common/build_file.c2	/^    u32 plugin_count;$/;"	v
plugin_count	$C2_LIBDIR/../compiler/plugin_mgr.c2	/^    u32 plugin_count;$/;"	v
plugin_dir	$C2_LIBDIR/../compiler/main.c2	/^        const char* plugin_dir = getenv("C2_PLUGINDIR");$/;"	v
plugin_info	$C2_LIBDIR/../compiler/compiler.c2	/^import plugin_info;$/;"	v
plugin_info	$C2_LIBDIR/../compiler/main.c2	/^import plugin_info;$/;"	v
plugin_info	$C2_LIBDIR/../compiler/plugin_mgr.c2	/^import plugin_info;$/;"	v
plugin_info	$C2_LIBDIR/../plugins/deps_generator_plugin.c2	/^import plugin_info;$/;"	v
plugin_info	$C2_LIBDIR/../plugins/git_version_plugin.c2	/^import plugin_info;$/;"	v
plugin_info	$C2_LIBDIR/../plugins/plugin_info.c2	/^module plugin_info;$/;"	v
plugin_info	$C2_LIBDIR/../plugins/refs_generator_plugin.c2	/^import plugin_info;$/;"	v
plugin_info	$C2_LIBDIR/../plugins/shell_cmd_plugin.c2	/^import plugin_info;$/;"	v
plugin_info	$C2_LIBDIR/../plugins/unit_test_plugin.c2	/^import plugin_info;$/;"	v
plugin_init	$C2_LIBDIR/../plugins/unit_test_plugin.c2	/^fn void plugin_init(void* arg, plugin_info.Info* info) {$/;"	f
plugin_main	$C2_LIBDIR/../plugins/deps_generator_plugin.c2	/^module plugin_main;$/;"	v
plugin_main	$C2_LIBDIR/../plugins/git_version_plugin.c2	/^module plugin_main;$/;"	v
plugin_main	$C2_LIBDIR/../plugins/refs_generator_plugin.c2	/^module plugin_main;$/;"	v
plugin_main	$C2_LIBDIR/../plugins/shell_cmd_plugin.c2	/^module plugin_main;$/;"	v
plugin_main	$C2_LIBDIR/../plugins/unit_test_plugin.c2	/^module plugin_main;$/;"	v
plugin_max	$C2_LIBDIR/../common/build_file.c2	/^    u32 plugin_max;$/;"	v
plugin_max	$C2_LIBDIR/../compiler/plugin_mgr.c2	/^    u32 plugin_max;$/;"	v
plugin_mgr	$C2_LIBDIR/../compiler/main.c2	/^import plugin_mgr;$/;"	v
plugin_mgr	$C2_LIBDIR/../compiler/plugin_mgr.c2	/^module plugin_mgr;$/;"	v
plugins	$C2_LIBDIR/../common/build_file.c2	/^    Plugin* plugins; \/\/ can be nil$/;"	v
plugins	$C2_LIBDIR/../common/build_target.c2	/^    PluginList plugins;$/;"	v
plugins	$C2_LIBDIR/../compiler/plugin_mgr.c2	/^    Plugin* plugins;$/;"	v
plugins2	$C2_LIBDIR/../common/build_file.c2	/^        Plugin* plugins2 = stdlib.malloc(info.plugin_max * sizeof(Plugin));$/;"	v
plugins2	$C2_LIBDIR/../common/build_target.c2	/^        Plugin* plugins2 = stdlib.malloc(l.capacity * sizeof(Plugin));$/;"	v
plugins2	$C2_LIBDIR/../compiler/plugin_mgr.c2	/^        Plugin* plugins2 = stdlib.malloc(m.plugin_max * sizeof(Plugin));$/;"	v
plugins_after_analysis	$C2_LIBDIR/../compiler/main.c2	/^fn void plugins_after_analysis(void* arg) {$/;"	f
plugins_after_parsing	$C2_LIBDIR/../compiler/main.c2	/^fn void plugins_after_parsing(void* arg) {$/;"	f
plugins_end_target	$C2_LIBDIR/../compiler/main.c2	/^fn void plugins_end_target(void* arg) {$/;"	f
plugins_feature	$C2_LIBDIR/../compiler/main.c2	/^    u32 plugins_feature;$/;"	v
plugins_start_target	$C2_LIBDIR/../compiler/main.c2	/^fn void plugins_start_target(void* arg, plugin_info.Info* info) {$/;"	f
pointer	$C2_LIBDIR/../ast/builtin_expr.c2	/^    Expr* pointer;$/;"	v
pointer	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    Expr* pointer = p.parseExpr();$/;"	v
pointerSize	$C2_LIBDIR/../analyser/size_analyser.c2	/^    u32 pointerSize = getWordSize();$/;"	v
pointer_conversion_allowed	$C2_LIBDIR/../analyser/conversion_checker.c2	/^fn bool pointer_conversion_allowed(QualType linner, QualType rinner) {$/;"	f
pointers	$C2_LIBDIR/../ast/utils.c2	/^    PointerPool pointers;$/;"	v
pos	$C2_LIBDIR/../analyser/size_analyser.c2	/^    u32 pos = 0;       \/\/ byte position of the next member$/;"	v
pos	$C2_LIBDIR/../ast/value.c2	/^    usize pos = 0;$/;"	v
pos	$C2_LIBDIR/../common/file/file_utils.c2	/^    usize pos = pstrcpy(buf, size, dir);$/;"	v
pos	$C2_LIBDIR/../common/source_mgr.c2	/^    CheckPoint pos = { 0, 0 }$/;"	v
pos	$C2_LIBDIR/../common/target_info.c2	/^    u32 pos = 0;$/;"	v
pos	$C2_LIBDIR/../generator/c2_trace.c2	/^    i32 pos = 0, mode = 3, fd = 1, indent = 2;$/;"	v
pos	$C2_LIBDIR/../ir/usage_counter.c2	/^        u32 pos = c.queue_head;$/;"	v
pos	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^    usize pos = 0;$/;"	v
post_analysis	$C2_LIBDIR/../plugins/deps_generator_plugin.c2	/^fn void post_analysis(void* arg) {$/;"	f
post_analysis	$C2_LIBDIR/../plugins/plugin_info.c2	/^    PostAnalysisFn post_analysis;$/;"	v
post_analysis	$C2_LIBDIR/../plugins/refs_generator_plugin.c2	/^fn void post_analysis(void* arg) {$/;"	f
post_parse	$C2_LIBDIR/../plugins/plugin_info.c2	/^    PostParseFn post_parse;$/;"	v
post_parse	$C2_LIBDIR/../plugins/shell_cmd_plugin.c2	/^fn void post_parse(void* arg) {$/;"	f
prec	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^    u8 prec;$/;"	v
prec2	$C2_LIBDIR/../generator/c/c_generator_expr.c2	/^    C_Prec prec2 = C_Prec_table[opcode];$/;"	v
prefix	$C2_LIBDIR/../analyser/module_analyser.c2	/^    Ref* prefix = fd.getPrefix();$/;"	v
prefix	$C2_LIBDIR/../analyser/module_analyser_function.c2	/^        const Ref* prefix = fd.getPrefix();$/;"	v
prefix	$C2_LIBDIR/../analyser/module_analyser_type.c2	/^    const Ref* prefix = ref.getPrefix();$/;"	v
prefix	$C2_LIBDIR/../ast/function_decl.c2	/^    Ref prefix;$/;"	v
prefix	$C2_LIBDIR/../ast/type_ref.c2	/^    Ref prefix;$/;"	v
prefix	$C2_LIBDIR/../compiler/c2recipe_yaml.c2	/^        char[32] prefix;$/;"	v
prefix	$C2_LIBDIR/../generator/ast_visitor.c2	/^    Ref* prefix = d.getPrefix();$/;"	v
prefix	$C2_LIBDIR/../generator/c/c_generator.c2	/^        Ref* prefix = fd.getPrefix();$/;"	v
prefix	$C2_LIBDIR/../generator/c2i/c2i_generator_decl.c2	/^        const char* prefix = fd.getPrefixName();$/;"	v
prefix	$C2_LIBDIR/../generator/radix_tree/radix_tree_dump.c2	/^        const char* prefix = "  ";$/;"	v
prefix	$C2_LIBDIR/../parser/ast_builder.c2	/^                                          prefix,$/;"	v
prefix	$C2_LIBDIR/../parser/c2_parser.c2	/^    Ref* prefix = nil;$/;"	v
prefix	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^    bool prefix = true;$/;"	v
prefix	$C2_LIBDIR/../plugins/deps_generator.c2	/^    const Ref* prefix = ref.getPrefix();$/;"	v
prefix	$C2_LIBDIR/../plugins/refs_generator.c2	/^    const Ref* prefix = ref.getPrefix();$/;"	v
prefix	$C2_LIBDIR/../plugins/unit_test_plugin.c2	/^    Ref* prefix = fd.getPrefix();$/;"	v
prefixType	$C2_LIBDIR/../analyser/module_analyser_function.c2	/^        QualType prefixType = pd.getType();$/;"	v
prefix_cache_idx	$C2_LIBDIR/../analyser/module_analyser.c2	/^    u32 prefix_cache_idx;$/;"	v
prefix_cache_name	$C2_LIBDIR/../analyser/module_analyser.c2	/^    u32 prefix_cache_name;$/;"	v
prefix_name_idx	$C2_LIBDIR/../analyser/module_analyser.c2	/^    u32 prefix_name_idx = prefix.name_idx;$/;"	v
prefix_ref	$C2_LIBDIR/../parser/c2_parser.c2	/^    Ref prefix_ref;$/;"	v
prefixes	$C2_LIBDIR/../analyser/module_analyser.c2	/^    NameVector prefixes;$/;"	v
prev	$C2_LIBDIR/../analyser/module_analyser_init.c2	/^        SrcLoc prev = checker.add(fif.member_idx, value.getLoc());$/;"	v
prev	$C2_LIBDIR/../ast/ast_evaluator.c2	/^    Evaluator* prev;$/;"	v
prev	$C2_LIBDIR/../common/linked_list.c2	/^    Element* prev;$/;"	v
prev	$C2_LIBDIR/../common/yaml/yaml_parser.c2	/^    StackLevel* prev = &p.stack[p.stack_size-2];$/;"	v
prev	$C2_LIBDIR/../generator/radix_tree/radix_tree.c2	/^        Zone* prev = to_container(Zone, list, zone.list.prev);$/;"	v
prev	$C2_LIBDIR/../ir/inserter.c2	/^        u32 prev = idx-1;$/;"	v
prev	$C2_LIBDIR/../ir/interference_graph.c2	/^    u16 prev;$/;"	v
prev	$C2_LIBDIR/../ir/live_map.c2	/^    u16 prev;$/;"	v
prev	$C2_LIBDIR/../ir/slot_writes_map.c2	/^    u16 prev;$/;"	v
prev_fallthrough	$C2_LIBDIR/../generator/ir/ir_generator_switch.c2	/^    bool prev_fallthrough = false;$/;"	v
prev_is_var	$C2_LIBDIR/../ir/print.c2	/^    bool prev_is_var = false;$/;"	v
prev_loc	$C2_LIBDIR/../parser/c2_parser.c2	/^    SrcLoc prev_loc;$/;"	v
print	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^    bool print;$/;"	v
printBinary	$C2_LIBDIR/../ast/integer_literal.c2	/^fn void printBinary(string_buffer.Buf* out, u64 value) {$/;"	f
printOctal	$C2_LIBDIR/../ast/integer_literal.c2	/^fn void printOctal(string_buffer.Buf* out, u64 value) {$/;"	f
print_all	$C2_LIBDIR/../ir/context.c2	/^    bool print_all;$/;"	v
print_all_ir	$C2_LIBDIR/../compiler/compiler.c2	/^    bool print_all_ir;$/;"	v
print_ast	$C2_LIBDIR/../compiler/compiler.c2	/^    bool print_ast;$/;"	v
print_ast_early	$C2_LIBDIR/../compiler/compiler.c2	/^    bool print_ast_early;$/;"	v
print_ast_stats	$C2_LIBDIR/../compiler/compiler.c2	/^    bool print_ast_stats;$/;"	v
print_dest	$C2_LIBDIR/../ir/print.c2	/^fn void print_dest(string_buffer.Buf* out, BlockId id) {$/;"	f
print_errormsg	$C2_LIBDIR/../plugins/unit_test2.c2	/^fn void print_errormsg(const char* fmt @(printf_format), ...) {$/;"	f
print_external_symbols	$C2_LIBDIR/../compiler/compiler.c2	/^    bool print_external_symbols;$/;"	v
print_idx	$C2_LIBDIR/../ir/interference_graph.c2	/^fn void print_idx(u16 idx) {$/;"	f
print_idx	$C2_LIBDIR/../ir/live_map.c2	/^fn void print_idx(u16 idx) {$/;"	f
print_idx	$C2_LIBDIR/../ir/slot_writes_map.c2	/^fn void print_idx(u16 idx) {$/;"	f
print_ir	$C2_LIBDIR/../compiler/compiler.c2	/^    bool print_ir;$/;"	v
print_lib_ast	$C2_LIBDIR/../compiler/compiler.c2	/^    bool print_lib_ast;$/;"	v
print_modules	$C2_LIBDIR/../compiler/compiler.c2	/^    bool print_modules;$/;"	v
print_recipe_help	$C2_LIBDIR/../compiler/main.c2	/^fn void print_recipe_help() {$/;"	f
print_reports	$C2_LIBDIR/../compiler/compiler.c2	/^    u8 print_reports;$/;"	v
print_symbols	$C2_LIBDIR/../compiler/compiler.c2	/^    bool print_symbols;$/;"	v
print_timing	$C2_LIBDIR/../compiler/main.c2	/^    bool print_timing;$/;"	v
print_version	$C2_LIBDIR/../compiler/main.c2	/^fn void print_version() {$/;"	f
print_word	$C2_LIBDIR/../generator/radix_tree/radix_tree_dump.c2	/^fn void print_word(void* arg, const char* text, u32 value) {$/;"	f
printf_arg	$C2_LIBDIR/../generator/c/c_generator.c2	/^    u8 printf_arg = fd.getAttrPrintf();$/;"	v
printf_call_idx	$C2_LIBDIR/../analyser/module_analyser_call.c2	/^    u32 printf_call_idx = 0;$/;"	v
printf_utils	$C2_LIBDIR/../analyser/module_analyser_call.c2	/^import printf_utils;$/;"	v
printf_utils	$C2_LIBDIR/../analyser_utils/printf_utils.c2	/^module printf_utils;$/;"	v
printf_utils	$C2_LIBDIR/../generator/c/c_generator_call.c2	/^import printf_utils;$/;"	v
printf_utils	$C2_LIBDIR/../generator/c/c_generator_expr.c2	/^import printf_utils;$/;"	v
process_utils	$C2_LIBDIR/../common/process_utils.c2	/^module process_utils;$/;"	v
process_utils	$C2_LIBDIR/../generator/c/c_generator.c2	/^import process_utils;$/;"	v
process_utils	$C2_LIBDIR/../plugins/git_version_plugin.c2	/^import process_utils;$/;"	v
process_utils	$C2_LIBDIR/../plugins/shell_cmd_plugin.c2	/^import process_utils;$/;"	v
promote_warnings	$C2_LIBDIR/../common/diagnostics.c2	/^    bool promote_warnings;$/;"	v
prot	$C2_LIBDIR/../generator/c2refs.c2	/^    i32 prot = PROT_READ;$/;"	v
pstrcpy	$C2_LIBDIR/../common/file/file_utils.c2	/^fn usize pstrcpy(char *dest, usize size, const char* src) {$/;"	f
pt	$C2_LIBDIR/../analyser/conversion_checker.c2	/^    PointerType* pt = (PointerType*)lcanon;$/;"	v
pt	$C2_LIBDIR/../analyser/module_analyser_binop.c2	/^    PointerType* pt = lcanon.getPointerType();$/;"	v
pt	$C2_LIBDIR/../analyser/module_analyser_expr.c2	/^    PointerType* pt = q.getPointerType();$/;"	v
pt	$C2_LIBDIR/../analyser/module_analyser_member.c2	/^        PointerType* pt = (PointerType*)t;$/;"	v
pt	$C2_LIBDIR/../ast/qualtype.c2	/^    const PointerType* pt = qt.getPointerType();$/;"	v
pt	$C2_LIBDIR/../ast/type.c2	/^            const PointerType* pt = (PointerType*)t;$/;"	v
pt	$C2_LIBDIR/../ast/utils.c2	/^        PointerType* pt = (PointerType*)t;$/;"	v
pt	$C2_LIBDIR/../generator/c/c_generator.c2	/^        PointerType* pt = cast<PointerType*>(qt.getType());$/;"	v
pt	$C2_LIBDIR/../generator/c2i/c2i_generator_decl.c2	/^        PointerType* pt = cast<PointerType*>(qt.getType());$/;"	v
pt1	$C2_LIBDIR/../analyser/module_analyser_binop.c2	/^        PointerType* pt1 = lcanon.getPointerType();$/;"	v
pt2	$C2_LIBDIR/../analyser/module_analyser_binop.c2	/^        PointerType* pt2 = rcanon.getPointerType();$/;"	v
pthread	$C2_LIBDIR/../ir/work_queue.c2	/^import pthread;$/;"	v
ptr	$C2_LIBDIR/../analyser/conversion_checker.c2	/^    const PointerType* ptr = (PointerType*)rcanon;$/;"	v
ptr	$C2_LIBDIR/../ast/ast.c2	/^    void* ptr;  \/\/ pointer used during analyser\/generation (in analysis: Scope*)$/;"	v
ptr	$C2_LIBDIR/../ast/pointer_pool.c2	/^    return ptr;$/;"	v
ptr	$C2_LIBDIR/../ast/qualtype.c2	/^    usize ptr;$/;"	v
ptr	$C2_LIBDIR/../ast/type_ref.c2	/^    const u8* ptr = cast<u8*>(r.refs) + numrefs * sizeof(Ref);$/;"	v
ptr	$C2_LIBDIR/../generator/c2refs.c2	/^    const u32* ptr = (u32*)section;$/;"	v
ptr	$C2_LIBDIR/../generator/radix_tree/radix_tree_fs.c2	/^    const u32* ptr = cast<u32*>(section);$/;"	v
ptr	$C2_LIBDIR/../ir/function_info.c2	/^    u8* ptr = &fi.args[fi.num_args\/2];$/;"	v
ptr	$C2_LIBDIR/../parser/ast_builder.c2	/^    return ptr;$/;"	v
ptr_pool_idx	$C2_LIBDIR/../ast/pointer_pool.c2	/^    const u32 ptr_pool_idx = t.ptr_pool_idx;$/;"	v
ptr_pool_idx	$C2_LIBDIR/../ast/type.c2	/^    u32 ptr_pool_idx;            \/\/ index into PointerPool, 0 means no pointers$/;"	v
ptrs	$C2_LIBDIR/../ast/pointer_pool.c2	/^    Type*[4] ptrs;  \/\/ Note: quals is index$/;"	v
q2	$C2_LIBDIR/../analyser/module_analyser_expr.c2	/^        QualType q2 = orig.getType();$/;"	v
qidx	$C2_LIBDIR/../analyser/module_analyser_expr.c2	/^    QualType qidx = ma.analyseExpr(sub.getIndex2(), true, RHS);$/;"	v
ql	$C2_LIBDIR/../analyser/conversion_checker.c2	/^    QualType ql = fdl.getRType();$/;"	v
qmem	$C2_LIBDIR/../analyser/module_analyser_builtin.c2	/^    qmem = ma.builder.actOnPointerType(qmem);$/;"	v
qptr	$C2_LIBDIR/../analyser/module_analyser_builtin.c2	/^    QualType qptr = ma.analyseExpr(b.getToContainerPointer2(), false, RHS);$/;"	v
qr	$C2_LIBDIR/../analyser/conversion_checker.c2	/^    QualType qr = fdr.getRType();$/;"	v
qt	$C2_LIBDIR/../analyser/conversion_checker_expr.c2	/^    qt = qt.getCanonicalType();$/;"	v
qt	$C2_LIBDIR/../analyser/module_analyser.c2	/^    QualType qt = d.getType();$/;"	v
qt	$C2_LIBDIR/../analyser/module_analyser_binop.c2	/^    QualType qt = lhs.getType();$/;"	v
qt	$C2_LIBDIR/../analyser/module_analyser_builtin.c2	/^    QualType qt;$/;"	v
qt	$C2_LIBDIR/../analyser/module_analyser_call.c2	/^    qt = qt.getCanonicalType();$/;"	v
qt	$C2_LIBDIR/../analyser/module_analyser_expr.c2	/^    return qt;$/;"	v
qt	$C2_LIBDIR/../analyser/module_analyser_function.c2	/^    QualType qt = ma.analyseTypeRef(rtype);$/;"	v
qt	$C2_LIBDIR/../analyser/module_analyser_init.c2	/^    QualType qt = ma.analyseExpr(ad.getDesignator2(), false, RHS);$/;"	v
qt	$C2_LIBDIR/../analyser/module_analyser_stmt.c2	/^    return qt;$/;"	v
qt	$C2_LIBDIR/../analyser/module_analyser_struct.c2	/^            QualType qt = member.getType();$/;"	v
qt	$C2_LIBDIR/../analyser/module_analyser_switch.c2	/^    QualType qt = d.getType();$/;"	v
qt	$C2_LIBDIR/../analyser/module_analyser_type.c2	/^    QualType qt = d.getType();$/;"	v
qt	$C2_LIBDIR/../analyser/module_analyser_unaryop.c2	/^        return qt;$/;"	v
qt	$C2_LIBDIR/../analyser/size_analyser.c2	/^    qt = qt.getCanonicalType();$/;"	v
qt	$C2_LIBDIR/../analyser_utils/printf_utils.c2	/^        qt = at.getElemType();$/;"	v
qt	$C2_LIBDIR/../ast/decl.c2	/^    QualType qt;$/;"	v
qt	$C2_LIBDIR/../ast/enum_type_decl.c2	/^    QualType qt = d.base.getType();$/;"	v
qt	$C2_LIBDIR/../ast/expr.c2	/^    QualType qt;$/;"	v
qt	$C2_LIBDIR/../ast/function_decl.c2	/^    QualType qt = QualType.create(ftype.asType());$/;"	v
qt	$C2_LIBDIR/../ast/instance_table.c2	/^    QualType qt;$/;"	v
qt	$C2_LIBDIR/../ast/member_expr.c2	/^    return qt;$/;"	v
qt	$C2_LIBDIR/../ast/qualtype.c2	/^    return qt;$/;"	v
qt	$C2_LIBDIR/../ast/string_type_pool.c2	/^    return qt;$/;"	v
qt	$C2_LIBDIR/../ast/struct_type_decl.c2	/^    QualType qt = QualType.create(stype.asType());$/;"	v
qt	$C2_LIBDIR/../ast/value.c2	/^    qt = qt.getCanonicalType();$/;"	v
qt	$C2_LIBDIR/../generator/c/c_generator.c2	/^    qt = qt.getCanonicalType();$/;"	v
qt	$C2_LIBDIR/../generator/c/c_generator_call.c2	/^        QualType qt = func.getType();$/;"	v
qt	$C2_LIBDIR/../generator/c/c_generator_expr.c2	/^    qt = qt.getCanonicalType();$/;"	v
qt	$C2_LIBDIR/../generator/c/c_generator_pure_call.c2	/^        qt = qt.getCanonicalType();$/;"	v
qt	$C2_LIBDIR/../generator/c2i/c2i_generator_decl.c2	/^    QualType qt = d.getType();$/;"	v
qt	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^    QualType qt = vd.asDecl().getType();$/;"	v
qt	$C2_LIBDIR/../generator/ir/ir_generator_call.c2	/^    QualType qt = e.getType();$/;"	v
qt	$C2_LIBDIR/../generator/ir/ir_generator_expr.c2	/^    QualType qt = e.getType();$/;"	v
qt1	$C2_LIBDIR/../ast/ast_evaluator.c2	/^                qt1 = qt1.getCanonicalType();$/;"	v
qt2	$C2_LIBDIR/../analyser/module_analyser_struct.c2	/^                QualType qt2 = ma.analyseExpr(&bitfield, false, RHS);$/;"	v
qt2	$C2_LIBDIR/../ast/qualtype.c2	/^            QualType qt2 = qt.getCanonicalType();$/;"	v
qualifiers	$C2_LIBDIR/../parser/c2_parser.c2	/^    u32 qualifiers = 0;$/;"	v
quals	$C2_LIBDIR/../ast/pointer_pool.c2	/^    u32 quals = qt.getQuals();$/;"	v
quals	$C2_LIBDIR/../ast/qualtype.c2	/^    u32 quals = qt.getQuals();$/;"	v
quals	$C2_LIBDIR/../parser/c2_parser_stmt.c2	/^    u32 quals = p.parseOptionalTypeQualifier();$/;"	v
questionLoc	$C2_LIBDIR/../ast/conditional_operator.c2	/^                                                            SrcLoc questionLoc,$/;"	v
questionLoc	$C2_LIBDIR/../parser/ast_builder.c2	/^                                                 SrcLoc questionLoc,$/;"	v
queue	$C2_LIBDIR/../ir/context.c2	/^    WorkQueue* queue;$/;"	v
queue	$C2_LIBDIR/../ir/interference_graph.c2	/^    u16* queue;  \/\/ num_variables$/;"	v
queue	$C2_LIBDIR/../ir/work_queue.c2	/^    WorkQueue* queue;$/;"	v
queue_count	$C2_LIBDIR/../ir/interference_graph.c2	/^    u32 queue_count;$/;"	v
queue_count	$C2_LIBDIR/../ir/usage_counter.c2	/^    u32 queue_count;$/;"	v
queue_head	$C2_LIBDIR/../ir/interference_graph.c2	/^    u32 queue_head;$/;"	v
queue_head	$C2_LIBDIR/../ir/usage_counter.c2	/^    u32 queue_head;$/;"	v
quicksort	$C2_LIBDIR/../common/quicksort.c2	/^module quicksort;$/;"	v
r2	$C2_LIBDIR/../ast/type_ref.c2	/^    const TypeRef* r2 = inst.ref;$/;"	v
r2	$C2_LIBDIR/../ast/value.c2	/^    Value r2 = *v2;$/;"	v
ra	$C2_LIBDIR/../ir/slot_collector.c2	/^        ReadSlotAccess* ra = &c.reads[i];$/;"	v
radix_tree	$C2_LIBDIR/../generator/c2refs.c2	/^import radix_tree;$/;"	v
radix_tree	$C2_LIBDIR/../generator/radix_tree/radix_tree.c2	/^module radix_tree;$/;"	v
radix_tree	$C2_LIBDIR/../generator/radix_tree/radix_tree_dump.c2	/^module radix_tree;$/;"	v
radix_tree	$C2_LIBDIR/../generator/radix_tree/radix_tree_fs.c2	/^module radix_tree;$/;"	v
range	$C2_LIBDIR/../analyser_utils/ctv_analyser.c2	/^        SrcRange range = { 0, 0 }$/;"	v
range	$C2_LIBDIR/../ast/expr.c2	/^    return range;$/;"	v
range	$C2_LIBDIR/../ast/member_expr.c2	/^    return range;$/;"	v
range	$C2_LIBDIR/../common/diagnostics.c2	/^    SrcRange range = { 0, 0 }$/;"	v
range_end_col	$C2_LIBDIR/../common/diagnostics.c2	/^        u32 range_end_col = loc_col + 1; \/\/ column number for end of the ~~~ area$/;"	v
range_start_col	$C2_LIBDIR/../common/diagnostics.c2	/^        u32 range_start_col = loc_col;  \/\/ column number for start of the ~~~ area$/;"	v
raw	$C2_LIBDIR/../common/build_file.c2	/^        raw = expand;$/;"	v
raw_mode	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^    bool raw_mode;  \/\/ also emit comments and invalid characters$/;"	v
rbuiltin	$C2_LIBDIR/../analyser/conversion_checker.c2	/^    const BuiltinType* rbuiltin = (BuiltinType*)rcanon;$/;"	v
rcanon	$C2_LIBDIR/../analyser/conversion_checker.c2	/^    const Type* rcanon = t2.getTypeOrNil();$/;"	v
rcanon	$C2_LIBDIR/../analyser/module_analyser_binop.c2	/^    QualType rcanon = rhs.getCanonicalType();$/;"	v
rcanon	$C2_LIBDIR/../analyser/module_analyser_expr.c2	/^    QualType rcanon = rhs.getCanonicalType();$/;"	v
rd_count	$C2_LIBDIR/../ir/slot_collector.c2	/^    u16 rd_count;$/;"	v
rd_start	$C2_LIBDIR/../ir/slot_collector.c2	/^    u16 rd_start;$/;"	v
re	$C2_LIBDIR/../analyser/module_analyser_switch.c2	/^            RangeExpr* re = (RangeExpr*)e;$/;"	v
read2	$C2_LIBDIR/../common/file/reader.c2	/^fn isize read2(i32 hd, void* data, usize len) {$/;"	f
read_idx	$C2_LIBDIR/../ir/slot_collector.c2	/^    u32 read_idx;$/;"	v
reads	$C2_LIBDIR/../ir/slot_collector.c2	/^    ReadSlotAccess* reads;$/;"	v
recipe	$C2_LIBDIR/../compiler/c2recipe_parser.c2	/^    Recipe* recipe;$/;"	v
recipe_id	$C2_LIBDIR/../compiler/main.c2	/^    i32 recipe_id;$/;"	v
recipe_name	$C2_LIBDIR/../ast_utils/constants.c2	/^public const char* recipe_name = "recipe.txt";$/;"	v
ref	$C2_LIBDIR/../analyser/module_analyser.c2	/^    TypeRef* ref = v.getTypeRef();$/;"	v
ref	$C2_LIBDIR/../analyser/module_analyser_builtin.c2	/^        TypeRef* ref = te.getTypeRef();$/;"	v
ref	$C2_LIBDIR/../analyser/module_analyser_expr.c2	/^    TypeRef* ref = c.getTypeRef();$/;"	v
ref	$C2_LIBDIR/../analyser/module_analyser_function.c2	/^        TypeRef* ref = vd.getTypeRef();$/;"	v
ref	$C2_LIBDIR/../analyser/module_analyser_stmt.c2	/^    TypeRef* ref = vd.getTypeRef();$/;"	v
ref	$C2_LIBDIR/../analyser/module_analyser_struct.c2	/^    TypeRef* ref = v.getTypeRef();$/;"	v
ref	$C2_LIBDIR/../analyser/module_analyser_type.c2	/^    TypeRef* ref = a.getTypeRef();$/;"	v
ref	$C2_LIBDIR/../ast/call_expr.c2	/^        TypeRef* ref = cast<TypeRef*>(&e.args[e.base.base.callExprBits.num_args]);$/;"	v
ref	$C2_LIBDIR/../ast/explicit_cast_expr.c2	/^                                                      const TypeRefHolder* ref,$/;"	v
ref	$C2_LIBDIR/../ast/function_decl.c2	/^    const Ref* ref = d.rtype.getPointerAfter();$/;"	v
ref	$C2_LIBDIR/../ast/identifier_expr.c2	/^    return ref;$/;"	v
ref	$C2_LIBDIR/../ast/instantiator.c2	/^    const TypeRef* ref;$/;"	v
ref	$C2_LIBDIR/../ast/member_expr.c2	/^    return ref;$/;"	v
ref	$C2_LIBDIR/../ast/type_ref.c2	/^    u64 ref;    \/\/ to make TypeRef opaque$/;"	v
ref	$C2_LIBDIR/../ast/var_decl.c2	/^                                    const TypeRefHolder* ref,$/;"	v
ref	$C2_LIBDIR/../generator/ast_visitor_expr.c2	/^        Ref ref = {$/;"	v
ref	$C2_LIBDIR/../ir/context.c2	/^    return ref;$/;"	v
ref	$C2_LIBDIR/../ir/copy_list.c2	/^    Ref ref;$/;"	v
ref	$C2_LIBDIR/../ir/phi_list.c2	/^    Ref ref;$/;"	v
ref	$C2_LIBDIR/../ir/register_alloc.c2	/^        Ref* ref = &last.args[0];$/;"	v
ref	$C2_LIBDIR/../ir/slot_collector.c2	/^    Ref ref;$/;"	v
ref	$C2_LIBDIR/../ir/ssa.c2	/^    return ref;$/;"	v
ref	$C2_LIBDIR/../parser/ast_builder.c2	/^                          ref,$/;"	v
ref	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    Ref[MemberExprMaxDepth] ref;$/;"	v
ref2	$C2_LIBDIR/../ir/ssa.c2	/^            Ref ref2 = t.checkPredBlock(rev_blk, slot, fi);$/;"	v
refDecl	$C2_LIBDIR/../generator/c/dep_finder.c2	/^    const Decl* refDecl = r.getUserDecl();$/;"	v
ref_list	$C2_LIBDIR/../generator/ir/ref_list.c2	/^module ref_list;$/;"	v
refcount	$C2_LIBDIR/../analyser/module_analyser_member.c2	/^    u32 refcount = m.getNumRefs();$/;"	v
refcount	$C2_LIBDIR/../ast/member_expr.c2	/^    u32 refcount = e.base.base.memberExprBits.num_refs;$/;"	v
refcount	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    u32 refcount = 1;$/;"	v
refs	$C2_LIBDIR/../ast/member_expr.c2	/^    MemberRef[0] refs;  \/\/ tail-allocated, num_ref times$/;"	v
refs	$C2_LIBDIR/../ast/type_ref.c2	/^    Ref[0] refs;    \/\/ tail-allocated. [1] if is_user\/struct_member_fn, [2] if also has_prefi/;"	v
refs	$C2_LIBDIR/../parser/c2_parser_stmt.c2	/^                Ref[2] refs;$/;"	v
refs	$C2_LIBDIR/../plugins/refs_generator.c2	/^import c2refs as refs;$/;"	v
refs_filename	$C2_LIBDIR/../ast_utils/constants.c2	/^public const char* refs_filename = "refs";$/;"	v
refs_generator	$C2_LIBDIR/../plugins/refs_generator.c2	/^module refs_generator;$/;"	v
refs_generator	$C2_LIBDIR/../plugins/refs_generator_plugin.c2	/^import refs_generator;$/;"	v
region	$C2_LIBDIR/../common/file/reader.c2	/^    u8* region = stdlib.malloc((usize)size + 1);$/;"	v
register_attr	$C2_LIBDIR/../plugins/plugin_info.c2	/^    RegisterAttrFn register_attr;$/;"	v
register_map	$C2_LIBDIR/../ir/interference_graph.c2	/^    u8* register_map; \/\/ num_variables, 255 means not used, 254 means not done, 253 means enqu/;"	v
regmap	$C2_LIBDIR/../ir/register_alloc.c2	/^    const u8* regmap = v.interferences.getRegs();$/;"	v
req	$C2_LIBDIR/../parser/ast_builder.c2	/^        AttrReq req = attr.check(a);$/;"	v
res	$C2_LIBDIR/../analyser/conversion_checker.c2	/^    u8 res = Conversions[rcanon.getKind()][lcanon.getKind()];$/;"	v
res	$C2_LIBDIR/../analyser/module_analyser.c2	/^    QualType res;$/;"	v
res	$C2_LIBDIR/../analyser/module_analyser_binop.c2	/^    u8 res = BinOpConvSub[lcanon.getKind()][rcanon.getKind()];$/;"	v
res	$C2_LIBDIR/../analyser/module_analyser_expr.c2	/^    u8 res = CondOpTable[lcanon.getKind()][rcanon.getKind()];$/;"	v
res	$C2_LIBDIR/../analyser/module_analyser_function.c2	/^        QualType res = ma.analyseTypeRef(ref);$/;"	v
res	$C2_LIBDIR/../analyser/module_analyser_init.c2	/^    QualType res = ma.analyseExpr(e_ptr, true, RHS);$/;"	v
res	$C2_LIBDIR/../analyser/module_analyser_stmt.c2	/^    return res;$/;"	v
res	$C2_LIBDIR/../analyser/module_analyser_struct.c2	/^    QualType res = ma.analyseTypeRef(ref);$/;"	v
res	$C2_LIBDIR/../analyser/module_analyser_switch.c2	/^    return res;$/;"	v
res	$C2_LIBDIR/../analyser/module_analyser_type.c2	/^    QualType res = ma.analyseTypeRef(ref);$/;"	v
res	$C2_LIBDIR/../ast/value.c2	/^    u64 res = v.uvalue;$/;"	v
res	$C2_LIBDIR/../common/process_utils.c2	/^    i32 res = vsnprintf(msg, sizeof(msg), format, args);$/;"	v
res	$C2_LIBDIR/../common/yaml/yaml_parser.c2	/^    i32 res = setjmp(&p.jmp_err);$/;"	v
res	$C2_LIBDIR/../compiler/c2recipe_parser.c2	/^    return res == 0;$/;"	v
res	$C2_LIBDIR/../parser/c2_parser.c2	/^    i32 res = setjmp(&p.jmpbuf);$/;"	v
res	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    return res;$/;"	v
res	$C2_LIBDIR/../plugins/shell_cmd_plugin.c2	/^    i32 res = process_utils.run2(cmd.path, cmd_str, args, output, elemsof(output));$/;"	v
res2	$C2_LIBDIR/../analyser_utils/ctv_analyser.c2	/^    Value res2 = get_value(inner);$/;"	v
res2	$C2_LIBDIR/../ast/ast_evaluator.c2	/^    Value res2 = eval.get_value(inner);$/;"	v
res2	$C2_LIBDIR/../generator/c/c_generator_pure_call.c2	/^    Value res2 = eval.get_value(inner);$/;"	v
resolved	$C2_LIBDIR/../analyser/module_analyser_type.c2	/^    return resolved;$/;"	v
rest	$C2_LIBDIR/../common/yaml/yaml_iterator.c2	/^            const char* rest = starts_with(path, name);$/;"	v
result	$C2_LIBDIR/../analyser/conversion_checker_expr.c2	/^    return result;$/;"	v
result	$C2_LIBDIR/../analyser/module_analyser_binop.c2	/^    return result;$/;"	v
result	$C2_LIBDIR/../analyser/module_analyser_expr.c2	/^    return result;$/;"	v
result	$C2_LIBDIR/../analyser/size_analyser.c2	/^    return result;$/;"	v
result	$C2_LIBDIR/../analyser_utils/ctv_analyser.c2	/^    return result;$/;"	v
result	$C2_LIBDIR/../ast/ast_evaluator.c2	/^    Value result;$/;"	v
result	$C2_LIBDIR/../ast/module.c2	/^    return result;$/;"	v
result	$C2_LIBDIR/../ast/type_ref.c2	/^    return result;$/;"	v
result	$C2_LIBDIR/../ast/value.c2	/^    return result;$/;"	v
result	$C2_LIBDIR/../ast_utils/string_pool.c2	/^    u32 result = HASH_INITIAL;$/;"	v
result	$C2_LIBDIR/../common/build_file.c2	/^    return result;$/;"	v
result	$C2_LIBDIR/../common/yaml/yaml_data.c2	/^    return result;$/;"	v
result	$C2_LIBDIR/../generator/c/c_generator.c2	/^    Value result = ast.evalExpr(e);$/;"	v
result	$C2_LIBDIR/../generator/c/c_generator_pure_call.c2	/^    return result;$/;"	v
result	$C2_LIBDIR/../generator/c2refs.c2	/^    return result;$/;"	v
result	$C2_LIBDIR/../generator/radix_tree/radix_tree.c2	/^    u32 result = zone.start;$/;"	v
result	$C2_LIBDIR/../plugins/unit_test2.c2	/^    i32 result = setjmp(&jmpbuf);$/;"	v
results	$C2_LIBDIR/../plugins/unit_test2.c2	/^  char[80] results;$/;"	v
results_dir	$C2_LIBDIR/../generator/c/c_generator.c2	/^    const char* results_dir;$/;"	v
ret	$C2_LIBDIR/../parser/c2_parser_stmt.c2	/^    Expr* ret = nil;$/;"	v
ret	$C2_LIBDIR/../plugins/unit_test2.c2	/^  i32 ret = vsnprintf(error_msg, error_size, fmt, ap);$/;"	v
ret_type	$C2_LIBDIR/../ir/register_alloc.c2	/^    Type ret_type = fi.getReturnType();$/;"	v
return	$C2_LIBDIR/../analyser/module_analyser.c2	/^        return;$/;"	v
return	$C2_LIBDIR/../analyser/module_analyser_call.c2	/^    return;$/;"	v
return	$C2_LIBDIR/../analyser/module_analyser_function.c2	/^        return;$/;"	v
return	$C2_LIBDIR/../analyser/module_analyser_stmt.c2	/^            return;$/;"	v
return	$C2_LIBDIR/../analyser/module_analyser_struct.c2	/^        return;$/;"	v
return	$C2_LIBDIR/../analyser/module_analyser_type.c2	/^        return;$/;"	v
return	$C2_LIBDIR/../analyser/scope.c2	/^        return;$/;"	v
return	$C2_LIBDIR/../analyser/size_analyser.c2	/^        return;$/;"	v
return	$C2_LIBDIR/../analyser/unused_checker.c2	/^        return;$/;"	v
return	$C2_LIBDIR/../ast/char_literal.c2	/^        return;$/;"	v
return	$C2_LIBDIR/../ast/expr.c2	/^        return;$/;"	v
return	$C2_LIBDIR/../ast/function_decl.c2	/^        return;$/;"	v
return	$C2_LIBDIR/../ast/utils.c2	/^        return;$/;"	v
return	$C2_LIBDIR/../ast_utils/string_buffer.c2	/^            return;$/;"	v
return	$C2_LIBDIR/../common/yaml/yaml_parser.c2	/^        return;$/;"	v
return	$C2_LIBDIR/../common/yaml/yaml_tokenizer.c2	/^        return;$/;"	v
return	$C2_LIBDIR/../compiler/c2recipe_parser.c2	/^            return;$/;"	v
return	$C2_LIBDIR/../compiler/compiler.c2	/^        return;$/;"	v
return	$C2_LIBDIR/../compiler/compiler_libs.c2	/^        return;$/;"	v
return	$C2_LIBDIR/../generator/ast_visitor_expr.c2	/^        return;$/;"	v
return	$C2_LIBDIR/../generator/c/c_generator.c2	/^        return;$/;"	v
return	$C2_LIBDIR/../generator/c/c_generator_expr.c2	/^        return;$/;"	v
return	$C2_LIBDIR/../generator/c/c_generator_trace.c2	/^        return;$/;"	v
return	$C2_LIBDIR/../generator/c2i/c2i_generator_decl.c2	/^        return;$/;"	v
return	$C2_LIBDIR/../generator/c2i/c2i_generator_expr.c2	/^        return;$/;"	v
return	$C2_LIBDIR/../generator/generator_utils.c2	/^        return;$/;"	v
return	$C2_LIBDIR/../generator/ir/array_init_sorter.c2	/^        return;$/;"	v
return	$C2_LIBDIR/../generator/ir/field_struct_layouter.c2	/^        return;$/;"	v
return	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^        return;$/;"	v
return	$C2_LIBDIR/../generator/ir/ir_generator_binop.c2	/^        return;$/;"	v
return	$C2_LIBDIR/../generator/ir/ir_generator_expr.c2	/^        return;$/;"	v
return	$C2_LIBDIR/../generator/ir/ir_generator_member.c2	/^        return;$/;"	v
return	$C2_LIBDIR/../generator/ir/ir_generator_stmt.c2	/^        return;$/;"	v
return	$C2_LIBDIR/../generator/ir/ir_generator_switch.c2	/^        return;$/;"	v
return	$C2_LIBDIR/../generator/radix_tree/radix_tree.c2	/^        return;$/;"	v
return	$C2_LIBDIR/../ir/interference_graph.c2	/^        return;$/;"	v
return	$C2_LIBDIR/../ir/live_map.c2	/^        return;$/;"	v
return	$C2_LIBDIR/../ir/print.c2	/^        return;$/;"	v
return	$C2_LIBDIR/../ir/register_alloc.c2	/^            return;$/;"	v
return	$C2_LIBDIR/../ir/slot_collector.c2	/^        return;$/;"	v
return	$C2_LIBDIR/../ir/slot_writes_map.c2	/^        return;$/;"	v
return	$C2_LIBDIR/../ir/switch.c2	/^                return;$/;"	v
return	$C2_LIBDIR/../parser/ast_builder.c2	/^        return;$/;"	v
return	$C2_LIBDIR/../parser/c2_parser.c2	/^        return;$/;"	v
return	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^    return;$/;"	v
return	$C2_LIBDIR/../plugins/deps_generator.c2	/^        return;$/;"	v
return	$C2_LIBDIR/../plugins/refs_generator.c2	/^        return;$/;"	v
return	$C2_LIBDIR/../plugins/unit_test_plugin.c2	/^        return;$/;"	v
returnStmtBits	$C2_LIBDIR/../ast/stmt.c2	/^        ReturnStmtBits returnStmtBits;$/;"	v
retval	$C2_LIBDIR/../generator/c/c_generator.c2	/^    i32 retval = process_utils.run_args(dir, make, "-j", LogFile);$/;"	v
retval	$C2_LIBDIR/../generator/ir/ir_generator_stmt.c2	/^        const Expr* retval = r.getValue();$/;"	v
retval	$C2_LIBDIR/../plugins/git_version_plugin.c2	/^    i32 retval = process_utils.run2(".", "git", "describe --tags --always --dirty",$/;"	v
rev_blk	$C2_LIBDIR/../ir/ssa.c2	/^        u32 rev_blk = t.revlist.getRev(r);$/;"	v
rev_end	$C2_LIBDIR/../ir/ssa.c2	/^    u32 rev_end = revs.start + revs.count;$/;"	v
revlist	$C2_LIBDIR/../ir/context.c2	/^    RevList revlist;$/;"	v
revs	$C2_LIBDIR/../ir/ssa.c2	/^    RevIndex revs = t.revlist.getBlockIndex(blk_id);$/;"	v
rhs	$C2_LIBDIR/../analyser/conversion_checker.c2	/^    QualType rhs;$/;"	v
rhs	$C2_LIBDIR/../analyser/conversion_checker_expr.c2	/^    ExprWidth rhs = getExprWidth(c.getRHS());$/;"	v
rhs	$C2_LIBDIR/../analyser/module_analyser.c2	/^    Expr* rhs = sa.getRhs();$/;"	v
rhs	$C2_LIBDIR/../analyser/module_analyser_binop.c2	/^    Expr* rhs = b.getRHS();$/;"	v
rhs	$C2_LIBDIR/../analyser/module_analyser_expr.c2	/^    QualType rhs = ma.analyseExpr(cond.getRHS2(), true, RHS);$/;"	v
rhs	$C2_LIBDIR/../analyser/module_analyser_switch.c2	/^            Expr* rhs = re.getRHS();$/;"	v
rhs	$C2_LIBDIR/../ast/binary_operator.c2	/^    Expr* rhs;$/;"	v
rhs	$C2_LIBDIR/../ast/bitoffset_expr.c2	/^    Expr* rhs;$/;"	v
rhs	$C2_LIBDIR/../ast/conditional_operator.c2	/^    Expr* rhs;$/;"	v
rhs	$C2_LIBDIR/../ast/expr.c2	/^        const Expr* rhs = binop.getRHS();$/;"	v
rhs	$C2_LIBDIR/../ast/range_expr.c2	/^    Expr* rhs;$/;"	v
rhs	$C2_LIBDIR/../ast/static_assert.c2	/^    Expr* rhs;$/;"	v
rhs	$C2_LIBDIR/../generator/c/c_generator_expr.c2	/^    Expr* rhs = b.getRHS();$/;"	v
rhs	$C2_LIBDIR/../generator/ir/ir_generator_expr.c2	/^        rhs = gen.ctx.addBinaryInstr(InstrKind.Xor, rhs, one);$/;"	v
rhs	$C2_LIBDIR/../parser/c2_parser.c2	/^    Expr* rhs = p.parseExpr();$/;"	v
rhs	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^        Expr* rhs = p.parseCastExpr(false, false);$/;"	v
rhs_index	$C2_LIBDIR/../analyser/module_analyser_switch.c2	/^            u32 rhs_index;      \/\/ numerical case value (or string index)$/;"	v
rhs_len	$C2_LIBDIR/../analyser/module_analyser_init.c2	/^                u32 rhs_len = at2.getSize();$/;"	v
rhs_name_idx	$C2_LIBDIR/../analyser/module_analyser_switch.c2	/^            u32 rhs_name_idx = 0;   \/\/ name index of enum constant$/;"	v
right	$C2_LIBDIR/../analyser_utils/ctv_analyser.c2	/^    Value right = get_value(e.getRHS());$/;"	v
right	$C2_LIBDIR/../ast/ast_evaluator.c2	/^    Value right;$/;"	v
right	$C2_LIBDIR/../common/quicksort.c2	/^    u8* right = end - item_size;$/;"	v
right	$C2_LIBDIR/../generator/c/c_generator_pure_call.c2	/^    Value right = eval.get_value(e.getRHS());$/;"	v
right	$C2_LIBDIR/../generator/ir/ir_generator_binop.c2	/^    right = gen.ctx.addBinaryInstr(k, left_val, right);$/;"	v
ringbuf	$C2_LIBDIR/../common/dsm_sorter.c2	/^    u8* ringbuf = &s.array[count*count];$/;"	v
rinner	$C2_LIBDIR/../analyser/conversion_checker.c2	/^    QualType rinner = rtype.getInner();$/;"	v
root	$C2_LIBDIR/../common/yaml/yaml_iterator.c2	/^    const Node* root = &d.nodes[1];$/;"	v
root	$C2_LIBDIR/../common/yaml/yaml_parser.c2	/^    Node* root = p.data.add_node(NodeKind.Unknown, 0);$/;"	v
root	$C2_LIBDIR/../plugins/deps_generator.c2	/^    Dir root;$/;"	v
root_idx	$C2_LIBDIR/../generator/radix_tree/radix_tree.c2	/^    u32 root_idx;$/;"	v
round4	$C2_LIBDIR/../generator/c2refs.c2	/^fn u32 round4(u32 x) {$/;"	f
rquals	$C2_LIBDIR/../analyser/conversion_checker.c2	/^    u32 rquals = rinner.getQuals();$/;"	v
rt	$C2_LIBDIR/../ast/ast_evaluator.c2	/^                rt = rt.getCanonicalType();$/;"	v
rt	$C2_LIBDIR/../ast/function_decl.c2	/^    QualType rt;          \/\/ return type after analysis$/;"	v
rt	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^        rt = gen.type2irtype(fd.getRType());$/;"	v
rt	$C2_LIBDIR/../ir/print.c2	/^    Type rt = info.getReturnType();$/;"	v
rtype	$C2_LIBDIR/../analyser/conversion_checker.c2	/^    const PointerType* rtype = (PointerType*)rcanon;$/;"	v
rtype	$C2_LIBDIR/../analyser/module_analyser_binop.c2	/^    QualType rtype;$/;"	v
rtype	$C2_LIBDIR/../analyser/module_analyser_function.c2	/^    TypeRef* rtype = fd.getReturnTypeRef();$/;"	v
rtype	$C2_LIBDIR/../ast/function_decl.c2	/^    TypeRef rtype;        \/\/ return type as in code. note: variable size!$/;"	v
rtype	$C2_LIBDIR/../parser/ast_builder.c2	/^                                          rtype,$/;"	v
rtype_matches	$C2_LIBDIR/../ast/function_decl.c2	/^    bool rtype_matches = fd.rtype.matchesTemplate(fd.template_name);$/;"	v
run_group	$C2_LIBDIR/../plugins/unit_test2.c2	/^fn void run_group(const Group* g, Stats* stats) {$/;"	f
rval	$C2_LIBDIR/../analyser/module_analyser_expr.c2	/^    Value rval;$/;"	v
rvalid	$C2_LIBDIR/../analyser/module_analyser_expr.c2	/^    bool rvalid = ma.analyseBitOffsetIndex(bo.getRHS2(), canon, &rval);$/;"	v
s1	$C2_LIBDIR/../ast/ast_evaluator.c2	/^    Stmt* s1 = s.getStmt();$/;"	v
s2	$C2_LIBDIR/../ast/assert_stmt.c2	/^    AssertStmt* s2 = AssertStmt.create(inst.c, s.base.loc, s.inner.instantiate(inst));$/;"	v
s2	$C2_LIBDIR/../ast/compound_stmt.c2	/^    return s2;$/;"	v
s2	$C2_LIBDIR/../ast/decl_stmt.c2	/^    DeclStmt* s2 = DeclStmt.create(inst.c, s.decl, count);$/;"	v
s2	$C2_LIBDIR/../ast/switch_stmt.c2	/^    SwitchStmt* s2 = inst.c.alloc(size);$/;"	v
sa	$C2_LIBDIR/../analyser/module_analyser.c2	/^    StaticAssert* sa = (StaticAssert*)d;$/;"	v
same_line	$C2_LIBDIR/../common/yaml/yaml_tokenizer.c2	/^    bool same_line;$/;"	v
same_string	$C2_LIBDIR/../ast_utils/string_pool.c2	/^fn bool same_string(const char* left, const char* right, usize rlen) {$/;"	f
saved	$C2_LIBDIR/../analyser/module_analyser.c2	/^    bool saved = ma.has_error;$/;"	v
savedKind	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    Kind savedKind = p.tok.kind;$/;"	v
savedPublic	$C2_LIBDIR/../analyser/module_analyser_builtin.c2	/^    bool savedPublic = ma.usedPublic;$/;"	v
saved_indent	$C2_LIBDIR/../plugins/deps_generator.c2	/^    u32 saved_indent = gen.indent;$/;"	v
sbit	$C2_LIBDIR/../ast/value.c2	/^        u64 sbit = (u64)1 << (width - 1);$/;"	v
sc	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^            SwitchCase* sc = cases[i];$/;"	v
sc	$C2_LIBDIR/../generator/ir/ir_generator_switch.c2	/^        SwitchCase* sc = cases[i];$/;"	v
scope	$C2_LIBDIR/../analyser/module_analyser.c2	/^import scope;$/;"	v
scope	$C2_LIBDIR/../analyser/module_analyser_call.c2	/^import scope;$/;"	v
scope	$C2_LIBDIR/../analyser/module_analyser_function.c2	/^import scope;$/;"	v
scope	$C2_LIBDIR/../analyser/module_analyser_stmt.c2	/^import scope;$/;"	v
scope	$C2_LIBDIR/../analyser/module_analyser_switch.c2	/^import scope;$/;"	v
scope	$C2_LIBDIR/../analyser/scope.c2	/^module scope;$/;"	v
section	$C2_LIBDIR/../generator/c/c_generator.c2	/^    const char* section = d.getSection();$/;"	v
section	$C2_LIBDIR/../generator/c2refs.c2	/^    void* section = f.map;$/;"	v
section	$C2_LIBDIR/../generator/radix_tree/radix_tree_fs.c2	/^    void* section = input.data;$/;"	v
section_free	$C2_LIBDIR/../generator/c2refs.c2	/^fn void section_free(void* t) {$/;"	f
section_load	$C2_LIBDIR/../generator/c2refs.c2	/^fn void* section_load(MapFile* f, u32 minSize) {$/;"	f
section_load	$C2_LIBDIR/../generator/radix_tree/radix_tree_fs.c2	/^fn void* section_load(InputStream* input, u32 minSize) {$/;"	f
section_size	$C2_LIBDIR/../generator/c2refs.c2	/^fn u32 section_size(const void* section) {$/;"	f
section_size	$C2_LIBDIR/../generator/radix_tree/radix_tree_fs.c2	/^fn u32 section_size(const void* section) {$/;"	f
section_write	$C2_LIBDIR/../generator/c2refs.c2	/^fn  bool section_write(i32 fd, void* section) {$/;"	f
section_write	$C2_LIBDIR/../generator/radix_tree/radix_tree_fs.c2	/^fn  bool section_write(i32 fd, void* section) {$/;"	f
seen_dot	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^    u8 seen_dot = 0;$/;"	v
seen_normal_arg	$C2_LIBDIR/../analyser/module_analyser_function.c2	/^        bool seen_normal_arg = false;$/;"	v
self	$C2_LIBDIR/../generator/ir/ir_generator_stmt.c2	/^    local const char[] self = "$self_str";$/;"	v
semi	$C2_LIBDIR/../generator/c2i/c2i_generator_decl.c2	/^    bool semi = true;$/;"	v
semi_colon	$C2_LIBDIR/../parser/c2_parser_type.c2	/^            goto semi_colon;$/;"	v
sep	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^    char sep = *p++;$/;"	v
sets	$C2_LIBDIR/../compiler/c2recipe_parser.c2	/^    Set* sets;      \/\/ Note: will point to current set$/;"	v
setup	$C2_LIBDIR/../plugins/unit_test1.c2	/^   TestFn setup;$/;"	v
setup	$C2_LIBDIR/../plugins/unit_test_plugin.c2	/^    bool setup;$/;"	v
setup_name	$C2_LIBDIR/../plugins/unit_test_plugin.c2	/^    u32 setup_name;$/;"	v
sf	$C2_LIBDIR/../ast/struct_type_decl.c2	/^            Decl* sf = (Decl*)s.struct_functions[i];$/;"	v
sf_list	$C2_LIBDIR/../analyser/module_analyser.c2	/^import struct_func_list as sf_list;$/;"	v
shift	$C2_LIBDIR/../ast/value.c2	/^                u8 shift = v2.uvalue & 63;$/;"	v
shift_value	$C2_LIBDIR/../generator/ir/field_struct_layouter.c2	/^                        Ref shift_value = ctx.addIntegerConstant(ml.bitfield_offset);$/;"	v
show	$C2_LIBDIR/../generator/c2_trace.c2	/^    i32 show = 0;$/;"	v
show_debug	$C2_LIBDIR/../common/console.c2	/^bool show_debug = false;$/;"	v
show_dirs	$C2_LIBDIR/../plugins/deps_generator.c2	/^    bool show_dirs;$/;"	v
show_externals	$C2_LIBDIR/../plugins/deps_generator.c2	/^    bool show_externals;$/;"	v
show_files	$C2_LIBDIR/../plugins/deps_generator.c2	/^    bool show_files;$/;"	v
show_libs	$C2_LIBDIR/../compiler/compiler.c2	/^    bool show_libs;$/;"	v
show_modules	$C2_LIBDIR/../compiler/compiler_libs.c2	/^    bool show_modules = false;$/;"	v
show_plugins	$C2_LIBDIR/../compiler/main.c2	/^    bool show_plugins;$/;"	v
show_targets	$C2_LIBDIR/../compiler/main.c2	/^    bool show_targets;$/;"	v
show_timing	$C2_LIBDIR/../common/console.c2	/^bool show_timing = false;$/;"	v
sid	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^        SymbolId sid = gen.createSymbol(d);$/;"	v
sid	$C2_LIBDIR/../generator/ir/ir_generator_expr.c2	/^    SymbolId sid = gen.createSymbol(d);$/;"	v
side	$C2_LIBDIR/../analyser/module_analyser_stmt.c2	/^        u32 side;$/;"	v
signbit	$C2_LIBDIR/../ast/value.c2	/^fn i32 signbit(f64 d) {$/;"	f
single_thread	$C2_LIBDIR/../ir/context.c2	/^    bool single_thread;$/;"	v
size	$C2_LIBDIR/../analyser/module_analyser.c2	/^        u32 size = 0;$/;"	v
size	$C2_LIBDIR/../analyser/module_analyser_expr.c2	/^         ArrayType [0x55d61b3129c0] size=4$/;"	v
size	$C2_LIBDIR/../analyser/module_analyser_type.c2	/^        u32 size = 0;$/;"	v
size	$C2_LIBDIR/../analyser/size_analyser.c2	/^    u32 size;$/;"	v
size	$C2_LIBDIR/../ast/alias_type_decl.c2	/^    u32 size = sizeof(AliasTypeDecl) + ref.getExtraSize();$/;"	v
size	$C2_LIBDIR/../ast/array_type.c2	/^    u32 size;       \/\/ set during analysis, number of elements$/;"	v
size	$C2_LIBDIR/../ast/asm_stmt.c2	/^    u32 size = sizeof(AsmStmt);$/;"	v
size	$C2_LIBDIR/../ast/builtin_expr.c2	/^    const u32 size = sizeof(BuiltinExpr);$/;"	v
size	$C2_LIBDIR/../ast/call_expr.c2	/^    u32 size = sizeof(CallExpr) + num_args * sizeof(Expr*);$/;"	v
size	$C2_LIBDIR/../ast/compound_stmt.c2	/^    u32 size = sizeof(CompoundStmt) + count * sizeof(Stmt*);$/;"	v
size	$C2_LIBDIR/../ast/decl_stmt.c2	/^    u32 size = sizeof(DeclStmt) + sizeof(VarDecl*) * count;$/;"	v
size	$C2_LIBDIR/../ast/enum_constant_decl.c2	/^    u32 size = sizeof(EnumConstantDecl);$/;"	v
size	$C2_LIBDIR/../ast/enum_type_decl.c2	/^    u32 size = sizeof(EnumTypeDecl) + num_constants * sizeof(EnumConstantDecl*);$/;"	v
size	$C2_LIBDIR/../ast/explicit_cast_expr.c2	/^    u32 size = sizeof(ExplicitCastExpr) + ref.getExtraSize();$/;"	v
size	$C2_LIBDIR/../ast/function_decl.c2	/^    u32 size = sizeof(FunctionDecl) + num_params * sizeof(VarDecl*) + rtype.getExtraSize();$/;"	v
size	$C2_LIBDIR/../ast/if_stmt.c2	/^    u32 size = sizeof(IfStmt);$/;"	v
size	$C2_LIBDIR/../ast/init_list_expr.c2	/^    u32 size = sizeof(InitListExpr) + num_values * sizeof(Expr*);$/;"	v
size	$C2_LIBDIR/../ast/member_expr.c2	/^    u32 size = sizeof(MemberExpr) + refcount * sizeof(MemberRef) + (refcount - 1) * sizeof(u32);$/;"	v
size	$C2_LIBDIR/../ast/return_stmt.c2	/^    u32 size = sizeof(ReturnStmt);$/;"	v
size	$C2_LIBDIR/../ast/statistics.c2	/^    u32 size;$/;"	v
size	$C2_LIBDIR/../ast/string_literal.c2	/^    u32 size; \/\/ Note: no cost on 64-bit systems because of padding$/;"	v
size	$C2_LIBDIR/../ast/struct_type_decl.c2	/^    u32 size;$/;"	v
size	$C2_LIBDIR/../ast/switch_case.c2	/^    u32 size = sizeof(SwitchCase) + num_conds * sizeof(Expr*) + num_stmts * sizeof(Stmt*);$/;"	v
size	$C2_LIBDIR/../ast/switch_stmt.c2	/^    u32 size = sizeof(SwitchStmt) + numCases * sizeof(SwitchCase*);$/;"	v
size	$C2_LIBDIR/../ast/type_expr.c2	/^    u32 size = sizeof(TypeExpr) + ref.getExtraSize();$/;"	v
size	$C2_LIBDIR/../ast/type_ref.c2	/^        Expr* size = h.arrays[i];$/;"	v
size	$C2_LIBDIR/../ast/var_decl.c2	/^    u32 size = sizeof(VarDecl) + ref.getExtraSize();$/;"	v
size	$C2_LIBDIR/../ast_utils/context.c2	/^    u32 size;$/;"	v
size	$C2_LIBDIR/../ast_utils/string_buffer.c2	/^    u32 size = buf.size_;$/;"	v
size	$C2_LIBDIR/../common/dsm_sorter.c2	/^    u32 size = count;$/;"	v
size	$C2_LIBDIR/../common/file/file_utils.c2	/^    return size;$/;"	v
size	$C2_LIBDIR/../common/file/reader.c2	/^    u32 size = (u32)statbuf.st_size;$/;"	v
size	$C2_LIBDIR/../common/source_mgr.c2	/^    u32 size;$/;"	v
size	$C2_LIBDIR/../compiler/compiler.c2	/^    u32 size;$/;"	v
size	$C2_LIBDIR/../generator/c2refs.c2	/^    usize size;$/;"	v
size	$C2_LIBDIR/../generator/ir/field_struct_layouter.c2	/^    u32 size;$/;"	v
size	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^    u32 size = qt.getSize(false);$/;"	v
size	$C2_LIBDIR/../generator/ir/ir_generator_locals.c2	/^    u32 size;$/;"	v
size	$C2_LIBDIR/../generator/radix_tree/radix_tree.c2	/^    u32 size;$/;"	v
size	$C2_LIBDIR/../generator/radix_tree/radix_tree_fs.c2	/^    u32 size;$/;"	v
size	$C2_LIBDIR/../parser/c2_parser.c2	/^            Expr* size = nil;$/;"	v
size	$C2_LIBDIR/../plugins/unit_test2.c2	/^    const usize size = cast<usize>(ret);$/;"	v
size2type	$C2_LIBDIR/../generator/ir/ir_generator_expr.c2	/^fn ir.Type size2type(u32 size) {$/;"	f
sizeExpr	$C2_LIBDIR/../analyser/module_analyser_type.c2	/^        Expr* sizeExpr = ref.getArray(i-1);  \/\/ note: ImplicitCast could have been inserted$/;"	v
sizeOfUnion	$C2_LIBDIR/../analyser/size_analyser.c2	/^fn void sizeOfUnion(StructTypeDecl* s) {$/;"	f
size_	$C2_LIBDIR/../ast_utils/string_buffer.c2	/^    u32 size_;$/;"	v
size_analyser	$C2_LIBDIR/../analyser/module_analyser_builtin.c2	/^import size_analyser;$/;"	v
size_analyser	$C2_LIBDIR/../analyser/module_analyser_struct.c2	/^import size_analyser;$/;"	v
size_analyser	$C2_LIBDIR/../analyser/size_analyser.c2	/^module size_analyser;$/;"	v
size_t	$C2_LIBDIR/../generator/c/c_generator.c2	/^                typedef unsigned long size_t;$/;"	v
skip	$C2_LIBDIR/../common/diagnostics.c2	/^        u32 skip = 0;$/;"	v
skip	$C2_LIBDIR/../common/process_utils.c2	/^            usize skip = 0;$/;"	v
skipped	$C2_LIBDIR/../plugins/unit_test2.c2	/^  u32 skipped;$/;"	v
skipping	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^    u8 skipping;    \/\/ 0: parse, 1: skip, 2: skip until #endif$/;"	v
sl	$C2_LIBDIR/../ast/asm_stmt.c2	/^            const StringLiteral* sl = (StringLiteral*)constraints[i];$/;"	v
sl	$C2_LIBDIR/../common/yaml/yaml_data.c2	/^        StackLevel* sl = &d.stack[i];$/;"	v
slack	$C2_LIBDIR/../ast_utils/context.c2	/^    u32 slack = 0;$/;"	v
slen	$C2_LIBDIR/../generator/c/c_generator_stmt.c2	/^                u32 slen = (lit.getSize() - 1) & 0xFF;$/;"	v
slen	$C2_LIBDIR/../generator/c2refs.c2	/^    u32 slen = 0;$/;"	v
sloc	$C2_LIBDIR/../common/diagnostics.c2	/^        sloc = 0;$/;"	v
slot	$C2_LIBDIR/../ast/pointer_pool.c2	/^    PointerPoolSlot* slot = &p.slots[ptr_pool_idx];$/;"	v
slot	$C2_LIBDIR/../generator/c/c_generator_trace.c2	/^    u32 slot = sl.string_count;$/;"	v
slot	$C2_LIBDIR/../ir/slot_collector.c2	/^    u16 slot;$/;"	v
slot	$C2_LIBDIR/../ir/slot_writes_map.c2	/^    u16 slot;$/;"	v
slot	$C2_LIBDIR/../ir/ssa.c2	/^            u16 slot = (u16)ii.args[0].value;$/;"	v
slot	$C2_LIBDIR/../parser/c2_parser.c2	/^    u32 slot = (p.next_head + n - 1) % MaxLookahead;$/;"	v
slot_end	$C2_LIBDIR/../ir/slot_collector.c2	/^    u32 slot_end = bi.rd_start + bi.rd_count;$/;"	v
slot_idx	$C2_LIBDIR/../ast/pointer_pool.c2	/^        u32 slot_idx = p.count;$/;"	v
slot_idx	$C2_LIBDIR/../ir/context.c2	/^    u32 slot_idx;$/;"	v
slot_idx	$C2_LIBDIR/../ir/slot_collector.c2	/^    u32 slot_idx;   \/\/ incremented on every alloc$/;"	v
slot_name	$C2_LIBDIR/../ir/context.c2	/^        char[8] slot_name;$/;"	v
slot_start	$C2_LIBDIR/../ir/slot_collector.c2	/^    u32 slot_start = bi.rd_start;$/;"	v
slot_values	$C2_LIBDIR/../ir/context.c2	/^    SlotValues slot_values;$/;"	v
slots	$C2_LIBDIR/../ast/pointer_pool.c2	/^    PointerPoolSlot* slots;$/;"	v
slots	$C2_LIBDIR/../ast/string_type_pool.c2	/^    StringTypeSlot* slots;$/;"	v
slots2	$C2_LIBDIR/../ast/pointer_pool.c2	/^    PointerPoolSlot* slots2 = malloc(p.capacity * sizeof(PointerPoolSlot));$/;"	v
slots2	$C2_LIBDIR/../ast/string_type_pool.c2	/^    StringTypeSlot* slots2 = malloc(p.capacity * sizeof(StringTypeSlot));$/;"	v
sm	$C2_LIBDIR/../common/source_mgr.c2	/^    return sm;$/;"	v
sm	$C2_LIBDIR/../parser/c2_parser.c2	/^    SourceMgr* sm;$/;"	v
sorted	$C2_LIBDIR/../analyser/module_sorter.c2	/^    const u8* sorted = dsm.sort();$/;"	v
sorted	$C2_LIBDIR/../common/component_sorter.c2	/^    const u8* sorted = dsm.sort();$/;"	v
sorted	$C2_LIBDIR/../common/dsm_sorter.c2	/^    u8* sorted = &s.array[count*(count+1)];$/;"	v
source_mgr	$C2_LIBDIR/../common/build_file.c2	/^import source_mgr;$/;"	v
source_mgr	$C2_LIBDIR/../common/diagnostics.c2	/^import source_mgr;$/;"	v
source_mgr	$C2_LIBDIR/../common/source_mgr.c2	/^module source_mgr;$/;"	v
source_mgr	$C2_LIBDIR/../compiler/c2recipe.c2	/^import source_mgr;$/;"	v
source_mgr	$C2_LIBDIR/../compiler/c2recipe_parser.c2	/^import source_mgr;$/;"	v
source_mgr	$C2_LIBDIR/../compiler/compiler.c2	/^import source_mgr;$/;"	v
source_mgr	$C2_LIBDIR/../compiler/main.c2	/^import source_mgr;$/;"	v
source_mgr	$C2_LIBDIR/../compiler/manifest.c2	/^import source_mgr;$/;"	v
source_mgr	$C2_LIBDIR/../generator/c/c_generator.c2	/^import source_mgr;$/;"	v
source_mgr	$C2_LIBDIR/../generator/c/c_generator_call.c2	/^import source_mgr;$/;"	v
source_mgr	$C2_LIBDIR/../generator/c/c_generator_stmt.c2	/^import source_mgr;$/;"	v
source_mgr	$C2_LIBDIR/../generator/c/c_generator_trace.c2	/^import source_mgr;$/;"	v
source_mgr	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^import source_mgr;$/;"	v
source_mgr	$C2_LIBDIR/../plugins/plugin_info.c2	/^import source_mgr;$/;"	v
source_mgr	$C2_LIBDIR/../plugins/refs_generator.c2	/^import source_mgr;$/;"	v
spec	$C2_LIBDIR/../analyser_utils/printf_utils.c2	/^    return spec;$/;"	v
specifications	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^   Accepts all type specifications, including parametric types.$/;"	v
split_cap	$C2_LIBDIR/../ir/inserter.c2	/^    u32 split_cap;$/;"	v
split_count	$C2_LIBDIR/../ir/inserter.c2	/^    u32 split_count;$/;"	v
split_edges	$C2_LIBDIR/../ir/inserter.c2	/^    SplitEdge* split_edges;$/;"	v
split_edges2	$C2_LIBDIR/../ir/inserter.c2	/^        SplitEdge* split_edges2 = stdlib.malloc(ins.split_cap * sizeof(SplitEdge));$/;"	v
src	$C2_LIBDIR/../ast/function_decl.c2	/^    VarDecl** src = fd.rtype.getPointerAfter();$/;"	v
src	$C2_LIBDIR/../common/source_mgr.c2	/^    const char* src = f.data;$/;"	v
src	$C2_LIBDIR/../generator/ir/ir_generator_binop.c2	/^        src = c.addBinaryInstr(InstrKind.Shl, src, offset_ref);$/;"	v
src	$C2_LIBDIR/../ir/inserter.c2	/^    u32 src;    \/\/ original src$/;"	v
src	$C2_LIBDIR/../ir/phi_list.c2	/^    const PhiClause* src = cache.getClauses();$/;"	v
src	$C2_LIBDIR/../ir/print.c2	/^            Block* src = ph.blocks.get(blk_id);$/;"	v
src	$C2_LIBDIR/../ir/register_alloc.c2	/^                Block* src = fi.blocks.get(pc.src);$/;"	v
srcType	$C2_LIBDIR/../analyser/module_analyser_expr.c2	/^    QualType srcType = ma.analyseExpr(c.getInner2(), true, RHS);$/;"	v
src_idx	$C2_LIBDIR/../ir/interference_graph.c2	/^    u16 src_idx = r.start;$/;"	v
src_idx	$C2_LIBDIR/../ir/live_map.c2	/^    u16 src_idx = r.start;$/;"	v
src_idx	$C2_LIBDIR/../ir/slot_writes_map.c2	/^    u16 src_idx = r.start;$/;"	v
src_len	$C2_LIBDIR/../analyser/module_analyser.c2	/^        u32 src_len = 8; \/\/ source length is attribute @(embed="xxx")$/;"	v
src_len	$C2_LIBDIR/../ast/type_expr.c2	/^                                    u32 src_len,$/;"	v
src_len	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    u32 src_len = p.tok.loc + 1 - loc;$/;"	v
src_loc	$C2_LIBDIR/../ast/instantiator.c2	/^import src_loc;$/;"	v
src_loc	$C2_LIBDIR/../ast_utils/src_loc.c2	/^module src_loc;$/;"	v
src_loc	$C2_LIBDIR/../generator/c2refs.c2	/^    u32 src_loc = file.start;$/;"	v
src_stmts	$C2_LIBDIR/../ast/switch_case.c2	/^    Stmt** src_stmts = src.getStmts();$/;"	v
ss	$C2_LIBDIR/../ast/statistics.c2	/^        const Stat* ss = &s.types[i];$/;"	v
ssize_t	$C2_LIBDIR/../generator/c/c_generator.c2	/^                typedef signed long ssize_t;$/;"	v
st	$C2_LIBDIR/../analyser/module_analyser_builtin.c2	/^    StructType* st = qt.getStructTypeOrNil();$/;"	v
st	$C2_LIBDIR/../analyser/module_analyser_call.c2	/^        StructType* st = templateType.getStructTypeOrNil();$/;"	v
st	$C2_LIBDIR/../analyser/module_analyser_init.c2	/^    StructType* st = expectedType.getStructType();$/;"	v
st	$C2_LIBDIR/../analyser/module_analyser_member.c2	/^                StructType* st = (StructType*)t;$/;"	v
st	$C2_LIBDIR/../analyser/module_analyser_switch.c2	/^        Stmt* st = c.getStmt(i);$/;"	v
st	$C2_LIBDIR/../analyser/module_analyser_type.c2	/^        StructType* st = resolved.getStructType();$/;"	v
st	$C2_LIBDIR/../analyser/size_analyser.c2	/^        StructType* st = (StructType*)t;$/;"	v
st	$C2_LIBDIR/../ast/utils.c2	/^        StructType* st = (StructType*)t;$/;"	v
st	$C2_LIBDIR/../generator/c/c_generator.c2	/^        StructType* st = cast<StructType*>(qt.getType());$/;"	v
st	$C2_LIBDIR/../generator/c2i/c2i_generator_decl.c2	/^        StructType* st = cast<StructType*>(qt.getType());$/;"	v
st	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^    StructType* st = qt.getStructType();$/;"	v
st	$C2_LIBDIR/../generator/ir/ir_generator_expr.c2	/^    StructType* st = qt.getStructType();$/;"	v
st	$C2_LIBDIR/../generator/ir/ir_generator_member.c2	/^        const StructType* st = base_type.getStructType();$/;"	v
stack	$C2_LIBDIR/../common/yaml/yaml_data.c2	/^    StackLevel* stack;$/;"	v
stack	$C2_LIBDIR/../common/yaml/yaml_parser.c2	/^    StackLevel[MaxDepth] stack;$/;"	v
stack	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^    Operand[MAX_LEVEL] stack;$/;"	v
stack	$C2_LIBDIR/../parser/case_list.c2	/^    SwitchCase*[StackSize] stack;$/;"	v
stack	$C2_LIBDIR/../parser/expr_list.c2	/^    Expr*[StackSize] stack;$/;"	v
stack	$C2_LIBDIR/../parser/stmt_list.c2	/^    Stmt*[StackSize] stack;$/;"	v
stack_capacity	$C2_LIBDIR/../analyser/scope.c2	/^    u32 stack_capacity;$/;"	v
stack_count	$C2_LIBDIR/../analyser/scope.c2	/^    u32 stack_count;$/;"	v
stack_size	$C2_LIBDIR/../common/yaml/yaml_parser.c2	/^    u32 stack_size; \/\/ number of items on the stack$/;"	v
stack_symbols	$C2_LIBDIR/../analyser/scope.c2	/^    u32* stack_symbols;$/;"	v
stars	$C2_LIBDIR/../analyser_utils/printf_utils.c2	/^    i32 stars = 0;$/;"	v
stars	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    u32 stars = 0;$/;"	v
start	$C2_LIBDIR/../analyser/module_analyser_function.c2	/^        u32 start = 0;$/;"	v
start	$C2_LIBDIR/../ast_utils/src_loc.c2	/^    SrcLoc start;$/;"	v
start	$C2_LIBDIR/../common/yaml/yaml_tokenizer.c2	/^    const char* start = t.cur;$/;"	v
start	$C2_LIBDIR/../compiler/c2recipe_parser.c2	/^    const char* start = p.cur;$/;"	v
start	$C2_LIBDIR/../generator/c2refs.c2	/^    u32 start;$/;"	v
start	$C2_LIBDIR/../generator/radix_tree/radix_tree.c2	/^    u32 start;$/;"	v
start	$C2_LIBDIR/../ir/interference_graph.c2	/^    u16 start;  \/\/ make start u32?$/;"	v
start	$C2_LIBDIR/../ir/live_map.c2	/^    u16 start;  \/\/ make start u32?$/;"	v
start	$C2_LIBDIR/../ir/phi_list.c2	/^    u32 start = l.count;$/;"	v
start	$C2_LIBDIR/../ir/rev_list.c2	/^    u16 start;$/;"	v
start	$C2_LIBDIR/../ir/slot_collector.c2	/^            u32 start = bi.rd_start;$/;"	v
start	$C2_LIBDIR/../ir/slot_writes_map.c2	/^    u16 start;  \/\/ make start u32?$/;"	v
start	$C2_LIBDIR/../ir/types.c2	/^    u32 start;$/;"	v
start	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^    const char* start = t.cur;$/;"	v
start	$C2_LIBDIR/../plugins/deps_generator.c2	/^        const char* start = cp;$/;"	v
start	$C2_LIBDIR/../plugins/refs_generator.c2	/^    u32 start = 0;$/;"	v
start_blk	$C2_LIBDIR/../ir/print.c2	/^    const Block* start_blk = c.tmp_info.blocks.get(0);$/;"	v
start_handle	$C2_LIBDIR/../common/source_mgr.c2	/^    u32 start_handle = 0;$/;"	v
start_target	$C2_LIBDIR/../compiler/compiler.c2	/^    BeginTargetFn start_target;   \/\/ before parsing, after creation of output-dir + main-compo/;"	v
starts_with	$C2_LIBDIR/../common/yaml/yaml_iterator.c2	/^fn const char* starts_with(const char* full, const char* start) {$/;"	f
stash	$C2_LIBDIR/../ast/decl_list.c2	/^    Decl*[4] stash;$/;"	v
stash	$C2_LIBDIR/../ast/expr_list.c2	/^    Expr*[4] stash;$/;"	v
stash	$C2_LIBDIR/../ir/phi_list.c2	/^    PhiClause[2] stash;$/;"	v
statbuf	$C2_LIBDIR/../common/file/file_utils.c2	/^    Stat statbuf;$/;"	v
statbuf	$C2_LIBDIR/../common/file/reader.c2	/^    Stat statbuf;$/;"	v
statbuf	$C2_LIBDIR/../common/process_utils.c2	/^    Stat statbuf;$/;"	v
statbuf	$C2_LIBDIR/../generator/c2refs.c2	/^    Stat statbuf;$/;"	v
state	$C2_LIBDIR/../analyser/module_analyser_type.c2	/^    DeclCheckState state = d.getCheckState();$/;"	v
state	$C2_LIBDIR/../common/process_utils.c2	/^        i32 state = 0;$/;"	v
state	$C2_LIBDIR/../parser/c2_parser_stmt.c2	/^    u32 state = 0;$/;"	v
static_asserts	$C2_LIBDIR/../ast/ast.c2	/^    StaticAssertList static_asserts;$/;"	v
static_slots	$C2_LIBDIR/../ir/slot_collector.c2	/^    StaticSlot[32] static_slots;$/;"	v
stats	$C2_LIBDIR/../ast/utils.c2	/^    Stats stats;$/;"	v
stats	$C2_LIBDIR/../generator/radix_tree/radix_tree_dump.c2	/^    Stats stats = { }$/;"	v
stats	$C2_LIBDIR/../plugins/unit_test2.c2	/^  Stats stats = { }$/;"	v
std	$C2_LIBDIR/../analyser/module_analyser.c2	/^        StructTypeDecl* std = (StructTypeDecl*)prefix.decl;$/;"	v
std	$C2_LIBDIR/../analyser/module_analyser_builtin.c2	/^    StructTypeDecl* std = st.getDecl();$/;"	v
std	$C2_LIBDIR/../analyser/module_analyser_call.c2	/^            StructTypeDecl* std = st.getDecl();$/;"	v
std	$C2_LIBDIR/../analyser/module_analyser_init.c2	/^    StructTypeDecl* std = st.getDecl();$/;"	v
std	$C2_LIBDIR/../analyser/module_analyser_member.c2	/^                StructTypeDecl* std = st.getDecl();$/;"	v
std	$C2_LIBDIR/../analyser/module_analyser_type.c2	/^        const StructTypeDecl* std = st.getDecl();$/;"	v
std	$C2_LIBDIR/../analyser/unused_checker.c2	/^    StructTypeDecl* std = (StructTypeDecl*)d;$/;"	v
std	$C2_LIBDIR/../ast/symbol_table.c2	/^            StructTypeDecl* std = (StructTypeDecl*)d;$/;"	v
std	$C2_LIBDIR/../ast/type.c2	/^        const StructTypeDecl* std = s.getDecl();$/;"	v
std	$C2_LIBDIR/../generator/c/c_generator.c2	/^    StructTypeDecl* std = cast<StructTypeDecl*>(d);$/;"	v
std	$C2_LIBDIR/../generator/c/c_generator_expr.c2	/^            StructTypeDecl* std = cast<StructTypeDecl*>(d);$/;"	v
std	$C2_LIBDIR/../generator/c2i/c2i_generator_decl.c2	/^    StructTypeDecl* std = cast<StructTypeDecl*>(d);$/;"	v
std	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^    StructTypeDecl* std = st.getDecl();$/;"	v
std	$C2_LIBDIR/../generator/ir/ir_generator_expr.c2	/^    StructTypeDecl* std = st.getDecl();$/;"	v
std	$C2_LIBDIR/../generator/ir/ir_generator_member.c2	/^        const StructTypeDecl* std = st.getDecl();$/;"	v
std	$C2_LIBDIR/../parser/ast_builder.c2	/^    StructTypeDecl* std =(StructTypeDecl*)d;$/;"	v
std	$C2_LIBDIR/../plugins/deps_generator_utils.c2	/^        const StructTypeDecl* std = cast<StructTypeDecl*>(d);$/;"	v
stdarg_idx	$C2_LIBDIR/../parser/c2_parser.c2	/^    u32 stdarg_idx;$/;"	v
stdio	$C2_LIBDIR/../analyser/module_analyser_call.c2	/^import stdio;$/;"	v
stdio	$C2_LIBDIR/../analyser/scope.c2	/^import stdio;$/;"	v
stdio	$C2_LIBDIR/../ast/decl.c2	/^import stdio;$/;"	v
stdio	$C2_LIBDIR/../ast/expr.c2	/^import stdio;$/;"	v
stdio	$C2_LIBDIR/../ast/member_expr.c2	/^import stdio;$/;"	v
stdio	$C2_LIBDIR/../ast/stmt.c2	/^import stdio;$/;"	v
stdio	$C2_LIBDIR/../ast/type.c2	/^import stdio;$/;"	v
stdio	$C2_LIBDIR/../ast/type_ref.c2	/^import stdio;$/;"	v
stdio	$C2_LIBDIR/../ast/value.c2	/^import stdio;$/;"	v
stdio	$C2_LIBDIR/../ast_utils/context.c2	/^import stdio;$/;"	v
stdio	$C2_LIBDIR/../ast_utils/string_pool.c2	/^import stdio;$/;"	v
stdio	$C2_LIBDIR/../common/source_mgr.c2	/^import stdio;$/;"	v
stdio	$C2_LIBDIR/../compiler/compiler.c2	/^import stdio;$/;"	v
stdio	$C2_LIBDIR/../compiler/compiler_libs.c2	/^import stdio;$/;"	v
stdio	$C2_LIBDIR/../compiler/main.c2	/^import stdio;$/;"	v
stdio	$C2_LIBDIR/../compiler/plugin_mgr.c2	/^import stdio;$/;"	v
stdio	$C2_LIBDIR/../generator/c/c_generator.c2	/^import stdio;$/;"	v
stdio	$C2_LIBDIR/../generator/c/c_generator_special.c2	/^import stdio;$/;"	v
stdio	$C2_LIBDIR/../ir/context.c2	/^import stdio;$/;"	v
stdio	$C2_LIBDIR/../ir/graphviz.c2	/^import stdio;$/;"	v
stdio	$C2_LIBDIR/../ir/print.c2	/^import stdio;$/;"	v
stdio	$C2_LIBDIR/../ir/ref.c2	/^import stdio;$/;"	v
stdio	$C2_LIBDIR/../ir/usage_counter.c2	/^import stdio; \/\/ only for dump$/;"	v
stdio	$C2_LIBDIR/../plugins/deps_generator_utils.c2	/^import stdio;$/;"	v
stdlib	$C2_LIBDIR/../analyser/incr_array_list.c2	/^import stdlib;$/;"	v
stdlib	$C2_LIBDIR/../analyser/init_checker.c2	/^import stdlib;$/;"	v
stdlib	$C2_LIBDIR/../analyser/label_vector.c2	/^import stdlib;$/;"	v
stdlib	$C2_LIBDIR/../analyser/module_analyser.c2	/^import stdlib;$/;"	v
stdlib	$C2_LIBDIR/../analyser/module_sorter.c2	/^import stdlib;$/;"	v
stdlib	$C2_LIBDIR/../analyser/name_vector.c2	/^import stdlib;$/;"	v
stdlib	$C2_LIBDIR/../analyser/scope.c2	/^import stdlib;$/;"	v
stdlib	$C2_LIBDIR/../analyser/struct_field_init_checker.c2	/^import stdlib;$/;"	v
stdlib	$C2_LIBDIR/../analyser/struct_func_list.c2	/^import stdlib;$/;"	v
stdlib	$C2_LIBDIR/../ast/ast.c2	/^import stdlib;$/;"	v
stdlib	$C2_LIBDIR/../ast/function_decl_list.c2	/^import stdlib;$/;"	v
stdlib	$C2_LIBDIR/../ast/instance_table.c2	/^import stdlib;$/;"	v
stdlib	$C2_LIBDIR/../ast/module.c2	/^import stdlib;$/;"	v
stdlib	$C2_LIBDIR/../ast/symbol_table.c2	/^import stdlib;$/;"	v
stdlib	$C2_LIBDIR/../ast/utils.c2	/^import stdlib;$/;"	v
stdlib	$C2_LIBDIR/../ast/value.c2	/^import stdlib;$/;"	v
stdlib	$C2_LIBDIR/../ast_utils/attr_table.c2	/^import stdlib;$/;"	v
stdlib	$C2_LIBDIR/../ast_utils/string_pool.c2	/^import stdlib;$/;"	v
stdlib	$C2_LIBDIR/../common/attr_handler.c2	/^import stdlib;$/;"	v
stdlib	$C2_LIBDIR/../common/build_file.c2	/^import stdlib;$/;"	v
stdlib	$C2_LIBDIR/../common/build_target.c2	/^import stdlib;$/;"	v
stdlib	$C2_LIBDIR/../common/component_sorter.c2	/^import stdlib;$/;"	v
stdlib	$C2_LIBDIR/../common/diagnostics.c2	/^import stdlib;$/;"	v
stdlib	$C2_LIBDIR/../common/dsm_sorter.c2	/^import stdlib;$/;"	v
stdlib	$C2_LIBDIR/../common/file/reader.c2	/^import stdlib;$/;"	v
stdlib	$C2_LIBDIR/../common/index_list.c2	/^import stdlib;$/;"	v
stdlib	$C2_LIBDIR/../common/library_list.c2	/^import stdlib;$/;"	v
stdlib	$C2_LIBDIR/../common/module_list.c2	/^import stdlib;$/;"	v
stdlib	$C2_LIBDIR/../common/source_mgr.c2	/^import stdlib;$/;"	v
stdlib	$C2_LIBDIR/../common/string_list.c2	/^import stdlib;$/;"	v
stdlib	$C2_LIBDIR/../common/value_maplist.c2	/^import stdlib;$/;"	v
stdlib	$C2_LIBDIR/../compiler/c2recipe.c2	/^import stdlib;$/;"	v
stdlib	$C2_LIBDIR/../compiler/c2recipe_parser.c2	/^import stdlib;$/;"	v
stdlib	$C2_LIBDIR/../compiler/compiler.c2	/^import stdlib;$/;"	v
stdlib	$C2_LIBDIR/../compiler/compiler_libs.c2	/^import stdlib;$/;"	v
stdlib	$C2_LIBDIR/../compiler/manifest.c2	/^import stdlib;$/;"	v
stdlib	$C2_LIBDIR/../compiler/plugin_mgr.c2	/^import stdlib;$/;"	v
stdlib	$C2_LIBDIR/../generator/ast_visitor.c2	/^import stdlib;$/;"	v
stdlib	$C2_LIBDIR/../generator/c/c_generator.c2	/^import stdlib;$/;"	v
stdlib	$C2_LIBDIR/../generator/c/c_generator_trace.c2	/^import stdlib;$/;"	v
stdlib	$C2_LIBDIR/../generator/ir/array_init_sorter.c2	/^import stdlib;$/;"	v
stdlib	$C2_LIBDIR/../generator/ir/field_struct_layouter.c2	/^import stdlib;$/;"	v
stdlib	$C2_LIBDIR/../generator/ir/ir_generator_locals.c2	/^import stdlib;$/;"	v
stdlib	$C2_LIBDIR/../generator/ir/ref_list.c2	/^import stdlib;$/;"	v
stdlib	$C2_LIBDIR/../ir/block_list.c2	/^import stdlib;$/;"	v
stdlib	$C2_LIBDIR/../ir/case_list.c2	/^import stdlib;$/;"	v
stdlib	$C2_LIBDIR/../ir/constant_list.c2	/^import stdlib;$/;"	v
stdlib	$C2_LIBDIR/../ir/context.c2	/^import stdlib;$/;"	v
stdlib	$C2_LIBDIR/../ir/function_info.c2	/^import stdlib;$/;"	v
stdlib	$C2_LIBDIR/../ir/init_value_list.c2	/^import stdlib;$/;"	v
stdlib	$C2_LIBDIR/../ir/inserter.c2	/^import stdlib;$/;"	v
stdlib	$C2_LIBDIR/../ir/instr_list.c2	/^import stdlib;$/;"	v
stdlib	$C2_LIBDIR/../ir/interference_graph.c2	/^import stdlib;$/;"	v
stdlib	$C2_LIBDIR/../ir/live_map.c2	/^import stdlib;$/;"	v
stdlib	$C2_LIBDIR/../ir/lookup_table.c2	/^import stdlib;$/;"	v
stdlib	$C2_LIBDIR/../ir/print.c2	/^import stdlib;$/;"	v
stdlib	$C2_LIBDIR/../ir/register_alloc.c2	/^import stdlib;$/;"	v
stdlib	$C2_LIBDIR/../ir/rev_list.c2	/^import stdlib;$/;"	v
stdlib	$C2_LIBDIR/../ir/rpo.c2	/^import stdlib;$/;"	v
stdlib	$C2_LIBDIR/../ir/slot_collector.c2	/^import stdlib;$/;"	v
stdlib	$C2_LIBDIR/../ir/slot_values.c2	/^import stdlib;$/;"	v
stdlib	$C2_LIBDIR/../ir/slot_writes_map.c2	/^import stdlib;$/;"	v
stdlib	$C2_LIBDIR/../ir/symbol_list.c2	/^import stdlib;$/;"	v
stdlib	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^import stdlib;$/;"	v
stdlib	$C2_LIBDIR/../plugins/refs_generator.c2	/^import stdlib;$/;"	v
stmt	$C2_LIBDIR/../analyser/module_analyser_switch.c2	/^        const Stmt* stmt = ls.getStmt();$/;"	v
stmt	$C2_LIBDIR/../generator/c/c_generator_stmt.c2	/^        Stmt* stmt = ls.getStmt();$/;"	v
stmt	$C2_LIBDIR/../generator/c2i/c2i_generator_stmt.c2	/^        Stmt* stmt = ls.getStmt();$/;"	v
stmt	$C2_LIBDIR/../parser/c2_parser_stmt.c2	/^    Stmt* stmt = nil;$/;"	v
stmtBits	$C2_LIBDIR/../ast/stmt.c2	/^        StmtBits stmtBits;$/;"	v
stmtCount	$C2_LIBDIR/../ast/statistics.c2	/^    u32 stmtCount = 0;$/;"	v
stmtKind_names	$C2_LIBDIR/../ast/stmt.c2	/^const char*[] stmtKind_names = {$/;"	v
stmtTotal	$C2_LIBDIR/../ast/statistics.c2	/^    u32 stmtTotal = 0;$/;"	v
stmt_list	$C2_LIBDIR/../parser/c2_parser.c2	/^import stmt_list;$/;"	v
stmt_list	$C2_LIBDIR/../parser/c2_parser_stmt.c2	/^import stmt_list;$/;"	v
stmt_list	$C2_LIBDIR/../parser/c2_parser_switch.c2	/^import stmt_list;$/;"	v
stmt_list	$C2_LIBDIR/../parser/stmt_list.c2	/^module stmt_list;$/;"	v
stmt_list_count	$C2_LIBDIR/../parser/c2_parser.c2	/^    u32 stmt_list_count;$/;"	v
stmts	$C2_LIBDIR/../analyser/module_analyser_stmt.c2	/^    Stmt** stmts = c.getStmts();$/;"	v
stmts	$C2_LIBDIR/../ast/ast_evaluator.c2	/^    Stmt** stmts = body.getStmts();$/;"	v
stmts	$C2_LIBDIR/../ast/compound_stmt.c2	/^    Stmt*[0] stmts; \/\/ tail-allocated$/;"	v
stmts	$C2_LIBDIR/../ast/switch_case.c2	/^        Stmt** stmts = cast<Stmt**>(&s.conds[s.bits.num_conds]);$/;"	v
stmts	$C2_LIBDIR/../generator/ast_visitor.c2	/^    Stmt** stmts = s.getStmts();$/;"	v
stmts	$C2_LIBDIR/../generator/c/c_generator_pure_call.c2	/^    Stmt** stmts = body.getStmts();$/;"	v
stmts	$C2_LIBDIR/../generator/c/c_generator_stmt.c2	/^        Stmt** stmts = c.getStmts();$/;"	v
stmts	$C2_LIBDIR/../generator/c2i/c2i_generator_stmt.c2	/^        Stmt** stmts = c.getStmts();$/;"	v
stmts	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^        Stmt** stmts = c.getStmts();$/;"	v
stmts	$C2_LIBDIR/../parser/ast_builder.c2	/^                                        Stmt** stmts, u32 num_stmts) {$/;"	v
stop_at_eol	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^    bool stop_at_eol; \/\/ restrict lexing to single line for preprocessor$/;"	v
str	$C2_LIBDIR/../generator/c/c_generator_stmt.c2	/^    StringLiteral* str = a.getString();$/;"	v
str	$C2_LIBDIR/../generator/c2i/c2i_generator_stmt.c2	/^    StringLiteral* str = a.getString();$/;"	v
str	$C2_LIBDIR/../parser/c2_parser_stmt.c2	/^    Expr* str = p.parseStringLiteral();$/;"	v
str2abi	$C2_LIBDIR/../common/target_info.c2	/^fn Abi str2abi(const char* name) {$/;"	f
str2arch	$C2_LIBDIR/../common/target_info.c2	/^fn Arch str2arch(const char* name) {$/;"	f
str2sys	$C2_LIBDIR/../common/target_info.c2	/^fn System str2sys(const char* name) {$/;"	f
str2vendor	$C2_LIBDIR/../common/target_info.c2	/^fn Vendor str2vendor(const char* name) {$/;"	f
string	$C2_LIBDIR/../analyser/incr_array_list.c2	/^import string;$/;"	v
string	$C2_LIBDIR/../analyser/init_checker.c2	/^import string;$/;"	v
string	$C2_LIBDIR/../analyser/label_vector.c2	/^import string;$/;"	v
string	$C2_LIBDIR/../analyser/module_analyser_switch.c2	/^import string;$/;"	v
string	$C2_LIBDIR/../analyser/module_sorter.c2	/^import string;$/;"	v
string	$C2_LIBDIR/../analyser/name_vector.c2	/^import string;$/;"	v
string	$C2_LIBDIR/../analyser/scope.c2	/^import string;$/;"	v
string	$C2_LIBDIR/../analyser/struct_func_list.c2	/^import string;$/;"	v
string	$C2_LIBDIR/../ast/asm_stmt.c2	/^import string;$/;"	v
string	$C2_LIBDIR/../ast/call_expr.c2	/^import string;$/;"	v
string	$C2_LIBDIR/../ast/compound_stmt.c2	/^import string;$/;"	v
string	$C2_LIBDIR/../ast/enum_type_decl.c2	/^import string;$/;"	v
string	$C2_LIBDIR/../ast/function_decl.c2	/^import string;$/;"	v
string	$C2_LIBDIR/../ast/function_decl_list.c2	/^import string;$/;"	v
string	$C2_LIBDIR/../ast/init_list_expr.c2	/^import string;$/;"	v
string	$C2_LIBDIR/../ast/instance_table.c2	/^import string;$/;"	v
string	$C2_LIBDIR/../ast/member_expr.c2	/^import string;$/;"	v
string	$C2_LIBDIR/../ast/module.c2	/^import string;$/;"	v
string	$C2_LIBDIR/../ast/statistics.c2	/^import string;$/;"	v
string	$C2_LIBDIR/../ast/struct_type_decl.c2	/^import string;$/;"	v
string	$C2_LIBDIR/../ast/switch_case.c2	/^import string;$/;"	v
string	$C2_LIBDIR/../ast/switch_stmt.c2	/^import string;$/;"	v
string	$C2_LIBDIR/../ast/symbol_table.c2	/^import string;$/;"	v
string	$C2_LIBDIR/../ast/type_ref.c2	/^import string;$/;"	v
string	$C2_LIBDIR/../ast/utils.c2	/^import string;$/;"	v
string	$C2_LIBDIR/../ast_utils/attr_table.c2	/^import string;$/;"	v
string	$C2_LIBDIR/../ast_utils/string_pool.c2	/^import string;$/;"	v
string	$C2_LIBDIR/../common/attr_handler.c2	/^import string;$/;"	v
string	$C2_LIBDIR/../common/bit_array.c2	/^import string;$/;"	v
string	$C2_LIBDIR/../common/build_file.c2	/^import string;$/;"	v
string	$C2_LIBDIR/../common/build_target.c2	/^import string;$/;"	v
string	$C2_LIBDIR/../common/component.c2	/^import string;$/;"	v
string	$C2_LIBDIR/../common/component_sorter.c2	/^import string;$/;"	v
string	$C2_LIBDIR/../common/index_list.c2	/^import string;$/;"	v
string	$C2_LIBDIR/../common/library_list.c2	/^import string;$/;"	v
string	$C2_LIBDIR/../common/module_list.c2	/^import string;$/;"	v
string	$C2_LIBDIR/../common/source_mgr.c2	/^import string;$/;"	v
string	$C2_LIBDIR/../common/value_maplist.c2	/^import string;$/;"	v
string	$C2_LIBDIR/../common/yaml/yaml_iterator.c2	/^import string;$/;"	v
string	$C2_LIBDIR/../compiler/c2recipe.c2	/^import string;$/;"	v
string	$C2_LIBDIR/../compiler/c2recipe_parser.c2	/^import string;$/;"	v
string	$C2_LIBDIR/../compiler/compiler.c2	/^import string;$/;"	v
string	$C2_LIBDIR/../compiler/compiler_libs.c2	/^import string;$/;"	v
string	$C2_LIBDIR/../generator/c/c_generator.c2	/^import string;$/;"	v
string	$C2_LIBDIR/../generator/c/c_generator_call.c2	/^import string;$/;"	v
string	$C2_LIBDIR/../generator/c/c_generator_special.c2	/^import string;$/;"	v
string	$C2_LIBDIR/../generator/c/c_generator_trace.c2	/^import string;$/;"	v
string	$C2_LIBDIR/../generator/ir/field_struct_layouter.c2	/^import string;$/;"	v
string	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^import string;$/;"	v
string	$C2_LIBDIR/../generator/ir/ir_generator_locals.c2	/^import string;$/;"	v
string	$C2_LIBDIR/../ir/block.c2	/^import string;$/;"	v
string	$C2_LIBDIR/../ir/inserter.c2	/^import string;$/;"	v
string	$C2_LIBDIR/../ir/interference_graph.c2	/^import string;$/;"	v
string	$C2_LIBDIR/../ir/live_map.c2	/^import string;$/;"	v
string	$C2_LIBDIR/../ir/lookup_table.c2	/^import string;$/;"	v
string	$C2_LIBDIR/../ir/print.c2	/^import string;$/;"	v
string	$C2_LIBDIR/../ir/rev_list.c2	/^import string;$/;"	v
string	$C2_LIBDIR/../ir/slot_values.c2	/^import string;$/;"	v
string	$C2_LIBDIR/../ir/slot_writes_map.c2	/^import string;$/;"	v
string	$C2_LIBDIR/../parser/ast_builder.c2	/^import string;$/;"	v
string	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^import string;$/;"	v
string	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^import string;$/;"	v
string	$C2_LIBDIR/../parser/keywords.c2	/^import string;$/;"	v
string	$C2_LIBDIR/../parser/token.c2	/^import string;$/;"	v
string	$C2_LIBDIR/../plugins/refs_generator.c2	/^import string;$/;"	v
string	$C2_LIBDIR/../plugins/unit_test1.c2	/^import string;$/;"	v
string	$C2_LIBDIR/../plugins/unit_test_plugin.c2	/^import string;$/;"	v
stringLiteralBits	$C2_LIBDIR/../ast/stmt.c2	/^        StringLiteralBits stringLiteralBits;$/;"	v
string_buffer	$C2_LIBDIR/../analyser/module_analyser_switch.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../ast/alias_type.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../ast/alias_type_decl.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../ast/array_designated_init_expr.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../ast/array_subscript_expr.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../ast/array_type.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../ast/array_value.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../ast/asm_stmt.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../ast/assert_stmt.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../ast/ast.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../ast/binary_operator.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../ast/bitoffset_expr.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../ast/boolean_literal.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../ast/break_stmt.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../ast/builtin_expr.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../ast/builtin_type.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../ast/call_expr.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../ast/char_literal.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../ast/compound_stmt.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../ast/conditional_operator.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../ast/continue_stmt.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../ast/decl.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../ast/decl_stmt.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../ast/enum_constant_decl.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../ast/enum_type.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../ast/enum_type_decl.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../ast/explicit_cast_expr.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../ast/expr.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../ast/fallthrough_stmt.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../ast/field_designated_init_expr.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../ast/float_literal.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../ast/for_stmt.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../ast/function_decl.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../ast/function_type.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../ast/function_type_decl.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../ast/goto_stmt.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../ast/identifier_expr.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../ast/if_stmt.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../ast/implicit_cast_expr.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../ast/import_decl.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../ast/init_list_expr.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../ast/integer_literal.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../ast/label_stmt.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../ast/member_expr.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../ast/module.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../ast/module_type.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../ast/nil_expr.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../ast/paren_expr.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../ast/pointer_type.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../ast/qualtype.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../ast/range_expr.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../ast/return_stmt.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../ast/static_assert.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../ast/stmt.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../ast/string_literal.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../ast/struct_type.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../ast/struct_type_decl.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../ast/switch_case.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../ast/switch_stmt.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../ast/symbol_table.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../ast/type.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../ast/type_expr.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../ast/type_ref.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../ast/unary_operator.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../ast/var_decl.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../ast/while_stmt.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../ast_utils/string_buffer.c2	/^module string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../common/component.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../common/diagnostics.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../common/manifest_writer.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../compiler/compiler.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../compiler/compiler_libs.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../compiler/main.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../generator/c/c_generator.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../generator/c/c_generator_call.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../generator/c/c_generator_expr.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../generator/c/c_generator_pure_call.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../generator/c/c_generator_special.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../generator/c/c_generator_stmt.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../generator/c/c_generator_trace.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../generator/c2i/c2i_generator.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../generator/c2i/c2i_generator_decl.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../generator/c2i/c2i_generator_expr.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../generator/c2i/c2i_generator_stmt.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../ir/graphviz.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../ir/print.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../parser/c2_parser.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../plugins/deps_generator.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../plugins/plugin_info.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../plugins/shell_cmd_plugin.c2	/^import string_buffer;$/;"	v
string_buffer	$C2_LIBDIR/../plugins/unit_test_plugin.c2	/^import string_buffer;$/;"	v
string_capacity	$C2_LIBDIR/../generator/c/c_generator_trace.c2	/^    u32 string_capacity;$/;"	v
string_count	$C2_LIBDIR/../generator/c/c_generator_trace.c2	/^    u32 string_count;$/;"	v
string_idx	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^    u32 string_idx;     \/\/ for string literals$/;"	v
string_list	$C2_LIBDIR/../common/build_file.c2	/^import string_list;$/;"	v
string_list	$C2_LIBDIR/../common/build_target.c2	/^import string_list;$/;"	v
string_list	$C2_LIBDIR/../common/component.c2	/^import string_list;$/;"	v
string_list	$C2_LIBDIR/../common/component_sorter.c2	/^import string_list;$/;"	v
string_list	$C2_LIBDIR/../common/manifest_writer.c2	/^import string_list;$/;"	v
string_list	$C2_LIBDIR/../common/string_list.c2	/^module string_list;$/;"	v
string_list	$C2_LIBDIR/../compiler/c2recipe_parser.c2	/^import string_list;$/;"	v
string_list	$C2_LIBDIR/../compiler/compiler.c2	/^import string_list;$/;"	v
string_list	$C2_LIBDIR/../compiler/compiler_libs.c2	/^import string_list;$/;"	v
string_list	$C2_LIBDIR/../compiler/main.c2	/^import string_list;$/;"	v
string_list	$C2_LIBDIR/../compiler/manifest.c2	/^import string_list;$/;"	v
string_list	$C2_LIBDIR/../compiler/plugin_mgr.c2	/^import string_list;$/;"	v
string_list	$C2_LIBDIR/../generator/c/c_generator.c2	/^import string_list;$/;"	v
string_list	$C2_LIBDIR/../generator/c/c_generator_special.c2	/^import string_list;$/;"	v
string_list	$C2_LIBDIR/../generator/c2i/c2i_generator.c2	/^import string_list;$/;"	v
string_list	$C2_LIBDIR/../parser/c2_parser.c2	/^import string_list;$/;"	v
string_list	$C2_LIBDIR/../parser/c2_parser_stmt.c2	/^import string_list;$/;"	v
string_list	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^import string_list;$/;"	v
string_list	$C2_LIBDIR/../plugins/deps_generator.c2	/^import string_list;$/;"	v
string_pool	$C2_LIBDIR/../analyser/module_analyser.c2	/^import string_pool;$/;"	v
string_pool	$C2_LIBDIR/../ast/ast.c2	/^import string_pool;$/;"	v
string_pool	$C2_LIBDIR/../ast/module.c2	/^import string_pool;$/;"	v
string_pool	$C2_LIBDIR/../ast/utils.c2	/^import string_pool;$/;"	v
string_pool	$C2_LIBDIR/../ast_utils/attr.c2	/^import string_pool;$/;"	v
string_pool	$C2_LIBDIR/../ast_utils/string_pool.c2	/^module string_pool;$/;"	v
string_pool	$C2_LIBDIR/../common/build_file.c2	/^import string_pool;$/;"	v
string_pool	$C2_LIBDIR/../common/build_target.c2	/^import string_pool;$/;"	v
string_pool	$C2_LIBDIR/../common/component.c2	/^import string_pool;$/;"	v
string_pool	$C2_LIBDIR/../common/source_mgr.c2	/^import string_pool;$/;"	v
string_pool	$C2_LIBDIR/../common/string_list.c2	/^import string_pool;$/;"	v
string_pool	$C2_LIBDIR/../compiler/c2recipe.c2	/^import string_pool;$/;"	v
string_pool	$C2_LIBDIR/../compiler/c2recipe_parser.c2	/^import string_pool;$/;"	v
string_pool	$C2_LIBDIR/../compiler/compiler.c2	/^import string_pool;$/;"	v
string_pool	$C2_LIBDIR/../compiler/main.c2	/^import string_pool;$/;"	v
string_pool	$C2_LIBDIR/../compiler/manifest.c2	/^import string_pool;$/;"	v
string_pool	$C2_LIBDIR/../compiler/plugin_mgr.c2	/^import string_pool;$/;"	v
string_pool	$C2_LIBDIR/../generator/c/c_generator.c2	/^import string_pool;$/;"	v
string_pool	$C2_LIBDIR/../generator/c2i/c2i_generator.c2	/^import string_pool;$/;"	v
string_pool	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^import string_pool;$/;"	v
string_pool	$C2_LIBDIR/../ir/context.c2	/^import string_pool;$/;"	v
string_pool	$C2_LIBDIR/../parser/ast_builder.c2	/^import string_pool;$/;"	v
string_pool	$C2_LIBDIR/../parser/c2_parser.c2	/^import string_pool;$/;"	v
string_pool	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^import string_pool;$/;"	v
string_pool	$C2_LIBDIR/../parser/keywords.c2	/^import string_pool;$/;"	v
string_pool	$C2_LIBDIR/../plugins/deps_generator.c2	/^import string_pool;$/;"	v
string_pool	$C2_LIBDIR/../plugins/plugin_info.c2	/^import string_pool;$/;"	v
string_types	$C2_LIBDIR/../ast/utils.c2	/^    StringTypePool string_types;$/;"	v
string_utils	$C2_LIBDIR/../common/string_utils.c2	/^module string_utils;$/;"	v
string_utils	$C2_LIBDIR/../compiler/main.c2	/^import string_utils;$/;"	v
string_utils	$C2_LIBDIR/../compiler/plugin_mgr.c2	/^import string_utils;$/;"	v
string_utils	$C2_LIBDIR/../generator/c/c_generator.c2	/^import string_utils;$/;"	v
string_utils	$C2_LIBDIR/../plugins/shell_cmd_plugin.c2	/^import string_utils;$/;"	v
struct	$C2_LIBDIR/../analyser/module_analyser.c2	/^public type Analyser struct @(opaque) {$/;"	v
struct	$C2_LIBDIR/../analyser/scope.c2	/^public type Scope struct @(opaque) {$/;"	v
struct	$C2_LIBDIR/../ast/alias_type.c2	/^public type AliasType struct @(opaque) {$/;"	v
struct	$C2_LIBDIR/../ast/alias_type_decl.c2	/^public type AliasTypeDecl struct @(opaque) {$/;"	v
struct	$C2_LIBDIR/../ast/array_designated_init_expr.c2	/^public type ArrayDesignatedInitExpr struct @(opaque) {$/;"	v
struct	$C2_LIBDIR/../ast/array_subscript_expr.c2	/^public type ArraySubscriptExpr struct @(opaque) {$/;"	v
struct	$C2_LIBDIR/../ast/array_type.c2	/^public type ArrayType struct @(opaque) {$/;"	v
struct	$C2_LIBDIR/../ast/array_value.c2	/^public type ArrayValue struct @(opaque) {$/;"	v
struct	$C2_LIBDIR/../ast/asm_stmt.c2	/^public type AsmStmt struct @(opaque) {$/;"	v
struct	$C2_LIBDIR/../ast/assert_stmt.c2	/^public type AssertStmt struct @(opaque) {$/;"	v
struct	$C2_LIBDIR/../ast/ast.c2	/^public type AST struct @(opaque) {$/;"	v
struct	$C2_LIBDIR/../ast/binary_operator.c2	/^public type BinaryOperator struct @(opaque) {$/;"	v
struct	$C2_LIBDIR/../ast/bitoffset_expr.c2	/^public type BitOffsetExpr struct @(opaque) {$/;"	v
struct	$C2_LIBDIR/../ast/boolean_literal.c2	/^public type BooleanLiteral struct @(opaque) {$/;"	v
struct	$C2_LIBDIR/../ast/break_stmt.c2	/^public type BreakStmt struct @(opaque) {$/;"	v
struct	$C2_LIBDIR/../ast/builtin_expr.c2	/^public type BuiltinExpr struct @(opaque) {$/;"	v
struct	$C2_LIBDIR/../ast/builtin_type.c2	/^public type BuiltinType struct @(opaque) {$/;"	v
struct	$C2_LIBDIR/../ast/call_expr.c2	/^public type CallExpr struct @(opaque) {$/;"	v
struct	$C2_LIBDIR/../ast/char_literal.c2	/^public type CharLiteral struct @(opaque) {$/;"	v
struct	$C2_LIBDIR/../ast/compound_stmt.c2	/^public type CompoundStmt struct @(opaque) {$/;"	v
struct	$C2_LIBDIR/../ast/conditional_operator.c2	/^public type ConditionalOperator struct @(opaque) {$/;"	v
struct	$C2_LIBDIR/../ast/continue_stmt.c2	/^public type ContinueStmt struct @(opaque) {$/;"	v
struct	$C2_LIBDIR/../ast/decl.c2	/^public type Decl struct @(opaque) {$/;"	v
struct	$C2_LIBDIR/../ast/decl_stmt.c2	/^public type DeclStmt struct @(opaque) {$/;"	v
struct	$C2_LIBDIR/../ast/enum_constant_decl.c2	/^public type EnumConstantDecl struct @(opaque) {$/;"	v
struct	$C2_LIBDIR/../ast/enum_type.c2	/^public type EnumType struct @(opaque) {$/;"	v
struct	$C2_LIBDIR/../ast/enum_type_decl.c2	/^public type EnumTypeDecl struct @(opaque) {$/;"	v
struct	$C2_LIBDIR/../ast/explicit_cast_expr.c2	/^public type ExplicitCastExpr struct @(opaque) {$/;"	v
struct	$C2_LIBDIR/../ast/expr.c2	/^public type Expr struct @(opaque) {$/;"	v
struct	$C2_LIBDIR/../ast/fallthrough_stmt.c2	/^public type FallthroughStmt struct @(opaque) {$/;"	v
struct	$C2_LIBDIR/../ast/field_designated_init_expr.c2	/^public type FieldDesignatedInitExpr struct @(opaque) {$/;"	v
struct	$C2_LIBDIR/../ast/float_literal.c2	/^public type FloatLiteral struct @(opaque) {$/;"	v
struct	$C2_LIBDIR/../ast/for_stmt.c2	/^public type ForStmt struct @(opaque) {$/;"	v
struct	$C2_LIBDIR/../ast/function_decl.c2	/^public type FunctionDecl struct @(opaque) {$/;"	v
struct	$C2_LIBDIR/../ast/function_type.c2	/^public type FunctionType struct @(opaque) {$/;"	v
struct	$C2_LIBDIR/../ast/function_type_decl.c2	/^public type FunctionTypeDecl struct @(opaque) {$/;"	v
struct	$C2_LIBDIR/../ast/goto_stmt.c2	/^public type GotoStmt struct @(opaque) {$/;"	v
struct	$C2_LIBDIR/../ast/identifier_expr.c2	/^public type IdentifierExpr struct @(opaque) {$/;"	v
struct	$C2_LIBDIR/../ast/if_stmt.c2	/^public type IfStmt struct @(opaque) {$/;"	v
struct	$C2_LIBDIR/../ast/implicit_cast_expr.c2	/^public type ImplicitCastExpr struct @(opaque) {$/;"	v
struct	$C2_LIBDIR/../ast/import_decl.c2	/^public type ImportDecl struct @(opaque) {$/;"	v
struct	$C2_LIBDIR/../ast/init_list_expr.c2	/^public type InitListExpr struct @(opaque) {$/;"	v
struct	$C2_LIBDIR/../ast/integer_literal.c2	/^public type IntegerLiteral struct @(opaque) {$/;"	v
struct	$C2_LIBDIR/../ast/label_stmt.c2	/^public type LabelStmt struct @(opaque) {$/;"	v
struct	$C2_LIBDIR/../ast/member_expr.c2	/^public type MemberExpr struct @(opaque) {$/;"	v
struct	$C2_LIBDIR/../ast/module.c2	/^public type Module struct @(opaque) {$/;"	v
struct	$C2_LIBDIR/../ast/module_type.c2	/^public type ModuleType struct @(opaque) {$/;"	v
struct	$C2_LIBDIR/../ast/nil_expr.c2	/^public type NilExpr struct @(opaque) {$/;"	v
struct	$C2_LIBDIR/../ast/paren_expr.c2	/^public type ParenExpr struct @(opaque) {$/;"	v
struct	$C2_LIBDIR/../ast/pointer_type.c2	/^public type PointerType struct @(opaque) {$/;"	v
struct	$C2_LIBDIR/../ast/range_expr.c2	/^public type RangeExpr struct @(opaque) {$/;"	v
struct	$C2_LIBDIR/../ast/return_stmt.c2	/^public type ReturnStmt struct @(opaque) {$/;"	v
struct	$C2_LIBDIR/../ast/static_assert.c2	/^public type StaticAssert struct @(opaque) {$/;"	v
struct	$C2_LIBDIR/../ast/stmt.c2	/^public type Stmt struct @(opaque) {$/;"	v
struct	$C2_LIBDIR/../ast/string_literal.c2	/^public type StringLiteral struct @(opaque) {$/;"	v
struct	$C2_LIBDIR/../ast/struct_type.c2	/^public type StructType struct @(opaque) {$/;"	v
struct	$C2_LIBDIR/../ast/struct_type_decl.c2	/^public type StructTypeDecl struct @(opaque) {$/;"	v
struct	$C2_LIBDIR/../ast/switch_case.c2	/^public type SwitchCase struct @(opaque) {$/;"	v
struct	$C2_LIBDIR/../ast/switch_stmt.c2	/^public type SwitchStmt struct @(opaque) {$/;"	v
struct	$C2_LIBDIR/../ast/type.c2	/^public type Type struct @(opaque) {$/;"	v
struct	$C2_LIBDIR/../ast/type_expr.c2	/^public type TypeExpr struct @(opaque) {$/;"	v
struct	$C2_LIBDIR/../ast/type_ref.c2	/^public type TypeRef struct @(opaque, aligned=8) {$/;"	v
struct	$C2_LIBDIR/../ast/unary_operator.c2	/^public type UnaryOperator struct @(opaque) {$/;"	v
struct	$C2_LIBDIR/../ast/utils.c2	/^public type Globals struct @(opaque) {$/;"	v
struct	$C2_LIBDIR/../ast/var_decl.c2	/^public type VarDecl struct @(opaque) {$/;"	v
struct	$C2_LIBDIR/../ast/while_stmt.c2	/^public type WhileStmt struct @(opaque) {$/;"	v
struct	$C2_LIBDIR/../ast_utils/attr_table.c2	/^public type Table struct @(opaque) {$/;"	v
struct	$C2_LIBDIR/../ast_utils/context.c2	/^public type Context struct @(opaque) {$/;"	v
struct	$C2_LIBDIR/../ast_utils/string_pool.c2	/^public type Pool struct @(opaque) {$/;"	v
struct	$C2_LIBDIR/../common/attr_handler.c2	/^public type Handler struct @(opaque) {$/;"	v
struct	$C2_LIBDIR/../common/build_file.c2	/^public type Info struct @(opaque) {$/;"	v
struct	$C2_LIBDIR/../common/build_target.c2	/^public type Target struct @(opaque) {$/;"	v
struct	$C2_LIBDIR/../common/component.c2	/^public type Component struct @(opaque) {$/;"	v
struct	$C2_LIBDIR/../common/diagnostics.c2	/^public type Diags struct @(opaque) {$/;"	v
struct	$C2_LIBDIR/../common/file/file_utils.c2	/^public type File struct @(unused) {$/;"	v
struct	$C2_LIBDIR/../common/source_mgr.c2	/^public type SourceMgr struct @(opaque) {$/;"	v
struct	$C2_LIBDIR/../common/yaml/yaml_data.c2	/^public type Node struct @(opaque) {$/;"	v
struct	$C2_LIBDIR/../common/yaml/yaml_parser.c2	/^public type Parser struct @(opaque) {$/;"	v
struct	$C2_LIBDIR/../compiler/c2recipe.c2	/^public type Recipe struct @(opaque) {$/;"	v
struct	$C2_LIBDIR/../compiler/plugin_mgr.c2	/^public type Mgr struct @(opaque) {$/;"	v
struct	$C2_LIBDIR/../generator/ast_visitor.c2	/^public type Visitor struct @(opaque) {$/;"	v
struct	$C2_LIBDIR/../generator/c2refs.c2	/^public type Refs struct @(opaque) {$/;"	v
struct	$C2_LIBDIR/../generator/radix_tree/radix_tree.c2	/^type Node struct @(aligned=4) {$/;"	v
struct	$C2_LIBDIR/../ir/context.c2	/^public type Context struct @(opaque) {$/;"	v
struct	$C2_LIBDIR/../ir/interference_graph.c2	/^public type InterferenceGraph struct @(opaque) {$/;"	v
struct	$C2_LIBDIR/../ir/live_map.c2	/^public type Map struct @(opaque) {$/;"	v
struct	$C2_LIBDIR/../ir/slot_writes_map.c2	/^public type Map struct @(opaque) {$/;"	v
struct	$C2_LIBDIR/../parser/ast_builder.c2	/^public type Builder struct  @(opaque) {$/;"	v
struct	$C2_LIBDIR/../parser/c2_parser.c2	/^public type Parser struct @(opaque) {$/;"	v
struct	$C2_LIBDIR/../plugins/plugin_info.c2	/^public type Plugin struct @(unused) {$/;"	v
structExpr	$C2_LIBDIR/../parser/ast_builder.c2	/^                                          Expr* structExpr,$/;"	v
structExpr	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    Expr* structExpr = p.parseFullIdentifier();$/;"	v
structTypeDeclBits	$C2_LIBDIR/../ast/decl.c2	/^        StructTypeDeclBits structTypeDeclBits;$/;"	v
struct_func_list	$C2_LIBDIR/../analyser/struct_func_list.c2	/^module struct_func_list;$/;"	v
struct_functions	$C2_LIBDIR/../ast/struct_type_decl.c2	/^    FunctionDecl** struct_functions;$/;"	v
struct_size	$C2_LIBDIR/../generator/ir/field_struct_layouter.c2	/^                                     u32 struct_size,$/;"	v
stype	$C2_LIBDIR/../ast/struct_type_decl.c2	/^    StructType* stype = StructType.create(c, d);$/;"	v
sub	$C2_LIBDIR/../analyser/module_analyser_expr.c2	/^    ArraySubscriptExpr* sub = (ArraySubscriptExpr*)e;$/;"	v
sub	$C2_LIBDIR/../analyser/module_analyser_init.c2	/^                StructTypeDecl* sub = (StructTypeDecl*)d;$/;"	v
sub	$C2_LIBDIR/../analyser/module_analyser_struct.c2	/^        StructTypeDecl* sub = nil;$/;"	v
sub	$C2_LIBDIR/../ast/struct_type_decl.c2	/^            StructTypeDecl* sub = (StructTypeDecl*)d;$/;"	v
subdir	$C2_LIBDIR/../plugins/deps_generator.c2	/^    return subdir;$/;"	v
subdirs	$C2_LIBDIR/../plugins/deps_generator.c2	/^    Dir* subdirs;$/;"	v
subroot	$C2_LIBDIR/../generator/radix_tree/radix_tree.c2	/^    Node* subroot = t.idx2node(subroot_idx);$/;"	v
subroot_idx	$C2_LIBDIR/../generator/radix_tree/radix_tree.c2	/^    u32 subroot_idx = t.add_node(2, t.add_word(t.idx2word(n.word_idx), match), 0);$/;"	v
svalue	$C2_LIBDIR/../ir/constant.c2	/^        f32 svalue;$/;"	v
sw	$C2_LIBDIR/../analyser/module_analyser_switch.c2	/^    SwitchStmt* sw = (SwitchStmt*)s;$/;"	v
sw	$C2_LIBDIR/../generator/ast_visitor.c2	/^        SwitchStmt* sw = cast<SwitchStmt*>(s);$/;"	v
sw	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^        SwitchStmt* sw = cast<SwitchStmt*>(s);$/;"	v
sw	$C2_LIBDIR/../generator/ir/ir_generator_switch.c2	/^    SwitchStmt* sw = cast<SwitchStmt*>(s);$/;"	v
swap	$C2_LIBDIR/../common/quicksort.c2	/^fn void swap(u8* item, u8* other, usize size) {$/;"	f
switchStmtBits	$C2_LIBDIR/../ast/stmt.c2	/^        SwitchStmtBits switchStmtBits;$/;"	v
switch_instr	$C2_LIBDIR/../ir/context.c2	/^        Instr* switch_instr = fi.instructions.get(instr_idx);$/;"	v
switch_loc	$C2_LIBDIR/../ir/switch.c2	/^    u32 switch_loc = b.instr.start + b.instr.count - 1;$/;"	v
symbol	$C2_LIBDIR/../ir/context.c2	/^    Symbol* symbol = c.symbols.get(id);$/;"	v
symbol	$C2_LIBDIR/../ir/print.c2	/^                               const Symbol* symbol,$/;"	v
symbols	$C2_LIBDIR/../analyser/scope.c2	/^    u32* symbols = stdlib.malloc(capacity * sizeof(u32));$/;"	v
symbols	$C2_LIBDIR/../ast/module.c2	/^    SymbolTable symbols;$/;"	v
symbols	$C2_LIBDIR/../ast/symbol_table.c2	/^    u32* symbols;$/;"	v
symbols	$C2_LIBDIR/../ir/context.c2	/^    SymbolList symbols;$/;"	v
symbols	$C2_LIBDIR/../ir/symbol_list.c2	/^    Symbol* symbols;$/;"	v
symbols2	$C2_LIBDIR/../ir/symbol_list.c2	/^    Symbol* symbols2 = stdlib.calloc(l.capacity, sizeof(Symbol));$/;"	v
syntax_error	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^                            goto syntax_error;$/;"	v
sys	$C2_LIBDIR/../common/target_info.c2	/^    System sys;$/;"	v
sys_str	$C2_LIBDIR/../common/target_info.c2	/^    char[32] sys_str;$/;"	v
sys_time	$C2_LIBDIR/../common/utils.c2	/^import sys_time;$/;"	v
sys_time	$C2_LIBDIR/../plugins/unit_test2.c2	/^import sys_time;$/;"	v
sys_utsname	$C2_LIBDIR/../common/target_info.c2	/^import sys_utsname;$/;"	v
system_names	$C2_LIBDIR/../common/target_info.c2	/^const char*[] system_names = { "unknown", "linux", "darwin", "cygwin", "freebsd", "openbsd" }$/;"	v
sz	$C2_LIBDIR/../ast/asm_stmt.c2	/^        u32 sz = s.num_exprs * sizeof(Expr*);$/;"	v
t1	$C2_LIBDIR/../analyser/conversion_checker.c2	/^    QualType t1 = lhs.getCanonicalType();$/;"	v
t1	$C2_LIBDIR/../analyser/module_analyser.c2	/^    QualType t1 = ma.analyseExpr(&lhs, false, RHS);$/;"	v
t1	$C2_LIBDIR/../analyser/module_analyser_binop.c2	/^    QualType t1 = lhs.getType();$/;"	v
t1	$C2_LIBDIR/../parser/c2_parser.c2	/^    u64 t1 = utils.now();$/;"	v
t1	$C2_LIBDIR/../plugins/deps_generator_plugin.c2	/^    u64 t1 = utils.now();$/;"	v
t1	$C2_LIBDIR/../plugins/refs_generator_plugin.c2	/^    u64 t1 = utils.now();$/;"	v
t1	$C2_LIBDIR/../plugins/shell_cmd_plugin.c2	/^    u64 t1 = utils.now();$/;"	v
t1	$C2_LIBDIR/../plugins/unit_test2.c2	/^  u64 t1 = now();$/;"	v
t1	$C2_LIBDIR/../plugins/unit_test_plugin.c2	/^    u64 t1 = utils.now();$/;"	v
t1_end	$C2_LIBDIR/../compiler/compiler.c2	/^    u64 t1_end = utils.now();$/;"	v
t1_start	$C2_LIBDIR/../compiler/compiler.c2	/^    u64 t1_start = utils.now();$/;"	v
t2	$C2_LIBDIR/../analyser/conversion_checker.c2	/^    QualType t2 = rhs.getCanonicalType();$/;"	v
t2	$C2_LIBDIR/../analyser/module_analyser.c2	/^    QualType t2 = ma.analyseExpr(&rhs, false, RHS);$/;"	v
t2	$C2_LIBDIR/../analyser/module_analyser_binop.c2	/^    QualType t2 = rhs.getType();$/;"	v
t2	$C2_LIBDIR/../generator/c2refs.c2	/^    return t2;$/;"	v
t2	$C2_LIBDIR/../parser/ast_builder.c2	/^        ArrayType* t2 = ArrayType.createIncremental(b.context, canon);$/;"	v
t2	$C2_LIBDIR/../parser/c2_parser.c2	/^    u64 t2 = utils.now();$/;"	v
t2	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    Token t2 = p.tok;$/;"	v
t2	$C2_LIBDIR/../plugins/deps_generator_plugin.c2	/^    u64 t2 = utils.now();$/;"	v
t2	$C2_LIBDIR/../plugins/refs_generator_plugin.c2	/^    u64 t2 = utils.now();$/;"	v
t2	$C2_LIBDIR/../plugins/shell_cmd_plugin.c2	/^    u64 t2 = utils.now();$/;"	v
t2	$C2_LIBDIR/../plugins/unit_test2.c2	/^  u64 t2 = now();$/;"	v
t2	$C2_LIBDIR/../plugins/unit_test_plugin.c2	/^    u64 t2 = utils.now();$/;"	v
t2_end	$C2_LIBDIR/../compiler/compiler.c2	/^    u64 t2_end = utils.now();$/;"	v
t2_start	$C2_LIBDIR/../compiler/compiler.c2	/^    u64 t2_start = utils.now();$/;"	v
tab	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^            char[4] tab;$/;"	v
tail	$C2_LIBDIR/../ast/asm_stmt.c2	/^    u8* tail = (u8*)s.constraints;$/;"	v
tail	$C2_LIBDIR/../ast/function_decl.c2	/^        VarDecl** tail = d.rtype.getPointerAfter();$/;"	v
tail	$C2_LIBDIR/../generator/ir/ir_generator_member.c2	/^    u32 tail = 0;$/;"	v
tail	$C2_LIBDIR/../ir/context.c2	/^    u32 tail = 0; \/\/ check point$/;"	v
tail	$C2_LIBDIR/../ir/interference_graph.c2	/^    u32 tail = g.queue_head + g.queue_count;$/;"	v
tail	$C2_LIBDIR/../ir/live_map.c2	/^        Variable* tail = &g.variables[a.last_var];$/;"	v
tail	$C2_LIBDIR/../ir/slot_writes_map.c2	/^        BlockWrites* tail = &m.blocks[a.last_var];$/;"	v
target	$C2_LIBDIR/../common/build_file.c2	/^    u32 target;$/;"	v
target	$C2_LIBDIR/../generator/c/c_generator.c2	/^    const char* target;$/;"	v
target	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^    const char* target;$/;"	v
target2compKind	$C2_LIBDIR/../compiler/compiler.c2	/^fn component.Kind target2compKind(build_target.Kind k) {$/;"	f
target_idx	$C2_LIBDIR/../compiler/main.c2	/^        u32 target_idx = target.getNameIdx();$/;"	v
target_info	$C2_LIBDIR/../common/target_info.c2	/^module target_info;$/;"	v
target_info	$C2_LIBDIR/../compiler/compiler.c2	/^import target_info;$/;"	v
target_info	$C2_LIBDIR/../generator/c/c_generator.c2	/^import target_info;$/;"	v
target_info	$C2_LIBDIR/../generator/c/c_generator_special.c2	/^import target_info;$/;"	v
target_info	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^import target_info;$/;"	v
target_name	$C2_LIBDIR/../compiler/main.c2	/^        target_name = c.opts.output_name;$/;"	v
target_name	$C2_LIBDIR/../generator/c/c_generator_special.c2	/^                target_name, target_name);$/;"	v
target_name	$C2_LIBDIR/../plugins/plugin_info.c2	/^    char[32] target_name;$/;"	v
target_str	$C2_LIBDIR/../compiler/compiler.c2	/^    const char* target_str = opts.target_triple;$/;"	v
targets_started	$C2_LIBDIR/../compiler/c2recipe_parser.c2	/^    bool targets_started;$/;"	v
te	$C2_LIBDIR/../analyser/module_analyser_builtin.c2	/^        TypeExpr* te = (TypeExpr*)inner;$/;"	v
teardown	$C2_LIBDIR/../plugins/unit_test1.c2	/^   TestFn teardown;$/;"	v
teardown	$C2_LIBDIR/../plugins/unit_test_plugin.c2	/^    bool teardown;$/;"	v
teardown_name	$C2_LIBDIR/../plugins/unit_test_plugin.c2	/^    u32 teardown_name;$/;"	v
temp	$C2_LIBDIR/../ast/qualtype.c2	/^    usize temp = qt.ptr & ~QualType_Mask;$/;"	v
temp_count	$C2_LIBDIR/../ir/print.c2	/^    u32 temp_count;$/;"	v
temp_ids	$C2_LIBDIR/../ir/print.c2	/^    u32* temp_ids; \/\/ index = instr_idx[from start of func), value is temp%$/;"	v
temp_idx	$C2_LIBDIR/../ir/slot_collector.c2	/^    u32 temp_idx;$/;"	v
temp_nr	$C2_LIBDIR/../ir/print.c2	/^    u32 temp_nr = ph.temp_count;$/;"	v
templateType	$C2_LIBDIR/../analyser/module_analyser_call.c2	/^    QualType templateType = ma.analyseTypeRef(template_arg);$/;"	v
template_arg	$C2_LIBDIR/../analyser/module_analyser_call.c2	/^    TypeRef* template_arg = call.getTemplateArg();$/;"	v
template_fd	$C2_LIBDIR/../generator/c/c_generator_call.c2	/^        FunctionDecl* template_fd = ft.getDecl();$/;"	v
template_idx	$C2_LIBDIR/../ast/call_expr.c2	/^    u16 template_idx;   \/\/ instance number$/;"	v
template_loc	$C2_LIBDIR/../ast/function_decl.c2	/^    SrcLoc template_loc;$/;"	v
template_loc	$C2_LIBDIR/../parser/ast_builder.c2	/^                                                  template_loc,$/;"	v
template_loc	$C2_LIBDIR/../parser/c2_parser.c2	/^        SrcLoc template_loc = p.tok.loc;$/;"	v
template_mod	$C2_LIBDIR/../analyser/module_analyser_call.c2	/^        Module* template_mod = fd.asDecl().getModule();$/;"	v
template_name	$C2_LIBDIR/../ast/function_decl.c2	/^    u32 template_name;    \/\/ index into string pool$/;"	v
template_name	$C2_LIBDIR/../ast/instantiator.c2	/^    u32 template_name;$/;"	v
template_name	$C2_LIBDIR/../parser/ast_builder.c2	/^                                                  template_name,$/;"	v
template_name	$C2_LIBDIR/../parser/c2_parser.c2	/^        u32 template_name = p.tok.name_idx;$/;"	v
temps	$C2_LIBDIR/../ir/register_alloc.c2	/^    u32* temps;$/;"	v
ternaryMiddle	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^        Expr* ternaryMiddle = nil;$/;"	v
test_mode	$C2_LIBDIR/../compiler/compiler.c2	/^    bool test_mode;$/;"	v
test_mode	$C2_LIBDIR/../generator/c/c_generator.c2	/^                        bool test_mode, bool trace_calls)$/;"	v
tests	$C2_LIBDIR/../plugins/unit_test1.c2	/^   const C2Test* tests;$/;"	v
tests	$C2_LIBDIR/../plugins/unit_test_plugin.c2	/^    FunctionDeclList tests;$/;"	v
text	$C2_LIBDIR/../ast/value.c2	/^    local char[4][64] text;$/;"	v
text	$C2_LIBDIR/../ast_utils/attr.c2	/^        u32 text;$/;"	v
text	$C2_LIBDIR/../ast_utils/string_pool.c2	/^            text = p.data + offset;$/;"	v
text	$C2_LIBDIR/../common/yaml/yaml_data.c2	/^    char* text;$/;"	v
text	$C2_LIBDIR/../generator/radix_tree/radix_tree.c2	/^    text = text + match;$/;"	v
text	$C2_LIBDIR/../ir/print.c2	/^        const char* text = ph.c.pool.idx2str(v.value);$/;"	v
text2	$C2_LIBDIR/../common/yaml/yaml_data.c2	/^    char* text2 = malloc(d.text_size);$/;"	v
text_cur	$C2_LIBDIR/../common/yaml/yaml_data.c2	/^    char* text_cur;$/;"	v
text_idx	$C2_LIBDIR/../common/yaml/yaml_data.c2	/^        u32 text_idx;   \/\/ text index, for SCALAR$/;"	v
text_idx	$C2_LIBDIR/../common/yaml/yaml_tokenizer.c2	/^        u32 text_idx;           \/\/ SCALAR, DIRECTIVE$/;"	v
text_idx	$C2_LIBDIR/../ir/context.c2	/^    u32 text_idx = c.pool.addStr(text, false);$/;"	v
text_idx	$C2_LIBDIR/../parser/token.c2	/^            u32 text_idx;    \/\/ pool index of encoded string or comment$/;"	v
text_len	$C2_LIBDIR/../parser/token.c2	/^            u32 text_len;    \/\/ length of converted string (without null terminator)$/;"	v
text_size	$C2_LIBDIR/../common/yaml/yaml_data.c2	/^    u32 text_size;$/;"	v
then	$C2_LIBDIR/../ast/if_stmt.c2	/^    Stmt* then;$/;"	v
then	$C2_LIBDIR/../parser/c2_parser_stmt.c2	/^    Stmt* then = p.parseStmt();$/;"	v
then2	$C2_LIBDIR/../ast/if_stmt.c2	/^    Stmt* then2 = s.then.instantiate(inst);$/;"	v
thenStmt	$C2_LIBDIR/../generator/c/c_generator_stmt.c2	/^        Stmt* thenStmt = i.getThen();$/;"	v
thenStmt	$C2_LIBDIR/../generator/c2i/c2i_generator_stmt.c2	/^        Stmt* thenStmt = i.getThen();$/;"	v
then_blk	$C2_LIBDIR/../generator/ir/ir_generator_expr.c2	/^    BlockId then_blk = c.createBlock(BlockKind.CondTrue);$/;"	v
then_blk	$C2_LIBDIR/../generator/ir/ir_generator_stmt.c2	/^    BlockId then_blk = c.createBlock(BlockKind.IfTrue);$/;"	v
then_stmt	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^        Stmt* then_stmt = if_stmt.getThen();$/;"	v
then_stmt	$C2_LIBDIR/../generator/ir/ir_generator_stmt.c2	/^    const Stmt* then_stmt = if_stmt.getThen();$/;"	v
thisPrec	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^        Prec thisPrec = nextTokPrec;$/;"	v
ti	$C2_LIBDIR/../ast/instance_table.c2	/^    TemplateInstance* ti = &f.instances[idx];$/;"	v
timeout	$C2_LIBDIR/../plugins/shell_cmd_plugin.c2	/^        const char* timeout = iter.getChildScalarValue("timeout");$/;"	v
timeout_sec	$C2_LIBDIR/../plugins/shell_cmd_plugin.c2	/^    u32 timeout_sec;$/;"	v
tl	$C2_LIBDIR/../analyser/module_analyser_binop.c2	/^        QualType tl = lhs.getType();$/;"	v
tlen	$C2_LIBDIR/../common/string_utils.c2	/^    usize tlen = strlen(tail);$/;"	v
tmp	$C2_LIBDIR/../ast/decl.c2	/^    return tmp;$/;"	v
tmp	$C2_LIBDIR/../ast/value.c2	/^    Value tmp = Value.negate(v2);$/;"	v
tmp	$C2_LIBDIR/../ast_utils/string_buffer.c2	/^    char[4096] tmp;$/;"	v
tmp	$C2_LIBDIR/../common/linked_list.c2	/^        Element* tmp = node;$/;"	v
tmp	$C2_LIBDIR/../common/quicksort.c2	/^        u8 tmp = *other;$/;"	v
tmp	$C2_LIBDIR/../common/source_mgr.c2	/^    return tmp;$/;"	v
tmp	$C2_LIBDIR/../compiler/compiler.c2	/^    char[32] tmp;$/;"	v
tmp	$C2_LIBDIR/../ir/block_list.c2	/^    BlockList tmp = *l1;$/;"	v
tmp	$C2_LIBDIR/../ir/instr_list.c2	/^    InstrList tmp = *other;$/;"	v
tmp	$C2_LIBDIR/../ir/ref.c2	/^    return tmp;$/;"	v
tmp	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^        char* tmp = p.multi_string;$/;"	v
tmp_buf	$C2_LIBDIR/../ast/decl.c2	/^    local char[4][128] tmp_buf; \/\/ allow up to 4 consecutive calls with different output$/;"	v
tmp_id	$C2_LIBDIR/../ast/decl.c2	/^    local u32 tmp_id = 0;$/;"	v
tmp_info	$C2_LIBDIR/../ir/context.c2	/^    FunctionInfo* tmp_info;$/;"	v
tmp_ref	$C2_LIBDIR/../ir/slot_collector.c2	/^            Ref tmp_ref = { RefKind.Temp, idx }$/;"	v
tmp_size	$C2_LIBDIR/../ast/decl.c2	/^    u32 tmp_size = elemsof(tmp_buf[0]);$/;"	v
todo	$C2_LIBDIR/../ir/rpo.c2	/^    u32 todo = num_blocks-1;  \/\/ insert point$/;"	v
tok	$C2_LIBDIR/../parser/c2_parser.c2	/^    Token tok;$/;"	v
tokKindToBuiltinKind	$C2_LIBDIR/../parser/c2_parser.c2	/^fn BuiltinKind tokKindToBuiltinKind(token.Kind kind) {$/;"	f
token	$C2_LIBDIR/../common/process_utils.c2	/^    char* token = strtok(tmp, " ");$/;"	v
token	$C2_LIBDIR/../common/yaml/yaml_parser.c2	/^    Token token;$/;"	v
token	$C2_LIBDIR/../compiler/c2recipe_parser.c2	/^    Token token;$/;"	v
token	$C2_LIBDIR/../parser/token.c2	/^module token;$/;"	v
token_count	$C2_LIBDIR/../parser/c2_parser.c2	/^    u32 token_count = 0;$/;"	v
token_names	$C2_LIBDIR/../common/yaml/yaml_tokenizer.c2	/^const char*[] token_names = {$/;"	v
token_names	$C2_LIBDIR/../parser/token.c2	/^const char*[] token_names = {$/;"	v
tokenizer	$C2_LIBDIR/../common/yaml/yaml_parser.c2	/^    Tokenizer tokenizer;$/;"	v
too_large	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^            goto too_large;$/;"	v
tools	$C2_LIBDIR/../ir/context.c2	/^    Tools tools;$/;"	v
tools	$C2_LIBDIR/../ir/work_queue.c2	/^    Tools tools;$/;"	v
top	$C2_LIBDIR/../analyser/module_analyser.c2	/^    StackLayer* top = &ma.checkStack[ma.checkIndex];$/;"	v
top	$C2_LIBDIR/../analyser/scope.c2	/^    const Level* top = &s.levels[s.lvl-1];$/;"	v
top	$C2_LIBDIR/../ast/ast_evaluator.c2	/^    Evaluator top = {}$/;"	v
top	$C2_LIBDIR/../common/yaml/yaml_parser.c2	/^    StackLevel* top = &p.stack[p.stack_size-1];$/;"	v
top	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^    Feature* top = &t.feature_stack[t.feature_count];$/;"	v
total	$C2_LIBDIR/../ast_utils/context.c2	/^    u32 total = 0;$/;"	v
total	$C2_LIBDIR/../ir/block_list.c2	/^    u32 total = l1.count + l2.count;$/;"	v
total	$C2_LIBDIR/../ir/interference_graph.c2	/^        u32 total = 0;$/;"	v
total	$C2_LIBDIR/../ir/live_map.c2	/^        u32 total = 0;$/;"	v
total	$C2_LIBDIR/../ir/slot_writes_map.c2	/^        u32 total = 0;$/;"	v
total	$C2_LIBDIR/../ir/ssa.c2	/^    u32 total = old_icount + t.inserter.getInstrCount();$/;"	v
total	$C2_LIBDIR/../plugins/unit_test2.c2	/^  u32 total;$/;"	v
totalCount	$C2_LIBDIR/../ast/statistics.c2	/^    u32 totalCount = typesCount + exprCount + stmtCount + declCount + otherCount;$/;"	v
totalSize	$C2_LIBDIR/../ast/statistics.c2	/^    u32 totalSize = typesTotal + exprTotal + stmtTotal + declTotal + otherTotal;$/;"	v
total_blocks	$C2_LIBDIR/../ir/print.c2	/^    u32 total_blocks = 0;$/;"	v
total_bytes	$C2_LIBDIR/../common/source_mgr.c2	/^    u32 total_bytes = 0;$/;"	v
total_functions	$C2_LIBDIR/../ir/print.c2	/^    u32 total_functions = 0;$/;"	v
total_globals	$C2_LIBDIR/../ir/print.c2	/^    u32 total_globals = 0;$/;"	v
total_instr	$C2_LIBDIR/../ir/print.c2	/^    u32 total_instr = 0;$/;"	v
total_lines	$C2_LIBDIR/../common/source_mgr.c2	/^    u32 total_lines = 0;$/;"	v
total_read	$C2_LIBDIR/../common/file/reader.c2	/^    return total_read;$/;"	v
total_size	$C2_LIBDIR/../ast_utils/string_pool.c2	/^    u32 total_size;     \/\/ total size that would have been allocated without filtering$/;"	v
total_size	$C2_LIBDIR/../common/source_mgr.c2	/^    u32 total_size = sizeof(SourceMgr) + sm.max_files * sizeof(File) + sm.index_capacity * sizeo/;"	v
total_size	$C2_LIBDIR/../generator/c2refs.c2	/^    u32 total_size;$/;"	v
total_size	$C2_LIBDIR/../generator/radix_tree/radix_tree.c2	/^    u32 total_size; \/\/ must be first$/;"	v
total_size	$C2_LIBDIR/../generator/radix_tree/radix_tree_dump.c2	/^    u32 total_size = t.used_nodes() + t.words.size;$/;"	v
total_written	$C2_LIBDIR/../common/file/writer.c2	/^    return total_written;$/;"	v
tr	$C2_LIBDIR/../analyser/module_analyser_binop.c2	/^        QualType tr = rhs.getType();$/;"	v
tr	$C2_LIBDIR/../generator/radix_tree/radix_tree_fs.c2	/^    Trimmer tr = { }$/;"	v
trace_calls	$C2_LIBDIR/../compiler/compiler.c2	/^    bool trace_calls;$/;"	v
trace_calls	$C2_LIBDIR/../compiler/main.c2	/^    bool trace_calls;$/;"	v
trace_calls	$C2_LIBDIR/../generator/c/c_generator.c2	/^    bool trace_calls;$/;"	v
triple	$C2_LIBDIR/../common/target_info.c2	/^    char[80] triple;$/;"	v
triplet	$C2_LIBDIR/../generator/c/c_generator_special.c2	/^        const char* triplet = gen.targetInfo.str();$/;"	v
true	$C2_LIBDIR/../analyser/conversion_checker.c2	/^    return true;$/;"	v
true	$C2_LIBDIR/../analyser/module_analyser.c2	/^    return true;$/;"	v
true	$C2_LIBDIR/../analyser/module_analyser_binop.c2	/^    return true;$/;"	v
true	$C2_LIBDIR/../analyser/module_analyser_call.c2	/^    return true;$/;"	v
true	$C2_LIBDIR/../analyser/module_analyser_expr.c2	/^    return true;$/;"	v
true	$C2_LIBDIR/../analyser/module_analyser_init.c2	/^    return true;$/;"	v
true	$C2_LIBDIR/../analyser/module_analyser_switch.c2	/^    return true;$/;"	v
true	$C2_LIBDIR/../analyser/module_analyser_type.c2	/^    return true;$/;"	v
true	$C2_LIBDIR/../analyser/module_analyser_unaryop.c2	/^    return true;$/;"	v
true	$C2_LIBDIR/../analyser/name_vector.c2	/^            return true;$/;"	v
true	$C2_LIBDIR/../analyser/scope.c2	/^    return true;$/;"	v
true	$C2_LIBDIR/../analyser_utils/ctv_analyser.c2	/^    return true;$/;"	v
true	$C2_LIBDIR/../analyser_utils/printf_utils.c2	/^    return true;$/;"	v
true	$C2_LIBDIR/../ast/expr.c2	/^    return true;$/;"	v
true	$C2_LIBDIR/../ast/function_decl.c2	/^    return true;$/;"	v
true	$C2_LIBDIR/../ast/unary_operator.c2	/^    return true;$/;"	v
true	$C2_LIBDIR/../ast_utils/string_buffer.c2	/^    return true;$/;"	v
true	$C2_LIBDIR/../common/attr_handler.c2	/^    return true;$/;"	v
true	$C2_LIBDIR/../common/build_file.c2	/^    return true;$/;"	v
true	$C2_LIBDIR/../common/build_target.c2	/^    return true;$/;"	v
true	$C2_LIBDIR/../common/file/file_utils.c2	/^    return true;$/;"	v
true	$C2_LIBDIR/../common/file/reader.c2	/^    return true;$/;"	v
true	$C2_LIBDIR/../common/file/writer.c2	/^    return true;$/;"	v
true	$C2_LIBDIR/../common/target_info.c2	/^    return true;$/;"	v
true	$C2_LIBDIR/../common/utils.c2	/^                return true;$/;"	v
true	$C2_LIBDIR/../common/yaml/yaml_parser.c2	/^    return true;$/;"	v
true	$C2_LIBDIR/../common/yaml/yaml_tokenizer.c2	/^    return true;$/;"	v
true	$C2_LIBDIR/../compiler/c2recipe_parser.c2	/^    return true;$/;"	v
true	$C2_LIBDIR/../compiler/c2recipe_yaml.c2	/^    return true;$/;"	v
true	$C2_LIBDIR/../compiler/compiler.c2	/^    return true;$/;"	v
true	$C2_LIBDIR/../compiler/compiler_libs.c2	/^                return true;$/;"	v
true	$C2_LIBDIR/../compiler/manifest.c2	/^    return true;$/;"	v
true	$C2_LIBDIR/../compiler/plugin_mgr.c2	/^    return true;$/;"	v
true	$C2_LIBDIR/../generator/c/c_generator.c2	/^    return true;$/;"	v
true	$C2_LIBDIR/../generator/c/c_generator_expr.c2	/^    return true;$/;"	v
true	$C2_LIBDIR/../generator/c2refs.c2	/^    return true;$/;"	v
true	$C2_LIBDIR/../generator/ir/ir_generator_expr.c2	/^    return true;$/;"	v
true	$C2_LIBDIR/../generator/ir/ir_generator_stmt.c2	/^    return true;$/;"	v
true	$C2_LIBDIR/../generator/radix_tree/radix_tree.c2	/^        return true;$/;"	v
true	$C2_LIBDIR/../generator/radix_tree/radix_tree_fs.c2	/^    return true;$/;"	v
true	$C2_LIBDIR/../ir/switch.c2	/^        return true;$/;"	v
true	$C2_LIBDIR/../parser/ast_builder.c2	/^    return true;$/;"	v
true	$C2_LIBDIR/../parser/c2_parser.c2	/^        return true;$/;"	v
true	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^            return true;$/;"	v
true	$C2_LIBDIR/../parser/c2_parser_stmt.c2	/^                return true; \/\/ init call$/;"	v
true	$C2_LIBDIR/../parser/c2_parser_type.c2	/^                                                  true,$/;"	v
true	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^    return true;$/;"	v
true	$C2_LIBDIR/../plugins/deps_generator_utils.c2	/^    return true;$/;"	v
true	$C2_LIBDIR/../plugins/shell_cmd_plugin.c2	/^    return true;$/;"	v
true	$C2_LIBDIR/../plugins/unit_test_plugin.c2	/^    return true;$/;"	v
true_blk	$C2_LIBDIR/../generator/ir/ir_generator_binop.c2	/^    BlockId true_blk = c.createBlock(BlockKind.AndTrue);$/;"	v
truncated	$C2_LIBDIR/../ast_utils/string_buffer.c2	/^    bool truncated;$/;"	v
type	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    a type, but it could be a global Constant, in which case an error will be generated later.$/;"	v
type2str	$C2_LIBDIR/../analyser/module_analyser_expr.c2	/^fn const char* type2str(QualType q) {$/;"	f
typeBits	$C2_LIBDIR/../ast/type.c2	/^        TypeBits typeBits;$/;"	v
typeExprBits	$C2_LIBDIR/../ast/stmt.c2	/^        TypeExprBits typeExprBits;$/;"	v
typeKind_names	$C2_LIBDIR/../ast/type.c2	/^const char*[] typeKind_names = {$/;"	v
typeRef	$C2_LIBDIR/../ast/alias_type_decl.c2	/^    TypeRef typeRef;    \/\/ Note: variable size!$/;"	v
typeRef	$C2_LIBDIR/../ast/type_expr.c2	/^    TypeRef typeRef;    \/\/ Note: variable size!$/;"	v
typeRef	$C2_LIBDIR/../ast/var_decl.c2	/^    TypeRef typeRef;    \/\/ Note: variable size due to tail allocs!$/;"	v
type_	$C2_LIBDIR/../ast/string_type_pool.c2	/^    Type* type_;$/;"	v
type_loc	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^        SrcLoc type_loc = p.tok.loc;$/;"	v
type_loc	$C2_LIBDIR/../parser/c2_parser_type.c2	/^    SrcLoc type_loc = p.tok.loc;$/;"	v
type_name	$C2_LIBDIR/../parser/c2_parser_type.c2	/^    u32 type_name = p.tok.name_idx;$/;"	v
type_qualifier	$C2_LIBDIR/../parser/c2_parser.c2	/^    u32 type_qualifier = p.parseOptionalTypeQualifier();$/;"	v
type_width	$C2_LIBDIR/../analyser/module_analyser_struct.c2	/^                u32 type_width = qt.getBitFieldWidth();$/;"	v
types	$C2_LIBDIR/../ast/ast.c2	/^    DeclList types;$/;"	v
typesCount	$C2_LIBDIR/../ast/statistics.c2	/^    u32 typesCount = 0;$/;"	v
typesTotal	$C2_LIBDIR/../ast/statistics.c2	/^    u32 typesTotal = 0;$/;"	v
u32	$C2_LIBDIR/../analyser/module_analyser_stmt.c2	/^type FlowBits u32;$/;"	v
u32	$C2_LIBDIR/../ast_utils/src_loc.c2	/^public type SrcLoc u32;$/;"	v
u32	$C2_LIBDIR/../ast_utils/string_pool.c2	/^type HashEntry u32;$/;"	v
u32	$C2_LIBDIR/../ir/case_list.c2	/^public type CaseId u32;$/;"	v
u32	$C2_LIBDIR/../ir/common.c2	/^public type BlockId u32;    \/\/ TODO make u16$/;"	v
u32	$C2_LIBDIR/../ir/symbol_list.c2	/^public type SymbolId u32;$/;"	v
u64	$C2_LIBDIR/../ast_utils/string_pool.c2	/^type HashEntry u64;$/;"	v
ubsan	$C2_LIBDIR/../compiler/compiler.c2	/^    bool ubsan;$/;"	v
ubsan	$C2_LIBDIR/../generator/c/c_generator.c2	/^    bool ubsan;$/;"	v
uint16_t	$C2_LIBDIR/../generator/c/c_generator.c2	/^    typedef unsigned short uint16_t;$/;"	v
uint16_t	$C2_LIBDIR/../generator/c/c_generator_special.c2	/^    typedef unsigned short int uint16_t;$/;"	v
uint32_t	$C2_LIBDIR/../generator/c/c_generator.c2	/^    typedef unsigned int uint32_t;$/;"	v
uint32_t	$C2_LIBDIR/../generator/c/c_generator_special.c2	/^    typedef unsigned int uint32_t;$/;"	v
uint64_t	$C2_LIBDIR/../generator/c/c_generator.c2	/^                typedef unsigned long uint64_t;$/;"	v
uint64_t	$C2_LIBDIR/../generator/c/c_generator_special.c2	/^    typedef unsigned long uint64_t;$/;"	v
uint8_t	$C2_LIBDIR/../generator/c/c_generator.c2	/^    typedef unsigned char uint8_t;$/;"	v
uint8_t	$C2_LIBDIR/../generator/c/c_generator_special.c2	/^    typedef unsigned char uint8_t;$/;"	v
unary	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^                goto unary;$/;"	v
unaryOpcode_names	$C2_LIBDIR/../ast/unary_operator.c2	/^const char*[] unaryOpcode_names = {$/;"	v
unaryOperatorBits	$C2_LIBDIR/../ast/stmt.c2	/^        UnaryOperatorBits unaryOperatorBits;$/;"	v
unistd	$C2_LIBDIR/../ast_utils/color.c2	/^import unistd;$/;"	v
unistd	$C2_LIBDIR/../common/utils.c2	/^import unistd;$/;"	v
unistd	$C2_LIBDIR/../compiler/main.c2	/^import unistd;$/;"	v
unistd	$C2_LIBDIR/../generator/radix_tree/radix_tree_fs.c2	/^import unistd;$/;"	v
unistd	$C2_LIBDIR/../ir/work_queue.c2	/^import unistd;$/;"	v
unistd	$C2_LIBDIR/../plugins/unit_test2.c2	/^import unistd;$/;"	v
unload	$C2_LIBDIR/../plugins/deps_generator_plugin.c2	/^fn void unload(void* arg) {$/;"	f
unload	$C2_LIBDIR/../plugins/git_version_plugin.c2	/^fn void unload(void* arg) {$/;"	f
unload	$C2_LIBDIR/../plugins/plugin_info.c2	/^    UnloadFn unload;$/;"	v
unload	$C2_LIBDIR/../plugins/refs_generator_plugin.c2	/^fn void unload(void* arg) {$/;"	f
unload	$C2_LIBDIR/../plugins/shell_cmd_plugin.c2	/^fn void unload(void* arg) {$/;"	f
unload	$C2_LIBDIR/../plugins/unit_test_plugin.c2	/^fn void unload(void* arg) {$/;"	f
unused_checker	$C2_LIBDIR/../analyser/unused_checker.c2	/^module unused_checker;$/;"	v
unused_checker	$C2_LIBDIR/../compiler/compiler.c2	/^import unused_checker;$/;"	v
uo	$C2_LIBDIR/../analyser/module_analyser_stmt.c2	/^    UnaryOperator* uo = (UnaryOperator*)arg;$/;"	v
uo	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^        UnaryOperator* uo = cast<UnaryOperator*>(e);$/;"	v
uo	$C2_LIBDIR/../generator/ir/ir_generator_expr.c2	/^    const UnaryOperator* uo = cast<UnaryOperator*>(e);$/;"	v
update_checkpoint	$C2_LIBDIR/../common/source_mgr.c2	/^fn CheckPoint update_checkpoint(CheckPoint cp, const char* src, u32 len) {$/;"	f
upper_name	$C2_LIBDIR/../generator/c/c_generator.c2	/^    char[32] upper_name;$/;"	v
usage	$C2_LIBDIR/../compiler/main.c2	/^fn void usage() {$/;"	f
usage_counter	$C2_LIBDIR/../ir/context.c2	/^import usage_counter;$/;"	v
usage_counter	$C2_LIBDIR/../ir/usage_counter.c2	/^module usage_counter;$/;"	v
useColor	$C2_LIBDIR/../ast/utils.c2	/^fn bool useColor() {$/;"	f
use_color	$C2_LIBDIR/../ast/utils.c2	/^    bool use_color;$/;"	v
use_color	$C2_LIBDIR/../common/console.c2	/^bool use_color = false;$/;"	v
use_ir_backend	$C2_LIBDIR/../compiler/main.c2	/^    bool use_ir_backend;$/;"	v
used	$C2_LIBDIR/../analyser/label_vector.c2	/^    bool used;$/;"	v
used	$C2_LIBDIR/../analyser/unused_checker.c2	/^    bool used = d.isUsed();$/;"	v
used	$C2_LIBDIR/../generator/radix_tree/radix_tree_dump.c2	/^    u32 used = t.used_nodes();$/;"	v
used	$C2_LIBDIR/../generator/radix_tree/radix_tree_fs.c2	/^    u32 used = t.used_nodes();$/;"	v
usedPublic	$C2_LIBDIR/../analyser/module_analyser.c2	/^    bool usedPublic;$/;"	v
used_import	$C2_LIBDIR/../analyser/scope.c2	/^            used_import = id;$/;"	v
used_opaque	$C2_LIBDIR/../analyser/module_analyser_call.c2	/^        bool used_opaque = false;$/;"	v
used_opaque	$C2_LIBDIR/../ast/instantiator.c2	/^    bool used_opaque;$/;"	v
used_regs	$C2_LIBDIR/../ir/interference_graph.c2	/^    u64 used_regs = 0;$/;"	v
user	$C2_LIBDIR/../analyser/module_analyser_type.c2	/^    const Ref* user = ref.getUser();$/;"	v
user	$C2_LIBDIR/../ast/type_ref.c2	/^    Ref user;$/;"	v
user	$C2_LIBDIR/../generator/ast_visitor.c2	/^        const Ref* user = r.getUser();$/;"	v
user	$C2_LIBDIR/../plugins/deps_generator.c2	/^    const Ref* user = ref.getUser();$/;"	v
user	$C2_LIBDIR/../plugins/refs_generator.c2	/^    const Ref* user = ref.getUser();$/;"	v
usualUnaryConversions	$C2_LIBDIR/../analyser/module_analyser_expr.c2	/^fn QualType usualUnaryConversions(Expr* e) {$/;"	f
utf8	$C2_LIBDIR/../common/diagnostics.c2	/^import utf8;$/;"	v
utf8	$C2_LIBDIR/../common/utf8.c2	/^module utf8;$/;"	v
utf8	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^import utf8;$/;"	v
utils	$C2_LIBDIR/../common/diagnostics.c2	/^import utils;$/;"	v
utils	$C2_LIBDIR/../common/utils.c2	/^module utils;$/;"	v
utils	$C2_LIBDIR/../compiler/compiler.c2	/^import utils;$/;"	v
utils	$C2_LIBDIR/../compiler/main.c2	/^import utils;$/;"	v
utils	$C2_LIBDIR/../parser/c2_parser.c2	/^import utils;$/;"	v
utils	$C2_LIBDIR/../plugins/deps_generator_plugin.c2	/^import utils;$/;"	v
utils	$C2_LIBDIR/../plugins/refs_generator_plugin.c2	/^import utils;$/;"	v
utils	$C2_LIBDIR/../plugins/shell_cmd_plugin.c2	/^import utils;$/;"	v
utils	$C2_LIBDIR/../plugins/unit_test_plugin.c2	/^import utils;$/;"	v
uvalue	$C2_LIBDIR/../ast/value.c2	/^    u64 uvalue = orig.as_u64();$/;"	v
uvalue	$C2_LIBDIR/../ir/constant.c2	/^        u64 uvalue;$/;"	v
va_list_idx	$C2_LIBDIR/../parser/c2_parser.c2	/^    u32 va_list_idx;$/;"	v
val	$C2_LIBDIR/../analyser/module_analyser_binop.c2	/^    Value val = ctv_analyser.get_value(e);$/;"	v
val	$C2_LIBDIR/../analyser/module_analyser_expr.c2	/^    Value val = ctv_analyser.get_value(e);$/;"	v
val	$C2_LIBDIR/../analyser/module_analyser_init.c2	/^    val = ad.getInit(); \/\/ re-read because of ImplicitCasts$/;"	v
val	$C2_LIBDIR/../ast/float_literal.c2	/^    f64 val;$/;"	v
val	$C2_LIBDIR/../ast/integer_literal.c2	/^    u64 val;$/;"	v
val	$C2_LIBDIR/../generator/c/c_generator.c2	/^    Value val = ast.evalExpr(e);$/;"	v
val	$C2_LIBDIR/../generator/ir/ir_generator_binop.c2	/^    Value val = ctv_analyser.get_value(bitfield);$/;"	v
val	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^    return val;$/;"	v
val1	$C2_LIBDIR/../analyser/module_analyser.c2	/^    Value val1 = ctv_analyser.get_value(lhs);$/;"	v
val2	$C2_LIBDIR/../analyser/module_analyser.c2	/^    Value val2 = ctv_analyser.get_value(rhs);$/;"	v
valType_names	$C2_LIBDIR/../ast/expr.c2	/^const char*[] valType_names = {$/;"	v
validBinOpKind	$C2_LIBDIR/../analyser/module_analyser_binop.c2	/^fn bool validBinOpKind(QualType t) {$/;"	f
valid_type	$C2_LIBDIR/../ast/function_decl.c2	/^    bool valid_type = d.base.qt.isValid();$/;"	v
valid_type	$C2_LIBDIR/../ast/var_decl.c2	/^    bool valid_type = d.base.qt.isValid();$/;"	v
valtype	$C2_LIBDIR/../analyser/module_analyser_member.c2	/^    ValType valtype = ValType.NValue;$/;"	v
value	$C2_LIBDIR/../analyser/module_analyser.c2	/^        u32 value = ma.astPool.add(reader.data(), len, false);$/;"	v
value	$C2_LIBDIR/../analyser/module_analyser_init.c2	/^        Expr* value = values[i];$/;"	v
value	$C2_LIBDIR/../analyser/module_analyser_struct.c2	/^                Value value = ctv_analyser.get_value(bitfield);$/;"	v
value	$C2_LIBDIR/../analyser/module_analyser_type.c2	/^    Value value = { }$/;"	v
value	$C2_LIBDIR/../analyser/module_sorter.c2	/^            u8 value = array[y * s.num_mods + x];$/;"	v
value	$C2_LIBDIR/../analyser_utils/ctv_analyser.c2	/^    Value value = ctv_analyser.get_value((e));$/;"	v
value	$C2_LIBDIR/../ast/array_value.c2	/^    Expr* value;$/;"	v
value	$C2_LIBDIR/../ast/builtin_expr.c2	/^    Value value;$/;"	v
value	$C2_LIBDIR/../ast/enum_constant_decl.c2	/^    Value value;$/;"	v
value	$C2_LIBDIR/../ast/return_stmt.c2	/^    Expr*[0] value; \/\/ tail-allocated, dependent on returnStmtBits.has_value$/;"	v
value	$C2_LIBDIR/../ast/string_literal.c2	/^    u32 value;$/;"	v
value	$C2_LIBDIR/../ast/value.c2	/^    u64 value = v.uvalue - v.negative;$/;"	v
value	$C2_LIBDIR/../ast_utils/attr.c2	/^    Value value;$/;"	v
value	$C2_LIBDIR/../common/value_maplist.c2	/^    u32 value;$/;"	v
value	$C2_LIBDIR/../compiler/c2recipe_parser.c2	/^    u32 value;  \/\/ allocated in StringPool$/;"	v
value	$C2_LIBDIR/../compiler/manifest.c2	/^        const char* value = iter.getValue();$/;"	v
value	$C2_LIBDIR/../generator/c/c_generator_pure_call.c2	/^    Value value;$/;"	v
value	$C2_LIBDIR/../generator/radix_tree/radix_tree.c2	/^    u32 value;$/;"	v
value	$C2_LIBDIR/../ir/case_list.c2	/^    u32 value;  \/\/ TODO include ranges, etc$/;"	v
value	$C2_LIBDIR/../ir/function_info.c2	/^    u8 value = fi.args[idx\/2];$/;"	v
value	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^    Expr* value = p.parseInitValue(false);$/;"	v
value	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^    u64 value = 0;$/;"	v
value_kind	$C2_LIBDIR/../ast_utils/attr.c2	/^    ValueKind value_kind;$/;"	v
value_maplist	$C2_LIBDIR/../common/value_maplist.c2	/^module value_maplist;$/;"	v
value_maplist	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^import value_maplist;$/;"	v
value_ref	$C2_LIBDIR/../generator/ir/field_struct_layouter.c2	/^        Ref value_ref;$/;"	v
values	$C2_LIBDIR/../analyser/incr_array_list.c2	/^        values = &info.values;$/;"	v
values	$C2_LIBDIR/../analyser/module_analyser.c2	/^        Expr** values = entry.values.getExprs();$/;"	v
values	$C2_LIBDIR/../analyser/module_analyser_init.c2	/^    Expr** values = ile.getValues();$/;"	v
values	$C2_LIBDIR/../ast/array_value_list.c2	/^    ArrayValue** values;$/;"	v
values	$C2_LIBDIR/../ast/ast.c2	/^    ArrayValue** values = a.array_values.get();$/;"	v
values	$C2_LIBDIR/../ast/init_list_expr.c2	/^    Expr*[0] values; \/\/ tail-allocated$/;"	v
values	$C2_LIBDIR/../common/value_maplist.c2	/^    Value* values;$/;"	v
values	$C2_LIBDIR/../generator/c/c_generator_expr.c2	/^        Expr** values = ile.getValues();$/;"	v
values	$C2_LIBDIR/../generator/c/c_generator_pure_call.c2	/^    ArgValue[16] values; \/\/ TODO use constants.MaxArgs or something$/;"	v
values	$C2_LIBDIR/../generator/c2i/c2i_generator_expr.c2	/^        Expr** values = ile.getValues();$/;"	v
values	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^    const Expr** values = ile.getValues2();$/;"	v
values	$C2_LIBDIR/../generator/ir/ir_generator_expr.c2	/^    const Expr** values = ile.getValues2();$/;"	v
values	$C2_LIBDIR/../ir/init_value_list.c2	/^    InitValue* values;$/;"	v
values	$C2_LIBDIR/../ir/slot_values.c2	/^    Ref* values;    \/\/ slot is index$/;"	v
values	$C2_LIBDIR/../parser/ast_builder.c2	/^                                      Expr** values,$/;"	v
values2	$C2_LIBDIR/../ast/array_value_list.c2	/^        void* values2 = malloc(l.capacity * sizeof(ArrayValue*));$/;"	v
values2	$C2_LIBDIR/../common/value_maplist.c2	/^    Value* values2 = stdlib.malloc(l.capacity * sizeof(Value));$/;"	v
values2	$C2_LIBDIR/../ir/init_value_list.c2	/^    InitValue* values2 = stdlib.malloc(l.capacity * sizeof(InitValue));$/;"	v
var	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^        StackVar* var = gen.locals.find(v);$/;"	v
var	$C2_LIBDIR/../generator/ir/ir_generator_expr.c2	/^    StackVar* var = gen.locals.find(vd);$/;"	v
var	$C2_LIBDIR/../generator/ir/ir_generator_locals.c2	/^    StackVar* var = &l.vars[l.count];$/;"	v
var	$C2_LIBDIR/../ir/interference_graph.c2	/^        u16 var = g.queue[g.queue_head];$/;"	v
var	$C2_LIBDIR/../ir/register_alloc.c2	/^                    u16 var = iter2.ids[j];$/;"	v
varDeclBits	$C2_LIBDIR/../ast/decl.c2	/^        VarDeclBits varDeclBits;$/;"	v
varDeclNames	$C2_LIBDIR/../ast/var_decl.c2	/^const char*[] varDeclNames = {$/;"	v
var_idx	$C2_LIBDIR/../ir/interference_graph.c2	/^    u16 var_idx = a.first_var;$/;"	v
var_idx	$C2_LIBDIR/../ir/live_map.c2	/^    u16 var_idx = a.first_var;$/;"	v
var_name	$C2_LIBDIR/../plugins/git_version_plugin.c2	/^    u32 var_name = p.info.astPool.addStr("Describe", true);$/;"	v
varargsName	$C2_LIBDIR/../generator/c/c_generator.c2	/^    u32 varargsName;$/;"	v
varargs_idx	$C2_LIBDIR/../parser/c2_parser.c2	/^    u32 varargs_idx;$/;"	v
variable	$C2_LIBDIR/../plugins/shell_cmd_plugin.c2	/^    const char* variable;$/;"	v
variables	$C2_LIBDIR/../ast/ast.c2	/^    DeclList variables;$/;"	v
variables	$C2_LIBDIR/../ir/interference_graph.c2	/^    Variable* variables;$/;"	v
variables	$C2_LIBDIR/../ir/live_map.c2	/^    Variable* variables;$/;"	v
vars	$C2_LIBDIR/../generator/ir/ir_generator_locals.c2	/^    StackVar* vars;$/;"	v
vars2	$C2_LIBDIR/../generator/ir/ir_generator_locals.c2	/^    StackVar* vars2 = stdlib.malloc(capacity * sizeof(StackVar));$/;"	v
vd	$C2_LIBDIR/../analyser/module_analyser.c2	/^        VarDecl* vd = (VarDecl*)d;$/;"	v
vd	$C2_LIBDIR/../analyser/module_analyser_call.c2	/^        VarDecl* vd = func_args[func_arg_index];$/;"	v
vd	$C2_LIBDIR/../analyser/module_analyser_expr.c2	/^        VarDecl* vd = (VarDecl*)d;$/;"	v
vd	$C2_LIBDIR/../analyser/module_analyser_function.c2	/^        VarDecl* vd = params[i];$/;"	v
vd	$C2_LIBDIR/../analyser/module_analyser_init.c2	/^                VarDecl* vd = (VarDecl*)d;$/;"	v
vd	$C2_LIBDIR/../analyser/module_analyser_stmt.c2	/^    VarDecl* vd = (VarDecl*)d;$/;"	v
vd	$C2_LIBDIR/../analyser/module_analyser_struct.c2	/^            VarDecl* vd = (VarDecl*)member;$/;"	v
vd	$C2_LIBDIR/../analyser/module_analyser_unaryop.c2	/^            VarDecl* vd = getVarDecl(inner);$/;"	v
vd	$C2_LIBDIR/../analyser/size_analyser.c2	/^            VarDecl* vd = (VarDecl*)d;$/;"	v
vd	$C2_LIBDIR/../analyser_utils/ctv_analyser.c2	/^        const VarDecl* vd = (VarDecl*)d;$/;"	v
vd	$C2_LIBDIR/../analyser_utils/printf_utils.c2	/^        VarDecl* vd = (VarDecl*)decl;$/;"	v
vd	$C2_LIBDIR/../ast/ast_evaluator.c2	/^        const VarDecl* vd = cast<VarDecl*>(d);$/;"	v
vd	$C2_LIBDIR/../ast/decl.c2	/^    const VarDecl* vd = (VarDecl*)d;$/;"	v
vd	$C2_LIBDIR/../generator/c/c_generator.c2	/^    VarDecl* vd = cast<VarDecl*>(d);$/;"	v
vd	$C2_LIBDIR/../generator/c/c_generator_call.c2	/^            VarDecl* vd = func_args[func_index];$/;"	v
vd	$C2_LIBDIR/../generator/c/c_generator_pure_call.c2	/^        VarDecl* vd = cast<VarDecl*>(d);$/;"	v
vd	$C2_LIBDIR/../generator/c/c_generator_stmt.c2	/^            VarDecl* vd = ds.getDecl(i);$/;"	v
vd	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^            VarDecl* vd = ds.getDecl(i);$/;"	v
vd	$C2_LIBDIR/../generator/ir/ir_generator_binop.c2	/^    const VarDecl* vd = (VarDecl*)d;$/;"	v
vd	$C2_LIBDIR/../generator/ir/ir_generator_expr.c2	/^    const VarDecl* vd = cast<VarDecl*>(d);$/;"	v
vd	$C2_LIBDIR/../generator/ir/ir_generator_member.c2	/^            const VarDecl* vd = (VarDecl*)d;$/;"	v
vd	$C2_LIBDIR/../generator/ir/ir_generator_stmt.c2	/^        VarDecl* vd = ds.getDecl(0);$/;"	v
vd	$C2_LIBDIR/../parser/ast_builder.c2	/^    VarDecl* vd = VarDecl.create(b.context,$/;"	v
vd	$C2_LIBDIR/../plugins/deps_generator_utils.c2	/^        const VarDecl* vd = cast<VarDecl*>(d);$/;"	v
vd2	$C2_LIBDIR/../ast/var_decl.c2	/^    return vd2;$/;"	v
vendor	$C2_LIBDIR/../common/target_info.c2	/^    Vendor vendor;$/;"	v
vendor_names	$C2_LIBDIR/../common/target_info.c2	/^const char*[] vendor_names = { "unknown", "apple" }$/;"	v
vendor_str	$C2_LIBDIR/../common/target_info.c2	/^    char[32] vendor_str;$/;"	v
version	$C2_LIBDIR/../plugins/git_version_plugin.c2	/^    u32 version = p.info.astPool.addStr(p.version, false);$/;"	v
vk	$C2_LIBDIR/../generator/c/c_generator_pure_call.c2	/^        VarDeclKind vk = vd.getKind();$/;"	v
void_ptr	$C2_LIBDIR/../ast/utils.c2	/^    Type* void_ptr = ast.getPointerType(builtins[BuiltinKind.Void]);$/;"	v
vprint_errormsg	$C2_LIBDIR/../plugins/unit_test2.c2	/^fn void vprint_errormsg(const char* fmt, va_list ap) {$/;"	f
warn_on_unused	$C2_LIBDIR/../analyser/scope.c2	/^    bool warn_on_unused;$/;"	v
warning_flags	$C2_LIBDIR/../analyser/module_analyser.c2	/^import warning_flags;$/;"	v
warning_flags	$C2_LIBDIR/../analyser/unused_checker.c2	/^import warning_flags;$/;"	v
warning_flags	$C2_LIBDIR/../common/build_target.c2	/^import warning_flags;$/;"	v
warning_flags	$C2_LIBDIR/../common/warning_flags.c2	/^module warning_flags;$/;"	v
warning_flags	$C2_LIBDIR/../compiler/c2recipe_parser.c2	/^import warning_flags;$/;"	v
warning_flags	$C2_LIBDIR/../compiler/compiler.c2	/^import warning_flags;$/;"	v
wasted	$C2_LIBDIR/../generator/radix_tree/radix_tree.c2	/^    u32 wasted;$/;"	v
while_stmt	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^        const WhileStmt* while_stmt = cast<WhileStmt*>(s);$/;"	v
width	$C2_LIBDIR/../analyser/conversion_checker.c2	/^    u32 width = bi.getWidth();$/;"	v
width	$C2_LIBDIR/../analyser/conversion_checker_expr.c2	/^    u8 width;   \/\/ in bits$/;"	v
width	$C2_LIBDIR/../analyser/module_analyser_binop.c2	/^    u32 width = bi.getWidth();$/;"	v
width	$C2_LIBDIR/../analyser/module_analyser_expr.c2	/^        Value width = lval.minus(&rval);$/;"	v
width	$C2_LIBDIR/../analyser_utils/ctv_analyser.c2	/^        Value width = high.minus(&low);$/;"	v
width	$C2_LIBDIR/../ast/ast_evaluator.c2	/^        Value width = high.minus(&low);$/;"	v
width	$C2_LIBDIR/../ast/value.c2	/^    u8 width;       \/\/ 0: unspecified, otherwise bitwidth$/;"	v
width	$C2_LIBDIR/../generator/c/c_generator_pure_call.c2	/^        Value width = high.minus(&low);$/;"	v
width	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^    u32 width;$/;"	v
width	$C2_LIBDIR/../generator/ir/ir_generator_binop.c2	/^    u32 width = val.as_u32();$/;"	v
wl	$C2_LIBDIR/../analyser/conversion_checker.c2	/^    u32 wl = bi.getWidth();$/;"	v
word	$C2_LIBDIR/../ast_utils/string_pool.c2	/^                const char* word = p.data + index;$/;"	v
word	$C2_LIBDIR/../common/bit_array.c2	/^    u32 word = idx \/ 64;$/;"	v
word	$C2_LIBDIR/../generator/radix_tree/radix_tree.c2	/^    const char* word = t.idx2word(n.word_idx);$/;"	v
word_idx	$C2_LIBDIR/../generator/radix_tree/radix_tree_fs.c2	/^    u32 word_idx = n.word_idx ? tr.add_word(t.idx2word(n.word_idx)) : 0;$/;"	v
words	$C2_LIBDIR/../generator/radix_tree/radix_tree.c2	/^    Words* words;$/;"	v
words	$C2_LIBDIR/../generator/radix_tree/radix_tree_fs.c2	/^    Words* words;$/;"	v
words2	$C2_LIBDIR/../generator/radix_tree/radix_tree.c2	/^    Words* words2 = Words.create(capacity);$/;"	v
wordsize	$C2_LIBDIR/../ast/utils.c2	/^    u32 wordsize;       \/\/ 4 or 8 (in bytes)$/;"	v
work_queue	$C2_LIBDIR/../ir/usage_counter.c2	/^    u32[64] work_queue; \/\/ TODO make re-sizeable$/;"	v
worker_main	$C2_LIBDIR/../ir/work_queue.c2	/^fn void* worker_main(void* arg) {$/;"	f
workers	$C2_LIBDIR/../ir/work_queue.c2	/^    QueueWorker*[MAX_THREADS] workers = { nil }$/;"	v
wr	$C2_LIBDIR/../ir/slot_collector.c2	/^        SlotWrite* wr = &iter.ids[i];$/;"	v
wr	$C2_LIBDIR/../ir/slot_writes_map.c2	/^    SlotWrite* wr = &m.map[r.start+r.count];$/;"	v
wr	$C2_LIBDIR/../ir/ssa.c2	/^    const Ref* wr = t.collector.findWrite(blk_id, slot);$/;"	v
wrapper	$C2_LIBDIR/../generator/generator_utils.c2	/^    Wrapper wrapper = {}$/;"	v
write2	$C2_LIBDIR/../common/file/writer.c2	/^fn isize write2(i32 hd, const void* data, usize len) {$/;"	f
write_file_or_die	$C2_LIBDIR/../compiler/main.c2	/^fn void write_file_or_die(const char* filename, string_buffer.Buf* buf) {$/;"	f
writes	$C2_LIBDIR/../ir/slot_collector.c2	/^    Map* writes;$/;"	v
writing	$C2_LIBDIR/../analyser/conversion_checker.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../analyser/conversion_checker_expr.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../analyser/incr_array_list.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../analyser/init_checker.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../analyser/label_vector.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../analyser/module_analyser.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../analyser/module_analyser_binop.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../analyser/module_analyser_builtin.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../analyser/module_analyser_call.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../analyser/module_analyser_expr.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../analyser/module_analyser_function.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../analyser/module_analyser_init.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../analyser/module_analyser_member.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../analyser/module_analyser_stmt.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../analyser/module_analyser_struct.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../analyser/module_analyser_switch.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../analyser/module_analyser_type.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../analyser/module_analyser_unaryop.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../analyser/module_sorter.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../analyser/name_vector.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../analyser/scope.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../analyser/size_analyser.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../analyser/struct_field_init_checker.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../analyser/struct_func_list.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../analyser/unused_checker.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../analyser_utils/ctv_analyser.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../analyser_utils/printf_utils.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast/alias_type.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast/alias_type_decl.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast/array_designated_init_expr.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast/array_subscript_expr.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast/array_type.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast/array_value.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast/array_value_list.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast/asm_stmt.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast/assert_stmt.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast/ast.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast/ast_evaluator.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast/binary_operator.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast/bitoffset_expr.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast/boolean_literal.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast/break_stmt.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast/builtin_expr.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast/builtin_type.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast/call_expr.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast/char_literal.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast/compound_stmt.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast/conditional_operator.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast/continue_stmt.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast/decl.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast/decl_list.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast/decl_stmt.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast/enum_constant_decl.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast/enum_type.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast/enum_type_decl.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast/explicit_cast_expr.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast/expr.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast/expr_list.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast/fallthrough_stmt.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast/field_designated_init_expr.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast/float_literal.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast/for_stmt.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast/function_decl.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast/function_decl_list.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast/function_type.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast/function_type_decl.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast/goto_stmt.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast/identifier_expr.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast/if_stmt.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast/implicit_cast_expr.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast/import_decl.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast/import_decl_list.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast/init_list_expr.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast/instance_table.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast/instantiator.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast/integer_literal.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast/label_stmt.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast/member_expr.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast/module.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast/module_type.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast/nil_expr.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast/paren_expr.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast/pointer_pool.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast/pointer_type.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast/qualtype.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast/range_expr.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast/return_stmt.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast/static_assert.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast/static_assert_list.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast/statistics.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast/stmt.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast/string_literal.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast/string_type_pool.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast/struct_type.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast/struct_type_decl.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast/switch_case.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast/switch_stmt.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast/symbol_table.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast/type.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast/type_expr.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast/type_ref.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast/unary_operator.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast/utils.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast/value.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast/var_decl.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast/while_stmt.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast_utils/attr.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast_utils/attr_table.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast_utils/color.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast_utils/constants.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast_utils/context.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast_utils/number_radix.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast_utils/src_loc.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast_utils/string_buffer.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ast_utils/string_pool.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../common/attr_handler.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../common/bit_array.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../common/bit_utils.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../common/build_file.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../common/build_target.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../common/c2_prec.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../common/c_prec.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../common/component.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../common/component_sorter.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../common/console.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../common/diagnostics.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../common/dsm_sorter.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../common/file/file_utils.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../common/file/reader.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../common/file/writer.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../common/index_list.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../common/library_list.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../common/linked_list.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../common/manifest_writer.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../common/module_list.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../common/process_utils.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../common/quicksort.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../common/source_mgr.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../common/string_list.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../common/string_utils.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../common/target_info.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../common/utf8.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../common/utils.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../common/value_maplist.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../common/warning_flags.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../common/yaml/yaml_data.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../common/yaml/yaml_dump.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../common/yaml/yaml_iterator.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../common/yaml/yaml_parser.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../common/yaml/yaml_tokenizer.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../compiler/c2recipe.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../compiler/c2recipe_parser.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../compiler/c2recipe_yaml.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../compiler/compiler.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../compiler/compiler_libs.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../compiler/main.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../compiler/manifest.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../compiler/plugin_mgr.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../generator/ast_visitor.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../generator/ast_visitor_expr.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../generator/c/c_generator.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../generator/c/c_generator_call.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../generator/c/c_generator_expr.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../generator/c/c_generator_pure_call.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../generator/c/c_generator_special.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../generator/c/c_generator_stmt.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../generator/c/c_generator_trace.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../generator/c/dep_finder.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../generator/c2i/c2i_generator.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../generator/c2i/c2i_generator_decl.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../generator/c2i/c2i_generator_expr.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../generator/c2i/c2i_generator_stmt.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../generator/c2refs.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../generator/generator_utils.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../generator/ir/array_init_sorter.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../generator/ir/basic_struct_layouter.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../generator/ir/field_struct_layouter.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../generator/ir/ir_generator.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../generator/ir/ir_generator_binop.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../generator/ir/ir_generator_call.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../generator/ir/ir_generator_expr.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../generator/ir/ir_generator_locals.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../generator/ir/ir_generator_member.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../generator/ir/ir_generator_stmt.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../generator/ir/ir_generator_switch.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../generator/ir/ref_list.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../generator/radix_tree/radix_tree.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../generator/radix_tree/radix_tree_dump.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../generator/radix_tree/radix_tree_fs.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ir/block.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ir/block_list.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ir/case_list.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ir/common.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ir/constant.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ir/constant_list.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ir/context.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ir/copy_list.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ir/function_info.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ir/graphviz.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ir/init_value.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ir/init_value_list.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ir/inserter.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ir/instr.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ir/instr_kind.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ir/instr_list.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ir/interference_graph.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ir/live_map.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ir/lookup_table.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ir/phi_list.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ir/print.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ir/ref.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ir/register_alloc.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ir/rev_list.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ir/rpo.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ir/slot_collector.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ir/slot_values.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ir/slot_writes_map.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ir/ssa.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ir/switch.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ir/symbol_list.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ir/types.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../ir/work_queue.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../parser/ast_builder.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../parser/c2_parser.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../parser/c2_parser_expr.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../parser/c2_parser_stmt.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../parser/c2_parser_switch.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../parser/c2_parser_type.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../parser/case_list.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../parser/expr_list.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../parser/keywords.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../parser/stmt_list.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../parser/token.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../plugins/deps_generator.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../plugins/deps_generator_plugin.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../plugins/deps_generator_utils.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../plugins/git_version_plugin.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../plugins/plugin_info.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../plugins/refs_generator.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../plugins/refs_generator_plugin.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../plugins/shell_cmd_plugin.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
writing	$C2_LIBDIR/../plugins/unit_test_plugin.c2	/^ * Unless required by applicable law or agreed to in writing, software$/;"	v
written	$C2_LIBDIR/../common/file/writer.c2	/^    isize written = write2(fd, data, len);$/;"	v
written	$C2_LIBDIR/../generator/c2refs.c2	/^    isize written = write(fd, section, size);$/;"	v
written	$C2_LIBDIR/../generator/radix_tree/radix_tree_fs.c2	/^    isize written = unistd.write(fd, section, size);$/;"	v
xval	$C2_LIBDIR/../parser/c2_tokenizer.c2	/^        i32 xval = 0;$/;"	v
yaml	$C2_LIBDIR/../common/build_file.c2	/^import yaml;$/;"	v
yaml	$C2_LIBDIR/../common/yaml/yaml_data.c2	/^module yaml;$/;"	v
yaml	$C2_LIBDIR/../common/yaml/yaml_dump.c2	/^module yaml;$/;"	v
yaml	$C2_LIBDIR/../common/yaml/yaml_iterator.c2	/^module yaml;$/;"	v
yaml	$C2_LIBDIR/../common/yaml/yaml_parser.c2	/^module yaml;$/;"	v
yaml	$C2_LIBDIR/../common/yaml/yaml_tokenizer.c2	/^module yaml;$/;"	v
yaml	$C2_LIBDIR/../compiler/c2recipe_yaml.c2	/^import yaml;$/;"	v
yaml	$C2_LIBDIR/../compiler/manifest.c2	/^import yaml;$/;"	v
yaml	$C2_LIBDIR/../plugins/shell_cmd_plugin.c2	/^import yaml;$/;"	v
zone	$C2_LIBDIR/../generator/radix_tree/radix_tree.c2	/^    Zone* zone = nil;$/;"	v
zone	$C2_LIBDIR/../generator/radix_tree/radix_tree_fs.c2	/^        const Zone* zone = to_container(Zone, list, cur);$/;"	v
zones	$C2_LIBDIR/../generator/radix_tree/radix_tree.c2	/^    Zone[32] zones;$/;"	v
