APIENTRY	$RAYLIB/rlgl.h	/^                #define APIENTRY$/;"	d
ARROWS_SIZE	$RAYLIB/raygui.h	/^    ARROWS_SIZE = 16,           \/\/ ScrollBar arrows size$/;"	e	enum:__anonfd9f18ac0c03
ARROWS_VISIBLE	$RAYLIB/raygui.h	/^    ARROWS_VISIBLE,             \/\/ ScrollBar arrows visible$/;"	e	enum:__anonfd9f18ac0c03
ARROW_PADDING	$RAYLIB/raygui.h	/^    ARROW_PADDING = 16,         \/\/ DropdownBox arrow separation from border and items$/;"	e	enum:__anonfd9f18ac0f03
AttachAudioMixedProcessor	$RAYLIB/raylib.h	/^RLAPI void AttachAudioMixedProcessor(AudioCallback processor); \/\/ Attach audio stream processo/;"	p	typeref:typename:RLAPI void	signature:(AudioCallback processor)
AttachAudioStreamProcessor	$RAYLIB/raylib.h	/^RLAPI void AttachAudioStreamProcessor(AudioStream stream, AudioCallback processor); \/\/ Attach /;"	p	typeref:typename:RLAPI void	signature:(AudioStream stream,AudioCallback processor)
AudioCallback	$RAYLIB/raylib.h	/^typedef void (*AudioCallback)(void *bufferData, unsigned int frames);$/;"	t	typeref:typename:void (*)(void * bufferData,unsigned int frames)
AudioStream	$RAYLIB/raylib.h	/^} AudioStream;$/;"	t	typeref:struct:AudioStream
AutomationEvent	$RAYLIB/raylib.h	/^} AutomationEvent;$/;"	t	typeref:struct:AutomationEvent
AutomationEventList	$RAYLIB/raylib.h	/^} AutomationEventList;$/;"	t	typeref:struct:AutomationEventList
BACKGROUND_COLOR	$RAYLIB/raygui.h	/^    BACKGROUND_COLOR,           \/\/ Background color$/;"	e	enum:__anonfd9f18ac0803
BASE	$RAYLIB/raygui.h	/^typedef enum { BORDER = 0, BASE, TEXT, OTHER } GuiPropertyElement;$/;"	e	enum:__anonfd9f18ac1503
BASE_COLOR_DISABLED	$RAYLIB/raygui.h	/^    BASE_COLOR_DISABLED,        \/\/ Control base color in STATE_DISABLED$/;"	e	enum:__anonfd9f18ac0703
BASE_COLOR_FOCUSED	$RAYLIB/raygui.h	/^    BASE_COLOR_FOCUSED,         \/\/ Control base color in STATE_FOCUSED$/;"	e	enum:__anonfd9f18ac0703
BASE_COLOR_NORMAL	$RAYLIB/raygui.h	/^    BASE_COLOR_NORMAL,          \/\/ Control base color in STATE_NORMAL$/;"	e	enum:__anonfd9f18ac0703
BASE_COLOR_PRESSED	$RAYLIB/raygui.h	/^    BASE_COLOR_PRESSED,         \/\/ Control base color in STATE_PRESSED$/;"	e	enum:__anonfd9f18ac0703
BEIGE	$RAYLIB/raylib.h	/^#define BEIGE /;"	d
BIT_CHECK	$RAYLIB/raygui.h	/^    #define BIT_CHECK(/;"	d	signature:(a,b)
BLACK	$RAYLIB/raylib.h	/^#define BLACK /;"	d
BLANK	$RAYLIB/raylib.h	/^#define BLANK /;"	d
BLEND_ADDITIVE	$RAYLIB/raylib.h	/^    BLEND_ADDITIVE,                 \/\/ Blend textures adding colors$/;"	e	enum:__anonfdf2e0de1203
BLEND_ADD_COLORS	$RAYLIB/raylib.h	/^    BLEND_ADD_COLORS,               \/\/ Blend textures adding colors (alternative)$/;"	e	enum:__anonfdf2e0de1203
BLEND_ALPHA	$RAYLIB/raylib.h	/^    BLEND_ALPHA = 0,                \/\/ Blend textures considering alpha (default)$/;"	e	enum:__anonfdf2e0de1203
BLEND_ALPHA_PREMULTIPLY	$RAYLIB/raylib.h	/^    BLEND_ALPHA_PREMULTIPLY,        \/\/ Blend premultiplied textures considering alpha$/;"	e	enum:__anonfdf2e0de1203
BLEND_CUSTOM	$RAYLIB/raylib.h	/^    BLEND_CUSTOM,                   \/\/ Blend textures using custom src\/dst factors (use rlSet/;"	e	enum:__anonfdf2e0de1203
BLEND_CUSTOM_SEPARATE	$RAYLIB/raylib.h	/^    BLEND_CUSTOM_SEPARATE           \/\/ Blend textures using custom rgb\/alpha separate src\/ds/;"	e	enum:__anonfdf2e0de1203
BLEND_MULTIPLIED	$RAYLIB/raylib.h	/^    BLEND_MULTIPLIED,               \/\/ Blend textures multiplying colors$/;"	e	enum:__anonfdf2e0de1203
BLEND_SUBTRACT_COLORS	$RAYLIB/raylib.h	/^    BLEND_SUBTRACT_COLORS,          \/\/ Blend textures subtracting colors (alternative)$/;"	e	enum:__anonfdf2e0de1203
BLUE	$RAYLIB/raylib.h	/^#define BLUE /;"	d
BORDER	$RAYLIB/raygui.h	/^typedef enum { BORDER = 0, BASE, TEXT, OTHER } GuiPropertyElement;$/;"	e	enum:__anonfd9f18ac1503
BORDER_COLOR_DISABLED	$RAYLIB/raygui.h	/^    BORDER_COLOR_DISABLED,      \/\/ Control border color in STATE_DISABLED$/;"	e	enum:__anonfd9f18ac0703
BORDER_COLOR_FOCUSED	$RAYLIB/raygui.h	/^    BORDER_COLOR_FOCUSED,       \/\/ Control border color in STATE_FOCUSED$/;"	e	enum:__anonfd9f18ac0703
BORDER_COLOR_NORMAL	$RAYLIB/raygui.h	/^    BORDER_COLOR_NORMAL = 0,    \/\/ Control border color in STATE_NORMAL$/;"	e	enum:__anonfd9f18ac0703
BORDER_COLOR_PRESSED	$RAYLIB/raygui.h	/^    BORDER_COLOR_PRESSED,       \/\/ Control border color in STATE_PRESSED$/;"	e	enum:__anonfd9f18ac0703
BORDER_WIDTH	$RAYLIB/raygui.h	/^    BORDER_WIDTH,               \/\/ Control border size, 0 for no border$/;"	e	enum:__anonfd9f18ac0703
BROWN	$RAYLIB/raylib.h	/^#define BROWN /;"	d
BUTTON	$RAYLIB/raygui.h	/^    BUTTON,$/;"	e	enum:__anonfd9f18ac0603
BeginBlendMode	$RAYLIB/raylib.h	/^RLAPI void BeginBlendMode(int mode);                              \/\/ Begin blending mode (alph/;"	p	typeref:typename:RLAPI void	signature:(int mode)
BeginDrawing	$RAYLIB/raylib.h	/^RLAPI void BeginDrawing(void);                                    \/\/ Setup canvas (framebuffer/;"	p	typeref:typename:RLAPI void	signature:(void)
BeginMode2D	$RAYLIB/raylib.h	/^RLAPI void BeginMode2D(Camera2D camera);                          \/\/ Begin 2D mode with custom/;"	p	typeref:typename:RLAPI void	signature:(Camera2D camera)
BeginMode3D	$RAYLIB/raylib.h	/^RLAPI void BeginMode3D(Camera3D camera);                          \/\/ Begin 3D mode with custom/;"	p	typeref:typename:RLAPI void	signature:(Camera3D camera)
BeginScissorMode	$RAYLIB/raylib.h	/^RLAPI void BeginScissorMode(int x, int y, int width, int height); \/\/ Begin scissor mode (defin/;"	p	typeref:typename:RLAPI void	signature:(int x,int y,int width,int height)
BeginShaderMode	$RAYLIB/raylib.h	/^RLAPI void BeginShaderMode(Shader shader);                        \/\/ Begin custom shader drawi/;"	p	typeref:typename:RLAPI void	signature:(Shader shader)
BeginTextureMode	$RAYLIB/raylib.h	/^RLAPI void BeginTextureMode(RenderTexture2D target);              \/\/ Begin drawing to render t/;"	p	typeref:typename:RLAPI void	signature:(RenderTexture2D target)
BeginVrStereoMode	$RAYLIB/raylib.h	/^RLAPI void BeginVrStereoMode(VrStereoConfig config);              \/\/ Begin stereo rendering (r/;"	p	typeref:typename:RLAPI void	signature:(VrStereoConfig config)
BlendMode	$RAYLIB/raylib.h	/^} BlendMode;$/;"	t	typeref:enum:__anonfdf2e0de1203
BoneInfo	$RAYLIB/raylib.h	/^} BoneInfo;$/;"	t	typeref:struct:BoneInfo
BoundingBox	$RAYLIB/raylib.h	/^} BoundingBox;$/;"	t	typeref:struct:BoundingBox
CAMERA_CUSTOM	$RAYLIB/raylib.h	/^    CAMERA_CUSTOM = 0,              \/\/ Camera custom, controlled by user (UpdateCamera() does /;"	e	enum:__anonfdf2e0de1403
CAMERA_FIRST_PERSON	$RAYLIB/raylib.h	/^    CAMERA_FIRST_PERSON,            \/\/ Camera first person$/;"	e	enum:__anonfdf2e0de1403
CAMERA_FREE	$RAYLIB/raylib.h	/^    CAMERA_FREE,                    \/\/ Camera free mode$/;"	e	enum:__anonfdf2e0de1403
CAMERA_ORBITAL	$RAYLIB/raylib.h	/^    CAMERA_ORBITAL,                 \/\/ Camera orbital, around target, zoom supported$/;"	e	enum:__anonfdf2e0de1403
CAMERA_ORTHOGRAPHIC	$RAYLIB/raylib.h	/^    CAMERA_ORTHOGRAPHIC             \/\/ Orthographic projection$/;"	e	enum:__anonfdf2e0de1503
CAMERA_PERSPECTIVE	$RAYLIB/raylib.h	/^    CAMERA_PERSPECTIVE = 0,         \/\/ Perspective projection$/;"	e	enum:__anonfdf2e0de1503
CAMERA_THIRD_PERSON	$RAYLIB/raylib.h	/^    CAMERA_THIRD_PERSON             \/\/ Camera third person$/;"	e	enum:__anonfdf2e0de1403
CHECKBOX	$RAYLIB/raygui.h	/^    CHECKBOX,$/;"	e	enum:__anonfd9f18ac0603
CHECK_BOUNDS_ID	$RAYLIB/raygui.h	/^    #define CHECK_BOUNDS_ID(/;"	d	signature:(src,dst)
CHECK_PADDING	$RAYLIB/raygui.h	/^    CHECK_PADDING = 16          \/\/ CheckBox internal check padding$/;"	e	enum:__anonfd9f18ac0d03
CLITERAL	$RAYLIB/raylib.h	/^    #define CLITERAL(/;"	d	signature:(type)
COLORPICKER	$RAYLIB/raygui.h	/^    COLORPICKER,$/;"	e	enum:__anonfd9f18ac0603
COLOR_SELECTOR_SIZE	$RAYLIB/raygui.h	/^    COLOR_SELECTOR_SIZE = 16,$/;"	e	enum:__anonfd9f18ac1303
COMBOBOX	$RAYLIB/raygui.h	/^    COMBOBOX,$/;"	e	enum:__anonfd9f18ac0603
COMBO_BUTTON_SPACING	$RAYLIB/raygui.h	/^    COMBO_BUTTON_SPACING        \/\/ ComboBox button separation$/;"	e	enum:__anonfd9f18ac0e03
COMBO_BUTTON_WIDTH	$RAYLIB/raygui.h	/^    COMBO_BUTTON_WIDTH = 16,    \/\/ ComboBox right button width$/;"	e	enum:__anonfd9f18ac0e03
CUBEMAP_LAYOUT_AUTO_DETECT	$RAYLIB/raylib.h	/^    CUBEMAP_LAYOUT_AUTO_DETECT = 0,         \/\/ Automatically detect layout type$/;"	e	enum:__anonfdf2e0de1003
CUBEMAP_LAYOUT_CROSS_FOUR_BY_THREE	$RAYLIB/raylib.h	/^    CUBEMAP_LAYOUT_CROSS_FOUR_BY_THREE,     \/\/ Layout is defined by a 4x3 cross with cubemap f/;"	e	enum:__anonfdf2e0de1003
CUBEMAP_LAYOUT_CROSS_THREE_BY_FOUR	$RAYLIB/raylib.h	/^    CUBEMAP_LAYOUT_CROSS_THREE_BY_FOUR,     \/\/ Layout is defined by a 3x4 cross with cubemap f/;"	e	enum:__anonfdf2e0de1003
CUBEMAP_LAYOUT_LINE_HORIZONTAL	$RAYLIB/raylib.h	/^    CUBEMAP_LAYOUT_LINE_HORIZONTAL,         \/\/ Layout is defined by a horizontal line with fac/;"	e	enum:__anonfdf2e0de1003
CUBEMAP_LAYOUT_LINE_VERTICAL	$RAYLIB/raylib.h	/^    CUBEMAP_LAYOUT_LINE_VERTICAL,           \/\/ Layout is defined by a vertical line with faces$/;"	e	enum:__anonfdf2e0de1003
CUBEMAP_LAYOUT_PANORAMA	$RAYLIB/raylib.h	/^    CUBEMAP_LAYOUT_PANORAMA                 \/\/ Layout is defined by a panorama image (equirrec/;"	e	enum:__anonfdf2e0de1003
Camera	$RAYLIB/raylib.h	/^typedef Camera3D Camera;    \/\/ Camera type fallback, defaults to Camera3D$/;"	t	typeref:typename:Camera3D
Camera2D	$RAYLIB/raylib.h	/^} Camera2D;$/;"	t	typeref:struct:Camera2D
Camera3D	$RAYLIB/raylib.h	/^} Camera3D;$/;"	t	typeref:struct:Camera3D
CameraMode	$RAYLIB/raylib.h	/^} CameraMode;$/;"	t	typeref:enum:__anonfdf2e0de1403
CameraProjection	$RAYLIB/raylib.h	/^} CameraProjection;$/;"	t	typeref:enum:__anonfdf2e0de1503
ChangeDirectory	$RAYLIB/raylib.h	/^RLAPI bool ChangeDirectory(const char *dir);                      \/\/ Change working directory,/;"	p	typeref:typename:RLAPI bool	signature:(const char * dir)
CheckCollisionBoxSphere	$RAYLIB/raylib.h	/^RLAPI bool CheckCollisionBoxSphere(BoundingBox box, Vector3 center, float radius);              /;"	p	typeref:typename:RLAPI bool	signature:(BoundingBox box,Vector3 center,float radius)
CheckCollisionBoxes	$RAYLIB/raylib.h	/^RLAPI bool CheckCollisionBoxes(BoundingBox box1, BoundingBox box2);                             /;"	p	typeref:typename:RLAPI bool	signature:(BoundingBox box1,BoundingBox box2)
CheckCollisionCircleRec	$RAYLIB/raylib.h	/^RLAPI bool CheckCollisionCircleRec(Vector2 center, float radius, Rectangle rec);                /;"	p	typeref:typename:RLAPI bool	signature:(Vector2 center,float radius,Rectangle rec)
CheckCollisionCircles	$RAYLIB/raylib.h	/^RLAPI bool CheckCollisionCircles(Vector2 center1, float radius1, Vector2 center2, float radius2)/;"	p	typeref:typename:RLAPI bool	signature:(Vector2 center1,float radius1,Vector2 center2,float radius2)
CheckCollisionLines	$RAYLIB/raylib.h	/^RLAPI bool CheckCollisionLines(Vector2 startPos1, Vector2 endPos1, Vector2 startPos2, Vector2 en/;"	p	typeref:typename:RLAPI bool	signature:(Vector2 startPos1,Vector2 endPos1,Vector2 startPos2,Vector2 endPos2,Vector2 * collisionPoint)
CheckCollisionPointCircle	$RAYLIB/raylib.h	/^RLAPI bool CheckCollisionPointCircle(Vector2 point, Vector2 center, float radius);              /;"	p	typeref:typename:RLAPI bool	signature:(Vector2 point,Vector2 center,float radius)
CheckCollisionPointLine	$RAYLIB/raylib.h	/^RLAPI bool CheckCollisionPointLine(Vector2 point, Vector2 p1, Vector2 p2, int threshold);       /;"	p	typeref:typename:RLAPI bool	signature:(Vector2 point,Vector2 p1,Vector2 p2,int threshold)
CheckCollisionPointPoly	$RAYLIB/raylib.h	/^RLAPI bool CheckCollisionPointPoly(Vector2 point, Vector2 *points, int pointCount);             /;"	p	typeref:typename:RLAPI bool	signature:(Vector2 point,Vector2 * points,int pointCount)
CheckCollisionPointRec	$RAYLIB/raygui.h	/^static bool CheckCollisionPointRec(Vector2 point, Rectangle rec);   \/\/ Check if point is insid/;"	p	typeref:typename:bool	signature:(Vector2 point,Rectangle rec)
CheckCollisionPointRec	$RAYLIB/raylib.h	/^RLAPI bool CheckCollisionPointRec(Vector2 point, Rectangle rec);                                /;"	p	typeref:typename:RLAPI bool	signature:(Vector2 point,Rectangle rec)
CheckCollisionPointTriangle	$RAYLIB/raylib.h	/^RLAPI bool CheckCollisionPointTriangle(Vector2 point, Vector2 p1, Vector2 p2, Vector2 p3);      /;"	p	typeref:typename:RLAPI bool	signature:(Vector2 point,Vector2 p1,Vector2 p2,Vector2 p3)
CheckCollisionRecs	$RAYLIB/raylib.h	/^RLAPI bool CheckCollisionRecs(Rectangle rec1, Rectangle rec2);                                  /;"	p	typeref:typename:RLAPI bool	signature:(Rectangle rec1,Rectangle rec2)
CheckCollisionSpheres	$RAYLIB/raylib.h	/^RLAPI bool CheckCollisionSpheres(Vector3 center1, float radius1, Vector3 center2, float radius2)/;"	p	typeref:typename:RLAPI bool	signature:(Vector3 center1,float radius1,Vector3 center2,float radius2)
Clamp	$RAYLIB/raymath.h	/^RMAPI float Clamp(float value, float min, float max)$/;"	f	typeref:typename:RMAPI float	signature:(float value,float min,float max)
ClearBackground	$RAYLIB/raylib.h	/^RLAPI void ClearBackground(Color color);                          \/\/ Set background color (fra/;"	p	typeref:typename:RLAPI void	signature:(Color color)
ClearWindowState	$RAYLIB/raylib.h	/^RLAPI void ClearWindowState(unsigned int flags);                  \/\/ Clear window configuratio/;"	p	typeref:typename:RLAPI void	signature:(unsigned int flags)
CloseAudioDevice	$RAYLIB/raylib.h	/^RLAPI void CloseAudioDevice(void);                                    \/\/ Close the audio devic/;"	p	typeref:typename:RLAPI void	signature:(void)
CloseWindow	$RAYLIB/raylib.h	/^RLAPI void CloseWindow(void);                                     \/\/ Close window and unload O/;"	p	typeref:typename:RLAPI void	signature:(void)
CodepointToUTF8	$RAYLIB/raygui.h	/^static const char *CodepointToUTF8(int codepoint, int *byteSize);   \/\/ Encode codepoint into U/;"	p	typeref:typename:const char *	signature:(int codepoint,int * byteSize)
CodepointToUTF8	$RAYLIB/raylib.h	/^RLAPI const char *CodepointToUTF8(int codepoint, int *utf8Size);        \/\/ Encode one codepoin/;"	p	typeref:typename:RLAPI const char *	signature:(int codepoint,int * utf8Size)
Color	$RAYLIB/raygui.h	/^    } Color;$/;"	t	typeref:struct:Color
Color	$RAYLIB/raylib.h	/^} Color;$/;"	t	typeref:struct:Color
ColorAlpha	$RAYLIB/raylib.h	/^RLAPI Color ColorAlpha(Color color, float alpha);                           \/\/ Get color with /;"	p	typeref:typename:RLAPI Color	signature:(Color color,float alpha)
ColorAlphaBlend	$RAYLIB/raylib.h	/^RLAPI Color ColorAlphaBlend(Color dst, Color src, Color tint);              \/\/ Get src alpha-b/;"	p	typeref:typename:RLAPI Color	signature:(Color dst,Color src,Color tint)
ColorBrightness	$RAYLIB/raylib.h	/^RLAPI Color ColorBrightness(Color color, float factor);                     \/\/ Get color with /;"	p	typeref:typename:RLAPI Color	signature:(Color color,float factor)
ColorContrast	$RAYLIB/raylib.h	/^RLAPI Color ColorContrast(Color color, float contrast);                     \/\/ Get color with /;"	p	typeref:typename:RLAPI Color	signature:(Color color,float contrast)
ColorFromHSV	$RAYLIB/raylib.h	/^RLAPI Color ColorFromHSV(float hue, float saturation, float value);         \/\/ Get a Color fro/;"	p	typeref:typename:RLAPI Color	signature:(float hue,float saturation,float value)
ColorFromNormalized	$RAYLIB/raylib.h	/^RLAPI Color ColorFromNormalized(Vector4 normalized);                        \/\/ Get Color from /;"	p	typeref:typename:RLAPI Color	signature:(Vector4 normalized)
ColorIsEqual	$RAYLIB/raylib.h	/^RLAPI bool ColorIsEqual(Color col1, Color col2);                            \/\/ Check if two co/;"	p	typeref:typename:RLAPI bool	signature:(Color col1,Color col2)
ColorNormalize	$RAYLIB/raylib.h	/^RLAPI Vector4 ColorNormalize(Color color);                                  \/\/ Get Color norma/;"	p	typeref:typename:RLAPI Vector4	signature:(Color color)
ColorTint	$RAYLIB/raylib.h	/^RLAPI Color ColorTint(Color color, Color tint);                             \/\/ Get color multi/;"	p	typeref:typename:RLAPI Color	signature:(Color color,Color tint)
ColorToHSV	$RAYLIB/raylib.h	/^RLAPI Vector3 ColorToHSV(Color color);                                      \/\/ Get HSV values /;"	p	typeref:typename:RLAPI Vector3	signature:(Color color)
ColorToInt	$RAYLIB/raygui.h	/^static int ColorToInt(Color color);                 \/\/ Returns hexadecimal value for a Color$/;"	p	typeref:typename:int	signature:(Color color)
ColorToInt	$RAYLIB/raylib.h	/^RLAPI int ColorToInt(Color color);                                          \/\/ Get hexadecimal/;"	p	typeref:typename:RLAPI int	signature:(Color color)
CompressData	$RAYLIB/raylib.h	/^RLAPI unsigned char *CompressData(const unsigned char *data, int dataSize, int *compDataSize);  /;"	p	typeref:typename:RLAPI unsigned char *	signature:(const unsigned char * data,int dataSize,int * compDataSize)
ConfigFlags	$RAYLIB/raylib.h	/^} ConfigFlags;$/;"	t	typeref:enum:__anonfdf2e0de0203
ConvertHSVtoRGB	$RAYLIB/raygui.h	/^static Vector3 ConvertHSVtoRGB(Vector3 hsv);                    \/\/ Convert color data from HSV/;"	p	typeref:typename:Vector3	signature:(Vector3 hsv)
ConvertRGBtoHSV	$RAYLIB/raygui.h	/^static Vector3 ConvertRGBtoHSV(Vector3 rgb);                    \/\/ Convert color data from RGB/;"	p	typeref:typename:Vector3	signature:(Vector3 rgb)
CubemapLayout	$RAYLIB/raylib.h	/^} CubemapLayout;$/;"	t	typeref:enum:__anonfdf2e0de1003
DARKBLUE	$RAYLIB/raylib.h	/^#define DARKBLUE /;"	d
DARKBROWN	$RAYLIB/raylib.h	/^#define DARKBROWN /;"	d
DARKGRAY	$RAYLIB/raylib.h	/^#define DARKGRAY /;"	d
DARKGREEN	$RAYLIB/raylib.h	/^#define DARKGREEN /;"	d
DARKPURPLE	$RAYLIB/raylib.h	/^#define DARKPURPLE /;"	d
DEFAULT	$RAYLIB/raygui.h	/^    DEFAULT = 0,$/;"	e	enum:__anonfd9f18ac0603
DEG2RAD	$RAYLIB/raylib.h	/^    #define DEG2RAD /;"	d
DEG2RAD	$RAYLIB/raymath.h	/^    #define DEG2RAD /;"	d
DEG2RAD	$RAYLIB/rlgl.h	/^    #define DEG2RAD /;"	d
DROPDOWNBOX	$RAYLIB/raygui.h	/^    DROPDOWNBOX,$/;"	e	enum:__anonfd9f18ac0603
DROPDOWN_ITEMS_SPACING	$RAYLIB/raygui.h	/^    DROPDOWN_ITEMS_SPACING      \/\/ DropdownBox items separation$/;"	e	enum:__anonfd9f18ac0f03
DecodeDataBase64	$RAYLIB/raylib.h	/^RLAPI unsigned char *DecodeDataBase64(const unsigned char *data, int *outputSize);              /;"	p	typeref:typename:RLAPI unsigned char *	signature:(const unsigned char * data,int * outputSize)
DecompressData	$RAYLIB/raygui.h	/^static unsigned char *DecompressData(const unsigned char *compData, int compDataSize, int *dataS/;"	p	typeref:typename:unsigned char *	signature:(const unsigned char * compData,int compDataSize,int * dataSize)
DecompressData	$RAYLIB/raylib.h	/^RLAPI unsigned char *DecompressData(const unsigned char *compData, int compDataSize, int *dataSi/;"	p	typeref:typename:RLAPI unsigned char *	signature:(const unsigned char * compData,int compDataSize,int * dataSize)
DetachAudioMixedProcessor	$RAYLIB/raylib.h	/^RLAPI void DetachAudioMixedProcessor(AudioCallback processor); \/\/ Detach audio stream processo/;"	p	typeref:typename:RLAPI void	signature:(AudioCallback processor)
DetachAudioStreamProcessor	$RAYLIB/raylib.h	/^RLAPI void DetachAudioStreamProcessor(AudioStream stream, AudioCallback processor); \/\/ Detach /;"	p	typeref:typename:RLAPI void	signature:(AudioStream stream,AudioCallback processor)
DirectoryExists	$RAYLIB/raylib.h	/^RLAPI bool DirectoryExists(const char *dirPath);                  \/\/ Check if a directory path/;"	p	typeref:typename:RLAPI bool	signature:(const char * dirPath)
DisableCursor	$RAYLIB/raylib.h	/^RLAPI void DisableCursor(void);                                   \/\/ Disables cursor (lock cur/;"	p	typeref:typename:RLAPI void	signature:(void)
DisableEventWaiting	$RAYLIB/raylib.h	/^RLAPI void DisableEventWaiting(void);                             \/\/ Disable waiting for event/;"	p	typeref:typename:RLAPI void	signature:(void)
DrawBillboard	$RAYLIB/raylib.h	/^RLAPI void DrawBillboard(Camera camera, Texture2D texture, Vector3 position, float size, Color t/;"	p	typeref:typename:RLAPI void	signature:(Camera camera,Texture2D texture,Vector3 position,float size,Color tint)
DrawBillboardPro	$RAYLIB/raylib.h	/^RLAPI void DrawBillboardPro(Camera camera, Texture2D texture, Rectangle source, Vector3 position/;"	p	typeref:typename:RLAPI void	signature:(Camera camera,Texture2D texture,Rectangle source,Vector3 position,Vector3 up,Vector2 size,Vector2 origin,float rotation,Color tint)
DrawBillboardRec	$RAYLIB/raylib.h	/^RLAPI void DrawBillboardRec(Camera camera, Texture2D texture, Rectangle source, Vector3 position/;"	p	typeref:typename:RLAPI void	signature:(Camera camera,Texture2D texture,Rectangle source,Vector3 position,Vector2 size,Color tint)
DrawBoundingBox	$RAYLIB/raylib.h	/^RLAPI void DrawBoundingBox(BoundingBox box, Color color);                                   \/\//;"	p	typeref:typename:RLAPI void	signature:(BoundingBox box,Color color)
DrawCapsule	$RAYLIB/raylib.h	/^RLAPI void DrawCapsule(Vector3 startPos, Vector3 endPos, float radius, int slices, int rings, Co/;"	p	typeref:typename:RLAPI void	signature:(Vector3 startPos,Vector3 endPos,float radius,int slices,int rings,Color color)
DrawCapsuleWires	$RAYLIB/raylib.h	/^RLAPI void DrawCapsuleWires(Vector3 startPos, Vector3 endPos, float radius, int slices, int ring/;"	p	typeref:typename:RLAPI void	signature:(Vector3 startPos,Vector3 endPos,float radius,int slices,int rings,Color color)
DrawCircle	$RAYLIB/raylib.h	/^RLAPI void DrawCircle(int centerX, int centerY, float radius, Color color);                     /;"	p	typeref:typename:RLAPI void	signature:(int centerX,int centerY,float radius,Color color)
DrawCircle3D	$RAYLIB/raylib.h	/^RLAPI void DrawCircle3D(Vector3 center, float radius, Vector3 rotationAxis, float rotationAngle,/;"	p	typeref:typename:RLAPI void	signature:(Vector3 center,float radius,Vector3 rotationAxis,float rotationAngle,Color color)
DrawCircleGradient	$RAYLIB/raylib.h	/^RLAPI void DrawCircleGradient(int centerX, int centerY, float radius, Color color1, Color color2/;"	p	typeref:typename:RLAPI void	signature:(int centerX,int centerY,float radius,Color color1,Color color2)
DrawCircleLines	$RAYLIB/raylib.h	/^RLAPI void DrawCircleLines(int centerX, int centerY, float radius, Color color);                /;"	p	typeref:typename:RLAPI void	signature:(int centerX,int centerY,float radius,Color color)
DrawCircleLinesV	$RAYLIB/raylib.h	/^RLAPI void DrawCircleLinesV(Vector2 center, float radius, Color color);                         /;"	p	typeref:typename:RLAPI void	signature:(Vector2 center,float radius,Color color)
DrawCircleSector	$RAYLIB/raylib.h	/^RLAPI void DrawCircleSector(Vector2 center, float radius, float startAngle, float endAngle, int /;"	p	typeref:typename:RLAPI void	signature:(Vector2 center,float radius,float startAngle,float endAngle,int segments,Color color)
DrawCircleSectorLines	$RAYLIB/raylib.h	/^RLAPI void DrawCircleSectorLines(Vector2 center, float radius, float startAngle, float endAngle,/;"	p	typeref:typename:RLAPI void	signature:(Vector2 center,float radius,float startAngle,float endAngle,int segments,Color color)
DrawCircleV	$RAYLIB/raylib.h	/^RLAPI void DrawCircleV(Vector2 center, float radius, Color color);                              /;"	p	typeref:typename:RLAPI void	signature:(Vector2 center,float radius,Color color)
DrawCube	$RAYLIB/raylib.h	/^RLAPI void DrawCube(Vector3 position, float width, float height, float length, Color color);    /;"	p	typeref:typename:RLAPI void	signature:(Vector3 position,float width,float height,float length,Color color)
DrawCubeV	$RAYLIB/raylib.h	/^RLAPI void DrawCubeV(Vector3 position, Vector3 size, Color color);                              /;"	p	typeref:typename:RLAPI void	signature:(Vector3 position,Vector3 size,Color color)
DrawCubeWires	$RAYLIB/raylib.h	/^RLAPI void DrawCubeWires(Vector3 position, float width, float height, float length, Color color)/;"	p	typeref:typename:RLAPI void	signature:(Vector3 position,float width,float height,float length,Color color)
DrawCubeWiresV	$RAYLIB/raylib.h	/^RLAPI void DrawCubeWiresV(Vector3 position, Vector3 size, Color color);                         /;"	p	typeref:typename:RLAPI void	signature:(Vector3 position,Vector3 size,Color color)
DrawCylinder	$RAYLIB/raylib.h	/^RLAPI void DrawCylinder(Vector3 position, float radiusTop, float radiusBottom, float height, int/;"	p	typeref:typename:RLAPI void	signature:(Vector3 position,float radiusTop,float radiusBottom,float height,int slices,Color color)
DrawCylinderEx	$RAYLIB/raylib.h	/^RLAPI void DrawCylinderEx(Vector3 startPos, Vector3 endPos, float startRadius, float endRadius, /;"	p	typeref:typename:RLAPI void	signature:(Vector3 startPos,Vector3 endPos,float startRadius,float endRadius,int sides,Color color)
DrawCylinderWires	$RAYLIB/raylib.h	/^RLAPI void DrawCylinderWires(Vector3 position, float radiusTop, float radiusBottom, float height/;"	p	typeref:typename:RLAPI void	signature:(Vector3 position,float radiusTop,float radiusBottom,float height,int slices,Color color)
DrawCylinderWiresEx	$RAYLIB/raylib.h	/^RLAPI void DrawCylinderWiresEx(Vector3 startPos, Vector3 endPos, float startRadius, float endRad/;"	p	typeref:typename:RLAPI void	signature:(Vector3 startPos,Vector3 endPos,float startRadius,float endRadius,int sides,Color color)
DrawEllipse	$RAYLIB/raylib.h	/^RLAPI void DrawEllipse(int centerX, int centerY, float radiusH, float radiusV, Color color);    /;"	p	typeref:typename:RLAPI void	signature:(int centerX,int centerY,float radiusH,float radiusV,Color color)
DrawEllipseLines	$RAYLIB/raylib.h	/^RLAPI void DrawEllipseLines(int centerX, int centerY, float radiusH, float radiusV, Color color)/;"	p	typeref:typename:RLAPI void	signature:(int centerX,int centerY,float radiusH,float radiusV,Color color)
DrawFPS	$RAYLIB/raylib.h	/^RLAPI void DrawFPS(int posX, int posY);                                                     \/\//;"	p	typeref:typename:RLAPI void	signature:(int posX,int posY)
DrawGrid	$RAYLIB/raylib.h	/^RLAPI void DrawGrid(int slices, float spacing);                                                 /;"	p	typeref:typename:RLAPI void	signature:(int slices,float spacing)
DrawLine	$RAYLIB/raylib.h	/^RLAPI void DrawLine(int startPosX, int startPosY, int endPosX, int endPosY, Color color);       /;"	p	typeref:typename:RLAPI void	signature:(int startPosX,int startPosY,int endPosX,int endPosY,Color color)
DrawLine3D	$RAYLIB/raylib.h	/^RLAPI void DrawLine3D(Vector3 startPos, Vector3 endPos, Color color);                           /;"	p	typeref:typename:RLAPI void	signature:(Vector3 startPos,Vector3 endPos,Color color)
DrawLineBezier	$RAYLIB/raylib.h	/^RLAPI void DrawLineBezier(Vector2 startPos, Vector2 endPos, float thick, Color color);          /;"	p	typeref:typename:RLAPI void	signature:(Vector2 startPos,Vector2 endPos,float thick,Color color)
DrawLineEx	$RAYLIB/raylib.h	/^RLAPI void DrawLineEx(Vector2 startPos, Vector2 endPos, float thick, Color color);              /;"	p	typeref:typename:RLAPI void	signature:(Vector2 startPos,Vector2 endPos,float thick,Color color)
DrawLineStrip	$RAYLIB/raylib.h	/^RLAPI void DrawLineStrip(Vector2 *points, int pointCount, Color color);                         /;"	p	typeref:typename:RLAPI void	signature:(Vector2 * points,int pointCount,Color color)
DrawLineV	$RAYLIB/raylib.h	/^RLAPI void DrawLineV(Vector2 startPos, Vector2 endPos, Color color);                            /;"	p	typeref:typename:RLAPI void	signature:(Vector2 startPos,Vector2 endPos,Color color)
DrawMesh	$RAYLIB/raylib.h	/^RLAPI void DrawMesh(Mesh mesh, Material material, Matrix transform);                        \/\//;"	p	typeref:typename:RLAPI void	signature:(Mesh mesh,Material material,Matrix transform)
DrawMeshInstanced	$RAYLIB/raylib.h	/^RLAPI void DrawMeshInstanced(Mesh mesh, Material material, const Matrix *transforms, int instanc/;"	p	typeref:typename:RLAPI void	signature:(Mesh mesh,Material material,const Matrix * transforms,int instances)
DrawModel	$RAYLIB/raylib.h	/^RLAPI void DrawModel(Model model, Vector3 position, float scale, Color tint);               \/\//;"	p	typeref:typename:RLAPI void	signature:(Model model,Vector3 position,float scale,Color tint)
DrawModelEx	$RAYLIB/raylib.h	/^RLAPI void DrawModelEx(Model model, Vector3 position, Vector3 rotationAxis, float rotationAngle,/;"	p	typeref:typename:RLAPI void	signature:(Model model,Vector3 position,Vector3 rotationAxis,float rotationAngle,Vector3 scale,Color tint)
DrawModelWires	$RAYLIB/raylib.h	/^RLAPI void DrawModelWires(Model model, Vector3 position, float scale, Color tint);          \/\//;"	p	typeref:typename:RLAPI void	signature:(Model model,Vector3 position,float scale,Color tint)
DrawModelWiresEx	$RAYLIB/raylib.h	/^RLAPI void DrawModelWiresEx(Model model, Vector3 position, Vector3 rotationAxis, float rotationA/;"	p	typeref:typename:RLAPI void	signature:(Model model,Vector3 position,Vector3 rotationAxis,float rotationAngle,Vector3 scale,Color tint)
DrawPixel	$RAYLIB/raylib.h	/^RLAPI void DrawPixel(int posX, int posY, Color color);                                          /;"	p	typeref:typename:RLAPI void	signature:(int posX,int posY,Color color)
DrawPixelV	$RAYLIB/raylib.h	/^RLAPI void DrawPixelV(Vector2 position, Color color);                                           /;"	p	typeref:typename:RLAPI void	signature:(Vector2 position,Color color)
DrawPlane	$RAYLIB/raylib.h	/^RLAPI void DrawPlane(Vector3 centerPos, Vector2 size, Color color);                             /;"	p	typeref:typename:RLAPI void	signature:(Vector3 centerPos,Vector2 size,Color color)
DrawPoint3D	$RAYLIB/raylib.h	/^RLAPI void DrawPoint3D(Vector3 position, Color color);                                          /;"	p	typeref:typename:RLAPI void	signature:(Vector3 position,Color color)
DrawPoly	$RAYLIB/raylib.h	/^RLAPI void DrawPoly(Vector2 center, int sides, float radius, float rotation, Color color);      /;"	p	typeref:typename:RLAPI void	signature:(Vector2 center,int sides,float radius,float rotation,Color color)
DrawPolyLines	$RAYLIB/raylib.h	/^RLAPI void DrawPolyLines(Vector2 center, int sides, float radius, float rotation, Color color); /;"	p	typeref:typename:RLAPI void	signature:(Vector2 center,int sides,float radius,float rotation,Color color)
DrawPolyLinesEx	$RAYLIB/raylib.h	/^RLAPI void DrawPolyLinesEx(Vector2 center, int sides, float radius, float rotation, float lineTh/;"	p	typeref:typename:RLAPI void	signature:(Vector2 center,int sides,float radius,float rotation,float lineThick,Color color)
DrawRay	$RAYLIB/raylib.h	/^RLAPI void DrawRay(Ray ray, Color color);                                                       /;"	p	typeref:typename:RLAPI void	signature:(Ray ray,Color color)
DrawRectangle	$RAYLIB/raygui.h	/^static void DrawRectangle(int x, int y, int width, int height, Color color);        \/\/ -- GuiD/;"	p	typeref:typename:void	signature:(int x,int y,int width,int height,Color color)
DrawRectangle	$RAYLIB/raylib.h	/^RLAPI void DrawRectangle(int posX, int posY, int width, int height, Color color);               /;"	p	typeref:typename:RLAPI void	signature:(int posX,int posY,int width,int height,Color color)
DrawRectangleGradientEx	$RAYLIB/raygui.h	/^static void DrawRectangleGradientEx(Rectangle rec, Color col1, Color col2, Color col3, Color col/;"	p	typeref:typename:void	signature:(Rectangle rec,Color col1,Color col2,Color col3,Color col4)
DrawRectangleGradientEx	$RAYLIB/raylib.h	/^RLAPI void DrawRectangleGradientEx(Rectangle rec, Color col1, Color col2, Color col3, Color col4/;"	p	typeref:typename:RLAPI void	signature:(Rectangle rec,Color col1,Color col2,Color col3,Color col4)
DrawRectangleGradientH	$RAYLIB/raylib.h	/^RLAPI void DrawRectangleGradientH(int posX, int posY, int width, int height, Color color1, Color/;"	p	typeref:typename:RLAPI void	signature:(int posX,int posY,int width,int height,Color color1,Color color2)
DrawRectangleGradientV	$RAYLIB/raygui.h	/^static void DrawRectangleGradientV(int posX, int posY, int width, int height, Color color1, Colo/;"	p	typeref:typename:void	signature:(int posX,int posY,int width,int height,Color color1,Color color2)
DrawRectangleGradientV	$RAYLIB/raylib.h	/^RLAPI void DrawRectangleGradientV(int posX, int posY, int width, int height, Color color1, Color/;"	p	typeref:typename:RLAPI void	signature:(int posX,int posY,int width,int height,Color color1,Color color2)
DrawRectangleLines	$RAYLIB/raylib.h	/^RLAPI void DrawRectangleLines(int posX, int posY, int width, int height, Color color);          /;"	p	typeref:typename:RLAPI void	signature:(int posX,int posY,int width,int height,Color color)
DrawRectangleLinesEx	$RAYLIB/raylib.h	/^RLAPI void DrawRectangleLinesEx(Rectangle rec, float lineThick, Color color);                   /;"	p	typeref:typename:RLAPI void	signature:(Rectangle rec,float lineThick,Color color)
DrawRectanglePro	$RAYLIB/raylib.h	/^RLAPI void DrawRectanglePro(Rectangle rec, Vector2 origin, float rotation, Color color);        /;"	p	typeref:typename:RLAPI void	signature:(Rectangle rec,Vector2 origin,float rotation,Color color)
DrawRectangleRec	$RAYLIB/raylib.h	/^RLAPI void DrawRectangleRec(Rectangle rec, Color color);                                        /;"	p	typeref:typename:RLAPI void	signature:(Rectangle rec,Color color)
DrawRectangleRounded	$RAYLIB/raylib.h	/^RLAPI void DrawRectangleRounded(Rectangle rec, float roundness, int segments, Color color);     /;"	p	typeref:typename:RLAPI void	signature:(Rectangle rec,float roundness,int segments,Color color)
DrawRectangleRoundedLines	$RAYLIB/raylib.h	/^RLAPI void DrawRectangleRoundedLines(Rectangle rec, float roundness, int segments, Color color);/;"	p	typeref:typename:RLAPI void	signature:(Rectangle rec,float roundness,int segments,Color color)
DrawRectangleRoundedLinesEx	$RAYLIB/raylib.h	/^RLAPI void DrawRectangleRoundedLinesEx(Rectangle rec, float roundness, int segments, float lineT/;"	p	typeref:typename:RLAPI void	signature:(Rectangle rec,float roundness,int segments,float lineThick,Color color)
DrawRectangleV	$RAYLIB/raylib.h	/^RLAPI void DrawRectangleV(Vector2 position, Vector2 size, Color color);                         /;"	p	typeref:typename:RLAPI void	signature:(Vector2 position,Vector2 size,Color color)
DrawRing	$RAYLIB/raylib.h	/^RLAPI void DrawRing(Vector2 center, float innerRadius, float outerRadius, float startAngle, floa/;"	p	typeref:typename:RLAPI void	signature:(Vector2 center,float innerRadius,float outerRadius,float startAngle,float endAngle,int segments,Color color)
DrawRingLines	$RAYLIB/raylib.h	/^RLAPI void DrawRingLines(Vector2 center, float innerRadius, float outerRadius, float startAngle,/;"	p	typeref:typename:RLAPI void	signature:(Vector2 center,float innerRadius,float outerRadius,float startAngle,float endAngle,int segments,Color color)
DrawSphere	$RAYLIB/raylib.h	/^RLAPI void DrawSphere(Vector3 centerPos, float radius, Color color);                            /;"	p	typeref:typename:RLAPI void	signature:(Vector3 centerPos,float radius,Color color)
DrawSphereEx	$RAYLIB/raylib.h	/^RLAPI void DrawSphereEx(Vector3 centerPos, float radius, int rings, int slices, Color color);   /;"	p	typeref:typename:RLAPI void	signature:(Vector3 centerPos,float radius,int rings,int slices,Color color)
DrawSphereWires	$RAYLIB/raylib.h	/^RLAPI void DrawSphereWires(Vector3 centerPos, float radius, int rings, int slices, Color color);/;"	p	typeref:typename:RLAPI void	signature:(Vector3 centerPos,float radius,int rings,int slices,Color color)
DrawSplineBasis	$RAYLIB/raylib.h	/^RLAPI void DrawSplineBasis(Vector2 *points, int pointCount, float thick, Color color);          /;"	p	typeref:typename:RLAPI void	signature:(Vector2 * points,int pointCount,float thick,Color color)
DrawSplineBezierCubic	$RAYLIB/raylib.h	/^RLAPI void DrawSplineBezierCubic(Vector2 *points, int pointCount, float thick, Color color);    /;"	p	typeref:typename:RLAPI void	signature:(Vector2 * points,int pointCount,float thick,Color color)
DrawSplineBezierQuadratic	$RAYLIB/raylib.h	/^RLAPI void DrawSplineBezierQuadratic(Vector2 *points, int pointCount, float thick, Color color);/;"	p	typeref:typename:RLAPI void	signature:(Vector2 * points,int pointCount,float thick,Color color)
DrawSplineCatmullRom	$RAYLIB/raylib.h	/^RLAPI void DrawSplineCatmullRom(Vector2 *points, int pointCount, float thick, Color color);     /;"	p	typeref:typename:RLAPI void	signature:(Vector2 * points,int pointCount,float thick,Color color)
DrawSplineLinear	$RAYLIB/raylib.h	/^RLAPI void DrawSplineLinear(Vector2 *points, int pointCount, float thick, Color color);         /;"	p	typeref:typename:RLAPI void	signature:(Vector2 * points,int pointCount,float thick,Color color)
DrawSplineSegmentBasis	$RAYLIB/raylib.h	/^RLAPI void DrawSplineSegmentBasis(Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, float thick, C/;"	p	typeref:typename:RLAPI void	signature:(Vector2 p1,Vector2 p2,Vector2 p3,Vector2 p4,float thick,Color color)
DrawSplineSegmentBezierCubic	$RAYLIB/raylib.h	/^RLAPI void DrawSplineSegmentBezierCubic(Vector2 p1, Vector2 c2, Vector2 c3, Vector2 p4, float th/;"	p	typeref:typename:RLAPI void	signature:(Vector2 p1,Vector2 c2,Vector2 c3,Vector2 p4,float thick,Color color)
DrawSplineSegmentBezierQuadratic	$RAYLIB/raylib.h	/^RLAPI void DrawSplineSegmentBezierQuadratic(Vector2 p1, Vector2 c2, Vector2 p3, float thick, Col/;"	p	typeref:typename:RLAPI void	signature:(Vector2 p1,Vector2 c2,Vector2 p3,float thick,Color color)
DrawSplineSegmentCatmullRom	$RAYLIB/raylib.h	/^RLAPI void DrawSplineSegmentCatmullRom(Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, float thi/;"	p	typeref:typename:RLAPI void	signature:(Vector2 p1,Vector2 p2,Vector2 p3,Vector2 p4,float thick,Color color)
DrawSplineSegmentLinear	$RAYLIB/raylib.h	/^RLAPI void DrawSplineSegmentLinear(Vector2 p1, Vector2 p2, float thick, Color color);           /;"	p	typeref:typename:RLAPI void	signature:(Vector2 p1,Vector2 p2,float thick,Color color)
DrawText	$RAYLIB/raylib.h	/^RLAPI void DrawText(const char *text, int posX, int posY, int fontSize, Color color);       \/\//;"	p	typeref:typename:RLAPI void	signature:(const char * text,int posX,int posY,int fontSize,Color color)
DrawTextCodepoint	$RAYLIB/raylib.h	/^RLAPI void DrawTextCodepoint(Font font, int codepoint, Vector2 position, float fontSize, Color t/;"	p	typeref:typename:RLAPI void	signature:(Font font,int codepoint,Vector2 position,float fontSize,Color tint)
DrawTextCodepoints	$RAYLIB/raylib.h	/^RLAPI void DrawTextCodepoints(Font font, const int *codepoints, int codepointCount, Vector2 posi/;"	p	typeref:typename:RLAPI void	signature:(Font font,const int * codepoints,int codepointCount,Vector2 position,float fontSize,float spacing,Color tint)
DrawTextEx	$RAYLIB/raylib.h	/^RLAPI void DrawTextEx(Font font, const char *text, Vector2 position, float fontSize, float spaci/;"	p	typeref:typename:RLAPI void	signature:(Font font,const char * text,Vector2 position,float fontSize,float spacing,Color tint)
DrawTextPro	$RAYLIB/raylib.h	/^RLAPI void DrawTextPro(Font font, const char *text, Vector2 position, Vector2 origin, float rota/;"	p	typeref:typename:RLAPI void	signature:(Font font,const char * text,Vector2 position,Vector2 origin,float rotation,float fontSize,float spacing,Color tint)
DrawTexture	$RAYLIB/raylib.h	/^RLAPI void DrawTexture(Texture2D texture, int posX, int posY, Color tint);                      /;"	p	typeref:typename:RLAPI void	signature:(Texture2D texture,int posX,int posY,Color tint)
DrawTextureEx	$RAYLIB/raylib.h	/^RLAPI void DrawTextureEx(Texture2D texture, Vector2 position, float rotation, float scale, Color/;"	p	typeref:typename:RLAPI void	signature:(Texture2D texture,Vector2 position,float rotation,float scale,Color tint)
DrawTextureNPatch	$RAYLIB/raylib.h	/^RLAPI void DrawTextureNPatch(Texture2D texture, NPatchInfo nPatchInfo, Rectangle dest, Vector2 o/;"	p	typeref:typename:RLAPI void	signature:(Texture2D texture,NPatchInfo nPatchInfo,Rectangle dest,Vector2 origin,float rotation,Color tint)
DrawTexturePro	$RAYLIB/raylib.h	/^RLAPI void DrawTexturePro(Texture2D texture, Rectangle source, Rectangle dest, Vector2 origin, f/;"	p	typeref:typename:RLAPI void	signature:(Texture2D texture,Rectangle source,Rectangle dest,Vector2 origin,float rotation,Color tint)
DrawTextureRec	$RAYLIB/raylib.h	/^RLAPI void DrawTextureRec(Texture2D texture, Rectangle source, Vector2 position, Color tint);   /;"	p	typeref:typename:RLAPI void	signature:(Texture2D texture,Rectangle source,Vector2 position,Color tint)
DrawTextureV	$RAYLIB/raylib.h	/^RLAPI void DrawTextureV(Texture2D texture, Vector2 position, Color tint);                       /;"	p	typeref:typename:RLAPI void	signature:(Texture2D texture,Vector2 position,Color tint)
DrawTriangle	$RAYLIB/raylib.h	/^RLAPI void DrawTriangle(Vector2 v1, Vector2 v2, Vector2 v3, Color color);                       /;"	p	typeref:typename:RLAPI void	signature:(Vector2 v1,Vector2 v2,Vector2 v3,Color color)
DrawTriangle3D	$RAYLIB/raylib.h	/^RLAPI void DrawTriangle3D(Vector3 v1, Vector3 v2, Vector3 v3, Color color);                     /;"	p	typeref:typename:RLAPI void	signature:(Vector3 v1,Vector3 v2,Vector3 v3,Color color)
DrawTriangleFan	$RAYLIB/raylib.h	/^RLAPI void DrawTriangleFan(Vector2 *points, int pointCount, Color color);                       /;"	p	typeref:typename:RLAPI void	signature:(Vector2 * points,int pointCount,Color color)
DrawTriangleLines	$RAYLIB/raylib.h	/^RLAPI void DrawTriangleLines(Vector2 v1, Vector2 v2, Vector2 v3, Color color);                  /;"	p	typeref:typename:RLAPI void	signature:(Vector2 v1,Vector2 v2,Vector2 v3,Color color)
DrawTriangleStrip	$RAYLIB/raylib.h	/^RLAPI void DrawTriangleStrip(Vector2 *points, int pointCount, Color color);                     /;"	p	typeref:typename:RLAPI void	signature:(Vector2 * points,int pointCount,Color color)
DrawTriangleStrip3D	$RAYLIB/raylib.h	/^RLAPI void DrawTriangleStrip3D(Vector3 *points, int pointCount, Color color);                   /;"	p	typeref:typename:RLAPI void	signature:(Vector3 * points,int pointCount,Color color)
EPSILON	$RAYLIB/raymath.h	/^    #define EPSILON /;"	d
EnableCursor	$RAYLIB/raylib.h	/^RLAPI void EnableCursor(void);                                    \/\/ Enables cursor (unlock cu/;"	p	typeref:typename:RLAPI void	signature:(void)
EnableEventWaiting	$RAYLIB/raylib.h	/^RLAPI void EnableEventWaiting(void);                              \/\/ Enable waiting for events/;"	p	typeref:typename:RLAPI void	signature:(void)
EncodeDataBase64	$RAYLIB/raylib.h	/^RLAPI char *EncodeDataBase64(const unsigned char *data, int dataSize, int *outputSize);         /;"	p	typeref:typename:RLAPI char *	signature:(const unsigned char * data,int dataSize,int * outputSize)
EndBlendMode	$RAYLIB/raylib.h	/^RLAPI void EndBlendMode(void);                                    \/\/ End blending mode (reset /;"	p	typeref:typename:RLAPI void	signature:(void)
EndDrawing	$RAYLIB/raylib.h	/^RLAPI void EndDrawing(void);                                      \/\/ End canvas drawing and sw/;"	p	typeref:typename:RLAPI void	signature:(void)
EndMode2D	$RAYLIB/raylib.h	/^RLAPI void EndMode2D(void);                                       \/\/ Ends 2D mode with custom /;"	p	typeref:typename:RLAPI void	signature:(void)
EndMode3D	$RAYLIB/raylib.h	/^RLAPI void EndMode3D(void);                                       \/\/ Ends 3D mode and returns /;"	p	typeref:typename:RLAPI void	signature:(void)
EndScissorMode	$RAYLIB/raylib.h	/^RLAPI void EndScissorMode(void);                                  \/\/ End scissor mode$/;"	p	typeref:typename:RLAPI void	signature:(void)
EndShaderMode	$RAYLIB/raylib.h	/^RLAPI void EndShaderMode(void);                                   \/\/ End custom shader drawing/;"	p	typeref:typename:RLAPI void	signature:(void)
EndTextureMode	$RAYLIB/raylib.h	/^RLAPI void EndTextureMode(void);                                  \/\/ Ends drawing to render te/;"	p	typeref:typename:RLAPI void	signature:(void)
EndVrStereoMode	$RAYLIB/raylib.h	/^RLAPI void EndVrStereoMode(void);                                 \/\/ End stereo rendering (req/;"	p	typeref:typename:RLAPI void	signature:(void)
ExportAutomationEventList	$RAYLIB/raylib.h	/^RLAPI bool ExportAutomationEventList(AutomationEventList list, const char *fileName);   \/\/ Exp/;"	p	typeref:typename:RLAPI bool	signature:(AutomationEventList list,const char * fileName)
ExportDataAsCode	$RAYLIB/raylib.h	/^RLAPI bool ExportDataAsCode(const unsigned char *data, int dataSize, const char *fileName); \/\//;"	p	typeref:typename:RLAPI bool	signature:(const unsigned char * data,int dataSize,const char * fileName)
ExportFontAsCode	$RAYLIB/raylib.h	/^RLAPI bool ExportFontAsCode(Font font, const char *fileName);                               \/\//;"	p	typeref:typename:RLAPI bool	signature:(Font font,const char * fileName)
ExportImage	$RAYLIB/raylib.h	/^RLAPI bool ExportImage(Image image, const char *fileName);                                      /;"	p	typeref:typename:RLAPI bool	signature:(Image image,const char * fileName)
ExportImageAsCode	$RAYLIB/raylib.h	/^RLAPI bool ExportImageAsCode(Image image, const char *fileName);                                /;"	p	typeref:typename:RLAPI bool	signature:(Image image,const char * fileName)
ExportImageToMemory	$RAYLIB/raylib.h	/^RLAPI unsigned char *ExportImageToMemory(Image image, const char *fileType, int *fileSize);     /;"	p	typeref:typename:RLAPI unsigned char *	signature:(Image image,const char * fileType,int * fileSize)
ExportMesh	$RAYLIB/raylib.h	/^RLAPI bool ExportMesh(Mesh mesh, const char *fileName);                                     \/\//;"	p	typeref:typename:RLAPI bool	signature:(Mesh mesh,const char * fileName)
ExportMeshAsCode	$RAYLIB/raylib.h	/^RLAPI bool ExportMeshAsCode(Mesh mesh, const char *fileName);                               \/\//;"	p	typeref:typename:RLAPI bool	signature:(Mesh mesh,const char * fileName)
ExportWave	$RAYLIB/raylib.h	/^RLAPI bool ExportWave(Wave wave, const char *fileName);               \/\/ Export wave data to f/;"	p	typeref:typename:RLAPI bool	signature:(Wave wave,const char * fileName)
ExportWaveAsCode	$RAYLIB/raylib.h	/^RLAPI bool ExportWaveAsCode(Wave wave, const char *fileName);         \/\/ Export wave sample da/;"	p	typeref:typename:RLAPI bool	signature:(Wave wave,const char * fileName)
ExtSupported	$RAYLIB/rlgl.h	/^    } ExtSupported;     \/\/ Extensions supported flags$/;"	m	struct:rlglData	typeref:struct:rlglData::__anon19a7bfac0e08
FLAG_BORDERLESS_WINDOWED_MODE	$RAYLIB/raylib.h	/^    FLAG_BORDERLESS_WINDOWED_MODE = 0x00008000, \/\/ Set to run program in borderless windowed m/;"	e	enum:__anonfdf2e0de0203
FLAG_FULLSCREEN_MODE	$RAYLIB/raylib.h	/^    FLAG_FULLSCREEN_MODE    = 0x00000002,   \/\/ Set to run program in fullscreen$/;"	e	enum:__anonfdf2e0de0203
FLAG_INTERLACED_HINT	$RAYLIB/raylib.h	/^    FLAG_INTERLACED_HINT    = 0x00010000    \/\/ Set to try enabling interlaced video format (fo/;"	e	enum:__anonfdf2e0de0203
FLAG_MSAA_4X_HINT	$RAYLIB/raylib.h	/^    FLAG_MSAA_4X_HINT       = 0x00000020,   \/\/ Set to try enabling MSAA 4X$/;"	e	enum:__anonfdf2e0de0203
FLAG_VSYNC_HINT	$RAYLIB/raylib.h	/^    FLAG_VSYNC_HINT         = 0x00000040,   \/\/ Set to try enabling V-Sync on GPU$/;"	e	enum:__anonfdf2e0de0203
FLAG_WINDOW_ALWAYS_RUN	$RAYLIB/raylib.h	/^    FLAG_WINDOW_ALWAYS_RUN  = 0x00000100,   \/\/ Set to allow windows running while minimized$/;"	e	enum:__anonfdf2e0de0203
FLAG_WINDOW_HIDDEN	$RAYLIB/raylib.h	/^    FLAG_WINDOW_HIDDEN      = 0x00000080,   \/\/ Set to hide window$/;"	e	enum:__anonfdf2e0de0203
FLAG_WINDOW_HIGHDPI	$RAYLIB/raylib.h	/^    FLAG_WINDOW_HIGHDPI     = 0x00002000,   \/\/ Set to support HighDPI$/;"	e	enum:__anonfdf2e0de0203
FLAG_WINDOW_MAXIMIZED	$RAYLIB/raylib.h	/^    FLAG_WINDOW_MAXIMIZED   = 0x00000400,   \/\/ Set to maximize window (expanded to monitor)$/;"	e	enum:__anonfdf2e0de0203
FLAG_WINDOW_MINIMIZED	$RAYLIB/raylib.h	/^    FLAG_WINDOW_MINIMIZED   = 0x00000200,   \/\/ Set to minimize window (iconify)$/;"	e	enum:__anonfdf2e0de0203
FLAG_WINDOW_MOUSE_PASSTHROUGH	$RAYLIB/raylib.h	/^    FLAG_WINDOW_MOUSE_PASSTHROUGH = 0x00004000, \/\/ Set to support mouse passthrough, only supp/;"	e	enum:__anonfdf2e0de0203
FLAG_WINDOW_RESIZABLE	$RAYLIB/raylib.h	/^    FLAG_WINDOW_RESIZABLE   = 0x00000004,   \/\/ Set to allow resizable window$/;"	e	enum:__anonfdf2e0de0203
FLAG_WINDOW_TOPMOST	$RAYLIB/raylib.h	/^    FLAG_WINDOW_TOPMOST     = 0x00001000,   \/\/ Set to window always on top$/;"	e	enum:__anonfdf2e0de0203
FLAG_WINDOW_TRANSPARENT	$RAYLIB/raylib.h	/^    FLAG_WINDOW_TRANSPARENT = 0x00000010,   \/\/ Set to allow transparent framebuffer$/;"	e	enum:__anonfdf2e0de0203
FLAG_WINDOW_UNDECORATED	$RAYLIB/raylib.h	/^    FLAG_WINDOW_UNDECORATED = 0x00000008,   \/\/ Set to disable window decoration (frame and but/;"	e	enum:__anonfdf2e0de0203
FLAG_WINDOW_UNFOCUSED	$RAYLIB/raylib.h	/^    FLAG_WINDOW_UNFOCUSED   = 0x00000800,   \/\/ Set to window non focused$/;"	e	enum:__anonfdf2e0de0203
FONT_BITMAP	$RAYLIB/raylib.h	/^    FONT_BITMAP,                    \/\/ Bitmap font generation, no anti-aliasing$/;"	e	enum:__anonfdf2e0de1103
FONT_DEFAULT	$RAYLIB/raylib.h	/^    FONT_DEFAULT = 0,               \/\/ Default font generation, anti-aliased$/;"	e	enum:__anonfdf2e0de1103
FONT_SDF	$RAYLIB/raylib.h	/^    FONT_SDF                        \/\/ SDF font generation, requires external shader$/;"	e	enum:__anonfdf2e0de1103
Fade	$RAYLIB/raylib.h	/^RLAPI Color Fade(Color color, float alpha);                                 \/\/ Get color with /;"	p	typeref:typename:RLAPI Color	signature:(Color color,float alpha)
FileExists	$RAYLIB/raylib.h	/^RLAPI bool FileExists(const char *fileName);                      \/\/ Check if file exists$/;"	p	typeref:typename:RLAPI bool	signature:(const char * fileName)
FilePathList	$RAYLIB/raylib.h	/^} FilePathList;$/;"	t	typeref:struct:FilePathList
FloatEquals	$RAYLIB/raymath.h	/^RMAPI int FloatEquals(float x, float y)$/;"	f	typeref:typename:RMAPI int	signature:(float x,float y)
Font	$RAYLIB/raygui.h	/^    } Font;$/;"	t	typeref:struct:Font
Font	$RAYLIB/raylib.h	/^} Font;$/;"	t	typeref:struct:Font
FontType	$RAYLIB/raylib.h	/^} FontType;$/;"	t	typeref:enum:__anonfdf2e0de1103
GAMEPAD_AXIS_LEFT_TRIGGER	$RAYLIB/raylib.h	/^    GAMEPAD_AXIS_LEFT_TRIGGER  = 4,     \/\/ Gamepad back trigger left, pressure level: [1..-1]$/;"	e	enum:__anonfdf2e0de0803
GAMEPAD_AXIS_LEFT_X	$RAYLIB/raylib.h	/^    GAMEPAD_AXIS_LEFT_X        = 0,     \/\/ Gamepad left stick X axis$/;"	e	enum:__anonfdf2e0de0803
GAMEPAD_AXIS_LEFT_Y	$RAYLIB/raylib.h	/^    GAMEPAD_AXIS_LEFT_Y        = 1,     \/\/ Gamepad left stick Y axis$/;"	e	enum:__anonfdf2e0de0803
GAMEPAD_AXIS_RIGHT_TRIGGER	$RAYLIB/raylib.h	/^    GAMEPAD_AXIS_RIGHT_TRIGGER = 5      \/\/ Gamepad back trigger right, pressure level: [1..-1]$/;"	e	enum:__anonfdf2e0de0803
GAMEPAD_AXIS_RIGHT_X	$RAYLIB/raylib.h	/^    GAMEPAD_AXIS_RIGHT_X       = 2,     \/\/ Gamepad right stick X axis$/;"	e	enum:__anonfdf2e0de0803
GAMEPAD_AXIS_RIGHT_Y	$RAYLIB/raylib.h	/^    GAMEPAD_AXIS_RIGHT_Y       = 3,     \/\/ Gamepad right stick Y axis$/;"	e	enum:__anonfdf2e0de0803
GAMEPAD_BUTTON_LEFT_FACE_DOWN	$RAYLIB/raylib.h	/^    GAMEPAD_BUTTON_LEFT_FACE_DOWN,      \/\/ Gamepad left DPAD down button$/;"	e	enum:__anonfdf2e0de0703
GAMEPAD_BUTTON_LEFT_FACE_LEFT	$RAYLIB/raylib.h	/^    GAMEPAD_BUTTON_LEFT_FACE_LEFT,      \/\/ Gamepad left DPAD left button$/;"	e	enum:__anonfdf2e0de0703
GAMEPAD_BUTTON_LEFT_FACE_RIGHT	$RAYLIB/raylib.h	/^    GAMEPAD_BUTTON_LEFT_FACE_RIGHT,     \/\/ Gamepad left DPAD right button$/;"	e	enum:__anonfdf2e0de0703
GAMEPAD_BUTTON_LEFT_FACE_UP	$RAYLIB/raylib.h	/^    GAMEPAD_BUTTON_LEFT_FACE_UP,        \/\/ Gamepad left DPAD up button$/;"	e	enum:__anonfdf2e0de0703
GAMEPAD_BUTTON_LEFT_THUMB	$RAYLIB/raylib.h	/^    GAMEPAD_BUTTON_LEFT_THUMB,          \/\/ Gamepad joystick pressed button left$/;"	e	enum:__anonfdf2e0de0703
GAMEPAD_BUTTON_LEFT_TRIGGER_1	$RAYLIB/raylib.h	/^    GAMEPAD_BUTTON_LEFT_TRIGGER_1,      \/\/ Gamepad top\/back trigger left (first), it could be/;"	e	enum:__anonfdf2e0de0703
GAMEPAD_BUTTON_LEFT_TRIGGER_2	$RAYLIB/raylib.h	/^    GAMEPAD_BUTTON_LEFT_TRIGGER_2,      \/\/ Gamepad top\/back trigger left (second), it could b/;"	e	enum:__anonfdf2e0de0703
GAMEPAD_BUTTON_MIDDLE	$RAYLIB/raylib.h	/^    GAMEPAD_BUTTON_MIDDLE,              \/\/ Gamepad center buttons, middle one (i.e. PS3: PS, X/;"	e	enum:__anonfdf2e0de0703
GAMEPAD_BUTTON_MIDDLE_LEFT	$RAYLIB/raylib.h	/^    GAMEPAD_BUTTON_MIDDLE_LEFT,         \/\/ Gamepad center buttons, left one (i.e. PS3: Select)$/;"	e	enum:__anonfdf2e0de0703
GAMEPAD_BUTTON_MIDDLE_RIGHT	$RAYLIB/raylib.h	/^    GAMEPAD_BUTTON_MIDDLE_RIGHT,        \/\/ Gamepad center buttons, right one (i.e. PS3: Start)$/;"	e	enum:__anonfdf2e0de0703
GAMEPAD_BUTTON_RIGHT_FACE_DOWN	$RAYLIB/raylib.h	/^    GAMEPAD_BUTTON_RIGHT_FACE_DOWN,     \/\/ Gamepad right button down (i.e. PS3: Cross, Xbox: A/;"	e	enum:__anonfdf2e0de0703
GAMEPAD_BUTTON_RIGHT_FACE_LEFT	$RAYLIB/raylib.h	/^    GAMEPAD_BUTTON_RIGHT_FACE_LEFT,     \/\/ Gamepad right button left (i.e. PS3: Square, Xbox: /;"	e	enum:__anonfdf2e0de0703
GAMEPAD_BUTTON_RIGHT_FACE_RIGHT	$RAYLIB/raylib.h	/^    GAMEPAD_BUTTON_RIGHT_FACE_RIGHT,    \/\/ Gamepad right button right (i.e. PS3: Circle, Xbox:/;"	e	enum:__anonfdf2e0de0703
GAMEPAD_BUTTON_RIGHT_FACE_UP	$RAYLIB/raylib.h	/^    GAMEPAD_BUTTON_RIGHT_FACE_UP,       \/\/ Gamepad right button up (i.e. PS3: Triangle, Xbox: /;"	e	enum:__anonfdf2e0de0703
GAMEPAD_BUTTON_RIGHT_THUMB	$RAYLIB/raylib.h	/^    GAMEPAD_BUTTON_RIGHT_THUMB          \/\/ Gamepad joystick pressed button right$/;"	e	enum:__anonfdf2e0de0703
GAMEPAD_BUTTON_RIGHT_TRIGGER_1	$RAYLIB/raylib.h	/^    GAMEPAD_BUTTON_RIGHT_TRIGGER_1,     \/\/ Gamepad top\/back trigger right (first), it could b/;"	e	enum:__anonfdf2e0de0703
GAMEPAD_BUTTON_RIGHT_TRIGGER_2	$RAYLIB/raylib.h	/^    GAMEPAD_BUTTON_RIGHT_TRIGGER_2,     \/\/ Gamepad top\/back trigger right (second), it could /;"	e	enum:__anonfdf2e0de0703
GAMEPAD_BUTTON_UNKNOWN	$RAYLIB/raylib.h	/^    GAMEPAD_BUTTON_UNKNOWN = 0,         \/\/ Unknown button, just for error checking$/;"	e	enum:__anonfdf2e0de0703
GESTURE_DOUBLETAP	$RAYLIB/raylib.h	/^    GESTURE_DOUBLETAP   = 2,        \/\/ Double tap gesture$/;"	e	enum:__anonfdf2e0de1303
GESTURE_DRAG	$RAYLIB/raylib.h	/^    GESTURE_DRAG        = 8,        \/\/ Drag gesture$/;"	e	enum:__anonfdf2e0de1303
GESTURE_HOLD	$RAYLIB/raylib.h	/^    GESTURE_HOLD        = 4,        \/\/ Hold gesture$/;"	e	enum:__anonfdf2e0de1303
GESTURE_NONE	$RAYLIB/raylib.h	/^    GESTURE_NONE        = 0,        \/\/ No gesture$/;"	e	enum:__anonfdf2e0de1303
GESTURE_PINCH_IN	$RAYLIB/raylib.h	/^    GESTURE_PINCH_IN    = 256,      \/\/ Pinch in gesture$/;"	e	enum:__anonfdf2e0de1303
GESTURE_PINCH_OUT	$RAYLIB/raylib.h	/^    GESTURE_PINCH_OUT   = 512       \/\/ Pinch out gesture$/;"	e	enum:__anonfdf2e0de1303
GESTURE_SWIPE_DOWN	$RAYLIB/raylib.h	/^    GESTURE_SWIPE_DOWN  = 128,      \/\/ Swipe down gesture$/;"	e	enum:__anonfdf2e0de1303
GESTURE_SWIPE_LEFT	$RAYLIB/raylib.h	/^    GESTURE_SWIPE_LEFT  = 32,       \/\/ Swipe left gesture$/;"	e	enum:__anonfdf2e0de1303
GESTURE_SWIPE_RIGHT	$RAYLIB/raylib.h	/^    GESTURE_SWIPE_RIGHT = 16,       \/\/ Swipe right gesture$/;"	e	enum:__anonfdf2e0de1303
GESTURE_SWIPE_UP	$RAYLIB/raylib.h	/^    GESTURE_SWIPE_UP    = 64,       \/\/ Swipe up gesture$/;"	e	enum:__anonfdf2e0de1303
GESTURE_TAP	$RAYLIB/raylib.h	/^    GESTURE_TAP         = 1,        \/\/ Tap gesture$/;"	e	enum:__anonfdf2e0de1303
GLAD_API_CALL_EXPORT	$RAYLIB/rlgl.h	/^    #define GLAD_API_CALL_EXPORT$/;"	d
GLAD_API_CALL_EXPORT_BUILD	$RAYLIB/rlgl.h	/^    #define GLAD_API_CALL_EXPORT_BUILD$/;"	d
GLAD_FREE	$RAYLIB/rlgl.h	/^    #define GLAD_FREE /;"	d
GLAD_GLES2_IMPLEMENTATION	$RAYLIB/rlgl.h	/^        #define GLAD_GLES2_IMPLEMENTATION$/;"	d
GLAD_GL_IMPLEMENTATION	$RAYLIB/rlgl.h	/^    #define GLAD_GL_IMPLEMENTATION$/;"	d
GLAD_MALLOC	$RAYLIB/rlgl.h	/^    #define GLAD_MALLOC /;"	d
GL_COMPRESSED_RGB8_ETC2	$RAYLIB/rlgl.h	/^    #define GL_COMPRESSED_RGB8_ETC2 /;"	d
GL_COMPRESSED_RGBA8_ETC2_EAC	$RAYLIB/rlgl.h	/^    #define GL_COMPRESSED_RGBA8_ETC2_EAC /;"	d
GL_COMPRESSED_RGBA_ASTC_4x4_KHR	$RAYLIB/rlgl.h	/^    #define GL_COMPRESSED_RGBA_ASTC_4x4_KHR /;"	d
GL_COMPRESSED_RGBA_ASTC_8x8_KHR	$RAYLIB/rlgl.h	/^    #define GL_COMPRESSED_RGBA_ASTC_8x8_KHR /;"	d
GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG	$RAYLIB/rlgl.h	/^    #define GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG /;"	d
GL_COMPRESSED_RGBA_S3TC_DXT1_EXT	$RAYLIB/rlgl.h	/^    #define GL_COMPRESSED_RGBA_S3TC_DXT1_EXT /;"	d
GL_COMPRESSED_RGBA_S3TC_DXT3_EXT	$RAYLIB/rlgl.h	/^    #define GL_COMPRESSED_RGBA_S3TC_DXT3_EXT /;"	d
GL_COMPRESSED_RGBA_S3TC_DXT5_EXT	$RAYLIB/rlgl.h	/^    #define GL_COMPRESSED_RGBA_S3TC_DXT5_EXT /;"	d
GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG	$RAYLIB/rlgl.h	/^    #define GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG /;"	d
GL_COMPRESSED_RGB_S3TC_DXT1_EXT	$RAYLIB/rlgl.h	/^    #define GL_COMPRESSED_RGB_S3TC_DXT1_EXT /;"	d
GL_DRAW_FRAMEBUFFER	$RAYLIB/rlgl.h	/^        #define GL_DRAW_FRAMEBUFFER /;"	d
GL_ETC1_RGB8_OES	$RAYLIB/rlgl.h	/^    #define GL_ETC1_RGB8_OES /;"	d
GL_GLEXT_PROTOTYPES	$RAYLIB/rlgl.h	/^    #define GL_GLEXT_PROTOTYPES$/;"	d
GL_LINE_WIDTH	$RAYLIB/rlgl.h	/^    #define GL_LINE_WIDTH /;"	d
GL_LUMINANCE	$RAYLIB/rlgl.h	/^    #define GL_LUMINANCE /;"	d
GL_LUMINANCE_ALPHA	$RAYLIB/rlgl.h	/^    #define GL_LUMINANCE_ALPHA /;"	d
GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT	$RAYLIB/rlgl.h	/^    #define GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT /;"	d
GL_PROGRAM_POINT_SIZE	$RAYLIB/rlgl.h	/^    #define GL_PROGRAM_POINT_SIZE /;"	d
GL_READ_FRAMEBUFFER	$RAYLIB/rlgl.h	/^        #define GL_READ_FRAMEBUFFER /;"	d
GL_SHADING_LANGUAGE_VERSION	$RAYLIB/rlgl.h	/^    #define GL_SHADING_LANGUAGE_VERSION /;"	d
GL_TEXTURE_MAX_ANISOTROPY_EXT	$RAYLIB/rlgl.h	/^    #define GL_TEXTURE_MAX_ANISOTROPY_EXT /;"	d
GL_UNSIGNED_SHORT_4_4_4_4	$RAYLIB/rlgl.h	/^    #define GL_UNSIGNED_SHORT_4_4_4_4 /;"	d
GL_UNSIGNED_SHORT_5_5_5_1	$RAYLIB/rlgl.h	/^    #define GL_UNSIGNED_SHORT_5_5_5_1 /;"	d
GL_UNSIGNED_SHORT_5_6_5	$RAYLIB/rlgl.h	/^    #define GL_UNSIGNED_SHORT_5_6_5 /;"	d
GOLD	$RAYLIB/raylib.h	/^#define GOLD /;"	d
GRAPHICS_API_OPENGL_33	$RAYLIB/rlgl.h	/^    #define GRAPHICS_API_OPENGL_33$/;"	d
GRAPHICS_API_OPENGL_ES2	$RAYLIB/rlgl.h	/^    #define GRAPHICS_API_OPENGL_ES2$/;"	d
GRAY	$RAYLIB/raylib.h	/^#define GRAY /;"	d
GREEN	$RAYLIB/raylib.h	/^#define GREEN /;"	d
GROUP_PADDING	$RAYLIB/raygui.h	/^    GROUP_PADDING = 16,         \/\/ ToggleGroup separation between toggles$/;"	e	enum:__anonfd9f18ac0903
GamepadAxis	$RAYLIB/raylib.h	/^} GamepadAxis;$/;"	t	typeref:enum:__anonfdf2e0de0803
GamepadButton	$RAYLIB/raylib.h	/^} GamepadButton;$/;"	t	typeref:enum:__anonfdf2e0de0703
GenImageCellular	$RAYLIB/raylib.h	/^RLAPI Image GenImageCellular(int width, int height, int tileSize);                              /;"	p	typeref:typename:RLAPI Image	signature:(int width,int height,int tileSize)
GenImageChecked	$RAYLIB/raylib.h	/^RLAPI Image GenImageChecked(int width, int height, int checksX, int checksY, Color col1, Color c/;"	p	typeref:typename:RLAPI Image	signature:(int width,int height,int checksX,int checksY,Color col1,Color col2)
GenImageColor	$RAYLIB/raylib.h	/^RLAPI Image GenImageColor(int width, int height, Color color);                                  /;"	p	typeref:typename:RLAPI Image	signature:(int width,int height,Color color)
GenImageFontAtlas	$RAYLIB/raylib.h	/^RLAPI Image GenImageFontAtlas(const GlyphInfo *glyphs, Rectangle **glyphRecs, int glyphCount, in/;"	p	typeref:typename:RLAPI Image	signature:(const GlyphInfo * glyphs,Rectangle ** glyphRecs,int glyphCount,int fontSize,int padding,int packMethod)
GenImageGradientLinear	$RAYLIB/raylib.h	/^RLAPI Image GenImageGradientLinear(int width, int height, int direction, Color start, Color end)/;"	p	typeref:typename:RLAPI Image	signature:(int width,int height,int direction,Color start,Color end)
GenImageGradientRadial	$RAYLIB/raylib.h	/^RLAPI Image GenImageGradientRadial(int width, int height, float density, Color inner, Color oute/;"	p	typeref:typename:RLAPI Image	signature:(int width,int height,float density,Color inner,Color outer)
GenImageGradientSquare	$RAYLIB/raylib.h	/^RLAPI Image GenImageGradientSquare(int width, int height, float density, Color inner, Color oute/;"	p	typeref:typename:RLAPI Image	signature:(int width,int height,float density,Color inner,Color outer)
GenImagePerlinNoise	$RAYLIB/raylib.h	/^RLAPI Image GenImagePerlinNoise(int width, int height, int offsetX, int offsetY, float scale);  /;"	p	typeref:typename:RLAPI Image	signature:(int width,int height,int offsetX,int offsetY,float scale)
GenImageText	$RAYLIB/raylib.h	/^RLAPI Image GenImageText(int width, int height, const char *text);                              /;"	p	typeref:typename:RLAPI Image	signature:(int width,int height,const char * text)
GenImageWhiteNoise	$RAYLIB/raylib.h	/^RLAPI Image GenImageWhiteNoise(int width, int height, float factor);                            /;"	p	typeref:typename:RLAPI Image	signature:(int width,int height,float factor)
GenMeshCone	$RAYLIB/raylib.h	/^RLAPI Mesh GenMeshCone(float radius, float height, int slices);                             \/\//;"	p	typeref:typename:RLAPI Mesh	signature:(float radius,float height,int slices)
GenMeshCube	$RAYLIB/raylib.h	/^RLAPI Mesh GenMeshCube(float width, float height, float length);                            \/\//;"	p	typeref:typename:RLAPI Mesh	signature:(float width,float height,float length)
GenMeshCubicmap	$RAYLIB/raylib.h	/^RLAPI Mesh GenMeshCubicmap(Image cubicmap, Vector3 cubeSize);                               \/\//;"	p	typeref:typename:RLAPI Mesh	signature:(Image cubicmap,Vector3 cubeSize)
GenMeshCylinder	$RAYLIB/raylib.h	/^RLAPI Mesh GenMeshCylinder(float radius, float height, int slices);                         \/\//;"	p	typeref:typename:RLAPI Mesh	signature:(float radius,float height,int slices)
GenMeshHeightmap	$RAYLIB/raylib.h	/^RLAPI Mesh GenMeshHeightmap(Image heightmap, Vector3 size);                                 \/\//;"	p	typeref:typename:RLAPI Mesh	signature:(Image heightmap,Vector3 size)
GenMeshHemiSphere	$RAYLIB/raylib.h	/^RLAPI Mesh GenMeshHemiSphere(float radius, int rings, int slices);                          \/\//;"	p	typeref:typename:RLAPI Mesh	signature:(float radius,int rings,int slices)
GenMeshKnot	$RAYLIB/raylib.h	/^RLAPI Mesh GenMeshKnot(float radius, float size, int radSeg, int sides);                    \/\//;"	p	typeref:typename:RLAPI Mesh	signature:(float radius,float size,int radSeg,int sides)
GenMeshPlane	$RAYLIB/raylib.h	/^RLAPI Mesh GenMeshPlane(float width, float length, int resX, int resZ);                     \/\//;"	p	typeref:typename:RLAPI Mesh	signature:(float width,float length,int resX,int resZ)
GenMeshPoly	$RAYLIB/raylib.h	/^RLAPI Mesh GenMeshPoly(int sides, float radius);                                            \/\//;"	p	typeref:typename:RLAPI Mesh	signature:(int sides,float radius)
GenMeshSphere	$RAYLIB/raylib.h	/^RLAPI Mesh GenMeshSphere(float radius, int rings, int slices);                              \/\//;"	p	typeref:typename:RLAPI Mesh	signature:(float radius,int rings,int slices)
GenMeshTangents	$RAYLIB/raylib.h	/^RLAPI void GenMeshTangents(Mesh *mesh);                                                     \/\//;"	p	typeref:typename:RLAPI void	signature:(Mesh * mesh)
GenMeshTorus	$RAYLIB/raylib.h	/^RLAPI Mesh GenMeshTorus(float radius, float size, int radSeg, int sides);                   \/\//;"	p	typeref:typename:RLAPI Mesh	signature:(float radius,float size,int radSeg,int sides)
GenTextureMipmaps	$RAYLIB/raylib.h	/^RLAPI void GenTextureMipmaps(Texture2D *texture);                                               /;"	p	typeref:typename:RLAPI void	signature:(Texture2D * texture)
Gesture	$RAYLIB/raylib.h	/^} Gesture;$/;"	t	typeref:enum:__anonfdf2e0de1303
GetApplicationDirectory	$RAYLIB/raylib.h	/^RLAPI const char *GetApplicationDirectory(void);                  \/\/ Get the directory of the /;"	p	typeref:typename:RLAPI const char *	signature:(void)
GetCameraMatrix	$RAYLIB/raylib.h	/^RLAPI Matrix GetCameraMatrix(Camera camera);                            \/\/ Get camera transfor/;"	p	typeref:typename:RLAPI Matrix	signature:(Camera camera)
GetCameraMatrix2D	$RAYLIB/raylib.h	/^RLAPI Matrix GetCameraMatrix2D(Camera2D camera);                        \/\/ Get camera 2d trans/;"	p	typeref:typename:RLAPI Matrix	signature:(Camera2D camera)
GetCharPressed	$RAYLIB/raygui.h	/^static int GetCharPressed(void);         \/\/ -- GuiTextBox(), GuiValueBox()$/;"	p	typeref:typename:int	signature:(void)
GetCharPressed	$RAYLIB/raylib.h	/^RLAPI int GetCharPressed(void);                               \/\/ Get char pressed (unicode), c/;"	p	typeref:typename:RLAPI int	signature:(void)
GetClipboardText	$RAYLIB/raylib.h	/^RLAPI const char *GetClipboardText(void);                         \/\/ Get clipboard text conten/;"	p	typeref:typename:RLAPI const char *	signature:(void)
GetCodepoint	$RAYLIB/raylib.h	/^RLAPI int GetCodepoint(const char *text, int *codepointSize);           \/\/ Get next codepoint /;"	p	typeref:typename:RLAPI int	signature:(const char * text,int * codepointSize)
GetCodepointCount	$RAYLIB/raylib.h	/^RLAPI int GetCodepointCount(const char *text);                          \/\/ Get total number of/;"	p	typeref:typename:RLAPI int	signature:(const char * text)
GetCodepointNext	$RAYLIB/raygui.h	/^static int GetCodepointNext(const char *text, int *codepointSize);  \/\/ Get next codepoint in a/;"	p	typeref:typename:int	signature:(const char * text,int * codepointSize)
GetCodepointNext	$RAYLIB/raylib.h	/^RLAPI int GetCodepointNext(const char *text, int *codepointSize);       \/\/ Get next codepoint /;"	p	typeref:typename:RLAPI int	signature:(const char * text,int * codepointSize)
GetCodepointPrevious	$RAYLIB/raylib.h	/^RLAPI int GetCodepointPrevious(const char *text, int *codepointSize);   \/\/ Get previous codepo/;"	p	typeref:typename:RLAPI int	signature:(const char * text,int * codepointSize)
GetCollisionRec	$RAYLIB/raylib.h	/^RLAPI Rectangle GetCollisionRec(Rectangle rec1, Rectangle rec2);                                /;"	p	typeref:typename:RLAPI Rectangle	signature:(Rectangle rec1,Rectangle rec2)
GetColor	$RAYLIB/raygui.h	/^static Color GetColor(int hexValue);                \/\/ Returns a Color struct from hexadecimal/;"	p	typeref:typename:Color	signature:(int hexValue)
GetColor	$RAYLIB/raylib.h	/^RLAPI Color GetColor(unsigned int hexValue);                                \/\/ Get Color struc/;"	p	typeref:typename:RLAPI Color	signature:(unsigned int hexValue)
GetCurrentMonitor	$RAYLIB/raylib.h	/^RLAPI int GetCurrentMonitor(void);                                \/\/ Get current connected mon/;"	p	typeref:typename:RLAPI int	signature:(void)
GetDirectoryPath	$RAYLIB/raygui.h	/^static const char *GetDirectoryPath(const char *filePath);   \/\/ -- GuiLoadStyle(), required to/;"	p	typeref:typename:const char *	signature:(const char * filePath)
GetDirectoryPath	$RAYLIB/raylib.h	/^RLAPI const char *GetDirectoryPath(const char *filePath);         \/\/ Get full path for a given/;"	p	typeref:typename:RLAPI const char *	signature:(const char * filePath)
GetFPS	$RAYLIB/raylib.h	/^RLAPI int GetFPS(void);                                           \/\/ Get current FPS$/;"	p	typeref:typename:RLAPI int	signature:(void)
GetFileExtension	$RAYLIB/raylib.h	/^RLAPI const char *GetFileExtension(const char *fileName);         \/\/ Get pointer to extension /;"	p	typeref:typename:RLAPI const char *	signature:(const char * fileName)
GetFileLength	$RAYLIB/raylib.h	/^RLAPI int GetFileLength(const char *fileName);                    \/\/ Get file length in bytes /;"	p	typeref:typename:RLAPI int	signature:(const char * fileName)
GetFileModTime	$RAYLIB/raylib.h	/^RLAPI long GetFileModTime(const char *fileName);                  \/\/ Get file modification tim/;"	p	typeref:typename:RLAPI long	signature:(const char * fileName)
GetFileName	$RAYLIB/raylib.h	/^RLAPI const char *GetFileName(const char *filePath);              \/\/ Get pointer to filename f/;"	p	typeref:typename:RLAPI const char *	signature:(const char * filePath)
GetFileNameWithoutExt	$RAYLIB/raylib.h	/^RLAPI const char *GetFileNameWithoutExt(const char *filePath);    \/\/ Get filename string witho/;"	p	typeref:typename:RLAPI const char *	signature:(const char * filePath)
GetFontDefault	$RAYLIB/raygui.h	/^static Font GetFontDefault(void);                            \/\/ -- GuiLoadStyleDefault()$/;"	p	typeref:typename:Font	signature:(void)
GetFontDefault	$RAYLIB/raylib.h	/^RLAPI Font GetFontDefault(void);                                                            \/\//;"	p	typeref:typename:RLAPI Font	signature:(void)
GetFrameTime	$RAYLIB/raylib.h	/^RLAPI float GetFrameTime(void);                                   \/\/ Get time in seconds for l/;"	p	typeref:typename:RLAPI float	signature:(void)
GetGamepadAxisCount	$RAYLIB/raylib.h	/^RLAPI int GetGamepadAxisCount(int gamepad);                                        \/\/ Get game/;"	p	typeref:typename:RLAPI int	signature:(int gamepad)
GetGamepadAxisMovement	$RAYLIB/raylib.h	/^RLAPI float GetGamepadAxisMovement(int gamepad, int axis);                         \/\/ Get axis/;"	p	typeref:typename:RLAPI float	signature:(int gamepad,int axis)
GetGamepadButtonPressed	$RAYLIB/raylib.h	/^RLAPI int GetGamepadButtonPressed(void);                                           \/\/ Get the /;"	p	typeref:typename:RLAPI int	signature:(void)
GetGamepadName	$RAYLIB/raylib.h	/^RLAPI const char *GetGamepadName(int gamepad);                                     \/\/ Get game/;"	p	typeref:typename:RLAPI const char *	signature:(int gamepad)
GetGestureDetected	$RAYLIB/raylib.h	/^RLAPI int GetGestureDetected(void);                     \/\/ Get latest detected gesture$/;"	p	typeref:typename:RLAPI int	signature:(void)
GetGestureDragAngle	$RAYLIB/raylib.h	/^RLAPI float GetGestureDragAngle(void);                  \/\/ Get gesture drag angle$/;"	p	typeref:typename:RLAPI float	signature:(void)
GetGestureDragVector	$RAYLIB/raylib.h	/^RLAPI Vector2 GetGestureDragVector(void);               \/\/ Get gesture drag vector$/;"	p	typeref:typename:RLAPI Vector2	signature:(void)
GetGestureHoldDuration	$RAYLIB/raylib.h	/^RLAPI float GetGestureHoldDuration(void);               \/\/ Get gesture hold time in millisecon/;"	p	typeref:typename:RLAPI float	signature:(void)
GetGesturePinchAngle	$RAYLIB/raylib.h	/^RLAPI float GetGesturePinchAngle(void);                 \/\/ Get gesture pinch angle$/;"	p	typeref:typename:RLAPI float	signature:(void)
GetGesturePinchVector	$RAYLIB/raylib.h	/^RLAPI Vector2 GetGesturePinchVector(void);              \/\/ Get gesture pinch delta$/;"	p	typeref:typename:RLAPI Vector2	signature:(void)
GetGlyphAtlasRec	$RAYLIB/raylib.h	/^RLAPI Rectangle GetGlyphAtlasRec(Font font, int codepoint);                                 \/\//;"	p	typeref:typename:RLAPI Rectangle	signature:(Font font,int codepoint)
GetGlyphIndex	$RAYLIB/raylib.h	/^RLAPI int GetGlyphIndex(Font font, int codepoint);                                          \/\//;"	p	typeref:typename:RLAPI int	signature:(Font font,int codepoint)
GetGlyphInfo	$RAYLIB/raylib.h	/^RLAPI GlyphInfo GetGlyphInfo(Font font, int codepoint);                                     \/\//;"	p	typeref:typename:RLAPI GlyphInfo	signature:(Font font,int codepoint)
GetImageAlphaBorder	$RAYLIB/raylib.h	/^RLAPI Rectangle GetImageAlphaBorder(Image image, float threshold);                              /;"	p	typeref:typename:RLAPI Rectangle	signature:(Image image,float threshold)
GetImageColor	$RAYLIB/raylib.h	/^RLAPI Color GetImageColor(Image image, int x, int y);                                           /;"	p	typeref:typename:RLAPI Color	signature:(Image image,int x,int y)
GetKeyPressed	$RAYLIB/raylib.h	/^RLAPI int GetKeyPressed(void);                                \/\/ Get key pressed (keycode), ca/;"	p	typeref:typename:RLAPI int	signature:(void)
GetMasterVolume	$RAYLIB/raylib.h	/^RLAPI float GetMasterVolume(void);                                    \/\/ Get master volume (li/;"	p	typeref:typename:RLAPI float	signature:(void)
GetMeshBoundingBox	$RAYLIB/raylib.h	/^RLAPI BoundingBox GetMeshBoundingBox(Mesh mesh);                                            \/\//;"	p	typeref:typename:RLAPI BoundingBox	signature:(Mesh mesh)
GetModelBoundingBox	$RAYLIB/raylib.h	/^RLAPI BoundingBox GetModelBoundingBox(Model model);                                         \/\//;"	p	typeref:typename:RLAPI BoundingBox	signature:(Model model)
GetMonitorCount	$RAYLIB/raylib.h	/^RLAPI int GetMonitorCount(void);                                  \/\/ Get number of connected m/;"	p	typeref:typename:RLAPI int	signature:(void)
GetMonitorHeight	$RAYLIB/raylib.h	/^RLAPI int GetMonitorHeight(int monitor);                          \/\/ Get specified monitor hei/;"	p	typeref:typename:RLAPI int	signature:(int monitor)
GetMonitorName	$RAYLIB/raylib.h	/^RLAPI const char *GetMonitorName(int monitor);                    \/\/ Get the human-readable, U/;"	p	typeref:typename:RLAPI const char *	signature:(int monitor)
GetMonitorPhysicalHeight	$RAYLIB/raylib.h	/^RLAPI int GetMonitorPhysicalHeight(int monitor);                  \/\/ Get specified monitor phy/;"	p	typeref:typename:RLAPI int	signature:(int monitor)
GetMonitorPhysicalWidth	$RAYLIB/raylib.h	/^RLAPI int GetMonitorPhysicalWidth(int monitor);                   \/\/ Get specified monitor phy/;"	p	typeref:typename:RLAPI int	signature:(int monitor)
GetMonitorPosition	$RAYLIB/raylib.h	/^RLAPI Vector2 GetMonitorPosition(int monitor);                    \/\/ Get specified monitor pos/;"	p	typeref:typename:RLAPI Vector2	signature:(int monitor)
GetMonitorRefreshRate	$RAYLIB/raylib.h	/^RLAPI int GetMonitorRefreshRate(int monitor);                     \/\/ Get specified monitor ref/;"	p	typeref:typename:RLAPI int	signature:(int monitor)
GetMonitorWidth	$RAYLIB/raylib.h	/^RLAPI int GetMonitorWidth(int monitor);                           \/\/ Get specified monitor wid/;"	p	typeref:typename:RLAPI int	signature:(int monitor)
GetMouseDelta	$RAYLIB/raylib.h	/^RLAPI Vector2 GetMouseDelta(void);                            \/\/ Get mouse delta between frame/;"	p	typeref:typename:RLAPI Vector2	signature:(void)
GetMousePosition	$RAYLIB/raygui.h	/^static Vector2 GetMousePosition(void);$/;"	p	typeref:typename:Vector2	signature:(void)
GetMousePosition	$RAYLIB/raylib.h	/^RLAPI Vector2 GetMousePosition(void);                         \/\/ Get mouse position XY$/;"	p	typeref:typename:RLAPI Vector2	signature:(void)
GetMouseRay	$RAYLIB/raylib.h	/^#define GetMouseRay /;"	d
GetMouseWheelMove	$RAYLIB/raygui.h	/^static float GetMouseWheelMove(void);$/;"	p	typeref:typename:float	signature:(void)
GetMouseWheelMove	$RAYLIB/raylib.h	/^RLAPI float GetMouseWheelMove(void);                          \/\/ Get mouse wheel movement for /;"	p	typeref:typename:RLAPI float	signature:(void)
GetMouseWheelMoveV	$RAYLIB/raylib.h	/^RLAPI Vector2 GetMouseWheelMoveV(void);                       \/\/ Get mouse wheel movement for /;"	p	typeref:typename:RLAPI Vector2	signature:(void)
GetMouseX	$RAYLIB/raylib.h	/^RLAPI int GetMouseX(void);                                    \/\/ Get mouse position X$/;"	p	typeref:typename:RLAPI int	signature:(void)
GetMouseY	$RAYLIB/raylib.h	/^RLAPI int GetMouseY(void);                                    \/\/ Get mouse position Y$/;"	p	typeref:typename:RLAPI int	signature:(void)
GetMusicTimeLength	$RAYLIB/raylib.h	/^RLAPI float GetMusicTimeLength(Music music);                          \/\/ Get music time length/;"	p	typeref:typename:RLAPI float	signature:(Music music)
GetMusicTimePlayed	$RAYLIB/raylib.h	/^RLAPI float GetMusicTimePlayed(Music music);                          \/\/ Get current music tim/;"	p	typeref:typename:RLAPI float	signature:(Music music)
GetNextSpaceWidth	$RAYLIB/raygui.h	/^static float GetNextSpaceWidth(const char *text, int *nextSpaceIndex)$/;"	f	typeref:typename:float	signature:(const char * text,int * nextSpaceIndex)
GetPixelColor	$RAYLIB/raylib.h	/^RLAPI Color GetPixelColor(void *srcPtr, int format);                        \/\/ Get Color from /;"	p	typeref:typename:RLAPI Color	signature:(void * srcPtr,int format)
GetPixelDataSize	$RAYLIB/raylib.h	/^RLAPI int GetPixelDataSize(int width, int height, int format);              \/\/ Get pixel data /;"	p	typeref:typename:RLAPI int	signature:(int width,int height,int format)
GetPrevDirectoryPath	$RAYLIB/raylib.h	/^RLAPI const char *GetPrevDirectoryPath(const char *dirPath);      \/\/ Get previous directory pa/;"	p	typeref:typename:RLAPI const char *	signature:(const char * dirPath)
GetRandomValue	$RAYLIB/raylib.h	/^RLAPI int GetRandomValue(int min, int max);                       \/\/ Get a random value betwee/;"	p	typeref:typename:RLAPI int	signature:(int min,int max)
GetRayCollisionBox	$RAYLIB/raylib.h	/^RLAPI RayCollision GetRayCollisionBox(Ray ray, BoundingBox box);                                /;"	p	typeref:typename:RLAPI RayCollision	signature:(Ray ray,BoundingBox box)
GetRayCollisionMesh	$RAYLIB/raylib.h	/^RLAPI RayCollision GetRayCollisionMesh(Ray ray, Mesh mesh, Matrix transform);                   /;"	p	typeref:typename:RLAPI RayCollision	signature:(Ray ray,Mesh mesh,Matrix transform)
GetRayCollisionQuad	$RAYLIB/raylib.h	/^RLAPI RayCollision GetRayCollisionQuad(Ray ray, Vector3 p1, Vector3 p2, Vector3 p3, Vector3 p4);/;"	p	typeref:typename:RLAPI RayCollision	signature:(Ray ray,Vector3 p1,Vector3 p2,Vector3 p3,Vector3 p4)
GetRayCollisionSphere	$RAYLIB/raylib.h	/^RLAPI RayCollision GetRayCollisionSphere(Ray ray, Vector3 center, float radius);                /;"	p	typeref:typename:RLAPI RayCollision	signature:(Ray ray,Vector3 center,float radius)
GetRayCollisionTriangle	$RAYLIB/raylib.h	/^RLAPI RayCollision GetRayCollisionTriangle(Ray ray, Vector3 p1, Vector3 p2, Vector3 p3);        /;"	p	typeref:typename:RLAPI RayCollision	signature:(Ray ray,Vector3 p1,Vector3 p2,Vector3 p3)
GetRenderHeight	$RAYLIB/raylib.h	/^RLAPI int GetRenderHeight(void);                                  \/\/ Get current render height/;"	p	typeref:typename:RLAPI int	signature:(void)
GetRenderWidth	$RAYLIB/raylib.h	/^RLAPI int GetRenderWidth(void);                                   \/\/ Get current render width /;"	p	typeref:typename:RLAPI int	signature:(void)
GetScreenHeight	$RAYLIB/raylib.h	/^RLAPI int GetScreenHeight(void);                                  \/\/ Get current screen height$/;"	p	typeref:typename:RLAPI int	signature:(void)
GetScreenToWorld2D	$RAYLIB/raylib.h	/^RLAPI Vector2 GetScreenToWorld2D(Vector2 position, Camera2D camera);    \/\/ Get the world space/;"	p	typeref:typename:RLAPI Vector2	signature:(Vector2 position,Camera2D camera)
GetScreenToWorldRay	$RAYLIB/raylib.h	/^RLAPI Ray GetScreenToWorldRay(Vector2 position, Camera camera);         \/\/ Get a ray trace fro/;"	p	typeref:typename:RLAPI Ray	signature:(Vector2 position,Camera camera)
GetScreenToWorldRayEx	$RAYLIB/raylib.h	/^RLAPI Ray GetScreenToWorldRayEx(Vector2 position, Camera camera, int width, int height); \/\/ Ge/;"	p	typeref:typename:RLAPI Ray	signature:(Vector2 position,Camera camera,int width,int height)
GetScreenWidth	$RAYLIB/raylib.h	/^RLAPI int GetScreenWidth(void);                                   \/\/ Get current screen width$/;"	p	typeref:typename:RLAPI int	signature:(void)
GetShaderLocation	$RAYLIB/raylib.h	/^RLAPI int GetShaderLocation(Shader shader, const char *uniformName);       \/\/ Get shader unifo/;"	p	typeref:typename:RLAPI int	signature:(Shader shader,const char * uniformName)
GetShaderLocationAttrib	$RAYLIB/raylib.h	/^RLAPI int GetShaderLocationAttrib(Shader shader, const char *attribName);  \/\/ Get shader attri/;"	p	typeref:typename:RLAPI int	signature:(Shader shader,const char * attribName)
GetShapesTexture	$RAYLIB/raylib.h	/^RLAPI Texture2D GetShapesTexture(void);                                 \/\/ Get texture that is/;"	p	typeref:typename:RLAPI Texture2D	signature:(void)
GetShapesTextureRectangle	$RAYLIB/raylib.h	/^RLAPI Rectangle GetShapesTextureRectangle(void);                        \/\/ Get texture source /;"	p	typeref:typename:RLAPI Rectangle	signature:(void)
GetSplinePointBasis	$RAYLIB/raylib.h	/^RLAPI Vector2 GetSplinePointBasis(Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, float t);     /;"	p	typeref:typename:RLAPI Vector2	signature:(Vector2 p1,Vector2 p2,Vector2 p3,Vector2 p4,float t)
GetSplinePointBezierCubic	$RAYLIB/raylib.h	/^RLAPI Vector2 GetSplinePointBezierCubic(Vector2 p1, Vector2 c2, Vector2 c3, Vector2 p4, float t)/;"	p	typeref:typename:RLAPI Vector2	signature:(Vector2 p1,Vector2 c2,Vector2 c3,Vector2 p4,float t)
GetSplinePointBezierQuad	$RAYLIB/raylib.h	/^RLAPI Vector2 GetSplinePointBezierQuad(Vector2 p1, Vector2 c2, Vector2 p3, float t);            /;"	p	typeref:typename:RLAPI Vector2	signature:(Vector2 p1,Vector2 c2,Vector2 p3,float t)
GetSplinePointCatmullRom	$RAYLIB/raylib.h	/^RLAPI Vector2 GetSplinePointCatmullRom(Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, float t);/;"	p	typeref:typename:RLAPI Vector2	signature:(Vector2 p1,Vector2 p2,Vector2 p3,Vector2 p4,float t)
GetSplinePointLinear	$RAYLIB/raylib.h	/^RLAPI Vector2 GetSplinePointLinear(Vector2 startPos, Vector2 endPos, float t);                  /;"	p	typeref:typename:RLAPI Vector2	signature:(Vector2 startPos,Vector2 endPos,float t)
GetTextBounds	$RAYLIB/raygui.h	/^static Rectangle GetTextBounds(int control, Rectangle bounds);  \/\/ Get text bounds considering/;"	p	typeref:typename:Rectangle	signature:(int control,Rectangle bounds)
GetTextIcon	$RAYLIB/raygui.h	/^static const char *GetTextIcon(const char *text, int *iconId);  \/\/ Get text icon if provided a/;"	p	typeref:typename:const char *	signature:(const char * text,int * iconId)
GetTextLines	$RAYLIB/raygui.h	/^const char **GetTextLines(const char *text, int *count)$/;"	f	typeref:typename:const char **	signature:(const char * text,int * count)
GetTextWidth	$RAYLIB/raygui.h	/^static int GetTextWidth(const char *text);                      \/\/ Gui get text width using gu/;"	p	typeref:typename:int	signature:(const char * text)
GetTime	$RAYLIB/raylib.h	/^RLAPI double GetTime(void);                                       \/\/ Get elapsed time in secon/;"	p	typeref:typename:RLAPI double	signature:(void)
GetTouchPointCount	$RAYLIB/raylib.h	/^RLAPI int GetTouchPointCount(void);                           \/\/ Get number of touch points$/;"	p	typeref:typename:RLAPI int	signature:(void)
GetTouchPointId	$RAYLIB/raylib.h	/^RLAPI int GetTouchPointId(int index);                         \/\/ Get touch point identifier fo/;"	p	typeref:typename:RLAPI int	signature:(int index)
GetTouchPosition	$RAYLIB/raylib.h	/^RLAPI Vector2 GetTouchPosition(int index);                    \/\/ Get touch position XY for a t/;"	p	typeref:typename:RLAPI Vector2	signature:(int index)
GetTouchX	$RAYLIB/raylib.h	/^RLAPI int GetTouchX(void);                                    \/\/ Get touch position X for touc/;"	p	typeref:typename:RLAPI int	signature:(void)
GetTouchY	$RAYLIB/raylib.h	/^RLAPI int GetTouchY(void);                                    \/\/ Get touch position Y for touc/;"	p	typeref:typename:RLAPI int	signature:(void)
GetWindowHandle	$RAYLIB/raylib.h	/^RLAPI void *GetWindowHandle(void);                                \/\/ Get native window handle$/;"	p	typeref:typename:RLAPI void *	signature:(void)
GetWindowPosition	$RAYLIB/raylib.h	/^RLAPI Vector2 GetWindowPosition(void);                            \/\/ Get window position XY on/;"	p	typeref:typename:RLAPI Vector2	signature:(void)
GetWindowScaleDPI	$RAYLIB/raylib.h	/^RLAPI Vector2 GetWindowScaleDPI(void);                            \/\/ Get window scale DPI fact/;"	p	typeref:typename:RLAPI Vector2	signature:(void)
GetWorkingDirectory	$RAYLIB/raylib.h	/^RLAPI const char *GetWorkingDirectory(void);                      \/\/ Get current working direc/;"	p	typeref:typename:RLAPI const char *	signature:(void)
GetWorldToScreen	$RAYLIB/raylib.h	/^RLAPI Vector2 GetWorldToScreen(Vector3 position, Camera camera);        \/\/ Get the screen spac/;"	p	typeref:typename:RLAPI Vector2	signature:(Vector3 position,Camera camera)
GetWorldToScreen2D	$RAYLIB/raylib.h	/^RLAPI Vector2 GetWorldToScreen2D(Vector2 position, Camera2D camera);    \/\/ Get the screen spac/;"	p	typeref:typename:RLAPI Vector2	signature:(Vector2 position,Camera2D camera)
GetWorldToScreenEx	$RAYLIB/raylib.h	/^RLAPI Vector2 GetWorldToScreenEx(Vector3 position, Camera camera, int width, int height); \/\/ G/;"	p	typeref:typename:RLAPI Vector2	signature:(Vector3 position,Camera camera,int width,int height)
GlyphInfo	$RAYLIB/raygui.h	/^    } GlyphInfo;$/;"	t	typeref:struct:GlyphInfo
GlyphInfo	$RAYLIB/raylib.h	/^} GlyphInfo;$/;"	t	typeref:struct:GlyphInfo
GuiButton	$RAYLIB/raygui.h	/^int GuiButton(Rectangle bounds, const char *text)$/;"	f	typeref:typename:int	signature:(Rectangle bounds,const char * text)
GuiCheckBox	$RAYLIB/raygui.h	/^int GuiCheckBox(Rectangle bounds, const char *text, bool *checked)$/;"	f	typeref:typename:int	signature:(Rectangle bounds,const char * text,bool * checked)
GuiCheckBoxProperty	$RAYLIB/raygui.h	/^} GuiCheckBoxProperty;$/;"	t	typeref:enum:__anonfd9f18ac0d03
GuiColorBarAlpha	$RAYLIB/raygui.h	/^int GuiColorBarAlpha(Rectangle bounds, const char *text, float *alpha)$/;"	f	typeref:typename:int	signature:(Rectangle bounds,const char * text,float * alpha)
GuiColorBarHue	$RAYLIB/raygui.h	/^int GuiColorBarHue(Rectangle bounds, const char *text, float *hue)$/;"	f	typeref:typename:int	signature:(Rectangle bounds,const char * text,float * hue)
GuiColorPanel	$RAYLIB/raygui.h	/^int GuiColorPanel(Rectangle bounds, const char *text, Color *color)$/;"	f	typeref:typename:int	signature:(Rectangle bounds,const char * text,Color * color)
GuiColorPanelHSV	$RAYLIB/raygui.h	/^int GuiColorPanelHSV(Rectangle bounds, const char *text, Vector3 *colorHsv)$/;"	f	typeref:typename:int	signature:(Rectangle bounds,const char * text,Vector3 * colorHsv)
GuiColorPicker	$RAYLIB/raygui.h	/^int GuiColorPicker(Rectangle bounds, const char *text, Color *color)$/;"	f	typeref:typename:int	signature:(Rectangle bounds,const char * text,Color * color)
GuiColorPickerHSV	$RAYLIB/raygui.h	/^int GuiColorPickerHSV(Rectangle bounds, const char *text, Vector3 *colorHsv)$/;"	f	typeref:typename:int	signature:(Rectangle bounds,const char * text,Vector3 * colorHsv)
GuiColorPickerProperty	$RAYLIB/raygui.h	/^} GuiColorPickerProperty;$/;"	t	typeref:enum:__anonfd9f18ac1303
GuiComboBox	$RAYLIB/raygui.h	/^int GuiComboBox(Rectangle bounds, const char *text, int *active)$/;"	f	typeref:typename:int	signature:(Rectangle bounds,const char * text,int * active)
GuiComboBoxProperty	$RAYLIB/raygui.h	/^} GuiComboBoxProperty;$/;"	t	typeref:enum:__anonfd9f18ac0e03
GuiControl	$RAYLIB/raygui.h	/^} GuiControl;$/;"	t	typeref:enum:__anonfd9f18ac0603
GuiControlProperty	$RAYLIB/raygui.h	/^} GuiControlProperty;$/;"	t	typeref:enum:__anonfd9f18ac0703
GuiDefaultProperty	$RAYLIB/raygui.h	/^} GuiDefaultProperty;$/;"	t	typeref:enum:__anonfd9f18ac0803
GuiDisable	$RAYLIB/raygui.h	/^void GuiDisable(void) { if (guiState == STATE_NORMAL) guiState = STATE_DISABLED; }$/;"	f	typeref:typename:void	signature:(void)
GuiDisableTooltip	$RAYLIB/raygui.h	/^void GuiDisableTooltip(void) { guiTooltip = false; }$/;"	f	typeref:typename:void	signature:(void)
GuiDrawIcon	$RAYLIB/raygui.h	/^void GuiDrawIcon(int iconId, int posX, int posY, int pixelSize, Color color)$/;"	f	typeref:typename:void	signature:(int iconId,int posX,int posY,int pixelSize,Color color)
GuiDrawRectangle	$RAYLIB/raygui.h	/^static void GuiDrawRectangle(Rectangle rec, int borderWidth, Color borderColor, Color color);   /;"	p	typeref:typename:void	signature:(Rectangle rec,int borderWidth,Color borderColor,Color color)
GuiDrawText	$RAYLIB/raygui.h	/^static void GuiDrawText(const char *text, Rectangle textBounds, int alignment, Color tint);     /;"	p	typeref:typename:void	signature:(const char * text,Rectangle textBounds,int alignment,Color tint)
GuiDropdownBox	$RAYLIB/raygui.h	/^int GuiDropdownBox(Rectangle bounds, const char *text, int *active, bool editMode)$/;"	f	typeref:typename:int	signature:(Rectangle bounds,const char * text,int * active,bool editMode)
GuiDropdownBoxProperty	$RAYLIB/raygui.h	/^} GuiDropdownBoxProperty;$/;"	t	typeref:enum:__anonfd9f18ac0f03
GuiDummyRec	$RAYLIB/raygui.h	/^int GuiDummyRec(Rectangle bounds, const char *text)$/;"	f	typeref:typename:int	signature:(Rectangle bounds,const char * text)
GuiEnable	$RAYLIB/raygui.h	/^void GuiEnable(void) { if (guiState == STATE_DISABLED) guiState = STATE_NORMAL; }$/;"	f	typeref:typename:void	signature:(void)
GuiEnableTooltip	$RAYLIB/raygui.h	/^void GuiEnableTooltip(void) { guiTooltip = true; }$/;"	f	typeref:typename:void	signature:(void)
GuiFade	$RAYLIB/raygui.h	/^static Color GuiFade(Color color, float alpha);         \/\/ Fade color by an alpha factor$/;"	p	typeref:typename:Color	signature:(Color color,float alpha)
GuiGetFont	$RAYLIB/raygui.h	/^RAYGUIAPI Font GuiGetFont(void);                                \/\/ Get gui custom font (global/;"	p	typeref:typename:RAYGUIAPI Font	signature:(void)
GuiGetIcons	$RAYLIB/raygui.h	/^unsigned int *GuiGetIcons(void) { return guiIconsPtr; }$/;"	f	typeref:typename:unsigned int *	signature:(void)
GuiGetState	$RAYLIB/raygui.h	/^int GuiGetState(void) { return guiState; }$/;"	f	typeref:typename:int	signature:(void)
GuiGetStyle	$RAYLIB/raygui.h	/^int GuiGetStyle(int control, int property)$/;"	f	typeref:typename:int	signature:(int control,int property)
GuiGrid	$RAYLIB/raygui.h	/^int GuiGrid(Rectangle bounds, const char *text, float spacing, int subdivs, Vector2 *mouseCell)$/;"	f	typeref:typename:int	signature:(Rectangle bounds,const char * text,float spacing,int subdivs,Vector2 * mouseCell)
GuiGroupBox	$RAYLIB/raygui.h	/^int GuiGroupBox(Rectangle bounds, const char *text)$/;"	f	typeref:typename:int	signature:(Rectangle bounds,const char * text)
GuiIconName	$RAYLIB/raygui.h	/^} GuiIconName;$/;"	t	typeref:enum:__anonfd9f18ac1403
GuiIconText	$RAYLIB/raygui.h	/^const char *GuiIconText(int iconId, const char *text)$/;"	f	typeref:typename:const char *	signature:(int iconId,const char * text)
GuiIsLocked	$RAYLIB/raygui.h	/^bool GuiIsLocked(void) { return guiLocked; }$/;"	f	typeref:typename:bool	signature:(void)
GuiLabel	$RAYLIB/raygui.h	/^int GuiLabel(Rectangle bounds, const char *text)$/;"	f	typeref:typename:int	signature:(Rectangle bounds,const char * text)
GuiLabelButton	$RAYLIB/raygui.h	/^int GuiLabelButton(Rectangle bounds, const char *text)$/;"	f	typeref:typename:int	signature:(Rectangle bounds,const char * text)
GuiLine	$RAYLIB/raygui.h	/^int GuiLine(Rectangle bounds, const char *text)$/;"	f	typeref:typename:int	signature:(Rectangle bounds,const char * text)
GuiListView	$RAYLIB/raygui.h	/^int GuiListView(Rectangle bounds, const char *text, int *scrollIndex, int *active)$/;"	f	typeref:typename:int	signature:(Rectangle bounds,const char * text,int * scrollIndex,int * active)
GuiListViewEx	$RAYLIB/raygui.h	/^int GuiListViewEx(Rectangle bounds, const char **text, int count, int *scrollIndex, int *active,/;"	f	typeref:typename:int	signature:(Rectangle bounds,const char ** text,int count,int * scrollIndex,int * active,int * focus)
GuiListViewProperty	$RAYLIB/raygui.h	/^} GuiListViewProperty;$/;"	t	typeref:enum:__anonfd9f18ac1203
GuiLoadIcons	$RAYLIB/raygui.h	/^char **GuiLoadIcons(const char *fileName, bool loadIconsName)$/;"	f	typeref:typename:char **	signature:(const char * fileName,bool loadIconsName)
GuiLoadStyle	$RAYLIB/raygui.h	/^void GuiLoadStyle(const char *fileName)$/;"	f	typeref:typename:void	signature:(const char * fileName)
GuiLoadStyleDefault	$RAYLIB/raygui.h	/^void GuiLoadStyleDefault(void)$/;"	f	typeref:typename:void	signature:(void)
GuiLoadStyleFromMemory	$RAYLIB/raygui.h	/^static void GuiLoadStyleFromMemory(const unsigned char *fileData, int dataSize);    \/\/ Load st/;"	p	typeref:typename:void	signature:(const unsigned char * fileData,int dataSize)
GuiLock	$RAYLIB/raygui.h	/^void GuiLock(void) { guiLocked = true; }$/;"	f	typeref:typename:void	signature:(void)
GuiMessageBox	$RAYLIB/raygui.h	/^int GuiMessageBox(Rectangle bounds, const char *title, const char *message, const char *buttons)$/;"	f	typeref:typename:int	signature:(Rectangle bounds,const char * title,const char * message,const char * buttons)
GuiPanel	$RAYLIB/raygui.h	/^int GuiPanel(Rectangle bounds, const char *text)$/;"	f	typeref:typename:int	signature:(Rectangle bounds,const char * text)
GuiProgressBar	$RAYLIB/raygui.h	/^int GuiProgressBar(Rectangle bounds, const char *textLeft, const char *textRight, float *value, /;"	f	typeref:typename:int	signature:(Rectangle bounds,const char * textLeft,const char * textRight,float * value,float minValue,float maxValue)
GuiProgressBarProperty	$RAYLIB/raygui.h	/^} GuiProgressBarProperty;$/;"	t	typeref:enum:__anonfd9f18ac0b03
GuiPropertyElement	$RAYLIB/raygui.h	/^typedef enum { BORDER = 0, BASE, TEXT, OTHER } GuiPropertyElement;$/;"	t	typeref:enum:__anonfd9f18ac1503
GuiScrollBar	$RAYLIB/raygui.h	/^static int GuiScrollBar(Rectangle bounds, int value, int minValue, int maxValue);   \/\/ Scroll /;"	p	typeref:typename:int	signature:(Rectangle bounds,int value,int minValue,int maxValue)
GuiScrollBarProperty	$RAYLIB/raygui.h	/^} GuiScrollBarProperty;$/;"	t	typeref:enum:__anonfd9f18ac0c03
GuiScrollPanel	$RAYLIB/raygui.h	/^int GuiScrollPanel(Rectangle bounds, const char *text, Rectangle content, Vector2 *scroll, Recta/;"	f	typeref:typename:int	signature:(Rectangle bounds,const char * text,Rectangle content,Vector2 * scroll,Rectangle * view)
GuiSetAlpha	$RAYLIB/raygui.h	/^void GuiSetAlpha(float alpha)$/;"	f	typeref:typename:void	signature:(float alpha)
GuiSetFont	$RAYLIB/raygui.h	/^void GuiSetFont(Font font)$/;"	f	typeref:typename:void	signature:(Font font)
GuiSetIconScale	$RAYLIB/raygui.h	/^void GuiSetIconScale(int scale)$/;"	f	typeref:typename:void	signature:(int scale)
GuiSetState	$RAYLIB/raygui.h	/^void GuiSetState(int state) { guiState = (GuiState)state; }$/;"	f	typeref:typename:void	signature:(int state)
GuiSetStyle	$RAYLIB/raygui.h	/^void GuiSetStyle(int control, int property, int value)$/;"	f	typeref:typename:void	signature:(int control,int property,int value)
GuiSetTooltip	$RAYLIB/raygui.h	/^void GuiSetTooltip(const char *tooltip) { guiTooltipPtr = tooltip; }$/;"	f	typeref:typename:void	signature:(const char * tooltip)
GuiSlider	$RAYLIB/raygui.h	/^int GuiSlider(Rectangle bounds, const char *textLeft, const char *textRight, float *value, float/;"	f	typeref:typename:int	signature:(Rectangle bounds,const char * textLeft,const char * textRight,float * value,float minValue,float maxValue)
GuiSliderBar	$RAYLIB/raygui.h	/^int GuiSliderBar(Rectangle bounds, const char *textLeft, const char *textRight, float *value, fl/;"	f	typeref:typename:int	signature:(Rectangle bounds,const char * textLeft,const char * textRight,float * value,float minValue,float maxValue)
GuiSliderPro	$RAYLIB/raygui.h	/^int GuiSliderPro(Rectangle bounds, const char *textLeft, const char *textRight, float *value, fl/;"	f	typeref:typename:int	signature:(Rectangle bounds,const char * textLeft,const char * textRight,float * value,float minValue,float maxValue,int sliderWidth)
GuiSliderProperty	$RAYLIB/raygui.h	/^} GuiSliderProperty;$/;"	t	typeref:enum:__anonfd9f18ac0a03
GuiSpinner	$RAYLIB/raygui.h	/^int GuiSpinner(Rectangle bounds, const char *text, int *value, int minValue, int maxValue, bool /;"	f	typeref:typename:int	signature:(Rectangle bounds,const char * text,int * value,int minValue,int maxValue,bool editMode)
GuiSpinnerProperty	$RAYLIB/raygui.h	/^} GuiSpinnerProperty;$/;"	t	typeref:enum:__anonfd9f18ac1103
GuiState	$RAYLIB/raygui.h	/^} GuiState;$/;"	t	typeref:enum:__anonfd9f18ac0203
GuiStatusBar	$RAYLIB/raygui.h	/^int GuiStatusBar(Rectangle bounds, const char *text)$/;"	f	typeref:typename:int	signature:(Rectangle bounds,const char * text)
GuiStyleProp	$RAYLIB/raygui.h	/^} GuiStyleProp;$/;"	t	typeref:struct:GuiStyleProp
GuiTabBar	$RAYLIB/raygui.h	/^int GuiTabBar(Rectangle bounds, const char **text, int count, int *active)$/;"	f	typeref:typename:int	signature:(Rectangle bounds,const char ** text,int count,int * active)
GuiTextAlignment	$RAYLIB/raygui.h	/^} GuiTextAlignment;$/;"	t	typeref:enum:__anonfd9f18ac0303
GuiTextAlignmentVertical	$RAYLIB/raygui.h	/^} GuiTextAlignmentVertical;$/;"	t	typeref:enum:__anonfd9f18ac0403
GuiTextBox	$RAYLIB/raygui.h	/^int GuiTextBox(Rectangle bounds, char *text, int textSize, bool editMode)$/;"	f	typeref:typename:int	signature:(Rectangle bounds,char * text,int textSize,bool editMode)
GuiTextBoxProperty	$RAYLIB/raygui.h	/^} GuiTextBoxProperty;$/;"	t	typeref:enum:__anonfd9f18ac1003
GuiTextInputBox	$RAYLIB/raygui.h	/^int GuiTextInputBox(Rectangle bounds, const char *title, const char *message, const char *button/;"	f	typeref:typename:int	signature:(Rectangle bounds,const char * title,const char * message,const char * buttons,char * text,int textMaxSize,bool * secretViewActive)
GuiTextSplit	$RAYLIB/raygui.h	/^static const char **GuiTextSplit(const char *text, char delimiter, int *count, int *textRow);   /;"	p	typeref:typename:const char **	signature:(const char * text,char delimiter,int * count,int * textRow)
GuiTextWrapMode	$RAYLIB/raygui.h	/^} GuiTextWrapMode;$/;"	t	typeref:enum:__anonfd9f18ac0503
GuiToggle	$RAYLIB/raygui.h	/^int GuiToggle(Rectangle bounds, const char *text, bool *active)$/;"	f	typeref:typename:int	signature:(Rectangle bounds,const char * text,bool * active)
GuiToggleGroup	$RAYLIB/raygui.h	/^int GuiToggleGroup(Rectangle bounds, const char *text, int *active)$/;"	f	typeref:typename:int	signature:(Rectangle bounds,const char * text,int * active)
GuiToggleProperty	$RAYLIB/raygui.h	/^} GuiToggleProperty;$/;"	t	typeref:enum:__anonfd9f18ac0903
GuiToggleSlider	$RAYLIB/raygui.h	/^int GuiToggleSlider(Rectangle bounds, const char *text, int *active)$/;"	f	typeref:typename:int	signature:(Rectangle bounds,const char * text,int * active)
GuiTooltip	$RAYLIB/raygui.h	/^static void GuiTooltip(Rectangle controlRec);                   \/\/ Draw tooltip using control /;"	p	typeref:typename:void	signature:(Rectangle controlRec)
GuiUnlock	$RAYLIB/raygui.h	/^void GuiUnlock(void) { guiLocked = false; }$/;"	f	typeref:typename:void	signature:(void)
GuiValueBox	$RAYLIB/raygui.h	/^int GuiValueBox(Rectangle bounds, const char *text, int *value, int minValue, int maxValue, bool/;"	f	typeref:typename:int	signature:(Rectangle bounds,const char * text,int * value,int minValue,int maxValue,bool editMode)
GuiWindowBox	$RAYLIB/raygui.h	/^int GuiWindowBox(Rectangle bounds, const char *title)$/;"	f	typeref:typename:int	signature:(Rectangle bounds,const char * title)
HUEBAR_PADDING	$RAYLIB/raygui.h	/^    HUEBAR_PADDING,             \/\/ ColorPicker right hue bar separation from panel$/;"	e	enum:__anonfd9f18ac1303
HUEBAR_SELECTOR_HEIGHT	$RAYLIB/raygui.h	/^    HUEBAR_SELECTOR_HEIGHT,     \/\/ ColorPicker right hue bar selector height$/;"	e	enum:__anonfd9f18ac1303
HUEBAR_SELECTOR_OVERFLOW	$RAYLIB/raygui.h	/^    HUEBAR_SELECTOR_OVERFLOW    \/\/ ColorPicker right hue bar selector overflow$/;"	e	enum:__anonfd9f18ac1303
HUEBAR_WIDTH	$RAYLIB/raygui.h	/^    HUEBAR_WIDTH,               \/\/ ColorPicker right hue bar width$/;"	e	enum:__anonfd9f18ac1303
HideCursor	$RAYLIB/raylib.h	/^RLAPI void HideCursor(void);                                      \/\/ Hides cursor$/;"	p	typeref:typename:RLAPI void	signature:(void)
ICON_1UP	$RAYLIB/raygui.h	/^    ICON_1UP                      = 148,$/;"	e	enum:__anonfd9f18ac1403
ICON_223	$RAYLIB/raygui.h	/^    ICON_223                      = 223,$/;"	e	enum:__anonfd9f18ac1403
ICON_224	$RAYLIB/raygui.h	/^    ICON_224                      = 224,$/;"	e	enum:__anonfd9f18ac1403
ICON_225	$RAYLIB/raygui.h	/^    ICON_225                      = 225,$/;"	e	enum:__anonfd9f18ac1403
ICON_226	$RAYLIB/raygui.h	/^    ICON_226                      = 226,$/;"	e	enum:__anonfd9f18ac1403
ICON_227	$RAYLIB/raygui.h	/^    ICON_227                      = 227,$/;"	e	enum:__anonfd9f18ac1403
ICON_228	$RAYLIB/raygui.h	/^    ICON_228                      = 228,$/;"	e	enum:__anonfd9f18ac1403
ICON_229	$RAYLIB/raygui.h	/^    ICON_229                      = 229,$/;"	e	enum:__anonfd9f18ac1403
ICON_230	$RAYLIB/raygui.h	/^    ICON_230                      = 230,$/;"	e	enum:__anonfd9f18ac1403
ICON_231	$RAYLIB/raygui.h	/^    ICON_231                      = 231,$/;"	e	enum:__anonfd9f18ac1403
ICON_232	$RAYLIB/raygui.h	/^    ICON_232                      = 232,$/;"	e	enum:__anonfd9f18ac1403
ICON_233	$RAYLIB/raygui.h	/^    ICON_233                      = 233,$/;"	e	enum:__anonfd9f18ac1403
ICON_234	$RAYLIB/raygui.h	/^    ICON_234                      = 234,$/;"	e	enum:__anonfd9f18ac1403
ICON_235	$RAYLIB/raygui.h	/^    ICON_235                      = 235,$/;"	e	enum:__anonfd9f18ac1403
ICON_236	$RAYLIB/raygui.h	/^    ICON_236                      = 236,$/;"	e	enum:__anonfd9f18ac1403
ICON_237	$RAYLIB/raygui.h	/^    ICON_237                      = 237,$/;"	e	enum:__anonfd9f18ac1403
ICON_238	$RAYLIB/raygui.h	/^    ICON_238                      = 238,$/;"	e	enum:__anonfd9f18ac1403
ICON_239	$RAYLIB/raygui.h	/^    ICON_239                      = 239,$/;"	e	enum:__anonfd9f18ac1403
ICON_240	$RAYLIB/raygui.h	/^    ICON_240                      = 240,$/;"	e	enum:__anonfd9f18ac1403
ICON_241	$RAYLIB/raygui.h	/^    ICON_241                      = 241,$/;"	e	enum:__anonfd9f18ac1403
ICON_242	$RAYLIB/raygui.h	/^    ICON_242                      = 242,$/;"	e	enum:__anonfd9f18ac1403
ICON_243	$RAYLIB/raygui.h	/^    ICON_243                      = 243,$/;"	e	enum:__anonfd9f18ac1403
ICON_244	$RAYLIB/raygui.h	/^    ICON_244                      = 244,$/;"	e	enum:__anonfd9f18ac1403
ICON_245	$RAYLIB/raygui.h	/^    ICON_245                      = 245,$/;"	e	enum:__anonfd9f18ac1403
ICON_246	$RAYLIB/raygui.h	/^    ICON_246                      = 246,$/;"	e	enum:__anonfd9f18ac1403
ICON_247	$RAYLIB/raygui.h	/^    ICON_247                      = 247,$/;"	e	enum:__anonfd9f18ac1403
ICON_248	$RAYLIB/raygui.h	/^    ICON_248                      = 248,$/;"	e	enum:__anonfd9f18ac1403
ICON_249	$RAYLIB/raygui.h	/^    ICON_249                      = 249,$/;"	e	enum:__anonfd9f18ac1403
ICON_250	$RAYLIB/raygui.h	/^    ICON_250                      = 250,$/;"	e	enum:__anonfd9f18ac1403
ICON_251	$RAYLIB/raygui.h	/^    ICON_251                      = 251,$/;"	e	enum:__anonfd9f18ac1403
ICON_252	$RAYLIB/raygui.h	/^    ICON_252                      = 252,$/;"	e	enum:__anonfd9f18ac1403
ICON_253	$RAYLIB/raygui.h	/^    ICON_253                      = 253,$/;"	e	enum:__anonfd9f18ac1403
ICON_254	$RAYLIB/raygui.h	/^    ICON_254                      = 254,$/;"	e	enum:__anonfd9f18ac1403
ICON_255	$RAYLIB/raygui.h	/^    ICON_255                      = 255,$/;"	e	enum:__anonfd9f18ac1403
ICON_ALARM	$RAYLIB/raygui.h	/^    ICON_ALARM                    = 205,$/;"	e	enum:__anonfd9f18ac1403
ICON_ALPHA_CLEAR	$RAYLIB/raygui.h	/^    ICON_ALPHA_CLEAR              = 93,$/;"	e	enum:__anonfd9f18ac1403
ICON_ALPHA_MULTIPLY	$RAYLIB/raygui.h	/^    ICON_ALPHA_MULTIPLY           = 92,$/;"	e	enum:__anonfd9f18ac1403
ICON_ARROW_DOWN	$RAYLIB/raygui.h	/^    ICON_ARROW_DOWN               = 116,$/;"	e	enum:__anonfd9f18ac1403
ICON_ARROW_DOWN_FILL	$RAYLIB/raygui.h	/^    ICON_ARROW_DOWN_FILL          = 120,$/;"	e	enum:__anonfd9f18ac1403
ICON_ARROW_LEFT	$RAYLIB/raygui.h	/^    ICON_ARROW_LEFT               = 114,$/;"	e	enum:__anonfd9f18ac1403
ICON_ARROW_LEFT_FILL	$RAYLIB/raygui.h	/^    ICON_ARROW_LEFT_FILL          = 118,$/;"	e	enum:__anonfd9f18ac1403
ICON_ARROW_RIGHT	$RAYLIB/raygui.h	/^    ICON_ARROW_RIGHT              = 115,$/;"	e	enum:__anonfd9f18ac1403
ICON_ARROW_RIGHT_FILL	$RAYLIB/raygui.h	/^    ICON_ARROW_RIGHT_FILL         = 119,$/;"	e	enum:__anonfd9f18ac1403
ICON_ARROW_UP	$RAYLIB/raygui.h	/^    ICON_ARROW_UP                 = 117,$/;"	e	enum:__anonfd9f18ac1403
ICON_ARROW_UP_FILL	$RAYLIB/raygui.h	/^    ICON_ARROW_UP_FILL            = 121,$/;"	e	enum:__anonfd9f18ac1403
ICON_AUDIO	$RAYLIB/raygui.h	/^    ICON_AUDIO                    = 122,$/;"	e	enum:__anonfd9f18ac1403
ICON_BIN	$RAYLIB/raygui.h	/^    ICON_BIN                      = 143,$/;"	e	enum:__anonfd9f18ac1403
ICON_BOX	$RAYLIB/raygui.h	/^    ICON_BOX                      = 80,$/;"	e	enum:__anonfd9f18ac1403
ICON_BOX_BOTTOM	$RAYLIB/raygui.h	/^    ICON_BOX_BOTTOM               = 85,$/;"	e	enum:__anonfd9f18ac1403
ICON_BOX_BOTTOM_LEFT	$RAYLIB/raygui.h	/^    ICON_BOX_BOTTOM_LEFT          = 86,$/;"	e	enum:__anonfd9f18ac1403
ICON_BOX_BOTTOM_RIGHT	$RAYLIB/raygui.h	/^    ICON_BOX_BOTTOM_RIGHT         = 84,$/;"	e	enum:__anonfd9f18ac1403
ICON_BOX_CENTER	$RAYLIB/raygui.h	/^    ICON_BOX_CENTER               = 89,$/;"	e	enum:__anonfd9f18ac1403
ICON_BOX_CIRCLE_MASK	$RAYLIB/raygui.h	/^    ICON_BOX_CIRCLE_MASK          = 90,$/;"	e	enum:__anonfd9f18ac1403
ICON_BOX_CONCENTRIC	$RAYLIB/raygui.h	/^    ICON_BOX_CONCENTRIC           = 110,$/;"	e	enum:__anonfd9f18ac1403
ICON_BOX_CORNERS_BIG	$RAYLIB/raygui.h	/^    ICON_BOX_CORNERS_BIG          = 99,$/;"	e	enum:__anonfd9f18ac1403
ICON_BOX_CORNERS_SMALL	$RAYLIB/raygui.h	/^    ICON_BOX_CORNERS_SMALL        = 98,$/;"	e	enum:__anonfd9f18ac1403
ICON_BOX_DOTS_BIG	$RAYLIB/raygui.h	/^    ICON_BOX_DOTS_BIG             = 109,$/;"	e	enum:__anonfd9f18ac1403
ICON_BOX_DOTS_SMALL	$RAYLIB/raygui.h	/^    ICON_BOX_DOTS_SMALL           = 108,$/;"	e	enum:__anonfd9f18ac1403
ICON_BOX_GRID	$RAYLIB/raygui.h	/^    ICON_BOX_GRID                 = 96,$/;"	e	enum:__anonfd9f18ac1403
ICON_BOX_GRID_BIG	$RAYLIB/raygui.h	/^    ICON_BOX_GRID_BIG             = 111,$/;"	e	enum:__anonfd9f18ac1403
ICON_BOX_LEFT	$RAYLIB/raygui.h	/^    ICON_BOX_LEFT                 = 87,$/;"	e	enum:__anonfd9f18ac1403
ICON_BOX_MULTISIZE	$RAYLIB/raygui.h	/^    ICON_BOX_MULTISIZE            = 102,$/;"	e	enum:__anonfd9f18ac1403
ICON_BOX_RIGHT	$RAYLIB/raygui.h	/^    ICON_BOX_RIGHT                = 83,$/;"	e	enum:__anonfd9f18ac1403
ICON_BOX_TOP	$RAYLIB/raygui.h	/^    ICON_BOX_TOP                  = 81,$/;"	e	enum:__anonfd9f18ac1403
ICON_BOX_TOP_LEFT	$RAYLIB/raygui.h	/^    ICON_BOX_TOP_LEFT             = 88,$/;"	e	enum:__anonfd9f18ac1403
ICON_BOX_TOP_RIGHT	$RAYLIB/raygui.h	/^    ICON_BOX_TOP_RIGHT            = 82,$/;"	e	enum:__anonfd9f18ac1403
ICON_BREAKPOINT_OFF	$RAYLIB/raygui.h	/^    ICON_BREAKPOINT_OFF           = 213,$/;"	e	enum:__anonfd9f18ac1403
ICON_BREAKPOINT_ON	$RAYLIB/raygui.h	/^    ICON_BREAKPOINT_ON            = 212,$/;"	e	enum:__anonfd9f18ac1403
ICON_BRUSH_CLASSIC	$RAYLIB/raygui.h	/^    ICON_BRUSH_CLASSIC            = 24,$/;"	e	enum:__anonfd9f18ac1403
ICON_BRUSH_PAINTER	$RAYLIB/raygui.h	/^    ICON_BRUSH_PAINTER            = 25,$/;"	e	enum:__anonfd9f18ac1403
ICON_BURGER_MENU	$RAYLIB/raygui.h	/^    ICON_BURGER_MENU              = 214,$/;"	e	enum:__anonfd9f18ac1403
ICON_CAMERA	$RAYLIB/raygui.h	/^    ICON_CAMERA                   = 169,$/;"	e	enum:__anonfd9f18ac1403
ICON_CASE_SENSITIVE	$RAYLIB/raygui.h	/^    ICON_CASE_SENSITIVE           = 215,$/;"	e	enum:__anonfd9f18ac1403
ICON_CLOCK	$RAYLIB/raygui.h	/^    ICON_CLOCK                    = 139,$/;"	e	enum:__anonfd9f18ac1403
ICON_COIN	$RAYLIB/raygui.h	/^    ICON_COIN                     = 146,$/;"	e	enum:__anonfd9f18ac1403
ICON_COLOR_BUCKET	$RAYLIB/raygui.h	/^    ICON_COLOR_BUCKET             = 29,$/;"	e	enum:__anonfd9f18ac1403
ICON_COLOR_PICKER	$RAYLIB/raygui.h	/^    ICON_COLOR_PICKER             = 27,$/;"	e	enum:__anonfd9f18ac1403
ICON_CORNER	$RAYLIB/raygui.h	/^    ICON_CORNER                   = 187,$/;"	e	enum:__anonfd9f18ac1403
ICON_CPU	$RAYLIB/raygui.h	/^    ICON_CPU                      = 206,$/;"	e	enum:__anonfd9f18ac1403
ICON_CRACK	$RAYLIB/raygui.h	/^    ICON_CRACK                    = 155,$/;"	e	enum:__anonfd9f18ac1403
ICON_CRACK_POINTS	$RAYLIB/raygui.h	/^    ICON_CRACK_POINTS             = 156,$/;"	e	enum:__anonfd9f18ac1403
ICON_CROP	$RAYLIB/raygui.h	/^    ICON_CROP                     = 36,$/;"	e	enum:__anonfd9f18ac1403
ICON_CROP_ALPHA	$RAYLIB/raygui.h	/^    ICON_CROP_ALPHA               = 37,$/;"	e	enum:__anonfd9f18ac1403
ICON_CROSS	$RAYLIB/raygui.h	/^    ICON_CROSS                    = 113,$/;"	e	enum:__anonfd9f18ac1403
ICON_CROSSLINE	$RAYLIB/raygui.h	/^    ICON_CROSSLINE                = 192,$/;"	e	enum:__anonfd9f18ac1403
ICON_CROSS_SMALL	$RAYLIB/raygui.h	/^    ICON_CROSS_SMALL              = 128,$/;"	e	enum:__anonfd9f18ac1403
ICON_CUBE	$RAYLIB/raygui.h	/^    ICON_CUBE                     = 162,$/;"	e	enum:__anonfd9f18ac1403
ICON_CUBE_FACE_BACK	$RAYLIB/raygui.h	/^    ICON_CUBE_FACE_BACK           = 168,$/;"	e	enum:__anonfd9f18ac1403
ICON_CUBE_FACE_BOTTOM	$RAYLIB/raygui.h	/^    ICON_CUBE_FACE_BOTTOM         = 166,$/;"	e	enum:__anonfd9f18ac1403
ICON_CUBE_FACE_FRONT	$RAYLIB/raygui.h	/^    ICON_CUBE_FACE_FRONT          = 165,$/;"	e	enum:__anonfd9f18ac1403
ICON_CUBE_FACE_LEFT	$RAYLIB/raygui.h	/^    ICON_CUBE_FACE_LEFT           = 164,$/;"	e	enum:__anonfd9f18ac1403
ICON_CUBE_FACE_RIGHT	$RAYLIB/raygui.h	/^    ICON_CUBE_FACE_RIGHT          = 167,$/;"	e	enum:__anonfd9f18ac1403
ICON_CUBE_FACE_TOP	$RAYLIB/raygui.h	/^    ICON_CUBE_FACE_TOP            = 163,$/;"	e	enum:__anonfd9f18ac1403
ICON_CURSOR_CLASSIC	$RAYLIB/raygui.h	/^    ICON_CURSOR_CLASSIC           = 21,$/;"	e	enum:__anonfd9f18ac1403
ICON_CURSOR_HAND	$RAYLIB/raygui.h	/^    ICON_CURSOR_HAND              = 19,$/;"	e	enum:__anonfd9f18ac1403
ICON_CURSOR_MOVE	$RAYLIB/raygui.h	/^    ICON_CURSOR_MOVE              = 52,$/;"	e	enum:__anonfd9f18ac1403
ICON_CURSOR_MOVE_FILL	$RAYLIB/raygui.h	/^    ICON_CURSOR_MOVE_FILL         = 68,$/;"	e	enum:__anonfd9f18ac1403
ICON_CURSOR_POINTER	$RAYLIB/raygui.h	/^    ICON_CURSOR_POINTER           = 20,$/;"	e	enum:__anonfd9f18ac1403
ICON_CURSOR_SCALE	$RAYLIB/raygui.h	/^    ICON_CURSOR_SCALE             = 53,$/;"	e	enum:__anonfd9f18ac1403
ICON_CURSOR_SCALE_FILL	$RAYLIB/raygui.h	/^    ICON_CURSOR_SCALE_FILL        = 69,$/;"	e	enum:__anonfd9f18ac1403
ICON_CURSOR_SCALE_LEFT	$RAYLIB/raygui.h	/^    ICON_CURSOR_SCALE_LEFT        = 55,$/;"	e	enum:__anonfd9f18ac1403
ICON_CURSOR_SCALE_LEFT_FILL	$RAYLIB/raygui.h	/^    ICON_CURSOR_SCALE_LEFT_FILL   = 71,$/;"	e	enum:__anonfd9f18ac1403
ICON_CURSOR_SCALE_RIGHT	$RAYLIB/raygui.h	/^    ICON_CURSOR_SCALE_RIGHT       = 54,$/;"	e	enum:__anonfd9f18ac1403
ICON_CURSOR_SCALE_RIGHT_FILL	$RAYLIB/raygui.h	/^    ICON_CURSOR_SCALE_RIGHT_FILL  = 70,$/;"	e	enum:__anonfd9f18ac1403
ICON_DEMON	$RAYLIB/raygui.h	/^    ICON_DEMON                    = 152,$/;"	e	enum:__anonfd9f18ac1403
ICON_DITHERING	$RAYLIB/raygui.h	/^    ICON_DITHERING                = 94,$/;"	e	enum:__anonfd9f18ac1403
ICON_DOOR	$RAYLIB/raygui.h	/^    ICON_DOOR                     = 158,$/;"	e	enum:__anonfd9f18ac1403
ICON_EMPTYBOX	$RAYLIB/raygui.h	/^    ICON_EMPTYBOX                 = 63,$/;"	e	enum:__anonfd9f18ac1403
ICON_EMPTYBOX_SMALL	$RAYLIB/raygui.h	/^    ICON_EMPTYBOX_SMALL           = 79,$/;"	e	enum:__anonfd9f18ac1403
ICON_EXIT	$RAYLIB/raygui.h	/^    ICON_EXIT                     = 159,$/;"	e	enum:__anonfd9f18ac1403
ICON_EXPLOSION	$RAYLIB/raygui.h	/^    ICON_EXPLOSION                = 147,$/;"	e	enum:__anonfd9f18ac1403
ICON_EYE_OFF	$RAYLIB/raygui.h	/^    ICON_EYE_OFF                  = 45,$/;"	e	enum:__anonfd9f18ac1403
ICON_EYE_ON	$RAYLIB/raygui.h	/^    ICON_EYE_ON                   = 44,$/;"	e	enum:__anonfd9f18ac1403
ICON_FILE	$RAYLIB/raygui.h	/^    ICON_FILE                     = 218,$/;"	e	enum:__anonfd9f18ac1403
ICON_FILETYPE_ALPHA	$RAYLIB/raygui.h	/^    ICON_FILETYPE_ALPHA           = 194,$/;"	e	enum:__anonfd9f18ac1403
ICON_FILETYPE_AUDIO	$RAYLIB/raygui.h	/^    ICON_FILETYPE_AUDIO           = 11,$/;"	e	enum:__anonfd9f18ac1403
ICON_FILETYPE_BINARY	$RAYLIB/raygui.h	/^    ICON_FILETYPE_BINARY          = 200,$/;"	e	enum:__anonfd9f18ac1403
ICON_FILETYPE_HOME	$RAYLIB/raygui.h	/^    ICON_FILETYPE_HOME            = 195,$/;"	e	enum:__anonfd9f18ac1403
ICON_FILETYPE_IMAGE	$RAYLIB/raygui.h	/^    ICON_FILETYPE_IMAGE           = 12,$/;"	e	enum:__anonfd9f18ac1403
ICON_FILETYPE_INFO	$RAYLIB/raygui.h	/^    ICON_FILETYPE_INFO            = 15,$/;"	e	enum:__anonfd9f18ac1403
ICON_FILETYPE_PLAY	$RAYLIB/raygui.h	/^    ICON_FILETYPE_PLAY            = 13,$/;"	e	enum:__anonfd9f18ac1403
ICON_FILETYPE_TEXT	$RAYLIB/raygui.h	/^    ICON_FILETYPE_TEXT            = 10,$/;"	e	enum:__anonfd9f18ac1403
ICON_FILETYPE_VIDEO	$RAYLIB/raygui.h	/^    ICON_FILETYPE_VIDEO           = 14,$/;"	e	enum:__anonfd9f18ac1403
ICON_FILE_ADD	$RAYLIB/raygui.h	/^    ICON_FILE_ADD                 = 8,$/;"	e	enum:__anonfd9f18ac1403
ICON_FILE_COPY	$RAYLIB/raygui.h	/^    ICON_FILE_COPY                = 16,$/;"	e	enum:__anonfd9f18ac1403
ICON_FILE_CUT	$RAYLIB/raygui.h	/^    ICON_FILE_CUT                 = 17,$/;"	e	enum:__anonfd9f18ac1403
ICON_FILE_DELETE	$RAYLIB/raygui.h	/^    ICON_FILE_DELETE              = 9,$/;"	e	enum:__anonfd9f18ac1403
ICON_FILE_EXPORT	$RAYLIB/raygui.h	/^    ICON_FILE_EXPORT              = 7,$/;"	e	enum:__anonfd9f18ac1403
ICON_FILE_NEW	$RAYLIB/raygui.h	/^    ICON_FILE_NEW                 = 203,$/;"	e	enum:__anonfd9f18ac1403
ICON_FILE_OPEN	$RAYLIB/raygui.h	/^    ICON_FILE_OPEN                = 5,$/;"	e	enum:__anonfd9f18ac1403
ICON_FILE_PASTE	$RAYLIB/raygui.h	/^    ICON_FILE_PASTE               = 18,$/;"	e	enum:__anonfd9f18ac1403
ICON_FILE_SAVE	$RAYLIB/raygui.h	/^    ICON_FILE_SAVE                = 6,$/;"	e	enum:__anonfd9f18ac1403
ICON_FILE_SAVE_CLASSIC	$RAYLIB/raygui.h	/^    ICON_FILE_SAVE_CLASSIC        = 2,$/;"	e	enum:__anonfd9f18ac1403
ICON_FILTER	$RAYLIB/raygui.h	/^    ICON_FILTER                   = 47,$/;"	e	enum:__anonfd9f18ac1403
ICON_FILTER_BILINEAR	$RAYLIB/raygui.h	/^    ICON_FILTER_BILINEAR          = 35,$/;"	e	enum:__anonfd9f18ac1403
ICON_FILTER_POINT	$RAYLIB/raygui.h	/^    ICON_FILTER_POINT             = 34,$/;"	e	enum:__anonfd9f18ac1403
ICON_FILTER_TOP	$RAYLIB/raygui.h	/^    ICON_FILTER_TOP               = 46,$/;"	e	enum:__anonfd9f18ac1403
ICON_FOLDER	$RAYLIB/raygui.h	/^    ICON_FOLDER                   = 217,$/;"	e	enum:__anonfd9f18ac1403
ICON_FOLDER_ADD	$RAYLIB/raygui.h	/^    ICON_FOLDER_ADD               = 204,$/;"	e	enum:__anonfd9f18ac1403
ICON_FOLDER_FILE_OPEN	$RAYLIB/raygui.h	/^    ICON_FOLDER_FILE_OPEN         = 1,$/;"	e	enum:__anonfd9f18ac1403
ICON_FOLDER_OPEN	$RAYLIB/raygui.h	/^    ICON_FOLDER_OPEN              = 3,$/;"	e	enum:__anonfd9f18ac1403
ICON_FOLDER_SAVE	$RAYLIB/raygui.h	/^    ICON_FOLDER_SAVE              = 4,$/;"	e	enum:__anonfd9f18ac1403
ICON_FOUR_BOXES	$RAYLIB/raygui.h	/^    ICON_FOUR_BOXES               = 100,$/;"	e	enum:__anonfd9f18ac1403
ICON_FX	$RAYLIB/raygui.h	/^    ICON_FX                       = 123,$/;"	e	enum:__anonfd9f18ac1403
ICON_GEAR	$RAYLIB/raygui.h	/^    ICON_GEAR                     = 141,$/;"	e	enum:__anonfd9f18ac1403
ICON_GEAR_BIG	$RAYLIB/raygui.h	/^    ICON_GEAR_BIG                 = 142,$/;"	e	enum:__anonfd9f18ac1403
ICON_GEAR_EX	$RAYLIB/raygui.h	/^    ICON_GEAR_EX                  = 154,$/;"	e	enum:__anonfd9f18ac1403
ICON_GRID	$RAYLIB/raygui.h	/^    ICON_GRID                     = 97,$/;"	e	enum:__anonfd9f18ac1403
ICON_GRID_FILL	$RAYLIB/raygui.h	/^    ICON_GRID_FILL                = 101,$/;"	e	enum:__anonfd9f18ac1403
ICON_HAND_POINTER	$RAYLIB/raygui.h	/^    ICON_HAND_POINTER             = 144,$/;"	e	enum:__anonfd9f18ac1403
ICON_HEART	$RAYLIB/raygui.h	/^    ICON_HEART                    = 186,$/;"	e	enum:__anonfd9f18ac1403
ICON_HELP	$RAYLIB/raygui.h	/^    ICON_HELP                     = 193,$/;"	e	enum:__anonfd9f18ac1403
ICON_HELP_BOX	$RAYLIB/raygui.h	/^    ICON_HELP_BOX                 = 221,$/;"	e	enum:__anonfd9f18ac1403
ICON_HEX	$RAYLIB/raygui.h	/^    ICON_HEX                      = 201,$/;"	e	enum:__anonfd9f18ac1403
ICON_HIDPI	$RAYLIB/raygui.h	/^    ICON_HIDPI                    = 199,$/;"	e	enum:__anonfd9f18ac1403
ICON_HOUSE	$RAYLIB/raygui.h	/^    ICON_HOUSE                    = 185,$/;"	e	enum:__anonfd9f18ac1403
ICON_INFO	$RAYLIB/raygui.h	/^    ICON_INFO                     = 191,$/;"	e	enum:__anonfd9f18ac1403
ICON_INFO_BOX	$RAYLIB/raygui.h	/^    ICON_INFO_BOX                 = 222,$/;"	e	enum:__anonfd9f18ac1403
ICON_KEY	$RAYLIB/raygui.h	/^    ICON_KEY                      = 151,$/;"	e	enum:__anonfd9f18ac1403
ICON_LASER	$RAYLIB/raygui.h	/^    ICON_LASER                    = 145,$/;"	e	enum:__anonfd9f18ac1403
ICON_LAYERS	$RAYLIB/raygui.h	/^    ICON_LAYERS                   = 197,$/;"	e	enum:__anonfd9f18ac1403
ICON_LAYERS_VISIBLE	$RAYLIB/raygui.h	/^    ICON_LAYERS_VISIBLE           = 196,$/;"	e	enum:__anonfd9f18ac1403
ICON_LENS	$RAYLIB/raygui.h	/^    ICON_LENS                     = 42,$/;"	e	enum:__anonfd9f18ac1403
ICON_LENS_BIG	$RAYLIB/raygui.h	/^    ICON_LENS_BIG                 = 43,$/;"	e	enum:__anonfd9f18ac1403
ICON_LIFE_BARS	$RAYLIB/raygui.h	/^    ICON_LIFE_BARS                = 190,$/;"	e	enum:__anonfd9f18ac1403
ICON_LINK	$RAYLIB/raygui.h	/^    ICON_LINK                     = 174,$/;"	e	enum:__anonfd9f18ac1403
ICON_LINK_BOXES	$RAYLIB/raygui.h	/^    ICON_LINK_BOXES               = 172,$/;"	e	enum:__anonfd9f18ac1403
ICON_LINK_BROKE	$RAYLIB/raygui.h	/^    ICON_LINK_BROKE               = 175,$/;"	e	enum:__anonfd9f18ac1403
ICON_LINK_MULTI	$RAYLIB/raygui.h	/^    ICON_LINK_MULTI               = 173,$/;"	e	enum:__anonfd9f18ac1403
ICON_LINK_NET	$RAYLIB/raygui.h	/^    ICON_LINK_NET                 = 171,$/;"	e	enum:__anonfd9f18ac1403
ICON_LOCK_CLOSE	$RAYLIB/raygui.h	/^    ICON_LOCK_CLOSE               = 137,$/;"	e	enum:__anonfd9f18ac1403
ICON_LOCK_OPEN	$RAYLIB/raygui.h	/^    ICON_LOCK_OPEN                = 138,$/;"	e	enum:__anonfd9f18ac1403
ICON_MAGNET	$RAYLIB/raygui.h	/^    ICON_MAGNET                   = 136,$/;"	e	enum:__anonfd9f18ac1403
ICON_MAILBOX	$RAYLIB/raygui.h	/^    ICON_MAILBOX                  = 180,$/;"	e	enum:__anonfd9f18ac1403
ICON_MIPMAPS	$RAYLIB/raygui.h	/^    ICON_MIPMAPS                  = 95,$/;"	e	enum:__anonfd9f18ac1403
ICON_MODE_2D	$RAYLIB/raygui.h	/^    ICON_MODE_2D                  = 160,$/;"	e	enum:__anonfd9f18ac1403
ICON_MODE_3D	$RAYLIB/raygui.h	/^    ICON_MODE_3D                  = 161,$/;"	e	enum:__anonfd9f18ac1403
ICON_MONITOR	$RAYLIB/raygui.h	/^    ICON_MONITOR                  = 181,$/;"	e	enum:__anonfd9f18ac1403
ICON_MUTATE	$RAYLIB/raygui.h	/^    ICON_MUTATE                   = 59,$/;"	e	enum:__anonfd9f18ac1403
ICON_MUTATE_FILL	$RAYLIB/raygui.h	/^    ICON_MUTATE_FILL              = 75,$/;"	e	enum:__anonfd9f18ac1403
ICON_NONE	$RAYLIB/raygui.h	/^    ICON_NONE                     = 0,$/;"	e	enum:__anonfd9f18ac1403
ICON_NOTEBOOK	$RAYLIB/raygui.h	/^    ICON_NOTEBOOK                 = 177,$/;"	e	enum:__anonfd9f18ac1403
ICON_OK_TICK	$RAYLIB/raygui.h	/^    ICON_OK_TICK                  = 112,$/;"	e	enum:__anonfd9f18ac1403
ICON_PENCIL	$RAYLIB/raygui.h	/^    ICON_PENCIL                   = 22,$/;"	e	enum:__anonfd9f18ac1403
ICON_PENCIL_BIG	$RAYLIB/raygui.h	/^    ICON_PENCIL_BIG               = 23,$/;"	e	enum:__anonfd9f18ac1403
ICON_PHOTO_CAMERA	$RAYLIB/raygui.h	/^    ICON_PHOTO_CAMERA             = 183,$/;"	e	enum:__anonfd9f18ac1403
ICON_PHOTO_CAMERA_FLASH	$RAYLIB/raygui.h	/^    ICON_PHOTO_CAMERA_FLASH       = 184,$/;"	e	enum:__anonfd9f18ac1403
ICON_PLAYER	$RAYLIB/raygui.h	/^    ICON_PLAYER                   = 149,$/;"	e	enum:__anonfd9f18ac1403
ICON_PLAYER_JUMP	$RAYLIB/raygui.h	/^    ICON_PLAYER_JUMP              = 150,$/;"	e	enum:__anonfd9f18ac1403
ICON_PLAYER_NEXT	$RAYLIB/raygui.h	/^    ICON_PLAYER_NEXT              = 134,$/;"	e	enum:__anonfd9f18ac1403
ICON_PLAYER_PAUSE	$RAYLIB/raygui.h	/^    ICON_PLAYER_PAUSE             = 132,$/;"	e	enum:__anonfd9f18ac1403
ICON_PLAYER_PLAY	$RAYLIB/raygui.h	/^    ICON_PLAYER_PLAY              = 131,$/;"	e	enum:__anonfd9f18ac1403
ICON_PLAYER_PLAY_BACK	$RAYLIB/raygui.h	/^    ICON_PLAYER_PLAY_BACK         = 130,$/;"	e	enum:__anonfd9f18ac1403
ICON_PLAYER_PREVIOUS	$RAYLIB/raygui.h	/^    ICON_PLAYER_PREVIOUS          = 129,$/;"	e	enum:__anonfd9f18ac1403
ICON_PLAYER_RECORD	$RAYLIB/raygui.h	/^    ICON_PLAYER_RECORD            = 135,$/;"	e	enum:__anonfd9f18ac1403
ICON_PLAYER_STOP	$RAYLIB/raygui.h	/^    ICON_PLAYER_STOP              = 133,$/;"	e	enum:__anonfd9f18ac1403
ICON_POT	$RAYLIB/raygui.h	/^    ICON_POT                      = 91,$/;"	e	enum:__anonfd9f18ac1403
ICON_PRINTER	$RAYLIB/raygui.h	/^    ICON_PRINTER                  = 182,$/;"	e	enum:__anonfd9f18ac1403
ICON_REDO	$RAYLIB/raygui.h	/^    ICON_REDO                     = 57,$/;"	e	enum:__anonfd9f18ac1403
ICON_REDO_FILL	$RAYLIB/raygui.h	/^    ICON_REDO_FILL                = 73,$/;"	e	enum:__anonfd9f18ac1403
ICON_REG_EXP	$RAYLIB/raygui.h	/^    ICON_REG_EXP                  = 216,$/;"	e	enum:__anonfd9f18ac1403
ICON_REPEAT	$RAYLIB/raygui.h	/^    ICON_REPEAT                   = 61,$/;"	e	enum:__anonfd9f18ac1403
ICON_REPEAT_FILL	$RAYLIB/raygui.h	/^    ICON_REPEAT_FILL              = 77,$/;"	e	enum:__anonfd9f18ac1403
ICON_REREDO	$RAYLIB/raygui.h	/^    ICON_REREDO                   = 58,$/;"	e	enum:__anonfd9f18ac1403
ICON_REREDO_FILL	$RAYLIB/raygui.h	/^    ICON_REREDO_FILL              = 74,$/;"	e	enum:__anonfd9f18ac1403
ICON_RESIZE	$RAYLIB/raygui.h	/^    ICON_RESIZE                   = 33,$/;"	e	enum:__anonfd9f18ac1403
ICON_RESTART	$RAYLIB/raygui.h	/^    ICON_RESTART                  = 211,$/;"	e	enum:__anonfd9f18ac1403
ICON_ROM	$RAYLIB/raygui.h	/^    ICON_ROM                      = 207,$/;"	e	enum:__anonfd9f18ac1403
ICON_ROTATE	$RAYLIB/raygui.h	/^    ICON_ROTATE                   = 60,$/;"	e	enum:__anonfd9f18ac1403
ICON_ROTATE_FILL	$RAYLIB/raygui.h	/^    ICON_ROTATE_FILL              = 76,$/;"	e	enum:__anonfd9f18ac1403
ICON_RUBBER	$RAYLIB/raygui.h	/^    ICON_RUBBER                   = 28,$/;"	e	enum:__anonfd9f18ac1403
ICON_SAND_TIMER	$RAYLIB/raygui.h	/^    ICON_SAND_TIMER               = 219,$/;"	e	enum:__anonfd9f18ac1403
ICON_SCALE	$RAYLIB/raygui.h	/^    ICON_SCALE                    = 32,$/;"	e	enum:__anonfd9f18ac1403
ICON_SHIELD	$RAYLIB/raygui.h	/^    ICON_SHIELD                   = 202,$/;"	e	enum:__anonfd9f18ac1403
ICON_SHUFFLE	$RAYLIB/raygui.h	/^    ICON_SHUFFLE                  = 62,$/;"	e	enum:__anonfd9f18ac1403
ICON_SHUFFLE_FILL	$RAYLIB/raygui.h	/^    ICON_SHUFFLE_FILL             = 78,$/;"	e	enum:__anonfd9f18ac1403
ICON_SPECIAL	$RAYLIB/raygui.h	/^    ICON_SPECIAL                  = 170,$/;"	e	enum:__anonfd9f18ac1403
ICON_SQUARE_TOGGLE	$RAYLIB/raygui.h	/^    ICON_SQUARE_TOGGLE            = 38,$/;"	e	enum:__anonfd9f18ac1403
ICON_STAR	$RAYLIB/raygui.h	/^    ICON_STAR                     = 157,$/;"	e	enum:__anonfd9f18ac1403
ICON_STEP_INTO	$RAYLIB/raygui.h	/^    ICON_STEP_INTO                = 209,$/;"	e	enum:__anonfd9f18ac1403
ICON_STEP_OUT	$RAYLIB/raygui.h	/^    ICON_STEP_OUT                 = 210,$/;"	e	enum:__anonfd9f18ac1403
ICON_STEP_OVER	$RAYLIB/raygui.h	/^    ICON_STEP_OVER                = 208,$/;"	e	enum:__anonfd9f18ac1403
ICON_SUITCASE	$RAYLIB/raygui.h	/^    ICON_SUITCASE                 = 178,$/;"	e	enum:__anonfd9f18ac1403
ICON_SUITCASE_ZIP	$RAYLIB/raygui.h	/^    ICON_SUITCASE_ZIP             = 179,$/;"	e	enum:__anonfd9f18ac1403
ICON_SYMMETRY	$RAYLIB/raygui.h	/^    ICON_SYMMETRY                 = 39,$/;"	e	enum:__anonfd9f18ac1403
ICON_SYMMETRY_HORIZONTAL	$RAYLIB/raygui.h	/^    ICON_SYMMETRY_HORIZONTAL      = 40,$/;"	e	enum:__anonfd9f18ac1403
ICON_SYMMETRY_VERTICAL	$RAYLIB/raygui.h	/^    ICON_SYMMETRY_VERTICAL        = 41,$/;"	e	enum:__anonfd9f18ac1403
ICON_TARGET	$RAYLIB/raygui.h	/^    ICON_TARGET                   = 64,$/;"	e	enum:__anonfd9f18ac1403
ICON_TARGET_BIG	$RAYLIB/raygui.h	/^    ICON_TARGET_BIG               = 50,$/;"	e	enum:__anonfd9f18ac1403
ICON_TARGET_BIG_FILL	$RAYLIB/raygui.h	/^    ICON_TARGET_BIG_FILL          = 66,$/;"	e	enum:__anonfd9f18ac1403
ICON_TARGET_MOVE	$RAYLIB/raygui.h	/^    ICON_TARGET_MOVE              = 51,$/;"	e	enum:__anonfd9f18ac1403
ICON_TARGET_MOVE_FILL	$RAYLIB/raygui.h	/^    ICON_TARGET_MOVE_FILL         = 67,$/;"	e	enum:__anonfd9f18ac1403
ICON_TARGET_POINT	$RAYLIB/raygui.h	/^    ICON_TARGET_POINT             = 48,$/;"	e	enum:__anonfd9f18ac1403
ICON_TARGET_SMALL	$RAYLIB/raygui.h	/^    ICON_TARGET_SMALL             = 49,$/;"	e	enum:__anonfd9f18ac1403
ICON_TARGET_SMALL_FILL	$RAYLIB/raygui.h	/^    ICON_TARGET_SMALL_FILL        = 65,$/;"	e	enum:__anonfd9f18ac1403
ICON_TEXT_A	$RAYLIB/raygui.h	/^    ICON_TEXT_A                   = 31,$/;"	e	enum:__anonfd9f18ac1403
ICON_TEXT_NOTES	$RAYLIB/raygui.h	/^    ICON_TEXT_NOTES               = 176,$/;"	e	enum:__anonfd9f18ac1403
ICON_TEXT_PADDING	$RAYLIB/raygui.h	/^        #define ICON_TEXT_PADDING /;"	d
ICON_TEXT_POPUP	$RAYLIB/raygui.h	/^    ICON_TEXT_POPUP               = 153,$/;"	e	enum:__anonfd9f18ac1403
ICON_TEXT_T	$RAYLIB/raygui.h	/^    ICON_TEXT_T                   = 30,$/;"	e	enum:__anonfd9f18ac1403
ICON_TOOLS	$RAYLIB/raygui.h	/^    ICON_TOOLS                    = 140,$/;"	e	enum:__anonfd9f18ac1403
ICON_UNDO	$RAYLIB/raygui.h	/^    ICON_UNDO                     = 56,$/;"	e	enum:__anonfd9f18ac1403
ICON_UNDO_FILL	$RAYLIB/raygui.h	/^    ICON_UNDO_FILL                = 72,$/;"	e	enum:__anonfd9f18ac1403
ICON_VERTICAL_BARS	$RAYLIB/raygui.h	/^    ICON_VERTICAL_BARS            = 188,$/;"	e	enum:__anonfd9f18ac1403
ICON_VERTICAL_BARS_FILL	$RAYLIB/raygui.h	/^    ICON_VERTICAL_BARS_FILL       = 189,$/;"	e	enum:__anonfd9f18ac1403
ICON_WARNING	$RAYLIB/raygui.h	/^    ICON_WARNING                  = 220,$/;"	e	enum:__anonfd9f18ac1403
ICON_WATER_DROP	$RAYLIB/raygui.h	/^    ICON_WATER_DROP               = 26,$/;"	e	enum:__anonfd9f18ac1403
ICON_WAVE	$RAYLIB/raygui.h	/^    ICON_WAVE                     = 124,$/;"	e	enum:__anonfd9f18ac1403
ICON_WAVE_SINUS	$RAYLIB/raygui.h	/^    ICON_WAVE_SINUS               = 125,$/;"	e	enum:__anonfd9f18ac1403
ICON_WAVE_SQUARE	$RAYLIB/raygui.h	/^    ICON_WAVE_SQUARE              = 126,$/;"	e	enum:__anonfd9f18ac1403
ICON_WAVE_TRIANGULAR	$RAYLIB/raygui.h	/^    ICON_WAVE_TRIANGULAR          = 127,$/;"	e	enum:__anonfd9f18ac1403
ICON_WINDOW	$RAYLIB/raygui.h	/^    ICON_WINDOW                   = 198,$/;"	e	enum:__anonfd9f18ac1403
ICON_ZOOM_ALL	$RAYLIB/raygui.h	/^    ICON_ZOOM_ALL                 = 106,$/;"	e	enum:__anonfd9f18ac1403
ICON_ZOOM_BIG	$RAYLIB/raygui.h	/^    ICON_ZOOM_BIG                 = 105,$/;"	e	enum:__anonfd9f18ac1403
ICON_ZOOM_CENTER	$RAYLIB/raygui.h	/^    ICON_ZOOM_CENTER              = 107,$/;"	e	enum:__anonfd9f18ac1403
ICON_ZOOM_MEDIUM	$RAYLIB/raygui.h	/^    ICON_ZOOM_MEDIUM              = 104,$/;"	e	enum:__anonfd9f18ac1403
ICON_ZOOM_SMALL	$RAYLIB/raygui.h	/^    ICON_ZOOM_SMALL               = 103,$/;"	e	enum:__anonfd9f18ac1403
Image	$RAYLIB/raygui.h	/^    } Image;$/;"	t	typeref:struct:Image
Image	$RAYLIB/raylib.h	/^} Image;$/;"	t	typeref:struct:Image
ImageAlphaClear	$RAYLIB/raylib.h	/^RLAPI void ImageAlphaClear(Image *image, Color color, float threshold);                         /;"	p	typeref:typename:RLAPI void	signature:(Image * image,Color color,float threshold)
ImageAlphaCrop	$RAYLIB/raylib.h	/^RLAPI void ImageAlphaCrop(Image *image, float threshold);                                       /;"	p	typeref:typename:RLAPI void	signature:(Image * image,float threshold)
ImageAlphaMask	$RAYLIB/raylib.h	/^RLAPI void ImageAlphaMask(Image *image, Image alphaMask);                                       /;"	p	typeref:typename:RLAPI void	signature:(Image * image,Image alphaMask)
ImageAlphaPremultiply	$RAYLIB/raylib.h	/^RLAPI void ImageAlphaPremultiply(Image *image);                                                 /;"	p	typeref:typename:RLAPI void	signature:(Image * image)
ImageBlurGaussian	$RAYLIB/raylib.h	/^RLAPI void ImageBlurGaussian(Image *image, int blurSize);                                       /;"	p	typeref:typename:RLAPI void	signature:(Image * image,int blurSize)
ImageClearBackground	$RAYLIB/raylib.h	/^RLAPI void ImageClearBackground(Image *dst, Color color);                                       /;"	p	typeref:typename:RLAPI void	signature:(Image * dst,Color color)
ImageColorBrightness	$RAYLIB/raylib.h	/^RLAPI void ImageColorBrightness(Image *image, int brightness);                                  /;"	p	typeref:typename:RLAPI void	signature:(Image * image,int brightness)
ImageColorContrast	$RAYLIB/raylib.h	/^RLAPI void ImageColorContrast(Image *image, float contrast);                                    /;"	p	typeref:typename:RLAPI void	signature:(Image * image,float contrast)
ImageColorGrayscale	$RAYLIB/raylib.h	/^RLAPI void ImageColorGrayscale(Image *image);                                                   /;"	p	typeref:typename:RLAPI void	signature:(Image * image)
ImageColorInvert	$RAYLIB/raylib.h	/^RLAPI void ImageColorInvert(Image *image);                                                      /;"	p	typeref:typename:RLAPI void	signature:(Image * image)
ImageColorReplace	$RAYLIB/raylib.h	/^RLAPI void ImageColorReplace(Image *image, Color color, Color replace);                         /;"	p	typeref:typename:RLAPI void	signature:(Image * image,Color color,Color replace)
ImageColorTint	$RAYLIB/raylib.h	/^RLAPI void ImageColorTint(Image *image, Color color);                                           /;"	p	typeref:typename:RLAPI void	signature:(Image * image,Color color)
ImageCopy	$RAYLIB/raylib.h	/^RLAPI Image ImageCopy(Image image);                                                             /;"	p	typeref:typename:RLAPI Image	signature:(Image image)
ImageCrop	$RAYLIB/raylib.h	/^RLAPI void ImageCrop(Image *image, Rectangle crop);                                             /;"	p	typeref:typename:RLAPI void	signature:(Image * image,Rectangle crop)
ImageDither	$RAYLIB/raylib.h	/^RLAPI void ImageDither(Image *image, int rBpp, int gBpp, int bBpp, int aBpp);                   /;"	p	typeref:typename:RLAPI void	signature:(Image * image,int rBpp,int gBpp,int bBpp,int aBpp)
ImageDraw	$RAYLIB/raylib.h	/^RLAPI void ImageDraw(Image *dst, Image src, Rectangle srcRec, Rectangle dstRec, Color tint);    /;"	p	typeref:typename:RLAPI void	signature:(Image * dst,Image src,Rectangle srcRec,Rectangle dstRec,Color tint)
ImageDrawCircle	$RAYLIB/raylib.h	/^RLAPI void ImageDrawCircle(Image *dst, int centerX, int centerY, int radius, Color color);      /;"	p	typeref:typename:RLAPI void	signature:(Image * dst,int centerX,int centerY,int radius,Color color)
ImageDrawCircleLines	$RAYLIB/raylib.h	/^RLAPI void ImageDrawCircleLines(Image *dst, int centerX, int centerY, int radius, Color color); /;"	p	typeref:typename:RLAPI void	signature:(Image * dst,int centerX,int centerY,int radius,Color color)
ImageDrawCircleLinesV	$RAYLIB/raylib.h	/^RLAPI void ImageDrawCircleLinesV(Image *dst, Vector2 center, int radius, Color color);          /;"	p	typeref:typename:RLAPI void	signature:(Image * dst,Vector2 center,int radius,Color color)
ImageDrawCircleV	$RAYLIB/raylib.h	/^RLAPI void ImageDrawCircleV(Image *dst, Vector2 center, int radius, Color color);               /;"	p	typeref:typename:RLAPI void	signature:(Image * dst,Vector2 center,int radius,Color color)
ImageDrawLine	$RAYLIB/raylib.h	/^RLAPI void ImageDrawLine(Image *dst, int startPosX, int startPosY, int endPosX, int endPosY, Col/;"	p	typeref:typename:RLAPI void	signature:(Image * dst,int startPosX,int startPosY,int endPosX,int endPosY,Color color)
ImageDrawLineV	$RAYLIB/raylib.h	/^RLAPI void ImageDrawLineV(Image *dst, Vector2 start, Vector2 end, Color color);                 /;"	p	typeref:typename:RLAPI void	signature:(Image * dst,Vector2 start,Vector2 end,Color color)
ImageDrawPixel	$RAYLIB/raylib.h	/^RLAPI void ImageDrawPixel(Image *dst, int posX, int posY, Color color);                         /;"	p	typeref:typename:RLAPI void	signature:(Image * dst,int posX,int posY,Color color)
ImageDrawPixelV	$RAYLIB/raylib.h	/^RLAPI void ImageDrawPixelV(Image *dst, Vector2 position, Color color);                          /;"	p	typeref:typename:RLAPI void	signature:(Image * dst,Vector2 position,Color color)
ImageDrawRectangle	$RAYLIB/raylib.h	/^RLAPI void ImageDrawRectangle(Image *dst, int posX, int posY, int width, int height, Color color/;"	p	typeref:typename:RLAPI void	signature:(Image * dst,int posX,int posY,int width,int height,Color color)
ImageDrawRectangleLines	$RAYLIB/raylib.h	/^RLAPI void ImageDrawRectangleLines(Image *dst, Rectangle rec, int thick, Color color);          /;"	p	typeref:typename:RLAPI void	signature:(Image * dst,Rectangle rec,int thick,Color color)
ImageDrawRectangleRec	$RAYLIB/raylib.h	/^RLAPI void ImageDrawRectangleRec(Image *dst, Rectangle rec, Color color);                       /;"	p	typeref:typename:RLAPI void	signature:(Image * dst,Rectangle rec,Color color)
ImageDrawRectangleV	$RAYLIB/raylib.h	/^RLAPI void ImageDrawRectangleV(Image *dst, Vector2 position, Vector2 size, Color color);        /;"	p	typeref:typename:RLAPI void	signature:(Image * dst,Vector2 position,Vector2 size,Color color)
ImageDrawText	$RAYLIB/raylib.h	/^RLAPI void ImageDrawText(Image *dst, const char *text, int posX, int posY, int fontSize, Color c/;"	p	typeref:typename:RLAPI void	signature:(Image * dst,const char * text,int posX,int posY,int fontSize,Color color)
ImageDrawTextEx	$RAYLIB/raylib.h	/^RLAPI void ImageDrawTextEx(Image *dst, Font font, const char *text, Vector2 position, float font/;"	p	typeref:typename:RLAPI void	signature:(Image * dst,Font font,const char * text,Vector2 position,float fontSize,float spacing,Color tint)
ImageFlipHorizontal	$RAYLIB/raylib.h	/^RLAPI void ImageFlipHorizontal(Image *image);                                                   /;"	p	typeref:typename:RLAPI void	signature:(Image * image)
ImageFlipVertical	$RAYLIB/raylib.h	/^RLAPI void ImageFlipVertical(Image *image);                                                     /;"	p	typeref:typename:RLAPI void	signature:(Image * image)
ImageFormat	$RAYLIB/raylib.h	/^RLAPI void ImageFormat(Image *image, int newFormat);                                            /;"	p	typeref:typename:RLAPI void	signature:(Image * image,int newFormat)
ImageFromImage	$RAYLIB/raylib.h	/^RLAPI Image ImageFromImage(Image image, Rectangle rec);                                         /;"	p	typeref:typename:RLAPI Image	signature:(Image image,Rectangle rec)
ImageKernelConvolution	$RAYLIB/raylib.h	/^RLAPI void ImageKernelConvolution(Image *image, float* kernel, int kernelSize);                 /;"	p	typeref:typename:RLAPI void	signature:(Image * image,float * kernel,int kernelSize)
ImageMipmaps	$RAYLIB/raylib.h	/^RLAPI void ImageMipmaps(Image *image);                                                          /;"	p	typeref:typename:RLAPI void	signature:(Image * image)
ImageResize	$RAYLIB/raylib.h	/^RLAPI void ImageResize(Image *image, int newWidth, int newHeight);                              /;"	p	typeref:typename:RLAPI void	signature:(Image * image,int newWidth,int newHeight)
ImageResizeCanvas	$RAYLIB/raylib.h	/^RLAPI void ImageResizeCanvas(Image *image, int newWidth, int newHeight, int offsetX, int offsetY/;"	p	typeref:typename:RLAPI void	signature:(Image * image,int newWidth,int newHeight,int offsetX,int offsetY,Color fill)
ImageResizeNN	$RAYLIB/raylib.h	/^RLAPI void ImageResizeNN(Image *image, int newWidth,int newHeight);                             /;"	p	typeref:typename:RLAPI void	signature:(Image * image,int newWidth,int newHeight)
ImageRotate	$RAYLIB/raylib.h	/^RLAPI void ImageRotate(Image *image, int degrees);                                              /;"	p	typeref:typename:RLAPI void	signature:(Image * image,int degrees)
ImageRotateCCW	$RAYLIB/raylib.h	/^RLAPI void ImageRotateCCW(Image *image);                                                        /;"	p	typeref:typename:RLAPI void	signature:(Image * image)
ImageRotateCW	$RAYLIB/raylib.h	/^RLAPI void ImageRotateCW(Image *image);                                                         /;"	p	typeref:typename:RLAPI void	signature:(Image * image)
ImageText	$RAYLIB/raylib.h	/^RLAPI Image ImageText(const char *text, int fontSize, Color color);                             /;"	p	typeref:typename:RLAPI Image	signature:(const char * text,int fontSize,Color color)
ImageTextEx	$RAYLIB/raylib.h	/^RLAPI Image ImageTextEx(Font font, const char *text, float fontSize, float spacing, Color tint);/;"	p	typeref:typename:RLAPI Image	signature:(Font font,const char * text,float fontSize,float spacing,Color tint)
ImageToPOT	$RAYLIB/raylib.h	/^RLAPI void ImageToPOT(Image *image, Color fill);                                                /;"	p	typeref:typename:RLAPI void	signature:(Image * image,Color fill)
InitAudioDevice	$RAYLIB/raylib.h	/^RLAPI void InitAudioDevice(void);                                     \/\/ Initialize audio devi/;"	p	typeref:typename:RLAPI void	signature:(void)
InitWindow	$RAYLIB/raylib.h	/^RLAPI void InitWindow(int width, int height, const char *title);  \/\/ Initialize window and Ope/;"	p	typeref:typename:RLAPI void	signature:(int width,int height,const char * title)
IsAudioDeviceReady	$RAYLIB/raylib.h	/^RLAPI bool IsAudioDeviceReady(void);                                  \/\/ Check if audio device/;"	p	typeref:typename:RLAPI bool	signature:(void)
IsAudioStreamPlaying	$RAYLIB/raylib.h	/^RLAPI bool IsAudioStreamPlaying(AudioStream stream);                  \/\/ Check if audio stream/;"	p	typeref:typename:RLAPI bool	signature:(AudioStream stream)
IsAudioStreamProcessed	$RAYLIB/raylib.h	/^RLAPI bool IsAudioStreamProcessed(AudioStream stream);                \/\/ Check if any audio st/;"	p	typeref:typename:RLAPI bool	signature:(AudioStream stream)
IsAudioStreamReady	$RAYLIB/raylib.h	/^RLAPI bool IsAudioStreamReady(AudioStream stream);                    \/\/ Checks if an audio st/;"	p	typeref:typename:RLAPI bool	signature:(AudioStream stream)
IsCursorHidden	$RAYLIB/raylib.h	/^RLAPI bool IsCursorHidden(void);                                  \/\/ Check if cursor is not vi/;"	p	typeref:typename:RLAPI bool	signature:(void)
IsCursorOnScreen	$RAYLIB/raylib.h	/^RLAPI bool IsCursorOnScreen(void);                                \/\/ Check if cursor is on the/;"	p	typeref:typename:RLAPI bool	signature:(void)
IsFileDropped	$RAYLIB/raylib.h	/^RLAPI bool IsFileDropped(void);                                   \/\/ Check if a file has been /;"	p	typeref:typename:RLAPI bool	signature:(void)
IsFileExtension	$RAYLIB/raylib.h	/^RLAPI bool IsFileExtension(const char *fileName, const char *ext); \/\/ Check file extension (in/;"	p	typeref:typename:RLAPI bool	signature:(const char * fileName,const char * ext)
IsFontReady	$RAYLIB/raylib.h	/^RLAPI bool IsFontReady(Font font);                                                          \/\//;"	p	typeref:typename:RLAPI bool	signature:(Font font)
IsGamepadAvailable	$RAYLIB/raylib.h	/^RLAPI bool IsGamepadAvailable(int gamepad);                                        \/\/ Check if/;"	p	typeref:typename:RLAPI bool	signature:(int gamepad)
IsGamepadButtonDown	$RAYLIB/raylib.h	/^RLAPI bool IsGamepadButtonDown(int gamepad, int button);                           \/\/ Check if/;"	p	typeref:typename:RLAPI bool	signature:(int gamepad,int button)
IsGamepadButtonPressed	$RAYLIB/raylib.h	/^RLAPI bool IsGamepadButtonPressed(int gamepad, int button);                        \/\/ Check if/;"	p	typeref:typename:RLAPI bool	signature:(int gamepad,int button)
IsGamepadButtonReleased	$RAYLIB/raylib.h	/^RLAPI bool IsGamepadButtonReleased(int gamepad, int button);                       \/\/ Check if/;"	p	typeref:typename:RLAPI bool	signature:(int gamepad,int button)
IsGamepadButtonUp	$RAYLIB/raylib.h	/^RLAPI bool IsGamepadButtonUp(int gamepad, int button);                             \/\/ Check if/;"	p	typeref:typename:RLAPI bool	signature:(int gamepad,int button)
IsGestureDetected	$RAYLIB/raylib.h	/^RLAPI bool IsGestureDetected(unsigned int gesture);     \/\/ Check if a gesture have been detect/;"	p	typeref:typename:RLAPI bool	signature:(unsigned int gesture)
IsImageReady	$RAYLIB/raylib.h	/^RLAPI bool IsImageReady(Image image);                                                           /;"	p	typeref:typename:RLAPI bool	signature:(Image image)
IsKeyDown	$RAYLIB/raygui.h	/^static bool IsKeyDown(int key);$/;"	p	typeref:typename:bool	signature:(int key)
IsKeyDown	$RAYLIB/raylib.h	/^RLAPI bool IsKeyDown(int key);                                \/\/ Check if a key is being press/;"	p	typeref:typename:RLAPI bool	signature:(int key)
IsKeyPressed	$RAYLIB/raygui.h	/^static bool IsKeyPressed(int key);$/;"	p	typeref:typename:bool	signature:(int key)
IsKeyPressed	$RAYLIB/raylib.h	/^RLAPI bool IsKeyPressed(int key);                             \/\/ Check if a key has been press/;"	p	typeref:typename:RLAPI bool	signature:(int key)
IsKeyPressedRepeat	$RAYLIB/raylib.h	/^RLAPI bool IsKeyPressedRepeat(int key);                       \/\/ Check if a key has been press/;"	p	typeref:typename:RLAPI bool	signature:(int key)
IsKeyReleased	$RAYLIB/raylib.h	/^RLAPI bool IsKeyReleased(int key);                            \/\/ Check if a key has been relea/;"	p	typeref:typename:RLAPI bool	signature:(int key)
IsKeyUp	$RAYLIB/raylib.h	/^RLAPI bool IsKeyUp(int key);                                  \/\/ Check if a key is NOT being p/;"	p	typeref:typename:RLAPI bool	signature:(int key)
IsMaterialReady	$RAYLIB/raylib.h	/^RLAPI bool IsMaterialReady(Material material);                                              \/\//;"	p	typeref:typename:RLAPI bool	signature:(Material material)
IsModelAnimationValid	$RAYLIB/raylib.h	/^RLAPI bool IsModelAnimationValid(Model model, ModelAnimation anim);                         \/\//;"	p	typeref:typename:RLAPI bool	signature:(Model model,ModelAnimation anim)
IsModelReady	$RAYLIB/raylib.h	/^RLAPI bool IsModelReady(Model model);                                                       \/\//;"	p	typeref:typename:RLAPI bool	signature:(Model model)
IsMouseButtonDown	$RAYLIB/raygui.h	/^static bool IsMouseButtonDown(int button);$/;"	p	typeref:typename:bool	signature:(int button)
IsMouseButtonDown	$RAYLIB/raylib.h	/^RLAPI bool IsMouseButtonDown(int button);                     \/\/ Check if a mouse button is be/;"	p	typeref:typename:RLAPI bool	signature:(int button)
IsMouseButtonPressed	$RAYLIB/raygui.h	/^static bool IsMouseButtonPressed(int button);$/;"	p	typeref:typename:bool	signature:(int button)
IsMouseButtonPressed	$RAYLIB/raylib.h	/^RLAPI bool IsMouseButtonPressed(int button);                  \/\/ Check if a mouse button has b/;"	p	typeref:typename:RLAPI bool	signature:(int button)
IsMouseButtonReleased	$RAYLIB/raygui.h	/^static bool IsMouseButtonReleased(int button);$/;"	p	typeref:typename:bool	signature:(int button)
IsMouseButtonReleased	$RAYLIB/raylib.h	/^RLAPI bool IsMouseButtonReleased(int button);                 \/\/ Check if a mouse button has b/;"	p	typeref:typename:RLAPI bool	signature:(int button)
IsMouseButtonUp	$RAYLIB/raylib.h	/^RLAPI bool IsMouseButtonUp(int button);                       \/\/ Check if a mouse button is NO/;"	p	typeref:typename:RLAPI bool	signature:(int button)
IsMusicReady	$RAYLIB/raylib.h	/^RLAPI bool IsMusicReady(Music music);                                 \/\/ Checks if a music str/;"	p	typeref:typename:RLAPI bool	signature:(Music music)
IsMusicStreamPlaying	$RAYLIB/raylib.h	/^RLAPI bool IsMusicStreamPlaying(Music music);                         \/\/ Check if music is pla/;"	p	typeref:typename:RLAPI bool	signature:(Music music)
IsPathFile	$RAYLIB/raylib.h	/^RLAPI bool IsPathFile(const char *path);                          \/\/ Check if a given path is /;"	p	typeref:typename:RLAPI bool	signature:(const char * path)
IsRenderTextureReady	$RAYLIB/raylib.h	/^RLAPI bool IsRenderTextureReady(RenderTexture2D target);                                        /;"	p	typeref:typename:RLAPI bool	signature:(RenderTexture2D target)
IsShaderReady	$RAYLIB/raylib.h	/^RLAPI bool IsShaderReady(Shader shader);                                   \/\/ Check if a shade/;"	p	typeref:typename:RLAPI bool	signature:(Shader shader)
IsSoundPlaying	$RAYLIB/raylib.h	/^RLAPI bool IsSoundPlaying(Sound sound);                               \/\/ Check if a sound is c/;"	p	typeref:typename:RLAPI bool	signature:(Sound sound)
IsSoundReady	$RAYLIB/raylib.h	/^RLAPI bool IsSoundReady(Sound sound);                                 \/\/ Checks if a sound is /;"	p	typeref:typename:RLAPI bool	signature:(Sound sound)
IsTextureReady	$RAYLIB/raylib.h	/^RLAPI bool IsTextureReady(Texture2D texture);                                                   /;"	p	typeref:typename:RLAPI bool	signature:(Texture2D texture)
IsWaveReady	$RAYLIB/raylib.h	/^RLAPI bool IsWaveReady(Wave wave);                                    \/\/ Checks if wave data i/;"	p	typeref:typename:RLAPI bool	signature:(Wave wave)
IsWindowFocused	$RAYLIB/raylib.h	/^RLAPI bool IsWindowFocused(void);                                 \/\/ Check if window is curren/;"	p	typeref:typename:RLAPI bool	signature:(void)
IsWindowFullscreen	$RAYLIB/raylib.h	/^RLAPI bool IsWindowFullscreen(void);                              \/\/ Check if window is curren/;"	p	typeref:typename:RLAPI bool	signature:(void)
IsWindowHidden	$RAYLIB/raylib.h	/^RLAPI bool IsWindowHidden(void);                                  \/\/ Check if window is curren/;"	p	typeref:typename:RLAPI bool	signature:(void)
IsWindowMaximized	$RAYLIB/raylib.h	/^RLAPI bool IsWindowMaximized(void);                               \/\/ Check if window is curren/;"	p	typeref:typename:RLAPI bool	signature:(void)
IsWindowMinimized	$RAYLIB/raylib.h	/^RLAPI bool IsWindowMinimized(void);                               \/\/ Check if window is curren/;"	p	typeref:typename:RLAPI bool	signature:(void)
IsWindowReady	$RAYLIB/raylib.h	/^RLAPI bool IsWindowReady(void);                                   \/\/ Check if window has been /;"	p	typeref:typename:RLAPI bool	signature:(void)
IsWindowResized	$RAYLIB/raylib.h	/^RLAPI bool IsWindowResized(void);                                 \/\/ Check if window has been /;"	p	typeref:typename:RLAPI bool	signature:(void)
IsWindowState	$RAYLIB/raylib.h	/^RLAPI bool IsWindowState(unsigned int flag);                      \/\/ Check if one specific win/;"	p	typeref:typename:RLAPI bool	signature:(unsigned int flag)
KEY_A	$RAYLIB/raylib.h	/^    KEY_A               = 65,       \/\/ Key: A | a$/;"	e	enum:__anonfdf2e0de0403
KEY_APOSTROPHE	$RAYLIB/raylib.h	/^    KEY_APOSTROPHE      = 39,       \/\/ Key: '$/;"	e	enum:__anonfdf2e0de0403
KEY_B	$RAYLIB/raylib.h	/^    KEY_B               = 66,       \/\/ Key: B | b$/;"	e	enum:__anonfdf2e0de0403
KEY_BACK	$RAYLIB/raylib.h	/^    KEY_BACK            = 4,        \/\/ Key: Android back button$/;"	e	enum:__anonfdf2e0de0403
KEY_BACKSLASH	$RAYLIB/raylib.h	/^    KEY_BACKSLASH       = 92,       \/\/ Key: '\\'$/;"	e	enum:__anonfdf2e0de0403
KEY_BACKSPACE	$RAYLIB/raygui.h	/^#define KEY_BACKSPACE /;"	d
KEY_BACKSPACE	$RAYLIB/raylib.h	/^    KEY_BACKSPACE       = 259,      \/\/ Key: Backspace$/;"	e	enum:__anonfdf2e0de0403
KEY_C	$RAYLIB/raylib.h	/^    KEY_C               = 67,       \/\/ Key: C | c$/;"	e	enum:__anonfdf2e0de0403
KEY_CAPS_LOCK	$RAYLIB/raylib.h	/^    KEY_CAPS_LOCK       = 280,      \/\/ Key: Caps lock$/;"	e	enum:__anonfdf2e0de0403
KEY_COMMA	$RAYLIB/raylib.h	/^    KEY_COMMA           = 44,       \/\/ Key: ,$/;"	e	enum:__anonfdf2e0de0403
KEY_D	$RAYLIB/raylib.h	/^    KEY_D               = 68,       \/\/ Key: D | d$/;"	e	enum:__anonfdf2e0de0403
KEY_DELETE	$RAYLIB/raylib.h	/^    KEY_DELETE          = 261,      \/\/ Key: Del$/;"	e	enum:__anonfdf2e0de0403
KEY_DOWN	$RAYLIB/raygui.h	/^#define KEY_DOWN /;"	d
KEY_DOWN	$RAYLIB/raylib.h	/^    KEY_DOWN            = 264,      \/\/ Key: Cursor down$/;"	e	enum:__anonfdf2e0de0403
KEY_E	$RAYLIB/raylib.h	/^    KEY_E               = 69,       \/\/ Key: E | e$/;"	e	enum:__anonfdf2e0de0403
KEY_EIGHT	$RAYLIB/raylib.h	/^    KEY_EIGHT           = 56,       \/\/ Key: 8$/;"	e	enum:__anonfdf2e0de0403
KEY_END	$RAYLIB/raylib.h	/^    KEY_END             = 269,      \/\/ Key: End$/;"	e	enum:__anonfdf2e0de0403
KEY_ENTER	$RAYLIB/raygui.h	/^#define KEY_ENTER /;"	d
KEY_ENTER	$RAYLIB/raylib.h	/^    KEY_ENTER           = 257,      \/\/ Key: Enter$/;"	e	enum:__anonfdf2e0de0403
KEY_EQUAL	$RAYLIB/raylib.h	/^    KEY_EQUAL           = 61,       \/\/ Key: =$/;"	e	enum:__anonfdf2e0de0403
KEY_ESCAPE	$RAYLIB/raylib.h	/^    KEY_ESCAPE          = 256,      \/\/ Key: Esc$/;"	e	enum:__anonfdf2e0de0403
KEY_F	$RAYLIB/raylib.h	/^    KEY_F               = 70,       \/\/ Key: F | f$/;"	e	enum:__anonfdf2e0de0403
KEY_F1	$RAYLIB/raylib.h	/^    KEY_F1              = 290,      \/\/ Key: F1$/;"	e	enum:__anonfdf2e0de0403
KEY_F10	$RAYLIB/raylib.h	/^    KEY_F10             = 299,      \/\/ Key: F10$/;"	e	enum:__anonfdf2e0de0403
KEY_F11	$RAYLIB/raylib.h	/^    KEY_F11             = 300,      \/\/ Key: F11$/;"	e	enum:__anonfdf2e0de0403
KEY_F12	$RAYLIB/raylib.h	/^    KEY_F12             = 301,      \/\/ Key: F12$/;"	e	enum:__anonfdf2e0de0403
KEY_F2	$RAYLIB/raylib.h	/^    KEY_F2              = 291,      \/\/ Key: F2$/;"	e	enum:__anonfdf2e0de0403
KEY_F3	$RAYLIB/raylib.h	/^    KEY_F3              = 292,      \/\/ Key: F3$/;"	e	enum:__anonfdf2e0de0403
KEY_F4	$RAYLIB/raylib.h	/^    KEY_F4              = 293,      \/\/ Key: F4$/;"	e	enum:__anonfdf2e0de0403
KEY_F5	$RAYLIB/raylib.h	/^    KEY_F5              = 294,      \/\/ Key: F5$/;"	e	enum:__anonfdf2e0de0403
KEY_F6	$RAYLIB/raylib.h	/^    KEY_F6              = 295,      \/\/ Key: F6$/;"	e	enum:__anonfdf2e0de0403
KEY_F7	$RAYLIB/raylib.h	/^    KEY_F7              = 296,      \/\/ Key: F7$/;"	e	enum:__anonfdf2e0de0403
KEY_F8	$RAYLIB/raylib.h	/^    KEY_F8              = 297,      \/\/ Key: F8$/;"	e	enum:__anonfdf2e0de0403
KEY_F9	$RAYLIB/raylib.h	/^    KEY_F9              = 298,      \/\/ Key: F9$/;"	e	enum:__anonfdf2e0de0403
KEY_FIVE	$RAYLIB/raylib.h	/^    KEY_FIVE            = 53,       \/\/ Key: 5$/;"	e	enum:__anonfdf2e0de0403
KEY_FOUR	$RAYLIB/raylib.h	/^    KEY_FOUR            = 52,       \/\/ Key: 4$/;"	e	enum:__anonfdf2e0de0403
KEY_G	$RAYLIB/raylib.h	/^    KEY_G               = 71,       \/\/ Key: G | g$/;"	e	enum:__anonfdf2e0de0403
KEY_GRAVE	$RAYLIB/raylib.h	/^    KEY_GRAVE           = 96,       \/\/ Key: `$/;"	e	enum:__anonfdf2e0de0403
KEY_H	$RAYLIB/raylib.h	/^    KEY_H               = 72,       \/\/ Key: H | h$/;"	e	enum:__anonfdf2e0de0403
KEY_HOME	$RAYLIB/raylib.h	/^    KEY_HOME            = 268,      \/\/ Key: Home$/;"	e	enum:__anonfdf2e0de0403
KEY_I	$RAYLIB/raylib.h	/^    KEY_I               = 73,       \/\/ Key: I | i$/;"	e	enum:__anonfdf2e0de0403
KEY_INSERT	$RAYLIB/raylib.h	/^    KEY_INSERT          = 260,      \/\/ Key: Ins$/;"	e	enum:__anonfdf2e0de0403
KEY_J	$RAYLIB/raylib.h	/^    KEY_J               = 74,       \/\/ Key: J | j$/;"	e	enum:__anonfdf2e0de0403
KEY_K	$RAYLIB/raylib.h	/^    KEY_K               = 75,       \/\/ Key: K | k$/;"	e	enum:__anonfdf2e0de0403
KEY_KB_MENU	$RAYLIB/raylib.h	/^    KEY_KB_MENU         = 348,      \/\/ Key: KB menu$/;"	e	enum:__anonfdf2e0de0403
KEY_KP_0	$RAYLIB/raylib.h	/^    KEY_KP_0            = 320,      \/\/ Key: Keypad 0$/;"	e	enum:__anonfdf2e0de0403
KEY_KP_1	$RAYLIB/raylib.h	/^    KEY_KP_1            = 321,      \/\/ Key: Keypad 1$/;"	e	enum:__anonfdf2e0de0403
KEY_KP_2	$RAYLIB/raylib.h	/^    KEY_KP_2            = 322,      \/\/ Key: Keypad 2$/;"	e	enum:__anonfdf2e0de0403
KEY_KP_3	$RAYLIB/raylib.h	/^    KEY_KP_3            = 323,      \/\/ Key: Keypad 3$/;"	e	enum:__anonfdf2e0de0403
KEY_KP_4	$RAYLIB/raylib.h	/^    KEY_KP_4            = 324,      \/\/ Key: Keypad 4$/;"	e	enum:__anonfdf2e0de0403
KEY_KP_5	$RAYLIB/raylib.h	/^    KEY_KP_5            = 325,      \/\/ Key: Keypad 5$/;"	e	enum:__anonfdf2e0de0403
KEY_KP_6	$RAYLIB/raylib.h	/^    KEY_KP_6            = 326,      \/\/ Key: Keypad 6$/;"	e	enum:__anonfdf2e0de0403
KEY_KP_7	$RAYLIB/raylib.h	/^    KEY_KP_7            = 327,      \/\/ Key: Keypad 7$/;"	e	enum:__anonfdf2e0de0403
KEY_KP_8	$RAYLIB/raylib.h	/^    KEY_KP_8            = 328,      \/\/ Key: Keypad 8$/;"	e	enum:__anonfdf2e0de0403
KEY_KP_9	$RAYLIB/raylib.h	/^    KEY_KP_9            = 329,      \/\/ Key: Keypad 9$/;"	e	enum:__anonfdf2e0de0403
KEY_KP_ADD	$RAYLIB/raylib.h	/^    KEY_KP_ADD          = 334,      \/\/ Key: Keypad +$/;"	e	enum:__anonfdf2e0de0403
KEY_KP_DECIMAL	$RAYLIB/raylib.h	/^    KEY_KP_DECIMAL      = 330,      \/\/ Key: Keypad .$/;"	e	enum:__anonfdf2e0de0403
KEY_KP_DIVIDE	$RAYLIB/raylib.h	/^    KEY_KP_DIVIDE       = 331,      \/\/ Key: Keypad \/$/;"	e	enum:__anonfdf2e0de0403
KEY_KP_ENTER	$RAYLIB/raylib.h	/^    KEY_KP_ENTER        = 335,      \/\/ Key: Keypad Enter$/;"	e	enum:__anonfdf2e0de0403
KEY_KP_EQUAL	$RAYLIB/raylib.h	/^    KEY_KP_EQUAL        = 336,      \/\/ Key: Keypad =$/;"	e	enum:__anonfdf2e0de0403
KEY_KP_MULTIPLY	$RAYLIB/raylib.h	/^    KEY_KP_MULTIPLY     = 332,      \/\/ Key: Keypad *$/;"	e	enum:__anonfdf2e0de0403
KEY_KP_SUBTRACT	$RAYLIB/raylib.h	/^    KEY_KP_SUBTRACT     = 333,      \/\/ Key: Keypad -$/;"	e	enum:__anonfdf2e0de0403
KEY_L	$RAYLIB/raylib.h	/^    KEY_L               = 76,       \/\/ Key: L | l$/;"	e	enum:__anonfdf2e0de0403
KEY_LEFT	$RAYLIB/raygui.h	/^#define KEY_LEFT /;"	d
KEY_LEFT	$RAYLIB/raylib.h	/^    KEY_LEFT            = 263,      \/\/ Key: Cursor left$/;"	e	enum:__anonfdf2e0de0403
KEY_LEFT_ALT	$RAYLIB/raylib.h	/^    KEY_LEFT_ALT        = 342,      \/\/ Key: Alt left$/;"	e	enum:__anonfdf2e0de0403
KEY_LEFT_BRACKET	$RAYLIB/raylib.h	/^    KEY_LEFT_BRACKET    = 91,       \/\/ Key: [$/;"	e	enum:__anonfdf2e0de0403
KEY_LEFT_CONTROL	$RAYLIB/raylib.h	/^    KEY_LEFT_CONTROL    = 341,      \/\/ Key: Control left$/;"	e	enum:__anonfdf2e0de0403
KEY_LEFT_SHIFT	$RAYLIB/raylib.h	/^    KEY_LEFT_SHIFT      = 340,      \/\/ Key: Shift left$/;"	e	enum:__anonfdf2e0de0403
KEY_LEFT_SUPER	$RAYLIB/raylib.h	/^    KEY_LEFT_SUPER      = 343,      \/\/ Key: Super left$/;"	e	enum:__anonfdf2e0de0403
KEY_M	$RAYLIB/raylib.h	/^    KEY_M               = 77,       \/\/ Key: M | m$/;"	e	enum:__anonfdf2e0de0403
KEY_MENU	$RAYLIB/raylib.h	/^    KEY_MENU            = 5,        \/\/ Key: Android menu button$/;"	e	enum:__anonfdf2e0de0403
KEY_MINUS	$RAYLIB/raylib.h	/^    KEY_MINUS           = 45,       \/\/ Key: -$/;"	e	enum:__anonfdf2e0de0403
KEY_N	$RAYLIB/raylib.h	/^    KEY_N               = 78,       \/\/ Key: N | n$/;"	e	enum:__anonfdf2e0de0403
KEY_NINE	$RAYLIB/raylib.h	/^    KEY_NINE            = 57,       \/\/ Key: 9$/;"	e	enum:__anonfdf2e0de0403
KEY_NULL	$RAYLIB/raylib.h	/^    KEY_NULL            = 0,        \/\/ Key: NULL, used for no key pressed$/;"	e	enum:__anonfdf2e0de0403
KEY_NUM_LOCK	$RAYLIB/raylib.h	/^    KEY_NUM_LOCK        = 282,      \/\/ Key: Num lock$/;"	e	enum:__anonfdf2e0de0403
KEY_O	$RAYLIB/raylib.h	/^    KEY_O               = 79,       \/\/ Key: O | o$/;"	e	enum:__anonfdf2e0de0403
KEY_ONE	$RAYLIB/raylib.h	/^    KEY_ONE             = 49,       \/\/ Key: 1$/;"	e	enum:__anonfdf2e0de0403
KEY_P	$RAYLIB/raylib.h	/^    KEY_P               = 80,       \/\/ Key: P | p$/;"	e	enum:__anonfdf2e0de0403
KEY_PAGE_DOWN	$RAYLIB/raylib.h	/^    KEY_PAGE_DOWN       = 267,      \/\/ Key: Page down$/;"	e	enum:__anonfdf2e0de0403
KEY_PAGE_UP	$RAYLIB/raylib.h	/^    KEY_PAGE_UP         = 266,      \/\/ Key: Page up$/;"	e	enum:__anonfdf2e0de0403
KEY_PAUSE	$RAYLIB/raylib.h	/^    KEY_PAUSE           = 284,      \/\/ Key: Pause$/;"	e	enum:__anonfdf2e0de0403
KEY_PERIOD	$RAYLIB/raylib.h	/^    KEY_PERIOD          = 46,       \/\/ Key: .$/;"	e	enum:__anonfdf2e0de0403
KEY_PRINT_SCREEN	$RAYLIB/raylib.h	/^    KEY_PRINT_SCREEN    = 283,      \/\/ Key: Print screen$/;"	e	enum:__anonfdf2e0de0403
KEY_Q	$RAYLIB/raylib.h	/^    KEY_Q               = 81,       \/\/ Key: Q | q$/;"	e	enum:__anonfdf2e0de0403
KEY_R	$RAYLIB/raylib.h	/^    KEY_R               = 82,       \/\/ Key: R | r$/;"	e	enum:__anonfdf2e0de0403
KEY_RIGHT	$RAYLIB/raygui.h	/^#define KEY_RIGHT /;"	d
KEY_RIGHT	$RAYLIB/raylib.h	/^    KEY_RIGHT           = 262,      \/\/ Key: Cursor right$/;"	e	enum:__anonfdf2e0de0403
KEY_RIGHT_ALT	$RAYLIB/raylib.h	/^    KEY_RIGHT_ALT       = 346,      \/\/ Key: Alt right$/;"	e	enum:__anonfdf2e0de0403
KEY_RIGHT_BRACKET	$RAYLIB/raylib.h	/^    KEY_RIGHT_BRACKET   = 93,       \/\/ Key: ]$/;"	e	enum:__anonfdf2e0de0403
KEY_RIGHT_CONTROL	$RAYLIB/raylib.h	/^    KEY_RIGHT_CONTROL   = 345,      \/\/ Key: Control right$/;"	e	enum:__anonfdf2e0de0403
KEY_RIGHT_SHIFT	$RAYLIB/raylib.h	/^    KEY_RIGHT_SHIFT     = 344,      \/\/ Key: Shift right$/;"	e	enum:__anonfdf2e0de0403
KEY_RIGHT_SUPER	$RAYLIB/raylib.h	/^    KEY_RIGHT_SUPER     = 347,      \/\/ Key: Super right$/;"	e	enum:__anonfdf2e0de0403
KEY_S	$RAYLIB/raylib.h	/^    KEY_S               = 83,       \/\/ Key: S | s$/;"	e	enum:__anonfdf2e0de0403
KEY_SCROLL_LOCK	$RAYLIB/raylib.h	/^    KEY_SCROLL_LOCK     = 281,      \/\/ Key: Scroll down$/;"	e	enum:__anonfdf2e0de0403
KEY_SEMICOLON	$RAYLIB/raylib.h	/^    KEY_SEMICOLON       = 59,       \/\/ Key: ;$/;"	e	enum:__anonfdf2e0de0403
KEY_SEVEN	$RAYLIB/raylib.h	/^    KEY_SEVEN           = 55,       \/\/ Key: 7$/;"	e	enum:__anonfdf2e0de0403
KEY_SIX	$RAYLIB/raylib.h	/^    KEY_SIX             = 54,       \/\/ Key: 6$/;"	e	enum:__anonfdf2e0de0403
KEY_SLASH	$RAYLIB/raylib.h	/^    KEY_SLASH           = 47,       \/\/ Key: \/$/;"	e	enum:__anonfdf2e0de0403
KEY_SPACE	$RAYLIB/raylib.h	/^    KEY_SPACE           = 32,       \/\/ Key: Space$/;"	e	enum:__anonfdf2e0de0403
KEY_T	$RAYLIB/raylib.h	/^    KEY_T               = 84,       \/\/ Key: T | t$/;"	e	enum:__anonfdf2e0de0403
KEY_TAB	$RAYLIB/raylib.h	/^    KEY_TAB             = 258,      \/\/ Key: Tab$/;"	e	enum:__anonfdf2e0de0403
KEY_THREE	$RAYLIB/raylib.h	/^    KEY_THREE           = 51,       \/\/ Key: 3$/;"	e	enum:__anonfdf2e0de0403
KEY_TWO	$RAYLIB/raylib.h	/^    KEY_TWO             = 50,       \/\/ Key: 2$/;"	e	enum:__anonfdf2e0de0403
KEY_U	$RAYLIB/raylib.h	/^    KEY_U               = 85,       \/\/ Key: U | u$/;"	e	enum:__anonfdf2e0de0403
KEY_UP	$RAYLIB/raygui.h	/^#define KEY_UP /;"	d
KEY_UP	$RAYLIB/raylib.h	/^    KEY_UP              = 265,      \/\/ Key: Cursor up$/;"	e	enum:__anonfdf2e0de0403
KEY_V	$RAYLIB/raylib.h	/^    KEY_V               = 86,       \/\/ Key: V | v$/;"	e	enum:__anonfdf2e0de0403
KEY_VOLUME_DOWN	$RAYLIB/raylib.h	/^    KEY_VOLUME_DOWN     = 25        \/\/ Key: Android volume down button$/;"	e	enum:__anonfdf2e0de0403
KEY_VOLUME_UP	$RAYLIB/raylib.h	/^    KEY_VOLUME_UP       = 24,       \/\/ Key: Android volume up button$/;"	e	enum:__anonfdf2e0de0403
KEY_W	$RAYLIB/raylib.h	/^    KEY_W               = 87,       \/\/ Key: W | w$/;"	e	enum:__anonfdf2e0de0403
KEY_X	$RAYLIB/raylib.h	/^    KEY_X               = 88,       \/\/ Key: X | x$/;"	e	enum:__anonfdf2e0de0403
KEY_Y	$RAYLIB/raylib.h	/^    KEY_Y               = 89,       \/\/ Key: Y | y$/;"	e	enum:__anonfdf2e0de0403
KEY_Z	$RAYLIB/raylib.h	/^    KEY_Z               = 90,       \/\/ Key: Z | z$/;"	e	enum:__anonfdf2e0de0403
KEY_ZERO	$RAYLIB/raylib.h	/^    KEY_ZERO            = 48,       \/\/ Key: 0$/;"	e	enum:__anonfdf2e0de0403
KeyboardKey	$RAYLIB/raylib.h	/^} KeyboardKey;$/;"	t	typeref:enum:__anonfdf2e0de0403
LABEL	$RAYLIB/raygui.h	/^    LABEL,          \/\/ Used also for: LABELBUTTON$/;"	e	enum:__anonfd9f18ac0603
LIGHTGRAY	$RAYLIB/raylib.h	/^#define LIGHTGRAY /;"	d
LIME	$RAYLIB/raylib.h	/^#define LIME /;"	d
LINE_COLOR	$RAYLIB/raygui.h	/^    LINE_COLOR,                 \/\/ Line control color$/;"	e	enum:__anonfd9f18ac0803
LISTVIEW	$RAYLIB/raygui.h	/^    LISTVIEW,$/;"	e	enum:__anonfd9f18ac0603
LIST_ITEMS_HEIGHT	$RAYLIB/raygui.h	/^    LIST_ITEMS_HEIGHT = 16,     \/\/ ListView items height$/;"	e	enum:__anonfd9f18ac1203
LIST_ITEMS_SPACING	$RAYLIB/raygui.h	/^    LIST_ITEMS_SPACING,         \/\/ ListView items separation$/;"	e	enum:__anonfd9f18ac1203
LOG_ALL	$RAYLIB/raylib.h	/^    LOG_ALL = 0,        \/\/ Display all logs$/;"	e	enum:__anonfdf2e0de0303
LOG_DEBUG	$RAYLIB/raylib.h	/^    LOG_DEBUG,          \/\/ Debug logging, used for internal debugging, it should be disabled o/;"	e	enum:__anonfdf2e0de0303
LOG_ERROR	$RAYLIB/raylib.h	/^    LOG_ERROR,          \/\/ Error logging, used on unrecoverable failures$/;"	e	enum:__anonfdf2e0de0303
LOG_FATAL	$RAYLIB/raylib.h	/^    LOG_FATAL,          \/\/ Fatal logging, used to abort program: exit(EXIT_FAILURE)$/;"	e	enum:__anonfdf2e0de0303
LOG_INFO	$RAYLIB/raylib.h	/^    LOG_INFO,           \/\/ Info logging, used for program execution info$/;"	e	enum:__anonfdf2e0de0303
LOG_NONE	$RAYLIB/raylib.h	/^    LOG_NONE            \/\/ Disable logging$/;"	e	enum:__anonfdf2e0de0303
LOG_TRACE	$RAYLIB/raylib.h	/^    LOG_TRACE,          \/\/ Trace logging, intended for internal use only$/;"	e	enum:__anonfdf2e0de0303
LOG_WARNING	$RAYLIB/raylib.h	/^    LOG_WARNING,        \/\/ Warning logging, used on recoverable failures$/;"	e	enum:__anonfdf2e0de0303
Lerp	$RAYLIB/raymath.h	/^RMAPI float Lerp(float start, float end, float amount)$/;"	f	typeref:typename:RMAPI float	signature:(float start,float end,float amount)
LoadAudioStream	$RAYLIB/raylib.h	/^RLAPI AudioStream LoadAudioStream(unsigned int sampleRate, unsigned int sampleSize, unsigned int/;"	p	typeref:typename:RLAPI AudioStream	signature:(unsigned int sampleRate,unsigned int sampleSize,unsigned int channels)
LoadAutomationEventList	$RAYLIB/raylib.h	/^RLAPI AutomationEventList LoadAutomationEventList(const char *fileName);                \/\/ Loa/;"	p	typeref:typename:RLAPI AutomationEventList	signature:(const char * fileName)
LoadCodepoints	$RAYLIB/raygui.h	/^static int *LoadCodepoints(const char *text, int *count);    \/\/ -- GuiLoadStyle(), required to/;"	p	typeref:typename:int *	signature:(const char * text,int * count)
LoadCodepoints	$RAYLIB/raylib.h	/^RLAPI int *LoadCodepoints(const char *text, int *count);                \/\/ Load all codepoints/;"	p	typeref:typename:RLAPI int *	signature:(const char * text,int * count)
LoadDirectoryFiles	$RAYLIB/raylib.h	/^RLAPI FilePathList LoadDirectoryFiles(const char *dirPath);       \/\/ Load directory filepaths$/;"	p	typeref:typename:RLAPI FilePathList	signature:(const char * dirPath)
LoadDirectoryFilesEx	$RAYLIB/raylib.h	/^RLAPI FilePathList LoadDirectoryFilesEx(const char *basePath, const char *filter, bool scanSubdi/;"	p	typeref:typename:RLAPI FilePathList	signature:(const char * basePath,const char * filter,bool scanSubdirs)
LoadDroppedFiles	$RAYLIB/raylib.h	/^RLAPI FilePathList LoadDroppedFiles(void);                        \/\/ Load dropped filepaths$/;"	p	typeref:typename:RLAPI FilePathList	signature:(void)
LoadFileData	$RAYLIB/raylib.h	/^RLAPI unsigned char *LoadFileData(const char *fileName, int *dataSize); \/\/ Load file data as b/;"	p	typeref:typename:RLAPI unsigned char *	signature:(const char * fileName,int * dataSize)
LoadFileDataCallback	$RAYLIB/raylib.h	/^typedef unsigned char *(*LoadFileDataCallback)(const char *fileName, int *dataSize);    \/\/ Fil/;"	t	typeref:typename:unsigned char * (*)(const char * fileName,int * dataSize)
LoadFileText	$RAYLIB/raygui.h	/^static char *LoadFileText(const char *fileName);             \/\/ -- GuiLoadStyle(), required to/;"	p	typeref:typename:char *	signature:(const char * fileName)
LoadFileText	$RAYLIB/raylib.h	/^RLAPI char *LoadFileText(const char *fileName);                   \/\/ Load text data from file /;"	p	typeref:typename:RLAPI char *	signature:(const char * fileName)
LoadFileTextCallback	$RAYLIB/raylib.h	/^typedef char *(*LoadFileTextCallback)(const char *fileName);            \/\/ FileIO: Load text d/;"	t	typeref:typename:char * (*)(const char * fileName)
LoadFont	$RAYLIB/raylib.h	/^RLAPI Font LoadFont(const char *fileName);                                                  \/\//;"	p	typeref:typename:RLAPI Font	signature:(const char * fileName)
LoadFontData	$RAYLIB/raylib.h	/^RLAPI GlyphInfo *LoadFontData(const unsigned char *fileData, int dataSize, int fontSize, int *co/;"	p	typeref:typename:RLAPI GlyphInfo *	signature:(const unsigned char * fileData,int dataSize,int fontSize,int * codepoints,int codepointCount,int type)
LoadFontEx	$RAYLIB/raygui.h	/^static Font LoadFontEx(const char *fileName, int fontSize, int *codepoints, int codepointCount);/;"	p	typeref:typename:Font	signature:(const char * fileName,int fontSize,int * codepoints,int codepointCount)
LoadFontEx	$RAYLIB/raylib.h	/^RLAPI Font LoadFontEx(const char *fileName, int fontSize, int *codepoints, int codepointCount); /;"	p	typeref:typename:RLAPI Font	signature:(const char * fileName,int fontSize,int * codepoints,int codepointCount)
LoadFontFromImage	$RAYLIB/raylib.h	/^RLAPI Font LoadFontFromImage(Image image, Color key, int firstChar);                        \/\//;"	p	typeref:typename:RLAPI Font	signature:(Image image,Color key,int firstChar)
LoadFontFromMemory	$RAYLIB/raylib.h	/^RLAPI Font LoadFontFromMemory(const char *fileType, const unsigned char *fileData, int dataSize,/;"	p	typeref:typename:RLAPI Font	signature:(const char * fileType,const unsigned char * fileData,int dataSize,int fontSize,int * codepoints,int codepointCount)
LoadImage	$RAYLIB/raylib.h	/^RLAPI Image LoadImage(const char *fileName);                                                    /;"	p	typeref:typename:RLAPI Image	signature:(const char * fileName)
LoadImageAnim	$RAYLIB/raylib.h	/^RLAPI Image LoadImageAnim(const char *fileName, int *frames);                                   /;"	p	typeref:typename:RLAPI Image	signature:(const char * fileName,int * frames)
LoadImageAnimFromMemory	$RAYLIB/raylib.h	/^RLAPI Image LoadImageAnimFromMemory(const char *fileType, const unsigned char *fileData, int dat/;"	p	typeref:typename:RLAPI Image	signature:(const char * fileType,const unsigned char * fileData,int dataSize,int * frames)
LoadImageColors	$RAYLIB/raylib.h	/^RLAPI Color *LoadImageColors(Image image);                                                      /;"	p	typeref:typename:RLAPI Color *	signature:(Image image)
LoadImageFromMemory	$RAYLIB/raylib.h	/^RLAPI Image LoadImageFromMemory(const char *fileType, const unsigned char *fileData, int dataSiz/;"	p	typeref:typename:RLAPI Image	signature:(const char * fileType,const unsigned char * fileData,int dataSize)
LoadImageFromScreen	$RAYLIB/raylib.h	/^RLAPI Image LoadImageFromScreen(void);                                                          /;"	p	typeref:typename:RLAPI Image	signature:(void)
LoadImageFromTexture	$RAYLIB/raylib.h	/^RLAPI Image LoadImageFromTexture(Texture2D texture);                                            /;"	p	typeref:typename:RLAPI Image	signature:(Texture2D texture)
LoadImagePalette	$RAYLIB/raylib.h	/^RLAPI Color *LoadImagePalette(Image image, int maxPaletteSize, int *colorCount);                /;"	p	typeref:typename:RLAPI Color *	signature:(Image image,int maxPaletteSize,int * colorCount)
LoadImageRaw	$RAYLIB/raylib.h	/^RLAPI Image LoadImageRaw(const char *fileName, int width, int height, int format, int headerSize/;"	p	typeref:typename:RLAPI Image	signature:(const char * fileName,int width,int height,int format,int headerSize)
LoadImageSvg	$RAYLIB/raylib.h	/^RLAPI Image LoadImageSvg(const char *fileNameOrString, int width, int height);                  /;"	p	typeref:typename:RLAPI Image	signature:(const char * fileNameOrString,int width,int height)
LoadMaterialDefault	$RAYLIB/raylib.h	/^RLAPI Material LoadMaterialDefault(void);                                                   \/\//;"	p	typeref:typename:RLAPI Material	signature:(void)
LoadMaterials	$RAYLIB/raylib.h	/^RLAPI Material *LoadMaterials(const char *fileName, int *materialCount);                    \/\//;"	p	typeref:typename:RLAPI Material *	signature:(const char * fileName,int * materialCount)
LoadModel	$RAYLIB/raylib.h	/^RLAPI Model LoadModel(const char *fileName);                                                \/\//;"	p	typeref:typename:RLAPI Model	signature:(const char * fileName)
LoadModelAnimations	$RAYLIB/raylib.h	/^RLAPI ModelAnimation *LoadModelAnimations(const char *fileName, int *animCount);            \/\//;"	p	typeref:typename:RLAPI ModelAnimation *	signature:(const char * fileName,int * animCount)
LoadModelFromMesh	$RAYLIB/raylib.h	/^RLAPI Model LoadModelFromMesh(Mesh mesh);                                                   \/\//;"	p	typeref:typename:RLAPI Model	signature:(Mesh mesh)
LoadMusicStream	$RAYLIB/raylib.h	/^RLAPI Music LoadMusicStream(const char *fileName);                    \/\/ Load music stream fro/;"	p	typeref:typename:RLAPI Music	signature:(const char * fileName)
LoadMusicStreamFromMemory	$RAYLIB/raylib.h	/^RLAPI Music LoadMusicStreamFromMemory(const char *fileType, const unsigned char *data, int dataS/;"	p	typeref:typename:RLAPI Music	signature:(const char * fileType,const unsigned char * data,int dataSize)
LoadRandomSequence	$RAYLIB/raylib.h	/^RLAPI int *LoadRandomSequence(unsigned int count, int min, int max); \/\/ Load random values seq/;"	p	typeref:typename:RLAPI int *	signature:(unsigned int count,int min,int max)
LoadRenderTexture	$RAYLIB/raylib.h	/^RLAPI RenderTexture2D LoadRenderTexture(int width, int height);                                 /;"	p	typeref:typename:RLAPI RenderTexture2D	signature:(int width,int height)
LoadShader	$RAYLIB/raylib.h	/^RLAPI Shader LoadShader(const char *vsFileName, const char *fsFileName);   \/\/ Load shader from/;"	p	typeref:typename:RLAPI Shader	signature:(const char * vsFileName,const char * fsFileName)
LoadShaderFromMemory	$RAYLIB/raylib.h	/^RLAPI Shader LoadShaderFromMemory(const char *vsCode, const char *fsCode); \/\/ Load shader from/;"	p	typeref:typename:RLAPI Shader	signature:(const char * vsCode,const char * fsCode)
LoadSound	$RAYLIB/raylib.h	/^RLAPI Sound LoadSound(const char *fileName);                          \/\/ Load sound from file$/;"	p	typeref:typename:RLAPI Sound	signature:(const char * fileName)
LoadSoundAlias	$RAYLIB/raylib.h	/^RLAPI Sound LoadSoundAlias(Sound source);                             \/\/ Create a new sound th/;"	p	typeref:typename:RLAPI Sound	signature:(Sound source)
LoadSoundFromWave	$RAYLIB/raylib.h	/^RLAPI Sound LoadSoundFromWave(Wave wave);                             \/\/ Load sound from wave /;"	p	typeref:typename:RLAPI Sound	signature:(Wave wave)
LoadTexture	$RAYLIB/raylib.h	/^RLAPI Texture2D LoadTexture(const char *fileName);                                              /;"	p	typeref:typename:RLAPI Texture2D	signature:(const char * fileName)
LoadTextureCubemap	$RAYLIB/raylib.h	/^RLAPI TextureCubemap LoadTextureCubemap(Image image, int layout);                               /;"	p	typeref:typename:RLAPI TextureCubemap	signature:(Image image,int layout)
LoadTextureFromImage	$RAYLIB/raygui.h	/^static Texture2D LoadTextureFromImage(Image image);          \/\/ -- GuiLoadStyle(), required to/;"	p	typeref:typename:Texture2D	signature:(Image image)
LoadTextureFromImage	$RAYLIB/raylib.h	/^RLAPI Texture2D LoadTextureFromImage(Image image);                                              /;"	p	typeref:typename:RLAPI Texture2D	signature:(Image image)
LoadUTF8	$RAYLIB/raylib.h	/^RLAPI char *LoadUTF8(const int *codepoints, int length);                \/\/ Load UTF-8 text enc/;"	p	typeref:typename:RLAPI char *	signature:(const int * codepoints,int length)
LoadVrStereoConfig	$RAYLIB/raylib.h	/^RLAPI VrStereoConfig LoadVrStereoConfig(VrDeviceInfo device);     \/\/ Load VR stereo config for/;"	p	typeref:typename:RLAPI VrStereoConfig	signature:(VrDeviceInfo device)
LoadWave	$RAYLIB/raylib.h	/^RLAPI Wave LoadWave(const char *fileName);                            \/\/ Load wave data from f/;"	p	typeref:typename:RLAPI Wave	signature:(const char * fileName)
LoadWaveFromMemory	$RAYLIB/raylib.h	/^RLAPI Wave LoadWaveFromMemory(const char *fileType, const unsigned char *fileData, int dataSize)/;"	p	typeref:typename:RLAPI Wave	signature:(const char * fileType,const unsigned char * fileData,int dataSize)
LoadWaveSamples	$RAYLIB/raylib.h	/^RLAPI float *LoadWaveSamples(Wave wave);                              \/\/ Load samples data fro/;"	p	typeref:typename:RLAPI float *	signature:(Wave wave)
MAGENTA	$RAYLIB/raylib.h	/^#define MAGENTA /;"	d
MAROON	$RAYLIB/raylib.h	/^#define MAROON /;"	d
MATERIAL_MAP_ALBEDO	$RAYLIB/raylib.h	/^    MATERIAL_MAP_ALBEDO = 0,        \/\/ Albedo material (same as: MATERIAL_MAP_DIFFUSE)$/;"	e	enum:__anonfdf2e0de0903
MATERIAL_MAP_BRDF	$RAYLIB/raylib.h	/^    MATERIAL_MAP_BRDF               \/\/ Brdf material$/;"	e	enum:__anonfdf2e0de0903
MATERIAL_MAP_CUBEMAP	$RAYLIB/raylib.h	/^    MATERIAL_MAP_CUBEMAP,           \/\/ Cubemap material (NOTE: Uses GL_TEXTURE_CUBE_MAP)$/;"	e	enum:__anonfdf2e0de0903
MATERIAL_MAP_DIFFUSE	$RAYLIB/raylib.h	/^#define MATERIAL_MAP_DIFFUSE /;"	d
MATERIAL_MAP_EMISSION	$RAYLIB/raylib.h	/^    MATERIAL_MAP_EMISSION,          \/\/ Emission material$/;"	e	enum:__anonfdf2e0de0903
MATERIAL_MAP_HEIGHT	$RAYLIB/raylib.h	/^    MATERIAL_MAP_HEIGHT,            \/\/ Heightmap material$/;"	e	enum:__anonfdf2e0de0903
MATERIAL_MAP_IRRADIANCE	$RAYLIB/raylib.h	/^    MATERIAL_MAP_IRRADIANCE,        \/\/ Irradiance material (NOTE: Uses GL_TEXTURE_CUBE_MAP)$/;"	e	enum:__anonfdf2e0de0903
MATERIAL_MAP_METALNESS	$RAYLIB/raylib.h	/^    MATERIAL_MAP_METALNESS,         \/\/ Metalness material (same as: MATERIAL_MAP_SPECULAR)$/;"	e	enum:__anonfdf2e0de0903
MATERIAL_MAP_NORMAL	$RAYLIB/raylib.h	/^    MATERIAL_MAP_NORMAL,            \/\/ Normal material$/;"	e	enum:__anonfdf2e0de0903
MATERIAL_MAP_OCCLUSION	$RAYLIB/raylib.h	/^    MATERIAL_MAP_OCCLUSION,         \/\/ Ambient occlusion material$/;"	e	enum:__anonfdf2e0de0903
MATERIAL_MAP_PREFILTER	$RAYLIB/raylib.h	/^    MATERIAL_MAP_PREFILTER,         \/\/ Prefilter material (NOTE: Uses GL_TEXTURE_CUBE_MAP)$/;"	e	enum:__anonfdf2e0de0903
MATERIAL_MAP_ROUGHNESS	$RAYLIB/raylib.h	/^    MATERIAL_MAP_ROUGHNESS,         \/\/ Roughness material$/;"	e	enum:__anonfdf2e0de0903
MATERIAL_MAP_SPECULAR	$RAYLIB/raylib.h	/^#define MATERIAL_MAP_SPECULAR /;"	d
MAX	$RAYLIB/rlgl.h	/^        #define MAX(/;"	d	signature:(a,b)
MAX_LINE_BUFFER_SIZE	$RAYLIB/raygui.h	/^    #define MAX_LINE_BUFFER_SIZE /;"	d
MIN	$RAYLIB/rlgl.h	/^        #define MIN(/;"	d	signature:(a,b)
MOUSE_BUTTON_BACK	$RAYLIB/raylib.h	/^    MOUSE_BUTTON_BACK    = 6,       \/\/ Mouse button back (advanced mouse device)$/;"	e	enum:__anonfdf2e0de0503
MOUSE_BUTTON_EXTRA	$RAYLIB/raylib.h	/^    MOUSE_BUTTON_EXTRA   = 4,       \/\/ Mouse button extra (advanced mouse device)$/;"	e	enum:__anonfdf2e0de0503
MOUSE_BUTTON_FORWARD	$RAYLIB/raylib.h	/^    MOUSE_BUTTON_FORWARD = 5,       \/\/ Mouse button forward (advanced mouse device)$/;"	e	enum:__anonfdf2e0de0503
MOUSE_BUTTON_LEFT	$RAYLIB/raylib.h	/^    MOUSE_BUTTON_LEFT    = 0,       \/\/ Mouse button left$/;"	e	enum:__anonfdf2e0de0503
MOUSE_BUTTON_MIDDLE	$RAYLIB/raylib.h	/^    MOUSE_BUTTON_MIDDLE  = 2,       \/\/ Mouse button middle (pressed wheel)$/;"	e	enum:__anonfdf2e0de0503
MOUSE_BUTTON_RIGHT	$RAYLIB/raylib.h	/^    MOUSE_BUTTON_RIGHT   = 1,       \/\/ Mouse button right$/;"	e	enum:__anonfdf2e0de0503
MOUSE_BUTTON_SIDE	$RAYLIB/raylib.h	/^    MOUSE_BUTTON_SIDE    = 3,       \/\/ Mouse button side (advanced mouse device)$/;"	e	enum:__anonfdf2e0de0503
MOUSE_CURSOR_ARROW	$RAYLIB/raylib.h	/^    MOUSE_CURSOR_ARROW         = 1,     \/\/ Arrow shape$/;"	e	enum:__anonfdf2e0de0603
MOUSE_CURSOR_CROSSHAIR	$RAYLIB/raylib.h	/^    MOUSE_CURSOR_CROSSHAIR     = 3,     \/\/ Cross shape$/;"	e	enum:__anonfdf2e0de0603
MOUSE_CURSOR_DEFAULT	$RAYLIB/raylib.h	/^    MOUSE_CURSOR_DEFAULT       = 0,     \/\/ Default pointer shape$/;"	e	enum:__anonfdf2e0de0603
MOUSE_CURSOR_IBEAM	$RAYLIB/raylib.h	/^    MOUSE_CURSOR_IBEAM         = 2,     \/\/ Text writing cursor shape$/;"	e	enum:__anonfdf2e0de0603
MOUSE_CURSOR_NOT_ALLOWED	$RAYLIB/raylib.h	/^    MOUSE_CURSOR_NOT_ALLOWED   = 10     \/\/ The operation-not-allowed shape$/;"	e	enum:__anonfdf2e0de0603
MOUSE_CURSOR_POINTING_HAND	$RAYLIB/raylib.h	/^    MOUSE_CURSOR_POINTING_HAND = 4,     \/\/ Pointing hand cursor$/;"	e	enum:__anonfdf2e0de0603
MOUSE_CURSOR_RESIZE_ALL	$RAYLIB/raylib.h	/^    MOUSE_CURSOR_RESIZE_ALL    = 9,     \/\/ The omnidirectional resize\/move cursor shape$/;"	e	enum:__anonfdf2e0de0603
MOUSE_CURSOR_RESIZE_EW	$RAYLIB/raylib.h	/^    MOUSE_CURSOR_RESIZE_EW     = 5,     \/\/ Horizontal resize\/move arrow shape$/;"	e	enum:__anonfdf2e0de0603
MOUSE_CURSOR_RESIZE_NESW	$RAYLIB/raylib.h	/^    MOUSE_CURSOR_RESIZE_NESW   = 8,     \/\/ The top-right to bottom-left diagonal resize\/move /;"	e	enum:__anonfdf2e0de0603
MOUSE_CURSOR_RESIZE_NS	$RAYLIB/raylib.h	/^    MOUSE_CURSOR_RESIZE_NS     = 6,     \/\/ Vertical resize\/move arrow shape$/;"	e	enum:__anonfdf2e0de0603
MOUSE_CURSOR_RESIZE_NWSE	$RAYLIB/raylib.h	/^    MOUSE_CURSOR_RESIZE_NWSE   = 7,     \/\/ Top-left to bottom-right diagonal resize\/move arro/;"	e	enum:__anonfdf2e0de0603
MOUSE_LEFT_BUTTON	$RAYLIB/raygui.h	/^#define MOUSE_LEFT_BUTTON /;"	d
MOUSE_LEFT_BUTTON	$RAYLIB/raylib.h	/^#define MOUSE_LEFT_BUTTON /;"	d
MOUSE_MIDDLE_BUTTON	$RAYLIB/raylib.h	/^#define MOUSE_MIDDLE_BUTTON /;"	d
MOUSE_RIGHT_BUTTON	$RAYLIB/raylib.h	/^#define MOUSE_RIGHT_BUTTON /;"	d
Material	$RAYLIB/raylib.h	/^} Material;$/;"	t	typeref:struct:Material
MaterialMap	$RAYLIB/raylib.h	/^} MaterialMap;$/;"	t	typeref:struct:MaterialMap
MaterialMapIndex	$RAYLIB/raylib.h	/^} MaterialMapIndex;$/;"	t	typeref:enum:__anonfdf2e0de0903
Matrix	$RAYLIB/raylib.h	/^} Matrix;$/;"	t	typeref:struct:Matrix
Matrix	$RAYLIB/raymath.h	/^} Matrix;$/;"	t	typeref:struct:Matrix
Matrix	$RAYLIB/rlgl.h	/^} Matrix;$/;"	t	typeref:struct:Matrix
MatrixAdd	$RAYLIB/raymath.h	/^RMAPI Matrix MatrixAdd(Matrix left, Matrix right)$/;"	f	typeref:typename:RMAPI Matrix	signature:(Matrix left,Matrix right)
MatrixDeterminant	$RAYLIB/raymath.h	/^RMAPI float MatrixDeterminant(Matrix mat)$/;"	f	typeref:typename:RMAPI float	signature:(Matrix mat)
MatrixFrustum	$RAYLIB/raymath.h	/^RMAPI Matrix MatrixFrustum(double left, double right, double bottom, double top, double near, do/;"	f	typeref:typename:RMAPI Matrix	signature:(double left,double right,double bottom,double top,double near,double far)
MatrixIdentity	$RAYLIB/raymath.h	/^RMAPI Matrix MatrixIdentity(void)$/;"	f	typeref:typename:RMAPI Matrix	signature:(void)
MatrixInvert	$RAYLIB/raymath.h	/^RMAPI Matrix MatrixInvert(Matrix mat)$/;"	f	typeref:typename:RMAPI Matrix	signature:(Matrix mat)
MatrixLookAt	$RAYLIB/raymath.h	/^RMAPI Matrix MatrixLookAt(Vector3 eye, Vector3 target, Vector3 up)$/;"	f	typeref:typename:RMAPI Matrix	signature:(Vector3 eye,Vector3 target,Vector3 up)
MatrixMultiply	$RAYLIB/raymath.h	/^RMAPI Matrix MatrixMultiply(Matrix left, Matrix right)$/;"	f	typeref:typename:RMAPI Matrix	signature:(Matrix left,Matrix right)
MatrixOrtho	$RAYLIB/raymath.h	/^RMAPI Matrix MatrixOrtho(double left, double right, double bottom, double top, double nearPlane,/;"	f	typeref:typename:RMAPI Matrix	signature:(double left,double right,double bottom,double top,double nearPlane,double farPlane)
MatrixPerspective	$RAYLIB/raymath.h	/^RMAPI Matrix MatrixPerspective(double fovY, double aspect, double nearPlane, double farPlane)$/;"	f	typeref:typename:RMAPI Matrix	signature:(double fovY,double aspect,double nearPlane,double farPlane)
MatrixRotate	$RAYLIB/raymath.h	/^RMAPI Matrix MatrixRotate(Vector3 axis, float angle)$/;"	f	typeref:typename:RMAPI Matrix	signature:(Vector3 axis,float angle)
MatrixRotateX	$RAYLIB/raymath.h	/^RMAPI Matrix MatrixRotateX(float angle)$/;"	f	typeref:typename:RMAPI Matrix	signature:(float angle)
MatrixRotateXYZ	$RAYLIB/raymath.h	/^RMAPI Matrix MatrixRotateXYZ(Vector3 angle)$/;"	f	typeref:typename:RMAPI Matrix	signature:(Vector3 angle)
MatrixRotateY	$RAYLIB/raymath.h	/^RMAPI Matrix MatrixRotateY(float angle)$/;"	f	typeref:typename:RMAPI Matrix	signature:(float angle)
MatrixRotateZ	$RAYLIB/raymath.h	/^RMAPI Matrix MatrixRotateZ(float angle)$/;"	f	typeref:typename:RMAPI Matrix	signature:(float angle)
MatrixRotateZYX	$RAYLIB/raymath.h	/^RMAPI Matrix MatrixRotateZYX(Vector3 angle)$/;"	f	typeref:typename:RMAPI Matrix	signature:(Vector3 angle)
MatrixScale	$RAYLIB/raymath.h	/^RMAPI Matrix MatrixScale(float x, float y, float z)$/;"	f	typeref:typename:RMAPI Matrix	signature:(float x,float y,float z)
MatrixSubtract	$RAYLIB/raymath.h	/^RMAPI Matrix MatrixSubtract(Matrix left, Matrix right)$/;"	f	typeref:typename:RMAPI Matrix	signature:(Matrix left,Matrix right)
MatrixToFloat	$RAYLIB/raymath.h	/^    #define MatrixToFloat(mat) (MatrixToFloatV/;"	d	signature:(mat)
MatrixToFloatV	$RAYLIB/raymath.h	/^RMAPI float16 MatrixToFloatV(Matrix mat)$/;"	f	typeref:typename:RMAPI float16	signature:(Matrix mat)
MatrixTrace	$RAYLIB/raymath.h	/^RMAPI float MatrixTrace(Matrix mat)$/;"	f	typeref:typename:RMAPI float	signature:(Matrix mat)
MatrixTranslate	$RAYLIB/raymath.h	/^RMAPI Matrix MatrixTranslate(float x, float y, float z)$/;"	f	typeref:typename:RMAPI Matrix	signature:(float x,float y,float z)
MatrixTranspose	$RAYLIB/raymath.h	/^RMAPI Matrix MatrixTranspose(Matrix mat)$/;"	f	typeref:typename:RMAPI Matrix	signature:(Matrix mat)
MaximizeWindow	$RAYLIB/raylib.h	/^RLAPI void MaximizeWindow(void);                                  \/\/ Set window state: maximiz/;"	p	typeref:typename:RLAPI void	signature:(void)
MeasureText	$RAYLIB/raylib.h	/^RLAPI int MeasureText(const char *text, int fontSize);                                      \/\//;"	p	typeref:typename:RLAPI int	signature:(const char * text,int fontSize)
MeasureTextEx	$RAYLIB/raylib.h	/^RLAPI Vector2 MeasureTextEx(Font font, const char *text, float fontSize, float spacing);    \/\//;"	p	typeref:typename:RLAPI Vector2	signature:(Font font,const char * text,float fontSize,float spacing)
MemAlloc	$RAYLIB/raylib.h	/^RLAPI void *MemAlloc(unsigned int size);                          \/\/ Internal memory allocator$/;"	p	typeref:typename:RLAPI void *	signature:(unsigned int size)
MemFree	$RAYLIB/raylib.h	/^RLAPI void MemFree(void *ptr);                                    \/\/ Internal memory free$/;"	p	typeref:typename:RLAPI void	signature:(void * ptr)
MemRealloc	$RAYLIB/raylib.h	/^RLAPI void *MemRealloc(void *ptr, unsigned int size);             \/\/ Internal memory reallocat/;"	p	typeref:typename:RLAPI void *	signature:(void * ptr,unsigned int size)
Mesh	$RAYLIB/raylib.h	/^} Mesh;$/;"	t	typeref:struct:Mesh
MinimizeWindow	$RAYLIB/raylib.h	/^RLAPI void MinimizeWindow(void);                                  \/\/ Set window state: minimiz/;"	p	typeref:typename:RLAPI void	signature:(void)
Model	$RAYLIB/raylib.h	/^} Model;$/;"	t	typeref:struct:Model
ModelAnimation	$RAYLIB/raylib.h	/^} ModelAnimation;$/;"	t	typeref:struct:ModelAnimation
MouseButton	$RAYLIB/raylib.h	/^} MouseButton;$/;"	t	typeref:enum:__anonfdf2e0de0503
MouseCursor	$RAYLIB/raylib.h	/^} MouseCursor;$/;"	t	typeref:enum:__anonfdf2e0de0603
Music	$RAYLIB/raylib.h	/^} Music;$/;"	t	typeref:struct:Music
NPATCH_NINE_PATCH	$RAYLIB/raylib.h	/^    NPATCH_NINE_PATCH = 0,          \/\/ Npatch layout: 3x3 tiles$/;"	e	enum:__anonfdf2e0de1603
NPATCH_THREE_PATCH_HORIZONTAL	$RAYLIB/raylib.h	/^    NPATCH_THREE_PATCH_HORIZONTAL   \/\/ Npatch layout: 3x1 tiles$/;"	e	enum:__anonfdf2e0de1603
NPATCH_THREE_PATCH_VERTICAL	$RAYLIB/raylib.h	/^    NPATCH_THREE_PATCH_VERTICAL,    \/\/ Npatch layout: 1x3 tiles$/;"	e	enum:__anonfdf2e0de1603
NPatchInfo	$RAYLIB/raylib.h	/^} NPatchInfo;$/;"	t	typeref:struct:NPatchInfo
NPatchLayout	$RAYLIB/raylib.h	/^} NPatchLayout;$/;"	t	typeref:enum:__anonfdf2e0de1603
Normalize	$RAYLIB/raymath.h	/^RMAPI float Normalize(float value, float start, float end)$/;"	f	typeref:typename:RMAPI float	signature:(float value,float start,float end)
ORANGE	$RAYLIB/raylib.h	/^#define ORANGE /;"	d
OTHER	$RAYLIB/raygui.h	/^typedef enum { BORDER = 0, BASE, TEXT, OTHER } GuiPropertyElement;$/;"	e	enum:__anonfd9f18ac1503
OpenURL	$RAYLIB/raylib.h	/^RLAPI void OpenURL(const char *url);                              \/\/ Open URL with default sys/;"	p	typeref:typename:RLAPI void	signature:(const char * url)
PFNGLDRAWARRAYSINSTANCEDEXTPROC	$RAYLIB/rlgl.h	/^    typedef void (GL_APIENTRYP PFNGLDRAWARRAYSINSTANCEDEXTPROC) (GLenum mode, GLint start, GLsiz/;"	t	typeref:typename:void (GL_APIENTRYP)(GLenum mode,GLint start,GLsizei count,GLsizei primcount)
PFNGLDRAWELEMENTSINSTANCEDEXTPROC	$RAYLIB/rlgl.h	/^    typedef void (GL_APIENTRYP PFNGLDRAWELEMENTSINSTANCEDEXTPROC) (GLenum mode, GLsizei count, G/;"	t	typeref:typename:void (GL_APIENTRYP)(GLenum mode,GLsizei count,GLenum type,const void * indices,GLsizei primcount)
PFNGLVERTEXATTRIBDIVISOREXTPROC	$RAYLIB/rlgl.h	/^    typedef void (GL_APIENTRYP PFNGLVERTEXATTRIBDIVISOREXTPROC) (GLuint index, GLuint divisor);$/;"	t	typeref:typename:void (GL_APIENTRYP)(GLuint index,GLuint divisor)
PINK	$RAYLIB/raylib.h	/^#define PINK /;"	d
PIXELFORMAT_COMPRESSED_ASTC_4x4_RGBA	$RAYLIB/raylib.h	/^    PIXELFORMAT_COMPRESSED_ASTC_4x4_RGBA,   \/\/ 8 bpp$/;"	e	enum:__anonfdf2e0de0d03
PIXELFORMAT_COMPRESSED_ASTC_8x8_RGBA	$RAYLIB/raylib.h	/^    PIXELFORMAT_COMPRESSED_ASTC_8x8_RGBA    \/\/ 2 bpp$/;"	e	enum:__anonfdf2e0de0d03
PIXELFORMAT_COMPRESSED_DXT1_RGB	$RAYLIB/raylib.h	/^    PIXELFORMAT_COMPRESSED_DXT1_RGB,        \/\/ 4 bpp (no alpha)$/;"	e	enum:__anonfdf2e0de0d03
PIXELFORMAT_COMPRESSED_DXT1_RGBA	$RAYLIB/raylib.h	/^    PIXELFORMAT_COMPRESSED_DXT1_RGBA,       \/\/ 4 bpp (1 bit alpha)$/;"	e	enum:__anonfdf2e0de0d03
PIXELFORMAT_COMPRESSED_DXT3_RGBA	$RAYLIB/raylib.h	/^    PIXELFORMAT_COMPRESSED_DXT3_RGBA,       \/\/ 8 bpp$/;"	e	enum:__anonfdf2e0de0d03
PIXELFORMAT_COMPRESSED_DXT5_RGBA	$RAYLIB/raylib.h	/^    PIXELFORMAT_COMPRESSED_DXT5_RGBA,       \/\/ 8 bpp$/;"	e	enum:__anonfdf2e0de0d03
PIXELFORMAT_COMPRESSED_ETC1_RGB	$RAYLIB/raylib.h	/^    PIXELFORMAT_COMPRESSED_ETC1_RGB,        \/\/ 4 bpp$/;"	e	enum:__anonfdf2e0de0d03
PIXELFORMAT_COMPRESSED_ETC2_EAC_RGBA	$RAYLIB/raylib.h	/^    PIXELFORMAT_COMPRESSED_ETC2_EAC_RGBA,   \/\/ 8 bpp$/;"	e	enum:__anonfdf2e0de0d03
PIXELFORMAT_COMPRESSED_ETC2_RGB	$RAYLIB/raylib.h	/^    PIXELFORMAT_COMPRESSED_ETC2_RGB,        \/\/ 4 bpp$/;"	e	enum:__anonfdf2e0de0d03
PIXELFORMAT_COMPRESSED_PVRT_RGB	$RAYLIB/raylib.h	/^    PIXELFORMAT_COMPRESSED_PVRT_RGB,        \/\/ 4 bpp$/;"	e	enum:__anonfdf2e0de0d03
PIXELFORMAT_COMPRESSED_PVRT_RGBA	$RAYLIB/raylib.h	/^    PIXELFORMAT_COMPRESSED_PVRT_RGBA,       \/\/ 4 bpp$/;"	e	enum:__anonfdf2e0de0d03
PIXELFORMAT_UNCOMPRESSED_GRAYSCALE	$RAYLIB/raylib.h	/^    PIXELFORMAT_UNCOMPRESSED_GRAYSCALE = 1, \/\/ 8 bit per pixel (no alpha)$/;"	e	enum:__anonfdf2e0de0d03
PIXELFORMAT_UNCOMPRESSED_GRAY_ALPHA	$RAYLIB/raylib.h	/^    PIXELFORMAT_UNCOMPRESSED_GRAY_ALPHA,    \/\/ 8*2 bpp (2 channels)$/;"	e	enum:__anonfdf2e0de0d03
PIXELFORMAT_UNCOMPRESSED_R16	$RAYLIB/raylib.h	/^    PIXELFORMAT_UNCOMPRESSED_R16,           \/\/ 16 bpp (1 channel - half float)$/;"	e	enum:__anonfdf2e0de0d03
PIXELFORMAT_UNCOMPRESSED_R16G16B16	$RAYLIB/raylib.h	/^    PIXELFORMAT_UNCOMPRESSED_R16G16B16,     \/\/ 16*3 bpp (3 channels - half float)$/;"	e	enum:__anonfdf2e0de0d03
PIXELFORMAT_UNCOMPRESSED_R16G16B16A16	$RAYLIB/raylib.h	/^    PIXELFORMAT_UNCOMPRESSED_R16G16B16A16,  \/\/ 16*4 bpp (4 channels - half float)$/;"	e	enum:__anonfdf2e0de0d03
PIXELFORMAT_UNCOMPRESSED_R32	$RAYLIB/raylib.h	/^    PIXELFORMAT_UNCOMPRESSED_R32,           \/\/ 32 bpp (1 channel - float)$/;"	e	enum:__anonfdf2e0de0d03
PIXELFORMAT_UNCOMPRESSED_R32G32B32	$RAYLIB/raylib.h	/^    PIXELFORMAT_UNCOMPRESSED_R32G32B32,     \/\/ 32*3 bpp (3 channels - float)$/;"	e	enum:__anonfdf2e0de0d03
PIXELFORMAT_UNCOMPRESSED_R32G32B32A32	$RAYLIB/raylib.h	/^    PIXELFORMAT_UNCOMPRESSED_R32G32B32A32,  \/\/ 32*4 bpp (4 channels - float)$/;"	e	enum:__anonfdf2e0de0d03
PIXELFORMAT_UNCOMPRESSED_R4G4B4A4	$RAYLIB/raylib.h	/^    PIXELFORMAT_UNCOMPRESSED_R4G4B4A4,      \/\/ 16 bpp (4 bit alpha)$/;"	e	enum:__anonfdf2e0de0d03
PIXELFORMAT_UNCOMPRESSED_R5G5B5A1	$RAYLIB/raylib.h	/^    PIXELFORMAT_UNCOMPRESSED_R5G5B5A1,      \/\/ 16 bpp (1 bit alpha)$/;"	e	enum:__anonfdf2e0de0d03
PIXELFORMAT_UNCOMPRESSED_R5G6B5	$RAYLIB/raylib.h	/^    PIXELFORMAT_UNCOMPRESSED_R5G6B5,        \/\/ 16 bpp$/;"	e	enum:__anonfdf2e0de0d03
PIXELFORMAT_UNCOMPRESSED_R8G8B8	$RAYLIB/raylib.h	/^    PIXELFORMAT_UNCOMPRESSED_R8G8B8,        \/\/ 24 bpp$/;"	e	enum:__anonfdf2e0de0d03
PIXELFORMAT_UNCOMPRESSED_R8G8B8A8	$RAYLIB/raylib.h	/^    PIXELFORMAT_UNCOMPRESSED_R8G8B8A8,      \/\/ 32 bpp$/;"	e	enum:__anonfdf2e0de0d03
PROGRESSBAR	$RAYLIB/raygui.h	/^    PROGRESSBAR,$/;"	e	enum:__anonfd9f18ac0603
PROGRESS_PADDING	$RAYLIB/raygui.h	/^    PROGRESS_PADDING = 16,      \/\/ ProgressBar internal padding$/;"	e	enum:__anonfd9f18ac0b03
PURPLE	$RAYLIB/raylib.h	/^#define PURPLE /;"	d
PauseAudioStream	$RAYLIB/raylib.h	/^RLAPI void PauseAudioStream(AudioStream stream);                      \/\/ Pause audio stream$/;"	p	typeref:typename:RLAPI void	signature:(AudioStream stream)
PauseMusicStream	$RAYLIB/raylib.h	/^RLAPI void PauseMusicStream(Music music);                             \/\/ Pause music playing$/;"	p	typeref:typename:RLAPI void	signature:(Music music)
PauseSound	$RAYLIB/raylib.h	/^RLAPI void PauseSound(Sound sound);                                   \/\/ Pause a sound$/;"	p	typeref:typename:RLAPI void	signature:(Sound sound)
PixelFormat	$RAYLIB/raylib.h	/^} PixelFormat;$/;"	t	typeref:enum:__anonfdf2e0de0d03
PlayAudioStream	$RAYLIB/raylib.h	/^RLAPI void PlayAudioStream(AudioStream stream);                       \/\/ Play audio stream$/;"	p	typeref:typename:RLAPI void	signature:(AudioStream stream)
PlayAutomationEvent	$RAYLIB/raylib.h	/^RLAPI void PlayAutomationEvent(AutomationEvent event);                                  \/\/ Pla/;"	p	typeref:typename:RLAPI void	signature:(AutomationEvent event)
PlayMusicStream	$RAYLIB/raylib.h	/^RLAPI void PlayMusicStream(Music music);                              \/\/ Start music playing$/;"	p	typeref:typename:RLAPI void	signature:(Music music)
PlaySound	$RAYLIB/raylib.h	/^RLAPI void PlaySound(Sound sound);                                    \/\/ Play a sound$/;"	p	typeref:typename:RLAPI void	signature:(Sound sound)
PollInputEvents	$RAYLIB/raylib.h	/^RLAPI void PollInputEvents(void);                                 \/\/ Register all input events$/;"	p	typeref:typename:RLAPI void	signature:(void)
Quaternion	$RAYLIB/raylib.h	/^typedef Vector4 Quaternion;$/;"	t	typeref:typename:Vector4
Quaternion	$RAYLIB/raymath.h	/^typedef Vector4 Quaternion;$/;"	t	typeref:typename:Vector4
QuaternionAdd	$RAYLIB/raymath.h	/^RMAPI Quaternion QuaternionAdd(Quaternion q1, Quaternion q2)$/;"	f	typeref:typename:RMAPI Quaternion	signature:(Quaternion q1,Quaternion q2)
QuaternionAddValue	$RAYLIB/raymath.h	/^RMAPI Quaternion QuaternionAddValue(Quaternion q, float add)$/;"	f	typeref:typename:RMAPI Quaternion	signature:(Quaternion q,float add)
QuaternionCubicHermiteSpline	$RAYLIB/raymath.h	/^RMAPI Quaternion QuaternionCubicHermiteSpline(Quaternion q1, Quaternion outTangent1, Quaternion /;"	f	typeref:typename:RMAPI Quaternion	signature:(Quaternion q1,Quaternion outTangent1,Quaternion q2,Quaternion inTangent2,float t)
QuaternionDivide	$RAYLIB/raymath.h	/^RMAPI Quaternion QuaternionDivide(Quaternion q1, Quaternion q2)$/;"	f	typeref:typename:RMAPI Quaternion	signature:(Quaternion q1,Quaternion q2)
QuaternionEquals	$RAYLIB/raymath.h	/^RMAPI int QuaternionEquals(Quaternion p, Quaternion q)$/;"	f	typeref:typename:RMAPI int	signature:(Quaternion p,Quaternion q)
QuaternionFromAxisAngle	$RAYLIB/raymath.h	/^RMAPI Quaternion QuaternionFromAxisAngle(Vector3 axis, float angle)$/;"	f	typeref:typename:RMAPI Quaternion	signature:(Vector3 axis,float angle)
QuaternionFromEuler	$RAYLIB/raymath.h	/^RMAPI Quaternion QuaternionFromEuler(float pitch, float yaw, float roll)$/;"	f	typeref:typename:RMAPI Quaternion	signature:(float pitch,float yaw,float roll)
QuaternionFromMatrix	$RAYLIB/raymath.h	/^RMAPI Quaternion QuaternionFromMatrix(Matrix mat)$/;"	f	typeref:typename:RMAPI Quaternion	signature:(Matrix mat)
QuaternionFromVector3ToVector3	$RAYLIB/raymath.h	/^RMAPI Quaternion QuaternionFromVector3ToVector3(Vector3 from, Vector3 to)$/;"	f	typeref:typename:RMAPI Quaternion	signature:(Vector3 from,Vector3 to)
QuaternionIdentity	$RAYLIB/raymath.h	/^RMAPI Quaternion QuaternionIdentity(void)$/;"	f	typeref:typename:RMAPI Quaternion	signature:(void)
QuaternionInvert	$RAYLIB/raymath.h	/^RMAPI Quaternion QuaternionInvert(Quaternion q)$/;"	f	typeref:typename:RMAPI Quaternion	signature:(Quaternion q)
QuaternionLength	$RAYLIB/raymath.h	/^RMAPI float QuaternionLength(Quaternion q)$/;"	f	typeref:typename:RMAPI float	signature:(Quaternion q)
QuaternionLerp	$RAYLIB/raymath.h	/^RMAPI Quaternion QuaternionLerp(Quaternion q1, Quaternion q2, float amount)$/;"	f	typeref:typename:RMAPI Quaternion	signature:(Quaternion q1,Quaternion q2,float amount)
QuaternionMultiply	$RAYLIB/raymath.h	/^RMAPI Quaternion QuaternionMultiply(Quaternion q1, Quaternion q2)$/;"	f	typeref:typename:RMAPI Quaternion	signature:(Quaternion q1,Quaternion q2)
QuaternionNlerp	$RAYLIB/raymath.h	/^RMAPI Quaternion QuaternionNlerp(Quaternion q1, Quaternion q2, float amount)$/;"	f	typeref:typename:RMAPI Quaternion	signature:(Quaternion q1,Quaternion q2,float amount)
QuaternionNormalize	$RAYLIB/raymath.h	/^RMAPI Quaternion QuaternionNormalize(Quaternion q)$/;"	f	typeref:typename:RMAPI Quaternion	signature:(Quaternion q)
QuaternionScale	$RAYLIB/raymath.h	/^RMAPI Quaternion QuaternionScale(Quaternion q, float mul)$/;"	f	typeref:typename:RMAPI Quaternion	signature:(Quaternion q,float mul)
QuaternionSlerp	$RAYLIB/raymath.h	/^RMAPI Quaternion QuaternionSlerp(Quaternion q1, Quaternion q2, float amount)$/;"	f	typeref:typename:RMAPI Quaternion	signature:(Quaternion q1,Quaternion q2,float amount)
QuaternionSubtract	$RAYLIB/raymath.h	/^RMAPI Quaternion QuaternionSubtract(Quaternion q1, Quaternion q2)$/;"	f	typeref:typename:RMAPI Quaternion	signature:(Quaternion q1,Quaternion q2)
QuaternionSubtractValue	$RAYLIB/raymath.h	/^RMAPI Quaternion QuaternionSubtractValue(Quaternion q, float sub)$/;"	f	typeref:typename:RMAPI Quaternion	signature:(Quaternion q,float sub)
QuaternionToAxisAngle	$RAYLIB/raymath.h	/^RMAPI void QuaternionToAxisAngle(Quaternion q, Vector3 *outAxis, float *outAngle)$/;"	f	typeref:typename:RMAPI void	signature:(Quaternion q,Vector3 * outAxis,float * outAngle)
QuaternionToEuler	$RAYLIB/raymath.h	/^RMAPI Vector3 QuaternionToEuler(Quaternion q)$/;"	f	typeref:typename:RMAPI Vector3	signature:(Quaternion q)
QuaternionToMatrix	$RAYLIB/raymath.h	/^RMAPI Matrix QuaternionToMatrix(Quaternion q)$/;"	f	typeref:typename:RMAPI Matrix	signature:(Quaternion q)
QuaternionTransform	$RAYLIB/raymath.h	/^RMAPI Quaternion QuaternionTransform(Quaternion q, Matrix mat)$/;"	f	typeref:typename:RMAPI Quaternion	signature:(Quaternion q,Matrix mat)
RAD2DEG	$RAYLIB/raylib.h	/^    #define RAD2DEG /;"	d
RAD2DEG	$RAYLIB/raymath.h	/^    #define RAD2DEG /;"	d
RAD2DEG	$RAYLIB/rlgl.h	/^    #define RAD2DEG /;"	d
RAYGUIAPI	$RAYLIB/raygui.h	/^    #define RAYGUIAPI /;"	d
RAYGUI_CALLOC	$RAYLIB/raygui.h	/^    #define RAYGUI_CALLOC(/;"	d	signature:(n,sz)
RAYGUI_CLITERAL	$RAYLIB/raygui.h	/^    #define RAYGUI_CLITERAL(/;"	d	signature:(name)
RAYGUI_COLORBARALPHA_CHECKED_SIZE	$RAYLIB/raygui.h	/^        #define RAYGUI_COLORBARALPHA_CHECKED_SIZE /;"	d
RAYGUI_FREE	$RAYLIB/raygui.h	/^    #define RAYGUI_FREE(/;"	d	signature:(p)
RAYGUI_GRID_ALPHA	$RAYLIB/raygui.h	/^        #define RAYGUI_GRID_ALPHA /;"	d
RAYGUI_GROUPBOX_LINE_THICK	$RAYLIB/raygui.h	/^        #define RAYGUI_GROUPBOX_LINE_THICK /;"	d
RAYGUI_H	$RAYLIB/raygui.h	/^#define RAYGUI_H$/;"	d
RAYGUI_ICON_DATA_ELEMENTS	$RAYLIB/raygui.h	/^#define RAYGUI_ICON_DATA_ELEMENTS /;"	d
RAYGUI_ICON_MAX_ICONS	$RAYLIB/raygui.h	/^#define RAYGUI_ICON_MAX_ICONS /;"	d
RAYGUI_ICON_MAX_NAME_LENGTH	$RAYLIB/raygui.h	/^#define RAYGUI_ICON_MAX_NAME_LENGTH /;"	d
RAYGUI_ICON_SIZE	$RAYLIB/raygui.h	/^#define RAYGUI_ICON_SIZE /;"	d
RAYGUI_LINE_MARGIN_TEXT	$RAYLIB/raygui.h	/^        #define RAYGUI_LINE_MARGIN_TEXT /;"	d
RAYGUI_LINE_TEXT_PADDING	$RAYLIB/raygui.h	/^        #define RAYGUI_LINE_TEXT_PADDING /;"	d
RAYGUI_LOG	$RAYLIB/raygui.h	/^  #define RAYGUI_LOG(/;"	d	signature:(...)
RAYGUI_MALLOC	$RAYLIB/raygui.h	/^    #define RAYGUI_MALLOC(/;"	d	signature:(sz)
RAYGUI_MAX_CONTROLS	$RAYLIB/raygui.h	/^#define RAYGUI_MAX_CONTROLS /;"	d
RAYGUI_MAX_PROPS_BASE	$RAYLIB/raygui.h	/^#define RAYGUI_MAX_PROPS_BASE /;"	d
RAYGUI_MAX_PROPS_EXTENDED	$RAYLIB/raygui.h	/^#define RAYGUI_MAX_PROPS_EXTENDED /;"	d
RAYGUI_MAX_TEXT_LINES	$RAYLIB/raygui.h	/^    #define RAYGUI_MAX_TEXT_LINES /;"	d
RAYGUI_MESSAGEBOX_BUTTON_HEIGHT	$RAYLIB/raygui.h	/^        #define RAYGUI_MESSAGEBOX_BUTTON_HEIGHT /;"	d
RAYGUI_MESSAGEBOX_BUTTON_PADDING	$RAYLIB/raygui.h	/^        #define RAYGUI_MESSAGEBOX_BUTTON_PADDING /;"	d
RAYGUI_MIN_MOUSE_WHEEL_SPEED	$RAYLIB/raygui.h	/^    #define RAYGUI_MIN_MOUSE_WHEEL_SPEED /;"	d
RAYGUI_MIN_SCROLLBAR_HEIGHT	$RAYLIB/raygui.h	/^    #define RAYGUI_MIN_SCROLLBAR_HEIGHT /;"	d
RAYGUI_MIN_SCROLLBAR_WIDTH	$RAYLIB/raygui.h	/^    #define RAYGUI_MIN_SCROLLBAR_WIDTH /;"	d
RAYGUI_PANEL_BORDER_WIDTH	$RAYLIB/raygui.h	/^        #define RAYGUI_PANEL_BORDER_WIDTH /;"	d
RAYGUI_SUPPORT_LOG_INFO	$RAYLIB/raygui.h	/^#define RAYGUI_SUPPORT_LOG_INFO$/;"	d
RAYGUI_TABBAR_ITEM_WIDTH	$RAYLIB/raygui.h	/^    #define RAYGUI_TABBAR_ITEM_WIDTH /;"	d
RAYGUI_TEXTBOX_AUTO_CURSOR_COOLDOWN	$RAYLIB/raygui.h	/^        #define RAYGUI_TEXTBOX_AUTO_CURSOR_COOLDOWN /;"	d
RAYGUI_TEXTBOX_AUTO_CURSOR_DELAY	$RAYLIB/raygui.h	/^        #define RAYGUI_TEXTBOX_AUTO_CURSOR_DELAY /;"	d
RAYGUI_TEXTFORMAT_MAX_SIZE	$RAYLIB/raygui.h	/^        #define RAYGUI_TEXTFORMAT_MAX_SIZE /;"	d
RAYGUI_TEXTINPUTBOX_BUTTON_HEIGHT	$RAYLIB/raygui.h	/^        #define RAYGUI_TEXTINPUTBOX_BUTTON_HEIGHT /;"	d
RAYGUI_TEXTINPUTBOX_BUTTON_PADDING	$RAYLIB/raygui.h	/^        #define RAYGUI_TEXTINPUTBOX_BUTTON_PADDING /;"	d
RAYGUI_TEXTINPUTBOX_HEIGHT	$RAYLIB/raygui.h	/^        #define RAYGUI_TEXTINPUTBOX_HEIGHT /;"	d
RAYGUI_TEXTSPLIT_MAX_ITEMS	$RAYLIB/raygui.h	/^        #define RAYGUI_TEXTSPLIT_MAX_ITEMS /;"	d
RAYGUI_TEXTSPLIT_MAX_TEXT_SIZE	$RAYLIB/raygui.h	/^        #define RAYGUI_TEXTSPLIT_MAX_TEXT_SIZE /;"	d
RAYGUI_TOGGLEGROUP_MAX_ITEMS	$RAYLIB/raygui.h	/^        #define RAYGUI_TOGGLEGROUP_MAX_ITEMS /;"	d
RAYGUI_VALUEBOX_MAX_CHARS	$RAYLIB/raygui.h	/^        #define RAYGUI_VALUEBOX_MAX_CHARS /;"	d
RAYGUI_VERSION	$RAYLIB/raygui.h	/^#define RAYGUI_VERSION /;"	d
RAYGUI_VERSION_MAJOR	$RAYLIB/raygui.h	/^#define RAYGUI_VERSION_MAJOR /;"	d
RAYGUI_VERSION_MINOR	$RAYLIB/raygui.h	/^#define RAYGUI_VERSION_MINOR /;"	d
RAYGUI_VERSION_PATCH	$RAYLIB/raygui.h	/^#define RAYGUI_VERSION_PATCH /;"	d
RAYGUI_WINDOWBOX_STATUSBAR_HEIGHT	$RAYLIB/raygui.h	/^        #define RAYGUI_WINDOWBOX_STATUSBAR_HEIGHT /;"	d
RAYLIB_H	$RAYLIB/raylib.h	/^#define RAYLIB_H$/;"	d
RAYLIB_VERSION	$RAYLIB/raylib.h	/^#define RAYLIB_VERSION /;"	d
RAYLIB_VERSION_MAJOR	$RAYLIB/raylib.h	/^#define RAYLIB_VERSION_MAJOR /;"	d
RAYLIB_VERSION_MINOR	$RAYLIB/raylib.h	/^#define RAYLIB_VERSION_MINOR /;"	d
RAYLIB_VERSION_PATCH	$RAYLIB/raylib.h	/^#define RAYLIB_VERSION_PATCH /;"	d
RAYMATH_H	$RAYLIB/raymath.h	/^#define RAYMATH_H$/;"	d
RAYWHITE	$RAYLIB/raylib.h	/^#define RAYWHITE /;"	d
RED	$RAYLIB/raylib.h	/^#define RED /;"	d
RLAPI	$RAYLIB/raylib.h	/^    #define RLAPI /;"	d
RLAPI	$RAYLIB/rlgl.h	/^    #define RLAPI /;"	d
RLGL	$RAYLIB/rlgl.h	/^static rlglData RLGL = { 0 };$/;"	v	typeref:typename:rlglData
RLGL_H	$RAYLIB/rlgl.h	/^#define RLGL_H$/;"	d
RLGL_RENDER_TEXTURES_HINT	$RAYLIB/rlgl.h	/^#define RLGL_RENDER_TEXTURES_HINT$/;"	d
RLGL_VERSION	$RAYLIB/rlgl.h	/^#define RLGL_VERSION /;"	d
RL_ATTACHMENT_COLOR_CHANNEL0	$RAYLIB/rlgl.h	/^    RL_ATTACHMENT_COLOR_CHANNEL0 = 0,       \/\/ Framebuffer attachment type: color 0$/;"	e	enum:__anon19a7bfac0a03
RL_ATTACHMENT_COLOR_CHANNEL1	$RAYLIB/rlgl.h	/^    RL_ATTACHMENT_COLOR_CHANNEL1 = 1,       \/\/ Framebuffer attachment type: color 1$/;"	e	enum:__anon19a7bfac0a03
RL_ATTACHMENT_COLOR_CHANNEL2	$RAYLIB/rlgl.h	/^    RL_ATTACHMENT_COLOR_CHANNEL2 = 2,       \/\/ Framebuffer attachment type: color 2$/;"	e	enum:__anon19a7bfac0a03
RL_ATTACHMENT_COLOR_CHANNEL3	$RAYLIB/rlgl.h	/^    RL_ATTACHMENT_COLOR_CHANNEL3 = 3,       \/\/ Framebuffer attachment type: color 3$/;"	e	enum:__anon19a7bfac0a03
RL_ATTACHMENT_COLOR_CHANNEL4	$RAYLIB/rlgl.h	/^    RL_ATTACHMENT_COLOR_CHANNEL4 = 4,       \/\/ Framebuffer attachment type: color 4$/;"	e	enum:__anon19a7bfac0a03
RL_ATTACHMENT_COLOR_CHANNEL5	$RAYLIB/rlgl.h	/^    RL_ATTACHMENT_COLOR_CHANNEL5 = 5,       \/\/ Framebuffer attachment type: color 5$/;"	e	enum:__anon19a7bfac0a03
RL_ATTACHMENT_COLOR_CHANNEL6	$RAYLIB/rlgl.h	/^    RL_ATTACHMENT_COLOR_CHANNEL6 = 6,       \/\/ Framebuffer attachment type: color 6$/;"	e	enum:__anon19a7bfac0a03
RL_ATTACHMENT_COLOR_CHANNEL7	$RAYLIB/rlgl.h	/^    RL_ATTACHMENT_COLOR_CHANNEL7 = 7,       \/\/ Framebuffer attachment type: color 7$/;"	e	enum:__anon19a7bfac0a03
RL_ATTACHMENT_CUBEMAP_NEGATIVE_X	$RAYLIB/rlgl.h	/^    RL_ATTACHMENT_CUBEMAP_NEGATIVE_X = 1,   \/\/ Framebuffer texture attachment type: cubemap, -/;"	e	enum:__anon19a7bfac0b03
RL_ATTACHMENT_CUBEMAP_NEGATIVE_Y	$RAYLIB/rlgl.h	/^    RL_ATTACHMENT_CUBEMAP_NEGATIVE_Y = 3,   \/\/ Framebuffer texture attachment type: cubemap, -/;"	e	enum:__anon19a7bfac0b03
RL_ATTACHMENT_CUBEMAP_NEGATIVE_Z	$RAYLIB/rlgl.h	/^    RL_ATTACHMENT_CUBEMAP_NEGATIVE_Z = 5,   \/\/ Framebuffer texture attachment type: cubemap, -/;"	e	enum:__anon19a7bfac0b03
RL_ATTACHMENT_CUBEMAP_POSITIVE_X	$RAYLIB/rlgl.h	/^    RL_ATTACHMENT_CUBEMAP_POSITIVE_X = 0,   \/\/ Framebuffer texture attachment type: cubemap, +/;"	e	enum:__anon19a7bfac0b03
RL_ATTACHMENT_CUBEMAP_POSITIVE_Y	$RAYLIB/rlgl.h	/^    RL_ATTACHMENT_CUBEMAP_POSITIVE_Y = 2,   \/\/ Framebuffer texture attachment type: cubemap, +/;"	e	enum:__anon19a7bfac0b03
RL_ATTACHMENT_CUBEMAP_POSITIVE_Z	$RAYLIB/rlgl.h	/^    RL_ATTACHMENT_CUBEMAP_POSITIVE_Z = 4,   \/\/ Framebuffer texture attachment type: cubemap, +/;"	e	enum:__anon19a7bfac0b03
RL_ATTACHMENT_DEPTH	$RAYLIB/rlgl.h	/^    RL_ATTACHMENT_DEPTH = 100,              \/\/ Framebuffer attachment type: depth$/;"	e	enum:__anon19a7bfac0a03
RL_ATTACHMENT_RENDERBUFFER	$RAYLIB/rlgl.h	/^    RL_ATTACHMENT_RENDERBUFFER = 200,       \/\/ Framebuffer texture attachment type: renderbuff/;"	e	enum:__anon19a7bfac0b03
RL_ATTACHMENT_STENCIL	$RAYLIB/rlgl.h	/^    RL_ATTACHMENT_STENCIL = 200,            \/\/ Framebuffer attachment type: stencil$/;"	e	enum:__anon19a7bfac0a03
RL_ATTACHMENT_TEXTURE2D	$RAYLIB/rlgl.h	/^    RL_ATTACHMENT_TEXTURE2D = 100,          \/\/ Framebuffer texture attachment type: texture2d$/;"	e	enum:__anon19a7bfac0b03
RL_BLEND_ADDITIVE	$RAYLIB/rlgl.h	/^    RL_BLEND_ADDITIVE,                  \/\/ Blend textures adding colors$/;"	e	enum:__anon19a7bfac0603
RL_BLEND_ADD_COLORS	$RAYLIB/rlgl.h	/^    RL_BLEND_ADD_COLORS,                \/\/ Blend textures adding colors (alternative)$/;"	e	enum:__anon19a7bfac0603
RL_BLEND_ALPHA	$RAYLIB/rlgl.h	/^    RL_BLEND_ALPHA = 0,                 \/\/ Blend textures considering alpha (default)$/;"	e	enum:__anon19a7bfac0603
RL_BLEND_ALPHA_PREMULTIPLY	$RAYLIB/rlgl.h	/^    RL_BLEND_ALPHA_PREMULTIPLY,         \/\/ Blend premultiplied textures considering alpha$/;"	e	enum:__anon19a7bfac0603
RL_BLEND_COLOR	$RAYLIB/rlgl.h	/^#define RL_BLEND_COLOR /;"	d
RL_BLEND_CUSTOM	$RAYLIB/rlgl.h	/^    RL_BLEND_CUSTOM,                    \/\/ Blend textures using custom src\/dst factors (use r/;"	e	enum:__anon19a7bfac0603
RL_BLEND_CUSTOM_SEPARATE	$RAYLIB/rlgl.h	/^    RL_BLEND_CUSTOM_SEPARATE            \/\/ Blend textures using custom src\/dst factors (use r/;"	e	enum:__anon19a7bfac0603
RL_BLEND_DST_ALPHA	$RAYLIB/rlgl.h	/^#define RL_BLEND_DST_ALPHA /;"	d
RL_BLEND_DST_RGB	$RAYLIB/rlgl.h	/^#define RL_BLEND_DST_RGB /;"	d
RL_BLEND_EQUATION	$RAYLIB/rlgl.h	/^#define RL_BLEND_EQUATION /;"	d
RL_BLEND_EQUATION_ALPHA	$RAYLIB/rlgl.h	/^#define RL_BLEND_EQUATION_ALPHA /;"	d
RL_BLEND_EQUATION_RGB	$RAYLIB/rlgl.h	/^#define RL_BLEND_EQUATION_RGB /;"	d
RL_BLEND_MULTIPLIED	$RAYLIB/rlgl.h	/^    RL_BLEND_MULTIPLIED,                \/\/ Blend textures multiplying colors$/;"	e	enum:__anon19a7bfac0603
RL_BLEND_SRC_ALPHA	$RAYLIB/rlgl.h	/^#define RL_BLEND_SRC_ALPHA /;"	d
RL_BLEND_SRC_RGB	$RAYLIB/rlgl.h	/^#define RL_BLEND_SRC_RGB /;"	d
RL_BLEND_SUBTRACT_COLORS	$RAYLIB/rlgl.h	/^    RL_BLEND_SUBTRACT_COLORS,           \/\/ Blend textures subtracting colors (alternative)$/;"	e	enum:__anon19a7bfac0603
RL_BOOL_TYPE	$RAYLIB/raylib.h	/^    #define RL_BOOL_TYPE$/;"	d
RL_CALLOC	$RAYLIB/raylib.h	/^    #define RL_CALLOC(/;"	d	signature:(n,sz)
RL_CALLOC	$RAYLIB/rlgl.h	/^    #define RL_CALLOC(/;"	d	signature:(n,sz)
RL_COLOR_TYPE	$RAYLIB/raylib.h	/^#define RL_COLOR_TYPE$/;"	d
RL_COMPUTE_SHADER	$RAYLIB/rlgl.h	/^#define RL_COMPUTE_SHADER /;"	d
RL_CONSTANT_ALPHA	$RAYLIB/rlgl.h	/^#define RL_CONSTANT_ALPHA /;"	d
RL_CONSTANT_COLOR	$RAYLIB/rlgl.h	/^#define RL_CONSTANT_COLOR /;"	d
RL_CULL_DISTANCE_FAR	$RAYLIB/rlgl.h	/^    #define RL_CULL_DISTANCE_FAR /;"	d
RL_CULL_DISTANCE_NEAR	$RAYLIB/rlgl.h	/^    #define RL_CULL_DISTANCE_NEAR /;"	d
RL_CULL_FACE_BACK	$RAYLIB/rlgl.h	/^    RL_CULL_FACE_BACK$/;"	e	enum:__anon19a7bfac0c03
RL_CULL_FACE_FRONT	$RAYLIB/rlgl.h	/^    RL_CULL_FACE_FRONT = 0,$/;"	e	enum:__anon19a7bfac0c03
RL_DEFAULT_BATCH_BUFFERS	$RAYLIB/rlgl.h	/^    #define RL_DEFAULT_BATCH_BUFFERS /;"	d
RL_DEFAULT_BATCH_BUFFER_ELEMENTS	$RAYLIB/rlgl.h	/^        #define RL_DEFAULT_BATCH_BUFFER_ELEMENTS /;"	d
RL_DEFAULT_BATCH_DRAWCALLS	$RAYLIB/rlgl.h	/^    #define RL_DEFAULT_BATCH_DRAWCALLS /;"	d
RL_DEFAULT_BATCH_MAX_TEXTURE_UNITS	$RAYLIB/rlgl.h	/^    #define RL_DEFAULT_BATCH_MAX_TEXTURE_UNITS /;"	d
RL_DEFAULT_SHADER_ATTRIB_LOCATION_COLOR	$RAYLIB/rlgl.h	/^    #define RL_DEFAULT_SHADER_ATTRIB_LOCATION_COLOR /;"	d
RL_DEFAULT_SHADER_ATTRIB_LOCATION_NORMAL	$RAYLIB/rlgl.h	/^    #define RL_DEFAULT_SHADER_ATTRIB_LOCATION_NORMAL /;"	d
RL_DEFAULT_SHADER_ATTRIB_LOCATION_POSITION	$RAYLIB/rlgl.h	/^    #define RL_DEFAULT_SHADER_ATTRIB_LOCATION_POSITION /;"	d
RL_DEFAULT_SHADER_ATTRIB_LOCATION_TANGENT	$RAYLIB/rlgl.h	/^#define RL_DEFAULT_SHADER_ATTRIB_LOCATION_TANGENT /;"	d
RL_DEFAULT_SHADER_ATTRIB_LOCATION_TEXCOORD	$RAYLIB/rlgl.h	/^    #define RL_DEFAULT_SHADER_ATTRIB_LOCATION_TEXCOORD /;"	d
RL_DEFAULT_SHADER_ATTRIB_LOCATION_TEXCOORD2	$RAYLIB/rlgl.h	/^    #define RL_DEFAULT_SHADER_ATTRIB_LOCATION_TEXCOORD2 /;"	d
RL_DEFAULT_SHADER_ATTRIB_NAME_COLOR	$RAYLIB/rlgl.h	/^    #define RL_DEFAULT_SHADER_ATTRIB_NAME_COLOR        "vertexColor"       \/\/ Bound by default/;"	d
RL_DEFAULT_SHADER_ATTRIB_NAME_NORMAL	$RAYLIB/rlgl.h	/^    #define RL_DEFAULT_SHADER_ATTRIB_NAME_NORMAL       "vertexNormal"      \/\/ Bound by default/;"	d
RL_DEFAULT_SHADER_ATTRIB_NAME_POSITION	$RAYLIB/rlgl.h	/^    #define RL_DEFAULT_SHADER_ATTRIB_NAME_POSITION     "vertexPosition"    \/\/ Bound by default/;"	d
RL_DEFAULT_SHADER_ATTRIB_NAME_TANGENT	$RAYLIB/rlgl.h	/^    #define RL_DEFAULT_SHADER_ATTRIB_NAME_TANGENT      "vertexTangent"     \/\/ Bound by default/;"	d
RL_DEFAULT_SHADER_ATTRIB_NAME_TEXCOORD	$RAYLIB/rlgl.h	/^    #define RL_DEFAULT_SHADER_ATTRIB_NAME_TEXCOORD     "vertexTexCoord"    \/\/ Bound by default/;"	d
RL_DEFAULT_SHADER_ATTRIB_NAME_TEXCOORD2	$RAYLIB/rlgl.h	/^    #define RL_DEFAULT_SHADER_ATTRIB_NAME_TEXCOORD2    "vertexTexCoord2"   \/\/ Bound by default/;"	d
RL_DEFAULT_SHADER_SAMPLER2D_NAME_TEXTURE0	$RAYLIB/rlgl.h	/^    #define RL_DEFAULT_SHADER_SAMPLER2D_NAME_TEXTURE0 /;"	d
RL_DEFAULT_SHADER_SAMPLER2D_NAME_TEXTURE1	$RAYLIB/rlgl.h	/^    #define RL_DEFAULT_SHADER_SAMPLER2D_NAME_TEXTURE1 /;"	d
RL_DEFAULT_SHADER_SAMPLER2D_NAME_TEXTURE2	$RAYLIB/rlgl.h	/^    #define RL_DEFAULT_SHADER_SAMPLER2D_NAME_TEXTURE2 /;"	d
RL_DEFAULT_SHADER_UNIFORM_NAME_COLOR	$RAYLIB/rlgl.h	/^    #define RL_DEFAULT_SHADER_UNIFORM_NAME_COLOR /;"	d
RL_DEFAULT_SHADER_UNIFORM_NAME_MODEL	$RAYLIB/rlgl.h	/^    #define RL_DEFAULT_SHADER_UNIFORM_NAME_MODEL /;"	d
RL_DEFAULT_SHADER_UNIFORM_NAME_MVP	$RAYLIB/rlgl.h	/^    #define RL_DEFAULT_SHADER_UNIFORM_NAME_MVP /;"	d
RL_DEFAULT_SHADER_UNIFORM_NAME_NORMAL	$RAYLIB/rlgl.h	/^    #define RL_DEFAULT_SHADER_UNIFORM_NAME_NORMAL /;"	d
RL_DEFAULT_SHADER_UNIFORM_NAME_PROJECTION	$RAYLIB/rlgl.h	/^    #define RL_DEFAULT_SHADER_UNIFORM_NAME_PROJECTION /;"	d
RL_DEFAULT_SHADER_UNIFORM_NAME_VIEW	$RAYLIB/rlgl.h	/^    #define RL_DEFAULT_SHADER_UNIFORM_NAME_VIEW /;"	d
RL_DRAW_FRAMEBUFFER	$RAYLIB/rlgl.h	/^#define RL_DRAW_FRAMEBUFFER /;"	d
RL_DST_ALPHA	$RAYLIB/rlgl.h	/^#define RL_DST_ALPHA /;"	d
RL_DST_COLOR	$RAYLIB/rlgl.h	/^#define RL_DST_COLOR /;"	d
RL_DYNAMIC_COPY	$RAYLIB/rlgl.h	/^#define RL_DYNAMIC_COPY /;"	d
RL_DYNAMIC_DRAW	$RAYLIB/rlgl.h	/^#define RL_DYNAMIC_DRAW /;"	d
RL_DYNAMIC_READ	$RAYLIB/rlgl.h	/^#define RL_DYNAMIC_READ /;"	d
RL_FLOAT	$RAYLIB/rlgl.h	/^#define RL_FLOAT /;"	d
RL_FRAGMENT_SHADER	$RAYLIB/rlgl.h	/^#define RL_FRAGMENT_SHADER /;"	d
RL_FREE	$RAYLIB/raylib.h	/^    #define RL_FREE(/;"	d	signature:(ptr)
RL_FREE	$RAYLIB/rlgl.h	/^    #define RL_FREE(/;"	d	signature:(p)
RL_FUNC_ADD	$RAYLIB/rlgl.h	/^#define RL_FUNC_ADD /;"	d
RL_FUNC_REVERSE_SUBTRACT	$RAYLIB/rlgl.h	/^#define RL_FUNC_REVERSE_SUBTRACT /;"	d
RL_FUNC_SUBTRACT	$RAYLIB/rlgl.h	/^#define RL_FUNC_SUBTRACT /;"	d
RL_LINES	$RAYLIB/rlgl.h	/^#define RL_LINES /;"	d
RL_LOG_ALL	$RAYLIB/rlgl.h	/^    RL_LOG_ALL = 0,             \/\/ Display all logs$/;"	e	enum:__anon19a7bfac0303
RL_LOG_DEBUG	$RAYLIB/rlgl.h	/^    RL_LOG_DEBUG,               \/\/ Debug logging, used for internal debugging, it should be di/;"	e	enum:__anon19a7bfac0303
RL_LOG_ERROR	$RAYLIB/rlgl.h	/^    RL_LOG_ERROR,               \/\/ Error logging, used on unrecoverable failures$/;"	e	enum:__anon19a7bfac0303
RL_LOG_FATAL	$RAYLIB/rlgl.h	/^    RL_LOG_FATAL,               \/\/ Fatal logging, used to abort program: exit(EXIT_FAILURE)$/;"	e	enum:__anon19a7bfac0303
RL_LOG_INFO	$RAYLIB/rlgl.h	/^    RL_LOG_INFO,                \/\/ Info logging, used for program execution info$/;"	e	enum:__anon19a7bfac0303
RL_LOG_NONE	$RAYLIB/rlgl.h	/^    RL_LOG_NONE                 \/\/ Disable logging$/;"	e	enum:__anon19a7bfac0303
RL_LOG_TRACE	$RAYLIB/rlgl.h	/^    RL_LOG_TRACE,               \/\/ Trace logging, intended for internal use only$/;"	e	enum:__anon19a7bfac0303
RL_LOG_WARNING	$RAYLIB/rlgl.h	/^    RL_LOG_WARNING,             \/\/ Warning logging, used on recoverable failures$/;"	e	enum:__anon19a7bfac0303
RL_MALLOC	$RAYLIB/raylib.h	/^    #define RL_MALLOC(/;"	d	signature:(sz)
RL_MALLOC	$RAYLIB/rlgl.h	/^    #define RL_MALLOC(/;"	d	signature:(sz)
RL_MATRIX_TYPE	$RAYLIB/raylib.h	/^#define RL_MATRIX_TYPE$/;"	d
RL_MATRIX_TYPE	$RAYLIB/raymath.h	/^#define RL_MATRIX_TYPE$/;"	d
RL_MATRIX_TYPE	$RAYLIB/rlgl.h	/^#define RL_MATRIX_TYPE$/;"	d
RL_MAX	$RAYLIB/rlgl.h	/^#define RL_MAX /;"	d
RL_MAX_MATRIX_STACK_SIZE	$RAYLIB/rlgl.h	/^    #define RL_MAX_MATRIX_STACK_SIZE /;"	d
RL_MAX_SHADER_LOCATIONS	$RAYLIB/rlgl.h	/^    #define RL_MAX_SHADER_LOCATIONS /;"	d
RL_MIN	$RAYLIB/rlgl.h	/^#define RL_MIN /;"	d
RL_MODELVIEW	$RAYLIB/rlgl.h	/^#define RL_MODELVIEW /;"	d
RL_ONE	$RAYLIB/rlgl.h	/^#define RL_ONE /;"	d
RL_ONE_MINUS_CONSTANT_ALPHA	$RAYLIB/rlgl.h	/^#define RL_ONE_MINUS_CONSTANT_ALPHA /;"	d
RL_ONE_MINUS_CONSTANT_COLOR	$RAYLIB/rlgl.h	/^#define RL_ONE_MINUS_CONSTANT_COLOR /;"	d
RL_ONE_MINUS_DST_ALPHA	$RAYLIB/rlgl.h	/^#define RL_ONE_MINUS_DST_ALPHA /;"	d
RL_ONE_MINUS_DST_COLOR	$RAYLIB/rlgl.h	/^#define RL_ONE_MINUS_DST_COLOR /;"	d
RL_ONE_MINUS_SRC_ALPHA	$RAYLIB/rlgl.h	/^#define RL_ONE_MINUS_SRC_ALPHA /;"	d
RL_ONE_MINUS_SRC_COLOR	$RAYLIB/rlgl.h	/^#define RL_ONE_MINUS_SRC_COLOR /;"	d
RL_OPENGL_11	$RAYLIB/rlgl.h	/^    RL_OPENGL_11 = 1,           \/\/ OpenGL 1.1$/;"	e	enum:__anon19a7bfac0203
RL_OPENGL_21	$RAYLIB/rlgl.h	/^    RL_OPENGL_21,               \/\/ OpenGL 2.1 (GLSL 120)$/;"	e	enum:__anon19a7bfac0203
RL_OPENGL_33	$RAYLIB/rlgl.h	/^    RL_OPENGL_33,               \/\/ OpenGL 3.3 (GLSL 330)$/;"	e	enum:__anon19a7bfac0203
RL_OPENGL_43	$RAYLIB/rlgl.h	/^    RL_OPENGL_43,               \/\/ OpenGL 4.3 (using GLSL 330)$/;"	e	enum:__anon19a7bfac0203
RL_OPENGL_ES_20	$RAYLIB/rlgl.h	/^    RL_OPENGL_ES_20,            \/\/ OpenGL ES 2.0 (GLSL 100)$/;"	e	enum:__anon19a7bfac0203
RL_OPENGL_ES_30	$RAYLIB/rlgl.h	/^    RL_OPENGL_ES_30             \/\/ OpenGL ES 3.0 (GLSL 300 es)$/;"	e	enum:__anon19a7bfac0203
RL_PIXELFORMAT_COMPRESSED_ASTC_4x4_RGBA	$RAYLIB/rlgl.h	/^    RL_PIXELFORMAT_COMPRESSED_ASTC_4x4_RGBA,       \/\/ 8 bpp$/;"	e	enum:__anon19a7bfac0403
RL_PIXELFORMAT_COMPRESSED_ASTC_8x8_RGBA	$RAYLIB/rlgl.h	/^    RL_PIXELFORMAT_COMPRESSED_ASTC_8x8_RGBA        \/\/ 2 bpp$/;"	e	enum:__anon19a7bfac0403
RL_PIXELFORMAT_COMPRESSED_DXT1_RGB	$RAYLIB/rlgl.h	/^    RL_PIXELFORMAT_COMPRESSED_DXT1_RGB,            \/\/ 4 bpp (no alpha)$/;"	e	enum:__anon19a7bfac0403
RL_PIXELFORMAT_COMPRESSED_DXT1_RGBA	$RAYLIB/rlgl.h	/^    RL_PIXELFORMAT_COMPRESSED_DXT1_RGBA,           \/\/ 4 bpp (1 bit alpha)$/;"	e	enum:__anon19a7bfac0403
RL_PIXELFORMAT_COMPRESSED_DXT3_RGBA	$RAYLIB/rlgl.h	/^    RL_PIXELFORMAT_COMPRESSED_DXT3_RGBA,           \/\/ 8 bpp$/;"	e	enum:__anon19a7bfac0403
RL_PIXELFORMAT_COMPRESSED_DXT5_RGBA	$RAYLIB/rlgl.h	/^    RL_PIXELFORMAT_COMPRESSED_DXT5_RGBA,           \/\/ 8 bpp$/;"	e	enum:__anon19a7bfac0403
RL_PIXELFORMAT_COMPRESSED_ETC1_RGB	$RAYLIB/rlgl.h	/^    RL_PIXELFORMAT_COMPRESSED_ETC1_RGB,            \/\/ 4 bpp$/;"	e	enum:__anon19a7bfac0403
RL_PIXELFORMAT_COMPRESSED_ETC2_EAC_RGBA	$RAYLIB/rlgl.h	/^    RL_PIXELFORMAT_COMPRESSED_ETC2_EAC_RGBA,       \/\/ 8 bpp$/;"	e	enum:__anon19a7bfac0403
RL_PIXELFORMAT_COMPRESSED_ETC2_RGB	$RAYLIB/rlgl.h	/^    RL_PIXELFORMAT_COMPRESSED_ETC2_RGB,            \/\/ 4 bpp$/;"	e	enum:__anon19a7bfac0403
RL_PIXELFORMAT_COMPRESSED_PVRT_RGB	$RAYLIB/rlgl.h	/^    RL_PIXELFORMAT_COMPRESSED_PVRT_RGB,            \/\/ 4 bpp$/;"	e	enum:__anon19a7bfac0403
RL_PIXELFORMAT_COMPRESSED_PVRT_RGBA	$RAYLIB/rlgl.h	/^    RL_PIXELFORMAT_COMPRESSED_PVRT_RGBA,           \/\/ 4 bpp$/;"	e	enum:__anon19a7bfac0403
RL_PIXELFORMAT_UNCOMPRESSED_GRAYSCALE	$RAYLIB/rlgl.h	/^    RL_PIXELFORMAT_UNCOMPRESSED_GRAYSCALE = 1,     \/\/ 8 bit per pixel (no alpha)$/;"	e	enum:__anon19a7bfac0403
RL_PIXELFORMAT_UNCOMPRESSED_GRAY_ALPHA	$RAYLIB/rlgl.h	/^    RL_PIXELFORMAT_UNCOMPRESSED_GRAY_ALPHA,        \/\/ 8*2 bpp (2 channels)$/;"	e	enum:__anon19a7bfac0403
RL_PIXELFORMAT_UNCOMPRESSED_R16	$RAYLIB/rlgl.h	/^    RL_PIXELFORMAT_UNCOMPRESSED_R16,               \/\/ 16 bpp (1 channel - half float)$/;"	e	enum:__anon19a7bfac0403
RL_PIXELFORMAT_UNCOMPRESSED_R16G16B16	$RAYLIB/rlgl.h	/^    RL_PIXELFORMAT_UNCOMPRESSED_R16G16B16,         \/\/ 16*3 bpp (3 channels - half float)$/;"	e	enum:__anon19a7bfac0403
RL_PIXELFORMAT_UNCOMPRESSED_R16G16B16A16	$RAYLIB/rlgl.h	/^    RL_PIXELFORMAT_UNCOMPRESSED_R16G16B16A16,      \/\/ 16*4 bpp (4 channels - half float)$/;"	e	enum:__anon19a7bfac0403
RL_PIXELFORMAT_UNCOMPRESSED_R32	$RAYLIB/rlgl.h	/^    RL_PIXELFORMAT_UNCOMPRESSED_R32,               \/\/ 32 bpp (1 channel - float)$/;"	e	enum:__anon19a7bfac0403
RL_PIXELFORMAT_UNCOMPRESSED_R32G32B32	$RAYLIB/rlgl.h	/^    RL_PIXELFORMAT_UNCOMPRESSED_R32G32B32,         \/\/ 32*3 bpp (3 channels - float)$/;"	e	enum:__anon19a7bfac0403
RL_PIXELFORMAT_UNCOMPRESSED_R32G32B32A32	$RAYLIB/rlgl.h	/^    RL_PIXELFORMAT_UNCOMPRESSED_R32G32B32A32,      \/\/ 32*4 bpp (4 channels - float)$/;"	e	enum:__anon19a7bfac0403
RL_PIXELFORMAT_UNCOMPRESSED_R4G4B4A4	$RAYLIB/rlgl.h	/^    RL_PIXELFORMAT_UNCOMPRESSED_R4G4B4A4,          \/\/ 16 bpp (4 bit alpha)$/;"	e	enum:__anon19a7bfac0403
RL_PIXELFORMAT_UNCOMPRESSED_R5G5B5A1	$RAYLIB/rlgl.h	/^    RL_PIXELFORMAT_UNCOMPRESSED_R5G5B5A1,          \/\/ 16 bpp (1 bit alpha)$/;"	e	enum:__anon19a7bfac0403
RL_PIXELFORMAT_UNCOMPRESSED_R5G6B5	$RAYLIB/rlgl.h	/^    RL_PIXELFORMAT_UNCOMPRESSED_R5G6B5,            \/\/ 16 bpp$/;"	e	enum:__anon19a7bfac0403
RL_PIXELFORMAT_UNCOMPRESSED_R8G8B8	$RAYLIB/rlgl.h	/^    RL_PIXELFORMAT_UNCOMPRESSED_R8G8B8,            \/\/ 24 bpp$/;"	e	enum:__anon19a7bfac0403
RL_PIXELFORMAT_UNCOMPRESSED_R8G8B8A8	$RAYLIB/rlgl.h	/^    RL_PIXELFORMAT_UNCOMPRESSED_R8G8B8A8,          \/\/ 32 bpp$/;"	e	enum:__anon19a7bfac0403
RL_PROJECTION	$RAYLIB/rlgl.h	/^#define RL_PROJECTION /;"	d
RL_QUADS	$RAYLIB/rlgl.h	/^#define RL_QUADS /;"	d
RL_QUATERNION_TYPE	$RAYLIB/raylib.h	/^#define RL_QUATERNION_TYPE$/;"	d
RL_QUATERNION_TYPE	$RAYLIB/raymath.h	/^#define RL_QUATERNION_TYPE$/;"	d
RL_READ_FRAMEBUFFER	$RAYLIB/rlgl.h	/^#define RL_READ_FRAMEBUFFER /;"	d
RL_REALLOC	$RAYLIB/raylib.h	/^    #define RL_REALLOC(/;"	d	signature:(ptr,sz)
RL_REALLOC	$RAYLIB/rlgl.h	/^    #define RL_REALLOC(/;"	d	signature:(n,sz)
RL_RECTANGLE_TYPE	$RAYLIB/raylib.h	/^#define RL_RECTANGLE_TYPE$/;"	d
RL_SHADER_ATTRIB_FLOAT	$RAYLIB/rlgl.h	/^    RL_SHADER_ATTRIB_FLOAT = 0,         \/\/ Shader attribute type: float$/;"	e	enum:__anon19a7bfac0903
RL_SHADER_ATTRIB_VEC2	$RAYLIB/rlgl.h	/^    RL_SHADER_ATTRIB_VEC2,              \/\/ Shader attribute type: vec2 (2 float)$/;"	e	enum:__anon19a7bfac0903
RL_SHADER_ATTRIB_VEC3	$RAYLIB/rlgl.h	/^    RL_SHADER_ATTRIB_VEC3,              \/\/ Shader attribute type: vec3 (3 float)$/;"	e	enum:__anon19a7bfac0903
RL_SHADER_ATTRIB_VEC4	$RAYLIB/rlgl.h	/^    RL_SHADER_ATTRIB_VEC4               \/\/ Shader attribute type: vec4 (4 float)$/;"	e	enum:__anon19a7bfac0903
RL_SHADER_LOC_COLOR_AMBIENT	$RAYLIB/rlgl.h	/^    RL_SHADER_LOC_COLOR_AMBIENT,        \/\/ Shader location: vector uniform: ambient color$/;"	e	enum:__anon19a7bfac0703
RL_SHADER_LOC_COLOR_DIFFUSE	$RAYLIB/rlgl.h	/^    RL_SHADER_LOC_COLOR_DIFFUSE,        \/\/ Shader location: vector uniform: diffuse color$/;"	e	enum:__anon19a7bfac0703
RL_SHADER_LOC_COLOR_SPECULAR	$RAYLIB/rlgl.h	/^    RL_SHADER_LOC_COLOR_SPECULAR,       \/\/ Shader location: vector uniform: specular color$/;"	e	enum:__anon19a7bfac0703
RL_SHADER_LOC_MAP_ALBEDO	$RAYLIB/rlgl.h	/^    RL_SHADER_LOC_MAP_ALBEDO,           \/\/ Shader location: sampler2d texture: albedo (same as/;"	e	enum:__anon19a7bfac0703
RL_SHADER_LOC_MAP_BRDF	$RAYLIB/rlgl.h	/^    RL_SHADER_LOC_MAP_BRDF              \/\/ Shader location: sampler2d texture: brdf$/;"	e	enum:__anon19a7bfac0703
RL_SHADER_LOC_MAP_CUBEMAP	$RAYLIB/rlgl.h	/^    RL_SHADER_LOC_MAP_CUBEMAP,          \/\/ Shader location: samplerCube texture: cubemap$/;"	e	enum:__anon19a7bfac0703
RL_SHADER_LOC_MAP_DIFFUSE	$RAYLIB/rlgl.h	/^#define RL_SHADER_LOC_MAP_DIFFUSE /;"	d
RL_SHADER_LOC_MAP_EMISSION	$RAYLIB/rlgl.h	/^    RL_SHADER_LOC_MAP_EMISSION,         \/\/ Shader location: sampler2d texture: emission$/;"	e	enum:__anon19a7bfac0703
RL_SHADER_LOC_MAP_HEIGHT	$RAYLIB/rlgl.h	/^    RL_SHADER_LOC_MAP_HEIGHT,           \/\/ Shader location: sampler2d texture: height$/;"	e	enum:__anon19a7bfac0703
RL_SHADER_LOC_MAP_IRRADIANCE	$RAYLIB/rlgl.h	/^    RL_SHADER_LOC_MAP_IRRADIANCE,       \/\/ Shader location: samplerCube texture: irradiance$/;"	e	enum:__anon19a7bfac0703
RL_SHADER_LOC_MAP_METALNESS	$RAYLIB/rlgl.h	/^    RL_SHADER_LOC_MAP_METALNESS,        \/\/ Shader location: sampler2d texture: metalness (same/;"	e	enum:__anon19a7bfac0703
RL_SHADER_LOC_MAP_NORMAL	$RAYLIB/rlgl.h	/^    RL_SHADER_LOC_MAP_NORMAL,           \/\/ Shader location: sampler2d texture: normal$/;"	e	enum:__anon19a7bfac0703
RL_SHADER_LOC_MAP_OCCLUSION	$RAYLIB/rlgl.h	/^    RL_SHADER_LOC_MAP_OCCLUSION,        \/\/ Shader location: sampler2d texture: occlusion$/;"	e	enum:__anon19a7bfac0703
RL_SHADER_LOC_MAP_PREFILTER	$RAYLIB/rlgl.h	/^    RL_SHADER_LOC_MAP_PREFILTER,        \/\/ Shader location: samplerCube texture: prefilter$/;"	e	enum:__anon19a7bfac0703
RL_SHADER_LOC_MAP_ROUGHNESS	$RAYLIB/rlgl.h	/^    RL_SHADER_LOC_MAP_ROUGHNESS,        \/\/ Shader location: sampler2d texture: roughness$/;"	e	enum:__anon19a7bfac0703
RL_SHADER_LOC_MAP_SPECULAR	$RAYLIB/rlgl.h	/^#define RL_SHADER_LOC_MAP_SPECULAR /;"	d
RL_SHADER_LOC_MATRIX_MODEL	$RAYLIB/rlgl.h	/^    RL_SHADER_LOC_MATRIX_MODEL,         \/\/ Shader location: matrix uniform: model (transform)$/;"	e	enum:__anon19a7bfac0703
RL_SHADER_LOC_MATRIX_MVP	$RAYLIB/rlgl.h	/^    RL_SHADER_LOC_MATRIX_MVP,           \/\/ Shader location: matrix uniform: model-view-project/;"	e	enum:__anon19a7bfac0703
RL_SHADER_LOC_MATRIX_NORMAL	$RAYLIB/rlgl.h	/^    RL_SHADER_LOC_MATRIX_NORMAL,        \/\/ Shader location: matrix uniform: normal$/;"	e	enum:__anon19a7bfac0703
RL_SHADER_LOC_MATRIX_PROJECTION	$RAYLIB/rlgl.h	/^    RL_SHADER_LOC_MATRIX_PROJECTION,    \/\/ Shader location: matrix uniform: projection$/;"	e	enum:__anon19a7bfac0703
RL_SHADER_LOC_MATRIX_VIEW	$RAYLIB/rlgl.h	/^    RL_SHADER_LOC_MATRIX_VIEW,          \/\/ Shader location: matrix uniform: view (camera trans/;"	e	enum:__anon19a7bfac0703
RL_SHADER_LOC_VECTOR_VIEW	$RAYLIB/rlgl.h	/^    RL_SHADER_LOC_VECTOR_VIEW,          \/\/ Shader location: vector uniform: view$/;"	e	enum:__anon19a7bfac0703
RL_SHADER_LOC_VERTEX_COLOR	$RAYLIB/rlgl.h	/^    RL_SHADER_LOC_VERTEX_COLOR,         \/\/ Shader location: vertex attribute: color$/;"	e	enum:__anon19a7bfac0703
RL_SHADER_LOC_VERTEX_NORMAL	$RAYLIB/rlgl.h	/^    RL_SHADER_LOC_VERTEX_NORMAL,        \/\/ Shader location: vertex attribute: normal$/;"	e	enum:__anon19a7bfac0703
RL_SHADER_LOC_VERTEX_POSITION	$RAYLIB/rlgl.h	/^    RL_SHADER_LOC_VERTEX_POSITION = 0,  \/\/ Shader location: vertex attribute: position$/;"	e	enum:__anon19a7bfac0703
RL_SHADER_LOC_VERTEX_TANGENT	$RAYLIB/rlgl.h	/^    RL_SHADER_LOC_VERTEX_TANGENT,       \/\/ Shader location: vertex attribute: tangent$/;"	e	enum:__anon19a7bfac0703
RL_SHADER_LOC_VERTEX_TEXCOORD01	$RAYLIB/rlgl.h	/^    RL_SHADER_LOC_VERTEX_TEXCOORD01,    \/\/ Shader location: vertex attribute: texcoord01$/;"	e	enum:__anon19a7bfac0703
RL_SHADER_LOC_VERTEX_TEXCOORD02	$RAYLIB/rlgl.h	/^    RL_SHADER_LOC_VERTEX_TEXCOORD02,    \/\/ Shader location: vertex attribute: texcoord02$/;"	e	enum:__anon19a7bfac0703
RL_SHADER_UNIFORM_FLOAT	$RAYLIB/rlgl.h	/^    RL_SHADER_UNIFORM_FLOAT = 0,        \/\/ Shader uniform type: float$/;"	e	enum:__anon19a7bfac0803
RL_SHADER_UNIFORM_INT	$RAYLIB/rlgl.h	/^    RL_SHADER_UNIFORM_INT,              \/\/ Shader uniform type: int$/;"	e	enum:__anon19a7bfac0803
RL_SHADER_UNIFORM_IVEC2	$RAYLIB/rlgl.h	/^    RL_SHADER_UNIFORM_IVEC2,            \/\/ Shader uniform type: ivec2 (2 int)$/;"	e	enum:__anon19a7bfac0803
RL_SHADER_UNIFORM_IVEC3	$RAYLIB/rlgl.h	/^    RL_SHADER_UNIFORM_IVEC3,            \/\/ Shader uniform type: ivec3 (3 int)$/;"	e	enum:__anon19a7bfac0803
RL_SHADER_UNIFORM_IVEC4	$RAYLIB/rlgl.h	/^    RL_SHADER_UNIFORM_IVEC4,            \/\/ Shader uniform type: ivec4 (4 int)$/;"	e	enum:__anon19a7bfac0803
RL_SHADER_UNIFORM_SAMPLER2D	$RAYLIB/rlgl.h	/^    RL_SHADER_UNIFORM_SAMPLER2D         \/\/ Shader uniform type: sampler2d$/;"	e	enum:__anon19a7bfac0803
RL_SHADER_UNIFORM_VEC2	$RAYLIB/rlgl.h	/^    RL_SHADER_UNIFORM_VEC2,             \/\/ Shader uniform type: vec2 (2 float)$/;"	e	enum:__anon19a7bfac0803
RL_SHADER_UNIFORM_VEC3	$RAYLIB/rlgl.h	/^    RL_SHADER_UNIFORM_VEC3,             \/\/ Shader uniform type: vec3 (3 float)$/;"	e	enum:__anon19a7bfac0803
RL_SHADER_UNIFORM_VEC4	$RAYLIB/rlgl.h	/^    RL_SHADER_UNIFORM_VEC4,             \/\/ Shader uniform type: vec4 (4 float)$/;"	e	enum:__anon19a7bfac0803
RL_SRC_ALPHA	$RAYLIB/rlgl.h	/^#define RL_SRC_ALPHA /;"	d
RL_SRC_ALPHA_SATURATE	$RAYLIB/rlgl.h	/^#define RL_SRC_ALPHA_SATURATE /;"	d
RL_SRC_COLOR	$RAYLIB/rlgl.h	/^#define RL_SRC_COLOR /;"	d
RL_STATIC_COPY	$RAYLIB/rlgl.h	/^#define RL_STATIC_COPY /;"	d
RL_STATIC_DRAW	$RAYLIB/rlgl.h	/^#define RL_STATIC_DRAW /;"	d
RL_STATIC_READ	$RAYLIB/rlgl.h	/^#define RL_STATIC_READ /;"	d
RL_STREAM_COPY	$RAYLIB/rlgl.h	/^#define RL_STREAM_COPY /;"	d
RL_STREAM_DRAW	$RAYLIB/rlgl.h	/^#define RL_STREAM_DRAW /;"	d
RL_STREAM_READ	$RAYLIB/rlgl.h	/^#define RL_STREAM_READ /;"	d
RL_TEXTURE	$RAYLIB/rlgl.h	/^#define RL_TEXTURE /;"	d
RL_TEXTURE_FILTER_ANISOTROPIC	$RAYLIB/rlgl.h	/^#define RL_TEXTURE_FILTER_ANISOTROPIC /;"	d
RL_TEXTURE_FILTER_ANISOTROPIC_16X	$RAYLIB/rlgl.h	/^    RL_TEXTURE_FILTER_ANISOTROPIC_16X,  \/\/ Anisotropic filtering 16x$/;"	e	enum:__anon19a7bfac0503
RL_TEXTURE_FILTER_ANISOTROPIC_4X	$RAYLIB/rlgl.h	/^    RL_TEXTURE_FILTER_ANISOTROPIC_4X,   \/\/ Anisotropic filtering 4x$/;"	e	enum:__anon19a7bfac0503
RL_TEXTURE_FILTER_ANISOTROPIC_8X	$RAYLIB/rlgl.h	/^    RL_TEXTURE_FILTER_ANISOTROPIC_8X,   \/\/ Anisotropic filtering 8x$/;"	e	enum:__anon19a7bfac0503
RL_TEXTURE_FILTER_BILINEAR	$RAYLIB/rlgl.h	/^    RL_TEXTURE_FILTER_BILINEAR,         \/\/ Linear filtering$/;"	e	enum:__anon19a7bfac0503
RL_TEXTURE_FILTER_LINEAR	$RAYLIB/rlgl.h	/^#define RL_TEXTURE_FILTER_LINEAR /;"	d
RL_TEXTURE_FILTER_LINEAR_MIP_NEAREST	$RAYLIB/rlgl.h	/^#define RL_TEXTURE_FILTER_LINEAR_MIP_NEAREST /;"	d
RL_TEXTURE_FILTER_MIP_LINEAR	$RAYLIB/rlgl.h	/^#define RL_TEXTURE_FILTER_MIP_LINEAR /;"	d
RL_TEXTURE_FILTER_MIP_NEAREST	$RAYLIB/rlgl.h	/^#define RL_TEXTURE_FILTER_MIP_NEAREST /;"	d
RL_TEXTURE_FILTER_NEAREST	$RAYLIB/rlgl.h	/^#define RL_TEXTURE_FILTER_NEAREST /;"	d
RL_TEXTURE_FILTER_NEAREST_MIP_LINEAR	$RAYLIB/rlgl.h	/^#define RL_TEXTURE_FILTER_NEAREST_MIP_LINEAR /;"	d
RL_TEXTURE_FILTER_POINT	$RAYLIB/rlgl.h	/^    RL_TEXTURE_FILTER_POINT = 0,        \/\/ No filter, just pixel approximation$/;"	e	enum:__anon19a7bfac0503
RL_TEXTURE_FILTER_TRILINEAR	$RAYLIB/rlgl.h	/^    RL_TEXTURE_FILTER_TRILINEAR,        \/\/ Trilinear filtering (linear with mipmaps)$/;"	e	enum:__anon19a7bfac0503
RL_TEXTURE_MAG_FILTER	$RAYLIB/rlgl.h	/^#define RL_TEXTURE_MAG_FILTER /;"	d
RL_TEXTURE_MIN_FILTER	$RAYLIB/rlgl.h	/^#define RL_TEXTURE_MIN_FILTER /;"	d
RL_TEXTURE_MIPMAP_BIAS_RATIO	$RAYLIB/rlgl.h	/^#define RL_TEXTURE_MIPMAP_BIAS_RATIO /;"	d
RL_TEXTURE_WRAP_CLAMP	$RAYLIB/rlgl.h	/^#define RL_TEXTURE_WRAP_CLAMP /;"	d
RL_TEXTURE_WRAP_MIRROR_CLAMP	$RAYLIB/rlgl.h	/^#define RL_TEXTURE_WRAP_MIRROR_CLAMP /;"	d
RL_TEXTURE_WRAP_MIRROR_REPEAT	$RAYLIB/rlgl.h	/^#define RL_TEXTURE_WRAP_MIRROR_REPEAT /;"	d
RL_TEXTURE_WRAP_REPEAT	$RAYLIB/rlgl.h	/^#define RL_TEXTURE_WRAP_REPEAT /;"	d
RL_TEXTURE_WRAP_S	$RAYLIB/rlgl.h	/^#define RL_TEXTURE_WRAP_S /;"	d
RL_TEXTURE_WRAP_T	$RAYLIB/rlgl.h	/^#define RL_TEXTURE_WRAP_T /;"	d
RL_TRIANGLES	$RAYLIB/rlgl.h	/^#define RL_TRIANGLES /;"	d
RL_UNSIGNED_BYTE	$RAYLIB/rlgl.h	/^#define RL_UNSIGNED_BYTE /;"	d
RL_VECTOR2_TYPE	$RAYLIB/raylib.h	/^#define RL_VECTOR2_TYPE$/;"	d
RL_VECTOR2_TYPE	$RAYLIB/raymath.h	/^#define RL_VECTOR2_TYPE$/;"	d
RL_VECTOR3_TYPE	$RAYLIB/raylib.h	/^#define RL_VECTOR3_TYPE$/;"	d
RL_VECTOR3_TYPE	$RAYLIB/raymath.h	/^#define RL_VECTOR3_TYPE$/;"	d
RL_VECTOR4_TYPE	$RAYLIB/raylib.h	/^#define RL_VECTOR4_TYPE$/;"	d
RL_VECTOR4_TYPE	$RAYLIB/raymath.h	/^#define RL_VECTOR4_TYPE$/;"	d
RL_VERTEX_SHADER	$RAYLIB/rlgl.h	/^#define RL_VERTEX_SHADER /;"	d
RL_ZERO	$RAYLIB/rlgl.h	/^#define RL_ZERO /;"	d
RMAPI	$RAYLIB/raymath.h	/^    #define RMAPI /;"	d
Ray	$RAYLIB/raylib.h	/^} Ray;$/;"	t	typeref:struct:Ray
RayCollision	$RAYLIB/raylib.h	/^} RayCollision;$/;"	t	typeref:struct:RayCollision
Rectangle	$RAYLIB/raygui.h	/^    } Rectangle;$/;"	t	typeref:struct:Rectangle
Rectangle	$RAYLIB/raylib.h	/^} Rectangle;$/;"	t	typeref:struct:Rectangle
Remap	$RAYLIB/raymath.h	/^RMAPI float Remap(float value, float inputStart, float inputEnd, float outputStart, float output/;"	f	typeref:typename:RMAPI float	signature:(float value,float inputStart,float inputEnd,float outputStart,float outputEnd)
RenderTexture	$RAYLIB/raylib.h	/^} RenderTexture;$/;"	t	typeref:struct:RenderTexture
RenderTexture2D	$RAYLIB/raylib.h	/^typedef RenderTexture RenderTexture2D;$/;"	t	typeref:typename:RenderTexture
RestoreWindow	$RAYLIB/raylib.h	/^RLAPI void RestoreWindow(void);                                   \/\/ Set window state: not min/;"	p	typeref:typename:RLAPI void	signature:(void)
ResumeAudioStream	$RAYLIB/raylib.h	/^RLAPI void ResumeAudioStream(AudioStream stream);                     \/\/ Resume audio stream$/;"	p	typeref:typename:RLAPI void	signature:(AudioStream stream)
ResumeMusicStream	$RAYLIB/raylib.h	/^RLAPI void ResumeMusicStream(Music music);                            \/\/ Resume playing paused/;"	p	typeref:typename:RLAPI void	signature:(Music music)
ResumeSound	$RAYLIB/raylib.h	/^RLAPI void ResumeSound(Sound sound);                                  \/\/ Resume a paused sound$/;"	p	typeref:typename:RLAPI void	signature:(Sound sound)
SCROLLBAR	$RAYLIB/raygui.h	/^    SCROLLBAR,$/;"	e	enum:__anonfd9f18ac0603
SCROLLBAR_LEFT_SIDE	$RAYLIB/raygui.h	/^#define SCROLLBAR_LEFT_SIDE /;"	d
SCROLLBAR_RIGHT_SIDE	$RAYLIB/raygui.h	/^#define SCROLLBAR_RIGHT_SIDE /;"	d
SCROLLBAR_SIDE	$RAYLIB/raygui.h	/^    SCROLLBAR_SIDE,             \/\/ ListView scrollbar side (0-SCROLLBAR_LEFT_SIDE, 1-SCROLLBAR/;"	e	enum:__anonfd9f18ac1203
SCROLLBAR_WIDTH	$RAYLIB/raygui.h	/^    SCROLLBAR_WIDTH,            \/\/ ListView scrollbar size (usually width)$/;"	e	enum:__anonfd9f18ac1203
SCROLL_PADDING	$RAYLIB/raygui.h	/^    SCROLL_PADDING,             \/\/ ScrollBar scroll padding from arrows$/;"	e	enum:__anonfd9f18ac0c03
SCROLL_SLIDER_PADDING	$RAYLIB/raygui.h	/^    SCROLL_SLIDER_PADDING,      \/\/ ScrollBar slider internal padding$/;"	e	enum:__anonfd9f18ac0c03
SCROLL_SLIDER_SIZE	$RAYLIB/raygui.h	/^    SCROLL_SLIDER_SIZE,         \/\/ ScrollBar slider size$/;"	e	enum:__anonfd9f18ac0c03
SCROLL_SPEED	$RAYLIB/raygui.h	/^    SCROLL_SPEED,               \/\/ ScrollBar scrolling speed$/;"	e	enum:__anonfd9f18ac0c03
SHADER_ATTRIB_FLOAT	$RAYLIB/raylib.h	/^    SHADER_ATTRIB_FLOAT = 0,        \/\/ Shader attribute type: float$/;"	e	enum:__anonfdf2e0de0c03
SHADER_ATTRIB_VEC2	$RAYLIB/raylib.h	/^    SHADER_ATTRIB_VEC2,             \/\/ Shader attribute type: vec2 (2 float)$/;"	e	enum:__anonfdf2e0de0c03
SHADER_ATTRIB_VEC3	$RAYLIB/raylib.h	/^    SHADER_ATTRIB_VEC3,             \/\/ Shader attribute type: vec3 (3 float)$/;"	e	enum:__anonfdf2e0de0c03
SHADER_ATTRIB_VEC4	$RAYLIB/raylib.h	/^    SHADER_ATTRIB_VEC4              \/\/ Shader attribute type: vec4 (4 float)$/;"	e	enum:__anonfdf2e0de0c03
SHADER_LOC_COLOR_AMBIENT	$RAYLIB/raylib.h	/^    SHADER_LOC_COLOR_AMBIENT,       \/\/ Shader location: vector uniform: ambient color$/;"	e	enum:__anonfdf2e0de0a03
SHADER_LOC_COLOR_DIFFUSE	$RAYLIB/raylib.h	/^    SHADER_LOC_COLOR_DIFFUSE,       \/\/ Shader location: vector uniform: diffuse color$/;"	e	enum:__anonfdf2e0de0a03
SHADER_LOC_COLOR_SPECULAR	$RAYLIB/raylib.h	/^    SHADER_LOC_COLOR_SPECULAR,      \/\/ Shader location: vector uniform: specular color$/;"	e	enum:__anonfdf2e0de0a03
SHADER_LOC_MAP_ALBEDO	$RAYLIB/raylib.h	/^    SHADER_LOC_MAP_ALBEDO,          \/\/ Shader location: sampler2d texture: albedo (same as: SH/;"	e	enum:__anonfdf2e0de0a03
SHADER_LOC_MAP_BRDF	$RAYLIB/raylib.h	/^    SHADER_LOC_MAP_BRDF             \/\/ Shader location: sampler2d texture: brdf$/;"	e	enum:__anonfdf2e0de0a03
SHADER_LOC_MAP_CUBEMAP	$RAYLIB/raylib.h	/^    SHADER_LOC_MAP_CUBEMAP,         \/\/ Shader location: samplerCube texture: cubemap$/;"	e	enum:__anonfdf2e0de0a03
SHADER_LOC_MAP_DIFFUSE	$RAYLIB/raylib.h	/^#define SHADER_LOC_MAP_DIFFUSE /;"	d
SHADER_LOC_MAP_EMISSION	$RAYLIB/raylib.h	/^    SHADER_LOC_MAP_EMISSION,        \/\/ Shader location: sampler2d texture: emission$/;"	e	enum:__anonfdf2e0de0a03
SHADER_LOC_MAP_HEIGHT	$RAYLIB/raylib.h	/^    SHADER_LOC_MAP_HEIGHT,          \/\/ Shader location: sampler2d texture: height$/;"	e	enum:__anonfdf2e0de0a03
SHADER_LOC_MAP_IRRADIANCE	$RAYLIB/raylib.h	/^    SHADER_LOC_MAP_IRRADIANCE,      \/\/ Shader location: samplerCube texture: irradiance$/;"	e	enum:__anonfdf2e0de0a03
SHADER_LOC_MAP_METALNESS	$RAYLIB/raylib.h	/^    SHADER_LOC_MAP_METALNESS,       \/\/ Shader location: sampler2d texture: metalness (same as:/;"	e	enum:__anonfdf2e0de0a03
SHADER_LOC_MAP_NORMAL	$RAYLIB/raylib.h	/^    SHADER_LOC_MAP_NORMAL,          \/\/ Shader location: sampler2d texture: normal$/;"	e	enum:__anonfdf2e0de0a03
SHADER_LOC_MAP_OCCLUSION	$RAYLIB/raylib.h	/^    SHADER_LOC_MAP_OCCLUSION,       \/\/ Shader location: sampler2d texture: occlusion$/;"	e	enum:__anonfdf2e0de0a03
SHADER_LOC_MAP_PREFILTER	$RAYLIB/raylib.h	/^    SHADER_LOC_MAP_PREFILTER,       \/\/ Shader location: samplerCube texture: prefilter$/;"	e	enum:__anonfdf2e0de0a03
SHADER_LOC_MAP_ROUGHNESS	$RAYLIB/raylib.h	/^    SHADER_LOC_MAP_ROUGHNESS,       \/\/ Shader location: sampler2d texture: roughness$/;"	e	enum:__anonfdf2e0de0a03
SHADER_LOC_MAP_SPECULAR	$RAYLIB/raylib.h	/^#define SHADER_LOC_MAP_SPECULAR /;"	d
SHADER_LOC_MATRIX_MODEL	$RAYLIB/raylib.h	/^    SHADER_LOC_MATRIX_MODEL,        \/\/ Shader location: matrix uniform: model (transform)$/;"	e	enum:__anonfdf2e0de0a03
SHADER_LOC_MATRIX_MVP	$RAYLIB/raylib.h	/^    SHADER_LOC_MATRIX_MVP,          \/\/ Shader location: matrix uniform: model-view-projection$/;"	e	enum:__anonfdf2e0de0a03
SHADER_LOC_MATRIX_NORMAL	$RAYLIB/raylib.h	/^    SHADER_LOC_MATRIX_NORMAL,       \/\/ Shader location: matrix uniform: normal$/;"	e	enum:__anonfdf2e0de0a03
SHADER_LOC_MATRIX_PROJECTION	$RAYLIB/raylib.h	/^    SHADER_LOC_MATRIX_PROJECTION,   \/\/ Shader location: matrix uniform: projection$/;"	e	enum:__anonfdf2e0de0a03
SHADER_LOC_MATRIX_VIEW	$RAYLIB/raylib.h	/^    SHADER_LOC_MATRIX_VIEW,         \/\/ Shader location: matrix uniform: view (camera transform/;"	e	enum:__anonfdf2e0de0a03
SHADER_LOC_VECTOR_VIEW	$RAYLIB/raylib.h	/^    SHADER_LOC_VECTOR_VIEW,         \/\/ Shader location: vector uniform: view$/;"	e	enum:__anonfdf2e0de0a03
SHADER_LOC_VERTEX_COLOR	$RAYLIB/raylib.h	/^    SHADER_LOC_VERTEX_COLOR,        \/\/ Shader location: vertex attribute: color$/;"	e	enum:__anonfdf2e0de0a03
SHADER_LOC_VERTEX_NORMAL	$RAYLIB/raylib.h	/^    SHADER_LOC_VERTEX_NORMAL,       \/\/ Shader location: vertex attribute: normal$/;"	e	enum:__anonfdf2e0de0a03
SHADER_LOC_VERTEX_POSITION	$RAYLIB/raylib.h	/^    SHADER_LOC_VERTEX_POSITION = 0, \/\/ Shader location: vertex attribute: position$/;"	e	enum:__anonfdf2e0de0a03
SHADER_LOC_VERTEX_TANGENT	$RAYLIB/raylib.h	/^    SHADER_LOC_VERTEX_TANGENT,      \/\/ Shader location: vertex attribute: tangent$/;"	e	enum:__anonfdf2e0de0a03
SHADER_LOC_VERTEX_TEXCOORD01	$RAYLIB/raylib.h	/^    SHADER_LOC_VERTEX_TEXCOORD01,   \/\/ Shader location: vertex attribute: texcoord01$/;"	e	enum:__anonfdf2e0de0a03
SHADER_LOC_VERTEX_TEXCOORD02	$RAYLIB/raylib.h	/^    SHADER_LOC_VERTEX_TEXCOORD02,   \/\/ Shader location: vertex attribute: texcoord02$/;"	e	enum:__anonfdf2e0de0a03
SHADER_UNIFORM_FLOAT	$RAYLIB/raylib.h	/^    SHADER_UNIFORM_FLOAT = 0,       \/\/ Shader uniform type: float$/;"	e	enum:__anonfdf2e0de0b03
SHADER_UNIFORM_INT	$RAYLIB/raylib.h	/^    SHADER_UNIFORM_INT,             \/\/ Shader uniform type: int$/;"	e	enum:__anonfdf2e0de0b03
SHADER_UNIFORM_IVEC2	$RAYLIB/raylib.h	/^    SHADER_UNIFORM_IVEC2,           \/\/ Shader uniform type: ivec2 (2 int)$/;"	e	enum:__anonfdf2e0de0b03
SHADER_UNIFORM_IVEC3	$RAYLIB/raylib.h	/^    SHADER_UNIFORM_IVEC3,           \/\/ Shader uniform type: ivec3 (3 int)$/;"	e	enum:__anonfdf2e0de0b03
SHADER_UNIFORM_IVEC4	$RAYLIB/raylib.h	/^    SHADER_UNIFORM_IVEC4,           \/\/ Shader uniform type: ivec4 (4 int)$/;"	e	enum:__anonfdf2e0de0b03
SHADER_UNIFORM_SAMPLER2D	$RAYLIB/raylib.h	/^    SHADER_UNIFORM_SAMPLER2D        \/\/ Shader uniform type: sampler2d$/;"	e	enum:__anonfdf2e0de0b03
SHADER_UNIFORM_VEC2	$RAYLIB/raylib.h	/^    SHADER_UNIFORM_VEC2,            \/\/ Shader uniform type: vec2 (2 float)$/;"	e	enum:__anonfdf2e0de0b03
SHADER_UNIFORM_VEC3	$RAYLIB/raylib.h	/^    SHADER_UNIFORM_VEC3,            \/\/ Shader uniform type: vec3 (3 float)$/;"	e	enum:__anonfdf2e0de0b03
SHADER_UNIFORM_VEC4	$RAYLIB/raylib.h	/^    SHADER_UNIFORM_VEC4,            \/\/ Shader uniform type: vec4 (4 float)$/;"	e	enum:__anonfdf2e0de0b03
SKYBLUE	$RAYLIB/raylib.h	/^#define SKYBLUE /;"	d
SLIDER	$RAYLIB/raygui.h	/^    SLIDER,         \/\/ Used also for: SLIDERBAR, TOGGLESLIDER$/;"	e	enum:__anonfd9f18ac0603
SLIDER_PADDING	$RAYLIB/raygui.h	/^    SLIDER_PADDING              \/\/ Slider\/SliderBar internal bar padding$/;"	e	enum:__anonfd9f18ac0a03
SLIDER_WIDTH	$RAYLIB/raygui.h	/^    SLIDER_WIDTH = 16,          \/\/ Slider size of internal bar$/;"	e	enum:__anonfd9f18ac0a03
SPINNER	$RAYLIB/raygui.h	/^    SPINNER,        \/\/ Uses: BUTTON, VALUEBOX$/;"	e	enum:__anonfd9f18ac0603
SPIN_BUTTON_SPACING	$RAYLIB/raygui.h	/^    SPIN_BUTTON_SPACING,        \/\/ Spinner buttons separation$/;"	e	enum:__anonfd9f18ac1103
SPIN_BUTTON_WIDTH	$RAYLIB/raygui.h	/^    SPIN_BUTTON_WIDTH = 16,     \/\/ Spinner left\/right buttons width$/;"	e	enum:__anonfd9f18ac1103
STATE_DISABLED	$RAYLIB/raygui.h	/^    STATE_DISABLED$/;"	e	enum:__anonfd9f18ac0203
STATE_FOCUSED	$RAYLIB/raygui.h	/^    STATE_FOCUSED,$/;"	e	enum:__anonfd9f18ac0203
STATE_NORMAL	$RAYLIB/raygui.h	/^    STATE_NORMAL = 0,$/;"	e	enum:__anonfd9f18ac0203
STATE_PRESSED	$RAYLIB/raygui.h	/^    STATE_PRESSED,$/;"	e	enum:__anonfd9f18ac0203
STATUSBAR	$RAYLIB/raygui.h	/^    STATUSBAR$/;"	e	enum:__anonfd9f18ac0603
SaveFileData	$RAYLIB/raylib.h	/^RLAPI bool SaveFileData(const char *fileName, void *data, int dataSize); \/\/ Save data to file /;"	p	typeref:typename:RLAPI bool	signature:(const char * fileName,void * data,int dataSize)
SaveFileDataCallback	$RAYLIB/raylib.h	/^typedef bool (*SaveFileDataCallback)(const char *fileName, void *data, int dataSize);   \/\/ Fil/;"	t	typeref:typename:bool (*)(const char * fileName,void * data,int dataSize)
SaveFileText	$RAYLIB/raylib.h	/^RLAPI bool SaveFileText(const char *fileName, char *text);        \/\/ Save text data to file (w/;"	p	typeref:typename:RLAPI bool	signature:(const char * fileName,char * text)
SaveFileTextCallback	$RAYLIB/raylib.h	/^typedef bool (*SaveFileTextCallback)(const char *fileName, char *text); \/\/ FileIO: Save text d/;"	t	typeref:typename:bool (*)(const char * fileName,char * text)
SeekMusicStream	$RAYLIB/raylib.h	/^RLAPI void SeekMusicStream(Music music, float position);              \/\/ Seek music to a posit/;"	p	typeref:typename:RLAPI void	signature:(Music music,float position)
SetAudioStreamBufferSizeDefault	$RAYLIB/raylib.h	/^RLAPI void SetAudioStreamBufferSizeDefault(int size);                 \/\/ Default size for new /;"	p	typeref:typename:RLAPI void	signature:(int size)
SetAudioStreamCallback	$RAYLIB/raylib.h	/^RLAPI void SetAudioStreamCallback(AudioStream stream, AudioCallback callback); \/\/ Audio thread/;"	p	typeref:typename:RLAPI void	signature:(AudioStream stream,AudioCallback callback)
SetAudioStreamPan	$RAYLIB/raylib.h	/^RLAPI void SetAudioStreamPan(AudioStream stream, float pan);          \/\/ Set pan for audio str/;"	p	typeref:typename:RLAPI void	signature:(AudioStream stream,float pan)
SetAudioStreamPitch	$RAYLIB/raylib.h	/^RLAPI void SetAudioStreamPitch(AudioStream stream, float pitch);      \/\/ Set pitch for audio s/;"	p	typeref:typename:RLAPI void	signature:(AudioStream stream,float pitch)
SetAudioStreamVolume	$RAYLIB/raylib.h	/^RLAPI void SetAudioStreamVolume(AudioStream stream, float volume);    \/\/ Set volume for audio /;"	p	typeref:typename:RLAPI void	signature:(AudioStream stream,float volume)
SetAutomationEventBaseFrame	$RAYLIB/raylib.h	/^RLAPI void SetAutomationEventBaseFrame(int frame);                                      \/\/ Set/;"	p	typeref:typename:RLAPI void	signature:(int frame)
SetAutomationEventList	$RAYLIB/raylib.h	/^RLAPI void SetAutomationEventList(AutomationEventList *list);                           \/\/ Set/;"	p	typeref:typename:RLAPI void	signature:(AutomationEventList * list)
SetClipboardText	$RAYLIB/raylib.h	/^RLAPI void SetClipboardText(const char *text);                    \/\/ Set clipboard text conten/;"	p	typeref:typename:RLAPI void	signature:(const char * text)
SetConfigFlags	$RAYLIB/raylib.h	/^RLAPI void SetConfigFlags(unsigned int flags);                    \/\/ Setup init configuration /;"	p	typeref:typename:RLAPI void	signature:(unsigned int flags)
SetExitKey	$RAYLIB/raylib.h	/^RLAPI void SetExitKey(int key);                               \/\/ Set a custom key to exit prog/;"	p	typeref:typename:RLAPI void	signature:(int key)
SetGamepadMappings	$RAYLIB/raylib.h	/^RLAPI int SetGamepadMappings(const char *mappings);                                \/\/ Set inte/;"	p	typeref:typename:RLAPI int	signature:(const char * mappings)
SetGamepadVibration	$RAYLIB/raylib.h	/^RLAPI void SetGamepadVibration(int gamepad, float leftMotor, float rightMotor);    \/\/ Set game/;"	p	typeref:typename:RLAPI void	signature:(int gamepad,float leftMotor,float rightMotor)
SetGesturesEnabled	$RAYLIB/raylib.h	/^RLAPI void SetGesturesEnabled(unsigned int flags);      \/\/ Enable a set of gestures using flag/;"	p	typeref:typename:RLAPI void	signature:(unsigned int flags)
SetLoadFileDataCallback	$RAYLIB/raylib.h	/^RLAPI void SetLoadFileDataCallback(LoadFileDataCallback callback); \/\/ Set custom file binary d/;"	p	typeref:typename:RLAPI void	signature:(LoadFileDataCallback callback)
SetLoadFileTextCallback	$RAYLIB/raylib.h	/^RLAPI void SetLoadFileTextCallback(LoadFileTextCallback callback); \/\/ Set custom file text dat/;"	p	typeref:typename:RLAPI void	signature:(LoadFileTextCallback callback)
SetMasterVolume	$RAYLIB/raylib.h	/^RLAPI void SetMasterVolume(float volume);                             \/\/ Set master volume (li/;"	p	typeref:typename:RLAPI void	signature:(float volume)
SetMaterialTexture	$RAYLIB/raylib.h	/^RLAPI void SetMaterialTexture(Material *material, int mapType, Texture2D texture);          \/\//;"	p	typeref:typename:RLAPI void	signature:(Material * material,int mapType,Texture2D texture)
SetModelMeshMaterial	$RAYLIB/raylib.h	/^RLAPI void SetModelMeshMaterial(Model *model, int meshId, int materialId);                  \/\//;"	p	typeref:typename:RLAPI void	signature:(Model * model,int meshId,int materialId)
SetMouseCursor	$RAYLIB/raylib.h	/^RLAPI void SetMouseCursor(int cursor);                        \/\/ Set mouse cursor$/;"	p	typeref:typename:RLAPI void	signature:(int cursor)
SetMouseOffset	$RAYLIB/raylib.h	/^RLAPI void SetMouseOffset(int offsetX, int offsetY);          \/\/ Set mouse offset$/;"	p	typeref:typename:RLAPI void	signature:(int offsetX,int offsetY)
SetMousePosition	$RAYLIB/raylib.h	/^RLAPI void SetMousePosition(int x, int y);                    \/\/ Set mouse position XY$/;"	p	typeref:typename:RLAPI void	signature:(int x,int y)
SetMouseScale	$RAYLIB/raylib.h	/^RLAPI void SetMouseScale(float scaleX, float scaleY);         \/\/ Set mouse scaling$/;"	p	typeref:typename:RLAPI void	signature:(float scaleX,float scaleY)
SetMusicPan	$RAYLIB/raylib.h	/^RLAPI void SetMusicPan(Music music, float pan);                       \/\/ Set pan for a music (/;"	p	typeref:typename:RLAPI void	signature:(Music music,float pan)
SetMusicPitch	$RAYLIB/raylib.h	/^RLAPI void SetMusicPitch(Music music, float pitch);                   \/\/ Set pitch for a music/;"	p	typeref:typename:RLAPI void	signature:(Music music,float pitch)
SetMusicVolume	$RAYLIB/raylib.h	/^RLAPI void SetMusicVolume(Music music, float volume);                 \/\/ Set volume for music /;"	p	typeref:typename:RLAPI void	signature:(Music music,float volume)
SetPixelColor	$RAYLIB/raylib.h	/^RLAPI void SetPixelColor(void *dstPtr, Color color, int format);            \/\/ Set color forma/;"	p	typeref:typename:RLAPI void	signature:(void * dstPtr,Color color,int format)
SetRandomSeed	$RAYLIB/raylib.h	/^RLAPI void SetRandomSeed(unsigned int seed);                      \/\/ Set the seed for the rand/;"	p	typeref:typename:RLAPI void	signature:(unsigned int seed)
SetSaveFileDataCallback	$RAYLIB/raylib.h	/^RLAPI void SetSaveFileDataCallback(SaveFileDataCallback callback); \/\/ Set custom file binary d/;"	p	typeref:typename:RLAPI void	signature:(SaveFileDataCallback callback)
SetSaveFileTextCallback	$RAYLIB/raylib.h	/^RLAPI void SetSaveFileTextCallback(SaveFileTextCallback callback); \/\/ Set custom file text dat/;"	p	typeref:typename:RLAPI void	signature:(SaveFileTextCallback callback)
SetShaderValue	$RAYLIB/raylib.h	/^RLAPI void SetShaderValue(Shader shader, int locIndex, const void *value, int uniformType);     /;"	p	typeref:typename:RLAPI void	signature:(Shader shader,int locIndex,const void * value,int uniformType)
SetShaderValueMatrix	$RAYLIB/raylib.h	/^RLAPI void SetShaderValueMatrix(Shader shader, int locIndex, Matrix mat);         \/\/ Set shade/;"	p	typeref:typename:RLAPI void	signature:(Shader shader,int locIndex,Matrix mat)
SetShaderValueTexture	$RAYLIB/raylib.h	/^RLAPI void SetShaderValueTexture(Shader shader, int locIndex, Texture2D texture); \/\/ Set shade/;"	p	typeref:typename:RLAPI void	signature:(Shader shader,int locIndex,Texture2D texture)
SetShaderValueV	$RAYLIB/raylib.h	/^RLAPI void SetShaderValueV(Shader shader, int locIndex, const void *value, int uniformType, int /;"	p	typeref:typename:RLAPI void	signature:(Shader shader,int locIndex,const void * value,int uniformType,int count)
SetShapesTexture	$RAYLIB/raygui.h	/^static void SetShapesTexture(Texture2D tex, Rectangle rec);  \/\/ -- GuiLoadStyle(), required to/;"	p	typeref:typename:void	signature:(Texture2D tex,Rectangle rec)
SetShapesTexture	$RAYLIB/raylib.h	/^RLAPI void SetShapesTexture(Texture2D texture, Rectangle source);       \/\/ Set texture and rec/;"	p	typeref:typename:RLAPI void	signature:(Texture2D texture,Rectangle source)
SetSoundPan	$RAYLIB/raylib.h	/^RLAPI void SetSoundPan(Sound sound, float pan);                       \/\/ Set pan for a sound (/;"	p	typeref:typename:RLAPI void	signature:(Sound sound,float pan)
SetSoundPitch	$RAYLIB/raylib.h	/^RLAPI void SetSoundPitch(Sound sound, float pitch);                   \/\/ Set pitch for a sound/;"	p	typeref:typename:RLAPI void	signature:(Sound sound,float pitch)
SetSoundVolume	$RAYLIB/raylib.h	/^RLAPI void SetSoundVolume(Sound sound, float volume);                 \/\/ Set volume for a soun/;"	p	typeref:typename:RLAPI void	signature:(Sound sound,float volume)
SetTargetFPS	$RAYLIB/raylib.h	/^RLAPI void SetTargetFPS(int fps);                                 \/\/ Set target FPS (maximum)$/;"	p	typeref:typename:RLAPI void	signature:(int fps)
SetTextLineSpacing	$RAYLIB/raylib.h	/^RLAPI void SetTextLineSpacing(int spacing);                                                 \/\//;"	p	typeref:typename:RLAPI void	signature:(int spacing)
SetTextureFilter	$RAYLIB/raylib.h	/^RLAPI void SetTextureFilter(Texture2D texture, int filter);                                     /;"	p	typeref:typename:RLAPI void	signature:(Texture2D texture,int filter)
SetTextureWrap	$RAYLIB/raylib.h	/^RLAPI void SetTextureWrap(Texture2D texture, int wrap);                                         /;"	p	typeref:typename:RLAPI void	signature:(Texture2D texture,int wrap)
SetTraceLogCallback	$RAYLIB/raylib.h	/^RLAPI void SetTraceLogCallback(TraceLogCallback callback);         \/\/ Set custom trace log$/;"	p	typeref:typename:RLAPI void	signature:(TraceLogCallback callback)
SetTraceLogLevel	$RAYLIB/raylib.h	/^RLAPI void SetTraceLogLevel(int logLevel);                        \/\/ Set the current threshold/;"	p	typeref:typename:RLAPI void	signature:(int logLevel)
SetWindowFocused	$RAYLIB/raylib.h	/^RLAPI void SetWindowFocused(void);                                \/\/ Set window focused (only /;"	p	typeref:typename:RLAPI void	signature:(void)
SetWindowIcon	$RAYLIB/raylib.h	/^RLAPI void SetWindowIcon(Image image);                            \/\/ Set icon for window (sing/;"	p	typeref:typename:RLAPI void	signature:(Image image)
SetWindowIcons	$RAYLIB/raylib.h	/^RLAPI void SetWindowIcons(Image *images, int count);              \/\/ Set icon for window (mult/;"	p	typeref:typename:RLAPI void	signature:(Image * images,int count)
SetWindowMaxSize	$RAYLIB/raylib.h	/^RLAPI void SetWindowMaxSize(int width, int height);               \/\/ Set window maximum dimens/;"	p	typeref:typename:RLAPI void	signature:(int width,int height)
SetWindowMinSize	$RAYLIB/raylib.h	/^RLAPI void SetWindowMinSize(int width, int height);               \/\/ Set window minimum dimens/;"	p	typeref:typename:RLAPI void	signature:(int width,int height)
SetWindowMonitor	$RAYLIB/raylib.h	/^RLAPI void SetWindowMonitor(int monitor);                         \/\/ Set monitor for the curre/;"	p	typeref:typename:RLAPI void	signature:(int monitor)
SetWindowOpacity	$RAYLIB/raylib.h	/^RLAPI void SetWindowOpacity(float opacity);                       \/\/ Set window opacity [0.0f./;"	p	typeref:typename:RLAPI void	signature:(float opacity)
SetWindowPosition	$RAYLIB/raylib.h	/^RLAPI void SetWindowPosition(int x, int y);                       \/\/ Set window position on sc/;"	p	typeref:typename:RLAPI void	signature:(int x,int y)
SetWindowSize	$RAYLIB/raylib.h	/^RLAPI void SetWindowSize(int width, int height);                  \/\/ Set window dimensions$/;"	p	typeref:typename:RLAPI void	signature:(int width,int height)
SetWindowState	$RAYLIB/raylib.h	/^RLAPI void SetWindowState(unsigned int flags);                    \/\/ Set window configuration /;"	p	typeref:typename:RLAPI void	signature:(unsigned int flags)
SetWindowTitle	$RAYLIB/raylib.h	/^RLAPI void SetWindowTitle(const char *title);                     \/\/ Set title for window (onl/;"	p	typeref:typename:RLAPI void	signature:(const char * title)
Shader	$RAYLIB/raylib.h	/^} Shader;$/;"	t	typeref:struct:Shader
ShaderAttributeDataType	$RAYLIB/raylib.h	/^} ShaderAttributeDataType;$/;"	t	typeref:enum:__anonfdf2e0de0c03
ShaderLocationIndex	$RAYLIB/raylib.h	/^} ShaderLocationIndex;$/;"	t	typeref:enum:__anonfdf2e0de0a03
ShaderUniformDataType	$RAYLIB/raylib.h	/^} ShaderUniformDataType;$/;"	t	typeref:enum:__anonfdf2e0de0b03
ShowCursor	$RAYLIB/raylib.h	/^RLAPI void ShowCursor(void);                                      \/\/ Shows cursor$/;"	p	typeref:typename:RLAPI void	signature:(void)
Sound	$RAYLIB/raylib.h	/^} Sound;$/;"	t	typeref:struct:Sound
StartAutomationEventRecording	$RAYLIB/raylib.h	/^RLAPI void StartAutomationEventRecording(void);                                         \/\/ Sta/;"	p	typeref:typename:RLAPI void	signature:(void)
State	$RAYLIB/rlgl.h	/^    } State;            \/\/ Renderer state$/;"	m	struct:rlglData	typeref:struct:rlglData::__anon19a7bfac0d08
StopAudioStream	$RAYLIB/raylib.h	/^RLAPI void StopAudioStream(AudioStream stream);                       \/\/ Stop audio stream$/;"	p	typeref:typename:RLAPI void	signature:(AudioStream stream)
StopAutomationEventRecording	$RAYLIB/raylib.h	/^RLAPI void StopAutomationEventRecording(void);                                          \/\/ Sto/;"	p	typeref:typename:RLAPI void	signature:(void)
StopMusicStream	$RAYLIB/raylib.h	/^RLAPI void StopMusicStream(Music music);                              \/\/ Stop music playing$/;"	p	typeref:typename:RLAPI void	signature:(Music music)
StopSound	$RAYLIB/raylib.h	/^RLAPI void StopSound(Sound sound);                                    \/\/ Stop playing a sound$/;"	p	typeref:typename:RLAPI void	signature:(Sound sound)
SwapScreenBuffer	$RAYLIB/raylib.h	/^RLAPI void SwapScreenBuffer(void);                                \/\/ Swap back buffer with fro/;"	p	typeref:typename:RLAPI void	signature:(void)
TEXT	$RAYLIB/raygui.h	/^typedef enum { BORDER = 0, BASE, TEXT, OTHER } GuiPropertyElement;$/;"	e	enum:__anonfd9f18ac1503
TEXTBOX	$RAYLIB/raygui.h	/^    TEXTBOX,        \/\/ Used also for: TEXTBOXMULTI$/;"	e	enum:__anonfd9f18ac0603
TEXTURE_FILTER_ANISOTROPIC_16X	$RAYLIB/raylib.h	/^    TEXTURE_FILTER_ANISOTROPIC_16X,         \/\/ Anisotropic filtering 16x$/;"	e	enum:__anonfdf2e0de0e03
TEXTURE_FILTER_ANISOTROPIC_4X	$RAYLIB/raylib.h	/^    TEXTURE_FILTER_ANISOTROPIC_4X,          \/\/ Anisotropic filtering 4x$/;"	e	enum:__anonfdf2e0de0e03
TEXTURE_FILTER_ANISOTROPIC_8X	$RAYLIB/raylib.h	/^    TEXTURE_FILTER_ANISOTROPIC_8X,          \/\/ Anisotropic filtering 8x$/;"	e	enum:__anonfdf2e0de0e03
TEXTURE_FILTER_BILINEAR	$RAYLIB/raylib.h	/^    TEXTURE_FILTER_BILINEAR,                \/\/ Linear filtering$/;"	e	enum:__anonfdf2e0de0e03
TEXTURE_FILTER_POINT	$RAYLIB/raylib.h	/^    TEXTURE_FILTER_POINT = 0,               \/\/ No filter, just pixel approximation$/;"	e	enum:__anonfdf2e0de0e03
TEXTURE_FILTER_TRILINEAR	$RAYLIB/raylib.h	/^    TEXTURE_FILTER_TRILINEAR,               \/\/ Trilinear filtering (linear with mipmaps)$/;"	e	enum:__anonfdf2e0de0e03
TEXTURE_WRAP_CLAMP	$RAYLIB/raylib.h	/^    TEXTURE_WRAP_CLAMP,                     \/\/ Clamps texture to edge pixel in tiled mode$/;"	e	enum:__anonfdf2e0de0f03
TEXTURE_WRAP_MIRROR_CLAMP	$RAYLIB/raylib.h	/^    TEXTURE_WRAP_MIRROR_CLAMP               \/\/ Mirrors and clamps to border the texture in til/;"	e	enum:__anonfdf2e0de0f03
TEXTURE_WRAP_MIRROR_REPEAT	$RAYLIB/raylib.h	/^    TEXTURE_WRAP_MIRROR_REPEAT,             \/\/ Mirrors and repeats the texture in tiled mode$/;"	e	enum:__anonfdf2e0de0f03
TEXTURE_WRAP_REPEAT	$RAYLIB/raylib.h	/^    TEXTURE_WRAP_REPEAT = 0,                \/\/ Repeats texture in tiled mode$/;"	e	enum:__anonfdf2e0de0f03
TEXT_ALIGNMENT	$RAYLIB/raygui.h	/^    TEXT_ALIGNMENT,             \/\/ Control text horizontal alignment inside control text bound/;"	e	enum:__anonfd9f18ac0703
TEXT_ALIGNMENT_VERTICAL	$RAYLIB/raygui.h	/^    TEXT_ALIGNMENT_VERTICAL,    \/\/ Text vertical alignment inside text bounds (after border an/;"	e	enum:__anonfd9f18ac0803
TEXT_ALIGN_BOTTOM	$RAYLIB/raygui.h	/^    TEXT_ALIGN_BOTTOM$/;"	e	enum:__anonfd9f18ac0403
TEXT_ALIGN_CENTER	$RAYLIB/raygui.h	/^    TEXT_ALIGN_CENTER,$/;"	e	enum:__anonfd9f18ac0303
TEXT_ALIGN_LEFT	$RAYLIB/raygui.h	/^    TEXT_ALIGN_LEFT = 0,$/;"	e	enum:__anonfd9f18ac0303
TEXT_ALIGN_MIDDLE	$RAYLIB/raygui.h	/^    TEXT_ALIGN_MIDDLE,$/;"	e	enum:__anonfd9f18ac0403
TEXT_ALIGN_RIGHT	$RAYLIB/raygui.h	/^    TEXT_ALIGN_RIGHT$/;"	e	enum:__anonfd9f18ac0303
TEXT_ALIGN_TOP	$RAYLIB/raygui.h	/^    TEXT_ALIGN_TOP = 0,$/;"	e	enum:__anonfd9f18ac0403
TEXT_COLOR_DISABLED	$RAYLIB/raygui.h	/^    TEXT_COLOR_DISABLED,        \/\/ Control text color in STATE_DISABLED$/;"	e	enum:__anonfd9f18ac0703
TEXT_COLOR_FOCUSED	$RAYLIB/raygui.h	/^    TEXT_COLOR_FOCUSED,         \/\/ Control text color in STATE_FOCUSED$/;"	e	enum:__anonfd9f18ac0703
TEXT_COLOR_NORMAL	$RAYLIB/raygui.h	/^    TEXT_COLOR_NORMAL,          \/\/ Control text color in STATE_NORMAL$/;"	e	enum:__anonfd9f18ac0703
TEXT_COLOR_PRESSED	$RAYLIB/raygui.h	/^    TEXT_COLOR_PRESSED,         \/\/ Control text color in STATE_PRESSED$/;"	e	enum:__anonfd9f18ac0703
TEXT_LINE_SPACING	$RAYLIB/raygui.h	/^    TEXT_LINE_SPACING,          \/\/ Text spacing between lines$/;"	e	enum:__anonfd9f18ac0803
TEXT_PADDING	$RAYLIB/raygui.h	/^    TEXT_PADDING,               \/\/ Control text padding, not considering border$/;"	e	enum:__anonfd9f18ac0703
TEXT_READONLY	$RAYLIB/raygui.h	/^    TEXT_READONLY = 16,         \/\/ TextBox in read-only mode: 0-text editable, 1-text no-edita/;"	e	enum:__anonfd9f18ac1003
TEXT_SIZE	$RAYLIB/raygui.h	/^    TEXT_SIZE = 16,             \/\/ Text size (glyphs max height)$/;"	e	enum:__anonfd9f18ac0803
TEXT_SPACING	$RAYLIB/raygui.h	/^    TEXT_SPACING,               \/\/ Text spacing between glyphs$/;"	e	enum:__anonfd9f18ac0803
TEXT_VALIGN_PIXEL_OFFSET	$RAYLIB/raygui.h	/^    #define TEXT_VALIGN_PIXEL_OFFSET(/;"	d	signature:(h)
TEXT_WRAP_CHAR	$RAYLIB/raygui.h	/^    TEXT_WRAP_CHAR,$/;"	e	enum:__anonfd9f18ac0503
TEXT_WRAP_MODE	$RAYLIB/raygui.h	/^    TEXT_WRAP_MODE              \/\/ Text wrap-mode inside text bounds$/;"	e	enum:__anonfd9f18ac0803
TEXT_WRAP_NONE	$RAYLIB/raygui.h	/^    TEXT_WRAP_NONE = 0,$/;"	e	enum:__anonfd9f18ac0503
TEXT_WRAP_WORD	$RAYLIB/raygui.h	/^    TEXT_WRAP_WORD$/;"	e	enum:__anonfd9f18ac0503
TOGGLE	$RAYLIB/raygui.h	/^    TOGGLE,         \/\/ Used also for: TOGGLEGROUP$/;"	e	enum:__anonfd9f18ac0603
TRACELOG	$RAYLIB/rlgl.h	/^    #define TRACELOG(/;"	d	signature:(level,...)
TRACELOGD	$RAYLIB/rlgl.h	/^    #define TRACELOGD(/;"	d	signature:(...)
TakeScreenshot	$RAYLIB/raylib.h	/^RLAPI void TakeScreenshot(const char *fileName);                  \/\/ Takes a screenshot of cur/;"	p	typeref:typename:RLAPI void	signature:(const char * fileName)
TextAppend	$RAYLIB/raylib.h	/^RLAPI void TextAppend(char *text, const char *append, int *position);                       \/\//;"	p	typeref:typename:RLAPI void	signature:(char * text,const char * append,int * position)
TextCopy	$RAYLIB/raylib.h	/^RLAPI int TextCopy(char *dst, const char *src);                                             \/\//;"	p	typeref:typename:RLAPI int	signature:(char * dst,const char * src)
TextFindIndex	$RAYLIB/raylib.h	/^RLAPI int TextFindIndex(const char *text, const char *find);                                \/\//;"	p	typeref:typename:RLAPI int	signature:(const char * text,const char * find)
TextFormat	$RAYLIB/raygui.h	/^static const char *TextFormat(const char *text, ...);               \/\/ Formatting of text with/;"	p	typeref:typename:const char *	signature:(const char * text,...)
TextFormat	$RAYLIB/raylib.h	/^RLAPI const char *TextFormat(const char *text, ...);                                        \/\//;"	p	typeref:typename:RLAPI const char *	signature:(const char * text,...)
TextInsert	$RAYLIB/raylib.h	/^RLAPI char *TextInsert(const char *text, const char *insert, int position);                 \/\//;"	p	typeref:typename:RLAPI char *	signature:(const char * text,const char * insert,int position)
TextIsEqual	$RAYLIB/raylib.h	/^RLAPI bool TextIsEqual(const char *text1, const char *text2);                               \/\//;"	p	typeref:typename:RLAPI bool	signature:(const char * text1,const char * text2)
TextJoin	$RAYLIB/raylib.h	/^RLAPI const char *TextJoin(const char **textList, int count, const char *delimiter);        \/\//;"	p	typeref:typename:RLAPI const char *	signature:(const char ** textList,int count,const char * delimiter)
TextLength	$RAYLIB/raylib.h	/^RLAPI unsigned int TextLength(const char *text);                                            \/\//;"	p	typeref:typename:RLAPI unsigned int	signature:(const char * text)
TextReplace	$RAYLIB/raylib.h	/^RLAPI char *TextReplace(const char *text, const char *replace, const char *by);             \/\//;"	p	typeref:typename:RLAPI char *	signature:(const char * text,const char * replace,const char * by)
TextSplit	$RAYLIB/raygui.h	/^static const char **TextSplit(const char *text, char delimiter, int *count);    \/\/ Split text /;"	p	typeref:typename:const char **	signature:(const char * text,char delimiter,int * count)
TextSplit	$RAYLIB/raylib.h	/^RLAPI const char **TextSplit(const char *text, char delimiter, int *count);                 \/\//;"	p	typeref:typename:RLAPI const char **	signature:(const char * text,char delimiter,int * count)
TextSubtext	$RAYLIB/raylib.h	/^RLAPI const char *TextSubtext(const char *text, int position, int length);                  \/\//;"	p	typeref:typename:RLAPI const char *	signature:(const char * text,int position,int length)
TextToFloat	$RAYLIB/raylib.h	/^RLAPI float TextToFloat(const char *text);                            \/\/ Get float value from /;"	p	typeref:typename:RLAPI float	signature:(const char * text)
TextToInteger	$RAYLIB/raygui.h	/^static int TextToInteger(const char *text);         \/\/ Get integer value from text$/;"	p	typeref:typename:int	signature:(const char * text)
TextToInteger	$RAYLIB/raylib.h	/^RLAPI int TextToInteger(const char *text);                            \/\/ Get integer value fro/;"	p	typeref:typename:RLAPI int	signature:(const char * text)
TextToLower	$RAYLIB/raylib.h	/^RLAPI const char *TextToLower(const char *text);                      \/\/ Get lower case versio/;"	p	typeref:typename:RLAPI const char *	signature:(const char * text)
TextToPascal	$RAYLIB/raylib.h	/^RLAPI const char *TextToPascal(const char *text);                     \/\/ Get Pascal case notat/;"	p	typeref:typename:RLAPI const char *	signature:(const char * text)
TextToUpper	$RAYLIB/raylib.h	/^RLAPI const char *TextToUpper(const char *text);                      \/\/ Get upper case versio/;"	p	typeref:typename:RLAPI const char *	signature:(const char * text)
Texture	$RAYLIB/raylib.h	/^} Texture;$/;"	t	typeref:struct:Texture
Texture2D	$RAYLIB/raygui.h	/^    } Texture2D;$/;"	t	typeref:struct:Texture2D
Texture2D	$RAYLIB/raylib.h	/^typedef Texture Texture2D;$/;"	t	typeref:typename:Texture
TextureCubemap	$RAYLIB/raylib.h	/^typedef Texture TextureCubemap;$/;"	t	typeref:typename:Texture
TextureFilter	$RAYLIB/raylib.h	/^} TextureFilter;$/;"	t	typeref:enum:__anonfdf2e0de0e03
TextureWrap	$RAYLIB/raylib.h	/^} TextureWrap;$/;"	t	typeref:enum:__anonfdf2e0de0f03
ToggleBorderlessWindowed	$RAYLIB/raylib.h	/^RLAPI void ToggleBorderlessWindowed(void);                        \/\/ Toggle window state: bord/;"	p	typeref:typename:RLAPI void	signature:(void)
ToggleFullscreen	$RAYLIB/raylib.h	/^RLAPI void ToggleFullscreen(void);                                \/\/ Toggle window state: full/;"	p	typeref:typename:RLAPI void	signature:(void)
TraceLog	$RAYLIB/raylib.h	/^RLAPI void TraceLog(int logLevel, const char *text, ...);         \/\/ Show trace log messages (/;"	p	typeref:typename:RLAPI void	signature:(int logLevel,const char * text,...)
TraceLogCallback	$RAYLIB/raylib.h	/^typedef void (*TraceLogCallback)(int logLevel, const char *text, va_list args);  \/\/ Logging: R/;"	t	typeref:typename:void (*)(int logLevel,const char * text,va_list args)
TraceLogLevel	$RAYLIB/raylib.h	/^} TraceLogLevel;$/;"	t	typeref:enum:__anonfdf2e0de0303
Transform	$RAYLIB/raylib.h	/^} Transform;$/;"	t	typeref:struct:Transform
UnloadAudioStream	$RAYLIB/raylib.h	/^RLAPI void UnloadAudioStream(AudioStream stream);                     \/\/ Unload audio stream a/;"	p	typeref:typename:RLAPI void	signature:(AudioStream stream)
UnloadAutomationEventList	$RAYLIB/raylib.h	/^RLAPI void UnloadAutomationEventList(AutomationEventList list);                        \/\/ Unlo/;"	p	typeref:typename:RLAPI void	signature:(AutomationEventList list)
UnloadCodepoints	$RAYLIB/raygui.h	/^static void UnloadCodepoints(int *codepoints);               \/\/ -- GuiLoadStyle(), required to/;"	p	typeref:typename:void	signature:(int * codepoints)
UnloadCodepoints	$RAYLIB/raylib.h	/^RLAPI void UnloadCodepoints(int *codepoints);                           \/\/ Unload codepoints d/;"	p	typeref:typename:RLAPI void	signature:(int * codepoints)
UnloadDirectoryFiles	$RAYLIB/raylib.h	/^RLAPI void UnloadDirectoryFiles(FilePathList files);              \/\/ Unload filepaths$/;"	p	typeref:typename:RLAPI void	signature:(FilePathList files)
UnloadDroppedFiles	$RAYLIB/raylib.h	/^RLAPI void UnloadDroppedFiles(FilePathList files);                \/\/ Unload dropped filepaths$/;"	p	typeref:typename:RLAPI void	signature:(FilePathList files)
UnloadFileData	$RAYLIB/raylib.h	/^RLAPI void UnloadFileData(unsigned char *data);                   \/\/ Unload file data allocate/;"	p	typeref:typename:RLAPI void	signature:(unsigned char * data)
UnloadFileText	$RAYLIB/raygui.h	/^static void UnloadFileText(char *text);                      \/\/ -- GuiLoadStyle(), required to/;"	p	typeref:typename:void	signature:(char * text)
UnloadFileText	$RAYLIB/raylib.h	/^RLAPI void UnloadFileText(char *text);                            \/\/ Unload file text data all/;"	p	typeref:typename:RLAPI void	signature:(char * text)
UnloadFont	$RAYLIB/raylib.h	/^RLAPI void UnloadFont(Font font);                                                           \/\//;"	p	typeref:typename:RLAPI void	signature:(Font font)
UnloadFontData	$RAYLIB/raylib.h	/^RLAPI void UnloadFontData(GlyphInfo *glyphs, int glyphCount);                               \/\//;"	p	typeref:typename:RLAPI void	signature:(GlyphInfo * glyphs,int glyphCount)
UnloadImage	$RAYLIB/raylib.h	/^RLAPI void UnloadImage(Image image);                                                            /;"	p	typeref:typename:RLAPI void	signature:(Image image)
UnloadImageColors	$RAYLIB/raylib.h	/^RLAPI void UnloadImageColors(Color *colors);                                                    /;"	p	typeref:typename:RLAPI void	signature:(Color * colors)
UnloadImagePalette	$RAYLIB/raylib.h	/^RLAPI void UnloadImagePalette(Color *colors);                                                   /;"	p	typeref:typename:RLAPI void	signature:(Color * colors)
UnloadMaterial	$RAYLIB/raylib.h	/^RLAPI void UnloadMaterial(Material material);                                               \/\//;"	p	typeref:typename:RLAPI void	signature:(Material material)
UnloadMesh	$RAYLIB/raylib.h	/^RLAPI void UnloadMesh(Mesh mesh);                                                           \/\//;"	p	typeref:typename:RLAPI void	signature:(Mesh mesh)
UnloadModel	$RAYLIB/raylib.h	/^RLAPI void UnloadModel(Model model);                                                        \/\//;"	p	typeref:typename:RLAPI void	signature:(Model model)
UnloadModelAnimation	$RAYLIB/raylib.h	/^RLAPI void UnloadModelAnimation(ModelAnimation anim);                                       \/\//;"	p	typeref:typename:RLAPI void	signature:(ModelAnimation anim)
UnloadModelAnimations	$RAYLIB/raylib.h	/^RLAPI void UnloadModelAnimations(ModelAnimation *animations, int animCount);                \/\//;"	p	typeref:typename:RLAPI void	signature:(ModelAnimation * animations,int animCount)
UnloadMusicStream	$RAYLIB/raylib.h	/^RLAPI void UnloadMusicStream(Music music);                            \/\/ Unload music stream$/;"	p	typeref:typename:RLAPI void	signature:(Music music)
UnloadRandomSequence	$RAYLIB/raylib.h	/^RLAPI void UnloadRandomSequence(int *sequence);                   \/\/ Unload random values sequ/;"	p	typeref:typename:RLAPI void	signature:(int * sequence)
UnloadRenderTexture	$RAYLIB/raylib.h	/^RLAPI void UnloadRenderTexture(RenderTexture2D target);                                         /;"	p	typeref:typename:RLAPI void	signature:(RenderTexture2D target)
UnloadShader	$RAYLIB/raylib.h	/^RLAPI void UnloadShader(Shader shader);                                    \/\/ Unload shader fr/;"	p	typeref:typename:RLAPI void	signature:(Shader shader)
UnloadSound	$RAYLIB/raylib.h	/^RLAPI void UnloadSound(Sound sound);                                  \/\/ Unload sound$/;"	p	typeref:typename:RLAPI void	signature:(Sound sound)
UnloadSoundAlias	$RAYLIB/raylib.h	/^RLAPI void UnloadSoundAlias(Sound alias);                             \/\/ Unload a sound alias /;"	p	typeref:typename:RLAPI void	signature:(Sound alias)
UnloadTexture	$RAYLIB/raylib.h	/^RLAPI void UnloadTexture(Texture2D texture);                                                    /;"	p	typeref:typename:RLAPI void	signature:(Texture2D texture)
UnloadUTF8	$RAYLIB/raylib.h	/^RLAPI void UnloadUTF8(char *text);                                      \/\/ Unload UTF-8 text e/;"	p	typeref:typename:RLAPI void	signature:(char * text)
UnloadVrStereoConfig	$RAYLIB/raylib.h	/^RLAPI void UnloadVrStereoConfig(VrStereoConfig config);           \/\/ Unload VR stereo config$/;"	p	typeref:typename:RLAPI void	signature:(VrStereoConfig config)
UnloadWave	$RAYLIB/raylib.h	/^RLAPI void UnloadWave(Wave wave);                                     \/\/ Unload wave data$/;"	p	typeref:typename:RLAPI void	signature:(Wave wave)
UnloadWaveSamples	$RAYLIB/raylib.h	/^RLAPI void UnloadWaveSamples(float *samples);                         \/\/ Unload samples data l/;"	p	typeref:typename:RLAPI void	signature:(float * samples)
UpdateAudioStream	$RAYLIB/raylib.h	/^RLAPI void UpdateAudioStream(AudioStream stream, const void *data, int frameCount); \/\/ Update /;"	p	typeref:typename:RLAPI void	signature:(AudioStream stream,const void * data,int frameCount)
UpdateCamera	$RAYLIB/raylib.h	/^RLAPI void UpdateCamera(Camera *camera, int mode);      \/\/ Update camera position for selected/;"	p	typeref:typename:RLAPI void	signature:(Camera * camera,int mode)
UpdateCameraPro	$RAYLIB/raylib.h	/^RLAPI void UpdateCameraPro(Camera *camera, Vector3 movement, Vector3 rotation, float zoom); \/\//;"	p	typeref:typename:RLAPI void	signature:(Camera * camera,Vector3 movement,Vector3 rotation,float zoom)
UpdateMeshBuffer	$RAYLIB/raylib.h	/^RLAPI void UpdateMeshBuffer(Mesh mesh, int index, const void *data, int dataSize, int offset); \//;"	p	typeref:typename:RLAPI void	signature:(Mesh mesh,int index,const void * data,int dataSize,int offset)
UpdateModelAnimation	$RAYLIB/raylib.h	/^RLAPI void UpdateModelAnimation(Model model, ModelAnimation anim, int frame);               \/\//;"	p	typeref:typename:RLAPI void	signature:(Model model,ModelAnimation anim,int frame)
UpdateMusicStream	$RAYLIB/raylib.h	/^RLAPI void UpdateMusicStream(Music music);                            \/\/ Updates buffers for m/;"	p	typeref:typename:RLAPI void	signature:(Music music)
UpdateSound	$RAYLIB/raylib.h	/^RLAPI void UpdateSound(Sound sound, const void *data, int sampleCount); \/\/ Update sound buffer/;"	p	typeref:typename:RLAPI void	signature:(Sound sound,const void * data,int sampleCount)
UpdateTexture	$RAYLIB/raylib.h	/^RLAPI void UpdateTexture(Texture2D texture, const void *pixels);                                /;"	p	typeref:typename:RLAPI void	signature:(Texture2D texture,const void * pixels)
UpdateTextureRec	$RAYLIB/raylib.h	/^RLAPI void UpdateTextureRec(Texture2D texture, Rectangle rec, const void *pixels);              /;"	p	typeref:typename:RLAPI void	signature:(Texture2D texture,Rectangle rec,const void * pixels)
UploadMesh	$RAYLIB/raylib.h	/^RLAPI void UploadMesh(Mesh *mesh, bool dynamic);                                            \/\//;"	p	typeref:typename:RLAPI void	signature:(Mesh * mesh,bool dynamic)
VALUEBOX	$RAYLIB/raygui.h	/^    VALUEBOX,$/;"	e	enum:__anonfd9f18ac0603
VIOLET	$RAYLIB/raylib.h	/^#define VIOLET /;"	d
Vector2	$RAYLIB/raygui.h	/^    } Vector2;$/;"	t	typeref:struct:Vector2
Vector2	$RAYLIB/raylib.h	/^} Vector2;$/;"	t	typeref:struct:Vector2
Vector2	$RAYLIB/raymath.h	/^} Vector2;$/;"	t	typeref:struct:Vector2
Vector2Add	$RAYLIB/raymath.h	/^RMAPI Vector2 Vector2Add(Vector2 v1, Vector2 v2)$/;"	f	typeref:typename:RMAPI Vector2	signature:(Vector2 v1,Vector2 v2)
Vector2AddValue	$RAYLIB/raymath.h	/^RMAPI Vector2 Vector2AddValue(Vector2 v, float add)$/;"	f	typeref:typename:RMAPI Vector2	signature:(Vector2 v,float add)
Vector2Angle	$RAYLIB/raymath.h	/^RMAPI float Vector2Angle(Vector2 v1, Vector2 v2)$/;"	f	typeref:typename:RMAPI float	signature:(Vector2 v1,Vector2 v2)
Vector2Clamp	$RAYLIB/raymath.h	/^RMAPI Vector2 Vector2Clamp(Vector2 v, Vector2 min, Vector2 max)$/;"	f	typeref:typename:RMAPI Vector2	signature:(Vector2 v,Vector2 min,Vector2 max)
Vector2ClampValue	$RAYLIB/raymath.h	/^RMAPI Vector2 Vector2ClampValue(Vector2 v, float min, float max)$/;"	f	typeref:typename:RMAPI Vector2	signature:(Vector2 v,float min,float max)
Vector2Distance	$RAYLIB/raymath.h	/^RMAPI float Vector2Distance(Vector2 v1, Vector2 v2)$/;"	f	typeref:typename:RMAPI float	signature:(Vector2 v1,Vector2 v2)
Vector2DistanceSqr	$RAYLIB/raymath.h	/^RMAPI float Vector2DistanceSqr(Vector2 v1, Vector2 v2)$/;"	f	typeref:typename:RMAPI float	signature:(Vector2 v1,Vector2 v2)
Vector2Divide	$RAYLIB/raymath.h	/^RMAPI Vector2 Vector2Divide(Vector2 v1, Vector2 v2)$/;"	f	typeref:typename:RMAPI Vector2	signature:(Vector2 v1,Vector2 v2)
Vector2DotProduct	$RAYLIB/raymath.h	/^RMAPI float Vector2DotProduct(Vector2 v1, Vector2 v2)$/;"	f	typeref:typename:RMAPI float	signature:(Vector2 v1,Vector2 v2)
Vector2Equals	$RAYLIB/raymath.h	/^RMAPI int Vector2Equals(Vector2 p, Vector2 q)$/;"	f	typeref:typename:RMAPI int	signature:(Vector2 p,Vector2 q)
Vector2Invert	$RAYLIB/raymath.h	/^RMAPI Vector2 Vector2Invert(Vector2 v)$/;"	f	typeref:typename:RMAPI Vector2	signature:(Vector2 v)
Vector2Length	$RAYLIB/raymath.h	/^RMAPI float Vector2Length(Vector2 v)$/;"	f	typeref:typename:RMAPI float	signature:(Vector2 v)
Vector2LengthSqr	$RAYLIB/raymath.h	/^RMAPI float Vector2LengthSqr(Vector2 v)$/;"	f	typeref:typename:RMAPI float	signature:(Vector2 v)
Vector2Lerp	$RAYLIB/raymath.h	/^RMAPI Vector2 Vector2Lerp(Vector2 v1, Vector2 v2, float amount)$/;"	f	typeref:typename:RMAPI Vector2	signature:(Vector2 v1,Vector2 v2,float amount)
Vector2LineAngle	$RAYLIB/raymath.h	/^RMAPI float Vector2LineAngle(Vector2 start, Vector2 end)$/;"	f	typeref:typename:RMAPI float	signature:(Vector2 start,Vector2 end)
Vector2Max	$RAYLIB/raymath.h	/^RMAPI Vector2 Vector2Max(Vector2 v1, Vector2 v2)$/;"	f	typeref:typename:RMAPI Vector2	signature:(Vector2 v1,Vector2 v2)
Vector2Min	$RAYLIB/raymath.h	/^RMAPI Vector2 Vector2Min(Vector2 v1, Vector2 v2)$/;"	f	typeref:typename:RMAPI Vector2	signature:(Vector2 v1,Vector2 v2)
Vector2MoveTowards	$RAYLIB/raymath.h	/^RMAPI Vector2 Vector2MoveTowards(Vector2 v, Vector2 target, float maxDistance)$/;"	f	typeref:typename:RMAPI Vector2	signature:(Vector2 v,Vector2 target,float maxDistance)
Vector2Multiply	$RAYLIB/raymath.h	/^RMAPI Vector2 Vector2Multiply(Vector2 v1, Vector2 v2)$/;"	f	typeref:typename:RMAPI Vector2	signature:(Vector2 v1,Vector2 v2)
Vector2Negate	$RAYLIB/raymath.h	/^RMAPI Vector2 Vector2Negate(Vector2 v)$/;"	f	typeref:typename:RMAPI Vector2	signature:(Vector2 v)
Vector2Normalize	$RAYLIB/raymath.h	/^RMAPI Vector2 Vector2Normalize(Vector2 v)$/;"	f	typeref:typename:RMAPI Vector2	signature:(Vector2 v)
Vector2One	$RAYLIB/raymath.h	/^RMAPI Vector2 Vector2One(void)$/;"	f	typeref:typename:RMAPI Vector2	signature:(void)
Vector2Reflect	$RAYLIB/raymath.h	/^RMAPI Vector2 Vector2Reflect(Vector2 v, Vector2 normal)$/;"	f	typeref:typename:RMAPI Vector2	signature:(Vector2 v,Vector2 normal)
Vector2Refract	$RAYLIB/raymath.h	/^RMAPI Vector2 Vector2Refract(Vector2 v, Vector2 n, float r)$/;"	f	typeref:typename:RMAPI Vector2	signature:(Vector2 v,Vector2 n,float r)
Vector2Rotate	$RAYLIB/raymath.h	/^RMAPI Vector2 Vector2Rotate(Vector2 v, float angle)$/;"	f	typeref:typename:RMAPI Vector2	signature:(Vector2 v,float angle)
Vector2Scale	$RAYLIB/raymath.h	/^RMAPI Vector2 Vector2Scale(Vector2 v, float scale)$/;"	f	typeref:typename:RMAPI Vector2	signature:(Vector2 v,float scale)
Vector2Subtract	$RAYLIB/raymath.h	/^RMAPI Vector2 Vector2Subtract(Vector2 v1, Vector2 v2)$/;"	f	typeref:typename:RMAPI Vector2	signature:(Vector2 v1,Vector2 v2)
Vector2SubtractValue	$RAYLIB/raymath.h	/^RMAPI Vector2 Vector2SubtractValue(Vector2 v, float sub)$/;"	f	typeref:typename:RMAPI Vector2	signature:(Vector2 v,float sub)
Vector2Transform	$RAYLIB/raymath.h	/^RMAPI Vector2 Vector2Transform(Vector2 v, Matrix mat)$/;"	f	typeref:typename:RMAPI Vector2	signature:(Vector2 v,Matrix mat)
Vector2Zero	$RAYLIB/raymath.h	/^RMAPI Vector2 Vector2Zero(void)$/;"	f	typeref:typename:RMAPI Vector2	signature:(void)
Vector3	$RAYLIB/raygui.h	/^    } Vector3;$/;"	t	typeref:struct:Vector3
Vector3	$RAYLIB/raylib.h	/^} Vector3;$/;"	t	typeref:struct:Vector3
Vector3	$RAYLIB/raymath.h	/^} Vector3;$/;"	t	typeref:struct:Vector3
Vector3Add	$RAYLIB/raymath.h	/^RMAPI Vector3 Vector3Add(Vector3 v1, Vector3 v2)$/;"	f	typeref:typename:RMAPI Vector3	signature:(Vector3 v1,Vector3 v2)
Vector3AddValue	$RAYLIB/raymath.h	/^RMAPI Vector3 Vector3AddValue(Vector3 v, float add)$/;"	f	typeref:typename:RMAPI Vector3	signature:(Vector3 v,float add)
Vector3Angle	$RAYLIB/raymath.h	/^RMAPI float Vector3Angle(Vector3 v1, Vector3 v2)$/;"	f	typeref:typename:RMAPI float	signature:(Vector3 v1,Vector3 v2)
Vector3Barycenter	$RAYLIB/raymath.h	/^RMAPI Vector3 Vector3Barycenter(Vector3 p, Vector3 a, Vector3 b, Vector3 c)$/;"	f	typeref:typename:RMAPI Vector3	signature:(Vector3 p,Vector3 a,Vector3 b,Vector3 c)
Vector3Clamp	$RAYLIB/raymath.h	/^RMAPI Vector3 Vector3Clamp(Vector3 v, Vector3 min, Vector3 max)$/;"	f	typeref:typename:RMAPI Vector3	signature:(Vector3 v,Vector3 min,Vector3 max)
Vector3ClampValue	$RAYLIB/raymath.h	/^RMAPI Vector3 Vector3ClampValue(Vector3 v, float min, float max)$/;"	f	typeref:typename:RMAPI Vector3	signature:(Vector3 v,float min,float max)
Vector3CrossProduct	$RAYLIB/raymath.h	/^RMAPI Vector3 Vector3CrossProduct(Vector3 v1, Vector3 v2)$/;"	f	typeref:typename:RMAPI Vector3	signature:(Vector3 v1,Vector3 v2)
Vector3CubicHermite	$RAYLIB/raymath.h	/^RMAPI Vector3 Vector3CubicHermite(Vector3 v1, Vector3 tangent1, Vector3 v2, Vector3 tangent2, fl/;"	f	typeref:typename:RMAPI Vector3	signature:(Vector3 v1,Vector3 tangent1,Vector3 v2,Vector3 tangent2,float amount)
Vector3Distance	$RAYLIB/raymath.h	/^RMAPI float Vector3Distance(Vector3 v1, Vector3 v2)$/;"	f	typeref:typename:RMAPI float	signature:(Vector3 v1,Vector3 v2)
Vector3DistanceSqr	$RAYLIB/raymath.h	/^RMAPI float Vector3DistanceSqr(Vector3 v1, Vector3 v2)$/;"	f	typeref:typename:RMAPI float	signature:(Vector3 v1,Vector3 v2)
Vector3Divide	$RAYLIB/raymath.h	/^RMAPI Vector3 Vector3Divide(Vector3 v1, Vector3 v2)$/;"	f	typeref:typename:RMAPI Vector3	signature:(Vector3 v1,Vector3 v2)
Vector3DotProduct	$RAYLIB/raymath.h	/^RMAPI float Vector3DotProduct(Vector3 v1, Vector3 v2)$/;"	f	typeref:typename:RMAPI float	signature:(Vector3 v1,Vector3 v2)
Vector3Equals	$RAYLIB/raymath.h	/^RMAPI int Vector3Equals(Vector3 p, Vector3 q)$/;"	f	typeref:typename:RMAPI int	signature:(Vector3 p,Vector3 q)
Vector3Invert	$RAYLIB/raymath.h	/^RMAPI Vector3 Vector3Invert(Vector3 v)$/;"	f	typeref:typename:RMAPI Vector3	signature:(Vector3 v)
Vector3Length	$RAYLIB/raymath.h	/^RMAPI float Vector3Length(const Vector3 v)$/;"	f	typeref:typename:RMAPI float	signature:(const Vector3 v)
Vector3LengthSqr	$RAYLIB/raymath.h	/^RMAPI float Vector3LengthSqr(const Vector3 v)$/;"	f	typeref:typename:RMAPI float	signature:(const Vector3 v)
Vector3Lerp	$RAYLIB/raymath.h	/^RMAPI Vector3 Vector3Lerp(Vector3 v1, Vector3 v2, float amount)$/;"	f	typeref:typename:RMAPI Vector3	signature:(Vector3 v1,Vector3 v2,float amount)
Vector3Max	$RAYLIB/raymath.h	/^RMAPI Vector3 Vector3Max(Vector3 v1, Vector3 v2)$/;"	f	typeref:typename:RMAPI Vector3	signature:(Vector3 v1,Vector3 v2)
Vector3Min	$RAYLIB/raymath.h	/^RMAPI Vector3 Vector3Min(Vector3 v1, Vector3 v2)$/;"	f	typeref:typename:RMAPI Vector3	signature:(Vector3 v1,Vector3 v2)
Vector3MoveTowards	$RAYLIB/raymath.h	/^RMAPI Vector3 Vector3MoveTowards(Vector3 v, Vector3 target, float maxDistance)$/;"	f	typeref:typename:RMAPI Vector3	signature:(Vector3 v,Vector3 target,float maxDistance)
Vector3Multiply	$RAYLIB/raymath.h	/^RMAPI Vector3 Vector3Multiply(Vector3 v1, Vector3 v2)$/;"	f	typeref:typename:RMAPI Vector3	signature:(Vector3 v1,Vector3 v2)
Vector3Negate	$RAYLIB/raymath.h	/^RMAPI Vector3 Vector3Negate(Vector3 v)$/;"	f	typeref:typename:RMAPI Vector3	signature:(Vector3 v)
Vector3Normalize	$RAYLIB/raymath.h	/^RMAPI Vector3 Vector3Normalize(Vector3 v)$/;"	f	typeref:typename:RMAPI Vector3	signature:(Vector3 v)
Vector3One	$RAYLIB/raymath.h	/^RMAPI Vector3 Vector3One(void)$/;"	f	typeref:typename:RMAPI Vector3	signature:(void)
Vector3OrthoNormalize	$RAYLIB/raymath.h	/^RMAPI void Vector3OrthoNormalize(Vector3 *v1, Vector3 *v2)$/;"	f	typeref:typename:RMAPI void	signature:(Vector3 * v1,Vector3 * v2)
Vector3Perpendicular	$RAYLIB/raymath.h	/^RMAPI Vector3 Vector3Perpendicular(Vector3 v)$/;"	f	typeref:typename:RMAPI Vector3	signature:(Vector3 v)
Vector3Project	$RAYLIB/raymath.h	/^RMAPI Vector3 Vector3Project(Vector3 v1, Vector3 v2)$/;"	f	typeref:typename:RMAPI Vector3	signature:(Vector3 v1,Vector3 v2)
Vector3Reflect	$RAYLIB/raymath.h	/^RMAPI Vector3 Vector3Reflect(Vector3 v, Vector3 normal)$/;"	f	typeref:typename:RMAPI Vector3	signature:(Vector3 v,Vector3 normal)
Vector3Refract	$RAYLIB/raymath.h	/^RMAPI Vector3 Vector3Refract(Vector3 v, Vector3 n, float r)$/;"	f	typeref:typename:RMAPI Vector3	signature:(Vector3 v,Vector3 n,float r)
Vector3Reject	$RAYLIB/raymath.h	/^RMAPI Vector3 Vector3Reject(Vector3 v1, Vector3 v2)$/;"	f	typeref:typename:RMAPI Vector3	signature:(Vector3 v1,Vector3 v2)
Vector3RotateByAxisAngle	$RAYLIB/raymath.h	/^RMAPI Vector3 Vector3RotateByAxisAngle(Vector3 v, Vector3 axis, float angle)$/;"	f	typeref:typename:RMAPI Vector3	signature:(Vector3 v,Vector3 axis,float angle)
Vector3RotateByQuaternion	$RAYLIB/raymath.h	/^RMAPI Vector3 Vector3RotateByQuaternion(Vector3 v, Quaternion q)$/;"	f	typeref:typename:RMAPI Vector3	signature:(Vector3 v,Quaternion q)
Vector3Scale	$RAYLIB/raymath.h	/^RMAPI Vector3 Vector3Scale(Vector3 v, float scalar)$/;"	f	typeref:typename:RMAPI Vector3	signature:(Vector3 v,float scalar)
Vector3Subtract	$RAYLIB/raymath.h	/^RMAPI Vector3 Vector3Subtract(Vector3 v1, Vector3 v2)$/;"	f	typeref:typename:RMAPI Vector3	signature:(Vector3 v1,Vector3 v2)
Vector3SubtractValue	$RAYLIB/raymath.h	/^RMAPI Vector3 Vector3SubtractValue(Vector3 v, float sub)$/;"	f	typeref:typename:RMAPI Vector3	signature:(Vector3 v,float sub)
Vector3ToFloat	$RAYLIB/raymath.h	/^    #define Vector3ToFloat(vec) (Vector3ToFloatV/;"	d	signature:(vec)
Vector3ToFloatV	$RAYLIB/raymath.h	/^RMAPI float3 Vector3ToFloatV(Vector3 v)$/;"	f	typeref:typename:RMAPI float3	signature:(Vector3 v)
Vector3Transform	$RAYLIB/raymath.h	/^RMAPI Vector3 Vector3Transform(Vector3 v, Matrix mat)$/;"	f	typeref:typename:RMAPI Vector3	signature:(Vector3 v,Matrix mat)
Vector3Unproject	$RAYLIB/raymath.h	/^RMAPI Vector3 Vector3Unproject(Vector3 source, Matrix projection, Matrix view)$/;"	f	typeref:typename:RMAPI Vector3	signature:(Vector3 source,Matrix projection,Matrix view)
Vector3Zero	$RAYLIB/raymath.h	/^RMAPI Vector3 Vector3Zero(void)$/;"	f	typeref:typename:RMAPI Vector3	signature:(void)
Vector4	$RAYLIB/raylib.h	/^} Vector4;$/;"	t	typeref:struct:Vector4
Vector4	$RAYLIB/raymath.h	/^} Vector4;$/;"	t	typeref:struct:Vector4
Vector4Add	$RAYLIB/raymath.h	/^RMAPI Vector4 Vector4Add(Vector4 v1, Vector4 v2)$/;"	f	typeref:typename:RMAPI Vector4	signature:(Vector4 v1,Vector4 v2)
Vector4AddValue	$RAYLIB/raymath.h	/^RMAPI Vector4 Vector4AddValue(Vector4 v, float add)$/;"	f	typeref:typename:RMAPI Vector4	signature:(Vector4 v,float add)
Vector4Distance	$RAYLIB/raymath.h	/^RMAPI float Vector4Distance(Vector4 v1, Vector4 v2)$/;"	f	typeref:typename:RMAPI float	signature:(Vector4 v1,Vector4 v2)
Vector4DistanceSqr	$RAYLIB/raymath.h	/^RMAPI float Vector4DistanceSqr(Vector4 v1, Vector4 v2)$/;"	f	typeref:typename:RMAPI float	signature:(Vector4 v1,Vector4 v2)
Vector4Divide	$RAYLIB/raymath.h	/^RMAPI Vector4 Vector4Divide(Vector4 v1, Vector4 v2)$/;"	f	typeref:typename:RMAPI Vector4	signature:(Vector4 v1,Vector4 v2)
Vector4DotProduct	$RAYLIB/raymath.h	/^RMAPI float Vector4DotProduct(Vector4 v1, Vector4 v2)$/;"	f	typeref:typename:RMAPI float	signature:(Vector4 v1,Vector4 v2)
Vector4Equals	$RAYLIB/raymath.h	/^RMAPI int Vector4Equals(Vector4 p, Vector4 q)$/;"	f	typeref:typename:RMAPI int	signature:(Vector4 p,Vector4 q)
Vector4Invert	$RAYLIB/raymath.h	/^RMAPI Vector4 Vector4Invert(Vector4 v)$/;"	f	typeref:typename:RMAPI Vector4	signature:(Vector4 v)
Vector4Length	$RAYLIB/raymath.h	/^RMAPI float Vector4Length(Vector4 v)$/;"	f	typeref:typename:RMAPI float	signature:(Vector4 v)
Vector4LengthSqr	$RAYLIB/raymath.h	/^RMAPI float Vector4LengthSqr(Vector4 v)$/;"	f	typeref:typename:RMAPI float	signature:(Vector4 v)
Vector4Lerp	$RAYLIB/raymath.h	/^RMAPI Vector4 Vector4Lerp(Vector4 v1, Vector4 v2, float amount)$/;"	f	typeref:typename:RMAPI Vector4	signature:(Vector4 v1,Vector4 v2,float amount)
Vector4Max	$RAYLIB/raymath.h	/^RMAPI Vector4 Vector4Max(Vector4 v1, Vector4 v2)$/;"	f	typeref:typename:RMAPI Vector4	signature:(Vector4 v1,Vector4 v2)
Vector4Min	$RAYLIB/raymath.h	/^RMAPI Vector4 Vector4Min(Vector4 v1, Vector4 v2)$/;"	f	typeref:typename:RMAPI Vector4	signature:(Vector4 v1,Vector4 v2)
Vector4MoveTowards	$RAYLIB/raymath.h	/^RMAPI Vector4 Vector4MoveTowards(Vector4 v, Vector4 target, float maxDistance)$/;"	f	typeref:typename:RMAPI Vector4	signature:(Vector4 v,Vector4 target,float maxDistance)
Vector4Multiply	$RAYLIB/raymath.h	/^RMAPI Vector4 Vector4Multiply(Vector4 v1, Vector4 v2)$/;"	f	typeref:typename:RMAPI Vector4	signature:(Vector4 v1,Vector4 v2)
Vector4Negate	$RAYLIB/raymath.h	/^RMAPI Vector4 Vector4Negate(Vector4 v)$/;"	f	typeref:typename:RMAPI Vector4	signature:(Vector4 v)
Vector4Normalize	$RAYLIB/raymath.h	/^RMAPI Vector4 Vector4Normalize(Vector4 v)$/;"	f	typeref:typename:RMAPI Vector4	signature:(Vector4 v)
Vector4One	$RAYLIB/raymath.h	/^RMAPI Vector4 Vector4One(void)$/;"	f	typeref:typename:RMAPI Vector4	signature:(void)
Vector4Scale	$RAYLIB/raymath.h	/^RMAPI Vector4 Vector4Scale(Vector4 v, float scale)$/;"	f	typeref:typename:RMAPI Vector4	signature:(Vector4 v,float scale)
Vector4Subtract	$RAYLIB/raymath.h	/^RMAPI Vector4 Vector4Subtract(Vector4 v1, Vector4 v2)$/;"	f	typeref:typename:RMAPI Vector4	signature:(Vector4 v1,Vector4 v2)
Vector4SubtractValue	$RAYLIB/raymath.h	/^RMAPI Vector4 Vector4SubtractValue(Vector4 v, float add)$/;"	f	typeref:typename:RMAPI Vector4	signature:(Vector4 v,float add)
Vector4Zero	$RAYLIB/raymath.h	/^RMAPI Vector4 Vector4Zero(void)$/;"	f	typeref:typename:RMAPI Vector4	signature:(void)
VrDeviceInfo	$RAYLIB/raylib.h	/^} VrDeviceInfo;$/;"	t	typeref:struct:VrDeviceInfo
VrStereoConfig	$RAYLIB/raylib.h	/^} VrStereoConfig;$/;"	t	typeref:struct:VrStereoConfig
WHITE	$RAYLIB/raylib.h	/^#define WHITE /;"	d
WINGDIAPI	$RAYLIB/rlgl.h	/^            #define WINGDIAPI /;"	d
WaitTime	$RAYLIB/raylib.h	/^RLAPI void WaitTime(double seconds);                              \/\/ Wait for some time (halt /;"	p	typeref:typename:RLAPI void	signature:(double seconds)
Wave	$RAYLIB/raylib.h	/^} Wave;$/;"	t	typeref:struct:Wave
WaveCopy	$RAYLIB/raylib.h	/^RLAPI Wave WaveCopy(Wave wave);                                       \/\/ Copy a wave to a new /;"	p	typeref:typename:RLAPI Wave	signature:(Wave wave)
WaveCrop	$RAYLIB/raylib.h	/^RLAPI void WaveCrop(Wave *wave, int initSample, int finalSample);     \/\/ Crop a wave to define/;"	p	typeref:typename:RLAPI void	signature:(Wave * wave,int initSample,int finalSample)
WaveFormat	$RAYLIB/raylib.h	/^RLAPI void WaveFormat(Wave *wave, int sampleRate, int sampleSize, int channels); \/\/ Convert wa/;"	p	typeref:typename:RLAPI void	signature:(Wave * wave,int sampleRate,int sampleSize,int channels)
WindowShouldClose	$RAYLIB/raylib.h	/^RLAPI bool WindowShouldClose(void);                               \/\/ Check if application shou/;"	p	typeref:typename:RLAPI bool	signature:(void)
Wrap	$RAYLIB/raymath.h	/^RMAPI float Wrap(float value, float min, float max)$/;"	f	typeref:typename:RMAPI float	signature:(float value,float min,float max)
YELLOW	$RAYLIB/raylib.h	/^#define YELLOW /;"	d
__anon19a7bfac0103	$RAYLIB/rlgl.h	/^typedef enum bool { false = 0, true = !false } bool;$/;"	t	typeref:enum:bool
__anon19a7bfac0203	$RAYLIB/rlgl.h	/^typedef enum {$/;"	g
__anon19a7bfac0303	$RAYLIB/rlgl.h	/^typedef enum {$/;"	g
__anon19a7bfac0403	$RAYLIB/rlgl.h	/^typedef enum {$/;"	g
__anon19a7bfac0503	$RAYLIB/rlgl.h	/^typedef enum {$/;"	g
__anon19a7bfac0603	$RAYLIB/rlgl.h	/^typedef enum {$/;"	g
__anon19a7bfac0703	$RAYLIB/rlgl.h	/^typedef enum {$/;"	g
__anon19a7bfac0803	$RAYLIB/rlgl.h	/^typedef enum {$/;"	g
__anon19a7bfac0903	$RAYLIB/rlgl.h	/^typedef enum {$/;"	g
__anon19a7bfac0a03	$RAYLIB/rlgl.h	/^typedef enum {$/;"	g
__anon19a7bfac0b03	$RAYLIB/rlgl.h	/^typedef enum {$/;"	g
__anon19a7bfac0c03	$RAYLIB/rlgl.h	/^typedef enum {$/;"	g
__anon19a7bfac0d08	$RAYLIB/rlgl.h	/^    struct {$/;"	s	struct:rlglData
__anon19a7bfac0e08	$RAYLIB/rlgl.h	/^    struct {$/;"	s	struct:rlglData
__anonfd9f18ac0103	$RAYLIB/raygui.h	/^            typedef enum { false, true } bool;$/;"	t	typeref:enum:bool
__anonfd9f18ac0203	$RAYLIB/raygui.h	/^typedef enum {$/;"	g
__anonfd9f18ac0303	$RAYLIB/raygui.h	/^typedef enum {$/;"	g
__anonfd9f18ac0403	$RAYLIB/raygui.h	/^typedef enum {$/;"	g
__anonfd9f18ac0503	$RAYLIB/raygui.h	/^typedef enum {$/;"	g
__anonfd9f18ac0603	$RAYLIB/raygui.h	/^typedef enum {$/;"	g
__anonfd9f18ac0703	$RAYLIB/raygui.h	/^typedef enum {$/;"	g
__anonfd9f18ac0803	$RAYLIB/raygui.h	/^typedef enum {$/;"	g
__anonfd9f18ac0903	$RAYLIB/raygui.h	/^typedef enum {$/;"	g
__anonfd9f18ac0a03	$RAYLIB/raygui.h	/^typedef enum {$/;"	g
__anonfd9f18ac0b03	$RAYLIB/raygui.h	/^typedef enum {$/;"	g
__anonfd9f18ac0c03	$RAYLIB/raygui.h	/^typedef enum {$/;"	g
__anonfd9f18ac0d03	$RAYLIB/raygui.h	/^typedef enum {$/;"	g
__anonfd9f18ac0e03	$RAYLIB/raygui.h	/^typedef enum {$/;"	g
__anonfd9f18ac0f03	$RAYLIB/raygui.h	/^typedef enum {$/;"	g
__anonfd9f18ac1003	$RAYLIB/raygui.h	/^typedef enum {$/;"	g
__anonfd9f18ac1103	$RAYLIB/raygui.h	/^typedef enum {$/;"	g
__anonfd9f18ac1203	$RAYLIB/raygui.h	/^typedef enum {$/;"	g
__anonfd9f18ac1303	$RAYLIB/raygui.h	/^typedef enum {$/;"	g
__anonfd9f18ac1403	$RAYLIB/raygui.h	/^typedef enum {$/;"	g
__anonfd9f18ac1503	$RAYLIB/raygui.h	/^typedef enum { BORDER = 0, BASE, TEXT, OTHER } GuiPropertyElement;$/;"	g
__anonfdf2e0de0103	$RAYLIB/raylib.h	/^    typedef enum bool { false = 0, true = !false } bool;$/;"	t	typeref:enum:bool
__anonfdf2e0de0203	$RAYLIB/raylib.h	/^typedef enum {$/;"	g
__anonfdf2e0de0303	$RAYLIB/raylib.h	/^typedef enum {$/;"	g
__anonfdf2e0de0403	$RAYLIB/raylib.h	/^typedef enum {$/;"	g
__anonfdf2e0de0503	$RAYLIB/raylib.h	/^typedef enum {$/;"	g
__anonfdf2e0de0603	$RAYLIB/raylib.h	/^typedef enum {$/;"	g
__anonfdf2e0de0703	$RAYLIB/raylib.h	/^typedef enum {$/;"	g
__anonfdf2e0de0803	$RAYLIB/raylib.h	/^typedef enum {$/;"	g
__anonfdf2e0de0903	$RAYLIB/raylib.h	/^typedef enum {$/;"	g
__anonfdf2e0de0a03	$RAYLIB/raylib.h	/^typedef enum {$/;"	g
__anonfdf2e0de0b03	$RAYLIB/raylib.h	/^typedef enum {$/;"	g
__anonfdf2e0de0c03	$RAYLIB/raylib.h	/^typedef enum {$/;"	g
__anonfdf2e0de0d03	$RAYLIB/raylib.h	/^typedef enum {$/;"	g
__anonfdf2e0de0e03	$RAYLIB/raylib.h	/^typedef enum {$/;"	g
__anonfdf2e0de0f03	$RAYLIB/raylib.h	/^typedef enum {$/;"	g
__anonfdf2e0de1003	$RAYLIB/raylib.h	/^typedef enum {$/;"	g
__anonfdf2e0de1103	$RAYLIB/raylib.h	/^typedef enum {$/;"	g
__anonfdf2e0de1203	$RAYLIB/raylib.h	/^typedef enum {$/;"	g
__anonfdf2e0de1303	$RAYLIB/raylib.h	/^typedef enum {$/;"	g
__anonfdf2e0de1403	$RAYLIB/raylib.h	/^typedef enum {$/;"	g
__anonfdf2e0de1503	$RAYLIB/raylib.h	/^typedef enum {$/;"	g
__anonfdf2e0de1603	$RAYLIB/raylib.h	/^typedef enum {$/;"	g
__declspec	$RAYLIB/raylib.h	/^        #define __declspec(/;"	d	signature:(x)
activeTextureId	$RAYLIB/rlgl.h	/^        unsigned int activeTextureId[RL_DEFAULT_BATCH_MAX_TEXTURE_UNITS];    \/\/ Active texture/;"	m	struct:rlglData::__anon19a7bfac0d08	typeref:typename:unsigned int[]
advanceX	$RAYLIB/raygui.h	/^        int advanceX;           \/\/ Character advance position X$/;"	m	struct:GlyphInfo	typeref:typename:int
advanceX	$RAYLIB/raylib.h	/^    int advanceX;           \/\/ Character advance position X$/;"	m	struct:GlyphInfo	typeref:typename:int
animNormals	$RAYLIB/raylib.h	/^    float *animNormals;     \/\/ Animated normals (after bones transformations)$/;"	m	struct:Mesh	typeref:typename:float *
animVertices	$RAYLIB/raylib.h	/^    float *animVertices;    \/\/ Animated vertex positions (after bones transformations)$/;"	m	struct:Mesh	typeref:typename:float *
autoCursorCooldownCounter	$RAYLIB/raygui.h	/^static int autoCursorCooldownCounter = 0;       \/\/ Cooldown frame counter for automatic cursor/;"	v	typeref:typename:int
autoCursorDelayCounter	$RAYLIB/raygui.h	/^static int autoCursorDelayCounter = 0;          \/\/ Delay frame counter for automatic cursor mo/;"	v	typeref:typename:int
baseSize	$RAYLIB/raygui.h	/^        int baseSize;           \/\/ Base size (default chars height)$/;"	m	struct:Font	typeref:typename:int
baseSize	$RAYLIB/raylib.h	/^    int baseSize;           \/\/ Base size (default chars height)$/;"	m	struct:Font	typeref:typename:int
bindPose	$RAYLIB/raylib.h	/^    Transform *bindPose;    \/\/ Bones base transformation (pose)$/;"	m	struct:Model	typeref:typename:Transform *
boneCount	$RAYLIB/raylib.h	/^    int boneCount;          \/\/ Number of bones$/;"	m	struct:ModelAnimation	typeref:typename:int
boneIds	$RAYLIB/raylib.h	/^    unsigned char *boneIds; \/\/ Vertex bone ids, max 255 bone ids, up to 4 bones influence by v/;"	m	struct:Mesh	typeref:typename:unsigned char *
boneWeights	$RAYLIB/raylib.h	/^    float *boneWeights;     \/\/ Vertex bone weight, up to 4 bones influence by vertex (skinning/;"	m	struct:Mesh	typeref:typename:float *
bones	$RAYLIB/raylib.h	/^    BoneInfo *bones;        \/\/ Bones information (skeleton)$/;"	m	struct:ModelAnimation	typeref:typename:BoneInfo *
bottom	$RAYLIB/raylib.h	/^    int bottom;             \/\/ Bottom border offset$/;"	m	struct:NPatchInfo	typeref:typename:int
buffer	$RAYLIB/raylib.h	/^    rAudioBuffer *buffer;       \/\/ Pointer to internal data used by the audio system$/;"	m	struct:AudioStream	typeref:typename:rAudioBuffer *
bufferCount	$RAYLIB/rlgl.h	/^    int bufferCount;            \/\/ Number of vertex buffers (multi-buffering support)$/;"	m	struct:rlRenderBatch	typeref:typename:int
capacity	$RAYLIB/raylib.h	/^    unsigned int capacity;          \/\/ Filepaths max entries$/;"	m	struct:FilePathList	typeref:typename:unsigned int
channels	$RAYLIB/raylib.h	/^    unsigned int channels;      \/\/ Number of channels (1-mono, 2-stereo, ...)$/;"	m	struct:Wave	typeref:typename:unsigned int
chromaAbCorrection	$RAYLIB/raylib.h	/^    float chromaAbCorrection[4];    \/\/ Chromatic aberration correction parameters$/;"	m	struct:VrDeviceInfo	typeref:typename:float[4]
color	$RAYLIB/raylib.h	/^    Color color;            \/\/ Material map color$/;"	m	struct:MaterialMap	typeref:typename:Color
colora	$RAYLIB/rlgl.h	/^        unsigned char colorr, colorg, colorb, colora;   \/\/ Current active color (added on glVe/;"	m	struct:rlglData::__anon19a7bfac0d08	typeref:typename:unsigned char
colorb	$RAYLIB/rlgl.h	/^        unsigned char colorr, colorg, colorb, colora;   \/\/ Current active color (added on glVe/;"	m	struct:rlglData::__anon19a7bfac0d08	typeref:typename:unsigned char
colorg	$RAYLIB/rlgl.h	/^        unsigned char colorr, colorg, colorb, colora;   \/\/ Current active color (added on glVe/;"	m	struct:rlglData::__anon19a7bfac0d08	typeref:typename:unsigned char
colorr	$RAYLIB/rlgl.h	/^        unsigned char colorr, colorg, colorb, colora;   \/\/ Current active color (added on glVe/;"	m	struct:rlglData::__anon19a7bfac0d08	typeref:typename:unsigned char
colors	$RAYLIB/raylib.h	/^    unsigned char *colors;      \/\/ Vertex colors (RGBA - 4 components per vertex) (shader-loca/;"	m	struct:Mesh	typeref:typename:unsigned char *
colors	$RAYLIB/rlgl.h	/^    unsigned char *colors;      \/\/ Vertex colors (RGBA - 4 components per vertex) (shader-loca/;"	m	struct:rlVertexBuffer	typeref:typename:unsigned char *
computeShader	$RAYLIB/rlgl.h	/^        bool computeShader;                 \/\/ Compute shaders support (GL_ARB_compute_shader)$/;"	m	struct:rlglData::__anon19a7bfac0e08	typeref:typename:bool
controlId	$RAYLIB/raygui.h	/^    unsigned short controlId;   \/\/ Control identifier$/;"	m	struct:GuiStyleProp	typeref:typename:unsigned short
count	$RAYLIB/raylib.h	/^    unsigned int count;             \/\/ Filepaths entries count$/;"	m	struct:FilePathList	typeref:typename:unsigned int
ctxData	$RAYLIB/raylib.h	/^    void *ctxData;              \/\/ Audio context data, depends on type$/;"	m	struct:Music	typeref:typename:void *
ctxType	$RAYLIB/raylib.h	/^    int ctxType;                \/\/ Type of music context (audio filetype)$/;"	m	struct:Music	typeref:typename:int
currentBatch	$RAYLIB/rlgl.h	/^    rlRenderBatch *currentBatch;            \/\/ Current render batch$/;"	m	struct:rlglData	typeref:typename:rlRenderBatch *
currentBlendMode	$RAYLIB/rlgl.h	/^        int currentBlendMode;               \/\/ Blending mode active$/;"	m	struct:rlglData::__anon19a7bfac0d08	typeref:typename:int
currentBuffer	$RAYLIB/rlgl.h	/^    int currentBuffer;          \/\/ Current buffer tracking in case of multi-buffering$/;"	m	struct:rlRenderBatch	typeref:typename:int
currentDepth	$RAYLIB/rlgl.h	/^    float currentDepth;         \/\/ Current depth value for next draw$/;"	m	struct:rlRenderBatch	typeref:typename:float
currentMatrix	$RAYLIB/rlgl.h	/^        Matrix *currentMatrix;              \/\/ Current matrix pointer$/;"	m	struct:rlglData::__anon19a7bfac0d08	typeref:typename:Matrix *
currentMatrixMode	$RAYLIB/rlgl.h	/^        int currentMatrixMode;              \/\/ Current matrix mode$/;"	m	struct:rlglData::__anon19a7bfac0d08	typeref:typename:int
currentShaderId	$RAYLIB/rlgl.h	/^        unsigned int currentShaderId;       \/\/ Current shader id to be used on rendering (by d/;"	m	struct:rlglData::__anon19a7bfac0d08	typeref:typename:unsigned int
currentShaderLocs	$RAYLIB/rlgl.h	/^        int *currentShaderLocs;             \/\/ Current shader locations pointer to be used on /;"	m	struct:rlglData::__anon19a7bfac0d08	typeref:typename:int *
data	$RAYLIB/raygui.h	/^        void *data;             \/\/ Image raw data$/;"	m	struct:Image	typeref:typename:void *
data	$RAYLIB/raylib.h	/^    void *data;             \/\/ Image raw data$/;"	m	struct:Image	typeref:typename:void *
defaultBatch	$RAYLIB/rlgl.h	/^    rlRenderBatch defaultBatch;             \/\/ Default internal render batch$/;"	m	struct:rlglData	typeref:typename:rlRenderBatch
defaultFShaderId	$RAYLIB/rlgl.h	/^        unsigned int defaultFShaderId;      \/\/ Default fragment shader id (used by default sha/;"	m	struct:rlglData::__anon19a7bfac0d08	typeref:typename:unsigned int
defaultShaderId	$RAYLIB/rlgl.h	/^        unsigned int defaultShaderId;       \/\/ Default shader program id, supports vertex colo/;"	m	struct:rlglData::__anon19a7bfac0d08	typeref:typename:unsigned int
defaultShaderLocs	$RAYLIB/rlgl.h	/^        int *defaultShaderLocs;             \/\/ Default shader locations pointer to be used on /;"	m	struct:rlglData::__anon19a7bfac0d08	typeref:typename:int *
defaultTextureId	$RAYLIB/rlgl.h	/^        unsigned int defaultTextureId;      \/\/ Default texture used on shapes\/poly drawing (r/;"	m	struct:rlglData::__anon19a7bfac0d08	typeref:typename:unsigned int
defaultVShaderId	$RAYLIB/rlgl.h	/^        unsigned int defaultVShaderId;      \/\/ Default vertex shader id (used by default shade/;"	m	struct:rlglData::__anon19a7bfac0d08	typeref:typename:unsigned int
depth	$RAYLIB/raylib.h	/^    Texture depth;          \/\/ Depth buffer attachment texture$/;"	m	struct:RenderTexture	typeref:typename:Texture
direction	$RAYLIB/raylib.h	/^    Vector3 direction;      \/\/ Ray direction$/;"	m	struct:Ray	typeref:typename:Vector3
distance	$RAYLIB/raylib.h	/^    float distance;         \/\/ Distance to the nearest hit$/;"	m	struct:RayCollision	typeref:typename:float
drawCounter	$RAYLIB/rlgl.h	/^    int drawCounter;            \/\/ Draw calls counter$/;"	m	struct:rlRenderBatch	typeref:typename:int
draws	$RAYLIB/rlgl.h	/^    rlDrawCall *draws;          \/\/ Draw calls array, depends on textureId$/;"	m	struct:rlRenderBatch	typeref:typename:rlDrawCall *
elementCount	$RAYLIB/rlgl.h	/^    int elementCount;           \/\/ Number of elements in the buffer (QUADS)$/;"	m	struct:rlVertexBuffer	typeref:typename:int
events	$RAYLIB/raylib.h	/^    AutomationEvent *events;        \/\/ Events entries$/;"	m	struct:AutomationEventList	typeref:typename:AutomationEvent *
eyeToScreenDistance	$RAYLIB/raylib.h	/^    float eyeToScreenDistance;      \/\/ Distance between eye and display in meters$/;"	m	struct:VrDeviceInfo	typeref:typename:float
float16	$RAYLIB/raymath.h	/^} float16;$/;"	t	typeref:struct:float16
float3	$RAYLIB/raymath.h	/^} float3;$/;"	t	typeref:struct:float3
format	$RAYLIB/raygui.h	/^        int format;             \/\/ Data format (PixelFormat type)$/;"	m	struct:Texture2D	typeref:typename:int
format	$RAYLIB/raylib.h	/^    int format;             \/\/ Data format (PixelFormat type)$/;"	m	struct:Texture	typeref:typename:int
fovy	$RAYLIB/raylib.h	/^    float fovy;             \/\/ Camera field-of-view aperture in Y (degrees) in perspective, us/;"	m	struct:Camera3D	typeref:typename:float
frame	$RAYLIB/raylib.h	/^    unsigned int frame;             \/\/ Event frame$/;"	m	struct:AutomationEvent	typeref:typename:unsigned int
frameCount	$RAYLIB/raylib.h	/^    unsigned int frameCount;    \/\/ Total number of frames (considering channels)$/;"	m	struct:Wave	typeref:typename:unsigned int
framePoses	$RAYLIB/raylib.h	/^    Transform **framePoses; \/\/ Poses array by frame$/;"	m	struct:ModelAnimation	typeref:typename:Transform **
framebufferHeight	$RAYLIB/rlgl.h	/^        int framebufferHeight;              \/\/ Current framebuffer height$/;"	m	struct:rlglData::__anon19a7bfac0d08	typeref:typename:int
framebufferWidth	$RAYLIB/rlgl.h	/^        int framebufferWidth;               \/\/ Current framebuffer width$/;"	m	struct:rlglData::__anon19a7bfac0d08	typeref:typename:int
glBindVertexArray	$RAYLIB/rlgl.h	/^static PFNGLBINDVERTEXARRAYOESPROC glBindVertexArray = NULL;$/;"	v	typeref:typename:PFNGLBINDVERTEXARRAYOESPROC
glBlendDestFactorAlpha	$RAYLIB/rlgl.h	/^        int glBlendDestFactorAlpha;         \/\/ Blending destination alpha factor$/;"	m	struct:rlglData::__anon19a7bfac0d08	typeref:typename:int
glBlendDestFactorRGB	$RAYLIB/rlgl.h	/^        int glBlendDestFactorRGB;           \/\/ Blending destination RGB factor$/;"	m	struct:rlglData::__anon19a7bfac0d08	typeref:typename:int
glBlendDstFactor	$RAYLIB/rlgl.h	/^        int glBlendDstFactor;               \/\/ Blending destination factor$/;"	m	struct:rlglData::__anon19a7bfac0d08	typeref:typename:int
glBlendEquation	$RAYLIB/rlgl.h	/^        int glBlendEquation;                \/\/ Blending equation$/;"	m	struct:rlglData::__anon19a7bfac0d08	typeref:typename:int
glBlendEquationAlpha	$RAYLIB/rlgl.h	/^        int glBlendEquationAlpha;           \/\/ Blending equation for alpha$/;"	m	struct:rlglData::__anon19a7bfac0d08	typeref:typename:int
glBlendEquationRGB	$RAYLIB/rlgl.h	/^        int glBlendEquationRGB;             \/\/ Blending equation for RGB$/;"	m	struct:rlglData::__anon19a7bfac0d08	typeref:typename:int
glBlendSrcFactor	$RAYLIB/rlgl.h	/^        int glBlendSrcFactor;               \/\/ Blending source factor$/;"	m	struct:rlglData::__anon19a7bfac0d08	typeref:typename:int
glBlendSrcFactorAlpha	$RAYLIB/rlgl.h	/^        int glBlendSrcFactorAlpha;          \/\/ Blending source alpha factor$/;"	m	struct:rlglData::__anon19a7bfac0d08	typeref:typename:int
glBlendSrcFactorRGB	$RAYLIB/rlgl.h	/^        int glBlendSrcFactorRGB;            \/\/ Blending source RGB factor$/;"	m	struct:rlglData::__anon19a7bfac0d08	typeref:typename:int
glClearDepth	$RAYLIB/rlgl.h	/^    #define glClearDepth                 glClearDepthf/;"	d
glCustomBlendModeModified	$RAYLIB/rlgl.h	/^        bool glCustomBlendModeModified;     \/\/ Custom blending factor and equation modificatio/;"	m	struct:rlglData::__anon19a7bfac0d08	typeref:typename:bool
glDeleteVertexArrays	$RAYLIB/rlgl.h	/^static PFNGLDELETEVERTEXARRAYSOESPROC glDeleteVertexArrays = NULL;$/;"	v	typeref:typename:PFNGLDELETEVERTEXARRAYSOESPROC
glDrawArraysInstanced	$RAYLIB/rlgl.h	/^static PFNGLDRAWARRAYSINSTANCEDEXTPROC glDrawArraysInstanced = NULL;$/;"	v	typeref:typename:PFNGLDRAWARRAYSINSTANCEDEXTPROC
glDrawElementsInstanced	$RAYLIB/rlgl.h	/^static PFNGLDRAWELEMENTSINSTANCEDEXTPROC glDrawElementsInstanced = NULL;$/;"	v	typeref:typename:PFNGLDRAWELEMENTSINSTANCEDEXTPROC
glGenVertexArrays	$RAYLIB/rlgl.h	/^static PFNGLGENVERTEXARRAYSOESPROC glGenVertexArrays = NULL;$/;"	v	typeref:typename:PFNGLGENVERTEXARRAYSOESPROC
glVertexAttribDivisor	$RAYLIB/rlgl.h	/^static PFNGLVERTEXATTRIBDIVISOREXTPROC glVertexAttribDivisor = NULL;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBDIVISOREXTPROC
glyphCount	$RAYLIB/raygui.h	/^        int glyphCount;         \/\/ Number of glyph characters$/;"	m	struct:Font	typeref:typename:int
glyphCount	$RAYLIB/raylib.h	/^    int glyphCount;         \/\/ Number of glyph characters$/;"	m	struct:Font	typeref:typename:int
glyphPadding	$RAYLIB/raygui.h	/^        int glyphPadding;       \/\/ Padding around the glyph characters$/;"	m	struct:Font	typeref:typename:int
glyphPadding	$RAYLIB/raylib.h	/^    int glyphPadding;       \/\/ Padding around the glyph characters$/;"	m	struct:Font	typeref:typename:int
glyphs	$RAYLIB/raygui.h	/^        GlyphInfo *glyphs;      \/\/ Glyphs info data$/;"	m	struct:Font	typeref:typename:GlyphInfo *
glyphs	$RAYLIB/raylib.h	/^    GlyphInfo *glyphs;      \/\/ Glyphs info data$/;"	m	struct:Font	typeref:typename:GlyphInfo *
guiAlpha	$RAYLIB/raygui.h	/^static float guiAlpha = 1.0f;                   \/\/ Gui controls transparency$/;"	v	typeref:typename:float
guiControlExclusiveMode	$RAYLIB/raygui.h	/^static bool guiControlExclusiveMode = false;    \/\/ Gui control exclusive mode (no inputs proce/;"	v	typeref:typename:bool
guiControlExclusiveRec	$RAYLIB/raygui.h	/^static Rectangle guiControlExclusiveRec = { 0 }; \/\/ Gui control exclusive bounds rectangle, us/;"	v	typeref:typename:Rectangle
guiFont	$RAYLIB/raygui.h	/^static Font guiFont = { 0 };                    \/\/ Gui current font (WARNING: highly coupled t/;"	v	typeref:typename:Font
guiIconScale	$RAYLIB/raygui.h	/^static unsigned int guiIconScale = 1;           \/\/ Gui icon default scale (if icons enabled)$/;"	v	typeref:typename:unsigned int
guiIcons	$RAYLIB/raygui.h	/^static unsigned int guiIcons[RAYGUI_ICON_MAX_ICONS*RAYGUI_ICON_DATA_ELEMENTS] = {$/;"	v	typeref:typename:unsigned int[]
guiIconsPtr	$RAYLIB/raygui.h	/^static unsigned int *guiIconsPtr = guiIcons;$/;"	v	typeref:typename:unsigned int *
guiLocked	$RAYLIB/raygui.h	/^static bool guiLocked = false;                  \/\/ Gui lock state (no inputs processed)$/;"	v	typeref:typename:bool
guiState	$RAYLIB/raygui.h	/^static GuiState guiState = STATE_NORMAL;        \/\/ Gui global state, if !STATE_NORMAL, forces /;"	v	typeref:typename:GuiState
guiStyle	$RAYLIB/raygui.h	/^static unsigned int guiStyle[RAYGUI_MAX_CONTROLS*(RAYGUI_MAX_PROPS_BASE + RAYGUI_MAX_PROPS_EXTEN/;"	v	typeref:typename:unsigned int[]
guiStyleLoaded	$RAYLIB/raygui.h	/^static bool guiStyleLoaded = false;         \/\/ Style loaded flag for lazy style initialization$/;"	v	typeref:typename:bool
guiTooltip	$RAYLIB/raygui.h	/^static bool guiTooltip = false;                 \/\/ Tooltip enabled\/disabled$/;"	v	typeref:typename:bool
guiTooltipPtr	$RAYLIB/raygui.h	/^static const char *guiTooltipPtr = NULL;        \/\/ Tooltip string pointer (string provided by /;"	v	typeref:typename:const char *
hResolution	$RAYLIB/raylib.h	/^    int hResolution;                \/\/ Horizontal resolution in pixels$/;"	m	struct:VrDeviceInfo	typeref:typename:int
hScreenSize	$RAYLIB/raylib.h	/^    float hScreenSize;              \/\/ Horizontal size in meters$/;"	m	struct:VrDeviceInfo	typeref:typename:float
height	$RAYLIB/raygui.h	/^        int height;             \/\/ Texture base height$/;"	m	struct:Texture2D	typeref:typename:int
height	$RAYLIB/raylib.h	/^    int height;             \/\/ Texture base height$/;"	m	struct:Texture	typeref:typename:int
hit	$RAYLIB/raylib.h	/^    bool hit;               \/\/ Did the ray hit something?$/;"	m	struct:RayCollision	typeref:typename:bool
image	$RAYLIB/raygui.h	/^        Image image;            \/\/ Character image data$/;"	m	struct:GlyphInfo	typeref:typename:Image
image	$RAYLIB/raylib.h	/^    Image image;            \/\/ Character image data$/;"	m	struct:GlyphInfo	typeref:typename:Image
indices	$RAYLIB/raylib.h	/^    unsigned short *indices;    \/\/ Vertex indices (in case vertex data comes indexed)$/;"	m	struct:Mesh	typeref:typename:unsigned short *
indices	$RAYLIB/rlgl.h	/^    unsigned short *indices;    \/\/ Vertex indices (in case vertex data comes indexed) (6 indic/;"	m	struct:rlVertexBuffer	typeref:typename:unsigned short *
instancing	$RAYLIB/rlgl.h	/^        bool instancing;                    \/\/ Instancing supported (GL_ANGLE_instanced_arrays/;"	m	struct:rlglData::__anon19a7bfac0e08	typeref:typename:bool
interpupillaryDistance	$RAYLIB/raylib.h	/^    float interpupillaryDistance;   \/\/ IPD (distance between pupils) in meters$/;"	m	struct:VrDeviceInfo	typeref:typename:float
layout	$RAYLIB/raylib.h	/^    int layout;             \/\/ Layout of the n-patch: 3x3, 1x3 or 3x1$/;"	m	struct:NPatchInfo	typeref:typename:int
left	$RAYLIB/raylib.h	/^    int left;               \/\/ Left border offset$/;"	m	struct:NPatchInfo	typeref:typename:int
leftLensCenter	$RAYLIB/raylib.h	/^    float leftLensCenter[2];        \/\/ VR left lens center$/;"	m	struct:VrStereoConfig	typeref:typename:float[2]
leftScreenCenter	$RAYLIB/raylib.h	/^    float leftScreenCenter[2];      \/\/ VR left screen center$/;"	m	struct:VrStereoConfig	typeref:typename:float[2]
lensDistortionValues	$RAYLIB/raylib.h	/^    float lensDistortionValues[4];  \/\/ Lens distortion constant parameters$/;"	m	struct:VrDeviceInfo	typeref:typename:float[4]
lensSeparationDistance	$RAYLIB/raylib.h	/^    float lensSeparationDistance;   \/\/ Lens separation distance in meters$/;"	m	struct:VrDeviceInfo	typeref:typename:float
locs	$RAYLIB/raylib.h	/^    int *locs;              \/\/ Shader locations array (RL_MAX_SHADER_LOCATIONS)$/;"	m	struct:Shader	typeref:typename:int *
looping	$RAYLIB/raylib.h	/^    bool looping;               \/\/ Music looping enable$/;"	m	struct:Music	typeref:typename:bool
m10	$RAYLIB/raylib.h	/^    float m2, m6, m10, m14; \/\/ Matrix third row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m10	$RAYLIB/raymath.h	/^    float m2, m6, m10, m14;     \/\/ Matrix third row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m10	$RAYLIB/rlgl.h	/^    float m2, m6, m10, m14;     \/\/ Matrix third row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m11	$RAYLIB/raylib.h	/^    float m3, m7, m11, m15; \/\/ Matrix fourth row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m11	$RAYLIB/raymath.h	/^    float m3, m7, m11, m15;     \/\/ Matrix fourth row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m11	$RAYLIB/rlgl.h	/^    float m3, m7, m11, m15;     \/\/ Matrix fourth row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m12	$RAYLIB/raylib.h	/^    float m0, m4, m8, m12;  \/\/ Matrix first row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m12	$RAYLIB/raymath.h	/^    float m0, m4, m8, m12;      \/\/ Matrix first row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m12	$RAYLIB/rlgl.h	/^    float m0, m4, m8, m12;      \/\/ Matrix first row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m13	$RAYLIB/raylib.h	/^    float m1, m5, m9, m13;  \/\/ Matrix second row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m13	$RAYLIB/raymath.h	/^    float m1, m5, m9, m13;      \/\/ Matrix second row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m13	$RAYLIB/rlgl.h	/^    float m1, m5, m9, m13;      \/\/ Matrix second row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m14	$RAYLIB/raylib.h	/^    float m2, m6, m10, m14; \/\/ Matrix third row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m14	$RAYLIB/raymath.h	/^    float m2, m6, m10, m14;     \/\/ Matrix third row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m14	$RAYLIB/rlgl.h	/^    float m2, m6, m10, m14;     \/\/ Matrix third row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m15	$RAYLIB/raylib.h	/^    float m3, m7, m11, m15; \/\/ Matrix fourth row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m15	$RAYLIB/raymath.h	/^    float m3, m7, m11, m15;     \/\/ Matrix fourth row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m15	$RAYLIB/rlgl.h	/^    float m3, m7, m11, m15;     \/\/ Matrix fourth row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
maps	$RAYLIB/raylib.h	/^    MaterialMap *maps;      \/\/ Material maps array (MAX_MATERIAL_MAPS)$/;"	m	struct:Material	typeref:typename:MaterialMap *
materialCount	$RAYLIB/raylib.h	/^    int materialCount;      \/\/ Number of materials$/;"	m	struct:Model	typeref:typename:int
materials	$RAYLIB/raylib.h	/^    Material *materials;    \/\/ Materials array$/;"	m	struct:Model	typeref:typename:Material *
max	$RAYLIB/raylib.h	/^    Vector3 max;            \/\/ Maximum vertex box-corner$/;"	m	struct:BoundingBox	typeref:typename:Vector3
maxAnisotropyLevel	$RAYLIB/rlgl.h	/^        float maxAnisotropyLevel;           \/\/ Maximum anisotropy level supported (minimum is /;"	m	struct:rlglData::__anon19a7bfac0e08	typeref:typename:float
maxDepthBits	$RAYLIB/rlgl.h	/^        int maxDepthBits;                   \/\/ Maximum bits for depth component$/;"	m	struct:rlglData::__anon19a7bfac0e08	typeref:typename:int
meshCount	$RAYLIB/raylib.h	/^    int meshCount;          \/\/ Number of meshes$/;"	m	struct:Model	typeref:typename:int
meshMaterial	$RAYLIB/raylib.h	/^    int *meshMaterial;      \/\/ Mesh material number$/;"	m	struct:Model	typeref:typename:int *
meshes	$RAYLIB/raylib.h	/^    Mesh *meshes;           \/\/ Meshes array$/;"	m	struct:Model	typeref:typename:Mesh *
min	$RAYLIB/raylib.h	/^    Vector3 min;            \/\/ Minimum vertex box-corner$/;"	m	struct:BoundingBox	typeref:typename:Vector3
mipmaps	$RAYLIB/raygui.h	/^        int mipmaps;            \/\/ Mipmap levels, 1 by default$/;"	m	struct:Texture2D	typeref:typename:int
mipmaps	$RAYLIB/raylib.h	/^    int mipmaps;            \/\/ Mipmap levels, 1 by default$/;"	m	struct:Texture	typeref:typename:int
mode	$RAYLIB/rlgl.h	/^    int mode;                   \/\/ Drawing mode: LINES, TRIANGLES, QUADS$/;"	m	struct:rlDrawCall	typeref:typename:int
modelview	$RAYLIB/rlgl.h	/^        Matrix modelview;                   \/\/ Default modelview matrix$/;"	m	struct:rlglData::__anon19a7bfac0d08	typeref:typename:Matrix
name	$RAYLIB/raylib.h	/^    char name[32];          \/\/ Bone name$/;"	m	struct:BoneInfo	typeref:typename:char[32]
normal	$RAYLIB/raylib.h	/^    Vector3 normal;         \/\/ Surface normal of hit$/;"	m	struct:RayCollision	typeref:typename:Vector3
normals	$RAYLIB/raylib.h	/^    float *normals;         \/\/ Vertex normals (XYZ - 3 components per vertex) (shader-location/;"	m	struct:Mesh	typeref:typename:float *
normals	$RAYLIB/rlgl.h	/^    float *normals;             \/\/ Vertex normal (XYZ - 3 components per vertex) (shader-locat/;"	m	struct:rlVertexBuffer	typeref:typename:float *
normalx	$RAYLIB/rlgl.h	/^        float normalx, normaly, normalz;    \/\/ Current active normal (added on glVertex*())$/;"	m	struct:rlglData::__anon19a7bfac0d08	typeref:typename:float
normaly	$RAYLIB/rlgl.h	/^        float normalx, normaly, normalz;    \/\/ Current active normal (added on glVertex*())$/;"	m	struct:rlglData::__anon19a7bfac0d08	typeref:typename:float
normalz	$RAYLIB/rlgl.h	/^        float normalx, normaly, normalz;    \/\/ Current active normal (added on glVertex*())$/;"	m	struct:rlglData::__anon19a7bfac0d08	typeref:typename:float
offset	$RAYLIB/raylib.h	/^    Vector2 offset;         \/\/ Camera offset (displacement from target)$/;"	m	struct:Camera2D	typeref:typename:Vector2
offsetX	$RAYLIB/raygui.h	/^        int offsetX;            \/\/ Character offset X when drawing$/;"	m	struct:GlyphInfo	typeref:typename:int
offsetX	$RAYLIB/raylib.h	/^    int offsetX;            \/\/ Character offset X when drawing$/;"	m	struct:GlyphInfo	typeref:typename:int
offsetY	$RAYLIB/raygui.h	/^        int offsetY;            \/\/ Character offset Y when drawing$/;"	m	struct:GlyphInfo	typeref:typename:int
offsetY	$RAYLIB/raylib.h	/^    int offsetY;            \/\/ Character offset Y when drawing$/;"	m	struct:GlyphInfo	typeref:typename:int
params	$RAYLIB/raylib.h	/^    int params[4];                  \/\/ Event parameters (if required)$/;"	m	struct:AutomationEvent	typeref:typename:int[4]
parent	$RAYLIB/raylib.h	/^    int parent;             \/\/ Bone parent$/;"	m	struct:BoneInfo	typeref:typename:int
paths	$RAYLIB/raylib.h	/^    char **paths;                   \/\/ Filepaths entries$/;"	m	struct:FilePathList	typeref:typename:char **
point	$RAYLIB/raylib.h	/^    Vector3 point;          \/\/ Point of the nearest hit$/;"	m	struct:RayCollision	typeref:typename:Vector3
position	$RAYLIB/raylib.h	/^    Vector3 position;       \/\/ Ray position (origin)$/;"	m	struct:Ray	typeref:typename:Vector3
processor	$RAYLIB/raylib.h	/^    rAudioProcessor *processor; \/\/ Pointer to internal data processor, useful for audio effect/;"	m	struct:AudioStream	typeref:typename:rAudioProcessor *
projection	$RAYLIB/raylib.h	/^    int projection;         \/\/ Camera projection: CAMERA_PERSPECTIVE or CAMERA_ORTHOGRAPHIC$/;"	m	struct:Camera3D	typeref:typename:int
projection	$RAYLIB/rlgl.h	/^        Matrix projection;                  \/\/ Default projection matrix$/;"	m	struct:rlglData::__anon19a7bfac0d08	typeref:typename:Matrix
projectionStereo	$RAYLIB/rlgl.h	/^        Matrix projectionStereo[2];         \/\/ VR stereo rendering eyes projection matrices$/;"	m	struct:rlglData::__anon19a7bfac0d08	typeref:typename:Matrix[2]
propertyId	$RAYLIB/raygui.h	/^    unsigned short propertyId;  \/\/ Property identifier$/;"	m	struct:GuiStyleProp	typeref:typename:unsigned short
propertyValue	$RAYLIB/raygui.h	/^    int propertyValue;          \/\/ Property value$/;"	m	struct:GuiStyleProp	typeref:typename:int
rAudioBuffer	$RAYLIB/raylib.h	/^typedef struct rAudioBuffer rAudioBuffer;$/;"	t	typeref:struct:rAudioBuffer
rAudioProcessor	$RAYLIB/raylib.h	/^typedef struct rAudioProcessor rAudioProcessor;$/;"	t	typeref:struct:rAudioProcessor
recs	$RAYLIB/raygui.h	/^        Rectangle *recs;        \/\/ Rectangles in texture for the glyphs$/;"	m	struct:Font	typeref:typename:Rectangle *
recs	$RAYLIB/raylib.h	/^    Rectangle *recs;        \/\/ Rectangles in texture for the glyphs$/;"	m	struct:Font	typeref:typename:Rectangle *
right	$RAYLIB/raylib.h	/^    int right;              \/\/ Right border offset$/;"	m	struct:NPatchInfo	typeref:typename:int
rightLensCenter	$RAYLIB/raylib.h	/^    float rightLensCenter[2];       \/\/ VR right lens center$/;"	m	struct:VrStereoConfig	typeref:typename:float[2]
rightScreenCenter	$RAYLIB/raylib.h	/^    float rightScreenCenter[2];     \/\/ VR right screen center$/;"	m	struct:VrStereoConfig	typeref:typename:float[2]
rlActiveDrawBuffers	$RAYLIB/rlgl.h	/^void rlActiveDrawBuffers(int count)$/;"	f	typeref:typename:void	signature:(int count)
rlActiveTextureSlot	$RAYLIB/rlgl.h	/^void rlActiveTextureSlot(int slot)$/;"	f	typeref:typename:void	signature:(int slot)
rlBegin	$RAYLIB/rlgl.h	/^void rlBegin(int mode)$/;"	f	typeref:typename:void	signature:(int mode)
rlBindFramebuffer	$RAYLIB/rlgl.h	/^void rlBindFramebuffer(unsigned int target, unsigned int framebuffer)$/;"	f	typeref:typename:void	signature:(unsigned int target,unsigned int framebuffer)
rlBindImageTexture	$RAYLIB/rlgl.h	/^void rlBindImageTexture(unsigned int id, unsigned int index, int format, bool readonly)$/;"	f	typeref:typename:void	signature:(unsigned int id,unsigned int index,int format,bool readonly)
rlBindShaderBuffer	$RAYLIB/rlgl.h	/^void rlBindShaderBuffer(unsigned int id, unsigned int index)$/;"	f	typeref:typename:void	signature:(unsigned int id,unsigned int index)
rlBlendMode	$RAYLIB/rlgl.h	/^} rlBlendMode;$/;"	t	typeref:enum:__anon19a7bfac0603
rlBlitFramebuffer	$RAYLIB/rlgl.h	/^void rlBlitFramebuffer(int srcX, int srcY, int srcWidth, int srcHeight, int dstX, int dstY, int /;"	f	typeref:typename:void	signature:(int srcX,int srcY,int srcWidth,int srcHeight,int dstX,int dstY,int dstWidth,int dstHeight,int bufferMask)
rlCheckErrors	$RAYLIB/rlgl.h	/^void rlCheckErrors()$/;"	f	typeref:typename:void	signature:()
rlCheckRenderBatchLimit	$RAYLIB/rlgl.h	/^bool rlCheckRenderBatchLimit(int vCount)$/;"	f	typeref:typename:bool	signature:(int vCount)
rlClearColor	$RAYLIB/rlgl.h	/^void rlClearColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a)$/;"	f	typeref:typename:void	signature:(unsigned char r,unsigned char g,unsigned char b,unsigned char a)
rlClearScreenBuffers	$RAYLIB/rlgl.h	/^void rlClearScreenBuffers(void)$/;"	f	typeref:typename:void	signature:(void)
rlColor3f	$RAYLIB/rlgl.h	/^void rlColor3f(float x, float y, float z)$/;"	f	typeref:typename:void	signature:(float x,float y,float z)
rlColor4f	$RAYLIB/rlgl.h	/^void rlColor4f(float x, float y, float z, float w) { glColor4f(x, y, z, w); }$/;"	f	typeref:typename:void	signature:(float x,float y,float z,float w)
rlColor4ub	$RAYLIB/rlgl.h	/^void rlColor4ub(unsigned char x, unsigned char y, unsigned char z, unsigned char w)$/;"	f	typeref:typename:void	signature:(unsigned char x,unsigned char y,unsigned char z,unsigned char w)
rlColorMask	$RAYLIB/rlgl.h	/^void rlColorMask(bool r, bool g, bool b, bool a) { glColorMask(r, g, b, a); }$/;"	f	typeref:typename:void	signature:(bool r,bool g,bool b,bool a)
rlCompileShader	$RAYLIB/rlgl.h	/^unsigned int rlCompileShader(const char *shaderCode, int type)$/;"	f	typeref:typename:unsigned int	signature:(const char * shaderCode,int type)
rlComputeShaderDispatch	$RAYLIB/rlgl.h	/^void rlComputeShaderDispatch(unsigned int groupX, unsigned int groupY, unsigned int groupZ)$/;"	f	typeref:typename:void	signature:(unsigned int groupX,unsigned int groupY,unsigned int groupZ)
rlCopyShaderBuffer	$RAYLIB/rlgl.h	/^void rlCopyShaderBuffer(unsigned int destId, unsigned int srcId, unsigned int destOffset, unsign/;"	f	typeref:typename:void	signature:(unsigned int destId,unsigned int srcId,unsigned int destOffset,unsigned int srcOffset,unsigned int count)
rlCubemapParameters	$RAYLIB/rlgl.h	/^void rlCubemapParameters(unsigned int id, int param, int value)$/;"	f	typeref:typename:void	signature:(unsigned int id,int param,int value)
rlCullDistanceFar	$RAYLIB/rlgl.h	/^static double rlCullDistanceFar = RL_CULL_DISTANCE_FAR;$/;"	v	typeref:typename:double
rlCullDistanceNear	$RAYLIB/rlgl.h	/^static double rlCullDistanceNear = RL_CULL_DISTANCE_NEAR;$/;"	v	typeref:typename:double
rlCullMode	$RAYLIB/rlgl.h	/^} rlCullMode;$/;"	t	typeref:enum:__anon19a7bfac0c03
rlDebugMessageCallback	$RAYLIB/rlgl.h	/^static void GLAPIENTRY rlDebugMessageCallback(GLenum source, GLenum type, GLuint id, GLenum seve/;"	f	typeref:typename:void GLAPIENTRY	signature:(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar * message,const void * userParam)
rlDisableBackfaceCulling	$RAYLIB/rlgl.h	/^void rlDisableBackfaceCulling(void) { glDisable(GL_CULL_FACE); }$/;"	f	typeref:typename:void	signature:(void)
rlDisableColorBlend	$RAYLIB/rlgl.h	/^void rlDisableColorBlend(void) { glDisable(GL_BLEND); }$/;"	f	typeref:typename:void	signature:(void)
rlDisableDepthMask	$RAYLIB/rlgl.h	/^void rlDisableDepthMask(void) { glDepthMask(GL_FALSE); }$/;"	f	typeref:typename:void	signature:(void)
rlDisableDepthTest	$RAYLIB/rlgl.h	/^void rlDisableDepthTest(void) { glDisable(GL_DEPTH_TEST); }$/;"	f	typeref:typename:void	signature:(void)
rlDisableFramebuffer	$RAYLIB/rlgl.h	/^void rlDisableFramebuffer(void)$/;"	f	typeref:typename:void	signature:(void)
rlDisableScissorTest	$RAYLIB/rlgl.h	/^void rlDisableScissorTest(void) { glDisable(GL_SCISSOR_TEST); }$/;"	f	typeref:typename:void	signature:(void)
rlDisableShader	$RAYLIB/rlgl.h	/^void rlDisableShader(void)$/;"	f	typeref:typename:void	signature:(void)
rlDisableSmoothLines	$RAYLIB/rlgl.h	/^void rlDisableSmoothLines(void)$/;"	f	typeref:typename:void	signature:(void)
rlDisableStatePointer	$RAYLIB/rlgl.h	/^void rlDisableStatePointer(int vertexAttribType)$/;"	f	typeref:typename:void	signature:(int vertexAttribType)
rlDisableStereoRender	$RAYLIB/rlgl.h	/^void rlDisableStereoRender(void)$/;"	f	typeref:typename:void	signature:(void)
rlDisableTexture	$RAYLIB/rlgl.h	/^void rlDisableTexture(void)$/;"	f	typeref:typename:void	signature:(void)
rlDisableTextureCubemap	$RAYLIB/rlgl.h	/^void rlDisableTextureCubemap(void)$/;"	f	typeref:typename:void	signature:(void)
rlDisableVertexArray	$RAYLIB/rlgl.h	/^void rlDisableVertexArray(void)$/;"	f	typeref:typename:void	signature:(void)
rlDisableVertexAttribute	$RAYLIB/rlgl.h	/^void rlDisableVertexAttribute(unsigned int index)$/;"	f	typeref:typename:void	signature:(unsigned int index)
rlDisableVertexBuffer	$RAYLIB/rlgl.h	/^void rlDisableVertexBuffer(void)$/;"	f	typeref:typename:void	signature:(void)
rlDisableVertexBufferElement	$RAYLIB/rlgl.h	/^void rlDisableVertexBufferElement(void)$/;"	f	typeref:typename:void	signature:(void)
rlDisableWireMode	$RAYLIB/rlgl.h	/^void rlDisableWireMode(void)$/;"	f	typeref:typename:void	signature:(void)
rlDrawCall	$RAYLIB/rlgl.h	/^} rlDrawCall;$/;"	t	typeref:struct:rlDrawCall
rlDrawRenderBatch	$RAYLIB/rlgl.h	/^void rlDrawRenderBatch(rlRenderBatch *batch)$/;"	f	typeref:typename:void	signature:(rlRenderBatch * batch)
rlDrawRenderBatchActive	$RAYLIB/rlgl.h	/^void rlDrawRenderBatchActive(void)$/;"	f	typeref:typename:void	signature:(void)
rlDrawVertexArray	$RAYLIB/rlgl.h	/^void rlDrawVertexArray(int offset, int count)$/;"	f	typeref:typename:void	signature:(int offset,int count)
rlDrawVertexArrayElements	$RAYLIB/rlgl.h	/^void rlDrawVertexArrayElements(int offset, int count, const void *buffer)$/;"	f	typeref:typename:void	signature:(int offset,int count,const void * buffer)
rlDrawVertexArrayElementsInstanced	$RAYLIB/rlgl.h	/^void rlDrawVertexArrayElementsInstanced(int offset, int count, const void *buffer, int instances/;"	f	typeref:typename:void	signature:(int offset,int count,const void * buffer,int instances)
rlDrawVertexArrayInstanced	$RAYLIB/rlgl.h	/^void rlDrawVertexArrayInstanced(int offset, int count, int instances)$/;"	f	typeref:typename:void	signature:(int offset,int count,int instances)
rlEnableBackfaceCulling	$RAYLIB/rlgl.h	/^void rlEnableBackfaceCulling(void) { glEnable(GL_CULL_FACE); }$/;"	f	typeref:typename:void	signature:(void)
rlEnableColorBlend	$RAYLIB/rlgl.h	/^void rlEnableColorBlend(void) { glEnable(GL_BLEND); }$/;"	f	typeref:typename:void	signature:(void)
rlEnableDepthMask	$RAYLIB/rlgl.h	/^void rlEnableDepthMask(void) { glDepthMask(GL_TRUE); }$/;"	f	typeref:typename:void	signature:(void)
rlEnableDepthTest	$RAYLIB/rlgl.h	/^void rlEnableDepthTest(void) { glEnable(GL_DEPTH_TEST); }$/;"	f	typeref:typename:void	signature:(void)
rlEnableFramebuffer	$RAYLIB/rlgl.h	/^void rlEnableFramebuffer(unsigned int id)$/;"	f	typeref:typename:void	signature:(unsigned int id)
rlEnablePointMode	$RAYLIB/rlgl.h	/^void rlEnablePointMode(void)$/;"	f	typeref:typename:void	signature:(void)
rlEnableScissorTest	$RAYLIB/rlgl.h	/^void rlEnableScissorTest(void) { glEnable(GL_SCISSOR_TEST); }$/;"	f	typeref:typename:void	signature:(void)
rlEnableShader	$RAYLIB/rlgl.h	/^void rlEnableShader(unsigned int id)$/;"	f	typeref:typename:void	signature:(unsigned int id)
rlEnableSmoothLines	$RAYLIB/rlgl.h	/^void rlEnableSmoothLines(void)$/;"	f	typeref:typename:void	signature:(void)
rlEnableStatePointer	$RAYLIB/rlgl.h	/^void rlEnableStatePointer(int vertexAttribType, void *buffer)$/;"	f	typeref:typename:void	signature:(int vertexAttribType,void * buffer)
rlEnableStereoRender	$RAYLIB/rlgl.h	/^void rlEnableStereoRender(void)$/;"	f	typeref:typename:void	signature:(void)
rlEnableTexture	$RAYLIB/rlgl.h	/^void rlEnableTexture(unsigned int id)$/;"	f	typeref:typename:void	signature:(unsigned int id)
rlEnableTextureCubemap	$RAYLIB/rlgl.h	/^void rlEnableTextureCubemap(unsigned int id)$/;"	f	typeref:typename:void	signature:(unsigned int id)
rlEnableVertexArray	$RAYLIB/rlgl.h	/^bool rlEnableVertexArray(unsigned int vaoId)$/;"	f	typeref:typename:bool	signature:(unsigned int vaoId)
rlEnableVertexAttribute	$RAYLIB/rlgl.h	/^void rlEnableVertexAttribute(unsigned int index)$/;"	f	typeref:typename:void	signature:(unsigned int index)
rlEnableVertexBuffer	$RAYLIB/rlgl.h	/^void rlEnableVertexBuffer(unsigned int id)$/;"	f	typeref:typename:void	signature:(unsigned int id)
rlEnableVertexBufferElement	$RAYLIB/rlgl.h	/^void rlEnableVertexBufferElement(unsigned int id)$/;"	f	typeref:typename:void	signature:(unsigned int id)
rlEnableWireMode	$RAYLIB/rlgl.h	/^void rlEnableWireMode(void)$/;"	f	typeref:typename:void	signature:(void)
rlEnd	$RAYLIB/rlgl.h	/^void rlEnd(void)$/;"	f	typeref:typename:void	signature:(void)
rlFramebufferAttach	$RAYLIB/rlgl.h	/^void rlFramebufferAttach(unsigned int fboId, unsigned int texId, int attachType, int texType, in/;"	f	typeref:typename:void	signature:(unsigned int fboId,unsigned int texId,int attachType,int texType,int mipLevel)
rlFramebufferAttachTextureType	$RAYLIB/rlgl.h	/^} rlFramebufferAttachTextureType;$/;"	t	typeref:enum:__anon19a7bfac0b03
rlFramebufferAttachType	$RAYLIB/rlgl.h	/^} rlFramebufferAttachType;$/;"	t	typeref:enum:__anon19a7bfac0a03
rlFramebufferComplete	$RAYLIB/rlgl.h	/^bool rlFramebufferComplete(unsigned int id)$/;"	f	typeref:typename:bool	signature:(unsigned int id)
rlFrustum	$RAYLIB/rlgl.h	/^void rlFrustum(double left, double right, double bottom, double top, double znear, double zfar)$/;"	f	typeref:typename:void	signature:(double left,double right,double bottom,double top,double znear,double zfar)
rlGenTextureMipmaps	$RAYLIB/rlgl.h	/^void rlGenTextureMipmaps(unsigned int id, int width, int height, int format, int *mipmaps)$/;"	f	typeref:typename:void	signature:(unsigned int id,int width,int height,int format,int * mipmaps)
rlGetActiveFramebuffer	$RAYLIB/rlgl.h	/^unsigned int rlGetActiveFramebuffer(void)$/;"	f	typeref:typename:unsigned int	signature:(void)
rlGetCompressedFormatName	$RAYLIB/rlgl.h	/^static const char *rlGetCompressedFormatName(int format); \/\/ Get compressed format official GL/;"	p	typeref:typename:const char *	signature:(int format)
rlGetCullDistanceFar	$RAYLIB/rlgl.h	/^double rlGetCullDistanceFar(void)$/;"	f	typeref:typename:double	signature:(void)
rlGetCullDistanceNear	$RAYLIB/rlgl.h	/^double rlGetCullDistanceNear(void)$/;"	f	typeref:typename:double	signature:(void)
rlGetFramebufferHeight	$RAYLIB/rlgl.h	/^int rlGetFramebufferHeight(void)$/;"	f	typeref:typename:int	signature:(void)
rlGetFramebufferWidth	$RAYLIB/rlgl.h	/^int rlGetFramebufferWidth(void)$/;"	f	typeref:typename:int	signature:(void)
rlGetGlTextureFormats	$RAYLIB/rlgl.h	/^void rlGetGlTextureFormats(int format, unsigned int *glInternalFormat, unsigned int *glFormat, u/;"	f	typeref:typename:void	signature:(int format,unsigned int * glInternalFormat,unsigned int * glFormat,unsigned int * glType)
rlGetLineWidth	$RAYLIB/rlgl.h	/^float rlGetLineWidth(void)$/;"	f	typeref:typename:float	signature:(void)
rlGetLocationAttrib	$RAYLIB/rlgl.h	/^int rlGetLocationAttrib(unsigned int shaderId, const char *attribName)$/;"	f	typeref:typename:int	signature:(unsigned int shaderId,const char * attribName)
rlGetLocationUniform	$RAYLIB/rlgl.h	/^int rlGetLocationUniform(unsigned int shaderId, const char *uniformName)$/;"	f	typeref:typename:int	signature:(unsigned int shaderId,const char * uniformName)
rlGetMatrixModelview	$RAYLIB/rlgl.h	/^RLAPI Matrix rlGetMatrixModelview(void);                                  \/\/ Get internal mode/;"	p	typeref:typename:RLAPI Matrix	signature:(void)
rlGetMatrixProjection	$RAYLIB/rlgl.h	/^RLAPI Matrix rlGetMatrixProjection(void);                                 \/\/ Get internal proj/;"	p	typeref:typename:RLAPI Matrix	signature:(void)
rlGetMatrixProjectionStereo	$RAYLIB/rlgl.h	/^RLAPI Matrix rlGetMatrixProjectionStereo(int eye);                        \/\/ Get internal proj/;"	p	typeref:typename:RLAPI Matrix	signature:(int eye)
rlGetMatrixTransform	$RAYLIB/rlgl.h	/^RLAPI Matrix rlGetMatrixTransform(void);                                  \/\/ Get internal accu/;"	p	typeref:typename:RLAPI Matrix	signature:(void)
rlGetMatrixViewOffsetStereo	$RAYLIB/rlgl.h	/^RLAPI Matrix rlGetMatrixViewOffsetStereo(int eye);                        \/\/ Get internal view/;"	p	typeref:typename:RLAPI Matrix	signature:(int eye)
rlGetPixelDataSize	$RAYLIB/rlgl.h	/^static int rlGetPixelDataSize(int width, int height, int format);   \/\/ Get pixel data size in /;"	p	typeref:typename:int	signature:(int width,int height,int format)
rlGetPixelFormatName	$RAYLIB/rlgl.h	/^const char *rlGetPixelFormatName(unsigned int format)$/;"	f	typeref:typename:const char *	signature:(unsigned int format)
rlGetShaderBufferSize	$RAYLIB/rlgl.h	/^unsigned int rlGetShaderBufferSize(unsigned int id)$/;"	f	typeref:typename:unsigned int	signature:(unsigned int id)
rlGetShaderIdDefault	$RAYLIB/rlgl.h	/^unsigned int rlGetShaderIdDefault(void)$/;"	f	typeref:typename:unsigned int	signature:(void)
rlGetShaderLocsDefault	$RAYLIB/rlgl.h	/^int *rlGetShaderLocsDefault(void)$/;"	f	typeref:typename:int *	signature:(void)
rlGetTextureIdDefault	$RAYLIB/rlgl.h	/^unsigned int rlGetTextureIdDefault(void)$/;"	f	typeref:typename:unsigned int	signature:(void)
rlGetVersion	$RAYLIB/rlgl.h	/^int rlGetVersion(void)$/;"	f	typeref:typename:int	signature:(void)
rlGlVersion	$RAYLIB/rlgl.h	/^} rlGlVersion;$/;"	t	typeref:enum:__anon19a7bfac0203
rlIsStereoRenderEnabled	$RAYLIB/rlgl.h	/^bool rlIsStereoRenderEnabled(void)$/;"	f	typeref:typename:bool	signature:(void)
rlLoadComputeShaderProgram	$RAYLIB/rlgl.h	/^unsigned int rlLoadComputeShaderProgram(unsigned int shaderId)$/;"	f	typeref:typename:unsigned int	signature:(unsigned int shaderId)
rlLoadDrawCube	$RAYLIB/rlgl.h	/^void rlLoadDrawCube(void)$/;"	f	typeref:typename:void	signature:(void)
rlLoadDrawQuad	$RAYLIB/rlgl.h	/^void rlLoadDrawQuad(void)$/;"	f	typeref:typename:void	signature:(void)
rlLoadExtensions	$RAYLIB/rlgl.h	/^void rlLoadExtensions(void *loader)$/;"	f	typeref:typename:void	signature:(void * loader)
rlLoadFramebuffer	$RAYLIB/rlgl.h	/^unsigned int rlLoadFramebuffer(void)$/;"	f	typeref:typename:unsigned int	signature:(void)
rlLoadIdentity	$RAYLIB/rlgl.h	/^void rlLoadIdentity(void)$/;"	f	typeref:typename:void	signature:(void)
rlLoadRenderBatch	$RAYLIB/rlgl.h	/^rlRenderBatch rlLoadRenderBatch(int numBuffers, int bufferElements)$/;"	f	typeref:typename:rlRenderBatch	signature:(int numBuffers,int bufferElements)
rlLoadShaderBuffer	$RAYLIB/rlgl.h	/^unsigned int rlLoadShaderBuffer(unsigned int size, const void *data, int usageHint)$/;"	f	typeref:typename:unsigned int	signature:(unsigned int size,const void * data,int usageHint)
rlLoadShaderCode	$RAYLIB/rlgl.h	/^unsigned int rlLoadShaderCode(const char *vsCode, const char *fsCode)$/;"	f	typeref:typename:unsigned int	signature:(const char * vsCode,const char * fsCode)
rlLoadShaderDefault	$RAYLIB/rlgl.h	/^static void rlLoadShaderDefault(void);      \/\/ Load default shader$/;"	p	typeref:typename:void	signature:(void)
rlLoadShaderProgram	$RAYLIB/rlgl.h	/^unsigned int rlLoadShaderProgram(unsigned int vShaderId, unsigned int fShaderId)$/;"	f	typeref:typename:unsigned int	signature:(unsigned int vShaderId,unsigned int fShaderId)
rlLoadTexture	$RAYLIB/rlgl.h	/^unsigned int rlLoadTexture(const void *data, int width, int height, int format, int mipmapCount)$/;"	f	typeref:typename:unsigned int	signature:(const void * data,int width,int height,int format,int mipmapCount)
rlLoadTextureCubemap	$RAYLIB/rlgl.h	/^unsigned int rlLoadTextureCubemap(const void *data, int size, int format)$/;"	f	typeref:typename:unsigned int	signature:(const void * data,int size,int format)
rlLoadTextureDepth	$RAYLIB/rlgl.h	/^unsigned int rlLoadTextureDepth(int width, int height, bool useRenderBuffer)$/;"	f	typeref:typename:unsigned int	signature:(int width,int height,bool useRenderBuffer)
rlLoadVertexArray	$RAYLIB/rlgl.h	/^unsigned int rlLoadVertexArray(void)$/;"	f	typeref:typename:unsigned int	signature:(void)
rlLoadVertexBuffer	$RAYLIB/rlgl.h	/^unsigned int rlLoadVertexBuffer(const void *buffer, int size, bool dynamic)$/;"	f	typeref:typename:unsigned int	signature:(const void * buffer,int size,bool dynamic)
rlLoadVertexBufferElement	$RAYLIB/rlgl.h	/^unsigned int rlLoadVertexBufferElement(const void *buffer, int size, bool dynamic)$/;"	f	typeref:typename:unsigned int	signature:(const void * buffer,int size,bool dynamic)
rlMatrixIdentity	$RAYLIB/rlgl.h	/^static Matrix rlMatrixIdentity(void);                       \/\/ Get identity matrix$/;"	p	typeref:typename:Matrix	signature:(void)
rlMatrixInvert	$RAYLIB/rlgl.h	/^static Matrix rlMatrixInvert(Matrix mat);                   \/\/ Invert provided matrix$/;"	p	typeref:typename:Matrix	signature:(Matrix mat)
rlMatrixMode	$RAYLIB/rlgl.h	/^void rlMatrixMode(int mode)$/;"	f	typeref:typename:void	signature:(int mode)
rlMatrixMultiply	$RAYLIB/rlgl.h	/^static Matrix rlMatrixMultiply(Matrix left, Matrix right);  \/\/ Multiply two matrices$/;"	p	typeref:typename:Matrix	signature:(Matrix left,Matrix right)
rlMatrixToFloat	$RAYLIB/rlgl.h	/^#define rlMatrixToFloat(mat) (rlMatrixToFloatV/;"	d	signature:(mat)
rlMatrixToFloatV	$RAYLIB/rlgl.h	/^static rl_float16 rlMatrixToFloatV(Matrix mat);             \/\/ Get float array of matrix data$/;"	p	typeref:typename:rl_float16	signature:(Matrix mat)
rlMatrixTranspose	$RAYLIB/rlgl.h	/^static Matrix rlMatrixTranspose(Matrix mat);                \/\/ Transposes provided matrix$/;"	p	typeref:typename:Matrix	signature:(Matrix mat)
rlMultMatrixf	$RAYLIB/rlgl.h	/^void rlMultMatrixf(const float *matf)$/;"	f	typeref:typename:void	signature:(const float * matf)
rlNormal3f	$RAYLIB/rlgl.h	/^void rlNormal3f(float x, float y, float z)$/;"	f	typeref:typename:void	signature:(float x,float y,float z)
rlOrtho	$RAYLIB/rlgl.h	/^void rlOrtho(double left, double right, double bottom, double top, double znear, double zfar)$/;"	f	typeref:typename:void	signature:(double left,double right,double bottom,double top,double znear,double zfar)
rlPixelFormat	$RAYLIB/rlgl.h	/^} rlPixelFormat;$/;"	t	typeref:enum:__anon19a7bfac0403
rlPopMatrix	$RAYLIB/rlgl.h	/^void rlPopMatrix(void)$/;"	f	typeref:typename:void	signature:(void)
rlPushMatrix	$RAYLIB/rlgl.h	/^void rlPushMatrix(void)$/;"	f	typeref:typename:void	signature:(void)
rlReadScreenPixels	$RAYLIB/rlgl.h	/^unsigned char *rlReadScreenPixels(int width, int height)$/;"	f	typeref:typename:unsigned char *	signature:(int width,int height)
rlReadShaderBuffer	$RAYLIB/rlgl.h	/^void rlReadShaderBuffer(unsigned int id, void *dest, unsigned int count, unsigned int offset)$/;"	f	typeref:typename:void	signature:(unsigned int id,void * dest,unsigned int count,unsigned int offset)
rlReadTexturePixels	$RAYLIB/rlgl.h	/^void *rlReadTexturePixels(unsigned int id, int width, int height, int format)$/;"	f	typeref:typename:void *	signature:(unsigned int id,int width,int height,int format)
rlRenderBatch	$RAYLIB/rlgl.h	/^} rlRenderBatch;$/;"	t	typeref:struct:rlRenderBatch
rlRotatef	$RAYLIB/rlgl.h	/^void rlRotatef(float angle, float x, float y, float z)$/;"	f	typeref:typename:void	signature:(float angle,float x,float y,float z)
rlScalef	$RAYLIB/rlgl.h	/^void rlScalef(float x, float y, float z)$/;"	f	typeref:typename:void	signature:(float x,float y,float z)
rlScissor	$RAYLIB/rlgl.h	/^void rlScissor(int x, int y, int width, int height) { glScissor(x, y, width, height); }$/;"	f	typeref:typename:void	signature:(int x,int y,int width,int height)
rlSetBlendFactors	$RAYLIB/rlgl.h	/^void rlSetBlendFactors(int glSrcFactor, int glDstFactor, int glEquation)$/;"	f	typeref:typename:void	signature:(int glSrcFactor,int glDstFactor,int glEquation)
rlSetBlendFactorsSeparate	$RAYLIB/rlgl.h	/^void rlSetBlendFactorsSeparate(int glSrcRGB, int glDstRGB, int glSrcAlpha, int glDstAlpha, int g/;"	f	typeref:typename:void	signature:(int glSrcRGB,int glDstRGB,int glSrcAlpha,int glDstAlpha,int glEqRGB,int glEqAlpha)
rlSetBlendMode	$RAYLIB/rlgl.h	/^void rlSetBlendMode(int mode)$/;"	f	typeref:typename:void	signature:(int mode)
rlSetClipPlanes	$RAYLIB/rlgl.h	/^void rlSetClipPlanes(double near, double far)$/;"	f	typeref:typename:void	signature:(double near,double far)
rlSetCullFace	$RAYLIB/rlgl.h	/^void rlSetCullFace(int mode)$/;"	f	typeref:typename:void	signature:(int mode)
rlSetFramebufferHeight	$RAYLIB/rlgl.h	/^void rlSetFramebufferHeight(int height)$/;"	f	typeref:typename:void	signature:(int height)
rlSetFramebufferWidth	$RAYLIB/rlgl.h	/^void rlSetFramebufferWidth(int width)$/;"	f	typeref:typename:void	signature:(int width)
rlSetLineWidth	$RAYLIB/rlgl.h	/^void rlSetLineWidth(float width) { glLineWidth(width); }$/;"	f	typeref:typename:void	signature:(float width)
rlSetMatrixModelview	$RAYLIB/rlgl.h	/^void rlSetMatrixModelview(Matrix view)$/;"	f	typeref:typename:void	signature:(Matrix view)
rlSetMatrixProjection	$RAYLIB/rlgl.h	/^void rlSetMatrixProjection(Matrix projection)$/;"	f	typeref:typename:void	signature:(Matrix projection)
rlSetMatrixProjectionStereo	$RAYLIB/rlgl.h	/^void rlSetMatrixProjectionStereo(Matrix right, Matrix left)$/;"	f	typeref:typename:void	signature:(Matrix right,Matrix left)
rlSetMatrixViewOffsetStereo	$RAYLIB/rlgl.h	/^void rlSetMatrixViewOffsetStereo(Matrix right, Matrix left)$/;"	f	typeref:typename:void	signature:(Matrix right,Matrix left)
rlSetRenderBatchActive	$RAYLIB/rlgl.h	/^void rlSetRenderBatchActive(rlRenderBatch *batch)$/;"	f	typeref:typename:void	signature:(rlRenderBatch * batch)
rlSetShader	$RAYLIB/rlgl.h	/^void rlSetShader(unsigned int id, int *locs)$/;"	f	typeref:typename:void	signature:(unsigned int id,int * locs)
rlSetTexture	$RAYLIB/rlgl.h	/^void rlSetTexture(unsigned int id)$/;"	f	typeref:typename:void	signature:(unsigned int id)
rlSetUniform	$RAYLIB/rlgl.h	/^void rlSetUniform(int locIndex, const void *value, int uniformType, int count)$/;"	f	typeref:typename:void	signature:(int locIndex,const void * value,int uniformType,int count)
rlSetUniformMatrix	$RAYLIB/rlgl.h	/^void rlSetUniformMatrix(int locIndex, Matrix mat)$/;"	f	typeref:typename:void	signature:(int locIndex,Matrix mat)
rlSetUniformSampler	$RAYLIB/rlgl.h	/^void rlSetUniformSampler(int locIndex, unsigned int textureId)$/;"	f	typeref:typename:void	signature:(int locIndex,unsigned int textureId)
rlSetVertexAttribute	$RAYLIB/rlgl.h	/^void rlSetVertexAttribute(unsigned int index, int compSize, int type, bool normalized, int strid/;"	f	typeref:typename:void	signature:(unsigned int index,int compSize,int type,bool normalized,int stride,int offset)
rlSetVertexAttributeDefault	$RAYLIB/rlgl.h	/^void rlSetVertexAttributeDefault(int locIndex, const void *value, int attribType, int count)$/;"	f	typeref:typename:void	signature:(int locIndex,const void * value,int attribType,int count)
rlSetVertexAttributeDivisor	$RAYLIB/rlgl.h	/^void rlSetVertexAttributeDivisor(unsigned int index, int divisor)$/;"	f	typeref:typename:void	signature:(unsigned int index,int divisor)
rlShaderAttributeDataType	$RAYLIB/rlgl.h	/^} rlShaderAttributeDataType;$/;"	t	typeref:enum:__anon19a7bfac0903
rlShaderLocationIndex	$RAYLIB/rlgl.h	/^} rlShaderLocationIndex;$/;"	t	typeref:enum:__anon19a7bfac0703
rlShaderUniformDataType	$RAYLIB/rlgl.h	/^} rlShaderUniformDataType;$/;"	t	typeref:enum:__anon19a7bfac0803
rlTexCoord2f	$RAYLIB/rlgl.h	/^void rlTexCoord2f(float x, float y)$/;"	f	typeref:typename:void	signature:(float x,float y)
rlTextureFilter	$RAYLIB/rlgl.h	/^} rlTextureFilter;$/;"	t	typeref:enum:__anon19a7bfac0503
rlTextureParameters	$RAYLIB/rlgl.h	/^void rlTextureParameters(unsigned int id, int param, int value)$/;"	f	typeref:typename:void	signature:(unsigned int id,int param,int value)
rlTraceLogLevel	$RAYLIB/rlgl.h	/^} rlTraceLogLevel;$/;"	t	typeref:enum:__anon19a7bfac0303
rlTranslatef	$RAYLIB/rlgl.h	/^void rlTranslatef(float x, float y, float z)$/;"	f	typeref:typename:void	signature:(float x,float y,float z)
rlUnloadFramebuffer	$RAYLIB/rlgl.h	/^void rlUnloadFramebuffer(unsigned int id)$/;"	f	typeref:typename:void	signature:(unsigned int id)
rlUnloadRenderBatch	$RAYLIB/rlgl.h	/^void rlUnloadRenderBatch(rlRenderBatch batch)$/;"	f	typeref:typename:void	signature:(rlRenderBatch batch)
rlUnloadShaderBuffer	$RAYLIB/rlgl.h	/^void rlUnloadShaderBuffer(unsigned int ssboId)$/;"	f	typeref:typename:void	signature:(unsigned int ssboId)
rlUnloadShaderDefault	$RAYLIB/rlgl.h	/^static void rlUnloadShaderDefault(void);    \/\/ Unload default shader$/;"	p	typeref:typename:void	signature:(void)
rlUnloadShaderProgram	$RAYLIB/rlgl.h	/^void rlUnloadShaderProgram(unsigned int id)$/;"	f	typeref:typename:void	signature:(unsigned int id)
rlUnloadTexture	$RAYLIB/rlgl.h	/^void rlUnloadTexture(unsigned int id)$/;"	f	typeref:typename:void	signature:(unsigned int id)
rlUnloadVertexArray	$RAYLIB/rlgl.h	/^void rlUnloadVertexArray(unsigned int vaoId)$/;"	f	typeref:typename:void	signature:(unsigned int vaoId)
rlUnloadVertexBuffer	$RAYLIB/rlgl.h	/^void rlUnloadVertexBuffer(unsigned int vboId)$/;"	f	typeref:typename:void	signature:(unsigned int vboId)
rlUpdateShaderBuffer	$RAYLIB/rlgl.h	/^void rlUpdateShaderBuffer(unsigned int id, const void *data, unsigned int dataSize, unsigned int/;"	f	typeref:typename:void	signature:(unsigned int id,const void * data,unsigned int dataSize,unsigned int offset)
rlUpdateTexture	$RAYLIB/rlgl.h	/^void rlUpdateTexture(unsigned int id, int offsetX, int offsetY, int width, int height, int forma/;"	f	typeref:typename:void	signature:(unsigned int id,int offsetX,int offsetY,int width,int height,int format,const void * data)
rlUpdateVertexBuffer	$RAYLIB/rlgl.h	/^void rlUpdateVertexBuffer(unsigned int id, const void *data, int dataSize, int offset)$/;"	f	typeref:typename:void	signature:(unsigned int id,const void * data,int dataSize,int offset)
rlUpdateVertexBufferElements	$RAYLIB/rlgl.h	/^void rlUpdateVertexBufferElements(unsigned int id, const void *data, int dataSize, int offset)$/;"	f	typeref:typename:void	signature:(unsigned int id,const void * data,int dataSize,int offset)
rlVertex2f	$RAYLIB/rlgl.h	/^void rlVertex2f(float x, float y)$/;"	f	typeref:typename:void	signature:(float x,float y)
rlVertex2i	$RAYLIB/rlgl.h	/^void rlVertex2i(int x, int y)$/;"	f	typeref:typename:void	signature:(int x,int y)
rlVertex3f	$RAYLIB/rlgl.h	/^void rlVertex3f(float x, float y, float z)$/;"	f	typeref:typename:void	signature:(float x,float y,float z)
rlVertexBuffer	$RAYLIB/rlgl.h	/^} rlVertexBuffer;$/;"	t	typeref:struct:rlVertexBuffer
rlViewport	$RAYLIB/rlgl.h	/^void rlViewport(int x, int y, int width, int height)$/;"	f	typeref:typename:void	signature:(int x,int y,int width,int height)
rl_float16	$RAYLIB/rlgl.h	/^} rl_float16;$/;"	t	typeref:struct:rl_float16
rlglClose	$RAYLIB/rlgl.h	/^void rlglClose(void)$/;"	f	typeref:typename:void	signature:(void)
rlglData	$RAYLIB/rlgl.h	/^} rlglData;$/;"	t	typeref:struct:rlglData
rlglInit	$RAYLIB/rlgl.h	/^void rlglInit(int width, int height)$/;"	f	typeref:typename:void	signature:(int width,int height)
rlglLoadProc	$RAYLIB/rlgl.h	/^typedef void *(*rlglLoadProc)(const char *name);   \/\/ OpenGL extension functions loader signat/;"	t	typeref:typename:void * (*)(const char * name)
rotation	$RAYLIB/raylib.h	/^    float rotation;         \/\/ Camera rotation in degrees$/;"	m	struct:Camera2D	typeref:typename:float
sampleRate	$RAYLIB/raylib.h	/^    unsigned int sampleRate;    \/\/ Frequency (samples per second)$/;"	m	struct:Wave	typeref:typename:unsigned int
sampleSize	$RAYLIB/raylib.h	/^    unsigned int sampleSize;    \/\/ Bit depth (bits per sample): 8, 16, 32 (24 not supported)$/;"	m	struct:Wave	typeref:typename:unsigned int
scale	$RAYLIB/raylib.h	/^    float scale[2];                 \/\/ VR distortion scale$/;"	m	struct:VrStereoConfig	typeref:typename:float[2]
scaleIn	$RAYLIB/raylib.h	/^    float scaleIn[2];               \/\/ VR distortion scale in$/;"	m	struct:VrStereoConfig	typeref:typename:float[2]
shader	$RAYLIB/raylib.h	/^    Shader shader;          \/\/ Material shader$/;"	m	struct:Material	typeref:typename:Shader
source	$RAYLIB/raylib.h	/^    Rectangle source;       \/\/ Texture source rectangle$/;"	m	struct:NPatchInfo	typeref:typename:Rectangle
ssbo	$RAYLIB/rlgl.h	/^        bool ssbo;                          \/\/ Shader storage buffer object support (GL_ARB_sh/;"	m	struct:rlglData::__anon19a7bfac0e08	typeref:typename:bool
stack	$RAYLIB/rlgl.h	/^        Matrix stack[RL_MAX_MATRIX_STACK_SIZE];\/\/ Matrix stack for push\/pop$/;"	m	struct:rlglData::__anon19a7bfac0d08	typeref:typename:Matrix[]
stackCounter	$RAYLIB/rlgl.h	/^        int stackCounter;                   \/\/ Matrix stack counter$/;"	m	struct:rlglData::__anon19a7bfac0d08	typeref:typename:int
stereoRender	$RAYLIB/rlgl.h	/^        bool stereoRender;                  \/\/ Stereo rendering flag$/;"	m	struct:rlglData::__anon19a7bfac0d08	typeref:typename:bool
stream	$RAYLIB/raylib.h	/^    AudioStream stream;         \/\/ Audio stream$/;"	m	struct:Sound	typeref:typename:AudioStream
tangents	$RAYLIB/raylib.h	/^    float *tangents;        \/\/ Vertex tangents (XYZW - 4 components per vertex) (shader-locati/;"	m	struct:Mesh	typeref:typename:float *
target	$RAYLIB/raylib.h	/^    Vector3 target;         \/\/ Camera target it looks-at$/;"	m	struct:Camera3D	typeref:typename:Vector3
texAnisoFilter	$RAYLIB/rlgl.h	/^        bool texAnisoFilter;                \/\/ Anisotropic texture filtering support (GL_EXT_t/;"	m	struct:rlglData::__anon19a7bfac0e08	typeref:typename:bool
texCompASTC	$RAYLIB/rlgl.h	/^        bool texCompASTC;                   \/\/ ASTC texture compression support (GL_KHR_textur/;"	m	struct:rlglData::__anon19a7bfac0e08	typeref:typename:bool
texCompDXT	$RAYLIB/rlgl.h	/^        bool texCompDXT;                    \/\/ DDS texture compression support (GL_EXT_texture/;"	m	struct:rlglData::__anon19a7bfac0e08	typeref:typename:bool
texCompETC1	$RAYLIB/rlgl.h	/^        bool texCompETC1;                   \/\/ ETC1 texture compression support (GL_OES_compre/;"	m	struct:rlglData::__anon19a7bfac0e08	typeref:typename:bool
texCompETC2	$RAYLIB/rlgl.h	/^        bool texCompETC2;                   \/\/ ETC2\/EAC texture compression support (GL_ARB_E/;"	m	struct:rlglData::__anon19a7bfac0e08	typeref:typename:bool
texCompPVRT	$RAYLIB/rlgl.h	/^        bool texCompPVRT;                   \/\/ PVR texture compression support (GL_IMG_texture/;"	m	struct:rlglData::__anon19a7bfac0e08	typeref:typename:bool
texDepth	$RAYLIB/rlgl.h	/^        bool texDepth;                      \/\/ Depth textures supported (GL_ARB_depth_texture,/;"	m	struct:rlglData::__anon19a7bfac0e08	typeref:typename:bool
texDepthWebGL	$RAYLIB/rlgl.h	/^        bool texDepthWebGL;                 \/\/ Depth textures supported WebGL specific (GL_WEB/;"	m	struct:rlglData::__anon19a7bfac0e08	typeref:typename:bool
texFloat16	$RAYLIB/rlgl.h	/^        bool texFloat16;                    \/\/ half float textures support (16 bit per channel/;"	m	struct:rlglData::__anon19a7bfac0e08	typeref:typename:bool
texFloat32	$RAYLIB/rlgl.h	/^        bool texFloat32;                    \/\/ float textures support (32 bit per channel) (GL/;"	m	struct:rlglData::__anon19a7bfac0e08	typeref:typename:bool
texMirrorClamp	$RAYLIB/rlgl.h	/^        bool texMirrorClamp;                \/\/ Clamp mirror wrap mode supported (GL_EXT_textur/;"	m	struct:rlglData::__anon19a7bfac0e08	typeref:typename:bool
texNPOT	$RAYLIB/rlgl.h	/^        bool texNPOT;                       \/\/ NPOT textures full support (GL_ARB_texture_non_/;"	m	struct:rlglData::__anon19a7bfac0e08	typeref:typename:bool
texcoords	$RAYLIB/raylib.h	/^    float *texcoords;       \/\/ Vertex texture coordinates (UV - 2 components per vertex) (shad/;"	m	struct:Mesh	typeref:typename:float *
texcoords	$RAYLIB/rlgl.h	/^    float *texcoords;           \/\/ Vertex texture coordinates (UV - 2 components per vertex) (/;"	m	struct:rlVertexBuffer	typeref:typename:float *
texcoords2	$RAYLIB/raylib.h	/^    float *texcoords2;      \/\/ Vertex texture second coordinates (UV - 2 components per vertex/;"	m	struct:Mesh	typeref:typename:float *
texcoordx	$RAYLIB/rlgl.h	/^        float texcoordx, texcoordy;         \/\/ Current active texture coordinate (added on glV/;"	m	struct:rlglData::__anon19a7bfac0d08	typeref:typename:float
texcoordy	$RAYLIB/rlgl.h	/^        float texcoordx, texcoordy;         \/\/ Current active texture coordinate (added on glV/;"	m	struct:rlglData::__anon19a7bfac0d08	typeref:typename:float
textBoxCursorIndex	$RAYLIB/raygui.h	/^static int textBoxCursorIndex = 0;              \/\/ Cursor index, shared by all GuiTextBox*()$/;"	v	typeref:typename:int
texture	$RAYLIB/raygui.h	/^        Texture2D texture;      \/\/ Texture atlas containing the glyphs$/;"	m	struct:Font	typeref:typename:Texture2D
texture	$RAYLIB/raylib.h	/^    Texture2D texture;      \/\/ Texture atlas containing the glyphs$/;"	m	struct:Font	typeref:typename:Texture2D
textureId	$RAYLIB/rlgl.h	/^    unsigned int textureId;     \/\/ Texture id to be used on the draw -> Use to create new draw/;"	m	struct:rlDrawCall	typeref:typename:unsigned int
top	$RAYLIB/raylib.h	/^    int top;                \/\/ Top border offset$/;"	m	struct:NPatchInfo	typeref:typename:int
transform	$RAYLIB/raylib.h	/^    Matrix transform;       \/\/ Local transform matrix$/;"	m	struct:Model	typeref:typename:Matrix
transform	$RAYLIB/rlgl.h	/^        Matrix transform;                   \/\/ Transform matrix to be used with rlTranslate, r/;"	m	struct:rlglData::__anon19a7bfac0d08	typeref:typename:Matrix
transformRequired	$RAYLIB/rlgl.h	/^        bool transformRequired;             \/\/ Require transform matrix application to current/;"	m	struct:rlglData::__anon19a7bfac0d08	typeref:typename:bool
translation	$RAYLIB/raylib.h	/^    Vector3 translation;    \/\/ Translation$/;"	m	struct:Transform	typeref:typename:Vector3
triangleCount	$RAYLIB/raylib.h	/^    int triangleCount;      \/\/ Number of triangles stored (indexed or not)$/;"	m	struct:Mesh	typeref:typename:int
type	$RAYLIB/raylib.h	/^    unsigned int type;              \/\/ Event type (AutomationEventType)$/;"	m	struct:AutomationEvent	typeref:typename:unsigned int
vResolution	$RAYLIB/raylib.h	/^    int vResolution;                \/\/ Vertical resolution in pixels$/;"	m	struct:VrDeviceInfo	typeref:typename:int
vScreenSize	$RAYLIB/raylib.h	/^    float vScreenSize;              \/\/ Vertical size in meters$/;"	m	struct:VrDeviceInfo	typeref:typename:float
value	$RAYLIB/raygui.h	/^        int value;              \/\/ Character value (Unicode)$/;"	m	struct:GlyphInfo	typeref:typename:int
value	$RAYLIB/raylib.h	/^    int value;              \/\/ Character value (Unicode)$/;"	m	struct:GlyphInfo	typeref:typename:int
vao	$RAYLIB/rlgl.h	/^        bool vao;                           \/\/ VAO support (OpenGL ES2 could not support VAO e/;"	m	struct:rlglData::__anon19a7bfac0e08	typeref:typename:bool
vaoId	$RAYLIB/raylib.h	/^    unsigned int vaoId;     \/\/ OpenGL Vertex Array Object id$/;"	m	struct:Mesh	typeref:typename:unsigned int
vaoId	$RAYLIB/rlgl.h	/^    unsigned int vaoId;         \/\/ OpenGL Vertex Array Object id$/;"	m	struct:rlVertexBuffer	typeref:typename:unsigned int
vboId	$RAYLIB/raylib.h	/^    unsigned int *vboId;    \/\/ OpenGL Vertex Buffer Objects id (default vertex data)$/;"	m	struct:Mesh	typeref:typename:unsigned int *
vboId	$RAYLIB/rlgl.h	/^    unsigned int vboId[5];      \/\/ OpenGL Vertex Buffer Objects id (5 types of vertex data)$/;"	m	struct:rlVertexBuffer	typeref:typename:unsigned int[5]
vertexAlignment	$RAYLIB/rlgl.h	/^    int vertexAlignment;        \/\/ Number of vertex required for index alignment (LINES, TRIAN/;"	m	struct:rlDrawCall	typeref:typename:int
vertexBuffer	$RAYLIB/rlgl.h	/^    rlVertexBuffer *vertexBuffer; \/\/ Dynamic buffer(s) for vertex data$/;"	m	struct:rlRenderBatch	typeref:typename:rlVertexBuffer *
vertexCount	$RAYLIB/raylib.h	/^    int vertexCount;        \/\/ Number of vertices stored in arrays$/;"	m	struct:Mesh	typeref:typename:int
vertexCount	$RAYLIB/rlgl.h	/^    int vertexCount;            \/\/ Number of vertex of the draw$/;"	m	struct:rlDrawCall	typeref:typename:int
vertexCounter	$RAYLIB/rlgl.h	/^        int vertexCounter;                  \/\/ Current active render batch vertex counter (gen/;"	m	struct:rlglData::__anon19a7bfac0d08	typeref:typename:int
vertices	$RAYLIB/raylib.h	/^    float *vertices;        \/\/ Vertex position (XYZ - 3 components per vertex) (shader-locatio/;"	m	struct:Mesh	typeref:typename:float *
vertices	$RAYLIB/rlgl.h	/^    float *vertices;            \/\/ Vertex position (XYZ - 3 components per vertex) (shader-loc/;"	m	struct:rlVertexBuffer	typeref:typename:float *
viewOffset	$RAYLIB/raylib.h	/^    Matrix viewOffset[2];           \/\/ VR view offset matrices (per eye)$/;"	m	struct:VrStereoConfig	typeref:typename:Matrix[2]
viewOffsetStereo	$RAYLIB/rlgl.h	/^        Matrix viewOffsetStereo[2];         \/\/ VR stereo rendering eyes view offset matrices$/;"	m	struct:rlglData::__anon19a7bfac0d08	typeref:typename:Matrix[2]
width	$RAYLIB/raygui.h	/^        int width;              \/\/ Texture base width$/;"	m	struct:Texture2D	typeref:typename:int
width	$RAYLIB/raylib.h	/^    int width;              \/\/ Texture base width$/;"	m	struct:Texture	typeref:typename:int
zoom	$RAYLIB/raylib.h	/^    float zoom;             \/\/ Camera zoom (scaling), should be 1.0f by default$/;"	m	struct:Camera2D	typeref:typename:float
