Allocator	$SOKOL/app.nim	/^type Allocator* = object$/;"	t
Allocator	$SOKOL/audio.nim	/^type Allocator* = object$/;"	t
Allocator	$SOKOL/debugtext.nim	/^type Allocator* = object$/;"	t
Allocator	$SOKOL/gfx.nim	/^type Allocator* = object$/;"	t
Allocator	$SOKOL/gl.nim	/^type Allocator* = object$/;"	t
AndroidTooltype	$SOKOL/app.nim	/^  AndroidTooltype* {.size:sizeof(int32).} = enum$/;"	t
Backend	$SOKOL/gfx.nim	/^  Backend* {.size:sizeof(int32).} = enum$/;"	t
Bindings	$SOKOL/gfx.nim	/^type Bindings* = object$/;"	t
BlendFactor	$SOKOL/gfx.nim	/^  BlendFactor* {.size:sizeof(int32).} = enum$/;"	t
BlendOp	$SOKOL/gfx.nim	/^  BlendOp* {.size:sizeof(int32).} = enum$/;"	t
BlendState	$SOKOL/gfx.nim	/^type BlendState* = object$/;"	t
BorderColor	$SOKOL/gfx.nim	/^  BorderColor* {.size:sizeof(int32).} = enum$/;"	t
Box	$SOKOL/shape.nim	/^type Box* = object$/;"	t
Buffer	$SOKOL/gfx.nim	/^type Buffer* = object$/;"	t
Buffer	$SOKOL/shape.nim	/^type Buffer* = object$/;"	t
BufferDesc	$SOKOL/gfx.nim	/^type BufferDesc* = object$/;"	t
BufferInfo	$SOKOL/gfx.nim	/^type BufferInfo* = object$/;"	t
BufferItem	$SOKOL/shape.nim	/^type BufferItem* = object$/;"	t
BufferLayoutDesc	$SOKOL/gfx.nim	/^type BufferLayoutDesc* = object$/;"	t
BufferType	$SOKOL/gfx.nim	/^  BufferType* {.size:sizeof(int32).} = enum$/;"	t
Color	$SOKOL/gfx.nim	/^type Color* = object$/;"	t
ColorAttachmentAction	$SOKOL/gfx.nim	/^type ColorAttachmentAction* = object$/;"	t
ColorMask	$SOKOL/gfx.nim	/^  ColorMask* {.size:sizeof(int32).} = enum$/;"	t
ColorState	$SOKOL/gfx.nim	/^type ColorState* = object$/;"	t
CommitListener	$SOKOL/gfx.nim	/^type CommitListener* = object$/;"	t
CompareFunc	$SOKOL/gfx.nim	/^  CompareFunc* {.size:sizeof(int32).} = enum$/;"	t
Context	$SOKOL/debugtext.nim	/^type Context* = object$/;"	t
Context	$SOKOL/gfx.nim	/^type Context* = object$/;"	t
Context	$SOKOL/gl.nim	/^type Context* = object$/;"	t
ContextDesc	$SOKOL/debugtext.nim	/^type ContextDesc* = object$/;"	t
ContextDesc	$SOKOL/gfx.nim	/^type ContextDesc* = object$/;"	t
ContextDesc	$SOKOL/gl.nim	/^type ContextDesc* = object$/;"	t
CubeFace	$SOKOL/gfx.nim	/^  CubeFace* {.size:sizeof(int32).} = enum$/;"	t
CullMode	$SOKOL/gfx.nim	/^  CullMode* {.size:sizeof(int32).} = enum$/;"	t
Cylinder	$SOKOL/shape.nim	/^type Cylinder* = object$/;"	t
D3d11ContextDesc	$SOKOL/gfx.nim	/^type D3d11ContextDesc* = object$/;"	t
DepthAttachmentAction	$SOKOL/gfx.nim	/^type DepthAttachmentAction* = object$/;"	t
DepthState	$SOKOL/gfx.nim	/^type DepthState* = object$/;"	t
Desc	$SOKOL/app.nim	/^type Desc* = object$/;"	t
Desc	$SOKOL/audio.nim	/^type Desc* = object$/;"	t
Desc	$SOKOL/debugtext.nim	/^type Desc* = object$/;"	t
Desc	$SOKOL/gfx.nim	/^type Desc* = object$/;"	t
Desc	$SOKOL/gl.nim	/^type Desc* = object$/;"	t
ElementRange	$SOKOL/shape.nim	/^type ElementRange* = object$/;"	t
Error	$SOKOL/gl.nim	/^  Error* {.size:sizeof(int32).} = enum$/;"	t
Event	$SOKOL/app.nim	/^type Event* = object$/;"	t
EventType	$SOKOL/app.nim	/^  EventType* {.size:sizeof(int32).} = enum$/;"	t
FaceWinding	$SOKOL/gfx.nim	/^  FaceWinding* {.size:sizeof(int32).} = enum$/;"	t
Features	$SOKOL/gfx.nim	/^type Features* = object$/;"	t
Filter	$SOKOL/gfx.nim	/^  Filter* {.size:sizeof(int32).} = enum$/;"	t
FontDesc	$SOKOL/debugtext.nim	/^type FontDesc* = object$/;"	t
Html5FetchError	$SOKOL/app.nim	/^  Html5FetchError* {.size:sizeof(int32).} = enum$/;"	t
Html5FetchRequest	$SOKOL/app.nim	/^type Html5FetchRequest* = object$/;"	t
Html5FetchResponse	$SOKOL/app.nim	/^type Html5FetchResponse* = object$/;"	t
IconDesc	$SOKOL/app.nim	/^type IconDesc* = object$/;"	t
Image	$SOKOL/gfx.nim	/^type Image* = object$/;"	t
ImageData	$SOKOL/gfx.nim	/^type ImageData* = object$/;"	t
ImageDesc	$SOKOL/app.nim	/^type ImageDesc* = object$/;"	t
ImageDesc	$SOKOL/gfx.nim	/^type ImageDesc* = object$/;"	t
ImageInfo	$SOKOL/gfx.nim	/^type ImageInfo* = object$/;"	t
ImageType	$SOKOL/gfx.nim	/^  ImageType* {.size:sizeof(int32).} = enum$/;"	t
IndexType	$SOKOL/gfx.nim	/^  IndexType* {.size:sizeof(int32).} = enum$/;"	t
Keycode	$SOKOL/app.nim	/^  Keycode* {.size:sizeof(int32).} = enum$/;"	t
LayoutDesc	$SOKOL/gfx.nim	/^type LayoutDesc* = object$/;"	t
Limits	$SOKOL/gfx.nim	/^type Limits* = object$/;"	t
LoadAction	$SOKOL/gfx.nim	/^  LoadAction* {.size:sizeof(int32).} = enum$/;"	t
LogItem	$SOKOL/app.nim	/^  LogItem* {.size:sizeof(int32).} = enum$/;"	t
LogItem	$SOKOL/audio.nim	/^  LogItem* {.size:sizeof(int32).} = enum$/;"	t
LogItem	$SOKOL/debugtext.nim	/^  LogItem* {.size:sizeof(int32).} = enum$/;"	t
LogItem	$SOKOL/gfx.nim	/^  LogItem* {.size:sizeof(int32).} = enum$/;"	t
LogItem	$SOKOL/gl.nim	/^  LogItem* {.size:sizeof(int32).} = enum$/;"	t
Logger	$SOKOL/app.nim	/^type Logger* = object$/;"	t
Logger	$SOKOL/audio.nim	/^type Logger* = object$/;"	t
Logger	$SOKOL/debugtext.nim	/^type Logger* = object$/;"	t
Logger	$SOKOL/gfx.nim	/^type Logger* = object$/;"	t
Logger	$SOKOL/gl.nim	/^type Logger* = object$/;"	t
Mat4	$SOKOL/shape.nim	/^type Mat4* = object$/;"	t
MetalContextDesc	$SOKOL/gfx.nim	/^type MetalContextDesc* = object$/;"	t
MouseCursor	$SOKOL/app.nim	/^  MouseCursor* {.size:sizeof(int32).} = enum$/;"	t
Mousebutton	$SOKOL/app.nim	/^  Mousebutton* {.size:sizeof(int32).} = enum$/;"	t
Pass	$SOKOL/gfx.nim	/^type Pass* = object$/;"	t
PassAction	$SOKOL/gfx.nim	/^type PassAction* = object$/;"	t
PassAttachmentDesc	$SOKOL/gfx.nim	/^type PassAttachmentDesc* = object$/;"	t
PassDesc	$SOKOL/gfx.nim	/^type PassDesc* = object$/;"	t
PassInfo	$SOKOL/gfx.nim	/^type PassInfo* = object$/;"	t
Pipeline	$SOKOL/gfx.nim	/^type Pipeline* = object$/;"	t
Pipeline	$SOKOL/gl.nim	/^type Pipeline* = object$/;"	t
PipelineDesc	$SOKOL/gfx.nim	/^type PipelineDesc* = object$/;"	t
PipelineInfo	$SOKOL/gfx.nim	/^type PipelineInfo* = object$/;"	t
PixelFormat	$SOKOL/gfx.nim	/^  PixelFormat* {.size:sizeof(int32).} = enum$/;"	t
PixelformatInfo	$SOKOL/gfx.nim	/^type PixelformatInfo* = object$/;"	t
Plane	$SOKOL/shape.nim	/^type Plane* = object$/;"	t
PrimitiveType	$SOKOL/gfx.nim	/^  PrimitiveType* {.size:sizeof(int32).} = enum$/;"	t
Range	$SOKOL/app.nim	/^type Range* = object$/;"	t
Range	$SOKOL/debugtext.nim	/^type Range* = object$/;"	t
Range	$SOKOL/gfx.nim	/^type Range* = object$/;"	t
Range	$SOKOL/shape.nim	/^type Range* = object$/;"	t
ResourceState	$SOKOL/gfx.nim	/^  ResourceState* {.size:sizeof(int32).} = enum$/;"	t
SamplerType	$SOKOL/gfx.nim	/^  SamplerType* {.size:sizeof(int32).} = enum$/;"	t
Shader	$SOKOL/gfx.nim	/^type Shader* = object$/;"	t
ShaderAttrDesc	$SOKOL/gfx.nim	/^type ShaderAttrDesc* = object$/;"	t
ShaderDesc	$SOKOL/gfx.nim	/^type ShaderDesc* = object$/;"	t
ShaderImageDesc	$SOKOL/gfx.nim	/^type ShaderImageDesc* = object$/;"	t
ShaderInfo	$SOKOL/gfx.nim	/^type ShaderInfo* = object$/;"	t
ShaderStage	$SOKOL/gfx.nim	/^  ShaderStage* {.size:sizeof(int32).} = enum$/;"	t
ShaderStageDesc	$SOKOL/gfx.nim	/^type ShaderStageDesc* = object$/;"	t
ShaderUniformBlockDesc	$SOKOL/gfx.nim	/^type ShaderUniformBlockDesc* = object$/;"	t
ShaderUniformDesc	$SOKOL/gfx.nim	/^type ShaderUniformDesc* = object$/;"	t
Sizes	$SOKOL/shape.nim	/^type Sizes* = object$/;"	t
SizesItem	$SOKOL/shape.nim	/^type SizesItem* = object$/;"	t
SlotInfo	$SOKOL/gfx.nim	/^type SlotInfo* = object$/;"	t
Sphere	$SOKOL/shape.nim	/^type Sphere* = object$/;"	t
StencilAttachmentAction	$SOKOL/gfx.nim	/^type StencilAttachmentAction* = object$/;"	t
StencilFaceState	$SOKOL/gfx.nim	/^type StencilFaceState* = object$/;"	t
StencilOp	$SOKOL/gfx.nim	/^  StencilOp* {.size:sizeof(int32).} = enum$/;"	t
StencilState	$SOKOL/gfx.nim	/^type StencilState* = object$/;"	t
StoreAction	$SOKOL/gfx.nim	/^  StoreAction* {.size:sizeof(int32).} = enum$/;"	t
Torus	$SOKOL/shape.nim	/^type Torus* = object$/;"	t
Touchpoint	$SOKOL/app.nim	/^type Touchpoint* = object$/;"	t
TraceHooks	$SOKOL/gfx.nim	/^type TraceHooks* = object$/;"	t
UniformLayout	$SOKOL/gfx.nim	/^  UniformLayout* {.size:sizeof(int32).} = enum$/;"	t
UniformType	$SOKOL/gfx.nim	/^  UniformType* {.size:sizeof(int32).} = enum$/;"	t
Usage	$SOKOL/gfx.nim	/^  Usage* {.size:sizeof(int32).} = enum$/;"	t
Vertex	$SOKOL/shape.nim	/^type Vertex* = object$/;"	t
VertexAttrDesc	$SOKOL/gfx.nim	/^type VertexAttrDesc* = object$/;"	t
VertexFormat	$SOKOL/gfx.nim	/^  VertexFormat* {.size:sizeof(int32).} = enum$/;"	t
VertexStep	$SOKOL/gfx.nim	/^  VertexStep* {.size:sizeof(int32).} = enum$/;"	t
WgpuContextDesc	$SOKOL/gfx.nim	/^type WgpuContextDesc* = object$/;"	t
Wrap	$SOKOL/gfx.nim	/^  Wrap* {.size:sizeof(int32).} = enum$/;"	t
activateContext	$SOKOL/gfx.nim	/^proc activateContext*(ctxId:Context):void =$/;"	t
addCommitListener	$SOKOL/gfx.nim	/^proc addCommitListener*(listener:CommitListener):bool =$/;"	t
addr	$SOKOL/app.nim	/^  `addr`*:pointer$/;"	o
addr	$SOKOL/debugtext.nim	/^  `addr`*:pointer$/;"	o
addr	$SOKOL/gfx.nim	/^  `addr`*:pointer$/;"	o
addr	$SOKOL/shape.nim	/^  `addr`*:pointer$/;"	o
allocBuffer	$SOKOL/gfx.nim	/^proc allocBuffer*():Buffer =$/;"	t
allocImage	$SOKOL/gfx.nim	/^proc allocImage*():Image =$/;"	t
allocPass	$SOKOL/gfx.nim	/^proc allocPass*():Pass =$/;"	t
allocPipeline	$SOKOL/gfx.nim	/^proc allocPipeline*():Pipeline =$/;"	t
allocShader	$SOKOL/gfx.nim	/^proc allocShader*():Shader =$/;"	t
androidGetNativeActivity	$SOKOL/app.nim	/^proc androidGetNativeActivity*():pointer =$/;"	t
appendBuffer	$SOKOL/gfx.nim	/^proc appendBuffer*(buf:Buffer, data:Range):int32 =$/;"	t
applyBindings	$SOKOL/gfx.nim	/^proc applyBindings*(bindings:Bindings):void =$/;"	t
applyPipeline	$SOKOL/gfx.nim	/^proc applyPipeline*(pip:Pipeline):void =$/;"	t
applyScissorRect	$SOKOL/gfx.nim	/^proc applyScissorRect*(x:int32, y:int32, width:int32, height:int32, originTopLeft:bool):void =$/;"	t
applyScissorRectf	$SOKOL/gfx.nim	/^proc applyScissorRectf*(x:float32, y:float32, width:float32, height:float32, originTopLeft:bool)/;"	t
applyUniforms	$SOKOL/gfx.nim	/^proc applyUniforms*(stage:ShaderStage, ubIndex:int32, data:Range):void =$/;"	t
applyViewport	$SOKOL/gfx.nim	/^proc applyViewport*(x:int32, y:int32, width:int32, height:int32, originTopLeft:bool):void =$/;"	t
applyViewportf	$SOKOL/gfx.nim	/^proc applyViewportf*(x:float32, y:float32, width:float32, height:float32, originTopLeft:bool):vo/;"	t
asDegrees	$SOKOL/gl.nim	/^proc asDegrees*(rad:float32):float32 =$/;"	t
asRadians	$SOKOL/gl.nim	/^proc asRadians*(deg:float32):float32 =$/;"	t
beginDefaultPass	$SOKOL/gfx.nim	/^proc beginDefaultPass*(passAction:PassAction, width:int32, height:int32):void =$/;"	t
beginDefaultPassf	$SOKOL/gfx.nim	/^proc beginDefaultPassf*(passAction:PassAction, width:float32, height:float32):void =$/;"	t
beginLineStrip	$SOKOL/gl.nim	/^proc beginLineStrip*():void =$/;"	t
beginLines	$SOKOL/gl.nim	/^proc beginLines*():void =$/;"	t
beginPass	$SOKOL/gfx.nim	/^proc beginPass*(pass:Pass, passAction:PassAction):void =$/;"	t
beginPoints	$SOKOL/gl.nim	/^proc beginPoints*():void =$/;"	t
beginQuads	$SOKOL/gl.nim	/^proc beginQuads*():void =$/;"	t
beginTriangleStrip	$SOKOL/gl.nim	/^proc beginTriangleStrip*():void =$/;"	t
beginTriangles	$SOKOL/gl.nim	/^proc beginTriangles*():void =$/;"	t
boxSizes	$SOKOL/shape.nim	/^proc boxSizes*(tiles:uint32):Sizes =$/;"	t
bufferFrames	$SOKOL/audio.nim	/^proc bufferFrames*():int32 =$/;"	t
bufferLayoutDesc	$SOKOL/shape.nim	/^proc bufferLayoutDesc*():gfx.BufferLayoutDesc =$/;"	t
buildBox	$SOKOL/shape.nim	/^proc buildBox*(buf:Buffer, params:Box):Buffer =$/;"	t
buildCylinder	$SOKOL/shape.nim	/^proc buildCylinder*(buf:Buffer, params:Cylinder):Buffer =$/;"	t
buildPlane	$SOKOL/shape.nim	/^proc buildPlane*(buf:Buffer, params:Plane):Buffer =$/;"	t
buildSphere	$SOKOL/shape.nim	/^proc buildSphere*(buf:Buffer, params:Sphere):Buffer =$/;"	t
buildTorus	$SOKOL/shape.nim	/^proc buildTorus*(buf:Buffer, params:Torus):Buffer =$/;"	t
c1i	$SOKOL/gl.nim	/^proc c1i*(rgba:uint32):void =$/;"	t
c3b	$SOKOL/gl.nim	/^proc c3b*(r:uint8, g:uint8, b:uint8):void =$/;"	t
c3f	$SOKOL/gl.nim	/^proc c3f*(r:float32, g:float32, b:float32):void =$/;"	t
c4b	$SOKOL/gl.nim	/^proc c4b*(r:uint8, g:uint8, b:uint8, a:uint8):void =$/;"	t
c4f	$SOKOL/gl.nim	/^proc c4f*(r:float32, g:float32, b:float32, a:float32):void =$/;"	t
cancelQuit	$SOKOL/app.nim	/^proc cancelQuit*():void =$/;"	t
canvas	$SOKOL/debugtext.nim	/^proc canvas*(w:float32, h:float32):void =$/;"	t
channels	$SOKOL/audio.nim	/^proc channels*():int32 =$/;"	t
color1i	$SOKOL/debugtext.nim	/^proc color1i*(rgba:uint32):void =$/;"	t
color3b	$SOKOL/debugtext.nim	/^proc color3b*(r:uint8, g:uint8, b:uint8):void =$/;"	t
color3b	$SOKOL/shape.nim	/^proc color3b*(r:uint8, g:uint8, b:uint8):uint32 =$/;"	t
color3f	$SOKOL/debugtext.nim	/^proc color3f*(r:float32, g:float32, b:float32):void =$/;"	t
color3f	$SOKOL/shape.nim	/^proc color3f*(r:float32, g:float32, b:float32):uint32 =$/;"	t
color4b	$SOKOL/debugtext.nim	/^proc color4b*(r:uint8, g:uint8, b:uint8, a:uint8):void =$/;"	t
color4b	$SOKOL/shape.nim	/^proc color4b*(r:uint8, g:uint8, b:uint8, a:uint8):uint32 =$/;"	t
color4f	$SOKOL/debugtext.nim	/^proc color4f*(r:float32, g:float32, b:float32, a:float32):void =$/;"	t
color4f	$SOKOL/shape.nim	/^proc color4f*(r:float32, g:float32, b:float32, a:float32):uint32 =$/;"	t
colorAttrDesc	$SOKOL/shape.nim	/^proc colorAttrDesc*():gfx.VertexAttrDesc =$/;"	t
colorFormat	$SOKOL/app.nim	/^proc colorFormat*():int32 =$/;"	t
commit	$SOKOL/gfx.nim	/^proc commit*():void =$/;"	t
consumeEvent	$SOKOL/app.nim	/^proc consumeEvent*():void =$/;"	t
context	$SOKOL/glue.nim	/^proc context*():gfx.ContextDesc =$/;"	t
contextDraw	$SOKOL/debugtext.nim	/^proc contextDraw*(ctx:Context):void =$/;"	t
contextDraw	$SOKOL/gl.nim	/^proc contextDraw*(ctx:Context):void =$/;"	t
contextDrawLayer	$SOKOL/debugtext.nim	/^proc contextDrawLayer*(ctx:Context, layerId:int32):void =$/;"	t
contextDrawLayer	$SOKOL/gl.nim	/^proc contextDrawLayer*(ctx:Context, layerId:int32):void =$/;"	t
contextError	$SOKOL/gl.nim	/^proc contextError*(ctx:Context):Error =$/;"	t
contextMakePipeline	$SOKOL/gl.nim	/^proc contextMakePipeline*(ctx:Context, desc:gfx.PipelineDesc):Pipeline =$/;"	t
crlf	$SOKOL/debugtext.nim	/^proc crlf*():void =$/;"	t
cylinderSizes	$SOKOL/shape.nim	/^proc cylinderSizes*(slices:uint32, stacks:uint32):Sizes =$/;"	t
d3d11	$SOKOL/gfx.nim	/^  const d3d11* = true$/;"	t
d3d11Device	$SOKOL/gfx.nim	/^proc d3d11Device*():pointer =$/;"	t
d3d11GetDepthStencilView	$SOKOL/app.nim	/^proc d3d11GetDepthStencilView*():pointer =$/;"	t
d3d11GetDevice	$SOKOL/app.nim	/^proc d3d11GetDevice*():pointer =$/;"	t
d3d11GetDeviceContext	$SOKOL/app.nim	/^proc d3d11GetDeviceContext*():pointer =$/;"	t
d3d11GetRenderTargetView	$SOKOL/app.nim	/^proc d3d11GetRenderTargetView*():pointer =$/;"	t
d3d11GetSwapChain	$SOKOL/app.nim	/^proc d3d11GetSwapChain*():pointer =$/;"	t
deallocBuffer	$SOKOL/gfx.nim	/^proc deallocBuffer*(buf:Buffer):void =$/;"	t
deallocImage	$SOKOL/gfx.nim	/^proc deallocImage*(img:Image):void =$/;"	t
deallocPass	$SOKOL/gfx.nim	/^proc deallocPass*(pass:Pass):void =$/;"	t
deallocPipeline	$SOKOL/gfx.nim	/^proc deallocPipeline*(pip:Pipeline):void =$/;"	t
deallocShader	$SOKOL/gfx.nim	/^proc deallocShader*(shd:Shader):void =$/;"	t
defaultContext	$SOKOL/debugtext.nim	/^proc defaultContext*():Context =$/;"	t
defaultContext	$SOKOL/gl.nim	/^proc defaultContext*():Context =$/;"	t
defaults	$SOKOL/gl.nim	/^proc defaults*():void =$/;"	t
depthFormat	$SOKOL/app.nim	/^proc depthFormat*():int32 =$/;"	t
destroyBuffer	$SOKOL/gfx.nim	/^proc destroyBuffer*(buf:Buffer):void =$/;"	t
destroyContext	$SOKOL/debugtext.nim	/^proc destroyContext*(ctx:Context):void =$/;"	t
destroyContext	$SOKOL/gl.nim	/^proc destroyContext*(ctx:Context):void =$/;"	t
destroyImage	$SOKOL/gfx.nim	/^proc destroyImage*(img:Image):void =$/;"	t
destroyPass	$SOKOL/gfx.nim	/^proc destroyPass*(pass:Pass):void =$/;"	t
destroyPipeline	$SOKOL/gfx.nim	/^proc destroyPipeline*(pip:Pipeline):void =$/;"	t
destroyPipeline	$SOKOL/gl.nim	/^proc destroyPipeline*(pip:Pipeline):void =$/;"	t
destroyShader	$SOKOL/gfx.nim	/^proc destroyShader*(shd:Shader):void =$/;"	t
diff	$SOKOL/time.nim	/^proc diff*(newTicks:uint64, oldTicks:uint64):uint64 =$/;"	t
disableTexture	$SOKOL/gl.nim	/^proc disableTexture*():void =$/;"	t
discardContext	$SOKOL/gfx.nim	/^proc discardContext*(ctxId:Context):void =$/;"	t
dpiScale	$SOKOL/app.nim	/^proc dpiScale*():float32 =$/;"	t
draw	$SOKOL/debugtext.nim	/^proc draw*():void =$/;"	t
draw	$SOKOL/gfx.nim	/^proc draw*(baseElement:int32, numElements:int32, numInstances:int32):void =$/;"	t
draw	$SOKOL/gl.nim	/^proc draw*():void =$/;"	t
drawLayer	$SOKOL/debugtext.nim	/^proc drawLayer*(layerId:int32):void =$/;"	t
drawLayer	$SOKOL/gl.nim	/^proc drawLayer*(layerId:int32):void =$/;"	t
eglGetContext	$SOKOL/app.nim	/^proc eglGetContext*():pointer =$/;"	t
eglGetDisplay	$SOKOL/app.nim	/^proc eglGetDisplay*():pointer =$/;"	t
elementRange	$SOKOL/shape.nim	/^proc elementRange*(buf:Buffer):ElementRange =$/;"	t
enableTexture	$SOKOL/gl.nim	/^proc enableTexture*():void =$/;"	t
end	$SOKOL/gl.nim	/^proc `end`*():void =$/;"	o
endPass	$SOKOL/gfx.nim	/^proc endPass*():void =$/;"	t
expect	$SOKOL/audio.nim	/^proc expect*():int32 =$/;"	t
failBuffer	$SOKOL/gfx.nim	/^proc failBuffer*(buf:Buffer):void =$/;"	t
failImage	$SOKOL/gfx.nim	/^proc failImage*(img:Image):void =$/;"	t
failPass	$SOKOL/gfx.nim	/^proc failPass*(pass:Pass):void =$/;"	t
failPipeline	$SOKOL/gfx.nim	/^proc failPipeline*(pip:Pipeline):void =$/;"	t
failShader	$SOKOL/gfx.nim	/^proc failShader*(shd:Shader):void =$/;"	t
fn	$SOKOL/log.nim	/^proc fn*(tag:cstring, logLevel:uint32, logItem:uint32, message:cstring, lineNr:uint32, filename:/;"	f
font	$SOKOL/debugtext.nim	/^proc font*(fontIndex:int32):void =$/;"	t
fontC64	$SOKOL/debugtext.nim	/^proc fontC64*():FontDesc =$/;"	t
fontCpc	$SOKOL/debugtext.nim	/^proc fontCpc*():FontDesc =$/;"	t
fontKc853	$SOKOL/debugtext.nim	/^proc fontKc853*():FontDesc =$/;"	t
fontKc854	$SOKOL/debugtext.nim	/^proc fontKc854*():FontDesc =$/;"	t
fontOric	$SOKOL/debugtext.nim	/^proc fontOric*():FontDesc =$/;"	t
fontZ1013	$SOKOL/debugtext.nim	/^proc fontZ1013*():FontDesc =$/;"	t
frameCount	$SOKOL/app.nim	/^proc frameCount*():uint64 =$/;"	t
frameDuration	$SOKOL/app.nim	/^proc frameDuration*():float64 =$/;"	t
frustum	$SOKOL/gl.nim	/^proc frustum*(l:float32, r:float32, b:float32, t:float32, n:float32, f:float32):void =$/;"	t
getClipboardString	$SOKOL/app.nim	/^proc getClipboardString*():cstring =$/;"	t
getContext	$SOKOL/debugtext.nim	/^proc getContext*():Context =$/;"	t
getContext	$SOKOL/gl.nim	/^proc getContext*():Context =$/;"	t
getDroppedFilePath	$SOKOL/app.nim	/^proc getDroppedFilePath*(index:int32):cstring =$/;"	t
getError	$SOKOL/gl.nim	/^proc getError*():Error =$/;"	t
getMouseCursor	$SOKOL/app.nim	/^proc getMouseCursor*():MouseCursor =$/;"	t
getNumDroppedFiles	$SOKOL/app.nim	/^proc getNumDroppedFiles*():int32 =$/;"	t
gl	$SOKOL/gfx.nim	/^  const gl*    = true$/;"	t
height	$SOKOL/app.nim	/^proc height*():int32 =$/;"	t
heightf	$SOKOL/app.nim	/^proc heightf*():float32 =$/;"	t
highDpi	$SOKOL/app.nim	/^proc highDpi*():bool =$/;"	t
home	$SOKOL/debugtext.nim	/^proc home*():void =$/;"	t
html5AskLeaveSite	$SOKOL/app.nim	/^proc html5AskLeaveSite*(ask:bool):void =$/;"	t
html5FetchDroppedFile	$SOKOL/app.nim	/^proc html5FetchDroppedFile*(request:Html5FetchRequest):void =$/;"	t
html5GetDroppedFileSize	$SOKOL/app.nim	/^proc html5GetDroppedFileSize*(index:int32):uint32 =$/;"	t
indexBufferDesc	$SOKOL/shape.nim	/^proc indexBufferDesc*(buf:Buffer):gfx.BufferDesc =$/;"	t
initBuffer	$SOKOL/gfx.nim	/^proc initBuffer*(buf:Buffer, desc:BufferDesc):void =$/;"	t
initImage	$SOKOL/gfx.nim	/^proc initImage*(img:Image, desc:ImageDesc):void =$/;"	t
initPass	$SOKOL/gfx.nim	/^proc initPass*(pass:Pass, desc:PassDesc):void =$/;"	t
initPipeline	$SOKOL/gfx.nim	/^proc initPipeline*(pip:Pipeline, desc:PipelineDesc):void =$/;"	t
initShader	$SOKOL/gfx.nim	/^proc initShader*(shd:Shader, desc:ShaderDesc):void =$/;"	t
installTraceHooks	$SOKOL/gfx.nim	/^proc installTraceHooks*(traceHooks:TraceHooks):TraceHooks =$/;"	t
invalidId	$SOKOL/gfx.nim	/^  invalidId* = 0$/;"	t
iosGetWindow	$SOKOL/app.nim	/^proc iosGetWindow*():pointer =$/;"	t
isFullscreen	$SOKOL/app.nim	/^proc isFullscreen*():bool =$/;"	t
isvalid	$SOKOL/app.nim	/^proc isvalid*():bool =$/;"	t
isvalid	$SOKOL/audio.nim	/^proc isvalid*():bool =$/;"	t
isvalid	$SOKOL/gfx.nim	/^proc isvalid*():bool =$/;"	t
keyboardShown	$SOKOL/app.nim	/^proc keyboardShown*():bool =$/;"	t
laptime	$SOKOL/time.nim	/^proc laptime*(lastTime:ptr uint64):uint64 =$/;"	t
layer	$SOKOL/debugtext.nim	/^proc layer*(layerId:int32):void =$/;"	t
layer	$SOKOL/gl.nim	/^proc layer*(layerId:int32):void =$/;"	t
loadDefaultPipeline	$SOKOL/gl.nim	/^proc loadDefaultPipeline*():void =$/;"	t
loadIdentity	$SOKOL/gl.nim	/^proc loadIdentity*():void =$/;"	t
loadMatrix	$SOKOL/gl.nim	/^proc loadMatrix*(m:ptr float32):void =$/;"	t
loadPipeline	$SOKOL/gl.nim	/^proc loadPipeline*(pip:Pipeline):void =$/;"	t
loadTransposeMatrix	$SOKOL/gl.nim	/^proc loadTransposeMatrix*(m:ptr float32):void =$/;"	t
lockMouse	$SOKOL/app.nim	/^proc lockMouse*(lock:bool):void =$/;"	t
lookat	$SOKOL/gl.nim	/^proc lookat*(eyeX:float32, eyeY:float32, eyeZ:float32, centerX:float32, centerY:float32, centerZ/;"	t
macosGetWindow	$SOKOL/app.nim	/^proc macosGetWindow*():pointer =$/;"	t
makeBuffer	$SOKOL/gfx.nim	/^proc makeBuffer*(desc:BufferDesc):Buffer =$/;"	t
makeContext	$SOKOL/debugtext.nim	/^proc makeContext*(desc:ContextDesc):Context =$/;"	t
makeContext	$SOKOL/gl.nim	/^proc makeContext*(desc:ContextDesc):Context =$/;"	t
makeImage	$SOKOL/gfx.nim	/^proc makeImage*(desc:ImageDesc):Image =$/;"	t
makePass	$SOKOL/gfx.nim	/^proc makePass*(desc:PassDesc):Pass =$/;"	t
makePipeline	$SOKOL/gfx.nim	/^proc makePipeline*(desc:PipelineDesc):Pipeline =$/;"	t
makePipeline	$SOKOL/gl.nim	/^proc makePipeline*(desc:gfx.PipelineDesc):Pipeline =$/;"	t
makeShader	$SOKOL/gfx.nim	/^proc makeShader*(desc:ShaderDesc):Shader =$/;"	t
mat4	$SOKOL/shape.nim	/^proc mat4*(m:ptr float32):Mat4 =$/;"	t
mat4Transpose	$SOKOL/shape.nim	/^proc mat4Transpose*(m:ptr float32):Mat4 =$/;"	t
matrixModeModelview	$SOKOL/gl.nim	/^proc matrixModeModelview*():void =$/;"	t
matrixModeProjection	$SOKOL/gl.nim	/^proc matrixModeProjection*():void =$/;"	t
matrixModeTexture	$SOKOL/gl.nim	/^proc matrixModeTexture*():void =$/;"	t
maxColorAttachments	$SOKOL/gfx.nim	/^  maxColorAttachments* = 4$/;"	t
maxIconimages	$SOKOL/app.nim	/^  maxIconimages* = 8$/;"	t
maxKeycodes	$SOKOL/app.nim	/^  maxKeycodes* = 512$/;"	t
maxMipmaps	$SOKOL/gfx.nim	/^  maxMipmaps* = 16$/;"	t
maxMousebuttons	$SOKOL/app.nim	/^  maxMousebuttons* = 3$/;"	t
maxShaderstageBuffers	$SOKOL/gfx.nim	/^  maxShaderstageBuffers* = 8$/;"	t
maxShaderstageImages	$SOKOL/gfx.nim	/^  maxShaderstageImages* = 12$/;"	t
maxShaderstageUbs	$SOKOL/gfx.nim	/^  maxShaderstageUbs* = 4$/;"	t
maxTexturearrayLayers	$SOKOL/gfx.nim	/^  maxTexturearrayLayers* = 128$/;"	t
maxTouchpoints	$SOKOL/app.nim	/^  maxTouchpoints* = 8$/;"	t
maxUbMembers	$SOKOL/gfx.nim	/^  maxUbMembers* = 16$/;"	t
maxVertexAttributes	$SOKOL/gfx.nim	/^  maxVertexAttributes* = 16$/;"	t
metal	$SOKOL/gfx.nim	/^  const metal* = true$/;"	t
metalGetDevice	$SOKOL/app.nim	/^proc metalGetDevice*():pointer =$/;"	t
metalGetDrawable	$SOKOL/app.nim	/^proc metalGetDrawable*():pointer =$/;"	t
metalGetRenderpassDescriptor	$SOKOL/app.nim	/^proc metalGetRenderpassDescriptor*():pointer =$/;"	t
modifierAlt	$SOKOL/app.nim	/^  modifierAlt* = 4$/;"	t
modifierCtrl	$SOKOL/app.nim	/^  modifierCtrl* = 2$/;"	t
modifierLmb	$SOKOL/app.nim	/^  modifierLmb* = 256$/;"	t
modifierMmb	$SOKOL/app.nim	/^  modifierMmb* = 1024$/;"	t
modifierRmb	$SOKOL/app.nim	/^  modifierRmb* = 512$/;"	t
modifierShift	$SOKOL/app.nim	/^  modifierShift* = 1$/;"	t
modifierSuper	$SOKOL/app.nim	/^  modifierSuper* = 8$/;"	t
mouseLocked	$SOKOL/app.nim	/^proc mouseLocked*():bool =$/;"	t
mouseShown	$SOKOL/app.nim	/^proc mouseShown*():bool =$/;"	t
move	$SOKOL/debugtext.nim	/^proc move*(dx:float32, dy:float32):void =$/;"	t
moveX	$SOKOL/debugtext.nim	/^proc moveX*(dx:float32):void =$/;"	t
moveY	$SOKOL/debugtext.nim	/^proc moveY*(dy:float32):void =$/;"	t
ms	$SOKOL/time.nim	/^proc ms*(ticks:uint64):float64 =$/;"	t
mtlDevice	$SOKOL/gfx.nim	/^proc mtlDevice*():pointer =$/;"	t
mtlRenderCommandEncoder	$SOKOL/gfx.nim	/^proc mtlRenderCommandEncoder*():pointer =$/;"	t
multMatrix	$SOKOL/gl.nim	/^proc multMatrix*(m:ptr float32):void =$/;"	t
multTransposeMatrix	$SOKOL/gl.nim	/^proc multTransposeMatrix*(m:ptr float32):void =$/;"	t
normalAttrDesc	$SOKOL/shape.nim	/^proc normalAttrDesc*():gfx.VertexAttrDesc =$/;"	t
now	$SOKOL/time.nim	/^proc now*():uint64 =$/;"	t
ns	$SOKOL/time.nim	/^proc ns*(ticks:uint64):float64 =$/;"	t
numInflightFrames	$SOKOL/gfx.nim	/^  numInflightFrames* = 2$/;"	t
numShaderStages	$SOKOL/gfx.nim	/^  numShaderStages* = 2$/;"	t
origin	$SOKOL/debugtext.nim	/^proc origin*(x:float32, y:float32):void =$/;"	t
ortho	$SOKOL/gl.nim	/^proc ortho*(l:float32, r:float32, b:float32, t:float32, n:float32, f:float32):void =$/;"	t
perspective	$SOKOL/gl.nim	/^proc perspective*(fovY:float32, aspect:float32, zNear:float32, zFar:float32):void =$/;"	t
planeSizes	$SOKOL/shape.nim	/^proc planeSizes*(tiles:uint32):Sizes =$/;"	t
pointSize	$SOKOL/gl.nim	/^proc pointSize*(s:float32):void =$/;"	t
popDebugGroup	$SOKOL/gfx.nim	/^proc popDebugGroup*():void =$/;"	t
popMatrix	$SOKOL/gl.nim	/^proc popMatrix*():void =$/;"	t
popPipeline	$SOKOL/gl.nim	/^proc popPipeline*():void =$/;"	t
pos	$SOKOL/debugtext.nim	/^proc pos*(x:float32, y:float32):void =$/;"	t
posX	$SOKOL/debugtext.nim	/^proc posX*(x:float32):void =$/;"	t
posY	$SOKOL/debugtext.nim	/^proc posY*(y:float32):void =$/;"	t
positionAttrDesc	$SOKOL/shape.nim	/^proc positionAttrDesc*():gfx.VertexAttrDesc =$/;"	t
push	$SOKOL/audio.nim	/^proc push*(frames:ptr float32, numFrames:int32):int32 =$/;"	t
pushDebugGroup	$SOKOL/gfx.nim	/^proc pushDebugGroup*(name:cstring):void =$/;"	t
pushMatrix	$SOKOL/gl.nim	/^proc pushMatrix*():void =$/;"	t
pushPipeline	$SOKOL/gl.nim	/^proc pushPipeline*():void =$/;"	t
putc	$SOKOL/debugtext.nim	/^proc putc*(c:char):void =$/;"	t
putr	$SOKOL/debugtext.nim	/^proc putr*(str:cstring, len:int32):void =$/;"	t
puts	$SOKOL/debugtext.nim	/^proc puts*(str:cstring):void =$/;"	t
queryBackend	$SOKOL/gfx.nim	/^proc queryBackend*():Backend =$/;"	t
queryBufferDefaults	$SOKOL/gfx.nim	/^proc queryBufferDefaults*(desc:BufferDesc):BufferDesc =$/;"	t
queryBufferDesc	$SOKOL/gfx.nim	/^proc queryBufferDesc*(buf:Buffer):BufferDesc =$/;"	t
queryBufferInfo	$SOKOL/gfx.nim	/^proc queryBufferInfo*(buf:Buffer):BufferInfo =$/;"	t
queryBufferOverflow	$SOKOL/gfx.nim	/^proc queryBufferOverflow*(buf:Buffer):bool =$/;"	t
queryBufferState	$SOKOL/gfx.nim	/^proc queryBufferState*(buf:Buffer):ResourceState =$/;"	t
queryBufferWillOverflow	$SOKOL/gfx.nim	/^proc queryBufferWillOverflow*(buf:Buffer, size:int):bool =$/;"	t
queryDesc	$SOKOL/app.nim	/^proc queryDesc*():Desc =$/;"	t
queryDesc	$SOKOL/audio.nim	/^proc queryDesc*():Desc =$/;"	t
queryDesc	$SOKOL/gfx.nim	/^proc queryDesc*():Desc =$/;"	t
queryFeatures	$SOKOL/gfx.nim	/^proc queryFeatures*():Features =$/;"	t
queryImageDefaults	$SOKOL/gfx.nim	/^proc queryImageDefaults*(desc:ImageDesc):ImageDesc =$/;"	t
queryImageDesc	$SOKOL/gfx.nim	/^proc queryImageDesc*(img:Image):ImageDesc =$/;"	t
queryImageInfo	$SOKOL/gfx.nim	/^proc queryImageInfo*(img:Image):ImageInfo =$/;"	t
queryImageState	$SOKOL/gfx.nim	/^proc queryImageState*(img:Image):ResourceState =$/;"	t
queryLimits	$SOKOL/gfx.nim	/^proc queryLimits*():Limits =$/;"	t
queryPassDefaults	$SOKOL/gfx.nim	/^proc queryPassDefaults*(desc:PassDesc):PassDesc =$/;"	t
queryPassDesc	$SOKOL/gfx.nim	/^proc queryPassDesc*(pass:Pass):PassDesc =$/;"	t
queryPassInfo	$SOKOL/gfx.nim	/^proc queryPassInfo*(pass:Pass):PassInfo =$/;"	t
queryPassState	$SOKOL/gfx.nim	/^proc queryPassState*(pass:Pass):ResourceState =$/;"	t
queryPipelineDefaults	$SOKOL/gfx.nim	/^proc queryPipelineDefaults*(desc:PipelineDesc):PipelineDesc =$/;"	t
queryPipelineDesc	$SOKOL/gfx.nim	/^proc queryPipelineDesc*(pip:Pipeline):PipelineDesc =$/;"	t
queryPipelineInfo	$SOKOL/gfx.nim	/^proc queryPipelineInfo*(pip:Pipeline):PipelineInfo =$/;"	t
queryPipelineState	$SOKOL/gfx.nim	/^proc queryPipelineState*(pip:Pipeline):ResourceState =$/;"	t
queryPixelformat	$SOKOL/gfx.nim	/^proc queryPixelformat*(fmt:PixelFormat):PixelformatInfo =$/;"	t
queryShaderDefaults	$SOKOL/gfx.nim	/^proc queryShaderDefaults*(desc:ShaderDesc):ShaderDesc =$/;"	t
queryShaderDesc	$SOKOL/gfx.nim	/^proc queryShaderDesc*(shd:Shader):ShaderDesc =$/;"	t
queryShaderInfo	$SOKOL/gfx.nim	/^proc queryShaderInfo*(shd:Shader):ShaderInfo =$/;"	t
queryShaderState	$SOKOL/gfx.nim	/^proc queryShaderState*(shd:Shader):ResourceState =$/;"	t
quit	$SOKOL/app.nim	/^proc quit*():void =$/;"	t
ref	$SOKOL/gfx.nim	/^  `ref`*:uint8$/;"	o
removeCommitListener	$SOKOL/gfx.nim	/^proc removeCommitListener*(listener:CommitListener):bool =$/;"	t
requestQuit	$SOKOL/app.nim	/^proc requestQuit*():void =$/;"	t
resetStateCache	$SOKOL/gfx.nim	/^proc resetStateCache*():void =$/;"	t
rotate	$SOKOL/gl.nim	/^proc rotate*(angleRad:float32, x:float32, y:float32, z:float32):void =$/;"	t
roundToCommonRefreshRate	$SOKOL/time.nim	/^proc roundToCommonRefreshRate*(frameTicks:uint64):uint64 =$/;"	t
run	$SOKOL/app.nim	/^proc run*(desc:Desc):void =$/;"	t
sampleCount	$SOKOL/app.nim	/^proc sampleCount*():int32 =$/;"	t
sampleRate	$SOKOL/audio.nim	/^proc sampleRate*():int32 =$/;"	t
scale	$SOKOL/gl.nim	/^proc scale*(x:float32, y:float32, z:float32):void =$/;"	t
scissorRect	$SOKOL/gl.nim	/^proc scissorRect*(x:int32, y:int32, w:int32, h:int32, originTopLeft:bool):void =$/;"	t
scissorRectf	$SOKOL/gl.nim	/^proc scissorRectf*(x:float32, y:float32, w:float32, h:float32, originTopLeft:bool):void =$/;"	t
sec	$SOKOL/time.nim	/^proc sec*(ticks:uint64):float64 =$/;"	t
setClipboardString	$SOKOL/app.nim	/^proc setClipboardString*(str:cstring):void =$/;"	t
setContext	$SOKOL/debugtext.nim	/^proc setContext*(ctx:Context):void =$/;"	t
setContext	$SOKOL/gl.nim	/^proc setContext*(ctx:Context):void =$/;"	t
setIcon	$SOKOL/app.nim	/^proc setIcon*(iconDesc:IconDesc):void =$/;"	t
setMouseCursor	$SOKOL/app.nim	/^proc setMouseCursor*(cursor:MouseCursor):void =$/;"	t
setWindowTitle	$SOKOL/app.nim	/^proc setWindowTitle*(str:cstring):void =$/;"	t
setup	$SOKOL/audio.nim	/^proc setup*(desc:Desc):void =$/;"	t
setup	$SOKOL/debugtext.nim	/^proc setup*(desc:Desc):void =$/;"	t
setup	$SOKOL/gfx.nim	/^proc setup*(desc:Desc):void =$/;"	t
setup	$SOKOL/gl.nim	/^proc setup*(desc:Desc):void =$/;"	t
setup	$SOKOL/time.nim	/^proc setup*():void =$/;"	t
setupContext	$SOKOL/gfx.nim	/^proc setupContext*():Context =$/;"	t
showKeyboard	$SOKOL/app.nim	/^proc showKeyboard*(show:bool):void =$/;"	t
showMouse	$SOKOL/app.nim	/^proc showMouse*(show:bool):void =$/;"	t
shutdown	$SOKOL/audio.nim	/^proc shutdown*():void =$/;"	t
shutdown	$SOKOL/debugtext.nim	/^proc shutdown*():void =$/;"	t
shutdown	$SOKOL/gfx.nim	/^proc shutdown*():void =$/;"	t
shutdown	$SOKOL/gl.nim	/^proc shutdown*():void =$/;"	t
since	$SOKOL/time.nim	/^proc since*(startTicks:uint64):uint64 =$/;"	t
sphereSizes	$SOKOL/shape.nim	/^proc sphereSizes*(slices:uint32, stacks:uint32):Sizes =$/;"	t
suspended	$SOKOL/audio.nim	/^proc suspended*():bool =$/;"	t
t2f	$SOKOL/gl.nim	/^proc t2f*(u:float32, v:float32):void =$/;"	t
texcoordAttrDesc	$SOKOL/shape.nim	/^proc texcoordAttrDesc*():gfx.VertexAttrDesc =$/;"	t
texture	$SOKOL/gl.nim	/^proc texture*(img:gfx.Image):void =$/;"	t
toBindingsfsImages	$SOKOL/gfx.nim	/^converter toBindingsfsImages*[N:static[int]](items: array[N, Image]): array[12, Image] =$/;"	t
toBindingsvertexBufferOffsets	$SOKOL/gfx.nim	/^converter toBindingsvertexBufferOffsets*[N:static[int]](items: array[N, int32]): array[8, int32]/;"	t
toBindingsvertexBuffers	$SOKOL/gfx.nim	/^converter toBindingsvertexBuffers*[N:static[int]](items: array[N, Buffer]): array[8, Buffer] =$/;"	t
toBindingsvsImages	$SOKOL/gfx.nim	/^converter toBindingsvsImages*[N:static[int]](items: array[N, Image]): array[12, Image] =$/;"	t
toBufferDescglBuffers	$SOKOL/gfx.nim	/^converter toBufferDescglBuffers*[N:static[int]](items: array[N, uint32]): array[2, uint32] =$/;"	t
toBufferDescmtlBuffers	$SOKOL/gfx.nim	/^converter toBufferDescmtlBuffers*[N:static[int]](items: array[N, pointer]): array[2, pointer] =$/;"	t
toColor	$SOKOL/gfx.nim	/^converter toColor*[R:SomeNumber,G:SomeNumber,B:SomeNumber](rgba: tuple [r:R,g:G,b:B]):Color =$/;"	t
toDescfonts	$SOKOL/debugtext.nim	/^converter toDescfonts*[N:static[int]](items: array[N, FontDesc]): array[8, FontDesc] =$/;"	t
toEventtouches	$SOKOL/app.nim	/^converter toEventtouches*[N:static[int]](items: array[N, Touchpoint]): array[8, Touchpoint] =$/;"	t
toIconDescimages	$SOKOL/app.nim	/^converter toIconDescimages*[N:static[int]](items: array[N, ImageDesc]): array[8, ImageDesc] =$/;"	t
toImageDatasubimage	$SOKOL/gfx.nim	/^converter toImageDatasubimage*[Y:static[int], X:static[int]](items: array[Y, array[X, Range]]): /;"	t
toImageDescglTextures	$SOKOL/gfx.nim	/^converter toImageDescglTextures*[N:static[int]](items: array[N, uint32]): array[2, uint32] =$/;"	t
toImageDescmtlTextures	$SOKOL/gfx.nim	/^converter toImageDescmtlTextures*[N:static[int]](items: array[N, pointer]): array[2, pointer] =$/;"	t
toLayoutDescattrs	$SOKOL/gfx.nim	/^converter toLayoutDescattrs*[N:static[int]](items: array[N, VertexAttrDesc]): array[16, VertexAt/;"	t
toLayoutDescbuffers	$SOKOL/gfx.nim	/^converter toLayoutDescbuffers*[N:static[int]](items: array[N, BufferLayoutDesc]): array[8, Buffe/;"	t
toMat4m	$SOKOL/shape.nim	/^converter toMat4m*[Y:static[int], X:static[int]](items: array[Y, array[X, float32]]): array[4, a/;"	t
toPassActioncolors	$SOKOL/gfx.nim	/^converter toPassActioncolors*[N:static[int]](items: array[N, ColorAttachmentAction]): array[4, C/;"	t
toPassDesccolorAttachments	$SOKOL/gfx.nim	/^converter toPassDesccolorAttachments*[N:static[int]](items: array[N, PassAttachmentDesc]): array/;"	t
toPassDescresolveAttachments	$SOKOL/gfx.nim	/^converter toPassDescresolveAttachments*[N:static[int]](items: array[N, PassAttachmentDesc]): arr/;"	t
toPipelineDesccolors	$SOKOL/gfx.nim	/^converter toPipelineDesccolors*[N:static[int]](items: array[N, ColorState]): array[4, ColorState/;"	t
toShaderDescattrs	$SOKOL/gfx.nim	/^converter toShaderDescattrs*[N:static[int]](items: array[N, ShaderAttrDesc]): array[16, ShaderAt/;"	t
toShaderStageDescimages	$SOKOL/gfx.nim	/^converter toShaderStageDescimages*[N:static[int]](items: array[N, ShaderImageDesc]): array[12, S/;"	t
toShaderStageDescuniformBlocks	$SOKOL/gfx.nim	/^converter toShaderStageDescuniformBlocks*[N:static[int]](items: array[N, ShaderUniformBlockDesc]/;"	t
toShaderUniformBlockDescuniforms	$SOKOL/gfx.nim	/^converter toShaderUniformBlockDescuniforms*[N:static[int]](items: array[N, ShaderUniformDesc]): /;"	t
toggleFullscreen	$SOKOL/app.nim	/^proc toggleFullscreen*():void =$/;"	t
torusSizes	$SOKOL/shape.nim	/^proc torusSizes*(sides:uint32, rings:uint32):Sizes =$/;"	t
translate	$SOKOL/gl.nim	/^proc translate*(x:float32, y:float32, z:float32):void =$/;"	t
type	$SOKOL/app.nim	/^  `type`*:EventType$/;"	o
type	$SOKOL/gfx.nim	/^  `type`*:UniformType$/;"	o
uninitBuffer	$SOKOL/gfx.nim	/^proc uninitBuffer*(buf:Buffer):void =$/;"	t
uninitImage	$SOKOL/gfx.nim	/^proc uninitImage*(img:Image):void =$/;"	t
uninitPass	$SOKOL/gfx.nim	/^proc uninitPass*(pass:Pass):void =$/;"	t
uninitPipeline	$SOKOL/gfx.nim	/^proc uninitPipeline*(pip:Pipeline):void =$/;"	t
uninitShader	$SOKOL/gfx.nim	/^proc uninitShader*(shd:Shader):void =$/;"	t
updateBuffer	$SOKOL/gfx.nim	/^proc updateBuffer*(buf:Buffer, data:Range):void =$/;"	t
updateImage	$SOKOL/gfx.nim	/^proc updateImage*(img:Image, data:ImageData):void =$/;"	t
us	$SOKOL/time.nim	/^proc us*(ticks:uint64):float64 =$/;"	t
userdata	$SOKOL/app.nim	/^proc userdata*():pointer =$/;"	t
userdata	$SOKOL/audio.nim	/^proc userdata*():pointer =$/;"	t
v2f	$SOKOL/gl.nim	/^proc v2f*(x:float32, y:float32):void =$/;"	t
v2fC1i	$SOKOL/gl.nim	/^proc v2fC1i*(x:float32, y:float32, rgba:uint32):void =$/;"	t
v2fC3b	$SOKOL/gl.nim	/^proc v2fC3b*(x:float32, y:float32, r:uint8, g:uint8, b:uint8):void =$/;"	t
v2fC3f	$SOKOL/gl.nim	/^proc v2fC3f*(x:float32, y:float32, r:float32, g:float32, b:float32):void =$/;"	t
v2fC4b	$SOKOL/gl.nim	/^proc v2fC4b*(x:float32, y:float32, r:uint8, g:uint8, b:uint8, a:uint8):void =$/;"	t
v2fC4f	$SOKOL/gl.nim	/^proc v2fC4f*(x:float32, y:float32, r:float32, g:float32, b:float32, a:float32):void =$/;"	t
v2fT2f	$SOKOL/gl.nim	/^proc v2fT2f*(x:float32, y:float32, u:float32, v:float32):void =$/;"	t
v2fT2fC1i	$SOKOL/gl.nim	/^proc v2fT2fC1i*(x:float32, y:float32, u:float32, v:float32, rgba:uint32):void =$/;"	t
v2fT2fC3b	$SOKOL/gl.nim	/^proc v2fT2fC3b*(x:float32, y:float32, u:float32, v:float32, r:uint8, g:uint8, b:uint8):void =$/;"	t
v2fT2fC3f	$SOKOL/gl.nim	/^proc v2fT2fC3f*(x:float32, y:float32, u:float32, v:float32, r:float32, g:float32, b:float32):voi/;"	t
v2fT2fC4b	$SOKOL/gl.nim	/^proc v2fT2fC4b*(x:float32, y:float32, u:float32, v:float32, r:uint8, g:uint8, b:uint8, a:uint8):/;"	t
v2fT2fC4f	$SOKOL/gl.nim	/^proc v2fT2fC4f*(x:float32, y:float32, u:float32, v:float32, r:float32, g:float32, b:float32, a:f/;"	t
v3f	$SOKOL/gl.nim	/^proc v3f*(x:float32, y:float32, z:float32):void =$/;"	t
v3fC1i	$SOKOL/gl.nim	/^proc v3fC1i*(x:float32, y:float32, z:float32, rgba:uint32):void =$/;"	t
v3fC3b	$SOKOL/gl.nim	/^proc v3fC3b*(x:float32, y:float32, z:float32, r:uint8, g:uint8, b:uint8):void =$/;"	t
v3fC3f	$SOKOL/gl.nim	/^proc v3fC3f*(x:float32, y:float32, z:float32, r:float32, g:float32, b:float32):void =$/;"	t
v3fC4b	$SOKOL/gl.nim	/^proc v3fC4b*(x:float32, y:float32, z:float32, r:uint8, g:uint8, b:uint8, a:uint8):void =$/;"	t
v3fC4f	$SOKOL/gl.nim	/^proc v3fC4f*(x:float32, y:float32, z:float32, r:float32, g:float32, b:float32, a:float32):void =$/;"	t
v3fT2f	$SOKOL/gl.nim	/^proc v3fT2f*(x:float32, y:float32, z:float32, u:float32, v:float32):void =$/;"	t
v3fT2fC1i	$SOKOL/gl.nim	/^proc v3fT2fC1i*(x:float32, y:float32, z:float32, u:float32, v:float32, rgba:uint32):void =$/;"	t
v3fT2fC3b	$SOKOL/gl.nim	/^proc v3fT2fC3b*(x:float32, y:float32, z:float32, u:float32, v:float32, r:uint8, g:uint8, b:uint8/;"	t
v3fT2fC3f	$SOKOL/gl.nim	/^proc v3fT2fC3f*(x:float32, y:float32, z:float32, u:float32, v:float32, r:float32, g:float32, b:f/;"	t
v3fT2fC4b	$SOKOL/gl.nim	/^proc v3fT2fC4b*(x:float32, y:float32, z:float32, u:float32, v:float32, r:uint8, g:uint8, b:uint8/;"	t
v3fT2fC4f	$SOKOL/gl.nim	/^proc v3fT2fC4f*(x:float32, y:float32, z:float32, u:float32, v:float32, r:float32, g:float32, b:f/;"	t
vertexBufferDesc	$SOKOL/shape.nim	/^proc vertexBufferDesc*(buf:Buffer):gfx.BufferDesc =$/;"	t
viewport	$SOKOL/gl.nim	/^proc viewport*(x:int32, y:int32, w:int32, h:int32, originTopLeft:bool):void =$/;"	t
viewportf	$SOKOL/gl.nim	/^proc viewportf*(x:float32, y:float32, w:float32, h:float32, originTopLeft:bool):void =$/;"	t
wgpuGetDepthStencilView	$SOKOL/app.nim	/^proc wgpuGetDepthStencilView*():pointer =$/;"	t
wgpuGetDevice	$SOKOL/app.nim	/^proc wgpuGetDevice*():pointer =$/;"	t
wgpuGetRenderView	$SOKOL/app.nim	/^proc wgpuGetRenderView*():pointer =$/;"	t
wgpuGetResolveView	$SOKOL/app.nim	/^proc wgpuGetResolveView*():pointer =$/;"	t
width	$SOKOL/app.nim	/^proc width*():int32 =$/;"	t
widthf	$SOKOL/app.nim	/^proc widthf*():float32 =$/;"	t
win32GetHwnd	$SOKOL/app.nim	/^proc win32GetHwnd*():pointer =$/;"	t
