AttachAudioMixedProcessor	$RAYLIB/raylib.oc	/^[extern] def AttachAudioMixedProcessor(processor: AudioCallback): u8$/;"	f
AttachAudioStreamProcessor	$RAYLIB/raylib.oc	/^[extern] def AttachAudioStreamProcessor(stream: AudioStream, processor: AudioCallback): u8$/;"	f
AudioCallback	$RAYLIB/raylib.oc	/^typedef AudioCallback = fn(untyped_ptr, u32): u8$/;"	f
AudioProcessor	$RAYLIB/raylib.oc	/^typedef AudioProcessor = rAudioProcessor$/;"	f
AudioStream	$RAYLIB/raylib.oc	/^typedef AudioStream = AudioStream$/;"	f
AutomationEvent	$RAYLIB/raylib.oc	/^[extern] struct AutomationEvent {$/;"	f
AutomationEventList	$RAYLIB/raylib.oc	/^[extern] struct AutomationEventList {$/;"	f
BEIGE	$RAYLIB/raylib.oc	/^[extern] const BEIGE: Color$/;"	f
BLACK	$RAYLIB/raylib.oc	/^[extern] const BLACK: Color$/;"	f
BLANK	$RAYLIB/raylib.oc	/^[extern] const BLANK: Color$/;"	f
BLUE	$RAYLIB/raylib.oc	/^[extern] const BLUE: Color$/;"	f
BROWN	$RAYLIB/raylib.oc	/^[extern] const BROWN: Color$/;"	f
BeginBlendMode	$RAYLIB/raylib.oc	/^[extern] def BeginBlendMode(mode: i32): u8$/;"	f
BeginDrawing	$RAYLIB/raylib.oc	/^[extern] def BeginDrawing(): u8$/;"	f
BeginMode2D	$RAYLIB/raylib.oc	/^[extern] def BeginMode2D(camera: Camera2D): u8$/;"	f
BeginMode3D	$RAYLIB/raylib.oc	/^[extern] def BeginMode3D(camera: Camera3D): u8$/;"	f
BeginScissorMode	$RAYLIB/raylib.oc	/^[extern] def BeginScissorMode(x: i32, y: i32, width: i32, height: i32): u8$/;"	f
BeginShaderMode	$RAYLIB/raylib.oc	/^[extern] def BeginShaderMode(shader: Shader): u8$/;"	f
BeginTextureMode	$RAYLIB/raylib.oc	/^[extern] def BeginTextureMode(target: RenderTexture2D): u8$/;"	f
BeginVrStereoMode	$RAYLIB/raylib.oc	/^[extern] def BeginVrStereoMode(config: VrStereoConfig): u8$/;"	f
BlendMode	$RAYLIB/raylib.oc	/^[extern] enum BlendMode {$/;"	f
BoneInfo	$RAYLIB/raylib.oc	/^[extern] struct BoneInfo {$/;"	f
BoundingBox	$RAYLIB/raylib.oc	/^[extern] struct BoundingBox {$/;"	f
Camera	$RAYLIB/raylib.oc	/^typedef Camera = Camera3D$/;"	f
Camera2D	$RAYLIB/raylib.oc	/^[extern] struct Camera2D {$/;"	f
Camera3D	$RAYLIB/raylib.oc	/^[extern] struct Camera3D {$/;"	f
CameraMode	$RAYLIB/raylib.oc	/^[extern] enum CameraMode {$/;"	f
CameraProjection	$RAYLIB/raylib.oc	/^[extern] enum CameraProjection {$/;"	f
ChangeDirectory	$RAYLIB/raylib.oc	/^[extern] def ChangeDirectory(dir: &char): bool$/;"	f
CheckCollisionBoxSphere	$RAYLIB/raylib.oc	/^[extern] def CheckCollisionBoxSphere(box: BoundingBox, center: Vector3, radius: f32): bool$/;"	f
CheckCollisionBoxes	$RAYLIB/raylib.oc	/^[extern] def CheckCollisionBoxes(box1: BoundingBox, box2: BoundingBox): bool$/;"	f
CheckCollisionCircleRec	$RAYLIB/raylib.oc	/^[extern] def CheckCollisionCircleRec(center: Vector2, radius: f32, rec: Rectangle): bool$/;"	f
CheckCollisionCircles	$RAYLIB/raylib.oc	/^[extern] def CheckCollisionCircles(center1: Vector2, radius1: f32, center2: Vector2, radius2: f3/;"	f
CheckCollisionLines	$RAYLIB/raylib.oc	/^[extern] def CheckCollisionLines(startPos1: Vector2, endPos1: Vector2, startPos2: Vector2, endPo/;"	f
CheckCollisionPointCircle	$RAYLIB/raylib.oc	/^[extern] def CheckCollisionPointCircle(point: Vector2, center: Vector2, radius: f32): bool$/;"	f
CheckCollisionPointLine	$RAYLIB/raylib.oc	/^[extern] def CheckCollisionPointLine(point: Vector2, p1: Vector2, p2: Vector2, threshold: i32): /;"	f
CheckCollisionPointPoly	$RAYLIB/raylib.oc	/^[extern] def CheckCollisionPointPoly(point: Vector2, points: &Vector2, pointCount: i32): bool$/;"	f
CheckCollisionPointRec	$RAYLIB/raylib.oc	/^[extern] def CheckCollisionPointRec(point: Vector2, rec: Rectangle): bool$/;"	f
CheckCollisionPointTriangle	$RAYLIB/raylib.oc	/^[extern] def CheckCollisionPointTriangle(point: Vector2, p1: Vector2, p2: Vector2, p3: Vector2):/;"	f
CheckCollisionRecs	$RAYLIB/raylib.oc	/^[extern] def CheckCollisionRecs(rec1: Rectangle, rec2: Rectangle): bool$/;"	f
CheckCollisionSpheres	$RAYLIB/raylib.oc	/^[extern] def CheckCollisionSpheres(center1: Vector3, radius1: f32, center2: Vector3, radius2: f3/;"	f
ClearBackground	$RAYLIB/raylib.oc	/^[extern] def ClearBackground(color: Color): u8$/;"	f
ClearWindowState	$RAYLIB/raylib.oc	/^[extern] def ClearWindowState(flags: u32): u8$/;"	f
CloseAudioDevice	$RAYLIB/raylib.oc	/^[extern] def CloseAudioDevice(): u8$/;"	f
CloseWindow	$RAYLIB/raylib.oc	/^[extern] def CloseWindow(): u8$/;"	f
CodepointToUTF8	$RAYLIB/raylib.oc	/^[extern] def CodepointToUTF8(codepoint: i32, utf8Size: &i32): &char$/;"	f
Color	$RAYLIB/raylib.oc	/^[extern] struct Color {$/;"	f
ColorAlpha	$RAYLIB/raylib.oc	/^[extern] def ColorAlpha(color: Color, alpha: f32): Color$/;"	f
ColorAlphaBlend	$RAYLIB/raylib.oc	/^[extern] def ColorAlphaBlend(dst: Color, src: Color, tint: Color): Color$/;"	f
ColorBrightness	$RAYLIB/raylib.oc	/^[extern] def ColorBrightness(color: Color, factor: f32): Color$/;"	f
ColorContrast	$RAYLIB/raylib.oc	/^[extern] def ColorContrast(color: Color, contrast: f32): Color$/;"	f
ColorFromHSV	$RAYLIB/raylib.oc	/^[extern] def ColorFromHSV(hue: f32, saturation: f32, value: f32): Color$/;"	f
ColorFromNormalized	$RAYLIB/raylib.oc	/^[extern] def ColorFromNormalized(normalized: Vector4): Color$/;"	f
ColorIsEqual	$RAYLIB/raylib.oc	/^[extern] def ColorIsEqual(col1: Color, col2: Color): bool$/;"	f
ColorNormalize	$RAYLIB/raylib.oc	/^[extern] def ColorNormalize(color: Color): Vector4$/;"	f
ColorTint	$RAYLIB/raylib.oc	/^[extern] def ColorTint(color: Color, tint: Color): Color$/;"	f
ColorToHSV	$RAYLIB/raylib.oc	/^[extern] def ColorToHSV(color: Color): Vector3$/;"	f
ColorToInt	$RAYLIB/raylib.oc	/^[extern] def ColorToInt(color: Color): i32$/;"	f
CompressData	$RAYLIB/raylib.oc	/^[extern] def CompressData(data: &u8, dataSize: i32, compDataSize: &i32): &u8$/;"	f
ConfigFlags	$RAYLIB/raylib.oc	/^[extern] enum ConfigFlags {$/;"	f
CubemapLayout	$RAYLIB/raylib.oc	/^[extern] enum CubemapLayout {$/;"	f
DARKBLUE	$RAYLIB/raylib.oc	/^[extern] const DARKBLUE: Color$/;"	f
DARKBROWN	$RAYLIB/raylib.oc	/^[extern] const DARKBROWN: Color$/;"	f
DARKGRAY	$RAYLIB/raylib.oc	/^[extern] const DARKGRAY: Color$/;"	f
DARKGREEN	$RAYLIB/raylib.oc	/^[extern] const DARKGREEN: Color$/;"	f
DARKPURPLE	$RAYLIB/raylib.oc	/^[extern] const DARKPURPLE: Color$/;"	f
DEG2RAD	$RAYLIB/raylib.oc	/^[extern] const DEG2RAD: f32$/;"	f
DecodeDataBase64	$RAYLIB/raylib.oc	/^[extern] def DecodeDataBase64(data: &u8, outputSize: &i32): &u8$/;"	f
DecompressData	$RAYLIB/raylib.oc	/^[extern] def DecompressData(compData: &u8, compDataSize: i32, dataSize: &i32): &u8$/;"	f
DetachAudioMixedProcessor	$RAYLIB/raylib.oc	/^[extern] def DetachAudioMixedProcessor(processor: AudioCallback): u8$/;"	f
DetachAudioStreamProcessor	$RAYLIB/raylib.oc	/^[extern] def DetachAudioStreamProcessor(stream: AudioStream, processor: AudioCallback): u8$/;"	f
DirectoryExists	$RAYLIB/raylib.oc	/^[extern] def DirectoryExists(dirPath: &char): bool$/;"	f
DisableCursor	$RAYLIB/raylib.oc	/^[extern] def DisableCursor(): u8$/;"	f
DisableEventWaiting	$RAYLIB/raylib.oc	/^[extern] def DisableEventWaiting(): u8$/;"	f
DrawBillboard	$RAYLIB/raylib.oc	/^[extern] def DrawBillboard(camera: Camera, texture: Texture2D, position: Vector3, size: f32, tin/;"	f
DrawBillboardPro	$RAYLIB/raylib.oc	/^[extern] def DrawBillboardPro(camera: Camera, texture: Texture2D, source: Rectangle, position: V/;"	f
DrawBillboardRec	$RAYLIB/raylib.oc	/^[extern] def DrawBillboardRec(camera: Camera, texture: Texture2D, source: Rectangle, position: V/;"	f
DrawBoundingBox	$RAYLIB/raylib.oc	/^[extern] def DrawBoundingBox(box: BoundingBox, color: Color): u8$/;"	f
DrawCapsule	$RAYLIB/raylib.oc	/^[extern] def DrawCapsule(startPos: Vector3, endPos: Vector3, radius: f32, slices: i32, rings: i3/;"	f
DrawCapsuleWires	$RAYLIB/raylib.oc	/^[extern] def DrawCapsuleWires(startPos: Vector3, endPos: Vector3, radius: f32, slices: i32, ring/;"	f
DrawCircle	$RAYLIB/raylib.oc	/^[extern] def DrawCircle(centerX: i32, centerY: i32, radius: f32, color: Color): u8$/;"	f
DrawCircle3D	$RAYLIB/raylib.oc	/^[extern] def DrawCircle3D(center: Vector3, radius: f32, rotationAxis: Vector3, rotationAngle: f3/;"	f
DrawCircleGradient	$RAYLIB/raylib.oc	/^[extern] def DrawCircleGradient(centerX: i32, centerY: i32, radius: f32, color1: Color, color2: /;"	f
DrawCircleLines	$RAYLIB/raylib.oc	/^[extern] def DrawCircleLines(centerX: i32, centerY: i32, radius: f32, color: Color): u8$/;"	f
DrawCircleLinesV	$RAYLIB/raylib.oc	/^[extern] def DrawCircleLinesV(center: Vector2, radius: f32, color: Color): u8$/;"	f
DrawCircleSector	$RAYLIB/raylib.oc	/^[extern] def DrawCircleSector(center: Vector2, radius: f32, startAngle: f32, endAngle: f32, segm/;"	f
DrawCircleSectorLines	$RAYLIB/raylib.oc	/^[extern] def DrawCircleSectorLines(center: Vector2, radius: f32, startAngle: f32, endAngle: f32,/;"	f
DrawCircleV	$RAYLIB/raylib.oc	/^[extern] def DrawCircleV(center: Vector2, radius: f32, color: Color): u8$/;"	f
DrawCube	$RAYLIB/raylib.oc	/^[extern] def DrawCube(position: Vector3, width: f32, height: f32, length: f32, color: Color): u8$/;"	f
DrawCubeV	$RAYLIB/raylib.oc	/^[extern] def DrawCubeV(position: Vector3, size: Vector3, color: Color): u8$/;"	f
DrawCubeWires	$RAYLIB/raylib.oc	/^[extern] def DrawCubeWires(position: Vector3, width: f32, height: f32, length: f32, color: Color/;"	f
DrawCubeWiresV	$RAYLIB/raylib.oc	/^[extern] def DrawCubeWiresV(position: Vector3, size: Vector3, color: Color): u8$/;"	f
DrawCylinder	$RAYLIB/raylib.oc	/^[extern] def DrawCylinder(position: Vector3, radiusTop: f32, radiusBottom: f32, height: f32, sli/;"	f
DrawCylinderEx	$RAYLIB/raylib.oc	/^[extern] def DrawCylinderEx(startPos: Vector3, endPos: Vector3, startRadius: f32, endRadius: f32/;"	f
DrawCylinderWires	$RAYLIB/raylib.oc	/^[extern] def DrawCylinderWires(position: Vector3, radiusTop: f32, radiusBottom: f32, height: f32/;"	f
DrawCylinderWiresEx	$RAYLIB/raylib.oc	/^[extern] def DrawCylinderWiresEx(startPos: Vector3, endPos: Vector3, startRadius: f32, endRadius/;"	f
DrawEllipse	$RAYLIB/raylib.oc	/^[extern] def DrawEllipse(centerX: i32, centerY: i32, radiusH: f32, radiusV: f32, color: Color): /;"	f
DrawEllipseLines	$RAYLIB/raylib.oc	/^[extern] def DrawEllipseLines(centerX: i32, centerY: i32, radiusH: f32, radiusV: f32, color: Col/;"	f
DrawFPS	$RAYLIB/raylib.oc	/^[extern] def DrawFPS(posX: i32, posY: i32): u8$/;"	f
DrawGrid	$RAYLIB/raylib.oc	/^[extern] def DrawGrid(slices: i32, spacing: f32): u8$/;"	f
DrawLine	$RAYLIB/raylib.oc	/^[extern] def DrawLine(startPosX: i32, startPosY: i32, endPosX: i32, endPosY: i32, color: Color):/;"	f
DrawLine3D	$RAYLIB/raylib.oc	/^[extern] def DrawLine3D(startPos: Vector3, endPos: Vector3, color: Color): u8$/;"	f
DrawLineBezier	$RAYLIB/raylib.oc	/^[extern] def DrawLineBezier(startPos: Vector2, endPos: Vector2, thick: f32, color: Color): u8$/;"	f
DrawLineEx	$RAYLIB/raylib.oc	/^[extern] def DrawLineEx(startPos: Vector2, endPos: Vector2, thick: f32, color: Color): u8$/;"	f
DrawLineStrip	$RAYLIB/raylib.oc	/^[extern] def DrawLineStrip(points: &Vector2, pointCount: i32, color: Color): u8$/;"	f
DrawLineV	$RAYLIB/raylib.oc	/^[extern] def DrawLineV(startPos: Vector2, endPos: Vector2, color: Color): u8$/;"	f
DrawMesh	$RAYLIB/raylib.oc	/^[extern] def DrawMesh(mesh: Mesh, material: Material, transform: Matrix): u8$/;"	f
DrawMeshInstanced	$RAYLIB/raylib.oc	/^[extern] def DrawMeshInstanced(mesh: Mesh, material: Material, transforms: &Matrix, instances: i/;"	f
DrawModel	$RAYLIB/raylib.oc	/^[extern] def DrawModel(model: Model, position: Vector3, scale: f32, tint: Color): u8$/;"	f
DrawModelEx	$RAYLIB/raylib.oc	/^[extern] def DrawModelEx(model: Model, position: Vector3, rotationAxis: Vector3, rotationAngle: /;"	f
DrawModelWires	$RAYLIB/raylib.oc	/^[extern] def DrawModelWires(model: Model, position: Vector3, scale: f32, tint: Color): u8$/;"	f
DrawModelWiresEx	$RAYLIB/raylib.oc	/^[extern] def DrawModelWiresEx(model: Model, position: Vector3, rotationAxis: Vector3, rotationAn/;"	f
DrawPixel	$RAYLIB/raylib.oc	/^[extern] def DrawPixel(posX: i32, posY: i32, color: Color): u8$/;"	f
DrawPixelV	$RAYLIB/raylib.oc	/^[extern] def DrawPixelV(position: Vector2, color: Color): u8$/;"	f
DrawPlane	$RAYLIB/raylib.oc	/^[extern] def DrawPlane(centerPos: Vector3, size: Vector2, color: Color): u8$/;"	f
DrawPoint3D	$RAYLIB/raylib.oc	/^[extern] def DrawPoint3D(position: Vector3, color: Color): u8$/;"	f
DrawPoly	$RAYLIB/raylib.oc	/^[extern] def DrawPoly(center: Vector2, sides: i32, radius: f32, rotation: f32, color: Color): u8$/;"	f
DrawPolyLines	$RAYLIB/raylib.oc	/^[extern] def DrawPolyLines(center: Vector2, sides: i32, radius: f32, rotation: f32, color: Color/;"	f
DrawPolyLinesEx	$RAYLIB/raylib.oc	/^[extern] def DrawPolyLinesEx(center: Vector2, sides: i32, radius: f32, rotation: f32, lineThick:/;"	f
DrawRay	$RAYLIB/raylib.oc	/^[extern] def DrawRay(ray: Ray, color: Color): u8$/;"	f
DrawRectangle	$RAYLIB/raylib.oc	/^[extern] def DrawRectangle(posX: i32, posY: i32, width: i32, height: i32, color: Color): u8$/;"	f
DrawRectangleGradientEx	$RAYLIB/raylib.oc	/^[extern] def DrawRectangleGradientEx(rec: Rectangle, col1: Color, col2: Color, col3: Color, col4/;"	f
DrawRectangleGradientH	$RAYLIB/raylib.oc	/^[extern] def DrawRectangleGradientH(posX: i32, posY: i32, width: i32, height: i32, color1: Color/;"	f
DrawRectangleGradientV	$RAYLIB/raylib.oc	/^[extern] def DrawRectangleGradientV(posX: i32, posY: i32, width: i32, height: i32, color1: Color/;"	f
DrawRectangleLines	$RAYLIB/raylib.oc	/^[extern] def DrawRectangleLines(posX: i32, posY: i32, width: i32, height: i32, color: Color): u8$/;"	f
DrawRectangleLinesEx	$RAYLIB/raylib.oc	/^[extern] def DrawRectangleLinesEx(rec: Rectangle, lineThick: f32, color: Color): u8$/;"	f
DrawRectanglePro	$RAYLIB/raylib.oc	/^[extern] def DrawRectanglePro(rec: Rectangle, origin: Vector2, rotation: f32, color: Color): u8$/;"	f
DrawRectangleRec	$RAYLIB/raylib.oc	/^[extern] def DrawRectangleRec(rec: Rectangle, color: Color): u8$/;"	f
DrawRectangleRounded	$RAYLIB/raylib.oc	/^[extern] def DrawRectangleRounded(rec: Rectangle, roundness: f32, segments: i32, color: Color): /;"	f
DrawRectangleRoundedLines	$RAYLIB/raylib.oc	/^[extern] def DrawRectangleRoundedLines(rec: Rectangle, roundness: f32, segments: i32, lineThick:/;"	f
DrawRectangleV	$RAYLIB/raylib.oc	/^[extern] def DrawRectangleV(position: Vector2, size: Vector2, color: Color): u8$/;"	f
DrawRing	$RAYLIB/raylib.oc	/^[extern] def DrawRing(center: Vector2, innerRadius: f32, outerRadius: f32, startAngle: f32, endA/;"	f
DrawRingLines	$RAYLIB/raylib.oc	/^[extern] def DrawRingLines(center: Vector2, innerRadius: f32, outerRadius: f32, startAngle: f32,/;"	f
DrawSphere	$RAYLIB/raylib.oc	/^[extern] def DrawSphere(centerPos: Vector3, radius: f32, color: Color): u8$/;"	f
DrawSphereEx	$RAYLIB/raylib.oc	/^[extern] def DrawSphereEx(centerPos: Vector3, radius: f32, rings: i32, slices: i32, color: Color/;"	f
DrawSphereWires	$RAYLIB/raylib.oc	/^[extern] def DrawSphereWires(centerPos: Vector3, radius: f32, rings: i32, slices: i32, color: Co/;"	f
DrawSplineBasis	$RAYLIB/raylib.oc	/^[extern] def DrawSplineBasis(points: &Vector2, pointCount: i32, thick: f32, color: Color): u8$/;"	f
DrawSplineBezierCubic	$RAYLIB/raylib.oc	/^[extern] def DrawSplineBezierCubic(points: &Vector2, pointCount: i32, thick: f32, color: Color):/;"	f
DrawSplineBezierQuadratic	$RAYLIB/raylib.oc	/^[extern] def DrawSplineBezierQuadratic(points: &Vector2, pointCount: i32, thick: f32, color: Col/;"	f
DrawSplineCatmullRom	$RAYLIB/raylib.oc	/^[extern] def DrawSplineCatmullRom(points: &Vector2, pointCount: i32, thick: f32, color: Color): /;"	f
DrawSplineLinear	$RAYLIB/raylib.oc	/^[extern] def DrawSplineLinear(points: &Vector2, pointCount: i32, thick: f32, color: Color): u8$/;"	f
DrawSplineSegmentBasis	$RAYLIB/raylib.oc	/^[extern] def DrawSplineSegmentBasis(p1: Vector2, p2: Vector2, p3: Vector2, p4: Vector2, thick: f/;"	f
DrawSplineSegmentBezierCubic	$RAYLIB/raylib.oc	/^[extern] def DrawSplineSegmentBezierCubic(p1: Vector2, c2: Vector2, c3: Vector2, p4: Vector2, th/;"	f
DrawSplineSegmentBezierQuadratic	$RAYLIB/raylib.oc	/^[extern] def DrawSplineSegmentBezierQuadratic(p1: Vector2, c2: Vector2, p3: Vector2, thick: f32,/;"	f
DrawSplineSegmentCatmullRom	$RAYLIB/raylib.oc	/^[extern] def DrawSplineSegmentCatmullRom(p1: Vector2, p2: Vector2, p3: Vector2, p4: Vector2, thi/;"	f
DrawSplineSegmentLinear	$RAYLIB/raylib.oc	/^[extern] def DrawSplineSegmentLinear(p1: Vector2, p2: Vector2, thick: f32, color: Color): u8$/;"	f
DrawText	$RAYLIB/raylib.oc	/^[extern] def DrawText(text: &char, posX: i32, posY: i32, fontSize: i32, color: Color): u8$/;"	f
DrawTextCodepoint	$RAYLIB/raylib.oc	/^[extern] def DrawTextCodepoint(font: Font, codepoint: i32, position: Vector2, fontSize: f32, tin/;"	f
DrawTextCodepoints	$RAYLIB/raylib.oc	/^[extern] def DrawTextCodepoints(font: Font, codepoints: &i32, codepointCount: i32, position: Vec/;"	f
DrawTextEx	$RAYLIB/raylib.oc	/^[extern] def DrawTextEx(font: Font, text: &char, position: Vector2, fontSize: f32, spacing: f32,/;"	f
DrawTextPro	$RAYLIB/raylib.oc	/^[extern] def DrawTextPro(font: Font, text: &char, position: Vector2, origin: Vector2, rotation: /;"	f
DrawTexture	$RAYLIB/raylib.oc	/^[extern] def DrawTexture(texture: Texture2D, posX: i32, posY: i32, tint: Color): u8$/;"	f
DrawTextureEx	$RAYLIB/raylib.oc	/^[extern] def DrawTextureEx(texture: Texture2D, position: Vector2, rotation: f32, scale: f32, tin/;"	f
DrawTextureNPatch	$RAYLIB/raylib.oc	/^[extern] def DrawTextureNPatch(texture: Texture2D, nPatchInfo: NPatchInfo, dest: Rectangle, orig/;"	f
DrawTexturePro	$RAYLIB/raylib.oc	/^[extern] def DrawTexturePro(texture: Texture2D, source: Rectangle, dest: Rectangle, origin: Vect/;"	f
DrawTextureRec	$RAYLIB/raylib.oc	/^[extern] def DrawTextureRec(texture: Texture2D, source: Rectangle, position: Vector2, tint: Colo/;"	f
DrawTextureV	$RAYLIB/raylib.oc	/^[extern] def DrawTextureV(texture: Texture2D, position: Vector2, tint: Color): u8$/;"	f
DrawTriangle	$RAYLIB/raylib.oc	/^[extern] def DrawTriangle(v1: Vector2, v2: Vector2, v3: Vector2, color: Color): u8$/;"	f
DrawTriangle3D	$RAYLIB/raylib.oc	/^[extern] def DrawTriangle3D(v1: Vector3, v2: Vector3, v3: Vector3, color: Color): u8$/;"	f
DrawTriangleFan	$RAYLIB/raylib.oc	/^[extern] def DrawTriangleFan(points: &Vector2, pointCount: i32, color: Color): u8$/;"	f
DrawTriangleLines	$RAYLIB/raylib.oc	/^[extern] def DrawTriangleLines(v1: Vector2, v2: Vector2, v3: Vector2, color: Color): u8$/;"	f
DrawTriangleStrip	$RAYLIB/raylib.oc	/^[extern] def DrawTriangleStrip(points: &Vector2, pointCount: i32, color: Color): u8$/;"	f
DrawTriangleStrip3D	$RAYLIB/raylib.oc	/^[extern] def DrawTriangleStrip3D(points: &Vector3, pointCount: i32, color: Color): u8$/;"	f
EnableCursor	$RAYLIB/raylib.oc	/^[extern] def EnableCursor(): u8$/;"	f
EnableEventWaiting	$RAYLIB/raylib.oc	/^[extern] def EnableEventWaiting(): u8$/;"	f
EncodeDataBase64	$RAYLIB/raylib.oc	/^[extern] def EncodeDataBase64(data: &u8, dataSize: i32, outputSize: &i32): &char$/;"	f
EndBlendMode	$RAYLIB/raylib.oc	/^[extern] def EndBlendMode(): u8$/;"	f
EndDrawing	$RAYLIB/raylib.oc	/^[extern] def EndDrawing(): u8$/;"	f
EndMode2D	$RAYLIB/raylib.oc	/^[extern] def EndMode2D(): u8$/;"	f
EndMode3D	$RAYLIB/raylib.oc	/^[extern] def EndMode3D(): u8$/;"	f
EndScissorMode	$RAYLIB/raylib.oc	/^[extern] def EndScissorMode(): u8$/;"	f
EndShaderMode	$RAYLIB/raylib.oc	/^[extern] def EndShaderMode(): u8$/;"	f
EndTextureMode	$RAYLIB/raylib.oc	/^[extern] def EndTextureMode(): u8$/;"	f
EndVrStereoMode	$RAYLIB/raylib.oc	/^[extern] def EndVrStereoMode(): u8$/;"	f
ExportAutomationEventList	$RAYLIB/raylib.oc	/^[extern] def ExportAutomationEventList(list: AutomationEventList, fileName: &char): bool$/;"	f
ExportDataAsCode	$RAYLIB/raylib.oc	/^[extern] def ExportDataAsCode(data: &u8, dataSize: i32, fileName: &char): bool$/;"	f
ExportFontAsCode	$RAYLIB/raylib.oc	/^[extern] def ExportFontAsCode(font: Font, fileName: &char): bool$/;"	f
ExportImage	$RAYLIB/raylib.oc	/^[extern] def ExportImage(image: Image, fileName: &char): bool$/;"	f
ExportImageAsCode	$RAYLIB/raylib.oc	/^[extern] def ExportImageAsCode(image: Image, fileName: &char): bool$/;"	f
ExportImageToMemory	$RAYLIB/raylib.oc	/^[extern] def ExportImageToMemory(image: Image, fileType: &char, fileSize: &i32): &u8$/;"	f
ExportMesh	$RAYLIB/raylib.oc	/^[extern] def ExportMesh(mesh: Mesh, fileName: &char): bool$/;"	f
ExportMeshAsCode	$RAYLIB/raylib.oc	/^[extern] def ExportMeshAsCode(mesh: Mesh, fileName: &char): bool$/;"	f
ExportWave	$RAYLIB/raylib.oc	/^[extern] def ExportWave(wave: Wave, fileName: &char): bool$/;"	f
ExportWaveAsCode	$RAYLIB/raylib.oc	/^[extern] def ExportWaveAsCode(wave: Wave, fileName: &char): bool$/;"	f
Fade	$RAYLIB/raylib.oc	/^[extern] def Fade(color: Color, alpha: f32): Color$/;"	f
FileExists	$RAYLIB/raylib.oc	/^[extern] def FileExists(fileName: &char): bool$/;"	f
FilePathList	$RAYLIB/raylib.oc	/^[extern] struct FilePathList {$/;"	f
Font	$RAYLIB/raylib.oc	/^[extern] struct Font {$/;"	f
FontType	$RAYLIB/raylib.oc	/^[extern] enum FontType {$/;"	f
GOLD	$RAYLIB/raylib.oc	/^[extern] const GOLD: Color$/;"	f
GRAY	$RAYLIB/raylib.oc	/^[extern] const GRAY: Color$/;"	f
GREEN	$RAYLIB/raylib.oc	/^[extern] const GREEN: Color$/;"	f
GamepadAxis	$RAYLIB/raylib.oc	/^[extern] enum GamepadAxis {$/;"	f
GamepadButton	$RAYLIB/raylib.oc	/^[extern] enum GamepadButton {$/;"	f
GenImageCellular	$RAYLIB/raylib.oc	/^[extern] def GenImageCellular(width: i32, height: i32, tileSize: i32): Image$/;"	f
GenImageChecked	$RAYLIB/raylib.oc	/^[extern] def GenImageChecked(width: i32, height: i32, checksX: i32, checksY: i32, col1: Color, c/;"	f
GenImageColor	$RAYLIB/raylib.oc	/^[extern] def GenImageColor(width: i32, height: i32, color: Color): Image$/;"	f
GenImageFontAtlas	$RAYLIB/raylib.oc	/^[extern] def GenImageFontAtlas(glyphs: &GlyphInfo, glyphRecs: &Rectangle, glyphCount: i32, fontS/;"	f
GenImageGradientLinear	$RAYLIB/raylib.oc	/^[extern] def GenImageGradientLinear(width: i32, height: i32, direction: i32, start: Color, end: /;"	f
GenImageGradientRadial	$RAYLIB/raylib.oc	/^[extern] def GenImageGradientRadial(width: i32, height: i32, density: f32, inner: Color, outer: /;"	f
GenImageGradientSquare	$RAYLIB/raylib.oc	/^[extern] def GenImageGradientSquare(width: i32, height: i32, density: f32, inner: Color, outer: /;"	f
GenImagePerlinNoise	$RAYLIB/raylib.oc	/^[extern] def GenImagePerlinNoise(width: i32, height: i32, offsetX: i32, offsetY: i32, scale: f32/;"	f
GenImageText	$RAYLIB/raylib.oc	/^[extern] def GenImageText(width: i32, height: i32, text: &char): Image$/;"	f
GenImageWhiteNoise	$RAYLIB/raylib.oc	/^[extern] def GenImageWhiteNoise(width: i32, height: i32, factor: f32): Image$/;"	f
GenMeshCone	$RAYLIB/raylib.oc	/^[extern] def GenMeshCone(radius: f32, height: f32, slices: i32): Mesh$/;"	f
GenMeshCube	$RAYLIB/raylib.oc	/^[extern] def GenMeshCube(width: f32, height: f32, length: f32): Mesh$/;"	f
GenMeshCubicmap	$RAYLIB/raylib.oc	/^[extern] def GenMeshCubicmap(cubicmap: Image, cubeSize: Vector3): Mesh$/;"	f
GenMeshCylinder	$RAYLIB/raylib.oc	/^[extern] def GenMeshCylinder(radius: f32, height: f32, slices: i32): Mesh$/;"	f
GenMeshHeightmap	$RAYLIB/raylib.oc	/^[extern] def GenMeshHeightmap(heightmap: Image, size: Vector3): Mesh$/;"	f
GenMeshHemiSphere	$RAYLIB/raylib.oc	/^[extern] def GenMeshHemiSphere(radius: f32, rings: i32, slices: i32): Mesh$/;"	f
GenMeshKnot	$RAYLIB/raylib.oc	/^[extern] def GenMeshKnot(radius: f32, size: f32, radSeg: i32, sides: i32): Mesh$/;"	f
GenMeshPlane	$RAYLIB/raylib.oc	/^[extern] def GenMeshPlane(width: f32, length: f32, resX: i32, resZ: i32): Mesh$/;"	f
GenMeshPoly	$RAYLIB/raylib.oc	/^[extern] def GenMeshPoly(sides: i32, radius: f32): Mesh$/;"	f
GenMeshSphere	$RAYLIB/raylib.oc	/^[extern] def GenMeshSphere(radius: f32, rings: i32, slices: i32): Mesh$/;"	f
GenMeshTangents	$RAYLIB/raylib.oc	/^[extern] def GenMeshTangents(mesh: &Mesh): u8$/;"	f
GenMeshTorus	$RAYLIB/raylib.oc	/^[extern] def GenMeshTorus(radius: f32, size: f32, radSeg: i32, sides: i32): Mesh$/;"	f
GenTextureMipmaps	$RAYLIB/raylib.oc	/^[extern] def GenTextureMipmaps(texture: &Texture2D): u8$/;"	f
Gesture	$RAYLIB/raylib.oc	/^[extern] enum Gesture {$/;"	f
GetApplicationDirectory	$RAYLIB/raylib.oc	/^[extern] def GetApplicationDirectory(): &char$/;"	f
GetCameraMatrix	$RAYLIB/raylib.oc	/^[extern] def GetCameraMatrix(camera: Camera): Matrix$/;"	f
GetCameraMatrix2D	$RAYLIB/raylib.oc	/^[extern] def GetCameraMatrix2D(camera: Camera2D): Matrix$/;"	f
GetCharPressed	$RAYLIB/raylib.oc	/^[extern] def GetCharPressed(): i32$/;"	f
GetClipboardText	$RAYLIB/raylib.oc	/^[extern] def GetClipboardText(): &char$/;"	f
GetCodepoint	$RAYLIB/raylib.oc	/^[extern] def GetCodepoint(text: &char, codepointSize: &i32): i32$/;"	f
GetCodepointCount	$RAYLIB/raylib.oc	/^[extern] def GetCodepointCount(text: &char): i32$/;"	f
GetCodepointNext	$RAYLIB/raylib.oc	/^[extern] def GetCodepointNext(text: &char, codepointSize: &i32): i32$/;"	f
GetCodepointPrevious	$RAYLIB/raylib.oc	/^[extern] def GetCodepointPrevious(text: &char, codepointSize: &i32): i32$/;"	f
GetCollisionRec	$RAYLIB/raylib.oc	/^[extern] def GetCollisionRec(rec1: Rectangle, rec2: Rectangle): Rectangle$/;"	f
GetColor	$RAYLIB/raylib.oc	/^[extern] def GetColor(hexValue: u32): Color$/;"	f
GetCurrentMonitor	$RAYLIB/raylib.oc	/^[extern] def GetCurrentMonitor(): i32$/;"	f
GetDirectoryPath	$RAYLIB/raylib.oc	/^[extern] def GetDirectoryPath(filePath: &char): &char$/;"	f
GetFPS	$RAYLIB/raylib.oc	/^[extern] def GetFPS(): i32$/;"	f
GetFileExtension	$RAYLIB/raylib.oc	/^[extern] def GetFileExtension(fileName: &char): &char$/;"	f
GetFileLength	$RAYLIB/raylib.oc	/^[extern] def GetFileLength(fileName: &char): i32$/;"	f
GetFileModTime	$RAYLIB/raylib.oc	/^[extern] def GetFileModTime(fileName: &char): i32$/;"	f
GetFileName	$RAYLIB/raylib.oc	/^[extern] def GetFileName(filePath: &char): &char$/;"	f
GetFileNameWithoutExt	$RAYLIB/raylib.oc	/^[extern] def GetFileNameWithoutExt(filePath: &char): &char$/;"	f
GetFontDefault	$RAYLIB/raylib.oc	/^[extern] def GetFontDefault(): Font$/;"	f
GetFrameTime	$RAYLIB/raylib.oc	/^[extern] def GetFrameTime(): f32$/;"	f
GetGamepadAxisCount	$RAYLIB/raylib.oc	/^[extern] def GetGamepadAxisCount(gamepad: i32): i32$/;"	f
GetGamepadAxisMovement	$RAYLIB/raylib.oc	/^[extern] def GetGamepadAxisMovement(gamepad: i32, axis: i32): f32$/;"	f
GetGamepadButtonPressed	$RAYLIB/raylib.oc	/^[extern] def GetGamepadButtonPressed(): i32$/;"	f
GetGamepadName	$RAYLIB/raylib.oc	/^[extern] def GetGamepadName(gamepad: i32): &char$/;"	f
GetGestureDetected	$RAYLIB/raylib.oc	/^[extern] def GetGestureDetected(): i32$/;"	f
GetGestureDragAngle	$RAYLIB/raylib.oc	/^[extern] def GetGestureDragAngle(): f32$/;"	f
GetGestureDragVector	$RAYLIB/raylib.oc	/^[extern] def GetGestureDragVector(): Vector2$/;"	f
GetGestureHoldDuration	$RAYLIB/raylib.oc	/^[extern] def GetGestureHoldDuration(): f32$/;"	f
GetGesturePinchAngle	$RAYLIB/raylib.oc	/^[extern] def GetGesturePinchAngle(): f32$/;"	f
GetGesturePinchVector	$RAYLIB/raylib.oc	/^[extern] def GetGesturePinchVector(): Vector2$/;"	f
GetGlyphAtlasRec	$RAYLIB/raylib.oc	/^[extern] def GetGlyphAtlasRec(font: Font, codepoint: i32): Rectangle$/;"	f
GetGlyphIndex	$RAYLIB/raylib.oc	/^[extern] def GetGlyphIndex(font: Font, codepoint: i32): i32$/;"	f
GetGlyphInfo	$RAYLIB/raylib.oc	/^[extern] def GetGlyphInfo(font: Font, codepoint: i32): GlyphInfo$/;"	f
GetImageAlphaBorder	$RAYLIB/raylib.oc	/^[extern] def GetImageAlphaBorder(image: Image, threshold: f32): Rectangle$/;"	f
GetImageColor	$RAYLIB/raylib.oc	/^[extern] def GetImageColor(image: Image, x: i32, y: i32): Color$/;"	f
GetKeyPressed	$RAYLIB/raylib.oc	/^[extern] def GetKeyPressed(): i32$/;"	f
GetMasterVolume	$RAYLIB/raylib.oc	/^[extern] def GetMasterVolume(): f32$/;"	f
GetMeshBoundingBox	$RAYLIB/raylib.oc	/^[extern] def GetMeshBoundingBox(mesh: Mesh): BoundingBox$/;"	f
GetModelBoundingBox	$RAYLIB/raylib.oc	/^[extern] def GetModelBoundingBox(model: Model): BoundingBox$/;"	f
GetMonitorCount	$RAYLIB/raylib.oc	/^[extern] def GetMonitorCount(): i32$/;"	f
GetMonitorHeight	$RAYLIB/raylib.oc	/^[extern] def GetMonitorHeight(monitor: i32): i32$/;"	f
GetMonitorName	$RAYLIB/raylib.oc	/^[extern] def GetMonitorName(monitor: i32): &char$/;"	f
GetMonitorPhysicalHeight	$RAYLIB/raylib.oc	/^[extern] def GetMonitorPhysicalHeight(monitor: i32): i32$/;"	f
GetMonitorPhysicalWidth	$RAYLIB/raylib.oc	/^[extern] def GetMonitorPhysicalWidth(monitor: i32): i32$/;"	f
GetMonitorPosition	$RAYLIB/raylib.oc	/^[extern] def GetMonitorPosition(monitor: i32): Vector2$/;"	f
GetMonitorRefreshRate	$RAYLIB/raylib.oc	/^[extern] def GetMonitorRefreshRate(monitor: i32): i32$/;"	f
GetMonitorWidth	$RAYLIB/raylib.oc	/^[extern] def GetMonitorWidth(monitor: i32): i32$/;"	f
GetMouseDelta	$RAYLIB/raylib.oc	/^[extern] def GetMouseDelta(): Vector2$/;"	f
GetMousePosition	$RAYLIB/raylib.oc	/^[extern] def GetMousePosition(): Vector2$/;"	f
GetMouseWheelMove	$RAYLIB/raylib.oc	/^[extern] def GetMouseWheelMove(): f32$/;"	f
GetMouseWheelMoveV	$RAYLIB/raylib.oc	/^[extern] def GetMouseWheelMoveV(): Vector2$/;"	f
GetMouseX	$RAYLIB/raylib.oc	/^[extern] def GetMouseX(): i32$/;"	f
GetMouseY	$RAYLIB/raylib.oc	/^[extern] def GetMouseY(): i32$/;"	f
GetMusicTimeLength	$RAYLIB/raylib.oc	/^[extern] def GetMusicTimeLength(music: Music): f32$/;"	f
GetMusicTimePlayed	$RAYLIB/raylib.oc	/^[extern] def GetMusicTimePlayed(music: Music): f32$/;"	f
GetPixelColor	$RAYLIB/raylib.oc	/^[extern] def GetPixelColor(srcPtr: untyped_ptr, format: i32): Color$/;"	f
GetPixelDataSize	$RAYLIB/raylib.oc	/^[extern] def GetPixelDataSize(width: i32, height: i32, format: i32): i32$/;"	f
GetPrevDirectoryPath	$RAYLIB/raylib.oc	/^[extern] def GetPrevDirectoryPath(dirPath: &char): &char$/;"	f
GetRandomValue	$RAYLIB/raylib.oc	/^[extern] def GetRandomValue(min: i32, max: i32): i32$/;"	f
GetRayCollisionBox	$RAYLIB/raylib.oc	/^[extern] def GetRayCollisionBox(ray: Ray, box: BoundingBox): RayCollision$/;"	f
GetRayCollisionMesh	$RAYLIB/raylib.oc	/^[extern] def GetRayCollisionMesh(ray: Ray, mesh: Mesh, transform: Matrix): RayCollision$/;"	f
GetRayCollisionQuad	$RAYLIB/raylib.oc	/^[extern] def GetRayCollisionQuad(ray: Ray, p1: Vector3, p2: Vector3, p3: Vector3, p4: Vector3): /;"	f
GetRayCollisionSphere	$RAYLIB/raylib.oc	/^[extern] def GetRayCollisionSphere(ray: Ray, center: Vector3, radius: f32): RayCollision$/;"	f
GetRayCollisionTriangle	$RAYLIB/raylib.oc	/^[extern] def GetRayCollisionTriangle(ray: Ray, p1: Vector3, p2: Vector3, p3: Vector3): RayCollis/;"	f
GetRenderHeight	$RAYLIB/raylib.oc	/^[extern] def GetRenderHeight(): i32$/;"	f
GetRenderWidth	$RAYLIB/raylib.oc	/^[extern] def GetRenderWidth(): i32$/;"	f
GetScreenHeight	$RAYLIB/raylib.oc	/^[extern] def GetScreenHeight(): i32$/;"	f
GetScreenToWorld2D	$RAYLIB/raylib.oc	/^[extern] def GetScreenToWorld2D(position: Vector2, camera: Camera2D): Vector2$/;"	f
GetScreenToWorldRay	$RAYLIB/raylib.oc	/^[extern] def GetScreenToWorldRay(position: Vector2, camera: Camera): Ray$/;"	f
GetScreenToWorldRayEx	$RAYLIB/raylib.oc	/^[extern] def GetScreenToWorldRayEx(position: Vector2, camera: Camera, width: i32, height: i32): /;"	f
GetScreenWidth	$RAYLIB/raylib.oc	/^[extern] def GetScreenWidth(): i32$/;"	f
GetShaderLocation	$RAYLIB/raylib.oc	/^[extern] def GetShaderLocation(shader: Shader, uniformName: &char): i32$/;"	f
GetShaderLocationAttrib	$RAYLIB/raylib.oc	/^[extern] def GetShaderLocationAttrib(shader: Shader, attribName: &char): i32$/;"	f
GetShapesTexture	$RAYLIB/raylib.oc	/^[extern] def GetShapesTexture(): Texture2D$/;"	f
GetShapesTextureRectangle	$RAYLIB/raylib.oc	/^[extern] def GetShapesTextureRectangle(): Rectangle$/;"	f
GetSplinePointBasis	$RAYLIB/raylib.oc	/^[extern] def GetSplinePointBasis(p1: Vector2, p2: Vector2, p3: Vector2, p4: Vector2, t: f32): Ve/;"	f
GetSplinePointBezierCubic	$RAYLIB/raylib.oc	/^[extern] def GetSplinePointBezierCubic(p1: Vector2, c2: Vector2, c3: Vector2, p4: Vector2, t: f3/;"	f
GetSplinePointBezierQuad	$RAYLIB/raylib.oc	/^[extern] def GetSplinePointBezierQuad(p1: Vector2, c2: Vector2, p3: Vector2, t: f32): Vector2$/;"	f
GetSplinePointCatmullRom	$RAYLIB/raylib.oc	/^[extern] def GetSplinePointCatmullRom(p1: Vector2, p2: Vector2, p3: Vector2, p4: Vector2, t: f32/;"	f
GetSplinePointLinear	$RAYLIB/raylib.oc	/^[extern] def GetSplinePointLinear(startPos: Vector2, endPos: Vector2, t: f32): Vector2$/;"	f
GetTime	$RAYLIB/raylib.oc	/^[extern] def GetTime(): f64$/;"	f
GetTouchPointCount	$RAYLIB/raylib.oc	/^[extern] def GetTouchPointCount(): i32$/;"	f
GetTouchPointId	$RAYLIB/raylib.oc	/^[extern] def GetTouchPointId(index: i32): i32$/;"	f
GetTouchPosition	$RAYLIB/raylib.oc	/^[extern] def GetTouchPosition(index: i32): Vector2$/;"	f
GetTouchX	$RAYLIB/raylib.oc	/^[extern] def GetTouchX(): i32$/;"	f
GetTouchY	$RAYLIB/raylib.oc	/^[extern] def GetTouchY(): i32$/;"	f
GetWindowHandle	$RAYLIB/raylib.oc	/^[extern] def GetWindowHandle(): untyped_ptr$/;"	f
GetWindowPosition	$RAYLIB/raylib.oc	/^[extern] def GetWindowPosition(): Vector2$/;"	f
GetWindowScaleDPI	$RAYLIB/raylib.oc	/^[extern] def GetWindowScaleDPI(): Vector2$/;"	f
GetWorkingDirectory	$RAYLIB/raylib.oc	/^[extern] def GetWorkingDirectory(): &char$/;"	f
GetWorldToScreen	$RAYLIB/raylib.oc	/^[extern] def GetWorldToScreen(position: Vector3, camera: Camera): Vector2$/;"	f
GetWorldToScreen2D	$RAYLIB/raylib.oc	/^[extern] def GetWorldToScreen2D(position: Vector2, camera: Camera2D): Vector2$/;"	f
GetWorldToScreenEx	$RAYLIB/raylib.oc	/^[extern] def GetWorldToScreenEx(position: Vector3, camera: Camera, width: i32, height: i32): Vec/;"	f
GlyphInfo	$RAYLIB/raylib.oc	/^[extern] struct GlyphInfo {$/;"	f
HideCursor	$RAYLIB/raylib.oc	/^[extern] def HideCursor(): u8$/;"	f
Image	$RAYLIB/raylib.oc	/^[extern] struct Image {$/;"	f
ImageAlphaClear	$RAYLIB/raylib.oc	/^[extern] def ImageAlphaClear(image: &Image, color: Color, threshold: f32): u8$/;"	f
ImageAlphaCrop	$RAYLIB/raylib.oc	/^[extern] def ImageAlphaCrop(image: &Image, threshold: f32): u8$/;"	f
ImageAlphaMask	$RAYLIB/raylib.oc	/^[extern] def ImageAlphaMask(image: &Image, alphaMask: Image): u8$/;"	f
ImageAlphaPremultiply	$RAYLIB/raylib.oc	/^[extern] def ImageAlphaPremultiply(image: &Image): u8$/;"	f
ImageBlurGaussian	$RAYLIB/raylib.oc	/^[extern] def ImageBlurGaussian(image: &Image, blurSize: i32): u8$/;"	f
ImageClearBackground	$RAYLIB/raylib.oc	/^[extern] def ImageClearBackground(dst: &Image, color: Color): u8$/;"	f
ImageColorBrightness	$RAYLIB/raylib.oc	/^[extern] def ImageColorBrightness(image: &Image, brightness: i32): u8$/;"	f
ImageColorContrast	$RAYLIB/raylib.oc	/^[extern] def ImageColorContrast(image: &Image, contrast: f32): u8$/;"	f
ImageColorGrayscale	$RAYLIB/raylib.oc	/^[extern] def ImageColorGrayscale(image: &Image): u8$/;"	f
ImageColorInvert	$RAYLIB/raylib.oc	/^[extern] def ImageColorInvert(image: &Image): u8$/;"	f
ImageColorReplace	$RAYLIB/raylib.oc	/^[extern] def ImageColorReplace(image: &Image, color: Color, replace: Color): u8$/;"	f
ImageColorTint	$RAYLIB/raylib.oc	/^[extern] def ImageColorTint(image: &Image, color: Color): u8$/;"	f
ImageCopy	$RAYLIB/raylib.oc	/^[extern] def ImageCopy(image: Image): Image$/;"	f
ImageCrop	$RAYLIB/raylib.oc	/^[extern] def ImageCrop(image: &Image, crop: Rectangle): u8$/;"	f
ImageDither	$RAYLIB/raylib.oc	/^[extern] def ImageDither(image: &Image, rBpp: i32, gBpp: i32, bBpp: i32, aBpp: i32): u8$/;"	f
ImageDraw	$RAYLIB/raylib.oc	/^[extern] def ImageDraw(dst: &Image, src: Image, srcRec: Rectangle, dstRec: Rectangle, tint: Colo/;"	f
ImageDrawCircle	$RAYLIB/raylib.oc	/^[extern] def ImageDrawCircle(dst: &Image, centerX: i32, centerY: i32, radius: i32, color: Color)/;"	f
ImageDrawCircleLines	$RAYLIB/raylib.oc	/^[extern] def ImageDrawCircleLines(dst: &Image, centerX: i32, centerY: i32, radius: i32, color: C/;"	f
ImageDrawCircleLinesV	$RAYLIB/raylib.oc	/^[extern] def ImageDrawCircleLinesV(dst: &Image, center: Vector2, radius: i32, color: Color): u8$/;"	f
ImageDrawCircleV	$RAYLIB/raylib.oc	/^[extern] def ImageDrawCircleV(dst: &Image, center: Vector2, radius: i32, color: Color): u8$/;"	f
ImageDrawLine	$RAYLIB/raylib.oc	/^[extern] def ImageDrawLine(dst: &Image, startPosX: i32, startPosY: i32, endPosX: i32, endPosY: i/;"	f
ImageDrawLineV	$RAYLIB/raylib.oc	/^[extern] def ImageDrawLineV(dst: &Image, start: Vector2, end: Vector2, color: Color): u8$/;"	f
ImageDrawPixel	$RAYLIB/raylib.oc	/^[extern] def ImageDrawPixel(dst: &Image, posX: i32, posY: i32, color: Color): u8$/;"	f
ImageDrawPixelV	$RAYLIB/raylib.oc	/^[extern] def ImageDrawPixelV(dst: &Image, position: Vector2, color: Color): u8$/;"	f
ImageDrawRectangle	$RAYLIB/raylib.oc	/^[extern] def ImageDrawRectangle(dst: &Image, posX: i32, posY: i32, width: i32, height: i32, colo/;"	f
ImageDrawRectangleLines	$RAYLIB/raylib.oc	/^[extern] def ImageDrawRectangleLines(dst: &Image, rec: Rectangle, thick: i32, color: Color): u8$/;"	f
ImageDrawRectangleRec	$RAYLIB/raylib.oc	/^[extern] def ImageDrawRectangleRec(dst: &Image, rec: Rectangle, color: Color): u8$/;"	f
ImageDrawRectangleV	$RAYLIB/raylib.oc	/^[extern] def ImageDrawRectangleV(dst: &Image, position: Vector2, size: Vector2, color: Color): u/;"	f
ImageDrawText	$RAYLIB/raylib.oc	/^[extern] def ImageDrawText(dst: &Image, text: &char, posX: i32, posY: i32, fontSize: i32, color:/;"	f
ImageDrawTextEx	$RAYLIB/raylib.oc	/^[extern] def ImageDrawTextEx(dst: &Image, font: Font, text: &char, position: Vector2, fontSize: /;"	f
ImageFlipHorizontal	$RAYLIB/raylib.oc	/^[extern] def ImageFlipHorizontal(image: &Image): u8$/;"	f
ImageFlipVertical	$RAYLIB/raylib.oc	/^[extern] def ImageFlipVertical(image: &Image): u8$/;"	f
ImageFormat	$RAYLIB/raylib.oc	/^[extern] def ImageFormat(image: &Image, newFormat: i32): u8$/;"	f
ImageFromImage	$RAYLIB/raylib.oc	/^[extern] def ImageFromImage(image: Image, rec: Rectangle): Image$/;"	f
ImageKernelConvolution	$RAYLIB/raylib.oc	/^[extern] def ImageKernelConvolution(image: &Image, kernel: &f32, kernelSize: i32): u8$/;"	f
ImageMipmaps	$RAYLIB/raylib.oc	/^[extern] def ImageMipmaps(image: &Image): u8$/;"	f
ImageResize	$RAYLIB/raylib.oc	/^[extern] def ImageResize(image: &Image, newWidth: i32, newHeight: i32): u8$/;"	f
ImageResizeCanvas	$RAYLIB/raylib.oc	/^[extern] def ImageResizeCanvas(image: &Image, newWidth: i32, newHeight: i32, offsetX: i32, offse/;"	f
ImageResizeNN	$RAYLIB/raylib.oc	/^[extern] def ImageResizeNN(image: &Image, newWidth: i32, newHeight: i32): u8$/;"	f
ImageRotate	$RAYLIB/raylib.oc	/^[extern] def ImageRotate(image: &Image, degrees: i32): u8$/;"	f
ImageRotateCCW	$RAYLIB/raylib.oc	/^[extern] def ImageRotateCCW(image: &Image): u8$/;"	f
ImageRotateCW	$RAYLIB/raylib.oc	/^[extern] def ImageRotateCW(image: &Image): u8$/;"	f
ImageText	$RAYLIB/raylib.oc	/^[extern] def ImageText(text: &char, fontSize: i32, color: Color): Image$/;"	f
ImageTextEx	$RAYLIB/raylib.oc	/^[extern] def ImageTextEx(font: Font, text: &char, fontSize: f32, spacing: f32, tint: Color): Ima/;"	f
ImageToPOT	$RAYLIB/raylib.oc	/^[extern] def ImageToPOT(image: &Image, fill: Color): u8$/;"	f
InitAudioDevice	$RAYLIB/raylib.oc	/^[extern] def InitAudioDevice(): u8$/;"	f
InitWindow	$RAYLIB/raylib.oc	/^[extern] def InitWindow(width: i32, height: i32, title: &char): u8$/;"	f
IsAudioDeviceReady	$RAYLIB/raylib.oc	/^[extern] def IsAudioDeviceReady(): bool$/;"	f
IsAudioStreamPlaying	$RAYLIB/raylib.oc	/^[extern] def IsAudioStreamPlaying(stream: AudioStream): bool$/;"	f
IsAudioStreamProcessed	$RAYLIB/raylib.oc	/^[extern] def IsAudioStreamProcessed(stream: AudioStream): bool$/;"	f
IsAudioStreamReady	$RAYLIB/raylib.oc	/^[extern] def IsAudioStreamReady(stream: AudioStream): bool$/;"	f
IsCursorHidden	$RAYLIB/raylib.oc	/^[extern] def IsCursorHidden(): bool$/;"	f
IsCursorOnScreen	$RAYLIB/raylib.oc	/^[extern] def IsCursorOnScreen(): bool$/;"	f
IsFileDropped	$RAYLIB/raylib.oc	/^[extern] def IsFileDropped(): bool$/;"	f
IsFileExtension	$RAYLIB/raylib.oc	/^[extern] def IsFileExtension(fileName: &char, ext: &char): bool$/;"	f
IsFontReady	$RAYLIB/raylib.oc	/^[extern] def IsFontReady(font: Font): bool$/;"	f
IsGamepadAvailable	$RAYLIB/raylib.oc	/^[extern] def IsGamepadAvailable(gamepad: i32): bool$/;"	f
IsGamepadButtonDown	$RAYLIB/raylib.oc	/^[extern] def IsGamepadButtonDown(gamepad: i32, button: i32): bool$/;"	f
IsGamepadButtonPressed	$RAYLIB/raylib.oc	/^[extern] def IsGamepadButtonPressed(gamepad: i32, button: i32): bool$/;"	f
IsGamepadButtonReleased	$RAYLIB/raylib.oc	/^[extern] def IsGamepadButtonReleased(gamepad: i32, button: i32): bool$/;"	f
IsGamepadButtonUp	$RAYLIB/raylib.oc	/^[extern] def IsGamepadButtonUp(gamepad: i32, button: i32): bool$/;"	f
IsGestureDetected	$RAYLIB/raylib.oc	/^[extern] def IsGestureDetected(gesture: u32): bool$/;"	f
IsImageReady	$RAYLIB/raylib.oc	/^[extern] def IsImageReady(image: Image): bool$/;"	f
IsKeyDown	$RAYLIB/raylib.oc	/^[extern] def IsKeyDown(key: i32): bool$/;"	f
IsKeyPressed	$RAYLIB/raylib.oc	/^[extern] def IsKeyPressed(key: i32): bool$/;"	f
IsKeyPressedRepeat	$RAYLIB/raylib.oc	/^[extern] def IsKeyPressedRepeat(key: i32): bool$/;"	f
IsKeyReleased	$RAYLIB/raylib.oc	/^[extern] def IsKeyReleased(key: i32): bool$/;"	f
IsKeyUp	$RAYLIB/raylib.oc	/^[extern] def IsKeyUp(key: i32): bool$/;"	f
IsMaterialReady	$RAYLIB/raylib.oc	/^[extern] def IsMaterialReady(material: Material): bool$/;"	f
IsModelAnimationValid	$RAYLIB/raylib.oc	/^[extern] def IsModelAnimationValid(model: Model, anim: ModelAnimation): bool$/;"	f
IsModelReady	$RAYLIB/raylib.oc	/^[extern] def IsModelReady(model: Model): bool$/;"	f
IsMouseButtonDown	$RAYLIB/raylib.oc	/^[extern] def IsMouseButtonDown(button: i32): bool$/;"	f
IsMouseButtonPressed	$RAYLIB/raylib.oc	/^[extern] def IsMouseButtonPressed(button: i32): bool$/;"	f
IsMouseButtonReleased	$RAYLIB/raylib.oc	/^[extern] def IsMouseButtonReleased(button: i32): bool$/;"	f
IsMouseButtonUp	$RAYLIB/raylib.oc	/^[extern] def IsMouseButtonUp(button: i32): bool$/;"	f
IsMusicReady	$RAYLIB/raylib.oc	/^[extern] def IsMusicReady(music: Music): bool$/;"	f
IsMusicStreamPlaying	$RAYLIB/raylib.oc	/^[extern] def IsMusicStreamPlaying(music: Music): bool$/;"	f
IsPathFile	$RAYLIB/raylib.oc	/^[extern] def IsPathFile(path: &char): bool$/;"	f
IsRenderTextureReady	$RAYLIB/raylib.oc	/^[extern] def IsRenderTextureReady(target: RenderTexture2D): bool$/;"	f
IsShaderReady	$RAYLIB/raylib.oc	/^[extern] def IsShaderReady(shader: Shader): bool$/;"	f
IsSoundPlaying	$RAYLIB/raylib.oc	/^[extern] def IsSoundPlaying(sound: Sound): bool$/;"	f
IsSoundReady	$RAYLIB/raylib.oc	/^[extern] def IsSoundReady(sound: Sound): bool$/;"	f
IsTextureReady	$RAYLIB/raylib.oc	/^[extern] def IsTextureReady(texture: Texture2D): bool$/;"	f
IsWaveReady	$RAYLIB/raylib.oc	/^[extern] def IsWaveReady(wave: Wave): bool$/;"	f
IsWindowFocused	$RAYLIB/raylib.oc	/^[extern] def IsWindowFocused(): bool$/;"	f
IsWindowFullscreen	$RAYLIB/raylib.oc	/^[extern] def IsWindowFullscreen(): bool$/;"	f
IsWindowHidden	$RAYLIB/raylib.oc	/^[extern] def IsWindowHidden(): bool$/;"	f
IsWindowMaximized	$RAYLIB/raylib.oc	/^[extern] def IsWindowMaximized(): bool$/;"	f
IsWindowMinimized	$RAYLIB/raylib.oc	/^[extern] def IsWindowMinimized(): bool$/;"	f
IsWindowReady	$RAYLIB/raylib.oc	/^[extern] def IsWindowReady(): bool$/;"	f
IsWindowResized	$RAYLIB/raylib.oc	/^[extern] def IsWindowResized(): bool$/;"	f
IsWindowState	$RAYLIB/raylib.oc	/^[extern] def IsWindowState(flag: u32): bool$/;"	f
KeyboardKey	$RAYLIB/raylib.oc	/^[extern] enum KeyboardKey {$/;"	f
LIGHTGRAY	$RAYLIB/raylib.oc	/^[extern] const LIGHTGRAY: Color$/;"	f
LIME	$RAYLIB/raylib.oc	/^[extern] const LIME: Color$/;"	f
LoadAudioStream	$RAYLIB/raylib.oc	/^[extern] def LoadAudioStream(sampleRate: u32, sampleSize: u32, channels: u32): AudioStream$/;"	f
LoadAutomationEventList	$RAYLIB/raylib.oc	/^[extern] def LoadAutomationEventList(fileName: &char): AutomationEventList$/;"	f
LoadCodepoints	$RAYLIB/raylib.oc	/^[extern] def LoadCodepoints(text: &char, count: &i32): &i32$/;"	f
LoadDirectoryFiles	$RAYLIB/raylib.oc	/^[extern] def LoadDirectoryFiles(dirPath: &char): FilePathList$/;"	f
LoadDirectoryFilesEx	$RAYLIB/raylib.oc	/^[extern] def LoadDirectoryFilesEx(basePath: &char, filter: &char, scanSubdirs: bool): FilePathLi/;"	f
LoadDroppedFiles	$RAYLIB/raylib.oc	/^[extern] def LoadDroppedFiles(): FilePathList$/;"	f
LoadFileData	$RAYLIB/raylib.oc	/^[extern] def LoadFileData(fileName: &char, dataSize: &i32): &u8$/;"	f
LoadFileDataCallback	$RAYLIB/raylib.oc	/^typedef LoadFileDataCallback = fn(&char, &i32): &u8$/;"	f
LoadFileText	$RAYLIB/raylib.oc	/^[extern] def LoadFileText(fileName: &char): &char$/;"	f
LoadFileTextCallback	$RAYLIB/raylib.oc	/^typedef LoadFileTextCallback = fn(&char): &char$/;"	f
LoadFont	$RAYLIB/raylib.oc	/^[extern] def LoadFont(fileName: &char): Font$/;"	f
LoadFontData	$RAYLIB/raylib.oc	/^[extern] def LoadFontData(fileData: &u8, dataSize: i32, fontSize: i32, codepoints: &i32, codepoi/;"	f
LoadFontEx	$RAYLIB/raylib.oc	/^[extern] def LoadFontEx(fileName: &char, fontSize: i32, codepoints: &i32, codepointCount: i32): /;"	f
LoadFontFromImage	$RAYLIB/raylib.oc	/^[extern] def LoadFontFromImage(image: Image, key: Color, firstChar: i32): Font$/;"	f
LoadFontFromMemory	$RAYLIB/raylib.oc	/^[extern] def LoadFontFromMemory(fileType: &char, fileData: &u8, dataSize: i32, fontSize: i32, co/;"	f
LoadImage	$RAYLIB/raylib.oc	/^[extern] def LoadImage(fileName: &char): Image$/;"	f
LoadImageAnim	$RAYLIB/raylib.oc	/^[extern] def LoadImageAnim(fileName: &char, frames: &i32): Image$/;"	f
LoadImageAnimFromMemory	$RAYLIB/raylib.oc	/^[extern] def LoadImageAnimFromMemory(fileType: &char, fileData: &u8, dataSize: i32, frames: &i32/;"	f
LoadImageColors	$RAYLIB/raylib.oc	/^[extern] def LoadImageColors(image: Image): &Color$/;"	f
LoadImageFromMemory	$RAYLIB/raylib.oc	/^[extern] def LoadImageFromMemory(fileType: &char, fileData: &u8, dataSize: i32): Image$/;"	f
LoadImageFromScreen	$RAYLIB/raylib.oc	/^[extern] def LoadImageFromScreen(): Image$/;"	f
LoadImageFromTexture	$RAYLIB/raylib.oc	/^[extern] def LoadImageFromTexture(texture: Texture2D): Image$/;"	f
LoadImagePalette	$RAYLIB/raylib.oc	/^[extern] def LoadImagePalette(image: Image, maxPaletteSize: i32, colorCount: &i32): &Color$/;"	f
LoadImageRaw	$RAYLIB/raylib.oc	/^[extern] def LoadImageRaw(fileName: &char, width: i32, height: i32, format: i32, headerSize: i32/;"	f
LoadImageSvg	$RAYLIB/raylib.oc	/^[extern] def LoadImageSvg(fileNameOrString: &char, width: i32, height: i32): Image$/;"	f
LoadMaterialDefault	$RAYLIB/raylib.oc	/^[extern] def LoadMaterialDefault(): Material$/;"	f
LoadMaterials	$RAYLIB/raylib.oc	/^[extern] def LoadMaterials(fileName: &char, materialCount: &i32): &Material$/;"	f
LoadModel	$RAYLIB/raylib.oc	/^[extern] def LoadModel(fileName: &char): Model$/;"	f
LoadModelAnimations	$RAYLIB/raylib.oc	/^[extern] def LoadModelAnimations(fileName: &char, animCount: &i32): &ModelAnimation$/;"	f
LoadModelFromMesh	$RAYLIB/raylib.oc	/^[extern] def LoadModelFromMesh(mesh: Mesh): Model$/;"	f
LoadMusicStream	$RAYLIB/raylib.oc	/^[extern] def LoadMusicStream(fileName: &char): Music$/;"	f
LoadMusicStreamFromMemory	$RAYLIB/raylib.oc	/^[extern] def LoadMusicStreamFromMemory(fileType: &char, data: &u8, dataSize: i32): Music$/;"	f
LoadRandomSequence	$RAYLIB/raylib.oc	/^[extern] def LoadRandomSequence(count: u32, min: i32, max: i32): &i32$/;"	f
LoadRenderTexture	$RAYLIB/raylib.oc	/^[extern] def LoadRenderTexture(width: i32, height: i32): RenderTexture2D$/;"	f
LoadShader	$RAYLIB/raylib.oc	/^[extern] def LoadShader(vsFileName: &char, fsFileName: &char): Shader$/;"	f
LoadShaderFromMemory	$RAYLIB/raylib.oc	/^[extern] def LoadShaderFromMemory(vsCode: &char, fsCode: &char): Shader$/;"	f
LoadSound	$RAYLIB/raylib.oc	/^[extern] def LoadSound(fileName: &char): Sound$/;"	f
LoadSoundAlias	$RAYLIB/raylib.oc	/^[extern] def LoadSoundAlias(source: Sound): Sound$/;"	f
LoadSoundFromWave	$RAYLIB/raylib.oc	/^[extern] def LoadSoundFromWave(wave: Wave): Sound$/;"	f
LoadTexture	$RAYLIB/raylib.oc	/^[extern] def LoadTexture(fileName: &char): Texture2D$/;"	f
LoadTextureCubemap	$RAYLIB/raylib.oc	/^[extern] def LoadTextureCubemap(image: Image, layout: i32): TextureCubemap$/;"	f
LoadTextureFromImage	$RAYLIB/raylib.oc	/^[extern] def LoadTextureFromImage(image: Image): Texture2D$/;"	f
LoadUTF8	$RAYLIB/raylib.oc	/^[extern] def LoadUTF8(codepoints: &i32, length: i32): &char$/;"	f
LoadVrStereoConfig	$RAYLIB/raylib.oc	/^[extern] def LoadVrStereoConfig(device: VrDeviceInfo): VrStereoConfig$/;"	f
LoadWave	$RAYLIB/raylib.oc	/^[extern] def LoadWave(fileName: &char): Wave$/;"	f
LoadWaveFromMemory	$RAYLIB/raylib.oc	/^[extern] def LoadWaveFromMemory(fileType: &char, fileData: &u8, dataSize: i32): Wave$/;"	f
LoadWaveSamples	$RAYLIB/raylib.oc	/^[extern] def LoadWaveSamples(wave: Wave): &f32$/;"	f
MAGENTA	$RAYLIB/raylib.oc	/^[extern] const MAGENTA: Color$/;"	f
MAROON	$RAYLIB/raylib.oc	/^[extern] const MAROON: Color$/;"	f
Material	$RAYLIB/raylib.oc	/^[extern] struct Material {$/;"	f
MaterialMap	$RAYLIB/raylib.oc	/^[extern] struct MaterialMap {$/;"	f
MaterialMapIndex	$RAYLIB/raylib.oc	/^[extern] enum MaterialMapIndex {$/;"	f
Matrix	$RAYLIB/raylib.oc	/^[extern] struct Matrix {$/;"	f
MaximizeWindow	$RAYLIB/raylib.oc	/^[extern] def MaximizeWindow(): u8$/;"	f
MeasureText	$RAYLIB/raylib.oc	/^[extern] def MeasureText(text: &char, fontSize: i32): i32$/;"	f
MeasureTextEx	$RAYLIB/raylib.oc	/^[extern] def MeasureTextEx(font: Font, text: &char, fontSize: f32, spacing: f32): Vector2$/;"	f
MemAlloc	$RAYLIB/raylib.oc	/^[extern] def MemAlloc(size: u32): untyped_ptr$/;"	f
MemFree	$RAYLIB/raylib.oc	/^[extern] def MemFree(ptr: untyped_ptr): u8$/;"	f
MemRealloc	$RAYLIB/raylib.oc	/^[extern] def MemRealloc(ptr: untyped_ptr, size: u32): untyped_ptr$/;"	f
Mesh	$RAYLIB/raylib.oc	/^[extern] struct Mesh {$/;"	f
MinimizeWindow	$RAYLIB/raylib.oc	/^[extern] def MinimizeWindow(): u8$/;"	f
Model	$RAYLIB/raylib.oc	/^[extern] struct Model {$/;"	f
ModelAnimation	$RAYLIB/raylib.oc	/^[extern] struct ModelAnimation {$/;"	f
MouseButton	$RAYLIB/raylib.oc	/^[extern] enum MouseButton {$/;"	f
MouseCursor	$RAYLIB/raylib.oc	/^[extern] enum MouseCursor {$/;"	f
Music	$RAYLIB/raylib.oc	/^[extern] struct Music {$/;"	f
NPatchInfo	$RAYLIB/raylib.oc	/^[extern] struct NPatchInfo {$/;"	f
NPatchLayout	$RAYLIB/raylib.oc	/^[extern] enum NPatchLayout {$/;"	f
ORANGE	$RAYLIB/raylib.oc	/^[extern] const ORANGE: Color$/;"	f
OpenURL	$RAYLIB/raylib.oc	/^[extern] def OpenURL(url: &char): u8$/;"	f
PI	$RAYLIB/raylib.oc	/^[extern] const PI: f32$/;"	f
PINK	$RAYLIB/raylib.oc	/^[extern] const PINK: Color$/;"	f
PURPLE	$RAYLIB/raylib.oc	/^[extern] const PURPLE: Color$/;"	f
PauseAudioStream	$RAYLIB/raylib.oc	/^[extern] def PauseAudioStream(stream: AudioStream): u8$/;"	f
PauseMusicStream	$RAYLIB/raylib.oc	/^[extern] def PauseMusicStream(music: Music): u8$/;"	f
PauseSound	$RAYLIB/raylib.oc	/^[extern] def PauseSound(sound: Sound): u8$/;"	f
PixelFormat	$RAYLIB/raylib.oc	/^[extern] enum PixelFormat {$/;"	f
PlayAudioStream	$RAYLIB/raylib.oc	/^[extern] def PlayAudioStream(stream: AudioStream): u8$/;"	f
PlayAutomationEvent	$RAYLIB/raylib.oc	/^[extern] def PlayAutomationEvent(event: AutomationEvent): u8$/;"	f
PlayMusicStream	$RAYLIB/raylib.oc	/^[extern] def PlayMusicStream(music: Music): u8$/;"	f
PlaySound	$RAYLIB/raylib.oc	/^[extern] def PlaySound(sound: Sound): u8$/;"	f
PollInputEvents	$RAYLIB/raylib.oc	/^[extern] def PollInputEvents(): u8$/;"	f
Quaternion	$RAYLIB/raylib.oc	/^typedef Quaternion = Vector4$/;"	f
RAD2DEG	$RAYLIB/raylib.oc	/^[extern] const RAD2DEG: f32$/;"	f
RAYLIB_VERSION	$RAYLIB/raylib.oc	/^[extern] const RAYLIB_VERSION: str$/;"	f
RAYLIB_VERSION_MAJOR	$RAYLIB/raylib.oc	/^[extern] const RAYLIB_VERSION_MAJOR: i32$/;"	f
RAYLIB_VERSION_MINOR	$RAYLIB/raylib.oc	/^[extern] const RAYLIB_VERSION_MINOR: i32$/;"	f
RAYLIB_VERSION_PATCH	$RAYLIB/raylib.oc	/^[extern] const RAYLIB_VERSION_PATCH: i32$/;"	f
RAYWHITE	$RAYLIB/raylib.oc	/^[extern] const RAYWHITE: Color$/;"	f
RED	$RAYLIB/raylib.oc	/^[extern] const RED: Color$/;"	f
Ray	$RAYLIB/raylib.oc	/^[extern] struct Ray {$/;"	f
RayCollision	$RAYLIB/raylib.oc	/^[extern] struct RayCollision {$/;"	f
Rectangle	$RAYLIB/raylib.oc	/^[extern] struct Rectangle {$/;"	f
RenderTexture	$RAYLIB/raylib.oc	/^[extern] struct RenderTexture {$/;"	f
RenderTexture2D	$RAYLIB/raylib.oc	/^typedef RenderTexture2D = RenderTexture$/;"	f
RestoreWindow	$RAYLIB/raylib.oc	/^[extern] def RestoreWindow(): u8$/;"	f
ResumeAudioStream	$RAYLIB/raylib.oc	/^[extern] def ResumeAudioStream(stream: AudioStream): u8$/;"	f
ResumeMusicStream	$RAYLIB/raylib.oc	/^[extern] def ResumeMusicStream(music: Music): u8$/;"	f
ResumeSound	$RAYLIB/raylib.oc	/^[extern] def ResumeSound(sound: Sound): u8$/;"	f
SKYBLUE	$RAYLIB/raylib.oc	/^[extern] const SKYBLUE: Color$/;"	f
SaveFileData	$RAYLIB/raylib.oc	/^[extern] def SaveFileData(fileName: &char, data: untyped_ptr, dataSize: i32): bool$/;"	f
SaveFileDataCallback	$RAYLIB/raylib.oc	/^typedef SaveFileDataCallback = fn(&char, untyped_ptr, i32): bool$/;"	f
SaveFileText	$RAYLIB/raylib.oc	/^[extern] def SaveFileText(fileName: &char, text: &char): bool$/;"	f
SaveFileTextCallback	$RAYLIB/raylib.oc	/^typedef SaveFileTextCallback = fn(&char, &char): bool$/;"	f
SeekMusicStream	$RAYLIB/raylib.oc	/^[extern] def SeekMusicStream(music: Music, position: f32): u8$/;"	f
SetAudioStreamBufferSizeDefault	$RAYLIB/raylib.oc	/^[extern] def SetAudioStreamBufferSizeDefault(size: i32): u8$/;"	f
SetAudioStreamCallback	$RAYLIB/raylib.oc	/^[extern] def SetAudioStreamCallback(stream: AudioStream, callback: AudioCallback): u8$/;"	f
SetAudioStreamPan	$RAYLIB/raylib.oc	/^[extern] def SetAudioStreamPan(stream: AudioStream, pan: f32): u8$/;"	f
SetAudioStreamPitch	$RAYLIB/raylib.oc	/^[extern] def SetAudioStreamPitch(stream: AudioStream, pitch: f32): u8$/;"	f
SetAudioStreamVolume	$RAYLIB/raylib.oc	/^[extern] def SetAudioStreamVolume(stream: AudioStream, volume: f32): u8$/;"	f
SetAutomationEventBaseFrame	$RAYLIB/raylib.oc	/^[extern] def SetAutomationEventBaseFrame(frame: i32): u8$/;"	f
SetAutomationEventList	$RAYLIB/raylib.oc	/^[extern] def SetAutomationEventList(list: &AutomationEventList): u8$/;"	f
SetClipboardText	$RAYLIB/raylib.oc	/^[extern] def SetClipboardText(text: &char): u8$/;"	f
SetConfigFlags	$RAYLIB/raylib.oc	/^[extern] def SetConfigFlags(flags: u32): u8$/;"	f
SetExitKey	$RAYLIB/raylib.oc	/^[extern] def SetExitKey(key: i32): u8$/;"	f
SetGamepadMappings	$RAYLIB/raylib.oc	/^[extern] def SetGamepadMappings(mappings: &char): i32$/;"	f
SetGamepadVibration	$RAYLIB/raylib.oc	/^[extern] def SetGamepadVibration(gamepad: i32, leftMotor: f32, rightMotor: f32): u8$/;"	f
SetGesturesEnabled	$RAYLIB/raylib.oc	/^[extern] def SetGesturesEnabled(flags: u32): u8$/;"	f
SetLoadFileDataCallback	$RAYLIB/raylib.oc	/^[extern] def SetLoadFileDataCallback(callback: LoadFileDataCallback): u8$/;"	f
SetLoadFileTextCallback	$RAYLIB/raylib.oc	/^[extern] def SetLoadFileTextCallback(callback: LoadFileTextCallback): u8$/;"	f
SetMasterVolume	$RAYLIB/raylib.oc	/^[extern] def SetMasterVolume(volume: f32): u8$/;"	f
SetMaterialTexture	$RAYLIB/raylib.oc	/^[extern] def SetMaterialTexture(material: &Material, mapType: i32, texture: Texture2D): u8$/;"	f
SetModelMeshMaterial	$RAYLIB/raylib.oc	/^[extern] def SetModelMeshMaterial(model: &Model, meshId: i32, materialId: i32): u8$/;"	f
SetMouseCursor	$RAYLIB/raylib.oc	/^[extern] def SetMouseCursor(cursor: i32): u8$/;"	f
SetMouseOffset	$RAYLIB/raylib.oc	/^[extern] def SetMouseOffset(offsetX: i32, offsetY: i32): u8$/;"	f
SetMousePosition	$RAYLIB/raylib.oc	/^[extern] def SetMousePosition(x: i32, y: i32): u8$/;"	f
SetMouseScale	$RAYLIB/raylib.oc	/^[extern] def SetMouseScale(scaleX: f32, scaleY: f32): u8$/;"	f
SetMusicPan	$RAYLIB/raylib.oc	/^[extern] def SetMusicPan(music: Music, pan: f32): u8$/;"	f
SetMusicPitch	$RAYLIB/raylib.oc	/^[extern] def SetMusicPitch(music: Music, pitch: f32): u8$/;"	f
SetMusicVolume	$RAYLIB/raylib.oc	/^[extern] def SetMusicVolume(music: Music, volume: f32): u8$/;"	f
SetPixelColor	$RAYLIB/raylib.oc	/^[extern] def SetPixelColor(dstPtr: untyped_ptr, color: Color, format: i32): u8$/;"	f
SetRandomSeed	$RAYLIB/raylib.oc	/^[extern] def SetRandomSeed(seed: u32): u8$/;"	f
SetSaveFileDataCallback	$RAYLIB/raylib.oc	/^[extern] def SetSaveFileDataCallback(callback: SaveFileDataCallback): u8$/;"	f
SetSaveFileTextCallback	$RAYLIB/raylib.oc	/^[extern] def SetSaveFileTextCallback(callback: SaveFileTextCallback): u8$/;"	f
SetShaderValue	$RAYLIB/raylib.oc	/^[extern] def SetShaderValue(shader: Shader, locIndex: i32, value: untyped_ptr, uniformType: i32)/;"	f
SetShaderValueMatrix	$RAYLIB/raylib.oc	/^[extern] def SetShaderValueMatrix(shader: Shader, locIndex: i32, mat: Matrix): u8$/;"	f
SetShaderValueTexture	$RAYLIB/raylib.oc	/^[extern] def SetShaderValueTexture(shader: Shader, locIndex: i32, texture: Texture2D): u8$/;"	f
SetShaderValueV	$RAYLIB/raylib.oc	/^[extern] def SetShaderValueV(shader: Shader, locIndex: i32, value: untyped_ptr, uniformType: i32/;"	f
SetShapesTexture	$RAYLIB/raylib.oc	/^[extern] def SetShapesTexture(texture: Texture2D, source: Rectangle): u8$/;"	f
SetSoundPan	$RAYLIB/raylib.oc	/^[extern] def SetSoundPan(sound: Sound, pan: f32): u8$/;"	f
SetSoundPitch	$RAYLIB/raylib.oc	/^[extern] def SetSoundPitch(sound: Sound, pitch: f32): u8$/;"	f
SetSoundVolume	$RAYLIB/raylib.oc	/^[extern] def SetSoundVolume(sound: Sound, volume: f32): u8$/;"	f
SetTargetFPS	$RAYLIB/raylib.oc	/^[extern] def SetTargetFPS(fps: i32): u8$/;"	f
SetTextLineSpacing	$RAYLIB/raylib.oc	/^[extern] def SetTextLineSpacing(spacing: i32): u8$/;"	f
SetTextureFilter	$RAYLIB/raylib.oc	/^[extern] def SetTextureFilter(texture: Texture2D, filter: i32): u8$/;"	f
SetTextureWrap	$RAYLIB/raylib.oc	/^[extern] def SetTextureWrap(texture: Texture2D, wrap: i32): u8$/;"	f
SetTraceLogCallback	$RAYLIB/raylib.oc	/^[extern] def SetTraceLogCallback(callback: TraceLogCallback): u8$/;"	f
SetTraceLogLevel	$RAYLIB/raylib.oc	/^[extern] def SetTraceLogLevel(logLevel: i32): u8$/;"	f
SetWindowFocused	$RAYLIB/raylib.oc	/^[extern] def SetWindowFocused(): u8$/;"	f
SetWindowIcon	$RAYLIB/raylib.oc	/^[extern] def SetWindowIcon(image: Image): u8$/;"	f
SetWindowIcons	$RAYLIB/raylib.oc	/^[extern] def SetWindowIcons(images: &Image, count: i32): u8$/;"	f
SetWindowMaxSize	$RAYLIB/raylib.oc	/^[extern] def SetWindowMaxSize(width: i32, height: i32): u8$/;"	f
SetWindowMinSize	$RAYLIB/raylib.oc	/^[extern] def SetWindowMinSize(width: i32, height: i32): u8$/;"	f
SetWindowMonitor	$RAYLIB/raylib.oc	/^[extern] def SetWindowMonitor(monitor: i32): u8$/;"	f
SetWindowOpacity	$RAYLIB/raylib.oc	/^[extern] def SetWindowOpacity(opacity: f32): u8$/;"	f
SetWindowPosition	$RAYLIB/raylib.oc	/^[extern] def SetWindowPosition(x: i32, y: i32): u8$/;"	f
SetWindowSize	$RAYLIB/raylib.oc	/^[extern] def SetWindowSize(width: i32, height: i32): u8$/;"	f
SetWindowState	$RAYLIB/raylib.oc	/^[extern] def SetWindowState(flags: u32): u8$/;"	f
SetWindowTitle	$RAYLIB/raylib.oc	/^[extern] def SetWindowTitle(title: &char): u8$/;"	f
Shader	$RAYLIB/raylib.oc	/^[extern] struct Shader {$/;"	f
ShaderAttributeDataType	$RAYLIB/raylib.oc	/^[extern] enum ShaderAttributeDataType {$/;"	f
ShaderLocationIndex	$RAYLIB/raylib.oc	/^[extern] enum ShaderLocationIndex {$/;"	f
ShaderUniformDataType	$RAYLIB/raylib.oc	/^[extern] enum ShaderUniformDataType {$/;"	f
ShowCursor	$RAYLIB/raylib.oc	/^[extern] def ShowCursor(): u8$/;"	f
Sound	$RAYLIB/raylib.oc	/^[extern] struct Sound {$/;"	f
StartAutomationEventRecording	$RAYLIB/raylib.oc	/^[extern] def StartAutomationEventRecording(): u8$/;"	f
StopAudioStream	$RAYLIB/raylib.oc	/^[extern] def StopAudioStream(stream: AudioStream): u8$/;"	f
StopAutomationEventRecording	$RAYLIB/raylib.oc	/^[extern] def StopAutomationEventRecording(): u8$/;"	f
StopMusicStream	$RAYLIB/raylib.oc	/^[extern] def StopMusicStream(music: Music): u8$/;"	f
StopSound	$RAYLIB/raylib.oc	/^[extern] def StopSound(sound: Sound): u8$/;"	f
SwapScreenBuffer	$RAYLIB/raylib.oc	/^[extern] def SwapScreenBuffer(): u8$/;"	f
TakeScreenshot	$RAYLIB/raylib.oc	/^[extern] def TakeScreenshot(fileName: &char): u8$/;"	f
TextAppend	$RAYLIB/raylib.oc	/^[extern] def TextAppend(text: &char, append: &char, position: &i32): u8$/;"	f
TextCopy	$RAYLIB/raylib.oc	/^[extern] def TextCopy(dst: &char, src: &char): i32$/;"	f
TextFindIndex	$RAYLIB/raylib.oc	/^[extern] def TextFindIndex(text: &char, find: &char): i32$/;"	f
TextInsert	$RAYLIB/raylib.oc	/^[extern] def TextInsert(text: &char, insert: &char, position: i32): &char$/;"	f
TextIsEqual	$RAYLIB/raylib.oc	/^[extern] def TextIsEqual(text1: &char, text2: &char): bool$/;"	f
TextJoin	$RAYLIB/raylib.oc	/^[extern] def TextJoin(textList: &char, count: i32, delimiter: &char): &char$/;"	f
TextLength	$RAYLIB/raylib.oc	/^[extern] def TextLength(text: &char): u32$/;"	f
TextReplace	$RAYLIB/raylib.oc	/^[extern] def TextReplace(text: &char, replace: &char, by: &char): &char$/;"	f
TextSplit	$RAYLIB/raylib.oc	/^[extern] def TextSplit(text: &char, delimiter: char, count: &i32): &char$/;"	f
TextSubtext	$RAYLIB/raylib.oc	/^[extern] def TextSubtext(text: &char, position: i32, length: i32): &char$/;"	f
TextToFloat	$RAYLIB/raylib.oc	/^[extern] def TextToFloat(text: &char): f32$/;"	f
TextToInteger	$RAYLIB/raylib.oc	/^[extern] def TextToInteger(text: &char): i32$/;"	f
TextToLower	$RAYLIB/raylib.oc	/^[extern] def TextToLower(text: &char): &char$/;"	f
TextToPascal	$RAYLIB/raylib.oc	/^[extern] def TextToPascal(text: &char): &char$/;"	f
TextToUpper	$RAYLIB/raylib.oc	/^[extern] def TextToUpper(text: &char): &char$/;"	f
Texture	$RAYLIB/raylib.oc	/^[extern] struct Texture {$/;"	f
Texture2D	$RAYLIB/raylib.oc	/^typedef Texture2D = Texture$/;"	f
TextureCubemap	$RAYLIB/raylib.oc	/^typedef TextureCubemap = Texture$/;"	f
TextureFilter	$RAYLIB/raylib.oc	/^[extern] enum TextureFilter {$/;"	f
TextureWrap	$RAYLIB/raylib.oc	/^[extern] enum TextureWrap {$/;"	f
ToggleBorderlessWindowed	$RAYLIB/raylib.oc	/^[extern] def ToggleBorderlessWindowed(): u8$/;"	f
ToggleFullscreen	$RAYLIB/raylib.oc	/^[extern] def ToggleFullscreen(): u8$/;"	f
TraceLogCallback	$RAYLIB/raylib.oc	/^typedef TraceLogCallback = fn(i32, &char, ...): u8$/;"	f
TraceLogLevel	$RAYLIB/raylib.oc	/^[extern] enum TraceLogLevel {$/;"	f
Transform	$RAYLIB/raylib.oc	/^[extern] struct Transform {$/;"	f
UnloadAudioStream	$RAYLIB/raylib.oc	/^[extern] def UnloadAudioStream(stream: AudioStream): u8$/;"	f
UnloadAutomationEventList	$RAYLIB/raylib.oc	/^[extern] def UnloadAutomationEventList(list: AutomationEventList): u8$/;"	f
UnloadCodepoints	$RAYLIB/raylib.oc	/^[extern] def UnloadCodepoints(codepoints: &i32): u8$/;"	f
UnloadDirectoryFiles	$RAYLIB/raylib.oc	/^[extern] def UnloadDirectoryFiles(files: FilePathList): u8$/;"	f
UnloadDroppedFiles	$RAYLIB/raylib.oc	/^[extern] def UnloadDroppedFiles(files: FilePathList)$/;"	f
UnloadFileData	$RAYLIB/raylib.oc	/^[extern] def UnloadFileData(data: &u8): u8$/;"	f
UnloadFileText	$RAYLIB/raylib.oc	/^[extern] def UnloadFileText(text: &char): u8$/;"	f
UnloadFont	$RAYLIB/raylib.oc	/^[extern] def UnloadFont(font: Font): u8$/;"	f
UnloadFontData	$RAYLIB/raylib.oc	/^[extern] def UnloadFontData(glyphs: &GlyphInfo, glyphCount: i32): u8$/;"	f
UnloadImage	$RAYLIB/raylib.oc	/^[extern] def UnloadImage(image: Image): u8$/;"	f
UnloadImageColors	$RAYLIB/raylib.oc	/^[extern] def UnloadImageColors(colors: &Color): u8$/;"	f
UnloadImagePalette	$RAYLIB/raylib.oc	/^[extern] def UnloadImagePalette(colors: &Color): u8$/;"	f
UnloadMaterial	$RAYLIB/raylib.oc	/^[extern] def UnloadMaterial(material: Material): u8$/;"	f
UnloadMesh	$RAYLIB/raylib.oc	/^[extern] def UnloadMesh(mesh: Mesh): u8$/;"	f
UnloadModel	$RAYLIB/raylib.oc	/^[extern] def UnloadModel(model: Model): u8$/;"	f
UnloadModelAnimation	$RAYLIB/raylib.oc	/^[extern] def UnloadModelAnimation(anim: ModelAnimation): u8$/;"	f
UnloadModelAnimations	$RAYLIB/raylib.oc	/^[extern] def UnloadModelAnimations(animations: &ModelAnimation, animCount: i32): u8$/;"	f
UnloadMusicStream	$RAYLIB/raylib.oc	/^[extern] def UnloadMusicStream(music: Music): u8$/;"	f
UnloadRandomSequence	$RAYLIB/raylib.oc	/^[extern] def UnloadRandomSequence(sequence: &i32): u8$/;"	f
UnloadRenderTexture	$RAYLIB/raylib.oc	/^[extern] def UnloadRenderTexture(target: RenderTexture2D): u8$/;"	f
UnloadShader	$RAYLIB/raylib.oc	/^[extern] def UnloadShader(shader: Shader): u8$/;"	f
UnloadSound	$RAYLIB/raylib.oc	/^[extern] def UnloadSound(sound: Sound): u8$/;"	f
UnloadSoundAlias	$RAYLIB/raylib.oc	/^[extern] def UnloadSoundAlias(alias: Sound): u8$/;"	f
UnloadTexture	$RAYLIB/raylib.oc	/^[extern] def UnloadTexture(texture: Texture2D): u8$/;"	f
UnloadUTF8	$RAYLIB/raylib.oc	/^[extern] def UnloadUTF8(text: &char): u8$/;"	f
UnloadVrStereoConfig	$RAYLIB/raylib.oc	/^[extern] def UnloadVrStereoConfig(config: VrStereoConfig): u8$/;"	f
UnloadWave	$RAYLIB/raylib.oc	/^[extern] def UnloadWave(wave: Wave): u8$/;"	f
UnloadWaveSamples	$RAYLIB/raylib.oc	/^[extern] def UnloadWaveSamples(samples: &f32): u8$/;"	f
UpdateAudioStream	$RAYLIB/raylib.oc	/^[extern] def UpdateAudioStream(stream: AudioStream, data: untyped_ptr, frameCount: i32): u8$/;"	f
UpdateCamera	$RAYLIB/raylib.oc	/^[extern] def UpdateCamera(camera: &Camera, mode: i32): u8$/;"	f
UpdateCameraPro	$RAYLIB/raylib.oc	/^[extern] def UpdateCameraPro(camera: &Camera, movement: Vector3, rotation: Vector3, zoom: f32): /;"	f
UpdateMeshBuffer	$RAYLIB/raylib.oc	/^[extern] def UpdateMeshBuffer(mesh: Mesh, index: i32, data: untyped_ptr, dataSize: i32, offset: /;"	f
UpdateModelAnimation	$RAYLIB/raylib.oc	/^[extern] def UpdateModelAnimation(model: Model, anim: ModelAnimation, frame: i32): u8$/;"	f
UpdateMusicStream	$RAYLIB/raylib.oc	/^[extern] def UpdateMusicStream(music: Music): u8$/;"	f
UpdateSound	$RAYLIB/raylib.oc	/^[extern] def UpdateSound(sound: Sound, data: untyped_ptr, sampleCount: i32): u8$/;"	f
UpdateTexture	$RAYLIB/raylib.oc	/^[extern] def UpdateTexture(texture: Texture2D, pixels: untyped_ptr): u8$/;"	f
UpdateTextureRec	$RAYLIB/raylib.oc	/^[extern] def UpdateTextureRec(texture: Texture2D, rec: Rectangle, pixels: untyped_ptr): u8$/;"	f
UploadMesh	$RAYLIB/raylib.oc	/^[extern] def UploadMesh(mesh: &Mesh, dynamic: bool): u8$/;"	f
VIOLET	$RAYLIB/raylib.oc	/^[extern] const VIOLET: Color$/;"	f
Vector2	$RAYLIB/raylib.oc	/^[extern] struct Vector2 {$/;"	f
Vector3	$RAYLIB/raylib.oc	/^[extern] struct Vector3 {$/;"	f
Vector4	$RAYLIB/raylib.oc	/^[extern] struct Vector4 {$/;"	f
VrDeviceInfo	$RAYLIB/raylib.oc	/^[extern] struct VrDeviceInfo {$/;"	f
VrStereoConfig	$RAYLIB/raylib.oc	/^[extern] struct VrStereoConfig {$/;"	f
WHITE	$RAYLIB/raylib.oc	/^[extern] const WHITE: Color$/;"	f
WaitTime	$RAYLIB/raylib.oc	/^[extern] def WaitTime(seconds: f64): u8$/;"	f
Wave	$RAYLIB/raylib.oc	/^[extern] struct Wave {$/;"	f
WaveCopy	$RAYLIB/raylib.oc	/^[extern] def WaveCopy(wave: Wave): Wave$/;"	f
WaveCrop	$RAYLIB/raylib.oc	/^[extern] def WaveCrop(wave: &Wave, initSample: i32, finalSample: i32): u8$/;"	f
WaveFormat	$RAYLIB/raylib.oc	/^[extern] def WaveFormat(wave: &Wave, sampleRate: i32, sampleSize: i32, channels: i32): u8$/;"	f
WindowShouldClose	$RAYLIB/raylib.oc	/^[extern] def WindowShouldClose(): bool$/;"	f
YELLOW	$RAYLIB/raylib.oc	/^[extern] const YELLOW: Color$/;"	f
rAudioProcessor	$RAYLIB/raylib.oc	/^[extern] struct rAudioProcessor {$/;"	f
rAudioStream	$RAYLIB/raylib.oc	/^[extern] struct rAudioStream {$/;"	f
