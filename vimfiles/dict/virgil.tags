A0	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	def A0 = RiscV64Gpr.X10;$/;"	d
A1	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	def A1 = RiscV64Gpr.X11;$/;"	d
A2	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	def A2 = RiscV64Gpr.X12;$/;"	d
A3	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	def A3 = RiscV64Gpr.X13;$/;"	d
A4	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	def A4 = RiscV64Gpr.X14;$/;"	d
A5	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	def A5 = RiscV64Gpr.X15;$/;"	d
A6	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	def A6 = RiscV64Gpr.X16;$/;"	d
A7	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	def A7 = RiscV64Gpr.X17;$/;"	d
ABS_IMM16	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^enum Arm64PatchKind { REL_IMM19, ABS_IMM16, REL_IMM26 }$/;"	d
ACK	$VIRGIL_LOC/lib/net/tcpip/Packets.v3	/^	SYN, ACK, FIN, RST, URG, PSH, WND, CHK, SEQ, ACK2$/;"	d
ACK2	$VIRGIL_LOC/lib/net/tcpip/Packets.v3	/^	SYN, ACK, FIN, RST, URG, PSH, WND, CHK, SEQ, ACK2$/;"	d
ADDRESS_SIZE_OVERRIDE	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	OPERAND_SIZE_OVERRIDE, ADDRESS_SIZE_OVERRIDE, GROUP1_2$/;"	d
ADDRESS_SIZE_OVERRIDE_PREFIX	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^def ADDRESS_SIZE_OVERRIDE_PREFIX = 0x67;$/;"	d
AL	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case AL;    \/\/ Always (unconditional)$/;"	d
AL	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def AL  = Arm64Cond.new("al", 0xE);$/;"	d
ALWAYS	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def ALWAYS: X86_64Cond;$/;"	d
ALWAYS	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def ALWAYS: X86Cond;$/;"	d
ANY_V4	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	def ANY_V4 = InetAddress.Ipv4(0, 0, 0, 0);$/;"	d
ANY_V6	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	def ANY_V6 = InetAddress.Ipv6(0, 0, 0, 0);$/;"	d
ASR	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^enum RegShift { LSL, LSR, ASR, NONE } \/\/ NONE shift is reserved for instructions like mul, div$/;"	d
AddImm	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case AddImm(off: u8);$/;"	d
AddReg	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case AddReg(rm: ArmReg);$/;"	d
AddrInUse	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	AddrInUse("Address in use"),$/;"	d
AddrNotAvailable	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	AddrNotAvailable("Address not available"),$/;"	d
AlreadyExists	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	AlreadyExists("Entity already exists"),$/;"	d
Animator	$VIRGIL_LOC/lib/term/Animator.v3	/^class Animator(animate: u32 -> void, keypress: int -> void) {$/;"	c
Arm64Assembler	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^class Arm64Assembler(w: DataWriter) {$/;"	c
Arm64Cond	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^class Arm64Cond(name: string, index: int) {$/;"	c
Arm64Conds	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^component Arm64Conds {$/;"	n
Arm64Gpr	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^class Arm64Gpr extends Arm64Reg {$/;"	c
Arm64PatchKind	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^enum Arm64PatchKind { REL_IMM19, ABS_IMM16, REL_IMM26 }$/;"	e
Arm64Reg	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^class Arm64Reg(regnum: u5) {}$/;"	c
Arm64Regs	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^component Arm64Regs {$/;"	n
Arm64Sfr	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^class Arm64Sfr extends Arm64Reg {$/;"	c
ArmAssembler	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^class ArmAssembler(w: DataWriter) {$/;"	c
ArmCond	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^type ArmCond {$/;"	c
ArmCond.AL	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case AL;    \/\/ Always (unconditional)$/;"	c
ArmCond.AL	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case AL;    \/\/ Always (unconditional)$/;"	c
ArmCond.AL	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case AL;    \/\/ Always (unconditional)$/;"	c
ArmCond.CC	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case CC;    \/\/ Carry clear\/unsigned lower$/;"	c
ArmCond.CC	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case CC;    \/\/ Carry clear\/unsigned lower$/;"	c
ArmCond.CC	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case CC;    \/\/ Carry clear\/unsigned lower$/;"	c
ArmCond.CS	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case CS;    \/\/ Carry set\/unsigned higher or same$/;"	c
ArmCond.CS	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case CS;    \/\/ Carry set\/unsigned higher or same$/;"	c
ArmCond.CS	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case CS;    \/\/ Carry set\/unsigned higher or same$/;"	c
ArmCond.EQ	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case EQ;    \/\/ Equal$/;"	c
ArmCond.EQ	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case EQ;    \/\/ Equal$/;"	c
ArmCond.EQ	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case EQ;    \/\/ Equal$/;"	c
ArmCond.GE	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case GE;    \/\/ Signed greater than or equal$/;"	c
ArmCond.GE	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case GE;    \/\/ Signed greater than or equal$/;"	c
ArmCond.GE	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case GE;    \/\/ Signed greater than or equal$/;"	c
ArmCond.GT	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case GT;    \/\/ Signed greater than$/;"	c
ArmCond.GT	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case GT;    \/\/ Signed greater than$/;"	c
ArmCond.GT	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case GT;    \/\/ Signed greater than$/;"	c
ArmCond.HI	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case HI;    \/\/ Unsigned higher$/;"	c
ArmCond.HI	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case HI;    \/\/ Unsigned higher$/;"	c
ArmCond.HI	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case HI;    \/\/ Unsigned higher$/;"	c
ArmCond.LE	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case LE;    \/\/ Signed less than or equal$/;"	c
ArmCond.LE	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case LE;    \/\/ Signed less than or equal$/;"	c
ArmCond.LE	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case LE;    \/\/ Signed less than or equal$/;"	c
ArmCond.LS	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case LS;    \/\/ Unsigned lower or same$/;"	c
ArmCond.LS	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case LS;    \/\/ Unsigned lower or same$/;"	c
ArmCond.LS	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case LS;    \/\/ Unsigned lower or same$/;"	c
ArmCond.LT	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case LT;    \/\/ Signed less than$/;"	c
ArmCond.LT	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case LT;    \/\/ Signed less than$/;"	c
ArmCond.LT	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case LT;    \/\/ Signed less than$/;"	c
ArmCond.MI	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case MI;    \/\/ Minus\/negative$/;"	c
ArmCond.MI	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case MI;    \/\/ Minus\/negative$/;"	c
ArmCond.MI	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case MI;    \/\/ Minus\/negative$/;"	c
ArmCond.NE	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case NE;    \/\/ Not equal$/;"	c
ArmCond.NE	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case NE;    \/\/ Not equal$/;"	c
ArmCond.NE	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case NE;    \/\/ Not equal$/;"	c
ArmCond.PL	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case PL;    \/\/ Plus\/positive or zero$/;"	c
ArmCond.PL	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case PL;    \/\/ Plus\/positive or zero$/;"	c
ArmCond.PL	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case PL;    \/\/ Plus\/positive or zero$/;"	c
ArmCond.VC	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case VC;    \/\/ No overflow$/;"	c
ArmCond.VC	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case VC;    \/\/ No overflow$/;"	c
ArmCond.VC	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case VC;    \/\/ No overflow$/;"	c
ArmCond.VS	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case VS;    \/\/ Overflow$/;"	c
ArmCond.VS	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case VS;    \/\/ Overflow$/;"	c
ArmCond.VS	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case VS;    \/\/ Overflow$/;"	c
ArmOffset	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^type ArmOffset {$/;"	c
ArmOffset.AddImm	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case AddImm(off: u12);$/;"	c
ArmOffset.AddImm	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case AddImm(off: u12);$/;"	c
ArmOffset.AddImm	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case AddImm(off: u12);$/;"	c
ArmOffset.AddReg	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case AddReg(rm: ArmReg);$/;"	c
ArmOffset.AddReg	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case AddReg(rm: ArmReg);$/;"	c
ArmOffset.AddReg	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case AddReg(rm: ArmReg);$/;"	c
ArmOffset.SubImm	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case SubImm(off: u12);$/;"	c
ArmOffset.SubImm	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case SubImm(off: u12);$/;"	c
ArmOffset.SubImm	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case SubImm(off: u12);$/;"	c
ArmOffset.SubReg	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case SubReg(rm: ArmReg);$/;"	c
ArmOffset.SubReg	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case SubReg(rm: ArmReg);$/;"	c
ArmOffset.SubReg	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case SubReg(rm: ArmReg);$/;"	c
ArmOperand	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^type ArmOperand {$/;"	c
ArmOperand.Imm8	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case Imm8(val: u8, rot: u4);$/;"	c
ArmOperand.Imm8	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case Imm8(val: u8, rot: u4);$/;"	c
ArmOperand.Imm8	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case Imm8(val: u8, rot: u4);$/;"	c
ArmOperand.Reg	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case Reg(rm: ArmReg);$/;"	c
ArmOperand.Reg	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case Reg(rm: ArmReg);$/;"	c
ArmOperand.Reg	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case Reg(rm: ArmReg);$/;"	c
ArmOperand.RegRorImm	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case RegRorImm(rm: ArmReg, shift: u5);$/;"	c
ArmOperand.RegRorImm	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case RegRorImm(rm: ArmReg, shift: u5);$/;"	c
ArmOperand.RegRorImm	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case RegRorImm(rm: ArmReg, shift: u5);$/;"	c
ArmOperand.RegRorReg	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case RegRorReg(rm: ArmReg, rs: ArmReg);$/;"	c
ArmOperand.RegRorReg	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case RegRorReg(rm: ArmReg, rs: ArmReg);$/;"	c
ArmOperand.RegRorReg	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case RegRorReg(rm: ArmReg, rs: ArmReg);$/;"	c
ArmOperand.RegSarImm	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case RegSarImm(rm: ArmReg, shift: u5);$/;"	c
ArmOperand.RegSarImm	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case RegSarImm(rm: ArmReg, shift: u5);$/;"	c
ArmOperand.RegSarImm	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case RegSarImm(rm: ArmReg, shift: u5);$/;"	c
ArmOperand.RegSarReg	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case RegSarReg(rm: ArmReg, rs: ArmReg);$/;"	c
ArmOperand.RegSarReg	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case RegSarReg(rm: ArmReg, rs: ArmReg);$/;"	c
ArmOperand.RegSarReg	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case RegSarReg(rm: ArmReg, rs: ArmReg);$/;"	c
ArmOperand.RegShlImm	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case RegShlImm(rm: ArmReg, shift: u5);$/;"	c
ArmOperand.RegShlImm	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case RegShlImm(rm: ArmReg, shift: u5);$/;"	c
ArmOperand.RegShlImm	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case RegShlImm(rm: ArmReg, shift: u5);$/;"	c
ArmOperand.RegShlReg	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case RegShlReg(rm: ArmReg, rs: ArmReg);$/;"	c
ArmOperand.RegShlReg	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case RegShlReg(rm: ArmReg, rs: ArmReg);$/;"	c
ArmOperand.RegShlReg	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case RegShlReg(rm: ArmReg, rs: ArmReg);$/;"	c
ArmOperand.RegShrImm	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case RegShrImm(rm: ArmReg, shift: u5);$/;"	c
ArmOperand.RegShrImm	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case RegShrImm(rm: ArmReg, shift: u5);$/;"	c
ArmOperand.RegShrImm	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case RegShrImm(rm: ArmReg, shift: u5);$/;"	c
ArmOperand.RegShrReg	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case RegShrReg(rm: ArmReg, rs: ArmReg);$/;"	c
ArmOperand.RegShrReg	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case RegShrReg(rm: ArmReg, rs: ArmReg);$/;"	c
ArmOperand.RegShrReg	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case RegShrReg(rm: ArmReg, rs: ArmReg);$/;"	c
ArmReg	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^type ArmReg {$/;"	c
ArmReg.R0	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case R0;  case R1;  case R2;  case R3;$/;"	c
ArmReg.R0	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case R0;  case R1;  case R2;  case R3;$/;"	c
ArmReg.R0	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case R0;  case R1;  case R2;  case R3;$/;"	c
ArmReg.R1	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case R0;  case R1;  case R2;  case R3;$/;"	c
ArmReg.R1	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case R0;  case R1;  case R2;  case R3;$/;"	c
ArmReg.R1	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case R0;  case R1;  case R2;  case R3;$/;"	c
ArmReg.R10	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case R8;  case R9;  case R10; case R11;$/;"	c
ArmReg.R10	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case R8;  case R9;  case R10; case R11;$/;"	c
ArmReg.R10	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case R8;  case R9;  case R10; case R11;$/;"	c
ArmReg.R11	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case R8;  case R9;  case R10; case R11;$/;"	c
ArmReg.R11	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case R8;  case R9;  case R10; case R11;$/;"	c
ArmReg.R11	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case R8;  case R9;  case R10; case R11;$/;"	c
ArmReg.R12	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case R12; case R13; case R14; case R15;$/;"	c
ArmReg.R12	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case R12; case R13; case R14; case R15;$/;"	c
ArmReg.R12	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case R12; case R13; case R14; case R15;$/;"	c
ArmReg.R13	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case R12; case R13; case R14; case R15;$/;"	c
ArmReg.R13	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case R12; case R13; case R14; case R15;$/;"	c
ArmReg.R13	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case R12; case R13; case R14; case R15;$/;"	c
ArmReg.R14	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case R12; case R13; case R14; case R15;$/;"	c
ArmReg.R14	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case R12; case R13; case R14; case R15;$/;"	c
ArmReg.R14	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case R12; case R13; case R14; case R15;$/;"	c
ArmReg.R15	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case R12; case R13; case R14; case R15;$/;"	c
ArmReg.R15	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case R12; case R13; case R14; case R15;$/;"	c
ArmReg.R15	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case R12; case R13; case R14; case R15;$/;"	c
ArmReg.R2	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case R0;  case R1;  case R2;  case R3;$/;"	c
ArmReg.R2	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case R0;  case R1;  case R2;  case R3;$/;"	c
ArmReg.R2	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case R0;  case R1;  case R2;  case R3;$/;"	c
ArmReg.R3	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case R0;  case R1;  case R2;  case R3;$/;"	c
ArmReg.R3	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case R0;  case R1;  case R2;  case R3;$/;"	c
ArmReg.R3	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case R0;  case R1;  case R2;  case R3;$/;"	c
ArmReg.R4	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case R4;  case R5;  case R6;  case R7;$/;"	c
ArmReg.R4	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case R4;  case R5;  case R6;  case R7;$/;"	c
ArmReg.R4	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case R4;  case R5;  case R6;  case R7;$/;"	c
ArmReg.R5	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case R4;  case R5;  case R6;  case R7;$/;"	c
ArmReg.R5	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case R4;  case R5;  case R6;  case R7;$/;"	c
ArmReg.R5	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case R4;  case R5;  case R6;  case R7;$/;"	c
ArmReg.R6	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case R4;  case R5;  case R6;  case R7;$/;"	c
ArmReg.R6	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case R4;  case R5;  case R6;  case R7;$/;"	c
ArmReg.R6	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case R4;  case R5;  case R6;  case R7;$/;"	c
ArmReg.R7	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case R4;  case R5;  case R6;  case R7;$/;"	c
ArmReg.R7	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case R4;  case R5;  case R6;  case R7;$/;"	c
ArmReg.R7	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case R4;  case R5;  case R6;  case R7;$/;"	c
ArmReg.R8	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case R8;  case R9;  case R10; case R11;$/;"	c
ArmReg.R8	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case R8;  case R9;  case R10; case R11;$/;"	c
ArmReg.R8	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case R8;  case R9;  case R10; case R11;$/;"	c
ArmReg.R9	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case R8;  case R9;  case R10; case R11;$/;"	c
ArmReg.R9	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case R8;  case R9;  case R10; case R11;$/;"	c
ArmReg.R9	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case R8;  case R9;  case R10; case R11;$/;"	c
ArmSmallOffset	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^type ArmSmallOffset {$/;"	c
ArmSmallOffset.AddImm	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case AddImm(off: u8);$/;"	c
ArmSmallOffset.AddImm	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case AddImm(off: u8);$/;"	c
ArmSmallOffset.AddImm	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case AddImm(off: u8);$/;"	c
ArmSmallOffset.AddReg	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case AddReg(rm: ArmReg);$/;"	c
ArmSmallOffset.AddReg	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case AddReg(rm: ArmReg);$/;"	c
ArmSmallOffset.AddReg	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case AddReg(rm: ArmReg);$/;"	c
ArmSmallOffset.SubImm	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case SubImm(off: u8);$/;"	c
ArmSmallOffset.SubImm	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case SubImm(off: u8);$/;"	c
ArmSmallOffset.SubImm	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case SubImm(off: u8);$/;"	c
ArmSmallOffset.SubReg	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case SubReg(rm: ArmReg);$/;"	c
ArmSmallOffset.SubReg	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case SubReg(rm: ArmReg);$/;"	c
ArmSmallOffset.SubReg	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case SubReg(rm: ArmReg);$/;"	c
ArrayStack	$VIRGIL_LOC/lib/util/Stack.v3	/^class ArrayStack<T> extends Stack<T> {$/;"	c
Arrays	$VIRGIL_LOC/lib/util/Arrays.v3	/^component Arrays {$/;"	n
AsmTraceBuilder	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^class AsmTraceBuilder extends StringBuilder {$/;"	c
Atom	$VIRGIL_LOC/lib/util/Sexpr.v3	/^    case Atom(data: string);$/;"	d
B0	$VIRGIL_LOC/lib/term/Termios.v3	/^	B0	(0x0),$/;"	d
B110	$VIRGIL_LOC/lib/term/Termios.v3	/^	B110	(0x3),$/;"	d
B1200	$VIRGIL_LOC/lib/term/Termios.v3	/^	B1200	(0x9),$/;"	d
B134	$VIRGIL_LOC/lib/term/Termios.v3	/^	B134	(0x4),$/;"	d
B150	$VIRGIL_LOC/lib/term/Termios.v3	/^	B150	(0x5),$/;"	d
B1800	$VIRGIL_LOC/lib/term/Termios.v3	/^	B1800	(0xA),$/;"	d
B19200	$VIRGIL_LOC/lib/term/Termios.v3	/^	B19200	(0xE),$/;"	d
B200	$VIRGIL_LOC/lib/term/Termios.v3	/^	B200	(0x6),$/;"	d
B2400	$VIRGIL_LOC/lib/term/Termios.v3	/^	B2400	(0xB),$/;"	d
B300	$VIRGIL_LOC/lib/term/Termios.v3	/^	B300	(0x7),$/;"	d
B38400	$VIRGIL_LOC/lib/term/Termios.v3	/^	B38400	(0xF),$/;"	d
B4800	$VIRGIL_LOC/lib/term/Termios.v3	/^	B4800	(0xC),$/;"	d
B50	$VIRGIL_LOC/lib/term/Termios.v3	/^	B50	(0x1),$/;"	d
B600	$VIRGIL_LOC/lib/term/Termios.v3	/^	B600	(0x8),$/;"	d
B75	$VIRGIL_LOC/lib/term/Termios.v3	/^	B75	(0x2),$/;"	d
B9600	$VIRGIL_LOC/lib/term/Termios.v3	/^	B9600	(0xD),$/;"	d
BIT20	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^def BIT20 = 1u << 20;$/;"	d
BIT22	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^def BIT22 = 1u << 22;$/;"	d
BIT23	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^def BIT23 = 1u << 23;$/;"	d
BIT25	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^def BIT25 = 1u << 25;$/;"	d
BRKINT	$VIRGIL_LOC/lib/term/Termios.v3	/^	BRKINT  (0x0002), \/\/ Break generates an interrupt signal$/;"	d
BasicOptions	$VIRGIL_LOC/lib/util/Option.v3	/^class BasicOptions extends Options {$/;"	c
BitMatrix	$VIRGIL_LOC/lib/util/BitMatrix.v3	/^class BitMatrix(var numrows: int, var numcols: int) {$/;"	c
BitMatrixRow	$VIRGIL_LOC/lib/util/BitMatrix.v3	/^type BitMatrixRow(matrix: BitMatrix, index: int) #unboxed {$/;"	c
Bool	$VIRGIL_LOC/lib/file/json/JsonParser.v3	/^	case Bool(v: bool);$/;"	d
BrokenPipe	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	BrokenPipe("Broken pipe"),$/;"	d
Bucket	$VIRGIL_LOC/lib/util/Map.v3	/^private class Bucket<K, V> {$/;"	c
CBAUD	$VIRGIL_LOC/lib/term/Termios.v3	/^	def CBAUD      = 0x100F;     \/\/ CBAUD Serial speed settings$/;"	d
CBAUDEX	$VIRGIL_LOC/lib/term/Termios.v3	/^	def CBAUDEX    = 0x1000;     \/\/ CBAUDX Serial speed settings$/;"	d
CC	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case CC;    \/\/ Carry clear\/unsigned lower$/;"	d
CC	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def CC  = Arm64Cond.new("cc", 0x3); def LO = CC;$/;"	d
CHK	$VIRGIL_LOC/lib/net/tcpip/Packets.v3	/^	SYN, ACK, FIN, RST, URG, PSH, WND, CHK, SEQ, ACK2$/;"	d
CLOCAL	$VIRGIL_LOC/lib/term/Termios.v3	/^	CLOCAL (0x800), \/\/ no modem control signals$/;"	d
CONNECT	$VIRGIL_LOC/lib/pdk/Method.v3	/^	CONNECT,$/;"	d
CREAD	$VIRGIL_LOC/lib/term/Termios.v3	/^	CREAD  (0x080), \/\/ enable input$/;"	d
CS	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case CS;    \/\/ Carry set\/unsigned higher or same$/;"	d
CS	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def CS  = Arm64Cond.new("cs", 0x2); def HS = CS;$/;"	d
CS5	$VIRGIL_LOC/lib/term/Termios.v3	/^	CS5    (0x000), \/\/ char size 5bits$/;"	d
CS6	$VIRGIL_LOC/lib/term/Termios.v3	/^	CS6    (0x010), \/\/ char size 6bits$/;"	d
CS7	$VIRGIL_LOC/lib/term/Termios.v3	/^	CS7    (0x020), \/\/ char size 7bits$/;"	d
CS8	$VIRGIL_LOC/lib/term/Termios.v3	/^	CS8    (0x030), \/\/ char size 8bits$/;"	d
CSIZE	$VIRGIL_LOC/lib/term/Termios.v3	/^	CSIZE  (0x030), \/\/ used as mask when setting character size$/;"	d
CSTOPB	$VIRGIL_LOC/lib/term/Termios.v3	/^	CSTOPB (0x040), \/\/ two stop bits$/;"	d
Chars	$VIRGIL_LOC/lib/util/Chars.v3	/^component Chars {$/;"	n
CiExEntry	$VIRGIL_LOC/lib/packing/CiRuntime.v3	/^type CiExEntry #unboxed {$/;"	c
CiExEntry.Full	$VIRGIL_LOC/lib/packing/CiRuntime.v3	/^	case Full(meth: u20, ex: u4, col: u8, line: u16)	#packing 0b_mmmmmmmm_mmmmmmmm_mmmmeeee_cccccccc_llllllll_llllllll; \/\/ TODO: meth != u20.max$/;"	c
CiExEntry.Full	$VIRGIL_LOC/lib/packing/CiRuntime.v3	/^	case Full(meth: u20, ex: u4, col: u8, line: u16)	#packing 0b_mmmmmmmm_mmmmmmmm_mmmmeeee_cccccccc_llllllll_llllllll; \/\/ TODO: meth != u20.max$/;"	c
CiExEntry.Repeated	$VIRGIL_LOC/lib/packing/CiRuntime.v3	/^	case Repeated(ex: u4, count: u4, framewords: u20)	#packing 0b_11111111_11111111_1111eeee_ccccffff_ffffffff_ffffffff;$/;"	c
CiExEntry.Repeated	$VIRGIL_LOC/lib/packing/CiRuntime.v3	/^	case Repeated(ex: u4, count: u4, framewords: u20)	#packing 0b_11111111_11111111_1111eeee_ccccffff_ffffffff_ffffffff;$/;"	c
CiFrameEntry	$VIRGIL_LOC/lib/packing/CiRuntime.v3	/^type CiFrameEntry(type_name: u32, file_name: u32) #unboxed$/;"	c
CiMethodEntry	$VIRGIL_LOC/lib/packing/CiRuntime.v3	/^type CiMethodEntry(meth_name: u24, type_name: u16, framewords: u12, offset: u12) #unboxed$/;"	c
CiSourceEntry	$VIRGIL_LOC/lib/packing/CiRuntime.v3	/^type CiSourceEntry #unboxed {$/;"	c
CiSourceEntry.Ex	$VIRGIL_LOC/lib/packing/CiRuntime.v3	/^	case Ex(extended: u18)			#packing 0b_10ee_eeeeeeee_eeeeeeee;$/;"	c
CiSourceEntry.Ex	$VIRGIL_LOC/lib/packing/CiRuntime.v3	/^	case Ex(extended: u18)			#packing 0b_10ee_eeeeeeee_eeeeeeee;$/;"	c
CiSourceEntry.LineCol	$VIRGIL_LOC/lib/packing/CiRuntime.v3	/^	case LineCol(line: u11, col: u8) 	#packing 0b_0lll_llllllll_cccccccc;$/;"	c
CiSourceEntry.LineCol	$VIRGIL_LOC/lib/packing/CiRuntime.v3	/^	case LineCol(line: u11, col: u8) 	#packing 0b_0lll_llllllll_cccccccc;$/;"	c
CiSourceEntry.Words	$VIRGIL_LOC/lib/packing/CiRuntime.v3	/^	case Words(framewords: u18)		#packing 0b_11ff_ffffffff_ffffffff;$/;"	c
CiSourceEntry.Words	$VIRGIL_LOC/lib/packing/CiRuntime.v3	/^	case Words(framewords: u18)		#packing 0b_11ff_ffffffff_ffffffff;$/;"	c
ClientSocket	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^class ClientSocket extends Socket {$/;"	c
Config	$VIRGIL_LOC/lib/pdk/Config.v3	/^component Config {$/;"	n
ConnectionAborted	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	ConnectionAborted("Connection aborted"),$/;"	d
ConnectionRefused	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	ConnectionRefused("Connection refused"),$/;"	d
ConnectionReset	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	ConnectionReset("Connection reset"),$/;"	d
CsvData	$VIRGIL_LOC/lib/file/csv/CsvParser.v3	/^class CsvData {$/;"	c
CsvParser	$VIRGIL_LOC/lib/file/csv/CsvParser.v3	/^class CsvParser(fileName: string, data: Array<byte>) {$/;"	c
DELETE	$VIRGIL_LOC/lib/pdk/Method.v3	/^	DELETE,$/;"	d
DataReader	$VIRGIL_LOC/lib/util/DataReader.v3	/^class DataReader {$/;"	c
DataReaders	$VIRGIL_LOC/lib/util/DataReader.v3	/^component DataReaders {$/;"	n
DataRegExtend	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^enum DataRegExtend { UXTB, UXTH, UXTW, UXTX, SXTB, SXTH, SXTW, SXTX }$/;"	e
DataWidth	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^enum DataWidth { W32, W64 }$/;"	e
DataWriter	$VIRGIL_LOC/lib/util/DataWriter.v3	/^class DataWriter {$/;"	c
DataWriters	$VIRGIL_LOC/lib/util/DataWriter.v3	/^component DataWriters {$/;"	n
EAX	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def EAX = X86Reg.new("al", "ax", "eax", 0);$/;"	d
EBP	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def EBP = X86Reg.new(null, "bp", "ebp", 5);$/;"	d
EBX	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def EBX = X86Reg.new("bl", "bx", "ebx", 3);$/;"	d
ECHO	$VIRGIL_LOC/lib/term/Termios.v3	/^	ECHO    (0x0008), \/\/ echo input characters$/;"	d
ECHOCTL	$VIRGIL_LOC/lib/term/Termios.v3	/^	ECHOCTL (0x0200), \/\/ will echo control characters as ^c$/;"	d
ECHOE	$VIRGIL_LOC/lib/term/Termios.v3	/^	ECHOE   (0x0010), \/\/ erase => BS - SPACE - BS$/;"	d
ECHOK	$VIRGIL_LOC/lib/term/Termios.v3	/^	ECHOK   (0x0020), \/\/ add newline after kill char$/;"	d
ECHOKE	$VIRGIL_LOC/lib/term/Termios.v3	/^	ECHOKE  (0x0800), \/\/ kill all line considering ECHOPRT and ECHOE flags$/;"	d
ECHONL	$VIRGIL_LOC/lib/term/Termios.v3	/^	ECHONL  (0x0040), \/\/ echo NL even without other characters$/;"	d
ECHOPRT	$VIRGIL_LOC/lib/term/Termios.v3	/^	ECHOPRT (0x0400), \/\/ will print erased characters between \ \/$/;"	d
ECX	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def ECX = X86Reg.new("cl", "cx", "ecx", 1);$/;"	d
EDI	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def EDI = X86Reg.new(null, "di", "edi", 7);$/;"	d
EDX	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def EDX = X86Reg.new("dl", "dx", "edx", 2);$/;"	d
EI_MAGIC	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^	EI_MAGIC(0x464c457Fu)$/;"	d
ELFCLASS32	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^	ELFCLASS32(1),$/;"	d
ELFCLASS64	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^	ELFCLASS64(2)$/;"	d
ELFDATA2LSB	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^	ELFDATA2LSB(1),$/;"	d
ELFDATA2MSB	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^	ELFDATA2MSB(2)$/;"	d
EMPTY	$VIRGIL_LOC/lib/util/Ints.v3	/^	EMPTY(-4)$/;"	d
EMPTY	$VIRGIL_LOC/lib/util/NumberParser.v3	/^def EMPTY = "";$/;"	d
EMPTY_BYTES	$VIRGIL_LOC/lib/util/DataReader.v3	/^def EMPTY_BYTES: Array<byte> = []; \/\/ used instead of null$/;"	d
EM_386	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^	EM_386(3),$/;"	d
EM_AARCH64	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^	EM_AARCH64(183),$/;"	d
EM_ARM	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^	EM_ARM(40),$/;"	d
EM_MIPS	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^	EM_MIPS(8),$/;"	d
EM_NONE	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^	EM_NONE(0),$/;"	d
EM_PPC	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^	EM_PPC(20),$/;"	d
EM_PPC64	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^	EM_PPC64(21),$/;"	d
EM_RISCV	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^	EM_RISCV(243)$/;"	d
EM_X86_64	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^	EM_X86_64(62),$/;"	d
EQ	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case EQ;    \/\/ Equal$/;"	d
EQ	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def EQ  = Arm64Cond.new("eq", 0x0);$/;"	d
EQ	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def EQ = SSECmp.new("eq", 0);$/;"	d
ERROR	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^def ERROR = "X86_64AssemblerError";$/;"	d
ERR_RET	$VIRGIL_LOC/lib/file/json/JsonParser.v3	/^def ERR_RET = JsonValue.Null;$/;"	d
ESC	$VIRGIL_LOC/lib/term/Vt100.v3	/^def ESC = '\x1b';$/;"	d
ESCAPE_PREFIX	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^def ESCAPE_PREFIX = 0x0F;$/;"	d
ESI	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def ESI = X86Reg.new(null, "si", "esi", 6);$/;"	d
ESP	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def ESP = X86Reg.new(null, "sp", "esp", 4);$/;"	d
ET_CORE	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^	ET_CORE(4)$/;"	d
ET_DYN	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^	ET_DYN(3),$/;"	d
ET_EXEC	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^	ET_EXEC(2),$/;"	d
ET_REL	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^	ET_REL(1),$/;"	d
Edge	$VIRGIL_LOC/lib/util/Edge.v3	/^class Edge<T> {$/;"	c
Elf32le_Header	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^layout Elf32le_Header {$/;"	l
Elf32le_ProgramHeader	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^layout Elf32le_ProgramHeader {$/;"	l
Elf32le_Rel	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^layout Elf32le_Rel {$/;"	l
Elf32le_Rela	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^layout Elf32le_Rela {$/;"	l
Elf32le_SectionHeader	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^layout Elf32le_SectionHeader {$/;"	l
Elf32le_Symbol	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^layout Elf32le_Symbol {$/;"	l
Elf64le_Header	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^layout Elf64le_Header {$/;"	l
Elf64le_ProgramHeader	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^layout Elf64le_ProgramHeader {$/;"	l
Elf64le_Rel	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^layout Elf64le_Rel {$/;"	l
Elf64le_Rela	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^layout Elf64le_Rela {$/;"	l
Elf64le_SectionHeader	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^layout Elf64le_SectionHeader  {$/;"	l
Elf64le_Symbol	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^layout Elf64le_Symbol {$/;"	l
ElfClass	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^enum ElfClass(code: byte) {$/;"	e
ElfData	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^enum ElfData(code: byte) {$/;"	e
ElfMachine	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^enum ElfMachine(code: byte) {$/;"	e
ElfMagic	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^enum ElfMagic(code: u32) {$/;"	e
ElfPhType	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^enum ElfPhType(code: u32) {$/;"	e
ElfShType	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^enum ElfShType(code: u32) {$/;"	e
ElfType	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^enum ElfType(code: u16) {$/;"	e
EmptySExpr	$VIRGIL_LOC/lib/util/Sexpr.v3	/^    case EmptySExpr;$/;"	d
Error	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	case Error(e: NetError);$/;"	d
Ex	$VIRGIL_LOC/lib/packing/CiRuntime.v3	/^	case Ex(extended: u18)			#packing 0b_10ee_eeeeeeee_eeeeeeee;$/;"	d
Expected	$VIRGIL_LOC/lib/util/Sexpr.v3	/^    case Expected(str: string);$/;"	d
Extism	$VIRGIL_LOC/lib/pdk/Extism.v3	/^import "extism:host\/env" component Extism {$/;"	n
F0	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	 F0,  F1,  F2,  F3,$/;"	d
F1	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	 F0,  F1,  F2,  F3,$/;"	d
F10	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	 F8,  F9, F10, F11,$/;"	d
F11	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	 F8,  F9, F10, F11,$/;"	d
F12	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	F12, F13, F14, F15,$/;"	d
F13	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	F12, F13, F14, F15,$/;"	d
F14	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	F12, F13, F14, F15,$/;"	d
F15	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	F12, F13, F14, F15,$/;"	d
F16	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	F16, F17, F18, F19,$/;"	d
F17	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	F16, F17, F18, F19,$/;"	d
F18	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	F16, F17, F18, F19,$/;"	d
F19	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	F16, F17, F18, F19,$/;"	d
F2	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	 F0,  F1,  F2,  F3,$/;"	d
F20	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	F20, F21, F22, F23,$/;"	d
F21	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	F20, F21, F22, F23,$/;"	d
F22	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	F20, F21, F22, F23,$/;"	d
F23	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	F20, F21, F22, F23,$/;"	d
F24	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	F24, F25, F26, F27,$/;"	d
F25	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	F24, F25, F26, F27,$/;"	d
F26	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	F24, F25, F26, F27,$/;"	d
F27	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	F24, F25, F26, F27,$/;"	d
F28	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	F28, F29, F30, F31$/;"	d
F29	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	F28, F29, F30, F31$/;"	d
F3	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	 F0,  F1,  F2,  F3,$/;"	d
F30	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	F28, F29, F30, F31$/;"	d
F31	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	F28, F29, F30, F31$/;"	d
F4	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	 F4,  F5,  F6,  F7,$/;"	d
F5	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	 F4,  F5,  F6,  F7,$/;"	d
F6	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	 F4,  F5,  F6,  F7,$/;"	d
F7	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	 F4,  F5,  F6,  F7,$/;"	d
F8	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	 F8,  F9, F10, F11,$/;"	d
F9	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	 F8,  F9, F10, F11,$/;"	d
FIN	$VIRGIL_LOC/lib/net/tcpip/Packets.v3	/^	SYN, ACK, FIN, RST, URG, PSH, WND, CHK, SEQ, ACK2$/;"	d
FLOAT32_FRACTION_WIDTH	$VIRGIL_LOC/lib/util/NumberParser.v3	/^def FLOAT32_FRACTION_WIDTH = 23;$/;"	d
FLOAT32_INF	$VIRGIL_LOC/lib/util/NumberParser.v3	/^def FLOAT32_INF = NumberParserValue.Float(0, 0xFF, 0);$/;"	d
FLOAT32_MINUS_INF	$VIRGIL_LOC/lib/util/NumberParser.v3	/^def FLOAT32_MINUS_INF = NumberParserValue.Float(1, 0xFF, 0);$/;"	d
FLOAT64_FRACTION_WIDTH	$VIRGIL_LOC/lib/util/NumberParser.v3	/^def FLOAT64_FRACTION_WIDTH = 52;$/;"	d
FLOAT64_INF	$VIRGIL_LOC/lib/util/NumberParser.v3	/^def FLOAT64_INF = NumberParserValue.Float(0, 0x7FF, 0);$/;"	d
FLOAT64_MINUS_INF	$VIRGIL_LOC/lib/util/NumberParser.v3	/^def FLOAT64_MINUS_INF = NumberParserValue.Float(1, 0x7FF, 0);$/;"	d
FLOAT_BIAS	$VIRGIL_LOC/lib/util/Floats.v3	/^	private def FLOAT_BIAS: byte = 127;$/;"	d
FLOAT_EXP_WIDTH	$VIRGIL_LOC/lib/util/Floats.v3	/^	private def FLOAT_EXP_WIDTH: byte = 8;$/;"	d
FLOAT_MANTISSA_BITS	$VIRGIL_LOC/lib/util/Floats.v3	/^	private def FLOAT_MANTISSA_BITS: byte = 23;$/;"	d
FLOAT_MINUS_ZERO	$VIRGIL_LOC/lib/util/NumberParser.v3	/^def FLOAT_MINUS_ZERO = NumberParserValue.Float(1, 0, 0);$/;"	d
FLOAT_SIGN_WIDTH	$VIRGIL_LOC/lib/util/Floats.v3	/^	private def FLOAT_SIGN_WIDTH: byte = 1;$/;"	d
FLOAT_ZERO	$VIRGIL_LOC/lib/util/NumberParser.v3	/^def FLOAT_ZERO = NumberParserValue.Float(0, 0, 0);$/;"	d
FP	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	def FP = RiscV64Gpr.X8;$/;"	d
FS_OVERRIDE	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	REP, REX, REX_B, REX_X, REX_R, REX_W, LOCK, FS_OVERRIDE,$/;"	d
FilePoint	$VIRGIL_LOC/lib/util/Token.v3	/^class FilePoint(fileName: string, beginLine: int, beginColumn: int) {$/;"	c
FileRange	$VIRGIL_LOC/lib/util/Token.v3	/^class FileRange extends FilePoint  {$/;"	c
Float	$VIRGIL_LOC/lib/util/NumberParser.v3	/^	case Float(sign: int, exp: int, mantissa: u64);$/;"	d
Float16	$VIRGIL_LOC/lib/packing/IEEE754.v3	/^packing Float16(sign: 1, exponent:  5, fraction: 10): 16 = 0b_seeeeeff_ffffffff;$/;"	p
Float32	$VIRGIL_LOC/lib/packing/IEEE754.v3	/^packing Float32(sign: 1, exponent:  8, fraction: 23): 32 = 0b_seeeeeee_efffffff_ffffffff_ffffffff;$/;"	p
Float32	$VIRGIL_LOC/lib/util/NumberParser.v3	/^	case Float32;$/;"	d
Float64	$VIRGIL_LOC/lib/packing/IEEE754.v3	/^packing Float64(sign: 1, exponent: 11, fraction: 52): 64 = 0b_seeeeeee_eeeeffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff;$/;"	p
Float64	$VIRGIL_LOC/lib/util/NumberParser.v3	/^	case Float64;$/;"	d
Floats	$VIRGIL_LOC/lib/util/Floats.v3	/^component Floats {$/;"	n
FpSketch	$VIRGIL_LOC/lib/util/FpSketch.v3	/^class FpSketch {$/;"	c
Full	$VIRGIL_LOC/lib/packing/CiRuntime.v3	/^	case Full(meth: u20, ex: u4, col: u8, line: u16)	#packing 0b_mmmmmmmm_mmmmmmmm_mmmmeeee_cccccccc_llllllll_llllllll; \/\/ TODO: meth != u20.max$/;"	d
Functions	$VIRGIL_LOC/lib/util/Functions.v3	/^component Functions {$/;"	n
GE	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case GE;    \/\/ Signed greater than or equal$/;"	d
GE	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def GE  = Arm64Cond.new("ge", 0xA);$/;"	d
GE	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def GE = X86_64Cond.new("ge", 13);$/;"	d
GE	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def GE = X86Cond.new("ge", 13);$/;"	d
GET	$VIRGIL_LOC/lib/pdk/Method.v3	/^	GET,$/;"	d
GP	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	def GP = RiscV64Gpr.X3;$/;"	d
GPRS	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def GPRS = [$/;"	d
GPRs	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def GPRs = [$/;"	d
GROUP1_2	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	OPERAND_SIZE_OVERRIDE, ADDRESS_SIZE_OVERRIDE, GROUP1_2$/;"	d
GT	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case GT;    \/\/ Signed greater than$/;"	d
GT	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def GT  = Arm64Cond.new("gt", 0xC);$/;"	d
GlobMatcher	$VIRGIL_LOC/lib/util/GlobMatcher.v3	/^class GlobMatcher(pattern: string) {$/;"	c
HEAD	$VIRGIL_LOC/lib/pdk/Method.v3	/^	HEAD,$/;"	d
HI	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case HI;    \/\/ Unsigned higher$/;"	d
HI	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def HI  = Arm64Cond.new("hi", 0x8);$/;"	d
HS	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def CS  = Arm64Cond.new("cs", 0x2); def HS = CS;$/;"	d
HUPCL	$VIRGIL_LOC/lib/term/Termios.v3	/^	HUPCL  (0x400), \/\/ send HUP when last process closes term$/;"	d
HashMap	$VIRGIL_LOC/lib/util/Map.v3	/^class HashMap<K, V> extends PartialMap<K, V> {$/;"	c
Header	$VIRGIL_LOC/lib/pdk/Header.v3	/^class Header {$/;"	c
Host	$VIRGIL_LOC/lib/pdk/Host.v3	/^component Host {$/;"	n
HostUnreachable	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	HostUnreachable("Host unreachable"),$/;"	d
Http	$VIRGIL_LOC/lib/pdk/Http.v3	/^component Http {$/;"	n
I32_TYPE	$VIRGIL_LOC/lib/util/NumberParser.v3	/^def I32_TYPE = NumberParserVType.Int(true, 32);$/;"	d
I64_TYPE	$VIRGIL_LOC/lib/util/NumberParser.v3	/^def I64_TYPE = NumberParserVType.Int(true, 64);$/;"	d
ICANON	$VIRGIL_LOC/lib/term/Termios.v3	/^	ICANON  (0x0002), \/\/ enable erase, kill, werase and rprnt chars$/;"	d
ICRNL	$VIRGIL_LOC/lib/term/Termios.v3	/^	ICRNL   (0x0100), \/\/ Translate CR => NL$/;"	d
IEXTEN	$VIRGIL_LOC/lib/term/Termios.v3	/^	IEXTEN  (0x8000), \/\/ enable non POSIX special characters$/;"	d
IGNBRK	$VIRGIL_LOC/lib/term/Termios.v3	/^	IGNBRK  (0x0001), \/\/ ignore break characters$/;"	d
IGNCR	$VIRGIL_LOC/lib/term/Termios.v3	/^	IGNCR   (0x0080), \/\/ Ignore Carriage Return$/;"	d
IGNPAR	$VIRGIL_LOC/lib/term/Termios.v3	/^	IGNPAR  (0x0004), \/\/ Ignore characters with parity errors$/;"	d
IMAXBEL	$VIRGIL_LOC/lib/term/Termios.v3	/^	IMAXBEL (0x2000), \/\/ Sound the bell and skip flushing input buffer$/;"	d
INLCR	$VIRGIL_LOC/lib/term/Termios.v3	/^	INLCR   (0x0040), \/\/ Translate LF => CR$/;"	d
INPCK	$VIRGIL_LOC/lib/term/Termios.v3	/^	INPCK   (0x0010), \/\/ enable parity checking$/;"	d
INT_MAX_WIDTH	$VIRGIL_LOC/lib/util/NumberParser.v3	/^def INT_MAX_WIDTH = 64;$/;"	d
ISIG	$VIRGIL_LOC/lib/term/Termios.v3	/^	ISIG    (0x0001), \/\/ enable Interrupt,quit and suspend chars$/;"	d
ISTRIP	$VIRGIL_LOC/lib/term/Termios.v3	/^	ISTRIP  (0x0020), \/\/ Clear 8th bit of input characters$/;"	d
IUCLC	$VIRGIL_LOC/lib/term/Termios.v3	/^	IUCLC   (0x0200), \/\/ Translate uppercase to lowercase$/;"	d
IUTF8	$VIRGIL_LOC/lib/term/Termios.v3	/^	IUTF8   (0x4000), \/\/ assume input being utf-8$/;"	d
IXANY	$VIRGIL_LOC/lib/term/Termios.v3	/^	IXANY   (0x0800), \/\/ let any char restart input$/;"	d
IXOFF	$VIRGIL_LOC/lib/term/Termios.v3	/^	IXOFF   (0x1000), \/\/ start sending start\/stop chars$/;"	d
IXON	$VIRGIL_LOC/lib/term/Termios.v3	/^	IXON    (0x0400), \/\/ Enable flow control$/;"	d
Imm8	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case Imm8(val: u8, rot: u4);$/;"	d
InetAddress	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^type InetAddress {$/;"	c
InetAddress.Ipv4	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	case Ipv4(oct0: u8, oct1: u8, oct2: u8, oct3: u8);$/;"	c
InetAddress.Ipv4	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	case Ipv4(oct0: u8, oct1: u8, oct2: u8, oct3: u8);$/;"	c
InetAddress.Ipv4	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	case Ipv4(oct0: u8, oct1: u8, oct2: u8, oct3: u8);$/;"	c
InetAddress.Ipv6	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	case Ipv6(word0: u32, word1: u32, word2: u32, word3: u32);$/;"	c
InetAddress.Ipv6	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	case Ipv6(word0: u32, word1: u32, word2: u32, word3: u32);$/;"	c
InetAddress.Ipv6	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	case Ipv6(word0: u32, word1: u32, word2: u32, word3: u32);$/;"	c
Int	$VIRGIL_LOC/lib/file/json/JsonParser.v3	/^	case Int(v: int);$/;"	d
Int	$VIRGIL_LOC/lib/util/NumberParser.v3	/^	case Int(v: u64);$/;"	d
IntParseResult	$VIRGIL_LOC/lib/util/Ints.v3	/^enum IntParseResult(code: int) {$/;"	e
Interrupted	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	Interrupted("Operation interrupted"),$/;"	d
Ints	$VIRGIL_LOC/lib/util/Ints.v3	/^component Ints {$/;"	n
InvalidInput	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	InvalidInput("Invalid input parameter"),$/;"	d
InvalidProtocol	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	InvalidProtocol("Using incorrect protocol"),$/;"	d
InvalidRange	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	InvalidRange("Invalid range provided"),$/;"	d
InvalidSockAddress	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	InvalidSockAddress("Invalid sockaddr size"),$/;"	d
IpV4FlagsFragmentOffset	$VIRGIL_LOC/lib/net/tcpip/Packets.v3	/^type IpV4FlagsFragmentOffset(flags: u4, offset: u12) #packing 0b_oooooooo_ooooffff;$/;"	c
IpV4Header	$VIRGIL_LOC/lib/net/tcpip/Packets.v3	/^layout IpV4Header #big-endian {$/;"	l
IpV4HeaderVersion	$VIRGIL_LOC/lib/net/tcpip/Packets.v3	/^type IpV4HeaderVersion(version: u4, length: u4) #packing 0b_llllvvvv;$/;"	c
Ipv4	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	case Ipv4(oct0: u8, oct1: u8, oct2: u8, oct3: u8);$/;"	d
Ipv6	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	case Ipv6(word0: u32, word1: u32, word2: u32, word3: u32);$/;"	d
JArray	$VIRGIL_LOC/lib/file/json/JsonParser.v3	/^	case JArray(v: Array<JsonValue>);$/;"	d
JObject	$VIRGIL_LOC/lib/file/json/JsonParser.v3	/^	case JObject(v: HashMap<string, JsonValue>);$/;"	d
JsonBuilder	$VIRGIL_LOC/lib/file/json/JsonParser.v3	/^class JsonBuilder {$/;"	c
JsonParser	$VIRGIL_LOC/lib/file/json/JsonParser.v3	/^class JsonParser extends TextReader {$/;"	c
JsonValue	$VIRGIL_LOC/lib/file/json/JsonParser.v3	/^type JsonValue {$/;"	c
JsonValue.Bool	$VIRGIL_LOC/lib/file/json/JsonParser.v3	/^	case Bool(v: bool);$/;"	c
JsonValue.Bool	$VIRGIL_LOC/lib/file/json/JsonParser.v3	/^	case Bool(v: bool);$/;"	c
JsonValue.Bool	$VIRGIL_LOC/lib/file/json/JsonParser.v3	/^	case Bool(v: bool);$/;"	c
JsonValue.Int	$VIRGIL_LOC/lib/file/json/JsonParser.v3	/^	case Int(v: int);$/;"	c
JsonValue.Int	$VIRGIL_LOC/lib/file/json/JsonParser.v3	/^	case Int(v: int);$/;"	c
JsonValue.Int	$VIRGIL_LOC/lib/file/json/JsonParser.v3	/^	case Int(v: int);$/;"	c
JsonValue.JArray	$VIRGIL_LOC/lib/file/json/JsonParser.v3	/^	case JArray(v: Array<JsonValue>);$/;"	c
JsonValue.JArray	$VIRGIL_LOC/lib/file/json/JsonParser.v3	/^	case JArray(v: Array<JsonValue>);$/;"	c
JsonValue.JArray	$VIRGIL_LOC/lib/file/json/JsonParser.v3	/^	case JArray(v: Array<JsonValue>);$/;"	c
JsonValue.JObject	$VIRGIL_LOC/lib/file/json/JsonParser.v3	/^	case JObject(v: HashMap<string, JsonValue>);$/;"	c
JsonValue.JObject	$VIRGIL_LOC/lib/file/json/JsonParser.v3	/^	case JObject(v: HashMap<string, JsonValue>);$/;"	c
JsonValue.JObject	$VIRGIL_LOC/lib/file/json/JsonParser.v3	/^	case JObject(v: HashMap<string, JsonValue>);$/;"	c
JsonValue.Null	$VIRGIL_LOC/lib/file/json/JsonParser.v3	/^	case Null;$/;"	c
JsonValue.Null	$VIRGIL_LOC/lib/file/json/JsonParser.v3	/^	case Null;$/;"	c
JsonValue.Null	$VIRGIL_LOC/lib/file/json/JsonParser.v3	/^	case Null;$/;"	c
JsonValue.String	$VIRGIL_LOC/lib/file/json/JsonParser.v3	/^	case String(v: string);$/;"	c
JsonValue.String	$VIRGIL_LOC/lib/file/json/JsonParser.v3	/^	case String(v: string);$/;"	c
JsonValue.String	$VIRGIL_LOC/lib/file/json/JsonParser.v3	/^	case String(v: string);$/;"	c
Jsons	$VIRGIL_LOC/lib/file/json/JsonParser.v3	/^component Jsons {$/;"	n
LE	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case LE;    \/\/ Signed less than or equal$/;"	d
LE	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def LE  = Arm64Cond.new("le", 0xD);$/;"	d
LE	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def LE = X86_64Cond.new("le", 14);$/;"	d
LE	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def LE = X86Cond.new("le", 14);$/;"	d
LO	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def CC  = Arm64Cond.new("cc", 0x3); def LO = CC;$/;"	d
LOCALHOST_V4	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	def LOCALHOST_V4 = InetAddress.Ipv4(127, 0, 0, 1);$/;"	d
LOCALHOST_V6	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	def LOCALHOST_V6 = InetAddress.Ipv6(0, 0, 0, 1);$/;"	d
LOCK	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	REP, REX, REX_B, REX_X, REX_R, REX_W, LOCK, FS_OVERRIDE,$/;"	d
LOCK_PREFIX	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^def LOCK_PREFIX = 0xF0;$/;"	d
LS	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case LS;    \/\/ Unsigned lower or same$/;"	d
LS	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def LS  = Arm64Cond.new("ls", 0x9);$/;"	d
LSL	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^enum RegShift { LSL, LSR, ASR, NONE } \/\/ NONE shift is reserved for instructions like mul, div$/;"	d
LSR	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^enum RegShift { LSL, LSR, ASR, NONE } \/\/ NONE shift is reserved for instructions like mul, div$/;"	d
LT	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case LT;    \/\/ Signed less than$/;"	d
LT	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def LT  = Arm64Cond.new("lt", 0xB);$/;"	d
LT	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def LT = SSECmp.new("lt", 1);$/;"	d
Layout_double	$VIRGIL_LOC/lib/util/Layouts.v3	/^layout Layout_double {$/;"	l
Layout_float	$VIRGIL_LOC/lib/util/Layouts.v3	/^layout Layout_float {$/;"	l
Layout_i16	$VIRGIL_LOC/lib/util/Layouts.v3	/^layout Layout_i16 {$/;"	l
Layout_i32	$VIRGIL_LOC/lib/util/Layouts.v3	/^layout Layout_i32 {$/;"	l
Layout_i64	$VIRGIL_LOC/lib/util/Layouts.v3	/^layout Layout_i64 {$/;"	l
Layout_i8	$VIRGIL_LOC/lib/util/Layouts.v3	/^layout Layout_i8 {$/;"	l
Layout_u128	$VIRGIL_LOC/lib/util/Layouts.v3	/^layout Layout_u128 {$/;"	l
Layout_u16	$VIRGIL_LOC/lib/util/Layouts.v3	/^layout Layout_u16 {$/;"	l
Layout_u32	$VIRGIL_LOC/lib/util/Layouts.v3	/^layout Layout_u32 {$/;"	l
Layout_u64	$VIRGIL_LOC/lib/util/Layouts.v3	/^layout Layout_u64 {$/;"	l
Layout_u8	$VIRGIL_LOC/lib/util/Layouts.v3	/^layout Layout_u8 {$/;"	l
LazyMap	$VIRGIL_LOC/lib/util/Map.v3	/^class LazyMap<K, V> extends PartialMap<K, V> {$/;"	c
Lg1	$VIRGIL_LOC/lib/math/Math.v3	/^def Lg1 = 6.666666666666735130e-1;		\/* 3FE55555 55555593 *\/$/;"	d
Lg2	$VIRGIL_LOC/lib/math/Math.v3	/^def Lg2 = 3.999999999940941908e-1;		\/* 3FD99999 9997FA04 *\/$/;"	d
Lg3	$VIRGIL_LOC/lib/math/Math.v3	/^def Lg3 = 2.857142874366239149e-1;		\/* 3FD24924 94229359 *\/$/;"	d
Lg4	$VIRGIL_LOC/lib/math/Math.v3	/^def Lg4 = 2.222219843214978396e-1;		\/* 3FCC71C5 1D8E78AF *\/$/;"	d
Lg5	$VIRGIL_LOC/lib/math/Math.v3	/^def Lg5 = 1.818357216161805012e-1;		\/* 3FC74664 96CB03DE *\/$/;"	d
Lg6	$VIRGIL_LOC/lib/math/Math.v3	/^def Lg6 = 1.531383769920937332e-1;		\/* 3FC39A09 D078C69F *\/$/;"	d
Lg7	$VIRGIL_LOC/lib/math/Math.v3	/^def Lg7 = 1.479819860511658591e-1;		\/* 3FC2F112 DF3E5244 *\/$/;"	d
LineCol	$VIRGIL_LOC/lib/packing/CiRuntime.v3	/^	case LineCol(line: u11, col: u8) 	#packing 0b_0lll_llllllll_cccccccc;$/;"	d
List	$VIRGIL_LOC/lib/util/List.v3	/^class List<T>(head: T, tail: List<T>) { }$/;"	c
List	$VIRGIL_LOC/lib/util/Sexpr.v3	/^    case List(elems: List<SExpr>); \/\/ usually Cons$/;"	d
ListStack	$VIRGIL_LOC/lib/util/Stack.v3	/^class ListStack<T> extends Stack<T> {$/;"	c
Lists	$VIRGIL_LOC/lib/util/List.v3	/^component Lists {$/;"	n
Longs	$VIRGIL_LOC/lib/util/Longs.v3	/^component Longs {$/;"	n
MI	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case MI;    \/\/ Minus\/negative$/;"	d
MI	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def MI  = Arm64Cond.new("mi", 0x4);$/;"	d
MOD_BITS	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^def MOD_BITS: byte	= 0b11000000;$/;"	d
MOD_BITS	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^def MOD_BITS = 0b11000000;$/;"	d
MOD_DISP0	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^def MOD_DISP0: byte	= 0b00000000;$/;"	d
MOD_DISP0	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^def MOD_DISP0  = 0b00000000;$/;"	d
MOD_DISP32	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^def MOD_DISP32: byte	= 0b10000000;$/;"	d
MOD_DISP32	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^def MOD_DISP32 = 0b10000000;$/;"	d
MOD_DISP8	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^def MOD_DISP8: byte	= 0b01000000;$/;"	d
MOD_DISP8	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^def MOD_DISP8  = 0b01000000;$/;"	d
MOD_REG	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^def MOD_REG: byte	= 0b11000000;$/;"	d
MOD_REG	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^def MOD_REG  = 0b11000000;$/;"	d
Map	$VIRGIL_LOC/lib/util/Map.v3	/^class Map<K, V> {$/;"	c
MapCollector	$VIRGIL_LOC/lib/file/json/JsonParser.v3	/^class MapCollector<K, V> {$/;"	c
MapKeyListGatherer	$VIRGIL_LOC/lib/util/Map.v3	/^private class MapKeyListGatherer<K, V> {$/;"	c
MapValueListGatherer	$VIRGIL_LOC/lib/util/Map.v3	/^private class MapValueListGatherer<K, V> {$/;"	c
Maps	$VIRGIL_LOC/lib/util/Map.v3	/^component Maps {$/;"	n
Math	$VIRGIL_LOC/lib/math/Math.v3	/^component Math {$/;"	n
Maybe	$VIRGIL_LOC/lib/pdk/Config.v3	/^type Maybe<T> {$/;"	c
Maybe.None	$VIRGIL_LOC/lib/pdk/Config.v3	/^	case None;$/;"	c
Maybe.None	$VIRGIL_LOC/lib/pdk/Config.v3	/^	case None;$/;"	c
Maybe.Some	$VIRGIL_LOC/lib/pdk/Config.v3	/^	case Some(t: T);$/;"	c
Maybe.Some	$VIRGIL_LOC/lib/pdk/Config.v3	/^	case Some(t: T);$/;"	c
MemRegExtend	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^enum MemRegExtend(id: u3) { UXTW(2), LSL(3), SXTW(6), SXTX(7) }$/;"	e
Memory	$VIRGIL_LOC/lib/pdk/Memory.v3	/^class Memory(offset: i64, length: i64) {$/;"	c
Method	$VIRGIL_LOC/lib/pdk/Method.v3	/^enum Method {$/;"	e
MipsAssembler	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^class MipsAssembler(w: DataWriter) {$/;"	c
MipsReg	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^type MipsReg {$/;"	c
MipsReg.R0	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R0;  case R1;  case R2;  case R3;$/;"	c
MipsReg.R0	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R0;  case R1;  case R2;  case R3;$/;"	c
MipsReg.R0	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R0;  case R1;  case R2;  case R3;$/;"	c
MipsReg.R1	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R0;  case R1;  case R2;  case R3;$/;"	c
MipsReg.R1	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R0;  case R1;  case R2;  case R3;$/;"	c
MipsReg.R1	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R0;  case R1;  case R2;  case R3;$/;"	c
MipsReg.R10	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R8;  case R9;  case R10; case R11;$/;"	c
MipsReg.R10	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R8;  case R9;  case R10; case R11;$/;"	c
MipsReg.R10	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R8;  case R9;  case R10; case R11;$/;"	c
MipsReg.R11	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R8;  case R9;  case R10; case R11;$/;"	c
MipsReg.R11	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R8;  case R9;  case R10; case R11;$/;"	c
MipsReg.R11	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R8;  case R9;  case R10; case R11;$/;"	c
MipsReg.R12	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R12; case R13; case R14; case R15;$/;"	c
MipsReg.R12	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R12; case R13; case R14; case R15;$/;"	c
MipsReg.R12	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R12; case R13; case R14; case R15;$/;"	c
MipsReg.R13	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R12; case R13; case R14; case R15;$/;"	c
MipsReg.R13	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R12; case R13; case R14; case R15;$/;"	c
MipsReg.R13	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R12; case R13; case R14; case R15;$/;"	c
MipsReg.R14	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R12; case R13; case R14; case R15;$/;"	c
MipsReg.R14	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R12; case R13; case R14; case R15;$/;"	c
MipsReg.R14	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R12; case R13; case R14; case R15;$/;"	c
MipsReg.R15	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R12; case R13; case R14; case R15;$/;"	c
MipsReg.R15	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R12; case R13; case R14; case R15;$/;"	c
MipsReg.R15	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R12; case R13; case R14; case R15;$/;"	c
MipsReg.R16	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R16; case R17; case R18; case R19;$/;"	c
MipsReg.R16	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R16; case R17; case R18; case R19;$/;"	c
MipsReg.R16	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R16; case R17; case R18; case R19;$/;"	c
MipsReg.R17	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R16; case R17; case R18; case R19;$/;"	c
MipsReg.R17	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R16; case R17; case R18; case R19;$/;"	c
MipsReg.R17	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R16; case R17; case R18; case R19;$/;"	c
MipsReg.R18	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R16; case R17; case R18; case R19;$/;"	c
MipsReg.R18	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R16; case R17; case R18; case R19;$/;"	c
MipsReg.R18	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R16; case R17; case R18; case R19;$/;"	c
MipsReg.R19	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R16; case R17; case R18; case R19;$/;"	c
MipsReg.R19	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R16; case R17; case R18; case R19;$/;"	c
MipsReg.R19	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R16; case R17; case R18; case R19;$/;"	c
MipsReg.R2	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R0;  case R1;  case R2;  case R3;$/;"	c
MipsReg.R2	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R0;  case R1;  case R2;  case R3;$/;"	c
MipsReg.R2	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R0;  case R1;  case R2;  case R3;$/;"	c
MipsReg.R20	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R20; case R21; case R22; case R23;$/;"	c
MipsReg.R20	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R20; case R21; case R22; case R23;$/;"	c
MipsReg.R20	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R20; case R21; case R22; case R23;$/;"	c
MipsReg.R21	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R20; case R21; case R22; case R23;$/;"	c
MipsReg.R21	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R20; case R21; case R22; case R23;$/;"	c
MipsReg.R21	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R20; case R21; case R22; case R23;$/;"	c
MipsReg.R22	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R20; case R21; case R22; case R23;$/;"	c
MipsReg.R22	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R20; case R21; case R22; case R23;$/;"	c
MipsReg.R22	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R20; case R21; case R22; case R23;$/;"	c
MipsReg.R23	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R20; case R21; case R22; case R23;$/;"	c
MipsReg.R23	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R20; case R21; case R22; case R23;$/;"	c
MipsReg.R23	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R20; case R21; case R22; case R23;$/;"	c
MipsReg.R24	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R24; case R25; case R26; case R27;$/;"	c
MipsReg.R24	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R24; case R25; case R26; case R27;$/;"	c
MipsReg.R24	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R24; case R25; case R26; case R27;$/;"	c
MipsReg.R25	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R24; case R25; case R26; case R27;$/;"	c
MipsReg.R25	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R24; case R25; case R26; case R27;$/;"	c
MipsReg.R25	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R24; case R25; case R26; case R27;$/;"	c
MipsReg.R26	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R24; case R25; case R26; case R27;$/;"	c
MipsReg.R26	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R24; case R25; case R26; case R27;$/;"	c
MipsReg.R26	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R24; case R25; case R26; case R27;$/;"	c
MipsReg.R27	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R24; case R25; case R26; case R27;$/;"	c
MipsReg.R27	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R24; case R25; case R26; case R27;$/;"	c
MipsReg.R27	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R24; case R25; case R26; case R27;$/;"	c
MipsReg.R28	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R28; case R29; case R30; case R31;$/;"	c
MipsReg.R28	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R28; case R29; case R30; case R31;$/;"	c
MipsReg.R28	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R28; case R29; case R30; case R31;$/;"	c
MipsReg.R29	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R28; case R29; case R30; case R31;$/;"	c
MipsReg.R29	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R28; case R29; case R30; case R31;$/;"	c
MipsReg.R29	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R28; case R29; case R30; case R31;$/;"	c
MipsReg.R3	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R0;  case R1;  case R2;  case R3;$/;"	c
MipsReg.R3	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R0;  case R1;  case R2;  case R3;$/;"	c
MipsReg.R3	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R0;  case R1;  case R2;  case R3;$/;"	c
MipsReg.R30	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R28; case R29; case R30; case R31;$/;"	c
MipsReg.R30	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R28; case R29; case R30; case R31;$/;"	c
MipsReg.R30	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R28; case R29; case R30; case R31;$/;"	c
MipsReg.R31	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R28; case R29; case R30; case R31;$/;"	c
MipsReg.R31	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R28; case R29; case R30; case R31;$/;"	c
MipsReg.R31	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R28; case R29; case R30; case R31;$/;"	c
MipsReg.R4	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R4;  case R5;  case R6;  case R7;$/;"	c
MipsReg.R4	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R4;  case R5;  case R6;  case R7;$/;"	c
MipsReg.R4	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R4;  case R5;  case R6;  case R7;$/;"	c
MipsReg.R5	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R4;  case R5;  case R6;  case R7;$/;"	c
MipsReg.R5	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R4;  case R5;  case R6;  case R7;$/;"	c
MipsReg.R5	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R4;  case R5;  case R6;  case R7;$/;"	c
MipsReg.R6	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R4;  case R5;  case R6;  case R7;$/;"	c
MipsReg.R6	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R4;  case R5;  case R6;  case R7;$/;"	c
MipsReg.R6	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R4;  case R5;  case R6;  case R7;$/;"	c
MipsReg.R7	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R4;  case R5;  case R6;  case R7;$/;"	c
MipsReg.R7	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R4;  case R5;  case R6;  case R7;$/;"	c
MipsReg.R7	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R4;  case R5;  case R6;  case R7;$/;"	c
MipsReg.R8	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R8;  case R9;  case R10; case R11;$/;"	c
MipsReg.R8	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R8;  case R9;  case R10; case R11;$/;"	c
MipsReg.R8	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R8;  case R9;  case R10; case R11;$/;"	c
MipsReg.R9	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R8;  case R9;  case R10; case R11;$/;"	c
MipsReg.R9	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R8;  case R9;  case R10; case R11;$/;"	c
MipsReg.R9	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R8;  case R9;  case R10; case R11;$/;"	c
NA	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def NA = X86_64Cond.new("na", 6);$/;"	d
NA	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def NA = X86Cond.new("na", 6);$/;"	d
NC	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def NC = X86_64Cond.new("nc", 3);$/;"	d
NC	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def NC = X86Cond.new("nc", 3);$/;"	d
NE	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case NE;    \/\/ Not equal$/;"	d
NE	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def NE  = Arm64Cond.new("ne", 0x1);$/;"	d
NEQ	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def NEQ = SSECmp.new("neq", 4);$/;"	d
NLE	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def NLE = SSECmp.new("nle", 6);$/;"	d
NLT	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def NLT = SSECmp.new("nlt", 5);$/;"	d
NO	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def NO = X86_64Cond.new("no", 1);$/;"	d
NO	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def NO = X86Cond.new("no", 1);$/;"	d
NOFLSH	$VIRGIL_LOC/lib/term/Termios.v3	/^	NOFLSH  (0x0080), \/\/ no flush after interrupt and kill characters$/;"	d
NONE	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^enum RegShift { LSL, LSR, ASR, NONE } \/\/ NONE shift is reserved for instructions like mul, div$/;"	d
NO_REX	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^def NO_REX: byte	= 0b00000000;$/;"	d
NP	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def NP = X86_64Cond.new("np", 11);$/;"	d
NP	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def NP = X86Cond.new("np", 11);$/;"	d
NS	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def NS = X86_64Cond.new("ns", 9);$/;"	d
NS	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def NS = X86Cond.new("ns", 9);$/;"	d
NV	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def NV  = Arm64Cond.new("nv", 0xF);$/;"	d
NZ	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def NZ = X86_64Cond.new("nz", 5);$/;"	d
NZ	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def NZ = X86Cond.new("nz", 5);$/;"	d
Net	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^component Net {$/;"	n
NetError	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^enum NetError(desc: string) {$/;"	e
NetResult	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^type NetResult<T> {$/;"	c
NetResult.Error	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	case Error(e: NetError);$/;"	c
NetResult.Error	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	case Error(e: NetError);$/;"	c
NetResult.Error	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	case Error(e: NetError);$/;"	c
NetResult.Result	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	case Result(v: T);$/;"	c
NetResult.Result	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	case Result(v: T);$/;"	c
NetResult.Result	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	case Result(v: T);$/;"	c
NetworkDown	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	NetworkDown("Network down"),$/;"	d
NetworkUnreachable	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	NetworkUnreachable("Network unreachable"),$/;"	d
None	$VIRGIL_LOC/lib/pdk/Config.v3	/^	case None;$/;"	d
NotConnected	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	NotConnected("Not connected"),$/;"	d
NotFound	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	NotFound("Entity not found"),$/;"	d
NotListening	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	NotListening("Not listening"),$/;"	d
Null	$VIRGIL_LOC/lib/file/json/JsonParser.v3	/^	case Null;$/;"	d
NumberParser	$VIRGIL_LOC/lib/util/NumberParser.v3	/^class NumberParser(input: Range<byte>) {$/;"	c
NumberParserVType	$VIRGIL_LOC/lib/util/NumberParser.v3	/^type NumberParserVType {$/;"	c
NumberParserVType.Float32	$VIRGIL_LOC/lib/util/NumberParser.v3	/^	case Float32;$/;"	c
NumberParserVType.Float32	$VIRGIL_LOC/lib/util/NumberParser.v3	/^	case Float32;$/;"	c
NumberParserVType.Float64	$VIRGIL_LOC/lib/util/NumberParser.v3	/^	case Float64;$/;"	c
NumberParserVType.Float64	$VIRGIL_LOC/lib/util/NumberParser.v3	/^	case Float64;$/;"	c
NumberParserVType.Int	$VIRGIL_LOC/lib/util/NumberParser.v3	/^	case Int(signed: bool, width: int);$/;"	c
NumberParserVType.Int	$VIRGIL_LOC/lib/util/NumberParser.v3	/^	case Int(signed: bool, width: int);$/;"	c
NumberParserValue	$VIRGIL_LOC/lib/util/NumberParser.v3	/^type NumberParserValue {$/;"	c
NumberParserValue.Float	$VIRGIL_LOC/lib/util/NumberParser.v3	/^	case Float(sign: int, exp: int, mantissa: u64);$/;"	c
NumberParserValue.Float	$VIRGIL_LOC/lib/util/NumberParser.v3	/^	case Float(sign: int, exp: int, mantissa: u64);$/;"	c
NumberParserValue.Int	$VIRGIL_LOC/lib/util/NumberParser.v3	/^	case Int(v: u64);$/;"	c
NumberParserValue.Int	$VIRGIL_LOC/lib/util/NumberParser.v3	/^	case Int(v: u64);$/;"	c
OCRNL	$VIRGIL_LOC/lib/term/Termios.v3	/^	OCRNL  (0x08), \/\/ Map CR -> NL$/;"	d
OFDEL	$VIRGIL_LOC/lib/term/Termios.v3	/^	OFDEL  (0x80), \/\/ use delete instead of null$/;"	d
OFILL	$VIRGIL_LOC/lib/term/Termios.v3	/^	OFILL  (0x40), \/\/ Fillchar for delay$/;"	d
OK	$VIRGIL_LOC/lib/util/Ints.v3	/^	OK(0),$/;"	d
OLCUC	$VIRGIL_LOC/lib/term/Termios.v3	/^	OLCUC  (0x02), \/\/ translate lower case to upper case$/;"	d
ONLCR	$VIRGIL_LOC/lib/term/Termios.v3	/^	ONLCR  (0x04), \/\/ Map NL -> CR-NL$/;"	d
ONLRET	$VIRGIL_LOC/lib/term/Termios.v3	/^	ONLRET (0x20), \/\/ NL also do CR$/;"	d
ONOCR	$VIRGIL_LOC/lib/term/Termios.v3	/^	ONOCR  (0x10), \/\/ No CR at col 0$/;"	d
OPERAND_SIZE_OVERRIDE	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	OPERAND_SIZE_OVERRIDE, ADDRESS_SIZE_OVERRIDE, GROUP1_2$/;"	d
OPERAND_SIZE_OVERRIDE_PREFIX	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^def OPERAND_SIZE_OVERRIDE_PREFIX = 0x66;$/;"	d
OPOST	$VIRGIL_LOC/lib/term/Termios.v3	/^	OPOST  (0x01), \/\/ post process output$/;"	d
OPTIONS	$VIRGIL_LOC/lib/pdk/Method.v3	/^	OPTIONS,$/;"	d
OP_REX	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^class X86_64Assembler(w: DataWriter, OP_REX: byte) {$/;"	d
ORD	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def ORD = SSECmp.new("ord", 7);$/;"	d
OVERFLOW	$VIRGIL_LOC/lib/util/Ints.v3	/^	OVERFLOW(-1),$/;"	d
Opt	$VIRGIL_LOC/lib/util/Option.v3	/^class Opt(name: string) {$/;"	c
Option	$VIRGIL_LOC/lib/util/Option.v3	/^class Option<T> extends Opt {$/;"	c
Options	$VIRGIL_LOC/lib/util/Option.v3	/^class Options {$/;"	c
Other	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	Other("Other error"),$/;"	d
OutOfMemory	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	OutOfMemory("Out of memory"),$/;"	d
P1	$VIRGIL_LOC/lib/math/Math.v3	/^def P1		=  1.66666666666666019037e-1;		\/* 3FC55555 5555553E *\/$/;"	d
P2	$VIRGIL_LOC/lib/math/Math.v3	/^def P2		= -2.77777777770155933842e-3;		\/* BF66C16C 16BEBD93 *\/$/;"	d
P3	$VIRGIL_LOC/lib/math/Math.v3	/^def P3		=  6.61375632143793436117e-5;		\/* 3F11566A AF25DE2C *\/$/;"	d
P4	$VIRGIL_LOC/lib/math/Math.v3	/^def P4		= -1.65339022054652515390e-6;		\/* BEBBBD41 C5D26BF1 *\/$/;"	d
P5	$VIRGIL_LOC/lib/math/Math.v3	/^def P5		=  4.13813679705723846039e-8;		\/* 3E663769 72BEA4D0 *\/$/;"	d
PARENB	$VIRGIL_LOC/lib/term/Termios.v3	/^	PARENB (0x100), \/\/ generate and expect parity bit$/;"	d
PARMRK	$VIRGIL_LOC/lib/term/Termios.v3	/^	PARMRK  (0x0008), \/\/ Mark parity errors byte{ff,0}$/;"	d
PARODD	$VIRGIL_LOC/lib/term/Termios.v3	/^	PARODD (0x200), \/\/ set odd parity$/;"	d
PATCH	$VIRGIL_LOC/lib/pdk/Method.v3	/^	PATCH$/;"	d
PL	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case PL;    \/\/ Plus\/positive or zero$/;"	d
PL	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def PL  = Arm64Cond.new("pl", 0x5);$/;"	d
POST	$VIRGIL_LOC/lib/pdk/Method.v3	/^	POST,$/;"	d
PREFIX_W	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^def PREFIX_W: byte	= 0x66;$/;"	d
PSH	$VIRGIL_LOC/lib/net/tcpip/Packets.v3	/^	SYN, ACK, FIN, RST, URG, PSH, WND, CHK, SEQ, ACK2$/;"	d
PT_DYNAMIC	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^	PT_DYNAMIC(2),$/;"	d
PT_INTERP	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^	PT_INTERP(3),$/;"	d
PT_LOAD	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^	PT_LOAD(1),$/;"	d
PT_NOTE	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^	PT_NOTE(4),$/;"	d
PT_NULL	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^	PT_NULL(0),$/;"	d
PT_PHDR	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^	PT_PHDR(6)$/;"	d
PT_SHLIB	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^	PT_SHLIB(5),$/;"	d
PUT	$VIRGIL_LOC/lib/pdk/Method.v3	/^	PUT,$/;"	d
ParseResult	$VIRGIL_LOC/lib/util/Sexpr.v3	/^type ParseResult<T> {$/;"	c
ParseResult.EmptySExpr	$VIRGIL_LOC/lib/util/Sexpr.v3	/^    case EmptySExpr;$/;"	c
ParseResult.EmptySExpr	$VIRGIL_LOC/lib/util/Sexpr.v3	/^    case EmptySExpr;$/;"	c
ParseResult.Expected	$VIRGIL_LOC/lib/util/Sexpr.v3	/^    case Expected(str: string);$/;"	c
ParseResult.Expected	$VIRGIL_LOC/lib/util/Sexpr.v3	/^    case Expected(str: string);$/;"	c
ParseResult.Success	$VIRGIL_LOC/lib/util/Sexpr.v3	/^    case Success(res: T);$/;"	c
ParseResult.Success	$VIRGIL_LOC/lib/util/Sexpr.v3	/^    case Success(res: T);$/;"	c
PartialMap	$VIRGIL_LOC/lib/util/Map.v3	/^class PartialMap<K, V> extends Map<K, V> {$/;"	c
PermissionDenied	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	PermissionDenied("Permission denied"),$/;"	d
Poly	$VIRGIL_LOC/lib/util/Poly.v3	/^component Poly {$/;"	n
R0	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case R0;  case R1;  case R2;  case R3;$/;"	d
R0	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def R0 = Arm64Gpr.new("x0", "w0", 0), R1 = Arm64Gpr.new("x1", "w1", 1);$/;"	d
R0	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R0;  case R1;  case R2;  case R3;$/;"	d
R1	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case R0;  case R1;  case R2;  case R3;$/;"	d
R1	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def R0 = Arm64Gpr.new("x0", "w0", 0), R1 = Arm64Gpr.new("x1", "w1", 1);$/;"	d
R1	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R0;  case R1;  case R2;  case R3;$/;"	d
R10	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case R8;  case R9;  case R10; case R11;$/;"	d
R10	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def R10 = Arm64Gpr.new("x10", "w10", 10), R11 = Arm64Gpr.new("x11", "w11", 11);$/;"	d
R10	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R8;  case R9;  case R10; case R11;$/;"	d
R10	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def R10 = X86_64Gpr.new("r10b", "r10w", "r10d", "r10", 10);$/;"	d
R11	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case R8;  case R9;  case R10; case R11;$/;"	d
R11	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def R10 = Arm64Gpr.new("x10", "w10", 10), R11 = Arm64Gpr.new("x11", "w11", 11);$/;"	d
R11	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R8;  case R9;  case R10; case R11;$/;"	d
R11	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def R11 = X86_64Gpr.new("r11b", "r11w", "r11d", "r11", 11);$/;"	d
R12	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case R12; case R13; case R14; case R15;$/;"	d
R12	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def R12 = Arm64Gpr.new("x12", "w12", 12), R13 = Arm64Gpr.new("x13", "w13", 13);$/;"	d
R12	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R12; case R13; case R14; case R15;$/;"	d
R12	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def R12 = X86_64Gpr.new("r12b", "r12w", "r12d", "r12", 12);$/;"	d
R13	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case R12; case R13; case R14; case R15;$/;"	d
R13	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def R12 = Arm64Gpr.new("x12", "w12", 12), R13 = Arm64Gpr.new("x13", "w13", 13);$/;"	d
R13	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R12; case R13; case R14; case R15;$/;"	d
R13	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def R13 = X86_64Gpr.new("r13b", "r13w", "r13d", "r13", 13);$/;"	d
R14	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case R12; case R13; case R14; case R15;$/;"	d
R14	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def R14 = Arm64Gpr.new("x14", "w14", 14), R15 = Arm64Gpr.new("x15", "w15", 15);$/;"	d
R14	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R12; case R13; case R14; case R15;$/;"	d
R14	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def R14 = X86_64Gpr.new("r14b", "r14w", "r14d", "r14", 14);$/;"	d
R15	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case R12; case R13; case R14; case R15;$/;"	d
R15	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def R14 = Arm64Gpr.new("x14", "w14", 14), R15 = Arm64Gpr.new("x15", "w15", 15);$/;"	d
R15	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R12; case R13; case R14; case R15;$/;"	d
R15	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def R15 = X86_64Gpr.new("r15b", "r15w", "r15d", "r15", 15);$/;"	d
R16	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def R16 = Arm64Gpr.new("x16", "w16", 16), R17 = Arm64Gpr.new("x17", "w17", 17);$/;"	d
R16	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R16; case R17; case R18; case R19;$/;"	d
R17	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def R16 = Arm64Gpr.new("x16", "w16", 16), R17 = Arm64Gpr.new("x17", "w17", 17);$/;"	d
R17	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R16; case R17; case R18; case R19;$/;"	d
R18	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def R18 = Arm64Gpr.new("x18", "w18", 18), R19 = Arm64Gpr.new("x19", "w19", 19);$/;"	d
R18	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R16; case R17; case R18; case R19;$/;"	d
R19	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def R18 = Arm64Gpr.new("x18", "w18", 18), R19 = Arm64Gpr.new("x19", "w19", 19);$/;"	d
R19	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R16; case R17; case R18; case R19;$/;"	d
R2	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case R0;  case R1;  case R2;  case R3;$/;"	d
R2	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def R2 = Arm64Gpr.new("x2", "w2", 2), R3 = Arm64Gpr.new("x3", "w3", 3);$/;"	d
R2	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R0;  case R1;  case R2;  case R3;$/;"	d
R20	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def R20 = Arm64Gpr.new("x20", "w20", 20), R21 = Arm64Gpr.new("x21", "w21", 21);$/;"	d
R20	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R20; case R21; case R22; case R23;$/;"	d
R21	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def R20 = Arm64Gpr.new("x20", "w20", 20), R21 = Arm64Gpr.new("x21", "w21", 21);$/;"	d
R21	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R20; case R21; case R22; case R23;$/;"	d
R22	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def R22 = Arm64Gpr.new("x22", "w22", 22), R23 = Arm64Gpr.new("x23", "w23", 23);$/;"	d
R22	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R20; case R21; case R22; case R23;$/;"	d
R23	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def R22 = Arm64Gpr.new("x22", "w22", 22), R23 = Arm64Gpr.new("x23", "w23", 23);$/;"	d
R23	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R20; case R21; case R22; case R23;$/;"	d
R24	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def R24 = Arm64Gpr.new("x24", "w24", 24), R25 = Arm64Gpr.new("x25", "w25", 25);$/;"	d
R24	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R24; case R25; case R26; case R27;$/;"	d
R25	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def R24 = Arm64Gpr.new("x24", "w24", 24), R25 = Arm64Gpr.new("x25", "w25", 25);$/;"	d
R25	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R24; case R25; case R26; case R27;$/;"	d
R26	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def R26 = Arm64Gpr.new("x26", "w26", 26), R27 = Arm64Gpr.new("x27", "w27", 27);$/;"	d
R26	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R24; case R25; case R26; case R27;$/;"	d
R27	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def R26 = Arm64Gpr.new("x26", "w26", 26), R27 = Arm64Gpr.new("x27", "w27", 27);$/;"	d
R27	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R24; case R25; case R26; case R27;$/;"	d
R28	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def R28 = Arm64Gpr.new("x28", "w28", 28), R29 = Arm64Gpr.new("x29", "w29", 29);$/;"	d
R28	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R28; case R29; case R30; case R31;$/;"	d
R29	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def R28 = Arm64Gpr.new("x28", "w28", 28), R29 = Arm64Gpr.new("x29", "w29", 29);$/;"	d
R29	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R28; case R29; case R30; case R31;$/;"	d
R3	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case R0;  case R1;  case R2;  case R3;$/;"	d
R3	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def R2 = Arm64Gpr.new("x2", "w2", 2), R3 = Arm64Gpr.new("x3", "w3", 3);$/;"	d
R3	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R0;  case R1;  case R2;  case R3;$/;"	d
R30	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def R30 = Arm64Gpr.new("x30", "w30", 30), SP = Arm64Gpr.new("sp", "wsp", 31);$/;"	d
R30	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R28; case R29; case R30; case R31;$/;"	d
R31	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R28; case R29; case R30; case R31;$/;"	d
R4	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case R4;  case R5;  case R6;  case R7;$/;"	d
R4	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def R4 = Arm64Gpr.new("x4", "w4", 4), R5 = Arm64Gpr.new("x5", "w5", 5);$/;"	d
R4	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R4;  case R5;  case R6;  case R7;$/;"	d
R5	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case R4;  case R5;  case R6;  case R7;$/;"	d
R5	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def R4 = Arm64Gpr.new("x4", "w4", 4), R5 = Arm64Gpr.new("x5", "w5", 5);$/;"	d
R5	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R4;  case R5;  case R6;  case R7;$/;"	d
R6	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case R4;  case R5;  case R6;  case R7;$/;"	d
R6	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def R6 = Arm64Gpr.new("x6", "w6", 6), R7 = Arm64Gpr.new("x7", "w7", 7);$/;"	d
R6	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R4;  case R5;  case R6;  case R7;$/;"	d
R7	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case R4;  case R5;  case R6;  case R7;$/;"	d
R7	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def R6 = Arm64Gpr.new("x6", "w6", 6), R7 = Arm64Gpr.new("x7", "w7", 7);$/;"	d
R7	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R4;  case R5;  case R6;  case R7;$/;"	d
R8	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case R8;  case R9;  case R10; case R11;$/;"	d
R8	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def R8 = Arm64Gpr.new("x8", "w8", 8), R9 = Arm64Gpr.new("x9", "w9", 9);$/;"	d
R8	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R8;  case R9;  case R10; case R11;$/;"	d
R8	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def R8 = X86_64Gpr.new("r8b", "r8w", "r8d", "r8", 8);$/;"	d
R9	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case R8;  case R9;  case R10; case R11;$/;"	d
R9	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def R8 = Arm64Gpr.new("x8", "w8", 8), R9 = Arm64Gpr.new("x9", "w9", 9);$/;"	d
R9	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	case R8;  case R9;  case R10; case R11;$/;"	d
R9	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def R9 = X86_64Gpr.new("r9b", "r9w", "r9d", "r9", 9);$/;"	d
RA	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	def RA = RiscV64Gpr.X1;$/;"	d
RAX	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def RAX = X86_64Gpr.new("al", "ax", "eax", "rax", 0);$/;"	d
RBP	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def RBP = X86_64Gpr.new("bpl", "bp", "ebp", "rbp", 5);$/;"	d
RBX	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def RBX = X86_64Gpr.new("bl", "bx", "ebx", "rbx", 3);$/;"	d
RCX	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def RCX = X86_64Gpr.new("cl", "cx", "ecx", "rcx", 1);$/;"	d
RDI	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def RDI = X86_64Gpr.new("dil", "di", "edi", "rdi", 7);$/;"	d
RDX	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def RDX = X86_64Gpr.new("dl", "dx", "edx", "rdx", 2);$/;"	d
REL_IMM19	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^enum Arm64PatchKind { REL_IMM19, ABS_IMM16, REL_IMM26 }$/;"	d
REL_IMM26	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^enum Arm64PatchKind { REL_IMM19, ABS_IMM16, REL_IMM26 }$/;"	d
REP	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	REP, REX, REX_B, REX_X, REX_R, REX_W, LOCK, FS_OVERRIDE,$/;"	d
REPEQ_PREFIX	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^def REPEQ_PREFIX = REP_PREFIX;$/;"	d
REPNE_PREFIX	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^def REPNE_PREFIX = 0xF2;$/;"	d
REP_PREFIX	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^def REP_PREFIX = 0xF3;$/;"	d
REX	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	REP, REX, REX_B, REX_X, REX_R, REX_W, LOCK, FS_OVERRIDE,$/;"	d
REX_B	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^def REX_B: byte		= 0b00000001;$/;"	d
REX_B	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	REP, REX, REX_B, REX_X, REX_R, REX_W, LOCK, FS_OVERRIDE,$/;"	d
REX_BYTE	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^def REX_BYTE: byte	= 0b01000000;$/;"	d
REX_R	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^def REX_R: byte		= 0b00000100;$/;"	d
REX_R	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	REP, REX, REX_B, REX_X, REX_R, REX_W, LOCK, FS_OVERRIDE,$/;"	d
REX_W	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^def REX_W: byte		= 0b00001000;$/;"	d
REX_W	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	REP, REX, REX_B, REX_X, REX_R, REX_W, LOCK, FS_OVERRIDE,$/;"	d
REX_X	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^def REX_X: byte		= 0b00000010;$/;"	d
REX_X	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	REP, REX, REX_B, REX_X, REX_R, REX_W, LOCK, FS_OVERRIDE,$/;"	d
RSI	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def RSI = X86_64Gpr.new("sil", "si", "esi", "rsi", 6);$/;"	d
RSP	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def RSP = X86_64Gpr.new("spl", "sp", "esp", "rsp", 4);$/;"	d
RST	$VIRGIL_LOC/lib/net/tcpip/Packets.v3	/^	SYN, ACK, FIN, RST, URG, PSH, WND, CHK, SEQ, ACK2$/;"	d
RZR	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def RZR = Arm64Gpr.new("xzr", "wzr", 31);$/;"	d
Random	$VIRGIL_LOC/lib/util/Random.v3	/^component Random {$/;"	n
Ranges	$VIRGIL_LOC/lib/util/Ranges.v3	/^component Ranges {$/;"	n
Reg	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case Reg(rm: ArmReg);$/;"	d
RegRorImm	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case RegRorImm(rm: ArmReg, shift: u5);$/;"	d
RegRorReg	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case RegRorReg(rm: ArmReg, rs: ArmReg);$/;"	d
RegSarImm	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case RegSarImm(rm: ArmReg, shift: u5);$/;"	d
RegSarReg	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case RegSarReg(rm: ArmReg, rs: ArmReg);$/;"	d
RegShift	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^enum RegShift { LSL, LSR, ASR, NONE } \/\/ NONE shift is reserved for instructions like mul, div$/;"	e
RegShlImm	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case RegShlImm(rm: ArmReg, shift: u5);$/;"	d
RegShlReg	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case RegShlReg(rm: ArmReg, rs: ArmReg);$/;"	d
RegShrImm	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case RegShrImm(rm: ArmReg, shift: u5);$/;"	d
RegShrReg	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case RegShrReg(rm: ArmReg, rs: ArmReg);$/;"	d
ReifiedType	$VIRGIL_LOC/lib/util/Types.v3	/^private type ReifiedType<T>() #unboxed {$/;"	c
Repeated	$VIRGIL_LOC/lib/packing/CiRuntime.v3	/^	case Repeated(ex: u4, count: u4, framewords: u20)	#packing 0b_11111111_11111111_1111eeee_ccccffff_ffffffff_ffffffff;$/;"	d
Request	$VIRGIL_LOC/lib/pdk/Http.v3	/^class Request(method: Method, header: Header, url: string) {$/;"	c
ResourceBusy	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	ResourceBusy("Resource busy"),$/;"	d
Response	$VIRGIL_LOC/lib/pdk/Http.v3	/^class Response {$/;"	c
Result	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	case Result(v: T);$/;"	d
RiscV64Assembler	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^class RiscV64Assembler(w: DataWriter) {$/;"	c
RiscV64Gpr	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^enum RiscV64Gpr {$/;"	e
RiscV64Regs	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^component RiscV64Regs {$/;"	n
RiscVFpr	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^enum RiscVFpr {$/;"	e
RoundingMode	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^enum RoundingMode(value: int) {$/;"	e
S0	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	def S0  = RiscV64Gpr.X8;$/;"	d
S1	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	def S1  = RiscV64Gpr.X9;$/;"	d
S10	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	def S10 = RiscV64Gpr.X26;$/;"	d
S11	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	def S11 = RiscV64Gpr.X27;$/;"	d
S2	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	def S2  = RiscV64Gpr.X18;$/;"	d
S3	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	def S3  = RiscV64Gpr.X19;$/;"	d
S4	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	def S4  = RiscV64Gpr.X20;$/;"	d
S5	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	def S5  = RiscV64Gpr.X21;$/;"	d
S6	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	def S6  = RiscV64Gpr.X22;$/;"	d
S7	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	def S7  = RiscV64Gpr.X23;$/;"	d
S8	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	def S8  = RiscV64Gpr.X24;$/;"	d
S9	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	def S9  = RiscV64Gpr.X25;$/;"	d
SEGMENT_FS_OVERRIDE_PREFIX	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^def SEGMENT_FS_OVERRIDE_PREFIX = 0x64;$/;"	d
SEQ	$VIRGIL_LOC/lib/net/tcpip/Packets.v3	/^	SYN, ACK, FIN, RST, URG, PSH, WND, CHK, SEQ, ACK2$/;"	d
SExpr	$VIRGIL_LOC/lib/util/Sexpr.v3	/^type SExpr {$/;"	c
SExpr.Atom	$VIRGIL_LOC/lib/util/Sexpr.v3	/^    case Atom(data: string);$/;"	c
SExpr.Atom	$VIRGIL_LOC/lib/util/Sexpr.v3	/^    case Atom(data: string);$/;"	c
SExpr.List	$VIRGIL_LOC/lib/util/Sexpr.v3	/^    case List(elems: List<SExpr>); \/\/ usually Cons$/;"	c
SExpr.List	$VIRGIL_LOC/lib/util/Sexpr.v3	/^    case List(elems: List<SExpr>); \/\/ usually Cons$/;"	c
SExprParser	$VIRGIL_LOC/lib/util/Sexpr.v3	/^class SExprParser extends TextReader {$/;"	c
SFRS	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def SFRS = [$/;"	d
SHT_PROGBITS	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^	SHT_PROGBITS(1),$/;"	d
SHT_STRTAB	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^	SHT_STRTAB(3)$/;"	d
SHT_SYMTAB	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^	SHT_SYMTAB(2),$/;"	d
SP	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def R30 = Arm64Gpr.new("x30", "w30", 30), SP = Arm64Gpr.new("sp", "wsp", 31);$/;"	d
SP	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	def SP = RiscV64Gpr.X2;$/;"	d
SP	$VIRGIL_LOC/lib/term/Vt100.v3	/^def SP = ' ';$/;"	d
SSEAddr	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^class SSEAddr(base: X86Reg, index: X86Reg, scale: byte, disp: int) extends SSERm {$/;"	c
SSECmp	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^class SSECmp(name: string, index: int) {$/;"	c
SSECmps	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^component SSECmps {$/;"	n
SSEReg	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^class SSEReg(name: string, index: int) extends SSERm {$/;"	c
SSERm	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^class SSERm {$/;"	c
SXTB	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^enum DataRegExtend { UXTB, UXTH, UXTW, UXTX, SXTB, SXTH, SXTW, SXTX }$/;"	d
SXTH	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^enum DataRegExtend { UXTB, UXTH, UXTW, UXTX, SXTB, SXTH, SXTW, SXTX }$/;"	d
SXTW	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^enum MemRegExtend(id: u3) { UXTW(2), LSL(3), SXTW(6), SXTX(7) }$/;"	d
SXTX	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^enum MemRegExtend(id: u3) { UXTW(2), LSL(3), SXTW(6), SXTX(7) }$/;"	d
SYN	$VIRGIL_LOC/lib/net/tcpip/Packets.v3	/^	SYN, ACK, FIN, RST, URG, PSH, WND, CHK, SEQ, ACK2$/;"	d
ServerSocket	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^class ServerSocket extends Socket {$/;"	c
Socket	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^class Socket {$/;"	c
SocketType	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^enum SocketType {$/;"	e
Some	$VIRGIL_LOC/lib/pdk/Config.v3	/^	case Some(t: T);$/;"	d
Stack	$VIRGIL_LOC/lib/util/Stack.v3	/^class Stack<T> {$/;"	c
String	$VIRGIL_LOC/lib/file/json/JsonParser.v3	/^	case String(v: string);$/;"	d
StringBuilder	$VIRGIL_LOC/lib/util/StringBuilder.v3	/^class StringBuilder {$/;"	c
Strings	$VIRGIL_LOC/lib/util/Strings.v3	/^component Strings {$/;"	n
SubImm	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case SubImm(off: u8);$/;"	d
SubReg	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case SubReg(rm: ArmReg);$/;"	d
Success	$VIRGIL_LOC/lib/util/Sexpr.v3	/^    case Success(res: T);$/;"	d
T0	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	def T0 = RiscV64Gpr.X5;$/;"	d
T1	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	def T1 = RiscV64Gpr.X6;$/;"	d
T2	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	def T2 = RiscV64Gpr.X7;$/;"	d
T3	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	def T3 = RiscV64Gpr.X28;$/;"	d
T4	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	def T4 = RiscV64Gpr.X29;$/;"	d
T5	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	def T5 = RiscV64Gpr.X30;$/;"	d
T6	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	def T6 = RiscV64Gpr.X31;$/;"	d
TCGETS	$VIRGIL_LOC/lib/term/Termios.v3	/^	def TCGETS     = 0x5401;     \/\/ TCGETS get terminal attributes$/;"	d
TCSETS	$VIRGIL_LOC/lib/term/Termios.v3	/^	def TCSETS     = 0x5402;     \/\/ TCSETS set terminal attributes$/;"	d
TIOCGPTN	$VIRGIL_LOC/lib/term/Termios.v3	/^	def TIOCGPTN   = 0x80045430; \/\/ TIOCGPTN IOCTL used to get the PTY number$/;"	d
TIOCGWINSZ	$VIRGIL_LOC/lib/term/Termios.v3	/^	def TIOCGWINSZ = 0x5413;     \/\/ TIOCGWINSZ used to get the terminal window size$/;"	d
TIOCSPTLCK	$VIRGIL_LOC/lib/term/Termios.v3	/^	def TIOCSPTLCK = 0x40045431; \/\/ TIOCSPTLCK IOCT used to lock\/unlock PTY$/;"	d
TIOCSWINSZ	$VIRGIL_LOC/lib/term/Termios.v3	/^	def TIOCSWINSZ = 0x5414;     \/\/ TIOCSWINSZ used to set the terminal window size$/;"	d
TOO_LONG	$VIRGIL_LOC/lib/util/Ints.v3	/^	TOO_LONG(-3),$/;"	d
TOSTOP	$VIRGIL_LOC/lib/term/Termios.v3	/^	TOSTOP  (0x0100), \/\/ stop BG jobs trying to write to term$/;"	d
TO_NEAREST	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	TO_NEAREST(0x00),$/;"	d
TO_NEAREST	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	TO_NEAREST(0x00),$/;"	d
TO_NEG_INF	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	TO_NEG_INF(0x01),$/;"	d
TO_NEG_INF	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	TO_NEG_INF(0x01),$/;"	d
TO_POS_INF	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	TO_POS_INF(0x02),$/;"	d
TO_POS_INF	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	TO_POS_INF(0x02),$/;"	d
TO_ZERO	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	TO_ZERO(0x03)$/;"	d
TO_ZERO	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	TO_ZERO(0x03)$/;"	d
TP	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	def TP = RiscV64Gpr.X4;$/;"	d
TRACE	$VIRGIL_LOC/lib/pdk/Method.v3	/^	TRACE,$/;"	d
Tcp	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	Tcp,$/;"	d
TcpV4Control	$VIRGIL_LOC/lib/net/tcpip/Packets.v3	/^type TcpV4Control(flags: TcpV4Flag.set, offset: u4) #packing 0b_ffffffff_f???oooo;$/;"	c
TcpV4Flag	$VIRGIL_LOC/lib/net/tcpip/Packets.v3	/^enum TcpV4Flag {$/;"	e
TcpV4Header	$VIRGIL_LOC/lib/net/tcpip/Packets.v3	/^layout TcpV4Header #big-endian {$/;"	l
Termios	$VIRGIL_LOC/lib/term/Termios.v3	/^component Termios {$/;"	n
TermiosBaud	$VIRGIL_LOC/lib/term/Termios.v3	/^enum TermiosBaud(code: u32) {$/;"	e
TermiosControlChar	$VIRGIL_LOC/lib/term/Termios.v3	/^enum TermiosControlChar(code: u5) {$/;"	e
TermiosControlMode	$VIRGIL_LOC/lib/term/Termios.v3	/^enum TermiosControlMode(mask: u32) {$/;"	e
TermiosInputFlag	$VIRGIL_LOC/lib/term/Termios.v3	/^enum TermiosInputFlag(mask: u32) {$/;"	e
TermiosMode	$VIRGIL_LOC/lib/term/Termios.v3	/^enum TermiosMode(mask: u32) {$/;"	e
TermiosOutputFlag	$VIRGIL_LOC/lib/term/Termios.v3	/^enum TermiosOutputFlag(mask: u32) {$/;"	e
TextReader	$VIRGIL_LOC/lib/util/TextReader.v3	/^class TextReader {$/;"	c
TimedOut	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	TimedOut("Timed out"),$/;"	d
Token	$VIRGIL_LOC/lib/util/Token.v3	/^class Token extends FilePoint {$/;"	c
Types	$VIRGIL_LOC/lib/util/Types.v3	/^component Types {$/;"	n
U31_MAX_1	$VIRGIL_LOC/lib/util/NumberParser.v3	/^def U31_MAX_1: u32 = 0x80000000;$/;"	d
U32_0	$VIRGIL_LOC/lib/util/Ints.v3	/^	private def U32_0 = u32.view('0');$/;"	d
U32_CHAR_ZERO	$VIRGIL_LOC/lib/util/NumberParser.v3	/^def U32_CHAR_ZERO: u32 = '0';$/;"	d
U32_MAX_DIV_10	$VIRGIL_LOC/lib/util/NumberParser.v3	/^def U32_MAX_DIV_10: u32 = 429496729;$/;"	d
U32_MAX_MOD_10	$VIRGIL_LOC/lib/util/NumberParser.v3	/^def U32_MAX_MOD_10: u32 = 6;$/;"	d
U32_TYPE	$VIRGIL_LOC/lib/util/NumberParser.v3	/^def U32_TYPE = NumberParserVType.Int(false, 32);$/;"	d
U63_MAX_1	$VIRGIL_LOC/lib/util/NumberParser.v3	/^def U63_MAX_1: u64 = 0x8000000000000000;$/;"	d
U64_MAX_DIV_10	$VIRGIL_LOC/lib/util/NumberParser.v3	/^def U64_MAX_DIV_10: u64 = 0x1999999999999999; \/\/ (18,446,744,073,709,551,616 \/ 10)$/;"	d
U64_MAX_MOD_10	$VIRGIL_LOC/lib/util/NumberParser.v3	/^def U64_MAX_MOD_10: u32 = 6; \/\/ (18,446,744,073,709,551,616 % 10)$/;"	d
U64_TYPE	$VIRGIL_LOC/lib/util/NumberParser.v3	/^def U64_TYPE = NumberParserVType.Int(false, 64);$/;"	d
UID	$VIRGIL_LOC/lib/util/UID.v3	/^component UID {$/;"	n
UNDERFLOW	$VIRGIL_LOC/lib/util/Ints.v3	/^	UNDERFLOW(-2),$/;"	d
UNORD	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def UNORD = SSECmp.new("unord", 3);$/;"	d
URG	$VIRGIL_LOC/lib/net/tcpip/Packets.v3	/^	SYN, ACK, FIN, RST, URG, PSH, WND, CHK, SEQ, ACK2$/;"	d
UXTB	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^enum DataRegExtend { UXTB, UXTH, UXTW, UXTX, SXTB, SXTH, SXTW, SXTX }$/;"	d
UXTH	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^enum DataRegExtend { UXTB, UXTH, UXTW, UXTX, SXTB, SXTH, SXTW, SXTX }$/;"	d
UXTW	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^enum MemRegExtend(id: u3) { UXTW(2), LSL(3), SXTW(6), SXTX(7) }$/;"	d
UXTX	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^enum DataRegExtend { UXTB, UXTH, UXTW, UXTX, SXTB, SXTH, SXTW, SXTX }$/;"	d
Udp	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	Udp$/;"	d
UdpPacket	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^class UdpPacket {$/;"	c
UdpSocket	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^class UdpSocket extends Socket {$/;"	c
UdpV4Header	$VIRGIL_LOC/lib/net/tcpip/Packets.v3	/^layout UdpV4Header #big-endian {$/;"	l
Uncategorized	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	Uncategorized("Uncategorized error")$/;"	d
Unsupported	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	Unsupported("Unsupported"),$/;"	d
Utf8	$VIRGIL_LOC/lib/util/Utf8.v3	/^component Utf8 {$/;"	n
V0	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def V0 = Arm64Sfr.new("v0", 0), V1 = Arm64Sfr.new("v1", 1);$/;"	d
V1	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def V0 = Arm64Sfr.new("v0", 0), V1 = Arm64Sfr.new("v1", 1);$/;"	d
V10	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def V10 = Arm64Sfr.new("v10", 10), V11 = Arm64Sfr.new("v11", 11);$/;"	d
V11	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def V10 = Arm64Sfr.new("v10", 10), V11 = Arm64Sfr.new("v11", 11);$/;"	d
V12	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def V12 = Arm64Sfr.new("v12", 12), V13 = Arm64Sfr.new("v13", 13);$/;"	d
V13	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def V12 = Arm64Sfr.new("v12", 12), V13 = Arm64Sfr.new("v13", 13);$/;"	d
V14	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def V14 = Arm64Sfr.new("v14", 14), V15 = Arm64Sfr.new("v15", 15);$/;"	d
V15	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def V14 = Arm64Sfr.new("v14", 14), V15 = Arm64Sfr.new("v15", 15);$/;"	d
V16	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def V16 = Arm64Sfr.new("v16", 16), V17 = Arm64Sfr.new("v17", 17);$/;"	d
V17	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def V16 = Arm64Sfr.new("v16", 16), V17 = Arm64Sfr.new("v17", 17);$/;"	d
V18	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def V18 = Arm64Sfr.new("v18", 18), V19 = Arm64Sfr.new("v19", 19);$/;"	d
V19	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def V18 = Arm64Sfr.new("v18", 18), V19 = Arm64Sfr.new("v19", 19);$/;"	d
V2	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def V2 = Arm64Sfr.new("v2", 2), V3 = Arm64Sfr.new("v3", 3);$/;"	d
V20	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def V20 = Arm64Sfr.new("v20", 20), V21 = Arm64Sfr.new("v21", 21);$/;"	d
V21	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def V20 = Arm64Sfr.new("v20", 20), V21 = Arm64Sfr.new("v21", 21);$/;"	d
V22	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def V22 = Arm64Sfr.new("v22", 22), V23 = Arm64Sfr.new("v23", 23);$/;"	d
V23	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def V22 = Arm64Sfr.new("v22", 22), V23 = Arm64Sfr.new("v23", 23);$/;"	d
V24	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def V24 = Arm64Sfr.new("v24", 24), V25 = Arm64Sfr.new("v25", 25);$/;"	d
V25	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def V24 = Arm64Sfr.new("v24", 24), V25 = Arm64Sfr.new("v25", 25);$/;"	d
V26	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def V26 = Arm64Sfr.new("v26", 26), V27 = Arm64Sfr.new("v27", 27);$/;"	d
V27	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def V26 = Arm64Sfr.new("v26", 26), V27 = Arm64Sfr.new("v27", 27);$/;"	d
V28	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def V28 = Arm64Sfr.new("v28", 28), V29 = Arm64Sfr.new("v29", 29);$/;"	d
V29	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def V28 = Arm64Sfr.new("v28", 28), V29 = Arm64Sfr.new("v29", 29);$/;"	d
V3	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def V2 = Arm64Sfr.new("v2", 2), V3 = Arm64Sfr.new("v3", 3);$/;"	d
V30	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def V30 = Arm64Sfr.new("v30", 30), V31 = Arm64Sfr.new("v31", 31);$/;"	d
V31	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def V30 = Arm64Sfr.new("v30", 30), V31 = Arm64Sfr.new("v31", 31);$/;"	d
V4	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def V4 = Arm64Sfr.new("v4", 4), V5 = Arm64Sfr.new("v5", 5);$/;"	d
V5	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def V4 = Arm64Sfr.new("v4", 4), V5 = Arm64Sfr.new("v5", 5);$/;"	d
V6	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def V6 = Arm64Sfr.new("v6", 6), V7 = Arm64Sfr.new("v7", 7);$/;"	d
V7	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def V6 = Arm64Sfr.new("v6", 6), V7 = Arm64Sfr.new("v7", 7);$/;"	d
V8	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def V8 = Arm64Sfr.new("v8", 8), V9 = Arm64Sfr.new("v9", 9);$/;"	d
V9	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def V8 = Arm64Sfr.new("v8", 8), V9 = Arm64Sfr.new("v9", 9);$/;"	d
VALUE_NULL	$VIRGIL_LOC/lib/util/NumberParser.v3	/^def VALUE_NULL = NumberParserValue.Int(0);$/;"	d
VC	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case VC;    \/\/ No overflow$/;"	d
VC	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def VC  = Arm64Cond.new("vc", 0x7);$/;"	d
VDISCARD	$VIRGIL_LOC/lib/term/Termios.v3	/^	VDISCARD (13),$/;"	d
VEOF	$VIRGIL_LOC/lib/term/Termios.v3	/^	VEOF     (4),  \/\/ char will send EOF$/;"	d
VEOL	$VIRGIL_LOC/lib/term/Termios.v3	/^	VEOL     (11), \/\/ char will end the line$/;"	d
VEOL2	$VIRGIL_LOC/lib/term/Termios.v3	/^	VEOL2    (16), \/\/ char alternate to end line$/;"	d
VERASE	$VIRGIL_LOC/lib/term/Termios.v3	/^	VERASE   (2),  \/\/ char will erase last typed char$/;"	d
VEX2_PREFIX	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^def VEX2_PREFIX = 0xC5;$/;"	d
VEX3_PREFIX	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^def VEX3_PREFIX = 0xC4;$/;"	d
VINTR	$VIRGIL_LOC/lib/term/Termios.v3	/^	VINTR    (0),  \/\/ char will send an interrupt signal$/;"	d
VKILL	$VIRGIL_LOC/lib/term/Termios.v3	/^	VKILL    (3),  \/\/ char will erase current line$/;"	d
VLNEXT	$VIRGIL_LOC/lib/term/Termios.v3	/^	VLNEXT   (15), \/\/ char will enter the next char quoted$/;"	d
VMIN	$VIRGIL_LOC/lib/term/Termios.v3	/^	VMIN     (6),  \/\/ set min characters for a complete read$/;"	d
VQUIT	$VIRGIL_LOC/lib/term/Termios.v3	/^	VQUIT    (1),  \/\/ char will send a quit signal$/;"	d
VREPRINT	$VIRGIL_LOC/lib/term/Termios.v3	/^	VREPRINT (12), \/\/ will redraw the current line$/;"	d
VS	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case VS;    \/\/ Overflow$/;"	d
VS	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def VS  = Arm64Cond.new("vs", 0x6);$/;"	d
VSTART	$VIRGIL_LOC/lib/term/Termios.v3	/^	VSTART   (8),  \/\/ char will restart output after stopping it$/;"	d
VSTOP	$VIRGIL_LOC/lib/term/Termios.v3	/^	VSTOP    (9),  \/\/ char will stop output$/;"	d
VSUSP	$VIRGIL_LOC/lib/term/Termios.v3	/^	VSUSP    (10), \/\/ char will send a stop signal$/;"	d
VSWTC	$VIRGIL_LOC/lib/term/Termios.v3	/^	VSWTC    (7),  \/\/ char will switch to a different shell layer$/;"	d
VTIME	$VIRGIL_LOC/lib/term/Termios.v3	/^	VTIME    (5),  \/\/ set read timeout in tenths of seconds$/;"	d
VTYPE_NULL	$VIRGIL_LOC/lib/util/NumberParser.v3	/^def VTYPE_NULL = NumberParserVType.Int(false, 0);$/;"	d
VWERASE	$VIRGIL_LOC/lib/term/Termios.v3	/^	VWERASE  (14), \/\/ char will erase last word typed$/;"	d
Var	$VIRGIL_LOC/lib/pdk/Var.v3	/^component Var {$/;"	n
Vector	$VIRGIL_LOC/lib/util/Vector.v3	/^class Vector<T> {$/;"	c
Vectors	$VIRGIL_LOC/lib/util/Vector.v3	/^component Vectors {$/;"	n
Vt100	$VIRGIL_LOC/lib/term/Vt100.v3	/^component Vt100 {$/;"	n
W32	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^enum DataWidth { W32, W64 }$/;"	d
W64	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^enum DataWidth { W32, W64 }$/;"	d
WND	$VIRGIL_LOC/lib/net/tcpip/Packets.v3	/^	SYN, ACK, FIN, RST, URG, PSH, WND, CHK, SEQ, ACK2$/;"	d
Words	$VIRGIL_LOC/lib/packing/CiRuntime.v3	/^	case Words(framewords: u18)		#packing 0b_11ff_ffffffff_ffffffff;$/;"	d
WorkQueue	$VIRGIL_LOC/lib/util/WorkQueue.v3	/^class WorkQueue {$/;"	c
WorkUnit	$VIRGIL_LOC/lib/util/WorkQueue.v3	/^private class WorkUnit(run: void -> void) {$/;"	c
WouldBlock	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	WouldBlock("Operation would block"),$/;"	d
X0	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	 X0,  X1,  X2,  X3,$/;"	d
X1	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	 X0,  X1,  X2,  X3,$/;"	d
X10	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	 X8,  X9, X10, X11,$/;"	d
X11	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	 X8,  X9, X10, X11,$/;"	d
X12	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	X12, X13, X14, X15,$/;"	d
X13	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	X12, X13, X14, X15,$/;"	d
X14	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	X12, X13, X14, X15,$/;"	d
X15	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	X12, X13, X14, X15,$/;"	d
X16	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	X16, X17, X18, X19,$/;"	d
X17	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	X16, X17, X18, X19,$/;"	d
X18	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	X16, X17, X18, X19,$/;"	d
X19	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	X16, X17, X18, X19,$/;"	d
X2	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	 X0,  X1,  X2,  X3,$/;"	d
X20	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	X20, X21, X22, X23,$/;"	d
X21	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	X20, X21, X22, X23,$/;"	d
X22	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	X20, X21, X22, X23,$/;"	d
X23	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	X20, X21, X22, X23,$/;"	d
X24	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	X24, X25, X26, X27,$/;"	d
X25	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	X24, X25, X26, X27,$/;"	d
X26	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	X24, X25, X26, X27,$/;"	d
X27	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	X24, X25, X26, X27,$/;"	d
X28	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	X28, X29, X30, X31$/;"	d
X29	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	X28, X29, X30, X31$/;"	d
X3	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	 X0,  X1,  X2,  X3,$/;"	d
X30	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	X28, X29, X30, X31$/;"	d
X31	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	X28, X29, X30, X31$/;"	d
X4	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	 X4,  X5,  X6,  X7,$/;"	d
X5	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	 X4,  X5,  X6,  X7,$/;"	d
X6	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	 X4,  X5,  X6,  X7,$/;"	d
X7	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	 X4,  X5,  X6,  X7,$/;"	d
X8	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	 X8,  X9, X10, X11,$/;"	d
X86Addr	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^class X86Addr(base: X86Reg, index: X86Reg, scale: byte, disp: int) extends X86Rm {$/;"	c
X86Assembler	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^class X86Assembler(w: DataWriter) {$/;"	c
X86Cond	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^class X86Cond(name: string, index: int) {$/;"	c
X86Conds	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^component X86Conds {$/;"	n
X86OP_eax_i	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^def X86OP_eax_i = "\x05\x0D\x15\x1D\x25\x2D\x35\x3D";$/;"	d
X86OP_r_rm	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^def X86OP_r_rm	= "\x03\x0B\x13\x1B\x23\x2B\x33\x3B";$/;"	d
X86OP_rm_r	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^def X86OP_rm_r	= "\x01\x09\x11\x19\x21\x29\x31\x39";$/;"	d
X86Op2	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^class X86Op2(asm: X86Assembler, operator: int) {$/;"	c
X86Reg	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^class X86Reg(name8: string, name16: string, name32: string, index: int) extends X86Rm {$/;"	c
X86Regs	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^component X86Regs {$/;"	n
X86Rm	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^class X86Rm {$/;"	c
X86_64Addr	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^class X86_64Addr(base: X86_64Gpr, index: X86_64Gpr, scale: byte, disp: int) {$/;"	c
X86_64AddrMode	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^type X86_64AddrMode {$/;"	c
X86_64AddrMode.imm_b	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	case imm_b(i: byte);$/;"	c
X86_64AddrMode.imm_b	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	case imm_b(i: byte);$/;"	c
X86_64AddrMode.imm_b	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	case imm_b(i: byte);$/;"	c
X86_64AddrMode.m_b	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	case m_b(a: X86_64Addr, i: byte);$/;"	c
X86_64AddrMode.m_b	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	case m_b(a: X86_64Addr, i: byte);$/;"	c
X86_64AddrMode.m_b	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	case m_b(a: X86_64Addr, i: byte);$/;"	c
X86_64AddrMode.m_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	case m_i(a: X86_64Addr, i: int);$/;"	c
X86_64AddrMode.m_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	case m_i(a: X86_64Addr, i: int);$/;"	c
X86_64AddrMode.m_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	case m_i(a: X86_64Addr, i: int);$/;"	c
X86_64AddrMode.m_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	case m_r(a: X86_64Addr, b: X86_64Gpr);$/;"	c
X86_64AddrMode.m_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	case m_r(a: X86_64Addr, b: X86_64Gpr);$/;"	c
X86_64AddrMode.m_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	case m_r(a: X86_64Addr, b: X86_64Gpr);$/;"	c
X86_64AddrMode.m_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	case m_s(a: X86_64Addr, b: X86_64Xmmr);$/;"	c
X86_64AddrMode.m_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	case m_s(a: X86_64Addr, b: X86_64Xmmr);$/;"	c
X86_64AddrMode.m_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	case m_s(a: X86_64Addr, b: X86_64Xmmr);$/;"	c
X86_64AddrMode.none	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	case none;$/;"	c
X86_64AddrMode.none	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	case none;$/;"	c
X86_64AddrMode.none	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	case none;$/;"	c
X86_64AddrMode.r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	case r(a: X86_64Gpr);$/;"	c
X86_64AddrMode.r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	case r(a: X86_64Gpr);$/;"	c
X86_64AddrMode.r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	case r(a: X86_64Gpr);$/;"	c
X86_64AddrMode.r_b	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	case r_b(a: X86_64Gpr, i: byte);$/;"	c
X86_64AddrMode.r_b	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	case r_b(a: X86_64Gpr, i: byte);$/;"	c
X86_64AddrMode.r_b	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	case r_b(a: X86_64Gpr, i: byte);$/;"	c
X86_64AddrMode.r_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	case r_i(a: X86_64Gpr, i: int);$/;"	c
X86_64AddrMode.r_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	case r_i(a: X86_64Gpr, i: int);$/;"	c
X86_64AddrMode.r_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	case r_i(a: X86_64Gpr, i: int);$/;"	c
X86_64AddrMode.r_l	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	case r_l(a: X86_64Gpr, i: long);$/;"	c
X86_64AddrMode.r_l	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	case r_l(a: X86_64Gpr, i: long);$/;"	c
X86_64AddrMode.r_l	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	case r_l(a: X86_64Gpr, i: long);$/;"	c
X86_64AddrMode.r_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	case r_m(a: X86_64Gpr, b: X86_64Addr);$/;"	c
X86_64AddrMode.r_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	case r_m(a: X86_64Gpr, b: X86_64Addr);$/;"	c
X86_64AddrMode.r_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	case r_m(a: X86_64Gpr, b: X86_64Addr);$/;"	c
X86_64AddrMode.r_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	case r_r(a: X86_64Gpr, b: X86_64Gpr);$/;"	c
X86_64AddrMode.r_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	case r_r(a: X86_64Gpr, b: X86_64Gpr);$/;"	c
X86_64AddrMode.r_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	case r_r(a: X86_64Gpr, b: X86_64Gpr);$/;"	c
X86_64AddrMode.r_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	case r_s(a: X86_64Gpr, b: X86_64Xmmr);$/;"	c
X86_64AddrMode.r_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	case r_s(a: X86_64Gpr, b: X86_64Xmmr);$/;"	c
X86_64AddrMode.r_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	case r_s(a: X86_64Gpr, b: X86_64Xmmr);$/;"	c
X86_64AddrMode.s_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	case s_m(a: X86_64Xmmr, b: X86_64Addr);$/;"	c
X86_64AddrMode.s_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	case s_m(a: X86_64Xmmr, b: X86_64Addr);$/;"	c
X86_64AddrMode.s_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	case s_m(a: X86_64Xmmr, b: X86_64Addr);$/;"	c
X86_64AddrMode.s_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	case s_r(a: X86_64Xmmr, b: X86_64Gpr);$/;"	c
X86_64AddrMode.s_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	case s_r(a: X86_64Xmmr, b: X86_64Gpr);$/;"	c
X86_64AddrMode.s_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	case s_r(a: X86_64Xmmr, b: X86_64Gpr);$/;"	c
X86_64AddrMode.s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	case s_s(a: X86_64Xmmr, b: X86_64Xmmr);$/;"	c
X86_64AddrMode.s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	case s_s(a: X86_64Xmmr, b: X86_64Xmmr);$/;"	c
X86_64AddrMode.s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	case s_s(a: X86_64Xmmr, b: X86_64Xmmr);$/;"	c
X86_64AddrPatcher	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^class X86_64AddrPatcher(absMarker: int, relMarker: int) {$/;"	c
X86_64Assembler	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^class X86_64Assembler(w: DataWriter, OP_REX: byte) {$/;"	c
X86_64Assemblers	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^component X86_64Assemblers {$/;"	n
X86_64Cond	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^class X86_64Cond(name: string, index: int) {$/;"	c
X86_64Conds	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^component X86_64Conds {$/;"	n
X86_64DisVisitor	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^class X86_64DisVisitor {$/;"	c
X86_64Disassembler	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^class X86_64Disassembler(v: X86_64DisVisitor) {$/;"	c
X86_64Gpr	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^class X86_64Gpr extends X86_64Reg {$/;"	c
X86_64Label	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^class X86_64Label {$/;"	c
X86_64Labels	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^component X86_64Labels {$/;"	n
X86_64OP_name	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^def X86_64OP_name(code: int) -> string {$/;"	m
X86_64OP_r_rm	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^def X86_64OP_r_rm	= "\x03\x0B\x13\x1B\x23\x2B\x33\x3B";$/;"	d
X86_64OP_rax_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^def X86_64OP_rax_i	= "\x05\x0D\x15\x1D\x25\x2D\x35\x3D";$/;"	d
X86_64OP_rm_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^def X86_64OP_rm_r	= "\x01\x09\x11\x19\x21\x29\x31\x39";$/;"	d
X86_64Prefix	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^enum X86_64Prefix {$/;"	e
X86_64Reg	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^class X86_64Reg(regnum: byte) {$/;"	c
X86_64Regs	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^component X86_64Regs {$/;"	n
X86_64Rounding	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^enum X86_64Rounding(value: int) {$/;"	e
X86_64Xmmr	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^class X86_64Xmmr extends X86_64Reg {$/;"	c
X9	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	 X8,  X9, X10, X11,$/;"	d
XCASE	$VIRGIL_LOC/lib/term/Termios.v3	/^	XCASE   (0x0004), \/\/ preceedes all uppercase chars with '\'$/;"	d
XMM0	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def XMM0 = X86_64Xmmr.new("xmm0", 0);$/;"	d
XMM0	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def XMM0 = SSEReg.new("xmm0", 0);$/;"	d
XMM1	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def XMM1 = X86_64Xmmr.new("xmm1", 1);$/;"	d
XMM1	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def XMM1 = SSEReg.new("xmm1", 1);$/;"	d
XMM10	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def XMM10 = X86_64Xmmr.new("xmm10", 10);$/;"	d
XMM11	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def XMM11 = X86_64Xmmr.new("xmm11", 11);$/;"	d
XMM12	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def XMM12 = X86_64Xmmr.new("xmm12", 12);$/;"	d
XMM13	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def XMM13 = X86_64Xmmr.new("xmm13", 13);$/;"	d
XMM14	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def XMM14 = X86_64Xmmr.new("xmm14", 14);$/;"	d
XMM15	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def XMM15 = X86_64Xmmr.new("xmm15", 15);$/;"	d
XMM2	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def XMM2 = X86_64Xmmr.new("xmm2", 2);$/;"	d
XMM2	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def XMM2 = SSEReg.new("xmm2", 2);$/;"	d
XMM3	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def XMM3 = X86_64Xmmr.new("xmm3", 3);$/;"	d
XMM3	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def XMM3 = SSEReg.new("xmm3", 3);$/;"	d
XMM4	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def XMM4 = X86_64Xmmr.new("xmm4", 4);$/;"	d
XMM4	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def XMM4 = SSEReg.new("xmm4", 4);$/;"	d
XMM5	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def XMM5 = X86_64Xmmr.new("xmm5", 5);$/;"	d
XMM5	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def XMM5 = SSEReg.new("xmm5", 5);$/;"	d
XMM6	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def XMM6 = X86_64Xmmr.new("xmm6", 6);$/;"	d
XMM6	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def XMM6 = SSEReg.new("xmm6", 6);$/;"	d
XMM7	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def XMM7 = X86_64Xmmr.new("xmm7", 7);$/;"	d
XMM7	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def XMM7 = SSEReg.new("xmm7", 7);$/;"	d
XMM8	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def XMM8 = X86_64Xmmr.new("xmm8", 8);$/;"	d
XMM9	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def XMM9 = X86_64Xmmr.new("xmm9", 9);$/;"	d
XMMs	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def XMMs = [$/;"	d
[]	$VIRGIL_LOC/lib/file/csv/CsvParser.v3	/^	def [i: int] -> Range<string> { \/\/ XXX: range<string>$/;"	m
[]	$VIRGIL_LOC/lib/file/csv/CsvParser.v3	/^	def [i: int] -> Range<string> { \/\/ XXX: range<string>$/;"	m
[]	$VIRGIL_LOC/lib/file/csv/CsvParser.v3	/^	def [i: int] -> Range<string> { \/\/ XXX: range<string>$/;"	m
[]	$VIRGIL_LOC/lib/util/BitMatrix.v3	/^	def [col: int] -> bool {$/;"	m
[]	$VIRGIL_LOC/lib/util/BitMatrix.v3	/^	def [col: int] -> bool {$/;"	m
[]	$VIRGIL_LOC/lib/util/BitMatrix.v3	/^	def [row: int, col: int] -> bool {$/;"	m
[]	$VIRGIL_LOC/lib/util/BitMatrix.v3	/^	def [row: int, col: int] -> bool {$/;"	m
[]	$VIRGIL_LOC/lib/util/Map.v3	/^	def [key: K] -> V {$/;"	m
[]	$VIRGIL_LOC/lib/util/Map.v3	/^	def [key: K] -> V {$/;"	m
[]	$VIRGIL_LOC/lib/util/Map.v3	/^	def [key: K] -> V {$/;"	m
[]	$VIRGIL_LOC/lib/util/Map.v3	/^	def [key: K] -> V {$/;"	m
[]	$VIRGIL_LOC/lib/util/Map.v3	/^	def [key: K] -> V;$/;"	m
[]	$VIRGIL_LOC/lib/util/Map.v3	/^	def [key: K] -> V;$/;"	m
[]	$VIRGIL_LOC/lib/util/Vector.v3	/^	def [index: int] -> T {$/;"	m
[]	$VIRGIL_LOC/lib/util/Vector.v3	/^	def [index: int] -> T {$/;"	m
[]=	$VIRGIL_LOC/lib/util/BitMatrix.v3	/^	def [col: int] = val: bool {$/;"	m
[]=	$VIRGIL_LOC/lib/util/BitMatrix.v3	/^	def [col: int] = val: bool {$/;"	m
[]=	$VIRGIL_LOC/lib/util/BitMatrix.v3	/^	def [row: int, col: int] = val: bool {$/;"	m
[]=	$VIRGIL_LOC/lib/util/BitMatrix.v3	/^	def [row: int, col: int] = val: bool {$/;"	m
[]=	$VIRGIL_LOC/lib/util/Map.v3	/^	def [key: K] = val: V {$/;"	m
[]=	$VIRGIL_LOC/lib/util/Map.v3	/^	def [key: K] = val: V {$/;"	m
[]=	$VIRGIL_LOC/lib/util/Map.v3	/^	def [key: K] = val: V {$/;"	m
[]=	$VIRGIL_LOC/lib/util/Map.v3	/^	def [key: K] = val: V {$/;"	m
[]=	$VIRGIL_LOC/lib/util/Map.v3	/^	def [key: K] = val: V;$/;"	m
[]=	$VIRGIL_LOC/lib/util/Map.v3	/^	def [key: K] = val: V;$/;"	m
[]=	$VIRGIL_LOC/lib/util/Vector.v3	/^	def [index: int] = e: T {$/;"	m
[]=	$VIRGIL_LOC/lib/util/Vector.v3	/^	def [index: int] = e: T {$/;"	m
abs	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def abs(name: string, off: int) -> this {$/;"	m
abs	$VIRGIL_LOC/lib/util/Ints.v3	/^	def abs(a: int) -> u32 {$/;"	f
absMarker	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^class X86_64AddrPatcher(absMarker: int, relMarker: int) {$/;"	d
absolute	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def absolute() -> bool { return base == null && index == null; }$/;"	m
absolute	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def absolute() -> bool { return base == null && index == null; }$/;"	m
accept	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	def accept(sockfd: int, sockAddr: Array<byte>) -> NetResult<(int, int)> {$/;"	f
acceptExplicitWidth	$VIRGIL_LOC/lib/util/NumberParser.v3	/^	private def acceptExplicitWidth(c: byte) -> bool {$/;"	m
acceptFD	$VIRGIL_LOC/lib/util/NumberParser.v3	/^	private def acceptFD() -> bool {$/;"	m
acceptUIL	$VIRGIL_LOC/lib/util/NumberParser.v3	/^	private def acceptUIL() -> bool {$/;"	m
accept_message	$VIRGIL_LOC/lib/ic/ic0_untyped.v3	/^	def accept_message();						  			\/\/ F$/;"	f
accept_width	$VIRGIL_LOC/lib/util/NumberParser.v3	/^	var accept_width: bool;$/;"	d
acknum	$VIRGIL_LOC/lib/net/tcpip/Packets.v3	/^	+8	acknum:		u32;$/;"	d
acquire	$VIRGIL_LOC/lib/util/DataReader.v3	/^	def acquire(len: int) -> Range<byte> {$/;"	m
acquire	$VIRGIL_LOC/lib/util/DataWriter.v3	/^	def acquire(size: int) -> Range<byte> {$/;"	m
acquire	$VIRGIL_LOC/lib/util/StringBuilder.v3	/^	private def acquire(n: int) -> int {$/;"	m
actime	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+0	actime:		u64;$/;"	d
adc	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	def adc(rd: ArmReg, rn: ArmReg, op: ArmOperand) { data2_1(10, rd, rn, op); }$/;"	m
adc	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	var adc: X86Op2;$/;"	d
adc_m_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def adc_m_i(a: X86_64Addr, i: int) -> this    { emitop2_m_i(a, i, OP_REX, 2); }$/;"	m
adc_m_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def adc_m_r(a: X86_64Addr, b: X86_64Gpr) -> this { emitop2_m_r(a, b, OP_REX, 2); }$/;"	m
adc_r_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def adc_r_i(a: X86_64Gpr, i: int) -> this     { emitop2_r_i(a, i, OP_REX, 2); }$/;"	m
adc_r_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def adc_r_m(a: X86_64Gpr, b: X86_64Addr) -> this { emitop2_r_m(a, b, OP_REX, 2); }$/;"	m
adc_r_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def adc_r_r(a: X86_64Gpr, b: X86_64Gpr) -> this  { emitop2_r_r(a, b, OP_REX, 2); }$/;"	m
adcs	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	def adcs(rd: ArmReg, rn: ArmReg, op: ArmOperand) { data2_1(11, rd, rn, op); }$/;"	m
add	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	def add(rd: ArmReg, rn: ArmReg, op: ArmOperand) { data2_1(8, rd, rn, op); }$/;"	m
add	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	def add(rd: MipsReg, rs: MipsReg, rt: MipsReg)  { emit_r3(0x00000020, rd, rs, rt); }$/;"	m
add	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	var add: X86Op2;$/;"	d
add	$VIRGIL_LOC/lib/file/json/JsonParser.v3	/^	def add(key: string, v: JsonValue) -> this { entries[key] = v; } $/;"	m
add	$VIRGIL_LOC/lib/pdk/Header.v3	/^	def add(key: string, value: string) {$/;"	m
add	$VIRGIL_LOC/lib/util/Map.v3	/^	def add(key: K, val: V) { list = List.new(val, list); }$/;"	m
add	$VIRGIL_LOC/lib/util/Option.v3	/^	def add<T>(option: Option<T>) -> Option<T> {$/;"	m
add	$VIRGIL_LOC/lib/util/WorkQueue.v3	/^	def add<A, B>(func: A -> B, a: A) {$/;"	m
addDecDigit	$VIRGIL_LOC/lib/util/FpSketch.v3	/^	def addDecDigit(val: u32) -> this {$/;"	m
addPow2	$VIRGIL_LOC/lib/util/FpSketch.v3	/^	def addPow2(exp: int) -> this {$/;"	m
addRange	$VIRGIL_LOC/lib/util/FpSketch.v3	/^	def addRange(num: FpSketch, pos: int, maxPos: int) -> u32 {$/;"	m
addState	$VIRGIL_LOC/lib/util/GlobMatcher.v3	/^	private def addState(pos: int, vec: Vector<int>) {$/;"	m
addUtf16	$VIRGIL_LOC/lib/util/Utf8.v3	/^	private def addUtf16(buf: Vector<u16>, codepoint: u32) {$/;"	f
add_m_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def add_m_i(a: X86_64Addr, i: int) -> this    { emitop2_m_i(a, i, OP_REX, 0); }$/;"	m
add_m_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def add_m_r(a: X86_64Addr, b: X86_64Gpr) -> this { emitop2_m_r(a, b, OP_REX, 0); }$/;"	m
add_r_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def add_r_i(a: X86_64Gpr, i: int) -> this     { emitop2_r_i(a, i, OP_REX, 0); }$/;"	m
add_r_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def add_r_m(a: X86_64Gpr, b: X86_64Addr) -> this { emitop2_r_m(a, b, OP_REX, 0); }$/;"	m
add_r_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def add_r_r(a: X86_64Gpr, b: X86_64Gpr) -> this  { emitop2_r_r(a, b, OP_REX, 0); }$/;"	m
addd_r_r_r_ex_u3	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def addd_r_r_r_ex_u3(rd: Arm64Gpr, rn: Arm64Gpr, rm: Arm64Gpr, ex: DataRegExtend, imm: u3) -> this {$/;"	m
addd_r_r_r_sh_u5	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def addd_r_r_r_sh_u5(rd: Arm64Gpr, rn: Arm64Gpr, rm: Arm64Gpr, sh: RegShift, imm: u5) -> this {$/;"	m
addd_r_r_u12_u1	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def addd_r_r_u12_u1(rd: Arm64Gpr, rn: Arm64Gpr, imm: u12, lsl12: u1) -> this {$/;"	m
addi	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	def addi(rd: MipsReg, rs: MipsReg, imm: i16)    { emit_r2i(0x20000000, rd, rs, u16.!(imm)); }$/;"	m
addi	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	def addi(rd: RiscV64Gpr, rs: RiscV64Gpr, imm: i12) -> this { emit_i_type(7, rd, 3, rs, u12.view(imm)); }$/;"	m
addiu	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	def addiu(rd: MipsReg, rs: MipsReg, imm: u16)   { emit_r2i(0x24000000, rd, rs, imm); }$/;"	m
addpd_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def addpd_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
addps_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def addps_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
addq_r_r_r_ex_u3	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def addq_r_r_r_ex_u3(rd: Arm64Gpr, rn: Arm64Gpr, rm: Arm64Gpr, ex: DataRegExtend, imm: u3) -> this {$/;"	m
addq_r_r_r_sh_u6	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def addq_r_r_r_sh_u6(rd: Arm64Gpr, rn: Arm64Gpr, rm: Arm64Gpr, sh: RegShift, imm: u6) -> this {$/;"	m
addq_r_r_u12_u1	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def addq_r_r_u12_u1(rd: Arm64Gpr, rn: Arm64Gpr, imm: u12, lsl12: u1) -> this {$/;"	m
addr	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def addr(a: X86_64Addr, rex: byte) -> this {$/;"	m
addr	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	var addr: InetAddress;$/;"	d
addr	$VIRGIL_LOC/lib/util/DataReader.v3	/^	def addr() -> u64 {$/;"	m
addr	$VIRGIL_LOC/lib/util/DataWriter.v3	/^	def addr() -> int {$/;"	m
addr_end	$VIRGIL_LOC/lib/util/DataReader.v3	/^	def addr_end() -> u64 {$/;"	m
addr_end	$VIRGIL_LOC/lib/util/DataWriter.v3	/^	def addr_end() -> int {$/;"	m
addr_of	$VIRGIL_LOC/lib/util/DataReader.v3	/^	def addr_of(pos: int) -> u64 {$/;"	m
addr_of	$VIRGIL_LOC/lib/util/DataWriter.v3	/^	def addr_of(pos: int) -> int {$/;"	m
adds	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	def adds(rd: ArmReg, rn: ArmReg, op: ArmOperand) { data2_1(9, rd, rn, op); }$/;"	m
addsd	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def addsd(a: SSEReg, b: SSERm) { emitbbb_s_sm(0xF2, 0x0F, 0x58, a, b); }$/;"	m
addsd_s_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def addsd_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {$/;"	m
addsd_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def addsd_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
addss	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def addss(a: SSEReg, b: SSERm) { emitbbb_s_sm(0xF3, 0x0F, 0x58, a, b); }$/;"	m
addss_s_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def addss_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {$/;"	m
addss_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def addss_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
addu	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	def addu(rd: MipsReg, rs: MipsReg, rt: MipsReg) { emit_r3(0x00000021, rd, rs, rt); }$/;"	m
advance	$VIRGIL_LOC/lib/util/GlobMatcher.v3	/^	private def advance(pos: int, c: byte, vec: Vector<int>) {$/;"	m
advance	$VIRGIL_LOC/lib/util/TextReader.v3	/^	def advance(len: int) -> int {$/;"	m
advance1	$VIRGIL_LOC/lib/util/TextReader.v3	/^	def advance1() -> this {$/;"	m
aio_buf	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+24	aio_buf:	u64;$/;"	d
aio_data	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+0	aio_data:	u64;$/;"	d
aio_fildes	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+20	aio_fildes:	u32;$/;"	d
aio_flags	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+56	aio_flags:	u32;$/;"	d
aio_key	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+8	aio_key:	u32;$/;"	d
aio_lio_opcode	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+16	aio_lio_opcode:	u16;$/;"	d
aio_nbytes	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+32	aio_nbytes:	u64;$/;"	d
aio_offset	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+40	aio_offset:	i64;$/;"	d
aio_reqprio	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+18	aio_reqprio:	i16;$/;"	d
aio_resfd	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+60	aio_resfd:	u32;$/;"	d
aio_rw_flags	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+12	aio_rw_flags:	u32;$/;"	d
al	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	def al() -> this { cond = ArmCond.AL; }$/;"	m
alias	$VIRGIL_LOC/lib/util/DataWriter.v3	/^	def alias() -> Range<byte> {$/;"	m
align	$VIRGIL_LOC/lib/util/DataWriter.v3	/^	def align(size: int) -> this {$/;"	m
all	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def all = [EQ, NE, CS, CC, MI, PL, VS, VC, HI, LS, GE, LT, GT, LE, AL, NV];$/;"	d
all	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def all = [EQ, LT, LE, UNORD, NEQ, NLT, NLE, ORD];$/;"	d
all	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def all = [$/;"	d
allTrue	$VIRGIL_LOC/lib/util/Arrays.v3	/^	def allTrue<T>(x: Array<T>, y: Array<T>, cond: (T, T) -> bool) -> bool {$/;"	f
allTrue	$VIRGIL_LOC/lib/util/List.v3	/^	def allTrue<T>(a: List<T>, b: List<T>, cond: (T, T) -> bool) -> bool {$/;"	f
alloc	$VIRGIL_LOC/lib/pdk/Extism.v3	/^	def alloc(length : i64) -> i64;$/;"	f
allocate	$VIRGIL_LOC/lib/pdk/Host.v3	/^	def allocate(length: i64) -> Memory {$/;"	f
allocateBytes	$VIRGIL_LOC/lib/pdk/Host.v3	/^	def allocateBytes(bytes: Array<byte>) -> Memory {$/;"	f
allocateJsonValue	$VIRGIL_LOC/lib/pdk/Host.v3	/^	def allocateJsonValue(j: void) -> Memory {$/;"	f
allocateString	$VIRGIL_LOC/lib/pdk/Host.v3	/^	def allocateString(s: string) -> Memory {$/;"	f
and	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	def and(rd: ArmReg, rn: ArmReg, op: ArmOperand) { data2_1(0, rd, rn, op); }$/;"	m
and	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	def and(rd: MipsReg, rs: MipsReg, rt: MipsReg)  { emit_r3(0x00000014, rd, rs, rt); }$/;"	m
and	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	var and: X86Op2;$/;"	d
and	$VIRGIL_LOC/lib/util/BitMatrix.v3	/^	def and(that: BitMatrixRow) {$/;"	m
and_m_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def and_m_i(a: X86_64Addr, i: int) -> this    { emitop2_m_i(a, i, OP_REX, 4); }$/;"	m
and_m_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def and_m_r(a: X86_64Addr, b: X86_64Gpr) -> this { emitop2_m_r(a, b, OP_REX, 4); }$/;"	m
and_r_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def and_r_i(a: X86_64Gpr, i: int) -> this     { emitop2_r_i(a, i, OP_REX, 4); }$/;"	m
and_r_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def and_r_m(a: X86_64Gpr, b: X86_64Addr) -> this { emitop2_r_m(a, b, OP_REX, 4); }$/;"	m
and_r_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def and_r_r(a: X86_64Gpr, b: X86_64Gpr) -> this  { emitop2_r_r(a, b, OP_REX, 4); }$/;"	m
andb_m_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def andb_m_r(a: X86_64Addr, b: X86_64Gpr) -> this {$/;"	m
andd_m_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def andd_m_r(a: X86_64Addr, b: X86_64Gpr) -> this {$/;"	m
andd_r_r_r_sh_u5	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def andd_r_r_r_sh_u5(rd: Arm64Gpr, rn: Arm64Gpr, rm: Arm64Gpr, sh: RegShift, imm: u5) -> this {$/;"	m
andd_r_r_u12	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def andd_r_r_u12(rd: Arm64Gpr, rn: Arm64Gpr, imm: u12) -> this {$/;"	m
andi	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	def andi(rd: MipsReg, rs: MipsReg, imm: u16)    { emit_r2i(0x30000000, rd, rs, imm); }$/;"	m
andi	$VIRGIL_LOC/lib/util/BitMatrix.v3	/^	def andi(a: int) {$/;"	m
andnpd_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def andnpd_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
andnps_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def andnps_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
andpd	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def andpd(a: SSEReg, b: SSERm) { emitbbb_s_sm(0x66, 0x0F, 0x54, a, b); }$/;"	m
andpd_s_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def andpd_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {$/;"	m
andpd_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def andpd_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
andps	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def andps(a: SSEReg, b: SSERm) { emitbb_s_sm(0x0F, 0x54, a, b); }$/;"	m
andps_s_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def andps_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {$/;"	m
andps_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def andps_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
andq_m_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def andq_m_r(a: X86_64Addr, b: X86_64Gpr) -> this {$/;"	m
andq_r_r_i13	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def andq_r_r_i13(rd: Arm64Gpr, rn: Arm64Gpr, imm: i13) -> this {$/;"	m
andq_r_r_r_sh_u6	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def andq_r_r_r_sh_u6(rd: Arm64Gpr, rn: Arm64Gpr, rm: Arm64Gpr, sh: RegShift, imm: u6) -> this {$/;"	m
ands	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	def ands(rd: ArmReg, rn: ArmReg, op: ArmOperand) { data2_1(1, rd, rn, op); }$/;"	m
andw_m_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def andw_m_r(a: X86_64Addr, b: X86_64Gpr) -> this {$/;"	m
animate	$VIRGIL_LOC/lib/term/Animator.v3	/^class Animator(animate: u32 -> void, keypress: int -> void) {$/;"	d
anyTrue	$VIRGIL_LOC/lib/util/Arrays.v3	/^	def anyTrue<T>(x: Array<T>, y: Array<T>, cond: (T, T) -> bool) -> bool {$/;"	f
append	$VIRGIL_LOC/lib/util/Arrays.v3	/^	def append<T>(val: T, array: Array<T>) -> Array<T> {$/;"	f
apply	$VIRGIL_LOC/lib/util/BitMatrix.v3	/^	def apply<T>(row: int, func: (int, T) -> void, arg: T) {$/;"	m
apply	$VIRGIL_LOC/lib/util/List.v3	/^	def apply<T>(list: List<T>, func: T -> void) {$/;"	f
apply	$VIRGIL_LOC/lib/util/Map.v3	/^	def apply(func: (K, V) -> void);$/;"	m
apply	$VIRGIL_LOC/lib/util/Vector.v3	/^	def apply(f: T -> void) {$/;"	m
arr	$VIRGIL_LOC/lib/file/json/JsonParser.v3	/^	def arr(key: string, v: Array<JsonValue>) -> this { entries[key] = JsonValue.JArray(v); }$/;"	m
array	$VIRGIL_LOC/lib/util/Vector.v3	/^	var array: Array<T>;$/;"	d
as	$VIRGIL_LOC/lib/util/Poly.v3	/^	def as<A, B>(a: A) -> B { return B.!(a); }$/;"	f
asciiLt	$VIRGIL_LOC/lib/util/Strings.v3	/^	def asciiLt(a: string, b: string) -> bool {$/;"	f
asm	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^class X86Op2(asm: X86Assembler, operator: int) {$/;"	d
asrd_r_r_u5	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def asrd_r_r_u5(rd: Arm64Gpr, rn: Arm64Gpr, imm: u5) -> this {$/;"	m
asri	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	def asri(rd: ArmReg, rm: ArmReg, imm: u5) { mov(rd, ArmOperand.RegSarImm(rm, imm)); }$/;"	m
asrq_r_r_u6	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def asrq_r_r_u6(rd: Arm64Gpr, rn: Arm64Gpr, imm: u6) -> this {$/;"	m
asrr	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	def asrr(rd: ArmReg, rm: ArmReg, sh: ArmReg) { mov(rd, ArmOperand.RegSarReg(rm, sh)); }$/;"	m
at	$VIRGIL_LOC/lib/util/DataReader.v3	/^	def at(npos: int) -> this {$/;"	m
at	$VIRGIL_LOC/lib/util/DataWriter.v3	/^	def at(npos: int) -> this {$/;"	m
at	$VIRGIL_LOC/lib/util/TextReader.v3	/^	def at(npos: int, nline: int, ncol: int) -> this {$/;"	m
atEnd	$VIRGIL_LOC/lib/util/DataWriter.v3	/^	def atEnd() -> this {$/;"	m
atLimit	$VIRGIL_LOC/lib/util/DataReader.v3	/^	def atLimit() -> this {$/;"	m
atomChar	$VIRGIL_LOC/lib/util/Sexpr.v3	/^    def atomChar(b: byte) -> bool {$/;"	m
available	$VIRGIL_LOC/lib/util/DataReader.v3	/^	def available() -> int {$/;"	m
b_cond_i19	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def b_cond_i19(cond: Arm64Cond, imm: i19) -> this {$/;"	m
b_i26	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def b_i26(imm: i26) -> this {$/;"	m
balance	$VIRGIL_LOC/lib/util/Map.v3	/^	private def balance() {$/;"	m
base	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^class X86_64Addr(base: X86_64Gpr, index: X86_64Gpr, scale: byte, disp: int) {$/;"	d
base	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^class X86Addr(base: X86Reg, index: X86Reg, scale: byte, disp: int) extends X86Rm {$/;"	d
beginColumn	$VIRGIL_LOC/lib/util/Token.v3	/^class FilePoint(fileName: string, beginLine: int, beginColumn: int) {$/;"	d
beginLine	$VIRGIL_LOC/lib/util/Token.v3	/^class FilePoint(fileName: string, beginLine: int, beginColumn: int) {$/;"	d
beq	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	def beq(rs: MipsReg, rt: MipsReg, off: i16)  { emit_r2i(0x10000000, rs, rt, u16.!(off)); }$/;"	m
beql	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	def beql(rs: MipsReg, rt: MipsReg, off: i16) { emit_r2i(0x30000000, rs, rt, u16.!(off)); }$/;"	m
bgBlue	$VIRGIL_LOC/lib/term/Vt100.v3	/^	def bgBlue = esc("[0;44m");$/;"	d
bgCyan	$VIRGIL_LOC/lib/term/Vt100.v3	/^	def bgCyan = esc("[0;46m");$/;"	d
bgGreen	$VIRGIL_LOC/lib/term/Vt100.v3	/^	def bgGreen = esc("[0;42m");$/;"	d
bgMagenta	$VIRGIL_LOC/lib/term/Vt100.v3	/^	def bgMagenta = esc("[0;45m");$/;"	d
bgRed	$VIRGIL_LOC/lib/term/Vt100.v3	/^	def bgRed = esc("[0;41m");$/;"	d
bgWhite	$VIRGIL_LOC/lib/term/Vt100.v3	/^	def bgWhite = esc("[0;46m");$/;"	d
bgYellow	$VIRGIL_LOC/lib/term/Vt100.v3	/^	def bgYellow = esc("[0;43m");$/;"	d
bgez	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	def bgez(rs: MipsReg, off: i16)    { emit_r1(0x02010000, rs, u16.!(off)); }$/;"	m
bgezal	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	def bgezal(rs: MipsReg, off: i16)  { emit_r1(0x02110000, rs, u16.!(off)); }$/;"	m
bgezall	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	def bgezall(rs: MipsReg, off: i16) { emit_r1(0x02130000, rs, u16.!(off)); }$/;"	m
bgezl	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	def bgezl(rs: MipsReg, off: i16)   { emit_r1(0x02030000, rs, u16.!(off)); }$/;"	m
bgtz	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	def bgtz(rs: MipsReg, off: i16)    { emit_r1(0x1b000000, rs, u16.!(off)); }$/;"	m
bgtzl	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	def bgtzl(rs: MipsReg, off: i16)   { emit_r1(0x3b000000, rs, u16.!(off)); }$/;"	m
binarySearchEq	$VIRGIL_LOC/lib/util/Ranges.v3	/^	def binarySearchEq<T>(range: Range<T>, val: T, lt: (T, T) -> bool) -> int {$/;"	f
binarySearchGtEq	$VIRGIL_LOC/lib/util/Ranges.v3	/^	def binarySearchGtEq<T>(range: Range<T>, val: T, lt: (T, T) -> bool) -> int {$/;"	f
binarySearchLtEq	$VIRGIL_LOC/lib/util/Ranges.v3	/^	def binarySearchLtEq<T>(range: Range<T>, val: T, lt: (T, T) -> bool) -> int {$/;"	f
bind	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def bind(label: X86_64Label) {$/;"	m
bind	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	private def bind() -> NetResult<void> {$/;"	m
bind	$VIRGIL_LOC/lib/util/Functions.v3	/^	def bind<A, B>(func: A -> B, a: A) -> void -> B {$/;"	f
bits	$VIRGIL_LOC/lib/util/BitMatrix.v3	/^	private var bits = Array<int>.new(numrows * width); \/\/ array that stores the data$/;"	d
bl	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	def bl(cond: ArmCond, off: i24) {$/;"	m
bl_i26	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def bl_i26(imm: i26) -> this {$/;"	m
blez	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	def blez(rs: MipsReg, off: i16)    { emit_r1(0x18000000, rs, u16.!(off)); }$/;"	m
blezl	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	def blezl(rs: MipsReg, off: i16)   { emit_r1(0x38000000, rs, u16.!(off)); }$/;"	m
blr	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def blr(rn: Arm64Gpr) -> this {$/;"	m
bltz	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	def bltz(rs: MipsReg, off: i16)    { emit_r1(0x38000000, rs, u16.!(off)); }$/;"	m
bltzal	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	def bltzal(rs: MipsReg, off: i16)  { emit_r1(0x04100000, rs, u16.!(off)); }$/;"	m
bltzall	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	def bltzall(rs: MipsReg, off: i16) { emit_r1(0x04120000, rs, u16.!(off)); }$/;"	m
bltzl	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	def bltzl(rs: MipsReg, off: i16)   { emit_r1(0x42020000, rs, u16.!(off)); }$/;"	m
bne	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	def bne(rs: MipsReg, rt: MipsReg, off: i16) { emit_r2i(0x14000000, rs, rt, u16.!(off)); }$/;"	m
bnel	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	def bnel(rs: MipsReg, rt: MipsReg, off: i16) { emit_r2i(0x54000000, rs, rt, u16.!(off)); }$/;"	m
body	$VIRGIL_LOC/lib/pdk/Http.v3	/^	var body: Memory;$/;"	d
boo	$VIRGIL_LOC/lib/file/json/JsonParser.v3	/^	def boo(key: string, v: bool) -> this { entries[key] = JsonValue.Bool(v); }$/;"	m
bound	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def bound() -> bool { return pos >= 0; }$/;"	m
br	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def br(rn: Arm64Gpr) -> this {$/;"	m
brk	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	def brk(code: u20) { w.put_b32be(0x0000000d | int.view(code) << 6); }$/;"	m
bsf_r_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def bsf_r_m(a: X86_64Gpr, b: X86_64Addr) -> this {$/;"	m
bsf_r_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def bsf_r_r(a: X86_64Gpr, b: X86_64Gpr) -> this {$/;"	m
bsr	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def bsr(a: X86Reg, b: X86Rm) { emitbb_rm(0x0f, 0xBD, b, a.index); }$/;"	m
bsr_r_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def bsr_r_m(a: X86_64Gpr, b: X86_64Addr) -> this {$/;"	m
bsr_r_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def bsr_r_r(a: X86_64Gpr, b: X86_64Gpr) -> this {$/;"	m
bswap	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def bswap(a: X86Reg) { emitbb(0x0F, 0xC8 + a.index); }$/;"	m
bswap_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def bswap_r(a: X86_64Gpr) -> this {$/;"	m
btr_m_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def btr_m_i(a: X86_64Addr, imm: u6) -> this {$/;"	m
btr_r_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def btr_r_i(a: X86_64Gpr, imm: u6) -> this {$/;"	m
buf	$VIRGIL_LOC/lib/util/StringBuilder.v3	/^	def var buf: Array<byte>; \/\/ TODO: keep private$/;"	d
buf	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+0	buf:	u64\/*:Pointer*\/;$/;"	d
bufferram	$VIRGIL_LOC/lib/wasm-linux/WaliLayouts.v3	/^        +56     bufferram:      u64;$/;"	d
bufferram	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^        +56     bufferram:      u64;$/;"	d
bufsz	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+8	bufsz:	u64;$/;"	d
build	$VIRGIL_LOC/lib/file/json/JsonParser.v3	/^	def build() -> JsonValue.JObject { return JsonValue.JObject(entries); }$/;"	m
buildString	$VIRGIL_LOC/lib/util/Sexpr.v3	/^    def buildString(buf: StringBuilder) {$/;"	m
builderOf	$VIRGIL_LOC/lib/util/Strings.v3	/^	def builderOf(str: string) -> StringBuilder {$/;"	f
bytes	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def bytes() -> this {$/;"	m
c_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def c_i(name: string, cond: X86_64Cond, i: int) -> this {$/;"	m
c_lab	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def c_lab(name: string, cond: X86_64Cond, label: X86_64Label) -> this {$/;"	m
c_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def c_m(name: string, cond: X86_64Cond, a: X86_64Addr, rex: byte) -> this {$/;"	m
c_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def c_r(name: string, cond: X86_64Cond, a: X86_64Gpr, rex: byte) -> this {$/;"	m
c_r_lab	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def c_r_lab(name: string, cond: X86_64Cond, a: X86_64Gpr, label: X86_64Label, rex: byte) -> this {$/;"	m
c_r_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def c_r_m(name: string, cond: X86_64Cond, a: X86_64Gpr, b: X86_64Addr, rex: byte) -> this {$/;"	m
c_r_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def c_r_r(name: string, cond: X86_64Cond, a: X86_64Gpr, b: X86_64Gpr, rex: byte) -> this {$/;"	m
cache	$VIRGIL_LOC/lib/util/Map.v3	/^	private var cache: Bucket<K, V>;	\/\/ cache for last entry get\/set$/;"	d
call	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def call(off: int) { emitbd(0xE8, off); } \/\/ relative call$/;"	m
call_cycles_add	$VIRGIL_LOC/lib/ic/ic0_untyped.v3	/^	def call_cycles_add(amount: i64);							\/\/ U Ry Rt T$/;"	f
call_cycles_add128	$VIRGIL_LOC/lib/ic/ic0_untyped.v3	/^	def call_cycles_add128(amount_high: i64, amount_low: i64);				\/\/ U Ry Rt T$/;"	f
call_data_append	$VIRGIL_LOC/lib/ic/ic0_untyped.v3	/^	def call_data_append(src: i32, size: i32);						\/\/ U Ry Rt T$/;"	f
call_new	$VIRGIL_LOC/lib/ic/ic0_untyped.v3	/^	def call_new(										\/\/ U Ry Rt T$/;"	f
call_on_cleanup	$VIRGIL_LOC/lib/ic/ic0_untyped.v3	/^	def call_on_cleanup(func: i32, env: i32);						\/\/ U Ry Rt T$/;"	f
call_perform	$VIRGIL_LOC/lib/ic/ic0_untyped.v3	/^	def call_perform() -> i32;								\/\/ U Ry Rt T$/;"	f
call_rel_far	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def call_rel_far(label: X86_64Label) -> this {$/;"	m
calld	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def calld(off: int) -> this {$/;"	m
calld	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def calld(off: int) { emitbd(0x9A, off); } \/\/ direct call$/;"	m
calld_addr	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def calld_addr(m: X86_64Addr) -> this {$/;"	m
callr	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def callr(off: int) -> this {$/;"	m
callr_abs	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def callr_abs(off: int, abs: int) {$/;"	m
callr_addr	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def callr_addr(m: X86_64Addr) -> this {$/;"	m
canister_cycle_balance	$VIRGIL_LOC/lib/ic/ic0_untyped.v3	/^	def canister_cycle_balance() -> i64;							\/\/ *$/;"	f
canister_cycle_balance128	$VIRGIL_LOC/lib/ic/ic0_untyped.v3	/^	def canister_cycle_balance128(dst: i32);						\/\/ *$/;"	f
canister_self_copy	$VIRGIL_LOC/lib/ic/ic0_untyped.v3	/^	def canister_self_copy(dst: i32, offset: i32, size: i32);				\/\/ *$/;"	f
canister_self_size	$VIRGIL_LOC/lib/ic/ic0_untyped.v3	/^	def canister_self_size() -> i32;							\/\/ *$/;"	f
canister_status	$VIRGIL_LOC/lib/ic/ic0_untyped.v3	/^	def canister_status() -> i32;								\/\/ *$/;"	f
canister_version	$VIRGIL_LOC/lib/ic/ic0_untyped.v3	/^	def canister_version() -> i64;								\/\/ *  $/;"	f
cast	$VIRGIL_LOC/lib/util/Functions.v3	/^def cast<F, T>(val: F) -> T {$/;"	m
cast	$VIRGIL_LOC/lib/util/StringBuilder.v3	/^def cast<F, T>(p: F) -> T {$/;"	m
cast	$VIRGIL_LOC/lib/util/Types.v3	/^	def cast<B>(v: B) -> T { return T.!<B>(v); }$/;"	m
cbnz_r_i19	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def cbnz_r_i19(rt: Arm64Gpr, imm: i19, width: DataWidth) -> this {$/;"	m
cbz_r_i19	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def cbz_r_i19(rt: Arm64Gpr, imm: i19, width: DataWidth) -> this {$/;"	m
cc	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	def cc() -> this { cond = ArmCond.CC; }$/;"	m
cc	$VIRGIL_LOC/lib/term/Termios.v3	/^	+20	cc:		byte[32];$/;"	d
cdq	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def cdq() -> this {$/;"	m
cdq	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def cdq() { emitb(0x99); } \/\/ convert doubleword to quadword$/;"	m
cells	$VIRGIL_LOC/lib/file/csv/CsvParser.v3	/^	private var cells = Vector<string>.new();$/;"	d
center	$VIRGIL_LOC/lib/util/StringBuilder.v3	/^	def center(ch: byte, nchars: int, len: int) -> this {$/;"	m
certified_data_set	$VIRGIL_LOC/lib/ic/ic0_untyped.v3	/^	def certified_data_set(src: i32, size: i32);						\/\/ I G U Ry Rt T$/;"	f
cflag	$VIRGIL_LOC/lib/term/Termios.v3	/^	+8	cflag:		u32;$/;"	d
char	$VIRGIL_LOC/lib/util/TextReader.v3	/^	def var char: byte;			\/\/ current byte$/;"	d
checkAbs	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	private def checkAbs(m: X86_64Addr) -> int {$/;"	m
checkN	$VIRGIL_LOC/lib/util/DataReader.v3	/^	def checkN(length: int) -> bool {$/;"	m
check_leb_ext	$VIRGIL_LOC/lib/util/DataReader.v3	/^	private def check_leb_ext(b: byte, signed: bool, shift: u3, msg: string) {$/;"	m
checksum	$VIRGIL_LOC/lib/net/tcpip/Packets.v3	/^	+6	checksum:	u16;$/;"	d
child_tid	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+16	child_tid:	u64;$/;"	d
clear	$VIRGIL_LOC/lib/util/BitMatrix.v3	/^	def clear(row: int, col: int) -> bool {$/;"	m
clear	$VIRGIL_LOC/lib/util/DataWriter.v3	/^	def clear() -> this {$/;"	m
clear	$VIRGIL_LOC/lib/util/Stack.v3	/^	def clear() {$/;"	m
clear	$VIRGIL_LOC/lib/util/Vector.v3	/^	def clear() -> this {$/;"	m
clearRow	$VIRGIL_LOC/lib/util/BitMatrix.v3	/^	def clearRow(row: int) {$/;"	m
clone_args	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^layout clone_args {$/;"	l
close	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	def close() {$/;"	m
closure	$VIRGIL_LOC/lib/util/Functions.v3	/^def closure<A, B>(func: A -> B, a: A, v: void) -> B {$/;"	m
closure	$VIRGIL_LOC/lib/util/WorkQueue.v3	/^def closure<A, B>(func: A -> B, a: A, v: void) { func(a); }$/;"	m
cmn	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	def cmn(rn: ArmReg, op: ArmOperand) { data2_0(23, rn, op); }$/;"	m
cmnd_r_r_ex_u3	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def cmnd_r_r_ex_u3(rn: Arm64Gpr, rm: Arm64Gpr, ex: DataRegExtend, imm: u3) -> this {$/;"	m
cmnd_r_r_sh_u5	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def cmnd_r_r_sh_u5(rn: Arm64Gpr, rm: Arm64Gpr, sh: RegShift, imm: u5) -> this {$/;"	m
cmnd_r_u12_u1	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def cmnd_r_u12_u1(rn: Arm64Gpr, imm: u12, lsl12: u1) -> this {$/;"	m
cmnq_r_r_ex_u3	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def cmnq_r_r_ex_u3(rn: Arm64Gpr, rm: Arm64Gpr, ex: DataRegExtend, imm: u3) -> this {$/;"	m
cmnq_r_r_sh_u6	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def cmnq_r_r_sh_u6(rn: Arm64Gpr, rm: Arm64Gpr, sh: RegShift, imm: u6) -> this {$/;"	m
cmnq_r_u12_u1	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def cmnq_r_u12_u1(rn: Arm64Gpr, imm: u12, lsl12: u1) -> this {$/;"	m
cmov	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	private def cmov(a: X86Reg, b: X86Rm, sop: int) { emitbb_rm(0x0f, sop, b, a.index); }$/;"	m
cmov_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def cmov_m(cond: X86_64Cond, a: X86_64Gpr, b: X86_64Addr) -> this {$/;"	m
cmov_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def cmov_r(cond: X86_64Cond, a: X86_64Gpr, b: X86_64Gpr) -> this {$/;"	m
cmova	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def cmova (a: X86Reg, b: X86Rm) { cmov(a, b, 0x47); }$/;"	m
cmovc	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def cmovc (a: X86Reg, b: X86Rm) { cmov(a, b, 0x42); }$/;"	m
cmovg	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def cmovg (a: X86Reg, b: X86Rm) { cmov(a, b, 0x4F); }$/;"	m
cmovge	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def cmovge(a: X86Reg, b: X86Rm) { cmov(a, b, 0x4D); }$/;"	m
cmovl	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def cmovl (a: X86Reg, b: X86Rm) { cmov(a, b, 0x4C); }$/;"	m
cmovle	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def cmovle(a: X86Reg, b: X86Rm) { cmov(a, b, 0x4E); }$/;"	m
cmovna	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def cmovna(a: X86Reg, b: X86Rm) { cmov(a, b, 0x46); }$/;"	m
cmovnc	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def cmovnc(a: X86Reg, b: X86Rm) { cmov(a, b, 0x43); }$/;"	m
cmovno	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def cmovno(a: X86Reg, b: X86Rm) { cmov(a, b, 0x41); }$/;"	m
cmovnp	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def cmovnp(a: X86Reg, b: X86Rm) { cmov(a, b, 0x4B); }$/;"	m
cmovns	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def cmovns(a: X86Reg, b: X86Rm) { cmov(a, b, 0x49); }$/;"	m
cmovnz	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def cmovnz(a: X86Reg, b: X86Rm) { cmov(a, b, 0x45); }$/;"	m
cmovo	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def cmovo (a: X86Reg, b: X86Rm) { cmov(a, b, 0x40); }$/;"	m
cmovp	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def cmovp (a: X86Reg, b: X86Rm) { cmov(a, b, 0x4A); }$/;"	m
cmovs	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def cmovs (a: X86Reg, b: X86Rm) { cmov(a, b, 0x48); }$/;"	m
cmovx	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def cmovx(cond: X86Cond, a: X86Reg, b: X86Rm) { cmov(a, b, 0x40 + cond.index); }$/;"	m
cmovz	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def cmovz (a: X86Reg, b: X86Rm) { cmov(a, b, 0x44); }$/;"	m
cmp	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	def cmp(rn: ArmReg, op: ArmOperand) { data2_0(21, rn, op); }$/;"	m
cmp	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	var cmp: X86Op2;$/;"	d
cmp	$VIRGIL_LOC/lib/file/json/JsonParser.v3	/^	def cmp: (K, K) -> bool;$/;"	d
cmp_entries	$VIRGIL_LOC/lib/file/json/JsonParser.v3	/^	private def cmp_entries(a: (K, V), b: (K, V)) -> bool {$/;"	m
cmp_m_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def cmp_m_i(a: X86_64Addr, i: int) -> this    { emitop2_m_i(a, i, OP_REX, 7); }$/;"	m
cmp_m_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def cmp_m_r(a: X86_64Addr, b: X86_64Gpr) -> this { emitop2_m_r(a, b, OP_REX, 7); }$/;"	m
cmp_r_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def cmp_r_i(a: X86_64Gpr, i: int) -> this     { emitop2_r_i(a, i, OP_REX, 7); }$/;"	m
cmp_r_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def cmp_r_m(a: X86_64Gpr, b: X86_64Addr) -> this { emitop2_r_m(a, b, OP_REX, 7); }$/;"	m
cmp_r_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def cmp_r_r(a: X86_64Gpr, b: X86_64Gpr) -> this  { emitop2_r_r(a, b, OP_REX, 7); }$/;"	m
cmpb_m_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def cmpb_m_i(a: X86_64Addr, i: int\/*XXX:byte*\/) -> this { \/\/ XXX: factor out common routine$/;"	m
cmpb_m_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def cmpb_m_r(a: X86_64Addr, b: X86_64Gpr) -> this {  \/\/ XXX: factor out common routine$/;"	m
cmpb_r_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def cmpb_r_i(a: X86_64Gpr, i: int\/*XXX:byte*\/) -> this { \/\/ XXX: factor out common routine$/;"	m
cmpb_r_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def cmpb_r_m(a: X86_64Gpr, b: X86_64Addr) -> this {  \/\/ XXX: factor out common routine$/;"	m
cmpb_r_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def cmpb_r_r(a: X86_64Gpr, b: X86_64Gpr) -> this  {  \/\/ XXX: factor out common routine$/;"	m
cmpd_r_r_ex_u3	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def cmpd_r_r_ex_u3(rn: Arm64Gpr, rm: Arm64Gpr, ex: DataRegExtend, imm: u3) -> this {$/;"	m
cmpd_r_r_sh_u5	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def cmpd_r_r_sh_u5(rn: Arm64Gpr, rm: Arm64Gpr, sh: RegShift, imm: u5) -> this {$/;"	m
cmpd_r_u12_u1	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def cmpd_r_u12_u1(rn: Arm64Gpr, imm: u12, lsl12: u1) -> this {$/;"	m
cmpeqpd_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def cmpeqpd_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
cmpeqps_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def cmpeqps_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
cmpeqsd	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def cmpeqsd(a: SSEReg, b: SSERm) { cmpsd(a, b, 0x0); }$/;"	m
cmpeqss	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def cmpeqss(a: SSEReg, b: SSERm) { cmpss(a, b, 0x0); }$/;"	m
cmplepd_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def cmplepd_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
cmpleps_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def cmpleps_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
cmplesd	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def cmplesd(a: SSEReg, b: SSERm) { cmpsd(a, b, 0x2); }$/;"	m
cmpless	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def cmpless(a: SSEReg, b: SSERm) { cmpss(a, b, 0x2); }$/;"	m
cmpltpd_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def cmpltpd_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
cmpltps_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def cmpltps_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
cmpltsd	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def cmpltsd(a: SSEReg, b: SSERm) { cmpsd(a, b, 0x1); }$/;"	m
cmpltss	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def cmpltss(a: SSEReg, b: SSERm) { cmpss(a, b, 0x1); }$/;"	m
cmpneqpd_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def cmpneqpd_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
cmpneqps_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def cmpneqps_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
cmpneqsd	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def cmpneqsd(a: SSEReg, b: SSERm) { cmpsd(a, b, 0x4); }$/;"	m
cmpneqss	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def cmpneqss(a: SSEReg, b: SSERm) { cmpss(a, b, 0x4); }$/;"	m
cmpnlesd	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def cmpnlesd(a: SSEReg, b: SSERm) { cmpsd(a, b, 0x6); }$/;"	m
cmpnless	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def cmpnless(a: SSEReg, b: SSERm) { cmpss(a, b, 0x6); }$/;"	m
cmpnltsd	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def cmpnltsd(a: SSEReg, b: SSERm) { cmpsd(a, b, 0x5); }$/;"	m
cmpnltss	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def cmpnltss(a: SSEReg, b: SSERm) { cmpss(a, b, 0x5); }$/;"	m
cmpordsd	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def cmpordsd(a: SSEReg, b: SSERm) { cmpsd(a, b, 0x7); }$/;"	m
cmpordss	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def cmpordss(a: SSEReg, b: SSERm) { cmpss(a, b, 0x7); }$/;"	m
cmppd_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def cmppd_s_s(cmp: SSECmp, a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
cmpps_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def cmpps_s_s(cmp: SSECmp, a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
cmpq_r_r_ex_u3	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def cmpq_r_r_ex_u3(rn: Arm64Gpr, rm: Arm64Gpr, ex: DataRegExtend, imm: u3) -> this {$/;"	m
cmpq_r_r_sh_u6	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def cmpq_r_r_sh_u6(rn: Arm64Gpr, rm: Arm64Gpr, sh: RegShift, imm: u6) -> this {$/;"	m
cmpq_r_u12_u1	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def cmpq_r_u12_u1(rn: Arm64Gpr, imm: u12, lsl12: u1) -> this {$/;"	m
cmpsd	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	private def cmpsd(a: SSEReg, b: SSERm, c: byte) {$/;"	m
cmpsd_s_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def cmpsd_s_m(cmp: SSECmp, a: X86_64Xmmr, b: X86_64Addr) -> this {$/;"	m
cmpsd_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def cmpsd_s_s(cmp: SSECmp, a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
cmpss	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	private def cmpss(a: SSEReg, b: SSERm, c: byte) {$/;"	m
cmpss_s_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def cmpss_s_m(cmp: SSECmp, a: X86_64Xmmr, b: X86_64Addr) -> this {$/;"	m
cmpss_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def cmpss_s_s(cmp: SSECmp, a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
cmpunordpd_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def cmpunordpd_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
cmpunordps_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def cmpunordps_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
cmpunordsd	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def cmpunordsd(a: SSEReg, b: SSERm) { cmpsd(a, b, 0x3); }$/;"	m
cmpunordss	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def cmpunordss(a: SSEReg, b: SSERm) { cmpss(a, b, 0x3); }$/;"	m
cmpxchg_m_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def cmpxchg_m_r(b: X86_64Addr, a: X86_64Gpr) -> this {$/;"	m
cmpxchg_r_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def cmpxchg_r_r(b: X86_64Gpr, a: X86_64Gpr) -> this {$/;"	m
cmpxchgb_m_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def cmpxchgb_m_r(b: X86_64Addr, a: X86_64Gpr) -> this {$/;"	m
cmpxchgb_r_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def cmpxchgb_r_r(b: X86_64Gpr, a: X86_64Gpr) -> this {$/;"	m
cmpxchgw_m_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def cmpxchgw_m_r(b: X86_64Addr, a: X86_64Gpr) -> this {$/;"	m
cmpxchgw_r_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def cmpxchgw_r_r(b: X86_64Gpr, a: X86_64Gpr) -> this {$/;"	m
cmpxchngb	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def cmpxchngb(b: X86Rm, a: X86Reg) { emitbb_rm(0x0F, 0xB0, b, a.index); } \/\/ compare and exchange byte$/;"	m
cmpxchngd	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def cmpxchngd(b: X86Rm, a: X86Reg) { emitbb_rm(0x0F, 0xB1, b, a.index); } \/\/ compare and exchange doubleword$/;"	m
cmpxchngw	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def cmpxchngw(b: X86Rm, a: X86Reg) { \/\/ compare and exchange word$/;"	m
code	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^enum ElfType(code: u16) {$/;"	d
code	$VIRGIL_LOC/lib/term/Termios.v3	/^enum TermiosControlChar(code: u5) {$/;"	d
code	$VIRGIL_LOC/lib/util/Ints.v3	/^enum IntParseResult(code: int) {$/;"	d
col	$VIRGIL_LOC/lib/packing/CiRuntime.v3	/^	case LineCol(line: u11, col: u8) 	#packing 0b_0lll_llllllll_cccccccc;$/;"	d
collect	$VIRGIL_LOC/lib/file/json/JsonParser.v3	/^	def collect(k: K, v: V) { pairs.put((k, v)); }$/;"	m
column	$VIRGIL_LOC/lib/util/TextReader.v3	/^	def var column: int;			\/\/ current column$/;"	d
columns	$VIRGIL_LOC/lib/file/csv/CsvParser.v3	/^	def columns: Array<string>;	\/\/ names of all columns$/;"	d
com	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def com(a: Arm64Cond, b: Arm64Cond) { a.commute = b; b.commute = a; }$/;"	f
com	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def com(a: X86_64Cond, b: X86_64Cond) {$/;"	f
com	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def com(a: X86Cond, b: X86Cond) {$/;"	f
comment	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def comment(s: string) -> this {$/;"	m
commute	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	def commute() -> ArmCond {$/;"	m
commute	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	var commute: Arm64Cond;$/;"	d
commute	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	var commute: X86_64Cond;$/;"	d
commute	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	var commute: X86Cond;$/;"	d
commute	$VIRGIL_LOC/lib/util/Functions.v3	/^	def commute<A, B, R>(f: (A, B) -> R) -> (B, A) -> R {$/;"	f
commute0	$VIRGIL_LOC/lib/util/Functions.v3	/^def commute0<A, B, R>(f: (A, B) -> R, b: B, a: A) -> R {$/;"	m
computeShortest	$VIRGIL_LOC/lib/util/Floats.v3	/^	def computeShortest(a: u32, b: u32, c: u32, digit: u32,$/;"	f
concat	$VIRGIL_LOC/lib/util/Arrays.v3	/^	def concat<T>(a: Array<T>, b: Array<T>) -> Array<T> {$/;"	f
cond	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	private var cond: ArmCond = ArmCond.AL;$/;"	d
cond	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def cond(cond: X86_64Cond) -> this {$/;"	m
config_get	$VIRGIL_LOC/lib/pdk/Extism.v3	/^	def config_get(offset : i64) -> i64;$/;"	f
connect	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	def connect(sockfd: int, sockAddr: Array<byte>) -> NetResult<void> {$/;"	f
cons1	$VIRGIL_LOC/lib/util/List.v3	/^	def cons1<T>(elem1: T) -> List<T> {$/;"	f
cons2	$VIRGIL_LOC/lib/util/List.v3	/^	def cons2<T>(elem1: T, elem2: T) -> List<T> {$/;"	f
cons3	$VIRGIL_LOC/lib/util/List.v3	/^	def cons3<T>(elem1: T, elem2: T, elem3: T) -> List<T> {$/;"	f
consumeNext	$VIRGIL_LOC/lib/util/Option.v3	/^	var consumeNext: bool;		\/\/ if true, consume the next argument$/;"	d
contains	$VIRGIL_LOC/lib/util/Arrays.v3	/^	def contains<T>(array: Array<T>, element: T) -> bool {$/;"	f
contains	$VIRGIL_LOC/lib/util/Token.v3	/^	def contains(line: int, column: int) -> bool {$/;"	m
convertToFloatingDecimal	$VIRGIL_LOC/lib/util/Floats.v3	/^	def convertToFloatingDecimal(exponent: u32, mantissa: u32) -> (u32, int) {$/;"	f
copy	$VIRGIL_LOC/lib/util/Arrays.v3	/^	def copy<T>(src: Array<T>, dst: Array<T>) -> Array<T> {$/;"	f
copy	$VIRGIL_LOC/lib/util/BitMatrix.v3	/^	def copy(that: BitMatrixRow) {$/;"	m
copy	$VIRGIL_LOC/lib/util/DataWriter.v3	/^	def copy() -> Array<byte> {$/;"	m
copy	$VIRGIL_LOC/lib/util/Token.v3	/^	def copy(image: string) -> Token {$/;"	m
copy	$VIRGIL_LOC/lib/util/Vector.v3	/^	def copy() -> Array<T> {$/;"	m
copyInto	$VIRGIL_LOC/lib/util/Arrays.v3	/^	def copyInto<T>(src: Array<T>, dst: Array<T>, destIndex: int) {$/;"	f
copyInto	$VIRGIL_LOC/lib/util/FpSketch.v3	/^	def copyInto(d: FpSketch) -> FpSketch {$/;"	m
copyi	$VIRGIL_LOC/lib/util/BitMatrix.v3	/^	def copyi(a: int) {$/;"	m
count	$VIRGIL_LOC/lib/packing/CiRuntime.v3	/^	case Repeated(ex: u4, count: u4, framewords: u20)	#packing 0b_11111111_11111111_1111eeee_ccccffff_ffffffff_ffffffff;$/;"	d
count	$VIRGIL_LOC/lib/util/BitMatrix.v3	/^	def count(row: int) -> int {$/;"	m
cpu	$VIRGIL_LOC/lib/term/Animator.v3	/^	var cpu: u32;  \/\/ CPU load due to animation; 1000 = 100%$/;"	d
cqo	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def cqo() -> this {$/;"	m
create	$VIRGIL_LOC/lib/util/Map.v3	/^	def create: K -> V;$/;"	d
create32	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def create32(w: DataWriter) -> X86_64Assembler {$/;"	f
create64	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def create64(w: DataWriter) -> X86_64Assembler {$/;"	f
cs	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	def cs() -> this { cond = ArmCond.CS; }$/;"	m
csp	$VIRGIL_LOC/lib/util/StringBuilder.v3	/^	def csp() -> this {$/;"	m
curByte	$VIRGIL_LOC/lib/util/NumberParser.v3	/^	var curByte: byte;$/;"	d
cvtdq2pd_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def cvtdq2pd_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
cvtdq2ps_s_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def cvtdq2ps_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {$/;"	m
cvtdq2ps_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def cvtdq2ps_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
cvtpd2ps_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def cvtpd2ps_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
cvtps2pd_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def cvtps2pd_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
cvtsd2si	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def cvtsd2si(a: X86Reg, b: SSERm) {$/;"	m
cvtsd2si_r_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def cvtsd2si_r_m(a: X86_64Gpr, b: X86_64Addr) -> this {$/;"	m
cvtsd2si_r_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def cvtsd2si_r_s(a: X86_64Gpr, b: X86_64Xmmr) -> this {$/;"	m
cvtsd2ss	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def cvtsd2ss(a: SSEReg, b: SSERm) { emitbbb_s_sm(0xF2, 0x0F, 0x5A, a, b); }$/;"	m
cvtsd2ss_s_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def cvtsd2ss_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {$/;"	m
cvtsd2ss_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def cvtsd2ss_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
cvtsi2sd	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def cvtsi2sd(a: SSEReg, b: X86Rm) {$/;"	m
cvtsi2sd_s_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def cvtsi2sd_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {$/;"	m
cvtsi2sd_s_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def cvtsi2sd_s_r(a: X86_64Xmmr, b: X86_64Reg) -> this {$/;"	m
cvtsi2ss	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def cvtsi2ss(a: SSEReg, b: X86Rm) {$/;"	m
cvtsi2ss_s_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def cvtsi2ss_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {$/;"	m
cvtsi2ss_s_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def cvtsi2ss_s_r(a: X86_64Xmmr, b: X86_64Reg) -> this {$/;"	m
cvtss2sd	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def cvtss2sd(a: SSEReg, b: SSERm) { emitbbb_s_sm(0xF3, 0x0F, 0x5A, a, b); }$/;"	m
cvtss2sd_s_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def cvtss2sd_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {$/;"	m
cvtss2sd_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def cvtss2sd_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
cvtss2si	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def cvtss2si(a: X86Reg, b: SSERm) {$/;"	m
cvtss2si_r_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def cvtss2si_r_m(a: X86_64Gpr, b: X86_64Addr) -> this {$/;"	m
cvtss2si_r_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def cvtss2si_r_s(a: X86_64Gpr, b: X86_64Xmmr) -> this {$/;"	m
cvttpd2dq_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def cvttpd2dq_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
cvttps2dq_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def cvttps2dq_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
cvttsd2si	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def cvttsd2si(a: X86Reg, b: SSERm) {$/;"	m
cvttsd2si_r_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def cvttsd2si_r_m(a: X86_64Gpr, b: X86_64Addr) -> this {$/;"	m
cvttsd2si_r_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def cvttsd2si_r_s(a: X86_64Gpr, b: X86_64Xmmr) -> this {$/;"	m
cvttss2si	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def cvttss2si(a: X86Reg, b: SSERm) {$/;"	m
cvttss2si_r_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def cvttss2si_r_m(a: X86_64Gpr, b: X86_64Addr) -> this {$/;"	m
cvttss2si_r_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def cvttss2si_r_s(a: X86_64Gpr, b: X86_64Xmmr) -> this {$/;"	m
d_ino	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+0	d_ino:		u32;$/;"	d
d_name	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+19	d_name:		byte[1]; \/\/ TODO$/;"	d
d_off	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+8	d_off:		u64;$/;"	d
d_reclen	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+16	d_reclen:	u16;$/;"	d
d_suffix	$VIRGIL_LOC/lib/util/NumberParser.v3	/^	var d_suffix: bool;$/;"	d
d_type	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+18	d_type:		byte;$/;"	d
data	$VIRGIL_LOC/lib/file/csv/CsvParser.v3	/^class CsvParser(fileName: string, data: Array<byte>) {$/;"	d
data	$VIRGIL_LOC/lib/util/DataReader.v3	/^	def var data: Range<byte>;		\/\/ array containing data$/;"	d
data	$VIRGIL_LOC/lib/util/DataWriter.v3	/^	def var data: Range<byte>;		\/\/ array containing data$/;"	d
data	$VIRGIL_LOC/lib/util/Sexpr.v3	/^    case Atom(data: string);$/;"	d
data	$VIRGIL_LOC/lib/util/TextReader.v3	/^	def data: Array<byte>;			\/\/ array containing data$/;"	d
data1_1	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	def data1_1(opcode: u8, rd: ArmReg, op: ArmOperand) {$/;"	m
data2_0	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	def data2_0(opcode: u8, rn: ArmReg, op: ArmOperand) {$/;"	m
data2_1	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	def data2_1(opcode: u8, rd: ArmReg, rn: ArmReg, op: ArmOperand) {$/;"	m
data_certificate_copy	$VIRGIL_LOC/lib/ic/ic0_untyped.v3	/^	def data_certificate_copy(dst: i32, offset: i32, size: i32);				\/\/ *$/;"	f
data_certificate_present	$VIRGIL_LOC/lib/ic/ic0_untyped.v3	/^	def data_certificate_present() -> i32;							\/\/ *$/;"	f
data_certificate_size	$VIRGIL_LOC/lib/ic/ic0_untyped.v3	/^	def data_certificate_size() -> i32;							\/\/ *$/;"	f
debug_print	$VIRGIL_LOC/lib/ic/ic0_untyped.v3	/^	def debug_print(src: i32, size: i32);							\/\/ * s$/;"	f
dec	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def dec(a: X86Rm) {$/;"	m
dec_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def dec_m(a: X86_64Addr) -> this {$/;"	m
dec_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def dec_r(a: X86_64Gpr) -> this {$/;"	m
decode1	$VIRGIL_LOC/lib/util/Utf8.v3	/^	def decode1(str: Range<byte>) -> (\/*status:*\/int, \/*value:*\/u32) {$/;"	f
decodeUnicode	$VIRGIL_LOC/lib/util/Utf8.v3	/^	def decodeUnicode(str: Range<byte>, f: u32 -> void) -> int {$/;"	f
decodeUtf16	$VIRGIL_LOC/lib/util/Utf8.v3	/^	def decodeUtf16(str: Range<byte>) -> (Array<u16>, int) {$/;"	f
deleteAt	$VIRGIL_LOC/lib/util/Arrays.v3	/^	def deleteAt<T>(array: Array<T>, index: int) -> Array<T> {$/;"	f
desc	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^enum NetError(desc: string) {$/;"	d
dest	$VIRGIL_LOC/lib/util/Edge.v3	/^	var dest: T;		\/\/ the destination of this edge$/;"	d
digits	$VIRGIL_LOC/lib/util/NumberParser.v3	/^	var digits: byte;$/;"	d
dirent	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^layout dirent\/*(K: u32)*\/ {$/;"	l
disassemble	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	def disassemble() -> bool {$/;"	m
disp	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^class X86_64Addr(base: X86_64Gpr, index: X86_64Gpr, scale: byte, disp: int) {$/;"	d
disp	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^class X86Addr(base: X86Reg, index: X86Reg, scale: byte, disp: int) extends X86Rm {$/;"	d
div	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	def div(rs: MipsReg, rt: MipsReg)               { emit_r2i(0x00000000, rs, rt, 0x1a); }$/;"	m
div	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def div(b: X86Rm) { emitb_rm(0xF7, b, 6); } \/\/ unsigned divide (output in edx:eax)$/;"	m
div	$VIRGIL_LOC/lib/util/FpSketch.v3	/^	def div(di: FpSketch, qmin: u31) -> bool {$/;"	m
divPow10	$VIRGIL_LOC/lib/util/FpSketch.v3	/^	def divPow10(exp: u32, qmin: u31) -> bool {$/;"	m
divU32	$VIRGIL_LOC/lib/util/FpSketch.v3	/^	def divU32(d: u32, qmin: u31) -> bool {$/;"	m
div_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def div_m(b: X86_64Addr) -> this {$/;"	m
div_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def div_r(b: X86_64Gpr) -> this {$/;"	m
divpd_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def divpd_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
divps_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def divps_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
divsd	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def divsd(a: SSEReg, b: SSERm) { emitbbb_s_sm(0xF2, 0x0F, 0x5E, a, b); }$/;"	m
divsd_s_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def divsd_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {$/;"	m
divsd_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def divsd_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
divss	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def divss(a: SSEReg, b: SSERm) { emitbbb_s_sm(0xF3, 0x0F, 0x5E, a, b); }$/;"	m
divss_s_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def divss_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {$/;"	m
divss_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def divss_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
divu	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	def divu(rs: MipsReg, rt: MipsReg)              { emit_r2i(0x00000000, rs, rt, 0x1b); }$/;"	m
do	$VIRGIL_LOC/lib/term/Vt100.v3	/^	def do(i: int) {$/;"	m
do0	$VIRGIL_LOC/lib/term/Vt100.v3	/^	def do0() {$/;"	m
do1	$VIRGIL_LOC/lib/term/Vt100.v3	/^	def do1(i: int) {$/;"	m
do2	$VIRGIL_LOC/lib/term/Vt100.v3	/^	def do2(i: int) {$/;"	m
do3	$VIRGIL_LOC/lib/term/Vt100.v3	/^	def do3(i: int) {$/;"	m
do_illegal	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	def do_illegal() -> bool {$/;"	m
do_imm_b	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	def do_imm_b(name: string, p: byte) -> bool {$/;"	m
do_none	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	def do_none(name: string) -> bool {$/;"	m
dohash	$VIRGIL_LOC/lib/util/Map.v3	/^	private def dohash(key: K) -> int {$/;"	m
domainname	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^        +325    domainname:   byte[65];$/;"	d
done	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def done() {$/;"	m
done	$VIRGIL_LOC/lib/util/DataReader.v3	/^	def done() -> bool {$/;"	m
drain	$VIRGIL_LOC/lib/util/Vector.v3	/^	def drain<T>(v: Vector<T>, pos: int, f: T -> void) -> int {$/;"	f
drain	$VIRGIL_LOC/lib/util/WorkQueue.v3	/^	def drain() {$/;"	m
drawBox	$VIRGIL_LOC/lib/term/Vt100.v3	/^	def drawBox(x: int, y: int, innerWidth: int, innerHeight: int) {$/;"	f
drop	$VIRGIL_LOC/lib/util/Functions.v3	/^	def drop<A>(a: A) {$/;"	f
dstaddr	$VIRGIL_LOC/lib/net/tcpip/Packets.v3	/^	+16	dstaddr:	u32;$/;"	d
dstport	$VIRGIL_LOC/lib/net/tcpip/Packets.v3	/^	+2	dstport:	u16;$/;"	d
dup	$VIRGIL_LOC/lib/util/Arrays.v3	/^	def dup<T>(src: Array<T>) -> Array<T>{$/;"	f
dup	$VIRGIL_LOC/lib/util/Ranges.v3	/^	def dup<T>(r: Range<T>) -> Array<T> {$/;"	f
e_ehsize	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^	+52	e_ehsize:	u16;$/;"	d
e_entry	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^	+24	e_entry:	u64;$/;"	d
e_flags	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^	+48	e_flags:	u32;$/;"	d
e_machine	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^	+18	e_machine: 	byte;$/;"	d
e_phentsize	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^	+54	e_phentsize:	u16;$/;"	d
e_phnum	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^	+56	e_phnum:	u16;$/;"	d
e_phoff	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^	+32	e_phoff:	u64;$/;"	d
e_shentsize	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^	+58	e_shentsize:	u16;$/;"	d
e_shnum	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^	+60	e_shnum:	u16;$/;"	d
e_shoff	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^	+40	e_shoff:	u64;$/;"	d
e_shstrndx	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^	+62	e_shstrndx:	u16;$/;"	d
e_type	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^	+16	e_type:		u16;$/;"	d
e_version	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^	+20	e_version:	u32;$/;"	d
ei_class	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^	+4	ei_class: 	byte;$/;"	d
ei_data	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^	+5	ei_data:	byte;$/;"	d
ei_version	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^	+6	ei_version:	byte;$/;"	d
elems	$VIRGIL_LOC/lib/util/Sexpr.v3	/^    case List(elems: List<SExpr>); \/\/ usually Cons$/;"	d
elems	$VIRGIL_LOC/lib/util/Stack.v3	/^	def var elems = Array<T>.new(10);$/;"	d
emit	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	def emit(val: int) {$/;"	m
emit	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	private def emit(val: int) {$/;"	m
emit_b_type	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	def emit_b_type(opcode: u7, f3: u2, rs1: RiscV64Gpr, rs2: RiscV64Gpr, imm: i13) {$/;"	m
emit_i_type	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	def emit_i_type(opcode: u7, rd: RiscV64Gpr, f3: u2, rs1: RiscV64Gpr, imm: u12) {$/;"	m
emit_j_type	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	def emit_j_type(opcode: u7, rd: RiscV64Gpr, imm: i21) {$/;"	m
emit_m	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def emit_m(base: X86Reg, index: X86Reg, scale: byte, disp: int, eop: int) {$/;"	m
emit_r1	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	def emit_r1(opcode: int, rs: MipsReg, imm: u16) {$/;"	m
emit_r2i	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	def emit_r2i(opcode: int, rd: MipsReg, rs: MipsReg, imm: u16) {$/;"	m
emit_r3	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	def emit_r3(opcode: int, rd: MipsReg, rs: MipsReg, rt: MipsReg) {$/;"	m
emit_r_r_r_ex_u3	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	private def emit_r_r_r_ex_u3(rd: Arm64Gpr, rn: Arm64Gpr, rm: Arm64Gpr, ex: DataRegExtend,$/;"	m
emit_r_r_r_sh_u5	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	private def emit_r_r_r_sh_u5(rd: Arm64Gpr, rn: Arm64Gpr, rm: Arm64Gpr, sh: RegShift, $/;"	m
emit_r_r_r_sh_u6	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	private def emit_r_r_r_sh_u6(rd: Arm64Gpr, rn: Arm64Gpr, rm: Arm64Gpr, sh: RegShift, $/;"	m
emit_r_r_u12_u1	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	private def emit_r_r_u12_u1(rd: Arm64Gpr, rn: Arm64Gpr, imm: u12, lsl12: u1, code: u9) {$/;"	m
emit_r_type	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	def emit_r_type(opcode: u7, rd: RiscV64Gpr, f3: u2, rs1: RiscV64Gpr, rs2: RiscV64Gpr, f7: u7) {$/;"	m
emit_r_u16	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	private def emit_r_u16(rd: Arm64Gpr, imm: u16, code: u9) {$/;"	m
emit_rex_b_m_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	private def emit_rex_b_m_r(a: X86_64Addr, b: X86_64Reg, rex: byte, code: byte) {$/;"	m
emit_rex_b_m_x	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	private def emit_rex_b_m_x(a: X86_64Addr, rex: byte, code: byte, ext: byte) {$/;"	m
emit_rex_b_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	private def emit_rex_b_r(a: X86_64Reg, rex: byte, code: byte) {$/;"	m
emit_rex_b_r_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	private def emit_rex_b_r_m(a: X86_64Reg, b: X86_64Addr, rex: byte, code: byte) {$/;"	m
emit_rex_b_r_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	private def emit_rex_b_r_r(a: X86_64Reg, b: X86_64Reg, rex: byte, code: byte) {$/;"	m
emit_rex_b_r_x	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	private def emit_rex_b_r_x(a: X86_64Reg, rex: byte, code: byte, ext: byte) {$/;"	m
emit_rex_bb_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	private def emit_rex_bb_r(a: X86_64Reg, rex: byte, c1: byte, c2: byte, low3: u3) {$/;"	m
emit_rex_bb_r_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	private def emit_rex_bb_r_m(a: X86_64Reg, b: X86_64Addr, rex: byte, c1: byte, c2: byte) {$/;"	m
emit_rex_bb_r_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	private def emit_rex_bb_r_r(a: X86_64Reg, b: X86_64Reg, rex: byte, c1: byte, c2: byte) {$/;"	m
emit_rex_bbb_m_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	private def emit_rex_bbb_m_r(a: X86_64Addr, b: X86_64Reg, rex: byte, c1: byte, c2: byte, c3: byte) {$/;"	m
emit_rex_bbb_r_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	private def emit_rex_bbb_r_m(a: X86_64Reg, b: X86_64Addr, rex: byte, c1: byte, c2: byte, c3: byte) {$/;"	m
emit_rex_bbb_r_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	private def emit_rex_bbb_r_r(a: X86_64Reg, b: X86_64Reg, rex: byte, c1: byte, c2: byte, c3: byte) {$/;"	m
emit_rex_bbb_r_r2	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	private def emit_rex_bbb_r_r2(a: X86_64Reg, b: X86_64Reg, rex: byte, c1: byte, c2: byte, c3: byte) {$/;"	m
emit_rm	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def emit_rm(a: X86Rm, eop: int) {$/;"	m
emit_rm_1	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	private def emit_rm_1(eop: int, regnum: int, disp: int) {$/;"	m
emit_rrr	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	private def emit_rrr(opcode: u32, rd: ArmReg, rs: ArmReg, rm: ArmReg) {$/;"	m
emit_s_type	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	def emit_s_type(opcode: u7, rd: RiscV64Gpr, rs1: RiscV64Gpr, rs2: RiscV64Gpr, imm: u12) {$/;"	m
emit_sm	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def emit_sm(a: SSERm, eop: int) {$/;"	m
emit_u_type	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	def emit_u_type(opcode: u7, rd: RiscV64Gpr, imm: u20) {$/;"	m
emitb	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def emitb(b0: int) {$/;"	m
emitb	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def emitb(b0: int) {$/;"	m
emitb_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	private def emitb_m(b0: int, a: X86_64Addr, eop: int) {$/;"	m
emitb_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	private def emitb_r(b0: int, a: X86_64Reg, eop: int) {$/;"	m
emitb_rm	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def emitb_rm(b0: int, a: X86Rm, eop: int) {$/;"	m
emitbb	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def emitbb(b0: int, b1: int) {$/;"	m
emitbb	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def emitbb(b0: int, b1: int) {$/;"	m
emitbb_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	private def emitbb_m(b0: int, b1: int, a: X86_64Addr, eop: int) {$/;"	m
emitbb_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	private def emitbb_r(b0: int, b1: int, a: X86_64Reg, eop: int) {$/;"	m
emitbb_rm	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def emitbb_rm(b0: int, b1: int, a: X86Rm, eop: int) {$/;"	m
emitbb_s_sm	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def emitbb_s_sm(b1: byte, b2: byte, a: SSEReg, b: SSERm) {$/;"	m
emitbbb	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def emitbbb(b0: int, b1: int, b2: int) {$/;"	m
emitbbb	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def emitbbb(b0: int, b1: int, b2: int) {$/;"	m
emitbbb_s_sm	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def emitbbb_s_sm(b1: byte, b2: byte, b3: byte, a: SSEReg, b: SSERm) {$/;"	m
emitbbb_si_b	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def emitbbb_si_b(b1: byte, b2: byte, b3: byte, a: SSEReg, b: int, c: byte) {$/;"	m
emitbbbb_s_sm	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def emitbbbb_s_sm(b1: byte, b2: byte, b3: byte, b4: byte,$/;"	m
emitbbd	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def emitbbd(b0: int, b1: int, d0: int) {$/;"	m
emitbbd	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def emitbbd(b0: int, b1: int, d0: int) {$/;"	m
emitbd	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def emitbd(b0: int, d0: int) {$/;"	m
emitbd	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def emitbd(b0: int, d0: int) {$/;"	m
emitd	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def emitd(d0: int) {$/;"	m
emitd	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def emitd(d0: int) {$/;"	m
emitls	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	def emitls(pat: u32, rd: ArmReg, rn: ArmReg, off: ArmOffset) {$/;"	m
emitlss	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	def emitlss(pat: u32, rd: ArmReg, rn: ArmReg, off: ArmSmallOffset) {$/;"	m
emitm	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	private def emitm(a: X86_64Addr, eop: int) {$/;"	m
emitop2_m_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	private def emitop2_m_i(a: X86_64Addr, i: int, rex: byte, op2code: byte) {$/;"	m
emitop2_m_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	private def emitop2_m_r(a: X86_64Addr, b: X86_64Gpr, rex: byte, op2code: byte) {$/;"	m
emitop2_r_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	private def emitop2_r_i(a: X86_64Gpr, i: int, rex: byte, op2code: byte) {$/;"	m
emitop2_r_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	private def emitop2_r_m(a: X86_64Gpr, b: X86_64Addr, rex: byte, op2code: byte) {$/;"	m
emitop2_r_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	private def emitop2_r_r(a: X86_64Gpr, b: X86_64Gpr, rex: byte, op2code: byte) {$/;"	m
emitq	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def emitq(d0: long) {$/;"	m
emitr	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	private def emitr(a: X86_64Reg, eop: int) {$/;"	m
emitrm_1	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	private def emitrm_1(eop: int, regnum: int, a: X86_64Addr) {$/;"	m
emitw	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def emitw(d0: int) {$/;"	m
empty	$VIRGIL_LOC/lib/file/json/JsonParser.v3	/^	def empty() -> JsonValue.JObject {$/;"	f
empty	$VIRGIL_LOC/lib/util/Stack.v3	/^	def empty() -> bool;$/;"	m
emptyArray	$VIRGIL_LOC/lib/file/json/JsonParser.v3	/^	def emptyArray() -> JsonValue.JArray { return JsonValue.JArray([]); }$/;"	f
encode	$VIRGIL_LOC/lib/util/Utf8.v3	/^	def encode(codepoint: u32, dest: Range<byte>) -> int {$/;"	f
end	$VIRGIL_LOC/lib/term/Vt100.v3	/^class IntCmd(end: byte) {$/;"	d
end	$VIRGIL_LOC/lib/util/DataWriter.v3	/^	def end() -> int {$/;"	m
end	$VIRGIL_LOC/lib/util/Token.v3	/^	def end() -> FilePoint {$/;"	m
endColumn	$VIRGIL_LOC/lib/util/Token.v3	/^	def endColumn: int;$/;"	d
endLine	$VIRGIL_LOC/lib/util/Token.v3	/^	def endLine: int;$/;"	d
endsWith	$VIRGIL_LOC/lib/util/Ranges.v3	/^	def endsWith<T>(range: Range<T>, end: Range<T>) -> bool {$/;"	f
endsWith	$VIRGIL_LOC/lib/util/Strings.v3	/^	def endsWith = Ranges.endsWith<byte>;$/;"	d
endsWithFrom	$VIRGIL_LOC/lib/util/Ranges.v3	/^	def endsWithFrom<T>(range: Range<T>, start: int, end: Range<T>) -> bool {$/;"	f
endsWithFrom	$VIRGIL_LOC/lib/util/Strings.v3	/^	def endsWithFrom = Ranges.endsWithFrom<byte>;$/;"	d
enterExtendedAsciiMode	$VIRGIL_LOC/lib/term/Vt100.v3	/^	def enterExtendedAsciiMode = lit("\x0E");$/;"	d
enterNormalAsciiMode	$VIRGIL_LOC/lib/term/Vt100.v3	/^	def enterNormalAsciiMode = lit("\x0F");$/;"	d
entries	$VIRGIL_LOC/lib/file/json/JsonParser.v3	/^	def entries = Strings.newMap<JsonValue>();$/;"	d
eof_at	$VIRGIL_LOC/lib/util/DataReader.v3	/^	def eof_at(pos: int, size: int, msg: string) -> this {$/;"	m
eor	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	def eor(rd: ArmReg, rn: ArmReg, op: ArmOperand) { data2_1(2, rd, rn, op); }$/;"	m
eord_r_r_r_sh_u5	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def eord_r_r_r_sh_u5(rd: Arm64Gpr, rn: Arm64Gpr, rm: Arm64Gpr, sh: RegShift, imm: u5) -> this {$/;"	m
eord_r_r_u12	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def eord_r_r_u12(rd: Arm64Gpr, rn: Arm64Gpr, imm: u12) -> this {$/;"	m
eorq_r_r_i13	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def eorq_r_r_i13(rd: Arm64Gpr, rn: Arm64Gpr, imm: i13) -> this {$/;"	m
eorq_r_r_r_sh_u6	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def eorq_r_r_r_sh_u6(rd: Arm64Gpr, rn: Arm64Gpr, rm: Arm64Gpr, sh: RegShift, imm: u6) -> this {$/;"	m
eors	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	def eors(rd: ArmReg, rn: ArmReg, op: ArmOperand) { data2_1(3, rd, rn, op); }$/;"	m
epoll_event	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^layout epoll_event {$/;"	l
eq	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	def eq() -> this { cond = ArmCond.EQ; }$/;"	m
eq	$VIRGIL_LOC/lib/util/Types.v3	/^	def eq<B>() -> bool { return ReifiedType<B>.?(this); }$/;"	m
equal	$VIRGIL_LOC/lib/file/json/JsonParser.v3	/^	def equal(that: JsonValue) -> bool {$/;"	m
equal	$VIRGIL_LOC/lib/util/Arrays.v3	/^	def equal<A>(x: Array<A>, y: Array<A>) -> bool {$/;"	f
equal	$VIRGIL_LOC/lib/util/Ranges.v3	/^	def equal<A>(x: Range<A>, y: Range<A>) -> bool {$/;"	f
equal	$VIRGIL_LOC/lib/util/Strings.v3	/^	def equal(arr1: string, arr2: string) -> bool {$/;"	f
equal	$VIRGIL_LOC/lib/util/Types.v3	/^	def equal<A, B>() -> bool { return ReifiedType<A>().eq<B>(); }$/;"	f
equals	$VIRGIL_LOC/lib/util/Map.v3	/^	def equals: (K, K) -> bool;$/;"	d
eraseDown	$VIRGIL_LOC/lib/term/Vt100.v3	/^	def eraseDown = esc("[J");$/;"	d
eraseLine	$VIRGIL_LOC/lib/term/Vt100.v3	/^	def eraseLine = esc("[2K");$/;"	d
eraseOneLeft	$VIRGIL_LOC/lib/term/Vt100.v3	/^	def eraseOneLeft = lit("\x1b[0D \x1b[0D");$/;"	d
eraseScreen	$VIRGIL_LOC/lib/term/Vt100.v3	/^	def eraseScreen = esc("[2J");$/;"	d
eraseToEndOfLine	$VIRGIL_LOC/lib/term/Vt100.v3	/^	def eraseToEndOfLine = esc("[K");$/;"	d
eraseToStartOfLine	$VIRGIL_LOC/lib/term/Vt100.v3	/^	def eraseToStartOfLine = esc("[1K");$/;"	d
eraseUp	$VIRGIL_LOC/lib/term/Vt100.v3	/^	def eraseUp = esc("[1J");$/;"	d
errnoToNetError	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^def errnoToNetError(e: long) -> NetError {$/;"	m
error	$VIRGIL_LOC/lib/util/NumberParser.v3	/^	private def error(msg: string) -> bool {$/;"	m
error_column	$VIRGIL_LOC/lib/util/TextReader.v3	/^	def var error_column: int = int.max;	\/\/ earliest column with error$/;"	d
error_line	$VIRGIL_LOC/lib/util/TextReader.v3	/^	def var error_line: int = int.max;	\/\/ earliest line with error$/;"	d
error_msg	$VIRGIL_LOC/lib/util/DataReader.v3	/^	def var error_msg: string;		\/\/ error message$/;"	d
error_msg	$VIRGIL_LOC/lib/util/NumberParser.v3	/^	var error_msg: string;$/;"	d
error_msg	$VIRGIL_LOC/lib/util/TextReader.v3	/^	def var error_msg: string;		\/\/ error message$/;"	d
error_pos	$VIRGIL_LOC/lib/util/DataReader.v3	/^	def var error_pos: int = int.max;	\/\/ first error position$/;"	d
error_pos	$VIRGIL_LOC/lib/util/NumberParser.v3	/^	var error_pos: int;$/;"	d
error_set	$VIRGIL_LOC/lib/pdk/Extism.v3	/^	def error_set(offset : i64);$/;"	f
esc	$VIRGIL_LOC/lib/term/Vt100.v3	/^	def esc(s: string) -> void -> void {$/;"	f
evalDecInt	$VIRGIL_LOC/lib/util/NumberParser.v3	/^	private def evalDecInt(r: Range<byte>) -> NumberParserValue {$/;"	m
evalDecLong	$VIRGIL_LOC/lib/util/NumberParser.v3	/^	private def evalDecLong(r: Range<byte>) -> NumberParserValue {$/;"	m
evalFloat	$VIRGIL_LOC/lib/util/NumberParser.v3	/^	private def evalFloat(w: Range<byte>, f: Range<byte>, negexp: bool, e: Range<byte>) -> NumberParserValue {$/;"	m
evalOverflowExponent	$VIRGIL_LOC/lib/util/NumberParser.v3	/^	private def evalOverflowExponent() -> NumberParserValue {$/;"	m
evalUnderflowExponent	$VIRGIL_LOC/lib/util/NumberParser.v3	/^	private def evalUnderflowExponent() -> NumberParserValue {$/;"	m
events	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+4	events:		u16;$/;"	d
ex	$VIRGIL_LOC/lib/packing/CiRuntime.v3	/^	case Repeated(ex: u4, count: u4, framewords: u20)	#packing 0b_11111111_11111111_1111eeee_ccccffff_ffffffff_ffffffff;$/;"	d
exit_signal	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+32	exit_signal:	u64;$/;"	d
exp	$VIRGIL_LOC/lib/math/Math.v3	/^	def exp = exp0;$/;"	d
exp	$VIRGIL_LOC/lib/util/FpSketch.v3	/^	var exp: int;$/;"	d
exp	$VIRGIL_LOC/lib/util/NumberParser.v3	/^	case Float(sign: int, exp: int, mantissa: u64);$/;"	d
exp0	$VIRGIL_LOC/lib/math/Math.v3	/^def exp0(x: double) -> double {$/;"	m
expect	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	def expect(msg: string) -> T {$/;"	m
expected	$VIRGIL_LOC/lib/util/TextReader.v3	/^	private def expected(s: string) -> int {$/;"	m
extended	$VIRGIL_LOC/lib/packing/CiRuntime.v3	/^	case Ex(extended: u18)			#packing 0b_10ee_eeeeeeee_eeeeeeee;$/;"	d
extract	$VIRGIL_LOC/lib/file/json/JsonParser.v3	/^	def extract() -> Array<(K, V)> {$/;"	m
extract	$VIRGIL_LOC/lib/util/DataWriter.v3	/^	def extract() -> Array<byte> {$/;"	m
extract	$VIRGIL_LOC/lib/util/StringBuilder.v3	/^	def extract() -> string {$/;"	m
extract	$VIRGIL_LOC/lib/util/Vector.v3	/^	def extract() -> Array<T> {$/;"	m
extractLine	$VIRGIL_LOC/lib/util/Token.v3	/^	def extractLine(input: Array<byte>, lineEnds: Vector<int>) -> string {$/;"	m
f_bavail	$VIRGIL_LOC/lib/wasm-linux/WaliLayouts.v3	/^	+32	f_bavail:	u64;$/;"	d
f_bavail	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+32	f_bavail:	u64;$/;"	d
f_bfree	$VIRGIL_LOC/lib/wasm-linux/WaliLayouts.v3	/^	+24	f_bfree:	u64;$/;"	d
f_bfree	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+24	f_bfree:	u64;$/;"	d
f_blocks	$VIRGIL_LOC/lib/wasm-linux/WaliLayouts.v3	/^	+16	f_blocks:	u64;$/;"	d
f_blocks	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+16	f_blocks:	u64;$/;"	d
f_bsize	$VIRGIL_LOC/lib/wasm-linux/WaliLayouts.v3	/^	+8	f_bsize:	u64;$/;"	d
f_bsize	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+8	f_bsize:	u64;$/;"	d
f_ffree	$VIRGIL_LOC/lib/wasm-linux/WaliLayouts.v3	/^	+48	f_ffree:	u64;$/;"	d
f_ffree	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+48	f_ffree:	u64;$/;"	d
f_files	$VIRGIL_LOC/lib/wasm-linux/WaliLayouts.v3	/^	+40	f_files:	u64;$/;"	d
f_files	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+40	f_files:	u64;$/;"	d
f_flags	$VIRGIL_LOC/lib/wasm-linux/WaliLayouts.v3	/^	+80	f_flags:	u64;$/;"	d
f_flags	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+80	f_flags:	u64;$/;"	d
f_fname	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+16	f_fname:	byte[6];$/;"	d
f_fpack	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+22	f_fpack:	byte[6];$/;"	d
f_frsize	$VIRGIL_LOC/lib/wasm-linux/WaliLayouts.v3	/^	+72	f_frsize:	u64;$/;"	d
f_frsize	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+72	f_frsize:	u64;$/;"	d
f_fsid	$VIRGIL_LOC/lib/wasm-linux/WaliLayouts.v3	/^	+56	f_fsid:		u64;$/;"	d
f_fsid	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+56	f_fsid:		u64;$/;"	d
f_handle	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+8	f_handle:	byte[1]; \/\/ TODO$/;"	d
f_namelen	$VIRGIL_LOC/lib/wasm-linux/WaliLayouts.v3	/^	+64	f_namelen:	u64;$/;"	d
f_namelen	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+64	f_namelen:	u64;$/;"	d
f_suffix	$VIRGIL_LOC/lib/util/NumberParser.v3	/^	var f_suffix: bool;$/;"	d
f_tfree	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+0	f_tfree:	u64;$/;"	d
f_tinode	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+8	f_tinode:	u64;$/;"	d
f_type	$VIRGIL_LOC/lib/wasm-linux/WaliLayouts.v3	/^	+0	f_type:		u64;$/;"	d
f_type	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+0	f_type:		u64;$/;"	d
fadd_d	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def fadd_d(a: SSEAddr) {$/;"	m
faddd	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def faddd(a: X86_64Addr) -> this {$/;"	m
fail	$VIRGIL_LOC/lib/util/DataReader.v3	/^	def fail(msg: string) -> this {$/;"	m
fail	$VIRGIL_LOC/lib/util/TextReader.v3	/^	def fail(msg: string) -> this {$/;"	m
failRel	$VIRGIL_LOC/lib/util/TextReader.v3	/^	def failRel(offset: int, msg: string) -> this {$/;"	m
fail_at	$VIRGIL_LOC/lib/util/DataReader.v3	/^	def fail_at(pos: int, msg: string) -> this {$/;"	m
far_uses	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	var far_uses: List<int>;$/;"	d
fd	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	def var fd: int;$/;"	d
fd	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+0	fd:		u32;$/;"	d
ffrag	$VIRGIL_LOC/lib/net/tcpip/Packets.v3	/^	+6	ffrag:		u16;\/\/TODO:	IpV4FlagsFragmentOffset;$/;"	d
fgBlack	$VIRGIL_LOC/lib/term/Vt100.v3	/^	def fgBlack = esc("[0;30m");$/;"	d
fgBlue	$VIRGIL_LOC/lib/term/Vt100.v3	/^	def fgBlue = esc("[0;34m");$/;"	d
fgBrightBlue	$VIRGIL_LOC/lib/term/Vt100.v3	/^	def fgBrightBlue = esc("[1;34m");$/;"	d
fgBrightCyan	$VIRGIL_LOC/lib/term/Vt100.v3	/^	def fgBrightCyan = esc("[1;36m");$/;"	d
fgBrightGreen	$VIRGIL_LOC/lib/term/Vt100.v3	/^	def fgBrightGreen = esc("[1;32m");$/;"	d
fgBrightRed	$VIRGIL_LOC/lib/term/Vt100.v3	/^	def fgBrightRed = esc("[1;31m");$/;"	d
fgBrown	$VIRGIL_LOC/lib/term/Vt100.v3	/^	def fgBrown = esc("[0;33m");$/;"	d
fgCyan	$VIRGIL_LOC/lib/term/Vt100.v3	/^	def fgCyan = esc("[0;36m");$/;"	d
fgDarkgray	$VIRGIL_LOC/lib/term/Vt100.v3	/^	def fgDarkgray = esc("[1;30m");$/;"	d
fgGreen	$VIRGIL_LOC/lib/term/Vt100.v3	/^	def fgGreen = esc("[0;32m");$/;"	d
fgLightGray	$VIRGIL_LOC/lib/term/Vt100.v3	/^	def fgLightGray = esc("[0;37m");$/;"	d
fgMagenta	$VIRGIL_LOC/lib/term/Vt100.v3	/^	def fgMagenta = esc("[1;35m");$/;"	d
fgNorm	$VIRGIL_LOC/lib/term/Vt100.v3	/^	def fgNorm = esc("[0m");$/;"	d
fgPurple	$VIRGIL_LOC/lib/term/Vt100.v3	/^	def fgPurple = esc("[0;35m");$/;"	d
fgRed	$VIRGIL_LOC/lib/term/Vt100.v3	/^	def fgRed = esc("[0;31m");$/;"	d
fgWhite	$VIRGIL_LOC/lib/term/Vt100.v3	/^	def fgWhite = esc("[1;37m");$/;"	d
fgYellow	$VIRGIL_LOC/lib/term/Vt100.v3	/^	def fgYellow = esc("[1;33m");$/;"	d
fild_q	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def fild_q(a: SSEAddr) {$/;"	m
fildq	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def fildq(a: X86_64Addr) -> this {$/;"	m
fileName	$VIRGIL_LOC/lib/file/csv/CsvParser.v3	/^class CsvParser(fileName: string, data: Array<byte>) {$/;"	d
fileName	$VIRGIL_LOC/lib/util/TextReader.v3	/^	def fileName: string;$/;"	d
fileName	$VIRGIL_LOC/lib/util/Token.v3	/^class FilePoint(fileName: string, beginLine: int, beginColumn: int) {$/;"	d
file_handle	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^layout file_handle\/*(K: u32)*\/ {$/;"	l
file_name	$VIRGIL_LOC/lib/packing/CiRuntime.v3	/^type CiFrameEntry(type_name: u32, file_name: u32) #unboxed$/;"	d
filter	$VIRGIL_LOC/lib/util/Arrays.v3	/^	def filter<T>(array: Array<T>, func: T -> bool) -> Array<T> {$/;"	f
findError	$VIRGIL_LOC/lib/util/Utf8.v3	/^	def findError(str: Range<byte>) -> int {$/;"	f
finish	$VIRGIL_LOC/lib/util/Arrays.v3	/^	private def finish<T>(array: Array<T>, k: int, end: Array<T>, i: int) -> Array<T> {$/;"	f
finishFloat	$VIRGIL_LOC/lib/util/NumberParser.v3	/^	private def finishFloat(w: Range<byte>, f: Range<byte>, negexp: bool, e: Range<byte>) -> bool {$/;"	m
finishFmt	$VIRGIL_LOC/lib/util/StringBuilder.v3	/^	private def finishFmt(fmt: string, offset: int) {$/;"	m
firstByte	$VIRGIL_LOC/lib/util/Token.v3	/^	def firstByte() -> FileRange {$/;"	m
fisttp_q	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def fisttp_q(a: SSEAddr) {$/;"	m
fisttpq	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def fisttpq(a: X86_64Addr) -> this {$/;"	m
flags	$VIRGIL_LOC/lib/net/tcpip/Packets.v3	/^type TcpV4Control(flags: TcpV4Flag.set, offset: u4) #packing 0b_ffffffff_f???oooo;$/;"	d
flags	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+0	flags:		u64;$/;"	d
fld_d	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def fld_d(a: SSEAddr) {$/;"	m
fld_q	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def fld_q(a: SSEAddr) {$/;"	m
fldd	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def fldd(a: X86_64Addr) -> this {$/;"	m
fldq	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def fldq(a: X86_64Addr) -> this {$/;"	m
flip	$VIRGIL_LOC/lib/util/BitMatrix.v3	/^	def flip() {$/;"	m
flip	$VIRGIL_LOC/lib/util/Random.v3	/^	def flip(num: int, denom: int) -> bool {$/;"	f
flipRow	$VIRGIL_LOC/lib/util/BitMatrix.v3	/^	def flipRow(row: int) {$/;"	m
flush	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def flush() -> this {$/;"	m
forceAtom	$VIRGIL_LOC/lib/util/Sexpr.v3	/^    def forceAtom() -> string {$/;"	m
forceList	$VIRGIL_LOC/lib/util/Sexpr.v3	/^    def forceList() -> List<SExpr> {$/;"	m
format1	$VIRGIL_LOC/lib/util/Strings.v3	/^	def format1<A>(fmt: string, a: A) -> string {$/;"	f
format2	$VIRGIL_LOC/lib/util/Strings.v3	/^	def format2<A, B>(fmt: string, a: A, b: B) -> string {$/;"	f
format3	$VIRGIL_LOC/lib/util/Strings.v3	/^	def format3<A, B, C>(fmt: string, a: A, b: B, c: C) -> string {$/;"	f
fps	$VIRGIL_LOC/lib/term/Animator.v3	/^	var fps: u32;  \/\/ actual frames per second$/;"	d
framewords	$VIRGIL_LOC/lib/packing/CiRuntime.v3	/^type CiMethodEntry(meth_name: u24, type_name: u16, framewords: u12, offset: u12) #unboxed$/;"	d
free	$VIRGIL_LOC/lib/pdk/Extism.v3	/^	def free(offset : i64);$/;"	f
free	$VIRGIL_LOC/lib/pdk/Memory.v3	/^	def free() {$/;"	m
freehigh	$VIRGIL_LOC/lib/wasm-linux/WaliLayouts.v3	/^        +96     freehigh:       u64;$/;"	d
freehigh	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^        +96     freehigh:       u64;$/;"	d
freeram	$VIRGIL_LOC/lib/wasm-linux/WaliLayouts.v3	/^        +40     freeram:        u64;$/;"	d
freeram	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^        +40     freeram:        u64;$/;"	d
freeswap	$VIRGIL_LOC/lib/wasm-linux/WaliLayouts.v3	/^        +72     freeswap:       u64;$/;"	d
freeswap	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^        +72     freeswap:       u64;$/;"	d
fromArray	$VIRGIL_LOC/lib/util/List.v3	/^	def fromArray<T>(array: Array<T>) -> List<T> {$/;"	f
fs_prefix	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def fs_prefix() -> this {$/;"	m
fstp_d	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def fstp_d(a: SSEAddr) {$/;"	m
fstp_q	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def fstp_q(a: SSEAddr) {$/;"	m
fstpd	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def fstpd(a: X86_64Addr) -> this {$/;"	m
fstpq	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def fstpq(a: X86_64Addr) -> this {$/;"	m
futex_offset	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+8	futex_offset:		u64;$/;"	d
ge	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	def ge() -> this { cond = ArmCond.GE; }$/;"	m
get	$VIRGIL_LOC/lib/pdk/Config.v3	/^	def get(key: string) -> Maybe<string> {$/;"	f
get	$VIRGIL_LOC/lib/util/List.v3	/^	def get<T>(list: List<T>, index: int) -> T {$/;"	f
get	$VIRGIL_LOC/lib/util/Option.v3	/^	def get() -> T { return val; }$/;"	m
get	$VIRGIL_LOC/lib/util/Vector.v3	/^	def get(index: int) -> T {$/;"	m
getBytes	$VIRGIL_LOC/lib/pdk/Var.v3	/^	def getBytes(key: string) -> Maybe<Array<byte>> {$/;"	f
getDigitWidth	$VIRGIL_LOC/lib/util/Floats.v3	/^	private def getDigitWidth(d: u32) -> int {$/;"	f
getFPS	$VIRGIL_LOC/lib/term/Animator.v3	/^	def getFPS() -> u32 {$/;"	m
getInt	$VIRGIL_LOC/lib/pdk/Var.v3	/^	def getInt(key: string) -> Maybe<int> {$/;"	f
getLastDecimalDigit	$VIRGIL_LOC/lib/util/Floats.v3	/^	private def getLastDecimalDigit(d: u32) -> (u32, int) {$/;"	f
getListHead	$VIRGIL_LOC/lib/util/Edge.v3	/^	def getListHead(dest: T) -> Edge<T>;$/;"	m
getLocalAddress	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	def getLocalAddress() -> InetAddress;$/;"	m
getMemory	$VIRGIL_LOC/lib/pdk/Config.v3	/^	def getMemory(key: string) -> Maybe<Memory> {$/;"	f
getMemory	$VIRGIL_LOC/lib/pdk/Var.v3	/^	def getMemory(key: string) -> Maybe<Memory> {$/;"	f
getSockAddress	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	def getSockAddress() -> Array<byte>;$/;"	m
getString	$VIRGIL_LOC/lib/pdk/Var.v3	/^	def getString(key: string) -> Maybe<string> {$/;"	f
get_b32	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	private def get_b32(pos: int) -> int {$/;"	m
getsockname	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	def getsockname(sockfd: int, sockAddr: Array<byte>) -> NetResult<void> {$/;"	f
global_timer_set	$VIRGIL_LOC/lib/ic/ic0_untyped.v3	/^	def global_timer_set(timestamp: i64) -> i64;						\/\/ I U Ry Rt C T$/;"	f
greg	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def greg(r: X86_64Gpr, rex: byte) -> this {$/;"	m
grow	$VIRGIL_LOC/lib/util/Arrays.v3	/^	def grow<T>(array: Array<T>, size: int) -> Array<T> {$/;"	f
grow	$VIRGIL_LOC/lib/util/BitMatrix.v3	/^	def grow(nrows: int) -> this {$/;"	m
grow	$VIRGIL_LOC/lib/util/DataWriter.v3	/^	def grow(nlength: int) -> this {$/;"	m
grow	$VIRGIL_LOC/lib/util/Ranges.v3	/^	def grow<T>(range: Range<T>, size: int) -> Range<T> {$/;"	f
grow	$VIRGIL_LOC/lib/util/StringBuilder.v3	/^	def grow(nlength: int) -> this {$/;"	m
grow	$VIRGIL_LOC/lib/util/Vector.v3	/^	def grow(nlength: int) -> this {$/;"	m
growI2X	$VIRGIL_LOC/lib/util/DataWriter.v3	/^	private def growI2X(nlength: int) -> this {$/;"	m
growV	$VIRGIL_LOC/lib/util/Arrays.v3	/^	def growV<T>(array: Array<T>, nlength: int, val: T) -> Array<T> {$/;"	f
gs_prefix	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def gs_prefix() -> this {$/;"	m
gt	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	def gt() -> this { cond = ArmCond.GT; }$/;"	m
half	$VIRGIL_LOC/lib/math/Math.v3	/^def half	= [0.5, -0.5];$/;"	d
handle_bytes	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+0	handle_bytes:	u32;$/;"	d
handle_type	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+4	handle_type:	u32;$/;"	d
has	$VIRGIL_LOC/lib/util/Map.v3	/^	def has(key: K) -> bool;$/;"	m
hasSuffix	$VIRGIL_LOC/lib/util/NumberParser.v3	/^	def hasSuffix() -> bool {$/;"	m
hash	$VIRGIL_LOC/lib/util/Arrays.v3	/^	def hash<T>(h0: int, array: Array<T>, hash: T -> int) -> int {$/;"	f
hash	$VIRGIL_LOC/lib/util/Map.v3	/^	def hash: K -> int;$/;"	d
hash	$VIRGIL_LOC/lib/util/Ranges.v3	/^	def hash<T>(h0: int, r: Range<T>, hash: T -> int) -> int {$/;"	f
hash	$VIRGIL_LOC/lib/util/Strings.v3	/^	def hash(str: string) -> int {$/;"	f
hdr	$VIRGIL_LOC/lib/net/tcpip/Packets.v3	/^	+0	hdr:		byte;\/\/TODO:	IpV4HeaderVersion;$/;"	d
head	$VIRGIL_LOC/lib/util/List.v3	/^class List<T>(head: T, tail: List<T>) { }$/;"	d
header	$VIRGIL_LOC/lib/pdk/Http.v3	/^class Request(method: Method, header: Header, url: string) {$/;"	d
hex	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def hex<T>(n: T) -> this {$/;"	m
hexMap_l	$VIRGIL_LOC/lib/util/Chars.v3	/^	def hexMap_l = "0123456789abcdef";$/;"	d
hexMap_u	$VIRGIL_LOC/lib/util/Chars.v3	/^	def hexMap_u = "0123456789ABCDEF";$/;"	d
hexValue	$VIRGIL_LOC/lib/util/Chars.v3	/^	def hexValue(ch: byte) -> int {$/;"	f
hex_bytes	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def hex_bytes(r: Range<byte>) -> this {$/;"	m
hexdigit	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def hexdigit(x: byte) -> this {$/;"	m
hi	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	def hi() -> this { cond = ArmCond.HI; }$/;"	m
hi_val	$VIRGIL_LOC/lib/util/Layouts.v3	/^	+8	hi_val:	u64;$/;"	d
hideCursor	$VIRGIL_LOC/lib/term/Vt100.v3	/^	def hideCursor = esc("[?25l");$/;"	d
highestNonZeroDigit	$VIRGIL_LOC/lib/util/FpSketch.v3	/^	private def highestNonZeroDigit() -> int {$/;"	m
highestOneBit	$VIRGIL_LOC/lib/util/FpSketch.v3	/^	def highestOneBit() -> int {$/;"	m
hiword	$VIRGIL_LOC/lib/math/Math.v3	/^def hiword(x: double) -> int {$/;"	m
horizontalChar	$VIRGIL_LOC/lib/term/Vt100.v3	/^def horizontalChar = '\x71'; \/\/ 196$/;"	d
http_request	$VIRGIL_LOC/lib/pdk/Extism.v3	/^	def http_request(req : i64, body : i64) -> i64;$/;"	f
http_status_code	$VIRGIL_LOC/lib/pdk/Extism.v3	/^	def http_status_code() -> int;$/;"	f
huge	$VIRGIL_LOC/lib/math/Math.v3	/^def huge	= 1.0e+300;$/;"	d
ibuf	$VIRGIL_LOC/lib/term/Vt100.v3	/^def ibuf = [ESC, '[', SP, SP, SP, SP];$/;"	d
ic0	$VIRGIL_LOC/lib/ic/ic0_untyped.v3	/^import component ic0 {$/;"	n
icall	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def icall(a: X86Rm) { emitb_rm(0xFF, a, 2); } \/\/ indirect call$/;"	m
icall_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def icall_m(a: X86_64Addr) -> this {$/;"	m
icall_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def icall_r(a: X86_64Gpr) -> this {$/;"	m
id	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^enum MemRegExtend(id: u3) { UXTW(2), LSL(3), SXTW(6), SXTX(7) }$/;"	d
id	$VIRGIL_LOC/lib/net/tcpip/Packets.v3	/^	+4	id:		u16;$/;"	d
idiv	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def idiv(b: X86Rm) { emitb_rm(0xF7, b, 7); } \/\/ signed divide (output in edx:eax)$/;"	m
idiv_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def idiv_m(b: X86_64Addr) -> this {$/;"	m
idiv_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def idiv_r(b: X86_64Gpr) -> this {$/;"	m
iflag	$VIRGIL_LOC/lib/term/Termios.v3	/^	+0	iflag:		u32;$/;"	d
ijmp	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def ijmp(a: X86Rm) { emitb_rm(0xFF, a, 4); } \/\/ indirect jump$/;"	m
ijmp_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def ijmp_m(a: X86_64Addr) -> this {$/;"	m
ijmp_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def ijmp_r(a: X86_64Gpr) -> this {$/;"	m
illegal	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	def illegal(bytes: Range<byte>) { }$/;"	m
illegal	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def illegal() { emitbb(0x0F, 0xFF); }$/;"	m
image	$VIRGIL_LOC/lib/util/Token.v3	/^	def image: string;$/;"	d
imm	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def imm<T>(i: T) -> this {$/;"	m
imm_b	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	case imm_b(i: byte);$/;"	d
imul	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def imul(b: X86Rm) { emitb_rm(0xF7, b, 5); } \/\/ signed multiply (output in edx:eax)$/;"	m
imul_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def imul_m(b: X86_64Addr) -> this {$/;"	m
imul_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def imul_r(b: X86_64Gpr) -> this {$/;"	m
imul_r_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def imul_r_i(a: X86_64Gpr, i: int) -> this {$/;"	m
imul_r_i	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def imul_r_i(a: X86Reg, i: int) {$/;"	m
imul_r_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def imul_r_m(a: X86_64Gpr, b: X86_64Addr) -> this {$/;"	m
imul_r_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def imul_r_r(a: X86_64Gpr, b: X86_64Gpr) -> this {$/;"	m
imul_r_rm	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def imul_r_rm(a: X86Reg, b: X86Rm) { emitbb_rm(0x0F, 0xAF, b, a.index); } \/\/ signed multiply$/;"	m
inc	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def inc(a: X86Rm) {$/;"	m
inc_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def inc_m(a: X86_64Addr) -> this {$/;"	m
inc_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def inc_r(a: X86_64Gpr) -> this {$/;"	m
index	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^class Arm64Cond(name: string, index: int) {$/;"	d
index	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^class X86_64Cond(name: string, index: int) {$/;"	d
index	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^class X86Reg(name8: string, name16: string, name32: string, index: int) extends X86Rm {$/;"	d
index	$VIRGIL_LOC/lib/pdk/Header.v3	/^	var index = 0;$/;"	d
index	$VIRGIL_LOC/lib/util/BitMatrix.v3	/^type BitMatrixRow(matrix: BitMatrix, index: int) #unboxed {$/;"	d
indirect	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def indirect() -> X86_64Addr {$/;"	m
indirect	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def indirect() -> X86Addr {$/;"	m
init	$VIRGIL_LOC/lib/util/Option.v3	/^	def init: T;			\/\/ initial (or default) value$/;"	d
input	$VIRGIL_LOC/lib/pdk/Host.v3	/^	def input() -> Array<byte> {$/;"	f
input	$VIRGIL_LOC/lib/util/NumberParser.v3	/^class NumberParser(input: Range<byte>) {$/;"	d
inputString	$VIRGIL_LOC/lib/pdk/Host.v3	/^	def inputString() -> string {$/;"	f
input_length	$VIRGIL_LOC/lib/pdk/Extism.v3	/^	def input_length() -> i64;$/;"	f
input_load_u64	$VIRGIL_LOC/lib/pdk/Extism.v3	/^	def input_load_u64(offset : i64) -> i64;$/;"	f
input_load_u8	$VIRGIL_LOC/lib/pdk/Extism.v3	/^	def input_load_u8(offset : i64) -> byte;$/;"	f
insert	$VIRGIL_LOC/lib/util/Edge.v3	/^	private def insert(dest: T) {$/;"	m
insert	$VIRGIL_LOC/lib/util/Map.v3	/^	private def insert(bucket: Bucket<K, V>) {$/;"	m
insertps_s_s_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def insertps_s_s_i(a: X86_64Xmmr, b: X86_64Xmmr, imm: u8) -> this {$/;"	m
intArray	$VIRGIL_LOC/lib/file/json/JsonParser.v3	/^	def intArray(vs: Range<int>) -> JsonValue.JArray {$/;"	f
intK	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def intK(i: int) -> this {$/;"	m
intK	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def intK(i: int) { \/\/ software interrupt$/;"	m
interval	$VIRGIL_LOC/lib/term/Animator.v3	/^	private var interval: u32;    \/\/ 1000000 \/ target frames per second$/;"	d
invalid	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def invalid() -> this {$/;"	m
invln2	$VIRGIL_LOC/lib/math/Math.v3	/^def invln2	= 1.44269504088896338700e+0;		\/* 3FF71547 652B82FE *\/$/;"	d
iocb	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^layout iocb {$/;"	l
ioctl_termios	$VIRGIL_LOC/lib/term/Termios.v3	/^layout ioctl_termios {$/;"	l
iov_base	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+0	iov_base:	u64\/*:Pointer*\/;$/;"	d
iov_len	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+8	iov_len:	u64;$/;"	d
iovec	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^layout iovec {$/;"	l
iret	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def iret() -> this {$/;"	m
iret	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def iret() { emitb(0xCF); } \/\/ return from interrupt$/;"	m
is	$VIRGIL_LOC/lib/util/Poly.v3	/^	def is<A, B>(a: A) -> bool { return B.?(a); }$/;"	f
isBinary	$VIRGIL_LOC/lib/util/Chars.v3	/^	def isBinary(ch: byte) -> bool {$/;"	f
isBound	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	def var isBound = false;$/;"	d
isConnected	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	def var isConnected = false;$/;"	d
isDecimal	$VIRGIL_LOC/lib/util/Chars.v3	/^	def isDecimal(ch: byte) -> bool {$/;"	f
isHex	$VIRGIL_LOC/lib/util/Chars.v3	/^	def isHex(ch: byte) -> bool {$/;"	f
isListening	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	def var isListening = false;$/;"	d
isOctal	$VIRGIL_LOC/lib/util/Chars.v3	/^	def isOctal(ch: byte) -> bool {$/;"	f
isOpen	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	def var isOpen = false;$/;"	d
isOptionPrefix	$VIRGIL_LOC/lib/util/Option.v3	/^	def isOptionPrefix(str: string) -> bool {$/;"	m
isPowerOf2	$VIRGIL_LOC/lib/util/Ints.v3	/^	def isPowerOf2(a: u32) -> bool {$/;"	f
isUdp	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	def isUdp() -> bool {$/;"	m
isV6	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	def isV6 = InetAddress.Ipv6.?(addr);$/;"	d
isValidCodepoint	$VIRGIL_LOC/lib/util/Utf8.v3	/^	def isValidCodepoint(codepoint: u32) -> bool {$/;"	f
isWhiteSpace	$VIRGIL_LOC/lib/util/Strings.v3	/^	def isWhiteSpace(c: byte) -> bool {$/;"	f
isZero	$VIRGIL_LOC/lib/util/BitMatrix.v3	/^	def isZero(row: int) -> bool {$/;"	m
isZero	$VIRGIL_LOC/lib/util/FpSketch.v3	/^	def isZero() -> bool {$/;"	m
is_binary	$VIRGIL_LOC/lib/util/NumberParser.v3	/^	var is_binary: bool;$/;"	d
is_float	$VIRGIL_LOC/lib/util/NumberParser.v3	/^	var is_float: bool;$/;"	d
is_hex	$VIRGIL_LOC/lib/util/NumberParser.v3	/^	var is_hex: bool;$/;"	d
is_negative	$VIRGIL_LOC/lib/util/NumberParser.v3	/^	var is_negative: bool;$/;"	d
is_octal	$VIRGIL_LOC/lib/util/NumberParser.v3	/^	var is_octal: bool;$/;"	d
ispeed	$VIRGIL_LOC/lib/term/Termios.v3	/^	+52	ispeed:		u32;$/;"	d
it_interval	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+0	it_interval:	timeval;$/;"	d
it_value	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+16	it_value:	timeval;$/;"	d
itimerspec	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^layout itimerspec {$/;"	l
itimerval	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^layout itimerval {$/;"	l
ja	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def ja (off: int) { j(off, 0x77, 0x87); }$/;"	m
jal	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	def jal(target: u26) { w.put_b32be(0x0c000000 | target); }$/;"	m
jalr	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	def jalr(rd: MipsReg, rs: MipsReg) { emit_r3(0x00000009, rd, rs, MipsReg.R0); }$/;"	m
jc	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def jc (off: int) { j(off, 0x72, 0x82); }$/;"	m
jc_c0_rel_near	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def jc_c0_rel_near(label: X86_64Label) -> this {$/;"	m
jc_rel	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def jc_rel(cond: X86_64Cond, offset: int) -> this {$/;"	m
jc_rel_addr	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def jc_rel_addr(cond: X86_64Cond, m: X86_64Addr) -> this {$/;"	m
jc_rel_far	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def jc_rel_far(cond: X86_64Cond, label: X86_64Label) -> this {$/;"	m
jc_rel_near	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def jc_rel_near(cond: X86_64Cond, label: X86_64Label) -> this {$/;"	m
jg	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def jg (off: int) { j(off, 0x7f, 0x8f); }$/;"	m
jge	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def jge(off: int) { j(off, 0x7d, 0x8d); }$/;"	m
jl	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def jl (off: int) { j(off, 0x7c, 0x8c); }$/;"	m
jle	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def jle(off: int) { j(off, 0x7e, 0x8e); }$/;"	m
jmp	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def jmp(off: int) {$/;"	m
jmp_abs	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def jmp_abs(abs: int) -> this {$/;"	m
jmp_abs_addr	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def jmp_abs_addr(m: X86_64Addr) -> this {$/;"	m
jmp_rel	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def jmp_rel(offset: int) -> this {$/;"	m
jmp_rel_addr	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def jmp_rel_addr(m: X86_64Addr) -> this {$/;"	m
jmp_rel_far	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def jmp_rel_far(label: X86_64Label) -> this {$/;"	m
jmp_rel_near	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def jmp_rel_near(label: X86_64Label) -> this {$/;"	m
jmp_rel_raw	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def jmp_rel_raw(offset: int) -> this {$/;"	m
jmpd	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def jmpd(abs: int) { emitbd(0xEA, abs); } \/\/ jump absolute$/;"	m
jmpx	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def jmpx(cond: X86Cond, off: int) {$/;"	m
jna	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def jna(off: int) { j(off, 0x76, 0x86); }$/;"	m
jnc	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def jnc(off: int) { j(off, 0x73, 0x83); }$/;"	m
jno	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def jno(off: int) { j(off, 0x71, 0x81); }$/;"	m
jnp	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def jnp(off: int) { j(off, 0x7b, 0x8b); }$/;"	m
jns	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def jns(off: int) { j(off, 0x79, 0x89); }$/;"	m
jnz	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def jnz(off: int) { j(off, 0x75, 0x85); }$/;"	m
jo	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def jo (off: int) { j(off, 0x70, 0x80); }$/;"	m
jp	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def jp (off: int) { j(off, 0x7a, 0x8a); }$/;"	m
jr	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	def jr(target: MipsReg) { w.put_b32be(0x00000008 | int.view(target.tag) << 21); }$/;"	m
js	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def js (off: int) { j(off, 0x78, 0x88); }$/;"	m
jz	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def jz (off: int) { j(off, 0x74, 0x84); }$/;"	m
kexec_segment	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^layout kexec_segment {$/;"	l
key	$VIRGIL_LOC/lib/util/Map.v3	/^	def key: K;$/;"	d
keyList	$VIRGIL_LOC/lib/util/Map.v3	/^	def keyList<K, V>(map: PartialMap<K, V>) -> List<K> {$/;"	f
keypress	$VIRGIL_LOC/lib/term/Animator.v3	/^class Animator(animate: u32 -> void, keypress: int -> void) {$/;"	d
l_suffix	$VIRGIL_LOC/lib/util/NumberParser.v3	/^	var l_suffix: bool;$/;"	d
lab	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def lab(name: string, label: X86_64Label) -> this {$/;"	m
label	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def label(label: X86_64Label) -> this {$/;"	m
last	$VIRGIL_LOC/lib/util/BitMatrix.v3	/^	def last() -> BitMatrixRow {$/;"	m
lastByte	$VIRGIL_LOC/lib/util/Token.v3	/^	def lastByte() -> FileRange {$/;"	m
lastIndexOf	$VIRGIL_LOC/lib/util/Ranges.v3	/^	def lastIndexOf<T>(range: Range<T>, v: T) -> int {$/;"	f
last_num	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	var last_num: int;$/;"	d
last_pos	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def var last_pos: int;		\/\/ last known position in w$/;"	d
lb	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	def lb(rd: MipsReg, rs: MipsReg, offset: u16)  { emit_r2i(0x80000000, rd, rs, offset); }$/;"	m
lbu	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	def lbu(rd: MipsReg, rs: MipsReg, offset: u16) { emit_r2i(0x90000000, rd, rs, offset); }$/;"	m
ldmxcsr_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def ldmxcsr_m(a: X86_64Addr) -> this {$/;"	m
ldrbsx	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	def ldrbsx(rd: ArmReg, rn: ArmReg, off: ArmSmallOffset) { emitlss(0x011000D0, rd, rn, off); }$/;"	m
ldrbzx	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	def ldrbzx(rd: ArmReg, rn: ArmReg, off: ArmOffset) { emitls(0x05500000, rd, rn, off); }$/;"	m
ldrd_r_r_i9	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def ldrd_r_r_i9(rt: Arm64Gpr, rn: Arm64Gpr, imm: i9) -> this {$/;"	m
ldrd_r_r_r_ex_u1	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def ldrd_r_r_r_ex_u1(rt: Arm64Gpr, rn: Arm64Gpr, rm: Arm64Gpr, ex: MemRegExtend, imm: u1) -> this {$/;"	m
ldrhsx	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	def ldrhsx(rd: ArmReg, rn: ArmReg, off: ArmSmallOffset) { emitlss(0x011000F0, rd, rn, off); }$/;"	m
ldrhzx	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	def ldrhzx(rd: ArmReg, rn: ArmReg, off: ArmSmallOffset) { emitlss(0x011000B0, rd, rn, off); }$/;"	m
ldrliterald_r_i19	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def ldrliterald_r_i19(rt: Arm64Gpr, imm: i19) -> this {$/;"	m
ldrliteralq_r_i19	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def ldrliteralq_r_i19(rt: Arm64Gpr, imm: i19) -> this {$/;"	m
ldrpostd_r_r_i9	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def ldrpostd_r_r_i9(rt: Arm64Gpr, rn: Arm64Gpr, imm: i9) -> this {$/;"	m
ldrpostq_r_r_i9	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def ldrpostq_r_r_i9(rt: Arm64Gpr, rn: Arm64Gpr, imm: i9) -> this {$/;"	m
ldrpred_r_r_i9	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def ldrpred_r_r_i9(rt: Arm64Gpr, rn: Arm64Gpr, imm: i9) -> this {$/;"	m
ldrpreq_r_r_i9	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def ldrpreq_r_r_i9(rt: Arm64Gpr, rn: Arm64Gpr, imm: i9) -> this {$/;"	m
ldrq_r_r_i9	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def ldrq_r_r_i9(rt: Arm64Gpr, rn: Arm64Gpr, imm: i9) -> this {$/;"	m
ldrq_r_r_r_ex_u1	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def ldrq_r_r_r_ex_u1(rt: Arm64Gpr, rn: Arm64Gpr, rm: Arm64Gpr, ex: MemRegExtend, imm: u1) -> this {$/;"	m
ldrunsignedd_r_r_u12	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def ldrunsignedd_r_r_u12(rt: Arm64Gpr, rn: Arm64Gpr, imm: u12) -> this {$/;"	m
ldrunsignedq_r_r_u12	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def ldrunsignedq_r_r_u12(rt: Arm64Gpr, rn: Arm64Gpr, imm: u12) -> this {$/;"	m
ldrw	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	def ldrw(rd: ArmReg, rn: ArmReg, off: ArmOffset) { emitls(0x05100000, rd, rn, off); }$/;"	m
le	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	def le() -> this { cond = ArmCond.LE; }$/;"	m
lea	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def lea(a: X86_64Gpr, b: X86_64Addr) -> this {$/;"	m
lea	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def lea(a: X86Reg, b: X86Addr) { \/\/ load effective address$/;"	m
length	$VIRGIL_LOC/lib/net/tcpip/Packets.v3	/^type IpV4HeaderVersion(version: u4, length: u4) #packing 0b_llllvvvv;$/;"	d
length	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	def length() -> int {$/;"	m
length	$VIRGIL_LOC/lib/pdk/Extism.v3	/^	def length(offset : i64) -> i64;$/;"	f
length	$VIRGIL_LOC/lib/pdk/Memory.v3	/^class Memory(offset: i64, length: i64) {$/;"	d
length	$VIRGIL_LOC/lib/util/Arrays.v3	/^	def length<T>(array: Array<T>) -> int {$/;"	f
length	$VIRGIL_LOC/lib/util/List.v3	/^	def length<T>(list: List<T>) -> int {$/;"	f
length	$VIRGIL_LOC/lib/util/StringBuilder.v3	/^	def var length: int;$/;"	d
length	$VIRGIL_LOC/lib/util/Vector.v3	/^	var length: int;$/;"	d
lflag	$VIRGIL_LOC/lib/term/Termios.v3	/^	+12	lflag:		u32;$/;"	d
lh	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	def lh(rd: MipsReg, rs: MipsReg, offset: u16)  { emit_r2i(0x84000000, rd, rs, offset); }$/;"	m
lhu	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	def lhu(rd: MipsReg, rs: MipsReg, offset: u16) { emit_r2i(0x94000000, rd, rs, offset); }$/;"	m
limit	$VIRGIL_LOC/lib/util/DataReader.v3	/^	def var limit: int = data.length;	\/\/ read limit within array$/;"	d
limit	$VIRGIL_LOC/lib/util/TextReader.v3	/^	def var limit = data.length;		\/\/ limit within array$/;"	d
line	$VIRGIL_LOC/lib/packing/CiRuntime.v3	/^	case LineCol(line: u11, col: u8) 	#packing 0b_0lll_llllllll_cccccccc;$/;"	d
line	$VIRGIL_LOC/lib/term/Termios.v3	/^	+16	line:		byte;$/;"	d
line	$VIRGIL_LOC/lib/util/TextReader.v3	/^	def var line: int;			\/\/ current line number$/;"	d
lineEnds	$VIRGIL_LOC/lib/util/TextReader.v3	/^	def var lineEnds = Vector<int>.new();$/;"	d
list	$VIRGIL_LOC/lib/util/Map.v3	/^	var list: List<V>;$/;"	d
list	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+0	list:			u64\/*:Pointer*\/;$/;"	d
listHead	$VIRGIL_LOC/lib/util/WorkQueue.v3	/^	private var listHead: WorkUnit;$/;"	d
listTail	$VIRGIL_LOC/lib/util/WorkQueue.v3	/^	private var listTail: WorkUnit;$/;"	d
list_op_pending	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+16	list_op_pending:	u64\/*:Pointer*\/;$/;"	d
listen	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	private def listen() -> NetResult<void> {$/;"	m
lit	$VIRGIL_LOC/lib/term/Vt100.v3	/^	private def lit(s: string) -> void -> void {$/;"	f
ln	$VIRGIL_LOC/lib/term/Vt100.v3	/^	def ln = System.ln;$/;"	d
ln	$VIRGIL_LOC/lib/util/StringBuilder.v3	/^	def ln() -> this {$/;"	m
ln2HI	$VIRGIL_LOC/lib/math/Math.v3	/^def ln2HI	= [$/;"	d
ln2LO	$VIRGIL_LOC/lib/math/Math.v3	/^def ln2LO 	= [$/;"	d
ln2_hi	$VIRGIL_LOC/lib/math/Math.v3	/^def ln2_hi = 6.93147180369123816490e-1;		\/* 3FE62E42 FEE00000 *\/$/;"	d
ln2_lo	$VIRGIL_LOC/lib/math/Math.v3	/^def ln2_lo = 1.90821492927058770002e-10;	\/* 3DEA39EF 35793C76 *\/$/;"	d
lo_val	$VIRGIL_LOC/lib/util/Layouts.v3	/^	+0	lo_val:	u64;$/;"	d
load	$VIRGIL_LOC/lib/util/Option.v3	/^	def load(from: Options) {$/;"	m
load_u64	$VIRGIL_LOC/lib/pdk/Extism.v3	/^	def load_u64(offset : i64) -> i64;$/;"	f
load_u8	$VIRGIL_LOC/lib/pdk/Extism.v3	/^	def load_u8(offset : i64) -> byte;$/;"	f
loads	$VIRGIL_LOC/lib/wasm-linux/WaliLayouts.v3	/^        +8      loads:		u64[3];$/;"	d
loads	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^        +8      loads:		u64[3];$/;"	d
localPort	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	def var localPort: int;$/;"	d
lock	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def lock() -> this {$/;"	m
lock	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def lock() -> this { emitb(0xF0); }$/;"	m
log	$VIRGIL_LOC/lib/math/Math.v3	/^	def log = log0;$/;"	d
log	$VIRGIL_LOC/lib/util/Ints.v3	/^	def log(i: u32) -> int {$/;"	f
log	$VIRGIL_LOC/lib/util/Longs.v3	/^	def log(i: u64) -> int {$/;"	f
log0	$VIRGIL_LOC/lib/math/Math.v3	/^def log0(x: double) -> double {$/;"	m
log10Pow2	$VIRGIL_LOC/lib/util/Floats.v3	/^	private def log10Pow2(e: u32) -> int {$/;"	f
log10Pow5	$VIRGIL_LOC/lib/util/Floats.v3	/^	private def log10Pow5(e: u32) -> int {$/;"	f
logDebugStr	$VIRGIL_LOC/lib/pdk/Host.v3	/^	def logDebugStr(s: string) {$/;"	f
logErrorStr	$VIRGIL_LOC/lib/pdk/Host.v3	/^	def logErrorStr(s: string) {$/;"	f
logInfoStr	$VIRGIL_LOC/lib/pdk/Host.v3	/^	def logInfoStr(s: string) {$/;"	f
logWarnStr	$VIRGIL_LOC/lib/pdk/Host.v3	/^	def logWarnStr(s: string) {$/;"	f
log_debug	$VIRGIL_LOC/lib/pdk/Extism.v3	/^	def log_debug(offset : i64);$/;"	f
log_error	$VIRGIL_LOC/lib/pdk/Extism.v3	/^	def log_error(offset : i64);$/;"	f
log_info	$VIRGIL_LOC/lib/pdk/Extism.v3	/^	def log_info(offset : i64);$/;"	f
log_warn	$VIRGIL_LOC/lib/pdk/Extism.v3	/^	def log_warn(offset : i64);$/;"	f
low3	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def low3 = byte.view(regnum & 0b111);$/;"	d
lowerLeftChar	$VIRGIL_LOC/lib/term/Vt100.v3	/^def lowerLeftChar  = '\x6d'; \/\/ 192$/;"	d
lowerRightChar	$VIRGIL_LOC/lib/term/Vt100.v3	/^def lowerRightChar = '\x6a'; \/\/ 217$/;"	d
loword	$VIRGIL_LOC/lib/math/Math.v3	/^def loword(x: double) -> u32 {$/;"	m
ls	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	def ls() -> this { cond = ArmCond.LS; }$/;"	m
lsli	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	def lsli(rd: ArmReg, rm: ArmReg, imm: u5) { mov(rd, ArmOperand.RegShlImm(rm, imm)); }$/;"	m
lslr	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	def lslr(rd: ArmReg, rm: ArmReg, sh: ArmReg) { mov(rd, ArmOperand.RegShlReg(rm, sh)); }$/;"	m
lsri	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	def lsri(rd: ArmReg, rm: ArmReg, imm: u5) { mov(rd, ArmOperand.RegShrImm(rm, imm)); }$/;"	m
lsrr	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	def lsrr(rd: ArmReg, rm: ArmReg, sh: ArmReg) { mov(rd, ArmOperand.RegShrReg(rm, sh)); }$/;"	m
lt	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	def lt() -> this { cond = ArmCond.LT; }$/;"	m
lui	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	def lui(rd: MipsReg, imm: u16)                 { emit_r2i(0x3c000000, MipsReg.R0, rd, imm); }$/;"	m
lw	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	def lw(rd: MipsReg, rs: MipsReg, offset: u16)  { emit_r2i(0x8c000000, rd, rs, offset); }$/;"	m
m_b	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	case m_b(a: X86_64Addr, i: byte);$/;"	d
m_cl	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def m_cl(name: string, a: X86_64Addr, rex: byte) -> this {$/;"	m
m_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def m_i(name: string, a: X86_64Addr, i: int, rex: byte) -> this {$/;"	m
m_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	case m_i(a: X86_64Addr, i: int);$/;"	d
m_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def m_r(name: string, a: X86_64Addr, b: X86_64Gpr, rex: byte) -> this {$/;"	m
m_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	case m_r(a: X86_64Addr, b: X86_64Gpr);$/;"	d
m_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def m_s(name: string, a: X86_64Addr, b: X86_64Xmmr, rex: byte) -> this {$/;"	m
m_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	case m_s(a: X86_64Addr, b: X86_64Xmmr);$/;"	d
m_s_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def m_s_i(name: string, a: X86_64Addr, b: X86_64Xmmr, imm: int, rex: byte) -> this {$/;"	m
machine	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^        +260    machine:        byte[65];$/;"	d
magic	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^	+0	magic: 		u32; \/\/ == "\x7fELF"$/;"	d
makeArray	$VIRGIL_LOC/lib/file/json/JsonParser.v3	/^	def makeArray<T>(vs: Range<T>, f: T -> JsonValue) -> JsonValue.JArray {$/;"	f
mantissa	$VIRGIL_LOC/lib/util/NumberParser.v3	/^	case Float(sign: int, exp: int, mantissa: u64);$/;"	d
mantissa32	$VIRGIL_LOC/lib/util/FpSketch.v3	/^	def mantissa32() -> (u32, int) {$/;"	m
mantissa64	$VIRGIL_LOC/lib/util/FpSketch.v3	/^	def mantissa64() -> (u64, int) {$/;"	m
map	$VIRGIL_LOC/lib/pdk/Header.v3	/^	def map = Strings.newMap<string>();$/;"	d
map	$VIRGIL_LOC/lib/util/Arrays.v3	/^	def map<A, B>(array: Array<A>, func: A -> B) -> Array<B> {$/;"	f
map	$VIRGIL_LOC/lib/util/List.v3	/^	def map<A, B>(list: List<A>, func: A -> B) -> List<B> {$/;"	f
map	$VIRGIL_LOC/lib/util/Map.v3	/^	var map: HashMap<K, V>;$/;"	d
map	$VIRGIL_LOC/lib/util/Option.v3	/^	def map   = Strings.newMap<Opt>();	\/\/ maps names to options$/;"	d
map	$VIRGIL_LOC/lib/util/Ranges.v3	/^	def map<A, B>(r: Range<A>, func: A -> B) -> Array<B> {$/;"	f
mapId	$VIRGIL_LOC/lib/util/Arrays.v3	/^	def mapId<T>(array: Array<T>, func: T -> T) -> Array<T> {$/;"	f
mapInto	$VIRGIL_LOC/lib/util/Arrays.v3	/^	def mapInto<A, B>(array: Array<A>, func: A -> B, dest: Array<B>) {$/;"	f
mapInto	$VIRGIL_LOC/lib/util/Ranges.v3	/^	def mapInto<A, B>(src: Range<A>, func: A -> B, dest: Range<B>) {$/;"	f
mapLen	$VIRGIL_LOC/lib/pdk/Header.v3	/^	var mapLen = 0;$/;"	d
marker	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def var marker: int;		\/\/ a marker in w, e.g., where the current functio started$/;"	d
mask	$VIRGIL_LOC/lib/term/Termios.v3	/^enum TermiosOutputFlag(mask: u32) {$/;"	d
match1	$VIRGIL_LOC/lib/util/DataReader.v3	/^	def match1(b: byte) -> bool {$/;"	m
matches	$VIRGIL_LOC/lib/util/GlobMatcher.v3	/^	def matches(input: string) -> bool {$/;"	m
matchesAtom	$VIRGIL_LOC/lib/util/Sexpr.v3	/^    def matchesAtom(atom_str: string) -> bool {$/;"	m
matrix	$VIRGIL_LOC/lib/util/BitMatrix.v3	/^type BitMatrixRow(matrix: BitMatrix, index: int) #unboxed {$/;"	d
max	$VIRGIL_LOC/lib/util/DataWriter.v3	/^	private var max: int;			\/\/ remembers the maximum position written if at()'d$/;"	d
max	$VIRGIL_LOC/lib/util/Ints.v3	/^	def max(a: int, b: int) -> int {$/;"	f
maxpd_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def maxpd_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
maxps_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def maxps_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
maxsd	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def maxsd(a: SSEReg, b: SSERm) { emitbbb_s_sm(0xF2, 0x0F, 0x5F, a, b); }$/;"	m
maxsd_s_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def maxsd_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {$/;"	m
maxsd_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def maxsd_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
maxss	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def maxss(a: SSEReg, b: SSERm) { emitbbb_s_sm(0xF3, 0x0F, 0x5F, a, b); }$/;"	m
maxss_s_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def maxss_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {$/;"	m
maxss_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def maxss_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
mem	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+16	mem:	u64\/*:Pointer*\/;$/;"	d
mem_unit	$VIRGIL_LOC/lib/wasm-linux/WaliLayouts.v3	/^        +104    mem_unit:       u32;$/;"	d
mem_unit	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^        +104    mem_unit:       u32;$/;"	d
memsz	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+24	memsz:	u64;$/;"	d
meth	$VIRGIL_LOC/lib/packing/CiRuntime.v3	/^	case Full(meth: u20, ex: u4, col: u8, line: u16)	#packing 0b_mmmmmmmm_mmmmmmmm_mmmmeeee_cccccccc_llllllll_llllllll; \/\/ TODO: meth != u20.max$/;"	d
meth_name	$VIRGIL_LOC/lib/packing/CiRuntime.v3	/^type CiMethodEntry(meth_name: u24, type_name: u16, framewords: u12, offset: u12) #unboxed$/;"	d
method	$VIRGIL_LOC/lib/pdk/Http.v3	/^class Request(method: Method, header: Header, url: string) {$/;"	d
mfence	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def mfence() -> this {$/;"	m
mfhi	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	def mfhi(rd: MipsReg) { w.put_b32be(0x00000010 | int.view(rd.tag) << 11); }$/;"	m
mflo	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	def mflo(rd: MipsReg) { w.put_b32be(0x00000012 | int.view(rd.tag) << 11); }$/;"	m
mi	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	def mi() -> this { cond = ArmCond.MI; }$/;"	m
min	$VIRGIL_LOC/lib/util/Ints.v3	/^	def min(a: int, b: int) -> int {$/;"	f
min	$VIRGIL_LOC/lib/util/Longs.v3	/^	def min(a: long, b: long) -> long {$/;"	f
minpd_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def minpd_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
minps_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def minps_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
minsd	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def minsd(a: SSEReg, b: SSERm) { emitbbb_s_sm(0xF2, 0x0F, 0x5D, a, b); }$/;"	m
minsd_s_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def minsd_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {$/;"	m
minsd_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def minsd_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
minss	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def minss(a: SSEReg, b: SSERm) { emitbbb_s_sm(0xF3, 0x0F, 0x5D, a, b); }$/;"	m
minss_s_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def minss_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {$/;"	m
minss_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def minss_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
mmsghdr	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^layout mmsghdr {$/;"	l
modtime	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+8	modtime:	u64;$/;"	d
more	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	def more() -> bool {$/;"	m
more	$VIRGIL_LOC/lib/util/DataReader.v3	/^	def more() -> bool {$/;"	m
mov	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	def mov(rd: ArmReg, op: ArmOperand) { data1_1(26, rd, op); }$/;"	m
movaps_s_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def movaps_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {$/;"	m
movaps_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def movaps_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
movb_m_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def movb_m_i(a: X86_64Addr, i: int) -> this {$/;"	m
movb_m_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def movb_m_r(a: X86_64Addr, b: X86_64Gpr) -> this {$/;"	m
movb_r_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def movb_r_i(a: X86_64Gpr, i: int) -> this {$/;"	m
movb_r_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def movb_r_m(a: X86_64Gpr, b: X86_64Addr) -> this {$/;"	m
movb_r_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def movb_r_r(a: X86_64Gpr, b: X86_64Gpr) -> this {$/;"	m
movb_r_rm	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def movb_r_rm(a: X86Reg, b: X86Rm) { emitb_rm(0x8A, b, a.index); }$/;"	m
movb_rm_i	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def movb_rm_i(a: X86Rm, i: int) { \/\/ move immediate byte$/;"	m
movb_rm_r	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def movb_rm_r(a: X86Rm, b: X86Reg) { emitb_rm(0x88, a, b.index); }$/;"	m
movbsx	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def movbsx(a: X86Reg, b: X86Rm) { emitbb_rm(0x0F, 0xBE, b, a.index); } \/\/ byte load, sign extend$/;"	m
movbsx_r_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def movbsx_r_m(a: X86_64Gpr, b: X86_64Addr) -> this {$/;"	m
movbsx_r_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def movbsx_r_r(a: X86_64Gpr, b: X86_64Gpr) -> this {$/;"	m
movbzx	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def movbzx(a: X86Reg, b: X86Rm) { emitbb_rm(0x0F, 0xB6, b, a.index); } \/\/ byte load, zero extend$/;"	m
movbzx_r_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def movbzx_r_m(a: X86_64Gpr, b: X86_64Addr) -> this {$/;"	m
movbzx_r_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def movbzx_r_r(a: X86_64Gpr, b: X86_64Gpr) -> this {$/;"	m
movd_m_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def movd_m_i(a: X86_64Addr, i: int) -> this {$/;"	m
movd_m_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def movd_m_r(a: X86_64Addr, b: X86_64Gpr) -> this {$/;"	m
movd_r_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def movd_r_i(a: X86_64Gpr, i: int) -> this {$/;"	m
movd_r_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def movd_r_m(a: X86_64Gpr, b: X86_64Addr) -> this {$/;"	m
movd_r_r	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def movd_r_r(rd: Arm64Gpr, rm: Arm64Gpr) -> this {$/;"	m
movd_r_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def movd_r_r(a: X86_64Gpr, b: X86_64Gpr) -> this {$/;"	m
movd_r_rm	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def movd_r_rm(a: X86Reg, b: X86Rm) {$/;"	m
movd_r_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def movd_r_s(b: X86_64Reg, a: X86_64Xmmr) -> this {$/;"	m
movd_r_u16	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def movd_r_u16(rd: Arm64Gpr, imm: u16) -> this {$/;"	m
movd_rm_i	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def movd_rm_i(a: X86Rm, i: int) { \/\/ move immediate doubleword$/;"	m
movd_rm_r	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def movd_rm_r(a: X86Rm, b: X86Reg) {$/;"	m
movd_rm_s	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def movd_rm_s(a: X86Rm, b: SSEReg) {$/;"	m
movd_s_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def movd_s_r(a: X86_64Xmmr, b: X86_64Reg) -> this {$/;"	m
movd_s_rm	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def movd_s_rm(a: SSEReg, b: X86Rm) {$/;"	m
movddup_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def movddup_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
movdqu_m_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def movdqu_m_s(a: X86_64Addr, b: X86_64Xmmr) -> this {$/;"	m
movdqu_s_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def movdqu_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {$/;"	m
move	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	def move(rd: MipsReg, rs: MipsReg) { or(rd, rs, MipsReg.R0); }$/;"	m
moveCursor	$VIRGIL_LOC/lib/term/Vt100.v3	/^	def moveCursor(x: int, y: int) {$/;"	f
moveCursorBackward	$VIRGIL_LOC/lib/term/Vt100.v3	/^	def moveCursorBackward = icmd('D');$/;"	d
moveCursorDown	$VIRGIL_LOC/lib/term/Vt100.v3	/^	def moveCursorDown = icmd('B');$/;"	d
moveCursorForward	$VIRGIL_LOC/lib/term/Vt100.v3	/^	def moveCursorForward = icmd('C');$/;"	d
moveCursorUp	$VIRGIL_LOC/lib/term/Vt100.v3	/^	def moveCursorUp = icmd('A');$/;"	d
moveHome	$VIRGIL_LOC/lib/term/Vt100.v3	/^	def moveHome = esc("[H");$/;"	d
movhlps_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def movhlps_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
movkd_r_u16_u1	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def movkd_r_u16_u1(rd: Arm64Gpr, imm: u16, lsl: u1) -> this {$/;"	m
movkq_r_i16_u2	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def movkq_r_i16_u2(rd: Arm64Gpr, imm: i16, lsl: u2) -> this {$/;"	m
movlhps_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def movlhps_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
movmskpd_r_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def movmskpd_r_s(a: X86_64Gpr, b: X86_64Xmmr) -> this {$/;"	m
movmskps_r_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def movmskps_r_s(a: X86_64Gpr, b: X86_64Xmmr) -> this {$/;"	m
movq_m_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def movq_m_i(a: X86_64Addr, i: int) -> this {$/;"	m
movq_m_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def movq_m_r(a: X86_64Addr, b: X86_64Gpr) -> this {$/;"	m
movq_r_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def movq_r_i(a: X86_64Gpr, i: int) -> this {$/;"	m
movq_r_l	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def movq_r_l(a: X86_64Gpr, l: long) -> this {$/;"	m
movq_r_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def movq_r_m(a: X86_64Gpr, b: X86_64Addr) -> this {$/;"	m
movq_r_p	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def movq_r_p(a: X86_64Gpr, l: long) -> int {$/;"	m
movq_r_r	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def movq_r_r(rd: Arm64Gpr, rm: Arm64Gpr) -> this {$/;"	m
movq_r_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def movq_r_r(a: X86_64Gpr, b: X86_64Gpr) -> this {$/;"	m
movq_r_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def movq_r_s(b: X86_64Reg, a: X86_64Xmmr) -> this {$/;"	m
movq_r_u16	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def movq_r_u16(rd: Arm64Gpr, imm: u16) -> this {$/;"	m
movq_s_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def movq_s_r(a: X86_64Xmmr, b: X86_64Reg) -> this {$/;"	m
movq_s_sm	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def movq_s_sm(a: SSEReg, b: SSERm) {$/;"	m
movq_sm_s	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def movq_sm_s(a: SSERm, b: SSEReg) {$/;"	m
movs	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	def movs(rd: ArmReg, op: ArmOperand) { data1_1(27, rd, op); }$/;"	m
movsb	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def movsb() -> this {$/;"	m
movsb	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def movsb() { emitb(0xA4); }$/;"	m
movsd_m_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def movsd_m_s(a: X86_64Addr, b: X86_64Xmmr) -> this {$/;"	m
movsd_s_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def movsd_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {$/;"	m
movsd_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def movsd_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
movsd_s_sm	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def movsd_s_sm(a: SSEReg, b: SSERm) { \/\/ load double$/;"	m
movsd_sm_s	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def movsd_sm_s(a: SSERm, b: SSEReg) { \/\/ store double$/;"	m
movshdup_s_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def movshdup_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {$/;"	m
movshdup_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def movshdup_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
movss_m_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def movss_m_s(a: X86_64Addr, b: X86_64Xmmr) -> this {$/;"	m
movss_s_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def movss_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {$/;"	m
movss_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def movss_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
movss_s_sm	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def movss_s_sm(a: SSEReg, b: SSERm) { \/\/ load float$/;"	m
movss_sm_s	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def movss_sm_s(a: SSERm, b: SSEReg) { \/\/ store float$/;"	m
movw_m_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def movw_m_i(a: X86_64Addr, imm: int) -> this {$/;"	m
movw_m_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def movw_m_r(a: X86_64Addr, b: X86_64Gpr) -> this {$/;"	m
movw_r_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def movw_r_i(a: X86_64Gpr, imm: int) -> this {$/;"	m
movw_r_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def movw_r_m(a: X86_64Gpr, b: X86_64Addr) -> this {$/;"	m
movw_r_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def movw_r_r(a: X86_64Gpr, b: X86_64Gpr) -> this {$/;"	m
movw_rm_i	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def movw_rm_i(a: X86Rm, imm: int) { \/\/ word store$/;"	m
movw_rm_r	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def movw_rm_r(a: X86Rm, b: X86Reg) { emitbb_rm(0x66, 0x89, a, b.index); } \/\/ word store$/;"	m
movwsx	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def movwsx(a: X86Reg, b: X86Rm) { emitbb_rm(0x0F, 0xBF, b, a.index); } \/\/ word load, sign extend$/;"	m
movwsx_r_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def movwsx_r_m(a: X86_64Gpr, b: X86_64Addr) -> this {$/;"	m
movwsx_r_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def movwsx_r_r(a: X86_64Gpr, b: X86_64Gpr) -> this {$/;"	m
movwzx	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def movwzx(a: X86Reg, b: X86Rm) { emitbb_rm(0x0F, 0xB7, b, a.index); } \/\/ word load, zero extend$/;"	m
movwzx_r_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def movwzx_r_m(a: X86_64Gpr, b: X86_64Addr) -> this {$/;"	m
movwzx_r_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def movwzx_r_r(a: X86_64Gpr, b: X86_64Gpr) -> this {$/;"	m
msg_arg_data_copy	$VIRGIL_LOC/lib/ic/ic0_untyped.v3	/^	def msg_arg_data_copy(dst: i32, offset: i32, size: i32);				\/\/ I U Q Ry F$/;"	f
msg_arg_data_size	$VIRGIL_LOC/lib/ic/ic0_untyped.v3	/^	def msg_arg_data_size() -> i32;								\/\/ I U Q Ry F$/;"	f
msg_caller_copy	$VIRGIL_LOC/lib/ic/ic0_untyped.v3	/^	def msg_caller_copy(dst: i32, offset: i32, size: i32);		 			\/\/ I G U Q F$/;"	f
msg_caller_size	$VIRGIL_LOC/lib/ic/ic0_untyped.v3	/^	def msg_caller_size() -> i32;								\/\/ I G U Q F$/;"	f
msg_control	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+32	msg_control:	u64\/*:Pointer*\/;$/;"	d
msg_controllen	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+40	msg_controllen:	u64;$/;"	d
msg_cycles_accept	$VIRGIL_LOC/lib/ic/ic0_untyped.v3	/^	def msg_cycles_accept(max_amount: i64) -> i64;		  				\/\/ U Rt Ry$/;"	f
msg_cycles_accept128	$VIRGIL_LOC/lib/ic/ic0_untyped.v3	/^	def msg_cycles_accept128(max_amount_high: i64, max_amount_low: i64, dst: i32);		\/\/ U Rt Ry$/;"	f
msg_cycles_available	$VIRGIL_LOC/lib/ic/ic0_untyped.v3	/^	def msg_cycles_available() -> i64;							\/\/ U Rt Ry$/;"	f
msg_cycles_available128	$VIRGIL_LOC/lib/ic/ic0_untyped.v3	/^	def msg_cycles_available128(dst: i32);				  			\/\/ U Rt Ry$/;"	f
msg_cycles_refunded	$VIRGIL_LOC/lib/ic/ic0_untyped.v3	/^	def msg_cycles_refunded() -> i64;							\/\/ Rt Ry$/;"	f
msg_cycles_refunded128	$VIRGIL_LOC/lib/ic/ic0_untyped.v3	/^	def msg_cycles_refunded128(dst: i32);				  			\/\/ Rt Ry$/;"	f
msg_flags	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+48	msg_flags:	u32;$/;"	d
msg_hdr	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+0	msg_hdr:	msghdr;$/;"	d
msg_iov	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+16	msg_iov:	u64\/*:Pointer<iovec>*\/;$/;"	d
msg_iovlen	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+24	msg_iovlen:	u64;$/;"	d
msg_len	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+56	msg_len:	u32;$/;"	d
msg_method_name_copy	$VIRGIL_LOC/lib/ic/ic0_untyped.v3	/^	def msg_method_name_copy(dst: i32, offset: i32, size: i32);				\/\/ F$/;"	f
msg_method_name_size	$VIRGIL_LOC/lib/ic/ic0_untyped.v3	/^	def msg_method_name_size() -> i32;							\/\/ F$/;"	f
msg_name	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+0	msg_name:	u64\/*:Pointer*\/;$/;"	d
msg_namelen	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+8	msg_namelen:	u64;$/;"	d
msg_reject	$VIRGIL_LOC/lib/ic/ic0_untyped.v3	/^	def msg_reject(src: i32, size: i32);							\/\/ U Q Ry Rt$/;"	f
msg_reject_code	$VIRGIL_LOC/lib/ic/ic0_untyped.v3	/^	def msg_reject_code() -> i32;								\/\/ Ry Rt$/;"	f
msg_reject_msg_copy	$VIRGIL_LOC/lib/ic/ic0_untyped.v3	/^	def msg_reject_msg_copy(dst: i32, offset: i32, size: i32);				\/\/ Rt$/;"	f
msg_reject_msg_size	$VIRGIL_LOC/lib/ic/ic0_untyped.v3	/^	def msg_reject_msg_size() -> i32;							\/\/ Rt$/;"	f
msg_reply	$VIRGIL_LOC/lib/ic/ic0_untyped.v3	/^	def msg_reply();						 			\/\/ U Q Ry Rt$/;"	f
msg_reply_data_append	$VIRGIL_LOC/lib/ic/ic0_untyped.v3	/^	def msg_reply_data_append(src: i32, size: i32);			 			\/\/ U Q Ry Rt$/;"	f
msgbuf	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^layout msgbuf\/*(K: u32)*\/ {$/;"	l
msghdr	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^layout msghdr {$/;"	l
mtext	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+8	mtext:	byte[1]; \/\/ TODO$/;"	d
mtype	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+0	mtype:	u32;$/;"	d
mul	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	def mul(rd: ArmReg, rs: ArmReg, rm: ArmReg) { emit_rrr(0x00000090, rd, rm, rs); }$/;"	m
mul	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def mul(b: X86Rm) { emitb_rm(0xF7, b, 4); } \/\/ unsigned multiply (output in edx:eax)$/;"	m
mulAdd32	$VIRGIL_LOC/lib/util/FpSketch.v3	/^	def mulAdd32(factor: u32, carry: u32) -> this {$/;"	m
mulPow10	$VIRGIL_LOC/lib/util/FpSketch.v3	/^	def mulPow10(exp: u32) -> this {$/;"	m
mul_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def mul_m(b: X86_64Addr) -> this {$/;"	m
mul_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def mul_r(b: X86_64Gpr) -> this {$/;"	m
muld_r_r_r	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def muld_r_r_r(rd: Arm64Gpr, rn: Arm64Gpr, rm: Arm64Gpr) -> this {$/;"	m
mulpd_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def mulpd_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
mulps_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def mulps_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
mulq_r_r_r	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def mulq_r_r_r(rd: Arm64Gpr, rn: Arm64Gpr, rm: Arm64Gpr) -> this {$/;"	m
muls	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	def muls(rd: ArmReg, rs: ArmReg, rm: ArmReg) { emit_rrr(0x00100090, rd, rm, rs); }$/;"	m
mulsd	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def mulsd(a: SSEReg, b: SSERm) { emitbbb_s_sm(0xF2, 0x0F, 0x59, a, b); }$/;"	m
mulsd_s_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def mulsd_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {$/;"	m
mulsd_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def mulsd_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
mulss	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def mulss(a: SSEReg, b: SSERm) { emitbbb_s_sm(0xF3, 0x0F, 0x59, a, b); }$/;"	m
mulss_s_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def mulss_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {$/;"	m
mulss_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def mulss_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
mult	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	def mult(rs: MipsReg, rt: MipsReg)              { emit_r2i(0x00000000, rs, rt, 0x18); }$/;"	m
multAndShift	$VIRGIL_LOC/lib/util/Floats.v3	/^	private def multAndShift(val: u32, factor: (u32, u32, u32, u32), q: int) -> (u32, u32, u32, u32) {$/;"	f
multipleOfPowerOf2	$VIRGIL_LOC/lib/util/Floats.v3	/^	private def multipleOfPowerOf2(value: u32, p: u32) -> bool {$/;"	f
multipleOfPowerOf5	$VIRGIL_LOC/lib/util/Floats.v3	/^	private def multipleOfPowerOf5(value: u32, p: u32) -> bool {$/;"	f
multu	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	def multu(rs: MipsReg, rt: MipsReg)             { emit_r2i(0x00000000, rs, rt, 0x19); }$/;"	m
name	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^type ArmSmallOffset {$/;"	d
name	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^enum RegShift { LSL, LSR, ASR, NONE } \/\/ NONE shift is reserved for instructions like mul, div$/;"	d
name	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^type MipsReg {$/;"	d
name	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^enum RiscVFpr {$/;"	d
name	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^enum X86_64Rounding(value: int) {$/;"	d
name	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^type X86_64AddrMode {$/;"	d
name	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^enum RoundingMode(value: int) {$/;"	d
name	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^enum ElfType(code: u16) {$/;"	d
name	$VIRGIL_LOC/lib/file/json/JsonParser.v3	/^type JsonValue {$/;"	d
name	$VIRGIL_LOC/lib/net/tcpip/Packets.v3	/^enum TcpV4Flag {$/;"	d
name	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^type NetResult<T> {$/;"	d
name	$VIRGIL_LOC/lib/packing/CiRuntime.v3	/^type CiSourceEntry #unboxed {$/;"	d
name	$VIRGIL_LOC/lib/pdk/Config.v3	/^type Maybe<T> {$/;"	d
name	$VIRGIL_LOC/lib/pdk/Method.v3	/^enum Method {$/;"	d
name	$VIRGIL_LOC/lib/term/Termios.v3	/^enum TermiosOutputFlag(mask: u32) {$/;"	d
name	$VIRGIL_LOC/lib/util/Ints.v3	/^enum IntParseResult(code: int) {$/;"	d
name	$VIRGIL_LOC/lib/util/NumberParser.v3	/^type NumberParserValue {$/;"	d
name	$VIRGIL_LOC/lib/util/Option.v3	/^class Opt(name: string) {$/;"	d
name	$VIRGIL_LOC/lib/util/Sexpr.v3	/^type SExpr {$/;"	d
name16	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def name16: string;$/;"	d
name16	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^class X86Reg(name8: string, name16: string, name32: string, index: int) extends X86Rm {$/;"	d
name32	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def name32: string;$/;"	d
name32	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def name32: string;$/;"	d
name32	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^class X86Reg(name8: string, name16: string, name32: string, index: int) extends X86Rm {$/;"	d
name64	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def name64: string;$/;"	d
name64	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def name64: string;$/;"	d
name8	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def name8: string;$/;"	d
name8	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^class X86Reg(name8: string, name16: string, name32: string, index: int) extends X86Rm {$/;"	d
names	$VIRGIL_LOC/lib/util/Option.v3	/^	var names = Vector<string>.new();	\/\/ the names of all parsed options$/;"	d
ne	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	def ne() -> this { cond = ArmCond.NE; }$/;"	m
near_uses	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	var near_uses: List<int>;$/;"	d
neg	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def neg(a: Arm64Cond, b: Arm64Cond) { a.negate = b; b.negate = a; }$/;"	f
neg	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def neg(a: X86_64Cond, b: X86_64Cond) {$/;"	f
neg	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def neg(a: X86Rm) { emitb_rm(0xF7, a, 3); }$/;"	m
neg_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def neg_m(a: X86_64Addr) -> this {$/;"	m
neg_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def neg_r(a: X86_64Gpr) -> this {$/;"	m
negate	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	def negate() -> ArmCond {$/;"	m
negate	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	var negate: Arm64Cond;$/;"	d
negate	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	var negate: X86_64Cond;$/;"	d
negate	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	var negate: X86Cond;$/;"	d
negb_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def negb_m(a: X86_64Addr) -> this {$/;"	m
negb_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^        def negb_r(a: X86_64Gpr) -> this {$/;"	m
negd_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def negd_m(a: X86_64Addr) -> this {$/;"	m
negd_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^        def negd_r(a: X86_64Gpr) -> this {$/;"	m
negq_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def negq_m(a: X86_64Addr) -> this {$/;"	m
negq_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^        def negq_r(a: X86_64Gpr) -> this {$/;"	m
negw_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def negw_m(a: X86_64Addr) -> this {$/;"	m
negw_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^        def negw_r(a: X86_64Gpr) -> this {$/;"	m
new	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	new(name64, name32, regnum: u5) super(regnum) {}$/;"	m
new	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	new(outf, w) super() { }$/;"	m
new	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	new() {$/;"	m
new	$VIRGIL_LOC/lib/file/csv/CsvParser.v3	/^	new(columns, rows, cells) {}$/;"	m
new	$VIRGIL_LOC/lib/file/json/JsonParser.v3	/^	new(text: Array<byte>) super("", text) {}$/;"	m
new	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	new(port: int, isV6: bool) super(if(isV6, Net.ANY_V6, Net.ANY_V4), port, -1 \/* localPort *\/, SocketType.Udp, -1 \/* fd *\/) {$/;"	m
new	$VIRGIL_LOC/lib/pdk/Http.v3	/^	new(statusCode, body) {}$/;"	m
new	$VIRGIL_LOC/lib/util/DataReader.v3	/^	new(data) { }$/;"	m
new	$VIRGIL_LOC/lib/util/Edge.v3	/^	new(src, dest) {$/;"	m
new	$VIRGIL_LOC/lib/util/Map.v3	/^	new(key, val: V, next: Bucket<K,V>) {$/;"	m
new	$VIRGIL_LOC/lib/util/NumberParser.v3	/^	new() {$/;"	m
new	$VIRGIL_LOC/lib/util/Option.v3	/^	new(name: string, init, parseFun) : super(name) { val = init; }$/;"	m
new	$VIRGIL_LOC/lib/util/Sexpr.v3	/^    new(filename: string, data: Array<byte>) super(filename, data) {}$/;"	m
new	$VIRGIL_LOC/lib/util/TextReader.v3	/^	new(fileName, data) {$/;"	m
new	$VIRGIL_LOC/lib/util/Token.v3	/^	new(fileName: string, image, beginLine: int, beginColumn: int) $/;"	m
newAddrOption	$VIRGIL_LOC/lib/util/Option.v3	/^	def newAddrOption(name: string, val: u64) -> Option<u64> {$/;"	m
newBoolOption	$VIRGIL_LOC/lib/util/Option.v3	/^	def newBoolOption(name: string, val: bool) -> Option<bool> {$/;"	m
newFunc	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def newFunc() {$/;"	f
newIntOption	$VIRGIL_LOC/lib/util/Option.v3	/^	def newIntOption(name: string, val: int) -> Option<int> {$/;"	m
newLabel	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def newLabel() -> X86_64Label {$/;"	m
newMap	$VIRGIL_LOC/lib/util/Strings.v3	/^	def newMap<V>() -> HashMap<string, V> {$/;"	f
newOption	$VIRGIL_LOC/lib/util/Option.v3	/^	def newOption<T>(name: string, val: T, parseFun: string -> T) -> Option<T> {$/;"	m
newRequest	$VIRGIL_LOC/lib/pdk/Http.v3	/^	def newRequest(method: Method, url: string) -> Request {$/;"	f
newSizeOption	$VIRGIL_LOC/lib/util/Option.v3	/^	def newSizeOption(name: string, val: u32) -> Option<u32> {$/;"	m
newStringOption	$VIRGIL_LOC/lib/util/Option.v3	/^	def newStringOption(name: string, val: string) -> Option<string> {$/;"	m
next	$VIRGIL_LOC/lib/util/Edge.v3	/^	var next: Edge<T>;	\/\/ the forward link for the use list$/;"	d
next	$VIRGIL_LOC/lib/util/Map.v3	/^	var next: Bucket<K, V>;$/;"	d
next	$VIRGIL_LOC/lib/util/NumberParser.v3	/^	private def next() -> byte {$/;"	m
next	$VIRGIL_LOC/lib/util/Random.v3	/^	def next() -> int {$/;"	f
next	$VIRGIL_LOC/lib/util/Stack.v3	/^	def next() -> T {$/;"	m
next	$VIRGIL_LOC/lib/util/UID.v3	/^	var next: int; \/\/ a global counter for unique ids$/;"	d
next	$VIRGIL_LOC/lib/util/WorkQueue.v3	/^	var next: WorkUnit;$/;"	d
nextTabStop	$VIRGIL_LOC/lib/util/TextReader.v3	/^	def nextTabStop(column: int) -> int {$/;"	m
nil	$VIRGIL_LOC/lib/file/json/JsonParser.v3	/^	def nil(key: string) -> this { entries[key] = JsonValue.Null; }$/;"	m
nodename	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^        +65     nodename:       byte[65];$/;"	d
none	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	case none;$/;"	d
nonnull	$VIRGIL_LOC/lib/util/Strings.v3	/^	def nonnull(s: string) -> string {$/;"	f
nop	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	def nop() -> this { emit_i_type(7, RiscV64Gpr.X0, 3, RiscV64Gpr.X0, 0); }$/;"	m
nop	$VIRGIL_LOC/lib/util/Utf8.v3	/^	private def nop(u: u32) { }$/;"	f
nop1	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def nop1() -> this {$/;"	m
nop2	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def nop2() -> this {$/;"	m
nop3	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def nop3() -> this {$/;"	m
nop4	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def nop4() -> this {$/;"	m
not	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def not(a: X86Rm) { emitb_rm(0xF7, a, 2); }$/;"	m
not_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def not_m(a: X86_64Addr) -> this {$/;"	m
not_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def not_r(a: X86_64Gpr) -> this {$/;"	m
num	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	var num: int;$/;"	d
num	$VIRGIL_LOC/lib/file/json/JsonParser.v3	/^	def num(key: string, v: int) -> this { entries[key] = JsonValue.Int(v); }$/;"	m
numHyphens	$VIRGIL_LOC/lib/util/Option.v3	/^	var numHyphens = 1;			\/\/ number of hyphens starting option$/;"	d
numcols	$VIRGIL_LOC/lib/util/BitMatrix.v3	/^class BitMatrix(var numrows: int, var numcols: int) {$/;"	d
numrows	$VIRGIL_LOC/lib/util/BitMatrix.v3	/^class BitMatrix(var numrows: int, var numcols: int) {$/;"	d
o_threshold	$VIRGIL_LOC/lib/math/Math.v3	/^def o_threshold	= 7.09782712893383973096e+2;		\/* 40862E42 FEFA39EF *\/$/;"	d
oct0	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	case Ipv4(oct0: u8, oct1: u8, oct2: u8, oct3: u8);$/;"	d
oct1	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	case Ipv4(oct0: u8, oct1: u8, oct2: u8, oct3: u8);$/;"	d
oct2	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	case Ipv4(oct0: u8, oct1: u8, oct2: u8, oct3: u8);$/;"	d
oct3	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	case Ipv4(oct0: u8, oct1: u8, oct2: u8, oct3: u8);$/;"	d
of1	$VIRGIL_LOC/lib/util/Vector.v3	/^	def of1<T>(e: T) -> Vector<T> {$/;"	f
ofN	$VIRGIL_LOC/lib/util/Vector.v3	/^	def ofN<T>(array: Array<T>) -> Vector<T> {$/;"	f
off	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case SubImm(off: u8);$/;"	d
offset	$VIRGIL_LOC/lib/net/tcpip/Packets.v3	/^type TcpV4Control(flags: TcpV4Flag.set, offset: u4) #packing 0b_ffffffff_f???oooo;$/;"	d
offset	$VIRGIL_LOC/lib/packing/CiRuntime.v3	/^type CiMethodEntry(meth_name: u24, type_name: u16, framewords: u12, offset: u12) #unboxed$/;"	d
offset	$VIRGIL_LOC/lib/pdk/Memory.v3	/^class Memory(offset: i64, length: i64) {$/;"	d
oflag	$VIRGIL_LOC/lib/term/Termios.v3	/^	+4	oflag:		u32;$/;"	d
ok	$VIRGIL_LOC/lib/util/DataReader.v3	/^	def var ok: bool = true;		\/\/ true if no error$/;"	d
ok	$VIRGIL_LOC/lib/util/TextReader.v3	/^	def var ok: bool = true;		\/\/ true if no error$/;"	d
onEOF	$VIRGIL_LOC/lib/util/DataReader.v3	/^	var onEOF = DataReader.setEOFError;	\/\/ EOF callback$/;"	d
onError	$VIRGIL_LOC/lib/util/DataReader.v3	/^	var onError = DataReader.setFirstError;	\/\/ error callback$/;"	d
onError	$VIRGIL_LOC/lib/util/TextReader.v3	/^	var onError = TextReader.setFirstError;	\/\/ error callback$/;"	d
onSet	$VIRGIL_LOC/lib/util/Option.v3	/^	def onSet(f: T -> void) -> this { this.onSetFun = f; }$/;"	m
onSetFun	$VIRGIL_LOC/lib/util/Option.v3	/^	var onSetFun: T -> void;	\/\/ optional action to take to set value$/;"	d
onSocketOpen	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	def onSocketOpen() -> NetResult<void> {$/;"	m
ones	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	private def ones = Arm64Gpr.new("", "", 0x1F); \/\/ register with all ones for regnum$/;"	d
op	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def op(name: string) -> this {$/;"	m
open	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	def open() -> NetResult<void> {$/;"	m
operator	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^class X86Op2(asm: X86Assembler, operator: int) {$/;"	d
opt1	$VIRGIL_LOC/lib/util/TextReader.v3	/^	def opt1(ch: byte) -> int {$/;"	m
optN	$VIRGIL_LOC/lib/util/TextReader.v3	/^	def optN(s: string) -> int {$/;"	m
or	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	def or(rd: MipsReg, rs: MipsReg, rt: MipsReg)   { emit_r3(0x00000025, rd, rs, rt); }$/;"	m
or	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	var or:	 X86Op2;$/;"	d
or	$VIRGIL_LOC/lib/util/BitMatrix.v3	/^	def or(that: BitMatrixRow) {$/;"	m
or_m_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def or_m_i(a: X86_64Addr, i: int) -> this    { emitop2_m_i(a, i, OP_REX, 1); }$/;"	m
or_m_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def or_m_r(a: X86_64Addr, b: X86_64Gpr) -> this { emitop2_m_r(a, b, OP_REX, 1); }$/;"	m
or_r_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def or_r_i(a: X86_64Gpr, i: int) -> this     { emitop2_r_i(a, i, OP_REX, 1); }$/;"	m
or_r_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def or_r_m(a: X86_64Gpr, b: X86_64Addr) -> this { emitop2_r_m(a, b, OP_REX, 1); }$/;"	m
or_r_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def or_r_r(a: X86_64Gpr, b: X86_64Gpr) -> this  { emitop2_r_r(a, b, OP_REX, 1); }$/;"	m
orb_m_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def orb_m_r(a: X86_64Addr, b: X86_64Gpr) -> this {$/;"	m
ord_m_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def ord_m_r(a: X86_64Addr, b: X86_64Gpr) -> this {$/;"	m
ori	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	def ori(rd: MipsReg, rs: MipsReg, imm: u16)     { emit_r2i(0x00000034, rd, rs, imm); }$/;"	m
ori	$VIRGIL_LOC/lib/util/BitMatrix.v3	/^	def ori(a: int) {$/;"	m
orpd_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def orpd_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
orps_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def orps_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
orq_m_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def orq_m_r(a: X86_64Addr, b: X86_64Gpr) -> this {$/;"	m
orr	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	def orr(rd: ArmReg, rn: ArmReg, op: ArmOperand) { data2_1(24, rd, rn, op); }$/;"	m
orrd_r_r_r_sh_u5	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def orrd_r_r_r_sh_u5(rd: Arm64Gpr, rn: Arm64Gpr, rm: Arm64Gpr, sh: RegShift, imm: u5) -> this {$/;"	m
orrd_r_r_u12	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def orrd_r_r_u12(rd: Arm64Gpr, rn: Arm64Gpr, imm: u12) -> this {$/;"	m
orrq_r_r_i13	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def orrq_r_r_i13(rd: Arm64Gpr, rn: Arm64Gpr, imm: i13) -> this {$/;"	m
orrq_r_r_r_sh_u6	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def orrq_r_r_r_sh_u6(rd: Arm64Gpr, rn: Arm64Gpr, rm: Arm64Gpr, sh: RegShift, imm: u6) -> this {$/;"	m
orrs	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	def orrs(rd: ArmReg, rn: ArmReg, op: ArmOperand) { data2_1(25, rd, rn, op); }$/;"	m
orw_m_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def orw_m_r(a: X86_64Addr, b: X86_64Gpr) -> this {$/;"	m
ospeed	$VIRGIL_LOC/lib/term/Termios.v3	/^	+56	ospeed:		u32;$/;"	d
out	$VIRGIL_LOC/lib/term/Vt100.v3	/^	def out(n: int) {$/;"	m
out	$VIRGIL_LOC/lib/util/StringBuilder.v3	/^	def out(f: (Array<byte>, int, int) -> void) -> this {$/;"	m
outf	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	var outf: Range<byte> -> void;	\/\/ receives trace output$/;"	d
outln	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def outln() -> this {$/;"	m
output	$VIRGIL_LOC/lib/pdk/Host.v3	/^	def output(b: Array<byte>) {$/;"	f
output	$VIRGIL_LOC/lib/pdk/Http.v3	/^	def output() {$/;"	m
output	$VIRGIL_LOC/lib/pdk/Memory.v3	/^	def output() {$/;"	m
outputBytesToMemory	$VIRGIL_LOC/lib/pdk/Host.v3	/^	private def outputBytesToMemory(b: Array<byte>) -> Memory {$/;"	f
outputJsonValue	$VIRGIL_LOC/lib/pdk/Host.v3	/^	def outputJsonValue(j: void) {$/;"	f
outputString	$VIRGIL_LOC/lib/pdk/Host.v3	/^	def outputString(s: string) {$/;"	f
output_set	$VIRGIL_LOC/lib/pdk/Extism.v3	/^	def output_set(offset : i64, length : i64);$/;"	f
overflowDecimal	$VIRGIL_LOC/lib/util/NumberParser.v3	/^	private def overflowDecimal() -> NumberParserValue {$/;"	m
overwrite	$VIRGIL_LOC/lib/util/Vector.v3	/^	def overwrite<T>(v: Vector<T>, array: Array<T>) -> Vector<T> {$/;"	f
overwrite_sleb32	$VIRGIL_LOC/lib/util/DataWriter.v3	/^	def overwrite_sleb32(val: int) -> this {$/;"	m
overwrite_uleb32	$VIRGIL_LOC/lib/util/DataWriter.v3	/^	def overwrite_uleb32(val: int) -> this {$/;"	m
p_align	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^	+48	p_align:	 u64;$/;"	d
p_filesz	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^	+32	p_filesz:	 u64;$/;"	d
p_flags	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^	+4	p_flags:	 u32;$/;"	d
p_memsz	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^	+40	p_memsz:	 u64;$/;"	d
p_offset	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^	+8	p_offset:	 u64;$/;"	d
p_paddr	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^	+24	p_paddr:	 u64;$/;"	d
p_type	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^	+0	p_type:		u32;$/;"	d
p_vaddr	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^	+8	p_vaddr:	u32;$/;"	d
pabsb_s_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pabsb_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {$/;"	m
pabsb_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pabsb_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
pabsd_s_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pabsd_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {$/;"	m
pabsd_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pabsd_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
pabsw_s_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pabsw_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {$/;"	m
pabsw_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pabsw_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
packssdw_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def packssdw_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
packsswb_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def packsswb_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
packusdw_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def packusdw_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
packuswb_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def packuswb_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
pad	$VIRGIL_LOC/lib/util/List.v3	/^	def pad<T>(list: List<T>, item: T, length: int) -> List<T> {$/;"	f
pad	$VIRGIL_LOC/lib/util/StringBuilder.v3	/^	def pad(ch: byte, nlen: int) -> this {$/;"	m
paddb_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def paddb_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
paddd_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def paddd_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
paddq_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def paddq_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
paddsb_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def paddsb_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
paddsw_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def paddsw_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
paddusb_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def paddusb_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
paddusw_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def paddusw_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
paddw_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def paddw_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
padr	$VIRGIL_LOC/lib/util/FpSketch.v3	/^	private def padr(nwords: int) -> bool {$/;"	m
pairs	$VIRGIL_LOC/lib/file/json/JsonParser.v3	/^	def pairs = Vector<(K, V)>.new();$/;"	d
pand_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pand_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
pandn_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pandn_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
parent_id	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+24	parent_id:	u64;$/;"	d
parse	$VIRGIL_LOC/lib/file/csv/CsvParser.v3	/^	def parse() -> CsvData {$/;"	m
parse	$VIRGIL_LOC/lib/util/NumberParser.v3	/^	def parse() -> bool {$/;"	m
parse	$VIRGIL_LOC/lib/util/Option.v3	/^	def parse(val: string);$/;"	m
parse0bBin	$VIRGIL_LOC/lib/util/Ints.v3	/^	def parse0bBin(a: Array<byte>, pos: int) -> (int, u32) {$/;"	f
parse0bBin	$VIRGIL_LOC/lib/util/Longs.v3	/^	def parse0bBin(a: Array<byte>, pos: int) -> (int, u64) {$/;"	f
parse0xHex	$VIRGIL_LOC/lib/util/Ints.v3	/^	def parse0xHex(a: Array<byte>, pos: int) -> (int, u32) {$/;"	f
parse0xHex	$VIRGIL_LOC/lib/util/Longs.v3	/^	def parse0xHex(a: Array<byte>, pos: int) -> (int, u64) {$/;"	f
parseAddr	$VIRGIL_LOC/lib/util/Option.v3	/^	def parseAddr(str: string) -> u64 {$/;"	m
parseArray	$VIRGIL_LOC/lib/file/json/JsonParser.v3	/^	def parseArray() -> JsonValue {$/;"	m
parseBin	$VIRGIL_LOC/lib/util/Ints.v3	/^	def parseBin(a: Array<byte>, pos: int) -> (int, u32) {$/;"	f
parseBin	$VIRGIL_LOC/lib/util/Longs.v3	/^	def parseBin(a: Array<byte>, pos: int) -> (int, u64) {$/;"	f
parseBin	$VIRGIL_LOC/lib/util/NumberParser.v3	/^	private def parseBin() -> bool {$/;"	m
parseBin0	$VIRGIL_LOC/lib/util/Ints.v3	/^	private def parseBin0(a: Array<byte>, pos: int, prefix: int) -> (int, u32) {$/;"	f
parseBin0	$VIRGIL_LOC/lib/util/Longs.v3	/^	private def parseBin0(a: Array<byte>, pos: int, prefix: int) -> (int, u64) {$/;"	f
parseBool	$VIRGIL_LOC/lib/util/Option.v3	/^	def parseBool(str: string) -> bool {$/;"	m
parseDec	$VIRGIL_LOC/lib/util/NumberParser.v3	/^	private def parseDec() -> bool {$/;"	m
parseDecM	$VIRGIL_LOC/lib/util/Ints.v3	/^	private def parseDecM(a: Array<byte>, pos: int, maxdiv10: u32, maxmod10: u32) -> (int, u32) {$/;"	f
parseDecimal	$VIRGIL_LOC/lib/util/Ints.v3	/^	def parseDecimal(a: Array<byte>, pos: int) -> (\/*status:*\/int, \/*value:*\/int) {$/;"	f
parseDecimal	$VIRGIL_LOC/lib/util/Longs.v3	/^	def parseDecimal(a: Array<byte>, pos: int) -> i64;$/;"	f
parseEscape	$VIRGIL_LOC/lib/util/Chars.v3	/^	def parseEscape(a: Array<byte>, pos: int) -> (int, byte) {$/;"	f
parseExponent	$VIRGIL_LOC/lib/util/NumberParser.v3	/^	private def parseExponent(wstart: int, wend: int, fstart: int, fend: int) -> bool {$/;"	m
parseFractional	$VIRGIL_LOC/lib/util/NumberParser.v3	/^	private def parseFractional(wstart: int, wend: int) -> bool {$/;"	m
parseFun	$VIRGIL_LOC/lib/util/Option.v3	/^	def parseFun: string -> T;	\/\/ parse function$/;"	d
parseHex	$VIRGIL_LOC/lib/util/Ints.v3	/^	def parseHex(a: Array<byte>, pos: int) -> (int, u32) {$/;"	f
parseHex	$VIRGIL_LOC/lib/util/Longs.v3	/^	def parseHex(a: Array<byte>, pos: int) -> (int, u64) {$/;"	f
parseHex	$VIRGIL_LOC/lib/util/NumberParser.v3	/^	private def parseHex() -> bool {$/;"	m
parseHex0	$VIRGIL_LOC/lib/util/Ints.v3	/^	private def parseHex0(a: Array<byte>, pos: int, prefix: int) -> (int, u32) {$/;"	f
parseHex0	$VIRGIL_LOC/lib/util/Longs.v3	/^	private def parseHex0(a: Array<byte>, pos: int, prefix: int) -> (int, u64) {$/;"	f
parseInt	$VIRGIL_LOC/lib/util/Option.v3	/^	def parseInt(str: string) -> int {$/;"	m
parseLiteral	$VIRGIL_LOC/lib/util/Chars.v3	/^	def parseLiteral(a: Array<byte>, pos: int) -> (int, byte) {$/;"	f
parseLiteral	$VIRGIL_LOC/lib/util/Strings.v3	/^	def parseLiteral(a: Array<byte>, pos: int) -> (int, string) {$/;"	f
parseNumber	$VIRGIL_LOC/lib/file/json/JsonParser.v3	/^	def parseNumber() -> JsonValue {$/;"	m
parseObject	$VIRGIL_LOC/lib/file/json/JsonParser.v3	/^	def parseObject() -> JsonValue {$/;"	m
parseObjectEntry	$VIRGIL_LOC/lib/file/json/JsonParser.v3	/^	private def parseObjectEntry() -> (string, JsonValue) {$/;"	m
parseOct	$VIRGIL_LOC/lib/util/NumberParser.v3	/^	private def parseOct() -> bool {$/;"	m
parseOption	$VIRGIL_LOC/lib/util/Option.v3	/^	def parseOption(arg: string) -> (string, string) {$/;"	m
parsePosDecimal	$VIRGIL_LOC/lib/util/Ints.v3	/^	def parsePosDecimal(a: Array<byte>, pos: int) -> (\/*status:*\/int, \/*value:*\/u32) {$/;"	f
parsePosDecimal	$VIRGIL_LOC/lib/util/Longs.v3	/^	def parsePosDecimal(a: Array<byte>, pos: int) -> u64;$/;"	f
parseRow	$VIRGIL_LOC/lib/file/csv/CsvParser.v3	/^	private def parseRow() -> (int, int) {$/;"	m
parseSize	$VIRGIL_LOC/lib/util/Option.v3	/^	def parseSize(str: string) -> u32 {$/;"	m
parseString	$VIRGIL_LOC/lib/file/json/JsonParser.v3	/^	def parseString() -> JsonValue {$/;"	m
parseString	$VIRGIL_LOC/lib/util/Option.v3	/^	def parseString(str: string) -> string {$/;"	m
parseValue	$VIRGIL_LOC/lib/file/json/JsonParser.v3	/^	def parseValue() -> JsonValue {$/;"	m
partition	$VIRGIL_LOC/lib/util/Ranges.v3	/^	private def partition<T>(r: Range<T>, cmp: (T, T) -> bool) -> int {$/;"	f
patchKind	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	var patchKind = Arm64PatchKind.REL_IMM19;$/;"	d
patchPos	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	var patchPos = 0;$/;"	d
patch_ABS_i16	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def patch_ABS_i16(pos: int, imm: i16) -> this {$/;"	m
patch_REL_i26	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def patch_REL_i26(pos: int, imm: i26) -> this {$/;"	m
patched_imm	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def patched_imm<T>(i: T) -> this {$/;"	m
patcher	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	var patcher: X86_64AddrPatcher;$/;"	d
pattern	$VIRGIL_LOC/lib/util/GlobMatcher.v3	/^class GlobMatcher(pattern: string) {$/;"	d
pavgb_s_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pavgb_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {$/;"	m
pavgb_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pavgb_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
pavgw_s_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pavgw_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {$/;"	m
pavgw_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pavgw_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
pblendw_s_s_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pblendw_s_s_i(a: X86_64Xmmr, b: X86_64Xmmr, imm: u8) -> this {$/;"	m
pclmulqdq_s_s_imm	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pclmulqdq_s_s_imm(a: X86_64Xmmr, b: X86_64Xmmr, imm: u8) -> this {$/;"	m
pcmpeqb_s_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pcmpeqb_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {$/;"	m
pcmpeqb_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pcmpeqb_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
pcmpeqd	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def pcmpeqd(a: SSEReg, b: SSERm) { emitbbb_s_sm(0x66, 0x0F, 0x76, a, b); }$/;"	m
pcmpeqd_s_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pcmpeqd_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {$/;"	m
pcmpeqd_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pcmpeqd_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
pcmpeqq	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def pcmpeqq(a: SSEReg, b: SSERm) { emitbbbb_s_sm(0x66, 0x0F, 0x38, 0x29, a, b); }$/;"	m
pcmpeqq_s_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pcmpeqq_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {$/;"	m
pcmpeqq_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pcmpeqq_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
pcmpeqw_s_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pcmpeqw_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {$/;"	m
pcmpeqw_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pcmpeqw_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
pcmpgtb_s_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pcmpgtb_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {$/;"	m
pcmpgtb_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pcmpgtb_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
pcmpgtd_s_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pcmpgtd_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {$/;"	m
pcmpgtd_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pcmpgtd_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
pcmpgtq_s_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pcmpgtq_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {$/;"	m
pcmpgtq_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pcmpgtq_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
pcmpgtw_s_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pcmpgtw_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {$/;"	m
pcmpgtw_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pcmpgtw_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
peek	$VIRGIL_LOC/lib/util/Stack.v3	/^	def peek() -> T;$/;"	m
peek1	$VIRGIL_LOC/lib/util/DataReader.v3	/^	def peek1() -> int {$/;"	m
peekN	$VIRGIL_LOC/lib/util/DataReader.v3	/^	def peekN(length: int) -> bool {$/;"	m
peekRel	$VIRGIL_LOC/lib/util/TextReader.v3	/^	def peekRel(offset: int) -> byte {$/;"	m
peekn	$VIRGIL_LOC/lib/util/Stack.v3	/^	def peekn(n: int) -> Range<T> {$/;"	m
performance_counter	$VIRGIL_LOC/lib/ic/ic0_untyped.v3	/^	def performance_counter(t: i32) -> i64;							\/\/ * s$/;"	f
pextrb_r_s_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pextrb_r_s_i(a: X86_64Gpr, b: X86_64Xmmr, imm: u8) -> this {$/;"	m
pextrd_r_s_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pextrd_r_s_i(a: X86_64Gpr, b: X86_64Xmmr, imm: u8) -> this {$/;"	m
pextrq_m_s_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pextrq_m_s_i(a: X86_64Addr, b: X86_64Xmmr, imm: u8) -> this {$/;"	m
pextrq_r_s_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pextrq_r_s_i(a: X86_64Gpr, b: X86_64Xmmr, imm: u8) -> this {$/;"	m
pextrw_r_s_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pextrw_r_s_i(a: X86_64Gpr, b: X86_64Xmmr, imm: u8) -> this {$/;"	m
pidfd	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+8	pidfd:		u64;$/;"	d
pinsrb_s_r_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pinsrb_s_r_i(a: X86_64Xmmr, b: X86_64Gpr, imm: u8) -> this {$/;"	m
pinsrd_s_r_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pinsrd_s_r_i(a: X86_64Xmmr, b: X86_64Gpr, imm: u8) -> this {$/;"	m
pinsrq_s_r_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pinsrq_s_r_i(a: X86_64Xmmr, b: X86_64Gpr, imm: u8) -> this {$/;"	m
pinsrw_s_r_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pinsrw_s_r_i(a: X86_64Xmmr, b: X86_64Gpr, imm: u8) -> this {$/;"	m
pl	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	def pl() -> this { cond = ArmCond.PL; }$/;"	m
plus	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def plus(disp: int) -> X86_64Addr {$/;"	m
plus	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def plus(disp: int) -> X86Addr {$/;"	m
plus	$VIRGIL_LOC/lib/util/BitMatrix.v3	/^	def plus(delta: int) -> BitMatrixRow {$/;"	m
plusR	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def plusR(r: X86_64Gpr, scale: byte, disp: int) -> X86_64Addr {$/;"	m
plusSSE	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def plusSSE(disp: int) -> SSEAddr {$/;"	m
plus_rel	$VIRGIL_LOC/lib/util/TextReader.v3	/^	def plus_rel(offset: int, f: byte -> bool) -> int {$/;"	m
pmaddubsw_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pmaddubsw_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
pmaddwd_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pmaddwd_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
pmaxsb_s_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pmaxsb_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {$/;"	m
pmaxsb_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pmaxsb_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
pmaxsd_s_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pmaxsd_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {$/;"	m
pmaxsd_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pmaxsd_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
pmaxsw_s_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pmaxsw_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {$/;"	m
pmaxsw_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pmaxsw_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
pmaxub_s_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pmaxub_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {$/;"	m
pmaxub_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pmaxub_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
pmaxud_s_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pmaxud_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {$/;"	m
pmaxud_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pmaxud_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
pmaxuw_s_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pmaxuw_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {$/;"	m
pmaxuw_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pmaxuw_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
pminsb_s_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pminsb_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {$/;"	m
pminsb_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pminsb_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
pminsd_s_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pminsd_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {$/;"	m
pminsd_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pminsd_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
pminsw_s_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pminsw_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {$/;"	m
pminsw_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pminsw_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
pminub_s_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pminub_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {$/;"	m
pminub_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pminub_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
pminud_s_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pminud_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {$/;"	m
pminud_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pminud_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
pminuw_s_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pminuw_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {$/;"	m
pminuw_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pminuw_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
pmovmskb_r_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pmovmskb_r_s(a: X86_64Gpr, b: X86_64Xmmr) -> this {$/;"	m
pmovsxbw_s_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pmovsxbw_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {$/;"	m
pmovsxbw_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pmovsxbw_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
pmovsxdq_s_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pmovsxdq_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {$/;"	m
pmovsxdq_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pmovsxdq_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
pmovsxwd_s_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pmovsxwd_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {$/;"	m
pmovsxwd_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pmovsxwd_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
pmovzxbw_s_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pmovzxbw_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {$/;"	m
pmovzxbw_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pmovzxbw_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
pmovzxdq_s_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pmovzxdq_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {$/;"	m
pmovzxdq_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pmovzxdq_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
pmovzxwd_s_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pmovzxwd_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {$/;"	m
pmovzxwd_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pmovzxwd_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
pmuldq_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pmuldq_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
pmulhrsw_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pmulhrsw_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
pmulhuw_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pmulhuw_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
pmulhw_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pmulhw_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
pmulld_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pmulld_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
pmullw_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pmullw_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
pmuludq_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pmuludq_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
pollfd	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^layout pollfd {$/;"	l
pop	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def pop(a: X86Rm) {$/;"	m
pop	$VIRGIL_LOC/lib/util/Stack.v3	/^	def pop() -> T;$/;"	m
popcnt	$VIRGIL_LOC/lib/util/Ints.v3	/^	def popcnt(i: u32) -> int { \/\/ XXX: intrinsic on platforms where possible.$/;"	f
popcnt	$VIRGIL_LOC/lib/util/Longs.v3	/^	def popcnt(i: u64) -> int {$/;"	f
popcnt_r_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def popcnt_r_m(a: X86_64Gpr, b: X86_64Addr) -> this {$/;"	m
popcnt_r_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def popcnt_r_r(a: X86_64Gpr, b: X86_64Gpr) -> this {$/;"	m
popq_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def popq_m(a: X86_64Addr) -> this {$/;"	m
popq_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def popq_r(a: X86_64Gpr) -> this {$/;"	m
port	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	var port: int;$/;"	d
pos	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	def pos() -> int {$/;"	m
pos	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def pos() -> int { return w.pos; }$/;"	m
pos	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	def pos() -> int { return w.pos; }$/;"	m
pos	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^	def pos() -> int {$/;"	m
pos	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	var pos = -1;$/;"	d
pos	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	def var pos: int;		\/\/ current position offset within {r}$/;"	d
pos	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def pos() -> int {$/;"	m
pos	$VIRGIL_LOC/lib/util/DataReader.v3	/^	def var pos: int;			\/\/ current position$/;"	d
pos	$VIRGIL_LOC/lib/util/DataWriter.v3	/^	def var pos: int;			\/\/ current position$/;"	d
pos	$VIRGIL_LOC/lib/util/NumberParser.v3	/^	var pos = 0;$/;"	d
pos	$VIRGIL_LOC/lib/util/TextReader.v3	/^	def var pos: int;			\/\/ current position$/;"	d
posToColumn	$VIRGIL_LOC/lib/util/TextReader.v3	/^	def posToColumn(at: int) -> int {$/;"	m
posToLine	$VIRGIL_LOC/lib/util/TextReader.v3	/^	def posToLine(at: int) -> int {$/;"	m
pow10	$VIRGIL_LOC/lib/util/FpSketch.v3	/^def pow10 = [  \/\/ cached powers of 10 for small cases$/;"	d
pow5	$VIRGIL_LOC/lib/util/Floats.v3	/^	def pow5(n: u32) -> (u32, u32, u32, u32) {$/;"	f
pow5bits	$VIRGIL_LOC/lib/util/Floats.v3	/^	private def pow5bits(e: u32) -> int {$/;"	f
prefixes	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	private var prefixes: X86_64Prefix.set;$/;"	d
prepend	$VIRGIL_LOC/lib/util/Arrays.v3	/^	def prepend<T>(val: T, array: Array<T>) -> Array<T> {$/;"	f
prev	$VIRGIL_LOC/lib/util/Edge.v3	/^	var prev: Edge<T>;	\/\/ the backward link for the use list$/;"	d
processKeypress	$VIRGIL_LOC/lib/term/Animator.v3	/^	private def processKeypress(us: u32) {$/;"	m
procs	$VIRGIL_LOC/lib/wasm-linux/WaliLayouts.v3	/^        +80     procs:		u16;$/;"	d
procs	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^        +80     procs:		u16;$/;"	d
protocol	$VIRGIL_LOC/lib/net/tcpip/Packets.v3	/^	+9	protocol:	u8;$/;"	d
pshufb_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pshufb_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
pshufd_s_s_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pshufd_s_s_i(a: X86_64Xmmr, b: X86_64Xmmr, imm: u8) -> this {$/;"	m
pshuflw_s_s_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pshuflw_s_s_i(a: X86_64Xmmr, b: X86_64Xmmr, imm: u8) -> this {$/;"	m
psl_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	private def psl_i(a: X86_64Xmmr, imm: byte, c2: byte, eop: byte) {$/;"	m
pslld_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pslld_i(a: X86_64Xmmr, imm: u6) -> this {$/;"	m
pslld_i	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def pslld_i(a: SSEReg, imm: byte) { emitbbb_si_b(0x66, 0x0F, 0x72, a, 0x6, imm); }$/;"	m
pslld_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pslld_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
psllq_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def psllq_i(a: X86_64Xmmr, imm: u6) -> this {$/;"	m
psllq_i	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def psllq_i(a: SSEReg, imm: byte) { emitbbb_si_b(0x66, 0x0F, 0x73, a, 0x6, imm); }$/;"	m
psllq_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def psllq_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
psllw_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def psllw_i(a: X86_64Xmmr, imm: u5) -> this {$/;"	m
psllw_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def psllw_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
psrad_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def psrad_i(a: X86_64Xmmr, imm: u6) -> this {$/;"	m
psrad_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def psrad_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
psraw_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def psraw_i(a: X86_64Xmmr, imm: u6) -> this {$/;"	m
psraw_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def psraw_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
psrld_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def psrld_i(a: X86_64Xmmr, imm: u5) -> this {$/;"	m
psrld_i	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def psrld_i(a: SSEReg, imm: byte) { emitbbb_si_b(0x66, 0x0F, 0x72, a, 0x2, imm); }$/;"	m
psrld_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def psrld_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
psrlq_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def psrlq_i(a: X86_64Xmmr, imm: u6) -> this {$/;"	m
psrlq_i	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def psrlq_i(a: SSEReg, imm: byte) { emitbbb_si_b(0x66, 0x0F, 0x73, a, 0x2, imm); }$/;"	m
psrlq_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def psrlq_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
psrlw_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def psrlw_i(a: X86_64Xmmr, imm: u6) -> this {$/;"	m
psrlw_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def psrlw_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
psubb_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def psubb_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
psubd_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def psubd_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
psubq_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def psubq_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
psubsb_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def psubsb_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
psubsw_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def psubsw_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
psubusb_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def psubusb_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
psubusw_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def psubusw_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
psubw_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def psubw_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
pt_regs	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^layout pt_regs { \/\/ TODO$/;"	l
ptest_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def ptest_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
ptr	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+4	ptr:		u64\/*:Pointer*\/;$/;"	d
punpckhbw_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def punpckhbw_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
punpckhdq_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def punpckhdq_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
punpckhwd_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def punpckhwd_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
punpcklbw_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def punpcklbw_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
punpcklqdq_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def punpcklqdq_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
punpcklwd_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def punpcklwd_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
push	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def push(a: X86Rm) {$/;"	m
push	$VIRGIL_LOC/lib/util/Stack.v3	/^	def push(val: T);$/;"	m
push_i	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def push_i(imm: int) {$/;"	m
pusha	$VIRGIL_LOC/lib/util/Stack.v3	/^	def pusha(v: Array<T>) {$/;"	m
pushfd	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def pushfd() { emitb(0x9C); }$/;"	m
pushfq	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pushfq() -> this {$/;"	m
pushn	$VIRGIL_LOC/lib/util/Stack.v3	/^	def pushn(v: T, n: int) -> this {$/;"	m
pushq_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pushq_i(imm: int) -> this {$/;"	m
pushq_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pushq_m(a: X86_64Addr) -> this {$/;"	m
pushq_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pushq_r(a: X86_64Gpr) -> this {$/;"	m
pushr	$VIRGIL_LOC/lib/util/Stack.v3	/^	def pushr(r: Range<T>) {$/;"	m
put	$VIRGIL_LOC/lib/util/Vector.v3	/^	def put(e: T) -> this {$/;"	m
put1	$VIRGIL_LOC/lib/util/StringBuilder.v3	/^	def put1<T1>(fmt: string, p1: T1) -> this {$/;"	m
put2	$VIRGIL_LOC/lib/util/StringBuilder.v3	/^	def put2<T1, T2>(fmt: string, p1: T1, p2: T2) -> this {$/;"	m
put3	$VIRGIL_LOC/lib/util/StringBuilder.v3	/^	def put3<T1, T2, T3>(fmt: string, p1: T1, p2: T2, p3: T3) -> this {$/;"	m
putArg	$VIRGIL_LOC/lib/util/StringBuilder.v3	/^	private def putArg<T>(fmt: string, offset: int, p: T) -> int {$/;"	m
putRange	$VIRGIL_LOC/lib/util/StringBuilder.v3	/^	def putRange<T>(fmt: string, r: Range<T>) -> this {$/;"	m
putUpToArg	$VIRGIL_LOC/lib/util/StringBuilder.v3	/^	private def putUpToArg(fmt: string, offset: int) -> (int, int) {$/;"	m
put_b16	$VIRGIL_LOC/lib/util/DataWriter.v3	/^	def put_b16(data: int) -> this {$/;"	m
put_b16be	$VIRGIL_LOC/lib/util/DataWriter.v3	/^	def put_b16be(data: int) -> this {$/;"	m
put_b32	$VIRGIL_LOC/lib/util/DataWriter.v3	/^	def put_b32(data: int) -> this {$/;"	m
put_b32be	$VIRGIL_LOC/lib/util/DataWriter.v3	/^	def put_b32be(data: int) -> this {$/;"	m
put_b64	$VIRGIL_LOC/lib/util/DataWriter.v3	/^	def put_b64(data: long) -> this {$/;"	m
put_b64be	$VIRGIL_LOC/lib/util/DataWriter.v3	/^	def put_b64be(data: long) -> this {$/;"	m
put_sleb32	$VIRGIL_LOC/lib/util/DataWriter.v3	/^	def put_sleb32(data: int) -> this {$/;"	m
put_sleb64	$VIRGIL_LOC/lib/util/DataWriter.v3	/^	def put_sleb64(data: long) -> this {$/;"	m
put_uleb32	$VIRGIL_LOC/lib/util/DataWriter.v3	/^	def put_uleb32(data: u32) -> this {$/;"	m
puta	$VIRGIL_LOC/lib/util/DataWriter.v3	/^	def puta(data: Array<byte>) -> this {$/;"	m
puta	$VIRGIL_LOC/lib/util/Vector.v3	/^	def puta(array: Array<T>) -> this {$/;"	m
putb	$VIRGIL_LOC/lib/util/DataWriter.v3	/^	def putb(data: int) -> this {$/;"	m
putbb	$VIRGIL_LOC/lib/util/DataWriter.v3	/^	def putbb(b0: int, b1: int) -> this {$/;"	m
putbbb	$VIRGIL_LOC/lib/util/DataWriter.v3	/^	def putbbb(b0: int, b1: int, b2: int) -> this {$/;"	m
putc	$VIRGIL_LOC/lib/term/Vt100.v3	/^	def putc = System.putc;$/;"	d
putc	$VIRGIL_LOC/lib/util/StringBuilder.v3	/^	def putc(c: byte) -> this {$/;"	m
putd	$VIRGIL_LOC/lib/util/StringBuilder.v3	/^	def putd<T>(i: T) -> this {$/;"	m
putd_i32	$VIRGIL_LOC/lib/util/StringBuilder.v3	/^	def putd_i32(i: i32) -> this {$/;"	m
putd_i64	$VIRGIL_LOC/lib/util/StringBuilder.v3	/^	def putd_i64(i: i64) -> this {$/;"	m
putd_u32	$VIRGIL_LOC/lib/util/StringBuilder.v3	/^	def putd_u32(i: u32) -> this {$/;"	m
putd_u64	$VIRGIL_LOC/lib/util/StringBuilder.v3	/^	def putd_u64(i: u64) -> this {$/;"	m
puti	$VIRGIL_LOC/lib/term/Vt100.v3	/^	def puti = System.puti;$/;"	d
putk	$VIRGIL_LOC/lib/util/DataReader.v3	/^	def putk(expecting: int, x: Array<byte>, xpos: int, xlength: int) -> this {$/;"	m
putk	$VIRGIL_LOC/lib/util/DataWriter.v3	/^	def putk(data: Array<byte>, start: int, end: int) -> this {$/;"	m
putk	$VIRGIL_LOC/lib/util/StringBuilder.v3	/^	def putk(s: string, start: int, end: int) -> this {$/;"	m
putk	$VIRGIL_LOC/lib/util/Vector.v3	/^	def putk(a: Array<T>, start: int, end: int) -> this {$/;"	m
putkv	$VIRGIL_LOC/lib/util/DataWriter.v3	/^	def putkv(data: Array<byte>, start: int, end: int) {$/;"	m
putn	$VIRGIL_LOC/lib/util/Vector.v3	/^	def putn(v: T, n: int) -> this {$/;"	m
putq	$VIRGIL_LOC/lib/util/StringBuilder.v3	/^	def putq(f: StringBuilder -> StringBuilder) -> this {$/;"	m
putr	$VIRGIL_LOC/lib/util/DataReader.v3	/^	def putr(expecting: int, x: Range<byte>) -> this {$/;"	m
putr	$VIRGIL_LOC/lib/util/DataWriter.v3	/^	def putr(data: Range<byte>) -> this {$/;"	m
putr	$VIRGIL_LOC/lib/util/StringBuilder.v3	/^	def putr(r: Range<byte>) -> this {$/;"	m
putr	$VIRGIL_LOC/lib/util/Vector.v3	/^	def putr(r: Range<T>) -> this {$/;"	m
puts	$VIRGIL_LOC/lib/term/Vt100.v3	/^	def puts = System.puts;$/;"	d
puts	$VIRGIL_LOC/lib/util/StringBuilder.v3	/^	def puts(s: string) -> this {$/;"	m
puts	$VIRGIL_LOC/lib/util/Strings.v3	/^	def puts(s: string) -> StringBuilder -> StringBuilder {$/;"	f
puts0	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def puts0(s: string) -> this {$/;"	m
putsln	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def putsln(str: string) -> this {$/;"	m
putsq	$VIRGIL_LOC/lib/util/StringBuilder.v3	/^	def putsq(s: string) -> this {$/;"	m
pututf8	$VIRGIL_LOC/lib/util/StringBuilder.v3	/^	def pututf8(codepoint: u32) -> this {$/;"	m
putv	$VIRGIL_LOC/lib/util/Vector.v3	/^	def putv(v: Vector<T>) -> this {$/;"	m
putx	$VIRGIL_LOC/lib/util/StringBuilder.v3	/^	def putx<T>(i: T) -> this {$/;"	m
putx_16	$VIRGIL_LOC/lib/util/StringBuilder.v3	/^	def putx_16(i: u32) -> this {$/;"	m
putx_32	$VIRGIL_LOC/lib/util/StringBuilder.v3	/^	def putx_32(i: u32) -> this {$/;"	m
putx_64	$VIRGIL_LOC/lib/util/StringBuilder.v3	/^	def putx_64(i: u64) -> this {$/;"	m
putx_8	$VIRGIL_LOC/lib/util/StringBuilder.v3	/^	def putx_8(i: u32) -> this {$/;"	m
putxv_32	$VIRGIL_LOC/lib/util/StringBuilder.v3	/^	def putxv_32(i: u32) -> this {$/;"	m
putxv_64	$VIRGIL_LOC/lib/util/StringBuilder.v3	/^	def putxv_64(i: u64) -> this {$/;"	m
putz	$VIRGIL_LOC/lib/util/StringBuilder.v3	/^	def putz(b: bool) -> this {$/;"	m
pxor_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def pxor_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
qos	$VIRGIL_LOC/lib/net/tcpip/Packets.v3	/^	+1	qos:		byte;$/;"	d
query	$VIRGIL_LOC/lib/util/Types.v3	/^	def query<B>(v: B) -> bool { return T.?<B>(v); }$/;"	m
queue	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def queue(s: string) -> this {$/;"	m
queued	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def var queued = "";		\/\/ queued output (textual prefix)$/;"	d
quicksort	$VIRGIL_LOC/lib/util/Ranges.v3	/^	def quicksort<T>(r: Range<T>, cmp: (T, T) -> bool) {$/;"	f
r_addend	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^	+8	r_addend:	i32;$/;"	d
r_b	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	case r_b(a: X86_64Gpr, i: byte);$/;"	d
r_cl	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def r_cl(name: string, a: X86_64Gpr, rex: byte) -> this {$/;"	m
r_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def r_i(name: string, a: X86_64Gpr, i: int, rex: byte) -> this {$/;"	m
r_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	case r_i(a: X86_64Gpr, i: int);$/;"	d
r_info	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^	+8	r_info:		u64;$/;"	d
r_l	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def r_l(name: string, a: X86_64Gpr, l:long, rex: byte) -> this {$/;"	m
r_l	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	case r_l(a: X86_64Gpr, i: long);$/;"	d
r_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def r_m(name: string, a: X86_64Gpr, b: X86_64Addr, rex: byte) -> this {$/;"	m
r_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	case r_m(a: X86_64Gpr, b: X86_64Addr);$/;"	d
r_offset	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^	+0	r_offset:	u64;$/;"	d
r_p	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def r_p(name: string, a: X86_64Gpr, l:long, rex: byte) -> this {$/;"	m
r_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def r_r(name: string, a: X86_64Gpr, b: X86_64Gpr, rex: byte) -> this {$/;"	m
r_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	case r_r(a: X86_64Gpr, b: X86_64Gpr);$/;"	d
r_rm	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def r_rm(a: X86Reg, b: X86Rm) { \/\/ register, register\/memory$/;"	m
r_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def r_s(name: string, a: X86_64Gpr, b: X86_64Xmmr, rex: byte) -> this {$/;"	m
r_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	case r_s(a: X86_64Gpr, b: X86_64Xmmr);$/;"	d
r_s_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def r_s_i(name: string, a: X86_64Reg, b: X86_64Xmmr, imm: int, rex: byte) -> this {$/;"	m
random	$VIRGIL_LOC/lib/util/Random.v3	/^	def random(max: int) -> int {$/;"	f
random2	$VIRGIL_LOC/lib/util/Random.v3	/^	def random2(max: int, extra: int) -> int {$/;"	f
range	$VIRGIL_LOC/lib/util/Arrays.v3	/^	def range<T>(array: Array<T>, start: int, end: int) -> Array<T> {$/;"	f
range	$VIRGIL_LOC/lib/util/BitMatrix.v3	/^	def range(minRow: int, maxRow: int) -> BitMatrix {$/;"	m
range	$VIRGIL_LOC/lib/util/TextReader.v3	/^	def range() -> FileRange {$/;"	m
range	$VIRGIL_LOC/lib/util/Token.v3	/^	def range() -> FileRange {$/;"	m
rangeOf	$VIRGIL_LOC/lib/util/Token.v3	/^	def rangeOf(len: int) -> FileRange {$/;"	m
rangeToInetAddress	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	def rangeToInetAddress(r: Range<byte>) -> NetResult<InetAddress> {$/;"	f
rbp	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+120	rbp: u64;$/;"	d
rdfsbase	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def rdfsbase(a: X86_64Gpr) -> this {$/;"	m
rdgsbase	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def rdgsbase(a: X86_64Gpr) -> this {$/;"	m
rdtsc	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def rdtsc() -> this {$/;"	m
read1	$VIRGIL_LOC/lib/util/DataReader.v3	/^	def read1() -> byte {$/;"	m
readAtom	$VIRGIL_LOC/lib/util/Sexpr.v3	/^    def readAtom() -> ParseResult<SExpr> {$/;"	m
readBit	$VIRGIL_LOC/lib/util/FpSketch.v3	/^	def readBit(b: int) -> u1 {$/;"	m
readN	$VIRGIL_LOC/lib/util/DataReader.v3	/^	def readN(length: int) -> Array<byte> {$/;"	m
readSExpr	$VIRGIL_LOC/lib/util/Sexpr.v3	/^    def readSExpr() -> ParseResult<SExpr> {$/;"	m
readToken	$VIRGIL_LOC/lib/util/TextReader.v3	/^	def readToken(len: int) -> Token {$/;"	m
readTokenAt	$VIRGIL_LOC/lib/util/TextReader.v3	/^	def readTokenAt(start: int, end: int) -> Token {$/;"	m
read_range_double	$VIRGIL_LOC/lib/util/DataReader.v3	/^	def read_range_double(r: Range<byte>)	-> double { return Ref<Layout_double>.of(r).val; }$/;"	f
read_range_float	$VIRGIL_LOC/lib/util/DataReader.v3	/^	def read_range_float(r: Range<byte>)	-> float { return Ref<Layout_float>.of(r).val; }$/;"	f
read_range_i16	$VIRGIL_LOC/lib/util/DataReader.v3	/^	def read_range_i16(r: Range<byte>)	-> i16 { return Ref<Layout_i16>.of(r).val; }$/;"	f
read_range_i32	$VIRGIL_LOC/lib/util/DataReader.v3	/^	def read_range_i32(r: Range<byte>)	-> i32 { return Ref<Layout_i32>.of(r).val; }$/;"	f
read_range_i32_i16	$VIRGIL_LOC/lib/util/DataReader.v3	/^	def read_range_i32_i16(r: Range<byte>)	-> i32 { return i32.view(i16.view(Ref<Layout_u16>.of(r).val)); }$/;"	f
read_range_i32_i8	$VIRGIL_LOC/lib/util/DataReader.v3	/^	def read_range_i32_i8(r: Range<byte>)	-> i32 { return i32.view(i8.view(r[0])); }$/;"	f
read_range_i64	$VIRGIL_LOC/lib/util/DataReader.v3	/^	def read_range_i64(r: Range<byte>)	-> i64 { return Ref<Layout_i64>.of(r).val; }$/;"	f
read_range_i64_i16	$VIRGIL_LOC/lib/util/DataReader.v3	/^	def read_range_i64_i16(r: Range<byte>)	-> i64 { return i64.view(i16.view(Ref<Layout_u16>.of(r).val)); }$/;"	f
read_range_i64_i32	$VIRGIL_LOC/lib/util/DataReader.v3	/^	def read_range_i64_i32(r: Range<byte>)	-> i64 { return i64.view(i32.view(Ref<Layout_u32>.of(r).val)); }$/;"	f
read_range_i64_i8	$VIRGIL_LOC/lib/util/DataReader.v3	/^	def read_range_i64_i8(r: Range<byte>)	-> i64 { return i64.view(i8.view(r[0])); }$/;"	f
read_range_i8	$VIRGIL_LOC/lib/util/DataReader.v3	/^	def read_range_i8(r: Range<byte>)	-> i8  { return i8.view(r[0]); }$/;"	f
read_range_u128	$VIRGIL_LOC/lib/util/DataReader.v3	/^	def read_range_u128(r: Range<byte>)	-> (u64, u64) {$/;"	f
read_range_u16	$VIRGIL_LOC/lib/util/DataReader.v3	/^	def read_range_u16(r: Range<byte>)	-> u16 { return Ref<Layout_u16>.of(r).val; }$/;"	f
read_range_u32	$VIRGIL_LOC/lib/util/DataReader.v3	/^	def read_range_u32(r: Range<byte>)	-> u32 { return Ref<Layout_u32>.of(r).val; }$/;"	f
read_range_u32_i16	$VIRGIL_LOC/lib/util/DataReader.v3	/^	def read_range_u32_i16(r: Range<byte>)	-> u32 { return u32.view(i16.view(Ref<Layout_u16>.of(r).val)); }$/;"	f
read_range_u32_i8	$VIRGIL_LOC/lib/util/DataReader.v3	/^	def read_range_u32_i8(r: Range<byte>)	-> u32 { return u32.view(i8.view(r[0])); }$/;"	f
read_range_u32_u16	$VIRGIL_LOC/lib/util/DataReader.v3	/^	def read_range_u32_u16(r: Range<byte>)	-> u32 { return Ref<Layout_u16>.of(r).val; }$/;"	f
read_range_u32_u8	$VIRGIL_LOC/lib/util/DataReader.v3	/^	def read_range_u32_u8(r: Range<byte>)	-> u32 { return r[0]; }$/;"	f
read_range_u64	$VIRGIL_LOC/lib/util/DataReader.v3	/^	def read_range_u64(r: Range<byte>)	-> u64 { return Ref<Layout_u64>.of(r).val; }$/;"	f
read_range_u64_i16	$VIRGIL_LOC/lib/util/DataReader.v3	/^	def read_range_u64_i16(r: Range<byte>)	-> u64 { return u64.view(i16.view(Ref<Layout_u16>.of(r).val)); }$/;"	f
read_range_u64_i32	$VIRGIL_LOC/lib/util/DataReader.v3	/^	def read_range_u64_i32(r: Range<byte>)	-> u64 { return u64.view(i32.view(Ref<Layout_u32>.of(r).val)); }$/;"	f
read_range_u64_i8	$VIRGIL_LOC/lib/util/DataReader.v3	/^	def read_range_u64_i8(r: Range<byte>)	-> u64 { return u64.view(i8.view(r[0])); }$/;"	f
read_range_u64_u16	$VIRGIL_LOC/lib/util/DataReader.v3	/^	def read_range_u64_u16(r: Range<byte>)	-> u64 { return Ref<Layout_u16>.of(r).val; }$/;"	f
read_range_u64_u32	$VIRGIL_LOC/lib/util/DataReader.v3	/^	def read_range_u64_u32(r: Range<byte>)	-> u64 { return Ref<Layout_u32>.of(r).val; }$/;"	f
read_range_u64_u8	$VIRGIL_LOC/lib/util/DataReader.v3	/^	def read_range_u64_u8(r: Range<byte>)	-> u64 { return r[0]; }$/;"	f
read_range_u8	$VIRGIL_LOC/lib/util/DataReader.v3	/^	def read_range_u8(r: Range<byte>)	-> u8  { return r[0]; }$/;"	f
read_sleb32	$VIRGIL_LOC/lib/util/DataReader.v3	/^	def read_sleb32() -> i32 {$/;"	m
read_sleb64	$VIRGIL_LOC/lib/util/DataReader.v3	/^	def read_sleb64() -> i64 {$/;"	m
read_u32	$VIRGIL_LOC/lib/util/DataReader.v3	/^	def read_u32() -> u32 {$/;"	m
read_u64	$VIRGIL_LOC/lib/util/DataReader.v3	/^	def read_u64() -> u64 {$/;"	m
read_uleb32	$VIRGIL_LOC/lib/util/DataReader.v3	/^	def read_uleb32() -> u32 {$/;"	m
read_uleb64	$VIRGIL_LOC/lib/util/DataReader.v3	/^	def read_uleb64() -> u64 {$/;"	m
read_xleb32	$VIRGIL_LOC/lib/util/DataReader.v3	/^	private def read_xleb32(first: byte, signed: bool, msg: string) -> u32 {$/;"	m
read_xleb64	$VIRGIL_LOC/lib/util/DataReader.v3	/^	private def read_xleb64(first: byte, signed: bool, msg: string) -> u64 {$/;"	m
recordAbs32	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def recordAbs32(pos: int, addr: X86_64Addr) {$/;"	m
recordRel32	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def recordRel32(pos: int, delta: int, addr: X86_64Addr) {$/;"	m
recv	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	def recv(buf: Range<byte>) -> NetResult<int> {$/;"	m
recvfrom	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	def recvfrom(sockfd: int, buf: Range<byte>, sockAddr: Array<byte>) -> NetResult<(int, int)> {$/;"	f
reduce	$VIRGIL_LOC/lib/util/List.v3	/^	def reduce<A, B, C>(a: List<A>, b: List<B>, func: (A, B) -> C) -> List<C> {$/;"	f
reduceV	$VIRGIL_LOC/lib/util/List.v3	/^	def reduceV<A, B, R>(a: List<A>, b: List<B>, func: (A, B) -> R) {$/;"	f
refill	$VIRGIL_LOC/lib/util/DataWriter.v3	/^	var refill = DataWriter.growI2X;	\/\/ refill behavior$/;"	d
reg	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def reg(r: X86_64Reg, rex: byte) -> this {$/;"	m
reg_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def reg_s(name: string, a: X86_64Reg, b: X86_64Xmmr, rex: byte) -> this {$/;"	m
regnum	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^class Arm64Reg(regnum: u5) {}$/;"	d
regnum	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^class X86_64Reg(regnum: byte) {$/;"	d
relMarker	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^class X86_64AddrPatcher(absMarker: int, relMarker: int) {$/;"	d
release	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^        +130    release:        byte[65];$/;"	d
remove	$VIRGIL_LOC/lib/pdk/Var.v3	/^	def remove(key: string) {$/;"	f
remove	$VIRGIL_LOC/lib/util/Edge.v3	/^	private def remove(dest: T) {$/;"	m
remove	$VIRGIL_LOC/lib/util/Map.v3	/^	def remove(key: K) -> bool {$/;"	m
removeIndex	$VIRGIL_LOC/lib/util/Arrays.v3	/^	def removeIndex<T>(array: Array<T>, index: int) {$/;"	f
render	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def render(buf: StringBuilder) -> StringBuilder {$/;"	m
render	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	def render(buf: StringBuilder) -> StringBuilder { \/\/ TODO: pass operand size$/;"	m
render	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def render(buf: StringBuilder) -> StringBuilder {$/;"	m
render	$VIRGIL_LOC/lib/file/json/JsonParser.v3	/^	def render(buf: StringBuilder) -> StringBuilder {$/;"	m
render	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	def render(buf: StringBuilder) -> StringBuilder {$/;"	m
render	$VIRGIL_LOC/lib/util/BitMatrix.v3	/^	def render(buf: StringBuilder) -> StringBuilder {$/;"	m
render	$VIRGIL_LOC/lib/util/DataWriter.v3	/^	def render(startPos: int, size: int, buf: StringBuilder) {$/;"	m
render	$VIRGIL_LOC/lib/util/FpSketch.v3	/^	def render(buf: StringBuilder) -> StringBuilder {$/;"	m
render	$VIRGIL_LOC/lib/util/List.v3	/^	def render<T>(buf: StringBuilder, append: (T, StringBuilder) -> StringBuilder,$/;"	f
render	$VIRGIL_LOC/lib/util/Strings.v3	/^	def render(render: StringBuilder -> StringBuilder) -> string {$/;"	f
renderAddr	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^def renderAddr(buf: StringBuilder, base: X86Reg, index: X86Reg, scale: byte, disp: int) -> StringBuilder {$/;"	m
renderCurrentLineWithCaret	$VIRGIL_LOC/lib/util/TextReader.v3	/^	def renderCurrentLineWithCaret(buf: StringBuilder, pos: int) -> StringBuilder {$/;"	m
renderDecimal	$VIRGIL_LOC/lib/util/Ints.v3	/^	def renderDecimal(val: int, a: Array<byte>, pos: int) -> int {$/;"	f
renderDecimal	$VIRGIL_LOC/lib/util/Longs.v3	/^	def renderDecimal(i: i64, a: Array<byte>, pos: int) -> int {$/;"	f
renderDecimal	$VIRGIL_LOC/lib/util/Strings.v3	/^	def renderDecimal(buf: Array<byte>, pos: int, val: int) -> int {$/;"	f
renderFixed	$VIRGIL_LOC/lib/util/Floats.v3	/^	private def renderFixed(d: u32, e: int, a: Array<byte>, pos: int, trailingZeros: u32) -> int {$/;"	f
renderFloat	$VIRGIL_LOC/lib/util/Floats.v3	/^	def renderFloat(val: float, a: Array<byte>, pos: int) -> int {$/;"	f
renderFloatDecimalDigits	$VIRGIL_LOC/lib/util/Floats.v3	/^	def renderFloatDecimalDigits(val: float, dd: u32, a: Array<byte>, pos: int) -> int {$/;"	f
renderFloatSpecial	$VIRGIL_LOC/lib/util/Floats.v3	/^	def renderFloatSpecial(exponent: u32, mantissa: u32, a: Array<byte>, pos: int) -> int { \/\/ XXX: inline?$/;"	f
renderFloatingDecimal	$VIRGIL_LOC/lib/util/Floats.v3	/^	def renderFloatingDecimal(d: u32, e: int, a: Array<byte>, pos: int) -> int {$/;"	f
renderFloatingDecimalFixed	$VIRGIL_LOC/lib/util/Floats.v3	/^	def renderFloatingDecimalFixed(d: u32, e: int, a: Array<byte>, pos: int, dd: u32) -> int {$/;"	f
renderHex8	$VIRGIL_LOC/lib/util/Strings.v3	/^	def renderHex8(buf: Array<byte>, pos: int, val: int) -> int {$/;"	f
renderLiteral	$VIRGIL_LOC/lib/util/Strings.v3	/^	def renderLiteral(buf: StringBuilder, s: string) -> StringBuilder {$/;"	f
renderNegativeSign	$VIRGIL_LOC/lib/util/Floats.v3	/^	private def renderNegativeSign(val: float, a: Array<byte>, pos: int) -> bool {$/;"	f
renderPosDecimal	$VIRGIL_LOC/lib/util/Ints.v3	/^	def renderPosDecimal(val: u32, a: Array<byte>, pos: int) -> int {$/;"	f
renderPosDecimal	$VIRGIL_LOC/lib/util/Longs.v3	/^	def renderPosDecimal(i: u64, a: Array<byte>, pos: int) -> int {$/;"	f
renderPosFloat	$VIRGIL_LOC/lib/util/Floats.v3	/^	def renderPosFloat(val: float, a: Array<byte>, pos: int, dd_optional: int) -> int {$/;"	f
renderRow	$VIRGIL_LOC/lib/util/BitMatrix.v3	/^	def renderRow(row: int, buf: StringBuilder) -> StringBuilder {$/;"	m
renderScientific	$VIRGIL_LOC/lib/util/Floats.v3	/^	private def renderScientific(d: u32, e: int, a: Array<byte>, pos: int) -> int {$/;"	f
renderSep	$VIRGIL_LOC/lib/util/List.v3	/^	def renderSep<T>(buf: StringBuilder, append: (T, StringBuilder) -> StringBuilder,$/;"	f
renderWithSize	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def renderWithSize(buf: StringBuilder, size: int) -> StringBuilder {$/;"	m
replace	$VIRGIL_LOC/lib/util/Arrays.v3	/^	def replace<T>(array: Array<T>, index: int, val: T) -> Array<T> {$/;"	f
repne	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def repne() -> this { \/\/ prefix$/;"	m
repne	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def repne() -> this { emitb(0xF2); }$/;"	m
repz	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def repz() -> this { \/\/ prefix$/;"	m
repz	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def repz() -> this { emitb(0xF3); }$/;"	m
req1	$VIRGIL_LOC/lib/util/TextReader.v3	/^	def req1(ch: byte) -> int {$/;"	m
reqN	$VIRGIL_LOC/lib/util/TextReader.v3	/^	def reqN(s: string) -> int {$/;"	m
res	$VIRGIL_LOC/lib/util/Sexpr.v3	/^    case Success(res: T);$/;"	d
reset	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	def reset(data: Range<byte>) -> this {$/;"	m
reset	$VIRGIL_LOC/lib/util/DataReader.v3	/^	def reset(ndata: Range<byte>, npos: int, nlimit: int) -> this {$/;"	m
reset	$VIRGIL_LOC/lib/util/DataWriter.v3	/^	def reset(ndata: Range<byte>, npos: int, nmax: int) -> this {$/;"	m
reset	$VIRGIL_LOC/lib/util/StringBuilder.v3	/^	def reset() -> this {$/;"	m
resize	$VIRGIL_LOC/lib/util/Stack.v3	/^	def resize(ntop: int) {$/;"	m
resize	$VIRGIL_LOC/lib/util/StringBuilder.v3	/^	def resize(nlength: int) -> this {$/;"	m
resize	$VIRGIL_LOC/lib/util/Vector.v3	/^	def resize(nlength: int) -> this {$/;"	m
ret	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def ret() -> this {$/;"	m
ret	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def ret() -> this {$/;"	m
ret	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def ret() { emitb(0xC3); }$/;"	m
ret_r	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def ret_r(rn: Arm64Gpr) -> this {$/;"	m
revents	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+6	revents:	u16;$/;"	d
reverse	$VIRGIL_LOC/lib/util/List.v3	/^	def reverse<T>(rev: List<T>) -> List<T> {$/;"	f
reverse	$VIRGIL_LOC/lib/util/Ranges.v3	/^	def reverse<T>(r: Range<T>) {$/;"	f
reverse	$VIRGIL_LOC/lib/util/Vector.v3	/^	def reverse() -> this {$/;"	m
rex_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	private def rex_m(a: X86_64Addr, b: byte) -> byte {$/;"	m
rex_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	private def rex_r(a: X86_64Reg, b: byte) -> byte {$/;"	m
rip	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+168	rip: u64;$/;"	d
rjustify	$VIRGIL_LOC/lib/util/StringBuilder.v3	/^	def rjustify(ch: byte, nchars: int, len: int) -> this {$/;"	m
rlim_cur	$VIRGIL_LOC/lib/wasm-linux/WaliLayouts.v3	/^	+0	rlim_cur: u64;$/;"	d
rlim_cur	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+0	rlim_cur: u64;$/;"	d
rlim_max	$VIRGIL_LOC/lib/wasm-linux/WaliLayouts.v3	/^	+8	rlim_max: u64;$/;"	d
rlim_max	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+8	rlim_max: u64;$/;"	d
rlimit	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^layout rlimit {$/;"	l
rm	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case SubReg(rm: ArmReg);$/;"	d
rm_i	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def rm_i(a: X86Rm, i: int) { \/\/ register\/memory, immediate$/;"	m
rm_r	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def rm_r(a: X86Rm, b: X86Reg) { \/\/ register\/memory, register$/;"	m
robust_list_head	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^layout robust_list_head {$/;"	l
rol_m_cl	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def rol_m_cl(a: X86_64Addr) -> this {$/;"	m
rol_r_cl	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def rol_r_cl(a: X86_64Gpr) -> this {$/;"	m
rol_r_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def rol_r_i(a: X86_64Gpr, imm: u6) -> this {$/;"	m
ror_m_cl	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def ror_m_cl(a: X86_64Addr) -> this {$/;"	m
ror_r_cl	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def ror_r_cl(a: X86_64Gpr) -> this {$/;"	m
ror_r_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def ror_r_i(a: X86_64Gpr, imm: u6) -> this {$/;"	m
rori	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	def rori(rd: ArmReg, rm: ArmReg, imm: u5) { mov(rd, ArmOperand.RegRorImm(rm, imm)); }$/;"	m
rorr	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	def rorr(rd: ArmReg, rm: ArmReg, sh: ArmReg) { mov(rd, ArmOperand.RegRorReg(rm, sh)); }$/;"	m
rot	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case Imm8(val: u8, rot: u4);$/;"	d
round	$VIRGIL_LOC/lib/util/FpSketch.v3	/^	def round(width: int) -> this {$/;"	m
roundg	$VIRGIL_LOC/lib/util/FpSketch.v3	/^	def roundg(width: int, guard: bool) -> this {$/;"	m
roundpd_s_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def roundpd_s_m(a: X86_64Xmmr, b: X86_64Addr, c: X86_64Rounding) -> this {$/;"	m
roundpd_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def roundpd_s_s(a: X86_64Xmmr, b: X86_64Xmmr, c: X86_64Rounding) -> this {$/;"	m
roundps_s_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def roundps_s_m(a: X86_64Xmmr, b: X86_64Addr, c: X86_64Rounding) -> this {$/;"	m
roundps_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def roundps_s_s(a: X86_64Xmmr, b: X86_64Xmmr, c: X86_64Rounding) -> this {$/;"	m
roundsd	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def roundsd(a: SSEReg, b: SSERm, c: RoundingMode) {$/;"	m
roundsd_s_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def roundsd_s_m(a: X86_64Xmmr, b: X86_64Addr, c: X86_64Rounding) -> this {$/;"	m
roundsd_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def roundsd_s_s(a: X86_64Xmmr, b: X86_64Xmmr, c: X86_64Rounding) -> this {$/;"	m
roundss	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def roundss(a: SSEReg, b: SSERm, c: RoundingMode) {$/;"	m
roundss_s_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def roundss_s_m(a: X86_64Xmmr, b: X86_64Addr, c: X86_64Rounding) -> this {$/;"	m
roundss_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def roundss_s_s(a: X86_64Xmmr, b: X86_64Xmmr, c: X86_64Rounding) -> this {$/;"	m
row	$VIRGIL_LOC/lib/util/BitMatrix.v3	/^	def row(index: int) -> BitMatrixRow {$/;"	m
rowInts	$VIRGIL_LOC/lib/util/BitMatrix.v3	/^	def rowInts(index: int) -> Range<int> {$/;"	m
rows	$VIRGIL_LOC/lib/file/csv/CsvParser.v3	/^	private var rows = Vector<(int, int)>.new();$/;"	d
rs	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case RegShrReg(rm: ArmReg, rs: ArmReg);$/;"	d
rsp	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+160	rsp: u64;$/;"	d
ru_idrss	$VIRGIL_LOC/lib/wasm-linux/WaliLayouts.v3	/^	+48	ru_idrss:	u64;$/;"	d
ru_idrss	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+48	ru_idrss:	u64;$/;"	d
ru_inblock	$VIRGIL_LOC/lib/wasm-linux/WaliLayouts.v3	/^	+88	ru_inblock:	u64;$/;"	d
ru_inblock	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+88	ru_inblock:	u64;$/;"	d
ru_isrss	$VIRGIL_LOC/lib/wasm-linux/WaliLayouts.v3	/^	+56	ru_isrss:	u64;$/;"	d
ru_isrss	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+56	ru_isrss:	u64;$/;"	d
ru_ixrss	$VIRGIL_LOC/lib/wasm-linux/WaliLayouts.v3	/^	+40	ru_ixrss:	u64;$/;"	d
ru_ixrss	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+40	ru_ixrss:	u64;$/;"	d
ru_majflt	$VIRGIL_LOC/lib/wasm-linux/WaliLayouts.v3	/^	+72	ru_majflt:	u64;$/;"	d
ru_majflt	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+72	ru_majflt:	u64;$/;"	d
ru_maxrss	$VIRGIL_LOC/lib/wasm-linux/WaliLayouts.v3	/^	+32	ru_maxrss:	u64;$/;"	d
ru_maxrss	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+32	ru_maxrss:	u64;$/;"	d
ru_minflt	$VIRGIL_LOC/lib/wasm-linux/WaliLayouts.v3	/^	+64	ru_minflt:	u64;$/;"	d
ru_minflt	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+64	ru_minflt:	u64;$/;"	d
ru_msgrcv	$VIRGIL_LOC/lib/wasm-linux/WaliLayouts.v3	/^	+112	ru_msgrcv:	u64;$/;"	d
ru_msgrcv	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+112	ru_msgrcv:	u64;$/;"	d
ru_msgsnd	$VIRGIL_LOC/lib/wasm-linux/WaliLayouts.v3	/^	+104	ru_msgsnd:	u64;$/;"	d
ru_msgsnd	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+104	ru_msgsnd:	u64;$/;"	d
ru_nivcsw	$VIRGIL_LOC/lib/wasm-linux/WaliLayouts.v3	/^	+136	ru_nivcsw:	u64;$/;"	d
ru_nivcsw	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+136	ru_nivcsw:	u64;$/;"	d
ru_nsignals	$VIRGIL_LOC/lib/wasm-linux/WaliLayouts.v3	/^	+120	ru_nsignals:	u64;$/;"	d
ru_nsignals	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+120	ru_nsignals:	u64;$/;"	d
ru_nswap	$VIRGIL_LOC/lib/wasm-linux/WaliLayouts.v3	/^	+80	ru_nswap:	u64;$/;"	d
ru_nswap	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+80	ru_nswap:	u64;$/;"	d
ru_nvcsw	$VIRGIL_LOC/lib/wasm-linux/WaliLayouts.v3	/^	+128	ru_nvcsw:	u64;$/;"	d
ru_nvcsw	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+128	ru_nvcsw:	u64;$/;"	d
ru_oublock	$VIRGIL_LOC/lib/wasm-linux/WaliLayouts.v3	/^	+96	ru_oublock:	u64;$/;"	d
ru_oublock	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+96	ru_oublock:	u64;$/;"	d
ru_stime	$VIRGIL_LOC/lib/wasm-linux/WaliLayouts.v3	/^	+16	ru_stime:	timeval;$/;"	d
ru_stime	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+16	ru_stime:	timeval;$/;"	d
ru_utime	$VIRGIL_LOC/lib/wasm-linux/WaliLayouts.v3	/^	+0	ru_utime:	timeval;$/;"	d
ru_utime	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+0	ru_utime:	timeval;$/;"	d
run	$VIRGIL_LOC/lib/term/Animator.v3	/^	def run() {$/;"	m
run	$VIRGIL_LOC/lib/util/WorkQueue.v3	/^private class WorkUnit(run: void -> void) {$/;"	d
rusage	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^layout rusage {$/;"	l
s1	$VIRGIL_LOC/lib/util/GlobMatcher.v3	/^	private def s1 = Vector<int>.new();$/;"	d
s2	$VIRGIL_LOC/lib/util/GlobMatcher.v3	/^	private def s2 = Vector<int>.new();$/;"	d
s_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def s_i(name: string, a: X86_64Xmmr, imm: int) -> this {$/;"	m
s_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def s_m(name: string, a: X86_64Xmmr, b: X86_64Addr, rex: byte) -> this {$/;"	m
s_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	case s_m(a: X86_64Xmmr, b: X86_64Addr);$/;"	d
s_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	case s_r(a: X86_64Xmmr, b: X86_64Gpr);$/;"	d
s_r_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def s_r_i(name: string, a: X86_64Xmmr, b: X86_64Reg, imm: int, rex: byte) -> this {$/;"	m
s_reg	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def s_reg(name: string, a: X86_64Xmmr, b: X86_64Reg, rex: byte) -> this {$/;"	m
s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def s_s(name: string, a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	case s_s(a: X86_64Xmmr, b: X86_64Xmmr);$/;"	d
s_s_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def s_s_i(name: string, a: X86_64Xmmr, b: X86_64Xmmr, imm: int) -> this {$/;"	m
sa_flags	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+136	sa_flags:	u32;$/;"	d
sa_handler	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+0	sa_handler:	u64\/*:Pointer*\/;$/;"	d
sa_mask	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+8	sa_mask:	byte[16]; \/\/ TODO$/;"	d
sa_restorer	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+144	sa_restorer:	u64\/*:Pointer*\/;$/;"	d
sar_cl	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def sar_cl(a: X86Rm) { emitb_rm(0xD3, a, 7); } \/\/ arithmetic shift right by value in CL$/;"	m
sar_i	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def sar_i(a: X86Rm, imm: int) { \/\/ arithmetic shift right by immediate$/;"	m
sar_m_cl	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def sar_m_cl(a: X86_64Addr) -> this {$/;"	m
sar_m_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def sar_m_i(a: X86_64Addr, imm: u6) -> this {$/;"	m
sar_r_cl	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def sar_r_cl(a: X86_64Gpr) -> this {$/;"	m
sar_r_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def sar_r_i(a: X86_64Gpr, imm: u6) -> this {$/;"	m
sb	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	def sb(rs: MipsReg, rt: MipsReg, offset: u16)  { emit_r2i(0xa0000000, rs, rt, offset); }$/;"	m
sbb	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	var sbb: X86Op2;$/;"	d
sbb_m_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def sbb_m_i(a: X86_64Addr, i: int) -> this    { emitop2_m_i(a, i, OP_REX, 3); }$/;"	m
sbb_m_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def sbb_m_r(a: X86_64Addr, b: X86_64Gpr) -> this { emitop2_m_r(a, b, OP_REX, 3); }$/;"	m
sbb_r_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def sbb_r_i(a: X86_64Gpr, i: int) -> this     { emitop2_r_i(a, i, OP_REX, 3); }$/;"	m
sbb_r_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def sbb_r_m(a: X86_64Gpr, b: X86_64Addr) -> this { emitop2_r_m(a, b, OP_REX, 3); }$/;"	m
sbb_r_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def sbb_r_r(a: X86_64Gpr, b: X86_64Gpr) -> this  { emitop2_r_r(a, b, OP_REX, 3); }$/;"	m
scale	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^class X86_64Addr(base: X86_64Gpr, index: X86_64Gpr, scale: byte, disp: int) {$/;"	d
scale	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^class X86Addr(base: X86Reg, index: X86Reg, scale: byte, disp: int) extends X86Rm {$/;"	d
scasb	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def scasb() -> this {$/;"	m
scasb	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def scasb() { emitb(0xAE); }$/;"	m
sched_attr	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^layout sched_attr {$/;"	l
sched_deadline	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+32	sched_deadline:	u64;$/;"	d
sched_flags	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+8	sched_flags:	u64;$/;"	d
sched_nice	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+16	sched_nice:	i32;$/;"	d
sched_param	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^layout sched_param {$/;"	l
sched_period	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+40	sched_period:	u64;$/;"	d
sched_policy	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+4	sched_policy:	u32;$/;"	d
sched_priority	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+20	sched_priority:	u32;$/;"	d
sched_runtime	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+24	sched_runtime:	u64;$/;"	d
scrollDown	$VIRGIL_LOC/lib/term/Vt100.v3	/^	def scrollDown = esc("D");$/;"	d
scrollUp	$VIRGIL_LOC/lib/term/Vt100.v3	/^	def scrollUp = esc("M");$/;"	d
sdiv	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	def sdiv(rd: ArmReg, rs: ArmReg, rm: ArmReg) { emit_rrr(0x0710f010, rd, rm, rs); }$/;"	m
sdivd_r_r_r	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def sdivd_r_r_r(rd: Arm64Gpr, rn: Arm64Gpr, rm: Arm64Gpr) -> this {$/;"	m
sdivq_r_r_r	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def sdivq_r_r_r(rd: Arm64Gpr, rn: Arm64Gpr, rm: Arm64Gpr) -> this {$/;"	m
seed	$VIRGIL_LOC/lib/util/Random.v3	/^	var seed = 121013;$/;"	d
selectLineDraw	$VIRGIL_LOC/lib/term/Vt100.v3	/^	def selectLineDraw = lit("\x1b)0");$/;"	d
sem_flg	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+4	sem_flg:	u16;$/;"	d
sem_num	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+0	sem_num:	u16;$/;"	d
sem_op	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+2	sem_op:		u16;$/;"	d
sembuf	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^layout sembuf {$/;"	l
send	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	def send(msg: Range<byte>) -> NetResult<void> {$/;"	m
send	$VIRGIL_LOC/lib/pdk/Http.v3	/^	def send(body: Memory) -> Response {$/;"	m
send	$VIRGIL_LOC/lib/util/DataWriter.v3	/^	def send<R>(f: Range<byte> -> R) -> R {$/;"	m
send	$VIRGIL_LOC/lib/util/StringBuilder.v3	/^	def send<R>(f: Range<byte> -> R) -> R {$/;"	m
send	$VIRGIL_LOC/lib/util/Vector.v3	/^	def send<R>(f: Range<T> -> R) -> R {$/;"	m
sendto	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	def sendto(sockfd: int, msg: Range<byte>, sockAddr: Array<byte>) -> NetResult<void> {$/;"	f
seqnum	$VIRGIL_LOC/lib/net/tcpip/Packets.v3	/^	+4	seqnum:		u32;$/;"	d
set	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	private def set(a: X86Rm, sop: int) { emitbb_rm(0x0f, sop, a, 0); }$/;"	m
set	$VIRGIL_LOC/lib/util/BitMatrix.v3	/^	def set(row: int, col: int) -> bool {$/;"	m
set	$VIRGIL_LOC/lib/util/Vector.v3	/^	def set(index: int, e: T) -> this {$/;"	m
setBackground	$VIRGIL_LOC/lib/term/Vt100.v3	/^	def setBackground(color: int) {$/;"	f
setBound	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	def setBound(bound: bool) -> this {$/;"	m
setBytes	$VIRGIL_LOC/lib/pdk/Var.v3	/^	def setBytes(key: string, value: Array<byte>) {$/;"	f
setConnected	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	def setConnected(connected: bool) -> this {$/;"	m
setEOFError	$VIRGIL_LOC/lib/util/DataReader.v3	/^	def setEOFError(pos: int, size: int, msg: string) {$/;"	m
setFPS	$VIRGIL_LOC/lib/term/Animator.v3	/^	def setFPS(f: u32) {$/;"	m
setFirstError	$VIRGIL_LOC/lib/util/DataReader.v3	/^	def setFirstError(pos: int, msg: string) {$/;"	m
setFirstError	$VIRGIL_LOC/lib/util/TextReader.v3	/^	def setFirstError(eline: int, ecol: int, msg: string) {$/;"	m
setForeground	$VIRGIL_LOC/lib/term/Vt100.v3	/^	def setForeground(color: int) {$/;"	f
setInt	$VIRGIL_LOC/lib/pdk/Var.v3	/^	def setInt(key: string, value: int) {$/;"	f
setIntVal	$VIRGIL_LOC/lib/util/NumberParser.v3	/^	private def setIntVal(ival: int) -> NumberParserValue {$/;"	m
setListHead	$VIRGIL_LOC/lib/util/Edge.v3	/^	def setListHead(dest: T, e: Edge<T>);$/;"	m
setListening	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	def setListening(listening: bool) -> this {$/;"	m
setLocalPort	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	def setLocalPort(local: int) -> this {$/;"	m
setLongVal	$VIRGIL_LOC/lib/util/NumberParser.v3	/^	private def setLongVal(lval: long) -> NumberParserValue {$/;"	m
setNormalBackground	$VIRGIL_LOC/lib/term/Vt100.v3	/^	def setNormalBackground = esc("[0m");$/;"	d
setNormalForeground	$VIRGIL_LOC/lib/term/Vt100.v3	/^	def setNormalForeground = esc("[1m");$/;"	d
setOpen	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	def setOpen(open: bool) -> this {$/;"	m
setOption	$VIRGIL_LOC/lib/util/Option.v3	/^	def setOption(name: string, val: string) -> bool {$/;"	m
setOption0	$VIRGIL_LOC/lib/util/Option.v3	/^	private def setOption0(name: string, val: string, option: Opt) -> bool {$/;"	m
setRow	$VIRGIL_LOC/lib/util/BitMatrix.v3	/^	def setRow(row: int) {$/;"	m
setTracing	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def setTracing(outf: Range<byte> -> void) {$/;"	m
setUnmatched	$VIRGIL_LOC/lib/util/Option.v3	/^	var setUnmatched: (string, string) -> void;$/;"	d
set_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def set_m(cond: X86_64Cond, a: X86_64Addr) -> this {$/;"	m
set_marker	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def set_marker(i: int) -> this {$/;"	m
set_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def set_r(cond: X86_64Cond, a: X86_64Gpr) -> this {$/;"	m
seta	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def seta (a: X86Rm) { set(a, 0x97); }$/;"	m
setc	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def setc (a: X86Rm) { set(a, 0x92); }$/;"	m
setdq	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def setdq(d: X86_64Assembler, q: X86_64Assembler) {$/;"	m
setg	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def setg (a: X86Rm) { set(a, 0x9F); }$/;"	m
setge	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def setge(a: X86Rm) { set(a, 0x9D); }$/;"	m
setl	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def setl (a: X86Rm) { set(a, 0x9C); }$/;"	m
setle	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def setle(a: X86Rm) { set(a, 0x9E); }$/;"	m
setna	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def setna(a: X86Rm) { set(a, 0x96); }$/;"	m
setnc	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def setnc(a: X86Rm) { set(a, 0x93); }$/;"	m
setno	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def setno(a: X86Rm) { set(a, 0x91); }$/;"	m
setnp	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def setnp(a: X86Rm) { set(a, 0x9B); }$/;"	m
setns	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def setns(a: X86Rm) { set(a, 0x99); }$/;"	m
setnz	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def setnz(a: X86Rm) { set(a, 0x95); }$/;"	m
seto	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def seto (a: X86Rm) { set(a, 0x90); }$/;"	m
setp	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def setp (a: X86Rm) { set(a, 0x9A); }$/;"	m
sets	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def sets (a: X86Rm) { set(a, 0x98); }$/;"	m
setx	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def setx(cond: X86Cond, a: X86Rm) { set(a, 0x90 + cond.index); }$/;"	m
setz	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def setz (a: X86Rm) { set(a, 0x94); }$/;"	m
sh	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	def sh(rs: MipsReg, rt: MipsReg, offset: u16)  { emit_r2i(0xa4000000, rs, rt, offset); }$/;"	m
sh_addr	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^	+16	sh_addr:	u64;$/;"	d
sh_addralign	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^	+48	sh_addralign:	u64;$/;"	d
sh_entsize	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^	+56	sh_entsize:	u64;$/;"	d
sh_flags	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^	+8	sh_flags:	u64;$/;"	d
sh_info	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^	+44	sh_info:	u32;$/;"	d
sh_link	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^	+40	sh_link:	u32;$/;"	d
sh_name	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^	+0	sh_name:	u32;$/;"	d
sh_offset	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^	+24	sh_offset:	u64;$/;"	d
sh_size	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^	+32	sh_size:	u64;$/;"	d
sh_type	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^	+4	sh_type:	u32;$/;"	d
sharedram	$VIRGIL_LOC/lib/wasm-linux/WaliLayouts.v3	/^        +48     sharedram:      u64;$/;"	d
sharedram	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^        +48     sharedram:      u64;$/;"	d
shift	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case RegShrImm(rm: ArmReg, shift: u5);$/;"	d
shifter	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	def shifter(op: ArmOperand) -> u32 {$/;"	m
shl_cl	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def shl_cl(a: X86Rm) { emitb_rm(0xD3, a, 4); } \/\/ shift left by value in CL$/;"	m
shl_i	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def shl_i(a: X86Rm, imm: int) { \/\/ shift left by immediate$/;"	m
shl_m_cl	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def shl_m_cl(a: X86_64Addr) -> this {$/;"	m
shl_m_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def shl_m_i(a: X86_64Addr, imm: u6) -> this {$/;"	m
shl_r_cl	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def shl_r_cl(a: X86_64Gpr) -> this {$/;"	m
shl_r_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def shl_r_i(a: X86_64Gpr, imm: u6) -> this {$/;"	m
shld_cl	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def shld_cl(a: X86Rm, b: X86Reg) { emitbb_rm(0x0F, 0xA5, a, b.index); } \/\/ shift left by value in CL and shift in bits from b$/;"	m
shm_atime	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+56	shm_atime:	u64;$/;"	d
shm_cpid	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+80	shm_cpid:	u32;$/;"	d
shm_ctime	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+72	shm_ctime:	u64;$/;"	d
shm_dtime	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+64	shm_dtime:	u64;$/;"	d
shm_lpid	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+84	shm_lpid:	u32;$/;"	d
shm_nattch	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+92	shm_nattch:	u32\/*:shmatt*\/;$/;"	d
shm_perm	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+0	shm_perm:	u32\/*:ipc_perm*\/;$/;"	d
shm_segsz	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+48	shm_segsz:	u64;$/;"	d
shmid_ds	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^layout shmid_ds {$/;"	l
shorten	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	var shorten = true;$/;"	d
showCursor	$VIRGIL_LOC/lib/term/Vt100.v3	/^	def showCursor = esc("[?25h");$/;"	d
show_pos	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def show_pos() -> this {$/;"	m
show_skipped	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def show_skipped() -> this {$/;"	m
shr_cl	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def shr_cl(a: X86Rm) { \/\/ shift right by value in CL$/;"	m
shr_i	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def shr_i(a: X86Rm, imm: int) { \/\/ shift right by immediate$/;"	m
shr_m_cl	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def shr_m_cl(a: X86_64Addr) -> this {$/;"	m
shr_m_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def shr_m_i(a: X86_64Addr, imm: u6) -> this {$/;"	m
shr_r_cl	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def shr_r_cl(a: X86_64Gpr) -> this {$/;"	m
shr_r_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def shr_r_i(a: X86_64Gpr, imm: u6) -> this {$/;"	m
shrd_cl	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def shrd_cl(a: X86Rm, b: X86Reg) { \/\/ shift right by value in CL and shift in bits from b$/;"	m
shrd_i	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def shrd_i(a: X86Rm, b: X86Reg, imm: byte) { \/\/ shift right by immediate$/;"	m
shufps_s_s_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def shufps_s_s_i(a: X86_64Xmmr, b: X86_64Xmmr, imm: u8) -> this {$/;"	m
shx_m_cl	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	private def shx_m_cl(a: X86_64Addr, rex: byte, op: byte) -> this {$/;"	m
shx_m_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	private def shx_m_i(a: X86_64Addr, rex: byte, imm: u6, op: byte) -> this {$/;"	m
shx_r_cl	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	private def shx_r_cl(a: X86_64Gpr, rex: byte, op: byte) -> this {$/;"	m
shx_r_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	private def shx_r_i(a: X86_64Gpr, rex: byte, imm: u6, op: byte) -> this {$/;"	m
si_arch	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+28	si_arch:	u32;$/;"	d
si_code	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+8	si_code:	u64;$/;"	d
si_errno	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+4	si_errno:	u32;$/;"	d
si_pid	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+16	si_pid:		u32;$/;"	d
si_signo	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+0	si_signo:	u32;$/;"	d
si_status	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+24	si_status:	u32;$/;"	d
si_stime	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+40	si_stime:	u32;$/;"	d
si_uid	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+20	si_uid:	u32;$/;"	d
si_utime	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+32	si_utime:	u32;$/;"	d
sigaction	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^layout sigaction {$/;"	l
sigev_notify	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+12	sigev_notify:			u32;$/;"	d
sigev_notify_attributes	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+24	sigev_notify_attributes:	u64\/*:Pointer*\/;$/;"	d
sigev_notify_function	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+16	sigev_notify_function:		u64\/*:Pointer*\/;$/;"	d
sigev_signo	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+8	sigev_signo:			u32;$/;"	d
sigev_value	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+0	sigev_value:			u64; \/\/ TODO$/;"	d
sigevent	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^layout sigevent {$/;"	l
siginfo	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^layout siginfo {$/;"	l
sign	$VIRGIL_LOC/lib/util/NumberParser.v3	/^	case Float(sign: int, exp: int, mantissa: u64);$/;"	d
signed	$VIRGIL_LOC/lib/util/NumberParser.v3	/^	case Int(signed: bool, width: int);$/;"	d
size	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+0	size:		u32;$/;"	d
skipAddr	$VIRGIL_LOC/lib/util/DataWriter.v3	/^	def skipAddr(length: int) -> this {$/;"	m
skipLeading	$VIRGIL_LOC/lib/util/Ranges.v3	/^	def skipLeading<T>(range: Range<T>, cond: (T) -> bool) -> Range<T> {$/;"	f
skipN	$VIRGIL_LOC/lib/util/DataReader.v3	/^	def skipN(length: int) {$/;"	m
skipN	$VIRGIL_LOC/lib/util/DataWriter.v3	/^	def skipN(length: int) -> this {$/;"	m
skipNothing	$VIRGIL_LOC/lib/util/TextReader.v3	/^	def skipNothing() {$/;"	m
skipSpacesAndTabs	$VIRGIL_LOC/lib/util/TextReader.v3	/^	def skipSpacesAndTabs() {$/;"	m
skipTrailing	$VIRGIL_LOC/lib/util/Ranges.v3	/^	def skipTrailing<T>(range: Range<T>, cond: (T) -> bool) -> Range<T> {$/;"	f
skipWhitespace	$VIRGIL_LOC/lib/util/TextReader.v3	/^	def skipWhitespace() {$/;"	m
skipWs	$VIRGIL_LOC/lib/util/TextReader.v3	/^	var skipWs  = TextReader.skipWhitespace;\/\/ whitespace callback$/;"	d
skip_leb	$VIRGIL_LOC/lib/util/DataReader.v3	/^	def skip_leb() {$/;"	m
skip_leb32	$VIRGIL_LOC/lib/util/DataWriter.v3	/^	def skip_leb32() -> int {$/;"	m
skip_underscore	$VIRGIL_LOC/lib/util/NumberParser.v3	/^	var skip_underscore: bool = true;$/;"	d
sll	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	def sll(rd: MipsReg, rs: MipsReg, imm: u5)      { w.put_b32be(0x0 | int.view(rs.tag) << 16 | int.view(rd.tag) << 11 | imm << 6); }$/;"	m
sllv	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	def sllv(rd: MipsReg, rs: MipsReg, rt: MipsReg) { emit_r3(0x00000004, rd, rs, rt); }$/;"	m
slt	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	def slt(rd: MipsReg, rs: MipsReg, rt: MipsReg)  { emit_r3(0x0000002a, rd, rs, rt); }$/;"	m
slti	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	def slti(rd: MipsReg, rs: MipsReg, imm: i16)    { emit_r2i(0x28000000, rd, rs, u16.!(imm)); }$/;"	m
sltiu	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	def sltiu(rd: MipsReg, rs: MipsReg, imm: u16)   { emit_r2i(0x2c000000, rd, rs, u16.!(imm)); }$/;"	m
sltu	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	def sltu(rd: MipsReg, rs: MipsReg, rt: MipsReg) { emit_r3(0x0000002b, rd, rs, rt); }$/;"	m
sockAddr	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	private var sockAddr: Array<byte>;$/;"	d
sockaddr	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^layout sockaddr {$/;"	l
socket	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	def socket(family: int, socketType: int, protocol: int) -> NetResult<int> {$/;"	f
socketType	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	def socketType: SocketType;$/;"	d
sort	$VIRGIL_LOC/lib/util/Arrays.v3	/^	def sort<T>(array: Array<T>, start: int, end: int, cmp: (T, T) -> bool) -> Array<T> {$/;"	f
sp	$VIRGIL_LOC/lib/util/StringBuilder.v3	/^	def sp() -> this {$/;"	m
split	$VIRGIL_LOC/lib/util/Strings.v3	/^	def split(str: string, separator: string, maxsplit: int) -> Array<string> {$/;"	f
splitOnChar	$VIRGIL_LOC/lib/util/Strings.v3	/^	def splitOnChar(str: string, charPred: (byte) -> bool, maxsplit: int) -> Array<string> {$/;"	f
splitOnWhiteSpace	$VIRGIL_LOC/lib/util/Strings.v3	/^	def splitOnWhiteSpace(str: string, maxsplit: int) -> Array<string> {$/;"	f
split_char_cond	$VIRGIL_LOC/lib/util/Strings.v3	/^	private def split_char_cond(str: string, charPred: (byte) -> bool, idx: int) -> bool {$/;"	f
split_cond	$VIRGIL_LOC/lib/util/Strings.v3	/^	private def split_cond(str: string, separator: string, idx: int) -> bool {$/;"	f
split_internal	$VIRGIL_LOC/lib/util/Strings.v3	/^	private def split_internal<T>(str: string, maxsplit: int, cond: (int) -> bool, sep_len: int) -> Array<string> {$/;"	f
sqrtpd_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def sqrtpd_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
sqrtps_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def sqrtps_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
sqrtsd	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def sqrtsd(a: SSEReg, b: SSERm) { emitbbb_s_sm(0xF2, 0x0F, 0x51, a, b); }$/;"	m
sqrtsd_s_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def sqrtsd_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {$/;"	m
sqrtsd_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def sqrtsd_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
sqrtss	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def sqrtss(a: SSEReg, b: SSERm) { emitbbb_s_sm(0xF3, 0x0F, 0x51, a, b); }$/;"	m
sqrtss_s_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def sqrtss_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {$/;"	m
sqrtss_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def sqrtss_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
sra	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	def sra(rd: MipsReg, rs: MipsReg, imm: u5)      { w.put_b32be(0x3 | int.view(rs.tag) << 16 | int.view(rd.tag) << 11 | imm << 6); }$/;"	m
srav	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	def srav(rd: MipsReg, rs: MipsReg, rt: MipsReg) { emit_r3(0x00000007, rd, rs, rt); }$/;"	m
src	$VIRGIL_LOC/lib/util/Edge.v3	/^	def src: T;		\/\/ the source of this edge$/;"	d
srcaddr	$VIRGIL_LOC/lib/net/tcpip/Packets.v3	/^	+12	srcaddr:	u32;$/;"	d
srcport	$VIRGIL_LOC/lib/net/tcpip/Packets.v3	/^	+0	srcport:	u16;$/;"	d
srl	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	def srl(rd: MipsReg, rs: MipsReg, imm: u5)      { w.put_b32be(0x2 | int.view(rs.tag) << 16 | int.view(rd.tag) << 11 | imm << 6); }$/;"	m
srlv	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	def srlv(rd: MipsReg, rs: MipsReg, rt: MipsReg) { emit_r3(0x00000006, rd, rs, rt); }$/;"	m
st_atim	$VIRGIL_LOC/lib/wasm-linux/WaliLayouts.v3	/^	+72	st_atim:	wali_timespec;$/;"	d
st_atim	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+72	st_atim:	timespec;$/;"	d
st_blksize	$VIRGIL_LOC/lib/wasm-linux/WaliLayouts.v3	/^	+56	st_blksize:	u64;$/;"	d
st_blksize	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+56	st_blksize:	u64;$/;"	d
st_blocks	$VIRGIL_LOC/lib/wasm-linux/WaliLayouts.v3	/^	+64	st_blocks:	i64;$/;"	d
st_blocks	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+64	st_blocks:	u64;$/;"	d
st_ctim	$VIRGIL_LOC/lib/wasm-linux/WaliLayouts.v3	/^	+104	st_ctim:	wali_timespec;$/;"	d
st_ctim	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+104	st_ctim:	timespec;$/;"	d
st_dev	$VIRGIL_LOC/lib/wasm-linux/WaliLayouts.v3	/^	+0	st_dev:		u64;$/;"	d
st_dev	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+0	st_dev:		u64;$/;"	d
st_gid	$VIRGIL_LOC/lib/wasm-linux/WaliLayouts.v3	/^	+32	st_gid:		u32;$/;"	d
st_gid	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+32	st_gid:		u32;$/;"	d
st_index	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^	+14	st_index:	u16;$/;"	d
st_info	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^	+4	st_info:	u8;$/;"	d
st_ino	$VIRGIL_LOC/lib/wasm-linux/WaliLayouts.v3	/^	+8	st_ino:		u64;$/;"	d
st_ino	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+8	st_ino:		u64;$/;"	d
st_mode	$VIRGIL_LOC/lib/wasm-linux/WaliLayouts.v3	/^	+24	st_mode:	u32;$/;"	d
st_mode	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+16	st_mode:	u64;$/;"	d
st_mtim	$VIRGIL_LOC/lib/wasm-linux/WaliLayouts.v3	/^	+88	st_mtim:	wali_timespec;$/;"	d
st_mtim	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+88	st_mtim:	timespec;$/;"	d
st_name	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^	+0	st_name:	u32;$/;"	d
st_nlink	$VIRGIL_LOC/lib/wasm-linux/WaliLayouts.v3	/^	+16	st_nlink:	u64;$/;"	d
st_nlink	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+24	st_nlink:	u64;$/;"	d
st_other	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^	+5	st_other:	u8;$/;"	d
st_rdev	$VIRGIL_LOC/lib/wasm-linux/WaliLayouts.v3	/^	+40	st_rdev:	u64;$/;"	d
st_shndx	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^	+6	st_shndx:	u16;$/;"	d
st_size	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^	+8	st_size:	u32;$/;"	d
st_size	$VIRGIL_LOC/lib/wasm-linux/WaliLayouts.v3	/^	+48	st_size:	u64;$/;"	d
st_size	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+48	st_size:	u64;$/;"	d
st_uid	$VIRGIL_LOC/lib/wasm-linux/WaliLayouts.v3	/^	+28	st_uid:		u32;$/;"	d
st_value	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^	+8	st_value:	u64;$/;"	d
stable64_grow	$VIRGIL_LOC/lib/ic/ic0_untyped.v3	/^	def stable64_grow(new_pages: i64) -> i64;						\/\/ *$/;"	f
stable64_read	$VIRGIL_LOC/lib/ic/ic0_untyped.v3	/^	def stable64_read(dst: i64, offset: i64, size: i64);					\/\/ *$/;"	f
stable64_size	$VIRGIL_LOC/lib/ic/ic0_untyped.v3	/^	def stable64_size() -> i64;				 				\/\/ *$/;"	f
stable64_write	$VIRGIL_LOC/lib/ic/ic0_untyped.v3	/^	def stable64_write(offset: i64, src: i64, size: i64);					\/\/ *$/;"	f
stable_grow	$VIRGIL_LOC/lib/ic/ic0_untyped.v3	/^	def stable_grow(new_pages: i32) -> i32;		    					\/\/ *$/;"	f
stable_read	$VIRGIL_LOC/lib/ic/ic0_untyped.v3	/^	def stable_read(dst: i32, offset: i32, size: i32);					\/\/ *$/;"	f
stable_size	$VIRGIL_LOC/lib/ic/ic0_untyped.v3	/^	def stable_size() -> i32;								\/\/ *$/;"	f
stable_write	$VIRGIL_LOC/lib/ic/ic0_untyped.v3	/^	def stable_write(offset: i32, src: i32, size: i32);					\/\/ *$/;"	f
stack	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+40	stack:		u64;$/;"	d
stack_size	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+48	stack_size:	u64;$/;"	d
star_rel	$VIRGIL_LOC/lib/util/TextReader.v3	/^	def star_rel(offset: int, f: byte -> bool) -> int {$/;"	m
start	$VIRGIL_LOC/lib/term/Vt100.v3	/^	private def start = esc("[");$/;"	d
startAddr	$VIRGIL_LOC/lib/util/DataReader.v3	/^	var startAddr: u64;			\/\/ address of pos = 0$/;"	d
startAddr	$VIRGIL_LOC/lib/util/DataWriter.v3	/^	var startAddr: u64;			\/\/ address of pos = 0$/;"	d
startsWith	$VIRGIL_LOC/lib/util/Ranges.v3	/^	def startsWith<T>(range: Range<T>, start: Range<T>) -> bool {$/;"	f
startsWith	$VIRGIL_LOC/lib/util/Strings.v3	/^	def startsWith = Ranges.startsWith<byte>;$/;"	d
statbuf	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^layout statbuf {$/;"	l
statfs	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^layout statfs {$/;"	l
statusCode	$VIRGIL_LOC/lib/pdk/Http.v3	/^	var statusCode: int;$/;"	d
statx	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^layout statx {$/;"	l
statx_timestamp	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^layout statx_timestamp {$/;"	l
stmxcsr_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def stmxcsr_m(a: X86_64Addr) -> this {$/;"	m
stop	$VIRGIL_LOC/lib/term/Animator.v3	/^	def stop() {$/;"	m
store_u64	$VIRGIL_LOC/lib/pdk/Extism.v3	/^	def store_u64(offset : i64, v : i64);$/;"	f
store_u8	$VIRGIL_LOC/lib/pdk/Extism.v3	/^	def store_u8(offset : i64, b : byte);$/;"	f
str	$VIRGIL_LOC/lib/file/json/JsonParser.v3	/^	def str(key: string, v: string) -> this { entries[key] = JsonValue.String(v); }$/;"	m
str	$VIRGIL_LOC/lib/util/Sexpr.v3	/^    case Expected(str: string);$/;"	d
strArray	$VIRGIL_LOC/lib/file/json/JsonParser.v3	/^	def strArray(vs: Range<string>) -> JsonValue.JArray {$/;"	f
strb	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	def strb(rd: ArmReg, rn: ArmReg, off: ArmOffset) { emitls(0x05400000, rd, rn, off); }$/;"	m
strd_r_r_i9	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def strd_r_r_i9(rt: Arm64Gpr, rn: Arm64Gpr, imm: i9) -> this {$/;"	m
strd_r_r_r_ex_u1	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def strd_r_r_r_ex_u1(rt: Arm64Gpr, rn: Arm64Gpr, rm: Arm64Gpr, ex: MemRegExtend, imm: u1) -> this {$/;"	m
strh	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	def strh(rd: ArmReg, rn: ArmReg, off: ArmSmallOffset) { emitlss(0x010000B0, rd, rn, off); }$/;"	m
strip	$VIRGIL_LOC/lib/util/Strings.v3	/^	def strip(str: string) -> string {$/;"	f
strpostd_r_r_i9	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def strpostd_r_r_i9(rt: Arm64Gpr, rn: Arm64Gpr, imm: i9) -> this {$/;"	m
strpostq_r_r_i9	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def strpostq_r_r_i9(rt: Arm64Gpr, rn: Arm64Gpr, imm: i9) -> this {$/;"	m
strpred_r_r_i9	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def strpred_r_r_i9(rt: Arm64Gpr, rn: Arm64Gpr, imm: i9) -> this {$/;"	m
strpreq_r_r_i9	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def strpreq_r_r_i9(rt: Arm64Gpr, rn: Arm64Gpr, imm: i9) -> this {$/;"	m
strq_r_r_i9	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def strq_r_r_i9(rt: Arm64Gpr, rn: Arm64Gpr, imm: i9) -> this {$/;"	m
strq_r_r_r_ex_u1	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def strq_r_r_r_ex_u1(rt: Arm64Gpr, rn: Arm64Gpr, rm: Arm64Gpr, ex: MemRegExtend, imm: u1) -> this {$/;"	m
strunsignedd_r_r_u12	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def strunsignedd_r_r_u12(rt: Arm64Gpr, rn: Arm64Gpr, imm: u12) -> this {$/;"	m
strunsignedq_r_r_u12	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def strunsignedq_r_r_u12(rt: Arm64Gpr, rn: Arm64Gpr, imm: u12) -> this {$/;"	m
strw	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	def strw(rd: ArmReg, rn: ArmReg, off: ArmOffset) { emitls(0x05000000, rd, rn, off); }$/;"	m
stx_atime	$VIRGIL_LOC/lib/wasm-linux/WaliLayouts.v3	/^	+64	stx_atime:	statx_timestamp;$/;"	d
stx_atime	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+64	stx_atime:	statx_timestamp;$/;"	d
stx_attributes	$VIRGIL_LOC/lib/wasm-linux/WaliLayouts.v3	/^	+8	stx_attributes:	u64;$/;"	d
stx_attributes	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+8	stx_attributes:	u64;$/;"	d
stx_attributes_mask	$VIRGIL_LOC/lib/wasm-linux/WaliLayouts.v3	/^	+56	stx_attributes_mask:	u64;$/;"	d
stx_attributes_mask	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+56	stx_attributes_mask:	u64;$/;"	d
stx_blksize	$VIRGIL_LOC/lib/wasm-linux/WaliLayouts.v3	/^	+4	stx_blksize:	u32;$/;"	d
stx_blksize	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+4	stx_blksize:	u32;$/;"	d
stx_blocks	$VIRGIL_LOC/lib/wasm-linux/WaliLayouts.v3	/^	+48	stx_blocks:	u64;$/;"	d
stx_blocks	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+48	stx_blocks:	u64;$/;"	d
stx_btime	$VIRGIL_LOC/lib/wasm-linux/WaliLayouts.v3	/^	+80	stx_btime:	statx_timestamp;$/;"	d
stx_btime	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+80	stx_btime:	statx_timestamp;$/;"	d
stx_ctime	$VIRGIL_LOC/lib/wasm-linux/WaliLayouts.v3	/^	+96	stx_ctime:	statx_timestamp;$/;"	d
stx_ctime	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+96	stx_ctime:	statx_timestamp;$/;"	d
stx_dev_major	$VIRGIL_LOC/lib/wasm-linux/WaliLayouts.v3	/^	+136	stx_dev_major:	u32;$/;"	d
stx_dev_major	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+136	stx_dev_major:	u32;$/;"	d
stx_dev_minor	$VIRGIL_LOC/lib/wasm-linux/WaliLayouts.v3	/^	+140	stx_dev_minor:	u32;$/;"	d
stx_dev_minor	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+140	stx_dev_minor:	u32;$/;"	d
stx_gid	$VIRGIL_LOC/lib/wasm-linux/WaliLayouts.v3	/^	+24	stx_gid:	u32;$/;"	d
stx_gid	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+24	stx_gid:	u32;$/;"	d
stx_ino	$VIRGIL_LOC/lib/wasm-linux/WaliLayouts.v3	/^	+32	stx_ino:	u64;$/;"	d
stx_ino	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+32	stx_ino:	u64;$/;"	d
stx_mask	$VIRGIL_LOC/lib/wasm-linux/WaliLayouts.v3	/^	+0	stx_mask:	u32;$/;"	d
stx_mask	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+0	stx_mask:	u32;$/;"	d
stx_mnt_id	$VIRGIL_LOC/lib/wasm-linux/WaliLayouts.v3	/^	+144	stx_mnt_id:	u64;$/;"	d
stx_mnt_id	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+144	stx_mnt_id:	u64;$/;"	d
stx_mode	$VIRGIL_LOC/lib/wasm-linux/WaliLayouts.v3	/^	+28	stx_mode:	u16;$/;"	d
stx_mode	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+28	stx_mode:	u16;$/;"	d
stx_mtime	$VIRGIL_LOC/lib/wasm-linux/WaliLayouts.v3	/^	+112	stx_mtime:	statx_timestamp;$/;"	d
stx_mtime	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+112	stx_mtime:	statx_timestamp;$/;"	d
stx_nlink	$VIRGIL_LOC/lib/wasm-linux/WaliLayouts.v3	/^	+16	stx_nlink:	u32;$/;"	d
stx_nlink	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+16	stx_nlink:	u32;$/;"	d
stx_rdev_major	$VIRGIL_LOC/lib/wasm-linux/WaliLayouts.v3	/^	+128	stx_rdev_major:	u32;$/;"	d
stx_rdev_major	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+128	stx_rdev_major:	u32;$/;"	d
stx_rdev_minor	$VIRGIL_LOC/lib/wasm-linux/WaliLayouts.v3	/^	+132	stx_rdev_minor:	u32;$/;"	d
stx_rdev_minor	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+132	stx_rdev_minor:	u32;$/;"	d
stx_size	$VIRGIL_LOC/lib/wasm-linux/WaliLayouts.v3	/^	+40	stx_size:	u64;$/;"	d
stx_size	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+40	stx_size:	u64;$/;"	d
sub	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	def sub(rd: ArmReg, rn: ArmReg, op: ArmOperand) { data2_1(4, rd, rn, op); }$/;"	m
sub	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	def sub(rd: MipsReg, rs: MipsReg, rt: MipsReg)  { emit_r3(0x00000022, rd, rs, rt); }$/;"	m
sub	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	var sub: X86Op2;$/;"	d
subRange	$VIRGIL_LOC/lib/util/FpSketch.v3	/^	def subRange(num: FpSketch, pos: int, maxPos: int) -> u32 {$/;"	m
sub_bytes	$VIRGIL_LOC/lib/util/DataReader.v3	/^	def sub_bytes(d: DataReader, length: int) {$/;"	m
sub_m_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def sub_m_i(a: X86_64Addr, i: int) -> this    { emitop2_m_i(a, i, OP_REX, 5); }$/;"	m
sub_m_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def sub_m_r(a: X86_64Addr, b: X86_64Gpr) -> this { emitop2_m_r(a, b, OP_REX, 5); }$/;"	m
sub_r_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def sub_r_i(a: X86_64Gpr, i: int) -> this     { emitop2_r_i(a, i, OP_REX, 5); }$/;"	m
sub_r_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def sub_r_m(a: X86_64Gpr, b: X86_64Addr) -> this { emitop2_r_m(a, b, OP_REX, 5); }$/;"	m
sub_r_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def sub_r_r(a: X86_64Gpr, b: X86_64Gpr) -> this  { emitop2_r_r(a, b, OP_REX, 5); }$/;"	m
subd_r_r_r_ex_u3	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def subd_r_r_r_ex_u3(rd: Arm64Gpr, rn: Arm64Gpr, rm: Arm64Gpr, ex: DataRegExtend, imm: u3) -> this {$/;"	m
subd_r_r_r_sh_u5	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def subd_r_r_r_sh_u5(rd: Arm64Gpr, rn: Arm64Gpr, rm: Arm64Gpr, sh: RegShift, imm: u5) -> this {$/;"	m
subd_r_r_u12_u1	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def subd_r_r_u12_u1(rd: Arm64Gpr, rn: Arm64Gpr, imm: u12, lsl12: u1) -> this {$/;"	m
subpd_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def subpd_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
subps_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def subps_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
subq_r_r_r_ex_u3	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def subq_r_r_r_ex_u3(rd: Arm64Gpr, rn: Arm64Gpr, rm: Arm64Gpr, ex: DataRegExtend, imm: u3) -> this {$/;"	m
subq_r_r_r_sh_u6	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def subq_r_r_r_sh_u6(rd: Arm64Gpr, rn: Arm64Gpr, rm: Arm64Gpr, sh: RegShift, imm: u6) -> this {$/;"	m
subq_r_r_u12_u1	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def subq_r_r_u12_u1(rd: Arm64Gpr, rn: Arm64Gpr, imm: u12, lsl12: u1) -> this {$/;"	m
subs	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	def subs(rd: ArmReg, rn: ArmReg, op: ArmOperand) { data2_1(5, rd, rn, op); }$/;"	m
subsd	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def subsd(a: SSEReg, b: SSERm) { emitbbb_s_sm(0xF2, 0x0F, 0x5C, a, b); }$/;"	m
subsd_s_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def subsd_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {$/;"	m
subsd_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def subsd_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
subss	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def subss(a: SSEReg, b: SSERm) { emitbbb_s_sm(0xF3, 0x0F, 0x5C, a, b); }$/;"	m
subss_s_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def subss_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {$/;"	m
subss_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def subss_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
subu	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	def subu(rd: MipsReg, rs: MipsReg, rt: MipsReg) { emit_r3(0x00000023, rd, rs, rt); }$/;"	m
svc	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def svc() -> this { emit(0xD4000001); }$/;"	m
sw	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	def sw(rs: MipsReg, rt: MipsReg, offset: u16)  { emit_r2i(0xac000000, rs, rt, offset); }$/;"	m
syscall	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	def syscall(code: u20) { w.put_b32be(0x00000004 | int.view(code) << 6); }$/;"	m
syscall	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def syscall() -> this {$/;"	m
sysenter	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def sysenter() -> this {$/;"	m
sysenter	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def sysenter() { emitbb(0x0f, 0x34); }$/;"	m
sysexit	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def sysexit() -> this {$/;"	m
sysexit	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def sysexit() { emitbb(0x0f, 0x35); }$/;"	m
sysinfo	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^layout sysinfo {$/;"	l
sysname	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^        +0      sysname:        byte[65];$/;"	d
tab	$VIRGIL_LOC/lib/util/StringBuilder.v3	/^	def tab() -> this {$/;"	m
tabColumn	$VIRGIL_LOC/lib/util/TextReader.v3	/^	private def tabColumn() {$/;"	m
table	$VIRGIL_LOC/lib/util/Map.v3	/^	private var table: Array<Bucket<K, V>>;	\/\/ lazily allocated hashtable$/;"	d
tag	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^type ArmSmallOffset {$/;"	d
tag	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^enum RegShift { LSL, LSR, ASR, NONE } \/\/ NONE shift is reserved for instructions like mul, div$/;"	d
tag	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^type MipsReg {$/;"	d
tag	$VIRGIL_LOC/lib/asm/riscv64/RiscV64Assembler.v3	/^enum RiscVFpr {$/;"	d
tag	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^enum X86_64Rounding(value: int) {$/;"	d
tag	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^type X86_64AddrMode {$/;"	d
tag	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^enum RoundingMode(value: int) {$/;"	d
tag	$VIRGIL_LOC/lib/file/elf/ElfLayouts.v3	/^enum ElfType(code: u16) {$/;"	d
tag	$VIRGIL_LOC/lib/file/json/JsonParser.v3	/^type JsonValue {$/;"	d
tag	$VIRGIL_LOC/lib/net/tcpip/Packets.v3	/^enum TcpV4Flag {$/;"	d
tag	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^type NetResult<T> {$/;"	d
tag	$VIRGIL_LOC/lib/packing/CiRuntime.v3	/^type CiSourceEntry #unboxed {$/;"	d
tag	$VIRGIL_LOC/lib/pdk/Config.v3	/^type Maybe<T> {$/;"	d
tag	$VIRGIL_LOC/lib/pdk/Method.v3	/^enum Method {$/;"	d
tag	$VIRGIL_LOC/lib/term/Termios.v3	/^enum TermiosOutputFlag(mask: u32) {$/;"	d
tag	$VIRGIL_LOC/lib/util/Ints.v3	/^enum IntParseResult(code: int) {$/;"	d
tag	$VIRGIL_LOC/lib/util/NumberParser.v3	/^type NumberParserValue {$/;"	d
tag	$VIRGIL_LOC/lib/util/Sexpr.v3	/^type SExpr {$/;"	d
tail	$VIRGIL_LOC/lib/util/List.v3	/^class List<T>(head: T, tail: List<T>) { }$/;"	d
targetfps	$VIRGIL_LOC/lib/term/Animator.v3	/^	private var targetfps = 30u;  \/\/ target frames per second$/;"	d
tb	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def var tb: AsmTraceBuilder;$/;"	d
tbnz_r_u6_i14	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def tbnz_r_u6_i14(rt: Arm64Gpr, bit: u6, imm: i14) -> this {$/;"	m
tbz_r_u6_i14	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def tbz_r_u6_i14(rt: Arm64Gpr, bit: u6, imm: i14) -> this {$/;"	m
teq	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	def teq(rs: MipsReg, rt: MipsReg, code: u10)  { emit_r2i(0x00000034, rs, rt, u16.!(code) << 6); }$/;"	m
testEOF	$VIRGIL_LOC/lib/file/json/JsonParser.v3	/^	def testEOF() -> bool {$/;"	m
test_m_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def test_m_i(a: X86_64Addr, i: int) -> this {$/;"	m
test_m_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def test_m_r(a: X86_64Addr, b: X86_64Gpr) -> this {$/;"	m
test_r_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def test_r_i(a: X86_64Gpr, i: int) -> this {$/;"	m
test_r_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def test_r_m(a: X86_64Gpr, b: X86_64Addr) -> this {$/;"	m
test_r_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def test_r_r(a: X86_64Gpr, b: X86_64Gpr) -> this {$/;"	m
test_rm_i	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def test_rm_i(a: X86Rm, i: int) {$/;"	m
test_rm_r	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def test_rm_r(a: X86Rm, b: X86Reg) { emitb_rm(0x85, a, b.index); }$/;"	m
text	$VIRGIL_LOC/lib/file/csv/CsvParser.v3	/^	def text = TextReader.new(fileName, data);$/;"	d
tge	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	def tge(rs: MipsReg, rt: MipsReg, code: u10)  { emit_r2i(0x00000030, rs, rt, u16.!(code) << 6); }$/;"	m
tgeu	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	def tgeu(rs: MipsReg, rt: MipsReg, code: u10) { emit_r2i(0x00000031, rs, rt, u16.!(code) << 6); }$/;"	m
tgt	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	def tgt(rs: MipsReg, rt: MipsReg, code: u10)  { emit_r2i(0x00000034, rs, rt, u16.!(code) << 6); }$/;"	m
ticksUs	$VIRGIL_LOC/lib/term/Animator.v3	/^	private def ticksUs() -> u32 {$/;"	m
time	$VIRGIL_LOC/lib/ic/ic0_untyped.v3	/^	def time() -> i64;									\/\/ *$/;"	f
timespec	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^layout timespec {$/;"	l
timeval	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^layout timeval {$/;"	l
timezone	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^layout timezone {$/;"	l
tls	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+56	tls:		u64;$/;"	d
tlt	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	def tlt(rs: MipsReg, rt: MipsReg, code: u10)  { emit_r2i(0x00000032, rs, rt, u16.!(code) << 6); }$/;"	m
tltu	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	def tltu(rs: MipsReg, rt: MipsReg, code: u10) { emit_r2i(0x00000033, rs, rt, u16.!(code) << 6); }$/;"	m
tne	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	def tne(rs: MipsReg, rt: MipsReg, code: u10)  { emit_r2i(0x00000036, rs, rt, u16.!(code) << 6); }$/;"	m
toArray	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	def toArray() -> Array<byte> {$/;"	m
toArray	$VIRGIL_LOC/lib/util/List.v3	/^	def toArray<T>(list: List<T>) -> Array<T> {$/;"	f
toBytes	$VIRGIL_LOC/lib/pdk/Memory.v3	/^	def toBytes() -> Array<byte> {$/;"	m
toInt	$VIRGIL_LOC/lib/pdk/Memory.v3	/^	def toInt() -> int {$/;"	m
toSSEAddr	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def toSSEAddr() -> SSEAddr { return SSEAddr.new(base, index, scale, disp); }$/;"	m
toSockAddress	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^def toSockAddress(addr: InetAddress, port: int) -> Array<byte> {$/;"	m
toString	$VIRGIL_LOC/lib/pdk/Memory.v3	/^	def toString() -> string {$/;"	m
toString	$VIRGIL_LOC/lib/util/StringBuilder.v3	/^	def toString() -> string {$/;"	m
toX86Addr	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def toX86Addr() -> X86Addr { return X86Addr.new(base, index, scale, disp); }$/;"	m
tokenFor	$VIRGIL_LOC/lib/util/TextReader.v3	/^	private def tokenFor(start: int, end: int, l: int, c: int) -> Token {$/;"	m
top	$VIRGIL_LOC/lib/util/Stack.v3	/^	var top = 0; \/\/ TODO: stack top should not be directly mutable$/;"	d
totalhigh	$VIRGIL_LOC/lib/wasm-linux/WaliLayouts.v3	/^        +88     totalhigh:      u64;$/;"	d
totalhigh	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^        +88     totalhigh:      u64;$/;"	d
totalram	$VIRGIL_LOC/lib/wasm-linux/WaliLayouts.v3	/^        +32     totalram:       u64;$/;"	d
totalram	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^        +32     totalram:       u64;$/;"	d
totalswap	$VIRGIL_LOC/lib/wasm-linux/WaliLayouts.v3	/^        +64     totalswap:      u64;$/;"	d
totalswap	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^        +64     totalswap:      u64;$/;"	d
tracing	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def var tracing: bool;$/;"	d
tracingEnabled	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def tracingEnabled = X86_64Assemblers.tracingEnabled;	\/\/ shorthand$/;"	d
trap	$VIRGIL_LOC/lib/ic/ic0_untyped.v3	/^	def trap(src: i32, size: i32);								\/\/ * s$/;"	f
trim	$VIRGIL_LOC/lib/util/DataWriter.v3	/^	def trim(npos: int) {$/;"	m
tstd_r_r_sh_u5	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def tstd_r_r_sh_u5(rn: Arm64Gpr, rm: Arm64Gpr, sh: RegShift, imm: u5) -> this {$/;"	m
tstd_r_u12	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def tstd_r_u12(rn: Arm64Gpr, imm: u12) -> this {$/;"	m
tstq_r_i13	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def tstq_r_i13(rn: Arm64Gpr, imm: i13) -> this {$/;"	m
tstq_r_r_sh_u6	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def tstq_r_r_sh_u6(rn: Arm64Gpr, rm: Arm64Gpr, sh: RegShift, imm: u6) -> this {$/;"	m
ttl	$VIRGIL_LOC/lib/net/tcpip/Packets.v3	/^	+8	ttl:		u8;$/;"	d
tv_nsec	$VIRGIL_LOC/lib/wasm-linux/WaliLayouts.v3	/^	+8	tv_nsec:	u64;$/;"	d
tv_nsec	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^        +8      tv_nsec: u32;$/;"	d
tv_sec	$VIRGIL_LOC/lib/wasm-linux/WaliLayouts.v3	/^	+0	tv_sec:		u64;$/;"	d
tv_sec	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+0	tv_sec: u64;$/;"	d
tv_usec	$VIRGIL_LOC/lib/wasm-linux/WaliLayouts.v3	/^	+8	tv_usec:	u64;$/;"	d
tv_usec	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+8	tv_usec:	u64;$/;"	d
two54	$VIRGIL_LOC/lib/math/Math.v3	/^def two54 = 1.80143985094819840000e+16;		\/* 43500000 00000000 *\/$/;"	d
twom1000	$VIRGIL_LOC/lib/math/Math.v3	/^def twom1000	= 9.33263618503218878990e-302;		\/* 01700000 00000000 *\/ \/* == 2**-1000*\/$/;"	d
type_name	$VIRGIL_LOC/lib/packing/CiRuntime.v3	/^type CiMethodEntry(meth_name: u24, type_name: u16, framewords: u12, offset: u12) #unboxed$/;"	d
tz_dsttime	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+4	tz_dsttime:	u32;$/;"	d
tz_minuteswest	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^	+0	tz_minuteswest:	u32;$/;"	d
u128Add	$VIRGIL_LOC/lib/util/Floats.v3	/^	private def u128Add(a: (u32, u32, u32, u32), b: (u32, u32, u32, u32)) -> (u32, u32, u32, u32) {$/;"	f
u128Div10	$VIRGIL_LOC/lib/util/Floats.v3	/^	private def u128Div10(a: (u32, u32, u32, u32)) -> (u32, u32, u32, u32) {$/;"	f
u128Mod10	$VIRGIL_LOC/lib/util/Floats.v3	/^	private def u128Mod10(a: (u32, u32, u32, u32)) -> u32 {$/;"	f
u128Mult	$VIRGIL_LOC/lib/util/Floats.v3	/^	private def u128Mult(a: (u32, u32, u32, u32), b: (u32, u32, u32, u32)) -> (u32, u32, u32, u32) {$/;"	f
u128Shift	$VIRGIL_LOC/lib/util/Floats.v3	/^	private def u128Shift(val: (u32, u32, u32, u32), shift: int) -> (u32, u32, u32, u32) {$/;"	f
u64at	$VIRGIL_LOC/lib/util/FpSketch.v3	/^	private def u64at(pos: int) -> u64 {$/;"	m
u_suffix	$VIRGIL_LOC/lib/util/NumberParser.v3	/^	var u_suffix: bool;$/;"	d
u_threshold	$VIRGIL_LOC/lib/math/Math.v3	/^def u_threshold	= -7.45133219101941108420e+2;		\/* c0874910 D52D3051 *\/$/;"	d
ucomisd	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def ucomisd(a: SSEReg, b: SSERm) { emitbbb_s_sm(0x66, 0x0F, 0x2E, a, b); }$/;"	m
ucomisd_s_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def ucomisd_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {$/;"	m
ucomisd_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def ucomisd_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
ucomiss	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def ucomiss(a: SSEReg, b: SSERm) {$/;"	m
ucomiss_s_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def ucomiss_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {$/;"	m
ucomiss_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def ucomiss_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
ucontext	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^layout ucontext {$/;"	l
udiv	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	def udiv(rd: ArmReg, rs: ArmReg, rm: ArmReg) { emit_rrr(0x0730f010, rd, rm, rs); }$/;"	m
udivd_r_r_r	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def udivd_r_r_r(rd: Arm64Gpr, rn: Arm64Gpr, rm: Arm64Gpr) -> this {$/;"	m
udivq_r_r_r	$VIRGIL_LOC/lib/asm/arm64/Arm64Assembler.v3	/^	def udivq_r_r_r(rd: Arm64Gpr, rn: Arm64Gpr, rm: Arm64Gpr) -> this {$/;"	m
unpcklps_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def unpcklps_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
unsupported	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	def unsupported(msg: string) { }$/;"	m
unwrap	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	def unwrap() -> T {$/;"	m
update	$VIRGIL_LOC/lib/util/Edge.v3	/^	def update(newDest: T) {$/;"	m
update_hiword	$VIRGIL_LOC/lib/math/Math.v3	/^def update_hiword(x: double, hw: int) -> double {$/;"	m
upperLeftChar	$VIRGIL_LOC/lib/term/Vt100.v3	/^def upperLeftChar  = '\x6c';$/;"	d
upperRightChar	$VIRGIL_LOC/lib/term/Vt100.v3	/^def upperRightChar = '\x6b'; \/\/ 191$/;"	d
uptime	$VIRGIL_LOC/lib/wasm-linux/WaliLayouts.v3	/^        +0      uptime:		u64;$/;"	d
uptime	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^        +0      uptime:		u64;$/;"	d
urgent	$VIRGIL_LOC/lib/net/tcpip/Packets.v3	/^	+18	urgent:		u16;$/;"	d
url	$VIRGIL_LOC/lib/pdk/Http.v3	/^class Request(method: Method, header: Header, url: string) {$/;"	d
useFixedNotation	$VIRGIL_LOC/lib/util/Floats.v3	/^	private def useFixedNotation(d: u32, e: int) -> bool {$/;"	f
ustat	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^layout ustat {$/;"	l
utimbuf	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^layout utimbuf {$/;"	l
utsname	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^layout utsname {$/;"	l
val	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	case Imm8(val: u8, rot: u4);$/;"	d
val	$VIRGIL_LOC/lib/util/Layouts.v3	/^	+0	val:	u8;$/;"	d
val	$VIRGIL_LOC/lib/util/Map.v3	/^	var val: V;$/;"	d
val	$VIRGIL_LOC/lib/util/NumberParser.v3	/^	var val: NumberParserValue;$/;"	d
val	$VIRGIL_LOC/lib/util/Option.v3	/^	var val: T;			\/\/ current value$/;"	d
validate	$VIRGIL_LOC/lib/util/Utf8.v3	/^	def validate(str: Range<byte>) -> bool {$/;"	f
vals	$VIRGIL_LOC/lib/util/Option.v3	/^	var vals  = Vector<string>.new();	\/\/ the values of all options$/;"	d
value	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^enum X86_64Rounding(value: int) {$/;"	d
value	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^enum RoundingMode(value: int) {$/;"	d
valueList	$VIRGIL_LOC/lib/util/Map.v3	/^	def valueList<K, V>(map: PartialMap<K, V>) -> List<V> {$/;"	f
var_get	$VIRGIL_LOC/lib/pdk/Extism.v3	/^	def var_get(offset : i64) -> i64;$/;"	f
var_set	$VIRGIL_LOC/lib/pdk/Extism.v3	/^	def var_set(offset : i64, value_offset : i64);$/;"	f
vc	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	def vc() -> this { cond = ArmCond.VC; }$/;"	m
verifyLineEnds	$VIRGIL_LOC/lib/util/TextReader.v3	/^	def verifyLineEnds() -> bool {$/;"	m
version	$VIRGIL_LOC/lib/net/tcpip/Packets.v3	/^type IpV4HeaderVersion(version: u4, length: u4) #packing 0b_llllvvvv;$/;"	d
version	$VIRGIL_LOC/lib/x86-64-linux/SyscallLayouts.v3	/^        +195    version:        byte[65];$/;"	d
verticalChar	$VIRGIL_LOC/lib/term/Vt100.v3	/^def verticalChar   = '\x78'; \/\/ 179$/;"	d
visit	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	def visit(prefixes: X86_64Prefix.set, name: string, mode: X86_64AddrMode) { }$/;"	m
visit_imm_b	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	def visit_imm_b(prefixes: X86_64Prefix.set, name: string, i: byte) { visit(prefixes, name, X86_64AddrMode.imm_b(i)); }$/;"	m
visit_m_b	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	def visit_m_b(prefixes: X86_64Prefix.set, name: string, a: X86_64Addr, i: byte)  { visit(prefixes, name, X86_64AddrMode.m_b(a, i)); }$/;"	m
visit_m_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	def visit_m_i(prefixes: X86_64Prefix.set, name: string, a: X86_64Addr, i: int)  { visit(prefixes, name, X86_64AddrMode.m_i(a, i)); }$/;"	m
visit_m_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	def visit_m_r(prefixes: X86_64Prefix.set, name: string, a: X86_64Addr, b: X86_64Gpr) { visit(prefixes, name, X86_64AddrMode.m_r(a, b)); }$/;"	m
visit_m_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	def visit_m_s(prefixes: X86_64Prefix.set, name: string, a: X86_64Addr, b: X86_64Xmmr) { visit(prefixes, name, X86_64AddrMode.m_s(a, b)); }$/;"	m
visit_none	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	def visit_none(prefixes: X86_64Prefix.set, name: string) { visit(prefixes, name, X86_64AddrMode.none); }$/;"	m
visit_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	def visit_r(prefixes: X86_64Prefix.set, name: string, a: X86_64Gpr) { visit(prefixes, name, X86_64AddrMode.r(a)); }$/;"	m
visit_r_b	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	def visit_r_b(prefixes: X86_64Prefix.set, name: string, a: X86_64Gpr, i: byte)  { visit(prefixes, name, X86_64AddrMode.r_b(a, i)); }$/;"	m
visit_r_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	def visit_r_i(prefixes: X86_64Prefix.set, name: string, a: X86_64Gpr, i: int)  { visit(prefixes, name, X86_64AddrMode.r_i(a, i)); }$/;"	m
visit_r_l	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	def visit_r_l(prefixes: X86_64Prefix.set, name: string, a: X86_64Gpr, i: long)  { visit(prefixes, name, X86_64AddrMode.r_l(a, i)); }$/;"	m
visit_r_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	def visit_r_m(prefixes: X86_64Prefix.set, name: string, a: X86_64Gpr, b: X86_64Addr) { visit(prefixes, name, X86_64AddrMode.r_m(a, b)); }$/;"	m
visit_r_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	def visit_r_r(prefixes: X86_64Prefix.set, name: string, a: X86_64Gpr, b: X86_64Gpr) { visit(prefixes, name, X86_64AddrMode.r_r(a, b)); }$/;"	m
visit_r_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	def visit_r_s(prefixes: X86_64Prefix.set, name: string, a: X86_64Gpr, b: X86_64Xmmr) { visit(prefixes, name, X86_64AddrMode.r_s(a, b)); }$/;"	m
visit_s_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	def visit_s_m(prefixes: X86_64Prefix.set, name: string, a: X86_64Xmmr, b: X86_64Addr) { visit(prefixes, name, X86_64AddrMode.s_m(a, b)); }$/;"	m
visit_s_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	def visit_s_r(prefixes: X86_64Prefix.set, name: string, a: X86_64Xmmr, b: X86_64Gpr) { visit(prefixes, name, X86_64AddrMode.s_r(a, b)); }$/;"	m
visit_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Disassembler.v3	/^	def visit_s_s(prefixes: X86_64Prefix.set, name: string, a: X86_64Xmmr, b: X86_64Xmmr) { visit(prefixes, name, X86_64AddrMode.s_s(a, b)); }$/;"	m
voidify	$VIRGIL_LOC/lib/util/Functions.v3	/^	def voidify<A, B>(func: A -> B) -> A -> void {$/;"	f
voidify0	$VIRGIL_LOC/lib/util/Functions.v3	/^def voidify0<A, B>(func: A -> B, a: A) -> void {$/;"	m
vs	$VIRGIL_LOC/lib/asm/arm/ArmAssembler.v3	/^	def vs() -> this { cond = ArmCond.VS; }$/;"	m
vtype	$VIRGIL_LOC/lib/util/NumberParser.v3	/^	var vtype: NumberParserVType;$/;"	d
wali_rlimit	$VIRGIL_LOC/lib/wasm-linux/WaliLayouts.v3	/^layout wali_rlimit {$/;"	l
wali_rlimit64	$VIRGIL_LOC/lib/wasm-linux/WaliLayouts.v3	/^layout wali_rlimit64 {$/;"	l
wali_rusage	$VIRGIL_LOC/lib/wasm-linux/WaliLayouts.v3	/^layout wali_rusage {$/;"	l
wali_stat	$VIRGIL_LOC/lib/wasm-linux/WaliLayouts.v3	/^layout wali_stat {$/;"	l
wali_statfs	$VIRGIL_LOC/lib/wasm-linux/WaliLayouts.v3	/^layout wali_statfs {$/;"	l
wali_statx	$VIRGIL_LOC/lib/wasm-linux/WaliLayouts.v3	/^layout wali_statx {$/;"	l
wali_sysinfo	$VIRGIL_LOC/lib/wasm-linux/WaliLayouts.v3	/^layout wali_sysinfo {$/;"	l
wali_timespec	$VIRGIL_LOC/lib/wasm-linux/WaliLayouts.v3	/^layout wali_timespec {$/;"	l
wali_timeval	$VIRGIL_LOC/lib/wasm-linux/WaliLayouts.v3	/^layout wali_timeval {$/;"	l
widen	$VIRGIL_LOC/lib/util/BitMatrix.v3	/^	def widen(ncols: int) -> this {$/;"	m
width	$VIRGIL_LOC/lib/util/BitMatrix.v3	/^	private var width: int = (numcols + 31) >>> 5;      \/\/ width (in integers) of each row$/;"	d
width	$VIRGIL_LOC/lib/util/NumberParser.v3	/^	var width: byte;$/;"	d
window	$VIRGIL_LOC/lib/net/tcpip/Packets.v3	/^	+14	window:		u16;$/;"	d
winsize	$VIRGIL_LOC/lib/term/Termios.v3	/^	+60	winsize:	u32;$/;"	d
word0	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	case Ipv6(word0: u32, word1: u32, word2: u32, word3: u32);$/;"	d
word1	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	case Ipv6(word0: u32, word1: u32, word2: u32, word3: u32);$/;"	d
word2	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	case Ipv6(word0: u32, word1: u32, word2: u32, word3: u32);$/;"	d
word3	$VIRGIL_LOC/lib/net/x86-64-linux/Net.v3	/^	case Ipv6(word0: u32, word1: u32, word2: u32, word3: u32);$/;"	d
words	$VIRGIL_LOC/lib/util/FpSketch.v3	/^	var words = Array<u32>.new(1); \/\/ base 2^32 digits.$/;"	d
wrfsbase	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def wrfsbase(a: X86_64Gpr) -> this {$/;"	m
wrgsbase	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def wrgsbase(a: X86_64Gpr) -> this {$/;"	m
write_range_double	$VIRGIL_LOC/lib/util/DataWriter.v3	/^	def write_range_double(r: Range<byte>, val: double)	{ Ref<Layout_double>.of(r).val = val; }$/;"	f
write_range_float	$VIRGIL_LOC/lib/util/DataWriter.v3	/^	def write_range_float(r: Range<byte>, val: float)	{ Ref<Layout_float>.of(r).val = val; }$/;"	f
write_range_i16	$VIRGIL_LOC/lib/util/DataWriter.v3	/^	def write_range_i16(r: Range<byte>, val: i16)		{ Ref<Layout_i16>.of(r).val = val; }$/;"	f
write_range_i32	$VIRGIL_LOC/lib/util/DataWriter.v3	/^	def write_range_i32(r: Range<byte>, val: i32)		{ Ref<Layout_i32>.of(r).val = val; }$/;"	f
write_range_i64	$VIRGIL_LOC/lib/util/DataWriter.v3	/^	def write_range_i64(r: Range<byte>, val: i64)		{ Ref<Layout_i64>.of(r).val = val; }$/;"	f
write_range_i8	$VIRGIL_LOC/lib/util/DataWriter.v3	/^	def write_range_i8(r: Range<byte>, val: i8)		{ Ref<Layout_i8>.of(r).val = val; }$/;"	f
write_range_u128	$VIRGIL_LOC/lib/util/DataWriter.v3	/^	def write_range_u128(r: Range<byte>, val: (u64, u64)) {$/;"	f
write_range_u16	$VIRGIL_LOC/lib/util/DataWriter.v3	/^	def write_range_u16(r: Range<byte>, val: u16)		{ Ref<Layout_u16>.of(r).val = val; }$/;"	f
write_range_u32	$VIRGIL_LOC/lib/util/DataWriter.v3	/^	def write_range_u32(r: Range<byte>, val: u32)		{ Ref<Layout_u32>.of(r).val = val; }$/;"	f
write_range_u64	$VIRGIL_LOC/lib/util/DataWriter.v3	/^	def write_range_u64(r: Range<byte>, val: u64)		{ Ref<Layout_u64>.of(r).val = val; }$/;"	f
write_range_u8	$VIRGIL_LOC/lib/util/DataWriter.v3	/^	def write_range_u8(r: Range<byte>, val: u8)		{ Ref<Layout_u8>.of(r).val = val; }$/;"	f
xadd	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def xadd(a: X86Rm, b: X86Reg) {$/;"	m
xadd_m_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def xadd_m_r(a: X86_64Addr, b: X86_64Gpr) -> this {$/;"	m
xadd_r_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def xadd_r_r(a: X86_64Gpr, b: X86_64Gpr) -> this {$/;"	m
xaddb_m_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def xaddb_m_r(a: X86_64Addr, b: X86_64Gpr) -> this {$/;"	m
xaddw_m_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def xaddw_m_r(a: X86_64Addr, b: X86_64Gpr) -> this {$/;"	m
xchg	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def xchg(a: X86Rm, b: X86Reg) {$/;"	m
xchg_m_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def xchg_m_r(a: X86_64Addr, b: X86_64Gpr) -> this {$/;"	m
xchg_r_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def xchg_r_r(a: X86_64Gpr, b: X86_64Gpr) -> this {$/;"	m
xchgb_m_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def xchgb_m_r(a: X86_64Addr, b: X86_64Gpr) -> this {$/;"	m
xchgd_m_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def xchgd_m_r(a: X86_64Addr, b: X86_64Gpr) -> this {$/;"	m
xchgq_m_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def xchgq_m_r(a: X86_64Addr, b: X86_64Gpr) -> this {$/;"	m
xchgw_m_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def xchgw_m_r(a: X86_64Addr, b: X86_64Gpr) -> this {$/;"	m
xor	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	def xor(rd: MipsReg, rs: MipsReg, rt: MipsReg)  { emit_r3(0x00000026, rd, rs, rt); }$/;"	m
xor	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	var xor: X86Op2;$/;"	d
xor_m_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def xor_m_i(a: X86_64Addr, i: int) -> this    { emitop2_m_i(a, i, OP_REX, 6); }$/;"	m
xor_m_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def xor_m_r(a: X86_64Addr, b: X86_64Gpr) -> this { emitop2_m_r(a, b, OP_REX, 6); }$/;"	m
xor_r_i	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def xor_r_i(a: X86_64Gpr, i: int) -> this     { emitop2_r_i(a, i, OP_REX, 6); }$/;"	m
xor_r_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def xor_r_m(a: X86_64Gpr, b: X86_64Addr) -> this { emitop2_r_m(a, b, OP_REX, 6); }$/;"	m
xor_r_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def xor_r_r(a: X86_64Gpr, b: X86_64Gpr) -> this  { emitop2_r_r(a, b, OP_REX, 6); }$/;"	m
xorb_m_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def xorb_m_r(a: X86_64Addr, b: X86_64Gpr) -> this {$/;"	m
xord_m_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def xord_m_r(a: X86_64Addr, b: X86_64Gpr) -> this {$/;"	m
xori	$VIRGIL_LOC/lib/asm/mips/MipsAssembler.v3	/^	def xori(rd: MipsReg, rs: MipsReg, imm: u16)    { emit_r2i(0x38000000, rd, rs, imm); }$/;"	m
xorpd	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def xorpd(a: SSEReg, b: SSERm) { emitbbb_s_sm(0x66, 0x0F, 0x57, a, b); }$/;"	m
xorpd_s_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def xorpd_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {$/;"	m
xorpd_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def xorpd_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
xorps	$VIRGIL_LOC/lib/asm/x86/X86Assembler.v3	/^	def xorps(a: SSEReg, b: SSERm) { emitbb_s_sm(0x0F, 0x57, a, b); }$/;"	m
xorps_s_m	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def xorps_s_m(a: X86_64Xmmr, b: X86_64Addr) -> this {$/;"	m
xorps_s_s	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def xorps_s_s(a: X86_64Xmmr, b: X86_64Xmmr) -> this {$/;"	m
xorq_m_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def xorq_m_r(a: X86_64Addr, b: X86_64Gpr) -> this {$/;"	m
xorw_m_r	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def xorw_m_r(a: X86_64Addr, b: X86_64Gpr) -> this {$/;"	m
xreg	$VIRGIL_LOC/lib/asm/x86-64/X86_64Assembler.v3	/^	def xreg(r: X86_64Xmmr) -> this {$/;"	m
zeroN	$VIRGIL_LOC/lib/util/DataWriter.v3	/^	def zeroN(length: int) -> this {$/;"	m
