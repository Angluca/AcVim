AST	$C2_ROOT/ast/ast.c2	/^public type AST struct @(opaque) {$/;"	t
ASTVisitor	$C2_ROOT/ast/module.c2	/^public type ASTVisitor fn void (void* arg, AST* d);$/;"	t
Abi	$C2_ROOT/common/target_info.c2	/^public type Abi enum u8 { Unknown, GNU, GNU_EABI, MACHO, WIN32, Rv32G, BSD }$/;"	t
Action	$C2_ROOT/parser/c2_tokenizer.c2	/^type Action enum u8 {$/;"	t
Add	$C2_ROOT/common/c2_prec.c2	/^    [BinaryOpcode.Add]         = Additive,$/;"	v
Add	$C2_ROOT/common/c_prec.c2	/^    [BinaryOpcode.Add]         = Additive,$/;"	v
AddAssign	$C2_ROOT/common/c2_prec.c2	/^    [BinaryOpcode.AddAssign]   = Assignment,$/;"	v
AddAssign	$C2_ROOT/common/c_prec.c2	/^    [BinaryOpcode.AddAssign]   = Assignment,$/;"	v
AddSourceFn	$C2_ROOT/plugins/plugin_info.c2	/^public type AddSourceFn fn void (void* arg, const char* name, string_buffer.Buf* content);$/;"	t
Addr	$C2_ROOT/libs/libc/net_if.c2i	/^type Addr struct @(cname="ifaddr") {$/;"	t
Aes_context	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^type Aes_context struct @(cname="mbedtls_aes_context") {$/;"	t
Alias	$C2_ROOT/ir_examples/functions.c2	/^type Alias i64;$/;"	t
AliasType	$C2_ROOT/ast/alias_type.c2	/^public type AliasType struct @(opaque) {$/;"	t
AliasTypeDecl	$C2_ROOT/ast/alias_type_decl.c2	/^public type AliasTypeDecl struct @(opaque) {$/;"	t
Aligned	$C2_ROOT/ast_utils/attr.c2	/^    [AttrKind.Aligned]      = AttrReq.Number,$/;"	v
Alloc	$C2_ROOT/libs/lua/lua.c2i	/^type Alloc fn void* (void *ud, void *ptr, c_size osize, c_size nsize) @(cname="lua_Alloc");$/;"	t
AllocCb	$C2_ROOT/libs/sokol/sokol_app.c2i	/^type AllocCb fn void*(usize, void*);$/;"	t
AllocCb	$C2_ROOT/libs/sokol/sokol_audio.c2i	/^type AllocCb fn void*(usize, void*);$/;"	t
AllocCb	$C2_ROOT/libs/sokol/sokol_debugtext.c2i	/^type AllocCb fn void*(usize, void*);$/;"	t
AllocCb	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type AllocCb fn void*(usize, void*);$/;"	t
AllocCb	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^type AllocCb fn void*(usize, void*);$/;"	t
AllocCb	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^type AllocCb fn void*(usize, void*);$/;"	t
AllocCb	$C2_ROOT/libs/sokol_/sokol_audio.c2i	/^type AllocCb fn void*(usize, void*);$/;"	t
AllocCb	$C2_ROOT/libs/sokol_/sokol_debugtext.c2i	/^type AllocCb fn void*(usize, void*);$/;"	t
AllocCb	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type AllocCb fn void*(usize, void*);$/;"	t
AllocCb	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^type AllocCb fn void*(usize, void*);$/;"	t
Allocator	$C2_ROOT/libs/sokol/sokol_app.c2i	/^type Allocator struct @(cname="sapp_allocator") {$/;"	t
Allocator	$C2_ROOT/libs/sokol/sokol_audio.c2i	/^type Allocator struct @(cname="saudio_allocator") {$/;"	t
Allocator	$C2_ROOT/libs/sokol/sokol_debugtext.c2i	/^type Allocator struct @(cname="sdtx_allocator_t") {$/;"	t
Allocator	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type Allocator struct @(cname="sg_allocator") {$/;"	t
Allocator	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^type Allocator struct @(cname="sgl_allocator_t") {$/;"	t
Allocator	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^type Allocator struct @(cname="sapp_allocator") {$/;"	t
Allocator	$C2_ROOT/libs/sokol_/sokol_audio.c2i	/^type Allocator struct @(cname="saudio_allocator") {$/;"	t
Allocator	$C2_ROOT/libs/sokol_/sokol_debugtext.c2i	/^type Allocator struct @(cname="sdtx_allocator_t") {$/;"	t
Allocator	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type Allocator struct @(cname="sg_allocator") {$/;"	t
Allocator	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^type Allocator struct @(cname="sgl_allocator_t") {$/;"	t
Amp	$C2_ROOT/parser/c2_parser_expr.c2	/^    [Kind.Amp] = 7,$/;"	v
Amp	$C2_ROOT/parser/token.c2	/^    [Kind.Amp]              = "&",$/;"	v
AmpAmp	$C2_ROOT/parser/c2_parser_expr.c2	/^    [Kind.AmpAmp]   = LogicalAndOr,$/;"	v
AmpAmp	$C2_ROOT/parser/token.c2	/^    [Kind.AmpAmp]           = "&&",$/;"	v
AmpEqual	$C2_ROOT/parser/c2_parser_expr.c2	/^    [Kind.AmpEqual]       = AndAssign,$/;"	v
AmpEqual	$C2_ROOT/parser/token.c2	/^    [Kind.AmpEqual]         = "&=",$/;"	v
Analyser	$C2_ROOT/analyser/module_analyser.c2	/^public type Analyser struct @(opaque) {$/;"	t
And	$C2_ROOT/common/c2_prec.c2	/^    [BinaryOpcode.And]         = Bitwise,$/;"	v
And	$C2_ROOT/common/c_prec.c2	/^    [BinaryOpcode.And]         = And,$/;"	v
AndAssign	$C2_ROOT/common/c2_prec.c2	/^    [BinaryOpcode.AndAssign]   = Assignment,$/;"	v
AndAssign	$C2_ROOT/common/c_prec.c2	/^    [BinaryOpcode.AndAssign]   = Assignment,$/;"	v
AndroidTooltype	$C2_ROOT/libs/sokol/sokol_app.c2i	/^type AndroidTooltype enum i32 @(cname="sapp_android_tooltype") {$/;"	t
AndroidTooltype	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^type AndroidTooltype enum i32 @(cname="sapp_android_tooltype") {$/;"	t
Arch	$C2_ROOT/common/target_info.c2	/^public type Arch enum u8 { Unknown, I686, Arm, X86_64, Amd64, Arm64, Riscv_32 }$/;"	t
Arena	$C2_ROOT/ir/interference_graph.c2	/^type Arena struct {$/;"	t
Arena	$C2_ROOT/ir/live_map.c2	/^type Arena struct {$/;"	t
Arena	$C2_ROOT/ir/slot_writes_map.c2	/^type Arena struct {$/;"	t
ArgValue	$C2_ROOT/generator/c/c_generator_pure_call.c2	/^type ArgValue struct {$/;"	t
ArrayDesignatedInitExpr	$C2_ROOT/ast/array_designated_init_expr.c2	/^public type ArrayDesignatedInitExpr struct @(opaque) {$/;"	t
ArraySubscriptExpr	$C2_ROOT/ast/array_subscript_expr.c2	/^public type ArraySubscriptExpr struct @(opaque) {$/;"	t
ArraySubscriptExprBits	$C2_ROOT/ast/array_subscript_expr.c2	/^type ArraySubscriptExprBits struct {$/;"	t
ArrayType	$C2_ROOT/ast/array_type.c2	/^public type ArrayType struct @(opaque) {$/;"	t
ArrayTypeBits	$C2_ROOT/ast/array_type.c2	/^type ArrayTypeBits struct {$/;"	t
ArrayValue	$C2_ROOT/ast/array_value.c2	/^public type ArrayValue struct @(opaque) {$/;"	t
ArrayValueList	$C2_ROOT/ast/array_value_list.c2	/^type ArrayValueList struct {$/;"	t
ArrayValueVisitor	$C2_ROOT/ast/ast.c2	/^public type ArrayValueVisitor fn void (void* arg, ArrayValue* avd);$/;"	t
AsmStmt	$C2_ROOT/ast/asm_stmt.c2	/^public type AsmStmt struct @(opaque) {$/;"	t
AsmStmtBits	$C2_ROOT/ast/asm_stmt.c2	/^type AsmStmtBits struct {$/;"	t
Asn1_buf	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^type Asn1_buf struct @(cname="mbedtls_asn1_buf") {$/;"	t
Asn1_named_data	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^type Asn1_named_data struct @(cname="mbedtls_asn1_named_data") {$/;"	t
Asn1_sequence	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^type Asn1_sequence struct @(cname="mbedtls_asn1_sequence") {$/;"	t
AssertStmt	$C2_ROOT/ast/assert_stmt.c2	/^public type AssertStmt struct @(opaque) {$/;"	t
Assign	$C2_ROOT/common/c2_prec.c2	/^    [BinaryOpcode.Assign]      = Assignment,$/;"	v
Assign	$C2_ROOT/common/c_prec.c2	/^    [BinaryOpcode.Assign]      = Assignment,$/;"	v
At	$C2_ROOT/parser/token.c2	/^    [Kind.At]               = "@",$/;"	v
AtExitFn	$C2_ROOT/libs/libc/stdlib.c2i	/^type AtExitFn fn void();$/;"	t
Attachments	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type Attachments struct @(cname="sg_attachments") {$/;"	t
Attachments	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type Attachments struct @(cname="sg_attachments") {$/;"	t
Attr	$C2_ROOT/ast_utils/attr.c2	/^public type Attr struct {$/;"	t
Attr	$C2_ROOT/ast_utils/attr_table.c2	/^type Attr struct {$/;"	t
AttrHandlerFn	$C2_ROOT/ast/utils.c2	/^public type AttrHandlerFn fn bool (void* arg, Decl* d, const attr.Attr* a);$/;"	t
AttrKind	$C2_ROOT/ast_utils/attr.c2	/^public type AttrKind enum u8 {$/;"	t
AttrReq	$C2_ROOT/ast_utils/attr.c2	/^public type AttrReq enum u8 {$/;"	t
AudioCallback	$C2_ROOT/libs/sdl2/sdl.c2i	/^type AudioCallback fn void (void* userdata, u8* stream, c_int len) @(cname="SDL_AudioCallback");$/;"	t
AudioDeviceID	$C2_ROOT/libs/sdl2/sdl.c2i	/^type AudioDeviceID u32 @(cname="SDL_AudioDeviceID");$/;"	t
AudioFormat	$C2_ROOT/libs/sdl2/sdl.c2i	/^type AudioFormat u16 @(cname="SDL_AudioFormat");$/;"	t
AudioSpec	$C2_ROOT/libs/sdl2/sdl.c2i	/^type AudioSpec struct @(cname="SDL_AudioSpec") {$/;"	t
AutoAttr	$C2_ROOT/ast/var_decl.c2	/^type AutoAttr enum u32 {$/;"	t
AutoFile	$C2_ROOT/ast_utils/attr.c2	/^    [AttrKind.AutoFile]     = AttrReq.NoArg,$/;"	v
AutoFunc	$C2_ROOT/ast_utils/attr.c2	/^    [AttrKind.AutoFunc]     = AttrReq.NoArg,$/;"	v
AutoLine	$C2_ROOT/ast_utils/attr.c2	/^    [AttrKind.AutoLine]     = AttrReq.NoArg,$/;"	v
BackEndKind	$C2_ROOT/common/build_target.c2	/^public type BackEndKind enum u8 {$/;"	t
Backend	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type Backend enum i32 @(cname="sg_backend") {$/;"	t
Backend	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type Backend enum i32 @(cname="sg_backend") {$/;"	t
Bar	$C2_ROOT/ir_examples/array.c2	/^type Bar struct @(aligned=32) {$/;"	t
BasicStructLayouter	$C2_ROOT/generator/ir/basic_struct_layouter.c2	/^type BasicStructLayouter struct {$/;"	t
BeginTargetFn	$C2_ROOT/compiler/compiler.c2	/^public type BeginTargetFn fn void (void* arg, plugin_info.Info* info);$/;"	t
BinaryOpcode	$C2_ROOT/ast/binary_operator.c2	/^public type BinaryOpcode enum u8 {$/;"	t
BinaryOperator	$C2_ROOT/ast/binary_operator.c2	/^public type BinaryOperator struct @(opaque) {$/;"	t
BinaryOperatorBits	$C2_ROOT/ast/binary_operator.c2	/^type BinaryOperatorBits struct {$/;"	t
Bindings	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type Bindings struct @(cname="sg_bindings") {$/;"	t
Bindings	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type Bindings struct @(cname="sg_bindings") {$/;"	t
BitArray	$C2_ROOT/common/bit_array.c2	/^public type BitArray struct {$/;"	t
BitFieldInfo	$C2_ROOT/ast/var_decl.c2	/^type BitFieldInfo struct {$/;"	t
BitFieldLayout	$C2_ROOT/ast/var_decl.c2	/^public type BitFieldLayout struct {$/;"	t
BitOffsetExpr	$C2_ROOT/ast/bitoffset_expr.c2	/^public type BitOffsetExpr struct @(opaque) {$/;"	t
BitOffsetExprBits	$C2_ROOT/ast/bitoffset_expr.c2	/^type BitOffsetExprBits struct {$/;"	t
BlendFactor	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type BlendFactor enum u32 @(cname="sg_blend_factor") {$/;"	t
BlendFactor	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type BlendFactor enum u32 @(cname="sg_blend_factor") {$/;"	t
BlendMode	$C2_ROOT/libs/sdl2/sdl.c2i	/^type BlendMode enum u32 {$/;"	t
BlendOp	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type BlendOp enum u32 @(cname="sg_blend_op") {$/;"	t
BlendOp	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type BlendOp enum u32 @(cname="sg_blend_op") {$/;"	t
BlendState	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type BlendState struct @(cname="sg_blend_state") {$/;"	t
BlendState	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type BlendState struct @(cname="sg_blend_state") {$/;"	t
Block	$C2_ROOT/ast_utils/context.c2	/^type Block struct {$/;"	t
Block	$C2_ROOT/ir/block.c2	/^public type Block struct {$/;"	t
BlockComment	$C2_ROOT/parser/token.c2	/^    [Kind.BlockComment]     = "b-comment",$/;"	v
BlockId	$C2_ROOT/ir/common.c2	/^public type BlockId u32;    \/\/ TODO make u16$/;"	t
BlockIndex	$C2_ROOT/ir/slot_collector.c2	/^public type BlockIndex struct {$/;"	t
BlockKind	$C2_ROOT/ir/block.c2	/^public type BlockKind enum u8 {$/;"	t
BlockList	$C2_ROOT/ir/block_list.c2	/^public type BlockList struct {$/;"	t
BlockWrites	$C2_ROOT/ir/slot_writes_map.c2	/^type BlockWrites struct {$/;"	t
Bool	$C2_ROOT/ast/builtin_type.c2	/^    [BuiltinKind.Bool] = true,$/;"	v
Bool	$C2_ROOT/generator/c/c_generator_expr.c2	/^    [BuiltinKind.Bool] = false,$/;"	v
Bool	$C2_ROOT/generator/ir/ir_generator.c2	/^    [BuiltinKind.Bool]    = I8,    \/\/ TODO ir.Type.I1?$/;"	v
BooleanLiteral	$C2_ROOT/ast/boolean_literal.c2	/^public type BooleanLiteral struct @(opaque) {$/;"	t
BooleanLiteralBits	$C2_ROOT/ast/boolean_literal.c2	/^type BooleanLiteralBits struct {$/;"	t
BorderColor	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type BorderColor enum u32 @(cname="sg_border_color") {$/;"	t
BorderColor	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type BorderColor enum u32 @(cname="sg_border_color") {$/;"	t
Box	$C2_ROOT/libs/sokol/sokol_shape.c2i	/^type Box struct @(cname="sshape_box_t") {$/;"	t
Box	$C2_ROOT/libs/sokol_/sokol_shape.c2i	/^type Box struct @(cname="sshape_box_t") {$/;"	t
BreakStmt	$C2_ROOT/ast/break_stmt.c2	/^public type BreakStmt struct @(opaque) {$/;"	t
Buf	$C2_ROOT/ast_utils/string_buffer.c2	/^public type Buf struct {$/;"	t
Buffer	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type Buffer struct @(cname="sg_buffer") {$/;"	t
Buffer	$C2_ROOT/libs/sokol/sokol_shape.c2i	/^type Buffer struct @(cname="sshape_buffer_t") {$/;"	t
Buffer	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type Buffer struct @(cname="sg_buffer") {$/;"	t
Buffer	$C2_ROOT/libs/sokol_/sokol_shape.c2i	/^type Buffer struct @(cname="sshape_buffer_t") {$/;"	t
BufferDesc	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type BufferDesc struct @(cname="sg_buffer_desc") {$/;"	t
BufferDesc	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type BufferDesc struct @(cname="sg_buffer_desc") {$/;"	t
BufferInfo	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type BufferInfo struct @(cname="sg_buffer_info") {$/;"	t
BufferInfo	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type BufferInfo struct @(cname="sg_buffer_info") {$/;"	t
BufferItem	$C2_ROOT/libs/sokol/sokol_shape.c2i	/^type BufferItem struct @(cname="sshape_buffer_item_t") {$/;"	t
BufferItem	$C2_ROOT/libs/sokol_/sokol_shape.c2i	/^type BufferItem struct @(cname="sshape_buffer_item_t") {$/;"	t
BufferUsage	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type BufferUsage struct @(cname="sg_buffer_usage") {$/;"	t
BufferUsage	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type BufferUsage struct @(cname="sg_buffer_usage") {$/;"	t
BufferViewDesc	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type BufferViewDesc struct @(cname="sg_buffer_view_desc") {$/;"	t
BufferViewDesc	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type BufferViewDesc struct @(cname="sg_buffer_view_desc") {$/;"	t
Builder	$C2_ROOT/ir/context.c2	/^type Builder struct {$/;"	t
Builder	$C2_ROOT/parser/ast_builder.c2	/^public type Builder struct  @(opaque) {$/;"	t
BuiltinExpr	$C2_ROOT/ast/builtin_expr.c2	/^public type BuiltinExpr struct @(opaque) {$/;"	t
BuiltinExprBits	$C2_ROOT/ast/builtin_expr.c2	/^type BuiltinExprBits struct {$/;"	t
BuiltinExprKind	$C2_ROOT/ast/builtin_expr.c2	/^public type BuiltinExprKind enum u8 {$/;"	t
BuiltinKind	$C2_ROOT/ast/builtin_type.c2	/^public type BuiltinKind enum u8 {$/;"	t
BuiltinType	$C2_ROOT/ast/builtin_type.c2	/^public type BuiltinType struct @(opaque) {$/;"	t
BuiltinTypeBits	$C2_ROOT/ast/builtin_type.c2	/^type BuiltinTypeBits struct {$/;"	t
C2Test	$C2_ROOT/output/unit_test/libunit_test.dylib	/^public type C2Test struct {$/;"	t
C2Test	$C2_ROOT/plugins/unit_test1.c2	/^public type C2Test struct {$/;"	t
C2cat	$C2_ROOT/tools/c2cat.c2	/^type C2cat struct {$/;"	t
CAddr	$C2_ROOT/libs/libc/net_if.c2i	/^type CAddr char* @(cname="__caddr_t");$/;"	t
CC	$C2_ROOT/libs/libc/ctermios.c2i	/^type CC c_uchar;$/;"	t
CDef	$C2_ROOT/ast_utils/attr.c2	/^    [AttrKind.CDef]         = AttrReq.String,$/;"	v
CFunction	$C2_ROOT/libs/lua/lua.c2i	/^type CFunction fn i32 (State *L) @(cname="lua_CFunction");$/;"	t
CName	$C2_ROOT/ast_utils/attr.c2	/^    [AttrKind.CName]        = AttrReq.String,$/;"	v
C_Prec	$C2_ROOT/common/c_prec.c2	/^public type C_Prec enum u8 {$/;"	t
CallExpr	$C2_ROOT/ast/call_expr.c2	/^public type CallExpr struct @(opaque) {$/;"	t
CallExprBits	$C2_ROOT/ast/call_expr.c2	/^type CallExprBits struct {$/;"	t
CallKind	$C2_ROOT/ast/function_decl.c2	/^public type CallKind enum u8 {$/;"	t
Caret	$C2_ROOT/parser/c2_parser_expr.c2	/^    [Kind.Caret] = Bitwise,$/;"	v
Caret	$C2_ROOT/parser/token.c2	/^    [Kind.Caret]            = "^",$/;"	v
CaretEqual	$C2_ROOT/parser/c2_parser_expr.c2	/^    [Kind.CaretEqual]     = XorAssign,$/;"	v
CaretEqual	$C2_ROOT/parser/token.c2	/^    [Kind.CaretEqual]       = "^=",$/;"	v
Case	$C2_ROOT/ir/case_list.c2	/^public type Case struct {$/;"	t
CaseId	$C2_ROOT/ir/case_list.c2	/^public type CaseId u32;$/;"	t
CaseList	$C2_ROOT/ir/case_list.c2	/^public type CaseList struct {$/;"	t
Category	$C2_ROOT/common/diagnostics.c2	/^type Category enum u8 {$/;"	t
Cb	$C2_ROOT/libs/sokol/sokol_app.c2i	/^type Cb fn void();$/;"	t
Cb	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^type Cb fn void();$/;"	t
Cfg_dbg_f	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^type Cfg_dbg_f fn void(void *, c_int, const char *, c_int, const char *);$/;"	t
Cfg_get_cache_f	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^type Cfg_get_cache_f fn c_int(void *, Ssl_session*);$/;"	t
Cfg_rng_f	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^type Cfg_rng_f fn c_int(void *, c_uchar*, c_size);$/;"	t
Cfg_set_cache_f	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^type Cfg_set_cache_f fn c_int(void *, const Ssl_session*);$/;"	t
Cfg_sni_f	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^type Cfg_sni_f fn c_int(void *, Ssl_context *, const c_uchar *, c_size);$/;"	t
Char	$C2_ROOT/ast/builtin_type.c2	/^    [BuiltinKind.Char] = true,$/;"	v
Char	$C2_ROOT/generator/c/c_generator_expr.c2	/^    [BuiltinKind.Char] = false,$/;"	v
Char	$C2_ROOT/generator/ir/ir_generator.c2	/^    [BuiltinKind.Char]    = I8,$/;"	v
CharLiteral	$C2_ROOT/ast/char_literal.c2	/^public type CharLiteral struct @(opaque) {$/;"	t
CharLiteral	$C2_ROOT/parser/c2_parser_expr.c2	/^    [Kind.CharLiteral] = 4,$/;"	v
CharLiteral	$C2_ROOT/parser/token.c2	/^    [Kind.CharLiteral]      = "character",$/;"	v
CharLiteralBits	$C2_ROOT/ast/char_literal.c2	/^type CharLiteralBits struct {$/;"	t
CheckPoint	$C2_ROOT/common/source_mgr.c2	/^type CheckPoint struct {$/;"	t
Checker	$C2_ROOT/analyser/conversion_checker.c2	/^public type Checker struct {$/;"	t
Checker	$C2_ROOT/analyser/init_checker.c2	/^public type Checker struct {$/;"	t
Checker	$C2_ROOT/analyser/unused_checker.c2	/^type Checker struct {$/;"	t
Colon	$C2_ROOT/parser/token.c2	/^    [Kind.Colon]            = ":",$/;"	v
Color	$C2_ROOT/libs/sdl2/sdl.c2i	/^type Color struct @(cname="SDL_Color") {$/;"	t
Color	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type Color struct @(cname="sg_color") {$/;"	t
Color	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type Color struct @(cname="sg_color") {$/;"	t
ColorAttachmentAction	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type ColorAttachmentAction struct @(cname="sg_color_attachment_action") {$/;"	t
ColorAttachmentAction	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type ColorAttachmentAction struct @(cname="sg_color_attachment_action") {$/;"	t
ColorMask	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type ColorMask enum u32 @(cname="sg_color_mask") {$/;"	t
ColorMask	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type ColorMask enum u32 @(cname="sg_color_mask") {$/;"	t
ColorTargetState	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type ColorTargetState struct @(cname="sg_color_target_state") {$/;"	t
ColorTargetState	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type ColorTargetState struct @(cname="sg_color_target_state") {$/;"	t
Comma	$C2_ROOT/parser/c2_parser_expr.c2	/^    [Kind.Comma] = Comma,$/;"	v
Comma	$C2_ROOT/parser/token.c2	/^    [Kind.Comma]            = ",",$/;"	v
CommitListener	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type CommitListener struct @(cname="sg_commit_listener") {$/;"	t
CommitListener	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type CommitListener struct @(cname="sg_commit_listener") {$/;"	t
CompareFn	$C2_ROOT/common/quicksort.c2	/^public type CompareFn fn bool(void* arg, const void* left, const void* right);$/;"	t
CompareFunc	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type CompareFunc enum u32 @(cname="sg_compare_func") {$/;"	t
CompareFunc	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type CompareFunc enum u32 @(cname="sg_compare_func") {$/;"	t
Compiler	$C2_ROOT/compiler/compiler.c2	/^type Compiler struct {$/;"	t
Component	$C2_ROOT/common/component.c2	/^public type Component struct @(opaque) {$/;"	t
CompoundStmt	$C2_ROOT/ast/compound_stmt.c2	/^public type CompoundStmt struct @(opaque) {$/;"	t
CompoundStmtBits	$C2_ROOT/ast/compound_stmt.c2	/^type CompoundStmtBits struct {$/;"	t
Cond	$C2_ROOT/libs/pthread/pthread.c2i	/^type Cond union @(cname="pthread_cond_t") {$/;"	t
CondAttr	$C2_ROOT/libs/pthread/pthread.c2i	/^type CondAttr union @(cname="pthread_condattr_t") {$/;"	t
ConditionalOperator	$C2_ROOT/ast/conditional_operator.c2	/^public type ConditionalOperator struct @(opaque) {$/;"	t
Conf	$C2_ROOT/libs/libc/net_if.c2i	/^type Conf struct @(cname="ifconf") {$/;"	t
Config	$C2_ROOT/output/unit_test/libunit_test.dylib	/^public type Config struct {$/;"	t
Config	$C2_ROOT/plugins/unit_test1.c2	/^public type Config struct {$/;"	t
Constant	$C2_ROOT/ir/constant.c2	/^type Constant struct {$/;"	t
ConstantList	$C2_ROOT/ir/constant_list.c2	/^type ConstantList struct {$/;"	t
Constructor	$C2_ROOT/ast_utils/attr.c2	/^    [AttrKind.Constructor]  = AttrReq.NoArg,$/;"	v
Cont	$C2_ROOT/ast/ast_evaluator.c2	/^type Cont enum u8 {$/;"	t
Context	$C2_ROOT/ast_utils/context.c2	/^public type Context struct @(opaque) {$/;"	t
Context	$C2_ROOT/compiler/main.c2	/^type Context struct {$/;"	t
Context	$C2_ROOT/ir/context.c2	/^public type Context struct @(opaque) {$/;"	t
Context	$C2_ROOT/libs/sokol/sokol_debugtext.c2i	/^type Context struct @(cname="sdtx_context") {$/;"	t
Context	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^type Context struct @(cname="sgl_context") {$/;"	t
Context	$C2_ROOT/libs/sokol_/sokol_debugtext.c2i	/^type Context struct @(cname="sdtx_context") {$/;"	t
Context	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^type Context struct @(cname="sgl_context") {$/;"	t
ContextDesc	$C2_ROOT/libs/sokol/sokol_debugtext.c2i	/^type ContextDesc struct @(cname="sdtx_context_desc_t") {$/;"	t
ContextDesc	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^type ContextDesc struct @(cname="sgl_context_desc_t") {$/;"	t
ContextDesc	$C2_ROOT/libs/sokol_/sokol_debugtext.c2i	/^type ContextDesc struct @(cname="sdtx_context_desc_t") {$/;"	t
ContextDesc	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^type ContextDesc struct @(cname="sgl_context_desc_t") {$/;"	t
ContinueStmt	$C2_ROOT/ast/continue_stmt.c2	/^public type ContinueStmt struct @(opaque) {$/;"	t
CopyInfo	$C2_ROOT/ir/copy_list.c2	/^public type CopyInfo struct {$/;"	t
CopyList	$C2_ROOT/ir/copy_list.c2	/^public type CopyList struct {$/;"	t
Counter	$C2_ROOT/ir/usage_counter.c2	/^public type Counter struct {$/;"	t
Cq	$C2_ROOT/libs/io_uring/io_uring.c2i	/^type Cq struct @(cname="io_uring_cq") {$/;"	t
Cqe	$C2_ROOT/libs/io_uring/io_uring.c2i	/^type Cqe struct @(cname="io_uring_cqe") {$/;"	t
CqringOffsets	$C2_ROOT/libs/io_uring/io_uring.c2i	/^type CqringOffsets struct @(cname="io_cqring_offsets") {$/;"	t
Ctr_drbg_context	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^type Ctr_drbg_context struct @(cname="mbedtls_ctr_drbg_context") {$/;"	t
Ctx_cookie_check_f	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^type Ctx_cookie_check_f fn c_int(void *, const c_uchar *, c_size, const c_uchar *, c_size);$/;"	t
Ctx_cookie_write_f	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^type Ctx_cookie_write_f fn c_int(void *, c_uchar **, c_uchar *, const c_uchar *, c_size );$/;"	t
Ctx_export_keys_ext_f	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^type Ctx_export_keys_ext_f fn c_int(void *, const c_uchar *,$/;"	t
Ctx_export_keys_f	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^type Ctx_export_keys_f fn c_int(void *, const c_uchar *, const c_uchar *, c_size, c_size, c_size/;"	t
Ctx_psk_f	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^type Ctx_psk_f fn c_int(void *, Ssl_context *, const c_uchar *, c_size);$/;"	t
Ctx_ticket_parse_f	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^type Ctx_ticket_parse_f fn c_int(void *, Ssl_session *, c_uchar *, c_size);$/;"	t
Ctx_ticket_write_f	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^type Ctx_ticket_write_f fn c_int(void *, const Ssl_session *, c_uchar *, const c_uchar *, c_size/;"	t
Ctx_vrfy_f	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^type Ctx_vrfy_f fn c_int (void*, X509_crt *, c_int, c_uint*);$/;"	t
CullMode	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type CullMode enum u32 @(cname="sg_cull_mode") {$/;"	t
CullMode	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type CullMode enum u32 @(cname="sg_cull_mode") {$/;"	t
CurrentBeginThread	$C2_ROOT/libs/sdl2/sdl.c2i	/^type CurrentBeginThread fn usize (void*, c_uint, c_uint, CurrentBeginThreadArg func,$/;"	t
CurrentBeginThreadArg	$C2_ROOT/libs/sdl2/sdl.c2i	/^type CurrentBeginThreadArg fn c_uint (void*);$/;"	t
CurrentEndThread	$C2_ROOT/libs/sdl2/sdl.c2i	/^type CurrentEndThread fn void (c_uint code);$/;"	t
Cylinder	$C2_ROOT/libs/sokol/sokol_shape.c2i	/^type Cylinder struct @(cname="sshape_cylinder_t") {$/;"	t
Cylinder	$C2_ROOT/libs/sokol_/sokol_shape.c2i	/^type Cylinder struct @(cname="sshape_cylinder_t") {$/;"	t
D3d11BufferInfo	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type D3d11BufferInfo struct @(cname="sg_d3d11_buffer_info") {$/;"	t
D3d11BufferInfo	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type D3d11BufferInfo struct @(cname="sg_d3d11_buffer_info") {$/;"	t
D3d11Environment	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type D3d11Environment struct @(cname="sg_d3d11_environment") {$/;"	t
D3d11Environment	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type D3d11Environment struct @(cname="sg_d3d11_environment") {$/;"	t
D3d11ImageInfo	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type D3d11ImageInfo struct @(cname="sg_d3d11_image_info") {$/;"	t
D3d11ImageInfo	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type D3d11ImageInfo struct @(cname="sg_d3d11_image_info") {$/;"	t
D3d11PipelineInfo	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type D3d11PipelineInfo struct @(cname="sg_d3d11_pipeline_info") {$/;"	t
D3d11PipelineInfo	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type D3d11PipelineInfo struct @(cname="sg_d3d11_pipeline_info") {$/;"	t
D3d11SamplerInfo	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type D3d11SamplerInfo struct @(cname="sg_d3d11_sampler_info") {$/;"	t
D3d11SamplerInfo	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type D3d11SamplerInfo struct @(cname="sg_d3d11_sampler_info") {$/;"	t
D3d11ShaderInfo	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type D3d11ShaderInfo struct @(cname="sg_d3d11_shader_info") {$/;"	t
D3d11ShaderInfo	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type D3d11ShaderInfo struct @(cname="sg_d3d11_shader_info") {$/;"	t
D3d11Swapchain	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type D3d11Swapchain struct @(cname="sg_d3d11_swapchain") {$/;"	t
D3d11Swapchain	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type D3d11Swapchain struct @(cname="sg_d3d11_swapchain") {$/;"	t
D3d11ViewInfo	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type D3d11ViewInfo struct @(cname="sg_d3d11_view_info") {$/;"	t
D3d11ViewInfo	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type D3d11ViewInfo struct @(cname="sg_d3d11_view_info") {$/;"	t
DEPTH	$C2_ROOT/libs/sokol/c/sokol_gfx.h	/^    _SG_LOGITEM_XMACRO(VALIDATE_SHADERDESC_COMPARISON_SAMPLER_REQUIRED, "image sample type DEPTH/;"	t
DEPTH	$C2_ROOT/libs/sokol_/c/sokol_gfx.h	/^    _SG_LOGITEM_XMACRO(VALIDATE_SHADERDESC_COMPARISON_SAMPLER_REQUIRED, "image sample type DEPTH/;"	t
DIR	$C2_ROOT/libs/libc/libc_dirent.c2i	/^type DIR struct @(opaque);$/;"	t
Data	$C2_ROOT/common/yaml/yaml_data.c2	/^type Data struct {$/;"	t
DataCb	$C2_ROOT/libs/sokol/sokol_app.c2i	/^type DataCb fn void(void*);$/;"	t
DataCb	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type DataCb fn void(void*);$/;"	t
DataCb	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^type DataCb fn void(void*);$/;"	t
DataCb	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type DataCb fn void(void*);$/;"	t
Db	$C2_ROOT/tools/tester/line_db.c2	/^public type Db struct @(opaque) {$/;"	t
Db	$C2_ROOT/tools/tester/test_db.c2	/^public type Db struct {$/;"	t
Dbg_fn	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^type Dbg_fn fn void(void*, c_int, const char *, c_int, const char *);$/;"	t
Decl	$C2_ROOT/ast/decl.c2	/^public type Decl struct @(opaque) {$/;"	t
DeclBits	$C2_ROOT/ast/decl.c2	/^type DeclBits struct {$/;"	t
DeclCheckState	$C2_ROOT/ast/decl.c2	/^public type DeclCheckState enum u8 {$/;"	t
DeclKind	$C2_ROOT/ast/decl.c2	/^public type DeclKind enum u8 {$/;"	t
DeclList	$C2_ROOT/ast/decl_list.c2	/^public type DeclList struct {$/;"	t
DeclStmt	$C2_ROOT/ast/decl_stmt.c2	/^public type DeclStmt struct @(opaque) {$/;"	t
DeclStmtBits	$C2_ROOT/ast/decl_stmt.c2	/^type DeclStmtBits struct {$/;"	t
DeclVisitor	$C2_ROOT/ast/ast.c2	/^public type DeclVisitor fn void (void* arg, Decl* d);$/;"	t
DepthAttachmentAction	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type DepthAttachmentAction struct @(cname="sg_depth_attachment_action") {$/;"	t
DepthAttachmentAction	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type DepthAttachmentAction struct @(cname="sg_depth_attachment_action") {$/;"	t
DepthState	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type DepthState struct @(cname="sg_depth_state") {$/;"	t
DepthState	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type DepthState struct @(cname="sg_depth_state") {$/;"	t
Desc	$C2_ROOT/libs/sokol/sokol_app.c2i	/^type Desc struct @(cname="sapp_desc") {$/;"	t
Desc	$C2_ROOT/libs/sokol/sokol_audio.c2i	/^type Desc struct @(cname="saudio_desc") {$/;"	t
Desc	$C2_ROOT/libs/sokol/sokol_debugtext.c2i	/^type Desc struct @(cname="sdtx_desc_t") {$/;"	t
Desc	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type Desc struct @(cname="sg_desc") {$/;"	t
Desc	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^type Desc struct @(cname="sgl_desc_t") {$/;"	t
Desc	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^type Desc struct @(cname="sapp_desc") {$/;"	t
Desc	$C2_ROOT/libs/sokol_/sokol_audio.c2i	/^type Desc struct @(cname="saudio_desc") {$/;"	t
Desc	$C2_ROOT/libs/sokol_/sokol_debugtext.c2i	/^type Desc struct @(cname="sdtx_desc_t") {$/;"	t
Desc	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type Desc struct @(cname="sg_desc") {$/;"	t
Desc	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^type Desc struct @(cname="sgl_desc_t") {$/;"	t
Dest	$C2_ROOT/generator/c2refs.c2	/^public type Dest struct {$/;"	t
Destructor	$C2_ROOT/ast_utils/attr.c2	/^    [AttrKind.Destructor]   = AttrReq.NoArg,$/;"	v
Diags	$C2_ROOT/common/diagnostics.c2	/^public type Diags struct @(opaque) {$/;"	t
Dir	$C2_ROOT/plugins/deps_generator.c2	/^type Dir struct {$/;"	t
Dirent	$C2_ROOT/libs/libc/libc_dirent.c2i	/^type Dirent struct @(cname="dirent") {$/;"	t
DirentCompareFn	$C2_ROOT/libs/libc/libc_dirent.c2i	/^type DirentCompareFn fn i32(const Dirent**, const Dirent**);$/;"	t
DivAssign	$C2_ROOT/common/c2_prec.c2	/^    [BinaryOpcode.DivAssign]   = Assignment,$/;"	v
DivAssign	$C2_ROOT/common/c_prec.c2	/^    [BinaryOpcode.DivAssign]   = Assignment,$/;"	v
Div_t	$C2_ROOT/libs/libc/stdlib.c2i	/^type Div_t struct @(cname="div_t") {$/;"	t
Divide	$C2_ROOT/common/c2_prec.c2	/^    [BinaryOpcode.Divide]      = Multiplicative,$/;"	v
Divide	$C2_ROOT/common/c_prec.c2	/^    [BinaryOpcode.Divide]      = Multiplicative,$/;"	v
Dot	$C2_ROOT/parser/token.c2	/^    [Kind.Dot]              = ".",$/;"	v
Drand48_data	$C2_ROOT/libs/libc/stdlib.c2i	/^type Drand48_data struct @(opaque, cname="drand48_data");$/;"	t
Ecp_group_id	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^type Ecp_group_id enum u8 @(cname="mbedtls_ecp_group_id") {$/;"	t
Element	$C2_ROOT/common/linked_list.c2	/^public type Element struct {$/;"	t
ElementRange	$C2_ROOT/libs/sokol/sokol_shape.c2i	/^type ElementRange struct @(cname="sshape_element_range_t") {$/;"	t
ElementRange	$C2_ROOT/libs/sokol_/sokol_shape.c2i	/^type ElementRange struct @(cname="sshape_element_range_t") {$/;"	t
Ellipsis	$C2_ROOT/parser/token.c2	/^    [Kind.Ellipsis]         = "...",$/;"	v
Embed	$C2_ROOT/ast_utils/attr.c2	/^    [AttrKind.Embed]        = AttrReq.String,$/;"	v
Entropy_cb_f	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^type Entropy_cb_f fn c_int(void*, c_uchar*, c_size);$/;"	t
Entropy_context	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^type Entropy_context struct @(cname="mbedtls_entropy_context") {$/;"	t
Entropy_f_source_ptr	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^type Entropy_f_source_ptr fn c_int(void* data, c_uchar* output, c_size len, c_size* olen);$/;"	t
Entropy_seed_f	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^type Entropy_seed_f fn c_int(void *, c_uchar *, c_size);$/;"	t
Entropy_source_state	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^type Entropy_source_state struct @(cname="mbedtls_entropy_source_state") {$/;"	t
Entry	$C2_ROOT/common/attr_handler.c2	/^type Entry struct {$/;"	t
Entry	$C2_ROOT/tools/tester/line_db.c2	/^type Entry struct {$/;"	t
Enum	$C2_ROOT/ir_examples/functions.c2	/^type Enum enum u8 { A, B }$/;"	t
EnumConstantDecl	$C2_ROOT/ast/enum_constant_decl.c2	/^public type EnumConstantDecl struct @(opaque) {$/;"	t
EnumConstantDeclBits	$C2_ROOT/ast/enum_constant_decl.c2	/^type EnumConstantDeclBits struct {$/;"	t
EnumType	$C2_ROOT/ast/enum_type.c2	/^public type EnumType struct @(opaque) {$/;"	t
EnumTypeDecl	$C2_ROOT/ast/enum_type_decl.c2	/^public type EnumTypeDecl struct @(opaque) {$/;"	t
EnumTypeDeclBits	$C2_ROOT/ast/enum_type_decl.c2	/^type EnumTypeDeclBits struct {$/;"	t
Environment	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type Environment struct @(cname="sg_environment") {$/;"	t
Environment	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type Environment struct @(cname="sg_environment") {$/;"	t
EnvironmentDefaults	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type EnvironmentDefaults struct @(cname="sg_environment_defaults") {$/;"	t
EnvironmentDefaults	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type EnvironmentDefaults struct @(cname="sg_environment_defaults") {$/;"	t
Eof	$C2_ROOT/parser/token.c2	/^    [Kind.Eof]              = "eof",$/;"	v
Equal	$C2_ROOT/common/c2_prec.c2	/^    [BinaryOpcode.Equal]       = Relational,$/;"	v
Equal	$C2_ROOT/common/c_prec.c2	/^    [BinaryOpcode.Equal]       = Equality,$/;"	v
Equal	$C2_ROOT/parser/c2_parser_expr.c2	/^    [Kind.Equal]          = Assign,$/;"	v
Equal	$C2_ROOT/parser/token.c2	/^    [Kind.Equal]            = "=",$/;"	v
EqualEqual	$C2_ROOT/parser/c2_parser_expr.c2	/^    [Kind.EqualEqual]   = Relational,$/;"	v
EqualEqual	$C2_ROOT/parser/token.c2	/^    [Kind.EqualEqual]       = "==",$/;"	v
Error	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^type Error struct @(cname="sgl_error_t") {$/;"	t
Error	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^type Error struct @(cname="sgl_error_t") {$/;"	t
Error	$C2_ROOT/parser/token.c2	/^    [Kind.Error]            = "error",$/;"	v
ErrorFn	$C2_ROOT/output/unit_test/libunit_test.dylib	/^public type ErrorFn fn void (const char* fmt @(printf_format), ...);$/;"	t
ErrorFn	$C2_ROOT/plugins/unit_test1.c2	/^public type ErrorFn fn void (const char* fmt @(printf_format), ...);$/;"	t
Evaluator	$C2_ROOT/ast/ast_evaluator.c2	/^type Evaluator struct {$/;"	t
Evaluator	$C2_ROOT/generator/c/c_generator_pure_call.c2	/^type Evaluator struct {$/;"	t
Event	$C2_ROOT/libs/sdl2/sdl.c2i	/^type Event union @(cname="SDL_Event") {$/;"	t
Event	$C2_ROOT/libs/sokol/sokol_app.c2i	/^type Event struct @(cname="sapp_event") {$/;"	t
Event	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^type Event struct @(cname="sapp_event") {$/;"	t
EventCb	$C2_ROOT/libs/sokol/sokol_app.c2i	/^type EventCb fn void(Event*);$/;"	t
EventCb	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^type EventCb fn void(Event*);$/;"	t
EventDataCb	$C2_ROOT/libs/sokol/sokol_app.c2i	/^type EventDataCb fn void(Event*, void*);$/;"	t
EventDataCb	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^type EventDataCb fn void(Event*, void*);$/;"	t
EventType	$C2_ROOT/libs/sdl2/sdl.c2i	/^type EventType enum u16 @(cname="SDL_EventType") {$/;"	t
EventType	$C2_ROOT/libs/sokol/sokol_app.c2i	/^type EventType enum u32 @(cname="sapp_event_type") {$/;"	t
EventType	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^type EventType enum u32 @(cname="sapp_event_type") {$/;"	t
Exclaim	$C2_ROOT/parser/c2_parser_expr.c2	/^    [Kind.Exclaim] = 7,$/;"	v
Exclaim	$C2_ROOT/parser/token.c2	/^    [Kind.Exclaim]          = "!",$/;"	v
ExclaimEqual	$C2_ROOT/parser/c2_parser_expr.c2	/^    [Kind.ExclaimEqual] = Relational,$/;"	v
ExclaimEqual	$C2_ROOT/parser/token.c2	/^    [Kind.ExclaimEqual]     = "!=",$/;"	v
ExpectFile	$C2_ROOT/tools/tester/expect_file.c2	/^public type ExpectFile struct @(opaque) {$/;"	t
ExpectMode	$C2_ROOT/tools/tester/expect_file.c2	/^public type ExpectMode enum u8 {$/;"	t
ExplicitCastExpr	$C2_ROOT/ast/explicit_cast_expr.c2	/^public type ExplicitCastExpr struct @(opaque) {$/;"	t
ExplicitCastExprBits	$C2_ROOT/ast/explicit_cast_expr.c2	/^type ExplicitCastExprBits struct {$/;"	t
Export	$C2_ROOT/ast_utils/attr.c2	/^    [AttrKind.Export]       = AttrReq.NoArg,$/;"	v
Expr	$C2_ROOT/ast/expr.c2	/^public type Expr struct @(opaque) {$/;"	t
ExprBits	$C2_ROOT/ast/expr.c2	/^type ExprBits struct {$/;"	t
ExprKind	$C2_ROOT/ast/expr.c2	/^public type ExprKind enum u8 {$/;"	t
ExprList	$C2_ROOT/ast/expr_list.c2	/^public type ExprList struct {$/;"	t
ExprPrinter	$C2_ROOT/ast/type_ref.c2	/^public type ExprPrinter fn void(void* arg, const Expr* e, string_buffer.Buf* out);$/;"	t
ExprWidth	$C2_ROOT/analyser/conversion_checker_expr.c2	/^type ExprWidth struct {$/;"	t
F32	$C2_ROOT/ir/context.c2	/^    [Type.F32] = InstrKind.Store4,$/;"	v
F64	$C2_ROOT/ir/context.c2	/^    [Type.F64] = InstrKind.Store8,$/;"	v
FILE	$C2_ROOT/libs/libc/stdio.c2i	/^type FILE struct {$/;"	t
FP32_	$C2_ROOT/libs/math/math.c2i	/^type FP32_ union { f32 f; u32 u; }$/;"	t
FP64	$C2_ROOT/ast/value.c2	/^type FP64 union { f64 d; u64 bits; }$/;"	t
FP64_	$C2_ROOT/libs/math/math.c2i	/^type FP64_ union { f64 d; u64 u; }$/;"	t
FaceWinding	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type FaceWinding enum u32 @(cname="sg_face_winding") {$/;"	t
FaceWinding	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type FaceWinding enum u32 @(cname="sg_face_winding") {$/;"	t
FallthroughStmt	$C2_ROOT/ast/fallthrough_stmt.c2	/^public type FallthroughStmt struct @(opaque) {$/;"	t
Feat_elif	$C2_ROOT/parser/token.c2	/^    [Kind.Feat_elif]        = "#elif",$/;"	v
Feat_else	$C2_ROOT/parser/token.c2	/^    [Kind.Feat_else]        = "#else",$/;"	v
Feat_endif	$C2_ROOT/parser/token.c2	/^    [Kind.Feat_endif]       = "#endif",$/;"	v
Feat_error	$C2_ROOT/parser/token.c2	/^    [Kind.Feat_error]       = "#error",$/;"	v
Feat_if	$C2_ROOT/parser/token.c2	/^    [Kind.Feat_if]          = "#if",$/;"	v
Feat_ifdef	$C2_ROOT/parser/token.c2	/^    [Kind.Feat_ifdef]       = "#ifdef",$/;"	v
Feat_ifndef	$C2_ROOT/parser/token.c2	/^    [Kind.Feat_ifndef]      = "#ifndef",$/;"	v
Feat_warning	$C2_ROOT/parser/token.c2	/^    [Kind.Feat_warning]     = "#warning",$/;"	v
Feature	$C2_ROOT/parser/c2_tokenizer.c2	/^public type Feature struct {$/;"	t
Features	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type Features struct @(cname="sg_features") {$/;"	t
Features	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type Features struct @(cname="sg_features") {$/;"	t
FieldDesignatedInitExpr	$C2_ROOT/ast/field_designated_init_expr.c2	/^public type FieldDesignatedInitExpr struct @(opaque) {$/;"	t
FieldInit	$C2_ROOT/generator/ir/field_struct_layouter.c2	/^type FieldInit struct {$/;"	t
FieldInitField	$C2_ROOT/ast/struct_type_decl.c2	/^public type FieldInitField struct {$/;"	t
FieldInitInfo	$C2_ROOT/ast/struct_type_decl.c2	/^public type FieldInitInfo struct {$/;"	t
FieldStructLayouter	$C2_ROOT/generator/ir/field_struct_layouter.c2	/^type FieldStructLayouter struct {$/;"	t
File	$C2_ROOT/common/build_target.c2	/^public type File struct {$/;"	t
File	$C2_ROOT/common/file/file_utils.c2	/^public type File struct @(unused) {$/;"	t
File	$C2_ROOT/common/source_mgr.c2	/^type File struct {$/;"	t
File	$C2_ROOT/generator/c2refs.c2	/^type File struct {$/;"	t
Files	$C2_ROOT/generator/c2refs.c2	/^type Files struct {$/;"	t
FillInfo	$C2_ROOT/analyser/module_analyser_init.c2	/^type FillInfo struct {$/;"	t
Filter	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type Filter enum u32 @(cname="sg_filter") {$/;"	t
Filter	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type Filter enum u32 @(cname="sg_filter") {$/;"	t
FilterFn	$C2_ROOT/libs/libc/libc_dirent.c2i	/^type FilterFn fn i32(const Dirent*);$/;"	t
Finder	$C2_ROOT/generator/c/dep_finder.c2	/^public type Finder struct {$/;"	t
Finder	$C2_ROOT/tools/common/refs_finder.c2	/^public type Finder struct @(opaque) {$/;"	t
Flag	$C2_ROOT/libs/libc/ctermios.c2i	/^type Flag c_uint;$/;"	t
Flag	$C2_ROOT/libs/libc/net_if.c2i	/^type Flag enum u32 @(cname="ifflag") {$/;"	t
Flags	$C2_ROOT/common/warning_flags.c2	/^public type Flags struct {$/;"	t
Float32	$C2_ROOT/ast/builtin_type.c2	/^    [BuiltinKind.Float32] = true,$/;"	v
Float32	$C2_ROOT/generator/c/c_generator_expr.c2	/^    [BuiltinKind.Float32] = false,$/;"	v
Float32	$C2_ROOT/generator/ir/ir_generator.c2	/^    [BuiltinKind.Float32] = F32,$/;"	v
Float64	$C2_ROOT/ast/builtin_type.c2	/^    [BuiltinKind.Float64] = true,$/;"	v
Float64	$C2_ROOT/generator/c/c_generator_expr.c2	/^    [BuiltinKind.Float64] = true,$/;"	v
Float64	$C2_ROOT/generator/ir/ir_generator.c2	/^    [BuiltinKind.Float64] = F64,$/;"	v
FloatLiteral	$C2_ROOT/ast/float_literal.c2	/^public type FloatLiteral struct @(opaque) {$/;"	t
FloatLiteral	$C2_ROOT/parser/c2_parser_expr.c2	/^    [Kind.FloatLiteral] = 3,$/;"	v
FloatLiteral	$C2_ROOT/parser/token.c2	/^    [Kind.FloatLiteral]     = "float",$/;"	v
FloatLiteralBits	$C2_ROOT/ast/float_literal.c2	/^type FloatLiteralBits struct {$/;"	t
Flow	$C2_ROOT/analyser/module_analyser_stmt.c2	/^type Flow enum u8 {$/;"	t
FlowBits	$C2_ROOT/analyser/module_analyser_stmt.c2	/^type FlowBits u32;$/;"	t
Font	$C2_ROOT/libs/sdl2_ttf/sdl_ttf.c2i	/^type Font struct @(cname="TTF_FONT", opaque);$/;"	t
FontDesc	$C2_ROOT/libs/sokol/sokol_debugtext.c2i	/^type FontDesc struct @(cname="sdtx_font_desc_t") {$/;"	t
FontDesc	$C2_ROOT/libs/sokol_/sokol_debugtext.c2i	/^type FontDesc struct @(cname="sdtx_font_desc_t") {$/;"	t
Foo	$C2_ROOT/ir_examples/array.c2	/^type Foo struct {$/;"	t
Foo	$C2_ROOT/ir_examples/builtins.c2	/^type Foo struct {$/;"	t
Foo	$C2_ROOT/ir_examples/global_arrays.c2	/^type Foo struct {$/;"	t
Foo	$C2_ROOT/ir_examples/struct_init.c2	/^type Foo struct {$/;"	t
Foo	$C2_ROOT/ir_examples/struct_init_anonymous.c2	/^type Foo struct {$/;"	t
ForStmt	$C2_ROOT/ast/for_stmt.c2	/^public type ForStmt struct @(opaque) {$/;"	t
FormatAnalyser	$C2_ROOT/analyser/module_analyser_call.c2	/^type FormatAnalyser struct {$/;"	t
FormatChanger	$C2_ROOT/generator/c/c_generator_expr.c2	/^type FormatChanger struct {$/;"	t
FormatHandler	$C2_ROOT/analyser_utils/printf_utils.c2	/^public type FormatHandler fn bool (void* arg, Specifier specifier, u32 offset, i32 stars, char l/;"	t
Fragment	$C2_ROOT/generator/c/c_generator.c2	/^type Fragment struct {$/;"	t
Fragment	$C2_ROOT/tools/common/replacer.c2	/^type Fragment struct {$/;"	t
FrameStats	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type FrameStats struct @(cname="sg_frame_stats") {$/;"	t
FrameStats	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type FrameStats struct @(cname="sg_frame_stats") {$/;"	t
FrameStatsD3d11	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type FrameStatsD3d11 struct @(cname="sg_frame_stats_d3d11") {$/;"	t
FrameStatsD3d11	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type FrameStatsD3d11 struct @(cname="sg_frame_stats_d3d11") {$/;"	t
FrameStatsD3d11Bindings	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type FrameStatsD3d11Bindings struct @(cname="sg_frame_stats_d3d11_bindings") {$/;"	t
FrameStatsD3d11Bindings	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type FrameStatsD3d11Bindings struct @(cname="sg_frame_stats_d3d11_bindings") {$/;"	t
FrameStatsD3d11Draw	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type FrameStatsD3d11Draw struct @(cname="sg_frame_stats_d3d11_draw") {$/;"	t
FrameStatsD3d11Draw	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type FrameStatsD3d11Draw struct @(cname="sg_frame_stats_d3d11_draw") {$/;"	t
FrameStatsD3d11Pass	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type FrameStatsD3d11Pass struct @(cname="sg_frame_stats_d3d11_pass") {$/;"	t
FrameStatsD3d11Pass	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type FrameStatsD3d11Pass struct @(cname="sg_frame_stats_d3d11_pass") {$/;"	t
FrameStatsD3d11Pipeline	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type FrameStatsD3d11Pipeline struct @(cname="sg_frame_stats_d3d11_pipeline") {$/;"	t
FrameStatsD3d11Pipeline	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type FrameStatsD3d11Pipeline struct @(cname="sg_frame_stats_d3d11_pipeline") {$/;"	t
FrameStatsD3d11Uniforms	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type FrameStatsD3d11Uniforms struct @(cname="sg_frame_stats_d3d11_uniforms") {$/;"	t
FrameStatsD3d11Uniforms	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type FrameStatsD3d11Uniforms struct @(cname="sg_frame_stats_d3d11_uniforms") {$/;"	t
FrameStatsGl	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type FrameStatsGl struct @(cname="sg_frame_stats_gl") {$/;"	t
FrameStatsGl	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type FrameStatsGl struct @(cname="sg_frame_stats_gl") {$/;"	t
FrameStatsMetal	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type FrameStatsMetal struct @(cname="sg_frame_stats_metal") {$/;"	t
FrameStatsMetal	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type FrameStatsMetal struct @(cname="sg_frame_stats_metal") {$/;"	t
FrameStatsMetalBindings	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type FrameStatsMetalBindings struct @(cname="sg_frame_stats_metal_bindings") {$/;"	t
FrameStatsMetalBindings	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type FrameStatsMetalBindings struct @(cname="sg_frame_stats_metal_bindings") {$/;"	t
FrameStatsMetalIdpool	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type FrameStatsMetalIdpool struct @(cname="sg_frame_stats_metal_idpool") {$/;"	t
FrameStatsMetalIdpool	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type FrameStatsMetalIdpool struct @(cname="sg_frame_stats_metal_idpool") {$/;"	t
FrameStatsMetalPipeline	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type FrameStatsMetalPipeline struct @(cname="sg_frame_stats_metal_pipeline") {$/;"	t
FrameStatsMetalPipeline	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type FrameStatsMetalPipeline struct @(cname="sg_frame_stats_metal_pipeline") {$/;"	t
FrameStatsMetalUniforms	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type FrameStatsMetalUniforms struct @(cname="sg_frame_stats_metal_uniforms") {$/;"	t
FrameStatsMetalUniforms	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type FrameStatsMetalUniforms struct @(cname="sg_frame_stats_metal_uniforms") {$/;"	t
FrameStatsWgpu	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type FrameStatsWgpu struct @(cname="sg_frame_stats_wgpu") {$/;"	t
FrameStatsWgpu	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type FrameStatsWgpu struct @(cname="sg_frame_stats_wgpu") {$/;"	t
FrameStatsWgpuBindings	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type FrameStatsWgpuBindings struct @(cname="sg_frame_stats_wgpu_bindings") {$/;"	t
FrameStatsWgpuBindings	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type FrameStatsWgpuBindings struct @(cname="sg_frame_stats_wgpu_bindings") {$/;"	t
FrameStatsWgpuUniforms	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type FrameStatsWgpuUniforms struct @(cname="sg_frame_stats_wgpu_uniforms") {$/;"	t
FrameStatsWgpuUniforms	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type FrameStatsWgpuUniforms struct @(cname="sg_frame_stats_wgpu_uniforms") {$/;"	t
FreeCb	$C2_ROOT/libs/sokol/sokol_app.c2i	/^type FreeCb fn void(void*, void*);$/;"	t
FreeCb	$C2_ROOT/libs/sokol/sokol_audio.c2i	/^type FreeCb fn void(void*, void*);$/;"	t
FreeCb	$C2_ROOT/libs/sokol/sokol_debugtext.c2i	/^type FreeCb fn void(void*, void*);$/;"	t
FreeCb	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type FreeCb fn void(void*, void*);$/;"	t
FreeCb	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^type FreeCb fn void(void*, void*);$/;"	t
FreeCb	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^type FreeCb fn void(void*, void*);$/;"	t
FreeCb	$C2_ROOT/libs/sokol_/sokol_audio.c2i	/^type FreeCb fn void(void*, void*);$/;"	t
FreeCb	$C2_ROOT/libs/sokol_/sokol_debugtext.c2i	/^type FreeCb fn void(void*, void*);$/;"	t
FreeCb	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type FreeCb fn void(void*, void*);$/;"	t
FreeCb	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^type FreeCb fn void(void*, void*);$/;"	t
Fun	$C2_ROOT/ast/ast_evaluator.c2	/^type Fun union {$/;"	t
FunDD	$C2_ROOT/ast/ast_evaluator.c2	/^type FunDD fn i64 (f64 a);$/;"	t
FunII	$C2_ROOT/ast/ast_evaluator.c2	/^type FunII fn i32 (i32 a);$/;"	t
FunctionDecl	$C2_ROOT/ast/function_decl.c2	/^public type FunctionDecl struct @(opaque) {$/;"	t
FunctionDeclBits	$C2_ROOT/ast/function_decl.c2	/^type FunctionDeclBits struct {$/;"	t
FunctionDeclFlags	$C2_ROOT/ast/function_decl.c2	/^type FunctionDeclFlags struct {$/;"	t
FunctionDeclList	$C2_ROOT/ast/function_decl_list.c2	/^public type FunctionDeclList struct {$/;"	t
FunctionInfo	$C2_ROOT/ir/function_info.c2	/^public type FunctionInfo struct {$/;"	t
FunctionType	$C2_ROOT/ast/function_type.c2	/^public type FunctionType struct @(opaque) {$/;"	t
FunctionTypeDecl	$C2_ROOT/ast/function_type_decl.c2	/^public type FunctionTypeDecl struct @(opaque) {$/;"	t
FunctionVisitor	$C2_ROOT/ast/ast.c2	/^public type FunctionVisitor fn void (void* arg, FunctionDecl* d);$/;"	t
Generator	$C2_ROOT/generator/c/c_generator.c2	/^type Generator struct {$/;"	t
Generator	$C2_ROOT/generator/c2i/c2i_generator.c2	/^type Generator struct {$/;"	t
Generator	$C2_ROOT/generator/ir/ir_generator.c2	/^type Generator struct {$/;"	t
Generator	$C2_ROOT/plugins/deps_generator.c2	/^type Generator struct {$/;"	t
Generator	$C2_ROOT/plugins/refs_generator.c2	/^type Generator struct {$/;"	t
GlBufferInfo	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type GlBufferInfo struct @(cname="sg_gl_buffer_info") {$/;"	t
GlBufferInfo	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type GlBufferInfo struct @(cname="sg_gl_buffer_info") {$/;"	t
GlImageInfo	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type GlImageInfo struct @(cname="sg_gl_image_info") {$/;"	t
GlImageInfo	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type GlImageInfo struct @(cname="sg_gl_image_info") {$/;"	t
GlSamplerInfo	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type GlSamplerInfo struct @(cname="sg_gl_sampler_info") {$/;"	t
GlSamplerInfo	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type GlSamplerInfo struct @(cname="sg_gl_sampler_info") {$/;"	t
GlShaderInfo	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type GlShaderInfo struct @(cname="sg_gl_shader_info") {$/;"	t
GlShaderInfo	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type GlShaderInfo struct @(cname="sg_gl_shader_info") {$/;"	t
GlSwapchain	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type GlSwapchain struct @(cname="sg_gl_swapchain") {$/;"	t
GlSwapchain	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type GlSwapchain struct @(cname="sg_gl_swapchain") {$/;"	t
GlViewInfo	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type GlViewInfo struct @(cname="sg_gl_view_info") {$/;"	t
GlViewInfo	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type GlViewInfo struct @(cname="sg_gl_view_info") {$/;"	t
Globals	$C2_ROOT/ast/utils.c2	/^public type Globals struct @(opaque) {$/;"	t
GlslShaderUniform	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type GlslShaderUniform struct @(cname="sg_glsl_shader_uniform") {$/;"	t
GlslShaderUniform	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type GlslShaderUniform struct @(cname="sg_glsl_shader_uniform") {$/;"	t
GotoStmt	$C2_ROOT/ast/goto_stmt.c2	/^public type GotoStmt struct @(opaque) {$/;"	t
Greater	$C2_ROOT/parser/c2_parser_expr.c2	/^    [Kind.Greater]      = Relational,$/;"	v
Greater	$C2_ROOT/parser/token.c2	/^    [Kind.Greater]          = ">",$/;"	v
GreaterEqual	$C2_ROOT/common/c2_prec.c2	/^    [BinaryOpcode.GreaterEqual] = Relational,$/;"	v
GreaterEqual	$C2_ROOT/common/c_prec.c2	/^    [BinaryOpcode.GreaterEqual] = Relative,$/;"	v
GreaterEqual	$C2_ROOT/parser/c2_parser_expr.c2	/^    [Kind.GreaterEqual] = Relational,$/;"	v
GreaterEqual	$C2_ROOT/parser/token.c2	/^    [Kind.GreaterEqual]     = ">=",$/;"	v
GreaterGreater	$C2_ROOT/parser/c2_parser_expr.c2	/^    [Kind.GreaterGreater] = ShiftRight,$/;"	v
GreaterGreater	$C2_ROOT/parser/token.c2	/^    [Kind.GreaterGreater]   = ">>",$/;"	v
GreaterGreaterEqual	$C2_ROOT/parser/c2_parser_expr.c2	/^    [Kind.GreaterGreaterEqual] = ShrAssign,$/;"	v
GreaterGreaterEqual	$C2_ROOT/parser/token.c2	/^    [Kind.GreaterGreaterEqual] = ">>=",$/;"	v
GreaterThan	$C2_ROOT/common/c2_prec.c2	/^    [BinaryOpcode.GreaterThan] = Relational,$/;"	v
GreaterThan	$C2_ROOT/common/c_prec.c2	/^    [BinaryOpcode.GreaterThan] = Relative,$/;"	v
Group	$C2_ROOT/output/unit_test/libunit_test.dylib	/^public type Group struct {$/;"	t
Group	$C2_ROOT/plugins/unit_test1.c2	/^public type Group struct {$/;"	t
Handler	$C2_ROOT/common/attr_handler.c2	/^public type Handler struct @(opaque) {$/;"	t
HandlerFn	$C2_ROOT/parser/c2_tokenizer.c2	/^public type HandlerFn fn void (void* arg, SrcLoc loc);$/;"	t
HashEntry	$C2_ROOT/ast_utils/string_pool.c2	/^type HashEntry u64;$/;"	t
Hdr	$C2_ROOT/libs/libc/linux_ifether.c2i	/^type Hdr struct @(cname="ethhdr", packed) {$/;"	t
Html5FetchError	$C2_ROOT/libs/sokol/sokol_app.c2i	/^type Html5FetchError enum i32 @(cname="sapp_html5_fetch_error") {$/;"	t
Html5FetchError	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^type Html5FetchError enum i32 @(cname="sapp_html5_fetch_error") {$/;"	t
Html5FetchRequest	$C2_ROOT/libs/sokol/sokol_app.c2i	/^type Html5FetchRequest struct @(cname="sapp_html5_fetch_request") {$/;"	t
Html5FetchRequest	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^type Html5FetchRequest struct @(cname="sapp_html5_fetch_request") {$/;"	t
Html5FetchResponse	$C2_ROOT/libs/sokol/sokol_app.c2i	/^type Html5FetchResponse struct @(cname="sapp_html5_fetch_response") {$/;"	t
Html5FetchResponse	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^type Html5FetchResponse struct @(cname="sapp_html5_fetch_response") {$/;"	t
I16	$C2_ROOT/ir/context.c2	/^    [Type.I16] = InstrKind.Store2,$/;"	v
I32	$C2_ROOT/ir/context.c2	/^    [Type.I32] = InstrKind.Store4,$/;"	v
I64	$C2_ROOT/ir/context.c2	/^    [Type.I64] = InstrKind.Store8,$/;"	v
I8	$C2_ROOT/ir/context.c2	/^    [Type.I8]  = InstrKind.Store1,$/;"	v
IO_marker	$C2_ROOT/libs/libc/stdio.c2i	/^type IO_marker struct @(cname="_IO_marker") {$/;"	t
ISize	$C2_ROOT/ast/builtin_type.c2	/^    [BuiltinKind.ISize] = true,$/;"	v
ISize	$C2_ROOT/generator/c/c_generator_expr.c2	/^    [BuiltinKind.ISize] = true,$/;"	v
ISize	$C2_ROOT/generator/ir/ir_generator.c2	/^    [BuiltinKind.ISize]   = I64,  \/\/ TODO 32-bit$/;"	v
IconDesc	$C2_ROOT/libs/sokol/sokol_app.c2i	/^type IconDesc struct @(cname="sapp_icon_desc") {$/;"	t
IconDesc	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^type IconDesc struct @(cname="sapp_icon_desc") {$/;"	t
Identifier	$C2_ROOT/parser/c2_parser_expr.c2	/^    [Kind.Identifier] = 1,$/;"	v
Identifier	$C2_ROOT/parser/token.c2	/^    [Kind.Identifier]       = "identifier",$/;"	v
IdentifierExpr	$C2_ROOT/ast/identifier_expr.c2	/^public type IdentifierExpr struct @(opaque) {$/;"	t
IdentifierExprBits	$C2_ROOT/ast/identifier_expr.c2	/^type IdentifierExprBits struct {$/;"	t
IdentifierKind	$C2_ROOT/ast/identifier_expr.c2	/^public type IdentifierKind enum u8 {$/;"	t
IfStmt	$C2_ROOT/ast/if_stmt.c2	/^public type IfStmt struct @(opaque) {$/;"	t
IfStmtBits	$C2_ROOT/ast/if_stmt.c2	/^type IfStmtBits struct {$/;"	t
Ifaddrs	$C2_ROOT/libs/libc/ifaddrs.c2i	/^type Ifaddrs struct {$/;"	t
Image	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type Image struct @(cname="sg_image") {$/;"	t
Image	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type Image struct @(cname="sg_image") {$/;"	t
ImageData	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type ImageData struct @(cname="sg_image_data") {$/;"	t
ImageData	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type ImageData struct @(cname="sg_image_data") {$/;"	t
ImageDesc	$C2_ROOT/libs/sokol/sokol_app.c2i	/^type ImageDesc struct @(cname="sapp_image_desc") {$/;"	t
ImageDesc	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type ImageDesc struct @(cname="sg_image_desc") {$/;"	t
ImageDesc	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^type ImageDesc struct @(cname="sapp_image_desc") {$/;"	t
ImageDesc	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type ImageDesc struct @(cname="sg_image_desc") {$/;"	t
ImageInfo	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type ImageInfo struct @(cname="sg_image_info") {$/;"	t
ImageInfo	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type ImageInfo struct @(cname="sg_image_info") {$/;"	t
ImageSampleType	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type ImageSampleType enum u32 @(cname="sg_image_sample_type") {$/;"	t
ImageSampleType	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type ImageSampleType enum u32 @(cname="sg_image_sample_type") {$/;"	t
ImageType	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type ImageType enum u32 @(cname="sg_image_type") {$/;"	t
ImageType	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type ImageType enum u32 @(cname="sg_image_type") {$/;"	t
ImageUsage	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type ImageUsage struct @(cname="sg_image_usage") {$/;"	t
ImageUsage	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type ImageUsage struct @(cname="sg_image_usage") {$/;"	t
ImageViewDesc	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type ImageViewDesc struct @(cname="sg_image_view_desc") {$/;"	t
ImageViewDesc	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type ImageViewDesc struct @(cname="sg_image_view_desc") {$/;"	t
ImplicitCastBits	$C2_ROOT/ast/implicit_cast_expr.c2	/^type ImplicitCastBits struct {$/;"	t
ImplicitCastExpr	$C2_ROOT/ast/implicit_cast_expr.c2	/^public type ImplicitCastExpr struct @(opaque) {$/;"	t
ImplicitCastKind	$C2_ROOT/ast/implicit_cast_expr.c2	/^public type ImplicitCastKind enum u8 {$/;"	t
ImportDecl	$C2_ROOT/ast/import_decl.c2	/^public type ImportDecl struct @(opaque) {$/;"	t
ImportDeclBits	$C2_ROOT/ast/import_decl.c2	/^type ImportDeclBits struct {$/;"	t
ImportDeclList	$C2_ROOT/ast/import_decl_list.c2	/^public type ImportDeclList struct {$/;"	t
ImportVisitor	$C2_ROOT/ast/ast.c2	/^public type ImportVisitor fn void (void* arg, ImportDecl* d);$/;"	t
InAddr	$C2_ROOT/libs/libc/sys_socket.c2i	/^type InAddr u32 @(cname="in_addr_t");$/;"	t
InPort	$C2_ROOT/libs/libc/sys_socket.c2i	/^type InPort u16 @(cname="in_port_t");$/;"	t
In_addr	$C2_ROOT/libs/libc/sys_socket.c2i	/^type In_addr struct @(cname="in_addr") {$/;"	t
Index	$C2_ROOT/ir/types.c2	/^public type Index struct {$/;"	t
IndexType	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type IndexType enum u32 @(cname="sg_index_type") {$/;"	t
IndexType	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type IndexType enum u32 @(cname="sg_index_type") {$/;"	t
Info	$C2_ROOT/analyser/incr_array_list.c2	/^public type Info struct {$/;"	t
Info	$C2_ROOT/analyser/struct_func_list.c2	/^public type Info struct {$/;"	t
Info	$C2_ROOT/common/build_file.c2	/^public type Info struct @(opaque) {$/;"	t
Info	$C2_ROOT/common/target_info.c2	/^public type Info struct {$/;"	t
Info	$C2_ROOT/parser/keywords.c2	/^public type Info struct {$/;"	t
Info	$C2_ROOT/plugins/plugin_info.c2	/^public type Info struct {$/;"	t
InitEntry	$C2_ROOT/analyser/init_checker.c2	/^public type InitEntry struct {$/;"	t
InitEntry	$C2_ROOT/generator/ir/array_init_sorter.c2	/^public type InitEntry struct {$/;"	t
InitFn	$C2_ROOT/plugins/plugin_info.c2	/^public type InitFn fn void(void* arg, plugin_info.Info* info);$/;"	t
InitListExpr	$C2_ROOT/ast/init_list_expr.c2	/^public type InitListExpr struct @(opaque) {$/;"	t
InitListExprBits	$C2_ROOT/ast/init_list_expr.c2	/^type InitListExprBits struct {$/;"	t
InitValue	$C2_ROOT/ir/init_value.c2	/^type InitValue struct {$/;"	t
InitValueKind	$C2_ROOT/ir/init_value.c2	/^type InitValueKind enum u8 {$/;"	t
InitValueList	$C2_ROOT/ir/init_value_list.c2	/^type InitValueList struct {$/;"	t
Inline	$C2_ROOT/ast_utils/attr.c2	/^    [AttrKind.Inline]       = AttrReq.NoArg,$/;"	v
InputStream	$C2_ROOT/generator/radix_tree/radix_tree_fs.c2	/^public type InputStream struct {$/;"	t
Inserter	$C2_ROOT/ir/inserter.c2	/^public type Inserter struct {$/;"	t
InstanceTable	$C2_ROOT/ast/instance_table.c2	/^type InstanceTable struct {$/;"	t
Instantiator	$C2_ROOT/ast/instantiator.c2	/^public type Instantiator struct {$/;"	t
Instr	$C2_ROOT/ir/instr.c2	/^public type Instr struct {$/;"	t
InstrBits	$C2_ROOT/ir/instr.c2	/^public type InstrBits struct {$/;"	t
InstrInsertion	$C2_ROOT/ir/inserter.c2	/^public type InstrInsertion struct {$/;"	t
InstrKind	$C2_ROOT/ir/instr_kind.c2	/^public type InstrKind enum u8 {$/;"	t
InstrList	$C2_ROOT/ir/instr_list.c2	/^public type InstrList struct {$/;"	t
Int16	$C2_ROOT/ast/builtin_type.c2	/^    [BuiltinKind.Int16] = true,$/;"	v
Int16	$C2_ROOT/generator/c/c_generator_expr.c2	/^    [BuiltinKind.Int16] = false,$/;"	v
Int16	$C2_ROOT/generator/ir/ir_generator.c2	/^    [BuiltinKind.Int16]   = I16,$/;"	v
Int32	$C2_ROOT/ast/builtin_type.c2	/^    [BuiltinKind.Int32] = true,$/;"	v
Int32	$C2_ROOT/generator/c/c_generator_expr.c2	/^    [BuiltinKind.Int32] = false,$/;"	v
Int32	$C2_ROOT/generator/ir/ir_generator.c2	/^    [BuiltinKind.Int32]   = I32,$/;"	v
Int64	$C2_ROOT/ast/builtin_type.c2	/^    [BuiltinKind.Int64] = true,$/;"	v
Int64	$C2_ROOT/generator/c/c_generator_expr.c2	/^    [BuiltinKind.Int64] = true,$/;"	v
Int64	$C2_ROOT/generator/ir/ir_generator.c2	/^    [BuiltinKind.Int64]   = I64,$/;"	v
Int8	$C2_ROOT/ast/builtin_type.c2	/^    [BuiltinKind.Int8] = true,$/;"	v
Int8	$C2_ROOT/generator/c/c_generator_expr.c2	/^    [BuiltinKind.Int8] = false,$/;"	v
Int8	$C2_ROOT/generator/ir/ir_generator.c2	/^    [BuiltinKind.Int8]    = I8,$/;"	v
Integer	$C2_ROOT/libs/lua/lua.c2i	/^type Integer c_int @(cname="lua_integer");$/;"	t
IntegerLiteral	$C2_ROOT/ast/integer_literal.c2	/^public type IntegerLiteral struct @(opaque) {$/;"	t
IntegerLiteral	$C2_ROOT/parser/c2_parser_expr.c2	/^    [Kind.IntegerLiteral] = 2,$/;"	v
IntegerLiteral	$C2_ROOT/parser/token.c2	/^    [Kind.IntegerLiteral]   = "integer",$/;"	v
IntegerLiteralBits	$C2_ROOT/ast/integer_literal.c2	/^type IntegerLiteralBits struct {$/;"	t
InterferenceGraph	$C2_ROOT/ir/interference_graph.c2	/^public type InterferenceGraph struct @(opaque) {$/;"	t
Invalid	$C2_ROOT/parser/token.c2	/^    [Kind.Invalid]          = "invalid",$/;"	v
Iovec	$C2_ROOT/libs/libc/uio.c2i	/^type Iovec struct {$/;"	t
Ip_Mreq	$C2_ROOT/libs/libc/sys_socket.c2i	/^type Ip_Mreq struct @(cname="ip_mreq") {$/;"	t
Issue	$C2_ROOT/tools/tester/issues.c2	/^type Issue struct {$/;"	t
Issues	$C2_ROOT/tools/tester/issues.c2	/^public type Issues struct @(opaque) {$/;"	t
Iter	$C2_ROOT/common/yaml/yaml_iterator.c2	/^public type Iter struct {$/;"	t
Iter	$C2_ROOT/generator/radix_tree/radix_tree.c2	/^type Iter struct {$/;"	t
Iter	$C2_ROOT/ir/interference_graph.c2	/^public type Iter struct {$/;"	t
Iter	$C2_ROOT/ir/live_map.c2	/^public type Iter struct {$/;"	t
Iter	$C2_ROOT/ir/slot_writes_map.c2	/^public type Iter struct {$/;"	t
Iter	$C2_ROOT/ir_examples/bitfield_init.c2	/^type Iter struct {$/;"	t
Iter	$C2_ROOT/tools/tester/issues.c2	/^public type Iter struct {$/;"	t
JmpBuf	$C2_ROOT/libs/libc/csetjmp.c2i	/^type JmpBuf JmpBufTag* @(cname="jmp_buf");$/;"	t
JmpBufTag	$C2_ROOT/libs/libc/csetjmp.c2i	/^type JmpBufTag struct @(cname="__jmp_buf_tag", aligned=8) {$/;"	t
JumpScope	$C2_ROOT/generator/ir/ir_generator.c2	/^type JumpScope struct {$/;"	t
KContext	$C2_ROOT/libs/lua/lua.c2i	/^type KContext LUA_KCONTEXT @(cname="lua_KContext");$/;"	t
KFunction	$C2_ROOT/libs/lua/lua.c2i	/^type KFunction fn c_int (State *L, c_int status, KContext ctx) @(cname="lua_KFunction");$/;"	t
KW_as	$C2_ROOT/parser/token.c2	/^    [Kind.KW_as]            = "as",$/;"	v
KW_asm	$C2_ROOT/parser/token.c2	/^    [Kind.KW_asm]           = "asm",$/;"	v
KW_assert	$C2_ROOT/parser/token.c2	/^    [Kind.KW_assert]        = "assert",$/;"	v
KW_bool	$C2_ROOT/parser/c2_parser_expr.c2	/^    [Kind.KW_bool] = 16,$/;"	v
KW_bool	$C2_ROOT/parser/token.c2	/^    [Kind.KW_bool]          = "bool",$/;"	v
KW_break	$C2_ROOT/parser/token.c2	/^    [Kind.KW_break]         = "break",$/;"	v
KW_case	$C2_ROOT/parser/token.c2	/^    [Kind.KW_case]          = "case",$/;"	v
KW_cast	$C2_ROOT/parser/c2_parser_expr.c2	/^    [Kind.KW_cast] = 8,$/;"	v
KW_cast	$C2_ROOT/parser/token.c2	/^    [Kind.KW_cast]          = "cast",$/;"	v
KW_char	$C2_ROOT/parser/c2_parser_expr.c2	/^    [Kind.KW_char] = 16,$/;"	v
KW_char	$C2_ROOT/parser/token.c2	/^    [Kind.KW_char]          = "char",$/;"	v
KW_const	$C2_ROOT/parser/token.c2	/^    [Kind.KW_const]         = "const",$/;"	v
KW_continue	$C2_ROOT/parser/token.c2	/^    [Kind.KW_continue]      = "continue",$/;"	v
KW_default	$C2_ROOT/parser/token.c2	/^    [Kind.KW_default]       = "default",$/;"	v
KW_elemsof	$C2_ROOT/parser/c2_parser_expr.c2	/^    [Kind.KW_elemsof] = 9,$/;"	v
KW_elemsof	$C2_ROOT/parser/token.c2	/^    [Kind.KW_elemsof]       = "elemsof",$/;"	v
KW_else	$C2_ROOT/parser/token.c2	/^    [Kind.KW_else]          = "else",$/;"	v
KW_enum	$C2_ROOT/parser/token.c2	/^    [Kind.KW_enum]          = "enum",$/;"	v
KW_enum_max	$C2_ROOT/parser/c2_parser_expr.c2	/^    [Kind.KW_enum_max] = 10,$/;"	v
KW_enum_max	$C2_ROOT/parser/token.c2	/^    [Kind.KW_enum_max]      = "enum_max",$/;"	v
KW_enum_min	$C2_ROOT/parser/c2_parser_expr.c2	/^    [Kind.KW_enum_min] = 10,$/;"	v
KW_enum_min	$C2_ROOT/parser/token.c2	/^    [Kind.KW_enum_min]      = "enum_min",$/;"	v
KW_f32	$C2_ROOT/parser/c2_parser_expr.c2	/^    [Kind.KW_f32] = 16,$/;"	v
KW_f32	$C2_ROOT/parser/token.c2	/^    [Kind.KW_f32]           = "f32",$/;"	v
KW_f64	$C2_ROOT/parser/c2_parser_expr.c2	/^    [Kind.KW_f64] = 16,$/;"	v
KW_f64	$C2_ROOT/parser/token.c2	/^    [Kind.KW_f64]           = "f64",$/;"	v
KW_fallthrough	$C2_ROOT/parser/token.c2	/^    [Kind.KW_fallthrough]   = "fallthrough",$/;"	v
KW_false	$C2_ROOT/parser/c2_parser_expr.c2	/^    [Kind.KW_false] = 11,$/;"	v
KW_false	$C2_ROOT/parser/token.c2	/^    [Kind.KW_false]         = "false",$/;"	v
KW_fn	$C2_ROOT/parser/token.c2	/^    [Kind.KW_fn]            = "fn",$/;"	v
KW_for	$C2_ROOT/parser/token.c2	/^    [Kind.KW_for]           = "for",$/;"	v
KW_goto	$C2_ROOT/parser/token.c2	/^    [Kind.KW_goto]          = "goto",$/;"	v
KW_i16	$C2_ROOT/parser/c2_parser_expr.c2	/^    [Kind.KW_i16] = 16,$/;"	v
KW_i16	$C2_ROOT/parser/token.c2	/^    [Kind.KW_i16]           = "i16",$/;"	v
KW_i32	$C2_ROOT/parser/c2_parser_expr.c2	/^    [Kind.KW_i32] = 16,$/;"	v
KW_i32	$C2_ROOT/parser/token.c2	/^    [Kind.KW_i32]           = "i32",$/;"	v
KW_i64	$C2_ROOT/parser/c2_parser_expr.c2	/^    [Kind.KW_i64] = 16,$/;"	v
KW_i64	$C2_ROOT/parser/token.c2	/^    [Kind.KW_i64]           = "i64",$/;"	v
KW_i8	$C2_ROOT/parser/c2_parser_expr.c2	/^    [Kind.KW_i8] = 16,$/;"	v
KW_i8	$C2_ROOT/parser/token.c2	/^    [Kind.KW_i8]            = "i8",$/;"	v
KW_if	$C2_ROOT/parser/token.c2	/^    [Kind.KW_if]            = "if",$/;"	v
KW_import	$C2_ROOT/parser/token.c2	/^    [Kind.KW_import]        = "import",$/;"	v
KW_isize	$C2_ROOT/parser/c2_parser_expr.c2	/^    [Kind.KW_isize] = 16,$/;"	v
KW_isize	$C2_ROOT/parser/token.c2	/^    [Kind.KW_isize]         = "isize",$/;"	v
KW_local	$C2_ROOT/parser/token.c2	/^    [Kind.KW_local]         = "local",$/;"	v
KW_module	$C2_ROOT/parser/token.c2	/^    [Kind.KW_module]        = "module",$/;"	v
KW_nil	$C2_ROOT/parser/c2_parser_expr.c2	/^    [Kind.KW_nil] = 12,$/;"	v
KW_nil	$C2_ROOT/parser/token.c2	/^    [Kind.KW_nil]           = "nil",$/;"	v
KW_offsetof	$C2_ROOT/parser/c2_parser_expr.c2	/^    [Kind.KW_offsetof] = 13,$/;"	v
KW_offsetof	$C2_ROOT/parser/token.c2	/^    [Kind.KW_offsetof]      = "offsetof",$/;"	v
KW_public	$C2_ROOT/parser/token.c2	/^    [Kind.KW_public]        = "public",$/;"	v
KW_reg16	$C2_ROOT/parser/token.c2	/^    [Kind.KW_reg16]         = "reg16",$/;"	v
KW_reg32	$C2_ROOT/parser/token.c2	/^    [Kind.KW_reg32]         = "reg32",$/;"	v
KW_reg64	$C2_ROOT/parser/token.c2	/^    [Kind.KW_reg64]         = "reg64",$/;"	v
KW_reg8	$C2_ROOT/parser/token.c2	/^    [Kind.KW_reg8]          = "reg8",$/;"	v
KW_return	$C2_ROOT/parser/token.c2	/^    [Kind.KW_return]        = "return",$/;"	v
KW_sizeof	$C2_ROOT/parser/c2_parser_expr.c2	/^    [Kind.KW_sizeof] = 14,$/;"	v
KW_sizeof	$C2_ROOT/parser/token.c2	/^    [Kind.KW_sizeof]        = "sizeof",$/;"	v
KW_static_assert	$C2_ROOT/parser/token.c2	/^    [Kind.KW_static_assert] = "static_assert",$/;"	v
KW_struct	$C2_ROOT/parser/token.c2	/^    [Kind.KW_struct]        = "struct",$/;"	v
KW_switch	$C2_ROOT/parser/token.c2	/^    [Kind.KW_switch]        = "switch",$/;"	v
KW_template	$C2_ROOT/parser/token.c2	/^    [Kind.KW_template]      = "template",$/;"	v
KW_to_container	$C2_ROOT/parser/c2_parser_expr.c2	/^    [Kind.KW_to_container] = 15,$/;"	v
KW_to_container	$C2_ROOT/parser/token.c2	/^    [Kind.KW_to_container]  = "to_container",$/;"	v
KW_true	$C2_ROOT/parser/c2_parser_expr.c2	/^    [Kind.KW_true] = 11,$/;"	v
KW_true	$C2_ROOT/parser/token.c2	/^    [Kind.KW_true]          = "true",$/;"	v
KW_type	$C2_ROOT/parser/token.c2	/^    [Kind.KW_type]          = "type",$/;"	v
KW_u16	$C2_ROOT/parser/c2_parser_expr.c2	/^    [Kind.KW_u16] = 16,$/;"	v
KW_u16	$C2_ROOT/parser/token.c2	/^    [Kind.KW_u16]           = "u16",$/;"	v
KW_u32	$C2_ROOT/parser/c2_parser_expr.c2	/^    [Kind.KW_u32] = 16,$/;"	v
KW_u32	$C2_ROOT/parser/token.c2	/^    [Kind.KW_u32]           = "u32",$/;"	v
KW_u64	$C2_ROOT/parser/c2_parser_expr.c2	/^    [Kind.KW_u64] = 16,$/;"	v
KW_u64	$C2_ROOT/parser/token.c2	/^    [Kind.KW_u64]           = "u64",$/;"	v
KW_u8	$C2_ROOT/parser/c2_parser_expr.c2	/^    [Kind.KW_u8] = 16,$/;"	v
KW_u8	$C2_ROOT/parser/token.c2	/^    [Kind.KW_u8]            = "u8",$/;"	v
KW_union	$C2_ROOT/parser/token.c2	/^    [Kind.KW_union]         = "union",$/;"	v
KW_usize	$C2_ROOT/parser/c2_parser_expr.c2	/^    [Kind.KW_usize] = 16,$/;"	v
KW_usize	$C2_ROOT/parser/token.c2	/^    [Kind.KW_usize]         = "usize",$/;"	v
KW_void	$C2_ROOT/parser/token.c2	/^    [Kind.KW_void]          = "void",$/;"	v
KW_volatile	$C2_ROOT/parser/token.c2	/^    [Kind.KW_volatile]      = "volatile",$/;"	v
KW_while	$C2_ROOT/parser/token.c2	/^    [Kind.KW_while]         = "while",$/;"	v
Kernel_rwf_t	$C2_ROOT/libs/io_uring/io_uring.c2i	/^type Kernel_rwf_t c_int;$/;"	t
Key	$C2_ROOT/libs/sdl2/sdl.c2i	/^type Key enum i32 {$/;"	t
KeyboardEvent	$C2_ROOT/libs/sdl2/sdl.c2i	/^type KeyboardEvent struct {$/;"	t
Keycode	$C2_ROOT/libs/sdl2/sdl.c2i	/^type Keycode i32;$/;"	t
Keycode	$C2_ROOT/libs/sokol/sokol_app.c2i	/^type Keycode enum i32 @(cname="sapp_keycode") {$/;"	t
Keycode	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^type Keycode enum i32 @(cname="sapp_keycode") {$/;"	t
Keymod	$C2_ROOT/libs/sdl2/sdl.c2i	/^type Keymod enum u32 {$/;"	t
Keysym	$C2_ROOT/libs/sdl2/sdl.c2i	/^type Keysym struct {$/;"	t
Kind	$C2_ROOT/common/build_target.c2	/^public type Kind enum u8 {$/;"	t
Kind	$C2_ROOT/common/component.c2	/^public type Kind enum u8 {$/;"	t
Kind	$C2_ROOT/compiler/c2recipe_parser.c2	/^type Kind enum u8 {$/;"	t
Kind	$C2_ROOT/ir_examples/global_vars.c2	/^type Kind enum u8 { A, B, C }$/;"	t
Kind	$C2_ROOT/parser/token.c2	/^public type Kind enum u8 {$/;"	t
LAnd	$C2_ROOT/common/c2_prec.c2	/^    [BinaryOpcode.LAnd]        = LogicalAndOr,$/;"	v
LAnd	$C2_ROOT/common/c_prec.c2	/^    [BinaryOpcode.LAnd]        = LogicalAnd,$/;"	v
LBrace	$C2_ROOT/parser/token.c2	/^    [Kind.LBrace]           = "{",$/;"	v
LOr	$C2_ROOT/common/c2_prec.c2	/^    [BinaryOpcode.LOr]         = LogicalAndOr,$/;"	v
LOr	$C2_ROOT/common/c_prec.c2	/^    [BinaryOpcode.LOr]         = LogicalOr,$/;"	v
LParen	$C2_ROOT/parser/c2_parser_expr.c2	/^    [Kind.LParen] = 6,$/;"	v
LParen	$C2_ROOT/parser/token.c2	/^    [Kind.LParen]           = "(",$/;"	v
LSquare	$C2_ROOT/parser/token.c2	/^    [Kind.LSquare]          = "[",$/;"	v
LUA_INTEGER	$C2_ROOT/libs/lua/lua.c2i	/^type LUA_INTEGER c_int;$/;"	t
LUA_KCONTEXT	$C2_ROOT/libs/lua/lua.c2i	/^type LUA_KCONTEXT c_longlong;$/;"	t
LUA_NUMBER	$C2_ROOT/libs/lua/lua.c2i	/^type LUA_NUMBER c_double;$/;"	t
LUA_UNSIGNED	$C2_ROOT/libs/lua/lua.c2i	/^type LUA_UNSIGNED c_uint;$/;"	t
Label	$C2_ROOT/analyser/label_vector.c2	/^public type Label struct {$/;"	t
LabelStmt	$C2_ROOT/ast/label_stmt.c2	/^public type LabelStmt struct @(opaque) {$/;"	t
LabelStmtBits	$C2_ROOT/ast/label_stmt.c2	/^type LabelStmtBits struct {$/;"	t
LabelVector	$C2_ROOT/analyser/label_vector.c2	/^public type LabelVector struct {$/;"	t
Ldiv_t	$C2_ROOT/libs/libc/stdlib.c2i	/^type Ldiv_t struct @(cname="Ldiv_t") {$/;"	t
Lengths	$C2_ROOT/generator/c2refs.c2	/^type Lengths struct {$/;"	t
Less	$C2_ROOT/parser/c2_parser_expr.c2	/^    [Kind.Less]         = Relational,$/;"	v
Less	$C2_ROOT/parser/token.c2	/^    [Kind.Less]             = "<",$/;"	v
LessEqual	$C2_ROOT/common/c2_prec.c2	/^    [BinaryOpcode.LessEqual]   = Relational,$/;"	v
LessEqual	$C2_ROOT/common/c_prec.c2	/^    [BinaryOpcode.LessEqual]   = Relative,$/;"	v
LessEqual	$C2_ROOT/parser/c2_parser_expr.c2	/^    [Kind.LessEqual]    = Relational,$/;"	v
LessEqual	$C2_ROOT/parser/token.c2	/^    [Kind.LessEqual]        = "<=",$/;"	v
LessLess	$C2_ROOT/parser/c2_parser_expr.c2	/^    [Kind.LessLess] = Shift,$/;"	v
LessLess	$C2_ROOT/parser/token.c2	/^    [Kind.LessLess]         = "<<",$/;"	v
LessLessEqual	$C2_ROOT/parser/c2_parser_expr.c2	/^    [Kind.LessLessEqual]  = ShlAssign,$/;"	v
LessLessEqual	$C2_ROOT/parser/token.c2	/^    [Kind.LessLessEqual]    = "<<=",$/;"	v
LessThan	$C2_ROOT/common/c2_prec.c2	/^    [BinaryOpcode.LessThan]    = Relational,$/;"	v
LessThan	$C2_ROOT/common/c_prec.c2	/^    [BinaryOpcode.LessThan]    = Relative,$/;"	v
Level	$C2_ROOT/analyser/scope.c2	/^type Level struct {$/;"	t
Lib	$C2_ROOT/common/library_list.c2	/^public type Lib struct {$/;"	t
Limit	$C2_ROOT/analyser_utils/ctv_analyser.c2	/^type Limit struct {$/;"	t
Limits	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type Limits struct @(cname="sg_limits") {$/;"	t
Limits	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type Limits struct @(cname="sg_limits") {$/;"	t
LineComment	$C2_ROOT/parser/token.c2	/^    [Kind.LineComment]      = "l-comment",$/;"	v
LineCounter	$C2_ROOT/plugins/refs_generator.c2	/^type LineCounter struct {$/;"	t
Link	$C2_ROOT/generator/c2refs.c2	/^type Link struct {$/;"	t
Links	$C2_ROOT/generator/c2refs.c2	/^type Links struct {$/;"	t
List	$C2_ROOT/analyser/incr_array_list.c2	/^public type List struct {$/;"	t
List	$C2_ROOT/analyser/struct_func_list.c2	/^public type List struct {$/;"	t
List	$C2_ROOT/common/component.c2	/^public type List struct {$/;"	t
List	$C2_ROOT/common/index_list.c2	/^public type List struct {$/;"	t
List	$C2_ROOT/common/library_list.c2	/^public type List struct {$/;"	t
List	$C2_ROOT/common/module_list.c2	/^public type List struct {$/;"	t
List	$C2_ROOT/common/string_list.c2	/^public type List struct {$/;"	t
List	$C2_ROOT/common/value_maplist.c2	/^public type List struct {$/;"	t
List	$C2_ROOT/parser/case_list.c2	/^public type List struct {$/;"	t
List	$C2_ROOT/parser/expr_list.c2	/^public type List struct {$/;"	t
List	$C2_ROOT/parser/stmt_list.c2	/^public type List struct {$/;"	t
LiveVector	$C2_ROOT/ir/register_alloc.c2	/^type LiveVector struct  {$/;"	t
LoadAction	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type LoadAction enum u32 @(cname="sg_load_action") {$/;"	t
LoadAction	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type LoadAction enum u32 @(cname="sg_load_action") {$/;"	t
LoadFn	$C2_ROOT/plugins/plugin_info.c2	/^public type LoadFn fn void*(const char* options, bool console_timing, bool console_debug);$/;"	t
Loc	$C2_ROOT/plugins/refs_generator.c2	/^type Loc struct {$/;"	t
Loc	$C2_ROOT/tools/common/replacer.c2	/^type Loc struct {$/;"	t
Locals	$C2_ROOT/generator/ir/ir_generator_locals.c2	/^public type Locals struct {$/;"	t
Location	$C2_ROOT/common/source_mgr.c2	/^public type Location struct {$/;"	t
Location	$C2_ROOT/common/yaml/yaml_tokenizer.c2	/^type Location struct {$/;"	t
LogCb	$C2_ROOT/libs/sokol/sokol_app.c2i	/^type LogCb fn void(const char*, u32, u32, const char*, u32, const char*, void*);$/;"	t
LogCb	$C2_ROOT/libs/sokol/sokol_audio.c2i	/^type LogCb fn void(const char*, u32, u32, const char*, u32, const char*, void*);$/;"	t
LogCb	$C2_ROOT/libs/sokol/sokol_debugtext.c2i	/^type LogCb fn void(const char*, u32, u32, const char*, u32, const char*, void*);$/;"	t
LogCb	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type LogCb fn void(const char*, u32, u32, const char*, u32, const char*, void*);$/;"	t
LogCb	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^type LogCb fn void(const char*, u32, u32, const char*, u32, const char*, void*);$/;"	t
LogCb	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^type LogCb fn void(const char*, u32, u32, const char*, u32, const char*, void*);$/;"	t
LogCb	$C2_ROOT/libs/sokol_/sokol_audio.c2i	/^type LogCb fn void(const char*, u32, u32, const char*, u32, const char*, void*);$/;"	t
LogCb	$C2_ROOT/libs/sokol_/sokol_debugtext.c2i	/^type LogCb fn void(const char*, u32, u32, const char*, u32, const char*, void*);$/;"	t
LogCb	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type LogCb fn void(const char*, u32, u32, const char*, u32, const char*, void*);$/;"	t
LogCb	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^type LogCb fn void(const char*, u32, u32, const char*, u32, const char*, void*);$/;"	t
LogFn	$C2_ROOT/output/unit_test/libunit_test.dylib	/^public type LogFn fn void (const char* fmt, va_list args);$/;"	t
LogFn	$C2_ROOT/plugins/unit_test1.c2	/^public type LogFn fn void (const char* fmt, va_list args);$/;"	t
LogItem	$C2_ROOT/libs/sokol/sokol_app.c2i	/^type LogItem enum i32 @(cname="sapp_log_item") {$/;"	t
LogItem	$C2_ROOT/libs/sokol/sokol_audio.c2i	/^type LogItem enum i32 @(cname="saudio_log_item") {$/;"	t
LogItem	$C2_ROOT/libs/sokol/sokol_debugtext.c2i	/^type LogItem enum i32 @(cname="sdtx_log_item_t") {$/;"	t
LogItem	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type LogItem enum i32 @(cname="sg_log_item") {$/;"	t
LogItem	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^type LogItem enum i32 @(cname="sgl_log_item_t") {$/;"	t
LogItem	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^type LogItem enum i32 @(cname="sapp_log_item") {$/;"	t
LogItem	$C2_ROOT/libs/sokol_/sokol_audio.c2i	/^type LogItem enum i32 @(cname="saudio_log_item") {$/;"	t
LogItem	$C2_ROOT/libs/sokol_/sokol_debugtext.c2i	/^type LogItem enum i32 @(cname="sdtx_log_item_t") {$/;"	t
LogItem	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type LogItem enum i32 @(cname="sg_log_item") {$/;"	t
LogItem	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^type LogItem enum i32 @(cname="sgl_log_item_t") {$/;"	t
Logger	$C2_ROOT/libs/sokol/sokol_app.c2i	/^type Logger struct @(cname="sapp_logger") {$/;"	t
Logger	$C2_ROOT/libs/sokol/sokol_audio.c2i	/^type Logger struct @(cname="saudio_logger") {$/;"	t
Logger	$C2_ROOT/libs/sokol/sokol_debugtext.c2i	/^type Logger struct @(cname="sdtx_logger_t") {$/;"	t
Logger	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type Logger struct @(cname="sg_logger") {$/;"	t
Logger	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^type Logger struct @(cname="sgl_logger_t") {$/;"	t
Logger	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^type Logger struct @(cname="sapp_logger") {$/;"	t
Logger	$C2_ROOT/libs/sokol_/sokol_audio.c2i	/^type Logger struct @(cname="saudio_logger") {$/;"	t
Logger	$C2_ROOT/libs/sokol_/sokol_debugtext.c2i	/^type Logger struct @(cname="sdtx_logger_t") {$/;"	t
Logger	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type Logger struct @(cname="sg_logger") {$/;"	t
Logger	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^type Logger struct @(cname="sgl_logger_t") {$/;"	t
MainMarker	$C2_ROOT/analyser/module_analyser.c2	/^type MainMarker struct {$/;"	t
Map	$C2_ROOT/ir/live_map.c2	/^public type Map struct @(opaque) {$/;"	t
Map	$C2_ROOT/ir/slot_writes_map.c2	/^public type Map struct @(opaque) {$/;"	t
Map	$C2_ROOT/libs/libc/net_if.c2i	/^type Map struct @(cname="ifmap") {$/;"	t
MapFile	$C2_ROOT/generator/c2refs.c2	/^type MapFile struct {$/;"	t
Mat4	$C2_ROOT/libs/sokol/sokol_shape.c2i	/^type Mat4 struct @(cname="sshape_mat4_t") {$/;"	t
Mat4	$C2_ROOT/libs/sokol_/sokol_shape.c2i	/^type Mat4 struct @(cname="sshape_mat4_t") {$/;"	t
MatchFn	$C2_ROOT/generator/radix_tree/radix_tree.c2	/^public type MatchFn fn void (void* arg, const char* text, u32 value);$/;"	t
Md_type_t	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^type Md_type_t enum u8 @(cname="mbedtls_md_type_t") {$/;"	t
MemberConversion	$C2_ROOT/ast/member_expr.c2	/^public type MemberConversion enum u8 {$/;"	t
MemberExpr	$C2_ROOT/ast/member_expr.c2	/^public type MemberExpr struct @(opaque) {$/;"	t
MemberExprBits	$C2_ROOT/ast/member_expr.c2	/^type MemberExprBits struct {$/;"	t
MemberRef	$C2_ROOT/ast/member_expr.c2	/^type MemberRef union {$/;"	t
MetalEnvironment	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type MetalEnvironment struct @(cname="sg_metal_environment") {$/;"	t
MetalEnvironment	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type MetalEnvironment struct @(cname="sg_metal_environment") {$/;"	t
MetalSwapchain	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type MetalSwapchain struct @(cname="sg_metal_swapchain") {$/;"	t
MetalSwapchain	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type MetalSwapchain struct @(cname="sg_metal_swapchain") {$/;"	t
Mgr	$C2_ROOT/compiler/plugin_mgr.c2	/^public type Mgr struct @(opaque) {$/;"	t
Minus	$C2_ROOT/parser/c2_parser_expr.c2	/^    [Kind.Minus] = Additive,$/;"	v
Minus	$C2_ROOT/parser/token.c2	/^    [Kind.Minus]            = "-",$/;"	v
MinusEqual	$C2_ROOT/parser/c2_parser_expr.c2	/^    [Kind.MinusEqual]     = SubAssign,$/;"	v
MinusEqual	$C2_ROOT/parser/token.c2	/^    [Kind.MinusEqual]       = "-=",$/;"	v
MinusMinus	$C2_ROOT/parser/c2_parser_expr.c2	/^    [Kind.MinusMinus] = 7,$/;"	v
MinusMinus	$C2_ROOT/parser/token.c2	/^    [Kind.MinusMinus]       = "--",$/;"	v
Mix_Chunk	$C2_ROOT/libs/sdl2_mixer/sdl_mixer.c2i	/^type Mix_Chunk struct {$/;"	t
Mix_CloseAudio	$C2_ROOT/libs/sdl2_mixer/sdl_mixer.c2i	/^fn void Mix_CloseAudio() @(cname="Mix_CloseAudio");$/;"	f
Mix_FadeInMusic	$C2_ROOT/libs/sdl2_mixer/sdl_mixer.c2i	/^fn c_int Mix_FadeInMusic(Mix_Music* music, c_int loops, c_int ms) @(cname="Mix_FadeInMusic");$/;"	f
Mix_FadeOutChannel	$C2_ROOT/libs/sdl2_mixer/sdl_mixer.c2i	/^fn c_int Mix_FadeOutChannel(c_int which, c_int ms) @(cname="Mix_FadeOutChannel");$/;"	f
Mix_FadeOutMusic	$C2_ROOT/libs/sdl2_mixer/sdl_mixer.c2i	/^fn c_int Mix_FadeOutMusic(c_int ms) @(cname="Mix_FadeOutMusic");$/;"	f
Mix_FreeChunk	$C2_ROOT/libs/sdl2_mixer/sdl_mixer.c2i	/^fn void Mix_FreeChunk(Mix_Chunk* chunk) @(cname="Mix_FreeChunk");$/;"	f
Mix_FreeMusic	$C2_ROOT/libs/sdl2_mixer/sdl_mixer.c2i	/^fn void Mix_FreeMusic(Mix_Music* music) @(cname="Mix_FreeMusic");$/;"	f
Mix_HaltChannel	$C2_ROOT/libs/sdl2_mixer/sdl_mixer.c2i	/^fn c_int Mix_HaltChannel(c_int channel) @(cname="Mix_HaltChannel");$/;"	f
Mix_HaltMusic	$C2_ROOT/libs/sdl2_mixer/sdl_mixer.c2i	/^fn c_int Mix_HaltMusic() @(cname="Mix_HaltMusic");$/;"	f
Mix_LoadMUS	$C2_ROOT/libs/sdl2_mixer/sdl_mixer.c2i	/^fn Mix_Music* Mix_LoadMUS(const char* file) @(cname="Mix_LoadMUS");$/;"	f
Mix_LoadWAV_RW	$C2_ROOT/libs/sdl2_mixer/sdl_mixer.c2i	/^fn Mix_Chunk* Mix_LoadWAV_RW(sdl.RWops* src, c_int freesrc) @(cname="Mix_LoadWAV_RW");$/;"	f
Mix_Music	$C2_ROOT/libs/sdl2_mixer/sdl_mixer.c2i	/^type Mix_Music  struct @(opaque, cname="Mix_Music");$/;"	t
Mix_OpenAudio	$C2_ROOT/libs/sdl2_mixer/sdl_mixer.c2i	/^fn c_int Mix_OpenAudio(c_int frequency, u16 format, c_int channels, c_int chunksize); \/\/@(cnam/;"	f
Mix_PlayChannelTimed	$C2_ROOT/libs/sdl2_mixer/sdl_mixer.c2i	/^fn c_int Mix_PlayChannelTimed(c_int channel, Mix_Chunk* chunk, c_int loops, c_int ticks);$/;"	f
Mix_PlayMusic	$C2_ROOT/libs/sdl2_mixer/sdl_mixer.c2i	/^fn c_int Mix_PlayMusic(Mix_Music* music, c_int loops) @(cname="Mix_PlayMusic");$/;"	f
Mix_SetDistance	$C2_ROOT/libs/sdl2_mixer/sdl_mixer.c2i	/^fn c_int Mix_SetDistance(c_int channel, u8 distance) @(cname="Mix_SetDistance");$/;"	f
Mix_SetPanning	$C2_ROOT/libs/sdl2_mixer/sdl_mixer.c2i	/^fn c_int Mix_SetPanning(c_int channel, u8 left, u8 right) @(cname="Mix_SetPanning");$/;"	f
Mix_SetPosition	$C2_ROOT/libs/sdl2_mixer/sdl_mixer.c2i	/^fn c_int Mix_SetPosition(c_int channel, i16 angle, u8 distance) @(cname="Mix_SetPosition");$/;"	f
Mode	$C2_ROOT/libs/libc/sys_stat.c2i	/^type Mode c_uint;$/;"	t
Mode	$C2_ROOT/tools/tester/test_db.c2	/^public type Mode enum u8 {$/;"	t
Module	$C2_ROOT/ast/module.c2	/^public type Module struct @(opaque) {$/;"	t
ModuleSorter	$C2_ROOT/analyser/module_sorter.c2	/^type ModuleSorter struct {$/;"	t
ModuleType	$C2_ROOT/ast/module_type.c2	/^public type ModuleType struct @(opaque) {$/;"	t
MouseButtonEvent	$C2_ROOT/libs/sdl2/sdl.c2i	/^type MouseButtonEvent struct {$/;"	t
MouseCursor	$C2_ROOT/libs/sokol/sokol_app.c2i	/^type MouseCursor enum i32 @(cname="sapp_mouse_cursor") {$/;"	t
MouseCursor	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^type MouseCursor enum i32 @(cname="sapp_mouse_cursor") {$/;"	t
MouseMotionEvent	$C2_ROOT/libs/sdl2/sdl.c2i	/^type MouseMotionEvent struct {$/;"	t
MouseWheelEvent	$C2_ROOT/libs/sdl2/sdl.c2i	/^type MouseWheelEvent struct {$/;"	t
Mousebutton	$C2_ROOT/libs/sokol/sokol_app.c2i	/^type Mousebutton enum i32 @(cname="sapp_mousebutton") {$/;"	t
Mousebutton	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^type Mousebutton enum i32 @(cname="sapp_mousebutton") {$/;"	t
Mpi	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^type Mpi struct @(cname="mbedtls_mpi") {$/;"	t
Mpi_uint	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^type Mpi_uint c_ulonglong;$/;"	t
MtlBufferInfo	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type MtlBufferInfo struct @(cname="sg_mtl_buffer_info") {$/;"	t
MtlBufferInfo	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type MtlBufferInfo struct @(cname="sg_mtl_buffer_info") {$/;"	t
MtlImageInfo	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type MtlImageInfo struct @(cname="sg_mtl_image_info") {$/;"	t
MtlImageInfo	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type MtlImageInfo struct @(cname="sg_mtl_image_info") {$/;"	t
MtlPipelineInfo	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type MtlPipelineInfo struct @(cname="sg_mtl_pipeline_info") {$/;"	t
MtlPipelineInfo	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type MtlPipelineInfo struct @(cname="sg_mtl_pipeline_info") {$/;"	t
MtlSamplerInfo	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type MtlSamplerInfo struct @(cname="sg_mtl_sampler_info") {$/;"	t
MtlSamplerInfo	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type MtlSamplerInfo struct @(cname="sg_mtl_sampler_info") {$/;"	t
MtlShaderInfo	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type MtlShaderInfo struct @(cname="sg_mtl_shader_info") {$/;"	t
MtlShaderInfo	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type MtlShaderInfo struct @(cname="sg_mtl_shader_info") {$/;"	t
MtlShaderThreadsPerThreadgroup	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type MtlShaderThreadsPerThreadgroup struct @(cname="sg_mtl_shader_threads_per_threadgroup") {$/;"	t
MtlShaderThreadsPerThreadgroup	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type MtlShaderThreadsPerThreadgroup struct @(cname="sg_mtl_shader_threads_per_threadgroup") {$/;"	t
MulAssign	$C2_ROOT/common/c2_prec.c2	/^    [BinaryOpcode.MulAssign]   = Assignment,$/;"	v
MulAssign	$C2_ROOT/common/c_prec.c2	/^    [BinaryOpcode.MulAssign]   = Assignment,$/;"	v
Multiply	$C2_ROOT/common/c2_prec.c2	/^    [BinaryOpcode.Multiply]    = Multiplicative,$/;"	v
Multiply	$C2_ROOT/common/c_prec.c2	/^    [BinaryOpcode.Multiply]    = Multiplicative,$/;"	v
Mutex	$C2_ROOT/libs/pthread/pthread.c2i	/^type Mutex union @(cname="pthread_mutex_t") {$/;"	t
MutexAttr	$C2_ROOT/libs/pthread/pthread.c2i	/^type MutexAttr union @(cname="pthread_mutexattr_t") {$/;"	t
Name	$C2_ROOT/libs/libc/sys_utsname.c2i	/^type Name struct @(cname="utsname") {$/;"	t
NameVector	$C2_ROOT/analyser/name_vector.c2	/^public type NameVector struct {$/;"	t
Net_context	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^type Net_context struct @(cname="mbedtls_net_context") {$/;"	t
NilExpr	$C2_ROOT/ast/nil_expr.c2	/^public type NilExpr struct @(opaque) {$/;"	t
NoReturn	$C2_ROOT/ast_utils/attr.c2	/^    [AttrKind.NoReturn]     = AttrReq.NoArg,$/;"	v
NoTypeDef	$C2_ROOT/ast_utils/attr.c2	/^    [AttrKind.NoTypeDef]    = AttrReq.NoArg,$/;"	v
Node	$C2_ROOT/common/yaml/yaml_data.c2	/^public type Node struct @(opaque) {$/;"	t
Node	$C2_ROOT/generator/radix_tree/radix_tree.c2	/^type Node struct @(aligned=4) {$/;"	t
NodeKind	$C2_ROOT/common/yaml/yaml_data.c2	/^type NodeKind enum u8 {$/;"	t
Nodes	$C2_ROOT/generator/radix_tree/radix_tree.c2	/^type Nodes struct {$/;"	t
None	$C2_ROOT/parser/token.c2	/^    [Kind.None]             = "none",$/;"	v
NotEqual	$C2_ROOT/common/c2_prec.c2	/^    [BinaryOpcode.NotEqual]    = Relational,$/;"	v
NotEqual	$C2_ROOT/common/c_prec.c2	/^    [BinaryOpcode.NotEqual]    = Equality,$/;"	v
Number	$C2_ROOT/libs/lua/lua.c2i	/^type Number LUA_NUMBER @(cname="lua_Number");$/;"	t
Offset	$C2_ROOT/libs/libc/stdio.c2i	/^type Offset u64 @(cname="off_t");$/;"	t
Offset	$C2_ROOT/libs/libc/sys_mman.c2i	/^type Offset u64 @(cname="off_t");$/;"	t
Offset	$C2_ROOT/libs/libc/sys_sendfile.c2i	/^type Offset u64 @(cname="off_t");$/;"	t
OffsetOfData	$C2_ROOT/ast/builtin_expr.c2	/^type OffsetOfData struct {$/;"	t
OnDecl	$C2_ROOT/generator/c/dep_finder.c2	/^public type OnDecl fn void (void* arg, Decl* d);$/;"	t
OnExitFn	$C2_ROOT/libs/libc/stdlib.c2i	/^type OnExitFn fn void(i32, void*);$/;"	t
OnExprFn	$C2_ROOT/generator/ir/array_init_sorter.c2	/^public type OnExprFn fn void (void* arg, const ast.Expr* e, u32 elem_size);$/;"	t
OnRef	$C2_ROOT/generator/ast_visitor.c2	/^public type OnRef fn void (void* arg, const Ref* ref);$/;"	t
OnZeroFn	$C2_ROOT/generator/ir/array_init_sorter.c2	/^public type OnZeroFn fn void (void* arg, u32 size);$/;"	t
Op	$C2_ROOT/libs/io_uring/io_uring.c2i	/^type Op enum u8 {$/;"	t
Opaque	$C2_ROOT/ast_utils/attr.c2	/^    [AttrKind.Opaque]       = AttrReq.NoArg,$/;"	v
OpaqueErrorfn	$C2_ROOT/ast/instantiator.c2	/^public type OpaqueErrorfn fn void (void* arg, src_loc.SrcLoc loc, Decl* decl);$/;"	t
Operand	$C2_ROOT/parser/c2_tokenizer.c2	/^type Operand struct {$/;"	t
Options	$C2_ROOT/compiler/compiler.c2	/^public type Options struct {$/;"	t
Options	$C2_ROOT/compiler/main.c2	/^type Options struct {$/;"	t
Options	$C2_ROOT/tools/c2rename.c2	/^type Options struct {$/;"	t
Options	$C2_ROOT/tools/c2tags.c2	/^type Options struct {$/;"	t
Or	$C2_ROOT/common/c2_prec.c2	/^    [BinaryOpcode.Or]          = Bitwise,$/;"	v
Or	$C2_ROOT/common/c_prec.c2	/^    [BinaryOpcode.Or]          = Or,$/;"	v
OrAssign	$C2_ROOT/common/c2_prec.c2	/^    [BinaryOpcode.OrAssign]    = Assignment,$/;"	v
OrAssign	$C2_ROOT/common/c_prec.c2	/^    [BinaryOpcode.OrAssign]    = Assignment,$/;"	v
Packed	$C2_ROOT/ast_utils/attr.c2	/^    [AttrKind.Packed]       = AttrReq.NoArg,$/;"	v
Palette	$C2_ROOT/libs/sdl2/sdl.c2i	/^type Palette struct @(cname="SDL_Palette") {$/;"	t
Params	$C2_ROOT/libs/io_uring/io_uring.c2i	/^type Params struct @(cname="io_uring_params") {$/;"	t
ParenExpr	$C2_ROOT/ast/paren_expr.c2	/^public type ParenExpr struct @(opaque) {$/;"	t
ParenExprBits	$C2_ROOT/ast/paren_expr.c2	/^type ParenExprBits struct {$/;"	t
Parser	$C2_ROOT/common/yaml/yaml_parser.c2	/^public type Parser struct @(opaque) {$/;"	t
Parser	$C2_ROOT/compiler/c2recipe_parser.c2	/^type Parser struct {$/;"	t
Parser	$C2_ROOT/parser/c2_parser.c2	/^public type Parser struct @(opaque) {$/;"	t
Pass	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type Pass struct @(cname="sg_pass") {$/;"	t
Pass	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type Pass struct @(cname="sg_pass") {$/;"	t
PassAction	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type PassAction struct @(cname="sg_pass_action") {$/;"	t
PassAction	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type PassAction struct @(cname="sg_pass_action") {$/;"	t
PathInfo	$C2_ROOT/common/utils.c2	/^public type PathInfo struct {$/;"	t
Percent	$C2_ROOT/parser/c2_parser_expr.c2	/^    [Kind.Percent] = Multiplicative,$/;"	v
Percent	$C2_ROOT/parser/token.c2	/^    [Kind.Percent]          = "%",$/;"	v
PercentEqual	$C2_ROOT/parser/c2_parser_expr.c2	/^    [Kind.PercentEqual]   = RemAssign,$/;"	v
PercentEqual	$C2_ROOT/parser/token.c2	/^    [Kind.PercentEqual]     = "%=",$/;"	v
PhiClause	$C2_ROOT/ir/phi_list.c2	/^public type PhiClause struct {$/;"	t
PhiClauses	$C2_ROOT/ir/phi_list.c2	/^public type PhiClauses struct {$/;"	t
PhiList	$C2_ROOT/ir/phi_list.c2	/^public type PhiList struct {$/;"	t
Pid	$C2_ROOT/libs/libc/unistd.c2i	/^type Pid c_int @(cname="pid_t");$/;"	t
Pipe	$C2_ROOT/parser/c2_parser_expr.c2	/^    [Kind.Pipe]  = Bitwise,$/;"	v
Pipe	$C2_ROOT/parser/token.c2	/^    [Kind.Pipe]             = "|",$/;"	v
PipeEqual	$C2_ROOT/parser/c2_parser_expr.c2	/^    [Kind.PipeEqual]      = OrAssign,$/;"	v
PipeEqual	$C2_ROOT/parser/token.c2	/^    [Kind.PipeEqual]        = "|=",$/;"	v
PipePipe	$C2_ROOT/parser/c2_parser_expr.c2	/^    [Kind.PipePipe] = LogicalAndOr,$/;"	v
PipePipe	$C2_ROOT/parser/token.c2	/^    [Kind.PipePipe]         = "||",$/;"	v
Pipeline	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type Pipeline struct @(cname="sg_pipeline") {$/;"	t
Pipeline	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^type Pipeline struct @(cname="sgl_pipeline") {$/;"	t
Pipeline	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type Pipeline struct @(cname="sg_pipeline") {$/;"	t
Pipeline	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^type Pipeline struct @(cname="sgl_pipeline") {$/;"	t
PipelineDesc	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type PipelineDesc struct @(cname="sg_pipeline_desc") {$/;"	t
PipelineDesc	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type PipelineDesc struct @(cname="sg_pipeline_desc") {$/;"	t
PipelineInfo	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type PipelineInfo struct @(cname="sg_pipeline_info") {$/;"	t
PipelineInfo	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type PipelineInfo struct @(cname="sg_pipeline_info") {$/;"	t
PixelFormat	$C2_ROOT/libs/sdl2/sdl.c2i	/^type PixelFormat struct @(cname="SDL_PixelFormat") {$/;"	t
PixelFormat	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type PixelFormat enum u32 @(cname="sg_pixel_format") {$/;"	t
PixelFormat	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type PixelFormat enum u32 @(cname="sg_pixel_format") {$/;"	t
PixelformatInfo	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type PixelformatInfo struct @(cname="sg_pixelformat_info") {$/;"	t
PixelformatInfo	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type PixelformatInfo struct @(cname="sg_pixelformat_info") {$/;"	t
Pk_context	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^type Pk_context struct @(cname="mbedtls_pk_context") {$/;"	t
Pk_info_t	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^type Pk_info_t struct @(opaque, cname="mbedtls_pk_info_t");$/;"	t
Pk_type_t	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^type Pk_type_t enum u8 @(cname="mbedtls_pk_type_t") {$/;"	t
Plane	$C2_ROOT/libs/sokol/sokol_shape.c2i	/^type Plane struct @(cname="sshape_plane_t") {$/;"	t
Plane	$C2_ROOT/libs/sokol_/sokol_shape.c2i	/^type Plane struct @(cname="sshape_plane_t") {$/;"	t
Plugin	$C2_ROOT/common/build_file.c2	/^public type Plugin struct {$/;"	t
Plugin	$C2_ROOT/common/build_target.c2	/^public type Plugin struct {$/;"	t
Plugin	$C2_ROOT/compiler/plugin_mgr.c2	/^type Plugin struct {$/;"	t
Plugin	$C2_ROOT/plugins/deps_generator_plugin.c2	/^type Plugin struct {$/;"	t
Plugin	$C2_ROOT/plugins/git_version_plugin.c2	/^type Plugin struct {$/;"	t
Plugin	$C2_ROOT/plugins/plugin_info.c2	/^public type Plugin struct @(unused) {$/;"	t
Plugin	$C2_ROOT/plugins/refs_generator_plugin.c2	/^type Plugin struct {$/;"	t
Plugin	$C2_ROOT/plugins/shell_cmd_plugin.c2	/^type Plugin struct {$/;"	t
Plugin	$C2_ROOT/plugins/unit_test_plugin.c2	/^type Plugin struct {$/;"	t
PluginFn	$C2_ROOT/compiler/compiler.c2	/^public type PluginFn fn void (void* arg);$/;"	t
PluginHandler	$C2_ROOT/compiler/compiler.c2	/^public type PluginHandler struct {$/;"	t
PluginList	$C2_ROOT/common/build_target.c2	/^public type PluginList struct {$/;"	t
Plus	$C2_ROOT/parser/c2_parser_expr.c2	/^    [Kind.Plus] = 7,$/;"	v
Plus	$C2_ROOT/parser/token.c2	/^    [Kind.Plus]             = "+",$/;"	v
PlusEqual	$C2_ROOT/parser/c2_parser_expr.c2	/^    [Kind.PlusEqual]      = AddAssign,$/;"	v
PlusEqual	$C2_ROOT/parser/token.c2	/^    [Kind.PlusEqual]        = "+=",$/;"	v
PlusPlus	$C2_ROOT/parser/c2_parser_expr.c2	/^    [Kind.PlusPlus] = 7,$/;"	v
PlusPlus	$C2_ROOT/parser/token.c2	/^    [Kind.PlusPlus]         = "++",$/;"	v
Point	$C2_ROOT/ir_examples/types.c2	/^type Point struct {$/;"	t
Point	$C2_ROOT/libs/sdl2/sdl.c2i	/^type Point struct @(cname="SDL_Point") {$/;"	t
PointerPool	$C2_ROOT/ast/pointer_pool.c2	/^type PointerPool struct {$/;"	t
PointerPoolSlot	$C2_ROOT/ast/pointer_pool.c2	/^type PointerPoolSlot struct {$/;"	t
PointerType	$C2_ROOT/ast/pointer_type.c2	/^public type PointerType struct @(opaque) {$/;"	t
Pollfd	$C2_ROOT/libs/libc/libc_poll.c2i	/^type Pollfd struct @(cname="pollfd") {$/;"	t
Pool	$C2_ROOT/ast_utils/string_pool.c2	/^public type Pool struct @(opaque) {$/;"	t
PostAnalysisFn	$C2_ROOT/plugins/plugin_info.c2	/^public type PostAnalysisFn fn void(void* arg);$/;"	t
PostParseFn	$C2_ROOT/plugins/plugin_info.c2	/^public type PostParseFn fn void(void* arg);$/;"	t
Prec	$C2_ROOT/common/c2_prec.c2	/^public type Prec enum u8 {$/;"	t
PrimitiveType	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type PrimitiveType enum u32 @(cname="sg_primitive_type") {$/;"	t
PrimitiveType	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type PrimitiveType enum u32 @(cname="sg_primitive_type") {$/;"	t
PrintHelper	$C2_ROOT/ir/print.c2	/^type PrintHelper struct {$/;"	t
PrintfFormat	$C2_ROOT/ast_utils/attr.c2	/^    [AttrKind.PrintfFormat] = AttrReq.NoArg,$/;"	v
Pthread	$C2_ROOT/libs/pthread/pthread.c2i	/^type Pthread c_ulong @(cname="pthread_t");$/;"	t
PthreadAttr	$C2_ROOT/libs/pthread/pthread.c2i	/^type PthreadAttr struct @(cname="pthread_attr_t") {$/;"	t
Pure	$C2_ROOT/ast_utils/attr.c2	/^    [AttrKind.Pure]         = AttrReq.NoArg,$/;"	v
QualType	$C2_ROOT/ast/qualtype.c2	/^public type QualType struct {$/;"	t
Question	$C2_ROOT/parser/c2_parser_expr.c2	/^    [Kind.Question] = Conditional,$/;"	v
Question	$C2_ROOT/parser/token.c2	/^    [Kind.Question]         = "?",$/;"	v
QueueWorker	$C2_ROOT/ir/work_queue.c2	/^type QueueWorker struct {$/;"	t
RBrace	$C2_ROOT/parser/token.c2	/^    [Kind.RBrace]           = "}",$/;"	v
RParen	$C2_ROOT/parser/token.c2	/^    [Kind.RParen]           = ")",$/;"	v
RSquare	$C2_ROOT/parser/token.c2	/^    [Kind.RSquare]          = "]",$/;"	v
RWops	$C2_ROOT/libs/sdl2/sdl.c2i	/^type RWops struct @(opaque, cname="SDL_RWops");$/;"	t
Radix	$C2_ROOT/ast_utils/number_radix.c2	/^public type Radix enum u8 {$/;"	t
Random_data	$C2_ROOT/libs/libc/stdlib.c2i	/^type Random_data struct @(opaque, cname="random_data");$/;"	t
Range	$C2_ROOT/libs/sokol/sokol_app.c2i	/^type Range struct @(cname="sapp_range") {$/;"	t
Range	$C2_ROOT/libs/sokol/sokol_debugtext.c2i	/^type Range struct @(cname="sdtx_range") {$/;"	t
Range	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type Range struct @(cname="sg_range") {$/;"	t
Range	$C2_ROOT/libs/sokol/sokol_shape.c2i	/^type Range struct @(cname="sshape_range") {$/;"	t
Range	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^type Range struct @(cname="sapp_range") {$/;"	t
Range	$C2_ROOT/libs/sokol_/sokol_debugtext.c2i	/^type Range struct @(cname="sdtx_range") {$/;"	t
Range	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type Range struct @(cname="sg_range") {$/;"	t
Range	$C2_ROOT/libs/sokol_/sokol_shape.c2i	/^type Range struct @(cname="sshape_range") {$/;"	t
RangeExpr	$C2_ROOT/ast/range_expr.c2	/^public type RangeExpr struct @(opaque) {$/;"	t
ReadSlotAccess	$C2_ROOT/ir/slot_collector.c2	/^public type ReadSlotAccess struct {$/;"	t
Reader	$C2_ROOT/libs/lua/lua.c2i	/^type Reader fn const c_char* (State *L, void *ud, c_size *sz) @(cname="lua_Reader");$/;"	t
Recipe	$C2_ROOT/compiler/c2recipe.c2	/^public type Recipe struct @(opaque) {$/;"	t
Rect	$C2_ROOT/libs/sdl2/sdl.c2i	/^type Rect struct @(cname="SDL_Rect") {$/;"	t
Ref	$C2_ROOT/ast/type_ref.c2	/^public type Ref struct {$/;"	t
Ref	$C2_ROOT/ir/ref.c2	/^public type Ref struct {$/;"	t
RefKind	$C2_ROOT/ir/ref.c2	/^public type RefKind enum u8 {$/;"	t
RefList	$C2_ROOT/generator/ir/ref_list.c2	/^public type RefList struct {$/;"	t
RefSrc	$C2_ROOT/generator/c2refs.c2	/^public type RefSrc struct @(packed) {$/;"	t
RefUsesFn	$C2_ROOT/generator/c2refs.c2	/^public type RefUsesFn fn void (void* arg, const Dest* res);$/;"	t
Refs	$C2_ROOT/generator/c2refs.c2	/^public type Refs struct @(opaque) {$/;"	t
RegOff	$C2_ROOT/libs/libc/regex.c2i	/^type RegOff c_int @(cname="regoff_t");$/;"	t
Regex_t	$C2_ROOT/libs/libc/regex.c2i	/^type Regex_t struct @(cname="regex_t") {$/;"	t
RegisterAttrFn	$C2_ROOT/plugins/plugin_info.c2	/^public type RegisterAttrFn fn bool (void* arg, u32 name, ast.AttrHandlerFn func, void* arg2);$/;"	t
Regmatch_t	$C2_ROOT/libs/libc/regex.c2i	/^type Regmatch_t struct @(cname="regmatch_t") {$/;"	t
RemAssign	$C2_ROOT/common/c2_prec.c2	/^    [BinaryOpcode.RemAssign]   = Assignment,$/;"	v
RemAssign	$C2_ROOT/common/c_prec.c2	/^    [BinaryOpcode.RemAssign]   = Assignment,$/;"	v
Remainder	$C2_ROOT/common/c2_prec.c2	/^    [BinaryOpcode.Remainder]   = Multiplicative,$/;"	v
Remainder	$C2_ROOT/common/c_prec.c2	/^    [BinaryOpcode.Remainder]   = Multiplicative,$/;"	v
RenderFlags	$C2_ROOT/libs/sdl2/sdl.c2i	/^type RenderFlags enum u32 {$/;"	t
Renderer	$C2_ROOT/libs/sdl2/sdl.c2i	/^type Renderer struct @(opaque, cname="SDL_Renderer");$/;"	t
RendererFlip	$C2_ROOT/libs/sdl2/sdl.c2i	/^type RendererFlip enum u8 {$/;"	t
Replacer	$C2_ROOT/tools/common/replacer.c2	/^public type Replacer struct @(opaque) {$/;"	t
Req	$C2_ROOT/libs/libc/net_if.c2i	/^type Req struct @(cname="ifreq") {$/;"	t
ResourceState	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type ResourceState enum u32 @(cname="sg_resource_state") {$/;"	t
ResourceState	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type ResourceState enum u32 @(cname="sg_resource_state") {$/;"	t
ResourceStats	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type ResourceStats struct @(cname="sg_resource_stats") {$/;"	t
ResourceStats	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type ResourceStats struct @(cname="sg_resource_stats") {$/;"	t
ResponseCb	$C2_ROOT/libs/sokol/sokol_app.c2i	/^type ResponseCb fn void(Html5FetchResponse*);$/;"	t
ResponseCb	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^type ResponseCb fn void(Html5FetchResponse*);$/;"	t
Result	$C2_ROOT/tools/c2tags.c2	/^type Result struct {$/;"	t
Results	$C2_ROOT/tools/c2tags.c2	/^type Results struct {$/;"	t
ReturnStmt	$C2_ROOT/ast/return_stmt.c2	/^public type ReturnStmt struct @(opaque) {$/;"	t
ReturnStmtBits	$C2_ROOT/ast/return_stmt.c2	/^type ReturnStmtBits struct {$/;"	t
RevIndex	$C2_ROOT/ir/rev_list.c2	/^public type RevIndex struct {$/;"	t
RevList	$C2_ROOT/ir/rev_list.c2	/^public type RevList struct {$/;"	t
Ring	$C2_ROOT/libs/io_uring/io_uring.c2i	/^type Ring struct @(cname="io_uring") {$/;"	t
Rng_fn	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^type Rng_fn fn c_int(void *, c_uchar *, c_size);$/;"	t
Rpo	$C2_ROOT/ir/rpo.c2	/^public type Rpo struct {$/;"	t
SAPP_EVENTTYPE_FILES_DROPPED	$C2_ROOT/libs/sokol/c/sokol_app.h	/^    event of type SAPP_EVENTTYPE_FILES_DROPPED whenever the user drops files on$/;"	t
SAPP_EVENTTYPE_FILES_DROPPED	$C2_ROOT/libs/sokol_/c/sokol_app.h	/^    event of type SAPP_EVENTTYPE_FILES_DROPPED whenever the user drops files on$/;"	t
SaFamily	$C2_ROOT/libs/libc/sys_socket.c2i	/^type SaFamily u16 @(cname="sa_family_t");$/;"	t
Sampler	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type Sampler struct @(cname="sg_sampler") {$/;"	t
Sampler	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type Sampler struct @(cname="sg_sampler") {$/;"	t
SamplerDesc	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type SamplerDesc struct @(cname="sg_sampler_desc") {$/;"	t
SamplerDesc	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type SamplerDesc struct @(cname="sg_sampler_desc") {$/;"	t
SamplerInfo	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type SamplerInfo struct @(cname="sg_sampler_info") {$/;"	t
SamplerInfo	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type SamplerInfo struct @(cname="sg_sampler_info") {$/;"	t
SamplerType	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type SamplerType enum u32 @(cname="sg_sampler_type") {$/;"	t
SamplerType	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type SamplerType enum u32 @(cname="sg_sampler_type") {$/;"	t
Sbuf__	$C2_ROOT/libs/libc/stdio.c2i	/^type Sbuf__ struct {$/;"	t
ScaleMode	$C2_ROOT/libs/sdl2/sdl.c2i	/^type ScaleMode enum u8 {$/;"	t
Scancode	$C2_ROOT/libs/sdl2/sdl.c2i	/^type Scancode enum u16 {$/;"	t
Scope	$C2_ROOT/analyser/scope.c2	/^public type Scope struct @(opaque) {$/;"	t
Section	$C2_ROOT/ast_utils/attr.c2	/^    [AttrKind.Section]      = AttrReq.String,$/;"	v
Semicolon	$C2_ROOT/parser/token.c2	/^    [Kind.Semicolon]        = ";",$/;"	v
Set	$C2_ROOT/compiler/c2recipe_parser.c2	/^type Set struct {$/;"	t
Sha512_context	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^type Sha512_context struct @(cname="mbedtls_sha512_context") {$/;"	t
Shader	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type Shader struct @(cname="sg_shader") {$/;"	t
Shader	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type Shader struct @(cname="sg_shader") {$/;"	t
ShaderAttrBaseType	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type ShaderAttrBaseType enum u32 @(cname="sg_shader_attr_base_type") {$/;"	t
ShaderAttrBaseType	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type ShaderAttrBaseType enum u32 @(cname="sg_shader_attr_base_type") {$/;"	t
ShaderDesc	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type ShaderDesc struct @(cname="sg_shader_desc") {$/;"	t
ShaderDesc	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type ShaderDesc struct @(cname="sg_shader_desc") {$/;"	t
ShaderFunction	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type ShaderFunction struct @(cname="sg_shader_function") {$/;"	t
ShaderFunction	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type ShaderFunction struct @(cname="sg_shader_function") {$/;"	t
ShaderInfo	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type ShaderInfo struct @(cname="sg_shader_info") {$/;"	t
ShaderInfo	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type ShaderInfo struct @(cname="sg_shader_info") {$/;"	t
ShaderSampler	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type ShaderSampler struct @(cname="sg_shader_sampler") {$/;"	t
ShaderSampler	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type ShaderSampler struct @(cname="sg_shader_sampler") {$/;"	t
ShaderStage	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type ShaderStage enum u32 @(cname="sg_shader_stage") {$/;"	t
ShaderStage	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type ShaderStage enum u32 @(cname="sg_shader_stage") {$/;"	t
ShaderStorageBufferView	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type ShaderStorageBufferView struct @(cname="sg_shader_storage_buffer_view") {$/;"	t
ShaderStorageBufferView	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type ShaderStorageBufferView struct @(cname="sg_shader_storage_buffer_view") {$/;"	t
ShaderStorageImageView	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type ShaderStorageImageView struct @(cname="sg_shader_storage_image_view") {$/;"	t
ShaderStorageImageView	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type ShaderStorageImageView struct @(cname="sg_shader_storage_image_view") {$/;"	t
ShaderTextureSamplerPair	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type ShaderTextureSamplerPair struct @(cname="sg_shader_texture_sampler_pair") {$/;"	t
ShaderTextureSamplerPair	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type ShaderTextureSamplerPair struct @(cname="sg_shader_texture_sampler_pair") {$/;"	t
ShaderTextureView	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type ShaderTextureView struct @(cname="sg_shader_texture_view") {$/;"	t
ShaderTextureView	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type ShaderTextureView struct @(cname="sg_shader_texture_view") {$/;"	t
ShaderUniformBlock	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type ShaderUniformBlock struct @(cname="sg_shader_uniform_block") {$/;"	t
ShaderUniformBlock	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type ShaderUniformBlock struct @(cname="sg_shader_uniform_block") {$/;"	t
ShaderVertexAttr	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type ShaderVertexAttr struct @(cname="sg_shader_vertex_attr") {$/;"	t
ShaderVertexAttr	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type ShaderVertexAttr struct @(cname="sg_shader_vertex_attr") {$/;"	t
ShaderView	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type ShaderView struct @(cname="sg_shader_view") {$/;"	t
ShaderView	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type ShaderView struct @(cname="sg_shader_view") {$/;"	t
ShiftLeft	$C2_ROOT/common/c2_prec.c2	/^    [BinaryOpcode.ShiftLeft]   = Shift,$/;"	v
ShiftLeft	$C2_ROOT/common/c_prec.c2	/^    [BinaryOpcode.ShiftLeft]   = Shift,$/;"	v
ShiftRight	$C2_ROOT/common/c2_prec.c2	/^    [BinaryOpcode.ShiftRight]  = Shift,$/;"	v
ShiftRight	$C2_ROOT/common/c_prec.c2	/^    [BinaryOpcode.ShiftRight]  = Shift,$/;"	v
ShlAssign	$C2_ROOT/common/c2_prec.c2	/^    [BinaryOpcode.ShlAssign]   = Assignment,$/;"	v
ShlAssign	$C2_ROOT/common/c_prec.c2	/^    [BinaryOpcode.ShlAssign]   = Assignment,$/;"	v
ShrAssign	$C2_ROOT/common/c2_prec.c2	/^    [BinaryOpcode.ShrAssign]   = Assignment,$/;"	v
ShrAssign	$C2_ROOT/common/c_prec.c2	/^    [BinaryOpcode.ShrAssign]   = Assignment,$/;"	v
SigActionAction	$C2_ROOT/libs/libc/csignal.c2i	/^type SigActionAction fn void(i32, Siginfo_t*, void*);$/;"	t
SigActionRestorer	$C2_ROOT/libs/libc/csignal.c2i	/^type SigActionRestorer fn void();$/;"	t
Sigaction	$C2_ROOT/libs/libc/csignal.c2i	/^type Sigaction struct {$/;"	t
SigactionHandler	$C2_ROOT/libs/libc/csignal.c2i	/^type SigactionHandler fn void(i32);$/;"	t
Siginfo	$C2_ROOT/libs/libc/sys_signalfd.c2i	/^type Siginfo struct {$/;"	t
Siginfo_t	$C2_ROOT/libs/libc/csignal.c2i	/^type Siginfo_t struct @(cname="siginfo_t") {$/;"	t
Sigset	$C2_ROOT/libs/libc/csignal.c2i	/^type Sigset struct {$/;"	t
Sizes	$C2_ROOT/libs/sokol/sokol_shape.c2i	/^type Sizes struct @(cname="sshape_sizes_t") {$/;"	t
Sizes	$C2_ROOT/libs/sokol_/sokol_shape.c2i	/^type Sizes struct @(cname="sshape_sizes_t") {$/;"	t
SizesItem	$C2_ROOT/libs/sokol/sokol_shape.c2i	/^type SizesItem struct @(cname="sshape_sizes_item_t") {$/;"	t
SizesItem	$C2_ROOT/libs/sokol_/sokol_shape.c2i	/^type SizesItem struct @(cname="sshape_sizes_item_t") {$/;"	t
Slash	$C2_ROOT/parser/c2_parser_expr.c2	/^    [Kind.Slash]   = Multiplicative,$/;"	v
Slash	$C2_ROOT/parser/token.c2	/^    [Kind.Slash]            = "\/",$/;"	v
SlashEqual	$C2_ROOT/parser/c2_parser_expr.c2	/^    [Kind.SlashEqual]     = DivAssign,$/;"	v
SlashEqual	$C2_ROOT/parser/token.c2	/^    [Kind.SlashEqual]       = "\/=",$/;"	v
SlotCollector	$C2_ROOT/ir/slot_collector.c2	/^public type SlotCollector struct {$/;"	t
SlotInfo	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type SlotInfo struct @(cname="sg_slot_info") {$/;"	t
SlotInfo	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type SlotInfo struct @(cname="sg_slot_info") {$/;"	t
SlotValues	$C2_ROOT/ir/slot_values.c2	/^public type SlotValues struct {$/;"	t
SlotWrite	$C2_ROOT/ir/slot_writes_map.c2	/^public type SlotWrite struct {$/;"	t
Sockaddr	$C2_ROOT/libs/libc/sys_socket.c2i	/^type Sockaddr struct @(cname="sockaddr") {$/;"	t
Sockaddr_in	$C2_ROOT/libs/libc/sys_socket.c2i	/^type Sockaddr_in struct @(cname="sockaddr_in") {$/;"	t
Sockaddr_ll	$C2_ROOT/libs/libc/sys_socket.c2i	/^type Sockaddr_ll struct @(cname="sockaddr_ll") {$/;"	t
Sockaddr_un	$C2_ROOT/libs/libc/sys_socket.c2i	/^type Sockaddr_un struct @(cname="sockaddr_un") {$/;"	t
SocketType	$C2_ROOT/libs/libc/sys_socket.c2i	/^type SocketType enum u32 @(cname="__socket_type") {$/;"	t
Sorter	$C2_ROOT/common/dsm_sorter.c2	/^public type Sorter struct {$/;"	t
Sorter	$C2_ROOT/generator/ir/array_init_sorter.c2	/^public type Sorter struct {$/;"	t
SourceMgr	$C2_ROOT/common/source_mgr.c2	/^public type SourceMgr struct @(opaque) {$/;"	t
Specifier	$C2_ROOT/analyser_utils/printf_utils.c2	/^public type Specifier enum u8 {$/;"	t
Speed	$C2_ROOT/libs/libc/ctermios.c2i	/^type Speed c_uint;$/;"	t
Sphere	$C2_ROOT/libs/sokol/sokol_shape.c2i	/^type Sphere struct @(cname="sshape_sphere_t") {$/;"	t
Sphere	$C2_ROOT/libs/sokol_/sokol_shape.c2i	/^type Sphere struct @(cname="sshape_sphere_t") {$/;"	t
SplitEdge	$C2_ROOT/ir/inserter.c2	/^public type SplitEdge struct {$/;"	t
Sq	$C2_ROOT/libs/io_uring/io_uring.c2i	/^type Sq struct @(cname="io_uring_sq") {$/;"	t
Sqe	$C2_ROOT/libs/io_uring/io_uring.c2i	/^type Sqe struct @(cname="io_uring_sqe") {$/;"	t
SqringOffsets	$C2_ROOT/libs/io_uring/io_uring.c2i	/^type SqringOffsets struct @(cname="io_sqring_offsets") {$/;"	t
SrcLoc	$C2_ROOT/ast_utils/src_loc.c2	/^public type SrcLoc u32;$/;"	t
SrcRange	$C2_ROOT/ast_utils/src_loc.c2	/^public type SrcRange struct {$/;"	t
Ssl_config	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^type Ssl_config struct @(cname="mbedtls_ssl_config") {$/;"	t
Ssl_context	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^type Ssl_context struct @(cname="mbedtls_ssl_context") {$/;"	t
Ssl_get_timer_t	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^type Ssl_get_timer_t fn c_int (void* ctx) @(cname="mbedtls_ssl_get_timer_t");$/;"	t
Ssl_handshake_params	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^type Ssl_handshake_params struct @(opaque, cname="mbedtls_ssl_handshake_params");$/;"	t
Ssl_key_cert	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^type Ssl_key_cert struct @(opaque, cname="mbedtls_ssl_key_cert");$/;"	t
Ssl_recv_t	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^type Ssl_recv_t fn c_int(void *ctx, c_uchar *buf, c_size len) @(cname="mbedtls_ssl_recv_t");$/;"	t
Ssl_recv_timeout_t	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^type Ssl_recv_timeout_t fn c_int(void *ctx, c_uchar *buf, c_size len, c_uint timeout) @(cname="m/;"	t
Ssl_send_t	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^type Ssl_send_t fn c_int(void *ctx, const c_char *buf, c_size len) @(cname="mbedtls_ssl_send_t")/;"	t
Ssl_session	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^type Ssl_session struct @(cname="mbedtls_ssl_session") {$/;"	t
Ssl_set_timer_t	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^type Ssl_set_timer_t fn void (void* ctx, c_uint int_ms, c_uint fin_ms) @(cname="mbedtls_ssl_set_/;"	t
Ssl_transform	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^type Ssl_transform struct @(opaque, cname="mbedtls_ssl_transform");$/;"	t
StackLayer	$C2_ROOT/analyser/module_analyser.c2	/^type StackLayer struct {$/;"	t
StackLevel	$C2_ROOT/common/yaml/yaml_data.c2	/^type StackLevel struct {$/;"	t
StackVar	$C2_ROOT/generator/ir/ir_generator_locals.c2	/^public type StackVar struct {$/;"	t
Star	$C2_ROOT/parser/c2_parser_expr.c2	/^    [Kind.Star] = 7,$/;"	v
Star	$C2_ROOT/parser/token.c2	/^    [Kind.Star]             = "*",$/;"	v
StarEqual	$C2_ROOT/parser/c2_parser_expr.c2	/^    [Kind.StarEqual]      = MulAssign,$/;"	v
StarEqual	$C2_ROOT/parser/token.c2	/^    [Kind.StarEqual]        = "*=",$/;"	v
Stat	$C2_ROOT/ast/statistics.c2	/^type Stat struct {$/;"	t
Stat	$C2_ROOT/libs/libc/sys_stat.c2i	/^type Stat struct @(cname="stat", no_typedef) {$/;"	t
State	$C2_ROOT/libs/lua/lua.c2i	/^type State struct @(cname="lua_State") { }$/;"	t
StaticAssert	$C2_ROOT/ast/static_assert.c2	/^public type StaticAssert struct @(opaque) {$/;"	t
StaticAssertList	$C2_ROOT/ast/static_assert_list.c2	/^type StaticAssertList struct {$/;"	t
StaticAssertVisitor	$C2_ROOT/ast/ast.c2	/^public type StaticAssertVisitor fn void (void* arg, StaticAssert* d);$/;"	t
StaticSlot	$C2_ROOT/ir/slot_collector.c2	/^public type StaticSlot struct {$/;"	t
Stats	$C2_ROOT/ast/statistics.c2	/^type Stats struct {$/;"	t
Stats	$C2_ROOT/generator/radix_tree/radix_tree_dump.c2	/^type Stats struct {$/;"	t
Stats	$C2_ROOT/output/unit_test/cgen/build.c	/^static const char plugin_main_Content2[3590] = "\/\/ NOTE: module + imports are generated so thi/;"	t
Stats	$C2_ROOT/output/unit_test/cgen/plugin_main.c	/^static const char plugin_main_Content2[3602] = "\/\/ NOTE: module + imports are generated so thi/;"	t
Stats	$C2_ROOT/output/unit_test/libunit_test.dylib	/^public type Stats struct {$/;"	t
Stats	$C2_ROOT/plugins/unit_test2.c2	/^public type Stats struct {$/;"	t
StdlibCompareFn	$C2_ROOT/libs/libc/stdlib.c2i	/^type StdlibCompareFn fn i32(const void*, const void*) @(cname="__compar_fn_t");$/;"	t
StencilAttachmentAction	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type StencilAttachmentAction struct @(cname="sg_stencil_attachment_action") {$/;"	t
StencilAttachmentAction	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type StencilAttachmentAction struct @(cname="sg_stencil_attachment_action") {$/;"	t
StencilFaceState	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type StencilFaceState struct @(cname="sg_stencil_face_state") {$/;"	t
StencilFaceState	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type StencilFaceState struct @(cname="sg_stencil_face_state") {$/;"	t
StencilOp	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type StencilOp enum u32 @(cname="sg_stencil_op") {$/;"	t
StencilOp	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type StencilOp enum u32 @(cname="sg_stencil_op") {$/;"	t
StencilState	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type StencilState struct @(cname="sg_stencil_state") {$/;"	t
StencilState	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type StencilState struct @(cname="sg_stencil_state") {$/;"	t
Stmt	$C2_ROOT/ast/stmt.c2	/^public type Stmt struct @(opaque) {$/;"	t
StmtBits	$C2_ROOT/ast/stmt.c2	/^type StmtBits struct {$/;"	t
StmtKind	$C2_ROOT/ast/stmt.c2	/^public type StmtKind enum u8 {$/;"	t
StoreAction	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type StoreAction enum u32 @(cname="sg_store_action") {$/;"	t
StoreAction	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type StoreAction enum u32 @(cname="sg_store_action") {$/;"	t
StreamCb	$C2_ROOT/libs/sokol/sokol_audio.c2i	/^type StreamCb fn void(c_float*, c_int, c_int);$/;"	t
StreamCb	$C2_ROOT/libs/sokol_/sokol_audio.c2i	/^type StreamCb fn void(c_float*, c_int, c_int);$/;"	t
StreamDataCb	$C2_ROOT/libs/sokol/sokol_audio.c2i	/^type StreamDataCb fn void(c_float*, c_int, c_int, void*);$/;"	t
StreamDataCb	$C2_ROOT/libs/sokol_/sokol_audio.c2i	/^type StreamDataCb fn void(c_float*, c_int, c_int, void*);$/;"	t
StringList	$C2_ROOT/generator/c/c_generator_trace.c2	/^type StringList struct {$/;"	t
StringLiteral	$C2_ROOT/ast/string_literal.c2	/^public type StringLiteral struct @(opaque) {$/;"	t
StringLiteral	$C2_ROOT/parser/c2_parser_expr.c2	/^    [Kind.StringLiteral] = 5,$/;"	v
StringLiteral	$C2_ROOT/parser/token.c2	/^    [Kind.StringLiteral]    = "string",$/;"	v
StringLiteralBits	$C2_ROOT/ast/string_literal.c2	/^type StringLiteralBits struct {$/;"	t
StringTypePool	$C2_ROOT/ast/string_type_pool.c2	/^type StringTypePool struct {$/;"	t
StringTypeSlot	$C2_ROOT/ast/string_type_pool.c2	/^type StringTypeSlot struct {$/;"	t
Struct	$C2_ROOT/ir_examples/members.c2	/^type Struct struct {$/;"	t
StructFieldInitChecker	$C2_ROOT/analyser/struct_field_init_checker.c2	/^type StructFieldInitChecker struct {$/;"	t
StructLayout	$C2_ROOT/ast/struct_type_decl.c2	/^public type StructLayout struct {$/;"	t
StructMemberLayout	$C2_ROOT/ast/struct_type_decl.c2	/^public type StructMemberLayout struct {$/;"	t
StructType	$C2_ROOT/ast/struct_type.c2	/^public type StructType struct @(opaque) {$/;"	t
StructTypeDecl	$C2_ROOT/ast/struct_type_decl.c2	/^public type StructTypeDecl struct @(opaque) {$/;"	t
StructTypeDeclBits	$C2_ROOT/ast/struct_type_decl.c2	/^type StructTypeDeclBits struct {$/;"	t
SuSeconds	$C2_ROOT/libs/libc/sys_time.c2i	/^type SuSeconds c_long @(cname="suseconds_t");$/;"	t
Sub	$C2_ROOT/ir_examples/types.c2	/^type Sub struct {$/;"	t
SubAssign	$C2_ROOT/common/c2_prec.c2	/^    [BinaryOpcode.SubAssign]   = Assignment,$/;"	v
SubAssign	$C2_ROOT/common/c_prec.c2	/^    [BinaryOpcode.SubAssign]   = Assignment,$/;"	v
Subtract	$C2_ROOT/common/c2_prec.c2	/^    [BinaryOpcode.Subtract]    = Additive,$/;"	v
Subtract	$C2_ROOT/common/c_prec.c2	/^    [BinaryOpcode.Subtract]    = Additive,$/;"	v
Surface	$C2_ROOT/libs/sdl2/sdl.c2i	/^type Surface struct @(cname="SDL_Surface") {$/;"	t
Swapchain	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type Swapchain struct @(cname="sg_swapchain") {$/;"	t
Swapchain	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type Swapchain struct @(cname="sg_swapchain") {$/;"	t
SwitchCase	$C2_ROOT/ast/switch_case.c2	/^public type SwitchCase struct @(opaque) {$/;"	t
SwitchCaseBits	$C2_ROOT/ast/switch_case.c2	/^type SwitchCaseBits struct {$/;"	t
SwitchStmt	$C2_ROOT/ast/switch_stmt.c2	/^public type SwitchStmt struct @(opaque) {$/;"	t
SwitchStmtBits	$C2_ROOT/ast/switch_stmt.c2	/^type SwitchStmtBits struct {$/;"	t
Symbol	$C2_ROOT/ir/symbol_list.c2	/^type Symbol struct {$/;"	t
SymbolId	$C2_ROOT/ir/symbol_list.c2	/^public type SymbolId u32;$/;"	t
SymbolList	$C2_ROOT/ir/symbol_list.c2	/^type SymbolList struct {$/;"	t
SymbolTable	$C2_ROOT/ast/symbol_table.c2	/^public type SymbolTable struct {$/;"	t
System	$C2_ROOT/common/target_info.c2	/^public type System enum u8 { Unknown, Linux, Darwin, Cygwin, FreeBSD, OpenBSD }$/;"	t
Table	$C2_ROOT/ast_utils/attr_table.c2	/^public type Table struct @(opaque) {$/;"	t
Table	$C2_ROOT/ir/lookup_table.c2	/^public type Table struct {$/;"	t
Target	$C2_ROOT/common/build_target.c2	/^public type Target struct @(opaque) {$/;"	t
TemplateFunction	$C2_ROOT/ast/instance_table.c2	/^type TemplateFunction struct {$/;"	t
TemplateInstance	$C2_ROOT/ast/instance_table.c2	/^type TemplateInstance struct {$/;"	t
TemplateVisitor	$C2_ROOT/ast/module.c2	/^public type TemplateVisitor fn void (void* arg, FunctionDecl* fd, u32 idx);$/;"	t
Termios	$C2_ROOT/libs/libc/ctermios.c2i	/^type Termios struct @(cname="termios") {$/;"	t
Test	$C2_ROOT/tools/tester/tester.c2	/^type Test struct {$/;"	t
TestFn	$C2_ROOT/output/unit_test/cgen/build.c	/^static const char plugin_main_Content1[5774] = "module c2test;\\nimport stdarg local;\\nimport s/;"	t
TestFn	$C2_ROOT/output/unit_test/cgen/plugin_main.c	/^static const char plugin_main_Content1[5774] = "module c2test;\\nimport stdarg local;\\nimport s/;"	t
TestFn	$C2_ROOT/output/unit_test/libunit_test.dylib	/^public type TestFn fn void(void* t);$/;"	t
TestFn	$C2_ROOT/plugins/unit_test1.c2	/^public type TestFn fn void(void* t);$/;"	t
TestKind	$C2_ROOT/tools/tester/test_db.c2	/^public type TestKind enum u8 {$/;"	t
TestQueue	$C2_ROOT/tools/tester/tester.c2	/^type TestQueue struct {$/;"	t
Tester	$C2_ROOT/tools/tester/tester.c2	/^type Tester struct {$/;"	t
TextEditingEvent	$C2_ROOT/libs/sdl2/sdl.c2i	/^type TextEditingEvent struct {$/;"	t
TextInputEvent	$C2_ROOT/libs/sdl2/sdl.c2i	/^type TextInputEvent struct {$/;"	t
Texture	$C2_ROOT/libs/sdl2/sdl.c2i	/^type Texture struct @(opaque, cname="SDL_Texture");$/;"	t
TextureAccess	$C2_ROOT/libs/sdl2/sdl.c2i	/^type TextureAccess enum u8 {$/;"	t
TextureModulate	$C2_ROOT/libs/sdl2/sdl.c2i	/^type TextureModulate enum u8 {$/;"	t
TextureViewDesc	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type TextureViewDesc struct @(cname="sg_texture_view_desc") {$/;"	t
TextureViewDesc	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type TextureViewDesc struct @(cname="sg_texture_view_desc") {$/;"	t
TextureViewRange	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type TextureViewRange struct @(cname="sg_texture_view_range") {$/;"	t
TextureViewRange	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type TextureViewRange struct @(cname="sg_texture_view_range") {$/;"	t
Thread	$C2_ROOT/libs/sdl2/sdl.c2i	/^type Thread struct @(cname="SDL_Thread", opaque);$/;"	t
ThreadFunc	$C2_ROOT/libs/pthread/pthread.c2i	/^type ThreadFunc fn void*(void*) @(cname="pthread_threadfunc");$/;"	t
ThreadFunction	$C2_ROOT/libs/sdl2/sdl.c2i	/^type ThreadFunction fn c_int (void* data);$/;"	t
Tilde	$C2_ROOT/parser/c2_parser_expr.c2	/^    [Kind.Tilde] = 7,$/;"	v
Tilde	$C2_ROOT/parser/token.c2	/^    [Kind.Tilde]            = "~",$/;"	v
Time	$C2_ROOT/libs/libc/libc_time.c2i	/^type Time c_long @(cname="time_t");$/;"	t
Time	$C2_ROOT/libs/libc/sys_time.c2i	/^type Time c_long @(cname="time_t");$/;"	t
Time_t	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^type Time_t c_long;$/;"	t
TimerCallback	$C2_ROOT/libs/sdl2/sdl.c2i	/^type TimerCallback fn u32 (u32 interval, void* param);$/;"	t
TimerID	$C2_ROOT/libs/sdl2/sdl.c2i	/^type TimerID c_int;$/;"	t
Timespec	$C2_ROOT/libs/libc/linux_types.c2i	/^type Timespec struct {$/;"	t
Timespec	$C2_ROOT/libs/libc/sys_stat.c2i	/^type Timespec struct @(cname="timespec", no_typedef) {$/;"	t
Timeval	$C2_ROOT/libs/libc/sys_time.c2i	/^type Timeval struct @(cname="timeval") {$/;"	t
Timezone	$C2_ROOT/libs/libc/sys_time.c2i	/^type Timezone struct @(cname="timezone") {$/;"	t
Timing_delay_context	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^type Timing_delay_context struct @(cname="mbedtls_timing_delay_context") {$/;"	t
Timing_hr_time	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^type Timing_hr_time struct @(cname="mbedtls_timing_hr_time") {$/;"	t
Tls_prf_types	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^type Tls_prf_types enum u8 {$/;"	t
Tm	$C2_ROOT/libs/libc/libc_time.c2i	/^type Tm struct {$/;"	t
ToContainerData	$C2_ROOT/ast/builtin_expr.c2	/^type ToContainerData struct {$/;"	t
Token	$C2_ROOT/common/yaml/yaml_tokenizer.c2	/^type Token struct {$/;"	t
Token	$C2_ROOT/compiler/c2recipe_parser.c2	/^type Token struct {$/;"	t
Token	$C2_ROOT/parser/token.c2	/^public type Token struct {$/;"	t
TokenKind	$C2_ROOT/common/yaml/yaml_tokenizer.c2	/^type TokenKind enum u8 {$/;"	t
Tokenizer	$C2_ROOT/common/yaml/yaml_tokenizer.c2	/^type Tokenizer struct {$/;"	t
Tokenizer	$C2_ROOT/parser/c2_tokenizer.c2	/^public type Tokenizer struct {$/;"	t
Tools	$C2_ROOT/ir/context.c2	/^type Tools struct {$/;"	t
Torus	$C2_ROOT/libs/sokol/sokol_shape.c2i	/^type Torus struct @(cname="sshape_torus_t") {$/;"	t
Torus	$C2_ROOT/libs/sokol_/sokol_shape.c2i	/^type Torus struct @(cname="sshape_torus_t") {$/;"	t
Touchpoint	$C2_ROOT/libs/sokol/sokol_app.c2i	/^type Touchpoint struct @(cname="sapp_touchpoint") {$/;"	t
Touchpoint	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^type Touchpoint struct @(cname="sapp_touchpoint") {$/;"	t
TraceCall	$C2_ROOT/generator/c/c_generator_trace.c2	/^type TraceCall struct {$/;"	t
TraceCallList	$C2_ROOT/generator/c/c_generator_trace.c2	/^type TraceCallList struct {$/;"	t
Tree	$C2_ROOT/generator/radix_tree/radix_tree.c2	/^public type Tree struct @(opaque) {$/;"	t
Trimmer	$C2_ROOT/generator/radix_tree/radix_tree_fs.c2	/^type Trimmer struct {$/;"	t
Type	$C2_ROOT/ast/type.c2	/^public type Type struct @(opaque) {$/;"	t
Type	$C2_ROOT/ir/types.c2	/^public type Type enum u8 {$/;"	t
Type	$C2_ROOT/tools/tester/test_db.c2	/^type Type enum u8 { ERROR, WARNING, NOTE }$/;"	t
TypeBits	$C2_ROOT/ast/type.c2	/^type TypeBits struct {$/;"	t
TypeDeclVisitor	$C2_ROOT/ast/ast.c2	/^public type TypeDeclVisitor fn void (void* arg, Decl* d);$/;"	t
TypeExpr	$C2_ROOT/ast/type_expr.c2	/^public type TypeExpr struct @(opaque) {$/;"	t
TypeExprBits	$C2_ROOT/ast/type_expr.c2	/^type TypeExprBits struct {$/;"	t
TypeKind	$C2_ROOT/ast/type.c2	/^public type TypeKind enum u8 {$/;"	t
TypeRef	$C2_ROOT/ast/type_ref.c2	/^public type TypeRef struct @(opaque, aligned=8) {$/;"	t
TypeRefBits	$C2_ROOT/ast/type_ref.c2	/^type TypeRefBits struct {$/;"	t
TypeRefHolder	$C2_ROOT/ast/type_ref.c2	/^public type TypeRefHolder struct {$/;"	t
TypeRefKind	$C2_ROOT/ast/type_ref.c2	/^public type TypeRefKind enum u8 {$/;"	t
TypeSize	$C2_ROOT/analyser/size_analyser.c2	/^public type TypeSize struct {$/;"	t
U16	$C2_ROOT/ir/context.c2	/^    [Type.U16] = InstrKind.Store2,$/;"	v
U32	$C2_ROOT/ir/context.c2	/^    [Type.U32] = InstrKind.Store4,$/;"	v
U64	$C2_ROOT/ir/context.c2	/^    [Type.U64] = InstrKind.Store8,$/;"	v
U8	$C2_ROOT/ir/context.c2	/^    [Type.U8]  = InstrKind.Store1,$/;"	v
UInt16	$C2_ROOT/ast/builtin_type.c2	/^    [BuiltinKind.UInt16] = true,$/;"	v
UInt16	$C2_ROOT/generator/c/c_generator_expr.c2	/^    [BuiltinKind.UInt16] = false,$/;"	v
UInt16	$C2_ROOT/generator/ir/ir_generator.c2	/^    [BuiltinKind.UInt16]  = U16,$/;"	v
UInt32	$C2_ROOT/ast/builtin_type.c2	/^    [BuiltinKind.UInt32] = true,$/;"	v
UInt32	$C2_ROOT/generator/c/c_generator_expr.c2	/^    [BuiltinKind.UInt32] = false,$/;"	v
UInt32	$C2_ROOT/generator/ir/ir_generator.c2	/^    [BuiltinKind.UInt32]  = U32,$/;"	v
UInt64	$C2_ROOT/ast/builtin_type.c2	/^    [BuiltinKind.UInt64] = true,$/;"	v
UInt64	$C2_ROOT/generator/c/c_generator_expr.c2	/^    [BuiltinKind.UInt64] = true,$/;"	v
UInt64	$C2_ROOT/generator/ir/ir_generator.c2	/^    [BuiltinKind.UInt64]  = U64,$/;"	v
UInt8	$C2_ROOT/ast/builtin_type.c2	/^    [BuiltinKind.UInt8] = true,$/;"	v
UInt8	$C2_ROOT/generator/c/c_generator_expr.c2	/^    [BuiltinKind.UInt8] = false,$/;"	v
UInt8	$C2_ROOT/generator/ir/ir_generator.c2	/^    [BuiltinKind.UInt8]   = U8,$/;"	v
USize	$C2_ROOT/ast/builtin_type.c2	/^    [BuiltinKind.USize] = true,$/;"	v
USize	$C2_ROOT/generator/c/c_generator_expr.c2	/^    [BuiltinKind.USize] = true,$/;"	v
USize	$C2_ROOT/generator/ir/ir_generator.c2	/^    [BuiltinKind.USize]   = U64,  \/\/ TODO 32-bit$/;"	v
UnaryOpcode	$C2_ROOT/ast/unary_operator.c2	/^public type UnaryOpcode enum u8 {$/;"	t
UnaryOperator	$C2_ROOT/ast/unary_operator.c2	/^public type UnaryOperator struct @(opaque) {$/;"	t
UnaryOperatorBits	$C2_ROOT/ast/unary_operator.c2	/^type UnaryOperatorBits struct {$/;"	t
UniformLayout	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type UniformLayout enum u32 @(cname="sg_uniform_layout") {$/;"	t
UniformLayout	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type UniformLayout enum u32 @(cname="sg_uniform_layout") {$/;"	t
UniformType	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type UniformType enum u32 @(cname="sg_uniform_type") {$/;"	t
UniformType	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type UniformType enum u32 @(cname="sg_uniform_type") {$/;"	t
Union	$C2_ROOT/ir_examples/types.c2	/^type Union union {$/;"	t
Unknown	$C2_ROOT/ast_utils/attr.c2	/^    [AttrKind.Unknown]      = AttrReq.NoArg,$/;"	v
UnloadFn	$C2_ROOT/plugins/plugin_info.c2	/^public type UnloadFn fn void(void* arg);$/;"	t
Unsigned	$C2_ROOT/libs/lua/lua.c2i	/^type Unsigned LUA_UNSIGNED @(cname="lua_Unsigned");$/;"	t
Unused	$C2_ROOT/ast_utils/attr.c2	/^    [AttrKind.Unused]       = AttrReq.NoArg,$/;"	v
UnusedParams	$C2_ROOT/ast_utils/attr.c2	/^    [AttrKind.UnusedParams] = AttrReq.NoArg,$/;"	v
ValType	$C2_ROOT/ast/expr.c2	/^public type ValType enum u8 {$/;"	t
Value	$C2_ROOT/ast/value.c2	/^public type Value struct {$/;"	t
Value	$C2_ROOT/ast_utils/attr.c2	/^public type Value struct {$/;"	t
Value	$C2_ROOT/common/value_maplist.c2	/^public type Value struct {$/;"	t
ValueKind	$C2_ROOT/ast/value.c2	/^public type ValueKind enum u8 {$/;"	t
ValueKind	$C2_ROOT/ast_utils/attr.c2	/^public type ValueKind enum u8 {$/;"	t
VarDecl	$C2_ROOT/ast/var_decl.c2	/^public type VarDecl struct @(opaque) {$/;"	t
VarDeclBits	$C2_ROOT/ast/var_decl.c2	/^type VarDeclBits struct {$/;"	t
VarDeclInit	$C2_ROOT/ast/var_decl.c2	/^type VarDeclInit struct {$/;"	t
VarDeclKind	$C2_ROOT/ast/var_decl.c2	/^public type VarDeclKind enum u8 {$/;"	t
VarDeclVisitor	$C2_ROOT/ast/ast.c2	/^public type VarDeclVisitor fn void (void* arg, VarDecl* d);$/;"	t
Variable	$C2_ROOT/ir/interference_graph.c2	/^type Variable struct {$/;"	t
Variable	$C2_ROOT/ir/live_map.c2	/^type Variable struct {$/;"	t
Vendor	$C2_ROOT/common/target_info.c2	/^public type Vendor enum u8 { Unknown, Apple }$/;"	t
Verify_fn	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^type Verify_fn fn c_int(void*, X509_crt *, c_int, c_uint*);$/;"	t
Vertex	$C2_ROOT/libs/sokol/sokol_shape.c2i	/^type Vertex struct @(cname="sshape_vertex_t") {$/;"	t
Vertex	$C2_ROOT/libs/sokol_/sokol_shape.c2i	/^type Vertex struct @(cname="sshape_vertex_t") {$/;"	t
VertexAttrState	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type VertexAttrState struct @(cname="sg_vertex_attr_state") {$/;"	t
VertexAttrState	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type VertexAttrState struct @(cname="sg_vertex_attr_state") {$/;"	t
VertexBufferLayoutState	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type VertexBufferLayoutState struct @(cname="sg_vertex_buffer_layout_state") {$/;"	t
VertexBufferLayoutState	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type VertexBufferLayoutState struct @(cname="sg_vertex_buffer_layout_state") {$/;"	t
VertexFormat	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type VertexFormat enum u32 @(cname="sg_vertex_format") {$/;"	t
VertexFormat	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type VertexFormat enum u32 @(cname="sg_vertex_format") {$/;"	t
VertexLayoutState	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type VertexLayoutState struct @(cname="sg_vertex_layout_state") {$/;"	t
VertexLayoutState	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type VertexLayoutState struct @(cname="sg_vertex_layout_state") {$/;"	t
VertexStep	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type VertexStep enum u32 @(cname="sg_vertex_step") {$/;"	t
VertexStep	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type VertexStep enum u32 @(cname="sg_vertex_step") {$/;"	t
View	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type View struct @(cname="sg_view") {$/;"	t
View	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type View struct @(cname="sg_view") {$/;"	t
ViewDesc	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type ViewDesc struct @(cname="sg_view_desc") {$/;"	t
ViewDesc	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type ViewDesc struct @(cname="sg_view_desc") {$/;"	t
ViewInfo	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type ViewInfo struct @(cname="sg_view_info") {$/;"	t
ViewInfo	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type ViewInfo struct @(cname="sg_view_info") {$/;"	t
ViewType	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type ViewType enum u32 @(cname="sg_view_type") {$/;"	t
ViewType	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type ViewType enum u32 @(cname="sg_view_type") {$/;"	t
Visitor	$C2_ROOT/common/library_list.c2	/^public type Visitor fn void (void* arg, u32 name, bool is_static);$/;"	t
Visitor	$C2_ROOT/common/module_list.c2	/^public type Visitor fn void (void* arg, ast.Module* m);$/;"	t
Visitor	$C2_ROOT/common/source_mgr.c2	/^public type Visitor fn void (void* arg, u32 start, u32 size, const char* filename, const char* c/;"	t
Visitor	$C2_ROOT/generator/ast_visitor.c2	/^public type Visitor struct @(opaque) {$/;"	t
Void	$C2_ROOT/ast/builtin_type.c2	/^    [BuiltinKind.Void] = false,$/;"	v
Void	$C2_ROOT/generator/c/c_generator_expr.c2	/^    [BuiltinKind.Void] = false,$/;"	v
Void	$C2_ROOT/generator/ir/ir_generator.c2	/^    [BuiltinKind.Void]    = None,$/;"	v
Warning	$C2_ROOT/parser/token.c2	/^    [Kind.Warning]          = "warning",$/;"	v
Weak	$C2_ROOT/ast_utils/attr.c2	/^    [AttrKind.Weak]         = AttrReq.NoArg,$/;"	v
WgpuBufferInfo	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type WgpuBufferInfo struct @(cname="sg_wgpu_buffer_info") {$/;"	t
WgpuBufferInfo	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type WgpuBufferInfo struct @(cname="sg_wgpu_buffer_info") {$/;"	t
WgpuEnvironment	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type WgpuEnvironment struct @(cname="sg_wgpu_environment") {$/;"	t
WgpuEnvironment	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type WgpuEnvironment struct @(cname="sg_wgpu_environment") {$/;"	t
WgpuImageInfo	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type WgpuImageInfo struct @(cname="sg_wgpu_image_info") {$/;"	t
WgpuImageInfo	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type WgpuImageInfo struct @(cname="sg_wgpu_image_info") {$/;"	t
WgpuPipelineInfo	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type WgpuPipelineInfo struct @(cname="sg_wgpu_pipeline_info") {$/;"	t
WgpuPipelineInfo	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type WgpuPipelineInfo struct @(cname="sg_wgpu_pipeline_info") {$/;"	t
WgpuSamplerInfo	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type WgpuSamplerInfo struct @(cname="sg_wgpu_sampler_info") {$/;"	t
WgpuSamplerInfo	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type WgpuSamplerInfo struct @(cname="sg_wgpu_sampler_info") {$/;"	t
WgpuShaderInfo	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type WgpuShaderInfo struct @(cname="sg_wgpu_shader_info") {$/;"	t
WgpuShaderInfo	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type WgpuShaderInfo struct @(cname="sg_wgpu_shader_info") {$/;"	t
WgpuSwapchain	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type WgpuSwapchain struct @(cname="sg_wgpu_swapchain") {$/;"	t
WgpuSwapchain	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type WgpuSwapchain struct @(cname="sg_wgpu_swapchain") {$/;"	t
WgpuViewInfo	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type WgpuViewInfo struct @(cname="sg_wgpu_view_info") {$/;"	t
WgpuViewInfo	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type WgpuViewInfo struct @(cname="sg_wgpu_view_info") {$/;"	t
WhileStmt	$C2_ROOT/ast/while_stmt.c2	/^public type WhileStmt struct @(opaque) {$/;"	t
Window	$C2_ROOT/libs/sdl2/sdl.c2i	/^type Window struct @(opaque, cname="SDL_Window");$/;"	t
WindowEvent	$C2_ROOT/libs/sdl2/sdl.c2i	/^type WindowEvent struct {$/;"	t
WindowEventId	$C2_ROOT/libs/sdl2/sdl.c2i	/^type WindowEventId enum u8 {$/;"	t
Words	$C2_ROOT/generator/radix_tree/radix_tree.c2	/^type Words struct {$/;"	t
WorkQueue	$C2_ROOT/ir/work_queue.c2	/^type WorkQueue struct {$/;"	t
Wrap	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^type Wrap enum u32 @(cname="sg_wrap") {$/;"	t
Wrap	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^type Wrap enum u32 @(cname="sg_wrap") {$/;"	t
Wrapper	$C2_ROOT/generator/generator_utils.c2	/^type Wrapper struct {$/;"	t
WriteSlotAccess	$C2_ROOT/ir/slot_collector.c2	/^type WriteSlotAccess struct {$/;"	t
Writer	$C2_ROOT/libs/lua/lua.c2i	/^type Writer fn void* (State *L, const void *p, c_size sz, void *ud) @(cname="lua_Writer");$/;"	t
X509_buf	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^type X509_buf Asn1_buf @(cname="mbedtls_x509_buf");$/;"	t
X509_crl	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^type X509_crl struct @(cname="mbedtls_x509_crl") {$/;"	t
X509_crl_entry	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^type X509_crl_entry struct @(cname="mbedtls_x509_crl_entry") {$/;"	t
X509_crt	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^type X509_crt struct @(cname="mbedtls_x509_crt") {$/;"	t
X509_crt_profile	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^type X509_crt_profile struct @(cname="mbedtls_x509_crt_profile") {$/;"	t
X509_name	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^type X509_name Asn1_named_data @(cname="mbedtls_x509_name");$/;"	t
X509_sequence	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^type X509_sequence Asn1_sequence @(cname="mbedtls_x509_sequence");$/;"	t
X509_time	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^type X509_time struct @(cname="mbedtls_x509_time") {$/;"	t
Xor	$C2_ROOT/common/c2_prec.c2	/^    [BinaryOpcode.Xor]         = Bitwise,$/;"	v
Xor	$C2_ROOT/common/c_prec.c2	/^    [BinaryOpcode.Xor]         = Xor,$/;"	v
XorAssign	$C2_ROOT/common/c2_prec.c2	/^    [BinaryOpcode.XorAssign]   = Assignment,$/;"	v
XorAssign	$C2_ROOT/common/c_prec.c2	/^    [BinaryOpcode.XorAssign]   = Assignment,$/;"	v
Zone	$C2_ROOT/generator/radix_tree/radix_tree.c2	/^type Zone struct {$/;"	t
_Exit	$C2_ROOT/libs/libc/stdlib.c2i	/^fn void _Exit(c_int __status) @(noreturn);$/;"	f
__errno	$C2_ROOT/libs/libc/c_errno.c2i	/^fn c_int* __errno();$/;"	f
__errno_location	$C2_ROOT/libs/libc/c_errno.c2i	/^fn c_int* __errno_location();$/;"	f
__error	$C2_ROOT/libs/libc/c_errno.c2i	/^fn c_int* __error();$/;"	f
__getdelim	$C2_ROOT/libs/libc/stdio.c2i	/^fn c_ssize __getdelim(c_char** __lineptr, c_size* __n, c_int __delimiter, FILE* __stream);$/;"	f
__xuname	$C2_ROOT/libs/libc/sys_utsname.c2i	/^fn c_int __xuname(c_int len, void *);       \/* Variable record size. *\/$/;"	f
_exit	$C2_ROOT/libs/libc/stdlib.c2i	/^fn void _exit(c_int __status) @(noreturn);$/;"	f
_setjmp	$C2_ROOT/libs/libc/csetjmp.c2i	/^fn i32 _setjmp(JmpBuf __env);$/;"	f
a64l	$C2_ROOT/libs/libc/stdlib.c2i	/^fn c_long a64l(const c_char* s);$/;"	f
abort	$C2_ROOT/libs/libc/stdlib.c2i	/^fn void abort() @(noreturn);$/;"	f
abs	$C2_ROOT/libs/libc/stdlib.c2i	/^fn c_int abs(c_int __x);$/;"	f
absindex	$C2_ROOT/libs/lua/lua.c2i	/^fn c_int absindex(State* L, c_int idx) @(cname="lua_absindex");$/;"	f
accept	$C2_ROOT/libs/libc/sys_socket.c2i	/^fn c_int accept(c_int sockfd, Sockaddr *addr, u32 *addrlen);$/;"	f
accept4	$C2_ROOT/libs/libc/sys_socket.c2i	/^fn c_int accept4(c_int sockfd, Sockaddr* addr, u32* addrlen, c_int flags);$/;"	f
acos	$C2_ROOT/libs/math/math.c2i	/^fn c_double acos(c_double);$/;"	f
acosf	$C2_ROOT/libs/math/math.c2i	/^fn c_float acosf(c_float);$/;"	f
acosh	$C2_ROOT/libs/math/math.c2i	/^fn c_double acosh(c_double);$/;"	f
acoshf	$C2_ROOT/libs/math/math.c2i	/^fn c_float acoshf(c_float);$/;"	f
actOnAliasType	$C2_ROOT/parser/ast_builder.c2	/^public fn Decl* Builder.actOnAliasType(Builder* b,$/;"	f
actOnArrayDesignatedInit	$C2_ROOT/parser/ast_builder.c2	/^public fn Expr* Builder.actOnArrayDesignatedInit(Builder* b,$/;"	f
actOnArraySubscriptExpr	$C2_ROOT/parser/ast_builder.c2	/^public fn Expr* Builder.actOnArraySubscriptExpr(Builder* b, SrcLoc loc, u32 src_len, Expr* base,/;"	f
actOnArrayType	$C2_ROOT/parser/ast_builder.c2	/^public fn QualType Builder.actOnArrayType(Builder* b,$/;"	f
actOnArrayValue	$C2_ROOT/parser/ast_builder.c2	/^public fn void Builder.actOnArrayValue(Builder* b,$/;"	f
actOnAsmStmt	$C2_ROOT/parser/ast_builder.c2	/^public fn Stmt* Builder.actOnAsmStmt(Builder* b,$/;"	f
actOnAssertStmt	$C2_ROOT/parser/ast_builder.c2	/^public fn Stmt* Builder.actOnAssertStmt(Builder* b, SrcLoc loc, Expr* inner) {$/;"	f
actOnAttr	$C2_ROOT/parser/ast_builder.c2	/^public fn void Builder.actOnAttr(Builder* b, attr.Attr* a) {$/;"	f
actOnBinaryOperator	$C2_ROOT/parser/ast_builder.c2	/^public fn Expr* Builder.actOnBinaryOperator(Builder* b,$/;"	f
actOnBitOffsetExpr	$C2_ROOT/parser/ast_builder.c2	/^public fn Expr* Builder.actOnBitOffsetExpr(Builder* b, SrcLoc loc, Expr* lhs, Expr* rhs) {$/;"	f
actOnBooleanConstant	$C2_ROOT/parser/ast_builder.c2	/^public fn Expr* Builder.actOnBooleanConstant(Builder* b, SrcLoc loc, bool value) {$/;"	f
actOnBreakStmt	$C2_ROOT/parser/ast_builder.c2	/^public fn Stmt* Builder.actOnBreakStmt(Builder* b, SrcLoc loc) {$/;"	f
actOnBuiltinExpr	$C2_ROOT/parser/ast_builder.c2	/^public fn Expr* Builder.actOnBuiltinExpr(Builder* b,$/;"	f
actOnBuiltinType	$C2_ROOT/parser/ast_builder.c2	/^public fn QualType Builder.actOnBuiltinType(Builder*, BuiltinKind kind) {$/;"	f
actOnCallExpr	$C2_ROOT/parser/ast_builder.c2	/^public fn Expr* Builder.actOnCallExpr(Builder* b,$/;"	f
actOnCase	$C2_ROOT/parser/ast_builder.c2	/^public fn SwitchCase* Builder.actOnCase(Builder* b,$/;"	f
actOnCharLiteral	$C2_ROOT/parser/ast_builder.c2	/^public fn Expr* Builder.actOnCharLiteral(Builder* b, SrcLoc loc, u32 src_len, u8 value, Radix ra/;"	f
actOnCompoundStmt	$C2_ROOT/parser/ast_builder.c2	/^public fn CompoundStmt* Builder.actOnCompoundStmt(Builder* b,$/;"	f
actOnConditionalOperator	$C2_ROOT/parser/ast_builder.c2	/^public fn Expr* Builder.actOnConditionalOperator(Builder* b,$/;"	f
actOnContinueStmt	$C2_ROOT/parser/ast_builder.c2	/^public fn Stmt* Builder.actOnContinueStmt(Builder* b, SrcLoc loc) {$/;"	f
actOnDeclStmt	$C2_ROOT/parser/ast_builder.c2	/^public fn Stmt* Builder.actOnDeclStmt(Builder* b, VarDecl** decl, u32 count)$/;"	f
actOnEnumConstant	$C2_ROOT/parser/ast_builder.c2	/^public fn EnumConstantDecl* Builder.actOnEnumConstant(Builder* b,$/;"	f
actOnEnumType	$C2_ROOT/parser/ast_builder.c2	/^public fn Decl* Builder.actOnEnumType(Builder* b,$/;"	f
actOnExplicitCast	$C2_ROOT/parser/ast_builder.c2	/^public fn Expr* Builder.actOnExplicitCast(Builder* b,$/;"	f
actOnFallthroughStmt	$C2_ROOT/parser/ast_builder.c2	/^public fn Stmt* Builder.actOnFallthroughStmt(Builder* b, SrcLoc loc) {$/;"	f
actOnFieldDesignatedInit	$C2_ROOT/parser/ast_builder.c2	/^public fn Expr* Builder.actOnFieldDesignatedInit(Builder* b,$/;"	f
actOnFieldInitInfo	$C2_ROOT/parser/ast_builder.c2	/^public fn FieldInitInfo* Builder.actOnFieldInitInfo(Builder* b, StructTypeDecl* std) {$/;"	f
actOnFloatLiteral	$C2_ROOT/parser/ast_builder.c2	/^public fn Expr* Builder.actOnFloatLiteral(Builder* b, SrcLoc loc, u32 src_len, f64 value, Radix /;"	f
actOnForStmt	$C2_ROOT/parser/ast_builder.c2	/^public fn Stmt* Builder.actOnForStmt(Builder* b,$/;"	f
actOnFunctionAttr	$C2_ROOT/parser/ast_builder.c2	/^fn void Builder.actOnFunctionAttr(Builder* b, Decl* d, const Attr* a) {$/;"	f
actOnFunctionBody	$C2_ROOT/parser/ast_builder.c2	/^public fn void Builder.actOnFunctionBody(Builder*, FunctionDecl* f, CompoundStmt* body) {$/;"	f
actOnFunctionDecl	$C2_ROOT/parser/ast_builder.c2	/^public fn FunctionDecl* Builder.actOnFunctionDecl(Builder* b,$/;"	f
actOnFunctionParam	$C2_ROOT/parser/ast_builder.c2	/^public fn VarDecl* Builder.actOnFunctionParam(Builder* b,$/;"	f
actOnFunctionTypeDecl	$C2_ROOT/parser/ast_builder.c2	/^public fn Decl* Builder.actOnFunctionTypeDecl(Builder* b,$/;"	f
actOnGlobalVarDecl	$C2_ROOT/parser/ast_builder.c2	/^public fn Decl* Builder.actOnGlobalVarDecl(Builder* b,$/;"	f
actOnGotoStmt	$C2_ROOT/parser/ast_builder.c2	/^public fn Stmt* Builder.actOnGotoStmt(Builder* b, u32 name, SrcLoc loc) {$/;"	f
actOnIdentifier	$C2_ROOT/parser/ast_builder.c2	/^public fn IdentifierExpr* Builder.actOnIdentifier(Builder* b, SrcLoc loc, u32 name) {$/;"	f
actOnIfStmt	$C2_ROOT/parser/ast_builder.c2	/^public fn Stmt* Builder.actOnIfStmt(Builder* b, SrcLoc loc, Stmt* cond, Stmt* then, Stmt* else_s/;"	f
actOnImport	$C2_ROOT/parser/ast_builder.c2	/^public fn void Builder.actOnImport(Builder* b,$/;"	f
actOnIncrementalArrayType	$C2_ROOT/parser/ast_builder.c2	/^public fn QualType Builder.actOnIncrementalArrayType(Builder* b, QualType elem) {$/;"	f
actOnInitList	$C2_ROOT/parser/ast_builder.c2	/^public fn Expr* Builder.actOnInitList(Builder* b,$/;"	f
actOnIntegerLiteral	$C2_ROOT/parser/ast_builder.c2	/^public fn Expr* Builder.actOnIntegerLiteral(Builder* b, SrcLoc loc, u32 src_len, u64 value, Radi/;"	f
actOnLabelStmt	$C2_ROOT/parser/ast_builder.c2	/^public fn Stmt* Builder.actOnLabelStmt(Builder* b, u32 name, SrcLoc loc, Stmt* stmt) {$/;"	f
actOnMemberExpr	$C2_ROOT/parser/ast_builder.c2	/^public fn Expr* Builder.actOnMemberExpr(Builder* b, Expr* base, const Ref* refs, u32 refcount) {$/;"	f
actOnModule	$C2_ROOT/parser/ast_builder.c2	/^public fn void Builder.actOnModule(Builder* b,$/;"	f
actOnNilExpr	$C2_ROOT/parser/ast_builder.c2	/^public fn Expr* Builder.actOnNilExpr(Builder* b, SrcLoc loc) {$/;"	f
actOnOffsetOfExpr	$C2_ROOT/parser/ast_builder.c2	/^public fn Expr* Builder.actOnOffsetOfExpr(Builder* b,$/;"	f
actOnParamAttr	$C2_ROOT/parser/ast_builder.c2	/^public fn bool Builder.actOnParamAttr(Builder* b,$/;"	f
actOnParenExpr	$C2_ROOT/parser/ast_builder.c2	/^public fn Expr* Builder.actOnParenExpr(Builder* b, SrcLoc loc, u32 src_len, Expr* inner) {$/;"	f
actOnPointerType	$C2_ROOT/parser/ast_builder.c2	/^public fn QualType Builder.actOnPointerType(Builder*, QualType inner) {$/;"	f
actOnRange	$C2_ROOT/parser/ast_builder.c2	/^public fn Expr* Builder.actOnRange(Builder* b, SrcLoc loc, Expr* lhs, Expr* rhs) {$/;"	f
actOnReturnStmt	$C2_ROOT/parser/ast_builder.c2	/^public fn Stmt* Builder.actOnReturnStmt(Builder* b, SrcLoc loc, Expr* ret) {$/;"	f
actOnStaticAssert	$C2_ROOT/parser/ast_builder.c2	/^public fn void Builder.actOnStaticAssert(Builder* b, SrcLoc loc, Expr* lhs, Expr* rhs) {$/;"	f
actOnStringLiteral	$C2_ROOT/parser/ast_builder.c2	/^public fn Expr* Builder.actOnStringLiteral(Builder* b, SrcLoc loc, u32 src_len, u32 value, u32 l/;"	f
actOnStructAttr	$C2_ROOT/parser/ast_builder.c2	/^fn void Builder.actOnStructAttr(Builder* b, Decl* d, const Attr* a) {$/;"	f
actOnStructMember	$C2_ROOT/parser/ast_builder.c2	/^public fn VarDecl* Builder.actOnStructMember(Builder* b,$/;"	f
actOnStructMemberType	$C2_ROOT/parser/ast_builder.c2	/^public fn Decl* Builder.actOnStructMemberType(Builder* b,$/;"	f
actOnStructType	$C2_ROOT/parser/ast_builder.c2	/^public fn StructTypeDecl* Builder.actOnStructType(Builder* b,$/;"	f
actOnSwitchStmt	$C2_ROOT/parser/ast_builder.c2	/^public fn Stmt* Builder.actOnSwitchStmt(Builder* b,$/;"	f
actOnTemplateCallExpr	$C2_ROOT/parser/ast_builder.c2	/^public fn Expr* Builder.actOnTemplateCallExpr(Builder* b,$/;"	f
actOnTemplateFunctionDecl	$C2_ROOT/parser/ast_builder.c2	/^public fn FunctionDecl* Builder.actOnTemplateFunctionDecl(Builder* b,$/;"	f
actOnToContainerExpr	$C2_ROOT/parser/ast_builder.c2	/^public fn Expr* Builder.actOnToContainerExpr(Builder* b,$/;"	f
actOnTypeAttr	$C2_ROOT/parser/ast_builder.c2	/^fn bool Builder.actOnTypeAttr(Builder* b, Decl* d, const Attr* a) {$/;"	f
actOnTypeExpr	$C2_ROOT/parser/ast_builder.c2	/^public fn Expr* Builder.actOnTypeExpr(Builder* b, SrcLoc loc, u32 src_len, const TypeRefHolder* /;"	f
actOnUnaryOperator	$C2_ROOT/parser/ast_builder.c2	/^public fn Expr* Builder.actOnUnaryOperator(Builder* b, SrcLoc loc, UnaryOpcode opcode, Expr* inn/;"	f
actOnVarAttr	$C2_ROOT/parser/ast_builder.c2	/^fn void Builder.actOnVarAttr(Builder* b, Decl* d, const Attr* a) {$/;"	f
actOnVarDecl	$C2_ROOT/parser/ast_builder.c2	/^public fn VarDecl* Builder.actOnVarDecl(Builder* b,$/;"	f
actOnWhileStmt	$C2_ROOT/parser/ast_builder.c2	/^public fn Stmt* Builder.actOnWhileStmt(Builder* b, SrcLoc loc, Stmt* cond, Stmt* then) {$/;"	f
add	$C2_ROOT/analyser/incr_array_list.c2	/^public fn void List.add(List* v, u32 name, SrcLoc loc, ast.Expr* value) {$/;"	f
add	$C2_ROOT/analyser/init_checker.c2	/^public fn void Checker.add(Checker* c, u32 index, SrcLoc loc) {$/;"	f
add	$C2_ROOT/analyser/label_vector.c2	/^public fn u32 LabelVector.add(LabelVector* v, Label label) {$/;"	f
add	$C2_ROOT/analyser/name_vector.c2	/^public fn u32 NameVector.add(NameVector* v, u32 name_idx) {$/;"	f
add	$C2_ROOT/analyser/scope.c2	/^public fn bool Scope.add(Scope* s, ast.Decl* d) {$/;"	f
add	$C2_ROOT/analyser/struct_field_init_checker.c2	/^fn SrcLoc StructFieldInitChecker.add(StructFieldInitChecker* c, u32 idx, SrcLoc loc) {$/;"	f
add	$C2_ROOT/ast/array_value_list.c2	/^fn void ArrayValueList.add(ArrayValueList* l, ArrayValue* v) {$/;"	f
add	$C2_ROOT/ast/decl_list.c2	/^public fn void DeclList.add(DeclList* l, Decl* d) {$/;"	f
add	$C2_ROOT/ast/expr_list.c2	/^public fn void ExprList.add(ExprList* l, Expr* d) {$/;"	f
add	$C2_ROOT/ast/function_decl_list.c2	/^public fn void FunctionDeclList.add(FunctionDeclList* l, FunctionDecl* d) {$/;"	f
add	$C2_ROOT/ast/import_decl_list.c2	/^fn void ImportDeclList.add(ImportDeclList* l, ImportDecl* d) {$/;"	f
add	$C2_ROOT/ast/instance_table.c2	/^fn u16 TemplateFunction.add(TemplateFunction* f, QualType qt, FunctionDecl* instance) {$/;"	f
add	$C2_ROOT/ast/module.c2	/^public fn ast.AST* Module.add(Module* m, string_pool.Pool* auxPool, u32 filename, bool is_interf/;"	f
add	$C2_ROOT/ast/static_assert_list.c2	/^fn void StaticAssertList.add(StaticAssertList* l, StaticAssert* v) {$/;"	f
add	$C2_ROOT/ast/symbol_table.c2	/^fn void SymbolTable.add(SymbolTable* t, u32 name_idx, ast.Decl* d) {$/;"	f
add	$C2_ROOT/ast/value.c2	/^fn Value Value.add(const Value* v1, const Value* v2) {$/;"	f
add	$C2_ROOT/ast_utils/attr_table.c2	/^public fn void Table.add(Table* t,$/;"	f
add	$C2_ROOT/ast_utils/string_buffer.c2	/^public fn void Buf.add(Buf* buf, const char* text) {$/;"	f
add	$C2_ROOT/ast_utils/string_pool.c2	/^public fn u32 Pool.add(Pool* p, const char* text, usize len, bool filter) {$/;"	f
add	$C2_ROOT/common/build_target.c2	/^public fn void PluginList.add(PluginList* l, u32 name, u32 options, SrcLoc loc) {$/;"	f
add	$C2_ROOT/common/component.c2	/^public fn void List.add(List* l, Component* c) {$/;"	f
add	$C2_ROOT/common/index_list.c2	/^public fn void List.add(List* l, u32 item) {$/;"	f
add	$C2_ROOT/common/library_list.c2	/^public fn void List.add(List* l, u32 name, bool is_static) {$/;"	f
add	$C2_ROOT/common/module_list.c2	/^public fn void List.add(List* list, ast.Module* m) {$/;"	f
add	$C2_ROOT/common/string_list.c2	/^public fn void List.add(List* l, u32 name_idx) {$/;"	f
add	$C2_ROOT/common/value_maplist.c2	/^public fn void List.add(List* l, u32 key, u32 value) {$/;"	f
add	$C2_ROOT/generator/c/c_generator_trace.c2	/^fn u32 TraceCallList.add(TraceCallList *cl, TraceCall call) {$/;"	f
add	$C2_ROOT/generator/c2refs.c2	/^fn void Files.add(Files** f_ptr, u32 start, u32 size, const char* filename, u32 len_start, u32 l/;"	f
add	$C2_ROOT/generator/ir/array_init_sorter.c2	/^public fn void Sorter.add(Sorter* s, const ast.Expr* e) {$/;"	f
add	$C2_ROOT/generator/ir/basic_struct_layouter.c2	/^fn void BasicStructLayouter.add(BasicStructLayouter* l,$/;"	f
add	$C2_ROOT/generator/ir/field_struct_layouter.c2	/^fn void FieldStructLayouter.add(FieldStructLayouter* l,$/;"	f
add	$C2_ROOT/generator/ir/ir_generator_locals.c2	/^public fn void Locals.add(Locals* l, ast.VarDecl* vd, u32 width, u32 align, u32 size, ir.Ref slo/;"	f
add	$C2_ROOT/generator/ir/ref_list.c2	/^public fn void RefList.add(RefList* l, ir.Ref ref) {$/;"	f
add	$C2_ROOT/generator/radix_tree/radix_tree.c2	/^public fn void Tree.add(Tree* t, const char* text, u32 len, u32 value) {$/;"	f
add	$C2_ROOT/ir/block_list.c2	/^public fn BlockId BlockList.add(BlockList* l, BlockKind kind) {$/;"	f
add	$C2_ROOT/ir/constant_list.c2	/^fn u32 ConstantList.add(ConstantList* l, const Constant* c) {$/;"	f
add	$C2_ROOT/ir/copy_list.c2	/^public fn void CopyList.add(CopyList* l, u32 idx, Ref ref) {$/;"	f
add	$C2_ROOT/ir/init_value_list.c2	/^fn InitValue* InitValueList.add(InitValueList* l) {$/;"	f
add	$C2_ROOT/ir/instr_list.c2	/^public fn Instr* InstrList.add(InstrList* l) {$/;"	f
add	$C2_ROOT/ir/interference_graph.c2	/^public fn void InterferenceGraph.add(InterferenceGraph* g, u16 var1, u16 var2) {$/;"	f
add	$C2_ROOT/ir/live_map.c2	/^public fn void Map.add(Map* g, u16 var1, u16 var2) {$/;"	f
add	$C2_ROOT/ir/phi_list.c2	/^public fn void PhiList.add(PhiList* l, u32 dest, BlockId src, Ref ref) {$/;"	f
add	$C2_ROOT/ir/register_alloc.c2	/^fn void LiveVector.add(LiveVector* v, u32 idx) {$/;"	f
add	$C2_ROOT/ir/slot_writes_map.c2	/^public fn void Map.add(Map* m, u16 blk_id, u16 slot, ir.Ref ref) {$/;"	f
add	$C2_ROOT/ir/symbol_list.c2	/^fn SymbolId SymbolList.add(SymbolList* l, u32 name, bool is_function, u32 align, bool is_externa/;"	f
add	$C2_ROOT/ir/work_queue.c2	/^fn void WorkQueue.add(WorkQueue* q, ir.FunctionInfo* fi) {$/;"	f
add	$C2_ROOT/parser/case_list.c2	/^public fn void List.add(List* l, SwitchCase* s) {$/;"	f
add	$C2_ROOT/parser/expr_list.c2	/^public fn void List.add(List* l, Expr* e) {$/;"	f
add	$C2_ROOT/parser/stmt_list.c2	/^public fn void List.add(List* l, Stmt* s) {$/;"	f
add	$C2_ROOT/plugins/refs_generator.c2	/^fn void LineCounter.add(LineCounter* l, u32 len) {$/;"	f
add	$C2_ROOT/tools/c2tags.c2	/^fn void Results.add(Results* r, const char* filename, u32 line, u32 col) {$/;"	f
add	$C2_ROOT/tools/common/refs_finder.c2	/^fn void Finder.add(Finder* f, const char* filename) {$/;"	f
add	$C2_ROOT/tools/common/replacer.c2	/^public fn void Replacer.add(Replacer* r, const char* filename, u32 line, u32 column) {$/;"	f
add	$C2_ROOT/tools/tester/issues.c2	/^public fn void Issues.add(Issues* i, const char* filename, u32 line_nr, const char* msg) {$/;"	f
add	$C2_ROOT/tools/tester/line_db.c2	/^public fn void Db.add(Db* db, const char* start, const char* end, bool consecutive) {$/;"	f
add	$C2_ROOT/tools/tester/tester.c2	/^fn void TestQueue.add(TestQueue* q, const char* filename, TestKind kind) {$/;"	f
add1	$C2_ROOT/ast_utils/string_buffer.c2	/^public fn void Buf.add1(Buf* buf, char c) {$/;"	f
add1	$C2_ROOT/ir_examples/global_vars.c2	/^fn void add1(i32 a) {$/;"	f
add2	$C2_ROOT/analyser/init_checker.c2	/^public fn void Checker.add2(Checker* c, u32 index1, u32 index2, SrcLoc loc) {$/;"	f
add2	$C2_ROOT/ast_utils/string_buffer.c2	/^public fn void Buf.add2(Buf* buf, const char* text, u32 len) {$/;"	f
add2	$C2_ROOT/ir_examples/global_vars.c2	/^fn void add2(i32 a) {$/;"	f
addAST	$C2_ROOT/ast/utils.c2	/^fn u32 addAST(AST* ast_) {$/;"	f
addArg	$C2_ROOT/ir/function_info.c2	/^public fn void FunctionInfo.addArg(FunctionInfo* fi, ir.Type t) {$/;"	f
addArray	$C2_ROOT/ast/type_ref.c2	/^public fn void TypeRefHolder.addArray(TypeRefHolder* h, Expr* array) {$/;"	f
addArrayValue	$C2_ROOT/ast/ast.c2	/^public fn void AST.addArrayValue(AST* a, ArrayValue* v) {$/;"	f
addArrayValue	$C2_ROOT/ast/statistics.c2	/^fn void Stats.addArrayValue(u32 size) {$/;"	f
addAsmFile	$C2_ROOT/common/build_target.c2	/^public fn bool Target.addAsmFile(Target* t, u32 filename, SrcLoc loc) {$/;"	f
addAt	$C2_ROOT/generator/ir/array_init_sorter.c2	/^public fn void Sorter.addAt(Sorter* s, u32 index, const ast.Expr* e) {$/;"	f
addBinaryInstr	$C2_ROOT/ir/context.c2	/^public fn Ref Context.addBinaryInstr(Context* c, InstrKind k, Ref left, Ref right) {$/;"	f
addBlock	$C2_ROOT/ir/inserter.c2	/^public fn BlockId Inserter.addBlock(Inserter* ins, BlockKind kind) {$/;"	f
addBlockWritesToArenaHead	$C2_ROOT/ir/slot_writes_map.c2	/^fn void Map.addBlockWritesToArenaHead(Map* m, Arena* a, u16 blk_id) {$/;"	f
addBlockWritesToArenaTail	$C2_ROOT/ir/slot_writes_map.c2	/^fn void Map.addBlockWritesToArenaTail(Map* m, Arena* a, u16 blk_id) {$/;"	f
addCache	$C2_ROOT/ir/phi_list.c2	/^public fn u32 PhiList.addCache(PhiList* l, u32 dest, const PhiClauses* cache) {$/;"	f
addCall	$C2_ROOT/generator/c/c_generator_trace.c2	/^fn u32 Generator.addCall(Generator* gen, const char* funcname, SrcLoc loc) {$/;"	f
addCallInstr	$C2_ROOT/ir/context.c2	/^public fn Ref Context.addCallInstr(Context* c, Ref name, const Ref* args, u32 num_args, bool has/;"	f
addCheckPoints	$C2_ROOT/common/source_mgr.c2	/^fn void File.addCheckPoints(File* f) {$/;"	f
addComment	$C2_ROOT/ir/context.c2	/^public fn void Context.addComment(Context* c, const char* text) {$/;"	f
addCommitListener	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn bool addCommitListener(CommitListener listener) @(cname="sg_add_commit_listener");$/;"	f
addCommitListener	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn bool addCommitListener(CommitListener listener) @(cname="sg_add_commit_listener");$/;"	f
addDecl	$C2_ROOT/analyser/struct_func_list.c2	/^public fn void List.addDecl(List* v, ast.Decl* decl) {$/;"	f
addDecl	$C2_ROOT/ast/statistics.c2	/^fn void Stats.addDecl(DeclKind kind, u32 size) {$/;"	f
addDep	$C2_ROOT/common/component.c2	/^public fn void Component.addDep(Component* c, const char* dep) {$/;"	f
addExpected	$C2_ROOT/tools/tester/test_db.c2	/^fn void Db.addExpected(Db* db, ExpectFile* f) {$/;"	f
addExport	$C2_ROOT/common/build_target.c2	/^public fn void Target.addExport(Target* t, u32 export) {$/;"	f
addExpr	$C2_ROOT/ast/statistics.c2	/^fn void Stats.addExpr(ExprKind kind, u32 size) {$/;"	f
addFeature	$C2_ROOT/common/build_target.c2	/^public fn void Target.addFeature(Target* t, u32 feature) {$/;"	f
addFeature	$C2_ROOT/compiler/compiler.c2	/^fn void Compiler.addFeature(Compiler* c, const char* str, const char* value) {$/;"	f
addFile	$C2_ROOT/common/build_target.c2	/^public fn bool Target.addFile(Target* t, u32 filename, SrcLoc loc) {$/;"	f
addFile	$C2_ROOT/common/source_mgr.c2	/^fn i32 SourceMgr.addFile(SourceMgr* sm, const char* filename, void* data, u32 size,$/;"	f
addFile	$C2_ROOT/compiler/c2recipe_parser.c2	/^fn bool Set.addFile(Set* s, u32 filename, SrcLoc loc) {$/;"	f
addFiltered	$C2_ROOT/ir/live_map.c2	/^public fn void Map.addFiltered(Map* g, u16 var1, u16 var2) {$/;"	f
addFragment	$C2_ROOT/generator/c/c_generator.c2	/^fn void Generator.addFragment(Generator* gen, Fragment* f, bool is_public) {$/;"	f
addFragment	$C2_ROOT/tools/common/replacer.c2	/^fn void Replacer.addFragment(Replacer* r, u32 start, u32 end) {$/;"	f
addFront	$C2_ROOT/common/linked_list.c2	/^public fn void Element.addFront(Element* src, Element* item) @(unused) {$/;"	f
addFunc	$C2_ROOT/analyser/struct_func_list.c2	/^public fn void List.addFunc(List* v, u32 index, ast.FunctionDecl* fd) {$/;"	f
addFunc	$C2_ROOT/ast/ast.c2	/^public fn void AST.addFunc(AST* a, FunctionDecl* d) {$/;"	f
addFuncArg	$C2_ROOT/ir/context.c2	/^public fn Ref Context.addFuncArg(Context* c, Type t) {$/;"	f
addFunction	$C2_ROOT/ir/context.c2	/^public fn SymbolId Context.addFunction(Context* c, const char* name, bool is_external) {$/;"	f
addGenerated	$C2_ROOT/common/source_mgr.c2	/^public fn i32 SourceMgr.addGenerated(SourceMgr* sm, const char* name, void* data, u32 size) @(un/;"	f
addGlobalDefine	$C2_ROOT/compiler/compiler.c2	/^fn void Compiler.addGlobalDefine(Compiler* c, const char* prefix, const char* tail) {$/;"	f
addGlobalFeature	$C2_ROOT/compiler/c2recipe_parser.c2	/^fn bool Parser.addGlobalFeature(Parser* p, u32 feature) {$/;"	f
addGlobalVar	$C2_ROOT/ir/context.c2	/^public fn SymbolId Context.addGlobalVar(Context* c, const char* name, u32 align, bool is_externa/;"	f
addImplicitImport	$C2_ROOT/parser/c2_parser.c2	/^fn void Parser.addImplicitImport(Parser* p, u32 mod_name, bool islocal) {$/;"	f
addImport	$C2_ROOT/ast/ast.c2	/^public fn void AST.addImport(AST* a, ImportDecl* d) {$/;"	f
addImports	$C2_ROOT/analyser/scope.c2	/^fn void Scope.addImports(Scope* s) {$/;"	f
addInitString	$C2_ROOT/ir/context.c2	/^public fn void Context.addInitString(Context* c, const char* text, u32 size) {$/;"	f
addInitSymbol	$C2_ROOT/ir/context.c2	/^public fn void Context.addInitSymbol(Context* c, SymbolId id) {$/;"	f
addInitValueU16	$C2_ROOT/ir/context.c2	/^public fn void Context.addInitValueU16(Context* c, u16 value) {$/;"	f
addInitValueU32	$C2_ROOT/ir/context.c2	/^public fn void Context.addInitValueU32(Context* c, u32 value) {$/;"	f
addInitValueU64	$C2_ROOT/ir/context.c2	/^public fn void Context.addInitValueU64(Context* c, u64 value) {$/;"	f
addInitValueU8	$C2_ROOT/ir/context.c2	/^public fn void Context.addInitValueU8(Context* c, u8 value) {$/;"	f
addInitZero	$C2_ROOT/ir/context.c2	/^public fn void Context.addInitZero(Context* c, u32 size) {$/;"	f
addInstance	$C2_ROOT/ast/module.c2	/^public fn u16 Module.addInstance(Module* m, ast.FunctionDecl* fd, QualType qt, ast.FunctionDecl*/;"	f
addInstr	$C2_ROOT/ir/inserter.c2	/^public fn u32 Inserter.addInstr(Inserter* ins, u32 loc) {$/;"	f
addIntegerConstant	$C2_ROOT/ir/context.c2	/^public fn Ref Context.addIntegerConstant(Context* c, i64 size) {$/;"	f
addInterfere	$C2_ROOT/ir/register_alloc.c2	/^fn void LiveVector.addInterfere(LiveVector* v, u16 idx) {$/;"	f
addInterfereFilter	$C2_ROOT/ir/register_alloc.c2	/^fn void LiveVector.addInterfereFilter(LiveVector* v, u32 idx) {$/;"	f
addInternal	$C2_ROOT/ir/interference_graph.c2	/^fn void InterferenceGraph.addInternal(InterferenceGraph* g, u16 var1, u16 var2) {$/;"	f
addJmpIfInstr	$C2_ROOT/ir/context.c2	/^public fn void Context.addJmpIfInstr(Context* c, Ref cond, BlockId dest1, BlockId dest2) {$/;"	f
addJmpInstr	$C2_ROOT/ir/context.c2	/^public fn void Context.addJmpInstr(Context* c, BlockId dest) {$/;"	f
addLib	$C2_ROOT/common/build_target.c2	/^public fn void Target.addLib(Target* t, u32 lib, bool is_static) {$/;"	f
addLine	$C2_ROOT/tools/tester/expect_file.c2	/^public fn void ExpectFile.addLine(ExpectFile* f, u32 line_nr, const char* start, const char* end/;"	f
addLoadInstr	$C2_ROOT/ir/context.c2	/^public fn Ref Context.addLoadInstr(Context* c, Type t, Ref src) {$/;"	f
addLocalVar	$C2_ROOT/generator/ir/ir_generator.c2	/^fn void Generator.addLocalVar(Generator* gen, VarDecl* vd) {$/;"	f
addPath	$C2_ROOT/compiler/plugin_mgr.c2	/^public fn void Mgr.addPath(Mgr* m, u32 path) {$/;"	f
addPhi2Instr	$C2_ROOT/ir/context.c2	/^public fn Ref Context.addPhi2Instr(Context* c, BlockId b1, Ref r1, BlockId b2, Ref r2) {$/;"	f
addPhiInstr	$C2_ROOT/ir/ssa.c2	/^fn Ref Tools.addPhiInstr(Tools* t, FunctionInfo* fi, const PhiClauses* cache, u32 loc, u16 slot)/;"	f
addPlugin	$C2_ROOT/common/build_file.c2	/^fn void Info.addPlugin(Info* info, const char* name, const char* options, SrcLoc loc) {$/;"	f
addPlugin	$C2_ROOT/common/build_target.c2	/^public fn void Target.addPlugin(Target* t, u32 name, u32 options, SrcLoc loc) {$/;"	f
addPlugin	$C2_ROOT/compiler/c2recipe.c2	/^fn void Recipe.addPlugin(Recipe* r, u32 name, u32 options, SrcLoc loc) {$/;"	f
addPlugin	$C2_ROOT/compiler/plugin_mgr.c2	/^fn void Mgr.addPlugin(Mgr* m, Plugin* p) {$/;"	f
addPointer	$C2_ROOT/ast/type_ref.c2	/^public fn void TypeRefHolder.addPointer(TypeRefHolder* h) {$/;"	f
addPool	$C2_ROOT/tools/tester/issues.c2	/^fn u32 Issues.addPool(Issues* i, const char* text) {$/;"	f
addResource	$C2_ROOT/common/source_mgr.c2	/^public fn i32 SourceMgr.addResource(SourceMgr* sm, const char* name, const void* data, u32 size)/;"	f
addRet0Instr	$C2_ROOT/ir/context.c2	/^public fn void Context.addRet0Instr(Context* c) {$/;"	f
addRet1Instr	$C2_ROOT/ir/context.c2	/^public fn void Context.addRet1Instr(Context* c, Ref ref) {$/;"	f
addSplitEdge	$C2_ROOT/ir/inserter.c2	/^public fn void Inserter.addSplitEdge(Inserter* ins, u32 src, u32 dest, u32 blk_id) {$/;"	f
addStackSlot	$C2_ROOT/ir/context.c2	/^public fn Ref Context.addStackSlot(Context* c, u32 align, Ref size) {$/;"	f
addStaticAssert	$C2_ROOT/ast/ast.c2	/^public fn void AST.addStaticAssert(AST* a, StaticAssert* s) {$/;"	f
addStaticAssert	$C2_ROOT/ast/statistics.c2	/^fn void Stats.addStaticAssert(u32 size) {$/;"	f
addStaticSlot	$C2_ROOT/ir/slot_collector.c2	/^fn void SlotCollector.addStaticSlot(SlotCollector* c, u16 slot) {$/;"	f
addStmt	$C2_ROOT/ast/statistics.c2	/^fn void Stats.addStmt(StmtKind kind, u32 size) {$/;"	f
addStoreInstr	$C2_ROOT/ir/context.c2	/^public fn void Context.addStoreInstr(Context* c, Type t, Ref src, Ref dest) {$/;"	f
addStr	$C2_ROOT/ast_utils/string_pool.c2	/^public fn u32 Pool.addStr(Pool* p, const char* text, bool filter) {$/;"	f
addStr	$C2_ROOT/common/string_list.c2	/^public fn void List.addStr(List* l, const char* str) {$/;"	f
addStringLiteral	$C2_ROOT/ir/context.c2	/^public fn SymbolId Context.addStringLiteral(Context* c, const char* name, const char* text, u32 /;"	f
addSwitchCase	$C2_ROOT/ast/statistics.c2	/^fn void Stats.addSwitchCase(u32 size) {$/;"	f
addSwitchInstr	$C2_ROOT/ir/context.c2	/^public fn CaseId Context.addSwitchInstr(Context* c, Ref cond, BlockId join_blk, u32 num_cases) {$/;"	f
addSymbol	$C2_ROOT/ast/module.c2	/^public fn void Module.addSymbol(Module* m, u32 name_idx, ast.Decl* d) {$/;"	f
addSymbol	$C2_ROOT/parser/ast_builder.c2	/^fn void Builder.addSymbol(Builder* b, u32 name_idx, Decl* d) {$/;"	f
addTail	$C2_ROOT/common/linked_list.c2	/^public fn void Element.addTail(Element* src, Element* item) @(unused) {$/;"	f
addTarget	$C2_ROOT/compiler/c2recipe.c2	/^public fn build_target.Target* Recipe.addTarget(Recipe* r, u32 name, SrcLoc loc, build_target.Ki/;"	f
addTemp	$C2_ROOT/ir/print.c2	/^fn u32 PrintHelper.addTemp(PrintHelper* ph, u32 local_instr_idx) {$/;"	f
addTimer	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn TimerID addTimer(u32 interval, TimerCallback callback, void* param) @(cname="SDL_AddTimer");$/;"	f
addType	$C2_ROOT/ast/statistics.c2	/^fn void Stats.addType(TypeKind kind, u32 size) {$/;"	f
addTypeDecl	$C2_ROOT/ast/ast.c2	/^public fn void AST.addTypeDecl(AST* a, Decl* d) {$/;"	f
addVarDecl	$C2_ROOT/ast/ast.c2	/^public fn void AST.addVarDecl(AST* a, Decl* d) {$/;"	f
addVariableToArenaHead	$C2_ROOT/ir/interference_graph.c2	/^fn void InterferenceGraph.addVariableToArenaHead(InterferenceGraph* g, Arena* a, u16 var_idx) {$/;"	f
addVariableToArenaHead	$C2_ROOT/ir/live_map.c2	/^fn void Map.addVariableToArenaHead(Map* g, Arena* a, u16 var_idx) {$/;"	f
addVariableToArenaTail	$C2_ROOT/ir/interference_graph.c2	/^fn void InterferenceGraph.addVariableToArenaTail(InterferenceGraph* g, Arena* a, u16 var_idx) {$/;"	f
addVariableToArenaTail	$C2_ROOT/ir/live_map.c2	/^fn void Map.addVariableToArenaTail(Map* g, Arena* a, u16 var_idx) {$/;"	f
add_dep	$C2_ROOT/common/dsm_sorter.c2	/^public fn void Sorter.add_dep(Sorter* s, u32 src, u32 dst) {$/;"	f
add_file	$C2_ROOT/generator/c2refs.c2	/^public fn void Refs.add_file(Refs* r, u32 start, u32 size, const char* filename, u32 len_start, /;"	f
add_gen_warning	$C2_ROOT/generator/c/c_generator.c2	/^fn void add_gen_warning(string_buffer.Buf* out) {$/;"	f
add_line_lengths	$C2_ROOT/generator/c2refs.c2	/^public fn u32 Refs.add_line_lengths(Refs* r, u32 count, const u8* lengths) {$/;"	f
add_link	$C2_ROOT/generator/c2refs.c2	/^public fn void Refs.add_link(Refs* r, u32 src, u32 dest, u32 len) {$/;"	f
add_node	$C2_ROOT/common/yaml/yaml_data.c2	/^fn Node* Data.add_node(Data* d, NodeKind kind, u32 name_idx) {$/;"	f
add_node	$C2_ROOT/generator/radix_tree/radix_tree.c2	/^fn u32 Tree.add_node(Tree* t, u32 num_children, u32 word_idx, u32 value) {$/;"	f
add_node	$C2_ROOT/generator/radix_tree/radix_tree_fs.c2	/^fn u32 Trimmer.add_node(Trimmer* tr, u32 num_children, u32 word_idx) {$/;"	f
add_scalar_value	$C2_ROOT/common/yaml/yaml_parser.c2	/^fn void Parser.add_scalar_value(Parser* p, u32 value_idx) {$/;"	f
add_source	$C2_ROOT/compiler/compiler.c2	/^fn void Compiler.add_source(void* arg, const char* name, string_buffer.Buf* content) {$/;"	f
add_symbol	$C2_ROOT/generator/c2refs.c2	/^public fn void Refs.add_symbol(Refs* r, const char* symbol_name, u32 src_loc) {$/;"	f
add_text	$C2_ROOT/common/yaml/yaml_data.c2	/^fn u32 Data.add_text(Data* d, const char* text, u32 len) {$/;"	f
add_word	$C2_ROOT/generator/radix_tree/radix_tree.c2	/^fn u32 Tree.add_word(Tree* t, const char* text, u32 len) {$/;"	f
add_word	$C2_ROOT/generator/radix_tree/radix_tree_fs.c2	/^fn u32 Trimmer.add_word(Trimmer* tr, const char* word) {$/;"	f
after	$C2_ROOT/ast/function_decl.c2	/^    QualType rt;          \/\/ return type after analysis$/;"	t
aligned_alloc	$C2_ROOT/libs/libc/stdlib.c2i	/^fn void* aligned_alloc(c_int __alignment, c_size __size);$/;"	f
alloc	$C2_ROOT/ast_utils/context.c2	/^public fn void* Context.alloc(Context* c, u32 len) {$/;"	f
allocBuffer	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn Buffer allocBuffer() @(cname="sg_alloc_buffer");$/;"	f
allocBuffer	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn Buffer allocBuffer() @(cname="sg_alloc_buffer");$/;"	f
allocImage	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn Image allocImage() @(cname="sg_alloc_image");$/;"	f
allocImage	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn Image allocImage() @(cname="sg_alloc_image");$/;"	f
allocPipeline	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn Pipeline allocPipeline() @(cname="sg_alloc_pipeline");$/;"	f
allocPipeline	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn Pipeline allocPipeline() @(cname="sg_alloc_pipeline");$/;"	f
allocSampler	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn Sampler allocSampler() @(cname="sg_alloc_sampler");$/;"	f
allocSampler	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn Sampler allocSampler() @(cname="sg_alloc_sampler");$/;"	f
allocShader	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn Shader allocShader() @(cname="sg_alloc_shader");$/;"	f
allocShader	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn Shader allocShader() @(cname="sg_alloc_shader");$/;"	f
allocView	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn View allocView() @(cname="sg_alloc_view");$/;"	f
allocView	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn View allocView() @(cname="sg_alloc_view");$/;"	f
allocate	$C2_ROOT/ir/interference_graph.c2	/^public fn void InterferenceGraph.allocate(InterferenceGraph* g, u32 num_args) {$/;"	f
allocateRegisters	$C2_ROOT/ir/register_alloc.c2	/^fn void Tools.allocateRegisters(Tools* t, FunctionInfo* fi) {$/;"	f
allocateVariable	$C2_ROOT/ir/interference_graph.c2	/^fn void InterferenceGraph.allocateVariable(InterferenceGraph* g, u16 var_idx) {$/;"	f
allocate_node	$C2_ROOT/generator/radix_tree/radix_tree.c2	/^fn u32 Tree.allocate_node(Tree* t, u32 node_size) {$/;"	f
allowBreak	$C2_ROOT/analyser/scope.c2	/^public fn bool Scope.allowBreak(const Scope* s) {$/;"	f
allowContinue	$C2_ROOT/analyser/scope.c2	/^public fn bool Scope.allowContinue(const Scope* s) {$/;"	f
alphasort	$C2_ROOT/libs/libc/libc_dirent.c2i	/^fn c_int alphasort(const Dirent**, const Dirent**);$/;"	f
analyseAliasType	$C2_ROOT/analyser/module_analyser_type.c2	/^fn void Analyser.analyseAliasType(Analyser* ma, AliasTypeDecl* a) {$/;"	f
analyseArrayDesignatedInit	$C2_ROOT/analyser/module_analyser_init.c2	/^fn bool Analyser.analyseArrayDesignatedInit(Analyser* ma, Expr* e, QualType expectedType) {$/;"	f
analyseArraySubscriptExpr	$C2_ROOT/analyser/module_analyser_expr.c2	/^fn QualType Analyser.analyseArraySubscriptExpr(Analyser* ma, Expr** e_ptr, u32 side) {$/;"	f
analyseAsmStmt	$C2_ROOT/analyser/module_analyser_stmt.c2	/^fn void Analyser.analyseAsmStmt(Analyser* ma, Stmt* s) {$/;"	f
analyseAssertStmt	$C2_ROOT/analyser/module_analyser_stmt.c2	/^fn void Analyser.analyseAssertStmt(Analyser* ma, Stmt* s) {$/;"	f
analyseBaseType	$C2_ROOT/analyser/module_analyser_member.c2	/^fn TypeKind Analyser.analyseBaseType(Analyser* ma, QualType baseType) {$/;"	f
analyseBinaryOperator	$C2_ROOT/analyser/module_analyser_binop.c2	/^fn QualType Analyser.analyseBinaryOperator(Analyser* ma, Expr** e_ptr) {$/;"	f
analyseBitOffsetExpr	$C2_ROOT/analyser/module_analyser_expr.c2	/^fn QualType Analyser.analyseBitOffsetExpr(Analyser* ma, QualType ltype, Expr* base, Expr* e) {$/;"	f
analyseBitOffsetIndex	$C2_ROOT/analyser/module_analyser_expr.c2	/^fn bool Analyser.analyseBitOffsetIndex(Analyser* ma, Expr** e_ptr, QualType baseType, Value* res/;"	f
analyseBreakStmt	$C2_ROOT/analyser/module_analyser_stmt.c2	/^fn void Analyser.analyseBreakStmt(Analyser* ma, Stmt* s) {$/;"	f
analyseBuiltin	$C2_ROOT/analyser/module_analyser_builtin.c2	/^fn QualType Analyser.analyseBuiltin(Analyser* ma, Expr** e_ptr) {$/;"	f
analyseCallExpr	$C2_ROOT/analyser/module_analyser_call.c2	/^fn QualType Analyser.analyseCallExpr(Analyser* ma, Expr** e_ptr) {$/;"	f
analyseCase	$C2_ROOT/analyser/module_analyser_switch.c2	/^fn FlowBits Analyser.analyseCase(Analyser* ma,$/;"	f
analyseCaseCondition	$C2_ROOT/analyser/module_analyser_switch.c2	/^fn bool Analyser.analyseCaseCondition(Analyser* ma,$/;"	f
analyseCaseExpr	$C2_ROOT/analyser/module_analyser_switch.c2	/^fn bool Analyser.analyseCaseExpr(Analyser* ma,$/;"	f
analyseCompoundStmt	$C2_ROOT/analyser/module_analyser_stmt.c2	/^fn FlowBits Analyser.analyseCompoundStmt(Analyser* ma, CompoundStmt* c) {$/;"	f
analyseCondition	$C2_ROOT/analyser/module_analyser_stmt.c2	/^fn QualType Analyser.analyseCondition(Analyser* ma, Stmt** s_ptr, bool check_assign) {$/;"	f
analyseConditionalOperator	$C2_ROOT/analyser/module_analyser_expr.c2	/^fn QualType Analyser.analyseConditionalOperator(Analyser* ma, Expr** e_ptr) {$/;"	f
analyseContinueStmt	$C2_ROOT/analyser/module_analyser_stmt.c2	/^fn void Analyser.analyseContinueStmt(Analyser* ma, Stmt* s) {$/;"	f
analyseDecl	$C2_ROOT/analyser/module_analyser_stmt.c2	/^fn QualType Analyser.analyseDecl(Analyser* ma, VarDecl* vd) {$/;"	f
analyseDeclStmt	$C2_ROOT/analyser/module_analyser_stmt.c2	/^fn QualType Analyser.analyseDeclStmt(Analyser* ma, Stmt* s) {$/;"	f
analyseElemsof	$C2_ROOT/analyser/module_analyser_builtin.c2	/^fn QualType Analyser.analyseElemsof(Analyser* ma, BuiltinExpr* b) {$/;"	f
analyseEnumMinMax	$C2_ROOT/analyser/module_analyser_builtin.c2	/^fn QualType Analyser.analyseEnumMinMax(Analyser* ma, BuiltinExpr* b) {$/;"	f
analyseEnumType	$C2_ROOT/analyser/module_analyser_type.c2	/^fn void Analyser.analyseEnumType(Analyser* ma, EnumTypeDecl* d) {$/;"	f
analyseExplicitCast	$C2_ROOT/analyser/module_analyser_expr.c2	/^fn QualType Analyser.analyseExplicitCast(Analyser* ma, Expr** e_ptr) {$/;"	f
analyseExpr	$C2_ROOT/analyser/module_analyser_expr.c2	/^fn QualType Analyser.analyseExpr(Analyser* ma, Expr** e_ptr, bool need_rvalue, u32 side) {$/;"	f
analyseExprInner	$C2_ROOT/analyser/module_analyser_expr.c2	/^fn QualType Analyser.analyseExprInner(Analyser* ma, Expr** e_ptr, u32 side) {$/;"	f
analyseFallthroughStmt	$C2_ROOT/analyser/module_analyser_stmt.c2	/^fn void Analyser.analyseFallthroughStmt(Analyser* ma, Stmt* s) {$/;"	f
analyseForStmt	$C2_ROOT/analyser/module_analyser_stmt.c2	/^fn FlowBits Analyser.analyseForStmt(Analyser* ma, Stmt* s) {$/;"	f
analyseFunction	$C2_ROOT/analyser/module_analyser_function.c2	/^fn void Analyser.analyseFunction(Analyser* ma, FunctionDecl* fd) {$/;"	f
analyseFunctionBodies	$C2_ROOT/analyser/module_analyser.c2	/^fn void Analyser.analyseFunctionBodies(void* arg, FunctionDecl* d) {$/;"	f
analyseFunctionBody	$C2_ROOT/analyser/module_analyser_function.c2	/^fn void Analyser.analyseFunctionBody(Analyser* ma, FunctionDecl* fd, scope.Scope* s) {$/;"	f
analyseFunctionProto	$C2_ROOT/analyser/module_analyser.c2	/^fn void Analyser.analyseFunctionProto(void* arg, FunctionDecl* d) {$/;"	f
analyseFunctionType	$C2_ROOT/analyser/module_analyser_type.c2	/^fn void Analyser.analyseFunctionType(Analyser* ma, Decl* d) {$/;"	f
analyseGlobalDecl	$C2_ROOT/analyser/module_analyser.c2	/^fn bool Analyser.analyseGlobalDecl(Analyser* ma, Decl* d) {$/;"	f
analyseGlobalVarDecl	$C2_ROOT/analyser/module_analyser.c2	/^fn void Analyser.analyseGlobalVarDecl(Analyser* ma, VarDecl* v) {$/;"	f
analyseGotoStmt	$C2_ROOT/analyser/module_analyser_stmt.c2	/^fn void Analyser.analyseGotoStmt(Analyser* ma, Stmt* s) {$/;"	f
analyseIdentifier	$C2_ROOT/analyser/module_analyser_expr.c2	/^fn Decl* Analyser.analyseIdentifier(Analyser* ma, Expr** e_ptr, u32 side) {$/;"	f
analyseIfStmt	$C2_ROOT/analyser/module_analyser_stmt.c2	/^fn FlowBits Analyser.analyseIfStmt(Analyser* ma, Stmt* s) {$/;"	f
analyseIncrTypeRef	$C2_ROOT/analyser/module_analyser_type.c2	/^fn QualType Analyser.analyseIncrTypeRef(Analyser* ma, TypeRef* ref, u32 size) {$/;"	f
analyseInitExpr	$C2_ROOT/analyser/module_analyser_init.c2	/^fn bool Analyser.analyseInitExpr(Analyser* ma, Expr** e_ptr, QualType expectedType, SrcLoc assig/;"	f
analyseInitListArray	$C2_ROOT/analyser/module_analyser_init.c2	/^fn bool Analyser.analyseInitListArray(Analyser* ma, InitListExpr* ile, QualType expectedType) {$/;"	f
analyseInitListExpr	$C2_ROOT/analyser/module_analyser_init.c2	/^fn bool Analyser.analyseInitListExpr(Analyser* ma, InitListExpr* ile, QualType expectedType) {$/;"	f
analyseInitListStruct	$C2_ROOT/analyser/module_analyser_init.c2	/^fn bool Analyser.analyseInitListStruct(Analyser* ma, InitListExpr* ile, QualType expectedType) {$/;"	f
analyseLabelStmt	$C2_ROOT/analyser/module_analyser_stmt.c2	/^fn FlowBits Analyser.analyseLabelStmt(Analyser* ma, Stmt* s) {$/;"	f
analyseMemberExpr	$C2_ROOT/analyser/module_analyser_member.c2	/^fn QualType Analyser.analyseMemberExpr(Analyser* ma, Expr** e_ptr, u32 side) {$/;"	f
analyseModule	$C2_ROOT/compiler/compiler.c2	/^fn void Compiler.analyseModule(void* arg, ast.Module* m) {$/;"	f
analyseOffsetOf	$C2_ROOT/analyser/module_analyser_builtin.c2	/^fn QualType Analyser.analyseOffsetOf(Analyser* ma, BuiltinExpr* b) {$/;"	f
analysePureCallExpr	$C2_ROOT/analyser/module_analyser_call.c2	/^fn QualType Analyser.analysePureCallExpr(Analyser* ma, Expr* e) {$/;"	f
analyseReturnStmt	$C2_ROOT/analyser/module_analyser_stmt.c2	/^fn void Analyser.analyseReturnStmt(Analyser* ma, Stmt* s) {$/;"	f
analyseSizeof	$C2_ROOT/analyser/module_analyser_builtin.c2	/^fn QualType Analyser.analyseSizeof(Analyser* ma, BuiltinExpr* e) {$/;"	f
analyseStmt	$C2_ROOT/analyser/module_analyser_stmt.c2	/^fn FlowBits Analyser.analyseStmt(Analyser* ma, Stmt* s, bool checkEffect) {$/;"	f
analyseStructFieldInit	$C2_ROOT/analyser/module_analyser_init.c2	/^fn bool Analyser.analyseStructFieldInit(Analyser* ma, StructTypeDecl* std, InitListExpr* ile, Qu/;"	f
analyseStructMember	$C2_ROOT/analyser/module_analyser_struct.c2	/^fn void Analyser.analyseStructMember(Analyser* ma, VarDecl* v) {$/;"	f
analyseStructMemberAccess	$C2_ROOT/analyser/module_analyser_member.c2	/^fn Decl* Analyser.analyseStructMemberAccess(Analyser* ma, StructTypeDecl* std, u32 name_idx, Src/;"	f
analyseStructMemberTypeRef	$C2_ROOT/analyser/module_analyser_type.c2	/^fn QualType Analyser.analyseStructMemberTypeRef(Analyser* ma, TypeRef* ref) {$/;"	f
analyseStructMembers	$C2_ROOT/analyser/module_analyser_struct.c2	/^fn void Analyser.analyseStructMembers(Analyser* ma, StructTypeDecl* d) {$/;"	f
analyseStructNames	$C2_ROOT/analyser/module_analyser_struct.c2	/^fn void Analyser.analyseStructNames(Analyser* ma, StructTypeDecl* d, NameVector* names, NameVect/;"	f
analyseStructType	$C2_ROOT/analyser/module_analyser_struct.c2	/^fn void Analyser.analyseStructType(Analyser* ma, StructTypeDecl* d) {$/;"	f
analyseSwitchStmt	$C2_ROOT/analyser/module_analyser_switch.c2	/^fn FlowBits Analyser.analyseSwitchStmt(Analyser* ma, Stmt* s) {$/;"	f
analyseToContainer	$C2_ROOT/analyser/module_analyser_builtin.c2	/^fn QualType Analyser.analyseToContainer(Analyser* ma, BuiltinExpr* b) {$/;"	f
analyseTypeRef	$C2_ROOT/analyser/module_analyser_type.c2	/^fn QualType Analyser.analyseTypeRef(Analyser* ma, TypeRef* ref) {$/;"	f
analyseUnaryOperator	$C2_ROOT/analyser/module_analyser_unaryop.c2	/^fn QualType Analyser.analyseUnaryOperator(Analyser* ma, Expr** e_ptr, u32 side) {$/;"	f
analyseUsedModule	$C2_ROOT/compiler/compiler.c2	/^fn void Compiler.analyseUsedModule(void* arg, ast.Module* m) {$/;"	f
analyseUserTypeRef	$C2_ROOT/analyser/module_analyser_type.c2	/^fn QualType Analyser.analyseUserTypeRef(Analyser* ma, TypeRef* ref) {$/;"	f
analyseWhileStmt	$C2_ROOT/analyser/module_analyser_stmt.c2	/^fn FlowBits Analyser.analyseWhileStmt(Analyser* ma, Stmt* s) {$/;"	f
analyse_lib	$C2_ROOT/compiler/compiler_libs.c2	/^fn void Compiler.analyse_lib(Compiler* c, Component* comp) {$/;"	f
and	$C2_ROOT/ast/value.c2	/^fn Value Value.and(const Value* v1, const Value* v2) {$/;"	f
and	$C2_ROOT/libs/sokol/c/sokol_gfx.h	/^    sg_image_sample_type and sg_sampler_type for a texture\/sampler$/;"	t
and	$C2_ROOT/libs/sokol/c/sokol_gl.h	/^        The similarity with sokol_gfx.h's sg_pipeline type and sg_make_pipeline()$/;"	t
and	$C2_ROOT/libs/sokol/c/sokol_log.h	/^    enough information to identify the type and location of an error:$/;"	t
and	$C2_ROOT/libs/sokol_/c/sokol_gfx.h	/^    sg_image_sample_type and sg_sampler_type for a texture\/sampler$/;"	t
and	$C2_ROOT/libs/sokol_/c/sokol_gl.h	/^        The similarity with sokol_gfx.h's sg_pipeline type and sg_make_pipeline()$/;"	t
and	$C2_ROOT/libs/sokol_/c/sokol_log.h	/^    enough information to identify the type and location of an error:$/;"	t
androidGetNativeActivity	$C2_ROOT/libs/sokol/sokol_app.c2i	/^fn void* androidGetNativeActivity() @(cname="sapp_android_get_native_activity");$/;"	f
androidGetNativeActivity	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^fn void* androidGetNativeActivity() @(cname="sapp_android_get_native_activity");$/;"	f
append	$C2_ROOT/tools/tester/test_utils.c2	/^public fn bool append(char* dest, u32 size, const char* tail) {$/;"	f
appendBuffer	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn c_int appendBuffer(Buffer buf, Range* data) @(cname="sg_append_buffer");$/;"	f
appendBuffer	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn c_int appendBuffer(Buffer buf, Range* data) @(cname="sg_append_buffer");$/;"	f
applyAttribute	$C2_ROOT/parser/ast_builder.c2	/^fn void Builder.applyAttribute(Builder* b, Decl* d, const Attr* a) {$/;"	f
applyAttributes	$C2_ROOT/parser/ast_builder.c2	/^public fn void Builder.applyAttributes(Builder* b, Decl* d) {$/;"	f
applyBindings	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn void applyBindings(Bindings* bindings) @(cname="sg_apply_bindings");$/;"	f
applyBindings	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn void applyBindings(Bindings* bindings) @(cname="sg_apply_bindings");$/;"	f
applyPipeline	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn void applyPipeline(Pipeline pip) @(cname="sg_apply_pipeline");$/;"	f
applyPipeline	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn void applyPipeline(Pipeline pip) @(cname="sg_apply_pipeline");$/;"	f
applyScissorRect	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn void applyScissorRect(c_int x, c_int y, c_int width, c_int height, bool origin_top_left) @(cn/;"	f
applyScissorRect	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn void applyScissorRect(c_int x, c_int y, c_int width, c_int height, bool origin_top_left) @(cn/;"	f
applyScissorRectf	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn void applyScissorRectf(c_float x, c_float y, c_float width, c_float height, bool origin_top_l/;"	f
applyScissorRectf	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn void applyScissorRectf(c_float x, c_float y, c_float width, c_float height, bool origin_top_l/;"	f
applyUniforms	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn void applyUniforms(c_int ub_slot, Range* data) @(cname="sg_apply_uniforms");$/;"	f
applyUniforms	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn void applyUniforms(c_int ub_slot, Range* data) @(cname="sg_apply_uniforms");$/;"	f
applyViewport	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn void applyViewport(c_int x, c_int y, c_int width, c_int height, bool origin_top_left) @(cname/;"	f
applyViewport	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn void applyViewport(c_int x, c_int y, c_int width, c_int height, bool origin_top_left) @(cname/;"	f
applyViewportf	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn void applyViewportf(c_float x, c_float y, c_float width, c_float height, bool origin_top_left/;"	f
applyViewportf	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn void applyViewportf(c_float x, c_float y, c_float width, c_float height, bool origin_top_left/;"	f
arith	$C2_ROOT/libs/lua/lua.c2i	/^fn void arith(State *L, c_int op) @(cname="lua_arith");$/;"	f
array_init_sorter	$C2_ROOT/generator/ir/array_init_sorter.c2	/^module array_init_sorter;$/;"	m
as	$C2_ROOT/ast/function_decl.c2	/^    TypeRef rtype;        \/\/ return type as in code. note: variable size!$/;"	t
asDecl	$C2_ROOT/ast/alias_type_decl.c2	/^public fn Decl* AliasTypeDecl.asDecl(AliasTypeDecl* d) {$/;"	f
asDecl	$C2_ROOT/ast/enum_constant_decl.c2	/^public fn Decl* EnumConstantDecl.asDecl(EnumConstantDecl* d) {$/;"	f
asDecl	$C2_ROOT/ast/enum_type_decl.c2	/^public fn Decl* EnumTypeDecl.asDecl(EnumTypeDecl* d) { return &d.base; }$/;"	f
asDecl	$C2_ROOT/ast/function_decl.c2	/^public fn Decl* FunctionDecl.asDecl(FunctionDecl* d) {$/;"	f
asDecl	$C2_ROOT/ast/function_type_decl.c2	/^public fn Decl* FunctionTypeDecl.asDecl(FunctionTypeDecl* t) {$/;"	f
asDecl	$C2_ROOT/ast/import_decl.c2	/^public fn Decl* ImportDecl.asDecl(ImportDecl* d) { return &d.base; }$/;"	f
asDecl	$C2_ROOT/ast/struct_type_decl.c2	/^public fn Decl* StructTypeDecl.asDecl(StructTypeDecl* d) {$/;"	f
asDecl	$C2_ROOT/ast/var_decl.c2	/^public fn Decl* VarDecl.asDecl(VarDecl* d) {$/;"	f
asExpr	$C2_ROOT/ast/identifier_expr.c2	/^public fn Expr* IdentifierExpr.asExpr(IdentifierExpr* e) { return &e.base; }$/;"	f
asStmt	$C2_ROOT/ast/expr.c2	/^public fn Stmt* Expr.asStmt(Expr* e) { return &e.base; }$/;"	f
asType	$C2_ROOT/ast/function_type.c2	/^fn Type* FunctionType.asType(FunctionType* t) { return &t.base; }$/;"	f
asType	$C2_ROOT/ast/struct_type.c2	/^fn Type* StructType.asType(StructType* t) { return &t.base; }$/;"	f
as_i32	$C2_ROOT/ast/value.c2	/^public fn i32 Value.as_i32(const Value* v) @(unused) {$/;"	f
as_u16	$C2_ROOT/ast/value.c2	/^public fn u16 Value.as_u16(const Value* v) {$/;"	f
as_u32	$C2_ROOT/ast/value.c2	/^public fn u32 Value.as_u32(const Value* v) {$/;"	f
as_u64	$C2_ROOT/ast/value.c2	/^public fn u64 Value.as_u64(const Value* v) {$/;"	f
as_u8	$C2_ROOT/ast/value.c2	/^public fn u8 Value.as_u8(const Value* v) {$/;"	f
asctime	$C2_ROOT/libs/libc/libc_time.c2i	/^fn c_char* asctime(const Tm* tm);$/;"	f
asctime_r	$C2_ROOT/libs/libc/libc_time.c2i	/^fn c_char* asctime_r(const Tm* tm, c_char* buf);$/;"	f
asin	$C2_ROOT/libs/math/math.c2i	/^fn c_double asin(c_double);$/;"	f
asinf	$C2_ROOT/libs/math/math.c2i	/^fn c_float asinf(c_float);$/;"	f
asinh	$C2_ROOT/libs/math/math.c2i	/^fn c_double asinh(c_double);$/;"	f
asinhf	$C2_ROOT/libs/math/math.c2i	/^fn c_float asinhf(c_float);$/;"	f
asprintf	$C2_ROOT/libs/libc/stdio.c2i	/^fn c_int asprintf(c_char**, const c_char* @(printf_format), ...);$/;"	f
ast	$C2_ROOT/ast/alias_type.c2	/^module ast;$/;"	m
ast	$C2_ROOT/ast/alias_type_decl.c2	/^module ast;$/;"	m
ast	$C2_ROOT/ast/array_designated_init_expr.c2	/^module ast;$/;"	m
ast	$C2_ROOT/ast/array_subscript_expr.c2	/^module ast;$/;"	m
ast	$C2_ROOT/ast/array_type.c2	/^module ast;$/;"	m
ast	$C2_ROOT/ast/array_value.c2	/^module ast;$/;"	m
ast	$C2_ROOT/ast/array_value_list.c2	/^module ast;$/;"	m
ast	$C2_ROOT/ast/asm_stmt.c2	/^module ast;$/;"	m
ast	$C2_ROOT/ast/assert_stmt.c2	/^module ast;$/;"	m
ast	$C2_ROOT/ast/ast.c2	/^module ast;$/;"	m
ast	$C2_ROOT/ast/ast_evaluator.c2	/^module ast;$/;"	m
ast	$C2_ROOT/ast/binary_operator.c2	/^module ast;$/;"	m
ast	$C2_ROOT/ast/bitoffset_expr.c2	/^module ast;$/;"	m
ast	$C2_ROOT/ast/boolean_literal.c2	/^module ast;$/;"	m
ast	$C2_ROOT/ast/break_stmt.c2	/^module ast;$/;"	m
ast	$C2_ROOT/ast/builtin_expr.c2	/^module ast;$/;"	m
ast	$C2_ROOT/ast/builtin_type.c2	/^module ast;$/;"	m
ast	$C2_ROOT/ast/call_expr.c2	/^module ast;$/;"	m
ast	$C2_ROOT/ast/char_literal.c2	/^module ast;$/;"	m
ast	$C2_ROOT/ast/compound_stmt.c2	/^module ast;$/;"	m
ast	$C2_ROOT/ast/conditional_operator.c2	/^module ast;$/;"	m
ast	$C2_ROOT/ast/continue_stmt.c2	/^module ast;$/;"	m
ast	$C2_ROOT/ast/decl.c2	/^module ast;$/;"	m
ast	$C2_ROOT/ast/decl_list.c2	/^module ast;$/;"	m
ast	$C2_ROOT/ast/decl_stmt.c2	/^module ast;$/;"	m
ast	$C2_ROOT/ast/enum_constant_decl.c2	/^module ast;$/;"	m
ast	$C2_ROOT/ast/enum_type.c2	/^module ast;$/;"	m
ast	$C2_ROOT/ast/enum_type_decl.c2	/^module ast;$/;"	m
ast	$C2_ROOT/ast/explicit_cast_expr.c2	/^module ast;$/;"	m
ast	$C2_ROOT/ast/expr.c2	/^module ast;$/;"	m
ast	$C2_ROOT/ast/expr_list.c2	/^module ast;$/;"	m
ast	$C2_ROOT/ast/fallthrough_stmt.c2	/^module ast;$/;"	m
ast	$C2_ROOT/ast/field_designated_init_expr.c2	/^module ast;$/;"	m
ast	$C2_ROOT/ast/float_literal.c2	/^module ast;$/;"	m
ast	$C2_ROOT/ast/for_stmt.c2	/^module ast;$/;"	m
ast	$C2_ROOT/ast/function_decl.c2	/^module ast;$/;"	m
ast	$C2_ROOT/ast/function_decl_list.c2	/^module ast;$/;"	m
ast	$C2_ROOT/ast/function_type.c2	/^module ast;$/;"	m
ast	$C2_ROOT/ast/function_type_decl.c2	/^module ast;$/;"	m
ast	$C2_ROOT/ast/goto_stmt.c2	/^module ast;$/;"	m
ast	$C2_ROOT/ast/identifier_expr.c2	/^module ast;$/;"	m
ast	$C2_ROOT/ast/if_stmt.c2	/^module ast;$/;"	m
ast	$C2_ROOT/ast/implicit_cast_expr.c2	/^module ast;$/;"	m
ast	$C2_ROOT/ast/import_decl.c2	/^module ast;$/;"	m
ast	$C2_ROOT/ast/import_decl_list.c2	/^module ast;$/;"	m
ast	$C2_ROOT/ast/init_list_expr.c2	/^module ast;$/;"	m
ast	$C2_ROOT/ast/instance_table.c2	/^module ast;$/;"	m
ast	$C2_ROOT/ast/instantiator.c2	/^module ast;$/;"	m
ast	$C2_ROOT/ast/integer_literal.c2	/^module ast;$/;"	m
ast	$C2_ROOT/ast/label_stmt.c2	/^module ast;$/;"	m
ast	$C2_ROOT/ast/member_expr.c2	/^module ast;$/;"	m
ast	$C2_ROOT/ast/module.c2	/^module ast;$/;"	m
ast	$C2_ROOT/ast/module_type.c2	/^module ast;$/;"	m
ast	$C2_ROOT/ast/nil_expr.c2	/^module ast;$/;"	m
ast	$C2_ROOT/ast/paren_expr.c2	/^module ast;$/;"	m
ast	$C2_ROOT/ast/pointer_pool.c2	/^module ast;$/;"	m
ast	$C2_ROOT/ast/pointer_type.c2	/^module ast;$/;"	m
ast	$C2_ROOT/ast/qualtype.c2	/^module ast;$/;"	m
ast	$C2_ROOT/ast/range_expr.c2	/^module ast;$/;"	m
ast	$C2_ROOT/ast/return_stmt.c2	/^module ast;$/;"	m
ast	$C2_ROOT/ast/static_assert.c2	/^module ast;$/;"	m
ast	$C2_ROOT/ast/static_assert_list.c2	/^module ast;$/;"	m
ast	$C2_ROOT/ast/statistics.c2	/^module ast;$/;"	m
ast	$C2_ROOT/ast/stmt.c2	/^module ast;$/;"	m
ast	$C2_ROOT/ast/string_literal.c2	/^module ast;$/;"	m
ast	$C2_ROOT/ast/string_type_pool.c2	/^module ast;$/;"	m
ast	$C2_ROOT/ast/struct_type.c2	/^module ast;$/;"	m
ast	$C2_ROOT/ast/struct_type_decl.c2	/^module ast;$/;"	m
ast	$C2_ROOT/ast/switch_case.c2	/^module ast;$/;"	m
ast	$C2_ROOT/ast/switch_stmt.c2	/^module ast;$/;"	m
ast	$C2_ROOT/ast/symbol_table.c2	/^module ast;$/;"	m
ast	$C2_ROOT/ast/type.c2	/^module ast;$/;"	m
ast	$C2_ROOT/ast/type_expr.c2	/^module ast;$/;"	m
ast	$C2_ROOT/ast/type_ref.c2	/^module ast;$/;"	m
ast	$C2_ROOT/ast/unary_operator.c2	/^module ast;$/;"	m
ast	$C2_ROOT/ast/utils.c2	/^module ast;$/;"	m
ast	$C2_ROOT/ast/value.c2	/^module ast;$/;"	m
ast	$C2_ROOT/ast/var_decl.c2	/^module ast;$/;"	m
ast	$C2_ROOT/ast/while_stmt.c2	/^module ast;$/;"	m
ast2idx	$C2_ROOT/ast/utils.c2	/^public fn u32 ast2idx(const AST* ast_) {$/;"	f
ast_BinaryOpcode_Add	$C2_ROOT/bootstrap/bootstrap.c	/^   [ast_BinaryOpcode_Add] = c2_prec_Prec_Additive,$/;"	v
ast_BinaryOpcode_Add	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [ast_BinaryOpcode_Add] = c2_prec_Prec_Additive,$/;"	v
ast_BinaryOpcode_Add	$C2_ROOT/output/c2c/cgen/build.c	/^   [ast_BinaryOpcode_Add] = c_prec_C_Prec_Additive,$/;"	v
ast_BinaryOpcode_Add	$C2_ROOT/output/c2c/cgen/c2_prec.c	/^   [ast_BinaryOpcode_Add] = c2_prec_Prec_Additive,$/;"	v
ast_BinaryOpcode_Add	$C2_ROOT/output/c2c/cgen/c_prec.c	/^   [ast_BinaryOpcode_Add] = c_prec_C_Prec_Additive,$/;"	v
ast_BinaryOpcode_Add	$C2_ROOT/output/c2c_trace/cgen/c2_prec.c	/^   [ast_BinaryOpcode_Add] = c2_prec_Prec_Additive,$/;"	v
ast_BinaryOpcode_Add	$C2_ROOT/output/c2c_trace/cgen/c_prec.c	/^   [ast_BinaryOpcode_Add] = c_prec_C_Prec_Additive,$/;"	v
ast_BinaryOpcode_AddAssign	$C2_ROOT/bootstrap/bootstrap.c	/^   [ast_BinaryOpcode_AddAssign] = c2_prec_Prec_Assignment,$/;"	v
ast_BinaryOpcode_AddAssign	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [ast_BinaryOpcode_AddAssign] = c2_prec_Prec_Assignment,$/;"	v
ast_BinaryOpcode_AddAssign	$C2_ROOT/output/c2c/cgen/build.c	/^   [ast_BinaryOpcode_AddAssign] = c_prec_C_Prec_Assignment,$/;"	v
ast_BinaryOpcode_AddAssign	$C2_ROOT/output/c2c/cgen/c2_prec.c	/^   [ast_BinaryOpcode_AddAssign] = c2_prec_Prec_Assignment,$/;"	v
ast_BinaryOpcode_AddAssign	$C2_ROOT/output/c2c/cgen/c_prec.c	/^   [ast_BinaryOpcode_AddAssign] = c_prec_C_Prec_Assignment,$/;"	v
ast_BinaryOpcode_AddAssign	$C2_ROOT/output/c2c_trace/cgen/c2_prec.c	/^   [ast_BinaryOpcode_AddAssign] = c2_prec_Prec_Assignment,$/;"	v
ast_BinaryOpcode_AddAssign	$C2_ROOT/output/c2c_trace/cgen/c_prec.c	/^   [ast_BinaryOpcode_AddAssign] = c_prec_C_Prec_Assignment,$/;"	v
ast_BinaryOpcode_And	$C2_ROOT/bootstrap/bootstrap.c	/^   [ast_BinaryOpcode_And] = c2_prec_Prec_Bitwise,$/;"	v
ast_BinaryOpcode_And	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [ast_BinaryOpcode_And] = c2_prec_Prec_Bitwise,$/;"	v
ast_BinaryOpcode_And	$C2_ROOT/output/c2c/cgen/build.c	/^   [ast_BinaryOpcode_And] = c_prec_C_Prec_And,$/;"	v
ast_BinaryOpcode_And	$C2_ROOT/output/c2c/cgen/c2_prec.c	/^   [ast_BinaryOpcode_And] = c2_prec_Prec_Bitwise,$/;"	v
ast_BinaryOpcode_And	$C2_ROOT/output/c2c/cgen/c_prec.c	/^   [ast_BinaryOpcode_And] = c_prec_C_Prec_And,$/;"	v
ast_BinaryOpcode_And	$C2_ROOT/output/c2c_trace/cgen/c2_prec.c	/^   [ast_BinaryOpcode_And] = c2_prec_Prec_Bitwise,$/;"	v
ast_BinaryOpcode_And	$C2_ROOT/output/c2c_trace/cgen/c_prec.c	/^   [ast_BinaryOpcode_And] = c_prec_C_Prec_And,$/;"	v
ast_BinaryOpcode_AndAssign	$C2_ROOT/bootstrap/bootstrap.c	/^   [ast_BinaryOpcode_AndAssign] = c2_prec_Prec_Assignment,$/;"	v
ast_BinaryOpcode_AndAssign	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [ast_BinaryOpcode_AndAssign] = c2_prec_Prec_Assignment,$/;"	v
ast_BinaryOpcode_AndAssign	$C2_ROOT/output/c2c/cgen/build.c	/^   [ast_BinaryOpcode_AndAssign] = c_prec_C_Prec_Assignment,$/;"	v
ast_BinaryOpcode_AndAssign	$C2_ROOT/output/c2c/cgen/c2_prec.c	/^   [ast_BinaryOpcode_AndAssign] = c2_prec_Prec_Assignment,$/;"	v
ast_BinaryOpcode_AndAssign	$C2_ROOT/output/c2c/cgen/c_prec.c	/^   [ast_BinaryOpcode_AndAssign] = c_prec_C_Prec_Assignment,$/;"	v
ast_BinaryOpcode_AndAssign	$C2_ROOT/output/c2c_trace/cgen/c2_prec.c	/^   [ast_BinaryOpcode_AndAssign] = c2_prec_Prec_Assignment,$/;"	v
ast_BinaryOpcode_AndAssign	$C2_ROOT/output/c2c_trace/cgen/c_prec.c	/^   [ast_BinaryOpcode_AndAssign] = c_prec_C_Prec_Assignment,$/;"	v
ast_BinaryOpcode_Assign	$C2_ROOT/bootstrap/bootstrap.c	/^   [ast_BinaryOpcode_Assign] = c2_prec_Prec_Assignment,$/;"	v
ast_BinaryOpcode_Assign	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [ast_BinaryOpcode_Assign] = c2_prec_Prec_Assignment,$/;"	v
ast_BinaryOpcode_Assign	$C2_ROOT/output/c2c/cgen/build.c	/^   [ast_BinaryOpcode_Assign] = c_prec_C_Prec_Assignment,$/;"	v
ast_BinaryOpcode_Assign	$C2_ROOT/output/c2c/cgen/c2_prec.c	/^   [ast_BinaryOpcode_Assign] = c2_prec_Prec_Assignment,$/;"	v
ast_BinaryOpcode_Assign	$C2_ROOT/output/c2c/cgen/c_prec.c	/^   [ast_BinaryOpcode_Assign] = c_prec_C_Prec_Assignment,$/;"	v
ast_BinaryOpcode_Assign	$C2_ROOT/output/c2c_trace/cgen/c2_prec.c	/^   [ast_BinaryOpcode_Assign] = c2_prec_Prec_Assignment,$/;"	v
ast_BinaryOpcode_Assign	$C2_ROOT/output/c2c_trace/cgen/c_prec.c	/^   [ast_BinaryOpcode_Assign] = c_prec_C_Prec_Assignment,$/;"	v
ast_BinaryOpcode_DivAssign	$C2_ROOT/bootstrap/bootstrap.c	/^   [ast_BinaryOpcode_DivAssign] = c2_prec_Prec_Assignment,$/;"	v
ast_BinaryOpcode_DivAssign	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [ast_BinaryOpcode_DivAssign] = c2_prec_Prec_Assignment,$/;"	v
ast_BinaryOpcode_DivAssign	$C2_ROOT/output/c2c/cgen/build.c	/^   [ast_BinaryOpcode_DivAssign] = c_prec_C_Prec_Assignment,$/;"	v
ast_BinaryOpcode_DivAssign	$C2_ROOT/output/c2c/cgen/c2_prec.c	/^   [ast_BinaryOpcode_DivAssign] = c2_prec_Prec_Assignment,$/;"	v
ast_BinaryOpcode_DivAssign	$C2_ROOT/output/c2c/cgen/c_prec.c	/^   [ast_BinaryOpcode_DivAssign] = c_prec_C_Prec_Assignment,$/;"	v
ast_BinaryOpcode_DivAssign	$C2_ROOT/output/c2c_trace/cgen/c2_prec.c	/^   [ast_BinaryOpcode_DivAssign] = c2_prec_Prec_Assignment,$/;"	v
ast_BinaryOpcode_DivAssign	$C2_ROOT/output/c2c_trace/cgen/c_prec.c	/^   [ast_BinaryOpcode_DivAssign] = c_prec_C_Prec_Assignment,$/;"	v
ast_BinaryOpcode_Divide	$C2_ROOT/bootstrap/bootstrap.c	/^   [ast_BinaryOpcode_Divide] = c2_prec_Prec_Multiplicative,$/;"	v
ast_BinaryOpcode_Divide	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [ast_BinaryOpcode_Divide] = c2_prec_Prec_Multiplicative,$/;"	v
ast_BinaryOpcode_Divide	$C2_ROOT/output/c2c/cgen/build.c	/^   [ast_BinaryOpcode_Divide] = c_prec_C_Prec_Multiplicative,$/;"	v
ast_BinaryOpcode_Divide	$C2_ROOT/output/c2c/cgen/c2_prec.c	/^   [ast_BinaryOpcode_Divide] = c2_prec_Prec_Multiplicative,$/;"	v
ast_BinaryOpcode_Divide	$C2_ROOT/output/c2c/cgen/c_prec.c	/^   [ast_BinaryOpcode_Divide] = c_prec_C_Prec_Multiplicative,$/;"	v
ast_BinaryOpcode_Divide	$C2_ROOT/output/c2c_trace/cgen/c2_prec.c	/^   [ast_BinaryOpcode_Divide] = c2_prec_Prec_Multiplicative,$/;"	v
ast_BinaryOpcode_Divide	$C2_ROOT/output/c2c_trace/cgen/c_prec.c	/^   [ast_BinaryOpcode_Divide] = c_prec_C_Prec_Multiplicative,$/;"	v
ast_BinaryOpcode_Equal	$C2_ROOT/bootstrap/bootstrap.c	/^   [ast_BinaryOpcode_Equal] = c2_prec_Prec_Relational,$/;"	v
ast_BinaryOpcode_Equal	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [ast_BinaryOpcode_Equal] = c2_prec_Prec_Relational,$/;"	v
ast_BinaryOpcode_Equal	$C2_ROOT/output/c2c/cgen/build.c	/^   [ast_BinaryOpcode_Equal] = c_prec_C_Prec_Equality,$/;"	v
ast_BinaryOpcode_Equal	$C2_ROOT/output/c2c/cgen/c2_prec.c	/^   [ast_BinaryOpcode_Equal] = c2_prec_Prec_Relational,$/;"	v
ast_BinaryOpcode_Equal	$C2_ROOT/output/c2c/cgen/c_prec.c	/^   [ast_BinaryOpcode_Equal] = c_prec_C_Prec_Equality,$/;"	v
ast_BinaryOpcode_Equal	$C2_ROOT/output/c2c_trace/cgen/c2_prec.c	/^   [ast_BinaryOpcode_Equal] = c2_prec_Prec_Relational,$/;"	v
ast_BinaryOpcode_Equal	$C2_ROOT/output/c2c_trace/cgen/c_prec.c	/^   [ast_BinaryOpcode_Equal] = c_prec_C_Prec_Equality,$/;"	v
ast_BinaryOpcode_GreaterEqual	$C2_ROOT/bootstrap/bootstrap.c	/^   [ast_BinaryOpcode_GreaterEqual] = c2_prec_Prec_Relational,$/;"	v
ast_BinaryOpcode_GreaterEqual	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [ast_BinaryOpcode_GreaterEqual] = c2_prec_Prec_Relational,$/;"	v
ast_BinaryOpcode_GreaterEqual	$C2_ROOT/output/c2c/cgen/build.c	/^   [ast_BinaryOpcode_GreaterEqual] = c_prec_C_Prec_Relative,$/;"	v
ast_BinaryOpcode_GreaterEqual	$C2_ROOT/output/c2c/cgen/c2_prec.c	/^   [ast_BinaryOpcode_GreaterEqual] = c2_prec_Prec_Relational,$/;"	v
ast_BinaryOpcode_GreaterEqual	$C2_ROOT/output/c2c/cgen/c_prec.c	/^   [ast_BinaryOpcode_GreaterEqual] = c_prec_C_Prec_Relative,$/;"	v
ast_BinaryOpcode_GreaterEqual	$C2_ROOT/output/c2c_trace/cgen/c2_prec.c	/^   [ast_BinaryOpcode_GreaterEqual] = c2_prec_Prec_Relational,$/;"	v
ast_BinaryOpcode_GreaterEqual	$C2_ROOT/output/c2c_trace/cgen/c_prec.c	/^   [ast_BinaryOpcode_GreaterEqual] = c_prec_C_Prec_Relative,$/;"	v
ast_BinaryOpcode_GreaterThan	$C2_ROOT/bootstrap/bootstrap.c	/^   [ast_BinaryOpcode_GreaterThan] = c2_prec_Prec_Relational,$/;"	v
ast_BinaryOpcode_GreaterThan	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [ast_BinaryOpcode_GreaterThan] = c2_prec_Prec_Relational,$/;"	v
ast_BinaryOpcode_GreaterThan	$C2_ROOT/output/c2c/cgen/build.c	/^   [ast_BinaryOpcode_GreaterThan] = c_prec_C_Prec_Relative,$/;"	v
ast_BinaryOpcode_GreaterThan	$C2_ROOT/output/c2c/cgen/c2_prec.c	/^   [ast_BinaryOpcode_GreaterThan] = c2_prec_Prec_Relational,$/;"	v
ast_BinaryOpcode_GreaterThan	$C2_ROOT/output/c2c/cgen/c_prec.c	/^   [ast_BinaryOpcode_GreaterThan] = c_prec_C_Prec_Relative,$/;"	v
ast_BinaryOpcode_GreaterThan	$C2_ROOT/output/c2c_trace/cgen/c2_prec.c	/^   [ast_BinaryOpcode_GreaterThan] = c2_prec_Prec_Relational,$/;"	v
ast_BinaryOpcode_GreaterThan	$C2_ROOT/output/c2c_trace/cgen/c_prec.c	/^   [ast_BinaryOpcode_GreaterThan] = c_prec_C_Prec_Relative,$/;"	v
ast_BinaryOpcode_LAnd	$C2_ROOT/bootstrap/bootstrap.c	/^   [ast_BinaryOpcode_LAnd] = c2_prec_Prec_LogicalAndOr,$/;"	v
ast_BinaryOpcode_LAnd	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [ast_BinaryOpcode_LAnd] = c2_prec_Prec_LogicalAndOr,$/;"	v
ast_BinaryOpcode_LAnd	$C2_ROOT/output/c2c/cgen/build.c	/^   [ast_BinaryOpcode_LAnd] = c_prec_C_Prec_LogicalAnd,$/;"	v
ast_BinaryOpcode_LAnd	$C2_ROOT/output/c2c/cgen/c2_prec.c	/^   [ast_BinaryOpcode_LAnd] = c2_prec_Prec_LogicalAndOr,$/;"	v
ast_BinaryOpcode_LAnd	$C2_ROOT/output/c2c/cgen/c_prec.c	/^   [ast_BinaryOpcode_LAnd] = c_prec_C_Prec_LogicalAnd,$/;"	v
ast_BinaryOpcode_LAnd	$C2_ROOT/output/c2c_trace/cgen/c2_prec.c	/^   [ast_BinaryOpcode_LAnd] = c2_prec_Prec_LogicalAndOr,$/;"	v
ast_BinaryOpcode_LAnd	$C2_ROOT/output/c2c_trace/cgen/c_prec.c	/^   [ast_BinaryOpcode_LAnd] = c_prec_C_Prec_LogicalAnd,$/;"	v
ast_BinaryOpcode_LOr	$C2_ROOT/bootstrap/bootstrap.c	/^   [ast_BinaryOpcode_LOr] = c2_prec_Prec_LogicalAndOr,$/;"	v
ast_BinaryOpcode_LOr	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [ast_BinaryOpcode_LOr] = c2_prec_Prec_LogicalAndOr,$/;"	v
ast_BinaryOpcode_LOr	$C2_ROOT/output/c2c/cgen/build.c	/^   [ast_BinaryOpcode_LOr] = c_prec_C_Prec_LogicalOr,$/;"	v
ast_BinaryOpcode_LOr	$C2_ROOT/output/c2c/cgen/c2_prec.c	/^   [ast_BinaryOpcode_LOr] = c2_prec_Prec_LogicalAndOr,$/;"	v
ast_BinaryOpcode_LOr	$C2_ROOT/output/c2c/cgen/c_prec.c	/^   [ast_BinaryOpcode_LOr] = c_prec_C_Prec_LogicalOr,$/;"	v
ast_BinaryOpcode_LOr	$C2_ROOT/output/c2c_trace/cgen/c2_prec.c	/^   [ast_BinaryOpcode_LOr] = c2_prec_Prec_LogicalAndOr,$/;"	v
ast_BinaryOpcode_LOr	$C2_ROOT/output/c2c_trace/cgen/c_prec.c	/^   [ast_BinaryOpcode_LOr] = c_prec_C_Prec_LogicalOr,$/;"	v
ast_BinaryOpcode_LessEqual	$C2_ROOT/bootstrap/bootstrap.c	/^   [ast_BinaryOpcode_LessEqual] = c2_prec_Prec_Relational,$/;"	v
ast_BinaryOpcode_LessEqual	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [ast_BinaryOpcode_LessEqual] = c2_prec_Prec_Relational,$/;"	v
ast_BinaryOpcode_LessEqual	$C2_ROOT/output/c2c/cgen/build.c	/^   [ast_BinaryOpcode_LessEqual] = c_prec_C_Prec_Relative,$/;"	v
ast_BinaryOpcode_LessEqual	$C2_ROOT/output/c2c/cgen/c2_prec.c	/^   [ast_BinaryOpcode_LessEqual] = c2_prec_Prec_Relational,$/;"	v
ast_BinaryOpcode_LessEqual	$C2_ROOT/output/c2c/cgen/c_prec.c	/^   [ast_BinaryOpcode_LessEqual] = c_prec_C_Prec_Relative,$/;"	v
ast_BinaryOpcode_LessEqual	$C2_ROOT/output/c2c_trace/cgen/c2_prec.c	/^   [ast_BinaryOpcode_LessEqual] = c2_prec_Prec_Relational,$/;"	v
ast_BinaryOpcode_LessEqual	$C2_ROOT/output/c2c_trace/cgen/c_prec.c	/^   [ast_BinaryOpcode_LessEqual] = c_prec_C_Prec_Relative,$/;"	v
ast_BinaryOpcode_LessThan	$C2_ROOT/bootstrap/bootstrap.c	/^   [ast_BinaryOpcode_LessThan] = c2_prec_Prec_Relational,$/;"	v
ast_BinaryOpcode_LessThan	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [ast_BinaryOpcode_LessThan] = c2_prec_Prec_Relational,$/;"	v
ast_BinaryOpcode_LessThan	$C2_ROOT/output/c2c/cgen/build.c	/^   [ast_BinaryOpcode_LessThan] = c_prec_C_Prec_Relative,$/;"	v
ast_BinaryOpcode_LessThan	$C2_ROOT/output/c2c/cgen/c2_prec.c	/^   [ast_BinaryOpcode_LessThan] = c2_prec_Prec_Relational,$/;"	v
ast_BinaryOpcode_LessThan	$C2_ROOT/output/c2c/cgen/c_prec.c	/^   [ast_BinaryOpcode_LessThan] = c_prec_C_Prec_Relative,$/;"	v
ast_BinaryOpcode_LessThan	$C2_ROOT/output/c2c_trace/cgen/c2_prec.c	/^   [ast_BinaryOpcode_LessThan] = c2_prec_Prec_Relational,$/;"	v
ast_BinaryOpcode_LessThan	$C2_ROOT/output/c2c_trace/cgen/c_prec.c	/^   [ast_BinaryOpcode_LessThan] = c_prec_C_Prec_Relative,$/;"	v
ast_BinaryOpcode_MulAssign	$C2_ROOT/bootstrap/bootstrap.c	/^   [ast_BinaryOpcode_MulAssign] = c2_prec_Prec_Assignment,$/;"	v
ast_BinaryOpcode_MulAssign	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [ast_BinaryOpcode_MulAssign] = c2_prec_Prec_Assignment,$/;"	v
ast_BinaryOpcode_MulAssign	$C2_ROOT/output/c2c/cgen/build.c	/^   [ast_BinaryOpcode_MulAssign] = c_prec_C_Prec_Assignment,$/;"	v
ast_BinaryOpcode_MulAssign	$C2_ROOT/output/c2c/cgen/c2_prec.c	/^   [ast_BinaryOpcode_MulAssign] = c2_prec_Prec_Assignment,$/;"	v
ast_BinaryOpcode_MulAssign	$C2_ROOT/output/c2c/cgen/c_prec.c	/^   [ast_BinaryOpcode_MulAssign] = c_prec_C_Prec_Assignment,$/;"	v
ast_BinaryOpcode_MulAssign	$C2_ROOT/output/c2c_trace/cgen/c2_prec.c	/^   [ast_BinaryOpcode_MulAssign] = c2_prec_Prec_Assignment,$/;"	v
ast_BinaryOpcode_MulAssign	$C2_ROOT/output/c2c_trace/cgen/c_prec.c	/^   [ast_BinaryOpcode_MulAssign] = c_prec_C_Prec_Assignment,$/;"	v
ast_BinaryOpcode_Multiply	$C2_ROOT/bootstrap/bootstrap.c	/^   [ast_BinaryOpcode_Multiply] = c2_prec_Prec_Multiplicative,$/;"	v
ast_BinaryOpcode_Multiply	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [ast_BinaryOpcode_Multiply] = c2_prec_Prec_Multiplicative,$/;"	v
ast_BinaryOpcode_Multiply	$C2_ROOT/output/c2c/cgen/build.c	/^   [ast_BinaryOpcode_Multiply] = c_prec_C_Prec_Multiplicative,$/;"	v
ast_BinaryOpcode_Multiply	$C2_ROOT/output/c2c/cgen/c2_prec.c	/^   [ast_BinaryOpcode_Multiply] = c2_prec_Prec_Multiplicative,$/;"	v
ast_BinaryOpcode_Multiply	$C2_ROOT/output/c2c/cgen/c_prec.c	/^   [ast_BinaryOpcode_Multiply] = c_prec_C_Prec_Multiplicative,$/;"	v
ast_BinaryOpcode_Multiply	$C2_ROOT/output/c2c_trace/cgen/c2_prec.c	/^   [ast_BinaryOpcode_Multiply] = c2_prec_Prec_Multiplicative,$/;"	v
ast_BinaryOpcode_Multiply	$C2_ROOT/output/c2c_trace/cgen/c_prec.c	/^   [ast_BinaryOpcode_Multiply] = c_prec_C_Prec_Multiplicative,$/;"	v
ast_BinaryOpcode_NotEqual	$C2_ROOT/bootstrap/bootstrap.c	/^   [ast_BinaryOpcode_NotEqual] = c2_prec_Prec_Relational,$/;"	v
ast_BinaryOpcode_NotEqual	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [ast_BinaryOpcode_NotEqual] = c2_prec_Prec_Relational,$/;"	v
ast_BinaryOpcode_NotEqual	$C2_ROOT/output/c2c/cgen/build.c	/^   [ast_BinaryOpcode_NotEqual] = c_prec_C_Prec_Equality,$/;"	v
ast_BinaryOpcode_NotEqual	$C2_ROOT/output/c2c/cgen/c2_prec.c	/^   [ast_BinaryOpcode_NotEqual] = c2_prec_Prec_Relational,$/;"	v
ast_BinaryOpcode_NotEqual	$C2_ROOT/output/c2c/cgen/c_prec.c	/^   [ast_BinaryOpcode_NotEqual] = c_prec_C_Prec_Equality,$/;"	v
ast_BinaryOpcode_NotEqual	$C2_ROOT/output/c2c_trace/cgen/c2_prec.c	/^   [ast_BinaryOpcode_NotEqual] = c2_prec_Prec_Relational,$/;"	v
ast_BinaryOpcode_NotEqual	$C2_ROOT/output/c2c_trace/cgen/c_prec.c	/^   [ast_BinaryOpcode_NotEqual] = c_prec_C_Prec_Equality,$/;"	v
ast_BinaryOpcode_Or	$C2_ROOT/bootstrap/bootstrap.c	/^   [ast_BinaryOpcode_Or] = c2_prec_Prec_Bitwise,$/;"	v
ast_BinaryOpcode_Or	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [ast_BinaryOpcode_Or] = c2_prec_Prec_Bitwise,$/;"	v
ast_BinaryOpcode_Or	$C2_ROOT/output/c2c/cgen/build.c	/^   [ast_BinaryOpcode_Or] = c_prec_C_Prec_Or,$/;"	v
ast_BinaryOpcode_Or	$C2_ROOT/output/c2c/cgen/c2_prec.c	/^   [ast_BinaryOpcode_Or] = c2_prec_Prec_Bitwise,$/;"	v
ast_BinaryOpcode_Or	$C2_ROOT/output/c2c/cgen/c_prec.c	/^   [ast_BinaryOpcode_Or] = c_prec_C_Prec_Or,$/;"	v
ast_BinaryOpcode_Or	$C2_ROOT/output/c2c_trace/cgen/c2_prec.c	/^   [ast_BinaryOpcode_Or] = c2_prec_Prec_Bitwise,$/;"	v
ast_BinaryOpcode_Or	$C2_ROOT/output/c2c_trace/cgen/c_prec.c	/^   [ast_BinaryOpcode_Or] = c_prec_C_Prec_Or,$/;"	v
ast_BinaryOpcode_OrAssign	$C2_ROOT/bootstrap/bootstrap.c	/^   [ast_BinaryOpcode_OrAssign] = c2_prec_Prec_Assignment$/;"	v
ast_BinaryOpcode_OrAssign	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [ast_BinaryOpcode_OrAssign] = c2_prec_Prec_Assignment$/;"	v
ast_BinaryOpcode_OrAssign	$C2_ROOT/output/c2c/cgen/build.c	/^   [ast_BinaryOpcode_OrAssign] = c_prec_C_Prec_Assignment$/;"	v
ast_BinaryOpcode_OrAssign	$C2_ROOT/output/c2c/cgen/c2_prec.c	/^   [ast_BinaryOpcode_OrAssign] = c2_prec_Prec_Assignment$/;"	v
ast_BinaryOpcode_OrAssign	$C2_ROOT/output/c2c/cgen/c_prec.c	/^   [ast_BinaryOpcode_OrAssign] = c_prec_C_Prec_Assignment$/;"	v
ast_BinaryOpcode_OrAssign	$C2_ROOT/output/c2c_trace/cgen/c2_prec.c	/^   [ast_BinaryOpcode_OrAssign] = c2_prec_Prec_Assignment$/;"	v
ast_BinaryOpcode_OrAssign	$C2_ROOT/output/c2c_trace/cgen/c_prec.c	/^   [ast_BinaryOpcode_OrAssign] = c_prec_C_Prec_Assignment$/;"	v
ast_BinaryOpcode_RemAssign	$C2_ROOT/bootstrap/bootstrap.c	/^   [ast_BinaryOpcode_RemAssign] = c2_prec_Prec_Assignment,$/;"	v
ast_BinaryOpcode_RemAssign	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [ast_BinaryOpcode_RemAssign] = c2_prec_Prec_Assignment,$/;"	v
ast_BinaryOpcode_RemAssign	$C2_ROOT/output/c2c/cgen/build.c	/^   [ast_BinaryOpcode_RemAssign] = c_prec_C_Prec_Assignment,$/;"	v
ast_BinaryOpcode_RemAssign	$C2_ROOT/output/c2c/cgen/c2_prec.c	/^   [ast_BinaryOpcode_RemAssign] = c2_prec_Prec_Assignment,$/;"	v
ast_BinaryOpcode_RemAssign	$C2_ROOT/output/c2c/cgen/c_prec.c	/^   [ast_BinaryOpcode_RemAssign] = c_prec_C_Prec_Assignment,$/;"	v
ast_BinaryOpcode_RemAssign	$C2_ROOT/output/c2c_trace/cgen/c2_prec.c	/^   [ast_BinaryOpcode_RemAssign] = c2_prec_Prec_Assignment,$/;"	v
ast_BinaryOpcode_RemAssign	$C2_ROOT/output/c2c_trace/cgen/c_prec.c	/^   [ast_BinaryOpcode_RemAssign] = c_prec_C_Prec_Assignment,$/;"	v
ast_BinaryOpcode_Remainder	$C2_ROOT/bootstrap/bootstrap.c	/^   [ast_BinaryOpcode_Remainder] = c2_prec_Prec_Multiplicative,$/;"	v
ast_BinaryOpcode_Remainder	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [ast_BinaryOpcode_Remainder] = c2_prec_Prec_Multiplicative,$/;"	v
ast_BinaryOpcode_Remainder	$C2_ROOT/output/c2c/cgen/build.c	/^   [ast_BinaryOpcode_Remainder] = c_prec_C_Prec_Multiplicative,$/;"	v
ast_BinaryOpcode_Remainder	$C2_ROOT/output/c2c/cgen/c2_prec.c	/^   [ast_BinaryOpcode_Remainder] = c2_prec_Prec_Multiplicative,$/;"	v
ast_BinaryOpcode_Remainder	$C2_ROOT/output/c2c/cgen/c_prec.c	/^   [ast_BinaryOpcode_Remainder] = c_prec_C_Prec_Multiplicative,$/;"	v
ast_BinaryOpcode_Remainder	$C2_ROOT/output/c2c_trace/cgen/c2_prec.c	/^   [ast_BinaryOpcode_Remainder] = c2_prec_Prec_Multiplicative,$/;"	v
ast_BinaryOpcode_Remainder	$C2_ROOT/output/c2c_trace/cgen/c_prec.c	/^   [ast_BinaryOpcode_Remainder] = c_prec_C_Prec_Multiplicative,$/;"	v
ast_BinaryOpcode_ShiftLeft	$C2_ROOT/bootstrap/bootstrap.c	/^   [ast_BinaryOpcode_ShiftLeft] = c2_prec_Prec_Shift,$/;"	v
ast_BinaryOpcode_ShiftLeft	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [ast_BinaryOpcode_ShiftLeft] = c2_prec_Prec_Shift,$/;"	v
ast_BinaryOpcode_ShiftLeft	$C2_ROOT/output/c2c/cgen/build.c	/^   [ast_BinaryOpcode_ShiftLeft] = c_prec_C_Prec_Shift,$/;"	v
ast_BinaryOpcode_ShiftLeft	$C2_ROOT/output/c2c/cgen/c2_prec.c	/^   [ast_BinaryOpcode_ShiftLeft] = c2_prec_Prec_Shift,$/;"	v
ast_BinaryOpcode_ShiftLeft	$C2_ROOT/output/c2c/cgen/c_prec.c	/^   [ast_BinaryOpcode_ShiftLeft] = c_prec_C_Prec_Shift,$/;"	v
ast_BinaryOpcode_ShiftLeft	$C2_ROOT/output/c2c_trace/cgen/c2_prec.c	/^   [ast_BinaryOpcode_ShiftLeft] = c2_prec_Prec_Shift,$/;"	v
ast_BinaryOpcode_ShiftLeft	$C2_ROOT/output/c2c_trace/cgen/c_prec.c	/^   [ast_BinaryOpcode_ShiftLeft] = c_prec_C_Prec_Shift,$/;"	v
ast_BinaryOpcode_ShiftRight	$C2_ROOT/bootstrap/bootstrap.c	/^   [ast_BinaryOpcode_ShiftRight] = c2_prec_Prec_Shift,$/;"	v
ast_BinaryOpcode_ShiftRight	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [ast_BinaryOpcode_ShiftRight] = c2_prec_Prec_Shift,$/;"	v
ast_BinaryOpcode_ShiftRight	$C2_ROOT/output/c2c/cgen/build.c	/^   [ast_BinaryOpcode_ShiftRight] = c_prec_C_Prec_Shift,$/;"	v
ast_BinaryOpcode_ShiftRight	$C2_ROOT/output/c2c/cgen/c2_prec.c	/^   [ast_BinaryOpcode_ShiftRight] = c2_prec_Prec_Shift,$/;"	v
ast_BinaryOpcode_ShiftRight	$C2_ROOT/output/c2c/cgen/c_prec.c	/^   [ast_BinaryOpcode_ShiftRight] = c_prec_C_Prec_Shift,$/;"	v
ast_BinaryOpcode_ShiftRight	$C2_ROOT/output/c2c_trace/cgen/c2_prec.c	/^   [ast_BinaryOpcode_ShiftRight] = c2_prec_Prec_Shift,$/;"	v
ast_BinaryOpcode_ShiftRight	$C2_ROOT/output/c2c_trace/cgen/c_prec.c	/^   [ast_BinaryOpcode_ShiftRight] = c_prec_C_Prec_Shift,$/;"	v
ast_BinaryOpcode_ShlAssign	$C2_ROOT/bootstrap/bootstrap.c	/^   [ast_BinaryOpcode_ShlAssign] = c2_prec_Prec_Assignment,$/;"	v
ast_BinaryOpcode_ShlAssign	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [ast_BinaryOpcode_ShlAssign] = c2_prec_Prec_Assignment,$/;"	v
ast_BinaryOpcode_ShlAssign	$C2_ROOT/output/c2c/cgen/build.c	/^   [ast_BinaryOpcode_ShlAssign] = c_prec_C_Prec_Assignment,$/;"	v
ast_BinaryOpcode_ShlAssign	$C2_ROOT/output/c2c/cgen/c2_prec.c	/^   [ast_BinaryOpcode_ShlAssign] = c2_prec_Prec_Assignment,$/;"	v
ast_BinaryOpcode_ShlAssign	$C2_ROOT/output/c2c/cgen/c_prec.c	/^   [ast_BinaryOpcode_ShlAssign] = c_prec_C_Prec_Assignment,$/;"	v
ast_BinaryOpcode_ShlAssign	$C2_ROOT/output/c2c_trace/cgen/c2_prec.c	/^   [ast_BinaryOpcode_ShlAssign] = c2_prec_Prec_Assignment,$/;"	v
ast_BinaryOpcode_ShlAssign	$C2_ROOT/output/c2c_trace/cgen/c_prec.c	/^   [ast_BinaryOpcode_ShlAssign] = c_prec_C_Prec_Assignment,$/;"	v
ast_BinaryOpcode_ShrAssign	$C2_ROOT/bootstrap/bootstrap.c	/^   [ast_BinaryOpcode_ShrAssign] = c2_prec_Prec_Assignment,$/;"	v
ast_BinaryOpcode_ShrAssign	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [ast_BinaryOpcode_ShrAssign] = c2_prec_Prec_Assignment,$/;"	v
ast_BinaryOpcode_ShrAssign	$C2_ROOT/output/c2c/cgen/build.c	/^   [ast_BinaryOpcode_ShrAssign] = c_prec_C_Prec_Assignment,$/;"	v
ast_BinaryOpcode_ShrAssign	$C2_ROOT/output/c2c/cgen/c2_prec.c	/^   [ast_BinaryOpcode_ShrAssign] = c2_prec_Prec_Assignment,$/;"	v
ast_BinaryOpcode_ShrAssign	$C2_ROOT/output/c2c/cgen/c_prec.c	/^   [ast_BinaryOpcode_ShrAssign] = c_prec_C_Prec_Assignment,$/;"	v
ast_BinaryOpcode_ShrAssign	$C2_ROOT/output/c2c_trace/cgen/c2_prec.c	/^   [ast_BinaryOpcode_ShrAssign] = c2_prec_Prec_Assignment,$/;"	v
ast_BinaryOpcode_ShrAssign	$C2_ROOT/output/c2c_trace/cgen/c_prec.c	/^   [ast_BinaryOpcode_ShrAssign] = c_prec_C_Prec_Assignment,$/;"	v
ast_BinaryOpcode_SubAssign	$C2_ROOT/bootstrap/bootstrap.c	/^   [ast_BinaryOpcode_SubAssign] = c2_prec_Prec_Assignment,$/;"	v
ast_BinaryOpcode_SubAssign	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [ast_BinaryOpcode_SubAssign] = c2_prec_Prec_Assignment,$/;"	v
ast_BinaryOpcode_SubAssign	$C2_ROOT/output/c2c/cgen/build.c	/^   [ast_BinaryOpcode_SubAssign] = c_prec_C_Prec_Assignment,$/;"	v
ast_BinaryOpcode_SubAssign	$C2_ROOT/output/c2c/cgen/c2_prec.c	/^   [ast_BinaryOpcode_SubAssign] = c2_prec_Prec_Assignment,$/;"	v
ast_BinaryOpcode_SubAssign	$C2_ROOT/output/c2c/cgen/c_prec.c	/^   [ast_BinaryOpcode_SubAssign] = c_prec_C_Prec_Assignment,$/;"	v
ast_BinaryOpcode_SubAssign	$C2_ROOT/output/c2c_trace/cgen/c2_prec.c	/^   [ast_BinaryOpcode_SubAssign] = c2_prec_Prec_Assignment,$/;"	v
ast_BinaryOpcode_SubAssign	$C2_ROOT/output/c2c_trace/cgen/c_prec.c	/^   [ast_BinaryOpcode_SubAssign] = c_prec_C_Prec_Assignment,$/;"	v
ast_BinaryOpcode_Subtract	$C2_ROOT/bootstrap/bootstrap.c	/^   [ast_BinaryOpcode_Subtract] = c2_prec_Prec_Additive,$/;"	v
ast_BinaryOpcode_Subtract	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [ast_BinaryOpcode_Subtract] = c2_prec_Prec_Additive,$/;"	v
ast_BinaryOpcode_Subtract	$C2_ROOT/output/c2c/cgen/build.c	/^   [ast_BinaryOpcode_Subtract] = c_prec_C_Prec_Additive,$/;"	v
ast_BinaryOpcode_Subtract	$C2_ROOT/output/c2c/cgen/c2_prec.c	/^   [ast_BinaryOpcode_Subtract] = c2_prec_Prec_Additive,$/;"	v
ast_BinaryOpcode_Subtract	$C2_ROOT/output/c2c/cgen/c_prec.c	/^   [ast_BinaryOpcode_Subtract] = c_prec_C_Prec_Additive,$/;"	v
ast_BinaryOpcode_Subtract	$C2_ROOT/output/c2c_trace/cgen/c2_prec.c	/^   [ast_BinaryOpcode_Subtract] = c2_prec_Prec_Additive,$/;"	v
ast_BinaryOpcode_Subtract	$C2_ROOT/output/c2c_trace/cgen/c_prec.c	/^   [ast_BinaryOpcode_Subtract] = c_prec_C_Prec_Additive,$/;"	v
ast_BinaryOpcode_Xor	$C2_ROOT/bootstrap/bootstrap.c	/^   [ast_BinaryOpcode_Xor] = c2_prec_Prec_Bitwise,$/;"	v
ast_BinaryOpcode_Xor	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [ast_BinaryOpcode_Xor] = c2_prec_Prec_Bitwise,$/;"	v
ast_BinaryOpcode_Xor	$C2_ROOT/output/c2c/cgen/build.c	/^   [ast_BinaryOpcode_Xor] = c_prec_C_Prec_Xor,$/;"	v
ast_BinaryOpcode_Xor	$C2_ROOT/output/c2c/cgen/c2_prec.c	/^   [ast_BinaryOpcode_Xor] = c2_prec_Prec_Bitwise,$/;"	v
ast_BinaryOpcode_Xor	$C2_ROOT/output/c2c/cgen/c_prec.c	/^   [ast_BinaryOpcode_Xor] = c_prec_C_Prec_Xor,$/;"	v
ast_BinaryOpcode_Xor	$C2_ROOT/output/c2c_trace/cgen/c2_prec.c	/^   [ast_BinaryOpcode_Xor] = c2_prec_Prec_Bitwise,$/;"	v
ast_BinaryOpcode_Xor	$C2_ROOT/output/c2c_trace/cgen/c_prec.c	/^   [ast_BinaryOpcode_Xor] = c_prec_C_Prec_Xor,$/;"	v
ast_BinaryOpcode_XorAssign	$C2_ROOT/bootstrap/bootstrap.c	/^   [ast_BinaryOpcode_XorAssign] = c2_prec_Prec_Assignment,$/;"	v
ast_BinaryOpcode_XorAssign	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [ast_BinaryOpcode_XorAssign] = c2_prec_Prec_Assignment,$/;"	v
ast_BinaryOpcode_XorAssign	$C2_ROOT/output/c2c/cgen/build.c	/^   [ast_BinaryOpcode_XorAssign] = c_prec_C_Prec_Assignment,$/;"	v
ast_BinaryOpcode_XorAssign	$C2_ROOT/output/c2c/cgen/c2_prec.c	/^   [ast_BinaryOpcode_XorAssign] = c2_prec_Prec_Assignment,$/;"	v
ast_BinaryOpcode_XorAssign	$C2_ROOT/output/c2c/cgen/c_prec.c	/^   [ast_BinaryOpcode_XorAssign] = c_prec_C_Prec_Assignment,$/;"	v
ast_BinaryOpcode_XorAssign	$C2_ROOT/output/c2c_trace/cgen/c2_prec.c	/^   [ast_BinaryOpcode_XorAssign] = c2_prec_Prec_Assignment,$/;"	v
ast_BinaryOpcode_XorAssign	$C2_ROOT/output/c2c_trace/cgen/c_prec.c	/^   [ast_BinaryOpcode_XorAssign] = c_prec_C_Prec_Assignment,$/;"	v
ast_BuiltinKind_Bool	$C2_ROOT/bootstrap/bootstrap.c	/^   [ast_BuiltinKind_Bool] = true,$/;"	v
ast_BuiltinKind_Bool	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [ast_BuiltinKind_Bool] = true,$/;"	v
ast_BuiltinKind_Bool	$C2_ROOT/output/c2c/cgen/ast.c	/^   [ast_BuiltinKind_Bool] = true,$/;"	v
ast_BuiltinKind_Bool	$C2_ROOT/output/c2c/cgen/build.c	/^   [ast_BuiltinKind_Bool] = true,$/;"	v
ast_BuiltinKind_Bool	$C2_ROOT/output/c2c/cgen/c_generator.c	/^   [ast_BuiltinKind_Bool] = false,$/;"	v
ast_BuiltinKind_Bool	$C2_ROOT/output/c2c/cgen/ir_generator.c	/^   [ast_BuiltinKind_Bool] = ir_Type_I8,$/;"	v
ast_BuiltinKind_Bool	$C2_ROOT/output/c2c_trace/cgen/ast.c	/^   [ast_BuiltinKind_Bool] = true,$/;"	v
ast_BuiltinKind_Bool	$C2_ROOT/output/c2c_trace/cgen/c_generator.c	/^   [ast_BuiltinKind_Bool] = false,$/;"	v
ast_BuiltinKind_Bool	$C2_ROOT/output/c2c_trace/cgen/ir_generator.c	/^   [ast_BuiltinKind_Bool] = ir_Type_I8,$/;"	v
ast_BuiltinKind_Char	$C2_ROOT/bootstrap/bootstrap.c	/^   [ast_BuiltinKind_Char] = true,$/;"	v
ast_BuiltinKind_Char	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [ast_BuiltinKind_Char] = true,$/;"	v
ast_BuiltinKind_Char	$C2_ROOT/output/c2c/cgen/ast.c	/^   [ast_BuiltinKind_Char] = true,$/;"	v
ast_BuiltinKind_Char	$C2_ROOT/output/c2c/cgen/build.c	/^   [ast_BuiltinKind_Char] = true,$/;"	v
ast_BuiltinKind_Char	$C2_ROOT/output/c2c/cgen/c_generator.c	/^   [ast_BuiltinKind_Char] = false,$/;"	v
ast_BuiltinKind_Char	$C2_ROOT/output/c2c/cgen/ir_generator.c	/^   [ast_BuiltinKind_Char] = ir_Type_I8,$/;"	v
ast_BuiltinKind_Char	$C2_ROOT/output/c2c_trace/cgen/ast.c	/^   [ast_BuiltinKind_Char] = true,$/;"	v
ast_BuiltinKind_Char	$C2_ROOT/output/c2c_trace/cgen/c_generator.c	/^   [ast_BuiltinKind_Char] = false,$/;"	v
ast_BuiltinKind_Char	$C2_ROOT/output/c2c_trace/cgen/ir_generator.c	/^   [ast_BuiltinKind_Char] = ir_Type_I8,$/;"	v
ast_BuiltinKind_Float32	$C2_ROOT/bootstrap/bootstrap.c	/^   [ast_BuiltinKind_Float32] = true,$/;"	v
ast_BuiltinKind_Float32	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [ast_BuiltinKind_Float32] = true,$/;"	v
ast_BuiltinKind_Float32	$C2_ROOT/output/c2c/cgen/ast.c	/^   [ast_BuiltinKind_Float32] = true,$/;"	v
ast_BuiltinKind_Float32	$C2_ROOT/output/c2c/cgen/build.c	/^   [ast_BuiltinKind_Float32] = true,$/;"	v
ast_BuiltinKind_Float32	$C2_ROOT/output/c2c/cgen/c_generator.c	/^   [ast_BuiltinKind_Float32] = false,$/;"	v
ast_BuiltinKind_Float32	$C2_ROOT/output/c2c/cgen/ir_generator.c	/^   [ast_BuiltinKind_Float32] = ir_Type_F32,$/;"	v
ast_BuiltinKind_Float32	$C2_ROOT/output/c2c_trace/cgen/ast.c	/^   [ast_BuiltinKind_Float32] = true,$/;"	v
ast_BuiltinKind_Float32	$C2_ROOT/output/c2c_trace/cgen/c_generator.c	/^   [ast_BuiltinKind_Float32] = false,$/;"	v
ast_BuiltinKind_Float32	$C2_ROOT/output/c2c_trace/cgen/ir_generator.c	/^   [ast_BuiltinKind_Float32] = ir_Type_F32,$/;"	v
ast_BuiltinKind_Float64	$C2_ROOT/bootstrap/bootstrap.c	/^   [ast_BuiltinKind_Float64] = true,$/;"	v
ast_BuiltinKind_Float64	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [ast_BuiltinKind_Float64] = true,$/;"	v
ast_BuiltinKind_Float64	$C2_ROOT/output/c2c/cgen/ast.c	/^   [ast_BuiltinKind_Float64] = true,$/;"	v
ast_BuiltinKind_Float64	$C2_ROOT/output/c2c/cgen/build.c	/^   [ast_BuiltinKind_Float64] = true,$/;"	v
ast_BuiltinKind_Float64	$C2_ROOT/output/c2c/cgen/c_generator.c	/^   [ast_BuiltinKind_Float64] = true,$/;"	v
ast_BuiltinKind_Float64	$C2_ROOT/output/c2c/cgen/ir_generator.c	/^   [ast_BuiltinKind_Float64] = ir_Type_F64,$/;"	v
ast_BuiltinKind_Float64	$C2_ROOT/output/c2c_trace/cgen/ast.c	/^   [ast_BuiltinKind_Float64] = true,$/;"	v
ast_BuiltinKind_Float64	$C2_ROOT/output/c2c_trace/cgen/c_generator.c	/^   [ast_BuiltinKind_Float64] = true,$/;"	v
ast_BuiltinKind_Float64	$C2_ROOT/output/c2c_trace/cgen/ir_generator.c	/^   [ast_BuiltinKind_Float64] = ir_Type_F64,$/;"	v
ast_BuiltinKind_ISize	$C2_ROOT/bootstrap/bootstrap.c	/^   [ast_BuiltinKind_ISize] = true,$/;"	v
ast_BuiltinKind_ISize	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [ast_BuiltinKind_ISize] = true,$/;"	v
ast_BuiltinKind_ISize	$C2_ROOT/output/c2c/cgen/ast.c	/^   [ast_BuiltinKind_ISize] = true,$/;"	v
ast_BuiltinKind_ISize	$C2_ROOT/output/c2c/cgen/build.c	/^   [ast_BuiltinKind_ISize] = true,$/;"	v
ast_BuiltinKind_ISize	$C2_ROOT/output/c2c/cgen/c_generator.c	/^   [ast_BuiltinKind_ISize] = true,$/;"	v
ast_BuiltinKind_ISize	$C2_ROOT/output/c2c/cgen/ir_generator.c	/^   [ast_BuiltinKind_ISize] = ir_Type_I64,$/;"	v
ast_BuiltinKind_ISize	$C2_ROOT/output/c2c_trace/cgen/ast.c	/^   [ast_BuiltinKind_ISize] = true,$/;"	v
ast_BuiltinKind_ISize	$C2_ROOT/output/c2c_trace/cgen/c_generator.c	/^   [ast_BuiltinKind_ISize] = true,$/;"	v
ast_BuiltinKind_ISize	$C2_ROOT/output/c2c_trace/cgen/ir_generator.c	/^   [ast_BuiltinKind_ISize] = ir_Type_I64,$/;"	v
ast_BuiltinKind_Int16	$C2_ROOT/bootstrap/bootstrap.c	/^   [ast_BuiltinKind_Int16] = true,$/;"	v
ast_BuiltinKind_Int16	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [ast_BuiltinKind_Int16] = true,$/;"	v
ast_BuiltinKind_Int16	$C2_ROOT/output/c2c/cgen/ast.c	/^   [ast_BuiltinKind_Int16] = true,$/;"	v
ast_BuiltinKind_Int16	$C2_ROOT/output/c2c/cgen/build.c	/^   [ast_BuiltinKind_Int16] = true,$/;"	v
ast_BuiltinKind_Int16	$C2_ROOT/output/c2c/cgen/c_generator.c	/^   [ast_BuiltinKind_Int16] = false,$/;"	v
ast_BuiltinKind_Int16	$C2_ROOT/output/c2c/cgen/ir_generator.c	/^   [ast_BuiltinKind_Int16] = ir_Type_I16,$/;"	v
ast_BuiltinKind_Int16	$C2_ROOT/output/c2c_trace/cgen/ast.c	/^   [ast_BuiltinKind_Int16] = true,$/;"	v
ast_BuiltinKind_Int16	$C2_ROOT/output/c2c_trace/cgen/c_generator.c	/^   [ast_BuiltinKind_Int16] = false,$/;"	v
ast_BuiltinKind_Int16	$C2_ROOT/output/c2c_trace/cgen/ir_generator.c	/^   [ast_BuiltinKind_Int16] = ir_Type_I16,$/;"	v
ast_BuiltinKind_Int32	$C2_ROOT/bootstrap/bootstrap.c	/^   [ast_BuiltinKind_Int32] = true,$/;"	v
ast_BuiltinKind_Int32	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [ast_BuiltinKind_Int32] = true,$/;"	v
ast_BuiltinKind_Int32	$C2_ROOT/output/c2c/cgen/ast.c	/^   [ast_BuiltinKind_Int32] = true,$/;"	v
ast_BuiltinKind_Int32	$C2_ROOT/output/c2c/cgen/build.c	/^   [ast_BuiltinKind_Int32] = true,$/;"	v
ast_BuiltinKind_Int32	$C2_ROOT/output/c2c/cgen/c_generator.c	/^   [ast_BuiltinKind_Int32] = false,$/;"	v
ast_BuiltinKind_Int32	$C2_ROOT/output/c2c/cgen/ir_generator.c	/^   [ast_BuiltinKind_Int32] = ir_Type_I32,$/;"	v
ast_BuiltinKind_Int32	$C2_ROOT/output/c2c_trace/cgen/ast.c	/^   [ast_BuiltinKind_Int32] = true,$/;"	v
ast_BuiltinKind_Int32	$C2_ROOT/output/c2c_trace/cgen/c_generator.c	/^   [ast_BuiltinKind_Int32] = false,$/;"	v
ast_BuiltinKind_Int32	$C2_ROOT/output/c2c_trace/cgen/ir_generator.c	/^   [ast_BuiltinKind_Int32] = ir_Type_I32,$/;"	v
ast_BuiltinKind_Int64	$C2_ROOT/bootstrap/bootstrap.c	/^   [ast_BuiltinKind_Int64] = true,$/;"	v
ast_BuiltinKind_Int64	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [ast_BuiltinKind_Int64] = true,$/;"	v
ast_BuiltinKind_Int64	$C2_ROOT/output/c2c/cgen/ast.c	/^   [ast_BuiltinKind_Int64] = true,$/;"	v
ast_BuiltinKind_Int64	$C2_ROOT/output/c2c/cgen/build.c	/^   [ast_BuiltinKind_Int64] = true,$/;"	v
ast_BuiltinKind_Int64	$C2_ROOT/output/c2c/cgen/c_generator.c	/^   [ast_BuiltinKind_Int64] = true,$/;"	v
ast_BuiltinKind_Int64	$C2_ROOT/output/c2c/cgen/ir_generator.c	/^   [ast_BuiltinKind_Int64] = ir_Type_I64,$/;"	v
ast_BuiltinKind_Int64	$C2_ROOT/output/c2c_trace/cgen/ast.c	/^   [ast_BuiltinKind_Int64] = true,$/;"	v
ast_BuiltinKind_Int64	$C2_ROOT/output/c2c_trace/cgen/c_generator.c	/^   [ast_BuiltinKind_Int64] = true,$/;"	v
ast_BuiltinKind_Int64	$C2_ROOT/output/c2c_trace/cgen/ir_generator.c	/^   [ast_BuiltinKind_Int64] = ir_Type_I64,$/;"	v
ast_BuiltinKind_Int8	$C2_ROOT/bootstrap/bootstrap.c	/^   [ast_BuiltinKind_Int8] = true,$/;"	v
ast_BuiltinKind_Int8	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [ast_BuiltinKind_Int8] = true,$/;"	v
ast_BuiltinKind_Int8	$C2_ROOT/output/c2c/cgen/ast.c	/^   [ast_BuiltinKind_Int8] = true,$/;"	v
ast_BuiltinKind_Int8	$C2_ROOT/output/c2c/cgen/build.c	/^   [ast_BuiltinKind_Int8] = true,$/;"	v
ast_BuiltinKind_Int8	$C2_ROOT/output/c2c/cgen/c_generator.c	/^   [ast_BuiltinKind_Int8] = false,$/;"	v
ast_BuiltinKind_Int8	$C2_ROOT/output/c2c/cgen/ir_generator.c	/^   [ast_BuiltinKind_Int8] = ir_Type_I8,$/;"	v
ast_BuiltinKind_Int8	$C2_ROOT/output/c2c_trace/cgen/ast.c	/^   [ast_BuiltinKind_Int8] = true,$/;"	v
ast_BuiltinKind_Int8	$C2_ROOT/output/c2c_trace/cgen/c_generator.c	/^   [ast_BuiltinKind_Int8] = false,$/;"	v
ast_BuiltinKind_Int8	$C2_ROOT/output/c2c_trace/cgen/ir_generator.c	/^   [ast_BuiltinKind_Int8] = ir_Type_I8,$/;"	v
ast_BuiltinKind_UInt16	$C2_ROOT/bootstrap/bootstrap.c	/^   [ast_BuiltinKind_UInt16] = true,$/;"	v
ast_BuiltinKind_UInt16	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [ast_BuiltinKind_UInt16] = true,$/;"	v
ast_BuiltinKind_UInt16	$C2_ROOT/output/c2c/cgen/ast.c	/^   [ast_BuiltinKind_UInt16] = true,$/;"	v
ast_BuiltinKind_UInt16	$C2_ROOT/output/c2c/cgen/build.c	/^   [ast_BuiltinKind_UInt16] = true,$/;"	v
ast_BuiltinKind_UInt16	$C2_ROOT/output/c2c/cgen/c_generator.c	/^   [ast_BuiltinKind_UInt16] = false,$/;"	v
ast_BuiltinKind_UInt16	$C2_ROOT/output/c2c/cgen/ir_generator.c	/^   [ast_BuiltinKind_UInt16] = ir_Type_U16,$/;"	v
ast_BuiltinKind_UInt16	$C2_ROOT/output/c2c_trace/cgen/ast.c	/^   [ast_BuiltinKind_UInt16] = true,$/;"	v
ast_BuiltinKind_UInt16	$C2_ROOT/output/c2c_trace/cgen/c_generator.c	/^   [ast_BuiltinKind_UInt16] = false,$/;"	v
ast_BuiltinKind_UInt16	$C2_ROOT/output/c2c_trace/cgen/ir_generator.c	/^   [ast_BuiltinKind_UInt16] = ir_Type_U16,$/;"	v
ast_BuiltinKind_UInt32	$C2_ROOT/bootstrap/bootstrap.c	/^   [ast_BuiltinKind_UInt32] = true,$/;"	v
ast_BuiltinKind_UInt32	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [ast_BuiltinKind_UInt32] = true,$/;"	v
ast_BuiltinKind_UInt32	$C2_ROOT/output/c2c/cgen/ast.c	/^   [ast_BuiltinKind_UInt32] = true,$/;"	v
ast_BuiltinKind_UInt32	$C2_ROOT/output/c2c/cgen/build.c	/^   [ast_BuiltinKind_UInt32] = true,$/;"	v
ast_BuiltinKind_UInt32	$C2_ROOT/output/c2c/cgen/c_generator.c	/^   [ast_BuiltinKind_UInt32] = false,$/;"	v
ast_BuiltinKind_UInt32	$C2_ROOT/output/c2c/cgen/ir_generator.c	/^   [ast_BuiltinKind_UInt32] = ir_Type_U32,$/;"	v
ast_BuiltinKind_UInt32	$C2_ROOT/output/c2c_trace/cgen/ast.c	/^   [ast_BuiltinKind_UInt32] = true,$/;"	v
ast_BuiltinKind_UInt32	$C2_ROOT/output/c2c_trace/cgen/c_generator.c	/^   [ast_BuiltinKind_UInt32] = false,$/;"	v
ast_BuiltinKind_UInt32	$C2_ROOT/output/c2c_trace/cgen/ir_generator.c	/^   [ast_BuiltinKind_UInt32] = ir_Type_U32,$/;"	v
ast_BuiltinKind_UInt64	$C2_ROOT/bootstrap/bootstrap.c	/^   [ast_BuiltinKind_UInt64] = true,$/;"	v
ast_BuiltinKind_UInt64	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [ast_BuiltinKind_UInt64] = true,$/;"	v
ast_BuiltinKind_UInt64	$C2_ROOT/output/c2c/cgen/ast.c	/^   [ast_BuiltinKind_UInt64] = true,$/;"	v
ast_BuiltinKind_UInt64	$C2_ROOT/output/c2c/cgen/build.c	/^   [ast_BuiltinKind_UInt64] = true,$/;"	v
ast_BuiltinKind_UInt64	$C2_ROOT/output/c2c/cgen/c_generator.c	/^   [ast_BuiltinKind_UInt64] = true,$/;"	v
ast_BuiltinKind_UInt64	$C2_ROOT/output/c2c/cgen/ir_generator.c	/^   [ast_BuiltinKind_UInt64] = ir_Type_U64,$/;"	v
ast_BuiltinKind_UInt64	$C2_ROOT/output/c2c_trace/cgen/ast.c	/^   [ast_BuiltinKind_UInt64] = true,$/;"	v
ast_BuiltinKind_UInt64	$C2_ROOT/output/c2c_trace/cgen/c_generator.c	/^   [ast_BuiltinKind_UInt64] = true,$/;"	v
ast_BuiltinKind_UInt64	$C2_ROOT/output/c2c_trace/cgen/ir_generator.c	/^   [ast_BuiltinKind_UInt64] = ir_Type_U64,$/;"	v
ast_BuiltinKind_UInt8	$C2_ROOT/bootstrap/bootstrap.c	/^   [ast_BuiltinKind_UInt8] = true,$/;"	v
ast_BuiltinKind_UInt8	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [ast_BuiltinKind_UInt8] = true,$/;"	v
ast_BuiltinKind_UInt8	$C2_ROOT/output/c2c/cgen/ast.c	/^   [ast_BuiltinKind_UInt8] = true,$/;"	v
ast_BuiltinKind_UInt8	$C2_ROOT/output/c2c/cgen/build.c	/^   [ast_BuiltinKind_UInt8] = true,$/;"	v
ast_BuiltinKind_UInt8	$C2_ROOT/output/c2c/cgen/c_generator.c	/^   [ast_BuiltinKind_UInt8] = false,$/;"	v
ast_BuiltinKind_UInt8	$C2_ROOT/output/c2c/cgen/ir_generator.c	/^   [ast_BuiltinKind_UInt8] = ir_Type_U8,$/;"	v
ast_BuiltinKind_UInt8	$C2_ROOT/output/c2c_trace/cgen/ast.c	/^   [ast_BuiltinKind_UInt8] = true,$/;"	v
ast_BuiltinKind_UInt8	$C2_ROOT/output/c2c_trace/cgen/c_generator.c	/^   [ast_BuiltinKind_UInt8] = false,$/;"	v
ast_BuiltinKind_UInt8	$C2_ROOT/output/c2c_trace/cgen/ir_generator.c	/^   [ast_BuiltinKind_UInt8] = ir_Type_U8,$/;"	v
ast_BuiltinKind_USize	$C2_ROOT/bootstrap/bootstrap.c	/^   [ast_BuiltinKind_USize] = true,$/;"	v
ast_BuiltinKind_USize	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [ast_BuiltinKind_USize] = true,$/;"	v
ast_BuiltinKind_USize	$C2_ROOT/output/c2c/cgen/ast.c	/^   [ast_BuiltinKind_USize] = true,$/;"	v
ast_BuiltinKind_USize	$C2_ROOT/output/c2c/cgen/build.c	/^   [ast_BuiltinKind_USize] = true,$/;"	v
ast_BuiltinKind_USize	$C2_ROOT/output/c2c/cgen/c_generator.c	/^   [ast_BuiltinKind_USize] = true,$/;"	v
ast_BuiltinKind_USize	$C2_ROOT/output/c2c/cgen/ir_generator.c	/^   [ast_BuiltinKind_USize] = ir_Type_U64,$/;"	v
ast_BuiltinKind_USize	$C2_ROOT/output/c2c_trace/cgen/ast.c	/^   [ast_BuiltinKind_USize] = true,$/;"	v
ast_BuiltinKind_USize	$C2_ROOT/output/c2c_trace/cgen/c_generator.c	/^   [ast_BuiltinKind_USize] = true,$/;"	v
ast_BuiltinKind_USize	$C2_ROOT/output/c2c_trace/cgen/ir_generator.c	/^   [ast_BuiltinKind_USize] = ir_Type_U64,$/;"	v
ast_BuiltinKind_Void	$C2_ROOT/bootstrap/bootstrap.c	/^   [ast_BuiltinKind_Void] = ir_Type_None$/;"	v
ast_BuiltinKind_Void	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [ast_BuiltinKind_Void] = ir_Type_None$/;"	v
ast_BuiltinKind_Void	$C2_ROOT/output/c2c/cgen/ast.c	/^   [ast_BuiltinKind_Void] = false$/;"	v
ast_BuiltinKind_Void	$C2_ROOT/output/c2c/cgen/build.c	/^   [ast_BuiltinKind_Void] = ir_Type_None$/;"	v
ast_BuiltinKind_Void	$C2_ROOT/output/c2c/cgen/c_generator.c	/^   [ast_BuiltinKind_Void] = false$/;"	v
ast_BuiltinKind_Void	$C2_ROOT/output/c2c/cgen/ir_generator.c	/^   [ast_BuiltinKind_Void] = ir_Type_None$/;"	v
ast_BuiltinKind_Void	$C2_ROOT/output/c2c_trace/cgen/ast.c	/^   [ast_BuiltinKind_Void] = false$/;"	v
ast_BuiltinKind_Void	$C2_ROOT/output/c2c_trace/cgen/c_generator.c	/^   [ast_BuiltinKind_Void] = false$/;"	v
ast_BuiltinKind_Void	$C2_ROOT/output/c2c_trace/cgen/ir_generator.c	/^   [ast_BuiltinKind_Void] = ir_Type_None$/;"	v
ast_Decl_getName	$C2_ROOT/bootstrap/bootstrap.c	/^   string_buffer_Buf_print(out, "type %s fn ", ast_Decl_getName(d));$/;"	f
ast_Decl_getName	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   string_buffer_Buf_print(out, "type %s fn ", ast_Decl_getName(d));$/;"	f
ast_Decl_getName	$C2_ROOT/output/c2c/cgen/build.c	/^   string_buffer_Buf_print(out, "type %s fn ", ast_Decl_getName(d));$/;"	f
ast_Decl_getName	$C2_ROOT/output/c2c/cgen/c2i_generator.c	/^   string_buffer_Buf_print(out, "type %s fn ", ast_Decl_getName(d));$/;"	f
ast_builder	$C2_ROOT/parser/ast_builder.c2	/^module ast_builder;$/;"	m
ast_clear_generated	$C2_ROOT/generator/c/c_generator.c2	/^fn void Generator.ast_clear_generated(void* arg, AST* a) {$/;"	f
ast_context	$C2_ROOT/ast_utils/context.c2	/^module ast_context;$/;"	m
ast_mark_generated	$C2_ROOT/generator/c/c_generator.c2	/^fn void Generator.ast_mark_generated(void* arg, AST* a) {$/;"	f
ast_visitor	$C2_ROOT/generator/ast_visitor.c2	/^module ast_visitor;$/;"	m
ast_visitor	$C2_ROOT/generator/ast_visitor_expr.c2	/^module ast_visitor;$/;"	m
at	$C2_ROOT/common/module_list.c2	/^public fn ast.Module* List.at(const List* l, u32 idx) {$/;"	f
at_bol	$C2_ROOT/parser/c2_tokenizer.c2	/^fn bool Tokenizer.at_bol(Tokenizer* t) {$/;"	f
at_quick_exit	$C2_ROOT/libs/libc/stdlib.c2i	/^fn c_int at_quick_exit(AtExitFn __func);$/;"	f
atan	$C2_ROOT/libs/math/math.c2i	/^fn c_double atan(c_double);$/;"	f
atan2	$C2_ROOT/libs/math/math.c2i	/^fn c_double atan2(c_double, c_double);$/;"	f
atan2f	$C2_ROOT/libs/math/math.c2i	/^fn c_float atan2f(c_float, c_float);$/;"	f
atanf	$C2_ROOT/libs/math/math.c2i	/^fn c_float atanf(c_float);$/;"	f
atanh	$C2_ROOT/libs/math/math.c2i	/^fn c_double atanh(c_double);$/;"	f
atanhf	$C2_ROOT/libs/math/math.c2i	/^fn c_float atanhf(c_float);$/;"	f
atexit	$C2_ROOT/libs/libc/stdlib.c2i	/^fn c_int atexit(AtExitFn __func);$/;"	f
atof	$C2_ROOT/libs/libc/stdlib.c2i	/^fn c_double atof(const c_char* nptr);$/;"	f
atoi	$C2_ROOT/libs/libc/stdlib.c2i	/^fn c_int atoi(const c_char* nptr);$/;"	f
atol	$C2_ROOT/libs/libc/stdlib.c2i	/^fn c_long atol(const c_char* nptr);$/;"	f
atoll	$C2_ROOT/libs/libc/stdlib.c2i	/^fn c_longlong atoll(const c_char* nptr);$/;"	f
atpanic	$C2_ROOT/libs/lua/lua.c2i	/^fn CFunction atpanic(State *L, CFunction panicf) @(cname="lua_atpanic");$/;"	f
attr	$C2_ROOT/ast_utils/attr.c2	/^module attr;$/;"	m
attr_AttrKind_Aligned	$C2_ROOT/bootstrap/bootstrap.c	/^   [attr_AttrKind_Aligned] = attr_AttrReq_Number,$/;"	v
attr_AttrKind_Aligned	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [attr_AttrKind_Aligned] = attr_AttrReq_Number,$/;"	v
attr_AttrKind_Aligned	$C2_ROOT/output/c2c/cgen/attr.c	/^   [attr_AttrKind_Aligned] = attr_AttrReq_Number,$/;"	v
attr_AttrKind_Aligned	$C2_ROOT/output/c2c/cgen/build.c	/^   [attr_AttrKind_Aligned] = attr_AttrReq_Number,$/;"	v
attr_AttrKind_Aligned	$C2_ROOT/output/c2c_trace/cgen/attr.c	/^   [attr_AttrKind_Aligned] = attr_AttrReq_Number,$/;"	v
attr_AttrKind_AutoFile	$C2_ROOT/bootstrap/bootstrap.c	/^   [attr_AttrKind_AutoFile] = attr_AttrReq_NoArg,$/;"	v
attr_AttrKind_AutoFile	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [attr_AttrKind_AutoFile] = attr_AttrReq_NoArg,$/;"	v
attr_AttrKind_AutoFile	$C2_ROOT/output/c2c/cgen/attr.c	/^   [attr_AttrKind_AutoFile] = attr_AttrReq_NoArg,$/;"	v
attr_AttrKind_AutoFile	$C2_ROOT/output/c2c/cgen/build.c	/^   [attr_AttrKind_AutoFile] = attr_AttrReq_NoArg,$/;"	v
attr_AttrKind_AutoFile	$C2_ROOT/output/c2c_trace/cgen/attr.c	/^   [attr_AttrKind_AutoFile] = attr_AttrReq_NoArg,$/;"	v
attr_AttrKind_AutoFunc	$C2_ROOT/bootstrap/bootstrap.c	/^   [attr_AttrKind_AutoFunc] = attr_AttrReq_NoArg,$/;"	v
attr_AttrKind_AutoFunc	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [attr_AttrKind_AutoFunc] = attr_AttrReq_NoArg,$/;"	v
attr_AttrKind_AutoFunc	$C2_ROOT/output/c2c/cgen/attr.c	/^   [attr_AttrKind_AutoFunc] = attr_AttrReq_NoArg,$/;"	v
attr_AttrKind_AutoFunc	$C2_ROOT/output/c2c/cgen/build.c	/^   [attr_AttrKind_AutoFunc] = attr_AttrReq_NoArg,$/;"	v
attr_AttrKind_AutoFunc	$C2_ROOT/output/c2c_trace/cgen/attr.c	/^   [attr_AttrKind_AutoFunc] = attr_AttrReq_NoArg,$/;"	v
attr_AttrKind_AutoLine	$C2_ROOT/bootstrap/bootstrap.c	/^   [attr_AttrKind_AutoLine] = attr_AttrReq_NoArg,$/;"	v
attr_AttrKind_AutoLine	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [attr_AttrKind_AutoLine] = attr_AttrReq_NoArg,$/;"	v
attr_AttrKind_AutoLine	$C2_ROOT/output/c2c/cgen/attr.c	/^   [attr_AttrKind_AutoLine] = attr_AttrReq_NoArg,$/;"	v
attr_AttrKind_AutoLine	$C2_ROOT/output/c2c/cgen/build.c	/^   [attr_AttrKind_AutoLine] = attr_AttrReq_NoArg,$/;"	v
attr_AttrKind_AutoLine	$C2_ROOT/output/c2c_trace/cgen/attr.c	/^   [attr_AttrKind_AutoLine] = attr_AttrReq_NoArg,$/;"	v
attr_AttrKind_CDef	$C2_ROOT/bootstrap/bootstrap.c	/^   [attr_AttrKind_CDef] = attr_AttrReq_String,$/;"	v
attr_AttrKind_CDef	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [attr_AttrKind_CDef] = attr_AttrReq_String,$/;"	v
attr_AttrKind_CDef	$C2_ROOT/output/c2c/cgen/attr.c	/^   [attr_AttrKind_CDef] = attr_AttrReq_String,$/;"	v
attr_AttrKind_CDef	$C2_ROOT/output/c2c/cgen/build.c	/^   [attr_AttrKind_CDef] = attr_AttrReq_String,$/;"	v
attr_AttrKind_CDef	$C2_ROOT/output/c2c_trace/cgen/attr.c	/^   [attr_AttrKind_CDef] = attr_AttrReq_String,$/;"	v
attr_AttrKind_CName	$C2_ROOT/bootstrap/bootstrap.c	/^   [attr_AttrKind_CName] = attr_AttrReq_String,$/;"	v
attr_AttrKind_CName	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [attr_AttrKind_CName] = attr_AttrReq_String,$/;"	v
attr_AttrKind_CName	$C2_ROOT/output/c2c/cgen/attr.c	/^   [attr_AttrKind_CName] = attr_AttrReq_String,$/;"	v
attr_AttrKind_CName	$C2_ROOT/output/c2c/cgen/build.c	/^   [attr_AttrKind_CName] = attr_AttrReq_String,$/;"	v
attr_AttrKind_CName	$C2_ROOT/output/c2c_trace/cgen/attr.c	/^   [attr_AttrKind_CName] = attr_AttrReq_String,$/;"	v
attr_AttrKind_Constructor	$C2_ROOT/bootstrap/bootstrap.c	/^   [attr_AttrKind_Constructor] = attr_AttrReq_NoArg,$/;"	v
attr_AttrKind_Constructor	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [attr_AttrKind_Constructor] = attr_AttrReq_NoArg,$/;"	v
attr_AttrKind_Constructor	$C2_ROOT/output/c2c/cgen/attr.c	/^   [attr_AttrKind_Constructor] = attr_AttrReq_NoArg,$/;"	v
attr_AttrKind_Constructor	$C2_ROOT/output/c2c/cgen/build.c	/^   [attr_AttrKind_Constructor] = attr_AttrReq_NoArg,$/;"	v
attr_AttrKind_Constructor	$C2_ROOT/output/c2c_trace/cgen/attr.c	/^   [attr_AttrKind_Constructor] = attr_AttrReq_NoArg,$/;"	v
attr_AttrKind_Destructor	$C2_ROOT/bootstrap/bootstrap.c	/^   [attr_AttrKind_Destructor] = attr_AttrReq_NoArg,$/;"	v
attr_AttrKind_Destructor	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [attr_AttrKind_Destructor] = attr_AttrReq_NoArg,$/;"	v
attr_AttrKind_Destructor	$C2_ROOT/output/c2c/cgen/attr.c	/^   [attr_AttrKind_Destructor] = attr_AttrReq_NoArg,$/;"	v
attr_AttrKind_Destructor	$C2_ROOT/output/c2c/cgen/build.c	/^   [attr_AttrKind_Destructor] = attr_AttrReq_NoArg,$/;"	v
attr_AttrKind_Destructor	$C2_ROOT/output/c2c_trace/cgen/attr.c	/^   [attr_AttrKind_Destructor] = attr_AttrReq_NoArg,$/;"	v
attr_AttrKind_Embed	$C2_ROOT/bootstrap/bootstrap.c	/^   [attr_AttrKind_Embed] = attr_AttrReq_String$/;"	v
attr_AttrKind_Embed	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [attr_AttrKind_Embed] = attr_AttrReq_String$/;"	v
attr_AttrKind_Embed	$C2_ROOT/output/c2c/cgen/attr.c	/^   [attr_AttrKind_Embed] = attr_AttrReq_String$/;"	v
attr_AttrKind_Embed	$C2_ROOT/output/c2c/cgen/build.c	/^   [attr_AttrKind_Embed] = attr_AttrReq_String$/;"	v
attr_AttrKind_Embed	$C2_ROOT/output/c2c_trace/cgen/attr.c	/^   [attr_AttrKind_Embed] = attr_AttrReq_String$/;"	v
attr_AttrKind_Export	$C2_ROOT/bootstrap/bootstrap.c	/^   [attr_AttrKind_Export] = attr_AttrReq_NoArg,$/;"	v
attr_AttrKind_Export	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [attr_AttrKind_Export] = attr_AttrReq_NoArg,$/;"	v
attr_AttrKind_Export	$C2_ROOT/output/c2c/cgen/attr.c	/^   [attr_AttrKind_Export] = attr_AttrReq_NoArg,$/;"	v
attr_AttrKind_Export	$C2_ROOT/output/c2c/cgen/build.c	/^   [attr_AttrKind_Export] = attr_AttrReq_NoArg,$/;"	v
attr_AttrKind_Export	$C2_ROOT/output/c2c_trace/cgen/attr.c	/^   [attr_AttrKind_Export] = attr_AttrReq_NoArg,$/;"	v
attr_AttrKind_Inline	$C2_ROOT/bootstrap/bootstrap.c	/^   [attr_AttrKind_Inline] = attr_AttrReq_NoArg,$/;"	v
attr_AttrKind_Inline	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [attr_AttrKind_Inline] = attr_AttrReq_NoArg,$/;"	v
attr_AttrKind_Inline	$C2_ROOT/output/c2c/cgen/attr.c	/^   [attr_AttrKind_Inline] = attr_AttrReq_NoArg,$/;"	v
attr_AttrKind_Inline	$C2_ROOT/output/c2c/cgen/build.c	/^   [attr_AttrKind_Inline] = attr_AttrReq_NoArg,$/;"	v
attr_AttrKind_Inline	$C2_ROOT/output/c2c_trace/cgen/attr.c	/^   [attr_AttrKind_Inline] = attr_AttrReq_NoArg,$/;"	v
attr_AttrKind_NoReturn	$C2_ROOT/bootstrap/bootstrap.c	/^   [attr_AttrKind_NoReturn] = attr_AttrReq_NoArg,$/;"	v
attr_AttrKind_NoReturn	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [attr_AttrKind_NoReturn] = attr_AttrReq_NoArg,$/;"	v
attr_AttrKind_NoReturn	$C2_ROOT/output/c2c/cgen/attr.c	/^   [attr_AttrKind_NoReturn] = attr_AttrReq_NoArg,$/;"	v
attr_AttrKind_NoReturn	$C2_ROOT/output/c2c/cgen/build.c	/^   [attr_AttrKind_NoReturn] = attr_AttrReq_NoArg,$/;"	v
attr_AttrKind_NoReturn	$C2_ROOT/output/c2c_trace/cgen/attr.c	/^   [attr_AttrKind_NoReturn] = attr_AttrReq_NoArg,$/;"	v
attr_AttrKind_NoTypeDef	$C2_ROOT/bootstrap/bootstrap.c	/^   [attr_AttrKind_NoTypeDef] = attr_AttrReq_NoArg,$/;"	v
attr_AttrKind_NoTypeDef	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [attr_AttrKind_NoTypeDef] = attr_AttrReq_NoArg,$/;"	v
attr_AttrKind_NoTypeDef	$C2_ROOT/output/c2c/cgen/attr.c	/^   [attr_AttrKind_NoTypeDef] = attr_AttrReq_NoArg,$/;"	v
attr_AttrKind_NoTypeDef	$C2_ROOT/output/c2c/cgen/build.c	/^   [attr_AttrKind_NoTypeDef] = attr_AttrReq_NoArg,$/;"	v
attr_AttrKind_NoTypeDef	$C2_ROOT/output/c2c_trace/cgen/attr.c	/^   [attr_AttrKind_NoTypeDef] = attr_AttrReq_NoArg,$/;"	v
attr_AttrKind_Opaque	$C2_ROOT/bootstrap/bootstrap.c	/^   [attr_AttrKind_Opaque] = attr_AttrReq_NoArg,$/;"	v
attr_AttrKind_Opaque	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [attr_AttrKind_Opaque] = attr_AttrReq_NoArg,$/;"	v
attr_AttrKind_Opaque	$C2_ROOT/output/c2c/cgen/attr.c	/^   [attr_AttrKind_Opaque] = attr_AttrReq_NoArg,$/;"	v
attr_AttrKind_Opaque	$C2_ROOT/output/c2c/cgen/build.c	/^   [attr_AttrKind_Opaque] = attr_AttrReq_NoArg,$/;"	v
attr_AttrKind_Opaque	$C2_ROOT/output/c2c_trace/cgen/attr.c	/^   [attr_AttrKind_Opaque] = attr_AttrReq_NoArg,$/;"	v
attr_AttrKind_Packed	$C2_ROOT/bootstrap/bootstrap.c	/^   [attr_AttrKind_Packed] = attr_AttrReq_NoArg,$/;"	v
attr_AttrKind_Packed	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [attr_AttrKind_Packed] = attr_AttrReq_NoArg,$/;"	v
attr_AttrKind_Packed	$C2_ROOT/output/c2c/cgen/attr.c	/^   [attr_AttrKind_Packed] = attr_AttrReq_NoArg,$/;"	v
attr_AttrKind_Packed	$C2_ROOT/output/c2c/cgen/build.c	/^   [attr_AttrKind_Packed] = attr_AttrReq_NoArg,$/;"	v
attr_AttrKind_Packed	$C2_ROOT/output/c2c_trace/cgen/attr.c	/^   [attr_AttrKind_Packed] = attr_AttrReq_NoArg,$/;"	v
attr_AttrKind_PrintfFormat	$C2_ROOT/bootstrap/bootstrap.c	/^   [attr_AttrKind_PrintfFormat] = attr_AttrReq_NoArg,$/;"	v
attr_AttrKind_PrintfFormat	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [attr_AttrKind_PrintfFormat] = attr_AttrReq_NoArg,$/;"	v
attr_AttrKind_PrintfFormat	$C2_ROOT/output/c2c/cgen/attr.c	/^   [attr_AttrKind_PrintfFormat] = attr_AttrReq_NoArg,$/;"	v
attr_AttrKind_PrintfFormat	$C2_ROOT/output/c2c/cgen/build.c	/^   [attr_AttrKind_PrintfFormat] = attr_AttrReq_NoArg,$/;"	v
attr_AttrKind_PrintfFormat	$C2_ROOT/output/c2c_trace/cgen/attr.c	/^   [attr_AttrKind_PrintfFormat] = attr_AttrReq_NoArg,$/;"	v
attr_AttrKind_Pure	$C2_ROOT/bootstrap/bootstrap.c	/^   [attr_AttrKind_Pure] = attr_AttrReq_NoArg,$/;"	v
attr_AttrKind_Pure	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [attr_AttrKind_Pure] = attr_AttrReq_NoArg,$/;"	v
attr_AttrKind_Pure	$C2_ROOT/output/c2c/cgen/attr.c	/^   [attr_AttrKind_Pure] = attr_AttrReq_NoArg,$/;"	v
attr_AttrKind_Pure	$C2_ROOT/output/c2c/cgen/build.c	/^   [attr_AttrKind_Pure] = attr_AttrReq_NoArg,$/;"	v
attr_AttrKind_Pure	$C2_ROOT/output/c2c_trace/cgen/attr.c	/^   [attr_AttrKind_Pure] = attr_AttrReq_NoArg,$/;"	v
attr_AttrKind_Section	$C2_ROOT/bootstrap/bootstrap.c	/^   [attr_AttrKind_Section] = attr_AttrReq_String,$/;"	v
attr_AttrKind_Section	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [attr_AttrKind_Section] = attr_AttrReq_String,$/;"	v
attr_AttrKind_Section	$C2_ROOT/output/c2c/cgen/attr.c	/^   [attr_AttrKind_Section] = attr_AttrReq_String,$/;"	v
attr_AttrKind_Section	$C2_ROOT/output/c2c/cgen/build.c	/^   [attr_AttrKind_Section] = attr_AttrReq_String,$/;"	v
attr_AttrKind_Section	$C2_ROOT/output/c2c_trace/cgen/attr.c	/^   [attr_AttrKind_Section] = attr_AttrReq_String,$/;"	v
attr_AttrKind_Unknown	$C2_ROOT/bootstrap/bootstrap.c	/^   [attr_AttrKind_Unknown] = attr_AttrReq_NoArg,$/;"	v
attr_AttrKind_Unknown	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [attr_AttrKind_Unknown] = attr_AttrReq_NoArg,$/;"	v
attr_AttrKind_Unknown	$C2_ROOT/output/c2c/cgen/attr.c	/^   [attr_AttrKind_Unknown] = attr_AttrReq_NoArg,$/;"	v
attr_AttrKind_Unknown	$C2_ROOT/output/c2c/cgen/build.c	/^   [attr_AttrKind_Unknown] = attr_AttrReq_NoArg,$/;"	v
attr_AttrKind_Unknown	$C2_ROOT/output/c2c_trace/cgen/attr.c	/^   [attr_AttrKind_Unknown] = attr_AttrReq_NoArg,$/;"	v
attr_AttrKind_Unused	$C2_ROOT/bootstrap/bootstrap.c	/^   [attr_AttrKind_Unused] = attr_AttrReq_NoArg,$/;"	v
attr_AttrKind_Unused	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [attr_AttrKind_Unused] = attr_AttrReq_NoArg,$/;"	v
attr_AttrKind_Unused	$C2_ROOT/output/c2c/cgen/attr.c	/^   [attr_AttrKind_Unused] = attr_AttrReq_NoArg,$/;"	v
attr_AttrKind_Unused	$C2_ROOT/output/c2c/cgen/build.c	/^   [attr_AttrKind_Unused] = attr_AttrReq_NoArg,$/;"	v
attr_AttrKind_Unused	$C2_ROOT/output/c2c_trace/cgen/attr.c	/^   [attr_AttrKind_Unused] = attr_AttrReq_NoArg,$/;"	v
attr_AttrKind_UnusedParams	$C2_ROOT/bootstrap/bootstrap.c	/^   [attr_AttrKind_UnusedParams] = attr_AttrReq_NoArg,$/;"	v
attr_AttrKind_UnusedParams	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [attr_AttrKind_UnusedParams] = attr_AttrReq_NoArg,$/;"	v
attr_AttrKind_UnusedParams	$C2_ROOT/output/c2c/cgen/attr.c	/^   [attr_AttrKind_UnusedParams] = attr_AttrReq_NoArg,$/;"	v
attr_AttrKind_UnusedParams	$C2_ROOT/output/c2c/cgen/build.c	/^   [attr_AttrKind_UnusedParams] = attr_AttrReq_NoArg,$/;"	v
attr_AttrKind_UnusedParams	$C2_ROOT/output/c2c_trace/cgen/attr.c	/^   [attr_AttrKind_UnusedParams] = attr_AttrReq_NoArg,$/;"	v
attr_AttrKind_Weak	$C2_ROOT/bootstrap/bootstrap.c	/^   [attr_AttrKind_Weak] = attr_AttrReq_NoArg,$/;"	v
attr_AttrKind_Weak	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [attr_AttrKind_Weak] = attr_AttrReq_NoArg,$/;"	v
attr_AttrKind_Weak	$C2_ROOT/output/c2c/cgen/attr.c	/^   [attr_AttrKind_Weak] = attr_AttrReq_NoArg,$/;"	v
attr_AttrKind_Weak	$C2_ROOT/output/c2c/cgen/build.c	/^   [attr_AttrKind_Weak] = attr_AttrReq_NoArg,$/;"	v
attr_AttrKind_Weak	$C2_ROOT/output/c2c_trace/cgen/attr.c	/^   [attr_AttrKind_Weak] = attr_AttrReq_NoArg,$/;"	v
attr_handler	$C2_ROOT/common/attr_handler.c2	/^module attr_handler;$/;"	m
attr_table	$C2_ROOT/ast_utils/attr_table.c2	/^module attr_table;$/;"	m
basename	$C2_ROOT/libs/libc/libgen.c2i	/^fn c_char* basename(c_char* path);$/;"	f
bcmp	$C2_ROOT/libs/libc/strings.c2i	/^fn c_int bcmp(const void* s1, const void* s2, c_size n);$/;"	f
before	$C2_ROOT/libs/sokol/c/sokol_app.h	/^    should first check the event type before reading other struct$/;"	t
before	$C2_ROOT/libs/sokol_/c/sokol_app.h	/^    should first check the event type before reading other struct$/;"	t
beginLineStrip	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn void beginLineStrip() @(cname="sgl_begin_line_strip");$/;"	f
beginLineStrip	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn void beginLineStrip() @(cname="sgl_begin_line_strip");$/;"	f
beginLines	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn void beginLines() @(cname="sgl_begin_lines");$/;"	f
beginLines	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn void beginLines() @(cname="sgl_begin_lines");$/;"	f
beginPass	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn void beginPass(Pass* pass) @(cname="sg_begin_pass");$/;"	f
beginPass	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn void beginPass(Pass* pass) @(cname="sg_begin_pass");$/;"	f
beginPoints	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn void beginPoints() @(cname="sgl_begin_points");$/;"	f
beginPoints	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn void beginPoints() @(cname="sgl_begin_points");$/;"	f
beginQuads	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn void beginQuads() @(cname="sgl_begin_quads");$/;"	f
beginQuads	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn void beginQuads() @(cname="sgl_begin_quads");$/;"	f
beginTarget	$C2_ROOT/compiler/plugin_mgr.c2	/^public fn void Mgr.beginTarget(Mgr* m, plugin_info.Info* info) {$/;"	f
beginTriangleStrip	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn void beginTriangleStrip() @(cname="sgl_begin_triangle_strip");$/;"	f
beginTriangleStrip	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn void beginTriangleStrip() @(cname="sgl_begin_triangle_strip");$/;"	f
beginTriangles	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn void beginTriangles() @(cname="sgl_begin_triangles");$/;"	f
beginTriangles	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn void beginTriangles() @(cname="sgl_begin_triangles");$/;"	f
bind	$C2_ROOT/libs/libc/sys_socket.c2i	/^fn c_int bind(c_int sockfd, const Sockaddr* addr, u32 addrlen);$/;"	f
bindMouseCursorImage	$C2_ROOT/libs/sokol/sokol_app.c2i	/^fn MouseCursor bindMouseCursorImage(MouseCursor cursor, ImageDesc* desc) @(cname="sapp_bind_mous/;"	f
bindMouseCursorImage	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^fn MouseCursor bindMouseCursorImage(MouseCursor cursor, ImageDesc* desc) @(cname="sapp_bind_mous/;"	f
bit_array	$C2_ROOT/common/bit_array.c2	/^module bit_array;$/;"	m
bit_utils	$C2_ROOT/common/bit_utils.c2	/^module bit_utils;$/;"	m
bitnot	$C2_ROOT/ast/value.c2	/^fn Value Value.bitnot(const Value* v) {$/;"	f
blit	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn void Surface.blit(Surface* src, const Rect* srcrect,$/;"	f
blitScaled	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn void Surface.blitScaled(Surface* src, const Rect* srcrect,$/;"	f
block_has_dest	$C2_ROOT/ir/common.c2	/^public fn bool block_has_dest(const Block* b, const CaseList* cases, u32 dest) {$/;"	f
boxSizes	$C2_ROOT/libs/sokol/sokol_shape.c2i	/^fn Sizes boxSizes(u32 tiles) @(cname="sshape_box_sizes");$/;"	f
boxSizes	$C2_ROOT/libs/sokol_/sokol_shape.c2i	/^fn Sizes boxSizes(u32 tiles) @(cname="sshape_box_sizes");$/;"	f
broadcast	$C2_ROOT/libs/pthread/pthread.c2i	/^fn c_int Cond.broadcast(Cond* cond) @(cname="pthread_cond_broadcast");$/;"	f
bsearch	$C2_ROOT/libs/libc/stdlib.c2i	/^fn void* bsearch(const void* __key, const void* __base, c_size __nmemb, c_size __size, StdlibCom/;"	f
bufferFrames	$C2_ROOT/libs/sokol/sokol_audio.c2i	/^fn c_int bufferFrames() @(cname="saudio_buffer_frames");$/;"	f
bufferFrames	$C2_ROOT/libs/sokol_/sokol_audio.c2i	/^fn c_int bufferFrames() @(cname="saudio_buffer_frames");$/;"	f
build	$C2_ROOT/compiler/compiler.c2	/^public fn void build(string_pool.Pool* auxPool,$/;"	f
build	$C2_ROOT/generator/c/c_generator.c2	/^public fn void build(const char* output_dir)$/;"	f
build	$C2_ROOT/ir/rev_list.c2	/^public fn void RevList.build(RevList* r, FunctionInfo* info) {$/;"	f
buildBox	$C2_ROOT/libs/sokol/sokol_shape.c2i	/^fn Buffer buildBox(Buffer* buf, Box* params) @(cname="sshape_build_box");$/;"	f
buildBox	$C2_ROOT/libs/sokol_/sokol_shape.c2i	/^fn Buffer buildBox(Buffer* buf, Box* params) @(cname="sshape_build_box");$/;"	f
buildCylinder	$C2_ROOT/libs/sokol/sokol_shape.c2i	/^fn Buffer buildCylinder(Buffer* buf, Cylinder* params) @(cname="sshape_build_cylinder");$/;"	f
buildCylinder	$C2_ROOT/libs/sokol_/sokol_shape.c2i	/^fn Buffer buildCylinder(Buffer* buf, Cylinder* params) @(cname="sshape_build_cylinder");$/;"	f
buildPlane	$C2_ROOT/libs/sokol/sokol_shape.c2i	/^fn Buffer buildPlane(Buffer* buf, Plane* params) @(cname="sshape_build_plane");$/;"	f
buildPlane	$C2_ROOT/libs/sokol_/sokol_shape.c2i	/^fn Buffer buildPlane(Buffer* buf, Plane* params) @(cname="sshape_build_plane");$/;"	f
buildSphere	$C2_ROOT/libs/sokol/sokol_shape.c2i	/^fn Buffer buildSphere(Buffer* buf, Sphere* params) @(cname="sshape_build_sphere");$/;"	f
buildSphere	$C2_ROOT/libs/sokol_/sokol_shape.c2i	/^fn Buffer buildSphere(Buffer* buf, Sphere* params) @(cname="sshape_build_sphere");$/;"	f
buildTorus	$C2_ROOT/libs/sokol/sokol_shape.c2i	/^fn Buffer buildTorus(Buffer* buf, Torus* params) @(cname="sshape_build_torus");$/;"	f
buildTorus	$C2_ROOT/libs/sokol_/sokol_shape.c2i	/^fn Buffer buildTorus(Buffer* buf, Torus* params) @(cname="sshape_build_torus");$/;"	f
build_file	$C2_ROOT/common/build_file.c2	/^module build_file;$/;"	m
build_target	$C2_ROOT/common/build_target.c2	/^module build_target;$/;"	m
build_target	$C2_ROOT/compiler/main.c2	/^fn bool Context.build_target(Context* c,$/;"	f
build_targets	$C2_ROOT/compiler/main.c2	/^fn bool Context.build_targets(Context* c) {$/;"	f
builtin2irtype	$C2_ROOT/generator/ir/ir_generator.c2	/^fn ir.Type builtin2irtype(BuiltinKind k) {$/;"	f
builtinKind2Signed	$C2_ROOT/ast/builtin_type.c2	/^public fn bool builtinKind2Signed(BuiltinKind kind) {$/;"	f
c1i	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn void c1i(u32 rgba) @(cname="sgl_c1i");$/;"	f
c1i	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn void c1i(u32 rgba) @(cname="sgl_c1i");$/;"	f
c2	$C2_ROOT/libs/c2/c2.c2i	/^module c2;$/;"	m
c2_func_t	$C2_ROOT/libs/c2/c2_trace_tables.c2i	/^type c2_func_t struct {$/;"	t
c2_parser	$C2_ROOT/parser/c2_parser.c2	/^module c2_parser;$/;"	m
c2_parser	$C2_ROOT/parser/c2_parser_expr.c2	/^module c2_parser;$/;"	m
c2_parser	$C2_ROOT/parser/c2_parser_stmt.c2	/^module c2_parser;$/;"	m
c2_parser	$C2_ROOT/parser/c2_parser_switch.c2	/^module c2_parser;$/;"	m
c2_parser	$C2_ROOT/parser/c2_parser_type.c2	/^module c2_parser;$/;"	m
c2_prec	$C2_ROOT/common/c2_prec.c2	/^module c2_prec;$/;"	m
c2_test	$C2_ROOT/libs/c2/c2_test.c2i	/^module c2_test;$/;"	m
c2_tokenizer	$C2_ROOT/parser/c2_tokenizer.c2	/^module c2_tokenizer;$/;"	m
c2_trace	$C2_ROOT/generator/c2_trace.c2	/^module c2_trace;$/;"	m
c2_trace	$C2_ROOT/output/c2c/cgen/build.c	/^static const char compiler_C2_trace[4472] = "module c2_trace;\\n\\nimport c2_trace_tables local;/;"	m
c2_trace	$C2_ROOT/output/c2c/cgen/compiler.c	/^static const char compiler_C2_trace[4472] = "module c2_trace;\\n\\nimport c2_trace_tables local;/;"	m
c2_trace	$C2_ROOT/output/c2c_trace/cgen/compiler.c	/^static const char compiler_C2_trace[4472] = "module c2_trace;\\n\\nimport c2_trace_tables local;/;"	m
c2_trace_t	$C2_ROOT/libs/c2/c2_trace_tables.c2i	/^type c2_trace_t struct {$/;"	t
c2_trace_tables	$C2_ROOT/libs/c2/c2_trace_tables.c2i	/^module c2_trace_tables;$/;"	m
c2c_main	$C2_ROOT/compiler/main.c2	/^module c2c_main;$/;"	m
c2cat	$C2_ROOT/tools/c2cat.c2	/^public fn i32 c2cat(const char* filename)$/;"	f
c2cat_main	$C2_ROOT/tools/c2cat.c2	/^module c2cat_main;$/;"	m
c2i_generator	$C2_ROOT/generator/c2i/c2i_generator.c2	/^module c2i_generator;$/;"	m
c2i_generator	$C2_ROOT/generator/c2i/c2i_generator_decl.c2	/^module c2i_generator;$/;"	m
c2i_generator	$C2_ROOT/generator/c2i/c2i_generator_expr.c2	/^module c2i_generator;$/;"	m
c2i_generator	$C2_ROOT/generator/c2i/c2i_generator_stmt.c2	/^module c2i_generator;$/;"	m
c2loc_main	$C2_ROOT/tools/c2loc.c2	/^module c2loc_main;$/;"	m
c2recipe	$C2_ROOT/compiler/c2recipe.c2	/^module c2recipe;$/;"	m
c2recipe	$C2_ROOT/compiler/c2recipe_parser.c2	/^module c2recipe;$/;"	m
c2recipe	$C2_ROOT/compiler/c2recipe_yaml.c2	/^module c2recipe;$/;"	m
c2refs	$C2_ROOT/generator/c2refs.c2	/^module c2refs;$/;"	m
c2test	$C2_ROOT/output/unit_test/cgen/build.c	/^static const char plugin_main_Content1[5774] = "module c2test;\\nimport stdarg local;\\nimport s/;"	m
c2test	$C2_ROOT/output/unit_test/cgen/plugin_main.c	/^static const char plugin_main_Content1[5774] = "module c2test;\\nimport stdarg local;\\nimport s/;"	m
c2test	$C2_ROOT/plugins/unit_test1.c2	/^module c2test;$/;"	m
c2test_main	$C2_ROOT/output/unit_test/cgen/build.c	/^   string_buffer_Buf_add(out, "module c2test_main;\\n\\n");$/;"	m
c2test_main	$C2_ROOT/output/unit_test/cgen/plugin_main.c	/^   string_buffer_Buf_add(out, "module c2test_main;\\n\\n");$/;"	m
c2test_main	$C2_ROOT/plugins/unit_test_plugin.c2	/^    out.add("module c2test_main;\\n\\n");$/;"	m
c3b	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn void c3b(u8 r, u8 g, u8 b) @(cname="sgl_c3b");$/;"	f
c3b	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn void c3b(u8 r, u8 g, u8 b) @(cname="sgl_c3b");$/;"	f
c3f	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn void c3f(c_float r, c_float g, c_float b) @(cname="sgl_c3f");$/;"	f
c3f	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn void c3f(c_float r, c_float g, c_float b) @(cname="sgl_c3f");$/;"	f
c4b	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn void c4b(u8 r, u8 g, u8 b, u8 a) @(cname="sgl_c4b");$/;"	f
c4b	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn void c4b(u8 r, u8 g, u8 b, u8 a) @(cname="sgl_c4b");$/;"	f
c4f	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn void c4f(c_float r, c_float g, c_float b, c_float a) @(cname="sgl_c4f");$/;"	f
c4f	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn void c4f(c_float r, c_float g, c_float b, c_float a) @(cname="sgl_c4f");$/;"	f
c_char	$C2_ROOT/libs/c2/c2.c2i	/^type c_char char;$/;"	t
c_double	$C2_ROOT/libs/c2/c2.c2i	/^type c_double f64;$/;"	t
c_errno	$C2_ROOT/libs/libc/c_errno.c2i	/^module c_errno;$/;"	m
c_float	$C2_ROOT/libs/c2/c2.c2i	/^type c_float f32;$/;"	t
c_generator	$C2_ROOT/generator/c/c_generator.c2	/^module c_generator;$/;"	m
c_generator	$C2_ROOT/generator/c/c_generator_call.c2	/^module c_generator;$/;"	m
c_generator	$C2_ROOT/generator/c/c_generator_expr.c2	/^module c_generator;$/;"	m
c_generator	$C2_ROOT/generator/c/c_generator_pure_call.c2	/^module c_generator;$/;"	m
c_generator	$C2_ROOT/generator/c/c_generator_special.c2	/^module c_generator;$/;"	m
c_generator	$C2_ROOT/generator/c/c_generator_stmt.c2	/^module c_generator;$/;"	m
c_generator	$C2_ROOT/generator/c/c_generator_trace.c2	/^module c_generator;$/;"	m
c_int	$C2_ROOT/libs/c2/c2.c2i	/^type c_int i32;$/;"	t
c_int	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^type Verify_fn fn c_int(void*, X509_crt *, c_int, c_uint*);$/;"	f
c_long	$C2_ROOT/libs/c2/c2.c2i	/^type c_long i64;$/;"	t
c_longlong	$C2_ROOT/libs/c2/c2.c2i	/^type c_longlong i64;$/;"	t
c_prec	$C2_ROOT/common/c_prec.c2	/^module c_prec;$/;"	m
c_short	$C2_ROOT/libs/c2/c2.c2i	/^type c_short i16;$/;"	t
c_size	$C2_ROOT/libs/c2/c2.c2i	/^type c_size u64;$/;"	t
c_ssize	$C2_ROOT/libs/c2/c2.c2i	/^type c_ssize i64;$/;"	t
c_uchar	$C2_ROOT/libs/c2/c2.c2i	/^type c_uchar u8;$/;"	t
c_uint	$C2_ROOT/libs/c2/c2.c2i	/^type c_uint u32;$/;"	t
c_ulong	$C2_ROOT/libs/c2/c2.c2i	/^type c_ulong u64;$/;"	t
c_ulonglong	$C2_ROOT/libs/c2/c2.c2i	/^type c_ulonglong u64;$/;"	t
c_ushort	$C2_ROOT/libs/c2/c2.c2i	/^type c_ushort u16;$/;"	t
cache_resize	$C2_ROOT/analyser/scope.c2	/^fn void Scope.cache_resize(Scope* s, u32 capacity) {$/;"	f
callk	$C2_ROOT/libs/lua/lua.c2i	/^fn void callk(State *L, c_int nargs, c_int nresults,$/;"	f
calloc	$C2_ROOT/libs/libc/stdlib.c2i	/^fn void* calloc(c_size count, c_size size);$/;"	f
can	$C2_ROOT/libs/sokol/c/sokol_gfx.h	/^    _SG_LOGITEM_XMACRO(VALIDATE_VIEWDESC_UNIQUE_VIEWTYPE, "sg_view_desc: only one view type can /;"	t
can	$C2_ROOT/libs/sokol_/c/sokol_gfx.h	/^    _SG_LOGITEM_XMACRO(VALIDATE_VIEWDESC_UNIQUE_VIEWTYPE, "sg_view_desc: only one view type can /;"	t
canBeNil	$C2_ROOT/ast/function_decl.c2	/^public fn bool FunctionDecl.canBeNil(const FunctionDecl* d) {$/;"	f
cancelQuit	$C2_ROOT/libs/sokol/sokol_app.c2i	/^fn void cancelQuit() @(cname="sapp_cancel_quit");$/;"	f
cancelQuit	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^fn void cancelQuit() @(cname="sapp_cancel_quit");$/;"	f
canvas	$C2_ROOT/libs/sokol/sokol_debugtext.c2i	/^fn void canvas(c_float w, c_float h) @(cname="sdtx_canvas");$/;"	f
canvas	$C2_ROOT/libs/sokol_/sokol_debugtext.c2i	/^fn void canvas(c_float w, c_float h) @(cname="sdtx_canvas");$/;"	f
case_list	$C2_ROOT/parser/case_list.c2	/^module case_list;$/;"	m
castAs	$C2_ROOT/ast/value.c2	/^fn Value Value.castAs(const Value* v, QualType qt) {$/;"	f
cbreak	$C2_ROOT/libs/curses/curses.c2i	/^fn void cbreak();$/;"	f
cbrt	$C2_ROOT/libs/math/math.c2i	/^fn c_double cbrt(c_double);$/;"	f
cbrtf	$C2_ROOT/libs/math/math.c2i	/^fn c_float cbrtf(c_float);$/;"	f
ceil	$C2_ROOT/libs/math/math.c2i	/^fn c_double ceil(c_double);$/;"	f
ceilf	$C2_ROOT/libs/math/math.c2i	/^fn c_float ceilf(c_float);$/;"	f
channels	$C2_ROOT/libs/sokol/sokol_audio.c2i	/^fn c_int channels() @(cname="saudio_channels");$/;"	f
channels	$C2_ROOT/libs/sokol_/sokol_audio.c2i	/^fn c_int channels() @(cname="saudio_channels");$/;"	f
char	$C2_ROOT/libs/c2/char.c2i	/^module char;$/;"	m
chdir	$C2_ROOT/libs/libc/unistd.c2i	/^fn c_int chdir(const c_char* path);$/;"	f
check	$C2_ROOT/analyser/conversion_checker.c2	/^public fn bool Checker.check(Checker* c, QualType lhs, QualType rhs, Expr** e_ptr, SrcLoc loc) {$/;"	f
check	$C2_ROOT/analyser/module_analyser.c2	/^public fn void Analyser.check(Analyser* ma, Module* mod) {$/;"	f
check	$C2_ROOT/analyser/unused_checker.c2	/^public fn void check(diagnostics.Diags* diags,$/;"	f
check	$C2_ROOT/analyser_utils/ctv_analyser.c2	/^public fn bool check(diagnostics.Diags* diags, QualType qt, const Expr* e) {$/;"	f
check	$C2_ROOT/ast_utils/attr.c2	/^public fn AttrReq check(const Attr* a) {$/;"	f
check	$C2_ROOT/generator/c/c_generator_pure_call.c2	/^fn void Evaluator.check(Evaluator* eval, FunctionDecl* fd, u32 num, Expr** args) {$/;"	f
check	$C2_ROOT/generator/c/dep_finder.c2	/^public fn void Finder.check(Finder* s, Decl* d) {$/;"	f
check	$C2_ROOT/ir_examples/cond_decl.c2	/^fn i32 check(i32* i) {$/;"	f
check	$C2_ROOT/tools/tester/expect_file.c2	/^public fn bool ExpectFile.check(ExpectFile* f, string_buffer.Buf* output, const char* basedir) {$/;"	f
check2	$C2_ROOT/ir_examples/cond_decl.c2	/^fn i32 check2(i32 other) {$/;"	f
checkAccess	$C2_ROOT/analyser/scope.c2	/^public fn bool Scope.checkAccess(Scope* s, ast.Decl* d, SrcLoc loc) {$/;"	f
checkArrayDesignators	$C2_ROOT/analyser/module_analyser_init.c2	/^fn bool Analyser.checkArrayDesignators(Analyser* ma, InitListExpr* ile, bool has_size, u32 *size/;"	f
checkAssignment	$C2_ROOT/analyser/module_analyser_expr.c2	/^fn bool Analyser.checkAssignment(Analyser* ma, Expr* assignee, QualType tleft, const char* msg, /;"	f
checkAttr	$C2_ROOT/parser/ast_builder.c2	/^fn bool Builder.checkAttr(Builder* b, const Attr* a) {$/;"	f
checkBinopAddArgs	$C2_ROOT/analyser/module_analyser_binop.c2	/^fn QualType Analyser.checkBinopAddArgs(Analyser* ma, BinaryOperator* b, QualType lhs, QualType r/;"	f
checkBinopAddSubAssign	$C2_ROOT/analyser/module_analyser_binop.c2	/^fn QualType Analyser.checkBinopAddSubAssign(Analyser* ma, BinaryOperator* b, QualType lhs, QualT/;"	f
checkBinopComparison	$C2_ROOT/analyser/module_analyser_binop.c2	/^fn QualType Analyser.checkBinopComparison(Analyser* ma, BinaryOperator* b, QualType lhs, QualTyp/;"	f
checkBinopIntArgs	$C2_ROOT/analyser/module_analyser_binop.c2	/^fn QualType Analyser.checkBinopIntArgs(Analyser* ma, BinaryOperator* b, QualType lhs, QualType r/;"	f
checkBinopLogical	$C2_ROOT/analyser/module_analyser_binop.c2	/^fn QualType Analyser.checkBinopLogical(Analyser* ma, BinaryOperator* b, QualType lhs, QualType r/;"	f
checkBinopSubArgs	$C2_ROOT/analyser/module_analyser_binop.c2	/^fn QualType Analyser.checkBinopSubArgs(Analyser* ma, BinaryOperator* b, QualType lhs, QualType r/;"	f
checkBitfield	$C2_ROOT/analyser_utils/ctv_analyser.c2	/^public fn bool checkBitfield(diagnostics.Diags* diags, u8 bitfield_width, bool bitfield_signed, /;"	f
checkBlockLiveness	$C2_ROOT/ir/register_alloc.c2	/^fn void Tools.checkBlockLiveness(Tools* t, u32 blk_id, LiveVector* v) {$/;"	f
checkBlockRead	$C2_ROOT/ir/ssa.c2	/^fn Ref Tools.checkBlockRead(Tools* t, BlockId blk_id, u16 slot) {$/;"	f
checkBuiltin2Pointer	$C2_ROOT/analyser/conversion_checker.c2	/^fn bool Checker.checkBuiltin2Pointer(Checker* c, const Type* lcanon, const Type* rcanon) {$/;"	f
checkBuiltin2PointerCast	$C2_ROOT/analyser/conversion_checker.c2	/^fn bool Checker.checkBuiltin2PointerCast(Checker* c, const Type* lcanon, const Type* rcanon) {$/;"	f
checkBuiltins	$C2_ROOT/analyser/conversion_checker.c2	/^fn bool Checker.checkBuiltins(Checker* c, const Type* lcanon, const Type* rcanon) {$/;"	f
checkCast	$C2_ROOT/analyser/conversion_checker.c2	/^public fn bool Checker.checkCast(Checker* c, QualType lhs, QualType rhs, SrcLoc lhsLoc, SrcLoc r/;"	f
checkDest	$C2_ROOT/ir/context.c2	/^fn BlockId checkDest(FunctionInfo* fi, BlockId id) {$/;"	f
checkDiagnosticLine	$C2_ROOT/tools/tester/test_db.c2	/^fn void Db.checkDiagnosticLine(Db* db, const char* line) {$/;"	f
checkEnum	$C2_ROOT/analyser/unused_checker.c2	/^fn void Checker.checkEnum(Checker* c, EnumTypeDecl* d) {$/;"	f
checkEnum2Int	$C2_ROOT/analyser/conversion_checker.c2	/^fn bool Checker.checkEnum2Int(Checker* c, const Type* lcanon, const Type* rcanon) {$/;"	f
checkEnumArg	$C2_ROOT/analyser/module_analyser_init.c2	/^fn bool Analyser.checkEnumArg(Analyser* ma, Expr** e_ptr, QualType expectedType) {$/;"	f
checkEnumConstantCase	$C2_ROOT/analyser/module_analyser_switch.c2	/^fn bool Analyser.checkEnumConstantCase(Analyser* ma,$/;"	f
checkErrors	$C2_ROOT/tools/tester/test_db.c2	/^fn void Db.checkErrors(Db* db, const char* buffer, u32 size) {$/;"	f
checkExpectedFiles	$C2_ROOT/tools/tester/test_db.c2	/^fn void Db.checkExpectedFiles(Db* db) {$/;"	f
checkFloat	$C2_ROOT/analyser/module_analyser_binop.c2	/^fn bool Analyser.checkFloat(Analyser* ma, Expr* lhs, Expr* rhs, const char* operation) {$/;"	f
checkFunc2Builtin	$C2_ROOT/analyser/conversion_checker.c2	/^fn bool Checker.checkFunc2Builtin(Checker* c, const Type* lcanon, const Type* rcanon, bool expli/;"	f
checkFunc2Func	$C2_ROOT/analyser/conversion_checker.c2	/^fn bool checkFunc2Func(const FunctionDecl* fdl, const FunctionDecl* fdr) {$/;"	f
checkFunc2Pointer	$C2_ROOT/analyser/conversion_checker.c2	/^fn bool Checker.checkFunc2Pointer(Checker* c, const Type* lcanon, const Type* rcanon) {$/;"	f
checkGlobalSymbol	$C2_ROOT/analyser/scope.c2	/^public fn bool Scope.checkGlobalSymbol(Scope* s, u32 name_idx, SrcLoc loc) {$/;"	f
checkIncrDecr	$C2_ROOT/analyser/module_analyser_unaryop.c2	/^fn bool Analyser.checkIncrDecr(Analyser* ma, Expr* inner, QualType t, bool is_incr, SrcLoc loc) /;"	f
checkIntConversion	$C2_ROOT/analyser/conversion_checker.c2	/^fn bool Checker.checkIntConversion(Checker* c, const BuiltinType* bi) {$/;"	f
checkLine	$C2_ROOT/tools/tester/expect_file.c2	/^fn bool ExpectFile.checkLine(ExpectFile* f, u32 line_nr, const char* start, const char* end) {$/;"	f
checkMain	$C2_ROOT/compiler/compiler.c2	/^fn void Compiler.checkMain(Compiler* c) {$/;"	f
checkMemberName	$C2_ROOT/parser/c2_parser_type.c2	/^fn void Parser.checkMemberName(Parser* p) {$/;"	f
checkName	$C2_ROOT/analyser/module_analyser.c2	/^fn void Analyser.checkName(Analyser* ma, Decl* d, bool is_constant) {$/;"	f
checkName	$C2_ROOT/parser/c2_parser.c2	/^fn bool Parser.checkName(Parser* p, u32 name_idx, bool is_interface) {$/;"	f
checkOpaque	$C2_ROOT/analyser/module_analyser_type.c2	/^fn bool Analyser.checkOpaque(Analyser* ma, const StructTypeDecl* std, SrcLoc loc) {$/;"	f
checkPointer2Builtin	$C2_ROOT/analyser/conversion_checker.c2	/^fn bool Checker.checkPointer2Builtin(Checker* c, const Type* lcanon, const Type* rcanon) {$/;"	f
checkPointer2BuiltinCast	$C2_ROOT/analyser/conversion_checker.c2	/^fn bool Checker.checkPointer2BuiltinCast(Checker* c, const Type* lcanon, const Type* rcanon) {$/;"	f
checkPointer2Func	$C2_ROOT/analyser/conversion_checker.c2	/^fn bool Checker.checkPointer2Func(Checker* c, const Type* lcanon, const Type* rcanon) {$/;"	f
checkPointerFuncComparison	$C2_ROOT/analyser/module_analyser_binop.c2	/^fn QualType Analyser.checkPointerFuncComparison(Analyser* ma, BinaryOperator* b, QualType lhs, Q/;"	f
checkPointers	$C2_ROOT/analyser/conversion_checker.c2	/^fn bool Checker.checkPointers(Checker* c, const Type* lcanon, const Type* rcanon) {$/;"	f
checkPredBlock	$C2_ROOT/ir/ssa.c2	/^fn Ref Tools.checkPredBlock(Tools* t, BlockId blk_id, u16 slot, FunctionInfo* fi) {$/;"	f
checkPrintArgs	$C2_ROOT/analyser/module_analyser_call.c2	/^fn void Analyser.checkPrintArgs(Analyser* ma, Expr* format, u32 num_args, Expr** args, bool* cha/;"	f
checkPrintfFormat	$C2_ROOT/analyser/module_analyser_function.c2	/^fn void Analyser.checkPrintfFormat(Analyser* ma, VarDecl* v, QualType qt, u32 idx, FunctionDecl*/;"	f
checkRange	$C2_ROOT/ast/value.c2	/^public fn bool Value.checkRange(const Value* v, i64 min, u64 max) {$/;"	f
checkRef	$C2_ROOT/ir/slot_collector.c2	/^fn void SlotCollector.checkRef(SlotCollector* c, Ref* r) {$/;"	f
checkRef	$C2_ROOT/ir/ssa.c2	/^fn void Tools.checkRef(Tools* t, Ref r) {$/;"	f
checkReturnAddrOfLocal	$C2_ROOT/analyser/module_analyser_stmt.c2	/^fn void Analyser.checkReturnAddrOfLocal(Analyser* ma, Expr* arg) {$/;"	f
checkShiftArgs	$C2_ROOT/analyser/module_analyser_binop.c2	/^fn bool Analyser.checkShiftArgs(Analyser* ma, Expr* lhs, Expr* rhs) {$/;"	f
checkStaticSlots	$C2_ROOT/ir/slot_collector.c2	/^fn void SlotCollector.checkStaticSlots(SlotCollector* c, FunctionInfo* info) {$/;"	f
checkStructMembers	$C2_ROOT/analyser/unused_checker.c2	/^fn void Checker.checkStructMembers(Checker* c, Decl* d) {$/;"	f
checkTypeRange	$C2_ROOT/analyser_utils/ctv_analyser.c2	/^public fn bool checkTypeRange(diagnostics.Diags* diags, QualType qt, Value* value, SrcLoc loc, c/;"	f
checkTypes	$C2_ROOT/analyser/conversion_checker.c2	/^fn bool Checker.checkTypes(Checker* c, const Type* lcanon, const Type* rcanon) {$/;"	f
checkUnused	$C2_ROOT/compiler/compiler.c2	/^fn void Compiler.checkUnused(void* arg, ast.Module* m) {$/;"	f
checkVarDeclAttributes	$C2_ROOT/analyser/module_analyser.c2	/^fn void Analyser.checkVarDeclAttributes(Analyser* ma, VarDecl* v) {$/;"	f
checkZero	$C2_ROOT/analyser/module_analyser_binop.c2	/^fn bool Analyser.checkZero(Analyser* ma, Expr* e, const char* operation) {$/;"	f
check_between	$C2_ROOT/output/unit_test/libunit_test.dylib	/^public fn void check_between(const char* file @(auto_file), u32 line @(auto_line), i64 left, i64/;"	f
check_between	$C2_ROOT/plugins/unit_test1.c2	/^public fn void check_between(const char* file @(auto_file), u32 line @(auto_line), i64 left, i64/;"	f
check_between_eq	$C2_ROOT/output/unit_test/libunit_test.dylib	/^public fn void check_between_eq(const char* file @(auto_file), u32 line @(auto_line), i64 left, /;"	f
check_between_eq	$C2_ROOT/plugins/unit_test1.c2	/^public fn void check_between_eq(const char* file @(auto_file), u32 line @(auto_line), i64 left, /;"	f
check_data	$C2_ROOT/output/unit_test/libunit_test.dylib	/^public fn void check_data(const char* file @(auto_file), u32 line @(auto_line), const u8* exp, u/;"	f
check_data	$C2_ROOT/plugins/unit_test1.c2	/^public fn void check_data(const char* file @(auto_file), u32 line @(auto_line), const u8* exp, u/;"	f
check_eq	$C2_ROOT/output/unit_test/libunit_test.dylib	/^public fn void check_eq(const char* file @(auto_file), u32 line @(auto_line), i64 expected, i64 /;"	f
check_eq	$C2_ROOT/plugins/unit_test1.c2	/^public fn void check_eq(const char* file @(auto_file), u32 line @(auto_line), i64 expected, i64 /;"	f
check_eq_u	$C2_ROOT/output/unit_test/libunit_test.dylib	/^public fn void check_eq_u(const char* file @(auto_file), u32 line @(auto_line), u64 expected, u6/;"	f
check_eq_u	$C2_ROOT/plugins/unit_test1.c2	/^public fn void check_eq_u(const char* file @(auto_file), u32 line @(auto_line), u64 expected, u6/;"	f
check_exported_decls	$C2_ROOT/generator/generator_utils.c2	/^fn void check_exported_decls(void* arg, Decl* d) {$/;"	f
check_exports	$C2_ROOT/compiler/compiler.c2	/^fn bool Compiler.check_exports(Compiler* c) {$/;"	f
check_fail	$C2_ROOT/output/unit_test/libunit_test.dylib	/^public fn void check_fail(const char* file @(auto_file), u32 line @(auto_line)) {$/;"	f
check_fail	$C2_ROOT/plugins/unit_test1.c2	/^public fn void check_fail(const char* file @(auto_file), u32 line @(auto_line)) {$/;"	f
check_false	$C2_ROOT/output/unit_test/libunit_test.dylib	/^public fn void check_false(const char* file @(auto_file), u32 line @(auto_line), bool real) {$/;"	f
check_false	$C2_ROOT/plugins/unit_test1.c2	/^public fn void check_false(const char* file @(auto_file), u32 line @(auto_line), bool real) {$/;"	f
check_ge	$C2_ROOT/output/unit_test/libunit_test.dylib	/^public fn void check_ge(const char* file @(auto_file), u32 line @(auto_line), i64 expected, i64 /;"	f
check_ge	$C2_ROOT/plugins/unit_test1.c2	/^public fn void check_ge(const char* file @(auto_file), u32 line @(auto_line), i64 expected, i64 /;"	f
check_gt	$C2_ROOT/output/unit_test/libunit_test.dylib	/^public fn void check_gt(const char* file @(auto_file), u32 line @(auto_line), i64 expected, i64 /;"	f
check_gt	$C2_ROOT/plugins/unit_test1.c2	/^public fn void check_gt(const char* file @(auto_file), u32 line @(auto_line), i64 expected, i64 /;"	f
check_le	$C2_ROOT/output/unit_test/libunit_test.dylib	/^public fn void check_le(const char* file @(auto_file), u32 line @(auto_line), i64 expected, i64 /;"	f
check_le	$C2_ROOT/plugins/unit_test1.c2	/^public fn void check_le(const char* file @(auto_file), u32 line @(auto_line), i64 expected, i64 /;"	f
check_lt	$C2_ROOT/output/unit_test/libunit_test.dylib	/^public fn void check_lt(const char* file @(auto_file), u32 line @(auto_line), i64 expected, i64 /;"	f
check_lt	$C2_ROOT/plugins/unit_test1.c2	/^public fn void check_lt(const char* file @(auto_file), u32 line @(auto_line), i64 expected, i64 /;"	f
check_module	$C2_ROOT/generator/generator_utils.c2	/^fn void check_module(void* arg, ast.Module* m) {$/;"	f
check_nil	$C2_ROOT/output/unit_test/libunit_test.dylib	/^public fn void check_nil(const char* file @(auto_file), u32 line @(auto_line), void* real) {$/;"	f
check_nil	$C2_ROOT/plugins/unit_test1.c2	/^public fn void check_nil(const char* file @(auto_file), u32 line @(auto_line), void* real) {$/;"	f
check_not_eq	$C2_ROOT/output/unit_test/libunit_test.dylib	/^public fn void check_not_eq(const char* file @(auto_file), u32 line @(auto_line), i64 expected, /;"	f
check_not_eq	$C2_ROOT/plugins/unit_test1.c2	/^public fn void check_not_eq(const char* file @(auto_file), u32 line @(auto_line), i64 expected, /;"	f
check_not_nil	$C2_ROOT/output/unit_test/libunit_test.dylib	/^public fn void check_not_nil(const char* file @(auto_file), u32 line @(auto_line), void* real) {$/;"	f
check_not_nil	$C2_ROOT/plugins/unit_test1.c2	/^public fn void check_not_nil(const char* file @(auto_file), u32 line @(auto_line), void* real) {$/;"	f
check_not_str	$C2_ROOT/output/unit_test/libunit_test.dylib	/^public fn void check_not_str(const char* file @(auto_file), u32 line @(auto_line), const char* e/;"	f
check_not_str	$C2_ROOT/plugins/unit_test1.c2	/^public fn void check_not_str(const char* file @(auto_file), u32 line @(auto_line), const char* e/;"	f
check_refs	$C2_ROOT/tools/c2tags.c2	/^fn bool check_refs(const char* refsfile, RefUsesFn on_result, void* arg) {$/;"	f
check_str	$C2_ROOT/output/unit_test/libunit_test.dylib	/^public fn void check_str(const char* file @(auto_file), u32 line @(auto_line), const char* expec/;"	f
check_str	$C2_ROOT/plugins/unit_test1.c2	/^public fn void check_str(const char* file @(auto_file), u32 line @(auto_line), const char* expec/;"	f
check_str_contains	$C2_ROOT/output/unit_test/libunit_test.dylib	/^public fn void check_str_contains(const char* file @(auto_file), u32 line @(auto_line), const ch/;"	f
check_str_contains	$C2_ROOT/plugins/unit_test1.c2	/^public fn void check_str_contains(const char* file @(auto_file), u32 line @(auto_line), const ch/;"	f
check_str_not_contains	$C2_ROOT/output/unit_test/libunit_test.dylib	/^public fn void check_str_not_contains(const char* file @(auto_file), u32 line @(auto_line), cons/;"	f
check_str_not_contains	$C2_ROOT/plugins/unit_test1.c2	/^public fn void check_str_not_contains(const char* file @(auto_file), u32 line @(auto_line), cons/;"	f
check_true	$C2_ROOT/output/unit_test/libunit_test.dylib	/^public fn void check_true(const char* file @(auto_file), u32 line @(auto_line), bool real) {$/;"	f
check_true	$C2_ROOT/plugins/unit_test1.c2	/^public fn void check_true(const char* file @(auto_file), u32 line @(auto_line), bool real) {$/;"	f
checkstack	$C2_ROOT/libs/lua/lua.c2i	/^fn c_int checkstack(State* L, c_int n) @(cname="lua_checkstack");$/;"	f
child_error	$C2_ROOT/common/process_utils.c2	/^fn void child_error(i32 fd, const char* format @(printf_format), ...) @(noreturn) {$/;"	f
chmod	$C2_ROOT/libs/libc/sys_stat.c2i	/^fn c_int chmod(const char* file, Mode mode);$/;"	f
clear	$C2_ROOT/analyser/init_checker.c2	/^public fn void Checker.clear(Checker* c) {$/;"	f
clear	$C2_ROOT/analyser/name_vector.c2	/^public fn void NameVector.clear(NameVector* v) {$/;"	f
clear	$C2_ROOT/ast/decl_list.c2	/^public fn void DeclList.clear(DeclList* l) {$/;"	f
clear	$C2_ROOT/ast/function_decl_list.c2	/^public fn void FunctionDeclList.clear(FunctionDeclList* l) @(unused) {$/;"	f
clear	$C2_ROOT/ast/pointer_pool.c2	/^fn void PointerPool.clear(PointerPool* p) {$/;"	f
clear	$C2_ROOT/ast/string_type_pool.c2	/^fn void StringTypePool.clear(StringTypePool* p) {$/;"	f
clear	$C2_ROOT/ast_utils/context.c2	/^public fn void Context.clear(Context* c) {$/;"	f
clear	$C2_ROOT/ast_utils/string_buffer.c2	/^public fn void Buf.clear(Buf* buf) {$/;"	f
clear	$C2_ROOT/common/bit_array.c2	/^public fn void BitArray.clear(BitArray* a, u32 idx) {$/;"	f
clear	$C2_ROOT/common/diagnostics.c2	/^public fn void Diags.clear(Diags* diags) {$/;"	f
clear	$C2_ROOT/common/index_list.c2	/^public fn void List.clear(List* l) {$/;"	f
clear	$C2_ROOT/common/module_list.c2	/^public fn void List.clear(List* l) {$/;"	f
clear	$C2_ROOT/common/source_mgr.c2	/^public fn void SourceMgr.clear(SourceMgr* sm, i32 handle) {$/;"	f
clear	$C2_ROOT/common/string_list.c2	/^public fn void List.clear(List* l) {$/;"	f
clear	$C2_ROOT/common/value_maplist.c2	/^public fn void List.clear(List* l) {$/;"	f
clear	$C2_ROOT/generator/c/c_generator.c2	/^fn void Fragment.clear(Fragment* f) {$/;"	f
clear	$C2_ROOT/generator/ir/ir_generator_locals.c2	/^public fn void Locals.clear(Locals* l) {$/;"	f
clear	$C2_ROOT/ir/block_list.c2	/^public fn void BlockList.clear(BlockList* l) {$/;"	f
clear	$C2_ROOT/ir/case_list.c2	/^public fn void CaseList.clear(CaseList* l) {$/;"	f
clear	$C2_ROOT/ir/copy_list.c2	/^public fn void CopyList.clear(CopyList* l) {$/;"	f
clear	$C2_ROOT/ir/inserter.c2	/^public fn void Inserter.clear(Inserter* ins, u32 num_blocks, u32 num_instr) {$/;"	f
clear	$C2_ROOT/ir/instr.c2	/^public fn void Instr.clear(Instr* i) {$/;"	f
clear	$C2_ROOT/ir/lookup_table.c2	/^public fn void Table.clear(Table* t, u32 amount) {$/;"	f
clear	$C2_ROOT/ir/phi_list.c2	/^public fn void PhiList.clear(PhiList* l) {$/;"	f
clear	$C2_ROOT/ir/ref.c2	/^public fn void Ref.clear(Ref* r) {$/;"	f
clear	$C2_ROOT/ir/register_alloc.c2	/^fn void LiveVector.clear(LiveVector* v) {$/;"	f
clear	$C2_ROOT/ir/slot_values.c2	/^public fn void SlotValues.clear(SlotValues* v, u32 num_slots) {$/;"	f
clear	$C2_ROOT/ir/slot_writes_map.c2	/^public fn void Map.clear(Map* m) {$/;"	f
clear	$C2_ROOT/ir/usage_counter.c2	/^public fn void Counter.clear(Counter* c, u32 cap) {$/;"	f
clear	$C2_ROOT/libs/curses/curses.c2i	/^fn void clear();$/;"	f
clear	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn void Renderer.clear(Renderer* renderer) @(cname="SDL_RenderClear");$/;"	f
clear	$C2_ROOT/parser/stmt_list.c2	/^public fn void List.clear(List* l) {$/;"	f
clearAttributes	$C2_ROOT/parser/ast_builder.c2	/^public fn void Builder.clearAttributes(Builder* b) {$/;"	f
clearComposition	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn void clearComposition() @(cname="SDL_ClearComposition");$/;"	f
clearGenerated	$C2_ROOT/ast/decl.c2	/^public fn void Decl.clearGenerated(Decl* d) { d.declBits.is_generated = 0; }$/;"	f
clearQuals	$C2_ROOT/ast/qualtype.c2	/^public fn void QualType.clearQuals(QualType* qt) {$/;"	f
clearUsed	$C2_ROOT/ast/decl.c2	/^public fn void Decl.clearUsed(Decl* d) { d.declBits.is_used = false; }$/;"	f
clear_used_decl	$C2_ROOT/generator/generator_utils.c2	/^fn void clear_used_decl(void* arg, Decl* d) {$/;"	f
clear_used_mod	$C2_ROOT/generator/generator_utils.c2	/^fn void clear_used_mod(void* arg, ast.Module* m) {$/;"	f
clearenv	$C2_ROOT/libs/libc/stdlib.c2i	/^fn c_int clearenv();$/;"	f
clearerr	$C2_ROOT/libs/libc/stdio.c2i	/^fn void clearerr(FILE* __stream);$/;"	f
clearerr_unlocked	$C2_ROOT/libs/libc/stdio.c2i	/^fn void clearerr_unlocked(FILE* __stream);$/;"	f
close	$C2_ROOT/common/file/file_utils.c2	/^public fn void File.close(File* file) @(unused) {$/;"	f
close	$C2_ROOT/libs/libc/unistd.c2i	/^fn c_int close(c_int fd);$/;"	f
close	$C2_ROOT/libs/lua/lua.c2i	/^fn void close(State *L) @(cname="lua_close");$/;"	f
close	$C2_ROOT/libs/sdl2_ttf/sdl_ttf.c2i	/^fn void Font.close(Font *font) @(cname="TTF_CloseFont");$/;"	f
closeAudioDevice	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn void closeAudioDevice(AudioDeviceID dev) @(cname="SDL_CloseAudioDevice");$/;"	f
close_file	$C2_ROOT/generator/c2refs.c2	/^fn void close_file(MapFile f) {$/;"	f
closedir	$C2_ROOT/libs/libc/libc_dirent.c2i	/^fn c_int closedir(DIR* dirp);$/;"	f
cmp_calls	$C2_ROOT/generator/c2_trace.c2	/^fn i32 cmp_calls(const void *a, const void *b) {$/;"	f
cmp_calls	output/bootstrap/c2c	/^fn i32 cmp_calls(const void *a, const void *b) {$/;"	f
cmp_calls	output/c2c/c2c	/^fn i32 cmp_calls(const void *a, const void *b) {$/;"	f
cmp_calls	output/c2c_trace/c2c_trace	/^fn i32 cmp_calls(const void *a, const void *b) {$/;"	f
cmp_funcs	$C2_ROOT/generator/c2_trace.c2	/^fn i32 cmp_funcs(const void *a, const void *b) {$/;"	f
cmp_funcs	output/bootstrap/c2c	/^fn i32 cmp_funcs(const void *a, const void *b) {$/;"	f
cmp_funcs	output/c2c/c2c	/^fn i32 cmp_funcs(const void *a, const void *b) {$/;"	f
cmp_funcs	output/c2c_trace/c2c_trace	/^fn i32 cmp_funcs(const void *a, const void *b) {$/;"	f
collectIncrementalArrays	$C2_ROOT/analyser/module_analyser.c2	/^fn void Analyser.collectIncrementalArrays(Analyser* ma) {$/;"	f
collectLocalVars	$C2_ROOT/generator/ir/ir_generator.c2	/^fn void Generator.collectLocalVars(Generator* gen, Stmt* s) {$/;"	f
collectTypeFunctions	$C2_ROOT/analyser/module_analyser.c2	/^fn void Analyser.collectTypeFunctions(Analyser* ma) {$/;"	f
collect_temps	$C2_ROOT/ir/print.c2	/^fn void PrintHelper.collect_temps(PrintHelper* ph) {$/;"	f
color	$C2_ROOT/ast_utils/color.c2	/^module color;$/;"	m
color	$C2_ROOT/ast_utils/string_buffer.c2	/^public fn void Buf.color(Buf* buf, const char* color) {$/;"	f
color1i	$C2_ROOT/libs/sokol/sokol_debugtext.c2i	/^fn void color1i(u32 rgba) @(cname="sdtx_color1i");$/;"	f
color1i	$C2_ROOT/libs/sokol_/sokol_debugtext.c2i	/^fn void color1i(u32 rgba) @(cname="sdtx_color1i");$/;"	f
color3b	$C2_ROOT/libs/sokol/sokol_debugtext.c2i	/^fn void color3b(u8 r, u8 g, u8 b) @(cname="sdtx_color3b");$/;"	f
color3b	$C2_ROOT/libs/sokol/sokol_shape.c2i	/^fn u32 color3b(u8 r, u8 g, u8 b) @(cname="sshape_color_3b");$/;"	f
color3b	$C2_ROOT/libs/sokol_/sokol_debugtext.c2i	/^fn void color3b(u8 r, u8 g, u8 b) @(cname="sdtx_color3b");$/;"	f
color3b	$C2_ROOT/libs/sokol_/sokol_shape.c2i	/^fn u32 color3b(u8 r, u8 g, u8 b) @(cname="sshape_color_3b");$/;"	f
color3f	$C2_ROOT/libs/sokol/sokol_debugtext.c2i	/^fn void color3f(c_float r, c_float g, c_float b) @(cname="sdtx_color3f");$/;"	f
color3f	$C2_ROOT/libs/sokol/sokol_shape.c2i	/^fn u32 color3f(c_float r, c_float g, c_float b) @(cname="sshape_color_3f");$/;"	f
color3f	$C2_ROOT/libs/sokol_/sokol_debugtext.c2i	/^fn void color3f(c_float r, c_float g, c_float b) @(cname="sdtx_color3f");$/;"	f
color3f	$C2_ROOT/libs/sokol_/sokol_shape.c2i	/^fn u32 color3f(c_float r, c_float g, c_float b) @(cname="sshape_color_3f");$/;"	f
color4b	$C2_ROOT/libs/sokol/sokol_debugtext.c2i	/^fn void color4b(u8 r, u8 g, u8 b, u8 a) @(cname="sdtx_color4b");$/;"	f
color4b	$C2_ROOT/libs/sokol/sokol_shape.c2i	/^fn u32 color4b(u8 r, u8 g, u8 b, u8 a) @(cname="sshape_color_4b");$/;"	f
color4b	$C2_ROOT/libs/sokol_/sokol_debugtext.c2i	/^fn void color4b(u8 r, u8 g, u8 b, u8 a) @(cname="sdtx_color4b");$/;"	f
color4b	$C2_ROOT/libs/sokol_/sokol_shape.c2i	/^fn u32 color4b(u8 r, u8 g, u8 b, u8 a) @(cname="sshape_color_4b");$/;"	f
color4f	$C2_ROOT/libs/sokol/sokol_debugtext.c2i	/^fn void color4f(c_float r, c_float g, c_float b, c_float a) @(cname="sdtx_color4f");$/;"	f
color4f	$C2_ROOT/libs/sokol/sokol_shape.c2i	/^fn u32 color4f(c_float r, c_float g, c_float b, c_float a) @(cname="sshape_color_4f");$/;"	f
color4f	$C2_ROOT/libs/sokol_/sokol_debugtext.c2i	/^fn void color4f(c_float r, c_float g, c_float b, c_float a) @(cname="sdtx_color4f");$/;"	f
color4f	$C2_ROOT/libs/sokol_/sokol_shape.c2i	/^fn u32 color4f(c_float r, c_float g, c_float b, c_float a) @(cname="sshape_color_4f");$/;"	f
colorFormat	$C2_ROOT/libs/sokol/sokol_app.c2i	/^fn c_int colorFormat() @(cname="sapp_color_format");$/;"	f
colorFormat	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^fn c_int colorFormat() @(cname="sapp_color_format");$/;"	f
colorVertexAttrState	$C2_ROOT/libs/sokol/sokol_shape.c2i	/^fn VertexAttrState colorVertexAttrState() @(cname="sshape_color_vertex_attr_state");$/;"	f
colorVertexAttrState	$C2_ROOT/libs/sokol_/sokol_shape.c2i	/^fn VertexAttrState colorVertexAttrState() @(cname="sshape_color_vertex_attr_state");$/;"	f
color_print	$C2_ROOT/output/unit_test/libunit_test.dylib	/^fn void color_print(const char* color, const char* text) {$/;"	f
color_print	$C2_ROOT/plugins/unit_test2.c2	/^fn void color_print(const char* color, const char* text) {$/;"	f
color_print	$C2_ROOT/tools/tester/test_utils.c2	/^public fn void color_print(const char* col, const char* format @(printf_format), ...) {$/;"	f
color_print2	$C2_ROOT/tools/tester/test_utils.c2	/^public fn void color_print2(string_buffer.Buf* output,$/;"	f
combineConstantFlags	$C2_ROOT/ast/expr.c2	/^public fn void Expr.combineConstantFlags(Expr* e, const Expr* lhs, const Expr* rhs) {$/;"	f
commit	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn void commit() @(cname="sg_commit");$/;"	f
commit	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn void commit() @(cname="sg_commit");$/;"	f
compare	$C2_ROOT/libs/lua/lua.c2i	/^fn c_int compare(State *L, c_int idx1, c_int idx2, c_int op) @(cname="lua_compare");$/;"	f
compareLoc	$C2_ROOT/tools/common/replacer.c2	/^fn bool compareLoc(void* arg, const void* left, const void* right) {$/;"	f
compare_word	$C2_ROOT/parser/c2_tokenizer.c2	/^fn bool compare_word(const char* cur, const char* expect) {$/;"	f
compiler	$C2_ROOT/compiler/compiler.c2	/^module compiler;$/;"	m
compiler	$C2_ROOT/compiler/compiler_libs.c2	/^module compiler;$/;"	m
complete	$C2_ROOT/generator/radix_tree/radix_tree.c2	/^public fn const char* Tree.complete(Tree* t, const char* text) @(unused) {$/;"	f
component	$C2_ROOT/common/component.c2	/^module component;$/;"	m
component_sorter	$C2_ROOT/common/component_sorter.c2	/^module component_sorter;$/;"	m
concat	$C2_ROOT/libs/lua/lua.c2i	/^fn void concat(State *L, c_int n) @(cname="lua_concat");$/;"	f
connect	$C2_ROOT/libs/libc/sys_socket.c2i	/^fn c_int connect(c_int sockfd, const Sockaddr* addr, u32 addrlen);$/;"	f
console	$C2_ROOT/common/console.c2	/^module console;$/;"	m
constants	$C2_ROOT/ast_utils/constants.c2	/^module constants;$/;"	m
consumeEvent	$C2_ROOT/libs/sokol/sokol_app.c2i	/^fn void consumeEvent() @(cname="sapp_consume_event");$/;"	f
consumeEvent	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^fn void consumeEvent() @(cname="sapp_consume_event");$/;"	f
consumeSemicolon	$C2_ROOT/parser/c2_parser.c2	/^fn void Parser.consumeSemicolon(Parser* p, bool need_semi) {$/;"	f
consumeToken	$C2_ROOT/common/yaml/yaml_parser.c2	/^fn void Parser.consumeToken(Parser* p) {$/;"	f
consumeToken	$C2_ROOT/compiler/c2recipe_parser.c2	/^fn void Parser.consumeToken(Parser* p) {$/;"	f
consumeToken	$C2_ROOT/parser/c2_parser.c2	/^fn void Parser.consumeToken(Parser* p) {$/;"	f
container	$C2_ROOT/analyser/size_analyser.c2	/^               - it would overflow its base type container and there is no packing$/;"	t
contains	$C2_ROOT/common/library_list.c2	/^public fn bool List.contains(const List* l, u32 name) {$/;"	f
contains	$C2_ROOT/common/module_list.c2	/^public fn bool List.contains(const List* l, const ast.Module* mod) {$/;"	f
contains	$C2_ROOT/common/string_list.c2	/^public fn bool List.contains(const List* l, const char* name) {$/;"	f
contains	$C2_ROOT/ir/live_map.c2	/^public fn bool Iter.contains(const Iter* iter, u16 value) {$/;"	f
contains	$C2_ROOT/ir/phi_list.c2	/^fn bool PhiClauses.contains(const PhiClauses* c, Ref ref) {$/;"	f
contains_idx	$C2_ROOT/common/string_list.c2	/^public fn bool List.contains_idx(const List* l, u32 idx) {$/;"	f
contextDraw	$C2_ROOT/libs/sokol/sokol_debugtext.c2i	/^fn void contextDraw(Context ctx) @(cname="sdtx_context_draw");$/;"	f
contextDraw	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn void contextDraw(Context ctx) @(cname="sgl_context_draw");$/;"	f
contextDraw	$C2_ROOT/libs/sokol_/sokol_debugtext.c2i	/^fn void contextDraw(Context ctx) @(cname="sdtx_context_draw");$/;"	f
contextDraw	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn void contextDraw(Context ctx) @(cname="sgl_context_draw");$/;"	f
contextDrawLayer	$C2_ROOT/libs/sokol/sokol_debugtext.c2i	/^fn void contextDrawLayer(Context ctx, c_int layer_id) @(cname="sdtx_context_draw_layer");$/;"	f
contextDrawLayer	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn void contextDrawLayer(Context ctx, c_int layer_id) @(cname="sgl_context_draw_layer");$/;"	f
contextDrawLayer	$C2_ROOT/libs/sokol_/sokol_debugtext.c2i	/^fn void contextDrawLayer(Context ctx, c_int layer_id) @(cname="sdtx_context_draw_layer");$/;"	f
contextDrawLayer	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn void contextDrawLayer(Context ctx, c_int layer_id) @(cname="sgl_context_draw_layer");$/;"	f
contextError	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn Error contextError(Context ctx) @(cname="sgl_context_error");$/;"	f
contextError	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn Error contextError(Context ctx) @(cname="sgl_context_error");$/;"	f
contextMakePipeline	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn Pipeline contextMakePipeline(Context ctx, PipelineDesc* desc) @(cname="sgl_context_make_pipel/;"	f
contextMakePipeline	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn Pipeline contextMakePipeline(Context ctx, PipelineDesc* desc) @(cname="sgl_context_make_pipel/;"	f
conversion	$C2_ROOT/analyser/conversion_checker.c2	/^        return c.conversionError("invalid type conversion from");$/;"	t
conversion	$C2_ROOT/bootstrap/bootstrap.c	/^      return conversion_checker_Checker_conversionError(c, "invalid type conversion from");$/;"	t
conversion	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^      return conversion_checker_Checker_conversionError(c, "invalid type conversion from");$/;"	t
conversion	$C2_ROOT/output/c2c/cgen/build.c	/^      return conversion_checker_Checker_conversionError(c, "invalid type conversion from");$/;"	t
conversion	$C2_ROOT/output/c2c/cgen/conversion_checker.c	/^      return conversion_checker_Checker_conversionError(c, "invalid type conversion from");$/;"	t
conversion	$C2_ROOT/output/c2c_trace/cgen/conversion_checker.c	/^      return (c2_trace_counts[4890]++, conversion_checker_Checker_conversionError)(c, "invalid t/;"	t
conversionError	$C2_ROOT/analyser/conversion_checker.c2	/^fn bool Checker.conversionError(Checker* c, const char* msg) {$/;"	f
conversion_checker	$C2_ROOT/analyser/conversion_checker.c2	/^module conversion_checker;$/;"	m
conversion_checker	$C2_ROOT/analyser/conversion_checker_expr.c2	/^module conversion_checker;$/;"	m
convertTokenToUnaryOpcode	$C2_ROOT/parser/c2_parser_expr.c2	/^fn UnaryOpcode convertTokenToUnaryOpcode(Kind kind) {$/;"	f
convert_fn	$C2_ROOT/ir/context.c2	/^fn void Tools.convert_fn(Tools* t) {$/;"	f
convert_functions	$C2_ROOT/ir/context.c2	/^public fn void Context.convert_functions(Context* c) {$/;"	f
convert_switch_linear	$C2_ROOT/ir/switch.c2	/^fn void Tools.convert_switch_linear(Tools* t, FunctionInfo* fi, u32 blk_id, index_list.List* blo/;"	f
convert_switches	$C2_ROOT/ir/switch.c2	/^fn bool Tools.convert_switches(Tools* t) {$/;"	f
copy	$C2_ROOT/ir/block_list.c2	/^public fn BlockId BlockList.copy(BlockList* l, const Block* b2) {$/;"	f
copy	$C2_ROOT/ir/instr.c2	/^public fn void Instr.copy(Instr* i, const Instr* i2) {$/;"	f
copy	$C2_ROOT/libs/lua/lua.c2i	/^fn void copy(State* L, c_int fromidx, c_int toidx) @(cname="lua_copy");$/;"	f
copy	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn c_int Renderer.copy(Renderer* renderer, Texture* texture, const Rect* src, const Rect* dst) @/;"	f
copyConstantFlags	$C2_ROOT/ast/expr.c2	/^public fn void Expr.copyConstantFlags(Expr* e, const Expr* other) {$/;"	f
copyCtcFlags	$C2_ROOT/ast/expr.c2	/^public fn void Expr.copyCtcFlags(Expr* e, const Expr* other) {$/;"	f
copyEx	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn c_int Renderer.copyEx(Renderer* renderer,$/;"	f
copyQuals	$C2_ROOT/ast/qualtype.c2	/^public fn void QualType.copyQuals(QualType* qt, QualType other) {$/;"	f
copyValType	$C2_ROOT/ast/expr.c2	/^public fn void Expr.copyValType(Expr* e, const Expr* other) {$/;"	f
copy_dirname	$C2_ROOT/common/file/file_utils.c2	/^fn usize copy_dirname(char *buf, usize size, const char* dir) {$/;"	f
copysign	$C2_ROOT/libs/math/math.c2i	/^fn c_double copysign(c_double, c_double);$/;"	f
copysignf	$C2_ROOT/libs/math/math.c2i	/^fn c_float copysignf(c_float, c_float);$/;"	f
cos	$C2_ROOT/libs/math/math.c2i	/^fn c_double cos(c_double);$/;"	f
cosf	$C2_ROOT/libs/math/math.c2i	/^fn c_float cosf(c_float);$/;"	f
cosh	$C2_ROOT/libs/math/math.c2i	/^fn c_double cosh(c_double);$/;"	f
coshf	$C2_ROOT/libs/math/math.c2i	/^fn c_float coshf(c_float);$/;"	f
count_loc	$C2_ROOT/tools/c2loc.c2	/^fn u32 count_loc(const char* data) {$/;"	f
count_word	$C2_ROOT/generator/radix_tree/radix_tree_dump.c2	/^fn void count_word(void* arg, const char* text, u32 value) {$/;"	f
count_words	$C2_ROOT/generator/radix_tree/radix_tree_dump.c2	/^fn u32 Tree.count_words(const Tree* t) {$/;"	f
cq_advance	$C2_ROOT/libs/io_uring/io_uring.c2i	/^fn void Ring.cq_advance(Ring *ring, u32 nr) @(cname="io_uring_cq_advance")$/;"	f
cqe_seen	$C2_ROOT/libs/io_uring/io_uring.c2i	/^fn void Ring.cqe_seen(Ring* ring, Cqe* cqe) @(cname="io_uring_cqe_seen")$/;"	f
create	$C2_ROOT/analyser/module_analyser.c2	/^public fn Analyser* create(diagnostics.Diags* diags,$/;"	f
create	$C2_ROOT/analyser/scope.c2	/^public fn Scope* create(module_list.List* allmodules,$/;"	f
create	$C2_ROOT/ast/alias_type.c2	/^fn AliasType* AliasType.create(ast_context.Context* c, AliasTypeDecl* decl) {$/;"	f
create	$C2_ROOT/ast/alias_type_decl.c2	/^public fn AliasTypeDecl* AliasTypeDecl.create(ast_context.Context* c,$/;"	f
create	$C2_ROOT/ast/array_designated_init_expr.c2	/^public fn ArrayDesignatedInitExpr* ArrayDesignatedInitExpr.create(ast_context.Context* c,$/;"	f
create	$C2_ROOT/ast/array_subscript_expr.c2	/^public fn ArraySubscriptExpr* ArraySubscriptExpr.create(ast_context.Context* c,$/;"	f
create	$C2_ROOT/ast/array_type.c2	/^public fn ArrayType* ArrayType.create(ast_context.Context* c,$/;"	f
create	$C2_ROOT/ast/array_value.c2	/^public fn ArrayValue* ArrayValue.create(ast_context.Context* c,$/;"	f
create	$C2_ROOT/ast/asm_stmt.c2	/^public fn AsmStmt* AsmStmt.create(ast_context.Context* c,$/;"	f
create	$C2_ROOT/ast/assert_stmt.c2	/^public fn AssertStmt* AssertStmt.create(ast_context.Context* c,$/;"	f
create	$C2_ROOT/ast/ast.c2	/^fn AST* AST.create(string_pool.Pool* auxPool, u32 name, Module* mod, bool is_interface, bool is_/;"	f
create	$C2_ROOT/ast/binary_operator.c2	/^public fn BinaryOperator* BinaryOperator.create(ast_context.Context* c, SrcLoc loc, BinaryOpcode/;"	f
create	$C2_ROOT/ast/bitoffset_expr.c2	/^public fn BitOffsetExpr* BitOffsetExpr.create(ast_context.Context* c, SrcLoc loc, Expr* lhs, Exp/;"	f
create	$C2_ROOT/ast/boolean_literal.c2	/^public fn BooleanLiteral* BooleanLiteral.create(ast_context.Context* c, SrcLoc loc, bool val) {$/;"	f
create	$C2_ROOT/ast/break_stmt.c2	/^public fn BreakStmt* BreakStmt.create(ast_context.Context* c, SrcLoc loc) {$/;"	f
create	$C2_ROOT/ast/builtin_expr.c2	/^public fn BuiltinExpr* BuiltinExpr.create(ast_context.Context* c, SrcLoc loc, u32 src_len, Expr*/;"	f
create	$C2_ROOT/ast/builtin_type.c2	/^fn BuiltinType* BuiltinType.create(ast_context.Context* c, BuiltinKind kind) {$/;"	f
create	$C2_ROOT/ast/call_expr.c2	/^public fn CallExpr* CallExpr.create(ast_context.Context* c,$/;"	f
create	$C2_ROOT/ast/char_literal.c2	/^public fn CharLiteral* CharLiteral.create(ast_context.Context* c, SrcLoc loc, u32 src_len, u8 va/;"	f
create	$C2_ROOT/ast/compound_stmt.c2	/^public fn CompoundStmt* CompoundStmt.create(ast_context.Context* c, SrcLoc endLoc, Stmt** stmts,/;"	f
create	$C2_ROOT/ast/conditional_operator.c2	/^public fn ConditionalOperator* ConditionalOperator.create(ast_context.Context* c,$/;"	f
create	$C2_ROOT/ast/continue_stmt.c2	/^public fn ContinueStmt* ContinueStmt.create(ast_context.Context* c, SrcLoc loc) {$/;"	f
create	$C2_ROOT/ast/decl_stmt.c2	/^public fn DeclStmt* DeclStmt.create(ast_context.Context* c,$/;"	f
create	$C2_ROOT/ast/enum_constant_decl.c2	/^public fn EnumConstantDecl* EnumConstantDecl.create(ast_context.Context* c,$/;"	f
create	$C2_ROOT/ast/enum_type.c2	/^fn EnumType* EnumType.create(ast_context.Context* c, EnumTypeDecl* decl) {$/;"	f
create	$C2_ROOT/ast/enum_type_decl.c2	/^public fn EnumTypeDecl* EnumTypeDecl.create(ast_context.Context* c,$/;"	f
create	$C2_ROOT/ast/explicit_cast_expr.c2	/^public fn ExplicitCastExpr* ExplicitCastExpr.create(ast_context.Context* c,$/;"	f
create	$C2_ROOT/ast/fallthrough_stmt.c2	/^public fn FallthroughStmt* FallthroughStmt.create(ast_context.Context* c, SrcLoc loc) {$/;"	f
create	$C2_ROOT/ast/field_designated_init_expr.c2	/^public fn FieldDesignatedInitExpr* FieldDesignatedInitExpr.create(ast_context.Context* c,$/;"	f
create	$C2_ROOT/ast/float_literal.c2	/^public fn FloatLiteral* FloatLiteral.create(ast_context.Context* c, SrcLoc loc, u32 src_len, f64/;"	f
create	$C2_ROOT/ast/for_stmt.c2	/^public fn ForStmt* ForStmt.create(ast_context.Context* c, SrcLoc loc, Stmt* init, Expr* cond, Ex/;"	f
create	$C2_ROOT/ast/function_decl.c2	/^public fn FunctionDecl* FunctionDecl.create(ast_context.Context* c,$/;"	f
create	$C2_ROOT/ast/function_type.c2	/^fn FunctionType* FunctionType.create(ast_context.Context* c, FunctionDecl* decl) {$/;"	f
create	$C2_ROOT/ast/function_type_decl.c2	/^public fn FunctionTypeDecl* FunctionTypeDecl.create(ast_context.Context* c, FunctionDecl* func) /;"	f
create	$C2_ROOT/ast/goto_stmt.c2	/^public fn GotoStmt* GotoStmt.create(ast_context.Context* c, u32 name, SrcLoc loc) {$/;"	f
create	$C2_ROOT/ast/identifier_expr.c2	/^public fn IdentifierExpr* IdentifierExpr.create(ast_context.Context* c, SrcLoc loc, u32 name) {$/;"	f
create	$C2_ROOT/ast/if_stmt.c2	/^public fn IfStmt* IfStmt.create(ast_context.Context* c, SrcLoc loc, Stmt* cond, Stmt* then, Stmt/;"	f
create	$C2_ROOT/ast/implicit_cast_expr.c2	/^public fn ImplicitCastExpr* ImplicitCastExpr.create(ast_context.Context* c, SrcLoc loc, Implicit/;"	f
create	$C2_ROOT/ast/import_decl.c2	/^public fn ImportDecl* ImportDecl.create(ast_context.Context* c,$/;"	f
create	$C2_ROOT/ast/init_list_expr.c2	/^public fn InitListExpr* InitListExpr.create(ast_context.Context* c, SrcLoc loc, SrcLoc endLoc, E/;"	f
create	$C2_ROOT/ast/integer_literal.c2	/^public fn IntegerLiteral* IntegerLiteral.create(ast_context.Context* c, SrcLoc loc, u32 src_len,/;"	f
create	$C2_ROOT/ast/label_stmt.c2	/^public fn LabelStmt* LabelStmt.create(ast_context.Context* c, u32 name, SrcLoc loc, Stmt *stmt) /;"	f
create	$C2_ROOT/ast/member_expr.c2	/^public fn MemberExpr* MemberExpr.create(ast_context.Context* c, Expr* base, const Ref* refs, u32/;"	f
create	$C2_ROOT/ast/module.c2	/^public fn Module* Module.create(ast_context.Context* c, u32 name_idx, bool is_external, bool is_/;"	f
create	$C2_ROOT/ast/module_type.c2	/^fn ModuleType* ModuleType.create(ast_context.Context* c, Module* mod) {$/;"	f
create	$C2_ROOT/ast/nil_expr.c2	/^public fn NilExpr* NilExpr.create(ast_context.Context* c, SrcLoc loc) {$/;"	f
create	$C2_ROOT/ast/paren_expr.c2	/^public fn ParenExpr* ParenExpr.create(ast_context.Context* c, SrcLoc loc, u32 src_len, Expr* inn/;"	f
create	$C2_ROOT/ast/pointer_type.c2	/^fn PointerType* PointerType.create(ast_context.Context* c, QualType inner) {$/;"	f
create	$C2_ROOT/ast/qualtype.c2	/^public fn QualType QualType.create(Type* t) {$/;"	f
create	$C2_ROOT/ast/range_expr.c2	/^public fn RangeExpr* RangeExpr.create(ast_context.Context* c, SrcLoc loc, Expr* lhs, Expr* rhs) /;"	f
create	$C2_ROOT/ast/return_stmt.c2	/^public fn ReturnStmt* ReturnStmt.create(ast_context.Context* c, SrcLoc loc, Expr* value) {$/;"	f
create	$C2_ROOT/ast/static_assert.c2	/^public fn StaticAssert* StaticAssert.create(ast_context.Context* c,$/;"	f
create	$C2_ROOT/ast/string_literal.c2	/^public fn StringLiteral* StringLiteral.create(ast_context.Context* c, SrcLoc loc, u32 src_len, u/;"	f
create	$C2_ROOT/ast/struct_type.c2	/^fn StructType* StructType.create(ast_context.Context* c, StructTypeDecl* decl) {$/;"	f
create	$C2_ROOT/ast/struct_type_decl.c2	/^public fn StructTypeDecl* StructTypeDecl.create(ast_context.Context* c,$/;"	f
create	$C2_ROOT/ast/switch_case.c2	/^public fn SwitchCase* SwitchCase.create(ast_context.Context* c,$/;"	f
create	$C2_ROOT/ast/switch_stmt.c2	/^public fn SwitchStmt* SwitchStmt.create(ast_context.Context* c,$/;"	f
create	$C2_ROOT/ast/type_expr.c2	/^public fn TypeExpr* TypeExpr.create(ast_context.Context* c,$/;"	f
create	$C2_ROOT/ast/unary_operator.c2	/^public fn UnaryOperator* UnaryOperator.create(ast_context.Context* c, SrcLoc loc, UnaryOpcode ki/;"	f
create	$C2_ROOT/ast/var_decl.c2	/^public fn VarDecl* VarDecl.create(ast_context.Context* c,$/;"	f
create	$C2_ROOT/ast/while_stmt.c2	/^public fn WhileStmt* WhileStmt.create(ast_context.Context* c, SrcLoc loc,$/;"	f
create	$C2_ROOT/ast_utils/attr_table.c2	/^public fn Table* create() {$/;"	f
create	$C2_ROOT/ast_utils/context.c2	/^public fn Context* create(u32 blk_size) {$/;"	f
create	$C2_ROOT/ast_utils/string_buffer.c2	/^public fn Buf* create(u32 capacity, bool use_colors, u32 indent_step) {$/;"	f
create	$C2_ROOT/ast_utils/string_pool.c2	/^public fn Pool* create(u32 data_capacity, u32 hash_size) {$/;"	f
create	$C2_ROOT/common/attr_handler.c2	/^public fn Handler* create(diagnostics.Diags* diags) {$/;"	f
create	$C2_ROOT/common/build_target.c2	/^public fn Target* create(u32 name_idx, SrcLoc loc, Kind kind, string_pool.Pool* pool) {$/;"	f
create	$C2_ROOT/common/component.c2	/^public fn Component* create(ast_context.Context* context,$/;"	f
create	$C2_ROOT/common/diagnostics.c2	/^public fn Diags* create(source_mgr.SourceMgr* sm, bool use_color, const utils.PathInfo* path_inf/;"	f
create	$C2_ROOT/common/source_mgr.c2	/^public fn SourceMgr* create(string_pool.Pool* pool) {$/;"	f
create	$C2_ROOT/common/yaml/yaml_parser.c2	/^public fn Parser* Parser.create() {$/;"	f
create	$C2_ROOT/compiler/c2recipe.c2	/^public fn Recipe* create(source_mgr.SourceMgr* sm, string_pool.Pool* pool) {$/;"	f
create	$C2_ROOT/compiler/c2recipe_parser.c2	/^fn Set* Set.create(u32 name, SrcLoc loc, Set* next) {$/;"	f
create	$C2_ROOT/compiler/plugin_mgr.c2	/^public fn Mgr* create(string_pool.Pool* auxPool, bool console_timing, bool console_debug, bool n/;"	f
create	$C2_ROOT/generator/ast_visitor.c2	/^public fn Visitor* create(void* arg, OnRef on_ref) {$/;"	f
create	$C2_ROOT/generator/c/c_generator.c2	/^fn Fragment* Fragment.create() {$/;"	f
create	$C2_ROOT/generator/c2refs.c2	/^public fn Refs* Refs.create(u32 num_files) {$/;"	f
create	$C2_ROOT/generator/ir/array_init_sorter.c2	/^public fn Sorter create(u32 allocate, u32 array_size, u32 elem_size) {$/;"	f
create	$C2_ROOT/generator/radix_tree/radix_tree.c2	/^public fn Tree* create(u32 initial_nodes, u32 initial_words) {$/;"	f
create	$C2_ROOT/ir/context.c2	/^public fn Context* create(bool print) {$/;"	f
create	$C2_ROOT/ir/function_info.c2	/^public fn FunctionInfo* FunctionInfo.create(u32 num_blks, u32 num_instr, u32 num_refs) {$/;"	f
create	$C2_ROOT/ir/inserter.c2	/^public fn void Inserter.create(Inserter* ins) {$/;"	f
create	$C2_ROOT/ir/interference_graph.c2	/^public fn InterferenceGraph* create(u32 max_elems, u16 num_variables) {$/;"	f
create	$C2_ROOT/ir/live_map.c2	/^public fn Map* create(u32 max_elems, u16 num_variables) {$/;"	f
create	$C2_ROOT/ir/rev_list.c2	/^public fn void RevList.create(RevList* r, u32 num_blocks) {$/;"	f
create	$C2_ROOT/ir/rpo.c2	/^public fn void Rpo.create(Rpo* rpo, const FunctionInfo* fi) {$/;"	f
create	$C2_ROOT/ir/slot_collector.c2	/^public fn void SlotCollector.create(SlotCollector* c) {$/;"	f
create	$C2_ROOT/ir/slot_values.c2	/^public fn void SlotValues.create(SlotValues* v) {$/;"	f
create	$C2_ROOT/ir/slot_writes_map.c2	/^public fn Map* create(u32 max_elems, u16 num_blocks) {$/;"	f
create	$C2_ROOT/ir/work_queue.c2	/^fn WorkQueue* WorkQueue.create() {$/;"	f
create	$C2_ROOT/ir_examples/struct_func.c2	/^fn A A.create(i32 y) {$/;"	f
create	$C2_ROOT/libs/pthread/pthread.c2i	/^fn c_int create(Pthread* __newthread,$/;"	f
create	$C2_ROOT/parser/ast_builder.c2	/^public fn Builder* create(Context* context,$/;"	f
create	$C2_ROOT/parser/c2_parser.c2	/^public fn Parser* create(SourceMgr* sm,$/;"	f
create	$C2_ROOT/tools/common/refs_finder.c2	/^public fn Finder* create(const char* dirname, const char* filename) {$/;"	f
create	$C2_ROOT/tools/common/replacer.c2	/^public fn Replacer* create(const char* new_name) {$/;"	f
create	$C2_ROOT/tools/tester/expect_file.c2	/^public fn ExpectFile* create(const char* name, ExpectMode m) {$/;"	f
create	$C2_ROOT/tools/tester/issues.c2	/^public fn Issues* create() {$/;"	f
create	$C2_ROOT/tools/tester/line_db.c2	/^public fn Db* create() {$/;"	f
create	$C2_ROOT/tools/tester/tester.c2	/^fn Tester* Tester.create(u32 idx, TestQueue* q, const char* cwd, bool sync) {$/;"	f
createBlock	$C2_ROOT/ir/context.c2	/^public fn BlockId Context.createBlock(Context* c, BlockKind kind) {$/;"	f
createBlockInterferences	$C2_ROOT/ir/register_alloc.c2	/^fn void Tools.createBlockInterferences(Tools* t, u32 blk_id, FunctionInfo* fi, LiveVector* v) {$/;"	f
createBool	$C2_ROOT/ast/value.c2	/^fn Value Value.createBool(bool value) {$/;"	f
createComponent	$C2_ROOT/compiler/compiler_libs.c2	/^fn void Compiler.createComponent(Compiler* c, u32 name, bool is_direct, bool is_static) {$/;"	f
createExportsFile	$C2_ROOT/generator/c/c_generator_special.c2	/^fn void Generator.createExportsFile(Generator* gen, const char* output_dir, component.Component*/;"	f
createFieldInfo	$C2_ROOT/ast/struct_type_decl.c2	/^public fn FieldInitInfo* StructTypeDecl.createFieldInfo(StructTypeDecl* d, ast_context.Context* /;"	f
createFloat	$C2_ROOT/ast/value.c2	/^fn Value Value.createFloat(f64 fvalue) {$/;"	f
createGlobalScope	$C2_ROOT/analyser/module_analyser.c2	/^fn void Analyser.createGlobalScope(void* arg, AST* a) {$/;"	f
createIncremental	$C2_ROOT/ast/array_type.c2	/^public fn ArrayType* ArrayType.createIncremental(ast_context.Context* c,$/;"	f
createLocalName	$C2_ROOT/generator/ir/ir_generator.c2	/^fn const char* Generator.createLocalName(Generator* gen, const Decl* d) {$/;"	f
createMakefile	$C2_ROOT/generator/c/c_generator_special.c2	/^fn void Generator.createMakefile(Generator* gen,$/;"	f
createModule	$C2_ROOT/common/component.c2	/^public fn ast.Module* Component.createModule(Component* c, u32 name_idx) @(unused) {$/;"	f
createOffsetOf	$C2_ROOT/ast/builtin_expr.c2	/^public fn BuiltinExpr* BuiltinExpr.createOffsetOf(ast_context.Context* c, SrcLoc loc, u32 src_le/;"	f
createRGBSurface	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn Surface* createRGBSurface(u32 flags, c_int width, c_int height, c_int depth,$/;"	f
createRenderer	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn Renderer* Window.createRenderer(Window* window, c_int index, u32 flags) @(cname="SDL_CreateRe/;"	f
createSSA	$C2_ROOT/ir/ssa.c2	/^fn void Tools.createSSA(Tools* t) {$/;"	f
createSigned	$C2_ROOT/ast/value.c2	/^fn Value Value.createSigned(i64 svalue) {$/;"	f
createStringVar	$C2_ROOT/generator/ir/ir_generator.c2	/^fn const char* Generator.createStringVar(Generator* gen) {$/;"	f
createStructMember	$C2_ROOT/ast/var_decl.c2	/^public fn VarDecl* VarDecl.createStructMember(ast_context.Context* c,$/;"	f
createSymbol	$C2_ROOT/generator/ir/ir_generator.c2	/^fn SymbolId Generator.createSymbol(Generator* gen, Decl* d) {$/;"	f
createSymbolName	$C2_ROOT/generator/ir/ir_generator.c2	/^fn const char* Generator.createSymbolName(Generator* gen, const Decl* d) {$/;"	f
createTemplate	$C2_ROOT/ast/call_expr.c2	/^public fn CallExpr* CallExpr.createTemplate(ast_context.Context* c,$/;"	f
createTemplate	$C2_ROOT/ast/function_decl.c2	/^public fn FunctionDecl* FunctionDecl.createTemplate(ast_context.Context* c,$/;"	f
createTexture	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn Texture* createTexture(Renderer* renderer, u32 format, c_int access, c_int w, c_int h) @(cnam/;"	f
createTextureFromSurface	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn Texture* createTextureFromSurface(Renderer* renderer, Surface* surface) @(cname="SDL_CreateTe/;"	f
createThread	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn Thread* createThread(ThreadFunction func, const char* name, void* data,$/;"	f
createToContainer	$C2_ROOT/ast/builtin_expr.c2	/^public fn BuiltinExpr* BuiltinExpr.createToContainer(ast_context.Context* c, SrcLoc loc, u32 src/;"	f
createUnsigned	$C2_ROOT/ast/value.c2	/^fn Value Value.createUnsigned(u64 uvalue) {$/;"	f
createWindow	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn Window* createWindow(const char* title, c_int x, c_int y, c_int w, c_int h, u32 flags) @(cnam/;"	f
create_basic	$C2_ROOT/plugins/deps_generator.c2	/^fn void Generator.create_basic(Generator* gen, component.Component* c) {$/;"	f
create_interface_decls	$C2_ROOT/generator/c/c_generator.c2	/^fn void Generator.create_interface_decls(void* arg, AST* a) {$/;"	f
create_interface_imports	$C2_ROOT/generator/c/c_generator.c2	/^fn void Generator.create_interface_imports(void* arg, AST* a) {$/;"	f
create_path	$C2_ROOT/common/file/file_utils.c2	/^public fn i32 create_path(const char* path) {$/;"	f
create_project	$C2_ROOT/compiler/main.c2	/^fn void create_project(const char* name) {$/;"	f
create_template_name	$C2_ROOT/analyser/module_analyser_call.c2	/^fn void create_template_name(char* name, const char* orig, u16 idx) {$/;"	f
createtable	$C2_ROOT/libs/lua/lua.c2i	/^fn void  createtable(State *L, c_int narr, c_int nrec) @(cname="lua_createtable");$/;"	f
crlf	$C2_ROOT/libs/sokol/sokol_debugtext.c2i	/^fn void crlf() @(cname="sdtx_crlf");$/;"	f
crlf	$C2_ROOT/libs/sokol_/sokol_debugtext.c2i	/^fn void crlf() @(cname="sdtx_crlf");$/;"	f
csetjmp	$C2_ROOT/libs/libc/csetjmp.c2i	/^module csetjmp;$/;"	m
csignal	$C2_ROOT/libs/libc/csignal.c2i	/^module csignal;$/;"	m
ctermid	$C2_ROOT/libs/libc/stdio.c2i	/^fn c_char* ctermid(c_char* __s);$/;"	f
ctermid_r	$C2_ROOT/libs/libc/stdio.c2i	/^fn c_char* ctermid_r(c_char*);$/;"	f
ctermios	$C2_ROOT/libs/libc/ctermios.c2i	/^module ctermios;$/;"	m
ctime	$C2_ROOT/libs/libc/libc_time.c2i	/^fn c_char* ctime(const Time* timep);$/;"	f
ctime_r	$C2_ROOT/libs/libc/libc_time.c2i	/^fn c_char* ctime_r(const Time* timep, char* buf);$/;"	f
ctr_drbg_init	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^fn void ctr_drbg_init( Ctr_drbg_context *ctx ) @(cname="mbedtls_ctr_drbg_init");$/;"	f
ctr_drbg_random	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^fn c_int ctr_drbg_random( void *p_rng, c_uchar *output, c_size output_len) @(cname="mbedtls_ctr_/;"	f
ctr_drbg_seed	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^fn c_int ctr_drbg_seed( Ctr_drbg_context *ctx,$/;"	f
ctv_analyser	$C2_ROOT/analyser_utils/ctv_analyser.c2	/^module ctv_analyser;$/;"	m
ctype	$C2_ROOT/libs/libc/ctype.c2i	/^module ctype;$/;"	m
currently	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^const c_int WANT_READ                         = -0x6900;  \/**< No data of requested type curren/;"	t
curses	$C2_ROOT/libs/curses/curses.c2i	/^module curses;$/;"	m
cylinderSizes	$C2_ROOT/libs/sokol/sokol_shape.c2i	/^fn Sizes cylinderSizes(u32 slices, u32 stacks) @(cname="sshape_cylinder_sizes");$/;"	f
cylinderSizes	$C2_ROOT/libs/sokol_/sokol_shape.c2i	/^fn Sizes cylinderSizes(u32 slices, u32 stacks) @(cname="sshape_cylinder_sizes");$/;"	f
d3d11Device	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn void* d3d11Device() @(cname="sg_d3d11_device");$/;"	f
d3d11Device	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn void* d3d11Device() @(cname="sg_d3d11_device");$/;"	f
d3d11DeviceContext	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn void* d3d11DeviceContext() @(cname="sg_d3d11_device_context");$/;"	f
d3d11DeviceContext	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn void* d3d11DeviceContext() @(cname="sg_d3d11_device_context");$/;"	f
d3d11GetDepthStencilView	$C2_ROOT/libs/sokol/sokol_app.c2i	/^fn void* d3d11GetDepthStencilView() @(cname="sapp_d3d11_get_depth_stencil_view");$/;"	f
d3d11GetDepthStencilView	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^fn void* d3d11GetDepthStencilView() @(cname="sapp_d3d11_get_depth_stencil_view");$/;"	f
d3d11GetDevice	$C2_ROOT/libs/sokol/sokol_app.c2i	/^fn void* d3d11GetDevice() @(cname="sapp_d3d11_get_device");$/;"	f
d3d11GetDevice	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^fn void* d3d11GetDevice() @(cname="sapp_d3d11_get_device");$/;"	f
d3d11GetDeviceContext	$C2_ROOT/libs/sokol/sokol_app.c2i	/^fn void* d3d11GetDeviceContext() @(cname="sapp_d3d11_get_device_context");$/;"	f
d3d11GetDeviceContext	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^fn void* d3d11GetDeviceContext() @(cname="sapp_d3d11_get_device_context");$/;"	f
d3d11GetRenderView	$C2_ROOT/libs/sokol/sokol_app.c2i	/^fn void* d3d11GetRenderView() @(cname="sapp_d3d11_get_render_view");$/;"	f
d3d11GetRenderView	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^fn void* d3d11GetRenderView() @(cname="sapp_d3d11_get_render_view");$/;"	f
d3d11GetResolveView	$C2_ROOT/libs/sokol/sokol_app.c2i	/^fn void* d3d11GetResolveView() @(cname="sapp_d3d11_get_resolve_view");$/;"	f
d3d11GetResolveView	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^fn void* d3d11GetResolveView() @(cname="sapp_d3d11_get_resolve_view");$/;"	f
d3d11GetSwapChain	$C2_ROOT/libs/sokol/sokol_app.c2i	/^fn void* d3d11GetSwapChain() @(cname="sapp_d3d11_get_swap_chain");$/;"	f
d3d11GetSwapChain	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^fn void* d3d11GetSwapChain() @(cname="sapp_d3d11_get_swap_chain");$/;"	f
d3d11QueryBufferInfo	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn D3d11BufferInfo d3d11QueryBufferInfo(Buffer buf) @(cname="sg_d3d11_query_buffer_info");$/;"	f
d3d11QueryBufferInfo	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn D3d11BufferInfo d3d11QueryBufferInfo(Buffer buf) @(cname="sg_d3d11_query_buffer_info");$/;"	f
d3d11QueryImageInfo	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn D3d11ImageInfo d3d11QueryImageInfo(Image img) @(cname="sg_d3d11_query_image_info");$/;"	f
d3d11QueryImageInfo	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn D3d11ImageInfo d3d11QueryImageInfo(Image img) @(cname="sg_d3d11_query_image_info");$/;"	f
d3d11QueryPipelineInfo	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn D3d11PipelineInfo d3d11QueryPipelineInfo(Pipeline pip) @(cname="sg_d3d11_query_pipeline_info"/;"	f
d3d11QueryPipelineInfo	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn D3d11PipelineInfo d3d11QueryPipelineInfo(Pipeline pip) @(cname="sg_d3d11_query_pipeline_info"/;"	f
d3d11QuerySamplerInfo	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn D3d11SamplerInfo d3d11QuerySamplerInfo(Sampler smp) @(cname="sg_d3d11_query_sampler_info");$/;"	f
d3d11QuerySamplerInfo	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn D3d11SamplerInfo d3d11QuerySamplerInfo(Sampler smp) @(cname="sg_d3d11_query_sampler_info");$/;"	f
d3d11QueryShaderInfo	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn D3d11ShaderInfo d3d11QueryShaderInfo(Shader shd) @(cname="sg_d3d11_query_shader_info");$/;"	f
d3d11QueryShaderInfo	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn D3d11ShaderInfo d3d11QueryShaderInfo(Shader shd) @(cname="sg_d3d11_query_shader_info");$/;"	f
d3d11QueryViewInfo	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn D3d11ViewInfo d3d11QueryViewInfo(View view) @(cname="sg_d3d11_query_view_info");$/;"	f
d3d11QueryViewInfo	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn D3d11ViewInfo d3d11QueryViewInfo(View view) @(cname="sg_d3d11_query_view_info");$/;"	f
data	$C2_ROOT/ast_utils/string_buffer.c2	/^public fn const char* Buf.data(const Buf* buf) {$/;"	f
data	$C2_ROOT/common/file/reader.c2	/^public fn const void* File.data(File* file) @(unused) {$/;"	f
data_size	$C2_ROOT/common/file/reader.c2	/^public fn u32 File.data_size(File* file) @(unused) {$/;"	f
deallocBuffer	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn void deallocBuffer(Buffer buf) @(cname="sg_dealloc_buffer");$/;"	f
deallocBuffer	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn void deallocBuffer(Buffer buf) @(cname="sg_dealloc_buffer");$/;"	f
deallocImage	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn void deallocImage(Image img) @(cname="sg_dealloc_image");$/;"	f
deallocImage	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn void deallocImage(Image img) @(cname="sg_dealloc_image");$/;"	f
deallocPipeline	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn void deallocPipeline(Pipeline pip) @(cname="sg_dealloc_pipeline");$/;"	f
deallocPipeline	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn void deallocPipeline(Pipeline pip) @(cname="sg_dealloc_pipeline");$/;"	f
deallocSampler	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn void deallocSampler(Sampler smp) @(cname="sg_dealloc_sampler");$/;"	f
deallocSampler	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn void deallocSampler(Sampler smp) @(cname="sg_dealloc_sampler");$/;"	f
deallocShader	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn void deallocShader(Shader shd) @(cname="sg_dealloc_shader");$/;"	f
deallocShader	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn void deallocShader(Shader shd) @(cname="sg_dealloc_shader");$/;"	f
deallocView	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn void deallocView(View view) @(cname="sg_dealloc_view");$/;"	f
deallocView	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn void deallocView(View view) @(cname="sg_dealloc_view");$/;"	f
debug	$C2_ROOT/common/console.c2	/^public fn void debug(const char* format @(printf_format), ...) {$/;"	f
decl2valtype	$C2_ROOT/analyser/module_analyser_member.c2	/^fn ValType decl2valtype(const Decl* d) {$/;"	f
decl_clear_generated	$C2_ROOT/generator/c/c_generator.c2	/^fn void Generator.decl_clear_generated(void* \/*arg*\/, Decl* d) {$/;"	f
decl_mark_generated	$C2_ROOT/generator/c/c_generator.c2	/^fn void Generator.decl_mark_generated(void* \/*arg*\/, Decl* d) {$/;"	f
decode	$C2_ROOT/common/utf8.c2	/^public fn u32 decode(const char *p, u32 max_len, u32* pc) {$/;"	f
decr	$C2_ROOT/ast/value.c2	/^public fn void Value.decr(Value* v) {$/;"	f
decr	$C2_ROOT/ir/usage_counter.c2	/^public fn void Counter.decr(Counter* c, u32 idx) {$/;"	f
defaultContext	$C2_ROOT/libs/sokol/sokol_debugtext.c2i	/^fn Context defaultContext() @(cname="sdtx_default_context");$/;"	f
defaultContext	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn Context defaultContext() @(cname="sgl_default_context");$/;"	f
defaultContext	$C2_ROOT/libs/sokol_/sokol_debugtext.c2i	/^fn Context defaultContext() @(cname="sdtx_default_context");$/;"	f
defaultContext	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn Context defaultContext() @(cname="sgl_default_context");$/;"	f
defaults	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn void defaults() @(cname="sgl_defaults");$/;"	f
defaults	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn void defaults() @(cname="sgl_defaults");$/;"	f
definition	$C2_ROOT/libs/sokol/c/sokol_app.h	/^        #pragma warning(disable:4115)   \/* \/W4: 'ID3D11ModuleInstance': named type definition /;"	t
definition	$C2_ROOT/libs/sokol/c/sokol_gfx.h	/^#pragma warning(disable:4115)   \/\/ named type definition in parentheses$/;"	t
definition	$C2_ROOT/libs/sokol_/c/sokol_app.h	/^        #pragma warning(disable:4115)   \/* \/W4: 'ID3D11ModuleInstance': named type definition /;"	t
definition	$C2_ROOT/libs/sokol_/c/sokol_gfx.h	/^#pragma warning(disable:4115)   \/\/ named type definition in parentheses$/;"	t
deg	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn c_float deg(c_float rad) @(cname="sgl_deg");$/;"	f
deg	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn c_float deg(c_float rad) @(cname="sgl_deg");$/;"	f
deinit	$C2_ROOT/ast/utils.c2	/^public fn void deinit(bool print_stats) {$/;"	f
deinit	$C2_ROOT/ast_utils/string_buffer.c2	/^fn void Buf.deinit(Buf* buf) {$/;"	f
del	$C2_ROOT/common/string_list.c2	/^public fn u32 List.del(List* l, u32 idx) {$/;"	f
delay	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn void delay(u32 ms) @(cname="SDL_Delay");$/;"	f
deleteScope	$C2_ROOT/analyser/module_analyser.c2	/^fn void Analyser.deleteScope(void* \/*arg*\/, AST* a) {$/;"	f
dep_finder	$C2_ROOT/generator/c/dep_finder.c2	/^module dep_finder;$/;"	m
dependencies	$C2_ROOT/generator/c/dep_finder.c2	/^    if (d.getModule() != s.mod) return; \/\/ we're only interested in same module dependencies$/;"	m
deps_add	$C2_ROOT/plugins/deps_generator.c2	/^fn void Generator.deps_add(Generator* gen, Decl* d) {$/;"	f
deps_generator	$C2_ROOT/plugins/deps_generator.c2	/^module deps_generator;$/;"	m
deps_generator_utils	$C2_ROOT/plugins/deps_generator_utils.c2	/^module deps_generator_utils;$/;"	m
deps_resize	$C2_ROOT/plugins/deps_generator.c2	/^fn void Generator.deps_resize(Generator* gen, u32 capacity) {$/;"	f
depthFormat	$C2_ROOT/libs/sokol/sokol_app.c2i	/^fn c_int depthFormat() @(cname="sapp_depth_format");$/;"	f
depthFormat	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^fn c_int depthFormat() @(cname="sapp_depth_format");$/;"	f
destroy	$C2_ROOT/common/yaml/yaml_data.c2	/^fn void Data.destroy(Data* d) {$/;"	f
destroy	$C2_ROOT/common/yaml/yaml_parser.c2	/^public fn void Parser.destroy(Parser* p) {$/;"	f
destroy	$C2_ROOT/ir/work_queue.c2	/^fn void QueueWorker.destroy(QueueWorker* w) {$/;"	f
destroy	$C2_ROOT/libs/pthread/pthread.c2i	/^fn c_int Mutex.destroy(Mutex* mutex) @(cname="pthread_mutex_destroy");$/;"	f
destroy	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn void Window.destroy(Window* window) @(cname="SDL_DestroyWindow");$/;"	f
destroy	$C2_ROOT/tools/tester/expect_file.c2	/^public fn void ExpectFile.destroy(ExpectFile* f) {$/;"	f
destroy	$C2_ROOT/tools/tester/issues.c2	/^public fn void Issues.destroy(Issues* i) {$/;"	f
destroy	$C2_ROOT/tools/tester/line_db.c2	/^public fn void Db.destroy(Db* db) {$/;"	f
destroy	$C2_ROOT/tools/tester/test_db.c2	/^public fn void Db.destroy(Db* db) {$/;"	f
destroy	$C2_ROOT/tools/tester/tester.c2	/^fn void Tester.destroy(Tester* t) {$/;"	f
destroyBuffer	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn void destroyBuffer(Buffer buf) @(cname="sg_destroy_buffer");$/;"	f
destroyBuffer	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn void destroyBuffer(Buffer buf) @(cname="sg_destroy_buffer");$/;"	f
destroyContext	$C2_ROOT/libs/sokol/sokol_debugtext.c2i	/^fn void destroyContext(Context ctx) @(cname="sdtx_destroy_context");$/;"	f
destroyContext	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn void destroyContext(Context ctx) @(cname="sgl_destroy_context");$/;"	f
destroyContext	$C2_ROOT/libs/sokol_/sokol_debugtext.c2i	/^fn void destroyContext(Context ctx) @(cname="sdtx_destroy_context");$/;"	f
destroyContext	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn void destroyContext(Context ctx) @(cname="sgl_destroy_context");$/;"	f
destroyImage	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn void destroyImage(Image img) @(cname="sg_destroy_image");$/;"	f
destroyImage	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn void destroyImage(Image img) @(cname="sg_destroy_image");$/;"	f
destroyPipeline	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn void destroyPipeline(Pipeline pip) @(cname="sg_destroy_pipeline");$/;"	f
destroyPipeline	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn void destroyPipeline(Pipeline pip) @(cname="sgl_destroy_pipeline");$/;"	f
destroyPipeline	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn void destroyPipeline(Pipeline pip) @(cname="sg_destroy_pipeline");$/;"	f
destroyPipeline	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn void destroyPipeline(Pipeline pip) @(cname="sgl_destroy_pipeline");$/;"	f
destroySampler	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn void destroySampler(Sampler smp) @(cname="sg_destroy_sampler");$/;"	f
destroySampler	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn void destroySampler(Sampler smp) @(cname="sg_destroy_sampler");$/;"	f
destroyShader	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn void destroyShader(Shader shd) @(cname="sg_destroy_shader");$/;"	f
destroyShader	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn void destroyShader(Shader shd) @(cname="sg_destroy_shader");$/;"	f
destroyView	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn void destroyView(View view) @(cname="sg_destroy_view");$/;"	f
destroyView	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn void destroyView(View view) @(cname="sg_destroy_view");$/;"	f
detach	$C2_ROOT/ast_utils/string_buffer.c2	/^public fn void* Buf.detach(Buf* buf, u32 *psize) {$/;"	f
detach	$C2_ROOT/common/file/reader.c2	/^public fn void* File.detach(File* file, u32 *psize) @(unused) {$/;"	f
diagName	$C2_ROOT/ast/qualtype.c2	/^public fn const char* QualType.diagName(const QualType* qt) {$/;"	f
diagName	$C2_ROOT/ast/type_ref.c2	/^public fn const char* TypeRef.diagName(const TypeRef* r) {$/;"	f
diagNameBare	$C2_ROOT/ast/qualtype.c2	/^public fn const char* QualType.diagNameBare(const QualType* qt) {$/;"	f
diagnostics	$C2_ROOT/common/diagnostics.c2	/^module diagnostics;$/;"	m
diff	$C2_ROOT/libs/sokol/sokol_time.c2i	/^fn u64 diff(u64 new_ticks, u64 old_ticks) @(cname="stm_diff");$/;"	f
diff	$C2_ROOT/libs/sokol_/sokol_time.c2i	/^fn u64 diff(u64 new_ticks, u64 old_ticks) @(cname="stm_diff");$/;"	f
dirname	$C2_ROOT/libs/libc/libgen.c2i	/^fn c_char* dirname(c_char* path);$/;"	f
disableAsserts	$C2_ROOT/common/build_target.c2	/^public fn void Target.disableAsserts(Target* t) { t.disable_asserts = true; }$/;"	f
disableFrameStats	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn void disableFrameStats() @(cname="sg_disable_frame_stats");$/;"	f
disableFrameStats	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn void disableFrameStats() @(cname="sg_disable_frame_stats");$/;"	f
disableTexture	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn void disableTexture() @(cname="sgl_disable_texture");$/;"	f
disableTexture	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn void disableTexture() @(cname="sgl_disable_texture");$/;"	f
disableWarnings	$C2_ROOT/common/build_target.c2	/^public fn void Target.disableWarnings(Target* t) {$/;"	f
dispatch	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn void dispatch(c_int num_groups_x, c_int num_groups_y, c_int num_groups_z) @(cname="sg_dispatc/;"	f
dispatch	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn void dispatch(c_int num_groups_x, c_int num_groups_y, c_int num_groups_z) @(cname="sg_dispatc/;"	f
div	$C2_ROOT/libs/libc/stdlib.c2i	/^fn Div_t div(c_int __numer, c_int __denom);$/;"	f
divide	$C2_ROOT/ast/value.c2	/^fn Value Value.divide(const Value* v1, const Value* v2) {$/;"	f
dlclose	$C2_ROOT/libs/dl/dlfcn.c2i	/^fn c_int dlclose(void* handle);$/;"	f
dlerror	$C2_ROOT/libs/dl/dlfcn.c2i	/^fn char* dlerror();$/;"	f
dlfcn	$C2_ROOT/libs/dl/dlfcn.c2i	/^module dlfcn;$/;"	m
dlopen	$C2_ROOT/libs/dl/dlfcn.c2i	/^fn void* dlopen(const c_char* file, c_int mode);$/;"	f
dlsym	$C2_ROOT/libs/dl/dlfcn.c2i	/^fn void* dlsym(void* handle, const c_char* name);$/;"	f
doWIFEXITED	$C2_ROOT/common/process_utils.c2	/^fn bool doWIFEXITED(i32 state) {$/;"	f
doWIFEXITED	$C2_ROOT/tools/tester/test_db.c2	/^fn bool doWIFEXITED(i32 state) {$/;"	f
doWIFSIGNALED	$C2_ROOT/common/process_utils.c2	/^fn bool doWIFSIGNALED(i32 state) {$/;"	f
doc_end	$C2_ROOT/common/yaml/yaml_parser.c2	/^fn void Parser.doc_end(Parser* p) {$/;"	f
doc_start	$C2_ROOT/common/yaml/yaml_parser.c2	/^fn void Parser.doc_start(Parser* p) {$/;"	f
done	$C2_ROOT/common/yaml/yaml_iterator.c2	/^public fn bool Iter.done(const Iter* iter) {$/;"	f
dontfork	$C2_ROOT/libs/io_uring/io_uring.c2i	/^fn c_int Ring.dontfork(Ring *ring) @(cname="io_uring_ring_dontfork");$/;"	f
dpiScale	$C2_ROOT/libs/sokol/sokol_app.c2i	/^fn c_float dpiScale() @(cname="sapp_dpi_scale");$/;"	f
dpiScale	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^fn c_float dpiScale() @(cname="sapp_dpi_scale");$/;"	f
dprintf	$C2_ROOT/libs/libc/stdio.c2i	/^fn c_int dprintf(c_int __fd, const c_char* __fmt @(printf_format), ...);$/;"	f
drand48	$C2_ROOT/libs/libc/stdlib.c2i	/^fn c_double drand48();$/;"	f
drand48_r	$C2_ROOT/libs/libc/stdlib.c2i	/^fn c_int drand48_r(Drand48_data* __buffer, c_double* __result);$/;"	f
draw	$C2_ROOT/libs/sokol/sokol_debugtext.c2i	/^fn void draw() @(cname="sdtx_draw");$/;"	f
draw	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn void draw(c_int base_element, c_int num_elements, c_int num_instances) @(cname="sg_draw");$/;"	f
draw	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn void draw() @(cname="sgl_draw");$/;"	f
draw	$C2_ROOT/libs/sokol_/sokol_debugtext.c2i	/^fn void draw() @(cname="sdtx_draw");$/;"	f
draw	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn void draw(c_int base_element, c_int num_elements, c_int num_instances) @(cname="sg_draw");$/;"	f
draw	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn void draw() @(cname="sgl_draw");$/;"	f
drawEx	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn void drawEx(c_int base_element, c_int num_elements, c_int num_instances, c_int base_vertex, c/;"	f
drawEx	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn void drawEx(c_int base_element, c_int num_elements, c_int num_instances, c_int base_vertex, c/;"	f
drawLayer	$C2_ROOT/libs/sokol/sokol_debugtext.c2i	/^fn void drawLayer(c_int layer_id) @(cname="sdtx_draw_layer");$/;"	f
drawLayer	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn void drawLayer(c_int layer_id) @(cname="sgl_draw_layer");$/;"	f
drawLayer	$C2_ROOT/libs/sokol_/sokol_debugtext.c2i	/^fn void drawLayer(c_int layer_id) @(cname="sdtx_draw_layer");$/;"	f
drawLayer	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn void drawLayer(c_int layer_id) @(cname="sgl_draw_layer");$/;"	f
drawLine	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn c_int Renderer.drawLine(Renderer* renderer, i32 x1, i32 y1, i32 x2, i32 y2) @(cname="SDL_Rend/;"	f
drawLines	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn c_int Renderer.drawLines(Renderer* renderer, const Point* points, c_int count) @(cname="SDL_R/;"	f
drawPoint	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn c_int Renderer.drawPoint(Renderer* renderer, c_int x, c_int y) @(cname="SDL_RenderDrawPoint")/;"	f
drawPoints	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn c_int Renderer.drawPoints(Renderer* renderer, const Point* points, c_int count) @(cname="SDL_/;"	f
drawRect	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn c_int Renderer.drawRect(Renderer* renderer, const Rect* rect) @(cname="SDL_RenderDrawRect");$/;"	f
drawRects	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn c_int Renderer.drawRects(Renderer* renderer, const Rect* rects, c_int count) @(cname="SDL_Ren/;"	f
dsm_sorter	$C2_ROOT/common/dsm_sorter.c2	/^module dsm_sorter;$/;"	m
dump	$C2_ROOT/analyser/scope.c2	/^public fn void Scope.dump(const Scope* s) @(unused) {$/;"	f
dump	$C2_ROOT/ast/decl.c2	/^public fn void Decl.dump(const Decl* d) {$/;"	f
dump	$C2_ROOT/ast/expr.c2	/^public fn void Expr.dump(const Expr* e) {$/;"	f
dump	$C2_ROOT/ast/member_expr.c2	/^public fn void MemberExpr.dump(const MemberExpr* m) @(unused) {$/;"	f
dump	$C2_ROOT/ast/qualtype.c2	/^public fn void QualType.dump(const QualType* qt) @(unused) {$/;"	f
dump	$C2_ROOT/ast/statistics.c2	/^fn void Stats.dump(const Stats* s) {$/;"	f
dump	$C2_ROOT/ast/stmt.c2	/^public fn void Stmt.dump(const Stmt* s) {$/;"	f
dump	$C2_ROOT/ast/symbol_table.c2	/^public fn void SymbolTable.dump(const SymbolTable* t) @(unused) {$/;"	f
dump	$C2_ROOT/ast/type.c2	/^public fn void Type.dump(const Type* t) @(unused) {$/;"	f
dump	$C2_ROOT/ast/type_ref.c2	/^public fn void TypeRefHolder.dump(const TypeRefHolder* h) @(unused) {$/;"	f
dump	$C2_ROOT/common/yaml/yaml_dump.c2	/^public fn void Parser.dump(const Parser* p, bool verbose) @(unused) {$/;"	f
dump	$C2_ROOT/generator/c2refs.c2	/^public fn void Refs.dump(const Refs* r, bool verbose) {$/;"	f
dump	$C2_ROOT/generator/radix_tree/radix_tree_dump.c2	/^public fn void Tree.dump(const Tree* t, bool verbose) {$/;"	f
dump	$C2_ROOT/ir/inserter.c2	/^public fn void Inserter.dump(const Inserter* ins) @(unused) {$/;"	f
dump	$C2_ROOT/ir/interference_graph.c2	/^public fn void Iter.dump(const Iter* iter) @(unused) {$/;"	f
dump	$C2_ROOT/ir/live_map.c2	/^public fn void Map.dump(const Map* g, bool verbose) @(unused) {$/;"	f
dump	$C2_ROOT/ir/lookup_table.c2	/^public fn void Table.dump(const Table* t) @(unused) {$/;"	f
dump	$C2_ROOT/ir/phi_list.c2	/^public fn void PhiClauses.dump(const PhiClauses* c) @(unused) {$/;"	f
dump	$C2_ROOT/ir/print.c2	/^public fn void Context.dump(const Context* c) @(unused) {$/;"	f
dump	$C2_ROOT/ir/register_alloc.c2	/^fn void LiveVector.dump(const LiveVector* v) @(unused) {$/;"	f
dump	$C2_ROOT/ir/rev_list.c2	/^public fn void RevList.dump(const RevList* r) @(unused) {$/;"	f
dump	$C2_ROOT/ir/slot_collector.c2	/^public fn void SlotCollector.dump(const SlotCollector* c) @(unused) {$/;"	f
dump	$C2_ROOT/ir/slot_values.c2	/^public fn void SlotValues.dump(const SlotValues* v) @(unused) {$/;"	f
dump	$C2_ROOT/ir/slot_writes_map.c2	/^public fn void Map.dump(const Map* m, bool verbose) @(unused) {$/;"	f
dump	$C2_ROOT/ir/usage_counter.c2	/^public fn void Counter.dump(const Counter* c) @(unused) {$/;"	f
dump	$C2_ROOT/libs/lua/lua.c2i	/^fn c_int dump(State *L, Writer writer, void *data, c_int strip) @(cname="lua_dump");$/;"	f
dump	$C2_ROOT/tools/tester/issues.c2	/^public fn void Issues.dump(const Issues* i) @(unused) {$/;"	f
dump2	$C2_ROOT/generator/radix_tree/radix_tree_dump.c2	/^fn void Tree.dump2(const Tree* t, bool print_nodes, bool print_words, bool print_stats) {$/;"	f
dumpRanges	$C2_ROOT/ir/register_alloc.c2	/^fn void LiveVector.dumpRanges(const LiveVector* v, u32 num_blocks) @(unused) {$/;"	f
dump_full	$C2_ROOT/ast/qualtype.c2	/^public fn void QualType.dump_full(const QualType* qt) {$/;"	f
dump_full	$C2_ROOT/ast/type_ref.c2	/^public fn void TypeRef.dump_full(const TypeRef* r) @(unused) {$/;"	f
dump_function	$C2_ROOT/ir/print.c2	/^fn void dump_function(const FunctionInfo* info, const char* name) @(unused) {$/;"	f
dump_function_info	$C2_ROOT/ir/print.c2	/^fn void dump_function_info(string_buffer.Buf* out, const FunctionInfo* info) @(unused) {$/;"	f
dump_node	$C2_ROOT/common/yaml/yaml_dump.c2	/^fn void Data.dump_node(const Data* d, const Node* n, i32 indent) {$/;"	f
dump_nodes	$C2_ROOT/generator/radix_tree/radix_tree_dump.c2	/^fn void Tree.dump_nodes(const Tree* t, u32 idx, u32 end) {$/;"	f
dump_stats	$C2_ROOT/generator/radix_tree/radix_tree_dump.c2	/^fn void Tree.dump_stats(const Tree* t) {$/;"	f
dump_temps	$C2_ROOT/ir/print.c2	/^public fn void Context.dump_temps(const Context* c) @(unused) {$/;"	f
dump_token	$C2_ROOT/parser/c2_parser.c2	/^fn void Parser.dump_token(Parser* p, const Token* tok) @(unused) {$/;"	f
dump_words	$C2_ROOT/generator/radix_tree/radix_tree_dump.c2	/^public fn void Tree.dump_words(const Tree* t) @(unused) {$/;"	f
dump_zones	$C2_ROOT/generator/radix_tree/radix_tree_dump.c2	/^fn void Tree.dump_zones(const Tree* t) @(unused) {$/;"	f
dup	$C2_ROOT/libs/libc/unistd.c2i	/^fn c_int dup(c_int oldfd);$/;"	f
dup2	$C2_ROOT/libs/libc/unistd.c2i	/^fn c_int dup2(c_int oldfd, c_int newfd);$/;"	f
dup3	$C2_ROOT/libs/libc/unistd.c2i	/^fn c_int dup3(c_int oldfd, c_int newfd, c_int flags);$/;"	f
ecvt	$C2_ROOT/libs/libc/stdlib.c2i	/^fn c_char* ecvt(c_double __value, c_int __ndigit, c_int* __decpt, c_int* __sign);$/;"	f
ecvt_r	$C2_ROOT/libs/libc/stdlib.c2i	/^fn c_int ecvt_r(c_double __value, c_int __ndigit, c_int* __decpt, c_int* __sign, c_char* __buf, /;"	f
eglGetContext	$C2_ROOT/libs/sokol/sokol_app.c2i	/^fn void* eglGetContext() @(cname="sapp_egl_get_context");$/;"	f
eglGetContext	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^fn void* eglGetContext() @(cname="sapp_egl_get_context");$/;"	f
eglGetDisplay	$C2_ROOT/libs/sokol/sokol_app.c2i	/^fn void* eglGetDisplay() @(cname="sapp_egl_get_display");$/;"	f
eglGetDisplay	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^fn void* eglGetDisplay() @(cname="sapp_egl_get_display");$/;"	f
elementRange	$C2_ROOT/libs/sokol/sokol_shape.c2i	/^fn ElementRange elementRange(Buffer* buf) @(cname="sshape_element_range");$/;"	f
elementRange	$C2_ROOT/libs/sokol_/sokol_shape.c2i	/^fn ElementRange elementRange(Buffer* buf) @(cname="sshape_element_range");$/;"	f
eliminateCopies	$C2_ROOT/ir/ssa.c2	/^fn void Tools.eliminateCopies(Tools* t) {$/;"	f
emitAliasType	$C2_ROOT/generator/c/c_generator.c2	/^fn void Generator.emitAliasType(Generator* gen, string_buffer.Buf* out, Decl* d) {$/;"	f
emitAliasTypeDecl	$C2_ROOT/generator/c2i/c2i_generator_decl.c2	/^fn void Generator.emitAliasTypeDecl(Generator* gen, string_buffer.Buf* out, const Decl* d) {$/;"	f
emitAndCond	$C2_ROOT/generator/ir/ir_generator_expr.c2	/^fn void Generator.emitAndCond(Generator* gen, const BinaryOperator* b, BlockId true_blk, BlockId/;"	f
emitArrayDesigExpr	$C2_ROOT/generator/c/c_generator_expr.c2	/^fn void Generator.emitArrayDesigExpr(Generator* gen, string_buffer.Buf* out, Expr* e) {$/;"	f
emitArrayDesigExpr	$C2_ROOT/generator/c2i/c2i_generator_expr.c2	/^fn void Generator.emitArrayDesigExpr(Generator* gen, string_buffer.Buf* out, const ArrayDesignat/;"	f
emitArrayInit	$C2_ROOT/generator/ir/ir_generator.c2	/^fn void Generator.emitArrayInit(Generator* gen, const Expr* e) {$/;"	f
emitArrayInitExpr	$C2_ROOT/generator/ir/ir_generator_expr.c2	/^fn void Generator.emitArrayInitExpr(Generator* gen, const StackVar* var, const Expr* e) {$/;"	f
emitArraySubscript	$C2_ROOT/generator/ir/ir_generator_expr.c2	/^fn void Generator.emitArraySubscript(Generator* gen, ir.Ref* result, const Expr* e) {$/;"	f
emitAsDefine	$C2_ROOT/generator/c/c_generator.c2	/^fn bool emitAsDefine(const VarDecl* vd) {$/;"	f
emitAsmOperand	$C2_ROOT/generator/c/c_generator_stmt.c2	/^fn void Generator.emitAsmOperand(Generator* gen, u32 name, const Expr* c, Expr* e) {$/;"	f
emitAsmOperand	$C2_ROOT/generator/c2i/c2i_generator_stmt.c2	/^fn void Generator.emitAsmOperand(Generator* gen, u32 name, const Expr* c, Expr* e) {$/;"	f
emitAsmPart	$C2_ROOT/generator/c/c_generator_stmt.c2	/^fn void emitAsmPart(string_buffer.Buf* out, bool multi_line, u32 indent) {$/;"	f
emitAsmPart	$C2_ROOT/generator/c2i/c2i_generator_stmt.c2	/^fn void emitAsmPart(string_buffer.Buf* out, bool multi_line, u32 indent) {$/;"	f
emitAsmStmt	$C2_ROOT/generator/c/c_generator_stmt.c2	/^fn void Generator.emitAsmStmt(Generator* gen, AsmStmt* a, u32 indent) {$/;"	f
emitAsmStmt	$C2_ROOT/generator/c2i/c2i_generator_stmt.c2	/^fn void Generator.emitAsmStmt(Generator* gen, AsmStmt* a, u32 indent) {$/;"	f
emitAssertStmt	$C2_ROOT/generator/ir/ir_generator_stmt.c2	/^fn void Generator.emitAssertStmt(Generator* gen, const Stmt* s) {$/;"	f
emitAssign	$C2_ROOT/generator/ir/ir_generator_binop.c2	/^fn void Generator.emitAssign(Generator* gen, ir.Ref* result, const Expr* lhs, const Expr* rhs) {$/;"	f
emitAssignCond	$C2_ROOT/generator/ir/ir_generator_expr.c2	/^fn void Generator.emitAssignCond(Generator* gen, ir.Type t, ir.Ref lhs, ir.Ref rhs, BlockId left/;"	f
emitAutoInit	$C2_ROOT/generator/c/c_generator.c2	/^fn void Generator.emitAutoInit(Generator* gen, string_buffer.Buf* out, QualType qt) {$/;"	f
emitBinaryCond	$C2_ROOT/generator/ir/ir_generator_expr.c2	/^fn bool Generator.emitBinaryCond(Generator* gen, const Expr* e, BlockId left, BlockId right, Blo/;"	f
emitBinaryOperator	$C2_ROOT/generator/c/c_generator_expr.c2	/^fn void Generator.emitBinaryOperator(Generator* gen, string_buffer.Buf* out, Expr* e, C_Prec pre/;"	f
emitBinaryOperator	$C2_ROOT/generator/c2i/c2i_generator_expr.c2	/^fn void Generator.emitBinaryOperator(Generator* gen, string_buffer.Buf* out, const BinaryOperato/;"	f
emitBinaryOperator	$C2_ROOT/generator/ir/ir_generator_binop.c2	/^fn void Generator.emitBinaryOperator(Generator* gen, ir.Ref* result, const Expr* e) {$/;"	f
emitBitOffset	$C2_ROOT/generator/c/c_generator_expr.c2	/^fn void Generator.emitBitOffset(Generator* gen, string_buffer.Buf* out, Expr* base, Expr* index,/;"	f
emitBitfield	$C2_ROOT/generator/ir/ir_generator.c2	/^fn void Generator.emitBitfield(Generator* gen, u8 size, u64 value) {$/;"	f
emitBitfieldAssign	$C2_ROOT/generator/ir/ir_generator_binop.c2	/^fn void Generator.emitBitfieldAssign(Generator* gen, ir.Ref* result, const Expr* lhs, const Expr/;"	f
emitBuiltin	$C2_ROOT/generator/ir/ir_generator_expr.c2	/^fn void Generator.emitBuiltin(Generator* gen, ir.Ref* result, const Expr* e) {$/;"	f
emitBuiltinExpr	$C2_ROOT/generator/c/c_generator_expr.c2	/^fn void Generator.emitBuiltinExpr(Generator* gen, string_buffer.Buf* out, Expr* e) {$/;"	f
emitBuiltinExpr	$C2_ROOT/generator/c2i/c2i_generator_expr.c2	/^fn void Generator.emitBuiltinExpr(Generator* gen, string_buffer.Buf* out, const BuiltinExpr* b) /;"	f
emitCName	$C2_ROOT/generator/c/c_generator.c2	/^fn void Generator.emitCName(Generator* gen, string_buffer.Buf* out, const Decl* d) {$/;"	f
emitCNameMod	$C2_ROOT/generator/c/c_generator.c2	/^fn void Generator.emitCNameMod(Generator* \/*gen*\/, string_buffer.Buf* out, const Decl* d, Modu/;"	f
emitCall	$C2_ROOT/generator/c/c_generator_call.c2	/^fn void Generator.emitCall(Generator* gen, string_buffer.Buf* out, Expr* e) {$/;"	f
emitCall	$C2_ROOT/generator/c2i/c2i_generator_expr.c2	/^fn void Generator.emitCall(Generator* gen, string_buffer.Buf* out, const CallExpr* call) {$/;"	f
emitCallExpr	$C2_ROOT/generator/ir/ir_generator_call.c2	/^fn void Generator.emitCallExpr(Generator* gen, ir.Ref* result, const Expr* e) {$/;"	f
emitCase	$C2_ROOT/generator/c/c_generator_stmt.c2	/^fn void Generator.emitCase(Generator* gen, SwitchCase* c, u32 indent, u32 *lab) {$/;"	f
emitCase	$C2_ROOT/generator/c2i/c2i_generator_stmt.c2	/^fn void Generator.emitCase(Generator* gen, SwitchCase* c, u32 indent, u32 *lab) {$/;"	f
emitCast	$C2_ROOT/generator/c/c_generator_expr.c2	/^fn void Generator.emitCast(Generator* gen, string_buffer.Buf* out, QualType qt, bool full) {$/;"	f
emitCond	$C2_ROOT/generator/ir/ir_generator_expr.c2	/^fn void Generator.emitCond(Generator* gen, const Expr* e, BlockId true_blk, BlockId false_blk, B/;"	f
emitCondOperator	$C2_ROOT/generator/ir/ir_generator_expr.c2	/^fn void Generator.emitCondOperator(Generator* gen, ir.Ref* result, const Expr* e) {$/;"	f
emitConstExpr	$C2_ROOT/generator/c/c_generator.c2	/^fn void Generator.emitConstExpr(Generator* gen, string_buffer.Buf* out, Expr* e, C_Prec prec) {$/;"	f
emitCtv	$C2_ROOT/generator/c/c_generator.c2	/^fn void Generator.emitCtv(Generator* \/*gen*\/, string_buffer.Buf* out, const Expr* e) {$/;"	f
emitDeclName	$C2_ROOT/generator/c/c_generator.c2	/^fn void Generator.emitDeclName(Generator* gen, string_buffer.Buf* out, const Decl* d) {$/;"	f
emitDeclName	$C2_ROOT/generator/c2i/c2i_generator_decl.c2	/^fn void Generator.emitDeclName(Generator* gen, string_buffer.Buf* out, Decl* d) {$/;"	f
emitDotOrArrow	$C2_ROOT/generator/c/c_generator_expr.c2	/^fn void emitDotOrArrow(string_buffer.Buf* out, QualType qt) {$/;"	f
emitEnumType	$C2_ROOT/generator/c/c_generator.c2	/^fn void Generator.emitEnumType(Generator* gen, string_buffer.Buf* out, Decl* d) {$/;"	f
emitEnumType	$C2_ROOT/generator/c2i/c2i_generator_decl.c2	/^fn void Generator.emitEnumType(Generator* gen, string_buffer.Buf* out, const Decl* d) {$/;"	f
emitExpr	$C2_ROOT/generator/c/c_generator_expr.c2	/^fn void Generator.emitExpr(Generator* gen, string_buffer.Buf* out, Expr* e) {$/;"	f
emitExpr	$C2_ROOT/generator/c2i/c2i_generator_expr.c2	/^fn void Generator.emitExpr(Generator* gen, string_buffer.Buf* out, const Expr* e) {$/;"	f
emitExpr	$C2_ROOT/generator/ir/ir_generator_expr.c2	/^fn void Generator.emitExpr(Generator* gen, ir.Ref* result, const Expr* e) {$/;"	f
emitExpr2	$C2_ROOT/generator/c/c_generator_expr.c2	/^fn void Generator.emitExpr2(Generator* gen, string_buffer.Buf* out, Expr* e, C_Prec prec) {$/;"	f
emitExprValue	$C2_ROOT/generator/c/c_generator.c2	/^fn bool Generator.emitExprValue(Generator* gen, string_buffer.Buf* out, Expr* e) {$/;"	f
emitFieldDesigExpr	$C2_ROOT/generator/c/c_generator_expr.c2	/^fn void Generator.emitFieldDesigExpr(Generator* gen, string_buffer.Buf* out, Expr* e) {$/;"	f
emitFieldDesigExpr	$C2_ROOT/generator/c2i/c2i_generator_expr.c2	/^fn void Generator.emitFieldDesigExpr(Generator* gen, string_buffer.Buf* out, const FieldDesignat/;"	f
emitForStmt	$C2_ROOT/generator/ir/ir_generator_stmt.c2	/^fn void Generator.emitForStmt(Generator* gen, const Stmt* s) {$/;"	f
emitForwardStructDecl	$C2_ROOT/generator/c/c_generator.c2	/^fn void Generator.emitForwardStructDecl(Generator* gen, Decl* d, string_buffer.Buf* out) {$/;"	f
emitFuncParams	$C2_ROOT/generator/c/c_generator.c2	/^fn void Generator.emitFuncParams(Generator* gen, FunctionDecl* fd, string_buffer.Buf* out) {$/;"	f
emitFunction	$C2_ROOT/generator/c/c_generator.c2	/^fn void Generator.emitFunction(Generator* gen, FunctionDecl* fd) {$/;"	f
emitFunction	$C2_ROOT/generator/ir/ir_generator.c2	/^fn void Generator.emitFunction(Generator* gen, FunctionDecl* fd) {$/;"	f
emitFunctionDecl	$C2_ROOT/generator/c2i/c2i_generator_decl.c2	/^fn void Generator.emitFunctionDecl(Generator* gen, string_buffer.Buf* out, const Decl* d, bool a/;"	f
emitFunctionType	$C2_ROOT/generator/c/c_generator.c2	/^fn void Generator.emitFunctionType(Generator* gen, string_buffer.Buf* out, Decl* d) {$/;"	f
emitFunctionTypeDecl	$C2_ROOT/generator/c2i/c2i_generator_decl.c2	/^fn void Generator.emitFunctionTypeDecl(Generator* gen, string_buffer.Buf* out, const Decl* d) {$/;"	f
emitGlobalDecl	$C2_ROOT/generator/c/c_generator.c2	/^fn void Generator.emitGlobalDecl(Generator* gen, Decl* d) {$/;"	f
emitGlobalDecl	$C2_ROOT/generator/c2i/c2i_generator_decl.c2	/^fn void Generator.emitGlobalDecl(Generator* gen, Decl* d) {$/;"	f
emitGlobalStructInit	$C2_ROOT/generator/ir/ir_generator.c2	/^fn void Generator.emitGlobalStructInit(Generator* gen, const Expr* e) {$/;"	f
emitGlobalVarDecl	$C2_ROOT/generator/c/c_generator.c2	/^fn bool Generator.emitGlobalVarDecl(Generator* gen, string_buffer.Buf* out, Decl* d) {$/;"	f
emitGlobalVarDecl	$C2_ROOT/generator/c2i/c2i_generator_decl.c2	/^fn void Generator.emitGlobalVarDecl(Generator* gen, string_buffer.Buf* out, const Decl* d) {$/;"	f
emitGlobalVarDeclCommon	$C2_ROOT/generator/c/c_generator.c2	/^fn void Generator.emitGlobalVarDeclCommon(Generator* gen, string_buffer.Buf* out, Decl* d) {$/;"	f
emitHeaderDecl	$C2_ROOT/generator/c/c_generator.c2	/^fn void Generator.emitHeaderDecl(Generator* gen, Decl* d) {$/;"	f
emitIdentifier	$C2_ROOT/generator/ir/ir_generator_expr.c2	/^fn void Generator.emitIdentifier(Generator* gen, ir.Ref* result, const Expr* e) {$/;"	f
emitIfStmt	$C2_ROOT/generator/ir/ir_generator_stmt.c2	/^fn void Generator.emitIfStmt(Generator* gen, const Stmt* s) {$/;"	f
emitInit	$C2_ROOT/generator/ir/ir_generator.c2	/^fn void Generator.emitInit(Generator* gen, const Expr* e, u32 size) {$/;"	f
emitInitExpr	$C2_ROOT/generator/ir/ir_generator_expr.c2	/^fn void Generator.emitInitExpr(Generator* gen, const VarDecl* vd, const Expr* ie) {$/;"	f
emitLogicalAnd	$C2_ROOT/generator/ir/ir_generator_binop.c2	/^fn void Generator.emitLogicalAnd(Generator* gen, ir.Ref* result, const Expr* e) {$/;"	f
emitLogicalOr	$C2_ROOT/generator/ir/ir_generator_binop.c2	/^fn void Generator.emitLogicalOr(Generator* gen, ir.Ref* result, const Expr* e) {$/;"	f
emitMemberExpr	$C2_ROOT/generator/c/c_generator_expr.c2	/^fn void Generator.emitMemberExpr(Generator* gen, string_buffer.Buf* out, Expr* e) {$/;"	f
emitMemberExpr	$C2_ROOT/generator/c2i/c2i_generator_expr.c2	/^fn void Generator.emitMemberExpr(Generator* gen, string_buffer.Buf* out, const MemberExpr* m) {$/;"	f
emitMemberExpr	$C2_ROOT/generator/ir/ir_generator_member.c2	/^fn void Generator.emitMemberExpr(Generator* gen, ir.Ref* result, const Expr* e) {$/;"	f
emitMemberExprBase	$C2_ROOT/generator/c/c_generator_expr.c2	/^fn void Generator.emitMemberExprBase(Generator* gen, string_buffer.Buf* out, Expr* e) {$/;"	f
emitNumberFormat	$C2_ROOT/generator/c/c_generator_expr.c2	/^fn void emitNumberFormat(BuiltinKind kind, char letter, string_buffer.Buf* out) {$/;"	f
emitOpAssign	$C2_ROOT/generator/ir/ir_generator_binop.c2	/^fn void Generator.emitOpAssign(Generator* gen, ir.Ref* result, const Expr* e) {$/;"	f
emitOrCond	$C2_ROOT/generator/ir/ir_generator_expr.c2	/^fn void Generator.emitOrCond(Generator* gen, const BinaryOperator* b, BlockId true_blk, BlockId /;"	f
emitPureFunctionCall	$C2_ROOT/generator/c/c_generator_pure_call.c2	/^fn void Generator.emitPureFunctionCall(Generator* gen, string_buffer.Buf* out, Expr* e) {$/;"	f
emitSectionAttr	$C2_ROOT/generator/c/c_generator.c2	/^fn void Generator.emitSectionAttr(Generator* gen, string_buffer.Buf* out, const char* name) {$/;"	f
emitShift	$C2_ROOT/generator/ir/ir_generator_binop.c2	/^fn void Generator.emitShift(Generator* gen, ir.Ref* result, const Expr* e) {$/;"	f
emitStmt	$C2_ROOT/generator/c/c_generator_stmt.c2	/^fn void Generator.emitStmt(Generator* gen, Stmt* s, u32 indent, bool newline) {$/;"	f
emitStmt	$C2_ROOT/generator/c2i/c2i_generator_stmt.c2	/^fn void Generator.emitStmt(Generator* gen, Stmt* s, u32 indent, bool newline) {$/;"	f
emitStmt	$C2_ROOT/generator/ir/ir_generator_stmt.c2	/^fn bool Generator.emitStmt(Generator* gen, const Stmt* s) {$/;"	f
emitStmts	$C2_ROOT/generator/ir/ir_generator_switch.c2	/^fn void Generator.emitStmts(Generator* gen, Stmt** stmts, u32 num_stmts) {$/;"	f
emitStruct	$C2_ROOT/generator/c/c_generator.c2	/^fn void Generator.emitStruct(Generator* gen, string_buffer.Buf* out, Decl* d, u32 indent) {$/;"	f
emitStruct	$C2_ROOT/generator/c2i/c2i_generator_decl.c2	/^fn void Generator.emitStruct(Generator* gen, string_buffer.Buf* out, const Decl* d, u32 indent) /;"	f
emitStructInitExpr	$C2_ROOT/generator/ir/ir_generator_expr.c2	/^fn void Generator.emitStructInitExpr(Generator* gen, const StackVar* var, const Expr* e) {$/;"	f
emitStructMember	$C2_ROOT/generator/c/c_generator.c2	/^fn void Generator.emitStructMember(Generator* gen, string_buffer.Buf* out, Decl* d, u32 indent) /;"	f
emitStructMember	$C2_ROOT/generator/c2i/c2i_generator_decl.c2	/^fn void Generator.emitStructMember(Generator* gen, string_buffer.Buf* out, Decl* d, u32 indent) /;"	f
emitSwitchCase	$C2_ROOT/generator/ir/ir_generator_switch.c2	/^fn bool Generator.emitSwitchCase(Generator* gen,$/;"	f
emitSwitchStmt	$C2_ROOT/generator/c/c_generator_stmt.c2	/^fn void Generator.emitSwitchStmt(Generator* gen, SwitchStmt* sw, u32 indent) {$/;"	f
emitSwitchStmt	$C2_ROOT/generator/c2i/c2i_generator_stmt.c2	/^fn void Generator.emitSwitchStmt(Generator* gen, SwitchStmt* sw, u32 indent) {$/;"	f
emitSwitchStmt	$C2_ROOT/generator/ir/ir_generator_switch.c2	/^fn void Generator.emitSwitchStmt(Generator* gen, const Stmt* s) {$/;"	f
emitSymbol	$C2_ROOT/generator/ir/ir_generator_expr.c2	/^fn void Generator.emitSymbol(Generator* gen, ir.Ref* result, Decl* d) {$/;"	f
emitType	$C2_ROOT/generator/c2i/c2i_generator_decl.c2	/^fn void Generator.emitType(Generator* gen, string_buffer.Buf* out, QualType qt) {$/;"	f
emitTypePost	$C2_ROOT/generator/c/c_generator.c2	/^fn void Generator.emitTypePost(Generator* gen, string_buffer.Buf* out, QualType qt) {$/;"	f
emitTypePost	$C2_ROOT/generator/c2i/c2i_generator_decl.c2	/^fn void Generator.emitTypePost(Generator* gen, string_buffer.Buf* out, QualType qt) {$/;"	f
emitTypePre	$C2_ROOT/generator/c/c_generator.c2	/^fn void Generator.emitTypePre(Generator* gen, string_buffer.Buf* out, QualType qt) {$/;"	f
emitTypePre	$C2_ROOT/generator/c2i/c2i_generator_decl.c2	/^fn void Generator.emitTypePre(Generator* gen, string_buffer.Buf* out, QualType qt) {$/;"	f
emitUnaryOperator	$C2_ROOT/generator/c/c_generator_expr.c2	/^fn void Generator.emitUnaryOperator(Generator* gen, string_buffer.Buf* out, Expr* e, C_Prec prec/;"	f
emitUnaryOperator	$C2_ROOT/generator/c2i/c2i_generator_expr.c2	/^fn void Generator.emitUnaryOperator(Generator* gen, string_buffer.Buf* out, const UnaryOperator*/;"	f
emitUnaryOperator	$C2_ROOT/generator/ir/ir_generator_expr.c2	/^fn void Generator.emitUnaryOperator(Generator* gen, ir.Ref* result, const Expr* e) {$/;"	f
emitVarDecl	$C2_ROOT/generator/c/c_generator_stmt.c2	/^fn void Generator.emitVarDecl(Generator* gen, VarDecl* vd, string_buffer.Buf* out, bool emit_ini/;"	f
emitVarDecl	$C2_ROOT/generator/c2i/c2i_generator_decl.c2	/^fn void Generator.emitVarDecl(Generator* gen, string_buffer.Buf* out, const VarDecl* vd, bool fi/;"	f
emitVarDecl	$C2_ROOT/generator/ir/ir_generator_expr.c2	/^fn void Generator.emitVarDecl(Generator* gen, ir.Ref* result, Decl* d) {$/;"	f
emitWhileStmt	$C2_ROOT/generator/ir/ir_generator_stmt.c2	/^fn void Generator.emitWhileStmt(Generator* gen, const Stmt* s) {$/;"	f
emit_external_header	$C2_ROOT/generator/c/c_generator.c2	/^fn void Generator.emit_external_header(Generator* gen, bool enable_asserts, const char* target) /;"	f
empty	$C2_ROOT/tools/tester/issues.c2	/^public fn bool Issues.empty(const Issues* i) {$/;"	f
empty_block	$C2_ROOT/ir/context.c2	/^fn bool empty_block(const Block* b, const InstrList* instructions) {$/;"	f
enable	$C2_ROOT/ir/interference_graph.c2	/^public fn void InterferenceGraph.enable(InterferenceGraph* g, u16 var_idx) {$/;"	f
enableFrameStats	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn void enableFrameStats() @(cname="sg_enable_frame_stats");$/;"	f
enableFrameStats	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn void enableFrameStats() @(cname="sg_enable_frame_stats");$/;"	f
enableTexture	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn void enableTexture() @(cname="sgl_enable_texture");$/;"	f
enableTexture	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn void enableTexture() @(cname="sgl_enable_texture");$/;"	f
enableWarnings	$C2_ROOT/common/build_target.c2	/^public fn void Target.enableWarnings(Target* t) {$/;"	f
encode	$C2_ROOT/common/utf8.c2	/^public fn u32 encode(char *dest, u32 max_len, u32 cc) {$/;"	f
encodeBytes	$C2_ROOT/ast_utils/string_buffer.c2	/^public fn u32 Buf.encodeBytes(Buf* buf, const char* p, u32 len, char sep) {$/;"	f
encodeHex	$C2_ROOT/ast_utils/string_buffer.c2	/^public fn void Buf.encodeHex(Buf* buf, const u8* data, u32 len) @(unused) {$/;"	f
end	$C2_ROOT/generator/c2refs.c2	/^fn void Files.end(Files* f, u32 idx, u32 link_count) {$/;"	f
end	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn void end() @(cname="sgl_end");$/;"	f
end	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn void end() @(cname="sgl_end");$/;"	f
endBlock	$C2_ROOT/ir/context.c2	/^public fn void Context.endBlock(Context* c) {$/;"	f
endFunc	$C2_ROOT/ir/context.c2	/^public fn void Context.endFunc(Context* c) {$/;"	f
endGlobal	$C2_ROOT/ir/context.c2	/^public fn void Context.endGlobal(Context* c) {$/;"	f
endPass	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn void endPass() @(cname="sg_end_pass");$/;"	f
endPass	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn void endPass() @(cname="sg_end_pass");$/;"	f
endTarget	$C2_ROOT/compiler/plugin_mgr.c2	/^public fn void Mgr.endTarget(Mgr* m) {$/;"	f
end_file	$C2_ROOT/generator/c2refs.c2	/^public fn void Refs.end_file(Refs* r) {$/;"	f
endsWith	$C2_ROOT/ast_utils/string_buffer.c2	/^public fn bool Buf.endsWith(const Buf* buf, char c) {$/;"	f
endsWith	$C2_ROOT/common/string_utils.c2	/^public fn bool endsWith(const char* text, const char* tail) @(unused) {$/;"	f
endwin	$C2_ROOT/libs/curses/curses.c2i	/^fn void endwin();$/;"	f
enqueue	$C2_ROOT/ir/interference_graph.c2	/^fn void InterferenceGraph.enqueue(InterferenceGraph* g, u16 var_idx) {$/;"	f
enter	$C2_ROOT/analyser/scope.c2	/^public fn void Scope.enter(Scope* s, u32 flags) {$/;"	f
enterScope	$C2_ROOT/generator/ir/ir_generator.c2	/^fn void Generator.enterScope(Generator* gen, u32 break_block, u32 continue_block) {$/;"	f
entropy_func	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^fn c_int entropy_func(void* data, c_uchar* output, c_size len) @(cname="mbedtls_entropy_func");$/;"	f
entropy_init	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^fn void entropy_init( Entropy_context *ctx ) @(cname="mbedtls_entropy_init");$/;"	f
environment	$C2_ROOT/libs/sokol/sokol_glue.c2i	/^fn Environment environment() @(cname="sglue_environment");$/;"	f
environment	$C2_ROOT/libs/sokol_/sokol_glue.c2i	/^fn Environment environment() @(cname="sglue_environment");$/;"	f
equals	$C2_ROOT/compiler/c2recipe_parser.c2	/^fn bool equals(const char* str, const char* expect, u32 len) {$/;"	f
equals	$C2_ROOT/ir/ref.c2	/^fn bool Ref.equals(const Ref* r1, Ref r2) {$/;"	f
erand48	$C2_ROOT/libs/libc/stdlib.c2i	/^fn c_double erand48(u16* __xsubi);$/;"	f
erand48_r	$C2_ROOT/libs/libc/stdlib.c2i	/^fn c_int erand48_r(u16* __xsubi, Drand48_data* __buffer, c_double* __result);$/;"	f
erase	$C2_ROOT/tools/tester/issues.c2	/^public fn void Issues.erase(Issues* i, const char* filename, i32 line_nr) {$/;"	f
erase_idx	$C2_ROOT/tools/tester/issues.c2	/^fn void Issues.erase_idx(Issues* i, u32 idx) {$/;"	f
erf	$C2_ROOT/libs/math/math.c2i	/^fn c_double erf(c_double);$/;"	f
erfc	$C2_ROOT/libs/math/math.c2i	/^fn c_double erfc(c_double);$/;"	f
erfcf	$C2_ROOT/libs/math/math.c2i	/^fn c_float erfcf(c_float);$/;"	f
erff	$C2_ROOT/libs/math/math.c2i	/^fn c_float erff(c_float);$/;"	f
errno2	$C2_ROOT/libs/libc/c_errno.c2i	/^fn c_int* errno2() @(cname="__error");$/;"	f
error	$C2_ROOT/analyser/module_analyser.c2	/^fn void Analyser.error(Analyser* ma, SrcLoc loc, const char* format @(printf_format), ...) {$/;"	f
error	$C2_ROOT/ast/ast_evaluator.c2	/^fn Cont Evaluator.error(Evaluator* sf, const char* msg) {$/;"	f
error	$C2_ROOT/ast/value.c2	/^fn Value Value.error(const char* msg) {$/;"	f
error	$C2_ROOT/common/console.c2	/^public fn void error(const char* format @(printf_format), ...) {$/;"	f
error	$C2_ROOT/common/diagnostics.c2	/^public fn void Diags.error(Diags* diags, SrcLoc loc, const char* format @(printf_format), ...) {$/;"	f
error	$C2_ROOT/common/yaml/yaml_parser.c2	/^fn void Parser.error(Parser* p, const char* format @(printf_format), ...) {$/;"	f
error	$C2_ROOT/common/yaml/yaml_tokenizer.c2	/^fn void Tokenizer.error(Tokenizer* t, Token* result) {$/;"	f
error	$C2_ROOT/compiler/c2recipe_parser.c2	/^fn void Parser.error(Parser* p, const char* format @(printf_format), ...) @(noreturn) {$/;"	f
error	$C2_ROOT/libs/lua/lua.c2i	/^fn c_int error(State *L) @(cname="lua_error");$/;"	f
error	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn Error error() @(cname="sgl_error");$/;"	f
error	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn Error error() @(cname="sgl_error");$/;"	f
error	$C2_ROOT/parser/c2_parser.c2	/^fn void Parser.error(Parser* p, const char* format @(printf_format), ...) @(noreturn) {$/;"	f
error	$C2_ROOT/parser/c2_tokenizer.c2	/^fn void Tokenizer.error(Tokenizer* t, Token* result, const char* format @(printf_format), ...) {$/;"	f
error	$C2_ROOT/tools/tester/test_db.c2	/^fn void Db.error(Db* db, const char* format @(printf_format), ...) {$/;"	f
error2	$C2_ROOT/common/diagnostics.c2	/^public fn void Diags.error2(Diags* diags, SrcLoc loc, const char* format, va_list args) {$/;"	f
errorRange	$C2_ROOT/analyser/module_analyser.c2	/^fn void Analyser.errorRange(Analyser* ma, SrcLoc loc, SrcRange range, const char* format @(print/;"	f
errorRange	$C2_ROOT/common/diagnostics.c2	/^public fn void Diags.errorRange(Diags* diags,$/;"	f
errorRange2	$C2_ROOT/common/diagnostics.c2	/^public fn void Diags.errorRange2(Diags* diags,$/;"	f
error_diag	$C2_ROOT/common/console.c2	/^public fn void error_diag(const char* loc, const char* format @(printf_format), ...) {$/;"	f
eval	$C2_ROOT/ast/ast_evaluator.c2	/^fn Cont WhileStmt.eval(WhileStmt* s, Evaluator* sf) {$/;"	f
evalExpr	$C2_ROOT/ast/ast_evaluator.c2	/^public fn Value evalExpr(const Expr* e) {$/;"	f
eval_call	$C2_ROOT/ast/ast_evaluator.c2	/^fn Value Evaluator.eval_call(Evaluator* caller, const CallExpr* c) {$/;"	f
execl	$C2_ROOT/libs/libc/unistd.c2i	/^fn c_int execl(const char *pathname, const char *arg, ...);$/;"	f
execle	$C2_ROOT/libs/libc/unistd.c2i	/^fn c_int execle(const char *pathname, const char *arg, ...);$/;"	f
execlp	$C2_ROOT/libs/libc/unistd.c2i	/^fn c_int execlp(const char *file, const char *arg, ...);$/;"	f
execv	$C2_ROOT/libs/libc/unistd.c2i	/^fn c_int execv(const char *pathname, char** argv); \/\/ actually char* const argv[]$/;"	f
execvp	$C2_ROOT/libs/libc/unistd.c2i	/^fn c_int execvp(const char *file, char** argv);    \/\/ actually char* const argv[]$/;"	f
execvpe	$C2_ROOT/libs/libc/unistd.c2i	/^fn c_int execvpe(const char *file, char** argv, const char** envp); \/\/ actually char* const en/;"	f
exists	$C2_ROOT/common/file/file_utils.c2	/^public fn bool File.exists(File *file) @(unused) {$/;"	f
exit	$C2_ROOT/analyser/scope.c2	/^public fn void Scope.exit(Scope* s, bool has_error) {$/;"	f
exit	$C2_ROOT/libs/io_uring/io_uring.c2i	/^fn void Ring.exit(Ring* ring) @(cname="io_uring_queue_exit");$/;"	f
exit	$C2_ROOT/libs/libc/stdlib.c2i	/^fn void exit(c_int __status) @(noreturn);$/;"	f
exp	$C2_ROOT/libs/math/math.c2i	/^fn c_double exp(c_double);$/;"	f
exp2	$C2_ROOT/libs/math/math.c2i	/^fn c_double exp2(c_double);$/;"	f
exp2f	$C2_ROOT/libs/math/math.c2i	/^fn c_float exp2f(c_float);$/;"	f
expand	$C2_ROOT/common/build_file.c2	/^fn u32 Info.expand(Info* info, const char* raw) {$/;"	f
expect	$C2_ROOT/compiler/c2recipe_parser.c2	/^fn void Parser.expect(Parser* p, Kind kind, const char* msg) {$/;"	f
expect	$C2_ROOT/libs/sokol/sokol_audio.c2i	/^fn c_int expect() @(cname="saudio_expect");$/;"	f
expect	$C2_ROOT/libs/sokol_/sokol_audio.c2i	/^fn c_int expect() @(cname="saudio_expect");$/;"	f
expect	$C2_ROOT/parser/c2_parser.c2	/^fn void Parser.expect(Parser* p, Kind kind) {$/;"	f
expectAndConsume	$C2_ROOT/common/yaml/yaml_parser.c2	/^fn void Parser.expectAndConsume(Parser* p, TokenKind kind) {$/;"	f
expectAndConsume	$C2_ROOT/parser/c2_parser.c2	/^fn void Parser.expectAndConsume(Parser* p, Kind kind) {$/;"	f
expectError	$C2_ROOT/parser/c2_parser.c2	/^fn void Parser.expectError(Parser* p, Kind kind) {$/;"	f
expectIdentifier	$C2_ROOT/parser/c2_parser.c2	/^fn void Parser.expectIdentifier(Parser* p) {$/;"	f
expect_file	$C2_ROOT/tools/tester/expect_file.c2	/^module expect_file;$/;"	m
expected	$C2_ROOT/libs/sokol/c/sokol_gfx.h	/^        - the image type expected by the shader (SG_IMAGETYPE_*)$/;"	t
expected	$C2_ROOT/libs/sokol_/c/sokol_gfx.h	/^        - the image type expected by the shader (SG_IMAGETYPE_*)$/;"	t
expf	$C2_ROOT/libs/math/math.c2i	/^fn c_float expf(c_float);$/;"	f
expm1	$C2_ROOT/libs/math/math.c2i	/^fn c_double expm1(c_double);$/;"	f
expm1f	$C2_ROOT/libs/math/math.c2i	/^fn c_float expm1f(c_float);$/;"	f
exports	$C2_ROOT/compiler/compiler.c2	/^    bool is_image; \/\/ require build-file, dont allow dynamic libs, dont allow module exports$/;"	m
expr2function	$C2_ROOT/ast/ast_evaluator.c2	/^fn FunctionDecl* expr2function(Expr* e) {$/;"	f
expr2function	$C2_ROOT/generator/c/c_generator_pure_call.c2	/^fn FunctionDecl* expr2function(Expr* e) {$/;"	f
expr_list	$C2_ROOT/parser/expr_list.c2	/^module expr_list;$/;"	m
extend	$C2_ROOT/ast_utils/string_buffer.c2	/^fn bool Buf.extend(Buf* buf, u32 len) {$/;"	f
extension	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^    c_uchar ns_cert_type; \/**< Optional Netscape certificate type extension value: See the valu/;"	t
f32	$C2_ROOT/libs/c2/f32.c2i	/^module f32;$/;"	m
f64	$C2_ROOT/libs/c2/f64.c2i	/^module f64;$/;"	m
f_resize	$C2_ROOT/tools/common/replacer.c2	/^fn void Replacer.f_resize(Replacer* r, u32 capacity) {$/;"	f
fabs	$C2_ROOT/ast/value.c2	/^fn f64 fabs(f64 d) {$/;"	f
fabs	$C2_ROOT/libs/math/math.c2i	/^fn c_double fabs(c_double);$/;"	f
fabsf	$C2_ROOT/libs/math/math.c2i	/^fn c_float fabsf(c_float);$/;"	f
failBuffer	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn void failBuffer(Buffer buf) @(cname="sg_fail_buffer");$/;"	f
failBuffer	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn void failBuffer(Buffer buf) @(cname="sg_fail_buffer");$/;"	f
failImage	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn void failImage(Image img) @(cname="sg_fail_image");$/;"	f
failImage	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn void failImage(Image img) @(cname="sg_fail_image");$/;"	f
failPipeline	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn void failPipeline(Pipeline pip) @(cname="sg_fail_pipeline");$/;"	f
failPipeline	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn void failPipeline(Pipeline pip) @(cname="sg_fail_pipeline");$/;"	f
failSampler	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn void failSampler(Sampler smp) @(cname="sg_fail_sampler");$/;"	f
failSampler	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn void failSampler(Sampler smp) @(cname="sg_fail_sampler");$/;"	f
failShader	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn void failShader(Shader shd) @(cname="sg_fail_shader");$/;"	f
failShader	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn void failShader(Shader shd) @(cname="sg_fail_shader");$/;"	f
failView	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn void failView(View view) @(cname="sg_fail_view");$/;"	f
failView	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn void failView(View view) @(cname="sg_fail_view");$/;"	f
fchdir	$C2_ROOT/libs/libc/unistd.c2i	/^fn c_int fchdir(c_int fd);$/;"	f
fchmod	$C2_ROOT/libs/libc/sys_stat.c2i	/^fn c_int fchmod(c_int fd, Mode mode);$/;"	f
fchmodat	$C2_ROOT/libs/libc/sys_stat.c2i	/^fn c_int fchmodat(c_int dirfd, const char* pathname, Mode mode, c_int flag);$/;"	f
fclose	$C2_ROOT/libs/libc/stdio.c2i	/^fn c_int fclose(FILE* __stream);$/;"	f
fcntl	$C2_ROOT/libs/libc/libc_fcntl.c2i	/^fn c_int fcntl(i32 __fd, c_int __cmd, ...);$/;"	f
fcvt	$C2_ROOT/libs/libc/stdlib.c2i	/^fn c_char* fcvt(c_double __value, c_int __ndigit, c_int* __decpt, c_int* __sign);$/;"	f
fcvt_r	$C2_ROOT/libs/libc/stdlib.c2i	/^fn c_int fcvt_r(c_double __value, c_int __ndigit, c_int* __decpt, c_int* __sign, c_char* __buf, /;"	f
fdim	$C2_ROOT/libs/math/math.c2i	/^fn c_double fdim(c_double, c_double);$/;"	f
fdimf	$C2_ROOT/libs/math/math.c2i	/^fn c_float fdimf(c_float, c_float);$/;"	f
fdopen	$C2_ROOT/libs/libc/stdio.c2i	/^fn FILE* fdopen(c_int __fd, const c_char* __modes);$/;"	f
fdopendir	$C2_ROOT/libs/libc/libc_dirent.c2i	/^fn DIR* fdopendir(c_int fd);$/;"	f
feof	$C2_ROOT/libs/libc/stdio.c2i	/^fn c_int feof(FILE* __stream);$/;"	f
feof_unlocked	$C2_ROOT/libs/libc/stdio.c2i	/^fn c_int feof_unlocked(FILE* __stream);$/;"	f
ferror	$C2_ROOT/libs/libc/stdio.c2i	/^fn c_int ferror(FILE* __stream);$/;"	f
ferror_unlocked	$C2_ROOT/libs/libc/stdio.c2i	/^fn c_int ferror_unlocked(FILE* __stream);$/;"	f
fflush	$C2_ROOT/libs/libc/stdio.c2i	/^fn c_int fflush(FILE* __stream);$/;"	f
fflush_unlocked	$C2_ROOT/libs/libc/stdio.c2i	/^fn c_int fflush_unlocked(FILE* __stream);$/;"	f
ffs	$C2_ROOT/libs/libc/strings.c2i	/^fn c_int ffs(c_int value);$/;"	f
fgetc	$C2_ROOT/libs/libc/stdio.c2i	/^fn c_int fgetc(FILE* __stream);$/;"	f
fgetc_unlocked	$C2_ROOT/libs/libc/stdio.c2i	/^fn c_int fgetc_unlocked(FILE* __stream);$/;"	f
fgetln	$C2_ROOT/libs/libc/stdio.c2i	/^fn c_char* fgetln(FILE*, c_size*);$/;"	f
fgets	$C2_ROOT/libs/libc/stdio.c2i	/^fn c_char* fgets(c_char* __s, c_int __n, FILE* __stream);$/;"	f
file_utils	$C2_ROOT/common/file/file_utils.c2	/^module file_utils;$/;"	m
file_utils	$C2_ROOT/common/file/reader.c2	/^module file_utils;$/;"	m
file_utils	$C2_ROOT/common/file/writer.c2	/^module file_utils;$/;"	m
fileno	$C2_ROOT/libs/libc/stdio.c2i	/^fn c_int fileno(FILE* __stream);$/;"	f
fill	$C2_ROOT/ir/slot_collector.c2	/^public fn void SlotCollector.fill(SlotCollector* c, FunctionInfo* info) {$/;"	f
fillDest	$C2_ROOT/generator/c2refs.c2	/^fn void Lengths.fillDest(const Lengths* l, Dest* result, u32 offset, u32 start, u32 count) {$/;"	f
fillFieldInfo	$C2_ROOT/analyser/module_analyser_init.c2	/^fn void fillFieldInfo(StructTypeDecl* std, FillInfo* fi, u32 base_offset) {$/;"	f
fillQueue	$C2_ROOT/ir/usage_counter.c2	/^public fn void Counter.fillQueue(Counter* c) {$/;"	f
fillRect	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn c_int Surface.fillRect(Surface* dst, const Rect* rect, u32 color) @(cname="SDL_FillRect");$/;"	f
fillRects	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn c_int Renderer.fillRects(Renderer* renderer, const Rect* rects, c_int count) @(cname="SDL_Ren/;"	f
finalize	$C2_ROOT/generator/ir/basic_struct_layouter.c2	/^fn void BasicStructLayouter.finalize(BasicStructLayouter* l) {$/;"	f
finalize	$C2_ROOT/generator/ir/field_struct_layouter.c2	/^fn void FieldStructLayouter.finalize(FieldStructLayouter* l) {$/;"	f
finalizeExpr	$C2_ROOT/generator/ir/field_struct_layouter.c2	/^fn void FieldStructLayouter.finalizeExpr(FieldStructLayouter* l, const ast.StructTypeDecl* std, /;"	f
finalizeFunction	$C2_ROOT/ir/context.c2	/^fn void Context.finalizeFunction(Context* c, SymbolId id) {$/;"	f
find	$C2_ROOT/analyser/incr_array_list.c2	/^fn ast.ExprList* List.find(List* v, u32 name) {$/;"	f
find	$C2_ROOT/analyser/init_checker.c2	/^public fn SrcLoc Checker.find(Checker* c, u32 index) {$/;"	f
find	$C2_ROOT/analyser/label_vector.c2	/^public fn Label* LabelVector.find(LabelVector* v, u32 name_idx) {$/;"	f
find	$C2_ROOT/analyser/name_vector.c2	/^public fn bool NameVector.find(NameVector* v, u32 name_idx, u32* index) {$/;"	f
find	$C2_ROOT/analyser/scope.c2	/^public fn ast.Decl* Scope.find(Scope* s, u32 name_idx, SrcLoc loc, bool usedPublic) {$/;"	f
find	$C2_ROOT/ast/function_decl_list.c2	/^public fn FunctionDecl* FunctionDeclList.find(const FunctionDeclList* l, u32 name_idx) {$/;"	f
find	$C2_ROOT/ast/import_decl_list.c2	/^public fn ImportDecl* ImportDeclList.find(const ImportDeclList* l, u32 name_idx) {$/;"	f
find	$C2_ROOT/ast/instance_table.c2	/^fn FunctionDecl* TemplateFunction.find(const TemplateFunction* f, QualType qt) {$/;"	f
find	$C2_ROOT/ast/struct_type_decl.c2	/^public fn const FieldInitField* FieldInitInfo.find(const FieldInitInfo* fi, u32 name) {$/;"	f
find	$C2_ROOT/ast/symbol_table.c2	/^public fn ast.Decl* SymbolTable.find(const SymbolTable* t, u32 name_idx) {$/;"	f
find	$C2_ROOT/ast_utils/attr.c2	/^public fn AttrKind find(u32 name_idx) {$/;"	f
find	$C2_ROOT/ast_utils/attr_table.c2	/^public fn const attr.Value* Table.find(const Table* t, const void* decl, attr.AttrKind kind) {$/;"	f
find	$C2_ROOT/common/module_list.c2	/^public fn ast.Module* List.find(const List* l, u32 module_name) {$/;"	f
find	$C2_ROOT/generator/c2refs.c2	/^fn u32 Links.find(const Links* t, u32 src) {$/;"	f
find	$C2_ROOT/generator/ir/ir_generator_locals.c2	/^public fn StackVar* Locals.find(const Locals* l, const ast.VarDecl* vd) {$/;"	f
find	$C2_ROOT/generator/radix_tree/radix_tree.c2	/^public fn void Tree.find(Tree* t, const char* text, MatchFn func, void* arg) @(unused) {$/;"	f
find	$C2_ROOT/ir/copy_list.c2	/^public fn Ref* CopyList.find(CopyList* l, u32 idx) {$/;"	f
find	$C2_ROOT/ir/slot_values.c2	/^public fn Ref SlotValues.find(const SlotValues* v, u16 slot) {$/;"	f
find	$C2_ROOT/tools/tester/issues.c2	/^public fn const char* Issues.find(Issues* i, const char* filename, i32 line_nr) {$/;"	f
find	$C2_ROOT/tools/tester/test_utils.c2	/^public fn const char* find(const char* start, const char* end, const char* text) {$/;"	f
find2	$C2_ROOT/analyser/init_checker.c2	/^public fn SrcLoc Checker.find2(Checker* c, u32 index1, u32 index2) {$/;"	f
findAny	$C2_ROOT/ast/import_decl_list.c2	/^public fn ImportDecl* ImportDeclList.findAny(const ImportDeclList* l, u32 name_idx) {$/;"	f
findAny	$C2_ROOT/ast/struct_type_decl.c2	/^public fn Decl* StructTypeDecl.findAny(const StructTypeDecl* s, u32 name_idx) {$/;"	f
findArena	$C2_ROOT/ir/interference_graph.c2	/^fn u32 findArena(u16 capacity) {$/;"	f
findArena	$C2_ROOT/ir/live_map.c2	/^fn u32 findArena(u16 capacity) {$/;"	f
findArena	$C2_ROOT/ir/slot_writes_map.c2	/^fn u32 findArena(u16 capacity) {$/;"	f
findBuildFile	$C2_ROOT/common/utils.c2	/^public fn const char* findBuildFile() @(unused) {$/;"	f
findCheckPoint	$C2_ROOT/common/source_mgr.c2	/^fn CheckPoint File.findCheckPoint(File *f, u32 offset) {$/;"	f
findChildNode	$C2_ROOT/common/yaml/yaml_iterator.c2	/^fn const Node* Data.findChildNode(const Data* d, const char* path, u32 next) {$/;"	f
findConstant	$C2_ROOT/ast/enum_type_decl.c2	/^public fn EnumConstantDecl* EnumTypeDecl.findConstant(EnumTypeDecl* d, u32 name_idx) {$/;"	f
findEndOfLine	$C2_ROOT/tools/tester/test_db.c2	/^fn const char* Db.findEndOfLine(Db* db) {$/;"	f
findFunc	$C2_ROOT/analyser/struct_func_list.c2	/^public fn ast.FunctionDecl* List.findFunc(List* v, u32 index, u32 name_idx) {$/;"	f
findFunc	$C2_ROOT/ast/instance_table.c2	/^fn TemplateFunction* InstanceTable.findFunc(const InstanceTable* t, const FunctionDecl* fd) {$/;"	f
findFunction	$C2_ROOT/ast/enum_type_decl.c2	/^public fn Decl* EnumTypeDecl.findFunction(const EnumTypeDecl* d, u32 name_idx) {$/;"	f
findGlobalSymbol	$C2_ROOT/analyser/scope.c2	/^fn ast.Decl* Scope.findGlobalSymbol(Scope* s, u32 name_idx, SrcLoc loc, bool* other_error, bool /;"	f
findImport	$C2_ROOT/ast/ast.c2	/^public fn ImportDecl* AST.findImport(const AST* a, u32 name) {$/;"	f
findInstance	$C2_ROOT/ast/module.c2	/^public fn ast.FunctionDecl* Module.findInstance(const Module* m, ast.FunctionDecl* fd, QualType /;"	f
findLine	$C2_ROOT/tools/common/replacer.c2	/^fn u32 findLine(const char* start, u32 line) {$/;"	f
findMain	$C2_ROOT/analyser/module_analyser.c2	/^public fn Decl* Analyser.findMain(Analyser* ma, Module* top, u32 name_idx) {$/;"	f
findMainFunction	$C2_ROOT/analyser/module_analyser.c2	/^fn void findMainFunction(void* arg, FunctionDecl* fd) {$/;"	f
findMember	$C2_ROOT/ast/struct_type_decl.c2	/^public fn Decl* StructTypeDecl.findMember(const StructTypeDecl* s, u32 name_idx, u32* offset) {$/;"	f
findMemberOffset	$C2_ROOT/analyser/module_analyser_builtin.c2	/^fn Decl* Analyser.findMemberOffset(Analyser* ma, BuiltinExpr* b, StructTypeDecl* std, Expr* memb/;"	f
findModule	$C2_ROOT/analyser/scope.c2	/^public fn ast.ImportDecl* Scope.findModule(Scope* s, u32 name_idx, SrcLoc loc) {$/;"	f
findNode	$C2_ROOT/common/yaml/yaml_iterator.c2	/^public fn const Node* Parser.findNode(const Parser* p, const char* path) {$/;"	f
findOffset	$C2_ROOT/tools/common/replacer.c2	/^fn u32 Replacer.findOffset(Replacer* r, u32 line, u32 column) {$/;"	f
findPrivate	$C2_ROOT/ast/symbol_table.c2	/^fn ast.Decl* SymbolTable.findPrivate(const SymbolTable* t, u32 name_idx) {$/;"	f
findPrivateSymbol	$C2_ROOT/ast/module.c2	/^public fn ast.Decl* Module.findPrivateSymbol(const Module* m, u32 name_idx) {$/;"	f
findProjectDir	$C2_ROOT/common/utils.c2	/^public fn bool findProjectDir(PathInfo* info) {$/;"	f
findPublic	$C2_ROOT/ast/symbol_table.c2	/^fn ast.Decl* SymbolTable.findPublic(const SymbolTable* t, u32 name_idx) {$/;"	f
findPublicSymbol	$C2_ROOT/ast/module.c2	/^public fn ast.Decl* Module.findPublicSymbol(const Module* m, u32 name_idx) {$/;"	f
findRead	$C2_ROOT/ir/slot_collector.c2	/^public fn ReadSlotAccess* SlotCollector.findRead(const SlotCollector* c, BlockId blk_id, u16 slo/;"	f
findRef	$C2_ROOT/generator/c2refs.c2	/^public fn Dest Refs.findRef(const Refs* r, const Dest* origin) {$/;"	f
findRefUses	$C2_ROOT/generator/c2refs.c2	/^public fn void Refs.findRefUses(const Refs* r, const Dest* origin, RefUsesFn func, void* arg, u1/;"	f
findSet	$C2_ROOT/compiler/c2recipe_parser.c2	/^fn Set* Parser.findSet(Parser* p, u32 name_idx) {$/;"	f
findSplitEdge	$C2_ROOT/ir/inserter.c2	/^public fn u32 Inserter.findSplitEdge(const Inserter* ins, u32 src, u32 dest) {$/;"	f
findStructMember	$C2_ROOT/analyser/module_analyser_expr.c2	/^fn Decl* Analyser.findStructMember(Analyser* ma,$/;"	f
findStructMemberOffset	$C2_ROOT/analyser/module_analyser_builtin.c2	/^fn Decl* Analyser.findStructMemberOffset(Analyser* ma, StructTypeDecl* s, u32 name_idx, SrcLoc l/;"	f
findSymbol	$C2_ROOT/ast/module.c2	/^public fn ast.Decl* Module.findSymbol(const Module* m, u32 name_idx) {$/;"	f
findSymbol	$C2_ROOT/generator/c2refs.c2	/^public fn Dest Refs.findSymbol(const Refs* r, const char* symbol_name) {$/;"	f
findSymbolInModule	$C2_ROOT/analyser/scope.c2	/^public fn ast.Decl* Scope.findSymbolInModule(Scope* s, ast.Module* mod, u32 name_idx, SrcLoc loc/;"	f
findSymbolUses	$C2_ROOT/generator/c2refs.c2	/^public fn void Refs.findSymbolUses(const Refs* r, const char* symbol_name, RefUsesFn func, void*/;"	f
findTemp	$C2_ROOT/ir/print.c2	/^fn u32 PrintHelper.findTemp(PrintHelper* ph, u32 instr_idx) {$/;"	f
findTopModule	$C2_ROOT/compiler/compiler.c2	/^fn void Compiler.findTopModule(void* arg, ast.Module* m) {$/;"	f
findType	$C2_ROOT/analyser/scope.c2	/^public fn ast.Decl* Scope.findType(Scope* s, u32 name_idx, SrcLoc loc, bool usedPublic) {$/;"	f
findType	$C2_ROOT/ast/ast.c2	/^fn Decl* AST.findType(const AST* a, u32 name_idx) {$/;"	f
findType	$C2_ROOT/ast/module.c2	/^public fn Decl* Module.findType(const Module* m, u32 name_idx) {$/;"	f
findWrite	$C2_ROOT/ir/slot_collector.c2	/^public fn const Ref* SlotCollector.findWrite(const SlotCollector* c, BlockId blk_id, u16 slot) {$/;"	f
find_bin	$C2_ROOT/common/process_utils.c2	/^fn const char* find_bin(char *dest, usize size, const char* name) {$/;"	f
find_component	$C2_ROOT/compiler/compiler_libs.c2	/^fn Component* Compiler.find_component(Compiler* c, ast.Module* m) {$/;"	f
find_file	$C2_ROOT/common/source_mgr.c2	/^fn File* SourceMgr.find_file(SourceMgr* sm, SrcLoc loc) {$/;"	f
find_file	$C2_ROOT/compiler/plugin_mgr.c2	/^fn bool Mgr.find_file(Mgr* m, char* fullname, usize size, const char* filename) {$/;"	f
find_file	$C2_ROOT/generator/c2refs.c2	/^fn const File* Files.find_file(const Files* f, u32 loc) {$/;"	f
find_idx	$C2_ROOT/common/component_sorter.c2	/^fn u32 find_idx(Component** comps, u32 count, u32 name) {$/;"	f
find_lib	$C2_ROOT/compiler/compiler_libs.c2	/^fn bool Compiler.find_lib(const Compiler* c, const char* libname, char* libdir, usize size) {$/;"	f
fixReturn	$C2_ROOT/ir/register_alloc.c2	/^fn void Tools.fixReturn(Tools* t, FunctionInfo* fi) {$/;"	f
fixup_function	$C2_ROOT/ir/ssa.c2	/^fn void Tools.fixup_function(Tools* t) {$/;"	f
flatten	$C2_ROOT/plugins/deps_generator.c2	/^fn void Dir.flatten(const Dir* d, string_buffer.Buf* out, string_pool.Pool* pool) {$/;"	f
flattenFragments	$C2_ROOT/generator/c/c_generator.c2	/^fn void Generator.flattenFragments(Generator* gen) {$/;"	f
flockfile	$C2_ROOT/libs/libc/stdio.c2i	/^fn void flockfile(FILE* __stream);$/;"	f
floor	$C2_ROOT/libs/math/math.c2i	/^fn c_double floor(c_double);$/;"	f
floorf	$C2_ROOT/libs/math/math.c2i	/^fn c_float floorf(c_float);$/;"	f
flushBitfield	$C2_ROOT/generator/ir/basic_struct_layouter.c2	/^fn void BasicStructLayouter.flushBitfield(BasicStructLayouter* l) {$/;"	f
flushFragments	$C2_ROOT/tools/common/replacer.c2	/^fn void Replacer.flushFragments(Replacer* r, const char* filename) {$/;"	f
fma	$C2_ROOT/libs/math/math.c2i	/^fn c_double fma(c_double, c_double, c_double);$/;"	f
fmaf	$C2_ROOT/libs/math/math.c2i	/^fn c_float fmaf(c_float, c_float, c_float);$/;"	f
fmax	$C2_ROOT/libs/math/math.c2i	/^fn c_double fmax(c_double, c_double);$/;"	f
fmaxf	$C2_ROOT/libs/math/math.c2i	/^fn c_float fmaxf(c_float, c_float);$/;"	f
fmemopen	$C2_ROOT/libs/libc/stdio.c2i	/^fn FILE* fmemopen(void* __s, c_size __len, const c_char* __modes);$/;"	f
fmin	$C2_ROOT/libs/math/math.c2i	/^fn c_double fmin(c_double, c_double);$/;"	f
fminf	$C2_ROOT/libs/math/math.c2i	/^fn c_float fminf(c_float, c_float);$/;"	f
fmod	$C2_ROOT/libs/math/math.c2i	/^fn c_double fmod(c_double, c_double);$/;"	f
fmodf	$C2_ROOT/libs/math/math.c2i	/^fn c_float fmodf(c_float, c_float);$/;"	f
fmtcheck	$C2_ROOT/libs/libc/stdio.c2i	/^fn const c_char* fmtcheck(const c_char*, const c_char*);$/;"	f
font	$C2_ROOT/libs/sokol/sokol_debugtext.c2i	/^fn void font(c_int font_index) @(cname="sdtx_font");$/;"	f
font	$C2_ROOT/libs/sokol_/sokol_debugtext.c2i	/^fn void font(c_int font_index) @(cname="sdtx_font");$/;"	f
fontC64	$C2_ROOT/libs/sokol/sokol_debugtext.c2i	/^fn FontDesc fontC64() @(cname="sdtx_font_c64");$/;"	f
fontC64	$C2_ROOT/libs/sokol_/sokol_debugtext.c2i	/^fn FontDesc fontC64() @(cname="sdtx_font_c64");$/;"	f
fontCpc	$C2_ROOT/libs/sokol/sokol_debugtext.c2i	/^fn FontDesc fontCpc() @(cname="sdtx_font_cpc");$/;"	f
fontCpc	$C2_ROOT/libs/sokol_/sokol_debugtext.c2i	/^fn FontDesc fontCpc() @(cname="sdtx_font_cpc");$/;"	f
fontKc853	$C2_ROOT/libs/sokol/sokol_debugtext.c2i	/^fn FontDesc fontKc853() @(cname="sdtx_font_kc853");$/;"	f
fontKc853	$C2_ROOT/libs/sokol_/sokol_debugtext.c2i	/^fn FontDesc fontKc853() @(cname="sdtx_font_kc853");$/;"	f
fontKc854	$C2_ROOT/libs/sokol/sokol_debugtext.c2i	/^fn FontDesc fontKc854() @(cname="sdtx_font_kc854");$/;"	f
fontKc854	$C2_ROOT/libs/sokol_/sokol_debugtext.c2i	/^fn FontDesc fontKc854() @(cname="sdtx_font_kc854");$/;"	f
fontOric	$C2_ROOT/libs/sokol/sokol_debugtext.c2i	/^fn FontDesc fontOric() @(cname="sdtx_font_oric");$/;"	f
fontOric	$C2_ROOT/libs/sokol_/sokol_debugtext.c2i	/^fn FontDesc fontOric() @(cname="sdtx_font_oric");$/;"	f
fontZ1013	$C2_ROOT/libs/sokol/sokol_debugtext.c2i	/^fn FontDesc fontZ1013() @(cname="sdtx_font_z1013");$/;"	f
fontZ1013	$C2_ROOT/libs/sokol_/sokol_debugtext.c2i	/^fn FontDesc fontZ1013() @(cname="sdtx_font_z1013");$/;"	f
fopen	$C2_ROOT/libs/libc/stdio.c2i	/^fn FILE* fopen(const c_char* __filename, const c_char* __modes);$/;"	f
forever	$C2_ROOT/ir_examples/for.c2	/^fn void forever() {$/;"	f
forever	$C2_ROOT/ir_examples/while.c2	/^fn void forever(i32 loops) {$/;"	f
fork	$C2_ROOT/libs/libc/unistd.c2i	/^fn Pid fork();$/;"	f
fpclassify	$C2_ROOT/libs/math/math.c2i	/^fn c_int fpclassify(c_double) @(cname="__fpclassifyd");$/;"	f
fpclassifyf	$C2_ROOT/libs/math/math.c2i	/^fn c_int fpclassifyf(c_float) @(cname="__fpclassifyf");$/;"	f
fprintf	$C2_ROOT/libs/libc/stdio.c2i	/^fn c_int fprintf(FILE* __stream, const c_char* __format @(printf_format), ...);$/;"	f
fpurge	$C2_ROOT/libs/libc/stdio.c2i	/^fn c_int fpurge(FILE *);$/;"	f
fputc	$C2_ROOT/libs/libc/stdio.c2i	/^fn c_int fputc(c_int __c, FILE* __stream);$/;"	f
fputc_unlocked	$C2_ROOT/libs/libc/stdio.c2i	/^fn c_int fputc_unlocked(c_int __c, FILE* __stream);$/;"	f
fputs	$C2_ROOT/libs/libc/stdio.c2i	/^fn c_int fputs(const c_char* __s, FILE* __stream);$/;"	f
frameCount	$C2_ROOT/libs/sokol/sokol_app.c2i	/^fn u64 frameCount() @(cname="sapp_frame_count");$/;"	f
frameCount	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^fn u64 frameCount() @(cname="sapp_frame_count");$/;"	f
frameDuration	$C2_ROOT/libs/sokol/sokol_app.c2i	/^fn c_double frameDuration() @(cname="sapp_frame_duration");$/;"	f
frameDuration	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^fn c_double frameDuration() @(cname="sapp_frame_duration");$/;"	f
frameStatsEnabled	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn bool frameStatsEnabled() @(cname="sg_frame_stats_enabled");$/;"	f
frameStatsEnabled	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn bool frameStatsEnabled() @(cname="sg_frame_stats_enabled");$/;"	f
fread	$C2_ROOT/libs/libc/stdio.c2i	/^fn c_int fread(void* __ptr, c_size __size, c_size __n, FILE* __stream);$/;"	f
fread_unlocked	$C2_ROOT/libs/libc/stdio.c2i	/^fn c_int fread_unlocked(void* __ptr, c_size __size, c_size __n, FILE* __stream);$/;"	f
free	$C2_ROOT/analyser/incr_array_list.c2	/^public fn void List.free(List* v) {$/;"	f
free	$C2_ROOT/analyser/init_checker.c2	/^public fn void Checker.free(Checker* c) {$/;"	f
free	$C2_ROOT/analyser/label_vector.c2	/^public fn void LabelVector.free(LabelVector* v) {$/;"	f
free	$C2_ROOT/analyser/module_analyser.c2	/^public fn void Analyser.free(Analyser* ma) {$/;"	f
free	$C2_ROOT/analyser/name_vector.c2	/^public fn void NameVector.free(NameVector* v) {$/;"	f
free	$C2_ROOT/analyser/scope.c2	/^public fn void Scope.free(Scope* s) {$/;"	f
free	$C2_ROOT/analyser/struct_field_init_checker.c2	/^fn void StructFieldInitChecker.free(StructFieldInitChecker* c) {$/;"	f
free	$C2_ROOT/analyser/struct_func_list.c2	/^public fn void List.free(List* v) {$/;"	f
free	$C2_ROOT/ast/array_value_list.c2	/^fn void ArrayValueList.free(ArrayValueList* l) {$/;"	f
free	$C2_ROOT/ast/ast.c2	/^fn void AST.free(AST* a) {$/;"	f
free	$C2_ROOT/ast/decl_list.c2	/^public fn void DeclList.free(DeclList* l) {$/;"	f
free	$C2_ROOT/ast/expr_list.c2	/^public fn void ExprList.free(ExprList* l) {$/;"	f
free	$C2_ROOT/ast/function_decl_list.c2	/^public fn void FunctionDeclList.free(FunctionDeclList* l) {$/;"	f
free	$C2_ROOT/ast/import_decl_list.c2	/^fn void ImportDeclList.free(ImportDeclList* l) {$/;"	f
free	$C2_ROOT/ast/instance_table.c2	/^fn void InstanceTable.free(InstanceTable* t) {$/;"	f
free	$C2_ROOT/ast/module.c2	/^public fn void Module.free(Module* m) {$/;"	f
free	$C2_ROOT/ast/static_assert_list.c2	/^fn void StaticAssertList.free(StaticAssertList* l) {$/;"	f
free	$C2_ROOT/ast/symbol_table.c2	/^fn void SymbolTable.free(SymbolTable* t) {$/;"	f
free	$C2_ROOT/ast_utils/attr_table.c2	/^public fn void Table.free(Table* t) {$/;"	f
free	$C2_ROOT/ast_utils/context.c2	/^public fn void Context.free(Context* c) {$/;"	f
free	$C2_ROOT/ast_utils/string_buffer.c2	/^public fn void Buf.free(Buf* buf) {$/;"	f
free	$C2_ROOT/ast_utils/string_pool.c2	/^public fn void Pool.free(Pool* p) {$/;"	f
free	$C2_ROOT/common/attr_handler.c2	/^public fn void Handler.free(Handler* h) {$/;"	f
free	$C2_ROOT/common/build_file.c2	/^public fn void Info.free(Info* info) {$/;"	f
free	$C2_ROOT/common/build_target.c2	/^public fn void Target.free(Target* t) {$/;"	f
free	$C2_ROOT/common/component.c2	/^public fn void List.free(List* l) {$/;"	f
free	$C2_ROOT/common/diagnostics.c2	/^public fn void Diags.free(Diags* diags) {$/;"	f
free	$C2_ROOT/common/dsm_sorter.c2	/^public fn void Sorter.free(Sorter* s) {$/;"	f
free	$C2_ROOT/common/index_list.c2	/^public fn void List.free(List* l) {$/;"	f
free	$C2_ROOT/common/library_list.c2	/^public fn void List.free(List* l) {$/;"	f
free	$C2_ROOT/common/module_list.c2	/^public fn void List.free(List* l) {$/;"	f
free	$C2_ROOT/common/source_mgr.c2	/^public fn void SourceMgr.free(SourceMgr* sm) {$/;"	f
free	$C2_ROOT/common/string_list.c2	/^public fn void List.free(List* l) {$/;"	f
free	$C2_ROOT/common/value_maplist.c2	/^public fn void List.free(List* l) {$/;"	f
free	$C2_ROOT/compiler/c2recipe.c2	/^public fn void Recipe.free(Recipe* r) {$/;"	f
free	$C2_ROOT/compiler/c2recipe_parser.c2	/^fn void Set.free(Set* s) {$/;"	f
free	$C2_ROOT/compiler/compiler.c2	/^fn void Compiler.free(Compiler* c) {$/;"	f
free	$C2_ROOT/compiler/main.c2	/^fn void Options.free(Options *opts) {$/;"	f
free	$C2_ROOT/compiler/plugin_mgr.c2	/^public fn void Mgr.free(Mgr* m) {$/;"	f
free	$C2_ROOT/generator/ast_visitor.c2	/^public fn void Visitor.free(Visitor* v) {$/;"	f
free	$C2_ROOT/generator/c/c_generator.c2	/^fn void Generator.free(Generator* gen) {$/;"	f
free	$C2_ROOT/generator/c/c_generator_trace.c2	/^fn void TraceCallList.free(TraceCallList* cl) {$/;"	f
free	$C2_ROOT/generator/c2refs.c2	/^public fn void Refs.free(Refs* r) {$/;"	f
free	$C2_ROOT/generator/ir/array_init_sorter.c2	/^public fn void Sorter.free(Sorter* s) {$/;"	f
free	$C2_ROOT/generator/ir/ir_generator.c2	/^fn void Generator.free(Generator* gen) {$/;"	f
free	$C2_ROOT/generator/ir/ir_generator_locals.c2	/^public fn void Locals.free(Locals* l) {$/;"	f
free	$C2_ROOT/generator/ir/ref_list.c2	/^public fn void RefList.free(RefList* l) {$/;"	f
free	$C2_ROOT/generator/radix_tree/radix_tree.c2	/^public fn void Tree.free(Tree* t) {$/;"	f
free	$C2_ROOT/ir/block_list.c2	/^public fn void BlockList.free(BlockList* l) {$/;"	f
free	$C2_ROOT/ir/case_list.c2	/^fn void CaseList.free(CaseList* l) {$/;"	f
free	$C2_ROOT/ir/constant_list.c2	/^fn void ConstantList.free(ConstantList* l) {$/;"	f
free	$C2_ROOT/ir/context.c2	/^public fn void Context.free(Context* c) {$/;"	f
free	$C2_ROOT/ir/copy_list.c2	/^public fn void CopyList.free(CopyList* l) {$/;"	f
free	$C2_ROOT/ir/function_info.c2	/^public fn void FunctionInfo.free(FunctionInfo* fi) {$/;"	f
free	$C2_ROOT/ir/init_value_list.c2	/^fn void InitValueList.free(InitValueList* l) {$/;"	f
free	$C2_ROOT/ir/inserter.c2	/^public fn void Inserter.free(Inserter* ins) {$/;"	f
free	$C2_ROOT/ir/instr_list.c2	/^public fn void InstrList.free(InstrList* l) {$/;"	f
free	$C2_ROOT/ir/interference_graph.c2	/^public fn void InterferenceGraph.free(InterferenceGraph* g) {$/;"	f
free	$C2_ROOT/ir/live_map.c2	/^public fn void Map.free(Map* g) {$/;"	f
free	$C2_ROOT/ir/lookup_table.c2	/^public fn void Table.free(Table* t) {$/;"	f
free	$C2_ROOT/ir/phi_list.c2	/^public fn void PhiClauses.free(PhiClauses* c) {$/;"	f
free	$C2_ROOT/ir/print.c2	/^fn void PrintHelper.free(PrintHelper* ph) {$/;"	f
free	$C2_ROOT/ir/register_alloc.c2	/^fn void LiveVector.free(LiveVector* v) {$/;"	f
free	$C2_ROOT/ir/rev_list.c2	/^public fn void RevList.free(RevList* r) {$/;"	f
free	$C2_ROOT/ir/rpo.c2	/^public fn void Rpo.free(Rpo* rpo) {$/;"	f
free	$C2_ROOT/ir/slot_collector.c2	/^public fn void SlotCollector.free(SlotCollector* c) {$/;"	f
free	$C2_ROOT/ir/slot_values.c2	/^public fn void SlotValues.free(SlotValues* v) {$/;"	f
free	$C2_ROOT/ir/slot_writes_map.c2	/^public fn void Map.free(Map* m) {$/;"	f
free	$C2_ROOT/ir/symbol_list.c2	/^fn void SymbolList.free(SymbolList* l) {$/;"	f
free	$C2_ROOT/ir/usage_counter.c2	/^public fn void Counter.free(Counter* c) {$/;"	f
free	$C2_ROOT/ir/work_queue.c2	/^fn void WorkQueue.free(WorkQueue* q) {$/;"	f
free	$C2_ROOT/libs/libc/ifaddrs.c2i	/^fn void Ifaddrs.free(Ifaddrs* __ifa) @(cname="freeifaddrs");$/;"	f
free	$C2_ROOT/libs/libc/stdlib.c2i	/^fn void free(void* ptr);$/;"	f
free	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn void free(void* mem) @(cname="SDL_free");$/;"	f
free	$C2_ROOT/parser/ast_builder.c2	/^public fn void Builder.free(Builder* b) {$/;"	f
free	$C2_ROOT/parser/c2_parser.c2	/^public fn void Parser.free(Parser* p) {$/;"	f
free	$C2_ROOT/parser/case_list.c2	/^public fn void List.free(List* l) {$/;"	f
free	$C2_ROOT/parser/expr_list.c2	/^public fn void List.free(List* l) {$/;"	f
free	$C2_ROOT/parser/stmt_list.c2	/^public fn void List.free(List* l) {$/;"	f
free	$C2_ROOT/plugins/deps_generator.c2	/^fn void Dir.free(Dir* d) {$/;"	f
free	$C2_ROOT/plugins/refs_generator.c2	/^fn void LineCounter.free(LineCounter* l) {$/;"	f
free	$C2_ROOT/tools/c2tags.c2	/^fn void Results.free(Results* r) {$/;"	f
free	$C2_ROOT/tools/common/refs_finder.c2	/^public fn void Finder.free(Finder* f) {$/;"	f
free	$C2_ROOT/tools/common/replacer.c2	/^public fn void Replacer.free(Replacer* r) {$/;"	f
freeBlocks	$C2_ROOT/ast_utils/context.c2	/^fn void Context.freeBlocks(Context* c) {$/;"	f
freeFragment	$C2_ROOT/generator/c/c_generator.c2	/^fn void Generator.freeFragment(Generator* gen, Fragment* f) {$/;"	f
free_node	$C2_ROOT/generator/radix_tree/radix_tree.c2	/^fn void Tree.free_node(Tree* t, u32 node_idx) {$/;"	f
freopen	$C2_ROOT/libs/libc/stdio.c2i	/^fn FILE* freopen(const c_char* __filename, const c_char* __modes, FILE* __stream);$/;"	f
frexp	$C2_ROOT/libs/math/math.c2i	/^fn c_double frexp(c_double, c_int *);$/;"	f
frexpf	$C2_ROOT/libs/math/math.c2i	/^fn c_float frexpf(c_float, c_int *);$/;"	f
from	$C2_ROOT/generator/ir/ir_generator_binop.c2	/^    ir.Type t = ir.Type.I32; \/\/ TODO get type from Expr$/;"	t
from	$C2_ROOT/generator/ir/ir_generator_expr.c2	/^        ir.Type t = ir.Type.I32; \/\/ TODO get type from Expr$/;"	t
fromString	$C2_ROOT/common/target_info.c2	/^public fn bool Info.fromString(Info* info, const char* triple) {$/;"	f
frustum	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn void frustum(c_float l, c_float r, c_float b, c_float t, c_float n, c_float f) @(cname="sgl_f/;"	f
frustum	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn void frustum(c_float l, c_float r, c_float b, c_float t, c_float n, c_float f) @(cname="sgl_f/;"	f
fscanf	$C2_ROOT/libs/libc/stdio.c2i	/^fn c_int fscanf(FILE* __stream, const c_char* __format, ...);$/;"	f
fseek	$C2_ROOT/libs/libc/stdio.c2i	/^fn c_int fseek(FILE* __stream, c_long __off, c_int __whence);$/;"	f
fseeko	$C2_ROOT/libs/libc/stdio.c2i	/^fn c_int fseeko(FILE* __stream, Offset __off, c_int __whence);$/;"	f
fstat	$C2_ROOT/libs/libc/sys_stat.c2i	/^fn c_int fstat(c_int fd, Stat* buf);$/;"	f
fsync	$C2_ROOT/libs/libc/unistd.c2i	/^fn c_int fsync(c_int fd);$/;"	f
ftell	$C2_ROOT/libs/libc/stdio.c2i	/^fn c_long ftell(FILE* __stream);$/;"	f
ftello	$C2_ROOT/libs/libc/stdio.c2i	/^fn Offset ftello(FILE* __stream);$/;"	f
ftrylockfile	$C2_ROOT/libs/libc/stdio.c2i	/^fn c_int ftrylockfile(FILE* __stream);$/;"	f
fullPrint	$C2_ROOT/ast/alias_type.c2	/^fn void AliasType.fullPrint(const AliasType* t, string_buffer.Buf* out, u32 indent) {$/;"	f
fullPrint	$C2_ROOT/ast/array_type.c2	/^fn void ArrayType.fullPrint(const ArrayType* t, string_buffer.Buf* out, u32 indent) {$/;"	f
fullPrint	$C2_ROOT/ast/builtin_type.c2	/^fn void BuiltinType.fullPrint(const BuiltinType* t, string_buffer.Buf* out, u32 indent) {$/;"	f
fullPrint	$C2_ROOT/ast/enum_type.c2	/^fn void EnumType.fullPrint(const EnumType* t, string_buffer.Buf* out, u32 indent) {$/;"	f
fullPrint	$C2_ROOT/ast/function_type.c2	/^fn void FunctionType.fullPrint(const FunctionType* t, string_buffer.Buf* out, u32 indent) {$/;"	f
fullPrint	$C2_ROOT/ast/module_type.c2	/^fn void ModuleType.fullPrint(const ModuleType* t, string_buffer.Buf* out, u32 indent) {$/;"	f
fullPrint	$C2_ROOT/ast/pointer_type.c2	/^fn void PointerType.fullPrint(const PointerType* t, string_buffer.Buf* out, u32 indent) {$/;"	f
fullPrint	$C2_ROOT/ast/qualtype.c2	/^fn void QualType.fullPrint(const QualType* qt, string_buffer.Buf* out, u32 indent) {$/;"	f
fullPrint	$C2_ROOT/ast/struct_type.c2	/^fn void StructType.fullPrint(const StructType* t, string_buffer.Buf* out, u32 indent) {$/;"	f
fullPrint	$C2_ROOT/ast/type.c2	/^fn void Type.fullPrint(const Type* t, string_buffer.Buf* out, u32 indent) {$/;"	f
func	$C2_ROOT/libs/sokol/sokol_log.c2i	/^fn void func(const char* tag, u32 log_level, u32 log_item, const char* message, u32 line_nr, con/;"	f
func	$C2_ROOT/libs/sokol_/sokol_log.c2i	/^fn void func(const char* tag, u32 log_level, u32 log_item, const char* message, u32 line_nr, con/;"	f
func1	$C2_ROOT/ir_examples/array.c2	/^fn i32 func1(i32 arg1) {$/;"	f
func1	$C2_ROOT/ir_examples/if_stmt.c2	/^fn i32 func1(i32 arg1) {$/;"	f
func1	$C2_ROOT/ir_examples/members.c2	/^fn void func1(Struct* s) {$/;"	f
func2	$C2_ROOT/ir_examples/if_stmt.c2	/^fn i32 func2(i8 arg1, void* p) {$/;"	f
func3	$C2_ROOT/ir_examples/if_stmt.c2	/^fn void func3(i8 a, i8 b) {$/;"	f
function	$C2_ROOT/analyser/module_analyser_call.c2	/^                    ma.errorRange(m.getLoc(0), base.getRange(), "type function needs lvalue");$/;"	t
function	$C2_ROOT/output/c2c/cgen/build.c	/^               module_analyser_Analyser_errorRange(ma, ast_MemberExpr_getLoc(m, 0), ast_Expr_get/;"	t
funlockfile	$C2_ROOT/libs/libc/stdio.c2i	/^fn void funlockfile(FILE* __stream);$/;"	f
fwrite	$C2_ROOT/libs/libc/stdio.c2i	/^fn c_size fwrite(const void* __ptr, c_size __size, c_size __n, FILE* __s);$/;"	f
fwrite_unlocked	$C2_ROOT/libs/libc/stdio.c2i	/^fn c_size fwrite_unlocked(const void* __ptr, c_size __size, c_size __n, FILE* __stream);$/;"	f
gc	$C2_ROOT/libs/lua/lua.c2i	/^fn c_int gc(State *L, c_int what, c_int data) @(cname="lua_gc");$/;"	f
gcvt	$C2_ROOT/libs/libc/stdlib.c2i	/^fn c_char* gcvt(c_double __value, c_int __ndigit, c_char* __buf);$/;"	f
genDeclIfNeeded	$C2_ROOT/generator/c/c_generator.c2	/^fn void Generator.genDeclIfNeeded(Generator* gen, Decl* d) {$/;"	f
genTypeIfNeeded	$C2_ROOT/generator/c/c_generator.c2	/^fn void Generator.genTypeIfNeeded(Generator* gen, QualType qt, bool full) {$/;"	f
gen_full_func	$C2_ROOT/generator/c/c_generator.c2	/^fn void Generator.gen_full_func(void* arg, FunctionDecl* fd) {$/;"	f
gen_full_funcs	$C2_ROOT/generator/c/c_generator.c2	/^fn void Generator.gen_full_funcs(void* arg, AST* a) {$/;"	f
gen_func_proto	$C2_ROOT/generator/c/c_generator.c2	/^fn void Generator.gen_func_proto(Generator* gen, FunctionDecl* fd, string_buffer.Buf* out) {$/;"	f
gen_member_type_func	$C2_ROOT/generator/c/c_generator.c2	/^fn void Generator.gen_member_type_func(Generator* gen, FunctionDecl* fd, string_buffer.Buf* out,/;"	f
generate	$C2_ROOT/generator/c/c_generator.c2	/^public fn void generate(string_pool.Pool* astPool,$/;"	f
generate	$C2_ROOT/generator/c2i/c2i_generator.c2	/^public fn void generate(string_pool.Pool* astPool, const char* output_dir, component.List* comps/;"	f
generate	$C2_ROOT/generator/ir/ir_generator.c2	/^public fn void generate(const char* target,$/;"	f
generate	$C2_ROOT/plugins/deps_generator.c2	/^public fn void generate(const char* title, const char* output_dir, component.List* comps, string/;"	f
generate	$C2_ROOT/plugins/refs_generator.c2	/^public fn void generate(source_mgr.SourceMgr* sm, const char* output_dir, component.List* comps,/;"	f
generateC2TypesHeader	$C2_ROOT/generator/c/c_generator_special.c2	/^fn void Generator.generateC2TypesHeader(Generator* gen) {$/;"	f
generateInterfaceFiles	$C2_ROOT/generator/c/c_generator.c2	/^fn void Generator.generateInterfaceFiles(Generator* gen, Module* m) {$/;"	f
generate_c2test_main	$C2_ROOT/plugins/unit_test_plugin.c2	/^fn void Plugin.generate_c2test_main(Plugin* p) {$/;"	f
generate_graphviz	$C2_ROOT/ir/graphviz.c2	/^fn void Tools.generate_graphviz(Tools* t, FunctionInfo* fi) @(unused) {$/;"	f
generate_module	$C2_ROOT/plugins/git_version_plugin.c2	/^fn void generate_module(void* arg) {$/;"	f
generate_tests	$C2_ROOT/plugins/unit_test_plugin.c2	/^fn void generate_tests(void* arg) {$/;"	f
generate_types	$C2_ROOT/plugins/unit_test_plugin.c2	/^fn void generate_types(Plugin *p) {$/;"	f
generator_utils	$C2_ROOT/generator/generator_utils.c2	/^module generator_utils;$/;"	m
get	$C2_ROOT/analyser/name_vector.c2	/^public fn u32 NameVector.get(const NameVector* v, u32 idx) {$/;"	f
get	$C2_ROOT/ast/array_value_list.c2	/^fn ArrayValue** ArrayValueList.get(ArrayValueList* l) {$/;"	f
get	$C2_ROOT/ast/decl_list.c2	/^public fn Decl* DeclList.get(const DeclList* l, u32 idx) {$/;"	f
get	$C2_ROOT/ast/instance_table.c2	/^fn FunctionDecl* TemplateFunction.get(const TemplateFunction* f, u32 idx) {$/;"	f
get	$C2_ROOT/ast/static_assert_list.c2	/^fn StaticAssert** StaticAssertList.get(StaticAssertList* l) {$/;"	f
get	$C2_ROOT/ast/string_type_pool.c2	/^fn QualType StringTypePool.get(StringTypePool* p, u32 len) {$/;"	f
get	$C2_ROOT/common/bit_array.c2	/^public fn bool BitArray.get(const BitArray* a, u32 idx) {$/;"	f
get	$C2_ROOT/common/build_target.c2	/^public fn const Plugin* PluginList.get(const PluginList* l, u32 idx) {$/;"	f
get	$C2_ROOT/common/component.c2	/^public fn Component* List.get(const List* l, u32 idx) {$/;"	f
get	$C2_ROOT/common/module_list.c2	/^public fn ast.Module** List.get(const List* l) { return l.mods; }$/;"	f
get	$C2_ROOT/common/string_list.c2	/^public fn const char* List.get(const List* l, u32 idx) {$/;"	f
get	$C2_ROOT/common/value_maplist.c2	/^public fn u32 List.get(const List* l, u32 key) {$/;"	f
get	$C2_ROOT/generator/c/c_generator_trace.c2	/^fn const char* StringList.get(const StringList* sl, u32 i) {$/;"	f
get	$C2_ROOT/generator/ir/ref_list.c2	/^public fn const ir.Ref* RefList.get(const RefList* l) {$/;"	f
get	$C2_ROOT/ir/block_list.c2	/^public fn Block* BlockList.get(const BlockList* l, BlockId idx) {$/;"	f
get	$C2_ROOT/ir/case_list.c2	/^public fn Case* CaseList.get(const CaseList* l, CaseId idx) {$/;"	f
get	$C2_ROOT/ir/constant_list.c2	/^fn Constant* ConstantList.get(const ConstantList* l, u32 idx) {$/;"	f
get	$C2_ROOT/ir/init_value_list.c2	/^fn InitValue* InitValueList.get(const InitValueList* l, u32 idx) {$/;"	f
get	$C2_ROOT/ir/instr_list.c2	/^public fn Instr* InstrList.get(const InstrList* l, u32 idx) {$/;"	f
get	$C2_ROOT/ir/lookup_table.c2	/^public fn u32 Table.get(const Table* t, u32 idx) {$/;"	f
get	$C2_ROOT/ir/phi_list.c2	/^public fn PhiClause* PhiList.get(const PhiList* l, u32 idx) {$/;"	f
get	$C2_ROOT/ir/symbol_list.c2	/^fn Symbol* SymbolList.get(const SymbolList* l, SymbolId idx) {$/;"	f
get	$C2_ROOT/ir/work_queue.c2	/^fn ir.FunctionInfo* WorkQueue.get(WorkQueue* q) {$/;"	f
get	$C2_ROOT/ir_examples/struct_func.c2	/^fn i32 A.get(const A* a) {$/;"	f
get	$C2_ROOT/libs/libc/ifaddrs.c2i	/^fn c_int get(Ifaddrs** __ifap) @(cname="getifaddrs");$/;"	f
get	$C2_ROOT/plugins/deps_generator.c2	/^fn Dir* Dir.get(Dir* d, u32 name_idx) {$/;"	f
get	$C2_ROOT/tools/common/refs_finder.c2	/^public fn const char* Finder.get(Finder* f, u32 idx) {$/;"	f
get	$C2_ROOT/tools/tester/tester.c2	/^fn Test* TestQueue.get(TestQueue* q) {$/;"	f
getAST	$C2_ROOT/ast/decl.c2	/^public fn AST* Decl.getAST(const Decl* d) { return idx2ast(d.ast_idx); }$/;"	f
getAST	$C2_ROOT/ast/static_assert.c2	/^public fn AST* StaticAssert.getAST(const StaticAssert* d) {$/;"	f
getASTIdx	$C2_ROOT/ast/decl.c2	/^fn u32 Decl.getASTIdx(const Decl* d) { return d.ast_idx; }$/;"	f
getAddIndex	$C2_ROOT/ir/inserter.c2	/^fn u32 Inserter.getAddIndex(Inserter* ins, u32 location) {$/;"	f
getAddress	$C2_ROOT/ast/function_decl.c2	/^fn CompoundStmt* FunctionDecl.getAddress(const FunctionDecl* d) {$/;"	f
getAliasName	$C2_ROOT/ast/import_decl.c2	/^public fn const char* ImportDecl.getAliasName(const ImportDecl* d) { return idx2name(d.alias_idx/;"	f
getAliasNameIdx	$C2_ROOT/ast/import_decl.c2	/^fn u32 ImportDecl.getAliasNameIdx(const ImportDecl* d) { return d.alias_idx; }$/;"	f
getAlignment	$C2_ROOT/ast/builtin_type.c2	/^public fn u32 BuiltinType.getAlignment(const BuiltinType* b) {$/;"	f
getAlignment	$C2_ROOT/ast/qualtype.c2	/^public fn u32 QualType.getAlignment(QualType* qt) {$/;"	f
getAlignment	$C2_ROOT/ast/struct_type_decl.c2	/^public fn u32 StructTypeDecl.getAlignment(const StructTypeDecl* d) {$/;"	f
getAlignment	$C2_ROOT/ast/type.c2	/^fn u32 Type.getAlignment(const Type* t) {$/;"	f
getAlphaMod	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn c_int Texture.getAlphaMod(Texture* texture, u8* alpha) @(cname="SDL_GetTextureAlphaMod");$/;"	f
getArchName	$C2_ROOT/common/target_info.c2	/^public fn const char* Info.getArchName(const Info* info) {$/;"	f
getArg	$C2_ROOT/ir/function_info.c2	/^public fn Type FunctionInfo.getArg(const FunctionInfo* fi, u32 idx) {$/;"	f
getArgs	$C2_ROOT/ast/call_expr.c2	/^public fn Expr** CallExpr.getArgs(CallExpr* e) {$/;"	f
getArray	$C2_ROOT/ast/type_ref.c2	/^public fn Expr* TypeRef.getArray(const TypeRef* r, u32 idx) {$/;"	f
getArray2	$C2_ROOT/ast/type_ref.c2	/^public fn Expr** TypeRef.getArray2(TypeRef* r, u32 idx) {$/;"	f
getArrayType	$C2_ROOT/ast/qualtype.c2	/^public fn ArrayType* QualType.getArrayType(const QualType* qt) {$/;"	f
getArrayTypeOrNil	$C2_ROOT/ast/qualtype.c2	/^public fn ArrayType* QualType.getArrayTypeOrNil(const QualType* qt) {$/;"	f
getAsmFile	$C2_ROOT/common/build_target.c2	/^public fn const File* Target.getAsmFile(const Target* t, u32 idx) {$/;"	f
getAsmFlags	$C2_ROOT/common/build_file.c2	/^public fn const char* Info.getAsmFlags(const Info* info) {$/;"	f
getAssignLoc	$C2_ROOT/ast/var_decl.c2	/^public fn SrcLoc VarDecl.getAssignLoc(const VarDecl* d) {$/;"	f
getAt	$C2_ROOT/ast/static_assert_list.c2	/^fn StaticAssert* StaticAssertList.getAt(const StaticAssertList* l, u32 idx) {$/;"	f
getAttr	$C2_ROOT/ast/ast.c2	/^public fn const attr.Value* AST.getAttr(const AST* a,$/;"	f
getAttrAlignment	$C2_ROOT/ast/struct_type_decl.c2	/^public fn u32 StructTypeDecl.getAttrAlignment(const StructTypeDecl* d) {$/;"	f
getAttrPrintf	$C2_ROOT/ast/function_decl.c2	/^public fn u8 FunctionDecl.getAttrPrintf(const FunctionDecl* d) {$/;"	f
getBackEnd	$C2_ROOT/common/build_target.c2	/^public fn BackEndKind Target.getBackEnd(const Target* t) {$/;"	f
getBase	$C2_ROOT/ast/array_subscript_expr.c2	/^public fn Expr* ArraySubscriptExpr.getBase(const ArraySubscriptExpr* e) { return e.lhs; }$/;"	f
getBase2	$C2_ROOT/ast/array_subscript_expr.c2	/^public fn Expr** ArraySubscriptExpr.getBase2(ArraySubscriptExpr* e) { return &e.lhs; }$/;"	f
getBaseKind	$C2_ROOT/ast/builtin_type.c2	/^public fn BuiltinKind BuiltinType.getBaseKind(const BuiltinType* b) {$/;"	f
getBaseType	$C2_ROOT/ast/member_expr.c2	/^public fn QualType MemberExpr.getBaseType(const MemberExpr* m) {$/;"	f
getBinOpWidth	$C2_ROOT/analyser/conversion_checker_expr.c2	/^fn ExprWidth getBinOpWidth(const BinaryOperator* b) {$/;"	f
getBitFieldInfo	$C2_ROOT/ast/var_decl.c2	/^fn BitFieldInfo* VarDecl.getBitFieldInfo(const VarDecl* d) {$/;"	f
getBitFieldWidth	$C2_ROOT/ast/qualtype.c2	/^public fn u32 QualType.getBitFieldWidth(const QualType* qt) {$/;"	f
getBitfield	$C2_ROOT/ast/var_decl.c2	/^public fn Expr* VarDecl.getBitfield(const VarDecl* d) {$/;"	f
getBitfieldLayout	$C2_ROOT/ast/var_decl.c2	/^public fn BitFieldLayout* VarDecl.getBitfieldLayout(const VarDecl* d) {$/;"	f
getBlendMode	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn c_int Texture.getBlendMode(Texture* texture, BlendMode* mode) @(cname="SDL_GetTextureBlendMod/;"	f
getBlockIndex	$C2_ROOT/ir/rev_list.c2	/^public fn RevIndex RevList.getBlockIndex(const RevList* r, BlockId blk_id) {$/;"	f
getBody	$C2_ROOT/ast/for_stmt.c2	/^public fn Stmt* ForStmt.getBody(const ForStmt* s) { return s.body; }$/;"	f
getBody	$C2_ROOT/ast/function_decl.c2	/^public fn CompoundStmt* FunctionDecl.getBody(const FunctionDecl* d) {$/;"	f
getBody	$C2_ROOT/ast/while_stmt.c2	/^public fn Stmt* WhileStmt.getBody(const WhileStmt* s) { return s.body; }$/;"	f
getBuf	$C2_ROOT/generator/c/c_generator.c2	/^fn string_buffer.Buf* Generator.getBuf(Generator* gen, bool is_public) {$/;"	f
getBuiltin	$C2_ROOT/ast/qualtype.c2	/^public fn BuiltinType* QualType.getBuiltin(const QualType* qt) {$/;"	f
getBuiltinKind	$C2_ROOT/ast/type_ref.c2	/^public fn BuiltinKind TypeRef.getBuiltinKind(const TypeRef* r) {$/;"	f
getBuiltinTypeOrNil	$C2_ROOT/ast/qualtype.c2	/^public fn BuiltinType* QualType.getBuiltinTypeOrNil(const QualType* qt) {$/;"	f
getCC	$C2_ROOT/common/build_file.c2	/^public fn const char* Info.getCC(const Info* info) {$/;"	f
getCDef	$C2_ROOT/ast/decl.c2	/^public fn const char* Decl.getCDef(const Decl* d) {$/;"	f
getCFlags	$C2_ROOT/common/build_file.c2	/^public fn const char* Info.getCFlags(const Info* info) {$/;"	f
getCName	$C2_ROOT/ast/decl.c2	/^public fn const char* Decl.getCName(const Decl* d) {$/;"	f
getCName	$C2_ROOT/ast/function_decl.c2	/^fn const char* FunctionDecl.getCName(const FunctionDecl* d) {$/;"	f
getCStyle	$C2_ROOT/ast/explicit_cast_expr.c2	/^public fn bool ExplicitCastExpr.getCStyle(const ExplicitCastExpr* e) {$/;"	f
getCallKind	$C2_ROOT/ast/function_decl.c2	/^public fn CallKind FunctionDecl.getCallKind(const FunctionDecl* d) {$/;"	f
getCanonicalType	$C2_ROOT/ast/qualtype.c2	/^public fn QualType QualType.getCanonicalType(const QualType* qt) {$/;"	f
getCanonicalType	$C2_ROOT/ast/type.c2	/^fn QualType Type.getCanonicalType(const Type* t) { return t.canonicalType; }$/;"	f
getCases	$C2_ROOT/ast/switch_stmt.c2	/^public fn SwitchCase** SwitchStmt.getCases(SwitchStmt* s) {$/;"	f
getCheckState	$C2_ROOT/ast/decl.c2	/^public fn DeclCheckState Decl.getCheckState(const Decl* d) { return (DeclCheckState)d.declBits.c/;"	f
getCheckStateName	$C2_ROOT/ast/decl.c2	/^public fn const char* Decl.getCheckStateName(const Decl* d) {$/;"	f
getChildIter	$C2_ROOT/common/yaml/yaml_iterator.c2	/^public fn Iter Iter.getChildIter(Iter* parent) @(unused) {$/;"	f
getChildScalarValue	$C2_ROOT/common/yaml/yaml_iterator.c2	/^public fn const char* Iter.getChildScalarValue(Iter* iter, const char* path) {$/;"	f
getClauses	$C2_ROOT/ir/phi_list.c2	/^public fn const PhiClause* PhiClauses.getClauses(const PhiClauses* c) {$/;"	f
getClearedFmtBuffer	$C2_ROOT/libs/sokol/sokol_debugtext.c2i	/^fn Range getClearedFmtBuffer() @(cname="sdtx_get_cleared_fmt_buffer");$/;"	f
getClearedFmtBuffer	$C2_ROOT/libs/sokol_/sokol_debugtext.c2i	/^fn Range getClearedFmtBuffer() @(cname="sdtx_get_cleared_fmt_buffer");$/;"	f
getClipRect	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn void Renderer.getClipRect(Renderer* renderer, Rect* rect) @(cname="SDL_RenderGetClipRect");$/;"	f
getClipboardString	$C2_ROOT/libs/sokol/sokol_app.c2i	/^fn const char* getClipboardString() @(cname="sapp_get_clipboard_string");$/;"	f
getClipboardString	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^fn const char* getClipboardString() @(cname="sapp_get_clipboard_string");$/;"	f
getClipboardText	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn char* getClipboardText() @(cname="SDL_GetClipboardText");$/;"	f
getClobbers	$C2_ROOT/ast/asm_stmt.c2	/^public fn Expr** AsmStmt.getClobbers(const AsmStmt* s) {$/;"	f
getColorMod	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn c_int Texture.getColorMod(Texture* texture, u8* r, u8* g,u8* b) @(cname="SDL_GetTextureColorM/;"	f
getCond	$C2_ROOT/ast/conditional_operator.c2	/^public fn Expr* ConditionalOperator.getCond(const ConditionalOperator* e) {$/;"	f
getCond	$C2_ROOT/ast/for_stmt.c2	/^public fn Expr* ForStmt.getCond(const ForStmt* s) { return s.cond; }$/;"	f
getCond	$C2_ROOT/ast/if_stmt.c2	/^public fn Stmt* IfStmt.getCond(const IfStmt* s) { return s.cond; }$/;"	f
getCond	$C2_ROOT/ast/switch_case.c2	/^public fn Expr* SwitchCase.getCond(SwitchCase* s, u32 index) {$/;"	f
getCond	$C2_ROOT/ast/switch_stmt.c2	/^public fn Expr* SwitchStmt.getCond(const SwitchStmt* s) {$/;"	f
getCond	$C2_ROOT/ast/while_stmt.c2	/^public fn Stmt* WhileStmt.getCond(const WhileStmt* s) { return s.cond; }$/;"	f
getCond2	$C2_ROOT/ast/conditional_operator.c2	/^public fn Expr** ConditionalOperator.getCond2(ConditionalOperator* e) {$/;"	f
getCond2	$C2_ROOT/ast/for_stmt.c2	/^public fn Expr** ForStmt.getCond2(ForStmt* s) { return s.cond ? &s.cond : nil; }$/;"	f
getCond2	$C2_ROOT/ast/if_stmt.c2	/^public fn Stmt** IfStmt.getCond2(IfStmt* s) { return &s.cond; }$/;"	f
getCond2	$C2_ROOT/ast/switch_stmt.c2	/^public fn Expr** SwitchStmt.getCond2(SwitchStmt* s) {$/;"	f
getCond2	$C2_ROOT/ast/while_stmt.c2	/^public fn Stmt** WhileStmt.getCond2(WhileStmt* s) { return &s.cond; }$/;"	f
getCondExpr	$C2_ROOT/analyser/module_analyser_stmt.c2	/^fn Expr* getCondExpr(const Stmt* cond) {$/;"	f
getCondOpWidth	$C2_ROOT/analyser/conversion_checker_expr.c2	/^fn ExprWidth getCondOpWidth(const ConditionalOperator* c) {$/;"	f
getConsecutive	$C2_ROOT/tools/tester/line_db.c2	/^public fn bool Db.getConsecutive(const Db* db, u32 idx) {$/;"	f
getConst	$C2_ROOT/common/module_list.c2	/^public fn const ast.Module** List.getConst(const List* l) {$/;"	f
getConstant	$C2_ROOT/ast/enum_type_decl.c2	/^public fn EnumConstantDecl* EnumTypeDecl.getConstant(const EnumTypeDecl* d, u32 idx) {$/;"	f
getConstants	$C2_ROOT/ast/enum_type_decl.c2	/^public fn EnumConstantDecl** EnumTypeDecl.getConstants(EnumTypeDecl* d) {$/;"	f
getConstraints	$C2_ROOT/ast/asm_stmt.c2	/^public fn const Expr** AsmStmt.getConstraints(const AsmStmt* s) {$/;"	f
getCont	$C2_ROOT/ast/for_stmt.c2	/^public fn Expr* ForStmt.getCont(const ForStmt* s) { return s.cont; }$/;"	f
getCont2	$C2_ROOT/ast/for_stmt.c2	/^public fn Expr** ForStmt.getCont2(ForStmt* s) { return s.cont ? &s.cont : nil; }$/;"	f
getContext	$C2_ROOT/libs/sokol/sokol_debugtext.c2i	/^fn Context getContext() @(cname="sdtx_get_context");$/;"	f
getContext	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn Context getContext() @(cname="sgl_get_context");$/;"	f
getContext	$C2_ROOT/libs/sokol_/sokol_debugtext.c2i	/^fn Context getContext() @(cname="sdtx_get_context");$/;"	f
getContext	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn Context getContext() @(cname="sgl_get_context");$/;"	f
getConversion	$C2_ROOT/ast/member_expr.c2	/^public fn MemberConversion MemberExpr.getConversion(const MemberExpr* e) {$/;"	f
getCount	$C2_ROOT/analyser/init_checker.c2	/^public fn u32 Checker.getCount(const Checker* c) {$/;"	f
getCount	$C2_ROOT/analyser/label_vector.c2	/^public fn u32 LabelVector.getCount(const LabelVector* v) {$/;"	f
getCount	$C2_ROOT/ast/array_value_list.c2	/^fn u32 ArrayValueList.getCount(const ArrayValueList* l) {$/;"	f
getCount	$C2_ROOT/ast/compound_stmt.c2	/^public fn u32 CompoundStmt.getCount(const CompoundStmt* s) {$/;"	f
getCount	$C2_ROOT/ast/static_assert_list.c2	/^fn u32 StaticAssertList.getCount(const StaticAssertList* l) {$/;"	f
getCount	$C2_ROOT/common/index_list.c2	/^public fn u32 List.getCount(const List* l) {$/;"	f
getCount	$C2_ROOT/generator/ir/ref_list.c2	/^public fn u32 RefList.getCount(const RefList* l) {$/;"	f
getCount	$C2_ROOT/ir/block_list.c2	/^public fn u32 BlockList.getCount(const BlockList* l) {$/;"	f
getCount	$C2_ROOT/ir/case_list.c2	/^public fn u32 CaseList.getCount(const CaseList* l) {$/;"	f
getCount	$C2_ROOT/ir/constant_list.c2	/^fn u32 ConstantList.getCount(const ConstantList* l) {$/;"	f
getCount	$C2_ROOT/ir/init_value_list.c2	/^fn u32 InitValueList.getCount(const InitValueList* l) {$/;"	f
getCount	$C2_ROOT/ir/instr_list.c2	/^public fn u32 InstrList.getCount(const InstrList* l) {$/;"	f
getCount	$C2_ROOT/ir/phi_list.c2	/^public fn u32 PhiList.getCount(const PhiList* l) {$/;"	f
getCount	$C2_ROOT/ir/symbol_list.c2	/^fn u32 SymbolList.getCount(const SymbolList* l) {$/;"	f
getCount	$C2_ROOT/tools/c2tags.c2	/^fn u32 Results.getCount(const Results* r) {$/;"	f
getCurBlock	$C2_ROOT/ir/context.c2	/^public fn BlockId Context.getCurBlock(const Context* c) {$/;"	f
getCurrentTime	$C2_ROOT/tools/c2tags.c2	/^public fn u64 getCurrentTime() {$/;"	f
getData	$C2_ROOT/common/string_list.c2	/^public fn u32* List.getData(List* l) {$/;"	f
getData	$C2_ROOT/parser/case_list.c2	/^public fn SwitchCase** List.getData(List* l) {$/;"	f
getData	$C2_ROOT/parser/expr_list.c2	/^public fn Expr** List.getData(List* l) {$/;"	f
getData	$C2_ROOT/parser/stmt_list.c2	/^public fn Stmt** List.getData(List* l) {$/;"	f
getDecl	$C2_ROOT/analyser/struct_func_list.c2	/^public fn ast.Decl* List.getDecl(const List* v, u32 index) {$/;"	f
getDecl	$C2_ROOT/ast/alias_type.c2	/^public fn AliasTypeDecl* AliasType.getDecl(const AliasType* t) { return t.decl; }$/;"	f
getDecl	$C2_ROOT/ast/decl_stmt.c2	/^public fn VarDecl* DeclStmt.getDecl(const DeclStmt* d, u32 i) {$/;"	f
getDecl	$C2_ROOT/ast/enum_type.c2	/^public fn EnumTypeDecl* EnumType.getDecl(const EnumType* t) { return t.decl; }$/;"	f
getDecl	$C2_ROOT/ast/field_designated_init_expr.c2	/^public fn Decl* FieldDesignatedInitExpr.getDecl(const FieldDesignatedInitExpr* e) {$/;"	f
getDecl	$C2_ROOT/ast/function_type.c2	/^public fn FunctionDecl* FunctionType.getDecl(const FunctionType* t) { return t.decl; }$/;"	f
getDecl	$C2_ROOT/ast/function_type_decl.c2	/^public fn FunctionDecl* FunctionTypeDecl.getDecl(const FunctionTypeDecl* d) {$/;"	f
getDecl	$C2_ROOT/ast/identifier_expr.c2	/^public fn Decl* IdentifierExpr.getDecl(const IdentifierExpr* e) {$/;"	f
getDecl	$C2_ROOT/ast/member_expr.c2	/^public fn Decl* MemberExpr.getDecl(const MemberExpr* e, u32 ref_idx) {$/;"	f
getDecl	$C2_ROOT/ast/struct_type.c2	/^public fn StructTypeDecl* StructType.getDecl(const StructType* t) { return t.decl; }$/;"	f
getDeclCount	$C2_ROOT/ast/decl_stmt.c2	/^public fn u32 DeclStmt.getDeclCount(const DeclStmt* d) {$/;"	f
getDecls	$C2_ROOT/ast/decl_list.c2	/^public fn Decl** DeclList.getDecls(const DeclList* l) {$/;"	f
getDecls	$C2_ROOT/ast/function_decl_list.c2	/^public fn FunctionDecl** FunctionDeclList.getDecls(const FunctionDeclList* l) {$/;"	f
getDecls	$C2_ROOT/ast/import_decl_list.c2	/^public fn ImportDecl** ImportDeclList.getDecls(const ImportDeclList* l) {$/;"	f
getDecls	$C2_ROOT/ast/symbol_table.c2	/^public fn Decl** SymbolTable.getDecls(const SymbolTable* t) {$/;"	f
getDeps	$C2_ROOT/common/component.c2	/^public fn string_list.List* Component.getDeps(Component* c) {$/;"	f
getDesigMemberCount	$C2_ROOT/ast/struct_type_decl.c2	/^public fn u32 StructTypeDecl.getDesigMemberCount(const StructTypeDecl* d) {$/;"	f
getDesignator	$C2_ROOT/ast/array_designated_init_expr.c2	/^public fn Expr* ArrayDesignatedInitExpr.getDesignator(const ArrayDesignatedInitExpr* e) {$/;"	f
getDesignator2	$C2_ROOT/ast/array_designated_init_expr.c2	/^public fn Expr** ArrayDesignatedInitExpr.getDesignator2(ArrayDesignatedInitExpr* e) {$/;"	f
getDest	$C2_ROOT/ast/import_decl.c2	/^public fn Module* ImportDecl.getDest(const ImportDecl* d) { return d.dest; }$/;"	f
getDestType	$C2_ROOT/ast/explicit_cast_expr.c2	/^public fn QualType ExplicitCastExpr.getDestType(const ExplicitCastExpr* e) { return e.dest_type;/;"	f
getDiagKind	$C2_ROOT/ast/function_decl.c2	/^public fn const char* FunctionDecl.getDiagKind(const FunctionDecl* d) {$/;"	f
getDrawColor	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn c_int Renderer.getDrawColor(Renderer* renderer, u8* r, u8* g, u8* b, u8* a) @(cname="SDL_GetR/;"	f
getDroppedFilePath	$C2_ROOT/libs/sokol/sokol_app.c2i	/^fn const char* getDroppedFilePath(c_int index) @(cname="sapp_get_dropped_file_path");$/;"	f
getDroppedFilePath	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^fn const char* getDroppedFilePath(c_int index) @(cname="sapp_get_dropped_file_path");$/;"	f
getElemType	$C2_ROOT/ast/array_type.c2	/^public fn QualType ArrayType.getElemType(const ArrayType* t) { return t.elem; }$/;"	f
getElse	$C2_ROOT/ast/if_stmt.c2	/^public fn Stmt* IfStmt.getElse(const IfStmt* s) {$/;"	f
getEndLoc	$C2_ROOT/ast/array_designated_init_expr.c2	/^fn SrcLoc ArrayDesignatedInitExpr.getEndLoc(const ArrayDesignatedInitExpr* e) {$/;"	f
getEndLoc	$C2_ROOT/ast/array_subscript_expr.c2	/^fn SrcLoc ArraySubscriptExpr.getEndLoc(const ArraySubscriptExpr* e) {$/;"	f
getEndLoc	$C2_ROOT/ast/binary_operator.c2	/^fn SrcLoc BinaryOperator.getEndLoc(const BinaryOperator* e) {$/;"	f
getEndLoc	$C2_ROOT/ast/bitoffset_expr.c2	/^fn SrcLoc BitOffsetExpr.getEndLoc(const BitOffsetExpr* e) {$/;"	f
getEndLoc	$C2_ROOT/ast/boolean_literal.c2	/^fn SrcLoc BooleanLiteral.getEndLoc(const BooleanLiteral* e) {$/;"	f
getEndLoc	$C2_ROOT/ast/builtin_expr.c2	/^fn SrcLoc BuiltinExpr.getEndLoc(const BuiltinExpr* e) {$/;"	f
getEndLoc	$C2_ROOT/ast/call_expr.c2	/^public fn SrcLoc CallExpr.getEndLoc(const CallExpr* e) { return e.endLoc; }$/;"	f
getEndLoc	$C2_ROOT/ast/char_literal.c2	/^fn SrcLoc CharLiteral.getEndLoc(const CharLiteral* e) {$/;"	f
getEndLoc	$C2_ROOT/ast/compound_stmt.c2	/^public fn SrcLoc CompoundStmt.getEndLoc(const CompoundStmt* e) {$/;"	f
getEndLoc	$C2_ROOT/ast/conditional_operator.c2	/^fn SrcLoc ConditionalOperator.getEndLoc(const ConditionalOperator* e) {$/;"	f
getEndLoc	$C2_ROOT/ast/explicit_cast_expr.c2	/^fn SrcLoc ExplicitCastExpr.getEndLoc(const ExplicitCastExpr* e) {$/;"	f
getEndLoc	$C2_ROOT/ast/expr.c2	/^public fn SrcLoc Expr.getEndLoc(const Expr* e) {$/;"	f
getEndLoc	$C2_ROOT/ast/field_designated_init_expr.c2	/^fn SrcLoc FieldDesignatedInitExpr.getEndLoc(const FieldDesignatedInitExpr* e) {$/;"	f
getEndLoc	$C2_ROOT/ast/float_literal.c2	/^fn SrcLoc FloatLiteral.getEndLoc(const FloatLiteral* e) {$/;"	f
getEndLoc	$C2_ROOT/ast/identifier_expr.c2	/^fn SrcLoc IdentifierExpr.getEndLoc(const IdentifierExpr* e) {$/;"	f
getEndLoc	$C2_ROOT/ast/implicit_cast_expr.c2	/^fn SrcLoc ImplicitCastExpr.getEndLoc(const ImplicitCastExpr* e) {$/;"	f
getEndLoc	$C2_ROOT/ast/init_list_expr.c2	/^fn SrcLoc InitListExpr.getEndLoc(const InitListExpr* e) {$/;"	f
getEndLoc	$C2_ROOT/ast/integer_literal.c2	/^fn SrcLoc IntegerLiteral.getEndLoc(const IntegerLiteral* e) {$/;"	f
getEndLoc	$C2_ROOT/ast/member_expr.c2	/^fn SrcLoc MemberExpr.getEndLoc(const MemberExpr* e) {$/;"	f
getEndLoc	$C2_ROOT/ast/nil_expr.c2	/^fn SrcLoc NilExpr.getEndLoc(const NilExpr* e) {$/;"	f
getEndLoc	$C2_ROOT/ast/paren_expr.c2	/^fn SrcLoc ParenExpr.getEndLoc(const ParenExpr* e) {$/;"	f
getEndLoc	$C2_ROOT/ast/range_expr.c2	/^fn SrcLoc RangeExpr.getEndLoc(const RangeExpr* e) {$/;"	f
getEndLoc	$C2_ROOT/ast/string_literal.c2	/^fn SrcLoc StringLiteral.getEndLoc(const StringLiteral* e) {$/;"	f
getEndLoc	$C2_ROOT/ast/type_expr.c2	/^fn SrcLoc TypeExpr.getEndLoc(const TypeExpr* e) {$/;"	f
getEndLoc	$C2_ROOT/ast/unary_operator.c2	/^fn SrcLoc UnaryOperator.getEndLoc(const UnaryOperator* e) {$/;"	f
getEnum	$C2_ROOT/ast/qualtype.c2	/^public fn EnumType* QualType.getEnum(const QualType* qt) {$/;"	f
getEnumType	$C2_ROOT/ast/qualtype.c2	/^public fn EnumType* QualType.getEnumType(const QualType* qt) {$/;"	f
getEnumTypeOrNil	$C2_ROOT/ast/qualtype.c2	/^public fn EnumType* QualType.getEnumTypeOrNil(const QualType* qt) {$/;"	f
getError	$C2_ROOT/common/file/file_utils.c2	/^public fn const char* File.getError(File* file) @(unused) {$/;"	f
getError	$C2_ROOT/compiler/plugin_mgr.c2	/^public fn const char* Mgr.getError(const Mgr* m) {$/;"	f
getError	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn const char* getError() @(cname="SDL_GetError");$/;"	f
getExports	$C2_ROOT/common/build_target.c2	/^public fn const string_list.List* Target.getExports(const Target* t) { return &t.exports; }$/;"	f
getExprBase	$C2_ROOT/ast/member_expr.c2	/^public fn Expr* MemberExpr.getExprBase(const MemberExpr* e) {$/;"	f
getExprWidth	$C2_ROOT/analyser/conversion_checker_expr.c2	/^fn ExprWidth getExprWidth(const Expr* e) {$/;"	f
getExprs	$C2_ROOT/ast/asm_stmt.c2	/^public fn Expr** AsmStmt.getExprs(const AsmStmt* s) {$/;"	f
getExprs	$C2_ROOT/ast/expr_list.c2	/^public fn Expr** ExprList.getExprs(const ExprList* l) {$/;"	f
getExtraSize	$C2_ROOT/ast/type_ref.c2	/^fn u32 TypeRefHolder.getExtraSize(const TypeRefHolder* h) {$/;"	f
getFastBuild	$C2_ROOT/common/build_target.c2	/^public fn bool Target.getFastBuild(const Target* t) {$/;"	f
getFeatures	$C2_ROOT/common/build_target.c2	/^public fn const string_list.List* Target.getFeatures(const Target* t) { return &t.features; }$/;"	f
getField	$C2_ROOT/ast/field_designated_init_expr.c2	/^public fn u32 FieldDesignatedInitExpr.getField(const FieldDesignatedInitExpr* e) {$/;"	f
getFieldInfo	$C2_ROOT/analyser/module_analyser_init.c2	/^fn const FieldInitInfo* Analyser.getFieldInfo(Analyser* ma, StructTypeDecl* std) {$/;"	f
getFieldInfo	$C2_ROOT/ast/struct_type_decl.c2	/^public fn const FieldInitInfo* StructTypeDecl.getFieldInfo(const StructTypeDecl* d) {$/;"	f
getFieldName	$C2_ROOT/ast/field_designated_init_expr.c2	/^public fn const char* FieldDesignatedInitExpr.getFieldName(const FieldDesignatedInitExpr* e) {$/;"	f
getFile	$C2_ROOT/common/build_target.c2	/^public fn const File* Target.getFile(const Target* t, u32 idx) {$/;"	f
getFileName	$C2_ROOT/common/source_mgr.c2	/^public fn const char* SourceMgr.getFileName(SourceMgr* sm, i32 handle) {$/;"	f
getFileNameIdx	$C2_ROOT/common/source_mgr.c2	/^public fn u32 SourceMgr.getFileNameIdx(SourceMgr* sm, i32 handle) {$/;"	f
getFilename	$C2_ROOT/ast/ast.c2	/^public fn const char* AST.getFilename(const AST* a) @(unused) {$/;"	f
getFilename	$C2_ROOT/tools/tester/issues.c2	/^public fn const char* Iter.getFilename(const Iter* iter) {$/;"	f
getFirstFilename	$C2_ROOT/ast/module.c2	/^public fn const char* Module.getFirstFilename(const Module* m) @(unused) {$/;"	f
getForeign	$C2_ROOT/common/component.c2	/^public fn bool Component.getForeign(const Component* c) {$/;"	f
getFragment	$C2_ROOT/generator/c/c_generator.c2	/^fn Fragment* Generator.getFragment(Generator* gen) {$/;"	f
getFrom	$C2_ROOT/common/index_list.c2	/^public fn u32* List.getFrom(const List* l, u32 idx) {$/;"	f
getFullDecl	$C2_ROOT/ast/member_expr.c2	/^public fn Decl* MemberExpr.getFullDecl(const MemberExpr* e) {$/;"	f
getFullName	$C2_ROOT/ast/decl.c2	/^public fn const char* Decl.getFullName(const Decl* d) {$/;"	f
getFunc	$C2_ROOT/ast/call_expr.c2	/^public fn Expr* CallExpr.getFunc(const CallExpr* e) { return e.func; }$/;"	f
getFunc2	$C2_ROOT/ast/call_expr.c2	/^public fn Expr** CallExpr.getFunc2(CallExpr* e) { return &e.func; }$/;"	f
getFunctionType	$C2_ROOT/ast/qualtype.c2	/^public fn FunctionType* QualType.getFunctionType(const QualType* qt) {$/;"	f
getFunctionTypeOrNil	$C2_ROOT/ast/qualtype.c2	/^public fn FunctionType* QualType.getFunctionTypeOrNil(const QualType* qt) {$/;"	f
getFunctions	$C2_ROOT/ast/enum_type_decl.c2	/^public fn const FunctionDecl** EnumTypeDecl.getFunctions(const EnumTypeDecl* d) {$/;"	f
getGenIdx	$C2_ROOT/ast/decl.c2	/^public fn u32 Decl.getGenIdx(const Decl* d) {$/;"	f
getGlobals	$C2_ROOT/ast/utils.c2	/^public fn Globals* getGlobals() { return globals; }$/;"	f
getHinting	$C2_ROOT/libs/sdl2_ttf/sdl_ttf.c2i	/^fn c_int Font.getHinting(const Font* font) @(cname="TTF_GetFontHinting");$/;"	f
getIdentifierKind	$C2_ROOT/analyser/module_analyser_unaryop.c2	/^fn bool Analyser.getIdentifierKind(Analyser* ma, const Expr* e) {$/;"	f
getIdx	$C2_ROOT/ast/ast.c2	/^public fn u32 AST.getIdx(const AST* a) { return a.idx; }$/;"	f
getImplType	$C2_ROOT/ast/enum_type.c2	/^public fn QualType EnumType.getImplType(const EnumType* t) {$/;"	f
getImplType	$C2_ROOT/ast/enum_type_decl.c2	/^public fn QualType EnumTypeDecl.getImplType(const EnumTypeDecl* d) {$/;"	f
getImportNameIdx	$C2_ROOT/ast/import_decl.c2	/^public fn u32 ImportDecl.getImportNameIdx(const ImportDecl* d) {$/;"	f
getImports	$C2_ROOT/ast/ast.c2	/^public fn const ImportDeclList* AST.getImports(const AST* a) { return &a.imports; }$/;"	f
getIndex	$C2_ROOT/ast/array_subscript_expr.c2	/^public fn Expr* ArraySubscriptExpr.getIndex(const ArraySubscriptExpr* e) { return e.idx; }$/;"	f
getIndex	$C2_ROOT/ast/enum_constant_decl.c2	/^public fn u32 EnumConstantDecl.getIndex(const EnumConstantDecl* d) @(unused) {$/;"	f
getIndex	$C2_ROOT/ast/qualtype.c2	/^public fn u32 QualType.getIndex(QualType* qt) {$/;"	f
getIndex	$C2_ROOT/ast/type.c2	/^fn u32 Type.getIndex(const Type* t) { return t.ptr_pool_idx; }$/;"	f
getIndex2	$C2_ROOT/ast/array_subscript_expr.c2	/^public fn Expr** ArraySubscriptExpr.getIndex2(ArraySubscriptExpr* e) { return &e.idx; }$/;"	f
getInit	$C2_ROOT/ast/array_designated_init_expr.c2	/^public fn Expr* ArrayDesignatedInitExpr.getInit(const ArrayDesignatedInitExpr* e) {$/;"	f
getInit	$C2_ROOT/ast/enum_constant_decl.c2	/^public fn Expr* EnumConstantDecl.getInit(const EnumConstantDecl* d) {$/;"	f
getInit	$C2_ROOT/ast/field_designated_init_expr.c2	/^public fn Expr* FieldDesignatedInitExpr.getInit(const FieldDesignatedInitExpr* e) {$/;"	f
getInit	$C2_ROOT/ast/for_stmt.c2	/^public fn Stmt* ForStmt.getInit(const ForStmt* s) { return s.init; }$/;"	f
getInit	$C2_ROOT/ast/var_decl.c2	/^public fn Expr* VarDecl.getInit(const VarDecl* d) {$/;"	f
getInit2	$C2_ROOT/ast/array_designated_init_expr.c2	/^public fn Expr** ArrayDesignatedInitExpr.getInit2(ArrayDesignatedInitExpr* e) {$/;"	f
getInit2	$C2_ROOT/ast/enum_constant_decl.c2	/^public fn Expr** EnumConstantDecl.getInit2(EnumConstantDecl* d) {$/;"	f
getInit2	$C2_ROOT/ast/field_designated_init_expr.c2	/^public fn Expr** FieldDesignatedInitExpr.getInit2(FieldDesignatedInitExpr* e) {$/;"	f
getInit2	$C2_ROOT/ast/for_stmt.c2	/^public fn Stmt** ForStmt.getInit2(ForStmt* s) { return s.init ? &s.init : nil; }$/;"	f
getInit2	$C2_ROOT/ast/var_decl.c2	/^public fn Expr** VarDecl.getInit2(VarDecl* d) {$/;"	f
getInitChecker	$C2_ROOT/analyser/module_analyser.c2	/^fn init_checker.Checker* Analyser.getInitChecker(Analyser* ma) {$/;"	f
getInner	$C2_ROOT/ast/assert_stmt.c2	/^public fn Expr* AssertStmt.getInner(const AssertStmt* s) { return s.inner; }$/;"	f
getInner	$C2_ROOT/ast/builtin_expr.c2	/^public fn Expr* BuiltinExpr.getInner(const BuiltinExpr* e) { return e.inner; }$/;"	f
getInner	$C2_ROOT/ast/explicit_cast_expr.c2	/^public fn Expr* ExplicitCastExpr.getInner(const ExplicitCastExpr* e) { return e.inner; }$/;"	f
getInner	$C2_ROOT/ast/implicit_cast_expr.c2	/^public fn Expr* ImplicitCastExpr.getInner(const ImplicitCastExpr* e) { return e.inner; }$/;"	f
getInner	$C2_ROOT/ast/paren_expr.c2	/^public fn Expr* ParenExpr.getInner(const ParenExpr* e) { return e.inner; }$/;"	f
getInner	$C2_ROOT/ast/pointer_type.c2	/^public fn QualType PointerType.getInner(const PointerType* t) {$/;"	f
getInner	$C2_ROOT/ast/unary_operator.c2	/^public fn Expr* UnaryOperator.getInner(const UnaryOperator* e) { return e.inner; }$/;"	f
getInner2	$C2_ROOT/ast/assert_stmt.c2	/^public fn Expr** AssertStmt.getInner2(AssertStmt* s) { return &s.inner; }$/;"	f
getInner2	$C2_ROOT/ast/explicit_cast_expr.c2	/^public fn Expr** ExplicitCastExpr.getInner2(ExplicitCastExpr* e) { return &e.inner; }$/;"	f
getInner2	$C2_ROOT/ast/paren_expr.c2	/^public fn Expr** ParenExpr.getInner2(ParenExpr* e) { return &e.inner; }$/;"	f
getInner2	$C2_ROOT/ast/unary_operator.c2	/^public fn Expr** UnaryOperator.getInner2(UnaryOperator* e) { return &e.inner; }$/;"	f
getInnerExprAddressOf	$C2_ROOT/analyser/module_analyser_unaryop.c2	/^fn IdentifierKind getInnerExprAddressOf(const Expr* e) {$/;"	f
getInstance	$C2_ROOT/ast/module.c2	/^public fn ast.FunctionDecl* Module.getInstance(const Module* m, ast.FunctionDecl* fd, u32 idx) {$/;"	f
getInstanceASTIdx	$C2_ROOT/ast/call_expr.c2	/^public fn u16 CallExpr.getInstanceASTIdx(const CallExpr* e) {$/;"	f
getInstanceModule	$C2_ROOT/ast/function_decl.c2	/^public fn Module* FunctionDecl.getInstanceModule(FunctionDecl* d) {$/;"	f
getInstr	$C2_ROOT/ir/inserter.c2	/^public fn const Instr* Inserter.getInstr(const Inserter* ins) {$/;"	f
getInstrCount	$C2_ROOT/ir/inserter.c2	/^public fn u32 Inserter.getInstrCount(Inserter* ins) {$/;"	f
getInstrIdx	$C2_ROOT/ir/inserter.c2	/^public fn u32 Inserter.getInstrIdx(const Inserter* ins) {$/;"	f
getInstructions	$C2_ROOT/ir/block.c2	/^public fn Index Block.getInstructions(const Block* b) {$/;"	f
getIter	$C2_ROOT/tools/tester/issues.c2	/^public fn Iter Issues.getIter(const Issues* i) {$/;"	f
getKeyBoardState	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn const u8* getKeyBoardState(c_int* numkeys) @(cname="SDL_GetKeyboardState");$/;"	f
getKeyFromScancode	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn Keycode getKeyFromScancode(Scancode scancode) @(cname="SDL_GetKeyFromScancode");$/;"	f
getKeyName	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn const char* getKeyName(Keycode key) @(cname="SDL_GetKeyName");$/;"	f
getKeycodeFromName	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn Keycode getKeycodeFromName(const char* name) @(cname="SDL_GetKeyFromName");$/;"	f
getKind	$C2_ROOT/ast/builtin_expr.c2	/^public fn BuiltinExprKind BuiltinExpr.getKind(const BuiltinExpr* e) {$/;"	f
getKind	$C2_ROOT/ast/builtin_type.c2	/^public fn BuiltinKind BuiltinType.getKind(const BuiltinType* b) {$/;"	f
getKind	$C2_ROOT/ast/decl.c2	/^public fn DeclKind Decl.getKind(const Decl* d) { return (DeclKind)d.declBits.kind; }$/;"	f
getKind	$C2_ROOT/ast/expr.c2	/^public fn ExprKind Expr.getKind(const Expr* e) { return (ExprKind)e.base.exprBits.kind; }$/;"	f
getKind	$C2_ROOT/ast/identifier_expr.c2	/^public fn IdentifierKind IdentifierExpr.getKind(const IdentifierExpr* e) {$/;"	f
getKind	$C2_ROOT/ast/implicit_cast_expr.c2	/^public fn ImplicitCastKind ImplicitCastExpr.getKind(const ImplicitCastExpr* e) {$/;"	f
getKind	$C2_ROOT/ast/member_expr.c2	/^public fn IdentifierKind MemberExpr.getKind(const MemberExpr* e) {$/;"	f
getKind	$C2_ROOT/ast/qualtype.c2	/^public fn TypeKind QualType.getKind(QualType* qt) {$/;"	f
getKind	$C2_ROOT/ast/stmt.c2	/^public fn StmtKind Stmt.getKind(const Stmt* s) { return (StmtKind)s.stmtBits.kind; }$/;"	f
getKind	$C2_ROOT/ast/type.c2	/^public fn TypeKind Type.getKind(const Type* t) { return t.typeBits.kind; }$/;"	f
getKind	$C2_ROOT/ast/type_ref.c2	/^public fn TypeRefKind TypeRef.getKind(const TypeRef* r) {$/;"	f
getKind	$C2_ROOT/ast/var_decl.c2	/^public fn VarDeclKind VarDecl.getKind(const VarDecl* d) {$/;"	f
getKind	$C2_ROOT/common/build_target.c2	/^public fn Kind Target.getKind(const Target* t) { return t.kind; }$/;"	f
getKind	$C2_ROOT/common/component.c2	/^public fn Kind Component.getKind(const Component* c) {$/;"	f
getKind	$C2_ROOT/ir/block.c2	/^fn BlockKind Block.getKind(const Block* b) {$/;"	f
getKind	$C2_ROOT/ir/init_value.c2	/^fn InitValueKind InitValue.getKind(const InitValue* r) {$/;"	f
getKind	$C2_ROOT/ir/instr.c2	/^public fn InstrKind Instr.getKind(const Instr* i) {$/;"	f
getKind	$C2_ROOT/ir/ref.c2	/^public fn RefKind Ref.getKind(const Ref* r) {$/;"	f
getKindName	$C2_ROOT/ast/decl.c2	/^public fn const char* Decl.getKindName(const Decl* d) {$/;"	f
getKindName	$C2_ROOT/ir/block.c2	/^public fn const char* Block.getKindName(const Block* b) {$/;"	f
getKindName	$C2_ROOT/ir/init_value.c2	/^fn const char* InitValue.getKindName(const InitValue* r) {$/;"	f
getKindName	$C2_ROOT/ir/instr.c2	/^public fn const char* Instr.getKindName(const Instr* i) {$/;"	f
getKindName	$C2_ROOT/ir/ref.c2	/^public fn const char* Ref.getKindName(const Ref* r) {$/;"	f
getKindStr	$C2_ROOT/common/manifest_writer.c2	/^fn const char* getKindStr(const component.Component* c) {$/;"	f
getLHS	$C2_ROOT/ast/binary_operator.c2	/^public fn Expr* BinaryOperator.getLHS(const BinaryOperator* e) { return e.lhs; }$/;"	f
getLHS	$C2_ROOT/ast/bitoffset_expr.c2	/^public fn Expr* BitOffsetExpr.getLHS(const BitOffsetExpr* e) { return e.lhs; }$/;"	f
getLHS	$C2_ROOT/ast/conditional_operator.c2	/^public fn Expr* ConditionalOperator.getLHS(const ConditionalOperator* e) {$/;"	f
getLHS	$C2_ROOT/ast/range_expr.c2	/^public fn Expr* RangeExpr.getLHS(const RangeExpr* e) { return e.lhs; }$/;"	f
getLHS2	$C2_ROOT/ast/binary_operator.c2	/^public fn Expr** BinaryOperator.getLHS2(BinaryOperator* e) { return &e.lhs; }$/;"	f
getLHS2	$C2_ROOT/ast/bitoffset_expr.c2	/^public fn Expr** BitOffsetExpr.getLHS2(BitOffsetExpr* e) { return &e.lhs; }$/;"	f
getLHS2	$C2_ROOT/ast/conditional_operator.c2	/^public fn Expr** ConditionalOperator.getLHS2(ConditionalOperator* e) {$/;"	f
getLabelBlock	$C2_ROOT/generator/ir/ir_generator.c2	/^fn BlockId Generator.getLabelBlock(Generator* gen, u32 label_idx) {$/;"	f
getLabels	$C2_ROOT/analyser/label_vector.c2	/^public fn const Label* LabelVector.getLabels(const LabelVector* v) {$/;"	f
getLast	$C2_ROOT/common/component.c2	/^public fn Component* List.getLast(const List* l) {$/;"	f
getLast	$C2_ROOT/ir/block_list.c2	/^public fn Block* BlockList.getLast(const BlockList* l) {$/;"	f
getLastBlock	$C2_ROOT/ir/inserter.c2	/^public fn Block* Inserter.getLastBlock(const Inserter* ins) {$/;"	f
getLastInstr	$C2_ROOT/ir/inserter.c2	/^public fn Instr* Inserter.getLastInstr(Inserter* ins) {$/;"	f
getLastLoc	$C2_ROOT/ast/member_expr.c2	/^public fn SrcLoc MemberExpr.getLastLoc(const MemberExpr* e) {$/;"	f
getLastMemberName	$C2_ROOT/ast/member_expr.c2	/^public fn const char* MemberExpr.getLastMemberName(const MemberExpr* e) {$/;"	f
getLayout	$C2_ROOT/ast/struct_type_decl.c2	/^public fn StructLayout* StructTypeDecl.getLayout(const StructTypeDecl* d) {$/;"	f
getLdFlags	$C2_ROOT/common/build_file.c2	/^public fn const char* Info.getLdFlags(const Info* info) {$/;"	f
getLdFlags2	$C2_ROOT/common/build_file.c2	/^public fn const char* Info.getLdFlags2(const Info* info) {$/;"	f
getLhs	$C2_ROOT/ast/static_assert.c2	/^public fn Expr* StaticAssert.getLhs(const StaticAssert* d) {$/;"	f
getLibDirs	$C2_ROOT/common/build_file.c2	/^public fn const string_list.List* Info.getLibDirs(const Info* info) {$/;"	f
getLine	$C2_ROOT/tools/tester/line_db.c2	/^public fn const char* Db.getLine(const Db* db, u32 idx) {$/;"	f
getLineNr	$C2_ROOT/tools/tester/issues.c2	/^public fn i32 Iter.getLineNr(const Iter* iter) {$/;"	f
getLinkName	$C2_ROOT/common/component.c2	/^public fn const char* Component.getLinkName(const Component* c) {$/;"	f
getLinkerScript	$C2_ROOT/common/build_file.c2	/^public fn const char* Info.getLinkerScript(const Info* info) {$/;"	f
getList	$C2_ROOT/ir/interference_graph.c2	/^fn Iter InterferenceGraph.getList(const InterferenceGraph* g, u16 var_idx) {$/;"	f
getList	$C2_ROOT/ir/live_map.c2	/^public fn Iter Map.getList(const Map* g, u16 var_idx) {$/;"	f
getList	$C2_ROOT/ir/slot_writes_map.c2	/^public fn Iter Map.getList(const Map* m, u16 blk_id) {$/;"	f
getLoc	$C2_ROOT/ast/array_value.c2	/^public fn SrcLoc ArrayValue.getLoc(const ArrayValue* d) {$/;"	f
getLoc	$C2_ROOT/ast/ast.c2	/^public fn SrcLoc AST.getLoc(const AST* a) {$/;"	f
getLoc	$C2_ROOT/ast/decl.c2	/^public fn SrcLoc Decl.getLoc(const Decl* d) { return d.loc; }$/;"	f
getLoc	$C2_ROOT/ast/expr.c2	/^public fn SrcLoc Expr.getLoc(const Expr* e) { return e.base.loc; }$/;"	f
getLoc	$C2_ROOT/ast/import_decl.c2	/^public fn SrcLoc ImportDecl.getLoc(const ImportDecl* d) {$/;"	f
getLoc	$C2_ROOT/ast/member_expr.c2	/^public fn SrcLoc MemberExpr.getLoc(const MemberExpr* e, u32 ref_idx) {$/;"	f
getLoc	$C2_ROOT/ast/stmt.c2	/^public fn SrcLoc Stmt.getLoc(const Stmt* s) {$/;"	f
getLoc	$C2_ROOT/ast/switch_case.c2	/^public fn SrcLoc SwitchCase.getLoc(const SwitchCase* s) { return s.loc; }$/;"	f
getLoc	$C2_ROOT/ast/type_ref.c2	/^public fn SrcLoc TypeRef.getLoc(const TypeRef* r) {$/;"	f
getMaxSizeNoArray	$C2_ROOT/ast/type_ref.c2	/^public fn u32 TypeRef.getMaxSizeNoArray() {$/;"	f
getMemberInfo	$C2_ROOT/ast/field_designated_init_expr.c2	/^public fn const FieldInitField* FieldDesignatedInitExpr.getMemberInfo(const FieldDesignatedInitE/;"	f
getMembers	$C2_ROOT/ast/struct_type_decl.c2	/^public fn Decl** StructTypeDecl.getMembers(StructTypeDecl* d) {$/;"	f
getMessage	$C2_ROOT/common/yaml/yaml_parser.c2	/^public fn const char* Parser.getMessage(const Parser* p) {$/;"	f
getMinusType	$C2_ROOT/analyser/module_analyser_unaryop.c2	/^fn QualType getMinusType(QualType qt) {$/;"	f
getMod	$C2_ROOT/ast/ast.c2	/^public fn Module* AST.getMod(const AST* a) @(unused) { return a.mod; }$/;"	f
getModState	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn Keymod getModState() @(cname="SDL_GetModState");$/;"	f
getModule	$C2_ROOT/ast/decl.c2	/^public fn Module* Decl.getModule(const Decl* d) {$/;"	f
getModule	$C2_ROOT/ast/module_type.c2	/^public fn Module* ModuleType.getModule(const ModuleType* t) {$/;"	f
getModuleName	$C2_ROOT/ast/decl.c2	/^public fn const char* Decl.getModuleName(const Decl* d) {$/;"	f
getModules	$C2_ROOT/common/component.c2	/^public fn module_list.List* Component.getModules(Component* c) { return &c.mods; }$/;"	f
getMouseCursor	$C2_ROOT/libs/sokol/sokol_app.c2i	/^fn MouseCursor getMouseCursor() @(cname="sapp_get_mouse_cursor");$/;"	f
getMouseCursor	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^fn MouseCursor getMouseCursor() @(cname="sapp_get_mouse_cursor");$/;"	f
getMsg	$C2_ROOT/tools/tester/issues.c2	/^public fn const char* Iter.getMsg(const Iter* iter) {$/;"	f
getName	$C2_ROOT/ast/ast.c2	/^public fn const char* AST.getName(const AST* a) {$/;"	f
getName	$C2_ROOT/ast/decl.c2	/^public fn const char* Decl.getName(const Decl* d) {$/;"	f
getName	$C2_ROOT/ast/enum_type.c2	/^public fn const char* EnumType.getName(const EnumType* t) {$/;"	f
getName	$C2_ROOT/ast/goto_stmt.c2	/^public fn const char* GotoStmt.getName(const GotoStmt* g) {$/;"	f
getName	$C2_ROOT/ast/identifier_expr.c2	/^public fn const char* IdentifierExpr.getName(const IdentifierExpr* e) {$/;"	f
getName	$C2_ROOT/ast/label_stmt.c2	/^public fn const char* LabelStmt.getName(const LabelStmt* s) {$/;"	f
getName	$C2_ROOT/ast/member_expr.c2	/^fn const char* MemberExpr.getName(const MemberExpr* e, u32 ref_idx) {$/;"	f
getName	$C2_ROOT/ast/module.c2	/^public fn const char* Module.getName(const Module* m) { return idx2name(m.name_idx); }$/;"	f
getName	$C2_ROOT/ast/type_ref.c2	/^public fn const char* Ref.getName(const Ref* r) {$/;"	f
getName	$C2_ROOT/ast/var_decl.c2	/^public fn const char* VarDecl.getName(const VarDecl* d) {$/;"	f
getName	$C2_ROOT/common/component.c2	/^public fn const char* Component.getName(const Component* c) {$/;"	f
getName	$C2_ROOT/common/yaml/yaml_iterator.c2	/^public fn const char* Iter.getName(const Iter* iter) {$/;"	f
getName	$C2_ROOT/generator/c2i/c2i_generator_decl.c2	/^    out.print("type %s fn ", d.getName());$/;"	f
getNameIdx	$C2_ROOT/ast/array_value.c2	/^public fn u32 ArrayValue.getNameIdx(const ArrayValue* d) {$/;"	f
getNameIdx	$C2_ROOT/ast/ast.c2	/^public fn u32 AST.getNameIdx(const AST* a) {$/;"	f
getNameIdx	$C2_ROOT/ast/decl.c2	/^public fn u32 Decl.getNameIdx(const Decl* d) {$/;"	f
getNameIdx	$C2_ROOT/ast/goto_stmt.c2	/^public fn u32 GotoStmt.getNameIdx(const GotoStmt* g) {$/;"	f
getNameIdx	$C2_ROOT/ast/identifier_expr.c2	/^public fn u32 IdentifierExpr.getNameIdx(const IdentifierExpr* e) {$/;"	f
getNameIdx	$C2_ROOT/ast/label_stmt.c2	/^public fn u32 LabelStmt.getNameIdx(const LabelStmt* s) {$/;"	f
getNameIdx	$C2_ROOT/ast/member_expr.c2	/^public fn u32 MemberExpr.getNameIdx(const MemberExpr* e, u32 ref_idx) {$/;"	f
getNameIdx	$C2_ROOT/ast/module.c2	/^public fn u32 Module.getNameIdx(const Module* m) { return m.name_idx; }$/;"	f
getNameIdx	$C2_ROOT/common/build_target.c2	/^public fn u32 Target.getNameIdx(const Target* t) { return t.name_idx; }$/;"	f
getNameIdx	$C2_ROOT/common/component.c2	/^public fn u32 Component.getNameIdx(const Component* c) {$/;"	f
getNames	$C2_ROOT/ast/asm_stmt.c2	/^public fn u32* AsmStmt.getNames(const AsmStmt* s) {$/;"	f
getNative	$C2_ROOT/common/target_info.c2	/^public fn void Info.getNative(Info* info) {$/;"	f
getNativeKind	$C2_ROOT/ast/utils.c2	/^public fn BuiltinKind getNativeKind() {$/;"	f
getNextBlockId	$C2_ROOT/ir/inserter.c2	/^public fn BlockId Inserter.getNextBlockId(const Inserter* ins) {$/;"	f
getNoBuild	$C2_ROOT/common/build_target.c2	/^public fn bool Target.getNoBuild(const Target* t) {$/;"	f
getNoLibC	$C2_ROOT/common/build_target.c2	/^public fn bool Target.getNoLibC(const Target* t) {$/;"	f
getNodeChildIter	$C2_ROOT/common/yaml/yaml_iterator.c2	/^public fn Iter Parser.getNodeChildIter(const Parser* p, const Node* n) {$/;"	f
getNumArgs	$C2_ROOT/ast/call_expr.c2	/^public fn u32 CallExpr.getNumArgs(const CallExpr* e) {$/;"	f
getNumArrays	$C2_ROOT/ast/type_ref.c2	/^public fn u32 TypeRefHolder.getNumArrays(const TypeRefHolder* h) {$/;"	f
getNumAutoArgs	$C2_ROOT/ast/function_decl.c2	/^public fn u32 FunctionDecl.getNumAutoArgs(const FunctionDecl* d) {$/;"	f
getNumCases	$C2_ROOT/ast/switch_stmt.c2	/^public fn u32 SwitchStmt.getNumCases(const SwitchStmt* s) {$/;"	f
getNumClobbers	$C2_ROOT/ast/asm_stmt.c2	/^public fn u32 AsmStmt.getNumClobbers(const AsmStmt* s) {$/;"	f
getNumConds	$C2_ROOT/ast/switch_case.c2	/^public fn u32 SwitchCase.getNumConds(const SwitchCase* s) { return s.bits.num_conds; }$/;"	f
getNumConstants	$C2_ROOT/ast/enum_type_decl.c2	/^public fn u32 EnumTypeDecl.getNumConstants(const EnumTypeDecl* d) {$/;"	f
getNumConstraints	$C2_ROOT/ast/asm_stmt.c2	/^public fn u32 AsmStmt.getNumConstraints(const AsmStmt* s) @(unused) {$/;"	f
getNumDroppedFiles	$C2_ROOT/libs/sokol/sokol_app.c2i	/^fn c_int getNumDroppedFiles() @(cname="sapp_get_num_dropped_files");$/;"	f
getNumDroppedFiles	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^fn c_int getNumDroppedFiles() @(cname="sapp_get_num_dropped_files");$/;"	f
getNumErrors	$C2_ROOT/common/diagnostics.c2	/^public fn u32 Diags.getNumErrors(const Diags* diags) { return diags.num_errors; }$/;"	f
getNumExprs	$C2_ROOT/ast/asm_stmt.c2	/^public fn u32 AsmStmt.getNumExprs(const AsmStmt* s) {$/;"	f
getNumFiles	$C2_ROOT/common/source_mgr.c2	/^public fn u32 SourceMgr.getNumFiles(const SourceMgr* sm) @(unused) {$/;"	f
getNumFunctions	$C2_ROOT/ast/enum_type_decl.c2	/^public fn u32 EnumTypeDecl.getNumFunctions(const EnumTypeDecl* d) {$/;"	f
getNumInputs	$C2_ROOT/ast/asm_stmt.c2	/^public fn u32 AsmStmt.getNumInputs(const AsmStmt* s) {$/;"	f
getNumMembers	$C2_ROOT/ast/struct_type_decl.c2	/^public fn u32 StructTypeDecl.getNumMembers(const StructTypeDecl* d) {$/;"	f
getNumOutputs	$C2_ROOT/ast/asm_stmt.c2	/^public fn u32 AsmStmt.getNumOutputs(const AsmStmt* s) {$/;"	f
getNumParams	$C2_ROOT/ast/function_decl.c2	/^public fn u32 FunctionDecl.getNumParams(const FunctionDecl* d) {$/;"	f
getNumPlugins	$C2_ROOT/common/build_file.c2	/^public fn u32 Info.getNumPlugins(const Info* info) {$/;"	f
getNumPointers	$C2_ROOT/ast/type_ref.c2	/^public fn u32 TypeRefHolder.getNumPointers(const TypeRefHolder* h) {$/;"	f
getNumRefs	$C2_ROOT/ast/member_expr.c2	/^public fn u32 MemberExpr.getNumRefs(const MemberExpr* e) {$/;"	f
getNumStmts	$C2_ROOT/ast/switch_case.c2	/^public fn u32 SwitchCase.getNumStmts(const SwitchCase* s) { return s.bits.num_stmts; }$/;"	f
getNumStructFunctions	$C2_ROOT/ast/struct_type_decl.c2	/^fn u32 StructTypeDecl.getNumStructFunctions(const StructTypeDecl* d) {$/;"	f
getNumValues	$C2_ROOT/ast/init_list_expr.c2	/^public fn u32 InitListExpr.getNumValues(const InitListExpr* e) {$/;"	f
getOffset	$C2_ROOT/ast/var_decl.c2	/^fn u32 VarDecl.getOffset(const VarDecl* d) {$/;"	f
getOffsetOfMember	$C2_ROOT/ast/builtin_expr.c2	/^public fn Expr* BuiltinExpr.getOffsetOfMember(const BuiltinExpr* b) {$/;"	f
getOpcode	$C2_ROOT/ast/binary_operator.c2	/^public fn BinaryOpcode BinaryOperator.getOpcode(const BinaryOperator* e) {$/;"	f
getOpcode	$C2_ROOT/ast/unary_operator.c2	/^public fn UnaryOpcode UnaryOperator.getOpcode(const UnaryOperator* e) {$/;"	f
getOpcodeStr	$C2_ROOT/ast/binary_operator.c2	/^public fn const char* BinaryOperator.getOpcodeStr(const BinaryOperator* e) {$/;"	f
getOpcodeStr	$C2_ROOT/ast/unary_operator.c2	/^public fn const char* UnaryOperator.getOpcodeStr(const UnaryOperator* e) {$/;"	f
getOrAddModule	$C2_ROOT/common/component.c2	/^public fn ast.Module* Component.getOrAddModule(Component* c, u32 name_idx) {$/;"	f
getOutline	$C2_ROOT/libs/sdl2_ttf/sdl_ttf.c2i	/^fn c_int Font.getOutline(const Font* font) @(cname="TTF_GetFontOutline");$/;"	f
getOutputDir	$C2_ROOT/common/build_file.c2	/^public fn const char* Info.getOutputDir(const Info* info) {$/;"	f
getParams	$C2_ROOT/ast/function_decl.c2	/^public fn VarDecl** FunctionDecl.getParams(const FunctionDecl* d) {$/;"	f
getPath	$C2_ROOT/common/component.c2	/^public fn const char* Component.getPath(const Component* c) {$/;"	f
getPlugin	$C2_ROOT/common/build_file.c2	/^public fn const Plugin* Info.getPlugin(const Info* info, u32 idx) {$/;"	f
getPluginDirs	$C2_ROOT/common/build_file.c2	/^public fn const string_list.List* Info.getPluginDirs(const Info* info) {$/;"	f
getPlugins	$C2_ROOT/common/build_target.c2	/^public fn const PluginList* Target.getPlugins(const Target* t) { return &t.plugins; }$/;"	f
getPlugins	$C2_ROOT/compiler/c2recipe.c2	/^public fn const build_target.PluginList* Recipe.getPlugins(const Recipe* r) {$/;"	f
getPointer	$C2_ROOT/ast/pointer_pool.c2	/^fn Type* PointerPool.getPointer(PointerPool* p, QualType qt) {$/;"	f
getPointerAfter	$C2_ROOT/ast/type_ref.c2	/^fn void* TypeRef.getPointerAfter(const TypeRef* r) {$/;"	f
getPointerBaseType	$C2_ROOT/ast/qualtype.c2	/^public fn QualType QualType.getPointerBaseType(const QualType* qt) {$/;"	f
getPointerFromArray	$C2_ROOT/analyser/module_analyser_expr.c2	/^fn QualType getPointerFromArray(ast_builder.Builder* builder, QualType q) {$/;"	f
getPointerType	$C2_ROOT/ast/qualtype.c2	/^public fn PointerType* QualType.getPointerType(const QualType* qt) {$/;"	f
getPointerType	$C2_ROOT/ast/utils.c2	/^public fn Type* getPointerType(QualType inner) {$/;"	f
getPointerTypeOrNil	$C2_ROOT/ast/qualtype.c2	/^public fn PointerType* QualType.getPointerTypeOrNil(const QualType* qt) {$/;"	f
getPrefix	$C2_ROOT/ast/function_decl.c2	/^public fn Ref* FunctionDecl.getPrefix(FunctionDecl* d) {$/;"	f
getPrefix	$C2_ROOT/ast/type_ref.c2	/^public fn const Ref* TypeRef.getPrefix(const TypeRef* r) {$/;"	f
getPrefixName	$C2_ROOT/ast/function_decl.c2	/^public fn const char* FunctionDecl.getPrefixName(const FunctionDecl* d) {$/;"	f
getPrefixNameIdx	$C2_ROOT/ast/function_decl.c2	/^public fn u32 FunctionDecl.getPrefixNameIdx(const FunctionDecl* d) {$/;"	f
getPrefixedName	$C2_ROOT/plugins/deps_generator_utils.c2	/^public fn const char* getPrefixedName(const Decl* d) {$/;"	f
getPrevLastDecl	$C2_ROOT/ast/member_expr.c2	/^public fn Decl* MemberExpr.getPrevLastDecl(const MemberExpr* e) {$/;"	f
getPrintfFormat	$C2_ROOT/ast/call_expr.c2	/^public fn u32 CallExpr.getPrintfFormat(const CallExpr* e) {$/;"	f
getPtr	$C2_ROOT/ast/ast.c2	/^public fn void* AST.getPtr(const AST* a) { return a.ptr; }$/;"	f
getQuals	$C2_ROOT/ast/qualtype.c2	/^public fn u32 QualType.getQuals(const QualType* qt) {$/;"	f
getRHS	$C2_ROOT/ast/binary_operator.c2	/^public fn Expr* BinaryOperator.getRHS(const BinaryOperator* e) { return e.rhs; }$/;"	f
getRHS	$C2_ROOT/ast/bitoffset_expr.c2	/^public fn Expr* BitOffsetExpr.getRHS(const BitOffsetExpr* e) { return e.rhs; }$/;"	f
getRHS	$C2_ROOT/ast/conditional_operator.c2	/^public fn Expr* ConditionalOperator.getRHS(const ConditionalOperator* e) {$/;"	f
getRHS	$C2_ROOT/ast/range_expr.c2	/^public fn Expr* RangeExpr.getRHS(const RangeExpr* e) { return e.rhs; }$/;"	f
getRHS2	$C2_ROOT/ast/binary_operator.c2	/^public fn Expr** BinaryOperator.getRHS2(BinaryOperator* e) { return &e.rhs; }$/;"	f
getRHS2	$C2_ROOT/ast/bitoffset_expr.c2	/^public fn Expr** BitOffsetExpr.getRHS2(BitOffsetExpr* e) { return &e.rhs; }$/;"	f
getRHS2	$C2_ROOT/ast/conditional_operator.c2	/^public fn Expr** ConditionalOperator.getRHS2(ConditionalOperator* e) {$/;"	f
getRType	$C2_ROOT/ast/function_decl.c2	/^public fn QualType FunctionDecl.getRType(const FunctionDecl* d) {$/;"	f
getRadix	$C2_ROOT/parser/token.c2	/^public fn Radix Token.getRadix(const Token* tok) {$/;"	f
getRange	$C2_ROOT/ast/expr.c2	/^public fn SrcRange Expr.getRange(const Expr* e) {$/;"	f
getRange	$C2_ROOT/ast/member_expr.c2	/^public fn SrcRange MemberExpr.getRange(const MemberExpr* e, u32 ref_idx) {$/;"	f
getRef	$C2_ROOT/ast/identifier_expr.c2	/^public fn Ref IdentifierExpr.getRef(const IdentifierExpr* e) @(unused) {$/;"	f
getRef	$C2_ROOT/ast/member_expr.c2	/^public fn Ref MemberExpr.getRef(const MemberExpr* e, u32 ref_idx) {$/;"	f
getRegister	$C2_ROOT/ir/instr.c2	/^public fn u32 Instr.getRegister(const Instr* i) {$/;"	f
getRegs	$C2_ROOT/ir/interference_graph.c2	/^public fn const u8* InterferenceGraph.getRegs(const InterferenceGraph* g) {$/;"	f
getRenderer	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn Renderer* Window.getRenderer(Window* window) @(cname="SDL_GetRenderer");$/;"	f
getReturnType	$C2_ROOT/ir/function_info.c2	/^public fn Type FunctionInfo.getReturnType(const FunctionInfo* fi) {$/;"	f
getReturnTypeRef	$C2_ROOT/ast/function_decl.c2	/^public fn TypeRef* FunctionDecl.getReturnTypeRef(FunctionDecl* d) {$/;"	f
getRev	$C2_ROOT/ir/rev_list.c2	/^public fn u8 RevList.getRev(const RevList* r, u32 idx) {$/;"	f
getRhs	$C2_ROOT/ast/static_assert.c2	/^public fn Expr* StaticAssert.getRhs(const StaticAssert* d) {$/;"	f
getRoot	$C2_ROOT/common/yaml/yaml_iterator.c2	/^public fn const Node* Parser.getRoot(const Parser* p) {$/;"	f
getScalarValue	$C2_ROOT/common/yaml/yaml_iterator.c2	/^public fn const char* Parser.getScalarValue(const Parser* p, const char* path) {$/;"	f
getScaleMode	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn c_int Texture.getScaleMode(Texture* texture, ScaleMode* mode) @(cname="SDL_GetTextureScaleMod/;"	f
getScanCodeFromKey	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn Scancode getScanCodeFromKey(Keycode key) @(cname="SDL_GetScancodeFromKey");$/;"	f
getScancodeFromName	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn Scancode getScancodeFromName(const char* name) @(cname="SDL_GetScancodeFromName");$/;"	f
getScancodeName	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn const char* getScancodeName(Scancode scancode) @(cname="SDL_GetScancodeName");$/;"	f
getSection	$C2_ROOT/ast/decl.c2	/^public fn const char* Decl.getSection(const Decl* d) {$/;"	f
getSize	$C2_ROOT/ast/array_type.c2	/^public fn u32 ArrayType.getSize(const ArrayType* t) { return t.size; }$/;"	f
getSize	$C2_ROOT/ast/qualtype.c2	/^public fn u32 QualType.getSize(QualType* qt, bool deref_ptr) {$/;"	f
getSize	$C2_ROOT/ast/string_literal.c2	/^public fn u32 StringLiteral.getSize(const StringLiteral* e) {$/;"	f
getSize	$C2_ROOT/ast/struct_type_decl.c2	/^public fn u32 StructTypeDecl.getSize(const StructTypeDecl* d) {$/;"	f
getSize	$C2_ROOT/ast/type.c2	/^fn u32 Type.getSize(const Type* t, bool deref_ptr) {$/;"	f
getSlotName	$C2_ROOT/ir/context.c2	/^fn u32 getSlotName(u32 slot) {$/;"	f
getSpecifier	$C2_ROOT/analyser_utils/printf_utils.c2	/^fn Specifier getSpecifier(const char* format, u32* len, i32 *pstars, char* c) {$/;"	f
getStartLoc	$C2_ROOT/ast/array_subscript_expr.c2	/^fn SrcLoc ArraySubscriptExpr.getStartLoc(const ArraySubscriptExpr* e) {$/;"	f
getStartLoc	$C2_ROOT/ast/binary_operator.c2	/^fn SrcLoc BinaryOperator.getStartLoc(const BinaryOperator* e) {$/;"	f
getStartLoc	$C2_ROOT/ast/bitoffset_expr.c2	/^fn SrcLoc BitOffsetExpr.getStartLoc(const BitOffsetExpr* e) {$/;"	f
getStartLoc	$C2_ROOT/ast/call_expr.c2	/^public fn SrcLoc CallExpr.getStartLoc(const CallExpr* e) {$/;"	f
getStartLoc	$C2_ROOT/ast/conditional_operator.c2	/^fn SrcLoc ConditionalOperator.getStartLoc(const ConditionalOperator* e) {$/;"	f
getStartLoc	$C2_ROOT/ast/expr.c2	/^public fn SrcLoc Expr.getStartLoc(const Expr* e) {$/;"	f
getStartLoc	$C2_ROOT/ast/implicit_cast_expr.c2	/^fn SrcLoc ImplicitCastExpr.getStartLoc(const ImplicitCastExpr* e) {$/;"	f
getStartLoc	$C2_ROOT/ast/member_expr.c2	/^fn SrcLoc MemberExpr.getStartLoc(const MemberExpr* e) {$/;"	f
getStartLoc	$C2_ROOT/ast/range_expr.c2	/^fn SrcLoc RangeExpr.getStartLoc(const RangeExpr* e) {$/;"	f
getStartLoc	$C2_ROOT/ast/unary_operator.c2	/^fn SrcLoc UnaryOperator.getStartLoc(const UnaryOperator* e) {$/;"	f
getStaticSlot	$C2_ROOT/ir/slot_collector.c2	/^fn StaticSlot* SlotCollector.getStaticSlot(SlotCollector* c, u16 slot) {$/;"	f
getStmt	$C2_ROOT/ast/label_stmt.c2	/^public fn Stmt* LabelStmt.getStmt(const LabelStmt* s) {$/;"	f
getStmt	$C2_ROOT/ast/switch_case.c2	/^public fn Stmt* SwitchCase.getStmt(const SwitchCase* s, u32 n) {$/;"	f
getStmtList	$C2_ROOT/parser/c2_parser.c2	/^fn stmt_list.List* Parser.getStmtList(Parser* p) {$/;"	f
getStmts	$C2_ROOT/ast/compound_stmt.c2	/^public fn Stmt** CompoundStmt.getStmts(CompoundStmt* s) {$/;"	f
getStmts	$C2_ROOT/ast/switch_case.c2	/^public fn Stmt** SwitchCase.getStmts(SwitchCase* s) {$/;"	f
getString	$C2_ROOT/ast/asm_stmt.c2	/^public fn StringLiteral* AsmStmt.getString(const AsmStmt* s) {$/;"	f
getStringType	$C2_ROOT/ast/utils.c2	/^fn QualType getStringType(u32 len) {$/;"	f
getStructFunctions	$C2_ROOT/ast/struct_type_decl.c2	/^fn const FunctionDecl** StructTypeDecl.getStructFunctions(const StructTypeDecl* d) {$/;"	f
getStructMemberType	$C2_ROOT/ast/type_ref.c2	/^public fn const Ref* TypeRef.getStructMemberType(const TypeRef* r) {$/;"	f
getStructType	$C2_ROOT/ast/qualtype.c2	/^public fn StructType* QualType.getStructType(const QualType* qt) {$/;"	f
getStructTypeOrNil	$C2_ROOT/ast/qualtype.c2	/^public fn StructType* QualType.getStructTypeOrNil(const QualType* qt) {$/;"	f
getStyle	$C2_ROOT/libs/sdl2_ttf/sdl_ttf.c2i	/^fn c_int Font.getStyle(const Font* font) @(cname="TTF_GetFontStyle");$/;"	f
getSurface	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn Surface* Window.getSurface(Window* window) @(cname="SDL_GetWindowSurface");$/;"	f
getSymbols	$C2_ROOT/ast/module.c2	/^public fn const SymbolTable* Module.getSymbols(const Module* m) { return &m.symbols; }$/;"	f
getSystemName	$C2_ROOT/common/target_info.c2	/^public fn const char* Info.getSystemName(const Info* info) {$/;"	f
getTarget	$C2_ROOT/common/build_file.c2	/^public fn const char* Info.getTarget(const Info* info) {$/;"	f
getTarget	$C2_ROOT/compiler/c2recipe.c2	/^public fn build_target.Target* Recipe.getTarget(const Recipe* r, u32 idx) {$/;"	f
getTarget	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn Texture* Renderer.getTarget(Renderer* renderer) @(cname="SDL_GetRenderTarget");$/;"	f
getTemplateArg	$C2_ROOT/ast/call_expr.c2	/^public fn TypeRef* CallExpr.getTemplateArg(const CallExpr* e) {$/;"	f
getTemplateIdx	$C2_ROOT/ast/call_expr.c2	/^public fn u32 CallExpr.getTemplateIdx(const CallExpr* e) {$/;"	f
getTemplateInstanceIdx	$C2_ROOT/ast/function_decl.c2	/^public fn u16 FunctionDecl.getTemplateInstanceIdx(const FunctionDecl* d) {$/;"	f
getTemplateLoc	$C2_ROOT/ast/function_decl.c2	/^public fn SrcLoc FunctionDecl.getTemplateLoc(const FunctionDecl* d) {$/;"	f
getTemplateNameIdx	$C2_ROOT/ast/function_decl.c2	/^public fn u32 FunctionDecl.getTemplateNameIdx(const FunctionDecl* d) {$/;"	f
getText	$C2_ROOT/ast/string_literal.c2	/^public fn const char* StringLiteral.getText(const StringLiteral* e) {$/;"	f
getTextIndex	$C2_ROOT/ast/string_literal.c2	/^public fn u32 StringLiteral.getTextIndex(const StringLiteral* e) {$/;"	f
getThen	$C2_ROOT/ast/if_stmt.c2	/^public fn Stmt* IfStmt.getThen(const IfStmt* s) { return s.then; }$/;"	f
getTicks	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn u32 getTicks() @(cname="SDL_GetTicks");$/;"	f
getTicks64	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn u64 getTicks64() @(cname="SDL_GetTicks64");$/;"	f
getToContainerMember	$C2_ROOT/ast/builtin_expr.c2	/^public fn Expr* BuiltinExpr.getToContainerMember(const BuiltinExpr* b) {$/;"	f
getToContainerPointer	$C2_ROOT/ast/builtin_expr.c2	/^public fn Expr* BuiltinExpr.getToContainerPointer(const BuiltinExpr* b) {$/;"	f
getToContainerPointer2	$C2_ROOT/ast/builtin_expr.c2	/^public fn Expr** BuiltinExpr.getToContainerPointer2(BuiltinExpr* b) {$/;"	f
getType	$C2_ROOT/ast/decl.c2	/^public fn QualType Decl.getType(const Decl* d) { return d.qt; }$/;"	f
getType	$C2_ROOT/ast/expr.c2	/^public fn QualType Expr.getType(const Expr* e) { return e.qt; }$/;"	f
getType	$C2_ROOT/ast/module.c2	/^public fn ModuleType* Module.getType(const Module* m) { return m.mt; }$/;"	f
getType	$C2_ROOT/ast/qualtype.c2	/^public fn Type* QualType.getType(const QualType* qt) {$/;"	f
getTypeOrNil	$C2_ROOT/ast/qualtype.c2	/^public fn Type* QualType.getTypeOrNil(const QualType* qt) {$/;"	f
getTypeRef	$C2_ROOT/ast/alias_type_decl.c2	/^public fn TypeRef* AliasTypeDecl.getTypeRef(AliasTypeDecl* d) {$/;"	f
getTypeRef	$C2_ROOT/ast/explicit_cast_expr.c2	/^public fn TypeRef* ExplicitCastExpr.getTypeRef(ExplicitCastExpr* e) {$/;"	f
getTypeRef	$C2_ROOT/ast/type_expr.c2	/^public fn TypeRef* TypeExpr.getTypeRef(TypeExpr* e) {$/;"	f
getTypeRef	$C2_ROOT/ast/var_decl.c2	/^public fn TypeRef* VarDecl.getTypeRef(VarDecl* d) { return &d.typeRef; }$/;"	f
getTypeWidth	$C2_ROOT/analyser/conversion_checker_expr.c2	/^fn ExprWidth getTypeWidth(QualType qt) {$/;"	f
getUnaryOpWidth	$C2_ROOT/analyser/conversion_checker_expr.c2	/^fn ExprWidth getUnaryOpWidth(const UnaryOperator* u) {$/;"	f
getUser	$C2_ROOT/ast/type_ref.c2	/^public fn const Ref* TypeRef.getUser(const TypeRef* r) {$/;"	f
getUserData	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn void* Texture.getUserData(Texture* texture) @(cname="SDL_GetTextureUserData");$/;"	f
getUserDecl	$C2_ROOT/ast/type_ref.c2	/^public fn const Decl* TypeRef.getUserDecl(const TypeRef* r) {$/;"	f
getValType	$C2_ROOT/ast/expr.c2	/^public fn ValType Expr.getValType(const Expr* e) {$/;"	f
getValue	$C2_ROOT/ast/array_value.c2	/^public fn Expr* ArrayValue.getValue(const ArrayValue* d) {$/;"	f
getValue	$C2_ROOT/ast/boolean_literal.c2	/^fn Value BooleanLiteral.getValue(const BooleanLiteral* e) {$/;"	f
getValue	$C2_ROOT/ast/builtin_expr.c2	/^public fn Value BuiltinExpr.getValue(const BuiltinExpr* e) { return e.value; }$/;"	f
getValue	$C2_ROOT/ast/char_literal.c2	/^fn Value CharLiteral.getValue(const CharLiteral* e) {$/;"	f
getValue	$C2_ROOT/ast/enum_constant_decl.c2	/^public fn Value EnumConstantDecl.getValue(const EnumConstantDecl* d) {$/;"	f
getValue	$C2_ROOT/ast/float_literal.c2	/^fn Value FloatLiteral.getValue(const FloatLiteral* e) {$/;"	f
getValue	$C2_ROOT/ast/integer_literal.c2	/^fn Value IntegerLiteral.getValue(const IntegerLiteral* e) {$/;"	f
getValue	$C2_ROOT/ast/return_stmt.c2	/^public fn Expr* ReturnStmt.getValue(const ReturnStmt* s) {$/;"	f
getValue	$C2_ROOT/common/yaml/yaml_iterator.c2	/^public fn const char* Iter.getValue(const Iter* iter) {$/;"	f
getValue2	$C2_ROOT/ast/return_stmt.c2	/^public fn Expr** ReturnStmt.getValue2(ReturnStmt* s) {$/;"	f
getValues	$C2_ROOT/ast/init_list_expr.c2	/^public fn Expr** InitListExpr.getValues(InitListExpr* e) {$/;"	f
getValues2	$C2_ROOT/ast/init_list_expr.c2	/^public fn const Expr** InitListExpr.getValues2(const InitListExpr* e) {$/;"	f
getVarDecl	$C2_ROOT/analyser/module_analyser_unaryop.c2	/^fn VarDecl* getVarDecl(const Expr* e) {$/;"	f
getViewPort	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn void Renderer.getViewPort(Renderer* renderer, Rect* rect) @(cname="SDL_RenderGetViewport");$/;"	f
getVoidPtr	$C2_ROOT/ast/utils.c2	/^public fn QualType getVoidPtr() {$/;"	f
getWEXITSTATUS	$C2_ROOT/common/process_utils.c2	/^fn char getWEXITSTATUS(i32 state) {$/;"	f
getWEXITSTATUS	$C2_ROOT/tools/tester/test_db.c2	/^fn char getWEXITSTATUS(i32 state) {$/;"	f
getWarnings	$C2_ROOT/common/build_target.c2	/^public fn const warning_flags.Flags* Target.getWarnings(const Target* t) {$/;"	f
getWarnings2	$C2_ROOT/common/build_target.c2	/^public fn warning_flags.Flags* Target.getWarnings2(Target* t) {$/;"	f
getWidth	$C2_ROOT/ast/bitoffset_expr.c2	/^public fn u32 BitOffsetExpr.getWidth(const BitOffsetExpr* e) {$/;"	f
getWidth	$C2_ROOT/ast/builtin_type.c2	/^public fn u32 BuiltinType.getWidth(const BuiltinType* b) {$/;"	f
getWidth	$C2_ROOT/ast/value.c2	/^public fn u8 Value.getWidth(const Value* v) {$/;"	f
getWordSize	$C2_ROOT/ast/utils.c2	/^public fn u32 getWordSize() {$/;"	f
getWrappedAlign	$C2_ROOT/libs/sdl2_ttf/sdl_ttf.c2i	/^fn c_int Font.getWrappedAlign(const Font* font) @(cname="TTF_GetFontWrappedAlign");$/;"	f
getYamlInfo	$C2_ROOT/common/build_file.c2	/^fn bool getYamlInfo(yaml.Parser* parser, Info* info) {$/;"	f
getYamlInfo	$C2_ROOT/compiler/c2recipe_yaml.c2	/^fn bool Recipe.getYamlInfo(Recipe* \/*r*\/, const yaml.Parser* parser) {$/;"	f
getYamlInfo	$C2_ROOT/compiler/manifest.c2	/^fn bool getYamlInfo(yaml.Parser* parser,$/;"	f
get_all	$C2_ROOT/common/component.c2	/^public fn Component** List.get_all(List* l) {$/;"	f
get_array	$C2_ROOT/common/dsm_sorter.c2	/^public fn const u8* Sorter.get_array(Sorter* s) {$/;"	f
get_basename	$C2_ROOT/common/file/file_utils.c2	/^public fn const char* get_basename(const char* s) {$/;"	f
get_binaryop_value	$C2_ROOT/analyser_utils/ctv_analyser.c2	/^fn Value get_binaryop_value(const BinaryOperator* e) {$/;"	f
get_binaryop_value	$C2_ROOT/ast/ast_evaluator.c2	/^fn Value Evaluator.get_binaryop_value(Evaluator* eval, const BinaryOperator* e) {$/;"	f
get_binaryop_value	$C2_ROOT/generator/c/c_generator_pure_call.c2	/^fn Value Evaluator.get_binaryop_value(Evaluator* eval, const BinaryOperator* e) {$/;"	f
get_checked	$C2_ROOT/common/build_file.c2	/^fn const yaml.Node* get_checked(yaml.Parser* parser, const char* path) {$/;"	f
get_checked	$C2_ROOT/compiler/manifest.c2	/^fn const yaml.Node* get_checked(yaml.Parser* parser, const char* path) {$/;"	f
get_common_arithmetic_type	$C2_ROOT/analyser/conversion_checker.c2	/^public fn QualType get_common_arithmetic_type(QualType t1, QualType t2) {$/;"	f
get_content	$C2_ROOT/common/source_mgr.c2	/^public fn const char* SourceMgr.get_content(SourceMgr* sm, i32 handle) {$/;"	f
get_cqe_internal	$C2_ROOT/libs/io_uring/io_uring.c2i	/^fn c_int Ring.get_cqe_internal(Ring *ring, Cqe** cqe_ptr, u32 submit, u32 wait_nr, csignal.Sigse/;"	f
get_decl_value	$C2_ROOT/analyser_utils/ctv_analyser.c2	/^fn Value get_decl_value(const Decl* d) {$/;"	f
get_decl_value	$C2_ROOT/ast/ast_evaluator.c2	/^fn Value Evaluator.get_decl_value(Evaluator* eval, const Decl* d) {$/;"	f
get_decl_value	$C2_ROOT/generator/c/c_generator_pure_call.c2	/^fn Value Evaluator.get_decl_value(Evaluator* eval, const Decl* d) {$/;"	f
get_extension	$C2_ROOT/common/file/file_utils.c2	/^public fn const char* get_extension(const char* s) {$/;"	f
get_format	$C2_ROOT/analyser_utils/printf_utils.c2	/^public fn const char* get_format(Expr* format, SrcLoc* format_loc) {$/;"	f
get_function	$C2_ROOT/generator/c/c_generator_call.c2	/^fn FunctionDecl* get_function(Decl* dest) {$/;"	f
get_idx	$C2_ROOT/common/string_list.c2	/^public fn u32 List.get_idx(const List* l, u32 idx) {$/;"	f
get_mask32	$C2_ROOT/common/bit_utils.c2	/^public fn u32 get_mask32(u32 i) {$/;"	f
get_match	$C2_ROOT/generator/radix_tree/radix_tree.c2	/^fn u32 get_match(const char* s1, const char* s2) {$/;"	f
get_offset	$C2_ROOT/common/source_mgr.c2	/^public fn u32 SourceMgr.get_offset(SourceMgr* sm, i32 handle) {$/;"	f
get_offset	$C2_ROOT/generator/c2refs.c2	/^fn u32 Lengths.get_offset(const Lengths* l, u32 start, u32 line, u32 column) {$/;"	f
get_prefix	$C2_ROOT/compiler/c2recipe_yaml.c2	/^fn const char* get_prefix(const char* input, char* output, u32 maxlen) {$/;"	f
get_sqe	$C2_ROOT/libs/io_uring/io_uring.c2i	/^fn Sqe* Ring.get_sqe(Ring *ring) @(cname="io_uring_get_sqe");$/;"	f
get_unaryop_value	$C2_ROOT/analyser_utils/ctv_analyser.c2	/^fn Value get_unaryop_value(const UnaryOperator* e) {$/;"	f
get_unaryop_value	$C2_ROOT/ast/ast_evaluator.c2	/^fn Value Evaluator.get_unaryop_value(Evaluator* eval, const UnaryOperator* e) {$/;"	f
get_unaryop_value	$C2_ROOT/generator/c/c_generator_pure_call.c2	/^fn Value Evaluator.get_unaryop_value(Evaluator* eval, const UnaryOperator* e) {$/;"	f
get_value	$C2_ROOT/analyser_utils/ctv_analyser.c2	/^public fn Value get_value(const Expr* e) {$/;"	f
get_value	$C2_ROOT/ast/ast_evaluator.c2	/^fn Value Evaluator.get_value(Evaluator* eval, const Expr* e) {$/;"	f
get_value	$C2_ROOT/generator/c/c_generator_pure_call.c2	/^fn Value Evaluator.get_value(Evaluator* eval, const Expr* e) {$/;"	f
get_value	$C2_ROOT/generator/radix_tree/radix_tree.c2	/^public fn bool Tree.get_value(const Tree* t, const char* text, u32* value) {$/;"	f
getallocf	$C2_ROOT/libs/lua/lua.c2i	/^fn Alloc getallocf(State *L, void **ud) @(cname="lua_getallocf");$/;"	f
getc	$C2_ROOT/libs/libc/stdio.c2i	/^fn c_int getc(FILE* __stream);$/;"	f
getc_unlocked	$C2_ROOT/libs/libc/stdio.c2i	/^fn c_int getc_unlocked(FILE* __stream);$/;"	f
getch	$C2_ROOT/libs/curses/curses.c2i	/^fn void getch();$/;"	f
getchar	$C2_ROOT/libs/libc/stdio.c2i	/^fn c_int getchar();$/;"	f
getchar_unlocked	$C2_ROOT/libs/libc/stdio.c2i	/^fn c_int getchar_unlocked();$/;"	f
getcwd	$C2_ROOT/libs/libc/unistd.c2i	/^fn c_char* getcwd(char* buf, c_size size);$/;"	f
getdelim	$C2_ROOT/libs/libc/stdio.c2i	/^fn c_ssize getdelim(c_char** __lineptr, c_size* __n, c_int __delimiter, FILE* __stream);$/;"	f
getenv	$C2_ROOT/libs/libc/stdlib.c2i	/^fn c_char* getenv(const c_char* __name);$/;"	f
getfield	$C2_ROOT/libs/lua/lua.c2i	/^fn c_int getfield(State *L, c_int idx, const c_char *k) @(cname="lua_getfield");$/;"	f
getglobal	$C2_ROOT/libs/lua/lua.c2i	/^fn c_int getglobal(State *L, const c_char *name) @(cname="lua_getglobal");$/;"	f
geti	$C2_ROOT/libs/lua/lua.c2i	/^fn c_int geti(State *L, c_int idx, Integer n) @(cname="lua_geti");$/;"	f
getline	$C2_ROOT/libs/libc/stdio.c2i	/^fn c_ssize getline(c_char** __lineptr, c_size* __n, FILE* __stream);$/;"	f
getloadavg	$C2_ROOT/libs/libc/stdlib.c2i	/^fn c_int getloadavg(c_double* __loadavg, c_int __nelem);$/;"	f
getmetatable	$C2_ROOT/libs/lua/lua.c2i	/^fn c_int getmetatable(State *L, c_int objindex) @(cname="lua_getmetatable");$/;"	f
getopt	$C2_ROOT/libs/libc/unistd.c2i	/^fn c_int getopt(i32 argc, char** argv, const char* optstring);$/;"	f
getsockopt	$C2_ROOT/libs/libc/sys_socket.c2i	/^fn c_int getsockopt(c_int sockfd, c_int level, c_int optname, void* optval, u32* optlen);$/;"	f
getsubopt	$C2_ROOT/libs/libc/stdlib.c2i	/^fn c_int getsubopt(c_char** __optionp, c_char** __tokens, c_char** __valuep);$/;"	f
gettable	$C2_ROOT/libs/lua/lua.c2i	/^fn c_int gettable(State *L, c_int idx) @(cname="lua_gettable");$/;"	f
gettimeofday	$C2_ROOT/libs/libc/sys_time.c2i	/^fn c_int gettimeofday(Timeval* tv, Timezone* tz);$/;"	f
gettop	$C2_ROOT/libs/lua/lua.c2i	/^fn c_int gettop(State* L) @(cname="lua_gettop");$/;"	f
getumask	$C2_ROOT/libs/libc/sys_stat.c2i	/^fn Mode getumask();$/;"	f
getuservalue	$C2_ROOT/libs/lua/lua.c2i	/^fn c_int getuservalue(State *L, c_int idx) @(cname="lua_getuservalue");$/;"	f
getw	$C2_ROOT/libs/libc/stdio.c2i	/^fn c_int getw(FILE* __stream);$/;"	f
glGetFramebuffer	$C2_ROOT/libs/sokol/sokol_app.c2i	/^fn u32 glGetFramebuffer() @(cname="sapp_gl_get_framebuffer");$/;"	f
glGetFramebuffer	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^fn u32 glGetFramebuffer() @(cname="sapp_gl_get_framebuffer");$/;"	f
glGetMajorVersion	$C2_ROOT/libs/sokol/sokol_app.c2i	/^fn c_int glGetMajorVersion() @(cname="sapp_gl_get_major_version");$/;"	f
glGetMajorVersion	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^fn c_int glGetMajorVersion() @(cname="sapp_gl_get_major_version");$/;"	f
glGetMinorVersion	$C2_ROOT/libs/sokol/sokol_app.c2i	/^fn c_int glGetMinorVersion() @(cname="sapp_gl_get_minor_version");$/;"	f
glGetMinorVersion	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^fn c_int glGetMinorVersion() @(cname="sapp_gl_get_minor_version");$/;"	f
glIsGles	$C2_ROOT/libs/sokol/sokol_app.c2i	/^fn bool glIsGles() @(cname="sapp_gl_is_gles");$/;"	f
glIsGles	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^fn bool glIsGles() @(cname="sapp_gl_is_gles");$/;"	f
glQueryBufferInfo	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn GlBufferInfo glQueryBufferInfo(Buffer buf) @(cname="sg_gl_query_buffer_info");$/;"	f
glQueryBufferInfo	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn GlBufferInfo glQueryBufferInfo(Buffer buf) @(cname="sg_gl_query_buffer_info");$/;"	f
glQueryImageInfo	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn GlImageInfo glQueryImageInfo(Image img) @(cname="sg_gl_query_image_info");$/;"	f
glQueryImageInfo	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn GlImageInfo glQueryImageInfo(Image img) @(cname="sg_gl_query_image_info");$/;"	f
glQuerySamplerInfo	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn GlSamplerInfo glQuerySamplerInfo(Sampler smp) @(cname="sg_gl_query_sampler_info");$/;"	f
glQuerySamplerInfo	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn GlSamplerInfo glQuerySamplerInfo(Sampler smp) @(cname="sg_gl_query_sampler_info");$/;"	f
glQueryShaderInfo	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn GlShaderInfo glQueryShaderInfo(Shader shd) @(cname="sg_gl_query_shader_info");$/;"	f
glQueryShaderInfo	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn GlShaderInfo glQueryShaderInfo(Shader shd) @(cname="sg_gl_query_shader_info");$/;"	f
glQueryViewInfo	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn GlViewInfo glQueryViewInfo(View view) @(cname="sg_gl_query_view_info");$/;"	f
glQueryViewInfo	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn GlViewInfo glQueryViewInfo(View view) @(cname="sg_gl_query_view_info");$/;"	f
globalScope	$C2_ROOT/analyser/module_analyser.c2	/^fn bool Analyser.globalScope(const Analyser* ma) {$/;"	f
gmtime	$C2_ROOT/libs/libc/libc_time.c2i	/^fn Time* gmtime(const Time* timep);$/;"	f
gmtime_r	$C2_ROOT/libs/libc/libc_time.c2i	/^fn Time* gmtime_r(const Time* timep, Tm* result);$/;"	f
handle	$C2_ROOT/common/attr_handler.c2	/^public fn bool Handler.handle(Handler* h, ast.Decl* d, const attr.Attr* a) {$/;"	f
handle	$C2_ROOT/generator/ast_visitor.c2	/^public fn void Visitor.handle(Visitor* v, Decl* d) {$/;"	f
handle	$C2_ROOT/libs/dl/dlfcn.c2i	/^\/* special values for the module handle *\/$/;"	m
handle	$C2_ROOT/plugins/refs_generator.c2	/^fn void LineCounter.handle(LineCounter* l, u32 size, const char* content) {$/;"	f
handleArrayValue	$C2_ROOT/analyser/module_analyser.c2	/^fn void Analyser.handleArrayValue(void* arg, ArrayValue* avd) {$/;"	f
handleAssert	$C2_ROOT/generator/ast_visitor.c2	/^public fn void Visitor.handleAssert(Visitor* v, StaticAssert* a) @(unused) {$/;"	f
handleBuiltinExpr	$C2_ROOT/generator/ast_visitor_expr.c2	/^fn void Visitor.handleBuiltinExpr(Visitor* v, BuiltinExpr* b) {$/;"	f
handleCallExpr	$C2_ROOT/generator/ast_visitor_expr.c2	/^fn void Visitor.handleCallExpr(Visitor* v, CallExpr* c) {$/;"	f
handleCompoundStmt	$C2_ROOT/generator/ast_visitor.c2	/^fn void Visitor.handleCompoundStmt(Visitor* v, CompoundStmt* s) {$/;"	f
handleEnumType	$C2_ROOT/generator/c/dep_finder.c2	/^fn void Finder.handleEnumType(Finder* s, EnumTypeDecl* etd) {$/;"	f
handleExpr	$C2_ROOT/generator/ast_visitor_expr.c2	/^fn void Visitor.handleExpr(Visitor* v, Expr* e) {$/;"	f
handleExpr	$C2_ROOT/generator/c/dep_finder.c2	/^fn void Finder.handleExpr(Finder* s, Expr* e) {$/;"	f
handleFunction	$C2_ROOT/generator/ast_visitor.c2	/^fn void Visitor.handleFunction(Visitor* v, FunctionDecl* d) {$/;"	f
handleFunction	$C2_ROOT/generator/c/dep_finder.c2	/^fn void Finder.handleFunction(Finder* s, FunctionDecl* d) {$/;"	f
handleFunctionType	$C2_ROOT/generator/c/dep_finder.c2	/^fn void Finder.handleFunctionType(Finder* s, FunctionTypeDecl* ftd) {$/;"	f
handleImport	$C2_ROOT/analyser/module_analyser.c2	/^fn void Analyser.handleImport(void* arg, ast.ImportDecl* id) {$/;"	f
handleImport	$C2_ROOT/analyser/module_sorter.c2	/^fn void ModuleSorter.handleImport(void* arg, ast.ImportDecl* d) {$/;"	f
handleImport	$C2_ROOT/compiler/compiler.c2	/^fn void Compiler.handleImport(void* arg, ast.ImportDecl* id) {$/;"	f
handleIncrEntry	$C2_ROOT/analyser/module_analyser.c2	/^fn void Analyser.handleIncrEntry(Analyser* ma, ia_list.Info* entry) {$/;"	f
handleInitList	$C2_ROOT/generator/c/dep_finder.c2	/^fn void Finder.handleInitList(Finder* s, InitListExpr* ile) {$/;"	f
handleMemberExpr	$C2_ROOT/generator/ast_visitor_expr.c2	/^fn void Visitor.handleMemberExpr(Visitor* v, MemberExpr* m) {$/;"	f
handleMemberExpr	$C2_ROOT/generator/c/dep_finder.c2	/^fn void Finder.handleMemberExpr(Finder* s, MemberExpr* m) {$/;"	f
handleModule	$C2_ROOT/analyser/module_sorter.c2	/^fn void ModuleSorter.handleModule(void* arg, ast.Module* mod) {$/;"	f
handleModuleImports	$C2_ROOT/compiler/compiler.c2	/^fn void Compiler.handleModuleImports(void* arg, ast.Module* m) {$/;"	f
handleQueue	$C2_ROOT/ir/interference_graph.c2	/^fn void InterferenceGraph.handleQueue(InterferenceGraph* g) {$/;"	f
handleRef	$C2_ROOT/plugins/deps_generator.c2	/^fn void Generator.handleRef(Generator* gen, const Ref* ref) {$/;"	f
handleRef	$C2_ROOT/plugins/refs_generator.c2	/^fn void Generator.handleRef(Generator* gen, const Ref* ref) {$/;"	f
handleStaticAssert	$C2_ROOT/analyser/module_analyser.c2	/^fn void Analyser.handleStaticAssert(void* arg, StaticAssert* d) {$/;"	f
handleStmt	$C2_ROOT/generator/ast_visitor.c2	/^fn void Visitor.handleStmt(Visitor* v, Stmt* s) {$/;"	f
handleStruct	$C2_ROOT/generator/c/dep_finder.c2	/^fn void Finder.handleStruct(Finder* s, StructTypeDecl* d) {$/;"	f
handleStructFunc	$C2_ROOT/analyser/module_analyser.c2	/^fn void Analyser.handleStructFunc(void* arg, FunctionDecl* fd) {$/;"	f
handleType	$C2_ROOT/generator/ast_visitor.c2	/^fn void Visitor.handleType(Visitor* v, QualType qt) {$/;"	f
handleTypeDecl	$C2_ROOT/analyser/module_analyser.c2	/^fn void Analyser.handleTypeDecl(void* arg, Decl* d) {$/;"	f
handleTypeFunc	$C2_ROOT/plugins/unit_test_plugin.c2	/^fn void Plugin.handleTypeFunc(void* arg, FunctionDecl* fd) {$/;"	f
handleTypeRef	$C2_ROOT/generator/ast_visitor.c2	/^fn void Visitor.handleTypeRef(Visitor* v, const TypeRef* r) {$/;"	f
handleTypeRef	$C2_ROOT/generator/c/dep_finder.c2	/^fn void Finder.handleTypeRef(Finder* f, TypeRef* r) {$/;"	f
handleTypeRef	$C2_ROOT/plugins/deps_generator.c2	/^fn void Generator.handleTypeRef(Generator* gen, const TypeRef* ref) {$/;"	f
handleTypeRef	$C2_ROOT/plugins/refs_generator.c2	/^fn void Generator.handleTypeRef(Generator* gen, const TypeRef* ref) {$/;"	f
handleVarDecl	$C2_ROOT/analyser/module_analyser.c2	/^fn void Analyser.handleVarDecl(void* arg, VarDecl* v) {$/;"	f
handleVarDecl	$C2_ROOT/generator/ast_visitor.c2	/^fn void Visitor.handleVarDecl(Visitor* v, VarDecl* d) {$/;"	f
handleVarDecl	$C2_ROOT/generator/c/dep_finder.c2	/^fn void Finder.handleVarDecl(Finder* s, VarDecl* d) {$/;"	f
handle_args	$C2_ROOT/compiler/main.c2	/^fn void Context.handle_args(Context* c, i32 argc, char** argv) {$/;"	f
handle_attr	$C2_ROOT/plugins/unit_test_plugin.c2	/^fn bool handle_attr(void* arg, Decl* d, const attr.Attr* a) {$/;"	f
handle_dir	$C2_ROOT/tools/tester/tester.c2	/^fn void handle_dir(TestQueue* queue, const char* path) {$/;"	f
handle_else	$C2_ROOT/parser/c2_tokenizer.c2	/^fn bool Tokenizer.handle_else(Tokenizer* t, Token* result) {$/;"	f
handle_endif	$C2_ROOT/parser/c2_tokenizer.c2	/^fn bool Tokenizer.handle_endif(Tokenizer* t, Token* result) {$/;"	f
handle_file	$C2_ROOT/tools/tester/tester.c2	/^fn void handle_file(TestQueue* queue, const char* filename) {$/;"	f
handle_if	$C2_ROOT/parser/c2_tokenizer.c2	/^fn bool Tokenizer.handle_if(Tokenizer* t, Token* result, Kind kind) {$/;"	f
handle_plugins	$C2_ROOT/compiler/main.c2	/^fn void Context.handle_plugins(Context* c) {$/;"	f
handle_target	$C2_ROOT/tools/c2loc.c2	/^fn void handle_target(build_target.Target* t, const char* name) {$/;"	f
hasAsserts	$C2_ROOT/common/build_target.c2	/^public fn bool Target.hasAsserts(const Target* t) { return !t.disable_asserts; }$/;"	f
hasAttr	$C2_ROOT/ast/decl.c2	/^public fn bool Decl.hasAttr(const Decl* d) { return d.declBits.has_attr; }$/;"	f
hasAttrAutoFile	$C2_ROOT/ast/var_decl.c2	/^public fn bool VarDecl.hasAttrAutoFile(const VarDecl* d) {$/;"	f
hasAttrAutoFunc	$C2_ROOT/ast/var_decl.c2	/^public fn bool VarDecl.hasAttrAutoFunc(const VarDecl* d) {$/;"	f
hasAttrAutoLine	$C2_ROOT/ast/var_decl.c2	/^public fn bool VarDecl.hasAttrAutoLine(const VarDecl* d) {$/;"	f
hasAttrConstructor	$C2_ROOT/ast/function_decl.c2	/^public fn bool FunctionDecl.hasAttrConstructor(const FunctionDecl* d) {$/;"	f
hasAttrDestructor	$C2_ROOT/ast/function_decl.c2	/^public fn bool FunctionDecl.hasAttrDestructor(const FunctionDecl* d) {$/;"	f
hasAttrInline	$C2_ROOT/ast/function_decl.c2	/^public fn bool FunctionDecl.hasAttrInline(const FunctionDecl* d) {$/;"	f
hasAttrNoReturn	$C2_ROOT/ast/function_decl.c2	/^public fn bool FunctionDecl.hasAttrNoReturn(const FunctionDecl* d) {$/;"	f
hasAttrNoTypeDef	$C2_ROOT/ast/struct_type_decl.c2	/^public fn bool StructTypeDecl.hasAttrNoTypeDef(const StructTypeDecl* d) {$/;"	f
hasAttrPrintf	$C2_ROOT/ast/function_decl.c2	/^public fn bool FunctionDecl.hasAttrPrintf(const FunctionDecl* d) {$/;"	f
hasAttrPure	$C2_ROOT/ast/function_decl.c2	/^public fn bool FunctionDecl.hasAttrPure(const FunctionDecl* d) {$/;"	f
hasAttrUnused	$C2_ROOT/ast/decl.c2	/^public fn bool Decl.hasAttrUnused(const Decl* d) { return d.declBits.attr_unused; }$/;"	f
hasAttrUnusedParams	$C2_ROOT/ast/function_decl.c2	/^public fn bool FunctionDecl.hasAttrUnusedParams(const FunctionDecl* d) {$/;"	f
hasAttrWeak	$C2_ROOT/ast/function_decl.c2	/^public fn bool FunctionDecl.hasAttrWeak(const FunctionDecl* d) {$/;"	f
hasAttrWeak	$C2_ROOT/ast/var_decl.c2	/^public fn bool VarDecl.hasAttrWeak(const VarDecl* d) {$/;"	f
hasAutoArgs	$C2_ROOT/ast/call_expr.c2	/^public fn bool CallExpr.hasAutoArgs(const CallExpr* e) {$/;"	f
hasAutoAttr	$C2_ROOT/ast/var_decl.c2	/^public fn bool VarDecl.hasAutoAttr(const VarDecl* d) {$/;"	f
hasBackEnd	$C2_ROOT/common/build_target.c2	/^public fn bool Target.hasBackEnd(const Target* t) {$/;"	f
hasBlocks	$C2_ROOT/ir/inserter.c2	/^public fn bool Inserter.hasBlocks(const Inserter* ins) {$/;"	f
hasCanonicalType	$C2_ROOT/ast/qualtype.c2	/^public fn bool QualType.hasCanonicalType(const QualType* qt) {$/;"	f
hasCanonicalType	$C2_ROOT/ast/type.c2	/^public fn bool Type.hasCanonicalType(const Type* t) {$/;"	f
hasClipboardText	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn bool hasClipboardText() @(cname="SDL_HasClipboardText");$/;"	f
hasDecls	$C2_ROOT/ast/switch_case.c2	/^public fn bool SwitchCase.hasDecls(const SwitchCase* s) { return s.bits.has_decls; }$/;"	f
hasDefault	$C2_ROOT/ast/switch_stmt.c2	/^public fn bool SwitchStmt.hasDefault(const SwitchStmt* s) {$/;"	f
hasDesignators	$C2_ROOT/ast/init_list_expr.c2	/^public fn bool InitListExpr.hasDesignators(const InitListExpr* e) {$/;"	f
hasEffect	$C2_ROOT/ast/expr.c2	/^public fn bool Expr.hasEffect(const Expr* e) {$/;"	f
hasEmbedAttr	$C2_ROOT/parser/ast_builder.c2	/^public fn bool Builder.hasEmbedAttr(Builder* b) {$/;"	f
hasErrors	$C2_ROOT/common/diagnostics.c2	/^public fn bool Diags.hasErrors(const Diags* diags) { return diags.num_errors != 0; }$/;"	f
hasExpr	$C2_ROOT/ast/member_expr.c2	/^public fn bool MemberExpr.hasExpr(const MemberExpr* e) {$/;"	f
hasFallthrough	$C2_ROOT/ast/switch_case.c2	/^public fn bool SwitchCase.hasFallthrough(const SwitchCase* s) { return s.bits.has_fallthrough; }$/;"	f
hasFieldInfo	$C2_ROOT/ast/struct_type_decl.c2	/^public fn bool StructTypeDecl.hasFieldInfo(const StructTypeDecl* d) {$/;"	f
hasGenIdx	$C2_ROOT/ast/decl.c2	/^public fn bool Decl.hasGenIdx(const Decl* d) {$/;"	f
hasInit	$C2_ROOT/ast/var_decl.c2	/^public fn bool VarDecl.hasInit(const VarDecl* d) {$/;"	f
hasInitCall	$C2_ROOT/ast/var_decl.c2	/^public fn bool VarDecl.hasInitCall(const VarDecl* d) {$/;"	f
hasInsert	$C2_ROOT/ir/inserter.c2	/^public fn bool Inserter.hasInsert(const Inserter* ins, u32 loc) {$/;"	f
hasLib	$C2_ROOT/common/build_target.c2	/^public fn bool Target.hasLib(const Target* t, u32 lib) {$/;"	f
hasLocalQualifier	$C2_ROOT/ast/var_decl.c2	/^public fn bool VarDecl.hasLocalQualifier(const VarDecl* d) {$/;"	f
hasModule	$C2_ROOT/common/component.c2	/^public fn bool Component.hasModule(const Component* c, const ast.Module* mod) {$/;"	f
hasOpaqueAttr	$C2_ROOT/parser/ast_builder.c2	/^public fn bool Builder.hasOpaqueAttr(Builder* b) {$/;"	f
hasPrefix	$C2_ROOT/ast/function_decl.c2	/^public fn bool FunctionDecl.hasPrefix(const FunctionDecl* d) {$/;"	f
hasPrefix	$C2_ROOT/ast/type_ref.c2	/^fn bool TypeRef.hasPrefix(const TypeRef* r) {$/;"	f
hasPrintfFormat	$C2_ROOT/ast/var_decl.c2	/^public fn bool VarDecl.hasPrintfFormat(const VarDecl* d) {$/;"	f
hasRegister	$C2_ROOT/ir/instr.c2	/^public fn bool Instr.hasRegister(const Instr* i) {$/;"	f
hasResult	$C2_ROOT/ir/instr.c2	/^public fn bool Instr.hasResult(const Instr* i) {$/;"	f
hasReturn	$C2_ROOT/ast/function_decl.c2	/^public fn bool FunctionDecl.hasReturn(const FunctionDecl* d) {$/;"	f
hasScreenKeyboardSupport	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn bool hasScreenKeyboardSupport() @(cname="SDL_HasScreenKeyboardSupport");$/;"	f
hasSize	$C2_ROOT/ast/array_type.c2	/^public fn u32 ArrayType.hasSize(const ArrayType* t) {$/;"	f
hasSubdir	$C2_ROOT/common/utils.c2	/^public fn bool PathInfo.hasSubdir(const PathInfo* pi) {$/;"	f
hasWork	$C2_ROOT/ir/usage_counter.c2	/^public fn bool Counter.hasWork(const Counter* c) {$/;"	f
has_component	$C2_ROOT/compiler/compiler_libs.c2	/^fn bool Compiler.has_component(const Compiler* c, u32 name) {$/;"	f
has_dynamic	$C2_ROOT/common/build_target.c2	/^public fn bool has_dynamic(Kind k) {$/;"	f
hash	$C2_ROOT/ast_utils/string_pool.c2	/^fn u32 hash(const char* text, usize len) {$/;"	f
haveErrors	$C2_ROOT/tools/tester/test_db.c2	/^public fn bool Db.haveErrors(const Db* db) {$/;"	f
height	$C2_ROOT/libs/sdl2_ttf/sdl_ttf.c2i	/^fn c_int Font.height(const Font* font) @(cname="TTF_FontHeight");$/;"	f
height	$C2_ROOT/libs/sokol/sokol_app.c2i	/^fn c_int height() @(cname="sapp_height");$/;"	f
height	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^fn c_int height() @(cname="sapp_height");$/;"	f
heightf	$C2_ROOT/libs/sokol/sokol_app.c2i	/^fn c_float heightf() @(cname="sapp_heightf");$/;"	f
heightf	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^fn c_float heightf() @(cname="sapp_heightf");$/;"	f
hex2val	$C2_ROOT/parser/c2_tokenizer.c2	/^fn u8 hex2val(char c) {$/;"	f
hexconv	$C2_ROOT/parser/c2_tokenizer.c2	/^fn u32 hexconv(const char* p, u32 maxn, u32* pc) {$/;"	f
highDpi	$C2_ROOT/libs/sokol/sokol_app.c2i	/^fn bool highDpi() @(cname="sapp_high_dpi");$/;"	f
highDpi	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^fn bool highDpi() @(cname="sapp_high_dpi");$/;"	f
home	$C2_ROOT/libs/sokol/sokol_debugtext.c2i	/^fn void home() @(cname="sdtx_home");$/;"	f
home	$C2_ROOT/libs/sokol_/sokol_debugtext.c2i	/^fn void home() @(cname="sdtx_home");$/;"	f
html5AskLeaveSite	$C2_ROOT/libs/sokol/sokol_app.c2i	/^fn void html5AskLeaveSite(bool ask) @(cname="sapp_html5_ask_leave_site");$/;"	f
html5AskLeaveSite	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^fn void html5AskLeaveSite(bool ask) @(cname="sapp_html5_ask_leave_site");$/;"	f
html5FetchDroppedFile	$C2_ROOT/libs/sokol/sokol_app.c2i	/^fn void html5FetchDroppedFile(Html5FetchRequest* request) @(cname="sapp_html5_fetch_dropped_file/;"	f
html5FetchDroppedFile	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^fn void html5FetchDroppedFile(Html5FetchRequest* request) @(cname="sapp_html5_fetch_dropped_file/;"	f
html5GetDroppedFileSize	$C2_ROOT/libs/sokol/sokol_app.c2i	/^fn u32 html5GetDroppedFileSize(c_int index) @(cname="sapp_html5_get_dropped_file_size");$/;"	f
html5GetDroppedFileSize	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^fn u32 html5GetDroppedFileSize(c_int index) @(cname="sapp_html5_get_dropped_file_size");$/;"	f
htonl	$C2_ROOT/libs/libc/sys_socket.c2i	/^fn u32 htonl(u32 hostlong);$/;"	f
htons	$C2_ROOT/libs/libc/sys_socket.c2i	/^fn u16 htons(u16 hostshort);$/;"	f
hypot	$C2_ROOT/libs/math/math.c2i	/^fn c_double hypot(c_double, c_double);$/;"	f
hypotf	$C2_ROOT/libs/math/math.c2i	/^fn c_float hypotf(c_float, c_float);$/;"	f
i16	$C2_ROOT/libs/c2/i16.c2i	/^module i16;$/;"	m
i32	$C2_ROOT/libs/c2/i32.c2i	/^module i32;$/;"	m
i64	$C2_ROOT/libs/c2/i64.c2i	/^module i64;$/;"	m
i8	$C2_ROOT/libs/c2/i8.c2i	/^module i8;$/;"	m
identifiers	$C2_ROOT/ast/module.c2	/^    bool is_foreign; \/\/ module identifiers are not mangled$/;"	m
idx2ast	$C2_ROOT/ast/utils.c2	/^fn AST* idx2ast(u32 idx) {$/;"	f
idx2name	$C2_ROOT/ast/utils.c2	/^public fn const char* idx2name(u32 idx) {$/;"	f
idx2name	$C2_ROOT/generator/c2refs.c2	/^fn const char* Files.idx2name(const Files* f, u32 name_idx) {$/;"	f
idx2node	$C2_ROOT/common/yaml/yaml_data.c2	/^fn Node* Data.idx2node(const Data* d, u32 idx) {$/;"	f
idx2node	$C2_ROOT/generator/radix_tree/radix_tree.c2	/^fn Node* Tree.idx2node(const Tree* t, u32 node_idx) {$/;"	f
idx2str	$C2_ROOT/ast_utils/string_pool.c2	/^public fn const char* Pool.idx2str(const Pool* p, u32 idx) {$/;"	f
idx2word	$C2_ROOT/generator/radix_tree/radix_tree.c2	/^fn const char* Words.idx2word(const Words* w , u32 word_idx) {$/;"	f
if	$C2_ROOT/ir/instr.c2	/^    u32 type_ : 4;  \/\/ resulting type if any$/;"	t
if_assign	$C2_ROOT/ir_examples/cond_decl.c2	/^fn void if_assign(i32 a, i32 loops) {$/;"	f
if_decl	$C2_ROOT/ir_examples/cond_decl.c2	/^fn void if_decl(i32 loops) {$/;"	f
ifaddrs	$C2_ROOT/libs/libc/ifaddrs.c2i	/^module ifaddrs;$/;"	m
ilogb	$C2_ROOT/libs/math/math.c2i	/^fn c_int ilogb(c_double);$/;"	f
ilogbf	$C2_ROOT/libs/math/math.c2i	/^fn c_int ilogbf(c_float);$/;"	f
in	$C2_ROOT/libs/sokol/c/sokol_gfx.h	/^    formats to the vertex attribute base type in the vertex shader code$/;"	t
in	$C2_ROOT/libs/sokol_/c/sokol_gfx.h	/^    formats to the vertex attribute base type in the vertex shader code$/;"	t
inFunction	$C2_ROOT/analyser/scope.c2	/^public fn bool Scope.inFunction(const Scope* s) {$/;"	f
incompatible_opcodes	$C2_ROOT/analyser/module_analyser_binop.c2	/^fn bool incompatible_opcodes(BinaryOpcode op1, BinaryOpcode op2) {$/;"	f
incr	$C2_ROOT/ast/value.c2	/^public fn void Value.incr(Value* v) {$/;"	f
incr	$C2_ROOT/ir/usage_counter.c2	/^public fn void Counter.incr(Counter* c, u32 idx) {$/;"	f
incr_array_list	$C2_ROOT/analyser/incr_array_list.c2	/^module incr_array_list;$/;"	m
indent	$C2_ROOT/ast_utils/string_buffer.c2	/^public fn void Buf.indent(Buf* buf, u32 indent) {$/;"	f
index	$C2_ROOT/libs/libc/strings.c2i	/^fn c_char* index(const c_char* s, c_int c);$/;"	f
indexBufferDesc	$C2_ROOT/libs/sokol/sokol_shape.c2i	/^fn BufferDesc indexBufferDesc(Buffer* buf) @(cname="sshape_index_buffer_desc");$/;"	f
indexBufferDesc	$C2_ROOT/libs/sokol_/sokol_shape.c2i	/^fn BufferDesc indexBufferDesc(Buffer* buf) @(cname="sshape_index_buffer_desc");$/;"	f
index_list	$C2_ROOT/common/index_list.c2	/^module index_list;$/;"	m
inet_addr	$C2_ROOT/libs/libc/sys_socket.c2i	/^fn InAddr inet_addr(const c_char* cp);$/;"	f
inet_ntoa	$C2_ROOT/libs/libc/sys_socket.c2i	/^fn char* inet_ntoa(In_addr in);$/;"	f
info	$C2_ROOT/ast/ast.c2	/^public fn void AST.info(const AST* a, string_buffer.Buf* out) {$/;"	f
info	$C2_ROOT/ast/module.c2	/^public fn void Module.info(const Module* m, string_buffer.Buf* out) {$/;"	f
information	$C2_ROOT/libs/sokol/c/sokol_gfx.h	/^    can also provide the per-attribute base type information manually when$/;"	t
information	$C2_ROOT/libs/sokol_/c/sokol_gfx.h	/^    can also provide the per-attribute base type information manually when$/;"	t
init	$C2_ROOT/analyser/conversion_checker.c2	/^public fn void Checker.init(Checker* c, diagnostics.Diags* diags, ast_builder.Builder* builder) /;"	f
init	$C2_ROOT/analyser/label_vector.c2	/^public fn void LabelVector.init(LabelVector* v, u32 capacity) @(unused) {$/;"	f
init	$C2_ROOT/analyser/name_vector.c2	/^public fn void NameVector.init(NameVector* v, u32 capacity) @(unused) {$/;"	f
init	$C2_ROOT/analyser/struct_field_init_checker.c2	/^fn void StructFieldInitChecker.init(StructFieldInitChecker* c, u32 capacity) {$/;"	f
init	$C2_ROOT/analyser_utils/ctv_analyser.c2	/^fn void Limit.init(Limit* l, u32 width, bool is_signed) {$/;"	f
init	$C2_ROOT/ast/array_value_list.c2	/^fn void ArrayValueList.init(ArrayValueList* l, u32 initial_size) {$/;"	f
init	$C2_ROOT/ast/decl.c2	/^fn void Decl.init(Decl* d, DeclKind k, u32 name_idx, SrcLoc loc, bool is_public, QualType qt, u3/;"	f
init	$C2_ROOT/ast/decl_list.c2	/^public fn void DeclList.init(DeclList* l) {$/;"	f
init	$C2_ROOT/ast/expr.c2	/^fn void Expr.init(Expr* e,$/;"	f
init	$C2_ROOT/ast/expr_list.c2	/^public fn void ExprList.init(ExprList* l) {$/;"	f
init	$C2_ROOT/ast/function_decl_list.c2	/^public fn void FunctionDeclList.init(FunctionDeclList* l) {$/;"	f
init	$C2_ROOT/ast/import_decl_list.c2	/^fn void ImportDeclList.init(ImportDeclList* l) {$/;"	f
init	$C2_ROOT/ast/instance_table.c2	/^fn void TemplateFunction.init(TemplateFunction* f, const FunctionDecl* fd) {$/;"	f
init	$C2_ROOT/ast/pointer_pool.c2	/^fn void PointerPool.init(PointerPool* p, ast_context.Context* c) {$/;"	f
init	$C2_ROOT/ast/static_assert_list.c2	/^fn void StaticAssertList.init(StaticAssertList* l, u32 initial_size) {$/;"	f
init	$C2_ROOT/ast/stmt.c2	/^fn void Stmt.init(Stmt* s, StmtKind k, SrcLoc loc) {$/;"	f
init	$C2_ROOT/ast/string_type_pool.c2	/^fn void StringTypePool.init(StringTypePool* p, ast_context.Context* c) {$/;"	f
init	$C2_ROOT/ast/symbol_table.c2	/^fn void SymbolTable.init(SymbolTable* t, u32 initial) {$/;"	f
init	$C2_ROOT/ast/type.c2	/^fn void Type.init(Type* t, TypeKind k) {$/;"	f
init	$C2_ROOT/ast/type_ref.c2	/^public fn void TypeRefHolder.init(TypeRefHolder* h) {$/;"	f
init	$C2_ROOT/ast_utils/context.c2	/^fn void Context.init(Context* c, u32 blk_size) {$/;"	f
init	$C2_ROOT/ast_utils/string_buffer.c2	/^public fn Buf* Buf.init(Buf* buf, char* data, u32 capacity, bool grow, bool use_colors, u32 inde/;"	f
init	$C2_ROOT/common/build_target.c2	/^public fn void PluginList.init(PluginList* l) {$/;"	f
init	$C2_ROOT/common/component.c2	/^public fn void List.init(List* l) {$/;"	f
init	$C2_ROOT/common/console.c2	/^public fn void init() {$/;"	f
init	$C2_ROOT/common/dsm_sorter.c2	/^public fn void Sorter.init(Sorter* s, u32 count) {$/;"	f
init	$C2_ROOT/common/file/file_utils.c2	/^public fn bool File.init(File* file, const char* dir, const char* filename) {$/;"	f
init	$C2_ROOT/common/index_list.c2	/^public fn void List.init(List* l, u32 initial) {$/;"	f
init	$C2_ROOT/common/library_list.c2	/^public fn void List.init(List* l) {$/;"	f
init	$C2_ROOT/common/linked_list.c2	/^public fn void Element.init(Element* src) {$/;"	f
init	$C2_ROOT/common/module_list.c2	/^public fn void List.init(List* l, bool owns_modules, u32 capacity) {$/;"	f
init	$C2_ROOT/common/string_list.c2	/^public fn void List.init(List* l, string_pool.Pool* pool) {$/;"	f
init	$C2_ROOT/common/target_info.c2	/^fn void Info.init(Info* info) {$/;"	f
init	$C2_ROOT/common/value_maplist.c2	/^public fn void List.init(List* l) {$/;"	f
init	$C2_ROOT/common/yaml/yaml_data.c2	/^fn void Data.init(Data* d, u32 text_size, u32 nodes_count, StackLevel* stack) {$/;"	f
init	$C2_ROOT/common/yaml/yaml_tokenizer.c2	/^fn void Tokenizer.init(Tokenizer* t, const char* input, Data* d, char* error_msg) {$/;"	f
init	$C2_ROOT/compiler/c2recipe_parser.c2	/^fn void Token.init(Token* t) {$/;"	f
init	$C2_ROOT/compiler/main.c2	/^fn void Options.init(Options* opts, string_pool.Pool* pool) {$/;"	f
init	$C2_ROOT/generator/c/c_generator.c2	/^fn void Generator.init(Generator* gen,$/;"	f
init	$C2_ROOT/generator/c/dep_finder.c2	/^public fn void Finder.init(Finder* f, Module* mod, void* arg, OnDecl on_decl) {$/;"	f
init	$C2_ROOT/generator/ir/basic_struct_layouter.c2	/^fn void BasicStructLayouter.init(BasicStructLayouter* l,$/;"	f
init	$C2_ROOT/generator/ir/field_struct_layouter.c2	/^fn void FieldStructLayouter.init(FieldStructLayouter* l,$/;"	f
init	$C2_ROOT/generator/ir/ir_generator.c2	/^fn void Generator.init(Generator* gen,$/;"	f
init	$C2_ROOT/generator/ir/ir_generator_locals.c2	/^public fn void Locals.init(Locals* l) {$/;"	f
init	$C2_ROOT/generator/ir/ref_list.c2	/^public fn void RefList.init(RefList* l) {$/;"	f
init	$C2_ROOT/ir/block.c2	/^fn void Block.init(Block* b, BlockKind kind) {$/;"	f
init	$C2_ROOT/ir/block_list.c2	/^public fn void BlockList.init(BlockList* l, u32 initial_size) {$/;"	f
init	$C2_ROOT/ir/case_list.c2	/^fn void CaseList.init(CaseList* l) {$/;"	f
init	$C2_ROOT/ir/constant_list.c2	/^fn void ConstantList.init(ConstantList* l, u32 initial_size) {$/;"	f
init	$C2_ROOT/ir/context.c2	/^fn void Tools.init(Tools* t, const void* arg1, bool print) {$/;"	f
init	$C2_ROOT/ir/copy_list.c2	/^public fn void CopyList.init(CopyList* l, u32 capacity) {$/;"	f
init	$C2_ROOT/ir/init_value.c2	/^fn void InitValue.init(InitValue* r, InitValueKind kind, u32 value) {$/;"	f
init	$C2_ROOT/ir/init_value_list.c2	/^fn void InitValueList.init(InitValueList* l, u32 initial_size) {$/;"	f
init	$C2_ROOT/ir/instr_list.c2	/^public fn void InstrList.init(InstrList* l, u32 initial_size) {$/;"	f
init	$C2_ROOT/ir/lookup_table.c2	/^public fn void Table.init(Table* t, u32 initial) {$/;"	f
init	$C2_ROOT/ir/phi_list.c2	/^public fn void PhiClauses.init(PhiClauses* c) {$/;"	f
init	$C2_ROOT/ir/print.c2	/^fn void PrintHelper.init(PrintHelper* ph, const Context* c) {$/;"	f
init	$C2_ROOT/ir/ref.c2	/^public fn void Ref.init(Ref* r, RefKind kind, u32 value) {$/;"	f
init	$C2_ROOT/ir/register_alloc.c2	/^fn void LiveVector.init(LiveVector* v, u32 num_blocks, u32 num_instr) {$/;"	f
init	$C2_ROOT/ir/symbol_list.c2	/^fn void SymbolList.init(SymbolList* l, u32 initial_size) {$/;"	f
init	$C2_ROOT/ir/usage_counter.c2	/^public fn void Counter.init(Counter* c, u32 cap) {$/;"	f
init	$C2_ROOT/ir/work_queue.c2	/^fn WorkQueue* WorkQueue.init(WorkQueue* q) {$/;"	f
init	$C2_ROOT/libs/pthread/pthread.c2i	/^fn c_int Mutex.init(Mutex* mutex, const MutexAttr* attr) @(cname="pthread_mutex_init");$/;"	f
init	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn c_int init(u32 flags) @(cname="SDL_Init");$/;"	f
init	$C2_ROOT/libs/sdl2_image/sdl_image.c2i	/^fn c_int init(c_int flags) @(cname="IMG_Init");$/;"	f
init	$C2_ROOT/libs/sdl2_ttf/sdl_ttf.c2i	/^fn c_int init() @(cname="TTF_Init");$/;"	f
init	$C2_ROOT/output/unit_test/cgen/build.c	/^static const char plugin_main_Content1[5774] = "module c2test;\\nimport stdarg local;\\nimport s/;"	f
init	$C2_ROOT/output/unit_test/cgen/plugin_main.c	/^static const char plugin_main_Content1[5774] = "module c2test;\\nimport stdarg local;\\nimport s/;"	f
init	$C2_ROOT/output/unit_test/libunit_test.dylib	/^public fn void init(const Config* cfg) {$/;"	f
init	$C2_ROOT/parser/c2_tokenizer.c2	/^public fn void Tokenizer.init(Tokenizer* t,$/;"	f
init	$C2_ROOT/parser/case_list.c2	/^public fn void List.init(List* l) {$/;"	f
init	$C2_ROOT/parser/expr_list.c2	/^public fn void List.init(List* l) {$/;"	f
init	$C2_ROOT/parser/keywords.c2	/^public fn void Info.init(Info* info, string_pool.Pool* pool) {$/;"	f
init	$C2_ROOT/parser/stmt_list.c2	/^public fn void List.init(List* l) {$/;"	f
init	$C2_ROOT/parser/token.c2	/^public fn void Token.init(Token* tok) {$/;"	f
init	$C2_ROOT/plugins/deps_generator.c2	/^fn void Dir.init(Dir* d, u32 name_idx, u32 indent) {$/;"	f
init	$C2_ROOT/plugins/deps_generator_plugin.c2	/^fn void init(void* arg, plugin_info.Info* info) {$/;"	f
init	$C2_ROOT/plugins/git_version_plugin.c2	/^fn void init(void* arg, plugin_info.Info* info) {$/;"	f
init	$C2_ROOT/plugins/refs_generator.c2	/^fn void LineCounter.init(LineCounter* l) {$/;"	f
init	$C2_ROOT/plugins/refs_generator_plugin.c2	/^fn void init(void* arg, plugin_info.Info* info) {$/;"	f
init	$C2_ROOT/plugins/shell_cmd_plugin.c2	/^fn void init(void* arg, plugin_info.Info* info) {$/;"	f
init	$C2_ROOT/plugins/unit_test1.c2	/^public fn void init(const Config* cfg) {$/;"	f
init	$C2_ROOT/tools/c2tags.c2	/^fn void Results.init(Results* r) {$/;"	f
init	$C2_ROOT/tools/tester/test_db.c2	/^public fn void Db.init(Db* db,$/;"	f
init0	$C2_ROOT/ir/instr.c2	/^public fn void Instr.init0(Instr* i, InstrKind k) {$/;"	f
init0b	$C2_ROOT/ir/instr.c2	/^public fn void Instr.init0b(Instr* i, InstrKind k) {$/;"	f
init1	$C2_ROOT/ir/instr.c2	/^public fn void Instr.init1(Instr* i, InstrKind k, Ref ref1) {$/;"	f
init1b	$C2_ROOT/ir/instr.c2	/^public fn void Instr.init1b(Instr* i, InstrKind k, Ref ref1) {$/;"	f
init2	$C2_ROOT/ir/instr.c2	/^public fn void Instr.init2(Instr* i, InstrKind k, Ref ref1, Ref ref2) {$/;"	f
init2b	$C2_ROOT/ir/instr.c2	/^public fn void Instr.init2b(Instr* i, InstrKind k, Ref ref1, Ref ref2) {$/;"	f
initBuffer	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn void initBuffer(Buffer buf, BufferDesc* desc) @(cname="sg_init_buffer");$/;"	f
initBuffer	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn void initBuffer(Buffer buf, BufferDesc* desc) @(cname="sg_init_buffer");$/;"	f
initImage	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn void initImage(Image img, ImageDesc* desc) @(cname="sg_init_image");$/;"	f
initImage	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn void initImage(Image img, ImageDesc* desc) @(cname="sg_init_image");$/;"	f
initPhi	$C2_ROOT/ir/instr.c2	/^public fn void Instr.initPhi(Instr* i, u32 clause_start, u32 num_clauses) {$/;"	f
initPipeline	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn void initPipeline(Pipeline pip, PipelineDesc* desc) @(cname="sg_init_pipeline");$/;"	f
initPipeline	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn void initPipeline(Pipeline pip, PipelineDesc* desc) @(cname="sg_init_pipeline");$/;"	f
initRegCopy	$C2_ROOT/ir/instr.c2	/^public fn void Instr.initRegCopy(Instr* i, u8 dst_reg, Ref ref) {$/;"	f
initSampler	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn void initSampler(Sampler smg, SamplerDesc* desc) @(cname="sg_init_sampler");$/;"	f
initSampler	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn void initSampler(Sampler smg, SamplerDesc* desc) @(cname="sg_init_sampler");$/;"	f
initShader	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn void initShader(Shader shd, ShaderDesc* desc) @(cname="sg_init_shader");$/;"	f
initShader	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn void initShader(Shader shd, ShaderDesc* desc) @(cname="sg_init_shader");$/;"	f
initView	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn void initView(View view, ViewDesc* desc) @(cname="sg_init_view");$/;"	f
initView	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn void initView(View view, ViewDesc* desc) @(cname="sg_init_view");$/;"	f
init_checker	$C2_ROOT/analyser/init_checker.c2	/^module init_checker;$/;"	m
init_colors	$C2_ROOT/tools/c2cat.c2	/^fn void init_colors() {$/;"	f
init_ext	$C2_ROOT/common/file/file_utils.c2	/^public fn bool File.init_ext(File* file, const char* dir, const char* filename, const char* ext)/;"	f
init_zones	$C2_ROOT/generator/radix_tree/radix_tree.c2	/^fn void Tree.init_zones(Tree* t) {$/;"	f
initialize	$C2_ROOT/ast/utils.c2	/^public fn void initialize(Context* c, string_pool.Pool* astPool, u32 wordsize, bool use_color) {$/;"	f
initialize	$C2_ROOT/ast_utils/attr.c2	/^public fn void initialize(const u32* indexes) {$/;"	f
initscr	$C2_ROOT/libs/curses/curses.c2i	/^fn void initscr();$/;"	f
initstate	$C2_ROOT/libs/libc/stdlib.c2i	/^fn c_char* initstate(c_uint __seed, c_char* __statebuf, c_size __statelen);$/;"	f
initstate_r	$C2_ROOT/libs/libc/stdlib.c2i	/^fn c_int initstate_r(c_uint __seed, c_char* __statebuf, c_size __statelen, Random_data* __buf);$/;"	f
insert	$C2_ROOT/generator/radix_tree/radix_tree.c2	/^fn void Tree.insert(Tree* t, u32 node_idx, const char* text, u32 len, u32* parent_idx, u32 value/;"	f
insertBlocks	$C2_ROOT/ir/inserter.c2	/^public fn void Inserter.insertBlocks(Inserter* ins, BlockList* list) {$/;"	f
insertImplicitCast	$C2_ROOT/parser/ast_builder.c2	/^public fn void Builder.insertImplicitCast(Builder* b,$/;"	f
insertSplitEdges	$C2_ROOT/ir/register_alloc.c2	/^fn void Tools.insertSplitEdges(Tools* t) {$/;"	f
insertWrite	$C2_ROOT/ir/slot_collector.c2	/^public fn void SlotCollector.insertWrite(SlotCollector* c, BlockId blk_id, u16 slot, Ref ref) {$/;"	f
insertWriteIfNone	$C2_ROOT/ir/slot_collector.c2	/^public fn void SlotCollector.insertWriteIfNone(SlotCollector* c, BlockId blk_id, u16 slot, Ref r/;"	f
instantiate	$C2_ROOT/ast/array_designated_init_expr.c2	/^fn Expr* ArrayDesignatedInitExpr.instantiate(ArrayDesignatedInitExpr* e, Instantiator* inst) {$/;"	f
instantiate	$C2_ROOT/ast/array_subscript_expr.c2	/^fn Expr* ArraySubscriptExpr.instantiate(ArraySubscriptExpr* e, Instantiator* inst) {$/;"	f
instantiate	$C2_ROOT/ast/asm_stmt.c2	/^fn Stmt* AsmStmt.instantiate(AsmStmt* s, Instantiator* inst) @(unused) {$/;"	f
instantiate	$C2_ROOT/ast/assert_stmt.c2	/^fn Stmt* AssertStmt.instantiate(AssertStmt* s, Instantiator* inst) {$/;"	f
instantiate	$C2_ROOT/ast/binary_operator.c2	/^fn Expr* BinaryOperator.instantiate(BinaryOperator* e, Instantiator* inst) {$/;"	f
instantiate	$C2_ROOT/ast/bitoffset_expr.c2	/^fn Expr* BitOffsetExpr.instantiate(BitOffsetExpr* e, Instantiator* inst) {$/;"	f
instantiate	$C2_ROOT/ast/builtin_expr.c2	/^fn Expr* BuiltinExpr.instantiate(BuiltinExpr* e, Instantiator* inst) {$/;"	f
instantiate	$C2_ROOT/ast/call_expr.c2	/^fn Expr* CallExpr.instantiate(CallExpr* e, Instantiator* inst) {$/;"	f
instantiate	$C2_ROOT/ast/compound_stmt.c2	/^fn CompoundStmt* CompoundStmt.instantiate(CompoundStmt* s, Instantiator* inst) {$/;"	f
instantiate	$C2_ROOT/ast/conditional_operator.c2	/^fn Expr* ConditionalOperator.instantiate(ConditionalOperator* e, Instantiator* inst) {$/;"	f
instantiate	$C2_ROOT/ast/decl_stmt.c2	/^fn Stmt* DeclStmt.instantiate(DeclStmt* s, Instantiator* inst) {$/;"	f
instantiate	$C2_ROOT/ast/explicit_cast_expr.c2	/^fn Expr* ExplicitCastExpr.instantiate(ExplicitCastExpr* e, Instantiator* inst) {$/;"	f
instantiate	$C2_ROOT/ast/expr.c2	/^fn Expr* Expr.instantiate(Expr* e, Instantiator* inst) {$/;"	f
instantiate	$C2_ROOT/ast/field_designated_init_expr.c2	/^fn Expr* FieldDesignatedInitExpr.instantiate(FieldDesignatedInitExpr* e, Instantiator* inst) {$/;"	f
instantiate	$C2_ROOT/ast/for_stmt.c2	/^fn Stmt* ForStmt.instantiate(ForStmt* s, Instantiator* inst) {$/;"	f
instantiate	$C2_ROOT/ast/function_decl.c2	/^public fn FunctionDecl* FunctionDecl.instantiate(const FunctionDecl* fd, Instantiator* inst)$/;"	f
instantiate	$C2_ROOT/ast/identifier_expr.c2	/^fn Expr* IdentifierExpr.instantiate(IdentifierExpr* e, Instantiator* inst) {$/;"	f
instantiate	$C2_ROOT/ast/if_stmt.c2	/^fn Stmt* IfStmt.instantiate(IfStmt* s, Instantiator* inst) {$/;"	f
instantiate	$C2_ROOT/ast/init_list_expr.c2	/^fn Expr* InitListExpr.instantiate(InitListExpr* e, Instantiator* inst) {$/;"	f
instantiate	$C2_ROOT/ast/label_stmt.c2	/^fn Stmt* LabelStmt.instantiate(LabelStmt* s, Instantiator* inst) {$/;"	f
instantiate	$C2_ROOT/ast/member_expr.c2	/^fn Expr* MemberExpr.instantiate(MemberExpr* e, Instantiator* inst) {$/;"	f
instantiate	$C2_ROOT/ast/paren_expr.c2	/^fn Expr* ParenExpr.instantiate(ParenExpr* e, Instantiator* inst) {$/;"	f
instantiate	$C2_ROOT/ast/range_expr.c2	/^fn Expr* RangeExpr.instantiate(RangeExpr* e, Instantiator* inst) {$/;"	f
instantiate	$C2_ROOT/ast/return_stmt.c2	/^fn Stmt* ReturnStmt.instantiate(ReturnStmt* s, Instantiator* inst) {$/;"	f
instantiate	$C2_ROOT/ast/stmt.c2	/^fn Stmt* Stmt.instantiate(Stmt* s, Instantiator* inst) {$/;"	f
instantiate	$C2_ROOT/ast/switch_case.c2	/^fn SwitchCase* SwitchCase.instantiate(SwitchCase* src, Instantiator* inst) {$/;"	f
instantiate	$C2_ROOT/ast/switch_stmt.c2	/^fn Stmt* SwitchStmt.instantiate(SwitchStmt* s, Instantiator* inst) {$/;"	f
instantiate	$C2_ROOT/ast/type_expr.c2	/^fn Expr* TypeExpr.instantiate(TypeExpr* e, Instantiator* inst) {$/;"	f
instantiate	$C2_ROOT/ast/type_ref.c2	/^fn void TypeRef.instantiate(TypeRef* r, const TypeRef* r1, Instantiator* inst) {$/;"	f
instantiate	$C2_ROOT/ast/unary_operator.c2	/^fn Expr* UnaryOperator.instantiate(UnaryOperator* e, Instantiator* inst) {$/;"	f
instantiate	$C2_ROOT/ast/var_decl.c2	/^fn VarDecl* VarDecl.instantiate(const VarDecl* vd, Instantiator* inst)$/;"	f
instantiate	$C2_ROOT/ast/while_stmt.c2	/^fn Stmt* WhileStmt.instantiate(WhileStmt* s, Instantiator* inst) {$/;"	f
instantiateTemplateFunction	$C2_ROOT/analyser/module_analyser_call.c2	/^fn FunctionDecl* Analyser.instantiateTemplateFunction(Analyser* ma, CallExpr* call, FunctionDecl/;"	f
internal	$C2_ROOT/common/diagnostics.c2	/^fn void Diags.internal(Diags* diags,$/;"	f
io_uring	$C2_ROOT/libs/io_uring/io_uring.c2i	/^module io_uring;$/;"	m
io_uring_sq_ready	$C2_ROOT/libs/io_uring/io_uring.c2i	/^fn u32 io_uring_sq_ready(const Ring* ring)$/;"	f
ioctl	$C2_ROOT/libs/libc/sys_ioctl.c2i	/^fn c_int ioctl(c_int __fd, c_ulong __request, ...);$/;"	f
iosGetWindow	$C2_ROOT/libs/sokol/sokol_app.c2i	/^fn void* iosGetWindow() @(cname="sapp_ios_get_window");$/;"	f
iosGetWindow	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^fn void* iosGetWindow() @(cname="sapp_ios_get_window");$/;"	f
ir	$C2_ROOT/ir/block.c2	/^module ir;$/;"	m
ir	$C2_ROOT/ir/block_list.c2	/^module ir;$/;"	m
ir	$C2_ROOT/ir/case_list.c2	/^module ir;$/;"	m
ir	$C2_ROOT/ir/common.c2	/^module ir;$/;"	m
ir	$C2_ROOT/ir/function_info.c2	/^module ir;$/;"	m
ir	$C2_ROOT/ir/instr.c2	/^module ir;$/;"	m
ir	$C2_ROOT/ir/instr_kind.c2	/^module ir;$/;"	m
ir	$C2_ROOT/ir/instr_list.c2	/^module ir;$/;"	m
ir	$C2_ROOT/ir/phi_list.c2	/^module ir;$/;"	m
ir	$C2_ROOT/ir/ref.c2	/^module ir;$/;"	m
ir	$C2_ROOT/ir/types.c2	/^module ir;$/;"	m
ir_Type_F32	$C2_ROOT/bootstrap/bootstrap.c	/^   [ir_Type_F32] = ir_InstrKind_Store4,$/;"	v
ir_Type_F32	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [ir_Type_F32] = ir_InstrKind_Store4,$/;"	v
ir_Type_F32	$C2_ROOT/output/c2c/cgen/build.c	/^   [ir_Type_F32] = ir_InstrKind_Store4,$/;"	v
ir_Type_F32	$C2_ROOT/output/c2c/cgen/ir_context.c	/^   [ir_Type_F32] = ir_InstrKind_Store4,$/;"	v
ir_Type_F32	$C2_ROOT/output/c2c_trace/cgen/ir_context.c	/^   [ir_Type_F32] = ir_InstrKind_Store4,$/;"	v
ir_Type_F64	$C2_ROOT/bootstrap/bootstrap.c	/^   [ir_Type_F64] = ir_InstrKind_Store8$/;"	v
ir_Type_F64	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [ir_Type_F64] = ir_InstrKind_Store8$/;"	v
ir_Type_F64	$C2_ROOT/output/c2c/cgen/build.c	/^   [ir_Type_F64] = ir_InstrKind_Store8$/;"	v
ir_Type_F64	$C2_ROOT/output/c2c/cgen/ir_context.c	/^   [ir_Type_F64] = ir_InstrKind_Store8$/;"	v
ir_Type_F64	$C2_ROOT/output/c2c_trace/cgen/ir_context.c	/^   [ir_Type_F64] = ir_InstrKind_Store8$/;"	v
ir_Type_I16	$C2_ROOT/bootstrap/bootstrap.c	/^   [ir_Type_I16] = ir_InstrKind_Store2,$/;"	v
ir_Type_I16	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [ir_Type_I16] = ir_InstrKind_Store2,$/;"	v
ir_Type_I16	$C2_ROOT/output/c2c/cgen/build.c	/^   [ir_Type_I16] = ir_InstrKind_Store2,$/;"	v
ir_Type_I16	$C2_ROOT/output/c2c/cgen/ir_context.c	/^   [ir_Type_I16] = ir_InstrKind_Store2,$/;"	v
ir_Type_I16	$C2_ROOT/output/c2c_trace/cgen/ir_context.c	/^   [ir_Type_I16] = ir_InstrKind_Store2,$/;"	v
ir_Type_I32	$C2_ROOT/bootstrap/bootstrap.c	/^   [ir_Type_I32] = ir_InstrKind_Store4,$/;"	v
ir_Type_I32	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [ir_Type_I32] = ir_InstrKind_Store4,$/;"	v
ir_Type_I32	$C2_ROOT/output/c2c/cgen/build.c	/^   [ir_Type_I32] = ir_InstrKind_Store4,$/;"	v
ir_Type_I32	$C2_ROOT/output/c2c/cgen/ir_context.c	/^   [ir_Type_I32] = ir_InstrKind_Store4,$/;"	v
ir_Type_I32	$C2_ROOT/output/c2c_trace/cgen/ir_context.c	/^   [ir_Type_I32] = ir_InstrKind_Store4,$/;"	v
ir_Type_I64	$C2_ROOT/bootstrap/bootstrap.c	/^   [ir_Type_I64] = ir_InstrKind_Store8,$/;"	v
ir_Type_I64	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [ir_Type_I64] = ir_InstrKind_Store8,$/;"	v
ir_Type_I64	$C2_ROOT/output/c2c/cgen/build.c	/^   [ir_Type_I64] = ir_InstrKind_Store8,$/;"	v
ir_Type_I64	$C2_ROOT/output/c2c/cgen/ir_context.c	/^   [ir_Type_I64] = ir_InstrKind_Store8,$/;"	v
ir_Type_I64	$C2_ROOT/output/c2c_trace/cgen/ir_context.c	/^   [ir_Type_I64] = ir_InstrKind_Store8,$/;"	v
ir_Type_I8	$C2_ROOT/bootstrap/bootstrap.c	/^   [ir_Type_I8] = ir_InstrKind_Store1,$/;"	v
ir_Type_I8	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [ir_Type_I8] = ir_InstrKind_Store1,$/;"	v
ir_Type_I8	$C2_ROOT/output/c2c/cgen/build.c	/^   [ir_Type_I8] = ir_InstrKind_Store1,$/;"	v
ir_Type_I8	$C2_ROOT/output/c2c/cgen/ir_context.c	/^   [ir_Type_I8] = ir_InstrKind_Store1,$/;"	v
ir_Type_I8	$C2_ROOT/output/c2c_trace/cgen/ir_context.c	/^   [ir_Type_I8] = ir_InstrKind_Store1,$/;"	v
ir_Type_U16	$C2_ROOT/bootstrap/bootstrap.c	/^   [ir_Type_U16] = ir_InstrKind_Store2,$/;"	v
ir_Type_U16	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [ir_Type_U16] = ir_InstrKind_Store2,$/;"	v
ir_Type_U16	$C2_ROOT/output/c2c/cgen/build.c	/^   [ir_Type_U16] = ir_InstrKind_Store2,$/;"	v
ir_Type_U16	$C2_ROOT/output/c2c/cgen/ir_context.c	/^   [ir_Type_U16] = ir_InstrKind_Store2,$/;"	v
ir_Type_U16	$C2_ROOT/output/c2c_trace/cgen/ir_context.c	/^   [ir_Type_U16] = ir_InstrKind_Store2,$/;"	v
ir_Type_U32	$C2_ROOT/bootstrap/bootstrap.c	/^   [ir_Type_U32] = ir_InstrKind_Store4,$/;"	v
ir_Type_U32	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [ir_Type_U32] = ir_InstrKind_Store4,$/;"	v
ir_Type_U32	$C2_ROOT/output/c2c/cgen/build.c	/^   [ir_Type_U32] = ir_InstrKind_Store4,$/;"	v
ir_Type_U32	$C2_ROOT/output/c2c/cgen/ir_context.c	/^   [ir_Type_U32] = ir_InstrKind_Store4,$/;"	v
ir_Type_U32	$C2_ROOT/output/c2c_trace/cgen/ir_context.c	/^   [ir_Type_U32] = ir_InstrKind_Store4,$/;"	v
ir_Type_U64	$C2_ROOT/bootstrap/bootstrap.c	/^   [ir_Type_U64] = ir_InstrKind_Store8,$/;"	v
ir_Type_U64	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [ir_Type_U64] = ir_InstrKind_Store8,$/;"	v
ir_Type_U64	$C2_ROOT/output/c2c/cgen/build.c	/^   [ir_Type_U64] = ir_InstrKind_Store8,$/;"	v
ir_Type_U64	$C2_ROOT/output/c2c/cgen/ir_context.c	/^   [ir_Type_U64] = ir_InstrKind_Store8,$/;"	v
ir_Type_U64	$C2_ROOT/output/c2c_trace/cgen/ir_context.c	/^   [ir_Type_U64] = ir_InstrKind_Store8,$/;"	v
ir_Type_U8	$C2_ROOT/bootstrap/bootstrap.c	/^   [ir_Type_U8] = ir_InstrKind_Store1,$/;"	v
ir_Type_U8	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [ir_Type_U8] = ir_InstrKind_Store1,$/;"	v
ir_Type_U8	$C2_ROOT/output/c2c/cgen/build.c	/^   [ir_Type_U8] = ir_InstrKind_Store1,$/;"	v
ir_Type_U8	$C2_ROOT/output/c2c/cgen/ir_context.c	/^   [ir_Type_U8] = ir_InstrKind_Store1,$/;"	v
ir_Type_U8	$C2_ROOT/output/c2c_trace/cgen/ir_context.c	/^   [ir_Type_U8] = ir_InstrKind_Store1,$/;"	v
ir_context	$C2_ROOT/ir/constant.c2	/^module ir_context;$/;"	m
ir_context	$C2_ROOT/ir/constant_list.c2	/^module ir_context;$/;"	m
ir_context	$C2_ROOT/ir/context.c2	/^module ir_context;$/;"	m
ir_context	$C2_ROOT/ir/graphviz.c2	/^module ir_context;$/;"	m
ir_context	$C2_ROOT/ir/init_value.c2	/^module ir_context;$/;"	m
ir_context	$C2_ROOT/ir/init_value_list.c2	/^module ir_context;$/;"	m
ir_context	$C2_ROOT/ir/print.c2	/^module ir_context;$/;"	m
ir_context	$C2_ROOT/ir/register_alloc.c2	/^module ir_context;$/;"	m
ir_context	$C2_ROOT/ir/ssa.c2	/^module ir_context;$/;"	m
ir_context	$C2_ROOT/ir/switch.c2	/^module ir_context;$/;"	m
ir_context	$C2_ROOT/ir/symbol_list.c2	/^module ir_context;$/;"	m
ir_context	$C2_ROOT/ir/work_queue.c2	/^module ir_context;$/;"	m
ir_copy_list	$C2_ROOT/ir/copy_list.c2	/^module ir_copy_list;$/;"	m
ir_gen_locals	$C2_ROOT/generator/ir/ir_generator_locals.c2	/^module ir_gen_locals;$/;"	m
ir_generator	$C2_ROOT/generator/ir/basic_struct_layouter.c2	/^module ir_generator;$/;"	m
ir_generator	$C2_ROOT/generator/ir/field_struct_layouter.c2	/^module ir_generator;$/;"	m
ir_generator	$C2_ROOT/generator/ir/ir_generator.c2	/^module ir_generator;$/;"	m
ir_generator	$C2_ROOT/generator/ir/ir_generator_binop.c2	/^module ir_generator;$/;"	m
ir_generator	$C2_ROOT/generator/ir/ir_generator_call.c2	/^module ir_generator;$/;"	m
ir_generator	$C2_ROOT/generator/ir/ir_generator_expr.c2	/^module ir_generator;$/;"	m
ir_generator	$C2_ROOT/generator/ir/ir_generator_member.c2	/^module ir_generator;$/;"	m
ir_generator	$C2_ROOT/generator/ir/ir_generator_stmt.c2	/^module ir_generator;$/;"	m
ir_generator	$C2_ROOT/generator/ir/ir_generator_switch.c2	/^module ir_generator;$/;"	m
ir_inserter	$C2_ROOT/ir/inserter.c2	/^module ir_inserter;$/;"	m
ir_interference_graph	$C2_ROOT/ir/interference_graph.c2	/^module ir_interference_graph;$/;"	m
ir_live_map	$C2_ROOT/ir/live_map.c2	/^module ir_live_map;$/;"	m
ir_lookup_table	$C2_ROOT/ir/lookup_table.c2	/^module ir_lookup_table;$/;"	m
ir_rev_list	$C2_ROOT/ir/rev_list.c2	/^module ir_rev_list;$/;"	m
ir_rpo	$C2_ROOT/ir/rpo.c2	/^module ir_rpo;$/;"	m
ir_slot_collector	$C2_ROOT/ir/slot_collector.c2	/^module ir_slot_collector;$/;"	m
ir_slot_values	$C2_ROOT/ir/slot_values.c2	/^module ir_slot_values;$/;"	m
ir_slot_writes_map	$C2_ROOT/ir/slot_writes_map.c2	/^module ir_slot_writes_map;$/;"	m
is	$C2_ROOT/analyser/module_analyser_expr.c2	/^        ma.error(ref.getLoc(), "used type '%s' where arithmetic or pointer type is required", de/;"	t
is	$C2_ROOT/compiler/c2recipe_parser.c2	/^fn bool Parser.is(const Parser* p, Kind kind) {$/;"	f
is	$C2_ROOT/output/c2c/cgen/c_generator.c	/^      const char builtin_defs[167] = "\/\/ Note: this module is a special case and is custom gen/;"	m
is	$C2_ROOT/output/c2c/cgen/module_analyser.c	/^      module_analyser_Analyser_error(ma, ast_TypeRef_getLoc(ref), "used type '%s' where arithmet/;"	t
is	$C2_ROOT/output/c2c_trace/cgen/c_generator.c	/^      const char builtin_defs[167] = "\/\/ Note: this module is a special case and is custom gen/;"	m
is	$C2_ROOT/output/c2c_trace/cgen/module_analyser.c	/^      (c2_trace_counts[6024]++, module_analyser_Analyser_error)(ma, (c2_trace_counts[6025]++, as/;"	t
is	$C2_ROOT/parser/c2_parser_expr.c2	/^   set if an array type is parsed.$/;"	t
isAddrOf	$C2_ROOT/ast/unary_operator.c2	/^public fn bool UnaryOperator.isAddrOf(const UnaryOperator* e) {$/;"	f
isAddrUsed	$C2_ROOT/ast/var_decl.c2	/^public fn bool VarDecl.isAddrUsed(const VarDecl* d) {$/;"	f
isArithmetic	$C2_ROOT/ir/instr.c2	/^fn bool Instr.isArithmetic(const Instr* i) {$/;"	f
isArray	$C2_ROOT/ast/init_list_expr.c2	/^public fn bool InitListExpr.isArray(const InitListExpr* e) {$/;"	f
isArray	$C2_ROOT/ast/qualtype.c2	/^public fn bool QualType.isArray(const QualType* qt) {$/;"	f
isArray	$C2_ROOT/ast/type_ref.c2	/^public fn bool TypeRefHolder.isArray(const TypeRefHolder* h) {$/;"	f
isArrayDesignatedInit	$C2_ROOT/ast/expr.c2	/^public fn bool Expr.isArrayDesignatedInit(const Expr* e) {$/;"	f
isArrayToPointerDecay	$C2_ROOT/ast/implicit_cast_expr.c2	/^public fn bool ImplicitCastExpr.isArrayToPointerDecay(const ImplicitCastExpr* e) {$/;"	f
isArrayType	$C2_ROOT/ast/type.c2	/^public fn bool Type.isArrayType(const Type* t) {$/;"	f
isAssignment	$C2_ROOT/ast/expr.c2	/^public fn bool Expr.isAssignment(const Expr* e) {$/;"	f
isAvailableDynamic	$C2_ROOT/common/component.c2	/^public fn bool Component.isAvailableDynamic(const Component* c) { return c.available_dynamic; }$/;"	f
isAvailableStatic	$C2_ROOT/common/component.c2	/^public fn bool Component.isAvailableStatic(const Component* c) { return c.available_static; }$/;"	f
isBefore	$C2_ROOT/ast/unary_operator.c2	/^public fn bool UnaryOperator.isBefore(const UnaryOperator* e) {$/;"	f
isBinaryOperator	$C2_ROOT/ast/expr.c2	/^public fn bool Expr.isBinaryOperator(const Expr* e) {$/;"	f
isBitField	$C2_ROOT/ast/var_decl.c2	/^fn bool VarDecl.isBitField(const VarDecl* d) {$/;"	f
isBitOffset	$C2_ROOT/ast/expr.c2	/^public fn bool Expr.isBitOffset(const Expr* e) {$/;"	f
isBitfield	$C2_ROOT/ast/decl.c2	/^public fn bool Decl.isBitfield(const Decl* d) {$/;"	f
isBitfield	$C2_ROOT/ast/expr.c2	/^public fn bool Expr.isBitfield(const Expr* e) {$/;"	f
isBitfield	$C2_ROOT/ast/member_expr.c2	/^fn bool MemberExpr.isBitfield(const MemberExpr* e) {$/;"	f
isBlockTerminated	$C2_ROOT/ir/context.c2	/^public fn bool Context.isBlockTerminated(const Context* c) {$/;"	f
isBool	$C2_ROOT/ast/builtin_type.c2	/^public fn bool BuiltinType.isBool(const BuiltinType* b) {$/;"	f
isBool	$C2_ROOT/ast/qualtype.c2	/^public fn bool QualType.isBool(const QualType* qt) {$/;"	f
isBuiltin	$C2_ROOT/ast/qualtype.c2	/^public fn bool QualType.isBuiltin(const QualType* qt) {$/;"	f
isBuiltin	$C2_ROOT/ast/type_ref.c2	/^fn bool TypeRef.isBuiltin(const TypeRef* r) {$/;"	f
isBuiltinType	$C2_ROOT/ast/type.c2	/^fn bool Type.isBuiltinType(const Type* t) {$/;"	f
isBuiltinType	$C2_ROOT/parser/token.c2	/^public fn bool Kind.isBuiltinType(Kind kind) {$/;"	f
isCall	$C2_ROOT/ast/expr.c2	/^public fn bool Expr.isCall(const Expr* e) {$/;"	f
isChar	$C2_ROOT/ast/builtin_type.c2	/^fn bool BuiltinType.isChar(const BuiltinType* b) {$/;"	f
isChar	$C2_ROOT/ast/qualtype.c2	/^public fn bool QualType.isChar(const QualType* qt) {$/;"	f
isCharPointer	$C2_ROOT/ast/qualtype.c2	/^public fn bool QualType.isCharPointer(const QualType* qt) {$/;"	f
isCheckInProgress	$C2_ROOT/ast/decl.c2	/^public fn bool Decl.isCheckInProgress(const Decl* d) { return d.declBits.check_state == DeclChec/;"	f
isChecked	$C2_ROOT/ast/decl.c2	/^public fn bool Decl.isChecked(const Decl* d) { return d.declBits.check_state == DeclCheckState.C/;"	f
isComment	$C2_ROOT/ir/instr.c2	/^public fn bool Instr.isComment(const Instr* i) {$/;"	f
isComparison	$C2_ROOT/ast/binary_operator.c2	/^public fn bool BinaryOpcode.isComparison(BinaryOpcode opcode) {$/;"	f
isCompound	$C2_ROOT/ast/stmt.c2	/^public fn bool Stmt.isCompound(const Stmt* s) {$/;"	f
isConst	$C2_ROOT/ast/qualtype.c2	/^public fn bool QualType.isConst(QualType* qt) {$/;"	f
isConst	$C2_ROOT/ast/type_ref.c2	/^public fn bool TypeRef.isConst(const TypeRef* r) {$/;"	f
isConstBase	$C2_ROOT/ast/member_expr.c2	/^fn bool MemberExpr.isConstBase(const MemberExpr* e) {$/;"	f
isConstCharPtr	$C2_ROOT/ast/type_ref.c2	/^public fn bool TypeRef.isConstCharPtr(const TypeRef* r) {$/;"	f
isConstPtr	$C2_ROOT/ast/qualtype.c2	/^public fn bool QualType.isConstPtr(QualType* qt) {$/;"	f
isConstant	$C2_ROOT/ast/qualtype.c2	/^public fn bool QualType.isConstant(const QualType* qt) {$/;"	f
isConstant	$C2_ROOT/ir/ref.c2	/^public fn bool Ref.isConstant(const Ref* r) @(unused) {$/;"	f
isCopy	$C2_ROOT/ir/instr.c2	/^public fn bool Instr.isCopy(const Instr* i) {$/;"	f
isCtc	$C2_ROOT/ast/expr.c2	/^public fn bool Expr.isCtc(const Expr* e) { return e.base.exprBits.is_ctc; }$/;"	f
isCtv	$C2_ROOT/ast/expr.c2	/^public fn bool Expr.isCtv(const Expr* e) { return e.base.exprBits.is_ctv; }$/;"	f
isDecimal	$C2_ROOT/ast/integer_literal.c2	/^public fn bool IntegerLiteral.isDecimal(const IntegerLiteral* e) {$/;"	f
isDecimal	$C2_ROOT/ast/value.c2	/^public fn bool Value.isDecimal(const Value* v) {$/;"	f
isDecl	$C2_ROOT/ast/stmt.c2	/^public fn bool Stmt.isDecl(const Stmt* s) {$/;"	f
isDeclaration	$C2_ROOT/parser/c2_parser_stmt.c2	/^fn bool Parser.isDeclaration(Parser* p) {$/;"	f
isDefault	$C2_ROOT/ast/switch_case.c2	/^public fn bool SwitchCase.isDefault(const SwitchCase* s) { return s.bits.is_default; }$/;"	f
isDirect	$C2_ROOT/ast/module.c2	/^public fn bool Module.isDirect(const Module* m) { return m.is_direct; }$/;"	f
isEmbedType	$C2_ROOT/ast/qualtype.c2	/^public fn bool QualType.isEmbedType(const QualType* qt, bool* is_char) {$/;"	f
isEmpty	$C2_ROOT/common/file/reader.c2	/^public fn bool File.isEmpty(const File* file) @(unused) {$/;"	f
isEmpty	$C2_ROOT/common/linked_list.c2	/^public fn bool Element.isEmpty(const Element* src) @(unused) {$/;"	f
isEntryPoint	$C2_ROOT/generator/generator_utils.c2	/^fn bool isEntryPoint(Decl* d) {$/;"	f
isEnum	$C2_ROOT/ast/decl.c2	/^public fn bool Decl.isEnum(const Decl* d) {$/;"	f
isEnum	$C2_ROOT/ast/qualtype.c2	/^public fn bool QualType.isEnum(const QualType* qt) {$/;"	f
isEnumConstant	$C2_ROOT/ast/decl.c2	/^public fn bool Decl.isEnumConstant(const Decl* d) {$/;"	f
isEnumType	$C2_ROOT/ast/type.c2	/^fn bool Type.isEnumType(const Type* t) {$/;"	f
isError	$C2_ROOT/ast/value.c2	/^fn bool Value.isError(const Value* v) {$/;"	f
isExported	$C2_ROOT/ast/decl.c2	/^public fn bool Decl.isExported(const Decl* d) { return d.declBits.attr_export; }$/;"	f
isExported	$C2_ROOT/ast/module.c2	/^public fn bool Module.isExported(const Module* m) { return m.is_exported; }$/;"	f
isExpr	$C2_ROOT/ast/stmt.c2	/^public fn bool Stmt.isExpr(const Stmt* s) {$/;"	f
isExternal	$C2_ROOT/ast/decl.c2	/^public fn bool Decl.isExternal(const Decl* d) { return d.declBits.is_external; }$/;"	f
isExternal	$C2_ROOT/ast/module.c2	/^public fn bool Module.isExternal(const Module* m) { return m.is_external; }$/;"	f
isExternal	$C2_ROOT/common/component.c2	/^public fn bool Component.isExternal(const Component* c) {$/;"	f
isExternal	$C2_ROOT/generator/ir/ir_generator.c2	/^fn bool Generator.isExternal(Generator* gen, const Decl* d) {$/;"	f
isFallthrough	$C2_ROOT/ast/stmt.c2	/^public fn bool Stmt.isFallthrough(const Stmt* s) {$/;"	f
isFieldDesignatedInit	$C2_ROOT/ast/expr.c2	/^public fn bool Expr.isFieldDesignatedInit(const Expr* e) {$/;"	f
isFloat	$C2_ROOT/ast/qualtype.c2	/^public fn bool QualType.isFloat(const QualType* qt) {$/;"	f
isFloat	$C2_ROOT/ast/value.c2	/^public fn bool Value.isFloat(const Value* v) {$/;"	f
isFloatingPoint	$C2_ROOT/ast/builtin_type.c2	/^public fn bool BuiltinType.isFloatingPoint(const BuiltinType* b) {$/;"	f
isForeign	$C2_ROOT/ast/module.c2	/^public fn bool Module.isForeign(const Module* m) { return m.is_foreign; }$/;"	f
isFullscreen	$C2_ROOT/libs/sokol/sokol_app.c2i	/^fn bool isFullscreen() @(cname="sapp_is_fullscreen");$/;"	f
isFullscreen	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^fn bool isFullscreen() @(cname="sapp_is_fullscreen");$/;"	f
isFunction	$C2_ROOT/ast/decl.c2	/^public fn bool Decl.isFunction(const Decl* d) {$/;"	f
isFunction	$C2_ROOT/ast/qualtype.c2	/^public fn bool QualType.isFunction(const QualType* qt) {$/;"	f
isFunctionType	$C2_ROOT/ast/decl.c2	/^public fn bool Decl.isFunctionType(const Decl* d) {$/;"	f
isFunctionType	$C2_ROOT/ast/type.c2	/^fn bool Type.isFunctionType(const Type* t) {$/;"	f
isGenerated	$C2_ROOT/ast/ast.c2	/^public fn bool AST.isGenerated(const AST* a) @(unused) {$/;"	f
isGenerated	$C2_ROOT/ast/decl.c2	/^public fn bool Decl.isGenerated(const Decl* d) { return d.declBits.is_generated; }$/;"	f
isGlobal	$C2_ROOT/ast/decl.c2	/^public fn bool Decl.isGlobal(const Decl* d) {$/;"	f
isGlobal	$C2_ROOT/ast/struct_type_decl.c2	/^public fn bool StructTypeDecl.isGlobal(const StructTypeDecl* d) {$/;"	f
isGlobal	$C2_ROOT/ast/var_decl.c2	/^public fn bool VarDecl.isGlobal(const VarDecl* d) {$/;"	f
isGlobal	$C2_ROOT/plugins/deps_generator_utils.c2	/^public fn bool isGlobal(const Decl* d) @(unused) {$/;"	f
isIdentifier	$C2_ROOT/ast/expr.c2	/^public fn bool Expr.isIdentifier(const Expr* e) {$/;"	f
isImplicitCast	$C2_ROOT/ast/expr.c2	/^public fn bool Expr.isImplicitCast(const Expr* e) {$/;"	f
isImport	$C2_ROOT/ast/decl.c2	/^public fn bool Decl.isImport(const Decl* d) {$/;"	f
isIncrArray	$C2_ROOT/ast/type_ref.c2	/^public fn bool TypeRefHolder.isIncrArray(const TypeRefHolder* h) {$/;"	f
isIncremental	$C2_ROOT/ast/array_type.c2	/^public fn bool ArrayType.isIncremental(const ArrayType* t) {$/;"	f
isIncremental	$C2_ROOT/ast/enum_type_decl.c2	/^public fn bool EnumTypeDecl.isIncremental(const EnumTypeDecl* d) {$/;"	f
isInitList	$C2_ROOT/ast/expr.c2	/^public fn bool Expr.isInitList(const Expr* e) {$/;"	f
isInitlistAssignment	$C2_ROOT/ast/expr.c2	/^public fn bool Expr.isInitlistAssignment(const Expr* e) {$/;"	f
isInline	$C2_ROOT/ast/function_decl.c2	/^public fn bool FunctionDecl.isInline(const FunctionDecl* d) {$/;"	f
isInt32	$C2_ROOT/ast/builtin_type.c2	/^public fn bool BuiltinType.isInt32(const BuiltinType* b) {$/;"	f
isInt8	$C2_ROOT/ast/builtin_type.c2	/^fn bool BuiltinType.isInt8(const BuiltinType* b) {$/;"	f
isInt8	$C2_ROOT/ast/qualtype.c2	/^public fn bool QualType.isInt8(const QualType* qt) {$/;"	f
isInteger	$C2_ROOT/ast/builtin_type.c2	/^public fn bool BuiltinType.isInteger(const BuiltinType* b) {$/;"	f
isInteger	$C2_ROOT/ast/qualtype.c2	/^public fn bool QualType.isInteger(const QualType* qt) {$/;"	f
isIntegerOrBool	$C2_ROOT/ast/builtin_type.c2	/^public fn bool BuiltinType.isIntegerOrBool(const BuiltinType* b) {$/;"	f
isInterface	$C2_ROOT/ast/ast.c2	/^public fn bool AST.isInterface(const AST* a) @(unused) {$/;"	f
isInternal	$C2_ROOT/ast/module.c2	/^public fn bool Module.isInternal(const Module* m) { return m.is_internal; }$/;"	f
isInternal	$C2_ROOT/common/component.c2	/^public fn bool Component.isInternal(const Component* c) @(unused) {$/;"	f
isInvalid	$C2_ROOT/ast/qualtype.c2	/^public fn bool QualType.isInvalid(const QualType* qt) { return qt.ptr == 0; }$/;"	f
isKeyword	$C2_ROOT/parser/token.c2	/^public fn bool Kind.isKeyword(Kind kind) {$/;"	f
isLValue	$C2_ROOT/ast/expr.c2	/^public fn bool Expr.isLValue(const Expr* e) {$/;"	f
isLabel	$C2_ROOT/ast/stmt.c2	/^public fn bool Stmt.isLabel(const Stmt* s) {$/;"	f
isLibrary	$C2_ROOT/common/component.c2	/^public fn bool Component.isLibrary(const Component* c) {$/;"	f
isLoaded	$C2_ROOT/ast/module.c2	/^public fn bool Module.isLoaded(const Module* m) { return m.is_loaded; }$/;"	f
isLocal	$C2_ROOT/ast/import_decl.c2	/^public fn bool ImportDecl.isLocal(const ImportDecl* d) { return d.base.importDeclBits.is_local; /;"	f
isLocal	$C2_ROOT/ast/var_decl.c2	/^public fn bool VarDecl.isLocal(const VarDecl* d) {$/;"	f
isMap	$C2_ROOT/common/yaml/yaml_iterator.c2	/^public fn bool Node.isMap(const Node* n) @(unused) { return n.kind == NodeKind.Map; }$/;"	f
isMember	$C2_ROOT/ast/expr.c2	/^public fn bool Expr.isMember(const Expr* e) {$/;"	f
isMemberType	$C2_ROOT/ast/function_decl.c2	/^public fn bool FunctionDecl.isMemberType(const FunctionDecl* d) {$/;"	f
isNValue	$C2_ROOT/ast/expr.c2	/^public fn bool Expr.isNValue(const Expr* e) {$/;"	f
isNegative	$C2_ROOT/ast/value.c2	/^public fn bool Value.isNegative(const Value* v) {$/;"	f
isNil	$C2_ROOT/ast/expr.c2	/^public fn bool Expr.isNil(const Expr* e) {$/;"	f
isNoReturn	$C2_ROOT/analyser/module_analyser_stmt.c2	/^fn bool Analyser.isNoReturn(Analyser* ma, Expr* e) {$/;"	f
isNone	$C2_ROOT/ir/instr.c2	/^public fn bool Instr.isNone(const Instr* i) {$/;"	f
isNone	$C2_ROOT/ir/ref.c2	/^public fn bool Ref.isNone(const Ref* r) {$/;"	f
isNoreturn	$C2_ROOT/ast/call_expr.c2	/^public fn bool CallExpr.isNoreturn(const CallExpr* e) {$/;"	f
isOk	$C2_ROOT/common/diagnostics.c2	/^public fn bool Diags.isOk(const Diags* diags) { return diags.num_errors == 0; }$/;"	f
isOpaque	$C2_ROOT/ast/struct_type_decl.c2	/^public fn bool StructTypeDecl.isOpaque(const StructTypeDecl* d) {$/;"	f
isOpen	$C2_ROOT/common/file/reader.c2	/^public fn bool File.isOpen(const File* file) @(unused) {$/;"	f
isPacked	$C2_ROOT/ast/struct_type_decl.c2	/^public fn bool StructTypeDecl.isPacked(const StructTypeDecl* d) {$/;"	f
isParameter	$C2_ROOT/ast/var_decl.c2	/^public fn bool VarDecl.isParameter(const VarDecl* d) {$/;"	f
isParen	$C2_ROOT/ast/expr.c2	/^fn bool Expr.isParen(const Expr* e) {$/;"	f
isPhi	$C2_ROOT/ir/instr.c2	/^public fn bool Instr.isPhi(const Instr* i) {$/;"	f
isPointer	$C2_ROOT/ast/qualtype.c2	/^public fn bool QualType.isPointer(const QualType* qt) {$/;"	f
isPointer	$C2_ROOT/ast/type_ref.c2	/^public fn bool TypeRefHolder.isPointer(const TypeRefHolder* h) {$/;"	f
isPointerOrFunction	$C2_ROOT/ast/qualtype.c2	/^public fn bool QualType.isPointerOrFunction(const QualType* qt) @(unused) {$/;"	f
isPointerTo	$C2_ROOT/ast/type_ref.c2	/^public fn bool TypeRef.isPointerTo(const TypeRef* r, u32 ptr_idx) {$/;"	f
isPointerType	$C2_ROOT/ast/type.c2	/^public fn bool Type.isPointerType(const Type* t) {$/;"	f
isPowerOf2	$C2_ROOT/ast_utils/attr.c2	/^fn bool isPowerOf2(u32 val) {$/;"	f
isPrintfCall	$C2_ROOT/ast/call_expr.c2	/^fn bool CallExpr.isPrintfCall(const CallExpr* e) {$/;"	f
isPromotableIntegerType	$C2_ROOT/ast/builtin_type.c2	/^public fn bool BuiltinType.isPromotableIntegerType(const BuiltinType* b) {$/;"	f
isPseudo	$C2_ROOT/ir/instr.c2	/^public fn bool Instr.isPseudo(const Instr* i) {$/;"	f
isPublic	$C2_ROOT/ast/decl.c2	/^public fn bool Decl.isPublic(const Decl* d) { return d.declBits.is_public; }$/;"	f
isQualifier	$C2_ROOT/parser/token.c2	/^public fn bool Kind.isQualifier(Kind kind) {$/;"	f
isRValue	$C2_ROOT/ast/expr.c2	/^public fn bool Expr.isRValue(const Expr* e) {$/;"	f
isRange	$C2_ROOT/ast/expr.c2	/^public fn bool Expr.isRange(const Expr* e) {$/;"	f
isRegister	$C2_ROOT/ir/ref.c2	/^public fn bool Ref.isRegister(const Ref* r) {$/;"	f
isReturn	$C2_ROOT/ir/instr.c2	/^public fn bool Instr.isReturn(const Instr* i) {$/;"	f
isScalar	$C2_ROOT/ast/qualtype.c2	/^public fn bool QualType.isScalar(const QualType* qt) {$/;"	f
isScalar	$C2_ROOT/common/yaml/yaml_iterator.c2	/^fn bool Node.isScalar(const Node* n) @(unused) { return n.kind == NodeKind.Scalar; }$/;"	f
isScreenKeyboardShown	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn bool isScreenKeyboardShown(Window* window) @(cname="SDL_IsScreenKeyboardShown");$/;"	f
isSequence	$C2_ROOT/common/yaml/yaml_iterator.c2	/^public fn bool Node.isSequence(const Node* n) @(unused) { return n.kind == NodeKind.Sequence; }$/;"	f
isSigned	$C2_ROOT/ast/builtin_type.c2	/^public fn bool BuiltinType.isSigned(const BuiltinType* b) {$/;"	f
isSlot	$C2_ROOT/ir/ref.c2	/^public fn bool Ref.isSlot(const Ref* r) {$/;"	f
isStaticLib	$C2_ROOT/common/component.c2	/^public fn bool Component.isStaticLib(const Component* c) {$/;"	f
isStaticTypeFunc	$C2_ROOT/ast/call_expr.c2	/^public fn bool CallExpr.isStaticTypeFunc(const CallExpr* e) {$/;"	f
isStaticTypeFunc	$C2_ROOT/ast/member_expr.c2	/^public fn bool MemberExpr.isStaticTypeFunc(const MemberExpr* e) {$/;"	f
isString	$C2_ROOT/ast/switch_stmt.c2	/^public fn bool SwitchStmt.isString(const SwitchStmt* s) {$/;"	f
isStringLiteral	$C2_ROOT/ast/expr.c2	/^public fn bool Expr.isStringLiteral(const Expr* e) {$/;"	f
isStruct	$C2_ROOT/ast/qualtype.c2	/^public fn bool QualType.isStruct(const QualType* qt) {$/;"	f
isStruct	$C2_ROOT/ast/struct_type_decl.c2	/^public fn bool StructTypeDecl.isStruct(const StructTypeDecl* d) {$/;"	f
isStructMember	$C2_ROOT/ast/var_decl.c2	/^fn bool VarDecl.isStructMember(const VarDecl* d) {$/;"	f
isStructType	$C2_ROOT/ast/decl.c2	/^public fn bool Decl.isStructType(const Decl* d) {$/;"	f
isStructType	$C2_ROOT/ast/type.c2	/^public fn bool Type.isStructType(const Type* t) {$/;"	f
isSwitch	$C2_ROOT/ir/instr.c2	/^public fn bool Instr.isSwitch(const Instr* i) {$/;"	f
isTemp	$C2_ROOT/ir/ref.c2	/^public fn bool Ref.isTemp(const Ref* r) {$/;"	f
isTemplate	$C2_ROOT/ast/function_decl.c2	/^public fn bool FunctionDecl.isTemplate(const FunctionDecl* d) {$/;"	f
isTemplateCall	$C2_ROOT/ast/call_expr.c2	/^public fn bool CallExpr.isTemplateCall(const CallExpr* e) {$/;"	f
isTemplateFunctionCall	$C2_ROOT/parser/c2_parser_expr.c2	/^fn bool Parser.isTemplateFunctionCall(Parser* p) {$/;"	f
isTextInputActive	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn bool isTextInputActive() @(cname="SDL_IsTextInputActive");$/;"	f
isTextInputShown	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn bool isTextInputShown() @(cname="SDL_IsTextInputShown");$/;"	f
isTilde	$C2_ROOT/ast/expr.c2	/^public fn bool Expr.isTilde(const Expr* e) {$/;"	f
isType	$C2_ROOT/ast/expr.c2	/^public fn bool Expr.isType(const Expr* e) {$/;"	f
isType	$C2_ROOT/ast/function_decl.c2	/^public fn bool FunctionDecl.isType(const FunctionDecl* d) {$/;"	f
isTypeDecl	$C2_ROOT/ast/decl.c2	/^public fn bool Decl.isTypeDecl(const Decl* d) {$/;"	f
isTypeFunc	$C2_ROOT/ast/call_expr.c2	/^public fn bool CallExpr.isTypeFunc(const CallExpr* e) {$/;"	f
isTypeFunc	$C2_ROOT/ast/member_expr.c2	/^public fn bool MemberExpr.isTypeFunc(const MemberExpr* e) {$/;"	f
isTypeSpec	$C2_ROOT/parser/c2_parser_stmt.c2	/^fn bool Parser.isTypeSpec(Parser* p) {$/;"	f
isU32	$C2_ROOT/ast/type_ref.c2	/^public fn bool TypeRef.isU32(const TypeRef* r) {$/;"	f
isUInt8	$C2_ROOT/ast/builtin_type.c2	/^fn bool BuiltinType.isUInt8(const BuiltinType* b) {$/;"	f
isUInt8	$C2_ROOT/ast/qualtype.c2	/^public fn bool QualType.isUInt8(const QualType* qt) {$/;"	f
isUnaryOp	$C2_ROOT/ast/expr.c2	/^public fn bool Expr.isUnaryOp(const Expr* e) {$/;"	f
isUnion	$C2_ROOT/ast/struct_type_decl.c2	/^public fn bool StructTypeDecl.isUnion(const StructTypeDecl* d) {$/;"	f
isUnreachable	$C2_ROOT/analyser/scope.c2	/^public fn bool Scope.isUnreachable(const Scope* s) {$/;"	f
isUnsigned	$C2_ROOT/ast/builtin_type.c2	/^public fn bool BuiltinType.isUnsigned(const BuiltinType* b) {$/;"	f
isUnsigned	$C2_ROOT/ast/qualtype.c2	/^public fn bool QualType.isUnsigned(const QualType* qt) {$/;"	f
isUsed	$C2_ROOT/ast/decl.c2	/^public fn bool Decl.isUsed(const Decl* d) { return d.declBits.is_used; }$/;"	f
isUsed	$C2_ROOT/ast/label_stmt.c2	/^public fn bool LabelStmt.isUsed(const LabelStmt* s) {$/;"	f
isUsed	$C2_ROOT/ast/module.c2	/^public fn bool Module.isUsed(const Module* m) { return m.is_used; }$/;"	f
isUsedPublic	$C2_ROOT/ast/decl.c2	/^public fn bool Decl.isUsedPublic(const Decl* d) { return d.declBits.is_used_public; }$/;"	f
isUser	$C2_ROOT/ast/type_ref.c2	/^public fn bool TypeRef.isUser(const TypeRef* r) {$/;"	f
isValid	$C2_ROOT/ast/qualtype.c2	/^public fn bool QualType.isValid(const QualType* qt) { return qt.ptr != 0; }$/;"	f
isValid	$C2_ROOT/ir/ref.c2	/^public fn bool Ref.isValid(const Ref* r) {$/;"	f
isValue	$C2_ROOT/ir/ref.c2	/^public fn bool Ref.isValue(const Ref* r) {$/;"	f
isVarDecl	$C2_ROOT/ast/decl.c2	/^public fn bool Decl.isVarDecl(const Decl* d) {$/;"	f
isVarKind	$C2_ROOT/ast/member_expr.c2	/^public fn bool MemberExpr.isVarKind(const MemberExpr* e) {$/;"	f
isVariable	$C2_ROOT/ast/decl.c2	/^public fn bool Decl.isVariable(const Decl* d) {$/;"	f
isVariadic	$C2_ROOT/ast/function_decl.c2	/^public fn bool FunctionDecl.isVariadic(const FunctionDecl* d) {$/;"	f
isVoid	$C2_ROOT/ast/builtin_type.c2	/^fn bool BuiltinType.isVoid(const BuiltinType* b) {$/;"	f
isVoid	$C2_ROOT/ast/qualtype.c2	/^public fn bool QualType.isVoid(const QualType* qt) {$/;"	f
isVoid	$C2_ROOT/ast/type_ref.c2	/^public fn bool TypeRef.isVoid(const TypeRef* r) {$/;"	f
isVoidType	$C2_ROOT/ast/type.c2	/^public fn bool Type.isVoidType(const Type* t) {$/;"	f
isVolatile	$C2_ROOT/ast/asm_stmt.c2	/^public fn bool AsmStmt.isVolatile(const AsmStmt* s) {$/;"	f
isVolatile	$C2_ROOT/ast/qualtype.c2	/^public fn bool QualType.isVolatile(QualType* qt) {$/;"	f
isVolatile	$C2_ROOT/ast/type_ref.c2	/^public fn bool TypeRef.isVolatile(const TypeRef* r) {$/;"	f
isZero	$C2_ROOT/ast/value.c2	/^public fn bool Value.isZero(const Value* v) {$/;"	f
isZeroSizeBitfield	$C2_ROOT/ast/struct_type_decl.c2	/^public fn bool FieldInitField.isZeroSizeBitfield(const FieldInitField* f) {$/;"	f
is_attribute	$C2_ROOT/tools/c2cat.c2	/^fn bool is_attribute(const char* str) {$/;"	f
is_binary	$C2_ROOT/parser/c2_tokenizer.c2	/^fn bool is_binary(char c) {$/;"	f
is_c_type	$C2_ROOT/generator/c/c_generator.c2	/^fn bool is_c_type(const char* s) {$/;"	f
is_dir	$C2_ROOT/common/file/file_utils.c2	/^public fn bool is_dir(const char* dirname) @(unused) {$/;"	f
is_enabled	$C2_ROOT/parser/c2_tokenizer.c2	/^fn bool Tokenizer.is_enabled(const Tokenizer* t) {$/;"	f
is_equal	$C2_ROOT/ast/value.c2	/^public fn bool Value.is_equal(const Value* v1, const Value* v2) {$/;"	f
is_file	$C2_ROOT/common/file/file_utils.c2	/^public fn bool is_file(const char* filename) @(unused) {$/;"	f
is_greater	$C2_ROOT/ast/value.c2	/^fn bool Value.is_greater(const Value* v1, const Value* v2) {$/;"	f
is_greater_equal	$C2_ROOT/ast/value.c2	/^fn bool Value.is_greater_equal(const Value* v1, const Value* v2) {$/;"	f
is_less	$C2_ROOT/ast/value.c2	/^public fn bool Value.is_less(const Value* v1, const Value* v2) {$/;"	f
is_less_equal	$C2_ROOT/ast/value.c2	/^fn bool Value.is_less_equal(const Value* v1, const Value* v2) {$/;"	f
is_name	$C2_ROOT/compiler/c2recipe_parser.c2	/^fn bool is_name(char c) {$/;"	f
is_octal	$C2_ROOT/parser/c2_tokenizer.c2	/^fn bool is_octal(char c) {$/;"	f
is_plugin	$C2_ROOT/compiler/plugin_mgr.c2	/^fn bool is_plugin(const Dirent* entry) {$/;"	f
is_string	$C2_ROOT/common/yaml/yaml_tokenizer.c2	/^fn bool is_string(char c) {$/;"	f
isalnum	$C2_ROOT/libs/libc/ctype.c2i	/^fn c_int isalnum(c_int c) @(pure);$/;"	f
isalpha	$C2_ROOT/libs/libc/ctype.c2i	/^fn c_int isalpha(c_int c) @(pure);$/;"	f
isascii	$C2_ROOT/libs/libc/ctype.c2i	/^fn c_int isascii(c_int c) @(pure);$/;"	f
isatty	$C2_ROOT/libs/libc/unistd.c2i	/^fn c_int isatty(c_int fd);$/;"	f
isblank	$C2_ROOT/libs/libc/ctype.c2i	/^fn c_int isblank(c_int c) @(pure);$/;"	f
iscfunction	$C2_ROOT/libs/lua/lua.c2i	/^fn c_int iscfunction(State *L, c_int idx) @(cname="lua_iscfunction");$/;"	f
iscntrl	$C2_ROOT/libs/libc/ctype.c2i	/^fn c_int iscntrl(c_int c) @(pure);$/;"	f
isdigit	$C2_ROOT/libs/libc/ctype.c2i	/^fn c_int isdigit(c_int c) @(pure);$/;"	f
isfinite	$C2_ROOT/ast/value.c2	/^fn bool isfinite(f64 d) {$/;"	f
isfinite	$C2_ROOT/libs/math/math.c2i	/^fn c_int isfinite(c_double) @(cname="__isfinited");$/;"	f
isfinitef	$C2_ROOT/libs/math/math.c2i	/^fn c_int isfinitef(c_float) @(cname="__isfinitef");$/;"	f
isgraph	$C2_ROOT/libs/libc/ctype.c2i	/^fn c_int isgraph(c_int c) @(pure);$/;"	f
isinf	$C2_ROOT/libs/math/math.c2i	/^fn c_int isinf(c_double) @(cname="__isinfd");$/;"	f
isinff	$C2_ROOT/libs/math/math.c2i	/^fn c_int isinff(c_float) @(cname="__isinff");$/;"	f
isinteger	$C2_ROOT/libs/lua/lua.c2i	/^fn c_int isinteger(State *L, c_int idx) @(cname="lua_isinteger");$/;"	f
isize	$C2_ROOT/libs/c2/isize.c2i	/^module isize;$/;"	m
islower	$C2_ROOT/libs/libc/ctype.c2i	/^fn c_int islower(c_int c) @(pure);$/;"	f
isnan	$C2_ROOT/libs/math/math.c2i	/^fn c_int isnan(c_double x) { return x != x; }$/;"	f
isnanf	$C2_ROOT/libs/math/math.c2i	/^fn c_int isnanf(c_float x) { return x != x; }$/;"	f
isnormal	$C2_ROOT/libs/math/math.c2i	/^fn c_int isnormal(c_double) @(cname="__isnormald");$/;"	f
isnormalf	$C2_ROOT/libs/math/math.c2i	/^fn c_int isnormalf(c_float) @(cname="__isnormalf");$/;"	f
isnumber	$C2_ROOT/libs/lua/lua.c2i	/^fn c_int isnumber(State *L, c_int idx) @(cname="lua_isnumber");$/;"	f
isprint	$C2_ROOT/libs/libc/ctype.c2i	/^fn c_int isprint(c_int c) @(pure);$/;"	f
ispunct	$C2_ROOT/libs/libc/ctype.c2i	/^fn c_int ispunct(c_int c) @(pure);$/;"	f
isspace	$C2_ROOT/libs/libc/ctype.c2i	/^fn c_int isspace(c_int c) @(pure);$/;"	f
isstring	$C2_ROOT/libs/lua/lua.c2i	/^fn c_int isstring(State *L, c_int idx) @(cname="lua_isstring");$/;"	f
issues	$C2_ROOT/tools/tester/issues.c2	/^module issues;$/;"	m
isupper	$C2_ROOT/libs/libc/ctype.c2i	/^fn c_int isupper(c_int c) @(pure);$/;"	f
isuserdata	$C2_ROOT/libs/lua/lua.c2i	/^fn c_int isuserdata(State *L, c_int idx) @(cname="lua_isuserdata");$/;"	f
isvalid	$C2_ROOT/libs/sokol/sokol_app.c2i	/^fn bool isvalid() @(cname="sapp_isvalid");$/;"	f
isvalid	$C2_ROOT/libs/sokol/sokol_audio.c2i	/^fn bool isvalid() @(cname="saudio_isvalid");$/;"	f
isvalid	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn bool isvalid() @(cname="sg_isvalid");$/;"	f
isvalid	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^fn bool isvalid() @(cname="sapp_isvalid");$/;"	f
isvalid	$C2_ROOT/libs/sokol_/sokol_audio.c2i	/^fn bool isvalid() @(cname="saudio_isvalid");$/;"	f
isvalid	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn bool isvalid() @(cname="sg_isvalid");$/;"	f
isxdigit	$C2_ROOT/libs/libc/ctype.c2i	/^fn c_int isxdigit(c_int c) @(pure);$/;"	f
isyieldable	$C2_ROOT/libs/lua/lua.c2i	/^fn c_int isyieldable(State *L) @(cname="lua_isyieldable");$/;"	f
iterate	$C2_ROOT/generator/ir/array_init_sorter.c2	/^public fn void Sorter.iterate(const Sorter* s, OnExprFn on_expr, OnZeroFn on_zero, void* arg) {$/;"	f
iterate	$C2_ROOT/generator/radix_tree/radix_tree.c2	/^fn void Tree.iterate(const Tree* t, u32 node_idx, Iter* iter) {$/;"	f
join	$C2_ROOT/ir/work_queue.c2	/^fn void QueueWorker.join(QueueWorker* w) {$/;"	f
join	$C2_ROOT/libs/pthread/pthread.c2i	/^fn c_int join(Pthread thread, void** value_ptr) @(cname="pthread_join");$/;"	f
join	$C2_ROOT/tools/tester/tester.c2	/^fn void Tester.join(Tester* t) {$/;"	f
joint_tex	$C2_ROOT/libs/sokol/c/sokol_gfx.h	/^    @image_sample_type joint_tex unfilterable_float$/;"	t
joint_tex	$C2_ROOT/libs/sokol_/c/sokol_gfx.h	/^    @image_sample_type joint_tex unfilterable_float$/;"	t
jrand48	$C2_ROOT/libs/libc/stdlib.c2i	/^fn c_long jrand48(u16* __xsubi);$/;"	f
jrand48_r	$C2_ROOT/libs/libc/stdlib.c2i	/^fn c_int jrand48_r(u16* __xsubi, Drand48_data* __buffer, c_long* __result);$/;"	f
keyboardShown	$C2_ROOT/libs/sokol/sokol_app.c2i	/^fn bool keyboardShown() @(cname="sapp_keyboard_shown");$/;"	f
keyboardShown	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^fn bool keyboardShown() @(cname="sapp_keyboard_shown");$/;"	f
keywords	$C2_ROOT/parser/keywords.c2	/^module keywords;$/;"	m
kill	$C2_ROOT/libs/libc/unistd.c2i	/^fn c_int kill(Pid pid, c_int signal);$/;"	f
kind2name	$C2_ROOT/ast_utils/attr.c2	/^public fn const char* kind2name(AttrKind k) {$/;"	f
kind2str	$C2_ROOT/ast/builtin_type.c2	/^public fn const char* BuiltinType.kind2str(const BuiltinType* b) {$/;"	f
l64a	$C2_ROOT/libs/libc/stdlib.c2i	/^fn c_char* l64a(c_long n);$/;"	f
label_vector	$C2_ROOT/analyser/label_vector.c2	/^module label_vector;$/;"	m
labs	$C2_ROOT/libs/libc/stdlib.c2i	/^fn c_long labs(c_long __x);$/;"	f
laptime	$C2_ROOT/libs/sokol/sokol_time.c2i	/^fn u64 laptime(u64* last_time) @(cname="stm_laptime");$/;"	f
laptime	$C2_ROOT/libs/sokol_/sokol_time.c2i	/^fn u64 laptime(u64* last_time) @(cname="stm_laptime");$/;"	f
layer	$C2_ROOT/libs/sokol/sokol_debugtext.c2i	/^fn void layer(c_int layer_id) @(cname="sdtx_layer");$/;"	f
layer	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn void layer(c_int layer_id) @(cname="sgl_layer");$/;"	f
layer	$C2_ROOT/libs/sokol_/sokol_debugtext.c2i	/^fn void layer(c_int layer_id) @(cname="sdtx_layer");$/;"	f
layer	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn void layer(c_int layer_id) @(cname="sgl_layer");$/;"	f
lcong48	$C2_ROOT/libs/libc/stdlib.c2i	/^fn void lcong48(u16* __param);$/;"	f
lcong48_r	$C2_ROOT/libs/libc/stdlib.c2i	/^fn c_int lcong48_r(u16* __param, Drand48_data* __buffer);$/;"	f
ldexp	$C2_ROOT/libs/math/math.c2i	/^fn c_double ldexp(c_double, c_int);$/;"	f
ldexpf	$C2_ROOT/libs/math/math.c2i	/^fn c_float ldexpf(c_float, c_int);$/;"	f
ldiv	$C2_ROOT/libs/libc/stdlib.c2i	/^fn Ldiv_t ldiv(c_long __numer, c_long __denom);$/;"	f
leaveScope	$C2_ROOT/generator/ir/ir_generator.c2	/^fn void Generator.leaveScope(Generator* gen) {$/;"	f
left_shift	$C2_ROOT/ast/value.c2	/^fn Value Value.left_shift(const Value* v1, const Value* v2) {$/;"	f
left_shift2	$C2_ROOT/ast/value.c2	/^public fn void Value.left_shift2(Value* v, u32 shift) {$/;"	f
len	$C2_ROOT/libs/lua/lua.c2i	/^fn void len(State *L, c_int idx) @(cname="lua_len");$/;"	f
length	$C2_ROOT/common/module_list.c2	/^public fn u32 List.length(const List* l) { return l.num_mods; }$/;"	f
length	$C2_ROOT/common/string_list.c2	/^public fn u32 List.length(const List* l) {$/;"	f
length	$C2_ROOT/generator/c/c_generator_trace.c2	/^fn u32 StringList.length(StringList* sl) {$/;"	f
lex	$C2_ROOT/common/yaml/yaml_tokenizer.c2	/^fn void Tokenizer.lex(Tokenizer* t, Token* result) {$/;"	f
lex	$C2_ROOT/compiler/c2recipe_parser.c2	/^fn void Parser.lex(Parser* p, Token* result) {$/;"	f
lex	$C2_ROOT/parser/c2_tokenizer.c2	/^public fn void Tokenizer.lex(Tokenizer* t, Token* result) {$/;"	f
lex_block_comment	$C2_ROOT/parser/c2_tokenizer.c2	/^fn bool Tokenizer.lex_block_comment(Tokenizer* t, Token* result) {$/;"	f
lex_char_literal	$C2_ROOT/parser/c2_tokenizer.c2	/^fn void Tokenizer.lex_char_literal(Tokenizer* t, Token* result) {$/;"	f
lex_comment	$C2_ROOT/common/yaml/yaml_tokenizer.c2	/^fn void Tokenizer.lex_comment(Tokenizer* t) {$/;"	f
lex_directive	$C2_ROOT/common/yaml/yaml_tokenizer.c2	/^fn void Tokenizer.lex_directive(Tokenizer* t, Token* result) {$/;"	f
lex_escaped_char	$C2_ROOT/parser/c2_tokenizer.c2	/^fn u32 Tokenizer.lex_escaped_char(Tokenizer* t, Token* result, const char* stype) {$/;"	f
lex_floating_point	$C2_ROOT/parser/c2_tokenizer.c2	/^fn void Tokenizer.lex_floating_point(Tokenizer* t, Token* result, const char* start) {$/;"	f
lex_floating_point_hex	$C2_ROOT/parser/c2_tokenizer.c2	/^fn void Tokenizer.lex_floating_point_hex(Tokenizer* t, Token* result, const char* start) {$/;"	f
lex_identifier	$C2_ROOT/parser/c2_tokenizer.c2	/^fn void Tokenizer.lex_identifier(Tokenizer* t, Token* result) {$/;"	f
lex_indent	$C2_ROOT/common/yaml/yaml_tokenizer.c2	/^fn bool Tokenizer.lex_indent(Tokenizer* t, Token* result) {$/;"	f
lex_line_comment	$C2_ROOT/parser/c2_tokenizer.c2	/^fn bool Tokenizer.lex_line_comment(Tokenizer* t, Token* result) {$/;"	f
lex_next	$C2_ROOT/common/yaml/yaml_tokenizer.c2	/^fn Token* Tokenizer.lex_next(Tokenizer* t) {$/;"	f
lex_number	$C2_ROOT/parser/c2_tokenizer.c2	/^fn void Tokenizer.lex_number(Tokenizer* t, Token* result) {$/;"	f
lex_number_error	$C2_ROOT/parser/c2_tokenizer.c2	/^fn void Tokenizer.lex_number_error(Tokenizer* t, Token* result, const char *p, const char *qual)/;"	f
lex_option	$C2_ROOT/compiler/c2recipe_parser.c2	/^fn void Parser.lex_option(Parser* p, Token* result) {$/;"	f
lex_plugin_options	$C2_ROOT/compiler/c2recipe_parser.c2	/^fn void Parser.lex_plugin_options(Parser* p, Token* result) {$/;"	f
lex_preproc	$C2_ROOT/parser/c2_tokenizer.c2	/^fn Kind Tokenizer.lex_preproc(Tokenizer* t, Token* result) {$/;"	f
lex_quoted_string	$C2_ROOT/common/yaml/yaml_tokenizer.c2	/^fn void Tokenizer.lex_quoted_string(Tokenizer* t, Token* result, char delim) {$/;"	f
lex_raw_string_literal	$C2_ROOT/parser/c2_tokenizer.c2	/^fn void Tokenizer.lex_raw_string_literal(Tokenizer* t, Token* result) {$/;"	f
lex_set_use	$C2_ROOT/compiler/c2recipe_parser.c2	/^fn void Parser.lex_set_use(Parser* p, Token* result) {$/;"	f
lex_string	$C2_ROOT/common/yaml/yaml_tokenizer.c2	/^fn void Tokenizer.lex_string(Tokenizer* t, Token* result) {$/;"	f
lex_string_literal	$C2_ROOT/parser/c2_tokenizer.c2	/^fn void Tokenizer.lex_string_literal(Tokenizer* t, Token* result) {$/;"	f
lgamma	$C2_ROOT/libs/math/math.c2i	/^fn c_double lgamma(c_double);$/;"	f
lgammaf	$C2_ROOT/libs/math/math.c2i	/^fn c_float lgammaf(c_float);$/;"	f
libc_dirent	$C2_ROOT/libs/libc/libc_dirent.c2i	/^module libc_dirent;$/;"	m
libc_fcntl	$C2_ROOT/libs/libc/libc_fcntl.c2i	/^module libc_fcntl;$/;"	m
libc_poll	$C2_ROOT/libs/libc/libc_poll.c2i	/^module libc_poll;$/;"	m
libc_time	$C2_ROOT/libs/libc/libc_time.c2i	/^module libc_time;$/;"	m
libgen	$C2_ROOT/libs/libc/libgen.c2i	/^module libgen;$/;"	m
library_list	$C2_ROOT/common/library_list.c2	/^module library_list;$/;"	m
line_db	$C2_ROOT/tools/tester/line_db.c2	/^module line_db;$/;"	m
linked_list	$C2_ROOT/common/linked_list.c2	/^module linked_list;$/;"	m
linux_ifether	$C2_ROOT/libs/libc/linux_ifether.c2i	/^module linux_ifether;$/;"	m
linux_sockios	$C2_ROOT/libs/libc/linux_sockios.c2i	/^module linux_sockios;$/;"	m
linux_types	$C2_ROOT/libs/libc/linux_types.c2i	/^module linux_types;$/;"	m
list_calls	$C2_ROOT/generator/c2_trace.c2	/^fn void list_calls() @(destructor, unused) {$/;"	f
list_calls	output/bootstrap/c2c	/^fn void list_calls() @(destructor, unused) {$/;"	f
list_calls	output/c2c/c2c	/^fn void list_calls() @(destructor, unused) {$/;"	f
list_calls	output/c2c_trace/c2c_trace	/^fn void list_calls() @(destructor, unused) {$/;"	f
listen	$C2_ROOT/libs/libc/sys_socket.c2i	/^fn c_int listen(c_int sockfd, c_int backlog);$/;"	f
llrint	$C2_ROOT/libs/math/math.c2i	/^fn c_longlong llrint(c_double);$/;"	f
llrintf	$C2_ROOT/libs/math/math.c2i	/^fn c_longlong llrintf(c_float);$/;"	f
llround	$C2_ROOT/libs/math/math.c2i	/^fn c_longlong llround(c_double);$/;"	f
llroundf	$C2_ROOT/libs/math/math.c2i	/^fn c_longlong llroundf(c_float);$/;"	f
lnot	$C2_ROOT/ast/value.c2	/^fn Value Value.lnot(const Value* v) {$/;"	f
load	$C2_ROOT/common/file/reader.c2	/^public fn bool File.load(File* file) {$/;"	f
load	$C2_ROOT/generator/c2refs.c2	/^public fn Refs* Refs.load(const char* filename) {$/;"	f
load	$C2_ROOT/generator/radix_tree/radix_tree_fs.c2	/^public fn Tree* load(InputStream* input) {$/;"	f
load	$C2_ROOT/libs/lua/lua.c2i	/^fn c_int load(State *L, Reader reader, void *dt,$/;"	f
load	$C2_ROOT/libs/sdl2_image/sdl_image.c2i	/^fn sdl.Surface* load(const char* file) @(cname="IMG_Load");$/;"	f
load	$C2_ROOT/plugins/deps_generator_plugin.c2	/^fn void* load(const char* options, bool show_timing, bool show_debug) {$/;"	f
load	$C2_ROOT/plugins/git_version_plugin.c2	/^fn void* load(const char* options, bool show_timing, bool show_debug) {$/;"	f
load	$C2_ROOT/plugins/refs_generator_plugin.c2	/^fn void* load(const char* options, bool show_timing, bool show_debug) {$/;"	f
load	$C2_ROOT/plugins/shell_cmd_plugin.c2	/^fn void* load(const char* options, bool show_timing, bool show_debug) {$/;"	f
load	$C2_ROOT/plugins/unit_test_plugin.c2	/^fn void* load(const char* options, bool show_timing, bool show_debug) {$/;"	f
loadBMP_RW	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn Surface* loadBMP_RW(RWops* src, c_int freesrc) @(cname="SDL_LoadBMP_RW");$/;"	f
loadDefaultPipeline	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn void loadDefaultPipeline() @(cname="sgl_load_default_pipeline");$/;"	f
loadDefaultPipeline	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn void loadDefaultPipeline() @(cname="sgl_load_default_pipeline");$/;"	f
loadFile	$C2_ROOT/common/source_mgr.c2	/^public fn i32 SourceMgr.loadFile(SourceMgr* sm, const char* filename, SrcLoc sloc) {$/;"	f
loadGlobal	$C2_ROOT/compiler/plugin_mgr.c2	/^public fn bool Mgr.loadGlobal(Mgr* m, u32 name, u32 options) {$/;"	f
loadIdentity	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn void loadIdentity() @(cname="sgl_load_identity");$/;"	f
loadIdentity	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn void loadIdentity() @(cname="sgl_load_identity");$/;"	f
loadLocal	$C2_ROOT/compiler/plugin_mgr.c2	/^public fn bool Mgr.loadLocal(Mgr* m, u32 name, u32 options) {$/;"	f
loadMatrix	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn void loadMatrix(c_float* m) @(cname="sgl_load_matrix");$/;"	f
loadMatrix	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn void loadMatrix(c_float* m) @(cname="sgl_load_matrix");$/;"	f
loadPipeline	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn void loadPipeline(Pipeline pip) @(cname="sgl_load_pipeline");$/;"	f
loadPipeline	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn void loadPipeline(Pipeline pip) @(cname="sgl_load_pipeline");$/;"	f
loadPlugin	$C2_ROOT/compiler/plugin_mgr.c2	/^fn bool Mgr.loadPlugin(Mgr* m, u32 name, u32 options, bool is_global) {$/;"	f
loadTransposeMatrix	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn void loadTransposeMatrix(c_float* m) @(cname="sgl_load_transpose_matrix");$/;"	f
loadTransposeMatrix	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn void loadTransposeMatrix(c_float* m) @(cname="sgl_load_transpose_matrix");$/;"	f
load_internal	$C2_ROOT/generator/c2refs.c2	/^fn Refs* Refs.load_internal(MapFile f) {$/;"	f
load_libs	$C2_ROOT/compiler/compiler_libs.c2	/^fn void Compiler.load_libs(Compiler* c) {$/;"	f
loc2dest	$C2_ROOT/generator/c2refs.c2	/^fn Dest Refs.loc2dest(const Refs* r, u32 loc) {$/;"	f
loc2offset	$C2_ROOT/plugins/refs_generator.c2	/^fn u32 LineCounter.loc2offset(const LineCounter* l, Loc loc) {$/;"	f
loc2str	$C2_ROOT/common/source_mgr.c2	/^public fn char* SourceMgr.loc2str(SourceMgr* sm, SrcLoc sloc, char* tmp, usize tmp_size) {$/;"	f
loc2uses	$C2_ROOT/generator/c2refs.c2	/^fn void Refs.loc2uses(const Refs* r, u32 src_loc, RefUsesFn func, void* arg, u16* symbol_len) {$/;"	f
localtime	$C2_ROOT/libs/libc/libc_time.c2i	/^fn Tm* localtime(const Time* timep);$/;"	f
localtime_r	$C2_ROOT/libs/libc/libc_time.c2i	/^fn Tm* localtime_r(const Time* timep, Tm* result);$/;"	f
locate	$C2_ROOT/common/source_mgr.c2	/^public fn Location SourceMgr.locate(SourceMgr* sm, SrcLoc loc) {$/;"	f
lock	$C2_ROOT/libs/pthread/pthread.c2i	/^fn c_int Mutex.lock(Mutex* mutex) @(cname="pthread_mutex_lock");$/;"	f
lock	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn c_int Texture.lock(Texture* texture, const Rect* rect, void** pixels, c_int* pitch)  @(cname=/;"	f
lockMouse	$C2_ROOT/libs/sokol/sokol_app.c2i	/^fn void lockMouse(bool lock) @(cname="sapp_lock_mouse");$/;"	f
lockMouse	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^fn void lockMouse(bool lock) @(cname="sapp_lock_mouse");$/;"	f
log	$C2_ROOT/common/console.c2	/^public fn void log(const char* format @(printf_format), ...) {$/;"	f
log	$C2_ROOT/libs/math/math.c2i	/^fn c_double log(c_double);$/;"	f
log	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn void log(const char* fmt @(printf_format), ...) @(cname="SDL_Log");$/;"	f
log	$C2_ROOT/output/unit_test/libunit_test.dylib	/^public fn void log(const char* fmt @(printf_format), ...) {$/;"	f
log	$C2_ROOT/plugins/unit_test1.c2	/^public fn void log(const char* fmt @(printf_format), ...) {$/;"	f
log10	$C2_ROOT/libs/math/math.c2i	/^fn c_double log10(c_double);$/;"	f
log10f	$C2_ROOT/libs/math/math.c2i	/^fn c_float log10f(c_float);$/;"	f
log1p	$C2_ROOT/libs/math/math.c2i	/^fn c_double log1p(c_double);$/;"	f
log1pf	$C2_ROOT/libs/math/math.c2i	/^fn c_float log1pf(c_float);$/;"	f
log2	$C2_ROOT/libs/math/math.c2i	/^fn c_double log2(c_double);$/;"	f
log2f	$C2_ROOT/libs/math/math.c2i	/^fn c_float log2f(c_float);$/;"	f
log_time	$C2_ROOT/common/console.c2	/^public fn void log_time(const char* item, u64 duration) {$/;"	f
logb	$C2_ROOT/libs/math/math.c2i	/^fn c_double logb(c_double);$/;"	f
logbf	$C2_ROOT/libs/math/math.c2i	/^fn c_float logbf(c_float);$/;"	f
logf	$C2_ROOT/libs/math/math.c2i	/^fn c_float logf(c_float);$/;"	f
longjmp	$C2_ROOT/libs/libc/csetjmp.c2i	/^fn void longjmp(JmpBuf __env, i32 __val) @(noreturn);$/;"	f
lookat	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn void lookat(c_float eye_x, c_float eye_y, c_float eye_z, c_float center_x, c_float center_y, /;"	f
lookat	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn void lookat(c_float eye_x, c_float eye_y, c_float eye_z, c_float center_x, c_float center_y, /;"	f
lparen	$C2_ROOT/ast_utils/string_buffer.c2	/^public fn void Buf.lparen(Buf* buf) { buf.add1('('); }$/;"	f
lrand48	$C2_ROOT/libs/libc/stdlib.c2i	/^fn c_long lrand48();$/;"	f
lrand48_r	$C2_ROOT/libs/libc/stdlib.c2i	/^fn c_int lrand48_r(Drand48_data* __buffer, c_long* __result);$/;"	f
lrint	$C2_ROOT/libs/math/math.c2i	/^fn c_long lrint(c_double);$/;"	f
lrintf	$C2_ROOT/libs/math/math.c2i	/^fn c_long lrintf(c_float);$/;"	f
lround	$C2_ROOT/libs/math/math.c2i	/^fn c_long lround(c_double);$/;"	f
lroundf	$C2_ROOT/libs/math/math.c2i	/^fn c_long lroundf(c_float);$/;"	f
lseek	$C2_ROOT/libs/libc/unistd.c2i	/^fn c_ulong lseek (i32 fd, c_ulong offset, i32 whence);$/;"	f
lstat	$C2_ROOT/libs/libc/sys_stat.c2i	/^fn c_int lstat(const c_char* pathname, Stat* buf);$/;"	f
lua	$C2_ROOT/libs/lua/lua.c2i	/^module lua;$/;"	m
luaL_loadfilex	$C2_ROOT/libs/lua/lua_auxlib.c2i	/^fn c_int luaL_loadfilex(State *L, const c_char* filename, const c_char* mode);$/;"	f
luaL_newstate	$C2_ROOT/libs/lua/lua_auxlib.c2i	/^fn State* luaL_newstate();$/;"	f
luaL_openlibs	$C2_ROOT/libs/lua/lua_lib.c2i	/^fn void luaL_openlibs(State* L);$/;"	f
luaL_requiref	$C2_ROOT/libs/lua/lua_auxlib.c2i	/^fn void luaL_requiref(State *L, const c_char* modname,$/;"	f
lua_auxlib	$C2_ROOT/libs/lua/lua_auxlib.c2i	/^module lua_auxlib;$/;"	m
lua_lib	$C2_ROOT/libs/lua/lua_lib.c2i	/^module lua_lib;$/;"	m
lua_type	$C2_ROOT/libs/lua/lua.c2i	/^fn c_int lua_type(State *L, c_int idx) @(cname="lua_type");$/;"	f
luaopen_base	$C2_ROOT/libs/lua/lua_lib.c2i	/^fn i32 luaopen_base(State *L);$/;"	f
luaopen_bit32	$C2_ROOT/libs/lua/lua_lib.c2i	/^fn i32 luaopen_bit32(State *L);$/;"	f
luaopen_coroutine	$C2_ROOT/libs/lua/lua_lib.c2i	/^fn i32 luaopen_coroutine(State *L);$/;"	f
luaopen_debug	$C2_ROOT/libs/lua/lua_lib.c2i	/^fn i32 luaopen_debug(State *L);$/;"	f
luaopen_io	$C2_ROOT/libs/lua/lua_lib.c2i	/^fn i32 luaopen_io(State *L);$/;"	f
luaopen_math	$C2_ROOT/libs/lua/lua_lib.c2i	/^fn i32 luaopen_math(State *L);$/;"	f
luaopen_os	$C2_ROOT/libs/lua/lua_lib.c2i	/^fn i32 luaopen_os(State *L);$/;"	f
luaopen_package	$C2_ROOT/libs/lua/lua_lib.c2i	/^fn i32 luaopen_package(State *L);$/;"	f
luaopen_string	$C2_ROOT/libs/lua/lua_lib.c2i	/^fn i32 luaopen_string(State *L);$/;"	f
luaopen_table	$C2_ROOT/libs/lua/lua_lib.c2i	/^fn i32 luaopen_table(State *L);$/;"	f
luaopen_utf8	$C2_ROOT/libs/lua/lua_lib.c2i	/^fn i32 luaopen_utf8(State *L);$/;"	f
macosGetWindow	$C2_ROOT/libs/sokol/sokol_app.c2i	/^fn void* macosGetWindow() @(cname="sapp_macos_get_window");$/;"	f
macosGetWindow	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^fn void* macosGetWindow() @(cname="sapp_macos_get_window");$/;"	f
main	$C2_ROOT/bootstrap/bootstrap.c	/^   string_buffer_Buf_print(buf, "module %s_main;\\n\\npublic fn i32 main(i32 argc, char** argv) /;"	f
main	$C2_ROOT/compiler/main.c2	/^public fn i32 main(i32 argc, char** argv) {$/;"	f
main	$C2_ROOT/ir_examples/arith.c2	/^public fn i32 main(i32 argc, const char** argv) {$/;"	f
main	$C2_ROOT/ir_examples/array.c2	/^public fn i32 main() {$/;"	f
main	$C2_ROOT/ir_examples/builtins.c2	/^public fn i32 main() {$/;"	f
main	$C2_ROOT/ir_examples/calls.c2	/^public fn i32 main(i32 argc, const char** argv) {$/;"	f
main	$C2_ROOT/ir_examples/cond_decl.c2	/^public fn i32 main(i32 argc, const char** argv) {$/;"	f
main	$C2_ROOT/ir_examples/for.c2	/^public fn i32 main() {$/;"	f
main	$C2_ROOT/ir_examples/functions.c2	/^public fn i32 main(i32 argc, const char** argv) {$/;"	f
main	$C2_ROOT/ir_examples/global_arrays.c2	/^public fn i32 main() {$/;"	f
main	$C2_ROOT/ir_examples/global_vars.c2	/^public fn i32 main() {$/;"	f
main	$C2_ROOT/ir_examples/goto.c2	/^public fn i32 main(i32 argc, const char** argv) {$/;"	f
main	$C2_ROOT/ir_examples/hello.c2	/^public fn i32 main(i32 argc, const char** argv) {$/;"	f
main	$C2_ROOT/ir_examples/if_stmt.c2	/^public fn i32 main(i32 argc, const char** argv) {$/;"	f
main	$C2_ROOT/ir_examples/label.c2	/^public fn i32 main() {$/;"	f
main	$C2_ROOT/ir_examples/logic.c2	/^public fn i32 main() {$/;"	f
main	$C2_ROOT/ir_examples/members.c2	/^public fn i32 main() {$/;"	f
main	$C2_ROOT/ir_examples/struct_func.c2	/^public fn i32 main() {$/;"	f
main	$C2_ROOT/ir_examples/struct_init.c2	/^public fn i32 main() {$/;"	f
main	$C2_ROOT/ir_examples/struct_init_anonymous.c2	/^public fn i32 main() {$/;"	f
main	$C2_ROOT/ir_examples/swap.c2	/^public fn i32 main() {$/;"	f
main	$C2_ROOT/ir_examples/types.c2	/^public fn i32 main() {$/;"	f
main	$C2_ROOT/ir_examples/while.c2	/^public fn i32 main(i32 argc, const char** argv) {$/;"	f
main	output/bootstrap/bootstrap	/^public fn i32 main(i32 argc, char** argv) {$/;"	f
main	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   string_buffer_Buf_print(buf, "module %s_main;\\n\\npublic fn i32 main(i32 argc, char** argv) /;"	f
main	output/bootstrap/c2c	/^public fn i32 main(i32 argc, char** argv) {$/;"	f
main	output/c2c/c2c	/^public fn i32 main(i32 argc, char** argv) {$/;"	f
main	$C2_ROOT/output/c2c/cgen/build.c	/^   string_buffer_Buf_print(buf, "module %s_main;\\n\\npublic fn i32 main(i32 argc, char** argv) /;"	f
main	$C2_ROOT/output/c2c/cgen/c2c_main.c	/^   string_buffer_Buf_print(buf, "module %s_main;\\n\\npublic fn i32 main(i32 argc, char** argv) /;"	f
main	output/c2c_trace/c2c_trace	/^public fn i32 main(i32 argc, char** argv) {$/;"	f
main	$C2_ROOT/output/c2c_trace/cgen/c2c_main.c	/^   (c2_trace_counts[12262]++, string_buffer_Buf_print)(buf, "module %s_main;\\n\\npublic fn i32 /;"	f
main	$C2_ROOT/tools/c2cat.c2	/^public fn i32 main(i32 argc, const char** argv)$/;"	f
main	$C2_ROOT/tools/c2loc.c2	/^public fn i32 main(i32 argc, const char** argv)$/;"	f
main	$C2_ROOT/tools/c2rename.c2	/^public fn i32 main(i32 argc, const char** argv)$/;"	f
main	$C2_ROOT/tools/c2tags.c2	/^public fn i32 main(i32 argc, const char** argv)$/;"	f
main	$C2_ROOT/tools/tester/tester.c2	/^public fn i32 main(i32 argc, char** argv) {$/;"	f
makeBuffer	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn Buffer makeBuffer(BufferDesc* desc) @(cname="sg_make_buffer");$/;"	f
makeBuffer	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn Buffer makeBuffer(BufferDesc* desc) @(cname="sg_make_buffer");$/;"	f
makeContext	$C2_ROOT/libs/sokol/sokol_debugtext.c2i	/^fn Context makeContext(ContextDesc* desc) @(cname="sdtx_make_context");$/;"	f
makeContext	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn Context makeContext(ContextDesc* desc) @(cname="sgl_make_context");$/;"	f
makeContext	$C2_ROOT/libs/sokol_/sokol_debugtext.c2i	/^fn Context makeContext(ContextDesc* desc) @(cname="sdtx_make_context");$/;"	f
makeContext	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn Context makeContext(ContextDesc* desc) @(cname="sgl_make_context");$/;"	f
makeImage	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn Image makeImage(ImageDesc* desc) @(cname="sg_make_image");$/;"	f
makeImage	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn Image makeImage(ImageDesc* desc) @(cname="sg_make_image");$/;"	f
makePipeline	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn Pipeline makePipeline(PipelineDesc* desc) @(cname="sg_make_pipeline");$/;"	f
makePipeline	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn Pipeline makePipeline(PipelineDesc* desc) @(cname="sgl_make_pipeline");$/;"	f
makePipeline	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn Pipeline makePipeline(PipelineDesc* desc) @(cname="sg_make_pipeline");$/;"	f
makePipeline	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn Pipeline makePipeline(PipelineDesc* desc) @(cname="sgl_make_pipeline");$/;"	f
makeSampler	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn Sampler makeSampler(SamplerDesc* desc) @(cname="sg_make_sampler");$/;"	f
makeSampler	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn Sampler makeSampler(SamplerDesc* desc) @(cname="sg_make_sampler");$/;"	f
makeShader	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn Shader makeShader(ShaderDesc* desc) @(cname="sg_make_shader");$/;"	f
makeShader	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn Shader makeShader(ShaderDesc* desc) @(cname="sg_make_shader");$/;"	f
makeView	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn View makeView(ViewDesc* desc) @(cname="sg_make_view");$/;"	f
makeView	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn View makeView(ViewDesc* desc) @(cname="sg_make_view");$/;"	f
make_path	$C2_ROOT/common/file/file_utils.c2	/^public fn const char* make_path(char *buf, usize size, const char* dir, const char* filename) {$/;"	f
make_path3	$C2_ROOT/common/file/file_utils.c2	/^public fn const char* make_path3(char *buf, usize size, const char* dir, const char* subdir, con/;"	f
make_path_ext	$C2_ROOT/common/file/file_utils.c2	/^public fn const char* make_path_ext(char *buf, usize size, const char* dir, const char* filename/;"	f
malloc	$C2_ROOT/libs/libc/stdlib.c2i	/^fn void* malloc(c_size size);$/;"	f
manifest	$C2_ROOT/compiler/manifest.c2	/^module manifest;$/;"	m
manifest_writer	$C2_ROOT/common/manifest_writer.c2	/^module manifest_writer;$/;"	m
mapRGB	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn u32 PixelFormat.mapRGB(const PixelFormat* format, u8 r, u8 g, u8 b) @(cname="SDL_MapRGB");$/;"	f
markUsedBlocks	$C2_ROOT/ir/context.c2	/^fn void Tools.markUsedBlocks(Tools* t, FunctionInfo* fi) {$/;"	f
mark_test_mode_decl	$C2_ROOT/generator/generator_utils.c2	/^fn void mark_test_mode_decl(void* arg, Decl* d) {$/;"	f
mark_test_mode_mod	$C2_ROOT/generator/generator_utils.c2	/^fn void mark_test_mode_mod(void* arg, ast.Module* m) {$/;"	f
mark_used	$C2_ROOT/generator/generator_utils.c2	/^public fn void mark_used(component.Component* mainComp, const module_list.List* allmodules, bool/;"	f
mark_used_decl	$C2_ROOT/generator/generator_utils.c2	/^fn void mark_used_decl(void* arg, const Ref* ref) {$/;"	f
mask	$C2_ROOT/ast/value.c2	/^public fn void Value.mask(Value* v, u32 width) {$/;"	f
mat4	$C2_ROOT/libs/sokol/sokol_shape.c2i	/^fn Mat4 mat4(c_float* m) @(cname="sshape_mat4");$/;"	f
mat4	$C2_ROOT/libs/sokol_/sokol_shape.c2i	/^fn Mat4 mat4(c_float* m) @(cname="sshape_mat4");$/;"	f
mat4Transpose	$C2_ROOT/libs/sokol/sokol_shape.c2i	/^fn Mat4 mat4Transpose(c_float* m) @(cname="sshape_mat4_transpose");$/;"	f
mat4Transpose	$C2_ROOT/libs/sokol_/sokol_shape.c2i	/^fn Mat4 mat4Transpose(c_float* m) @(cname="sshape_mat4_transpose");$/;"	f
matchError	$C2_ROOT/tools/tester/test_db.c2	/^fn void Db.matchError(Db* db, const char* filename, i32 linenr, const char* msg) {$/;"	f
matchNote	$C2_ROOT/tools/tester/test_db.c2	/^fn void Db.matchNote(Db* db, const char* filename, i32 linenr, const char* msg) {$/;"	f
matchWarning	$C2_ROOT/tools/tester/test_db.c2	/^fn void Db.matchWarning(Db* db, const char* filename, i32 linenr, const char* msg) {$/;"	f
match_name	$C2_ROOT/generator/c2_trace.c2	/^fn bool match_name(const char *name, const char *pattern) {$/;"	f
match_name	output/bootstrap/c2c	/^fn bool match_name(const char *name, const char *pattern) {$/;"	f
match_name	output/c2c/c2c	/^fn bool match_name(const char *name, const char *pattern) {$/;"	f
match_name	$C2_ROOT/output/c2c/cgen/build.c	/^static const char compiler_C2_trace[4472] = "module c2_trace;\\n\\nimport c2_trace_tables local;/;"	f
match_name	$C2_ROOT/output/c2c/cgen/compiler.c	/^static const char compiler_C2_trace[4472] = "module c2_trace;\\n\\nimport c2_trace_tables local;/;"	f
match_name	output/c2c_trace/c2c_trace	/^fn bool match_name(const char *name, const char *pattern) {$/;"	f
match_name	$C2_ROOT/output/c2c_trace/cgen/compiler.c	/^static const char compiler_C2_trace[4472] = "module c2_trace;\\n\\nimport c2_trace_tables local;/;"	f
match_node	$C2_ROOT/generator/radix_tree/radix_tree.c2	/^fn u32 Tree.match_node(const Tree* t, u32 node_idx, const char* text, u32 len, u32* cur_match) {$/;"	f
match_pattern	$C2_ROOT/generator/c2_trace.c2	/^fn bool match_pattern(const char *name, const char *pattern) {$/;"	f
match_pattern	output/bootstrap/c2c	/^fn bool match_pattern(const char *name, const char *pattern) {$/;"	f
match_pattern	output/c2c/c2c	/^fn bool match_pattern(const char *name, const char *pattern) {$/;"	f
match_pattern	output/c2c_trace/c2c_trace	/^fn bool match_pattern(const char *name, const char *pattern) {$/;"	f
match_type	$C2_ROOT/generator/c/c_generator.c2	/^fn bool match_type(const char* s, const char* list, const char** sp) {$/;"	f
matchesTemplate	$C2_ROOT/ast/type_ref.c2	/^fn bool TypeRef.matchesTemplate(const TypeRef* r, u32 template_arg) {$/;"	f
math	$C2_ROOT/libs/math/math.c2i	/^module math;$/;"	m
matrixModeModelview	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn void matrixModeModelview() @(cname="sgl_matrix_mode_modelview");$/;"	f
matrixModeModelview	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn void matrixModeModelview() @(cname="sgl_matrix_mode_modelview");$/;"	f
matrixModeProjection	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn void matrixModeProjection() @(cname="sgl_matrix_mode_projection");$/;"	f
matrixModeProjection	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn void matrixModeProjection() @(cname="sgl_matrix_mode_projection");$/;"	f
matrixModeTexture	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn void matrixModeTexture() @(cname="sgl_matrix_mode_texture");$/;"	f
matrixModeTexture	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn void matrixModeTexture() @(cname="sgl_matrix_mode_texture");$/;"	f
mbedtls	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^module mbedtls;$/;"	m
mblen	$C2_ROOT/libs/libc/stdlib.c2i	/^fn c_int mblen(const c_char* __s, c_size __n);$/;"	f
mbstowcs	$C2_ROOT/libs/libc/stdlib.c2i	/^fn c_int mbstowcs(c_int* __pwcs, const c_char* __s, c_size __n);$/;"	f
mbtowc	$C2_ROOT/libs/libc/stdlib.c2i	/^fn c_int mbtowc(c_int* __pwc, const c_char* __s, c_size __n);$/;"	f
measureText	$C2_ROOT/libs/sdl2_ttf/sdl_ttf.c2i	/^fn c_int Font.measureText(Font* font, const char* text, c_int measure_width, c_int* extent, c_in/;"	f
member	$C2_ROOT/libs/sokol/c/sokol_gfx.h	/^    This is used in the sg_pipeline_desc.index_type member when creating a$/;"	t
member	$C2_ROOT/libs/sokol_/c/sokol_gfx.h	/^    This is used in the sg_pipeline_desc.index_type member when creating a$/;"	t
memberError	$C2_ROOT/analyser/module_analyser_expr.c2	/^fn void Analyser.memberError(Analyser* ma, u32 name_idx, SrcLoc loc, StructTypeDecl* s) {$/;"	f
memccpy	$C2_ROOT/libs/libc/string.c2i	/^fn void* memccpy(void* dest, const void* src, c_int c, c_size n);$/;"	f
memchr	$C2_ROOT/libs/libc/string.c2i	/^fn void* memchr(const void* s, c_int c, c_size n);$/;"	f
memcmp	$C2_ROOT/libs/libc/string.c2i	/^fn c_int memcmp(const void* s1, const void* s2, c_size n);$/;"	f
memcpy	$C2_ROOT/libs/libc/string.c2i	/^fn void* memcpy(void* dest, const void* src, c_size n);$/;"	f
memmem	$C2_ROOT/libs/libc/string.c2i	/^fn void* memmem(const void* s1, c_size size1, const void* s2, c_size size2);$/;"	f
memmove	$C2_ROOT/libs/libc/string.c2i	/^fn void* memmove(void* dest, const void* src, c_size n);$/;"	f
mempcpy	$C2_ROOT/libs/libc/string.c2i	/^fn void* mempcpy(void* dest, const void* src, c_size n);$/;"	f
memrchr	$C2_ROOT/libs/libc/string.c2i	/^fn void* memrchr(const void* s, c_int c, c_size n);$/;"	f
memset	$C2_ROOT/libs/libc/string.c2i	/^fn void* memset(void* s, c_int c, c_size n);$/;"	f
memset	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn void memset(void* dst, c_int c, usize len) @(cname="SDL_memset");$/;"	f
memset_explicit	$C2_ROOT/libs/libc/string.c2i	/^fn void* memset_explicit(void* s, c_int c, c_size n);$/;"	f
merge	$C2_ROOT/ir/block_list.c2	/^public fn void BlockList.merge(BlockList* l1, const BlockList* l2) {$/;"	f
merge	$C2_ROOT/ir/register_alloc.c2	/^fn void LiveVector.merge(LiveVector* v, u32 blk_id) {$/;"	f
mergeSmaller	$C2_ROOT/analyser/conversion_checker_expr.c2	/^fn ExprWidth ExprWidth.mergeSmaller(ExprWidth w1, ExprWidth w2) {$/;"	f
mergeWider	$C2_ROOT/analyser/conversion_checker_expr.c2	/^fn ExprWidth ExprWidth.mergeWider(ExprWidth w1, ExprWidth w2) {$/;"	f
merge_zones	$C2_ROOT/generator/radix_tree/radix_tree.c2	/^fn void Tree.merge_zones(Tree* t, Zone* zone) {$/;"	f
metalGetCurrentDrawable	$C2_ROOT/libs/sokol/sokol_app.c2i	/^fn void* metalGetCurrentDrawable() @(cname="sapp_metal_get_current_drawable");$/;"	f
metalGetCurrentDrawable	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^fn void* metalGetCurrentDrawable() @(cname="sapp_metal_get_current_drawable");$/;"	f
metalGetDepthStencilTexture	$C2_ROOT/libs/sokol/sokol_app.c2i	/^fn void* metalGetDepthStencilTexture() @(cname="sapp_metal_get_depth_stencil_texture");$/;"	f
metalGetDepthStencilTexture	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^fn void* metalGetDepthStencilTexture() @(cname="sapp_metal_get_depth_stencil_texture");$/;"	f
metalGetDevice	$C2_ROOT/libs/sokol/sokol_app.c2i	/^fn void* metalGetDevice() @(cname="sapp_metal_get_device");$/;"	f
metalGetDevice	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^fn void* metalGetDevice() @(cname="sapp_metal_get_device");$/;"	f
metalGetMsaaColorTexture	$C2_ROOT/libs/sokol/sokol_app.c2i	/^fn void* metalGetMsaaColorTexture() @(cname="sapp_metal_get_msaa_color_texture");$/;"	f
metalGetMsaaColorTexture	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^fn void* metalGetMsaaColorTexture() @(cname="sapp_metal_get_msaa_color_texture");$/;"	f
minus	$C2_ROOT/ast/value.c2	/^public fn Value Value.minus(const Value* v1, const Value* v2) {$/;"	f
mismatch	$C2_ROOT/libs/sokol/c/sokol_gfx.h	/^    _SG_LOGITEM_XMACRO(VALIDATE_ABND_EXPECT_TEXVIEW, "sg_apply_bindings: view type mismatch in b/;"	t
mismatch	$C2_ROOT/libs/sokol_/c/sokol_gfx.h	/^    _SG_LOGITEM_XMACRO(VALIDATE_ABND_EXPECT_TEXVIEW, "sg_apply_bindings: view type mismatch in b/;"	t
mismatches	$C2_ROOT/libs/sokol/c/sokol_gfx.h	/^    (other 3D APIs treat texture\/sampler type mismatches as undefined behaviour).$/;"	t
mismatches	$C2_ROOT/libs/sokol_/c/sokol_gfx.h	/^    (other 3D APIs treat texture\/sampler type mismatches as undefined behaviour).$/;"	t
missing_arg	$C2_ROOT/compiler/main.c2	/^fn void missing_arg(const char* option) {$/;"	f
mkdir	$C2_ROOT/libs/libc/sys_stat.c2i	/^fn c_int mkdir(const char* __file, c_uint mode);$/;"	f
mkdtemp	$C2_ROOT/libs/libc/stdlib.c2i	/^fn c_char* mkdtemp(c_char* __template);$/;"	f
mkstemp	$C2_ROOT/libs/libc/stdlib.c2i	/^fn c_int mkstemp(c_char* __template);$/;"	f
mkstemps	$C2_ROOT/libs/libc/stdlib.c2i	/^fn c_int mkstemps(c_char* __template, c_int __suffixlen);$/;"	f
mktemp	$C2_ROOT/libs/libc/stdlib.c2i	/^fn c_char* mktemp(c_char* __template);$/;"	f
mktime	$C2_ROOT/libs/libc/libc_time.c2i	/^fn Time mktime(Tm* tm);$/;"	f
mlock_size	$C2_ROOT/libs/io_uring/io_uring.c2i	/^fn isize mlock_size(u32 entries, u32 flags) @(cname="io_uring_mlock_size");$/;"	f
mlock_size_params	$C2_ROOT/libs/io_uring/io_uring.c2i	/^fn isize mlock_size_params(u32 entries, Params *p) @(cname="io_uring_mlock_size_params");$/;"	f
mmap	$C2_ROOT/libs/libc/sys_mman.c2i	/^fn void* mmap(void* addr, c_size length, c_int prot, c_int flags, c_int fd, Offset offset);$/;"	f
mod2idx	$C2_ROOT/analyser/module_sorter.c2	/^fn u32 ModuleSorter.mod2idx(const ModuleSorter* s, const ast.Module* mod) {$/;"	f
modf	$C2_ROOT/libs/math/math.c2i	/^fn c_double modf(c_double, c_double *);$/;"	f
modff	$C2_ROOT/libs/math/math.c2i	/^fn c_float modff(c_float, c_float *);$/;"	f
module_analyser	$C2_ROOT/analyser/module_analyser.c2	/^module module_analyser;$/;"	m
module_analyser	$C2_ROOT/analyser/module_analyser_binop.c2	/^module module_analyser;$/;"	m
module_analyser	$C2_ROOT/analyser/module_analyser_builtin.c2	/^module module_analyser;$/;"	m
module_analyser	$C2_ROOT/analyser/module_analyser_call.c2	/^module module_analyser;$/;"	m
module_analyser	$C2_ROOT/analyser/module_analyser_expr.c2	/^module module_analyser;$/;"	m
module_analyser	$C2_ROOT/analyser/module_analyser_function.c2	/^module module_analyser;$/;"	m
module_analyser	$C2_ROOT/analyser/module_analyser_init.c2	/^module module_analyser;$/;"	m
module_analyser	$C2_ROOT/analyser/module_analyser_member.c2	/^module module_analyser;$/;"	m
module_analyser	$C2_ROOT/analyser/module_analyser_stmt.c2	/^module module_analyser;$/;"	m
module_analyser	$C2_ROOT/analyser/module_analyser_struct.c2	/^module module_analyser;$/;"	m
module_analyser	$C2_ROOT/analyser/module_analyser_switch.c2	/^module module_analyser;$/;"	m
module_analyser	$C2_ROOT/analyser/module_analyser_type.c2	/^module module_analyser;$/;"	m
module_analyser	$C2_ROOT/analyser/module_analyser_unaryop.c2	/^module module_analyser;$/;"	m
module_analyser	$C2_ROOT/analyser/struct_field_init_checker.c2	/^module module_analyser;$/;"	m
module_list	$C2_ROOT/common/module_list.c2	/^module module_list;$/;"	m
module_sorter	$C2_ROOT/analyser/module_sorter.c2	/^module module_sorter;$/;"	m
more	$C2_ROOT/tools/tester/issues.c2	/^public fn bool Iter.more(const Iter* iter) {$/;"	f
mouseLocked	$C2_ROOT/libs/sokol/sokol_app.c2i	/^fn bool mouseLocked() @(cname="sapp_mouse_locked");$/;"	f
mouseLocked	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^fn bool mouseLocked() @(cname="sapp_mouse_locked");$/;"	f
mouseShown	$C2_ROOT/libs/sokol/sokol_app.c2i	/^fn bool mouseShown() @(cname="sapp_mouse_shown");$/;"	f
mouseShown	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^fn bool mouseShown() @(cname="sapp_mouse_shown");$/;"	f
move	$C2_ROOT/common/linked_list.c2	/^public fn void Element.move(Element* src, Element* dest) @(unused) {$/;"	f
move	$C2_ROOT/libs/sokol/sokol_debugtext.c2i	/^fn void move(c_float dx, c_float dy) @(cname="sdtx_move");$/;"	f
move	$C2_ROOT/libs/sokol_/sokol_debugtext.c2i	/^fn void move(c_float dx, c_float dy) @(cname="sdtx_move");$/;"	f
moveX	$C2_ROOT/libs/sokol/sokol_debugtext.c2i	/^fn void moveX(c_float dx) @(cname="sdtx_move_x");$/;"	f
moveX	$C2_ROOT/libs/sokol_/sokol_debugtext.c2i	/^fn void moveX(c_float dx) @(cname="sdtx_move_x");$/;"	f
moveY	$C2_ROOT/libs/sokol/sokol_debugtext.c2i	/^fn void moveY(c_float dy) @(cname="sdtx_move_y");$/;"	f
moveY	$C2_ROOT/libs/sokol_/sokol_debugtext.c2i	/^fn void moveY(c_float dy) @(cname="sdtx_move_y");$/;"	f
mrand48	$C2_ROOT/libs/libc/stdlib.c2i	/^fn c_long mrand48();$/;"	f
mrand48_r	$C2_ROOT/libs/libc/stdlib.c2i	/^fn c_int mrand48_r(Drand48_data* __buffer, c_long* __result);$/;"	f
ms	$C2_ROOT/libs/sokol/sokol_time.c2i	/^fn c_double ms(u64 ticks) @(cname="stm_ms");$/;"	f
ms	$C2_ROOT/libs/sokol_/sokol_time.c2i	/^fn c_double ms(u64 ticks) @(cname="stm_ms");$/;"	f
msg_end	$C2_ROOT/output/unit_test/libunit_test.dylib	/^fn void msg_end() {$/;"	f
msg_end	$C2_ROOT/plugins/unit_test2.c2	/^fn void msg_end() {$/;"	f
msg_start	$C2_ROOT/output/unit_test/libunit_test.dylib	/^fn void msg_start(const char* color, const char* title) {$/;"	f
msg_start	$C2_ROOT/plugins/unit_test2.c2	/^fn void msg_start(const char* color, const char* title) {$/;"	f
mtlComputeCommandEncoder	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn void* mtlComputeCommandEncoder() @(cname="sg_mtl_compute_command_encoder");$/;"	f
mtlComputeCommandEncoder	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn void* mtlComputeCommandEncoder() @(cname="sg_mtl_compute_command_encoder");$/;"	f
mtlDevice	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn void* mtlDevice() @(cname="sg_mtl_device");$/;"	f
mtlDevice	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn void* mtlDevice() @(cname="sg_mtl_device");$/;"	f
mtlQueryBufferInfo	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn MtlBufferInfo mtlQueryBufferInfo(Buffer buf) @(cname="sg_mtl_query_buffer_info");$/;"	f
mtlQueryBufferInfo	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn MtlBufferInfo mtlQueryBufferInfo(Buffer buf) @(cname="sg_mtl_query_buffer_info");$/;"	f
mtlQueryImageInfo	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn MtlImageInfo mtlQueryImageInfo(Image img) @(cname="sg_mtl_query_image_info");$/;"	f
mtlQueryImageInfo	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn MtlImageInfo mtlQueryImageInfo(Image img) @(cname="sg_mtl_query_image_info");$/;"	f
mtlQueryPipelineInfo	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn MtlPipelineInfo mtlQueryPipelineInfo(Pipeline pip) @(cname="sg_mtl_query_pipeline_info");$/;"	f
mtlQueryPipelineInfo	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn MtlPipelineInfo mtlQueryPipelineInfo(Pipeline pip) @(cname="sg_mtl_query_pipeline_info");$/;"	f
mtlQuerySamplerInfo	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn MtlSamplerInfo mtlQuerySamplerInfo(Sampler smp) @(cname="sg_mtl_query_sampler_info");$/;"	f
mtlQuerySamplerInfo	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn MtlSamplerInfo mtlQuerySamplerInfo(Sampler smp) @(cname="sg_mtl_query_sampler_info");$/;"	f
mtlQueryShaderInfo	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn MtlShaderInfo mtlQueryShaderInfo(Shader shd) @(cname="sg_mtl_query_shader_info");$/;"	f
mtlQueryShaderInfo	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn MtlShaderInfo mtlQueryShaderInfo(Shader shd) @(cname="sg_mtl_query_shader_info");$/;"	f
mtlRenderCommandEncoder	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn void* mtlRenderCommandEncoder() @(cname="sg_mtl_render_command_encoder");$/;"	f
mtlRenderCommandEncoder	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn void* mtlRenderCommandEncoder() @(cname="sg_mtl_render_command_encoder");$/;"	f
multMatrix	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn void multMatrix(c_float* m) @(cname="sgl_mult_matrix");$/;"	f
multMatrix	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn void multMatrix(c_float* m) @(cname="sgl_mult_matrix");$/;"	f
multTransposeMatrix	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn void multTransposeMatrix(c_float* m) @(cname="sgl_mult_transpose_matrix");$/;"	f
multTransposeMatrix	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn void multTransposeMatrix(c_float* m) @(cname="sgl_mult_transpose_matrix");$/;"	f
multiply	$C2_ROOT/ast/value.c2	/^fn Value Value.multiply(const Value* v1, const Value* v2) {$/;"	f
munmap	$C2_ROOT/libs/libc/sys_mman.c2i	/^fn c_int munmap(void* addr, c_size length);$/;"	f
must	$C2_ROOT/analyser/module_analyser.c2	/^            const char* msg = "a type-function type must be a struct\/union\/enum";$/;"	t
must	$C2_ROOT/bootstrap/bootstrap.c	/^      c2_parser_Parser_error(p, "enum type must be an integer");$/;"	t
must	$C2_ROOT/libs/sokol/c/sokol_gfx.h	/^    _SG_LOGITEM_XMACRO(VALIDATE_VIEWDESC_ANY_VIEWTYPE, "sg_view_desc: exactly one view type must/;"	t
must	$C2_ROOT/libs/sokol_/c/sokol_gfx.h	/^    _SG_LOGITEM_XMACRO(VALIDATE_VIEWDESC_ANY_VIEWTYPE, "sg_view_desc: exactly one view type must/;"	t
must	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^      c2_parser_Parser_error(p, "enum type must be an integer");$/;"	t
must	$C2_ROOT/output/c2c/cgen/build.c	/^      c2_parser_Parser_error(p, "enum type must be an integer");$/;"	t
must	$C2_ROOT/output/c2c/cgen/c2_parser.c	/^      c2_parser_Parser_error(p, "enum type must be an integer");$/;"	t
must	$C2_ROOT/output/c2c/cgen/module_analyser.c	/^         const char* msg = "a type-function type must be a struct\/union\/enum";$/;"	t
must	$C2_ROOT/output/c2c_trace/cgen/c2_parser.c	/^      (c2_trace_counts[10959]++, c2_parser_Parser_error)(p, "enum type must be an integer");$/;"	t
must	$C2_ROOT/output/c2c_trace/cgen/module_analyser.c	/^         const char* msg = "a type-function type must be a struct\/union\/enum";$/;"	t
must	$C2_ROOT/parser/c2_parser_type.c2	/^        p.error("enum type must be an integer");$/;"	t
mvaddch	$C2_ROOT/libs/curses/curses.c2i	/^fn c_int mvaddch(c_int y, c_int x, const c_char ch);$/;"	f
name	$C2_ROOT/bootstrap/bootstrap.c	/^   if ((!isupper(name[0]) && !p->is_interface)) c2_parser_Parser_error(p, "a type name must star/;"	t
name	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   if ((!isupper(name[0]) && !p->is_interface)) c2_parser_Parser_error(p, "a type name must star/;"	t
name	$C2_ROOT/output/c2c/cgen/ast_builder.c	/^      diagnostics_Diags_error(b->diags, mod_loc, "module name 'main' is reserved");$/;"	m
name	$C2_ROOT/output/c2c/cgen/build.c	/^   if (!isupper(name[0]) && !p->is_interface) c2_parser_Parser_error(p, "a type name must start /;"	t
name	$C2_ROOT/output/c2c/cgen/c2_parser.c	/^   if (!isupper(name[0]) && !p->is_interface) c2_parser_Parser_error(p, "a type name must start /;"	t
name	$C2_ROOT/output/c2c_trace/cgen/ast_builder.c	/^      (c2_trace_counts[4300]++, diagnostics_Diags_error)(b->diags, mod_loc, "module name 'main' /;"	m
name	$C2_ROOT/output/c2c_trace/cgen/c2_parser.c	/^   if (!(c2_trace_counts[10874]++, isupper)(name[0]) && !p->is_interface) (c2_trace_counts[10875/;"	t
name	$C2_ROOT/parser/ast_builder.c2	/^        b.diags.error(mod_loc, "module name 'main' is reserved");$/;"	m
name	$C2_ROOT/parser/c2_parser.c2	/^        p.error("a module name must start with a lower case character");$/;"	m
name	$C2_ROOT/parser/c2_parser_type.c2	/^    if (!isupper(name[0]) && !p.is_interface) p.error("a type name must start with an upper case/;"	t
name2idx	$C2_ROOT/generator/c2refs.c2	/^fn u32 Files.name2idx(const Files* f, const char* filename) {$/;"	f
name_vector	$C2_ROOT/analyser/name_vector.c2	/^module name_vector;$/;"	m
names	$C2_ROOT/generator/c2refs.c2	/^fn void* Files.names(const Files* f) {$/;"	f
nan	$C2_ROOT/libs/math/math.c2i	/^fn c_double nan(const char *);$/;"	f
nanf	$C2_ROOT/libs/math/math.c2i	/^fn c_float nanf(const char *);$/;"	f
nearbyint	$C2_ROOT/libs/math/math.c2i	/^fn c_double nearbyint(c_double);$/;"	f
nearbyintf	$C2_ROOT/libs/math/math.c2i	/^fn c_float nearbyintf(c_float);$/;"	f
needFormatChange	$C2_ROOT/ast/call_expr.c2	/^public fn bool CallExpr.needFormatChange(const CallExpr* e) {$/;"	f
need_node_space	$C2_ROOT/generator/radix_tree/radix_tree.c2	/^fn bool Tree.need_node_space(const Tree* t, u32 required) {$/;"	f
needsCtvInit	$C2_ROOT/ast/qualtype.c2	/^public fn bool QualType.needsCtvInit(const QualType* qt) {$/;"	f
needsFixup	$C2_ROOT/ir/inserter.c2	/^public fn bool Inserter.needsFixup(const Inserter* ins) {$/;"	f
needsMain	$C2_ROOT/common/build_target.c2	/^public fn bool Target.needsMain(const Target* t) {$/;"	f
needsSemi	$C2_ROOT/ast/expr.c2	/^public fn bool Expr.needsSemi(const Expr* e) {$/;"	f
negate	$C2_ROOT/ast/value.c2	/^fn Value Value.negate(const Value* v) {$/;"	f
net_connect	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^fn c_int net_connect( Net_context *ctx, const char *host, const char *port, c_int proto ) @(cnam/;"	f
net_if	$C2_ROOT/libs/libc/net_if.c2i	/^module net_if;$/;"	m
net_init	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^fn void net_init( Net_context *ctx ) @(cname="mbedtls_net_init");$/;"	f
net_recv	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^fn c_int net_recv(void *ctx, c_uchar *buf, c_size len) @(cname="mbedtls_net_recv");$/;"	f
net_recv_timeout	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^fn c_int net_recv_timeout( void *ctx, c_uchar *buf, c_size len, c_uint timeout) @(cname="mbedtls/;"	f
net_send	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^fn c_int net_send(void *ctx, const c_uchar *buf, c_size len) @(cname="mbedtls_net_send");$/;"	f
net_set_block	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^fn c_int net_set_block( Net_context *ctx) @(cname="mbedtls_net_set_block");$/;"	f
net_set_nonblock	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^fn c_int net_set_nonblock( Net_context *ctx) @(cname="net_set_nonblock");$/;"	f
netinet_tcp	$C2_ROOT/libs/libc/netinet_tcp.c2i	/^module netinet_tcp;$/;"	m
newline	$C2_ROOT/ast_utils/string_buffer.c2	/^public fn void Buf.newline(Buf* buf) { buf.add1('\\n'); }$/;"	f
newstate	$C2_ROOT/libs/lua/lua.c2i	/^fn State* newstate(Alloc f, void *ud) @(cname="lua_newstate");$/;"	f
newthread	$C2_ROOT/libs/lua/lua.c2i	/^fn State* newthread(State *L) @(cname="lua_newthread");$/;"	f
next	$C2_ROOT/common/yaml/yaml_iterator.c2	/^public fn void Iter.next(Iter* iter) {$/;"	f
next	$C2_ROOT/ir/inserter.c2	/^public fn void Inserter.next(Inserter* ins) {$/;"	f
next	$C2_ROOT/libs/lua/lua.c2i	/^fn c_int next(State *L, c_int idx) @(cname="lua_next");$/;"	f
next	$C2_ROOT/tools/tester/issues.c2	/^public fn void Iter.next(Iter* iter) {$/;"	f
nextafter	$C2_ROOT/libs/math/math.c2i	/^fn c_double nextafter(c_double, c_double);$/;"	f
nextafterf	$C2_ROOT/libs/math/math.c2i	/^fn c_float nextafterf(c_float, c_float);$/;"	f
node2idx	$C2_ROOT/common/yaml/yaml_data.c2	/^fn u32 Data.node2idx(const Data* d, const Node* n) @(inline) {$/;"	f
nodes_resize	$C2_ROOT/generator/radix_tree/radix_tree.c2	/^fn void Tree.nodes_resize(Tree* t, u32 capacity) {$/;"	f
noecho	$C2_ROOT/libs/curses/curses.c2i	/^fn void noecho();$/;"	f
normal	$C2_ROOT/ir_examples/while.c2	/^fn void normal(i32 loops) {$/;"	f
normalVertexAttrState	$C2_ROOT/libs/sokol/sokol_shape.c2i	/^fn VertexAttrState normalVertexAttrState() @(cname="sshape_normal_vertex_attr_state");$/;"	f
normalVertexAttrState	$C2_ROOT/libs/sokol_/sokol_shape.c2i	/^fn VertexAttrState normalVertexAttrState() @(cname="sshape_normal_vertex_attr_state");$/;"	f
not	$C2_ROOT/ast/ast_evaluator.c2	/^                return Value.error("function prototype not supported");$/;"	t
not	$C2_ROOT/bootstrap/bootstrap.c	/^            return ast_Value_error("function prototype not supported");$/;"	t
not	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^            return ast_Value_error("function prototype not supported");$/;"	t
not	$C2_ROOT/output/c2c/cgen/ast.c	/^            return ast_Value_error("function prototype not supported");$/;"	t
not	$C2_ROOT/output/c2c/cgen/build.c	/^            return ast_Value_error("function prototype not supported");$/;"	t
not	$C2_ROOT/output/c2c_trace/cgen/ast.c	/^            return (c2_trace_counts[3153]++, ast_Value_error)("function prototype not supported"/;"	t
note	$C2_ROOT/analyser/module_analyser.c2	/^fn void Analyser.note(Analyser* ma, SrcLoc loc, const char* format @(printf_format), ...) {$/;"	f
note	$C2_ROOT/common/diagnostics.c2	/^public fn void Diags.note(Diags* diags, SrcLoc loc, const char* format @(printf_format), ...) {$/;"	f
note2	$C2_ROOT/common/diagnostics.c2	/^public fn void Diags.note2(Diags* diags, SrcLoc loc, const char* format, va_list args) {$/;"	f
now	$C2_ROOT/common/utils.c2	/^public fn u64 now() @(unused) {$/;"	f
now	$C2_ROOT/libs/sokol/sokol_time.c2i	/^fn u64 now() @(cname="stm_now");$/;"	f
now	$C2_ROOT/libs/sokol_/sokol_time.c2i	/^fn u64 now() @(cname="stm_now");$/;"	f
now	$C2_ROOT/output/unit_test/cgen/build.c	/^static const char plugin_main_Content2[3590] = "\/\/ NOTE: module + imports are generated so thi/;"	f
now	$C2_ROOT/output/unit_test/cgen/plugin_main.c	/^static const char plugin_main_Content2[3602] = "\/\/ NOTE: module + imports are generated so thi/;"	f
now	$C2_ROOT/output/unit_test/libunit_test.dylib	/^public fn u64 now() {$/;"	f
now	$C2_ROOT/plugins/unit_test2.c2	/^public fn u64 now() {$/;"	f
now	$C2_ROOT/tools/tester/tester.c2	/^fn u64 now() {$/;"	f
nrand48	$C2_ROOT/libs/libc/stdlib.c2i	/^fn c_long nrand48(u16* __xsubi);$/;"	f
nrand48_r	$C2_ROOT/libs/libc/stdlib.c2i	/^fn c_int nrand48_r(u16* __xsubi, Drand48_data* __buffer, c_long* __result);$/;"	f
ns	$C2_ROOT/libs/sokol/sokol_time.c2i	/^fn c_double ns(u64 ticks) @(cname="stm_ns");$/;"	f
ns	$C2_ROOT/libs/sokol_/sokol_time.c2i	/^fn c_double ns(u64 ticks) @(cname="stm_ns");$/;"	f
ntohl	$C2_ROOT/libs/libc/sys_socket.c2i	/^fn u32 ntohl(u32 netlong);$/;"	f
ntohs	$C2_ROOT/libs/libc/sys_socket.c2i	/^fn u16 ntohs(u16 netshort);$/;"	f
numAsmFiles	$C2_ROOT/common/build_target.c2	/^public fn u32 Target.numAsmFiles(const Target* t) { return t.asm_file_count; }$/;"	f
numCommands	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn c_int numCommands() @(cname="sgl_num_commands");$/;"	f
numCommands	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn c_int numCommands() @(cname="sgl_num_commands");$/;"	f
numFiles	$C2_ROOT/common/build_target.c2	/^public fn u32 Target.numFiles(const Target* t) { return t.num_files; }$/;"	f
numTargets	$C2_ROOT/compiler/c2recipe.c2	/^public fn u32 Recipe.numTargets(const Recipe* r) { return r.num_targets; }$/;"	f
numVertices	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn c_int numVertices() @(cname="sgl_num_vertices");$/;"	f
numVertices	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn c_int numVertices() @(cname="sgl_num_vertices");$/;"	f
num_error	$C2_ROOT/parser/c2_tokenizer.c2	/^fn void Tokenizer.num_error(Tokenizer* t, Token* result, const char* p, const char* format @(pri/;"	f
number_radix	$C2_ROOT/ast_utils/number_radix.c2	/^module number_radix;$/;"	m
octconv	$C2_ROOT/parser/c2_tokenizer.c2	/^fn u32 octconv(const char* p, u32 maxn, u32* pc) {$/;"	f
of	$C2_ROOT/libs/io_uring/io_uring.c2i	/^    u8    opcode;     \/* type of operation for this sqe *\/$/;"	t
of	$C2_ROOT/libs/sokol/c/sokol_app.h	/^    application check what type of input device was used for$/;"	t
of	$C2_ROOT/libs/sokol/c/sokol_gfx.h	/^    type of pass attachment has it corresponding view type:$/;"	t
of	$C2_ROOT/libs/sokol_/c/sokol_app.h	/^    application check what type of input device was used for$/;"	t
of	$C2_ROOT/libs/sokol_/c/sokol_gfx.h	/^    type of pass attachment has it corresponding view type:$/;"	t
offset2loc	$C2_ROOT/plugins/refs_generator.c2	/^fn Loc LineCounter.offset2loc(const LineCounter* l, u32 offset) {$/;"	f
onDep	$C2_ROOT/generator/c/dep_finder.c2	/^fn void Finder.onDep(Finder* s, const Decl* d, bool full) {$/;"	f
onLib	$C2_ROOT/compiler/compiler_libs.c2	/^fn void Compiler.onLib(void* arg, u32 name, bool is_static) {$/;"	f
on_ast	$C2_ROOT/generator/ir/ir_generator.c2	/^fn void Generator.on_ast(void* arg, AST* a) {$/;"	f
on_ast	$C2_ROOT/plugins/deps_generator.c2	/^fn void Generator.on_ast(void* arg, AST* a) {$/;"	f
on_ast	$C2_ROOT/plugins/refs_generator.c2	/^fn void Generator.on_ast(void* arg, AST* a) {$/;"	f
on_ast_decl	$C2_ROOT/generator/c/c_generator.c2	/^fn void Generator.on_ast_decl(void* arg, AST* a) {$/;"	f
on_ast_structs	$C2_ROOT/generator/c/c_generator.c2	/^fn void Generator.on_ast_structs(void* arg, AST* a) {$/;"	f
on_decl	$C2_ROOT/generator/c/c_generator.c2	/^fn void Generator.on_decl(void* arg, Decl* d) {$/;"	f
on_decl	$C2_ROOT/generator/c2i/c2i_generator.c2	/^fn void on_decl(void* arg, Decl* d) {$/;"	f
on_decl	$C2_ROOT/plugins/deps_generator.c2	/^fn void Generator.on_decl(void* arg, Decl* d, bool global) {$/;"	f
on_decl	$C2_ROOT/plugins/refs_generator.c2	/^fn void Generator.on_decl(void* arg, Decl* d, bool global) {$/;"	f
on_error	$C2_ROOT/output/unit_test/libunit_test.dylib	/^fn void on_error(const char* fmt @(printf_format), ...) {$/;"	f
on_error	$C2_ROOT/plugins/unit_test2.c2	/^fn void on_error(const char* fmt @(printf_format), ...) {$/;"	f
on_exit	$C2_ROOT/libs/libc/stdlib.c2i	/^fn c_int on_exit(OnExitFn __func, void* __arg);$/;"	f
on_expr	$C2_ROOT/generator/ir/ir_generator.c2	/^fn void on_expr(void* arg, const Expr* e, u32 elem_size) {$/;"	f
on_file	$C2_ROOT/plugins/refs_generator.c2	/^fn void Generator.on_file(void* arg, u32 start, u32 size, const char* filename, const char* cont/;"	f
on_format_specifier	$C2_ROOT/analyser/module_analyser_call.c2	/^fn bool on_format_specifier(void* context, printf_utils.Specifier specifier, u32 offset, i32 sta/;"	f
on_format_specifier	$C2_ROOT/generator/c/c_generator_expr.c2	/^fn bool on_format_specifier(void* context, printf_utils.Specifier specifier, u32 offset, i32 sta/;"	f
on_forward_structs	$C2_ROOT/generator/c/c_generator.c2	/^fn void Generator.on_forward_structs(void* arg, Decl* d) {$/;"	f
on_function_decl	$C2_ROOT/generator/ir/ir_generator.c2	/^fn void on_function_decl(void* arg, FunctionDecl* d) {$/;"	f
on_global_decl	$C2_ROOT/plugins/deps_generator.c2	/^fn void Generator.on_global_decl(void* arg, Decl* d) {$/;"	f
on_global_decl	$C2_ROOT/plugins/refs_generator.c2	/^fn void Generator.on_global_decl(void* arg, Decl* d) {$/;"	f
on_header_decl	$C2_ROOT/generator/c/c_generator.c2	/^fn void Generator.on_header_decl(void* arg, Decl* d) {$/;"	f
on_import	$C2_ROOT/generator/c2i/c2i_generator.c2	/^fn void on_import(void* arg, ImportDecl* i) {$/;"	f
on_import	$C2_ROOT/plugins/deps_generator.c2	/^fn void Generator.on_import(void* arg, ImportDecl* d) {$/;"	f
on_interface_decl	$C2_ROOT/generator/c/c_generator.c2	/^fn void Generator.on_interface_decl(void* arg, Decl* d) {$/;"	f
on_interface_import	$C2_ROOT/generator/c/c_generator.c2	/^fn void Generator.on_interface_import(void* arg, ImportDecl* i) {$/;"	f
on_log	$C2_ROOT/output/unit_test/libunit_test.dylib	/^public fn void on_log(const char* fmt, va_list args) {$/;"	f
on_log	$C2_ROOT/plugins/unit_test2.c2	/^public fn void on_log(const char* fmt, va_list args) {$/;"	f
on_module	$C2_ROOT/common/manifest_writer.c2	/^fn void on_module(void* arg, ast.Module* m) {$/;"	f
on_module	$C2_ROOT/generator/c/c_generator.c2	/^fn void Generator.on_module(void* arg, Module* m) {$/;"	f
on_module	$C2_ROOT/generator/c2i/c2i_generator.c2	/^fn void Generator.on_module(void* arg, Module* m) {$/;"	f
on_module	$C2_ROOT/generator/ir/ir_generator.c2	/^fn void Generator.on_module(void* arg, Module* m) {$/;"	f
on_module	$C2_ROOT/plugins/deps_generator.c2	/^fn void Generator.on_module(void* arg, Module* m) {$/;"	f
on_module	$C2_ROOT/plugins/refs_generator.c2	/^fn void Generator.on_module(void* arg, Module* m) {$/;"	f
on_opaque	$C2_ROOT/ast/instantiator.c2	/^fn void Instantiator.on_opaque(Instantiator* inst, src_loc.SrcLoc loc, Decl* decl) {$/;"	f
on_private_ast_imports	$C2_ROOT/generator/c/c_generator.c2	/^fn void Generator.on_private_ast_imports(void* arg, AST* a) {$/;"	f
on_private_import_decl	$C2_ROOT/generator/c/c_generator.c2	/^fn void Generator.on_private_import_decl(void* arg, ImportDecl* i) {$/;"	f
on_public_ast_imports	$C2_ROOT/generator/c/c_generator.c2	/^fn void Generator.on_public_ast_imports(void* arg, AST* a) {$/;"	f
on_public_import_decl	$C2_ROOT/generator/c/c_generator.c2	/^fn void Generator.on_public_import_decl(void* arg, ImportDecl* i) {$/;"	f
on_ref	$C2_ROOT/plugins/deps_generator.c2	/^fn void Generator.on_ref(void* arg, const Ref* ref) {$/;"	f
on_ref	$C2_ROOT/plugins/refs_generator.c2	/^fn void Generator.on_ref(void* arg, const Ref* ref) {$/;"	f
on_static_assert	$C2_ROOT/plugins/refs_generator.c2	/^fn void Generator.on_static_assert(void* arg, StaticAssert* d) {$/;"	f
on_tokenizer_error	$C2_ROOT/parser/c2_parser.c2	/^fn void on_tokenizer_error(void* arg, SrcLoc loc) {$/;"	f
on_tokenizer_warning	$C2_ROOT/parser/c2_parser.c2	/^fn void on_tokenizer_warning(void* arg, SrcLoc loc) {$/;"	f
on_var_decl	$C2_ROOT/generator/ir/ir_generator.c2	/^fn void on_var_decl(void* arg, VarDecl* vd) {$/;"	f
on_zero	$C2_ROOT/generator/ir/ir_generator.c2	/^fn void on_zero(void* arg, u32 size) {$/;"	f
online_cpus	$C2_ROOT/ir/work_queue.c2	/^fn u32 online_cpus() {$/;"	f
online_cpus	$C2_ROOT/tools/tester/tester.c2	/^fn u32 online_cpus() {$/;"	f
opaque_callback	$C2_ROOT/analyser/module_analyser_call.c2	/^fn void Analyser.opaque_callback(void* arg, SrcLoc loc, Decl* d) {$/;"	f
open	$C2_ROOT/libs/libc/libc_fcntl.c2i	/^fn c_int open(const char* __file, c_int __oflag, ...);$/;"	f
openAudioDevice	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn AudioDeviceID openAudioDevice(const char* device,$/;"	f
openFont	$C2_ROOT/libs/sdl2_ttf/sdl_ttf.c2i	/^fn Font* openFont(const char* file, c_int ptsize) @(cname="TTF_OpenFont");$/;"	f
open_file	$C2_ROOT/generator/c2refs.c2	/^fn MapFile open_file(const char* filename) {$/;"	f
open_lib	$C2_ROOT/compiler/compiler_libs.c2	/^fn void Compiler.open_lib(Compiler* c, Component* comp) {$/;"	f
open_memstream	$C2_ROOT/libs/libc/stdio.c2i	/^fn FILE* open_memstream(c_char** __bufloc, c_size* __sizeloc);$/;"	f
openat	$C2_ROOT/libs/libc/libc_fcntl.c2i	/^fn c_int openat(i32 dirfd, const char* pathname, i32 flags, ...);$/;"	f
opendir	$C2_ROOT/libs/libc/libc_dirent.c2i	/^fn DIR* opendir(const c_char* name);$/;"	f
or	$C2_ROOT/ast/value.c2	/^fn Value Value.or(const Value* v1, const Value* v2) {$/;"	f
or	$C2_ROOT/bootstrap/bootstrap.c	/^         c2_parser_Parser_error(p, "expect a type or variable name");$/;"	t
or	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^         c2_parser_Parser_error(p, "expect a type or variable name");$/;"	t
origin	$C2_ROOT/libs/sokol/sokol_debugtext.c2i	/^fn void origin(c_float x, c_float y) @(cname="sdtx_origin");$/;"	f
origin	$C2_ROOT/libs/sokol_/sokol_debugtext.c2i	/^fn void origin(c_float x, c_float y) @(cname="sdtx_origin");$/;"	f
ortho	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn void ortho(c_float l, c_float r, c_float b, c_float t, c_float n, c_float f) @(cname="sgl_ort/;"	f
ortho	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn void ortho(c_float l, c_float r, c_float b, c_float t, c_float n, c_float f) @(cname="sgl_ort/;"	f
parameter	$C2_ROOT/libs/libc/sys_socket.c2i	/^\/* Flags to be ORed into the type parameter of socket and socketpair and$/;"	t
parse	$C2_ROOT/common/build_file.c2	/^public fn Info* parse(source_mgr.SourceMgr* sm, string_pool.Pool* pool, const char* filename) {$/;"	f
parse	$C2_ROOT/common/yaml/yaml_parser.c2	/^public fn bool Parser.parse(Parser* p, const char* input) {$/;"	f
parse	$C2_ROOT/compiler/c2recipe.c2	/^public fn bool Recipe.parse(Recipe* r, i32 file_id) {$/;"	f
parse	$C2_ROOT/compiler/c2recipe_parser.c2	/^fn bool Parser.parse(Recipe* recipe, string_pool.Pool* pool, source_mgr.SourceMgr* sm, i32 file_/;"	f
parse	$C2_ROOT/compiler/manifest.c2	/^public fn bool parse(source_mgr.SourceMgr* sm,$/;"	f
parse	$C2_ROOT/parser/c2_parser.c2	/^public fn void Parser.parse(Parser* p, i32 file_id, bool is_interface, bool is_generated) {$/;"	f
parse	$C2_ROOT/tools/tester/test_db.c2	/^public fn bool Db.parse(Db* db) {$/;"	f
parseAliasType	$C2_ROOT/parser/c2_parser_type.c2	/^fn void Parser.parseAliasType(Parser* p, u32 name, SrcLoc loc, bool is_public) {$/;"	f
parseArgs	$C2_ROOT/common/process_utils.c2	/^fn u32 parseArgs(const char* args, char** argv, u32 maxargs, char *tmp, usize tmp_size) {$/;"	f
parseArrayDesignator	$C2_ROOT/parser/c2_parser_expr.c2	/^fn Expr* Parser.parseArrayDesignator(Parser* p) {$/;"	f
parseArrayEntry	$C2_ROOT/parser/c2_parser.c2	/^fn void Parser.parseArrayEntry(Parser* p) {$/;"	f
parseAsCastType	$C2_ROOT/parser/c2_parser_expr.c2	/^fn u32 Parser.parseAsCastType(Parser* p, u32 ahead, Kind close_tok) {$/;"	f
parseAsType	$C2_ROOT/parser/c2_parser_expr.c2	/^fn bool Parser.parseAsType(Parser* p) {$/;"	f
parseAsmOperandsOpt	$C2_ROOT/parser/c2_parser_stmt.c2	/^fn void Parser.parseAsmOperandsOpt(Parser* p,$/;"	f
parseAsmStmt	$C2_ROOT/parser/c2_parser_stmt.c2	/^fn Stmt* Parser.parseAsmStmt(Parser* p) {$/;"	f
parseAssertStmt	$C2_ROOT/parser/c2_parser_stmt.c2	/^fn Stmt* Parser.parseAssertStmt(Parser* p) {$/;"	f
parseAssignmentExpression	$C2_ROOT/parser/c2_parser_expr.c2	/^fn Expr* Parser.parseAssignmentExpression(Parser* p) {$/;"	f
parseBackEndOptions	$C2_ROOT/compiler/c2recipe_parser.c2	/^fn void Parser.parseBackEndOptions(Parser* p) {$/;"	f
parseBackend	$C2_ROOT/compiler/c2recipe_parser.c2	/^fn void Parser.parseBackend(Parser* p) {$/;"	f
parseBreakStmt	$C2_ROOT/parser/c2_parser_stmt.c2	/^fn Stmt* Parser.parseBreakStmt(Parser* p) {$/;"	f
parseCallExpr	$C2_ROOT/parser/c2_parser_expr.c2	/^fn Expr* Parser.parseCallExpr(Parser* p, Expr* func) {$/;"	f
parseCase	$C2_ROOT/parser/c2_parser_switch.c2	/^fn SwitchCase* Parser.parseCase(Parser* p, bool is_default) {$/;"	f
parseCaseCondition	$C2_ROOT/parser/c2_parser_switch.c2	/^fn void Parser.parseCaseCondition(Parser* p, expr_list.List* list) {$/;"	f
parseCastExpr	$C2_ROOT/parser/c2_parser_expr.c2	/^fn Expr* Parser.parseCastExpr(Parser* p, bool \/*isUnaryExpr*\/, bool \/*isAddrOfOp*\/) {$/;"	f
parseCompoundStmt	$C2_ROOT/parser/c2_parser_stmt.c2	/^fn CompoundStmt* Parser.parseCompoundStmt(Parser* p) {$/;"	f
parseCondition	$C2_ROOT/parser/c2_parser_stmt.c2	/^fn Stmt* Parser.parseCondition(Parser* p) {$/;"	f
parseContinueStmt	$C2_ROOT/parser/c2_parser_stmt.c2	/^fn Stmt* Parser.parseContinueStmt(Parser* p) {$/;"	f
parseDeclOrStmt	$C2_ROOT/parser/c2_parser_stmt.c2	/^fn Stmt* Parser.parseDeclOrStmt(Parser* p) {$/;"	f
parseDeclStmt	$C2_ROOT/parser/c2_parser_stmt.c2	/^fn Stmt* Parser.parseDeclStmt(Parser* p, bool checkSemi, bool allowLocal, bool isCondition) {$/;"	f
parseElemsof	$C2_ROOT/parser/c2_parser_expr.c2	/^fn Expr* Parser.parseElemsof(Parser* p) {$/;"	f
parseEnumMinMax	$C2_ROOT/parser/c2_parser_expr.c2	/^fn Expr* Parser.parseEnumMinMax(Parser* p, bool is_min) {$/;"	f
parseEnumType	$C2_ROOT/parser/c2_parser_type.c2	/^fn void Parser.parseEnumType(Parser* p, u32 name, SrcLoc loc, bool is_public) {$/;"	f
parseExecutable	$C2_ROOT/compiler/c2recipe_parser.c2	/^fn void Parser.parseExecutable(Parser* p) {$/;"	f
parseExpect	$C2_ROOT/tools/tester/test_db.c2	/^fn bool Db.parseExpect(Db* db) {$/;"	f
parseExplicitCastExpr	$C2_ROOT/parser/c2_parser_expr.c2	/^fn Expr* Parser.parseExplicitCastExpr(Parser* p) {$/;"	f
parseExpr	$C2_ROOT/parser/c2_parser_expr.c2	/^fn Expr* Parser.parseExpr(Parser* p) {$/;"	f
parseExprStmt	$C2_ROOT/parser/c2_parser_stmt.c2	/^fn Stmt* Parser.parseExprStmt(Parser* p) {$/;"	f
parseExternalModule	$C2_ROOT/compiler/compiler_libs.c2	/^fn void Compiler.parseExternalModule(void* arg, ast.Module* m) {$/;"	f
parseFallthroughStmt	$C2_ROOT/parser/c2_parser_stmt.c2	/^fn Stmt* Parser.parseFallthroughStmt(Parser* p) {$/;"	f
parseFieldDesignator	$C2_ROOT/parser/c2_parser_expr.c2	/^fn Expr* Parser.parseFieldDesignator(Parser* p) {$/;"	f
parseFile	$C2_ROOT/tools/tester/test_db.c2	/^fn bool Db.parseFile(Db* db) {$/;"	f
parseForStmt	$C2_ROOT/parser/c2_parser_stmt.c2	/^fn Stmt* Parser.parseForStmt(Parser* p) {$/;"	f
parseFormat	$C2_ROOT/analyser_utils/printf_utils.c2	/^public fn bool parseFormat(const char* format, FormatHandler handler, void* arg) {$/;"	f
parseFullIdentifier	$C2_ROOT/parser/c2_parser_expr.c2	/^fn Expr* Parser.parseFullIdentifier(Parser* p) {$/;"	f
parseFullTypeIdentifier	$C2_ROOT/parser/c2_parser.c2	/^fn void Parser.parseFullTypeIdentifier(Parser* p, TypeRefHolder* ref) {$/;"	f
parseFuncDecl	$C2_ROOT/parser/c2_parser.c2	/^fn void Parser.parseFuncDecl(Parser* p, bool is_public) {$/;"	f
parseFunctionParams	$C2_ROOT/parser/c2_parser.c2	/^fn bool Parser.parseFunctionParams(Parser* p, DeclList* params, bool is_public, bool accept_defa/;"	f
parseFunctionType	$C2_ROOT/parser/c2_parser_type.c2	/^fn void Parser.parseFunctionType(Parser* p, u32 name, SrcLoc loc, bool is_public) {$/;"	f
parseGotoStmt	$C2_ROOT/parser/c2_parser_stmt.c2	/^fn Stmt* Parser.parseGotoStmt(Parser* p) {$/;"	f
parseIdentifier	$C2_ROOT/parser/c2_parser_expr.c2	/^fn IdentifierExpr* Parser.parseIdentifier(Parser* p) {$/;"	f
parseIfStmt	$C2_ROOT/parser/c2_parser_stmt.c2	/^fn Stmt* Parser.parseIfStmt(Parser* p) {$/;"	f
parseImage	$C2_ROOT/compiler/c2recipe_parser.c2	/^fn void Parser.parseImage(Parser* p) {$/;"	f
parseImports	$C2_ROOT/parser/c2_parser.c2	/^fn void Parser.parseImports(Parser* p) {$/;"	f
parseImpureMemberExpr	$C2_ROOT/parser/c2_parser_expr.c2	/^fn Expr* Parser.parseImpureMemberExpr(Parser* p, Expr* base) {$/;"	f
parseInitList	$C2_ROOT/parser/c2_parser_expr.c2	/^fn Expr* Parser.parseInitList(Parser* p) {$/;"	f
parseInitValue	$C2_ROOT/parser/c2_parser_expr.c2	/^fn Expr* Parser.parseInitValue(Parser* p, bool allow_designators) {$/;"	f
parseKeyword	$C2_ROOT/tools/tester/test_db.c2	/^fn bool Db.parseKeyword(Db* db) {$/;"	f
parseLabelStmt	$C2_ROOT/parser/c2_parser_stmt.c2	/^fn Stmt* Parser.parseLabelStmt(Parser* p) {$/;"	f
parseLibrary	$C2_ROOT/compiler/c2recipe_parser.c2	/^fn void Parser.parseLibrary(Parser* p) {$/;"	f
parseLine	$C2_ROOT/tools/tester/test_db.c2	/^public fn void Db.parseLine(Db* db, const char* start, const char* end) {$/;"	f
parseLineExpect	$C2_ROOT/tools/tester/test_db.c2	/^public fn void Db.parseLineExpect(Db* db, const char* start, const char* end) {$/;"	f
parseLineFile	$C2_ROOT/tools/tester/test_db.c2	/^public fn void Db.parseLineFile(Db* db, const char* start, const char* end) {$/;"	f
parseLineOutside	$C2_ROOT/tools/tester/test_db.c2	/^public fn void Db.parseLineOutside(Db* db, const char* start, const char* end) {$/;"	f
parseModule	$C2_ROOT/parser/c2_parser.c2	/^fn void Parser.parseModule(Parser* p, bool is_interface, bool is_generated) {$/;"	f
parseOffsetOfExpr	$C2_ROOT/parser/c2_parser_expr.c2	/^fn Expr* Parser.parseOffsetOfExpr(Parser* p) {$/;"	f
parseOptionalAccessSpecifier	$C2_ROOT/parser/c2_parser.c2	/^fn bool Parser.parseOptionalAccessSpecifier(Parser* p) {$/;"	f
parseOptionalArray	$C2_ROOT/parser/c2_parser.c2	/^fn void Parser.parseOptionalArray(Parser* p, TypeRefHolder* ref) {$/;"	f
parseOptionalAttributes	$C2_ROOT/parser/c2_parser.c2	/^fn void Parser.parseOptionalAttributes(Parser* p) {$/;"	f
parseOptionalTypeQualifier	$C2_ROOT/parser/c2_parser.c2	/^fn u32 Parser.parseOptionalTypeQualifier(Parser* p) {$/;"	f
parseOuter	$C2_ROOT/tools/tester/test_db.c2	/^fn bool Db.parseOuter(Db* db) {$/;"	f
parseParamDecl	$C2_ROOT/parser/c2_parser.c2	/^fn VarDecl* Parser.parseParamDecl(Parser* p, bool is_public, bool accept_default) {$/;"	f
parseParamOptionalAttributes	$C2_ROOT/parser/c2_parser.c2	/^fn void Parser.parseParamOptionalAttributes(Parser* p, VarDecl* d) {$/;"	f
parseParenExpr	$C2_ROOT/parser/c2_parser_expr.c2	/^fn Expr* Parser.parseParenExpr(Parser* p) {$/;"	f
parsePlugin	$C2_ROOT/compiler/c2recipe_parser.c2	/^fn void Parser.parsePlugin(Parser* p, bool is_global) {$/;"	f
parsePostfixExprSuffix	$C2_ROOT/parser/c2_parser_expr.c2	/^fn Expr* Parser.parsePostfixExprSuffix(Parser* p, Expr* lhs, bool couldBeTemplateCall) {$/;"	f
parsePureMemberExpr	$C2_ROOT/parser/c2_parser_expr.c2	/^fn Expr* Parser.parsePureMemberExpr(Parser* p) {$/;"	f
parseRHSOfBinaryExpression	$C2_ROOT/parser/c2_parser_expr.c2	/^fn Expr* Parser.parseRHSOfBinaryExpression(Parser* p, Expr* lhs, Prec minPrec) {$/;"	f
parseRecipe	$C2_ROOT/tools/tester/test_db.c2	/^fn bool Db.parseRecipe(Db* db) {$/;"	f
parseReturnStmt	$C2_ROOT/parser/c2_parser_stmt.c2	/^fn Stmt* Parser.parseReturnStmt(Parser* p) {$/;"	f
parseSet	$C2_ROOT/compiler/c2recipe_parser.c2	/^fn void Parser.parseSet(Parser* p) {$/;"	f
parseSingleTypeSpecifier	$C2_ROOT/parser/c2_parser.c2	/^fn void Parser.parseSingleTypeSpecifier(Parser* p, TypeRefHolder* ref) {$/;"	f
parseSizeof	$C2_ROOT/parser/c2_parser_expr.c2	/^fn Expr* Parser.parseSizeof(Parser* p) {$/;"	f
parseStaticAssert	$C2_ROOT/parser/c2_parser.c2	/^fn void Parser.parseStaticAssert(Parser* p) {$/;"	f
parseStmt	$C2_ROOT/parser/c2_parser_stmt.c2	/^fn Stmt* Parser.parseStmt(Parser* p) {$/;"	f
parseStringLiteral	$C2_ROOT/parser/c2_parser_expr.c2	/^fn Expr* Parser.parseStringLiteral(Parser* p) {$/;"	f
parseStructBlock	$C2_ROOT/parser/c2_parser_type.c2	/^fn void Parser.parseStructBlock(Parser* p, DeclList* members, bool is_public) {$/;"	f
parseStructType	$C2_ROOT/parser/c2_parser_type.c2	/^fn void Parser.parseStructType(Parser* p, bool is_struct, u32 name, SrcLoc loc, bool is_public) /;"	f
parseSwitchStmt	$C2_ROOT/parser/c2_parser_switch.c2	/^fn Stmt* Parser.parseSwitchStmt(Parser* p) {$/;"	f
parseTags	$C2_ROOT/tools/tester/test_db.c2	/^fn void Db.parseTags(Db* db, const char* start, const char* end) {$/;"	f
parseTarget	$C2_ROOT/compiler/c2recipe_parser.c2	/^fn void Parser.parseTarget(Parser* p) {$/;"	f
parseTemplateCallExpr	$C2_ROOT/parser/c2_parser_expr.c2	/^fn Expr* Parser.parseTemplateCallExpr(Parser* p, Expr* func, const TypeRefHolder* ref) {$/;"	f
parseToContainerExpr	$C2_ROOT/parser/c2_parser_expr.c2	/^fn Expr* Parser.parseToContainerExpr(Parser* p) {$/;"	f
parseTop	$C2_ROOT/compiler/c2recipe_parser.c2	/^fn void Parser.parseTop(Parser* p) {$/;"	f
parseTopLevel	$C2_ROOT/parser/c2_parser.c2	/^fn void Parser.parseTopLevel(Parser* p) {$/;"	f
parseTypeDecl	$C2_ROOT/parser/c2_parser_type.c2	/^fn void Parser.parseTypeDecl(Parser* p, bool is_public) {$/;"	f
parseTypeSpecifier	$C2_ROOT/parser/c2_parser.c2	/^fn void Parser.parseTypeSpecifier(Parser* p, TypeRefHolder* ref) {$/;"	f
parseVarDecl	$C2_ROOT/parser/c2_parser.c2	/^fn void Parser.parseVarDecl(Parser* p, bool is_public) {$/;"	f
parseWarnings	$C2_ROOT/compiler/c2recipe_parser.c2	/^fn void Parser.parseWarnings(Parser* p) {$/;"	f
parseWhileStmt	$C2_ROOT/parser/c2_parser_stmt.c2	/^fn Stmt* Parser.parseWhileStmt(Parser* p) {$/;"	f
parseYaml	$C2_ROOT/compiler/c2recipe_yaml.c2	/^public fn bool Recipe.parseYaml(Recipe* r, i32 file_id) {$/;"	f
parse_config	$C2_ROOT/plugins/shell_cmd_plugin.c2	/^fn bool parse_config(yaml.Parser* parser, const char* config_file, string_buffer.Buf* out) {$/;"	f
parse_doc	$C2_ROOT/common/yaml/yaml_parser.c2	/^fn void Parser.parse_doc(Parser* p) {$/;"	f
parse_error_warn	$C2_ROOT/parser/c2_tokenizer.c2	/^fn bool Tokenizer.parse_error_warn(Tokenizer* t, Token* result, Kind kind) {$/;"	f
parse_lib	$C2_ROOT/compiler/compiler_libs.c2	/^fn void Compiler.parse_lib(Compiler* c, Component* comp) {$/;"	f
parse_long_opt	$C2_ROOT/compiler/main.c2	/^fn i32 parse_long_opt(i32 i, i32 argc, char** argv, compiler.Options* comp_opts, Options* opts) /;"	f
parse_node	$C2_ROOT/common/yaml/yaml_parser.c2	/^fn void Parser.parse_node(Parser* p) {$/;"	f
parse_node_or_value	$C2_ROOT/common/yaml/yaml_parser.c2	/^fn void Parser.parse_node_or_value(Parser* p) {$/;"	f
parse_options	$C2_ROOT/tools/c2rename.c2	/^fn void parse_options(i32 argc, const char** argv) {$/;"	f
parse_options	$C2_ROOT/tools/c2tags.c2	/^fn void parse_options(i32 argc, const char** argv) {$/;"	f
parse_opts	$C2_ROOT/compiler/main.c2	/^fn void parse_opts(i32 argc, char** argv, compiler.Options* comp_opts, Options* opts) {$/;"	f
parse_opts	$C2_ROOT/tools/c2loc.c2	/^fn void parse_opts(i32 argc, const char** argv) {$/;"	f
parse_ppexpr	$C2_ROOT/parser/c2_tokenizer.c2	/^fn i64 Tokenizer.parse_ppexpr(Tokenizer* t, Token *result) {$/;"	f
parse_value	$C2_ROOT/common/yaml/yaml_parser.c2	/^fn void Parser.parse_value(Parser* p) {$/;"	f
path_exists	$C2_ROOT/common/file/file_utils.c2	/^public fn bool path_exists(const char* path) {$/;"	f
pcallk	$C2_ROOT/libs/lua/lua.c2i	/^fn c_int pcallk(State *L, c_int nargs, c_int nresults, c_int errfunc,$/;"	f
pclose	$C2_ROOT/libs/libc/stdio.c2i	/^fn c_int pclose(FILE* __stream);$/;"	f
peekToken	$C2_ROOT/parser/c2_parser.c2	/^fn Kind Parser.peekToken(Parser* p, u32 n) {$/;"	f
peekToken2	$C2_ROOT/parser/c2_parser.c2	/^fn Kind Parser.peekToken2(Parser* p, u32 n, Token *tok) {$/;"	f
peek_batch_cqe	$C2_ROOT/libs/io_uring/io_uring.c2i	/^fn u32 peek_batch_cqe(Ring *ring, Cqe** cqes, u32 count) @(cname="io_uring_peek_batch_cqe");$/;"	f
peek_cqe	$C2_ROOT/libs/io_uring/io_uring.c2i	/^fn c_int Ring.peek_cqe(Ring* ring, Cqe** cqe_ptr) @(cname="io_uring_peek_cqe")$/;"	f
perror	$C2_ROOT/libs/libc/stdio.c2i	/^fn void perror(const c_char* __s);$/;"	f
perspective	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn void perspective(c_float fov_y, c_float aspect, c_float z_near, c_float z_far) @(cname="sgl_p/;"	f
perspective	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn void perspective(c_float fov_y, c_float aspect, c_float z_near, c_float z_far) @(cname="sgl_p/;"	f
pipe	$C2_ROOT/libs/libc/unistd.c2i	/^fn c_int pipe(c_int* pipefd);$/;"	f
pipe2	$C2_ROOT/libs/libc/unistd.c2i	/^fn c_int pipe2(c_int* pipefd, c_int flags);$/;"	f
pk_free	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^fn void pk_free( Pk_context *ctx) @(cname="mbedtls_pk_free");$/;"	f
pk_init	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^fn void pk_init(Pk_context* ctx) @(cname="mbedtls_pk_init");$/;"	f
planeSizes	$C2_ROOT/libs/sokol/sokol_shape.c2i	/^fn Sizes planeSizes(u32 tiles) @(cname="sshape_plane_sizes");$/;"	f
planeSizes	$C2_ROOT/libs/sokol_/sokol_shape.c2i	/^fn Sizes planeSizes(u32 tiles) @(cname="sshape_plane_sizes");$/;"	f
plugin_info	$C2_ROOT/plugins/plugin_info.c2	/^module plugin_info;$/;"	m
plugin_init	$C2_ROOT/plugins/unit_test_plugin.c2	/^fn void plugin_init(void* arg, plugin_info.Info* info) {$/;"	f
plugin_main	$C2_ROOT/plugins/deps_generator_plugin.c2	/^module plugin_main;$/;"	m
plugin_main	$C2_ROOT/plugins/git_version_plugin.c2	/^module plugin_main;$/;"	m
plugin_main	$C2_ROOT/plugins/refs_generator_plugin.c2	/^module plugin_main;$/;"	m
plugin_main	$C2_ROOT/plugins/shell_cmd_plugin.c2	/^module plugin_main;$/;"	m
plugin_main	$C2_ROOT/plugins/unit_test_plugin.c2	/^module plugin_main;$/;"	m
plugin_mgr	$C2_ROOT/compiler/plugin_mgr.c2	/^module plugin_mgr;$/;"	m
plugins_after_analysis	$C2_ROOT/compiler/main.c2	/^fn void plugins_after_analysis(void* arg) {$/;"	f
plugins_after_parsing	$C2_ROOT/compiler/main.c2	/^fn void plugins_after_parsing(void* arg) {$/;"	f
plugins_end_target	$C2_ROOT/compiler/main.c2	/^fn void plugins_end_target(void* arg) {$/;"	f
plugins_start_target	$C2_ROOT/compiler/main.c2	/^fn void plugins_start_target(void* arg, plugin_info.Info* info) {$/;"	f
pointSize	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn void pointSize(c_float s) @(cname="sgl_point_size");$/;"	f
pointSize	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn void pointSize(c_float s) @(cname="sgl_point_size");$/;"	f
pointer_conversion_allowed	$C2_ROOT/analyser/conversion_checker.c2	/^fn bool pointer_conversion_allowed(QualType linner, QualType rinner) {$/;"	f
poll	$C2_ROOT/libs/libc/libc_poll.c2i	/^fn c_int poll(Pollfd* fds, c_ulong nfds, c_int timeout);$/;"	f
poll	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn c_int Event.poll(Event* event) @(cname="SDL_PollEvent");$/;"	f
pop	$C2_ROOT/common/yaml/yaml_parser.c2	/^fn void Parser.pop(Parser* p) {$/;"	f
popCheck	$C2_ROOT/analyser/module_analyser.c2	/^fn void Analyser.popCheck(Analyser* ma) {$/;"	f
popDebugGroup	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn void popDebugGroup() @(cname="sg_pop_debug_group");$/;"	f
popDebugGroup	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn void popDebugGroup() @(cname="sg_pop_debug_group");$/;"	f
popFront	$C2_ROOT/common/linked_list.c2	/^public fn Element* Element.popFront(Element* item) @(unused) {$/;"	f
popHead	$C2_ROOT/ir/usage_counter.c2	/^public fn u32 Counter.popHead(Counter* c) {$/;"	f
popMatrix	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn void popMatrix() @(cname="sgl_pop_matrix");$/;"	f
popMatrix	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn void popMatrix() @(cname="sgl_pop_matrix");$/;"	f
popPipeline	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn void popPipeline() @(cname="sgl_pop_pipeline");$/;"	f
popPipeline	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn void popPipeline() @(cname="sgl_pop_pipeline");$/;"	f
popen	$C2_ROOT/libs/libc/stdio.c2i	/^fn FILE* popen(const c_char* __command, const c_char* __modes);$/;"	f
pos	$C2_ROOT/libs/sokol/sokol_debugtext.c2i	/^fn void pos(c_float x, c_float y) @(cname="sdtx_pos");$/;"	f
pos	$C2_ROOT/libs/sokol_/sokol_debugtext.c2i	/^fn void pos(c_float x, c_float y) @(cname="sdtx_pos");$/;"	f
posX	$C2_ROOT/libs/sokol/sokol_debugtext.c2i	/^fn void posX(c_float x) @(cname="sdtx_pos_x");$/;"	f
posX	$C2_ROOT/libs/sokol_/sokol_debugtext.c2i	/^fn void posX(c_float x) @(cname="sdtx_pos_x");$/;"	f
posY	$C2_ROOT/libs/sokol/sokol_debugtext.c2i	/^fn void posY(c_float y) @(cname="sdtx_pos_y");$/;"	f
posY	$C2_ROOT/libs/sokol_/sokol_debugtext.c2i	/^fn void posY(c_float y) @(cname="sdtx_pos_y");$/;"	f
positionVertexAttrState	$C2_ROOT/libs/sokol/sokol_shape.c2i	/^fn VertexAttrState positionVertexAttrState() @(cname="sshape_position_vertex_attr_state");$/;"	f
positionVertexAttrState	$C2_ROOT/libs/sokol_/sokol_shape.c2i	/^fn VertexAttrState positionVertexAttrState() @(cname="sshape_position_vertex_attr_state");$/;"	f
posix_memalign	$C2_ROOT/libs/libc/stdlib.c2i	/^fn c_int posix_memalign(void** __memptr, c_size __alignment, c_size __size);$/;"	f
postAnalysis	$C2_ROOT/compiler/plugin_mgr.c2	/^public fn void Mgr.postAnalysis(Mgr* m) {$/;"	f
postParse	$C2_ROOT/compiler/plugin_mgr.c2	/^public fn void Mgr.postParse(Mgr* m) {$/;"	f
post_analysis	$C2_ROOT/plugins/deps_generator_plugin.c2	/^fn void post_analysis(void* arg) {$/;"	f
post_analysis	$C2_ROOT/plugins/refs_generator_plugin.c2	/^fn void post_analysis(void* arg) {$/;"	f
post_parse	$C2_ROOT/plugins/shell_cmd_plugin.c2	/^fn void post_parse(void* arg) {$/;"	f
pow	$C2_ROOT/libs/math/math.c2i	/^fn c_double pow(c_double, c_double);$/;"	f
powf	$C2_ROOT/libs/math/math.c2i	/^fn c_float powf(c_float, c_float);$/;"	f
prefix	$C2_ROOT/generator/ir/ir_generator_member.c2	/^        if (base.isImport()) {  \/\/ skip module prefix$/;"	m
prep_accept	$C2_ROOT/libs/io_uring/io_uring.c2i	/^fn void Sqe.prep_accept(Sqe* sqe, c_int fd,$/;"	f
prep_cancel	$C2_ROOT/libs/io_uring/io_uring.c2i	/^fn void Sqe.prep_cancel(Sqe* sqe, void* user_data, c_int flags) @(cname="io_uring_prep_cancel")$/;"	f
prep_close	$C2_ROOT/libs/io_uring/io_uring.c2i	/^fn void Sqe.prep_close(Sqe* sqe, c_int fd) @(cname="io_uring_prep_close")$/;"	f
prep_link_timeout	$C2_ROOT/libs/io_uring/io_uring.c2i	/^fn void Sqe.prep_link_timeout(Sqe* sqe, linux_types.Timespec* ts,$/;"	f
prep_nop	$C2_ROOT/libs/io_uring/io_uring.c2i	/^fn void Sqe.prep_nop(Sqe* sqe) @(cname="io_uring_prep_nop")$/;"	f
prep_read	$C2_ROOT/libs/io_uring/io_uring.c2i	/^fn void Sqe.prep_read(Sqe* sqe, c_int fd, void* buf, u32 nbytes, u64 offset) @(cname="io_uring_p/;"	f
prep_read_fixed	$C2_ROOT/libs/io_uring/io_uring.c2i	/^fn void Sqe.prep_read_fixed(Sqe* sqe, c_int fd, void* buf, u32 nbytes, u64 offset, c_int buf_ind/;"	f
prep_readv	$C2_ROOT/libs/io_uring/io_uring.c2i	/^fn void Sqe.prep_readv(Sqe* sqe, c_int fd, const uio.Iovec* iovecs, u32 nr_vecs, u64 offset) @(c/;"	f
prep_rw	$C2_ROOT/libs/io_uring/io_uring.c2i	/^fn void prep_rw(c_int op, Sqe* sqe, c_int fd, const void* addr, u32 len, u64 offset) @(cname="io/;"	f
prep_timeout	$C2_ROOT/libs/io_uring/io_uring.c2i	/^fn void Sqe.prep_timeout(Sqe* sqe, linux_types.Timespec* ts,$/;"	f
prep_timeout_remove	$C2_ROOT/libs/io_uring/io_uring.c2i	/^fn void Sqe.prep_timeout_remove(Sqe* sqe, u64 user_data, u32 flags) @(cname="io_uring_prep_timeo/;"	f
prep_timeout_update	$C2_ROOT/libs/io_uring/io_uring.c2i	/^fn void Sqe.prep_timeout_update(Sqe* sqe, linux_types.Timespec* ts, u64 user_data, u32 flags) @(/;"	f
prep_write	$C2_ROOT/libs/io_uring/io_uring.c2i	/^fn void Sqe.prep_write(Sqe* sqe, c_int fd, const void* buf, u32 nbytes, u64 offset) @(cname="io_/;"	f
prep_write_fixed	$C2_ROOT/libs/io_uring/io_uring.c2i	/^fn void Sqe.prep_write_fixed(Sqe* sqe, c_int fd, const void* buf, u32 nbytes, u64 offset, c_int /;"	f
prep_writev	$C2_ROOT/libs/io_uring/io_uring.c2i	/^fn void Sqe.prep_writev(Sqe* sqe, c_int fd, const uio.Iovec* iovecs, u32 nr_vecs, u64 offset) @(/;"	f
present	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn void Renderer.present(Renderer* renderer) @(cname="SDL_RenderPresent");$/;"	f
print	$C2_ROOT/analyser/module_sorter.c2	/^fn void ModuleSorter.print(const ModuleSorter* s) {$/;"	f
print	$C2_ROOT/ast/alias_type.c2	/^fn void AliasType.print(const AliasType* t, string_buffer.Buf* out) {$/;"	f
print	$C2_ROOT/ast/alias_type_decl.c2	/^fn void AliasTypeDecl.print(const AliasTypeDecl* d, string_buffer.Buf* out, u32 indent) {$/;"	f
print	$C2_ROOT/ast/array_designated_init_expr.c2	/^fn void ArrayDesignatedInitExpr.print(const ArrayDesignatedInitExpr* e, string_buffer.Buf* out, /;"	f
print	$C2_ROOT/ast/array_subscript_expr.c2	/^fn void ArraySubscriptExpr.print(const ArraySubscriptExpr* e, string_buffer.Buf* out, u32 indent/;"	f
print	$C2_ROOT/ast/array_type.c2	/^fn void ArrayType.print(const ArrayType* t, string_buffer.Buf* out) {$/;"	f
print	$C2_ROOT/ast/array_value.c2	/^fn void ArrayValue.print(const ArrayValue* d, string_buffer.Buf* out) @(unused) {$/;"	f
print	$C2_ROOT/ast/asm_stmt.c2	/^fn void AsmStmt.print(const AsmStmt* s, string_buffer.Buf* out, u32 indent) {$/;"	f
print	$C2_ROOT/ast/assert_stmt.c2	/^fn void AssertStmt.print(const AssertStmt* s, string_buffer.Buf* out, u32 indent) {$/;"	f
print	$C2_ROOT/ast/ast.c2	/^fn void AST.print(const AST* a, string_buffer.Buf* out, bool show_funcs) {$/;"	f
print	$C2_ROOT/ast/binary_operator.c2	/^fn void BinaryOperator.print(const BinaryOperator* e, string_buffer.Buf* out, u32 indent) {$/;"	f
print	$C2_ROOT/ast/bitoffset_expr.c2	/^fn void BitOffsetExpr.print(const BitOffsetExpr* e, string_buffer.Buf* out, u32 indent) {$/;"	f
print	$C2_ROOT/ast/boolean_literal.c2	/^fn void BooleanLiteral.print(const BooleanLiteral* e, string_buffer.Buf* out, u32 indent) {$/;"	f
print	$C2_ROOT/ast/break_stmt.c2	/^fn void BreakStmt.print(const BreakStmt* s, string_buffer.Buf* out, u32 indent) {$/;"	f
print	$C2_ROOT/ast/builtin_expr.c2	/^fn void BuiltinExpr.print(const BuiltinExpr* e, string_buffer.Buf* out, u32 indent) {$/;"	f
print	$C2_ROOT/ast/builtin_type.c2	/^fn void BuiltinType.print(const BuiltinType* b, string_buffer.Buf* out) {$/;"	f
print	$C2_ROOT/ast/call_expr.c2	/^fn void CallExpr.print(const CallExpr* e, string_buffer.Buf* out, u32 indent) {$/;"	f
print	$C2_ROOT/ast/char_literal.c2	/^fn void CharLiteral.print(const CharLiteral* e, string_buffer.Buf* out, u32 indent) {$/;"	f
print	$C2_ROOT/ast/compound_stmt.c2	/^fn void CompoundStmt.print(const CompoundStmt* s, string_buffer.Buf* out, u32 indent) {$/;"	f
print	$C2_ROOT/ast/conditional_operator.c2	/^fn void ConditionalOperator.print(const ConditionalOperator* e, string_buffer.Buf* out, u32 inde/;"	f
print	$C2_ROOT/ast/continue_stmt.c2	/^fn void ContinueStmt.print(const ContinueStmt* s, string_buffer.Buf* out, u32 indent) {$/;"	f
print	$C2_ROOT/ast/decl.c2	/^fn void Decl.print(const Decl* d, string_buffer.Buf* out, u32 indent) {$/;"	f
print	$C2_ROOT/ast/decl_stmt.c2	/^fn void DeclStmt.print(const DeclStmt* s, string_buffer.Buf* out, u32 indent) {$/;"	f
print	$C2_ROOT/ast/enum_constant_decl.c2	/^fn void EnumConstantDecl.print(const EnumConstantDecl* d, string_buffer.Buf* out, u32 indent) {$/;"	f
print	$C2_ROOT/ast/enum_type.c2	/^fn void EnumType.print(const EnumType* t, string_buffer.Buf* out) {$/;"	f
print	$C2_ROOT/ast/enum_type_decl.c2	/^fn void EnumTypeDecl.print(EnumTypeDecl* d, string_buffer.Buf* out, u32 indent) {$/;"	f
print	$C2_ROOT/ast/explicit_cast_expr.c2	/^fn void ExplicitCastExpr.print(const ExplicitCastExpr* e, string_buffer.Buf* out, u32 indent) {$/;"	f
print	$C2_ROOT/ast/expr.c2	/^fn void Expr.print(const Expr* e, string_buffer.Buf* out, u32 indent) {$/;"	f
print	$C2_ROOT/ast/fallthrough_stmt.c2	/^fn void FallthroughStmt.print(const FallthroughStmt* s, string_buffer.Buf* out, u32 indent) {$/;"	f
print	$C2_ROOT/ast/field_designated_init_expr.c2	/^fn void FieldDesignatedInitExpr.print(const FieldDesignatedInitExpr* e, string_buffer.Buf* out, /;"	f
print	$C2_ROOT/ast/float_literal.c2	/^fn void FloatLiteral.print(const FloatLiteral* e, string_buffer.Buf* out, u32 indent) {$/;"	f
print	$C2_ROOT/ast/for_stmt.c2	/^fn void ForStmt.print(const ForStmt* s, string_buffer.Buf* out, u32 indent) {$/;"	f
print	$C2_ROOT/ast/function_decl.c2	/^fn void FunctionDecl.print(const FunctionDecl* d, string_buffer.Buf* out, u32 indent) {$/;"	f
print	$C2_ROOT/ast/function_type.c2	/^fn void FunctionType.print(const FunctionType* t, string_buffer.Buf* out) {$/;"	f
print	$C2_ROOT/ast/function_type_decl.c2	/^fn void FunctionTypeDecl.print(const FunctionTypeDecl* d, string_buffer.Buf* out, u32 indent) {$/;"	f
print	$C2_ROOT/ast/goto_stmt.c2	/^fn void GotoStmt.print(const GotoStmt* s, string_buffer.Buf* out, u32 indent) {$/;"	f
print	$C2_ROOT/ast/identifier_expr.c2	/^fn void IdentifierExpr.print(const IdentifierExpr* e, string_buffer.Buf* out, u32 indent) {$/;"	f
print	$C2_ROOT/ast/if_stmt.c2	/^fn void IfStmt.print(const IfStmt* s, string_buffer.Buf* out, u32 indent) {$/;"	f
print	$C2_ROOT/ast/implicit_cast_expr.c2	/^fn void ImplicitCastExpr.print(const ImplicitCastExpr* e, string_buffer.Buf* out, u32 indent) {$/;"	f
print	$C2_ROOT/ast/import_decl.c2	/^fn void ImportDecl.print(const ImportDecl* d, string_buffer.Buf* out, u32 indent) {$/;"	f
print	$C2_ROOT/ast/init_list_expr.c2	/^fn void InitListExpr.print(const InitListExpr* e, string_buffer.Buf* out, u32 indent) {$/;"	f
print	$C2_ROOT/ast/integer_literal.c2	/^fn void IntegerLiteral.print(const IntegerLiteral* e, string_buffer.Buf* out, u32 indent) {$/;"	f
print	$C2_ROOT/ast/label_stmt.c2	/^fn void LabelStmt.print(const LabelStmt* s, string_buffer.Buf* out, u32 indent) {$/;"	f
print	$C2_ROOT/ast/member_expr.c2	/^fn void MemberExpr.print(const MemberExpr* e, string_buffer.Buf* out, u32 indent) {$/;"	f
print	$C2_ROOT/ast/module.c2	/^public fn void Module.print(const Module* m, string_buffer.Buf* out, bool show_funcs) {$/;"	f
print	$C2_ROOT/ast/module_type.c2	/^fn void ModuleType.print(const ModuleType* t, string_buffer.Buf* out) {$/;"	f
print	$C2_ROOT/ast/nil_expr.c2	/^fn void NilExpr.print(const NilExpr* e, string_buffer.Buf* out, u32 indent) {$/;"	f
print	$C2_ROOT/ast/paren_expr.c2	/^fn void ParenExpr.print(const ParenExpr* e, string_buffer.Buf* out, u32 indent) {$/;"	f
print	$C2_ROOT/ast/pointer_type.c2	/^fn void PointerType.print(const PointerType* t, string_buffer.Buf* out) {$/;"	f
print	$C2_ROOT/ast/qualtype.c2	/^public fn void QualType.print(const QualType* qt, string_buffer.Buf* out) {$/;"	f
print	$C2_ROOT/ast/range_expr.c2	/^fn void RangeExpr.print(const RangeExpr* e, string_buffer.Buf* out, u32 indent) {$/;"	f
print	$C2_ROOT/ast/return_stmt.c2	/^fn void ReturnStmt.print(const ReturnStmt* s, string_buffer.Buf* out, u32 indent) {$/;"	f
print	$C2_ROOT/ast/static_assert.c2	/^fn void StaticAssert.print(const StaticAssert* d, string_buffer.Buf* out, u32 indent) {$/;"	f
print	$C2_ROOT/ast/stmt.c2	/^fn void Stmt.print(const Stmt* s, string_buffer.Buf* out, u32 indent) {$/;"	f
print	$C2_ROOT/ast/string_literal.c2	/^fn void StringLiteral.print(const StringLiteral* e, string_buffer.Buf* out, u32 indent) {$/;"	f
print	$C2_ROOT/ast/struct_type.c2	/^fn void StructType.print(const StructType* t, string_buffer.Buf* out) {$/;"	f
print	$C2_ROOT/ast/struct_type_decl.c2	/^fn void StructTypeDecl.print(const StructTypeDecl* d, string_buffer.Buf* out, u32 indent) {$/;"	f
print	$C2_ROOT/ast/switch_case.c2	/^fn void SwitchCase.print(const SwitchCase* s, string_buffer.Buf* out, u32 indent) {$/;"	f
print	$C2_ROOT/ast/switch_stmt.c2	/^fn void SwitchStmt.print(const SwitchStmt* s, string_buffer.Buf* out, u32 indent) {$/;"	f
print	$C2_ROOT/ast/symbol_table.c2	/^public fn void SymbolTable.print(const SymbolTable* t, string_buffer.Buf* out) {$/;"	f
print	$C2_ROOT/ast/type.c2	/^fn void Type.print(const Type* t, string_buffer.Buf* out) {$/;"	f
print	$C2_ROOT/ast/type_expr.c2	/^fn void TypeExpr.print(const TypeExpr* e, string_buffer.Buf* out, u32 indent) {$/;"	f
print	$C2_ROOT/ast/type_ref.c2	/^fn void TypeRef.print(const TypeRef* r, string_buffer.Buf* out, bool filled) {$/;"	f
print	$C2_ROOT/ast/unary_operator.c2	/^fn void UnaryOperator.print(const UnaryOperator* e, string_buffer.Buf* out, u32 indent) {$/;"	f
print	$C2_ROOT/ast/var_decl.c2	/^fn void VarDecl.print(const VarDecl* d, string_buffer.Buf* out, u32 indent) {$/;"	f
print	$C2_ROOT/ast/while_stmt.c2	/^fn void WhileStmt.print(const WhileStmt* s, string_buffer.Buf* out, u32 indent) {$/;"	f
print	$C2_ROOT/ast_utils/string_buffer.c2	/^public fn void Buf.print(Buf* buf, const char* format @(printf_format), ...) {$/;"	f
print	$C2_ROOT/common/component.c2	/^public fn void Component.print(const Component* c, bool show_funcs) {$/;"	f
print	$C2_ROOT/ir/print.c2	/^public fn void Context.print(const Context* c) {$/;"	f
print	$C2_ROOT/tools/c2tags.c2	/^fn void Results.print(const Results* r) {$/;"	f
printAttrs	$C2_ROOT/ast/decl.c2	/^fn void Decl.printAttrs(const Decl* d, string_buffer.Buf* out) {$/;"	f
printBinary	$C2_ROOT/ast/integer_literal.c2	/^fn void printBinary(string_buffer.Buf* out, u64 value) {$/;"	f
printBits	$C2_ROOT/ast/decl.c2	/^fn void Decl.printBits(const Decl* d, string_buffer.Buf* out) {$/;"	f
printInitValue	$C2_ROOT/ir/print.c2	/^fn void PrintHelper.printInitValue(PrintHelper* ph, const InitValue* v, string_buffer.Buf* out) /;"	f
printInner	$C2_ROOT/ast/qualtype.c2	/^fn void QualType.printInner(const QualType* qt, string_buffer.Buf* out,  bool printCanon, bool p/;"	f
printInstr	$C2_ROOT/ir/print.c2	/^fn void PrintHelper.printInstr(PrintHelper* ph, const Instr* blk_instrs, u32 blk_instr_idx, u32 /;"	f
printIssues	$C2_ROOT/tools/tester/test_db.c2	/^public fn bool Db.printIssues(const Db* db) {$/;"	f
printKind	$C2_ROOT/ast/decl.c2	/^fn void Decl.printKind(const Decl* d, string_buffer.Buf* out, u32 indent, bool print_type) {$/;"	f
printKind	$C2_ROOT/ast/expr.c2	/^fn void Expr.printKind(const Expr* e, string_buffer.Buf* out, u32 indent) {$/;"	f
printKind	$C2_ROOT/ast/stmt.c2	/^fn void Stmt.printKind(const Stmt* s, string_buffer.Buf* out, u32 indent) {$/;"	f
printLiteral	$C2_ROOT/ast/array_designated_init_expr.c2	/^fn void ArrayDesignatedInitExpr.printLiteral(const ArrayDesignatedInitExpr* e, string_buffer.Buf/;"	f
printLiteral	$C2_ROOT/ast/array_subscript_expr.c2	/^fn void ArraySubscriptExpr.printLiteral(const ArraySubscriptExpr* e, string_buffer.Buf* out) {$/;"	f
printLiteral	$C2_ROOT/ast/binary_operator.c2	/^fn void BinaryOperator.printLiteral(const BinaryOperator* e, string_buffer.Buf* out) {$/;"	f
printLiteral	$C2_ROOT/ast/bitoffset_expr.c2	/^fn void BitOffsetExpr.printLiteral(const BitOffsetExpr* e, string_buffer.Buf* out) {$/;"	f
printLiteral	$C2_ROOT/ast/boolean_literal.c2	/^public fn void BooleanLiteral.printLiteral(const BooleanLiteral* e, string_buffer.Buf* out) {$/;"	f
printLiteral	$C2_ROOT/ast/builtin_expr.c2	/^fn void BuiltinExpr.printLiteral(const BuiltinExpr* e, string_buffer.Buf* out) {$/;"	f
printLiteral	$C2_ROOT/ast/call_expr.c2	/^fn void CallExpr.printLiteral(const CallExpr* e, string_buffer.Buf* out) {$/;"	f
printLiteral	$C2_ROOT/ast/char_literal.c2	/^public fn void CharLiteral.printLiteral(const CharLiteral* e, string_buffer.Buf* out) {$/;"	f
printLiteral	$C2_ROOT/ast/conditional_operator.c2	/^fn void ConditionalOperator.printLiteral(const ConditionalOperator* e, string_buffer.Buf* out) {$/;"	f
printLiteral	$C2_ROOT/ast/explicit_cast_expr.c2	/^fn void ExplicitCastExpr.printLiteral(const ExplicitCastExpr* e, string_buffer.Buf* out) {$/;"	f
printLiteral	$C2_ROOT/ast/expr.c2	/^public fn void Expr.printLiteral(const Expr* e, string_buffer.Buf* out) {$/;"	f
printLiteral	$C2_ROOT/ast/field_designated_init_expr.c2	/^fn void FieldDesignatedInitExpr.printLiteral(const FieldDesignatedInitExpr* e, string_buffer.Buf/;"	f
printLiteral	$C2_ROOT/ast/float_literal.c2	/^public fn void FloatLiteral.printLiteral(const FloatLiteral* e, string_buffer.Buf* out) {$/;"	f
printLiteral	$C2_ROOT/ast/identifier_expr.c2	/^fn void IdentifierExpr.printLiteral(const IdentifierExpr* e, string_buffer.Buf* out) {$/;"	f
printLiteral	$C2_ROOT/ast/implicit_cast_expr.c2	/^fn void ImplicitCastExpr.printLiteral(const ImplicitCastExpr* e, string_buffer.Buf* out) {$/;"	f
printLiteral	$C2_ROOT/ast/init_list_expr.c2	/^fn void InitListExpr.printLiteral(const InitListExpr* e, string_buffer.Buf* out) {$/;"	f
printLiteral	$C2_ROOT/ast/integer_literal.c2	/^public fn void IntegerLiteral.printLiteral(const IntegerLiteral* e, string_buffer.Buf* out, bool/;"	f
printLiteral	$C2_ROOT/ast/member_expr.c2	/^fn void MemberExpr.printLiteral(const MemberExpr* e, string_buffer.Buf* out) {$/;"	f
printLiteral	$C2_ROOT/ast/nil_expr.c2	/^fn void NilExpr.printLiteral(const NilExpr*, string_buffer.Buf* out) {$/;"	f
printLiteral	$C2_ROOT/ast/paren_expr.c2	/^fn void ParenExpr.printLiteral(const ParenExpr* e, string_buffer.Buf* out) {$/;"	f
printLiteral	$C2_ROOT/ast/range_expr.c2	/^fn void RangeExpr.printLiteral(const RangeExpr* e, string_buffer.Buf* out) {$/;"	f
printLiteral	$C2_ROOT/ast/string_literal.c2	/^public fn void StringLiteral.printLiteral(const StringLiteral* e, string_buffer.Buf* out) {$/;"	f
printLiteral	$C2_ROOT/ast/type_expr.c2	/^fn void TypeExpr.printLiteral(const TypeExpr* e, string_buffer.Buf* out) {$/;"	f
printLiteral	$C2_ROOT/ast/type_ref.c2	/^fn void TypeRef.printLiteral(const TypeRef* r, string_buffer.Buf* out, bool print_prefix) {$/;"	f
printLiteral	$C2_ROOT/ast/unary_operator.c2	/^fn void UnaryOperator.printLiteral(const UnaryOperator* e, string_buffer.Buf* out) {$/;"	f
printLiteral2	$C2_ROOT/ast/type_ref.c2	/^public fn void TypeRef.printLiteral2(const TypeRef* r, string_buffer.Buf* out, bool print_prefix/;"	f
printModules	$C2_ROOT/common/component.c2	/^public fn void Component.printModules(const Component* c) {$/;"	f
printName	$C2_ROOT/ast/decl.c2	/^fn void Decl.printName(const Decl* d, string_buffer.Buf* out) {$/;"	f
printOctal	$C2_ROOT/ast/integer_literal.c2	/^fn void printOctal(string_buffer.Buf* out, u64 value) {$/;"	f
printPostName	$C2_ROOT/ast/array_type.c2	/^fn void ArrayType.printPostName(const ArrayType* t, string_buffer.Buf* out) {$/;"	f
printPreName	$C2_ROOT/ast/array_type.c2	/^fn void ArrayType.printPreName(const ArrayType* t, string_buffer.Buf* out) {$/;"	f
printQuoted	$C2_ROOT/ast/qualtype.c2	/^fn void QualType.printQuoted(const QualType* qt, string_buffer.Buf* out) {$/;"	f
printRef	$C2_ROOT/ir/print.c2	/^fn void PrintHelper.printRef(PrintHelper* ph, Ref r, bool print_type) {$/;"	f
printStatus	$C2_ROOT/common/diagnostics.c2	/^public fn void Diags.printStatus(const Diags* diags) {$/;"	f
printSymbols	$C2_ROOT/common/component.c2	/^public fn void Component.printSymbols(const Component* c, bool print_external) {$/;"	f
printType	$C2_ROOT/ast/function_decl.c2	/^fn void FunctionDecl.printType(const FunctionDecl* d, string_buffer.Buf* out) {$/;"	f
printType	$C2_ROOT/ast/var_decl.c2	/^fn void VarDecl.printType(const VarDecl* d, string_buffer.Buf* out) {$/;"	f
printTypeBits	$C2_ROOT/ast/expr.c2	/^fn void Expr.printTypeBits(const Expr* e, string_buffer.Buf* out) {$/;"	f
printUsed	$C2_ROOT/ast/decl.c2	/^fn void Decl.printUsed(const Decl* d, string_buffer.Buf* out) {$/;"	f
print_dest	$C2_ROOT/ir/print.c2	/^fn void print_dest(string_buffer.Buf* out, BlockId id) {$/;"	f
print_error	$C2_ROOT/tools/tester/test_utils.c2	/^public fn void print_error(const char* format @(printf_format), ...) {$/;"	f
print_errormsg	$C2_ROOT/output/unit_test/libunit_test.dylib	/^fn void print_errormsg(const char* fmt @(printf_format), ...) {$/;"	f
print_errormsg	$C2_ROOT/plugins/unit_test2.c2	/^fn void print_errormsg(const char* fmt @(printf_format), ...) {$/;"	f
print_func	$C2_ROOT/ir/context.c2	/^fn void Tools.print_func(const Tools* t, const char* label) {$/;"	f
print_func	$C2_ROOT/ir/print.c2	/^fn void PrintHelper.print_func(PrintHelper* ph, const Symbol* s, const FunctionInfo* info) {$/;"	f
print_function	$C2_ROOT/ir/print.c2	/^fn void Context.print_function(const Context* c,$/;"	f
print_idx	$C2_ROOT/ir/interference_graph.c2	/^fn void print_idx(u16 idx) {$/;"	f
print_idx	$C2_ROOT/ir/live_map.c2	/^fn void print_idx(u16 idx) {$/;"	f
print_idx	$C2_ROOT/ir/slot_writes_map.c2	/^fn void print_idx(u16 idx) {$/;"	f
print_recipe_help	$C2_ROOT/compiler/main.c2	/^fn void print_recipe_help() {$/;"	f
print_token	$C2_ROOT/tools/c2cat.c2	/^fn void C2cat.print_token(C2cat* ctx, const Token* tok) {$/;"	f
print_version	$C2_ROOT/compiler/main.c2	/^fn void print_version() {$/;"	f
print_word	$C2_ROOT/generator/radix_tree/radix_tree_dump.c2	/^fn void print_word(void* arg, const char* text, u32 value) {$/;"	f
printf	$C2_ROOT/libs/libc/stdio.c2i	/^fn c_int printf(const c_char* __format @(printf_format), ...);$/;"	f
printf_utils	$C2_ROOT/analyser_utils/printf_utils.c2	/^module printf_utils;$/;"	m
process_utils	$C2_ROOT/common/process_utils.c2	/^module process_utils;$/;"	m
promoteBlockSlots	$C2_ROOT/ir/slot_collector.c2	/^fn void SlotCollector.promoteBlockSlots(SlotCollector* c, BlockId blk_id) {$/;"	f
promotesToInt32	$C2_ROOT/ast/qualtype.c2	/^public fn bool QualType.promotesToInt32(const QualType* qt) {$/;"	f
propagateConstants	$C2_ROOT/ir/ssa.c2	/^fn bool Tools.propagateConstants(Tools* t) {$/;"	f
provided	$C2_ROOT/libs/sokol/c/sokol_app.h	/^    alloc_fn and free_fn function must be provided (e.g. it's not valid to$/;"	f
provided	$C2_ROOT/libs/sokol/c/sokol_audio.h	/^    alloc_fn and free_fn function must be provided (e.g. it's not valid to$/;"	f
provided	$C2_ROOT/libs/sokol/c/sokol_debugtext.h	/^    alloc_fn and free_fn function must be provided (e.g. it's not valid to$/;"	f
provided	$C2_ROOT/libs/sokol/c/sokol_gfx.h	/^    alloc_fn and free_fn function must be provided (e.g. it's not valid to$/;"	f
provided	$C2_ROOT/libs/sokol_/c/sokol_app.h	/^    alloc_fn and free_fn function must be provided (e.g. it's not valid to$/;"	f
provided	$C2_ROOT/libs/sokol_/c/sokol_audio.h	/^    alloc_fn and free_fn function must be provided (e.g. it's not valid to$/;"	f
provided	$C2_ROOT/libs/sokol_/c/sokol_debugtext.h	/^    alloc_fn and free_fn function must be provided (e.g. it's not valid to$/;"	f
provided	$C2_ROOT/libs/sokol_/c/sokol_gfx.h	/^    alloc_fn and free_fn function must be provided (e.g. it's not valid to$/;"	f
prune	$C2_ROOT/ir/instr_list.c2	/^public fn void InstrList.prune(InstrList* l) {$/;"	f
pstrcpy	$C2_ROOT/common/file/file_utils.c2	/^fn usize pstrcpy(char *dest, usize size, const char* src) {$/;"	f
pthread	$C2_ROOT/libs/pthread/pthread.c2i	/^module pthread;$/;"	m
push	$C2_ROOT/libs/sokol/sokol_audio.c2i	/^fn c_int push(c_float* frames, c_int num_frames) @(cname="saudio_push");$/;"	f
push	$C2_ROOT/libs/sokol_/sokol_audio.c2i	/^fn c_int push(c_float* frames, c_int num_frames) @(cname="saudio_push");$/;"	f
pushCheck	$C2_ROOT/analyser/module_analyser.c2	/^fn bool Analyser.pushCheck(Analyser* ma, Decl* d, scope.Scope* s, FunctionDecl* fd) {$/;"	f
pushDebugGroup	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn void pushDebugGroup(const char* name) @(cname="sg_push_debug_group");$/;"	f
pushDebugGroup	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn void pushDebugGroup(const char* name) @(cname="sg_push_debug_group");$/;"	f
pushEvent	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn c_int pushEvent(Event* event)  @(cname="SDL_PushEvent");$/;"	f
pushMatrix	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn void pushMatrix() @(cname="sgl_push_matrix");$/;"	f
pushMatrix	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn void pushMatrix() @(cname="sgl_push_matrix");$/;"	f
pushPipeline	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn void pushPipeline() @(cname="sgl_push_pipeline");$/;"	f
pushPipeline	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn void pushPipeline() @(cname="sgl_push_pipeline");$/;"	f
push_node	$C2_ROOT/common/yaml/yaml_parser.c2	/^fn void Parser.push_node(Parser* p, Node* n, NodeKind parent_kind, i32 indent) {$/;"	f
push_root	$C2_ROOT/common/yaml/yaml_parser.c2	/^fn void Parser.push_root(Parser* p) {$/;"	f
pushboolean	$C2_ROOT/libs/lua/lua.c2i	/^fn void pushboolean(State *L, c_int b) @(cname="lua_pushboolean");$/;"	f
pushcclosure	$C2_ROOT/libs/lua/lua.c2i	/^fn void pushcclosure(State *L, CFunction func, c_int n) @(cname="lua_pushcclosure");$/;"	f
pushinteger	$C2_ROOT/libs/lua/lua.c2i	/^fn void pushinteger(State *L, Integer n) @(cname="lua_pushinteger");$/;"	f
pushlightuserdata	$C2_ROOT/libs/lua/lua.c2i	/^fn void pushlightuserdata(State *L, void *p) @(cname="lua_pushlightuserdata");$/;"	f
pushlstring	$C2_ROOT/libs/lua/lua.c2i	/^fn const c_char* pushlstring(State *L, const c_char* s, c_size len) @(cname="lua_pushlstring");$/;"	f
pushnil	$C2_ROOT/libs/lua/lua.c2i	/^fn void pushnil(State *L) @(cname="lua_pushnil");$/;"	f
pushnumber	$C2_ROOT/libs/lua/lua.c2i	/^fn void pushnumber(State *L, Number n) @(cname="lua_pushnumber");$/;"	f
pushstring	$C2_ROOT/libs/lua/lua.c2i	/^fn const c_char* pushstring(State *L, const c_char* s) @(cname="lua_pushstring");$/;"	f
pushthread	$C2_ROOT/libs/lua/lua.c2i	/^fn c_int pushthread(State *L) @(cname="lua_pushthread");$/;"	f
pushvalue	$C2_ROOT/libs/lua/lua.c2i	/^fn void pushvalue(State* L, c_int idx) @(cname="lua_pushvalue");$/;"	f
putInitChecker	$C2_ROOT/analyser/module_analyser.c2	/^fn void Analyser.putInitChecker(Analyser* ma, init_checker.Checker* c) {$/;"	f
putStmtList	$C2_ROOT/parser/c2_parser.c2	/^fn void Parser.putStmtList(Parser* p) {$/;"	f
putc	$C2_ROOT/libs/libc/stdio.c2i	/^fn c_int putc(c_int __c, FILE* __stream);$/;"	f
putc	$C2_ROOT/libs/sokol/sokol_debugtext.c2i	/^fn void putc(char c) @(cname="sdtx_putc");$/;"	f
putc	$C2_ROOT/libs/sokol_/sokol_debugtext.c2i	/^fn void putc(char c) @(cname="sdtx_putc");$/;"	f
putc_unlocked	$C2_ROOT/libs/libc/stdio.c2i	/^fn c_int putc_unlocked(c_int __c, FILE* __stream);$/;"	f
putchar	$C2_ROOT/libs/libc/stdio.c2i	/^fn c_int putchar(c_int __c);$/;"	f
putchar_unlocked	$C2_ROOT/libs/libc/stdio.c2i	/^fn c_int putchar_unlocked(c_int __c);$/;"	f
putenv	$C2_ROOT/libs/libc/stdlib.c2i	/^fn c_int putenv(c_char* __string);$/;"	f
putr	$C2_ROOT/libs/sokol/sokol_debugtext.c2i	/^fn void putr(const char* str, c_int len) @(cname="sdtx_putr");$/;"	f
putr	$C2_ROOT/libs/sokol_/sokol_debugtext.c2i	/^fn void putr(const char* str, c_int len) @(cname="sdtx_putr");$/;"	f
puts	$C2_ROOT/libs/libc/stdio.c2i	/^fn c_int puts(const c_char* __s);$/;"	f
puts	$C2_ROOT/libs/sokol/sokol_debugtext.c2i	/^fn void puts(const char* str) @(cname="sdtx_puts");$/;"	f
puts	$C2_ROOT/libs/sokol_/sokol_debugtext.c2i	/^fn void puts(const char* str) @(cname="sdtx_puts");$/;"	f
putw	$C2_ROOT/libs/libc/stdio.c2i	/^fn c_int putw(c_int __w, FILE* __stream);$/;"	f
qecvt	$C2_ROOT/libs/libc/stdlib.c2i	/^fn c_char* qecvt(c_double __value, c_int __ndigit, c_int* __decpt, c_int* __sign);$/;"	f
qecvt_r	$C2_ROOT/libs/libc/stdlib.c2i	/^fn c_int qecvt_r(c_double __value, c_int __ndigit, c_int* __decpt, c_int* __sign, c_char* __buf,/;"	f
qfcvt	$C2_ROOT/libs/libc/stdlib.c2i	/^fn c_char* qfcvt(c_double __value, c_int __ndigit, c_int* __decpt, c_int* __sign);$/;"	f
qfcvt_r	$C2_ROOT/libs/libc/stdlib.c2i	/^fn c_int qfcvt_r(c_double __value, c_int __ndigit, c_int* __decpt, c_int* __sign, c_char* __buf,/;"	f
qgcvt	$C2_ROOT/libs/libc/stdlib.c2i	/^fn c_char* qgcvt(c_double __value, c_int __ndigit, c_char* __buf);$/;"	f
qsort	$C2_ROOT/libs/libc/stdlib.c2i	/^fn void qsort(void* __base, c_size __nmemb, c_size __size, StdlibCompareFn __compar);$/;"	f
qualifier	$C2_ROOT/analyser/module_analyser_function.c2	/^        ma.warn(rtype.getLoc(), "'const' type qualifier on return type has no effect");$/;"	t
qualifier	$C2_ROOT/bootstrap/bootstrap.c	/^      module_analyser_Analyser_warn(ma, ast_TypeRef_getLoc(rtype), "'const' type qualifier on re/;"	t
qualifier	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^      module_analyser_Analyser_warn(ma, ast_TypeRef_getLoc(rtype), "'const' type qualifier on re/;"	t
qualifier	$C2_ROOT/output/c2c/cgen/build.c	/^      module_analyser_Analyser_warn(ma, ast_TypeRef_getLoc(rtype), "'const' type qualifier on re/;"	t
qualifier	$C2_ROOT/output/c2c/cgen/module_analyser.c	/^      module_analyser_Analyser_warn(ma, ast_TypeRef_getLoc(rtype), "'const' type qualifier on re/;"	t
qualifier	$C2_ROOT/output/c2c_trace/cgen/module_analyser.c	/^      (c2_trace_counts[6147]++, module_analyser_Analyser_warn)(ma, (c2_trace_counts[6148]++, ast/;"	t
query	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn c_int Texture.query(Texture* texture, u32 format, c_int* access, c_int* w, c_int* h) @(cname /;"	f
queryBackend	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn Backend queryBackend() @(cname="sg_query_backend");$/;"	f
queryBackend	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn Backend queryBackend() @(cname="sg_query_backend");$/;"	f
queryBufferDefaults	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn BufferDesc queryBufferDefaults(BufferDesc* desc) @(cname="sg_query_buffer_defaults");$/;"	f
queryBufferDefaults	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn BufferDesc queryBufferDefaults(BufferDesc* desc) @(cname="sg_query_buffer_defaults");$/;"	f
queryBufferDesc	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn BufferDesc queryBufferDesc(Buffer buf) @(cname="sg_query_buffer_desc");$/;"	f
queryBufferDesc	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn BufferDesc queryBufferDesc(Buffer buf) @(cname="sg_query_buffer_desc");$/;"	f
queryBufferInfo	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn BufferInfo queryBufferInfo(Buffer buf) @(cname="sg_query_buffer_info");$/;"	f
queryBufferInfo	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn BufferInfo queryBufferInfo(Buffer buf) @(cname="sg_query_buffer_info");$/;"	f
queryBufferOverflow	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn bool queryBufferOverflow(Buffer buf) @(cname="sg_query_buffer_overflow");$/;"	f
queryBufferOverflow	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn bool queryBufferOverflow(Buffer buf) @(cname="sg_query_buffer_overflow");$/;"	f
queryBufferSize	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn usize queryBufferSize(Buffer buf) @(cname="sg_query_buffer_size");$/;"	f
queryBufferSize	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn usize queryBufferSize(Buffer buf) @(cname="sg_query_buffer_size");$/;"	f
queryBufferState	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn ResourceState queryBufferState(Buffer buf) @(cname="sg_query_buffer_state");$/;"	f
queryBufferState	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn ResourceState queryBufferState(Buffer buf) @(cname="sg_query_buffer_state");$/;"	f
queryBufferUsage	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn BufferUsage queryBufferUsage(Buffer buf) @(cname="sg_query_buffer_usage");$/;"	f
queryBufferUsage	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn BufferUsage queryBufferUsage(Buffer buf) @(cname="sg_query_buffer_usage");$/;"	f
queryBufferWillOverflow	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn bool queryBufferWillOverflow(Buffer buf, usize size) @(cname="sg_query_buffer_will_overflow")/;"	f
queryBufferWillOverflow	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn bool queryBufferWillOverflow(Buffer buf, usize size) @(cname="sg_query_buffer_will_overflow")/;"	f
queryDesc	$C2_ROOT/libs/sokol/sokol_app.c2i	/^fn Desc queryDesc() @(cname="sapp_query_desc");$/;"	f
queryDesc	$C2_ROOT/libs/sokol/sokol_audio.c2i	/^fn Desc queryDesc() @(cname="saudio_query_desc");$/;"	f
queryDesc	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn Desc queryDesc() @(cname="sg_query_desc");$/;"	f
queryDesc	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^fn Desc queryDesc() @(cname="sapp_query_desc");$/;"	f
queryDesc	$C2_ROOT/libs/sokol_/sokol_audio.c2i	/^fn Desc queryDesc() @(cname="saudio_query_desc");$/;"	f
queryDesc	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn Desc queryDesc() @(cname="sg_query_desc");$/;"	f
queryFeatures	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn Features queryFeatures() @(cname="sg_query_features");$/;"	f
queryFeatures	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn Features queryFeatures() @(cname="sg_query_features");$/;"	f
queryFrameStats	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn FrameStats queryFrameStats() @(cname="sg_query_frame_stats");$/;"	f
queryFrameStats	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn FrameStats queryFrameStats() @(cname="sg_query_frame_stats");$/;"	f
queryImageDefaults	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn ImageDesc queryImageDefaults(ImageDesc* desc) @(cname="sg_query_image_defaults");$/;"	f
queryImageDefaults	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn ImageDesc queryImageDefaults(ImageDesc* desc) @(cname="sg_query_image_defaults");$/;"	f
queryImageDesc	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn ImageDesc queryImageDesc(Image img) @(cname="sg_query_image_desc");$/;"	f
queryImageDesc	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn ImageDesc queryImageDesc(Image img) @(cname="sg_query_image_desc");$/;"	f
queryImageHeight	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn c_int queryImageHeight(Image img) @(cname="sg_query_image_height");$/;"	f
queryImageHeight	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn c_int queryImageHeight(Image img) @(cname="sg_query_image_height");$/;"	f
queryImageInfo	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn ImageInfo queryImageInfo(Image img) @(cname="sg_query_image_info");$/;"	f
queryImageInfo	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn ImageInfo queryImageInfo(Image img) @(cname="sg_query_image_info");$/;"	f
queryImageNumMipmaps	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn c_int queryImageNumMipmaps(Image img) @(cname="sg_query_image_num_mipmaps");$/;"	f
queryImageNumMipmaps	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn c_int queryImageNumMipmaps(Image img) @(cname="sg_query_image_num_mipmaps");$/;"	f
queryImageNumSlices	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn c_int queryImageNumSlices(Image img) @(cname="sg_query_image_num_slices");$/;"	f
queryImageNumSlices	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn c_int queryImageNumSlices(Image img) @(cname="sg_query_image_num_slices");$/;"	f
queryImagePixelformat	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn PixelFormat queryImagePixelformat(Image img) @(cname="sg_query_image_pixelformat");$/;"	f
queryImagePixelformat	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn PixelFormat queryImagePixelformat(Image img) @(cname="sg_query_image_pixelformat");$/;"	f
queryImageSampleCount	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn c_int queryImageSampleCount(Image img) @(cname="sg_query_image_sample_count");$/;"	f
queryImageSampleCount	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn c_int queryImageSampleCount(Image img) @(cname="sg_query_image_sample_count");$/;"	f
queryImageState	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn ResourceState queryImageState(Image img) @(cname="sg_query_image_state");$/;"	f
queryImageState	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn ResourceState queryImageState(Image img) @(cname="sg_query_image_state");$/;"	f
queryImageType	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn ImageType queryImageType(Image img) @(cname="sg_query_image_type");$/;"	f
queryImageType	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn ImageType queryImageType(Image img) @(cname="sg_query_image_type");$/;"	f
queryImageUsage	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn ImageUsage queryImageUsage(Image img) @(cname="sg_query_image_usage");$/;"	f
queryImageUsage	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn ImageUsage queryImageUsage(Image img) @(cname="sg_query_image_usage");$/;"	f
queryImageWidth	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn c_int queryImageWidth(Image img) @(cname="sg_query_image_width");$/;"	f
queryImageWidth	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn c_int queryImageWidth(Image img) @(cname="sg_query_image_width");$/;"	f
queryLimits	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn Limits queryLimits() @(cname="sg_query_limits");$/;"	f
queryLimits	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn Limits queryLimits() @(cname="sg_query_limits");$/;"	f
queryPipelineDefaults	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn PipelineDesc queryPipelineDefaults(PipelineDesc* desc) @(cname="sg_query_pipeline_defaults");$/;"	f
queryPipelineDefaults	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn PipelineDesc queryPipelineDefaults(PipelineDesc* desc) @(cname="sg_query_pipeline_defaults");$/;"	f
queryPipelineDesc	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn PipelineDesc queryPipelineDesc(Pipeline pip) @(cname="sg_query_pipeline_desc");$/;"	f
queryPipelineDesc	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn PipelineDesc queryPipelineDesc(Pipeline pip) @(cname="sg_query_pipeline_desc");$/;"	f
queryPipelineInfo	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn PipelineInfo queryPipelineInfo(Pipeline pip) @(cname="sg_query_pipeline_info");$/;"	f
queryPipelineInfo	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn PipelineInfo queryPipelineInfo(Pipeline pip) @(cname="sg_query_pipeline_info");$/;"	f
queryPipelineState	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn ResourceState queryPipelineState(Pipeline pip) @(cname="sg_query_pipeline_state");$/;"	f
queryPipelineState	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn ResourceState queryPipelineState(Pipeline pip) @(cname="sg_query_pipeline_state");$/;"	f
queryPixelformat	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn PixelformatInfo queryPixelformat(PixelFormat fmt) @(cname="sg_query_pixelformat");$/;"	f
queryPixelformat	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn PixelformatInfo queryPixelformat(PixelFormat fmt) @(cname="sg_query_pixelformat");$/;"	f
queryRowPitch	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn c_int queryRowPitch(PixelFormat fmt, c_int width, c_int row_align_bytes) @(cname="sg_query_ro/;"	f
queryRowPitch	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn c_int queryRowPitch(PixelFormat fmt, c_int width, c_int row_align_bytes) @(cname="sg_query_ro/;"	f
querySamplerDefaults	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn SamplerDesc querySamplerDefaults(SamplerDesc* desc) @(cname="sg_query_sampler_defaults");$/;"	f
querySamplerDefaults	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn SamplerDesc querySamplerDefaults(SamplerDesc* desc) @(cname="sg_query_sampler_defaults");$/;"	f
querySamplerDesc	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn SamplerDesc querySamplerDesc(Sampler smp) @(cname="sg_query_sampler_desc");$/;"	f
querySamplerDesc	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn SamplerDesc querySamplerDesc(Sampler smp) @(cname="sg_query_sampler_desc");$/;"	f
querySamplerInfo	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn SamplerInfo querySamplerInfo(Sampler smp) @(cname="sg_query_sampler_info");$/;"	f
querySamplerInfo	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn SamplerInfo querySamplerInfo(Sampler smp) @(cname="sg_query_sampler_info");$/;"	f
querySamplerState	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn ResourceState querySamplerState(Sampler smp) @(cname="sg_query_sampler_state");$/;"	f
querySamplerState	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn ResourceState querySamplerState(Sampler smp) @(cname="sg_query_sampler_state");$/;"	f
queryShaderDefaults	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn ShaderDesc queryShaderDefaults(ShaderDesc* desc) @(cname="sg_query_shader_defaults");$/;"	f
queryShaderDefaults	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn ShaderDesc queryShaderDefaults(ShaderDesc* desc) @(cname="sg_query_shader_defaults");$/;"	f
queryShaderDesc	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn ShaderDesc queryShaderDesc(Shader shd) @(cname="sg_query_shader_desc");$/;"	f
queryShaderDesc	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn ShaderDesc queryShaderDesc(Shader shd) @(cname="sg_query_shader_desc");$/;"	f
queryShaderInfo	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn ShaderInfo queryShaderInfo(Shader shd) @(cname="sg_query_shader_info");$/;"	f
queryShaderInfo	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn ShaderInfo queryShaderInfo(Shader shd) @(cname="sg_query_shader_info");$/;"	f
queryShaderState	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn ResourceState queryShaderState(Shader shd) @(cname="sg_query_shader_state");$/;"	f
queryShaderState	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn ResourceState queryShaderState(Shader shd) @(cname="sg_query_shader_state");$/;"	f
querySurfacePitch	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn c_int querySurfacePitch(PixelFormat fmt, c_int width, c_int height, c_int row_align_bytes) @(/;"	f
querySurfacePitch	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn c_int querySurfacePitch(PixelFormat fmt, c_int width, c_int height, c_int row_align_bytes) @(/;"	f
queryViewBuffer	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn Buffer queryViewBuffer(View view) @(cname="sg_query_view_buffer");$/;"	f
queryViewBuffer	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn Buffer queryViewBuffer(View view) @(cname="sg_query_view_buffer");$/;"	f
queryViewDefaults	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn ViewDesc queryViewDefaults(ViewDesc* desc) @(cname="sg_query_view_defaults");$/;"	f
queryViewDefaults	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn ViewDesc queryViewDefaults(ViewDesc* desc) @(cname="sg_query_view_defaults");$/;"	f
queryViewDesc	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn ViewDesc queryViewDesc(View view) @(cname="sg_query_view_desc");$/;"	f
queryViewDesc	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn ViewDesc queryViewDesc(View view) @(cname="sg_query_view_desc");$/;"	f
queryViewImage	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn Image queryViewImage(View view) @(cname="sg_query_view_image");$/;"	f
queryViewImage	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn Image queryViewImage(View view) @(cname="sg_query_view_image");$/;"	f
queryViewInfo	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn ViewInfo queryViewInfo(View view) @(cname="sg_query_view_info");$/;"	f
queryViewInfo	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn ViewInfo queryViewInfo(View view) @(cname="sg_query_view_info");$/;"	f
queryViewState	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn ResourceState queryViewState(View view) @(cname="sg_query_view_state");$/;"	f
queryViewState	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn ResourceState queryViewState(View view) @(cname="sg_query_view_state");$/;"	f
queryViewType	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn ViewType queryViewType(View view) @(cname="sg_query_view_type");$/;"	f
queryViewType	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn ViewType queryViewType(View view) @(cname="sg_query_view_type");$/;"	f
queue_init	$C2_ROOT/libs/io_uring/io_uring.c2i	/^fn c_int queue_init(u32 entries, Ring* ring, u32 flags) @(cname="io_uring_queue_init");$/;"	f
queue_init_params	$C2_ROOT/libs/io_uring/io_uring.c2i	/^fn c_int queue_init_params(u32 entries, Ring* ring, Params* p) @(cname="io_uring_queue_init_para/;"	f
queue_mmap	$C2_ROOT/libs/io_uring/io_uring.c2i	/^fn c_int queue_mmap(c_int fd, Params *p, Ring* ring) @(cname="io_uring_queue_mmap");$/;"	f
quick_exit	$C2_ROOT/libs/libc/stdlib.c2i	/^fn void quick_exit(c_int __status);$/;"	f
quicksort	$C2_ROOT/common/quicksort.c2	/^module quicksort;$/;"	m
quit	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn void quit() @(cname="SDL_Quit");$/;"	f
quit	$C2_ROOT/libs/sdl2_image/sdl_image.c2i	/^fn void quit() @(cname="IMG_Quit");$/;"	f
quit	$C2_ROOT/libs/sdl2_ttf/sdl_ttf.c2i	/^fn void quit() @(cname="TTF_Quit");$/;"	f
quit	$C2_ROOT/libs/sokol/sokol_app.c2i	/^fn void quit() @(cname="sapp_quit");$/;"	f
quit	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^fn void quit() @(cname="sapp_quit");$/;"	f
rad	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn c_float rad(c_float deg) @(cname="sgl_rad");$/;"	f
rad	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn c_float rad(c_float deg) @(cname="sgl_rad");$/;"	f
radix_tree	$C2_ROOT/generator/radix_tree/radix_tree.c2	/^module radix_tree;$/;"	m
radix_tree	$C2_ROOT/generator/radix_tree/radix_tree_dump.c2	/^module radix_tree;$/;"	m
radix_tree	$C2_ROOT/generator/radix_tree/radix_tree_fs.c2	/^module radix_tree;$/;"	m
rand	$C2_ROOT/libs/libc/stdlib.c2i	/^fn c_int rand();$/;"	f
rand_r	$C2_ROOT/libs/libc/stdlib.c2i	/^fn c_int rand_r(c_uint* __seed);$/;"	f
random	$C2_ROOT/libs/libc/stdlib.c2i	/^fn c_long random();$/;"	f
random_r	$C2_ROOT/libs/libc/stdlib.c2i	/^fn c_int random_r(Random_data* __buf, c_int* __result);$/;"	f
rawequeal	$C2_ROOT/libs/lua/lua.c2i	/^fn c_int rawequeal(State *L, c_int idx1, c_int idx2) @(cname="lua_rawequeal");$/;"	f
rawget	$C2_ROOT/libs/lua/lua.c2i	/^fn c_int rawget(State *L, c_int idx) @(cname="lua_rawget");$/;"	f
rawgeti	$C2_ROOT/libs/lua/lua.c2i	/^fn c_int rawgeti(State *L, c_int idx, Integer n) @(cname="lua_rawgeti");$/;"	f
rawgetp	$C2_ROOT/libs/lua/lua.c2i	/^fn c_int rawgetp(State *L, c_int idx, const void *p) @(cname="lua_rawgetp");$/;"	f
rawlen	$C2_ROOT/libs/lua/lua.c2i	/^fn c_size rawlen(State* L, c_int idx) @(cname="lua_rawlen");$/;"	f
rawset	$C2_ROOT/libs/lua/lua.c2i	/^fn void  rawset(State *L, c_int idx) @(cname="lua_rawset");$/;"	f
rawseti	$C2_ROOT/libs/lua/lua.c2i	/^fn void  rawseti(State *L, c_int idx, Integer n) @(cname="lua_rawseti");$/;"	f
rawsetp	$C2_ROOT/libs/lua/lua.c2i	/^fn void  rawsetp(State *L, c_int idx, const void *p) @(cname="lua_rawsetp");$/;"	f
read	$C2_ROOT/libs/libc/unistd.c2i	/^fn c_long read(c_int fd, void* buf, c_ulong count);$/;"	f
read2	$C2_ROOT/common/file/reader.c2	/^fn isize read2(i32 hd, void* data, usize len) {$/;"	f
readLine	$C2_ROOT/tools/tester/test_db.c2	/^fn const char* Db.readLine(Db* db) {$/;"	f
readUntil	$C2_ROOT/tools/tester/test_db.c2	/^fn bool Db.readUntil(Db* db, char* dst, u32 size, const char* cp, char delim, const char* item) /;"	f
readWord	$C2_ROOT/tools/tester/test_db.c2	/^fn const char* Db.readWord(Db* db) {$/;"	f
readdir	$C2_ROOT/libs/libc/libc_dirent.c2i	/^fn Dirent* readdir(DIR* dirp);$/;"	f
readv	$C2_ROOT/libs/libc/uio.c2i	/^fn isize readv(c_int fd, const Iovec* iovec, c_int count);$/;"	f
realloc	$C2_ROOT/libs/libc/stdlib.c2i	/^fn void* realloc(void* ptr, c_size size);$/;"	f
realpath	$C2_ROOT/libs/libc/stdlib.c2i	/^fn c_char* realpath(const c_char* __name, c_char* __resolved);$/;"	f
recv	$C2_ROOT/libs/libc/sys_socket.c2i	/^fn isize recv(c_int fd, void* buf, usize n, c_int flags);$/;"	f
recvfrom	$C2_ROOT/libs/libc/sys_socket.c2i	/^fn isize recvfrom(c_int fd, void* buf, usize n, c_int flags, Sockaddr* addr, u32* addrlen);$/;"	f
ref_list	$C2_ROOT/generator/ir/ref_list.c2	/^module ref_list;$/;"	m
refresh	$C2_ROOT/libs/curses/curses.c2i	/^fn void refresh();$/;"	f
refs_finder	$C2_ROOT/tools/common/refs_finder.c2	/^module refs_finder;$/;"	m
refs_generator	$C2_ROOT/plugins/refs_generator.c2	/^module refs_generator;$/;"	m
refs_main	$C2_ROOT/tools/c2rename.c2	/^module refs_main;$/;"	m
refs_main	$C2_ROOT/tools/c2tags.c2	/^module refs_main;$/;"	m
regcomp	$C2_ROOT/libs/libc/regex.c2i	/^fn c_int regcomp(Regex_t* preg, const c_char* pattern, c_int cflags);$/;"	f
regerror	$C2_ROOT/libs/libc/regex.c2i	/^fn c_size regerror(c_int errcode, const Regex_t* preg, c_char* errbuf, c_size errbuf_size);$/;"	f
regex	$C2_ROOT/libs/libc/regex.c2i	/^module regex;$/;"	m
regexec	$C2_ROOT/libs/libc/regex.c2i	/^fn c_int regexec(const Regex_t* preg, const c_char* string, c_size nmatch, Regmatch_t* pmatch, c/;"	f
regfree	$C2_ROOT/libs/libc/regex.c2i	/^fn void regfree(Regex_t* preg);$/;"	f
register	$C2_ROOT/ast_utils/attr.c2	/^public fn void register(string_pool.Pool* pool, u32* indexes) {$/;"	f
register	$C2_ROOT/common/attr_handler.c2	/^public fn bool Handler.register(Handler* h, u32 name, ast.AttrHandlerFn func, void* arg) {$/;"	f
registerAttr	$C2_ROOT/plugins/plugin_info.c2	/^public fn bool Info.registerAttr(Info* info,$/;"	f
registerEvents	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn c_int registerEvents(c_int numevents) @(cname="SDL_RegisterEvents");$/;"	f
register_attr	$C2_ROOT/compiler/compiler.c2	/^fn bool Compiler.register_attr(void* arg, u32 name, ast.AttrHandlerFn handler, void* arg2) {$/;"	f
register_buffers	$C2_ROOT/libs/io_uring/io_uring.c2i	/^fn c_int Ring.register_buffers(Ring* ring, const uio.Iovec* iovecs,$/;"	f
register_buffers_tags	$C2_ROOT/libs/io_uring/io_uring.c2i	/^fn c_int Ring.register_buffers_tags(Ring* ring, const uio.Iovec* iovecs,$/;"	f
register_buffers_update_tag	$C2_ROOT/libs/io_uring/io_uring.c2i	/^fn c_int Ring.register_buffers_update_tag(Ring* ring,$/;"	f
relativeFilename	$C2_ROOT/tools/tester/issues.c2	/^public fn const char* relativeFilename(const char *name) {$/;"	f
remainder	$C2_ROOT/ast/value.c2	/^fn Value Value.remainder(const Value* v1, const Value* v2) {$/;"	f
remainder	$C2_ROOT/libs/math/math.c2i	/^fn c_double remainder(c_double, c_double);$/;"	f
remainderf	$C2_ROOT/libs/math/math.c2i	/^fn c_float remainderf(c_float, c_float);$/;"	f
remove	$C2_ROOT/common/linked_list.c2	/^public fn void Element.remove(Element* item) @(unused) {$/;"	f
remove	$C2_ROOT/ir/register_alloc.c2	/^fn void LiveVector.remove(LiveVector* v, u32 idx) {$/;"	f
remove	$C2_ROOT/libs/libc/stdio.c2i	/^fn c_int remove(const c_char* __filename);$/;"	f
removeBlockWritesFromArena	$C2_ROOT/ir/slot_writes_map.c2	/^fn u16 Map.removeBlockWritesFromArena(Map* m, Arena* a, u16 blk_id) {$/;"	f
removeCommitListener	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn bool removeCommitListener(CommitListener listener) @(cname="sg_remove_commit_listener");$/;"	f
removeCommitListener	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn bool removeCommitListener(CommitListener listener) @(cname="sg_remove_commit_listener");$/;"	f
removeLastBlock	$C2_ROOT/ir/block_list.c2	/^public fn void BlockList.removeLastBlock(BlockList* l) {$/;"	f
removeLastInstruction	$C2_ROOT/ir/instr_list.c2	/^public fn void InstrList.removeLastInstruction(InstrList* l) {$/;"	f
removeNone	$C2_ROOT/ir/ssa.c2	/^fn void Tools.removeNone(Tools* t) {$/;"	f
removeSplitEdges	$C2_ROOT/ir/register_alloc.c2	/^fn void Tools.removeSplitEdges(Tools* t) {$/;"	f
removeTimer	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn bool removeTimer(TimerID id) @(cname="SDL_RemoveTimer");$/;"	f
removeUnused	$C2_ROOT/ir/ssa.c2	/^fn void Tools.removeUnused(Tools* t) {$/;"	f
removeVariableFromArena	$C2_ROOT/ir/interference_graph.c2	/^fn u16 InterferenceGraph.removeVariableFromArena(InterferenceGraph* g, Arena* a, u16 var_idx) {$/;"	f
removeVariableFromArena	$C2_ROOT/ir/live_map.c2	/^fn u16 Map.removeVariableFromArena(Map* g, Arena* a, u16 var_idx) {$/;"	f
remquo	$C2_ROOT/libs/math/math.c2i	/^fn c_double remquo(c_double, c_double, c_int *);$/;"	f
remquof	$C2_ROOT/libs/math/math.c2i	/^fn c_float remquof(c_float, c_float, c_int *);$/;"	f
rename	$C2_ROOT/libs/libc/stdio.c2i	/^fn c_int rename(const c_char* __old, const c_char* __new);$/;"	f
renameat	$C2_ROOT/libs/libc/stdio.c2i	/^fn c_int renameat(c_int __oldfd, const c_char* __old, c_int __newfd, const c_char* __new);$/;"	f
renderBlended	$C2_ROOT/libs/sdl2_ttf/sdl_ttf.c2i	/^fn sdl.Surface* Font.renderBlended(Font* font, const char* text, sdl.Color fg)$/;"	f
renderBlendedWrapped	$C2_ROOT/libs/sdl2_ttf/sdl_ttf.c2i	/^fn sdl.Surface* Font.renderBlendedWrapped(Font* font, const char* text, sdl.Color fg, u32 wrapLe/;"	f
renderLCD	$C2_ROOT/libs/sdl2_ttf/sdl_ttf.c2i	/^fn sdl.Surface* Font.renderLCD(Font* font, const char* text, sdl.Color fg, sdl.Color bg)$/;"	f
renderLCDWrapped	$C2_ROOT/libs/sdl2_ttf/sdl_ttf.c2i	/^fn sdl.Surface* Font.renderLCDWrapped(Font* font, const char* text, sdl.Color fg, sdl.Color bg, /;"	f
renderShaded	$C2_ROOT/libs/sdl2_ttf/sdl_ttf.c2i	/^fn sdl.Surface* Font.renderShaded(Font* font, const char* text, sdl.Color fg, sdl.Color bg)$/;"	f
renderShadedWrapped	$C2_ROOT/libs/sdl2_ttf/sdl_ttf.c2i	/^fn sdl.Surface* Font.renderShadedWrapped(Font* font, const char* text, sdl.Color fg, sdl.Color b/;"	f
renderSolid	$C2_ROOT/libs/sdl2_ttf/sdl_ttf.c2i	/^fn sdl.Surface* Font.renderSolid(Font* font, const char* text, sdl.Color fg) @(cname="TTF_Render/;"	f
renderSolid_Wrapped	$C2_ROOT/libs/sdl2_ttf/sdl_ttf.c2i	/^fn sdl.Surface* Font.renderSolid_Wrapped(Font* font, const char* text, sdl.Color fg, u32 wrapLen/;"	f
reorder_blocks	$C2_ROOT/ir/context.c2	/^fn void Tools.reorder_blocks(Tools* t, FunctionInfo* fi, const index_list.List* block_order) {$/;"	f
replace	$C2_ROOT/tools/common/replacer.c2	/^public fn i32 Replacer.replace(Replacer* r, u16 old_len) {$/;"	f
replacePhis	$C2_ROOT/ir/register_alloc.c2	/^fn void Tools.replacePhis(Tools* t) {$/;"	f
replacer	$C2_ROOT/tools/common/replacer.c2	/^module replacer;$/;"	m
report	$C2_ROOT/ast_utils/context.c2	/^public fn void Context.report(const Context* c) {$/;"	f
report	$C2_ROOT/ast_utils/string_pool.c2	/^public fn void Pool.report(const Pool* p, const char* name) @(unused) {$/;"	f
report	$C2_ROOT/common/source_mgr.c2	/^public fn void SourceMgr.report(SourceMgr* sm, bool full) {$/;"	f
report	$C2_ROOT/ir/print.c2	/^public fn void Context.report(const Context* c) @(unused) {$/;"	f
requestQuit	$C2_ROOT/libs/sokol/sokol_app.c2i	/^fn void requestQuit() @(cname="sapp_request_quit");$/;"	f
requestQuit	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^fn void requestQuit() @(cname="sapp_request_quit");$/;"	f
reserve	$C2_ROOT/ast_utils/context.c2	/^public fn void Context.reserve(Context* c, u32 len) {$/;"	f
reserve	$C2_ROOT/ir/case_list.c2	/^public fn CaseId CaseList.reserve(CaseList* l, u32 count) {$/;"	f
reserve	$C2_ROOT/ir/instr_list.c2	/^public fn void InstrList.reserve(InstrList* l, u32 extra) {$/;"	f
reserve	$C2_ROOT/parser/ast_builder.c2	/^public fn void Builder.reserve(Builder* b, u32 size) {$/;"	f
reset	$C2_ROOT/analyser/label_vector.c2	/^public fn void LabelVector.reset(LabelVector* v) {$/;"	f
reset	$C2_ROOT/analyser/scope.c2	/^public fn void Scope.reset(Scope* s) {$/;"	f
reset	$C2_ROOT/ast/statistics.c2	/^fn void Stats.reset(Stats* s) {$/;"	f
reset	$C2_ROOT/common/bit_array.c2	/^public fn void BitArray.reset(BitArray* a, u32 cap) {$/;"	f
resetKeyboard	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn void resetKeyboard() @(cname="SDL_ResetKeyboard");$/;"	f
resetStateCache	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn void resetStateCache() @(cname="sg_reset_state_cache");$/;"	f
resetStateCache	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn void resetStateCache() @(cname="sg_reset_state_cache");$/;"	f
resetTemps	$C2_ROOT/ir/print.c2	/^fn void PrintHelper.resetTemps(PrintHelper* ph, u32 num_args, u32 num_instr) {$/;"	f
resetToLastNewline	$C2_ROOT/ast_utils/string_buffer.c2	/^public fn void Buf.resetToLastNewline(Buf* buf) @(unused) {$/;"	f
resize	$C2_ROOT/analyser/incr_array_list.c2	/^fn void List.resize(List* v) {$/;"	f
resize	$C2_ROOT/analyser/label_vector.c2	/^fn void LabelVector.resize(LabelVector* v) {$/;"	f
resize	$C2_ROOT/analyser/name_vector.c2	/^fn void NameVector.resize(NameVector* v) {$/;"	f
resize	$C2_ROOT/analyser/struct_func_list.c2	/^fn void List.resize(List* v) {$/;"	f
resize	$C2_ROOT/ast/instance_table.c2	/^fn void TemplateFunction.resize(TemplateFunction* f, u16 capacity) {$/;"	f
resize	$C2_ROOT/ast/pointer_pool.c2	/^fn void PointerPool.resize(PointerPool* p, u32 cap) {$/;"	f
resize	$C2_ROOT/ast/string_type_pool.c2	/^fn void StringTypePool.resize(StringTypePool* p, u32 cap) {$/;"	f
resize	$C2_ROOT/ast/symbol_table.c2	/^fn void SymbolTable.resize(SymbolTable* t, u32 capacity) {$/;"	f
resize	$C2_ROOT/ast_utils/attr_table.c2	/^fn void Table.resize(Table* t, u32 capacity) {$/;"	f
resize	$C2_ROOT/common/component.c2	/^fn void List.resize(List* l, u32 capacity) {$/;"	f
resize	$C2_ROOT/common/index_list.c2	/^fn void List.resize(List* l, u32 cap) {$/;"	f
resize	$C2_ROOT/common/library_list.c2	/^fn void List.resize(List* l, u32 cap) {$/;"	f
resize	$C2_ROOT/common/module_list.c2	/^fn void List.resize(List* l, u32 cap) {$/;"	f
resize	$C2_ROOT/common/source_mgr.c2	/^fn void SourceMgr.resize(SourceMgr* sm) {$/;"	f
resize	$C2_ROOT/common/string_list.c2	/^fn void List.resize(List* l, u32 capacity) {$/;"	f
resize	$C2_ROOT/common/value_maplist.c2	/^fn void List.resize(List* l, u32 cap) {$/;"	f
resize	$C2_ROOT/generator/c2refs.c2	/^fn Links* Links.resize(Links* t, u32 capacity) {$/;"	f
resize	$C2_ROOT/generator/ir/field_struct_layouter.c2	/^fn void FieldStructLayouter.resize(FieldStructLayouter* l, u32 max) {$/;"	f
resize	$C2_ROOT/generator/ir/ir_generator_locals.c2	/^fn void Locals.resize(Locals* l, u32 capacity) {$/;"	f
resize	$C2_ROOT/generator/ir/ref_list.c2	/^fn void RefList.resize(RefList* l, u32 cap) {$/;"	f
resize	$C2_ROOT/ir/block_list.c2	/^fn void BlockList.resize(BlockList* l, u32 cap) {$/;"	f
resize	$C2_ROOT/ir/case_list.c2	/^fn void CaseList.resize(CaseList* l, u32 extra, bool copy) {$/;"	f
resize	$C2_ROOT/ir/copy_list.c2	/^fn void CopyList.resize(CopyList* l, u32 capacity) {$/;"	f
resize	$C2_ROOT/ir/init_value_list.c2	/^fn void InitValueList.resize(InitValueList* l, u32 cap) {$/;"	f
resize	$C2_ROOT/ir/inserter.c2	/^fn void Inserter.resize(Inserter* ins, u32 capacity) {$/;"	f
resize	$C2_ROOT/ir/instr_list.c2	/^fn void InstrList.resize(InstrList* l, u32 cap) {$/;"	f
resize	$C2_ROOT/ir/lookup_table.c2	/^fn void Table.resize(Table* t, u32 capacity2, bool copy) {$/;"	f
resize	$C2_ROOT/ir/phi_list.c2	/^fn void PhiList.resize(PhiList* l, u32 extra) {$/;"	f
resize	$C2_ROOT/ir/symbol_list.c2	/^fn void SymbolList.resize(SymbolList* l, u32 cap) {$/;"	f
resize	$C2_ROOT/ir/usage_counter.c2	/^fn void Counter.resize(Counter* c, u32 cap) {$/;"	f
resize	$C2_ROOT/ir/work_queue.c2	/^fn void WorkQueue.resize(WorkQueue* q, u32 capacity) {$/;"	f
resize	$C2_ROOT/ir_examples/for.c2	/^fn void resize() {$/;"	f
resize	$C2_ROOT/plugins/refs_generator.c2	/^fn void LineCounter.resize(LineCounter* l, u32 cap) {$/;"	f
resize	$C2_ROOT/tools/c2tags.c2	/^fn void Results.resize(Results* r, u32 capacity) {$/;"	f
resize	$C2_ROOT/tools/common/refs_finder.c2	/^fn void Finder.resize(Finder* f, u32 capacity) {$/;"	f
resize	$C2_ROOT/tools/common/replacer.c2	/^fn void Replacer.resize(Replacer* r, u32 capacity) {$/;"	f
resize	$C2_ROOT/tools/tester/line_db.c2	/^public fn void Db.resize(Db* db, u32 capacity) {$/;"	f
resizeFiles	$C2_ROOT/ast/module.c2	/^fn void Module.resizeFiles(Module* m, u32 cap) {$/;"	f
resizeIssues	$C2_ROOT/tools/tester/issues.c2	/^fn void Issues.resizeIssues(Issues* i, u32 capacity) {$/;"	f
resizeNames	$C2_ROOT/generator/c2refs.c2	/^fn Files* Files.resizeNames(Files* f, u32 max_data) {$/;"	f
resizePool	$C2_ROOT/tools/tester/issues.c2	/^fn void Issues.resizePool(Issues* i, u32 capacity) {$/;"	f
resize_data	$C2_ROOT/ast_utils/string_pool.c2	/^fn void Pool.resize_data(Pool* p, u32 capacity) {$/;"	f
resize_entries	$C2_ROOT/ast_utils/string_pool.c2	/^fn void Pool.resize_entries(Pool* p, u32 capacity) {$/;"	f
resize_nodes	$C2_ROOT/common/yaml/yaml_data.c2	/^fn void Data.resize_nodes(Data* d) {$/;"	f
resize_text	$C2_ROOT/common/yaml/yaml_data.c2	/^fn void Data.resize_text(Data* d) {$/;"	f
resume	$C2_ROOT/libs/lua/lua.c2i	/^fn c_int resume(State *L, State *from, c_int narg) @(cname="lua_resume");$/;"	f
rewind	$C2_ROOT/libs/libc/stdio.c2i	/^fn void rewind(FILE* __stream);$/;"	f
right_shift	$C2_ROOT/ast/value.c2	/^fn Value Value.right_shift(const Value* v1, const Value* v2) {$/;"	f
rindex	$C2_ROOT/libs/libc/strings.c2i	/^fn c_char* rindex(const c_char* s, c_int c);$/;"	f
rint	$C2_ROOT/libs/math/math.c2i	/^fn c_double rint(c_double);$/;"	f
rintf	$C2_ROOT/libs/math/math.c2i	/^fn c_float rintf(c_float);$/;"	f
rmdir	$C2_ROOT/libs/libc/unistd.c2i	/^fn c_int rmdir(const char* path);$/;"	f
rotate	$C2_ROOT/libs/lua/lua.c2i	/^fn void rotate(State* L, c_int idx, c_int n) @(cname="lua_rotate");$/;"	f
rotate	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn void rotate(c_float angle_rad, c_float x, c_float y, c_float z) @(cname="sgl_rotate");$/;"	f
rotate	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn void rotate(c_float angle_rad, c_float x, c_float y, c_float z) @(cname="sgl_rotate");$/;"	f
round	$C2_ROOT/libs/math/math.c2i	/^fn c_double round(c_double);$/;"	f
round4	$C2_ROOT/generator/c2refs.c2	/^fn u32 round4(u32 x) {$/;"	f
roundToCommonRefreshRate	$C2_ROOT/libs/sokol/sokol_time.c2i	/^fn u64 roundToCommonRefreshRate(u64 frame_ticks) @(cname="stm_round_to_common_refresh_rate");$/;"	f
roundToCommonRefreshRate	$C2_ROOT/libs/sokol_/sokol_time.c2i	/^fn u64 roundToCommonRefreshRate(u64 frame_ticks) @(cname="stm_round_to_common_refresh_rate");$/;"	f
roundf	$C2_ROOT/libs/math/math.c2i	/^fn c_float roundf(c_float);$/;"	f
rparen	$C2_ROOT/ast_utils/string_buffer.c2	/^public fn void Buf.rparen(Buf* buf) { buf.add1(')'); }$/;"	f
rpmatch	$C2_ROOT/libs/libc/stdlib.c2i	/^fn c_int rpmatch(const c_char* __response);$/;"	f
run	$C2_ROOT/ir/work_queue.c2	/^fn void WorkQueue.run(WorkQueue* q, Context* c, u32 num_threads) {$/;"	f
run	$C2_ROOT/ir_examples/goto.c2	/^fn void run(i32 a) {$/;"	f
run	$C2_ROOT/ir_examples/struct_func.c2	/^fn void B.run(B* b, i32 v) {$/;"	f
run	$C2_ROOT/libs/sokol/sokol_app.c2i	/^fn void run(Desc* desc) @(cname="sapp_run");$/;"	f
run	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^fn void run(Desc* desc) @(cname="sapp_run");$/;"	f
run	$C2_ROOT/tools/tester/tester.c2	/^fn void Tester.run(Tester* t) {$/;"	f
run2	$C2_ROOT/common/process_utils.c2	/^public fn i32 run2(const char* path, const char* cmd, const char* args, char* output, usize outp/;"	f
run_args	$C2_ROOT/common/process_utils.c2	/^public fn i32 run_args(const char* path, const char* cmd, const char* args, const char* logfile)$/;"	f
run_group	$C2_ROOT/output/unit_test/libunit_test.dylib	/^fn void run_group(const Group* g, Stats* stats) {$/;"	f
run_group	$C2_ROOT/plugins/unit_test2.c2	/^fn void run_group(const Group* g, Stats* stats) {$/;"	f
run_test	$C2_ROOT/tools/tester/tester.c2	/^fn void Tester.run_test(Tester* t, Test* test) {$/;"	f
run_tests	$C2_ROOT/output/unit_test/libunit_test.dylib	/^public fn i32 run_tests() {$/;"	f
run_tests	$C2_ROOT/plugins/unit_test2.c2	/^public fn i32 run_tests() {$/;"	f
rwFromFile	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn RWops* rwFromFile(const char* file, const char* mode) @(cname="SDL_RWFromFile");$/;"	f
rwFromFile	$C2_ROOT/libs/sdl2_mixer/sdl_mixer.c2i	/^fn sdl.RWops* rwFromFile(const char* file, const char* mode) @(cname="SDL_RWFromFile");$/;"	f
same_string	$C2_ROOT/ast_utils/string_pool.c2	/^fn bool same_string(const char* left, const char* right, usize rlen) {$/;"	f
same_string	$C2_ROOT/tools/tester/test_utils.c2	/^public fn bool same_string(const char* a, const char* b) {$/;"	f
sampleCount	$C2_ROOT/libs/sokol/sokol_app.c2i	/^fn c_int sampleCount() @(cname="sapp_sample_count");$/;"	f
sampleCount	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^fn c_int sampleCount() @(cname="sapp_sample_count");$/;"	f
sampleRate	$C2_ROOT/libs/sokol/sokol_audio.c2i	/^fn c_int sampleRate() @(cname="saudio_sample_rate");$/;"	f
sampleRate	$C2_ROOT/libs/sokol_/sokol_audio.c2i	/^fn c_int sampleRate() @(cname="saudio_sample_rate");$/;"	f
scalbln	$C2_ROOT/libs/math/math.c2i	/^fn c_double scalbln(c_double, c_long);$/;"	f
scalblnf	$C2_ROOT/libs/math/math.c2i	/^fn c_float scalblnf(c_float, c_long);$/;"	f
scalbn	$C2_ROOT/libs/math/math.c2i	/^fn c_double scalbn(c_double, c_int);$/;"	f
scalbnf	$C2_ROOT/libs/math/math.c2i	/^fn c_float scalbnf(c_float, c_int);$/;"	f
scale	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn void scale(c_float x, c_float y, c_float z) @(cname="sgl_scale");$/;"	f
scale	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn void scale(c_float x, c_float y, c_float z) @(cname="sgl_scale");$/;"	f
scandir	$C2_ROOT/libs/libc/libc_dirent.c2i	/^fn c_int scandir(const c_char* dirp, Dirent*** namelist,$/;"	f
scanf	$C2_ROOT/libs/libc/stdio.c2i	/^fn c_int scanf(const c_char* __format, ...);$/;"	f
scissorRect	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn void scissorRect(c_int x, c_int y, c_int w, c_int h, bool origin_top_left) @(cname="sgl_sciss/;"	f
scissorRect	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn void scissorRect(c_int x, c_int y, c_int w, c_int h, bool origin_top_left) @(cname="sgl_sciss/;"	f
scissorRectf	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn void scissorRectf(c_float x, c_float y, c_float w, c_float h, bool origin_top_left) @(cname="/;"	f
scissorRectf	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn void scissorRectf(c_float x, c_float y, c_float w, c_float h, bool origin_top_left) @(cname="/;"	f
scope	$C2_ROOT/analyser/scope.c2	/^module scope;$/;"	m
sdl	$C2_ROOT/libs/sdl2/sdl.c2i	/^module sdl;$/;"	m
sdl_image	$C2_ROOT/libs/sdl2_image/sdl_image.c2i	/^module sdl_image;$/;"	m
sdl_mixer	$C2_ROOT/libs/sdl2_mixer/sdl_mixer.c2i	/^module sdl_mixer;$/;"	m
sdl_ttf	$C2_ROOT/libs/sdl2_ttf/sdl_ttf.c2i	/^module sdl_ttf;$/;"	m
search	$C2_ROOT/tools/common/refs_finder.c2	/^public fn u32 Finder.search(Finder* f, const char* target) {$/;"	f
sec	$C2_ROOT/libs/sokol/sokol_time.c2i	/^fn c_double sec(u64 ticks) @(cname="stm_sec");$/;"	f
sec	$C2_ROOT/libs/sokol_/sokol_time.c2i	/^fn c_double sec(u64 ticks) @(cname="stm_sec");$/;"	f
section_free	$C2_ROOT/generator/c2refs.c2	/^fn void section_free(void* t) {$/;"	f
section_load	$C2_ROOT/generator/c2refs.c2	/^fn void* section_load(MapFile* f, u32 minSize) {$/;"	f
section_load	$C2_ROOT/generator/radix_tree/radix_tree_fs.c2	/^fn void* section_load(InputStream* input, u32 minSize) {$/;"	f
section_size	$C2_ROOT/generator/c2refs.c2	/^fn u32 section_size(const void* section) {$/;"	f
section_size	$C2_ROOT/generator/radix_tree/radix_tree_fs.c2	/^fn u32 section_size(const void* section) {$/;"	f
section_write	$C2_ROOT/generator/c2refs.c2	/^fn  bool section_write(i32 fd, void* section) {$/;"	f
section_write	$C2_ROOT/generator/radix_tree/radix_tree_fs.c2	/^fn  bool section_write(i32 fd, void* section) {$/;"	f
seed48	$C2_ROOT/libs/libc/stdlib.c2i	/^fn u16* seed48(u16* __seed16v);$/;"	f
seed48_r	$C2_ROOT/libs/libc/stdlib.c2i	/^fn c_int seed48_r(u16* __seed16v, Drand48_data* __buffer);$/;"	f
self	$C2_ROOT/libs/pthread/pthread.c2i	/^fn Pthread self() @(cname="pthread_self");$/;"	f
send	$C2_ROOT/libs/libc/sys_socket.c2i	/^fn isize send(c_int fd, const void* buf, usize n, c_int flags);$/;"	f
sendfile	$C2_ROOT/libs/libc/sys_sendfile.c2i	/^fn c_ssize sendfile(i32 __out_fd, i32 __in_fd, Offset* __offset, c_size __count);$/;"	f
sendto	$C2_ROOT/libs/libc/sys_socket.c2i	/^fn isize sendto(c_int fd, const void* buf, usize n, c_int flags, const Sockaddr* addr, u32 addr_/;"	f
set	$C2_ROOT/ast/qualtype.c2	/^fn void QualType.set(QualType* qt, Type* t) {$/;"	f
set	$C2_ROOT/common/bit_array.c2	/^public fn void BitArray.set(BitArray* a, u32 idx) {$/;"	f
set	$C2_ROOT/ir/case_list.c2	/^public fn void CaseList.set(CaseList* l, CaseId id, u32 value, BlockId block) {$/;"	f
set	$C2_ROOT/ir/lookup_table.c2	/^public fn void Table.set(Table* t, u32 idx, u32 value) {$/;"	f
set	$C2_ROOT/ir/slot_values.c2	/^public fn void SlotValues.set(SlotValues* v, u16 slot, Ref ref) {$/;"	f
set	$C2_ROOT/ir_examples/struct_func.c2	/^fn void A.set(A* a, i32 v) {$/;"	f
setAddrUsed	$C2_ROOT/ast/var_decl.c2	/^public fn void VarDecl.setAddrUsed(VarDecl* d) {$/;"	f
setAddress	$C2_ROOT/ast/function_decl.c2	/^fn void FunctionDecl.setAddress(FunctionDecl* d, void* address) {$/;"	f
setAlphaMod	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn c_int Texture.setAlphaMod(Texture* texture, u8 alpha) @(cname="SDL_SetTextureAlphaMod");$/;"	f
setAttrAlignment	$C2_ROOT/ast/struct_type_decl.c2	/^public fn void StructTypeDecl.setAttrAlignment(StructTypeDecl* d, u32 alignment) {$/;"	f
setAttrAutoFile	$C2_ROOT/ast/var_decl.c2	/^public fn void VarDecl.setAttrAutoFile(VarDecl* d) {$/;"	f
setAttrAutoFunc	$C2_ROOT/ast/var_decl.c2	/^public fn void VarDecl.setAttrAutoFunc(VarDecl* d) {$/;"	f
setAttrAutoLine	$C2_ROOT/ast/var_decl.c2	/^public fn void VarDecl.setAttrAutoLine(VarDecl* d) {$/;"	f
setAttrConstructor	$C2_ROOT/ast/function_decl.c2	/^public fn void FunctionDecl.setAttrConstructor(FunctionDecl* d) {$/;"	f
setAttrDestructor	$C2_ROOT/ast/function_decl.c2	/^public fn void FunctionDecl.setAttrDestructor(FunctionDecl* d) {$/;"	f
setAttrExport	$C2_ROOT/ast/decl.c2	/^public fn void Decl.setAttrExport(Decl* d) { d.declBits.attr_export = 1; }$/;"	f
setAttrInline	$C2_ROOT/ast/function_decl.c2	/^public fn void FunctionDecl.setAttrInline(FunctionDecl* d) {$/;"	f
setAttrNoReturn	$C2_ROOT/ast/function_decl.c2	/^public fn void FunctionDecl.setAttrNoReturn(FunctionDecl* d) {$/;"	f
setAttrNoTypeDef	$C2_ROOT/ast/struct_type_decl.c2	/^public fn void StructTypeDecl.setAttrNoTypeDef(StructTypeDecl* d) {$/;"	f
setAttrPrintf	$C2_ROOT/ast/function_decl.c2	/^public fn void FunctionDecl.setAttrPrintf(FunctionDecl* d, u8 arg) {$/;"	f
setAttrPure	$C2_ROOT/ast/function_decl.c2	/^public fn void FunctionDecl.setAttrPure(FunctionDecl* d) {$/;"	f
setAttrUnused	$C2_ROOT/ast/decl.c2	/^public fn void Decl.setAttrUnused(Decl* d) { d.declBits.attr_unused = 1; }$/;"	f
setAttrUnusedParams	$C2_ROOT/ast/function_decl.c2	/^public fn void FunctionDecl.setAttrUnusedParams(FunctionDecl* d) {$/;"	f
setAttrWeak	$C2_ROOT/ast/function_decl.c2	/^public fn void FunctionDecl.setAttrWeak(FunctionDecl* d) {$/;"	f
setAttrWeak	$C2_ROOT/ast/var_decl.c2	/^public fn void VarDecl.setAttrWeak(VarDecl* d) {$/;"	f
setBackEnd	$C2_ROOT/common/build_target.c2	/^public fn void Target.setBackEnd(Target* t, BackEndKind kind) {$/;"	f
setBitfield	$C2_ROOT/ast/member_expr.c2	/^public fn void MemberExpr.setBitfield(MemberExpr* e) {$/;"	f
setBitfieldWidth	$C2_ROOT/ast/var_decl.c2	/^public fn void VarDecl.setBitfieldWidth(VarDecl* d, u8 width) {$/;"	f
setBlendMode	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn c_int Texture.setBlendMode(Texture* texture, BlendMode mode) @(cname="SDL_SetTextureBlendMode/;"	f
setBody	$C2_ROOT/ast/function_decl.c2	/^public fn void FunctionDecl.setBody(FunctionDecl* d, CompoundStmt* body) {$/;"	f
setBuiltin	$C2_ROOT/ast/type_ref.c2	/^public fn void TypeRefHolder.setBuiltin(TypeRefHolder* h, BuiltinKind kind, SrcLoc loc) {$/;"	f
setCallKind	$C2_ROOT/ast/function_decl.c2	/^public fn void FunctionDecl.setCallKind(FunctionDecl* d, CallKind kind) {$/;"	f
setCallsStaticTypeFunc	$C2_ROOT/ast/call_expr.c2	/^public fn void CallExpr.setCallsStaticTypeFunc(CallExpr* e) {$/;"	f
setCallsTypeFunc	$C2_ROOT/ast/call_expr.c2	/^public fn void CallExpr.setCallsTypeFunc(CallExpr* e) {$/;"	f
setCanonicalType	$C2_ROOT/ast/qualtype.c2	/^public fn void QualType.setCanonicalType(QualType* qt, QualType canon) {$/;"	f
setCanonicalType	$C2_ROOT/ast/type.c2	/^public fn void Type.setCanonicalType(Type* t, QualType canon) { t.canonicalType = canon; }$/;"	f
setCase	$C2_ROOT/ir/context.c2	/^public fn void Context.setCase(Context* c, CaseId case_id, u32 value, BlockId blk_id) {$/;"	f
setCheckInProgress	$C2_ROOT/ast/decl.c2	/^public fn void Decl.setCheckInProgress(Decl* d) { d.declBits.check_state = DeclCheckState.InProg/;"	f
setChecked	$C2_ROOT/ast/decl.c2	/^public fn void Decl.setChecked(Decl* d) { d.declBits.check_state = DeclCheckState.Checked; }$/;"	f
setClipRect	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn c_int Renderer.setClipRect(Renderer* renderer, const Rect* rect) @(cname="SDL_RenderSetClipRe/;"	f
setClipboardString	$C2_ROOT/libs/sokol/sokol_app.c2i	/^fn void setClipboardString(const char* str) @(cname="sapp_set_clipboard_string");$/;"	f
setClipboardString	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^fn void setClipboardString(const char* str) @(cname="sapp_set_clipboard_string");$/;"	f
setClipboardText	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn c_int setClipboardText(const char* text) @(cname="SDL_SetClipboardText");$/;"	f
setColorKey	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn c_int Surface.setColorKey(Surface* surface, c_int flag, u32 key) @(cname="SDL_SetColorKey");$/;"	f
setColorKey	$C2_ROOT/libs/sdl2_image/sdl_image.c2i	/^fn c_int setColorKey(sdl.Surface* surface, c_int flag, u32 key) @(cname="SDL_SetColorKey");$/;"	f
setColorMod	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn c_int Texture.setColorMod(Texture* texture, u8 r, u8 g,u8 b) @(cname="SDL_SetTextureColorMod"/;"	f
setColors	$C2_ROOT/ast_utils/string_buffer.c2	/^public fn void Buf.setColors(Buf* buf, bool colors) @(unused) {$/;"	f
setColors	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn void Palette.setColors(Palette* palette, const Color* colors,$/;"	f
setComponent	$C2_ROOT/parser/ast_builder.c2	/^public fn void Builder.setComponent(Builder* b, component.Component* comp) {$/;"	f
setConst	$C2_ROOT/ast/qualtype.c2	/^public fn void QualType.setConst(QualType* qt) {$/;"	f
setConst	$C2_ROOT/ast/type_ref.c2	/^public fn void TypeRefHolder.setConst(TypeRefHolder* h) @(unused) {$/;"	f
setConstBase	$C2_ROOT/ast/member_expr.c2	/^public fn void MemberExpr.setConstBase(MemberExpr* e, bool b) {$/;"	f
setContext	$C2_ROOT/libs/sokol/sokol_debugtext.c2i	/^fn void setContext(Context ctx) @(cname="sdtx_set_context");$/;"	f
setContext	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn void setContext(Context ctx) @(cname="sgl_set_context");$/;"	f
setContext	$C2_ROOT/libs/sokol_/sokol_debugtext.c2i	/^fn void setContext(Context ctx) @(cname="sdtx_set_context");$/;"	f
setContext	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn void setContext(Context ctx) @(cname="sgl_set_context");$/;"	f
setConversion	$C2_ROOT/ast/member_expr.c2	/^public fn void MemberExpr.setConversion(MemberExpr* e, MemberConversion c) {$/;"	f
setCtc	$C2_ROOT/ast/expr.c2	/^public fn void Expr.setCtc(Expr* e) { e.base.exprBits.is_ctc = true; }$/;"	f
setCtv	$C2_ROOT/ast/expr.c2	/^public fn void Expr.setCtv(Expr* e) { e.base.exprBits.is_ctv = true; }$/;"	f
setDebug	$C2_ROOT/common/console.c2	/^public fn void setDebug(bool enable) {$/;"	f
setDecl	$C2_ROOT/ast/identifier_expr.c2	/^public fn void IdentifierExpr.setDecl(IdentifierExpr* e, Decl* decl) {$/;"	f
setDecl	$C2_ROOT/ast/member_expr.c2	/^public fn void MemberExpr.setDecl(MemberExpr* e, Decl* d, u32 ref_idx) {$/;"	f
setDest	$C2_ROOT/ast/import_decl.c2	/^public fn void ImportDecl.setDest(ImportDecl* d, Module* mod) { d.dest = mod; }$/;"	f
setDest	$C2_ROOT/ast/type_ref.c2	/^public fn void TypeRef.setDest(TypeRef* r, u32 dest) {$/;"	f
setDest	$C2_ROOT/ir/block.c2	/^public fn void Block.setDest(Block* b, BlockId dest1, BlockId dest2) {$/;"	f
setDestType	$C2_ROOT/ast/explicit_cast_expr.c2	/^public fn void ExplicitCastExpr.setDestType(ExplicitCastExpr* e, QualType qt) { e.dest_type = qt/;"	f
setDrawColor	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn c_int Renderer.setDrawColor(Renderer* renderer, u8 r, u8 g, u8 b, u8 a) @(cname="SDL_SetRende/;"	f
setEnumFunctions	$C2_ROOT/ast/enum_type_decl.c2	/^public fn void EnumTypeDecl.setEnumFunctions(EnumTypeDecl* d, ast_context.Context* c, FunctionDe/;"	f
setExpected	$C2_ROOT/tools/tester/expect_file.c2	/^fn void ExpectFile.setExpected(ExpectFile* f) {$/;"	f
setExported	$C2_ROOT/ast/ast.c2	/^fn void AST.setExported(AST* a) {$/;"	f
setExported	$C2_ROOT/ast/module.c2	/^public fn void Module.setExported(Module* m) {$/;"	f
setExportedIfPublic	$C2_ROOT/ast/decl.c2	/^fn void Decl.setExportedIfPublic(Decl* d) {$/;"	f
setExprFlags	$C2_ROOT/analyser/module_analyser_expr.c2	/^fn IdentifierKind Analyser.setExprFlags(Analyser* ma, Expr** e_ptr, Decl* d) {$/;"	f
setExternal	$C2_ROOT/ast/decl.c2	/^public fn void Decl.setExternal(Decl* d) { d.declBits.is_external = 1; }$/;"	f
setFastBuild	$C2_ROOT/common/build_target.c2	/^public fn void Target.setFastBuild(Target* t) {$/;"	f
setFloat	$C2_ROOT/ast/value.c2	/^fn void Value.setFloat(Value* v, f64 fvalue) {$/;"	f
setForeign	$C2_ROOT/ast/module.c2	/^public fn void Module.setForeign(Module* m, bool is_foreign) { m.is_foreign = is_foreign; }$/;"	f
setForeign	$C2_ROOT/common/component.c2	/^public fn void Component.setForeign(Component* c, bool is_foreign) {$/;"	f
setFunctionReturnType	$C2_ROOT/ir/context.c2	/^public fn void Context.setFunctionReturnType(Context* c, Type t) {$/;"	f
setGenIdx	$C2_ROOT/ast/decl.c2	/^public fn void Decl.setGenIdx(Decl* d, u32 idx) {$/;"	f
setGenerated	$C2_ROOT/ast/decl.c2	/^public fn void Decl.setGenerated(Decl* d) { d.declBits.is_generated = 1; }$/;"	f
setGlobals	$C2_ROOT/ast/utils.c2	/^public fn void setGlobals(Globals* g) @(unused){$/;"	f
setHasAttr	$C2_ROOT/ast/decl.c2	/^public fn void Decl.setHasAttr(Decl* d) { d.declBits.has_attr = 1; }$/;"	f
setHasAutoArgs	$C2_ROOT/ast/call_expr.c2	/^public fn void CallExpr.setHasAutoArgs(CallExpr* e) {$/;"	f
setHasDecls	$C2_ROOT/ast/switch_case.c2	/^public fn void SwitchCase.setHasDecls(SwitchCase* s) { s.bits.has_decls = 1; }$/;"	f
setHasDesignators	$C2_ROOT/ast/init_list_expr.c2	/^public fn void InitListExpr.setHasDesignators(InitListExpr* e) {$/;"	f
setHasFallthrough	$C2_ROOT/ast/switch_case.c2	/^public fn void SwitchCase.setHasFallthrough(SwitchCase* s) { s.bits.has_fallthrough = 1; }$/;"	f
setHinting	$C2_ROOT/libs/sdl2_ttf/sdl_ttf.c2i	/^fn void Font.setHinting(Font* font, c_int hinting) @(cname="TTF_SetFontHinting");$/;"	f
setIcon	$C2_ROOT/libs/sokol/sokol_app.c2i	/^fn void setIcon(IconDesc* icon_desc) @(cname="sapp_set_icon");$/;"	f
setIcon	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^fn void setIcon(IconDesc* icon_desc) @(cname="sapp_set_icon");$/;"	f
setIncrArray	$C2_ROOT/ast/type_ref.c2	/^public fn void TypeRefHolder.setIncrArray(TypeRefHolder* h) {$/;"	f
setIncrConstants	$C2_ROOT/ast/enum_type_decl.c2	/^public fn void EnumTypeDecl.setIncrConstants(EnumTypeDecl* d, ast_context.Context* c, Identifier/;"	f
setIncrMembers	$C2_ROOT/ast/enum_type_decl.c2	/^public fn void EnumTypeDecl.setIncrMembers(EnumTypeDecl* d, Decl** constants, u32 num_constants)/;"	f
setIndent	$C2_ROOT/ast_utils/string_buffer.c2	/^public fn void Buf.setIndent(Buf* buf, u32 indent_step) @(unused) {$/;"	f
setIndex	$C2_ROOT/ast/enum_constant_decl.c2	/^public fn void EnumConstantDecl.setIndex(EnumConstantDecl* d, u32 index) {$/;"	f
setInit	$C2_ROOT/ast/var_decl.c2	/^public fn  void VarDecl.setInit(VarDecl* d, Expr* initValue) {$/;"	f
setInitCall	$C2_ROOT/ast/var_decl.c2	/^public fn void VarDecl.setInitCall(VarDecl* d, bool has_init_call) {$/;"	f
setInstanceName	$C2_ROOT/ast/function_decl.c2	/^public fn void FunctionDecl.setInstanceName(FunctionDecl* d, u32 name_idx) {$/;"	f
setInstructions	$C2_ROOT/ir/block.c2	/^public fn void Block.setInstructions(Block* b, u32 start, u32 count) {$/;"	f
setInternal	$C2_ROOT/ast/module.c2	/^public fn void Module.setInternal(Module* m) @(unused) { m.is_internal = true; }$/;"	f
setIsArray	$C2_ROOT/ast/init_list_expr.c2	/^public fn void InitListExpr.setIsArray(InitListExpr* e) {$/;"	f
setIsStaticTypeFunc	$C2_ROOT/ast/member_expr.c2	/^public fn void MemberExpr.setIsStaticTypeFunc(MemberExpr* e) {$/;"	f
setIsTypeFunc	$C2_ROOT/ast/member_expr.c2	/^public fn void MemberExpr.setIsTypeFunc(MemberExpr* e) {$/;"	f
setKind	$C2_ROOT/ast/identifier_expr.c2	/^public fn void IdentifierExpr.setKind(IdentifierExpr* e, IdentifierKind kind) {$/;"	f
setKind	$C2_ROOT/ast/member_expr.c2	/^public fn void MemberExpr.setKind(MemberExpr* e, IdentifierKind kind) {$/;"	f
setKind	$C2_ROOT/common/component.c2	/^public fn void Component.setKind(Component* c, bool is_static, bool is_dynamic) {$/;"	f
setLValue	$C2_ROOT/ast/expr.c2	/^public fn void Expr.setLValue(Expr* e) {$/;"	f
setLinkName	$C2_ROOT/common/component.c2	/^public fn void Component.setLinkName(Component* c, const char* name) {$/;"	f
setLoaded	$C2_ROOT/ast/module.c2	/^public fn void Module.setLoaded(Module* m) { m.is_loaded = true; }$/;"	f
setLocal	$C2_ROOT/ast/var_decl.c2	/^public fn void VarDecl.setLocal(VarDecl* d, bool has_local) {$/;"	f
setMemberInfo	$C2_ROOT/ast/field_designated_init_expr.c2	/^public fn void FieldDesignatedInitExpr.setMemberInfo(FieldDesignatedInitExpr* e, const FieldInit/;"	f
setMemberType	$C2_ROOT/ast/function_decl.c2	/^public fn void FunctionDecl.setMemberType(FunctionDecl* d) {$/;"	f
setMod	$C2_ROOT/analyser/module_analyser.c2	/^fn void Analyser.setMod(Analyser* ma, Module* mod) {$/;"	f
setMouseCursor	$C2_ROOT/libs/sokol/sokol_app.c2i	/^fn void setMouseCursor(MouseCursor cursor) @(cname="sapp_set_mouse_cursor");$/;"	f
setMouseCursor	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^fn void setMouseCursor(MouseCursor cursor) @(cname="sapp_set_mouse_cursor");$/;"	f
setNameIdx	$C2_ROOT/common/build_target.c2	/^public fn void Target.setNameIdx(Target* t, u32 name_idx) {$/;"	f
setNoBuild	$C2_ROOT/common/build_target.c2	/^public fn void Target.setNoBuild(Target* t) {$/;"	f
setNoLibC	$C2_ROOT/common/build_target.c2	/^public fn void Target.setNoLibC(Target* t) {$/;"	f
setNoreturn	$C2_ROOT/ast/call_expr.c2	/^public fn void CallExpr.setNoreturn(CallExpr* e) {$/;"	f
setNumAutoArgs	$C2_ROOT/ast/function_decl.c2	/^public fn void FunctionDecl.setNumAutoArgs(FunctionDecl* d, u32 num) {$/;"	f
setOffset	$C2_ROOT/ast/var_decl.c2	/^public fn void VarDecl.setOffset(VarDecl* d, u32 offset) {$/;"	f
setOpaque	$C2_ROOT/ast/struct_type_decl.c2	/^public fn void StructTypeDecl.setOpaque(StructTypeDecl* d) {$/;"	f
setOutline	$C2_ROOT/libs/sdl2_ttf/sdl_ttf.c2i	/^fn void Font.setOutline(Font* font, c_int outline) @(cname="TTF_SetFontOutline");$/;"	f
setPacked	$C2_ROOT/ast/struct_type_decl.c2	/^public fn void StructTypeDecl.setPacked(StructTypeDecl* d) {$/;"	f
setPath	$C2_ROOT/common/component.c2	/^public fn void Component.setPath(Component* c, u32 dirname) {$/;"	f
setPrefix	$C2_ROOT/ast/type_ref.c2	/^public fn void TypeRefHolder.setPrefix(TypeRefHolder* h, SrcLoc loc, u32 name_idx) {$/;"	f
setPrintfFormat	$C2_ROOT/ast/call_expr.c2	/^public fn void CallExpr.setPrintfFormat(CallExpr* e, u32 format_idx, bool change_format) {$/;"	f
setPrintfFormat	$C2_ROOT/ast/var_decl.c2	/^public fn void VarDecl.setPrintfFormat(VarDecl* d) {$/;"	f
setPtr	$C2_ROOT/ast/ast.c2	/^public fn void AST.setPtr(AST* a, void* ptr) { a.ptr = ptr; }$/;"	f
setQualifiers	$C2_ROOT/ast/type_ref.c2	/^public fn void TypeRefHolder.setQualifiers(TypeRefHolder* h, u32 qualifiers) {$/;"	f
setRType	$C2_ROOT/ast/function_decl.c2	/^public fn void FunctionDecl.setRType(FunctionDecl* d, QualType rt) {$/;"	f
setRValue	$C2_ROOT/ast/expr.c2	/^public fn void Expr.setRValue(Expr* e) {$/;"	f
setReachable	$C2_ROOT/analyser/scope.c2	/^public fn void Scope.setReachable(Scope* s) {$/;"	f
setReg	$C2_ROOT/ir/instr.c2	/^public fn void Instr.setReg(Instr* i, u8 reg) {$/;"	f
setRegister	$C2_ROOT/ir/ref.c2	/^public fn void Ref.setRegister(Ref* r, u32 value) {$/;"	f
setReturnType	$C2_ROOT/ir/function_info.c2	/^public fn void FunctionInfo.setReturnType(FunctionInfo* fi, ir.Type t) {$/;"	f
setScaleMode	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn c_int Texture.setScaleMode(Texture* texture, ScaleMode mode) @(cname="SDL_SetTextureScaleMode/;"	f
setSigned	$C2_ROOT/ast/value.c2	/^fn void Value.setSigned(Value* v, i64 svalue) {$/;"	f
setSize	$C2_ROOT/ast/array_type.c2	/^public fn void ArrayType.setSize(ArrayType* t, u32 size) {$/;"	f
setSize	$C2_ROOT/libs/sdl2_ttf/sdl_ttf.c2i	/^fn c_int Font.setSize(Font* font, c_int ptsize) @(cname="TTF_SetFontSize");$/;"	f
setString	$C2_ROOT/ast/switch_stmt.c2	/^public fn void SwitchStmt.setString(SwitchStmt* s) {$/;"	f
setStructFunctions	$C2_ROOT/ast/struct_type_decl.c2	/^public fn void StructTypeDecl.setStructFunctions(StructTypeDecl* d, ast_context.Context* c, Func/;"	f
setStructMemberType	$C2_ROOT/ast/type_ref.c2	/^public fn void TypeRefHolder.setStructMemberType(TypeRefHolder* h, Decl* fd) {$/;"	f
setStyle	$C2_ROOT/libs/sdl2_ttf/sdl_ttf.c2i	/^fn void Font.setStyle(Font* font, c_int style) @(cname="TTF_GetFontStyle");$/;"	f
setTarget	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn c_int Renderer.setTarget(Renderer* renderer, Texture* texture) @(cname="SDL_SetRenderTarget")/;"	f
setTemplateIdx	$C2_ROOT/ast/call_expr.c2	/^public fn void CallExpr.setTemplateIdx(CallExpr* e, u32 idx) {$/;"	f
setTemplateInstanceIdx	$C2_ROOT/ast/function_decl.c2	/^public fn void FunctionDecl.setTemplateInstanceIdx(FunctionDecl* d, u16 idx) {$/;"	f
setTextInputRect	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn void setTextInputRect(const Rect* rect) @(cname="SDL_SetTextInputRect");$/;"	f
setTiming	$C2_ROOT/common/console.c2	/^public fn void setTiming(bool enable) {$/;"	f
setType	$C2_ROOT/ast/decl.c2	/^public fn void Decl.setType(Decl* d, QualType qt) { d.qt = qt; }$/;"	f
setType	$C2_ROOT/ast/expr.c2	/^public fn void Expr.setType(Expr* e, QualType qt) { e.qt = qt; }$/;"	f
setTypePublicUsed	$C2_ROOT/ast/utils.c2	/^public fn void setTypePublicUsed(QualType qt) {$/;"	f
setUValue	$C2_ROOT/ast/builtin_expr.c2	/^public fn void BuiltinExpr.setUValue(BuiltinExpr* e, u64 val) {$/;"	f
setUnreachable	$C2_ROOT/analyser/scope.c2	/^public fn void Scope.setUnreachable(Scope* s) {$/;"	f
setUnsigned	$C2_ROOT/ast/value.c2	/^fn void Value.setUnsigned(Value* v, u64 uvalue) {$/;"	f
setUsed	$C2_ROOT/ast/decl.c2	/^public fn void Decl.setUsed(Decl* d) { d.declBits.is_used = true; }$/;"	f
setUsed	$C2_ROOT/ast/label_stmt.c2	/^public fn void LabelStmt.setUsed(LabelStmt* s) {$/;"	f
setUsed	$C2_ROOT/ast/module.c2	/^public fn void Module.setUsed(Module* m) { m.is_used = true; }$/;"	f
setUsedPublic	$C2_ROOT/ast/decl.c2	/^public fn void Decl.setUsedPublic(Decl* d) { d.declBits.is_used_public = true; }$/;"	f
setUser	$C2_ROOT/ast/type_ref.c2	/^public fn void TypeRefHolder.setUser(TypeRefHolder* h, SrcLoc loc, u32 name_idx) {$/;"	f
setUserData	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn c_int Texture.setUserData(Texture* texture, void* userdata) @(cname="SDL_SetTextureUserData")/;"	f
setValType	$C2_ROOT/ast/expr.c2	/^public fn void Expr.setValType(Expr* e, ValType valtype) {$/;"	f
setValue	$C2_ROOT/ast/builtin_expr.c2	/^public fn void BuiltinExpr.setValue(BuiltinExpr* e, Value value) {$/;"	f
setValue	$C2_ROOT/ast/enum_constant_decl.c2	/^public fn void EnumConstantDecl.setValue(EnumConstantDecl* d, Value value) {$/;"	f
setViewPort	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn c_int Renderer.setViewPort(Renderer* renderer, const Rect* rect) @(cname="SDL_RenderSetViewpo/;"	f
setVolatile	$C2_ROOT/ast/qualtype.c2	/^public fn void QualType.setVolatile(QualType* qt) {$/;"	f
setVolatile	$C2_ROOT/ast/type_ref.c2	/^public fn void TypeRefHolder.setVolatile(TypeRefHolder* h) {$/;"	f
setWarningAsError	$C2_ROOT/common/diagnostics.c2	/^public fn void Diags.setWarningAsError(Diags* diags, bool are_errors) {$/;"	f
setWidth	$C2_ROOT/ast/bitoffset_expr.c2	/^public fn void BitOffsetExpr.setWidth(BitOffsetExpr* e, u8 width) {$/;"	f
setWindowTitle	$C2_ROOT/libs/sokol/sokol_app.c2i	/^fn void setWindowTitle(const char* str) @(cname="sapp_set_window_title");$/;"	f
setWindowTitle	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^fn void setWindowTitle(const char* str) @(cname="sapp_set_window_title");$/;"	f
setWrappedAlign	$C2_ROOT/libs/sdl2_ttf/sdl_ttf.c2i	/^fn void Font.setWrappedAlign(Font* font, c_int align) @(cname="TTF_SetFontWrappedAlign");$/;"	f
set_color_output	$C2_ROOT/tools/tester/test_utils.c2	/^public fn void set_color_output(const char *name, bool enable) {$/;"	f
set_data	$C2_ROOT/libs/io_uring/io_uring.c2i	/^fn void Sqe.set_data(Sqe* sqe, void* data) @(cname="io_uring_sqe_set_data")$/;"	f
set_flags	$C2_ROOT/libs/io_uring/io_uring.c2i	/^fn void Sqe.set_flags(Sqe* sqe, u32 flags) @(cname="io_uring_sqe_set_flags")$/;"	f
setallocf	$C2_ROOT/libs/lua/lua.c2i	/^fn void setallocf(State *L, Alloc f, void *ud) @(cname="lua_setallocf");$/;"	f
setbuf	$C2_ROOT/libs/libc/stdio.c2i	/^fn void setbuf(FILE* __stream, c_char* __buf);$/;"	f
setbuffer	$C2_ROOT/libs/libc/stdio.c2i	/^fn void setbuffer(FILE* __stream, c_char* __buf, c_size __size);$/;"	f
setenv	$C2_ROOT/libs/libc/stdlib.c2i	/^fn c_int setenv(const c_char* __name, const c_char* __value, c_int __replace);$/;"	f
setfield	$C2_ROOT/libs/lua/lua.c2i	/^fn void  setfield(State *L, c_int idx, const c_char *k) @(cname="lua_setfield");$/;"	f
setglobal	$C2_ROOT/libs/lua/lua.c2i	/^fn void  setglobal(State *L, const c_char *name) @(cname="lua_setglobal");$/;"	f
seti	$C2_ROOT/libs/lua/lua.c2i	/^fn void  seti(State *L, c_int idx, Integer n) @(cname="lua_seti");$/;"	f
setjmp	$C2_ROOT/libs/libc/csetjmp.c2i	/^fn i32 setjmp(JmpBuf __env);$/;"	f
setlinebuf	$C2_ROOT/libs/libc/stdio.c2i	/^fn void setlinebuf(FILE* __stream);$/;"	f
setmetatable	$C2_ROOT/libs/lua/lua.c2i	/^fn c_int setmetatable(State *L, c_int objindex) @(cname="lua_setmetatable");$/;"	f
setsockopt	$C2_ROOT/libs/libc/sys_socket.c2i	/^fn c_int setsockopt(c_int sockfd, c_int level, c_int optname, const void* optval, u32 optlen);$/;"	f
setstate	$C2_ROOT/libs/libc/stdlib.c2i	/^fn c_char* setstate(c_char* __statebuf);$/;"	f
setstate_r	$C2_ROOT/libs/libc/stdlib.c2i	/^fn c_int setstate_r(c_char* __statebuf, Random_data* __buf);$/;"	f
settable	$C2_ROOT/libs/lua/lua.c2i	/^fn void  settable(State *L, c_int idx) @(cname="lua_settable");$/;"	f
settimeofday	$C2_ROOT/libs/libc/sys_time.c2i	/^fn c_int settimeofday(const Timeval* tv, const Timezone* tz);$/;"	f
settop	$C2_ROOT/libs/lua/lua.c2i	/^fn void settop(State* L, c_int idx) @(cname="lua_settop");$/;"	f
setup	$C2_ROOT/libs/sokol/sokol_audio.c2i	/^fn void setup(Desc* desc) @(cname="saudio_setup");$/;"	f
setup	$C2_ROOT/libs/sokol/sokol_debugtext.c2i	/^fn void setup(Desc* desc) @(cname="sdtx_setup");$/;"	f
setup	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn void setup(Desc* desc) @(cname="sg_setup");$/;"	f
setup	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn void setup(Desc* desc) @(cname="sgl_setup");$/;"	f
setup	$C2_ROOT/libs/sokol/sokol_time.c2i	/^fn void setup() @(cname="stm_setup");$/;"	f
setup	$C2_ROOT/libs/sokol_/sokol_audio.c2i	/^fn void setup(Desc* desc) @(cname="saudio_setup");$/;"	f
setup	$C2_ROOT/libs/sokol_/sokol_debugtext.c2i	/^fn void setup(Desc* desc) @(cname="sdtx_setup");$/;"	f
setup	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn void setup(Desc* desc) @(cname="sg_setup");$/;"	f
setup	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn void setup(Desc* desc) @(cname="sgl_setup");$/;"	f
setup	$C2_ROOT/libs/sokol_/sokol_time.c2i	/^fn void setup() @(cname="stm_setup");$/;"	f
setuservalue	$C2_ROOT/libs/lua/lua.c2i	/^fn void  setuservalue(State *L, c_int idx) @(cname="lua_setuservalue");$/;"	f
setvbuf	$C2_ROOT/libs/libc/stdio.c2i	/^fn c_int setvbuf(FILE* __stream, c_char* __buf, c_int __modes, c_size __n);$/;"	f
shiftArenaRight	$C2_ROOT/ir/interference_graph.c2	/^fn u16 InterferenceGraph.shiftArenaRight(InterferenceGraph* g, u32 arena_idx) {$/;"	f
shiftArenaRight	$C2_ROOT/ir/live_map.c2	/^fn u16 Map.shiftArenaRight(Map* g, u32 arena_idx) {$/;"	f
shiftArenaRight	$C2_ROOT/ir/slot_writes_map.c2	/^fn u16 Map.shiftArenaRight(Map* m, u32 arena_idx) {$/;"	f
show	$C2_ROOT/compiler/plugin_mgr.c2	/^public fn void Mgr.show(const Mgr* m) {$/;"	f
showAllLibs	$C2_ROOT/compiler/compiler_libs.c2	/^fn void Compiler.showAllLibs(Compiler* c) {$/;"	f
showCursor	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn c_int showCursor(c_int toggle) @(cname="SDL_ShowCursor");$/;"	f
showKeyboard	$C2_ROOT/libs/sokol/sokol_app.c2i	/^fn void showKeyboard(bool show) @(cname="sapp_show_keyboard");$/;"	f
showKeyboard	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^fn void showKeyboard(bool show) @(cname="sapp_show_keyboard");$/;"	f
showLibs	$C2_ROOT/compiler/compiler_libs.c2	/^fn void Compiler.showLibs(Compiler* c, string_buffer.Buf* out, const char* dirname, bool show_mo/;"	f
showMouse	$C2_ROOT/libs/sokol/sokol_app.c2i	/^fn void showMouse(bool show) @(cname="sapp_show_mouse");$/;"	f
showMouse	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^fn void showMouse(bool show) @(cname="sapp_show_mouse");$/;"	f
show_tests	$C2_ROOT/output/unit_test/libunit_test.dylib	/^public fn void show_tests() {$/;"	f
show_tests	$C2_ROOT/plugins/unit_test2.c2	/^public fn void show_tests() {$/;"	f
shutdown	$C2_ROOT/libs/sokol/sokol_audio.c2i	/^fn void shutdown() @(cname="saudio_shutdown");$/;"	f
shutdown	$C2_ROOT/libs/sokol/sokol_debugtext.c2i	/^fn void shutdown() @(cname="sdtx_shutdown");$/;"	f
shutdown	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn void shutdown() @(cname="sg_shutdown");$/;"	f
shutdown	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn void shutdown() @(cname="sgl_shutdown");$/;"	f
shutdown	$C2_ROOT/libs/sokol_/sokol_audio.c2i	/^fn void shutdown() @(cname="saudio_shutdown");$/;"	f
shutdown	$C2_ROOT/libs/sokol_/sokol_debugtext.c2i	/^fn void shutdown() @(cname="sdtx_shutdown");$/;"	f
shutdown	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn void shutdown() @(cname="sg_shutdown");$/;"	f
shutdown	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn void shutdown() @(cname="sgl_shutdown");$/;"	f
sigaction	$C2_ROOT/libs/libc/csignal.c2i	/^fn c_int sigaction(c_int signum, const Sigaction* act, Sigaction* oldact);$/;"	f
sigaddset	$C2_ROOT/libs/libc/csignal.c2i	/^fn c_int sigaddset (Sigset* set, i32 signum);$/;"	f
sigemptyset	$C2_ROOT/libs/libc/csignal.c2i	/^fn c_int sigemptyset(Sigset* set);$/;"	f
signal	$C2_ROOT/libs/pthread/pthread.c2i	/^fn c_int Cond.signal(Cond* cond) @(cname="pthread_cond_signal");$/;"	f
signalfd	$C2_ROOT/libs/libc/sys_signalfd.c2i	/^fn c_int signalfd(c_int __fd, const csignal.Sigset* mask, c_int flags) @(cname="signalfd");$/;"	f
signbit	$C2_ROOT/ast/value.c2	/^fn i32 signbit(f64 d) {$/;"	f
signbit	$C2_ROOT/libs/math/math.c2i	/^fn c_int signbit(c_double d) { FP64_ u; u.d = d; return (u.u >> 63) & 1; }$/;"	f
signbitf	$C2_ROOT/libs/math/math.c2i	/^fn c_int signbitf(c_float f) { FP32_ u; u.f = f; return (u.u >> 31) & 1; }$/;"	f
sigprocmask	$C2_ROOT/libs/libc/csignal.c2i	/^fn c_int sigprocmask(c_int how, const Sigset* set, Sigset* oldset);$/;"	f
sin	$C2_ROOT/libs/math/math.c2i	/^fn c_double sin(c_double);$/;"	f
since	$C2_ROOT/libs/sokol/sokol_time.c2i	/^fn u64 since(u64 start_ticks) @(cname="stm_since");$/;"	f
since	$C2_ROOT/libs/sokol_/sokol_time.c2i	/^fn u64 since(u64 start_ticks) @(cname="stm_since");$/;"	f
sinf	$C2_ROOT/libs/math/math.c2i	/^fn c_float sinf(c_float);$/;"	f
sinh	$C2_ROOT/libs/math/math.c2i	/^fn c_double sinh(c_double);$/;"	f
sinhf	$C2_ROOT/libs/math/math.c2i	/^fn c_float sinhf(c_float);$/;"	f
size	$C2_ROOT/ast/decl_list.c2	/^public fn u32 DeclList.size(const DeclList* l) {$/;"	f
size	$C2_ROOT/ast/expr_list.c2	/^public fn u32 ExprList.size(const ExprList* l) {$/;"	f
size	$C2_ROOT/ast/function_decl_list.c2	/^public fn u32 FunctionDeclList.size(const FunctionDeclList* l) {$/;"	f
size	$C2_ROOT/ast/import_decl_list.c2	/^public fn u32 ImportDeclList.size(const ImportDeclList* l) {$/;"	f
size	$C2_ROOT/ast/symbol_table.c2	/^public fn u32 SymbolTable.size(const SymbolTable* t) {$/;"	f
size	$C2_ROOT/ast_utils/string_buffer.c2	/^public fn u32 Buf.size(const Buf* buf) {$/;"	f
size	$C2_ROOT/common/build_target.c2	/^public fn u32 PluginList.size(const PluginList* l) { return l.count; }$/;"	f
size	$C2_ROOT/common/component.c2	/^public fn u32 List.size(const List* l) {$/;"	f
size	$C2_ROOT/common/linked_list.c2	/^public fn u64 Element.size(const Element* src) @(unused) {$/;"	f
size	$C2_ROOT/ir/types.c2	/^public fn u32 Type.size(Type t) {$/;"	f
size	$C2_ROOT/parser/case_list.c2	/^public fn u32 List.size(const List* l) {$/;"	f
size	$C2_ROOT/parser/expr_list.c2	/^public fn u32 List.size(const List* l) {$/;"	f
size	$C2_ROOT/parser/stmt_list.c2	/^public fn u32 List.size(const List* l) {$/;"	f
size	$C2_ROOT/tools/tester/line_db.c2	/^public fn u32 Db.size(const Db* db) {$/;"	f
size2type	$C2_ROOT/generator/ir/ir_generator_expr.c2	/^fn ir.Type size2type(u32 size) {$/;"	f
sizeOfStruct	$C2_ROOT/analyser/size_analyser.c2	/^public fn void sizeOfStruct(StructTypeDecl* s) {$/;"	f
sizeOfType	$C2_ROOT/analyser/size_analyser.c2	/^public fn TypeSize sizeOfType(QualType qt) {$/;"	f
sizeOfUnion	$C2_ROOT/analyser/size_analyser.c2	/^fn void sizeOfUnion(StructTypeDecl* s) {$/;"	f
sizeText	$C2_ROOT/libs/sdl2_ttf/sdl_ttf.c2i	/^fn c_int Font.sizeText(Font* font, const char* text, c_int* w, c_int* h) @(cname="TTF_SizeText")/;"	f
size_analyser	$C2_ROOT/analyser/size_analyser.c2	/^module size_analyser;$/;"	m
skipArray	$C2_ROOT/parser/c2_parser_stmt.c2	/^fn u32 Parser.skipArray(Parser* p, u32 ahead, Kind endKind) {$/;"	f
skipInitialWhitespace	$C2_ROOT/tools/tester/test_utils.c2	/^public fn void skipInitialWhitespace(const char** start, const char* end) {$/;"	f
skipLine	$C2_ROOT/tools/tester/test_db.c2	/^fn void Db.skipLine(Db* db) {$/;"	f
skipTrailingWhitespace	$C2_ROOT/tools/tester/test_utils.c2	/^public fn void skipTrailingWhitespace(const char* start, const char** end) {$/;"	f
skip_comments	$C2_ROOT/compiler/c2recipe_parser.c2	/^fn void Parser.skip_comments(Parser* p) {$/;"	f
skip_feature	$C2_ROOT/parser/c2_tokenizer.c2	/^fn bool Tokenizer.skip_feature(Tokenizer* t, Token* result) {$/;"	f
sleep	$C2_ROOT/libs/libc/unistd.c2i	/^fn c_uint sleep(c_uint __seconds);$/;"	f
smp	$C2_ROOT/libs/sokol/c/sokol_gfx.h	/^    @sampler_type smp nonfiltering$/;"	t
smp	$C2_ROOT/libs/sokol_/c/sokol_gfx.h	/^    @sampler_type smp nonfiltering$/;"	t
snprintf	$C2_ROOT/libs/libc/stdio.c2i	/^fn c_int snprintf(c_char* __s, c_size size, const c_char* __format @(printf_format), ...);$/;"	f
socket	$C2_ROOT/libs/libc/sys_socket.c2i	/^fn c_int socket(c_int domain, c_int type_, c_int protocol);$/;"	f
sokol_app	$C2_ROOT/libs/sokol/sokol_app.c2i	/^module sokol_app;$/;"	m
sokol_app	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^module sokol_app;$/;"	m
sokol_audio	$C2_ROOT/libs/sokol/sokol_audio.c2i	/^module sokol_audio;$/;"	m
sokol_audio	$C2_ROOT/libs/sokol_/sokol_audio.c2i	/^module sokol_audio;$/;"	m
sokol_debugtext	$C2_ROOT/libs/sokol/sokol_debugtext.c2i	/^module sokol_debugtext;$/;"	m
sokol_debugtext	$C2_ROOT/libs/sokol_/sokol_debugtext.c2i	/^module sokol_debugtext;$/;"	m
sokol_gfx	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^module sokol_gfx;$/;"	m
sokol_gfx	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^module sokol_gfx;$/;"	m
sokol_gl	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^module sokol_gl;$/;"	m
sokol_gl	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^module sokol_gl;$/;"	m
sokol_glue	$C2_ROOT/libs/sokol/sokol_glue.c2i	/^module sokol_glue;$/;"	m
sokol_glue	$C2_ROOT/libs/sokol_/sokol_glue.c2i	/^module sokol_glue;$/;"	m
sokol_log	$C2_ROOT/libs/sokol/sokol_log.c2i	/^module sokol_log;$/;"	m
sokol_log	$C2_ROOT/libs/sokol_/sokol_log.c2i	/^module sokol_log;$/;"	m
sokol_shape	$C2_ROOT/libs/sokol/sokol_shape.c2i	/^module sokol_shape;$/;"	m
sokol_shape	$C2_ROOT/libs/sokol_/sokol_shape.c2i	/^module sokol_shape;$/;"	m
sokol_time	$C2_ROOT/libs/sokol/sokol_time.c2i	/^module sokol_time;$/;"	m
sokol_time	$C2_ROOT/libs/sokol_/sokol_time.c2i	/^module sokol_time;$/;"	m
sort	$C2_ROOT/analyser/module_sorter.c2	/^public fn void sort(component.Component* c, diagnostics.Diags* diags) {$/;"	f
sort	$C2_ROOT/common/component_sorter.c2	/^public fn void sort(Component** orig, u32 count, diagnostics.Diags* diags) {$/;"	f
sort	$C2_ROOT/common/dsm_sorter.c2	/^public fn const u8* Sorter.sort(Sorter* s) {$/;"	f
sort	$C2_ROOT/common/quicksort.c2	/^public fn void sort(void* items, usize count, usize item_size, CompareFn is_less, void* arg)$/;"	f
source_mgr	$C2_ROOT/common/source_mgr.c2	/^module source_mgr;$/;"	m
space	$C2_ROOT/ast_utils/string_buffer.c2	/^public fn void Buf.space(Buf* buf) { buf.add1(' '); }$/;"	f
sphereSizes	$C2_ROOT/libs/sokol/sokol_shape.c2i	/^fn Sizes sphereSizes(u32 slices, u32 stacks) @(cname="sshape_sphere_sizes");$/;"	f
sphereSizes	$C2_ROOT/libs/sokol_/sokol_shape.c2i	/^fn Sizes sphereSizes(u32 slices, u32 stacks) @(cname="sshape_sphere_sizes");$/;"	f
sprintf	$C2_ROOT/libs/libc/stdio.c2i	/^fn c_int sprintf(c_char* __s, const c_char* __format @(printf_format), ...);$/;"	f
sq_space_left	$C2_ROOT/libs/io_uring/io_uring.c2i	/^fn u32 sq_space_left(const Ring* ring)$/;"	f
sqrt	$C2_ROOT/libs/math/math.c2i	/^fn c_double sqrt(c_double);$/;"	f
sqrtf	$C2_ROOT/libs/math/math.c2i	/^fn c_float sqrtf(c_float);$/;"	f
srand	$C2_ROOT/libs/libc/stdlib.c2i	/^fn void srand(c_uint __seed);$/;"	f
srand48	$C2_ROOT/libs/libc/stdlib.c2i	/^fn void srand48(c_long __seedval);$/;"	f
srand48_r	$C2_ROOT/libs/libc/stdlib.c2i	/^fn c_int srand48_r(c_long __seedval, Drand48_data* __buffer);$/;"	f
srandom	$C2_ROOT/libs/libc/stdlib.c2i	/^fn void srandom(c_uint __seed);$/;"	f
srandom_r	$C2_ROOT/libs/libc/stdlib.c2i	/^fn c_int srandom_r(c_uint __seed, Random_data* __buf);$/;"	f
src_loc	$C2_ROOT/ast_utils/src_loc.c2	/^module src_loc;$/;"	m
sscanf	$C2_ROOT/libs/libc/stdio.c2i	/^fn c_int sscanf(const c_char* __s, const c_char* __format, ...);$/;"	f
ssl_conf_ca_chain	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^fn void ssl_conf_ca_chain( Ssl_config *conf, X509_crt *ca_chain, X509_crl *ca_crl) @(cname="mbed/;"	f
ssl_conf_dbg	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^fn void ssl_conf_dbg( Ssl_config *conf, Dbg_fn f_dbg, void  *p_dbg ) @(cname="mbedtls_ssl_conf_d/;"	f
ssl_conf_max_frag_len	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^fn c_int ssl_conf_max_frag_len( Ssl_config *conf, c_uchar mfl_code) @(cname="mbedtls_ssl_conf_ma/;"	f
ssl_conf_own_cert	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^fn c_int ssl_conf_own_cert( Ssl_config *conf, X509_crt *own_cert, Pk_context *pk_key) @(cname="m/;"	f
ssl_conf_read_timeout	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^fn void ssl_conf_read_timeout(Ssl_config *conf, c_uint timeout) @(cname="mbedtls_ssl_conf_read_t/;"	f
ssl_conf_renegotiation	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^fn void ssl_conf_renegotiation(Ssl_config *conf, c_int renegotiation) @(cname="mbedtls_ssl_conf_/;"	f
ssl_conf_rng	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^fn void ssl_conf_rng( Ssl_config *conf, Rng_fn f_rng, void *p_rng) @(cname="mbedtls_ssl_conf_rng/;"	f
ssl_conf_session_tickets	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^fn void ssl_conf_session_tickets( Ssl_config *conf, c_int use_tickets) @(cname="mbedtls_ssl_conf/;"	f
ssl_conf_verify	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^fn void ssl_conf_verify(Ssl_config *conf, Verify_fn f_vrfy, void *p_vrfy) @(cname="mbedtls_ssl_c/;"	f
ssl_config_defaults	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^fn c_int ssl_config_defaults( Ssl_config *conf, c_int endpoint, c_int transport, c_int preset ) /;"	f
ssl_config_init	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^fn void ssl_config_init( Ssl_config *conf ) @(cname="mbedtls_ssl_config_init");$/;"	f
ssl_get_ciphersuite	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^fn const char* ssl_get_ciphersuite(const Ssl_context *ssl) @(cname="mbedtls_ssl_get_ciphersuite"/;"	f
ssl_get_input_max_frag_len	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^fn c_size ssl_get_input_max_frag_len( const Ssl_context *ssl ) @(cname="mbedtls_ssl_get_input_ma/;"	f
ssl_get_output_max_frag_len	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^fn c_size ssl_get_output_max_frag_len( const Ssl_context *ssl) @(cname="mbedtls_ssl_get_output_m/;"	f
ssl_get_record_expansion	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^fn c_int ssl_get_record_expansion( const Ssl_context *ssl ) @(cname="mbedtls_ssl_get_record_expa/;"	f
ssl_get_version	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^fn const char* ssl_get_version( const Ssl_context *ssl) @(cname="mbedtls_ssl_get_version");$/;"	f
ssl_handshake	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^fn c_int ssl_handshake(Ssl_context *ssl) @(cname="mbedtls_ssl_handshake");$/;"	f
ssl_init	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^fn void ssl_init( Ssl_context *ssl ) @(cname="mbedtls_ssl_init");$/;"	f
ssl_set_bio	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^fn void ssl_set_bio( Ssl_context *ssl, void *p_bio, Ssl_send_t f_send, Ssl_recv_t f_recv, Ssl_re/;"	f
ssl_set_hostname	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^fn c_int ssl_set_hostname( Ssl_context *ssl, const char *hostname) @(cname="mbedtls_ssl_set_host/;"	f
ssl_set_timer_cb	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^fn void ssl_set_timer_cb(Ssl_context *ssl, void *p_timer, Ssl_set_timer_t f_set_timer, Ssl_get_t/;"	f
ssl_setup	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^fn c_int ssl_setup( Ssl_context *ssl, const Ssl_config *conf) @(cname="mbedtls_ssl_setup");$/;"	f
stack_add	$C2_ROOT/analyser/scope.c2	/^fn void Scope.stack_add(Scope* s, u32 name_idx, ast.Decl* d) {$/;"	f
stack_find	$C2_ROOT/analyser/scope.c2	/^fn ast.Decl* Scope.stack_find(const Scope* s, u32 name_idx) {$/;"	f
stack_resize	$C2_ROOT/analyser/scope.c2	/^fn void Scope.stack_resize(Scope* s, u32 capacity) {$/;"	f
start	$C2_ROOT/generator/c2refs.c2	/^fn u32 Files.start(Files* f, const char* filename, u32 link_start) {$/;"	f
start	$C2_ROOT/ir/inserter.c2	/^public fn void Inserter.start(Inserter* ins) {$/;"	f
startBlock	$C2_ROOT/ir/context.c2	/^public fn void Context.startBlock(Context* c, BlockId id) {$/;"	f
startFunc	$C2_ROOT/ir/context.c2	/^public fn void Context.startFunc(Context* c, SymbolId id) {$/;"	f
startGlobal	$C2_ROOT/ir/context.c2	/^public fn void Context.startGlobal(Context* c, SymbolId id) {$/;"	f
startTextInput	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn void startTextInput() @(cname="SDL_StartTextInput");$/;"	f
start_file	$C2_ROOT/generator/c2refs.c2	/^public fn void Refs.start_file(Refs* r, const char* filename) {$/;"	f
starts_with	$C2_ROOT/common/yaml/yaml_iterator.c2	/^fn const char* starts_with(const char* full, const char* start) {$/;"	f
stat	$C2_ROOT/libs/libc/sys_stat.c2i	/^fn c_int stat(const c_char* pathname, Stat* buf);$/;"	f
stats_iter	$C2_ROOT/generator/radix_tree/radix_tree_dump.c2	/^fn void Tree.stats_iter(const Tree* t, u32 node_idx, Stats* stats) {$/;"	f
status	$C2_ROOT/libs/lua/lua.c2i	/^fn c_int status(State *L) @(cname="lua_status");$/;"	f
stdarg	$C2_ROOT/libs/libc/stdarg.c2i	/^module stdarg;$/;"	m
stdio	$C2_ROOT/libs/libc/stdio.c2i	/^module stdio;$/;"	m
stdlib	$C2_ROOT/libs/libc/stdlib.c2i	/^module stdlib;$/;"	m
stmt_list	$C2_ROOT/parser/stmt_list.c2	/^module stmt_list;$/;"	m
stopTextInput	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn void stopTextInput() @(cname="SDL_StopTextInput");$/;"	f
store	$C2_ROOT/generator/radix_tree/radix_tree_fs.c2	/^public fn bool Tree.store(Tree* t, i32 fd) {$/;"	f
storeAttr	$C2_ROOT/ast/ast.c2	/^public fn void AST.storeAttr(AST* a,$/;"	f
storeAttr	$C2_ROOT/parser/ast_builder.c2	/^fn void Builder.storeAttr(Builder* b, Decl* d, const Attr* a) {$/;"	f
storeIn	$C2_ROOT/ir/register_alloc.c2	/^fn void LiveVector.storeIn(LiveVector* v, u16 blk_id) {$/;"	f
storeOut	$C2_ROOT/ir/register_alloc.c2	/^fn void LiveVector.storeOut(LiveVector* v, u16 blk_id) {$/;"	f
stpcpy	$C2_ROOT/libs/libc/string.c2i	/^fn c_char* stpcpy(c_char* dest, const c_char* src);$/;"	f
stpncpy	$C2_ROOT/libs/libc/string.c2i	/^fn c_char* stpncpy(c_char* dest, const c_char* src, c_size n);$/;"	f
str	$C2_ROOT/ast/binary_operator.c2	/^public fn const char* BinaryOpcode.str(BinaryOpcode opcode) {$/;"	f
str	$C2_ROOT/ast/builtin_type.c2	/^public fn const char* BuiltinKind.str(BuiltinKind kind) {$/;"	f
str	$C2_ROOT/ast/identifier_expr.c2	/^fn const char* IdentifierKind.str(IdentifierKind k) {$/;"	f
str	$C2_ROOT/ast/type_ref.c2	/^fn const char* TypeRefKind.str(TypeRefKind k) {$/;"	f
str	$C2_ROOT/ast/value.c2	/^public fn const char* Value.str(const Value* v) {$/;"	f
str	$C2_ROOT/common/target_info.c2	/^public fn const char* Info.str(const Info* info) {$/;"	f
str	$C2_ROOT/common/yaml/yaml_tokenizer.c2	/^fn const char* Token.str(const Token* tok) {$/;"	f
str	$C2_ROOT/ir/block.c2	/^public fn const char* BlockKind.str(BlockKind k) @(unused) {$/;"	f
str	$C2_ROOT/ir/init_value.c2	/^fn const char* InitValueKind.str(InitValueKind k) {$/;"	f
str	$C2_ROOT/ir/instr_kind.c2	/^public fn const char* InstrKind.str(InstrKind k) @(unused) {$/;"	f
str	$C2_ROOT/ir/ref.c2	/^public fn const char* Ref.str(const Ref* r) @(unused) {$/;"	f
str	$C2_ROOT/ir/types.c2	/^public fn const char* Type.str(Type t) {$/;"	f
str	$C2_ROOT/parser/token.c2	/^public fn const char* Kind.str(Kind k) {$/;"	f
str2abi	$C2_ROOT/common/target_info.c2	/^fn Abi str2abi(const char* name) {$/;"	f
str2arch	$C2_ROOT/common/target_info.c2	/^fn Arch str2arch(const char* name) {$/;"	f
str2sys	$C2_ROOT/common/target_info.c2	/^fn System str2sys(const char* name) {$/;"	f
str2vendor	$C2_ROOT/common/target_info.c2	/^fn Vendor str2vendor(const char* name) {$/;"	f
strcasecmp	$C2_ROOT/libs/libc/string.c2i	/^fn c_int strcasecmp(const c_char* s1, const c_char* s2);$/;"	f
strcasestr	$C2_ROOT/libs/libc/string.c2i	/^fn c_char* strcasestr(const c_char* s1, const c_char* s2);$/;"	f
strcat	$C2_ROOT/libs/libc/string.c2i	/^fn c_char* strcat(c_char* dest, const c_char* src);$/;"	f
strchr	$C2_ROOT/libs/libc/string.c2i	/^fn c_char* strchr(const c_char* s, c_int c);$/;"	f
strchrnul	$C2_ROOT/libs/libc/string.c2i	/^fn c_char* strchrnul(const c_char* s, c_int c);$/;"	f
strcmp	$C2_ROOT/libs/libc/string.c2i	/^fn c_int strcmp(const c_char* s1, const c_char* s2);$/;"	f
strcoll	$C2_ROOT/libs/libc/string.c2i	/^fn c_int strcoll(const c_char* s1, const c_char* s2);$/;"	f
strcpy	$C2_ROOT/libs/libc/string.c2i	/^fn c_char* strcpy(c_char* dest, const c_char* src);$/;"	f
strcspn	$C2_ROOT/libs/libc/string.c2i	/^fn c_size strcspn(const c_char* s1, const c_char* s2);$/;"	f
strdup	$C2_ROOT/libs/libc/string.c2i	/^fn c_char* strdup(const c_char* s);$/;"	f
strerror	$C2_ROOT/libs/libc/string.c2i	/^fn c_char* strerror(c_int errnum);$/;"	f
strerror	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^fn void strerror(c_int ret, char *buf, c_size buflen) @(cname="mbedtls_strerror");$/;"	f
strerror_r	$C2_ROOT/libs/libc/string.c2i	/^fn c_int strerror_r(c_int errnum, c_char* dest, c_size n);$/;"	f
strftime	$C2_ROOT/libs/libc/libc_time.c2i	/^fn c_size strftime(c_char *s, c_size max, const c_char *format, const Tm *tm);$/;"	f
string	$C2_ROOT/libs/libc/string.c2i	/^module string;$/;"	m
string_buffer	$C2_ROOT/ast_utils/string_buffer.c2	/^module string_buffer;$/;"	m
string_list	$C2_ROOT/common/string_list.c2	/^module string_list;$/;"	m
string_pool	$C2_ROOT/ast_utils/string_pool.c2	/^module string_pool;$/;"	m
string_utils	$C2_ROOT/common/string_utils.c2	/^module string_utils;$/;"	m
strings	$C2_ROOT/libs/libc/strings.c2i	/^module strings;$/;"	m
stringtonumber	$C2_ROOT/libs/lua/lua.c2i	/^fn c_size stringtonumber(State *L, const c_char *s) @(cname="lua_stringtonumber");$/;"	f
stripNewLine	$C2_ROOT/common/string_utils.c2	/^public fn char* stripNewLine(char* buf) @(unused) {$/;"	f
strlcat	$C2_ROOT/libs/libc/string.c2i	/^fn c_size strlcat(c_char* dest, const c_char* src, c_size n);$/;"	f
strlcpy	$C2_ROOT/libs/libc/string.c2i	/^fn c_size strlcpy(c_char* dest, const c_char* src, c_size n);$/;"	f
strlen	$C2_ROOT/ast/string_literal.c2	/^public fn u32 StringLiteral.strlen(const StringLiteral* e) {$/;"	f
strlen	$C2_ROOT/libs/libc/string.c2i	/^fn c_size strlen(const c_char* s);$/;"	f
strncasecmp	$C2_ROOT/libs/libc/string.c2i	/^fn c_int strncasecmp(const c_char* s1, const c_char* s2, c_size n);$/;"	f
strncat	$C2_ROOT/libs/libc/string.c2i	/^fn c_char* strncat(c_char* dest, const c_char* src, c_size n);$/;"	f
strncmp	$C2_ROOT/libs/libc/string.c2i	/^fn c_int strncmp(const c_char* s1, const c_char* s2, c_size n);$/;"	f
strncpy	$C2_ROOT/libs/libc/string.c2i	/^fn c_char* strncpy(c_char* dest, const c_char* src, c_size n);$/;"	f
strndup	$C2_ROOT/libs/libc/string.c2i	/^fn c_char* strndup(const c_char* s, c_size n);$/;"	f
strnlen	$C2_ROOT/libs/libc/string.c2i	/^fn c_size strnlen(const c_char* s, c_size n);$/;"	f
strnstr	$C2_ROOT/libs/libc/string.c2i	/^fn c_char* strnstr(const c_char* s1, const c_char* s2, c_size n);$/;"	f
strpbrk	$C2_ROOT/libs/libc/string.c2i	/^fn c_char* strpbrk(const c_char* s1, const c_char* s2);$/;"	f
strrchr	$C2_ROOT/libs/libc/string.c2i	/^fn c_char* strrchr(const c_char* s, c_int c);$/;"	f
strsep	$C2_ROOT/libs/libc/string.c2i	/^fn c_char* strsep(c_char** stringp, const c_char* delim);$/;"	f
strsignal	$C2_ROOT/libs/libc/string.c2i	/^fn c_char* strsignal(c_int sig);$/;"	f
strspn	$C2_ROOT/libs/libc/string.c2i	/^fn c_size strspn(const c_char* s1, const c_char* s2);$/;"	f
strstart	$C2_ROOT/tools/tester/test_utils.c2	/^public fn bool strstart(const char* p, const char* s, const char** pp) {$/;"	f
strstr	$C2_ROOT/libs/libc/string.c2i	/^fn c_char* strstr(const c_char* s1, const c_char* s2);$/;"	f
strtod	$C2_ROOT/libs/libc/stdlib.c2i	/^fn c_double strtod(const c_char* nptr, c_char** endptr);$/;"	f
strtof	$C2_ROOT/libs/libc/stdlib.c2i	/^fn c_float strtof(const c_char* nptr, c_char** endptr);$/;"	f
strtok	$C2_ROOT/libs/libc/string.c2i	/^fn c_char* strtok(c_char* s1, const c_char* s2);$/;"	f
strtok_r	$C2_ROOT/libs/libc/string.c2i	/^fn c_char* strtok_r(c_char* s, const c_char* delim, c_char** save_ptr);$/;"	f
strtol	$C2_ROOT/libs/libc/stdlib.c2i	/^fn c_long strtol(const c_char* nptr, c_char** endptr, c_int base);$/;"	f
strtoll	$C2_ROOT/libs/libc/stdlib.c2i	/^fn c_longlong strtoll(const c_char* nptr, c_char** endptr, c_int base);$/;"	f
strtoq	$C2_ROOT/libs/libc/stdlib.c2i	/^fn c_longlong strtoq(const c_char* nptr, c_char** endptr, c_int base);$/;"	f
strtoul	$C2_ROOT/libs/libc/stdlib.c2i	/^fn c_ulong strtoul(const c_char* nptr, c_char** endptr, c_int base);$/;"	f
strtoull	$C2_ROOT/libs/libc/stdlib.c2i	/^fn c_ulonglong strtoull(const c_char* nptr, c_char** endptr, c_int base);$/;"	f
strtouq	$C2_ROOT/libs/libc/stdlib.c2i	/^fn c_ulonglong strtouq(const c_char* nptr, c_char** endptr, c_int base);$/;"	f
struct_func_list	$C2_ROOT/analyser/struct_func_list.c2	/^module struct_func_list;$/;"	m
strxfrm	$C2_ROOT/libs/libc/string.c2i	/^fn c_size strxfrm(c_char* s1, const c_char* s2, c_size n);$/;"	f
submit	$C2_ROOT/libs/io_uring/io_uring.c2i	/^fn c_int Ring.submit(Ring *ring) @(cname="io_uring_submit");$/;"	f
submit_and_wait	$C2_ROOT/libs/io_uring/io_uring.c2i	/^fn c_int Ring.submit_and_wait(Ring *ring, u32 wait_nr) @(cname="io_uring_submit_and_wait");$/;"	f
summarizeFailed	$C2_ROOT/tools/tester/tester.c2	/^fn void TestQueue.summarizeFailed(const TestQueue* q) {$/;"	f
suspended	$C2_ROOT/libs/sokol/sokol_audio.c2i	/^fn bool suspended() @(cname="saudio_suspended");$/;"	f
suspended	$C2_ROOT/libs/sokol_/sokol_audio.c2i	/^fn bool suspended() @(cname="saudio_suspended");$/;"	f
swap	$C2_ROOT/common/quicksort.c2	/^fn void swap(u8* item, u8* other, usize size) {$/;"	f
swap	$C2_ROOT/ir/block_list.c2	/^public fn void BlockList.swap(BlockList* l1, BlockList* l2) {$/;"	f
swap	$C2_ROOT/ir/instr_list.c2	/^public fn void InstrList.swap(InstrList* l, InstrList* other) {$/;"	f
swap	$C2_ROOT/ir_examples/swap.c2	/^fn i32 swap(i32 a, i32 b) {$/;"	f
swapchain	$C2_ROOT/libs/sokol/sokol_glue.c2i	/^fn Swapchain swapchain() @(cname="sglue_swapchain");$/;"	f
swapchain	$C2_ROOT/libs/sokol_/sokol_glue.c2i	/^fn Swapchain swapchain() @(cname="sglue_swapchain");$/;"	f
sync	$C2_ROOT/common/utf8.c2	/^public fn u32 sync(const char* p) {$/;"	f
sync	$C2_ROOT/libs/libc/unistd.c2i	/^fn void sync();$/;"	f
sys_ioctl	$C2_ROOT/libs/libc/sys_ioctl.c2i	/^module sys_ioctl;$/;"	m
sys_mman	$C2_ROOT/libs/libc/sys_mman.c2i	/^module sys_mman;$/;"	m
sys_sendfile	$C2_ROOT/libs/libc/sys_sendfile.c2i	/^module sys_sendfile;$/;"	m
sys_signalfd	$C2_ROOT/libs/libc/sys_signalfd.c2i	/^module sys_signalfd;$/;"	m
sys_socket	$C2_ROOT/libs/libc/sys_socket.c2i	/^module sys_socket;$/;"	m
sys_stat	$C2_ROOT/libs/libc/sys_stat.c2i	/^module sys_stat;$/;"	m
sys_time	$C2_ROOT/libs/libc/sys_time.c2i	/^module sys_time;$/;"	m
sys_utsname	$C2_ROOT/libs/libc/sys_utsname.c2i	/^module sys_utsname;$/;"	m
sysconf	$C2_ROOT/libs/libc/unistd.c2i	/^fn c_long sysconf(c_int name);$/;"	f
system	$C2_ROOT/libs/libc/stdlib.c2i	/^fn c_int system(const c_char* __command);$/;"	f
t2f	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn void t2f(c_float u, c_float v) @(cname="sgl_t2f");$/;"	f
t2f	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn void t2f(c_float u, c_float v) @(cname="sgl_t2f");$/;"	f
tan	$C2_ROOT/libs/math/math.c2i	/^fn c_double tan(c_double);$/;"	f
tanf	$C2_ROOT/libs/math/math.c2i	/^fn c_float tanf(c_float);$/;"	f
tanh	$C2_ROOT/libs/math/math.c2i	/^fn c_double tanh(c_double);$/;"	f
tanhf	$C2_ROOT/libs/math/math.c2i	/^fn c_float tanhf(c_float);$/;"	f
target2compKind	$C2_ROOT/compiler/compiler.c2	/^fn component.Kind target2compKind(build_target.Kind k) {$/;"	f
target_info	$C2_ROOT/common/target_info.c2	/^module target_info;$/;"	m
tcgetattr	$C2_ROOT/libs/libc/ctermios.c2i	/^fn c_int tcgetattr(c_int fd, Termios* termios_p);$/;"	f
tcsetattr	$C2_ROOT/libs/libc/ctermios.c2i	/^fn c_int tcsetattr(c_int fd, c_int optional_actions, const Termios* termios_p);$/;"	f
tempnam	$C2_ROOT/libs/libc/stdio.c2i	/^fn c_char* tempnam(const c_char* __dir, const c_char* __pfx);$/;"	f
test	$C2_ROOT/ir_examples/arith.c2	/^module test;$/;"	m
test	$C2_ROOT/ir_examples/array.c2	/^module test;$/;"	m
test	$C2_ROOT/ir_examples/bitfield_init.c2	/^module test;$/;"	m
test	$C2_ROOT/ir_examples/builtins.c2	/^module test;$/;"	m
test	$C2_ROOT/ir_examples/calls.c2	/^module test;$/;"	m
test	$C2_ROOT/ir_examples/cond_decl.c2	/^module test;$/;"	m
test	$C2_ROOT/ir_examples/for.c2	/^module test;$/;"	m
test	$C2_ROOT/ir_examples/functions.c2	/^module test;$/;"	m
test	$C2_ROOT/ir_examples/global_arrays.c2	/^module test;$/;"	m
test	$C2_ROOT/ir_examples/global_vars.c2	/^module test;$/;"	m
test	$C2_ROOT/ir_examples/goto.c2	/^module test;$/;"	m
test	$C2_ROOT/ir_examples/hello.c2	/^module test;$/;"	m
test	$C2_ROOT/ir_examples/if_stmt.c2	/^module test;$/;"	m
test	$C2_ROOT/ir_examples/label.c2	/^module test;$/;"	m
test	$C2_ROOT/ir_examples/logic.c2	/^module test;$/;"	m
test	$C2_ROOT/ir_examples/members.c2	/^module test;$/;"	m
test	$C2_ROOT/ir_examples/struct_func.c2	/^module test;$/;"	m
test	$C2_ROOT/ir_examples/struct_init.c2	/^module test;$/;"	m
test	$C2_ROOT/ir_examples/struct_init_anonymous.c2	/^module test;$/;"	m
test	$C2_ROOT/ir_examples/swap.c2	/^module test;$/;"	m
test	$C2_ROOT/ir_examples/types.c2	/^module test;$/;"	m
test	$C2_ROOT/ir_examples/while.c2	/^module test;$/;"	m
test1	$C2_ROOT/ir_examples/bitfield_init.c2	/^fn Iter test1(u32 a, u32 b) {$/;"	f
test1	$C2_ROOT/ir_examples/builtins.c2	/^fn void test1(i32 i) {$/;"	f
test1	$C2_ROOT/ir_examples/calls.c2	/^fn i32 test1(i32 a) {$/;"	f
test1	$C2_ROOT/ir_examples/functions.c2	/^fn void test1() {}$/;"	f
test1	$C2_ROOT/ir_examples/label.c2	/^fn i32 test1(i32 a) {$/;"	f
test2	$C2_ROOT/ir_examples/bitfield_init.c2	/^fn Iter test2() {$/;"	f
test2	$C2_ROOT/ir_examples/functions.c2	/^fn void test2(i32 a, char b, void* c) {$/;"	f
test2	$C2_ROOT/ir_examples/label.c2	/^public fn i32 test2() {$/;"	f
test3	$C2_ROOT/ir_examples/functions.c2	/^fn i32 test3(i16 b) {$/;"	f
test4	$C2_ROOT/ir_examples/functions.c2	/^fn void* test4(u64 a, bool b) {$/;"	f
test5	$C2_ROOT/ir_examples/functions.c2	/^fn Enum test5() {$/;"	f
test6	$C2_ROOT/ir_examples/functions.c2	/^fn Alias test6() {$/;"	f
testFile	$C2_ROOT/tools/tester/test_db.c2	/^public fn void Db.testFile(Db* db) {$/;"	f
test_and2	$C2_ROOT/ir_examples/logic.c2	/^fn void test_and2(i32 a, i32 b) {$/;"	f
test_and2b_0a	$C2_ROOT/ir_examples/logic.c2	/^fn void test_and2b_0a(i32 a) {$/;"	f
test_and2b_1a	$C2_ROOT/ir_examples/logic.c2	/^fn void test_and2b_1a(i32 a) {$/;"	f
test_and2b_a0	$C2_ROOT/ir_examples/logic.c2	/^fn void test_and2b_a0(i32 a) {$/;"	f
test_and2b_a1	$C2_ROOT/ir_examples/logic.c2	/^fn void test_and2b_a1(i32 a) {$/;"	f
test_and3	$C2_ROOT/ir_examples/logic.c2	/^fn void test_and3(bool a, bool b, bool c) {$/;"	f
test_and3_0	$C2_ROOT/ir_examples/logic.c2	/^fn void test_and3_0(bool a, bool b, bool c) {$/;"	f
test_and_or	$C2_ROOT/ir_examples/logic.c2	/^fn void test_and_or(bool a, bool b, bool c) {$/;"	f
test_db	$C2_ROOT/tools/tester/test_db.c2	/^module test_db;$/;"	m
test_if	$C2_ROOT/ir_examples/logic.c2	/^fn void test_if(i32 a) {$/;"	f
test_or2	$C2_ROOT/ir_examples/logic.c2	/^fn void test_or2(bool a, bool b, i32 c) {$/;"	f
test_or2_0	$C2_ROOT/ir_examples/logic.c2	/^fn void test_or2_0(bool a) {$/;"	f
test_or2_1a	$C2_ROOT/ir_examples/logic.c2	/^fn void test_or2_1a(bool a) {$/;"	f
test_or2_1b	$C2_ROOT/ir_examples/logic.c2	/^fn void test_or2_1b(bool a) {$/;"	f
test_or3	$C2_ROOT/ir_examples/logic.c2	/^fn void test_or3(bool a, bool b, bool c) {$/;"	f
test_or_and	$C2_ROOT/ir_examples/logic.c2	/^fn void test_or_and(bool a, bool b, bool c) {$/;"	f
test_tocontainer	$C2_ROOT/ir_examples/builtins.c2	/^fn void test_tocontainer(void* ptr) {$/;"	f
test_utils	$C2_ROOT/tools/tester/test_utils.c2	/^module test_utils;$/;"	m
tester_main	$C2_ROOT/tools/tester/tester.c2	/^module tester_main;$/;"	m
tester_thread_main	$C2_ROOT/tools/tester/tester.c2	/^fn void* tester_thread_main(void* arg) {$/;"	f
texcoordVertexAttrState	$C2_ROOT/libs/sokol/sokol_shape.c2i	/^fn VertexAttrState texcoordVertexAttrState() @(cname="sshape_texcoord_vertex_attr_state");$/;"	f
texcoordVertexAttrState	$C2_ROOT/libs/sokol_/sokol_shape.c2i	/^fn VertexAttrState texcoordVertexAttrState() @(cname="sshape_texcoord_vertex_attr_state");$/;"	f
texture	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn void texture(View tex_view, Sampler smp) @(cname="sgl_texture");$/;"	f
texture	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn void texture(View tex_view, Sampler smp) @(cname="sgl_texture");$/;"	f
tgamma	$C2_ROOT/libs/math/math.c2i	/^fn c_double tgamma(c_double);$/;"	f
tgammaf	$C2_ROOT/libs/math/math.c2i	/^fn c_float tgammaf(c_float);$/;"	f
that	$C2_ROOT/libs/sokol/c/sokol_gfx.h	/^                - the max number of resources of each type that can$/;"	t
that	$C2_ROOT/libs/sokol_/c/sokol_gfx.h	/^                - the max number of resources of each type that can$/;"	t
time	$C2_ROOT/libs/libc/libc_time.c2i	/^fn Time time(Time* tloc);$/;"	f
timing_get_delay	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^fn c_int timing_get_delay(void *data) @(cname="mbedtls_timing_get_delay");$/;"	f
timing_set_delay	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^fn void timing_set_delay( void *data, u32 int_ms, u32 fin_ms ) @(cname="mbedtls_timing_set_delay/;"	f
tmpfile	$C2_ROOT/libs/libc/stdio.c2i	/^fn FILE* tmpfile();$/;"	f
tmpfile64	$C2_ROOT/libs/libc/stdio.c2i	/^fn FILE* tmpfile64(void);$/;"	f
tmpnam_r	$C2_ROOT/libs/libc/stdio.c2i	/^fn c_char* tmpnam_r(c_char* __s);$/;"	f
to	$C2_ROOT/libs/sokol/c/sokol_gfx.h	/^    matching texture and sampler type to be provided upfront for validation$/;"	t
to	$C2_ROOT/libs/sokol_/c/sokol_gfx.h	/^    matching texture and sampler type to be provided upfront for validation$/;"	t
toBool	$C2_ROOT/ast/value.c2	/^fn Value Value.toBool(const Value* v) {$/;"	f
toFloat	$C2_ROOT/ast/value.c2	/^fn f64 Value.toFloat(const Value* v) {$/;"	f
toLower	$C2_ROOT/common/string_utils.c2	/^public fn char* toLower(const char* input, char* output) @(unused) {$/;"	f
toUpper	$C2_ROOT/common/string_utils.c2	/^public fn char* toUpper(const char* input, char* output) @(unused) {$/;"	f
toboolean	$C2_ROOT/libs/lua/lua.c2i	/^fn c_int toboolean(State *L, c_int idx) @(cname="lua_toboolean");$/;"	f
tocfunction	$C2_ROOT/libs/lua/lua.c2i	/^fn CFunction tocfunction(State *L, c_int idx) @(cname="lua_tocfunction");$/;"	f
toggleFullscreen	$C2_ROOT/libs/sokol/sokol_app.c2i	/^fn void toggleFullscreen() @(cname="sapp_toggle_fullscreen");$/;"	f
toggleFullscreen	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^fn void toggleFullscreen() @(cname="sapp_toggle_fullscreen");$/;"	f
tointegerx	$C2_ROOT/libs/lua/lua.c2i	/^fn Integer tointegerx(State *L, c_int idx, c_int *isnum) @(cname="lua_tointegerx");$/;"	f
tokKindToBuiltinKind	$C2_ROOT/parser/c2_parser.c2	/^fn BuiltinKind tokKindToBuiltinKind(token.Kind kind) {$/;"	f
token	$C2_ROOT/parser/token.c2	/^module token;$/;"	m
token_Kind_Amp	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_Amp] = c2_prec_Prec_Bitwise,$/;"	v
token_Kind_Amp	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_Amp] = c2_prec_Prec_Bitwise,$/;"	v
token_Kind_Amp	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_Amp] = c2_prec_Prec_Bitwise,$/;"	v
token_Kind_Amp	$C2_ROOT/output/c2c/cgen/c2_parser.c	/^   [token_Kind_Amp] = c2_prec_Prec_Bitwise,$/;"	v
token_Kind_Amp	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_Amp] = "&",$/;"	v
token_Kind_Amp	$C2_ROOT/output/c2c_trace/cgen/c2_parser.c	/^   [token_Kind_Amp] = c2_prec_Prec_Bitwise,$/;"	v
token_Kind_Amp	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_Amp] = "&",$/;"	v
token_Kind_Amp	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_Amp] = "&",$/;"	v
token_Kind_Amp	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_Amp] = "&",$/;"	v
token_Kind_AmpAmp	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_AmpAmp] = c2_prec_Prec_LogicalAndOr,$/;"	v
token_Kind_AmpAmp	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_AmpAmp] = c2_prec_Prec_LogicalAndOr,$/;"	v
token_Kind_AmpAmp	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_AmpAmp] = c2_prec_Prec_LogicalAndOr,$/;"	v
token_Kind_AmpAmp	$C2_ROOT/output/c2c/cgen/c2_parser.c	/^   [token_Kind_AmpAmp] = c2_prec_Prec_LogicalAndOr,$/;"	v
token_Kind_AmpAmp	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_AmpAmp] = "&&",$/;"	v
token_Kind_AmpAmp	$C2_ROOT/output/c2c_trace/cgen/c2_parser.c	/^   [token_Kind_AmpAmp] = c2_prec_Prec_LogicalAndOr,$/;"	v
token_Kind_AmpAmp	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_AmpAmp] = "&&",$/;"	v
token_Kind_AmpAmp	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_AmpAmp] = "&&",$/;"	v
token_Kind_AmpAmp	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_AmpAmp] = "&&",$/;"	v
token_Kind_AmpEqual	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_AmpEqual] = c2_prec_Prec_Assignment,$/;"	v
token_Kind_AmpEqual	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_AmpEqual] = c2_prec_Prec_Assignment,$/;"	v
token_Kind_AmpEqual	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_AmpEqual] = c2_prec_Prec_Assignment,$/;"	v
token_Kind_AmpEqual	$C2_ROOT/output/c2c/cgen/c2_parser.c	/^   [token_Kind_AmpEqual] = c2_prec_Prec_Assignment,$/;"	v
token_Kind_AmpEqual	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_AmpEqual] = "&=",$/;"	v
token_Kind_AmpEqual	$C2_ROOT/output/c2c_trace/cgen/c2_parser.c	/^   [token_Kind_AmpEqual] = c2_prec_Prec_Assignment,$/;"	v
token_Kind_AmpEqual	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_AmpEqual] = "&=",$/;"	v
token_Kind_AmpEqual	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_AmpEqual] = "&=",$/;"	v
token_Kind_AmpEqual	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_AmpEqual] = "&=",$/;"	v
token_Kind_At	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_At] = "@",$/;"	v
token_Kind_At	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_At] = "@",$/;"	v
token_Kind_At	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_At] = "@",$/;"	v
token_Kind_At	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_At] = "@",$/;"	v
token_Kind_At	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_At] = "@",$/;"	v
token_Kind_At	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_At] = "@",$/;"	v
token_Kind_At	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_At] = "@",$/;"	v
token_Kind_BlockComment	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_BlockComment] = "b-comment",$/;"	v
token_Kind_BlockComment	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_BlockComment] = "b-comment",$/;"	v
token_Kind_BlockComment	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_BlockComment] = "b-comment",$/;"	v
token_Kind_BlockComment	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_BlockComment] = "b-comment",$/;"	v
token_Kind_BlockComment	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_BlockComment] = "b-comment",$/;"	v
token_Kind_BlockComment	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_BlockComment] = "b-comment",$/;"	v
token_Kind_BlockComment	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_BlockComment] = "b-comment",$/;"	v
token_Kind_Caret	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_Caret] = c2_prec_Prec_Bitwise,$/;"	v
token_Kind_Caret	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_Caret] = c2_prec_Prec_Bitwise,$/;"	v
token_Kind_Caret	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_Caret] = c2_prec_Prec_Bitwise,$/;"	v
token_Kind_Caret	$C2_ROOT/output/c2c/cgen/c2_parser.c	/^   [token_Kind_Caret] = c2_prec_Prec_Bitwise,$/;"	v
token_Kind_Caret	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_Caret] = "^",$/;"	v
token_Kind_Caret	$C2_ROOT/output/c2c_trace/cgen/c2_parser.c	/^   [token_Kind_Caret] = c2_prec_Prec_Bitwise,$/;"	v
token_Kind_Caret	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_Caret] = "^",$/;"	v
token_Kind_Caret	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_Caret] = "^",$/;"	v
token_Kind_Caret	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_Caret] = "^",$/;"	v
token_Kind_CaretEqual	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_CaretEqual] = c2_prec_Prec_Assignment,$/;"	v
token_Kind_CaretEqual	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_CaretEqual] = c2_prec_Prec_Assignment,$/;"	v
token_Kind_CaretEqual	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_CaretEqual] = c2_prec_Prec_Assignment,$/;"	v
token_Kind_CaretEqual	$C2_ROOT/output/c2c/cgen/c2_parser.c	/^   [token_Kind_CaretEqual] = c2_prec_Prec_Assignment,$/;"	v
token_Kind_CaretEqual	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_CaretEqual] = "^=",$/;"	v
token_Kind_CaretEqual	$C2_ROOT/output/c2c_trace/cgen/c2_parser.c	/^   [token_Kind_CaretEqual] = c2_prec_Prec_Assignment,$/;"	v
token_Kind_CaretEqual	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_CaretEqual] = "^=",$/;"	v
token_Kind_CaretEqual	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_CaretEqual] = "^=",$/;"	v
token_Kind_CaretEqual	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_CaretEqual] = "^=",$/;"	v
token_Kind_CharLiteral	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_CharLiteral] = 4,$/;"	v
token_Kind_CharLiteral	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_CharLiteral] = 4,$/;"	v
token_Kind_CharLiteral	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_CharLiteral] = 4,$/;"	v
token_Kind_CharLiteral	$C2_ROOT/output/c2c/cgen/c2_parser.c	/^   [token_Kind_CharLiteral] = 4,$/;"	v
token_Kind_CharLiteral	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_CharLiteral] = "character",$/;"	v
token_Kind_CharLiteral	$C2_ROOT/output/c2c_trace/cgen/c2_parser.c	/^   [token_Kind_CharLiteral] = 4,$/;"	v
token_Kind_CharLiteral	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_CharLiteral] = "character",$/;"	v
token_Kind_CharLiteral	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_CharLiteral] = "character",$/;"	v
token_Kind_CharLiteral	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_CharLiteral] = "character",$/;"	v
token_Kind_Colon	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_Colon] = ":",$/;"	v
token_Kind_Colon	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_Colon] = ":",$/;"	v
token_Kind_Colon	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_Colon] = ":",$/;"	v
token_Kind_Colon	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_Colon] = ":",$/;"	v
token_Kind_Colon	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_Colon] = ":",$/;"	v
token_Kind_Colon	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_Colon] = ":",$/;"	v
token_Kind_Colon	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_Colon] = ":",$/;"	v
token_Kind_Comma	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_Comma] = c2_prec_Prec_Comma,$/;"	v
token_Kind_Comma	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_Comma] = c2_prec_Prec_Comma,$/;"	v
token_Kind_Comma	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_Comma] = c2_prec_Prec_Comma,$/;"	v
token_Kind_Comma	$C2_ROOT/output/c2c/cgen/c2_parser.c	/^   [token_Kind_Comma] = c2_prec_Prec_Comma,$/;"	v
token_Kind_Comma	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_Comma] = ",",$/;"	v
token_Kind_Comma	$C2_ROOT/output/c2c_trace/cgen/c2_parser.c	/^   [token_Kind_Comma] = c2_prec_Prec_Comma,$/;"	v
token_Kind_Comma	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_Comma] = ",",$/;"	v
token_Kind_Comma	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_Comma] = ",",$/;"	v
token_Kind_Comma	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_Comma] = ",",$/;"	v
token_Kind_Dot	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_Dot] = ".",$/;"	v
token_Kind_Dot	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_Dot] = ".",$/;"	v
token_Kind_Dot	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_Dot] = ".",$/;"	v
token_Kind_Dot	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_Dot] = ".",$/;"	v
token_Kind_Dot	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_Dot] = ".",$/;"	v
token_Kind_Dot	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_Dot] = ".",$/;"	v
token_Kind_Dot	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_Dot] = ".",$/;"	v
token_Kind_Ellipsis	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_Ellipsis] = "...",$/;"	v
token_Kind_Ellipsis	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_Ellipsis] = "...",$/;"	v
token_Kind_Ellipsis	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_Ellipsis] = "...",$/;"	v
token_Kind_Ellipsis	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_Ellipsis] = "...",$/;"	v
token_Kind_Ellipsis	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_Ellipsis] = "...",$/;"	v
token_Kind_Ellipsis	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_Ellipsis] = "...",$/;"	v
token_Kind_Ellipsis	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_Ellipsis] = "...",$/;"	v
token_Kind_Eof	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_Eof] = "eof",$/;"	v
token_Kind_Eof	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_Eof] = "eof",$/;"	v
token_Kind_Eof	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_Eof] = "eof",$/;"	v
token_Kind_Eof	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_Eof] = "eof",$/;"	v
token_Kind_Eof	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_Eof] = "eof",$/;"	v
token_Kind_Eof	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_Eof] = "eof",$/;"	v
token_Kind_Eof	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_Eof] = "eof",$/;"	v
token_Kind_Equal	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_Equal] = c2_prec_Prec_Assignment,$/;"	v
token_Kind_Equal	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_Equal] = c2_prec_Prec_Assignment,$/;"	v
token_Kind_Equal	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_Equal] = c2_prec_Prec_Assignment,$/;"	v
token_Kind_Equal	$C2_ROOT/output/c2c/cgen/c2_parser.c	/^   [token_Kind_Equal] = c2_prec_Prec_Assignment,$/;"	v
token_Kind_Equal	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_Equal] = "=",$/;"	v
token_Kind_Equal	$C2_ROOT/output/c2c_trace/cgen/c2_parser.c	/^   [token_Kind_Equal] = c2_prec_Prec_Assignment,$/;"	v
token_Kind_Equal	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_Equal] = "=",$/;"	v
token_Kind_Equal	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_Equal] = "=",$/;"	v
token_Kind_Equal	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_Equal] = "=",$/;"	v
token_Kind_EqualEqual	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_EqualEqual] = c2_prec_Prec_Relational,$/;"	v
token_Kind_EqualEqual	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_EqualEqual] = c2_prec_Prec_Relational,$/;"	v
token_Kind_EqualEqual	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_EqualEqual] = c2_prec_Prec_Relational,$/;"	v
token_Kind_EqualEqual	$C2_ROOT/output/c2c/cgen/c2_parser.c	/^   [token_Kind_EqualEqual] = c2_prec_Prec_Relational,$/;"	v
token_Kind_EqualEqual	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_EqualEqual] = "==",$/;"	v
token_Kind_EqualEqual	$C2_ROOT/output/c2c_trace/cgen/c2_parser.c	/^   [token_Kind_EqualEqual] = c2_prec_Prec_Relational,$/;"	v
token_Kind_EqualEqual	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_EqualEqual] = "==",$/;"	v
token_Kind_EqualEqual	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_EqualEqual] = "==",$/;"	v
token_Kind_EqualEqual	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_EqualEqual] = "==",$/;"	v
token_Kind_Error	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_Error] = "error"$/;"	v
token_Kind_Error	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_Error] = "error"$/;"	v
token_Kind_Error	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_Error] = "error"$/;"	v
token_Kind_Error	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_Error] = "error"$/;"	v
token_Kind_Error	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_Error] = "error"$/;"	v
token_Kind_Error	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_Error] = "error"$/;"	v
token_Kind_Error	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_Error] = "error"$/;"	v
token_Kind_Exclaim	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_Exclaim] = 7,$/;"	v
token_Kind_Exclaim	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_Exclaim] = 7,$/;"	v
token_Kind_Exclaim	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_Exclaim] = 7,$/;"	v
token_Kind_Exclaim	$C2_ROOT/output/c2c/cgen/c2_parser.c	/^   [token_Kind_Exclaim] = 7,$/;"	v
token_Kind_Exclaim	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_Exclaim] = "!",$/;"	v
token_Kind_Exclaim	$C2_ROOT/output/c2c_trace/cgen/c2_parser.c	/^   [token_Kind_Exclaim] = 7,$/;"	v
token_Kind_Exclaim	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_Exclaim] = "!",$/;"	v
token_Kind_Exclaim	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_Exclaim] = "!",$/;"	v
token_Kind_Exclaim	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_Exclaim] = "!",$/;"	v
token_Kind_ExclaimEqual	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_ExclaimEqual] = c2_prec_Prec_Relational,$/;"	v
token_Kind_ExclaimEqual	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_ExclaimEqual] = c2_prec_Prec_Relational,$/;"	v
token_Kind_ExclaimEqual	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_ExclaimEqual] = c2_prec_Prec_Relational,$/;"	v
token_Kind_ExclaimEqual	$C2_ROOT/output/c2c/cgen/c2_parser.c	/^   [token_Kind_ExclaimEqual] = c2_prec_Prec_Relational,$/;"	v
token_Kind_ExclaimEqual	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_ExclaimEqual] = "!=",$/;"	v
token_Kind_ExclaimEqual	$C2_ROOT/output/c2c_trace/cgen/c2_parser.c	/^   [token_Kind_ExclaimEqual] = c2_prec_Prec_Relational,$/;"	v
token_Kind_ExclaimEqual	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_ExclaimEqual] = "!=",$/;"	v
token_Kind_ExclaimEqual	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_ExclaimEqual] = "!=",$/;"	v
token_Kind_ExclaimEqual	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_ExclaimEqual] = "!=",$/;"	v
token_Kind_Feat_elif	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_Feat_elif] = "#elif",$/;"	v
token_Kind_Feat_elif	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_Feat_elif] = "#elif",$/;"	v
token_Kind_Feat_elif	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_Feat_elif] = "#elif",$/;"	v
token_Kind_Feat_elif	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_Feat_elif] = "#elif",$/;"	v
token_Kind_Feat_elif	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_Feat_elif] = "#elif",$/;"	v
token_Kind_Feat_elif	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_Feat_elif] = "#elif",$/;"	v
token_Kind_Feat_elif	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_Feat_elif] = "#elif",$/;"	v
token_Kind_Feat_else	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_Feat_else] = "#else",$/;"	v
token_Kind_Feat_else	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_Feat_else] = "#else",$/;"	v
token_Kind_Feat_else	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_Feat_else] = "#else",$/;"	v
token_Kind_Feat_else	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_Feat_else] = "#else",$/;"	v
token_Kind_Feat_else	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_Feat_else] = "#else",$/;"	v
token_Kind_Feat_else	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_Feat_else] = "#else",$/;"	v
token_Kind_Feat_else	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_Feat_else] = "#else",$/;"	v
token_Kind_Feat_endif	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_Feat_endif] = "#endif",$/;"	v
token_Kind_Feat_endif	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_Feat_endif] = "#endif",$/;"	v
token_Kind_Feat_endif	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_Feat_endif] = "#endif",$/;"	v
token_Kind_Feat_endif	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_Feat_endif] = "#endif",$/;"	v
token_Kind_Feat_endif	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_Feat_endif] = "#endif",$/;"	v
token_Kind_Feat_endif	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_Feat_endif] = "#endif",$/;"	v
token_Kind_Feat_endif	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_Feat_endif] = "#endif",$/;"	v
token_Kind_Feat_error	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_Feat_error] = "#error",$/;"	v
token_Kind_Feat_error	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_Feat_error] = "#error",$/;"	v
token_Kind_Feat_error	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_Feat_error] = "#error",$/;"	v
token_Kind_Feat_error	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_Feat_error] = "#error",$/;"	v
token_Kind_Feat_error	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_Feat_error] = "#error",$/;"	v
token_Kind_Feat_error	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_Feat_error] = "#error",$/;"	v
token_Kind_Feat_error	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_Feat_error] = "#error",$/;"	v
token_Kind_Feat_if	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_Feat_if] = "#if",$/;"	v
token_Kind_Feat_if	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_Feat_if] = "#if",$/;"	v
token_Kind_Feat_if	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_Feat_if] = "#if",$/;"	v
token_Kind_Feat_if	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_Feat_if] = "#if",$/;"	v
token_Kind_Feat_if	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_Feat_if] = "#if",$/;"	v
token_Kind_Feat_if	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_Feat_if] = "#if",$/;"	v
token_Kind_Feat_if	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_Feat_if] = "#if",$/;"	v
token_Kind_Feat_ifdef	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_Feat_ifdef] = "#ifdef",$/;"	v
token_Kind_Feat_ifdef	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_Feat_ifdef] = "#ifdef",$/;"	v
token_Kind_Feat_ifdef	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_Feat_ifdef] = "#ifdef",$/;"	v
token_Kind_Feat_ifdef	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_Feat_ifdef] = "#ifdef",$/;"	v
token_Kind_Feat_ifdef	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_Feat_ifdef] = "#ifdef",$/;"	v
token_Kind_Feat_ifdef	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_Feat_ifdef] = "#ifdef",$/;"	v
token_Kind_Feat_ifdef	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_Feat_ifdef] = "#ifdef",$/;"	v
token_Kind_Feat_ifndef	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_Feat_ifndef] = "#ifndef",$/;"	v
token_Kind_Feat_ifndef	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_Feat_ifndef] = "#ifndef",$/;"	v
token_Kind_Feat_ifndef	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_Feat_ifndef] = "#ifndef",$/;"	v
token_Kind_Feat_ifndef	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_Feat_ifndef] = "#ifndef",$/;"	v
token_Kind_Feat_ifndef	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_Feat_ifndef] = "#ifndef",$/;"	v
token_Kind_Feat_ifndef	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_Feat_ifndef] = "#ifndef",$/;"	v
token_Kind_Feat_ifndef	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_Feat_ifndef] = "#ifndef",$/;"	v
token_Kind_Feat_warning	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_Feat_warning] = "#warning",$/;"	v
token_Kind_Feat_warning	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_Feat_warning] = "#warning",$/;"	v
token_Kind_Feat_warning	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_Feat_warning] = "#warning",$/;"	v
token_Kind_Feat_warning	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_Feat_warning] = "#warning",$/;"	v
token_Kind_Feat_warning	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_Feat_warning] = "#warning",$/;"	v
token_Kind_Feat_warning	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_Feat_warning] = "#warning",$/;"	v
token_Kind_Feat_warning	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_Feat_warning] = "#warning",$/;"	v
token_Kind_FloatLiteral	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_FloatLiteral] = 3,$/;"	v
token_Kind_FloatLiteral	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_FloatLiteral] = 3,$/;"	v
token_Kind_FloatLiteral	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_FloatLiteral] = 3,$/;"	v
token_Kind_FloatLiteral	$C2_ROOT/output/c2c/cgen/c2_parser.c	/^   [token_Kind_FloatLiteral] = 3,$/;"	v
token_Kind_FloatLiteral	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_FloatLiteral] = "float",$/;"	v
token_Kind_FloatLiteral	$C2_ROOT/output/c2c_trace/cgen/c2_parser.c	/^   [token_Kind_FloatLiteral] = 3,$/;"	v
token_Kind_FloatLiteral	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_FloatLiteral] = "float",$/;"	v
token_Kind_FloatLiteral	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_FloatLiteral] = "float",$/;"	v
token_Kind_FloatLiteral	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_FloatLiteral] = "float",$/;"	v
token_Kind_Greater	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_Greater] = c2_prec_Prec_Relational,$/;"	v
token_Kind_Greater	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_Greater] = c2_prec_Prec_Relational,$/;"	v
token_Kind_Greater	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_Greater] = c2_prec_Prec_Relational,$/;"	v
token_Kind_Greater	$C2_ROOT/output/c2c/cgen/c2_parser.c	/^   [token_Kind_Greater] = c2_prec_Prec_Relational,$/;"	v
token_Kind_Greater	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_Greater] = ">",$/;"	v
token_Kind_Greater	$C2_ROOT/output/c2c_trace/cgen/c2_parser.c	/^   [token_Kind_Greater] = c2_prec_Prec_Relational,$/;"	v
token_Kind_Greater	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_Greater] = ">",$/;"	v
token_Kind_Greater	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_Greater] = ">",$/;"	v
token_Kind_Greater	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_Greater] = ">",$/;"	v
token_Kind_GreaterEqual	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_GreaterEqual] = c2_prec_Prec_Relational,$/;"	v
token_Kind_GreaterEqual	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_GreaterEqual] = c2_prec_Prec_Relational,$/;"	v
token_Kind_GreaterEqual	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_GreaterEqual] = c2_prec_Prec_Relational,$/;"	v
token_Kind_GreaterEqual	$C2_ROOT/output/c2c/cgen/c2_parser.c	/^   [token_Kind_GreaterEqual] = c2_prec_Prec_Relational,$/;"	v
token_Kind_GreaterEqual	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_GreaterEqual] = ">=",$/;"	v
token_Kind_GreaterEqual	$C2_ROOT/output/c2c_trace/cgen/c2_parser.c	/^   [token_Kind_GreaterEqual] = c2_prec_Prec_Relational,$/;"	v
token_Kind_GreaterEqual	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_GreaterEqual] = ">=",$/;"	v
token_Kind_GreaterEqual	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_GreaterEqual] = ">=",$/;"	v
token_Kind_GreaterEqual	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_GreaterEqual] = ">=",$/;"	v
token_Kind_GreaterGreater	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_GreaterGreater] = c2_prec_Prec_Shift,$/;"	v
token_Kind_GreaterGreater	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_GreaterGreater] = c2_prec_Prec_Shift,$/;"	v
token_Kind_GreaterGreater	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_GreaterGreater] = c2_prec_Prec_Shift,$/;"	v
token_Kind_GreaterGreater	$C2_ROOT/output/c2c/cgen/c2_parser.c	/^   [token_Kind_GreaterGreater] = c2_prec_Prec_Shift,$/;"	v
token_Kind_GreaterGreater	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_GreaterGreater] = ">>",$/;"	v
token_Kind_GreaterGreater	$C2_ROOT/output/c2c_trace/cgen/c2_parser.c	/^   [token_Kind_GreaterGreater] = c2_prec_Prec_Shift,$/;"	v
token_Kind_GreaterGreater	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_GreaterGreater] = ">>",$/;"	v
token_Kind_GreaterGreater	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_GreaterGreater] = ">>",$/;"	v
token_Kind_GreaterGreater	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_GreaterGreater] = ">>",$/;"	v
token_Kind_GreaterGreaterEqual	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_GreaterGreaterEqual] = c2_prec_Prec_Assignment,$/;"	v
token_Kind_GreaterGreaterEqual	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_GreaterGreaterEqual] = c2_prec_Prec_Assignment,$/;"	v
token_Kind_GreaterGreaterEqual	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_GreaterGreaterEqual] = c2_prec_Prec_Assignment,$/;"	v
token_Kind_GreaterGreaterEqual	$C2_ROOT/output/c2c/cgen/c2_parser.c	/^   [token_Kind_GreaterGreaterEqual] = c2_prec_Prec_Assignment,$/;"	v
token_Kind_GreaterGreaterEqual	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_GreaterGreaterEqual] = ">>=",$/;"	v
token_Kind_GreaterGreaterEqual	$C2_ROOT/output/c2c_trace/cgen/c2_parser.c	/^   [token_Kind_GreaterGreaterEqual] = c2_prec_Prec_Assignment,$/;"	v
token_Kind_GreaterGreaterEqual	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_GreaterGreaterEqual] = ">>=",$/;"	v
token_Kind_GreaterGreaterEqual	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_GreaterGreaterEqual] = ">>=",$/;"	v
token_Kind_GreaterGreaterEqual	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_GreaterGreaterEqual] = ">>=",$/;"	v
token_Kind_Identifier	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_Identifier] = 1,$/;"	v
token_Kind_Identifier	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_Identifier] = 1,$/;"	v
token_Kind_Identifier	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_Identifier] = 1,$/;"	v
token_Kind_Identifier	$C2_ROOT/output/c2c/cgen/c2_parser.c	/^   [token_Kind_Identifier] = 1,$/;"	v
token_Kind_Identifier	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_Identifier] = "identifier",$/;"	v
token_Kind_Identifier	$C2_ROOT/output/c2c_trace/cgen/c2_parser.c	/^   [token_Kind_Identifier] = 1,$/;"	v
token_Kind_Identifier	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_Identifier] = "identifier",$/;"	v
token_Kind_Identifier	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_Identifier] = "identifier",$/;"	v
token_Kind_Identifier	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_Identifier] = "identifier",$/;"	v
token_Kind_IntegerLiteral	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_IntegerLiteral] = 2,$/;"	v
token_Kind_IntegerLiteral	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_IntegerLiteral] = 2,$/;"	v
token_Kind_IntegerLiteral	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_IntegerLiteral] = 2,$/;"	v
token_Kind_IntegerLiteral	$C2_ROOT/output/c2c/cgen/c2_parser.c	/^   [token_Kind_IntegerLiteral] = 2,$/;"	v
token_Kind_IntegerLiteral	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_IntegerLiteral] = "integer",$/;"	v
token_Kind_IntegerLiteral	$C2_ROOT/output/c2c_trace/cgen/c2_parser.c	/^   [token_Kind_IntegerLiteral] = 2,$/;"	v
token_Kind_IntegerLiteral	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_IntegerLiteral] = "integer",$/;"	v
token_Kind_IntegerLiteral	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_IntegerLiteral] = "integer",$/;"	v
token_Kind_IntegerLiteral	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_IntegerLiteral] = "integer",$/;"	v
token_Kind_Invalid	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_Invalid] = "invalid",$/;"	v
token_Kind_Invalid	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_Invalid] = "invalid",$/;"	v
token_Kind_Invalid	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_Invalid] = "invalid",$/;"	v
token_Kind_Invalid	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_Invalid] = "invalid",$/;"	v
token_Kind_Invalid	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_Invalid] = "invalid",$/;"	v
token_Kind_Invalid	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_Invalid] = "invalid",$/;"	v
token_Kind_Invalid	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_Invalid] = "invalid",$/;"	v
token_Kind_KW_as	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_KW_as] = "as",$/;"	v
token_Kind_KW_as	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_KW_as] = "as",$/;"	v
token_Kind_KW_as	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_KW_as] = "as",$/;"	v
token_Kind_KW_as	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_KW_as] = "as",$/;"	v
token_Kind_KW_as	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_KW_as] = "as",$/;"	v
token_Kind_KW_as	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_KW_as] = "as",$/;"	v
token_Kind_KW_as	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_KW_as] = "as",$/;"	v
token_Kind_KW_asm	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_KW_asm] = "asm",$/;"	v
token_Kind_KW_asm	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_KW_asm] = "asm",$/;"	v
token_Kind_KW_asm	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_KW_asm] = "asm",$/;"	v
token_Kind_KW_asm	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_KW_asm] = "asm",$/;"	v
token_Kind_KW_asm	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_KW_asm] = "asm",$/;"	v
token_Kind_KW_asm	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_KW_asm] = "asm",$/;"	v
token_Kind_KW_asm	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_KW_asm] = "asm",$/;"	v
token_Kind_KW_assert	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_KW_assert] = "assert",$/;"	v
token_Kind_KW_assert	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_KW_assert] = "assert",$/;"	v
token_Kind_KW_assert	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_KW_assert] = "assert",$/;"	v
token_Kind_KW_assert	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_KW_assert] = "assert",$/;"	v
token_Kind_KW_assert	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_KW_assert] = "assert",$/;"	v
token_Kind_KW_assert	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_KW_assert] = "assert",$/;"	v
token_Kind_KW_assert	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_KW_assert] = "assert",$/;"	v
token_Kind_KW_bool	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_KW_bool] = 16,$/;"	v
token_Kind_KW_bool	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_KW_bool] = 16,$/;"	v
token_Kind_KW_bool	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_KW_bool] = 16,$/;"	v
token_Kind_KW_bool	$C2_ROOT/output/c2c/cgen/c2_parser.c	/^   [token_Kind_KW_bool] = 16,$/;"	v
token_Kind_KW_bool	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_KW_bool] = "bool",$/;"	v
token_Kind_KW_bool	$C2_ROOT/output/c2c_trace/cgen/c2_parser.c	/^   [token_Kind_KW_bool] = 16,$/;"	v
token_Kind_KW_bool	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_KW_bool] = "bool",$/;"	v
token_Kind_KW_bool	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_KW_bool] = "bool",$/;"	v
token_Kind_KW_bool	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_KW_bool] = "bool",$/;"	v
token_Kind_KW_break	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_KW_break] = "break",$/;"	v
token_Kind_KW_break	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_KW_break] = "break",$/;"	v
token_Kind_KW_break	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_KW_break] = "break",$/;"	v
token_Kind_KW_break	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_KW_break] = "break",$/;"	v
token_Kind_KW_break	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_KW_break] = "break",$/;"	v
token_Kind_KW_break	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_KW_break] = "break",$/;"	v
token_Kind_KW_break	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_KW_break] = "break",$/;"	v
token_Kind_KW_case	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_KW_case] = "case",$/;"	v
token_Kind_KW_case	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_KW_case] = "case",$/;"	v
token_Kind_KW_case	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_KW_case] = "case",$/;"	v
token_Kind_KW_case	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_KW_case] = "case",$/;"	v
token_Kind_KW_case	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_KW_case] = "case",$/;"	v
token_Kind_KW_case	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_KW_case] = "case",$/;"	v
token_Kind_KW_case	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_KW_case] = "case",$/;"	v
token_Kind_KW_cast	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_KW_cast] = 8,$/;"	v
token_Kind_KW_cast	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_KW_cast] = 8,$/;"	v
token_Kind_KW_cast	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_KW_cast] = 8,$/;"	v
token_Kind_KW_cast	$C2_ROOT/output/c2c/cgen/c2_parser.c	/^   [token_Kind_KW_cast] = 8,$/;"	v
token_Kind_KW_cast	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_KW_cast] = "cast",$/;"	v
token_Kind_KW_cast	$C2_ROOT/output/c2c_trace/cgen/c2_parser.c	/^   [token_Kind_KW_cast] = 8,$/;"	v
token_Kind_KW_cast	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_KW_cast] = "cast",$/;"	v
token_Kind_KW_cast	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_KW_cast] = "cast",$/;"	v
token_Kind_KW_cast	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_KW_cast] = "cast",$/;"	v
token_Kind_KW_char	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_KW_char] = 16,$/;"	v
token_Kind_KW_char	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_KW_char] = 16,$/;"	v
token_Kind_KW_char	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_KW_char] = 16,$/;"	v
token_Kind_KW_char	$C2_ROOT/output/c2c/cgen/c2_parser.c	/^   [token_Kind_KW_char] = 16,$/;"	v
token_Kind_KW_char	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_KW_char] = "char",$/;"	v
token_Kind_KW_char	$C2_ROOT/output/c2c_trace/cgen/c2_parser.c	/^   [token_Kind_KW_char] = 16,$/;"	v
token_Kind_KW_char	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_KW_char] = "char",$/;"	v
token_Kind_KW_char	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_KW_char] = "char",$/;"	v
token_Kind_KW_char	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_KW_char] = "char",$/;"	v
token_Kind_KW_const	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_KW_const] = "const",$/;"	v
token_Kind_KW_const	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_KW_const] = "const",$/;"	v
token_Kind_KW_const	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_KW_const] = "const",$/;"	v
token_Kind_KW_const	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_KW_const] = "const",$/;"	v
token_Kind_KW_const	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_KW_const] = "const",$/;"	v
token_Kind_KW_const	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_KW_const] = "const",$/;"	v
token_Kind_KW_const	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_KW_const] = "const",$/;"	v
token_Kind_KW_continue	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_KW_continue] = "continue",$/;"	v
token_Kind_KW_continue	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_KW_continue] = "continue",$/;"	v
token_Kind_KW_continue	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_KW_continue] = "continue",$/;"	v
token_Kind_KW_continue	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_KW_continue] = "continue",$/;"	v
token_Kind_KW_continue	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_KW_continue] = "continue",$/;"	v
token_Kind_KW_continue	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_KW_continue] = "continue",$/;"	v
token_Kind_KW_continue	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_KW_continue] = "continue",$/;"	v
token_Kind_KW_default	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_KW_default] = "default",$/;"	v
token_Kind_KW_default	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_KW_default] = "default",$/;"	v
token_Kind_KW_default	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_KW_default] = "default",$/;"	v
token_Kind_KW_default	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_KW_default] = "default",$/;"	v
token_Kind_KW_default	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_KW_default] = "default",$/;"	v
token_Kind_KW_default	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_KW_default] = "default",$/;"	v
token_Kind_KW_default	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_KW_default] = "default",$/;"	v
token_Kind_KW_elemsof	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_KW_elemsof] = 9,$/;"	v
token_Kind_KW_elemsof	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_KW_elemsof] = 9,$/;"	v
token_Kind_KW_elemsof	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_KW_elemsof] = 9,$/;"	v
token_Kind_KW_elemsof	$C2_ROOT/output/c2c/cgen/c2_parser.c	/^   [token_Kind_KW_elemsof] = 9,$/;"	v
token_Kind_KW_elemsof	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_KW_elemsof] = "elemsof",$/;"	v
token_Kind_KW_elemsof	$C2_ROOT/output/c2c_trace/cgen/c2_parser.c	/^   [token_Kind_KW_elemsof] = 9,$/;"	v
token_Kind_KW_elemsof	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_KW_elemsof] = "elemsof",$/;"	v
token_Kind_KW_elemsof	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_KW_elemsof] = "elemsof",$/;"	v
token_Kind_KW_elemsof	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_KW_elemsof] = "elemsof",$/;"	v
token_Kind_KW_else	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_KW_else] = "else",$/;"	v
token_Kind_KW_else	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_KW_else] = "else",$/;"	v
token_Kind_KW_else	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_KW_else] = "else",$/;"	v
token_Kind_KW_else	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_KW_else] = "else",$/;"	v
token_Kind_KW_else	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_KW_else] = "else",$/;"	v
token_Kind_KW_else	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_KW_else] = "else",$/;"	v
token_Kind_KW_else	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_KW_else] = "else",$/;"	v
token_Kind_KW_enum	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_KW_enum] = "enum",$/;"	v
token_Kind_KW_enum	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_KW_enum] = "enum",$/;"	v
token_Kind_KW_enum	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_KW_enum] = "enum",$/;"	v
token_Kind_KW_enum	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_KW_enum] = "enum",$/;"	v
token_Kind_KW_enum	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_KW_enum] = "enum",$/;"	v
token_Kind_KW_enum	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_KW_enum] = "enum",$/;"	v
token_Kind_KW_enum	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_KW_enum] = "enum",$/;"	v
token_Kind_KW_enum_max	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_KW_enum_max] = 10,$/;"	v
token_Kind_KW_enum_max	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_KW_enum_max] = 10,$/;"	v
token_Kind_KW_enum_max	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_KW_enum_max] = 10,$/;"	v
token_Kind_KW_enum_max	$C2_ROOT/output/c2c/cgen/c2_parser.c	/^   [token_Kind_KW_enum_max] = 10,$/;"	v
token_Kind_KW_enum_max	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_KW_enum_max] = "enum_max",$/;"	v
token_Kind_KW_enum_max	$C2_ROOT/output/c2c_trace/cgen/c2_parser.c	/^   [token_Kind_KW_enum_max] = 10,$/;"	v
token_Kind_KW_enum_max	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_KW_enum_max] = "enum_max",$/;"	v
token_Kind_KW_enum_max	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_KW_enum_max] = "enum_max",$/;"	v
token_Kind_KW_enum_max	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_KW_enum_max] = "enum_max",$/;"	v
token_Kind_KW_enum_min	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_KW_enum_min] = 10,$/;"	v
token_Kind_KW_enum_min	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_KW_enum_min] = 10,$/;"	v
token_Kind_KW_enum_min	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_KW_enum_min] = 10,$/;"	v
token_Kind_KW_enum_min	$C2_ROOT/output/c2c/cgen/c2_parser.c	/^   [token_Kind_KW_enum_min] = 10,$/;"	v
token_Kind_KW_enum_min	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_KW_enum_min] = "enum_min",$/;"	v
token_Kind_KW_enum_min	$C2_ROOT/output/c2c_trace/cgen/c2_parser.c	/^   [token_Kind_KW_enum_min] = 10,$/;"	v
token_Kind_KW_enum_min	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_KW_enum_min] = "enum_min",$/;"	v
token_Kind_KW_enum_min	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_KW_enum_min] = "enum_min",$/;"	v
token_Kind_KW_enum_min	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_KW_enum_min] = "enum_min",$/;"	v
token_Kind_KW_f32	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_KW_f32] = 16,$/;"	v
token_Kind_KW_f32	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_KW_f32] = 16,$/;"	v
token_Kind_KW_f32	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_KW_f32] = 16,$/;"	v
token_Kind_KW_f32	$C2_ROOT/output/c2c/cgen/c2_parser.c	/^   [token_Kind_KW_f32] = 16,$/;"	v
token_Kind_KW_f32	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_KW_f32] = "f32",$/;"	v
token_Kind_KW_f32	$C2_ROOT/output/c2c_trace/cgen/c2_parser.c	/^   [token_Kind_KW_f32] = 16,$/;"	v
token_Kind_KW_f32	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_KW_f32] = "f32",$/;"	v
token_Kind_KW_f32	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_KW_f32] = "f32",$/;"	v
token_Kind_KW_f32	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_KW_f32] = "f32",$/;"	v
token_Kind_KW_f64	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_KW_f64] = 16$/;"	v
token_Kind_KW_f64	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_KW_f64] = 16$/;"	v
token_Kind_KW_f64	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_KW_f64] = 16$/;"	v
token_Kind_KW_f64	$C2_ROOT/output/c2c/cgen/c2_parser.c	/^   [token_Kind_KW_f64] = 16$/;"	v
token_Kind_KW_f64	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_KW_f64] = "f64",$/;"	v
token_Kind_KW_f64	$C2_ROOT/output/c2c_trace/cgen/c2_parser.c	/^   [token_Kind_KW_f64] = 16$/;"	v
token_Kind_KW_f64	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_KW_f64] = "f64",$/;"	v
token_Kind_KW_f64	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_KW_f64] = "f64",$/;"	v
token_Kind_KW_f64	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_KW_f64] = "f64",$/;"	v
token_Kind_KW_fallthrough	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_KW_fallthrough] = "fallthrough",$/;"	v
token_Kind_KW_fallthrough	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_KW_fallthrough] = "fallthrough",$/;"	v
token_Kind_KW_fallthrough	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_KW_fallthrough] = "fallthrough",$/;"	v
token_Kind_KW_fallthrough	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_KW_fallthrough] = "fallthrough",$/;"	v
token_Kind_KW_fallthrough	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_KW_fallthrough] = "fallthrough",$/;"	v
token_Kind_KW_fallthrough	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_KW_fallthrough] = "fallthrough",$/;"	v
token_Kind_KW_fallthrough	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_KW_fallthrough] = "fallthrough",$/;"	v
token_Kind_KW_false	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_KW_false] = 11,$/;"	v
token_Kind_KW_false	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_KW_false] = 11,$/;"	v
token_Kind_KW_false	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_KW_false] = 11,$/;"	v
token_Kind_KW_false	$C2_ROOT/output/c2c/cgen/c2_parser.c	/^   [token_Kind_KW_false] = 11,$/;"	v
token_Kind_KW_false	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_KW_false] = "false",$/;"	v
token_Kind_KW_false	$C2_ROOT/output/c2c_trace/cgen/c2_parser.c	/^   [token_Kind_KW_false] = 11,$/;"	v
token_Kind_KW_false	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_KW_false] = "false",$/;"	v
token_Kind_KW_false	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_KW_false] = "false",$/;"	v
token_Kind_KW_false	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_KW_false] = "false",$/;"	v
token_Kind_KW_fn	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_KW_fn] = "fn",$/;"	v
token_Kind_KW_fn	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_KW_fn] = "fn",$/;"	v
token_Kind_KW_fn	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_KW_fn] = "fn",$/;"	v
token_Kind_KW_fn	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_KW_fn] = "fn",$/;"	v
token_Kind_KW_fn	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_KW_fn] = "fn",$/;"	v
token_Kind_KW_fn	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_KW_fn] = "fn",$/;"	v
token_Kind_KW_fn	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_KW_fn] = "fn",$/;"	v
token_Kind_KW_for	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_KW_for] = "for",$/;"	v
token_Kind_KW_for	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_KW_for] = "for",$/;"	v
token_Kind_KW_for	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_KW_for] = "for",$/;"	v
token_Kind_KW_for	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_KW_for] = "for",$/;"	v
token_Kind_KW_for	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_KW_for] = "for",$/;"	v
token_Kind_KW_for	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_KW_for] = "for",$/;"	v
token_Kind_KW_for	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_KW_for] = "for",$/;"	v
token_Kind_KW_goto	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_KW_goto] = "goto",$/;"	v
token_Kind_KW_goto	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_KW_goto] = "goto",$/;"	v
token_Kind_KW_goto	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_KW_goto] = "goto",$/;"	v
token_Kind_KW_goto	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_KW_goto] = "goto",$/;"	v
token_Kind_KW_goto	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_KW_goto] = "goto",$/;"	v
token_Kind_KW_goto	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_KW_goto] = "goto",$/;"	v
token_Kind_KW_goto	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_KW_goto] = "goto",$/;"	v
token_Kind_KW_i16	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_KW_i16] = 16,$/;"	v
token_Kind_KW_i16	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_KW_i16] = 16,$/;"	v
token_Kind_KW_i16	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_KW_i16] = 16,$/;"	v
token_Kind_KW_i16	$C2_ROOT/output/c2c/cgen/c2_parser.c	/^   [token_Kind_KW_i16] = 16,$/;"	v
token_Kind_KW_i16	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_KW_i16] = "i16",$/;"	v
token_Kind_KW_i16	$C2_ROOT/output/c2c_trace/cgen/c2_parser.c	/^   [token_Kind_KW_i16] = 16,$/;"	v
token_Kind_KW_i16	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_KW_i16] = "i16",$/;"	v
token_Kind_KW_i16	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_KW_i16] = "i16",$/;"	v
token_Kind_KW_i16	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_KW_i16] = "i16",$/;"	v
token_Kind_KW_i32	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_KW_i32] = 16,$/;"	v
token_Kind_KW_i32	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_KW_i32] = 16,$/;"	v
token_Kind_KW_i32	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_KW_i32] = 16,$/;"	v
token_Kind_KW_i32	$C2_ROOT/output/c2c/cgen/c2_parser.c	/^   [token_Kind_KW_i32] = 16,$/;"	v
token_Kind_KW_i32	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_KW_i32] = "i32",$/;"	v
token_Kind_KW_i32	$C2_ROOT/output/c2c_trace/cgen/c2_parser.c	/^   [token_Kind_KW_i32] = 16,$/;"	v
token_Kind_KW_i32	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_KW_i32] = "i32",$/;"	v
token_Kind_KW_i32	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_KW_i32] = "i32",$/;"	v
token_Kind_KW_i32	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_KW_i32] = "i32",$/;"	v
token_Kind_KW_i64	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_KW_i64] = 16,$/;"	v
token_Kind_KW_i64	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_KW_i64] = 16,$/;"	v
token_Kind_KW_i64	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_KW_i64] = 16,$/;"	v
token_Kind_KW_i64	$C2_ROOT/output/c2c/cgen/c2_parser.c	/^   [token_Kind_KW_i64] = 16,$/;"	v
token_Kind_KW_i64	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_KW_i64] = "i64",$/;"	v
token_Kind_KW_i64	$C2_ROOT/output/c2c_trace/cgen/c2_parser.c	/^   [token_Kind_KW_i64] = 16,$/;"	v
token_Kind_KW_i64	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_KW_i64] = "i64",$/;"	v
token_Kind_KW_i64	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_KW_i64] = "i64",$/;"	v
token_Kind_KW_i64	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_KW_i64] = "i64",$/;"	v
token_Kind_KW_i8	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_KW_i8] = 16,$/;"	v
token_Kind_KW_i8	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_KW_i8] = 16,$/;"	v
token_Kind_KW_i8	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_KW_i8] = 16,$/;"	v
token_Kind_KW_i8	$C2_ROOT/output/c2c/cgen/c2_parser.c	/^   [token_Kind_KW_i8] = 16,$/;"	v
token_Kind_KW_i8	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_KW_i8] = "i8",$/;"	v
token_Kind_KW_i8	$C2_ROOT/output/c2c_trace/cgen/c2_parser.c	/^   [token_Kind_KW_i8] = 16,$/;"	v
token_Kind_KW_i8	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_KW_i8] = "i8",$/;"	v
token_Kind_KW_i8	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_KW_i8] = "i8",$/;"	v
token_Kind_KW_i8	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_KW_i8] = "i8",$/;"	v
token_Kind_KW_if	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_KW_if] = "if",$/;"	v
token_Kind_KW_if	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_KW_if] = "if",$/;"	v
token_Kind_KW_if	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_KW_if] = "if",$/;"	v
token_Kind_KW_if	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_KW_if] = "if",$/;"	v
token_Kind_KW_if	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_KW_if] = "if",$/;"	v
token_Kind_KW_if	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_KW_if] = "if",$/;"	v
token_Kind_KW_if	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_KW_if] = "if",$/;"	v
token_Kind_KW_import	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_KW_import] = "import",$/;"	v
token_Kind_KW_import	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_KW_import] = "import",$/;"	v
token_Kind_KW_import	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_KW_import] = "import",$/;"	v
token_Kind_KW_import	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_KW_import] = "import",$/;"	v
token_Kind_KW_import	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_KW_import] = "import",$/;"	v
token_Kind_KW_import	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_KW_import] = "import",$/;"	v
token_Kind_KW_import	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_KW_import] = "import",$/;"	v
token_Kind_KW_isize	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_KW_isize] = 16,$/;"	v
token_Kind_KW_isize	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_KW_isize] = 16,$/;"	v
token_Kind_KW_isize	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_KW_isize] = 16,$/;"	v
token_Kind_KW_isize	$C2_ROOT/output/c2c/cgen/c2_parser.c	/^   [token_Kind_KW_isize] = 16,$/;"	v
token_Kind_KW_isize	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_KW_isize] = "isize",$/;"	v
token_Kind_KW_isize	$C2_ROOT/output/c2c_trace/cgen/c2_parser.c	/^   [token_Kind_KW_isize] = 16,$/;"	v
token_Kind_KW_isize	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_KW_isize] = "isize",$/;"	v
token_Kind_KW_isize	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_KW_isize] = "isize",$/;"	v
token_Kind_KW_isize	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_KW_isize] = "isize",$/;"	v
token_Kind_KW_local	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_KW_local] = "local",$/;"	v
token_Kind_KW_local	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_KW_local] = "local",$/;"	v
token_Kind_KW_local	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_KW_local] = "local",$/;"	v
token_Kind_KW_local	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_KW_local] = "local",$/;"	v
token_Kind_KW_local	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_KW_local] = "local",$/;"	v
token_Kind_KW_local	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_KW_local] = "local",$/;"	v
token_Kind_KW_local	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_KW_local] = "local",$/;"	v
token_Kind_KW_module	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_KW_module] = "module",$/;"	v
token_Kind_KW_module	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_KW_module] = "module",$/;"	v
token_Kind_KW_module	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_KW_module] = "module",$/;"	v
token_Kind_KW_module	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_KW_module] = "module",$/;"	v
token_Kind_KW_module	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_KW_module] = "module",$/;"	v
token_Kind_KW_module	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_KW_module] = "module",$/;"	v
token_Kind_KW_module	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_KW_module] = "module",$/;"	v
token_Kind_KW_nil	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_KW_nil] = 12,$/;"	v
token_Kind_KW_nil	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_KW_nil] = 12,$/;"	v
token_Kind_KW_nil	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_KW_nil] = 12,$/;"	v
token_Kind_KW_nil	$C2_ROOT/output/c2c/cgen/c2_parser.c	/^   [token_Kind_KW_nil] = 12,$/;"	v
token_Kind_KW_nil	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_KW_nil] = "nil",$/;"	v
token_Kind_KW_nil	$C2_ROOT/output/c2c_trace/cgen/c2_parser.c	/^   [token_Kind_KW_nil] = 12,$/;"	v
token_Kind_KW_nil	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_KW_nil] = "nil",$/;"	v
token_Kind_KW_nil	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_KW_nil] = "nil",$/;"	v
token_Kind_KW_nil	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_KW_nil] = "nil",$/;"	v
token_Kind_KW_offsetof	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_KW_offsetof] = 13,$/;"	v
token_Kind_KW_offsetof	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_KW_offsetof] = 13,$/;"	v
token_Kind_KW_offsetof	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_KW_offsetof] = 13,$/;"	v
token_Kind_KW_offsetof	$C2_ROOT/output/c2c/cgen/c2_parser.c	/^   [token_Kind_KW_offsetof] = 13,$/;"	v
token_Kind_KW_offsetof	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_KW_offsetof] = "offsetof",$/;"	v
token_Kind_KW_offsetof	$C2_ROOT/output/c2c_trace/cgen/c2_parser.c	/^   [token_Kind_KW_offsetof] = 13,$/;"	v
token_Kind_KW_offsetof	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_KW_offsetof] = "offsetof",$/;"	v
token_Kind_KW_offsetof	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_KW_offsetof] = "offsetof",$/;"	v
token_Kind_KW_offsetof	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_KW_offsetof] = "offsetof",$/;"	v
token_Kind_KW_public	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_KW_public] = "public",$/;"	v
token_Kind_KW_public	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_KW_public] = "public",$/;"	v
token_Kind_KW_public	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_KW_public] = "public",$/;"	v
token_Kind_KW_public	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_KW_public] = "public",$/;"	v
token_Kind_KW_public	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_KW_public] = "public",$/;"	v
token_Kind_KW_public	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_KW_public] = "public",$/;"	v
token_Kind_KW_public	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_KW_public] = "public",$/;"	v
token_Kind_KW_reg16	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_KW_reg16] = "reg16",$/;"	v
token_Kind_KW_reg16	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_KW_reg16] = "reg16",$/;"	v
token_Kind_KW_reg16	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_KW_reg16] = "reg16",$/;"	v
token_Kind_KW_reg16	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_KW_reg16] = "reg16",$/;"	v
token_Kind_KW_reg16	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_KW_reg16] = "reg16",$/;"	v
token_Kind_KW_reg16	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_KW_reg16] = "reg16",$/;"	v
token_Kind_KW_reg16	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_KW_reg16] = "reg16",$/;"	v
token_Kind_KW_reg32	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_KW_reg32] = "reg32",$/;"	v
token_Kind_KW_reg32	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_KW_reg32] = "reg32",$/;"	v
token_Kind_KW_reg32	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_KW_reg32] = "reg32",$/;"	v
token_Kind_KW_reg32	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_KW_reg32] = "reg32",$/;"	v
token_Kind_KW_reg32	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_KW_reg32] = "reg32",$/;"	v
token_Kind_KW_reg32	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_KW_reg32] = "reg32",$/;"	v
token_Kind_KW_reg32	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_KW_reg32] = "reg32",$/;"	v
token_Kind_KW_reg64	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_KW_reg64] = "reg64",$/;"	v
token_Kind_KW_reg64	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_KW_reg64] = "reg64",$/;"	v
token_Kind_KW_reg64	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_KW_reg64] = "reg64",$/;"	v
token_Kind_KW_reg64	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_KW_reg64] = "reg64",$/;"	v
token_Kind_KW_reg64	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_KW_reg64] = "reg64",$/;"	v
token_Kind_KW_reg64	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_KW_reg64] = "reg64",$/;"	v
token_Kind_KW_reg64	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_KW_reg64] = "reg64",$/;"	v
token_Kind_KW_reg8	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_KW_reg8] = "reg8",$/;"	v
token_Kind_KW_reg8	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_KW_reg8] = "reg8",$/;"	v
token_Kind_KW_reg8	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_KW_reg8] = "reg8",$/;"	v
token_Kind_KW_reg8	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_KW_reg8] = "reg8",$/;"	v
token_Kind_KW_reg8	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_KW_reg8] = "reg8",$/;"	v
token_Kind_KW_reg8	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_KW_reg8] = "reg8",$/;"	v
token_Kind_KW_reg8	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_KW_reg8] = "reg8",$/;"	v
token_Kind_KW_return	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_KW_return] = "return",$/;"	v
token_Kind_KW_return	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_KW_return] = "return",$/;"	v
token_Kind_KW_return	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_KW_return] = "return",$/;"	v
token_Kind_KW_return	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_KW_return] = "return",$/;"	v
token_Kind_KW_return	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_KW_return] = "return",$/;"	v
token_Kind_KW_return	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_KW_return] = "return",$/;"	v
token_Kind_KW_return	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_KW_return] = "return",$/;"	v
token_Kind_KW_sizeof	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_KW_sizeof] = 14,$/;"	v
token_Kind_KW_sizeof	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_KW_sizeof] = 14,$/;"	v
token_Kind_KW_sizeof	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_KW_sizeof] = 14,$/;"	v
token_Kind_KW_sizeof	$C2_ROOT/output/c2c/cgen/c2_parser.c	/^   [token_Kind_KW_sizeof] = 14,$/;"	v
token_Kind_KW_sizeof	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_KW_sizeof] = "sizeof",$/;"	v
token_Kind_KW_sizeof	$C2_ROOT/output/c2c_trace/cgen/c2_parser.c	/^   [token_Kind_KW_sizeof] = 14,$/;"	v
token_Kind_KW_sizeof	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_KW_sizeof] = "sizeof",$/;"	v
token_Kind_KW_sizeof	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_KW_sizeof] = "sizeof",$/;"	v
token_Kind_KW_sizeof	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_KW_sizeof] = "sizeof",$/;"	v
token_Kind_KW_static_assert	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_KW_static_assert] = "static_assert",$/;"	v
token_Kind_KW_static_assert	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_KW_static_assert] = "static_assert",$/;"	v
token_Kind_KW_static_assert	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_KW_static_assert] = "static_assert",$/;"	v
token_Kind_KW_static_assert	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_KW_static_assert] = "static_assert",$/;"	v
token_Kind_KW_static_assert	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_KW_static_assert] = "static_assert",$/;"	v
token_Kind_KW_static_assert	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_KW_static_assert] = "static_assert",$/;"	v
token_Kind_KW_static_assert	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_KW_static_assert] = "static_assert",$/;"	v
token_Kind_KW_struct	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_KW_struct] = "struct",$/;"	v
token_Kind_KW_struct	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_KW_struct] = "struct",$/;"	v
token_Kind_KW_struct	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_KW_struct] = "struct",$/;"	v
token_Kind_KW_struct	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_KW_struct] = "struct",$/;"	v
token_Kind_KW_struct	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_KW_struct] = "struct",$/;"	v
token_Kind_KW_struct	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_KW_struct] = "struct",$/;"	v
token_Kind_KW_struct	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_KW_struct] = "struct",$/;"	v
token_Kind_KW_switch	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_KW_switch] = "switch",$/;"	v
token_Kind_KW_switch	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_KW_switch] = "switch",$/;"	v
token_Kind_KW_switch	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_KW_switch] = "switch",$/;"	v
token_Kind_KW_switch	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_KW_switch] = "switch",$/;"	v
token_Kind_KW_switch	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_KW_switch] = "switch",$/;"	v
token_Kind_KW_switch	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_KW_switch] = "switch",$/;"	v
token_Kind_KW_switch	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_KW_switch] = "switch",$/;"	v
token_Kind_KW_template	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_KW_template] = "template",$/;"	v
token_Kind_KW_template	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_KW_template] = "template",$/;"	v
token_Kind_KW_template	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_KW_template] = "template",$/;"	v
token_Kind_KW_template	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_KW_template] = "template",$/;"	v
token_Kind_KW_template	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_KW_template] = "template",$/;"	v
token_Kind_KW_template	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_KW_template] = "template",$/;"	v
token_Kind_KW_template	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_KW_template] = "template",$/;"	v
token_Kind_KW_to_container	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_KW_to_container] = 15,$/;"	v
token_Kind_KW_to_container	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_KW_to_container] = 15,$/;"	v
token_Kind_KW_to_container	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_KW_to_container] = 15,$/;"	v
token_Kind_KW_to_container	$C2_ROOT/output/c2c/cgen/c2_parser.c	/^   [token_Kind_KW_to_container] = 15,$/;"	v
token_Kind_KW_to_container	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_KW_to_container] = "to_container",$/;"	v
token_Kind_KW_to_container	$C2_ROOT/output/c2c_trace/cgen/c2_parser.c	/^   [token_Kind_KW_to_container] = 15,$/;"	v
token_Kind_KW_to_container	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_KW_to_container] = "to_container",$/;"	v
token_Kind_KW_to_container	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_KW_to_container] = "to_container",$/;"	v
token_Kind_KW_to_container	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_KW_to_container] = "to_container",$/;"	v
token_Kind_KW_true	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_KW_true] = 11,$/;"	v
token_Kind_KW_true	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_KW_true] = 11,$/;"	v
token_Kind_KW_true	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_KW_true] = 11,$/;"	v
token_Kind_KW_true	$C2_ROOT/output/c2c/cgen/c2_parser.c	/^   [token_Kind_KW_true] = 11,$/;"	v
token_Kind_KW_true	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_KW_true] = "true",$/;"	v
token_Kind_KW_true	$C2_ROOT/output/c2c_trace/cgen/c2_parser.c	/^   [token_Kind_KW_true] = 11,$/;"	v
token_Kind_KW_true	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_KW_true] = "true",$/;"	v
token_Kind_KW_true	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_KW_true] = "true",$/;"	v
token_Kind_KW_true	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_KW_true] = "true",$/;"	v
token_Kind_KW_type	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_KW_type] = "type",$/;"	v
token_Kind_KW_type	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_KW_type] = "type",$/;"	v
token_Kind_KW_type	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_KW_type] = "type",$/;"	v
token_Kind_KW_type	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_KW_type] = "type",$/;"	v
token_Kind_KW_type	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_KW_type] = "type",$/;"	v
token_Kind_KW_type	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_KW_type] = "type",$/;"	v
token_Kind_KW_type	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_KW_type] = "type",$/;"	v
token_Kind_KW_u16	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_KW_u16] = 16,$/;"	v
token_Kind_KW_u16	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_KW_u16] = 16,$/;"	v
token_Kind_KW_u16	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_KW_u16] = 16,$/;"	v
token_Kind_KW_u16	$C2_ROOT/output/c2c/cgen/c2_parser.c	/^   [token_Kind_KW_u16] = 16,$/;"	v
token_Kind_KW_u16	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_KW_u16] = "u16",$/;"	v
token_Kind_KW_u16	$C2_ROOT/output/c2c_trace/cgen/c2_parser.c	/^   [token_Kind_KW_u16] = 16,$/;"	v
token_Kind_KW_u16	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_KW_u16] = "u16",$/;"	v
token_Kind_KW_u16	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_KW_u16] = "u16",$/;"	v
token_Kind_KW_u16	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_KW_u16] = "u16",$/;"	v
token_Kind_KW_u32	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_KW_u32] = 16,$/;"	v
token_Kind_KW_u32	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_KW_u32] = 16,$/;"	v
token_Kind_KW_u32	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_KW_u32] = 16,$/;"	v
token_Kind_KW_u32	$C2_ROOT/output/c2c/cgen/c2_parser.c	/^   [token_Kind_KW_u32] = 16,$/;"	v
token_Kind_KW_u32	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_KW_u32] = "u32",$/;"	v
token_Kind_KW_u32	$C2_ROOT/output/c2c_trace/cgen/c2_parser.c	/^   [token_Kind_KW_u32] = 16,$/;"	v
token_Kind_KW_u32	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_KW_u32] = "u32",$/;"	v
token_Kind_KW_u32	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_KW_u32] = "u32",$/;"	v
token_Kind_KW_u32	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_KW_u32] = "u32",$/;"	v
token_Kind_KW_u64	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_KW_u64] = 16,$/;"	v
token_Kind_KW_u64	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_KW_u64] = 16,$/;"	v
token_Kind_KW_u64	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_KW_u64] = 16,$/;"	v
token_Kind_KW_u64	$C2_ROOT/output/c2c/cgen/c2_parser.c	/^   [token_Kind_KW_u64] = 16,$/;"	v
token_Kind_KW_u64	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_KW_u64] = "u64",$/;"	v
token_Kind_KW_u64	$C2_ROOT/output/c2c_trace/cgen/c2_parser.c	/^   [token_Kind_KW_u64] = 16,$/;"	v
token_Kind_KW_u64	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_KW_u64] = "u64",$/;"	v
token_Kind_KW_u64	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_KW_u64] = "u64",$/;"	v
token_Kind_KW_u64	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_KW_u64] = "u64",$/;"	v
token_Kind_KW_u8	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_KW_u8] = 16,$/;"	v
token_Kind_KW_u8	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_KW_u8] = 16,$/;"	v
token_Kind_KW_u8	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_KW_u8] = 16,$/;"	v
token_Kind_KW_u8	$C2_ROOT/output/c2c/cgen/c2_parser.c	/^   [token_Kind_KW_u8] = 16,$/;"	v
token_Kind_KW_u8	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_KW_u8] = "u8",$/;"	v
token_Kind_KW_u8	$C2_ROOT/output/c2c_trace/cgen/c2_parser.c	/^   [token_Kind_KW_u8] = 16,$/;"	v
token_Kind_KW_u8	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_KW_u8] = "u8",$/;"	v
token_Kind_KW_u8	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_KW_u8] = "u8",$/;"	v
token_Kind_KW_u8	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_KW_u8] = "u8",$/;"	v
token_Kind_KW_union	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_KW_union] = "union",$/;"	v
token_Kind_KW_union	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_KW_union] = "union",$/;"	v
token_Kind_KW_union	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_KW_union] = "union",$/;"	v
token_Kind_KW_union	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_KW_union] = "union",$/;"	v
token_Kind_KW_union	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_KW_union] = "union",$/;"	v
token_Kind_KW_union	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_KW_union] = "union",$/;"	v
token_Kind_KW_union	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_KW_union] = "union",$/;"	v
token_Kind_KW_usize	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_KW_usize] = 16,$/;"	v
token_Kind_KW_usize	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_KW_usize] = 16,$/;"	v
token_Kind_KW_usize	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_KW_usize] = 16,$/;"	v
token_Kind_KW_usize	$C2_ROOT/output/c2c/cgen/c2_parser.c	/^   [token_Kind_KW_usize] = 16,$/;"	v
token_Kind_KW_usize	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_KW_usize] = "usize",$/;"	v
token_Kind_KW_usize	$C2_ROOT/output/c2c_trace/cgen/c2_parser.c	/^   [token_Kind_KW_usize] = 16,$/;"	v
token_Kind_KW_usize	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_KW_usize] = "usize",$/;"	v
token_Kind_KW_usize	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_KW_usize] = "usize",$/;"	v
token_Kind_KW_usize	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_KW_usize] = "usize",$/;"	v
token_Kind_KW_void	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_KW_void] = "void",$/;"	v
token_Kind_KW_void	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_KW_void] = "void",$/;"	v
token_Kind_KW_void	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_KW_void] = "void",$/;"	v
token_Kind_KW_void	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_KW_void] = "void",$/;"	v
token_Kind_KW_void	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_KW_void] = "void",$/;"	v
token_Kind_KW_void	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_KW_void] = "void",$/;"	v
token_Kind_KW_void	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_KW_void] = "void",$/;"	v
token_Kind_KW_volatile	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_KW_volatile] = "volatile",$/;"	v
token_Kind_KW_volatile	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_KW_volatile] = "volatile",$/;"	v
token_Kind_KW_volatile	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_KW_volatile] = "volatile",$/;"	v
token_Kind_KW_volatile	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_KW_volatile] = "volatile",$/;"	v
token_Kind_KW_volatile	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_KW_volatile] = "volatile",$/;"	v
token_Kind_KW_volatile	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_KW_volatile] = "volatile",$/;"	v
token_Kind_KW_volatile	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_KW_volatile] = "volatile",$/;"	v
token_Kind_KW_while	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_KW_while] = "while",$/;"	v
token_Kind_KW_while	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_KW_while] = "while",$/;"	v
token_Kind_KW_while	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_KW_while] = "while",$/;"	v
token_Kind_KW_while	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_KW_while] = "while",$/;"	v
token_Kind_KW_while	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_KW_while] = "while",$/;"	v
token_Kind_KW_while	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_KW_while] = "while",$/;"	v
token_Kind_KW_while	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_KW_while] = "while",$/;"	v
token_Kind_LBrace	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_LBrace] = "{",$/;"	v
token_Kind_LBrace	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_LBrace] = "{",$/;"	v
token_Kind_LBrace	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_LBrace] = "{",$/;"	v
token_Kind_LBrace	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_LBrace] = "{",$/;"	v
token_Kind_LBrace	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_LBrace] = "{",$/;"	v
token_Kind_LBrace	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_LBrace] = "{",$/;"	v
token_Kind_LBrace	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_LBrace] = "{",$/;"	v
token_Kind_LParen	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_LParen] = 6,$/;"	v
token_Kind_LParen	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_LParen] = 6,$/;"	v
token_Kind_LParen	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_LParen] = 6,$/;"	v
token_Kind_LParen	$C2_ROOT/output/c2c/cgen/c2_parser.c	/^   [token_Kind_LParen] = 6,$/;"	v
token_Kind_LParen	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_LParen] = "(",$/;"	v
token_Kind_LParen	$C2_ROOT/output/c2c_trace/cgen/c2_parser.c	/^   [token_Kind_LParen] = 6,$/;"	v
token_Kind_LParen	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_LParen] = "(",$/;"	v
token_Kind_LParen	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_LParen] = "(",$/;"	v
token_Kind_LParen	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_LParen] = "(",$/;"	v
token_Kind_LSquare	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_LSquare] = "[",$/;"	v
token_Kind_LSquare	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_LSquare] = "[",$/;"	v
token_Kind_LSquare	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_LSquare] = "[",$/;"	v
token_Kind_LSquare	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_LSquare] = "[",$/;"	v
token_Kind_LSquare	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_LSquare] = "[",$/;"	v
token_Kind_LSquare	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_LSquare] = "[",$/;"	v
token_Kind_LSquare	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_LSquare] = "[",$/;"	v
token_Kind_Less	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_Less] = c2_prec_Prec_Relational,$/;"	v
token_Kind_Less	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_Less] = c2_prec_Prec_Relational,$/;"	v
token_Kind_Less	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_Less] = c2_prec_Prec_Relational,$/;"	v
token_Kind_Less	$C2_ROOT/output/c2c/cgen/c2_parser.c	/^   [token_Kind_Less] = c2_prec_Prec_Relational,$/;"	v
token_Kind_Less	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_Less] = "<",$/;"	v
token_Kind_Less	$C2_ROOT/output/c2c_trace/cgen/c2_parser.c	/^   [token_Kind_Less] = c2_prec_Prec_Relational,$/;"	v
token_Kind_Less	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_Less] = "<",$/;"	v
token_Kind_Less	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_Less] = "<",$/;"	v
token_Kind_Less	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_Less] = "<",$/;"	v
token_Kind_LessEqual	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_LessEqual] = c2_prec_Prec_Relational,$/;"	v
token_Kind_LessEqual	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_LessEqual] = c2_prec_Prec_Relational,$/;"	v
token_Kind_LessEqual	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_LessEqual] = c2_prec_Prec_Relational,$/;"	v
token_Kind_LessEqual	$C2_ROOT/output/c2c/cgen/c2_parser.c	/^   [token_Kind_LessEqual] = c2_prec_Prec_Relational,$/;"	v
token_Kind_LessEqual	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_LessEqual] = "<=",$/;"	v
token_Kind_LessEqual	$C2_ROOT/output/c2c_trace/cgen/c2_parser.c	/^   [token_Kind_LessEqual] = c2_prec_Prec_Relational,$/;"	v
token_Kind_LessEqual	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_LessEqual] = "<=",$/;"	v
token_Kind_LessEqual	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_LessEqual] = "<=",$/;"	v
token_Kind_LessEqual	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_LessEqual] = "<=",$/;"	v
token_Kind_LessLess	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_LessLess] = c2_prec_Prec_Shift,$/;"	v
token_Kind_LessLess	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_LessLess] = c2_prec_Prec_Shift,$/;"	v
token_Kind_LessLess	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_LessLess] = c2_prec_Prec_Shift,$/;"	v
token_Kind_LessLess	$C2_ROOT/output/c2c/cgen/c2_parser.c	/^   [token_Kind_LessLess] = c2_prec_Prec_Shift,$/;"	v
token_Kind_LessLess	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_LessLess] = "<<",$/;"	v
token_Kind_LessLess	$C2_ROOT/output/c2c_trace/cgen/c2_parser.c	/^   [token_Kind_LessLess] = c2_prec_Prec_Shift,$/;"	v
token_Kind_LessLess	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_LessLess] = "<<",$/;"	v
token_Kind_LessLess	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_LessLess] = "<<",$/;"	v
token_Kind_LessLess	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_LessLess] = "<<",$/;"	v
token_Kind_LessLessEqual	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_LessLessEqual] = c2_prec_Prec_Assignment,$/;"	v
token_Kind_LessLessEqual	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_LessLessEqual] = c2_prec_Prec_Assignment,$/;"	v
token_Kind_LessLessEqual	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_LessLessEqual] = c2_prec_Prec_Assignment,$/;"	v
token_Kind_LessLessEqual	$C2_ROOT/output/c2c/cgen/c2_parser.c	/^   [token_Kind_LessLessEqual] = c2_prec_Prec_Assignment,$/;"	v
token_Kind_LessLessEqual	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_LessLessEqual] = "<<=",$/;"	v
token_Kind_LessLessEqual	$C2_ROOT/output/c2c_trace/cgen/c2_parser.c	/^   [token_Kind_LessLessEqual] = c2_prec_Prec_Assignment,$/;"	v
token_Kind_LessLessEqual	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_LessLessEqual] = "<<=",$/;"	v
token_Kind_LessLessEqual	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_LessLessEqual] = "<<=",$/;"	v
token_Kind_LessLessEqual	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_LessLessEqual] = "<<=",$/;"	v
token_Kind_LineComment	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_LineComment] = "l-comment",$/;"	v
token_Kind_LineComment	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_LineComment] = "l-comment",$/;"	v
token_Kind_LineComment	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_LineComment] = "l-comment",$/;"	v
token_Kind_LineComment	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_LineComment] = "l-comment",$/;"	v
token_Kind_LineComment	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_LineComment] = "l-comment",$/;"	v
token_Kind_LineComment	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_LineComment] = "l-comment",$/;"	v
token_Kind_LineComment	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_LineComment] = "l-comment",$/;"	v
token_Kind_Minus	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_Minus] = c2_prec_Prec_Additive,$/;"	v
token_Kind_Minus	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_Minus] = c2_prec_Prec_Additive,$/;"	v
token_Kind_Minus	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_Minus] = c2_prec_Prec_Additive,$/;"	v
token_Kind_Minus	$C2_ROOT/output/c2c/cgen/c2_parser.c	/^   [token_Kind_Minus] = c2_prec_Prec_Additive,$/;"	v
token_Kind_Minus	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_Minus] = "-",$/;"	v
token_Kind_Minus	$C2_ROOT/output/c2c_trace/cgen/c2_parser.c	/^   [token_Kind_Minus] = c2_prec_Prec_Additive,$/;"	v
token_Kind_Minus	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_Minus] = "-",$/;"	v
token_Kind_Minus	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_Minus] = "-",$/;"	v
token_Kind_Minus	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_Minus] = "-",$/;"	v
token_Kind_MinusEqual	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_MinusEqual] = c2_prec_Prec_Assignment,$/;"	v
token_Kind_MinusEqual	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_MinusEqual] = c2_prec_Prec_Assignment,$/;"	v
token_Kind_MinusEqual	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_MinusEqual] = c2_prec_Prec_Assignment,$/;"	v
token_Kind_MinusEqual	$C2_ROOT/output/c2c/cgen/c2_parser.c	/^   [token_Kind_MinusEqual] = c2_prec_Prec_Assignment,$/;"	v
token_Kind_MinusEqual	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_MinusEqual] = "-=",$/;"	v
token_Kind_MinusEqual	$C2_ROOT/output/c2c_trace/cgen/c2_parser.c	/^   [token_Kind_MinusEqual] = c2_prec_Prec_Assignment,$/;"	v
token_Kind_MinusEqual	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_MinusEqual] = "-=",$/;"	v
token_Kind_MinusEqual	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_MinusEqual] = "-=",$/;"	v
token_Kind_MinusEqual	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_MinusEqual] = "-=",$/;"	v
token_Kind_MinusMinus	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_MinusMinus] = 7,$/;"	v
token_Kind_MinusMinus	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_MinusMinus] = 7,$/;"	v
token_Kind_MinusMinus	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_MinusMinus] = 7,$/;"	v
token_Kind_MinusMinus	$C2_ROOT/output/c2c/cgen/c2_parser.c	/^   [token_Kind_MinusMinus] = 7,$/;"	v
token_Kind_MinusMinus	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_MinusMinus] = "--",$/;"	v
token_Kind_MinusMinus	$C2_ROOT/output/c2c_trace/cgen/c2_parser.c	/^   [token_Kind_MinusMinus] = 7,$/;"	v
token_Kind_MinusMinus	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_MinusMinus] = "--",$/;"	v
token_Kind_MinusMinus	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_MinusMinus] = "--",$/;"	v
token_Kind_MinusMinus	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_MinusMinus] = "--",$/;"	v
token_Kind_None	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_None] = "none",$/;"	v
token_Kind_None	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_None] = "none",$/;"	v
token_Kind_None	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_None] = "none",$/;"	v
token_Kind_None	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_None] = "none",$/;"	v
token_Kind_None	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_None] = "none",$/;"	v
token_Kind_None	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_None] = "none",$/;"	v
token_Kind_None	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_None] = "none",$/;"	v
token_Kind_Percent	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_Percent] = c2_prec_Prec_Multiplicative,$/;"	v
token_Kind_Percent	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_Percent] = c2_prec_Prec_Multiplicative,$/;"	v
token_Kind_Percent	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_Percent] = c2_prec_Prec_Multiplicative,$/;"	v
token_Kind_Percent	$C2_ROOT/output/c2c/cgen/c2_parser.c	/^   [token_Kind_Percent] = c2_prec_Prec_Multiplicative,$/;"	v
token_Kind_Percent	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_Percent] = "%",$/;"	v
token_Kind_Percent	$C2_ROOT/output/c2c_trace/cgen/c2_parser.c	/^   [token_Kind_Percent] = c2_prec_Prec_Multiplicative,$/;"	v
token_Kind_Percent	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_Percent] = "%",$/;"	v
token_Kind_Percent	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_Percent] = "%",$/;"	v
token_Kind_Percent	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_Percent] = "%",$/;"	v
token_Kind_PercentEqual	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_PercentEqual] = c2_prec_Prec_Assignment,$/;"	v
token_Kind_PercentEqual	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_PercentEqual] = c2_prec_Prec_Assignment,$/;"	v
token_Kind_PercentEqual	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_PercentEqual] = c2_prec_Prec_Assignment,$/;"	v
token_Kind_PercentEqual	$C2_ROOT/output/c2c/cgen/c2_parser.c	/^   [token_Kind_PercentEqual] = c2_prec_Prec_Assignment,$/;"	v
token_Kind_PercentEqual	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_PercentEqual] = "%=",$/;"	v
token_Kind_PercentEqual	$C2_ROOT/output/c2c_trace/cgen/c2_parser.c	/^   [token_Kind_PercentEqual] = c2_prec_Prec_Assignment,$/;"	v
token_Kind_PercentEqual	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_PercentEqual] = "%=",$/;"	v
token_Kind_PercentEqual	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_PercentEqual] = "%=",$/;"	v
token_Kind_PercentEqual	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_PercentEqual] = "%=",$/;"	v
token_Kind_Pipe	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_Pipe] = c2_prec_Prec_Bitwise,$/;"	v
token_Kind_Pipe	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_Pipe] = c2_prec_Prec_Bitwise,$/;"	v
token_Kind_Pipe	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_Pipe] = c2_prec_Prec_Bitwise,$/;"	v
token_Kind_Pipe	$C2_ROOT/output/c2c/cgen/c2_parser.c	/^   [token_Kind_Pipe] = c2_prec_Prec_Bitwise,$/;"	v
token_Kind_Pipe	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_Pipe] = "|",$/;"	v
token_Kind_Pipe	$C2_ROOT/output/c2c_trace/cgen/c2_parser.c	/^   [token_Kind_Pipe] = c2_prec_Prec_Bitwise,$/;"	v
token_Kind_Pipe	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_Pipe] = "|",$/;"	v
token_Kind_Pipe	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_Pipe] = "|",$/;"	v
token_Kind_Pipe	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_Pipe] = "|",$/;"	v
token_Kind_PipeEqual	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_PipeEqual] = c2_prec_Prec_Assignment,$/;"	v
token_Kind_PipeEqual	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_PipeEqual] = c2_prec_Prec_Assignment,$/;"	v
token_Kind_PipeEqual	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_PipeEqual] = c2_prec_Prec_Assignment,$/;"	v
token_Kind_PipeEqual	$C2_ROOT/output/c2c/cgen/c2_parser.c	/^   [token_Kind_PipeEqual] = c2_prec_Prec_Assignment,$/;"	v
token_Kind_PipeEqual	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_PipeEqual] = "|=",$/;"	v
token_Kind_PipeEqual	$C2_ROOT/output/c2c_trace/cgen/c2_parser.c	/^   [token_Kind_PipeEqual] = c2_prec_Prec_Assignment,$/;"	v
token_Kind_PipeEqual	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_PipeEqual] = "|=",$/;"	v
token_Kind_PipeEqual	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_PipeEqual] = "|=",$/;"	v
token_Kind_PipeEqual	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_PipeEqual] = "|=",$/;"	v
token_Kind_PipePipe	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_PipePipe] = c2_prec_Prec_LogicalAndOr,$/;"	v
token_Kind_PipePipe	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_PipePipe] = c2_prec_Prec_LogicalAndOr,$/;"	v
token_Kind_PipePipe	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_PipePipe] = c2_prec_Prec_LogicalAndOr,$/;"	v
token_Kind_PipePipe	$C2_ROOT/output/c2c/cgen/c2_parser.c	/^   [token_Kind_PipePipe] = c2_prec_Prec_LogicalAndOr,$/;"	v
token_Kind_PipePipe	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_PipePipe] = "||",$/;"	v
token_Kind_PipePipe	$C2_ROOT/output/c2c_trace/cgen/c2_parser.c	/^   [token_Kind_PipePipe] = c2_prec_Prec_LogicalAndOr,$/;"	v
token_Kind_PipePipe	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_PipePipe] = "||",$/;"	v
token_Kind_PipePipe	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_PipePipe] = "||",$/;"	v
token_Kind_PipePipe	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_PipePipe] = "||",$/;"	v
token_Kind_Plus	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_Plus] = c2_prec_Prec_Additive,$/;"	v
token_Kind_Plus	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_Plus] = c2_prec_Prec_Additive,$/;"	v
token_Kind_Plus	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_Plus] = c2_prec_Prec_Additive,$/;"	v
token_Kind_Plus	$C2_ROOT/output/c2c/cgen/c2_parser.c	/^   [token_Kind_Plus] = c2_prec_Prec_Additive,$/;"	v
token_Kind_Plus	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_Plus] = "+",$/;"	v
token_Kind_Plus	$C2_ROOT/output/c2c_trace/cgen/c2_parser.c	/^   [token_Kind_Plus] = c2_prec_Prec_Additive,$/;"	v
token_Kind_Plus	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_Plus] = "+",$/;"	v
token_Kind_Plus	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_Plus] = "+",$/;"	v
token_Kind_Plus	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_Plus] = "+",$/;"	v
token_Kind_PlusEqual	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_PlusEqual] = c2_prec_Prec_Assignment,$/;"	v
token_Kind_PlusEqual	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_PlusEqual] = c2_prec_Prec_Assignment,$/;"	v
token_Kind_PlusEqual	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_PlusEqual] = c2_prec_Prec_Assignment,$/;"	v
token_Kind_PlusEqual	$C2_ROOT/output/c2c/cgen/c2_parser.c	/^   [token_Kind_PlusEqual] = c2_prec_Prec_Assignment,$/;"	v
token_Kind_PlusEqual	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_PlusEqual] = "+=",$/;"	v
token_Kind_PlusEqual	$C2_ROOT/output/c2c_trace/cgen/c2_parser.c	/^   [token_Kind_PlusEqual] = c2_prec_Prec_Assignment,$/;"	v
token_Kind_PlusEqual	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_PlusEqual] = "+=",$/;"	v
token_Kind_PlusEqual	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_PlusEqual] = "+=",$/;"	v
token_Kind_PlusEqual	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_PlusEqual] = "+=",$/;"	v
token_Kind_PlusPlus	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_PlusPlus] = 7,$/;"	v
token_Kind_PlusPlus	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_PlusPlus] = 7,$/;"	v
token_Kind_PlusPlus	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_PlusPlus] = 7,$/;"	v
token_Kind_PlusPlus	$C2_ROOT/output/c2c/cgen/c2_parser.c	/^   [token_Kind_PlusPlus] = 7,$/;"	v
token_Kind_PlusPlus	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_PlusPlus] = "++",$/;"	v
token_Kind_PlusPlus	$C2_ROOT/output/c2c_trace/cgen/c2_parser.c	/^   [token_Kind_PlusPlus] = 7,$/;"	v
token_Kind_PlusPlus	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_PlusPlus] = "++",$/;"	v
token_Kind_PlusPlus	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_PlusPlus] = "++",$/;"	v
token_Kind_PlusPlus	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_PlusPlus] = "++",$/;"	v
token_Kind_Question	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_Question] = c2_prec_Prec_Conditional,$/;"	v
token_Kind_Question	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_Question] = c2_prec_Prec_Conditional,$/;"	v
token_Kind_Question	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_Question] = c2_prec_Prec_Conditional,$/;"	v
token_Kind_Question	$C2_ROOT/output/c2c/cgen/c2_parser.c	/^   [token_Kind_Question] = c2_prec_Prec_Conditional,$/;"	v
token_Kind_Question	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_Question] = "?",$/;"	v
token_Kind_Question	$C2_ROOT/output/c2c_trace/cgen/c2_parser.c	/^   [token_Kind_Question] = c2_prec_Prec_Conditional,$/;"	v
token_Kind_Question	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_Question] = "?",$/;"	v
token_Kind_Question	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_Question] = "?",$/;"	v
token_Kind_Question	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_Question] = "?",$/;"	v
token_Kind_RBrace	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_RBrace] = "}",$/;"	v
token_Kind_RBrace	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_RBrace] = "}",$/;"	v
token_Kind_RBrace	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_RBrace] = "}",$/;"	v
token_Kind_RBrace	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_RBrace] = "}",$/;"	v
token_Kind_RBrace	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_RBrace] = "}",$/;"	v
token_Kind_RBrace	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_RBrace] = "}",$/;"	v
token_Kind_RBrace	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_RBrace] = "}",$/;"	v
token_Kind_RParen	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_RParen] = ")",$/;"	v
token_Kind_RParen	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_RParen] = ")",$/;"	v
token_Kind_RParen	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_RParen] = ")",$/;"	v
token_Kind_RParen	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_RParen] = ")",$/;"	v
token_Kind_RParen	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_RParen] = ")",$/;"	v
token_Kind_RParen	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_RParen] = ")",$/;"	v
token_Kind_RParen	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_RParen] = ")",$/;"	v
token_Kind_RSquare	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_RSquare] = "]",$/;"	v
token_Kind_RSquare	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_RSquare] = "]",$/;"	v
token_Kind_RSquare	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_RSquare] = "]",$/;"	v
token_Kind_RSquare	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_RSquare] = "]",$/;"	v
token_Kind_RSquare	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_RSquare] = "]",$/;"	v
token_Kind_RSquare	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_RSquare] = "]",$/;"	v
token_Kind_RSquare	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_RSquare] = "]",$/;"	v
token_Kind_Semicolon	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_Semicolon] = ";",$/;"	v
token_Kind_Semicolon	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_Semicolon] = ";",$/;"	v
token_Kind_Semicolon	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_Semicolon] = ";",$/;"	v
token_Kind_Semicolon	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_Semicolon] = ";",$/;"	v
token_Kind_Semicolon	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_Semicolon] = ";",$/;"	v
token_Kind_Semicolon	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_Semicolon] = ";",$/;"	v
token_Kind_Semicolon	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_Semicolon] = ";",$/;"	v
token_Kind_Slash	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_Slash] = c2_prec_Prec_Multiplicative,$/;"	v
token_Kind_Slash	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_Slash] = c2_prec_Prec_Multiplicative,$/;"	v
token_Kind_Slash	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_Slash] = c2_prec_Prec_Multiplicative,$/;"	v
token_Kind_Slash	$C2_ROOT/output/c2c/cgen/c2_parser.c	/^   [token_Kind_Slash] = c2_prec_Prec_Multiplicative,$/;"	v
token_Kind_Slash	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_Slash] = "\/",$/;"	v
token_Kind_Slash	$C2_ROOT/output/c2c_trace/cgen/c2_parser.c	/^   [token_Kind_Slash] = c2_prec_Prec_Multiplicative,$/;"	v
token_Kind_Slash	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_Slash] = "\/",$/;"	v
token_Kind_Slash	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_Slash] = "\/",$/;"	v
token_Kind_Slash	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_Slash] = "\/",$/;"	v
token_Kind_SlashEqual	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_SlashEqual] = c2_prec_Prec_Assignment,$/;"	v
token_Kind_SlashEqual	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_SlashEqual] = c2_prec_Prec_Assignment,$/;"	v
token_Kind_SlashEqual	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_SlashEqual] = c2_prec_Prec_Assignment,$/;"	v
token_Kind_SlashEqual	$C2_ROOT/output/c2c/cgen/c2_parser.c	/^   [token_Kind_SlashEqual] = c2_prec_Prec_Assignment,$/;"	v
token_Kind_SlashEqual	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_SlashEqual] = "\/=",$/;"	v
token_Kind_SlashEqual	$C2_ROOT/output/c2c_trace/cgen/c2_parser.c	/^   [token_Kind_SlashEqual] = c2_prec_Prec_Assignment,$/;"	v
token_Kind_SlashEqual	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_SlashEqual] = "\/=",$/;"	v
token_Kind_SlashEqual	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_SlashEqual] = "\/=",$/;"	v
token_Kind_SlashEqual	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_SlashEqual] = "\/=",$/;"	v
token_Kind_Star	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_Star] = c2_prec_Prec_Multiplicative$/;"	v
token_Kind_Star	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_Star] = c2_prec_Prec_Multiplicative$/;"	v
token_Kind_Star	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_Star] = c2_prec_Prec_Multiplicative$/;"	v
token_Kind_Star	$C2_ROOT/output/c2c/cgen/c2_parser.c	/^   [token_Kind_Star] = c2_prec_Prec_Multiplicative$/;"	v
token_Kind_Star	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_Star] = "*",$/;"	v
token_Kind_Star	$C2_ROOT/output/c2c_trace/cgen/c2_parser.c	/^   [token_Kind_Star] = c2_prec_Prec_Multiplicative$/;"	v
token_Kind_Star	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_Star] = "*",$/;"	v
token_Kind_Star	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_Star] = "*",$/;"	v
token_Kind_Star	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_Star] = "*",$/;"	v
token_Kind_StarEqual	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_StarEqual] = c2_prec_Prec_Assignment,$/;"	v
token_Kind_StarEqual	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_StarEqual] = c2_prec_Prec_Assignment,$/;"	v
token_Kind_StarEqual	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_StarEqual] = c2_prec_Prec_Assignment,$/;"	v
token_Kind_StarEqual	$C2_ROOT/output/c2c/cgen/c2_parser.c	/^   [token_Kind_StarEqual] = c2_prec_Prec_Assignment,$/;"	v
token_Kind_StarEqual	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_StarEqual] = "*=",$/;"	v
token_Kind_StarEqual	$C2_ROOT/output/c2c_trace/cgen/c2_parser.c	/^   [token_Kind_StarEqual] = c2_prec_Prec_Assignment,$/;"	v
token_Kind_StarEqual	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_StarEqual] = "*=",$/;"	v
token_Kind_StarEqual	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_StarEqual] = "*=",$/;"	v
token_Kind_StarEqual	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_StarEqual] = "*=",$/;"	v
token_Kind_StringLiteral	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_StringLiteral] = 5,$/;"	v
token_Kind_StringLiteral	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_StringLiteral] = 5,$/;"	v
token_Kind_StringLiteral	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_StringLiteral] = 5,$/;"	v
token_Kind_StringLiteral	$C2_ROOT/output/c2c/cgen/c2_parser.c	/^   [token_Kind_StringLiteral] = 5,$/;"	v
token_Kind_StringLiteral	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_StringLiteral] = "string",$/;"	v
token_Kind_StringLiteral	$C2_ROOT/output/c2c_trace/cgen/c2_parser.c	/^   [token_Kind_StringLiteral] = 5,$/;"	v
token_Kind_StringLiteral	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_StringLiteral] = "string",$/;"	v
token_Kind_StringLiteral	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_StringLiteral] = "string",$/;"	v
token_Kind_StringLiteral	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_StringLiteral] = "string",$/;"	v
token_Kind_Tilde	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_Tilde] = 7,$/;"	v
token_Kind_Tilde	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_Tilde] = 7,$/;"	v
token_Kind_Tilde	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_Tilde] = 7,$/;"	v
token_Kind_Tilde	$C2_ROOT/output/c2c/cgen/c2_parser.c	/^   [token_Kind_Tilde] = 7,$/;"	v
token_Kind_Tilde	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_Tilde] = "~",$/;"	v
token_Kind_Tilde	$C2_ROOT/output/c2c_trace/cgen/c2_parser.c	/^   [token_Kind_Tilde] = 7,$/;"	v
token_Kind_Tilde	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_Tilde] = "~",$/;"	v
token_Kind_Tilde	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_Tilde] = "~",$/;"	v
token_Kind_Tilde	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_Tilde] = "~",$/;"	v
token_Kind_Warning	$C2_ROOT/bootstrap/bootstrap.c	/^   [token_Kind_Warning] = "warning",$/;"	v
token_Kind_Warning	$C2_ROOT/output/bootstrap/bootstrap-darwin-x86_64.c	/^   [token_Kind_Warning] = "warning",$/;"	v
token_Kind_Warning	$C2_ROOT/output/c2c/cgen/build.c	/^   [token_Kind_Warning] = "warning",$/;"	v
token_Kind_Warning	$C2_ROOT/output/c2c/cgen/token.c	/^   [token_Kind_Warning] = "warning",$/;"	v
token_Kind_Warning	$C2_ROOT/output/c2c_trace/cgen/token.c	/^   [token_Kind_Warning] = "warning",$/;"	v
token_Kind_Warning	$C2_ROOT/output/c2cat/cgen/build.c	/^   [token_Kind_Warning] = "warning",$/;"	v
token_Kind_Warning	$C2_ROOT/output/c2cat/cgen/token.c	/^   [token_Kind_Warning] = "warning",$/;"	v
tolower	$C2_ROOT/libs/libc/ctype.c2i	/^fn c_int tolower(c_int c) @(pure);$/;"	f
tolstring	$C2_ROOT/libs/lua/lua.c2i	/^fn const c_char* tolstring(State *L, c_int idx, c_size *len) @(cname="lua_tolstring");$/;"	f
tonumberx	$C2_ROOT/libs/lua/lua.c2i	/^fn Number tonumberx(State *L, c_int idx, c_int *isnum) @(cname="lua_tonumberx");$/;"	f
topointer	$C2_ROOT/libs/lua/lua.c2i	/^fn const void* topointer(State *L, c_int idx) @(cname="lua_topointer");$/;"	f
torusSizes	$C2_ROOT/libs/sokol/sokol_shape.c2i	/^fn Sizes torusSizes(u32 sides, u32 rings) @(cname="sshape_torus_sizes");$/;"	f
torusSizes	$C2_ROOT/libs/sokol_/sokol_shape.c2i	/^fn Sizes torusSizes(u32 sides, u32 rings) @(cname="sshape_torus_sizes");$/;"	f
toupper	$C2_ROOT/libs/libc/ctype.c2i	/^fn c_int toupper(c_int c) @(pure);$/;"	f
touserdata	$C2_ROOT/libs/lua/lua.c2i	/^fn void* touserdata(State *L, c_int idx) @(cname="lua_touserdata");$/;"	f
translate	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn void translate(c_float x, c_float y, c_float z) @(cname="sgl_translate");$/;"	f
translate	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn void translate(c_float x, c_float y, c_float z) @(cname="sgl_translate");$/;"	f
trim	$C2_ROOT/ast_utils/string_buffer.c2	/^public fn void Buf.trim(Buf* buf, u32 len) @(unused) {$/;"	f
trim	$C2_ROOT/generator/c2refs.c2	/^fn void Refs.trim(Refs* r) {$/;"	f
trim	$C2_ROOT/generator/radix_tree/radix_tree_fs.c2	/^public fn void Tree.trim(Tree* t) {$/;"	f
trim_node	$C2_ROOT/generator/radix_tree/radix_tree_fs.c2	/^fn u32 Tree.trim_node(const Tree* t, u32 node_idx, Trimmer* tr) {$/;"	f
trunc	$C2_ROOT/libs/math/math.c2i	/^fn c_double trunc(c_double);$/;"	f
truncate	$C2_ROOT/ast/value.c2	/^fn void Value.truncate(Value *orig, u32 width, bool is_signed) {$/;"	f
truncf	$C2_ROOT/libs/math/math.c2i	/^fn c_float truncf(c_float);$/;"	f
try_to_fix_type	$C2_ROOT/analyser/conversion_checker.c2	/^fn bool Checker.try_to_fix_type(Checker* c) {$/;"	f
trylock	$C2_ROOT/libs/pthread/pthread.c2i	/^fn c_int Mutex.trylock(Mutex* mutex) @(cname="pthread_mutex_trylock");$/;"	f
type2irtype	$C2_ROOT/generator/ir/ir_generator.c2	/^fn ir.Type Generator.type2irtype(Generator* gen, QualType qt) {$/;"	f
type2str	$C2_ROOT/analyser/module_analyser_expr.c2	/^fn const char* type2str(QualType q) {$/;"	f
typename	$C2_ROOT/libs/lua/lua.c2i	/^fn const c_char* typename(State *L, c_int tp) @(cname="lua_typename");$/;"	f
u16	$C2_ROOT/libs/c2/u16.c2i	/^module u16;$/;"	m
u32	$C2_ROOT/libs/c2/u32.c2i	/^module u32;$/;"	m
u64	$C2_ROOT/libs/c2/u64.c2i	/^module u64;$/;"	m
u8	$C2_ROOT/libs/c2/u8.c2i	/^module u8;$/;"	m
udata	$C2_ROOT/ast_utils/string_buffer.c2	/^public fn const u8* Buf.udata(const Buf* buf) {$/;"	f
uio	$C2_ROOT/libs/libc/uio.c2i	/^module uio;$/;"	m
umask	$C2_ROOT/libs/libc/sys_stat.c2i	/^fn Mode umask(Mode mask);$/;"	f
uname	$C2_ROOT/libs/libc/sys_utsname.c2i	/^fn c_int uname(Name* buf);$/;"	f
unbindMouseCursorImage	$C2_ROOT/libs/sokol/sokol_app.c2i	/^fn void unbindMouseCursorImage(MouseCursor cursor) @(cname="sapp_unbind_mouse_cursor_image");$/;"	f
unbindMouseCursorImage	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^fn void unbindMouseCursorImage(MouseCursor cursor) @(cname="sapp_unbind_mouse_cursor_image");$/;"	f
ungetc	$C2_ROOT/libs/libc/stdio.c2i	/^fn c_int ungetc(c_int __c, FILE* __stream);$/;"	f
unindent	$C2_ROOT/ast_utils/string_buffer.c2	/^public fn void Buf.unindent(Buf* buf) {$/;"	f
uninitBuffer	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn void uninitBuffer(Buffer buf) @(cname="sg_uninit_buffer");$/;"	f
uninitBuffer	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn void uninitBuffer(Buffer buf) @(cname="sg_uninit_buffer");$/;"	f
uninitImage	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn void uninitImage(Image img) @(cname="sg_uninit_image");$/;"	f
uninitImage	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn void uninitImage(Image img) @(cname="sg_uninit_image");$/;"	f
uninitPipeline	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn void uninitPipeline(Pipeline pip) @(cname="sg_uninit_pipeline");$/;"	f
uninitPipeline	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn void uninitPipeline(Pipeline pip) @(cname="sg_uninit_pipeline");$/;"	f
uninitSampler	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn void uninitSampler(Sampler smp) @(cname="sg_uninit_sampler");$/;"	f
uninitSampler	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn void uninitSampler(Sampler smp) @(cname="sg_uninit_sampler");$/;"	f
uninitShader	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn void uninitShader(Shader shd) @(cname="sg_uninit_shader");$/;"	f
uninitShader	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn void uninitShader(Shader shd) @(cname="sg_uninit_shader");$/;"	f
uninitView	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn void uninitView(View view) @(cname="sg_uninit_view");$/;"	f
uninitView	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn void uninitView(View view) @(cname="sg_uninit_view");$/;"	f
unistd	$C2_ROOT/libs/libc/unistd.c2i	/^module unistd;$/;"	m
unlink	$C2_ROOT/libs/libc/unistd.c2i	/^fn c_int unlink(const char* name);$/;"	f
unload	$C2_ROOT/plugins/deps_generator_plugin.c2	/^fn void unload(void* arg) {$/;"	f
unload	$C2_ROOT/plugins/git_version_plugin.c2	/^fn void unload(void* arg) {$/;"	f
unload	$C2_ROOT/plugins/refs_generator_plugin.c2	/^fn void unload(void* arg) {$/;"	f
unload	$C2_ROOT/plugins/shell_cmd_plugin.c2	/^fn void unload(void* arg) {$/;"	f
unload	$C2_ROOT/plugins/unit_test_plugin.c2	/^fn void unload(void* arg) {$/;"	f
unlock	$C2_ROOT/libs/pthread/pthread.c2i	/^fn c_int Mutex.unlock(Mutex* mutex) @(cname="pthread_mutex_unlock");$/;"	f
unlock	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn void Texture.unlock(Texture* texture) @(cname="SDL_UnlockTexture");$/;"	f
unregister_buffers	$C2_ROOT/libs/io_uring/io_uring.c2i	/^fn c_int Ring.unregister_buffers(Ring* ring) @(cname="io_uring_unregister_buffers");$/;"	f
unsetConst	$C2_ROOT/ast/qualtype.c2	/^public fn void QualType.unsetConst(QualType* qt) {$/;"	f
unsetenv	$C2_ROOT/libs/libc/stdlib.c2i	/^fn c_int unsetenv(const c_char* __name);$/;"	f
unused_checker	$C2_ROOT/analyser/unused_checker.c2	/^module unused_checker;$/;"	m
unused_module	$C2_ROOT/analyser/unused_checker.c2	/^fn void Checker.unused_module(void* arg, AST* a) {$/;"	f
updateBuffer	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn void updateBuffer(Buffer buf, Range* data) @(cname="sg_update_buffer");$/;"	f
updateBuffer	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn void updateBuffer(Buffer buf, Range* data) @(cname="sg_update_buffer");$/;"	f
updateImage	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn void updateImage(Image img, ImageData* data) @(cname="sg_update_image");$/;"	f
updateImage	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn void updateImage(Image img, ImageData* data) @(cname="sg_update_image");$/;"	f
updateSurface	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn void Window.updateSurface(Window* window) @(cname="SDL_UpdateWindowSurface");$/;"	f
update_checkpoint	$C2_ROOT/common/source_mgr.c2	/^fn CheckPoint update_checkpoint(CheckPoint cp, const char* src, u32 len) {$/;"	f
update_state	$C2_ROOT/tools/c2cat.c2	/^fn void C2cat.update_state(C2cat* ctx, const Token* tok) {$/;"	f
us	$C2_ROOT/libs/sokol/sokol_time.c2i	/^fn c_double us(u64 ticks) @(cname="stm_us");$/;"	f
us	$C2_ROOT/libs/sokol_/sokol_time.c2i	/^fn c_double us(u64 ticks) @(cname="stm_us");$/;"	f
usage	$C2_ROOT/compiler/main.c2	/^fn void usage() {$/;"	f
usage	$C2_ROOT/tools/c2cat.c2	/^fn void usage(const char* me) {$/;"	f
usage	$C2_ROOT/tools/c2loc.c2	/^fn void usage(const char* me) {$/;"	f
usage	$C2_ROOT/tools/c2rename.c2	/^fn void usage(const char* me) {$/;"	f
usage	$C2_ROOT/tools/c2tags.c2	/^fn void usage(const char* me) {$/;"	f
usage	$C2_ROOT/tools/tester/tester.c2	/^fn void usage(const char* name) {$/;"	f
usage_counter	$C2_ROOT/ir/usage_counter.c2	/^module usage_counter;$/;"	m
useColor	$C2_ROOT/ast/utils.c2	/^fn bool useColor() {$/;"	f
useColor	$C2_ROOT/ast_utils/color.c2	/^public fn bool useColor() {$/;"	f
use_fn	$C2_ROOT/tools/c2rename.c2	/^fn void use_fn(void* arg, const Dest* res) {$/;"	f
use_fn	$C2_ROOT/tools/c2tags.c2	/^fn void use_fn(void* arg, const Dest* res) {$/;"	f
use_fn_multi	$C2_ROOT/tools/c2tags.c2	/^fn void use_fn_multi(void* arg, const Dest* res) {$/;"	f
used	$C2_ROOT/libs/sokol/c/sokol_gfx.h	/^          type used in the vertex shader. NOTE that the default base type$/;"	t
used	$C2_ROOT/libs/sokol_/c/sokol_gfx.h	/^          type used in the vertex shader. NOTE that the default base type$/;"	t
used_nodes	$C2_ROOT/generator/radix_tree/radix_tree_fs.c2	/^fn u32 Tree.used_nodes(const Tree* t) {$/;"	f
userdata	$C2_ROOT/libs/sokol/sokol_app.c2i	/^fn void* userdata() @(cname="sapp_userdata");$/;"	f
userdata	$C2_ROOT/libs/sokol/sokol_audio.c2i	/^fn void* userdata() @(cname="saudio_userdata");$/;"	f
userdata	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^fn void* userdata() @(cname="sapp_userdata");$/;"	f
userdata	$C2_ROOT/libs/sokol_/sokol_audio.c2i	/^fn void* userdata() @(cname="saudio_userdata");$/;"	f
usize	$C2_ROOT/libs/c2/usize.c2i	/^module usize;$/;"	m
usleep	$C2_ROOT/libs/libc/unistd.c2i	/^fn i32 usleep(c_ulonglong __useconds);$/;"	f
usualUnaryConversions	$C2_ROOT/analyser/module_analyser_expr.c2	/^fn QualType usualUnaryConversions(Expr* e) {$/;"	f
usual_arithmetic_conversion	$C2_ROOT/analyser/conversion_checker.c2	/^public fn QualType usual_arithmetic_conversion(const BuiltinType* b1, const BuiltinType* b2) {$/;"	f
utf8	$C2_ROOT/common/utf8.c2	/^module utf8;$/;"	m
utils	$C2_ROOT/common/utils.c2	/^module utils;$/;"	m
v2f	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn void v2f(c_float x, c_float y) @(cname="sgl_v2f");$/;"	f
v2f	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn void v2f(c_float x, c_float y) @(cname="sgl_v2f");$/;"	f
v2fC1i	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn void v2fC1i(c_float x, c_float y, u32 rgba) @(cname="sgl_v2f_c1i");$/;"	f
v2fC1i	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn void v2fC1i(c_float x, c_float y, u32 rgba) @(cname="sgl_v2f_c1i");$/;"	f
v2fC3b	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn void v2fC3b(c_float x, c_float y, u8 r, u8 g, u8 b) @(cname="sgl_v2f_c3b");$/;"	f
v2fC3b	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn void v2fC3b(c_float x, c_float y, u8 r, u8 g, u8 b) @(cname="sgl_v2f_c3b");$/;"	f
v2fC3f	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn void v2fC3f(c_float x, c_float y, c_float r, c_float g, c_float b) @(cname="sgl_v2f_c3f");$/;"	f
v2fC3f	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn void v2fC3f(c_float x, c_float y, c_float r, c_float g, c_float b) @(cname="sgl_v2f_c3f");$/;"	f
v2fC4b	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn void v2fC4b(c_float x, c_float y, u8 r, u8 g, u8 b, u8 a) @(cname="sgl_v2f_c4b");$/;"	f
v2fC4b	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn void v2fC4b(c_float x, c_float y, u8 r, u8 g, u8 b, u8 a) @(cname="sgl_v2f_c4b");$/;"	f
v2fC4f	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn void v2fC4f(c_float x, c_float y, c_float r, c_float g, c_float b, c_float a) @(cname="sgl_v2/;"	f
v2fC4f	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn void v2fC4f(c_float x, c_float y, c_float r, c_float g, c_float b, c_float a) @(cname="sgl_v2/;"	f
v2fT2f	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn void v2fT2f(c_float x, c_float y, c_float u, c_float v) @(cname="sgl_v2f_t2f");$/;"	f
v2fT2f	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn void v2fT2f(c_float x, c_float y, c_float u, c_float v) @(cname="sgl_v2f_t2f");$/;"	f
v2fT2fC1i	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn void v2fT2fC1i(c_float x, c_float y, c_float u, c_float v, u32 rgba) @(cname="sgl_v2f_t2f_c1i/;"	f
v2fT2fC1i	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn void v2fT2fC1i(c_float x, c_float y, c_float u, c_float v, u32 rgba) @(cname="sgl_v2f_t2f_c1i/;"	f
v2fT2fC3b	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn void v2fT2fC3b(c_float x, c_float y, c_float u, c_float v, u8 r, u8 g, u8 b) @(cname="sgl_v2f/;"	f
v2fT2fC3b	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn void v2fT2fC3b(c_float x, c_float y, c_float u, c_float v, u8 r, u8 g, u8 b) @(cname="sgl_v2f/;"	f
v2fT2fC3f	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn void v2fT2fC3f(c_float x, c_float y, c_float u, c_float v, c_float r, c_float g, c_float b) @/;"	f
v2fT2fC3f	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn void v2fT2fC3f(c_float x, c_float y, c_float u, c_float v, c_float r, c_float g, c_float b) @/;"	f
v2fT2fC4b	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn void v2fT2fC4b(c_float x, c_float y, c_float u, c_float v, u8 r, u8 g, u8 b, u8 a) @(cname="s/;"	f
v2fT2fC4b	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn void v2fT2fC4b(c_float x, c_float y, c_float u, c_float v, u8 r, u8 g, u8 b, u8 a) @(cname="s/;"	f
v2fT2fC4f	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn void v2fT2fC4f(c_float x, c_float y, c_float u, c_float v, c_float r, c_float g, c_float b, c/;"	f
v2fT2fC4f	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn void v2fT2fC4f(c_float x, c_float y, c_float u, c_float v, c_float r, c_float g, c_float b, c/;"	f
v3f	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn void v3f(c_float x, c_float y, c_float z) @(cname="sgl_v3f");$/;"	f
v3f	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn void v3f(c_float x, c_float y, c_float z) @(cname="sgl_v3f");$/;"	f
v3fC1i	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn void v3fC1i(c_float x, c_float y, c_float z, u32 rgba) @(cname="sgl_v3f_c1i");$/;"	f
v3fC1i	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn void v3fC1i(c_float x, c_float y, c_float z, u32 rgba) @(cname="sgl_v3f_c1i");$/;"	f
v3fC3b	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn void v3fC3b(c_float x, c_float y, c_float z, u8 r, u8 g, u8 b) @(cname="sgl_v3f_c3b");$/;"	f
v3fC3b	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn void v3fC3b(c_float x, c_float y, c_float z, u8 r, u8 g, u8 b) @(cname="sgl_v3f_c3b");$/;"	f
v3fC3f	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn void v3fC3f(c_float x, c_float y, c_float z, c_float r, c_float g, c_float b) @(cname="sgl_v3/;"	f
v3fC3f	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn void v3fC3f(c_float x, c_float y, c_float z, c_float r, c_float g, c_float b) @(cname="sgl_v3/;"	f
v3fC4b	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn void v3fC4b(c_float x, c_float y, c_float z, u8 r, u8 g, u8 b, u8 a) @(cname="sgl_v3f_c4b");$/;"	f
v3fC4b	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn void v3fC4b(c_float x, c_float y, c_float z, u8 r, u8 g, u8 b, u8 a) @(cname="sgl_v3f_c4b");$/;"	f
v3fC4f	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn void v3fC4f(c_float x, c_float y, c_float z, c_float r, c_float g, c_float b, c_float a) @(cn/;"	f
v3fC4f	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn void v3fC4f(c_float x, c_float y, c_float z, c_float r, c_float g, c_float b, c_float a) @(cn/;"	f
v3fT2f	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn void v3fT2f(c_float x, c_float y, c_float z, c_float u, c_float v) @(cname="sgl_v3f_t2f");$/;"	f
v3fT2f	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn void v3fT2f(c_float x, c_float y, c_float z, c_float u, c_float v) @(cname="sgl_v3f_t2f");$/;"	f
v3fT2fC1i	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn void v3fT2fC1i(c_float x, c_float y, c_float z, c_float u, c_float v, u32 rgba) @(cname="sgl_/;"	f
v3fT2fC1i	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn void v3fT2fC1i(c_float x, c_float y, c_float z, c_float u, c_float v, u32 rgba) @(cname="sgl_/;"	f
v3fT2fC3b	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn void v3fT2fC3b(c_float x, c_float y, c_float z, c_float u, c_float v, u8 r, u8 g, u8 b) @(cna/;"	f
v3fT2fC3b	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn void v3fT2fC3b(c_float x, c_float y, c_float z, c_float u, c_float v, u8 r, u8 g, u8 b) @(cna/;"	f
v3fT2fC3f	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn void v3fT2fC3f(c_float x, c_float y, c_float z, c_float u, c_float v, c_float r, c_float g, c/;"	f
v3fT2fC3f	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn void v3fT2fC3f(c_float x, c_float y, c_float z, c_float u, c_float v, c_float r, c_float g, c/;"	f
v3fT2fC4b	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn void v3fT2fC4b(c_float x, c_float y, c_float z, c_float u, c_float v, u8 r, u8 g, u8 b, u8 a)/;"	f
v3fT2fC4b	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn void v3fT2fC4b(c_float x, c_float y, c_float z, c_float u, c_float v, u8 r, u8 g, u8 b, u8 a)/;"	f
v3fT2fC4f	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn void v3fT2fC4f(c_float x, c_float y, c_float z, c_float u, c_float v, c_float r, c_float g, c/;"	f
v3fT2fC4f	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn void v3fT2fC4f(c_float x, c_float y, c_float z, c_float u, c_float v, c_float r, c_float g, c/;"	f
va_end	$C2_ROOT/libs/c2/varargs.c2i	/^fn void va_end(va_list ap);$/;"	f
va_end	$C2_ROOT/libs/libc/stdarg.c2i	/^fn void va_end(va_list ap);$/;"	f
va_list	$C2_ROOT/libs/c2/varargs.c2i	/^type va_list struct @(cname="va_list") {$/;"	t
va_list	$C2_ROOT/libs/libc/stdarg.c2i	/^type va_list struct @(cname="va_list") {$/;"	t
va_start	$C2_ROOT/libs/c2/varargs.c2i	/^fn void va_start(va_list ap, ...);$/;"	f
va_start	$C2_ROOT/libs/libc/stdarg.c2i	/^fn void va_start(va_list ap, const c_char* last);$/;"	f
validBinOpKind	$C2_ROOT/analyser/module_analyser_binop.c2	/^fn bool validBinOpKind(QualType t) {$/;"	f
valloc	$C2_ROOT/libs/libc/stdlib.c2i	/^fn void* valloc(c_size size);$/;"	f
value_maplist	$C2_ROOT/common/value_maplist.c2	/^module value_maplist;$/;"	m
varargs	$C2_ROOT/libs/c2/varargs.c2i	/^module varargs;$/;"	m
vdprintf	$C2_ROOT/libs/libc/stdio.c2i	/^fn c_int vdprintf(c_int __fd, const c_char *format, va_list ap);$/;"	f
version	$C2_ROOT/libs/lua/lua.c2i	/^fn const Number* version(State *L) @(cname="lua_version");$/;"	f
versionsort	$C2_ROOT/libs/libc/libc_dirent.c2i	/^fn c_int versionsort(const Dirent**, const Dirent**);$/;"	f
vertexBufferDesc	$C2_ROOT/libs/sokol/sokol_shape.c2i	/^fn BufferDesc vertexBufferDesc(Buffer* buf) @(cname="sshape_vertex_buffer_desc");$/;"	f
vertexBufferDesc	$C2_ROOT/libs/sokol_/sokol_shape.c2i	/^fn BufferDesc vertexBufferDesc(Buffer* buf) @(cname="sshape_vertex_buffer_desc");$/;"	f
vertexBufferLayoutState	$C2_ROOT/libs/sokol/sokol_shape.c2i	/^fn VertexBufferLayoutState vertexBufferLayoutState() @(cname="sshape_vertex_buffer_layout_state"/;"	f
vertexBufferLayoutState	$C2_ROOT/libs/sokol_/sokol_shape.c2i	/^fn VertexBufferLayoutState vertexBufferLayoutState() @(cname="sshape_vertex_buffer_layout_state"/;"	f
vfprintf	$C2_ROOT/libs/libc/stdio.c2i	/^fn c_int vfprintf(FILE* stream, const c_char *format, va_list ap);$/;"	f
viewport	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn void viewport(c_int x, c_int y, c_int w, c_int h, bool origin_top_left) @(cname="sgl_viewport/;"	f
viewport	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn void viewport(c_int x, c_int y, c_int w, c_int h, bool origin_top_left) @(cname="sgl_viewport/;"	f
viewportf	$C2_ROOT/libs/sokol/sokol_gl.c2i	/^fn void viewportf(c_float x, c_float y, c_float w, c_float h, bool origin_top_left) @(cname="sgl/;"	f
viewportf	$C2_ROOT/libs/sokol_/sokol_gl.c2i	/^fn void viewportf(c_float x, c_float y, c_float w, c_float h, bool origin_top_left) @(cname="sgl/;"	f
visit	$C2_ROOT/ast/instance_table.c2	/^fn void InstanceTable.visit(const InstanceTable* t, const ast.FunctionDecl* fd, TemplateVisitor /;"	f
visit	$C2_ROOT/common/library_list.c2	/^public fn void List.visit(const List* l, Visitor visitor, void* arg) {$/;"	f
visit	$C2_ROOT/common/module_list.c2	/^public fn void List.visit(const List* l, Visitor visitor, void* arg) {$/;"	f
visitASTs	$C2_ROOT/ast/module.c2	/^public fn void Module.visitASTs(const Module* m, ASTVisitor visitor, void* arg) {$/;"	f
visitArrayValues	$C2_ROOT/ast/ast.c2	/^fn void AST.visitArrayValues(AST* a, ArrayValueVisitor visitor, void* arg) {$/;"	f
visitArrayValues	$C2_ROOT/ast/module.c2	/^public fn void Module.visitArrayValues(const Module* m, ArrayValueVisitor visitor, void* arg) {$/;"	f
visitDecls	$C2_ROOT/ast/ast.c2	/^public fn void AST.visitDecls(const AST* a, DeclVisitor visitor, void* arg) {$/;"	f
visitDecls	$C2_ROOT/ast/module.c2	/^public fn void Module.visitDecls(const Module* m, DeclVisitor visitor, void* arg) {$/;"	f
visitDeclsWithoutImports	$C2_ROOT/ast/ast.c2	/^fn void AST.visitDeclsWithoutImports(const AST* a, DeclVisitor visitor, void* arg) {$/;"	f
visitDeclsWithoutImports	$C2_ROOT/ast/module.c2	/^public fn void Module.visitDeclsWithoutImports(const Module* m, DeclVisitor visitor, void* arg) /;"	f
visitFiles	$C2_ROOT/common/source_mgr.c2	/^public fn void SourceMgr.visitFiles(const SourceMgr* sm, void* arg, Visitor visitor) @(unused) {$/;"	f
visitFunctions	$C2_ROOT/ast/ast.c2	/^public fn void AST.visitFunctions(const AST* a, FunctionVisitor visitor, void* arg) {$/;"	f
visitFunctions	$C2_ROOT/ast/module.c2	/^public fn void Module.visitFunctions(const Module* m, FunctionVisitor visitor, void* arg) {$/;"	f
visitImports	$C2_ROOT/ast/ast.c2	/^public fn void AST.visitImports(const AST* a, ImportVisitor visitor, void* arg) {$/;"	f
visitImports	$C2_ROOT/ast/module.c2	/^public fn void Module.visitImports(const Module* m, ImportVisitor visitor, void* arg) {$/;"	f
visitInstances	$C2_ROOT/ast/module.c2	/^public fn void Module.visitInstances(const Module* m, ast.FunctionDecl* fd, TemplateVisitor visi/;"	f
visitLibs	$C2_ROOT/common/build_target.c2	/^public fn void Target.visitLibs(const Target* t, library_list.Visitor visitor, void* arg) {$/;"	f
visitModules	$C2_ROOT/common/component.c2	/^public fn void Component.visitModules(const Component* c, module_list.Visitor visitor, void* arg/;"	f
visitStaticAsserts	$C2_ROOT/ast/ast.c2	/^public fn void AST.visitStaticAsserts(AST* a, StaticAssertVisitor visitor, void* arg) @(unused) /;"	f
visitStaticAsserts	$C2_ROOT/ast/module.c2	/^public fn void Module.visitStaticAsserts(const Module* m, StaticAssertVisitor visitor, void* arg/;"	f
visitTypeDecls	$C2_ROOT/ast/ast.c2	/^public fn void AST.visitTypeDecls(const AST* a, TypeDeclVisitor visitor, void* arg) {$/;"	f
visitTypeDecls	$C2_ROOT/ast/module.c2	/^public fn void Module.visitTypeDecls(const Module* m, TypeDeclVisitor visitor, void* arg) {$/;"	f
visitTypeFunctions	$C2_ROOT/ast/ast.c2	/^fn void AST.visitTypeFunctions(const AST* a, FunctionVisitor visitor, void* arg) {$/;"	f
visitTypeFunctions	$C2_ROOT/ast/module.c2	/^public fn void Module.visitTypeFunctions(const Module* m, FunctionVisitor visitor, void* arg) {$/;"	f
visitVarDecls	$C2_ROOT/ast/ast.c2	/^public fn void AST.visitVarDecls(const AST* a, VarDeclVisitor visitor, void* arg) {$/;"	f
visitVarDecls	$C2_ROOT/ast/module.c2	/^public fn void Module.visitVarDecls(const Module* m, VarDeclVisitor visitor, void* arg) {$/;"	f
void	$C2_ROOT/ast/instantiator.c2	/^public type OpaqueErrorfn fn void (void* arg, src_loc.SrcLoc loc, Decl* decl);$/;"	f
void	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^type Dbg_fn fn void(void*, c_int, const char *, c_int, const char *);$/;"	f
vprint_errormsg	$C2_ROOT/output/unit_test/libunit_test.dylib	/^fn void vprint_errormsg(const char* fmt, va_list ap) {$/;"	f
vprint_errormsg	$C2_ROOT/plugins/unit_test2.c2	/^fn void vprint_errormsg(const char* fmt, va_list ap) {$/;"	f
vprintf	$C2_ROOT/ast_utils/string_buffer.c2	/^public fn void Buf.vprintf(Buf* buf, const char* format, va_list args) {$/;"	f
vprintf	$C2_ROOT/libs/libc/stdio.c2i	/^fn c_int vprintf(const c_char* format, va_list ap);$/;"	f
vs	$C2_ROOT/libs/sokol/c/sokol_gfx.h	/^    Compatibility rules for image-sample-type vs sampler-type are as follows:$/;"	t
vs	$C2_ROOT/libs/sokol_/c/sokol_gfx.h	/^    Compatibility rules for image-sample-type vs sampler-type are as follows:$/;"	t
vsnprintf	$C2_ROOT/libs/libc/stdio.c2i	/^fn c_int vsnprintf(c_char* str, c_size size, const c_char *format, va_list ap);$/;"	f
vsprintf	$C2_ROOT/libs/libc/stdio.c2i	/^fn c_int vsprintf(c_char* str, const c_char *format, va_list ap);$/;"	f
wait	$C2_ROOT/libs/libc/unistd.c2i	/^fn Pid wait(c_int* wstatus);$/;"	f
wait	$C2_ROOT/libs/pthread/pthread.c2i	/^fn c_int Cond.wait(Cond* cond, Mutex* mutex) @(cname="pthread_cond_wait");$/;"	f
wait	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn void Thread.wait(Thread* thread, c_int* status) @(cname="SDL_WaitThread");$/;"	f
waitEventTimeout	$C2_ROOT/libs/sdl2/sdl.c2i	/^fn c_int waitEventTimeout(Event* event, c_int timeout_ms) @(cname="SDL_WaitEventTimeout");$/;"	f
wait_cqe	$C2_ROOT/libs/io_uring/io_uring.c2i	/^fn c_int Ring.wait_cqe(Ring* ring, Cqe **cqe_ptr) @(cname="io_uring_wait_cqe")$/;"	f
wait_cqe_nr	$C2_ROOT/libs/io_uring/io_uring.c2i	/^fn c_int Ring.wait_cqe_nr(Ring *ring, Cqe** cqe_ptr, u32 wait_nr) @(cname="io_uring_wait_cqe_nr"/;"	f
waitpid	$C2_ROOT/libs/libc/unistd.c2i	/^fn Pid waitpid(Pid pid, c_int* wstatus, c_int options);$/;"	f
warn	$C2_ROOT/analyser/module_analyser.c2	/^fn void Analyser.warn(Analyser* ma, SrcLoc loc, const char* format @(printf_format), ...) {$/;"	f
warn	$C2_ROOT/common/console.c2	/^public fn void warn(const char* format @(printf_format), ...) {$/;"	f
warn	$C2_ROOT/common/diagnostics.c2	/^public fn void Diags.warn(Diags* diags, SrcLoc loc, const char* format @(printf_format), ...) {$/;"	f
warn2	$C2_ROOT/common/diagnostics.c2	/^public fn void Diags.warn2(Diags* diags, SrcLoc loc, const char* format, va_list args) {$/;"	f
warning	$C2_ROOT/compiler/c2recipe_parser.c2	/^fn void Parser.warning(Parser* p, const char* format @(printf_format), ...) {$/;"	f
warning_flags	$C2_ROOT/common/warning_flags.c2	/^module warning_flags;$/;"	m
wcstombs	$C2_ROOT/libs/libc/stdlib.c2i	/^fn c_int wcstombs(c_char* __s, const c_int* __pwcs, c_size __n);$/;"	f
wgpuCommandEncoder	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn void* wgpuCommandEncoder() @(cname="sg_wgpu_command_encoder");$/;"	f
wgpuCommandEncoder	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn void* wgpuCommandEncoder() @(cname="sg_wgpu_command_encoder");$/;"	f
wgpuComputePassEncoder	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn void* wgpuComputePassEncoder() @(cname="sg_wgpu_compute_pass_encoder");$/;"	f
wgpuComputePassEncoder	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn void* wgpuComputePassEncoder() @(cname="sg_wgpu_compute_pass_encoder");$/;"	f
wgpuDevice	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn void* wgpuDevice() @(cname="sg_wgpu_device");$/;"	f
wgpuDevice	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn void* wgpuDevice() @(cname="sg_wgpu_device");$/;"	f
wgpuGetDepthStencilView	$C2_ROOT/libs/sokol/sokol_app.c2i	/^fn void* wgpuGetDepthStencilView() @(cname="sapp_wgpu_get_depth_stencil_view");$/;"	f
wgpuGetDepthStencilView	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^fn void* wgpuGetDepthStencilView() @(cname="sapp_wgpu_get_depth_stencil_view");$/;"	f
wgpuGetDevice	$C2_ROOT/libs/sokol/sokol_app.c2i	/^fn void* wgpuGetDevice() @(cname="sapp_wgpu_get_device");$/;"	f
wgpuGetDevice	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^fn void* wgpuGetDevice() @(cname="sapp_wgpu_get_device");$/;"	f
wgpuGetRenderView	$C2_ROOT/libs/sokol/sokol_app.c2i	/^fn void* wgpuGetRenderView() @(cname="sapp_wgpu_get_render_view");$/;"	f
wgpuGetRenderView	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^fn void* wgpuGetRenderView() @(cname="sapp_wgpu_get_render_view");$/;"	f
wgpuGetResolveView	$C2_ROOT/libs/sokol/sokol_app.c2i	/^fn void* wgpuGetResolveView() @(cname="sapp_wgpu_get_resolve_view");$/;"	f
wgpuGetResolveView	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^fn void* wgpuGetResolveView() @(cname="sapp_wgpu_get_resolve_view");$/;"	f
wgpuQueryBufferInfo	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn WgpuBufferInfo wgpuQueryBufferInfo(Buffer buf) @(cname="sg_wgpu_query_buffer_info");$/;"	f
wgpuQueryBufferInfo	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn WgpuBufferInfo wgpuQueryBufferInfo(Buffer buf) @(cname="sg_wgpu_query_buffer_info");$/;"	f
wgpuQueryImageInfo	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn WgpuImageInfo wgpuQueryImageInfo(Image img) @(cname="sg_wgpu_query_image_info");$/;"	f
wgpuQueryImageInfo	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn WgpuImageInfo wgpuQueryImageInfo(Image img) @(cname="sg_wgpu_query_image_info");$/;"	f
wgpuQueryPipelineInfo	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn WgpuPipelineInfo wgpuQueryPipelineInfo(Pipeline pip) @(cname="sg_wgpu_query_pipeline_info");$/;"	f
wgpuQueryPipelineInfo	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn WgpuPipelineInfo wgpuQueryPipelineInfo(Pipeline pip) @(cname="sg_wgpu_query_pipeline_info");$/;"	f
wgpuQuerySamplerInfo	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn WgpuSamplerInfo wgpuQuerySamplerInfo(Sampler smp) @(cname="sg_wgpu_query_sampler_info");$/;"	f
wgpuQuerySamplerInfo	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn WgpuSamplerInfo wgpuQuerySamplerInfo(Sampler smp) @(cname="sg_wgpu_query_sampler_info");$/;"	f
wgpuQueryShaderInfo	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn WgpuShaderInfo wgpuQueryShaderInfo(Shader shd) @(cname="sg_wgpu_query_shader_info");$/;"	f
wgpuQueryShaderInfo	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn WgpuShaderInfo wgpuQueryShaderInfo(Shader shd) @(cname="sg_wgpu_query_shader_info");$/;"	f
wgpuQueryViewInfo	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn WgpuViewInfo wgpuQueryViewInfo(View view) @(cname="sg_wgpu_query_view_info");$/;"	f
wgpuQueryViewInfo	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn WgpuViewInfo wgpuQueryViewInfo(View view) @(cname="sg_wgpu_query_view_info");$/;"	f
wgpuQueue	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn void* wgpuQueue() @(cname="sg_wgpu_queue");$/;"	f
wgpuQueue	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn void* wgpuQueue() @(cname="sg_wgpu_queue");$/;"	f
wgpuRenderPassEncoder	$C2_ROOT/libs/sokol/sokol_gfx.c2i	/^fn void* wgpuRenderPassEncoder() @(cname="sg_wgpu_render_pass_encoder");$/;"	f
wgpuRenderPassEncoder	$C2_ROOT/libs/sokol_/sokol_gfx.c2i	/^fn void* wgpuRenderPassEncoder() @(cname="sg_wgpu_render_pass_encoder");$/;"	f
what	$C2_ROOT/libs/sokol/c/sokol_app.h	/^    type what struct fields actually contain useful values, so you$/;"	t
what	$C2_ROOT/libs/sokol_/c/sokol_app.h	/^    type what struct fields actually contain useful values, so you$/;"	t
when	$C2_ROOT/libs/sokol/c/sokol_gfx.h	/^    The default image type when creating an image is SG_IMAGETYPE_2D.$/;"	t
when	$C2_ROOT/libs/sokol_/c/sokol_gfx.h	/^    The default image type when creating an image is SG_IMAGETYPE_2D.$/;"	t
while_assign	$C2_ROOT/ir_examples/cond_decl.c2	/^fn void while_assign(i32 a, i32 loops) {$/;"	f
while_decl	$C2_ROOT/ir_examples/cond_decl.c2	/^fn void while_decl(i32 loops) {$/;"	f
width	$C2_ROOT/libs/sokol/sokol_app.c2i	/^fn c_int width() @(cname="sapp_width");$/;"	f
width	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^fn c_int width() @(cname="sapp_width");$/;"	f
widthf	$C2_ROOT/libs/sokol/sokol_app.c2i	/^fn c_float widthf() @(cname="sapp_widthf");$/;"	f
widthf	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^fn c_float widthf() @(cname="sapp_widthf");$/;"	f
will	$C2_ROOT/libs/sokol/c/sokol_gfx.h	/^    is used, otherwise the default base_type will be SG_SHADERATTRBASETYPE_UNDEFINED$/;"	t
will	$C2_ROOT/libs/sokol_/c/sokol_gfx.h	/^    is used, otherwise the default base_type will be SG_SHADERATTRBASETYPE_UNDEFINED$/;"	t
win32GetHwnd	$C2_ROOT/libs/sokol/sokol_app.c2i	/^fn void* win32GetHwnd() @(cname="sapp_win32_get_hwnd");$/;"	f
win32GetHwnd	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^fn void* win32GetHwnd() @(cname="sapp_win32_get_hwnd");$/;"	f
with	$C2_ROOT/libs/sokol/c/sokol_gfx.h	/^      texture-sample-type with the correct sampler-type). For GLSL an$/;"	t
with	$C2_ROOT/libs/sokol_/c/sokol_gfx.h	/^      texture-sample-type with the correct sampler-type). For GLSL an$/;"	t
within	$C2_ROOT/libs/sdl2/sdl.c2i	/^       largest datatype within the union, which is 8 bytes on 64-bit$/;"	t
words_resize	$C2_ROOT/generator/radix_tree/radix_tree.c2	/^fn void Tree.words_resize(Tree* t, u32 capacity) {$/;"	f
worker_main	$C2_ROOT/ir/work_queue.c2	/^fn void* worker_main(void* arg) {$/;"	f
write	$C2_ROOT/common/file/writer.c2	/^public fn bool File.write(File* file, const void* data, usize len) {$/;"	f
write	$C2_ROOT/common/manifest_writer.c2	/^public fn void write(const char* dir, component.Component* c, const char* filename) {$/;"	f
write	$C2_ROOT/generator/c/c_generator.c2	/^fn void Generator.write(Generator* gen, const char* output_dir, const char* filename, string_buf/;"	f
write	$C2_ROOT/generator/c2refs.c2	/^public fn bool Refs.write(Refs* r, const char* filename) {$/;"	f
write	$C2_ROOT/libs/libc/unistd.c2i	/^fn c_ssize write(c_int fd, const void* buf, c_size count);$/;"	f
write2	$C2_ROOT/common/file/writer.c2	/^fn isize write2(i32 hd, const void* data, usize len) {$/;"	f
writeCallExterns	$C2_ROOT/generator/c/c_generator_trace.c2	/^fn void Generator.writeCallExterns(Generator* gen, string_buffer.Buf* out) {$/;"	f
writeCalls	$C2_ROOT/generator/c/c_generator_trace.c2	/^fn void Generator.writeCalls(Generator* gen, string_buffer.Buf* out) {$/;"	f
writeFile	$C2_ROOT/tools/tester/test_db.c2	/^fn void Db.writeFile(Db* db, const char* filename, const char* data, u32 len) {$/;"	f
write_file_or_die	$C2_ROOT/compiler/main.c2	/^fn void write_file_or_die(const char* filename, string_buffer.Buf* buf) {$/;"	f
write_files	$C2_ROOT/generator/c/c_generator.c2	/^fn void Generator.write_files(Generator* gen) {$/;"	f
writev	$C2_ROOT/libs/libc/uio.c2i	/^fn isize writev(c_int fd, const Iovec* iovec, c_int count);$/;"	f
x11GetDisplay	$C2_ROOT/libs/sokol/sokol_app.c2i	/^fn void* x11GetDisplay() @(cname="sapp_x11_get_display");$/;"	f
x11GetDisplay	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^fn void* x11GetDisplay() @(cname="sapp_x11_get_display");$/;"	f
x11GetWindow	$C2_ROOT/libs/sokol/sokol_app.c2i	/^fn void* x11GetWindow() @(cname="sapp_x11_get_window");$/;"	f
x11GetWindow	$C2_ROOT/libs/sokol_/sokol_app.c2i	/^fn void* x11GetWindow() @(cname="sapp_x11_get_window");$/;"	f
x509_crt_free	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^fn void x509_crt_free(X509_crt *crt) @(cname="mbedtls_x509_crt_free");$/;"	f
x509_crt_info	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^fn c_int x509_crt_info(char *buf, c_size size, const char *prefix, const X509_crt *crt) @(cname=/;"	f
x509_crt_init	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^fn void x509_crt_init(X509_crt* crt) @(cname="mbedtls_x509_crt_init");$/;"	f
x509_crt_parse	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^fn c_int x509_crt_parse( X509_crt *chain, const c_uchar *buf, c_size buflen ) @(cname="mbedtls_x/;"	f
x509_crt_parse_file	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^fn c_int x509_crt_parse_file( X509_crt *chain, const char *path) @(cname="mbedtls_x509_crt_parse/;"	f
x509_crt_parse_path	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^fn c_int x509_crt_parse_path( X509_crt *chain, const char *path ) @(cname="mbedtls_x509_crt_pars/;"	f
x509_crt_verify_info	$C2_ROOT/libs/mbedtls/mbedtls.c2i	/^fn c_int x509_crt_verify_info(char *buf, c_size size, const char *prefix, c_uint flags) @(cname=/;"	f
xmove	$C2_ROOT/libs/lua/lua.c2i	/^fn void xmove(State *from, State *to, c_int n) @(cname="lua_xmove");$/;"	f
xor	$C2_ROOT/ast/value.c2	/^fn Value Value.xor(const Value* v1, const Value* v2) {$/;"	f
yaml	$C2_ROOT/common/yaml/yaml_data.c2	/^module yaml;$/;"	m
yaml	$C2_ROOT/common/yaml/yaml_dump.c2	/^module yaml;$/;"	m
yaml	$C2_ROOT/common/yaml/yaml_iterator.c2	/^module yaml;$/;"	m
yaml	$C2_ROOT/common/yaml/yaml_parser.c2	/^module yaml;$/;"	m
yaml	$C2_ROOT/common/yaml/yaml_tokenizer.c2	/^module yaml;$/;"	m
yieldk	$C2_ROOT/libs/lua/lua.c2i	/^fn c_int yieldk(State *L, c_int nresults, KContext ctx,$/;"	f
