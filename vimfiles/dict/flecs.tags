Acyclic	$FLECS/$FLECS/flecs.h	/^static const flecs::entity_t Acyclic = EcsAcyclic;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
AddTickSource	$FLECS/$FLECS/flecs.c	/^void AddTickSource(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:	signature:(ecs_iter_t * it)
AggregateStats	$FLECS/$FLECS/flecs.c	/^void AggregateStats(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:	signature:(ecs_iter_t * it)
Alert	$FLECS/$FLECS/flecs.h	/^    struct Alert { };$/;"	s	struct:flecs::alerts
AlertsActive	$FLECS/$FLECS/flecs.h	/^    using AlertsActive = EcsAlertsActive;$/;"	t	struct:flecs::alerts	typeref:typename:EcsAlertsActive
AlwaysOverride	$FLECS/$FLECS/flecs.h	/^static const flecs::entity_t AlwaysOverride = EcsAlwaysOverride;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
Amount	$FLECS/$FLECS/flecs.h	/^struct Amount { };$/;"	s	struct:flecs::units
Ampere	$FLECS/$FLECS/flecs.h	/^struct Ampere { };$/;"	s	struct:flecs::units::electric_current
And	$FLECS/$FLECS/flecs.h	/^    And = EcsAnd,$/;"	e	enum:flecs::oper_kind_t
AndFrom	$FLECS/$FLECS/flecs.h	/^    AndFrom = EcsAndFrom,$/;"	e	enum:flecs::oper_kind_t
Angle	$FLECS/$FLECS/flecs.h	/^struct Angle { };$/;"	s	struct:flecs::units
Any	$FLECS/$FLECS/flecs.h	/^static const flecs::entity_t Any = EcsAny;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
Array	$FLECS/$FLECS/flecs.h	/^using Array = EcsArray;$/;"	t	namespace:flecs	typeref:typename:EcsArray
ArrayType	$FLECS/$FLECS/flecs.h	/^static const type_kind_t ArrayType = EcsArrayType;$/;"	v	namespace:flecs::meta	typeref:typename:const type_kind_t
Atto	$FLECS/$FLECS/flecs.h	/^struct Atto { };$/;"	s	struct:flecs::units
BS_MAX	$FLECS/$FLECS/flecs.c	/^#define BS_MAX /;"	d	file:
Bar	$FLECS/$FLECS/flecs.h	/^struct Bar { };$/;"	s	struct:flecs::units::pressure
BaseClass	$FLECS/$FLECS/flecs.h	/^    using BaseClass = query_builder_i<Base, Components ...>;$/;"	t	struct:flecs::system_builder_i	typeref:typename:query_builder_i<Base,Components...>
Bel	$FLECS/$FLECS/flecs.h	/^struct Bel { };$/;"	s	struct:flecs::units
BindingCtx	$FLECS/$FLECS/flecs.h	/^    using BindingCtx = _::component_binding_ctx;$/;"	t	struct:flecs::component	typeref:typename:_::component_binding_ctx
Bitmask	$FLECS/$FLECS/flecs.h	/^using Bitmask = EcsBitmask;$/;"	t	namespace:flecs	typeref:typename:EcsBitmask
BitmaskType	$FLECS/$FLECS/flecs.h	/^static const type_kind_t BitmaskType = EcsBitmaskType;$/;"	v	namespace:flecs::meta	typeref:typename:const type_kind_t
Bits	$FLECS/$FLECS/flecs.h	/^struct Bits { };$/;"	s	struct:flecs::units::data
BitsPerSecond	$FLECS/$FLECS/flecs.h	/^struct BitsPerSecond { };$/;"	s	struct:flecs::units::datarate
Bool	$FLECS/$FLECS/flecs.h	/^static const primitive_kind_t Bool = EcsBool;$/;"	v	namespace:flecs::meta	typeref:typename:const primitive_kind_t
Brief	$FLECS/$FLECS/flecs.h	/^static const flecs::entity_t Brief = EcsDocBrief;$/;"	v	namespace:flecs::doc	typeref:typename:const flecs::entity_t
Byte	$FLECS/$FLECS/flecs.h	/^static const primitive_kind_t Byte = EcsByte;$/;"	v	namespace:flecs::meta	typeref:typename:const primitive_kind_t
Bytes	$FLECS/$FLECS/flecs.h	/^struct Bytes { };$/;"	s	struct:flecs::units::data
BytesPerSecond	$FLECS/$FLECS/flecs.h	/^struct BytesPerSecond { };$/;"	s	struct:flecs::units::datarate
Candela	$FLECS/$FLECS/flecs.h	/^struct Candela { };$/;"	s	struct:flecs::units::luminous_intensity
Cascade	$FLECS/$FLECS/flecs.h	/^static const uint32_t Cascade = EcsCascade;$/;"	v	namespace:flecs	typeref:typename:const uint32_t
Celsius	$FLECS/$FLECS/flecs.h	/^struct Celsius { };$/;"	s	struct:flecs::units::temperature
Centi	$FLECS/$FLECS/flecs.h	/^struct Centi { };$/;"	s	struct:flecs::units
CentiMeters	$FLECS/$FLECS/flecs.h	/^struct CentiMeters { };$/;"	s	struct:flecs::units::length
Char	$FLECS/$FLECS/flecs.h	/^static const primitive_kind_t Char = EcsChar;$/;"	v	namespace:flecs::meta	typeref:typename:const primitive_kind_t
ChildOf	$FLECS/$FLECS/flecs.h	/^static const flecs::entity_t ChildOf = EcsChildOf;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
Class	$FLECS/$FLECS/flecs.h	/^    using Class = event_builder_typed<E>;$/;"	t	struct:flecs::event_builder_typed	typeref:typename:event_builder_typed<E>
ClearMetricInstance	$FLECS/$FLECS/flecs.c	/^static void ClearMetricInstance(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:	signature:(ecs_iter_t * it)
Color	$FLECS/$FLECS/flecs.h	/^static const flecs::entity_t Color = EcsDocColor;$/;"	v	namespace:flecs::doc	typeref:typename:const flecs::entity_t
ColumnArray	$FLECS/$FLECS/flecs.h	/^    using ColumnArray = flecs::array<int32_t, sizeof...(Args)>;$/;"	t	struct:flecs::_::entity_with_delegate_impl
Component	$FLECS/$FLECS/flecs.h	/^using Component = EcsComponent;$/;"	t	namespace:flecs	typeref:typename:EcsComponent
Constant	$FLECS/$FLECS/flecs.h	/^static const flecs::entity_t Constant = EcsConstant;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
Counter	$FLECS/$FLECS/flecs.h	/^    struct Counter { };$/;"	s	struct:flecs::metrics
CounterId	$FLECS/$FLECS/flecs.h	/^    struct CounterId { };$/;"	s	struct:flecs::metrics
CounterIncrement	$FLECS/$FLECS/flecs.h	/^    struct CounterIncrement { };$/;"	s	struct:flecs::metrics
CustomType	$FLECS/$FLECS/flecs.h	/^static const type_kind_t CustomType = EcsOpaqueType;$/;"	v	namespace:flecs::meta	typeref:typename:const type_kind_t
DATA	$FLECS/$FLECS/flecs.c	/^#define DATA(/;"	d	file:	signature:(array,size,offset)
Data	$FLECS/$FLECS/flecs.h	/^struct Data { };$/;"	s	struct:flecs::units
DataRate	$FLECS/$FLECS/flecs.h	/^struct DataRate { };$/;"	s	struct:flecs::units
Date	$FLECS/$FLECS/flecs.h	/^struct Date { };$/;"	s	struct:flecs::units::time
Days	$FLECS/$FLECS/flecs.h	/^struct Days { };$/;"	s	struct:flecs::units::duration
Deca	$FLECS/$FLECS/flecs.h	/^struct Deca { };$/;"	s	struct:flecs::units
Deci	$FLECS/$FLECS/flecs.h	/^struct Deci { };$/;"	s	struct:flecs::units
DeciBel	$FLECS/$FLECS/flecs.h	/^struct DeciBel { };$/;"	s	struct:flecs::units
DefaultChildComponent	$FLECS/$FLECS/flecs.h	/^static const flecs::entity_t DefaultChildComponent = EcsDefaultChildComponent;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
Degrees	$FLECS/$FLECS/flecs.h	/^struct Degrees { };$/;"	s	struct:flecs::units::angle
Delegate	$FLECS/$FLECS/flecs.h	/^    using Delegate = _::entity_observer_delegate<Func>;$/;"	t	function:flecs::entity_builder::observe	typeref:typename:_::entity_observer_delegate<Func>
Delete	$FLECS/$FLECS/flecs.h	/^static const flecs::entity_t Delete = EcsDelete;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
DependsOn	$FLECS/$FLECS/flecs.h	/^static const flecs::entity_t DependsOn = EcsDependsOn;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
DequeueRest	$FLECS/$FLECS/flecs.c	/^void DequeueRest(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:	signature:(ecs_iter_t * it)
Desc	$FLECS/$FLECS/flecs.h	/^static const uint32_t Desc = EcsDesc;$/;"	v	namespace:flecs	typeref:typename:const uint32_t
Description	$FLECS/$FLECS/flecs.h	/^using Description = EcsDocDescription;$/;"	t	namespace:flecs::doc	typeref:typename:EcsDocDescription
Detail	$FLECS/$FLECS/flecs.h	/^static const flecs::entity_t Detail = EcsDocDetail;$/;"	v	namespace:flecs::doc	typeref:typename:const flecs::entity_t
DisableRest	$FLECS/$FLECS/flecs.c	/^void DisableRest(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:	signature:(ecs_iter_t * it)
Disabled	$FLECS/$FLECS/flecs.h	/^static const flecs::entity_t Disabled = EcsDisabled;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
DontInherit	$FLECS/$FLECS/flecs.h	/^static const flecs::entity_t DontInherit = EcsDontInherit;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
Down	$FLECS/$FLECS/flecs.h	/^static const uint32_t Down = EcsDown;$/;"	v	namespace:flecs	typeref:typename:const uint32_t
DummyArray	$FLECS/$FLECS/flecs.h	/^    using DummyArray = flecs::array<int, sizeof...(Args)>;$/;"	t	struct:flecs::_::entity_with_delegate_impl
Duration	$FLECS/$FLECS/flecs.h	/^struct Duration { };$/;"	s	struct:flecs::units
ECS_ACCESS_VIOLATION	$FLECS/$FLECS/flecs.h	/^#define ECS_ACCESS_VIOLATION /;"	d
ECS_ALERT_MAX_SEVERITY_FILTERS	$FLECS/$FLECS/flecs.h	/^#define ECS_ALERT_MAX_SEVERITY_FILTERS /;"	d
ECS_ALIGN	$FLECS/$FLECS/flecs.h	/^#define ECS_ALIGN(/;"	d	signature:(size,alignment)
ECS_ALIGNOF	$FLECS/$FLECS/flecs.h	/^#define ECS_ALIGNOF(/;"	d	signature:(T)
ECS_ALREADY_DEFINED	$FLECS/$FLECS/flecs.h	/^#define ECS_ALREADY_DEFINED /;"	d
ECS_ALREADY_IN_USE	$FLECS/$FLECS/flecs.h	/^#define ECS_ALREADY_IN_USE /;"	d
ECS_AND	$FLECS/$FLECS/flecs.c	/^const ecs_id_t ECS_AND =                                           (1ull << 60);$/;"	v	typeref:typename:const ecs_id_t
ECS_BINARY_BOOL_OP	$FLECS/$FLECS/flecs.c	/^#define ECS_BINARY_BOOL_OP(/;"	d	file:	signature:(left,right,result,op)
ECS_BINARY_COND_EQ_OP	$FLECS/$FLECS/flecs.c	/^#define ECS_BINARY_COND_EQ_OP(/;"	d	file:	signature:(left,right,result,op)
ECS_BINARY_COND_OP	$FLECS/$FLECS/flecs.c	/^#define ECS_BINARY_COND_OP(/;"	d	file:	signature:(left,right,result,op)
ECS_BINARY_OP	$FLECS/$FLECS/flecs.c	/^#define ECS_BINARY_OP(/;"	d	file:	signature:(left,right,result,op)
ECS_BINARY_OP_T	$FLECS/$FLECS/flecs.c	/^#define ECS_BINARY_OP_T(/;"	d	file:	signature:(left,right,result,op,R,T)
ECS_BINARY_UINT_OP	$FLECS/$FLECS/flecs.c	/^#define ECS_BINARY_UINT_OP(/;"	d	file:	signature:(left,right,result,op)
ECS_BITMASK	$FLECS/$FLECS/flecs.h	/^#define ECS_BITMASK(/;"	d	signature:(name,...)
ECS_BITMASK_DECLARE	$FLECS/$FLECS/flecs.h	/^#define ECS_BITMASK_DECLARE(/;"	d	signature:(name,type_desc)
ECS_BITMASK_ECS_META_IMPL	$FLECS/$FLECS/flecs.h	/^#define ECS_BITMASK_ECS_META_IMPL /;"	d
ECS_BITMASK_EXTERN	$FLECS/$FLECS/flecs.h	/^#define ECS_BITMASK_EXTERN(/;"	d	signature:(name,type_desc)
ECS_BITMASK_IMPL	$FLECS/$FLECS/flecs.h	/^#define ECS_BITMASK_IMPL(/;"	d	signature:(name,type_desc)
ECS_BITMASK_TYPE	$FLECS/$FLECS/flecs.h	/^#define ECS_BITMASK_TYPE(/;"	d	signature:(name,...)
ECS_BIT_CLEAR	$FLECS/$FLECS/flecs.h	/^#define ECS_BIT_CLEAR(/;"	d	signature:(flags,bit)
ECS_BIT_COND	$FLECS/$FLECS/flecs.h	/^#define ECS_BIT_COND(/;"	d	signature:(flags,bit,cond)
ECS_BIT_IS_SET	$FLECS/$FLECS/flecs.h	/^#define ECS_BIT_IS_SET(/;"	d	signature:(flags,bit)
ECS_BIT_SET	$FLECS/$FLECS/flecs.h	/^#define ECS_BIT_SET(/;"	d	signature:(flags,bit)
ECS_BLACK	$FLECS/$FLECS/flecs.h	/^#define ECS_BLACK /;"	d
ECS_BLUE	$FLECS/$FLECS/flecs.h	/^#define ECS_BLUE /;"	d
ECS_BOLD	$FLECS/$FLECS/flecs.h	/^#define ECS_BOLD /;"	d
ECS_BT_BUF_SIZE	$FLECS/$FLECS/flecs.c	/^#define ECS_BT_BUF_SIZE /;"	d	file:
ECS_BUCKET_END	$FLECS/$FLECS/flecs.c	/^#define ECS_BUCKET_END(/;"	d	file:	signature:(b,c)
ECS_CAST	$FLECS/$FLECS/flecs.h	/^#define ECS_CAST(/;"	d	signature:(T,V)
ECS_CLANG_VERSION	$FLECS/$FLECS/flecs.h	/^        #define ECS_CLANG_VERSION /;"	d
ECS_CLASS_LEN	$FLECS/$FLECS/flecs.c	/^#define ECS_CLASS_LEN /;"	d	file:
ECS_CLASS_PREFIX	$FLECS/$FLECS/flecs.c	/^#define ECS_CLASS_PREFIX /;"	d	file:
ECS_COLUMN_INDEX_OUT_OF_RANGE	$FLECS/$FLECS/flecs.h	/^#define ECS_COLUMN_INDEX_OUT_OF_RANGE /;"	d
ECS_COLUMN_IS_NOT_SHARED	$FLECS/$FLECS/flecs.h	/^#define ECS_COLUMN_IS_NOT_SHARED /;"	d
ECS_COLUMN_IS_SHARED	$FLECS/$FLECS/flecs.h	/^#define ECS_COLUMN_IS_SHARED /;"	d
ECS_COLUMN_TYPE_MISMATCH	$FLECS/$FLECS/flecs.h	/^#define ECS_COLUMN_TYPE_MISMATCH /;"	d
ECS_COMPARE	$FLECS/$FLECS/flecs.h	/^#define ECS_COMPARE(/;"	d	signature:(id,...)
ECS_COMPONENT	$FLECS/$FLECS/flecs.h	/^#define ECS_COMPONENT(/;"	d	signature:(world,id)
ECS_COMPONENT_DECLARE	$FLECS/$FLECS/flecs.c	/^static ECS_COMPONENT_DECLARE(EcsMetricOneOfInstance);$/;"	p	file:	signature:(EcsMetricOneOfInstance)
ECS_COMPONENT_DECLARE	$FLECS/$FLECS/flecs.h	/^extern ECS_COMPONENT_DECLARE(EcsScript);$/;"	p	typeref:typename:FLECS_API	signature:(EcsScript)
ECS_COMPONENT_DEFINE	$FLECS/$FLECS/flecs.h	/^#define ECS_COMPONENT_DEFINE(/;"	d	signature:(world,id_)
ECS_COMPONENT_MASK	$FLECS/$FLECS/flecs.h	/^#define ECS_COMPONENT_MASK /;"	d
ECS_COMPONENT_NOT_REGISTERED	$FLECS/$FLECS/flecs.h	/^#define ECS_COMPONENT_NOT_REGISTERED /;"	d
ECS_CONCAT	$FLECS/$FLECS/flecs.h	/^#define ECS_CONCAT(/;"	d	signature:(a,b)
ECS_CONSTRAINT_VIOLATED	$FLECS/$FLECS/flecs.h	/^#define ECS_CONSTRAINT_VIOLATED /;"	d
ECS_CONST_CAST	$FLECS/$FLECS/flecs.h	/^#define ECS_CONST_CAST(/;"	d	signature:(type,value)
ECS_CONST_LEN	$FLECS/$FLECS/flecs.c	/^#define ECS_CONST_LEN /;"	d	file:
ECS_CONST_PREFIX	$FLECS/$FLECS/flecs.c	/^#define ECS_CONST_PREFIX /;"	d	file:
ECS_COPY	$FLECS/$FLECS/flecs.h	/^#define ECS_COPY(/;"	d	signature:(type,dst_var,src_var,...)
ECS_COPY_IMPL	$FLECS/$FLECS/flecs.h	/^#define ECS_COPY_IMPL(/;"	d	signature:(type,dst_var,src_var,...)
ECS_COUNTER_APPEND	$FLECS/$FLECS/flecs.c	/^#define ECS_COUNTER_APPEND(/;"	d	file:	signature:(reply,s,field,brief)
ECS_COUNTER_APPEND_T	$FLECS/$FLECS/flecs.c	/^#define ECS_COUNTER_APPEND_T(/;"	d	file:	signature:(reply,s,field,t,brief)
ECS_COUNTER_RECORD	$FLECS/$FLECS/flecs.c	/^#define ECS_COUNTER_RECORD(/;"	d	file:	signature:(m,t,value)
ECS_CTOR	$FLECS/$FLECS/flecs.h	/^#define ECS_CTOR(/;"	d	signature:(type,var,...)
ECS_CYAN	$FLECS/$FLECS/flecs.h	/^#define ECS_CYAN /;"	d
ECS_CYCLE_DETECTED	$FLECS/$FLECS/flecs.h	/^#define ECS_CYCLE_DETECTED /;"	d
ECS_DECLARE	$FLECS/$FLECS/flecs.c	/^ECS_DECLARE(EcsZetta);$/;"	p	file:	signature:(EcsZetta)
ECS_DECLARE	$FLECS/$FLECS/flecs.h	/^FLECS_API extern ECS_DECLARE(EcsZetta);$/;"	p	typeref:typename:FLECS_API	signature:(EcsZetta)
ECS_DEPRECATED	$FLECS/$FLECS/flecs.h	/^#define ECS_DEPRECATED(/;"	d	signature:(msg)
ECS_DOUBLE_FREE	$FLECS/$FLECS/flecs.h	/^#define ECS_DOUBLE_FREE /;"	d
ECS_DTOR	$FLECS/$FLECS/flecs.h	/^#define ECS_DTOR(/;"	d	signature:(type,var,...)
ECS_ELEM	$FLECS/$FLECS/flecs.h	/^#define ECS_ELEM(/;"	d	signature:(ptr,size,index)
ECS_ELEM_T	$FLECS/$FLECS/flecs.h	/^#define ECS_ELEM_T(/;"	d	signature:(o,T,index)
ECS_ENTITY	$FLECS/$FLECS/flecs.h	/^#define ECS_ENTITY(/;"	d	signature:(world,id,...)
ECS_ENTITY_DECLARE	$FLECS/$FLECS/flecs.h	/^#define ECS_ENTITY_DECLARE /;"	d
ECS_ENTITY_DEFINE	$FLECS/$FLECS/flecs.h	/^#define ECS_ENTITY_DEFINE(/;"	d	signature:(world,id_,...)
ECS_ENTITY_MASK	$FLECS/$FLECS/flecs.h	/^#define ECS_ENTITY_MASK /;"	d
ECS_ENTITY_TO_JSON_INIT	$FLECS/$FLECS/flecs.h	/^#define ECS_ENTITY_TO_JSON_INIT /;"	d
ECS_ENUM	$FLECS/$FLECS/flecs.h	/^#define ECS_ENUM(/;"	d	signature:(name,...)
ECS_ENUM_DECLARE	$FLECS/$FLECS/flecs.h	/^#define ECS_ENUM_DECLARE(/;"	d	signature:(name,type_desc)
ECS_ENUM_ECS_META_IMPL	$FLECS/$FLECS/flecs.h	/^#define ECS_ENUM_ECS_META_IMPL /;"	d
ECS_ENUM_EXTERN	$FLECS/$FLECS/flecs.h	/^#define ECS_ENUM_EXTERN(/;"	d	signature:(name,type_desc)
ECS_ENUM_IMPL	$FLECS/$FLECS/flecs.h	/^#define ECS_ENUM_IMPL(/;"	d	signature:(name,type_desc)
ECS_ENUM_LEN	$FLECS/$FLECS/flecs.c	/^#define ECS_ENUM_LEN /;"	d	file:
ECS_ENUM_PREFIX	$FLECS/$FLECS/flecs.c	/^#define ECS_ENUM_PREFIX /;"	d	file:
ECS_ENUM_TYPE	$FLECS/$FLECS/flecs.h	/^#define ECS_ENUM_TYPE(/;"	d	signature:(name,...)
ECS_EQ	$FLECS/$FLECS/flecs.h	/^#define ECS_EQ(/;"	d	signature:(a,b)
ECS_EQZERO	$FLECS/$FLECS/flecs.h	/^#define ECS_EQZERO(/;"	d	signature:(a)
ECS_ERR_STR	$FLECS/$FLECS/flecs.c	/^#define ECS_ERR_STR(/;"	d	file:	signature:(code)
ECS_EVENT_DESC_ID_COUNT_MAX	$FLECS/$FLECS/flecs.h	/^#define ECS_EVENT_DESC_ID_COUNT_MAX /;"	d
ECS_FILTER_INIT	$FLECS/$FLECS/flecs.c	/^ecs_filter_t ECS_FILTER_INIT = { .hdr = { .magic = ecs_filter_t_magic }};$/;"	v	typeref:typename:ecs_filter_t
ECS_FUNC_NAME	$FLECS/$FLECS/flecs.h	/^#define ECS_FUNC_NAME /;"	d
ECS_FUNC_NAME_BACK	$FLECS/$FLECS/flecs.h	/^#define ECS_FUNC_NAME_BACK /;"	d
ECS_FUNC_NAME_FRONT	$FLECS/$FLECS/flecs.h	/^#define ECS_FUNC_NAME_FRONT(/;"	d	signature:(type,name)
ECS_FUNC_TYPE_LEN	$FLECS/$FLECS/flecs.h	/^#define ECS_FUNC_TYPE_LEN(/;"	d	signature:(type,name,str)
ECS_GAUGE_APPEND	$FLECS/$FLECS/flecs.c	/^#define ECS_GAUGE_APPEND(/;"	d	file:	signature:(reply,s,field,brief)
ECS_GAUGE_APPEND_T	$FLECS/$FLECS/flecs.c	/^#define ECS_GAUGE_APPEND_T(/;"	d	file:	signature:(reply,s,field,t,brief)
ECS_GAUGE_RECORD	$FLECS/$FLECS/flecs.c	/^#define ECS_GAUGE_RECORD(/;"	d	file:	signature:(m,t,value)
ECS_GENERATION	$FLECS/$FLECS/flecs.h	/^#define ECS_GENERATION(e)             ((e & ECS_GENERATION_/;"	d	signature:(e)
ECS_GENERATION_INC	$FLECS/$FLECS/flecs.h	/^#define ECS_GENERATION_INC(/;"	d	signature:(e)
ECS_GENERATION_MASK	$FLECS/$FLECS/flecs.h	/^#define ECS_GENERATION_MASK /;"	d
ECS_GREEN	$FLECS/$FLECS/flecs.h	/^#define ECS_GREEN /;"	d
ECS_GREY	$FLECS/$FLECS/flecs.h	/^#define ECS_GREY /;"	d
ECS_HAS_ID_FLAG	$FLECS/$FLECS/flecs.h	/^#define ECS_HAS_ID_FLAG(/;"	d	signature:(e,flag)
ECS_HAS_RELATION	$FLECS/$FLECS/flecs.h	/^#define ECS_HAS_RELATION(/;"	d	signature:(e,rel)
ECS_HOOK_IMPL	$FLECS/$FLECS/flecs.h	/^#define ECS_HOOK_IMPL(/;"	d	signature:(type,func,var,...)
ECS_HTTP_CACHE_PURGE_TIMEOUT	$FLECS/$FLECS/flecs.c	/^#define ECS_HTTP_CACHE_PURGE_TIMEOUT /;"	d	file:
ECS_HTTP_CACHE_TIMEOUT	$FLECS/$FLECS/flecs.c	/^#define ECS_HTTP_CACHE_TIMEOUT /;"	d	file:
ECS_HTTP_CONNECTION_PURGE_RETRY_COUNT	$FLECS/$FLECS/flecs.c	/^#define ECS_HTTP_CONNECTION_PURGE_RETRY_COUNT /;"	d	file:
ECS_HTTP_CONNECTION_PURGE_TIMEOUT	$FLECS/$FLECS/flecs.c	/^#define ECS_HTTP_CONNECTION_PURGE_TIMEOUT /;"	d	file:
ECS_HTTP_HEADER_COUNT_MAX	$FLECS/$FLECS/flecs.h	/^#define ECS_HTTP_HEADER_COUNT_MAX /;"	d
ECS_HTTP_METHOD_LEN_MAX	$FLECS/$FLECS/flecs.c	/^#define ECS_HTTP_METHOD_LEN_MAX /;"	d	file:
ECS_HTTP_MIN_DEQUEUE_INTERVAL	$FLECS/$FLECS/flecs.c	/^#define ECS_HTTP_MIN_DEQUEUE_INTERVAL /;"	d	file:
ECS_HTTP_MIN_STATS_INTERVAL	$FLECS/$FLECS/flecs.c	/^#define ECS_HTTP_MIN_STATS_INTERVAL /;"	d	file:
ECS_HTTP_QUERY_PARAM_COUNT_MAX	$FLECS/$FLECS/flecs.h	/^#define ECS_HTTP_QUERY_PARAM_COUNT_MAX /;"	d
ECS_HTTP_REPLY_INIT	$FLECS/$FLECS/flecs.h	/^#define ECS_HTTP_REPLY_INIT /;"	d
ECS_HTTP_REQUEST_LEN_MAX	$FLECS/$FLECS/flecs.c	/^#define ECS_HTTP_REQUEST_LEN_MAX /;"	d	file:
ECS_HTTP_REQUEST_RECV_RETRY	$FLECS/$FLECS/flecs.c	/^#define ECS_HTTP_REQUEST_RECV_RETRY /;"	d	file:
ECS_HTTP_SEND_QUEUE_MAX	$FLECS/$FLECS/flecs.c	/^#define ECS_HTTP_SEND_QUEUE_MAX /;"	d	file:
ECS_HTTP_SEND_RECV_BUFFER_SIZE	$FLECS/$FLECS/flecs.c	/^#define ECS_HTTP_SEND_RECV_BUFFER_SIZE /;"	d	file:
ECS_ID_FLAGS_MASK	$FLECS/$FLECS/flecs.h	/^#define ECS_ID_FLAGS_MASK /;"	d
ECS_ID_IN_USE	$FLECS/$FLECS/flecs.h	/^#define ECS_ID_IN_USE /;"	d
ECS_ID_ON_DELETE	$FLECS/$FLECS/flecs.h	/^#define ECS_ID_ON_DELETE(/;"	d	signature:(flags)
ECS_ID_ON_DELETE_FLAG	$FLECS/$FLECS/flecs.h	/^#define ECS_ID_ON_DELETE_FLAG(/;"	d	signature:(id)
ECS_ID_ON_DELETE_TARGET	$FLECS/$FLECS/flecs.h	/^#define ECS_ID_ON_DELETE_TARGET(/;"	d	signature:(flags)
ECS_ID_ON_DELETE_TARGET_FLAG	$FLECS/$FLECS/flecs.h	/^#define ECS_ID_ON_DELETE_TARGET_FLAG(/;"	d	signature:(id)
ECS_IMPORT	$FLECS/$FLECS/flecs.h	/^#define ECS_IMPORT(/;"	d	signature:(world,id)
ECS_INCONSISTENT_COMPONENT_ACTION	$FLECS/$FLECS/flecs.h	/^#define ECS_INCONSISTENT_COMPONENT_ACTION /;"	d
ECS_INCONSISTENT_COMPONENT_ID	$FLECS/$FLECS/flecs.h	/^#define ECS_INCONSISTENT_COMPONENT_ID /;"	d
ECS_INCONSISTENT_NAME	$FLECS/$FLECS/flecs.h	/^#define ECS_INCONSISTENT_NAME /;"	d
ECS_INTERNAL_ERROR	$FLECS/$FLECS/flecs.h	/^#define ECS_INTERNAL_ERROR /;"	d
ECS_INVALID_COMPONENT_ALIGNMENT	$FLECS/$FLECS/flecs.h	/^#define ECS_INVALID_COMPONENT_ALIGNMENT /;"	d
ECS_INVALID_COMPONENT_SIZE	$FLECS/$FLECS/flecs.h	/^#define ECS_INVALID_COMPONENT_SIZE /;"	d
ECS_INVALID_CONVERSION	$FLECS/$FLECS/flecs.h	/^#define ECS_INVALID_CONVERSION /;"	d
ECS_INVALID_FROM_WORKER	$FLECS/$FLECS/flecs.h	/^#define ECS_INVALID_FROM_WORKER /;"	d
ECS_INVALID_OPERATION	$FLECS/$FLECS/flecs.h	/^#define ECS_INVALID_OPERATION /;"	d
ECS_INVALID_PARAMETER	$FLECS/$FLECS/flecs.h	/^#define ECS_INVALID_PARAMETER /;"	d
ECS_INVALID_WHILE_READONLY	$FLECS/$FLECS/flecs.h	/^#define ECS_INVALID_WHILE_READONLY /;"	d
ECS_IS_PAIR	$FLECS/$FLECS/flecs.h	/^#define ECS_IS_PAIR(/;"	d	signature:(id)
ECS_ITER_TO_JSON_INIT	$FLECS/$FLECS/flecs.h	/^#define ECS_ITER_TO_JSON_INIT /;"	d
ECS_LEAK_DETECTED	$FLECS/$FLECS/flecs.h	/^#define ECS_LEAK_DETECTED /;"	d
ECS_LOAD_FACTOR	$FLECS/$FLECS/flecs.c	/^#define ECS_LOAD_FACTOR /;"	d	file:
ECS_LOCKED_STORAGE	$FLECS/$FLECS/flecs.h	/^#define ECS_LOCKED_STORAGE /;"	d
ECS_MAGENTA	$FLECS/$FLECS/flecs.h	/^#define ECS_MAGENTA /;"	d
ECS_MAX	$FLECS/$FLECS/flecs.h	/^#define ECS_MAX(/;"	d	signature:(a,b)
ECS_MAX_COMPONENT_ID	$FLECS/$FLECS/flecs.h	/^#define ECS_MAX_COMPONENT_ID /;"	d
ECS_MAX_DEFER_STACK	$FLECS/$FLECS/flecs.c	/^#define ECS_MAX_DEFER_STACK /;"	d	file:
ECS_MAX_JOBS_PER_WORKER	$FLECS/$FLECS/flecs.c	/^#define ECS_MAX_JOBS_PER_WORKER /;"	d	file:
ECS_MAX_RECURSION	$FLECS/$FLECS/flecs.h	/^#define ECS_MAX_RECURSION /;"	d
ECS_MAX_TOKEN_SIZE	$FLECS/$FLECS/flecs.c	/^#define ECS_MAX_TOKEN_SIZE /;"	d	file:
ECS_MAX_TOKEN_SIZE	$FLECS/$FLECS/flecs.h	/^#define ECS_MAX_TOKEN_SIZE /;"	d
ECS_MEMBER_DESC_CACHE_SIZE	$FLECS/$FLECS/flecs.h	/^#define ECS_MEMBER_DESC_CACHE_SIZE /;"	d
ECS_META_COMPONENT	$FLECS/$FLECS/flecs.h	/^#define ECS_META_COMPONENT(/;"	d	signature:(world,name)
ECS_META_IDENTIFIER_LENGTH	$FLECS/$FLECS/flecs.c	/^#define ECS_META_IDENTIFIER_LENGTH /;"	d	file:
ECS_META_IMPL_CALL	$FLECS/$FLECS/flecs.h	/^#define ECS_META_IMPL_CALL(/;"	d	signature:(base,impl,name,type_desc)
ECS_META_IMPL_CALL_INNER	$FLECS/$FLECS/flecs.h	/^#define ECS_META_IMPL_CALL_INNER(/;"	d	signature:(base,impl,name,type_desc)
ECS_META_MAX_SCOPE_DEPTH	$FLECS/$FLECS/flecs.h	/^#define ECS_META_MAX_SCOPE_DEPTH /;"	d
ECS_METRIC_FIRST	$FLECS/$FLECS/flecs.c	/^#define ECS_METRIC_FIRST(/;"	d	file:	signature:(stats)
ECS_METRIC_LAST	$FLECS/$FLECS/flecs.c	/^#define ECS_METRIC_LAST(/;"	d	file:	signature:(stats)
ECS_MIN	$FLECS/$FLECS/flecs.h	/^#define ECS_MIN(/;"	d	signature:(a,b)
ECS_MISSING_OS_API	$FLECS/$FLECS/flecs.h	/^#define ECS_MISSING_OS_API /;"	d
ECS_MISSING_SYMBOL	$FLECS/$FLECS/flecs.h	/^#define ECS_MISSING_SYMBOL /;"	d
ECS_MODULE	$FLECS/$FLECS/flecs.h	/^#define ECS_MODULE(/;"	d	signature:(world,id)
ECS_MODULE_DEFINE	$FLECS/$FLECS/flecs.h	/^#define ECS_MODULE_DEFINE(/;"	d	signature:(world,id)
ECS_MODULE_UNDEFINED	$FLECS/$FLECS/flecs.h	/^#define ECS_MODULE_UNDEFINED /;"	d
ECS_MOVE	$FLECS/$FLECS/flecs.h	/^#define ECS_MOVE(/;"	d	signature:(type,dst_var,src_var,...)
ECS_MOVE_IMPL	$FLECS/$FLECS/flecs.h	/^#define ECS_MOVE_IMPL(/;"	d	signature:(type,dst_var,src_var,...)
ECS_NAME_BUFFER_LENGTH	$FLECS/$FLECS/flecs.c	/^#define ECS_NAME_BUFFER_LENGTH /;"	d	file:
ECS_NAME_IN_USE	$FLECS/$FLECS/flecs.h	/^#define ECS_NAME_IN_USE /;"	d
ECS_NEQ	$FLECS/$FLECS/flecs.h	/^#define ECS_NEQ(/;"	d	signature:(a,b)
ECS_NEQZERO	$FLECS/$FLECS/flecs.h	/^#define ECS_NEQZERO(/;"	d	signature:(a)
ECS_NORMAL	$FLECS/$FLECS/flecs.h	/^#define ECS_NORMAL /;"	d
ECS_NOT	$FLECS/$FLECS/flecs.c	/^const ecs_id_t ECS_NOT =                                           (1ull << 58);$/;"	v	typeref:typename:const ecs_id_t	file:
ECS_NOT_A_COMPONENT	$FLECS/$FLECS/flecs.h	/^#define ECS_NOT_A_COMPONENT /;"	d
ECS_OBJECT_MAGIC	$FLECS/$FLECS/flecs.c	/^#define ECS_OBJECT_MAGIC /;"	d	file:
ECS_OBSERVER	$FLECS/$FLECS/flecs.h	/^#define ECS_OBSERVER(/;"	d	signature:(world,id,kind,...)
ECS_OBSERVER_DECLARE	$FLECS/$FLECS/flecs.h	/^#define ECS_OBSERVER_DECLARE(/;"	d	signature:(id)
ECS_OBSERVER_DEFINE	$FLECS/$FLECS/flecs.h	/^#define ECS_OBSERVER_DEFINE(/;"	d	signature:(world,id_,kind,...)
ECS_OFFSET	$FLECS/$FLECS/flecs.h	/^#define ECS_OFFSET(/;"	d	signature:(o,offset)
ECS_OFFSET_T	$FLECS/$FLECS/flecs.h	/^#define ECS_OFFSET_T(/;"	d	signature:(o,T)
ECS_ON_ADD	$FLECS/$FLECS/flecs.h	/^#define ECS_ON_ADD(/;"	d	signature:(type,ptr,...)
ECS_ON_REMOVE	$FLECS/$FLECS/flecs.h	/^#define ECS_ON_REMOVE(/;"	d	signature:(type,ptr,...)
ECS_ON_SET	$FLECS/$FLECS/flecs.h	/^#define ECS_ON_SET(/;"	d	signature:(type,ptr,...)
ECS_OPERATION_FAILED	$FLECS/$FLECS/flecs.h	/^#define ECS_OPERATION_FAILED /;"	d
ECS_OR	$FLECS/$FLECS/flecs.c	/^const ecs_id_t ECS_OR =                                            (1ull << 59);$/;"	v	typeref:typename:const ecs_id_t	file:
ECS_OUT_OF_MEMORY	$FLECS/$FLECS/flecs.h	/^#define ECS_OUT_OF_MEMORY /;"	d
ECS_OUT_OF_RANGE	$FLECS/$FLECS/flecs.h	/^#define ECS_OUT_OF_RANGE /;"	d
ECS_OVERRIDE	$FLECS/$FLECS/flecs.c	/^const ecs_id_t ECS_OVERRIDE =                                      (1ull << 62);$/;"	v	typeref:typename:const ecs_id_t
ECS_PAIR	$FLECS/$FLECS/flecs.c	/^const ecs_id_t ECS_PAIR =                                          (1ull << 63);$/;"	v	typeref:typename:const ecs_id_t
ECS_PAIR_FIRST	$FLECS/$FLECS/flecs.h	/^#define ECS_PAIR_FIRST(/;"	d	signature:(e)
ECS_PAIR_SECOND	$FLECS/$FLECS/flecs.h	/^#define ECS_PAIR_SECOND(/;"	d	signature:(e)
ECS_PARSER_MAX_ARGS	$FLECS/$FLECS/flecs.h	/^#define ECS_PARSER_MAX_ARGS /;"	d
ECS_PIPELINE	$FLECS/$FLECS/flecs.h	/^#define ECS_PIPELINE(/;"	d	signature:(world,id,...)
ECS_PIPELINE_DEFINE	$FLECS/$FLECS/flecs.h	/^#define ECS_PIPELINE_DEFINE(/;"	d	signature:(world,id_,...)
ECS_PREFAB	$FLECS/$FLECS/flecs.h	/^#define ECS_PREFAB(/;"	d	signature:(world,id,...)
ECS_PREFAB_DECLARE	$FLECS/$FLECS/flecs.h	/^#define ECS_PREFAB_DECLARE /;"	d
ECS_PREFAB_DEFINE	$FLECS/$FLECS/flecs.h	/^#define ECS_PREFAB_DEFINE(/;"	d	signature:(world,id,...)
ECS_PRIMITIVE	$FLECS/$FLECS/flecs.c	/^    #define ECS_PRIMITIVE(/;"	d	file:	signature:(world,type,primitive_kind)
ECS_PRIVATE	$FLECS/$FLECS/flecs.h	/^#define ECS_PRIVATE$/;"	d
ECS_PTR_CAST	$FLECS/$FLECS/flecs.h	/^#define ECS_PTR_CAST(/;"	d	signature:(type,value)
ECS_RECORD_TO_ROW	$FLECS/$FLECS/flecs.h	/^#define ECS_RECORD_TO_ROW(/;"	d	signature:(v)
ECS_RECORD_TO_ROW_FLAGS	$FLECS/$FLECS/flecs.h	/^#define ECS_RECORD_TO_ROW_FLAGS(/;"	d	signature:(v)
ECS_RED	$FLECS/$FLECS/flecs.h	/^#define ECS_RED /;"	d
ECS_REST_DEFAULT_PORT	$FLECS/$FLECS/flecs.h	/^#define ECS_REST_DEFAULT_PORT /;"	d
ECS_ROW_FLAGS_MASK	$FLECS/$FLECS/flecs.h	/^#define ECS_ROW_FLAGS_MASK /;"	d
ECS_ROW_MASK	$FLECS/$FLECS/flecs.h	/^#define ECS_ROW_MASK /;"	d
ECS_ROW_TO_RECORD	$FLECS/$FLECS/flecs.h	/^#define ECS_ROW_TO_RECORD(/;"	d	signature:(row,flags)
ECS_SIZEOF	$FLECS/$FLECS/flecs.h	/^#define ECS_SIZEOF(/;"	d	signature:(T)
ECS_SIZE_T_STR	$FLECS/$FLECS/flecs.h	/^            #define ECS_SIZE_T_STR /;"	d
ECS_SORT_TABLE	$FLECS/$FLECS/flecs.h	/^#define ECS_SORT_TABLE(/;"	d	signature:(id,...)
ECS_SORT_TABLE_WITH_COMPARE	$FLECS/$FLECS/flecs.c	/^ECS_SORT_TABLE_WITH_COMPARE(_, flecs_query_sort_table_generic, order_by, static)$/;"	f	file:	signature:(_,flecs_query_sort_table_generic,order_by,static)
ECS_SORT_TABLE_WITH_COMPARE	$FLECS/$FLECS/flecs.h	/^#define ECS_SORT_TABLE_WITH_COMPARE(/;"	d	signature:(id,op_name,compare_fn,...)
ECS_STACK_PAGE_SIZE	$FLECS/$FLECS/flecs.c	/^#define ECS_STACK_PAGE_SIZE /;"	d	file:
ECS_STAT_WINDOW	$FLECS/$FLECS/flecs.h	/^#define ECS_STAT_WINDOW /;"	d
ECS_STRBUF_ELEMENT_SIZE	$FLECS/$FLECS/flecs.h	/^#define ECS_STRBUF_ELEMENT_SIZE /;"	d
ECS_STRBUF_INIT	$FLECS/$FLECS/flecs.h	/^#define ECS_STRBUF_INIT /;"	d
ECS_STRBUF_MAX_LIST_DEPTH	$FLECS/$FLECS/flecs.h	/^#define ECS_STRBUF_MAX_LIST_DEPTH /;"	d
ECS_STRUCT	$FLECS/$FLECS/flecs.h	/^#define ECS_STRUCT(/;"	d	signature:(name,...)
ECS_STRUCT_DECLARE	$FLECS/$FLECS/flecs.h	/^#define ECS_STRUCT_DECLARE(/;"	d	signature:(name,type_desc)
ECS_STRUCT_ECS_META_IMPL	$FLECS/$FLECS/flecs.h	/^#define ECS_STRUCT_ECS_META_IMPL /;"	d
ECS_STRUCT_EXTERN	$FLECS/$FLECS/flecs.h	/^#define ECS_STRUCT_EXTERN(/;"	d	signature:(name,type_desc)
ECS_STRUCT_IMPL	$FLECS/$FLECS/flecs.h	/^#define ECS_STRUCT_IMPL(/;"	d	signature:(name,type_desc)
ECS_STRUCT_LEN	$FLECS/$FLECS/flecs.c	/^#define ECS_STRUCT_LEN /;"	d	file:
ECS_STRUCT_PREFIX	$FLECS/$FLECS/flecs.c	/^#define ECS_STRUCT_PREFIX /;"	d	file:
ECS_STRUCT_TYPE	$FLECS/$FLECS/flecs.h	/^#define ECS_STRUCT_TYPE(/;"	d	signature:(name,...)
ECS_SYSTEM	$FLECS/$FLECS/flecs.h	/^#define ECS_SYSTEM(/;"	d	signature:(world,id,phase,...)
ECS_SYSTEM_DECLARE	$FLECS/$FLECS/flecs.h	/^#define ECS_SYSTEM_DECLARE(/;"	d	signature:(id)
ECS_SYSTEM_DEFINE	$FLECS/$FLECS/flecs.h	/^#define ECS_SYSTEM_DEFINE(/;"	d	signature:(world,id_,phase,...)
ECS_TABLE_DIFF_INIT	$FLECS/$FLECS/flecs.c	/^#define ECS_TABLE_DIFF_INIT /;"	d	file:
ECS_TABLE_LOCK	$FLECS/$FLECS/flecs.h	/^#define ECS_TABLE_LOCK(/;"	d	signature:(world,table)
ECS_TABLE_UNLOCK	$FLECS/$FLECS/flecs.h	/^#define ECS_TABLE_UNLOCK(/;"	d	signature:(world,table)
ECS_TAG	$FLECS/$FLECS/flecs.h	/^#define ECS_TAG(/;"	d	signature:(world,id)
ECS_TAG_DECLARE	$FLECS/$FLECS/flecs.c	/^static ECS_TAG_DECLARE(EcsRestPlecs);$/;"	p	file:	signature:(EcsRestPlecs)
ECS_TAG_DECLARE	$FLECS/$FLECS/flecs.h	/^FLECS_API extern ECS_TAG_DECLARE(EcsMetricInstance);$/;"	p	typeref:typename:FLECS_API	signature:(EcsMetricInstance)
ECS_TAG_DEFINE	$FLECS/$FLECS/flecs.h	/^#define ECS_TAG_DEFINE(/;"	d	signature:(world,id)
ECS_TARGET_ANDROID	$FLECS/$FLECS/flecs.h	/^#define ECS_TARGET_ANDROID$/;"	d
ECS_TARGET_CLANG	$FLECS/$FLECS/flecs.h	/^#define ECS_TARGET_CLANG$/;"	d
ECS_TARGET_DARWIN	$FLECS/$FLECS/flecs.h	/^#define ECS_TARGET_DARWIN$/;"	d
ECS_TARGET_EM	$FLECS/$FLECS/flecs.h	/^#define ECS_TARGET_EM$/;"	d
ECS_TARGET_FREEBSD	$FLECS/$FLECS/flecs.h	/^#define ECS_TARGET_FREEBSD$/;"	d
ECS_TARGET_GNU	$FLECS/$FLECS/flecs.h	/^#define ECS_TARGET_GNU$/;"	d
ECS_TARGET_LINUX	$FLECS/$FLECS/flecs.h	/^#define ECS_TARGET_LINUX$/;"	d
ECS_TARGET_MINGW	$FLECS/$FLECS/flecs.h	/^#define ECS_TARGET_MINGW$/;"	d
ECS_TARGET_MSVC	$FLECS/$FLECS/flecs.h	/^#define ECS_TARGET_MSVC$/;"	d
ECS_TARGET_POSIX	$FLECS/$FLECS/flecs.h	/^#define ECS_TARGET_POSIX$/;"	d
ECS_TARGET_WINDOWS	$FLECS/$FLECS/flecs.h	/^#define ECS_TARGET_WINDOWS$/;"	d
ECS_TOGGLE	$FLECS/$FLECS/flecs.c	/^const ecs_id_t ECS_TOGGLE =                                        (1ull << 61);$/;"	v	typeref:typename:const ecs_id_t
ECS_UNSUPPORTED	$FLECS/$FLECS/flecs.h	/^#define ECS_UNSUPPORTED /;"	d
ECS_VALUE_GET	$FLECS/$FLECS/flecs.c	/^#define ECS_VALUE_GET(/;"	d	file:	signature:(value,T)
ECS_WHITE	$FLECS/$FLECS/flecs.h	/^#define ECS_WHITE /;"	d
ECS_XTOR_IMPL	$FLECS/$FLECS/flecs.h	/^#define ECS_XTOR_IMPL(/;"	d	signature:(type,postfix,var,...)
ECS_YELLOW	$FLECS/$FLECS/flecs.h	/^#define ECS_YELLOW /;"	d
EXPR_MAX_STACK_SIZE	$FLECS/$FLECS/flecs.c	/^#define EXPR_MAX_STACK_SIZE /;"	d	file:
EXP_THRESHOLD	$FLECS/$FLECS/flecs.c	/^#define EXP_THRESHOLD /;"	d	file:
EcsAcyclic	$FLECS/$FLECS/flecs.c	/^const ecs_entity_t EcsAcyclic =                     FLECS_HI_COMPONENT_ID + 23;$/;"	v	typeref:typename:const ecs_entity_t
EcsAdd	$FLECS/$FLECS/flecs.c	/^    EcsAdd,$/;"	e	enum:ecs_expr_oper_t	file:
EcsAlert	$FLECS/$FLECS/flecs.c	/^} EcsAlert;$/;"	t	typeref:struct:EcsAlert	file:
EcsAlertInstance	$FLECS/$FLECS/flecs.h	/^} EcsAlertInstance;$/;"	t	typeref:struct:EcsAlertInstance
EcsAlertTimeout	$FLECS/$FLECS/flecs.c	/^} EcsAlertTimeout;$/;"	t	typeref:struct:EcsAlertTimeout	file:
EcsAlertsActive	$FLECS/$FLECS/flecs.h	/^} EcsAlertsActive;$/;"	t	typeref:struct:EcsAlertsActive
EcsAlias	$FLECS/$FLECS/flecs.c	/^const ecs_entity_t EcsAlias =                       FLECS_HI_COMPONENT_ID + 32;$/;"	v	typeref:typename:const ecs_entity_t
EcsAlwaysOverride	$FLECS/$FLECS/flecs.c	/^const ecs_entity_t EcsAlwaysOverride =              FLECS_HI_COMPONENT_ID + 19;$/;"	v	typeref:typename:const ecs_entity_t
EcsAnd	$FLECS/$FLECS/flecs.h	/^    EcsAnd,           \/**< The term must match *\/$/;"	e	enum:ecs_oper_kind_t
EcsAndFrom	$FLECS/$FLECS/flecs.h	/^    EcsAndFrom,       \/**< Term must match all components from term id *\/$/;"	e	enum:ecs_oper_kind_t
EcsAny	$FLECS/$FLECS/flecs.c	/^const ecs_entity_t EcsAny =                         FLECS_HI_COMPONENT_ID + 11;$/;"	v	typeref:typename:const ecs_entity_t
EcsAperiodicComponentMonitors	$FLECS/$FLECS/flecs.h	/^#define EcsAperiodicComponentMonitors /;"	d
EcsAperiodicEmptyQueries	$FLECS/$FLECS/flecs.h	/^#define EcsAperiodicEmptyQueries /;"	d
EcsAperiodicEmptyTables	$FLECS/$FLECS/flecs.h	/^#define EcsAperiodicEmptyTables /;"	d
EcsArray	$FLECS/$FLECS/flecs.h	/^} EcsArray;$/;"	t	typeref:struct:EcsArray
EcsArrayType	$FLECS/$FLECS/flecs.h	/^    EcsArrayType,$/;"	e	enum:ecs_type_kind_t
EcsBitmask	$FLECS/$FLECS/flecs.h	/^} EcsBitmask;$/;"	t	typeref:struct:EcsBitmask
EcsBitmaskType	$FLECS/$FLECS/flecs.h	/^    EcsBitmaskType,$/;"	e	enum:ecs_type_kind_t
EcsBool	$FLECS/$FLECS/flecs.h	/^    EcsBool = 1,$/;"	e	enum:ecs_primitive_kind_t
EcsByte	$FLECS/$FLECS/flecs.h	/^    EcsByte,$/;"	e	enum:ecs_primitive_kind_t
EcsCascade	$FLECS/$FLECS/flecs.h	/^#define EcsCascade /;"	d
EcsChar	$FLECS/$FLECS/flecs.h	/^    EcsChar,$/;"	e	enum:ecs_primitive_kind_t
EcsChildOf	$FLECS/$FLECS/flecs.c	/^const ecs_entity_t EcsChildOf =                     FLECS_HI_COMPONENT_ID + 27;$/;"	v	typeref:typename:const ecs_entity_t
EcsCmdAdd	$FLECS/$FLECS/flecs.c	/^    EcsCmdAdd,$/;"	e	enum:ecs_cmd_kind_t	file:
EcsCmdAddModified	$FLECS/$FLECS/flecs.c	/^    EcsCmdAddModified,$/;"	e	enum:ecs_cmd_kind_t	file:
EcsCmdBulkNew	$FLECS/$FLECS/flecs.c	/^    EcsCmdBulkNew,$/;"	e	enum:ecs_cmd_kind_t	file:
EcsCmdClear	$FLECS/$FLECS/flecs.c	/^    EcsCmdClear,$/;"	e	enum:ecs_cmd_kind_t	file:
EcsCmdClone	$FLECS/$FLECS/flecs.c	/^    EcsCmdClone,$/;"	e	enum:ecs_cmd_kind_t	file:
EcsCmdDelete	$FLECS/$FLECS/flecs.c	/^    EcsCmdDelete,$/;"	e	enum:ecs_cmd_kind_t	file:
EcsCmdDisable	$FLECS/$FLECS/flecs.c	/^    EcsCmdDisable,$/;"	e	enum:ecs_cmd_kind_t	file:
EcsCmdEmplace	$FLECS/$FLECS/flecs.c	/^    EcsCmdEmplace,$/;"	e	enum:ecs_cmd_kind_t	file:
EcsCmdEnable	$FLECS/$FLECS/flecs.c	/^    EcsCmdEnable,$/;"	e	enum:ecs_cmd_kind_t	file:
EcsCmdEvent	$FLECS/$FLECS/flecs.c	/^    EcsCmdEvent,$/;"	e	enum:ecs_cmd_kind_t	file:
EcsCmdModified	$FLECS/$FLECS/flecs.c	/^    EcsCmdModified,$/;"	e	enum:ecs_cmd_kind_t	file:
EcsCmdModifiedNoHook	$FLECS/$FLECS/flecs.c	/^    EcsCmdModifiedNoHook,$/;"	e	enum:ecs_cmd_kind_t	file:
EcsCmdMut	$FLECS/$FLECS/flecs.c	/^    EcsCmdMut,$/;"	e	enum:ecs_cmd_kind_t	file:
EcsCmdOnDeleteAction	$FLECS/$FLECS/flecs.c	/^    EcsCmdOnDeleteAction,$/;"	e	enum:ecs_cmd_kind_t	file:
EcsCmdPath	$FLECS/$FLECS/flecs.c	/^    EcsCmdPath,$/;"	e	enum:ecs_cmd_kind_t	file:
EcsCmdRemove	$FLECS/$FLECS/flecs.c	/^    EcsCmdRemove,   $/;"	e	enum:ecs_cmd_kind_t	file:
EcsCmdSet	$FLECS/$FLECS/flecs.c	/^    EcsCmdSet,$/;"	e	enum:ecs_cmd_kind_t	file:
EcsCmdSkip	$FLECS/$FLECS/flecs.c	/^    EcsCmdSkip$/;"	e	enum:ecs_cmd_kind_t	file:
EcsComponent	$FLECS/$FLECS/flecs.h	/^} EcsComponent;$/;"	t	typeref:struct:EcsComponent
EcsCondAnd	$FLECS/$FLECS/flecs.c	/^    EcsCondAnd,$/;"	e	enum:ecs_expr_oper_t	file:
EcsCondEq	$FLECS/$FLECS/flecs.c	/^    EcsCondEq,$/;"	e	enum:ecs_expr_oper_t	file:
EcsCondGt	$FLECS/$FLECS/flecs.c	/^    EcsCondGt,$/;"	e	enum:ecs_expr_oper_t	file:
EcsCondGtEq	$FLECS/$FLECS/flecs.c	/^    EcsCondGtEq,$/;"	e	enum:ecs_expr_oper_t	file:
EcsCondLt	$FLECS/$FLECS/flecs.c	/^    EcsCondLt,$/;"	e	enum:ecs_expr_oper_t	file:
EcsCondLtEq	$FLECS/$FLECS/flecs.c	/^    EcsCondLtEq,$/;"	e	enum:ecs_expr_oper_t	file:
EcsCondNeq	$FLECS/$FLECS/flecs.c	/^    EcsCondNeq,$/;"	e	enum:ecs_expr_oper_t	file:
EcsCondOr	$FLECS/$FLECS/flecs.c	/^    EcsCondOr,$/;"	e	enum:ecs_expr_oper_t	file:
EcsConstant	$FLECS/$FLECS/flecs.c	/^const ecs_entity_t EcsConstant =                    FLECS_HI_COMPONENT_ID + 111;$/;"	v	typeref:typename:const ecs_entity_t
EcsDefaultChildComponent	$FLECS/$FLECS/flecs.c	/^const ecs_entity_t EcsDefaultChildComponent =       FLECS_HI_COMPONENT_ID + 55;$/;"	v	typeref:typename:const ecs_entity_t
EcsDelete	$FLECS/$FLECS/flecs.c	/^const ecs_entity_t EcsDelete =                      FLECS_HI_COMPONENT_ID + 51;$/;"	v	typeref:typename:const ecs_entity_t
EcsDependsOn	$FLECS/$FLECS/flecs.c	/^const ecs_entity_t EcsDependsOn =                   FLECS_HI_COMPONENT_ID + 29;$/;"	v	typeref:typename:const ecs_entity_t
EcsDesc	$FLECS/$FLECS/flecs.h	/^#define EcsDesc /;"	d
EcsDisabled	$FLECS/$FLECS/flecs.c	/^const ecs_entity_t EcsDisabled =                    FLECS_HI_COMPONENT_ID + 7;$/;"	v	typeref:typename:const ecs_entity_t
EcsDiv	$FLECS/$FLECS/flecs.c	/^    EcsDiv,$/;"	e	enum:ecs_expr_oper_t	file:
EcsDocBrief	$FLECS/$FLECS/flecs.c	/^const ecs_entity_t EcsDocBrief =                    FLECS_HI_COMPONENT_ID + 114;$/;"	v	typeref:typename:const ecs_entity_t
EcsDocColor	$FLECS/$FLECS/flecs.c	/^const ecs_entity_t EcsDocColor =                    FLECS_HI_COMPONENT_ID + 117;$/;"	v	typeref:typename:const ecs_entity_t
EcsDocDescription	$FLECS/$FLECS/flecs.h	/^} EcsDocDescription;$/;"	t	typeref:struct:EcsDocDescription
EcsDocDetail	$FLECS/$FLECS/flecs.c	/^const ecs_entity_t EcsDocDetail =                   FLECS_HI_COMPONENT_ID + 115;$/;"	v	typeref:typename:const ecs_entity_t
EcsDocLink	$FLECS/$FLECS/flecs.c	/^const ecs_entity_t EcsDocLink =                     FLECS_HI_COMPONENT_ID + 116;$/;"	v	typeref:typename:const ecs_entity_t
EcsDontInherit	$FLECS/$FLECS/flecs.c	/^const ecs_entity_t EcsDontInherit =                 FLECS_HI_COMPONENT_ID + 18;$/;"	v	typeref:typename:const ecs_entity_t
EcsDown	$FLECS/$FLECS/flecs.h	/^#define EcsDown /;"	d
EcsEmpty	$FLECS/$FLECS/flecs.c	/^const ecs_entity_t EcsEmpty =                       FLECS_HI_COMPONENT_ID + 62;$/;"	v	typeref:typename:const ecs_entity_t
EcsEntity	$FLECS/$FLECS/flecs.h	/^    EcsEntity,$/;"	e	enum:ecs_primitive_kind_t
EcsEntityIsId	$FLECS/$FLECS/flecs.h	/^#define EcsEntityIsId /;"	d
EcsEntityIsTarget	$FLECS/$FLECS/flecs.h	/^#define EcsEntityIsTarget /;"	d
EcsEntityIsTraversable	$FLECS/$FLECS/flecs.h	/^#define EcsEntityIsTraversable /;"	d
EcsEnum	$FLECS/$FLECS/flecs.h	/^} EcsEnum;$/;"	t	typeref:struct:EcsEnum
EcsEnumType	$FLECS/$FLECS/flecs.h	/^    EcsEnumType,$/;"	e	enum:ecs_type_kind_t
EcsEventNoOnSet	$FLECS/$FLECS/flecs.h	/^#define EcsEventNoOnSet /;"	d
EcsEventTableOnly	$FLECS/$FLECS/flecs.h	/^#define EcsEventTableOnly /;"	d
EcsExclusive	$FLECS/$FLECS/flecs.c	/^const ecs_entity_t EcsExclusive =                   FLECS_HI_COMPONENT_ID + 22;$/;"	v	typeref:typename:const ecs_entity_t
EcsExprOperUnknown	$FLECS/$FLECS/flecs.c	/^    EcsExprOperUnknown,$/;"	e	enum:ecs_expr_oper_t	file:
EcsF32	$FLECS/$FLECS/flecs.h	/^    EcsF32,$/;"	e	enum:ecs_primitive_kind_t
EcsF64	$FLECS/$FLECS/flecs.h	/^    EcsF64,$/;"	e	enum:ecs_primitive_kind_t
EcsFilter	$FLECS/$FLECS/flecs.h	/^#define EcsFilter /;"	d
EcsFilterHasCondSet	$FLECS/$FLECS/flecs.h	/^#define EcsFilterHasCondSet /;"	d
EcsFilterHasPred	$FLECS/$FLECS/flecs.h	/^#define EcsFilterHasPred /;"	d
EcsFilterHasScopes	$FLECS/$FLECS/flecs.h	/^#define EcsFilterHasScopes /;"	d
EcsFilterHasWildcards	$FLECS/$FLECS/flecs.h	/^#define EcsFilterHasWildcards /;"	d
EcsFilterIsInstanced	$FLECS/$FLECS/flecs.h	/^#define EcsFilterIsInstanced /;"	d
EcsFilterIsTrivial	$FLECS/$FLECS/flecs.h	/^#define EcsFilterIsTrivial /;"	d
EcsFilterMatchAnything	$FLECS/$FLECS/flecs.h	/^#define EcsFilterMatchAnything /;"	d
EcsFilterMatchDisabled	$FLECS/$FLECS/flecs.h	/^#define EcsFilterMatchDisabled /;"	d
EcsFilterMatchEmptyTables	$FLECS/$FLECS/flecs.h	/^#define EcsFilterMatchEmptyTables /;"	d
EcsFilterMatchOnlySelf	$FLECS/$FLECS/flecs.h	/^#define EcsFilterMatchOnlySelf /;"	d
EcsFilterMatchOnlyThis	$FLECS/$FLECS/flecs.h	/^#define EcsFilterMatchOnlyThis /;"	d
EcsFilterMatchPrefab	$FLECS/$FLECS/flecs.h	/^#define EcsFilterMatchPrefab /;"	d
EcsFilterMatchThis	$FLECS/$FLECS/flecs.h	/^#define EcsFilterMatchThis /;"	d
EcsFilterNoData	$FLECS/$FLECS/flecs.h	/^#define EcsFilterNoData /;"	d
EcsFilterOwnsStorage	$FLECS/$FLECS/flecs.h	/^#define EcsFilterOwnsStorage /;"	d
EcsFilterOwnsTermsStorage	$FLECS/$FLECS/flecs.h	/^#define EcsFilterOwnsTermsStorage /;"	d
EcsFilterPopulate	$FLECS/$FLECS/flecs.h	/^#define EcsFilterPopulate /;"	d
EcsFilterUnresolvedByName	$FLECS/$FLECS/flecs.h	/^#define EcsFilterUnresolvedByName /;"	d
EcsFinal	$FLECS/$FLECS/flecs.c	/^const ecs_entity_t EcsFinal =                       FLECS_HI_COMPONENT_ID + 17;$/;"	v	typeref:typename:const ecs_entity_t
EcsFirstUserComponentId	$FLECS/$FLECS/flecs.h	/^#define EcsFirstUserComponentId /;"	d
EcsFirstUserEntityId	$FLECS/$FLECS/flecs.h	/^#define EcsFirstUserEntityId /;"	d
EcsFlag	$FLECS/$FLECS/flecs.c	/^const ecs_entity_t EcsFlag =                        FLECS_HI_COMPONENT_ID + 9;$/;"	v	typeref:typename:const ecs_entity_t
EcsFlatten	$FLECS/$FLECS/flecs.c	/^const ecs_entity_t EcsFlatten =                     FLECS_HI_COMPONENT_ID + 54;$/;"	v	typeref:typename:const ecs_entity_t
EcsFlecs	$FLECS/$FLECS/flecs.c	/^const ecs_entity_t EcsFlecs =                       FLECS_HI_COMPONENT_ID + 1;$/;"	v	typeref:typename:const ecs_entity_t
EcsFlecsCore	$FLECS/$FLECS/flecs.c	/^const ecs_entity_t EcsFlecsCore =                   FLECS_HI_COMPONENT_ID + 2;$/;"	v	typeref:typename:const ecs_entity_t
EcsFlecsInternals	$FLECS/$FLECS/flecs.c	/^const ecs_entity_t EcsFlecsInternals =              FLECS_HI_COMPONENT_ID + 3;$/;"	v	typeref:typename:const ecs_entity_t
EcsHttpDelete	$FLECS/$FLECS/flecs.h	/^    EcsHttpDelete,$/;"	e	enum:__anonb2bcda280a03
EcsHttpGet	$FLECS/$FLECS/flecs.h	/^    EcsHttpGet,$/;"	e	enum:__anonb2bcda280a03
EcsHttpMethodUnsupported	$FLECS/$FLECS/flecs.h	/^    EcsHttpMethodUnsupported$/;"	e	enum:__anonb2bcda280a03
EcsHttpOptions	$FLECS/$FLECS/flecs.h	/^    EcsHttpOptions,$/;"	e	enum:__anonb2bcda280a03
EcsHttpPost	$FLECS/$FLECS/flecs.h	/^    EcsHttpPost,$/;"	e	enum:__anonb2bcda280a03
EcsHttpPut	$FLECS/$FLECS/flecs.h	/^    EcsHttpPut,$/;"	e	enum:__anonb2bcda280a03
EcsI16	$FLECS/$FLECS/flecs.h	/^    EcsI16,$/;"	e	enum:ecs_primitive_kind_t
EcsI32	$FLECS/$FLECS/flecs.h	/^    EcsI32,$/;"	e	enum:ecs_primitive_kind_t
EcsI64	$FLECS/$FLECS/flecs.h	/^    EcsI64,$/;"	e	enum:ecs_primitive_kind_t
EcsI8	$FLECS/$FLECS/flecs.h	/^    EcsI8,$/;"	e	enum:ecs_primitive_kind_t
EcsIPtr	$FLECS/$FLECS/flecs.h	/^    EcsIPtr,$/;"	e	enum:ecs_primitive_kind_t
EcsId	$FLECS/$FLECS/flecs.h	/^    EcsId,$/;"	e	enum:ecs_primitive_kind_t
EcsIdAlwaysOverride	$FLECS/$FLECS/flecs.h	/^#define EcsIdAlwaysOverride /;"	d
EcsIdDontInherit	$FLECS/$FLECS/flecs.h	/^#define EcsIdDontInherit /;"	d
EcsIdEventMask	$FLECS/$FLECS/flecs.h	/^#define EcsIdEventMask\\/;"	d
EcsIdExclusive	$FLECS/$FLECS/flecs.h	/^#define EcsIdExclusive /;"	d
EcsIdHasOnAdd	$FLECS/$FLECS/flecs.h	/^#define EcsIdHasOnAdd /;"	d
EcsIdHasOnRemove	$FLECS/$FLECS/flecs.h	/^#define EcsIdHasOnRemove /;"	d
EcsIdHasOnSet	$FLECS/$FLECS/flecs.h	/^#define EcsIdHasOnSet /;"	d
EcsIdHasOnTableCreate	$FLECS/$FLECS/flecs.h	/^#define EcsIdHasOnTableCreate /;"	d
EcsIdHasOnTableDelete	$FLECS/$FLECS/flecs.h	/^#define EcsIdHasOnTableDelete /;"	d
EcsIdHasOnTableEmpty	$FLECS/$FLECS/flecs.h	/^#define EcsIdHasOnTableEmpty /;"	d
EcsIdHasOnTableFill	$FLECS/$FLECS/flecs.h	/^#define EcsIdHasOnTableFill /;"	d
EcsIdHasUnSet	$FLECS/$FLECS/flecs.h	/^#define EcsIdHasUnSet /;"	d
EcsIdMarkedForDelete	$FLECS/$FLECS/flecs.h	/^#define EcsIdMarkedForDelete /;"	d
EcsIdOnDeleteDelete	$FLECS/$FLECS/flecs.h	/^#define EcsIdOnDeleteDelete /;"	d
EcsIdOnDeleteMask	$FLECS/$FLECS/flecs.h	/^#define EcsIdOnDeleteMask\\/;"	d
EcsIdOnDeleteObjectDelete	$FLECS/$FLECS/flecs.h	/^#define EcsIdOnDeleteObjectDelete /;"	d
EcsIdOnDeleteObjectMask	$FLECS/$FLECS/flecs.h	/^#define EcsIdOnDeleteObjectMask\\/;"	d
EcsIdOnDeleteObjectPanic	$FLECS/$FLECS/flecs.h	/^#define EcsIdOnDeleteObjectPanic /;"	d
EcsIdOnDeleteObjectRemove	$FLECS/$FLECS/flecs.h	/^#define EcsIdOnDeleteObjectRemove /;"	d
EcsIdOnDeletePanic	$FLECS/$FLECS/flecs.h	/^#define EcsIdOnDeletePanic /;"	d
EcsIdOnDeleteRemove	$FLECS/$FLECS/flecs.h	/^#define EcsIdOnDeleteRemove /;"	d
EcsIdTag	$FLECS/$FLECS/flecs.h	/^#define EcsIdTag /;"	d
EcsIdTraversable	$FLECS/$FLECS/flecs.h	/^#define EcsIdTraversable /;"	d
EcsIdUnion	$FLECS/$FLECS/flecs.h	/^#define EcsIdUnion /;"	d
EcsIdWith	$FLECS/$FLECS/flecs.h	/^#define EcsIdWith /;"	d
EcsIdentifier	$FLECS/$FLECS/flecs.h	/^} EcsIdentifier;$/;"	t	typeref:struct:EcsIdentifier
EcsIn	$FLECS/$FLECS/flecs.h	/^    EcsIn,            \/**< Term is only read *\/$/;"	e	enum:ecs_inout_kind_t
EcsInOut	$FLECS/$FLECS/flecs.h	/^    EcsInOut,         \/**< Term is both read and written *\/$/;"	e	enum:ecs_inout_kind_t
EcsInOutDefault	$FLECS/$FLECS/flecs.h	/^    EcsInOutDefault,  \/**< InOut for regular terms, In for shared terms *\/$/;"	e	enum:ecs_inout_kind_t
EcsInOutNone	$FLECS/$FLECS/flecs.h	/^    EcsInOutNone,     \/**< Term is neither read nor written *\/$/;"	e	enum:ecs_inout_kind_t
EcsIsA	$FLECS/$FLECS/flecs.c	/^const ecs_entity_t EcsIsA =                         FLECS_HI_COMPONENT_ID + 28;$/;"	v	typeref:typename:const ecs_entity_t
EcsIsEntity	$FLECS/$FLECS/flecs.h	/^#define EcsIsEntity /;"	d
EcsIsName	$FLECS/$FLECS/flecs.h	/^#define EcsIsName /;"	d
EcsIsVariable	$FLECS/$FLECS/flecs.h	/^#define EcsIsVariable /;"	d
EcsIterEntityOptional	$FLECS/$FLECS/flecs.h	/^#define EcsIterEntityOptional /;"	d
EcsIterEvalChain	$FLECS/$FLECS/flecs.h	/^    EcsIterEvalChain,$/;"	e	enum:ecs_iter_kind_t
EcsIterEvalCondition	$FLECS/$FLECS/flecs.h	/^    EcsIterEvalCondition,$/;"	e	enum:ecs_iter_kind_t
EcsIterEvalNone	$FLECS/$FLECS/flecs.h	/^    EcsIterEvalNone$/;"	e	enum:ecs_iter_kind_t
EcsIterEvalTables	$FLECS/$FLECS/flecs.h	/^    EcsIterEvalTables,$/;"	e	enum:ecs_iter_kind_t
EcsIterHasCondSet	$FLECS/$FLECS/flecs.h	/^#define EcsIterHasCondSet /;"	d
EcsIterHasShared	$FLECS/$FLECS/flecs.h	/^#define EcsIterHasShared /;"	d
EcsIterIgnoreThis	$FLECS/$FLECS/flecs.h	/^#define EcsIterIgnoreThis /;"	d
EcsIterIsInstanced	$FLECS/$FLECS/flecs.h	/^#define EcsIterIsInstanced /;"	d
EcsIterIsValid	$FLECS/$FLECS/flecs.h	/^#define EcsIterIsValid /;"	d
EcsIterMatchVar	$FLECS/$FLECS/flecs.h	/^#define EcsIterMatchVar /;"	d
EcsIterNext	$FLECS/$FLECS/flecs.h	/^#define EcsIterNext /;"	d
EcsIterNextYield	$FLECS/$FLECS/flecs.h	/^#define EcsIterNextYield /;"	d
EcsIterNoData	$FLECS/$FLECS/flecs.h	/^#define EcsIterNoData /;"	d
EcsIterNoResults	$FLECS/$FLECS/flecs.h	/^#define EcsIterNoResults /;"	d
EcsIterProfile	$FLECS/$FLECS/flecs.h	/^#define EcsIterProfile /;"	d
EcsIterTableOnly	$FLECS/$FLECS/flecs.h	/^#define EcsIterTableOnly /;"	d
EcsIterTrivialSearch	$FLECS/$FLECS/flecs.h	/^#define EcsIterTrivialSearch /;"	d
EcsIterTrivialSearchNoData	$FLECS/$FLECS/flecs.h	/^#define EcsIterTrivialSearchNoData /;"	d
EcsIterTrivialSearchWildcard	$FLECS/$FLECS/flecs.h	/^#define EcsIterTrivialSearchWildcard /;"	d
EcsIterTrivialTest	$FLECS/$FLECS/flecs.h	/^#define EcsIterTrivialTest /;"	d
EcsIterYield	$FLECS/$FLECS/flecs.h	/^#define EcsIterYield /;"	d
EcsIterable	$FLECS/$FLECS/flecs.h	/^typedef ecs_iterable_t EcsIterable;$/;"	t	typeref:typename:ecs_iterable_t
EcsJournalClear	$FLECS/$FLECS/flecs.h	/^    EcsJournalClear,$/;"	e	enum:ecs_journal_kind_t
EcsJournalDelete	$FLECS/$FLECS/flecs.h	/^    EcsJournalDelete,$/;"	e	enum:ecs_journal_kind_t
EcsJournalDeleteWith	$FLECS/$FLECS/flecs.h	/^    EcsJournalDeleteWith,$/;"	e	enum:ecs_journal_kind_t
EcsJournalMove	$FLECS/$FLECS/flecs.h	/^    EcsJournalMove,$/;"	e	enum:ecs_journal_kind_t
EcsJournalNew	$FLECS/$FLECS/flecs.h	/^    EcsJournalNew,$/;"	e	enum:ecs_journal_kind_t
EcsJournalRemoveAll	$FLECS/$FLECS/flecs.h	/^    EcsJournalRemoveAll,$/;"	e	enum:ecs_journal_kind_t
EcsJournalTableEvents	$FLECS/$FLECS/flecs.h	/^    EcsJournalTableEvents$/;"	e	enum:ecs_journal_kind_t
EcsLastInternalComponentId	$FLECS/$FLECS/flecs.h	/^#define EcsLastInternalComponentId /;"	d
EcsLeftParen	$FLECS/$FLECS/flecs.c	/^    EcsLeftParen,$/;"	e	enum:ecs_expr_oper_t	file:
EcsMember	$FLECS/$FLECS/flecs.h	/^} EcsMember;$/;"	t	typeref:struct:EcsMember
EcsMemberRanges	$FLECS/$FLECS/flecs.h	/^} EcsMemberRanges;$/;"	t	typeref:struct:EcsMemberRanges
EcsMetaType	$FLECS/$FLECS/flecs.h	/^} EcsMetaType;$/;"	t	typeref:struct:EcsMetaType
EcsMetaTypeOpKindLast	$FLECS/$FLECS/flecs.h	/^    EcsMetaTypeOpKindLast = EcsOpId$/;"	e	enum:ecs_meta_type_op_kind_t
EcsMetaTypeSerialized	$FLECS/$FLECS/flecs.h	/^} EcsMetaTypeSerialized;$/;"	t	typeref:struct:EcsMetaTypeSerialized
EcsMetricCountIds	$FLECS/$FLECS/flecs.c	/^} EcsMetricCountIds;$/;"	t	typeref:struct:__anonb2bcda231308	file:
EcsMetricCountTargets	$FLECS/$FLECS/flecs.c	/^} EcsMetricCountTargets;$/;"	t	typeref:struct:__anonb2bcda231408	file:
EcsMetricId	$FLECS/$FLECS/flecs.c	/^} EcsMetricId;$/;"	t	typeref:struct:__anonb2bcda231108	file:
EcsMetricIdInstance	$FLECS/$FLECS/flecs.c	/^} EcsMetricIdInstance;$/;"	t	typeref:struct:__anonb2bcda231608	file:
EcsMetricMember	$FLECS/$FLECS/flecs.c	/^} EcsMetricMember;$/;"	t	typeref:struct:__anonb2bcda231008	file:
EcsMetricMemberInstance	$FLECS/$FLECS/flecs.c	/^} EcsMetricMemberInstance;$/;"	t	typeref:struct:__anonb2bcda231508	file:
EcsMetricOneOf	$FLECS/$FLECS/flecs.c	/^} EcsMetricOneOf;$/;"	t	typeref:struct:__anonb2bcda231208	file:
EcsMetricOneOfInstance	$FLECS/$FLECS/flecs.c	/^} EcsMetricOneOfInstance;$/;"	t	typeref:struct:__anonb2bcda231708	file:
EcsMetricSource	$FLECS/$FLECS/flecs.h	/^} EcsMetricSource;$/;"	t	typeref:struct:EcsMetricSource
EcsMetricValue	$FLECS/$FLECS/flecs.h	/^} EcsMetricValue;$/;"	t	typeref:struct:EcsMetricValue
EcsMin	$FLECS/$FLECS/flecs.c	/^    EcsMin$/;"	e	enum:ecs_expr_oper_t	file:
EcsMixinDtor	$FLECS/$FLECS/flecs.c	/^    EcsMixinDtor,$/;"	e	enum:ecs_mixin_kind_t	file:
EcsMixinEntity	$FLECS/$FLECS/flecs.c	/^    EcsMixinEntity,$/;"	e	enum:ecs_mixin_kind_t	file:
EcsMixinIterable	$FLECS/$FLECS/flecs.c	/^    EcsMixinIterable,$/;"	e	enum:ecs_mixin_kind_t	file:
EcsMixinMax	$FLECS/$FLECS/flecs.c	/^    EcsMixinMax$/;"	e	enum:ecs_mixin_kind_t	file:
EcsMixinObservable	$FLECS/$FLECS/flecs.c	/^    EcsMixinObservable,$/;"	e	enum:ecs_mixin_kind_t	file:
EcsMixinWorld	$FLECS/$FLECS/flecs.c	/^    EcsMixinWorld,$/;"	e	enum:ecs_mixin_kind_t	file:
EcsModule	$FLECS/$FLECS/flecs.c	/^const ecs_entity_t EcsModule =                      FLECS_HI_COMPONENT_ID + 4;$/;"	v	typeref:typename:const ecs_entity_t
EcsMonitor	$FLECS/$FLECS/flecs.c	/^const ecs_entity_t EcsMonitor =                     FLECS_HI_COMPONENT_ID + 61;$/;"	v	typeref:typename:const ecs_entity_t
EcsMul	$FLECS/$FLECS/flecs.c	/^    EcsMul,$/;"	e	enum:ecs_expr_oper_t	file:
EcsName	$FLECS/$FLECS/flecs.c	/^const ecs_entity_t EcsName =                        FLECS_HI_COMPONENT_ID + 30;$/;"	v	typeref:typename:const ecs_entity_t
EcsNot	$FLECS/$FLECS/flecs.h	/^    EcsNot,           \/**< The term must not match *\/$/;"	e	enum:ecs_oper_kind_t
EcsNotFrom	$FLECS/$FLECS/flecs.h	/^    EcsNotFrom,       \/**< Term must match none of the components from term id *\/$/;"	e	enum:ecs_oper_kind_t
EcsObserver	$FLECS/$FLECS/flecs.c	/^const ecs_entity_t EcsObserver =                                            6;$/;"	v	typeref:typename:const ecs_entity_t
EcsOnAdd	$FLECS/$FLECS/flecs.c	/^const ecs_entity_t EcsOnAdd =                       FLECS_HI_COMPONENT_ID + 33;$/;"	v	typeref:typename:const ecs_entity_t
EcsOnDelete	$FLECS/$FLECS/flecs.c	/^const ecs_entity_t EcsOnDelete =                    FLECS_HI_COMPONENT_ID + 37;$/;"	v	typeref:typename:const ecs_entity_t
EcsOnDeleteTarget	$FLECS/$FLECS/flecs.c	/^const ecs_entity_t EcsOnDeleteTarget =              FLECS_HI_COMPONENT_ID + 46;$/;"	v	typeref:typename:const ecs_entity_t
EcsOnLoad	$FLECS/$FLECS/flecs.c	/^const ecs_entity_t EcsOnLoad =                      FLECS_HI_COMPONENT_ID + 66;$/;"	v	typeref:typename:const ecs_entity_t
EcsOnRemove	$FLECS/$FLECS/flecs.c	/^const ecs_entity_t EcsOnRemove =                    FLECS_HI_COMPONENT_ID + 34;$/;"	v	typeref:typename:const ecs_entity_t
EcsOnSet	$FLECS/$FLECS/flecs.c	/^const ecs_entity_t EcsOnSet =                       FLECS_HI_COMPONENT_ID + 35;$/;"	v	typeref:typename:const ecs_entity_t
EcsOnStart	$FLECS/$FLECS/flecs.c	/^const ecs_entity_t EcsOnStart =                     FLECS_HI_COMPONENT_ID + 64;$/;"	v	typeref:typename:const ecs_entity_t
EcsOnStore	$FLECS/$FLECS/flecs.c	/^const ecs_entity_t EcsOnStore =                     FLECS_HI_COMPONENT_ID + 73;$/;"	v	typeref:typename:const ecs_entity_t
EcsOnTableCreate	$FLECS/$FLECS/flecs.c	/^const ecs_entity_t EcsOnTableCreate =               FLECS_HI_COMPONENT_ID + 38;$/;"	v	typeref:typename:const ecs_entity_t
EcsOnTableDelete	$FLECS/$FLECS/flecs.c	/^const ecs_entity_t EcsOnTableDelete =               FLECS_HI_COMPONENT_ID + 39;$/;"	v	typeref:typename:const ecs_entity_t
EcsOnTableEmpty	$FLECS/$FLECS/flecs.c	/^const ecs_entity_t EcsOnTableEmpty =                FLECS_HI_COMPONENT_ID + 40;$/;"	v	typeref:typename:const ecs_entity_t
EcsOnTableFill	$FLECS/$FLECS/flecs.c	/^const ecs_entity_t EcsOnTableFill =                 FLECS_HI_COMPONENT_ID + 41;$/;"	v	typeref:typename:const ecs_entity_t
EcsOnUpdate	$FLECS/$FLECS/flecs.c	/^const ecs_entity_t EcsOnUpdate =                    FLECS_HI_COMPONENT_ID + 69;$/;"	v	typeref:typename:const ecs_entity_t
EcsOnValidate	$FLECS/$FLECS/flecs.c	/^const ecs_entity_t EcsOnValidate =                  FLECS_HI_COMPONENT_ID + 70;$/;"	v	typeref:typename:const ecs_entity_t
EcsOneOf	$FLECS/$FLECS/flecs.c	/^const ecs_entity_t EcsOneOf =                       FLECS_HI_COMPONENT_ID + 26;$/;"	v	typeref:typename:const ecs_entity_t
EcsOpArray	$FLECS/$FLECS/flecs.h	/^    EcsOpArray,$/;"	e	enum:ecs_meta_type_op_kind_t
EcsOpBitmask	$FLECS/$FLECS/flecs.h	/^    EcsOpBitmask,$/;"	e	enum:ecs_meta_type_op_kind_t
EcsOpBool	$FLECS/$FLECS/flecs.h	/^    EcsOpBool,$/;"	e	enum:ecs_meta_type_op_kind_t
EcsOpByte	$FLECS/$FLECS/flecs.h	/^    EcsOpByte,$/;"	e	enum:ecs_meta_type_op_kind_t
EcsOpChar	$FLECS/$FLECS/flecs.h	/^    EcsOpChar,$/;"	e	enum:ecs_meta_type_op_kind_t
EcsOpEntity	$FLECS/$FLECS/flecs.h	/^    EcsOpEntity,$/;"	e	enum:ecs_meta_type_op_kind_t
EcsOpEnum	$FLECS/$FLECS/flecs.h	/^    EcsOpEnum,$/;"	e	enum:ecs_meta_type_op_kind_t
EcsOpF32	$FLECS/$FLECS/flecs.h	/^    EcsOpF32,$/;"	e	enum:ecs_meta_type_op_kind_t
EcsOpF64	$FLECS/$FLECS/flecs.h	/^    EcsOpF64,$/;"	e	enum:ecs_meta_type_op_kind_t
EcsOpI16	$FLECS/$FLECS/flecs.h	/^    EcsOpI16,$/;"	e	enum:ecs_meta_type_op_kind_t
EcsOpI32	$FLECS/$FLECS/flecs.h	/^    EcsOpI32,$/;"	e	enum:ecs_meta_type_op_kind_t
EcsOpI64	$FLECS/$FLECS/flecs.h	/^    EcsOpI64,$/;"	e	enum:ecs_meta_type_op_kind_t
EcsOpI8	$FLECS/$FLECS/flecs.h	/^    EcsOpI8,$/;"	e	enum:ecs_meta_type_op_kind_t
EcsOpIPtr	$FLECS/$FLECS/flecs.h	/^    EcsOpIPtr,$/;"	e	enum:ecs_meta_type_op_kind_t
EcsOpId	$FLECS/$FLECS/flecs.h	/^    EcsOpId,$/;"	e	enum:ecs_meta_type_op_kind_t
EcsOpOpaque	$FLECS/$FLECS/flecs.h	/^    EcsOpOpaque,$/;"	e	enum:ecs_meta_type_op_kind_t
EcsOpPop	$FLECS/$FLECS/flecs.h	/^    EcsOpPop,$/;"	e	enum:ecs_meta_type_op_kind_t
EcsOpPrimitive	$FLECS/$FLECS/flecs.h	/^    EcsOpPrimitive, \/**< Marks first constant that's a primitive *\/$/;"	e	enum:ecs_meta_type_op_kind_t
EcsOpPush	$FLECS/$FLECS/flecs.h	/^    EcsOpPush,$/;"	e	enum:ecs_meta_type_op_kind_t
EcsOpScope	$FLECS/$FLECS/flecs.h	/^    EcsOpScope, \/**< Marks last constant that can open\/close a scope *\/$/;"	e	enum:ecs_meta_type_op_kind_t
EcsOpString	$FLECS/$FLECS/flecs.h	/^    EcsOpString,$/;"	e	enum:ecs_meta_type_op_kind_t
EcsOpU16	$FLECS/$FLECS/flecs.h	/^    EcsOpU16,$/;"	e	enum:ecs_meta_type_op_kind_t
EcsOpU32	$FLECS/$FLECS/flecs.h	/^    EcsOpU32,$/;"	e	enum:ecs_meta_type_op_kind_t
EcsOpU64	$FLECS/$FLECS/flecs.h	/^    EcsOpU64,$/;"	e	enum:ecs_meta_type_op_kind_t
EcsOpU8	$FLECS/$FLECS/flecs.h	/^    EcsOpU8,$/;"	e	enum:ecs_meta_type_op_kind_t
EcsOpUPtr	$FLECS/$FLECS/flecs.h	/^    EcsOpUPtr,$/;"	e	enum:ecs_meta_type_op_kind_t
EcsOpVector	$FLECS/$FLECS/flecs.h	/^    EcsOpVector,$/;"	e	enum:ecs_meta_type_op_kind_t
EcsOpaque	$FLECS/$FLECS/flecs.h	/^} EcsOpaque;$/;"	t	typeref:struct:EcsOpaque
EcsOpaqueType	$FLECS/$FLECS/flecs.h	/^    EcsOpaqueType,$/;"	e	enum:ecs_type_kind_t
EcsOptional	$FLECS/$FLECS/flecs.h	/^    EcsOptional,      \/**< The term may match *\/$/;"	e	enum:ecs_oper_kind_t
EcsOr	$FLECS/$FLECS/flecs.h	/^    EcsOr,            \/**< One of the terms in an or chain must match *\/$/;"	e	enum:ecs_oper_kind_t
EcsOrFrom	$FLECS/$FLECS/flecs.h	/^    EcsOrFrom,        \/**< Term must match at least one component from term id *\/$/;"	e	enum:ecs_oper_kind_t
EcsOsApiHighResolutionTimer	$FLECS/$FLECS/flecs.h	/^#define EcsOsApiHighResolutionTimer /;"	d
EcsOsApiLogWithColors	$FLECS/$FLECS/flecs.h	/^#define EcsOsApiLogWithColors /;"	d
EcsOsApiLogWithTimeDelta	$FLECS/$FLECS/flecs.h	/^#define EcsOsApiLogWithTimeDelta /;"	d
EcsOsApiLogWithTimeStamp	$FLECS/$FLECS/flecs.h	/^#define EcsOsApiLogWithTimeStamp /;"	d
EcsOut	$FLECS/$FLECS/flecs.h	/^    EcsOut,           \/**< Term is only written *\/$/;"	e	enum:ecs_inout_kind_t
EcsPanic	$FLECS/$FLECS/flecs.c	/^const ecs_entity_t EcsPanic =                       FLECS_HI_COMPONENT_ID + 52;$/;"	v	typeref:typename:const ecs_entity_t
EcsParent	$FLECS/$FLECS/flecs.h	/^#define EcsParent /;"	d
EcsPeriod1d	$FLECS/$FLECS/flecs.c	/^ecs_entity_t EcsPeriod1d = 0;$/;"	v	typeref:typename:ecs_entity_t
EcsPeriod1h	$FLECS/$FLECS/flecs.c	/^ecs_entity_t EcsPeriod1h = 0;$/;"	v	typeref:typename:ecs_entity_t
EcsPeriod1m	$FLECS/$FLECS/flecs.c	/^ecs_entity_t EcsPeriod1m = 0;$/;"	v	typeref:typename:ecs_entity_t
EcsPeriod1s	$FLECS/$FLECS/flecs.c	/^ecs_entity_t EcsPeriod1s = 0;$/;"	v	typeref:typename:ecs_entity_t
EcsPeriod1w	$FLECS/$FLECS/flecs.c	/^ecs_entity_t EcsPeriod1w = 0;$/;"	v	typeref:typename:ecs_entity_t
EcsPhase	$FLECS/$FLECS/flecs.c	/^const ecs_entity_t EcsPhase =                       FLECS_HI_COMPONENT_ID + 75;$/;"	v	typeref:typename:const ecs_entity_t
EcsPipeline	$FLECS/$FLECS/flecs.c	/^} EcsPipeline;$/;"	t	typeref:struct:EcsPipeline	file:
EcsPipelineStats	$FLECS/$FLECS/flecs.h	/^} EcsPipelineStats;$/;"	t	typeref:struct:__anonb2bcda281a08
EcsPoly	$FLECS/$FLECS/flecs.h	/^} EcsPoly;$/;"	t	typeref:struct:EcsPoly
EcsPostFrame	$FLECS/$FLECS/flecs.c	/^const ecs_entity_t EcsPostFrame =                   FLECS_HI_COMPONENT_ID + 74;$/;"	v	typeref:typename:const ecs_entity_t
EcsPostLoad	$FLECS/$FLECS/flecs.c	/^const ecs_entity_t EcsPostLoad =                    FLECS_HI_COMPONENT_ID + 67;$/;"	v	typeref:typename:const ecs_entity_t
EcsPostUpdate	$FLECS/$FLECS/flecs.c	/^const ecs_entity_t EcsPostUpdate =                  FLECS_HI_COMPONENT_ID + 71;$/;"	v	typeref:typename:const ecs_entity_t
EcsPreFrame	$FLECS/$FLECS/flecs.c	/^const ecs_entity_t EcsPreFrame =                    FLECS_HI_COMPONENT_ID + 65;$/;"	v	typeref:typename:const ecs_entity_t
EcsPreStore	$FLECS/$FLECS/flecs.c	/^const ecs_entity_t EcsPreStore =                    FLECS_HI_COMPONENT_ID + 72;$/;"	v	typeref:typename:const ecs_entity_t
EcsPreUpdate	$FLECS/$FLECS/flecs.c	/^const ecs_entity_t EcsPreUpdate =                   FLECS_HI_COMPONENT_ID + 68;$/;"	v	typeref:typename:const ecs_entity_t
EcsPredEq	$FLECS/$FLECS/flecs.c	/^const ecs_entity_t EcsPredEq =                      FLECS_HI_COMPONENT_ID + 56;$/;"	v	typeref:typename:const ecs_entity_t
EcsPredLookup	$FLECS/$FLECS/flecs.c	/^const ecs_entity_t EcsPredLookup =                  FLECS_HI_COMPONENT_ID + 58;$/;"	v	typeref:typename:const ecs_entity_t
EcsPredMatch	$FLECS/$FLECS/flecs.c	/^const ecs_entity_t EcsPredMatch =                   FLECS_HI_COMPONENT_ID + 57;$/;"	v	typeref:typename:const ecs_entity_t
EcsPrefab	$FLECS/$FLECS/flecs.c	/^const ecs_entity_t EcsPrefab =                      FLECS_HI_COMPONENT_ID + 6;$/;"	v	typeref:typename:const ecs_entity_t
EcsPrimitive	$FLECS/$FLECS/flecs.h	/^} EcsPrimitive;$/;"	t	typeref:struct:EcsPrimitive
EcsPrimitiveKindLast	$FLECS/$FLECS/flecs.h	/^    EcsPrimitiveKindLast = EcsId$/;"	e	enum:ecs_primitive_kind_t
EcsPrimitiveType	$FLECS/$FLECS/flecs.h	/^    EcsPrimitiveType,$/;"	e	enum:ecs_type_kind_t
EcsPrivate	$FLECS/$FLECS/flecs.c	/^const ecs_entity_t EcsPrivate =                     FLECS_HI_COMPONENT_ID + 5;$/;"	v	typeref:typename:const ecs_entity_t
EcsQuantity	$FLECS/$FLECS/flecs.c	/^const ecs_entity_t EcsQuantity =                    FLECS_HI_COMPONENT_ID + 112;$/;"	v	typeref:typename:const ecs_entity_t
EcsQuery	$FLECS/$FLECS/flecs.c	/^const ecs_entity_t EcsQuery =                                               5;$/;"	v	typeref:typename:const ecs_entity_t
EcsQueryHasMonitor	$FLECS/$FLECS/flecs.h	/^#define EcsQueryHasMonitor /;"	d
EcsQueryHasNonThisOutTerms	$FLECS/$FLECS/flecs.h	/^#define EcsQueryHasNonThisOutTerms /;"	d
EcsQueryHasOutTerms	$FLECS/$FLECS/flecs.h	/^#define EcsQueryHasOutTerms /;"	d
EcsQueryHasRefs	$FLECS/$FLECS/flecs.h	/^#define EcsQueryHasRefs /;"	d
EcsQueryIsOrphaned	$FLECS/$FLECS/flecs.h	/^#define EcsQueryIsOrphaned /;"	d
EcsQueryIsSubquery	$FLECS/$FLECS/flecs.h	/^#define EcsQueryIsSubquery /;"	d
EcsQueryOrphan	$FLECS/$FLECS/flecs.c	/^    EcsQueryOrphan$/;"	e	enum:ecs_query_eventkind_t	file:
EcsQueryTableMatch	$FLECS/$FLECS/flecs.c	/^    EcsQueryTableMatch,$/;"	e	enum:ecs_query_eventkind_t	file:
EcsQueryTableRematch	$FLECS/$FLECS/flecs.c	/^    EcsQueryTableRematch,$/;"	e	enum:ecs_query_eventkind_t	file:
EcsQueryTableUnmatch	$FLECS/$FLECS/flecs.c	/^    EcsQueryTableUnmatch,$/;"	e	enum:ecs_query_eventkind_t	file:
EcsQueryTrivialIter	$FLECS/$FLECS/flecs.h	/^#define EcsQueryTrivialIter /;"	d
EcsRateFilter	$FLECS/$FLECS/flecs.h	/^} EcsRateFilter;$/;"	t	typeref:struct:EcsRateFilter
EcsReflexive	$FLECS/$FLECS/flecs.c	/^const ecs_entity_t EcsReflexive =                   FLECS_HI_COMPONENT_ID + 15;$/;"	v	typeref:typename:const ecs_entity_t
EcsRemove	$FLECS/$FLECS/flecs.c	/^const ecs_entity_t EcsRemove =                      FLECS_HI_COMPONENT_ID + 50;$/;"	v	typeref:typename:const ecs_entity_t
EcsRest	$FLECS/$FLECS/flecs.h	/^} EcsRest;$/;"	t	typeref:struct:__anonb2bcda280e08
EcsRuleAnd	$FLECS/$FLECS/flecs.c	/^    EcsRuleAnd,            \/* And operator: find or match id against variable source *\/$/;"	e	enum:__anonb2bcda232003	file:
EcsRuleAndAny	$FLECS/$FLECS/flecs.c	/^    EcsRuleAndAny,         \/* And operator with support for matching Any src\/id *\/$/;"	e	enum:__anonb2bcda232003	file:
EcsRuleAndId	$FLECS/$FLECS/flecs.c	/^    EcsRuleAndId,          \/* And operator for fixed id (no wildcards\/variables) *\/$/;"	e	enum:__anonb2bcda232003	file:
EcsRuleContain	$FLECS/$FLECS/flecs.c	/^    EcsRuleContain,        \/* Test if table contains entity *\/$/;"	e	enum:__anonb2bcda232003	file:
EcsRuleEach	$FLECS/$FLECS/flecs.c	/^    EcsRuleEach,           \/* Iterate entities in table, populate entity variable *\/$/;"	e	enum:__anonb2bcda232003	file:
EcsRuleEnd	$FLECS/$FLECS/flecs.c	/^    EcsRuleEnd,            \/* End of control flow block *\/$/;"	e	enum:__anonb2bcda232003	file:
EcsRuleFirst	$FLECS/$FLECS/flecs.c	/^#define EcsRuleFirst /;"	d	file:
EcsRuleIdsLeft	$FLECS/$FLECS/flecs.c	/^    EcsRuleIdsLeft,        \/* Find ids in use that match (*, T) wildcard *\/$/;"	e	enum:__anonb2bcda232003	file:
EcsRuleIdsRight	$FLECS/$FLECS/flecs.c	/^    EcsRuleIdsRight,       \/* Find ids in use that match (R, *) wildcard *\/$/;"	e	enum:__anonb2bcda232003	file:
EcsRuleIf	$FLECS/$FLECS/flecs.c	/^    EcsRuleIf,             \/* Conditional execution *\/$/;"	e	enum:__anonb2bcda232003	file:
EcsRuleIsEntity	$FLECS/$FLECS/flecs.c	/^#define EcsRuleIsEntity /;"	d	file:
EcsRuleIsSelf	$FLECS/$FLECS/flecs.c	/^#define EcsRuleIsSelf /;"	d	file:
EcsRuleIsVar	$FLECS/$FLECS/flecs.c	/^#define EcsRuleIsVar /;"	d	file:
EcsRuleLookup	$FLECS/$FLECS/flecs.c	/^    EcsRuleLookup,         \/* Lookup relative to variable *\/$/;"	e	enum:__anonb2bcda232003	file:
EcsRuleMaxVarCount	$FLECS/$FLECS/flecs.c	/^#define EcsRuleMaxVarCount /;"	d	file:
EcsRuleNot	$FLECS/$FLECS/flecs.c	/^    EcsRuleNot,            \/* Sets iterator state after term was not matched *\/$/;"	e	enum:__anonb2bcda232003	file:
EcsRuleNothing	$FLECS/$FLECS/flecs.c	/^    EcsRuleNothing         \/* Must be last *\/$/;"	e	enum:__anonb2bcda232003	file:
EcsRuleOptional	$FLECS/$FLECS/flecs.c	/^    EcsRuleOptional,       \/* Optional operator *\/$/;"	e	enum:__anonb2bcda232003	file:
EcsRuleOr	$FLECS/$FLECS/flecs.c	/^    EcsRuleOr,             \/* Or operator *\/$/;"	e	enum:__anonb2bcda232003	file:
EcsRulePairEq	$FLECS/$FLECS/flecs.c	/^    EcsRulePairEq,         \/* Test if both elements of pair are the same *\/$/;"	e	enum:__anonb2bcda232003	file:
EcsRulePopulate	$FLECS/$FLECS/flecs.c	/^    EcsRulePopulate,       \/* Populate any data fields *\/$/;"	e	enum:__anonb2bcda232003	file:
EcsRulePopulateSelf	$FLECS/$FLECS/flecs.c	/^    EcsRulePopulateSelf,   \/* Populate only self (owned) data fields *\/$/;"	e	enum:__anonb2bcda232003	file:
EcsRulePredEq	$FLECS/$FLECS/flecs.c	/^    EcsRulePredEq,         \/* Test if variable is equal to, or assign to if not set *\/$/;"	e	enum:__anonb2bcda232003	file:
EcsRulePredEqMatch	$FLECS/$FLECS/flecs.c	/^    EcsRulePredEqMatch,    \/* Same as EcsRulePredEq but with fuzzy matching by name *\/$/;"	e	enum:__anonb2bcda232003	file:
EcsRulePredEqName	$FLECS/$FLECS/flecs.c	/^    EcsRulePredEqName,     \/* Same as EcsRulePredEq but with matching by name *\/$/;"	e	enum:__anonb2bcda232003	file:
EcsRulePredNeq	$FLECS/$FLECS/flecs.c	/^    EcsRulePredNeq,        \/* Test if variable is not equal to *\/$/;"	e	enum:__anonb2bcda232003	file:
EcsRulePredNeqMatch	$FLECS/$FLECS/flecs.c	/^    EcsRulePredNeqMatch,   \/* Same as EcsRulePredNeq but with fuzzy matching by name *\/$/;"	e	enum:__anonb2bcda232003	file:
EcsRulePredNeqName	$FLECS/$FLECS/flecs.c	/^    EcsRulePredNeqName,    \/* Same as EcsRulePredNeq but with matching by name *\/$/;"	e	enum:__anonb2bcda232003	file:
EcsRuleReset	$FLECS/$FLECS/flecs.c	/^    EcsRuleReset,          \/* Reset value of variable to wildcard (*) *\/$/;"	e	enum:__anonb2bcda232003	file:
EcsRuleSecond	$FLECS/$FLECS/flecs.c	/^#define EcsRuleSecond /;"	d	file:
EcsRuleSelectAny	$FLECS/$FLECS/flecs.c	/^    EcsRuleSelectAny,      \/* Dedicated instruction for _ queries where the src is unknown *\/$/;"	e	enum:__anonb2bcda232003	file:
EcsRuleSelfUp	$FLECS/$FLECS/flecs.c	/^    EcsRuleSelfUp,         \/* Self|up traversal *\/$/;"	e	enum:__anonb2bcda232003	file:
EcsRuleSelfUpId	$FLECS/$FLECS/flecs.c	/^    EcsRuleSelfUpId,       \/* Self|up traversal for fixed id (like AndId) *\/$/;"	e	enum:__anonb2bcda232003	file:
EcsRuleSetFixed	$FLECS/$FLECS/flecs.c	/^    EcsRuleSetFixed,       \/* Set fixed source entity ids *\/$/;"	e	enum:__anonb2bcda232003	file:
EcsRuleSetId	$FLECS/$FLECS/flecs.c	/^    EcsRuleSetId,          \/* Set id if not set *\/$/;"	e	enum:__anonb2bcda232003	file:
EcsRuleSetIds	$FLECS/$FLECS/flecs.c	/^    EcsRuleSetIds,         \/* Set fixed (component) ids *\/$/;"	e	enum:__anonb2bcda232003	file:
EcsRuleSetThis	$FLECS/$FLECS/flecs.c	/^    EcsRuleSetThis,        \/* Populate This entity variable *\/$/;"	e	enum:__anonb2bcda232003	file:
EcsRuleSetVars	$FLECS/$FLECS/flecs.c	/^    EcsRuleSetVars,        \/* Populate it.sources from variables *\/$/;"	e	enum:__anonb2bcda232003	file:
EcsRuleSrc	$FLECS/$FLECS/flecs.c	/^#define EcsRuleSrc /;"	d	file:
EcsRuleStore	$FLECS/$FLECS/flecs.c	/^    EcsRuleStore,          \/* Store table or entity in variable *\/$/;"	e	enum:__anonb2bcda232003	file:
EcsRuleTrav	$FLECS/$FLECS/flecs.c	/^    EcsRuleTrav,           \/* Support for transitive\/reflexive queries *\/$/;"	e	enum:__anonb2bcda232003	file:
EcsRuleTriv	$FLECS/$FLECS/flecs.c	/^    EcsRuleTriv,           \/* Trivial search *\/$/;"	e	enum:__anonb2bcda232003	file:
EcsRuleTrivData	$FLECS/$FLECS/flecs.c	/^    EcsRuleTrivData,       \/* Trivial search with setting data fields *\/$/;"	e	enum:__anonb2bcda232003	file:
EcsRuleTrivWildcard	$FLECS/$FLECS/flecs.c	/^    EcsRuleTrivWildcard,   \/* Trivial search with (exclusive) wildcard ids *\/$/;"	e	enum:__anonb2bcda232003	file:
EcsRuleUp	$FLECS/$FLECS/flecs.c	/^    EcsRuleUp,             \/* Up traversal *\/$/;"	e	enum:__anonb2bcda232003	file:
EcsRuleUpId	$FLECS/$FLECS/flecs.c	/^    EcsRuleUpId,           \/* Up traversal for fixed id (like AndId) *\/$/;"	e	enum:__anonb2bcda232003	file:
EcsRuleWith	$FLECS/$FLECS/flecs.c	/^    EcsRuleWith,           \/* Match id against fixed or variable source *\/$/;"	e	enum:__anonb2bcda232003	file:
EcsRuleYield	$FLECS/$FLECS/flecs.c	/^    EcsRuleYield,          \/* Yield result back to application *\/$/;"	e	enum:__anonb2bcda232003	file:
EcsScopeClose	$FLECS/$FLECS/flecs.c	/^const ecs_entity_t EcsScopeClose =                   FLECS_HI_COMPONENT_ID + 60;$/;"	v	typeref:typename:const ecs_entity_t
EcsScopeOpen	$FLECS/$FLECS/flecs.c	/^const ecs_entity_t EcsScopeOpen =                    FLECS_HI_COMPONENT_ID + 59;$/;"	v	typeref:typename:const ecs_entity_t
EcsScript	$FLECS/$FLECS/flecs.h	/^} EcsScript;$/;"	t	typeref:struct:EcsScript
EcsSelf	$FLECS/$FLECS/flecs.h	/^#define EcsSelf /;"	d
EcsShiftLeft	$FLECS/$FLECS/flecs.c	/^    EcsShiftLeft,$/;"	e	enum:ecs_expr_oper_t	file:
EcsShiftRight	$FLECS/$FLECS/flecs.c	/^    EcsShiftRight,$/;"	e	enum:ecs_expr_oper_t	file:
EcsSlotOf	$FLECS/$FLECS/flecs.c	/^const ecs_entity_t EcsSlotOf =                      FLECS_HI_COMPONENT_ID + 8;$/;"	v	typeref:typename:const ecs_entity_t
EcsStatsHeader	$FLECS/$FLECS/flecs.h	/^} EcsStatsHeader;$/;"	t	typeref:struct:__anonb2bcda281808
EcsString	$FLECS/$FLECS/flecs.h	/^    EcsString,$/;"	e	enum:ecs_primitive_kind_t
EcsStruct	$FLECS/$FLECS/flecs.h	/^} EcsStruct;$/;"	t	typeref:struct:EcsStruct
EcsStructType	$FLECS/$FLECS/flecs.h	/^    EcsStructType,$/;"	e	enum:ecs_type_kind_t
EcsSub	$FLECS/$FLECS/flecs.c	/^    EcsSub,$/;"	e	enum:ecs_expr_oper_t	file:
EcsSymbol	$FLECS/$FLECS/flecs.c	/^const ecs_entity_t EcsSymbol =                      FLECS_HI_COMPONENT_ID + 31;$/;"	v	typeref:typename:const ecs_entity_t
EcsSymmetric	$FLECS/$FLECS/flecs.c	/^const ecs_entity_t EcsSymmetric =                   FLECS_HI_COMPONENT_ID + 16;$/;"	v	typeref:typename:const ecs_entity_t
EcsSystem	$FLECS/$FLECS/flecs.c	/^const ecs_entity_t EcsSystem =                                              7;$/;"	v	typeref:typename:const ecs_entity_t
EcsTableHasAddActions	$FLECS/$FLECS/flecs.h	/^#define EcsTableHasAddActions /;"	d
EcsTableHasBuiltins	$FLECS/$FLECS/flecs.h	/^#define EcsTableHasBuiltins /;"	d
EcsTableHasChildOf	$FLECS/$FLECS/flecs.h	/^#define EcsTableHasChildOf /;"	d
EcsTableHasCopy	$FLECS/$FLECS/flecs.h	/^#define EcsTableHasCopy /;"	d
EcsTableHasCtors	$FLECS/$FLECS/flecs.h	/^#define EcsTableHasCtors /;"	d
EcsTableHasDtors	$FLECS/$FLECS/flecs.h	/^#define EcsTableHasDtors /;"	d
EcsTableHasIsA	$FLECS/$FLECS/flecs.h	/^#define EcsTableHasIsA /;"	d
EcsTableHasLifecycle	$FLECS/$FLECS/flecs.h	/^#define EcsTableHasLifecycle /;"	d
EcsTableHasModule	$FLECS/$FLECS/flecs.h	/^#define EcsTableHasModule /;"	d
EcsTableHasMove	$FLECS/$FLECS/flecs.h	/^#define EcsTableHasMove /;"	d
EcsTableHasName	$FLECS/$FLECS/flecs.h	/^#define EcsTableHasName /;"	d
EcsTableHasOnAdd	$FLECS/$FLECS/flecs.h	/^#define EcsTableHasOnAdd /;"	d
EcsTableHasOnRemove	$FLECS/$FLECS/flecs.h	/^#define EcsTableHasOnRemove /;"	d
EcsTableHasOnSet	$FLECS/$FLECS/flecs.h	/^#define EcsTableHasOnSet /;"	d
EcsTableHasOnTableCreate	$FLECS/$FLECS/flecs.h	/^#define EcsTableHasOnTableCreate /;"	d
EcsTableHasOnTableDelete	$FLECS/$FLECS/flecs.h	/^#define EcsTableHasOnTableDelete /;"	d
EcsTableHasOnTableEmpty	$FLECS/$FLECS/flecs.h	/^#define EcsTableHasOnTableEmpty /;"	d
EcsTableHasOnTableFill	$FLECS/$FLECS/flecs.h	/^#define EcsTableHasOnTableFill /;"	d
EcsTableHasOverrides	$FLECS/$FLECS/flecs.h	/^#define EcsTableHasOverrides /;"	d
EcsTableHasPairs	$FLECS/$FLECS/flecs.h	/^#define EcsTableHasPairs /;"	d
EcsTableHasRemoveActions	$FLECS/$FLECS/flecs.h	/^#define EcsTableHasRemoveActions /;"	d
EcsTableHasTarget	$FLECS/$FLECS/flecs.h	/^#define EcsTableHasTarget /;"	d
EcsTableHasToggle	$FLECS/$FLECS/flecs.h	/^#define EcsTableHasToggle /;"	d
EcsTableHasTraversable	$FLECS/$FLECS/flecs.h	/^#define EcsTableHasTraversable /;"	d
EcsTableHasUnSet	$FLECS/$FLECS/flecs.h	/^#define EcsTableHasUnSet /;"	d
EcsTableHasUnion	$FLECS/$FLECS/flecs.h	/^#define EcsTableHasUnion /;"	d
EcsTableIsComplex	$FLECS/$FLECS/flecs.h	/^#define EcsTableIsComplex /;"	d
EcsTableIsDisabled	$FLECS/$FLECS/flecs.h	/^#define EcsTableIsDisabled /;"	d
EcsTableIsPrefab	$FLECS/$FLECS/flecs.h	/^#define EcsTableIsPrefab /;"	d
EcsTableMarkedForDelete	$FLECS/$FLECS/flecs.h	/^#define EcsTableMarkedForDelete /;"	d
EcsTableNoTriggersForId	$FLECS/$FLECS/flecs.c	/^    EcsTableNoTriggersForId,$/;"	e	enum:ecs_table_eventkind_t	file:
EcsTableTriggersForId	$FLECS/$FLECS/flecs.c	/^    EcsTableTriggersForId,$/;"	e	enum:ecs_table_eventkind_t	file:
EcsTag	$FLECS/$FLECS/flecs.c	/^const ecs_entity_t EcsTag =                         FLECS_HI_COMPONENT_ID + 20;$/;"	v	typeref:typename:const ecs_entity_t
EcsTarget	$FLECS/$FLECS/flecs.h	/^} EcsTarget;$/;"	t	typeref:struct:EcsTarget
EcsTermIdInherited	$FLECS/$FLECS/flecs.h	/^#define EcsTermIdInherited /;"	d
EcsTermIsTrivial	$FLECS/$FLECS/flecs.h	/^#define EcsTermIsTrivial /;"	d
EcsTermMatchAny	$FLECS/$FLECS/flecs.h	/^#define EcsTermMatchAny /;"	d
EcsTermMatchAnySrc	$FLECS/$FLECS/flecs.h	/^#define EcsTermMatchAnySrc /;"	d
EcsTermMatchDisabled	$FLECS/$FLECS/flecs.h	/^#define EcsTermMatchDisabled /;"	d
EcsTermMatchPrefab	$FLECS/$FLECS/flecs.h	/^#define EcsTermMatchPrefab /;"	d
EcsTermNoData	$FLECS/$FLECS/flecs.h	/^#define EcsTermNoData /;"	d
EcsTermReflexive	$FLECS/$FLECS/flecs.h	/^#define EcsTermReflexive /;"	d
EcsTermSrcFirstEq	$FLECS/$FLECS/flecs.h	/^#define EcsTermSrcFirstEq /;"	d
EcsTermSrcSecondEq	$FLECS/$FLECS/flecs.h	/^#define EcsTermSrcSecondEq /;"	d
EcsTermTransitive	$FLECS/$FLECS/flecs.h	/^#define EcsTermTransitive /;"	d
EcsThis	$FLECS/$FLECS/flecs.c	/^const ecs_entity_t EcsThis =                        FLECS_HI_COMPONENT_ID + 12;$/;"	v	typeref:typename:const ecs_entity_t
EcsThisName	$FLECS/$FLECS/flecs.c	/^#define EcsThisName /;"	d	file:
EcsTickSource	$FLECS/$FLECS/flecs.h	/^} EcsTickSource;$/;"	t	typeref:struct:EcsTickSource
EcsTimer	$FLECS/$FLECS/flecs.h	/^} EcsTimer;$/;"	t	typeref:struct:EcsTimer
EcsTransitive	$FLECS/$FLECS/flecs.c	/^const ecs_entity_t EcsTransitive =                  FLECS_HI_COMPONENT_ID + 14;$/;"	v	typeref:typename:const ecs_entity_t
EcsTraversable	$FLECS/$FLECS/flecs.c	/^const ecs_entity_t EcsTraversable =                 FLECS_HI_COMPONENT_ID + 24;$/;"	v	typeref:typename:const ecs_entity_t
EcsTraverseAll	$FLECS/$FLECS/flecs.h	/^#define EcsTraverseAll /;"	d
EcsTraverseFlags	$FLECS/$FLECS/flecs.h	/^#define EcsTraverseFlags /;"	d
EcsTypeKindLast	$FLECS/$FLECS/flecs.h	/^    EcsTypeKindLast = EcsOpaqueType$/;"	e	enum:ecs_type_kind_t
EcsU16	$FLECS/$FLECS/flecs.h	/^    EcsU16,$/;"	e	enum:ecs_primitive_kind_t
EcsU32	$FLECS/$FLECS/flecs.h	/^    EcsU32,$/;"	e	enum:ecs_primitive_kind_t
EcsU64	$FLECS/$FLECS/flecs.h	/^    EcsU64,$/;"	e	enum:ecs_primitive_kind_t
EcsU8	$FLECS/$FLECS/flecs.h	/^    EcsU8,$/;"	e	enum:ecs_primitive_kind_t
EcsUPtr	$FLECS/$FLECS/flecs.h	/^    EcsUPtr,$/;"	e	enum:ecs_primitive_kind_t
EcsUnSet	$FLECS/$FLECS/flecs.c	/^const ecs_entity_t EcsUnSet =                       FLECS_HI_COMPONENT_ID + 36;$/;"	v	typeref:typename:const ecs_entity_t
EcsUnion	$FLECS/$FLECS/flecs.c	/^const ecs_entity_t EcsUnion =                       FLECS_HI_COMPONENT_ID + 21;$/;"	v	typeref:typename:const ecs_entity_t
EcsUnit	$FLECS/$FLECS/flecs.h	/^} EcsUnit;$/;"	t	typeref:struct:EcsUnit
EcsUnitPrefix	$FLECS/$FLECS/flecs.h	/^} EcsUnitPrefix;$/;"	t	typeref:struct:EcsUnitPrefix
EcsUp	$FLECS/$FLECS/flecs.h	/^#define EcsUp /;"	d
EcsVarAny	$FLECS/$FLECS/flecs.c	/^    EcsVarAny              \/* Used when requesting either entity or table var *\/$/;"	e	enum:__anonb2bcda231f03	file:
EcsVarEntity	$FLECS/$FLECS/flecs.c	/^    EcsVarEntity,          \/* Variable that stores an entity id *\/$/;"	e	enum:__anonb2bcda231f03	file:
EcsVarNone	$FLECS/$FLECS/flecs.c	/^#define EcsVarNone /;"	d	file:
EcsVarTable	$FLECS/$FLECS/flecs.c	/^    EcsVarTable,           \/* Variable that stores a table *\/$/;"	e	enum:__anonb2bcda231f03	file:
EcsVariable	$FLECS/$FLECS/flecs.c	/^const ecs_entity_t EcsVariable =                    FLECS_HI_COMPONENT_ID + 13;$/;"	v	typeref:typename:const ecs_entity_t
EcsVector	$FLECS/$FLECS/flecs.h	/^} EcsVector;$/;"	t	typeref:struct:EcsVector
EcsVectorType	$FLECS/$FLECS/flecs.h	/^    EcsVectorType,$/;"	e	enum:ecs_type_kind_t
EcsWildcard	$FLECS/$FLECS/flecs.c	/^const ecs_entity_t EcsWildcard =                    FLECS_HI_COMPONENT_ID + 10;$/;"	v	typeref:typename:const ecs_entity_t
EcsWith	$FLECS/$FLECS/flecs.c	/^const ecs_entity_t EcsWith =                        FLECS_HI_COMPONENT_ID + 25;$/;"	v	typeref:typename:const ecs_entity_t
EcsWorld	$FLECS/$FLECS/flecs.c	/^const ecs_entity_t EcsWorld =                       FLECS_HI_COMPONENT_ID + 0;$/;"	v	typeref:typename:const ecs_entity_t
EcsWorldFini	$FLECS/$FLECS/flecs.h	/^#define EcsWorldFini /;"	d
EcsWorldInit	$FLECS/$FLECS/flecs.h	/^#define EcsWorldInit /;"	d
EcsWorldMeasureFrameTime	$FLECS/$FLECS/flecs.h	/^#define EcsWorldMeasureFrameTime /;"	d
EcsWorldMeasureSystemTime	$FLECS/$FLECS/flecs.h	/^#define EcsWorldMeasureSystemTime /;"	d
EcsWorldMultiThreaded	$FLECS/$FLECS/flecs.h	/^#define EcsWorldMultiThreaded /;"	d
EcsWorldQuit	$FLECS/$FLECS/flecs.h	/^#define EcsWorldQuit /;"	d
EcsWorldQuitWorkers	$FLECS/$FLECS/flecs.h	/^#define EcsWorldQuitWorkers /;"	d
EcsWorldReadonly	$FLECS/$FLECS/flecs.h	/^#define EcsWorldReadonly /;"	d
EcsWorldStats	$FLECS/$FLECS/flecs.h	/^} EcsWorldStats;$/;"	t	typeref:struct:__anonb2bcda281908
EcsWorldSummary	$FLECS/$FLECS/flecs.h	/^} EcsWorldSummary;$/;"	t	typeref:struct:__anonb2bcda281b08
ElectricCurrent	$FLECS/$FLECS/flecs.h	/^struct ElectricCurrent { };$/;"	s	struct:flecs::units
Empty	$FLECS/$FLECS/flecs.h	/^static const flecs::entity_t Empty = EcsEmpty;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
Entity	$FLECS/$FLECS/flecs.h	/^static const primitive_kind_t Entity = EcsEntity;$/;"	v	namespace:flecs::meta	typeref:typename:const primitive_kind_t
Enum	$FLECS/$FLECS/flecs.h	/^using Enum = EcsEnum;$/;"	t	namespace:flecs	typeref:typename:EcsEnum
EnumType	$FLECS/$FLECS/flecs.h	/^static const type_kind_t EnumType = EcsEnumType;$/;"	v	namespace:flecs::meta	typeref:typename:const type_kind_t
Error	$FLECS/$FLECS/flecs.h	/^    struct Error { };$/;"	s	struct:flecs::alerts
Exa	$FLECS/$FLECS/flecs.h	/^struct Exa { };$/;"	s	struct:flecs::units
Exbi	$FLECS/$FLECS/flecs.h	/^struct Exbi { };$/;"	s	struct:flecs::units
Exclusive	$FLECS/$FLECS/flecs.h	/^static const flecs::entity_t Exclusive = EcsExclusive;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
F32	$FLECS/$FLECS/flecs.h	/^static const primitive_kind_t F32 = EcsF32;$/;"	v	namespace:flecs::meta	typeref:typename:const primitive_kind_t
F64	$FLECS/$FLECS/flecs.h	/^static const primitive_kind_t F64 = EcsF64;$/;"	v	namespace:flecs::meta	typeref:typename:const primitive_kind_t
FINI_CACHE	$FLECS/$FLECS/flecs.c	/^#define FINI_CACHE(/;"	d	file:	signature:(it,f,T,count)
FLECS_ADDONS_H	$FLECS/$FLECS/flecs.h	/^#define FLECS_ADDONS_H$/;"	d
FLECS_ALERTS	$FLECS/$FLECS/flecs.h	/^#define FLECS_ALERTS /;"	d
FLECS_ALERTS_H	$FLECS/$FLECS/flecs.h	/^#define FLECS_ALERTS_H$/;"	d
FLECS_ALLOCATOR_H	$FLECS/$FLECS/flecs.h	/^#define FLECS_ALLOCATOR_H$/;"	d
FLECS_API	$FLECS/$FLECS/flecs.h	/^  #define FLECS_API$/;"	d
FLECS_API_DEFINES_H	$FLECS/$FLECS/flecs.h	/^#define FLECS_API_DEFINES_H$/;"	d
FLECS_API_FLAGS_H	$FLECS/$FLECS/flecs.h	/^#define FLECS_API_FLAGS_H$/;"	d
FLECS_API_SUPPORT_H	$FLECS/$FLECS/flecs.h	/^#define FLECS_API_SUPPORT_H$/;"	d
FLECS_API_TYPES_H	$FLECS/$FLECS/flecs.h	/^#define FLECS_API_TYPES_H$/;"	d
FLECS_APP	$FLECS/$FLECS/flecs.h	/^#define FLECS_APP /;"	d
FLECS_APP_H	$FLECS/$FLECS/flecs.h	/^#define FLECS_APP_H$/;"	d
FLECS_BAKE_CONFIG_H	$FLECS/$FLECS/flecs.h	/^#define FLECS_BAKE_CONFIG_H$/;"	d
FLECS_BITSET_H	$FLECS/$FLECS/flecs.c	/^#define FLECS_BITSET_H$/;"	d	file:
FLECS_BLOCK_ALLOCATOR_H	$FLECS/$FLECS/flecs.h	/^#define FLECS_BLOCK_ALLOCATOR_H$/;"	d
FLECS_CONVERSION_ERR	$FLECS/$FLECS/flecs.c	/^#define FLECS_CONVERSION_ERR(/;"	d	file:	signature:(T,value)
FLECS_COREDOC	$FLECS/$FLECS/flecs.h	/^#define FLECS_COREDOC /;"	d
FLECS_COREDOC_H	$FLECS/$FLECS/flecs.h	/^#define FLECS_COREDOC_H$/;"	d
FLECS_CPP	$FLECS/$FLECS/flecs.h	/^#define FLECS_CPP /;"	d
FLECS_CPP_ENUM_REFLECTION_SUPPORT	$FLECS/$FLECS/flecs.h	/^#define FLECS_CPP_ENUM_REFLECTION_SUPPORT /;"	d
FLECS_CPP_H	$FLECS/$FLECS/flecs.h	/^#define FLECS_CPP_H$/;"	d
FLECS_C_	$FLECS/$FLECS/flecs.h	/^#define FLECS_C_$/;"	d
FLECS_DBG_API	$FLECS/$FLECS/flecs.h	/^#define FLECS_DBG_API /;"	d
FLECS_DEBUG	$FLECS/$FLECS/flecs.h	/^#define FLECS_DEBUG$/;"	d
FLECS_DELETE	$FLECS/$FLECS/flecs.h	/^#define FLECS_DELETE(/;"	d	signature:(_ptr)
FLECS_DEPRECATED_H	$FLECS/$FLECS/flecs.h	/^#define FLECS_DEPRECATED_H$/;"	d
FLECS_DOC	$FLECS/$FLECS/flecs.h	/^#define FLECS_DOC$/;"	d
FLECS_DOC_H	$FLECS/$FLECS/flecs.h	/^#define FLECS_DOC_H$/;"	d
FLECS_ENTITY_INDEX_H	$FLECS/$FLECS/flecs.c	/^#define FLECS_ENTITY_INDEX_H$/;"	d	file:
FLECS_ENTITY_PAGE_BITS	$FLECS/$FLECS/flecs.h	/^#define FLECS_ENTITY_PAGE_BITS /;"	d
FLECS_ENTITY_PAGE_MASK	$FLECS/$FLECS/flecs.c	/^#define FLECS_ENTITY_PAGE_MASK /;"	d	file:
FLECS_ENTITY_PAGE_SIZE	$FLECS/$FLECS/flecs.c	/^#define FLECS_ENTITY_PAGE_SIZE /;"	d	file:
FLECS_ENUM_LAST	$FLECS/$FLECS/flecs.h	/^#define FLECS_ENUM_LAST(/;"	d	signature:(T,Last)
FLECS_ENUM_MAX	$FLECS/$FLECS/flecs.h	/^#define FLECS_ENUM_MAX(/;"	d	signature:(T)
FLECS_ENUM_MAX_COUNT	$FLECS/$FLECS/flecs.h	/^#define FLECS_ENUM_MAX_COUNT /;"	d
FLECS_EVENT_DESC_MAX	$FLECS/$FLECS/flecs.h	/^#define FLECS_EVENT_DESC_MAX /;"	d
FLECS_EXPR	$FLECS/$FLECS/flecs.h	/^#define FLECS_EXPR$/;"	d
FLECS_EXPR_H	$FLECS/$FLECS/flecs.h	/^#define FLECS_EXPR_H$/;"	d
FLECS_FWD	$FLECS/$FLECS/flecs.h	/^#define FLECS_FWD(/;"	d	signature:(...)
FLECS_H	$FLECS/$FLECS/flecs.h	/^#define FLECS_H$/;"	d
FLECS_HASHMAP_H	$FLECS/$FLECS/flecs.h	/^#define FLECS_HASHMAP_H$/;"	d
FLECS_HI_COMPONENT_ID	$FLECS/$FLECS/flecs.h	/^#define FLECS_HI_COMPONENT_ID /;"	d
FLECS_HI_ID_RECORD_ID	$FLECS/$FLECS/flecs.h	/^#define FLECS_HI_ID_RECORD_ID /;"	d
FLECS_HTTP	$FLECS/$FLECS/flecs.h	/^#define FLECS_HTTP$/;"	d
FLECS_HTTP_H	$FLECS/$FLECS/flecs.h	/^#define FLECS_HTTP_H$/;"	d
FLECS_IBUILDER	$FLECS/$FLECS/flecs.h	/^#define FLECS_IBUILDER /;"	d
FLECS_ID0ID_	$FLECS/$FLECS/flecs.h	/^#define FLECS_ID0ID_ /;"	d
FLECS_ID_DESC_MAX	$FLECS/$FLECS/flecs.h	/^#define FLECS_ID_DESC_MAX /;"	d
FLECS_ID_INDEX_H	$FLECS/$FLECS/flecs.c	/^#define FLECS_ID_INDEX_H$/;"	d	file:
FLECS_ITER_H	$FLECS/$FLECS/flecs.c	/^#define FLECS_ITER_H$/;"	d	file:
FLECS_JOURNAL_H	$FLECS/$FLECS/flecs.h	/^#define FLECS_JOURNAL_H$/;"	d
FLECS_JOURNAL_LOG_LEVEL	$FLECS/$FLECS/flecs.h	/^#define FLECS_JOURNAL_LOG_LEVEL /;"	d
FLECS_JSON	$FLECS/$FLECS/flecs.h	/^#define FLECS_JSON$/;"	d
FLECS_JSON_H	$FLECS/$FLECS/flecs.h	/^#define FLECS_JSON_H$/;"	d
FLECS_LEGACY	$FLECS/$FLECS/flecs.h	/^#define FLECS_LEGACY$/;"	d
FLECS_LOG	$FLECS/$FLECS/flecs.h	/^#define FLECS_LOG$/;"	d
FLECS_LOG_0	$FLECS/$FLECS/flecs.h	/^#define FLECS_LOG_0$/;"	d
FLECS_LOG_1	$FLECS/$FLECS/flecs.h	/^#define FLECS_LOG_1$/;"	d
FLECS_LOG_2	$FLECS/$FLECS/flecs.h	/^#define FLECS_LOG_2$/;"	d
FLECS_LOG_3	$FLECS/$FLECS/flecs.h	/^#define FLECS_LOG_3 /;"	d
FLECS_LOG_H	$FLECS/$FLECS/flecs.h	/^#define FLECS_LOG_H$/;"	d
FLECS_MAP_H	$FLECS/$FLECS/flecs.h	/^#define FLECS_MAP_H$/;"	d
FLECS_META	$FLECS/$FLECS/flecs.h	/^#define FLECS_META$/;"	d
FLECS_META_C	$FLECS/$FLECS/flecs.h	/^#define FLECS_META_C /;"	d
FLECS_META_C_H	$FLECS/$FLECS/flecs.h	/^#define FLECS_META_C_H$/;"	d
FLECS_META_H	$FLECS/$FLECS/flecs.h	/^#define FLECS_META_H$/;"	d
FLECS_META_PRIVATE_H	$FLECS/$FLECS/flecs.c	/^#define FLECS_META_PRIVATE_H$/;"	d	file:
FLECS_METRICS	$FLECS/$FLECS/flecs.h	/^#define FLECS_METRICS /;"	d
FLECS_METRICS_H	$FLECS/$FLECS/flecs.h	/^#define FLECS_METRICS_H$/;"	d
FLECS_MODULE	$FLECS/$FLECS/flecs.h	/^#define FLECS_MODULE$/;"	d
FLECS_MODULE_H	$FLECS/$FLECS/flecs.h	/^#define FLECS_MODULE_H$/;"	d
FLECS_MONITOR	$FLECS/$FLECS/flecs.h	/^#define FLECS_MONITOR /;"	d
FLECS_MONITOR_H	$FLECS/$FLECS/flecs.h	/^#define FLECS_MONITOR_H$/;"	d
FLECS_MOV	$FLECS/$FLECS/flecs.h	/^#define FLECS_MOV(/;"	d	signature:(...)
FLECS_NAME_INDEX_H	$FLECS/$FLECS/flecs.c	/^#define FLECS_NAME_INDEX_H$/;"	d	file:
FLECS_NDEBUG	$FLECS/$FLECS/flecs.h	/^#define FLECS_NDEBUG$/;"	d
FLECS_NEW	$FLECS/$FLECS/flecs.h	/^#define FLECS_NEW(/;"	d	signature:(_type)
FLECS_NO_DEPRECATED_WARNINGS	$FLECS/$FLECS/flecs.h	/^#define FLECS_NO_DEPRECATED_WARNINGS$/;"	d
FLECS_OBSERVABLE_H	$FLECS/$FLECS/flecs.c	/^#define FLECS_OBSERVABLE_H$/;"	d	file:
FLECS_OS_API_H	$FLECS/$FLECS/flecs.h	/^#define FLECS_OS_API_H$/;"	d
FLECS_OS_API_IMPL	$FLECS/$FLECS/flecs.h	/^#define FLECS_OS_API_IMPL$/;"	d
FLECS_OS_API_IMPL_H	$FLECS/$FLECS/flecs.h	/^#define FLECS_OS_API_IMPL_H$/;"	d
FLECS_PARSER	$FLECS/$FLECS/flecs.h	/^#define FLECS_PARSER$/;"	d
FLECS_PARSER_H	$FLECS/$FLECS/flecs.h	/^#define FLECS_PARSER_H$/;"	d
FLECS_PIPELINE	$FLECS/$FLECS/flecs.h	/^#define FLECS_PIPELINE$/;"	d
FLECS_PIPELINE_H	$FLECS/$FLECS/flecs.h	/^#define FLECS_PIPELINE_H$/;"	d
FLECS_PIPELINE_PRIVATE_H	$FLECS/$FLECS/flecs.c	/^#define FLECS_PIPELINE_PRIVATE_H$/;"	d	file:
FLECS_PLACEMENT_NEW	$FLECS/$FLECS/flecs.h	/^#define FLECS_PLACEMENT_NEW(/;"	d	signature:(_ptr,_type)
FLECS_PLECS	$FLECS/$FLECS/flecs.h	/^#define FLECS_PLECS /;"	d
FLECS_PLECS_H	$FLECS/$FLECS/flecs.h	/^#define FLECS_PLECS_H$/;"	d
FLECS_POLY_H	$FLECS/$FLECS/flecs.c	/^#define FLECS_POLY_H$/;"	d	file:
FLECS_PRIVATE_H	$FLECS/$FLECS/flecs.c	/^#define FLECS_PRIVATE_H$/;"	d	file:
FLECS_PRIVATE_TYPES_H	$FLECS/$FLECS/flecs.c	/^#define FLECS_PRIVATE_TYPES_H$/;"	d	file:
FLECS_QUERY_SCOPE_NESTING_MAX	$FLECS/$FLECS/flecs.h	/^#define FLECS_QUERY_SCOPE_NESTING_MAX /;"	d
FLECS_REST	$FLECS/$FLECS/flecs.h	/^#define FLECS_REST /;"	d
FLECS_REST_H	$FLECS/$FLECS/flecs.h	/^#define FLECS_REST_H$/;"	d
FLECS_RULES	$FLECS/$FLECS/flecs.h	/^#define FLECS_RULES$/;"	d
FLECS_RULES_H	$FLECS/$FLECS/flecs.h	/^#define FLECS_RULES_H$/;"	d
FLECS_SNAPSHOT	$FLECS/$FLECS/flecs.h	/^#define FLECS_SNAPSHOT /;"	d
FLECS_SNAPSHOT_H	$FLECS/$FLECS/flecs.h	/^#define FLECS_SNAPSHOT_H$/;"	d
FLECS_SPARSE_H	$FLECS/$FLECS/flecs.h	/^#define FLECS_SPARSE_H$/;"	d
FLECS_SPARSE_PAGE_BITS	$FLECS/$FLECS/flecs.h	/^#define FLECS_SPARSE_PAGE_BITS /;"	d
FLECS_SPARSE_PAGE_SIZE	$FLECS/$FLECS/flecs.h	/^#define FLECS_SPARSE_PAGE_SIZE /;"	d
FLECS_STACK_ALLOCATOR_H	$FLECS/$FLECS/flecs.c	/^#define FLECS_STACK_ALLOCATOR_H$/;"	d	file:
FLECS_STACK_PAGE_OFFSET	$FLECS/$FLECS/flecs.c	/^#define FLECS_STACK_PAGE_OFFSET /;"	d	file:
FLECS_STAGE_H	$FLECS/$FLECS/flecs.c	/^#define FLECS_STAGE_H$/;"	d	file:
FLECS_STATS	$FLECS/$FLECS/flecs.h	/^#define FLECS_STATS$/;"	d
FLECS_STATS_H	$FLECS/$FLECS/flecs.h	/^#define FLECS_STATS_H$/;"	d
FLECS_STRBUF_H_	$FLECS/$FLECS/flecs.h	/^#define FLECS_STRBUF_H_$/;"	d
FLECS_SWITCH_LIST_H	$FLECS/$FLECS/flecs.c	/^#define FLECS_SWITCH_LIST_H$/;"	d	file:
FLECS_SYSTEM	$FLECS/$FLECS/flecs.h	/^#define FLECS_SYSTEM$/;"	d
FLECS_SYSTEM_H	$FLECS/$FLECS/flecs.h	/^#define FLECS_SYSTEM_H$/;"	d
FLECS_SYSTEM_PRIVATE_H	$FLECS/$FLECS/flecs.c	/^#define FLECS_SYSTEM_PRIVATE_H$/;"	d	file:
FLECS_TABLE_CACHE_H_	$FLECS/$FLECS/flecs.c	/^#define FLECS_TABLE_CACHE_H_$/;"	d	file:
FLECS_TABLE_GRAPH_H	$FLECS/$FLECS/flecs.c	/^#define FLECS_TABLE_GRAPH_H$/;"	d	file:
FLECS_TABLE_H	$FLECS/$FLECS/flecs.c	/^#define FLECS_TABLE_H$/;"	d	file:
FLECS_TBUILDER	$FLECS/$FLECS/flecs.h	/^#define FLECS_TBUILDER /;"	d
FLECS_TERM_DESC_MAX	$FLECS/$FLECS/flecs.h	/^#define FLECS_TERM_DESC_MAX /;"	d
FLECS_TIMER	$FLECS/$FLECS/flecs.h	/^#define FLECS_TIMER$/;"	d
FLECS_TIMER_H	$FLECS/$FLECS/flecs.h	/^#define FLECS_TIMER_H$/;"	d
FLECS_UNITS	$FLECS/$FLECS/flecs.h	/^#define FLECS_UNITS$/;"	d
FLECS_UNITS_H	$FLECS/$FLECS/flecs.h	/^#define FLECS_UNITS_H$/;"	d
FLECS_USE_OS_ALLOC	$FLECS/$FLECS/flecs.h	/^#define FLECS_USE_OS_ALLOC$/;"	d
FLECS_VARIABLE_COUNT_MAX	$FLECS/$FLECS/flecs.h	/^#define FLECS_VARIABLE_COUNT_MAX /;"	d
FLECS_VEC_H	$FLECS/$FLECS/flecs.h	/^#define FLECS_VEC_H$/;"	d
FLECS_WORLD_H	$FLECS/$FLECS/flecs.c	/^#define FLECS_WORLD_H$/;"	d	file:
Fahrenheit	$FLECS/$FLECS/flecs.h	/^struct Fahrenheit { };$/;"	s	struct:flecs::units::temperature
Femto	$FLECS/$FLECS/flecs.h	/^struct Femto { };$/;"	s	struct:flecs::units
File	$FLECS/$FLECS/flecs.h	/^struct File { };$/;"	s	struct:flecs::units::uri
Filter	$FLECS/$FLECS/flecs.h	/^static const uint32_t Filter = EcsFilter;$/;"	v	namespace:flecs	typeref:typename:const uint32_t
Final	$FLECS/$FLECS/flecs.h	/^static const flecs::entity_t Final = EcsFinal;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
Flatten	$FLECS/$FLECS/flecs.h	/^static const flecs::entity_t Flatten = EcsFlatten;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
Flecs	$FLECS/$FLECS/flecs.h	/^static const flecs::entity_t Flecs = EcsFlecs;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
FlecsAlertsImport	$FLECS/$FLECS/flecs.c	/^void FlecsAlertsImport(ecs_world_t *world) {$/;"	f	typeref:typename:void	signature:(ecs_world_t * world)
FlecsAlertsImport	$FLECS/$FLECS/flecs.h	/^void FlecsAlertsImport($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_world_t * world)
FlecsCore	$FLECS/$FLECS/flecs.h	/^static const flecs::entity_t FlecsCore = EcsFlecsCore;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
FlecsCoreDocImport	$FLECS/$FLECS/flecs.c	/^void FlecsCoreDocImport($/;"	f	typeref:typename:void	signature:(ecs_world_t * world)
FlecsCoreDocImport	$FLECS/$FLECS/flecs.h	/^void FlecsCoreDocImport($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_world_t * world)
FlecsDocImport	$FLECS/$FLECS/flecs.c	/^void FlecsDocImport($/;"	f	typeref:typename:void	signature:(ecs_world_t * world)
FlecsDocImport	$FLECS/$FLECS/flecs.h	/^void FlecsDocImport($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_world_t * world)
FlecsMetaImport	$FLECS/$FLECS/flecs.c	/^void FlecsMetaImport($/;"	f	typeref:typename:void	signature:(ecs_world_t * world)
FlecsMetaImport	$FLECS/$FLECS/flecs.h	/^void FlecsMetaImport($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_world_t * world)
FlecsMetricsImport	$FLECS/$FLECS/flecs.c	/^void FlecsMetricsImport(ecs_world_t *world) {$/;"	f	typeref:typename:void	signature:(ecs_world_t * world)
FlecsMetricsImport	$FLECS/$FLECS/flecs.h	/^void FlecsMetricsImport($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_world_t * world)
FlecsMonitorImport	$FLECS/$FLECS/flecs.c	/^void FlecsMonitorImport($/;"	f	typeref:typename:void	signature:(ecs_world_t * world)
FlecsMonitorImport	$FLECS/$FLECS/flecs.h	/^void FlecsMonitorImport($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_world_t * world)
FlecsPipelineFini	$FLECS/$FLECS/flecs.c	/^void FlecsPipelineFini($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,void * ctx)
FlecsPipelineImport	$FLECS/$FLECS/flecs.c	/^void FlecsPipelineImport($/;"	f	typeref:typename:void	signature:(ecs_world_t * world)
FlecsPipelineImport	$FLECS/$FLECS/flecs.h	/^void FlecsPipelineImport($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_world_t * world)
FlecsRestImport	$FLECS/$FLECS/flecs.c	/^void FlecsRestImport($/;"	f	typeref:typename:void	signature:(ecs_world_t * world)
FlecsRestImport	$FLECS/$FLECS/flecs.h	/^void FlecsRestImport($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_world_t * world)
FlecsRuleOrMarker	$FLECS/$FLECS/flecs.c	/^#define FlecsRuleOrMarker /;"	d	file:
FlecsScriptImport	$FLECS/$FLECS/flecs.c	/^void FlecsScriptImport($/;"	f	typeref:typename:void	signature:(ecs_world_t * world)
FlecsScriptImport	$FLECS/$FLECS/flecs.h	/^void FlecsScriptImport($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_world_t * world)
FlecsSystemImport	$FLECS/$FLECS/flecs.c	/^void FlecsSystemImport($/;"	f	typeref:typename:void	signature:(ecs_world_t * world)
FlecsSystemImport	$FLECS/$FLECS/flecs.h	/^void FlecsSystemImport($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_world_t * world)
FlecsTimerImport	$FLECS/$FLECS/flecs.c	/^void FlecsTimerImport($/;"	f	typeref:typename:void	signature:(ecs_world_t * world)
FlecsTimerImport	$FLECS/$FLECS/flecs.h	/^void FlecsTimerImport($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_world_t * world)
FlecsUnitsImport	$FLECS/$FLECS/flecs.c	/^void FlecsUnitsImport($/;"	f	typeref:typename:void	signature:(ecs_world_t * world)
FlecsUnitsImport	$FLECS/$FLECS/flecs.h	/^void FlecsUnitsImport($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_world_t * world)
Force	$FLECS/$FLECS/flecs.h	/^struct Force { };$/;"	s	struct:flecs::units
Frequency	$FLECS/$FLECS/flecs.h	/^struct Frequency { };$/;"	s	struct:flecs::units
Gauge	$FLECS/$FLECS/flecs.h	/^    struct Gauge { };$/;"	s	struct:flecs::metrics
Gibi	$FLECS/$FLECS/flecs.h	/^struct Gibi { };$/;"	s	struct:flecs::units
GibiBytes	$FLECS/$FLECS/flecs.h	/^struct GibiBytes { };$/;"	s	struct:flecs::units::data
Giga	$FLECS/$FLECS/flecs.h	/^struct Giga { };$/;"	s	struct:flecs::units
GigaBits	$FLECS/$FLECS/flecs.h	/^struct GigaBits { };$/;"	s	struct:flecs::units::data
GigaBitsPerSecond	$FLECS/$FLECS/flecs.h	/^struct GigaBitsPerSecond { };$/;"	s	struct:flecs::units::datarate
GigaBytes	$FLECS/$FLECS/flecs.h	/^struct GigaBytes { };$/;"	s	struct:flecs::units::data
GigaBytesPerSecond	$FLECS/$FLECS/flecs.h	/^struct GigaBytesPerSecond { };$/;"	s	struct:flecs::units::datarate
GigaHertz	$FLECS/$FLECS/flecs.h	/^struct GigaHertz { };$/;"	s	struct:flecs::units::frequency
Grams	$FLECS/$FLECS/flecs.h	/^struct Grams { };$/;"	s	struct:flecs::units::mass
HAVE_EXECINFO	$FLECS/$FLECS/flecs.c	/^#define HAVE_EXECINFO /;"	d	file:
HTTP_SOCKET_INVALID	$FLECS/$FLECS/flecs.c	/^#define HTTP_SOCKET_INVALID /;"	d	file:
Hecto	$FLECS/$FLECS/flecs.h	/^struct Hecto { };$/;"	s	struct:flecs::units
Hertz	$FLECS/$FLECS/flecs.h	/^struct Hertz { };$/;"	s	struct:flecs::units::frequency
Hours	$FLECS/$FLECS/flecs.h	/^struct Hours { };$/;"	s	struct:flecs::units::duration
HttpFragState	$FLECS/$FLECS/flecs.c	/^} HttpFragState;$/;"	t	typeref:enum:__anonb2bcda230603	file:
HttpFragStateBegin	$FLECS/$FLECS/flecs.c	/^    HttpFragStateBegin,$/;"	e	enum:__anonb2bcda230603	file:
HttpFragStateBody	$FLECS/$FLECS/flecs.c	/^    HttpFragStateBody,$/;"	e	enum:__anonb2bcda230603	file:
HttpFragStateCR	$FLECS/$FLECS/flecs.c	/^    HttpFragStateCR,$/;"	e	enum:__anonb2bcda230603	file:
HttpFragStateCRLF	$FLECS/$FLECS/flecs.c	/^    HttpFragStateCRLF,$/;"	e	enum:__anonb2bcda230603	file:
HttpFragStateCRLFCR	$FLECS/$FLECS/flecs.c	/^    HttpFragStateCRLFCR,$/;"	e	enum:__anonb2bcda230603	file:
HttpFragStateDone	$FLECS/$FLECS/flecs.c	/^    HttpFragStateDone$/;"	e	enum:__anonb2bcda230603	file:
HttpFragStateHeaderName	$FLECS/$FLECS/flecs.c	/^    HttpFragStateHeaderName,$/;"	e	enum:__anonb2bcda230603	file:
HttpFragStateHeaderStart	$FLECS/$FLECS/flecs.c	/^    HttpFragStateHeaderStart,$/;"	e	enum:__anonb2bcda230603	file:
HttpFragStateHeaderValue	$FLECS/$FLECS/flecs.c	/^    HttpFragStateHeaderValue,$/;"	e	enum:__anonb2bcda230603	file:
HttpFragStateHeaderValueStart	$FLECS/$FLECS/flecs.c	/^    HttpFragStateHeaderValueStart,$/;"	e	enum:__anonb2bcda230603	file:
HttpFragStateMethod	$FLECS/$FLECS/flecs.c	/^    HttpFragStateMethod,$/;"	e	enum:__anonb2bcda230603	file:
HttpFragStatePath	$FLECS/$FLECS/flecs.c	/^    HttpFragStatePath,$/;"	e	enum:__anonb2bcda230603	file:
HttpFragStateVersion	$FLECS/$FLECS/flecs.c	/^    HttpFragStateVersion,$/;"	e	enum:__anonb2bcda230603	file:
Hyperlink	$FLECS/$FLECS/flecs.h	/^struct Hyperlink { };$/;"	s	struct:flecs::units::uri
I16	$FLECS/$FLECS/flecs.h	/^static const primitive_kind_t I16 = EcsI16;$/;"	v	namespace:flecs::meta	typeref:typename:const primitive_kind_t
I32	$FLECS/$FLECS/flecs.h	/^static const primitive_kind_t I32 = EcsI32;$/;"	v	namespace:flecs::meta	typeref:typename:const primitive_kind_t
I64	$FLECS/$FLECS/flecs.h	/^static const primitive_kind_t I64 = EcsI64;$/;"	v	namespace:flecs::meta	typeref:typename:const primitive_kind_t
I8	$FLECS/$FLECS/flecs.h	/^static const primitive_kind_t I8 = EcsI8;$/;"	v	namespace:flecs::meta	typeref:typename:const primitive_kind_t
IBase	$FLECS/$FLECS/flecs.h	/^    using IBase = IBuilder<Base, Components ...>;$/;"	t	struct:flecs::_::node_builder	typeref:typename:IBuilder<Base,Components...>
INIT_CACHE	$FLECS/$FLECS/flecs.c	/^#define INIT_CACHE(/;"	d	file:	signature:(it,stack,fields,f,T,count)
INT64_MAX_F	$FLECS/$FLECS/flecs.c	/^#define INT64_MAX_F /;"	d	file:
IPtr	$FLECS/$FLECS/flecs.h	/^static const primitive_kind_t IPtr = EcsIPtr;$/;"	v	namespace:flecs::meta	typeref:typename:const primitive_kind_t
IdArray	$FLECS/$FLECS/flecs.h	/^    using IdArray = flecs::array<id_t, sizeof...(Args)>;$/;"	t	struct:flecs::_::entity_with_delegate_impl
Identifier	$FLECS/$FLECS/flecs.h	/^using Identifier = EcsIdentifier;$/;"	t	namespace:flecs	typeref:typename:EcsIdentifier
Image	$FLECS/$FLECS/flecs.h	/^struct Image { };$/;"	s	struct:flecs::units::uri
In	$FLECS/$FLECS/flecs.h	/^    In = EcsIn,$/;"	e	enum:flecs::inout_kind_t
InOut	$FLECS/$FLECS/flecs.h	/^    InOut = EcsInOut,$/;"	e	enum:flecs::inout_kind_t
InOutDefault	$FLECS/$FLECS/flecs.h	/^    InOutDefault = EcsInOutDefault,$/;"	e	enum:flecs::inout_kind_t
InOutNone	$FLECS/$FLECS/flecs.h	/^    InOutNone = EcsInOutNone,$/;"	e	enum:flecs::inout_kind_t
Info	$FLECS/$FLECS/flecs.h	/^    struct Info { };$/;"	s	struct:flecs::alerts
Instance	$FLECS/$FLECS/flecs.h	/^    using Instance = EcsAlertInstance;$/;"	t	struct:flecs::alerts	typeref:typename:EcsAlertInstance
Iptr	$FLECS/$FLECS/flecs.h	/^static const flecs::entity_t Iptr = ecs_id(ecs_iptr_t);$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
IsA	$FLECS/$FLECS/flecs.h	/^static const flecs::entity_t IsA = EcsIsA;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
IsEntity	$FLECS/$FLECS/flecs.h	/^static const uint32_t IsEntity = EcsIsEntity;$/;"	v	namespace:flecs	typeref:typename:const uint32_t
IsVariable	$FLECS/$FLECS/flecs.h	/^static const uint32_t IsVariable = EcsIsVariable;$/;"	v	namespace:flecs	typeref:typename:const uint32_t
IterOnly	$FLECS/$FLECS/flecs.h	/^    static constexpr bool IterOnly = arity<Func>::value == 1;$/;"	m	struct:flecs::_::iter_delegate	typeref:typename:bool
JsonArrayClose	$FLECS/$FLECS/flecs.c	/^    JsonArrayClose,$/;"	e	enum:ecs_json_token_t	file:
JsonArrayOpen	$FLECS/$FLECS/flecs.c	/^    JsonArrayOpen,$/;"	e	enum:ecs_json_token_t	file:
JsonColon	$FLECS/$FLECS/flecs.c	/^    JsonColon,$/;"	e	enum:ecs_json_token_t	file:
JsonComma	$FLECS/$FLECS/flecs.c	/^    JsonComma,$/;"	e	enum:ecs_json_token_t	file:
JsonFalse	$FLECS/$FLECS/flecs.c	/^    JsonFalse,$/;"	e	enum:ecs_json_token_t	file:
JsonInvalid	$FLECS/$FLECS/flecs.c	/^    JsonInvalid$/;"	e	enum:ecs_json_token_t	file:
JsonLargeInt	$FLECS/$FLECS/flecs.c	/^    JsonLargeInt,$/;"	e	enum:ecs_json_token_t	file:
JsonLargeString	$FLECS/$FLECS/flecs.c	/^    JsonLargeString,$/;"	e	enum:ecs_json_token_t	file:
JsonNull	$FLECS/$FLECS/flecs.c	/^    JsonNull,$/;"	e	enum:ecs_json_token_t	file:
JsonNumber	$FLECS/$FLECS/flecs.c	/^    JsonNumber,$/;"	e	enum:ecs_json_token_t	file:
JsonObjectClose	$FLECS/$FLECS/flecs.c	/^    JsonObjectClose,$/;"	e	enum:ecs_json_token_t	file:
JsonObjectOpen	$FLECS/$FLECS/flecs.c	/^    JsonObjectOpen,$/;"	e	enum:ecs_json_token_t	file:
JsonString	$FLECS/$FLECS/flecs.c	/^    JsonString,$/;"	e	enum:ecs_json_token_t	file:
JsonTrue	$FLECS/$FLECS/flecs.c	/^    JsonTrue,$/;"	e	enum:ecs_json_token_t	file:
Kelvin	$FLECS/$FLECS/flecs.h	/^struct Kelvin { };$/;"	s	struct:flecs::units::temperature
Kibi	$FLECS/$FLECS/flecs.h	/^struct Kibi { };$/;"	s	struct:flecs::units
KibiBytes	$FLECS/$FLECS/flecs.h	/^struct KibiBytes { };$/;"	s	struct:flecs::units::data
Kilo	$FLECS/$FLECS/flecs.h	/^struct Kilo { };$/;"	s	struct:flecs::units
KiloBits	$FLECS/$FLECS/flecs.h	/^struct KiloBits { };$/;"	s	struct:flecs::units::data
KiloBitsPerSecond	$FLECS/$FLECS/flecs.h	/^struct KiloBitsPerSecond { };$/;"	s	struct:flecs::units::datarate
KiloBytes	$FLECS/$FLECS/flecs.h	/^struct KiloBytes { };$/;"	s	struct:flecs::units::data
KiloBytesPerSecond	$FLECS/$FLECS/flecs.h	/^struct KiloBytesPerSecond { };$/;"	s	struct:flecs::units::datarate
KiloGrams	$FLECS/$FLECS/flecs.h	/^struct KiloGrams { };$/;"	s	struct:flecs::units::mass
KiloHertz	$FLECS/$FLECS/flecs.h	/^struct KiloHertz { };$/;"	s	struct:flecs::units::frequency
KiloMeters	$FLECS/$FLECS/flecs.h	/^struct KiloMeters { };$/;"	s	struct:flecs::units::length
KiloMetersPerHour	$FLECS/$FLECS/flecs.h	/^struct KiloMetersPerHour { };$/;"	s	struct:flecs::units::speed
KiloMetersPerSecond	$FLECS/$FLECS/flecs.h	/^struct KiloMetersPerSecond { };$/;"	s	struct:flecs::units::speed
LONG	$FLECS/$FLECS/flecs.c	/^        LONG (__stdcall *f)($/;"	p	union:win_enable_high_timer_resolution::__anonb2bcda231e0a	file:	signature:(__stdcall * f)
Length	$FLECS/$FLECS/flecs.h	/^struct Length { };$/;"	s	struct:flecs::units
Link	$FLECS/$FLECS/flecs.h	/^static const flecs::entity_t Link = EcsDocLink;$/;"	v	namespace:flecs::doc	typeref:typename:const flecs::entity_t
LuminousIntensity	$FLECS/$FLECS/flecs.h	/^struct LuminousIntensity { };$/;"	s	struct:flecs::units
MAX_PRECISION	$FLECS/$FLECS/flecs.c	/^#define MAX_PRECISION	/;"	d	file:
MSG_NOSIGNAL	$FLECS/$FLECS/flecs.c	/^#define MSG_NOSIGNAL /;"	d	file:
Mass	$FLECS/$FLECS/flecs.h	/^struct Mass { };$/;"	s	struct:flecs::units
Mebi	$FLECS/$FLECS/flecs.h	/^struct Mebi { };$/;"	s	struct:flecs::units
MebiBytes	$FLECS/$FLECS/flecs.h	/^struct MebiBytes { };$/;"	s	struct:flecs::units::data
Mega	$FLECS/$FLECS/flecs.h	/^struct Mega { };$/;"	s	struct:flecs::units
MegaBits	$FLECS/$FLECS/flecs.h	/^struct MegaBits { };$/;"	s	struct:flecs::units::data
MegaBitsPerSecond	$FLECS/$FLECS/flecs.h	/^struct MegaBitsPerSecond { };$/;"	s	struct:flecs::units::datarate
MegaBytes	$FLECS/$FLECS/flecs.h	/^struct MegaBytes { };$/;"	s	struct:flecs::units::data
MegaBytesPerSecond	$FLECS/$FLECS/flecs.h	/^struct MegaBytesPerSecond { };$/;"	s	struct:flecs::units::datarate
MegaHertz	$FLECS/$FLECS/flecs.h	/^struct MegaHertz { };$/;"	s	struct:flecs::units::frequency
Member	$FLECS/$FLECS/flecs.h	/^using Member = EcsMember;$/;"	t	namespace:flecs	typeref:typename:EcsMember
MemberRanges	$FLECS/$FLECS/flecs.h	/^using MemberRanges = EcsMemberRanges;$/;"	t	namespace:flecs	typeref:typename:EcsMemberRanges
MetaType	$FLECS/$FLECS/flecs.h	/^using MetaType = EcsMetaType;$/;"	t	namespace:flecs	typeref:typename:EcsMetaType
MetaTypeSerialized	$FLECS/$FLECS/flecs.h	/^using MetaTypeSerialized = EcsMetaTypeSerialized;$/;"	t	namespace:flecs	typeref:typename:EcsMetaTypeSerialized
Meters	$FLECS/$FLECS/flecs.h	/^struct Meters { };$/;"	s	struct:flecs::units::length
MetersPerSecond	$FLECS/$FLECS/flecs.h	/^struct MetersPerSecond { };$/;"	s	struct:flecs::units::speed
Metric	$FLECS/$FLECS/flecs.h	/^    struct Metric { };$/;"	s	struct:flecs::metrics
Micro	$FLECS/$FLECS/flecs.h	/^struct Micro { };$/;"	s	struct:flecs::units
MicroMeters	$FLECS/$FLECS/flecs.h	/^struct MicroMeters { };$/;"	s	struct:flecs::units::length
MicroSeconds	$FLECS/$FLECS/flecs.h	/^struct MicroSeconds { };$/;"	s	struct:flecs::units::duration
Miles	$FLECS/$FLECS/flecs.h	/^struct Miles { };$/;"	s	struct:flecs::units::length
MilesPerHour	$FLECS/$FLECS/flecs.h	/^struct MilesPerHour { };$/;"	s	struct:flecs::units::speed
Milli	$FLECS/$FLECS/flecs.h	/^struct Milli { };$/;"	s	struct:flecs::units
MilliMeters	$FLECS/$FLECS/flecs.h	/^struct MilliMeters { };$/;"	s	struct:flecs::units::length
MilliSeconds	$FLECS/$FLECS/flecs.h	/^struct MilliSeconds { };$/;"	s	struct:flecs::units::duration
Minutes	$FLECS/$FLECS/flecs.h	/^struct Minutes { };$/;"	s	struct:flecs::units::duration
Module	$FLECS/$FLECS/flecs.h	/^static const flecs::entity_t Module = EcsModule;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
Mole	$FLECS/$FLECS/flecs.h	/^struct Mole { };$/;"	s	struct:flecs::units::amount
Monitor	$FLECS/$FLECS/flecs.h	/^static const flecs::entity_t Monitor = EcsMonitor;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
MonitorAlertInstances	$FLECS/$FLECS/flecs.c	/^void MonitorAlertInstances(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:	signature:(ecs_iter_t * it)
MonitorAlerts	$FLECS/$FLECS/flecs.c	/^void MonitorAlerts(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:	signature:(ecs_iter_t * it)
MonitorStats	$FLECS/$FLECS/flecs.c	/^void MonitorStats(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:	signature:(ecs_iter_t * it)
NULL	$FLECS/$FLECS/flecs.h	/^#define NULL /;"	d
Name	$FLECS/$FLECS/flecs.h	/^static const flecs::entity_t Name = EcsName;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
Nano	$FLECS/$FLECS/flecs.h	/^struct Nano { };$/;"	s	struct:flecs::units
NanoMeters	$FLECS/$FLECS/flecs.h	/^struct NanoMeters { };$/;"	s	struct:flecs::units::length
NanoSeconds	$FLECS/$FLECS/flecs.h	/^struct NanoSeconds { };$/;"	s	struct:flecs::units::duration
Newton	$FLECS/$FLECS/flecs.h	/^struct Newton { };$/;"	s	struct:flecs::units::force
Not	$FLECS/$FLECS/flecs.h	/^    Not = EcsNot,$/;"	e	enum:flecs::oper_kind_t
NotFrom	$FLECS/$FLECS/flecs.h	/^    NotFrom = EcsNotFrom$/;"	e	enum:flecs::oper_kind_t
OFFSET	$FLECS/$FLECS/flecs.c	/^#define OFFSET(/;"	d	file:	signature:(index)
Observer	$FLECS/$FLECS/flecs.h	/^static const flecs::entity_t Observer = EcsObserver;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
OnAdd	$FLECS/$FLECS/flecs.h	/^static const flecs::entity_t OnAdd = EcsOnAdd;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
OnDelete	$FLECS/$FLECS/flecs.h	/^static const flecs::entity_t OnDelete = EcsOnDelete;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
OnDeleteTarget	$FLECS/$FLECS/flecs.h	/^static const flecs::entity_t OnDeleteTarget = EcsOnDeleteTarget;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
OnLoad	$FLECS/$FLECS/flecs.h	/^static const flecs::entity_t OnLoad = EcsOnLoad;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
OnRemove	$FLECS/$FLECS/flecs.h	/^static const flecs::entity_t OnRemove = EcsOnRemove;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
OnSet	$FLECS/$FLECS/flecs.h	/^static const flecs::entity_t OnSet = EcsOnSet;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
OnStart	$FLECS/$FLECS/flecs.h	/^static const flecs::entity_t OnStart = EcsOnStart;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
OnStore	$FLECS/$FLECS/flecs.h	/^static const flecs::entity_t OnStore = EcsOnStore;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
OnTableCreate	$FLECS/$FLECS/flecs.h	/^static const flecs::entity_t OnTableCreate = EcsOnTableCreate;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
OnTableDelete	$FLECS/$FLECS/flecs.h	/^static const flecs::entity_t OnTableDelete = EcsOnTableDelete;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
OnUpdate	$FLECS/$FLECS/flecs.h	/^static const flecs::entity_t OnUpdate = EcsOnUpdate;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
OnValidate	$FLECS/$FLECS/flecs.h	/^static const flecs::entity_t OnValidate = EcsOnValidate;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
OneOf	$FLECS/$FLECS/flecs.h	/^static const flecs::entity_t OneOf = EcsOneOf;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
Optional	$FLECS/$FLECS/flecs.h	/^    Optional = EcsOptional,$/;"	e	enum:flecs::oper_kind_t
Or	$FLECS/$FLECS/flecs.h	/^    Or = EcsOr,$/;"	e	enum:flecs::oper_kind_t
OrFrom	$FLECS/$FLECS/flecs.h	/^    OrFrom = EcsOrFrom,$/;"	e	enum:flecs::oper_kind_t
Out	$FLECS/$FLECS/flecs.h	/^    Out = EcsOut$/;"	e	enum:flecs::inout_kind_t
Override	$FLECS/$FLECS/flecs.h	/^static const flecs::entity_t Override = ECS_OVERRIDE;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
PAGE	$FLECS/$FLECS/flecs.c	/^#define PAGE(index) ((int32_t)((uint32_t)index >> FLECS_SPARSE_PAGE_/;"	d	file:	signature:(index)
Pair	$FLECS/$FLECS/flecs.h	/^static const flecs::entity_t Pair = ECS_PAIR;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
Panic	$FLECS/$FLECS/flecs.h	/^static const flecs::entity_t Panic = EcsPanic;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
Parent	$FLECS/$FLECS/flecs.h	/^static const uint32_t Parent = EcsParent;$/;"	v	namespace:flecs	typeref:typename:const uint32_t
Pascal	$FLECS/$FLECS/flecs.h	/^struct Pascal { };$/;"	s	struct:flecs::units::pressure
PassEntity	$FLECS/$FLECS/flecs.h	/^    static constexpr bool PassEntity = $/;"	m	struct:flecs::_::find_delegate	typeref:typename:bool
PassIter	$FLECS/$FLECS/flecs.h	/^    static constexpr bool PassIter = $/;"	m	struct:flecs::_::find_delegate	typeref:typename:bool
Pebi	$FLECS/$FLECS/flecs.h	/^struct Pebi { };$/;"	s	struct:flecs::units
Percentage	$FLECS/$FLECS/flecs.h	/^struct Percentage { };$/;"	s	struct:flecs::units
Peta	$FLECS/$FLECS/flecs.h	/^struct Peta { };$/;"	s	struct:flecs::units
Phase	$FLECS/$FLECS/flecs.h	/^static const flecs::entity_t Phase = EcsPhase;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
Pico	$FLECS/$FLECS/flecs.h	/^struct Pico { };$/;"	s	struct:flecs::units
PicoMeters	$FLECS/$FLECS/flecs.h	/^struct PicoMeters { };$/;"	s	struct:flecs::units::length
PicoSeconds	$FLECS/$FLECS/flecs.h	/^struct PicoSeconds { };$/;"	s	struct:flecs::units::duration
Pipeline	$FLECS/$FLECS/flecs.h	/^static const flecs::entity_t Pipeline = ecs_id(EcsPipeline);$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
PipelineStats	$FLECS/$FLECS/flecs.h	/^using PipelineStats = EcsPipelineStats;$/;"	t	namespace:flecs	typeref:typename:EcsPipelineStats
Pixels	$FLECS/$FLECS/flecs.h	/^struct Pixels { };$/;"	s	struct:flecs::units::length
Poly	$FLECS/$FLECS/flecs.h	/^using Poly = EcsPoly;$/;"	t	namespace:flecs	typeref:typename:EcsPoly
PostFrame	$FLECS/$FLECS/flecs.h	/^static const flecs::entity_t PostFrame = EcsPostFrame;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
PostLoad	$FLECS/$FLECS/flecs.h	/^static const flecs::entity_t PostLoad = EcsPostLoad;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
PostUpdate	$FLECS/$FLECS/flecs.h	/^static const flecs::entity_t PostUpdate = EcsPostUpdate;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
PreFrame	$FLECS/$FLECS/flecs.h	/^static const flecs::entity_t PreFrame = EcsPreFrame;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
PreStore	$FLECS/$FLECS/flecs.h	/^static const flecs::entity_t PreStore = EcsPreStore;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
PreUpdate	$FLECS/$FLECS/flecs.h	/^static const flecs::entity_t PreUpdate = EcsPreUpdate;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
PredEq	$FLECS/$FLECS/flecs.h	/^static const flecs::entity_t PredEq = EcsPredEq;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
PredLookup	$FLECS/$FLECS/flecs.h	/^static const flecs::entity_t PredLookup = EcsPredLookup;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
PredMatch	$FLECS/$FLECS/flecs.h	/^static const flecs::entity_t PredMatch = EcsPredMatch;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
Prefab	$FLECS/$FLECS/flecs.h	/^static const flecs::entity_t Prefab = EcsPrefab;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
Prefixes	$FLECS/$FLECS/flecs.h	/^struct Prefixes { };$/;"	s	struct:flecs::units
Pressure	$FLECS/$FLECS/flecs.h	/^struct Pressure { };$/;"	s	struct:flecs::units
Primitive	$FLECS/$FLECS/flecs.h	/^using Primitive = EcsPrimitive;$/;"	t	namespace:flecs	typeref:typename:EcsPrimitive
PrimitiveKindLast	$FLECS/$FLECS/flecs.h	/^static const primitive_kind_t PrimitiveKindLast = EcsPrimitiveKindLast;$/;"	v	namespace:flecs::meta	typeref:typename:const primitive_kind_t
PrimitiveType	$FLECS/$FLECS/flecs.h	/^static const type_kind_t PrimitiveType = EcsPrimitiveType;$/;"	v	namespace:flecs::meta	typeref:typename:const type_kind_t
Private	$FLECS/$FLECS/flecs.h	/^static const flecs::entity_t Private = EcsPrivate;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
ProgressRateFilters	$FLECS/$FLECS/flecs.c	/^void ProgressRateFilters(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:	signature:(ecs_iter_t * it)
ProgressTickSource	$FLECS/$FLECS/flecs.c	/^void ProgressTickSource(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:	signature:(ecs_iter_t * it)
ProgressTimers	$FLECS/$FLECS/flecs.c	/^void ProgressTimers(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:	signature:(ecs_iter_t * it)
Quantity	$FLECS/$FLECS/flecs.h	/^static const flecs::entity_t Quantity = EcsQuantity;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
Query	$FLECS/$FLECS/flecs.h	/^static const flecs::entity_t Query = EcsQuery;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
Radians	$FLECS/$FLECS/flecs.h	/^struct Radians { };$/;"	s	struct:flecs::units::angle
RandomizeTimers	$FLECS/$FLECS/flecs.c	/^void RandomizeTimers(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:	signature:(ecs_iter_t * it)
RateFilter	$FLECS/$FLECS/flecs.h	/^using RateFilter = EcsRateFilter;$/;"	t	namespace:flecs	typeref:typename:EcsRateFilter
ReduceStats	$FLECS/$FLECS/flecs.c	/^void ReduceStats(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:	signature:(ecs_iter_t * it)
Reflexive	$FLECS/$FLECS/flecs.h	/^static const flecs::entity_t Reflexive = EcsReflexive;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
Remove	$FLECS/$FLECS/flecs.h	/^static const flecs::entity_t Remove = EcsRemove;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
Rest	$FLECS/$FLECS/flecs.h	/^using Rest = EcsRest;$/;"	t	namespace:flecs	typeref:typename:EcsRest
STACK_MAX_SIZE	$FLECS/$FLECS/flecs.c	/^#define STACK_MAX_SIZE /;"	d	file:
ScopeClose	$FLECS/$FLECS/flecs.h	/^static const flecs::entity_t ScopeClose = EcsScopeClose;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
ScopeOpen	$FLECS/$FLECS/flecs.h	/^static const flecs::entity_t ScopeOpen = EcsScopeOpen;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
Seconds	$FLECS/$FLECS/flecs.h	/^struct Seconds { };$/;"	s	struct:flecs::units::duration
Self	$FLECS/$FLECS/flecs.h	/^static const uint32_t Self = EcsSelf;$/;"	v	namespace:flecs	typeref:typename:const uint32_t
SetMetricDocName	$FLECS/$FLECS/flecs.c	/^static void SetMetricDocName(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:	signature:(ecs_iter_t * it)
SlotOf	$FLECS/$FLECS/flecs.h	/^static const flecs::entity_t SlotOf = EcsSlotOf;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
Source	$FLECS/$FLECS/flecs.h	/^    using Source = EcsMetricSource;$/;"	t	struct:flecs::metrics	typeref:typename:EcsMetricSource
Speed	$FLECS/$FLECS/flecs.h	/^struct Speed { };$/;"	s	struct:flecs::units
String	$FLECS/$FLECS/flecs.h	/^static const primitive_kind_t String = EcsString;$/;"	v	namespace:flecs::meta	typeref:typename:const primitive_kind_t
Struct	$FLECS/$FLECS/flecs.h	/^using Struct = EcsStruct;$/;"	t	namespace:flecs	typeref:typename:EcsStruct
StructType	$FLECS/$FLECS/flecs.h	/^static const type_kind_t StructType = EcsStructType;$/;"	v	namespace:flecs::meta	typeref:typename:const type_kind_t
Symbol	$FLECS/$FLECS/flecs.h	/^static const flecs::entity_t Symbol = EcsSymbol;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
Symmetric	$FLECS/$FLECS/flecs.h	/^static const flecs::entity_t Symmetric = EcsSymmetric;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
System	$FLECS/$FLECS/flecs.h	/^static const flecs::entity_t System = EcsSystem;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
TOK_AND	$FLECS/$FLECS/flecs.c	/^#define TOK_AND /;"	d	file:
TOK_ASSEMBLY	$FLECS/$FLECS/flecs.c	/^#define TOK_ASSEMBLY /;"	d	file:
TOK_BITWISE_OR	$FLECS/$FLECS/flecs.c	/^#define TOK_BITWISE_OR /;"	d	file:
TOK_BRACKET_CLOSE	$FLECS/$FLECS/flecs.c	/^#define TOK_BRACKET_CLOSE /;"	d	file:
TOK_BRACKET_OPEN	$FLECS/$FLECS/flecs.c	/^#define TOK_BRACKET_OPEN /;"	d	file:
TOK_CASCADE	$FLECS/$FLECS/flecs.c	/^#define TOK_CASCADE /;"	d	file:
TOK_COLON	$FLECS/$FLECS/flecs.c	/^#define TOK_COLON /;"	d	file:
TOK_CONST	$FLECS/$FLECS/flecs.c	/^#define TOK_CONST /;"	d	file:
TOK_DESC	$FLECS/$FLECS/flecs.c	/^#define TOK_DESC /;"	d	file:
TOK_DOWN	$FLECS/$FLECS/flecs.c	/^#define TOK_DOWN /;"	d	file:
TOK_EQ	$FLECS/$FLECS/flecs.c	/^#define TOK_EQ /;"	d	file:
TOK_EXPR_STRING	$FLECS/$FLECS/flecs.c	/^#define TOK_EXPR_STRING /;"	d	file:
TOK_IN	$FLECS/$FLECS/flecs.c	/^#define TOK_IN /;"	d	file:
TOK_INOUT	$FLECS/$FLECS/flecs.c	/^#define TOK_INOUT /;"	d	file:
TOK_INOUT_NONE	$FLECS/$FLECS/flecs.c	/^#define TOK_INOUT_NONE /;"	d	file:
TOK_MATCH	$FLECS/$FLECS/flecs.c	/^#define TOK_MATCH /;"	d	file:
TOK_MODULE	$FLECS/$FLECS/flecs.c	/^#define TOK_MODULE /;"	d	file:
TOK_NEQ	$FLECS/$FLECS/flecs.c	/^#define TOK_NEQ /;"	d	file:
TOK_NEWLINE	$FLECS/$FLECS/flecs.c	/^#define TOK_NEWLINE /;"	d	file:
TOK_NOT	$FLECS/$FLECS/flecs.c	/^#define TOK_NOT /;"	d	file:
TOK_OPTIONAL	$FLECS/$FLECS/flecs.c	/^#define TOK_OPTIONAL /;"	d	file:
TOK_OR	$FLECS/$FLECS/flecs.c	/^#define TOK_OR /;"	d	file:
TOK_OUT	$FLECS/$FLECS/flecs.c	/^#define TOK_OUT /;"	d	file:
TOK_OVERRIDE	$FLECS/$FLECS/flecs.c	/^#define TOK_OVERRIDE /;"	d	file:
TOK_PARENT	$FLECS/$FLECS/flecs.c	/^#define TOK_PARENT /;"	d	file:
TOK_PAREN_CLOSE	$FLECS/$FLECS/flecs.c	/^#define TOK_PAREN_CLOSE /;"	d	file:
TOK_PAREN_OPEN	$FLECS/$FLECS/flecs.c	/^#define TOK_PAREN_OPEN /;"	d	file:
TOK_PROP	$FLECS/$FLECS/flecs.c	/^#define TOK_PROP /;"	d	file:
TOK_ROLE_AND	$FLECS/$FLECS/flecs.c	/^#define TOK_ROLE_AND /;"	d	file:
TOK_ROLE_NOT	$FLECS/$FLECS/flecs.c	/^#define TOK_ROLE_NOT /;"	d	file:
TOK_ROLE_OR	$FLECS/$FLECS/flecs.c	/^#define TOK_ROLE_OR /;"	d	file:
TOK_ROLE_TOGGLE	$FLECS/$FLECS/flecs.c	/^#define TOK_ROLE_TOGGLE /;"	d	file:
TOK_SCOPE_CLOSE	$FLECS/$FLECS/flecs.c	/^#define TOK_SCOPE_CLOSE /;"	d	file:
TOK_SCOPE_OPEN	$FLECS/$FLECS/flecs.c	/^#define TOK_SCOPE_OPEN /;"	d	file:
TOK_SELF	$FLECS/$FLECS/flecs.c	/^#define TOK_SELF /;"	d	file:
TOK_UP	$FLECS/$FLECS/flecs.c	/^#define TOK_UP /;"	d	file:
TOK_USING	$FLECS/$FLECS/flecs.c	/^#define TOK_USING /;"	d	file:
TOK_VARIABLE	$FLECS/$FLECS/flecs.c	/^#define TOK_VARIABLE /;"	d	file:
TOK_WITH	$FLECS/$FLECS/flecs.c	/^#define TOK_WITH /;"	d	file:
Tag	$FLECS/$FLECS/flecs.h	/^static const flecs::entity_t Tag = EcsTag;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
Target	$FLECS/$FLECS/flecs.h	/^using Target = EcsTarget;$/;"	t	namespace:flecs	typeref:typename:EcsTarget
Tebi	$FLECS/$FLECS/flecs.h	/^struct Tebi { };$/;"	s	struct:flecs::units
Temperature	$FLECS/$FLECS/flecs.h	/^struct Temperature { };$/;"	s	struct:flecs::units
Tera	$FLECS/$FLECS/flecs.h	/^struct Tera { };$/;"	s	struct:flecs::units
Terms	$FLECS/$FLECS/flecs.h	/^    using Terms = typename term_ptrs<Components ...>::array;$/;"	t	struct:flecs::_::iter_delegate	typeref:typename:term_ptrs<Components...>::array
This	$FLECS/$FLECS/flecs.h	/^static const flecs::entity_t This = EcsThis;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
TickSource	$FLECS/$FLECS/flecs.h	/^using TickSource = EcsTickSource;$/;"	t	namespace:flecs	typeref:typename:EcsTickSource
Time	$FLECS/$FLECS/flecs.h	/^struct Time { };$/;"	s	struct:flecs::units
Timer	$FLECS/$FLECS/flecs.h	/^using Timer = EcsTimer;$/;"	t	namespace:flecs	typeref:typename:EcsTimer
Toggle	$FLECS/$FLECS/flecs.h	/^static const flecs::entity_t Toggle = ECS_TOGGLE;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
Transitive	$FLECS/$FLECS/flecs.h	/^static const flecs::entity_t Transitive = EcsTransitive;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
Traversable	$FLECS/$FLECS/flecs.h	/^static const flecs::entity_t Traversable = EcsTraversable;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
TraverseFlags	$FLECS/$FLECS/flecs.h	/^static const uint32_t TraverseFlags = EcsTraverseFlags;$/;"	v	namespace:flecs	typeref:typename:const uint32_t
TypeKindLast	$FLECS/$FLECS/flecs.h	/^static const type_kind_t TypeKindLast = EcsTypeKindLast;$/;"	v	namespace:flecs::meta	typeref:typename:const type_kind_t
U16	$FLECS/$FLECS/flecs.h	/^static const primitive_kind_t U16 = EcsU16;$/;"	v	namespace:flecs::meta	typeref:typename:const primitive_kind_t
U32	$FLECS/$FLECS/flecs.h	/^static const primitive_kind_t U32 = EcsU32;$/;"	v	namespace:flecs::meta	typeref:typename:const primitive_kind_t
U64	$FLECS/$FLECS/flecs.h	/^static const primitive_kind_t U64 = EcsU64;$/;"	v	namespace:flecs::meta	typeref:typename:const primitive_kind_t
U8	$FLECS/$FLECS/flecs.h	/^static const primitive_kind_t U8 = EcsU8;$/;"	v	namespace:flecs::meta	typeref:typename:const primitive_kind_t
UPtr	$FLECS/$FLECS/flecs.h	/^static const primitive_kind_t UPtr = EcsUPtr;$/;"	v	namespace:flecs::meta	typeref:typename:const primitive_kind_t
URL_ROOT	$FLECS/$FLECS/flecs.c	/^#define URL_ROOT /;"	d	file:
UnSet	$FLECS/$FLECS/flecs.h	/^static const flecs::entity_t UnSet = EcsUnSet;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
Union	$FLECS/$FLECS/flecs.h	/^static const flecs::entity_t Union = EcsUnion;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
Unit	$FLECS/$FLECS/flecs.h	/^using Unit = EcsUnit;$/;"	t	namespace:flecs	typeref:typename:EcsUnit
Up	$FLECS/$FLECS/flecs.h	/^static const uint32_t Up = EcsUp;$/;"	v	namespace:flecs	typeref:typename:const uint32_t
UpdateCountIds	$FLECS/$FLECS/flecs.c	/^static void UpdateCountIds(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:	signature:(ecs_iter_t * it)
UpdateCountTargets	$FLECS/$FLECS/flecs.c	/^static void UpdateCountTargets(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:	signature:(ecs_iter_t * it)
UpdateCounterIdInstance	$FLECS/$FLECS/flecs.c	/^static void UpdateCounterIdInstance(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:	signature:(ecs_iter_t * it)
UpdateCounterIncrementMemberInstance	$FLECS/$FLECS/flecs.c	/^static void UpdateCounterIncrementMemberInstance(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:	signature:(ecs_iter_t * it)
UpdateCounterMemberInstance	$FLECS/$FLECS/flecs.c	/^static void UpdateCounterMemberInstance(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:	signature:(ecs_iter_t * it)
UpdateCounterOneOfInstance	$FLECS/$FLECS/flecs.c	/^static void UpdateCounterOneOfInstance(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:	signature:(ecs_iter_t * it)
UpdateGaugeIdInstance	$FLECS/$FLECS/flecs.c	/^static void UpdateGaugeIdInstance(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:	signature:(ecs_iter_t * it)
UpdateGaugeMemberInstance	$FLECS/$FLECS/flecs.c	/^static void UpdateGaugeMemberInstance(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:	signature:(ecs_iter_t * it)
UpdateGaugeOneOfInstance	$FLECS/$FLECS/flecs.c	/^static void UpdateGaugeOneOfInstance(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:	signature:(ecs_iter_t * it)
UpdateIdInstance	$FLECS/$FLECS/flecs.c	/^static void UpdateIdInstance(ecs_iter_t *it, bool counter) {$/;"	f	typeref:typename:void	file:	signature:(ecs_iter_t * it,bool counter)
UpdateMemberInstance	$FLECS/$FLECS/flecs.c	/^static void UpdateMemberInstance(ecs_iter_t *it, bool counter) {$/;"	f	typeref:typename:void	file:	signature:(ecs_iter_t * it,bool counter)
UpdateOneOfInstance	$FLECS/$FLECS/flecs.c	/^static void UpdateOneOfInstance(ecs_iter_t *it, bool counter) {$/;"	f	typeref:typename:void	file:	signature:(ecs_iter_t * it,bool counter)
UpdateWorldSummary	$FLECS/$FLECS/flecs.c	/^void UpdateWorldSummary(ecs_iter_t *it) {$/;"	f	file:	signature:(ecs_iter_t * it)
Uptr	$FLECS/$FLECS/flecs.h	/^static const flecs::entity_t Uptr = ecs_id(ecs_uptr_t);$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
Uri	$FLECS/$FLECS/flecs.h	/^struct Uri { };$/;"	s	struct:flecs::units
Value	$FLECS/$FLECS/flecs.h	/^    using Value = EcsMetricValue;$/;"	t	struct:flecs::metrics	typeref:typename:EcsMetricValue
Vector	$FLECS/$FLECS/flecs.h	/^using Vector = EcsVector;$/;"	t	namespace:flecs	typeref:typename:EcsVector
VectorType	$FLECS/$FLECS/flecs.h	/^static const type_kind_t VectorType = EcsVectorType;$/;"	v	namespace:flecs::meta	typeref:typename:const type_kind_t
WIN32_LEAN_AND_MEAN	$FLECS/$FLECS/flecs.c	/^#define WIN32_LEAN_AND_MEAN$/;"	d	file:
WYHASH_32BIT_MUM	$FLECS/$FLECS/flecs.c	/^#define WYHASH_32BIT_MUM /;"	d	file:
WYHASH_CONDOM	$FLECS/$FLECS/flecs.c	/^#define WYHASH_CONDOM /;"	d	file:
WYHASH_LITTLE_ENDIAN	$FLECS/$FLECS/flecs.c	/^    #define WYHASH_LITTLE_ENDIAN /;"	d	file:
Warning	$FLECS/$FLECS/flecs.h	/^    struct Warning { };$/;"	s	struct:flecs::alerts
Wildcard	$FLECS/$FLECS/flecs.h	/^static const flecs::entity_t Wildcard = EcsWildcard;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
With	$FLECS/$FLECS/flecs.h	/^static const flecs::entity_t With = EcsWith;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
World	$FLECS/$FLECS/flecs.h	/^static const flecs::entity_t World = EcsWorld;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
WorldStats	$FLECS/$FLECS/flecs.h	/^using WorldStats = EcsWorldStats;$/;"	t	namespace:flecs	typeref:typename:EcsWorldStats
WriteStateNone	$FLECS/$FLECS/flecs.c	/^    WriteStateNone = 0,$/;"	e	enum:ecs_write_kind_t	file:
WriteStateToStage	$FLECS/$FLECS/flecs.c	/^    WriteStateToStage,$/;"	e	enum:ecs_write_kind_t	file:
Yobi	$FLECS/$FLECS/flecs.h	/^struct Yobi { };$/;"	s	struct:flecs::units
Yocto	$FLECS/$FLECS/flecs.h	/^struct Yocto { };$/;"	s	struct:flecs::units
Yotta	$FLECS/$FLECS/flecs.h	/^struct Yotta { };$/;"	s	struct:flecs::units
Zebi	$FLECS/$FLECS/flecs.h	/^struct Zebi { };$/;"	s	struct:flecs::units
Zepto	$FLECS/$FLECS/flecs.h	/^struct Zepto { };$/;"	s	struct:flecs::units
Zetta	$FLECS/$FLECS/flecs.h	/^struct Zetta { };$/;"	s	struct:flecs::units
_	$FLECS/$FLECS/flecs.c	/^    ecs_table__t *_;                 \/* Infrequently accessed table metadata *\/$/;"	m	struct:ecs_table_t	typeref:typename:ecs_table__t *	file:
_	$FLECS/$FLECS/flecs.h	/^namespace _$/;"	n	namespace:flecs
_1	$FLECS/$FLECS/flecs.c	/^        ecs_cmd_1_t _1;              \/* Data for single entity operation *\/$/;"	m	union:ecs_cmd_t::__anonb2bcda23010a	typeref:typename:ecs_cmd_1_t	file:
_POSIX_C_SOURCE	$FLECS/$FLECS/flecs.c	/^#define _POSIX_C_SOURCE /;"	d	file:
__anonb2bcda23010a	$FLECS/$FLECS/flecs.c	/^    union {$/;"	u	struct:ecs_cmd_t	file:
__anonb2bcda230208	$FLECS/$FLECS/flecs.c	/^typedef struct {$/;"	s	file:
__anonb2bcda230308	$FLECS/$FLECS/flecs.c	/^typedef struct {$/;"	s	file:
__anonb2bcda23040a	$FLECS/$FLECS/flecs.c	/^    union {$/;"	u	function:flecs_ito_	file:
__anonb2bcda230508	$FLECS/$FLECS/flecs.c	/^typedef struct {$/;"	s	file:
__anonb2bcda230603	$FLECS/$FLECS/flecs.c	/^typedef enum  {$/;"	g	file:
__anonb2bcda230708	$FLECS/$FLECS/flecs.c	/^typedef struct {$/;"	s	file:
__anonb2bcda230808	$FLECS/$FLECS/flecs.c	/^typedef struct {$/;"	s	file:
__anonb2bcda230908	$FLECS/$FLECS/flecs.c	/^typedef struct {$/;"	s	file:
__anonb2bcda230a08	$FLECS/$FLECS/flecs.c	/^typedef struct {$/;"	s	file:
__anonb2bcda230b08	$FLECS/$FLECS/flecs.c	/^typedef struct {$/;"	s	file:
__anonb2bcda230c08	$FLECS/$FLECS/flecs.c	/^typedef struct {$/;"	s	file:
__anonb2bcda230d08	$FLECS/$FLECS/flecs.c	/^typedef struct {$/;"	s	file:
__anonb2bcda230e08	$FLECS/$FLECS/flecs.c	/^typedef struct {$/;"	s	file:
__anonb2bcda230f08	$FLECS/$FLECS/flecs.c	/^typedef struct {$/;"	s	file:
__anonb2bcda231008	$FLECS/$FLECS/flecs.c	/^typedef struct {$/;"	s	file:
__anonb2bcda231108	$FLECS/$FLECS/flecs.c	/^typedef struct {$/;"	s	file:
__anonb2bcda231208	$FLECS/$FLECS/flecs.c	/^typedef struct {$/;"	s	file:
__anonb2bcda231308	$FLECS/$FLECS/flecs.c	/^typedef struct {$/;"	s	file:
__anonb2bcda231408	$FLECS/$FLECS/flecs.c	/^typedef struct {$/;"	s	file:
__anonb2bcda231508	$FLECS/$FLECS/flecs.c	/^typedef struct {$/;"	s	file:
__anonb2bcda231608	$FLECS/$FLECS/flecs.c	/^typedef struct {$/;"	s	file:
__anonb2bcda231708	$FLECS/$FLECS/flecs.c	/^typedef struct {$/;"	s	file:
__anonb2bcda231808	$FLECS/$FLECS/flecs.c	/^typedef struct {$/;"	s	file:
__anonb2bcda231908	$FLECS/$FLECS/flecs.c	/^typedef struct {$/;"	s	file:
__anonb2bcda231a08	$FLECS/$FLECS/flecs.c	/^typedef struct {$/;"	s	file:
__anonb2bcda231b08	$FLECS/$FLECS/flecs.c	/^static struct {$/;"	s	file:
__anonb2bcda231c08	$FLECS/$FLECS/flecs.c	/^static struct {$/;"	s	file:
__anonb2bcda231d08	$FLECS/$FLECS/flecs.c	/^static struct {$/;"	s	file:
__anonb2bcda231e0a	$FLECS/$FLECS/flecs.c	/^    union {$/;"	u	function:win_enable_high_timer_resolution	file:
__anonb2bcda231f03	$FLECS/$FLECS/flecs.c	/^typedef enum {$/;"	g	file:
__anonb2bcda232003	$FLECS/$FLECS/flecs.c	/^typedef enum {$/;"	g	file:
__anonb2bcda23210a	$FLECS/$FLECS/flecs.c	/^typedef union {$/;"	u	file:
__anonb2bcda232208	$FLECS/$FLECS/flecs.c	/^typedef struct {$/;"	s	file:
__anonb2bcda232308	$FLECS/$FLECS/flecs.c	/^typedef struct {$/;"	s	file:
__anonb2bcda232408	$FLECS/$FLECS/flecs.c	/^typedef struct {$/;"	s	file:
__anonb2bcda232508	$FLECS/$FLECS/flecs.c	/^typedef struct {$/;"	s	file:
__anonb2bcda232608	$FLECS/$FLECS/flecs.c	/^typedef struct {$/;"	s	file:
__anonb2bcda232708	$FLECS/$FLECS/flecs.c	/^typedef struct {$/;"	s	file:
__anonb2bcda232808	$FLECS/$FLECS/flecs.c	/^typedef struct {$/;"	s	file:
__anonb2bcda232908	$FLECS/$FLECS/flecs.c	/^typedef struct {$/;"	s	file:
__anonb2bcda232a08	$FLECS/$FLECS/flecs.c	/^typedef struct {$/;"	s	file:
__anonb2bcda232b08	$FLECS/$FLECS/flecs.c	/^typedef struct {$/;"	s	file:
__anonb2bcda232c08	$FLECS/$FLECS/flecs.c	/^typedef struct {$/;"	s	file:
__anonb2bcda232d08	$FLECS/$FLECS/flecs.c	/^typedef struct {$/;"	s	file:
__anonb2bcda232e08	$FLECS/$FLECS/flecs.c	/^typedef struct {$/;"	s	file:
__anonb2bcda232f08	$FLECS/$FLECS/flecs.c	/^typedef struct {$/;"	s	file:
__anonb2bcda233008	$FLECS/$FLECS/flecs.c	/^typedef struct {$/;"	s	file:
__anonb2bcda23310a	$FLECS/$FLECS/flecs.c	/^    union {$/;"	u	struct:ecs_rule_op_ctx_t	file:
__anonb2bcda233208	$FLECS/$FLECS/flecs.c	/^typedef struct {$/;"	s	file:
__anonb2bcda233308	$FLECS/$FLECS/flecs.c	/^typedef struct {$/;"	s	file:
__anonb2bcda233408	$FLECS/$FLECS/flecs.c	/^typedef struct {$/;"	s	file:
__anonb2bcda233508	$FLECS/$FLECS/flecs.c	/^typedef struct {$/;"	s	file:
__anonb2bcda280108	$FLECS/$FLECS/flecs.h	/^typedef struct {$/;"	s
__anonb2bcda28020a	$FLECS/$FLECS/flecs.h	/^    union {$/;"	u	struct:ecs_iter_private_t
__anonb2bcda280308	$FLECS/$FLECS/flecs.h	/^typedef struct {$/;"	s
__anonb2bcda280408	$FLECS/$FLECS/flecs.h	/^typedef struct {$/;"	s
__anonb2bcda280508	$FLECS/$FLECS/flecs.h	/^typedef struct {$/;"	s
__anonb2bcda280608	$FLECS/$FLECS/flecs.h	/^typedef struct {$/;"	s
__anonb2bcda280708	$FLECS/$FLECS/flecs.h	/^    struct {$/;"	s	struct:ecs_world_info_t
__anonb2bcda280808	$FLECS/$FLECS/flecs.h	/^typedef struct {$/;"	s
__anonb2bcda280908	$FLECS/$FLECS/flecs.h	/^typedef struct {$/;"	s
__anonb2bcda280a03	$FLECS/$FLECS/flecs.h	/^typedef enum {$/;"	g
__anonb2bcda280b08	$FLECS/$FLECS/flecs.h	/^typedef struct {$/;"	s
__anonb2bcda280c08	$FLECS/$FLECS/flecs.h	/^typedef struct {$/;"	s
__anonb2bcda280d08	$FLECS/$FLECS/flecs.h	/^typedef struct {$/;"	s
__anonb2bcda280e08	$FLECS/$FLECS/flecs.h	/^typedef struct {$/;"	s
__anonb2bcda280f08	$FLECS/$FLECS/flecs.h	/^    struct {$/;"	s	struct:ecs_world_stats_t
__anonb2bcda281008	$FLECS/$FLECS/flecs.h	/^    struct {$/;"	s	struct:ecs_world_stats_t
__anonb2bcda281108	$FLECS/$FLECS/flecs.h	/^    struct {$/;"	s	struct:ecs_world_stats_t
__anonb2bcda281208	$FLECS/$FLECS/flecs.h	/^    struct {$/;"	s	struct:ecs_world_stats_t
__anonb2bcda281308	$FLECS/$FLECS/flecs.h	/^    struct {$/;"	s	struct:ecs_world_stats_t
__anonb2bcda281408	$FLECS/$FLECS/flecs.h	/^    struct {$/;"	s	struct:ecs_world_stats_t
__anonb2bcda281508	$FLECS/$FLECS/flecs.h	/^    struct {$/;"	s	struct:ecs_world_stats_t
__anonb2bcda281608	$FLECS/$FLECS/flecs.h	/^    struct {$/;"	s	struct:ecs_world_stats_t
__anonb2bcda281708	$FLECS/$FLECS/flecs.h	/^    struct {$/;"	s	struct:ecs_world_stats_t
__anonb2bcda281808	$FLECS/$FLECS/flecs.h	/^typedef struct {$/;"	s
__anonb2bcda281908	$FLECS/$FLECS/flecs.h	/^typedef struct {$/;"	s
__anonb2bcda281a08	$FLECS/$FLECS/flecs.h	/^typedef struct {$/;"	s
__anonb2bcda281b08	$FLECS/$FLECS/flecs.h	/^typedef struct {$/;"	s
__anonb2bcda281c02	$FLECS/$FLECS/flecs.h	/^    return this->each(rel, flecs::Wildcard, [&](flecs::id id) {$/;"	f	function:flecs::entity_view::each	file:	signature:(flecs::id id) 
__anonb2bcda281d02	$FLECS/$FLECS/flecs.h	/^        .serialize([](const flecs::serializer *ser, const EntityType *data) {$/;"	f	function:flecs::meta::_::flecs_entity_support	file:	signature:(const flecs::serializer *ser, const EntityType *data) 
__anonb2bcda281e02	$FLECS/$FLECS/flecs.h	/^            [](EntityType *dst, flecs::world_t *world, flecs::entity_t e) {$/;"	f	function:flecs::meta::_::flecs_entity_support	file:	signature:(EntityType *dst, flecs::world_t *world, flecs::entity_t e) 
_canary	$FLECS/$FLECS/flecs.h	/^    int32_t _canary;$/;"	m	struct:ecs_system_desc_t	typeref:typename:int32_t
_n	$FLECS/$FLECS/flecs.c	/^        ecs_cmd_n_t _n;              \/* Data for multi entity operation *\/$/;"	m	union:ecs_cmd_t::__anonb2bcda23010a	typeref:typename:ecs_cmd_n_t	file:
_var_index	$FLECS/$FLECS/flecs.h	/^    int32_t _var_index;    \/* Index of variable in filter (do not set) *\/$/;"	m	struct:ecs_alert_severity_filter_t	typeref:typename:int32_t
abort_	$FLECS/$FLECS/flecs.h	/^    ecs_os_api_abort_t abort_;$/;"	m	struct:ecs_os_api_t	typeref:typename:ecs_os_api_abort_t
action	$FLECS/$FLECS/flecs.c	/^    ecs_iter_action_t action;       \/* See ecs_system_desc_t *\/$/;"	m	struct:ecs_system_t	typeref:typename:ecs_iter_action_t	file:
active	$FLECS/$FLECS/flecs.h	/^    bool active;                 \/**< Is the timer active or not *\/$/;"	m	struct:EcsTimer	typeref:typename:bool
active_system_count	$FLECS/$FLECS/flecs.h	/^    int32_t active_system_count; \/**< Number of active systems in pipeline *\/$/;"	m	struct:ecs_pipeline_stats_t	typeref:typename:int32_t
actual_type	$FLECS/$FLECS/flecs.h	/^struct actual_type<T, if_t< is_pair<T>::value >> {$/;"	s	namespace:flecs
actual_type_t	$FLECS/$FLECS/flecs.h	/^using actual_type_t = typename actual_type<T>::type;$/;"	t	namespace:flecs	typeref:typename:actual_type<T>::type
add	$FLECS/$FLECS/flecs.c	/^    ecs_graph_edges_t add;    $/;"	m	struct:ecs_graph_node_t	typeref:typename:ecs_graph_edges_t	file:
add	$FLECS/$FLECS/flecs.h	/^inline void world::add(flecs::entity_t second) const {$/;"	f	class:flecs::world	typeref:typename:void	signature:(flecs::entity_t second) const
add_count	$FLECS/$FLECS/flecs.h	/^        int64_t add_count;             \/**< add commands processed *\/$/;"	m	struct:ecs_world_info_t::__anonb2bcda280708	typeref:typename:int64_t
add_expr	$FLECS/$FLECS/flecs.h	/^    const char *add_expr;$/;"	m	struct:ecs_entity_desc_t	typeref:typename:const char *
add_flags	$FLECS/$FLECS/flecs.h	/^inline flecs::entity id::add_flags(flecs::id_t flags) const {$/;"	f	class:flecs::id	typeref:typename:flecs::entity	signature:(flecs::id_t flags) const
add_if	$FLECS/$FLECS/flecs.h	/^    Self& add_if(bool cond, flecs::id_t component) {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &	signature:(bool cond,flecs::id_t component)
add_second	$FLECS/$FLECS/flecs.h	/^    Self& add_second(flecs::entity_t first) {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &	signature:(flecs::entity_t first)
added	$FLECS/$FLECS/flecs.c	/^    ecs_vec_t added;$/;"	m	struct:ecs_table_diff_builder_t	typeref:typename:ecs_vec_t	file:
adec_	$FLECS/$FLECS/flecs.h	/^    ecs_os_api_ainc_t adec_;$/;"	m	struct:ecs_os_api_t	typeref:typename:ecs_os_api_ainc_t
ainc_	$FLECS/$FLECS/flecs.h	/^    ecs_os_api_ainc_t ainc_;$/;"	m	struct:ecs_os_api_t	typeref:typename:ecs_os_api_ainc_t
alert	$FLECS/$FLECS/flecs.h	/^struct alert final : entity$/;"	s	namespace:flecs
alert_builder	$FLECS/$FLECS/flecs.h	/^struct alert_builder final : _::alert_builder_base<Components...> {$/;"	s	namespace:flecs
alert_builder_base	$FLECS/$FLECS/flecs.h	/^    using alert_builder_base = builder<$/;"	t	namespace:flecs::_	typeref:typename:builder<alert,ecs_alert_desc_t,alert_builder<Components...>,alert_builder_i,Components...>
alert_builder_i	$FLECS/$FLECS/flecs.h	/^struct alert_builder_i : filter_builder_i<Base, Components ...> {$/;"	s	namespace:flecs
alert_count	$FLECS/$FLECS/flecs.h	/^int32_t alert_count(flecs::entity_t alert = 0) const {$/;"	f	struct:flecs::entity_view	typeref:typename:int32_t	signature:(flecs::entity_t alert=0) const
alerts	$FLECS/$FLECS/flecs.h	/^struct alerts {$/;"	s	namespace:flecs
aliases	$FLECS/$FLECS/flecs.c	/^    ecs_hashmap_t aliases;$/;"	m	struct:ecs_world_t	typeref:typename:ecs_hashmap_t	file:
alignment	$FLECS/$FLECS/flecs.h	/^    static size_t alignment() {$/;"	f	struct:flecs::_::cpp_type_impl	typeref:typename:size_t	signature:()
alive_count	$FLECS/$FLECS/flecs.c	/^    int32_t alive_count;$/;"	m	struct:ecs_entity_index_t	typeref:typename:int32_t	file:
alloc_count	$FLECS/$FLECS/flecs.h	/^    int32_t alloc_count;$/;"	m	struct:ecs_block_allocator_t	typeref:typename:int32_t
alloc_str	$FLECS/$FLECS/flecs.h	/^    char *alloc_str;$/;"	m	struct:ecs_strbuf_element_str	typeref:typename:char *
allocated	$FLECS/$FLECS/flecs.h	/^    ecs_flags8_t allocated;  \/* Which fields are allocated *\/$/;"	m	struct:ecs_iter_cache_t	typeref:typename:ecs_flags8_t
allocator	$FLECS/$FLECS/flecs.c	/^    ecs_allocator_t allocator;$/;"	m	struct:ecs_stage_t	typeref:typename:ecs_allocator_t	file:
allocator	$FLECS/$FLECS/flecs.h	/^    struct ecs_allocator_t *allocator;$/;"	m	struct:ecs_sparse_t	typeref:struct:ecs_allocator_t *
allocators	$FLECS/$FLECS/flecs.c	/^    ecs_world_allocators_t allocators; \/* Static allocation sizes *\/$/;"	m	struct:ecs_world_t	typeref:typename:ecs_world_allocators_t	file:
always_false	$FLECS/$FLECS/flecs.h	/^struct always_false {$/;"	s	namespace:flecs::_
amount	$FLECS/$FLECS/flecs.h	/^struct amount {$/;"	s	struct:flecs::units
and	$FLECS/$FLECS/flecs.c	/^    ecs_rule_and_ctx_t and;$/;"	m	struct:__anonb2bcda232a08	typeref:typename:ecs_rule_and_ctx_t	file:
and_	$FLECS/$FLECS/flecs.h	/^    Base& and_() {$/;"	f	struct:flecs::term_builder_i	typeref:typename:Base &	signature:()
and_from	$FLECS/$FLECS/flecs.h	/^    Base& and_from() {$/;"	f	struct:flecs::term_builder_i	typeref:typename:Base &	signature:()
angle	$FLECS/$FLECS/flecs.h	/^struct angle {$/;"	s	struct:flecs::units
annot	$FLECS/$FLECS/flecs.c	/^    char *annot[STACK_MAX_SIZE];$/;"	m	struct:__anonb2bcda231908	typeref:typename:char * []	file:
annot_count	$FLECS/$FLECS/flecs.c	/^    int32_t annot_count;$/;"	m	struct:__anonb2bcda231908	typeref:typename:int32_t	file:
anonymous	$FLECS/$FLECS/flecs.c	/^    bool anonymous;        \/* variable is anonymous *\/$/;"	m	struct:ecs_rule_var_t	typeref:typename:bool	file:
any	$FLECS/$FLECS/flecs.h	/^    struct ecs_event_id_record_t *any;$/;"	m	struct:ecs_event_record_t	typeref:struct:ecs_event_id_record_t *
app	$FLECS/$FLECS/flecs.h	/^flecs::app_builder app() {$/;"	f	struct:flecs::world	typeref:typename:flecs::app_builder	signature:()
app_builder	$FLECS/$FLECS/flecs.h	/^struct app_builder {$/;"	s	namespace:flecs
arg	$FLECS/$FLECS/flecs.c	/^    void *arg;$/;"	m	struct:ecs_win_thread_t	typeref:typename:void *	file:
arg	$FLECS/$FLECS/flecs.h	/^    Base& arg(int32_t term_index) {$/;"	f	struct:flecs::filter_builder_i	typeref:typename:Base &	signature:(int32_t term_index)
arg_list	$FLECS/$FLECS/flecs.h	/^struct arg_list { };$/;"	s	namespace:flecs::_
arg_list_t	$FLECS/$FLECS/flecs.h	/^using arg_list_t = typename _::function_traits<T>::args;$/;"	t	namespace:flecs	typeref:typename:_::function_traits<T>::args
args	$FLECS/$FLECS/flecs.h	/^    using args = arg_list<Args ...>;$/;"	t	struct:flecs::_::function_traits_defs	typeref:typename:arg_list<Args...>
arity	$FLECS/$FLECS/flecs.h	/^struct arity {$/;"	s	namespace:flecs
array	$FLECS/$FLECS/flecs.c	/^    const char *array;$/;"	m	struct:ecs_http_request_key_t	typeref:typename:const char *	file:
array	$FLECS/$FLECS/flecs.h	/^untyped_component& array(int32_t elem_count) {$/;"	f	struct:flecs::untyped_component	typeref:typename:untyped_component &	signature:(int32_t elem_count)
array_iterator	$FLECS/$FLECS/flecs.h	/^struct array_iterator$/;"	s	namespace:flecs
array_to_json_buf_w_type_data	$FLECS/$FLECS/flecs.c	/^int array_to_json_buf_w_type_data($/;"	f	typeref:typename:int	file:	signature:(const ecs_world_t * world,const void * ptr,int32_t count,ecs_strbuf_t * buf,const EcsComponent * comp,const EcsMetaTypeSerialized * ser)
as_type	$FLECS/$FLECS/flecs.h	/^    opaque& as_type(flecs::id_t func) {$/;"	f	struct:flecs::opaque	typeref:typename:opaque &	signature:(flecs::id_t func)
assembly	$FLECS/$FLECS/flecs.c	/^    ecs_entity_t assembly;$/;"	m	struct:__anonb2bcda231908	typeref:typename:ecs_entity_t	file:
assembly_instance	$FLECS/$FLECS/flecs.c	/^    bool assembly_instance;$/;"	m	struct:__anonb2bcda231908	typeref:typename:bool	file:
assembly_start	$FLECS/$FLECS/flecs.c	/^    const char *assembly_start, *assembly_stop;$/;"	m	struct:__anonb2bcda231908	typeref:typename:const char *	file:
assembly_stmt	$FLECS/$FLECS/flecs.c	/^    bool assembly_stmt;$/;"	m	struct:__anonb2bcda231908	typeref:typename:bool	file:
assembly_stop	$FLECS/$FLECS/flecs.c	/^    const char *assembly_start, *assembly_stop;$/;"	m	struct:__anonb2bcda231908	typeref:typename:const char *	file:
assert_mixin	$FLECS/$FLECS/flecs.c	/^void* assert_mixin($/;"	f	typeref:typename:void *	file:	signature:(const ecs_poly_t * poly,ecs_mixin_kind_t kind)
assert_term	$FLECS/$FLECS/flecs.h	/^    void assert_term() {$/;"	f	struct:flecs::term_builder_i	typeref:typename:void	signature:()
assert_term_id	$FLECS/$FLECS/flecs.h	/^    void assert_term_id() {$/;"	f	struct:flecs::term_id_builder_i	typeref:typename:void	signature:()
assign_bool	$FLECS/$FLECS/flecs.h	/^    void (*assign_bool)($/;"	m	struct:EcsOpaque	typeref:typename:void (*)(void * dst,bool value)
assign_char	$FLECS/$FLECS/flecs.h	/^    void (*assign_char)($/;"	m	struct:EcsOpaque	typeref:typename:void (*)(void * dst,char value)
assign_entity	$FLECS/$FLECS/flecs.h	/^    void (*assign_entity)($/;"	m	struct:EcsOpaque	typeref:typename:void (*)(void * dst,ecs_world_t * world,ecs_entity_t entity)
assign_float	$FLECS/$FLECS/flecs.h	/^    void (*assign_float)($/;"	m	struct:EcsOpaque	typeref:typename:void (*)(void * dst,double value)
assign_id	$FLECS/$FLECS/flecs.h	/^    void (*assign_id)($/;"	m	struct:EcsOpaque	typeref:typename:void (*)(void * dst,ecs_world_t * world,ecs_id_t id)
assign_int	$FLECS/$FLECS/flecs.h	/^    void (*assign_int)($/;"	m	struct:EcsOpaque	typeref:typename:void (*)(void * dst,int64_t value)
assign_null	$FLECS/$FLECS/flecs.h	/^    void (*assign_null)($/;"	m	struct:EcsOpaque	typeref:typename:void (*)(void * dst)
assign_stmt	$FLECS/$FLECS/flecs.c	/^    bool assign_stmt;$/;"	m	struct:__anonb2bcda231908	typeref:typename:bool	file:
assign_string	$FLECS/$FLECS/flecs.h	/^    void (*assign_string)($/;"	m	struct:EcsOpaque	typeref:typename:void (*)(void * dst,const char * value)
assign_to	$FLECS/$FLECS/flecs.c	/^    ecs_entity_t assign_to;$/;"	m	struct:__anonb2bcda231908	typeref:typename:ecs_entity_t	file:
assign_uint	$FLECS/$FLECS/flecs.h	/^    void (*assign_uint)($/;"	m	struct:EcsOpaque	typeref:typename:void (*)(void * dst,uint64_t value)
async	$FLECS/$FLECS/flecs.c	/^    bool async;                      \/* Is stage asynchronous? (write only) *\/$/;"	m	struct:ecs_stage_t	typeref:typename:bool	file:
async_stage	$FLECS/$FLECS/flecs.h	/^    flecs::world async_stage() const {$/;"	f	struct:flecs::world	typeref:typename:flecs::world	signature:() const
atfini	$FLECS/$FLECS/flecs.h	/^    void atfini(ecs_fini_action_t action, void *ctx) const {$/;"	f	struct:flecs::world	typeref:typename:void	signature:(ecs_fini_action_t action,void * ctx) const
atomic_mutex	$FLECS/$FLECS/flecs.c	/^static pthread_mutex_t atomic_mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v	typeref:typename:pthread_mutex_t	file:
auto_merge	$FLECS/$FLECS/flecs.c	/^    bool auto_merge;                 \/* Should this stage automatically merge? *\/$/;"	m	struct:ecs_stage_t	typeref:typename:bool	file:
avg	$FLECS/$FLECS/flecs.h	/^    ecs_float_t avg[ECS_STAT_WINDOW];$/;"	m	struct:ecs_gauge_t	typeref:typename:ecs_float_t[]
base	$FLECS/$FLECS/flecs.c	/^    ecs_entity_t base;               \/* Currently instantiated top-level base *\/$/;"	m	struct:ecs_stage_t	typeref:typename:ecs_entity_t	file:
base	$FLECS/$FLECS/flecs.h	/^    ecs_entity_t base;$/;"	m	struct:ecs_unit_desc_t	typeref:typename:ecs_entity_t
base_arg_type	$FLECS/$FLECS/flecs.h	/^struct base_arg_type {$/;"	s	namespace:flecs
base_arg_type_t	$FLECS/$FLECS/flecs.h	/^using base_arg_type_t = typename base_arg_type<T>::type;$/;"	t	namespace:flecs	typeref:typename:base_arg_type<T>::type
base_id	$FLECS/$FLECS/flecs.c	/^    ecs_var_id_t base_id;  \/* id to base entity variable, for lookups *\/$/;"	m	struct:ecs_rule_var_t	typeref:typename:ecs_var_id_t	file:
base_type	$FLECS/$FLECS/flecs.h	/^struct base_type {$/;"	s	namespace:flecs
base_type_t	$FLECS/$FLECS/flecs.h	/^using base_type_t = typename base_type<T>::type;$/;"	t	namespace:flecs	typeref:typename:base_type<T>::type
batched_command_count	$FLECS/$FLECS/flecs.h	/^        int64_t batched_command_count; \/**< commands batched *\/$/;"	m	struct:ecs_world_info_t::__anonb2bcda280708	typeref:typename:int64_t
batched_count	$FLECS/$FLECS/flecs.h	/^        ecs_metric_t batched_count;$/;"	m	struct:ecs_world_stats_t::__anonb2bcda281308	typeref:typename:ecs_metric_t
batched_entity_count	$FLECS/$FLECS/flecs.h	/^        int64_t batched_entity_count;  \/**< entities for which commands were batched *\/$/;"	m	struct:ecs_world_info_t::__anonb2bcda280708	typeref:typename:int64_t
begin	$FLECS/$FLECS/flecs.h	/^    row_iterator begin() const {$/;"	f	struct:flecs::iter	typeref:typename:row_iterator	signature:() const
binding_ctx	$FLECS/$FLECS/flecs.c	/^    void *binding_ctx;              \/* Optional language binding context *\/$/;"	m	struct:ecs_system_t	typeref:typename:void *	file:
binding_ctx	$FLECS/$FLECS/flecs.h	/^    void *binding_ctx;$/;"	m	struct:ecs_system_desc_t	typeref:typename:void *
binding_ctx_free	$FLECS/$FLECS/flecs.c	/^    ecs_ctx_free_t binding_ctx_free;$/;"	m	struct:ecs_system_t	typeref:typename:ecs_ctx_free_t	file:
binding_ctx_free	$FLECS/$FLECS/flecs.h	/^    ecs_ctx_free_t binding_ctx_free;$/;"	m	struct:ecs_system_desc_t	typeref:typename:ecs_ctx_free_t
bit	$FLECS/$FLECS/flecs.h	/^untyped_component& bit(const char *name, uint32_t value) {$/;"	f	struct:flecs::untyped_component	typeref:typename:untyped_component &	signature:(const char * name,uint32_t value)
bitmask	$FLECS/$FLECS/flecs.h	/^struct bitmask {$/;"	s	namespace:flecs
bitmask_constant_t	$FLECS/$FLECS/flecs.h	/^using bitmask_constant_t = ecs_bitmask_constant_t;$/;"	t	namespace:flecs	typeref:typename:ecs_bitmask_constant_t
bitset_first	$FLECS/$FLECS/flecs.h	/^    int32_t bitset_first;$/;"	m	struct:ecs_query_iter_t	typeref:typename:int32_t
block_alloc_count	$FLECS/$FLECS/flecs.h	/^        ecs_metric_t block_alloc_count;    \/**< Block allocations per frame *\/$/;"	m	struct:ecs_world_stats_t::__anonb2bcda281608	typeref:typename:ecs_metric_t
block_free_count	$FLECS/$FLECS/flecs.h	/^        ecs_metric_t block_free_count;     \/**< Block frees per frame *\/$/;"	m	struct:ecs_world_stats_t::__anonb2bcda281608	typeref:typename:ecs_metric_t
block_head	$FLECS/$FLECS/flecs.h	/^    ecs_block_allocator_block_t *block_head;$/;"	m	struct:ecs_block_allocator_t	typeref:typename:ecs_block_allocator_block_t *
block_outstanding_alloc_count	$FLECS/$FLECS/flecs.h	/^        ecs_metric_t block_outstanding_alloc_count; \/**< Difference between allocs & frees *\/$/;"	m	struct:ecs_world_stats_t::__anonb2bcda281608	typeref:typename:ecs_metric_t
block_size	$FLECS/$FLECS/flecs.h	/^    int32_t block_size;$/;"	m	struct:ecs_block_allocator_t	typeref:typename:int32_t
block_tail	$FLECS/$FLECS/flecs.h	/^    ecs_block_allocator_block_t *block_tail;$/;"	m	struct:ecs_block_allocator_t	typeref:typename:ecs_block_allocator_block_t *
body	$FLECS/$FLECS/flecs.h	/^    ecs_strbuf_t body;          \/**< default = "" *\/$/;"	m	struct:__anonb2bcda280c08	typeref:typename:ecs_strbuf_t
body_offset	$FLECS/$FLECS/flecs.c	/^    int32_t body_offset;$/;"	m	struct:__anonb2bcda230708	typeref:typename:int32_t	file:
bool_t	$FLECS/$FLECS/flecs.h	/^using bool_t = ecs_bool_t;$/;"	t	namespace:flecs	typeref:typename:ecs_bool_t
brief	$FLECS/$FLECS/flecs.h	/^    metric_builder& brief(const char *b) {$/;"	f	struct:flecs::metric_builder	typeref:typename:metric_builder &	signature:(const char * b)
bs_column	$FLECS/$FLECS/flecs.c	/^    ecs_bitset_t *bs_column;$/;"	m	struct:flecs_bitset_term_t	typeref:typename:ecs_bitset_t *	file:
bs_columns	$FLECS/$FLECS/flecs.c	/^    ecs_bitset_t *bs_columns;        \/* Bitset columns *\/$/;"	m	struct:ecs_table__t	typeref:typename:ecs_bitset_t *	file:
bs_count	$FLECS/$FLECS/flecs.c	/^    int16_t bs_count;$/;"	m	struct:ecs_table__t	typeref:typename:int16_t	file:
bs_offset	$FLECS/$FLECS/flecs.c	/^    int32_t bs_offset;$/;"	m	struct:ecs_entity_filter_iter_t	typeref:typename:int32_t	file:
bs_terms	$FLECS/$FLECS/flecs.c	/^    ecs_vec_t bs_terms;              \/* Terms with bitset (toggle) entity filter *\/$/;"	m	struct:ecs_entity_filter_t	typeref:typename:ecs_vec_t	file:
bucket	$FLECS/$FLECS/flecs.h	/^    ecs_hm_bucket_t *bucket;$/;"	m	struct:__anonb2bcda280508	typeref:typename:ecs_hm_bucket_t *
bucket_allocator	$FLECS/$FLECS/flecs.h	/^    ecs_block_allocator_t bucket_allocator;$/;"	m	struct:__anonb2bcda280408	typeref:typename:ecs_block_allocator_t
bucket_count	$FLECS/$FLECS/flecs.h	/^    int32_t bucket_count;$/;"	m	struct:ecs_map_t	typeref:typename:int32_t
bucket_shift	$FLECS/$FLECS/flecs.h	/^    uint8_t bucket_shift;$/;"	m	struct:ecs_map_t	typeref:typename:uint8_t
buckets	$FLECS/$FLECS/flecs.h	/^    ecs_bucket_t *buckets;$/;"	m	struct:ecs_map_t	typeref:typename:ecs_bucket_t *
buf	$FLECS/$FLECS/flecs.c	/^    ecs_strbuf_t buf;$/;"	m	struct:__anonb2bcda230708	typeref:typename:ecs_strbuf_t	file:
buf	$FLECS/$FLECS/flecs.h	/^    char buf[ECS_STRBUF_ELEMENT_SIZE + 1];$/;"	m	struct:ecs_strbuf_element_embedded	typeref:typename:char[]
buffer_embedded	$FLECS/$FLECS/flecs.h	/^    bool buffer_embedded;$/;"	m	struct:ecs_strbuf_element	typeref:typename:bool
build	$FLECS/$FLECS/flecs.h	/^    T<Components ...> build() {$/;"	f	struct:flecs::_::builder	typeref:typename:T<Components...>	signature:()
builder	$FLECS/$FLECS/flecs.h	/^struct builder : IBuilder<Base, Components ...>$/;"	s	namespace:flecs::_
busy_count	$FLECS/$FLECS/flecs.h	/^        ecs_metric_t busy_count;$/;"	m	struct:ecs_world_stats_t::__anonb2bcda281708	typeref:typename:ecs_metric_t
c_ptr	$FLECS/$FLECS/flecs.h	/^    world_t* c_ptr() const {$/;"	f	struct:flecs::world	typeref:typename:world_t *	signature:() const
c_str	$FLECS/$FLECS/flecs.h	/^    const char* c_str() const {$/;"	f	struct:flecs::string	typeref:typename:const char *	signature:() const
cache	$FLECS/$FLECS/flecs.c	/^    struct ecs_table_cache_t *cache;$/;"	m	struct:ecs_table_cache_hdr_t	typeref:struct:ecs_table_cache_t *	file:
cache	$FLECS/$FLECS/flecs.h	/^    ecs_iter_cache_t cache;       \/* Inline arrays to reduce allocations *\/$/;"	m	struct:ecs_iter_private_t	typeref:typename:ecs_iter_cache_t
cache_elem	$FLECS/$FLECS/flecs.c	/^    int32_t cache_elem;$/;"	m	struct:__anonb2bcda232708	typeref:typename:int32_t	file:
callback	$FLECS/$FLECS/flecs.c	/^    ecs_os_thread_callback_t callback;$/;"	m	struct:ecs_win_thread_t	typeref:typename:ecs_os_thread_callback_t	file:
callback	$FLECS/$FLECS/flecs.h	/^    ecs_iter_action_t callback;$/;"	m	struct:ecs_system_desc_t	typeref:typename:ecs_iter_action_t
calloc_	$FLECS/$FLECS/flecs.h	/^    ecs_os_api_calloc_t calloc_;$/;"	m	struct:ecs_os_api_t	typeref:typename:ecs_os_api_calloc_t
canary_	$FLECS/$FLECS/flecs.h	/^    int8_t canary_;$/;"	m	struct:ecs_pipeline_stats_t	typeref:typename:int8_t
cascade	$FLECS/$FLECS/flecs.h	/^    Base& cascade(flecs::entity_t trav = 0) {$/;"	f	struct:flecs::term_id_builder_i	typeref:typename:Base &	signature:(flecs::entity_t trav=0)
cascade_by	$FLECS/$FLECS/flecs.c	/^    int32_t cascade_by;              \/* Identify cascade term *\/$/;"	m	struct:ecs_query_t	typeref:typename:int32_t	file:
case_T	$FLECS/$FLECS/flecs.c	/^#define case_T(/;"	d	file:	signature:(kind,T,dst,src)
case_T_checked	$FLECS/$FLECS/flecs.c	/^#define case_T_checked(/;"	d	file:	signature:(kind,T,dst,src,bounds)
cases_T_bool	$FLECS/$FLECS/flecs.c	/^#define cases_T_bool(/;"	d	file:	signature:(dst,src)
cases_T_float	$FLECS/$FLECS/flecs.c	/^#define cases_T_float(/;"	d	file:	signature:(dst,src)
cases_T_signed	$FLECS/$FLECS/flecs.c	/^#define cases_T_signed(/;"	d	file:	signature:(dst,src,bounds)
cases_T_unsigned	$FLECS/$FLECS/flecs.c	/^#define cases_T_unsigned(/;"	d	file:	signature:(dst,src,bounds)
chain_it	$FLECS/$FLECS/flecs.h	/^    ecs_iter_t *chain_it;         \/* Optional, allows for creating iterator chains *\/$/;"	m	struct:ecs_iter_t	typeref:typename:ecs_iter_t *
changed	$FLECS/$FLECS/flecs.h	/^    bool changed() {$/;"	f	struct:flecs::iter	typeref:typename:bool	signature:()
char_t	$FLECS/$FLECS/flecs.h	/^using char_t = ecs_char_t;$/;"	t	namespace:flecs	typeref:typename:ecs_char_t
child_of	$FLECS/$FLECS/flecs.h	/^    Self& child_of(entity_t second) {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &	signature:(entity_t second)
children	$FLECS/$FLECS/flecs.h	/^inline void world::children(Func&& f) const {$/;"	f	class:flecs::world	typeref:typename:void	signature:(Func && f) const
chunk_size	$FLECS/$FLECS/flecs.h	/^    int32_t chunk_size;$/;"	m	struct:ecs_block_allocator_t	typeref:typename:int32_t
chunks	$FLECS/$FLECS/flecs.h	/^    ecs_block_allocator_t chunks;$/;"	m	struct:ecs_allocator_t	typeref:typename:ecs_block_allocator_t
chunks_per_block	$FLECS/$FLECS/flecs.h	/^    int32_t chunks_per_block;$/;"	m	struct:ecs_block_allocator_t	typeref:typename:int32_t
clear	$FLECS/$FLECS/flecs.h	/^    void clear() {$/;"	f	struct:flecs::string	typeref:typename:void	signature:()
clear_count	$FLECS/$FLECS/flecs.h	/^        int64_t clear_count;           \/**< clear commands processed *\/$/;"	m	struct:ecs_world_info_t::__anonb2bcda280708	typeref:typename:int64_t
clone	$FLECS/$FLECS/flecs.h	/^inline flecs::entity entity_view::clone(bool copy_value, flecs::entity_t dst_id) const {$/;"	f	class:flecs::entity_view	typeref:typename:flecs::entity	signature:(bool copy_value,flecs::entity_t dst_id) const
clone_value	$FLECS/$FLECS/flecs.c	/^    bool clone_value;                \/* Clone entity with value (used for clone) *\/ $/;"	m	struct:ecs_cmd_1_t	typeref:typename:bool	file:
cmd	$FLECS/$FLECS/flecs.c	/^    ecs_commands_t *cmd;$/;"	m	struct:ecs_stage_t	typeref:typename:ecs_commands_t *	file:
cmd	$FLECS/$FLECS/flecs.h	/^    } cmd;$/;"	m	struct:ecs_world_info_t	typeref:struct:ecs_world_info_t::__anonb2bcda280708
cmd_entry_chunk	$FLECS/$FLECS/flecs.c	/^    ecs_block_allocator_t cmd_entry_chunk;$/;"	m	struct:ecs_stage_allocators_t	typeref:typename:ecs_block_allocator_t	file:
cmd_sp	$FLECS/$FLECS/flecs.c	/^    int32_t cmd_sp;$/;"	m	struct:ecs_stage_t	typeref:typename:int32_t	file:
cmd_stack	$FLECS/$FLECS/flecs.c	/^    ecs_commands_t cmd_stack[ECS_MAX_DEFER_STACK];$/;"	m	struct:ecs_stage_t	typeref:typename:ecs_commands_t[]	file:
code	$FLECS/$FLECS/flecs.c	/^    const char *code;$/;"	m	struct:__anonb2bcda231908	typeref:typename:const char *	file:
code	$FLECS/$FLECS/flecs.h	/^    int code;                   \/**< default = 200 *\/$/;"	m	struct:__anonb2bcda280c08	typeref:typename:int
column	$FLECS/$FLECS/flecs.c	/^    int32_t column;$/;"	m	struct:__anonb2bcda232808	typeref:typename:int32_t	file:
column	$FLECS/$FLECS/flecs.h	/^struct column {$/;"	s	namespace:flecs
column_count	$FLECS/$FLECS/flecs.c	/^    int16_t column_count;            \/* Number of components (excluding tags) *\/$/;"	m	struct:ecs_table_t	typeref:typename:int16_t	file:
column_index	$FLECS/$FLECS/flecs.c	/^    int32_t column_index;$/;"	m	struct:flecs_bitset_term_t	typeref:typename:int32_t	file:
column_index	$FLECS/$FLECS/flecs.h	/^    int32_t column_index(int32_t index) const {$/;"	f	struct:flecs::iter	typeref:typename:int32_t	signature:(int32_t index) const
column_map	$FLECS/$FLECS/flecs.c	/^    int32_t *column_map;             \/* Map type index <-> column$/;"	m	struct:ecs_table_t	typeref:typename:int32_t *	file:
column_size	$FLECS/$FLECS/flecs.h	/^    size_t column_size(int32_t index) {$/;"	f	struct:flecs::table	typeref:typename:size_t	signature:(int32_t index)
columns	$FLECS/$FLECS/flecs.c	/^    int32_t *columns;$/;"	m	struct:ecs_entity_filter_iter_t	typeref:typename:int32_t *	file:
columns	$FLECS/$FLECS/flecs.h	/^    int32_t *columns;             \/* Query term to table column mapping *\/$/;"	m	struct:ecs_iter_t	typeref:typename:int32_t *
commands	$FLECS/$FLECS/flecs.c	/^    ecs_vec_t commands;$/;"	m	struct:ecs_suspend_readonly_state_t	typeref:typename:ecs_vec_t	file:
commands	$FLECS/$FLECS/flecs.h	/^    } commands;$/;"	m	struct:ecs_world_stats_t	typeref:struct:ecs_world_stats_t::__anonb2bcda281308
commands_enqueued	$FLECS/$FLECS/flecs.c	/^    int64_t commands_enqueued;  \/* Number of commands enqueued for sync point *\/$/;"	m	struct:ecs_pipeline_op_t	typeref:typename:int64_t	file:
commands_enqueued	$FLECS/$FLECS/flecs.h	/^    ecs_metric_t commands_enqueued;$/;"	m	struct:ecs_sync_stats_t	typeref:typename:ecs_metric_t
comp	$FLECS/$FLECS/flecs.h	/^    const EcsComponent *comp; \/**< Pointer to component, in case size\/alignment is needed *\/$/;"	m	struct:ecs_meta_scope_t	typeref:typename:const EcsComponent *
compare	$FLECS/$FLECS/flecs.h	/^    ecs_compare_action_t compare;$/;"	m	struct:__anonb2bcda280408	typeref:typename:ecs_compare_action_t
component	$FLECS/$FLECS/flecs.c	/^    ecs_entity_t component;$/;"	m	struct:ecs_table_event_t	typeref:typename:ecs_entity_t	file:
component	$FLECS/$FLECS/flecs.h	/^struct component : untyped_component {$/;"	s	namespace:flecs
component_binding_ctx	$FLECS/$FLECS/flecs.h	/^struct component_binding_ctx {$/;"	s	namespace:flecs::_
component_count	$FLECS/$FLECS/flecs.h	/^        ecs_metric_t component_count;     \/**< Number of components ids (ids with data) *\/$/;"	m	struct:ecs_world_stats_t::__anonb2bcda281008	typeref:typename:ecs_metric_t
component_id_count	$FLECS/$FLECS/flecs.h	/^    int32_t component_id_count;       \/**< Number of component (data) ids in the world *\/$/;"	m	struct:ecs_world_info_t	typeref:typename:int32_t
components	$FLECS/$FLECS/flecs.h	/^    } components;$/;"	m	struct:ecs_world_stats_t	typeref:struct:ecs_world_stats_t::__anonb2bcda281008
cond_broadcast_	$FLECS/$FLECS/flecs.h	/^    ecs_os_api_cond_broadcast_t cond_broadcast_;$/;"	m	struct:ecs_os_api_t	typeref:typename:ecs_os_api_cond_broadcast_t
cond_free_	$FLECS/$FLECS/flecs.h	/^    ecs_os_api_cond_free_t cond_free_;$/;"	m	struct:ecs_os_api_t	typeref:typename:ecs_os_api_cond_free_t
cond_new_	$FLECS/$FLECS/flecs.h	/^    ecs_os_api_cond_new_t cond_new_;$/;"	m	struct:ecs_os_api_t	typeref:typename:ecs_os_api_cond_new_t
cond_signal_	$FLECS/$FLECS/flecs.h	/^    ecs_os_api_cond_signal_t cond_signal_;$/;"	m	struct:ecs_os_api_t	typeref:typename:ecs_os_api_cond_signal_t
cond_wait_	$FLECS/$FLECS/flecs.h	/^    ecs_os_api_cond_wait_t cond_wait_;$/;"	m	struct:ecs_os_api_t	typeref:typename:ecs_os_api_cond_wait_t
cond_written	$FLECS/$FLECS/flecs.c	/^    ecs_write_flags_t cond_written; \/* Track conditional writes (optional operators) *\/$/;"	m	struct:__anonb2bcda233308	typeref:typename:ecs_write_flags_t	file:
cond_written_or	$FLECS/$FLECS/flecs.c	/^    ecs_write_flags_t cond_written_or; \/* Cond written flags at start of or chain *\/$/;"	m	struct:__anonb2bcda233208	typeref:typename:ecs_write_flags_t	file:
conditional_t	$FLECS/$FLECS/flecs.h	/^using conditional_t = typename std::conditional<V, T, F>::type;$/;"	t	namespace:flecs	typeref:typename:std::conditional<V,T,F>::type
conn	$FLECS/$FLECS/flecs.c	/^    ecs_http_connection_impl_t *conn;$/;"	m	struct:__anonb2bcda230a08	typeref:typename:ecs_http_connection_impl_t *	file:
conn	$FLECS/$FLECS/flecs.h	/^    ecs_http_connection_t *conn;$/;"	m	struct:__anonb2bcda280b08	typeref:typename:ecs_http_connection_t *
conn_id	$FLECS/$FLECS/flecs.c	/^    uint64_t conn_id; \/* for sanity check *\/$/;"	m	struct:__anonb2bcda230908	typeref:typename:uint64_t	file:
connections	$FLECS/$FLECS/flecs.c	/^    ecs_sparse_t connections; \/* sparse<http_connection_t> *\/$/;"	m	struct:ecs_http_server_t	typeref:typename:ecs_sparse_t	file:
const_args	$FLECS/$FLECS/flecs.h	/^    static bool const_args() {$/;"	f	struct:flecs::_::entity_with_delegate_impl	typeref:typename:bool	signature:()
const_param	$FLECS/$FLECS/flecs.h	/^    const void *const_param;$/;"	m	struct:ecs_event_desc_t	typeref:typename:const void *
constant	$FLECS/$FLECS/flecs.h	/^untyped_component& constant(const char *name, int32_t value) {$/;"	f	struct:flecs::untyped_component	typeref:typename:untyped_component &	signature:(const char * name,int32_t value)
constants	$FLECS/$FLECS/flecs.h	/^    enum_constant_data constants[FLECS_ENUM_MAX_COUNT];$/;"	m	struct:flecs::_::enum_data_impl	typeref:typename:enum_constant_data[]
constrained_vars	$FLECS/$FLECS/flecs.h	/^    ecs_flags64_t constrained_vars; \/* Bitset that marks constrained variables *\/$/;"	m	struct:ecs_iter_t	typeref:typename:ecs_flags64_t
content	$FLECS/$FLECS/flecs.c	/^    char *content;$/;"	m	struct:ecs_http_send_request_t	typeref:typename:char *	file:
content	$FLECS/$FLECS/flecs.h	/^    char *content;$/;"	m	struct:ecs_strbuf_t	typeref:typename:char *
content_length	$FLECS/$FLECS/flecs.c	/^    int32_t content_length;$/;"	m	struct:ecs_http_send_request_t	typeref:typename:int32_t	file:
content_type	$FLECS/$FLECS/flecs.h	/^    const char* content_type;   \/**< default = application\/json *\/$/;"	m	struct:__anonb2bcda280c08	typeref:typename:const char *
copy	$FLECS/$FLECS/flecs.h	/^ecs_copy_t copy() {$/;"	f	namespace:flecs::_	typeref:typename:ecs_copy_t	signature:()
copy_ctor	$FLECS/$FLECS/flecs.h	/^ecs_copy_t copy_ctor() {$/;"	f	namespace:flecs::_	typeref:typename:ecs_copy_t	signature:()
copy_ctor_impl	$FLECS/$FLECS/flecs.h	/^void copy_ctor_impl(void *dst_ptr, const void *src_ptr, int32_t count, $/;"	f	namespace:flecs::_	typeref:typename:void	signature:(void * dst_ptr,const void * src_ptr,int32_t count,const ecs_type_info_t * info)
copy_impl	$FLECS/$FLECS/flecs.h	/^void copy_impl(void *dst_ptr, const void *src_ptr, int32_t count, $/;"	f	namespace:flecs::_	typeref:typename:void	signature:(void * dst_ptr,const void * src_ptr,int32_t count,const ecs_type_info_t * info)
count	$FLECS/$FLECS/flecs.c	/^    int64_t count;$/;"	m	struct:meta_params_t	typeref:typename:int64_t	file:
count	$FLECS/$FLECS/flecs.h	/^    size_t count() const {$/;"	f	struct:flecs::iter	typeref:typename:size_t	signature:() const
counter	$FLECS/$FLECS/flecs.h	/^    ecs_counter_t counter;$/;"	m	union:ecs_metric_t	typeref:typename:ecs_counter_t
cpp_type	$FLECS/$FLECS/flecs.h	/^struct cpp_type<T, if_t< is_pair<T>::value >>$/;"	s	namespace:flecs::_
cpp_type_impl	$FLECS/$FLECS/flecs.h	/^struct cpp_type_impl {$/;"	s	namespace:flecs::_
create	$FLECS/$FLECS/flecs.h	/^        static void create($/;"	f	struct:flecs::_::entity_observer_factory	typeref:typename:void	signature:(flecs::world_t * world,flecs::entity_t entity,Func && f)
create_count	$FLECS/$FLECS/flecs.h	/^        ecs_metric_t create_count;        \/**< Number of times id has been created *\/$/;"	m	struct:ecs_world_stats_t::__anonb2bcda281008	typeref:typename:ecs_metric_t
ctor	$FLECS/$FLECS/flecs.h	/^ecs_xtor_t ctor() {$/;"	f	namespace:flecs::_	typeref:typename:ecs_xtor_t	signature:()
ctor_impl	$FLECS/$FLECS/flecs.h	/^void ctor_impl(void *ptr, int32_t count, const ecs_type_info_t *info) {$/;"	f	namespace:flecs::_	typeref:typename:void	signature:(void * ptr,int32_t count,const ecs_type_info_t * info)
ctor_move_dtor	$FLECS/$FLECS/flecs.h	/^ecs_move_t ctor_move_dtor() {$/;"	f	namespace:flecs::_	typeref:typename:ecs_move_t	signature:()
ctor_move_dtor_impl	$FLECS/$FLECS/flecs.h	/^void ctor_move_dtor_impl(void *dst_ptr, void *src_ptr, int32_t count, $/;"	f	namespace:flecs::_	typeref:typename:void	signature:(void * dst_ptr,void * src_ptr,int32_t count,const ecs_type_info_t * info)
ctrl	$FLECS/$FLECS/flecs.c	/^        ecs_rule_ctrl_ctx_t ctrl;$/;"	m	union:ecs_rule_op_ctx_t::__anonb2bcda23310a	typeref:typename:ecs_rule_ctrl_ctx_t	file:
ctrlflow	$FLECS/$FLECS/flecs.c	/^    ecs_rule_compile_ctrlflow_t ctrlflow[FLECS_QUERY_SCOPE_NESTING_MAX];$/;"	m	struct:__anonb2bcda233308	typeref:typename:ecs_rule_compile_ctrlflow_t[]	file:
ctx	$FLECS/$FLECS/flecs.c	/^    void *ctx;$/;"	m	struct:ecs_http_server_t	typeref:typename:void *	file:
ctx	$FLECS/$FLECS/flecs.h	/^    void* ctx() {$/;"	f	struct:flecs::iter	typeref:typename:void *	signature:()
ctx_free	$FLECS/$FLECS/flecs.c	/^    ecs_ctx_free_t ctx_free;$/;"	m	struct:ecs_system_t	typeref:typename:ecs_ctx_free_t	file:
ctx_free	$FLECS/$FLECS/flecs.h	/^    ecs_ctx_free_t ctx_free;$/;"	m	struct:ecs_system_desc_t	typeref:typename:ecs_ctx_free_t
cur	$FLECS/$FLECS/flecs.c	/^    ecs_rule_compile_ctrlflow_t *cur; \/* Current scope *\/$/;"	m	struct:__anonb2bcda233308	typeref:typename:ecs_rule_compile_ctrlflow_t *	file:
cur	$FLECS/$FLECS/flecs.h	/^    struct ecs_table_cache_hdr_t *cur, *next;$/;"	m	struct:ecs_table_cache_iter_t	typeref:struct:ecs_table_cache_hdr_t *
cur_i	$FLECS/$FLECS/flecs.c	/^    int32_t cur_i;              \/* Index in current result *\/$/;"	m	struct:ecs_pipeline_state_t	typeref:typename:int32_t	file:
cur_match	$FLECS/$FLECS/flecs.h	/^    int32_t cur_match;$/;"	m	struct:ecs_term_iter_t	typeref:typename:int32_t
cur_op	$FLECS/$FLECS/flecs.c	/^    ecs_pipeline_op_t *cur_op;  \/* Current pipeline op *\/$/;"	m	struct:ecs_pipeline_state_t	typeref:typename:ecs_pipeline_op_t *	file:
current	$FLECS/$FLECS/flecs.c	/^    int32_t current;$/;"	m	struct:ecs_reachable_cache_t	typeref:typename:int32_t	file:
current	$FLECS/$FLECS/flecs.h	/^    ecs_strbuf_element *current;$/;"	m	struct:ecs_strbuf_t	typeref:typename:ecs_strbuf_element *
cursor	$FLECS/$FLECS/flecs.c	/^    ecs_stack_cursor_t *cursor;$/;"	m	struct:ecs_value_stack_t	typeref:typename:ecs_stack_cursor_t *	file:
cursor	$FLECS/$FLECS/flecs.h	/^struct cursor {$/;"	s	namespace:flecs
cursor_count	$FLECS/$FLECS/flecs.c	/^    int32_t cursor_count;$/;"	m	struct:ecs_stack_t	typeref:typename:int32_t	file:
data	$FLECS/$FLECS/flecs.c	/^    void *data;$/;"	m	struct:ecs_stack_page_t	typeref:typename:void *	file:
data	$FLECS/$FLECS/flecs.h	/^struct data {$/;"	s	struct:flecs::units
data_fields	$FLECS/$FLECS/flecs.h	/^    ecs_flags64_t data_fields; \/**< Bitset with fields that have data *\/$/;"	m	struct:ecs_filter_t	typeref:typename:ecs_flags64_t
data_size	$FLECS/$FLECS/flecs.h	/^    int32_t data_size;$/;"	m	struct:ecs_block_allocator_t	typeref:typename:int32_t
datarate	$FLECS/$FLECS/flecs.h	/^struct datarate {$/;"	s	struct:flecs::units
dbg	$FLECS/$FLECS/flecs.h	/^inline void dbg(const char *fmt, ...) {$/;"	f	namespace:flecs::log	typeref:typename:void	signature:(const char * fmt,...)
decay_t	$FLECS/$FLECS/flecs.h	/^using decay_t = typename std::decay<T>::type;$/;"	t	namespace:flecs	typeref:typename:std::decay<T>::type
decl_stmt	$FLECS/$FLECS/flecs.c	/^    bool decl_stmt;$/;"	m	struct:__anonb2bcda231908	typeref:typename:bool	file:
decl_type	$FLECS/$FLECS/flecs.c	/^    bool decl_type;$/;"	m	struct:__anonb2bcda231908	typeref:typename:bool	file:
default_scope_type	$FLECS/$FLECS/flecs.c	/^    ecs_entity_t default_scope_type[STACK_MAX_SIZE];$/;"	m	struct:__anonb2bcda231908	typeref:typename:ecs_entity_t[]	file:
defer	$FLECS/$FLECS/flecs.c	/^    int32_t defer;$/;"	m	struct:ecs_stage_t	typeref:typename:int32_t	file:
defer	$FLECS/$FLECS/flecs.h	/^    void defer(const Func& func) const {$/;"	f	struct:flecs::world	typeref:typename:void	signature:(const Func & func) const
defer_begin	$FLECS/$FLECS/flecs.h	/^    bool defer_begin() const {$/;"	f	struct:flecs::world	typeref:typename:bool	signature:() const
defer_count	$FLECS/$FLECS/flecs.c	/^    int32_t defer_count;$/;"	m	struct:ecs_suspend_readonly_state_t	typeref:typename:int32_t	file:
defer_end	$FLECS/$FLECS/flecs.h	/^    bool defer_end() const {$/;"	f	struct:flecs::world	typeref:typename:bool	signature:() const
defer_resume	$FLECS/$FLECS/flecs.h	/^    void defer_resume() const {$/;"	f	struct:flecs::world	typeref:typename:void	signature:() const
defer_stack	$FLECS/$FLECS/flecs.c	/^    ecs_stack_t defer_stack;$/;"	m	struct:ecs_suspend_readonly_state_t	typeref:typename:ecs_stack_t	file:
defer_suspend	$FLECS/$FLECS/flecs.h	/^    void defer_suspend() const {$/;"	f	struct:flecs::world	typeref:typename:void	signature:() const
delegate	$FLECS/$FLECS/flecs.h	/^using delegate = _::each_delegate<typename std::decay<Func>::type, Args...>;$/;"	t	namespace:flecs	typeref:typename:_::each_delegate<typename std::decay<Func>::type,Args...>
delete_count	$FLECS/$FLECS/flecs.h	/^        int64_t delete_count;          \/**< delete commands processed *\/$/;"	m	struct:ecs_world_info_t::__anonb2bcda280708	typeref:typename:int64_t
delete_id	$FLECS/$FLECS/flecs.c	/^    bool delete_id;$/;"	m	struct:ecs_marked_id_t	typeref:typename:bool	file:
delete_with	$FLECS/$FLECS/flecs.h	/^    void delete_with(id_t the_id) const {$/;"	f	struct:flecs::world	typeref:typename:void	signature:(id_t the_id) const
delta_system_time	$FLECS/$FLECS/flecs.h	/^    ecs_ftime_t delta_system_time;\/* Time elapsed since last system invocation *\/$/;"	m	struct:ecs_iter_t	typeref:typename:ecs_ftime_t
delta_time	$FLECS/$FLECS/flecs.h	/^    ecs_ftime_t delta_time;   \/**< Frame time increment (0 for measured values) *\/$/;"	m	struct:ecs_app_desc_t	typeref:typename:ecs_ftime_t
delta_time_raw	$FLECS/$FLECS/flecs.h	/^    ecs_ftime_t delta_time_raw;       \/**< Raw delta time (no time scaling) *\/$/;"	m	struct:ecs_world_info_t	typeref:typename:ecs_ftime_t
dense	$FLECS/$FLECS/flecs.c	/^    ecs_vec_t dense;$/;"	m	struct:ecs_entity_index_t	typeref:typename:ecs_vec_t	file:
dense	$FLECS/$FLECS/flecs.h	/^    int32_t dense;        \/* Index in dense array *\/    $/;"	m	struct:ecs_record_t	typeref:typename:int32_t
depends_on	$FLECS/$FLECS/flecs.h	/^    Self& depends_on(entity_t second) {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &	signature:(entity_t second)
depth	$FLECS/$FLECS/flecs.h	/^    int32_t depth;$/;"	m	struct:ecs_meta_cursor_t	typeref:typename:int32_t
depth_ids	$FLECS/$FLECS/flecs.c	/^    ecs_vec_t depth_ids;$/;"	m	struct:ecs_store_t	typeref:typename:ecs_vec_t	file:
dequeue_count	$FLECS/$FLECS/flecs.c	/^    int32_t dequeue_count; \/* number of dequeues in last stats interval *\/ $/;"	m	struct:ecs_http_server_t	typeref:typename:int32_t	file:
dequeue_retries	$FLECS/$FLECS/flecs.c	/^    int32_t dequeue_retries;    $/;"	m	struct:__anonb2bcda230808	typeref:typename:int32_t	file:
dequeue_timeout	$FLECS/$FLECS/flecs.c	/^    double dequeue_timeout;$/;"	m	struct:__anonb2bcda230808	typeref:typename:double	file:
desc	$FLECS/$FLECS/flecs.c	/^    const char *desc;$/;"	m	struct:meta_parse_ctx_t	typeref:typename:const char *	file:
desc	$FLECS/$FLECS/flecs.h	/^    ecs_opaque_desc_t desc = {};$/;"	m	struct:flecs::opaque	typeref:typename:ecs_opaque_desc_t
deser_stack	$FLECS/$FLECS/flecs.c	/^    ecs_stack_t deser_stack;$/;"	m	struct:ecs_stage_allocators_t	typeref:typename:ecs_stack_t	file:
destruct	$FLECS/$FLECS/flecs.h	/^    void destruct() {$/;"	f	struct:flecs::rule_base	typeref:typename:void	signature:()
destruct_obj	$FLECS/$FLECS/flecs.h	/^template<class Ty> inline void destruct_obj(Ty* _ptr) { _ptr->~Ty(); }$/;"	f	namespace:flecs::_	typeref:typename:void	signature:(Ty * _ptr)
diff	$FLECS/$FLECS/flecs.c	/^    ecs_table_diff_t *diff;          \/* Index into diff vector, if non trivial edge *\/$/;"	m	struct:ecs_graph_edge_t	typeref:typename:ecs_table_diff_t *	file:
diff_builder	$FLECS/$FLECS/flecs.c	/^    ecs_table_diff_builder_t diff_builder;$/;"	m	struct:ecs_world_allocators_t	typeref:typename:ecs_table_diff_builder_t	file:
dim	$FLECS/$FLECS/flecs.h	/^    void dim(int32_t entity_count) const {$/;"	f	struct:flecs::world	typeref:typename:void	signature:(int32_t entity_count) const
dir	$FLECS/$FLECS/flecs.c	/^    ecs_flags32_t dir;$/;"	m	struct:__anonb2bcda232608	typeref:typename:ecs_flags32_t	file:
dirty_state	$FLECS/$FLECS/flecs.c	/^    int32_t *dirty_state;            \/* Keep track of changes in columns *\/$/;"	m	struct:ecs_table_t	typeref:typename:int32_t *	file:
disable	$FLECS/$FLECS/flecs.h	/^    Self& disable(flecs::id_t second) {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &	signature:(flecs::id_t second)
discard_count	$FLECS/$FLECS/flecs.h	/^        int64_t discard_count;         \/**< commands discarded, happens when entity is no longe/;"	m	struct:ecs_world_info_t::__anonb2bcda280708	typeref:typename:int64_t
dlclose_	$FLECS/$FLECS/flecs.h	/^    ecs_os_api_dlclose_t dlclose_;$/;"	m	struct:ecs_os_api_t	typeref:typename:ecs_os_api_dlclose_t
dlopen_	$FLECS/$FLECS/flecs.h	/^    ecs_os_api_dlopen_t dlopen_;$/;"	m	struct:ecs_os_api_t	typeref:typename:ecs_os_api_dlopen_t
dlproc_	$FLECS/$FLECS/flecs.h	/^    ecs_os_api_dlproc_t dlproc_;$/;"	m	struct:ecs_os_api_t	typeref:typename:ecs_os_api_dlproc_t
do_import	$FLECS/$FLECS/flecs.h	/^ecs_entity_t do_import(world& world, const char *symbol) {$/;"	f	namespace:flecs::_	typeref:typename:ecs_entity_t	signature:(world & world,const char * symbol)
doc	$FLECS/$FLECS/flecs.h	/^namespace doc {$/;"	n	namespace:flecs
doc_brief	$FLECS/$FLECS/flecs.h	/^const char* doc_brief() {$/;"	f	struct:flecs::entity_view	typeref:typename:const char *	signature:()
doc_color	$FLECS/$FLECS/flecs.h	/^const char* doc_color() {$/;"	f	struct:flecs::entity_view	typeref:typename:const char *	signature:()
doc_detail	$FLECS/$FLECS/flecs.h	/^const char* doc_detail() {$/;"	f	struct:flecs::entity_view	typeref:typename:const char *	signature:()
doc_link	$FLECS/$FLECS/flecs.h	/^const char* doc_link() {$/;"	f	struct:flecs::entity_view	typeref:typename:const char *	signature:()
doc_name	$FLECS/$FLECS/flecs.h	/^const char* doc_name() {$/;"	f	struct:flecs::entity_view	typeref:typename:const char *	signature:()
dotmember	$FLECS/$FLECS/flecs.h	/^inline metric_builder& metric_builder::dotmember(const char *expr) {$/;"	f	class:flecs::metric_builder	typeref:typename:metric_builder &	signature:(const char * expr)
down	$FLECS/$FLECS/flecs.c	/^    ecs_trav_down_t *down;$/;"	m	struct:__anonb2bcda232708	typeref:typename:ecs_trav_down_t *	file:
dtor	$FLECS/$FLECS/flecs.c	/^    ecs_poly_dtor_t dtor;$/;"	m	struct:ecs_rule_t	typeref:typename:ecs_poly_dtor_t	file:
dtor	$FLECS/$FLECS/flecs.h	/^ecs_xtor_t dtor() {$/;"	f	namespace:flecs::_	typeref:typename:ecs_xtor_t	signature:()
dtor_impl	$FLECS/$FLECS/flecs.h	/^void dtor_impl(void *ptr, int32_t count, const ecs_type_info_t *info) {$/;"	f	namespace:flecs::_	typeref:typename:void	signature:(void * ptr,int32_t count,const ecs_type_info_t * info)
dtor_unit	$FLECS/$FLECS/flecs.c	/^static void dtor_unit($/;"	f	file:	signature:(EcsUnit * ptr)
dtor_unit_prefix	$FLECS/$FLECS/flecs.c	/^static void dtor_unit_prefix($/;"	f	file:	signature:(EcsUnitPrefix * ptr)
duration	$FLECS/$FLECS/flecs.h	/^struct duration {$/;"	s	struct:flecs::units
e_from_helper	$FLECS/$FLECS/flecs.c	/^ecs_entity_t e_from_helper($/;"	f	typeref:typename:ecs_entity_t	file:	signature:(sort_helper_t * helper)
each	$FLECS/$FLECS/flecs.c	/^        ecs_rule_each_ctx_t each;$/;"	m	union:ecs_rule_op_ctx_t::__anonb2bcda23310a	typeref:typename:ecs_rule_each_ctx_t	file:
each	$FLECS/$FLECS/flecs.h	/^void each(flecs::id_t term_id, Func&& func) const;$/;"	p	struct:flecs::world	typeref:typename:void	signature:(flecs::id_t term_id,Func && func) const
each_column	$FLECS/$FLECS/flecs.h	/^struct each_column<T, if_t< is_pointer<T>::value && $/;"	s	namespace:flecs::_
each_column_base	$FLECS/$FLECS/flecs.h	/^struct each_column_base {$/;"	s	namespace:flecs::_
each_delegate	$FLECS/$FLECS/flecs.h	/^struct each_delegate : public delegate {$/;"	s	namespace:flecs::_
each_ref_column	$FLECS/$FLECS/flecs.h	/^struct each_ref_column : public each_column<T> {$/;"	s	namespace:flecs::_
each_term	$FLECS/$FLECS/flecs.h	/^    void each_term(const Func& func) {$/;"	f	struct:flecs::filter_base	typeref:typename:void	signature:(const Func & func)
ecs_abort	$FLECS/$FLECS/flecs.h	/^#define ecs_abort(/;"	d	signature:(error_code,...)
ecs_abort_	$FLECS/$FLECS/flecs.c	/^void ecs_abort_($/;"	f	typeref:typename:void	signature:(int32_t error_code,const char * file,int32_t line,const char * fmt,...)
ecs_abort_	$FLECS/$FLECS/flecs.h	/^void ecs_abort_($/;"	p	typeref:typename:FLECS_API void	signature:(int32_t error_code,const char * file,int32_t line,const char * fmt,...)
ecs_action_elem_t	$FLECS/$FLECS/flecs.c	/^} ecs_action_elem_t;$/;"	t	typeref:struct:ecs_action_elem_t	file:
ecs_add	$FLECS/$FLECS/flecs.h	/^#define ecs_add(/;"	d	signature:(world,entity,T)
ecs_add_fullpath	$FLECS/$FLECS/flecs.h	/^#define ecs_add_fullpath(/;"	d	signature:(world,entity,path)
ecs_add_id	$FLECS/$FLECS/flecs.c	/^void ecs_add_id($/;"	f	typeref:typename:void	signature:(ecs_world_t * world,ecs_entity_t entity,ecs_id_t id)
ecs_add_id	$FLECS/$FLECS/flecs.h	/^void ecs_add_id($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_world_t * world,ecs_entity_t entity,ecs_id_t id)
ecs_add_pair	$FLECS/$FLECS/flecs.h	/^#define ecs_add_pair(/;"	d	signature:(world,subject,first,second)
ecs_add_path	$FLECS/$FLECS/flecs.h	/^#define ecs_add_path(/;"	d	signature:(world,entity,parent,path)
ecs_add_path_w_sep	$FLECS/$FLECS/flecs.c	/^ecs_entity_t ecs_add_path_w_sep($/;"	f	typeref:typename:ecs_entity_t	signature:(ecs_world_t * world,ecs_entity_t entity,ecs_entity_t parent,const char * path,const char * sep,const char * prefix)
ecs_add_path_w_sep	$FLECS/$FLECS/flecs.h	/^ecs_entity_t ecs_add_path_w_sep($/;"	p	typeref:typename:FLECS_API ecs_entity_t	signature:(ecs_world_t * world,ecs_entity_t entity,ecs_entity_t parent,const char * path,const char * sep,const char * prefix)
ecs_alert	$FLECS/$FLECS/flecs.h	/^#define ecs_alert(/;"	d	signature:(world,...)
ecs_alert_desc_t	$FLECS/$FLECS/flecs.h	/^} ecs_alert_desc_t;$/;"	t	typeref:struct:ecs_alert_desc_t
ecs_alert_init	$FLECS/$FLECS/flecs.c	/^ecs_entity_t ecs_alert_init($/;"	f	typeref:typename:ecs_entity_t	signature:(ecs_world_t * world,const ecs_alert_desc_t * desc)
ecs_alert_init	$FLECS/$FLECS/flecs.h	/^ecs_entity_t ecs_alert_init($/;"	p	typeref:typename:FLECS_API ecs_entity_t	signature:(ecs_world_t * world,const ecs_alert_desc_t * desc)
ecs_alert_severity_filter_t	$FLECS/$FLECS/flecs.h	/^} ecs_alert_severity_filter_t;$/;"	t	typeref:struct:ecs_alert_severity_filter_t
ecs_allocator_t	$FLECS/$FLECS/flecs.h	/^typedef struct ecs_allocator_t ecs_allocator_t;$/;"	t	typeref:struct:ecs_allocator_t
ecs_app_desc	$FLECS/$FLECS/flecs.c	/^static ecs_app_desc_t ecs_app_desc;$/;"	v	typeref:typename:ecs_app_desc_t	file:
ecs_app_desc_t	$FLECS/$FLECS/flecs.h	/^} ecs_app_desc_t;$/;"	t	typeref:struct:ecs_app_desc_t
ecs_app_frame_action_t	$FLECS/$FLECS/flecs.h	/^typedef int(*ecs_app_frame_action_t)($/;"	t	typeref:typename:int (*)(ecs_world_t * world,const ecs_app_desc_t * desc)
ecs_app_init_action_t	$FLECS/$FLECS/flecs.h	/^typedef int(*ecs_app_init_action_t)($/;"	t	typeref:typename:int (*)(ecs_world_t * world)
ecs_app_run	$FLECS/$FLECS/flecs.c	/^int ecs_app_run($/;"	f	typeref:typename:int	signature:(ecs_world_t * world,ecs_app_desc_t * desc)
ecs_app_run	$FLECS/$FLECS/flecs.h	/^int ecs_app_run($/;"	p	typeref:typename:FLECS_API int	signature:(ecs_world_t * world,ecs_app_desc_t * desc)
ecs_app_run_action_t	$FLECS/$FLECS/flecs.h	/^typedef int(*ecs_app_run_action_t)($/;"	t	typeref:typename:int (*)(ecs_world_t * world,ecs_app_desc_t * desc)
ecs_app_run_frame	$FLECS/$FLECS/flecs.c	/^int ecs_app_run_frame($/;"	f	typeref:typename:int	signature:(ecs_world_t * world,const ecs_app_desc_t * desc)
ecs_app_run_frame	$FLECS/$FLECS/flecs.h	/^int ecs_app_run_frame($/;"	p	typeref:typename:FLECS_API int	signature:(ecs_world_t * world,const ecs_app_desc_t * desc)
ecs_app_set_frame_action	$FLECS/$FLECS/flecs.c	/^int ecs_app_set_frame_action($/;"	f	typeref:typename:int	signature:(ecs_app_frame_action_t callback)
ecs_app_set_frame_action	$FLECS/$FLECS/flecs.h	/^int ecs_app_set_frame_action($/;"	p	typeref:typename:FLECS_API int	signature:(ecs_app_frame_action_t callback)
ecs_app_set_run_action	$FLECS/$FLECS/flecs.c	/^int ecs_app_set_run_action($/;"	f	typeref:typename:int	signature:(ecs_app_run_action_t callback)
ecs_app_set_run_action	$FLECS/$FLECS/flecs.h	/^int ecs_app_set_run_action($/;"	p	typeref:typename:FLECS_API int	signature:(ecs_app_run_action_t callback)
ecs_array	$FLECS/$FLECS/flecs.h	/^#define ecs_array(/;"	d	signature:(world,...)
ecs_array_desc_t	$FLECS/$FLECS/flecs.h	/^} ecs_array_desc_t;$/;"	t	typeref:struct:ecs_array_desc_t
ecs_array_init	$FLECS/$FLECS/flecs.c	/^ecs_entity_t ecs_array_init($/;"	f	typeref:typename:ecs_entity_t	signature:(ecs_world_t * world,const ecs_array_desc_t * desc)
ecs_array_init	$FLECS/$FLECS/flecs.h	/^ecs_entity_t ecs_array_init($/;"	p	typeref:typename:FLECS_API ecs_entity_t	signature:(ecs_world_t * world,const ecs_array_desc_t * desc)
ecs_array_to_json	$FLECS/$FLECS/flecs.c	/^char* ecs_array_to_json($/;"	f	typeref:typename:char *	signature:(const ecs_world_t * world,ecs_entity_t type,const void * ptr,int32_t count)
ecs_array_to_json	$FLECS/$FLECS/flecs.h	/^char* ecs_array_to_json($/;"	p	typeref:typename:FLECS_API char *	signature:(const ecs_world_t * world,ecs_entity_t type,const void * data,int32_t count)
ecs_array_to_json_buf	$FLECS/$FLECS/flecs.c	/^int ecs_array_to_json_buf($/;"	f	typeref:typename:int	signature:(const ecs_world_t * world,ecs_entity_t type,const void * ptr,int32_t count,ecs_strbuf_t * buf)
ecs_array_to_json_buf	$FLECS/$FLECS/flecs.h	/^int ecs_array_to_json_buf($/;"	p	typeref:typename:FLECS_API int	signature:(const ecs_world_t * world,ecs_entity_t type,const void * data,int32_t count,ecs_strbuf_t * buf_out)
ecs_asprintf	$FLECS/$FLECS/flecs.c	/^char* ecs_asprintf($/;"	f	typeref:typename:char *	signature:(const char * fmt,...)
ecs_asprintf	$FLECS/$FLECS/flecs.h	/^char* ecs_asprintf($/;"	p	typeref:typename:FLECS_API char *	signature:(const char * fmt,...)
ecs_assert	$FLECS/$FLECS/flecs.h	/^#define ecs_assert(/;"	d	signature:(condition,error_code,...)
ecs_assert_log_	$FLECS/$FLECS/flecs.c	/^void ecs_assert_log_($/;"	f	typeref:typename:void	signature:(int32_t error_code,const char * condition_str,const char * file,int32_t line,const char * fmt,...)
ecs_assert_log_	$FLECS/$FLECS/flecs.h	/^void ecs_assert_log_($/;"	p	typeref:typename:FLECS_API void	signature:(int32_t error_code,const char * condition_str,const char * file,int32_t line,const char * fmt,...)
ecs_assert_var	$FLECS/$FLECS/flecs.h	/^#define ecs_assert_var(/;"	d	signature:(var,error_code,...)
ecs_astresc	$FLECS/$FLECS/flecs.c	/^char* ecs_astresc($/;"	f	typeref:typename:char *	signature:(char delimiter,const char * in)
ecs_astresc	$FLECS/$FLECS/flecs.h	/^char* ecs_astresc($/;"	p	typeref:typename:FLECS_API char *	signature:(char delimiter,const char * in)
ecs_async_stage_free	$FLECS/$FLECS/flecs.c	/^void ecs_async_stage_free($/;"	f	typeref:typename:void	signature:(ecs_world_t * world)
ecs_async_stage_free	$FLECS/$FLECS/flecs.h	/^void ecs_async_stage_free($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_world_t * stage)
ecs_async_stage_new	$FLECS/$FLECS/flecs.c	/^ecs_world_t* ecs_async_stage_new($/;"	f	typeref:typename:ecs_world_t *	signature:(ecs_world_t * world)
ecs_async_stage_new	$FLECS/$FLECS/flecs.h	/^ecs_world_t* ecs_async_stage_new($/;"	p	typeref:typename:FLECS_API ecs_world_t *	signature:(ecs_world_t * world)
ecs_atfini	$FLECS/$FLECS/flecs.c	/^void ecs_atfini($/;"	f	typeref:typename:void	signature:(ecs_world_t * world,ecs_fini_action_t action,void * ctx)
ecs_atfini	$FLECS/$FLECS/flecs.h	/^void ecs_atfini($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_world_t * world,ecs_fini_action_t action,void * ctx)
ecs_bitmask	$FLECS/$FLECS/flecs.h	/^#define ecs_bitmask(/;"	d	signature:(world,...)
ecs_bitmask_constant_t	$FLECS/$FLECS/flecs.h	/^} ecs_bitmask_constant_t;$/;"	t	typeref:struct:ecs_bitmask_constant_t
ecs_bitmask_desc_t	$FLECS/$FLECS/flecs.h	/^} ecs_bitmask_desc_t;$/;"	t	typeref:struct:ecs_bitmask_desc_t
ecs_bitmask_init	$FLECS/$FLECS/flecs.c	/^ecs_entity_t ecs_bitmask_init($/;"	f	typeref:typename:ecs_entity_t	signature:(ecs_world_t * world,const ecs_bitmask_desc_t * desc)
ecs_bitmask_init	$FLECS/$FLECS/flecs.h	/^ecs_entity_t ecs_bitmask_init($/;"	p	typeref:typename:FLECS_API ecs_entity_t	signature:(ecs_world_t * world,const ecs_bitmask_desc_t * desc)
ecs_bitset_t	$FLECS/$FLECS/flecs.c	/^} ecs_bitset_t;$/;"	t	typeref:struct:ecs_bitset_t	file:
ecs_block_allocator_alloc_count	$FLECS/$FLECS/flecs.c	/^int64_t ecs_block_allocator_alloc_count = 0;$/;"	v	typeref:typename:int64_t
ecs_block_allocator_block_t	$FLECS/$FLECS/flecs.h	/^} ecs_block_allocator_block_t;$/;"	t	typeref:struct:ecs_block_allocator_block_t
ecs_block_allocator_chunk_header_t	$FLECS/$FLECS/flecs.h	/^} ecs_block_allocator_chunk_header_t;$/;"	t	typeref:struct:ecs_block_allocator_chunk_header_t
ecs_block_allocator_free_count	$FLECS/$FLECS/flecs.c	/^int64_t ecs_block_allocator_free_count = 0;$/;"	v	typeref:typename:int64_t
ecs_block_allocator_t	$FLECS/$FLECS/flecs.h	/^} ecs_block_allocator_t;$/;"	t	typeref:struct:ecs_block_allocator_t
ecs_bool_t	$FLECS/$FLECS/flecs.h	/^typedef bool ecs_bool_t;$/;"	t	typeref:typename:bool
ecs_bucket_entry_t	$FLECS/$FLECS/flecs.h	/^} ecs_bucket_entry_t;$/;"	t	typeref:struct:ecs_bucket_entry_t
ecs_bucket_t	$FLECS/$FLECS/flecs.h	/^} ecs_bucket_t;$/;"	t	typeref:struct:ecs_bucket_t
ecs_bulk_desc_t	$FLECS/$FLECS/flecs.h	/^} ecs_bulk_desc_t;$/;"	t	typeref:struct:ecs_bulk_desc_t
ecs_bulk_init	$FLECS/$FLECS/flecs.c	/^const ecs_entity_t* ecs_bulk_init($/;"	f	typeref:typename:const ecs_entity_t *	signature:(ecs_world_t * world,const ecs_bulk_desc_t * desc)
ecs_bulk_init	$FLECS/$FLECS/flecs.h	/^const ecs_entity_t* ecs_bulk_init($/;"	p	typeref:typename:FLECS_API const ecs_entity_t *	signature:(ecs_world_t * world,const ecs_bulk_desc_t * desc)
ecs_bulk_new	$FLECS/$FLECS/flecs.h	/^#define ecs_bulk_new(/;"	d	signature:(world,component,count)
ecs_bulk_new_w_id	$FLECS/$FLECS/flecs.c	/^const ecs_entity_t* ecs_bulk_new_w_id($/;"	f	typeref:typename:const ecs_entity_t *	signature:(ecs_world_t * world,ecs_id_t id,int32_t count)
ecs_bulk_new_w_id	$FLECS/$FLECS/flecs.h	/^const ecs_entity_t* ecs_bulk_new_w_id($/;"	p	typeref:typename:FLECS_API const ecs_entity_t *	signature:(ecs_world_t * world,ecs_id_t id,int32_t count)
ecs_byte_t	$FLECS/$FLECS/flecs.h	/^typedef unsigned char ecs_byte_t;$/;"	t	typeref:typename:unsigned char
ecs_chained_iter_fini	$FLECS/$FLECS/flecs.c	/^void ecs_chained_iter_fini($/;"	f	typeref:typename:void	file:	signature:(ecs_iter_t * it)
ecs_char_t	$FLECS/$FLECS/flecs.h	/^typedef char ecs_char_t;$/;"	t	typeref:typename:char
ecs_check	$FLECS/$FLECS/flecs.h	/^#define ecs_check(/;"	d	signature:(condition,error_code,...)
ecs_childof	$FLECS/$FLECS/flecs.h	/^#define ecs_childof(/;"	d	signature:(e)
ecs_children	$FLECS/$FLECS/flecs.c	/^ecs_iter_t ecs_children($/;"	f	typeref:typename:ecs_iter_t	signature:(const ecs_world_t * world,ecs_entity_t parent)
ecs_children	$FLECS/$FLECS/flecs.h	/^ecs_iter_t ecs_children($/;"	p	typeref:typename:FLECS_API ecs_iter_t	signature:(const ecs_world_t * world,ecs_entity_t parent)
ecs_children_next	$FLECS/$FLECS/flecs.c	/^bool ecs_children_next($/;"	f	typeref:typename:bool	signature:(ecs_iter_t * it)
ecs_children_next	$FLECS/$FLECS/flecs.h	/^bool ecs_children_next($/;"	p	typeref:typename:FLECS_API bool	signature:(ecs_iter_t * it)
ecs_chresc	$FLECS/$FLECS/flecs.c	/^char* ecs_chresc($/;"	f	typeref:typename:char *	signature:(char * out,char in,char delimiter)
ecs_chresc	$FLECS/$FLECS/flecs.h	/^char* ecs_chresc($/;"	p	typeref:typename:FLECS_API char *	signature:(char * out,char in,char delimiter)
ecs_chrparse	$FLECS/$FLECS/flecs.c	/^const char* ecs_chrparse($/;"	f	typeref:typename:const char *	signature:(const char * in,char * out)
ecs_chrparse	$FLECS/$FLECS/flecs.h	/^const char* ecs_chrparse($/;"	p	typeref:typename:const char *	signature:(const char * in,char * out)
ecs_clear	$FLECS/$FLECS/flecs.c	/^void ecs_clear($/;"	f	typeref:typename:void	signature:(ecs_world_t * world,ecs_entity_t entity)
ecs_clear	$FLECS/$FLECS/flecs.h	/^void ecs_clear($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_world_t * world,ecs_entity_t entity)
ecs_clone	$FLECS/$FLECS/flecs.c	/^ecs_entity_t ecs_clone($/;"	f	typeref:typename:ecs_entity_t	signature:(ecs_world_t * world,ecs_entity_t dst,ecs_entity_t src,bool copy_value)
ecs_clone	$FLECS/$FLECS/flecs.h	/^ecs_entity_t ecs_clone($/;"	p	typeref:typename:FLECS_API ecs_entity_t	signature:(ecs_world_t * world,ecs_entity_t dst,ecs_entity_t src,bool copy_value)
ecs_cmd_1_t	$FLECS/$FLECS/flecs.c	/^} ecs_cmd_1_t;$/;"	t	typeref:struct:ecs_cmd_1_t	file:
ecs_cmd_entry_t	$FLECS/$FLECS/flecs.c	/^} ecs_cmd_entry_t;$/;"	t	typeref:struct:ecs_cmd_entry_t	file:
ecs_cmd_kind_t	$FLECS/$FLECS/flecs.c	/^} ecs_cmd_kind_t;$/;"	t	typeref:enum:ecs_cmd_kind_t	file:
ecs_cmd_n_t	$FLECS/$FLECS/flecs.c	/^} ecs_cmd_n_t;$/;"	t	typeref:struct:ecs_cmd_n_t	file:
ecs_cmd_t	$FLECS/$FLECS/flecs.c	/^} ecs_cmd_t;$/;"	t	typeref:struct:ecs_cmd_t	file:
ecs_column_t	$FLECS/$FLECS/flecs.c	/^} ecs_column_t;$/;"	t	typeref:struct:ecs_column_t	file:
ecs_commands_t	$FLECS/$FLECS/flecs.c	/^} ecs_commands_t;$/;"	t	typeref:struct:ecs_commands_t	file:
ecs_commit	$FLECS/$FLECS/flecs.c	/^bool ecs_commit($/;"	f	typeref:typename:bool	signature:(ecs_world_t * world,ecs_entity_t entity,ecs_record_t * record,ecs_table_t * table,const ecs_type_t * added,const ecs_type_t * removed)
ecs_commit	$FLECS/$FLECS/flecs.h	/^bool ecs_commit($/;"	p	typeref:typename:FLECS_API bool	signature:(ecs_world_t * world,ecs_entity_t entity,ecs_record_t * record,ecs_table_t * table,const ecs_type_t * added,const ecs_type_t * removed)
ecs_compare	$FLECS/$FLECS/flecs.h	/^#define ecs_compare(/;"	d	signature:(id)
ecs_compare_action_t	$FLECS/$FLECS/flecs.h	/^typedef int (*ecs_compare_action_t)($/;"	t	typeref:typename:int (*)(const void * ptr1,const void * ptr2)
ecs_component	$FLECS/$FLECS/flecs.h	/^#define ecs_component(/;"	d	signature:(world,...)
ecs_component_desc_t	$FLECS/$FLECS/flecs.h	/^} ecs_component_desc_t;$/;"	t	typeref:struct:ecs_component_desc_t
ecs_component_init	$FLECS/$FLECS/flecs.c	/^ecs_entity_t ecs_component_init($/;"	f	typeref:typename:ecs_entity_t	signature:(ecs_world_t * world,const ecs_component_desc_t * desc)
ecs_component_init	$FLECS/$FLECS/flecs.h	/^ecs_entity_t ecs_component_init($/;"	p	typeref:typename:FLECS_API ecs_entity_t	signature:(ecs_world_t * world,const ecs_component_desc_t * desc)
ecs_component_t	$FLECS/$FLECS/flecs.h	/^#define ecs_component_t(/;"	d	signature:(world,T)
ecs_copy	$FLECS/$FLECS/flecs.h	/^#define ecs_copy(/;"	d	signature:(type)
ecs_copy_ctor_illegal	$FLECS/$FLECS/flecs.h	/^inline void ecs_copy_ctor_illegal($/;"	f	namespace:flecs::_	typeref:typename:void	signature:(void *,const void *,int32_t,const ecs_type_info_t * ti)
ecs_copy_illegal	$FLECS/$FLECS/flecs.h	/^inline void ecs_copy_illegal($/;"	f	namespace:flecs::_	typeref:typename:void	signature:(void *,const void *,int32_t,const ecs_type_info_t * ti)
ecs_copy_t	$FLECS/$FLECS/flecs.h	/^typedef void (*ecs_copy_t)($/;"	t	typeref:typename:void (*)(void * dst_ptr,const void * src_ptr,int32_t count,const ecs_type_info_t * type_info)
ecs_count	$FLECS/$FLECS/flecs.h	/^#define ecs_count(/;"	d	signature:(world,type)
ecs_count_id	$FLECS/$FLECS/flecs.c	/^int32_t ecs_count_id($/;"	f	typeref:typename:int32_t	signature:(const ecs_world_t * world,ecs_entity_t id)
ecs_count_id	$FLECS/$FLECS/flecs.h	/^int32_t ecs_count_id($/;"	p	typeref:typename:FLECS_API int32_t	signature:(const ecs_world_t * world,ecs_id_t entity)
ecs_count_targets_metric_ctx_t	$FLECS/$FLECS/flecs.c	/^} ecs_count_targets_metric_ctx_t;$/;"	t	typeref:struct:__anonb2bcda230f08	file:
ecs_counter_t	$FLECS/$FLECS/flecs.h	/^} ecs_counter_t;$/;"	t	typeref:struct:ecs_counter_t
ecs_cpp_component_register	$FLECS/$FLECS/flecs.c	/^ecs_entity_t ecs_cpp_component_register($/;"	f	typeref:typename:ecs_entity_t	signature:(ecs_world_t * world,ecs_entity_t id,const char * name,const char * symbol,ecs_size_t size,ecs_size_t alignment,bool implicit_name,bool * existing_out)
ecs_cpp_component_register	$FLECS/$FLECS/flecs.h	/^ecs_entity_t ecs_cpp_component_register($/;"	p	typeref:typename:FLECS_API ecs_entity_t	signature:(ecs_world_t * world,ecs_entity_t id,const char * name,const char * symbol,ecs_size_t size,ecs_size_t alignment,bool implicit_name,bool * existing_out)
ecs_cpp_component_register_explicit	$FLECS/$FLECS/flecs.c	/^ecs_entity_t ecs_cpp_component_register_explicit($/;"	f	typeref:typename:ecs_entity_t	signature:(ecs_world_t * world,ecs_entity_t s_id,ecs_entity_t id,const char * name,const char * type_name,const char * symbol,size_t size,size_t alignment,bool is_component,bool * existing_out)
ecs_cpp_component_register_explicit	$FLECS/$FLECS/flecs.h	/^ecs_entity_t ecs_cpp_component_register_explicit($/;"	p	typeref:typename:FLECS_API ecs_entity_t	signature:(ecs_world_t * world,ecs_entity_t s_id,ecs_entity_t id,const char * name,const char * type_name,const char * symbol,size_t size,size_t alignment,bool is_component,bool * existing_out)
ecs_cpp_component_validate	$FLECS/$FLECS/flecs.c	/^void ecs_cpp_component_validate($/;"	f	typeref:typename:void	signature:(ecs_world_t * world,ecs_entity_t id,const char * name,const char * symbol,size_t size,size_t alignment,bool implicit_name)
ecs_cpp_component_validate	$FLECS/$FLECS/flecs.h	/^void ecs_cpp_component_validate($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_world_t * world,ecs_entity_t id,const char * name,const char * symbol,size_t size,size_t alignment,bool implicit_name)
ecs_cpp_enum_constant_register	$FLECS/$FLECS/flecs.c	/^ecs_entity_t ecs_cpp_enum_constant_register($/;"	f	typeref:typename:ecs_entity_t	signature:(ecs_world_t * world,ecs_entity_t parent,ecs_entity_t id,const char * name,int value)
ecs_cpp_enum_constant_register	$FLECS/$FLECS/flecs.h	/^ecs_entity_t ecs_cpp_enum_constant_register($/;"	p	typeref:typename:FLECS_API ecs_entity_t	signature:(ecs_world_t * world,ecs_entity_t parent,ecs_entity_t id,const char * name,int value)
ecs_cpp_enum_init	$FLECS/$FLECS/flecs.c	/^void ecs_cpp_enum_init($/;"	f	typeref:typename:void	signature:(ecs_world_t * world,ecs_entity_t id)
ecs_cpp_enum_init	$FLECS/$FLECS/flecs.h	/^void ecs_cpp_enum_init($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_world_t * world,ecs_entity_t id)
ecs_cpp_get_constant_name	$FLECS/$FLECS/flecs.c	/^char* ecs_cpp_get_constant_name($/;"	f	typeref:typename:char *	signature:(char * constant_name,const char * func_name,size_t func_name_len,size_t func_back_len)
ecs_cpp_get_constant_name	$FLECS/$FLECS/flecs.h	/^char* ecs_cpp_get_constant_name($/;"	p	typeref:typename:FLECS_API char *	signature:(char * constant_name,const char * func_name,size_t len,size_t back_len)
ecs_cpp_get_symbol_name	$FLECS/$FLECS/flecs.c	/^char* ecs_cpp_get_symbol_name($/;"	f	typeref:typename:char *	signature:(char * symbol_name,const char * type_name,size_t len)
ecs_cpp_get_symbol_name	$FLECS/$FLECS/flecs.h	/^char* ecs_cpp_get_symbol_name($/;"	p	typeref:typename:FLECS_API char *	signature:(char * symbol_name,const char * type_name,size_t len)
ecs_cpp_get_type_name	$FLECS/$FLECS/flecs.c	/^char* ecs_cpp_get_type_name($/;"	f	typeref:typename:char *	signature:(char * type_name,const char * func_name,size_t len,size_t front_len)
ecs_cpp_get_type_name	$FLECS/$FLECS/flecs.h	/^char* ecs_cpp_get_type_name($/;"	p	typeref:typename:FLECS_API char *	signature:(char * type_name,const char * func_name,size_t len,size_t front_len)
ecs_cpp_last_member	$FLECS/$FLECS/flecs.c	/^const ecs_member_t* ecs_cpp_last_member($/;"	f	typeref:typename:const ecs_member_t *	signature:(const ecs_world_t * world,ecs_entity_t type)
ecs_cpp_last_member	$FLECS/$FLECS/flecs.h	/^const ecs_member_t* ecs_cpp_last_member($/;"	p	typeref:typename:FLECS_API const ecs_member_t *	signature:(const ecs_world_t * world,ecs_entity_t type)
ecs_cpp_reset_count_get	$FLECS/$FLECS/flecs.c	/^int32_t ecs_cpp_reset_count_get(void) {$/;"	f	typeref:typename:int32_t	signature:(void)
ecs_cpp_reset_count_get	$FLECS/$FLECS/flecs.h	/^int32_t ecs_cpp_reset_count_get(void);$/;"	p	typeref:typename:FLECS_API int32_t	signature:(void)
ecs_cpp_reset_count_inc	$FLECS/$FLECS/flecs.c	/^int32_t ecs_cpp_reset_count_inc(void) {$/;"	f	typeref:typename:int32_t	signature:(void)
ecs_cpp_reset_count_inc	$FLECS/$FLECS/flecs.h	/^int32_t ecs_cpp_reset_count_inc(void);$/;"	p	typeref:typename:FLECS_API int32_t	signature:(void)
ecs_cpp_strip_prefix	$FLECS/$FLECS/flecs.c	/^ecs_size_t ecs_cpp_strip_prefix($/;"	f	typeref:typename:ecs_size_t	file:	signature:(char * typeName,ecs_size_t len,const char * prefix,ecs_size_t prefix_len)
ecs_cpp_trim_module	$FLECS/$FLECS/flecs.c	/^const char* ecs_cpp_trim_module($/;"	f	typeref:typename:const char *	signature:(ecs_world_t * world,const char * type_name)
ecs_cpp_trim_module	$FLECS/$FLECS/flecs.h	/^const char* ecs_cpp_trim_module($/;"	p	typeref:typename:FLECS_API const char *	signature:(ecs_world_t * world,const char * type_name)
ecs_cpp_trim_type_name	$FLECS/$FLECS/flecs.c	/^void ecs_cpp_trim_type_name($/;"	f	typeref:typename:void	file:	signature:(char * typeName)
ecs_ctor	$FLECS/$FLECS/flecs.h	/^#define ecs_ctor(/;"	d	signature:(type)
ecs_ctor_illegal	$FLECS/$FLECS/flecs.h	/^inline void ecs_ctor_illegal(void *, int32_t, const ecs_type_info_t *ti) {$/;"	f	namespace:flecs::_	typeref:typename:void	signature:(void *,int32_t,const ecs_type_info_t * ti)
ecs_ctx_free_t	$FLECS/$FLECS/flecs.h	/^typedef void (*ecs_ctx_free_t)($/;"	t	typeref:typename:void (*)(void * ctx)
ecs_data_t	$FLECS/$FLECS/flecs.c	/^struct ecs_data_t {$/;"	s	file:
ecs_data_t	$FLECS/$FLECS/flecs.h	/^typedef struct ecs_data_t ecs_data_t;$/;"	t	typeref:struct:ecs_data_t
ecs_dbg	$FLECS/$FLECS/flecs.h	/^#define ecs_dbg ecs_dbg_/;"	d
ecs_dbg_1	$FLECS/$FLECS/flecs.h	/^#define ecs_dbg_1(/;"	d	signature:(...)
ecs_dbg_2	$FLECS/$FLECS/flecs.h	/^#define ecs_dbg_2(/;"	d	signature:(...)
ecs_dbg_3	$FLECS/$FLECS/flecs.h	/^#define ecs_dbg_3(/;"	d	signature:(...)
ecs_dbg_assert	$FLECS/$FLECS/flecs.h	/^#define ecs_dbg_assert(/;"	d	signature:(condition,error_code,...)
ecs_default_ctor	$FLECS/$FLECS/flecs.c	/^void ecs_default_ctor($/;"	f	typeref:typename:void	signature:(void * ptr,int32_t count,const ecs_type_info_t * ti)
ecs_default_ctor	$FLECS/$FLECS/flecs.h	/^void ecs_default_ctor($/;"	p	typeref:typename:FLECS_API void	signature:(void * ptr,int32_t count,const ecs_type_info_t * ctx)
ecs_default_lookup_path	$FLECS/$FLECS/flecs.c	/^static ecs_entity_t ecs_default_lookup_path[2] = { 0, 0 };$/;"	v	typeref:typename:ecs_entity_t[2]	file:
ecs_defer_begin	$FLECS/$FLECS/flecs.c	/^bool ecs_defer_begin($/;"	f	typeref:typename:bool	signature:(ecs_world_t * world)
ecs_defer_begin	$FLECS/$FLECS/flecs.h	/^bool ecs_defer_begin($/;"	p	typeref:typename:FLECS_API bool	signature:(ecs_world_t * world)
ecs_defer_end	$FLECS/$FLECS/flecs.c	/^bool ecs_defer_end($/;"	f	typeref:typename:bool	signature:(ecs_world_t * world)
ecs_defer_end	$FLECS/$FLECS/flecs.h	/^bool ecs_defer_end($/;"	p	typeref:typename:FLECS_API bool	signature:(ecs_world_t * world)
ecs_defer_resume	$FLECS/$FLECS/flecs.c	/^void ecs_defer_resume($/;"	f	typeref:typename:void	signature:(ecs_world_t * world)
ecs_defer_resume	$FLECS/$FLECS/flecs.h	/^void ecs_defer_resume($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_world_t * world)
ecs_defer_suspend	$FLECS/$FLECS/flecs.c	/^void ecs_defer_suspend($/;"	f	typeref:typename:void	signature:(ecs_world_t * world)
ecs_defer_suspend	$FLECS/$FLECS/flecs.h	/^void ecs_defer_suspend($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_world_t * world)
ecs_delete	$FLECS/$FLECS/flecs.c	/^void ecs_delete($/;"	f	typeref:typename:void	signature:(ecs_world_t * world,ecs_entity_t entity)
ecs_delete	$FLECS/$FLECS/flecs.h	/^void ecs_delete($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_world_t * world,ecs_entity_t entity)
ecs_delete_children	$FLECS/$FLECS/flecs.h	/^#define ecs_delete_children(/;"	d	signature:(world,parent)
ecs_delete_empty_tables	$FLECS/$FLECS/flecs.c	/^int32_t ecs_delete_empty_tables($/;"	f	typeref:typename:int32_t	signature:(ecs_world_t * world,ecs_id_t id,uint16_t clear_generation,uint16_t delete_generation,int32_t min_id_count,double time_budget_seconds)
ecs_delete_empty_tables	$FLECS/$FLECS/flecs.h	/^int32_t ecs_delete_empty_tables($/;"	p	typeref:typename:FLECS_API int32_t	signature:(ecs_world_t * world,ecs_id_t id,uint16_t clear_generation,uint16_t delete_generation,int32_t min_id_count,double time_budget_seconds)
ecs_delete_with	$FLECS/$FLECS/flecs.c	/^void ecs_delete_with($/;"	f	typeref:typename:void	signature:(ecs_world_t * world,ecs_id_t id)
ecs_delete_with	$FLECS/$FLECS/flecs.h	/^void ecs_delete_with($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_world_t * world,ecs_id_t id)
ecs_dependson	$FLECS/$FLECS/flecs.h	/^#define ecs_dependson(/;"	d	signature:(e)
ecs_deprecated	$FLECS/$FLECS/flecs.h	/^#define ecs_deprecated(/;"	d	signature:(...)
ecs_deprecated_	$FLECS/$FLECS/flecs.c	/^void ecs_deprecated_($/;"	f	typeref:typename:void	signature:(const char * file,int32_t line,const char * msg)
ecs_deprecated_	$FLECS/$FLECS/flecs.h	/^void ecs_deprecated_($/;"	p	typeref:typename:FLECS_API void	signature:(const char * file,int32_t line,const char * msg)
ecs_dim	$FLECS/$FLECS/flecs.c	/^void ecs_dim($/;"	f	typeref:typename:void	signature:(ecs_world_t * world,int32_t entity_count)
ecs_dim	$FLECS/$FLECS/flecs.h	/^void ecs_dim($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_world_t * world,int32_t entity_count)
ecs_doc_get_brief	$FLECS/$FLECS/flecs.c	/^const char* ecs_doc_get_brief($/;"	f	typeref:typename:const char *	signature:(const ecs_world_t * world,ecs_entity_t entity)
ecs_doc_get_brief	$FLECS/$FLECS/flecs.h	/^const char* ecs_doc_get_brief($/;"	p	typeref:typename:FLECS_API const char *	signature:(const ecs_world_t * world,ecs_entity_t entity)
ecs_doc_get_color	$FLECS/$FLECS/flecs.c	/^const char* ecs_doc_get_color($/;"	f	typeref:typename:const char *	signature:(const ecs_world_t * world,ecs_entity_t entity)
ecs_doc_get_color	$FLECS/$FLECS/flecs.h	/^const char* ecs_doc_get_color($/;"	p	typeref:typename:FLECS_API const char *	signature:(const ecs_world_t * world,ecs_entity_t entity)
ecs_doc_get_detail	$FLECS/$FLECS/flecs.c	/^const char* ecs_doc_get_detail($/;"	f	typeref:typename:const char *	signature:(const ecs_world_t * world,ecs_entity_t entity)
ecs_doc_get_detail	$FLECS/$FLECS/flecs.h	/^const char* ecs_doc_get_detail($/;"	p	typeref:typename:FLECS_API const char *	signature:(const ecs_world_t * world,ecs_entity_t entity)
ecs_doc_get_link	$FLECS/$FLECS/flecs.c	/^const char* ecs_doc_get_link($/;"	f	typeref:typename:const char *	signature:(const ecs_world_t * world,ecs_entity_t entity)
ecs_doc_get_link	$FLECS/$FLECS/flecs.h	/^const char* ecs_doc_get_link($/;"	p	typeref:typename:FLECS_API const char *	signature:(const ecs_world_t * world,ecs_entity_t entity)
ecs_doc_get_name	$FLECS/$FLECS/flecs.c	/^const char* ecs_doc_get_name($/;"	f	typeref:typename:const char *	signature:(const ecs_world_t * world,ecs_entity_t entity)
ecs_doc_get_name	$FLECS/$FLECS/flecs.h	/^const char* ecs_doc_get_name($/;"	p	typeref:typename:FLECS_API const char *	signature:(const ecs_world_t * world,ecs_entity_t entity)
ecs_doc_set_brief	$FLECS/$FLECS/flecs.c	/^void ecs_doc_set_brief($/;"	f	typeref:typename:void	signature:(ecs_world_t * world,ecs_entity_t entity,const char * brief)
ecs_doc_set_brief	$FLECS/$FLECS/flecs.h	/^void ecs_doc_set_brief($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_world_t * world,ecs_entity_t entity,const char * description)
ecs_doc_set_color	$FLECS/$FLECS/flecs.c	/^void ecs_doc_set_color($/;"	f	typeref:typename:void	signature:(ecs_world_t * world,ecs_entity_t entity,const char * color)
ecs_doc_set_color	$FLECS/$FLECS/flecs.h	/^void ecs_doc_set_color($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_world_t * world,ecs_entity_t entity,const char * color)
ecs_doc_set_detail	$FLECS/$FLECS/flecs.c	/^void ecs_doc_set_detail($/;"	f	typeref:typename:void	signature:(ecs_world_t * world,ecs_entity_t entity,const char * detail)
ecs_doc_set_detail	$FLECS/$FLECS/flecs.h	/^void ecs_doc_set_detail($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_world_t * world,ecs_entity_t entity,const char * description)
ecs_doc_set_link	$FLECS/$FLECS/flecs.c	/^void ecs_doc_set_link($/;"	f	typeref:typename:void	signature:(ecs_world_t * world,ecs_entity_t entity,const char * link)
ecs_doc_set_link	$FLECS/$FLECS/flecs.h	/^void ecs_doc_set_link($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_world_t * world,ecs_entity_t entity,const char * link)
ecs_doc_set_name	$FLECS/$FLECS/flecs.c	/^void ecs_doc_set_name($/;"	f	typeref:typename:void	signature:(ecs_world_t * world,ecs_entity_t entity,const char * name)
ecs_doc_set_name	$FLECS/$FLECS/flecs.h	/^void ecs_doc_set_name($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_world_t * world,ecs_entity_t entity,const char * name)
ecs_dtor	$FLECS/$FLECS/flecs.h	/^#define ecs_dtor(/;"	d	signature:(type)
ecs_dtor_illegal	$FLECS/$FLECS/flecs.h	/^inline void ecs_dtor_illegal(void *, int32_t, const ecs_type_info_t *ti) {$/;"	f	namespace:flecs::_	typeref:typename:void	signature:(void *,int32_t,const ecs_type_info_t * ti)
ecs_dummy_check	$FLECS/$FLECS/flecs.h	/^#define ecs_dummy_check\\/;"	d
ecs_eis	$FLECS/$FLECS/flecs.c	/^#define ecs_eis(/;"	d	file:	signature:(world)
ecs_emit	$FLECS/$FLECS/flecs.c	/^void ecs_emit($/;"	f	typeref:typename:void	signature:(ecs_world_t * stage,ecs_event_desc_t * desc)
ecs_emit	$FLECS/$FLECS/flecs.h	/^void ecs_emit( $/;"	p	typeref:typename:FLECS_API void	signature:(ecs_world_t * world,ecs_event_desc_t * desc)
ecs_emplace	$FLECS/$FLECS/flecs.h	/^#define ecs_emplace(/;"	d	signature:(world,entity,T)
ecs_emplace_id	$FLECS/$FLECS/flecs.c	/^void* ecs_emplace_id($/;"	f	typeref:typename:void *	signature:(ecs_world_t * world,ecs_entity_t entity,ecs_id_t id)
ecs_emplace_id	$FLECS/$FLECS/flecs.h	/^void* ecs_emplace_id($/;"	p	typeref:typename:FLECS_API void *	signature:(ecs_world_t * world,ecs_entity_t entity,ecs_id_t id)
ecs_emplace_pair	$FLECS/$FLECS/flecs.h	/^#define ecs_emplace_pair(/;"	d	signature:(world,entity,First,second)
ecs_enable	$FLECS/$FLECS/flecs.c	/^void ecs_enable($/;"	f	typeref:typename:void	signature:(ecs_world_t * world,ecs_entity_t entity,bool enabled)
ecs_enable	$FLECS/$FLECS/flecs.h	/^void ecs_enable($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_world_t * world,ecs_entity_t entity,bool enabled)
ecs_enable_component	$FLECS/$FLECS/flecs.h	/^#define ecs_enable_component(/;"	d	signature:(world,entity,T,enable)
ecs_enable_id	$FLECS/$FLECS/flecs.c	/^void ecs_enable_id($/;"	f	typeref:typename:void	signature:(ecs_world_t * world,ecs_entity_t entity,ecs_id_t id,bool enable)
ecs_enable_id	$FLECS/$FLECS/flecs.h	/^void ecs_enable_id($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_world_t * world,ecs_entity_t entity,ecs_id_t id,bool enable)
ecs_enable_pair	$FLECS/$FLECS/flecs.h	/^#define ecs_enable_pair(/;"	d	signature:(world,entity,First,second,enable)
ecs_enable_range_check	$FLECS/$FLECS/flecs.c	/^bool ecs_enable_range_check($/;"	f	typeref:typename:bool	signature:(ecs_world_t * world,bool enable)
ecs_enable_range_check	$FLECS/$FLECS/flecs.h	/^bool ecs_enable_range_check($/;"	p	typeref:typename:FLECS_API bool	signature:(ecs_world_t * world,bool enable)
ecs_enqueue	$FLECS/$FLECS/flecs.c	/^void ecs_enqueue($/;"	f	typeref:typename:void	signature:(ecs_world_t * world,ecs_event_desc_t * desc)
ecs_enqueue	$FLECS/$FLECS/flecs.h	/^void ecs_enqueue($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_world_t * world,ecs_event_desc_t * desc)
ecs_ensure	$FLECS/$FLECS/flecs.c	/^void ecs_ensure($/;"	f	typeref:typename:void	signature:(ecs_world_t * world,ecs_entity_t entity)
ecs_ensure	$FLECS/$FLECS/flecs.h	/^void ecs_ensure($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_world_t * world,ecs_entity_t entity)
ecs_ensure_id	$FLECS/$FLECS/flecs.c	/^void ecs_ensure_id($/;"	f	typeref:typename:void	signature:(ecs_world_t * world,ecs_id_t id)
ecs_ensure_id	$FLECS/$FLECS/flecs.h	/^void ecs_ensure_id($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_world_t * world,ecs_id_t id)
ecs_entity	$FLECS/$FLECS/flecs.h	/^#define ecs_entity(/;"	d	signature:(world,...)
ecs_entity_desc_t	$FLECS/$FLECS/flecs.h	/^} ecs_entity_desc_t;$/;"	t	typeref:struct:ecs_entity_desc_t
ecs_entity_filter_iter_t	$FLECS/$FLECS/flecs.c	/^} ecs_entity_filter_iter_t;$/;"	t	typeref:struct:ecs_entity_filter_iter_t	file:
ecs_entity_filter_t	$FLECS/$FLECS/flecs.c	/^} ecs_entity_filter_t;$/;"	t	typeref:struct:ecs_entity_filter_t	file:
ecs_entity_from_json	$FLECS/$FLECS/flecs.c	/^const char* ecs_entity_from_json($/;"	f	typeref:typename:const char *	signature:(ecs_world_t * world,ecs_entity_t e,const char * json,const ecs_from_json_desc_t * desc_param)
ecs_entity_from_json	$FLECS/$FLECS/flecs.h	/^const char* ecs_entity_from_json($/;"	p	typeref:typename:FLECS_API const char *	signature:(ecs_world_t * world,ecs_entity_t entity,const char * json,const ecs_from_json_desc_t * desc)
ecs_entity_index_page_t	$FLECS/$FLECS/flecs.c	/^} ecs_entity_index_page_t;$/;"	t	typeref:struct:ecs_entity_index_page_t	file:
ecs_entity_index_t	$FLECS/$FLECS/flecs.c	/^} ecs_entity_index_t;$/;"	t	typeref:struct:ecs_entity_index_t	file:
ecs_entity_init	$FLECS/$FLECS/flecs.c	/^ecs_entity_t ecs_entity_init($/;"	f	typeref:typename:ecs_entity_t	signature:(ecs_world_t * world,const ecs_entity_desc_t * desc)
ecs_entity_init	$FLECS/$FLECS/flecs.h	/^ecs_entity_t ecs_entity_init($/;"	p	typeref:typename:FLECS_API ecs_entity_t	signature:(ecs_world_t * world,const ecs_entity_desc_t * desc)
ecs_entity_str	$FLECS/$FLECS/flecs.c	/^char* ecs_entity_str($/;"	f	typeref:typename:char *	signature:(const ecs_world_t * world,ecs_entity_t entity)
ecs_entity_str	$FLECS/$FLECS/flecs.h	/^char* ecs_entity_str($/;"	p	typeref:typename:FLECS_API char *	signature:(const ecs_world_t * world,ecs_entity_t entity)
ecs_entity_t	$FLECS/$FLECS/flecs.h	/^typedef ecs_id_t ecs_entity_t;$/;"	t	typeref:typename:ecs_id_t
ecs_entity_t_comb	$FLECS/$FLECS/flecs.h	/^#define ecs_entity_t_comb(/;"	d	signature:(lo,hi)
ecs_entity_t_hi	$FLECS/$FLECS/flecs.h	/^#define ecs_entity_t_hi(/;"	d	signature:(value)
ecs_entity_t_lo	$FLECS/$FLECS/flecs.h	/^#define ecs_entity_t_lo(/;"	d	signature:(value)
ecs_entity_to_json	$FLECS/$FLECS/flecs.c	/^char* ecs_entity_to_json($/;"	f	typeref:typename:char *	signature:(const ecs_world_t * world,ecs_entity_t entity,const ecs_entity_to_json_desc_t * desc)
ecs_entity_to_json	$FLECS/$FLECS/flecs.h	/^char* ecs_entity_to_json($/;"	p	typeref:typename:FLECS_API char *	signature:(const ecs_world_t * world,ecs_entity_t entity,const ecs_entity_to_json_desc_t * desc)
ecs_entity_to_json_buf	$FLECS/$FLECS/flecs.c	/^int ecs_entity_to_json_buf($/;"	f	typeref:typename:int	signature:(const ecs_world_t * world,ecs_entity_t entity,ecs_strbuf_t * buf,const ecs_entity_to_json_desc_t * desc)
ecs_entity_to_json_buf	$FLECS/$FLECS/flecs.h	/^int ecs_entity_to_json_buf($/;"	p	typeref:typename:FLECS_API int	signature:(const ecs_world_t * world,ecs_entity_t entity,ecs_strbuf_t * buf_out,const ecs_entity_to_json_desc_t * desc)
ecs_entity_to_json_desc_t	$FLECS/$FLECS/flecs.h	/^} ecs_entity_to_json_desc_t;$/;"	t	typeref:struct:ecs_entity_to_json_desc_t
ecs_enum	$FLECS/$FLECS/flecs.h	/^#define ecs_enum(/;"	d	signature:(world,...)
ecs_enum_constant_t	$FLECS/$FLECS/flecs.h	/^} ecs_enum_constant_t;$/;"	t	typeref:struct:ecs_enum_constant_t
ecs_enum_desc_t	$FLECS/$FLECS/flecs.h	/^} ecs_enum_desc_t;$/;"	t	typeref:struct:ecs_enum_desc_t
ecs_enum_init	$FLECS/$FLECS/flecs.c	/^ecs_entity_t ecs_enum_init($/;"	f	typeref:typename:ecs_entity_t	signature:(ecs_world_t * world,const ecs_enum_desc_t * desc)
ecs_enum_init	$FLECS/$FLECS/flecs.h	/^ecs_entity_t ecs_enum_init($/;"	p	typeref:typename:FLECS_API ecs_entity_t	signature:(ecs_world_t * world,const ecs_enum_desc_t * desc)
ecs_err	$FLECS/$FLECS/flecs.h	/^#define ecs_err(...) ecs_err_/;"	d	signature:(...)
ecs_err_	$FLECS/$FLECS/flecs.h	/^#define ecs_err_(/;"	d	signature:(file,line,...)
ecs_event_desc_t	$FLECS/$FLECS/flecs.h	/^} ecs_event_desc_t;$/;"	t	typeref:struct:ecs_event_desc_t
ecs_event_id_record_t	$FLECS/$FLECS/flecs.c	/^} ecs_event_id_record_t;$/;"	t	typeref:struct:ecs_event_id_record_t	file:
ecs_event_record_t	$FLECS/$FLECS/flecs.h	/^} ecs_event_record_t;$/;"	t	typeref:struct:ecs_event_record_t
ecs_exists	$FLECS/$FLECS/flecs.c	/^bool ecs_exists($/;"	f	typeref:typename:bool	signature:(const ecs_world_t * world,ecs_entity_t entity)
ecs_exists	$FLECS/$FLECS/flecs.h	/^bool ecs_exists($/;"	p	typeref:typename:FLECS_API bool	signature:(const ecs_world_t * world,ecs_entity_t entity)
ecs_expr_oper_t	$FLECS/$FLECS/flecs.c	/^} ecs_expr_oper_t;$/;"	t	typeref:enum:ecs_expr_oper_t	file:
ecs_expr_value_t	$FLECS/$FLECS/flecs.c	/^} ecs_expr_value_t;$/;"	t	typeref:struct:ecs_expr_value_t	file:
ecs_expr_var_scope_t	$FLECS/$FLECS/flecs.h	/^} ecs_expr_var_scope_t;$/;"	t	typeref:struct:ecs_expr_var_scope_t
ecs_expr_var_t	$FLECS/$FLECS/flecs.h	/^} ecs_expr_var_t;$/;"	t	typeref:struct:ecs_expr_var_t
ecs_f32_t	$FLECS/$FLECS/flecs.h	/^typedef float ecs_f32_t;$/;"	t	typeref:typename:float
ecs_f64_t	$FLECS/$FLECS/flecs.h	/^typedef double ecs_f64_t;$/;"	t	typeref:typename:double
ecs_fatal	$FLECS/$FLECS/flecs.h	/^#define ecs_fatal(...) ecs_fatal_/;"	d	signature:(...)
ecs_fatal_	$FLECS/$FLECS/flecs.h	/^#define ecs_fatal_(/;"	d	signature:(file,line,...)
ecs_field	$FLECS/$FLECS/flecs.h	/^#define ecs_field(/;"	d	signature:(it,T,index)
ecs_field_column_index	$FLECS/$FLECS/flecs.c	/^int32_t ecs_field_column_index($/;"	f	typeref:typename:int32_t	signature:(const ecs_iter_t * it,int32_t index)
ecs_field_column_index	$FLECS/$FLECS/flecs.h	/^int32_t ecs_field_column_index($/;"	p	typeref:typename:FLECS_API int32_t	signature:(const ecs_iter_t * it,int32_t index)
ecs_field_id	$FLECS/$FLECS/flecs.c	/^ecs_id_t ecs_field_id($/;"	f	typeref:typename:ecs_id_t	signature:(const ecs_iter_t * it,int32_t index)
ecs_field_id	$FLECS/$FLECS/flecs.h	/^ecs_id_t ecs_field_id($/;"	p	typeref:typename:FLECS_API ecs_id_t	signature:(const ecs_iter_t * it,int32_t index)
ecs_field_is_readonly	$FLECS/$FLECS/flecs.c	/^bool ecs_field_is_readonly($/;"	f	typeref:typename:bool	signature:(const ecs_iter_t * it,int32_t index)
ecs_field_is_readonly	$FLECS/$FLECS/flecs.h	/^bool ecs_field_is_readonly($/;"	p	typeref:typename:FLECS_API bool	signature:(const ecs_iter_t * it,int32_t index)
ecs_field_is_self	$FLECS/$FLECS/flecs.c	/^bool ecs_field_is_self($/;"	f	typeref:typename:bool	signature:(const ecs_iter_t * it,int32_t index)
ecs_field_is_self	$FLECS/$FLECS/flecs.h	/^bool ecs_field_is_self($/;"	p	typeref:typename:FLECS_API bool	signature:(const ecs_iter_t * it,int32_t index)
ecs_field_is_set	$FLECS/$FLECS/flecs.c	/^bool ecs_field_is_set($/;"	f	typeref:typename:bool	signature:(const ecs_iter_t * it,int32_t index)
ecs_field_is_set	$FLECS/$FLECS/flecs.h	/^bool ecs_field_is_set($/;"	p	typeref:typename:FLECS_API bool	signature:(const ecs_iter_t * it,int32_t index)
ecs_field_is_writeonly	$FLECS/$FLECS/flecs.c	/^bool ecs_field_is_writeonly($/;"	f	typeref:typename:bool	signature:(const ecs_iter_t * it,int32_t index)
ecs_field_is_writeonly	$FLECS/$FLECS/flecs.h	/^bool ecs_field_is_writeonly($/;"	p	typeref:typename:FLECS_API bool	signature:(const ecs_iter_t * it,int32_t index)
ecs_field_size	$FLECS/$FLECS/flecs.c	/^size_t ecs_field_size($/;"	f	typeref:typename:size_t	signature:(const ecs_iter_t * it,int32_t index)
ecs_field_size	$FLECS/$FLECS/flecs.h	/^size_t ecs_field_size($/;"	p	typeref:typename:FLECS_API size_t	signature:(const ecs_iter_t * it,int32_t index)
ecs_field_src	$FLECS/$FLECS/flecs.c	/^ecs_entity_t ecs_field_src($/;"	f	typeref:typename:ecs_entity_t	signature:(const ecs_iter_t * it,int32_t index)
ecs_field_src	$FLECS/$FLECS/flecs.h	/^ecs_entity_t ecs_field_src($/;"	p	typeref:typename:FLECS_API ecs_entity_t	signature:(const ecs_iter_t * it,int32_t index)
ecs_field_w_size	$FLECS/$FLECS/flecs.c	/^void* ecs_field_w_size($/;"	f	typeref:typename:void *	signature:(const ecs_iter_t * it,size_t size,int32_t index)
ecs_field_w_size	$FLECS/$FLECS/flecs.h	/^void* ecs_field_w_size($/;"	p	typeref:typename:FLECS_API void *	signature:(const ecs_iter_t * it,size_t size,int32_t index)
ecs_filter	$FLECS/$FLECS/flecs.h	/^#define ecs_filter(/;"	d	signature:(world,...)
ecs_filter_chain_iter	$FLECS/$FLECS/flecs.c	/^ecs_iter_t ecs_filter_chain_iter($/;"	f	typeref:typename:ecs_iter_t	signature:(const ecs_iter_t * chain_it,const ecs_filter_t * filter)
ecs_filter_chain_iter	$FLECS/$FLECS/flecs.h	/^ecs_iter_t ecs_filter_chain_iter($/;"	p	typeref:typename:FLECS_API ecs_iter_t	signature:(const ecs_iter_t * it,const ecs_filter_t * filter)
ecs_filter_copy	$FLECS/$FLECS/flecs.c	/^void ecs_filter_copy($/;"	f	typeref:typename:void	signature:(ecs_filter_t * dst,const ecs_filter_t * src)
ecs_filter_copy	$FLECS/$FLECS/flecs.h	/^void ecs_filter_copy($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_filter_t * dst,const ecs_filter_t * src)
ecs_filter_desc_t	$FLECS/$FLECS/flecs.h	/^} ecs_filter_desc_t;$/;"	t	typeref:struct:ecs_filter_desc_t
ecs_filter_finalize	$FLECS/$FLECS/flecs.c	/^int ecs_filter_finalize($/;"	f	typeref:typename:int	signature:(const ecs_world_t * world,ecs_filter_t * f)
ecs_filter_finalize	$FLECS/$FLECS/flecs.h	/^int ecs_filter_finalize($/;"	p	typeref:typename:FLECS_API int	signature:(const ecs_world_t * world,ecs_filter_t * filter)
ecs_filter_finalize_ctx_t	$FLECS/$FLECS/flecs.c	/^} ecs_filter_finalize_ctx_t;$/;"	t	typeref:struct:__anonb2bcda230308	file:
ecs_filter_find_this_var	$FLECS/$FLECS/flecs.c	/^int32_t ecs_filter_find_this_var($/;"	f	typeref:typename:int32_t	signature:(const ecs_filter_t * filter)
ecs_filter_find_this_var	$FLECS/$FLECS/flecs.h	/^int32_t ecs_filter_find_this_var($/;"	p	typeref:typename:FLECS_API int32_t	signature:(const ecs_filter_t * filter)
ecs_filter_fini	$FLECS/$FLECS/flecs.c	/^void ecs_filter_fini($/;"	f	typeref:typename:void	signature:(ecs_filter_t * filter)
ecs_filter_fini	$FLECS/$FLECS/flecs.h	/^void ecs_filter_fini($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_filter_t * filter)
ecs_filter_init	$FLECS/$FLECS/flecs.c	/^ecs_filter_t* ecs_filter_init($/;"	f	typeref:typename:ecs_filter_t *	signature:(ecs_world_t * world,const ecs_filter_desc_t * desc)
ecs_filter_init	$FLECS/$FLECS/flecs.h	/^ecs_filter_t * ecs_filter_init($/;"	p	typeref:typename:FLECS_API ecs_filter_t *	signature:(ecs_world_t * world,const ecs_filter_desc_t * desc)
ecs_filter_iter	$FLECS/$FLECS/flecs.c	/^ecs_iter_t ecs_filter_iter($/;"	f	typeref:typename:ecs_iter_t	signature:(const ecs_world_t * stage,const ecs_filter_t * filter)
ecs_filter_iter	$FLECS/$FLECS/flecs.h	/^ecs_iter_t ecs_filter_iter($/;"	p	typeref:typename:FLECS_API ecs_iter_t	signature:(const ecs_world_t * world,const ecs_filter_t * filter)
ecs_filter_iter_t	$FLECS/$FLECS/flecs.h	/^} ecs_filter_iter_t;$/;"	t	typeref:struct:ecs_filter_iter_t
ecs_filter_move	$FLECS/$FLECS/flecs.c	/^void ecs_filter_move($/;"	f	typeref:typename:void	signature:(ecs_filter_t * dst,ecs_filter_t * src)
ecs_filter_move	$FLECS/$FLECS/flecs.h	/^void ecs_filter_move($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_filter_t * dst,ecs_filter_t * src)
ecs_filter_next	$FLECS/$FLECS/flecs.c	/^bool ecs_filter_next($/;"	f	typeref:typename:bool	signature:(ecs_iter_t * it)
ecs_filter_next	$FLECS/$FLECS/flecs.h	/^bool ecs_filter_next($/;"	p	typeref:typename:FLECS_API bool	signature:(ecs_iter_t * it)
ecs_filter_next_instanced	$FLECS/$FLECS/flecs.c	/^bool ecs_filter_next_instanced($/;"	f	typeref:typename:bool	signature:(ecs_iter_t * it)
ecs_filter_next_instanced	$FLECS/$FLECS/flecs.h	/^bool ecs_filter_next_instanced($/;"	p	typeref:typename:FLECS_API bool	signature:(ecs_iter_t * it)
ecs_filter_pivot_term	$FLECS/$FLECS/flecs.c	/^int32_t ecs_filter_pivot_term($/;"	f	typeref:typename:int32_t	signature:(const ecs_world_t * world,const ecs_filter_t * filter)
ecs_filter_pivot_term	$FLECS/$FLECS/flecs.h	/^int32_t ecs_filter_pivot_term($/;"	p	typeref:typename:FLECS_API int32_t	signature:(const ecs_world_t * world,const ecs_filter_t * filter)
ecs_filter_str	$FLECS/$FLECS/flecs.c	/^char* ecs_filter_str($/;"	f	typeref:typename:char *	signature:(const ecs_world_t * world,const ecs_filter_t * filter)
ecs_filter_str	$FLECS/$FLECS/flecs.h	/^char* ecs_filter_str($/;"	p	typeref:typename:FLECS_API char *	signature:(const ecs_world_t * world,const ecs_filter_t * filter)
ecs_filter_t	$FLECS/$FLECS/flecs.h	/^typedef struct ecs_filter_t ecs_filter_t;$/;"	t	typeref:struct:ecs_filter_t
ecs_filter_t_magic	$FLECS/$FLECS/flecs.h	/^#define ecs_filter_t_magic /;"	d
ecs_filter_t_mixins	$FLECS/$FLECS/flecs.c	/^ecs_mixins_t ecs_filter_t_mixins = {$/;"	v	typeref:typename:ecs_mixins_t
ecs_filter_t_tag	$FLECS/$FLECS/flecs.c	/^#define ecs_filter_t_tag /;"	d	file:
ecs_fini	$FLECS/$FLECS/flecs.c	/^int ecs_fini($/;"	f	typeref:typename:int	signature:(ecs_world_t * world)
ecs_fini	$FLECS/$FLECS/flecs.h	/^int ecs_fini($/;"	p	typeref:typename:FLECS_API int	signature:(ecs_world_t * world)
ecs_fini_action_t	$FLECS/$FLECS/flecs.h	/^typedef void (*ecs_fini_action_t)($/;"	t	typeref:typename:void (*)(ecs_world_t * world,void * ctx)
ecs_flags16_t	$FLECS/$FLECS/flecs.h	/^typedef uint16_t ecs_flags16_t;$/;"	t	typeref:typename:uint16_t
ecs_flags32_t	$FLECS/$FLECS/flecs.h	/^typedef uint32_t ecs_flags32_t;$/;"	t	typeref:typename:uint32_t
ecs_flags64_t	$FLECS/$FLECS/flecs.h	/^typedef uint64_t ecs_flags64_t;$/;"	t	typeref:typename:uint64_t
ecs_flags8_t	$FLECS/$FLECS/flecs.h	/^typedef uint8_t ecs_flags8_t;$/;"	t	typeref:typename:uint8_t
ecs_flatten	$FLECS/$FLECS/flecs.c	/^void ecs_flatten($/;"	f	typeref:typename:void	signature:(ecs_world_t * world,ecs_id_t pair,const ecs_flatten_desc_t * desc)
ecs_flatten	$FLECS/$FLECS/flecs.h	/^void ecs_flatten($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_world_t * world,ecs_id_t pair,const ecs_flatten_desc_t * desc)
ecs_flatten_desc_t	$FLECS/$FLECS/flecs.h	/^} ecs_flatten_desc_t;$/;"	t	typeref:struct:ecs_flatten_desc_t
ecs_float_t	$FLECS/$FLECS/flecs.h	/^#define ecs_float_t /;"	d
ecs_frame_begin	$FLECS/$FLECS/flecs.c	/^ecs_ftime_t ecs_frame_begin($/;"	f	typeref:typename:ecs_ftime_t	signature:(ecs_world_t * world,ecs_ftime_t user_delta_time)
ecs_frame_begin	$FLECS/$FLECS/flecs.h	/^ecs_ftime_t ecs_frame_begin($/;"	p	typeref:typename:FLECS_API ecs_ftime_t	signature:(ecs_world_t * world,ecs_ftime_t delta_time)
ecs_frame_end	$FLECS/$FLECS/flecs.c	/^void ecs_frame_end($/;"	f	typeref:typename:void	signature:(ecs_world_t * world)
ecs_frame_end	$FLECS/$FLECS/flecs.h	/^void ecs_frame_end($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_world_t * world)
ecs_from_json_desc_t	$FLECS/$FLECS/flecs.h	/^} ecs_from_json_desc_t;$/;"	t	typeref:struct:ecs_from_json_desc_t
ecs_ftime_t	$FLECS/$FLECS/flecs.h	/^#define ecs_ftime_t /;"	d
ecs_ftoa	$FLECS/$FLECS/flecs.c	/^char * ecs_ftoa($/;"	p	typeref:typename:char *	file:	signature:(double f,char * buf,int precision)
ecs_gauge_t	$FLECS/$FLECS/flecs.h	/^} ecs_gauge_t;$/;"	t	typeref:struct:ecs_gauge_t
ecs_get	$FLECS/$FLECS/flecs.h	/^#define ecs_get(/;"	d	signature:(world,entity,T)
ecs_get_alert	$FLECS/$FLECS/flecs.c	/^ecs_entity_t ecs_get_alert($/;"	f	typeref:typename:ecs_entity_t	signature:(const ecs_world_t * world,ecs_entity_t entity,ecs_entity_t alert)
ecs_get_alert	$FLECS/$FLECS/flecs.h	/^ecs_entity_t ecs_get_alert($/;"	p	typeref:typename:FLECS_API ecs_entity_t	signature:(const ecs_world_t * world,ecs_entity_t entity,ecs_entity_t alert)
ecs_get_alert_count	$FLECS/$FLECS/flecs.c	/^int32_t ecs_get_alert_count($/;"	f	typeref:typename:int32_t	signature:(const ecs_world_t * world,ecs_entity_t entity,ecs_entity_t alert)
ecs_get_alert_count	$FLECS/$FLECS/flecs.h	/^int32_t ecs_get_alert_count($/;"	p	typeref:typename:FLECS_API int32_t	signature:(const ecs_world_t * world,ecs_entity_t entity,ecs_entity_t alert)
ecs_get_alive	$FLECS/$FLECS/flecs.c	/^ecs_entity_t ecs_get_alive($/;"	f	typeref:typename:ecs_entity_t	signature:(const ecs_world_t * world,ecs_entity_t entity)
ecs_get_alive	$FLECS/$FLECS/flecs.h	/^ecs_entity_t ecs_get_alive($/;"	p	typeref:typename:FLECS_API ecs_entity_t	signature:(const ecs_world_t * world,ecs_entity_t e)
ecs_get_binding_ctx	$FLECS/$FLECS/flecs.c	/^void* ecs_get_binding_ctx($/;"	f	typeref:typename:void *	signature:(const ecs_world_t * world)
ecs_get_binding_ctx	$FLECS/$FLECS/flecs.h	/^void* ecs_get_binding_ctx($/;"	p	typeref:typename:FLECS_API void *	signature:(const ecs_world_t * world)
ecs_get_ctx	$FLECS/$FLECS/flecs.c	/^void* ecs_get_ctx($/;"	f	typeref:typename:void *	signature:(const ecs_world_t * world)
ecs_get_ctx	$FLECS/$FLECS/flecs.h	/^void* ecs_get_ctx($/;"	p	typeref:typename:FLECS_API void *	signature:(const ecs_world_t * world)
ecs_get_depth	$FLECS/$FLECS/flecs.c	/^int32_t ecs_get_depth($/;"	f	typeref:typename:int32_t	signature:(const ecs_world_t * world,ecs_entity_t entity,ecs_entity_t rel)
ecs_get_depth	$FLECS/$FLECS/flecs.h	/^int32_t ecs_get_depth($/;"	p	typeref:typename:FLECS_API int32_t	signature:(const ecs_world_t * world,ecs_entity_t entity,ecs_entity_t rel)
ecs_get_dtor	$FLECS/$FLECS/flecs.c	/^ecs_poly_dtor_t* ecs_get_dtor($/;"	p	typeref:typename:ecs_poly_dtor_t *	file:	signature:(const ecs_poly_t * poly)
ecs_get_entity	$FLECS/$FLECS/flecs.c	/^ecs_entity_t ecs_get_entity($/;"	f	typeref:typename:ecs_entity_t	signature:(const ecs_poly_t * poly)
ecs_get_entity	$FLECS/$FLECS/flecs.h	/^ecs_entity_t ecs_get_entity($/;"	p	typeref:typename:FLECS_API ecs_entity_t	signature:(const ecs_poly_t * poly)
ecs_get_fullpath	$FLECS/$FLECS/flecs.h	/^#define ecs_get_fullpath(/;"	d	signature:(world,child)
ecs_get_fullpath_buf	$FLECS/$FLECS/flecs.h	/^#define ecs_get_fullpath_buf(/;"	d	signature:(world,child,buf)
ecs_get_hooks	$FLECS/$FLECS/flecs.h	/^#define ecs_get_hooks(/;"	d	signature:(world,T)
ecs_get_hooks_id	$FLECS/$FLECS/flecs.c	/^const ecs_type_hooks_t* ecs_get_hooks_id($/;"	f	typeref:typename:const ecs_type_hooks_t *	signature:(ecs_world_t * world,ecs_entity_t id)
ecs_get_hooks_id	$FLECS/$FLECS/flecs.h	/^const ecs_type_hooks_t* ecs_get_hooks_id($/;"	p	typeref:typename:FLECS_API const ecs_type_hooks_t *	signature:(ecs_world_t * world,ecs_entity_t id)
ecs_get_id	$FLECS/$FLECS/flecs.c	/^const void* ecs_get_id($/;"	f	typeref:typename:const void *	signature:(const ecs_world_t * world,ecs_entity_t entity,ecs_id_t id)
ecs_get_id	$FLECS/$FLECS/flecs.h	/^const void* ecs_get_id($/;"	p	typeref:typename:FLECS_API const void *	signature:(const ecs_world_t * world,ecs_entity_t entity,ecs_id_t id)
ecs_get_interval	$FLECS/$FLECS/flecs.c	/^ecs_ftime_t ecs_get_interval($/;"	f	typeref:typename:ecs_ftime_t	signature:(const ecs_world_t * world,ecs_entity_t timer)
ecs_get_interval	$FLECS/$FLECS/flecs.h	/^ecs_ftime_t ecs_get_interval($/;"	p	typeref:typename:FLECS_API ecs_ftime_t	signature:(const ecs_world_t * world,ecs_entity_t tick_source)
ecs_get_iterable	$FLECS/$FLECS/flecs.c	/^ecs_iterable_t* ecs_get_iterable($/;"	p	typeref:typename:ecs_iterable_t *	file:	signature:(const ecs_poly_t * poly)
ecs_get_lookup_path	$FLECS/$FLECS/flecs.c	/^ecs_entity_t* ecs_get_lookup_path($/;"	f	typeref:typename:ecs_entity_t *	signature:(const ecs_world_t * world)
ecs_get_lookup_path	$FLECS/$FLECS/flecs.h	/^ecs_entity_t* ecs_get_lookup_path($/;"	p	typeref:typename:FLECS_API ecs_entity_t *	signature:(const ecs_world_t * world)
ecs_get_max_id	$FLECS/$FLECS/flecs.c	/^ecs_entity_t ecs_get_max_id($/;"	f	typeref:typename:ecs_entity_t	signature:(const ecs_world_t * world)
ecs_get_max_id	$FLECS/$FLECS/flecs.h	/^ecs_entity_t ecs_get_max_id($/;"	p	typeref:typename:FLECS_API ecs_entity_t	signature:(const ecs_world_t * world)
ecs_get_mut	$FLECS/$FLECS/flecs.h	/^#define ecs_get_mut(/;"	d	signature:(world,entity,T)
ecs_get_mut_id	$FLECS/$FLECS/flecs.c	/^void* ecs_get_mut_id($/;"	f	typeref:typename:void *	signature:(ecs_world_t * world,ecs_entity_t entity,ecs_id_t id)
ecs_get_mut_id	$FLECS/$FLECS/flecs.h	/^void* ecs_get_mut_id($/;"	p	typeref:typename:FLECS_API void *	signature:(ecs_world_t * world,ecs_entity_t entity,ecs_id_t id)
ecs_get_mut_modified_id	$FLECS/$FLECS/flecs.c	/^void* ecs_get_mut_modified_id($/;"	f	typeref:typename:void *	signature:(ecs_world_t * world,ecs_entity_t entity,ecs_id_t id)
ecs_get_mut_modified_id	$FLECS/$FLECS/flecs.h	/^void* ecs_get_mut_modified_id($/;"	p	typeref:typename:FLECS_API void *	signature:(ecs_world_t * world,ecs_entity_t entity,ecs_id_t id)
ecs_get_mut_pair	$FLECS/$FLECS/flecs.h	/^#define ecs_get_mut_pair(/;"	d	signature:(world,subject,First,second)
ecs_get_mut_pair_object	$FLECS/$FLECS/flecs.h	/^#define ecs_get_mut_pair_object /;"	d
ecs_get_mut_pair_second	$FLECS/$FLECS/flecs.h	/^#define ecs_get_mut_pair_second(/;"	d	signature:(world,subject,first,Second)
ecs_get_name	$FLECS/$FLECS/flecs.c	/^const char* ecs_get_name($/;"	f	typeref:typename:const char *	signature:(const ecs_world_t * world,ecs_entity_t entity)
ecs_get_name	$FLECS/$FLECS/flecs.h	/^const char* ecs_get_name($/;"	p	typeref:typename:FLECS_API const char *	signature:(const ecs_world_t * world,ecs_entity_t entity)
ecs_get_observable	$FLECS/$FLECS/flecs.c	/^ecs_observable_t* ecs_get_observable($/;"	p	typeref:typename:ecs_observable_t *	file:	signature:(const ecs_poly_t * object)
ecs_get_pair	$FLECS/$FLECS/flecs.h	/^#define ecs_get_pair(/;"	d	signature:(world,subject,First,second)
ecs_get_pair_object	$FLECS/$FLECS/flecs.h	/^#define ecs_get_pair_object /;"	d
ecs_get_pair_second	$FLECS/$FLECS/flecs.h	/^#define ecs_get_pair_second(/;"	d	signature:(world,subject,first,Second)
ecs_get_parent	$FLECS/$FLECS/flecs.c	/^ecs_entity_t ecs_get_parent($/;"	f	typeref:typename:ecs_entity_t	signature:(const ecs_world_t * world,ecs_entity_t entity)
ecs_get_parent	$FLECS/$FLECS/flecs.h	/^ecs_entity_t ecs_get_parent($/;"	p	typeref:typename:FLECS_API ecs_entity_t	signature:(const ecs_world_t * world,ecs_entity_t entity)
ecs_get_path	$FLECS/$FLECS/flecs.h	/^#define ecs_get_path(/;"	d	signature:(world,parent,child)
ecs_get_path_w_sep	$FLECS/$FLECS/flecs.c	/^char* ecs_get_path_w_sep($/;"	f	typeref:typename:char *	signature:(const ecs_world_t * world,ecs_entity_t parent,ecs_entity_t child,const char * sep,const char * prefix)
ecs_get_path_w_sep	$FLECS/$FLECS/flecs.h	/^char* ecs_get_path_w_sep($/;"	p	typeref:typename:FLECS_API char *	signature:(const ecs_world_t * world,ecs_entity_t parent,ecs_entity_t child,const char * sep,const char * prefix)
ecs_get_path_w_sep_buf	$FLECS/$FLECS/flecs.c	/^void ecs_get_path_w_sep_buf($/;"	f	typeref:typename:void	signature:(const ecs_world_t * world,ecs_entity_t parent,ecs_entity_t child,const char * sep,const char * prefix,ecs_strbuf_t * buf)
ecs_get_path_w_sep_buf	$FLECS/$FLECS/flecs.h	/^void ecs_get_path_w_sep_buf($/;"	p	typeref:typename:void	signature:(const ecs_world_t * world,ecs_entity_t parent,ecs_entity_t child,const char * sep,const char * prefix,ecs_strbuf_t * buf)
ecs_get_pipeline	$FLECS/$FLECS/flecs.c	/^ecs_entity_t ecs_get_pipeline($/;"	f	typeref:typename:ecs_entity_t	signature:(const ecs_world_t * world)
ecs_get_pipeline	$FLECS/$FLECS/flecs.h	/^ecs_entity_t ecs_get_pipeline($/;"	p	typeref:typename:FLECS_API ecs_entity_t	signature:(const ecs_world_t * world)
ecs_get_scope	$FLECS/$FLECS/flecs.c	/^ecs_entity_t ecs_get_scope($/;"	f	typeref:typename:ecs_entity_t	signature:(const ecs_world_t * world)
ecs_get_scope	$FLECS/$FLECS/flecs.h	/^ecs_entity_t ecs_get_scope($/;"	p	typeref:typename:FLECS_API ecs_entity_t	signature:(const ecs_world_t * world)
ecs_get_stage	$FLECS/$FLECS/flecs.c	/^ecs_world_t* ecs_get_stage($/;"	f	typeref:typename:ecs_world_t *	signature:(const ecs_world_t * world,int32_t stage_id)
ecs_get_stage	$FLECS/$FLECS/flecs.h	/^ecs_world_t* ecs_get_stage($/;"	p	typeref:typename:FLECS_API ecs_world_t *	signature:(const ecs_world_t * world,int32_t stage_id)
ecs_get_stage_count	$FLECS/$FLECS/flecs.c	/^int32_t ecs_get_stage_count($/;"	f	typeref:typename:int32_t	signature:(const ecs_world_t * world)
ecs_get_stage_count	$FLECS/$FLECS/flecs.h	/^int32_t ecs_get_stage_count($/;"	p	typeref:typename:FLECS_API int32_t	signature:(const ecs_world_t * world)
ecs_get_stage_id	$FLECS/$FLECS/flecs.c	/^int32_t ecs_get_stage_id($/;"	f	typeref:typename:int32_t	signature:(const ecs_world_t * world)
ecs_get_stage_id	$FLECS/$FLECS/flecs.h	/^int32_t ecs_get_stage_id($/;"	p	typeref:typename:FLECS_API int32_t	signature:(const ecs_world_t * world)
ecs_get_symbol	$FLECS/$FLECS/flecs.c	/^const char* ecs_get_symbol($/;"	f	typeref:typename:const char *	signature:(const ecs_world_t * world,ecs_entity_t entity)
ecs_get_symbol	$FLECS/$FLECS/flecs.h	/^const char* ecs_get_symbol($/;"	p	typeref:typename:FLECS_API const char *	signature:(const ecs_world_t * world,ecs_entity_t entity)
ecs_get_table	$FLECS/$FLECS/flecs.c	/^ecs_table_t* ecs_get_table($/;"	f	typeref:typename:ecs_table_t *	signature:(const ecs_world_t * world,ecs_entity_t entity)
ecs_get_table	$FLECS/$FLECS/flecs.h	/^ecs_table_t* ecs_get_table($/;"	p	typeref:typename:FLECS_API ecs_table_t *	signature:(const ecs_world_t * world,ecs_entity_t entity)
ecs_get_target	$FLECS/$FLECS/flecs.c	/^ecs_entity_t ecs_get_target($/;"	f	typeref:typename:ecs_entity_t	signature:(const ecs_world_t * world,ecs_entity_t entity,ecs_entity_t rel,int32_t index)
ecs_get_target	$FLECS/$FLECS/flecs.h	/^ecs_entity_t ecs_get_target($/;"	p	typeref:typename:FLECS_API ecs_entity_t	signature:(const ecs_world_t * world,ecs_entity_t entity,ecs_entity_t rel,int32_t index)
ecs_get_target_for_id	$FLECS/$FLECS/flecs.c	/^ecs_entity_t ecs_get_target_for_id($/;"	f	typeref:typename:ecs_entity_t	signature:(const ecs_world_t * world,ecs_entity_t entity,ecs_entity_t rel,ecs_id_t id)
ecs_get_target_for_id	$FLECS/$FLECS/flecs.h	/^ecs_entity_t ecs_get_target_for_id($/;"	p	typeref:typename:FLECS_API ecs_entity_t	signature:(const ecs_world_t * world,ecs_entity_t entity,ecs_entity_t rel,ecs_id_t id)
ecs_get_timeout	$FLECS/$FLECS/flecs.c	/^ecs_ftime_t ecs_get_timeout($/;"	f	typeref:typename:ecs_ftime_t	signature:(const ecs_world_t * world,ecs_entity_t timer)
ecs_get_timeout	$FLECS/$FLECS/flecs.h	/^ecs_ftime_t ecs_get_timeout($/;"	p	typeref:typename:FLECS_API ecs_ftime_t	signature:(const ecs_world_t * world,ecs_entity_t tick_source)
ecs_get_type	$FLECS/$FLECS/flecs.c	/^const ecs_type_t* ecs_get_type($/;"	f	typeref:typename:const ecs_type_t *	signature:(const ecs_world_t * world,ecs_entity_t entity)
ecs_get_type	$FLECS/$FLECS/flecs.h	/^const ecs_type_t* ecs_get_type($/;"	p	typeref:typename:FLECS_API const ecs_type_t *	signature:(const ecs_world_t * world,ecs_entity_t entity)
ecs_get_type_info	$FLECS/$FLECS/flecs.c	/^const ecs_type_info_t* ecs_get_type_info($/;"	f	typeref:typename:const ecs_type_info_t *	signature:(const ecs_world_t * world,ecs_id_t id)
ecs_get_type_info	$FLECS/$FLECS/flecs.h	/^const ecs_type_info_t* ecs_get_type_info($/;"	p	typeref:typename:FLECS_API const ecs_type_info_t *	signature:(const ecs_world_t * world,ecs_id_t id)
ecs_get_typeid	$FLECS/$FLECS/flecs.c	/^ecs_entity_t ecs_get_typeid($/;"	f	typeref:typename:ecs_entity_t	signature:(const ecs_world_t * world,ecs_id_t id)
ecs_get_typeid	$FLECS/$FLECS/flecs.h	/^ecs_entity_t ecs_get_typeid($/;"	p	typeref:typename:FLECS_API ecs_entity_t	signature:(const ecs_world_t * world,ecs_id_t id)
ecs_get_with	$FLECS/$FLECS/flecs.c	/^ecs_id_t ecs_get_with($/;"	f	typeref:typename:ecs_id_t	signature:(const ecs_world_t * world)
ecs_get_with	$FLECS/$FLECS/flecs.h	/^ecs_id_t ecs_get_with($/;"	p	typeref:typename:FLECS_API ecs_id_t	signature:(const ecs_world_t * world)
ecs_get_world	$FLECS/$FLECS/flecs.c	/^const ecs_world_t* ecs_get_world($/;"	f	typeref:typename:const ecs_world_t *	signature:(const ecs_poly_t * poly)
ecs_get_world	$FLECS/$FLECS/flecs.h	/^const ecs_world_t* ecs_get_world($/;"	p	typeref:typename:FLECS_API const ecs_world_t *	signature:(const ecs_poly_t * poly)
ecs_get_world_info	$FLECS/$FLECS/flecs.c	/^const ecs_world_info_t* ecs_get_world_info($/;"	f	typeref:typename:const ecs_world_info_t *	signature:(const ecs_world_t * world)
ecs_get_world_info	$FLECS/$FLECS/flecs.h	/^const ecs_world_info_t* ecs_get_world_info($/;"	p	typeref:typename:FLECS_API const ecs_world_info_t *	signature:(const ecs_world_t * world)
ecs_graph_edge_hdr_t	$FLECS/$FLECS/flecs.c	/^} ecs_graph_edge_hdr_t;$/;"	t	typeref:struct:ecs_graph_edge_hdr_t	file:
ecs_graph_edge_t	$FLECS/$FLECS/flecs.c	/^} ecs_graph_edge_t;$/;"	t	typeref:struct:ecs_graph_edge_t	file:
ecs_graph_edges_t	$FLECS/$FLECS/flecs.c	/^} ecs_graph_edges_t;$/;"	t	typeref:struct:ecs_graph_edges_t	file:
ecs_graph_node_t	$FLECS/$FLECS/flecs.c	/^} ecs_graph_node_t;$/;"	t	typeref:struct:ecs_graph_node_t	file:
ecs_group_by_action_t	$FLECS/$FLECS/flecs.h	/^typedef uint64_t (*ecs_group_by_action_t)($/;"	t	typeref:typename:uint64_t (*)(ecs_world_t * world,ecs_table_t * table,ecs_id_t group_id,void * ctx)
ecs_group_create_action_t	$FLECS/$FLECS/flecs.h	/^typedef void* (*ecs_group_create_action_t)($/;"	t	typeref:typename:void * (*)(ecs_world_t * world,uint64_t group_id,void * group_by_ctx)
ecs_group_delete_action_t	$FLECS/$FLECS/flecs.h	/^typedef void (*ecs_group_delete_action_t)($/;"	t	typeref:typename:void (*)(ecs_world_t * world,uint64_t group_id,void * group_ctx,void * group_by_ctx)
ecs_has	$FLECS/$FLECS/flecs.h	/^#define ecs_has(/;"	d	signature:(world,entity,T)
ecs_has_id	$FLECS/$FLECS/flecs.c	/^bool ecs_has_id($/;"	f	typeref:typename:bool	signature:(const ecs_world_t * world,ecs_entity_t entity,ecs_id_t id)
ecs_has_id	$FLECS/$FLECS/flecs.h	/^bool ecs_has_id($/;"	p	typeref:typename:FLECS_API bool	signature:(const ecs_world_t * world,ecs_entity_t entity,ecs_id_t id)
ecs_has_pair	$FLECS/$FLECS/flecs.h	/^#define ecs_has_pair(/;"	d	signature:(world,entity,first,second)
ecs_hash_value_action_t	$FLECS/$FLECS/flecs.h	/^typedef uint64_t (*ecs_hash_value_action_t)($/;"	t	typeref:typename:uint64_t (*)(const void * ptr)
ecs_hashed_string_t	$FLECS/$FLECS/flecs.c	/^} ecs_hashed_string_t;$/;"	t	typeref:struct:ecs_hashed_string_t	file:
ecs_hashmap_t	$FLECS/$FLECS/flecs.h	/^} ecs_hashmap_t;$/;"	t	typeref:struct:__anonb2bcda280408
ecs_header_t	$FLECS/$FLECS/flecs.h	/^} ecs_header_t;$/;"	t	typeref:struct:ecs_header_t
ecs_hm_bucket_t	$FLECS/$FLECS/flecs.h	/^} ecs_hm_bucket_t;$/;"	t	typeref:struct:__anonb2bcda280308
ecs_http_busy_count	$FLECS/$FLECS/flecs.c	/^int64_t ecs_http_busy_count = 0;$/;"	v	typeref:typename:int64_t
ecs_http_connection_impl_t	$FLECS/$FLECS/flecs.c	/^} ecs_http_connection_impl_t;$/;"	t	typeref:struct:__anonb2bcda230808	file:
ecs_http_connection_t	$FLECS/$FLECS/flecs.h	/^} ecs_http_connection_t;$/;"	t	typeref:struct:__anonb2bcda280808
ecs_http_fragment_t	$FLECS/$FLECS/flecs.c	/^} ecs_http_fragment_t;$/;"	t	typeref:struct:__anonb2bcda230708	file:
ecs_http_get_header	$FLECS/$FLECS/flecs.c	/^const char* ecs_http_get_header($/;"	f	typeref:typename:const char *	signature:(const ecs_http_request_t * req,const char * name)
ecs_http_get_header	$FLECS/$FLECS/flecs.h	/^const char* ecs_http_get_header($/;"	p	typeref:typename:FLECS_API const char *	signature:(const ecs_http_request_t * req,const char * name)
ecs_http_get_param	$FLECS/$FLECS/flecs.c	/^const char* ecs_http_get_param($/;"	f	typeref:typename:const char *	signature:(const ecs_http_request_t * req,const char * name)
ecs_http_get_param	$FLECS/$FLECS/flecs.h	/^const char* ecs_http_get_param($/;"	p	typeref:typename:FLECS_API const char *	signature:(const ecs_http_request_t * req,const char * name)
ecs_http_key_value_t	$FLECS/$FLECS/flecs.h	/^} ecs_http_key_value_t;$/;"	t	typeref:struct:__anonb2bcda280908
ecs_http_method_t	$FLECS/$FLECS/flecs.h	/^} ecs_http_method_t;$/;"	t	typeref:enum:__anonb2bcda280a03
ecs_http_reply_action_t	$FLECS/$FLECS/flecs.h	/^typedef bool (*ecs_http_reply_action_t)($/;"	t	typeref:typename:bool (*)(const ecs_http_request_t * request,ecs_http_reply_t * reply,void * ctx)
ecs_http_reply_t	$FLECS/$FLECS/flecs.h	/^} ecs_http_reply_t;$/;"	t	typeref:struct:__anonb2bcda280c08
ecs_http_request_entry_t	$FLECS/$FLECS/flecs.c	/^} ecs_http_request_entry_t;$/;"	t	typeref:struct:ecs_http_request_entry_t	file:
ecs_http_request_handled_error_count	$FLECS/$FLECS/flecs.c	/^int64_t ecs_http_request_handled_error_count = 0;$/;"	v	typeref:typename:int64_t
ecs_http_request_handled_ok_count	$FLECS/$FLECS/flecs.c	/^int64_t ecs_http_request_handled_ok_count = 0;$/;"	v	typeref:typename:int64_t
ecs_http_request_impl_t	$FLECS/$FLECS/flecs.c	/^} ecs_http_request_impl_t;$/;"	t	typeref:struct:__anonb2bcda230908	file:
ecs_http_request_invalid_count	$FLECS/$FLECS/flecs.c	/^int64_t ecs_http_request_invalid_count = 0;$/;"	v	typeref:typename:int64_t
ecs_http_request_key_t	$FLECS/$FLECS/flecs.c	/^} ecs_http_request_key_t;$/;"	t	typeref:struct:ecs_http_request_key_t	file:
ecs_http_request_not_handled_count	$FLECS/$FLECS/flecs.c	/^int64_t ecs_http_request_not_handled_count = 0;$/;"	v	typeref:typename:int64_t
ecs_http_request_preflight_count	$FLECS/$FLECS/flecs.c	/^int64_t ecs_http_request_preflight_count = 0;$/;"	v	typeref:typename:int64_t
ecs_http_request_received_count	$FLECS/$FLECS/flecs.c	/^int64_t ecs_http_request_received_count = 0;$/;"	v	typeref:typename:int64_t
ecs_http_request_t	$FLECS/$FLECS/flecs.h	/^} ecs_http_request_t;$/;"	t	typeref:struct:__anonb2bcda280b08
ecs_http_send_error_count	$FLECS/$FLECS/flecs.c	/^int64_t ecs_http_send_error_count = 0;$/;"	v	typeref:typename:int64_t
ecs_http_send_ok_count	$FLECS/$FLECS/flecs.c	/^int64_t ecs_http_send_ok_count = 0;$/;"	v	typeref:typename:int64_t
ecs_http_send_queue_t	$FLECS/$FLECS/flecs.c	/^} ecs_http_send_queue_t;$/;"	t	typeref:struct:ecs_http_send_queue_t	file:
ecs_http_send_request_t	$FLECS/$FLECS/flecs.c	/^} ecs_http_send_request_t;$/;"	t	typeref:struct:ecs_http_send_request_t	file:
ecs_http_server_ctx	$FLECS/$FLECS/flecs.c	/^void* ecs_http_server_ctx($/;"	f	typeref:typename:void *	signature:(ecs_http_server_t * srv)
ecs_http_server_ctx	$FLECS/$FLECS/flecs.h	/^void* ecs_http_server_ctx($/;"	p	typeref:typename:FLECS_API void *	signature:(ecs_http_server_t * srv)
ecs_http_server_dequeue	$FLECS/$FLECS/flecs.c	/^void ecs_http_server_dequeue($/;"	f	typeref:typename:void	signature:(ecs_http_server_t * srv,ecs_ftime_t delta_time)
ecs_http_server_dequeue	$FLECS/$FLECS/flecs.h	/^void ecs_http_server_dequeue($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_http_server_t * server,ecs_ftime_t delta_time)
ecs_http_server_desc_t	$FLECS/$FLECS/flecs.h	/^} ecs_http_server_desc_t;$/;"	t	typeref:struct:__anonb2bcda280d08
ecs_http_server_fini	$FLECS/$FLECS/flecs.c	/^void ecs_http_server_fini($/;"	f	typeref:typename:void	signature:(ecs_http_server_t * srv)
ecs_http_server_fini	$FLECS/$FLECS/flecs.h	/^void ecs_http_server_fini($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_http_server_t * server)
ecs_http_server_http_request	$FLECS/$FLECS/flecs.c	/^int ecs_http_server_http_request($/;"	f	typeref:typename:int	signature:(ecs_http_server_t * srv,const char * req,ecs_size_t len,ecs_http_reply_t * reply_out)
ecs_http_server_http_request	$FLECS/$FLECS/flecs.h	/^int ecs_http_server_http_request($/;"	p	typeref:typename:FLECS_API int	signature:(ecs_http_server_t * srv,const char * req,ecs_size_t len,ecs_http_reply_t * reply_out)
ecs_http_server_init	$FLECS/$FLECS/flecs.c	/^ecs_http_server_t* ecs_http_server_init($/;"	f	typeref:typename:ecs_http_server_t *	signature:(const ecs_http_server_desc_t * desc)
ecs_http_server_init	$FLECS/$FLECS/flecs.h	/^ecs_http_server_t* ecs_http_server_init($/;"	p	typeref:typename:FLECS_API ecs_http_server_t *	signature:(const ecs_http_server_desc_t * desc)
ecs_http_server_request	$FLECS/$FLECS/flecs.c	/^int ecs_http_server_request($/;"	f	typeref:typename:int	signature:(ecs_http_server_t * srv,const char * method,const char * req,ecs_http_reply_t * reply_out)
ecs_http_server_request	$FLECS/$FLECS/flecs.h	/^int ecs_http_server_request($/;"	p	typeref:typename:FLECS_API int	signature:(ecs_http_server_t * srv,const char * method,const char * req,ecs_http_reply_t * reply_out)
ecs_http_server_start	$FLECS/$FLECS/flecs.c	/^int ecs_http_server_start($/;"	f	typeref:typename:int	signature:(ecs_http_server_t * srv)
ecs_http_server_start	$FLECS/$FLECS/flecs.h	/^int ecs_http_server_start($/;"	p	typeref:typename:FLECS_API int	signature:(ecs_http_server_t * server)
ecs_http_server_stop	$FLECS/$FLECS/flecs.c	/^void ecs_http_server_stop($/;"	f	typeref:typename:void	signature:(ecs_http_server_t * srv)
ecs_http_server_stop	$FLECS/$FLECS/flecs.h	/^void ecs_http_server_stop($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_http_server_t * server)
ecs_http_server_t	$FLECS/$FLECS/flecs.c	/^struct ecs_http_server_t {$/;"	s	file:
ecs_http_server_t	$FLECS/$FLECS/flecs.h	/^typedef struct ecs_http_server_t ecs_http_server_t;$/;"	t	typeref:struct:ecs_http_server_t
ecs_http_socket_t	$FLECS/$FLECS/flecs.c	/^typedef int ecs_http_socket_t;$/;"	t	typeref:typename:int	file:
ecs_i16_t	$FLECS/$FLECS/flecs.h	/^typedef int16_t ecs_i16_t;$/;"	t	typeref:typename:int16_t
ecs_i32_t	$FLECS/$FLECS/flecs.h	/^typedef int32_t ecs_i32_t;$/;"	t	typeref:typename:int32_t
ecs_i64_t	$FLECS/$FLECS/flecs.h	/^typedef int64_t ecs_i64_t;$/;"	t	typeref:typename:int64_t
ecs_i8_t	$FLECS/$FLECS/flecs.h	/^typedef int8_t ecs_i8_t;$/;"	t	typeref:typename:int8_t
ecs_id	$FLECS/$FLECS/flecs.c	/^const ecs_entity_t ecs_id(EcsPoly) =                                        4;$/;"	p	typeref:typename:const ecs_entity_t	file:	signature:(EcsPoly)
ecs_id	$FLECS/$FLECS/flecs.h	/^FLECS_API extern const ecs_entity_t ecs_id(ecs_uptr_t);$/;"	p	typeref:typename:FLECS_API const ecs_entity_t	signature:(ecs_uptr_t)
ecs_id_flag_str	$FLECS/$FLECS/flecs.c	/^const char* ecs_id_flag_str($/;"	f	typeref:typename:const char *	signature:(ecs_entity_t entity)
ecs_id_flag_str	$FLECS/$FLECS/flecs.h	/^const char* ecs_id_flag_str($/;"	p	typeref:typename:FLECS_API const char *	signature:(ecs_id_t id_flags)
ecs_id_get_flags	$FLECS/$FLECS/flecs.c	/^ecs_flags32_t ecs_id_get_flags($/;"	f	typeref:typename:ecs_flags32_t	signature:(const ecs_world_t * world,ecs_id_t id)
ecs_id_get_flags	$FLECS/$FLECS/flecs.h	/^ecs_flags32_t ecs_id_get_flags($/;"	p	typeref:typename:FLECS_API ecs_flags32_t	signature:(const ecs_world_t * world,ecs_id_t id)
ecs_id_in_use	$FLECS/$FLECS/flecs.c	/^bool ecs_id_in_use($/;"	f	typeref:typename:bool	signature:(const ecs_world_t * world,ecs_id_t id)
ecs_id_in_use	$FLECS/$FLECS/flecs.h	/^bool ecs_id_in_use($/;"	p	typeref:typename:FLECS_API bool	signature:(const ecs_world_t * world,ecs_id_t id)
ecs_id_is_pair	$FLECS/$FLECS/flecs.c	/^bool ecs_id_is_pair($/;"	f	typeref:typename:bool	signature:(ecs_id_t id)
ecs_id_is_pair	$FLECS/$FLECS/flecs.h	/^bool ecs_id_is_pair($/;"	p	typeref:typename:FLECS_API bool	signature:(ecs_id_t id)
ecs_id_is_tag	$FLECS/$FLECS/flecs.c	/^bool ecs_id_is_tag($/;"	f	typeref:typename:bool	signature:(const ecs_world_t * world,ecs_id_t id)
ecs_id_is_tag	$FLECS/$FLECS/flecs.h	/^bool ecs_id_is_tag($/;"	p	typeref:typename:FLECS_API bool	signature:(const ecs_world_t * world,ecs_id_t id)
ecs_id_is_union	$FLECS/$FLECS/flecs.c	/^bool ecs_id_is_union($/;"	f	typeref:typename:bool	signature:(const ecs_world_t * world,ecs_id_t id)
ecs_id_is_union	$FLECS/$FLECS/flecs.h	/^bool ecs_id_is_union($/;"	p	typeref:typename:FLECS_API bool	signature:(const ecs_world_t * world,ecs_id_t id)
ecs_id_is_valid	$FLECS/$FLECS/flecs.c	/^bool ecs_id_is_valid($/;"	f	typeref:typename:bool	signature:(const ecs_world_t * world,ecs_id_t id)
ecs_id_is_valid	$FLECS/$FLECS/flecs.h	/^bool ecs_id_is_valid($/;"	p	typeref:typename:FLECS_API bool	signature:(const ecs_world_t * world,ecs_id_t id)
ecs_id_is_wildcard	$FLECS/$FLECS/flecs.c	/^bool ecs_id_is_wildcard($/;"	f	typeref:typename:bool	signature:(ecs_id_t id)
ecs_id_is_wildcard	$FLECS/$FLECS/flecs.h	/^bool ecs_id_is_wildcard($/;"	p	typeref:typename:FLECS_API bool	signature:(ecs_id_t id)
ecs_id_match	$FLECS/$FLECS/flecs.c	/^bool ecs_id_match($/;"	f	typeref:typename:bool	signature:(ecs_id_t id,ecs_id_t pattern)
ecs_id_match	$FLECS/$FLECS/flecs.h	/^bool ecs_id_match($/;"	p	typeref:typename:FLECS_API bool	signature:(ecs_id_t id,ecs_id_t pattern)
ecs_id_metric_ctx_t	$FLECS/$FLECS/flecs.c	/^} ecs_id_metric_ctx_t;$/;"	t	typeref:struct:__anonb2bcda230d08	file:
ecs_id_record_elem_t	$FLECS/$FLECS/flecs.c	/^} ecs_id_record_elem_t;$/;"	t	typeref:struct:ecs_id_record_elem_t	file:
ecs_id_record_t	$FLECS/$FLECS/flecs.c	/^struct ecs_id_record_t {$/;"	s	file:
ecs_id_record_t	$FLECS/$FLECS/flecs.h	/^typedef struct ecs_id_record_t ecs_id_record_t;$/;"	t	typeref:struct:ecs_id_record_t
ecs_id_str	$FLECS/$FLECS/flecs.c	/^char* ecs_id_str($/;"	f	typeref:typename:char *	signature:(const ecs_world_t * world,ecs_id_t id)
ecs_id_str	$FLECS/$FLECS/flecs.h	/^char* ecs_id_str($/;"	p	typeref:typename:FLECS_API char *	signature:(const ecs_world_t * world,ecs_id_t id)
ecs_id_str_buf	$FLECS/$FLECS/flecs.c	/^void ecs_id_str_buf($/;"	f	typeref:typename:void	signature:(const ecs_world_t * world,ecs_id_t id,ecs_strbuf_t * buf)
ecs_id_str_buf	$FLECS/$FLECS/flecs.h	/^void ecs_id_str_buf($/;"	p	typeref:typename:FLECS_API void	signature:(const ecs_world_t * world,ecs_id_t id,ecs_strbuf_t * buf)
ecs_id_t	$FLECS/$FLECS/flecs.h	/^typedef uint64_t ecs_id_t;$/;"	t	typeref:typename:uint64_t
ecs_identifier_is_0	$FLECS/$FLECS/flecs.c	/^bool ecs_identifier_is_0($/;"	f	typeref:typename:bool	signature:(const char * id)
ecs_identifier_is_0	$FLECS/$FLECS/flecs.h	/^bool ecs_identifier_is_0($/;"	p	typeref:typename:bool	signature:(const char * id)
ecs_import	$FLECS/$FLECS/flecs.c	/^ecs_entity_t ecs_import($/;"	f	typeref:typename:ecs_entity_t	signature:(ecs_world_t * world,ecs_module_action_t module,const char * module_name)
ecs_import	$FLECS/$FLECS/flecs.h	/^ecs_entity_t ecs_import($/;"	p	typeref:typename:FLECS_API ecs_entity_t	signature:(ecs_world_t * world,ecs_module_action_t module,const char * module_name)
ecs_import_c	$FLECS/$FLECS/flecs.c	/^ecs_entity_t ecs_import_c($/;"	f	typeref:typename:ecs_entity_t	signature:(ecs_world_t * world,ecs_module_action_t module,const char * c_name)
ecs_import_c	$FLECS/$FLECS/flecs.h	/^ecs_entity_t ecs_import_c($/;"	p	typeref:typename:FLECS_API ecs_entity_t	signature:(ecs_world_t * world,ecs_module_action_t module,const char * module_name_c)
ecs_import_from_library	$FLECS/$FLECS/flecs.c	/^ecs_entity_t ecs_import_from_library($/;"	f	typeref:typename:ecs_entity_t	signature:(ecs_world_t * world,const char * library_name,const char * module_name)
ecs_import_from_library	$FLECS/$FLECS/flecs.h	/^ecs_entity_t ecs_import_from_library($/;"	p	typeref:typename:FLECS_API ecs_entity_t	signature:(ecs_world_t * world,const char * library_name,const char * module_name)
ecs_init	$FLECS/$FLECS/flecs.c	/^ecs_world_t *ecs_init(void) {$/;"	f	typeref:typename:ecs_world_t *	signature:(void)
ecs_init	$FLECS/$FLECS/flecs.h	/^ecs_world_t* ecs_init(void);$/;"	p	typeref:typename:FLECS_API ecs_world_t *	signature:(void)
ecs_init_w_args	$FLECS/$FLECS/flecs.c	/^ecs_world_t* ecs_init_w_args($/;"	f	typeref:typename:ecs_world_t *	signature:(int argc,char * argv[])
ecs_init_w_args	$FLECS/$FLECS/flecs.h	/^ecs_world_t* ecs_init_w_args($/;"	p	typeref:typename:FLECS_API ecs_world_t *	signature:(int argc,char * argv[])
ecs_inout_kind_t	$FLECS/$FLECS/flecs.h	/^} ecs_inout_kind_t;$/;"	t	typeref:enum:ecs_inout_kind_t
ecs_interpolate_string	$FLECS/$FLECS/flecs.c	/^char* ecs_interpolate_string($/;"	f	typeref:typename:char *	signature:(ecs_world_t * world,const char * str,const ecs_vars_t * vars)
ecs_interpolate_string	$FLECS/$FLECS/flecs.h	/^char* ecs_interpolate_string($/;"	p	typeref:typename:FLECS_API char *	signature:(ecs_world_t * world,const char * str,const ecs_vars_t * vars)
ecs_iptr_t	$FLECS/$FLECS/flecs.h	/^typedef intptr_t ecs_iptr_t;$/;"	t	typeref:typename:intptr_t
ecs_is_alive	$FLECS/$FLECS/flecs.c	/^bool ecs_is_alive($/;"	f	typeref:typename:bool	signature:(const ecs_world_t * world,ecs_entity_t entity)
ecs_is_alive	$FLECS/$FLECS/flecs.h	/^bool ecs_is_alive($/;"	p	typeref:typename:FLECS_API bool	signature:(const ecs_world_t * world,ecs_entity_t e)
ecs_is_deferred	$FLECS/$FLECS/flecs.c	/^bool ecs_is_deferred($/;"	f	typeref:typename:bool	signature:(const ecs_world_t * world)
ecs_is_deferred	$FLECS/$FLECS/flecs.h	/^bool ecs_is_deferred($/;"	p	typeref:typename:FLECS_API bool	signature:(const ecs_world_t * world)
ecs_is_enabled_component	$FLECS/$FLECS/flecs.h	/^#define ecs_is_enabled_component(/;"	d	signature:(world,entity,T)
ecs_is_enabled_id	$FLECS/$FLECS/flecs.c	/^bool ecs_is_enabled_id($/;"	f	typeref:typename:bool	signature:(const ecs_world_t * world,ecs_entity_t entity,ecs_id_t id)
ecs_is_enabled_id	$FLECS/$FLECS/flecs.h	/^bool ecs_is_enabled_id($/;"	p	typeref:typename:FLECS_API bool	signature:(const ecs_world_t * world,ecs_entity_t entity,ecs_id_t id)
ecs_is_enabled_pair	$FLECS/$FLECS/flecs.h	/^#define ecs_is_enabled_pair(/;"	d	signature:(world,entity,First,second)
ecs_is_fini	$FLECS/$FLECS/flecs.c	/^bool ecs_is_fini($/;"	f	typeref:typename:bool	signature:(const ecs_world_t * world)
ecs_is_fini	$FLECS/$FLECS/flecs.h	/^bool ecs_is_fini($/;"	p	typeref:typename:FLECS_API bool	signature:(const ecs_world_t * world)
ecs_is_valid	$FLECS/$FLECS/flecs.c	/^bool ecs_is_valid($/;"	f	typeref:typename:bool	signature:(const ecs_world_t * world,ecs_entity_t entity)
ecs_is_valid	$FLECS/$FLECS/flecs.h	/^bool ecs_is_valid($/;"	p	typeref:typename:FLECS_API bool	signature:(const ecs_world_t * world,ecs_entity_t e)
ecs_isa	$FLECS/$FLECS/flecs.h	/^#define ecs_isa(/;"	d	signature:(e)
ecs_iter_action_t	$FLECS/$FLECS/flecs.h	/^typedef void (*ecs_iter_action_t)($/;"	t	typeref:typename:void (*)(ecs_iter_t * it)
ecs_iter_cache_t	$FLECS/$FLECS/flecs.h	/^} ecs_iter_cache_t;$/;"	t	typeref:struct:ecs_iter_cache_t
ecs_iter_count	$FLECS/$FLECS/flecs.c	/^int32_t ecs_iter_count($/;"	f	typeref:typename:int32_t	signature:(ecs_iter_t * it)
ecs_iter_count	$FLECS/$FLECS/flecs.h	/^int32_t ecs_iter_count($/;"	p	typeref:typename:FLECS_API int32_t	signature:(ecs_iter_t * it)
ecs_iter_fini	$FLECS/$FLECS/flecs.c	/^void ecs_iter_fini($/;"	f	typeref:typename:void	signature:(ecs_iter_t * it)
ecs_iter_fini	$FLECS/$FLECS/flecs.h	/^void ecs_iter_fini($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_iter_t * it)
ecs_iter_fini_action_t	$FLECS/$FLECS/flecs.h	/^typedef void (*ecs_iter_fini_action_t)($/;"	t	typeref:typename:void (*)(ecs_iter_t * it)
ecs_iter_first	$FLECS/$FLECS/flecs.c	/^ecs_entity_t ecs_iter_first($/;"	f	typeref:typename:ecs_entity_t	signature:(ecs_iter_t * it)
ecs_iter_first	$FLECS/$FLECS/flecs.h	/^ecs_entity_t ecs_iter_first($/;"	p	typeref:typename:FLECS_API ecs_entity_t	signature:(ecs_iter_t * it)
ecs_iter_get_var	$FLECS/$FLECS/flecs.c	/^ecs_entity_t ecs_iter_get_var($/;"	f	typeref:typename:ecs_entity_t	signature:(ecs_iter_t * it,int32_t var_id)
ecs_iter_get_var	$FLECS/$FLECS/flecs.h	/^ecs_entity_t ecs_iter_get_var($/;"	p	typeref:typename:FLECS_API ecs_entity_t	signature:(ecs_iter_t * it,int32_t var_id)
ecs_iter_get_var_as_range	$FLECS/$FLECS/flecs.c	/^ecs_table_range_t ecs_iter_get_var_as_range($/;"	f	typeref:typename:ecs_table_range_t	signature:(ecs_iter_t * it,int32_t var_id)
ecs_iter_get_var_as_range	$FLECS/$FLECS/flecs.h	/^ecs_table_range_t ecs_iter_get_var_as_range($/;"	p	typeref:typename:FLECS_API ecs_table_range_t	signature:(ecs_iter_t * it,int32_t var_id)
ecs_iter_get_var_as_table	$FLECS/$FLECS/flecs.c	/^ecs_table_t* ecs_iter_get_var_as_table($/;"	f	typeref:typename:ecs_table_t *	signature:(ecs_iter_t * it,int32_t var_id)
ecs_iter_get_var_as_table	$FLECS/$FLECS/flecs.h	/^ecs_table_t* ecs_iter_get_var_as_table($/;"	p	typeref:typename:FLECS_API ecs_table_t *	signature:(ecs_iter_t * it,int32_t var_id)
ecs_iter_init_action_t	$FLECS/$FLECS/flecs.h	/^typedef void (*ecs_iter_init_action_t)($/;"	t	typeref:typename:void (*)(const ecs_world_t * world,const ecs_poly_t * iterable,ecs_iter_t * it,ecs_term_t * filter)
ecs_iter_is_true	$FLECS/$FLECS/flecs.c	/^bool ecs_iter_is_true($/;"	f	typeref:typename:bool	signature:(ecs_iter_t * it)
ecs_iter_is_true	$FLECS/$FLECS/flecs.h	/^bool ecs_iter_is_true($/;"	p	typeref:typename:FLECS_API bool	signature:(ecs_iter_t * it)
ecs_iter_kind_t	$FLECS/$FLECS/flecs.h	/^} ecs_iter_kind_t;$/;"	t	typeref:enum:ecs_iter_kind_t
ecs_iter_next	$FLECS/$FLECS/flecs.c	/^bool ecs_iter_next($/;"	f	typeref:typename:bool	signature:(ecs_iter_t * iter)
ecs_iter_next	$FLECS/$FLECS/flecs.h	/^bool ecs_iter_next($/;"	p	typeref:typename:FLECS_API bool	signature:(ecs_iter_t * it)
ecs_iter_next_action_t	$FLECS/$FLECS/flecs.h	/^typedef bool (*ecs_iter_next_action_t)($/;"	t	typeref:typename:bool (*)(ecs_iter_t * it)
ecs_iter_poly	$FLECS/$FLECS/flecs.c	/^void ecs_iter_poly($/;"	f	typeref:typename:void	signature:(const ecs_world_t * world,const ecs_poly_t * poly,ecs_iter_t * iter_out,ecs_term_t * filter)
ecs_iter_poly	$FLECS/$FLECS/flecs.h	/^void ecs_iter_poly($/;"	p	typeref:typename:FLECS_API void	signature:(const ecs_world_t * world,const ecs_poly_t * poly,ecs_iter_t * iter,ecs_term_t * filter)
ecs_iter_private_t	$FLECS/$FLECS/flecs.h	/^} ecs_iter_private_t;$/;"	t	typeref:struct:ecs_iter_private_t
ecs_iter_set_var	$FLECS/$FLECS/flecs.c	/^void ecs_iter_set_var($/;"	f	typeref:typename:void	signature:(ecs_iter_t * it,int32_t var_id,ecs_entity_t entity)
ecs_iter_set_var	$FLECS/$FLECS/flecs.h	/^void ecs_iter_set_var($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_iter_t * it,int32_t var_id,ecs_entity_t entity)
ecs_iter_set_var_as_range	$FLECS/$FLECS/flecs.c	/^void ecs_iter_set_var_as_range($/;"	f	typeref:typename:void	signature:(ecs_iter_t * it,int32_t var_id,const ecs_table_range_t * range)
ecs_iter_set_var_as_range	$FLECS/$FLECS/flecs.h	/^void ecs_iter_set_var_as_range($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_iter_t * it,int32_t var_id,const ecs_table_range_t * range)
ecs_iter_set_var_as_table	$FLECS/$FLECS/flecs.c	/^void ecs_iter_set_var_as_table($/;"	f	typeref:typename:void	signature:(ecs_iter_t * it,int32_t var_id,const ecs_table_t * table)
ecs_iter_set_var_as_table	$FLECS/$FLECS/flecs.h	/^void ecs_iter_set_var_as_table($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_iter_t * it,int32_t var_id,const ecs_table_t * table)
ecs_iter_str	$FLECS/$FLECS/flecs.c	/^char* ecs_iter_str($/;"	f	typeref:typename:char *	signature:(const ecs_iter_t * it)
ecs_iter_str	$FLECS/$FLECS/flecs.h	/^char* ecs_iter_str($/;"	p	typeref:typename:FLECS_API char *	signature:(const ecs_iter_t * it)
ecs_iter_t	$FLECS/$FLECS/flecs.h	/^typedef struct ecs_iter_t ecs_iter_t;$/;"	t	typeref:struct:ecs_iter_t
ecs_iter_to_json	$FLECS/$FLECS/flecs.c	/^char* ecs_iter_to_json($/;"	f	typeref:typename:char *	signature:(const ecs_world_t * world,ecs_iter_t * it,const ecs_iter_to_json_desc_t * desc)
ecs_iter_to_json	$FLECS/$FLECS/flecs.h	/^char* ecs_iter_to_json($/;"	p	typeref:typename:FLECS_API char *	signature:(const ecs_world_t * world,ecs_iter_t * iter,const ecs_iter_to_json_desc_t * desc)
ecs_iter_to_json_buf	$FLECS/$FLECS/flecs.c	/^int ecs_iter_to_json_buf($/;"	f	typeref:typename:int	signature:(const ecs_world_t * world,ecs_iter_t * it,ecs_strbuf_t * buf,const ecs_iter_to_json_desc_t * desc)
ecs_iter_to_json_buf	$FLECS/$FLECS/flecs.h	/^int ecs_iter_to_json_buf($/;"	p	typeref:typename:FLECS_API int	signature:(const ecs_world_t * world,ecs_iter_t * iter,ecs_strbuf_t * buf_out,const ecs_iter_to_json_desc_t * desc)
ecs_iter_to_json_desc_t	$FLECS/$FLECS/flecs.h	/^} ecs_iter_to_json_desc_t;$/;"	t	typeref:struct:ecs_iter_to_json_desc_t
ecs_iter_to_vars	$FLECS/$FLECS/flecs.c	/^void ecs_iter_to_vars($/;"	f	typeref:typename:void	signature:(const ecs_iter_t * it,ecs_vars_t * vars,int offset)
ecs_iter_to_vars	$FLECS/$FLECS/flecs.h	/^void ecs_iter_to_vars($/;"	p	typeref:typename:FLECS_API void	signature:(const ecs_iter_t * it,ecs_vars_t * vars,int offset)
ecs_iter_var_is_constrained	$FLECS/$FLECS/flecs.c	/^bool ecs_iter_var_is_constrained($/;"	f	typeref:typename:bool	signature:(ecs_iter_t * it,int32_t var_id)
ecs_iter_var_is_constrained	$FLECS/$FLECS/flecs.h	/^bool ecs_iter_var_is_constrained($/;"	p	typeref:typename:FLECS_API bool	signature:(ecs_iter_t * it,int32_t var_id)
ecs_iterable_t	$FLECS/$FLECS/flecs.h	/^} ecs_iterable_t;$/;"	t	typeref:struct:ecs_iterable_t
ecs_journal_kind_t	$FLECS/$FLECS/flecs.h	/^} ecs_journal_kind_t;$/;"	t	typeref:enum:ecs_journal_kind_t
ecs_json_ser_idr_t	$FLECS/$FLECS/flecs.c	/^} ecs_json_ser_idr_t;$/;"	t	typeref:struct:ecs_json_ser_idr_t	file:
ecs_json_token_t	$FLECS/$FLECS/flecs.c	/^} ecs_json_token_t;$/;"	t	typeref:enum:ecs_json_token_t	file:
ecs_log	$FLECS/$FLECS/flecs.h	/^#define ecs_log(/;"	d	signature:(level,...)
ecs_log_	$FLECS/$FLECS/flecs.c	/^void ecs_log_($/;"	f	typeref:typename:void	signature:(int32_t level,const char * file,int32_t line,const char * fmt,...)
ecs_log_	$FLECS/$FLECS/flecs.h	/^void ecs_log_($/;"	p	typeref:typename:FLECS_API void	signature:(int32_t level,const char * file,int32_t line,const char * fmt,...)
ecs_log_enable_colors	$FLECS/$FLECS/flecs.c	/^bool ecs_log_enable_colors($/;"	f	typeref:typename:bool	signature:(bool enabled)
ecs_log_enable_colors	$FLECS/$FLECS/flecs.h	/^bool ecs_log_enable_colors($/;"	p	typeref:typename:FLECS_API bool	signature:(bool enabled)
ecs_log_enable_timedelta	$FLECS/$FLECS/flecs.c	/^bool ecs_log_enable_timedelta($/;"	f	typeref:typename:bool	signature:(bool enabled)
ecs_log_enable_timedelta	$FLECS/$FLECS/flecs.h	/^bool ecs_log_enable_timedelta($/;"	p	typeref:typename:FLECS_API bool	signature:(bool enabled)
ecs_log_enable_timestamp	$FLECS/$FLECS/flecs.c	/^bool ecs_log_enable_timestamp($/;"	f	typeref:typename:bool	signature:(bool enabled)
ecs_log_enable_timestamp	$FLECS/$FLECS/flecs.h	/^bool ecs_log_enable_timestamp($/;"	p	typeref:typename:FLECS_API bool	signature:(bool enabled)
ecs_log_get_level	$FLECS/$FLECS/flecs.c	/^int ecs_log_get_level(void) {$/;"	f	typeref:typename:int	signature:(void)
ecs_log_get_level	$FLECS/$FLECS/flecs.h	/^int ecs_log_get_level(void);$/;"	p	typeref:typename:FLECS_API int	signature:(void)
ecs_log_last_error	$FLECS/$FLECS/flecs.c	/^int ecs_log_last_error(void)$/;"	f	typeref:typename:int	signature:(void)
ecs_log_last_error	$FLECS/$FLECS/flecs.h	/^int ecs_log_last_error(void);$/;"	p	typeref:typename:FLECS_API int	signature:(void)
ecs_log_pop	$FLECS/$FLECS/flecs.h	/^#define ecs_log_pop() ecs_log_pop_/;"	d	signature:()
ecs_log_pop_	$FLECS/$FLECS/flecs.c	/^void ecs_log_pop_($/;"	f	typeref:typename:void	signature:(int32_t level)
ecs_log_pop_	$FLECS/$FLECS/flecs.h	/^void ecs_log_pop_(int32_t level);$/;"	p	typeref:typename:FLECS_API void	signature:(int32_t level)
ecs_log_pop_1	$FLECS/$FLECS/flecs.h	/^#define ecs_log_pop_1(/;"	d	signature:()
ecs_log_pop_2	$FLECS/$FLECS/flecs.h	/^#define ecs_log_pop_2(/;"	d	signature:()
ecs_log_pop_3	$FLECS/$FLECS/flecs.h	/^#define ecs_log_pop_3(/;"	d	signature:()
ecs_log_push	$FLECS/$FLECS/flecs.h	/^#define ecs_log_push() ecs_log_push_/;"	d	signature:()
ecs_log_push_	$FLECS/$FLECS/flecs.c	/^void ecs_log_push_($/;"	f	typeref:typename:void	signature:(int32_t level)
ecs_log_push_	$FLECS/$FLECS/flecs.h	/^void ecs_log_push_(int32_t level);$/;"	p	typeref:typename:FLECS_API void	signature:(int32_t level)
ecs_log_push_1	$FLECS/$FLECS/flecs.h	/^#define ecs_log_push_1(/;"	d	signature:()
ecs_log_push_2	$FLECS/$FLECS/flecs.h	/^#define ecs_log_push_2(/;"	d	signature:()
ecs_log_push_3	$FLECS/$FLECS/flecs.h	/^#define ecs_log_push_3(/;"	d	signature:()
ecs_log_set_level	$FLECS/$FLECS/flecs.c	/^int ecs_log_set_level($/;"	f	typeref:typename:int	signature:(int level)
ecs_log_set_level	$FLECS/$FLECS/flecs.h	/^int ecs_log_set_level($/;"	p	typeref:typename:FLECS_API int	signature:(int level)
ecs_logv	$FLECS/$FLECS/flecs.h	/^#define ecs_logv(/;"	d	signature:(level,fmt,args)
ecs_logv_	$FLECS/$FLECS/flecs.c	/^void ecs_logv_($/;"	f	typeref:typename:void	signature:(int level,const char * file,int32_t line,const char * fmt,va_list args)
ecs_logv_	$FLECS/$FLECS/flecs.h	/^void ecs_logv_($/;"	p	typeref:typename:FLECS_API void	signature:(int level,const char * file,int32_t line,const char * fmt,va_list args)
ecs_lookup	$FLECS/$FLECS/flecs.c	/^ecs_entity_t ecs_lookup($/;"	f	typeref:typename:ecs_entity_t	signature:(const ecs_world_t * world,const char * name)
ecs_lookup	$FLECS/$FLECS/flecs.h	/^ecs_entity_t ecs_lookup($/;"	p	typeref:typename:FLECS_API ecs_entity_t	signature:(const ecs_world_t * world,const char * name)
ecs_lookup_child	$FLECS/$FLECS/flecs.c	/^ecs_entity_t ecs_lookup_child($/;"	f	typeref:typename:ecs_entity_t	signature:(const ecs_world_t * world,ecs_entity_t parent,const char * name)
ecs_lookup_child	$FLECS/$FLECS/flecs.h	/^ecs_entity_t ecs_lookup_child($/;"	p	typeref:typename:FLECS_API ecs_entity_t	signature:(const ecs_world_t * world,ecs_entity_t parent,const char * name)
ecs_lookup_fullpath	$FLECS/$FLECS/flecs.h	/^#define ecs_lookup_fullpath(/;"	d	signature:(world,path)
ecs_lookup_path	$FLECS/$FLECS/flecs.h	/^#define ecs_lookup_path(/;"	d	signature:(world,parent,path)
ecs_lookup_path_w_sep	$FLECS/$FLECS/flecs.c	/^ecs_entity_t ecs_lookup_path_w_sep($/;"	f	typeref:typename:ecs_entity_t	signature:(const ecs_world_t * world,ecs_entity_t parent,const char * path,const char * sep,const char * prefix,bool recursive)
ecs_lookup_path_w_sep	$FLECS/$FLECS/flecs.h	/^ecs_entity_t ecs_lookup_path_w_sep($/;"	p	typeref:typename:FLECS_API ecs_entity_t	signature:(const ecs_world_t * world,ecs_entity_t parent,const char * path,const char * sep,const char * prefix,bool recursive)
ecs_lookup_symbol	$FLECS/$FLECS/flecs.c	/^ecs_entity_t ecs_lookup_symbol($/;"	f	typeref:typename:ecs_entity_t	signature:(const ecs_world_t * world,const char * name,bool lookup_as_path,bool recursive)
ecs_lookup_symbol	$FLECS/$FLECS/flecs.h	/^ecs_entity_t ecs_lookup_symbol($/;"	p	typeref:typename:FLECS_API ecs_entity_t	signature:(const ecs_world_t * world,const char * symbol,bool lookup_as_path,bool recursive)
ecs_make_pair	$FLECS/$FLECS/flecs.c	/^ecs_id_t ecs_make_pair($/;"	f	typeref:typename:ecs_id_t	signature:(ecs_entity_t relationship,ecs_entity_t target)
ecs_make_pair	$FLECS/$FLECS/flecs.h	/^ecs_id_t ecs_make_pair($/;"	p	typeref:typename:FLECS_API ecs_id_t	signature:(ecs_entity_t first,ecs_entity_t second)
ecs_map_clear	$FLECS/$FLECS/flecs.c	/^void ecs_map_clear($/;"	f	typeref:typename:void	signature:(ecs_map_t * map)
ecs_map_clear	$FLECS/$FLECS/flecs.h	/^void ecs_map_clear($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_map_t * map)
ecs_map_copy	$FLECS/$FLECS/flecs.c	/^void ecs_map_copy($/;"	f	typeref:typename:void	signature:(ecs_map_t * dst,const ecs_map_t * src)
ecs_map_copy	$FLECS/$FLECS/flecs.h	/^void ecs_map_copy($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_map_t * dst,const ecs_map_t * src)
ecs_map_count	$FLECS/$FLECS/flecs.h	/^#define ecs_map_count(/;"	d	signature:(map)
ecs_map_data_t	$FLECS/$FLECS/flecs.h	/^typedef uint64_t ecs_map_data_t;$/;"	t	typeref:typename:uint64_t
ecs_map_ensure	$FLECS/$FLECS/flecs.c	/^ecs_map_val_t* ecs_map_ensure($/;"	f	typeref:typename:ecs_map_val_t *	signature:(ecs_map_t * map,ecs_map_key_t key)
ecs_map_ensure	$FLECS/$FLECS/flecs.h	/^ecs_map_val_t* ecs_map_ensure($/;"	p	typeref:typename:FLECS_API ecs_map_val_t *	signature:(ecs_map_t * map,ecs_map_key_t key)
ecs_map_ensure_alloc	$FLECS/$FLECS/flecs.c	/^void* ecs_map_ensure_alloc($/;"	f	typeref:typename:void *	signature:(ecs_map_t * map,ecs_size_t elem_size,ecs_map_key_t key)
ecs_map_ensure_alloc	$FLECS/$FLECS/flecs.h	/^void* ecs_map_ensure_alloc($/;"	p	typeref:typename:FLECS_API void *	signature:(ecs_map_t * map,ecs_size_t elem_size,ecs_map_key_t key)
ecs_map_ensure_alloc_t	$FLECS/$FLECS/flecs.h	/^#define ecs_map_ensure_alloc_t(/;"	d	signature:(m,T,k)
ecs_map_ensure_ref	$FLECS/$FLECS/flecs.h	/^#define ecs_map_ensure_ref(/;"	d	signature:(m,T,k)
ecs_map_fini	$FLECS/$FLECS/flecs.c	/^void ecs_map_fini($/;"	f	typeref:typename:void	signature:(ecs_map_t * map)
ecs_map_fini	$FLECS/$FLECS/flecs.h	/^void ecs_map_fini($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_map_t * map)
ecs_map_get	$FLECS/$FLECS/flecs.c	/^ecs_map_val_t* ecs_map_get($/;"	f	typeref:typename:ecs_map_val_t *	signature:(const ecs_map_t * map,ecs_map_key_t key)
ecs_map_get	$FLECS/$FLECS/flecs.h	/^ecs_map_val_t* ecs_map_get($/;"	p	typeref:typename:FLECS_API ecs_map_val_t *	signature:(const ecs_map_t * map,ecs_map_key_t key)
ecs_map_get_deref	$FLECS/$FLECS/flecs.h	/^#define ecs_map_get_deref(m, T, k) ECS_CAST(T*, ecs_map_get_deref_/;"	d	signature:(m,T,k)
ecs_map_get_deref_	$FLECS/$FLECS/flecs.c	/^void* ecs_map_get_deref_($/;"	f	typeref:typename:void *	signature:(const ecs_map_t * map,ecs_map_key_t key)
ecs_map_get_deref_	$FLECS/$FLECS/flecs.h	/^void* ecs_map_get_deref_($/;"	p	typeref:typename:FLECS_API void *	signature:(const ecs_map_t * map,ecs_map_key_t key)
ecs_map_get_ref	$FLECS/$FLECS/flecs.h	/^#define ecs_map_get_ref(/;"	d	signature:(m,T,k)
ecs_map_init	$FLECS/$FLECS/flecs.c	/^void ecs_map_init($/;"	f	typeref:typename:void	signature:(ecs_map_t * result,ecs_allocator_t * allocator)
ecs_map_init	$FLECS/$FLECS/flecs.h	/^void ecs_map_init($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_map_t * map,struct ecs_allocator_t * allocator)
ecs_map_init_if	$FLECS/$FLECS/flecs.c	/^void ecs_map_init_if($/;"	f	typeref:typename:void	signature:(ecs_map_t * result,ecs_allocator_t * allocator)
ecs_map_init_if	$FLECS/$FLECS/flecs.h	/^void ecs_map_init_if($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_map_t * map,struct ecs_allocator_t * allocator)
ecs_map_init_w_params	$FLECS/$FLECS/flecs.c	/^void ecs_map_init_w_params($/;"	f	typeref:typename:void	signature:(ecs_map_t * result,ecs_map_params_t * params)
ecs_map_init_w_params	$FLECS/$FLECS/flecs.h	/^void ecs_map_init_w_params($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_map_t * map,ecs_map_params_t * params)
ecs_map_init_w_params_if	$FLECS/$FLECS/flecs.c	/^void ecs_map_init_w_params_if($/;"	f	typeref:typename:void	signature:(ecs_map_t * result,ecs_map_params_t * params)
ecs_map_init_w_params_if	$FLECS/$FLECS/flecs.h	/^void ecs_map_init_w_params_if($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_map_t * result,ecs_map_params_t * params)
ecs_map_insert	$FLECS/$FLECS/flecs.c	/^void ecs_map_insert($/;"	f	typeref:typename:void	signature:(ecs_map_t * map,ecs_map_key_t key,ecs_map_val_t value)
ecs_map_insert	$FLECS/$FLECS/flecs.h	/^void ecs_map_insert($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_map_t * map,ecs_map_key_t key,ecs_map_val_t value)
ecs_map_insert_alloc	$FLECS/$FLECS/flecs.c	/^void* ecs_map_insert_alloc($/;"	f	typeref:typename:void *	signature:(ecs_map_t * map,ecs_size_t elem_size,ecs_map_key_t key)
ecs_map_insert_alloc	$FLECS/$FLECS/flecs.h	/^void* ecs_map_insert_alloc($/;"	p	typeref:typename:FLECS_API void *	signature:(ecs_map_t * map,ecs_size_t elem_size,ecs_map_key_t key)
ecs_map_insert_alloc_t	$FLECS/$FLECS/flecs.h	/^#define ecs_map_insert_alloc_t(/;"	d	signature:(m,T,k)
ecs_map_insert_ptr	$FLECS/$FLECS/flecs.h	/^#define ecs_map_insert_ptr(/;"	d	signature:(m,k,v)
ecs_map_is_init	$FLECS/$FLECS/flecs.h	/^#define ecs_map_is_init(/;"	d	signature:(map)
ecs_map_iter	$FLECS/$FLECS/flecs.c	/^ecs_map_iter_t ecs_map_iter($/;"	f	typeref:typename:ecs_map_iter_t	signature:(const ecs_map_t * map)
ecs_map_iter	$FLECS/$FLECS/flecs.h	/^ecs_map_iter_t ecs_map_iter($/;"	p	typeref:typename:FLECS_API ecs_map_iter_t	signature:(const ecs_map_t * map)
ecs_map_iter_t	$FLECS/$FLECS/flecs.h	/^} ecs_map_iter_t;$/;"	t	typeref:struct:ecs_map_iter_t
ecs_map_key	$FLECS/$FLECS/flecs.h	/^#define ecs_map_key(/;"	d	signature:(it)
ecs_map_key_t	$FLECS/$FLECS/flecs.h	/^typedef ecs_map_data_t ecs_map_key_t;$/;"	t	typeref:typename:ecs_map_data_t
ecs_map_next	$FLECS/$FLECS/flecs.c	/^bool ecs_map_next($/;"	f	typeref:typename:bool	signature:(ecs_map_iter_t * iter)
ecs_map_next	$FLECS/$FLECS/flecs.h	/^bool ecs_map_next($/;"	p	typeref:typename:FLECS_API bool	signature:(ecs_map_iter_t * iter)
ecs_map_params_fini	$FLECS/$FLECS/flecs.c	/^void ecs_map_params_fini($/;"	f	typeref:typename:void	signature:(ecs_map_params_t * params)
ecs_map_params_fini	$FLECS/$FLECS/flecs.h	/^void ecs_map_params_fini($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_map_params_t * params)
ecs_map_params_init	$FLECS/$FLECS/flecs.c	/^void ecs_map_params_init($/;"	f	typeref:typename:void	signature:(ecs_map_params_t * params,ecs_allocator_t * allocator)
ecs_map_params_init	$FLECS/$FLECS/flecs.h	/^void ecs_map_params_init($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_map_params_t * params,struct ecs_allocator_t * allocator)
ecs_map_params_t	$FLECS/$FLECS/flecs.h	/^} ecs_map_params_t;$/;"	t	typeref:struct:ecs_map_params_t
ecs_map_ptr	$FLECS/$FLECS/flecs.h	/^#define ecs_map_ptr(/;"	d	signature:(it)
ecs_map_ref	$FLECS/$FLECS/flecs.h	/^#define ecs_map_ref(/;"	d	signature:(it,T)
ecs_map_remove	$FLECS/$FLECS/flecs.c	/^ecs_map_val_t ecs_map_remove($/;"	f	typeref:typename:ecs_map_val_t	signature:(ecs_map_t * map,ecs_map_key_t key)
ecs_map_remove	$FLECS/$FLECS/flecs.h	/^ecs_map_val_t ecs_map_remove($/;"	p	typeref:typename:FLECS_API ecs_map_val_t	signature:(ecs_map_t * map,ecs_map_key_t key)
ecs_map_remove_free	$FLECS/$FLECS/flecs.c	/^void ecs_map_remove_free($/;"	f	typeref:typename:void	signature:(ecs_map_t * map,ecs_map_key_t key)
ecs_map_remove_free	$FLECS/$FLECS/flecs.h	/^void ecs_map_remove_free($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_map_t * map,ecs_map_key_t key)
ecs_map_remove_ptr	$FLECS/$FLECS/flecs.h	/^#define ecs_map_remove_ptr(/;"	d	signature:(m,k)
ecs_map_t	$FLECS/$FLECS/flecs.h	/^} ecs_map_t;$/;"	t	typeref:struct:ecs_map_t
ecs_map_val_t	$FLECS/$FLECS/flecs.h	/^typedef ecs_map_data_t ecs_map_val_t;$/;"	t	typeref:typename:ecs_map_data_t
ecs_map_value	$FLECS/$FLECS/flecs.h	/^#define ecs_map_value(/;"	d	signature:(it)
ecs_marked_id_t	$FLECS/$FLECS/flecs.c	/^} ecs_marked_id_t;$/;"	t	typeref:struct:ecs_marked_id_t	file:
ecs_measure_frame_time	$FLECS/$FLECS/flecs.c	/^void ecs_measure_frame_time($/;"	f	typeref:typename:void	signature:(ecs_world_t * world,bool enable)
ecs_measure_frame_time	$FLECS/$FLECS/flecs.h	/^FLECS_API void ecs_measure_frame_time($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_world_t * world,bool enable)
ecs_measure_system_time	$FLECS/$FLECS/flecs.c	/^void ecs_measure_system_time($/;"	f	typeref:typename:void	signature:(ecs_world_t * world,bool enable)
ecs_measure_system_time	$FLECS/$FLECS/flecs.h	/^FLECS_API void ecs_measure_system_time($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_world_t * world,bool enable)
ecs_member_metric_ctx_t	$FLECS/$FLECS/flecs.c	/^} ecs_member_metric_ctx_t;$/;"	t	typeref:struct:__anonb2bcda230c08	file:
ecs_member_t	$FLECS/$FLECS/flecs.h	/^} ecs_member_t;$/;"	t	typeref:struct:ecs_member_t
ecs_member_value_range_t	$FLECS/$FLECS/flecs.h	/^} ecs_member_value_range_t;$/;"	t	typeref:struct:ecs_member_value_range_t
ecs_merge	$FLECS/$FLECS/flecs.c	/^void ecs_merge($/;"	f	typeref:typename:void	signature:(ecs_world_t * world)
ecs_merge	$FLECS/$FLECS/flecs.h	/^void ecs_merge($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_world_t * world)
ecs_meta_bounds_float	$FLECS/$FLECS/flecs.c	/^} ecs_meta_bounds_float[EcsMetaTypeOpKindLast + 1] = {$/;"	v	typeref:struct:__anonb2bcda231d08[]
ecs_meta_bounds_signed	$FLECS/$FLECS/flecs.c	/^} ecs_meta_bounds_signed[EcsMetaTypeOpKindLast + 1] = {$/;"	v	typeref:struct:__anonb2bcda231b08[]
ecs_meta_bounds_unsigned	$FLECS/$FLECS/flecs.c	/^} ecs_meta_bounds_unsigned[EcsMetaTypeOpKindLast + 1] = {$/;"	v	typeref:struct:__anonb2bcda231c08[]
ecs_meta_cursor	$FLECS/$FLECS/flecs.c	/^ecs_meta_cursor_t ecs_meta_cursor($/;"	f	typeref:typename:ecs_meta_cursor_t	signature:(const ecs_world_t * world,ecs_entity_t type,void * ptr)
ecs_meta_cursor	$FLECS/$FLECS/flecs.h	/^ecs_meta_cursor_t ecs_meta_cursor($/;"	p	typeref:typename:FLECS_API ecs_meta_cursor_t	signature:(const ecs_world_t * world,ecs_entity_t type,void * ptr)
ecs_meta_cursor_t	$FLECS/$FLECS/flecs.h	/^} ecs_meta_cursor_t;$/;"	t	typeref:struct:ecs_meta_cursor_t
ecs_meta_dotmember	$FLECS/$FLECS/flecs.c	/^int ecs_meta_dotmember($/;"	f	typeref:typename:int	signature:(ecs_meta_cursor_t * cursor,const char * name)
ecs_meta_dotmember	$FLECS/$FLECS/flecs.h	/^int ecs_meta_dotmember($/;"	p	typeref:typename:FLECS_API int	signature:(ecs_meta_cursor_t * cursor,const char * name)
ecs_meta_dtor_serialized	$FLECS/$FLECS/flecs.c	/^void ecs_meta_dtor_serialized($/;"	p	typeref:typename:void	file:	signature:(EcsMetaTypeSerialized * ptr)
ecs_meta_elem	$FLECS/$FLECS/flecs.c	/^int ecs_meta_elem($/;"	f	typeref:typename:int	signature:(ecs_meta_cursor_t * cursor,int32_t elem)
ecs_meta_elem	$FLECS/$FLECS/flecs.h	/^int ecs_meta_elem($/;"	p	typeref:typename:FLECS_API int	signature:(ecs_meta_cursor_t * cursor,int32_t elem)
ecs_meta_error	$FLECS/$FLECS/flecs.c	/^#define ecs_meta_error(/;"	d	file:	signature:(ctx,ptr,...)
ecs_meta_from_desc	$FLECS/$FLECS/flecs.c	/^int ecs_meta_from_desc($/;"	f	typeref:typename:int	signature:(ecs_world_t * world,ecs_entity_t component,ecs_type_kind_t kind,const char * desc)
ecs_meta_from_desc	$FLECS/$FLECS/flecs.h	/^int ecs_meta_from_desc($/;"	p	typeref:typename:FLECS_API int	signature:(ecs_world_t * world,ecs_entity_t component,ecs_type_kind_t kind,const char * desc)
ecs_meta_get_bool	$FLECS/$FLECS/flecs.c	/^bool ecs_meta_get_bool($/;"	f	typeref:typename:bool	signature:(const ecs_meta_cursor_t * cursor)
ecs_meta_get_bool	$FLECS/$FLECS/flecs.h	/^bool ecs_meta_get_bool($/;"	p	typeref:typename:FLECS_API bool	signature:(const ecs_meta_cursor_t * cursor)
ecs_meta_get_char	$FLECS/$FLECS/flecs.c	/^char ecs_meta_get_char($/;"	f	typeref:typename:char	signature:(const ecs_meta_cursor_t * cursor)
ecs_meta_get_char	$FLECS/$FLECS/flecs.h	/^char ecs_meta_get_char($/;"	p	typeref:typename:FLECS_API char	signature:(const ecs_meta_cursor_t * cursor)
ecs_meta_get_entity	$FLECS/$FLECS/flecs.c	/^ecs_entity_t ecs_meta_get_entity($/;"	f	typeref:typename:ecs_entity_t	signature:(const ecs_meta_cursor_t * cursor)
ecs_meta_get_entity	$FLECS/$FLECS/flecs.h	/^ecs_entity_t ecs_meta_get_entity($/;"	p	typeref:typename:FLECS_API ecs_entity_t	signature:(const ecs_meta_cursor_t * cursor)
ecs_meta_get_float	$FLECS/$FLECS/flecs.c	/^double ecs_meta_get_float($/;"	f	typeref:typename:double	signature:(const ecs_meta_cursor_t * cursor)
ecs_meta_get_float	$FLECS/$FLECS/flecs.h	/^double ecs_meta_get_float($/;"	p	typeref:typename:FLECS_API double	signature:(const ecs_meta_cursor_t * cursor)
ecs_meta_get_id	$FLECS/$FLECS/flecs.c	/^ecs_entity_t ecs_meta_get_id($/;"	f	typeref:typename:ecs_entity_t	signature:(const ecs_meta_cursor_t * cursor)
ecs_meta_get_id	$FLECS/$FLECS/flecs.h	/^ecs_id_t ecs_meta_get_id($/;"	p	typeref:typename:ecs_id_t	signature:(const ecs_meta_cursor_t * cursor)
ecs_meta_get_int	$FLECS/$FLECS/flecs.c	/^int64_t ecs_meta_get_int($/;"	f	typeref:typename:int64_t	signature:(const ecs_meta_cursor_t * cursor)
ecs_meta_get_int	$FLECS/$FLECS/flecs.h	/^int64_t ecs_meta_get_int($/;"	p	typeref:typename:FLECS_API int64_t	signature:(const ecs_meta_cursor_t * cursor)
ecs_meta_get_member	$FLECS/$FLECS/flecs.c	/^const char* ecs_meta_get_member($/;"	f	typeref:typename:const char *	signature:(const ecs_meta_cursor_t * cursor)
ecs_meta_get_member	$FLECS/$FLECS/flecs.h	/^const char* ecs_meta_get_member($/;"	p	typeref:typename:FLECS_API const char *	signature:(const ecs_meta_cursor_t * cursor)
ecs_meta_get_member_id	$FLECS/$FLECS/flecs.c	/^ecs_entity_t ecs_meta_get_member_id($/;"	f	typeref:typename:ecs_entity_t	signature:(const ecs_meta_cursor_t * cursor)
ecs_meta_get_member_id	$FLECS/$FLECS/flecs.h	/^ecs_entity_t ecs_meta_get_member_id($/;"	p	typeref:typename:FLECS_API ecs_entity_t	signature:(const ecs_meta_cursor_t * cursor)
ecs_meta_get_ptr	$FLECS/$FLECS/flecs.c	/^void* ecs_meta_get_ptr($/;"	f	typeref:typename:void *	signature:(ecs_meta_cursor_t * cursor)
ecs_meta_get_ptr	$FLECS/$FLECS/flecs.h	/^void* ecs_meta_get_ptr($/;"	p	typeref:typename:FLECS_API void *	signature:(ecs_meta_cursor_t * cursor)
ecs_meta_get_string	$FLECS/$FLECS/flecs.c	/^const char* ecs_meta_get_string($/;"	f	typeref:typename:const char *	signature:(const ecs_meta_cursor_t * cursor)
ecs_meta_get_string	$FLECS/$FLECS/flecs.h	/^const char* ecs_meta_get_string($/;"	p	typeref:typename:FLECS_API const char *	signature:(const ecs_meta_cursor_t * cursor)
ecs_meta_get_type	$FLECS/$FLECS/flecs.c	/^ecs_entity_t ecs_meta_get_type($/;"	f	typeref:typename:ecs_entity_t	signature:(const ecs_meta_cursor_t * cursor)
ecs_meta_get_type	$FLECS/$FLECS/flecs.h	/^ecs_entity_t ecs_meta_get_type($/;"	p	typeref:typename:FLECS_API ecs_entity_t	signature:(const ecs_meta_cursor_t * cursor)
ecs_meta_get_uint	$FLECS/$FLECS/flecs.c	/^uint64_t ecs_meta_get_uint($/;"	f	typeref:typename:uint64_t	signature:(const ecs_meta_cursor_t * cursor)
ecs_meta_get_uint	$FLECS/$FLECS/flecs.h	/^uint64_t ecs_meta_get_uint($/;"	p	typeref:typename:FLECS_API uint64_t	signature:(const ecs_meta_cursor_t * cursor)
ecs_meta_get_unit	$FLECS/$FLECS/flecs.c	/^ecs_entity_t ecs_meta_get_unit($/;"	f	typeref:typename:ecs_entity_t	signature:(const ecs_meta_cursor_t * cursor)
ecs_meta_get_unit	$FLECS/$FLECS/flecs.h	/^ecs_entity_t ecs_meta_get_unit($/;"	p	typeref:typename:FLECS_API ecs_entity_t	signature:(const ecs_meta_cursor_t * cursor)
ecs_meta_is_collection	$FLECS/$FLECS/flecs.c	/^bool ecs_meta_is_collection($/;"	f	typeref:typename:bool	signature:(const ecs_meta_cursor_t * cursor)
ecs_meta_is_collection	$FLECS/$FLECS/flecs.h	/^bool ecs_meta_is_collection($/;"	p	typeref:typename:FLECS_API bool	signature:(const ecs_meta_cursor_t * cursor)
ecs_meta_member	$FLECS/$FLECS/flecs.c	/^int ecs_meta_member($/;"	f	typeref:typename:int	signature:(ecs_meta_cursor_t * cursor,const char * name)
ecs_meta_member	$FLECS/$FLECS/flecs.h	/^int ecs_meta_member($/;"	p	typeref:typename:FLECS_API int	signature:(ecs_meta_cursor_t * cursor,const char * name)
ecs_meta_next	$FLECS/$FLECS/flecs.c	/^int ecs_meta_next($/;"	f	typeref:typename:int	signature:(ecs_meta_cursor_t * cursor)
ecs_meta_next	$FLECS/$FLECS/flecs.h	/^int ecs_meta_next($/;"	p	typeref:typename:FLECS_API int	signature:(ecs_meta_cursor_t * cursor)
ecs_meta_pop	$FLECS/$FLECS/flecs.c	/^int ecs_meta_pop($/;"	f	typeref:typename:int	signature:(ecs_meta_cursor_t * cursor)
ecs_meta_pop	$FLECS/$FLECS/flecs.h	/^int ecs_meta_pop($/;"	p	typeref:typename:FLECS_API int	signature:(ecs_meta_cursor_t * cursor)
ecs_meta_ptr_to_float	$FLECS/$FLECS/flecs.c	/^double ecs_meta_ptr_to_float($/;"	f	typeref:typename:double	signature:(ecs_primitive_kind_t type_kind,const void * ptr)
ecs_meta_ptr_to_float	$FLECS/$FLECS/flecs.h	/^double ecs_meta_ptr_to_float($/;"	p	typeref:typename:FLECS_API double	signature:(ecs_primitive_kind_t type_kind,const void * ptr)
ecs_meta_push	$FLECS/$FLECS/flecs.c	/^int ecs_meta_push($/;"	f	typeref:typename:int	signature:(ecs_meta_cursor_t * cursor)
ecs_meta_push	$FLECS/$FLECS/flecs.h	/^int ecs_meta_push($/;"	p	typeref:typename:FLECS_API int	signature:(ecs_meta_cursor_t * cursor)
ecs_meta_scope_t	$FLECS/$FLECS/flecs.h	/^} ecs_meta_scope_t;$/;"	t	typeref:struct:ecs_meta_scope_t
ecs_meta_serialize_t	$FLECS/$FLECS/flecs.h	/^typedef int (*ecs_meta_serialize_t)($/;"	t	typeref:typename:int (*)(const ecs_serializer_t * ser,const void * src)
ecs_meta_set_bool	$FLECS/$FLECS/flecs.c	/^int ecs_meta_set_bool($/;"	f	typeref:typename:int	signature:(ecs_meta_cursor_t * cursor,bool value)
ecs_meta_set_bool	$FLECS/$FLECS/flecs.h	/^int ecs_meta_set_bool($/;"	p	typeref:typename:FLECS_API int	signature:(ecs_meta_cursor_t * cursor,bool value)
ecs_meta_set_char	$FLECS/$FLECS/flecs.c	/^int ecs_meta_set_char($/;"	f	typeref:typename:int	signature:(ecs_meta_cursor_t * cursor,char value)
ecs_meta_set_char	$FLECS/$FLECS/flecs.h	/^int ecs_meta_set_char($/;"	p	typeref:typename:FLECS_API int	signature:(ecs_meta_cursor_t * cursor,char value)
ecs_meta_set_component	$FLECS/$FLECS/flecs.h	/^int ecs_meta_set_component($/;"	p	typeref:typename:FLECS_API int	signature:(ecs_meta_cursor_t * cursor,ecs_id_t value)
ecs_meta_set_entity	$FLECS/$FLECS/flecs.c	/^int ecs_meta_set_entity($/;"	f	typeref:typename:int	signature:(ecs_meta_cursor_t * cursor,ecs_entity_t value)
ecs_meta_set_entity	$FLECS/$FLECS/flecs.h	/^int ecs_meta_set_entity($/;"	p	typeref:typename:FLECS_API int	signature:(ecs_meta_cursor_t * cursor,ecs_entity_t value)
ecs_meta_set_float	$FLECS/$FLECS/flecs.c	/^int ecs_meta_set_float($/;"	f	typeref:typename:int	signature:(ecs_meta_cursor_t * cursor,double value)
ecs_meta_set_float	$FLECS/$FLECS/flecs.h	/^int ecs_meta_set_float($/;"	p	typeref:typename:FLECS_API int	signature:(ecs_meta_cursor_t * cursor,double value)
ecs_meta_set_id	$FLECS/$FLECS/flecs.c	/^int ecs_meta_set_id($/;"	f	typeref:typename:int	signature:(ecs_meta_cursor_t * cursor,ecs_entity_t value)
ecs_meta_set_id	$FLECS/$FLECS/flecs.h	/^int ecs_meta_set_id($/;"	p	typeref:typename:FLECS_API int	signature:(ecs_meta_cursor_t * cursor,ecs_id_t value)
ecs_meta_set_int	$FLECS/$FLECS/flecs.c	/^int ecs_meta_set_int($/;"	f	typeref:typename:int	signature:(ecs_meta_cursor_t * cursor,int64_t value)
ecs_meta_set_int	$FLECS/$FLECS/flecs.h	/^int ecs_meta_set_int($/;"	p	typeref:typename:FLECS_API int	signature:(ecs_meta_cursor_t * cursor,int64_t value)
ecs_meta_set_null	$FLECS/$FLECS/flecs.c	/^int ecs_meta_set_null($/;"	f	typeref:typename:int	signature:(ecs_meta_cursor_t * cursor)
ecs_meta_set_null	$FLECS/$FLECS/flecs.h	/^int ecs_meta_set_null($/;"	p	typeref:typename:FLECS_API int	signature:(ecs_meta_cursor_t * cursor)
ecs_meta_set_string	$FLECS/$FLECS/flecs.c	/^int ecs_meta_set_string($/;"	f	typeref:typename:int	signature:(ecs_meta_cursor_t * cursor,const char * value)
ecs_meta_set_string	$FLECS/$FLECS/flecs.h	/^int ecs_meta_set_string($/;"	p	typeref:typename:FLECS_API int	signature:(ecs_meta_cursor_t * cursor,const char * value)
ecs_meta_set_string_literal	$FLECS/$FLECS/flecs.c	/^int ecs_meta_set_string_literal($/;"	f	typeref:typename:int	signature:(ecs_meta_cursor_t * cursor,const char * value)
ecs_meta_set_string_literal	$FLECS/$FLECS/flecs.h	/^int ecs_meta_set_string_literal($/;"	p	typeref:typename:FLECS_API int	signature:(ecs_meta_cursor_t * cursor,const char * value)
ecs_meta_set_uint	$FLECS/$FLECS/flecs.c	/^int ecs_meta_set_uint($/;"	f	typeref:typename:int	signature:(ecs_meta_cursor_t * cursor,uint64_t value)
ecs_meta_set_uint	$FLECS/$FLECS/flecs.h	/^int ecs_meta_set_uint($/;"	p	typeref:typename:FLECS_API int	signature:(ecs_meta_cursor_t * cursor,uint64_t value)
ecs_meta_set_value	$FLECS/$FLECS/flecs.c	/^int ecs_meta_set_value($/;"	f	typeref:typename:int	signature:(ecs_meta_cursor_t * cursor,const ecs_value_t * value)
ecs_meta_set_value	$FLECS/$FLECS/flecs.h	/^int ecs_meta_set_value($/;"	p	typeref:typename:FLECS_API int	signature:(ecs_meta_cursor_t * cursor,const ecs_value_t * value)
ecs_meta_token_t	$FLECS/$FLECS/flecs.c	/^typedef char ecs_meta_token_t[ECS_META_IDENTIFIER_LENGTH];$/;"	t	typeref:typename:char[ECS_META_IDENTIFIER_LENGTH]	file:
ecs_meta_type_init_default_ctor	$FLECS/$FLECS/flecs.c	/^void ecs_meta_type_init_default_ctor(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:	signature:(ecs_iter_t * it)
ecs_meta_type_op_kind_t	$FLECS/$FLECS/flecs.h	/^} ecs_meta_type_op_kind_t;$/;"	t	typeref:enum:ecs_meta_type_op_kind_t
ecs_meta_type_op_t	$FLECS/$FLECS/flecs.h	/^} ecs_meta_type_op_t;$/;"	t	typeref:struct:ecs_meta_type_op_t
ecs_meta_type_serialized_init	$FLECS/$FLECS/flecs.c	/^void ecs_meta_type_serialized_init($/;"	p	typeref:typename:void	file:	signature:(ecs_iter_t * it)
ecs_metric	$FLECS/$FLECS/flecs.h	/^#define ecs_metric(/;"	d	signature:(world,...)
ecs_metric_copy	$FLECS/$FLECS/flecs.c	/^void ecs_metric_copy($/;"	f	typeref:typename:void	signature:(ecs_metric_t * m,int32_t dst,int32_t src)
ecs_metric_copy	$FLECS/$FLECS/flecs.h	/^void ecs_metric_copy($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_metric_t * m,int32_t dst,int32_t src)
ecs_metric_ctx_t	$FLECS/$FLECS/flecs.c	/^} ecs_metric_ctx_t;$/;"	t	typeref:struct:__anonb2bcda230b08	file:
ecs_metric_desc_t	$FLECS/$FLECS/flecs.h	/^} ecs_metric_desc_t;$/;"	t	typeref:struct:ecs_metric_desc_t
ecs_metric_init	$FLECS/$FLECS/flecs.c	/^ecs_entity_t ecs_metric_init($/;"	f	typeref:typename:ecs_entity_t	signature:(ecs_world_t * world,const ecs_metric_desc_t * desc)
ecs_metric_init	$FLECS/$FLECS/flecs.h	/^ecs_entity_t ecs_metric_init($/;"	p	typeref:typename:FLECS_API ecs_entity_t	signature:(ecs_world_t * world,const ecs_metric_desc_t * desc)
ecs_metric_reduce	$FLECS/$FLECS/flecs.c	/^void ecs_metric_reduce($/;"	f	typeref:typename:void	signature:(ecs_metric_t * dst,const ecs_metric_t * src,int32_t t_dst,int32_t t_src)
ecs_metric_reduce	$FLECS/$FLECS/flecs.h	/^void ecs_metric_reduce($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_metric_t * dst,const ecs_metric_t * src,int32_t t_dst,int32_t t_src)
ecs_metric_reduce_last	$FLECS/$FLECS/flecs.c	/^void ecs_metric_reduce_last($/;"	f	typeref:typename:void	signature:(ecs_metric_t * m,int32_t prev,int32_t count)
ecs_metric_reduce_last	$FLECS/$FLECS/flecs.h	/^void ecs_metric_reduce_last($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_metric_t * m,int32_t t,int32_t count)
ecs_metric_t	$FLECS/$FLECS/flecs.h	/^} ecs_metric_t;$/;"	t	typeref:union:ecs_metric_t
ecs_mini	$FLECS/$FLECS/flecs.c	/^ecs_world_t *ecs_mini(void) {$/;"	f	typeref:typename:ecs_world_t *	signature:(void)
ecs_mini	$FLECS/$FLECS/flecs.h	/^ecs_world_t* ecs_mini(void);$/;"	p	typeref:typename:FLECS_API ecs_world_t *	signature:(void)
ecs_mixin_kind_t	$FLECS/$FLECS/flecs.c	/^} ecs_mixin_kind_t;$/;"	t	typeref:enum:ecs_mixin_kind_t	file:
ecs_mixins_t	$FLECS/$FLECS/flecs.c	/^struct ecs_mixins_t {$/;"	s	file:
ecs_mixins_t	$FLECS/$FLECS/flecs.h	/^typedef struct ecs_mixins_t ecs_mixins_t;$/;"	t	typeref:struct:ecs_mixins_t
ecs_modified	$FLECS/$FLECS/flecs.h	/^#define ecs_modified(/;"	d	signature:(world,entity,component)
ecs_modified_id	$FLECS/$FLECS/flecs.c	/^void ecs_modified_id($/;"	f	typeref:typename:void	signature:(ecs_world_t * world,ecs_entity_t entity,ecs_id_t id)
ecs_modified_id	$FLECS/$FLECS/flecs.h	/^void ecs_modified_id($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_world_t * world,ecs_entity_t entity,ecs_id_t id)
ecs_modified_pair	$FLECS/$FLECS/flecs.h	/^#define ecs_modified_pair(/;"	d	signature:(world,subject,first,second)
ecs_module_action_t	$FLECS/$FLECS/flecs.h	/^typedef void (*ecs_module_action_t)($/;"	t	typeref:typename:void (*)(ecs_world_t * world)
ecs_module_init	$FLECS/$FLECS/flecs.c	/^ecs_entity_t ecs_module_init($/;"	f	typeref:typename:ecs_entity_t	signature:(ecs_world_t * world,const char * c_name,const ecs_component_desc_t * desc)
ecs_module_init	$FLECS/$FLECS/flecs.h	/^ecs_entity_t ecs_module_init($/;"	p	typeref:typename:FLECS_API ecs_entity_t	signature:(ecs_world_t * world,const char * c_name,const ecs_component_desc_t * desc)
ecs_module_path_from_c	$FLECS/$FLECS/flecs.c	/^char* ecs_module_path_from_c($/;"	f	typeref:typename:char *	signature:(const char * c_name)
ecs_module_path_from_c	$FLECS/$FLECS/flecs.h	/^char* ecs_module_path_from_c($/;"	p	typeref:typename:FLECS_API char *	signature:(const char * c_name)
ecs_monitor_set_t	$FLECS/$FLECS/flecs.c	/^} ecs_monitor_set_t;$/;"	t	typeref:struct:ecs_monitor_set_t	file:
ecs_monitor_t	$FLECS/$FLECS/flecs.c	/^} ecs_monitor_t;$/;"	t	typeref:struct:ecs_monitor_t	file:
ecs_move	$FLECS/$FLECS/flecs.h	/^#define ecs_move(/;"	d	signature:(type)
ecs_move_ctor_illegal	$FLECS/$FLECS/flecs.h	/^inline void ecs_move_ctor_illegal($/;"	f	namespace:flecs::_	typeref:typename:void	signature:(void *,void *,int32_t,const ecs_type_info_t * ti)
ecs_move_illegal	$FLECS/$FLECS/flecs.h	/^inline void ecs_move_illegal(void *, void *, int32_t, const ecs_type_info_t *ti) {$/;"	f	namespace:flecs::_	typeref:typename:void	signature:(void *,void *,int32_t,const ecs_type_info_t * ti)
ecs_move_t	$FLECS/$FLECS/flecs.h	/^typedef void (*ecs_move_t)($/;"	t	typeref:typename:void (*)(void * dst_ptr,void * src_ptr,int32_t count,const ecs_type_info_t * type_info)
ecs_new	$FLECS/$FLECS/flecs.h	/^#define ecs_new(world, T) ecs_new_/;"	d	signature:(world,T)
ecs_new_entity	$FLECS/$FLECS/flecs.h	/^#define ecs_new_entity(/;"	d	signature:(world,n)
ecs_new_from_fullpath	$FLECS/$FLECS/flecs.h	/^#define ecs_new_from_fullpath(/;"	d	signature:(world,path)
ecs_new_from_path	$FLECS/$FLECS/flecs.h	/^#define ecs_new_from_path(/;"	d	signature:(world,parent,path)
ecs_new_from_path_w_sep	$FLECS/$FLECS/flecs.c	/^ecs_entity_t ecs_new_from_path_w_sep($/;"	f	typeref:typename:ecs_entity_t	signature:(ecs_world_t * world,ecs_entity_t parent,const char * path,const char * sep,const char * prefix)
ecs_new_from_path_w_sep	$FLECS/$FLECS/flecs.h	/^ecs_entity_t ecs_new_from_path_w_sep($/;"	p	typeref:typename:FLECS_API ecs_entity_t	signature:(ecs_world_t * world,ecs_entity_t parent,const char * path,const char * sep,const char * prefix)
ecs_new_id	$FLECS/$FLECS/flecs.c	/^ecs_entity_t ecs_new_id($/;"	f	typeref:typename:ecs_entity_t	signature:(ecs_world_t * world)
ecs_new_id	$FLECS/$FLECS/flecs.h	/^ecs_entity_t ecs_new_id($/;"	p	typeref:typename:FLECS_API ecs_entity_t	signature:(ecs_world_t * world)
ecs_new_low_id	$FLECS/$FLECS/flecs.c	/^ecs_entity_t ecs_new_low_id($/;"	f	typeref:typename:ecs_entity_t	signature:(ecs_world_t * world)
ecs_new_low_id	$FLECS/$FLECS/flecs.h	/^ecs_entity_t ecs_new_low_id($/;"	p	typeref:typename:FLECS_API ecs_entity_t	signature:(ecs_world_t * world)
ecs_new_prefab	$FLECS/$FLECS/flecs.h	/^#define ecs_new_prefab(/;"	d	signature:(world,n)
ecs_new_w_id	$FLECS/$FLECS/flecs.c	/^ecs_entity_t ecs_new_w_id($/;"	f	typeref:typename:ecs_entity_t	signature:(ecs_world_t * world,ecs_id_t id)
ecs_new_w_id	$FLECS/$FLECS/flecs.h	/^ecs_entity_t ecs_new_w_id($/;"	p	typeref:typename:FLECS_API ecs_entity_t	signature:(ecs_world_t * world,ecs_id_t id)
ecs_new_w_pair	$FLECS/$FLECS/flecs.h	/^#define ecs_new_w_pair(/;"	d	signature:(world,first,second)
ecs_new_w_table	$FLECS/$FLECS/flecs.c	/^ecs_entity_t ecs_new_w_table($/;"	f	typeref:typename:ecs_entity_t	signature:(ecs_world_t * world,ecs_table_t * table)
ecs_new_w_table	$FLECS/$FLECS/flecs.h	/^ecs_entity_t ecs_new_w_table($/;"	p	typeref:typename:FLECS_API ecs_entity_t	signature:(ecs_world_t * world,ecs_table_t * table)
ecs_observable_t	$FLECS/$FLECS/flecs.h	/^typedef struct ecs_observable_t ecs_observable_t;$/;"	t	typeref:struct:ecs_observable_t
ecs_observer	$FLECS/$FLECS/flecs.h	/^#define ecs_observer(/;"	d	signature:(world,...)
ecs_observer_default_run_action	$FLECS/$FLECS/flecs.c	/^bool ecs_observer_default_run_action(ecs_iter_t *it) {$/;"	f	typeref:typename:bool	signature:(ecs_iter_t * it)
ecs_observer_default_run_action	$FLECS/$FLECS/flecs.h	/^bool ecs_observer_default_run_action($/;"	p	typeref:typename:FLECS_API bool	signature:(ecs_iter_t * it)
ecs_observer_desc_t	$FLECS/$FLECS/flecs.h	/^} ecs_observer_desc_t;$/;"	t	typeref:struct:ecs_observer_desc_t
ecs_observer_get_binding_ctx	$FLECS/$FLECS/flecs.c	/^void* ecs_observer_get_binding_ctx($/;"	f	typeref:typename:void *	signature:(const ecs_world_t * world,ecs_entity_t observer)
ecs_observer_get_binding_ctx	$FLECS/$FLECS/flecs.h	/^void* ecs_observer_get_binding_ctx($/;"	p	typeref:typename:FLECS_API void *	signature:(const ecs_world_t * world,ecs_entity_t observer)
ecs_observer_get_ctx	$FLECS/$FLECS/flecs.c	/^void* ecs_observer_get_ctx($/;"	f	typeref:typename:void *	signature:(const ecs_world_t * world,ecs_entity_t observer)
ecs_observer_get_ctx	$FLECS/$FLECS/flecs.h	/^void* ecs_observer_get_ctx($/;"	p	typeref:typename:FLECS_API void *	signature:(const ecs_world_t * world,ecs_entity_t observer)
ecs_observer_init	$FLECS/$FLECS/flecs.c	/^ecs_entity_t ecs_observer_init($/;"	f	typeref:typename:ecs_entity_t	signature:(ecs_world_t * world,const ecs_observer_desc_t * desc)
ecs_observer_init	$FLECS/$FLECS/flecs.h	/^ecs_entity_t ecs_observer_init($/;"	p	typeref:typename:FLECS_API ecs_entity_t	signature:(ecs_world_t * world,const ecs_observer_desc_t * desc)
ecs_observer_t	$FLECS/$FLECS/flecs.h	/^typedef struct ecs_observer_t ecs_observer_t;$/;"	t	typeref:struct:ecs_observer_t
ecs_observer_t_magic	$FLECS/$FLECS/flecs.h	/^#define ecs_observer_t_magic /;"	d
ecs_observer_t_mixins	$FLECS/$FLECS/flecs.c	/^ecs_mixins_t ecs_observer_t_mixins = {$/;"	v	typeref:typename:ecs_mixins_t
ecs_observer_t_tag	$FLECS/$FLECS/flecs.c	/^#define ecs_observer_t_tag /;"	d	file:
ecs_offset	$FLECS/$FLECS/flecs.h	/^#define ecs_offset(/;"	d	signature:(ptr,T,index)
ecs_on_add	$FLECS/$FLECS/flecs.h	/^#define ecs_on_add(/;"	d	signature:(type)
ecs_on_remove	$FLECS/$FLECS/flecs.h	/^#define ecs_on_remove(/;"	d	signature:(type)
ecs_on_set	$FLECS/$FLECS/flecs.c	/^void ecs_on_set(EcsIdentifier)(ecs_iter_t *it) {$/;"	f	file:	signature:(EcsIdentifier)
ecs_on_set	$FLECS/$FLECS/flecs.h	/^#define ecs_on_set(/;"	d	signature:(type)
ecs_oneof_metric_ctx_t	$FLECS/$FLECS/flecs.c	/^} ecs_oneof_metric_ctx_t;$/;"	t	typeref:struct:__anonb2bcda230e08	file:
ecs_opaque	$FLECS/$FLECS/flecs.h	/^#define ecs_opaque(/;"	d	signature:(world,...)
ecs_opaque_desc_t	$FLECS/$FLECS/flecs.h	/^} ecs_opaque_desc_t;$/;"	t	typeref:struct:ecs_opaque_desc_t
ecs_opaque_init	$FLECS/$FLECS/flecs.c	/^ecs_entity_t ecs_opaque_init($/;"	f	typeref:typename:ecs_entity_t	signature:(ecs_world_t * world,const ecs_opaque_desc_t * desc)
ecs_opaque_init	$FLECS/$FLECS/flecs.h	/^ecs_entity_t ecs_opaque_init($/;"	p	typeref:typename:FLECS_API ecs_entity_t	signature:(ecs_world_t * world,const ecs_opaque_desc_t * desc)
ecs_oper_kind_t	$FLECS/$FLECS/flecs.h	/^} ecs_oper_kind_t;$/;"	t	typeref:enum:ecs_oper_kind_t
ecs_order_by_action_t	$FLECS/$FLECS/flecs.h	/^typedef int (*ecs_order_by_action_t)($/;"	t	typeref:typename:int (*)(ecs_entity_t e1,const void * ptr1,ecs_entity_t e2,const void * ptr2)
ecs_os_abort	$FLECS/$FLECS/flecs.h	/^#define ecs_os_abort(/;"	d	signature:()
ecs_os_adec	$FLECS/$FLECS/flecs.h	/^#define ecs_os_adec(/;"	d	signature:(value)
ecs_os_ainc	$FLECS/$FLECS/flecs.h	/^#define ecs_os_ainc(/;"	d	signature:(value)
ecs_os_alloca	$FLECS/$FLECS/flecs.h	/^#define ecs_os_alloca(/;"	d	signature:(size)
ecs_os_alloca_n	$FLECS/$FLECS/flecs.h	/^#define ecs_os_alloca_n(/;"	d	signature:(T,count)
ecs_os_alloca_t	$FLECS/$FLECS/flecs.h	/^#define ecs_os_alloca_t(/;"	d	signature:(T)
ecs_os_api	$FLECS/$FLECS/flecs.c	/^ecs_os_api_t ecs_os_api = {$/;"	v	typeref:typename:ecs_os_api_t
ecs_os_api_abort_t	$FLECS/$FLECS/flecs.h	/^void (*ecs_os_api_abort_t)($/;"	t	typeref:typename:void (*)(void)
ecs_os_api_ainc_t	$FLECS/$FLECS/flecs.h	/^int32_t (*ecs_os_api_ainc_t)($/;"	t	typeref:typename:int32_t (*)(int32_t * value)
ecs_os_api_calloc	$FLECS/$FLECS/flecs.c	/^void* ecs_os_api_calloc(ecs_size_t size) {$/;"	f	typeref:typename:void *	file:	signature:(ecs_size_t size)
ecs_os_api_calloc_count	$FLECS/$FLECS/flecs.c	/^int64_t ecs_os_api_calloc_count = 0;$/;"	v	typeref:typename:int64_t
ecs_os_api_calloc_t	$FLECS/$FLECS/flecs.h	/^void* (*ecs_os_api_calloc_t)($/;"	t	typeref:typename:void * (*)(ecs_size_t size)
ecs_os_api_cond_broadcast_t	$FLECS/$FLECS/flecs.h	/^void (*ecs_os_api_cond_broadcast_t)($/;"	t	typeref:typename:void (*)(ecs_os_cond_t cond)
ecs_os_api_cond_free_t	$FLECS/$FLECS/flecs.h	/^void (*ecs_os_api_cond_free_t)($/;"	t	typeref:typename:void (*)(ecs_os_cond_t cond)
ecs_os_api_cond_new_t	$FLECS/$FLECS/flecs.h	/^ecs_os_cond_t (*ecs_os_api_cond_new_t)($/;"	t	typeref:typename:ecs_os_cond_t (*)(void)
ecs_os_api_cond_signal_t	$FLECS/$FLECS/flecs.h	/^void (*ecs_os_api_cond_signal_t)($/;"	t	typeref:typename:void (*)(ecs_os_cond_t cond)
ecs_os_api_cond_wait_t	$FLECS/$FLECS/flecs.h	/^void (*ecs_os_api_cond_wait_t)($/;"	t	typeref:typename:void (*)(ecs_os_cond_t cond,ecs_os_mutex_t mutex)
ecs_os_api_dlclose_t	$FLECS/$FLECS/flecs.h	/^void (*ecs_os_api_dlclose_t)($/;"	t	typeref:typename:void (*)(ecs_os_dl_t lib)
ecs_os_api_dlopen_t	$FLECS/$FLECS/flecs.h	/^ecs_os_dl_t (*ecs_os_api_dlopen_t)($/;"	t	typeref:typename:ecs_os_dl_t (*)(const char * libname)
ecs_os_api_dlproc_t	$FLECS/$FLECS/flecs.h	/^ecs_os_proc_t (*ecs_os_api_dlproc_t)($/;"	t	typeref:typename:ecs_os_proc_t (*)(ecs_os_dl_t lib,const char * procname)
ecs_os_api_enable_high_timer_resolution_t	$FLECS/$FLECS/flecs.h	/^void (*ecs_os_api_enable_high_timer_resolution_t)($/;"	t	typeref:typename:void (*)(bool enable)
ecs_os_api_fini_t	$FLECS/$FLECS/flecs.h	/^void (*ecs_os_api_fini_t)(void);$/;"	t	typeref:typename:void (*)(void)
ecs_os_api_free	$FLECS/$FLECS/flecs.c	/^void ecs_os_api_free(void *ptr) {$/;"	f	typeref:typename:void	file:	signature:(void * ptr)
ecs_os_api_free_count	$FLECS/$FLECS/flecs.c	/^int64_t ecs_os_api_free_count = 0;$/;"	v	typeref:typename:int64_t
ecs_os_api_free_t	$FLECS/$FLECS/flecs.h	/^void (*ecs_os_api_free_t)($/;"	t	typeref:typename:void (*)(void * ptr)
ecs_os_api_get_time_t	$FLECS/$FLECS/flecs.h	/^void (*ecs_os_api_get_time_t)($/;"	t	typeref:typename:void (*)(ecs_time_t * time_out)
ecs_os_api_impl	$FLECS/$FLECS/flecs.c	/^void ecs_os_api_impl(ecs_os_api_t *api);$/;"	p	typeref:typename:void	file:	signature:(ecs_os_api_t * api)
ecs_os_api_init_count	$FLECS/$FLECS/flecs.c	/^static int ecs_os_api_init_count = 0;$/;"	v	typeref:typename:int	file:
ecs_os_api_init_t	$FLECS/$FLECS/flecs.h	/^void (*ecs_os_api_init_t)(void);$/;"	t	typeref:typename:void (*)(void)
ecs_os_api_initialized	$FLECS/$FLECS/flecs.c	/^static bool ecs_os_api_initialized = false;$/;"	v	typeref:typename:bool	file:
ecs_os_api_initializing	$FLECS/$FLECS/flecs.c	/^static bool ecs_os_api_initializing = false;$/;"	v	typeref:typename:bool	file:
ecs_os_api_lainc_t	$FLECS/$FLECS/flecs.h	/^int64_t (*ecs_os_api_lainc_t)($/;"	t	typeref:typename:int64_t (*)(int64_t * value)
ecs_os_api_log_t	$FLECS/$FLECS/flecs.h	/^void (*ecs_os_api_log_t)($/;"	t	typeref:typename:void (*)(int32_t level,const char * file,int32_t line,const char * msg)
ecs_os_api_malloc	$FLECS/$FLECS/flecs.c	/^void* ecs_os_api_malloc(ecs_size_t size) {$/;"	f	typeref:typename:void *	file:	signature:(ecs_size_t size)
ecs_os_api_malloc_count	$FLECS/$FLECS/flecs.c	/^int64_t ecs_os_api_malloc_count = 0;$/;"	v	typeref:typename:int64_t
ecs_os_api_malloc_t	$FLECS/$FLECS/flecs.h	/^void* (*ecs_os_api_malloc_t)($/;"	t	typeref:typename:void * (*)(ecs_size_t size)
ecs_os_api_module_to_dl	$FLECS/$FLECS/flecs.c	/^char* ecs_os_api_module_to_dl(const char *module) {$/;"	f	typeref:typename:char *	file:	signature:(const char * module)
ecs_os_api_module_to_etc	$FLECS/$FLECS/flecs.c	/^char* ecs_os_api_module_to_etc(const char *module) {$/;"	f	typeref:typename:char *	file:	signature:(const char * module)
ecs_os_api_module_to_path_t	$FLECS/$FLECS/flecs.h	/^char* (*ecs_os_api_module_to_path_t)($/;"	t	typeref:typename:char * (*)(const char * module_id)
ecs_os_api_mutex_free_t	$FLECS/$FLECS/flecs.h	/^void (*ecs_os_api_mutex_free_t)($/;"	t	typeref:typename:void (*)(ecs_os_mutex_t mutex)
ecs_os_api_mutex_lock_t	$FLECS/$FLECS/flecs.h	/^void (*ecs_os_api_mutex_lock_t)($/;"	t	typeref:typename:void (*)(ecs_os_mutex_t mutex)
ecs_os_api_mutex_new_t	$FLECS/$FLECS/flecs.h	/^ecs_os_mutex_t (*ecs_os_api_mutex_new_t)($/;"	t	typeref:typename:ecs_os_mutex_t (*)(void)
ecs_os_api_mutex_unlock_t	$FLECS/$FLECS/flecs.h	/^void (*ecs_os_api_mutex_unlock_t)($/;"	t	typeref:typename:void (*)(ecs_os_mutex_t mutex)
ecs_os_api_now_t	$FLECS/$FLECS/flecs.h	/^uint64_t (*ecs_os_api_now_t)(void);$/;"	t	typeref:typename:uint64_t (*)(void)
ecs_os_api_realloc	$FLECS/$FLECS/flecs.c	/^void* ecs_os_api_realloc(void *ptr, ecs_size_t size) {$/;"	f	typeref:typename:void *	file:	signature:(void * ptr,ecs_size_t size)
ecs_os_api_realloc_count	$FLECS/$FLECS/flecs.c	/^int64_t ecs_os_api_realloc_count = 0;$/;"	v	typeref:typename:int64_t
ecs_os_api_realloc_t	$FLECS/$FLECS/flecs.h	/^void* (*ecs_os_api_realloc_t)($/;"	t	typeref:typename:void * (*)(void * ptr,ecs_size_t size)
ecs_os_api_sleep_t	$FLECS/$FLECS/flecs.h	/^void (*ecs_os_api_sleep_t)($/;"	t	typeref:typename:void (*)(int32_t sec,int32_t nanosec)
ecs_os_api_strdup	$FLECS/$FLECS/flecs.c	/^char* ecs_os_api_strdup(const char *str) {$/;"	f	typeref:typename:char *	file:	signature:(const char * str)
ecs_os_api_strdup_t	$FLECS/$FLECS/flecs.h	/^char* (*ecs_os_api_strdup_t)($/;"	t	typeref:typename:char * (*)(const char * str)
ecs_os_api_t	$FLECS/$FLECS/flecs.h	/^} ecs_os_api_t;$/;"	t	typeref:struct:ecs_os_api_t
ecs_os_api_task_join_t	$FLECS/$FLECS/flecs.h	/^void* (*ecs_os_api_task_join_t)($/;"	t	typeref:typename:void * (*)(ecs_os_thread_t thread)
ecs_os_api_task_new_t	$FLECS/$FLECS/flecs.h	/^ecs_os_thread_t (*ecs_os_api_task_new_t)($/;"	t	typeref:typename:ecs_os_thread_t (*)(ecs_os_thread_callback_t callback,void * param)
ecs_os_api_thread_join_t	$FLECS/$FLECS/flecs.h	/^void* (*ecs_os_api_thread_join_t)($/;"	t	typeref:typename:void * (*)(ecs_os_thread_t thread)
ecs_os_api_thread_new_t	$FLECS/$FLECS/flecs.h	/^ecs_os_thread_t (*ecs_os_api_thread_new_t)($/;"	t	typeref:typename:ecs_os_thread_t (*)(ecs_os_thread_callback_t callback,void * param)
ecs_os_api_thread_self_t	$FLECS/$FLECS/flecs.h	/^ecs_os_thread_id_t (*ecs_os_api_thread_self_t)(void);$/;"	t	typeref:typename:ecs_os_thread_id_t (*)(void)
ecs_os_calloc	$FLECS/$FLECS/flecs.h	/^#define ecs_os_calloc(/;"	d	signature:(size)
ecs_os_calloc_n	$FLECS/$FLECS/flecs.h	/^#define ecs_os_calloc_n(/;"	d	signature:(T,count)
ecs_os_calloc_t	$FLECS/$FLECS/flecs.h	/^#define ecs_os_calloc_t(/;"	d	signature:(T)
ecs_os_cond_broadcast	$FLECS/$FLECS/flecs.h	/^#define ecs_os_cond_broadcast(/;"	d	signature:(cond)
ecs_os_cond_free	$FLECS/$FLECS/flecs.h	/^#define ecs_os_cond_free(/;"	d	signature:(cond)
ecs_os_cond_new	$FLECS/$FLECS/flecs.h	/^#define ecs_os_cond_new(/;"	d	signature:()
ecs_os_cond_signal	$FLECS/$FLECS/flecs.h	/^#define ecs_os_cond_signal(/;"	d	signature:(cond)
ecs_os_cond_t	$FLECS/$FLECS/flecs.h	/^typedef uintptr_t ecs_os_cond_t;$/;"	t	typeref:typename:uintptr_t
ecs_os_cond_wait	$FLECS/$FLECS/flecs.h	/^#define ecs_os_cond_wait(/;"	d	signature:(cond,mutex)
ecs_os_dbg	$FLECS/$FLECS/flecs.c	/^void ecs_os_dbg($/;"	f	typeref:typename:void	signature:(const char * file,int32_t line,const char * msg)
ecs_os_dbg	$FLECS/$FLECS/flecs.h	/^void ecs_os_dbg(const char *file, int32_t line, const char *msg);$/;"	p	typeref:typename:FLECS_API void	signature:(const char * file,int32_t line,const char * msg)
ecs_os_dec	$FLECS/$FLECS/flecs.h	/^#define ecs_os_dec(/;"	d	signature:(v)
ecs_os_dl_t	$FLECS/$FLECS/flecs.h	/^typedef uintptr_t ecs_os_dl_t;$/;"	t	typeref:typename:uintptr_t
ecs_os_dlclose	$FLECS/$FLECS/flecs.h	/^#define ecs_os_dlclose(/;"	d	signature:(lib)
ecs_os_dlopen	$FLECS/$FLECS/flecs.h	/^#define ecs_os_dlopen(/;"	d	signature:(libname)
ecs_os_dlproc	$FLECS/$FLECS/flecs.h	/^#define ecs_os_dlproc(/;"	d	signature:(lib,procname)
ecs_os_err	$FLECS/$FLECS/flecs.c	/^void ecs_os_err($/;"	f	typeref:typename:void	signature:(const char * file,int32_t line,const char * msg)
ecs_os_err	$FLECS/$FLECS/flecs.h	/^void ecs_os_err(const char *file, int32_t line, const char *msg);$/;"	p	typeref:typename:FLECS_API void	signature:(const char * file,int32_t line,const char * msg)
ecs_os_fatal	$FLECS/$FLECS/flecs.c	/^void ecs_os_fatal($/;"	f	typeref:typename:void	signature:(const char * file,int32_t line,const char * msg)
ecs_os_fatal	$FLECS/$FLECS/flecs.h	/^void ecs_os_fatal(const char *file, int32_t line, const char *msg);$/;"	p	typeref:typename:FLECS_API void	signature:(const char * file,int32_t line,const char * msg)
ecs_os_fini	$FLECS/$FLECS/flecs.c	/^void ecs_os_fini(void) {$/;"	f	typeref:typename:void	signature:(void)
ecs_os_fini	$FLECS/$FLECS/flecs.h	/^void ecs_os_fini(void);$/;"	p	typeref:typename:FLECS_API void	signature:(void)
ecs_os_fopen	$FLECS/$FLECS/flecs.h	/^#define ecs_os_fopen(/;"	d	signature:(result,file,mode)
ecs_os_free	$FLECS/$FLECS/flecs.h	/^#define ecs_os_free(/;"	d	signature:(ptr)
ecs_os_get_api	$FLECS/$FLECS/flecs.c	/^ecs_os_api_t ecs_os_get_api(void) {$/;"	f	typeref:typename:ecs_os_api_t	signature:(void)
ecs_os_get_api	$FLECS/$FLECS/flecs.h	/^ecs_os_api_t ecs_os_get_api(void);$/;"	p	typeref:typename:FLECS_API ecs_os_api_t	signature:(void)
ecs_os_get_time	$FLECS/$FLECS/flecs.h	/^#define ecs_os_get_time(/;"	d	signature:(time_out)
ecs_os_gettime	$FLECS/$FLECS/flecs.c	/^void ecs_os_gettime(ecs_time_t *time) {$/;"	f	typeref:typename:void	file:	signature:(ecs_time_t * time)
ecs_os_has_dl	$FLECS/$FLECS/flecs.c	/^bool ecs_os_has_dl(void) {$/;"	f	typeref:typename:bool	signature:(void)
ecs_os_has_dl	$FLECS/$FLECS/flecs.h	/^bool ecs_os_has_dl(void);$/;"	p	typeref:typename:FLECS_API bool	signature:(void)
ecs_os_has_heap	$FLECS/$FLECS/flecs.c	/^bool ecs_os_has_heap(void) {$/;"	f	typeref:typename:bool	signature:(void)
ecs_os_has_heap	$FLECS/$FLECS/flecs.h	/^bool ecs_os_has_heap(void);$/;"	p	typeref:typename:FLECS_API bool	signature:(void)
ecs_os_has_logging	$FLECS/$FLECS/flecs.c	/^bool ecs_os_has_logging(void) {$/;"	f	typeref:typename:bool	signature:(void)
ecs_os_has_logging	$FLECS/$FLECS/flecs.h	/^bool ecs_os_has_logging(void);$/;"	p	typeref:typename:FLECS_API bool	signature:(void)
ecs_os_has_modules	$FLECS/$FLECS/flecs.c	/^bool ecs_os_has_modules(void) {$/;"	f	typeref:typename:bool	signature:(void)
ecs_os_has_modules	$FLECS/$FLECS/flecs.h	/^bool ecs_os_has_modules(void);$/;"	p	typeref:typename:FLECS_API bool	signature:(void)
ecs_os_has_task_support	$FLECS/$FLECS/flecs.c	/^bool ecs_os_has_task_support(void) {$/;"	f	typeref:typename:bool	signature:(void)
ecs_os_has_task_support	$FLECS/$FLECS/flecs.h	/^bool ecs_os_has_task_support(void);$/;"	p	typeref:typename:FLECS_API bool	signature:(void)
ecs_os_has_threading	$FLECS/$FLECS/flecs.c	/^bool ecs_os_has_threading(void) {$/;"	f	typeref:typename:bool	signature:(void)
ecs_os_has_threading	$FLECS/$FLECS/flecs.h	/^bool ecs_os_has_threading(void);$/;"	p	typeref:typename:FLECS_API bool	signature:(void)
ecs_os_has_time	$FLECS/$FLECS/flecs.c	/^bool ecs_os_has_time(void) {$/;"	f	typeref:typename:bool	signature:(void)
ecs_os_has_time	$FLECS/$FLECS/flecs.h	/^bool ecs_os_has_time(void);$/;"	p	typeref:typename:FLECS_API bool	signature:(void)
ecs_os_inc	$FLECS/$FLECS/flecs.h	/^#define ecs_os_inc(/;"	d	signature:(v)
ecs_os_init	$FLECS/$FLECS/flecs.c	/^void ecs_os_init(void)$/;"	f	typeref:typename:void	signature:(void)
ecs_os_init	$FLECS/$FLECS/flecs.h	/^void ecs_os_init(void);$/;"	p	typeref:typename:FLECS_API void	signature:(void)
ecs_os_isinf	$FLECS/$FLECS/flecs.h	/^#define ecs_os_isinf(/;"	d	signature:(val)
ecs_os_isnan	$FLECS/$FLECS/flecs.h	/^#define ecs_os_isnan(/;"	d	signature:(val)
ecs_os_ladec	$FLECS/$FLECS/flecs.h	/^#define ecs_os_ladec(/;"	d	signature:(value)
ecs_os_lainc	$FLECS/$FLECS/flecs.h	/^#define ecs_os_lainc(/;"	d	signature:(value)
ecs_os_ldec	$FLECS/$FLECS/flecs.h	/^#define ecs_os_ldec(/;"	d	signature:(v)
ecs_os_linc	$FLECS/$FLECS/flecs.h	/^#define ecs_os_linc(/;"	d	signature:(v)
ecs_os_malloc	$FLECS/$FLECS/flecs.h	/^#define ecs_os_malloc(/;"	d	signature:(size)
ecs_os_malloc_n	$FLECS/$FLECS/flecs.h	/^#define ecs_os_malloc_n(/;"	d	signature:(T,count)
ecs_os_malloc_t	$FLECS/$FLECS/flecs.h	/^#define ecs_os_malloc_t(/;"	d	signature:(T)
ecs_os_memcmp	$FLECS/$FLECS/flecs.h	/^#define ecs_os_memcmp(/;"	d	signature:(ptr1,ptr2,num)
ecs_os_memcmp_t	$FLECS/$FLECS/flecs.h	/^#define ecs_os_memcmp_t(/;"	d	signature:(ptr1,ptr2,T)
ecs_os_memcpy	$FLECS/$FLECS/flecs.h	/^#define ecs_os_memcpy(/;"	d	signature:(ptr1,ptr2,num)
ecs_os_memcpy_n	$FLECS/$FLECS/flecs.h	/^#define ecs_os_memcpy_n(/;"	d	signature:(ptr1,ptr2,T,count)
ecs_os_memcpy_t	$FLECS/$FLECS/flecs.h	/^#define ecs_os_memcpy_t(/;"	d	signature:(ptr1,ptr2,T)
ecs_os_memdup	$FLECS/$FLECS/flecs.c	/^void* ecs_os_memdup($/;"	f	typeref:typename:void *	signature:(const void * src,ecs_size_t size)
ecs_os_memdup	$FLECS/$FLECS/flecs.h	/^void* ecs_os_memdup($/;"	p	typeref:typename:FLECS_API void *	signature:(const void * src,ecs_size_t size)
ecs_os_memdup_n	$FLECS/$FLECS/flecs.h	/^#define ecs_os_memdup_n(/;"	d	signature:(ptr,T,count)
ecs_os_memdup_t	$FLECS/$FLECS/flecs.h	/^#define ecs_os_memdup_t(/;"	d	signature:(ptr,T)
ecs_os_memmove	$FLECS/$FLECS/flecs.h	/^#define ecs_os_memmove(/;"	d	signature:(dst,src,size)
ecs_os_memmove_n	$FLECS/$FLECS/flecs.h	/^#define ecs_os_memmove_n(/;"	d	signature:(ptr1,ptr2,T,count)
ecs_os_memmove_t	$FLECS/$FLECS/flecs.h	/^#define ecs_os_memmove_t(/;"	d	signature:(ptr1,ptr2,T)
ecs_os_memset	$FLECS/$FLECS/flecs.h	/^#define ecs_os_memset(/;"	d	signature:(ptr,value,num)
ecs_os_memset_n	$FLECS/$FLECS/flecs.h	/^#define ecs_os_memset_n(/;"	d	signature:(ptr,value,T,count)
ecs_os_memset_t	$FLECS/$FLECS/flecs.h	/^#define ecs_os_memset_t(/;"	d	signature:(ptr,value,T)
ecs_os_module_to_dl	$FLECS/$FLECS/flecs.h	/^#define ecs_os_module_to_dl(/;"	d	signature:(lib)
ecs_os_module_to_etc	$FLECS/$FLECS/flecs.h	/^#define ecs_os_module_to_etc(/;"	d	signature:(lib)
ecs_os_mutex_free	$FLECS/$FLECS/flecs.h	/^#define ecs_os_mutex_free(/;"	d	signature:(mutex)
ecs_os_mutex_lock	$FLECS/$FLECS/flecs.h	/^#define ecs_os_mutex_lock(/;"	d	signature:(mutex)
ecs_os_mutex_new	$FLECS/$FLECS/flecs.h	/^#define ecs_os_mutex_new(/;"	d	signature:()
ecs_os_mutex_t	$FLECS/$FLECS/flecs.h	/^typedef uintptr_t ecs_os_mutex_t;$/;"	t	typeref:typename:uintptr_t
ecs_os_mutex_unlock	$FLECS/$FLECS/flecs.h	/^#define ecs_os_mutex_unlock(/;"	d	signature:(mutex)
ecs_os_now	$FLECS/$FLECS/flecs.h	/^#define ecs_os_now(/;"	d	signature:()
ecs_os_proc_t	$FLECS/$FLECS/flecs.h	/^typedef void (*ecs_os_proc_t)(void);$/;"	t	typeref:typename:void (*)(void)
ecs_os_realloc	$FLECS/$FLECS/flecs.h	/^#define ecs_os_realloc(/;"	d	signature:(ptr,size)
ecs_os_realloc_n	$FLECS/$FLECS/flecs.h	/^#define ecs_os_realloc_n(/;"	d	signature:(ptr,T,count)
ecs_os_realloc_t	$FLECS/$FLECS/flecs.h	/^#define ecs_os_realloc_t(/;"	d	signature:(ptr,T)
ecs_os_set_api	$FLECS/$FLECS/flecs.c	/^void ecs_os_set_api($/;"	f	typeref:typename:void	signature:(ecs_os_api_t * os_api)
ecs_os_set_api	$FLECS/$FLECS/flecs.h	/^void ecs_os_set_api($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_os_api_t * os_api)
ecs_os_set_api_defaults	$FLECS/$FLECS/flecs.c	/^void ecs_os_set_api_defaults(void)$/;"	f	typeref:typename:void	signature:(void)
ecs_os_set_api_defaults	$FLECS/$FLECS/flecs.h	/^void ecs_os_set_api_defaults(void);$/;"	p	typeref:typename:FLECS_API void	signature:(void)
ecs_os_sleep	$FLECS/$FLECS/flecs.h	/^#define ecs_os_sleep(/;"	d	signature:(sec,nanosec)
ecs_os_sock_t	$FLECS/$FLECS/flecs.h	/^typedef uintptr_t ecs_os_sock_t;$/;"	t	typeref:typename:uintptr_t
ecs_os_sprintf	$FLECS/$FLECS/flecs.h	/^#define ecs_os_sprintf(/;"	d	signature:(ptr,...)
ecs_os_strcat	$FLECS/$FLECS/flecs.h	/^#define ecs_os_strcat(/;"	d	signature:(str1,str2)
ecs_os_strcmp	$FLECS/$FLECS/flecs.h	/^#define ecs_os_strcmp(/;"	d	signature:(str1,str2)
ecs_os_strcpy	$FLECS/$FLECS/flecs.h	/^#define ecs_os_strcpy(/;"	d	signature:(str1,str2)
ecs_os_strdup	$FLECS/$FLECS/flecs.h	/^#define ecs_os_strdup(/;"	d	signature:(str)
ecs_os_strerror	$FLECS/$FLECS/flecs.c	/^const char* ecs_os_strerror(int err) {$/;"	f	typeref:typename:const char *	signature:(int err)
ecs_os_strerror	$FLECS/$FLECS/flecs.h	/^const char* ecs_os_strerror(int err);$/;"	p	typeref:typename:FLECS_API const char *	signature:(int err)
ecs_os_strlen	$FLECS/$FLECS/flecs.h	/^#define ecs_os_strlen(/;"	d	signature:(str)
ecs_os_strncmp	$FLECS/$FLECS/flecs.h	/^#define ecs_os_strncmp(/;"	d	signature:(str1,str2,num)
ecs_os_strncpy	$FLECS/$FLECS/flecs.h	/^#define ecs_os_strncpy(/;"	d	signature:(str1,str2,num)
ecs_os_strset	$FLECS/$FLECS/flecs.c	/^void ecs_os_strset(char **str, const char *value) {$/;"	f	typeref:typename:void	signature:(char ** str,const char * value)
ecs_os_strset	$FLECS/$FLECS/flecs.h	/^void ecs_os_strset(char **str, const char *value);$/;"	p	typeref:typename:FLECS_API void	signature:(char ** str,const char * value)
ecs_os_task_join	$FLECS/$FLECS/flecs.h	/^#define ecs_os_task_join(/;"	d	signature:(thread)
ecs_os_task_new	$FLECS/$FLECS/flecs.h	/^#define ecs_os_task_new(/;"	d	signature:(callback,param)
ecs_os_thread_callback_t	$FLECS/$FLECS/flecs.h	/^void* (*ecs_os_thread_callback_t)($/;"	t	typeref:typename:void * (*)(void *)
ecs_os_thread_id_t	$FLECS/$FLECS/flecs.h	/^typedef uint64_t ecs_os_thread_id_t;$/;"	t	typeref:typename:uint64_t
ecs_os_thread_join	$FLECS/$FLECS/flecs.h	/^#define ecs_os_thread_join(/;"	d	signature:(thread)
ecs_os_thread_new	$FLECS/$FLECS/flecs.h	/^#define ecs_os_thread_new(/;"	d	signature:(callback,param)
ecs_os_thread_self	$FLECS/$FLECS/flecs.h	/^#define ecs_os_thread_self(/;"	d	signature:()
ecs_os_thread_t	$FLECS/$FLECS/flecs.h	/^typedef uintptr_t ecs_os_thread_t;$/;"	t	typeref:typename:uintptr_t
ecs_os_trace	$FLECS/$FLECS/flecs.c	/^void ecs_os_trace($/;"	f	typeref:typename:void	signature:(const char * file,int32_t line,const char * msg)
ecs_os_trace	$FLECS/$FLECS/flecs.h	/^void ecs_os_trace(const char *file, int32_t line, const char *msg);$/;"	p	typeref:typename:FLECS_API void	signature:(const char * file,int32_t line,const char * msg)
ecs_os_vsprintf	$FLECS/$FLECS/flecs.h	/^#define ecs_os_vsprintf(/;"	d	signature:(ptr,fmt,args)
ecs_os_warn	$FLECS/$FLECS/flecs.c	/^void ecs_os_warn($/;"	f	typeref:typename:void	signature:(const char * file,int32_t line,const char * msg)
ecs_os_warn	$FLECS/$FLECS/flecs.h	/^void ecs_os_warn(const char *file, int32_t line, const char *msg);$/;"	p	typeref:typename:FLECS_API void	signature:(const char * file,int32_t line,const char * msg)
ecs_os_zeromem	$FLECS/$FLECS/flecs.h	/^#define ecs_os_zeromem(/;"	d	signature:(ptr)
ecs_override	$FLECS/$FLECS/flecs.h	/^#define ecs_override(/;"	d	signature:(world,entity,T)
ecs_override_id	$FLECS/$FLECS/flecs.c	/^void ecs_override_id($/;"	f	typeref:typename:void	signature:(ecs_world_t * world,ecs_entity_t entity,ecs_id_t id)
ecs_override_id	$FLECS/$FLECS/flecs.h	/^void ecs_override_id($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_world_t * world,ecs_entity_t entity,ecs_id_t id)
ecs_override_pair	$FLECS/$FLECS/flecs.h	/^#define ecs_override_pair(/;"	d	signature:(world,subject,first,second)
ecs_owns	$FLECS/$FLECS/flecs.h	/^#define ecs_owns(/;"	d	signature:(world,entity,T)
ecs_owns_id	$FLECS/$FLECS/flecs.c	/^bool ecs_owns_id($/;"	f	typeref:typename:bool	signature:(const ecs_world_t * world,ecs_entity_t entity,ecs_id_t id)
ecs_owns_id	$FLECS/$FLECS/flecs.h	/^bool ecs_owns_id($/;"	p	typeref:typename:FLECS_API bool	signature:(const ecs_world_t * world,ecs_entity_t entity,ecs_id_t id)
ecs_owns_pair	$FLECS/$FLECS/flecs.h	/^#define ecs_owns_pair(/;"	d	signature:(world,entity,first,second)
ecs_page_iter	$FLECS/$FLECS/flecs.c	/^ecs_iter_t ecs_page_iter($/;"	f	typeref:typename:ecs_iter_t	signature:(const ecs_iter_t * it,int32_t offset,int32_t limit)
ecs_page_iter	$FLECS/$FLECS/flecs.h	/^ecs_iter_t ecs_page_iter($/;"	p	typeref:typename:FLECS_API ecs_iter_t	signature:(const ecs_iter_t * it,int32_t offset,int32_t limit)
ecs_page_iter_t	$FLECS/$FLECS/flecs.h	/^} ecs_page_iter_t;$/;"	t	typeref:struct:ecs_page_iter_t
ecs_page_next	$FLECS/$FLECS/flecs.c	/^bool ecs_page_next($/;"	f	typeref:typename:bool	signature:(ecs_iter_t * it)
ecs_page_next	$FLECS/$FLECS/flecs.h	/^bool ecs_page_next($/;"	p	typeref:typename:FLECS_API bool	signature:(ecs_iter_t * it)
ecs_page_next_instanced	$FLECS/$FLECS/flecs.c	/^bool ecs_page_next_instanced($/;"	f	typeref:typename:bool	file:	signature:(ecs_iter_t * it)
ecs_page_t	$FLECS/$FLECS/flecs.c	/^} ecs_page_t;$/;"	t	typeref:struct:ecs_page_t	file:
ecs_pair	$FLECS/$FLECS/flecs.h	/^#define ecs_pair(/;"	d	signature:(pred,obj)
ecs_pair_first	$FLECS/$FLECS/flecs.h	/^#define ecs_pair_first(/;"	d	signature:(world,pair)
ecs_pair_object	$FLECS/$FLECS/flecs.h	/^#define ecs_pair_object /;"	d
ecs_pair_relation	$FLECS/$FLECS/flecs.h	/^#define ecs_pair_relation /;"	d
ecs_pair_second	$FLECS/$FLECS/flecs.h	/^#define ecs_pair_second(/;"	d	signature:(world,pair)
ecs_pair_t	$FLECS/$FLECS/flecs.h	/^#define ecs_pair_t(/;"	d	signature:(pred,obj)
ecs_parse_digit	$FLECS/$FLECS/flecs.c	/^const char* ecs_parse_digit($/;"	f	typeref:typename:const char *	signature:(const char * ptr,char * token)
ecs_parse_digit	$FLECS/$FLECS/flecs.h	/^const char* ecs_parse_digit($/;"	p	typeref:typename:FLECS_API const char *	signature:(const char * ptr,char * token)
ecs_parse_expr	$FLECS/$FLECS/flecs.c	/^const char* ecs_parse_expr($/;"	f	typeref:typename:const char *	signature:(ecs_world_t * world,const char * ptr,ecs_value_t * value,const ecs_parse_expr_desc_t * desc)
ecs_parse_expr	$FLECS/$FLECS/flecs.h	/^const char* ecs_parse_expr($/;"	p	typeref:typename:FLECS_API const char *	signature:(ecs_world_t * world,const char * ptr,ecs_value_t * value,const ecs_parse_expr_desc_t * desc)
ecs_parse_expr_desc_t	$FLECS/$FLECS/flecs.h	/^} ecs_parse_expr_desc_t;$/;"	t	typeref:struct:ecs_parse_expr_desc_t
ecs_parse_expr_token	$FLECS/$FLECS/flecs.c	/^const char *ecs_parse_expr_token($/;"	f	typeref:typename:const char *	signature:(const char * name,const char * expr,const char * ptr,char * token)
ecs_parse_expr_token	$FLECS/$FLECS/flecs.h	/^const char *ecs_parse_expr_token($/;"	p	typeref:typename:FLECS_API const char *	signature:(const char * name,const char * expr,const char * ptr,char * token)
ecs_parse_identifier	$FLECS/$FLECS/flecs.c	/^const char* ecs_parse_identifier($/;"	f	typeref:typename:const char *	signature:(const char * name,const char * expr,const char * ptr,char * token_out)
ecs_parse_identifier	$FLECS/$FLECS/flecs.h	/^const char* ecs_parse_identifier($/;"	p	typeref:typename:const char *	signature:(const char * name,const char * expr,const char * ptr,char * token_out)
ecs_parse_term	$FLECS/$FLECS/flecs.c	/^char* ecs_parse_term($/;"	f	typeref:typename:char *	signature:(const ecs_world_t * world,const char * name,const char * expr,const char * ptr,ecs_term_t * term,ecs_term_id_t * extra_args)
ecs_parse_term	$FLECS/$FLECS/flecs.h	/^char* ecs_parse_term($/;"	p	typeref:typename:FLECS_API char *	signature:(const ecs_world_t * world,const char * name,const char * expr,const char * ptr,ecs_term_t * term_out,ecs_term_id_t * extra_args)
ecs_parse_token	$FLECS/$FLECS/flecs.c	/^const char* ecs_parse_token($/;"	f	typeref:typename:const char *	signature:(const char * name,const char * expr,const char * ptr,char * token_out,char delim)
ecs_parse_token	$FLECS/$FLECS/flecs.h	/^const char* ecs_parse_token($/;"	p	typeref:typename:FLECS_API const char *	signature:(const char * name,const char * expr,const char * ptr,char * token_out,char delim)
ecs_parse_ws	$FLECS/$FLECS/flecs.c	/^const char* ecs_parse_ws($/;"	f	typeref:typename:const char *	signature:(const char * ptr)
ecs_parse_ws	$FLECS/$FLECS/flecs.h	/^const char* ecs_parse_ws($/;"	p	typeref:typename:FLECS_API const char *	signature:(const char * ptr)
ecs_parse_ws_eol	$FLECS/$FLECS/flecs.c	/^const char* ecs_parse_ws_eol($/;"	f	typeref:typename:const char *	signature:(const char * ptr)
ecs_parse_ws_eol	$FLECS/$FLECS/flecs.h	/^const char* ecs_parse_ws_eol($/;"	p	typeref:typename:FLECS_API const char *	signature:(const char * ptr)
ecs_parser_error	$FLECS/$FLECS/flecs.h	/^#define ecs_parser_error(/;"	d	signature:(name,expr,column,...)
ecs_parser_error_	$FLECS/$FLECS/flecs.c	/^void ecs_parser_error_($/;"	f	typeref:typename:void	signature:(const char * name,const char * expr,int64_t column,const char * fmt,...)
ecs_parser_error_	$FLECS/$FLECS/flecs.h	/^void ecs_parser_error_($/;"	p	typeref:typename:FLECS_API void	signature:(const char * name,const char * expr,int64_t column,const char * fmt,...)
ecs_parser_errorv	$FLECS/$FLECS/flecs.h	/^#define ecs_parser_errorv(/;"	d	signature:(name,expr,column,fmt,args)
ecs_parser_errorv_	$FLECS/$FLECS/flecs.c	/^void ecs_parser_errorv_($/;"	f	typeref:typename:void	signature:(const char * name,const char * expr,int64_t column_arg,const char * fmt,va_list args)
ecs_parser_errorv_	$FLECS/$FLECS/flecs.h	/^void ecs_parser_errorv_($/;"	p	typeref:typename:FLECS_API void	signature:(const char * name,const char * expr,int64_t column,const char * fmt,va_list args)
ecs_pipeline	$FLECS/$FLECS/flecs.h	/^#define ecs_pipeline(/;"	d	signature:(world,...)
ecs_pipeline_desc_t	$FLECS/$FLECS/flecs.h	/^} ecs_pipeline_desc_t;$/;"	t	typeref:struct:ecs_pipeline_desc_t
ecs_pipeline_init	$FLECS/$FLECS/flecs.c	/^ecs_entity_t ecs_pipeline_init($/;"	f	typeref:typename:ecs_entity_t	signature:(ecs_world_t * world,const ecs_pipeline_desc_t * desc)
ecs_pipeline_init	$FLECS/$FLECS/flecs.h	/^ecs_entity_t ecs_pipeline_init($/;"	p	typeref:typename:FLECS_API ecs_entity_t	signature:(ecs_world_t * world,const ecs_pipeline_desc_t * desc)
ecs_pipeline_op_t	$FLECS/$FLECS/flecs.c	/^} ecs_pipeline_op_t;$/;"	t	typeref:struct:ecs_pipeline_op_t	file:
ecs_pipeline_state_t	$FLECS/$FLECS/flecs.c	/^typedef struct ecs_pipeline_state_t ecs_pipeline_state_t;$/;"	t	typeref:struct:ecs_pipeline_state_t	file:
ecs_pipeline_stats_copy_last	$FLECS/$FLECS/flecs.c	/^void ecs_pipeline_stats_copy_last($/;"	f	typeref:typename:void	signature:(ecs_pipeline_stats_t * dst,const ecs_pipeline_stats_t * src)
ecs_pipeline_stats_copy_last	$FLECS/$FLECS/flecs.h	/^void ecs_pipeline_stats_copy_last($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_pipeline_stats_t * dst,const ecs_pipeline_stats_t * src)
ecs_pipeline_stats_fini	$FLECS/$FLECS/flecs.c	/^void ecs_pipeline_stats_fini($/;"	f	typeref:typename:void	signature:(ecs_pipeline_stats_t * stats)
ecs_pipeline_stats_fini	$FLECS/$FLECS/flecs.h	/^void ecs_pipeline_stats_fini($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_pipeline_stats_t * stats)
ecs_pipeline_stats_get	$FLECS/$FLECS/flecs.c	/^bool ecs_pipeline_stats_get($/;"	f	typeref:typename:bool	signature:(ecs_world_t * stage,ecs_entity_t pipeline,ecs_pipeline_stats_t * s)
ecs_pipeline_stats_get	$FLECS/$FLECS/flecs.h	/^bool ecs_pipeline_stats_get($/;"	p	typeref:typename:FLECS_API bool	signature:(ecs_world_t * world,ecs_entity_t pipeline,ecs_pipeline_stats_t * stats)
ecs_pipeline_stats_reduce	$FLECS/$FLECS/flecs.c	/^void ecs_pipeline_stats_reduce($/;"	f	typeref:typename:void	signature:(ecs_pipeline_stats_t * dst,const ecs_pipeline_stats_t * src)
ecs_pipeline_stats_reduce	$FLECS/$FLECS/flecs.h	/^void ecs_pipeline_stats_reduce($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_pipeline_stats_t * dst,const ecs_pipeline_stats_t * src)
ecs_pipeline_stats_reduce_last	$FLECS/$FLECS/flecs.c	/^void ecs_pipeline_stats_reduce_last($/;"	f	typeref:typename:void	signature:(ecs_pipeline_stats_t * dst,const ecs_pipeline_stats_t * src,int32_t count)
ecs_pipeline_stats_reduce_last	$FLECS/$FLECS/flecs.h	/^void ecs_pipeline_stats_reduce_last($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_pipeline_stats_t * stats,const ecs_pipeline_stats_t * old,int32_t count)
ecs_pipeline_stats_repeat_last	$FLECS/$FLECS/flecs.c	/^void ecs_pipeline_stats_repeat_last($/;"	f	typeref:typename:void	signature:(ecs_pipeline_stats_t * stats)
ecs_pipeline_stats_repeat_last	$FLECS/$FLECS/flecs.h	/^void ecs_pipeline_stats_repeat_last($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_pipeline_stats_t * stats)
ecs_pipeline_stats_t	$FLECS/$FLECS/flecs.h	/^} ecs_pipeline_stats_t;$/;"	t	typeref:struct:ecs_pipeline_stats_t
ecs_plecs_from_file	$FLECS/$FLECS/flecs.c	/^int ecs_plecs_from_file($/;"	f	typeref:typename:int	signature:(ecs_world_t * world,const char * filename)
ecs_plecs_from_file	$FLECS/$FLECS/flecs.h	/^int ecs_plecs_from_file($/;"	p	typeref:typename:FLECS_API int	signature:(ecs_world_t * world,const char * filename)
ecs_plecs_from_str	$FLECS/$FLECS/flecs.c	/^int ecs_plecs_from_str($/;"	f	typeref:typename:int	signature:(ecs_world_t * world,const char * name,const char * expr)
ecs_plecs_from_str	$FLECS/$FLECS/flecs.h	/^int ecs_plecs_from_str($/;"	p	typeref:typename:FLECS_API int	signature:(ecs_world_t * world,const char * name,const char * str)
ecs_poly_assert	$FLECS/$FLECS/flecs.c	/^#define ecs_poly_assert(/;"	d	file:	signature:(object,ty)
ecs_poly_bind	$FLECS/$FLECS/flecs.c	/^#define ecs_poly_bind(/;"	d	file:	signature:(world,entity,T)
ecs_poly_bind_	$FLECS/$FLECS/flecs.c	/^EcsPoly* ecs_poly_bind_($/;"	p	typeref:typename:EcsPoly *	file:	signature:(ecs_world_t * world,ecs_entity_t entity,ecs_entity_t tag)
ecs_poly_bind_get	$FLECS/$FLECS/flecs.c	/^#define ecs_poly_bind_get(/;"	d	file:	signature:(world,entity,T)
ecs_poly_bind_get_	$FLECS/$FLECS/flecs.c	/^const EcsPoly* ecs_poly_bind_get_($/;"	p	typeref:typename:const EcsPoly *	file:	signature:(const ecs_world_t * world,ecs_entity_t entity,ecs_entity_t tag)
ecs_poly_dtor_t	$FLECS/$FLECS/flecs.h	/^typedef void (*ecs_poly_dtor_t)($/;"	t	typeref:typename:void (*)(ecs_poly_t * poly)
ecs_poly_fini	$FLECS/$FLECS/flecs.c	/^#define ecs_poly_fini(/;"	d	file:	signature:(object,type)
ecs_poly_fini_	$FLECS/$FLECS/flecs.c	/^void ecs_poly_fini_($/;"	p	typeref:typename:void	file:	signature:(ecs_poly_t * object,int32_t kind)
ecs_poly_free	$FLECS/$FLECS/flecs.c	/^#define ecs_poly_free(/;"	d	file:	signature:(obj,type)
ecs_poly_get	$FLECS/$FLECS/flecs.c	/^#define ecs_poly_get(/;"	d	file:	signature:(world,entity,T)
ecs_poly_get_	$FLECS/$FLECS/flecs.c	/^ecs_poly_t* ecs_poly_get_($/;"	p	typeref:typename:ecs_poly_t *	file:	signature:(const ecs_world_t * world,ecs_entity_t entity,ecs_entity_t tag)
ecs_poly_id	$FLECS/$FLECS/flecs.h	/^#define ecs_poly_id(/;"	d	signature:(tag)
ecs_poly_init	$FLECS/$FLECS/flecs.c	/^#define ecs_poly_init(/;"	d	file:	signature:(object,type)
ecs_poly_init_	$FLECS/$FLECS/flecs.c	/^void* ecs_poly_init_($/;"	p	typeref:typename:void *	file:	signature:(ecs_poly_t * object,int32_t kind,ecs_size_t size,ecs_mixins_t * mixins)
ecs_poly_is	$FLECS/$FLECS/flecs.h	/^#define ecs_poly_is(/;"	d	signature:(object,type)
ecs_poly_is_	$FLECS/$FLECS/flecs.c	/^bool ecs_poly_is_($/;"	f	typeref:typename:bool	signature:(const ecs_poly_t * poly,int32_t type)
ecs_poly_is_	$FLECS/$FLECS/flecs.h	/^bool ecs_poly_is_($/;"	p	typeref:typename:FLECS_API bool	signature:(const ecs_poly_t * object,int32_t type)
ecs_poly_modified	$FLECS/$FLECS/flecs.c	/^#define ecs_poly_modified(/;"	d	file:	signature:(world,entity,T)
ecs_poly_modified_	$FLECS/$FLECS/flecs.c	/^void ecs_poly_modified_($/;"	p	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_entity_t entity,ecs_entity_t tag)
ecs_poly_new	$FLECS/$FLECS/flecs.c	/^#define ecs_poly_new(/;"	d	file:	signature:(type)
ecs_poly_t	$FLECS/$FLECS/flecs.h	/^typedef void ecs_poly_t;$/;"	t	typeref:typename:void
ecs_primitive	$FLECS/$FLECS/flecs.h	/^#define ecs_primitive(/;"	d	signature:(world,...)
ecs_primitive_desc_t	$FLECS/$FLECS/flecs.h	/^} ecs_primitive_desc_t;$/;"	t	typeref:struct:ecs_primitive_desc_t
ecs_primitive_init	$FLECS/$FLECS/flecs.c	/^ecs_entity_t ecs_primitive_init($/;"	f	typeref:typename:ecs_entity_t	signature:(ecs_world_t * world,const ecs_primitive_desc_t * desc)
ecs_primitive_init	$FLECS/$FLECS/flecs.h	/^ecs_entity_t ecs_primitive_init($/;"	p	typeref:typename:FLECS_API ecs_entity_t	signature:(ecs_world_t * world,const ecs_primitive_desc_t * desc)
ecs_primitive_kind_t	$FLECS/$FLECS/flecs.h	/^} ecs_primitive_kind_t;$/;"	t	typeref:enum:ecs_primitive_kind_t
ecs_primitive_to_expr_buf	$FLECS/$FLECS/flecs.c	/^int ecs_primitive_to_expr_buf($/;"	f	typeref:typename:int	signature:(const ecs_world_t * world,ecs_primitive_kind_t kind,const void * base,ecs_strbuf_t * str)
ecs_primitive_to_expr_buf	$FLECS/$FLECS/flecs.h	/^int ecs_primitive_to_expr_buf($/;"	p	typeref:typename:FLECS_API int	signature:(const ecs_world_t * world,ecs_primitive_kind_t kind,const void * data,ecs_strbuf_t * buf)
ecs_print	$FLECS/$FLECS/flecs.h	/^#define ecs_print(/;"	d	signature:(level,...)
ecs_print_	$FLECS/$FLECS/flecs.c	/^void ecs_print_($/;"	f	typeref:typename:void	signature:(int level,const char * file,int32_t line,const char * fmt,...)
ecs_print_	$FLECS/$FLECS/flecs.h	/^void ecs_print_($/;"	p	typeref:typename:FLECS_API void	signature:(int32_t level,const char * file,int32_t line,const char * fmt,...)
ecs_printv	$FLECS/$FLECS/flecs.h	/^#define ecs_printv(/;"	d	signature:(level,fmt,args)
ecs_printv_	$FLECS/$FLECS/flecs.c	/^void ecs_printv_($/;"	f	typeref:typename:void	signature:(int level,const char * file,int32_t line,const char * fmt,va_list args)
ecs_printv_	$FLECS/$FLECS/flecs.h	/^void ecs_printv_($/;"	p	typeref:typename:FLECS_API void	signature:(int level,const char * file,int32_t line,const char * fmt,va_list args)
ecs_progress	$FLECS/$FLECS/flecs.c	/^bool ecs_progress($/;"	f	typeref:typename:bool	signature:(ecs_world_t * world,ecs_ftime_t user_delta_time)
ecs_progress	$FLECS/$FLECS/flecs.h	/^bool ecs_progress($/;"	p	typeref:typename:FLECS_API bool	signature:(ecs_world_t * world,ecs_ftime_t delta_time)
ecs_ptr_from_json	$FLECS/$FLECS/flecs.c	/^const char* ecs_ptr_from_json($/;"	f	typeref:typename:const char *	signature:(const ecs_world_t * world,ecs_entity_t type,void * ptr,const char * json,const ecs_from_json_desc_t * desc)
ecs_ptr_from_json	$FLECS/$FLECS/flecs.h	/^const char* ecs_ptr_from_json($/;"	p	typeref:typename:FLECS_API const char *	signature:(const ecs_world_t * world,ecs_entity_t type,void * ptr,const char * json,const ecs_from_json_desc_t * desc)
ecs_ptr_to_expr	$FLECS/$FLECS/flecs.c	/^char* ecs_ptr_to_expr($/;"	f	typeref:typename:char *	signature:(const ecs_world_t * world,ecs_entity_t type,const void * ptr)
ecs_ptr_to_expr	$FLECS/$FLECS/flecs.h	/^char* ecs_ptr_to_expr($/;"	p	typeref:typename:FLECS_API char *	signature:(const ecs_world_t * world,ecs_entity_t type,const void * data)
ecs_ptr_to_expr_buf	$FLECS/$FLECS/flecs.c	/^int ecs_ptr_to_expr_buf($/;"	f	typeref:typename:int	signature:(const ecs_world_t * world,ecs_entity_t type,const void * ptr,ecs_strbuf_t * buf_out)
ecs_ptr_to_expr_buf	$FLECS/$FLECS/flecs.h	/^int ecs_ptr_to_expr_buf($/;"	p	typeref:typename:FLECS_API int	signature:(const ecs_world_t * world,ecs_entity_t type,const void * data,ecs_strbuf_t * buf)
ecs_ptr_to_json	$FLECS/$FLECS/flecs.c	/^char* ecs_ptr_to_json($/;"	f	typeref:typename:char *	signature:(const ecs_world_t * world,ecs_entity_t type,const void * ptr)
ecs_ptr_to_json	$FLECS/$FLECS/flecs.h	/^char* ecs_ptr_to_json($/;"	p	typeref:typename:FLECS_API char *	signature:(const ecs_world_t * world,ecs_entity_t type,const void * data)
ecs_ptr_to_json_buf	$FLECS/$FLECS/flecs.c	/^int ecs_ptr_to_json_buf($/;"	f	typeref:typename:int	signature:(const ecs_world_t * world,ecs_entity_t type,const void * ptr,ecs_strbuf_t * buf)
ecs_ptr_to_json_buf	$FLECS/$FLECS/flecs.h	/^int ecs_ptr_to_json_buf($/;"	p	typeref:typename:FLECS_API int	signature:(const ecs_world_t * world,ecs_entity_t type,const void * data,ecs_strbuf_t * buf_out)
ecs_ptr_to_str	$FLECS/$FLECS/flecs.c	/^char* ecs_ptr_to_str($/;"	f	typeref:typename:char *	signature:(const ecs_world_t * world,ecs_entity_t type,const void * ptr)
ecs_ptr_to_str	$FLECS/$FLECS/flecs.h	/^char* ecs_ptr_to_str($/;"	p	typeref:typename:FLECS_API char *	signature:(const ecs_world_t * world,ecs_entity_t type,const void * data)
ecs_ptr_to_str_buf	$FLECS/$FLECS/flecs.c	/^int ecs_ptr_to_str_buf($/;"	f	typeref:typename:int	signature:(const ecs_world_t * world,ecs_entity_t type,const void * ptr,ecs_strbuf_t * buf_out)
ecs_ptr_to_str_buf	$FLECS/$FLECS/flecs.h	/^int ecs_ptr_to_str_buf($/;"	p	typeref:typename:FLECS_API int	signature:(const ecs_world_t * world,ecs_entity_t type,const void * data,ecs_strbuf_t * buf)
ecs_quantity	$FLECS/$FLECS/flecs.h	/^#define ecs_quantity(/;"	d	signature:(world,...)
ecs_quantity_init	$FLECS/$FLECS/flecs.c	/^ecs_entity_t ecs_quantity_init($/;"	f	typeref:typename:ecs_entity_t	signature:(ecs_world_t * world,const ecs_entity_desc_t * desc)
ecs_quantity_init	$FLECS/$FLECS/flecs.h	/^ecs_entity_t ecs_quantity_init($/;"	p	typeref:typename:FLECS_API ecs_entity_t	signature:(ecs_world_t * world,const ecs_entity_desc_t * desc)
ecs_query	$FLECS/$FLECS/flecs.h	/^#define ecs_query(/;"	d	signature:(world,...)
ecs_query_allocators_t	$FLECS/$FLECS/flecs.c	/^} ecs_query_allocators_t;$/;"	t	typeref:struct:ecs_query_allocators_t	file:
ecs_query_changed	$FLECS/$FLECS/flecs.c	/^bool ecs_query_changed($/;"	f	typeref:typename:bool	signature:(ecs_query_t * query,const ecs_iter_t * it)
ecs_query_changed	$FLECS/$FLECS/flecs.h	/^bool ecs_query_changed($/;"	p	typeref:typename:FLECS_API bool	signature:(ecs_query_t * query,const ecs_iter_t * it)
ecs_query_desc_t	$FLECS/$FLECS/flecs.h	/^} ecs_query_desc_t;$/;"	t	typeref:struct:ecs_query_desc_t
ecs_query_empty_table_count	$FLECS/$FLECS/flecs.c	/^int32_t ecs_query_empty_table_count($/;"	f	typeref:typename:int32_t	signature:(const ecs_query_t * query)
ecs_query_empty_table_count	$FLECS/$FLECS/flecs.h	/^int32_t ecs_query_empty_table_count($/;"	p	typeref:typename:FLECS_API int32_t	signature:(const ecs_query_t * query)
ecs_query_entity_count	$FLECS/$FLECS/flecs.c	/^int32_t ecs_query_entity_count($/;"	f	typeref:typename:int32_t	signature:(const ecs_query_t * query)
ecs_query_entity_count	$FLECS/$FLECS/flecs.h	/^int32_t ecs_query_entity_count($/;"	p	typeref:typename:FLECS_API int32_t	signature:(const ecs_query_t * query)
ecs_query_event_t	$FLECS/$FLECS/flecs.c	/^} ecs_query_event_t;$/;"	t	typeref:struct:ecs_query_event_t	file:
ecs_query_eventkind_t	$FLECS/$FLECS/flecs.c	/^} ecs_query_eventkind_t;$/;"	t	typeref:enum:ecs_query_eventkind_t	file:
ecs_query_fini	$FLECS/$FLECS/flecs.c	/^void ecs_query_fini($/;"	f	typeref:typename:void	signature:(ecs_query_t * query)
ecs_query_fini	$FLECS/$FLECS/flecs.h	/^void ecs_query_fini($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_query_t * query)
ecs_query_get_binding_ctx	$FLECS/$FLECS/flecs.c	/^void* ecs_query_get_binding_ctx($/;"	f	typeref:typename:void *	signature:(const ecs_query_t * query)
ecs_query_get_binding_ctx	$FLECS/$FLECS/flecs.h	/^void* ecs_query_get_binding_ctx($/;"	p	typeref:typename:FLECS_API void *	signature:(const ecs_query_t * query)
ecs_query_get_ctx	$FLECS/$FLECS/flecs.c	/^void* ecs_query_get_ctx($/;"	f	typeref:typename:void *	signature:(const ecs_query_t * query)
ecs_query_get_ctx	$FLECS/$FLECS/flecs.h	/^void* ecs_query_get_ctx($/;"	p	typeref:typename:FLECS_API void *	signature:(const ecs_query_t * query)
ecs_query_get_filter	$FLECS/$FLECS/flecs.c	/^const ecs_filter_t* ecs_query_get_filter($/;"	f	typeref:typename:const ecs_filter_t *	signature:(const ecs_query_t * query)
ecs_query_get_filter	$FLECS/$FLECS/flecs.h	/^const ecs_filter_t* ecs_query_get_filter($/;"	p	typeref:typename:FLECS_API const ecs_filter_t *	signature:(const ecs_query_t * query)
ecs_query_get_group_ctx	$FLECS/$FLECS/flecs.c	/^void* ecs_query_get_group_ctx($/;"	f	typeref:typename:void *	signature:(const ecs_query_t * query,uint64_t group_id)
ecs_query_get_group_ctx	$FLECS/$FLECS/flecs.h	/^void* ecs_query_get_group_ctx($/;"	p	typeref:typename:FLECS_API void *	signature:(const ecs_query_t * query,uint64_t group_id)
ecs_query_get_group_info	$FLECS/$FLECS/flecs.c	/^const ecs_query_group_info_t* ecs_query_get_group_info($/;"	f	typeref:typename:const ecs_query_group_info_t *	signature:(const ecs_query_t * query,uint64_t group_id)
ecs_query_get_group_info	$FLECS/$FLECS/flecs.h	/^const ecs_query_group_info_t* ecs_query_get_group_info($/;"	p	typeref:typename:FLECS_API const ecs_query_group_info_t *	signature:(const ecs_query_t * query,uint64_t group_id)
ecs_query_group_info_t	$FLECS/$FLECS/flecs.h	/^} ecs_query_group_info_t;$/;"	t	typeref:struct:ecs_query_group_info_t
ecs_query_init	$FLECS/$FLECS/flecs.c	/^ecs_query_t* ecs_query_init($/;"	f	typeref:typename:ecs_query_t *	signature:(ecs_world_t * world,const ecs_query_desc_t * desc)
ecs_query_init	$FLECS/$FLECS/flecs.h	/^ecs_query_t* ecs_query_init($/;"	p	typeref:typename:FLECS_API ecs_query_t *	signature:(ecs_world_t * world,const ecs_query_desc_t * desc)
ecs_query_iter	$FLECS/$FLECS/flecs.c	/^ecs_iter_t ecs_query_iter($/;"	f	typeref:typename:ecs_iter_t	signature:(const ecs_world_t * stage,ecs_query_t * query)
ecs_query_iter	$FLECS/$FLECS/flecs.h	/^ecs_iter_t ecs_query_iter($/;"	p	typeref:typename:FLECS_API ecs_iter_t	signature:(const ecs_world_t * world,ecs_query_t * query)
ecs_query_iter_t	$FLECS/$FLECS/flecs.h	/^} ecs_query_iter_t;$/;"	t	typeref:struct:ecs_query_iter_t
ecs_query_new	$FLECS/$FLECS/flecs.h	/^#define ecs_query_new(/;"	d	signature:(world,q_expr)
ecs_query_next	$FLECS/$FLECS/flecs.c	/^bool ecs_query_next($/;"	f	typeref:typename:bool	signature:(ecs_iter_t * it)
ecs_query_next	$FLECS/$FLECS/flecs.h	/^bool ecs_query_next($/;"	p	typeref:typename:FLECS_API bool	signature:(ecs_iter_t * iter)
ecs_query_next_instanced	$FLECS/$FLECS/flecs.c	/^bool ecs_query_next_instanced($/;"	f	typeref:typename:bool	signature:(ecs_iter_t * it)
ecs_query_next_instanced	$FLECS/$FLECS/flecs.h	/^bool ecs_query_next_instanced($/;"	p	typeref:typename:FLECS_API bool	signature:(ecs_iter_t * iter)
ecs_query_next_table	$FLECS/$FLECS/flecs.c	/^bool ecs_query_next_table($/;"	f	typeref:typename:bool	signature:(ecs_iter_t * it)
ecs_query_next_table	$FLECS/$FLECS/flecs.h	/^bool ecs_query_next_table($/;"	p	typeref:typename:FLECS_API bool	signature:(ecs_iter_t * iter)
ecs_query_orphaned	$FLECS/$FLECS/flecs.c	/^bool ecs_query_orphaned($/;"	f	typeref:typename:bool	signature:(const ecs_query_t * query)
ecs_query_orphaned	$FLECS/$FLECS/flecs.h	/^bool ecs_query_orphaned($/;"	p	typeref:typename:FLECS_API bool	signature:(const ecs_query_t * query)
ecs_query_populate	$FLECS/$FLECS/flecs.c	/^int ecs_query_populate($/;"	f	typeref:typename:int	signature:(ecs_iter_t * it,bool when_changed)
ecs_query_populate	$FLECS/$FLECS/flecs.h	/^int ecs_query_populate($/;"	p	typeref:typename:FLECS_API int	signature:(ecs_iter_t * iter,bool when_changed)
ecs_query_set_group	$FLECS/$FLECS/flecs.c	/^void ecs_query_set_group($/;"	f	typeref:typename:void	signature:(ecs_iter_t * it,uint64_t group_id)
ecs_query_set_group	$FLECS/$FLECS/flecs.h	/^void ecs_query_set_group($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_iter_t * it,uint64_t group_id)
ecs_query_skip	$FLECS/$FLECS/flecs.c	/^void ecs_query_skip($/;"	f	typeref:typename:void	signature:(ecs_iter_t * it)
ecs_query_skip	$FLECS/$FLECS/flecs.h	/^void ecs_query_skip($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_iter_t * it)
ecs_query_stats_copy_last	$FLECS/$FLECS/flecs.c	/^void ecs_query_stats_copy_last($/;"	f	typeref:typename:void	signature:(ecs_query_stats_t * dst,const ecs_query_stats_t * src)
ecs_query_stats_copy_last	$FLECS/$FLECS/flecs.h	/^void ecs_query_stats_copy_last($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_query_stats_t * dst,const ecs_query_stats_t * src)
ecs_query_stats_get	$FLECS/$FLECS/flecs.c	/^void ecs_query_stats_get($/;"	f	typeref:typename:void	signature:(const ecs_world_t * world,const ecs_query_t * query,ecs_query_stats_t * s)
ecs_query_stats_get	$FLECS/$FLECS/flecs.h	/^void ecs_query_stats_get($/;"	p	typeref:typename:FLECS_API void	signature:(const ecs_world_t * world,const ecs_query_t * query,ecs_query_stats_t * stats)
ecs_query_stats_reduce	$FLECS/$FLECS/flecs.c	/^void ecs_query_stats_reduce($/;"	f	typeref:typename:void	signature:(ecs_query_stats_t * dst,const ecs_query_stats_t * src)
ecs_query_stats_reduce	$FLECS/$FLECS/flecs.h	/^void ecs_query_stats_reduce($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_query_stats_t * dst,const ecs_query_stats_t * src)
ecs_query_stats_reduce_last	$FLECS/$FLECS/flecs.c	/^void ecs_query_stats_reduce_last($/;"	f	typeref:typename:void	signature:(ecs_query_stats_t * dst,const ecs_query_stats_t * src,int32_t count)
ecs_query_stats_reduce_last	$FLECS/$FLECS/flecs.h	/^void ecs_query_stats_reduce_last($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_query_stats_t * stats,const ecs_query_stats_t * old,int32_t count)
ecs_query_stats_repeat_last	$FLECS/$FLECS/flecs.c	/^void ecs_query_stats_repeat_last($/;"	f	typeref:typename:void	signature:(ecs_query_stats_t * stats)
ecs_query_stats_repeat_last	$FLECS/$FLECS/flecs.h	/^void ecs_query_stats_repeat_last($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_query_stats_t * stats)
ecs_query_stats_t	$FLECS/$FLECS/flecs.h	/^} ecs_query_stats_t;$/;"	t	typeref:struct:ecs_query_stats_t
ecs_query_str	$FLECS/$FLECS/flecs.c	/^char* ecs_query_str($/;"	f	typeref:typename:char *	signature:(const ecs_query_t * query)
ecs_query_str	$FLECS/$FLECS/flecs.h	/^char* ecs_query_str($/;"	p	typeref:typename:FLECS_API char *	signature:(const ecs_query_t * query)
ecs_query_t	$FLECS/$FLECS/flecs.c	/^struct ecs_query_t {$/;"	s	file:
ecs_query_t	$FLECS/$FLECS/flecs.h	/^typedef struct ecs_query_t ecs_query_t;$/;"	t	typeref:struct:ecs_query_t
ecs_query_t_magic	$FLECS/$FLECS/flecs.h	/^#define ecs_query_t_magic /;"	d
ecs_query_t_mixins	$FLECS/$FLECS/flecs.c	/^ecs_mixins_t ecs_query_t_mixins = {$/;"	v	typeref:typename:ecs_mixins_t
ecs_query_t_tag	$FLECS/$FLECS/flecs.c	/^#define ecs_query_t_tag /;"	d	file:
ecs_query_table_count	$FLECS/$FLECS/flecs.c	/^int32_t ecs_query_table_count($/;"	f	typeref:typename:int32_t	signature:(const ecs_query_t * query)
ecs_query_table_count	$FLECS/$FLECS/flecs.h	/^int32_t ecs_query_table_count($/;"	p	typeref:typename:FLECS_API int32_t	signature:(const ecs_query_t * query)
ecs_query_table_list_t	$FLECS/$FLECS/flecs.c	/^} ecs_query_table_list_t;$/;"	t	typeref:struct:ecs_query_table_list_t	file:
ecs_query_table_match_t	$FLECS/$FLECS/flecs.c	/^struct ecs_query_table_match_t {$/;"	s	file:
ecs_query_table_match_t	$FLECS/$FLECS/flecs.h	/^typedef struct ecs_query_table_match_t ecs_query_table_match_t;$/;"	t	typeref:struct:ecs_query_table_match_t
ecs_query_table_t	$FLECS/$FLECS/flecs.c	/^} ecs_query_table_t;$/;"	t	typeref:struct:ecs_query_table_t	file:
ecs_quit	$FLECS/$FLECS/flecs.c	/^void ecs_quit($/;"	f	typeref:typename:void	signature:(ecs_world_t * world)
ecs_quit	$FLECS/$FLECS/flecs.h	/^void ecs_quit($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_world_t * world)
ecs_randomize_timers	$FLECS/$FLECS/flecs.c	/^void ecs_randomize_timers($/;"	f	typeref:typename:void	signature:(ecs_world_t * world)
ecs_randomize_timers	$FLECS/$FLECS/flecs.h	/^void ecs_randomize_timers($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_world_t * world)
ecs_reachable_cache_t	$FLECS/$FLECS/flecs.c	/^} ecs_reachable_cache_t;$/;"	t	typeref:struct:ecs_reachable_cache_t	file:
ecs_reachable_elem_t	$FLECS/$FLECS/flecs.c	/^} ecs_reachable_elem_t;$/;"	t	typeref:struct:ecs_reachable_elem_t	file:
ecs_read_begin	$FLECS/$FLECS/flecs.c	/^const ecs_record_t* ecs_read_begin($/;"	f	typeref:typename:const ecs_record_t *	signature:(ecs_world_t * world,ecs_entity_t entity)
ecs_read_begin	$FLECS/$FLECS/flecs.h	/^const ecs_record_t* ecs_read_begin($/;"	p	typeref:typename:FLECS_API const ecs_record_t *	signature:(ecs_world_t * world,ecs_entity_t entity)
ecs_read_end	$FLECS/$FLECS/flecs.c	/^void ecs_read_end($/;"	f	typeref:typename:void	signature:(const ecs_record_t * r)
ecs_read_end	$FLECS/$FLECS/flecs.h	/^void ecs_read_end($/;"	p	typeref:typename:FLECS_API void	signature:(const ecs_record_t * record)
ecs_readonly_begin	$FLECS/$FLECS/flecs.c	/^bool ecs_readonly_begin($/;"	f	typeref:typename:bool	signature:(ecs_world_t * world)
ecs_readonly_begin	$FLECS/$FLECS/flecs.h	/^bool ecs_readonly_begin($/;"	p	typeref:typename:FLECS_API bool	signature:(ecs_world_t * world)
ecs_readonly_end	$FLECS/$FLECS/flecs.c	/^void ecs_readonly_end($/;"	f	typeref:typename:void	signature:(ecs_world_t * world)
ecs_readonly_end	$FLECS/$FLECS/flecs.h	/^void ecs_readonly_end($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_world_t * world)
ecs_record_find	$FLECS/$FLECS/flecs.c	/^ecs_record_t* ecs_record_find($/;"	f	typeref:typename:ecs_record_t *	signature:(const ecs_world_t * world,ecs_entity_t entity)
ecs_record_find	$FLECS/$FLECS/flecs.h	/^ecs_record_t* ecs_record_find($/;"	p	typeref:typename:FLECS_API ecs_record_t *	signature:(const ecs_world_t * world,ecs_entity_t entity)
ecs_record_get	$FLECS/$FLECS/flecs.h	/^#define ecs_record_get(/;"	d	signature:(world,record,T)
ecs_record_get_column	$FLECS/$FLECS/flecs.c	/^void* ecs_record_get_column($/;"	f	typeref:typename:void *	signature:(const ecs_record_t * r,int32_t index,size_t c_size)
ecs_record_get_column	$FLECS/$FLECS/flecs.h	/^void* ecs_record_get_column($/;"	p	typeref:typename:FLECS_API void *	signature:(const ecs_record_t * r,int32_t column,size_t c_size)
ecs_record_get_entity	$FLECS/$FLECS/flecs.c	/^ecs_entity_t ecs_record_get_entity($/;"	f	typeref:typename:ecs_entity_t	signature:(const ecs_record_t * record)
ecs_record_get_entity	$FLECS/$FLECS/flecs.h	/^ecs_entity_t ecs_record_get_entity($/;"	p	typeref:typename:FLECS_API ecs_entity_t	signature:(const ecs_record_t * record)
ecs_record_get_id	$FLECS/$FLECS/flecs.c	/^const void* ecs_record_get_id($/;"	f	typeref:typename:const void *	signature:(ecs_world_t * stage,const ecs_record_t * r,ecs_id_t id)
ecs_record_get_id	$FLECS/$FLECS/flecs.h	/^const void* ecs_record_get_id($/;"	p	typeref:typename:FLECS_API const void *	signature:(ecs_world_t * world,const ecs_record_t * record,ecs_id_t id)
ecs_record_get_mut	$FLECS/$FLECS/flecs.h	/^#define ecs_record_get_mut(/;"	d	signature:(world,record,T)
ecs_record_get_mut_id	$FLECS/$FLECS/flecs.c	/^void* ecs_record_get_mut_id($/;"	f	typeref:typename:void *	signature:(ecs_world_t * stage,ecs_record_t * r,ecs_id_t id)
ecs_record_get_mut_id	$FLECS/$FLECS/flecs.h	/^void* ecs_record_get_mut_id($/;"	p	typeref:typename:FLECS_API void *	signature:(ecs_world_t * world,ecs_record_t * record,ecs_id_t id)
ecs_record_get_mut_pair	$FLECS/$FLECS/flecs.h	/^#define ecs_record_get_mut_pair(/;"	d	signature:(world,record,First,second)
ecs_record_get_mut_pair_object	$FLECS/$FLECS/flecs.h	/^#define ecs_record_get_mut_pair_object /;"	d
ecs_record_get_mut_pair_second	$FLECS/$FLECS/flecs.h	/^#define ecs_record_get_mut_pair_second(/;"	d	signature:(world,record,first,Second)
ecs_record_get_pair	$FLECS/$FLECS/flecs.h	/^#define ecs_record_get_pair(/;"	d	signature:(world,record,First,second)
ecs_record_get_pair_second	$FLECS/$FLECS/flecs.h	/^#define ecs_record_get_pair_second(/;"	d	signature:(world,record,first,Second)
ecs_record_has	$FLECS/$FLECS/flecs.h	/^#define ecs_record_has(/;"	d	signature:(world,record,T)
ecs_record_has_id	$FLECS/$FLECS/flecs.c	/^bool ecs_record_has_id($/;"	f	typeref:typename:bool	signature:(ecs_world_t * stage,const ecs_record_t * r,ecs_id_t id)
ecs_record_has_id	$FLECS/$FLECS/flecs.h	/^bool ecs_record_has_id($/;"	p	typeref:typename:FLECS_API bool	signature:(ecs_world_t * world,const ecs_record_t * record,ecs_id_t id)
ecs_record_t	$FLECS/$FLECS/flecs.h	/^typedef struct ecs_record_t ecs_record_t;$/;"	t	typeref:struct:ecs_record_t
ecs_ref_get	$FLECS/$FLECS/flecs.h	/^#define ecs_ref_get(/;"	d	signature:(world,ref,T)
ecs_ref_get_id	$FLECS/$FLECS/flecs.c	/^void* ecs_ref_get_id($/;"	f	typeref:typename:void *	signature:(const ecs_world_t * world,ecs_ref_t * ref,ecs_id_t id)
ecs_ref_get_id	$FLECS/$FLECS/flecs.h	/^void* ecs_ref_get_id($/;"	p	typeref:typename:FLECS_API void *	signature:(const ecs_world_t * world,ecs_ref_t * ref,ecs_id_t id)
ecs_ref_init	$FLECS/$FLECS/flecs.h	/^#define ecs_ref_init(/;"	d	signature:(world,entity,T)
ecs_ref_init_id	$FLECS/$FLECS/flecs.c	/^ecs_ref_t ecs_ref_init_id($/;"	f	typeref:typename:ecs_ref_t	signature:(const ecs_world_t * world,ecs_entity_t entity,ecs_id_t id)
ecs_ref_init_id	$FLECS/$FLECS/flecs.h	/^ecs_ref_t ecs_ref_init_id($/;"	p	typeref:typename:FLECS_API ecs_ref_t	signature:(const ecs_world_t * world,ecs_entity_t entity,ecs_id_t id)
ecs_ref_t	$FLECS/$FLECS/flecs.h	/^typedef struct ecs_ref_t ecs_ref_t;$/;"	t	typeref:struct:ecs_ref_t
ecs_ref_update	$FLECS/$FLECS/flecs.c	/^void ecs_ref_update($/;"	f	typeref:typename:void	signature:(const ecs_world_t * world,ecs_ref_t * ref)
ecs_ref_update	$FLECS/$FLECS/flecs.h	/^void ecs_ref_update($/;"	p	typeref:typename:FLECS_API void	signature:(const ecs_world_t * world,ecs_ref_t * ref)
ecs_remove	$FLECS/$FLECS/flecs.h	/^#define ecs_remove(/;"	d	signature:(world,entity,T)
ecs_remove_all	$FLECS/$FLECS/flecs.c	/^void ecs_remove_all($/;"	f	typeref:typename:void	signature:(ecs_world_t * world,ecs_id_t id)
ecs_remove_all	$FLECS/$FLECS/flecs.h	/^void ecs_remove_all($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_world_t * world,ecs_id_t id)
ecs_remove_id	$FLECS/$FLECS/flecs.c	/^void ecs_remove_id($/;"	f	typeref:typename:void	signature:(ecs_world_t * world,ecs_entity_t entity,ecs_id_t id)
ecs_remove_id	$FLECS/$FLECS/flecs.h	/^void ecs_remove_id($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_world_t * world,ecs_entity_t entity,ecs_id_t id)
ecs_remove_pair	$FLECS/$FLECS/flecs.h	/^#define ecs_remove_pair(/;"	d	signature:(world,subject,first,second)
ecs_reset_clock	$FLECS/$FLECS/flecs.c	/^void ecs_reset_clock($/;"	f	typeref:typename:void	signature:(ecs_world_t * world)
ecs_reset_clock	$FLECS/$FLECS/flecs.h	/^void ecs_reset_clock($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_world_t * world)
ecs_reset_timer	$FLECS/$FLECS/flecs.c	/^void ecs_reset_timer($/;"	f	typeref:typename:void	signature:(ecs_world_t * world,ecs_entity_t timer)
ecs_reset_timer	$FLECS/$FLECS/flecs.h	/^void ecs_reset_timer($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_world_t * world,ecs_entity_t tick_source)
ecs_rest_ctx_t	$FLECS/$FLECS/flecs.c	/^} ecs_rest_ctx_t;$/;"	t	typeref:struct:__anonb2bcda231a08	file:
ecs_rest_server_fini	$FLECS/$FLECS/flecs.c	/^void ecs_rest_server_fini($/;"	f	typeref:typename:void	signature:(ecs_http_server_t * srv)
ecs_rest_server_fini	$FLECS/$FLECS/flecs.h	/^void ecs_rest_server_fini($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_http_server_t * srv)
ecs_rest_server_init	$FLECS/$FLECS/flecs.c	/^ecs_http_server_t* ecs_rest_server_init($/;"	f	typeref:typename:ecs_http_server_t *	signature:(ecs_world_t * world,const ecs_http_server_desc_t * desc)
ecs_rest_server_init	$FLECS/$FLECS/flecs.h	/^ecs_http_server_t* ecs_rest_server_init($/;"	p	typeref:typename:FLECS_API ecs_http_server_t *	signature:(ecs_world_t * world,const ecs_http_server_desc_t * desc)
ecs_rule	$FLECS/$FLECS/flecs.h	/^#define ecs_rule(/;"	d	signature:(world,...)
ecs_rule_and_ctx_t	$FLECS/$FLECS/flecs.c	/^} ecs_rule_and_ctx_t;$/;"	t	typeref:struct:__anonb2bcda232208	file:
ecs_rule_compile_ctrlflow_t	$FLECS/$FLECS/flecs.c	/^} ecs_rule_compile_ctrlflow_t;$/;"	t	typeref:struct:__anonb2bcda233208	file:
ecs_rule_compile_ctx_t	$FLECS/$FLECS/flecs.c	/^} ecs_rule_compile_ctx_t;    $/;"	t	typeref:struct:__anonb2bcda233308	file:
ecs_rule_ctrl_ctx_t	$FLECS/$FLECS/flecs.c	/^} ecs_rule_ctrl_ctx_t;$/;"	t	typeref:struct:__anonb2bcda232f08	file:
ecs_rule_each_ctx_t	$FLECS/$FLECS/flecs.c	/^} ecs_rule_each_ctx_t;$/;"	t	typeref:struct:__anonb2bcda232c08	file:
ecs_rule_eq_ctx_t	$FLECS/$FLECS/flecs.c	/^} ecs_rule_eq_ctx_t;$/;"	t	typeref:struct:__anonb2bcda232b08	file:
ecs_rule_find_var	$FLECS/$FLECS/flecs.c	/^int32_t ecs_rule_find_var($/;"	f	typeref:typename:int32_t	signature:(const ecs_rule_t * rule,const char * name)
ecs_rule_find_var	$FLECS/$FLECS/flecs.h	/^int32_t ecs_rule_find_var($/;"	p	typeref:typename:FLECS_API int32_t	signature:(const ecs_rule_t * rule,const char * name)
ecs_rule_fini	$FLECS/$FLECS/flecs.c	/^void ecs_rule_fini($/;"	f	typeref:typename:void	signature:(ecs_rule_t * rule)
ecs_rule_fini	$FLECS/$FLECS/flecs.h	/^void ecs_rule_fini($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_rule_t * rule)
ecs_rule_get_filter	$FLECS/$FLECS/flecs.c	/^const ecs_filter_t* ecs_rule_get_filter($/;"	f	typeref:typename:const ecs_filter_t *	signature:(const ecs_rule_t * rule)
ecs_rule_get_filter	$FLECS/$FLECS/flecs.h	/^const ecs_filter_t* ecs_rule_get_filter($/;"	p	typeref:typename:FLECS_API const ecs_filter_t *	signature:(const ecs_rule_t * rule)
ecs_rule_ids_ctx_t	$FLECS/$FLECS/flecs.c	/^} ecs_rule_ids_ctx_t;$/;"	t	typeref:struct:__anonb2bcda232e08	file:
ecs_rule_init	$FLECS/$FLECS/flecs.c	/^ecs_rule_t* ecs_rule_init($/;"	f	typeref:typename:ecs_rule_t *	signature:(ecs_world_t * world,const ecs_filter_desc_t * const_desc)
ecs_rule_init	$FLECS/$FLECS/flecs.h	/^ecs_rule_t* ecs_rule_init($/;"	p	typeref:typename:FLECS_API ecs_rule_t *	signature:(ecs_world_t * world,const ecs_filter_desc_t * desc)
ecs_rule_iter	$FLECS/$FLECS/flecs.c	/^ecs_iter_t ecs_rule_iter($/;"	f	typeref:typename:ecs_iter_t	signature:(const ecs_world_t * world,const ecs_rule_t * rule)
ecs_rule_iter	$FLECS/$FLECS/flecs.h	/^ecs_iter_t ecs_rule_iter($/;"	p	typeref:typename:FLECS_API ecs_iter_t	signature:(const ecs_world_t * world,const ecs_rule_t * rule)
ecs_rule_iter_t	$FLECS/$FLECS/flecs.h	/^} ecs_rule_iter_t;$/;"	t	typeref:struct:ecs_rule_iter_t
ecs_rule_lbl_t	$FLECS/$FLECS/flecs.c	/^typedef int16_t ecs_rule_lbl_t;$/;"	t	typeref:typename:int16_t	file:
ecs_rule_new	$FLECS/$FLECS/flecs.h	/^#define ecs_rule_new(/;"	d	signature:(world,q_expr)
ecs_rule_next	$FLECS/$FLECS/flecs.c	/^bool ecs_rule_next($/;"	f	typeref:typename:bool	signature:(ecs_iter_t * it)
ecs_rule_next	$FLECS/$FLECS/flecs.h	/^bool ecs_rule_next($/;"	p	typeref:typename:FLECS_API bool	signature:(ecs_iter_t * it)
ecs_rule_next_instanced	$FLECS/$FLECS/flecs.c	/^bool ecs_rule_next_instanced($/;"	f	typeref:typename:bool	signature:(ecs_iter_t * it)
ecs_rule_next_instanced	$FLECS/$FLECS/flecs.h	/^bool ecs_rule_next_instanced($/;"	p	typeref:typename:FLECS_API bool	signature:(ecs_iter_t * it)
ecs_rule_op_ctx_t	$FLECS/$FLECS/flecs.c	/^} ecs_rule_op_ctx_t;$/;"	t	typeref:struct:ecs_rule_op_ctx_t	file:
ecs_rule_op_kind_t	$FLECS/$FLECS/flecs.c	/^} ecs_rule_op_kind_t;$/;"	t	typeref:enum:__anonb2bcda232003	file:
ecs_rule_op_profile_t	$FLECS/$FLECS/flecs.h	/^} ecs_rule_op_profile_t;$/;"	t	typeref:struct:ecs_rule_op_profile_t
ecs_rule_op_t	$FLECS/$FLECS/flecs.c	/^} ecs_rule_op_t;$/;"	t	typeref:struct:ecs_rule_op_t	file:
ecs_rule_parse_vars	$FLECS/$FLECS/flecs.c	/^const char* ecs_rule_parse_vars($/;"	f	typeref:typename:const char *	signature:(ecs_rule_t * rule,ecs_iter_t * it,const char * expr)
ecs_rule_parse_vars	$FLECS/$FLECS/flecs.h	/^const char* ecs_rule_parse_vars($/;"	p	typeref:typename:FLECS_API const char *	signature:(ecs_rule_t * rule,ecs_iter_t * it,const char * expr)
ecs_rule_ref_t	$FLECS/$FLECS/flecs.c	/^} ecs_rule_ref_t;$/;"	t	typeref:union:__anonb2bcda23210a	file:
ecs_rule_run_ctx_t	$FLECS/$FLECS/flecs.c	/^} ecs_rule_run_ctx_t;$/;"	t	typeref:struct:__anonb2bcda233408	file:
ecs_rule_setthis_ctx_t	$FLECS/$FLECS/flecs.c	/^} ecs_rule_setthis_ctx_t;$/;"	t	typeref:struct:__anonb2bcda232d08	file:
ecs_rule_str	$FLECS/$FLECS/flecs.c	/^char* ecs_rule_str($/;"	f	typeref:typename:char *	signature:(const ecs_rule_t * rule)
ecs_rule_str	$FLECS/$FLECS/flecs.h	/^char* ecs_rule_str($/;"	p	typeref:typename:FLECS_API char *	signature:(const ecs_rule_t * rule)
ecs_rule_str_w_profile	$FLECS/$FLECS/flecs.c	/^char* ecs_rule_str_w_profile($/;"	f	typeref:typename:char *	signature:(const ecs_rule_t * rule,const ecs_iter_t * it)
ecs_rule_str_w_profile	$FLECS/$FLECS/flecs.h	/^char* ecs_rule_str_w_profile($/;"	p	typeref:typename:FLECS_API char *	signature:(const ecs_rule_t * rule,const ecs_iter_t * it)
ecs_rule_t	$FLECS/$FLECS/flecs.c	/^struct ecs_rule_t {$/;"	s	file:
ecs_rule_t	$FLECS/$FLECS/flecs.h	/^typedef struct ecs_rule_t ecs_rule_t;$/;"	t	typeref:struct:ecs_rule_t
ecs_rule_t_magic	$FLECS/$FLECS/flecs.h	/^#define ecs_rule_t_magic /;"	d
ecs_rule_t_mixins	$FLECS/$FLECS/flecs.c	/^static ecs_mixins_t ecs_rule_t_mixins = {$/;"	v	typeref:typename:ecs_mixins_t	file:
ecs_rule_t_tag	$FLECS/$FLECS/flecs.c	/^#define ecs_rule_t_tag /;"	d	file:
ecs_rule_trav_ctx_t	$FLECS/$FLECS/flecs.c	/^} ecs_rule_trav_ctx_t;$/;"	t	typeref:struct:__anonb2bcda232a08	file:
ecs_rule_trivial_ctx_t	$FLECS/$FLECS/flecs.c	/^} ecs_rule_trivial_ctx_t;$/;"	t	typeref:struct:__anonb2bcda233008	file:
ecs_rule_up_ctx_t	$FLECS/$FLECS/flecs.c	/^} ecs_rule_up_ctx_t;$/;"	t	typeref:struct:__anonb2bcda232708	file:
ecs_rule_var_cache_t	$FLECS/$FLECS/flecs.c	/^} ecs_rule_var_cache_t;$/;"	t	typeref:struct:__anonb2bcda233508	file:
ecs_rule_var_count	$FLECS/$FLECS/flecs.c	/^int32_t ecs_rule_var_count($/;"	f	typeref:typename:int32_t	signature:(const ecs_rule_t * rule)
ecs_rule_var_count	$FLECS/$FLECS/flecs.h	/^int32_t ecs_rule_var_count($/;"	p	typeref:typename:FLECS_API int32_t	signature:(const ecs_rule_t * rule)
ecs_rule_var_is_entity	$FLECS/$FLECS/flecs.c	/^bool ecs_rule_var_is_entity($/;"	f	typeref:typename:bool	signature:(const ecs_rule_t * rule,int32_t var_id)
ecs_rule_var_is_entity	$FLECS/$FLECS/flecs.h	/^bool ecs_rule_var_is_entity($/;"	p	typeref:typename:FLECS_API bool	signature:(const ecs_rule_t * rule,int32_t var_id)
ecs_rule_var_name	$FLECS/$FLECS/flecs.c	/^const char* ecs_rule_var_name($/;"	f	typeref:typename:const char *	signature:(const ecs_rule_t * rule,int32_t var_id)
ecs_rule_var_name	$FLECS/$FLECS/flecs.h	/^const char* ecs_rule_var_name($/;"	p	typeref:typename:FLECS_API const char *	signature:(const ecs_rule_t * rule,int32_t var_id)
ecs_rule_var_t	$FLECS/$FLECS/flecs.c	/^} ecs_rule_var_t;$/;"	t	typeref:struct:ecs_rule_var_t	file:
ecs_run	$FLECS/$FLECS/flecs.c	/^ecs_entity_t ecs_run($/;"	f	typeref:typename:ecs_entity_t	signature:(ecs_world_t * world,ecs_entity_t system,ecs_ftime_t delta_time,void * param)
ecs_run	$FLECS/$FLECS/flecs.h	/^ecs_entity_t ecs_run($/;"	p	typeref:typename:FLECS_API ecs_entity_t	signature:(ecs_world_t * world,ecs_entity_t system,ecs_ftime_t delta_time,void * param)
ecs_run_action_t	$FLECS/$FLECS/flecs.h	/^typedef void (*ecs_run_action_t)($/;"	t	typeref:typename:void (*)(ecs_iter_t * it)
ecs_run_aperiodic	$FLECS/$FLECS/flecs.c	/^void ecs_run_aperiodic($/;"	f	typeref:typename:void	signature:(ecs_world_t * world,ecs_flags32_t flags)
ecs_run_aperiodic	$FLECS/$FLECS/flecs.h	/^void ecs_run_aperiodic($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_world_t * world,ecs_flags32_t flags)
ecs_run_intern	$FLECS/$FLECS/flecs.c	/^ecs_entity_t ecs_run_intern($/;"	p	typeref:typename:ecs_entity_t	file:	signature:(ecs_world_t * world,ecs_stage_t * stage,ecs_entity_t system,ecs_system_t * system_data,int32_t stage_current,int32_t stage_count,ecs_ftime_t delta_time,int32_t offset,int32_t limit,void * param)
ecs_run_pipeline	$FLECS/$FLECS/flecs.c	/^void ecs_run_pipeline($/;"	f	typeref:typename:void	signature:(ecs_world_t * world,ecs_entity_t pipeline,ecs_ftime_t delta_time)
ecs_run_pipeline	$FLECS/$FLECS/flecs.h	/^void ecs_run_pipeline($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_world_t * world,ecs_entity_t pipeline,ecs_ftime_t delta_time)
ecs_run_post_frame	$FLECS/$FLECS/flecs.c	/^void ecs_run_post_frame($/;"	f	typeref:typename:void	signature:(ecs_world_t * world,ecs_fini_action_t action,void * ctx)
ecs_run_post_frame	$FLECS/$FLECS/flecs.h	/^void ecs_run_post_frame($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_world_t * world,ecs_fini_action_t action,void * ctx)
ecs_run_w_filter	$FLECS/$FLECS/flecs.c	/^ecs_entity_t ecs_run_w_filter($/;"	f	typeref:typename:ecs_entity_t	signature:(ecs_world_t * world,ecs_entity_t system,ecs_ftime_t delta_time,int32_t offset,int32_t limit,void * param)
ecs_run_w_filter	$FLECS/$FLECS/flecs.h	/^ecs_entity_t ecs_run_w_filter($/;"	p	typeref:typename:FLECS_API ecs_entity_t	signature:(ecs_world_t * world,ecs_entity_t system,ecs_ftime_t delta_time,int32_t offset,int32_t limit,void * param)
ecs_run_worker	$FLECS/$FLECS/flecs.c	/^ecs_entity_t ecs_run_worker($/;"	f	typeref:typename:ecs_entity_t	signature:(ecs_world_t * world,ecs_entity_t system,int32_t stage_index,int32_t stage_count,ecs_ftime_t delta_time,void * param)
ecs_run_worker	$FLECS/$FLECS/flecs.h	/^ecs_entity_t ecs_run_worker($/;"	p	typeref:typename:FLECS_API ecs_entity_t	signature:(ecs_world_t * world,ecs_entity_t system,int32_t stage_current,int32_t stage_count,ecs_ftime_t delta_time,void * param)
ecs_san_assert	$FLECS/$FLECS/flecs.h	/^#define ecs_san_assert(/;"	d	signature:(condition,error_code,...)
ecs_script	$FLECS/$FLECS/flecs.h	/^#define ecs_script(/;"	d	signature:(world,...)
ecs_script_clear	$FLECS/$FLECS/flecs.c	/^void ecs_script_clear($/;"	f	typeref:typename:void	signature:(ecs_world_t * world,ecs_entity_t script,ecs_entity_t instance)
ecs_script_clear	$FLECS/$FLECS/flecs.h	/^void ecs_script_clear($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_world_t * world,ecs_entity_t script,ecs_entity_t instance)
ecs_script_desc_t	$FLECS/$FLECS/flecs.h	/^} ecs_script_desc_t;$/;"	t	typeref:struct:ecs_script_desc_t
ecs_script_init	$FLECS/$FLECS/flecs.c	/^ecs_entity_t ecs_script_init($/;"	f	typeref:typename:ecs_entity_t	signature:(ecs_world_t * world,const ecs_script_desc_t * desc)
ecs_script_init	$FLECS/$FLECS/flecs.h	/^ecs_entity_t ecs_script_init($/;"	p	typeref:typename:FLECS_API ecs_entity_t	signature:(ecs_world_t * world,const ecs_script_desc_t * desc)
ecs_script_update	$FLECS/$FLECS/flecs.c	/^int ecs_script_update($/;"	f	typeref:typename:int	signature:(ecs_world_t * world,ecs_entity_t e,ecs_entity_t instance,const char * script,ecs_vars_t * vars)
ecs_script_update	$FLECS/$FLECS/flecs.h	/^int ecs_script_update($/;"	p	typeref:typename:FLECS_API int	signature:(ecs_world_t * world,ecs_entity_t script,ecs_entity_t instance,const char * str,ecs_vars_t * vars)
ecs_search	$FLECS/$FLECS/flecs.c	/^int32_t ecs_search($/;"	f	typeref:typename:int32_t	signature:(const ecs_world_t * world,const ecs_table_t * table,ecs_id_t id,ecs_id_t * id_out)
ecs_search	$FLECS/$FLECS/flecs.h	/^int32_t ecs_search($/;"	p	typeref:typename:FLECS_API int32_t	signature:(const ecs_world_t * world,const ecs_table_t * table,ecs_id_t id,ecs_id_t * id_out)
ecs_search_offset	$FLECS/$FLECS/flecs.c	/^int32_t ecs_search_offset($/;"	f	typeref:typename:int32_t	signature:(const ecs_world_t * world,const ecs_table_t * table,int32_t offset,ecs_id_t id,ecs_id_t * id_out)
ecs_search_offset	$FLECS/$FLECS/flecs.h	/^int32_t ecs_search_offset($/;"	p	typeref:typename:FLECS_API int32_t	signature:(const ecs_world_t * world,const ecs_table_t * table,int32_t offset,ecs_id_t id,ecs_id_t * id_out)
ecs_search_relation	$FLECS/$FLECS/flecs.c	/^int32_t ecs_search_relation($/;"	f	typeref:typename:int32_t	signature:(const ecs_world_t * world,const ecs_table_t * table,int32_t offset,ecs_id_t id,ecs_entity_t rel,ecs_flags32_t flags,ecs_entity_t * subject_out,ecs_id_t * id_out,struct ecs_table_record_t ** tr_out)
ecs_search_relation	$FLECS/$FLECS/flecs.h	/^int32_t ecs_search_relation($/;"	p	typeref:typename:FLECS_API int32_t	signature:(const ecs_world_t * world,const ecs_table_t * table,int32_t offset,ecs_id_t id,ecs_entity_t rel,ecs_flags32_t flags,ecs_entity_t * subject_out,ecs_id_t * id_out,struct ecs_table_record_t ** tr_out)
ecs_serializer_t	$FLECS/$FLECS/flecs.h	/^} ecs_serializer_t;$/;"	t	typeref:struct:ecs_serializer_t
ecs_set	$FLECS/$FLECS/flecs.h	/^#define ecs_set(/;"	d	signature:(world,entity,component,...)
ecs_set_alias	$FLECS/$FLECS/flecs.c	/^void ecs_set_alias($/;"	f	typeref:typename:void	signature:(ecs_world_t * world,ecs_entity_t entity,const char * name)
ecs_set_alias	$FLECS/$FLECS/flecs.h	/^void ecs_set_alias($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_world_t * world,ecs_entity_t entity,const char * alias)
ecs_set_automerge	$FLECS/$FLECS/flecs.c	/^void ecs_set_automerge($/;"	f	typeref:typename:void	signature:(ecs_world_t * world,bool auto_merge)
ecs_set_automerge	$FLECS/$FLECS/flecs.h	/^void ecs_set_automerge($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_world_t * world,bool automerge)
ecs_set_binding_ctx	$FLECS/$FLECS/flecs.c	/^void ecs_set_binding_ctx($/;"	f	typeref:typename:void	signature:(ecs_world_t * world,void * ctx,ecs_ctx_free_t ctx_free)
ecs_set_binding_ctx	$FLECS/$FLECS/flecs.h	/^void ecs_set_binding_ctx($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_world_t * world,void * ctx,ecs_ctx_free_t ctx_free)
ecs_set_ctx	$FLECS/$FLECS/flecs.c	/^void ecs_set_ctx($/;"	f	typeref:typename:void	signature:(ecs_world_t * world,void * ctx,ecs_ctx_free_t ctx_free)
ecs_set_ctx	$FLECS/$FLECS/flecs.h	/^void ecs_set_ctx($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_world_t * world,void * ctx,ecs_ctx_free_t ctx_free)
ecs_set_entity_generation	$FLECS/$FLECS/flecs.c	/^void ecs_set_entity_generation($/;"	f	typeref:typename:void	signature:(ecs_world_t * world,ecs_entity_t entity_with_generation)
ecs_set_entity_generation	$FLECS/$FLECS/flecs.h	/^void ecs_set_entity_generation($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_world_t * world,ecs_entity_t entity)
ecs_set_entity_range	$FLECS/$FLECS/flecs.c	/^void ecs_set_entity_range($/;"	f	typeref:typename:void	signature:(ecs_world_t * world,ecs_entity_t id_start,ecs_entity_t id_end)
ecs_set_entity_range	$FLECS/$FLECS/flecs.h	/^void ecs_set_entity_range($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_world_t * world,ecs_entity_t id_start,ecs_entity_t id_end)
ecs_set_hooks	$FLECS/$FLECS/flecs.h	/^#define ecs_set_hooks(/;"	d	signature:(world,T,...)
ecs_set_hooks_id	$FLECS/$FLECS/flecs.c	/^void ecs_set_hooks_id($/;"	f	typeref:typename:void	signature:(ecs_world_t * world,ecs_entity_t component,const ecs_type_hooks_t * h)
ecs_set_hooks_id	$FLECS/$FLECS/flecs.h	/^void ecs_set_hooks_id($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_world_t * world,ecs_entity_t id,const ecs_type_hooks_t * hooks)
ecs_set_id	$FLECS/$FLECS/flecs.c	/^ecs_entity_t ecs_set_id($/;"	f	typeref:typename:ecs_entity_t	signature:(ecs_world_t * world,ecs_entity_t entity,ecs_id_t id,size_t size,const void * ptr)
ecs_set_id	$FLECS/$FLECS/flecs.h	/^ecs_entity_t ecs_set_id($/;"	p	typeref:typename:FLECS_API ecs_entity_t	signature:(ecs_world_t * world,ecs_entity_t entity,ecs_id_t id,size_t size,const void * ptr)
ecs_set_interval	$FLECS/$FLECS/flecs.c	/^ecs_entity_t ecs_set_interval($/;"	f	typeref:typename:ecs_entity_t	signature:(ecs_world_t * world,ecs_entity_t timer,ecs_ftime_t interval)
ecs_set_interval	$FLECS/$FLECS/flecs.h	/^ecs_entity_t ecs_set_interval($/;"	p	typeref:typename:FLECS_API ecs_entity_t	signature:(ecs_world_t * world,ecs_entity_t tick_source,ecs_ftime_t interval)
ecs_set_lookup_path	$FLECS/$FLECS/flecs.c	/^ecs_entity_t* ecs_set_lookup_path($/;"	f	typeref:typename:ecs_entity_t *	signature:(ecs_world_t * world,const ecs_entity_t * lookup_path)
ecs_set_lookup_path	$FLECS/$FLECS/flecs.h	/^ecs_entity_t* ecs_set_lookup_path($/;"	p	typeref:typename:FLECS_API ecs_entity_t *	signature:(ecs_world_t * world,const ecs_entity_t * lookup_path)
ecs_set_name	$FLECS/$FLECS/flecs.c	/^ecs_entity_t ecs_set_name($/;"	f	typeref:typename:ecs_entity_t	signature:(ecs_world_t * world,ecs_entity_t entity,const char * name)
ecs_set_name	$FLECS/$FLECS/flecs.h	/^ecs_entity_t ecs_set_name($/;"	p	typeref:typename:FLECS_API ecs_entity_t	signature:(ecs_world_t * world,ecs_entity_t entity,const char * name)
ecs_set_name_prefix	$FLECS/$FLECS/flecs.c	/^const char* ecs_set_name_prefix($/;"	f	typeref:typename:const char *	signature:(ecs_world_t * world,const char * prefix)
ecs_set_name_prefix	$FLECS/$FLECS/flecs.h	/^const char* ecs_set_name_prefix($/;"	p	typeref:typename:FLECS_API const char *	signature:(ecs_world_t * world,const char * prefix)
ecs_set_os_api_impl	$FLECS/$FLECS/flecs.c	/^void ecs_set_os_api_impl(void) {$/;"	f	typeref:typename:void	signature:(void)
ecs_set_os_api_impl	$FLECS/$FLECS/flecs.h	/^void ecs_set_os_api_impl(void);$/;"	p	typeref:typename:FLECS_API void	signature:(void)
ecs_set_override	$FLECS/$FLECS/flecs.h	/^#define ecs_set_override(/;"	d	signature:(world,entity,T,...)
ecs_set_pair	$FLECS/$FLECS/flecs.h	/^#define ecs_set_pair(/;"	d	signature:(world,subject,First,second,...)
ecs_set_pair_object	$FLECS/$FLECS/flecs.h	/^#define ecs_set_pair_object /;"	d
ecs_set_pair_second	$FLECS/$FLECS/flecs.h	/^#define ecs_set_pair_second(/;"	d	signature:(world,subject,first,Second,...)
ecs_set_pipeline	$FLECS/$FLECS/flecs.c	/^void ecs_set_pipeline($/;"	f	typeref:typename:void	signature:(ecs_world_t * world,ecs_entity_t pipeline)
ecs_set_pipeline	$FLECS/$FLECS/flecs.h	/^void ecs_set_pipeline($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_world_t * world,ecs_entity_t pipeline)
ecs_set_ptr	$FLECS/$FLECS/flecs.h	/^#define ecs_set_ptr(/;"	d	signature:(world,entity,component,ptr)
ecs_set_rate	$FLECS/$FLECS/flecs.c	/^ecs_entity_t ecs_set_rate($/;"	f	typeref:typename:ecs_entity_t	signature:(ecs_world_t * world,ecs_entity_t filter,int32_t rate,ecs_entity_t source)
ecs_set_rate	$FLECS/$FLECS/flecs.h	/^ecs_entity_t ecs_set_rate($/;"	p	typeref:typename:FLECS_API ecs_entity_t	signature:(ecs_world_t * world,ecs_entity_t tick_source,int32_t rate,ecs_entity_t source)
ecs_set_scope	$FLECS/$FLECS/flecs.c	/^ecs_entity_t ecs_set_scope($/;"	f	typeref:typename:ecs_entity_t	signature:(ecs_world_t * world,ecs_entity_t scope)
ecs_set_scope	$FLECS/$FLECS/flecs.h	/^ecs_entity_t ecs_set_scope($/;"	p	typeref:typename:FLECS_API ecs_entity_t	signature:(ecs_world_t * world,ecs_entity_t scope)
ecs_set_stage_count	$FLECS/$FLECS/flecs.c	/^void ecs_set_stage_count($/;"	f	typeref:typename:void	signature:(ecs_world_t * world,int32_t stage_count)
ecs_set_stage_count	$FLECS/$FLECS/flecs.h	/^void ecs_set_stage_count($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_world_t * world,int32_t stages)
ecs_set_symbol	$FLECS/$FLECS/flecs.c	/^ecs_entity_t ecs_set_symbol($/;"	f	typeref:typename:ecs_entity_t	signature:(ecs_world_t * world,ecs_entity_t entity,const char * name)
ecs_set_symbol	$FLECS/$FLECS/flecs.h	/^ecs_entity_t ecs_set_symbol($/;"	p	typeref:typename:FLECS_API ecs_entity_t	signature:(ecs_world_t * world,ecs_entity_t entity,const char * symbol)
ecs_set_target_fps	$FLECS/$FLECS/flecs.c	/^void ecs_set_target_fps($/;"	f	typeref:typename:void	signature:(ecs_world_t * world,ecs_ftime_t fps)
ecs_set_target_fps	$FLECS/$FLECS/flecs.h	/^void ecs_set_target_fps($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_world_t * world,ecs_ftime_t fps)
ecs_set_task_threads	$FLECS/$FLECS/flecs.c	/^void ecs_set_task_threads($/;"	f	typeref:typename:void	signature:(ecs_world_t * world,int32_t task_threads)
ecs_set_task_threads	$FLECS/$FLECS/flecs.h	/^void ecs_set_task_threads($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_world_t * world,int32_t task_threads)
ecs_set_threads	$FLECS/$FLECS/flecs.c	/^void ecs_set_threads($/;"	f	typeref:typename:void	signature:(ecs_world_t * world,int32_t threads)
ecs_set_threads	$FLECS/$FLECS/flecs.h	/^void ecs_set_threads($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_world_t * world,int32_t threads)
ecs_set_tick_source	$FLECS/$FLECS/flecs.c	/^void ecs_set_tick_source($/;"	f	typeref:typename:void	signature:(ecs_world_t * world,ecs_entity_t system,ecs_entity_t tick_source)
ecs_set_tick_source	$FLECS/$FLECS/flecs.h	/^void ecs_set_tick_source($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_world_t * world,ecs_entity_t system,ecs_entity_t tick_source)
ecs_set_time_scale	$FLECS/$FLECS/flecs.c	/^void ecs_set_time_scale($/;"	f	typeref:typename:void	signature:(ecs_world_t * world,ecs_ftime_t scale)
ecs_set_time_scale	$FLECS/$FLECS/flecs.h	/^void ecs_set_time_scale($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_world_t * world,ecs_ftime_t scale)
ecs_set_timeout	$FLECS/$FLECS/flecs.c	/^ecs_entity_t ecs_set_timeout($/;"	f	typeref:typename:ecs_entity_t	signature:(ecs_world_t * world,ecs_entity_t timer,ecs_ftime_t timeout)
ecs_set_timeout	$FLECS/$FLECS/flecs.h	/^ecs_entity_t ecs_set_timeout($/;"	p	typeref:typename:FLECS_API ecs_entity_t	signature:(ecs_world_t * world,ecs_entity_t tick_source,ecs_ftime_t timeout)
ecs_set_with	$FLECS/$FLECS/flecs.c	/^ecs_entity_t ecs_set_with($/;"	f	typeref:typename:ecs_entity_t	signature:(ecs_world_t * world,ecs_id_t id)
ecs_set_with	$FLECS/$FLECS/flecs.h	/^ecs_entity_t ecs_set_with($/;"	p	typeref:typename:FLECS_API ecs_entity_t	signature:(ecs_world_t * world,ecs_id_t id)
ecs_shares	$FLECS/$FLECS/flecs.h	/^#define ecs_shares(/;"	d	signature:(world,entity,T)
ecs_shares_id	$FLECS/$FLECS/flecs.h	/^#define ecs_shares_id(/;"	d	signature:(world,entity,id)
ecs_shares_pair	$FLECS/$FLECS/flecs.h	/^#define ecs_shares_pair(/;"	d	signature:(world,entity,first,second)
ecs_should_log	$FLECS/$FLECS/flecs.c	/^bool ecs_should_log(int32_t level) {$/;"	f	typeref:typename:bool	signature:(int32_t level)
ecs_should_log	$FLECS/$FLECS/flecs.h	/^bool ecs_should_log(int32_t level);$/;"	p	typeref:typename:FLECS_API bool	signature:(int32_t level)
ecs_should_log_1	$FLECS/$FLECS/flecs.h	/^#define ecs_should_log_1(/;"	d	signature:()
ecs_should_log_2	$FLECS/$FLECS/flecs.h	/^#define ecs_should_log_2(/;"	d	signature:()
ecs_should_log_3	$FLECS/$FLECS/flecs.h	/^#define ecs_should_log_3(/;"	d	signature:()
ecs_should_quit	$FLECS/$FLECS/flecs.c	/^bool ecs_should_quit($/;"	f	typeref:typename:bool	signature:(const ecs_world_t * world)
ecs_should_quit	$FLECS/$FLECS/flecs.h	/^bool ecs_should_quit($/;"	p	typeref:typename:FLECS_API bool	signature:(const ecs_world_t * world)
ecs_singleton_add	$FLECS/$FLECS/flecs.h	/^#define ecs_singleton_add(/;"	d	signature:(world,comp)
ecs_singleton_get	$FLECS/$FLECS/flecs.h	/^#define ecs_singleton_get(/;"	d	signature:(world,comp)
ecs_singleton_get_mut	$FLECS/$FLECS/flecs.h	/^#define ecs_singleton_get_mut(/;"	d	signature:(world,comp)
ecs_singleton_modified	$FLECS/$FLECS/flecs.h	/^#define ecs_singleton_modified(/;"	d	signature:(world,comp)
ecs_singleton_remove	$FLECS/$FLECS/flecs.h	/^#define ecs_singleton_remove(/;"	d	signature:(world,comp)
ecs_singleton_set	$FLECS/$FLECS/flecs.h	/^#define ecs_singleton_set(/;"	d	signature:(world,comp,...)
ecs_singleton_set_ptr	$FLECS/$FLECS/flecs.h	/^#define ecs_singleton_set_ptr(/;"	d	signature:(world,comp,ptr)
ecs_size_t	$FLECS/$FLECS/flecs.h	/^typedef int32_t ecs_size_t;$/;"	t	typeref:typename:int32_t
ecs_sleepf	$FLECS/$FLECS/flecs.c	/^void ecs_sleepf($/;"	f	typeref:typename:void	signature:(double t)
ecs_sleepf	$FLECS/$FLECS/flecs.h	/^void ecs_sleepf($/;"	p	typeref:typename:FLECS_API void	signature:(double t)
ecs_snapshot_free	$FLECS/$FLECS/flecs.c	/^void ecs_snapshot_free($/;"	f	typeref:typename:void	signature:(ecs_snapshot_t * snapshot)
ecs_snapshot_free	$FLECS/$FLECS/flecs.h	/^void ecs_snapshot_free($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_snapshot_t * snapshot)
ecs_snapshot_iter	$FLECS/$FLECS/flecs.c	/^ecs_iter_t ecs_snapshot_iter($/;"	f	typeref:typename:ecs_iter_t	signature:(ecs_snapshot_t * snapshot)
ecs_snapshot_iter	$FLECS/$FLECS/flecs.h	/^ecs_iter_t ecs_snapshot_iter($/;"	p	typeref:typename:FLECS_API ecs_iter_t	signature:(ecs_snapshot_t * snapshot)
ecs_snapshot_iter_t	$FLECS/$FLECS/flecs.h	/^} ecs_snapshot_iter_t;$/;"	t	typeref:struct:ecs_snapshot_iter_t
ecs_snapshot_next	$FLECS/$FLECS/flecs.c	/^bool ecs_snapshot_next($/;"	f	typeref:typename:bool	signature:(ecs_iter_t * it)
ecs_snapshot_next	$FLECS/$FLECS/flecs.h	/^bool ecs_snapshot_next($/;"	p	typeref:typename:FLECS_API bool	signature:(ecs_iter_t * iter)
ecs_snapshot_restore	$FLECS/$FLECS/flecs.c	/^void ecs_snapshot_restore($/;"	f	typeref:typename:void	signature:(ecs_world_t * world,ecs_snapshot_t * snapshot)
ecs_snapshot_restore	$FLECS/$FLECS/flecs.h	/^void ecs_snapshot_restore($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_world_t * world,ecs_snapshot_t * snapshot)
ecs_snapshot_t	$FLECS/$FLECS/flecs.c	/^struct ecs_snapshot_t {$/;"	s	file:
ecs_snapshot_t	$FLECS/$FLECS/flecs.h	/^typedef struct ecs_snapshot_t ecs_snapshot_t;$/;"	t	typeref:struct:ecs_snapshot_t
ecs_snapshot_take	$FLECS/$FLECS/flecs.c	/^ecs_snapshot_t* ecs_snapshot_take($/;"	f	typeref:typename:ecs_snapshot_t *	signature:(ecs_world_t * stage)
ecs_snapshot_take	$FLECS/$FLECS/flecs.h	/^ecs_snapshot_t* ecs_snapshot_take($/;"	p	typeref:typename:FLECS_API ecs_snapshot_t *	signature:(ecs_world_t * world)
ecs_snapshot_take_w_iter	$FLECS/$FLECS/flecs.c	/^ecs_snapshot_t* ecs_snapshot_take_w_iter($/;"	f	typeref:typename:ecs_snapshot_t *	signature:(ecs_iter_t * iter)
ecs_snapshot_take_w_iter	$FLECS/$FLECS/flecs.h	/^ecs_snapshot_t* ecs_snapshot_take_w_iter($/;"	p	typeref:typename:FLECS_API ecs_snapshot_t *	signature:(ecs_iter_t * iter)
ecs_sort_table	$FLECS/$FLECS/flecs.h	/^#define ecs_sort_table(/;"	d	signature:(id)
ecs_sort_table_action_t	$FLECS/$FLECS/flecs.h	/^typedef void (*ecs_sort_table_action_t)($/;"	t	typeref:typename:void (*)(ecs_world_t * world,ecs_table_t * table,ecs_entity_t * entities,void * ptr,int32_t size,int32_t lo,int32_t hi,ecs_order_by_action_t order_by)
ecs_sparse_add	$FLECS/$FLECS/flecs.c	/^void* ecs_sparse_add($/;"	f	typeref:typename:void *	signature:(ecs_sparse_t * sparse,ecs_size_t elem_size)
ecs_sparse_add	$FLECS/$FLECS/flecs.h	/^void* ecs_sparse_add($/;"	p	typeref:typename:FLECS_API void *	signature:(ecs_sparse_t * sparse,ecs_size_t elem_size)
ecs_sparse_add_t	$FLECS/$FLECS/flecs.h	/^#define ecs_sparse_add_t(/;"	d	signature:(sparse,T)
ecs_sparse_count	$FLECS/$FLECS/flecs.c	/^int32_t ecs_sparse_count($/;"	f	typeref:typename:int32_t	signature:(const ecs_sparse_t * sparse)
ecs_sparse_count	$FLECS/$FLECS/flecs.h	/^int32_t ecs_sparse_count($/;"	p	typeref:typename:FLECS_API int32_t	signature:(const ecs_sparse_t * sparse)
ecs_sparse_get	$FLECS/$FLECS/flecs.c	/^void* ecs_sparse_get($/;"	f	typeref:typename:void *	signature:(const ecs_sparse_t * sparse,ecs_size_t elem_size,uint64_t id)
ecs_sparse_get	$FLECS/$FLECS/flecs.h	/^void* ecs_sparse_get($/;"	p	typeref:typename:FLECS_API void *	signature:(const ecs_sparse_t * sparse,ecs_size_t elem_size,uint64_t id)
ecs_sparse_get_dense	$FLECS/$FLECS/flecs.c	/^void* ecs_sparse_get_dense($/;"	f	typeref:typename:void *	signature:(const ecs_sparse_t * sparse,ecs_size_t elem_size,int32_t index)
ecs_sparse_get_dense	$FLECS/$FLECS/flecs.h	/^void* ecs_sparse_get_dense($/;"	p	typeref:typename:FLECS_API void *	signature:(const ecs_sparse_t * sparse,ecs_size_t elem_size,int32_t index)
ecs_sparse_get_dense_t	$FLECS/$FLECS/flecs.h	/^#define ecs_sparse_get_dense_t(/;"	d	signature:(sparse,T,index)
ecs_sparse_get_t	$FLECS/$FLECS/flecs.h	/^#define ecs_sparse_get_t(/;"	d	signature:(sparse,T,index)
ecs_sparse_init	$FLECS/$FLECS/flecs.c	/^void ecs_sparse_init($/;"	f	typeref:typename:void	signature:(ecs_sparse_t * sparse,ecs_size_t elem_size)
ecs_sparse_init	$FLECS/$FLECS/flecs.h	/^void ecs_sparse_init($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_sparse_t * sparse,ecs_size_t elem_size)
ecs_sparse_init_t	$FLECS/$FLECS/flecs.h	/^#define ecs_sparse_init_t(/;"	d	signature:(sparse,T)
ecs_sparse_last_id	$FLECS/$FLECS/flecs.c	/^uint64_t ecs_sparse_last_id($/;"	f	typeref:typename:uint64_t	signature:(const ecs_sparse_t * sparse)
ecs_sparse_last_id	$FLECS/$FLECS/flecs.h	/^uint64_t ecs_sparse_last_id($/;"	p	typeref:typename:FLECS_API uint64_t	signature:(const ecs_sparse_t * sparse)
ecs_sparse_t	$FLECS/$FLECS/flecs.h	/^} ecs_sparse_t;$/;"	t	typeref:struct:ecs_sparse_t
ecs_stack_allocator_alloc_count	$FLECS/$FLECS/flecs.c	/^int64_t ecs_stack_allocator_alloc_count = 0;$/;"	v	typeref:typename:int64_t
ecs_stack_allocator_free_count	$FLECS/$FLECS/flecs.c	/^int64_t ecs_stack_allocator_free_count = 0;$/;"	v	typeref:typename:int64_t
ecs_stack_cursor_t	$FLECS/$FLECS/flecs.h	/^} ecs_stack_cursor_t;$/;"	t	typeref:struct:ecs_stack_cursor_t
ecs_stack_page_t	$FLECS/$FLECS/flecs.c	/^} ecs_stack_page_t;$/;"	t	typeref:struct:ecs_stack_page_t	file:
ecs_stack_t	$FLECS/$FLECS/flecs.c	/^} ecs_stack_t;$/;"	t	typeref:struct:ecs_stack_t	file:
ecs_stage_allocators_t	$FLECS/$FLECS/flecs.c	/^} ecs_stage_allocators_t;$/;"	t	typeref:struct:ecs_stage_allocators_t	file:
ecs_stage_is_async	$FLECS/$FLECS/flecs.c	/^bool ecs_stage_is_async($/;"	f	typeref:typename:bool	signature:(ecs_world_t * stage)
ecs_stage_is_async	$FLECS/$FLECS/flecs.h	/^bool ecs_stage_is_async($/;"	p	typeref:typename:FLECS_API bool	signature:(ecs_world_t * stage)
ecs_stage_is_readonly	$FLECS/$FLECS/flecs.c	/^bool ecs_stage_is_readonly($/;"	f	typeref:typename:bool	signature:(const ecs_world_t * stage)
ecs_stage_is_readonly	$FLECS/$FLECS/flecs.h	/^bool ecs_stage_is_readonly($/;"	p	typeref:typename:FLECS_API bool	signature:(const ecs_world_t * world)
ecs_stage_t	$FLECS/$FLECS/flecs.c	/^struct ecs_stage_t {$/;"	s	file:
ecs_stage_t	$FLECS/$FLECS/flecs.h	/^typedef struct ecs_stage_t ecs_stage_t;$/;"	t	typeref:struct:ecs_stage_t
ecs_stage_t_magic	$FLECS/$FLECS/flecs.h	/^#define ecs_stage_t_magic /;"	d
ecs_stage_t_mixins	$FLECS/$FLECS/flecs.c	/^ecs_mixins_t ecs_stage_t_mixins = {$/;"	v	typeref:typename:ecs_mixins_t
ecs_stage_t_tag	$FLECS/$FLECS/flecs.c	/^#define ecs_stage_t_tag /;"	d	file:
ecs_start_timer	$FLECS/$FLECS/flecs.c	/^void ecs_start_timer($/;"	f	typeref:typename:void	signature:(ecs_world_t * world,ecs_entity_t timer)
ecs_start_timer	$FLECS/$FLECS/flecs.h	/^void ecs_start_timer($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_world_t * world,ecs_entity_t tick_source)
ecs_stop_timer	$FLECS/$FLECS/flecs.c	/^void ecs_stop_timer($/;"	f	typeref:typename:void	signature:(ecs_world_t * world,ecs_entity_t timer)
ecs_stop_timer	$FLECS/$FLECS/flecs.h	/^void ecs_stop_timer($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_world_t * world,ecs_entity_t tick_source)
ecs_store_t	$FLECS/$FLECS/flecs.c	/^} ecs_store_t;$/;"	t	typeref:struct:ecs_store_t	file:
ecs_strbuf_append	$FLECS/$FLECS/flecs.c	/^bool ecs_strbuf_append($/;"	f	typeref:typename:bool	signature:(ecs_strbuf_t * b,const char * fmt,...)
ecs_strbuf_append	$FLECS/$FLECS/flecs.h	/^bool ecs_strbuf_append($/;"	p	typeref:typename:FLECS_API bool	signature:(ecs_strbuf_t * buffer,const char * fmt,...)
ecs_strbuf_appendbool	$FLECS/$FLECS/flecs.c	/^bool ecs_strbuf_appendbool($/;"	f	typeref:typename:bool	signature:(ecs_strbuf_t * buffer,bool v)
ecs_strbuf_appendbool	$FLECS/$FLECS/flecs.h	/^bool ecs_strbuf_appendbool($/;"	p	typeref:typename:FLECS_API bool	signature:(ecs_strbuf_t * buffer,bool v)
ecs_strbuf_appendch	$FLECS/$FLECS/flecs.c	/^bool ecs_strbuf_appendch($/;"	f	typeref:typename:bool	signature:(ecs_strbuf_t * b,char ch)
ecs_strbuf_appendch	$FLECS/$FLECS/flecs.h	/^bool ecs_strbuf_appendch($/;"	p	typeref:typename:FLECS_API bool	signature:(ecs_strbuf_t * buffer,char ch)
ecs_strbuf_appendflt	$FLECS/$FLECS/flecs.c	/^bool ecs_strbuf_appendflt($/;"	f	typeref:typename:bool	signature:(ecs_strbuf_t * b,double flt,char nan_delim)
ecs_strbuf_appendflt	$FLECS/$FLECS/flecs.h	/^bool ecs_strbuf_appendflt($/;"	p	typeref:typename:FLECS_API bool	signature:(ecs_strbuf_t * buffer,double v,char nan_delim)
ecs_strbuf_appendint	$FLECS/$FLECS/flecs.c	/^bool ecs_strbuf_appendint($/;"	f	typeref:typename:bool	signature:(ecs_strbuf_t * b,int64_t v)
ecs_strbuf_appendint	$FLECS/$FLECS/flecs.h	/^bool ecs_strbuf_appendint($/;"	p	typeref:typename:FLECS_API bool	signature:(ecs_strbuf_t * buffer,int64_t v)
ecs_strbuf_appendlit	$FLECS/$FLECS/flecs.h	/^#define ecs_strbuf_appendlit(/;"	d	signature:(buf,str)
ecs_strbuf_appendstr	$FLECS/$FLECS/flecs.c	/^bool ecs_strbuf_appendstr($/;"	f	typeref:typename:bool	signature:(ecs_strbuf_t * b,const char * str)
ecs_strbuf_appendstr	$FLECS/$FLECS/flecs.h	/^bool ecs_strbuf_appendstr($/;"	p	typeref:typename:FLECS_API bool	signature:(ecs_strbuf_t * buffer,const char * str)
ecs_strbuf_appendstr_zerocpy	$FLECS/$FLECS/flecs.c	/^bool ecs_strbuf_appendstr_zerocpy($/;"	f	typeref:typename:bool	signature:(ecs_strbuf_t * b,char * str)
ecs_strbuf_appendstr_zerocpy	$FLECS/$FLECS/flecs.h	/^bool ecs_strbuf_appendstr_zerocpy($/;"	p	typeref:typename:FLECS_API bool	signature:(ecs_strbuf_t * buffer,char * str)
ecs_strbuf_appendstr_zerocpy_const	$FLECS/$FLECS/flecs.c	/^bool ecs_strbuf_appendstr_zerocpy_const($/;"	f	typeref:typename:bool	signature:(ecs_strbuf_t * b,const char * str)
ecs_strbuf_appendstr_zerocpy_const	$FLECS/$FLECS/flecs.h	/^bool ecs_strbuf_appendstr_zerocpy_const($/;"	p	typeref:typename:FLECS_API bool	signature:(ecs_strbuf_t * buffer,const char * str)
ecs_strbuf_appendstr_zerocpyn	$FLECS/$FLECS/flecs.c	/^bool ecs_strbuf_appendstr_zerocpyn($/;"	f	typeref:typename:bool	signature:(ecs_strbuf_t * b,char * str,int32_t n)
ecs_strbuf_appendstr_zerocpyn	$FLECS/$FLECS/flecs.h	/^bool ecs_strbuf_appendstr_zerocpyn($/;"	p	typeref:typename:FLECS_API bool	signature:(ecs_strbuf_t * buffer,char * str,int32_t n)
ecs_strbuf_appendstr_zerocpyn_const	$FLECS/$FLECS/flecs.c	/^bool ecs_strbuf_appendstr_zerocpyn_const($/;"	f	typeref:typename:bool	signature:(ecs_strbuf_t * b,const char * str,int32_t n)
ecs_strbuf_appendstr_zerocpyn_const	$FLECS/$FLECS/flecs.h	/^bool ecs_strbuf_appendstr_zerocpyn_const($/;"	p	typeref:typename:FLECS_API bool	signature:(ecs_strbuf_t * buffer,const char * str,int32_t n)
ecs_strbuf_appendstrn	$FLECS/$FLECS/flecs.c	/^bool ecs_strbuf_appendstrn($/;"	f	typeref:typename:bool	signature:(ecs_strbuf_t * b,const char * str,int32_t len)
ecs_strbuf_appendstrn	$FLECS/$FLECS/flecs.h	/^bool ecs_strbuf_appendstrn($/;"	p	typeref:typename:FLECS_API bool	signature:(ecs_strbuf_t * buffer,const char * str,int32_t n)
ecs_strbuf_element	$FLECS/$FLECS/flecs.h	/^} ecs_strbuf_element;$/;"	t	typeref:struct:ecs_strbuf_element
ecs_strbuf_element_embedded	$FLECS/$FLECS/flecs.h	/^} ecs_strbuf_element_embedded;$/;"	t	typeref:struct:ecs_strbuf_element_embedded
ecs_strbuf_element_str	$FLECS/$FLECS/flecs.h	/^} ecs_strbuf_element_str;$/;"	t	typeref:struct:ecs_strbuf_element_str
ecs_strbuf_get	$FLECS/$FLECS/flecs.c	/^char* ecs_strbuf_get($/;"	f	typeref:typename:char *	signature:(ecs_strbuf_t * b)
ecs_strbuf_get	$FLECS/$FLECS/flecs.h	/^char *ecs_strbuf_get($/;"	p	typeref:typename:FLECS_API char *	signature:(ecs_strbuf_t * buffer)
ecs_strbuf_get_small	$FLECS/$FLECS/flecs.c	/^char *ecs_strbuf_get_small($/;"	f	typeref:typename:char *	signature:(ecs_strbuf_t * b)
ecs_strbuf_get_small	$FLECS/$FLECS/flecs.h	/^char *ecs_strbuf_get_small($/;"	p	typeref:typename:FLECS_API char *	signature:(ecs_strbuf_t * buffer)
ecs_strbuf_list_append	$FLECS/$FLECS/flecs.c	/^bool ecs_strbuf_list_append($/;"	f	typeref:typename:bool	signature:(ecs_strbuf_t * b,const char * fmt,...)
ecs_strbuf_list_append	$FLECS/$FLECS/flecs.h	/^bool ecs_strbuf_list_append($/;"	p	typeref:typename:FLECS_API bool	signature:(ecs_strbuf_t * buffer,const char * fmt,...)
ecs_strbuf_list_appendch	$FLECS/$FLECS/flecs.c	/^bool ecs_strbuf_list_appendch($/;"	f	typeref:typename:bool	signature:(ecs_strbuf_t * b,char ch)
ecs_strbuf_list_appendch	$FLECS/$FLECS/flecs.h	/^bool ecs_strbuf_list_appendch($/;"	p	typeref:typename:FLECS_API bool	signature:(ecs_strbuf_t * buffer,char ch)
ecs_strbuf_list_appendlit	$FLECS/$FLECS/flecs.h	/^#define ecs_strbuf_list_appendlit(/;"	d	signature:(buf,str)
ecs_strbuf_list_appendstr	$FLECS/$FLECS/flecs.c	/^bool ecs_strbuf_list_appendstr($/;"	f	typeref:typename:bool	signature:(ecs_strbuf_t * b,const char * str)
ecs_strbuf_list_appendstr	$FLECS/$FLECS/flecs.h	/^bool ecs_strbuf_list_appendstr($/;"	p	typeref:typename:FLECS_API bool	signature:(ecs_strbuf_t * buffer,const char * str)
ecs_strbuf_list_appendstrn	$FLECS/$FLECS/flecs.c	/^bool ecs_strbuf_list_appendstrn($/;"	f	typeref:typename:bool	signature:(ecs_strbuf_t * b,const char * str,int32_t n)
ecs_strbuf_list_appendstrn	$FLECS/$FLECS/flecs.h	/^bool ecs_strbuf_list_appendstrn($/;"	p	typeref:typename:FLECS_API bool	signature:(ecs_strbuf_t * buffer,const char * str,int32_t n)
ecs_strbuf_list_elem	$FLECS/$FLECS/flecs.h	/^} ecs_strbuf_list_elem;$/;"	t	typeref:struct:ecs_strbuf_list_elem
ecs_strbuf_list_next	$FLECS/$FLECS/flecs.c	/^void ecs_strbuf_list_next($/;"	f	typeref:typename:void	signature:(ecs_strbuf_t * b)
ecs_strbuf_list_next	$FLECS/$FLECS/flecs.h	/^void ecs_strbuf_list_next($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_strbuf_t * buffer)
ecs_strbuf_list_pop	$FLECS/$FLECS/flecs.c	/^void ecs_strbuf_list_pop($/;"	f	typeref:typename:void	signature:(ecs_strbuf_t * b,const char * list_close)
ecs_strbuf_list_pop	$FLECS/$FLECS/flecs.h	/^void ecs_strbuf_list_pop($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_strbuf_t * buffer,const char * list_close)
ecs_strbuf_list_push	$FLECS/$FLECS/flecs.c	/^void ecs_strbuf_list_push($/;"	f	typeref:typename:void	signature:(ecs_strbuf_t * b,const char * list_open,const char * separator)
ecs_strbuf_list_push	$FLECS/$FLECS/flecs.h	/^void ecs_strbuf_list_push($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_strbuf_t * buffer,const char * list_open,const char * separator)
ecs_strbuf_mergebuff	$FLECS/$FLECS/flecs.c	/^bool ecs_strbuf_mergebuff($/;"	f	typeref:typename:bool	signature:(ecs_strbuf_t * dst_buffer,ecs_strbuf_t * src_buffer)
ecs_strbuf_mergebuff	$FLECS/$FLECS/flecs.h	/^bool ecs_strbuf_mergebuff($/;"	p	typeref:typename:FLECS_API bool	signature:(ecs_strbuf_t * dst_buffer,ecs_strbuf_t * src_buffer)
ecs_strbuf_reset	$FLECS/$FLECS/flecs.c	/^void ecs_strbuf_reset($/;"	f	typeref:typename:void	signature:(ecs_strbuf_t * b)
ecs_strbuf_reset	$FLECS/$FLECS/flecs.h	/^void ecs_strbuf_reset($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_strbuf_t * buffer)
ecs_strbuf_t	$FLECS/$FLECS/flecs.h	/^} ecs_strbuf_t;$/;"	t	typeref:struct:ecs_strbuf_t
ecs_strbuf_vappend	$FLECS/$FLECS/flecs.c	/^bool ecs_strbuf_vappend($/;"	f	typeref:typename:bool	signature:(ecs_strbuf_t * b,const char * fmt,va_list args)
ecs_strbuf_vappend	$FLECS/$FLECS/flecs.h	/^bool ecs_strbuf_vappend($/;"	p	typeref:typename:FLECS_API bool	signature:(ecs_strbuf_t * buffer,const char * fmt,va_list args)
ecs_strbuf_written	$FLECS/$FLECS/flecs.c	/^int32_t ecs_strbuf_written($/;"	f	typeref:typename:int32_t	signature:(const ecs_strbuf_t * b)
ecs_strbuf_written	$FLECS/$FLECS/flecs.h	/^int32_t ecs_strbuf_written($/;"	p	typeref:typename:FLECS_API int32_t	signature:(const ecs_strbuf_t * buffer)
ecs_strerror	$FLECS/$FLECS/flecs.c	/^const char* ecs_strerror($/;"	f	typeref:typename:const char *	signature:(int32_t error_code)
ecs_strerror	$FLECS/$FLECS/flecs.h	/^const char* ecs_strerror($/;"	p	typeref:typename:FLECS_API const char *	signature:(int32_t error_code)
ecs_stresc	$FLECS/$FLECS/flecs.c	/^ecs_size_t ecs_stresc($/;"	f	typeref:typename:ecs_size_t	signature:(char * out,ecs_size_t n,char delimiter,const char * in)
ecs_stresc	$FLECS/$FLECS/flecs.h	/^ecs_size_t ecs_stresc($/;"	p	typeref:typename:FLECS_API ecs_size_t	signature:(char * out,ecs_size_t size,char delimiter,const char * in)
ecs_string_t	$FLECS/$FLECS/flecs.h	/^typedef char* ecs_string_t;$/;"	t	typeref:typename:char *
ecs_strip_generation	$FLECS/$FLECS/flecs.c	/^ecs_id_t ecs_strip_generation($/;"	f	typeref:typename:ecs_id_t	signature:(ecs_entity_t e)
ecs_strip_generation	$FLECS/$FLECS/flecs.h	/^ecs_id_t ecs_strip_generation($/;"	p	typeref:typename:FLECS_API ecs_id_t	signature:(ecs_entity_t e)
ecs_struct	$FLECS/$FLECS/flecs.h	/^#define ecs_struct(/;"	d	signature:(world,...)
ecs_struct_desc_t	$FLECS/$FLECS/flecs.h	/^} ecs_struct_desc_t;$/;"	t	typeref:struct:ecs_struct_desc_t
ecs_struct_init	$FLECS/$FLECS/flecs.c	/^ecs_entity_t ecs_struct_init($/;"	f	typeref:typename:ecs_entity_t	signature:(ecs_world_t * world,const ecs_struct_desc_t * desc)
ecs_struct_init	$FLECS/$FLECS/flecs.h	/^ecs_entity_t ecs_struct_init($/;"	p	typeref:typename:FLECS_API ecs_entity_t	signature:(ecs_world_t * world,const ecs_struct_desc_t * desc)
ecs_suspend_readonly_state_t	$FLECS/$FLECS/flecs.c	/^} ecs_suspend_readonly_state_t;$/;"	t	typeref:struct:ecs_suspend_readonly_state_t	file:
ecs_switch_header_t	$FLECS/$FLECS/flecs.c	/^} ecs_switch_header_t;$/;"	t	typeref:struct:ecs_switch_header_t	file:
ecs_switch_node_t	$FLECS/$FLECS/flecs.c	/^} ecs_switch_node_t;$/;"	t	typeref:struct:ecs_switch_node_t	file:
ecs_switch_t	$FLECS/$FLECS/flecs.c	/^struct ecs_switch_t {    $/;"	s	file:
ecs_switch_t	$FLECS/$FLECS/flecs.h	/^typedef struct ecs_switch_t ecs_switch_t;$/;"	t	typeref:struct:ecs_switch_t
ecs_sync_stats_t	$FLECS/$FLECS/flecs.h	/^} ecs_sync_stats_t;$/;"	t	typeref:struct:ecs_sync_stats_t
ecs_system	$FLECS/$FLECS/flecs.h	/^#define ecs_system(/;"	d	signature:(world,...)
ecs_system_activate	$FLECS/$FLECS/flecs.c	/^void ecs_system_activate($/;"	p	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_entity_t system,bool activate,const ecs_system_t * system_data)
ecs_system_desc_t	$FLECS/$FLECS/flecs.h	/^} ecs_system_desc_t;$/;"	t	typeref:struct:ecs_system_desc_t
ecs_system_get_binding_ctx	$FLECS/$FLECS/flecs.c	/^void* ecs_system_get_binding_ctx($/;"	f	typeref:typename:void *	signature:(const ecs_world_t * world,ecs_entity_t system)
ecs_system_get_binding_ctx	$FLECS/$FLECS/flecs.h	/^void* ecs_system_get_binding_ctx($/;"	p	typeref:typename:FLECS_API void *	signature:(const ecs_world_t * world,ecs_entity_t system)
ecs_system_get_ctx	$FLECS/$FLECS/flecs.c	/^void* ecs_system_get_ctx($/;"	f	typeref:typename:void *	signature:(const ecs_world_t * world,ecs_entity_t system)
ecs_system_get_ctx	$FLECS/$FLECS/flecs.h	/^void* ecs_system_get_ctx($/;"	p	typeref:typename:FLECS_API void *	signature:(const ecs_world_t * world,ecs_entity_t system)
ecs_system_get_query	$FLECS/$FLECS/flecs.c	/^ecs_query_t* ecs_system_get_query($/;"	f	typeref:typename:ecs_query_t *	signature:(const ecs_world_t * world,ecs_entity_t system)
ecs_system_get_query	$FLECS/$FLECS/flecs.h	/^ecs_query_t* ecs_system_get_query($/;"	p	typeref:typename:FLECS_API ecs_query_t *	signature:(const ecs_world_t * world,ecs_entity_t system)
ecs_system_init	$FLECS/$FLECS/flecs.c	/^ecs_entity_t ecs_system_init($/;"	f	typeref:typename:ecs_entity_t	signature:(ecs_world_t * world,const ecs_system_desc_t * desc)
ecs_system_init	$FLECS/$FLECS/flecs.h	/^ecs_entity_t ecs_system_init($/;"	p	typeref:typename:FLECS_API ecs_entity_t	signature:(ecs_world_t * world,const ecs_system_desc_t * desc)
ecs_system_stats_copy_last	$FLECS/$FLECS/flecs.c	/^void ecs_system_stats_copy_last($/;"	f	typeref:typename:void	signature:(ecs_system_stats_t * dst,const ecs_system_stats_t * src)
ecs_system_stats_copy_last	$FLECS/$FLECS/flecs.h	/^void ecs_system_stats_copy_last($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_system_stats_t * dst,const ecs_system_stats_t * src)
ecs_system_stats_get	$FLECS/$FLECS/flecs.c	/^bool ecs_system_stats_get($/;"	f	typeref:typename:bool	signature:(const ecs_world_t * world,ecs_entity_t system,ecs_system_stats_t * s)
ecs_system_stats_get	$FLECS/$FLECS/flecs.h	/^bool ecs_system_stats_get($/;"	p	typeref:typename:FLECS_API bool	signature:(const ecs_world_t * world,ecs_entity_t system,ecs_system_stats_t * stats)
ecs_system_stats_reduce	$FLECS/$FLECS/flecs.c	/^void ecs_system_stats_reduce($/;"	f	typeref:typename:void	signature:(ecs_system_stats_t * dst,const ecs_system_stats_t * src)
ecs_system_stats_reduce	$FLECS/$FLECS/flecs.h	/^void ecs_system_stats_reduce($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_system_stats_t * dst,const ecs_system_stats_t * src)
ecs_system_stats_reduce_last	$FLECS/$FLECS/flecs.c	/^void ecs_system_stats_reduce_last($/;"	f	typeref:typename:void	signature:(ecs_system_stats_t * dst,const ecs_system_stats_t * src,int32_t count)
ecs_system_stats_reduce_last	$FLECS/$FLECS/flecs.h	/^void ecs_system_stats_reduce_last($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_system_stats_t * stats,const ecs_system_stats_t * old,int32_t count)
ecs_system_stats_repeat_last	$FLECS/$FLECS/flecs.c	/^void ecs_system_stats_repeat_last($/;"	f	typeref:typename:void	signature:(ecs_system_stats_t * stats)
ecs_system_stats_repeat_last	$FLECS/$FLECS/flecs.h	/^void ecs_system_stats_repeat_last($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_system_stats_t * stats)
ecs_system_stats_t	$FLECS/$FLECS/flecs.h	/^} ecs_system_stats_t;$/;"	t	typeref:struct:ecs_system_stats_t
ecs_system_t	$FLECS/$FLECS/flecs.c	/^} ecs_system_t;$/;"	t	typeref:struct:ecs_system_t	file:
ecs_system_t_magic	$FLECS/$FLECS/flecs.c	/^#define ecs_system_t_magic /;"	d	file:
ecs_system_t_mixins	$FLECS/$FLECS/flecs.c	/^ecs_mixins_t ecs_system_t_mixins = {$/;"	v	typeref:typename:ecs_mixins_t
ecs_system_t_tag	$FLECS/$FLECS/flecs.c	/^#define ecs_system_t_tag /;"	d	file:
ecs_table__t	$FLECS/$FLECS/flecs.c	/^} ecs_table__t;$/;"	t	typeref:struct:ecs_table__t	file:
ecs_table_add_id	$FLECS/$FLECS/flecs.c	/^ecs_table_t* ecs_table_add_id($/;"	f	typeref:typename:ecs_table_t *	signature:(ecs_world_t * world,ecs_table_t * table,ecs_id_t id)
ecs_table_add_id	$FLECS/$FLECS/flecs.h	/^ecs_table_t* ecs_table_add_id($/;"	p	typeref:typename:FLECS_API ecs_table_t *	signature:(ecs_world_t * world,ecs_table_t * table,ecs_id_t id)
ecs_table_cache_fini	$FLECS/$FLECS/flecs.c	/^void ecs_table_cache_fini($/;"	p	typeref:typename:void	file:	signature:(ecs_table_cache_t * cache)
ecs_table_cache_get	$FLECS/$FLECS/flecs.c	/^void* ecs_table_cache_get($/;"	p	typeref:typename:void *	file:	signature:(const ecs_table_cache_t * cache,const ecs_table_t * table)
ecs_table_cache_hdr_t	$FLECS/$FLECS/flecs.c	/^} ecs_table_cache_hdr_t;$/;"	t	typeref:struct:ecs_table_cache_hdr_t	file:
ecs_table_cache_init	$FLECS/$FLECS/flecs.c	/^void ecs_table_cache_init($/;"	p	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_table_cache_t * cache)
ecs_table_cache_insert	$FLECS/$FLECS/flecs.c	/^void ecs_table_cache_insert($/;"	p	typeref:typename:void	file:	signature:(ecs_table_cache_t * cache,const ecs_table_t * table,ecs_table_cache_hdr_t * result)
ecs_table_cache_is_empty	$FLECS/$FLECS/flecs.c	/^bool ecs_table_cache_is_empty($/;"	p	typeref:typename:bool	file:	signature:(const ecs_table_cache_t * cache)
ecs_table_cache_iter_t	$FLECS/$FLECS/flecs.h	/^} ecs_table_cache_iter_t;$/;"	t	typeref:struct:ecs_table_cache_iter_t
ecs_table_cache_list_t	$FLECS/$FLECS/flecs.c	/^} ecs_table_cache_list_t;$/;"	t	typeref:struct:ecs_table_cache_list_t	file:
ecs_table_cache_remove	$FLECS/$FLECS/flecs.c	/^void* ecs_table_cache_remove($/;"	p	typeref:typename:void *	file:	signature:(ecs_table_cache_t * cache,uint64_t table_id,ecs_table_cache_hdr_t * elem)
ecs_table_cache_replace	$FLECS/$FLECS/flecs.c	/^void ecs_table_cache_replace($/;"	p	typeref:typename:void	file:	signature:(ecs_table_cache_t * cache,const ecs_table_t * table,ecs_table_cache_hdr_t * elem)
ecs_table_cache_set_empty	$FLECS/$FLECS/flecs.c	/^bool ecs_table_cache_set_empty($/;"	p	typeref:typename:bool	file:	signature:(ecs_table_cache_t * cache,const ecs_table_t * table,bool empty)
ecs_table_cache_t	$FLECS/$FLECS/flecs.c	/^} ecs_table_cache_t;$/;"	t	typeref:struct:ecs_table_cache_t	file:
ecs_table_column_count	$FLECS/$FLECS/flecs.c	/^int32_t ecs_table_column_count($/;"	f	typeref:typename:int32_t	signature:(const ecs_table_t * table)
ecs_table_column_count	$FLECS/$FLECS/flecs.h	/^int32_t ecs_table_column_count($/;"	p	typeref:typename:FLECS_API int32_t	signature:(const ecs_table_t * table)
ecs_table_column_to_type_index	$FLECS/$FLECS/flecs.c	/^int32_t ecs_table_column_to_type_index($/;"	f	typeref:typename:int32_t	signature:(const ecs_table_t * table,int32_t index)
ecs_table_column_to_type_index	$FLECS/$FLECS/flecs.h	/^int32_t ecs_table_column_to_type_index($/;"	p	typeref:typename:FLECS_API int32_t	signature:(const ecs_table_t * table,int32_t index)
ecs_table_count	$FLECS/$FLECS/flecs.c	/^int32_t ecs_table_count($/;"	f	typeref:typename:int32_t	signature:(const ecs_table_t * table)
ecs_table_count	$FLECS/$FLECS/flecs.h	/^int32_t ecs_table_count($/;"	p	typeref:typename:FLECS_API int32_t	signature:(const ecs_table_t * table)
ecs_table_diff_builder_t	$FLECS/$FLECS/flecs.c	/^} ecs_table_diff_builder_t;$/;"	t	typeref:struct:ecs_table_diff_builder_t	file:
ecs_table_diff_t	$FLECS/$FLECS/flecs.c	/^} ecs_table_diff_t;$/;"	t	typeref:struct:ecs_table_diff_t	file:
ecs_table_event_t	$FLECS/$FLECS/flecs.c	/^} ecs_table_event_t;$/;"	t	typeref:struct:ecs_table_event_t	file:
ecs_table_eventkind_t	$FLECS/$FLECS/flecs.c	/^} ecs_table_eventkind_t;$/;"	t	typeref:enum:ecs_table_eventkind_t	file:
ecs_table_find	$FLECS/$FLECS/flecs.c	/^ecs_table_t* ecs_table_find($/;"	f	typeref:typename:ecs_table_t *	signature:(ecs_world_t * world,const ecs_id_t * ids,int32_t id_count)
ecs_table_find	$FLECS/$FLECS/flecs.h	/^ecs_table_t* ecs_table_find($/;"	p	typeref:typename:FLECS_API ecs_table_t *	signature:(ecs_world_t * world,const ecs_id_t * ids,int32_t id_count)
ecs_table_get	$FLECS/$FLECS/flecs.h	/^#define ecs_table_get(/;"	d	signature:(world,table,T,offset)
ecs_table_get_column	$FLECS/$FLECS/flecs.c	/^void* ecs_table_get_column($/;"	f	typeref:typename:void *	signature:(const ecs_table_t * table,int32_t index,int32_t offset)
ecs_table_get_column	$FLECS/$FLECS/flecs.h	/^void* ecs_table_get_column($/;"	p	typeref:typename:FLECS_API void *	signature:(const ecs_table_t * table,int32_t index,int32_t offset)
ecs_table_get_column_index	$FLECS/$FLECS/flecs.c	/^int32_t ecs_table_get_column_index($/;"	f	typeref:typename:int32_t	signature:(const ecs_world_t * world,const ecs_table_t * table,ecs_id_t id)
ecs_table_get_column_index	$FLECS/$FLECS/flecs.h	/^int32_t ecs_table_get_column_index($/;"	p	typeref:typename:FLECS_API int32_t	signature:(const ecs_world_t * world,const ecs_table_t * table,ecs_id_t id)
ecs_table_get_column_size	$FLECS/$FLECS/flecs.c	/^size_t ecs_table_get_column_size($/;"	f	typeref:typename:size_t	signature:(const ecs_table_t * table,int32_t column)
ecs_table_get_column_size	$FLECS/$FLECS/flecs.h	/^size_t ecs_table_get_column_size($/;"	p	typeref:typename:FLECS_API size_t	signature:(const ecs_table_t * table,int32_t index)
ecs_table_get_depth	$FLECS/$FLECS/flecs.c	/^int32_t ecs_table_get_depth($/;"	f	typeref:typename:int32_t	signature:(const ecs_world_t * world,const ecs_table_t * table,ecs_entity_t rel)
ecs_table_get_depth	$FLECS/$FLECS/flecs.h	/^int32_t ecs_table_get_depth($/;"	p	typeref:typename:FLECS_API int32_t	signature:(const ecs_world_t * world,const ecs_table_t * table,ecs_entity_t rel)
ecs_table_get_id	$FLECS/$FLECS/flecs.c	/^void* ecs_table_get_id($/;"	f	typeref:typename:void *	signature:(const ecs_world_t * world,const ecs_table_t * table,ecs_id_t id,int32_t offset)
ecs_table_get_id	$FLECS/$FLECS/flecs.h	/^void* ecs_table_get_id($/;"	p	typeref:typename:FLECS_API void *	signature:(const ecs_world_t * world,const ecs_table_t * table,ecs_id_t id,int32_t offset)
ecs_table_get_pair	$FLECS/$FLECS/flecs.h	/^#define ecs_table_get_pair(/;"	d	signature:(world,table,First,second,offset)
ecs_table_get_pair_second	$FLECS/$FLECS/flecs.h	/^#define ecs_table_get_pair_second(/;"	d	signature:(world,table,first,Second,offset)
ecs_table_get_type	$FLECS/$FLECS/flecs.c	/^const ecs_type_t* ecs_table_get_type($/;"	f	typeref:typename:const ecs_type_t *	signature:(const ecs_table_t * table)
ecs_table_get_type	$FLECS/$FLECS/flecs.h	/^const ecs_type_t* ecs_table_get_type($/;"	p	typeref:typename:FLECS_API const ecs_type_t *	signature:(const ecs_table_t * table)
ecs_table_get_type_index	$FLECS/$FLECS/flecs.c	/^int32_t ecs_table_get_type_index($/;"	f	typeref:typename:int32_t	signature:(const ecs_world_t * world,const ecs_table_t * table,ecs_id_t id)
ecs_table_get_type_index	$FLECS/$FLECS/flecs.h	/^int32_t ecs_table_get_type_index($/;"	p	typeref:typename:FLECS_API int32_t	signature:(const ecs_world_t * world,const ecs_table_t * table,ecs_id_t id)
ecs_table_has_flags	$FLECS/$FLECS/flecs.c	/^bool ecs_table_has_flags($/;"	f	typeref:typename:bool	signature:(ecs_table_t * table,ecs_flags32_t flags)
ecs_table_has_flags	$FLECS/$FLECS/flecs.h	/^bool ecs_table_has_flags($/;"	p	typeref:typename:FLECS_API bool	signature:(ecs_table_t * table,ecs_flags32_t flags)
ecs_table_has_id	$FLECS/$FLECS/flecs.c	/^bool ecs_table_has_id($/;"	f	typeref:typename:bool	signature:(const ecs_world_t * world,const ecs_table_t * table,ecs_id_t id)
ecs_table_has_id	$FLECS/$FLECS/flecs.h	/^bool ecs_table_has_id($/;"	p	typeref:typename:FLECS_API bool	signature:(const ecs_world_t * world,const ecs_table_t * table,ecs_id_t id)
ecs_table_leaf_t	$FLECS/$FLECS/flecs.c	/^} ecs_table_leaf_t;$/;"	t	typeref:struct:ecs_table_leaf_t	file:
ecs_table_lock	$FLECS/$FLECS/flecs.c	/^void ecs_table_lock($/;"	f	typeref:typename:void	signature:(ecs_world_t * world,ecs_table_t * table)
ecs_table_lock	$FLECS/$FLECS/flecs.h	/^void ecs_table_lock($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_world_t * world,ecs_table_t * table)
ecs_table_range_t	$FLECS/$FLECS/flecs.h	/^} ecs_table_range_t;$/;"	t	typeref:struct:ecs_table_range_t
ecs_table_record_t	$FLECS/$FLECS/flecs.c	/^struct ecs_table_record_t {$/;"	s	file:
ecs_table_record_t	$FLECS/$FLECS/flecs.h	/^typedef struct ecs_table_record_t ecs_table_record_t;$/;"	t	typeref:struct:ecs_table_record_t
ecs_table_remove_id	$FLECS/$FLECS/flecs.c	/^ecs_table_t* ecs_table_remove_id($/;"	f	typeref:typename:ecs_table_t *	signature:(ecs_world_t * world,ecs_table_t * table,ecs_id_t id)
ecs_table_remove_id	$FLECS/$FLECS/flecs.h	/^ecs_table_t* ecs_table_remove_id($/;"	p	typeref:typename:FLECS_API ecs_table_t *	signature:(ecs_world_t * world,ecs_table_t * table,ecs_id_t id)
ecs_table_str	$FLECS/$FLECS/flecs.c	/^char* ecs_table_str($/;"	f	typeref:typename:char *	signature:(const ecs_world_t * world,const ecs_table_t * table)
ecs_table_str	$FLECS/$FLECS/flecs.h	/^char* ecs_table_str($/;"	p	typeref:typename:FLECS_API char *	signature:(const ecs_world_t * world,const ecs_table_t * table)
ecs_table_swap_rows	$FLECS/$FLECS/flecs.c	/^void ecs_table_swap_rows($/;"	f	typeref:typename:void	signature:(ecs_world_t * world,ecs_table_t * table,int32_t row_1,int32_t row_2)
ecs_table_swap_rows	$FLECS/$FLECS/flecs.h	/^void ecs_table_swap_rows($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_world_t * world,ecs_table_t * table,int32_t row_1,int32_t row_2)
ecs_table_t	$FLECS/$FLECS/flecs.c	/^struct ecs_table_t {$/;"	s	file:
ecs_table_t	$FLECS/$FLECS/flecs.h	/^typedef struct ecs_table_t ecs_table_t;$/;"	t	typeref:struct:ecs_table_t
ecs_table_t_magic	$FLECS/$FLECS/flecs.h	/^#define ecs_table_t_magic /;"	d
ecs_table_t_mixins	$FLECS/$FLECS/flecs.c	/^#define ecs_table_t_mixins /;"	d	file:
ecs_table_t_tag	$FLECS/$FLECS/flecs.c	/^#define ecs_table_t_tag /;"	d	file:
ecs_table_type_to_column_index	$FLECS/$FLECS/flecs.c	/^int32_t ecs_table_type_to_column_index($/;"	f	typeref:typename:int32_t	signature:(const ecs_table_t * table,int32_t index)
ecs_table_type_to_column_index	$FLECS/$FLECS/flecs.h	/^int32_t ecs_table_type_to_column_index($/;"	p	typeref:typename:FLECS_API int32_t	signature:(const ecs_table_t * table,int32_t index)
ecs_table_unlock	$FLECS/$FLECS/flecs.c	/^void ecs_table_unlock($/;"	f	typeref:typename:void	signature:(ecs_world_t * world,ecs_table_t * table)
ecs_table_unlock	$FLECS/$FLECS/flecs.h	/^void ecs_table_unlock($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_world_t * world,ecs_table_t * table)
ecs_term_chain_iter	$FLECS/$FLECS/flecs.c	/^ecs_iter_t ecs_term_chain_iter($/;"	f	typeref:typename:ecs_iter_t	signature:(const ecs_iter_t * chain_it,ecs_term_t * term)
ecs_term_chain_iter	$FLECS/$FLECS/flecs.h	/^ecs_iter_t ecs_term_chain_iter($/;"	p	typeref:typename:FLECS_API ecs_iter_t	signature:(const ecs_iter_t * it,ecs_term_t * term)
ecs_term_copy	$FLECS/$FLECS/flecs.c	/^ecs_term_t ecs_term_copy($/;"	f	typeref:typename:ecs_term_t	signature:(const ecs_term_t * src)
ecs_term_copy	$FLECS/$FLECS/flecs.h	/^ecs_term_t ecs_term_copy($/;"	p	typeref:typename:FLECS_API ecs_term_t	signature:(const ecs_term_t * src)
ecs_term_finalize	$FLECS/$FLECS/flecs.c	/^int ecs_term_finalize($/;"	f	typeref:typename:int	signature:(const ecs_world_t * world,ecs_term_t * term)
ecs_term_finalize	$FLECS/$FLECS/flecs.h	/^int ecs_term_finalize($/;"	p	typeref:typename:FLECS_API int	signature:(const ecs_world_t * world,ecs_term_t * term)
ecs_term_fini	$FLECS/$FLECS/flecs.c	/^void ecs_term_fini($/;"	f	typeref:typename:void	signature:(ecs_term_t * term)
ecs_term_fini	$FLECS/$FLECS/flecs.h	/^void ecs_term_fini($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_term_t * term)
ecs_term_id_is_set	$FLECS/$FLECS/flecs.c	/^bool ecs_term_id_is_set($/;"	f	typeref:typename:bool	signature:(const ecs_term_id_t * id)
ecs_term_id_is_set	$FLECS/$FLECS/flecs.h	/^bool ecs_term_id_is_set($/;"	p	typeref:typename:FLECS_API bool	signature:(const ecs_term_id_t * id)
ecs_term_id_t	$FLECS/$FLECS/flecs.h	/^} ecs_term_id_t;$/;"	t	typeref:struct:ecs_term_id_t
ecs_term_is_initialized	$FLECS/$FLECS/flecs.c	/^bool ecs_term_is_initialized($/;"	f	typeref:typename:bool	signature:(const ecs_term_t * term)
ecs_term_is_initialized	$FLECS/$FLECS/flecs.h	/^bool ecs_term_is_initialized($/;"	p	typeref:typename:FLECS_API bool	signature:(const ecs_term_t * term)
ecs_term_iter	$FLECS/$FLECS/flecs.c	/^ecs_iter_t ecs_term_iter($/;"	f	typeref:typename:ecs_iter_t	signature:(const ecs_world_t * stage,ecs_term_t * term)
ecs_term_iter	$FLECS/$FLECS/flecs.h	/^ecs_iter_t ecs_term_iter($/;"	p	typeref:typename:FLECS_API ecs_iter_t	signature:(const ecs_world_t * world,ecs_term_t * term)
ecs_term_iter_t	$FLECS/$FLECS/flecs.h	/^} ecs_term_iter_t;$/;"	t	typeref:struct:ecs_term_iter_t
ecs_term_match_0	$FLECS/$FLECS/flecs.c	/^bool ecs_term_match_0($/;"	f	typeref:typename:bool	signature:(const ecs_term_t * term)
ecs_term_match_0	$FLECS/$FLECS/flecs.h	/^bool ecs_term_match_0($/;"	p	typeref:typename:FLECS_API bool	signature:(const ecs_term_t * term)
ecs_term_match_this	$FLECS/$FLECS/flecs.c	/^bool ecs_term_match_this($/;"	f	typeref:typename:bool	signature:(const ecs_term_t * term)
ecs_term_match_this	$FLECS/$FLECS/flecs.h	/^bool ecs_term_match_this($/;"	p	typeref:typename:FLECS_API bool	signature:(const ecs_term_t * term)
ecs_term_move	$FLECS/$FLECS/flecs.c	/^ecs_term_t ecs_term_move($/;"	f	typeref:typename:ecs_term_t	signature:(ecs_term_t * src)
ecs_term_move	$FLECS/$FLECS/flecs.h	/^ecs_term_t ecs_term_move($/;"	p	typeref:typename:FLECS_API ecs_term_t	signature:(ecs_term_t * src)
ecs_term_next	$FLECS/$FLECS/flecs.c	/^bool ecs_term_next($/;"	f	typeref:typename:bool	signature:(ecs_iter_t * it)
ecs_term_next	$FLECS/$FLECS/flecs.h	/^bool ecs_term_next($/;"	p	typeref:typename:FLECS_API bool	signature:(ecs_iter_t * it)
ecs_term_str	$FLECS/$FLECS/flecs.c	/^char* ecs_term_str($/;"	f	typeref:typename:char *	signature:(const ecs_world_t * world,const ecs_term_t * term)
ecs_term_str	$FLECS/$FLECS/flecs.h	/^char* ecs_term_str($/;"	p	typeref:typename:FLECS_API char *	signature:(const ecs_world_t * world,const ecs_term_t * term)
ecs_term_t	$FLECS/$FLECS/flecs.h	/^typedef struct ecs_term_t ecs_term_t;$/;"	t	typeref:struct:ecs_term_t
ecs_throw	$FLECS/$FLECS/flecs.h	/^#define ecs_throw(/;"	d	signature:(error_code,...)
ecs_time_measure	$FLECS/$FLECS/flecs.c	/^double ecs_time_measure($/;"	f	typeref:typename:double	signature:(ecs_time_t * start)
ecs_time_measure	$FLECS/$FLECS/flecs.h	/^double ecs_time_measure($/;"	p	typeref:typename:FLECS_API double	signature:(ecs_time_t * start)
ecs_time_sub	$FLECS/$FLECS/flecs.c	/^ecs_time_t ecs_time_sub($/;"	f	typeref:typename:ecs_time_t	signature:(ecs_time_t t1,ecs_time_t t2)
ecs_time_sub	$FLECS/$FLECS/flecs.h	/^ecs_time_t ecs_time_sub($/;"	p	typeref:typename:FLECS_API ecs_time_t	signature:(ecs_time_t t1,ecs_time_t t2)
ecs_time_t	$FLECS/$FLECS/flecs.h	/^} ecs_time_t;$/;"	t	typeref:struct:ecs_time_t
ecs_time_to_double	$FLECS/$FLECS/flecs.c	/^double ecs_time_to_double($/;"	f	typeref:typename:double	signature:(ecs_time_t t)
ecs_time_to_double	$FLECS/$FLECS/flecs.h	/^double ecs_time_to_double($/;"	p	typeref:typename:FLECS_API double	signature:(ecs_time_t t)
ecs_token_t	$FLECS/$FLECS/flecs.c	/^typedef char ecs_token_t[ECS_MAX_TOKEN_SIZE];$/;"	t	typeref:typename:char[ECS_MAX_TOKEN_SIZE]	file:
ecs_trace	$FLECS/$FLECS/flecs.h	/^#define ecs_trace(/;"	d	signature:(...)
ecs_trace_	$FLECS/$FLECS/flecs.h	/^#define ecs_trace_(/;"	d	signature:(file,line,...)
ecs_trav_cache_t	$FLECS/$FLECS/flecs.c	/^} ecs_trav_cache_t;$/;"	t	typeref:struct:__anonb2bcda232908	file:
ecs_trav_down_elem_t	$FLECS/$FLECS/flecs.c	/^} ecs_trav_down_elem_t;$/;"	t	typeref:struct:__anonb2bcda232308	file:
ecs_trav_down_t	$FLECS/$FLECS/flecs.c	/^} ecs_trav_down_t;$/;"	t	typeref:struct:__anonb2bcda232408	file:
ecs_trav_elem_t	$FLECS/$FLECS/flecs.c	/^} ecs_trav_elem_t;$/;"	t	typeref:struct:__anonb2bcda232808	file:
ecs_trav_up_cache_t	$FLECS/$FLECS/flecs.c	/^} ecs_trav_up_cache_t;$/;"	t	typeref:struct:__anonb2bcda232608	file:
ecs_trav_up_t	$FLECS/$FLECS/flecs.c	/^} ecs_trav_up_t;$/;"	t	typeref:struct:__anonb2bcda232508	file:
ecs_trigger_t_magic	$FLECS/$FLECS/flecs.h	/^#define ecs_trigger_t_magic /;"	d
ecs_type_hooks_t	$FLECS/$FLECS/flecs.h	/^typedef struct ecs_type_hooks_t ecs_type_hooks_t;$/;"	t	typeref:struct:ecs_type_hooks_t
ecs_type_info_t	$FLECS/$FLECS/flecs.h	/^typedef struct ecs_type_info_t ecs_type_info_t;$/;"	t	typeref:struct:ecs_type_info_t
ecs_type_info_to_json	$FLECS/$FLECS/flecs.c	/^char* ecs_type_info_to_json($/;"	f	typeref:typename:char *	signature:(const ecs_world_t * world,ecs_entity_t type)
ecs_type_info_to_json	$FLECS/$FLECS/flecs.h	/^char* ecs_type_info_to_json($/;"	p	typeref:typename:FLECS_API char *	signature:(const ecs_world_t * world,ecs_entity_t type)
ecs_type_info_to_json_buf	$FLECS/$FLECS/flecs.c	/^int ecs_type_info_to_json_buf($/;"	f	typeref:typename:int	signature:(const ecs_world_t * world,ecs_entity_t type,ecs_strbuf_t * buf)
ecs_type_info_to_json_buf	$FLECS/$FLECS/flecs.h	/^int ecs_type_info_to_json_buf($/;"	p	typeref:typename:FLECS_API int	signature:(const ecs_world_t * world,ecs_entity_t type,ecs_strbuf_t * buf_out)
ecs_type_kind_t	$FLECS/$FLECS/flecs.h	/^} ecs_type_kind_t;$/;"	t	typeref:enum:ecs_type_kind_t
ecs_type_str	$FLECS/$FLECS/flecs.c	/^char* ecs_type_str($/;"	f	typeref:typename:char *	signature:(const ecs_world_t * world,const ecs_type_t * type)
ecs_type_str	$FLECS/$FLECS/flecs.h	/^char* ecs_type_str($/;"	p	typeref:typename:FLECS_API char *	signature:(const ecs_world_t * world,const ecs_type_t * type)
ecs_type_str_buf	$FLECS/$FLECS/flecs.c	/^void ecs_type_str_buf($/;"	f	typeref:typename:void	file:	signature:(const ecs_world_t * world,const ecs_type_t * type,ecs_strbuf_t * buf)
ecs_type_t	$FLECS/$FLECS/flecs.h	/^} ecs_type_t;$/;"	t	typeref:struct:__anonb2bcda280108
ecs_u16_t	$FLECS/$FLECS/flecs.h	/^typedef uint16_t ecs_u16_t;$/;"	t	typeref:typename:uint16_t
ecs_u32_t	$FLECS/$FLECS/flecs.h	/^typedef uint32_t ecs_u32_t;$/;"	t	typeref:typename:uint32_t
ecs_u64_t	$FLECS/$FLECS/flecs.h	/^typedef uint64_t ecs_u64_t;$/;"	t	typeref:typename:uint64_t
ecs_u8_t	$FLECS/$FLECS/flecs.h	/^typedef uint8_t ecs_u8_t;$/;"	t	typeref:typename:uint8_t
ecs_unit	$FLECS/$FLECS/flecs.h	/^#define ecs_unit(/;"	d	signature:(world,...)
ecs_unit_desc_t	$FLECS/$FLECS/flecs.h	/^} ecs_unit_desc_t;$/;"	t	typeref:struct:ecs_unit_desc_t
ecs_unit_init	$FLECS/$FLECS/flecs.c	/^ecs_entity_t ecs_unit_init($/;"	f	typeref:typename:ecs_entity_t	signature:(ecs_world_t * world,const ecs_unit_desc_t * desc)
ecs_unit_init	$FLECS/$FLECS/flecs.h	/^ecs_entity_t ecs_unit_init($/;"	p	typeref:typename:FLECS_API ecs_entity_t	signature:(ecs_world_t * world,const ecs_unit_desc_t * desc)
ecs_unit_prefix	$FLECS/$FLECS/flecs.h	/^#define ecs_unit_prefix(/;"	d	signature:(world,...)
ecs_unit_prefix_desc_t	$FLECS/$FLECS/flecs.h	/^} ecs_unit_prefix_desc_t;$/;"	t	typeref:struct:ecs_unit_prefix_desc_t
ecs_unit_prefix_init	$FLECS/$FLECS/flecs.c	/^ecs_entity_t ecs_unit_prefix_init($/;"	f	typeref:typename:ecs_entity_t	signature:(ecs_world_t * world,const ecs_unit_prefix_desc_t * desc)
ecs_unit_prefix_init	$FLECS/$FLECS/flecs.h	/^ecs_entity_t ecs_unit_prefix_init($/;"	p	typeref:typename:FLECS_API ecs_entity_t	signature:(ecs_world_t * world,const ecs_unit_prefix_desc_t * desc)
ecs_unit_translation_t	$FLECS/$FLECS/flecs.h	/^} ecs_unit_translation_t;$/;"	t	typeref:struct:ecs_unit_translation_t
ecs_uptr_t	$FLECS/$FLECS/flecs.h	/^typedef uintptr_t ecs_uptr_t;$/;"	t	typeref:typename:uintptr_t
ecs_using_task_threads	$FLECS/$FLECS/flecs.c	/^bool ecs_using_task_threads($/;"	f	typeref:typename:bool	signature:(ecs_world_t * world)
ecs_using_task_threads	$FLECS/$FLECS/flecs.h	/^bool ecs_using_task_threads($/;"	p	typeref:typename:FLECS_API bool	signature:(ecs_world_t * world)
ecs_value	$FLECS/$FLECS/flecs.h	/^#define ecs_value(T, ptr) ((ecs_value_/;"	d	signature:(T,ptr)
ecs_value_copy	$FLECS/$FLECS/flecs.c	/^int ecs_value_copy($/;"	f	typeref:typename:int	signature:(const ecs_world_t * world,ecs_entity_t type,void * dst,const void * src)
ecs_value_copy	$FLECS/$FLECS/flecs.h	/^int ecs_value_copy($/;"	p	typeref:typename:FLECS_API int	signature:(const ecs_world_t * world,ecs_entity_t type,void * dst,const void * src)
ecs_value_copy_w_type_info	$FLECS/$FLECS/flecs.c	/^int ecs_value_copy_w_type_info($/;"	f	typeref:typename:int	signature:(const ecs_world_t * world,const ecs_type_info_t * ti,void * dst,const void * src)
ecs_value_copy_w_type_info	$FLECS/$FLECS/flecs.h	/^int ecs_value_copy_w_type_info($/;"	p	typeref:typename:FLECS_API int	signature:(const ecs_world_t * world,const ecs_type_info_t * ti,void * dst,const void * src)
ecs_value_fini	$FLECS/$FLECS/flecs.c	/^int ecs_value_fini($/;"	f	typeref:typename:int	signature:(const ecs_world_t * world,ecs_entity_t type,void * ptr)
ecs_value_fini	$FLECS/$FLECS/flecs.h	/^int ecs_value_fini($/;"	p	typeref:typename:FLECS_API int	signature:(const ecs_world_t * world,ecs_entity_t type,void * ptr)
ecs_value_fini_w_type_info	$FLECS/$FLECS/flecs.c	/^int ecs_value_fini_w_type_info($/;"	f	typeref:typename:int	signature:(const ecs_world_t * world,const ecs_type_info_t * ti,void * ptr)
ecs_value_fini_w_type_info	$FLECS/$FLECS/flecs.h	/^int ecs_value_fini_w_type_info($/;"	p	typeref:typename:int	signature:(const ecs_world_t * world,const ecs_type_info_t * ti,void * ptr)
ecs_value_free	$FLECS/$FLECS/flecs.c	/^int ecs_value_free($/;"	f	typeref:typename:int	signature:(ecs_world_t * world,ecs_entity_t type,void * ptr)
ecs_value_free	$FLECS/$FLECS/flecs.h	/^int ecs_value_free($/;"	p	typeref:typename:FLECS_API int	signature:(ecs_world_t * world,ecs_entity_t type,void * ptr)
ecs_value_init	$FLECS/$FLECS/flecs.c	/^int ecs_value_init($/;"	f	typeref:typename:int	signature:(const ecs_world_t * world,ecs_entity_t type,void * ptr)
ecs_value_init	$FLECS/$FLECS/flecs.h	/^int ecs_value_init($/;"	p	typeref:typename:FLECS_API int	signature:(const ecs_world_t * world,ecs_entity_t type,void * ptr)
ecs_value_init_w_type_info	$FLECS/$FLECS/flecs.c	/^int ecs_value_init_w_type_info($/;"	f	typeref:typename:int	signature:(const ecs_world_t * world,const ecs_type_info_t * ti,void * ptr)
ecs_value_init_w_type_info	$FLECS/$FLECS/flecs.h	/^int ecs_value_init_w_type_info($/;"	p	typeref:typename:FLECS_API int	signature:(const ecs_world_t * world,const ecs_type_info_t * ti,void * ptr)
ecs_value_move	$FLECS/$FLECS/flecs.c	/^int ecs_value_move($/;"	f	typeref:typename:int	signature:(const ecs_world_t * world,ecs_entity_t type,void * dst,void * src)
ecs_value_move	$FLECS/$FLECS/flecs.h	/^int ecs_value_move($/;"	p	typeref:typename:int	signature:(const ecs_world_t * world,ecs_entity_t type,void * dst,void * src)
ecs_value_move_ctor	$FLECS/$FLECS/flecs.c	/^int ecs_value_move_ctor($/;"	f	typeref:typename:int	signature:(const ecs_world_t * world,ecs_entity_t type,void * dst,void * src)
ecs_value_move_ctor	$FLECS/$FLECS/flecs.h	/^int ecs_value_move_ctor($/;"	p	typeref:typename:int	signature:(const ecs_world_t * world,ecs_entity_t type,void * dst,void * src)
ecs_value_move_ctor_w_type_info	$FLECS/$FLECS/flecs.c	/^int ecs_value_move_ctor_w_type_info($/;"	f	typeref:typename:int	signature:(const ecs_world_t * world,const ecs_type_info_t * ti,void * dst,void * src)
ecs_value_move_ctor_w_type_info	$FLECS/$FLECS/flecs.h	/^int ecs_value_move_ctor_w_type_info($/;"	p	typeref:typename:int	signature:(const ecs_world_t * world,const ecs_type_info_t * ti,void * dst,void * src)
ecs_value_move_w_type_info	$FLECS/$FLECS/flecs.c	/^int ecs_value_move_w_type_info($/;"	f	typeref:typename:int	signature:(const ecs_world_t * world,const ecs_type_info_t * ti,void * dst,void * src)
ecs_value_move_w_type_info	$FLECS/$FLECS/flecs.h	/^int ecs_value_move_w_type_info($/;"	p	typeref:typename:int	signature:(const ecs_world_t * world,const ecs_type_info_t * ti,void * dst,void * src)
ecs_value_new	$FLECS/$FLECS/flecs.c	/^void* ecs_value_new($/;"	f	typeref:typename:void *	signature:(ecs_world_t * world,ecs_entity_t type)
ecs_value_new	$FLECS/$FLECS/flecs.h	/^void* ecs_value_new($/;"	p	typeref:typename:FLECS_API void *	signature:(ecs_world_t * world,ecs_entity_t type)
ecs_value_new_t	$FLECS/$FLECS/flecs.h	/^#define ecs_value_new_t(/;"	d	signature:(world,T)
ecs_value_new_w_type_info	$FLECS/$FLECS/flecs.c	/^void* ecs_value_new_w_type_info($/;"	f	typeref:typename:void *	signature:(ecs_world_t * world,const ecs_type_info_t * ti)
ecs_value_new_w_type_info	$FLECS/$FLECS/flecs.h	/^void* ecs_value_new_w_type_info($/;"	p	typeref:typename:void *	signature:(ecs_world_t * world,const ecs_type_info_t * ti)
ecs_value_stack_t	$FLECS/$FLECS/flecs.c	/^} ecs_value_stack_t;$/;"	t	typeref:struct:ecs_value_stack_t	file:
ecs_value_t	$FLECS/$FLECS/flecs.h	/^} ecs_value_t;$/;"	t	typeref:struct:ecs_value_t
ecs_var_id_t	$FLECS/$FLECS/flecs.c	/^typedef uint8_t ecs_var_id_t;$/;"	t	typeref:typename:uint8_t	file:
ecs_var_kind_t	$FLECS/$FLECS/flecs.c	/^} ecs_var_kind_t;$/;"	t	typeref:enum:__anonb2bcda231f03	file:
ecs_var_t	$FLECS/$FLECS/flecs.h	/^} ecs_var_t;$/;"	t	typeref:struct:ecs_var_t
ecs_vars_declare	$FLECS/$FLECS/flecs.c	/^ecs_expr_var_t* ecs_vars_declare($/;"	f	typeref:typename:ecs_expr_var_t *	signature:(ecs_vars_t * vars,const char * name,ecs_entity_t type)
ecs_vars_declare	$FLECS/$FLECS/flecs.h	/^ecs_expr_var_t* ecs_vars_declare($/;"	p	typeref:typename:FLECS_API ecs_expr_var_t *	signature:(ecs_vars_t * vars,const char * name,ecs_entity_t type)
ecs_vars_declare_w_value	$FLECS/$FLECS/flecs.c	/^ecs_expr_var_t* ecs_vars_declare_w_value($/;"	f	typeref:typename:ecs_expr_var_t *	signature:(ecs_vars_t * vars,const char * name,ecs_value_t * value)
ecs_vars_declare_w_value	$FLECS/$FLECS/flecs.h	/^ecs_expr_var_t* ecs_vars_declare_w_value($/;"	p	typeref:typename:FLECS_API ecs_expr_var_t *	signature:(ecs_vars_t * vars,const char * name,ecs_value_t * value)
ecs_vars_fini	$FLECS/$FLECS/flecs.c	/^void ecs_vars_fini($/;"	f	typeref:typename:void	signature:(ecs_vars_t * vars)
ecs_vars_fini	$FLECS/$FLECS/flecs.h	/^void ecs_vars_fini($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_vars_t * vars)
ecs_vars_init	$FLECS/$FLECS/flecs.c	/^void ecs_vars_init($/;"	f	typeref:typename:void	signature:(ecs_world_t * world,ecs_vars_t * vars)
ecs_vars_init	$FLECS/$FLECS/flecs.h	/^void ecs_vars_init($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_world_t * world,ecs_vars_t * vars)
ecs_vars_lookup	$FLECS/$FLECS/flecs.c	/^ecs_expr_var_t* ecs_vars_lookup($/;"	f	typeref:typename:ecs_expr_var_t *	signature:(const ecs_vars_t * vars,const char * name)
ecs_vars_lookup	$FLECS/$FLECS/flecs.h	/^ecs_expr_var_t* ecs_vars_lookup($/;"	p	typeref:typename:FLECS_API ecs_expr_var_t *	signature:(const ecs_vars_t * vars,const char * name)
ecs_vars_pop	$FLECS/$FLECS/flecs.c	/^int ecs_vars_pop($/;"	f	typeref:typename:int	signature:(ecs_vars_t * vars)
ecs_vars_pop	$FLECS/$FLECS/flecs.h	/^int ecs_vars_pop($/;"	p	typeref:typename:FLECS_API int	signature:(ecs_vars_t * vars)
ecs_vars_push	$FLECS/$FLECS/flecs.c	/^void ecs_vars_push($/;"	f	typeref:typename:void	signature:(ecs_vars_t * vars)
ecs_vars_push	$FLECS/$FLECS/flecs.h	/^void ecs_vars_push($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_vars_t * vars)
ecs_vars_t	$FLECS/$FLECS/flecs.h	/^} ecs_vars_t;$/;"	t	typeref:struct:ecs_vars_t
ecs_vasprintf	$FLECS/$FLECS/flecs.c	/^char* ecs_vasprintf($/;"	f	typeref:typename:char *	signature:(const char * fmt,va_list args)
ecs_vasprintf	$FLECS/$FLECS/flecs.h	/^char* ecs_vasprintf($/;"	p	typeref:typename:FLECS_DBG_API char *	signature:(const char * fmt,va_list args)
ecs_vec_append	$FLECS/$FLECS/flecs.c	/^void* ecs_vec_append($/;"	f	typeref:typename:void *	signature:(ecs_allocator_t * allocator,ecs_vec_t * v,ecs_size_t size)
ecs_vec_append	$FLECS/$FLECS/flecs.h	/^void* ecs_vec_append($/;"	p	typeref:typename:FLECS_API void *	signature:(struct ecs_allocator_t * allocator,ecs_vec_t * vec,ecs_size_t size)
ecs_vec_append_t	$FLECS/$FLECS/flecs.h	/^#define ecs_vec_append_t(/;"	d	signature:(allocator,vec,T)
ecs_vec_clear	$FLECS/$FLECS/flecs.c	/^void ecs_vec_clear($/;"	f	typeref:typename:void	signature:(ecs_vec_t * vec)
ecs_vec_clear	$FLECS/$FLECS/flecs.h	/^void ecs_vec_clear($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_vec_t * vec)
ecs_vec_copy	$FLECS/$FLECS/flecs.c	/^ecs_vec_t ecs_vec_copy($/;"	f	typeref:typename:ecs_vec_t	signature:(ecs_allocator_t * allocator,const ecs_vec_t * v,ecs_size_t size)
ecs_vec_copy	$FLECS/$FLECS/flecs.h	/^ecs_vec_t ecs_vec_copy($/;"	p	typeref:typename:FLECS_API ecs_vec_t	signature:(struct ecs_allocator_t * allocator,const ecs_vec_t * vec,ecs_size_t size)
ecs_vec_copy_t	$FLECS/$FLECS/flecs.h	/^#define ecs_vec_copy_t(/;"	d	signature:(allocator,vec,T)
ecs_vec_count	$FLECS/$FLECS/flecs.c	/^int32_t ecs_vec_count($/;"	f	typeref:typename:int32_t	signature:(const ecs_vec_t * v)
ecs_vec_count	$FLECS/$FLECS/flecs.h	/^int32_t ecs_vec_count($/;"	p	typeref:typename:FLECS_API int32_t	signature:(const ecs_vec_t * vec)
ecs_vec_fini	$FLECS/$FLECS/flecs.c	/^void ecs_vec_fini($/;"	f	typeref:typename:void	signature:(ecs_allocator_t * allocator,ecs_vec_t * v,ecs_size_t size)
ecs_vec_fini	$FLECS/$FLECS/flecs.h	/^void ecs_vec_fini($/;"	p	typeref:typename:FLECS_API void	signature:(struct ecs_allocator_t * allocator,ecs_vec_t * vec,ecs_size_t size)
ecs_vec_fini_t	$FLECS/$FLECS/flecs.h	/^#define ecs_vec_fini_t(/;"	d	signature:(allocator,vec,T)
ecs_vec_first	$FLECS/$FLECS/flecs.c	/^void* ecs_vec_first($/;"	f	typeref:typename:void *	signature:(const ecs_vec_t * v)
ecs_vec_first	$FLECS/$FLECS/flecs.h	/^void* ecs_vec_first($/;"	p	typeref:typename:FLECS_API void *	signature:(const ecs_vec_t * vec)
ecs_vec_first_t	$FLECS/$FLECS/flecs.h	/^#define ecs_vec_first_t(/;"	d	signature:(vec,T)
ecs_vec_get	$FLECS/$FLECS/flecs.c	/^void* ecs_vec_get($/;"	f	typeref:typename:void *	signature:(const ecs_vec_t * v,ecs_size_t size,int32_t index)
ecs_vec_get	$FLECS/$FLECS/flecs.h	/^void* ecs_vec_get($/;"	p	typeref:typename:FLECS_API void *	signature:(const ecs_vec_t * vec,ecs_size_t size,int32_t index)
ecs_vec_get_t	$FLECS/$FLECS/flecs.h	/^#define ecs_vec_get_t(/;"	d	signature:(vec,T,index)
ecs_vec_grow	$FLECS/$FLECS/flecs.c	/^void* ecs_vec_grow($/;"	f	typeref:typename:void *	signature:(ecs_allocator_t * allocator,ecs_vec_t * v,ecs_size_t size,int32_t elem_count)
ecs_vec_grow	$FLECS/$FLECS/flecs.h	/^void* ecs_vec_grow($/;"	p	typeref:typename:FLECS_API void *	signature:(struct ecs_allocator_t * allocator,ecs_vec_t * vec,ecs_size_t size,int32_t elem_count)
ecs_vec_grow_t	$FLECS/$FLECS/flecs.h	/^#define ecs_vec_grow_t(/;"	d	signature:(allocator,vec,T,elem_count)
ecs_vec_init	$FLECS/$FLECS/flecs.c	/^ecs_vec_t* ecs_vec_init($/;"	f	typeref:typename:ecs_vec_t *	signature:(ecs_allocator_t * allocator,ecs_vec_t * v,ecs_size_t size,int32_t elem_count)
ecs_vec_init	$FLECS/$FLECS/flecs.h	/^ecs_vec_t* ecs_vec_init($/;"	p	typeref:typename:FLECS_API ecs_vec_t *	signature:(struct ecs_allocator_t * allocator,ecs_vec_t * vec,ecs_size_t size,int32_t elem_count)
ecs_vec_init_if	$FLECS/$FLECS/flecs.c	/^void ecs_vec_init_if($/;"	f	typeref:typename:void	signature:(ecs_vec_t * vec,ecs_size_t size)
ecs_vec_init_if	$FLECS/$FLECS/flecs.h	/^void ecs_vec_init_if($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_vec_t * vec,ecs_size_t size)
ecs_vec_init_if_t	$FLECS/$FLECS/flecs.h	/^#define ecs_vec_init_if_t(/;"	d	signature:(vec,T)
ecs_vec_init_t	$FLECS/$FLECS/flecs.h	/^#define ecs_vec_init_t(/;"	d	signature:(allocator,vec,T,elem_count)
ecs_vec_last	$FLECS/$FLECS/flecs.c	/^void* ecs_vec_last($/;"	f	typeref:typename:void *	signature:(const ecs_vec_t * v,ecs_size_t size)
ecs_vec_last	$FLECS/$FLECS/flecs.h	/^void* ecs_vec_last($/;"	p	typeref:typename:FLECS_API void *	signature:(const ecs_vec_t * vec,ecs_size_t size)
ecs_vec_last_t	$FLECS/$FLECS/flecs.h	/^#define ecs_vec_last_t(/;"	d	signature:(vec,T)
ecs_vec_reclaim	$FLECS/$FLECS/flecs.c	/^void ecs_vec_reclaim($/;"	f	typeref:typename:void	signature:(ecs_allocator_t * allocator,ecs_vec_t * v,ecs_size_t size)
ecs_vec_reclaim	$FLECS/$FLECS/flecs.h	/^void ecs_vec_reclaim($/;"	p	typeref:typename:FLECS_API void	signature:(struct ecs_allocator_t * allocator,ecs_vec_t * vec,ecs_size_t size)
ecs_vec_reclaim_t	$FLECS/$FLECS/flecs.h	/^#define ecs_vec_reclaim_t(/;"	d	signature:(allocator,vec,T)
ecs_vec_remove	$FLECS/$FLECS/flecs.c	/^void ecs_vec_remove($/;"	f	typeref:typename:void	signature:(ecs_vec_t * v,ecs_size_t size,int32_t index)
ecs_vec_remove	$FLECS/$FLECS/flecs.h	/^void ecs_vec_remove($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_vec_t * vec,ecs_size_t size,int32_t elem)
ecs_vec_remove_last	$FLECS/$FLECS/flecs.c	/^void ecs_vec_remove_last($/;"	f	typeref:typename:void	signature:(ecs_vec_t * v)
ecs_vec_remove_last	$FLECS/$FLECS/flecs.h	/^void ecs_vec_remove_last($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_vec_t * vec)
ecs_vec_remove_t	$FLECS/$FLECS/flecs.h	/^#define ecs_vec_remove_t(/;"	d	signature:(vec,T,elem)
ecs_vec_reset	$FLECS/$FLECS/flecs.c	/^ecs_vec_t* ecs_vec_reset($/;"	f	typeref:typename:ecs_vec_t *	signature:(ecs_allocator_t * allocator,ecs_vec_t * v,ecs_size_t size)
ecs_vec_reset	$FLECS/$FLECS/flecs.h	/^ecs_vec_t* ecs_vec_reset($/;"	p	typeref:typename:FLECS_API ecs_vec_t *	signature:(struct ecs_allocator_t * allocator,ecs_vec_t * vec,ecs_size_t size)
ecs_vec_reset_t	$FLECS/$FLECS/flecs.h	/^#define ecs_vec_reset_t(/;"	d	signature:(allocator,vec,T)
ecs_vec_set_count	$FLECS/$FLECS/flecs.c	/^void ecs_vec_set_count($/;"	f	typeref:typename:void	signature:(ecs_allocator_t * allocator,ecs_vec_t * v,ecs_size_t size,int32_t elem_count)
ecs_vec_set_count	$FLECS/$FLECS/flecs.h	/^void ecs_vec_set_count($/;"	p	typeref:typename:FLECS_API void	signature:(struct ecs_allocator_t * allocator,ecs_vec_t * vec,ecs_size_t size,int32_t elem_count)
ecs_vec_set_count_t	$FLECS/$FLECS/flecs.h	/^#define ecs_vec_set_count_t(/;"	d	signature:(allocator,vec,T,elem_count)
ecs_vec_set_min_count	$FLECS/$FLECS/flecs.c	/^void ecs_vec_set_min_count($/;"	f	typeref:typename:void	signature:(struct ecs_allocator_t * allocator,ecs_vec_t * vec,ecs_size_t size,int32_t elem_count)
ecs_vec_set_min_count	$FLECS/$FLECS/flecs.h	/^void ecs_vec_set_min_count($/;"	p	typeref:typename:FLECS_API void	signature:(struct ecs_allocator_t * allocator,ecs_vec_t * vec,ecs_size_t size,int32_t elem_count)
ecs_vec_set_min_count_t	$FLECS/$FLECS/flecs.h	/^#define ecs_vec_set_min_count_t(/;"	d	signature:(allocator,vec,T,elem_count)
ecs_vec_set_min_count_zeromem	$FLECS/$FLECS/flecs.c	/^void ecs_vec_set_min_count_zeromem($/;"	f	typeref:typename:void	signature:(struct ecs_allocator_t * allocator,ecs_vec_t * vec,ecs_size_t size,int32_t elem_count)
ecs_vec_set_min_count_zeromem	$FLECS/$FLECS/flecs.h	/^void ecs_vec_set_min_count_zeromem($/;"	p	typeref:typename:FLECS_API void	signature:(struct ecs_allocator_t * allocator,ecs_vec_t * vec,ecs_size_t size,int32_t elem_count)
ecs_vec_set_min_count_zeromem_t	$FLECS/$FLECS/flecs.h	/^#define ecs_vec_set_min_count_zeromem_t(/;"	d	signature:(allocator,vec,T,elem_count)
ecs_vec_set_min_size	$FLECS/$FLECS/flecs.c	/^void ecs_vec_set_min_size($/;"	f	typeref:typename:void	signature:(struct ecs_allocator_t * allocator,ecs_vec_t * vec,ecs_size_t size,int32_t elem_count)
ecs_vec_set_min_size	$FLECS/$FLECS/flecs.h	/^void ecs_vec_set_min_size($/;"	p	typeref:typename:FLECS_API void	signature:(struct ecs_allocator_t * allocator,ecs_vec_t * vec,ecs_size_t size,int32_t elem_count)
ecs_vec_set_min_size_t	$FLECS/$FLECS/flecs.h	/^#define ecs_vec_set_min_size_t(/;"	d	signature:(allocator,vec,T,elem_count)
ecs_vec_set_size	$FLECS/$FLECS/flecs.c	/^void ecs_vec_set_size($/;"	f	typeref:typename:void	signature:(ecs_allocator_t * allocator,ecs_vec_t * v,ecs_size_t size,int32_t elem_count)
ecs_vec_set_size	$FLECS/$FLECS/flecs.h	/^void ecs_vec_set_size($/;"	p	typeref:typename:FLECS_API void	signature:(struct ecs_allocator_t * allocator,ecs_vec_t * vec,ecs_size_t size,int32_t elem_count)
ecs_vec_set_size_t	$FLECS/$FLECS/flecs.h	/^#define ecs_vec_set_size_t(/;"	d	signature:(allocator,vec,T,elem_count)
ecs_vec_size	$FLECS/$FLECS/flecs.c	/^int32_t ecs_vec_size($/;"	f	typeref:typename:int32_t	signature:(const ecs_vec_t * v)
ecs_vec_size	$FLECS/$FLECS/flecs.h	/^int32_t ecs_vec_size($/;"	p	typeref:typename:FLECS_API int32_t	signature:(const ecs_vec_t * vec)
ecs_vec_t	$FLECS/$FLECS/flecs.h	/^} ecs_vec_t;$/;"	t	typeref:struct:ecs_vec_t
ecs_vector	$FLECS/$FLECS/flecs.h	/^#define ecs_vector(/;"	d	signature:(world,...)
ecs_vector_desc_t	$FLECS/$FLECS/flecs.h	/^} ecs_vector_desc_t;$/;"	t	typeref:struct:ecs_vector_desc_t
ecs_vector_init	$FLECS/$FLECS/flecs.c	/^ecs_entity_t ecs_vector_init($/;"	f	typeref:typename:ecs_entity_t	signature:(ecs_world_t * world,const ecs_vector_desc_t * desc)
ecs_vector_init	$FLECS/$FLECS/flecs.h	/^ecs_entity_t ecs_vector_init($/;"	p	typeref:typename:FLECS_API ecs_entity_t	signature:(ecs_world_t * world,const ecs_vector_desc_t * desc)
ecs_warn	$FLECS/$FLECS/flecs.h	/^#define ecs_warn(...) ecs_warn_/;"	d	signature:(...)
ecs_warn_	$FLECS/$FLECS/flecs.h	/^#define ecs_warn_(/;"	d	signature:(file,line,...)
ecs_win_thread_t	$FLECS/$FLECS/flecs.c	/^} ecs_win_thread_t;$/;"	t	typeref:struct:ecs_win_thread_t	file:
ecs_worker_iter	$FLECS/$FLECS/flecs.c	/^ecs_iter_t ecs_worker_iter($/;"	f	typeref:typename:ecs_iter_t	signature:(const ecs_iter_t * it,int32_t index,int32_t count)
ecs_worker_iter	$FLECS/$FLECS/flecs.h	/^ecs_iter_t ecs_worker_iter($/;"	p	typeref:typename:FLECS_API ecs_iter_t	signature:(const ecs_iter_t * it,int32_t index,int32_t count)
ecs_worker_iter_t	$FLECS/$FLECS/flecs.h	/^} ecs_worker_iter_t;$/;"	t	typeref:struct:ecs_worker_iter_t
ecs_worker_next	$FLECS/$FLECS/flecs.c	/^bool ecs_worker_next($/;"	f	typeref:typename:bool	signature:(ecs_iter_t * it)
ecs_worker_next	$FLECS/$FLECS/flecs.h	/^bool ecs_worker_next($/;"	p	typeref:typename:FLECS_API bool	signature:(ecs_iter_t * it)
ecs_worker_next_instanced	$FLECS/$FLECS/flecs.c	/^bool ecs_worker_next_instanced($/;"	f	typeref:typename:bool	file:	signature:(ecs_iter_t * it)
ecs_world_allocators_t	$FLECS/$FLECS/flecs.c	/^} ecs_world_allocators_t;$/;"	t	typeref:struct:ecs_world_allocators_t	file:
ecs_world_from_json	$FLECS/$FLECS/flecs.c	/^const char* ecs_world_from_json($/;"	f	typeref:typename:const char *	signature:(ecs_world_t * world,const char * json,const ecs_from_json_desc_t * desc_arg)
ecs_world_from_json	$FLECS/$FLECS/flecs.h	/^const char* ecs_world_from_json($/;"	p	typeref:typename:FLECS_API const char *	signature:(ecs_world_t * world,const char * json,const ecs_from_json_desc_t * desc)
ecs_world_info_t	$FLECS/$FLECS/flecs.h	/^} ecs_world_info_t;$/;"	t	typeref:struct:ecs_world_info_t
ecs_world_stats_copy_last	$FLECS/$FLECS/flecs.c	/^void ecs_world_stats_copy_last($/;"	f	typeref:typename:void	signature:(ecs_world_stats_t * dst,const ecs_world_stats_t * src)
ecs_world_stats_copy_last	$FLECS/$FLECS/flecs.h	/^void ecs_world_stats_copy_last($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_world_stats_t * dst,const ecs_world_stats_t * src)
ecs_world_stats_get	$FLECS/$FLECS/flecs.c	/^void ecs_world_stats_get($/;"	f	typeref:typename:void	signature:(const ecs_world_t * world,ecs_world_stats_t * s)
ecs_world_stats_get	$FLECS/$FLECS/flecs.h	/^void ecs_world_stats_get($/;"	p	typeref:typename:FLECS_API void	signature:(const ecs_world_t * world,ecs_world_stats_t * stats)
ecs_world_stats_log	$FLECS/$FLECS/flecs.c	/^void ecs_world_stats_log($/;"	f	typeref:typename:void	signature:(const ecs_world_t * world,const ecs_world_stats_t * s)
ecs_world_stats_log	$FLECS/$FLECS/flecs.h	/^void ecs_world_stats_log($/;"	p	typeref:typename:FLECS_API void	signature:(const ecs_world_t * world,const ecs_world_stats_t * stats)
ecs_world_stats_reduce	$FLECS/$FLECS/flecs.c	/^void ecs_world_stats_reduce($/;"	f	typeref:typename:void	signature:(ecs_world_stats_t * dst,const ecs_world_stats_t * src)
ecs_world_stats_reduce	$FLECS/$FLECS/flecs.h	/^void ecs_world_stats_reduce($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_world_stats_t * dst,const ecs_world_stats_t * src)
ecs_world_stats_reduce_last	$FLECS/$FLECS/flecs.c	/^void ecs_world_stats_reduce_last($/;"	f	typeref:typename:void	signature:(ecs_world_stats_t * dst,const ecs_world_stats_t * src,int32_t count)
ecs_world_stats_reduce_last	$FLECS/$FLECS/flecs.h	/^void ecs_world_stats_reduce_last($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_world_stats_t * stats,const ecs_world_stats_t * old,int32_t count)
ecs_world_stats_repeat_last	$FLECS/$FLECS/flecs.c	/^void ecs_world_stats_repeat_last($/;"	f	typeref:typename:void	signature:(ecs_world_stats_t * stats)
ecs_world_stats_repeat_last	$FLECS/$FLECS/flecs.h	/^void ecs_world_stats_repeat_last($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_world_stats_t * stats)
ecs_world_stats_t	$FLECS/$FLECS/flecs.h	/^} ecs_world_stats_t;$/;"	t	typeref:struct:ecs_world_stats_t
ecs_world_t	$FLECS/$FLECS/flecs.c	/^struct ecs_world_t {$/;"	s	file:
ecs_world_t	$FLECS/$FLECS/flecs.h	/^typedef struct ecs_world_t ecs_world_t;$/;"	t	typeref:struct:ecs_world_t
ecs_world_t_magic	$FLECS/$FLECS/flecs.h	/^#define ecs_world_t_magic /;"	d
ecs_world_t_mixins	$FLECS/$FLECS/flecs.c	/^ecs_mixins_t ecs_world_t_mixins = {$/;"	v	typeref:typename:ecs_mixins_t
ecs_world_t_tag	$FLECS/$FLECS/flecs.c	/^#define ecs_world_t_tag /;"	d	file:
ecs_world_to_json	$FLECS/$FLECS/flecs.c	/^char* ecs_world_to_json($/;"	f	typeref:typename:char *	signature:(ecs_world_t * world,const ecs_world_to_json_desc_t * desc)
ecs_world_to_json	$FLECS/$FLECS/flecs.h	/^char* ecs_world_to_json($/;"	p	typeref:typename:FLECS_API char *	signature:(ecs_world_t * world,const ecs_world_to_json_desc_t * desc)
ecs_world_to_json_buf	$FLECS/$FLECS/flecs.c	/^int ecs_world_to_json_buf($/;"	f	typeref:typename:int	signature:(ecs_world_t * world,ecs_strbuf_t * buf_out,const ecs_world_to_json_desc_t * desc)
ecs_world_to_json_buf	$FLECS/$FLECS/flecs.h	/^int ecs_world_to_json_buf($/;"	p	typeref:typename:FLECS_API int	signature:(ecs_world_t * world,ecs_strbuf_t * buf_out,const ecs_world_to_json_desc_t * desc)
ecs_world_to_json_desc_t	$FLECS/$FLECS/flecs.h	/^} ecs_world_to_json_desc_t;$/;"	t	typeref:struct:ecs_world_to_json_desc_t
ecs_write_begin	$FLECS/$FLECS/flecs.c	/^ecs_record_t* ecs_write_begin($/;"	f	typeref:typename:ecs_record_t *	signature:(ecs_world_t * world,ecs_entity_t entity)
ecs_write_begin	$FLECS/$FLECS/flecs.h	/^ecs_record_t* ecs_write_begin($/;"	p	typeref:typename:FLECS_API ecs_record_t *	signature:(ecs_world_t * world,ecs_entity_t entity)
ecs_write_end	$FLECS/$FLECS/flecs.c	/^void ecs_write_end($/;"	f	typeref:typename:void	signature:(ecs_record_t * r)
ecs_write_end	$FLECS/$FLECS/flecs.h	/^void ecs_write_end($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_record_t * record)
ecs_write_flags_t	$FLECS/$FLECS/flecs.c	/^typedef ecs_flags64_t ecs_write_flags_t;$/;"	t	typeref:typename:ecs_flags64_t	file:
ecs_write_kind_t	$FLECS/$FLECS/flecs.c	/^} ecs_write_kind_t;$/;"	t	typeref:enum:ecs_write_kind_t	file:
ecs_write_state_t	$FLECS/$FLECS/flecs.c	/^} ecs_write_state_t;$/;"	t	typeref:struct:ecs_write_state_t	file:
ecs_xtor_t	$FLECS/$FLECS/flecs.h	/^typedef void (*ecs_xtor_t)($/;"	t	typeref:typename:void (*)(void * ptr,int32_t count,const ecs_type_info_t * type_info)
elapsed	$FLECS/$FLECS/flecs.h	/^    ecs_ftime_t elapsed;$/;"	m	struct:__anonb2bcda281808	typeref:typename:ecs_ftime_t
electric_current	$FLECS/$FLECS/flecs.h	/^struct electric_current {$/;"	s	struct:flecs::units
elem	$FLECS/$FLECS/flecs.h	/^    int elem(int32_t elem) {$/;"	f	struct:flecs::cursor	typeref:typename:int	signature:(int32_t elem)
elem_cur	$FLECS/$FLECS/flecs.h	/^    int32_t elem_cur;         \/**< Current element (for collections) *\/$/;"	m	struct:ecs_meta_scope_t	typeref:typename:int32_t
elem_size	$FLECS/$FLECS/flecs.c	/^    int32_t elem_size;$/;"	m	struct:sort_helper_t	typeref:typename:int32_t	file:
elem_size	$FLECS/$FLECS/flecs.h	/^    ecs_size_t elem_size;$/;"	m	struct:ecs_vec_t	typeref:typename:ecs_size_t
element	$FLECS/$FLECS/flecs.c	/^    int32_t element;    \/* First element for value *\/$/;"	m	struct:ecs_switch_header_t	typeref:typename:int32_t	file:
elementCount	$FLECS/$FLECS/flecs.h	/^    int32_t elementCount;$/;"	m	struct:ecs_strbuf_t	typeref:typename:int32_t
elems	$FLECS/$FLECS/flecs.c	/^    ecs_vec_t elems;      \/* vector<ecs_trav_down_elem_t> *\/$/;"	m	struct:__anonb2bcda232408	typeref:typename:ecs_vec_t	file:
emit	$FLECS/$FLECS/flecs.h	/^void emit(flecs::entity_t evt) {$/;"	f	struct:flecs::entity_view	typeref:typename:void	signature:(flecs::entity_t evt)
emit_time	$FLECS/$FLECS/flecs.h	/^        ecs_metric_t emit_time;            \/**< Time spent on notifying observers. *\/$/;"	m	struct:ecs_world_stats_t::__anonb2bcda281508	typeref:typename:ecs_metric_t
emit_time_total	$FLECS/$FLECS/flecs.h	/^    ecs_ftime_t emit_time_total;      \/**< Total time spent notifying observers *\/$/;"	m	struct:ecs_world_info_t	typeref:typename:ecs_ftime_t
emplace	$FLECS/$FLECS/flecs.h	/^inline void emplace(world_t *world, flecs::entity_t entity, flecs::id_t id, Args&&... args) {$/;"	f	namespace:flecs	typeref:typename:void	signature:(world_t * world,flecs::entity_t entity,flecs::id_t id,Args &&...args)
emplace_first	$FLECS/$FLECS/flecs.h	/^    Self& emplace_first(flecs::entity_t second, Args&&... args) {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &	signature:(flecs::entity_t second,Args &&...args)
emplace_override	$FLECS/$FLECS/flecs.h	/^    Self& emplace_override(Args&&... args) {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &	signature:(Args &&...args)
emplace_second	$FLECS/$FLECS/flecs.h	/^    Self& emplace_second(flecs::entity_t first, Args&&... args) {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &	signature:(flecs::entity_t first,Args &&...args)
empty	$FLECS/$FLECS/flecs.c	/^    bool empty;$/;"	m	struct:ecs_table_cache_hdr_t	typeref:typename:bool	file:
empty_count	$FLECS/$FLECS/flecs.h	/^        ecs_metric_t empty_count;          \/**< Number of empty tables *\/$/;"	m	struct:ecs_world_stats_t::__anonb2bcda281108	typeref:typename:ecs_metric_t
empty_table_count	$FLECS/$FLECS/flecs.h	/^    int32_t empty_table_count;        \/**< Number of tables without entities *\/$/;"	m	struct:ecs_world_info_t	typeref:typename:int32_t
empty_tables	$FLECS/$FLECS/flecs.c	/^    ecs_table_cache_list_t empty_tables;$/;"	m	struct:ecs_table_cache_t	typeref:typename:ecs_table_cache_list_t	file:
empty_tables	$FLECS/$FLECS/flecs.h	/^    bool empty_tables;$/;"	m	struct:ecs_term_iter_t	typeref:typename:bool
enable	$FLECS/$FLECS/flecs.h	/^    Self& enable(flecs::id_t second) {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &	signature:(flecs::id_t second)
enable_colors	$FLECS/$FLECS/flecs.h	/^inline void enable_colors(bool enabled = true) {$/;"	f	namespace:flecs::log	typeref:typename:void	signature:(bool enabled=true)
enable_if_t	$FLECS/$FLECS/flecs.h	/^using enable_if_t = typename std::enable_if<V, T>::type;$/;"	t	namespace:flecs	typeref:typename:std::enable_if<V,T>::type
enable_monitor	$FLECS/$FLECS/flecs.h	/^    bool enable_monitor;      \/**< Periodically collect statistics *\/$/;"	m	struct:ecs_app_desc_t	typeref:typename:bool
enable_range_check	$FLECS/$FLECS/flecs.h	/^    void enable_range_check(bool enabled) const {$/;"	f	struct:flecs::world	typeref:typename:void	signature:(bool enabled) const
enable_rest	$FLECS/$FLECS/flecs.h	/^    bool enable_rest;         \/**< Enables ECS access over HTTP, necessary for explorer *\/$/;"	m	struct:ecs_app_desc_t	typeref:typename:bool
enable_timedelta	$FLECS/$FLECS/flecs.h	/^inline void enable_timedelta(bool enabled = true) {$/;"	f	namespace:flecs::log	typeref:typename:void	signature:(bool enabled=true)
enable_timestamp	$FLECS/$FLECS/flecs.h	/^inline void enable_timestamp(bool enabled = true) {$/;"	f	namespace:flecs::log	typeref:typename:void	signature:(bool enabled=true)
enabled	$FLECS/$FLECS/flecs.h	/^    bool enabled(flecs::id_t second) const {$/;"	f	struct:flecs::entity_view	typeref:typename:bool	signature:(flecs::id_t second) const
end	$FLECS/$FLECS/flecs.c	/^    int32_t end;$/;"	m	struct:__anonb2bcda232708	typeref:typename:int32_t	file:
end	$FLECS/$FLECS/flecs.h	/^    row_iterator end() const {$/;"	f	struct:flecs::iter	typeref:typename:row_iterator	signature:() const
enqueue	$FLECS/$FLECS/flecs.h	/^void enqueue(flecs::entity_t evt) {$/;"	f	struct:flecs::entity_view	typeref:typename:void	signature:(flecs::entity_t evt)
ensure	$FLECS/$FLECS/flecs.c	/^void ensure($/;"	f	typeref:typename:void	file:	signature:(ecs_bitset_t * bs,ecs_size_t size)
ensure	$FLECS/$FLECS/flecs.h	/^inline flecs::entity world::ensure(flecs::entity_t e) const {$/;"	f	class:flecs::world	typeref:typename:flecs::entity	signature:(flecs::entity_t e) const
ensure_element	$FLECS/$FLECS/flecs.h	/^    void* (*ensure_element)($/;"	m	struct:EcsOpaque	typeref:typename:void * (*)(void * dst,size_t elem)
ensure_member	$FLECS/$FLECS/flecs.h	/^    void* (*ensure_member)($/;"	m	struct:EcsOpaque	typeref:typename:void * (*)(void * dst,const char * member)
entities	$FLECS/$FLECS/flecs.c	/^    ecs_vec_t entities;$/;"	m	struct:__anonb2bcda232908	typeref:typename:ecs_vec_t	file:
entities	$FLECS/$FLECS/flecs.h	/^    } entities;$/;"	m	struct:ecs_world_stats_t	typeref:struct:ecs_world_stats_t::__anonb2bcda280f08
entity	$FLECS/$FLECS/flecs.c	/^    ecs_entity_t entity;$/;"	m	union:__anonb2bcda23210a	typeref:typename:ecs_entity_t	file:
entity	$FLECS/$FLECS/flecs.h	/^struct entity : entity_builder<entity>$/;"	s	namespace:flecs
entity_builder	$FLECS/$FLECS/flecs.h	/^struct entity_builder : entity_view {$/;"	s	namespace:flecs
entity_filter	$FLECS/$FLECS/flecs.c	/^    ecs_entity_filter_t *entity_filter;$/;"	m	struct:ecs_entity_filter_iter_t	typeref:typename:ecs_entity_filter_t *	file:
entity_index	$FLECS/$FLECS/flecs.c	/^    ecs_entity_index_t entity_index;$/;"	m	struct:ecs_store_t	typeref:typename:ecs_entity_index_t	file:
entity_iter	$FLECS/$FLECS/flecs.h	/^    void *entity_iter;            \/* Filter applied after matching a table *\/$/;"	m	struct:ecs_iter_private_t	typeref:typename:void *
entity_observer_create	$FLECS/$FLECS/flecs.h	/^    inline void entity_observer_create($/;"	f	namespace:flecs::_	typeref:typename:void	signature:(flecs::world_t * world,flecs::entity_t event,flecs::entity_t entity,ecs_iter_action_t callback,void * binding_ctx,ecs_ctx_free_t binding_ctx_free)
entity_observer_delegate	$FLECS/$FLECS/flecs.h	/^struct entity_observer_delegate : delegate {$/;"	s	namespace:flecs::_
entity_observer_factory	$FLECS/$FLECS/flecs.h	/^    struct entity_observer_factory {$/;"	s	namespace:flecs::_
entity_observers	$FLECS/$FLECS/flecs.c	/^    ecs_map_t entity_observers;      \/* map<trigger_id, trigger_t> *\/$/;"	m	struct:ecs_event_id_record_t	typeref:typename:ecs_map_t	file:
entity_payload_observer_delegate	$FLECS/$FLECS/flecs.h	/^struct entity_payload_observer_delegate : delegate {$/;"	s	namespace:flecs::_
entity_t	$FLECS/$FLECS/flecs.h	/^using entity_t = ecs_entity_t;$/;"	t	namespace:flecs	typeref:typename:ecs_entity_t
entity_to_depth	$FLECS/$FLECS/flecs.c	/^    ecs_map_t entity_to_depth; \/* What it says *\/$/;"	m	struct:ecs_store_t	typeref:typename:ecs_map_t	file:
entity_to_json_desc_t	$FLECS/$FLECS/flecs.h	/^using entity_to_json_desc_t = ecs_entity_to_json_desc_t;$/;"	t	namespace:flecs	typeref:typename:ecs_entity_to_json_desc_t
entity_view	$FLECS/$FLECS/flecs.h	/^struct entity_view : public id {$/;"	s	namespace:flecs
entity_with_delegate	$FLECS/$FLECS/flecs.h	/^struct entity_with_delegate<Func, if_t< is_callable<Func>::value > >$/;"	s	namespace:flecs::_
entity_with_delegate_impl	$FLECS/$FLECS/flecs.h	/^struct entity_with_delegate_impl<arg_list<Args ...>> {$/;"	s	namespace:flecs::_
entries	$FLECS/$FLECS/flecs.c	/^    ecs_sparse_t entries;       \/* <entity, op_entry_t> - command batching *\/$/;"	m	struct:ecs_commands_t	typeref:typename:ecs_sparse_t	file:
entry	$FLECS/$FLECS/flecs.c	/^    ecs_cmd_entry_t *entry;$/;"	m	struct:ecs_cmd_t	typeref:typename:ecs_cmd_entry_t *	file:
entry	$FLECS/$FLECS/flecs.h	/^    ecs_bucket_entry_t *entry;$/;"	m	struct:ecs_map_iter_t	typeref:typename:ecs_bucket_entry_t *
entry_allocator	$FLECS/$FLECS/flecs.h	/^    struct ecs_block_allocator_t entry_allocator;$/;"	m	struct:ecs_map_params_t	typeref:struct:ecs_block_allocator_t
enum_constant_data	$FLECS/$FLECS/flecs.h	/^struct enum_constant_data {$/;"	s	namespace:flecs::_
enum_constant_is_valid	$FLECS/$FLECS/flecs.h	/^constexpr bool enum_constant_is_valid() {$/;"	f	namespace:flecs::_	typeref:typename:bool	signature:()
enum_constant_t	$FLECS/$FLECS/flecs.h	/^using enum_constant_t = ecs_enum_constant_t;$/;"	t	namespace:flecs	typeref:typename:ecs_enum_constant_t
enum_constant_to_name	$FLECS/$FLECS/flecs.h	/^static const char* enum_constant_to_name() {$/;"	f	namespace:flecs::_	typeref:typename:const char *	signature:()
enum_data	$FLECS/$FLECS/flecs.h	/^struct enum_data {$/;"	s	namespace:flecs
enum_data_impl	$FLECS/$FLECS/flecs.h	/^struct enum_data_impl {$/;"	s	namespace:flecs::_
enum_is_valid	$FLECS/$FLECS/flecs.h	/^struct enum_is_valid {$/;"	s	namespace:flecs::_
enum_last	$FLECS/$FLECS/flecs.h	/^struct enum_last {$/;"	s	namespace:flecs
enum_type	$FLECS/$FLECS/flecs.h	/^struct enum_type {$/;"	s	namespace:flecs::_
enum_type_len	$FLECS/$FLECS/flecs.h	/^constexpr size_t enum_type_len() {$/;"	f	namespace:flecs::_	typeref:typename:size_t	signature:()
eq	$FLECS/$FLECS/flecs.c	/^        ecs_rule_eq_ctx_t eq;$/;"	m	union:ecs_rule_op_ctx_t::__anonb2bcda23310a	typeref:typename:ecs_rule_eq_ctx_t	file:
err	$FLECS/$FLECS/flecs.h	/^inline void err(const char *fmt, ...) {$/;"	f	namespace:flecs::log	typeref:typename:void	signature:(const char * fmt,...)
error	$FLECS/$FLECS/flecs.h	/^    ecs_member_value_range_t error;$/;"	m	struct:EcsMemberRanges	typeref:typename:ecs_member_value_range_t
error_count	$FLECS/$FLECS/flecs.h	/^    int32_t error_count;$/;"	m	struct:EcsAlertsActive	typeref:typename:int32_t
error_range	$FLECS/$FLECS/flecs.h	/^untyped_component& error_range(double min, double max) {$/;"	f	struct:flecs::untyped_component	typeref:typename:untyped_component &	signature:(double min,double max)
error_str	$FLECS/$FLECS/flecs.c	/^static char error_str[255];$/;"	v	typeref:typename:char[255]	file:
errors	$FLECS/$FLECS/flecs.c	/^    int32_t errors;$/;"	m	struct:__anonb2bcda231908	typeref:typename:int32_t	file:
evar_index	$FLECS/$FLECS/flecs.c	/^    ecs_hashmap_t evar_index;     \/* Name index for entity variables *\/$/;"	m	struct:ecs_rule_t	typeref:typename:ecs_hashmap_t	file:
event	$FLECS/$FLECS/flecs.c	/^    ecs_entity_t event;$/;"	m	struct:ecs_table_event_t	typeref:typename:ecs_entity_t	file:
event	$FLECS/$FLECS/flecs.h	/^inline flecs::event_builder_typed<E> world::event() const {$/;"	f	class:flecs::world	typeref:typename:flecs::event_builder_typed<E>	signature:() const
event_builder	$FLECS/$FLECS/flecs.h	/^struct event_builder : event_builder_base<event_builder, void> {$/;"	s	namespace:flecs
event_builder_base	$FLECS/$FLECS/flecs.h	/^struct event_builder_base {$/;"	s	namespace:flecs
event_builder_typed	$FLECS/$FLECS/flecs.h	/^struct event_builder_typed : event_builder_base<event_builder_typed<E>, E> {$/;"	s	namespace:flecs
event_count	$FLECS/$FLECS/flecs.h	/^    int32_t event_count;   $/;"	m	struct:ecs_observer_t	typeref:typename:int32_t
event_emit_count	$FLECS/$FLECS/flecs.h	/^        ecs_metric_t event_emit_count;     \/**< Number of events emitted *\/$/;"	m	struct:ecs_world_stats_t::__anonb2bcda281408	typeref:typename:ecs_metric_t
event_from_func	$FLECS/$FLECS/flecs.h	/^struct event_from_func<Func, if_t< arity<Func>::value == 2>> {$/;"	s	namespace:flecs::_
event_from_func_t	$FLECS/$FLECS/flecs.h	/^using event_from_func_t = typename event_from_func<Func>::type;$/;"	t	namespace:flecs::_	typeref:typename:event_from_func<Func>::type
event_id	$FLECS/$FLECS/flecs.c	/^    int32_t event_id;$/;"	m	struct:ecs_world_t	typeref:typename:int32_t	file:
event_id	$FLECS/$FLECS/flecs.h	/^inline flecs::id iter::event_id() const {$/;"	f	class:flecs::iter	typeref:typename:flecs::id	signature:() const
event_ids	$FLECS/$FLECS/flecs.h	/^    ecs_map_t event_ids; \/* map<id, ecs_event_id_record_t> *\/$/;"	m	struct:ecs_event_record_t	typeref:typename:ecs_map_t
events	$FLECS/$FLECS/flecs.h	/^    ecs_sparse_t events;  \/* sparse<event, ecs_event_record_t> *\/$/;"	m	struct:ecs_observable_t	typeref:typename:ecs_sparse_t
existing	$FLECS/$FLECS/flecs.h	/^    bool existing;         \/**< Did the type exist or is it populated from reflection *\/$/;"	m	struct:EcsMetaType	typeref:typename:bool
exists	$FLECS/$FLECS/flecs.h	/^    bool exists(flecs::entity_t e) const {$/;"	f	struct:flecs::world	typeref:typename:bool	signature:(flecs::entity_t e) const
expire_time	$FLECS/$FLECS/flecs.c	/^    ecs_ftime_t expire_time;   \/* Expiration duration *\/$/;"	m	struct:EcsAlertTimeout	typeref:typename:ecs_ftime_t	file:
expr	$FLECS/$FLECS/flecs.h	/^    const char *expr;$/;"	m	struct:ecs_parse_expr_desc_t	typeref:typename:const char *
expr_ser_array	$FLECS/$FLECS/flecs.c	/^int expr_ser_array($/;"	f	typeref:typename:int	file:	signature:(const ecs_world_t * world,ecs_meta_type_op_t * op,const void * ptr,ecs_strbuf_t * str)
expr_ser_elements	$FLECS/$FLECS/flecs.c	/^int expr_ser_elements($/;"	f	typeref:typename:int	file:	signature:(const ecs_world_t * world,ecs_meta_type_op_t * ops,int32_t op_count,const void * base,int32_t elem_count,int32_t elem_size,ecs_strbuf_t * str,bool is_array)
expr_ser_type_elements	$FLECS/$FLECS/flecs.c	/^int expr_ser_type_elements($/;"	f	typeref:typename:int	file:	signature:(const ecs_world_t * world,ecs_entity_t type,const void * base,int32_t elem_count,ecs_strbuf_t * str,bool is_array)
expr_ser_vector	$FLECS/$FLECS/flecs.c	/^int expr_ser_vector($/;"	f	typeref:typename:int	file:	signature:(const ecs_world_t * world,ecs_meta_type_op_t * op,const void * base,ecs_strbuf_t * str)
f32_t	$FLECS/$FLECS/flecs.h	/^using f32_t = ecs_f32_t;$/;"	t	namespace:flecs	typeref:typename:ecs_f32_t
f64_t	$FLECS/$FLECS/flecs.h	/^using f64_t = ecs_f64_t;$/;"	t	namespace:flecs	typeref:typename:ecs_f64_t
factor	$FLECS/$FLECS/flecs.h	/^    int32_t factor; \/**< Factor to apply (e.g. "1000", "1000000", "1024") *\/$/;"	m	struct:ecs_unit_translation_t	typeref:typename:int32_t
false	$FLECS/$FLECS/flecs.h	/^#define false /;"	d
field	$FLECS/$FLECS/flecs.h	/^    flecs::untyped_column field(int32_t index) const {$/;"	f	struct:flecs::iter	typeref:typename:flecs::untyped_column	signature:(int32_t index) const
field_count	$FLECS/$FLECS/flecs.h	/^    int8_t field_count;       \/**< Number of fields in iterator for filter *\/$/;"	m	struct:ecs_filter_t	typeref:typename:int8_t
field_id	$FLECS/$FLECS/flecs.c	/^    ecs_id_t field_id;$/;"	m	struct:__anonb2bcda232f08	typeref:typename:ecs_id_t	file:
field_index	$FLECS/$FLECS/flecs.c	/^    int8_t field_index;        \/* Query field corresponding with operation *\/$/;"	m	struct:ecs_rule_op_t	typeref:typename:int8_t	file:
field_index	$FLECS/$FLECS/flecs.h	/^    int32_t field_index;        \/**< Index of field for term in iterator *\/$/;"	m	struct:ecs_term_t	typeref:typename:int32_t
filename	$FLECS/$FLECS/flecs.h	/^    const char *filename;     \/* Set to load script from file *\/$/;"	m	struct:ecs_script_desc_t	typeref:typename:const char *
filter	$FLECS/$FLECS/flecs.c	/^    ecs_filter_t filter;$/;"	m	struct:ecs_query_t	typeref:typename:ecs_filter_t	file:
filter	$FLECS/$FLECS/flecs.h	/^struct filter : filter_base, iterable<Components...> {$/;"	s	namespace:flecs
filter_base	$FLECS/$FLECS/flecs.h	/^struct filter_base {$/;"	s	namespace:flecs
filter_builder	$FLECS/$FLECS/flecs.h	/^struct filter_builder final : _::filter_builder_base<Components...> {$/;"	s	namespace:flecs
filter_builder_base	$FLECS/$FLECS/flecs.h	/^    using filter_builder_base = builder<$/;"	t	namespace:flecs::_	typeref:typename:builder<filter,ecs_filter_desc_t,filter_builder<Components...>,filter_builder_i,Components...>
filter_builder_i	$FLECS/$FLECS/flecs.h	/^struct filter_builder_i : term_builder_i<Base> {$/;"	s	namespace:flecs
filter_delegate	$FLECS/$FLECS/flecs.h	/^struct filter_delegate<Func, if_t<is_same<first_arg_t<Func>, flecs::entity>::value> > {$/;"	s	namespace:flecs::_
filter_delegate_no_ent	$FLECS/$FLECS/flecs.h	/^struct filter_delegate_no_ent<Func, arg_list<Args ...> >$/;"	s	namespace:flecs::_
filter_delegate_w_ent	$FLECS/$FLECS/flecs.h	/^struct filter_delegate_w_ent<Func, arg_list<E, Args ...> >$/;"	s	namespace:flecs::_
filter_flags	$FLECS/$FLECS/flecs.h	/^    Base& filter_flags(ecs_flags32_t flags) {$/;"	f	struct:flecs::filter_builder_i	typeref:typename:Base &	signature:(ecs_flags32_t flags)
filter_t	$FLECS/$FLECS/flecs.h	/^using filter_t = ecs_filter_t;$/;"	t	namespace:flecs	typeref:typename:ecs_filter_t
finalize	$FLECS/$FLECS/flecs.h	/^    int finalize() {$/;"	f	struct:flecs::term	typeref:typename:int	signature:()
find	$FLECS/$FLECS/flecs.h	/^    flecs::entity find(Func&& func) const {$/;"	f	struct:flecs::iterable	typeref:typename:flecs::entity	signature:(Func && func) const
find_delegate	$FLECS/$FLECS/flecs.h	/^struct find_delegate : public delegate {$/;"	s	namespace:flecs::_
find_var	$FLECS/$FLECS/flecs.h	/^    int32_t find_var(const char *name) {$/;"	f	struct:flecs::rule	typeref:typename:int32_t	signature:(const char * name)
fini	$FLECS/$FLECS/flecs.h	/^    ecs_iter_fini_action_t fini;  \/* Function to cleanup iterator resources *\/$/;"	m	struct:ecs_iter_t	typeref:typename:ecs_iter_fini_action_t
fini_	$FLECS/$FLECS/flecs.h	/^    ecs_os_api_fini_t fini_;$/;"	m	struct:ecs_os_api_t	typeref:typename:ecs_os_api_fini_t
fini_actions	$FLECS/$FLECS/flecs.c	/^    ecs_vec_t fini_actions;          \/* Callbacks to execute when world exits *\/$/;"	m	struct:ecs_world_t	typeref:typename:ecs_vec_t	file:
fired_count	$FLECS/$FLECS/flecs.h	/^    int32_t fired_count;         \/**< Number of times ticked *\/$/;"	m	struct:EcsTimer	typeref:typename:int32_t
first	$FLECS/$FLECS/flecs.c	/^    int32_t first;$/;"	m	struct:ecs_cmd_entry_t	typeref:typename:int32_t	file:
first	$FLECS/$FLECS/flecs.h	/^inline flecs::entity id::first() const {$/;"	f	class:flecs::id	typeref:typename:flecs::entity	signature:() const
firstElement	$FLECS/$FLECS/flecs.h	/^    ecs_strbuf_element_embedded firstElement;$/;"	m	struct:ecs_strbuf_t	typeref:typename:ecs_strbuf_element_embedded
first_	$FLECS/$FLECS/flecs.h	/^    int64_t first_;$/;"	m	struct:ecs_world_stats_t	typeref:typename:int64_t
first_arg	$FLECS/$FLECS/flecs.h	/^struct first_arg {$/;"	s	namespace:flecs
first_arg_impl	$FLECS/$FLECS/flecs.h	/^struct first_arg_impl<Func, _::arg_list<T, Args ...> > {$/;"	s	namespace:flecs
first_arg_t	$FLECS/$FLECS/flecs.h	/^using first_arg_t = typename first_arg<Func>::type;$/;"	t	namespace:flecs	typeref:typename:first_arg<Func>::type
flags	$FLECS/$FLECS/flecs.c	/^    ecs_flags8_t flags;        \/* Flags storing whether 1st\/2nd are variables *\/$/;"	m	struct:ecs_rule_op_t	typeref:typename:ecs_flags8_t	file:
flags	$FLECS/$FLECS/flecs.h	/^inline flecs::entity id::flags() const {$/;"	f	class:flecs::id	typeref:typename:flecs::entity	signature:() const
flags32_t	$FLECS/$FLECS/flecs.h	/^using flags32_t = ecs_flags32_t;$/;"	t	namespace:flecs	typeref:typename:ecs_flags32_t
flags_	$FLECS/$FLECS/flecs.h	/^    ecs_flags32_t flags_;$/;"	m	struct:ecs_os_api_t	typeref:typename:ecs_flags32_t
flags_str	$FLECS/$FLECS/flecs.h	/^    flecs::string flags_str() const {$/;"	f	struct:flecs::id	typeref:typename:flecs::string	signature:() const
flat_tree_column	$FLECS/$FLECS/flecs.c	/^    int32_t flat_tree_column;$/;"	m	struct:ecs_entity_filter_t	typeref:typename:int32_t	file:
flat_tree_offset	$FLECS/$FLECS/flecs.c	/^    int32_t flat_tree_offset;$/;"	m	struct:ecs_entity_filter_iter_t	typeref:typename:int32_t	file:
flatten	$FLECS/$FLECS/flecs.h	/^    void flatten(flecs::entity_t r, const ecs_flatten_desc_t *desc = nullptr) {$/;"	f	struct:flecs::entity	typeref:typename:void	signature:(flecs::entity_t r,const ecs_flatten_desc_t * desc=nullptr)
flecs	$FLECS/$FLECS/flecs.h	/^namespace flecs$/;"	n
flecs_STATIC	$FLECS/$FLECS/flecs.h	/^#define flecs_STATIC$/;"	d
flecs_access_begin	$FLECS/$FLECS/flecs.c	/^ecs_record_t* flecs_access_begin($/;"	f	typeref:typename:ecs_record_t *	file:	signature:(ecs_world_t * stage,ecs_entity_t entity,bool write)
flecs_access_end	$FLECS/$FLECS/flecs.c	/^void flecs_access_end($/;"	f	typeref:typename:void	file:	signature:(const ecs_record_t * r,bool write)
flecs_add_bitmask	$FLECS/$FLECS/flecs.c	/^void flecs_add_bitmask(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:	signature:(ecs_iter_t * it)
flecs_add_constant	$FLECS/$FLECS/flecs.c	/^void flecs_add_constant(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:	signature:(ecs_iter_t * it)
flecs_add_constant_to_bitmask	$FLECS/$FLECS/flecs.c	/^int flecs_add_constant_to_bitmask($/;"	f	typeref:typename:int	file:	signature:(ecs_world_t * world,ecs_entity_t type,ecs_entity_t e,ecs_id_t constant_id)
flecs_add_constant_to_enum	$FLECS/$FLECS/flecs.c	/^int flecs_add_constant_to_enum($/;"	f	typeref:typename:int	file:	signature:(ecs_world_t * world,ecs_entity_t type,ecs_entity_t e,ecs_id_t constant_id)
flecs_add_enum	$FLECS/$FLECS/flecs.c	/^void flecs_add_enum(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:	signature:(ecs_iter_t * it)
flecs_add_flag	$FLECS/$FLECS/flecs.c	/^void flecs_add_flag($/;"	p	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_entity_t entity,uint32_t flag)
flecs_add_id	$FLECS/$FLECS/flecs.c	/^void flecs_add_id($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_entity_t entity,ecs_id_t id)
flecs_add_id_w_record	$FLECS/$FLECS/flecs.c	/^void flecs_add_id_w_record($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_entity_t entity,ecs_record_t * record,ecs_id_t id,bool construct)
flecs_add_member_to_struct	$FLECS/$FLECS/flecs.c	/^int flecs_add_member_to_struct($/;"	f	typeref:typename:int	file:	signature:(ecs_world_t * world,ecs_entity_t type,ecs_entity_t member,EcsMember * m,EcsMemberRanges * ranges)
flecs_add_overrides_for_base	$FLECS/$FLECS/flecs.c	/^void flecs_add_overrides_for_base($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_type_t * dst_type,ecs_id_t pair)
flecs_add_path	$FLECS/$FLECS/flecs.c	/^void flecs_add_path($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,bool defer_suspend,ecs_entity_t parent,ecs_entity_t entity,const char * name)
flecs_add_with_property	$FLECS/$FLECS/flecs.c	/^void flecs_add_with_property($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_id_record_t * idr_with_wildcard,ecs_type_t * dst_type,ecs_entity_t r,ecs_entity_t o)
flecs_alert_get_severity	$FLECS/$FLECS/flecs.c	/^ecs_entity_t flecs_alert_get_severity($/;"	f	typeref:typename:ecs_entity_t	file:	signature:(ecs_world_t * world,ecs_iter_t * it,EcsAlert * alert)
flecs_alert_out_of_range_kind	$FLECS/$FLECS/flecs.c	/^ecs_entity_t flecs_alert_out_of_range_kind($/;"	f	typeref:typename:ecs_entity_t	file:	signature:(EcsAlert * alert,const EcsMemberRanges * ranges,const void * value_ptr)
flecs_alerts_add_alert_to_src	$FLECS/$FLECS/flecs.c	/^void flecs_alerts_add_alert_to_src($/;"	f	file:	signature:(ecs_world_t * world,ecs_entity_t source,ecs_entity_t alert,ecs_entity_t alert_instance)
flecs_alerts_remove_alert_from_src	$FLECS/$FLECS/flecs.c	/^void flecs_alerts_remove_alert_from_src($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_entity_t source,ecs_entity_t alert)
flecs_alloc	$FLECS/$FLECS/flecs.h	/^#define flecs_alloc(a, size) flecs_balloc(flecs_alloca/;"	d	signature:(a,size)
flecs_alloc_n	$FLECS/$FLECS/flecs.h	/^#define flecs_alloc_n(/;"	d	signature:(a,T,count)
flecs_alloc_t	$FLECS/$FLECS/flecs.h	/^#define flecs_alloc_t(/;"	d	signature:(a,T)
flecs_allocator	$FLECS/$FLECS/flecs.h	/^#define flecs_allocator(/;"	d	signature:(obj)
flecs_allocator_fini	$FLECS/$FLECS/flecs.c	/^void flecs_allocator_fini($/;"	f	typeref:typename:void	signature:(ecs_allocator_t * a)
flecs_allocator_fini	$FLECS/$FLECS/flecs.h	/^void flecs_allocator_fini($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_allocator_t * a)
flecs_allocator_get	$FLECS/$FLECS/flecs.c	/^ecs_block_allocator_t* flecs_allocator_get($/;"	f	typeref:typename:ecs_block_allocator_t *	signature:(ecs_allocator_t * a,ecs_size_t size)
flecs_allocator_get	$FLECS/$FLECS/flecs.h	/^ecs_block_allocator_t* flecs_allocator_get($/;"	p	typeref:typename:FLECS_API ecs_block_allocator_t *	signature:(ecs_allocator_t * a,ecs_size_t size)
flecs_allocator_init	$FLECS/$FLECS/flecs.c	/^void flecs_allocator_init($/;"	f	typeref:typename:void	signature:(ecs_allocator_t * a)
flecs_allocator_init	$FLECS/$FLECS/flecs.h	/^void flecs_allocator_init($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_allocator_t * a)
flecs_allocator_size	$FLECS/$FLECS/flecs.c	/^ecs_size_t flecs_allocator_size($/;"	f	typeref:typename:ecs_size_t	file:	signature:(ecs_size_t size)
flecs_allocator_size_hash	$FLECS/$FLECS/flecs.c	/^ecs_size_t flecs_allocator_size_hash($/;"	f	typeref:typename:ecs_size_t	file:	signature:(ecs_size_t size)
flecs_assembly_create	$FLECS/$FLECS/flecs.c	/^int flecs_assembly_create($/;"	f	typeref:typename:int	file:	signature:(ecs_world_t * world,const char * name,const char * expr,const char * ptr,ecs_entity_t assembly,char * script_code,plecs_state_t * state)
flecs_assembly_ctor	$FLECS/$FLECS/flecs.c	/^void flecs_assembly_ctor($/;"	f	file:	signature:(void * ptr,int32_t count,const ecs_type_info_t * ti)
flecs_assembly_init_defaults	$FLECS/$FLECS/flecs.c	/^int flecs_assembly_init_defaults($/;"	f	typeref:typename:int	file:	signature:(ecs_world_t * world,const char * name,const char * expr,const char * ptr,ecs_entity_t assembly,EcsScript * script,plecs_state_t * state)
flecs_assembly_on_remove	$FLECS/$FLECS/flecs.c	/^void flecs_assembly_on_remove($/;"	f	typeref:typename:void	file:	signature:(ecs_iter_t * it)
flecs_assembly_on_set	$FLECS/$FLECS/flecs.c	/^void flecs_assembly_on_set($/;"	f	typeref:typename:void	file:	signature:(ecs_iter_t * it)
flecs_assert_relation_unused	$FLECS/$FLECS/flecs.c	/^void flecs_assert_relation_unused($/;"	f	file:	signature:(ecs_world_t * world,ecs_entity_t rel,ecs_entity_t property)
flecs_balloc	$FLECS/$FLECS/flecs.c	/^void* flecs_balloc($/;"	f	typeref:typename:void *	signature:(ecs_block_allocator_t * ba)
flecs_balloc	$FLECS/$FLECS/flecs.h	/^void* flecs_balloc($/;"	p	typeref:typename:FLECS_API void *	signature:(ecs_block_allocator_t * allocator)
flecs_balloc_block	$FLECS/$FLECS/flecs.c	/^ecs_block_allocator_chunk_header_t* flecs_balloc_block($/;"	f	typeref:typename:ecs_block_allocator_chunk_header_t *	file:	signature:(ecs_block_allocator_t * allocator)
flecs_ballocator_fini	$FLECS/$FLECS/flecs.c	/^void flecs_ballocator_fini($/;"	f	typeref:typename:void	signature:(ecs_block_allocator_t * ba)
flecs_ballocator_fini	$FLECS/$FLECS/flecs.h	/^void flecs_ballocator_fini($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_block_allocator_t * ba)
flecs_ballocator_free	$FLECS/$FLECS/flecs.c	/^void flecs_ballocator_free($/;"	f	typeref:typename:void	signature:(ecs_block_allocator_t * ba)
flecs_ballocator_free	$FLECS/$FLECS/flecs.h	/^void flecs_ballocator_free($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_block_allocator_t * ba)
flecs_ballocator_init	$FLECS/$FLECS/flecs.c	/^void flecs_ballocator_init($/;"	f	typeref:typename:void	signature:(ecs_block_allocator_t * ba,ecs_size_t size)
flecs_ballocator_init	$FLECS/$FLECS/flecs.h	/^void flecs_ballocator_init($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_block_allocator_t * ba,ecs_size_t size)
flecs_ballocator_init_n	$FLECS/$FLECS/flecs.h	/^#define flecs_ballocator_init_n(/;"	d	signature:(ba,T,count)
flecs_ballocator_init_t	$FLECS/$FLECS/flecs.h	/^#define flecs_ballocator_init_t(/;"	d	signature:(ba,T)
flecs_ballocator_new	$FLECS/$FLECS/flecs.c	/^ecs_block_allocator_t* flecs_ballocator_new($/;"	f	typeref:typename:ecs_block_allocator_t *	signature:(ecs_size_t size)
flecs_ballocator_new	$FLECS/$FLECS/flecs.h	/^ecs_block_allocator_t* flecs_ballocator_new($/;"	p	typeref:typename:FLECS_API ecs_block_allocator_t *	signature:(ecs_size_t size)
flecs_ballocator_new_n	$FLECS/$FLECS/flecs.h	/^#define flecs_ballocator_new_n(/;"	d	signature:(T,count)
flecs_ballocator_new_t	$FLECS/$FLECS/flecs.h	/^#define flecs_ballocator_new_t(/;"	d	signature:(T)
flecs_bcalloc	$FLECS/$FLECS/flecs.c	/^void* flecs_bcalloc($/;"	f	typeref:typename:void *	signature:(ecs_block_allocator_t * ba)
flecs_bcalloc	$FLECS/$FLECS/flecs.h	/^void* flecs_bcalloc($/;"	p	typeref:typename:FLECS_API void *	signature:(ecs_block_allocator_t * allocator)
flecs_bdup	$FLECS/$FLECS/flecs.c	/^void* flecs_bdup($/;"	f	typeref:typename:void *	signature:(ecs_block_allocator_t * ba,void * memory)
flecs_bdup	$FLECS/$FLECS/flecs.h	/^void* flecs_bdup($/;"	p	typeref:typename:FLECS_API void *	signature:(ecs_block_allocator_t * ba,void * memory)
flecs_bfree	$FLECS/$FLECS/flecs.c	/^void flecs_bfree($/;"	f	typeref:typename:void	signature:(ecs_block_allocator_t * ba,void * memory)
flecs_bfree	$FLECS/$FLECS/flecs.h	/^void flecs_bfree($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_block_allocator_t * allocator,void * memory)
flecs_binary_expr_do	$FLECS/$FLECS/flecs.c	/^int flecs_binary_expr_do($/;"	f	typeref:typename:int	file:	signature:(ecs_world_t * world,ecs_value_stack_t * stack,const char * name,const char * expr,const char * ptr,ecs_value_t * lvalue,ecs_value_t * rvalue,ecs_value_t * result,ecs_expr_oper_t op)
flecs_binary_expr_parse	$FLECS/$FLECS/flecs.c	/^const char* flecs_binary_expr_parse($/;"	f	typeref:typename:const char *	file:	signature:(ecs_world_t * world,ecs_value_stack_t * stack,const char * name,const char * expr,const char * ptr,ecs_value_t * lvalue,ecs_value_t * result,ecs_expr_oper_t left_op,const ecs_parse_expr_desc_t * desc)
flecs_binary_expr_type	$FLECS/$FLECS/flecs.c	/^ecs_entity_t flecs_binary_expr_type($/;"	f	typeref:typename:ecs_entity_t	file:	signature:(ecs_world_t * world,const char * name,const char * expr,const char * ptr,ecs_value_t * lvalue,ecs_value_t * rvalue,ecs_expr_oper_t op,ecs_entity_t * operand_type_out)
flecs_bitset_addn	$FLECS/$FLECS/flecs.c	/^void flecs_bitset_addn($/;"	p	typeref:typename:FLECS_DBG_API void	file:	signature:(ecs_bitset_t * bs,int32_t count)
flecs_bitset_count	$FLECS/$FLECS/flecs.c	/^int32_t flecs_bitset_count($/;"	p	typeref:typename:FLECS_DBG_API int32_t	file:	signature:(const ecs_bitset_t * bs)
flecs_bitset_ensure	$FLECS/$FLECS/flecs.c	/^void flecs_bitset_ensure($/;"	p	typeref:typename:FLECS_DBG_API void	file:	signature:(ecs_bitset_t * bs,int32_t count)
flecs_bitset_fini	$FLECS/$FLECS/flecs.c	/^void flecs_bitset_fini($/;"	p	typeref:typename:FLECS_DBG_API void	file:	signature:(ecs_bitset_t * bs)
flecs_bitset_get	$FLECS/$FLECS/flecs.c	/^bool flecs_bitset_get($/;"	p	typeref:typename:FLECS_DBG_API bool	file:	signature:(const ecs_bitset_t * bs,int32_t elem)
flecs_bitset_init	$FLECS/$FLECS/flecs.c	/^void flecs_bitset_init($/;"	p	typeref:typename:FLECS_DBG_API void	file:	signature:(ecs_bitset_t * bs)
flecs_bitset_remove	$FLECS/$FLECS/flecs.c	/^void flecs_bitset_remove($/;"	p	typeref:typename:FLECS_DBG_API void	file:	signature:(ecs_bitset_t * bs,int32_t elem)
flecs_bitset_set	$FLECS/$FLECS/flecs.c	/^void flecs_bitset_set($/;"	p	typeref:typename:FLECS_DBG_API void	file:	signature:(ecs_bitset_t * bs,int32_t elem,bool value)
flecs_bitset_swap	$FLECS/$FLECS/flecs.c	/^void flecs_bitset_swap($/;"	p	typeref:typename:FLECS_DBG_API void	file:	signature:(ecs_bitset_t * bs,int32_t elem_a,int32_t elem_b)
flecs_bitset_term_t	$FLECS/$FLECS/flecs.c	/^} flecs_bitset_term_t;$/;"	t	typeref:struct:flecs_bitset_term_t	file:
flecs_bootstrap	$FLECS/$FLECS/flecs.c	/^void flecs_bootstrap($/;"	p	typeref:typename:void	file:	signature:(ecs_world_t * world)
flecs_bootstrap_builtin	$FLECS/$FLECS/flecs.c	/^void flecs_bootstrap_builtin($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_table_t * table,ecs_entity_t entity,const char * symbol,ecs_size_t size,ecs_size_t alignment)
flecs_bootstrap_builtin_t	$FLECS/$FLECS/flecs.c	/^#define flecs_bootstrap_builtin_t(/;"	d	file:	signature:(world,table,name)
flecs_bootstrap_component	$FLECS/$FLECS/flecs.c	/^#define flecs_bootstrap_component(/;"	d	file:	signature:(world,id_)
flecs_bootstrap_component_table	$FLECS/$FLECS/flecs.c	/^ecs_table_t* flecs_bootstrap_component_table($/;"	f	typeref:typename:ecs_table_t *	file:	signature:(ecs_world_t * world)
flecs_bootstrap_entity	$FLECS/$FLECS/flecs.c	/^void flecs_bootstrap_entity($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_entity_t id,const char * name,ecs_entity_t parent)
flecs_bootstrap_hierarchy	$FLECS/$FLECS/flecs.c	/^void flecs_bootstrap_hierarchy(ecs_world_t *world);$/;"	p	typeref:typename:void	file:	signature:(ecs_world_t * world)
flecs_bootstrap_phase	$FLECS/$FLECS/flecs.c	/^#define flecs_bootstrap_phase(/;"	d	file:	signature:(world,phase,depends_on)
flecs_bootstrap_phase_	$FLECS/$FLECS/flecs.c	/^void flecs_bootstrap_phase_($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_entity_t phase,ecs_entity_t depends_on)
flecs_bootstrap_tag	$FLECS/$FLECS/flecs.c	/^#define flecs_bootstrap_tag(/;"	d	file:	signature:(world,name)
flecs_brealloc	$FLECS/$FLECS/flecs.c	/^void* flecs_brealloc($/;"	f	typeref:typename:void *	signature:(ecs_block_allocator_t * dst,ecs_block_allocator_t * src,void * memory)
flecs_brealloc	$FLECS/$FLECS/flecs.h	/^void* flecs_brealloc($/;"	p	typeref:typename:FLECS_API void *	signature:(ecs_block_allocator_t * dst,ecs_block_allocator_t * src,void * memory)
flecs_bulk_new	$FLECS/$FLECS/flecs.c	/^const ecs_entity_t* flecs_bulk_new($/;"	p	typeref:typename:const ecs_entity_t *	file:	signature:(ecs_world_t * world,ecs_table_t * table,const ecs_entity_t * entities,ecs_type_t * component_ids,int32_t count,void ** c_info,bool move,int32_t * row_out,ecs_table_diff_t * diff)
flecs_calloc	$FLECS/$FLECS/flecs.h	/^#define flecs_calloc(/;"	d	signature:(a,size)
flecs_calloc_n	$FLECS/$FLECS/flecs.h	/^#define flecs_calloc_n(/;"	d	signature:(a,T,count)
flecs_calloc_t	$FLECS/$FLECS/flecs.h	/^#define flecs_calloc_t(/;"	d	signature:(a,T)
flecs_check_component	$FLECS/$FLECS/flecs.c	/^void flecs_check_component($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_entity_t result,const EcsComponent * ptr,ecs_size_t size,ecs_size_t alignment)
flecs_clean_tables	$FLECS/$FLECS/flecs.c	/^void flecs_clean_tables($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world)
flecs_cmd_batch_add_diff	$FLECS/$FLECS/flecs.c	/^ecs_table_t* flecs_cmd_batch_add_diff($/;"	f	typeref:typename:ecs_table_t *	file:	signature:(ecs_world_t * world,ecs_table_t * dst,ecs_table_t * cur,ecs_table_t * prev)
flecs_cmd_batch_for_entity	$FLECS/$FLECS/flecs.c	/^void flecs_cmd_batch_for_entity($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_table_diff_builder_t * diff,ecs_entity_t entity,ecs_cmd_t * cmds,int32_t start)
flecs_cmd_new	$FLECS/$FLECS/flecs.c	/^ecs_cmd_t* flecs_cmd_new($/;"	f	typeref:typename:ecs_cmd_t *	file:	signature:(ecs_stage_t * stage)
flecs_cmd_new_batched	$FLECS/$FLECS/flecs.c	/^ecs_cmd_t* flecs_cmd_new_batched($/;"	f	typeref:typename:ecs_cmd_t *	file:	signature:(ecs_stage_t * stage,ecs_entity_t e)
flecs_colorize_buf	$FLECS/$FLECS/flecs.c	/^void flecs_colorize_buf($/;"	p	typeref:typename:void	file:	signature:(char * msg,bool enable_colors,ecs_strbuf_t * buf)
flecs_commands_fini	$FLECS/$FLECS/flecs.c	/^void flecs_commands_fini($/;"	f	typeref:typename:void	file:	signature:(ecs_stage_t * stage,ecs_commands_t * cmd)
flecs_commands_init	$FLECS/$FLECS/flecs.c	/^void flecs_commands_init($/;"	f	typeref:typename:void	file:	signature:(ecs_stage_t * stage,ecs_commands_t * cmd)
flecs_commands_pop	$FLECS/$FLECS/flecs.c	/^void flecs_commands_pop($/;"	p	typeref:typename:void	file:	signature:(ecs_stage_t * stage)
flecs_commands_push	$FLECS/$FLECS/flecs.c	/^void flecs_commands_push($/;"	p	typeref:typename:void	file:	signature:(ecs_stage_t * stage)
flecs_commit	$FLECS/$FLECS/flecs.c	/^void flecs_commit($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_entity_t entity,ecs_record_t * record,ecs_table_t * dst_table,ecs_table_diff_t * diff,bool construct,ecs_flags32_t evt_flags)
flecs_component_ptr_t	$FLECS/$FLECS/flecs.c	/^} flecs_component_ptr_t;$/;"	t	typeref:struct:__anonb2bcda230208	file:
flecs_compute_table_diff	$FLECS/$FLECS/flecs.c	/^void flecs_compute_table_diff($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_table_t * node,ecs_table_t * next,ecs_graph_edge_t * edge,ecs_id_t id)
flecs_constants_copy	$FLECS/$FLECS/flecs.c	/^static void flecs_constants_copy($/;"	f	typeref:typename:void	file:	signature:(ecs_map_t * dst,const ecs_map_t * src)
flecs_constants_dtor	$FLECS/$FLECS/flecs.c	/^static void flecs_constants_dtor($/;"	f	file:	signature:(ecs_map_t * constants)
flecs_copy_ptr_w_id	$FLECS/$FLECS/flecs.c	/^void flecs_copy_ptr_w_id($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_stage_t * stage,ecs_entity_t entity,ecs_id_t id,size_t size,void * ptr)
flecs_count_id_targets_metric_init	$FLECS/$FLECS/flecs.c	/^int flecs_count_id_targets_metric_init($/;"	f	typeref:typename:int	file:	signature:(ecs_world_t * world,ecs_entity_t metric,const ecs_metric_desc_t * desc)
flecs_count_ids_metric_init	$FLECS/$FLECS/flecs.c	/^int flecs_count_ids_metric_init($/;"	f	typeref:typename:int	file:	signature:(ecs_world_t * world,ecs_entity_t metric,const ecs_metric_desc_t * desc)
flecs_counter_print	$FLECS/$FLECS/flecs.c	/^void flecs_counter_print($/;"	f	typeref:typename:void	file:	signature:(const char * name,int32_t t,const ecs_metric_t * m)
flecs_counter_record	$FLECS/$FLECS/flecs.c	/^double flecs_counter_record($/;"	f	typeref:typename:double	file:	signature:(ecs_metric_t * m,int32_t t,double value)
flecs_cpp_func_max	$FLECS/$FLECS/flecs.c	/^const char* flecs_cpp_func_max($/;"	f	typeref:typename:const char *	file:	signature:(const char * a,const char * b)
flecs_cpp_func_rchr	$FLECS/$FLECS/flecs.c	/^const char* flecs_cpp_func_rchr($/;"	f	typeref:typename:const char *	file:	signature:(const char * func_name,ecs_size_t func_name_len,ecs_size_t func_back_len,char ch)
flecs_create_edge_for_add	$FLECS/$FLECS/flecs.c	/^ecs_table_t* flecs_create_edge_for_add($/;"	f	typeref:typename:ecs_table_t *	file:	signature:(ecs_world_t * world,ecs_table_t * node,ecs_graph_edge_t * edge,ecs_id_t id)
flecs_create_edge_for_remove	$FLECS/$FLECS/flecs.c	/^ecs_table_t* flecs_create_edge_for_remove($/;"	f	typeref:typename:ecs_table_t *	file:	signature:(ecs_world_t * world,ecs_table_t * node,ecs_graph_edge_t * edge,ecs_id_t id)
flecs_create_table	$FLECS/$FLECS/flecs.c	/^ecs_table_t *flecs_create_table($/;"	f	typeref:typename:ecs_table_t *	file:	signature:(ecs_world_t * world,ecs_type_t * type,flecs_hashmap_result_t table_elem,ecs_table_t * prev)
flecs_create_worker_threads	$FLECS/$FLECS/flecs.c	/^void flecs_create_worker_threads($/;"	p	typeref:typename:void	file:	signature:(ecs_world_t * world)
flecs_day_interval_count	$FLECS/$FLECS/flecs.c	/^static int32_t flecs_day_interval_count = 24;$/;"	v	typeref:typename:int32_t	file:
flecs_default_copy_ctor	$FLECS/$FLECS/flecs.c	/^void flecs_default_copy_ctor(void *dst_ptr, const void *src_ptr,$/;"	f	typeref:typename:void	file:	signature:(void * dst_ptr,const void * src_ptr,int32_t count,const ecs_type_info_t * ti)
flecs_default_ctor_w_move_w_dtor	$FLECS/$FLECS/flecs.c	/^void flecs_default_ctor_w_move_w_dtor(void *dst_ptr, void *src_ptr,$/;"	f	typeref:typename:void	file:	signature:(void * dst_ptr,void * src_ptr,int32_t count,const ecs_type_info_t * ti)
flecs_default_dtor	$FLECS/$FLECS/flecs.c	/^void flecs_default_dtor(void *dst_ptr, void *src_ptr,$/;"	f	typeref:typename:void	file:	signature:(void * dst_ptr,void * src_ptr,int32_t count,const ecs_type_info_t * ti)
flecs_default_frame_action	$FLECS/$FLECS/flecs.c	/^int flecs_default_frame_action($/;"	f	typeref:typename:int	file:	signature:(ecs_world_t * world,const ecs_app_desc_t * desc)
flecs_default_move	$FLECS/$FLECS/flecs.c	/^void flecs_default_move(void *dst_ptr, void *src_ptr,$/;"	f	typeref:typename:void	file:	signature:(void * dst_ptr,void * src_ptr,int32_t count,const ecs_type_info_t * ti)
flecs_default_move_ctor	$FLECS/$FLECS/flecs.c	/^void flecs_default_move_ctor(void *dst_ptr, void *src_ptr,$/;"	f	typeref:typename:void	file:	signature:(void * dst_ptr,void * src_ptr,int32_t count,const ecs_type_info_t * ti)
flecs_default_move_ctor_w_dtor	$FLECS/$FLECS/flecs.c	/^void flecs_default_move_ctor_w_dtor(void *dst_ptr, void *src_ptr,$/;"	f	typeref:typename:void	file:	signature:(void * dst_ptr,void * src_ptr,int32_t count,const ecs_type_info_t * ti)
flecs_default_move_w_dtor	$FLECS/$FLECS/flecs.c	/^void flecs_default_move_w_dtor(void *dst_ptr, void *src_ptr,$/;"	f	typeref:typename:void	file:	signature:(void * dst_ptr,void * src_ptr,int32_t count,const ecs_type_info_t * ti)
flecs_default_multi_observer_run_callback	$FLECS/$FLECS/flecs.c	/^void flecs_default_multi_observer_run_callback(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:	signature:(ecs_iter_t * it)
flecs_default_observer_next_callback	$FLECS/$FLECS/flecs.c	/^bool flecs_default_observer_next_callback(ecs_iter_t *it) {$/;"	f	typeref:typename:bool	signature:(ecs_iter_t * it)
flecs_default_run_action	$FLECS/$FLECS/flecs.c	/^int flecs_default_run_action($/;"	f	typeref:typename:int	file:	signature:(ecs_world_t * world,ecs_app_desc_t * desc)
flecs_default_uni_observer_run_callback	$FLECS/$FLECS/flecs.c	/^void flecs_default_uni_observer_run_callback(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:	signature:(ecs_iter_t * it)
flecs_defer_add	$FLECS/$FLECS/flecs.c	/^bool flecs_defer_add($/;"	p	typeref:typename:bool	file:	signature:(ecs_stage_t * stage,ecs_entity_t entity,ecs_id_t id)
flecs_defer_begin	$FLECS/$FLECS/flecs.c	/^bool flecs_defer_begin($/;"	p	typeref:typename:bool	file:	signature:(ecs_world_t * world,ecs_stage_t * stage)
flecs_defer_bulk_new	$FLECS/$FLECS/flecs.c	/^bool flecs_defer_bulk_new($/;"	p	typeref:typename:bool	file:	signature:(ecs_world_t * world,ecs_stage_t * stage,int32_t count,ecs_id_t id,const ecs_entity_t ** ids_out)
flecs_defer_clear	$FLECS/$FLECS/flecs.c	/^bool flecs_defer_clear($/;"	p	typeref:typename:bool	file:	signature:(ecs_stage_t * stage,ecs_entity_t entity)
flecs_defer_clone	$FLECS/$FLECS/flecs.c	/^bool flecs_defer_clone($/;"	p	typeref:typename:bool	file:	signature:(ecs_stage_t * stage,ecs_entity_t entity,ecs_entity_t src,bool clone_value)
flecs_defer_cmd	$FLECS/$FLECS/flecs.c	/^bool flecs_defer_cmd($/;"	p	typeref:typename:bool	file:	signature:(ecs_stage_t * stage)
flecs_defer_delete	$FLECS/$FLECS/flecs.c	/^bool flecs_defer_delete($/;"	p	typeref:typename:bool	file:	signature:(ecs_stage_t * stage,ecs_entity_t entity)
flecs_defer_enable	$FLECS/$FLECS/flecs.c	/^bool flecs_defer_enable($/;"	p	typeref:typename:bool	file:	signature:(ecs_stage_t * stage,ecs_entity_t entity,ecs_entity_t component,bool enable)
flecs_defer_end	$FLECS/$FLECS/flecs.c	/^bool flecs_defer_end($/;"	p	typeref:typename:bool	file:	signature:(ecs_world_t * world,ecs_stage_t * stage)
flecs_defer_from_expr	$FLECS/$FLECS/flecs.c	/^void flecs_defer_from_expr($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_entity_t entity,const char * name,const char * expr,bool is_add,bool replace_and)
flecs_defer_modified	$FLECS/$FLECS/flecs.c	/^bool flecs_defer_modified($/;"	p	typeref:typename:bool	file:	signature:(ecs_stage_t * stage,ecs_entity_t entity,ecs_entity_t component)
flecs_defer_on_delete_action	$FLECS/$FLECS/flecs.c	/^bool flecs_defer_on_delete_action($/;"	p	typeref:typename:bool	file:	signature:(ecs_stage_t * stage,ecs_id_t id,ecs_entity_t action)
flecs_defer_path	$FLECS/$FLECS/flecs.c	/^bool flecs_defer_path($/;"	p	typeref:typename:bool	file:	signature:(ecs_stage_t * stage,ecs_entity_t parent,ecs_entity_t entity,const char * name)
flecs_defer_purge	$FLECS/$FLECS/flecs.c	/^bool flecs_defer_purge($/;"	p	typeref:typename:bool	file:	signature:(ecs_world_t * world,ecs_stage_t * stage)
flecs_defer_remove	$FLECS/$FLECS/flecs.c	/^bool flecs_defer_remove($/;"	p	typeref:typename:bool	file:	signature:(ecs_stage_t * stage,ecs_entity_t entity,ecs_id_t id)
flecs_defer_set	$FLECS/$FLECS/flecs.c	/^void* flecs_defer_set($/;"	p	typeref:typename:void *	file:	signature:(ecs_world_t * world,ecs_stage_t * stage,ecs_cmd_kind_t op_kind,ecs_entity_t entity,ecs_entity_t component,ecs_size_t size,void * value)
flecs_deferred_add_remove	$FLECS/$FLECS/flecs.c	/^void flecs_deferred_add_remove($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_entity_t entity,const char * name,const ecs_entity_desc_t * desc,ecs_entity_t scope,ecs_id_t with,bool flecs_new_entity,bool name_assigned)
flecs_delete_entity	$FLECS/$FLECS/flecs.c	/^void flecs_delete_entity($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_record_t * record,ecs_table_diff_t * diff)
flecs_delete_table	$FLECS/$FLECS/flecs.c	/^void flecs_delete_table($/;"	p	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_table_t * table)
flecs_depth_for_flat_table	$FLECS/$FLECS/flecs.c	/^int32_t flecs_depth_for_flat_table($/;"	f	typeref:typename:int32_t	file:	signature:(ecs_world_t * world,ecs_table_t * table)
flecs_depth_for_id	$FLECS/$FLECS/flecs.c	/^int32_t flecs_depth_for_id($/;"	f	typeref:typename:int32_t	file:	signature:(ecs_world_t * world,ecs_entity_t id)
flecs_diff_insert_added	$FLECS/$FLECS/flecs.c	/^void flecs_diff_insert_added($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_table_diff_builder_t * diff,ecs_id_t id)
flecs_diff_insert_removed	$FLECS/$FLECS/flecs.c	/^void flecs_diff_insert_removed($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_table_diff_builder_t * diff,ecs_id_t id)
flecs_discard_cmd	$FLECS/$FLECS/flecs.c	/^void flecs_discard_cmd($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_cmd_t * cmd)
flecs_doc_set	$FLECS/$FLECS/flecs.c	/^void flecs_doc_set($/;"	f	file:	signature:(ecs_world_t * world,ecs_entity_t entity,ecs_entity_t kind,const char * value)
flecs_dotresolve_var	$FLECS/$FLECS/flecs.c	/^ecs_value_t flecs_dotresolve_var($/;"	f	typeref:typename:ecs_value_t	file:	signature:(ecs_world_t * world,ecs_vars_t * vars,char * token)
flecs_dtor_script	$FLECS/$FLECS/flecs.c	/^static void flecs_dtor_script(EcsScript *ptr) {$/;"	f	typeref:typename:void	file:	signature:(EcsScript * ptr)
flecs_dtor_value	$FLECS/$FLECS/flecs.c	/^void flecs_dtor_value($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_id_t id,void * value,int32_t count)
flecs_dump_backtrace	$FLECS/$FLECS/flecs.c	/^void flecs_dump_backtrace($/;"	f	typeref:typename:void	signature:(void * stream)
flecs_dump_backtrace	$FLECS/$FLECS/flecs.h	/^void flecs_dump_backtrace($/;"	p	typeref:typename:FLECS_DBG_API void	signature:(void * stream)
flecs_dup	$FLECS/$FLECS/flecs.c	/^void* flecs_dup($/;"	f	typeref:typename:void *	signature:(ecs_allocator_t * a,ecs_size_t size,const void * src)
flecs_dup	$FLECS/$FLECS/flecs.h	/^void* flecs_dup($/;"	p	typeref:typename:FLECS_API void *	signature:(ecs_allocator_t * a,ecs_size_t size,const void * src)
flecs_dup_n	$FLECS/$FLECS/flecs.h	/^#define flecs_dup_n(/;"	d	signature:(a,T,count,ptr)
flecs_duplicate_data	$FLECS/$FLECS/flecs.c	/^ecs_data_t* flecs_duplicate_data($/;"	f	typeref:typename:ecs_data_t *	file:	signature:(ecs_world_t * world,ecs_table_t * table,ecs_data_t * main_data)
flecs_emit	$FLECS/$FLECS/flecs.c	/^void flecs_emit($/;"	f	typeref:typename:void	signature:(ecs_world_t * world,ecs_world_t * stage,ecs_event_desc_t * desc)
flecs_emit_dump_cache	$FLECS/$FLECS/flecs.c	/^void flecs_emit_dump_cache($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,const ecs_vec_t * vec)
flecs_emit_forward	$FLECS/$FLECS/flecs.c	/^void flecs_emit_forward($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,const ecs_event_record_t * er,const ecs_event_record_t * er_onset,const ecs_type_t * emit_ids,ecs_iter_t * it,ecs_table_t * table,ecs_id_record_t * idr,int32_t evtx)
flecs_emit_forward_and_cache_id	$FLECS/$FLECS/flecs.c	/^void flecs_emit_forward_and_cache_id($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,const ecs_event_record_t * er,const ecs_event_record_t * er_onset,const ecs_type_t * emit_ids,ecs_iter_t * it,ecs_table_t * table,ecs_id_record_t * idr,ecs_entity_t tgt,ecs_record_t * tgt_record,ecs_table_t * tgt_table,const ecs_table_record_t * tgt_tr,int32_t column,int32_t offset,ecs_vec_t * reachable_ids,ecs_entity_t trav,int32_t evtx)
flecs_emit_forward_cached_ids	$FLECS/$FLECS/flecs.c	/^void flecs_emit_forward_cached_ids($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,const ecs_event_record_t * er,const ecs_event_record_t * er_onset,const ecs_type_t * emit_ids,ecs_iter_t * it,ecs_table_t * table,ecs_reachable_cache_t * rc,ecs_vec_t * reachable_ids,ecs_vec_t * stack,ecs_entity_t trav,int32_t evtx)
flecs_emit_forward_id	$FLECS/$FLECS/flecs.c	/^void flecs_emit_forward_id($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,const ecs_event_record_t * er,const ecs_event_record_t * er_onset,const ecs_type_t * emit_ids,ecs_iter_t * it,ecs_table_t * table,ecs_id_record_t * idr,ecs_entity_t tgt,ecs_table_t * tgt_table,int32_t column,int32_t offset,ecs_entity_t trav,int32_t evtx)
flecs_emit_forward_table_up	$FLECS/$FLECS/flecs.c	/^void flecs_emit_forward_table_up($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,const ecs_event_record_t * er,const ecs_event_record_t * er_onset,const ecs_type_t * emit_ids,ecs_iter_t * it,ecs_table_t * table,ecs_entity_t tgt,ecs_table_t * tgt_table,ecs_record_t * tgt_record,ecs_id_record_t * tgt_idr,ecs_vec_t * stack,ecs_vec_t * reachable_ids,int32_t evtx)
flecs_emit_forward_up	$FLECS/$FLECS/flecs.c	/^void flecs_emit_forward_up($/;"	p	typeref:typename:void	file:	signature:(ecs_world_t * world,const ecs_event_record_t * er,const ecs_event_record_t * er_onset,const ecs_type_t * emit_ids,ecs_iter_t * it,ecs_table_t * table,ecs_id_record_t * idr,ecs_vec_t * stack,ecs_vec_t * reachable_ids,int32_t evtx)
flecs_emit_propagate	$FLECS/$FLECS/flecs.c	/^void flecs_emit_propagate($/;"	p	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_iter_t * it,ecs_id_record_t * idr,ecs_id_record_t * tgt_idr,ecs_entity_t trav,ecs_event_id_record_t ** iders,int32_t ider_count)
flecs_emit_propagate_id	$FLECS/$FLECS/flecs.c	/^void flecs_emit_propagate_id($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_iter_t * it,ecs_id_record_t * idr,ecs_id_record_t * cur,ecs_entity_t trav,ecs_event_id_record_t ** iders,int32_t ider_count)
flecs_emit_propagate_invalidate	$FLECS/$FLECS/flecs.c	/^void flecs_emit_propagate_invalidate($/;"	p	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_table_t * table,int32_t offset,int32_t count)
flecs_emit_propagate_invalidate_tables	$FLECS/$FLECS/flecs.c	/^void flecs_emit_propagate_invalidate_tables($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_id_record_t * tgt_idr)
flecs_emit_stack_at	$FLECS/$FLECS/flecs.c	/^int32_t flecs_emit_stack_at($/;"	f	typeref:typename:int32_t	file:	signature:(ecs_vec_t * stack,ecs_id_record_t * idr)
flecs_emit_stack_has	$FLECS/$FLECS/flecs.c	/^bool flecs_emit_stack_has($/;"	f	typeref:typename:bool	file:	signature:(ecs_vec_t * stack,ecs_id_record_t * idr)
flecs_enqueue	$FLECS/$FLECS/flecs.c	/^void flecs_enqueue($/;"	p	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_stage_t * stage,ecs_event_desc_t * desc)
flecs_ensure_module_tag	$FLECS/$FLECS/flecs.c	/^void flecs_ensure_module_tag(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:	signature:(ecs_iter_t * it)
flecs_entities_clear	$FLECS/$FLECS/flecs.c	/^#define flecs_entities_clear(/;"	d	file:	signature:(world)
flecs_entities_copy	$FLECS/$FLECS/flecs.c	/^#define flecs_entities_copy(/;"	d	file:	signature:(dst,src)
flecs_entities_count	$FLECS/$FLECS/flecs.c	/^#define flecs_entities_count(/;"	d	file:	signature:(world)
flecs_entities_ensure	$FLECS/$FLECS/flecs.c	/^#define flecs_entities_ensure(/;"	d	file:	signature:(world,entity)
flecs_entities_exists	$FLECS/$FLECS/flecs.c	/^#define flecs_entities_exists(/;"	d	file:	signature:(world,entity)
flecs_entities_fini	$FLECS/$FLECS/flecs.c	/^#define flecs_entities_fini(/;"	d	file:	signature:(world)
flecs_entities_get	$FLECS/$FLECS/flecs.c	/^#define flecs_entities_get(/;"	d	file:	signature:(world,entity)
flecs_entities_get_any	$FLECS/$FLECS/flecs.c	/^#define flecs_entities_get_any(/;"	d	file:	signature:(world,entity)
flecs_entities_get_generation	$FLECS/$FLECS/flecs.c	/^#define flecs_entities_get_generation(/;"	d	file:	signature:(world,entity)
flecs_entities_ids	$FLECS/$FLECS/flecs.c	/^#define flecs_entities_ids(/;"	d	file:	signature:(world)
flecs_entities_init	$FLECS/$FLECS/flecs.c	/^#define flecs_entities_init(/;"	d	file:	signature:(world)
flecs_entities_is_alive	$FLECS/$FLECS/flecs.c	/^#define flecs_entities_is_alive(/;"	d	file:	signature:(world,entity)
flecs_entities_is_valid	$FLECS/$FLECS/flecs.c	/^#define flecs_entities_is_valid(/;"	d	file:	signature:(world,entity)
flecs_entities_max_id	$FLECS/$FLECS/flecs.c	/^#define flecs_entities_max_id(/;"	d	file:	signature:(world)
flecs_entities_new_id	$FLECS/$FLECS/flecs.c	/^#define flecs_entities_new_id(/;"	d	file:	signature:(world)
flecs_entities_new_ids	$FLECS/$FLECS/flecs.c	/^#define flecs_entities_new_ids(/;"	d	file:	signature:(world,count)
flecs_entities_not_alive_count	$FLECS/$FLECS/flecs.c	/^#define flecs_entities_not_alive_count(/;"	d	file:	signature:(world)
flecs_entities_remove	$FLECS/$FLECS/flecs.c	/^#define flecs_entities_remove(/;"	d	file:	signature:(world,entity)
flecs_entities_restore	$FLECS/$FLECS/flecs.c	/^#define flecs_entities_restore(/;"	d	file:	signature:(dst,src)
flecs_entities_set_generation	$FLECS/$FLECS/flecs.c	/^#define flecs_entities_set_generation(/;"	d	file:	signature:(world,entity)
flecs_entities_set_size	$FLECS/$FLECS/flecs.c	/^#define flecs_entities_set_size(/;"	d	file:	signature:(world,size)
flecs_entities_size	$FLECS/$FLECS/flecs.c	/^#define flecs_entities_size(/;"	d	file:	signature:(world)
flecs_entities_try	$FLECS/$FLECS/flecs.c	/^#define flecs_entities_try(/;"	d	file:	signature:(world,entity)
flecs_entity_compare	$FLECS/$FLECS/flecs.c	/^int flecs_entity_compare($/;"	p	typeref:typename:int	file:	signature:(ecs_entity_t e1,const void * ptr1,ecs_entity_t e2,const void * ptr2)
flecs_entity_filter_bitset_next	$FLECS/$FLECS/flecs.c	/^int flecs_entity_filter_bitset_next($/;"	f	typeref:typename:int	file:	signature:(ecs_table_t * table,ecs_entity_filter_iter_t * iter)
flecs_entity_filter_find_smallest_term	$FLECS/$FLECS/flecs.c	/^int flecs_entity_filter_find_smallest_term($/;"	f	typeref:typename:int	file:	signature:(ecs_table_t * table,ecs_entity_filter_iter_t * iter)
flecs_entity_filter_fini	$FLECS/$FLECS/flecs.c	/^void flecs_entity_filter_fini($/;"	p	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_entity_filter_t * entity_filter)
flecs_entity_filter_init	$FLECS/$FLECS/flecs.c	/^void flecs_entity_filter_init($/;"	p	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_entity_filter_t ** entity_filter,const ecs_filter_t * filter,const ecs_table_t * table,ecs_id_t * ids,int32_t * columns)
flecs_entity_filter_next	$FLECS/$FLECS/flecs.c	/^int flecs_entity_filter_next($/;"	p	typeref:typename:int	file:	signature:(ecs_entity_filter_iter_t * it)
flecs_entity_filter_switch_next	$FLECS/$FLECS/flecs.c	/^int flecs_entity_filter_switch_next($/;"	f	typeref:typename:int	file:	signature:(ecs_table_t * table,ecs_entity_filter_iter_t * iter,bool filter)
flecs_entity_index_clear	$FLECS/$FLECS/flecs.c	/^void flecs_entity_index_clear($/;"	p	typeref:typename:void	file:	signature:(ecs_entity_index_t * index)
flecs_entity_index_copy	$FLECS/$FLECS/flecs.c	/^void flecs_entity_index_copy($/;"	p	typeref:typename:void	file:	signature:(ecs_entity_index_t * dst,const ecs_entity_index_t * src)
flecs_entity_index_copy_intern	$FLECS/$FLECS/flecs.c	/^void flecs_entity_index_copy_intern($/;"	f	typeref:typename:void	file:	signature:(ecs_entity_index_t * dst,const ecs_entity_index_t * src)
flecs_entity_index_count	$FLECS/$FLECS/flecs.c	/^int32_t flecs_entity_index_count($/;"	p	typeref:typename:int32_t	file:	signature:(const ecs_entity_index_t * index)
flecs_entity_index_ensure	$FLECS/$FLECS/flecs.c	/^ecs_record_t* flecs_entity_index_ensure($/;"	p	typeref:typename:ecs_record_t *	file:	signature:(ecs_entity_index_t * index,uint64_t entity)
flecs_entity_index_ensure_page	$FLECS/$FLECS/flecs.c	/^ecs_entity_index_page_t* flecs_entity_index_ensure_page($/;"	f	typeref:typename:ecs_entity_index_page_t *	file:	signature:(ecs_entity_index_t * index,uint32_t id)
flecs_entity_index_exists	$FLECS/$FLECS/flecs.c	/^bool flecs_entity_index_exists($/;"	p	typeref:typename:bool	file:	signature:(const ecs_entity_index_t * index,uint64_t entity)
flecs_entity_index_fini	$FLECS/$FLECS/flecs.c	/^void flecs_entity_index_fini($/;"	p	typeref:typename:void	file:	signature:(ecs_entity_index_t * index)
flecs_entity_index_get	$FLECS/$FLECS/flecs.c	/^ecs_record_t* flecs_entity_index_get($/;"	p	typeref:typename:ecs_record_t *	file:	signature:(const ecs_entity_index_t * index,uint64_t entity)
flecs_entity_index_get_any	$FLECS/$FLECS/flecs.c	/^ecs_record_t* flecs_entity_index_get_any($/;"	p	typeref:typename:ecs_record_t *	file:	signature:(const ecs_entity_index_t * index,uint64_t entity)
flecs_entity_index_get_generation	$FLECS/$FLECS/flecs.c	/^uint64_t flecs_entity_index_get_generation($/;"	p	typeref:typename:uint64_t	file:	signature:(const ecs_entity_index_t * index,uint64_t entity)
flecs_entity_index_ids	$FLECS/$FLECS/flecs.c	/^const uint64_t* flecs_entity_index_ids($/;"	p	typeref:typename:const uint64_t *	file:	signature:(const ecs_entity_index_t * index)
flecs_entity_index_init	$FLECS/$FLECS/flecs.c	/^void flecs_entity_index_init($/;"	p	typeref:typename:void	file:	signature:(ecs_allocator_t * allocator,ecs_entity_index_t * index)
flecs_entity_index_is_alive	$FLECS/$FLECS/flecs.c	/^bool flecs_entity_index_is_alive($/;"	p	typeref:typename:bool	file:	signature:(const ecs_entity_index_t * index,uint64_t entity)
flecs_entity_index_is_valid	$FLECS/$FLECS/flecs.c	/^bool flecs_entity_index_is_valid($/;"	p	typeref:typename:bool	file:	signature:(const ecs_entity_index_t * index,uint64_t entity)
flecs_entity_index_new_id	$FLECS/$FLECS/flecs.c	/^uint64_t flecs_entity_index_new_id($/;"	p	typeref:typename:uint64_t	file:	signature:(ecs_entity_index_t * index)
flecs_entity_index_new_ids	$FLECS/$FLECS/flecs.c	/^uint64_t* flecs_entity_index_new_ids($/;"	p	typeref:typename:uint64_t *	file:	signature:(ecs_entity_index_t * index,int32_t count)
flecs_entity_index_not_alive_count	$FLECS/$FLECS/flecs.c	/^int32_t flecs_entity_index_not_alive_count($/;"	p	typeref:typename:int32_t	file:	signature:(const ecs_entity_index_t * index)
flecs_entity_index_remove	$FLECS/$FLECS/flecs.c	/^void flecs_entity_index_remove($/;"	p	typeref:typename:void	file:	signature:(ecs_entity_index_t * index,uint64_t entity)
flecs_entity_index_restore	$FLECS/$FLECS/flecs.c	/^void flecs_entity_index_restore($/;"	p	typeref:typename:void	file:	signature:(ecs_entity_index_t * dst,const ecs_entity_index_t * src)
flecs_entity_index_set_generation	$FLECS/$FLECS/flecs.c	/^void flecs_entity_index_set_generation($/;"	p	typeref:typename:void	file:	signature:(ecs_entity_index_t * index,uint64_t entity)
flecs_entity_index_set_size	$FLECS/$FLECS/flecs.c	/^void flecs_entity_index_set_size($/;"	p	typeref:typename:void	file:	signature:(ecs_entity_index_t * index,int32_t size)
flecs_entity_index_size	$FLECS/$FLECS/flecs.c	/^int32_t flecs_entity_index_size($/;"	p	typeref:typename:int32_t	file:	signature:(const ecs_entity_index_t * index)
flecs_entity_index_try_get	$FLECS/$FLECS/flecs.c	/^ecs_record_t* flecs_entity_index_try_get($/;"	p	typeref:typename:ecs_record_t *	file:	signature:(const ecs_entity_index_t * index,uint64_t entity)
flecs_entity_index_try_get_any	$FLECS/$FLECS/flecs.c	/^ecs_record_t* flecs_entity_index_try_get_any($/;"	p	typeref:typename:ecs_record_t *	file:	signature:(const ecs_entity_index_t * index,uint64_t entity)
flecs_entity_support	$FLECS/$FLECS/flecs.h	/^inline flecs::opaque<EntityType> flecs_entity_support(flecs::world&) {$/;"	f	namespace:flecs::meta::_	typeref:typename:flecs::opaque<EntityType>	signature:(flecs::world &)
flecs_eval_component_monitor	$FLECS/$FLECS/flecs.c	/^void flecs_eval_component_monitor($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world)
flecs_eval_component_monitors	$FLECS/$FLECS/flecs.c	/^void flecs_eval_component_monitors($/;"	p	typeref:typename:void	file:	signature:(ecs_world_t * world)
flecs_event_id_record_ensure	$FLECS/$FLECS/flecs.c	/^ecs_event_id_record_t* flecs_event_id_record_ensure($/;"	p	typeref:typename:ecs_event_id_record_t *	file:	signature:(ecs_world_t * world,ecs_event_record_t * er,ecs_id_t id)
flecs_event_id_record_get	$FLECS/$FLECS/flecs.c	/^ecs_event_id_record_t* flecs_event_id_record_get($/;"	p	typeref:typename:ecs_event_id_record_t *	file:	signature:(const ecs_event_record_t * er,ecs_id_t id)
flecs_event_id_record_get_if	$FLECS/$FLECS/flecs.c	/^ecs_event_id_record_t* flecs_event_id_record_get_if($/;"	f	typeref:typename:ecs_event_id_record_t *	file:	signature:(const ecs_event_record_t * er,ecs_id_t id)
flecs_event_id_record_remove	$FLECS/$FLECS/flecs.c	/^void flecs_event_id_record_remove($/;"	p	typeref:typename:void	file:	signature:(ecs_event_record_t * er,ecs_id_t id)
flecs_event_observers_get	$FLECS/$FLECS/flecs.c	/^int32_t flecs_event_observers_get($/;"	f	typeref:typename:int32_t	file:	signature:(const ecs_event_record_t * er,ecs_id_t id,ecs_event_id_record_t ** iders)
flecs_event_record_ensure	$FLECS/$FLECS/flecs.c	/^ecs_event_record_t* flecs_event_record_ensure($/;"	p	typeref:typename:ecs_event_record_t *	file:	signature:(ecs_observable_t * o,ecs_entity_t event)
flecs_event_record_get	$FLECS/$FLECS/flecs.c	/^ecs_event_record_t* flecs_event_record_get($/;"	p	typeref:typename:ecs_event_record_t *	file:	signature:(const ecs_observable_t * o,ecs_entity_t event)
flecs_event_record_get_if	$FLECS/$FLECS/flecs.c	/^const ecs_event_record_t* flecs_event_record_get_if($/;"	f	typeref:typename:const ecs_event_record_t *	file:	signature:(const ecs_observable_t * o,ecs_entity_t event)
flecs_explorer_request	$FLECS/$FLECS/flecs.c	/^char* flecs_explorer_request(const char *method, char *request) {$/;"	f	typeref:typename:EMSCRIPTEN_KEEPALIVE char *	signature:(const char * method,char * request)
flecs_expr_op_is_equality	$FLECS/$FLECS/flecs.c	/^bool flecs_expr_op_is_equality($/;"	f	typeref:typename:bool	file:	signature:(ecs_expr_oper_t op)
flecs_expr_op_to_primitive_kind	$FLECS/$FLECS/flecs.c	/^ecs_primitive_kind_t flecs_expr_op_to_primitive_kind(ecs_meta_type_op_kind_t kind) {$/;"	f	typeref:typename:ecs_primitive_kind_t	file:	signature:(ecs_meta_type_op_kind_t kind)
flecs_expr_ser_bitmask	$FLECS/$FLECS/flecs.c	/^int flecs_expr_ser_bitmask($/;"	f	typeref:typename:int	file:	signature:(const ecs_world_t * world,ecs_meta_type_op_t * op,const void * ptr,ecs_strbuf_t * str)
flecs_expr_ser_enum	$FLECS/$FLECS/flecs.c	/^int flecs_expr_ser_enum($/;"	f	typeref:typename:int	file:	signature:(const ecs_world_t * world,ecs_meta_type_op_t * op,const void * base,ecs_strbuf_t * str)
flecs_expr_ser_primitive	$FLECS/$FLECS/flecs.c	/^int flecs_expr_ser_primitive($/;"	f	typeref:typename:int	file:	signature:(const ecs_world_t * world,ecs_primitive_kind_t kind,const void * base,ecs_strbuf_t * str,bool is_expr)
flecs_expr_ser_type	$FLECS/$FLECS/flecs.c	/^int flecs_expr_ser_type($/;"	p	typeref:typename:int	file:	signature:(const ecs_world_t * world,const ecs_vec_t * ser,const void * base,ecs_strbuf_t * str,bool is_expr)
flecs_expr_ser_type_op	$FLECS/$FLECS/flecs.c	/^int flecs_expr_ser_type_op($/;"	p	typeref:typename:int	file:	signature:(const ecs_world_t * world,ecs_meta_type_op_t * op,const void * base,ecs_strbuf_t * str,bool is_expr)
flecs_expr_ser_type_ops	$FLECS/$FLECS/flecs.c	/^int flecs_expr_ser_type_ops($/;"	p	typeref:typename:int	file:	signature:(const ecs_world_t * world,ecs_meta_type_op_t * ops,int32_t op_count,const void * base,ecs_strbuf_t * str,int32_t in_array,bool is_expr)
flecs_expr_value_new	$FLECS/$FLECS/flecs.c	/^void* flecs_expr_value_new($/;"	f	typeref:typename:void *	file:	signature:(ecs_value_stack_t * stack,ecs_entity_t type)
flecs_expr_var_scope_fini	$FLECS/$FLECS/flecs.c	/^void flecs_expr_var_scope_fini($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_expr_var_scope_t * scope)
flecs_expr_var_scope_init	$FLECS/$FLECS/flecs.c	/^void flecs_expr_var_scope_init($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_expr_var_scope_t * scope,ecs_expr_var_scope_t * parent)
flecs_filter_apply_iter_flags	$FLECS/$FLECS/flecs.c	/^void flecs_filter_apply_iter_flags($/;"	p	typeref:typename:void	file:	signature:(ecs_iter_t * it,const ecs_filter_t * filter)
flecs_filter_error	$FLECS/$FLECS/flecs.c	/^void flecs_filter_error($/;"	f	typeref:typename:void	file:	signature:(const ecs_filter_finalize_ctx_t * ctx,const char * fmt,...)
flecs_filter_fini	$FLECS/$FLECS/flecs.c	/^void flecs_filter_fini($/;"	f	typeref:typename:void	file:	signature:(ecs_filter_t * filter)
flecs_filter_iter_init	$FLECS/$FLECS/flecs.c	/^void flecs_filter_iter_init($/;"	f	typeref:typename:void	file:	signature:(const ecs_world_t * world,const ecs_poly_t * poly,ecs_iter_t * iter,ecs_term_t * filter)
flecs_filter_iter_w_flags	$FLECS/$FLECS/flecs.c	/^ecs_iter_t flecs_filter_iter_w_flags($/;"	p	typeref:typename:ecs_iter_t	file:	signature:(const ecs_world_t * stage,const ecs_filter_t * filter,ecs_flags32_t flags)
flecs_filter_match_table	$FLECS/$FLECS/flecs.c	/^bool flecs_filter_match_table($/;"	p	typeref:typename:bool	file:	signature:(ecs_world_t * world,const ecs_filter_t * filter,const ecs_table_t * table,ecs_id_t * ids,int32_t * columns,ecs_entity_t * sources,int32_t * match_indices,int32_t * matches_left,bool first,int32_t skip_term,ecs_flags32_t iter_flags)
flecs_filter_or_other_type	$FLECS/$FLECS/flecs.c	/^ecs_term_t* flecs_filter_or_other_type($/;"	f	typeref:typename:ecs_term_t *	file:	signature:(ecs_filter_t * f,int32_t t)
flecs_filter_str	$FLECS/$FLECS/flecs.c	/^char* flecs_filter_str($/;"	p	typeref:typename:char *	file:	signature:(const ecs_world_t * world,const ecs_filter_t * filter,const ecs_filter_finalize_ctx_t * ctx,int32_t * term_start_out)
flecs_filter_str_add_id	$FLECS/$FLECS/flecs.c	/^void flecs_filter_str_add_id($/;"	f	typeref:typename:void	file:	signature:(const ecs_world_t * world,ecs_strbuf_t * buf,const ecs_term_id_t * id,bool is_subject,ecs_flags32_t default_traverse_flags)
flecs_find_table_add	$FLECS/$FLECS/flecs.c	/^ecs_table_t* flecs_find_table_add($/;"	f	typeref:typename:ecs_table_t *	file:	signature:(ecs_world_t * world,ecs_table_t * table,ecs_id_t id,ecs_table_diff_builder_t * diff)
flecs_find_table_remove	$FLECS/$FLECS/flecs.c	/^ecs_table_t* flecs_find_table_remove($/;"	f	typeref:typename:ecs_table_t *	file:	signature:(ecs_world_t * world,ecs_table_t * table,ecs_id_t id,ecs_table_diff_builder_t * diff)
flecs_find_table_with	$FLECS/$FLECS/flecs.c	/^ecs_table_t* flecs_find_table_with($/;"	f	typeref:typename:ecs_table_t *	file:	signature:(ecs_world_t * world,ecs_table_t * node,ecs_id_t with)
flecs_find_table_without	$FLECS/$FLECS/flecs.c	/^ecs_table_t* flecs_find_table_without($/;"	f	typeref:typename:ecs_table_t *	file:	signature:(ecs_world_t * world,ecs_table_t * node,ecs_id_t without)
flecs_fini_actions	$FLECS/$FLECS/flecs.c	/^void flecs_fini_actions($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world)
flecs_fini_id_records	$FLECS/$FLECS/flecs.c	/^void flecs_fini_id_records($/;"	p	typeref:typename:void	file:	signature:(ecs_world_t * world)
flecs_fini_root_tables	$FLECS/$FLECS/flecs.c	/^void flecs_fini_root_tables($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_id_record_t * idr,bool fini_targets)
flecs_fini_roots	$FLECS/$FLECS/flecs.c	/^void flecs_fini_roots($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world)
flecs_fini_store	$FLECS/$FLECS/flecs.c	/^void flecs_fini_store(ecs_world_t *world) {$/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world)
flecs_fini_type_info	$FLECS/$FLECS/flecs.c	/^void flecs_fini_type_info($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world)
flecs_fini_unset_tables	$FLECS/$FLECS/flecs.c	/^void flecs_fini_unset_tables($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world)
flecs_flat_monitor_t	$FLECS/$FLECS/flecs.c	/^} flecs_flat_monitor_t;$/;"	t	typeref:struct:flecs_flat_monitor_t	file:
flecs_flat_table_term_t	$FLECS/$FLECS/flecs.c	/^} flecs_flat_table_term_t;$/;"	t	typeref:struct:flecs_flat_table_term_t	file:
flecs_flatten	$FLECS/$FLECS/flecs.c	/^void flecs_flatten($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_entity_t root,ecs_id_t pair,int32_t depth,const ecs_flatten_desc_t * desc)
flecs_flush_bulk_new	$FLECS/$FLECS/flecs.c	/^void flecs_flush_bulk_new($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_cmd_t * cmd)
flecs_free	$FLECS/$FLECS/flecs.h	/^#define flecs_free(/;"	d	signature:(a,size,ptr)
flecs_free_cmd_event	$FLECS/$FLECS/flecs.c	/^void flecs_free_cmd_event($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_event_desc_t * desc)
flecs_free_n	$FLECS/$FLECS/flecs.h	/^#define flecs_free_n(/;"	d	signature:(a,T,count,ptr)
flecs_free_t	$FLECS/$FLECS/flecs.h	/^#define flecs_free_t(/;"	d	signature:(a,T,ptr)
flecs_from_public_id	$FLECS/$FLECS/flecs.c	/^ecs_id_t flecs_from_public_id($/;"	p	typeref:typename:ecs_id_t	file:	signature:(ecs_world_t * world,ecs_id_t id)
flecs_from_row	$FLECS/$FLECS/flecs.c	/^uint64_t flecs_from_row($/;"	p	typeref:typename:uint64_t	file:	signature:(ecs_record_t record)
flecs_funccall_parse	$FLECS/$FLECS/flecs.c	/^const char* flecs_funccall_parse($/;"	f	typeref:typename:const char *	file:	signature:(ecs_world_t * world,ecs_value_stack_t * stack,const char * name,const char * expr,const char * ptr,char * token,ecs_meta_cursor_t * cur,ecs_value_t * value,bool isvar,const ecs_parse_expr_desc_t * desc)
flecs_gauge_print	$FLECS/$FLECS/flecs.c	/^void flecs_gauge_print($/;"	f	typeref:typename:void	file:	signature:(const char * name,int32_t t,const ecs_metric_t * m)
flecs_gauge_record	$FLECS/$FLECS/flecs.c	/^void flecs_gauge_record($/;"	f	typeref:typename:void	file:	signature:(ecs_metric_t * m,int32_t t,ecs_float_t value)
flecs_get_base_component	$FLECS/$FLECS/flecs.c	/^void* flecs_get_base_component($/;"	p	typeref:typename:void *	file:	signature:(const ecs_world_t * world,ecs_table_t * table,ecs_id_t id,ecs_id_record_t * table_index,int32_t recur_depth)
flecs_get_builtin	$FLECS/$FLECS/flecs.c	/^ecs_entity_t flecs_get_builtin($/;"	f	typeref:typename:ecs_entity_t	file:	signature:(const char * name)
flecs_get_component	$FLECS/$FLECS/flecs.c	/^void* flecs_get_component($/;"	f	typeref:typename:void *	file:	signature:(const ecs_world_t * world,ecs_table_t * table,int32_t row,ecs_id_t id)
flecs_get_component_ptr	$FLECS/$FLECS/flecs.c	/^flecs_component_ptr_t flecs_get_component_ptr($/;"	f	typeref:typename:flecs_component_ptr_t	file:	signature:(const ecs_world_t * world,ecs_table_t * table,int32_t row,ecs_id_t id)
flecs_get_component_w_index	$FLECS/$FLECS/flecs.c	/^flecs_component_ptr_t flecs_get_component_w_index($/;"	f	typeref:typename:flecs_component_ptr_t	file:	signature:(ecs_table_t * table,int32_t column_index,int32_t row)
flecs_get_delete_action	$FLECS/$FLECS/flecs.c	/^ecs_entity_t flecs_get_delete_action($/;"	f	typeref:typename:ecs_entity_t	file:	signature:(ecs_table_t * table,ecs_table_record_t * tr,ecs_entity_t action,bool delete_target)
flecs_get_flattened_target	$FLECS/$FLECS/flecs.c	/^int32_t flecs_get_flattened_target($/;"	f	typeref:typename:int32_t	file:	signature:(ecs_world_t * world,EcsTarget * cur,ecs_entity_t rel,ecs_id_t id,ecs_entity_t * src_out,ecs_table_record_t ** tr_out)
flecs_get_hashed_string	$FLECS/$FLECS/flecs.c	/^ecs_hashed_string_t flecs_get_hashed_string($/;"	p	typeref:typename:ecs_hashed_string_t	file:	signature:(const char * name,ecs_size_t length,uint64_t hash)
flecs_get_identifier	$FLECS/$FLECS/flecs.c	/^const char* flecs_get_identifier($/;"	f	typeref:typename:const char *	file:	signature:(const ecs_world_t * world,ecs_entity_t entity,ecs_entity_t tag)
flecs_get_mut	$FLECS/$FLECS/flecs.c	/^flecs_component_ptr_t flecs_get_mut($/;"	f	typeref:typename:flecs_component_ptr_t	file:	signature:(ecs_world_t * world,ecs_entity_t entity,ecs_entity_t id,ecs_record_t * r)
flecs_get_observer_event	$FLECS/$FLECS/flecs.c	/^ecs_entity_t flecs_get_observer_event($/;"	f	typeref:typename:ecs_entity_t	file:	signature:(ecs_term_t * term,ecs_entity_t event)
flecs_get_oneof	$FLECS/$FLECS/flecs.c	/^ecs_entity_t flecs_get_oneof($/;"	p	typeref:typename:ecs_entity_t	file:	signature:(const ecs_world_t * world,ecs_entity_t e)
flecs_get_parent_from_path	$FLECS/$FLECS/flecs.c	/^ecs_entity_t flecs_get_parent_from_path($/;"	f	typeref:typename:ecs_entity_t	file:	signature:(const ecs_world_t * world,ecs_entity_t parent,const char ** path_ptr,const char * prefix,bool new_entity)
flecs_get_ref_entity	$FLECS/$FLECS/flecs.c	/^ecs_entity_t flecs_get_ref_entity($/;"	f	typeref:typename:ecs_entity_t	file:	signature:(const ecs_rule_ref_t * ref,ecs_flags16_t flag,const ecs_rule_run_ctx_t * ctx)
flecs_get_ref_range	$FLECS/$FLECS/flecs.c	/^ecs_table_range_t flecs_get_ref_range($/;"	f	typeref:typename:ecs_table_range_t	file:	signature:(const ecs_rule_ref_t * ref,ecs_flags16_t flag,const ecs_rule_run_ctx_t * ctx)
flecs_hash	$FLECS/$FLECS/flecs.c	/^uint64_t flecs_hash($/;"	p	typeref:typename:uint64_t	file:	signature:(const void * data,ecs_size_t length)
flecs_hashmap_copy	$FLECS/$FLECS/flecs.c	/^void flecs_hashmap_copy($/;"	f	typeref:typename:void	signature:(ecs_hashmap_t * dst,const ecs_hashmap_t * src)
flecs_hashmap_copy	$FLECS/$FLECS/flecs.h	/^void flecs_hashmap_copy($/;"	p	typeref:typename:FLECS_DBG_API void	signature:(ecs_hashmap_t * dst,const ecs_hashmap_t * src)
flecs_hashmap_ensure	$FLECS/$FLECS/flecs.h	/^#define flecs_hashmap_ensure(/;"	d	signature:(map,key,V)
flecs_hashmap_ensure_	$FLECS/$FLECS/flecs.c	/^flecs_hashmap_result_t flecs_hashmap_ensure_($/;"	f	typeref:typename:flecs_hashmap_result_t	signature:(ecs_hashmap_t * map,ecs_size_t key_size,const void * key,ecs_size_t value_size)
flecs_hashmap_ensure_	$FLECS/$FLECS/flecs.h	/^flecs_hashmap_result_t flecs_hashmap_ensure_($/;"	p	typeref:typename:FLECS_DBG_API flecs_hashmap_result_t	signature:(ecs_hashmap_t * map,ecs_size_t key_size,const void * key,ecs_size_t value_size)
flecs_hashmap_find_key	$FLECS/$FLECS/flecs.c	/^int32_t flecs_hashmap_find_key($/;"	f	typeref:typename:int32_t	file:	signature:(const ecs_hashmap_t * map,ecs_vec_t * keys,ecs_size_t key_size,const void * key)
flecs_hashmap_fini	$FLECS/$FLECS/flecs.c	/^void flecs_hashmap_fini($/;"	f	typeref:typename:void	signature:(ecs_hashmap_t * map)
flecs_hashmap_fini	$FLECS/$FLECS/flecs.h	/^void flecs_hashmap_fini($/;"	p	typeref:typename:FLECS_DBG_API void	signature:(ecs_hashmap_t * map)
flecs_hashmap_get	$FLECS/$FLECS/flecs.h	/^#define flecs_hashmap_get(/;"	d	signature:(map,key,V)
flecs_hashmap_get_	$FLECS/$FLECS/flecs.c	/^void* flecs_hashmap_get_($/;"	f	typeref:typename:void *	signature:(const ecs_hashmap_t * map,ecs_size_t key_size,const void * key,ecs_size_t value_size)
flecs_hashmap_get_	$FLECS/$FLECS/flecs.h	/^void* flecs_hashmap_get_($/;"	p	typeref:typename:FLECS_DBG_API void *	signature:(const ecs_hashmap_t * map,ecs_size_t key_size,const void * key,ecs_size_t value_size)
flecs_hashmap_get_bucket	$FLECS/$FLECS/flecs.c	/^ecs_hm_bucket_t* flecs_hashmap_get_bucket($/;"	f	typeref:typename:ecs_hm_bucket_t *	signature:(const ecs_hashmap_t * map,uint64_t hash)
flecs_hashmap_get_bucket	$FLECS/$FLECS/flecs.h	/^ecs_hm_bucket_t* flecs_hashmap_get_bucket($/;"	p	typeref:typename:FLECS_DBG_API ecs_hm_bucket_t *	signature:(const ecs_hashmap_t * map,uint64_t hash)
flecs_hashmap_init	$FLECS/$FLECS/flecs.h	/^#define flecs_hashmap_init(/;"	d	signature:(hm,K,V,hash,compare,allocator)
flecs_hashmap_init_	$FLECS/$FLECS/flecs.c	/^void flecs_hashmap_init_($/;"	f	typeref:typename:void	signature:(ecs_hashmap_t * map,ecs_size_t key_size,ecs_size_t value_size,ecs_hash_value_action_t hash,ecs_compare_action_t compare,ecs_allocator_t * allocator)
flecs_hashmap_init_	$FLECS/$FLECS/flecs.h	/^void flecs_hashmap_init_($/;"	p	typeref:typename:FLECS_DBG_API void	signature:(ecs_hashmap_t * hm,ecs_size_t key_size,ecs_size_t value_size,ecs_hash_value_action_t hash,ecs_compare_action_t compare,ecs_allocator_t * allocator)
flecs_hashmap_iter	$FLECS/$FLECS/flecs.c	/^flecs_hashmap_iter_t flecs_hashmap_iter($/;"	f	typeref:typename:flecs_hashmap_iter_t	signature:(ecs_hashmap_t * map)
flecs_hashmap_iter	$FLECS/$FLECS/flecs.h	/^flecs_hashmap_iter_t flecs_hashmap_iter($/;"	p	typeref:typename:FLECS_DBG_API flecs_hashmap_iter_t	signature:(ecs_hashmap_t * map)
flecs_hashmap_iter_t	$FLECS/$FLECS/flecs.h	/^} flecs_hashmap_iter_t;$/;"	t	typeref:struct:__anonb2bcda280508
flecs_hashmap_next	$FLECS/$FLECS/flecs.h	/^#define flecs_hashmap_next(/;"	d	signature:(map,V)
flecs_hashmap_next_	$FLECS/$FLECS/flecs.c	/^void* flecs_hashmap_next_($/;"	f	typeref:typename:void *	signature:(flecs_hashmap_iter_t * it,ecs_size_t key_size,void * key_out,ecs_size_t value_size)
flecs_hashmap_next_	$FLECS/$FLECS/flecs.h	/^void* flecs_hashmap_next_($/;"	p	typeref:typename:FLECS_DBG_API void *	signature:(flecs_hashmap_iter_t * it,ecs_size_t key_size,void * key_out,ecs_size_t value_size)
flecs_hashmap_next_w_key	$FLECS/$FLECS/flecs.h	/^#define flecs_hashmap_next_w_key(/;"	d	signature:(map,K,key,V)
flecs_hashmap_remove	$FLECS/$FLECS/flecs.h	/^#define flecs_hashmap_remove(/;"	d	signature:(map,key,V)
flecs_hashmap_remove_	$FLECS/$FLECS/flecs.c	/^void flecs_hashmap_remove_($/;"	f	typeref:typename:void	signature:(ecs_hashmap_t * map,ecs_size_t key_size,const void * key,ecs_size_t value_size)
flecs_hashmap_remove_	$FLECS/$FLECS/flecs.h	/^void flecs_hashmap_remove_($/;"	p	typeref:typename:FLECS_DBG_API void	signature:(ecs_hashmap_t * map,ecs_size_t key_size,const void * key,ecs_size_t value_size)
flecs_hashmap_remove_w_hash	$FLECS/$FLECS/flecs.h	/^#define flecs_hashmap_remove_w_hash(/;"	d	signature:(map,key,V,hash)
flecs_hashmap_remove_w_hash_	$FLECS/$FLECS/flecs.c	/^void flecs_hashmap_remove_w_hash_($/;"	f	typeref:typename:void	signature:(ecs_hashmap_t * map,ecs_size_t key_size,const void * key,ecs_size_t value_size,uint64_t hash)
flecs_hashmap_remove_w_hash_	$FLECS/$FLECS/flecs.h	/^void flecs_hashmap_remove_w_hash_($/;"	p	typeref:typename:FLECS_DBG_API void	signature:(ecs_hashmap_t * map,ecs_size_t key_size,const void * key,ecs_size_t value_size,uint64_t hash)
flecs_hashmap_result_t	$FLECS/$FLECS/flecs.h	/^} flecs_hashmap_result_t;$/;"	t	typeref:struct:__anonb2bcda280608
flecs_hashmap_set	$FLECS/$FLECS/flecs.h	/^#define flecs_hashmap_set(/;"	d	signature:(map,key,value)
flecs_hashmap_set_	$FLECS/$FLECS/flecs.c	/^void flecs_hashmap_set_($/;"	f	typeref:typename:void	signature:(ecs_hashmap_t * map,ecs_size_t key_size,void * key,ecs_size_t value_size,const void * value)
flecs_hashmap_set_	$FLECS/$FLECS/flecs.h	/^void flecs_hashmap_set_($/;"	p	typeref:typename:FLECS_DBG_API void	signature:(ecs_hashmap_t * map,ecs_size_t key_size,void * key,ecs_size_t value_size,const void * value)
flecs_hm_bucket_remove	$FLECS/$FLECS/flecs.c	/^void flecs_hm_bucket_remove($/;"	f	typeref:typename:void	signature:(ecs_hashmap_t * map,ecs_hm_bucket_t * bucket,uint64_t hash,int32_t index)
flecs_hm_bucket_remove	$FLECS/$FLECS/flecs.h	/^void flecs_hm_bucket_remove($/;"	p	typeref:typename:FLECS_DBG_API void	signature:(ecs_hashmap_t * map,ecs_hm_bucket_t * bucket,uint64_t hash,int32_t index)
flecs_id_flag_for_event	$FLECS/$FLECS/flecs.c	/^ecs_flags32_t flecs_id_flag_for_event($/;"	f	typeref:typename:ecs_flags32_t	file:	signature:(ecs_entity_t e)
flecs_id_for_depth	$FLECS/$FLECS/flecs.c	/^ecs_entity_t flecs_id_for_depth($/;"	f	typeref:typename:ecs_entity_t	file:	signature:(ecs_world_t * world,int32_t depth)
flecs_id_is_delete_target	$FLECS/$FLECS/flecs.c	/^bool flecs_id_is_delete_target($/;"	f	typeref:typename:bool	file:	signature:(ecs_id_t id,ecs_entity_t action)
flecs_id_mark_for_delete	$FLECS/$FLECS/flecs.c	/^void flecs_id_mark_for_delete($/;"	p	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_id_record_t * idr,ecs_entity_t action,bool delete_id)
flecs_id_metric_init	$FLECS/$FLECS/flecs.c	/^int flecs_id_metric_init($/;"	f	typeref:typename:int	file:	signature:(ecs_world_t * world,ecs_entity_t metric,const ecs_metric_desc_t * desc)
flecs_id_name_index_ensure	$FLECS/$FLECS/flecs.c	/^ecs_hashmap_t* flecs_id_name_index_ensure($/;"	p	typeref:typename:ecs_hashmap_t *	file:	signature:(ecs_world_t * world,ecs_id_t id)
flecs_id_name_index_get	$FLECS/$FLECS/flecs.c	/^ecs_hashmap_t* flecs_id_name_index_get($/;"	p	typeref:typename:ecs_hashmap_t *	file:	signature:(const ecs_world_t * world,ecs_id_t id)
flecs_id_record_assert_empty	$FLECS/$FLECS/flecs.c	/^void flecs_id_record_assert_empty($/;"	f	typeref:typename:void	file:	signature:(ecs_id_record_t * idr)
flecs_id_record_claim	$FLECS/$FLECS/flecs.c	/^void flecs_id_record_claim($/;"	p	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_id_record_t * idr)
flecs_id_record_elem	$FLECS/$FLECS/flecs.c	/^ecs_id_record_elem_t* flecs_id_record_elem($/;"	f	typeref:typename:ecs_id_record_elem_t *	file:	signature:(ecs_id_record_t * head,ecs_id_record_elem_t * list,ecs_id_record_t * idr)
flecs_id_record_elem_insert	$FLECS/$FLECS/flecs.c	/^void flecs_id_record_elem_insert($/;"	f	typeref:typename:void	file:	signature:(ecs_id_record_t * head,ecs_id_record_t * idr,ecs_id_record_elem_t * elem)
flecs_id_record_elem_remove	$FLECS/$FLECS/flecs.c	/^void flecs_id_record_elem_remove($/;"	f	typeref:typename:void	file:	signature:(ecs_id_record_t * idr,ecs_id_record_elem_t * elem)
flecs_id_record_ensure	$FLECS/$FLECS/flecs.c	/^ecs_id_record_t* flecs_id_record_ensure($/;"	p	typeref:typename:ecs_id_record_t *	file:	signature:(ecs_world_t * world,ecs_id_t id)
flecs_id_record_free	$FLECS/$FLECS/flecs.c	/^void flecs_id_record_free($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_id_record_t * idr)
flecs_id_record_get	$FLECS/$FLECS/flecs.c	/^ecs_id_record_t* flecs_id_record_get($/;"	p	typeref:typename:ecs_id_record_t *	file:	signature:(const ecs_world_t * world,ecs_id_t id)
flecs_id_record_get_table	$FLECS/$FLECS/flecs.c	/^ecs_table_record_t* flecs_id_record_get_table($/;"	p	typeref:typename:ecs_table_record_t *	file:	signature:(const ecs_id_record_t * idr,const ecs_table_t * table)
flecs_id_record_hash	$FLECS/$FLECS/flecs.c	/^ecs_id_t flecs_id_record_hash($/;"	f	typeref:typename:ecs_id_t	file:	signature:(ecs_id_t id)
flecs_id_record_name_index_ensure	$FLECS/$FLECS/flecs.c	/^ecs_hashmap_t* flecs_id_record_name_index_ensure($/;"	p	typeref:typename:ecs_hashmap_t *	file:	signature:(ecs_world_t * world,ecs_id_record_t * idr)
flecs_id_record_new	$FLECS/$FLECS/flecs.c	/^ecs_id_record_t* flecs_id_record_new($/;"	f	typeref:typename:ecs_id_record_t *	file:	signature:(ecs_world_t * world,ecs_id_t id)
flecs_id_record_release	$FLECS/$FLECS/flecs.c	/^int32_t flecs_id_record_release($/;"	p	typeref:typename:int32_t	file:	signature:(ecs_world_t * world,ecs_id_record_t * idr)
flecs_id_record_release_tables	$FLECS/$FLECS/flecs.c	/^void flecs_id_record_release_tables($/;"	p	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_id_record_t * idr)
flecs_id_record_set_type_info	$FLECS/$FLECS/flecs.c	/^bool flecs_id_record_set_type_info($/;"	p	typeref:typename:bool	file:	signature:(ecs_world_t * world,ecs_id_record_t * idr,const ecs_type_info_t * ti)
flecs_ignore_observer	$FLECS/$FLECS/flecs.c	/^bool flecs_ignore_observer($/;"	f	typeref:typename:bool	file:	signature:(ecs_observer_t * observer,ecs_table_t * table,int32_t evtx)
flecs_inc_observer_count	$FLECS/$FLECS/flecs.c	/^void flecs_inc_observer_count($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_entity_t event,ecs_event_record_t * evt,ecs_id_t id,int32_t value)
flecs_init_edge_for_add	$FLECS/$FLECS/flecs.c	/^void flecs_init_edge_for_add($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_table_t * table,ecs_graph_edge_t * edge,ecs_id_t id,ecs_table_t * to)
flecs_init_edge_for_remove	$FLECS/$FLECS/flecs.c	/^void flecs_init_edge_for_remove($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_table_t * table,ecs_graph_edge_t * edge,ecs_id_t id,ecs_table_t * to)
flecs_init_filter_iter	$FLECS/$FLECS/flecs.c	/^void flecs_init_filter_iter($/;"	f	typeref:typename:void	file:	signature:(ecs_iter_t * it,const ecs_filter_t * filter)
flecs_init_id_records	$FLECS/$FLECS/flecs.c	/^void flecs_init_id_records($/;"	p	typeref:typename:void	file:	signature:(ecs_world_t * world)
flecs_init_root_table	$FLECS/$FLECS/flecs.c	/^void flecs_init_root_table($/;"	p	typeref:typename:void	file:	signature:(ecs_world_t * world)
flecs_init_store	$FLECS/$FLECS/flecs.c	/^void flecs_init_store($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world)
flecs_init_table	$FLECS/$FLECS/flecs.c	/^void flecs_init_table($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_table_t * table,ecs_table_t * prev)
flecs_init_type	$FLECS/$FLECS/flecs.c	/^int flecs_init_type($/;"	f	typeref:typename:int	file:	signature:(ecs_world_t * world,ecs_entity_t type,ecs_type_kind_t kind,ecs_size_t size,ecs_size_t alignment)
flecs_insert_id_elem	$FLECS/$FLECS/flecs.c	/^void flecs_insert_id_elem($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_id_record_t * idr,ecs_id_t wildcard,ecs_id_record_t * widr)
flecs_insert_sleep	$FLECS/$FLECS/flecs.c	/^ecs_ftime_t flecs_insert_sleep($/;"	f	typeref:typename:ecs_ftime_t	file:	signature:(ecs_world_t * world,ecs_time_t * stop)
flecs_instantiate	$FLECS/$FLECS/flecs.c	/^void flecs_instantiate($/;"	p	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_entity_t base,ecs_table_t * table,int32_t row,int32_t count)
flecs_instantiate_children	$FLECS/$FLECS/flecs.c	/^void flecs_instantiate_children($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_entity_t base,ecs_table_t * table,int32_t row,int32_t count,ecs_table_t * child_table)
flecs_instantiate_slot	$FLECS/$FLECS/flecs.c	/^void flecs_instantiate_slot($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_entity_t base,ecs_entity_t instance,ecs_entity_t slot_of,ecs_entity_t slot,ecs_entity_t child)
flecs_invoke_hook	$FLECS/$FLECS/flecs.c	/^void flecs_invoke_hook($/;"	p	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_table_t * table,int32_t count,int32_t row,ecs_entity_t * entities,void * ptr,ecs_id_t id,const ecs_type_info_t * ti,ecs_entity_t event,ecs_iter_action_t hook)
flecs_is_root_path	$FLECS/$FLECS/flecs.c	/^bool flecs_is_root_path($/;"	f	typeref:typename:bool	file:	signature:(const char * path,const char * prefix)
flecs_is_sep	$FLECS/$FLECS/flecs.c	/^bool flecs_is_sep($/;"	f	typeref:typename:bool	file:	signature:(const char ** ptr,const char * sep)
flecs_is_simple_result	$FLECS/$FLECS/flecs.c	/^bool flecs_is_simple_result($/;"	f	typeref:typename:bool	file:	signature:(ecs_iter_t * it)
flecs_is_type_number	$FLECS/$FLECS/flecs.c	/^bool flecs_is_type_number($/;"	f	typeref:typename:bool	file:	signature:(ecs_entity_t type)
flecs_is_valid_end_of_term	$FLECS/$FLECS/flecs.c	/^bool flecs_is_valid_end_of_term($/;"	f	typeref:typename:bool	file:	signature:(const char * ptr)
flecs_isident	$FLECS/$FLECS/flecs.c	/^bool flecs_isident($/;"	p	typeref:typename:bool	file:	signature:(char ch)
flecs_iter_cache_all	$FLECS/$FLECS/flecs.h	/^#define flecs_iter_cache_all /;"	d
flecs_iter_cache_columns	$FLECS/$FLECS/flecs.h	/^#define flecs_iter_cache_columns /;"	d
flecs_iter_cache_ids	$FLECS/$FLECS/flecs.h	/^#define flecs_iter_cache_ids /;"	d
flecs_iter_cache_match_indices	$FLECS/$FLECS/flecs.h	/^#define flecs_iter_cache_match_indices /;"	d
flecs_iter_cache_ptrs	$FLECS/$FLECS/flecs.h	/^#define flecs_iter_cache_ptrs /;"	d
flecs_iter_cache_sources	$FLECS/$FLECS/flecs.h	/^#define flecs_iter_cache_sources /;"	d
flecs_iter_cache_variables	$FLECS/$FLECS/flecs.h	/^#define flecs_iter_cache_variables /;"	d
flecs_iter_calloc	$FLECS/$FLECS/flecs.c	/^void* flecs_iter_calloc($/;"	p	typeref:typename:void *	file:	signature:(ecs_iter_t * it,ecs_size_t size,ecs_size_t align)
flecs_iter_calloc_n	$FLECS/$FLECS/flecs.c	/^#define flecs_iter_calloc_n(/;"	d	file:	signature:(it,T,count)
flecs_iter_calloc_t	$FLECS/$FLECS/flecs.c	/^#define flecs_iter_calloc_t(/;"	d	file:	signature:(it,T)
flecs_iter_free	$FLECS/$FLECS/flecs.c	/^void flecs_iter_free($/;"	p	typeref:typename:void	file:	signature:(void * ptr,ecs_size_t size)
flecs_iter_free_n	$FLECS/$FLECS/flecs.c	/^#define flecs_iter_free_n(/;"	d	file:	signature:(ptr,T,count)
flecs_iter_free_t	$FLECS/$FLECS/flecs.c	/^#define flecs_iter_free_t(/;"	d	file:	signature:(ptr,T)
flecs_iter_init	$FLECS/$FLECS/flecs.c	/^void flecs_iter_init($/;"	p	typeref:typename:void	file:	signature:(const ecs_world_t * world,ecs_iter_t * it,ecs_flags8_t fields)
flecs_iter_next_instanced	$FLECS/$FLECS/flecs.c	/^bool flecs_iter_next_instanced($/;"	p	typeref:typename:bool	file:	signature:(ecs_iter_t * it,bool result)
flecs_iter_next_row	$FLECS/$FLECS/flecs.c	/^bool flecs_iter_next_row($/;"	p	typeref:typename:bool	file:	signature:(ecs_iter_t * it)
flecs_iter_populate_data	$FLECS/$FLECS/flecs.c	/^void flecs_iter_populate_data($/;"	p	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_iter_t * it,ecs_table_t * table,int32_t offset,int32_t count,void ** ptrs)
flecs_iter_populate_term_data	$FLECS/$FLECS/flecs.c	/^bool flecs_iter_populate_term_data($/;"	f	typeref:typename:bool	file:	signature:(ecs_world_t * world,ecs_iter_t * it,int32_t t,int32_t column,void ** ptr_out)
flecs_iter_validate	$FLECS/$FLECS/flecs.c	/^void flecs_iter_validate($/;"	p	typeref:typename:void	file:	signature:(ecs_iter_t * it)
flecs_ito	$FLECS/$FLECS/flecs.c	/^#define flecs_ito(/;"	d	file:	signature:(T,value)
flecs_ito_	$FLECS/$FLECS/flecs.c	/^uint64_t flecs_ito_($/;"	p	typeref:typename:uint64_t	file:	signature:(size_t dst_size,bool dst_signed,bool lt_zero,uint64_t value,const char * err)
flecs_itoi16	$FLECS/$FLECS/flecs.c	/^#define flecs_itoi16(/;"	d	file:	signature:(value)
flecs_itoi32	$FLECS/$FLECS/flecs.c	/^#define flecs_itoi32(/;"	d	file:	signature:(value)
flecs_itolbl	$FLECS/$FLECS/flecs.c	/^ecs_rule_lbl_t flecs_itolbl(int64_t val) {$/;"	f	typeref:typename:ecs_rule_lbl_t	signature:(int64_t val)
flecs_itosize	$FLECS/$FLECS/flecs.c	/^#define flecs_itosize(/;"	d	file:	signature:(value)
flecs_itovar	$FLECS/$FLECS/flecs.c	/^ecs_var_id_t flecs_itovar(int64_t val) {$/;"	f	typeref:typename:ecs_var_id_t	file:	signature:(int64_t val)
flecs_join_worker_threads	$FLECS/$FLECS/flecs.c	/^void flecs_join_worker_threads($/;"	p	typeref:typename:void	file:	signature:(ecs_world_t * world)
flecs_journal	$FLECS/$FLECS/flecs.h	/^#define flecs_journal(/;"	d	signature:(...)
flecs_journal_begin	$FLECS/$FLECS/flecs.c	/^void flecs_journal_begin($/;"	f	typeref:typename:void	signature:(ecs_world_t * world,ecs_journal_kind_t kind,ecs_entity_t entity,ecs_type_t * add,ecs_type_t * remove)
flecs_journal_begin	$FLECS/$FLECS/flecs.h	/^void flecs_journal_begin($/;"	p	typeref:typename:FLECS_DBG_API void	signature:(ecs_world_t * world,ecs_journal_kind_t kind,ecs_entity_t entity,ecs_type_t * add,ecs_type_t * remove)
flecs_journal_end	$FLECS/$FLECS/flecs.c	/^void flecs_journal_end(void) {$/;"	f	typeref:typename:void	signature:(void)
flecs_journal_end	$FLECS/$FLECS/flecs.h	/^void flecs_journal_end(void);$/;"	p	typeref:typename:FLECS_DBG_API void	signature:(void)
flecs_journal_entitystr	$FLECS/$FLECS/flecs.c	/^char* flecs_journal_entitystr($/;"	f	typeref:typename:char *	file:	signature:(ecs_world_t * world,ecs_entity_t entity)
flecs_journal_idstr	$FLECS/$FLECS/flecs.c	/^char* flecs_journal_idstr($/;"	f	typeref:typename:char *	file:	signature:(ecs_world_t * world,ecs_id_t id)
flecs_journal_sp	$FLECS/$FLECS/flecs.c	/^static int flecs_journal_sp = 0;$/;"	v	typeref:typename:int	file:
flecs_json_append_base	$FLECS/$FLECS/flecs.c	/^int flecs_json_append_base($/;"	f	typeref:typename:int	file:	signature:(const ecs_world_t * world,ecs_strbuf_t * buf,ecs_entity_t ent,ecs_entity_t inst,const ecs_entity_to_json_desc_t * desc)
flecs_json_append_type	$FLECS/$FLECS/flecs.c	/^int flecs_json_append_type($/;"	f	typeref:typename:int	file:	signature:(const ecs_world_t * world,ecs_strbuf_t * buf,ecs_entity_t ent,ecs_entity_t inst,const ecs_entity_to_json_desc_t * desc)
flecs_json_append_type_hidden	$FLECS/$FLECS/flecs.c	/^int flecs_json_append_type_hidden($/;"	f	typeref:typename:int	file:	signature:(const ecs_world_t * world,ecs_strbuf_t * buf,const ecs_id_t * ids,int32_t count,ecs_entity_t ent,ecs_entity_t inst,const ecs_entity_to_json_desc_t * desc)
flecs_json_append_type_info	$FLECS/$FLECS/flecs.c	/^int flecs_json_append_type_info($/;"	f	typeref:typename:int	file:	signature:(const ecs_world_t * world,ecs_strbuf_t * buf,const ecs_id_t * ids,int32_t count,ecs_entity_t ent,ecs_entity_t inst,const ecs_entity_to_json_desc_t * desc)
flecs_json_append_type_labels	$FLECS/$FLECS/flecs.c	/^int flecs_json_append_type_labels($/;"	f	typeref:typename:int	file:	signature:(const ecs_world_t * world,ecs_strbuf_t * buf,const ecs_id_t * ids,int32_t count,ecs_entity_t ent,ecs_entity_t inst,const ecs_entity_to_json_desc_t * desc)
flecs_json_append_type_values	$FLECS/$FLECS/flecs.c	/^int flecs_json_append_type_values($/;"	f	typeref:typename:int	file:	signature:(const ecs_world_t * world,ecs_strbuf_t * buf,const ecs_id_t * ids,int32_t count,ecs_entity_t ent,ecs_entity_t inst,const ecs_entity_to_json_desc_t * desc)
flecs_json_array_pop	$FLECS/$FLECS/flecs.c	/^void flecs_json_array_pop($/;"	p	typeref:typename:void	file:	signature:(ecs_strbuf_t * buf)
flecs_json_array_push	$FLECS/$FLECS/flecs.c	/^void flecs_json_array_push($/;"	p	typeref:typename:void	file:	signature:(ecs_strbuf_t * buf)
flecs_json_bool	$FLECS/$FLECS/flecs.c	/^void flecs_json_bool($/;"	p	typeref:typename:void	file:	signature:(ecs_strbuf_t * buf,bool value)
flecs_json_color	$FLECS/$FLECS/flecs.c	/^void flecs_json_color($/;"	p	typeref:typename:void	file:	signature:(ecs_strbuf_t * buf,const ecs_world_t * world,ecs_entity_t e)
flecs_json_ensure_entity	$FLECS/$FLECS/flecs.c	/^ecs_entity_t flecs_json_ensure_entity($/;"	f	typeref:typename:ecs_entity_t	file:	signature:(ecs_world_t * world,const char * name,ecs_map_t * anonymous_ids)
flecs_json_expect	$FLECS/$FLECS/flecs.c	/^const char* flecs_json_expect($/;"	p	typeref:typename:const char *	file:	signature:(const char * json,ecs_json_token_t token_kind,char * token,const ecs_from_json_desc_t * desc)
flecs_json_expect_member	$FLECS/$FLECS/flecs.c	/^const char* flecs_json_expect_member($/;"	p	typeref:typename:const char *	file:	signature:(const char * json,char * token,const ecs_from_json_desc_t * desc)
flecs_json_expect_member_name	$FLECS/$FLECS/flecs.c	/^const char* flecs_json_expect_member_name($/;"	p	typeref:typename:const char *	file:	signature:(const char * json,char * token,const char * member_name,const ecs_from_json_desc_t * desc)
flecs_json_false	$FLECS/$FLECS/flecs.c	/^void flecs_json_false($/;"	p	typeref:typename:void	file:	signature:(ecs_strbuf_t * buf)
flecs_json_id	$FLECS/$FLECS/flecs.c	/^void flecs_json_id($/;"	p	typeref:typename:void	file:	signature:(ecs_strbuf_t * buf,const ecs_world_t * world,ecs_id_t id)
flecs_json_label	$FLECS/$FLECS/flecs.c	/^void flecs_json_label($/;"	p	typeref:typename:void	file:	signature:(ecs_strbuf_t * buf,const ecs_world_t * world,ecs_entity_t e)
flecs_json_lookup	$FLECS/$FLECS/flecs.c	/^ecs_entity_t flecs_json_lookup($/;"	f	typeref:typename:ecs_entity_t	file:	signature:(ecs_world_t * world,ecs_entity_t parent,const char * name,const ecs_from_json_desc_t * desc)
flecs_json_mark_reserved	$FLECS/$FLECS/flecs.c	/^void flecs_json_mark_reserved($/;"	f	typeref:typename:void	file:	signature:(ecs_map_t * anonymous_ids,ecs_entity_t e)
flecs_json_member	$FLECS/$FLECS/flecs.c	/^void flecs_json_member($/;"	p	typeref:typename:void	file:	signature:(ecs_strbuf_t * buf,const char * name)
flecs_json_memberl	$FLECS/$FLECS/flecs.c	/^#define flecs_json_memberl(/;"	d	file:	signature:(buf,name)
flecs_json_membern	$FLECS/$FLECS/flecs.c	/^void flecs_json_membern($/;"	p	typeref:typename:void	file:	signature:(ecs_strbuf_t * buf,const char * name,int32_t name_len)
flecs_json_name_is_anonymous	$FLECS/$FLECS/flecs.c	/^bool flecs_json_name_is_anonymous($/;"	f	typeref:typename:bool	file:	signature:(const char * name)
flecs_json_new_id	$FLECS/$FLECS/flecs.c	/^ecs_entity_t flecs_json_new_id($/;"	f	typeref:typename:ecs_entity_t	file:	signature:(ecs_world_t * world,ecs_entity_t ser_id)
flecs_json_next	$FLECS/$FLECS/flecs.c	/^void flecs_json_next($/;"	p	typeref:typename:void	file:	signature:(ecs_strbuf_t * buf)
flecs_json_number	$FLECS/$FLECS/flecs.c	/^void flecs_json_number($/;"	p	typeref:typename:void	file:	signature:(ecs_strbuf_t * buf,double value)
flecs_json_object_pop	$FLECS/$FLECS/flecs.c	/^void flecs_json_object_pop($/;"	p	typeref:typename:void	file:	signature:(ecs_strbuf_t * buf)
flecs_json_object_push	$FLECS/$FLECS/flecs.c	/^void flecs_json_object_push($/;"	p	typeref:typename:void	file:	signature:(ecs_strbuf_t * buf)
flecs_json_op_to_primitive_kind	$FLECS/$FLECS/flecs.c	/^ecs_primitive_kind_t flecs_json_op_to_primitive_kind($/;"	p	typeref:typename:ecs_primitive_kind_t	file:	signature:(ecs_meta_type_op_kind_t kind)
flecs_json_parse	$FLECS/$FLECS/flecs.c	/^const char* flecs_json_parse($/;"	p	typeref:typename:const char *	file:	signature:(const char * json,ecs_json_token_t * token_kind,char * token)
flecs_json_parse_column	$FLECS/$FLECS/flecs.c	/^const char* flecs_json_parse_column($/;"	f	typeref:typename:const char *	file:	signature:(ecs_world_t * world,ecs_table_t * table,int32_t index,const char * json,char * token,ecs_vec_t * records,const ecs_from_json_desc_t * desc)
flecs_json_parse_entities	$FLECS/$FLECS/flecs.c	/^int flecs_json_parse_entities($/;"	f	typeref:typename:int	file:	signature:(ecs_world_t * world,ecs_allocator_t * a,ecs_table_t * table,ecs_entity_t parent,const char * json,char * token,ecs_vec_t * records,const ecs_from_json_desc_t * desc)
flecs_json_parse_large_string	$FLECS/$FLECS/flecs.c	/^const char* flecs_json_parse_large_string($/;"	p	typeref:typename:const char *	file:	signature:(const char * json,ecs_strbuf_t * buf)
flecs_json_parse_path	$FLECS/$FLECS/flecs.c	/^const char* flecs_json_parse_path($/;"	f	typeref:typename:const char *	file:	signature:(const ecs_world_t * world,const char * json,char * token,ecs_entity_t * out,const ecs_from_json_desc_t * desc)
flecs_json_parse_result	$FLECS/$FLECS/flecs.c	/^const char* flecs_json_parse_result($/;"	f	typeref:typename:const char *	file:	signature:(ecs_world_t * world,ecs_allocator_t * a,const char * json,char * token,ecs_vec_t * records,ecs_vec_t * columns_set,const ecs_from_json_desc_t * desc)
flecs_json_parse_table	$FLECS/$FLECS/flecs.c	/^ecs_table_t* flecs_json_parse_table($/;"	f	typeref:typename:ecs_table_t *	file:	signature:(ecs_world_t * world,const char * json,char * token,const ecs_from_json_desc_t * desc)
flecs_json_parse_values	$FLECS/$FLECS/flecs.c	/^const char* flecs_json_parse_values($/;"	f	typeref:typename:const char *	file:	signature:(ecs_world_t * world,ecs_table_t * table,const char * json,char * token,ecs_vec_t * records,ecs_vec_t * columns_set,const ecs_from_json_desc_t * desc)
flecs_json_path	$FLECS/$FLECS/flecs.c	/^void flecs_json_path($/;"	p	typeref:typename:void	file:	signature:(ecs_strbuf_t * buf,const ecs_world_t * world,ecs_entity_t e)
flecs_json_serialize_alerts	$FLECS/$FLECS/flecs.c	/^int flecs_json_serialize_alerts($/;"	f	typeref:typename:int	file:	signature:(const ecs_world_t * world,ecs_strbuf_t * buf,ecs_entity_t entity)
flecs_json_serialize_children_alerts	$FLECS/$FLECS/flecs.c	/^int flecs_json_serialize_children_alerts($/;"	f	typeref:typename:int	file:	signature:(const ecs_world_t * world,ecs_strbuf_t * buf,ecs_entity_t entity)
flecs_json_serialize_entity_alerts	$FLECS/$FLECS/flecs.c	/^int flecs_json_serialize_entity_alerts($/;"	f	typeref:typename:int	file:	signature:(const ecs_world_t * world,ecs_strbuf_t * buf,ecs_entity_t entity,const EcsAlertsActive * alerts,bool self)
flecs_json_serialize_id	$FLECS/$FLECS/flecs.c	/^void flecs_json_serialize_id($/;"	f	typeref:typename:void	file:	signature:(const ecs_world_t * world,ecs_id_t id,ecs_strbuf_t * buf)
flecs_json_serialize_id_label	$FLECS/$FLECS/flecs.c	/^void flecs_json_serialize_id_label($/;"	f	typeref:typename:void	file:	signature:(const ecs_world_t * world,ecs_id_t id,ecs_strbuf_t * buf)
flecs_json_serialize_id_str	$FLECS/$FLECS/flecs.c	/^void flecs_json_serialize_id_str($/;"	f	typeref:typename:void	file:	signature:(const ecs_world_t * world,ecs_id_t id,ecs_strbuf_t * buf)
flecs_json_serialize_iter_id_labels	$FLECS/$FLECS/flecs.c	/^void flecs_json_serialize_iter_id_labels($/;"	f	typeref:typename:void	file:	signature:(const ecs_world_t * world,const ecs_iter_t * it,ecs_strbuf_t * buf)
flecs_json_serialize_iter_ids	$FLECS/$FLECS/flecs.c	/^void flecs_json_serialize_iter_ids($/;"	f	typeref:typename:void	file:	signature:(const ecs_world_t * world,const ecs_iter_t * it,ecs_strbuf_t * buf)
flecs_json_serialize_iter_result	$FLECS/$FLECS/flecs.c	/^int flecs_json_serialize_iter_result($/;"	f	typeref:typename:int	file:	signature:(const ecs_world_t * world,const ecs_iter_t * it,ecs_strbuf_t * buf,const ecs_iter_to_json_desc_t * desc,const ecs_json_ser_idr_t * ser_idr)
flecs_json_serialize_iter_result_colors	$FLECS/$FLECS/flecs.c	/^void flecs_json_serialize_iter_result_colors($/;"	f	typeref:typename:void	file:	signature:(const ecs_iter_t * it,ecs_strbuf_t * buf,const ecs_json_ser_idr_t * ser_idr)
flecs_json_serialize_iter_result_columns	$FLECS/$FLECS/flecs.c	/^int flecs_json_serialize_iter_result_columns($/;"	f	typeref:typename:int	file:	signature:(const ecs_world_t * world,const ecs_iter_t * it,ecs_strbuf_t * buf,const ecs_iter_to_json_desc_t * desc)
flecs_json_serialize_iter_result_entities	$FLECS/$FLECS/flecs.c	/^void flecs_json_serialize_iter_result_entities($/;"	f	typeref:typename:void	file:	signature:(const ecs_world_t * world,const ecs_iter_t * it,ecs_strbuf_t * buf)
flecs_json_serialize_iter_result_entity_ids	$FLECS/$FLECS/flecs.c	/^void flecs_json_serialize_iter_result_entity_ids($/;"	f	typeref:typename:void	file:	signature:(const ecs_iter_t * it,ecs_strbuf_t * buf)
flecs_json_serialize_iter_result_entity_labels	$FLECS/$FLECS/flecs.c	/^void flecs_json_serialize_iter_result_entity_labels($/;"	f	typeref:typename:void	file:	signature:(const ecs_iter_t * it,ecs_strbuf_t * buf,const ecs_json_ser_idr_t * ser_idr)
flecs_json_serialize_iter_result_entity_names	$FLECS/$FLECS/flecs.c	/^bool flecs_json_serialize_iter_result_entity_names($/;"	f	typeref:typename:bool	file:	signature:(const ecs_iter_t * it,ecs_strbuf_t * buf)
flecs_json_serialize_iter_result_id_labels	$FLECS/$FLECS/flecs.c	/^void flecs_json_serialize_iter_result_id_labels($/;"	f	typeref:typename:void	file:	signature:(const ecs_world_t * world,const ecs_iter_t * it,ecs_strbuf_t * buf)
flecs_json_serialize_iter_result_ids	$FLECS/$FLECS/flecs.c	/^void flecs_json_serialize_iter_result_ids($/;"	f	typeref:typename:void	file:	signature:(const ecs_world_t * world,const ecs_iter_t * it,ecs_strbuf_t * buf)
flecs_json_serialize_iter_result_is_set	$FLECS/$FLECS/flecs.c	/^void flecs_json_serialize_iter_result_is_set($/;"	f	typeref:typename:void	file:	signature:(const ecs_iter_t * it,ecs_strbuf_t * buf)
flecs_json_serialize_iter_result_parent	$FLECS/$FLECS/flecs.c	/^void flecs_json_serialize_iter_result_parent($/;"	f	typeref:typename:void	file:	signature:(const ecs_world_t * world,const ecs_iter_t * it,ecs_strbuf_t * buf)
flecs_json_serialize_iter_result_sources	$FLECS/$FLECS/flecs.c	/^void flecs_json_serialize_iter_result_sources($/;"	f	typeref:typename:void	file:	signature:(const ecs_world_t * world,const ecs_iter_t * it,ecs_strbuf_t * buf)
flecs_json_serialize_iter_result_table_type	$FLECS/$FLECS/flecs.c	/^void flecs_json_serialize_iter_result_table_type($/;"	f	typeref:typename:void	file:	signature:(const ecs_world_t * world,const ecs_iter_t * it,ecs_strbuf_t * buf,const ecs_iter_to_json_desc_t * desc)
flecs_json_serialize_iter_result_values	$FLECS/$FLECS/flecs.c	/^int flecs_json_serialize_iter_result_values($/;"	f	typeref:typename:int	file:	signature:(const ecs_world_t * world,const ecs_iter_t * it,ecs_strbuf_t * buf)
flecs_json_serialize_iter_result_variable_ids	$FLECS/$FLECS/flecs.c	/^void flecs_json_serialize_iter_result_variable_ids($/;"	f	typeref:typename:void	file:	signature:(const ecs_iter_t * it,ecs_strbuf_t * buf)
flecs_json_serialize_iter_result_variable_labels	$FLECS/$FLECS/flecs.c	/^void flecs_json_serialize_iter_result_variable_labels($/;"	f	typeref:typename:void	file:	signature:(const ecs_world_t * world,const ecs_iter_t * it,ecs_strbuf_t * buf)
flecs_json_serialize_iter_result_variables	$FLECS/$FLECS/flecs.c	/^void flecs_json_serialize_iter_result_variables($/;"	f	typeref:typename:void	file:	signature:(const ecs_world_t * world,const ecs_iter_t * it,ecs_strbuf_t * buf)
flecs_json_serialize_iter_variables	$FLECS/$FLECS/flecs.c	/^void flecs_json_serialize_iter_variables(ecs_iter_t *it, ecs_strbuf_t *buf) {$/;"	f	typeref:typename:void	file:	signature:(ecs_iter_t * it,ecs_strbuf_t * buf)
flecs_json_serialize_matches	$FLECS/$FLECS/flecs.c	/^int flecs_json_serialize_matches($/;"	f	typeref:typename:int	file:	signature:(const ecs_world_t * world,ecs_strbuf_t * buf,ecs_entity_t entity)
flecs_json_serialize_refs	$FLECS/$FLECS/flecs.c	/^int flecs_json_serialize_refs($/;"	f	typeref:typename:int	file:	signature:(const ecs_world_t * world,ecs_strbuf_t * buf,ecs_entity_t entity,ecs_entity_t relationship)
flecs_json_serialize_refs_idr	$FLECS/$FLECS/flecs.c	/^int flecs_json_serialize_refs_idr($/;"	f	typeref:typename:int	file:	signature:(const ecs_world_t * world,ecs_strbuf_t * buf,ecs_id_record_t * idr)
flecs_json_serialize_type_info	$FLECS/$FLECS/flecs.c	/^void flecs_json_serialize_type_info($/;"	f	typeref:typename:void	file:	signature:(const ecs_world_t * world,const ecs_iter_t * it,ecs_strbuf_t * buf)
flecs_json_skip_array	$FLECS/$FLECS/flecs.c	/^const char* flecs_json_skip_array($/;"	p	typeref:typename:const char *	file:	signature:(const char * json,char * token,const ecs_from_json_desc_t * desc)
flecs_json_skip_id	$FLECS/$FLECS/flecs.c	/^bool flecs_json_skip_id($/;"	f	typeref:typename:bool	file:	signature:(const ecs_world_t * world,ecs_id_t id,const ecs_entity_to_json_desc_t * desc,ecs_entity_t ent,ecs_entity_t inst,ecs_entity_t * pred_out,ecs_entity_t * obj_out,ecs_entity_t * role_out,bool * hidden_out)
flecs_json_skip_object	$FLECS/$FLECS/flecs.c	/^const char* flecs_json_skip_object($/;"	p	typeref:typename:const char *	file:	signature:(const char * json,char * token,const ecs_from_json_desc_t * desc)
flecs_json_skip_variable	$FLECS/$FLECS/flecs.c	/^bool flecs_json_skip_variable($/;"	f	typeref:typename:bool	file:	signature:(const char * name)
flecs_json_string	$FLECS/$FLECS/flecs.c	/^void flecs_json_string($/;"	p	typeref:typename:void	file:	signature:(ecs_strbuf_t * buf,const char * value)
flecs_json_string_escape	$FLECS/$FLECS/flecs.c	/^void flecs_json_string_escape($/;"	p	typeref:typename:void	file:	signature:(ecs_strbuf_t * buf,const char * value)
flecs_json_token_str	$FLECS/$FLECS/flecs.c	/^const char* flecs_json_token_str($/;"	f	typeref:typename:const char *	file:	signature:(ecs_json_token_t token_kind)
flecs_json_true	$FLECS/$FLECS/flecs.c	/^void flecs_json_true($/;"	p	typeref:typename:void	file:	signature:(ecs_strbuf_t * buf)
flecs_largest_type	$FLECS/$FLECS/flecs.c	/^ecs_entity_t flecs_largest_type($/;"	f	typeref:typename:ecs_entity_t	file:	signature:(const EcsPrimitive * type)
flecs_load_from_file	$FLECS/$FLECS/flecs.c	/^char* flecs_load_from_file($/;"	f	typeref:typename:char *	file:	signature:(const char * filename)
flecs_log2	$FLECS/$FLECS/flecs.c	/^uint8_t flecs_log2(uint32_t v) {$/;"	f	typeref:typename:uint8_t	file:	signature:(uint32_t v)
flecs_log_addons	$FLECS/$FLECS/flecs.c	/^void flecs_log_addons(void) {$/;"	f	typeref:typename:void	file:	signature:(void)
flecs_log_msg	$FLECS/$FLECS/flecs.c	/^void flecs_log_msg($/;"	f	typeref:typename:void	file:	signature:(int32_t level,const char * file,int32_t line,const char * msg)
flecs_map_bucket_add	$FLECS/$FLECS/flecs.c	/^ecs_map_val_t* flecs_map_bucket_add($/;"	f	typeref:typename:ecs_map_val_t *	file:	signature:(ecs_block_allocator_t * allocator,ecs_bucket_t * bucket,ecs_map_key_t key)
flecs_map_bucket_clear	$FLECS/$FLECS/flecs.c	/^void flecs_map_bucket_clear($/;"	f	typeref:typename:void	file:	signature:(ecs_block_allocator_t * allocator,ecs_bucket_t * bucket)
flecs_map_bucket_get	$FLECS/$FLECS/flecs.c	/^ecs_map_val_t* flecs_map_bucket_get($/;"	f	typeref:typename:ecs_map_val_t *	file:	signature:(ecs_bucket_t * bucket,ecs_map_key_t key)
flecs_map_bucket_remove	$FLECS/$FLECS/flecs.c	/^ecs_map_val_t flecs_map_bucket_remove($/;"	f	typeref:typename:ecs_map_val_t	file:	signature:(ecs_map_t * map,ecs_bucket_t * bucket,ecs_map_key_t key)
flecs_map_get_bucket	$FLECS/$FLECS/flecs.c	/^ecs_bucket_t* flecs_map_get_bucket($/;"	f	typeref:typename:ecs_bucket_t *	file:	signature:(const ecs_map_t * map,ecs_map_key_t key)
flecs_map_get_bucket_count	$FLECS/$FLECS/flecs.c	/^int32_t flecs_map_get_bucket_count($/;"	f	typeref:typename:int32_t	file:	signature:(int32_t count)
flecs_map_get_bucket_index	$FLECS/$FLECS/flecs.c	/^int32_t flecs_map_get_bucket_index($/;"	f	typeref:typename:int32_t	file:	signature:(uint16_t bucket_shift,ecs_map_key_t key)
flecs_map_get_bucket_shift	$FLECS/$FLECS/flecs.c	/^uint8_t flecs_map_get_bucket_shift ($/;"	f	typeref:typename:uint8_t	file:	signature:(int32_t bucket_count)
flecs_map_rehash	$FLECS/$FLECS/flecs.c	/^void flecs_map_rehash($/;"	f	typeref:typename:void	file:	signature:(ecs_map_t * map,int32_t count)
flecs_marked_id_push	$FLECS/$FLECS/flecs.c	/^void flecs_marked_id_push($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_id_record_t * idr,ecs_entity_t action,bool delete_id)
flecs_member_metric_init	$FLECS/$FLECS/flecs.c	/^int flecs_member_metric_init($/;"	f	typeref:typename:int	file:	signature:(ecs_world_t * world,ecs_entity_t metric,const ecs_metric_desc_t * desc)
flecs_member_on_set	$FLECS/$FLECS/flecs.c	/^void flecs_member_on_set(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:	signature:(ecs_iter_t * it)
flecs_member_range_overlaps	$FLECS/$FLECS/flecs.c	/^bool flecs_member_range_overlaps($/;"	f	typeref:typename:bool	file:	signature:(const ecs_member_value_range_t * range,const ecs_member_value_range_t * with)
flecs_meta_add_bitmask_constant	$FLECS/$FLECS/flecs.c	/^int flecs_meta_add_bitmask_constant($/;"	f	typeref:typename:int	file:	signature:(ecs_meta_cursor_t * cursor,ecs_meta_type_op_t * op,void * out,const char * value)
flecs_meta_call	$FLECS/$FLECS/flecs.c	/^int flecs_meta_call($/;"	f	typeref:typename:int	file:	signature:(ecs_world_t * world,ecs_value_stack_t * stack,const char * name,const char * expr,const char * ptr,ecs_meta_cursor_t * cur,const char * function)
flecs_meta_conversion_error	$FLECS/$FLECS/flecs.c	/^void flecs_meta_conversion_error($/;"	f	typeref:typename:void	file:	signature:(ecs_meta_cursor_t * cursor,ecs_meta_type_op_t * op,const char * from)
flecs_meta_cursor_get_op	$FLECS/$FLECS/flecs.c	/^ecs_meta_type_op_t* flecs_meta_cursor_get_op($/;"	f	typeref:typename:ecs_meta_type_op_t *	file:	signature:(ecs_meta_scope_t * scope)
flecs_meta_cursor_get_ptr	$FLECS/$FLECS/flecs.c	/^ecs_meta_type_op_t* flecs_meta_cursor_get_ptr($/;"	f	typeref:typename:ecs_meta_type_op_t *	file:	signature:(const ecs_world_t * world,ecs_meta_scope_t * scope)
flecs_meta_cursor_get_scope	$FLECS/$FLECS/flecs.c	/^ecs_meta_scope_t* flecs_meta_cursor_get_scope($/;"	f	typeref:typename:ecs_meta_scope_t *	file:	signature:(const ecs_meta_cursor_t * cursor)
flecs_meta_cursor_lookup	$FLECS/$FLECS/flecs.c	/^int flecs_meta_cursor_lookup($/;"	f	typeref:typename:int	file:	signature:(ecs_meta_cursor_t * cursor,const char * value,ecs_entity_t * out)
flecs_meta_cursor_push_type	$FLECS/$FLECS/flecs.c	/^int flecs_meta_cursor_push_type($/;"	f	typeref:typename:int	file:	signature:(const ecs_world_t * world,ecs_meta_scope_t * scope,ecs_entity_t type,void * ptr)
flecs_meta_cursor_restore_scope	$FLECS/$FLECS/flecs.c	/^ecs_meta_scope_t* flecs_meta_cursor_restore_scope($/;"	f	typeref:typename:ecs_meta_scope_t *	file:	signature:(ecs_meta_cursor_t * cursor,const ecs_meta_scope_t * scope)
flecs_meta_op_kind_str	$FLECS/$FLECS/flecs.c	/^const char* flecs_meta_op_kind_str($/;"	f	typeref:typename:const char *	file:	signature:(ecs_meta_type_op_kind_t kind)
flecs_meta_ops_add	$FLECS/$FLECS/flecs.c	/^ecs_meta_type_op_t* flecs_meta_ops_add(ecs_vec_t *ops, ecs_meta_type_op_kind_t kind) {$/;"	f	typeref:typename:ecs_meta_type_op_t *	file:	signature:(ecs_vec_t * ops,ecs_meta_type_op_kind_t kind)
flecs_meta_ops_get	$FLECS/$FLECS/flecs.c	/^ecs_meta_type_op_t* flecs_meta_ops_get(ecs_vec_t *ops, int32_t index) {$/;"	f	typeref:typename:ecs_meta_type_op_t *	file:	signature:(ecs_vec_t * ops,int32_t index)
flecs_meta_parse_bitmask	$FLECS/$FLECS/flecs.c	/^int flecs_meta_parse_bitmask($/;"	f	typeref:typename:int	file:	signature:(ecs_meta_cursor_t * cursor,ecs_meta_type_op_t * op,void * out,const char * value)
flecs_meta_primitive_to_op_kind	$FLECS/$FLECS/flecs.c	/^ecs_meta_type_op_kind_t flecs_meta_primitive_to_op_kind(ecs_primitive_kind_t kind) {$/;"	f	typeref:typename:ecs_meta_type_op_kind_t	signature:(ecs_primitive_kind_t kind)
flecs_meta_serialize_array	$FLECS/$FLECS/flecs.c	/^int flecs_meta_serialize_array($/;"	f	typeref:typename:int	file:	signature:(ecs_world_t * world,ecs_entity_t type,ecs_size_t offset,ecs_vec_t * ops)
flecs_meta_serialize_array_component	$FLECS/$FLECS/flecs.c	/^int flecs_meta_serialize_array_component($/;"	f	typeref:typename:int	file:	signature:(ecs_world_t * world,ecs_entity_t type,ecs_vec_t * ops)
flecs_meta_serialize_bitmask	$FLECS/$FLECS/flecs.c	/^int flecs_meta_serialize_bitmask($/;"	f	typeref:typename:int	file:	signature:(ecs_world_t * world,ecs_entity_t type,ecs_size_t offset,ecs_vec_t * ops)
flecs_meta_serialize_component	$FLECS/$FLECS/flecs.c	/^int flecs_meta_serialize_component($/;"	f	typeref:typename:int	file:	signature:(ecs_world_t * world,ecs_entity_t type,ecs_vec_t * ops)
flecs_meta_serialize_custom_type	$FLECS/$FLECS/flecs.c	/^int flecs_meta_serialize_custom_type($/;"	f	typeref:typename:int	file:	signature:(ecs_world_t * world,ecs_entity_t type,ecs_size_t offset,ecs_vec_t * ops)
flecs_meta_serialize_enum	$FLECS/$FLECS/flecs.c	/^int flecs_meta_serialize_enum($/;"	f	typeref:typename:int	file:	signature:(ecs_world_t * world,ecs_entity_t type,ecs_size_t offset,ecs_vec_t * ops)
flecs_meta_serialize_primitive	$FLECS/$FLECS/flecs.c	/^int flecs_meta_serialize_primitive($/;"	f	typeref:typename:int	file:	signature:(ecs_world_t * world,ecs_entity_t type,ecs_size_t offset,ecs_vec_t * ops)
flecs_meta_serialize_struct	$FLECS/$FLECS/flecs.c	/^int flecs_meta_serialize_struct($/;"	f	typeref:typename:int	file:	signature:(ecs_world_t * world,ecs_entity_t type,ecs_size_t offset,ecs_vec_t * ops)
flecs_meta_serialize_type	$FLECS/$FLECS/flecs.c	/^int flecs_meta_serialize_type($/;"	p	typeref:typename:int	file:	signature:(ecs_world_t * world,ecs_entity_t type,ecs_size_t offset,ecs_vec_t * ops)
flecs_meta_serialize_vector	$FLECS/$FLECS/flecs.c	/^int flecs_meta_serialize_vector($/;"	f	typeref:typename:int	file:	signature:(ecs_world_t * world,ecs_entity_t type,ecs_size_t offset,ecs_vec_t * ops)
flecs_meta_to_float	$FLECS/$FLECS/flecs.c	/^double flecs_meta_to_float($/;"	f	typeref:typename:double	file:	signature:(ecs_meta_type_op_kind_t kind,const void * ptr)
flecs_meta_type_size	$FLECS/$FLECS/flecs.c	/^ecs_size_t flecs_meta_type_size(ecs_world_t *world, ecs_entity_t type) {$/;"	f	typeref:typename:ecs_size_t	file:	signature:(ecs_world_t * world,ecs_entity_t type)
flecs_metric_print	$FLECS/$FLECS/flecs.c	/^void flecs_metric_print($/;"	f	typeref:typename:void	file:	signature:(const char * name,ecs_float_t value)
flecs_metrics_on_id_metric	$FLECS/$FLECS/flecs.c	/^static void flecs_metrics_on_id_metric(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:	signature:(ecs_iter_t * it)
flecs_metrics_on_member_metric	$FLECS/$FLECS/flecs.c	/^static void flecs_metrics_on_member_metric(ecs_iter_t *it) {$/;"	f	file:	signature:(ecs_iter_t * it)
flecs_metrics_on_oneof_metric	$FLECS/$FLECS/flecs.c	/^static void flecs_metrics_on_oneof_metric(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:	signature:(ecs_iter_t * it)
flecs_modified_id_if	$FLECS/$FLECS/flecs.c	/^void flecs_modified_id_if($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_entity_t entity,ecs_id_t id,bool owned)
flecs_monitor_mark_dirty	$FLECS/$FLECS/flecs.c	/^void flecs_monitor_mark_dirty($/;"	p	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_entity_t id)
flecs_monitor_register	$FLECS/$FLECS/flecs.c	/^void flecs_monitor_register($/;"	p	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_entity_t id,ecs_query_t * query)
flecs_monitor_unregister	$FLECS/$FLECS/flecs.c	/^void flecs_monitor_unregister($/;"	p	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_entity_t id,ecs_query_t * query)
flecs_move_entity	$FLECS/$FLECS/flecs.c	/^void flecs_move_entity($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_entity_t entity,ecs_record_t * record,ecs_table_t * dst_table,ecs_table_diff_t * diff,bool ctor,ecs_flags32_t evt_flags)
flecs_move_ptr_w_id	$FLECS/$FLECS/flecs.c	/^void flecs_move_ptr_w_id($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_stage_t * stage,ecs_entity_t entity,ecs_id_t id,size_t size,void * ptr,ecs_cmd_kind_t cmd_kind)
flecs_multi_observer_builtin_run	$FLECS/$FLECS/flecs.c	/^void flecs_multi_observer_builtin_run(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:	signature:(ecs_iter_t * it)
flecs_multi_observer_init	$FLECS/$FLECS/flecs.c	/^int flecs_multi_observer_init($/;"	f	typeref:typename:int	file:	signature:(ecs_world_t * world,ecs_observer_t * observer,const ecs_observer_desc_t * desc)
flecs_multi_observer_invoke	$FLECS/$FLECS/flecs.c	/^bool flecs_multi_observer_invoke(ecs_iter_t *it) {$/;"	f	typeref:typename:bool	file:	signature:(ecs_iter_t * it)
flecs_multi_observer_yield_existing	$FLECS/$FLECS/flecs.c	/^void flecs_multi_observer_yield_existing($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_observer_t * observer)
flecs_n_term_match_table	$FLECS/$FLECS/flecs.c	/^bool flecs_n_term_match_table($/;"	f	typeref:typename:bool	file:	signature:(ecs_world_t * world,const ecs_term_t * term,const ecs_table_t * table,ecs_entity_t type_id,ecs_oper_kind_t oper,ecs_id_t * id_out,int32_t * column_out,ecs_entity_t * subject_out,int32_t * match_index_out,bool first,ecs_flags32_t iter_flags)
flecs_name_from_symbol	$FLECS/$FLECS/flecs.c	/^const char* flecs_name_from_symbol($/;"	p	typeref:typename:const char *	file:	signature:(ecs_world_t * world,const char * type_name)
flecs_name_index_compare	$FLECS/$FLECS/flecs.c	/^int flecs_name_index_compare($/;"	f	typeref:typename:int	file:	signature:(const void * ptr1,const void * ptr2)
flecs_name_index_copy	$FLECS/$FLECS/flecs.c	/^ecs_hashmap_t* flecs_name_index_copy($/;"	p	typeref:typename:ecs_hashmap_t *	file:	signature:(ecs_hashmap_t * dst)
flecs_name_index_ensure	$FLECS/$FLECS/flecs.c	/^void flecs_name_index_ensure($/;"	p	typeref:typename:void	file:	signature:(ecs_hashmap_t * map,uint64_t id,const char * name,ecs_size_t length,uint64_t hash)
flecs_name_index_find	$FLECS/$FLECS/flecs.c	/^uint64_t flecs_name_index_find($/;"	p	typeref:typename:uint64_t	file:	signature:(const ecs_hashmap_t * map,const char * name,ecs_size_t length,uint64_t hash)
flecs_name_index_find_ptr	$FLECS/$FLECS/flecs.c	/^const uint64_t* flecs_name_index_find_ptr($/;"	p	typeref:typename:const uint64_t *	file:	signature:(const ecs_hashmap_t * map,const char * name,ecs_size_t length,uint64_t hash)
flecs_name_index_fini	$FLECS/$FLECS/flecs.c	/^void flecs_name_index_fini($/;"	p	typeref:typename:void	file:	signature:(ecs_hashmap_t * map)
flecs_name_index_free	$FLECS/$FLECS/flecs.c	/^void flecs_name_index_free($/;"	p	typeref:typename:void	file:	signature:(ecs_hashmap_t * map)
flecs_name_index_hash	$FLECS/$FLECS/flecs.c	/^uint64_t flecs_name_index_hash($/;"	f	typeref:typename:uint64_t	file:	signature:(const void * ptr)
flecs_name_index_init	$FLECS/$FLECS/flecs.c	/^void flecs_name_index_init($/;"	p	typeref:typename:void	file:	signature:(ecs_hashmap_t * hm,ecs_allocator_t * allocator)
flecs_name_index_init_if	$FLECS/$FLECS/flecs.c	/^void flecs_name_index_init_if($/;"	p	typeref:typename:void	file:	signature:(ecs_hashmap_t * hm,ecs_allocator_t * allocator)
flecs_name_index_is_init	$FLECS/$FLECS/flecs.c	/^bool flecs_name_index_is_init($/;"	p	typeref:typename:bool	file:	signature:(const ecs_hashmap_t * hm)
flecs_name_index_new	$FLECS/$FLECS/flecs.c	/^ecs_hashmap_t* flecs_name_index_new($/;"	p	typeref:typename:ecs_hashmap_t *	file:	signature:(ecs_world_t * world,ecs_allocator_t * allocator)
flecs_name_index_remove	$FLECS/$FLECS/flecs.c	/^void flecs_name_index_remove($/;"	p	typeref:typename:void	file:	signature:(ecs_hashmap_t * map,uint64_t id,uint64_t hash)
flecs_name_index_update_name	$FLECS/$FLECS/flecs.c	/^void flecs_name_index_update_name($/;"	p	typeref:typename:void	file:	signature:(ecs_hashmap_t * map,uint64_t e,uint64_t hash,const char * name)
flecs_name_is_id	$FLECS/$FLECS/flecs.c	/^bool flecs_name_is_id($/;"	p	typeref:typename:bool	file:	signature:(const char * name)
flecs_name_to_id	$FLECS/$FLECS/flecs.c	/^ecs_entity_t flecs_name_to_id($/;"	p	typeref:typename:ecs_entity_t	file:	signature:(const ecs_world_t * world,const char * name)
flecs_new_entity	$FLECS/$FLECS/flecs.c	/^ecs_record_t* flecs_new_entity($/;"	f	typeref:typename:ecs_record_t *	file:	signature:(ecs_world_t * world,ecs_entity_t entity,ecs_record_t * record,ecs_table_t * table,ecs_table_diff_t * diff,bool ctor,ecs_flags32_t evt_flags)
flecs_next_pow_of_2	$FLECS/$FLECS/flecs.c	/^int32_t flecs_next_pow_of_2($/;"	p	typeref:typename:int32_t	file:	signature:(int32_t n)
flecs_notify_on_add	$FLECS/$FLECS/flecs.c	/^void flecs_notify_on_add($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_table_t * table,ecs_table_t * other_table,int32_t row,int32_t count,const ecs_type_t * added,ecs_flags32_t flags)
flecs_notify_on_remove	$FLECS/$FLECS/flecs.c	/^void flecs_notify_on_remove($/;"	p	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_table_t * table,ecs_table_t * other_table,int32_t row,int32_t count,const ecs_type_t * diff)
flecs_notify_on_set	$FLECS/$FLECS/flecs.c	/^void flecs_notify_on_set($/;"	p	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_table_t * table,int32_t row,int32_t count,ecs_type_t * type,bool owned)
flecs_notify_tables	$FLECS/$FLECS/flecs.c	/^void flecs_notify_tables($/;"	p	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_id_t id,ecs_table_event_t * event)
flecs_observable_fini	$FLECS/$FLECS/flecs.c	/^void flecs_observable_fini($/;"	p	typeref:typename:void	file:	signature:(ecs_observable_t * observable)
flecs_observable_init	$FLECS/$FLECS/flecs.c	/^void flecs_observable_init($/;"	p	typeref:typename:void	file:	signature:(ecs_observable_t * observable)
flecs_observer_fini	$FLECS/$FLECS/flecs.c	/^void flecs_observer_fini($/;"	p	typeref:typename:void	file:	signature:(ecs_observer_t * observer)
flecs_observer_invoke	$FLECS/$FLECS/flecs.c	/^void flecs_observer_invoke($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_iter_t * it,ecs_observer_t * observer,ecs_iter_action_t callback,int32_t term_index,bool simple_result)
flecs_observers_exist	$FLECS/$FLECS/flecs.c	/^bool flecs_observers_exist($/;"	p	typeref:typename:bool	file:	signature:(ecs_observable_t * observable,ecs_id_t id,ecs_entity_t event)
flecs_observers_invoke	$FLECS/$FLECS/flecs.c	/^void flecs_observers_invoke($/;"	p	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_map_t * observers,ecs_iter_t * it,ecs_table_t * table,ecs_entity_t trav,int32_t evtx)
flecs_offset_iter	$FLECS/$FLECS/flecs.c	/^void flecs_offset_iter($/;"	f	typeref:typename:void	file:	signature:(ecs_iter_t * it,int32_t offset)
flecs_on_component	$FLECS/$FLECS/flecs.c	/^void flecs_on_component(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:	signature:(ecs_iter_t * it)
flecs_on_delete	$FLECS/$FLECS/flecs.c	/^void flecs_on_delete($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_id_t id,ecs_entity_t action,bool delete_id)
flecs_on_delete_clear_ids	$FLECS/$FLECS/flecs.c	/^bool flecs_on_delete_clear_ids($/;"	f	typeref:typename:bool	file:	signature:(ecs_world_t * world)
flecs_on_delete_clear_tables	$FLECS/$FLECS/flecs.c	/^bool flecs_on_delete_clear_tables($/;"	f	typeref:typename:bool	file:	signature:(ecs_world_t * world)
flecs_on_delete_mark	$FLECS/$FLECS/flecs.c	/^bool flecs_on_delete_mark($/;"	f	typeref:typename:bool	file:	signature:(ecs_world_t * world,ecs_id_t id,ecs_entity_t action,bool delete_id)
flecs_on_event_iterable_init	$FLECS/$FLECS/flecs.c	/^void flecs_on_event_iterable_init($/;"	f	typeref:typename:void	file:	signature:(const ecs_world_t * world,const ecs_poly_t * poly,ecs_iter_t * it,ecs_term_t * filter)
flecs_on_set_rest	$FLECS/$FLECS/flecs.c	/^void flecs_on_set_rest(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:	signature:(ecs_iter_t * it)
flecs_on_set_symbol	$FLECS/$FLECS/flecs.c	/^void flecs_on_set_symbol(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:	signature:(ecs_iter_t * it)
flecs_on_symmetric_add_remove	$FLECS/$FLECS/flecs.c	/^void flecs_on_symmetric_add_remove(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:	signature:(ecs_iter_t * it)
flecs_oneof_metric_init	$FLECS/$FLECS/flecs.c	/^int flecs_oneof_metric_init($/;"	f	typeref:typename:int	file:	signature:(ecs_world_t * world,ecs_entity_t metric,ecs_entity_t scope,const ecs_metric_desc_t * desc)
flecs_op_ctx	$FLECS/$FLECS/flecs.c	/^#define flecs_op_ctx(ctx, op_kind) (&flecs_op_ctx_/;"	d	file:	signature:(ctx,op_kind)
flecs_op_ctx_	$FLECS/$FLECS/flecs.c	/^ecs_rule_op_ctx_t* flecs_op_ctx_($/;"	f	typeref:typename:ecs_rule_op_ctx_t *	file:	signature:(const ecs_rule_run_ctx_t * ctx)
flecs_oper_precedence	$FLECS/$FLECS/flecs.c	/^int flecs_oper_precedence($/;"	f	typeref:typename:int	file:	signature:(ecs_expr_oper_t left,ecs_expr_oper_t right)
flecs_oper_valid_for_type	$FLECS/$FLECS/flecs.c	/^bool flecs_oper_valid_for_type($/;"	f	typeref:typename:bool	file:	signature:(ecs_entity_t type,ecs_expr_oper_t op)
flecs_override	$FLECS/$FLECS/flecs.c	/^void* flecs_override($/;"	f	typeref:typename:void *	file:	signature:(ecs_iter_t * it,const ecs_type_t * emit_ids,ecs_id_t id,ecs_table_t * table,ecs_id_record_t * idr)
flecs_override_copy	$FLECS/$FLECS/flecs.c	/^void flecs_override_copy($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_table_t * table,const ecs_type_info_t * ti,void * dst,const void * src,int32_t offset,int32_t count)
flecs_parse_annotation	$FLECS/$FLECS/flecs.c	/^const char* flecs_parse_annotation($/;"	f	typeref:typename:const char *	file:	signature:(const char * name,const char * sig,int64_t column,const char * ptr,ecs_inout_kind_t * inout_kind_out)
flecs_parse_arguments	$FLECS/$FLECS/flecs.c	/^const char* flecs_parse_arguments($/;"	f	typeref:typename:const char *	file:	signature:(const ecs_world_t * world,const char * name,const char * expr,int64_t column,const char * ptr,char * token,ecs_term_t * term,ecs_term_id_t * extra_args)
flecs_parse_discover_type	$FLECS/$FLECS/flecs.c	/^ecs_entity_t flecs_parse_discover_type($/;"	f	typeref:typename:ecs_entity_t	file:	signature:(ecs_world_t * world,const char * name,const char * expr,const char * ptr,ecs_entity_t input_type,const ecs_parse_expr_desc_t * desc)
flecs_parse_expr	$FLECS/$FLECS/flecs.c	/^const char* flecs_parse_expr($/;"	p	typeref:typename:const char *	file:	signature:(ecs_world_t * world,ecs_value_stack_t * stack,const char * ptr,ecs_value_t * value,ecs_expr_oper_t op,const ecs_parse_expr_desc_t * desc)
flecs_parse_identifier	$FLECS/$FLECS/flecs.c	/^int flecs_parse_identifier($/;"	f	typeref:typename:int	file:	signature:(const char * token,ecs_term_id_t * out)
flecs_parse_interpolated_str	$FLECS/$FLECS/flecs.c	/^const char* flecs_parse_interpolated_str($/;"	f	typeref:typename:const char *	file:	signature:(const char * ptr,char * token_out)
flecs_parse_is_float	$FLECS/$FLECS/flecs.c	/^bool flecs_parse_is_float($/;"	f	typeref:typename:bool	file:	signature:(const char * ptr)
flecs_parse_multiline_string	$FLECS/$FLECS/flecs.c	/^const char* flecs_parse_multiline_string($/;"	f	typeref:typename:const char *	file:	signature:(ecs_meta_cursor_t * cur,const char * name,const char * expr,const char * ptr)
flecs_parse_operator	$FLECS/$FLECS/flecs.c	/^ecs_oper_kind_t flecs_parse_operator($/;"	f	typeref:typename:ecs_oper_kind_t	file:	signature:(char ch)
flecs_parse_role	$FLECS/$FLECS/flecs.c	/^ecs_entity_t flecs_parse_role($/;"	f	typeref:typename:ecs_entity_t	file:	signature:(const char * name,const char * sig,int64_t column,const char * token)
flecs_parse_set_token	$FLECS/$FLECS/flecs.c	/^uint8_t flecs_parse_set_token($/;"	f	typeref:typename:uint8_t	file:	signature:(const char * token)
flecs_parse_term	$FLECS/$FLECS/flecs.c	/^const char* flecs_parse_term($/;"	f	typeref:typename:const char *	file:	signature:(const ecs_world_t * world,const char * name,const char * expr,ecs_term_t * term_out,ecs_term_id_t * extra_args)
flecs_parse_term_flags	$FLECS/$FLECS/flecs.c	/^const char* flecs_parse_term_flags($/;"	f	typeref:typename:const char *	file:	signature:(const ecs_world_t * world,const char * name,const char * expr,int64_t column,const char * ptr,char * token,ecs_term_id_t * id,char tok_end)
flecs_parse_var_name	$FLECS/$FLECS/flecs.c	/^const char* flecs_parse_var_name($/;"	f	typeref:typename:const char *	file:	signature:(const char * ptr,char * token_out)
flecs_parser_unexpected_char	$FLECS/$FLECS/flecs.c	/^void flecs_parser_unexpected_char($/;"	f	typeref:typename:void	file:	signature:(const char * name,const char * expr,const char * ptr,char ch)
flecs_path_append	$FLECS/$FLECS/flecs.c	/^bool flecs_path_append($/;"	f	typeref:typename:bool	file:	signature:(const ecs_world_t * world,ecs_entity_t parent,ecs_entity_t child,const char * sep,const char * prefix,ecs_strbuf_t * buf)
flecs_path_elem	$FLECS/$FLECS/flecs.c	/^const char* flecs_path_elem($/;"	f	typeref:typename:const char *	file:	signature:(const char * path,const char * sep,int32_t * len)
flecs_pipeline_build	$FLECS/$FLECS/flecs.c	/^bool flecs_pipeline_build($/;"	f	typeref:typename:bool	file:	signature:(ecs_world_t * world,ecs_pipeline_state_t * pq)
flecs_pipeline_check_term	$FLECS/$FLECS/flecs.c	/^bool flecs_pipeline_check_term($/;"	f	typeref:typename:bool	file:	signature:(ecs_world_t * world,ecs_term_t * term,bool is_active,ecs_write_state_t * write_state)
flecs_pipeline_check_terms	$FLECS/$FLECS/flecs.c	/^bool flecs_pipeline_check_terms($/;"	f	typeref:typename:bool	file:	signature:(ecs_world_t * world,ecs_filter_t * filter,bool is_active,ecs_write_state_t * ws)
flecs_pipeline_free	$FLECS/$FLECS/flecs.c	/^static void flecs_pipeline_free($/;"	f	typeref:typename:void	file:	signature:(ecs_pipeline_state_t * p)
flecs_pipeline_get_write_state	$FLECS/$FLECS/flecs.c	/^ecs_write_kind_t flecs_pipeline_get_write_state($/;"	f	typeref:typename:ecs_write_kind_t	file:	signature:(ecs_write_state_t * write_state,ecs_id_t id)
flecs_pipeline_monitor_import	$FLECS/$FLECS/flecs.c	/^void flecs_pipeline_monitor_import($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world)
flecs_pipeline_next_system	$FLECS/$FLECS/flecs.c	/^void flecs_pipeline_next_system($/;"	f	typeref:typename:void	file:	signature:(ecs_pipeline_state_t * pq)
flecs_pipeline_reset_write_state	$FLECS/$FLECS/flecs.c	/^void flecs_pipeline_reset_write_state($/;"	f	typeref:typename:void	file:	signature:(ecs_write_state_t * write_state)
flecs_pipeline_set_write_state	$FLECS/$FLECS/flecs.c	/^void flecs_pipeline_set_write_state($/;"	f	typeref:typename:void	file:	signature:(ecs_write_state_t * write_state,ecs_id_t id)
flecs_pipeline_stats_to_json	$FLECS/$FLECS/flecs.c	/^void flecs_pipeline_stats_to_json($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_strbuf_t * reply,const EcsPipelineStats * stats)
flecs_pipeline_term_system	$FLECS/$FLECS/flecs.c	/^EcsPoly* flecs_pipeline_term_system($/;"	f	typeref:typename:EcsPoly *	file:	signature:(ecs_iter_t * it)
flecs_pipeline_update	$FLECS/$FLECS/flecs.c	/^bool flecs_pipeline_update($/;"	p	typeref:typename:bool	file:	signature:(ecs_world_t * world,ecs_pipeline_state_t * pq,bool start_of_frame)
flecs_plecs_parse	$FLECS/$FLECS/flecs.c	/^int flecs_plecs_parse($/;"	p	typeref:typename:int	file:	signature:(ecs_world_t * world,const char * name,const char * expr,ecs_vars_t * vars,ecs_entity_t script,ecs_entity_t instance)
flecs_process_empty_queries	$FLECS/$FLECS/flecs.c	/^void flecs_process_empty_queries($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world)
flecs_process_pending_tables	$FLECS/$FLECS/flecs.c	/^void flecs_process_pending_tables($/;"	p	typeref:typename:void	file:	signature:(const ecs_world_t * world)
flecs_promote_type	$FLECS/$FLECS/flecs.c	/^ecs_entity_t flecs_promote_type($/;"	f	typeref:typename:ecs_entity_t	file:	signature:(ecs_entity_t type,ecs_entity_t promote_to)
flecs_query_add_ref	$FLECS/$FLECS/flecs.c	/^void flecs_query_add_ref($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_query_t * query,ecs_query_table_match_t * qm,ecs_entity_t component,ecs_entity_t entity,ecs_size_t size)
flecs_query_add_subquery	$FLECS/$FLECS/flecs.c	/^void flecs_query_add_subquery($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_query_t * parent,ecs_query_t * subquery)
flecs_query_add_table_match	$FLECS/$FLECS/flecs.c	/^ecs_query_table_match_t* flecs_query_add_table_match($/;"	f	typeref:typename:ecs_query_table_match_t *	file:	signature:(ecs_query_t * query,ecs_query_table_t * qt,ecs_table_t * table)
flecs_query_allocators_fini	$FLECS/$FLECS/flecs.c	/^void flecs_query_allocators_fini($/;"	f	typeref:typename:void	file:	signature:(ecs_query_t * query)
flecs_query_allocators_init	$FLECS/$FLECS/flecs.c	/^void flecs_query_allocators_init($/;"	f	typeref:typename:void	file:	signature:(ecs_query_t * query)
flecs_query_build_sorted_table_range	$FLECS/$FLECS/flecs.c	/^void flecs_query_build_sorted_table_range($/;"	f	typeref:typename:void	file:	signature:(ecs_query_t * query,ecs_query_table_list_t * list)
flecs_query_build_sorted_tables	$FLECS/$FLECS/flecs.c	/^void flecs_query_build_sorted_tables($/;"	f	typeref:typename:void	file:	signature:(ecs_query_t * query)
flecs_query_cache_add	$FLECS/$FLECS/flecs.c	/^ecs_query_table_match_t* flecs_query_cache_add($/;"	f	typeref:typename:ecs_query_table_match_t *	file:	signature:(ecs_world_t * world,ecs_query_table_t * elem)
flecs_query_check_match_monitor	$FLECS/$FLECS/flecs.c	/^bool flecs_query_check_match_monitor($/;"	f	typeref:typename:bool	file:	signature:(ecs_query_t * query,ecs_query_table_match_t * match,const ecs_iter_t * it)
flecs_query_check_match_monitor_term	$FLECS/$FLECS/flecs.c	/^bool flecs_query_check_match_monitor_term($/;"	f	typeref:typename:bool	file:	signature:(ecs_query_t * query,ecs_query_table_match_t * match,int32_t term)
flecs_query_check_query_monitor	$FLECS/$FLECS/flecs.c	/^bool flecs_query_check_query_monitor($/;"	f	typeref:typename:bool	file:	signature:(ecs_query_t * query)
flecs_query_check_table_monitor	$FLECS/$FLECS/flecs.c	/^bool flecs_query_check_table_monitor($/;"	f	typeref:typename:bool	file:	signature:(ecs_query_t * query,ecs_query_table_t * table,int32_t term)
flecs_query_compute_group_id	$FLECS/$FLECS/flecs.c	/^void flecs_query_compute_group_id($/;"	f	typeref:typename:void	file:	signature:(ecs_query_t * query,ecs_query_table_match_t * match)
flecs_query_create_group	$FLECS/$FLECS/flecs.c	/^void flecs_query_create_group($/;"	f	typeref:typename:void	file:	signature:(ecs_query_t * query,ecs_query_table_match_t * match)
flecs_query_default_group_by	$FLECS/$FLECS/flecs.c	/^uint64_t flecs_query_default_group_by($/;"	f	typeref:typename:uint64_t	file:	signature:(ecs_world_t * world,ecs_table_t * table,ecs_id_t id,void * ctx)
flecs_query_ensure_group	$FLECS/$FLECS/flecs.c	/^ecs_query_table_list_t* flecs_query_ensure_group($/;"	f	typeref:typename:ecs_query_table_list_t *	file:	signature:(ecs_query_t * query,uint64_t id)
flecs_query_ensure_node_list	$FLECS/$FLECS/flecs.c	/^ecs_query_table_list_t* flecs_query_ensure_node_list($/;"	f	typeref:typename:ecs_query_table_list_t *	file:	signature:(ecs_query_t * query,ecs_query_table_match_t * match)
flecs_query_find_group_insertion_node	$FLECS/$FLECS/flecs.c	/^ecs_query_table_match_t* flecs_query_find_group_insertion_node($/;"	f	typeref:typename:ecs_query_table_match_t *	file:	signature:(ecs_query_t * query,uint64_t group_id)
flecs_query_fini	$FLECS/$FLECS/flecs.c	/^void flecs_query_fini($/;"	f	typeref:typename:void	file:	signature:(ecs_query_t * query)
flecs_query_for_each_component_monitor	$FLECS/$FLECS/flecs.c	/^void flecs_query_for_each_component_monitor($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_query_t * query,void (* callback)(ecs_world_t * world,ecs_id_t id,ecs_query_t * query))
flecs_query_get_column_for_term	$FLECS/$FLECS/flecs.c	/^void flecs_query_get_column_for_term($/;"	f	typeref:typename:void	file:	signature:(ecs_query_t * query,ecs_query_table_match_t * match,int32_t t,flecs_table_column_t * out)
flecs_query_get_group	$FLECS/$FLECS/flecs.c	/^ecs_query_table_list_t* flecs_query_get_group($/;"	f	typeref:typename:ecs_query_table_list_t *	file:	signature:(const ecs_query_t * query,uint64_t group_id)
flecs_query_get_group_id	$FLECS/$FLECS/flecs.c	/^uint64_t flecs_query_get_group_id($/;"	f	typeref:typename:uint64_t	file:	signature:(ecs_query_t * query,ecs_table_t * table)
flecs_query_get_match_monitor	$FLECS/$FLECS/flecs.c	/^bool flecs_query_get_match_monitor($/;"	f	typeref:typename:bool	file:	signature:(ecs_query_t * query,ecs_query_table_match_t * match)
flecs_query_get_node_list	$FLECS/$FLECS/flecs.c	/^ecs_query_table_list_t* flecs_query_get_node_list($/;"	f	typeref:typename:ecs_query_table_list_t *	file:	signature:(ecs_query_t * query,ecs_query_table_match_t * match)
flecs_query_group_by	$FLECS/$FLECS/flecs.c	/^void flecs_query_group_by($/;"	f	typeref:typename:void	file:	signature:(ecs_query_t * query,ecs_entity_t sort_component,ecs_group_by_action_t group_by)
flecs_query_group_by_cascade	$FLECS/$FLECS/flecs.c	/^uint64_t flecs_query_group_by_cascade($/;"	f	typeref:typename:uint64_t	file:	signature:(ecs_world_t * world,ecs_table_t * table,ecs_id_t id,void * ctx)
flecs_query_has_refs	$FLECS/$FLECS/flecs.c	/^bool flecs_query_has_refs($/;"	f	typeref:typename:bool	file:	signature:(ecs_query_t * query)
flecs_query_id_record_get	$FLECS/$FLECS/flecs.c	/^ecs_id_record_t* flecs_query_id_record_get($/;"	p	typeref:typename:ecs_id_record_t *	file:	signature:(const ecs_world_t * world,ecs_id_t id)
flecs_query_init_query_monitors	$FLECS/$FLECS/flecs.c	/^void flecs_query_init_query_monitors($/;"	f	typeref:typename:void	file:	signature:(ecs_query_t * query)
flecs_query_insert_table_node	$FLECS/$FLECS/flecs.c	/^void flecs_query_insert_table_node($/;"	f	typeref:typename:void	file:	signature:(ecs_query_t * query,ecs_query_table_match_t * match)
flecs_query_is_term_id_supported	$FLECS/$FLECS/flecs.c	/^bool flecs_query_is_term_id_supported($/;"	f	typeref:typename:bool	file:	signature:(ecs_term_id_t * term_id)
flecs_query_iter_init	$FLECS/$FLECS/flecs.c	/^void flecs_query_iter_init($/;"	f	typeref:typename:void	file:	signature:(const ecs_world_t * world,const ecs_poly_t * poly,ecs_iter_t * iter,ecs_term_t * filter)
flecs_query_mark_columns_dirty	$FLECS/$FLECS/flecs.c	/^void flecs_query_mark_columns_dirty($/;"	f	typeref:typename:void	file:	signature:(ecs_query_t * query,ecs_query_table_match_t * qm)
flecs_query_match_table	$FLECS/$FLECS/flecs.c	/^bool flecs_query_match_table($/;"	f	typeref:typename:bool	file:	signature:(ecs_world_t * world,ecs_query_t * query,ecs_table_t * table)
flecs_query_match_tables	$FLECS/$FLECS/flecs.c	/^void flecs_query_match_tables($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_query_t * query)
flecs_query_notify	$FLECS/$FLECS/flecs.c	/^void flecs_query_notify($/;"	p	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_query_t * query,ecs_query_event_t * event)
flecs_query_notify_subqueries	$FLECS/$FLECS/flecs.c	/^void flecs_query_notify_subqueries($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_query_t * query,ecs_query_event_t * event)
flecs_query_on_event	$FLECS/$FLECS/flecs.c	/^void flecs_query_on_event($/;"	f	typeref:typename:void	file:	signature:(ecs_iter_t * it)
flecs_query_order_by	$FLECS/$FLECS/flecs.c	/^void flecs_query_order_by($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_query_t * query,ecs_entity_t order_by_component,ecs_order_by_action_t order_by,ecs_sort_table_action_t action)
flecs_query_populate_trivial	$FLECS/$FLECS/flecs.c	/^void flecs_query_populate_trivial($/;"	f	typeref:typename:void	file:	signature:(ecs_iter_t * it,ecs_query_table_match_t * match)
flecs_query_process_signature	$FLECS/$FLECS/flecs.c	/^int flecs_query_process_signature($/;"	f	typeref:typename:int	file:	signature:(ecs_world_t * world,ecs_query_t * query)
flecs_query_rematch_tables	$FLECS/$FLECS/flecs.c	/^void flecs_query_rematch_tables($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_query_t * query,ecs_query_t * parent_query)
flecs_query_remove_group	$FLECS/$FLECS/flecs.c	/^void flecs_query_remove_group($/;"	f	typeref:typename:void	file:	signature:(ecs_query_t * query,uint64_t id)
flecs_query_remove_subquery	$FLECS/$FLECS/flecs.c	/^void flecs_query_remove_subquery($/;"	f	typeref:typename:void	file:	signature:(ecs_query_t * parent,ecs_query_t * sub)
flecs_query_remove_table_node	$FLECS/$FLECS/flecs.c	/^void flecs_query_remove_table_node($/;"	f	typeref:typename:void	file:	signature:(ecs_query_t * query,ecs_query_table_match_t * match)
flecs_query_set_table_match	$FLECS/$FLECS/flecs.c	/^void flecs_query_set_table_match($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_query_t * query,ecs_query_table_match_t * qm,ecs_table_t * table,ecs_iter_t * it)
flecs_query_set_var	$FLECS/$FLECS/flecs.c	/^void flecs_query_set_var($/;"	f	typeref:typename:void	file:	signature:(ecs_iter_t * it)
flecs_query_sort_tables	$FLECS/$FLECS/flecs.c	/^void flecs_query_sort_tables($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_query_t * query)
flecs_query_sync_match_monitor	$FLECS/$FLECS/flecs.c	/^void flecs_query_sync_match_monitor($/;"	f	typeref:typename:void	file:	signature:(ecs_query_t * query,ecs_query_table_match_t * match)
flecs_query_table_cache_free	$FLECS/$FLECS/flecs.c	/^void flecs_query_table_cache_free($/;"	f	typeref:typename:void	file:	signature:(ecs_query_t * query)
flecs_query_table_free	$FLECS/$FLECS/flecs.c	/^void flecs_query_table_free($/;"	f	typeref:typename:void	file:	signature:(ecs_query_t * query,ecs_query_table_t * elem)
flecs_query_table_insert	$FLECS/$FLECS/flecs.c	/^ecs_query_table_t* flecs_query_table_insert($/;"	f	typeref:typename:ecs_query_table_t *	file:	signature:(ecs_world_t * world,ecs_query_t * query,ecs_table_t * table)
flecs_query_table_match_free	$FLECS/$FLECS/flecs.c	/^void flecs_query_table_match_free($/;"	f	typeref:typename:void	file:	signature:(ecs_query_t * query,ecs_query_table_t * elem,ecs_query_table_match_t * first)
flecs_query_unmatch_table	$FLECS/$FLECS/flecs.c	/^void flecs_query_unmatch_table($/;"	f	typeref:typename:void	file:	signature:(ecs_query_t * query,ecs_table_t * table,ecs_query_table_t * elem)
flecs_query_update_table	$FLECS/$FLECS/flecs.c	/^void flecs_query_update_table($/;"	f	typeref:typename:void	file:	signature:(ecs_query_t * query,ecs_table_t * table,bool empty)
flecs_range_from_entity	$FLECS/$FLECS/flecs.c	/^ecs_table_range_t flecs_range_from_entity($/;"	f	typeref:typename:ecs_table_range_t	file:	signature:(ecs_entity_t e,const ecs_rule_run_ctx_t * ctx)
flecs_realloc	$FLECS/$FLECS/flecs.h	/^#define flecs_realloc(/;"	d	signature:(a,size_dst,size_src,ptr)
flecs_realloc_n	$FLECS/$FLECS/flecs.h	/^#define flecs_realloc_n(/;"	d	signature:(a,T,count_dst,count_src,ptr)
flecs_record_add_flag	$FLECS/$FLECS/flecs.c	/^void flecs_record_add_flag($/;"	p	typeref:typename:void	file:	signature:(ecs_record_t * record,uint32_t flag)
flecs_ref_is_written	$FLECS/$FLECS/flecs.c	/^bool flecs_ref_is_written($/;"	p	typeref:typename:bool	file:	signature:(const ecs_rule_op_t * op,const ecs_rule_ref_t * ref,ecs_flags16_t kind,uint64_t written)
flecs_register_always_override	$FLECS/$FLECS/flecs.c	/^void flecs_register_always_override(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:	signature:(ecs_iter_t * it)
flecs_register_dont_inherit	$FLECS/$FLECS/flecs.c	/^void flecs_register_dont_inherit(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:	signature:(ecs_iter_t * it)
flecs_register_exclusive	$FLECS/$FLECS/flecs.c	/^void flecs_register_exclusive(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:	signature:(ecs_iter_t * it)
flecs_register_final	$FLECS/$FLECS/flecs.c	/^void flecs_register_final(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:	signature:(ecs_iter_t * it)
flecs_register_id_flag_for_relation	$FLECS/$FLECS/flecs.c	/^void flecs_register_id_flag_for_relation($/;"	f	typeref:typename:void	file:	signature:(ecs_iter_t * it,ecs_entity_t prop,ecs_flags32_t flag,ecs_flags32_t not_flag,ecs_flags32_t entity_flag)
flecs_register_observer_for_id	$FLECS/$FLECS/flecs.c	/^void flecs_register_observer_for_id($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_observable_t * observable,ecs_observer_t * observer,size_t offset)
flecs_register_on_delete	$FLECS/$FLECS/flecs.c	/^void flecs_register_on_delete(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:	signature:(ecs_iter_t * it)
flecs_register_on_delete_object	$FLECS/$FLECS/flecs.c	/^void flecs_register_on_delete_object(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:	signature:(ecs_iter_t * it)
flecs_register_slot_of	$FLECS/$FLECS/flecs.c	/^void flecs_register_slot_of(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:	signature:(ecs_iter_t * it)
flecs_register_symmetric	$FLECS/$FLECS/flecs.c	/^void flecs_register_symmetric(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:	signature:(ecs_iter_t * it)
flecs_register_table	$FLECS/$FLECS/flecs.c	/^void flecs_register_table($/;"	p	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_table_t * table)
flecs_register_tag	$FLECS/$FLECS/flecs.c	/^void flecs_register_tag(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:	signature:(ecs_iter_t * it)
flecs_register_traversable	$FLECS/$FLECS/flecs.c	/^void flecs_register_traversable(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:	signature:(ecs_iter_t * it)
flecs_register_union	$FLECS/$FLECS/flecs.c	/^void flecs_register_union(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:	signature:(ecs_iter_t * it)
flecs_register_with	$FLECS/$FLECS/flecs.c	/^void flecs_register_with(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:	signature:(ecs_iter_t * it)
flecs_relation_depth	$FLECS/$FLECS/flecs.c	/^int32_t flecs_relation_depth($/;"	p	typeref:typename:int32_t	file:	signature:(const ecs_world_t * world,ecs_entity_t r,const ecs_table_t * table)
flecs_relation_depth_walk	$FLECS/$FLECS/flecs.c	/^int32_t flecs_relation_depth_walk($/;"	f	typeref:typename:int32_t	file:	signature:(const ecs_world_t * world,const ecs_id_record_t * idr,const ecs_table_t * first,const ecs_table_t * table)
flecs_remove_from_table	$FLECS/$FLECS/flecs.c	/^void flecs_remove_from_table($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_table_t * table)
flecs_remove_id	$FLECS/$FLECS/flecs.c	/^void flecs_remove_id($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_entity_t entity,ecs_id_t id)
flecs_remove_id_elem	$FLECS/$FLECS/flecs.c	/^void flecs_remove_id_elem($/;"	f	typeref:typename:void	file:	signature:(ecs_id_record_t * idr,ecs_id_t wildcard)
flecs_remove_invalid	$FLECS/$FLECS/flecs.c	/^bool flecs_remove_invalid($/;"	f	typeref:typename:bool	file:	signature:(ecs_world_t * world,ecs_id_t id,ecs_id_t * id_out)
flecs_reply_error	$FLECS/$FLECS/flecs.c	/^void flecs_reply_error($/;"	f	typeref:typename:void	file:	signature:(ecs_http_reply_t * reply,const char * fmt,...)
flecs_reply_verror	$FLECS/$FLECS/flecs.c	/^void flecs_reply_verror($/;"	f	typeref:typename:void	file:	signature:(ecs_http_reply_t * reply,const char * fmt,va_list args)
flecs_reset_count	$FLECS/$FLECS/flecs.c	/^static int32_t flecs_reset_count = 0;$/;"	v	typeref:typename:int32_t	file:
flecs_reset_source_set_flag	$FLECS/$FLECS/flecs.c	/^void flecs_reset_source_set_flag($/;"	f	typeref:typename:void	file:	signature:(const ecs_rule_run_ctx_t * ctx,int32_t field_index)
flecs_rest_array_append	$FLECS/$FLECS/flecs.c	/^#define flecs_rest_array_append(/;"	d	file:	signature:(reply,field,values,t)
flecs_rest_array_append_	$FLECS/$FLECS/flecs.c	/^void flecs_rest_array_append_($/;"	f	typeref:typename:void	file:	signature:(ecs_strbuf_t * reply,const char * field,int32_t field_len,const ecs_float_t * values,int32_t t)
flecs_rest_bool_param	$FLECS/$FLECS/flecs.c	/^void flecs_rest_bool_param($/;"	f	typeref:typename:void	file:	signature:(const ecs_http_request_t * req,const char * name,bool * value_out)
flecs_rest_capture_log	$FLECS/$FLECS/flecs.c	/^void flecs_rest_capture_log($/;"	f	typeref:typename:void	file:	signature:(int32_t level,const char * file,int32_t line,const char * msg)
flecs_rest_counter_append	$FLECS/$FLECS/flecs.c	/^void flecs_rest_counter_append($/;"	f	typeref:typename:void	file:	signature:(ecs_strbuf_t * reply,const ecs_metric_t * m,const char * field,int32_t field_len,int32_t t,const char * brief,int32_t brief_len)
flecs_rest_delete	$FLECS/$FLECS/flecs.c	/^bool flecs_rest_delete($/;"	f	typeref:typename:bool	file:	signature:(ecs_world_t * world,ecs_http_reply_t * reply,const char * path)
flecs_rest_enable	$FLECS/$FLECS/flecs.c	/^bool flecs_rest_enable($/;"	f	typeref:typename:bool	file:	signature:(ecs_world_t * world,ecs_http_reply_t * reply,const char * path,bool enable)
flecs_rest_entity_from_path	$FLECS/$FLECS/flecs.c	/^ecs_entity_t flecs_rest_entity_from_path($/;"	f	typeref:typename:ecs_entity_t	file:	signature:(ecs_world_t * world,ecs_http_reply_t * reply,const char * path)
flecs_rest_gauge_append	$FLECS/$FLECS/flecs.c	/^void flecs_rest_gauge_append($/;"	f	typeref:typename:void	file:	signature:(ecs_strbuf_t * reply,const ecs_metric_t * m,const char * field,int32_t field_len,int32_t t,const char * brief,int32_t brief_len)
flecs_rest_get_captured_log	$FLECS/$FLECS/flecs.c	/^char* flecs_rest_get_captured_log(void) {$/;"	f	typeref:typename:char *	file:	signature:(void)
flecs_rest_int_param	$FLECS/$FLECS/flecs.c	/^void flecs_rest_int_param($/;"	f	typeref:typename:void	file:	signature:(const ecs_http_request_t * req,const char * name,int32_t * value_out)
flecs_rest_iter_to_reply	$FLECS/$FLECS/flecs.c	/^int flecs_rest_iter_to_reply($/;"	f	typeref:typename:int	file:	signature:(ecs_world_t * world,const ecs_http_request_t * req,ecs_http_reply_t * reply,ecs_iter_t * it)
flecs_rest_parse_json_ser_entity_params	$FLECS/$FLECS/flecs.c	/^void flecs_rest_parse_json_ser_entity_params($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_entity_to_json_desc_t * desc,const ecs_http_request_t * req)
flecs_rest_parse_json_ser_iter_params	$FLECS/$FLECS/flecs.c	/^void flecs_rest_parse_json_ser_iter_params($/;"	f	typeref:typename:void	file:	signature:(ecs_iter_to_json_desc_t * desc,const ecs_http_request_t * req)
flecs_rest_reply	$FLECS/$FLECS/flecs.c	/^bool flecs_rest_reply($/;"	f	typeref:typename:bool	file:	signature:(const ecs_http_request_t * req,ecs_http_reply_t * reply,void * ctx)
flecs_rest_reply_entity	$FLECS/$FLECS/flecs.c	/^bool flecs_rest_reply_entity($/;"	f	typeref:typename:bool	file:	signature:(ecs_world_t * world,const ecs_http_request_t * req,ecs_http_reply_t * reply)
flecs_rest_reply_existing_query	$FLECS/$FLECS/flecs.c	/^bool flecs_rest_reply_existing_query($/;"	f	typeref:typename:bool	file:	signature:(ecs_world_t * world,const ecs_http_request_t * req,ecs_http_reply_t * reply,const char * name)
flecs_rest_reply_query	$FLECS/$FLECS/flecs.c	/^bool flecs_rest_reply_query($/;"	f	typeref:typename:bool	file:	signature:(ecs_world_t * world,const ecs_http_request_t * req,ecs_http_reply_t * reply)
flecs_rest_reply_set_captured_log	$FLECS/$FLECS/flecs.c	/^void flecs_rest_reply_set_captured_log($/;"	f	typeref:typename:void	file:	signature:(ecs_http_reply_t * reply)
flecs_rest_reply_stats	$FLECS/$FLECS/flecs.c	/^bool flecs_rest_reply_stats($/;"	f	typeref:typename:bool	file:	signature:(ecs_world_t * world,const ecs_http_request_t * req,ecs_http_reply_t * reply)
flecs_rest_reply_table_append	$FLECS/$FLECS/flecs.c	/^void flecs_rest_reply_table_append($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_strbuf_t * reply,const ecs_table_t * table)
flecs_rest_reply_table_append_memory	$FLECS/$FLECS/flecs.c	/^void flecs_rest_reply_table_append_memory($/;"	f	typeref:typename:void	file:	signature:(ecs_strbuf_t * reply,const ecs_table_t * table)
flecs_rest_reply_table_append_type	$FLECS/$FLECS/flecs.c	/^void flecs_rest_reply_table_append_type($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_strbuf_t * reply,const ecs_table_t * table)
flecs_rest_reply_tables	$FLECS/$FLECS/flecs.c	/^bool flecs_rest_reply_tables($/;"	f	typeref:typename:bool	file:	signature:(ecs_world_t * world,const ecs_http_request_t * req,ecs_http_reply_t * reply)
flecs_rest_reply_world	$FLECS/$FLECS/flecs.c	/^bool flecs_rest_reply_world($/;"	f	typeref:typename:bool	file:	signature:(ecs_world_t * world,const ecs_http_request_t * req,ecs_http_reply_t * reply)
flecs_rest_script	$FLECS/$FLECS/flecs.c	/^bool flecs_rest_script($/;"	f	typeref:typename:bool	file:	signature:(ecs_world_t * world,const ecs_http_request_t * req,ecs_http_reply_t * reply)
flecs_rest_set	$FLECS/$FLECS/flecs.c	/^bool flecs_rest_set($/;"	f	typeref:typename:bool	file:	signature:(ecs_world_t * world,const ecs_http_request_t * req,ecs_http_reply_t * reply,const char * path)
flecs_rest_string_param	$FLECS/$FLECS/flecs.c	/^void flecs_rest_string_param($/;"	f	typeref:typename:void	file:	signature:(const ecs_http_request_t * req,const char * name,char ** value_out)
flecs_resume_readonly	$FLECS/$FLECS/flecs.c	/^void flecs_resume_readonly($/;"	p	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_suspend_readonly_state_t * state)
flecs_rule_add_var	$FLECS/$FLECS/flecs.c	/^ecs_var_id_t flecs_rule_add_var($/;"	f	typeref:typename:ecs_var_id_t	file:	signature:(ecs_rule_t * rule,const char * name,ecs_vec_t * vars,ecs_var_kind_t kind)
flecs_rule_add_var_for_term_id	$FLECS/$FLECS/flecs.c	/^ecs_var_id_t flecs_rule_add_var_for_term_id($/;"	f	typeref:typename:ecs_var_id_t	file:	signature:(ecs_rule_t * rule,ecs_term_id_t * term_id,ecs_vec_t * vars,ecs_var_kind_t kind)
flecs_rule_and	$FLECS/$FLECS/flecs.c	/^bool flecs_rule_and($/;"	f	typeref:typename:bool	file:	signature:(const ecs_rule_op_t * op,bool redo,const ecs_rule_run_ctx_t * ctx)
flecs_rule_and_any	$FLECS/$FLECS/flecs.c	/^bool flecs_rule_and_any($/;"	f	typeref:typename:bool	file:	signature:(const ecs_rule_op_t * op,bool redo,const ecs_rule_run_ctx_t * ctx)
flecs_rule_and_id	$FLECS/$FLECS/flecs.c	/^bool flecs_rule_and_id($/;"	f	typeref:typename:bool	file:	signature:(const ecs_rule_op_t * op,bool redo,const ecs_rule_run_ctx_t * ctx)
flecs_rule_begin_block	$FLECS/$FLECS/flecs.c	/^ecs_rule_op_t* flecs_rule_begin_block($/;"	f	typeref:typename:ecs_rule_op_t *	file:	signature:(ecs_rule_op_kind_t kind,ecs_rule_compile_ctx_t * ctx)
flecs_rule_begin_block_cond_eval	$FLECS/$FLECS/flecs.c	/^void flecs_rule_begin_block_cond_eval($/;"	f	typeref:typename:void	file:	signature:(ecs_rule_op_t * op,ecs_rule_compile_ctx_t * ctx,ecs_write_flags_t cond_write_state)
flecs_rule_begin_block_or	$FLECS/$FLECS/flecs.c	/^void flecs_rule_begin_block_or($/;"	f	typeref:typename:void	file:	signature:(ecs_rule_op_t * op,ecs_rule_compile_ctx_t * ctx)
flecs_rule_build_down_cache	$FLECS/$FLECS/flecs.c	/^void flecs_rule_build_down_cache($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_allocator_t * a,const ecs_rule_run_ctx_t * ctx,ecs_trav_cache_t * cache,ecs_entity_t trav,ecs_entity_t entity)
flecs_rule_build_up_cache	$FLECS/$FLECS/flecs.c	/^void flecs_rule_build_up_cache($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_allocator_t * a,const ecs_rule_run_ctx_t * ctx,ecs_trav_cache_t * cache,ecs_entity_t trav,ecs_table_t * table,const ecs_table_record_t * tr,int32_t root_column)
flecs_rule_compare_range	$FLECS/$FLECS/flecs.c	/^bool flecs_rule_compare_range($/;"	f	typeref:typename:bool	file:	signature:(const ecs_table_range_t * l,const ecs_table_range_t * r)
flecs_rule_compile	$FLECS/$FLECS/flecs.c	/^int flecs_rule_compile($/;"	p	typeref:typename:int	file:	signature:(ecs_world_t * world,ecs_stage_t * stage,ecs_rule_t * rule)
flecs_rule_compile_builtin_pred	$FLECS/$FLECS/flecs.c	/^int flecs_rule_compile_builtin_pred($/;"	f	typeref:typename:int	file:	signature:(ecs_term_t * term,ecs_rule_op_t * op,ecs_write_flags_t write_state)
flecs_rule_compile_ensure_vars	$FLECS/$FLECS/flecs.c	/^int flecs_rule_compile_ensure_vars($/;"	f	typeref:typename:int	file:	signature:(ecs_rule_t * rule,ecs_rule_op_t * op,ecs_rule_ref_t * ref,ecs_flags16_t ref_kind,ecs_rule_compile_ctx_t * ctx,bool cond_write,bool * written_out)
flecs_rule_compile_lookup	$FLECS/$FLECS/flecs.c	/^bool flecs_rule_compile_lookup($/;"	f	typeref:typename:bool	file:	signature:(ecs_rule_t * rule,ecs_var_id_t var_id,ecs_rule_compile_ctx_t * ctx,bool cond_write)
flecs_rule_compile_pop	$FLECS/$FLECS/flecs.c	/^void flecs_rule_compile_pop($/;"	f	typeref:typename:void	file:	signature:(ecs_rule_compile_ctx_t * ctx)
flecs_rule_compile_push	$FLECS/$FLECS/flecs.c	/^void flecs_rule_compile_push($/;"	f	typeref:typename:void	file:	signature:(ecs_rule_compile_ctx_t * ctx)
flecs_rule_compile_term	$FLECS/$FLECS/flecs.c	/^int flecs_rule_compile_term($/;"	f	typeref:typename:int	file:	signature:(ecs_world_t * world,ecs_rule_t * rule,ecs_term_t * term,ecs_rule_compile_ctx_t * ctx)
flecs_rule_compile_term_id	$FLECS/$FLECS/flecs.c	/^void flecs_rule_compile_term_id($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_rule_t * rule,ecs_rule_op_t * op,ecs_term_id_t * term_id,ecs_rule_ref_t * ref,ecs_flags8_t ref_kind,ecs_var_kind_t kind,ecs_rule_compile_ctx_t * ctx,bool create_wildcard_vars)
flecs_rule_contain	$FLECS/$FLECS/flecs.c	/^bool flecs_rule_contain($/;"	f	typeref:typename:bool	file:	signature:(const ecs_rule_op_t * op,bool redo,ecs_rule_run_ctx_t * ctx)
flecs_rule_discover_vars	$FLECS/$FLECS/flecs.c	/^int flecs_rule_discover_vars($/;"	f	typeref:typename:int	file:	signature:(ecs_stage_t * stage,ecs_rule_t * rule)
flecs_rule_dispatch	$FLECS/$FLECS/flecs.c	/^bool flecs_rule_dispatch($/;"	p	typeref:typename:bool	file:	signature:(const ecs_rule_op_t * op,bool redo,ecs_rule_run_ctx_t * ctx)
flecs_rule_down_cache_fini	$FLECS/$FLECS/flecs.c	/^void flecs_rule_down_cache_fini($/;"	p	typeref:typename:void	file:	signature:(ecs_allocator_t * a,ecs_trav_up_cache_t * cache)
flecs_rule_each	$FLECS/$FLECS/flecs.c	/^bool flecs_rule_each($/;"	f	typeref:typename:bool	file:	signature:(const ecs_rule_op_t * op,bool redo,const ecs_rule_run_ctx_t * ctx)
flecs_rule_end	$FLECS/$FLECS/flecs.c	/^bool flecs_rule_end($/;"	f	typeref:typename:bool	file:	signature:(const ecs_rule_op_t * op,bool redo,ecs_rule_run_ctx_t * ctx)
flecs_rule_end_block	$FLECS/$FLECS/flecs.c	/^void flecs_rule_end_block($/;"	f	typeref:typename:void	file:	signature:(ecs_rule_compile_ctx_t * ctx)
flecs_rule_end_block_cond_eval	$FLECS/$FLECS/flecs.c	/^void flecs_rule_end_block_cond_eval($/;"	f	typeref:typename:void	file:	signature:(ecs_rule_compile_ctx_t * ctx)
flecs_rule_end_block_or	$FLECS/$FLECS/flecs.c	/^void flecs_rule_end_block_or($/;"	f	typeref:typename:void	file:	signature:(ecs_rule_compile_ctx_t * ctx)
flecs_rule_ensure_scope_var	$FLECS/$FLECS/flecs.c	/^int flecs_rule_ensure_scope_var($/;"	f	typeref:typename:int	file:	signature:(ecs_rule_t * rule,ecs_rule_op_t * op,ecs_rule_ref_t * ref,ecs_flags16_t ref_kind,ecs_rule_compile_ctx_t * ctx)
flecs_rule_ensure_scope_vars	$FLECS/$FLECS/flecs.c	/^int flecs_rule_ensure_scope_vars($/;"	f	typeref:typename:int	file:	signature:(ecs_world_t * world,ecs_rule_t * rule,ecs_rule_compile_ctx_t * ctx,ecs_term_t * term)
flecs_rule_eval_if	$FLECS/$FLECS/flecs.c	/^bool flecs_rule_eval_if($/;"	f	typeref:typename:bool	file:	signature:(const ecs_rule_op_t * op,ecs_rule_run_ctx_t * ctx,const ecs_rule_ref_t * ref,ecs_flags16_t ref_kind)
flecs_rule_find_var_id	$FLECS/$FLECS/flecs.c	/^ecs_var_id_t flecs_rule_find_var_id($/;"	f	typeref:typename:ecs_var_id_t	file:	signature:(const ecs_rule_t * rule,const char * name,ecs_var_kind_t kind)
flecs_rule_fini	$FLECS/$FLECS/flecs.c	/^void flecs_rule_fini($/;"	f	typeref:typename:void	file:	signature:(ecs_rule_t * rule)
flecs_rule_get_allocator	$FLECS/$FLECS/flecs.c	/^ecs_allocator_t* flecs_rule_get_allocator($/;"	p	typeref:typename:ecs_allocator_t *	file:	signature:(const ecs_iter_t * it)
flecs_rule_get_down_cache	$FLECS/$FLECS/flecs.c	/^ecs_trav_down_t* flecs_rule_get_down_cache($/;"	p	typeref:typename:ecs_trav_down_t *	file:	signature:(const ecs_rule_run_ctx_t * ctx,ecs_trav_up_cache_t * cache,ecs_entity_t trav,ecs_entity_t entity,ecs_id_record_t * idr_with,bool self)
flecs_rule_get_range	$FLECS/$FLECS/flecs.c	/^ecs_table_range_t flecs_rule_get_range($/;"	f	typeref:typename:ecs_table_range_t	file:	signature:(const ecs_rule_op_t * op,const ecs_rule_ref_t * ref,ecs_flags16_t ref_kind,const ecs_rule_run_ctx_t * ctx)
flecs_rule_get_table	$FLECS/$FLECS/flecs.c	/^ecs_table_t* flecs_rule_get_table($/;"	f	typeref:typename:ecs_table_t *	file:	signature:(const ecs_rule_op_t * op,const ecs_rule_ref_t * ref,ecs_flags16_t ref_kind,const ecs_rule_run_ctx_t * ctx)
flecs_rule_get_trav_down_cache	$FLECS/$FLECS/flecs.c	/^void flecs_rule_get_trav_down_cache($/;"	p	typeref:typename:void	file:	signature:(const ecs_rule_run_ctx_t * ctx,ecs_trav_cache_t * cache,ecs_entity_t trav,ecs_entity_t entity)
flecs_rule_get_trav_up_cache	$FLECS/$FLECS/flecs.c	/^void flecs_rule_get_trav_up_cache($/;"	p	typeref:typename:void	file:	signature:(const ecs_rule_run_ctx_t * ctx,ecs_trav_cache_t * cache,ecs_entity_t trav,ecs_table_t * table)
flecs_rule_get_up_cache	$FLECS/$FLECS/flecs.c	/^ecs_trav_up_t* flecs_rule_get_up_cache($/;"	p	typeref:typename:ecs_trav_up_t *	file:	signature:(const ecs_rule_run_ctx_t * ctx,ecs_trav_up_cache_t * cache,ecs_table_t * table,ecs_id_t with,ecs_entity_t trav,ecs_id_record_t * idr_with,ecs_id_record_t * idr_trav)
flecs_rule_idsleft	$FLECS/$FLECS/flecs.c	/^bool flecs_rule_idsleft($/;"	f	typeref:typename:bool	file:	signature:(const ecs_rule_op_t * op,bool redo,const ecs_rule_run_ctx_t * ctx)
flecs_rule_idsright	$FLECS/$FLECS/flecs.c	/^bool flecs_rule_idsright($/;"	f	typeref:typename:bool	file:	signature:(const ecs_rule_op_t * op,bool redo,const ecs_rule_run_ctx_t * ctx)
flecs_rule_if	$FLECS/$FLECS/flecs.c	/^bool flecs_rule_if($/;"	f	typeref:typename:bool	file:	signature:(const ecs_rule_op_t * op,bool redo,ecs_rule_run_ctx_t * ctx)
flecs_rule_insert_contains	$FLECS/$FLECS/flecs.c	/^void flecs_rule_insert_contains($/;"	f	typeref:typename:void	file:	signature:(ecs_rule_t * rule,ecs_var_id_t src_var,ecs_var_id_t other_var,ecs_rule_compile_ctx_t * ctx)
flecs_rule_insert_each	$FLECS/$FLECS/flecs.c	/^void flecs_rule_insert_each($/;"	f	typeref:typename:void	file:	signature:(ecs_var_id_t tvar,ecs_var_id_t evar,ecs_rule_compile_ctx_t * ctx,bool cond_write)
flecs_rule_insert_inheritance	$FLECS/$FLECS/flecs.c	/^void flecs_rule_insert_inheritance($/;"	f	typeref:typename:void	file:	signature:(ecs_rule_t * rule,ecs_term_t * term,ecs_rule_op_t * op,ecs_rule_compile_ctx_t * ctx,bool cond_write)
flecs_rule_insert_lookup	$FLECS/$FLECS/flecs.c	/^void flecs_rule_insert_lookup($/;"	f	typeref:typename:void	file:	signature:(ecs_var_id_t base_var,ecs_var_id_t evar,ecs_rule_compile_ctx_t * ctx,bool cond_write)
flecs_rule_insert_pair_eq	$FLECS/$FLECS/flecs.c	/^void flecs_rule_insert_pair_eq($/;"	f	typeref:typename:void	file:	signature:(int32_t field_index,ecs_rule_compile_ctx_t * ctx)
flecs_rule_insert_populate	$FLECS/$FLECS/flecs.c	/^void flecs_rule_insert_populate($/;"	f	typeref:typename:void	file:	signature:(ecs_rule_t * rule,ecs_rule_compile_ctx_t * ctx,int32_t trivial_terms)
flecs_rule_insert_trivial_search	$FLECS/$FLECS/flecs.c	/^int32_t flecs_rule_insert_trivial_search($/;"	f	typeref:typename:int32_t	file:	signature:(ecs_rule_t * rule,ecs_rule_compile_ctx_t * ctx)
flecs_rule_insert_unconstrained_transitive	$FLECS/$FLECS/flecs.c	/^void flecs_rule_insert_unconstrained_transitive($/;"	f	typeref:typename:void	file:	signature:(ecs_rule_t * rule,ecs_rule_op_t * op,ecs_rule_compile_ctx_t * ctx,bool cond_write)
flecs_rule_is_builtin_pred	$FLECS/$FLECS/flecs.c	/^bool flecs_rule_is_builtin_pred($/;"	f	typeref:typename:bool	file:	signature:(ecs_term_t * term)
flecs_rule_is_written	$FLECS/$FLECS/flecs.c	/^bool flecs_rule_is_written($/;"	p	typeref:typename:bool	file:	signature:(ecs_var_id_t var_id,uint64_t written)
flecs_rule_it_set_column	$FLECS/$FLECS/flecs.c	/^void flecs_rule_it_set_column($/;"	f	typeref:typename:void	file:	signature:(ecs_iter_t * it,int32_t field_index,int32_t column)
flecs_rule_it_set_id	$FLECS/$FLECS/flecs.c	/^ecs_id_t flecs_rule_it_set_id($/;"	f	typeref:typename:ecs_id_t	file:	signature:(ecs_iter_t * it,ecs_table_t * table,int32_t field_index,int32_t column)
flecs_rule_iter_fini	$FLECS/$FLECS/flecs.c	/^void flecs_rule_iter_fini($/;"	f	typeref:typename:void	file:	signature:(ecs_iter_t * it)
flecs_rule_iter_fini_ctx	$FLECS/$FLECS/flecs.c	/^void flecs_rule_iter_fini_ctx($/;"	f	typeref:typename:void	file:	signature:(ecs_iter_t * it,ecs_rule_iter_t * rit)
flecs_rule_iter_init	$FLECS/$FLECS/flecs.c	/^void flecs_rule_iter_init($/;"	f	typeref:typename:void	file:	signature:(ecs_rule_run_ctx_t * ctx)
flecs_rule_iter_mixin_init	$FLECS/$FLECS/flecs.c	/^void flecs_rule_iter_mixin_init($/;"	f	typeref:typename:void	file:	signature:(const ecs_world_t * world,const ecs_poly_t * poly,ecs_iter_t * iter,ecs_term_t * filter)
flecs_rule_lookup	$FLECS/$FLECS/flecs.c	/^bool flecs_rule_lookup($/;"	f	typeref:typename:bool	file:	signature:(const ecs_rule_op_t * op,bool redo,ecs_rule_run_ctx_t * ctx)
flecs_rule_most_specific_var	$FLECS/$FLECS/flecs.c	/^ecs_var_id_t flecs_rule_most_specific_var($/;"	f	typeref:typename:ecs_var_id_t	file:	signature:(ecs_rule_t * rule,const char * name,ecs_var_kind_t kind,ecs_rule_compile_ctx_t * ctx)
flecs_rule_name_arg	$FLECS/$FLECS/flecs.c	/^const char* flecs_rule_name_arg($/;"	f	typeref:typename:const char *	file:	signature:(const ecs_rule_op_t * op,ecs_rule_run_ctx_t * ctx)
flecs_rule_next_column	$FLECS/$FLECS/flecs.c	/^int16_t flecs_rule_next_column($/;"	f	typeref:typename:int16_t	file:	signature:(ecs_table_t * table,ecs_id_t id,int32_t column)
flecs_rule_not	$FLECS/$FLECS/flecs.c	/^bool flecs_rule_not($/;"	f	typeref:typename:bool	file:	signature:(const ecs_rule_op_t * op,bool redo,ecs_rule_run_ctx_t * ctx)
flecs_rule_op_get_id	$FLECS/$FLECS/flecs.c	/^ecs_id_t flecs_rule_op_get_id($/;"	f	typeref:typename:ecs_id_t	file:	signature:(const ecs_rule_op_t * op,const ecs_rule_run_ctx_t * ctx)
flecs_rule_op_get_id_w_written	$FLECS/$FLECS/flecs.c	/^ecs_id_t flecs_rule_op_get_id_w_written($/;"	f	typeref:typename:ecs_id_t	file:	signature:(const ecs_rule_op_t * op,uint64_t written,const ecs_rule_run_ctx_t * ctx)
flecs_rule_op_insert	$FLECS/$FLECS/flecs.c	/^ecs_rule_lbl_t flecs_rule_op_insert($/;"	f	typeref:typename:ecs_rule_lbl_t	file:	signature:(ecs_rule_op_t * op,ecs_rule_compile_ctx_t * ctx)
flecs_rule_op_ref_str	$FLECS/$FLECS/flecs.c	/^int32_t flecs_rule_op_ref_str($/;"	f	typeref:typename:int32_t	file:	signature:(const ecs_rule_t * rule,ecs_rule_ref_t * ref,ecs_flags16_t flags,ecs_strbuf_t * buf)
flecs_rule_op_str	$FLECS/$FLECS/flecs.c	/^const char* flecs_rule_op_str($/;"	p	typeref:typename:const char *	file:	signature:(uint16_t kind)
flecs_rule_optional	$FLECS/$FLECS/flecs.c	/^bool flecs_rule_optional($/;"	f	typeref:typename:bool	file:	signature:(const ecs_rule_op_t * op,bool redo,ecs_rule_run_ctx_t * ctx)
flecs_rule_or	$FLECS/$FLECS/flecs.c	/^bool flecs_rule_or($/;"	f	typeref:typename:bool	file:	signature:(const ecs_rule_op_t * op,bool redo,ecs_rule_run_ctx_t * ctx)
flecs_rule_pair_eq	$FLECS/$FLECS/flecs.c	/^bool flecs_rule_pair_eq($/;"	f	typeref:typename:bool	file:	signature:(const ecs_rule_op_t * op,bool redo,ecs_rule_run_ctx_t * ctx)
flecs_rule_populate	$FLECS/$FLECS/flecs.c	/^bool flecs_rule_populate($/;"	f	typeref:typename:bool	file:	signature:(const ecs_rule_op_t * op,bool redo,ecs_rule_run_ctx_t * ctx)
flecs_rule_populate_self	$FLECS/$FLECS/flecs.c	/^bool flecs_rule_populate_self($/;"	f	typeref:typename:bool	file:	signature:(const ecs_rule_op_t * op,bool redo,ecs_rule_run_ctx_t * ctx)
flecs_rule_pred_eq	$FLECS/$FLECS/flecs.c	/^bool flecs_rule_pred_eq($/;"	f	typeref:typename:bool	file:	signature:(const ecs_rule_op_t * op,bool redo,ecs_rule_run_ctx_t * ctx)
flecs_rule_pred_eq_match	$FLECS/$FLECS/flecs.c	/^bool flecs_rule_pred_eq_match($/;"	f	typeref:typename:bool	file:	signature:(const ecs_rule_op_t * op,bool redo,ecs_rule_run_ctx_t * ctx)
flecs_rule_pred_eq_name	$FLECS/$FLECS/flecs.c	/^bool flecs_rule_pred_eq_name($/;"	f	typeref:typename:bool	file:	signature:(const ecs_rule_op_t * op,bool redo,ecs_rule_run_ctx_t * ctx)
flecs_rule_pred_eq_w_range	$FLECS/$FLECS/flecs.c	/^bool flecs_rule_pred_eq_w_range($/;"	f	typeref:typename:bool	file:	signature:(const ecs_rule_op_t * op,bool redo,ecs_rule_run_ctx_t * ctx,ecs_table_range_t r)
flecs_rule_pred_match	$FLECS/$FLECS/flecs.c	/^bool flecs_rule_pred_match($/;"	f	typeref:typename:bool	file:	signature:(const ecs_rule_op_t * op,bool redo,ecs_rule_run_ctx_t * ctx,bool is_neq)
flecs_rule_pred_neq	$FLECS/$FLECS/flecs.c	/^bool flecs_rule_pred_neq($/;"	f	typeref:typename:bool	file:	signature:(const ecs_rule_op_t * op,bool redo,ecs_rule_run_ctx_t * ctx)
flecs_rule_pred_neq_match	$FLECS/$FLECS/flecs.c	/^bool flecs_rule_pred_neq_match($/;"	f	typeref:typename:bool	file:	signature:(const ecs_rule_op_t * op,bool redo,ecs_rule_run_ctx_t * ctx)
flecs_rule_pred_neq_name	$FLECS/$FLECS/flecs.c	/^bool flecs_rule_pred_neq_name($/;"	f	typeref:typename:bool	file:	signature:(const ecs_rule_op_t * op,bool redo,ecs_rule_run_ctx_t * ctx)
flecs_rule_pred_neq_w_range	$FLECS/$FLECS/flecs.c	/^bool flecs_rule_pred_neq_w_range($/;"	f	typeref:typename:bool	file:	signature:(const ecs_rule_op_t * op,bool redo,ecs_rule_run_ctx_t * ctx,ecs_table_range_t r)
flecs_rule_ref_flags	$FLECS/$FLECS/flecs.c	/^ecs_flags16_t flecs_rule_ref_flags($/;"	p	typeref:typename:ecs_flags16_t	file:	signature:(ecs_flags16_t flags,ecs_flags16_t kind)
flecs_rule_reset	$FLECS/$FLECS/flecs.c	/^bool flecs_rule_reset($/;"	f	typeref:typename:bool	file:	signature:(const ecs_rule_op_t * op,bool redo,const ecs_rule_run_ctx_t * ctx)
flecs_rule_reset_after_block	$FLECS/$FLECS/flecs.c	/^void flecs_rule_reset_after_block($/;"	f	typeref:typename:void	file:	signature:(const ecs_rule_op_t * start_op,ecs_rule_run_ctx_t * ctx,ecs_rule_ctrl_ctx_t * op_ctx)
flecs_rule_run_block	$FLECS/$FLECS/flecs.c	/^bool flecs_rule_run_block($/;"	f	typeref:typename:bool	file:	signature:(bool redo,ecs_rule_run_ctx_t * ctx,ecs_rule_ctrl_ctx_t * op_ctx)
flecs_rule_run_block_w_reset	$FLECS/$FLECS/flecs.c	/^bool flecs_rule_run_block_w_reset($/;"	f	typeref:typename:bool	file:	signature:(const ecs_rule_op_t * op,bool redo,ecs_rule_run_ctx_t * ctx)
flecs_rule_run_until	$FLECS/$FLECS/flecs.c	/^bool flecs_rule_run_until($/;"	p	typeref:typename:bool	file:	signature:(bool redo,ecs_rule_run_ctx_t * ctx,const ecs_rule_op_t * ops,ecs_rule_lbl_t first,ecs_rule_lbl_t cur,ecs_rule_op_kind_t until)
flecs_rule_select	$FLECS/$FLECS/flecs.c	/^bool flecs_rule_select($/;"	f	typeref:typename:bool	file:	signature:(const ecs_rule_op_t * op,bool redo,const ecs_rule_run_ctx_t * ctx)
flecs_rule_select_any	$FLECS/$FLECS/flecs.c	/^bool flecs_rule_select_any($/;"	f	typeref:typename:bool	file:	signature:(const ecs_rule_op_t * op,bool redo,const ecs_rule_run_ctx_t * ctx)
flecs_rule_select_id	$FLECS/$FLECS/flecs.c	/^bool flecs_rule_select_id($/;"	f	typeref:typename:bool	file:	signature:(const ecs_rule_op_t * op,bool redo,const ecs_rule_run_ctx_t * ctx,ecs_flags32_t table_filter)
flecs_rule_select_or	$FLECS/$FLECS/flecs.c	/^bool flecs_rule_select_or($/;"	f	typeref:typename:bool	file:	signature:(const ecs_rule_op_t * op,bool redo,ecs_rule_run_ctx_t * ctx)
flecs_rule_select_w_id	$FLECS/$FLECS/flecs.c	/^bool flecs_rule_select_w_id($/;"	f	typeref:typename:bool	file:	signature:(const ecs_rule_op_t * op,bool redo,const ecs_rule_run_ctx_t * ctx,ecs_id_t id,ecs_flags32_t filter_mask)
flecs_rule_self_up	$FLECS/$FLECS/flecs.c	/^bool flecs_rule_self_up($/;"	f	typeref:typename:bool	file:	signature:(const ecs_rule_op_t * op,bool redo,const ecs_rule_run_ctx_t * ctx)
flecs_rule_self_up_id	$FLECS/$FLECS/flecs.c	/^bool flecs_rule_self_up_id($/;"	f	typeref:typename:bool	file:	signature:(const ecs_rule_op_t * op,bool redo,const ecs_rule_run_ctx_t * ctx)
flecs_rule_self_up_with	$FLECS/$FLECS/flecs.c	/^bool flecs_rule_self_up_with($/;"	f	typeref:typename:bool	file:	signature:(const ecs_rule_op_t * op,bool redo,const ecs_rule_run_ctx_t * ctx,bool id_only)
flecs_rule_set_match	$FLECS/$FLECS/flecs.c	/^void flecs_rule_set_match($/;"	f	typeref:typename:void	file:	signature:(const ecs_rule_op_t * op,ecs_table_t * table,int32_t column,const ecs_rule_run_ctx_t * ctx)
flecs_rule_set_trav_match	$FLECS/$FLECS/flecs.c	/^void flecs_rule_set_trav_match($/;"	f	typeref:typename:void	file:	signature:(const ecs_rule_op_t * op,int32_t column,ecs_entity_t trav,ecs_entity_t second,const ecs_rule_run_ctx_t * ctx)
flecs_rule_set_vars	$FLECS/$FLECS/flecs.c	/^void flecs_rule_set_vars($/;"	f	typeref:typename:void	file:	signature:(const ecs_rule_op_t * op,ecs_id_t id,const ecs_rule_run_ctx_t * ctx)
flecs_rule_setfixed	$FLECS/$FLECS/flecs.c	/^bool flecs_rule_setfixed($/;"	f	typeref:typename:bool	file:	signature:(const ecs_rule_op_t * op,bool redo,ecs_rule_run_ctx_t * ctx)
flecs_rule_setid	$FLECS/$FLECS/flecs.c	/^bool flecs_rule_setid($/;"	f	typeref:typename:bool	file:	signature:(const ecs_rule_op_t * op,bool redo,ecs_rule_run_ctx_t * ctx)
flecs_rule_setids	$FLECS/$FLECS/flecs.c	/^bool flecs_rule_setids($/;"	f	typeref:typename:bool	file:	signature:(const ecs_rule_op_t * op,bool redo,ecs_rule_run_ctx_t * ctx)
flecs_rule_setthis	$FLECS/$FLECS/flecs.c	/^bool flecs_rule_setthis($/;"	f	typeref:typename:bool	file:	signature:(const ecs_rule_op_t * op,bool redo,ecs_rule_run_ctx_t * ctx)
flecs_rule_setvars	$FLECS/$FLECS/flecs.c	/^bool flecs_rule_setvars($/;"	f	typeref:typename:bool	file:	signature:(const ecs_rule_op_t * op,bool redo,ecs_rule_run_ctx_t * ctx)
flecs_rule_store	$FLECS/$FLECS/flecs.c	/^bool flecs_rule_store($/;"	f	typeref:typename:bool	file:	signature:(const ecs_rule_op_t * op,bool redo,const ecs_rule_run_ctx_t * ctx)
flecs_rule_table_filter	$FLECS/$FLECS/flecs.c	/^bool flecs_rule_table_filter($/;"	f	typeref:typename:bool	file:	signature:(ecs_table_t * table,ecs_rule_lbl_t other,ecs_flags32_t filter_mask)
flecs_rule_term_fixed_id	$FLECS/$FLECS/flecs.c	/^bool flecs_rule_term_fixed_id($/;"	f	typeref:typename:bool	file:	signature:(ecs_filter_t * filter,ecs_term_t * term)
flecs_rule_term_is_or	$FLECS/$FLECS/flecs.c	/^bool flecs_rule_term_is_or($/;"	f	typeref:typename:bool	file:	signature:(const ecs_filter_t * filter,const ecs_term_t * term)
flecs_rule_term_is_unknown	$FLECS/$FLECS/flecs.c	/^bool flecs_rule_term_is_unknown($/;"	f	typeref:typename:bool	file:	signature:(ecs_rule_t * rule,ecs_term_t * term,ecs_rule_compile_ctx_t * ctx)
flecs_rule_term_next_known	$FLECS/$FLECS/flecs.c	/^int32_t flecs_rule_term_next_known($/;"	f	typeref:typename:int32_t	file:	signature:(ecs_rule_t * rule,ecs_rule_compile_ctx_t * ctx,int32_t offset,ecs_flags64_t compiled)
flecs_rule_trav	$FLECS/$FLECS/flecs.c	/^bool flecs_rule_trav($/;"	f	typeref:typename:bool	file:	signature:(const ecs_rule_op_t * op,bool redo,const ecs_rule_run_ctx_t * ctx)
flecs_rule_trav_cache_fini	$FLECS/$FLECS/flecs.c	/^void flecs_rule_trav_cache_fini($/;"	p	typeref:typename:void	file:	signature:(ecs_allocator_t * a,ecs_trav_cache_t * cache)
flecs_rule_trav_fixed_src_reflexive	$FLECS/$FLECS/flecs.c	/^bool flecs_rule_trav_fixed_src_reflexive($/;"	f	typeref:typename:bool	file:	signature:(const ecs_rule_op_t * op,const ecs_rule_run_ctx_t * ctx,ecs_table_range_t * range,ecs_entity_t trav,ecs_entity_t second)
flecs_rule_trav_fixed_src_up_fixed_second	$FLECS/$FLECS/flecs.c	/^bool flecs_rule_trav_fixed_src_up_fixed_second($/;"	f	typeref:typename:bool	file:	signature:(const ecs_rule_op_t * op,bool redo,const ecs_rule_run_ctx_t * ctx)
flecs_rule_trav_fixed_src_up_unknown_second	$FLECS/$FLECS/flecs.c	/^bool flecs_rule_trav_fixed_src_up_unknown_second($/;"	f	typeref:typename:bool	file:	signature:(const ecs_rule_op_t * op,bool redo,const ecs_rule_run_ctx_t * ctx)
flecs_rule_trav_unknown_src_reflexive	$FLECS/$FLECS/flecs.c	/^bool flecs_rule_trav_unknown_src_reflexive($/;"	f	typeref:typename:bool	file:	signature:(const ecs_rule_op_t * op,const ecs_rule_run_ctx_t * ctx,ecs_entity_t trav,ecs_entity_t second)
flecs_rule_trav_unknown_src_up_fixed_second	$FLECS/$FLECS/flecs.c	/^bool flecs_rule_trav_unknown_src_up_fixed_second($/;"	f	typeref:typename:bool	file:	signature:(const ecs_rule_op_t * op,bool redo,const ecs_rule_run_ctx_t * ctx)
flecs_rule_trav_yield_reflexive_src	$FLECS/$FLECS/flecs.c	/^bool flecs_rule_trav_yield_reflexive_src($/;"	f	typeref:typename:bool	file:	signature:(const ecs_rule_op_t * op,const ecs_rule_run_ctx_t * ctx,ecs_table_range_t * range,ecs_entity_t trav)
flecs_rule_triv	$FLECS/$FLECS/flecs.c	/^bool flecs_rule_triv($/;"	f	typeref:typename:bool	file:	signature:(const ecs_rule_op_t * op,bool redo,const ecs_rule_run_ctx_t * ctx)
flecs_rule_triv_data	$FLECS/$FLECS/flecs.c	/^bool flecs_rule_triv_data($/;"	f	typeref:typename:bool	file:	signature:(const ecs_rule_op_t * op,bool redo,const ecs_rule_run_ctx_t * ctx)
flecs_rule_triv_wildcard	$FLECS/$FLECS/flecs.c	/^bool flecs_rule_triv_wildcard($/;"	f	typeref:typename:bool	file:	signature:(const ecs_rule_op_t * op,bool redo,const ecs_rule_run_ctx_t * ctx)
flecs_rule_trivial_init	$FLECS/$FLECS/flecs.c	/^bool flecs_rule_trivial_init($/;"	f	typeref:typename:bool	file:	signature:(ecs_world_t * world,const ecs_filter_t * filter)
flecs_rule_trivial_search	$FLECS/$FLECS/flecs.c	/^bool flecs_rule_trivial_search($/;"	p	typeref:typename:bool	file:	signature:(const ecs_rule_t * rule,const ecs_rule_run_ctx_t * ctx,ecs_rule_trivial_ctx_t * op_ctx,bool first,int32_t until)
flecs_rule_trivial_search_init	$FLECS/$FLECS/flecs.c	/^bool flecs_rule_trivial_search_init($/;"	f	typeref:typename:bool	file:	signature:(const ecs_rule_run_ctx_t * ctx,ecs_rule_trivial_ctx_t * op_ctx,const ecs_filter_t * filter,bool first)
flecs_rule_trivial_search_nodata	$FLECS/$FLECS/flecs.c	/^bool flecs_rule_trivial_search_nodata($/;"	p	typeref:typename:bool	file:	signature:(const ecs_rule_t * rule,const ecs_rule_run_ctx_t * ctx,ecs_rule_trivial_ctx_t * op_ctx,bool first,int32_t until)
flecs_rule_trivial_search_w_wildcards	$FLECS/$FLECS/flecs.c	/^bool flecs_rule_trivial_search_w_wildcards($/;"	p	typeref:typename:bool	file:	signature:(const ecs_rule_t * rule,const ecs_rule_run_ctx_t * ctx,ecs_rule_trivial_ctx_t * op_ctx,bool first,int32_t until)
flecs_rule_trivial_test	$FLECS/$FLECS/flecs.c	/^bool flecs_rule_trivial_test($/;"	p	typeref:typename:bool	file:	signature:(const ecs_rule_t * rule,const ecs_rule_run_ctx_t * ctx,bool first,int32_t term_count)
flecs_rule_trivial_test_w_wildcards	$FLECS/$FLECS/flecs.c	/^bool flecs_rule_trivial_test_w_wildcards($/;"	p	typeref:typename:bool	file:	signature:(const ecs_rule_t * rule,const ecs_rule_run_ctx_t * ctx,bool first,int32_t term_count)
flecs_rule_up	$FLECS/$FLECS/flecs.c	/^bool flecs_rule_up($/;"	f	typeref:typename:bool	file:	signature:(const ecs_rule_op_t * op,bool redo,const ecs_rule_run_ctx_t * ctx)
flecs_rule_up_cache_fini	$FLECS/$FLECS/flecs.c	/^void flecs_rule_up_cache_fini($/;"	p	typeref:typename:void	file:	signature:(ecs_trav_up_cache_t * cache)
flecs_rule_up_id	$FLECS/$FLECS/flecs.c	/^bool flecs_rule_up_id($/;"	f	typeref:typename:bool	file:	signature:(const ecs_rule_op_t * op,bool redo,const ecs_rule_run_ctx_t * ctx)
flecs_rule_up_select	$FLECS/$FLECS/flecs.c	/^bool flecs_rule_up_select($/;"	f	typeref:typename:bool	file:	signature:(const ecs_rule_op_t * op,bool redo,const ecs_rule_run_ctx_t * ctx,bool self,bool id_only)
flecs_rule_up_with	$FLECS/$FLECS/flecs.c	/^bool flecs_rule_up_with($/;"	f	typeref:typename:bool	file:	signature:(const ecs_rule_op_t * op,bool redo,const ecs_rule_run_ctx_t * ctx)
flecs_rule_var_get_entity	$FLECS/$FLECS/flecs.c	/^ecs_entity_t flecs_rule_var_get_entity($/;"	f	typeref:typename:ecs_entity_t	file:	signature:(ecs_var_id_t var_id,const ecs_rule_run_ctx_t * ctx)
flecs_rule_var_get_range	$FLECS/$FLECS/flecs.c	/^ecs_table_range_t flecs_rule_var_get_range($/;"	f	typeref:typename:ecs_table_range_t	file:	signature:(int32_t var_id,const ecs_rule_run_ctx_t * ctx)
flecs_rule_var_get_table	$FLECS/$FLECS/flecs.c	/^ecs_table_t* flecs_rule_var_get_table($/;"	f	typeref:typename:ecs_table_t *	file:	signature:(int32_t var_id,const ecs_rule_run_ctx_t * ctx)
flecs_rule_var_is_anonymous	$FLECS/$FLECS/flecs.c	/^bool flecs_rule_var_is_anonymous($/;"	f	typeref:typename:bool	file:	signature:(const ecs_rule_t * rule,ecs_var_id_t var_id)
flecs_rule_var_is_unknown	$FLECS/$FLECS/flecs.c	/^bool flecs_rule_var_is_unknown($/;"	f	typeref:typename:bool	file:	signature:(ecs_rule_t * rule,ecs_var_id_t var_id,ecs_rule_compile_ctx_t * ctx)
flecs_rule_var_reset	$FLECS/$FLECS/flecs.c	/^void flecs_rule_var_reset($/;"	f	typeref:typename:void	file:	signature:(ecs_var_id_t var_id,const ecs_rule_run_ctx_t * ctx)
flecs_rule_var_set_entity	$FLECS/$FLECS/flecs.c	/^void flecs_rule_var_set_entity($/;"	f	typeref:typename:void	file:	signature:(const ecs_rule_op_t * op,ecs_var_id_t var_id,ecs_entity_t entity,const ecs_rule_run_ctx_t * ctx)
flecs_rule_var_set_table	$FLECS/$FLECS/flecs.c	/^void flecs_rule_var_set_table($/;"	f	typeref:typename:void	file:	signature:(const ecs_rule_op_t * op,ecs_var_id_t var_id,ecs_table_t * table,int32_t offset,int32_t count,const ecs_rule_run_ctx_t * ctx)
flecs_rule_with	$FLECS/$FLECS/flecs.c	/^bool flecs_rule_with($/;"	f	typeref:typename:bool	file:	signature:(const ecs_rule_op_t * op,bool redo,const ecs_rule_run_ctx_t * ctx)
flecs_rule_with_id	$FLECS/$FLECS/flecs.c	/^bool flecs_rule_with_id($/;"	f	typeref:typename:bool	file:	signature:(const ecs_rule_op_t * op,bool redo,const ecs_rule_run_ctx_t * ctx)
flecs_rule_with_or	$FLECS/$FLECS/flecs.c	/^bool flecs_rule_with_or($/;"	f	typeref:typename:bool	file:	signature:(const ecs_rule_op_t * op,bool redo,ecs_rule_run_ctx_t * ctx)
flecs_rule_write	$FLECS/$FLECS/flecs.c	/^void flecs_rule_write($/;"	f	typeref:typename:void	file:	signature:(ecs_var_id_t var_id,uint64_t * written)
flecs_rule_write_ctx	$FLECS/$FLECS/flecs.c	/^void flecs_rule_write_ctx($/;"	f	typeref:typename:void	file:	signature:(ecs_var_id_t var_id,ecs_rule_compile_ctx_t * ctx,bool cond_write)
flecs_run_pipeline	$FLECS/$FLECS/flecs.c	/^void flecs_run_pipeline($/;"	p	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_pipeline_state_t * pq,ecs_ftime_t delta_time)
flecs_run_pipeline_ops	$FLECS/$FLECS/flecs.c	/^int32_t flecs_run_pipeline_ops($/;"	p	typeref:typename:int32_t	file:	signature:(ecs_world_t * world,ecs_stage_t * stage,int32_t stage_index,int32_t stage_count,ecs_ftime_t delta_time)
flecs_run_startup_systems	$FLECS/$FLECS/flecs.c	/^void flecs_run_startup_systems($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world)
flecs_s_max	$FLECS/$FLECS/flecs.c	/^static int64_t flecs_s_max[] = { $/;"	v	typeref:typename:int64_t[]	file:
flecs_s_min	$FLECS/$FLECS/flecs.c	/^static int64_t flecs_s_min[] = { $/;"	v	typeref:typename:int64_t[]	file:
flecs_script_tag	$FLECS/$FLECS/flecs.c	/^ecs_id_t flecs_script_tag($/;"	f	typeref:typename:ecs_id_t	file:	signature:(ecs_entity_t script,ecs_entity_t instance)
flecs_search_relation_w_idr	$FLECS/$FLECS/flecs.c	/^int32_t flecs_search_relation_w_idr($/;"	p	typeref:typename:int32_t	file:	signature:(const ecs_world_t * world,const ecs_table_t * table,int32_t offset,ecs_id_t id,ecs_entity_t rel,ecs_flags32_t flags,ecs_entity_t * subject_out,ecs_id_t * id_out,struct ecs_table_record_t ** tr_out,ecs_id_record_t * idr)
flecs_search_w_idr	$FLECS/$FLECS/flecs.c	/^int32_t flecs_search_w_idr($/;"	p	typeref:typename:int32_t	file:	signature:(const ecs_world_t * world,const ecs_table_t * table,ecs_id_t id,ecs_id_t * id_out,ecs_id_record_t * idr)
flecs_set_array	$FLECS/$FLECS/flecs.c	/^void flecs_set_array(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:	signature:(ecs_iter_t * it)
flecs_set_custom_type	$FLECS/$FLECS/flecs.c	/^void flecs_set_custom_type(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:	signature:(ecs_iter_t * it)
flecs_set_id_flag	$FLECS/$FLECS/flecs.c	/^bool flecs_set_id_flag($/;"	f	typeref:typename:bool	file:	signature:(ecs_id_record_t * idr,ecs_flags32_t flag)
flecs_set_identifier	$FLECS/$FLECS/flecs.c	/^ecs_entity_t flecs_set_identifier($/;"	f	typeref:typename:ecs_entity_t	file:	signature:(ecs_world_t * world,ecs_stage_t * stage,ecs_entity_t entity,ecs_entity_t tag,const char * name)
flecs_set_member	$FLECS/$FLECS/flecs.c	/^void flecs_set_member(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:	signature:(ecs_iter_t * it)
flecs_set_member_ranges	$FLECS/$FLECS/flecs.c	/^void flecs_set_member_ranges(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:	signature:(ecs_iter_t * it)
flecs_set_primitive	$FLECS/$FLECS/flecs.c	/^void flecs_set_primitive(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:	signature:(ecs_iter_t * it)
flecs_set_source_set_flag	$FLECS/$FLECS/flecs.c	/^void flecs_set_source_set_flag($/;"	f	typeref:typename:void	file:	signature:(const ecs_rule_run_ctx_t * ctx,int32_t field_index)
flecs_set_struct_member	$FLECS/$FLECS/flecs.c	/^void flecs_set_struct_member($/;"	f	typeref:typename:void	file:	signature:(ecs_member_t * member,ecs_entity_t entity,const char * name,ecs_entity_t type,int32_t count,int32_t offset,ecs_entity_t unit,EcsMemberRanges * ranges)
flecs_set_threads_internal	$FLECS/$FLECS/flecs.c	/^void flecs_set_threads_internal($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,int32_t threads,bool use_task_api)
flecs_set_union	$FLECS/$FLECS/flecs.c	/^void flecs_set_union($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_table_t * table,int32_t row,int32_t count,const ecs_type_t * ids)
flecs_set_unit	$FLECS/$FLECS/flecs.c	/^void flecs_set_unit(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:	signature:(ecs_iter_t * it)
flecs_set_var_label	$FLECS/$FLECS/flecs.c	/^#define flecs_set_var_label(/;"	d	file:	signature:(var,lbl)
flecs_set_vector	$FLECS/$FLECS/flecs.c	/^void flecs_set_vector(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:	signature:(ecs_iter_t * it)
flecs_signal_workers	$FLECS/$FLECS/flecs.c	/^void flecs_signal_workers($/;"	p	typeref:typename:void	file:	signature:(ecs_world_t * world)
flecs_signed_char__	$FLECS/$FLECS/flecs.c	/^#define flecs_signed_char__ /;"	d	file:
flecs_signed_ecs_entity_t__	$FLECS/$FLECS/flecs.c	/^#define flecs_signed_ecs_entity_t__ /;"	d	file:
flecs_signed_ecs_size_t__	$FLECS/$FLECS/flecs.c	/^#define flecs_signed_ecs_size_t__ /;"	d	file:
flecs_signed_int16_t__	$FLECS/$FLECS/flecs.c	/^#define flecs_signed_int16_t__ /;"	d	file:
flecs_signed_int32_t__	$FLECS/$FLECS/flecs.c	/^#define flecs_signed_int32_t__ /;"	d	file:
flecs_signed_int64_t__	$FLECS/$FLECS/flecs.c	/^#define flecs_signed_int64_t__ /;"	d	file:
flecs_signed_int8_t__	$FLECS/$FLECS/flecs.c	/^#define flecs_signed_int8_t__ /;"	d	file:
flecs_signed_int__	$FLECS/$FLECS/flecs.c	/^#define flecs_signed_int__ /;"	d	file:
flecs_signed_intptr_t__	$FLECS/$FLECS/flecs.c	/^#define flecs_signed_intptr_t__ /;"	d	file:
flecs_signed_long__	$FLECS/$FLECS/flecs.c	/^#define flecs_signed_long__ /;"	d	file:
flecs_signed_short__	$FLECS/$FLECS/flecs.c	/^#define flecs_signed_short__ /;"	d	file:
flecs_signed_size_t__	$FLECS/$FLECS/flecs.c	/^#define flecs_signed_size_t__ /;"	d	file:
flecs_signed_uint16_t__	$FLECS/$FLECS/flecs.c	/^#define flecs_signed_uint16_t__ /;"	d	file:
flecs_signed_uint32_t__	$FLECS/$FLECS/flecs.c	/^#define flecs_signed_uint32_t__ /;"	d	file:
flecs_signed_uint64_t__	$FLECS/$FLECS/flecs.c	/^#define flecs_signed_uint64_t__ /;"	d	file:
flecs_signed_uint8_t__	$FLECS/$FLECS/flecs.c	/^#define flecs_signed_uint8_t__ /;"	d	file:
flecs_signed_uintptr_t__	$FLECS/$FLECS/flecs.c	/^#define flecs_signed_uintptr_t__ /;"	d	file:
flecs_sparse_add	$FLECS/$FLECS/flecs.c	/^void* flecs_sparse_add($/;"	f	typeref:typename:void *	signature:(ecs_sparse_t * sparse,ecs_size_t size)
flecs_sparse_add	$FLECS/$FLECS/flecs.h	/^void* flecs_sparse_add($/;"	p	typeref:typename:FLECS_DBG_API void *	signature:(ecs_sparse_t * sparse,ecs_size_t elem_size)
flecs_sparse_add_t	$FLECS/$FLECS/flecs.h	/^#define flecs_sparse_add_t(/;"	d	signature:(sparse,T)
flecs_sparse_assign_index	$FLECS/$FLECS/flecs.c	/^void flecs_sparse_assign_index($/;"	f	typeref:typename:void	file:	signature:(ecs_page_t * page,uint64_t * dense_array,uint64_t index,int32_t dense)
flecs_sparse_clear	$FLECS/$FLECS/flecs.c	/^void flecs_sparse_clear($/;"	f	typeref:typename:void	signature:(ecs_sparse_t * sparse)
flecs_sparse_clear	$FLECS/$FLECS/flecs.h	/^void flecs_sparse_clear($/;"	p	typeref:typename:FLECS_DBG_API void	signature:(ecs_sparse_t * sparse)
flecs_sparse_count	$FLECS/$FLECS/flecs.c	/^int32_t flecs_sparse_count($/;"	f	typeref:typename:int32_t	signature:(const ecs_sparse_t * sparse)
flecs_sparse_count	$FLECS/$FLECS/flecs.h	/^int32_t flecs_sparse_count($/;"	p	typeref:typename:FLECS_DBG_API int32_t	signature:(const ecs_sparse_t * sparse)
flecs_sparse_create_id	$FLECS/$FLECS/flecs.c	/^uint64_t flecs_sparse_create_id($/;"	f	typeref:typename:uint64_t	file:	signature:(ecs_sparse_t * sparse,int32_t dense)
flecs_sparse_ensure	$FLECS/$FLECS/flecs.c	/^void* flecs_sparse_ensure($/;"	f	typeref:typename:void *	signature:(ecs_sparse_t * sparse,ecs_size_t size,uint64_t index)
flecs_sparse_ensure	$FLECS/$FLECS/flecs.h	/^void* flecs_sparse_ensure($/;"	p	typeref:typename:FLECS_DBG_API void *	signature:(ecs_sparse_t * sparse,ecs_size_t elem_size,uint64_t id)
flecs_sparse_ensure_fast	$FLECS/$FLECS/flecs.c	/^void* flecs_sparse_ensure_fast($/;"	f	typeref:typename:void *	signature:(ecs_sparse_t * sparse,ecs_size_t size,uint64_t index_long)
flecs_sparse_ensure_fast	$FLECS/$FLECS/flecs.h	/^void* flecs_sparse_ensure_fast($/;"	p	typeref:typename:FLECS_DBG_API void *	signature:(ecs_sparse_t * sparse,ecs_size_t elem_size,uint64_t id)
flecs_sparse_ensure_fast_t	$FLECS/$FLECS/flecs.h	/^#define flecs_sparse_ensure_fast_t(/;"	d	signature:(sparse,T,index)
flecs_sparse_ensure_t	$FLECS/$FLECS/flecs.h	/^#define flecs_sparse_ensure_t(/;"	d	signature:(sparse,T,index)
flecs_sparse_fini	$FLECS/$FLECS/flecs.c	/^void flecs_sparse_fini($/;"	f	typeref:typename:void	signature:(ecs_sparse_t * sparse)
flecs_sparse_fini	$FLECS/$FLECS/flecs.h	/^void flecs_sparse_fini($/;"	p	typeref:typename:FLECS_DBG_API void	signature:(ecs_sparse_t * sparse)
flecs_sparse_get	$FLECS/$FLECS/flecs.c	/^void* flecs_sparse_get($/;"	f	typeref:typename:void *	signature:(const ecs_sparse_t * sparse,ecs_size_t size,uint64_t index)
flecs_sparse_get	$FLECS/$FLECS/flecs.h	/^void* flecs_sparse_get($/;"	p	typeref:typename:FLECS_DBG_API void *	signature:(const ecs_sparse_t * sparse,ecs_size_t elem_size,uint64_t id)
flecs_sparse_get_any	$FLECS/$FLECS/flecs.c	/^void* flecs_sparse_get_any($/;"	f	typeref:typename:void *	signature:(const ecs_sparse_t * sparse,ecs_size_t size,uint64_t index)
flecs_sparse_get_any	$FLECS/$FLECS/flecs.h	/^void* flecs_sparse_get_any($/;"	p	typeref:typename:FLECS_DBG_API void *	signature:(const ecs_sparse_t * sparse,ecs_size_t elem_size,uint64_t id)
flecs_sparse_get_any_t	$FLECS/$FLECS/flecs.h	/^#define flecs_sparse_get_any_t(/;"	d	signature:(sparse,T,index)
flecs_sparse_get_dense	$FLECS/$FLECS/flecs.c	/^void* flecs_sparse_get_dense($/;"	f	typeref:typename:void *	signature:(const ecs_sparse_t * sparse,ecs_size_t size,int32_t dense_index)
flecs_sparse_get_dense	$FLECS/$FLECS/flecs.h	/^void* flecs_sparse_get_dense($/;"	p	typeref:typename:FLECS_DBG_API void *	signature:(const ecs_sparse_t * sparse,ecs_size_t elem_size,int32_t index)
flecs_sparse_get_dense_t	$FLECS/$FLECS/flecs.h	/^#define flecs_sparse_get_dense_t(/;"	d	signature:(sparse,T,index)
flecs_sparse_get_id	$FLECS/$FLECS/flecs.c	/^uint64_t flecs_sparse_get_id($/;"	f	typeref:typename:uint64_t	file:	signature:(const ecs_sparse_t * sparse)
flecs_sparse_get_or_create_page	$FLECS/$FLECS/flecs.c	/^ecs_page_t* flecs_sparse_get_or_create_page($/;"	f	typeref:typename:ecs_page_t *	file:	signature:(ecs_sparse_t * sparse,int32_t page_index)
flecs_sparse_get_page	$FLECS/$FLECS/flecs.c	/^ecs_page_t* flecs_sparse_get_page($/;"	f	typeref:typename:ecs_page_t *	file:	signature:(const ecs_sparse_t * sparse,int32_t page_index)
flecs_sparse_get_sparse	$FLECS/$FLECS/flecs.c	/^void* flecs_sparse_get_sparse($/;"	f	typeref:typename:void *	file:	signature:(const ecs_sparse_t * sparse,int32_t dense,uint64_t index)
flecs_sparse_get_t	$FLECS/$FLECS/flecs.h	/^#define flecs_sparse_get_t(/;"	d	signature:(sparse,T,index)
flecs_sparse_grow_dense	$FLECS/$FLECS/flecs.c	/^void flecs_sparse_grow_dense($/;"	f	typeref:typename:void	file:	signature:(ecs_sparse_t * sparse)
flecs_sparse_ids	$FLECS/$FLECS/flecs.c	/^const uint64_t* flecs_sparse_ids($/;"	f	typeref:typename:const uint64_t *	signature:(const ecs_sparse_t * sparse)
flecs_sparse_ids	$FLECS/$FLECS/flecs.h	/^const uint64_t* flecs_sparse_ids($/;"	p	typeref:typename:FLECS_DBG_API const uint64_t *	signature:(const ecs_sparse_t * sparse)
flecs_sparse_inc_gen	$FLECS/$FLECS/flecs.c	/^uint64_t flecs_sparse_inc_gen($/;"	f	typeref:typename:uint64_t	file:	signature:(uint64_t index)
flecs_sparse_inc_id	$FLECS/$FLECS/flecs.c	/^uint64_t flecs_sparse_inc_id($/;"	f	typeref:typename:uint64_t	file:	signature:(ecs_sparse_t * sparse)
flecs_sparse_init	$FLECS/$FLECS/flecs.c	/^void flecs_sparse_init($/;"	f	typeref:typename:void	signature:(ecs_sparse_t * result,struct ecs_allocator_t * allocator,ecs_block_allocator_t * page_allocator,ecs_size_t size)
flecs_sparse_init	$FLECS/$FLECS/flecs.h	/^void flecs_sparse_init($/;"	p	typeref:typename:FLECS_DBG_API void	signature:(ecs_sparse_t * sparse,struct ecs_allocator_t * allocator,struct ecs_block_allocator_t * page_allocator,ecs_size_t elem_size)
flecs_sparse_init_t	$FLECS/$FLECS/flecs.h	/^#define flecs_sparse_init_t(/;"	d	signature:(sparse,allocator,page_allocator,T)
flecs_sparse_is_alive	$FLECS/$FLECS/flecs.c	/^bool flecs_sparse_is_alive($/;"	f	typeref:typename:bool	signature:(const ecs_sparse_t * sparse,uint64_t index)
flecs_sparse_is_alive	$FLECS/$FLECS/flecs.h	/^bool flecs_sparse_is_alive($/;"	p	typeref:typename:FLECS_DBG_API bool	signature:(const ecs_sparse_t * sparse,uint64_t id)
flecs_sparse_last_id	$FLECS/$FLECS/flecs.c	/^uint64_t flecs_sparse_last_id($/;"	f	typeref:typename:uint64_t	signature:(const ecs_sparse_t * sparse)
flecs_sparse_last_id	$FLECS/$FLECS/flecs.h	/^uint64_t flecs_sparse_last_id($/;"	p	typeref:typename:FLECS_DBG_API uint64_t	signature:(const ecs_sparse_t * sparse)
flecs_sparse_new_id	$FLECS/$FLECS/flecs.c	/^uint64_t flecs_sparse_new_id($/;"	f	typeref:typename:uint64_t	signature:(ecs_sparse_t * sparse)
flecs_sparse_new_id	$FLECS/$FLECS/flecs.h	/^uint64_t flecs_sparse_new_id($/;"	p	typeref:typename:FLECS_DBG_API uint64_t	signature:(ecs_sparse_t * sparse)
flecs_sparse_new_index	$FLECS/$FLECS/flecs.c	/^uint64_t flecs_sparse_new_index($/;"	f	typeref:typename:uint64_t	file:	signature:(ecs_sparse_t * sparse)
flecs_sparse_page_free	$FLECS/$FLECS/flecs.c	/^void flecs_sparse_page_free($/;"	f	typeref:typename:void	file:	signature:(ecs_sparse_t * sparse,ecs_page_t * page)
flecs_sparse_page_new	$FLECS/$FLECS/flecs.c	/^ecs_page_t* flecs_sparse_page_new($/;"	f	typeref:typename:ecs_page_t *	file:	signature:(ecs_sparse_t * sparse,int32_t page_index)
flecs_sparse_remove	$FLECS/$FLECS/flecs.c	/^void flecs_sparse_remove($/;"	f	typeref:typename:void	signature:(ecs_sparse_t * sparse,ecs_size_t size,uint64_t index)
flecs_sparse_remove	$FLECS/$FLECS/flecs.h	/^void flecs_sparse_remove($/;"	p	typeref:typename:FLECS_DBG_API void	signature:(ecs_sparse_t * sparse,ecs_size_t elem_size,uint64_t id)
flecs_sparse_remove_t	$FLECS/$FLECS/flecs.h	/^#define flecs_sparse_remove_t(/;"	d	signature:(sparse,T,id)
flecs_sparse_set_generation	$FLECS/$FLECS/flecs.c	/^void flecs_sparse_set_generation($/;"	f	typeref:typename:void	signature:(ecs_sparse_t * sparse,uint64_t index)
flecs_sparse_set_generation	$FLECS/$FLECS/flecs.h	/^void flecs_sparse_set_generation($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_sparse_t * sparse,uint64_t id)
flecs_sparse_set_id	$FLECS/$FLECS/flecs.c	/^void flecs_sparse_set_id($/;"	f	typeref:typename:void	file:	signature:(ecs_sparse_t * sparse,uint64_t value)
flecs_sparse_strip_generation	$FLECS/$FLECS/flecs.c	/^uint64_t flecs_sparse_strip_generation($/;"	f	typeref:typename:uint64_t	file:	signature:(uint64_t * index_out)
flecs_sparse_swap_dense	$FLECS/$FLECS/flecs.c	/^void flecs_sparse_swap_dense($/;"	f	typeref:typename:void	file:	signature:(ecs_sparse_t * sparse,ecs_page_t * page_a,int32_t a,int32_t b)
flecs_sparse_try	$FLECS/$FLECS/flecs.c	/^void* flecs_sparse_try($/;"	f	typeref:typename:void *	signature:(const ecs_sparse_t * sparse,ecs_size_t size,uint64_t index)
flecs_sparse_try	$FLECS/$FLECS/flecs.h	/^void* flecs_sparse_try($/;"	p	typeref:typename:FLECS_DBG_API void *	signature:(const ecs_sparse_t * sparse,ecs_size_t elem_size,uint64_t id)
flecs_sparse_try_t	$FLECS/$FLECS/flecs.h	/^#define flecs_sparse_try_t(/;"	d	signature:(sparse,T,index)
flecs_stack_alloc	$FLECS/$FLECS/flecs.c	/^void* flecs_stack_alloc($/;"	p	typeref:typename:FLECS_DBG_API void *	file:	signature:(ecs_stack_t * stack,ecs_size_t size,ecs_size_t align)
flecs_stack_alloc_n	$FLECS/$FLECS/flecs.c	/^#define flecs_stack_alloc_n(/;"	d	file:	signature:(stack,T,count)
flecs_stack_alloc_t	$FLECS/$FLECS/flecs.c	/^#define flecs_stack_alloc_t(/;"	d	file:	signature:(stack,T)
flecs_stack_calloc	$FLECS/$FLECS/flecs.c	/^void* flecs_stack_calloc($/;"	p	typeref:typename:FLECS_DBG_API void *	file:	signature:(ecs_stack_t * stack,ecs_size_t size,ecs_size_t align)
flecs_stack_calloc_n	$FLECS/$FLECS/flecs.c	/^#define flecs_stack_calloc_n(/;"	d	file:	signature:(stack,T,count)
flecs_stack_calloc_t	$FLECS/$FLECS/flecs.c	/^#define flecs_stack_calloc_t(/;"	d	file:	signature:(stack,T)
flecs_stack_fini	$FLECS/$FLECS/flecs.c	/^void flecs_stack_fini($/;"	p	typeref:typename:FLECS_DBG_API void	file:	signature:(ecs_stack_t * stack)
flecs_stack_free	$FLECS/$FLECS/flecs.c	/^void flecs_stack_free($/;"	p	typeref:typename:FLECS_DBG_API void	file:	signature:(void * ptr,ecs_size_t size)
flecs_stack_free_n	$FLECS/$FLECS/flecs.c	/^#define flecs_stack_free_n(/;"	d	file:	signature:(ptr,T,count)
flecs_stack_free_t	$FLECS/$FLECS/flecs.c	/^#define flecs_stack_free_t(/;"	d	file:	signature:(ptr,T)
flecs_stack_get_cursor	$FLECS/$FLECS/flecs.c	/^ecs_stack_cursor_t* flecs_stack_get_cursor($/;"	p	typeref:typename:FLECS_DBG_API ecs_stack_cursor_t *	file:	signature:(ecs_stack_t * stack)
flecs_stack_init	$FLECS/$FLECS/flecs.c	/^void flecs_stack_init($/;"	p	typeref:typename:FLECS_DBG_API void	file:	signature:(ecs_stack_t * stack)
flecs_stack_page_new	$FLECS/$FLECS/flecs.c	/^ecs_stack_page_t* flecs_stack_page_new(uint32_t page_id) {$/;"	f	typeref:typename:ecs_stack_page_t *	file:	signature:(uint32_t page_id)
flecs_stack_reset	$FLECS/$FLECS/flecs.c	/^void flecs_stack_reset($/;"	p	typeref:typename:void	file:	signature:(ecs_stack_t * stack)
flecs_stack_restore_cursor	$FLECS/$FLECS/flecs.c	/^void flecs_stack_restore_cursor($/;"	p	typeref:typename:FLECS_DBG_API void	file:	signature:(ecs_stack_t * stack,ecs_stack_cursor_t * cursor)
flecs_stage_auto_merge	$FLECS/$FLECS/flecs.c	/^void flecs_stage_auto_merge($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world)
flecs_stage_fini	$FLECS/$FLECS/flecs.c	/^void flecs_stage_fini($/;"	p	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_stage_t * stage)
flecs_stage_from_readonly_world	$FLECS/$FLECS/flecs.c	/^const ecs_stage_t* flecs_stage_from_readonly_world($/;"	p	typeref:typename:const ecs_stage_t *	file:	signature:(const ecs_world_t * world)
flecs_stage_from_world	$FLECS/$FLECS/flecs.c	/^ecs_stage_t* flecs_stage_from_world($/;"	p	typeref:typename:ecs_stage_t *	file:	signature:(ecs_world_t ** world_ptr)
flecs_stage_init	$FLECS/$FLECS/flecs.c	/^void flecs_stage_init($/;"	p	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_stage_t * stage)
flecs_stage_manual_merge	$FLECS/$FLECS/flecs.c	/^void flecs_stage_manual_merge($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world)
flecs_stage_merge_post_frame	$FLECS/$FLECS/flecs.c	/^void flecs_stage_merge_post_frame($/;"	p	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_stage_t * stage)
flecs_stages_merge	$FLECS/$FLECS/flecs.c	/^void flecs_stages_merge($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,bool force_merge)
flecs_start_measure_frame	$FLECS/$FLECS/flecs.c	/^ecs_ftime_t flecs_start_measure_frame($/;"	f	typeref:typename:ecs_ftime_t	file:	signature:(ecs_world_t * world,ecs_ftime_t user_delta_time)
flecs_start_workers	$FLECS/$FLECS/flecs.c	/^void flecs_start_workers($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,int32_t threads)
flecs_static_assert	$FLECS/$FLECS/flecs.h	/^#define flecs_static_assert(/;"	d	signature:(cond,str)
flecs_stats_copy_last	$FLECS/$FLECS/flecs.c	/^void flecs_stats_copy_last($/;"	f	typeref:typename:void	file:	signature:(ecs_metric_t * dst_cur,ecs_metric_t * dst_last,ecs_metric_t * src_cur,int32_t t_dst,int32_t t_src)
flecs_stats_monitor_import	$FLECS/$FLECS/flecs.c	/^void flecs_stats_monitor_import($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_id_t kind,size_t size)
flecs_stats_reduce	$FLECS/$FLECS/flecs.c	/^void flecs_stats_reduce($/;"	f	typeref:typename:void	file:	signature:(ecs_metric_t * dst_cur,ecs_metric_t * dst_last,ecs_metric_t * src_cur,int32_t t_dst,int32_t t_src)
flecs_stats_reduce_last	$FLECS/$FLECS/flecs.c	/^void flecs_stats_reduce_last($/;"	f	typeref:typename:void	file:	signature:(ecs_metric_t * dst_cur,ecs_metric_t * dst_last,ecs_metric_t * src_cur,int32_t t_dst,int32_t t_src,int32_t count)
flecs_stats_repeat_last	$FLECS/$FLECS/flecs.c	/^void flecs_stats_repeat_last($/;"	f	typeref:typename:void	file:	signature:(ecs_metric_t * cur,ecs_metric_t * last,int32_t t)
flecs_stop_measure_frame	$FLECS/$FLECS/flecs.c	/^void flecs_stop_measure_frame($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world)
flecs_str_to_expr_oper	$FLECS/$FLECS/flecs.c	/^const char* flecs_str_to_expr_oper($/;"	f	typeref:typename:const char *	file:	signature:(const char * str,ecs_expr_oper_t * op)
flecs_strbuf_appendch	$FLECS/$FLECS/flecs.c	/^bool flecs_strbuf_appendch($/;"	f	typeref:typename:bool	file:	signature:(ecs_strbuf_t * b,char ch)
flecs_strbuf_appendstr	$FLECS/$FLECS/flecs.c	/^bool flecs_strbuf_appendstr($/;"	f	typeref:typename:bool	file:	signature:(ecs_strbuf_t * b,const char * str,int n)
flecs_strbuf_ftoa	$FLECS/$FLECS/flecs.c	/^int flecs_strbuf_ftoa($/;"	f	typeref:typename:int	file:	signature:(ecs_strbuf_t * out,double f,int precision,char nan_delim)
flecs_strbuf_grow	$FLECS/$FLECS/flecs.c	/^void flecs_strbuf_grow($/;"	f	typeref:typename:void	file:	signature:(ecs_strbuf_t * b)
flecs_strbuf_grow_str	$FLECS/$FLECS/flecs.c	/^void flecs_strbuf_grow_str($/;"	f	typeref:typename:void	file:	signature:(ecs_strbuf_t * b,const char * str,char * alloc_str,int32_t size)
flecs_strbuf_init	$FLECS/$FLECS/flecs.c	/^void flecs_strbuf_init($/;"	f	typeref:typename:void	file:	signature:(ecs_strbuf_t * b)
flecs_strbuf_itoa	$FLECS/$FLECS/flecs.c	/^char* flecs_strbuf_itoa($/;"	f	typeref:typename:char *	file:	signature:(char * buf,int64_t v)
flecs_strbuf_memLeft	$FLECS/$FLECS/flecs.c	/^int32_t flecs_strbuf_memLeft($/;"	f	typeref:typename:int32_t	file:	signature:(ecs_strbuf_t * b)
flecs_strbuf_memLeftInCurrentElement	$FLECS/$FLECS/flecs.c	/^int32_t flecs_strbuf_memLeftInCurrentElement($/;"	f	typeref:typename:int32_t	file:	signature:(ecs_strbuf_t * b)
flecs_strbuf_ptr	$FLECS/$FLECS/flecs.c	/^char* flecs_strbuf_ptr($/;"	f	typeref:typename:char *	file:	signature:(ecs_strbuf_t * b)
flecs_strbuf_vappend	$FLECS/$FLECS/flecs.c	/^bool flecs_strbuf_vappend($/;"	f	typeref:typename:bool	file:	signature:(ecs_strbuf_t * b,const char * str,va_list args)
flecs_strdup	$FLECS/$FLECS/flecs.c	/^char* flecs_strdup($/;"	f	typeref:typename:char *	signature:(ecs_allocator_t * a,const char * str)
flecs_strdup	$FLECS/$FLECS/flecs.h	/^char* flecs_strdup($/;"	p	typeref:typename:FLECS_API char *	signature:(ecs_allocator_t * a,const char * str)
flecs_strfree	$FLECS/$FLECS/flecs.c	/^void flecs_strfree($/;"	f	typeref:typename:void	signature:(ecs_allocator_t * a,char * str)
flecs_strfree	$FLECS/$FLECS/flecs.h	/^void flecs_strfree($/;"	p	typeref:typename:FLECS_API void	signature:(ecs_allocator_t * a,char * str)
flecs_string_hash	$FLECS/$FLECS/flecs.c	/^uint64_t flecs_string_hash($/;"	p	typeref:typename:uint64_t	file:	signature:(const void * ptr)
flecs_struct_dtor	$FLECS/$FLECS/flecs.c	/^static void flecs_struct_dtor($/;"	f	file:	signature:(EcsStruct * ptr)
flecs_suspend_readonly	$FLECS/$FLECS/flecs.c	/^ecs_world_t* flecs_suspend_readonly($/;"	p	typeref:typename:ecs_world_t *	file:	signature:(const ecs_world_t * world,ecs_suspend_readonly_state_t * state)
flecs_switch_add	$FLECS/$FLECS/flecs.c	/^void flecs_switch_add($/;"	p	typeref:typename:FLECS_DBG_API void	file:	signature:(ecs_switch_t * sw)
flecs_switch_addn	$FLECS/$FLECS/flecs.c	/^void flecs_switch_addn($/;"	p	typeref:typename:FLECS_DBG_API void	file:	signature:(ecs_switch_t * sw,int32_t count)
flecs_switch_case_count	$FLECS/$FLECS/flecs.c	/^int32_t flecs_switch_case_count($/;"	p	typeref:typename:FLECS_DBG_API int32_t	file:	signature:(const ecs_switch_t * sw,uint64_t value)
flecs_switch_clear	$FLECS/$FLECS/flecs.c	/^void flecs_switch_clear($/;"	p	typeref:typename:FLECS_DBG_API void	file:	signature:(ecs_switch_t * sw)
flecs_switch_count	$FLECS/$FLECS/flecs.c	/^int32_t flecs_switch_count($/;"	p	typeref:typename:FLECS_DBG_API int32_t	file:	signature:(ecs_switch_t * sw)
flecs_switch_ensure	$FLECS/$FLECS/flecs.c	/^void flecs_switch_ensure($/;"	p	typeref:typename:FLECS_DBG_API void	file:	signature:(ecs_switch_t * sw,int32_t count)
flecs_switch_ensure_header	$FLECS/$FLECS/flecs.c	/^ecs_switch_header_t *flecs_switch_ensure_header($/;"	f	typeref:typename:ecs_switch_header_t *	file:	signature:(ecs_switch_t * sw,uint64_t value)
flecs_switch_fini	$FLECS/$FLECS/flecs.c	/^void flecs_switch_fini($/;"	p	typeref:typename:FLECS_DBG_API void	file:	signature:(ecs_switch_t * sw)
flecs_switch_first	$FLECS/$FLECS/flecs.c	/^int32_t flecs_switch_first($/;"	p	typeref:typename:FLECS_DBG_API int32_t	file:	signature:(const ecs_switch_t * sw,uint64_t value)
flecs_switch_get	$FLECS/$FLECS/flecs.c	/^uint64_t flecs_switch_get($/;"	p	typeref:typename:FLECS_DBG_API uint64_t	file:	signature:(const ecs_switch_t * sw,int32_t element)
flecs_switch_get_header	$FLECS/$FLECS/flecs.c	/^ecs_switch_header_t* flecs_switch_get_header($/;"	f	typeref:typename:ecs_switch_header_t *	file:	signature:(const ecs_switch_t * sw,uint64_t value)
flecs_switch_init	$FLECS/$FLECS/flecs.c	/^void flecs_switch_init($/;"	p	typeref:typename:FLECS_DBG_API void	file:	signature:(ecs_switch_t * sw,ecs_allocator_t * allocator,int32_t elements)
flecs_switch_next	$FLECS/$FLECS/flecs.c	/^int32_t flecs_switch_next($/;"	p	typeref:typename:FLECS_DBG_API int32_t	file:	signature:(const ecs_switch_t * sw,int32_t elem)
flecs_switch_remove	$FLECS/$FLECS/flecs.c	/^void flecs_switch_remove($/;"	p	typeref:typename:FLECS_DBG_API void	file:	signature:(ecs_switch_t * sw,int32_t element)
flecs_switch_remove_node	$FLECS/$FLECS/flecs.c	/^void flecs_switch_remove_node($/;"	f	typeref:typename:void	file:	signature:(ecs_switch_header_t * hdr,ecs_switch_node_t * nodes,ecs_switch_node_t * node,int32_t element)
flecs_switch_set	$FLECS/$FLECS/flecs.c	/^void flecs_switch_set($/;"	p	typeref:typename:FLECS_DBG_API void	file:	signature:(ecs_switch_t * sw,int32_t element,uint64_t value)
flecs_switch_set_count	$FLECS/$FLECS/flecs.c	/^void flecs_switch_set_count($/;"	p	typeref:typename:FLECS_DBG_API void	file:	signature:(ecs_switch_t * sw,int32_t count)
flecs_switch_swap	$FLECS/$FLECS/flecs.c	/^void flecs_switch_swap($/;"	p	typeref:typename:FLECS_DBG_API void	file:	signature:(ecs_switch_t * sw,int32_t elem_1,int32_t elem_2)
flecs_switch_term_t	$FLECS/$FLECS/flecs.c	/^} flecs_switch_term_t;$/;"	t	typeref:struct:flecs_switch_term_t	file:
flecs_switch_values	$FLECS/$FLECS/flecs.c	/^ecs_vec_t* flecs_switch_values($/;"	p	typeref:typename:FLECS_DBG_API ecs_vec_t *	file:	signature:(const ecs_switch_t * sw)
flecs_switch_verify_nodes	$FLECS/$FLECS/flecs.c	/^void flecs_switch_verify_nodes($/;"	f	typeref:typename:void	file:	signature:(ecs_switch_header_t * hdr,ecs_switch_node_t * nodes)
flecs_sync_worker	$FLECS/$FLECS/flecs.c	/^void flecs_sync_worker($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world)
flecs_system_fini	$FLECS/$FLECS/flecs.c	/^void flecs_system_fini(ecs_system_t *sys) {$/;"	f	typeref:typename:void	file:	signature:(ecs_system_t * sys)
flecs_system_init_timer	$FLECS/$FLECS/flecs.c	/^void flecs_system_init_timer($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_entity_t entity,const ecs_system_desc_t * desc)
flecs_system_stats_to_json	$FLECS/$FLECS/flecs.c	/^void flecs_system_stats_to_json($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_strbuf_t * reply,ecs_entity_t system,const ecs_system_stats_t * stats)
flecs_table_add_trigger_flags	$FLECS/$FLECS/flecs.c	/^void flecs_table_add_trigger_flags($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_table_t * table,ecs_entity_t event)
flecs_table_append	$FLECS/$FLECS/flecs.c	/^int32_t flecs_table_append($/;"	p	typeref:typename:int32_t	file:	signature:(ecs_world_t * world,ecs_table_t * table,ecs_entity_t entity,bool construct,bool on_add)
flecs_table_append_to_records	$FLECS/$FLECS/flecs.c	/^void flecs_table_append_to_records($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_table_t * table,ecs_vec_t * records,ecs_id_t id,int32_t column)
flecs_table_appendn	$FLECS/$FLECS/flecs.c	/^int32_t flecs_table_appendn($/;"	p	typeref:typename:int32_t	file:	signature:(ecs_world_t * world,ecs_table_t * table,ecs_data_t * data,int32_t count,const ecs_entity_t * ids)
flecs_table_cache_all_iter	$FLECS/$FLECS/flecs.c	/^bool flecs_table_cache_all_iter($/;"	p	typeref:typename:bool	file:	signature:(ecs_table_cache_t * cache,ecs_table_cache_iter_t * out)
flecs_table_cache_count	$FLECS/$FLECS/flecs.c	/^#define flecs_table_cache_count(/;"	d	file:	signature:(cache)
flecs_table_cache_empty_count	$FLECS/$FLECS/flecs.c	/^#define flecs_table_cache_empty_count(/;"	d	file:	signature:(cache)
flecs_table_cache_empty_iter	$FLECS/$FLECS/flecs.c	/^bool flecs_table_cache_empty_iter($/;"	p	typeref:typename:bool	file:	signature:(ecs_table_cache_t * cache,ecs_table_cache_iter_t * out)
flecs_table_cache_iter	$FLECS/$FLECS/flecs.c	/^bool flecs_table_cache_iter($/;"	p	typeref:typename:bool	file:	signature:(ecs_table_cache_t * cache,ecs_table_cache_iter_t * out)
flecs_table_cache_list_insert	$FLECS/$FLECS/flecs.c	/^void flecs_table_cache_list_insert($/;"	f	typeref:typename:void	file:	signature:(ecs_table_cache_t * cache,ecs_table_cache_hdr_t * elem)
flecs_table_cache_list_remove	$FLECS/$FLECS/flecs.c	/^void flecs_table_cache_list_remove($/;"	f	typeref:typename:void	file:	signature:(ecs_table_cache_t * cache,ecs_table_cache_hdr_t * elem)
flecs_table_cache_next	$FLECS/$FLECS/flecs.c	/^#define flecs_table_cache_next(/;"	d	file:	signature:(it,T)
flecs_table_cache_next_	$FLECS/$FLECS/flecs.c	/^ecs_table_cache_hdr_t* flecs_table_cache_next_($/;"	p	typeref:typename:ecs_table_cache_hdr_t *	file:	signature:(ecs_table_cache_iter_t * it)
flecs_table_check_sanity	$FLECS/$FLECS/flecs.c	/^void flecs_table_check_sanity(ecs_table_t *table) {$/;"	f	typeref:typename:void	file:	signature:(ecs_table_t * table)
flecs_table_clear_data	$FLECS/$FLECS/flecs.c	/^void flecs_table_clear_data($/;"	p	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_table_t * table,ecs_data_t * data)
flecs_table_clear_edges	$FLECS/$FLECS/flecs.c	/^void flecs_table_clear_edges($/;"	p	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_table_t * table)
flecs_table_clear_entities	$FLECS/$FLECS/flecs.c	/^void flecs_table_clear_entities($/;"	p	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_table_t * table)
flecs_table_clear_entities_silent	$FLECS/$FLECS/flecs.c	/^void flecs_table_clear_entities_silent($/;"	p	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_table_t * table)
flecs_table_column_t	$FLECS/$FLECS/flecs.c	/^} flecs_table_column_t;$/;"	t	typeref:struct:__anonb2bcda230508	file:
flecs_table_column_to_union_index	$FLECS/$FLECS/flecs.c	/^int32_t flecs_table_column_to_union_index($/;"	p	typeref:typename:int32_t	file:	signature:(const ecs_table_t * table,int32_t column)
flecs_table_data_count	$FLECS/$FLECS/flecs.c	/^int32_t flecs_table_data_count($/;"	p	typeref:typename:int32_t	file:	signature:(const ecs_data_t * data)
flecs_table_delete	$FLECS/$FLECS/flecs.c	/^void flecs_table_delete($/;"	p	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_table_t * table,int32_t index,bool destruct)
flecs_table_delete_entities	$FLECS/$FLECS/flecs.c	/^void flecs_table_delete_entities($/;"	p	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_table_t * table)
flecs_table_diff_build	$FLECS/$FLECS/flecs.c	/^void flecs_table_diff_build($/;"	p	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_table_diff_builder_t * builder,ecs_table_diff_t * diff,int32_t added_offset,int32_t removed_offset)
flecs_table_diff_build_add_type_to_vec	$FLECS/$FLECS/flecs.c	/^void flecs_table_diff_build_add_type_to_vec($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_vec_t * vec,ecs_type_t * add)
flecs_table_diff_build_append_table	$FLECS/$FLECS/flecs.c	/^void flecs_table_diff_build_append_table($/;"	p	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_table_diff_builder_t * dst,ecs_table_diff_t * src)
flecs_table_diff_build_noalloc	$FLECS/$FLECS/flecs.c	/^void flecs_table_diff_build_noalloc($/;"	p	typeref:typename:void	file:	signature:(ecs_table_diff_builder_t * builder,ecs_table_diff_t * diff)
flecs_table_diff_build_type	$FLECS/$FLECS/flecs.c	/^void flecs_table_diff_build_type($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_vec_t * vec,ecs_type_t * type,int32_t offset)
flecs_table_diff_builder_clear	$FLECS/$FLECS/flecs.c	/^void flecs_table_diff_builder_clear($/;"	p	typeref:typename:void	file:	signature:(ecs_table_diff_builder_t * builder)
flecs_table_diff_builder_fini	$FLECS/$FLECS/flecs.c	/^void flecs_table_diff_builder_fini($/;"	p	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_table_diff_builder_t * builder)
flecs_table_diff_builder_init	$FLECS/$FLECS/flecs.c	/^void flecs_table_diff_builder_init($/;"	p	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_table_diff_builder_t * builder)
flecs_table_diff_free	$FLECS/$FLECS/flecs.c	/^void flecs_table_diff_free($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_table_diff_t * diff)
flecs_table_disconnect_edge	$FLECS/$FLECS/flecs.c	/^void flecs_table_disconnect_edge($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_id_t id,ecs_graph_edge_t * edge)
flecs_table_dtor_all	$FLECS/$FLECS/flecs.c	/^void flecs_table_dtor_all($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_table_t * table,ecs_data_t * data,int32_t row,int32_t count,bool update_entity_index,bool is_delete)
flecs_table_ensure	$FLECS/$FLECS/flecs.c	/^ecs_table_t* flecs_table_ensure($/;"	f	typeref:typename:ecs_table_t *	file:	signature:(ecs_world_t * world,ecs_type_t * type,bool own_type,ecs_table_t * prev)
flecs_table_ensure_edge	$FLECS/$FLECS/flecs.c	/^ecs_graph_edge_t* flecs_table_ensure_edge($/;"	f	typeref:typename:ecs_graph_edge_t *	file:	signature:(ecs_world_t * world,ecs_graph_edges_t * edges,ecs_id_t id)
flecs_table_ensure_hi_edge	$FLECS/$FLECS/flecs.c	/^ecs_graph_edge_t* flecs_table_ensure_hi_edge($/;"	f	typeref:typename:ecs_graph_edge_t *	file:	signature:(ecs_world_t * world,ecs_graph_edges_t * edges,ecs_id_t id)
flecs_table_entities	$FLECS/$FLECS/flecs.c	/^ecs_vec_t* flecs_table_entities($/;"	p	typeref:typename:ecs_vec_t *	file:	signature:(ecs_table_t * table)
flecs_table_entities_array	$FLECS/$FLECS/flecs.c	/^ecs_entity_t* flecs_table_entities_array($/;"	p	typeref:typename:ecs_entity_t *	file:	signature:(ecs_table_t * table)
flecs_table_fast_append	$FLECS/$FLECS/flecs.c	/^void flecs_table_fast_append($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_column_t * columns,int32_t count)
flecs_table_fast_delete	$FLECS/$FLECS/flecs.c	/^void flecs_table_fast_delete($/;"	f	typeref:typename:void	file:	signature:(ecs_column_t * columns,int32_t column_count,int32_t index)
flecs_table_fast_delete_last	$FLECS/$FLECS/flecs.c	/^void flecs_table_fast_delete_last($/;"	f	typeref:typename:void	file:	signature:(ecs_column_t * columns,int32_t column_count)
flecs_table_fast_move	$FLECS/$FLECS/flecs.c	/^void flecs_table_fast_move($/;"	f	typeref:typename:void	file:	signature:(ecs_table_t * dst_table,int32_t dst_index,ecs_table_t * src_table,int32_t src_index)
flecs_table_find_or_create	$FLECS/$FLECS/flecs.c	/^ecs_table_t* flecs_table_find_or_create($/;"	p	typeref:typename:ecs_table_t *	file:	signature:(ecs_world_t * world,ecs_type_t * type)
flecs_table_fini_data	$FLECS/$FLECS/flecs.c	/^void flecs_table_fini_data($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_table_t * table,ecs_data_t * data,bool do_on_remove,bool update_entity_index,bool is_delete,bool deactivate)
flecs_table_free	$FLECS/$FLECS/flecs.c	/^void flecs_table_free($/;"	p	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_table_t * table)
flecs_table_free_type	$FLECS/$FLECS/flecs.c	/^void flecs_table_free_type($/;"	p	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_table_t * table)
flecs_table_get_dirty_state	$FLECS/$FLECS/flecs.c	/^int32_t* flecs_table_get_dirty_state($/;"	p	typeref:typename:int32_t *	file:	signature:(ecs_world_t * world,ecs_table_t * table)
flecs_table_grow_column	$FLECS/$FLECS/flecs.c	/^void flecs_table_grow_column($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_column_t * column,int32_t to_add,int32_t dst_size,bool construct)
flecs_table_grow_data	$FLECS/$FLECS/flecs.c	/^int32_t flecs_table_grow_data($/;"	f	typeref:typename:int32_t	file:	signature:(ecs_world_t * world,ecs_table_t * table,ecs_data_t * data,int32_t to_add,int32_t size,const ecs_entity_t * ids)
flecs_table_hashmap_init	$FLECS/$FLECS/flecs.c	/^void flecs_table_hashmap_init($/;"	p	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_hashmap_t * hm)
flecs_table_init	$FLECS/$FLECS/flecs.c	/^void flecs_table_init($/;"	p	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_table_t * table,ecs_table_t * from)
flecs_table_init_columns	$FLECS/$FLECS/flecs.c	/^void flecs_table_init_columns($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_table_t * table,int32_t column_count)
flecs_table_init_data	$FLECS/$FLECS/flecs.c	/^void flecs_table_init_data($/;"	p	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_table_t * table)
flecs_table_init_edge	$FLECS/$FLECS/flecs.c	/^void flecs_table_init_edge($/;"	f	typeref:typename:void	file:	signature:(ecs_table_t * table,ecs_graph_edge_t * edge,ecs_id_t id,ecs_table_t * to)
flecs_table_init_edges	$FLECS/$FLECS/flecs.c	/^void flecs_table_init_edges($/;"	f	typeref:typename:void	file:	signature:(ecs_graph_edges_t * edges)
flecs_table_init_flags	$FLECS/$FLECS/flecs.c	/^void flecs_table_init_flags($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_table_t * table)
flecs_table_init_node	$FLECS/$FLECS/flecs.c	/^void flecs_table_init_node($/;"	f	typeref:typename:void	file:	signature:(ecs_graph_node_t * node)
flecs_table_invoke_add_hooks	$FLECS/$FLECS/flecs.c	/^void flecs_table_invoke_add_hooks($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_table_t * table,ecs_column_t * column,ecs_entity_t * entities,int32_t row,int32_t count,bool construct)
flecs_table_invoke_ctor	$FLECS/$FLECS/flecs.c	/^void flecs_table_invoke_ctor($/;"	f	typeref:typename:void	file:	signature:(ecs_column_t * column,int32_t row,int32_t count)
flecs_table_invoke_dtor	$FLECS/$FLECS/flecs.c	/^void flecs_table_invoke_dtor($/;"	f	typeref:typename:void	file:	signature:(ecs_column_t * column,int32_t row,int32_t count)
flecs_table_invoke_hook	$FLECS/$FLECS/flecs.c	/^void flecs_table_invoke_hook($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_table_t * table,ecs_iter_action_t callback,ecs_entity_t event,ecs_column_t * column,ecs_entity_t * entities,int32_t row,int32_t count)
flecs_table_invoke_remove_hooks	$FLECS/$FLECS/flecs.c	/^void flecs_table_invoke_remove_hooks($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_table_t * table,ecs_column_t * column,ecs_entity_t * entities,int32_t row,int32_t count,bool dtor)
flecs_table_mark_dirty	$FLECS/$FLECS/flecs.c	/^void flecs_table_mark_dirty($/;"	p	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_table_t * table,ecs_entity_t component)
flecs_table_mark_table_dirty	$FLECS/$FLECS/flecs.c	/^void flecs_table_mark_table_dirty($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_table_t * table,int32_t index)
flecs_table_merge	$FLECS/$FLECS/flecs.c	/^void flecs_table_merge($/;"	p	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_table_t * new_table,ecs_table_t * old_table,ecs_data_t * new_data,ecs_data_t * old_data)
flecs_table_merge_column	$FLECS/$FLECS/flecs.c	/^void flecs_table_merge_column($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_column_t * dst,ecs_column_t * src,int32_t column_size)
flecs_table_merge_data	$FLECS/$FLECS/flecs.c	/^void flecs_table_merge_data($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_table_t * dst_table,ecs_table_t * src_table,int32_t src_count,int32_t dst_count,ecs_data_t * src_data,ecs_data_t * dst_data)
flecs_table_merge_vec	$FLECS/$FLECS/flecs.c	/^void flecs_table_merge_vec($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_vec_t * dst,ecs_vec_t * src,int32_t size,int32_t elem_size)
flecs_table_move	$FLECS/$FLECS/flecs.c	/^void flecs_table_move($/;"	p	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_entity_t dst_entity,ecs_entity_t src_entity,ecs_table_t * new_table,int32_t new_index,ecs_table_t * old_table,int32_t old_index,bool construct)
flecs_table_move_bitset_columns	$FLECS/$FLECS/flecs.c	/^void flecs_table_move_bitset_columns($/;"	f	typeref:typename:void	file:	signature:(ecs_table_t * dst_table,int32_t dst_index,ecs_table_t * src_table,int32_t src_index,int32_t count,bool clear)
flecs_table_move_switch_columns	$FLECS/$FLECS/flecs.c	/^void flecs_table_move_switch_columns($/;"	f	typeref:typename:void	file:	signature:(ecs_table_t * dst_table,int32_t dst_index,ecs_table_t * src_table,int32_t src_index,int32_t count,bool clear)
flecs_table_notify	$FLECS/$FLECS/flecs.c	/^void flecs_table_notify($/;"	p	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_table_t * table,ecs_table_event_t * event)
flecs_table_notify_on_remove	$FLECS/$FLECS/flecs.c	/^void flecs_table_notify_on_remove($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_table_t * table,ecs_data_t * data)
flecs_table_observed_count	$FLECS/$FLECS/flecs.c	/^int32_t flecs_table_observed_count($/;"	f	typeref:typename:int32_t	signature:(const ecs_table_t * table)
flecs_table_observed_count	$FLECS/$FLECS/flecs.h	/^int32_t flecs_table_observed_count($/;"	p	typeref:typename:FLECS_DBG_API int32_t	signature:(const ecs_table_t * table)
flecs_table_record_get	$FLECS/$FLECS/flecs.c	/^ecs_table_record_t* flecs_table_record_get($/;"	p	typeref:typename:ecs_table_record_t *	file:	signature:(const ecs_world_t * world,const ecs_table_t * table,ecs_id_t id)
flecs_table_records_unregister	$FLECS/$FLECS/flecs.c	/^void flecs_table_records_unregister($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_table_t * table)
flecs_table_records_update_empty	$FLECS/$FLECS/flecs.c	/^bool flecs_table_records_update_empty($/;"	p	typeref:typename:bool	file:	signature:(ecs_table_t * table)
flecs_table_remove_actions	$FLECS/$FLECS/flecs.c	/^void flecs_table_remove_actions($/;"	p	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_table_t * table)
flecs_table_remove_edge	$FLECS/$FLECS/flecs.c	/^void flecs_table_remove_edge($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_graph_edges_t * edges,ecs_id_t id,ecs_graph_edge_t * edge)
flecs_table_replace_data	$FLECS/$FLECS/flecs.c	/^void flecs_table_replace_data($/;"	p	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_table_t * table,ecs_data_t * data)
flecs_table_reset	$FLECS/$FLECS/flecs.c	/^void flecs_table_reset($/;"	p	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_table_t * table)
flecs_table_set_empty	$FLECS/$FLECS/flecs.c	/^void flecs_table_set_empty($/;"	p	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_table_t * table)
flecs_table_set_size	$FLECS/$FLECS/flecs.c	/^void flecs_table_set_size($/;"	p	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_table_t * table,ecs_data_t * data,int32_t count)
flecs_table_shrink	$FLECS/$FLECS/flecs.c	/^bool flecs_table_shrink($/;"	p	typeref:typename:bool	file:	signature:(ecs_world_t * world,ecs_table_t * table)
flecs_table_swap	$FLECS/$FLECS/flecs.c	/^void flecs_table_swap($/;"	p	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_table_t * table,int32_t row_1,int32_t row_2)
flecs_table_swap_bitset_columns	$FLECS/$FLECS/flecs.c	/^void flecs_table_swap_bitset_columns($/;"	f	typeref:typename:void	file:	signature:(ecs_table_t * table,int32_t row_1,int32_t row_2)
flecs_table_swap_switch_columns	$FLECS/$FLECS/flecs.c	/^void flecs_table_swap_switch_columns($/;"	f	typeref:typename:void	file:	signature:(ecs_table_t * table,int32_t row_1,int32_t row_2)
flecs_table_traversable_add	$FLECS/$FLECS/flecs.c	/^void flecs_table_traversable_add($/;"	p	typeref:typename:void	file:	signature:(ecs_table_t * table,int32_t value)
flecs_table_traverse_add	$FLECS/$FLECS/flecs.c	/^ecs_table_t* flecs_table_traverse_add($/;"	f	typeref:typename:ecs_table_t *	signature:(ecs_world_t * world,ecs_table_t * node,ecs_id_t * id_ptr,ecs_table_diff_t * diff)
flecs_table_traverse_remove	$FLECS/$FLECS/flecs.c	/^ecs_table_t* flecs_table_traverse_remove($/;"	f	typeref:typename:ecs_table_t *	signature:(ecs_world_t * world,ecs_table_t * node,ecs_id_t * id_ptr,ecs_table_diff_t * diff)
flecs_targets_mark_for_delete	$FLECS/$FLECS/flecs.c	/^void flecs_targets_mark_for_delete($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_table_t * table)
flecs_term_finalize	$FLECS/$FLECS/flecs.c	/^int flecs_term_finalize($/;"	f	typeref:typename:int	file:	signature:(const ecs_world_t * world,ecs_term_t * term,ecs_filter_finalize_ctx_t * ctx)
flecs_term_id_finalize_flags	$FLECS/$FLECS/flecs.c	/^int flecs_term_id_finalize_flags($/;"	f	typeref:typename:int	file:	signature:(ecs_term_id_t * term_id,ecs_filter_finalize_ctx_t * ctx)
flecs_term_id_get_entity	$FLECS/$FLECS/flecs.c	/^ecs_entity_t flecs_term_id_get_entity($/;"	f	typeref:typename:ecs_entity_t	file:	signature:(const ecs_term_id_t * term_id)
flecs_term_id_is_wildcard	$FLECS/$FLECS/flecs.c	/^bool flecs_term_id_is_wildcard($/;"	f	typeref:typename:bool	file:	signature:(ecs_term_id_t * term_id)
flecs_term_id_lookup	$FLECS/$FLECS/flecs.c	/^int flecs_term_id_lookup($/;"	f	typeref:typename:int	file:	signature:(const ecs_world_t * world,ecs_entity_t scope,ecs_term_id_t * term_id,bool free_name,ecs_filter_finalize_ctx_t * ctx)
flecs_term_id_var_name	$FLECS/$FLECS/flecs.c	/^const char* flecs_term_id_var_name($/;"	f	typeref:typename:const char *	file:	signature:(ecs_term_id_t * term_id)
flecs_term_ids_finalize	$FLECS/$FLECS/flecs.c	/^int flecs_term_ids_finalize($/;"	f	typeref:typename:int	file:	signature:(const ecs_world_t * world,ecs_term_t * term,ecs_filter_finalize_ctx_t * ctx)
flecs_term_iter_find_superset	$FLECS/$FLECS/flecs.c	/^bool flecs_term_iter_find_superset($/;"	f	typeref:typename:bool	file:	signature:(ecs_world_t * world,ecs_table_t * table,ecs_term_t * term,ecs_entity_t * source,ecs_id_t * id,int32_t * column)
flecs_term_iter_next	$FLECS/$FLECS/flecs.c	/^bool flecs_term_iter_next($/;"	f	typeref:typename:bool	file:	signature:(ecs_world_t * world,ecs_term_iter_t * iter,bool match_prefab,bool match_disabled)
flecs_term_iter_next_table	$FLECS/$FLECS/flecs.c	/^const ecs_table_record_t *flecs_term_iter_next_table($/;"	f	typeref:typename:const ecs_table_record_t *	file:	signature:(ecs_term_iter_t * iter)
flecs_term_iter_set_table	$FLECS/$FLECS/flecs.c	/^bool flecs_term_iter_set_table($/;"	f	typeref:typename:bool	file:	signature:(ecs_world_t * world,ecs_term_iter_t * iter,ecs_table_t * table)
flecs_term_match_table	$FLECS/$FLECS/flecs.c	/^bool flecs_term_match_table($/;"	p	typeref:typename:bool	file:	signature:(ecs_world_t * world,const ecs_term_t * term,const ecs_table_t * table,ecs_id_t * id_out,int32_t * column_out,ecs_entity_t * subject_out,int32_t * match_indices,bool first,ecs_flags32_t iter_flags)
flecs_term_populate_from_id	$FLECS/$FLECS/flecs.c	/^int flecs_term_populate_from_id($/;"	f	typeref:typename:int	file:	signature:(const ecs_world_t * world,ecs_term_t * term,ecs_filter_finalize_ctx_t * ctx)
flecs_term_populate_id	$FLECS/$FLECS/flecs.c	/^int flecs_term_populate_id($/;"	f	typeref:typename:int	file:	signature:(ecs_term_t * term)
flecs_term_str_w_strbuf	$FLECS/$FLECS/flecs.c	/^void flecs_term_str_w_strbuf($/;"	f	typeref:typename:void	file:	signature:(const ecs_world_t * world,const ecs_term_t * term,ecs_strbuf_t * buf,int32_t t)
flecs_term_verify	$FLECS/$FLECS/flecs.c	/^int flecs_term_verify($/;"	f	typeref:typename:int	file:	signature:(const ecs_world_t * world,const ecs_term_t * term,ecs_filter_finalize_ctx_t * ctx)
flecs_term_verify_eq_pred	$FLECS/$FLECS/flecs.c	/^int flecs_term_verify_eq_pred($/;"	f	typeref:typename:int	file:	signature:(const ecs_term_t * term,ecs_filter_finalize_ctx_t * ctx)
flecs_throw_invalid_delete	$FLECS/$FLECS/flecs.c	/^void flecs_throw_invalid_delete($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_id_t id)
flecs_to_public_id	$FLECS/$FLECS/flecs.c	/^ecs_id_t flecs_to_public_id($/;"	p	typeref:typename:ecs_id_t	file:	signature:(ecs_id_t id)
flecs_to_row	$FLECS/$FLECS/flecs.c	/^ecs_record_t flecs_to_row($/;"	p	typeref:typename:ecs_record_t	file:	signature:(uint64_t value)
flecs_to_snake_case	$FLECS/$FLECS/flecs.c	/^char* flecs_to_snake_case(const char *str) {$/;"	f	typeref:typename:char *	signature:(const char * str)
flecs_to_snake_case	$FLECS/$FLECS/flecs.h	/^char* flecs_to_snake_case($/;"	p	typeref:typename:FLECS_API char *	signature:(const char * str)
flecs_trav_down_ensure	$FLECS/$FLECS/flecs.c	/^ecs_trav_down_t* flecs_trav_down_ensure($/;"	f	typeref:typename:ecs_trav_down_t *	file:	signature:(const ecs_rule_run_ctx_t * ctx,ecs_trav_up_cache_t * cache,ecs_entity_t entity)
flecs_trav_entity_down	$FLECS/$FLECS/flecs.c	/^ecs_trav_down_t* flecs_trav_entity_down($/;"	p	typeref:typename:ecs_trav_down_t *	file:	signature:(ecs_world_t * world,ecs_allocator_t * a,ecs_trav_up_cache_t * cache,ecs_trav_down_t * dst,ecs_entity_t trav,ecs_entity_t entity,ecs_id_record_t * idr_trav,ecs_id_record_t * idr_with,bool self)
flecs_trav_entity_down_isa	$FLECS/$FLECS/flecs.c	/^void flecs_trav_entity_down_isa($/;"	p	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_allocator_t * a,ecs_trav_up_cache_t * cache,ecs_trav_down_t * dst,ecs_entity_t trav,ecs_entity_t entity,ecs_id_record_t * idr_with,bool self)
flecs_trav_table_down	$FLECS/$FLECS/flecs.c	/^ecs_trav_down_t* flecs_trav_table_down($/;"	f	typeref:typename:ecs_trav_down_t *	file:	signature:(ecs_world_t * world,ecs_allocator_t * a,ecs_trav_up_cache_t * cache,ecs_trav_down_t * dst,ecs_entity_t trav,const ecs_table_t * table,ecs_id_record_t * idr_with,bool self)
flecs_trav_table_up	$FLECS/$FLECS/flecs.c	/^ecs_trav_up_t* flecs_trav_table_up($/;"	f	typeref:typename:ecs_trav_up_t *	file:	signature:(const ecs_rule_run_ctx_t * ctx,ecs_allocator_t * a,ecs_trav_up_cache_t * cache,const ecs_world_t * world,ecs_entity_t src,ecs_id_t with,ecs_id_t rel,ecs_id_record_t * idr_with,ecs_id_record_t * idr_trav)
flecs_trav_type_offset_search	$FLECS/$FLECS/flecs.c	/^int32_t flecs_trav_type_offset_search($/;"	f	typeref:typename:int32_t	file:	signature:(ecs_trav_up_t * up,int32_t offset,ecs_id_t with,ecs_type_t * type)
flecs_trav_type_search	$FLECS/$FLECS/flecs.c	/^int32_t flecs_trav_type_search($/;"	f	typeref:typename:int32_t	file:	signature:(ecs_trav_up_t * up,const ecs_table_t * table,ecs_id_record_t * idr_with,ecs_type_t * type)
flecs_trav_up_ensure	$FLECS/$FLECS/flecs.c	/^ecs_trav_up_t* flecs_trav_up_ensure($/;"	f	typeref:typename:ecs_trav_up_t *	file:	signature:(const ecs_rule_run_ctx_t * ctx,ecs_trav_up_cache_t * cache,uint64_t table_id)
flecs_traverse_add	$FLECS/$FLECS/flecs.c	/^int flecs_traverse_add($/;"	f	typeref:typename:int	file:	signature:(ecs_world_t * world,ecs_entity_t result,const char * name,const ecs_entity_desc_t * desc,ecs_entity_t scope,ecs_id_t with,bool flecs_new_entity,bool name_assigned)
flecs_traverse_from_expr	$FLECS/$FLECS/flecs.c	/^ecs_table_t *flecs_traverse_from_expr($/;"	f	typeref:typename:ecs_table_t *	file:	signature:(ecs_world_t * world,ecs_table_t * table,const char * name,const char * expr,ecs_table_diff_builder_t * diff,bool replace_and,bool * error)
flecs_type_add	$FLECS/$FLECS/flecs.c	/^void flecs_type_add($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_type_t * type,ecs_id_t add)
flecs_type_can_inherit_id	$FLECS/$FLECS/flecs.c	/^bool flecs_type_can_inherit_id($/;"	p	typeref:typename:bool	file:	signature:(const ecs_world_t * world,const ecs_table_t * table,const ecs_id_record_t * idr,ecs_id_t id)
flecs_type_compare	$FLECS/$FLECS/flecs.c	/^int flecs_type_compare(const void *ptr_1, const void *ptr_2) {$/;"	f	typeref:typename:int	file:	signature:(const void * ptr_1,const void * ptr_2)
flecs_type_copy	$FLECS/$FLECS/flecs.c	/^ecs_type_t flecs_type_copy($/;"	p	typeref:typename:ecs_type_t	file:	signature:(ecs_world_t * world,const ecs_type_t * src)
flecs_type_count_matches	$FLECS/$FLECS/flecs.c	/^int flecs_type_count_matches($/;"	f	typeref:typename:int	file:	signature:(const ecs_type_t * type,ecs_id_t wildcard,int32_t offset)
flecs_type_find	$FLECS/$FLECS/flecs.c	/^int flecs_type_find($/;"	f	typeref:typename:int	file:	signature:(const ecs_type_t * type,ecs_id_t id)
flecs_type_find_insert	$FLECS/$FLECS/flecs.c	/^int flecs_type_find_insert($/;"	f	typeref:typename:int	file:	signature:(const ecs_type_t * type,int32_t offset,ecs_id_t to_add)
flecs_type_free	$FLECS/$FLECS/flecs.c	/^void flecs_type_free($/;"	p	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_type_t * type)
flecs_type_hash	$FLECS/$FLECS/flecs.c	/^uint64_t flecs_type_hash(const void *ptr) {$/;"	f	typeref:typename:uint64_t	file:	signature:(const void * ptr)
flecs_type_info_ensure	$FLECS/$FLECS/flecs.c	/^ecs_type_info_t* flecs_type_info_ensure($/;"	p	typeref:typename:ecs_type_info_t *	file:	signature:(ecs_world_t * world,ecs_entity_t component)
flecs_type_info_fini	$FLECS/$FLECS/flecs.c	/^void flecs_type_info_fini($/;"	p	typeref:typename:void	file:	signature:(ecs_type_info_t * ti)
flecs_type_info_flags	$FLECS/$FLECS/flecs.c	/^ecs_flags32_t flecs_type_info_flags($/;"	f	typeref:typename:ecs_flags32_t	file:	signature:(const ecs_type_info_t * ti)
flecs_type_info_free	$FLECS/$FLECS/flecs.c	/^void flecs_type_info_free($/;"	p	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_entity_t component)
flecs_type_info_get	$FLECS/$FLECS/flecs.c	/^const ecs_type_info_t* flecs_type_info_get($/;"	f	typeref:typename:const ecs_type_info_t *	signature:(const ecs_world_t * world,ecs_entity_t component)
flecs_type_info_init	$FLECS/$FLECS/flecs.c	/^#define flecs_type_info_init(/;"	d	file:	signature:(world,T,...)
flecs_type_info_init_id	$FLECS/$FLECS/flecs.c	/^bool flecs_type_info_init_id($/;"	p	typeref:typename:bool	file:	signature:(ecs_world_t * world,ecs_entity_t component,ecs_size_t size,ecs_size_t alignment,const ecs_type_hooks_t * li)
flecs_type_is_number	$FLECS/$FLECS/flecs.c	/^bool flecs_type_is_number($/;"	f	typeref:typename:bool	file:	signature:(ecs_world_t * world,ecs_entity_t type)
flecs_type_kind_str	$FLECS/$FLECS/flecs.c	/^const char* flecs_type_kind_str($/;"	f	file:	signature:(ecs_type_kind_t kind)
flecs_type_new_filtered	$FLECS/$FLECS/flecs.c	/^int flecs_type_new_filtered($/;"	f	typeref:typename:int	file:	signature:(ecs_world_t * world,ecs_type_t * dst,const ecs_type_t * src,ecs_id_t wildcard,int32_t at)
flecs_type_new_with	$FLECS/$FLECS/flecs.c	/^int flecs_type_new_with($/;"	f	typeref:typename:int	file:	signature:(ecs_world_t * world,ecs_type_t * dst,const ecs_type_t * src,ecs_id_t with)
flecs_type_new_without	$FLECS/$FLECS/flecs.c	/^int flecs_type_new_without($/;"	f	typeref:typename:int	file:	signature:(ecs_world_t * world,ecs_type_t * dst,const ecs_type_t * src,ecs_id_t without)
flecs_type_offset_search	$FLECS/$FLECS/flecs.c	/^int32_t flecs_type_offset_search($/;"	f	typeref:typename:int32_t	file:	signature:(int32_t offset,ecs_id_t id,ecs_id_t * ids,int32_t count,ecs_id_t * id_out)
flecs_type_search	$FLECS/$FLECS/flecs.c	/^int32_t flecs_type_search($/;"	f	typeref:typename:int32_t	file:	signature:(const ecs_table_t * table,ecs_id_t search_id,ecs_id_record_t * idr,ecs_id_t * ids,ecs_id_t * id_out,ecs_table_record_t ** tr_out)
flecs_type_search_relation	$FLECS/$FLECS/flecs.c	/^int32_t flecs_type_search_relation($/;"	f	typeref:typename:int32_t	file:	signature:(const ecs_world_t * world,const ecs_table_t * table,int32_t offset,ecs_id_t id,ecs_id_record_t * idr,ecs_id_t rel,ecs_id_record_t * idr_r,bool self,ecs_entity_t * subject_out,ecs_id_t * id_out,ecs_table_record_t ** tr_out)
flecs_u_max	$FLECS/$FLECS/flecs.c	/^static uint64_t flecs_u_max[] = { $/;"	v	typeref:typename:uint64_t[]	file:
flecs_uni_observer_init	$FLECS/$FLECS/flecs.c	/^int flecs_uni_observer_init($/;"	f	typeref:typename:int	file:	signature:(ecs_world_t * world,ecs_observer_t * observer,const ecs_observer_desc_t * desc)
flecs_uni_observer_invoke	$FLECS/$FLECS/flecs.c	/^void flecs_uni_observer_invoke($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_observer_t * observer,ecs_iter_t * it,ecs_table_t * table,ecs_entity_t trav,int32_t evtx,bool simple_result)
flecs_uni_observer_register	$FLECS/$FLECS/flecs.c	/^void flecs_uni_observer_register($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_observable_t * observable,ecs_observer_t * observer)
flecs_uni_observer_yield_existing	$FLECS/$FLECS/flecs.c	/^void flecs_uni_observer_yield_existing($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_observer_t * observer)
flecs_unit_quantity_monitor	$FLECS/$FLECS/flecs.c	/^void flecs_unit_quantity_monitor(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:	signature:(ecs_iter_t * it)
flecs_unit_validate	$FLECS/$FLECS/flecs.c	/^bool flecs_unit_validate($/;"	p	typeref:typename:bool	file:	signature:(ecs_world_t * world,ecs_entity_t t,EcsUnit * data)
flecs_unregister_observer	$FLECS/$FLECS/flecs.c	/^void flecs_unregister_observer($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_observable_t * observable,ecs_observer_t * observer)
flecs_unregister_observer_for_id	$FLECS/$FLECS/flecs.c	/^void flecs_unregister_observer_for_id($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_observable_t * observable,ecs_observer_t * observer,size_t offset)
flecs_unregister_table	$FLECS/$FLECS/flecs.c	/^void flecs_unregister_table($/;"	p	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_table_t * table)
flecs_unset_id_flag	$FLECS/$FLECS/flecs.c	/^bool flecs_unset_id_flag($/;"	f	typeref:typename:bool	file:	signature:(ecs_id_record_t * idr,ecs_flags32_t flag)
flecs_update_component_monitor_w_array	$FLECS/$FLECS/flecs.c	/^void flecs_update_component_monitor_w_array($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_type_t * ids)
flecs_update_component_monitors	$FLECS/$FLECS/flecs.c	/^void flecs_update_component_monitors($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_type_t * added,ecs_type_t * removed)
flecs_update_monitors_for_delete	$FLECS/$FLECS/flecs.c	/^void flecs_update_monitors_for_delete($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_id_t id)
flecs_update_name_index	$FLECS/$FLECS/flecs.c	/^void flecs_update_name_index($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_table_t * src,ecs_table_t * dst,int32_t offset,int32_t count)
flecs_uto	$FLECS/$FLECS/flecs.c	/^#define flecs_uto(/;"	d	file:	signature:(T,value)
flecs_utosize	$FLECS/$FLECS/flecs.c	/^#define flecs_utosize(/;"	d	file:	signature:(value)
flecs_utovar	$FLECS/$FLECS/flecs.c	/^ecs_var_id_t flecs_utovar(uint64_t val) {$/;"	f	typeref:typename:ecs_var_id_t	file:	signature:(uint64_t val)
flecs_valid_identifier_start_char	$FLECS/$FLECS/flecs.c	/^bool flecs_valid_identifier_start_char($/;"	f	typeref:typename:bool	file:	signature:(char ch)
flecs_valid_operator_char	$FLECS/$FLECS/flecs.c	/^bool flecs_valid_operator_char($/;"	f	typeref:typename:bool	file:	signature:(char ch)
flecs_valid_token_char	$FLECS/$FLECS/flecs.c	/^bool flecs_valid_token_char($/;"	f	typeref:typename:bool	file:	signature:(char ch)
flecs_valid_token_start_char	$FLECS/$FLECS/flecs.c	/^bool flecs_valid_token_start_char($/;"	f	typeref:typename:bool	file:	signature:(char ch)
flecs_value_cast	$FLECS/$FLECS/flecs.c	/^void flecs_value_cast($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_value_stack_t * stack,ecs_value_t * value,ecs_entity_t type)
flecs_vars_scope_lookup	$FLECS/$FLECS/flecs.c	/^ecs_expr_var_t* flecs_vars_scope_lookup($/;"	f	typeref:typename:ecs_expr_var_t *	file:	signature:(ecs_expr_var_scope_t * scope,const char * name)
flecs_wait_for_sync	$FLECS/$FLECS/flecs.c	/^void flecs_wait_for_sync($/;"	p	typeref:typename:void	file:	signature:(ecs_world_t * world)
flecs_wait_for_workers	$FLECS/$FLECS/flecs.c	/^void flecs_wait_for_workers($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world)
flecs_walloc	$FLECS/$FLECS/flecs.c	/^#define flecs_walloc(/;"	d	file:	signature:(world,size)
flecs_walloc_n	$FLECS/$FLECS/flecs.c	/^#define flecs_walloc_n(/;"	d	file:	signature:(world,T,count)
flecs_wasm_rest_server	$FLECS/$FLECS/flecs.c	/^ecs_http_server_t *flecs_wasm_rest_server;$/;"	v	typeref:typename:ecs_http_server_t *
flecs_wcalloc	$FLECS/$FLECS/flecs.c	/^#define flecs_wcalloc(/;"	d	file:	signature:(world,size)
flecs_wcalloc_n	$FLECS/$FLECS/flecs.c	/^#define flecs_wcalloc_n(/;"	d	file:	signature:(world,T,count)
flecs_wdup	$FLECS/$FLECS/flecs.c	/^#define flecs_wdup(/;"	d	file:	signature:(world,size,ptr)
flecs_wdup_n	$FLECS/$FLECS/flecs.c	/^#define flecs_wdup_n(/;"	d	file:	signature:(world,T,count,ptr)
flecs_week_interval_count	$FLECS/$FLECS/flecs.c	/^static int32_t flecs_week_interval_count = 168;$/;"	v	typeref:typename:int32_t	file:
flecs_wfree	$FLECS/$FLECS/flecs.c	/^#define flecs_wfree(/;"	d	file:	signature:(world,size,ptr)
flecs_wfree_n	$FLECS/$FLECS/flecs.c	/^#define flecs_wfree_n(/;"	d	file:	signature:(world,T,count,ptr)
flecs_win_thread	$FLECS/$FLECS/flecs.c	/^DWORD flecs_win_thread(void *ptr) {$/;"	f	typeref:typename:DWORD	file:	signature:(void * ptr)
flecs_worker	$FLECS/$FLECS/flecs.c	/^void* flecs_worker(void *arg) {$/;"	f	typeref:typename:void *	file:	signature:(void * arg)
flecs_workers_progress	$FLECS/$FLECS/flecs.c	/^void flecs_workers_progress($/;"	p	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_pipeline_state_t * pq,ecs_ftime_t delta_time)
flecs_world_allocators_fini	$FLECS/$FLECS/flecs.c	/^void flecs_world_allocators_fini($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world)
flecs_world_allocators_init	$FLECS/$FLECS/flecs.c	/^void flecs_world_allocators_init($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world)
flecs_world_iter_init	$FLECS/$FLECS/flecs.c	/^void flecs_world_iter_init($/;"	f	typeref:typename:void	file:	signature:(const ecs_world_t * world,const ecs_poly_t * poly,ecs_iter_t * iter,ecs_term_t * filter)
flecs_world_iter_next	$FLECS/$FLECS/flecs.c	/^bool flecs_world_iter_next($/;"	f	typeref:typename:bool	file:	signature:(ecs_iter_t * it)
flecs_world_monitor_import	$FLECS/$FLECS/flecs.c	/^void flecs_world_monitor_import($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world)
flecs_world_stats_to_json	$FLECS/$FLECS/flecs.c	/^void flecs_world_stats_to_json($/;"	f	typeref:typename:void	file:	signature:(ecs_strbuf_t * reply,const EcsWorldStats * monitor_stats)
flecs_wrealloc	$FLECS/$FLECS/flecs.c	/^#define flecs_wrealloc(/;"	d	file:	signature:(world,size_dst,size_src,ptr)
flecs_wrealloc_n	$FLECS/$FLECS/flecs.c	/^#define flecs_wrealloc_n(/;"	d	file:	signature:(world,T,count_dst,count_src,ptr)
flecs_wyhash	$FLECS/$FLECS/flecs.c	/^uint64_t flecs_wyhash($/;"	p	typeref:typename:uint64_t	file:	signature:(const void * data,ecs_size_t length)
force	$FLECS/$FLECS/flecs.h	/^struct force {$/;"	s	struct:flecs::units
fps	$FLECS/$FLECS/flecs.h	/^        ecs_metric_t fps;                  \/**< Frames per second. *\/$/;"	m	struct:ecs_world_stats_t::__anonb2bcda281508	typeref:typename:ecs_metric_t
fps_sleep	$FLECS/$FLECS/flecs.c	/^    ecs_ftime_t fps_sleep;           \/* Sleep time to prevent fps overshoot *\/$/;"	m	struct:ecs_world_t	typeref:typename:ecs_ftime_t	file:
frame	$FLECS/$FLECS/flecs.h	/^    } frame;$/;"	m	struct:ecs_world_stats_t	typeref:struct:ecs_world_stats_t::__anonb2bcda281408
frame_action	$FLECS/$FLECS/flecs.c	/^static ecs_app_frame_action_t frame_action = flecs_default_frame_action;$/;"	v	typeref:typename:ecs_app_frame_action_t	file:
frame_begin	$FLECS/$FLECS/flecs.h	/^    ecs_ftime_t frame_begin(float delta_time = 0) const {$/;"	f	struct:flecs::world	typeref:typename:ecs_ftime_t	signature:(float delta_time=0) const
frame_count	$FLECS/$FLECS/flecs.h	/^        ecs_metric_t frame_count;          \/**< Number of frames processed. *\/$/;"	m	struct:ecs_world_stats_t::__anonb2bcda281408	typeref:typename:ecs_metric_t
frame_count_total	$FLECS/$FLECS/flecs.h	/^    int64_t frame_count_total;        \/**< Total number of frames *\/$/;"	m	struct:ecs_world_info_t	typeref:typename:int64_t
frame_end	$FLECS/$FLECS/flecs.h	/^    void frame_end() const {$/;"	f	struct:flecs::world	typeref:typename:void	signature:() const
frame_offset	$FLECS/$FLECS/flecs.h	/^    int32_t frame_offset;         \/* Offset relative to start of iteration *\/$/;"	m	struct:ecs_iter_t	typeref:typename:int32_t
frame_start_time	$FLECS/$FLECS/flecs.c	/^    ecs_time_t frame_start_time;     \/* Timestamp of frame start *\/$/;"	m	struct:ecs_world_t	typeref:typename:ecs_time_t	file:
frame_time	$FLECS/$FLECS/flecs.h	/^        ecs_metric_t frame_time;           \/**< Time spent processing a frame. Smaller than wor/;"	m	struct:ecs_world_stats_t::__anonb2bcda281508	typeref:typename:ecs_metric_t
frame_time_last	$FLECS/$FLECS/flecs.h	/^    double frame_time_last;     \/**< Time spent processing a frame *\/$/;"	m	struct:__anonb2bcda281b08	typeref:typename:double
frame_time_total	$FLECS/$FLECS/flecs.h	/^    ecs_ftime_t frame_time_total;     \/**< Total time spent processing a frame *\/$/;"	m	struct:ecs_world_info_t	typeref:typename:ecs_ftime_t
frames	$FLECS/$FLECS/flecs.h	/^    int32_t frames;           \/**< Number of frames to run (0 for infinite) *\/$/;"	m	struct:ecs_app_desc_t	typeref:typename:int32_t
free	$FLECS/$FLECS/flecs.h	/^    static void free(void *obj) {$/;"	f	struct:flecs::_::each_delegate	typeref:typename:void	signature:(void * obj)
free_	$FLECS/$FLECS/flecs.h	/^    ecs_os_api_free_t free_;$/;"	m	struct:ecs_os_api_t	typeref:typename:ecs_os_api_free_t
free_count	$FLECS/$FLECS/flecs.h	/^        ecs_metric_t free_count;           \/**< Frees per frame *\/$/;"	m	struct:ecs_world_stats_t::__anonb2bcda281608	typeref:typename:ecs_metric_t
free_obj	$FLECS/$FLECS/flecs.h	/^template<class Ty> inline void free_obj(Ty* _ptr) { $/;"	f	namespace:flecs::_	typeref:typename:void	signature:(Ty * _ptr)
free_on_add	$FLECS/$FLECS/flecs.h	/^    ecs_ctx_free_t free_on_add = nullptr;$/;"	m	struct:flecs::_::component_binding_ctx	typeref:typename:ecs_ctx_free_t
free_on_remove	$FLECS/$FLECS/flecs.h	/^    ecs_ctx_free_t free_on_remove = nullptr;$/;"	m	struct:flecs::_::component_binding_ctx	typeref:typename:ecs_ctx_free_t
free_on_set	$FLECS/$FLECS/flecs.h	/^    ecs_ctx_free_t free_on_set = nullptr;$/;"	m	struct:flecs::_::component_binding_ctx	typeref:typename:ecs_ctx_free_t
frequency	$FLECS/$FLECS/flecs.h	/^struct frequency {$/;"	s	struct:flecs::units
from	$FLECS/$FLECS/flecs.c	/^    ecs_table_t *from;               \/* Edge source table *\/$/;"	m	struct:ecs_graph_edge_t	typeref:typename:ecs_table_t *	file:
from_int	$FLECS/$FLECS/flecs.h	/^    static constexpr E from_int() {$/;"	f	struct:flecs::_::enum_type	typeref:typename:E	signature:()
from_json	$FLECS/$FLECS/flecs.h	/^const char* from_json(flecs::entity_t tid, void* value, const char *json, flecs::from_json_desc_/;"	f	struct:flecs::world	typeref:typename:const char *	signature:(flecs::entity_t tid,void * value,const char * json,flecs::from_json_desc_t * desc=nullptr)
from_json_desc_t	$FLECS/$FLECS/flecs.h	/^using from_json_desc_t = ecs_from_json_desc_t;$/;"	t	namespace:flecs	typeref:typename:ecs_from_json_desc_t
ft_offset	$FLECS/$FLECS/flecs.c	/^    int16_t ft_offset;$/;"	m	struct:ecs_table__t	typeref:typename:int16_t	file:
ft_terms	$FLECS/$FLECS/flecs.c	/^    ecs_vec_t ft_terms;              \/* Terms with components from flattened tree *\/$/;"	m	struct:ecs_entity_filter_t	typeref:typename:ecs_vec_t	file:
function_traits	$FLECS/$FLECS/flecs.h	/^struct function_traits$/;"	s	namespace:flecs::_
function_traits_defs	$FLECS/$FLECS/flecs.h	/^struct function_traits_defs$/;"	s	namespace:flecs::_
function_traits_impl	$FLECS/$FLECS/flecs.h	/^struct function_traits_impl<ReturnType(ClassType::*)(Args...)>$/;"	s	namespace:flecs::_
function_traits_no_cv	$FLECS/$FLECS/flecs.h	/^struct function_traits_no_cv<T, decltype((void)&T::operator())>$/;"	s	namespace:flecs::_
gauge	$FLECS/$FLECS/flecs.h	/^    ecs_gauge_t gauge;$/;"	m	union:ecs_metric_t	typeref:typename:ecs_gauge_t
generation	$FLECS/$FLECS/flecs.c	/^    uint16_t generation;             \/* Used for table cleanup *\/$/;"	m	struct:ecs_table__t	typeref:typename:uint16_t	file:
get	$FLECS/$FLECS/flecs.h	/^inline void world::get(const Func& func) const {$/;"	f	class:flecs::world	typeref:typename:void	signature:(const Func & func) const
get_alive	$FLECS/$FLECS/flecs.h	/^inline flecs::entity world::get_alive(flecs::entity_t e) const {$/;"	f	class:flecs::world	typeref:typename:flecs::entity	signature:(flecs::entity_t e) const
get_binding_ctx	$FLECS/$FLECS/flecs.h	/^    void* get_binding_ctx() const {$/;"	f	struct:flecs::world	typeref:typename:void *	signature:() const
get_bool	$FLECS/$FLECS/flecs.h	/^    bool get_bool() const {$/;"	f	struct:flecs::cursor	typeref:typename:bool	signature:() const
get_brief	$FLECS/$FLECS/flecs.h	/^inline const char* get_brief(const flecs::entity_view& e) {$/;"	f	namespace:flecs::doc	typeref:typename:const char *	signature:(const flecs::entity_view & e)
get_char	$FLECS/$FLECS/flecs.h	/^    char get_char() const {$/;"	f	struct:flecs::cursor	typeref:typename:char	signature:() const
get_column	$FLECS/$FLECS/flecs.h	/^    void* get_column(int32_t index) const override {$/;"	f	struct:flecs::table_range	typeref:typename:void *	signature:(int32_t index) const
get_ctx	$FLECS/$FLECS/flecs.h	/^    void* get_ctx() const {$/;"	f	struct:flecs::world	typeref:typename:void *	signature:() const
get_detail	$FLECS/$FLECS/flecs.h	/^inline const char* get_detail(const flecs::entity_view& e) {$/;"	f	namespace:flecs::doc	typeref:typename:const char *	signature:(const flecs::entity_view & e)
get_ecs_component	$FLECS/$FLECS/flecs.c	/^const EcsComponent* get_ecs_component($/;"	f	typeref:typename:const EcsComponent *	file:	signature:(const ecs_world_t * world,ecs_meta_scope_t * scope)
get_elem_count	$FLECS/$FLECS/flecs.c	/^int32_t get_elem_count($/;"	f	typeref:typename:int32_t	file:	signature:(ecs_meta_scope_t * scope)
get_entity	$FLECS/$FLECS/flecs.h	/^inline flecs::entity cursor::get_entity() const {$/;"	f	class:flecs::cursor	typeref:typename:flecs::entity	signature:() const
get_field	$FLECS/$FLECS/flecs.h	/^    flecs::column<T> get_field(int32_t index) const {$/;"	f	struct:flecs::iter	typeref:typename:flecs::column<T>	signature:(int32_t index) const
get_first	$FLECS/$FLECS/flecs.h	/^    flecs::entity get_first() {$/;"	f	struct:flecs::term	typeref:typename:flecs::entity	signature:()
get_float	$FLECS/$FLECS/flecs.h	/^    double get_float() const {$/;"	f	struct:flecs::cursor	typeref:typename:double	signature:() const
get_generation	$FLECS/$FLECS/flecs.h	/^inline uint32_t get_generation(flecs::entity_t e) {$/;"	f	namespace:flecs	typeref:typename:uint32_t	signature:(flecs::entity_t e)
get_hooks	$FLECS/$FLECS/flecs.h	/^    flecs::type_hooks_t get_hooks() {$/;"	f	struct:flecs::component	typeref:typename:flecs::type_hooks_t	signature:()
get_info	$FLECS/$FLECS/flecs.h	/^    const flecs::world_info_t* get_info() const{$/;"	f	struct:flecs::world	typeref:typename:const flecs::world_info_t *	signature:() const
get_int	$FLECS/$FLECS/flecs.h	/^    int64_t get_int() const {$/;"	f	struct:flecs::cursor	typeref:typename:int64_t	signature:() const
get_iter	$FLECS/$FLECS/flecs.h	/^    virtual ecs_iter_t get_iter(flecs::world_t *stage) const = 0;$/;"	p	struct:flecs::iterable	typeref:typename:ecs_iter_t	signature:(flecs::world_t * stage) const
get_level	$FLECS/$FLECS/flecs.h	/^inline int get_level(void) {$/;"	f	namespace:flecs::log	typeref:typename:int	signature:(void)
get_link	$FLECS/$FLECS/flecs.h	/^inline const char* get_link(const flecs::entity_view& e) {$/;"	f	namespace:flecs::doc	typeref:typename:const char *	signature:(const flecs::entity_view & e)
get_member	$FLECS/$FLECS/flecs.h	/^    flecs::string_view get_member() const {$/;"	f	struct:flecs::cursor	typeref:typename:flecs::string_view	signature:() const
get_mut	$FLECS/$FLECS/flecs.h	/^inline T* world::get_mut() const {$/;"	f	class:flecs::world	typeref:typename:T *	signature:() const
get_mut_count	$FLECS/$FLECS/flecs.h	/^        int64_t get_mut_count;         \/**< get_mut\/emplace commands processed *\/$/;"	m	struct:ecs_world_info_t::__anonb2bcda280708	typeref:typename:int64_t
get_mut_ptrs	$FLECS/$FLECS/flecs.h	/^    static bool get_mut_ptrs(world_t *world, ecs_entity_t e, ArrayType& ptrs) {$/;"	f	struct:flecs::_::entity_with_delegate_impl	typeref:typename:bool	signature:(world_t * world,ecs_entity_t e,ArrayType & ptrs)
get_mut_second	$FLECS/$FLECS/flecs.h	/^    Second* get_mut_second(entity_t first) const {$/;"	f	struct:flecs::entity	typeref:typename:Second *	signature:(entity_t first) const
get_name	$FLECS/$FLECS/flecs.h	/^inline const char* get_name(const flecs::entity_view& e) {$/;"	f	namespace:flecs::doc	typeref:typename:const char *	signature:(const flecs::entity_view & e)
get_pipeline	$FLECS/$FLECS/flecs.h	/^inline flecs::entity world::get_pipeline() const {$/;"	f	class:flecs::world	typeref:typename:flecs::entity	signature:() const
get_ptr	$FLECS/$FLECS/flecs.h	/^    void* get_ptr() {$/;"	f	struct:flecs::cursor	typeref:typename:void *	signature:()
get_ptrs	$FLECS/$FLECS/flecs.h	/^    bool get_ptrs(world_t *world, const ecs_record_t *r, ecs_table_t *table,$/;"	f	struct:flecs::_::entity_with_delegate_impl	typeref:typename:bool	signature:(world_t * world,const ecs_record_t * r,ecs_table_t * table,ArrayType & ptrs)
get_ref	$FLECS/$FLECS/flecs.h	/^inline ref<T> world::get_ref() const {$/;"	f	class:flecs::world	typeref:typename:ref<T>	signature:() const
get_ref_second	$FLECS/$FLECS/flecs.h	/^    ref<Second> get_ref_second(flecs::entity_t first) const {$/;"	f	struct:flecs::entity	typeref:typename:ref<Second>	signature:(flecs::entity_t first) const
get_row	$FLECS/$FLECS/flecs.h	/^    actual_type_t<T> get_row() {$/;"	f	struct:flecs::_::each_column	typeref:typename:actual_type_t<T>	signature:()
get_scope	$FLECS/$FLECS/flecs.h	/^inline flecs::entity world::get_scope() const {$/;"	f	class:flecs::world	typeref:typename:flecs::entity	signature:() const
get_second	$FLECS/$FLECS/flecs.h	/^    flecs::entity get_second() {$/;"	f	struct:flecs::term	typeref:typename:flecs::entity	signature:()
get_size	$FLECS/$FLECS/flecs.c	/^ecs_size_t get_size($/;"	f	typeref:typename:ecs_size_t	file:	signature:(const ecs_world_t * world,ecs_meta_scope_t * scope)
get_src	$FLECS/$FLECS/flecs.h	/^    flecs::entity get_src() {$/;"	f	struct:flecs::term	typeref:typename:flecs::entity	signature:()
get_stage	$FLECS/$FLECS/flecs.h	/^    flecs::world get_stage(int32_t stage_id) const {$/;"	f	struct:flecs::world	typeref:typename:flecs::world	signature:(int32_t stage_id) const
get_stage_count	$FLECS/$FLECS/flecs.h	/^    int32_t get_stage_count() const {$/;"	f	struct:flecs::world	typeref:typename:int32_t	signature:() const
get_stage_id	$FLECS/$FLECS/flecs.h	/^    int32_t get_stage_id() const {$/;"	f	struct:flecs::world	typeref:typename:int32_t	signature:() const
get_string	$FLECS/$FLECS/flecs.h	/^    const char *get_string() const {$/;"	f	struct:flecs::cursor	typeref:typename:const char *	signature:() const
get_threads	$FLECS/$FLECS/flecs.h	/^int32_t get_threads() const;$/;"	p	struct:flecs::world	typeref:typename:int32_t	signature:() const
get_time_	$FLECS/$FLECS/flecs.h	/^    ecs_os_api_get_time_t get_time_;$/;"	m	struct:ecs_os_api_t	typeref:typename:ecs_os_api_get_time_t
get_type	$FLECS/$FLECS/flecs.h	/^inline flecs::entity cursor::get_type() const {$/;"	f	class:flecs::cursor	typeref:typename:flecs::entity	signature:() const
get_uint	$FLECS/$FLECS/flecs.h	/^    uint64_t get_uint() const {$/;"	f	struct:flecs::cursor	typeref:typename:uint64_t	signature:() const
get_unchecked_field	$FLECS/$FLECS/flecs.h	/^    flecs::untyped_column get_unchecked_field(int32_t index) const {$/;"	f	struct:flecs::iter	typeref:typename:flecs::untyped_column	signature:(int32_t index) const
get_unit	$FLECS/$FLECS/flecs.h	/^inline flecs::entity cursor::get_unit() const {$/;"	f	class:flecs::cursor	typeref:typename:flecs::entity	signature:() const
get_var	$FLECS/$FLECS/flecs.h	/^inline flecs::entity iter::get_var(int var_id) const {$/;"	f	class:flecs::iter	typeref:typename:flecs::entity	signature:(int var_id) const
get_world	$FLECS/$FLECS/flecs.h	/^    flecs::world get_world() const {$/;"	f	struct:flecs::world	typeref:typename:flecs::world	signature:() const
global_with	$FLECS/$FLECS/flecs.c	/^    ecs_entity_t global_with;$/;"	m	struct:__anonb2bcda231908	typeref:typename:ecs_entity_t	file:
graph_edge	$FLECS/$FLECS/flecs.c	/^    ecs_block_allocator_t graph_edge;$/;"	m	struct:ecs_world_allocators_t	typeref:typename:ecs_block_allocator_t	file:
graph_edge_lo	$FLECS/$FLECS/flecs.c	/^    ecs_block_allocator_t graph_edge_lo;$/;"	m	struct:ecs_world_allocators_t	typeref:typename:ecs_block_allocator_t	file:
group_by	$FLECS/$FLECS/flecs.c	/^    ecs_group_by_action_t group_by;$/;"	m	struct:ecs_query_t	typeref:typename:ecs_group_by_action_t	file:
group_by	$FLECS/$FLECS/flecs.h	/^    ecs_group_by_action_t group_by;$/;"	m	struct:ecs_query_desc_t	typeref:typename:ecs_group_by_action_t
group_by_ctx	$FLECS/$FLECS/flecs.c	/^    void *group_by_ctx;$/;"	m	struct:ecs_query_t	typeref:typename:void *	file:
group_by_ctx	$FLECS/$FLECS/flecs.h	/^    void *group_by_ctx;$/;"	m	struct:ecs_query_desc_t	typeref:typename:void *
group_by_ctx_free	$FLECS/$FLECS/flecs.c	/^    ecs_ctx_free_t group_by_ctx_free;$/;"	m	struct:ecs_query_t	typeref:typename:ecs_ctx_free_t	file:
group_by_ctx_free	$FLECS/$FLECS/flecs.h	/^    ecs_ctx_free_t group_by_ctx_free;$/;"	m	struct:ecs_query_desc_t	typeref:typename:ecs_ctx_free_t
group_by_id	$FLECS/$FLECS/flecs.c	/^    ecs_entity_t group_by_id;$/;"	m	struct:ecs_query_t	typeref:typename:ecs_entity_t	file:
group_by_id	$FLECS/$FLECS/flecs.h	/^    ecs_id_t group_by_id;$/;"	m	struct:ecs_query_desc_t	typeref:typename:ecs_id_t
group_ctx	$FLECS/$FLECS/flecs.h	/^    void* group_ctx(uint64_t group_id) const {$/;"	f	struct:flecs::query_base	typeref:typename:void *	signature:(uint64_t group_id) const
group_id	$FLECS/$FLECS/flecs.c	/^    uint64_t group_id;               \/* Value used to organize tables in groups *\/$/;"	m	struct:ecs_query_table_match_t	typeref:typename:uint64_t	file:
group_id	$FLECS/$FLECS/flecs.h	/^    uint64_t group_id;            \/* Group id for table, if group_by is used *\/$/;"	m	struct:ecs_iter_t	typeref:typename:uint64_t
group_info	$FLECS/$FLECS/flecs.h	/^    const flecs::query_group_info_t* group_info(uint64_t group_id) const {$/;"	f	struct:flecs::query_base	typeref:typename:const flecs::query_group_info_t *	signature:(uint64_t group_id) const
groups	$FLECS/$FLECS/flecs.c	/^    ecs_map_t groups;$/;"	m	struct:ecs_query_t	typeref:typename:ecs_map_t	file:
has	$FLECS/$FLECS/flecs.h	/^inline bool world::has(flecs::id_t second) const {$/;"	f	class:flecs::world	typeref:typename:bool	signature:(flecs::id_t second) const
has_flags	$FLECS/$FLECS/flecs.h	/^    bool has_flags(flecs::id_t flags) const {$/;"	f	struct:flecs::id	typeref:typename:bool	signature:(flecs::id_t flags) const
has_relation	$FLECS/$FLECS/flecs.h	/^    bool has_relation(flecs::id_t first) const {$/;"	f	struct:flecs::id	typeref:typename:bool	signature:(flecs::id_t first) const
has_second	$FLECS/$FLECS/flecs.h	/^    bool has_second(flecs::entity_t first) const {$/;"	f	struct:flecs::entity_view	typeref:typename:bool	signature:(flecs::entity_t first) const
has_table_this	$FLECS/$FLECS/flecs.c	/^    bool has_table_this;          \/* Does rule have [$this] *\/$/;"	m	struct:ecs_rule_t	typeref:typename:bool	file:
hash	$FLECS/$FLECS/flecs.c	/^    uint64_t hash;$/;"	m	struct:ecs_hashed_string_t	typeref:typename:uint64_t	file:
hash	$FLECS/$FLECS/flecs.h	/^    uint64_t hash;$/;"	m	struct:__anonb2bcda280608	typeref:typename:uint64_t
hashmap	$FLECS/$FLECS/flecs.c	/^    ecs_block_allocator_t hashmap;$/;"	m	struct:ecs_world_allocators_t	typeref:typename:ecs_block_allocator_t	file:
hashmap_allocator	$FLECS/$FLECS/flecs.h	/^    ecs_block_allocator_t *hashmap_allocator;$/;"	m	struct:__anonb2bcda280408	typeref:typename:ecs_block_allocator_t *
hdr	$FLECS/$FLECS/flecs.c	/^    ecs_table_cache_hdr_t hdr;  \/* Table cache header *\/$/;"	m	struct:ecs_table_record_t	typeref:typename:ecs_table_cache_hdr_t	file:
hdr	$FLECS/$FLECS/flecs.h	/^    ecs_header_t hdr;$/;"	m	struct:ecs_observer_t	typeref:typename:ecs_header_t
hdrs	$FLECS/$FLECS/flecs.c	/^    ecs_map_t hdrs;     \/* map<uint64_t, ecs_switch_header_t> *\/$/;"	m	struct:ecs_switch_t	typeref:typename:ecs_map_t	file:
head	$FLECS/$FLECS/flecs.c	/^    int32_t head;$/;"	m	struct:ecs_http_send_queue_t	typeref:typename:int32_t	file:
head	$FLECS/$FLECS/flecs.h	/^    ecs_block_allocator_chunk_header_t *head;$/;"	m	struct:ecs_block_allocator_t	typeref:typename:ecs_block_allocator_chunk_header_t *
header_buf	$FLECS/$FLECS/flecs.c	/^    char header_buf[32];$/;"	m	struct:__anonb2bcda230708	typeref:typename:char[32]	file:
header_buf_ptr	$FLECS/$FLECS/flecs.c	/^    char *header_buf_ptr;$/;"	m	struct:__anonb2bcda230708	typeref:typename:char *	file:
header_count	$FLECS/$FLECS/flecs.c	/^    int32_t header_count;$/;"	m	struct:__anonb2bcda230708	typeref:typename:int32_t	file:
header_count	$FLECS/$FLECS/flecs.h	/^    int32_t header_count;$/;"	m	struct:__anonb2bcda280b08	typeref:typename:int32_t
header_length	$FLECS/$FLECS/flecs.c	/^    int32_t header_length;$/;"	m	struct:ecs_http_send_request_t	typeref:typename:int32_t	file:
header_offsets	$FLECS/$FLECS/flecs.c	/^    int32_t header_offsets[ECS_HTTP_HEADER_COUNT_MAX];$/;"	m	struct:__anonb2bcda230708	typeref:typename:int32_t[]	file:
header_value_offsets	$FLECS/$FLECS/flecs.c	/^    int32_t header_value_offsets[ECS_HTTP_HEADER_COUNT_MAX];$/;"	m	struct:__anonb2bcda230708	typeref:typename:int32_t[]	file:
headers	$FLECS/$FLECS/flecs.c	/^    char *headers;$/;"	m	struct:ecs_http_send_request_t	typeref:typename:char *	file:
headers	$FLECS/$FLECS/flecs.h	/^    ecs_strbuf_t headers;       \/**< default = "" *\/$/;"	m	struct:__anonb2bcda280c08	typeref:typename:ecs_strbuf_t
hi	$FLECS/$FLECS/flecs.c	/^    ecs_map_t *hi;                   \/* Map for hi edges (map<id, edge_t>) *\/$/;"	m	struct:ecs_graph_edges_t	typeref:typename:ecs_map_t *	file:
hooks	$FLECS/$FLECS/flecs.h	/^    ecs_type_hooks_t hooks;  \/**< Type hooks *\/$/;"	m	struct:ecs_type_info_t	typeref:typename:ecs_type_hooks_t
host	$FLECS/$FLECS/flecs.h	/^    char host[128];$/;"	m	struct:__anonb2bcda280808	typeref:typename:char[128]
http	$FLECS/$FLECS/flecs.h	/^    } http;$/;"	m	struct:ecs_world_stats_t	typeref:struct:ecs_world_stats_t::__anonb2bcda281708
http_accept	$FLECS/$FLECS/flecs.c	/^ecs_http_socket_t http_accept($/;"	f	typeref:typename:ecs_http_socket_t	file:	signature:(ecs_http_socket_t sock,struct sockaddr * addr,ecs_size_t * addr_len)
http_accept_connections	$FLECS/$FLECS/flecs.c	/^void http_accept_connections($/;"	f	typeref:typename:void	file:	signature:(ecs_http_server_t * srv,const struct sockaddr * addr,ecs_size_t addr_len)
http_append_send_headers	$FLECS/$FLECS/flecs.c	/^void http_append_send_headers($/;"	f	typeref:typename:void	file:	signature:(ecs_strbuf_t * hdrs,int code,const char * status,const char * content_type,ecs_strbuf_t * extra_headers,ecs_size_t content_len,bool preflight)
http_bind	$FLECS/$FLECS/flecs.c	/^int http_bind($/;"	f	typeref:typename:int	file:	signature:(ecs_http_socket_t sock,const struct sockaddr * addr,ecs_size_t addr_len)
http_close	$FLECS/$FLECS/flecs.c	/^void http_close($/;"	f	typeref:typename:void	file:	signature:(ecs_http_socket_t * sock)
http_conn_res_t	$FLECS/$FLECS/flecs.c	/^} http_conn_res_t;$/;"	t	typeref:struct:__anonb2bcda230a08	file:
http_connection_free	$FLECS/$FLECS/flecs.c	/^void http_connection_free(ecs_http_connection_impl_t *conn) {$/;"	f	typeref:typename:void	file:	signature:(ecs_http_connection_impl_t * conn)
http_decode_request	$FLECS/$FLECS/flecs.c	/^char* http_decode_request($/;"	f	typeref:typename:char *	file:	signature:(ecs_http_request_impl_t * req,ecs_http_fragment_t * frag)
http_decode_url_str	$FLECS/$FLECS/flecs.c	/^void http_decode_url_str($/;"	f	typeref:typename:void	file:	signature:(char * str)
http_dequeue_requests	$FLECS/$FLECS/flecs.c	/^int32_t http_dequeue_requests($/;"	f	typeref:typename:int32_t	file:	signature:(ecs_http_server_t * srv,double delta_time)
http_do_request	$FLECS/$FLECS/flecs.c	/^void http_do_request($/;"	f	typeref:typename:void	file:	signature:(ecs_http_server_t * srv,ecs_http_reply_t * reply,const ecs_http_request_impl_t * req)
http_enqueue_request	$FLECS/$FLECS/flecs.c	/^ecs_http_request_entry_t* http_enqueue_request($/;"	f	typeref:typename:ecs_http_request_entry_t *	file:	signature:(ecs_http_connection_impl_t * conn,uint64_t conn_id,ecs_http_fragment_t * frag)
http_find_request_entry	$FLECS/$FLECS/flecs.c	/^ecs_http_request_entry_t* http_find_request_entry($/;"	f	typeref:typename:ecs_http_request_entry_t *	file:	signature:(ecs_http_server_t * srv,const char * array,int32_t count)
http_getnameinfo	$FLECS/$FLECS/flecs.c	/^int http_getnameinfo($/;"	f	typeref:typename:int	file:	signature:(const struct sockaddr * addr,ecs_size_t addr_len,char * host,ecs_size_t host_len,char * port,ecs_size_t port_len,int flags)
http_handle_request	$FLECS/$FLECS/flecs.c	/^void http_handle_request($/;"	f	typeref:typename:void	file:	signature:(ecs_http_server_t * srv,ecs_http_request_impl_t * req)
http_header_buf_append	$FLECS/$FLECS/flecs.c	/^void http_header_buf_append($/;"	f	typeref:typename:void	file:	signature:(ecs_http_fragment_t * frag,char ch)
http_header_buf_reset	$FLECS/$FLECS/flecs.c	/^void http_header_buf_reset($/;"	f	typeref:typename:void	file:	signature:(ecs_http_fragment_t * frag)
http_header_writable	$FLECS/$FLECS/flecs.c	/^bool http_header_writable($/;"	f	typeref:typename:bool	file:	signature:(ecs_http_fragment_t * frag)
http_hex_2_int	$FLECS/$FLECS/flecs.c	/^char http_hex_2_int(char a, char b){$/;"	f	typeref:typename:char	file:	signature:(char a,char b)
http_init_connection	$FLECS/$FLECS/flecs.c	/^http_conn_res_t http_init_connection($/;"	f	typeref:typename:http_conn_res_t	file:	signature:(ecs_http_server_t * srv,ecs_http_socket_t sock_conn,struct sockaddr_storage * remote_addr,ecs_size_t remote_addr_len)
http_insert_request_entry	$FLECS/$FLECS/flecs.c	/^void http_insert_request_entry($/;"	f	typeref:typename:void	file:	signature:(ecs_http_server_t * srv,ecs_http_request_impl_t * req,ecs_http_reply_t * reply)
http_parse_method	$FLECS/$FLECS/flecs.c	/^void http_parse_method($/;"	f	typeref:typename:void	file:	signature:(ecs_http_fragment_t * frag)
http_parse_request	$FLECS/$FLECS/flecs.c	/^bool http_parse_request($/;"	f	typeref:typename:bool	file:	signature:(ecs_http_fragment_t * frag,const char * req_frag,ecs_size_t req_frag_len)
http_purge_request_cache	$FLECS/$FLECS/flecs.c	/^void http_purge_request_cache($/;"	f	typeref:typename:void	file:	signature:(ecs_http_server_t * srv,bool fini)
http_recv	$FLECS/$FLECS/flecs.c	/^ecs_size_t http_recv($/;"	f	typeref:typename:ecs_size_t	file:	signature:(ecs_http_socket_t sock,void * buf,ecs_size_t size,int flags)
http_recv_connection	$FLECS/$FLECS/flecs.c	/^void http_recv_connection($/;"	f	typeref:typename:void	file:	signature:(ecs_http_server_t * srv,ecs_http_connection_impl_t * conn,uint64_t conn_id,ecs_http_socket_t sock)
http_reply_fini	$FLECS/$FLECS/flecs.c	/^void http_reply_fini(ecs_http_reply_t* reply) {$/;"	f	typeref:typename:void	file:	signature:(ecs_http_reply_t * reply)
http_request_fini	$FLECS/$FLECS/flecs.c	/^void http_request_fini(ecs_http_request_impl_t *req) {$/;"	f	typeref:typename:void	file:	signature:(ecs_http_request_impl_t * req)
http_request_key_compare	$FLECS/$FLECS/flecs.c	/^int http_request_key_compare(const void *ptr_1, const void *ptr_2) {$/;"	f	typeref:typename:int	file:	signature:(const void * ptr_1,const void * ptr_2)
http_request_key_hash	$FLECS/$FLECS/flecs.c	/^uint64_t http_request_key_hash(const void *ptr) {$/;"	f	typeref:typename:uint64_t	file:	signature:(const void * ptr)
http_send	$FLECS/$FLECS/flecs.c	/^ecs_size_t http_send($/;"	f	typeref:typename:ecs_size_t	file:	signature:(ecs_http_socket_t sock,const void * buf,ecs_size_t size,int flags)
http_send_queue_get	$FLECS/$FLECS/flecs.c	/^ecs_http_send_request_t* http_send_queue_get($/;"	f	typeref:typename:ecs_http_send_request_t *	file:	signature:(ecs_http_server_t * srv)
http_send_queue_post	$FLECS/$FLECS/flecs.c	/^ecs_http_send_request_t* http_send_queue_post($/;"	f	typeref:typename:ecs_http_send_request_t *	file:	signature:(ecs_http_server_t * srv)
http_send_reply	$FLECS/$FLECS/flecs.c	/^void http_send_reply($/;"	f	typeref:typename:void	file:	signature:(ecs_http_connection_impl_t * conn,ecs_http_reply_t * reply,bool preflight)
http_server_send_queue	$FLECS/$FLECS/flecs.c	/^void* http_server_send_queue(void* arg) {$/;"	f	typeref:typename:void *	file:	signature:(void * arg)
http_server_thread	$FLECS/$FLECS/flecs.c	/^void* http_server_thread(void* arg) {$/;"	f	typeref:typename:void *	file:	signature:(void * arg)
http_sock_keep_alive	$FLECS/$FLECS/flecs.c	/^void http_sock_keep_alive($/;"	f	typeref:typename:void	file:	signature:(ecs_http_socket_t sock)
http_sock_nonblock	$FLECS/$FLECS/flecs.c	/^void http_sock_nonblock(ecs_http_socket_t sock, bool enable) {$/;"	f	typeref:typename:void	file:	signature:(ecs_http_socket_t sock,bool enable)
http_sock_set_timeout	$FLECS/$FLECS/flecs.c	/^void http_sock_set_timeout($/;"	f	typeref:typename:void	file:	signature:(ecs_http_socket_t sock,int32_t timeout_ms)
http_socket_is_valid	$FLECS/$FLECS/flecs.c	/^bool http_socket_is_valid($/;"	f	typeref:typename:bool	file:	signature:(ecs_http_socket_t sock)
i16_t	$FLECS/$FLECS/flecs.h	/^using i16_t = ecs_i16_t;$/;"	t	namespace:flecs	typeref:typename:ecs_i16_t
i32_t	$FLECS/$FLECS/flecs.h	/^using i32_t = ecs_i32_t;$/;"	t	namespace:flecs	typeref:typename:ecs_i32_t
i64_t	$FLECS/$FLECS/flecs.h	/^using i64_t = ecs_i64_t;$/;"	t	namespace:flecs	typeref:typename:ecs_i64_t
i8_t	$FLECS/$FLECS/flecs.h	/^using i8_t = ecs_i8_t;$/;"	t	namespace:flecs	typeref:typename:ecs_i8_t
id	$FLECS/$FLECS/flecs.c	/^    uint64_t id;$/;"	m	struct:__anonb2bcda230a08	typeref:typename:uint64_t	file:
id	$FLECS/$FLECS/flecs.h	/^struct id {$/;"	s	namespace:flecs
id_create_total	$FLECS/$FLECS/flecs.h	/^    int64_t id_create_total;          \/**< Total number of times a new id was created *\/$/;"	m	struct:ecs_world_info_t	typeref:typename:int64_t
id_delete_total	$FLECS/$FLECS/flecs.h	/^    int64_t id_delete_total;          \/**< Total number of times an id was deleted *\/$/;"	m	struct:ecs_world_info_t	typeref:typename:int64_t
id_explicit	$FLECS/$FLECS/flecs.h	/^    static entity_t id_explicit(world_t *world = nullptr, $/;"	f	struct:flecs::_::cpp_type_impl	typeref:typename:entity_t	signature:(world_t * world=nullptr,const char * name=nullptr,bool allow_tag=true,flecs::id_t id=0,bool is_component=true,bool * existing=nullptr)
id_flags	$FLECS/$FLECS/flecs.h	/^    ecs_id_t id_flags;          \/**< Id flags of term id *\/$/;"	m	struct:ecs_term_t	typeref:typename:ecs_id_t
id_index_hi	$FLECS/$FLECS/flecs.c	/^    ecs_map_t id_index_hi;           \/* map<id, ecs_id_record_t*> *\/$/;"	m	struct:ecs_world_t	typeref:typename:ecs_map_t	file:
id_index_lo	$FLECS/$FLECS/flecs.c	/^    ecs_id_record_t *id_index_lo;$/;"	m	struct:ecs_world_t	typeref:typename:ecs_id_record_t *	file:
id_record	$FLECS/$FLECS/flecs.c	/^    ecs_block_allocator_t id_record;$/;"	m	struct:ecs_world_allocators_t	typeref:typename:ecs_block_allocator_t	file:
id_record_chunk	$FLECS/$FLECS/flecs.c	/^    ecs_block_allocator_t id_record_chunk;$/;"	m	struct:ecs_world_allocators_t	typeref:typename:ecs_block_allocator_t	file:
id_second	$FLECS/$FLECS/flecs.h	/^    metric_builder& id_second(flecs::entity_t first) {$/;"	f	struct:flecs::metric_builder	typeref:typename:metric_builder &	signature:(flecs::entity_t first)
id_t	$FLECS/$FLECS/flecs.h	/^using id_t = ecs_id_t;$/;"	t	namespace:flecs	typeref:typename:ecs_id_t
idr	$FLECS/$FLECS/flecs.c	/^    ecs_id_record_t *idr;$/;"	m	struct:ecs_marked_id_t	typeref:typename:ecs_id_record_t *	file:
idr	$FLECS/$FLECS/flecs.h	/^    ecs_id_record_t *idr; \/* Id record to (*, entity) for target entities *\/$/;"	m	struct:ecs_record_t	typeref:typename:ecs_id_record_t *
idr_any	$FLECS/$FLECS/flecs.c	/^    ecs_id_record_t *idr_any;$/;"	m	struct:ecs_world_t	typeref:typename:ecs_id_record_t *	file:
idr_childof_0	$FLECS/$FLECS/flecs.c	/^    ecs_id_record_t *idr_childof_0;$/;"	m	struct:ecs_world_t	typeref:typename:ecs_id_record_t *	file:
idr_childof_wildcard	$FLECS/$FLECS/flecs.c	/^    ecs_id_record_t *idr_childof_wildcard;$/;"	m	struct:ecs_world_t	typeref:typename:ecs_id_record_t *	file:
idr_doc_color	$FLECS/$FLECS/flecs.c	/^    ecs_id_record_t *idr_doc_color;$/;"	m	struct:ecs_json_ser_idr_t	typeref:typename:ecs_id_record_t *	file:
idr_doc_name	$FLECS/$FLECS/flecs.c	/^    ecs_id_record_t *idr_doc_name;$/;"	m	struct:ecs_json_ser_idr_t	typeref:typename:ecs_id_record_t *	file:
idr_identifier_name	$FLECS/$FLECS/flecs.c	/^    ecs_id_record_t *idr_identifier_name;$/;"	m	struct:ecs_world_t	typeref:typename:ecs_id_record_t *	file:
idr_inactive	$FLECS/$FLECS/flecs.c	/^    ecs_id_record_t *idr_inactive; \/* Cached record for quick inactive test *\/$/;"	m	struct:ecs_pipeline_state_t	typeref:typename:ecs_id_record_t *	file:
idr_isa_wildcard	$FLECS/$FLECS/flecs.c	/^    ecs_id_record_t *idr_isa_wildcard;$/;"	m	struct:ecs_world_t	typeref:typename:ecs_id_record_t *	file:
idr_trav	$FLECS/$FLECS/flecs.c	/^    ecs_id_record_t *idr_trav;$/;"	m	struct:__anonb2bcda232708	typeref:typename:ecs_id_record_t *	file:
idr_wildcard	$FLECS/$FLECS/flecs.c	/^    ecs_id_record_t *idr_wildcard;$/;"	m	struct:ecs_world_t	typeref:typename:ecs_id_record_t *	file:
idr_wildcard_wildcard	$FLECS/$FLECS/flecs.c	/^    ecs_id_record_t *idr_wildcard_wildcard;$/;"	m	struct:ecs_world_t	typeref:typename:ecs_id_record_t *	file:
idr_with	$FLECS/$FLECS/flecs.c	/^    ecs_id_record_t *idr_with;$/;"	m	struct:__anonb2bcda232708	typeref:typename:ecs_id_record_t *	file:
ids	$FLECS/$FLECS/flecs.c	/^    ecs_vec_t ids; \/* vec<reachable_elem_t> *\/$/;"	m	struct:ecs_reachable_cache_t	typeref:typename:ecs_vec_t	file:
ids	$FLECS/$FLECS/flecs.h	/^    ecs_id_t ids[FLECS_ID_DESC_MAX]; \/**< Ids to create the entities with *\/$/;"	m	struct:ecs_bulk_desc_t	typeref:typename:ecs_id_t[]
if_not_t	$FLECS/$FLECS/flecs.h	/^using if_not_t = enable_if_t<false == V, int>;$/;"	t	namespace:flecs	typeref:typename:enable_if_t<false==V,int>
if_t	$FLECS/$FLECS/flecs.h	/^using if_t = enable_if_t<V, int>;$/;"	t	namespace:flecs	typeref:typename:enable_if_t<V,int>
impl	$FLECS/$FLECS/flecs.h	/^    void *impl;$/;"	m	struct:__anonb2bcda280e08	typeref:typename:void *
impl_	$FLECS/$FLECS/flecs.h	/^    _::enum_data_impl& impl_;$/;"	m	struct:flecs::enum_data	typeref:typename:_::enum_data_impl &
import	$FLECS/$FLECS/flecs.h	/^inline flecs::entity world::import() {$/;"	f	class:flecs::world	typeref:typename:flecs::entity	signature:()
in	$FLECS/$FLECS/flecs.h	/^    Base& in() {$/;"	f	struct:flecs::term_builder_i	typeref:typename:Base &	signature:()
in_or	$FLECS/$FLECS/flecs.c	/^    bool in_or; \/* Whether we're in an or chain *\/$/;"	m	struct:__anonb2bcda233208	typeref:typename:bool	file:
inactive_time	$FLECS/$FLECS/flecs.c	/^    ecs_ftime_t inactive_time; \/* Time the alert has been inactive *\/$/;"	m	struct:EcsAlertTimeout	typeref:typename:ecs_ftime_t	file:
index	$FLECS/$FLECS/flecs.c	/^    int32_t index;$/;"	m	struct:__anonb2bcda232b08	typeref:typename:int32_t	file:
index	$FLECS/$FLECS/flecs.h	/^    int32_t index;$/;"	m	struct:ecs_worker_iter_t	typeref:typename:int32_t
index_hash	$FLECS/$FLECS/flecs.h	/^    uint64_t index_hash;  \/**< Hash of existing record in current index *\/$/;"	m	struct:EcsIdentifier	typeref:typename:uint64_t
info	$FLECS/$FLECS/flecs.c	/^    ecs_world_info_t info;$/;"	m	struct:ecs_world_t	typeref:typename:ecs_world_info_t	file:
info_count	$FLECS/$FLECS/flecs.h	/^    int32_t info_count;$/;"	m	struct:EcsAlertsActive	typeref:typename:int32_t
init	$FLECS/$FLECS/flecs.h	/^void init(flecs::world& world);$/;"	p	namespace:flecs::rest::_	typeref:typename:void	signature:(flecs::world & world)
init_	$FLECS/$FLECS/flecs.h	/^    ecs_os_api_init_t init_;$/;"	m	struct:ecs_os_api_t	typeref:typename:ecs_os_api_init_t
init_builtin_components	$FLECS/$FLECS/flecs.h	/^inline void world::init_builtin_components() {$/;"	f	class:flecs::world	typeref:typename:void	signature:()
init_constant	$FLECS/$FLECS/flecs.h	/^    static void init_constant(flecs::world_t*) { }$/;"	f	struct:flecs::_::enum_type	typeref:typename:void	signature:(flecs::world_t *)
init_enum	$FLECS/$FLECS/flecs.h	/^inline static void init_enum(flecs::world_t*, flecs::entity_t) { }$/;"	f	namespace:flecs::_	typeref:typename:void	signature:(flecs::world_t *,flecs::entity_t)
init_type_t	$FLECS/$FLECS/flecs.c	/^#define init_type_t(/;"	d	file:	signature:(world,type,kind,T)
initialized	$FLECS/$FLECS/flecs.c	/^    bool initialized;$/;"	m	struct:ecs_http_server_t	typeref:typename:bool	file:
inout	$FLECS/$FLECS/flecs.h	/^    flecs::inout_kind_t inout() {$/;"	f	struct:flecs::term	typeref:typename:flecs::inout_kind_t	signature:()
inout_kind_t	$FLECS/$FLECS/flecs.h	/^enum inout_kind_t {$/;"	g	namespace:flecs
inout_none	$FLECS/$FLECS/flecs.h	/^    Base& inout_none() {$/;"	f	struct:flecs::term_builder_i	typeref:typename:Base &	signature:()
inout_stage	$FLECS/$FLECS/flecs.h	/^    Base& inout_stage(flecs::inout_kind_t inout) {$/;"	f	struct:flecs::term_builder_i	typeref:typename:Base &	signature:(flecs::inout_kind_t inout)
instance_count	$FLECS/$FLECS/flecs.h	/^    int32_t instance_count;       \/* Number of entities to iterate before next table *\/$/;"	m	struct:ecs_iter_t	typeref:typename:int32_t
instanced	$FLECS/$FLECS/flecs.h	/^    static bool instanced() {$/;"	f	struct:flecs::_::iter_delegate	typeref:typename:bool	signature:()
instances	$FLECS/$FLECS/flecs.c	/^    ecs_map_t instances;        \/* Active instances for metric *\/$/;"	m	struct:EcsAlert	typeref:typename:ecs_map_t	file:
interrupted_by	$FLECS/$FLECS/flecs.h	/^    ecs_entity_t interrupted_by;  \/* When set, system execution is interrupted *\/$/;"	m	struct:ecs_iter_t	typeref:typename:ecs_entity_t
interval	$FLECS/$FLECS/flecs.h	/^void interval(ecs_ftime_t interval);$/;"	p	struct:flecs::system	typeref:typename:void	signature:(ecs_ftime_t interval)
invalid	$FLECS/$FLECS/flecs.c	/^    bool invalid;$/;"	m	struct:__anonb2bcda230708	typeref:typename:bool	file:
invoke	$FLECS/$FLECS/flecs.h	/^    void invoke(ecs_iter_t *iter) const {$/;"	f	struct:flecs::_::iter_delegate	typeref:typename:void	signature:(ecs_iter_t * iter) const
invoke_callback	$FLECS/$FLECS/flecs.h	/^    static void invoke_callback(ecs_iter_t *iter, const Func& func, size_t, $/;"	f	struct:flecs::_::iter_delegate	typeref:typename:void	signature:(ecs_iter_t * iter,const Func & func,size_t,Terms &,Targs...comps)
invoke_count	$FLECS/$FLECS/flecs.c	/^    int64_t invoke_count;           \/* Number of times system is invoked *\/$/;"	m	struct:ecs_system_t	typeref:typename:int64_t	file:
invoke_count	$FLECS/$FLECS/flecs.h	/^    ecs_metric_t invoke_count;     \/**< Number of times system is invoked *\/$/;"	m	struct:ecs_system_stats_t	typeref:typename:ecs_metric_t
invoke_get	$FLECS/$FLECS/flecs.h	/^    static bool invoke_get(world_t *world, entity_t e, const Func& func) {$/;"	f	struct:flecs::_::entity_with_delegate_impl	typeref:typename:bool	signature:(world_t * world,entity_t e,const Func & func)
invoke_get_mut	$FLECS/$FLECS/flecs.h	/^    static bool invoke_get_mut(world_t *world, entity_t id, const Func& func) {$/;"	f	struct:flecs::_::entity_with_delegate_impl	typeref:typename:bool	signature:(world_t * world,entity_t id,const Func & func)
invoke_read	$FLECS/$FLECS/flecs.h	/^    static bool invoke_read(world_t *world, entity_t e, const Func& func) {$/;"	f	struct:flecs::_::entity_with_delegate_impl	typeref:typename:bool	signature:(world_t * world,entity_t e,const Func & func)
invoke_write	$FLECS/$FLECS/flecs.h	/^    static bool invoke_write(world_t *world, entity_t e, const Func& func) {$/;"	f	struct:flecs::_::entity_with_delegate_impl	typeref:typename:bool	signature:(world_t * world,entity_t e,const Func & func)
ipaddr	$FLECS/$FLECS/flecs.c	/^    const char *ipaddr;$/;"	m	struct:ecs_http_server_t	typeref:typename:const char *	file:
ipaddr	$FLECS/$FLECS/flecs.h	/^    const char *ipaddr;               \/**< Interface to listen on (optional) *\/$/;"	m	struct:__anonb2bcda280d08	typeref:typename:const char *
iptr_t	$FLECS/$FLECS/flecs.h	/^using iptr_t = ecs_iptr_t;$/;"	t	namespace:flecs	typeref:typename:ecs_iptr_t
is	$FLECS/$FLECS/flecs.c	/^    } is;$/;"	m	struct:ecs_rule_op_ctx_t	typeref:union:ecs_rule_op_ctx_t::__anonb2bcda23310a	file:
is_a	$FLECS/$FLECS/flecs.h	/^    Self& is_a(entity_t second) {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &	signature:(entity_t second)
is_actual	$FLECS/$FLECS/flecs.h	/^struct is_actual {$/;"	s	namespace:flecs
is_alive	$FLECS/$FLECS/flecs.h	/^    bool is_alive(flecs::entity_t e) const {$/;"	f	struct:flecs::world	typeref:typename:bool	signature:(flecs::entity_t e) const
is_any_pair	$FLECS/$FLECS/flecs.c	/^bool is_any_pair($/;"	f	typeref:typename:bool	file:	signature:(ecs_id_t id)
is_callable	$FLECS/$FLECS/flecs.h	/^struct is_callable {$/;"	s	namespace:flecs
is_collection	$FLECS/$FLECS/flecs.c	/^    bool is_collection;$/;"	m	struct:json_serializer_ctx_t	typeref:typename:bool	file:
is_collection	$FLECS/$FLECS/flecs.h	/^    bool is_collection;       \/**< Is the scope iterating elements? *\/$/;"	m	struct:ecs_meta_scope_t	typeref:typename:bool
is_const	$FLECS/$FLECS/flecs.c	/^    bool is_const;$/;"	m	struct:meta_type_t	typeref:typename:bool	file:
is_const_p	$FLECS/$FLECS/flecs.h	/^using is_const_p = is_const< remove_pointer_t<T> >;$/;"	t	namespace:flecs	typeref:typename:is_const<remove_pointer_t<T>>
is_deferred	$FLECS/$FLECS/flecs.c	/^    bool is_deferred;$/;"	m	struct:ecs_suspend_readonly_state_t	typeref:typename:bool	file:
is_deferred	$FLECS/$FLECS/flecs.h	/^    bool is_deferred() const {$/;"	f	struct:flecs::world	typeref:typename:bool	signature:() const
is_dirty	$FLECS/$FLECS/flecs.c	/^    bool is_dirty;                   \/* Should queries be rematched? *\/$/;"	m	struct:ecs_monitor_t	typeref:typename:bool	file:
is_empty_scope	$FLECS/$FLECS/flecs.h	/^    bool is_empty_scope;      \/**< Was scope populated (for collections) *\/$/;"	m	struct:ecs_meta_scope_t	typeref:typename:bool
is_entity	$FLECS/$FLECS/flecs.h	/^    bool is_entity() const {$/;"	f	struct:flecs::id	typeref:typename:bool	signature:() const
is_fixed_size	$FLECS/$FLECS/flecs.c	/^    bool is_fixed_size;$/;"	m	struct:meta_params_t	typeref:typename:bool	file:
is_flecs_constructible	$FLECS/$FLECS/flecs.h	/^struct is_flecs_constructible {$/;"	s	namespace:flecs
is_free	$FLECS/$FLECS/flecs.h	/^    bool is_free;$/;"	m	struct:ecs_stack_cursor_t	typeref:typename:bool
is_inline_array	$FLECS/$FLECS/flecs.h	/^    bool is_inline_array;     \/**< Is the scope iterating an inline array? *\/$/;"	m	struct:ecs_meta_scope_t	typeref:typename:bool
is_key_value	$FLECS/$FLECS/flecs.c	/^    bool is_key_value;$/;"	m	struct:meta_params_t	typeref:typename:bool	file:
is_module	$FLECS/$FLECS/flecs.c	/^    bool is_module;$/;"	m	struct:__anonb2bcda231908	typeref:typename:bool	file:
is_monitor	$FLECS/$FLECS/flecs.h	/^    bool is_monitor;            \/**< If true, the observer only triggers when the$/;"	m	struct:ecs_observer_t	typeref:typename:bool
is_multi	$FLECS/$FLECS/flecs.h	/^    bool is_multi;              \/**< If true, the observer triggers on more than one term *\/$/;"	m	struct:ecs_observer_t	typeref:typename:bool
is_not_0	$FLECS/$FLECS/flecs.h	/^    static constexpr int is_not_0() {$/;"	f	struct:flecs::_::enum_type	typeref:typename:int	signature:()
is_pair	$FLECS/$FLECS/flecs.h	/^struct is_pair {$/;"	s	namespace:flecs
is_partial	$FLECS/$FLECS/flecs.c	/^    bool is_partial;$/;"	m	struct:meta_member_t	typeref:typename:bool	file:
is_primitive_scope	$FLECS/$FLECS/flecs.h	/^    bool is_primitive_scope;  \/**< If in root scope, this allows for a push for primitive types/;"	m	struct:ecs_meta_cursor_t	typeref:typename:bool
is_ptr	$FLECS/$FLECS/flecs.c	/^    bool is_ptr;$/;"	m	struct:meta_type_t	typeref:typename:bool	file:
is_readonly	$FLECS/$FLECS/flecs.c	/^    bool is_readonly;$/;"	m	struct:ecs_suspend_readonly_state_t	typeref:typename:bool	file:
is_readonly	$FLECS/$FLECS/flecs.h	/^    bool is_readonly(int32_t index) const {$/;"	f	struct:flecs::iter	typeref:typename:bool	signature:(int32_t index) const
is_ref	$FLECS/$FLECS/flecs.h	/^    bool is_ref;$/;"	m	struct:flecs::_::term_ptr	typeref:typename:bool
is_self	$FLECS/$FLECS/flecs.h	/^    bool is_self(int32_t index) const {$/;"	f	struct:flecs::iter	typeref:typename:bool	signature:(int32_t index) const
is_set	$FLECS/$FLECS/flecs.h	/^    bool is_set(int32_t index) const {$/;"	f	struct:flecs::iter	typeref:typename:bool	signature:(int32_t index) const
is_stage	$FLECS/$FLECS/flecs.h	/^    bool is_stage() const {$/;"	f	struct:flecs::world	typeref:typename:bool	signature:() const
is_struct	$FLECS/$FLECS/flecs.c	/^    bool is_struct;$/;"	m	struct:json_serializer_ctx_t	typeref:typename:bool	file:
is_true	$FLECS/$FLECS/flecs.h	/^    bool is_true() {$/;"	f	struct:flecs::iter_iterable	typeref:typename:bool	signature:()
is_valid	$FLECS/$FLECS/flecs.h	/^    bool is_valid(int value) {$/;"	f	struct:flecs::enum_data	typeref:typename:bool	signature:(int value)
is_value_set	$FLECS/$FLECS/flecs.c	/^    bool is_value_set;$/;"	m	struct:meta_constant_t	typeref:typename:bool	file:
is_wildcard	$FLECS/$FLECS/flecs.h	/^    bool is_wildcard() const {$/;"	f	struct:flecs::id	typeref:typename:bool	signature:() const
isa_stmt	$FLECS/$FLECS/flecs.c	/^    bool isa_stmt;$/;"	m	struct:__anonb2bcda231908	typeref:typename:bool	file:
it	$FLECS/$FLECS/flecs.c	/^    ecs_table_cache_iter_t it;$/;"	m	struct:__anonb2bcda233008	typeref:typename:ecs_table_cache_iter_t	file:
it	$FLECS/$FLECS/flecs.h	/^    ecs_table_cache_iter_t it;$/;"	m	struct:ecs_term_iter_t	typeref:typename:ecs_table_cache_iter_t
iter	$FLECS/$FLECS/flecs.h	/^struct iter {$/;"	s	namespace:flecs
iter_count	$FLECS/$FLECS/flecs.c	/^    int32_t iter_count;$/;"	m	struct:ecs_pipeline_state_t	typeref:typename:int32_t	file:
iter_delegate	$FLECS/$FLECS/flecs.h	/^struct iter_delegate : delegate {$/;"	s	namespace:flecs::_
iter_iterable	$FLECS/$FLECS/flecs.h	/^struct iter_iterable final : iterable<Components...> {$/;"	s	namespace:flecs
iter_stack	$FLECS/$FLECS/flecs.c	/^    ecs_stack_t iter_stack;$/;"	m	struct:ecs_stage_allocators_t	typeref:typename:ecs_stack_t	file:
iter_t	$FLECS/$FLECS/flecs.h	/^using iter_t = ecs_iter_t;$/;"	t	namespace:flecs	typeref:typename:ecs_iter_t
iter_to_json_desc_t	$FLECS/$FLECS/flecs.h	/^using iter_to_json_desc_t = ecs_iter_to_json_desc_t;$/;"	t	namespace:flecs	typeref:typename:ecs_iter_to_json_desc_t
iterable	$FLECS/$FLECS/flecs.c	/^    ecs_iterable_t iterable;$/;"	m	struct:ecs_world_t	typeref:typename:ecs_iterable_t	file:
iterable	$FLECS/$FLECS/flecs.h	/^struct iterable {$/;"	s	namespace:flecs
iterate	$FLECS/$FLECS/flecs.h	/^    void iterate(flecs::world_t *stage, Func&& func, NextFunc next, Args &&... args) const {$/;"	f	struct:flecs::iterable	typeref:typename:void	signature:(flecs::world_t * stage,Func && func,NextFunc next,Args &&...args) const
iterate_find	$FLECS/$FLECS/flecs.h	/^    flecs::entity iterate_find(flecs::world_t *stage, Func&& func, NextFunc next, Args &&... arg/;"	f	struct:flecs::iterable	typeref:typename:flecs::entity	signature:(flecs::world_t * stage,Func && func,NextFunc next,Args &&...args) const
iters	$FLECS/$FLECS/flecs.c	/^    ecs_iter_t *iters;          \/* Iterator for worker(s) *\/$/;"	m	struct:ecs_pipeline_state_t	typeref:typename:ecs_iter_t *	file:
json_ser_array	$FLECS/$FLECS/flecs.c	/^int json_ser_array($/;"	f	typeref:typename:int	file:	signature:(const ecs_world_t * world,ecs_meta_type_op_t * op,const void * ptr,ecs_strbuf_t * str)
json_ser_bitmask	$FLECS/$FLECS/flecs.c	/^int json_ser_bitmask($/;"	f	typeref:typename:int	file:	signature:(const ecs_world_t * world,ecs_meta_type_op_t * op,const void * ptr,ecs_strbuf_t * str)
json_ser_custom_member	$FLECS/$FLECS/flecs.c	/^int json_ser_custom_member($/;"	f	typeref:typename:int	file:	signature:(const ecs_serializer_t * ser,const char * name)
json_ser_custom_type	$FLECS/$FLECS/flecs.c	/^int json_ser_custom_type($/;"	f	typeref:typename:int	file:	signature:(const ecs_world_t * world,ecs_meta_type_op_t * op,const void * base,ecs_strbuf_t * str)
json_ser_custom_value	$FLECS/$FLECS/flecs.c	/^int json_ser_custom_value($/;"	f	typeref:typename:int	file:	signature:(const ecs_serializer_t * ser,ecs_entity_t type,const void * value)
json_ser_elements	$FLECS/$FLECS/flecs.c	/^int json_ser_elements($/;"	f	typeref:typename:int	file:	signature:(const ecs_world_t * world,ecs_meta_type_op_t * ops,int32_t op_count,const void * base,int32_t elem_count,int32_t elem_size,ecs_strbuf_t * str,bool is_array)
json_ser_enum	$FLECS/$FLECS/flecs.c	/^int json_ser_enum($/;"	f	typeref:typename:int	file:	signature:(const ecs_world_t * world,ecs_meta_type_op_t * op,const void * base,ecs_strbuf_t * str)
json_ser_type	$FLECS/$FLECS/flecs.c	/^int json_ser_type($/;"	p	typeref:typename:int	file:	signature:(const ecs_world_t * world,const ecs_vec_t * ser,const void * base,ecs_strbuf_t * str)
json_ser_type_elements	$FLECS/$FLECS/flecs.c	/^int json_ser_type_elements($/;"	f	typeref:typename:int	file:	signature:(const ecs_world_t * world,ecs_entity_t type,const void * base,int32_t elem_count,ecs_strbuf_t * str,bool is_array)
json_ser_type_op	$FLECS/$FLECS/flecs.c	/^int json_ser_type_op($/;"	p	typeref:typename:int	file:	signature:(const ecs_world_t * world,ecs_meta_type_op_t * op,const void * base,ecs_strbuf_t * str)
json_ser_type_ops	$FLECS/$FLECS/flecs.c	/^int json_ser_type_ops($/;"	p	typeref:typename:int	file:	signature:(const ecs_world_t * world,ecs_meta_type_op_t * ops,int32_t op_count,const void * base,ecs_strbuf_t * str,int32_t in_array)
json_ser_vector	$FLECS/$FLECS/flecs.c	/^int json_ser_vector($/;"	f	typeref:typename:int	file:	signature:(const ecs_world_t * world,ecs_meta_type_op_t * op,const void * base,ecs_strbuf_t * str)
json_serializer_ctx_t	$FLECS/$FLECS/flecs.c	/^} json_serializer_ctx_t;$/;"	t	typeref:struct:json_serializer_ctx_t	file:
json_typeinfo_ser_array	$FLECS/$FLECS/flecs.c	/^int json_typeinfo_ser_array($/;"	f	typeref:typename:int	file:	signature:(const ecs_world_t * world,ecs_entity_t elem_type,int32_t count,ecs_strbuf_t * str)
json_typeinfo_ser_array_type	$FLECS/$FLECS/flecs.c	/^int json_typeinfo_ser_array_type($/;"	f	typeref:typename:int	file:	signature:(const ecs_world_t * world,ecs_entity_t type,ecs_strbuf_t * str)
json_typeinfo_ser_bitmask	$FLECS/$FLECS/flecs.c	/^void json_typeinfo_ser_bitmask($/;"	f	typeref:typename:void	file:	signature:(const ecs_world_t * world,ecs_entity_t type,ecs_strbuf_t * str)
json_typeinfo_ser_constants	$FLECS/$FLECS/flecs.c	/^void json_typeinfo_ser_constants($/;"	f	typeref:typename:void	file:	signature:(const ecs_world_t * world,ecs_entity_t type,ecs_strbuf_t * str)
json_typeinfo_ser_enum	$FLECS/$FLECS/flecs.c	/^void json_typeinfo_ser_enum($/;"	f	typeref:typename:void	file:	signature:(const ecs_world_t * world,ecs_entity_t type,ecs_strbuf_t * str)
json_typeinfo_ser_primitive	$FLECS/$FLECS/flecs.c	/^int json_typeinfo_ser_primitive($/;"	f	typeref:typename:int	file:	signature:(ecs_primitive_kind_t kind,ecs_strbuf_t * str)
json_typeinfo_ser_range	$FLECS/$FLECS/flecs.c	/^void json_typeinfo_ser_range($/;"	f	typeref:typename:void	file:	signature:(ecs_strbuf_t * str,const char * kind,ecs_member_value_range_t * range)
json_typeinfo_ser_type	$FLECS/$FLECS/flecs.c	/^int json_typeinfo_ser_type($/;"	p	typeref:typename:int	file:	signature:(const ecs_world_t * world,ecs_entity_t type,ecs_strbuf_t * buf)
json_typeinfo_ser_type_op	$FLECS/$FLECS/flecs.c	/^int json_typeinfo_ser_type_op($/;"	f	typeref:typename:int	file:	signature:(const ecs_world_t * world,ecs_meta_type_op_t * op,ecs_strbuf_t * str,const EcsStruct * st)
json_typeinfo_ser_type_ops	$FLECS/$FLECS/flecs.c	/^int json_typeinfo_ser_type_ops($/;"	f	typeref:typename:int	file:	signature:(const ecs_world_t * world,ecs_meta_type_op_t * ops,int32_t op_count,ecs_strbuf_t * str,const EcsStruct * st)
json_typeinfo_ser_unit	$FLECS/$FLECS/flecs.c	/^int json_typeinfo_ser_unit($/;"	f	typeref:typename:int	file:	signature:(const ecs_world_t * world,ecs_strbuf_t * str,ecs_entity_t unit)
json_typeinfo_ser_vector	$FLECS/$FLECS/flecs.c	/^int json_typeinfo_ser_vector($/;"	f	typeref:typename:int	file:	signature:(const ecs_world_t * world,ecs_entity_t type,ecs_strbuf_t * str)
keep_alive	$FLECS/$FLECS/flecs.c	/^    int32_t keep_alive;$/;"	m	struct:ecs_id_record_t	typeref:typename:int32_t	file:
keep_names	$FLECS/$FLECS/flecs.h	/^    bool keep_names;$/;"	m	struct:ecs_flatten_desc_t	typeref:typename:bool
key	$FLECS/$FLECS/flecs.h	/^    void *key;$/;"	m	struct:__anonb2bcda280608	typeref:typename:void *
key_size	$FLECS/$FLECS/flecs.h	/^    ecs_size_t key_size;$/;"	m	struct:__anonb2bcda280408	typeref:typename:ecs_size_t
key_type	$FLECS/$FLECS/flecs.c	/^    meta_type_t key_type;$/;"	m	struct:meta_params_t	typeref:typename:meta_type_t	file:
keys	$FLECS/$FLECS/flecs.h	/^    ecs_vec_t keys;$/;"	m	struct:__anonb2bcda280308	typeref:typename:ecs_vec_t
kind	$FLECS/$FLECS/flecs.c	/^    uint8_t kind;              \/* Instruction kind *\/$/;"	m	struct:ecs_rule_op_t	typeref:typename:uint8_t	file:
kind	$FLECS/$FLECS/flecs.h	/^    metric_builder& kind(flecs::entity_t the_kind) {$/;"	f	struct:flecs::metric_builder	typeref:typename:metric_builder &	signature:(flecs::entity_t the_kind)
label	$FLECS/$FLECS/flecs.c	/^    const char *label;     \/* for debugging *\/$/;"	m	struct:ecs_rule_var_t	typeref:typename:const char *	file:
ladec_	$FLECS/$FLECS/flecs.h	/^    ecs_os_api_lainc_t ladec_;$/;"	m	struct:ecs_os_api_t	typeref:typename:ecs_os_api_lainc_t
lainc_	$FLECS/$FLECS/flecs.h	/^    ecs_os_api_lainc_t lainc_;$/;"	m	struct:ecs_os_api_t	typeref:typename:ecs_os_api_lainc_t
last	$FLECS/$FLECS/flecs.c	/^    int32_t last;                    \/* If -1, a delete command was inserted *\/$/;"	m	struct:ecs_cmd_entry_t	typeref:typename:int32_t	file:
last	$FLECS/$FLECS/flecs.h	/^    int last() const {$/;"	f	struct:flecs::enum_data	typeref:typename:int	signature:() const
last_	$FLECS/$FLECS/flecs.h	/^    int64_t last_;$/;"	m	struct:ecs_world_stats_t	typeref:typename:int64_t
last_assign_id	$FLECS/$FLECS/flecs.c	/^    ecs_id_t last_assign_id;$/;"	m	struct:__anonb2bcda231908	typeref:typename:ecs_id_t	file:
last_column	$FLECS/$FLECS/flecs.h	/^    int32_t last_column;$/;"	m	struct:ecs_term_iter_t	typeref:typename:int32_t
last_component_id	$FLECS/$FLECS/flecs.h	/^    ecs_entity_t last_component_id;   \/**< Last issued component entity id *\/$/;"	m	struct:ecs_world_info_t	typeref:typename:ecs_entity_t
last_event_id	$FLECS/$FLECS/flecs.h	/^    int32_t *last_event_id;$/;"	m	struct:ecs_observer_desc_t	typeref:typename:int32_t *
last_event_id_storage	$FLECS/$FLECS/flecs.h	/^    int32_t last_event_id_storage;$/;"	m	struct:ecs_observer_t	typeref:typename:int32_t
last_frame	$FLECS/$FLECS/flecs.c	/^    int64_t last_frame;             \/* Last frame for which the system was considered *\/$/;"	m	struct:ecs_system_t	typeref:typename:int64_t	file:
last_id	$FLECS/$FLECS/flecs.c	/^    uint64_t last_id;$/;"	m	struct:ecs_snapshot_t	typeref:typename:uint64_t	file:
last_object	$FLECS/$FLECS/flecs.c	/^    ecs_entity_t last_object;$/;"	m	struct:__anonb2bcda231908	typeref:typename:ecs_entity_t	file:
last_predicate	$FLECS/$FLECS/flecs.c	/^    ecs_entity_t last_predicate;$/;"	m	struct:__anonb2bcda231908	typeref:typename:ecs_entity_t	file:
last_subject	$FLECS/$FLECS/flecs.c	/^    ecs_entity_t last_subject;$/;"	m	struct:__anonb2bcda231908	typeref:typename:ecs_entity_t	file:
last_system	$FLECS/$FLECS/flecs.c	/^    ecs_entity_t last_system;   \/* Last system ran by pipeline *\/$/;"	m	struct:ecs_pipeline_state_t	typeref:typename:ecs_entity_t	file:
lbl_begin	$FLECS/$FLECS/flecs.c	/^    ecs_rule_lbl_t lbl_begin;$/;"	m	struct:__anonb2bcda233208	typeref:typename:ecs_rule_lbl_t	file:
lbl_cond_eval	$FLECS/$FLECS/flecs.c	/^    ecs_rule_lbl_t lbl_cond_eval;$/;"	m	struct:__anonb2bcda233208	typeref:typename:ecs_rule_lbl_t	file:
lbl_query	$FLECS/$FLECS/flecs.c	/^    ecs_rule_lbl_t lbl_query; \/* Used to find the op that does the actual searching *\/$/;"	m	struct:__anonb2bcda233208	typeref:typename:ecs_rule_lbl_t	file:
leaf	$FLECS/$FLECS/flecs.c	/^    bool leaf; \/* Table owns and inherits id (for Up queries without Self) *\/$/;"	m	struct:__anonb2bcda232308	typeref:typename:bool	file:
length	$FLECS/$FLECS/flecs.c	/^    ecs_size_t length;$/;"	m	struct:ecs_hashed_string_t	typeref:typename:ecs_size_t	file:
length	$FLECS/$FLECS/flecs.h	/^struct length {$/;"	s	struct:flecs::units
likely_	$FLECS/$FLECS/flecs.c	/^  #define likely_(/;"	d	file:	signature:(x)
limit	$FLECS/$FLECS/flecs.h	/^    system_runner_fluent& limit(int32_t limit) {$/;"	f	struct:flecs::system_runner_fluent	typeref:typename:system_runner_fluent &	signature:(int32_t limit)
list	$FLECS/$FLECS/flecs.c	/^    ecs_query_table_list_t list;$/;"	m	struct:ecs_query_t	typeref:typename:ecs_query_table_list_t	file:
list_sp	$FLECS/$FLECS/flecs.h	/^    int32_t list_sp;$/;"	m	struct:ecs_strbuf_t	typeref:typename:int32_t
list_stack	$FLECS/$FLECS/flecs.h	/^    ecs_strbuf_list_elem list_stack[ECS_STRBUF_MAX_LIST_DEPTH];$/;"	m	struct:ecs_strbuf_t	typeref:typename:ecs_strbuf_list_elem[]
lo	$FLECS/$FLECS/flecs.c	/^    ecs_graph_edge_t *lo;            \/* Small array optimized for low edges *\/$/;"	m	struct:ecs_graph_edges_t	typeref:typename:ecs_graph_edge_t *	file:
lock	$FLECS/$FLECS/flecs.c	/^    int32_t lock;                    \/* Prevents modifications *\/$/;"	m	struct:ecs_table__t	typeref:typename:int32_t	file:
log	$FLECS/$FLECS/flecs.h	/^namespace log {$/;"	n	namespace:flecs
log_	$FLECS/$FLECS/flecs.h	/^    ecs_os_api_log_t log_; \/* Logging function. The level should be interpreted as: *\/$/;"	m	struct:ecs_os_api_t	typeref:typename:ecs_os_api_log_t
log_indent_	$FLECS/$FLECS/flecs.h	/^    int32_t log_indent_;$/;"	m	struct:ecs_os_api_t	typeref:typename:int32_t
log_last_error_	$FLECS/$FLECS/flecs.h	/^    int32_t log_last_error_;$/;"	m	struct:ecs_os_api_t	typeref:typename:int32_t
log_last_timestamp_	$FLECS/$FLECS/flecs.h	/^    int64_t log_last_timestamp_;$/;"	m	struct:ecs_os_api_t	typeref:typename:int64_t
log_level_	$FLECS/$FLECS/flecs.h	/^    int32_t log_level_;$/;"	m	struct:ecs_os_api_t	typeref:typename:int32_t
lookup	$FLECS/$FLECS/flecs.c	/^    const char *lookup;    \/* Lookup string for variable *\/$/;"	m	struct:ecs_rule_var_t	typeref:typename:const char *	file:
lookup	$FLECS/$FLECS/flecs.h	/^inline flecs::entity entity_view::lookup(const char *path, bool search_path) const {$/;"	f	class:flecs::entity_view	typeref:typename:flecs::entity	signature:(const char * path,bool search_path) const
lookup_action	$FLECS/$FLECS/flecs.h	/^    ecs_entity_t (*lookup_action)(const ecs_world_t*, const char*, void*);$/;"	m	struct:ecs_meta_cursor_t	typeref:typename:ecs_entity_t (*)(const ecs_world_t *,const char *,void *)
lookup_ctx	$FLECS/$FLECS/flecs.h	/^    void *lookup_ctx;$/;"	m	struct:ecs_parse_expr_desc_t	typeref:typename:void *
lookup_path	$FLECS/$FLECS/flecs.c	/^    const ecs_entity_t *lookup_path; \/* Search path used by lookup operations *\/$/;"	m	struct:ecs_stage_t	typeref:typename:const ecs_entity_t *	file:
lose_depth	$FLECS/$FLECS/flecs.h	/^    bool lose_depth;$/;"	m	struct:ecs_flatten_desc_t	typeref:typename:bool
luminous_intensity	$FLECS/$FLECS/flecs.h	/^struct luminous_intensity {$/;"	s	struct:flecs::units
m_array	$FLECS/$FLECS/flecs.h	/^    void* m_array;$/;"	m	struct:flecs::untyped_column	typeref:typename:void *
m_begin	$FLECS/$FLECS/flecs.h	/^    std::size_t m_begin;$/;"	m	struct:flecs::iter	typeref:typename:std::size_t
m_buf	$FLECS/$FLECS/flecs.h	/^    ecs_strbuf_t m_buf;$/;"	m	struct:flecs::stringstream	typeref:typename:ecs_strbuf_t
m_chain_it	$FLECS/$FLECS/flecs.h	/^    ecs_iter_t m_chain_it;$/;"	m	struct:flecs::worker_iterable	typeref:typename:ecs_iter_t
m_const_str	$FLECS/$FLECS/flecs.h	/^    const char *m_const_str;$/;"	m	struct:flecs::string	typeref:typename:const char *
m_count	$FLECS/$FLECS/flecs.h	/^    size_t m_count;$/;"	m	struct:flecs::untyped_column	typeref:typename:size_t
m_created	$FLECS/$FLECS/flecs.h	/^    bool m_created = false;$/;"	m	struct:flecs::metric_builder	typeref:typename:bool
m_cursor	$FLECS/$FLECS/flecs.h	/^    ecs_meta_cursor_t m_cursor;$/;"	m	struct:flecs::cursor	typeref:typename:ecs_meta_cursor_t
m_delta_time	$FLECS/$FLECS/flecs.h	/^    ecs_ftime_t m_delta_time;$/;"	m	struct:flecs::system_runner_fluent	typeref:typename:ecs_ftime_t
m_desc	$FLECS/$FLECS/flecs.h	/^    ecs_system_desc_t *m_desc;$/;"	m	struct:flecs::system_builder_i	typeref:typename:ecs_system_desc_t *
m_end	$FLECS/$FLECS/flecs.h	/^    std::size_t m_end;$/;"	m	struct:flecs::iter	typeref:typename:std::size_t
m_event_count	$FLECS/$FLECS/flecs.h	/^    int32_t m_event_count;$/;"	m	struct:flecs::observer_builder_i	typeref:typename:int32_t
m_expr_count	$FLECS/$FLECS/flecs.h	/^    int32_t m_expr_count;$/;"	m	struct:flecs::filter_builder_i	typeref:typename:int32_t
m_filter	$FLECS/$FLECS/flecs.h	/^    filter_t m_filter = ECS_FILTER_INIT;$/;"	m	struct:flecs::filter_base	typeref:typename:filter_t
m_filter_ptr	$FLECS/$FLECS/flecs.h	/^    const filter_t *m_filter_ptr;$/;"	m	struct:flecs::filter_base	typeref:typename:const filter_t *
m_func	$FLECS/$FLECS/flecs.h	/^    Func m_func;$/;"	m	struct:flecs::_::iter_delegate	typeref:typename:Func
m_id	$FLECS/$FLECS/flecs.h	/^    flecs::id_t m_id;$/;"	m	struct:flecs::id	typeref:typename:flecs::id_t
m_ids	$FLECS/$FLECS/flecs.h	/^    flecs::type_t m_ids;$/;"	m	struct:flecs::event_builder_base	typeref:typename:flecs::type_t
m_ids_array	$FLECS/$FLECS/flecs.h	/^    flecs::id_t m_ids_array[ECS_EVENT_DESC_ID_COUNT_MAX];$/;"	m	struct:flecs::event_builder_base	typeref:typename:flecs::id_t[]
m_index	$FLECS/$FLECS/flecs.h	/^    int m_index;$/;"	m	struct:flecs::array_iterator	typeref:typename:int
m_instanced	$FLECS/$FLECS/flecs.h	/^    bool m_instanced;$/;"	m	struct:flecs::_::node_builder	typeref:typename:bool
m_is_shared	$FLECS/$FLECS/flecs.h	/^    bool m_is_shared;$/;"	m	struct:flecs::column	typeref:typename:bool
m_it	$FLECS/$FLECS/flecs.h	/^    ecs_iter_t m_it;$/;"	m	struct:flecs::iter_iterable	typeref:typename:ecs_iter_t
m_iter	$FLECS/$FLECS/flecs.h	/^    flecs::iter_t *m_iter;$/;"	m	struct:flecs::iter	typeref:typename:flecs::iter_t *
m_length	$FLECS/$FLECS/flecs.h	/^    ecs_size_t m_length;$/;"	m	struct:flecs::string	typeref:typename:ecs_size_t
m_limit	$FLECS/$FLECS/flecs.h	/^    int32_t m_limit;$/;"	m	struct:flecs::worker_iterable	typeref:typename:int32_t
m_next	$FLECS/$FLECS/flecs.h	/^    ecs_iter_next_action_t m_next;$/;"	m	struct:flecs::iter_iterable	typeref:typename:ecs_iter_next_action_t
m_next_each	$FLECS/$FLECS/flecs.h	/^    ecs_iter_next_action_t m_next_each;$/;"	m	struct:flecs::iter_iterable	typeref:typename:ecs_iter_next_action_t
m_offset	$FLECS/$FLECS/flecs.h	/^    int32_t m_offset;$/;"	m	struct:flecs::worker_iterable	typeref:typename:int32_t
m_owned	$FLECS/$FLECS/flecs.h	/^    bool m_owned;$/;"	m	struct:flecs::world	typeref:typename:bool
m_param	$FLECS/$FLECS/flecs.h	/^    void *m_param;$/;"	m	struct:flecs::system_runner_fluent	typeref:typename:void *
m_prev_scope	$FLECS/$FLECS/flecs.h	/^    flecs::entity_t m_prev_scope;$/;"	m	struct:flecs::scoped_world	typeref:typename:flecs::entity_t
m_query	$FLECS/$FLECS/flecs.h	/^    query_t *m_query;$/;"	m	struct:flecs::query_base	typeref:typename:query_t *
m_ref	$FLECS/$FLECS/flecs.h	/^    flecs::ref_t m_ref;$/;"	m	struct:flecs::ref	typeref:typename:flecs::ref_t
m_row	$FLECS/$FLECS/flecs.h	/^    size_t m_row;    $/;"	m	struct:flecs::_::each_column_base	typeref:typename:size_t
m_rule	$FLECS/$FLECS/flecs.h	/^    rule_t *m_rule;$/;"	m	struct:flecs::rule_base	typeref:typename:rule_t *
m_size	$FLECS/$FLECS/flecs.h	/^    size_t m_size;$/;"	m	struct:flecs::untyped_column	typeref:typename:size_t
m_snapshot	$FLECS/$FLECS/flecs.h	/^    snapshot_t *m_snapshot;$/;"	m	struct:flecs::snapshot	typeref:typename:snapshot_t *
m_stage	$FLECS/$FLECS/flecs.h	/^    world_t *m_stage;$/;"	m	struct:flecs::system_runner_fluent	typeref:typename:world_t *
m_stage_count	$FLECS/$FLECS/flecs.h	/^    int32_t m_stage_count;$/;"	m	struct:flecs::system_runner_fluent	typeref:typename:int32_t
m_stage_current	$FLECS/$FLECS/flecs.h	/^    int32_t m_stage_current;$/;"	m	struct:flecs::system_runner_fluent	typeref:typename:int32_t
m_str	$FLECS/$FLECS/flecs.h	/^    char *m_str = nullptr;$/;"	m	struct:flecs::string	typeref:typename:char *
m_table	$FLECS/$FLECS/flecs.h	/^    table_t *m_table;$/;"	m	struct:flecs::table	typeref:typename:table_t *
m_term	$FLECS/$FLECS/flecs.h	/^    ecs_term_t *m_term;$/;"	m	struct:flecs::term_builder_i	typeref:typename:ecs_term_t *
m_term_id	$FLECS/$FLECS/flecs.h	/^    ecs_term_id_t *m_term_id;$/;"	m	struct:flecs::term_id_builder_i	typeref:typename:ecs_term_id_t *
m_term_index	$FLECS/$FLECS/flecs.h	/^    int32_t m_term_index;$/;"	m	struct:flecs::filter_builder_i	typeref:typename:int32_t
m_terms	$FLECS/$FLECS/flecs.h	/^    array m_terms;$/;"	m	struct:flecs::_::term_ptrs	typeref:typename:array
m_type	$FLECS/$FLECS/flecs.h	/^    const type_t *m_type;$/;"	m	struct:flecs::type	typeref:typename:const type_t *
m_value	$FLECS/$FLECS/flecs.h	/^    T* m_value;$/;"	m	struct:flecs::array_iterator	typeref:typename:T *
m_world	$FLECS/$FLECS/flecs.h	/^    world_t *m_world;$/;"	m	struct:flecs::world	typeref:typename:world_t *
magic	$FLECS/$FLECS/flecs.h	/^    int32_t magic; \/* Magic number verifying it's a flecs object *\/$/;"	m	struct:ecs_header_t	typeref:typename:int32_t
make	$FLECS/$FLECS/flecs.h	/^    static each_delegate* make(const Func& func) {$/;"	f	struct:flecs::_::each_delegate	typeref:typename:each_delegate *	signature:(const Func & func)
malloc_	$FLECS/$FLECS/flecs.h	/^    ecs_os_api_malloc_t malloc_;$/;"	m	struct:ecs_os_api_t	typeref:typename:ecs_os_api_malloc_t
map	$FLECS/$FLECS/flecs.h	/^    const ecs_map_t *map;$/;"	m	struct:ecs_map_iter_t	typeref:typename:const ecs_map_t *
marked_ids	$FLECS/$FLECS/flecs.c	/^    ecs_vec_t marked_ids;            \/* vector<ecs_marked_ids_t> *\/$/;"	m	struct:ecs_store_t	typeref:typename:ecs_vec_t	file:
mass	$FLECS/$FLECS/flecs.h	/^struct mass {$/;"	s	struct:flecs::units
match	$FLECS/$FLECS/flecs.c	/^    ecs_query_table_match_t *match;$/;"	m	struct:sort_helper_t	typeref:typename:ecs_query_table_match_t *	file:
match_count	$FLECS/$FLECS/flecs.c	/^    int32_t match_count;        \/* Used to track of rebuild is necessary *\/$/;"	m	struct:ecs_pipeline_state_t	typeref:typename:int32_t	file:
match_count	$FLECS/$FLECS/flecs.h	/^    int32_t match_count;$/;"	m	struct:ecs_term_iter_t	typeref:typename:int32_t
match_flags	$FLECS/$FLECS/flecs.c	/^    ecs_flags16_t match_flags; \/* Flags that modify matching behavior *\/$/;"	m	struct:ecs_rule_op_t	typeref:typename:ecs_flags16_t	file:
match_indices	$FLECS/$FLECS/flecs.h	/^    int32_t *match_indices;       \/* Indices of current match for term. Allows an iterator to i/;"	m	struct:ecs_iter_t	typeref:typename:int32_t *
matched	$FLECS/$FLECS/flecs.c	/^    ecs_id_t matched;$/;"	m	struct:__anonb2bcda232708	typeref:typename:ecs_id_t	file:
matched_empty_table_count	$FLECS/$FLECS/flecs.h	/^    ecs_metric_t matched_empty_table_count; \/**< Matched empty tables *\/$/;"	m	struct:ecs_query_stats_t	typeref:typename:ecs_metric_t
matched_entity_count	$FLECS/$FLECS/flecs.h	/^    ecs_metric_t matched_entity_count;      \/**< Number of matched entities *\/$/;"	m	struct:ecs_query_stats_t	typeref:typename:ecs_metric_t
matched_table_count	$FLECS/$FLECS/flecs.h	/^    ecs_metric_t matched_table_count;       \/**< Matched non-empty tables *\/    $/;"	m	struct:ecs_query_stats_t	typeref:typename:ecs_metric_t
matches_left	$FLECS/$FLECS/flecs.h	/^    int32_t matches_left;$/;"	m	struct:ecs_filter_iter_t	typeref:typename:int32_t
max	$FLECS/$FLECS/flecs.c	/^    uint64_t min, max;$/;"	m	struct:__anonb2bcda231c08	typeref:typename:uint64_t	file:
max	$FLECS/$FLECS/flecs.h	/^    int32_t max;$/;"	m	struct:ecs_strbuf_t	typeref:typename:int32_t
max_id	$FLECS/$FLECS/flecs.c	/^    uint64_t max_id;$/;"	m	struct:ecs_entity_index_t	typeref:typename:uint64_t	file:
max_id	$FLECS/$FLECS/flecs.h	/^    uint64_t max_id;         \/* Local max index (if no global is set) *\/$/;"	m	struct:ecs_sparse_t	typeref:typename:uint64_t
measure_eval_duration	$FLECS/$FLECS/flecs.h	/^    bool measure_eval_duration;     \/**< Serialize evaluation duration *\/$/;"	m	struct:ecs_iter_to_json_desc_t	typeref:typename:bool
member	$FLECS/$FLECS/flecs.c	/^    ecs_entity_t member;        \/* Member to monitor *\/$/;"	m	struct:EcsAlert	typeref:typename:ecs_entity_t	file:
member	$FLECS/$FLECS/flecs.h	/^untyped_component& member(flecs::entity_t unit, const char* name, const MemberType ComponentType/;"	f	struct:flecs::untyped_component	typeref:typename:untyped_component &	signature:(flecs::entity_t unit,const char * name,const MemberType ComponentType::* ptr)
member_	$FLECS/$FLECS/flecs.h	/^    int (*member_)($/;"	m	struct:ecs_serializer_t	typeref:typename:int (*)(const struct ecs_serializer_t * ser,const char * name)
member_index	$FLECS/$FLECS/flecs.h	/^    int32_t member_index;   \/**< Index of member in struct *\/$/;"	m	struct:ecs_meta_type_op_t	typeref:typename:int32_t
member_t	$FLECS/$FLECS/flecs.h	/^using member_t = ecs_member_t;$/;"	t	namespace:flecs	typeref:typename:ecs_member_t
members	$FLECS/$FLECS/flecs.h	/^    ecs_vec_t members; \/* vector<ecs_member_t> *\/$/;"	m	struct:EcsStruct	typeref:typename:ecs_vec_t
memory	$FLECS/$FLECS/flecs.h	/^    } memory;$/;"	m	struct:ecs_world_stats_t	typeref:struct:ecs_world_stats_t::__anonb2bcda281608
merge	$FLECS/$FLECS/flecs.h	/^    void merge() const {$/;"	f	struct:flecs::world	typeref:typename:void	signature:() const
merge_count	$FLECS/$FLECS/flecs.h	/^        ecs_metric_t merge_count;          \/**< Number of merges executed. *\/$/;"	m	struct:ecs_world_stats_t::__anonb2bcda281408	typeref:typename:ecs_metric_t
merge_count_total	$FLECS/$FLECS/flecs.h	/^    int64_t merge_count_total;        \/**< Total number of merges *\/$/;"	m	struct:ecs_world_info_t	typeref:typename:int64_t
merge_time	$FLECS/$FLECS/flecs.h	/^        ecs_metric_t merge_time;           \/**< Time spent on merging commands. *\/$/;"	m	struct:ecs_world_stats_t::__anonb2bcda281508	typeref:typename:ecs_metric_t
merge_time_last	$FLECS/$FLECS/flecs.h	/^    double merge_time_last;     \/**< Time spent in merges *\/$/;"	m	struct:__anonb2bcda281b08	typeref:typename:double
merge_time_total	$FLECS/$FLECS/flecs.h	/^    ecs_ftime_t merge_time_total;     \/**< Total time spent in merges *\/$/;"	m	struct:ecs_world_info_t	typeref:typename:ecs_ftime_t
message	$FLECS/$FLECS/flecs.c	/^    char *message;$/;"	m	struct:EcsAlert	typeref:typename:char *	file:
message	$FLECS/$FLECS/flecs.h	/^    const char *message;$/;"	m	struct:ecs_alert_desc_t	typeref:typename:const char *
meta	$FLECS/$FLECS/flecs.h	/^namespace meta {$/;"	n	namespace:flecs
meta_constant_t	$FLECS/$FLECS/flecs.c	/^} meta_constant_t;$/;"	t	typeref:struct:meta_constant_t	file:
meta_lookup	$FLECS/$FLECS/flecs.c	/^ecs_entity_t meta_lookup($/;"	p	typeref:typename:ecs_entity_t	file:	signature:(ecs_world_t * world,meta_type_t * token,const char * ptr,int64_t count,meta_parse_ctx_t * ctx)
meta_lookup_array	$FLECS/$FLECS/flecs.c	/^ecs_entity_t meta_lookup_array($/;"	f	typeref:typename:ecs_entity_t	file:	signature:(ecs_world_t * world,ecs_entity_t e,const char * params_decl,meta_parse_ctx_t * ctx)
meta_lookup_bitmask	$FLECS/$FLECS/flecs.c	/^ecs_entity_t meta_lookup_bitmask($/;"	f	typeref:typename:ecs_entity_t	file:	signature:(ecs_world_t * world,ecs_entity_t e,const char * params_decl,meta_parse_ctx_t * ctx)
meta_lookup_vector	$FLECS/$FLECS/flecs.c	/^ecs_entity_t meta_lookup_vector($/;"	f	typeref:typename:ecs_entity_t	file:	signature:(ecs_world_t * world,ecs_entity_t e,const char * params_decl,meta_parse_ctx_t * ctx)
meta_member_t	$FLECS/$FLECS/flecs.c	/^} meta_member_t;$/;"	t	typeref:struct:meta_member_t	file:
meta_open_scope	$FLECS/$FLECS/flecs.c	/^const char * meta_open_scope($/;"	f	typeref:typename:const char *	file:	signature:(const char * ptr,meta_parse_ctx_t * ctx)
meta_params_t	$FLECS/$FLECS/flecs.c	/^} meta_params_t;$/;"	t	typeref:struct:meta_params_t	file:
meta_parse_bitmask	$FLECS/$FLECS/flecs.c	/^int meta_parse_bitmask($/;"	f	typeref:typename:int	file:	signature:(ecs_world_t * world,ecs_entity_t t,const char * desc)
meta_parse_constant	$FLECS/$FLECS/flecs.c	/^const char* meta_parse_constant($/;"	f	typeref:typename:const char *	file:	signature:(const char * ptr,meta_constant_t * token,meta_parse_ctx_t * ctx)
meta_parse_constants	$FLECS/$FLECS/flecs.c	/^int meta_parse_constants($/;"	f	typeref:typename:int	file:	signature:(ecs_world_t * world,ecs_entity_t t,const char * desc,bool is_bitmask)
meta_parse_ctx_t	$FLECS/$FLECS/flecs.c	/^} meta_parse_ctx_t;$/;"	t	typeref:struct:meta_parse_ctx_t	file:
meta_parse_desc	$FLECS/$FLECS/flecs.c	/^int meta_parse_desc($/;"	f	typeref:typename:int	file:	signature:(const char * ptr,meta_params_t * token,meta_parse_ctx_t * ctx)
meta_parse_enum	$FLECS/$FLECS/flecs.c	/^int meta_parse_enum($/;"	f	typeref:typename:int	file:	signature:(ecs_world_t * world,ecs_entity_t t,const char * desc)
meta_parse_member	$FLECS/$FLECS/flecs.c	/^const char* meta_parse_member($/;"	f	typeref:typename:const char *	file:	signature:(const char * ptr,meta_member_t * token,meta_parse_ctx_t * ctx)
meta_parse_struct	$FLECS/$FLECS/flecs.c	/^int meta_parse_struct($/;"	f	typeref:typename:int	file:	signature:(ecs_world_t * world,ecs_entity_t t,const char * desc)
meta_parse_type	$FLECS/$FLECS/flecs.c	/^const char* meta_parse_type($/;"	f	typeref:typename:const char *	file:	signature:(const char * ptr,meta_type_t * token,meta_parse_ctx_t * ctx)
meta_type_t	$FLECS/$FLECS/flecs.c	/^} meta_type_t;$/;"	t	typeref:struct:meta_type_t	file:
method	$FLECS/$FLECS/flecs.c	/^    ecs_http_method_t method;$/;"	m	struct:__anonb2bcda230708	typeref:typename:ecs_http_method_t	file:
method	$FLECS/$FLECS/flecs.h	/^    ecs_http_method_t method;$/;"	m	struct:__anonb2bcda280b08	typeref:typename:ecs_http_method_t
metric	$FLECS/$FLECS/flecs.c	/^    ecs_metric_ctx_t metric;$/;"	m	struct:__anonb2bcda230f08	typeref:typename:ecs_metric_ctx_t	file:
metric	$FLECS/$FLECS/flecs.h	/^untyped_component& metric($/;"	p	struct:flecs::untyped_component	typeref:typename:untyped_component &	signature:(flecs::entity_t parent=0,const char * brief=nullptr,const char * name=nullptr)
metric_builder	$FLECS/$FLECS/flecs.h	/^struct metric_builder {$/;"	s	namespace:flecs
metrics	$FLECS/$FLECS/flecs.h	/^struct metrics {$/;"	s	namespace:flecs
min	$FLECS/$FLECS/flecs.c	/^    uint64_t min, max;$/;"	m	struct:__anonb2bcda231c08	typeref:typename:uint64_t	file:
min	$FLECS/$FLECS/flecs.h	/^    int min;$/;"	m	struct:flecs::_::enum_data_impl	typeref:typename:int
min_id	$FLECS/$FLECS/flecs.h	/^    ecs_entity_t min_id;              \/**< First allowed entity id *\/$/;"	m	struct:ecs_world_info_t	typeref:typename:ecs_entity_t
mixin_kind_str	$FLECS/$FLECS/flecs.c	/^static const char* mixin_kind_str[] = {$/;"	v	typeref:typename:const char * []	file:
mixins	$FLECS/$FLECS/flecs.h	/^    ecs_mixins_t *mixins; \/* Table with offsets to (optional) mixins *\/$/;"	m	struct:ecs_header_t	typeref:typename:ecs_mixins_t *
modified	$FLECS/$FLECS/flecs.h	/^inline void world::modified() const {$/;"	f	class:flecs::world	typeref:typename:void	signature:() const
modified_count	$FLECS/$FLECS/flecs.h	/^        int64_t modified_count;        \/**< modified commands processed *\/$/;"	m	struct:ecs_world_info_t::__anonb2bcda280708	typeref:typename:int64_t
module	$FLECS/$FLECS/flecs.h	/^inline flecs::entity world::module(const char *name) const {$/;"	f	class:flecs::world	typeref:typename:flecs::entity	signature:(const char * name) const
module_file_base	$FLECS/$FLECS/flecs.c	/^char *module_file_base(const char *module, char sep) {$/;"	f	typeref:typename:char *	file:	signature:(const char * module,char sep)
module_to_dl_	$FLECS/$FLECS/flecs.h	/^    ecs_os_api_module_to_path_t module_to_dl_;$/;"	m	struct:ecs_os_api_t	typeref:typename:ecs_os_api_module_to_path_t
module_to_etc_	$FLECS/$FLECS/flecs.h	/^    ecs_os_api_module_to_path_t module_to_etc_;$/;"	m	struct:ecs_os_api_t	typeref:typename:ecs_os_api_module_to_path_t
monitor	$FLECS/$FLECS/flecs.c	/^    int32_t monitor;$/;"	m	struct:flecs_flat_monitor_t	typeref:typename:int32_t	file:
monitor	$FLECS/$FLECS/flecs.h	/^struct monitor {$/;"	s	namespace:flecs
monitor_generation	$FLECS/$FLECS/flecs.c	/^    int32_t monitor_generation;$/;"	m	struct:ecs_world_t	typeref:typename:int32_t	file:
monitors	$FLECS/$FLECS/flecs.c	/^    ecs_monitor_set_t monitors;      \/* map<id, ecs_monitor_t> *\/$/;"	m	struct:ecs_world_t	typeref:typename:ecs_monitor_set_t	file:
move	$FLECS/$FLECS/flecs.h	/^ecs_move_t move() {$/;"	f	namespace:flecs::_	typeref:typename:ecs_move_t	signature:()
move_ctor	$FLECS/$FLECS/flecs.h	/^ecs_move_t move_ctor() {$/;"	f	namespace:flecs::_	typeref:typename:ecs_move_t	signature:()
move_ctor_impl	$FLECS/$FLECS/flecs.h	/^void move_ctor_impl(void *dst_ptr, void *src_ptr, int32_t count, $/;"	f	namespace:flecs::_	typeref:typename:void	signature:(void * dst_ptr,void * src_ptr,int32_t count,const ecs_type_info_t * info)
move_dtor	$FLECS/$FLECS/flecs.h	/^ecs_move_t move_dtor() {$/;"	f	namespace:flecs::_	typeref:typename:ecs_move_t	signature:()
move_dtor_impl	$FLECS/$FLECS/flecs.h	/^void move_dtor_impl(void *dst_ptr, void *src_ptr, int32_t count, $/;"	f	namespace:flecs::_	typeref:typename:void	signature:(void * dst_ptr,void * src_ptr,int32_t count,const ecs_type_info_t * info)
move_impl	$FLECS/$FLECS/flecs.h	/^void move_impl(void *dst_ptr, void *src_ptr, int32_t count, $/;"	f	namespace:flecs::_	typeref:typename:void	signature:(void * dst_ptr,void * src_ptr,int32_t count,const ecs_type_info_t * info)
multi_threaded	$FLECS/$FLECS/flecs.c	/^    bool multi_threaded;$/;"	m	struct:ecs_system_t	typeref:typename:bool	file:
multi_threaded	$FLECS/$FLECS/flecs.h	/^    bool multi_threaded;$/;"	m	struct:ecs_system_desc_t	typeref:typename:bool
mut	$FLECS/$FLECS/flecs.h	/^inline flecs::entity entity_view::mut(const flecs::world& stage) const {$/;"	f	class:flecs::entity_view	typeref:typename:flecs::entity	signature:(const flecs::world & stage) const
mutex_free_	$FLECS/$FLECS/flecs.h	/^    ecs_os_api_mutex_free_t mutex_free_;$/;"	m	struct:ecs_os_api_t	typeref:typename:ecs_os_api_mutex_free_t
mutex_lock_	$FLECS/$FLECS/flecs.h	/^    ecs_os_api_mutex_lock_t mutex_lock_;$/;"	m	struct:ecs_os_api_t	typeref:typename:ecs_os_api_mutex_lock_t
mutex_new_	$FLECS/$FLECS/flecs.h	/^    ecs_os_api_mutex_new_t mutex_new_;$/;"	m	struct:ecs_os_api_t	typeref:typename:ecs_os_api_mutex_new_t
mutex_unlock_	$FLECS/$FLECS/flecs.h	/^    ecs_os_api_mutex_lock_t mutex_unlock_;$/;"	m	struct:ecs_os_api_t	typeref:typename:ecs_os_api_mutex_lock_t
name	$FLECS/$FLECS/flecs.c	/^    ecs_meta_token_t name;$/;"	m	struct:meta_member_t	typeref:typename:ecs_meta_token_t	file:
name	$FLECS/$FLECS/flecs.h	/^    flecs::string_view name() const {$/;"	f	struct:flecs::entity_view	typeref:typename:flecs::string_view	signature:() const
name_col	$FLECS/$FLECS/flecs.c	/^    int16_t name_col;$/;"	m	struct:__anonb2bcda232b08	typeref:typename:int16_t	file:
name_index	$FLECS/$FLECS/flecs.c	/^    ecs_hashmap_t *name_index;$/;"	m	struct:ecs_id_record_t	typeref:typename:ecs_hashmap_t *	file:
name_prefix	$FLECS/$FLECS/flecs.h	/^    const char *name_prefix;          \/**< Value set by ecs_set_name_prefix. Used$/;"	m	struct:ecs_world_info_t	typeref:typename:const char *
nanosec	$FLECS/$FLECS/flecs.h	/^    uint32_t nanosec;$/;"	m	struct:ecs_time_t	typeref:typename:uint32_t
next	$FLECS/$FLECS/flecs.c	/^    struct ecs_table_cache_hdr_t *prev, *next;$/;"	m	struct:ecs_table_cache_hdr_t	typeref:struct:ecs_table_cache_hdr_t *	file:
next	$FLECS/$FLECS/flecs.h	/^    struct ecs_table_cache_hdr_t *cur, *next;$/;"	m	struct:ecs_table_cache_iter_t	typeref:struct:ecs_table_cache_hdr_t *
next_action	$FLECS/$FLECS/flecs.h	/^    virtual ecs_iter_next_action_t next_action() const = 0;$/;"	p	struct:flecs::iterable	typeref:typename:ecs_iter_next_action_t	signature:() const
next_each_action	$FLECS/$FLECS/flecs.h	/^    virtual ecs_iter_next_action_t next_each_action() const = 0;$/;"	p	struct:flecs::iterable	typeref:typename:ecs_iter_next_action_t	signature:() const
next_for_entity	$FLECS/$FLECS/flecs.c	/^    int32_t next_for_entity;         \/* Next operation for entity *\/    $/;"	m	struct:ecs_cmd_t	typeref:typename:int32_t	file:
next_list	$FLECS/$FLECS/flecs.h	/^    struct ecs_table_cache_hdr_t *next_list;$/;"	m	struct:ecs_table_cache_iter_t	typeref:struct:ecs_table_cache_hdr_t *
next_match	$FLECS/$FLECS/flecs.c	/^    ecs_query_table_match_t *next_match;$/;"	m	struct:ecs_query_table_match_t	typeref:typename:ecs_query_table_match_t *	file:
no_readonly	$FLECS/$FLECS/flecs.c	/^    bool no_readonly;$/;"	m	struct:ecs_system_t	typeref:typename:bool	file:
no_readonly	$FLECS/$FLECS/flecs.h	/^    bool no_readonly;$/;"	m	struct:ecs_system_desc_t	typeref:typename:bool
node	$FLECS/$FLECS/flecs.c	/^    ecs_graph_node_t node;           \/* Graph node *\/$/;"	m	struct:ecs_table_t	typeref:typename:ecs_graph_node_t	file:
node	$FLECS/$FLECS/flecs.h	/^    ecs_query_table_match_t *node, *prev, *last;$/;"	m	struct:ecs_query_iter_t	typeref:typename:ecs_query_table_match_t *
node_builder	$FLECS/$FLECS/flecs.h	/^struct node_builder : IBuilder<Base, Components ...>$/;"	s	namespace:flecs::_
nodes	$FLECS/$FLECS/flecs.c	/^    ecs_vec_t nodes;    \/* vec<ecs_switch_node_t> *\/$/;"	m	struct:ecs_switch_t	typeref:typename:ecs_vec_t	file:
not_	$FLECS/$FLECS/flecs.h	/^    Base& not_() {$/;"	f	struct:flecs::term_builder_i	typeref:typename:Base &	signature:()
not_alive_count	$FLECS/$FLECS/flecs.h	/^        ecs_metric_t not_alive_count;     \/**< Number of not alive (recyclable) entity ids *\/$/;"	m	struct:ecs_world_stats_t::__anonb2bcda280f08	typeref:typename:ecs_metric_t
not_from	$FLECS/$FLECS/flecs.h	/^    Base& not_from() {$/;"	f	struct:flecs::term_builder_i	typeref:typename:Base &	signature:()
now_	$FLECS/$FLECS/flecs.h	/^    ecs_os_api_now_t now_;$/;"	m	struct:ecs_os_api_t	typeref:typename:ecs_os_api_now_t
null	$FLECS/$FLECS/flecs.h	/^    flecs::entity null(const flecs::world_t *world) {$/;"	f	struct:flecs::entity	typeref:typename:flecs::entity	signature:(const flecs::world_t * world)
observable	$FLECS/$FLECS/flecs.c	/^    ecs_observable_t observable;$/;"	m	struct:ecs_world_t	typeref:typename:ecs_observable_t	file:
observable	$FLECS/$FLECS/flecs.h	/^inline Base& query_builder_i<Base, Components ...>::observable(const query_base& parent) {$/;"	f	class:flecs::query_builder_i	typeref:typename:Base &	signature:(const query_base & parent)
observe	$FLECS/$FLECS/flecs.h	/^inline Self& entity_builder<Self>::observe(flecs::entity_t evt, Func&& f) {$/;"	f	class:flecs::entity_builder	typeref:typename:Self &	signature:(flecs::entity_t evt,Func && f)
observed_table_count	$FLECS/$FLECS/flecs.h	/^    int32_t observed_table_count;$/;"	m	struct:ecs_term_iter_t	typeref:typename:int32_t
observer	$FLECS/$FLECS/flecs.h	/^struct observer final : entity$/;"	s	namespace:flecs
observer_builder	$FLECS/$FLECS/flecs.h	/^struct observer_builder final : _::observer_builder_base<Components...> {$/;"	s	namespace:flecs
observer_builder_base	$FLECS/$FLECS/flecs.h	/^    using observer_builder_base = node_builder<$/;"	t	namespace:flecs::_	typeref:typename:node_builder<observer,ecs_observer_desc_t,observer_builder<Components...>,observer_builder_i,Components...>
observer_builder_i	$FLECS/$FLECS/flecs.h	/^struct observer_builder_i : filter_builder_i<Base, Components ...> {$/;"	s	namespace:flecs
observer_count	$FLECS/$FLECS/flecs.c	/^    int32_t observer_count;$/;"	m	struct:ecs_event_id_record_t	typeref:typename:int32_t	file:
observer_count	$FLECS/$FLECS/flecs.h	/^        ecs_metric_t observer_count;       \/**< Number of observers *\/$/;"	m	struct:ecs_world_stats_t::__anonb2bcda281208	typeref:typename:ecs_metric_t
observer_t	$FLECS/$FLECS/flecs.h	/^using observer_t = ecs_observer_t;$/;"	t	namespace:flecs	typeref:typename:ecs_observer_t
observers	$FLECS/$FLECS/flecs.c	/^    ecs_map_t observers;             \/* map<trigger_id, trigger_t> *\/$/;"	m	struct:ecs_event_id_record_t	typeref:typename:ecs_map_t	file:
observers_ran	$FLECS/$FLECS/flecs.h	/^        ecs_metric_t observers_ran;        \/**< Number of times an observer was invoked. *\/$/;"	m	struct:ecs_world_stats_t::__anonb2bcda281408	typeref:typename:ecs_metric_t
observers_ran_frame	$FLECS/$FLECS/flecs.h	/^    int64_t observers_ran_frame;      \/**< Total number of times observer was invoked *\/$/;"	m	struct:ecs_world_info_t	typeref:typename:int64_t
offset	$FLECS/$FLECS/flecs.c	/^    uint16_t offset;                 \/**< Offset of member in component *\/$/;"	m	struct:__anonb2bcda230c08	typeref:typename:uint16_t	file:
offset	$FLECS/$FLECS/flecs.h	/^    system_runner_fluent& offset(int32_t offset) {$/;"	f	struct:flecs::system_runner_fluent	typeref:typename:system_runner_fluent &	signature:(int32_t offset)
on_add	$FLECS/$FLECS/flecs.h	/^    void *on_add = nullptr;$/;"	m	struct:flecs::_::component_binding_ctx	typeref:typename:void *
on_group_create	$FLECS/$FLECS/flecs.c	/^    ecs_group_create_action_t on_group_create;$/;"	m	struct:ecs_query_t	typeref:typename:ecs_group_create_action_t	file:
on_group_create	$FLECS/$FLECS/flecs.h	/^    ecs_group_create_action_t on_group_create;$/;"	m	struct:ecs_query_desc_t	typeref:typename:ecs_group_create_action_t
on_group_delete	$FLECS/$FLECS/flecs.c	/^    ecs_group_delete_action_t on_group_delete;$/;"	m	struct:ecs_query_t	typeref:typename:ecs_group_delete_action_t	file:
on_group_delete	$FLECS/$FLECS/flecs.h	/^    ecs_group_delete_action_t on_group_delete;$/;"	m	struct:ecs_query_desc_t	typeref:typename:ecs_group_delete_action_t
on_remove	$FLECS/$FLECS/flecs.h	/^    void *on_remove = nullptr;$/;"	m	struct:flecs::_::component_binding_ctx	typeref:typename:void *
on_set	$FLECS/$FLECS/flecs.h	/^    void *on_set = nullptr;$/;"	m	struct:flecs::_::component_binding_ctx	typeref:typename:void *
on_wildcard	$FLECS/$FLECS/flecs.h	/^    ecs_event_record_t on_wildcard;$/;"	m	struct:ecs_observable_t	typeref:typename:ecs_event_record_t
op	$FLECS/$FLECS/flecs.h	/^    int16_t op;$/;"	m	struct:ecs_rule_iter_t	typeref:typename:int16_t
op_count	$FLECS/$FLECS/flecs.c	/^    int32_t op_count;             \/* Number of operations *\/$/;"	m	struct:ecs_rule_t	typeref:typename:int32_t	file:
op_count	$FLECS/$FLECS/flecs.h	/^    int32_t op_count;       \/**< Number of operations until next field or end *\/$/;"	m	struct:ecs_meta_type_op_t	typeref:typename:int32_t
op_ctx	$FLECS/$FLECS/flecs.c	/^    ecs_rule_op_ctx_t *op_ctx;    \/* Operation context (stack) *\/$/;"	m	struct:__anonb2bcda233408	typeref:typename:ecs_rule_op_ctx_t *	file:
op_ctx	$FLECS/$FLECS/flecs.h	/^    struct ecs_rule_op_ctx_t *op_ctx;    \/* Operation-specific state *\/$/;"	m	struct:ecs_rule_iter_t	typeref:struct:ecs_rule_op_ctx_t *
op_cur	$FLECS/$FLECS/flecs.h	/^    int32_t op_cur;           \/**< Current operation *\/$/;"	m	struct:ecs_meta_scope_t	typeref:typename:int32_t
op_index	$FLECS/$FLECS/flecs.c	/^    ecs_rule_lbl_t op_index;$/;"	m	struct:__anonb2bcda232f08	typeref:typename:ecs_rule_lbl_t	file:
opaque	$FLECS/$FLECS/flecs.h	/^struct opaque {$/;"	s	namespace:flecs
oper	$FLECS/$FLECS/flecs.h	/^    flecs::oper_kind_t oper() {$/;"	f	struct:flecs::term	typeref:typename:flecs::oper_kind_t	signature:()
oper_kind_t	$FLECS/$FLECS/flecs.h	/^enum oper_kind_t {$/;"	g	namespace:flecs
operations	$FLECS/$FLECS/flecs.c	/^    ecs_vec_t operations;$/;"	m	struct:ecs_stage_t	typeref:typename:ecs_vec_t	file:
operator !=	$FLECS/$FLECS/flecs.h	/^    bool operator!=(array_iterator const& other) const$/;"	f	struct:flecs::array_iterator	typeref:typename:bool	signature:(array_iterator const & other) const
operator !=	$FLECS/$FLECS/flecs.h	/^    bool operator!=(const char *str) const {$/;"	f	struct:flecs::string	typeref:typename:bool	signature:(const char * str) const
operator !=	$FLECS/$FLECS/flecs.h	/^    bool operator!=(const flecs::string& str) const {$/;"	f	struct:flecs::string	typeref:typename:bool	signature:(const flecs::string & str) const
operator !=	$FLECS/$FLECS/flecs.h	/^    bool operator!=(range_iterator const& other) const$/;"	f	struct:flecs::_::range_iterator	typeref:typename:bool	signature:(range_iterator const & other) const
operator *	$FLECS/$FLECS/flecs.h	/^    T & operator*() const$/;"	f	struct:flecs::array_iterator	typeref:typename:T &	signature:() const
operator *	$FLECS/$FLECS/flecs.h	/^    T const& operator*() const$/;"	f	struct:flecs::_::range_iterator	typeref:typename:T const &	signature:() const
operator *	$FLECS/$FLECS/flecs.h	/^    T& operator*() const {$/;"	f	struct:flecs::column	typeref:typename:T &	signature:() const
operator *	$FLECS/$FLECS/flecs.h	/^    const type& operator*() const {$/;"	f	struct:flecs::pair	typeref:typename:const type &	signature:() const
operator *	$FLECS/$FLECS/flecs.h	/^    type& operator*() {$/;"	f	struct:flecs::pair	typeref:typename:type &	signature:()
operator ++	$FLECS/$FLECS/flecs.h	/^    array_iterator& operator++()$/;"	f	struct:flecs::array_iterator	typeref:typename:array_iterator &	signature:()
operator ++	$FLECS/$FLECS/flecs.h	/^    range_iterator& operator++()$/;"	f	struct:flecs::_::range_iterator	typeref:typename:range_iterator &	signature:()
operator ->	$FLECS/$FLECS/flecs.h	/^    T* operator->() const {$/;"	f	struct:flecs::column	typeref:typename:T *	signature:() const
operator ->	$FLECS/$FLECS/flecs.h	/^    T* operator->() {$/;"	f	struct:flecs::ref	typeref:typename:T *	signature:()
operator ->	$FLECS/$FLECS/flecs.h	/^    const type* operator->() const {$/;"	f	struct:flecs::pair	typeref:typename:const type *	signature:() const
operator ->	$FLECS/$FLECS/flecs.h	/^    type* operator->() {$/;"	f	struct:flecs::pair	typeref:typename:type *	signature:()
operator <<	$FLECS/$FLECS/flecs.h	/^    stringstream& operator<<(const char* str) {$/;"	f	struct:flecs::stringstream	typeref:typename:stringstream &	signature:(const char * str)
operator =	$FLECS/$FLECS/flecs.h	/^    filter& operator=(const filter& obj) {$/;"	f	struct:flecs::filter	typeref:typename:filter &	signature:(const filter & obj)
operator =	$FLECS/$FLECS/flecs.h	/^    filter& operator=(filter&& obj) {$/;"	f	struct:flecs::filter	typeref:typename:filter &	signature:(filter && obj)
operator =	$FLECS/$FLECS/flecs.h	/^    filter_base& operator=(const filter_base& obj) {$/;"	f	struct:flecs::filter_base	typeref:typename:filter_base &	signature:(const filter_base & obj)
operator =	$FLECS/$FLECS/flecs.h	/^    filter_base& operator=(filter_base&& obj) {$/;"	f	struct:flecs::filter_base	typeref:typename:filter_base &	signature:(filter_base && obj)
operator =	$FLECS/$FLECS/flecs.h	/^    snapshot& operator=(const snapshot& obj) {$/;"	f	struct:flecs::snapshot	typeref:typename:snapshot &	signature:(const snapshot & obj)
operator =	$FLECS/$FLECS/flecs.h	/^    snapshot& operator=(snapshot&& obj) {$/;"	f	struct:flecs::snapshot	typeref:typename:snapshot &	signature:(snapshot && obj)
operator =	$FLECS/$FLECS/flecs.h	/^    string& operator=(const string& str) = delete;$/;"	p	struct:flecs::string	typeref:typename:string &	signature:(const string & str)
operator =	$FLECS/$FLECS/flecs.h	/^    string& operator=(string&& str) {$/;"	f	struct:flecs::string	typeref:typename:string &	signature:(string && str)
operator =	$FLECS/$FLECS/flecs.h	/^    stringstream& operator=(const stringstream& str) = delete;$/;"	p	struct:flecs::stringstream	typeref:typename:stringstream &	signature:(const stringstream & str)
operator =	$FLECS/$FLECS/flecs.h	/^    stringstream& operator=(stringstream&& str) {$/;"	f	struct:flecs::stringstream	typeref:typename:stringstream &	signature:(stringstream && str)
operator =	$FLECS/$FLECS/flecs.h	/^    term& operator=(const term& t) {$/;"	f	struct:flecs::term	typeref:typename:term &	signature:(const term & t)
operator =	$FLECS/$FLECS/flecs.h	/^    term& operator=(term&& t) {$/;"	f	struct:flecs::term	typeref:typename:term &	signature:(term && t)
operator =	$FLECS/$FLECS/flecs.h	/^    world& operator=(const world& obj) = delete;$/;"	p	struct:flecs::world	typeref:typename:world &	signature:(const world & obj)
operator =	$FLECS/$FLECS/flecs.h	/^    world& operator=(world&& obj) {$/;"	f	struct:flecs::world	typeref:typename:world &	signature:(world && obj)
operator ==	$FLECS/$FLECS/flecs.h	/^    bool operator==(const char *str) const {$/;"	f	struct:flecs::string	typeref:typename:bool	signature:(const char * str) const
operator ==	$FLECS/$FLECS/flecs.h	/^    bool operator==(const flecs::string& str) const {$/;"	f	struct:flecs::string	typeref:typename:bool	signature:(const flecs::string & str) const
operator Base&	$FLECS/$FLECS/flecs.h	/^    operator Base&() {$/;"	f	struct:flecs::alert_builder_i	signature:()
operator Base&	$FLECS/$FLECS/flecs.h	/^    operator Base&() {$/;"	f	struct:flecs::event_builder_base	signature:()
operator Base&	$FLECS/$FLECS/flecs.h	/^    operator Base&() {$/;"	f	struct:flecs::filter_builder_i	signature:()
operator Base&	$FLECS/$FLECS/flecs.h	/^    operator Base&() {$/;"	f	struct:flecs::observer_builder_i	signature:()
operator Base&	$FLECS/$FLECS/flecs.h	/^    operator Base&() {$/;"	f	struct:flecs::query_builder_i	signature:()
operator Base&	$FLECS/$FLECS/flecs.h	/^    operator Base&() {$/;"	f	struct:flecs::system_builder_i	signature:()
operator Base&	$FLECS/$FLECS/flecs.h	/^    operator Base&() {$/;"	f	struct:flecs::term_builder_i	signature:()
operator Base&	$FLECS/$FLECS/flecs.h	/^    operator Base&() {$/;"	f	struct:flecs::term_id_builder_i	signature:()
operator TDesc*	$FLECS/$FLECS/flecs.h	/^    operator TDesc*() {$/;"	f	struct:flecs::_::builder	signature:()
operator []	$FLECS/$FLECS/flecs.h	/^    T operator[](size_t index) { ecs_os_abort(); (void)index; return T(); }$/;"	f	struct:flecs::array	typeref:typename:T	signature:(size_t index)
operator []	$FLECS/$FLECS/flecs.h	/^    T& operator[](int index) {$/;"	f	struct:flecs::array	typeref:typename:T &	signature:(int index)
operator []	$FLECS/$FLECS/flecs.h	/^    T& operator[](size_t index) const {$/;"	f	struct:flecs::column	typeref:typename:T &	signature:(size_t index) const
operator []	$FLECS/$FLECS/flecs.h	/^    T& operator[](size_t index) {$/;"	f	struct:flecs::array	typeref:typename:T &	signature:(size_t index)
operator []	$FLECS/$FLECS/flecs.h	/^    void* operator[](size_t index) const {$/;"	f	struct:flecs::untyped_column	typeref:typename:void *	signature:(size_t index) const
operator bool	$FLECS/$FLECS/flecs.h	/^    explicit operator bool() const {$/;"	f	struct:flecs::entity_view	signature:() const
operator const char*	$FLECS/$FLECS/flecs.h	/^    operator const char*() const {$/;"	f	struct:flecs::string	signature:() const
operator const flecs::filter_t*	$FLECS/$FLECS/flecs.h	/^    operator const flecs::filter_t*() const {$/;"	f	struct:flecs::filter_base	signature:() const
operator const type&	$FLECS/$FLECS/flecs.h	/^    operator const type&() const { $/;"	f	struct:flecs::pair	signature:() const
operator const type_t*	$FLECS/$FLECS/flecs.h	/^    operator const type_t*() const {$/;"	f	struct:flecs::type	signature:() const
operator delete	$FLECS/$FLECS/flecs.h	/^inline void  operator delete(void*, flecs::_::placement_new_tag_t, void*)      noexcept {       /;"	f	typeref:typename:void	signature:(void *,flecs::_::placement_new_tag_t,void *)
operator filter<>	$FLECS/$FLECS/flecs.h	/^    operator filter<>() const;$/;"	p	struct:flecs::filter_base	signature:() const
operator flecs::entity	$FLECS/$FLECS/flecs.h	/^    operator flecs::entity();$/;"	p	struct:flecs::metric_builder	signature:()
operator flecs::entity	$FLECS/$FLECS/flecs.h	/^inline metric_builder::operator flecs::entity() {$/;"	f	class:flecs::metric_builder	signature:()
operator flecs::filter<>	$FLECS/$FLECS/flecs.h	/^inline filter_base::operator flecs::filter<> () const {$/;"	f	class:flecs::filter_base	signature:() const
operator flecs::id_t	$FLECS/$FLECS/flecs.h	/^    operator flecs::id_t() const {$/;"	f	struct:flecs::id	signature:() const
operator new	$FLECS/$FLECS/flecs.h	/^inline void* operator new(size_t,   flecs::_::placement_new_tag_t, void* _ptr) noexcept { return/;"	f	typeref:typename:void *	signature:(size_t,flecs::_::placement_new_tag_t,void * _ptr)
operator query<>	$FLECS/$FLECS/flecs.h	/^    operator query<>() const;$/;"	p	struct:flecs::query_base	signature:() const
operator query<>	$FLECS/$FLECS/flecs.h	/^inline query_base::operator query<>() const {$/;"	f	class:flecs::query_base	signature:() const
operator query_t*	$FLECS/$FLECS/flecs.h	/^    operator query_t*() const {$/;"	f	struct:flecs::query_base	signature:() const
operator rule<>	$FLECS/$FLECS/flecs.h	/^    operator rule<>() const;$/;"	p	struct:flecs::rule_base	signature:() const
operator rule<>	$FLECS/$FLECS/flecs.h	/^inline rule_base::operator rule<>() const {$/;"	f	class:flecs::rule_base	signature:() const
operator rule_t*	$FLECS/$FLECS/flecs.h	/^    operator rule_t*() const {$/;"	f	struct:flecs::rule_base	signature:() const
operator table_t*	$FLECS/$FLECS/flecs.h	/^    operator table_t*() const {$/;"	f	struct:flecs::table	signature:() const
operator type&	$FLECS/$FLECS/flecs.h	/^    operator type&() { $/;"	f	struct:flecs::pair	signature:()
operator world_t*	$FLECS/$FLECS/flecs.h	/^    operator world_t*() const { return m_world; }$/;"	f	struct:flecs::world	signature:() const
ops	$FLECS/$FLECS/flecs.c	/^    ecs_vec_t ops;              \/* Pipeline schedule *\/$/;"	m	struct:ecs_pipeline_state_t	typeref:typename:ecs_vec_t	file:
ops	$FLECS/$FLECS/flecs.h	/^    ecs_vec_t ops;      \/**< vector<ecs_meta_type_op_t> *\/$/;"	m	struct:EcsMetaTypeSerialized	typeref:typename:ecs_vec_t
optional	$FLECS/$FLECS/flecs.h	/^    Base& optional() {$/;"	f	struct:flecs::term_builder_i	typeref:typename:Base &	signature:()
or_	$FLECS/$FLECS/flecs.h	/^    Base& or_() {$/;"	f	struct:flecs::term_builder_i	typeref:typename:Base &	signature:()
or_from	$FLECS/$FLECS/flecs.h	/^    Base& or_from() {$/;"	f	struct:flecs::term_builder_i	typeref:typename:Base &	signature:()
order_by	$FLECS/$FLECS/flecs.c	/^    ecs_order_by_action_t order_by;$/;"	m	struct:ecs_query_t	typeref:typename:ecs_order_by_action_t	file:
order_by	$FLECS/$FLECS/flecs.h	/^    ecs_order_by_action_t order_by;$/;"	m	struct:ecs_query_desc_t	typeref:typename:ecs_order_by_action_t
order_by_component	$FLECS/$FLECS/flecs.c	/^    ecs_entity_t order_by_component;$/;"	m	struct:ecs_query_t	typeref:typename:ecs_entity_t	file:
order_by_component	$FLECS/$FLECS/flecs.h	/^    ecs_entity_t order_by_component;$/;"	m	struct:ecs_query_desc_t	typeref:typename:ecs_entity_t
order_by_term	$FLECS/$FLECS/flecs.c	/^    int32_t order_by_term;$/;"	m	struct:ecs_query_t	typeref:typename:int32_t	file:
orphaned	$FLECS/$FLECS/flecs.h	/^    bool orphaned() const {$/;"	f	struct:flecs::query_base	typeref:typename:bool	signature:() const
other	$FLECS/$FLECS/flecs.c	/^    ecs_rule_lbl_t other;      \/* Misc register used for control flow *\/$/;"	m	struct:ecs_rule_op_t	typeref:typename:ecs_rule_lbl_t	file:
other_count	$FLECS/$FLECS/flecs.h	/^        int64_t other_count;           \/**< other commands processed *\/$/;"	m	struct:ecs_world_info_t::__anonb2bcda280708	typeref:typename:int64_t
other_table	$FLECS/$FLECS/flecs.h	/^    ecs_table_t *other_table;$/;"	m	struct:ecs_event_desc_t	typeref:typename:ecs_table_t *
out	$FLECS/$FLECS/flecs.h	/^    Base& out() {$/;"	f	struct:flecs::term_builder_i	typeref:typename:Base &	signature:()
outstanding_alloc_count	$FLECS/$FLECS/flecs.h	/^        ecs_metric_t outstanding_alloc_count; \/**< Difference between allocs & frees *\/$/;"	m	struct:ecs_world_stats_t::__anonb2bcda281608	typeref:typename:ecs_metric_t
over	$FLECS/$FLECS/flecs.h	/^    ecs_entity_t over;$/;"	m	struct:ecs_unit_desc_t	typeref:typename:ecs_entity_t
override	$FLECS/$FLECS/flecs.h	/^    Self& override(flecs::id_t id) {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &	signature:(flecs::id_t id)
overshoot	$FLECS/$FLECS/flecs.h	/^    ecs_ftime_t overshoot;       \/**< Used to correct returned interval time *\/$/;"	m	struct:EcsTimer	typeref:typename:ecs_ftime_t
owned	$FLECS/$FLECS/flecs.c	/^    bool owned;$/;"	m	struct:__anonb2bcda231808	typeref:typename:bool	file:
owned	$FLECS/$FLECS/flecs.h	/^    bool owned; \/* Set to false if ecs_vars_t should not take ownership of var *\/$/;"	m	struct:ecs_expr_var_t	typeref:typename:bool
owner	$FLECS/$FLECS/flecs.h	/^    struct ecs_stack_t *owner;$/;"	m	struct:ecs_stack_cursor_t	typeref:struct:ecs_stack_t *
owns	$FLECS/$FLECS/flecs.h	/^    bool owns(flecs::id_t second) const {$/;"	f	struct:flecs::entity_view	typeref:typename:bool	signature:(flecs::id_t second) const
p	$FLECS/$FLECS/flecs.c	/^        FARPROC p;$/;"	m	union:win_enable_high_timer_resolution::__anonb2bcda231e0a	typeref:typename:FARPROC	file:
page	$FLECS/$FLECS/flecs.h	/^page_iterable<Components...> iterable<Components...>::page($/;"	f	class:flecs::iterable	typeref:typename:page_iterable<Components...>	signature:(int32_t offset,int32_t limit)
page_allocator	$FLECS/$FLECS/flecs.c	/^    ecs_block_allocator_t page_allocator;$/;"	m	struct:ecs_entity_index_t	typeref:typename:ecs_block_allocator_t	file:
page_allocator	$FLECS/$FLECS/flecs.h	/^    struct ecs_block_allocator_t *page_allocator;$/;"	m	struct:ecs_sparse_t	typeref:struct:ecs_block_allocator_t *
page_iterable	$FLECS/$FLECS/flecs.h	/^struct page_iterable final : iterable<Components...> {$/;"	s	namespace:flecs
pages	$FLECS/$FLECS/flecs.c	/^    ecs_vec_t pages;$/;"	m	struct:ecs_entity_index_t	typeref:typename:ecs_vec_t	file:
pages	$FLECS/$FLECS/flecs.h	/^    ecs_vec_t pages;         \/* Chunks with sparse arrays & data *\/$/;"	m	struct:ecs_sparse_t	typeref:typename:ecs_vec_t
pair	$FLECS/$FLECS/flecs.h	/^struct pair : _::pair_base { $/;"	s	namespace:flecs
pair_base	$FLECS/$FLECS/flecs.h	/^    struct pair_base { };   $/;"	s	namespace:flecs::_
pair_count	$FLECS/$FLECS/flecs.h	/^        ecs_metric_t pair_count;          \/**< Number of pair ids *\/$/;"	m	struct:ecs_world_stats_t::__anonb2bcda281008	typeref:typename:ecs_metric_t
pair_first_t	$FLECS/$FLECS/flecs.h	/^using pair_first_t = transcribe_cv_t<remove_reference_t<P>, typename raw_type_t<P>::first>;$/;"	t	namespace:flecs	typeref:typename:transcribe_cv_t<remove_reference_t<P>,typename raw_type_t<P>::first>
pair_id_count	$FLECS/$FLECS/flecs.h	/^    int32_t pair_id_count;            \/**< Number of pair ids in the world *\/$/;"	m	struct:ecs_world_info_t	typeref:typename:int32_t
pair_object	$FLECS/$FLECS/flecs.h	/^using pair_object = pair<First, Second>;$/;"	t	namespace:flecs	typeref:typename:pair<First,Second>
pair_second_t	$FLECS/$FLECS/flecs.h	/^using pair_second_t = transcribe_cv_t<remove_reference_t<P>, typename raw_type_t<P>::second>;$/;"	t	namespace:flecs	typeref:typename:transcribe_cv_t<remove_reference_t<P>,typename raw_type_t<P>::second>
pair_type_t	$FLECS/$FLECS/flecs.h	/^using pair_type_t = transcribe_cvp_t<remove_reference_t<P>, typename raw_type_t<P>::type>;$/;"	t	namespace:flecs	typeref:typename:transcribe_cvp_t<remove_reference_t<P>,typename raw_type_t<P>::type>
param	$FLECS/$FLECS/flecs.h	/^    void* param() {$/;"	f	struct:flecs::iter	typeref:typename:void *	signature:()
param_count	$FLECS/$FLECS/flecs.c	/^    int32_t param_count;$/;"	m	struct:__anonb2bcda230708	typeref:typename:int32_t	file:
param_count	$FLECS/$FLECS/flecs.h	/^    int32_t param_count;$/;"	m	struct:__anonb2bcda280b08	typeref:typename:int32_t
param_offsets	$FLECS/$FLECS/flecs.c	/^    int32_t param_offsets[ECS_HTTP_QUERY_PARAM_COUNT_MAX];$/;"	m	struct:__anonb2bcda230708	typeref:typename:int32_t[]	file:
param_value_offsets	$FLECS/$FLECS/flecs.c	/^    int32_t param_value_offsets[ECS_HTTP_QUERY_PARAM_COUNT_MAX];$/;"	m	struct:__anonb2bcda230708	typeref:typename:int32_t[]	file:
params	$FLECS/$FLECS/flecs.c	/^    ecs_meta_token_t params;$/;"	m	struct:meta_type_t	typeref:typename:ecs_meta_token_t	file:
params	$FLECS/$FLECS/flecs.h	/^    ecs_http_key_value_t params[ECS_HTTP_HEADER_COUNT_MAX];$/;"	m	struct:__anonb2bcda280b08	typeref:typename:ecs_http_key_value_t[]
parent	$FLECS/$FLECS/flecs.c	/^    ecs_query_t *parent;$/;"	m	struct:ecs_query_t	typeref:typename:ecs_query_t *	file:
parent	$FLECS/$FLECS/flecs.h	/^inline flecs::entity entity_view::parent() const {$/;"	f	class:flecs::entity_view	typeref:typename:flecs::entity	signature:() const
parent_query	$FLECS/$FLECS/flecs.c	/^    ecs_query_t *parent_query;$/;"	m	struct:ecs_query_event_t	typeref:typename:ecs_query_t *	file:
parse_c_digit	$FLECS/$FLECS/flecs.c	/^const char* parse_c_digit($/;"	f	typeref:typename:const char *	file:	signature:(const char * ptr,int64_t * value_out)
parse_c_identifier	$FLECS/$FLECS/flecs.c	/^const char* parse_c_identifier($/;"	f	typeref:typename:const char *	file:	signature:(const char * ptr,char * buff,char * params,meta_parse_ctx_t * ctx)
parse_content_length	$FLECS/$FLECS/flecs.c	/^    bool parse_content_length;$/;"	m	struct:__anonb2bcda230708	typeref:typename:bool	file:
partial	$FLECS/$FLECS/flecs.h	/^    bool partial;          \/**< Is the reflection data a partial type description *\/$/;"	m	struct:EcsMetaType	typeref:typename:bool
path	$FLECS/$FLECS/flecs.h	/^    flecs::string path(const char *sep = "::", const char *init_sep = "::") const {$/;"	f	struct:flecs::entity_view	typeref:typename:flecs::string	signature:(const char * sep="::",const char * init_sep="::") const
path_from	$FLECS/$FLECS/flecs.h	/^    flecs::string path_from(flecs::entity_t parent, const char *sep = "::", const char *init_sep/;"	f	struct:flecs::entity_view	typeref:typename:flecs::string	signature:(flecs::entity_t parent,const char * sep="::",const char * init_sep="::") const
pending_buffer	$FLECS/$FLECS/flecs.c	/^    ecs_sparse_t *pending_buffer;    \/* sparse<table_id, ecs_table_t*> *\/$/;"	m	struct:ecs_world_t	typeref:typename:ecs_sparse_t *	file:
pending_tables	$FLECS/$FLECS/flecs.c	/^    ecs_sparse_t *pending_tables;    \/* sparse<table_id, ecs_table_t*> *\/$/;"	m	struct:ecs_world_t	typeref:typename:ecs_sparse_t *	file:
performance	$FLECS/$FLECS/flecs.h	/^    } performance;$/;"	m	struct:ecs_world_stats_t	typeref:struct:ecs_world_stats_t::__anonb2bcda281508
pipeline	$FLECS/$FLECS/flecs.c	/^    ecs_entity_t pipeline;           \/* Current pipeline *\/$/;"	m	struct:ecs_world_t	typeref:typename:ecs_entity_t	file:
pipeline	$FLECS/$FLECS/flecs.h	/^struct pipeline : entity {$/;"	s	namespace:flecs
pipeline_build_count	$FLECS/$FLECS/flecs.h	/^        ecs_metric_t pipeline_build_count; \/**< Number of system pipeline rebuilds (occurs when/;"	m	struct:ecs_world_stats_t::__anonb2bcda281408	typeref:typename:ecs_metric_t
pipeline_build_count_total	$FLECS/$FLECS/flecs.h	/^    int64_t pipeline_build_count_total; \/**< Total number of pipeline builds *\/$/;"	m	struct:ecs_world_info_t	typeref:typename:int64_t
pipeline_builder	$FLECS/$FLECS/flecs.h	/^struct pipeline_builder final : _::pipeline_builder_base<Components...> {$/;"	s	namespace:flecs
pipeline_builder_base	$FLECS/$FLECS/flecs.h	/^    using pipeline_builder_base = builder<$/;"	t	namespace:flecs::_	typeref:typename:builder<pipeline,ecs_pipeline_desc_t,pipeline_builder<Components...>,pipeline_builder_i,Components...>
pipeline_builder_i	$FLECS/$FLECS/flecs.h	/^struct pipeline_builder_i : query_builder_i<Base> {$/;"	s	namespace:flecs
pivot_term	$FLECS/$FLECS/flecs.h	/^    int32_t pivot_term;$/;"	m	struct:ecs_filter_iter_t	typeref:typename:int32_t
placement_new_tag	$FLECS/$FLECS/flecs.h	/^constexpr placement_new_tag_t placement_new_tag{};$/;"	v	namespace:flecs::_	typeref:typename:placement_new_tag_t
placement_new_tag_t	$FLECS/$FLECS/flecs.h	/^struct placement_new_tag_t{};$/;"	s	namespace:flecs::_
plecs_apply_annotations	$FLECS/$FLECS/flecs.c	/^void plecs_apply_annotations($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_entity_t subj,plecs_state_t * state)
plecs_apply_with_frame	$FLECS/$FLECS/flecs.c	/^void plecs_apply_with_frame($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,plecs_state_t * state,ecs_entity_t e)
plecs_clear_annotations	$FLECS/$FLECS/flecs.c	/^void plecs_clear_annotations($/;"	f	typeref:typename:void	file:	signature:(plecs_state_t * state)
plecs_create_term	$FLECS/$FLECS/flecs.c	/^int plecs_create_term($/;"	f	typeref:typename:int	file:	signature:(ecs_world_t * world,ecs_term_t * term,const char * name,const char * expr,int64_t column,plecs_state_t * state)
plecs_ensure_entity	$FLECS/$FLECS/flecs.c	/^ecs_entity_t plecs_ensure_entity($/;"	f	typeref:typename:ecs_entity_t	file:	signature:(ecs_world_t * world,plecs_state_t * state,const char * path,ecs_entity_t rel,bool is_subject)
plecs_ensure_term_id	$FLECS/$FLECS/flecs.c	/^ecs_entity_t plecs_ensure_term_id($/;"	f	typeref:typename:ecs_entity_t	file:	signature:(ecs_world_t * world,plecs_state_t * state,ecs_term_id_t * term_id,const char * expr,int64_t column,ecs_entity_t pred,bool is_subject)
plecs_free_all_with_frames	$FLECS/$FLECS/flecs.c	/^void plecs_free_all_with_frames($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,plecs_state_t * state)
plecs_free_with_frame	$FLECS/$FLECS/flecs.c	/^void plecs_free_with_frame($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,plecs_state_t * state)
plecs_from_file	$FLECS/$FLECS/flecs.h	/^int plecs_from_file(const char *filename) const {$/;"	f	struct:flecs::world	typeref:typename:int	signature:(const char * filename) const
plecs_from_str	$FLECS/$FLECS/flecs.h	/^int plecs_from_str(const char *name, const char *str) const {$/;"	f	struct:flecs::world	typeref:typename:int	signature:(const char * name,const char * str) const
plecs_is_newline_comment	$FLECS/$FLECS/flecs.c	/^bool plecs_is_newline_comment($/;"	f	typeref:typename:bool	file:	signature:(const char * ptr)
plecs_lookup	$FLECS/$FLECS/flecs.c	/^ecs_entity_t plecs_lookup($/;"	f	typeref:typename:ecs_entity_t	file:	signature:(const ecs_world_t * world,const char * path,plecs_state_t * state,ecs_entity_t rel,bool is_subject)
plecs_lookup_action	$FLECS/$FLECS/flecs.c	/^ecs_entity_t plecs_lookup_action($/;"	f	typeref:typename:ecs_entity_t	file:	signature:(const ecs_world_t * world,const char * path,void * ctx)
plecs_parse_annotation	$FLECS/$FLECS/flecs.c	/^const char* plecs_parse_annotation($/;"	f	typeref:typename:const char *	file:	signature:(const char * name,const char * expr,const char * ptr,plecs_state_t * state)
plecs_parse_assembly_stmt	$FLECS/$FLECS/flecs.c	/^const char* plecs_parse_assembly_stmt($/;"	f	typeref:typename:const char *	file:	signature:(const char * name,const char * expr,const char * ptr,plecs_state_t * state)
plecs_parse_assign_expr	$FLECS/$FLECS/flecs.c	/^const char* plecs_parse_assign_expr($/;"	f	typeref:typename:const char *	file:	signature:(ecs_world_t * world,const char * name,const char * expr,const char * ptr,plecs_state_t * state,ecs_expr_var_t * var)
plecs_parse_assign_stmt	$FLECS/$FLECS/flecs.c	/^const char* plecs_parse_assign_stmt($/;"	f	typeref:typename:const char *	file:	signature:(ecs_world_t * world,const char * name,const char * expr,const char * ptr,plecs_state_t * state)
plecs_parse_assign_var_expr	$FLECS/$FLECS/flecs.c	/^const char* plecs_parse_assign_var_expr($/;"	f	typeref:typename:const char *	file:	signature:(ecs_world_t * world,const char * name,const char * expr,const char * ptr,plecs_state_t * state,ecs_expr_var_t * var)
plecs_parse_assign_with_stmt	$FLECS/$FLECS/flecs.c	/^const char* plecs_parse_assign_with_stmt($/;"	f	typeref:typename:const char *	file:	signature:(ecs_world_t * world,const char * name,const char * expr,const char * ptr,plecs_state_t * state)
plecs_parse_assign_with_var	$FLECS/$FLECS/flecs.c	/^const char* plecs_parse_assign_with_var($/;"	f	typeref:typename:const char *	file:	signature:(const char * name,const char * expr,const char * ptr,plecs_state_t * state)
plecs_parse_const_stmt	$FLECS/$FLECS/flecs.c	/^const char* plecs_parse_const_stmt($/;"	f	typeref:typename:const char *	file:	signature:(ecs_world_t * world,const char * name,const char * expr,const char * ptr,plecs_state_t * state)
plecs_parse_fluff	$FLECS/$FLECS/flecs.c	/^const char* plecs_parse_fluff($/;"	f	typeref:typename:const char *	file:	signature:(const char * ptr)
plecs_parse_inherit_stmt	$FLECS/$FLECS/flecs.c	/^const char* plecs_parse_inherit_stmt($/;"	f	typeref:typename:const char *	file:	signature:(const char * name,const char * expr,const char * ptr,plecs_state_t * state)
plecs_parse_module_stmt	$FLECS/$FLECS/flecs.c	/^const char* plecs_parse_module_stmt($/;"	f	typeref:typename:const char *	file:	signature:(ecs_world_t * world,const char * name,const char * expr,const char * ptr,plecs_state_t * state)
plecs_parse_plecs_term	$FLECS/$FLECS/flecs.c	/^const char *plecs_parse_plecs_term($/;"	f	typeref:typename:const char *	file:	signature:(ecs_world_t * world,const char * name,const char * expr,const char * ptr,plecs_state_t * state)
plecs_parse_prop_stmt	$FLECS/$FLECS/flecs.c	/^const char* plecs_parse_prop_stmt($/;"	f	typeref:typename:const char *	file:	signature:(ecs_world_t * world,const char * name,const char * expr,const char * ptr,plecs_state_t * state)
plecs_parse_scope_close	$FLECS/$FLECS/flecs.c	/^const char* plecs_parse_scope_close($/;"	f	typeref:typename:const char *	file:	signature:(ecs_world_t * world,const char * name,const char * expr,const char * ptr,plecs_state_t * state)
plecs_parse_scope_open	$FLECS/$FLECS/flecs.c	/^const char* plecs_parse_scope_open($/;"	f	typeref:typename:const char *	file:	signature:(ecs_world_t * world,const char * name,const char * expr,const char * ptr,plecs_state_t * state)
plecs_parse_stmt	$FLECS/$FLECS/flecs.c	/^const char* plecs_parse_stmt($/;"	f	typeref:typename:const char *	file:	signature:(ecs_world_t * world,const char * name,const char * expr,const char * ptr,plecs_state_t * state)
plecs_parse_using_stmt	$FLECS/$FLECS/flecs.c	/^const char* plecs_parse_using_stmt($/;"	f	typeref:typename:const char *	file:	signature:(ecs_world_t * world,const char * name,const char * expr,const char * ptr,plecs_state_t * state)
plecs_parse_var_as_component	$FLECS/$FLECS/flecs.c	/^const char* plecs_parse_var_as_component($/;"	f	typeref:typename:const char *	file:	signature:(ecs_world_t * world,const char * name,const char * expr,const char * ptr,plecs_state_t * state)
plecs_parse_var_type	$FLECS/$FLECS/flecs.c	/^const char* plecs_parse_var_type($/;"	f	typeref:typename:const char *	file:	signature:(ecs_world_t * world,const char * name,const char * expr,const char * ptr,plecs_state_t * state,ecs_entity_t * type_out)
plecs_parse_with_stmt	$FLECS/$FLECS/flecs.c	/^const char* plecs_parse_with_stmt($/;"	f	typeref:typename:const char *	file:	signature:(const char * name,const char * expr,const char * ptr,plecs_state_t * state)
plecs_pred_is_subj	$FLECS/$FLECS/flecs.c	/^bool plecs_pred_is_subj($/;"	f	typeref:typename:bool	file:	signature:(ecs_term_t * term,plecs_state_t * state)
plecs_push_using	$FLECS/$FLECS/flecs.c	/^void plecs_push_using($/;"	f	typeref:typename:void	file:	signature:(ecs_entity_t scope,plecs_state_t * state)
plecs_set_mask_to_name	$FLECS/$FLECS/flecs.c	/^const char* plecs_set_mask_to_name($/;"	f	typeref:typename:const char *	file:	signature:(ecs_flags32_t flags)
plecs_state_t	$FLECS/$FLECS/flecs.c	/^} plecs_state_t;$/;"	t	typeref:struct:__anonb2bcda231908	file:
plecs_trim_annot	$FLECS/$FLECS/flecs.c	/^char* plecs_trim_annot($/;"	f	typeref:typename:char *	file:	signature:(char * annot)
plecs_with_value_t	$FLECS/$FLECS/flecs.c	/^} plecs_with_value_t;$/;"	t	typeref:struct:__anonb2bcda231808	file:
poly	$FLECS/$FLECS/flecs.h	/^    ecs_poly_t *poly;          \/**< Pointer to poly object *\/$/;"	m	struct:EcsPoly	typeref:typename:ecs_poly_t *
pop	$FLECS/$FLECS/flecs.h	/^inline void pop() {$/;"	f	namespace:flecs::log	typeref:typename:void	signature:()
populate	$FLECS/$FLECS/flecs.h	/^    bool populate(const ecs_iter_t*, size_t) { return false; }$/;"	f	struct:flecs::_::term_ptrs	typeref:typename:bool	signature:(const ecs_iter_t *,size_t)
port	$FLECS/$FLECS/flecs.c	/^    uint16_t port;$/;"	m	struct:ecs_http_server_t	typeref:typename:uint16_t	file:
port	$FLECS/$FLECS/flecs.h	/^    uint16_t port;      \/**< Port of server (optional, default = 27750) *\/$/;"	m	struct:__anonb2bcda280e08	typeref:typename:uint16_t
pos	$FLECS/$FLECS/flecs.h	/^    int32_t pos;$/;"	m	struct:ecs_strbuf_element	typeref:typename:int32_t
posix_adec	$FLECS/$FLECS/flecs.c	/^int32_t posix_adec($/;"	f	typeref:typename:int32_t	file:	signature:(int32_t * count)
posix_ainc	$FLECS/$FLECS/flecs.c	/^int32_t posix_ainc($/;"	f	typeref:typename:int32_t	file:	signature:(int32_t * count)
posix_cond_broadcast	$FLECS/$FLECS/flecs.c	/^void posix_cond_broadcast($/;"	f	typeref:typename:void	file:	signature:(ecs_os_cond_t c)
posix_cond_free	$FLECS/$FLECS/flecs.c	/^void posix_cond_free($/;"	f	typeref:typename:void	file:	signature:(ecs_os_cond_t c)
posix_cond_new	$FLECS/$FLECS/flecs.c	/^ecs_os_cond_t posix_cond_new(void) {$/;"	f	typeref:typename:ecs_os_cond_t	file:	signature:(void)
posix_cond_signal	$FLECS/$FLECS/flecs.c	/^void posix_cond_signal($/;"	f	typeref:typename:void	file:	signature:(ecs_os_cond_t c)
posix_cond_wait	$FLECS/$FLECS/flecs.c	/^void posix_cond_wait($/;"	f	typeref:typename:void	file:	signature:(ecs_os_cond_t c,ecs_os_mutex_t m)
posix_int64_muldiv	$FLECS/$FLECS/flecs.c	/^int64_t posix_int64_muldiv(int64_t value, int64_t numer, int64_t denom) {$/;"	f	typeref:typename:int64_t	file:	signature:(int64_t value,int64_t numer,int64_t denom)
posix_ladec	$FLECS/$FLECS/flecs.c	/^int64_t posix_ladec($/;"	f	typeref:typename:int64_t	file:	signature:(int64_t * count)
posix_lainc	$FLECS/$FLECS/flecs.c	/^int64_t posix_lainc($/;"	f	typeref:typename:int64_t	file:	signature:(int64_t * count)
posix_mutex_free	$FLECS/$FLECS/flecs.c	/^void posix_mutex_free($/;"	f	typeref:typename:void	file:	signature:(ecs_os_mutex_t m)
posix_mutex_lock	$FLECS/$FLECS/flecs.c	/^void posix_mutex_lock($/;"	f	typeref:typename:void	file:	signature:(ecs_os_mutex_t m)
posix_mutex_new	$FLECS/$FLECS/flecs.c	/^ecs_os_mutex_t posix_mutex_new(void) {$/;"	f	typeref:typename:ecs_os_mutex_t	file:	signature:(void)
posix_mutex_unlock	$FLECS/$FLECS/flecs.c	/^void posix_mutex_unlock($/;"	f	typeref:typename:void	file:	signature:(ecs_os_mutex_t m)
posix_osx_timebase	$FLECS/$FLECS/flecs.c	/^static mach_timebase_info_data_t posix_osx_timebase;$/;"	v	typeref:typename:mach_timebase_info_data_t	file:
posix_sleep	$FLECS/$FLECS/flecs.c	/^void posix_sleep($/;"	f	typeref:typename:void	file:	signature:(int32_t sec,int32_t nanosec)
posix_thread_join	$FLECS/$FLECS/flecs.c	/^void* posix_thread_join($/;"	f	typeref:typename:void *	file:	signature:(ecs_os_thread_t thread)
posix_thread_new	$FLECS/$FLECS/flecs.c	/^ecs_os_thread_t posix_thread_new($/;"	f	typeref:typename:ecs_os_thread_t	file:	signature:(ecs_os_thread_callback_t callback,void * arg)
posix_thread_self	$FLECS/$FLECS/flecs.c	/^ecs_os_thread_id_t posix_thread_self(void)$/;"	f	typeref:typename:ecs_os_thread_id_t	file:	signature:(void)
posix_time_initialized	$FLECS/$FLECS/flecs.c	/^static bool posix_time_initialized;$/;"	v	typeref:typename:bool	file:
posix_time_now	$FLECS/$FLECS/flecs.c	/^uint64_t posix_time_now(void) {$/;"	f	typeref:typename:uint64_t	file:	signature:(void)
posix_time_setup	$FLECS/$FLECS/flecs.c	/^void posix_time_setup(void) {$/;"	f	typeref:typename:void	file:	signature:(void)
posix_time_start	$FLECS/$FLECS/flecs.c	/^static uint64_t posix_time_start;$/;"	v	typeref:typename:uint64_t	file:
post_frame_actions	$FLECS/$FLECS/flecs.c	/^    ecs_vec_t post_frame_actions;$/;"	m	struct:ecs_stage_t	typeref:typename:ecs_vec_t	file:
power	$FLECS/$FLECS/flecs.h	/^    int32_t power;  \/**< Power to apply to factor (e.g. "1", "3", "-9") *\/$/;"	m	struct:ecs_unit_translation_t	typeref:typename:int32_t
pq	$FLECS/$FLECS/flecs.c	/^    ecs_pipeline_state_t* pq;        \/* Pointer to the pipeline for the workers to execute *\/$/;"	m	struct:ecs_world_t	typeref:typename:ecs_pipeline_state_t *	file:
prefab	$FLECS/$FLECS/flecs.h	/^inline flecs::entity world::prefab(const char *name) const {$/;"	f	class:flecs::world	typeref:typename:flecs::entity	signature:(const char * name) const
prefix	$FLECS/$FLECS/flecs.h	/^    ecs_entity_t prefix;$/;"	m	struct:ecs_unit_desc_t	typeref:typename:ecs_entity_t
pressure	$FLECS/$FLECS/flecs.h	/^struct pressure {$/;"	s	struct:flecs::units
prev	$FLECS/$FLECS/flecs.c	/^    struct ecs_table_cache_hdr_t *prev, *next;$/;"	m	struct:ecs_table_cache_hdr_t	typeref:struct:ecs_table_cache_hdr_t *	file:
prev	$FLECS/$FLECS/flecs.h	/^    struct ecs_stack_cursor_t *prev;$/;"	m	struct:ecs_stack_cursor_t	typeref:struct:ecs_stack_cursor_t *
prev_depth	$FLECS/$FLECS/flecs.h	/^    int32_t prev_depth;       \/**< Depth to restore, in case dotmember was used *\/$/;"	m	struct:ecs_meta_scope_t	typeref:typename:int32_t
prev_match_count	$FLECS/$FLECS/flecs.c	/^    int32_t prev_match_count;        \/* Track if sorting is needed *\/$/;"	m	struct:ecs_query_t	typeref:typename:int32_t	file:
primitive	$FLECS/$FLECS/flecs.h	/^inline flecs::entity world::primitive(flecs::meta::primitive_kind_t kind) {$/;"	f	class:flecs::world	typeref:typename:flecs::entity	signature:(flecs::meta::primitive_kind_t kind)
primitive_kind_t	$FLECS/$FLECS/flecs.h	/^using primitive_kind_t = ecs_primitive_kind_t;$/;"	t	namespace:flecs::meta	typeref:typename:ecs_primitive_kind_t
priv	$FLECS/$FLECS/flecs.h	/^    ecs_iter_private_t priv;      \/* Private data *\/$/;"	m	struct:ecs_iter_t	typeref:typename:ecs_iter_private_t
profile	$FLECS/$FLECS/flecs.h	/^    ecs_rule_op_profile_t *profile;$/;"	m	struct:ecs_rule_iter_t	typeref:typename:ecs_rule_op_profile_t *
progress	$FLECS/$FLECS/flecs.h	/^inline bool world::progress(ecs_ftime_t delta_time) const {$/;"	f	class:flecs::world	typeref:typename:bool	signature:(ecs_ftime_t delta_time) const
prop_defaults	$FLECS/$FLECS/flecs.h	/^    ecs_vec_t prop_defaults;$/;"	m	struct:EcsScript	typeref:typename:ecs_vec_t
ptr	$FLECS/$FLECS/flecs.c	/^    void *ptr;$/;"	m	struct:ecs_expr_value_t	typeref:typename:void *	file:
ptr	$FLECS/$FLECS/flecs.h	/^    void *ptr;$/;"	m	struct:flecs::_::term_ptr	typeref:typename:void *
ptr_from_helper	$FLECS/$FLECS/flecs.c	/^const void* ptr_from_helper($/;"	f	typeref:typename:const void *	file:	signature:(sort_helper_t * helper)
ptrs	$FLECS/$FLECS/flecs.h	/^    void **ptrs;                  \/* Pointers to components. Array if from this, pointer if not/;"	m	struct:ecs_iter_t	typeref:typename:void **
pub	$FLECS/$FLECS/flecs.c	/^    ecs_http_request_t pub;$/;"	m	struct:__anonb2bcda230908	typeref:typename:ecs_http_request_t	file:
push	$FLECS/$FLECS/flecs.h	/^inline void push(const char *fmt, ...) {$/;"	f	namespace:flecs::log	typeref:typename:void	signature:(const char * fmt,...)
quantity	$FLECS/$FLECS/flecs.h	/^Self& quantity(flecs::entity_t quantity) {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &	signature:(flecs::entity_t quantity)
queries	$FLECS/$FLECS/flecs.c	/^    ecs_vec_t queries;               \/* vector<ecs_query_t*> *\/$/;"	m	struct:ecs_monitor_t	typeref:typename:ecs_vec_t	file:
queries	$FLECS/$FLECS/flecs.h	/^    } queries;$/;"	m	struct:ecs_world_stats_t	typeref:struct:ecs_world_stats_t::__anonb2bcda281208
query	$FLECS/$FLECS/flecs.c	/^    ecs_query_t *query;$/;"	m	struct:ecs_table_event_t	typeref:typename:ecs_query_t *	file:
query	$FLECS/$FLECS/flecs.h	/^struct query final : query_base, iterable<Components...> {$/;"	s	namespace:flecs
query_base	$FLECS/$FLECS/flecs.h	/^struct query_base {$/;"	s	namespace:flecs
query_builder	$FLECS/$FLECS/flecs.h	/^struct query_builder final : _::query_builder_base<Components...> {$/;"	s	namespace:flecs
query_builder_base	$FLECS/$FLECS/flecs.h	/^    using query_builder_base = builder<$/;"	t	namespace:flecs::_	typeref:typename:builder<query,ecs_query_desc_t,query_builder<Components...>,query_builder_i,Components...>
query_builder_i	$FLECS/$FLECS/flecs.h	/^struct query_builder_i : filter_builder_i<Base, Components ...> {$/;"	s	namespace:flecs
query_count	$FLECS/$FLECS/flecs.h	/^        ecs_metric_t query_count;          \/**< Number of queries *\/$/;"	m	struct:ecs_world_stats_t::__anonb2bcda281208	typeref:typename:ecs_metric_t
query_entity	$FLECS/$FLECS/flecs.c	/^    ecs_entity_t query_entity;      \/* Entity associated with query *\/$/;"	m	struct:ecs_system_t	typeref:typename:ecs_entity_t	file:
query_group_info_t	$FLECS/$FLECS/flecs.h	/^using query_group_info_t = ecs_query_group_info_t;$/;"	t	namespace:flecs	typeref:typename:ecs_query_group_info_t
query_offset	$FLECS/$FLECS/flecs.c	/^    int32_t query_offset;$/;"	m	struct:__anonb2bcda230708	typeref:typename:int32_t	file:
query_t	$FLECS/$FLECS/flecs.h	/^using query_t = ecs_query_t;$/;"	t	namespace:flecs	typeref:typename:ecs_query_t
query_table	$FLECS/$FLECS/flecs.c	/^    ecs_block_allocator_t query_table;$/;"	m	struct:ecs_world_allocators_t	typeref:typename:ecs_block_allocator_t	file:
query_table_list	$FLECS/$FLECS/flecs.c	/^    ecs_map_params_t query_table_list;$/;"	m	struct:ecs_world_allocators_t	typeref:typename:ecs_map_params_t	file:
query_table_match	$FLECS/$FLECS/flecs.c	/^    ecs_block_allocator_t query_table_match;$/;"	m	struct:ecs_world_allocators_t	typeref:typename:ecs_block_allocator_t	file:
queue	$FLECS/$FLECS/flecs.c	/^    ecs_vec_t queue;$/;"	m	struct:ecs_commands_t	typeref:typename:ecs_vec_t	file:
quit	$FLECS/$FLECS/flecs.h	/^    void quit() const {$/;"	f	struct:flecs::world	typeref:typename:void	signature:() const
r	$FLECS/$FLECS/flecs.c	/^    ecs_record_t *r;$/;"	m	struct:__anonb2bcda231708	typeref:typename:ecs_record_t *	file:
ran_since_merge	$FLECS/$FLECS/flecs.c	/^    int32_t ran_since_merge;    \/* Index in current op *\/$/;"	m	struct:ecs_pipeline_state_t	typeref:typename:int32_t	file:
randomize_timers	$FLECS/$FLECS/flecs.h	/^void randomize_timers() const;$/;"	p	struct:flecs::world	typeref:typename:void	signature:() const
range	$FLECS/$FLECS/flecs.c	/^    ecs_table_range_t range;$/;"	m	struct:ecs_entity_filter_iter_t	typeref:typename:ecs_table_range_t	file:
range	$FLECS/$FLECS/flecs.h	/^untyped_component& range(double min, double max) {$/;"	f	struct:flecs::untyped_component	typeref:typename:untyped_component &	signature:(double min,double max)
range_check_enabled	$FLECS/$FLECS/flecs.c	/^    bool range_check_enabled;$/;"	m	struct:ecs_world_t	typeref:typename:bool	file:
range_iterator	$FLECS/$FLECS/flecs.h	/^struct range_iterator$/;"	s	namespace:flecs::_
ranges	$FLECS/$FLECS/flecs.c	/^    ecs_ref_t ranges;           \/* Reference to ranges component *\/$/;"	m	struct:EcsAlert	typeref:typename:ecs_ref_t	file:
rate	$FLECS/$FLECS/flecs.h	/^void rate(int32_t rate);$/;"	p	struct:flecs::system	typeref:typename:void	signature:(int32_t rate)
raw_id	$FLECS/$FLECS/flecs.h	/^    flecs::id_t raw_id() const {$/;"	f	struct:flecs::id	typeref:typename:flecs::id_t	signature:() const
raw_type_t	$FLECS/$FLECS/flecs.h	/^using raw_type_t = remove_pointer_t<remove_reference_t<T>>;$/;"	t	namespace:flecs	typeref:typename:remove_pointer_t<remove_reference_t<T>>
rc	$FLECS/$FLECS/flecs.c	/^    int32_t rc;$/;"	m	struct:__anonb2bcda231a08	typeref:typename:int32_t	file:
reachable	$FLECS/$FLECS/flecs.c	/^    ecs_reachable_cache_t reachable;$/;"	m	struct:ecs_id_record_t	typeref:typename:ecs_reachable_cache_t	file:
read	$FLECS/$FLECS/flecs.h	/^    Base& read(Args&&... args) {$/;"	f	struct:flecs::filter_builder_i	typeref:typename:Base &	signature:(Args &&...args)
read_write	$FLECS/$FLECS/flecs.h	/^    Base& read_write() {$/;"	f	struct:flecs::term_builder_i	typeref:typename:Base &	signature:()
readonly_begin	$FLECS/$FLECS/flecs.h	/^    bool readonly_begin() const {$/;"	f	struct:flecs::world	typeref:typename:bool	signature:() const
readonly_end	$FLECS/$FLECS/flecs.h	/^    void readonly_end() const {$/;"	f	struct:flecs::world	typeref:typename:void	signature:() const
ready	$FLECS/$FLECS/flecs.c	/^    bool ready;$/;"	m	struct:__anonb2bcda232508	typeref:typename:bool	file:
real_world	$FLECS/$FLECS/flecs.h	/^    ecs_world_t *real_world;      \/* Actual world. This differs from world when in readonly mod/;"	m	struct:ecs_iter_t	typeref:typename:ecs_world_t *
realloc_	$FLECS/$FLECS/flecs.h	/^    ecs_os_api_realloc_t realloc_;$/;"	m	struct:ecs_os_api_t	typeref:typename:ecs_os_api_realloc_t
realloc_count	$FLECS/$FLECS/flecs.h	/^        ecs_metric_t realloc_count;        \/**< Reallocs per frame *\/$/;"	m	struct:ecs_world_stats_t::__anonb2bcda281608	typeref:typename:ecs_metric_t
rebuild_count	$FLECS/$FLECS/flecs.c	/^    int32_t rebuild_count;      \/* Number of pipeline rebuilds *\/$/;"	m	struct:ecs_pipeline_state_t	typeref:typename:int32_t	file:
rebuild_count	$FLECS/$FLECS/flecs.h	/^    int32_t rebuild_count;       \/**< Number of times pipeline has rebuilt *\/$/;"	m	struct:ecs_pipeline_stats_t	typeref:typename:int32_t
record	$FLECS/$FLECS/flecs.c	/^    ecs_record_t *record;$/;"	m	struct:ecs_reachable_elem_t	typeref:typename:ecs_record_t *	file:
record	$FLECS/$FLECS/flecs.h	/^    ecs_record_t *record;   \/* Entity index record *\/$/;"	m	struct:ecs_ref_t	typeref:typename:ecs_record_t *
record_count	$FLECS/$FLECS/flecs.c	/^    int16_t record_count;            \/* Table record count including wildcards *\/$/;"	m	struct:ecs_table__t	typeref:typename:int16_t	file:
records	$FLECS/$FLECS/flecs.c	/^    struct ecs_table_record_t *records; \/* Array with table records *\/$/;"	m	struct:ecs_table__t	typeref:struct:ecs_table_record_t *	file:
redo	$FLECS/$FLECS/flecs.c	/^    bool redo;$/;"	m	struct:__anonb2bcda232b08	typeref:typename:bool	file:
reduce_count	$FLECS/$FLECS/flecs.h	/^    int32_t reduce_count;$/;"	m	struct:__anonb2bcda281808	typeref:typename:int32_t
ref	$FLECS/$FLECS/flecs.c	/^    ecs_ref_t ref;$/;"	m	struct:__anonb2bcda231508	typeref:typename:ecs_ref_t	file:
ref	$FLECS/$FLECS/flecs.h	/^struct ref {$/;"	s	namespace:flecs
ref_	$FLECS/$FLECS/flecs.h	/^    type& ref_;$/;"	m	struct:flecs::pair	typeref:typename:type &
ref_t	$FLECS/$FLECS/flecs.h	/^using ref_t = ecs_ref_t;$/;"	t	namespace:flecs	typeref:typename:ecs_ref_t
refcount	$FLECS/$FLECS/flecs.c	/^    int32_t refcount;$/;"	m	struct:ecs_id_record_t	typeref:typename:int32_t	file:
references	$FLECS/$FLECS/flecs.h	/^    ecs_ref_t *references;        \/* Cached refs to components (if iterating a cache) *\/$/;"	m	struct:ecs_iter_t	typeref:typename:ecs_ref_t *
refs	$FLECS/$FLECS/flecs.c	/^    ecs_vec_t refs;                  \/* Cached components for non-this terms *\/$/;"	m	struct:ecs_query_table_match_t	typeref:typename:ecs_vec_t	file:
register_id	$FLECS/$FLECS/flecs.h	/^    ecs_id_t register_id;       \/**< Id observer is registered with (single term observers only/;"	m	struct:ecs_observer_t	typeref:typename:ecs_id_t
register_lifecycle_actions	$FLECS/$FLECS/flecs.h	/^void register_lifecycle_actions(ecs_world_t*, ecs_entity_t) { }$/;"	f	namespace:flecs::_	typeref:typename:void	signature:(ecs_world_t *,ecs_entity_t)
registered	$FLECS/$FLECS/flecs.h	/^    static bool registered(flecs::world_t *world) {$/;"	f	struct:flecs::_::cpp_type_impl	typeref:typename:bool	signature:(flecs::world_t * world)
remaining	$FLECS/$FLECS/flecs.c	/^    int16_t remaining;$/;"	m	struct:__anonb2bcda232208	typeref:typename:int16_t	file:
remaining	$FLECS/$FLECS/flecs.h	/^    int32_t remaining;$/;"	m	struct:ecs_page_iter_t	typeref:typename:int32_t
rematch_count	$FLECS/$FLECS/flecs.c	/^    int32_t rematch_count;           \/* Track which tables were added during rematch *\/$/;"	m	struct:ecs_query_t	typeref:typename:int32_t	file:
rematch_count	$FLECS/$FLECS/flecs.h	/^        ecs_metric_t rematch_count;        \/**< Number of query rematches *\/$/;"	m	struct:ecs_world_stats_t::__anonb2bcda281408	typeref:typename:ecs_metric_t
rematch_count_total	$FLECS/$FLECS/flecs.h	/^    int64_t rematch_count_total;      \/**< Total number of rematches *\/$/;"	m	struct:ecs_world_info_t	typeref:typename:int64_t
rematch_time	$FLECS/$FLECS/flecs.h	/^        ecs_metric_t rematch_time;         \/**< Time spent on rematching. *\/$/;"	m	struct:ecs_world_stats_t::__anonb2bcda281508	typeref:typename:ecs_metric_t
rematch_time_total	$FLECS/$FLECS/flecs.h	/^    ecs_ftime_t rematch_time_total;   \/**< Time spent on query rematching *\/$/;"	m	struct:ecs_world_info_t	typeref:typename:ecs_ftime_t
remove	$FLECS/$FLECS/flecs.c	/^    ecs_graph_edges_t remove; $/;"	m	struct:ecs_graph_node_t	typeref:typename:ecs_graph_edges_t	file:
remove	$FLECS/$FLECS/flecs.h	/^inline void world::remove(flecs::entity_t second) const {$/;"	f	class:flecs::world	typeref:typename:void	signature:(flecs::entity_t second) const
remove_all	$FLECS/$FLECS/flecs.h	/^    void remove_all(id_t the_id) const {$/;"	f	struct:flecs::world	typeref:typename:void	signature:(id_t the_id) const
remove_count	$FLECS/$FLECS/flecs.h	/^        int64_t remove_count;          \/**< remove commands processed *\/$/;"	m	struct:ecs_world_info_t::__anonb2bcda280708	typeref:typename:int64_t
remove_flags	$FLECS/$FLECS/flecs.h	/^inline flecs::entity id::remove_flags(flecs::id_t flags) const {$/;"	f	class:flecs::id	typeref:typename:flecs::entity	signature:(flecs::id_t flags) const
remove_generation	$FLECS/$FLECS/flecs.h	/^inline flecs::entity id::remove_generation() const {$/;"	f	class:flecs::id	typeref:typename:flecs::entity	signature:() const
remove_pointer_t	$FLECS/$FLECS/flecs.h	/^using remove_pointer_t = typename std::remove_pointer<T>::type;$/;"	t	namespace:flecs	typeref:typename:std::remove_pointer<T>::type
remove_reference_t	$FLECS/$FLECS/flecs.h	/^using remove_reference_t = typename std::remove_reference<T>::type;$/;"	t	namespace:flecs	typeref:typename:std::remove_reference<T>::type
remove_second	$FLECS/$FLECS/flecs.h	/^    Self& remove_second(flecs::entity_t first) {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &	signature:(flecs::entity_t first)
removed	$FLECS/$FLECS/flecs.c	/^    ecs_vec_t removed;$/;"	m	struct:ecs_table_diff_builder_t	typeref:typename:ecs_vec_t	file:
req_len	$FLECS/$FLECS/flecs.c	/^    int32_t req_len;$/;"	m	struct:__anonb2bcda230908	typeref:typename:int32_t	file:
request_cache	$FLECS/$FLECS/flecs.c	/^    ecs_hashmap_t request_cache;$/;"	m	struct:ecs_http_server_t	typeref:typename:ecs_hashmap_t	file:
request_handled_error_count	$FLECS/$FLECS/flecs.h	/^        ecs_metric_t request_handled_error_count;$/;"	m	struct:ecs_world_stats_t::__anonb2bcda281708	typeref:typename:ecs_metric_t
request_handled_ok_count	$FLECS/$FLECS/flecs.h	/^        ecs_metric_t request_handled_ok_count;$/;"	m	struct:ecs_world_stats_t::__anonb2bcda281708	typeref:typename:ecs_metric_t
request_invalid_count	$FLECS/$FLECS/flecs.h	/^        ecs_metric_t request_invalid_count;$/;"	m	struct:ecs_world_stats_t::__anonb2bcda281708	typeref:typename:ecs_metric_t
request_not_handled_count	$FLECS/$FLECS/flecs.h	/^        ecs_metric_t request_not_handled_count;$/;"	m	struct:ecs_world_stats_t::__anonb2bcda281708	typeref:typename:ecs_metric_t
request_preflight_count	$FLECS/$FLECS/flecs.h	/^        ecs_metric_t request_preflight_count;$/;"	m	struct:ecs_world_stats_t::__anonb2bcda281708	typeref:typename:ecs_metric_t
request_received_count	$FLECS/$FLECS/flecs.h	/^        ecs_metric_t request_received_count;$/;"	m	struct:ecs_world_stats_t::__anonb2bcda281708	typeref:typename:ecs_metric_t
request_time	$FLECS/$FLECS/flecs.c	/^    double request_time; \/* time spent on requests in last stats interval *\/$/;"	m	struct:ecs_http_server_t	typeref:typename:double	file:
request_time_total	$FLECS/$FLECS/flecs.c	/^    double request_time_total; \/* total time spent on requests *\/$/;"	m	struct:ecs_http_server_t	typeref:typename:double	file:
requests	$FLECS/$FLECS/flecs.c	/^    ecs_sparse_t requests; \/* sparse<http_request_t> *\/$/;"	m	struct:ecs_http_server_t	typeref:typename:ecs_sparse_t	file:
requests_processed	$FLECS/$FLECS/flecs.c	/^    int32_t requests_processed; \/* requests processed in last stats interval *\/$/;"	m	struct:ecs_http_server_t	typeref:typename:int32_t	file:
requests_processed_total	$FLECS/$FLECS/flecs.c	/^    int32_t requests_processed_total; \/* total requests processed *\/$/;"	m	struct:ecs_http_server_t	typeref:typename:int32_t	file:
res	$FLECS/$FLECS/flecs.c	/^    char *res;$/;"	m	struct:__anonb2bcda230908	typeref:typename:char *	file:
res	$FLECS/$FLECS/flecs.h	/^    ecs_map_data_t *res;$/;"	m	struct:ecs_map_iter_t	typeref:typename:ecs_map_data_t *
reset	$FLECS/$FLECS/flecs.h	/^inline void reset() {$/;"	f	namespace:flecs	typeref:typename:void	signature:()
reset_clock	$FLECS/$FLECS/flecs.h	/^void reset_clock() const;$/;"	p	struct:flecs::world	typeref:typename:void	signature:() const
resize	$FLECS/$FLECS/flecs.h	/^    void (*resize)($/;"	m	struct:EcsOpaque	typeref:typename:void (*)(void * dst,size_t count)
rest	$FLECS/$FLECS/flecs.h	/^namespace rest {$/;"	n	namespace:flecs
rest_prev_log	$FLECS/$FLECS/flecs.c	/^static ecs_os_api_log_t rest_prev_log;$/;"	v	typeref:typename:ecs_os_api_log_t	file:
restore	$FLECS/$FLECS/flecs.h	/^    void restore() {$/;"	f	struct:flecs::snapshot	typeref:typename:void	signature:()
restore_filtered	$FLECS/$FLECS/flecs.c	/^void restore_filtered($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_snapshot_t * snapshot)
restore_unfiltered	$FLECS/$FLECS/flecs.c	/^void restore_unfiltered($/;"	f	typeref:typename:void	file:	signature:(ecs_world_t * world,ecs_snapshot_t * snapshot)
retain_period	$FLECS/$FLECS/flecs.c	/^    ecs_ftime_t retain_period;  \/* How long to retain the alert *\/$/;"	m	struct:EcsAlert	typeref:typename:ecs_ftime_t	file:
retain_period	$FLECS/$FLECS/flecs.h	/^    ecs_ftime_t retain_period;$/;"	m	struct:ecs_alert_desc_t	typeref:typename:ecs_ftime_t
return_type	$FLECS/$FLECS/flecs.h	/^    using return_type = ReturnType;$/;"	t	struct:flecs::_::function_traits_defs	typeref:typename:ReturnType
return_type_t	$FLECS/$FLECS/flecs.h	/^using return_type_t = typename _::function_traits<T>::return_type;$/;"	t	namespace:flecs	typeref:typename:_::function_traits<T>::return_type
rit	$FLECS/$FLECS/flecs.c	/^    ecs_rule_iter_t *rit;$/;"	m	struct:__anonb2bcda233408	typeref:typename:ecs_rule_iter_t *	file:
role	$FLECS/$FLECS/flecs.h	/^    Base& role(id_t role) {$/;"	f	struct:flecs::term_builder_i	typeref:typename:Base &	signature:(id_t role)
root	$FLECS/$FLECS/flecs.c	/^    ecs_table_t root;$/;"	m	struct:ecs_store_t	typeref:typename:ecs_table_t	file:
root	$FLECS/$FLECS/flecs.h	/^    ecs_expr_var_scope_t root;$/;"	m	struct:ecs_vars_t	typeref:typename:ecs_expr_var_scope_t
root_sep	$FLECS/$FLECS/flecs.h	/^    const char *root_sep; \/**< Optional, used for identifiers relative to root *\/$/;"	m	struct:ecs_entity_desc_t	typeref:typename:const char *
rounders	$FLECS/$FLECS/flecs.c	/^static const double rounders[MAX_PRECISION + 1] =$/;"	v	typeref:typename:const double[]	file:
row	$FLECS/$FLECS/flecs.c	/^    int32_t row;$/;"	m	struct:sort_helper_t	typeref:typename:int32_t	file:
row	$FLECS/$FLECS/flecs.h	/^    uint32_t row;         \/* Table row of the entity *\/$/;"	m	struct:ecs_record_t	typeref:typename:uint32_t
row_iterator	$FLECS/$FLECS/flecs.h	/^    using row_iterator = _::range_iterator<size_t>;$/;"	t	struct:flecs::iter	typeref:typename:_::range_iterator<size_t>
rule	$FLECS/$FLECS/flecs.c	/^    const ecs_rule_t *rule;       \/* Reference to rule *\/$/;"	m	struct:__anonb2bcda233408	typeref:typename:const ecs_rule_t *	file:
rule	$FLECS/$FLECS/flecs.h	/^struct rule final : rule_base, iterable<Components...> {$/;"	s	namespace:flecs
rule_base	$FLECS/$FLECS/flecs.h	/^struct rule_base {$/;"	s	namespace:flecs
rule_builder	$FLECS/$FLECS/flecs.h	/^struct rule_builder final : _::rule_builder_base<Components...> {$/;"	s	namespace:flecs
rule_builder_base	$FLECS/$FLECS/flecs.h	/^    using rule_builder_base = builder<$/;"	t	namespace:flecs::_	typeref:typename:builder<rule,ecs_filter_desc_t,rule_builder<Components...>,filter_builder_i,Components...>
rule_str	$FLECS/$FLECS/flecs.h	/^    flecs::string rule_str() const {$/;"	f	struct:flecs::rule_base	typeref:typename:flecs::string	signature:() const
rule_t	$FLECS/$FLECS/flecs.h	/^using rule_t = ecs_rule_t;$/;"	t	namespace:flecs	typeref:typename:ecs_rule_t
rule_vars	$FLECS/$FLECS/flecs.c	/^    const ecs_rule_var_t *rule_vars; \/* Reference to rule variable array *\/$/;"	m	struct:__anonb2bcda233408	typeref:typename:const ecs_rule_var_t *	file:
rule_vars	$FLECS/$FLECS/flecs.h	/^    const struct ecs_rule_var_t *rule_vars;$/;"	m	struct:ecs_rule_iter_t	typeref:typename:const struct ecs_rule_var_t *
run	$FLECS/$FLECS/flecs.c	/^    ecs_run_action_t run;           \/* See ecs_system_desc_t *\/$/;"	m	struct:ecs_system_t	typeref:typename:ecs_run_action_t	file:
run	$FLECS/$FLECS/flecs.h	/^    system_runner_fluent run(ecs_ftime_t delta_time = 0.0f, void *param = nullptr) const {$/;"	f	struct:flecs::system	typeref:typename:system_runner_fluent	signature:(ecs_ftime_t delta_time=0.0f,void * param=nullptr) const
run_action	$FLECS/$FLECS/flecs.c	/^static ecs_app_run_action_t run_action = flecs_default_run_action;$/;"	v	typeref:typename:ecs_app_run_action_t	file:
run_add	$FLECS/$FLECS/flecs.h	/^    static void run_add(ecs_iter_t *iter) {$/;"	f	struct:flecs::_::each_delegate	typeref:typename:void	signature:(ecs_iter_t * iter)
run_pipeline	$FLECS/$FLECS/flecs.h	/^void run_pipeline(ecs_ftime_t delta_time = 0.0) const;$/;"	p	struct:flecs::world	typeref:typename:void	signature:(ecs_ftime_t delta_time=0.0) const
run_post_frame	$FLECS/$FLECS/flecs.h	/^    void run_post_frame(ecs_fini_action_t action, void *ctx) const {$/;"	f	struct:flecs::world	typeref:typename:void	signature:(ecs_fini_action_t action,void * ctx) const
run_remove	$FLECS/$FLECS/flecs.h	/^    static void run_remove(ecs_iter_t *iter) {$/;"	f	struct:flecs::_::each_delegate	typeref:typename:void	signature:(ecs_iter_t * iter)
run_set	$FLECS/$FLECS/flecs.h	/^    static void run_set(ecs_iter_t *iter) {$/;"	f	struct:flecs::_::each_delegate	typeref:typename:void	signature:(ecs_iter_t * iter)
run_worker	$FLECS/$FLECS/flecs.h	/^    system_runner_fluent run_worker($/;"	f	struct:flecs::system	typeref:typename:system_runner_fluent	signature:(int32_t stage_current,int32_t stage_count,ecs_ftime_t delta_time=0.0f,void * param=nullptr) const
running	$FLECS/$FLECS/flecs.c	/^    bool running;$/;"	m	struct:ecs_http_server_t	typeref:typename:bool	file:
s	$FLECS/$FLECS/flecs.c	/^        int64_t s;$/;"	m	union:flecs_ito_::__anonb2bcda23040a	typeref:typename:int64_t	file:
s_alignment	$FLECS/$FLECS/flecs.h	/^template <typename T> size_t        cpp_type_impl<T>::s_alignment;$/;"	m	class:flecs::_::cpp_type_impl<T>	typeref:typename:size_t
s_allow_tag	$FLECS/$FLECS/flecs.h	/^template <typename T> bool          cpp_type_impl<T>::s_allow_tag( true );$/;"	p	class:flecs::_::cpp_type_impl	typeref:typename:bool	signature:(true)
s_id	$FLECS/$FLECS/flecs.h	/^template <typename T> entity_t      cpp_type_impl<T>::s_id;$/;"	m	class:flecs::_::cpp_type_impl<T>	typeref:typename:entity_t
s_reset_count	$FLECS/$FLECS/flecs.h	/^template <typename T> int32_t       cpp_type_impl<T>::s_reset_count;$/;"	m	class:flecs::_::cpp_type_impl<T>	typeref:typename:int32_t
s_size	$FLECS/$FLECS/flecs.h	/^template <typename T> size_t        cpp_type_impl<T>::s_size;$/;"	m	class:flecs::_::cpp_type_impl<T>	typeref:typename:size_t
scope	$FLECS/$FLECS/flecs.c	/^    int32_t scope; \/* Nesting level of query scopes *\/$/;"	m	struct:__anonb2bcda233308	typeref:typename:int32_t	file:
scope	$FLECS/$FLECS/flecs.h	/^inline flecs::scoped_world world::scope(id_t parent) const {$/;"	f	class:flecs::world	typeref:typename:flecs::scoped_world	signature:(id_t parent) const
scope_assign_stmt	$FLECS/$FLECS/flecs.c	/^    bool scope_assign_stmt;$/;"	m	struct:__anonb2bcda231908	typeref:typename:bool	file:
scope_close	$FLECS/$FLECS/flecs.h	/^    Base& scope_close() {$/;"	f	struct:flecs::filter_builder_i	typeref:typename:Base &	signature:()
scope_is_not	$FLECS/$FLECS/flecs.c	/^    ecs_flags32_t scope_is_not; \/* Whether scope is prefixed with not *\/$/;"	m	struct:__anonb2bcda233308	typeref:typename:ecs_flags32_t	file:
scope_open	$FLECS/$FLECS/flecs.h	/^    Base& scope_open() {$/;"	f	struct:flecs::filter_builder_i	typeref:typename:Base &	signature:()
scoped_world	$FLECS/$FLECS/flecs.h	/^struct scoped_world : world {$/;"	s	namespace:flecs
script	$FLECS/$FLECS/flecs.h	/^    char *script;$/;"	m	struct:EcsScript	typeref:typename:char *
sec	$FLECS/$FLECS/flecs.h	/^    uint32_t sec;$/;"	m	struct:ecs_time_t	typeref:typename:uint32_t
second	$FLECS/$FLECS/flecs.c	/^    ecs_rule_ref_t second;$/;"	m	struct:ecs_rule_op_t	typeref:typename:ecs_rule_ref_t	file:
second	$FLECS/$FLECS/flecs.h	/^inline flecs::entity id::second() const {$/;"	f	class:flecs::id	typeref:typename:flecs::entity	signature:() const
second_arg	$FLECS/$FLECS/flecs.h	/^struct second_arg {$/;"	s	namespace:flecs
second_arg_impl	$FLECS/$FLECS/flecs.h	/^struct second_arg_impl<Func, _::arg_list<First, T, Args ...> > {$/;"	s	namespace:flecs
second_arg_t	$FLECS/$FLECS/flecs.h	/^using second_arg_t = typename second_arg<Func>::type;$/;"	t	namespace:flecs	typeref:typename:second_arg<Func>::type
self	$FLECS/$FLECS/flecs.c	/^    ecs_world_t *self;$/;"	m	struct:ecs_world_t	typeref:typename:ecs_world_t *	file:
self	$FLECS/$FLECS/flecs.h	/^    Base& self() {$/;"	f	struct:flecs::term_id_builder_i	typeref:typename:Base &	signature:()
self_index	$FLECS/$FLECS/flecs.h	/^    ecs_id_record_t *self_index;$/;"	m	struct:ecs_term_iter_t	typeref:typename:ecs_id_record_t *
self_up	$FLECS/$FLECS/flecs.c	/^    ecs_map_t self_up;               \/* map<trigger_id, trigger_t> *\/$/;"	m	struct:ecs_event_id_record_t	typeref:typename:ecs_map_t	file:
send_error_count	$FLECS/$FLECS/flecs.h	/^        ecs_metric_t send_error_count;$/;"	m	struct:ecs_world_stats_t::__anonb2bcda281708	typeref:typename:ecs_metric_t
send_ok_count	$FLECS/$FLECS/flecs.h	/^        ecs_metric_t send_ok_count;$/;"	m	struct:ecs_world_stats_t::__anonb2bcda281708	typeref:typename:ecs_metric_t
send_queue	$FLECS/$FLECS/flecs.c	/^    ecs_http_send_queue_t send_queue;$/;"	m	struct:ecs_http_server_t	typeref:typename:ecs_http_send_queue_t	file:
send_queue_wait_ms	$FLECS/$FLECS/flecs.h	/^    int32_t send_queue_wait_ms;       \/**< Send queue wait time when empty *\/$/;"	m	struct:__anonb2bcda280d08	typeref:typename:int32_t
sep	$FLECS/$FLECS/flecs.h	/^    const char *sep;      \/**< Optional custom separator for hierarchical names.$/;"	m	struct:ecs_entity_desc_t	typeref:typename:const char *
separator	$FLECS/$FLECS/flecs.h	/^    const char *separator;$/;"	m	struct:ecs_strbuf_list_elem	typeref:typename:const char *
serialize	$FLECS/$FLECS/flecs.h	/^using serialize = int(*)(const serializer *, const T*);$/;"	t	namespace:flecs
serialize_alerts	$FLECS/$FLECS/flecs.h	/^    bool serialize_alerts;     \/**< Serialize active alerts for entity *\/$/;"	m	struct:ecs_entity_to_json_desc_t	typeref:typename:bool
serialize_base	$FLECS/$FLECS/flecs.h	/^    bool serialize_base;       \/**< Serialize base components *\/$/;"	m	struct:ecs_entity_to_json_desc_t	typeref:typename:bool
serialize_brief	$FLECS/$FLECS/flecs.h	/^    bool serialize_brief;      \/**< Serialize brief doc description *\/$/;"	m	struct:ecs_entity_to_json_desc_t	typeref:typename:bool
serialize_builtin	$FLECS/$FLECS/flecs.h	/^    bool serialize_builtin;    \/**< Exclude flecs modules & contents *\/$/;"	m	struct:ecs_world_to_json_desc_t	typeref:typename:bool
serialize_color	$FLECS/$FLECS/flecs.h	/^    bool serialize_color;      \/**< Serialize doc color *\/$/;"	m	struct:ecs_entity_to_json_desc_t	typeref:typename:bool
serialize_colors	$FLECS/$FLECS/flecs.h	/^    bool serialize_colors;          \/**< Serialize doc color for entities *\/$/;"	m	struct:ecs_iter_to_json_desc_t	typeref:typename:bool
serialize_entities	$FLECS/$FLECS/flecs.h	/^    bool serialize_entities;        \/**< Serialize entities (for This terms) *\/$/;"	m	struct:ecs_iter_to_json_desc_t	typeref:typename:bool
serialize_entity_ids	$FLECS/$FLECS/flecs.h	/^    bool serialize_entity_ids;      \/**< Serialize numerical ids for entities *\/$/;"	m	struct:ecs_iter_to_json_desc_t	typeref:typename:bool
serialize_entity_labels	$FLECS/$FLECS/flecs.h	/^    bool serialize_entity_labels;   \/**< Serialize doc name for entities *\/$/;"	m	struct:ecs_iter_to_json_desc_t	typeref:typename:bool
serialize_entity_names	$FLECS/$FLECS/flecs.h	/^    bool serialize_entity_names;    \/**< Serialize names (not paths) for entities *\/$/;"	m	struct:ecs_iter_to_json_desc_t	typeref:typename:bool
serialize_hidden	$FLECS/$FLECS/flecs.h	/^    bool serialize_hidden;     \/**< Serialize ids hidden by override *\/$/;"	m	struct:ecs_entity_to_json_desc_t	typeref:typename:bool
serialize_id_labels	$FLECS/$FLECS/flecs.h	/^    bool serialize_id_labels;  \/**< Serialize labels of (component) ids *\/$/;"	m	struct:ecs_entity_to_json_desc_t	typeref:typename:bool
serialize_ids	$FLECS/$FLECS/flecs.h	/^    bool serialize_ids;        \/**< Serialize (component) ids *\/$/;"	m	struct:ecs_entity_to_json_desc_t	typeref:typename:bool
serialize_is_set	$FLECS/$FLECS/flecs.h	/^    bool serialize_is_set;          \/**< Serialize is_set (for optional terms) *\/$/;"	m	struct:ecs_iter_to_json_desc_t	typeref:typename:bool
serialize_label	$FLECS/$FLECS/flecs.h	/^    bool serialize_label;      \/**< Serialize doc name *\/$/;"	m	struct:ecs_entity_to_json_desc_t	typeref:typename:bool
serialize_link	$FLECS/$FLECS/flecs.h	/^    bool serialize_link;       \/**< Serialize doc link (URL) *\/$/;"	m	struct:ecs_entity_to_json_desc_t	typeref:typename:bool
serialize_matches	$FLECS/$FLECS/flecs.h	/^    bool serialize_matches;    \/**< Serialize which queries entity matches with *\/$/;"	m	struct:ecs_entity_to_json_desc_t	typeref:typename:bool
serialize_modules	$FLECS/$FLECS/flecs.h	/^    bool serialize_modules;    \/**< Exclude modules & contents *\/$/;"	m	struct:ecs_world_to_json_desc_t	typeref:typename:bool
serialize_path	$FLECS/$FLECS/flecs.h	/^    bool serialize_path;       \/**< Serialize full pathname *\/$/;"	m	struct:ecs_entity_to_json_desc_t	typeref:typename:bool
serialize_private	$FLECS/$FLECS/flecs.h	/^    bool serialize_private;    \/**< Serialize private components *\/$/;"	m	struct:ecs_entity_to_json_desc_t	typeref:typename:bool
serialize_refs	$FLECS/$FLECS/flecs.h	/^    ecs_entity_t serialize_refs; \/**< Serialize references (incoming edges) for relationship *\/$/;"	m	struct:ecs_entity_to_json_desc_t	typeref:typename:ecs_entity_t
serialize_sources	$FLECS/$FLECS/flecs.h	/^    bool serialize_sources;         \/**< Serialize sources *\/$/;"	m	struct:ecs_iter_to_json_desc_t	typeref:typename:bool
serialize_t	$FLECS/$FLECS/flecs.h	/^using serialize_t = ecs_meta_serialize_t;$/;"	t	namespace:flecs	typeref:typename:ecs_meta_serialize_t
serialize_table	$FLECS/$FLECS/flecs.h	/^    bool serialize_table;           \/**< Serialize entire table vs. matched components *\/$/;"	m	struct:ecs_iter_to_json_desc_t	typeref:typename:bool
serialize_term_ids	$FLECS/$FLECS/flecs.h	/^    bool serialize_term_ids;        \/**< Serialize query term component ids *\/$/;"	m	struct:ecs_iter_to_json_desc_t	typeref:typename:bool
serialize_term_labels	$FLECS/$FLECS/flecs.h	/^    bool serialize_term_labels;     \/**< Serialize query term component id labels *\/$/;"	m	struct:ecs_iter_to_json_desc_t	typeref:typename:bool
serialize_type_info	$FLECS/$FLECS/flecs.h	/^    bool serialize_type_info;  \/**< Serialize type info (requires serialize_values) *\/$/;"	m	struct:ecs_entity_to_json_desc_t	typeref:typename:bool
serialize_values	$FLECS/$FLECS/flecs.h	/^    bool serialize_values;     \/**< Serialize component values *\/$/;"	m	struct:ecs_entity_to_json_desc_t	typeref:typename:bool
serialize_variable_ids	$FLECS/$FLECS/flecs.h	/^    bool serialize_variable_ids;    \/**< Serialize numerical ids for variables *\/$/;"	m	struct:ecs_iter_to_json_desc_t	typeref:typename:bool
serialize_variable_labels	$FLECS/$FLECS/flecs.h	/^    bool serialize_variable_labels; \/**< Serialize doc name for variables *\/$/;"	m	struct:ecs_iter_to_json_desc_t	typeref:typename:bool
serialize_variables	$FLECS/$FLECS/flecs.h	/^    bool serialize_variables;       \/**< Serialize variables *\/$/;"	m	struct:ecs_iter_to_json_desc_t	typeref:typename:bool
serializer	$FLECS/$FLECS/flecs.h	/^using serializer = ecs_serializer_t;$/;"	t	namespace:flecs	typeref:typename:ecs_serializer_t
server	$FLECS/$FLECS/flecs.h	/^    ecs_http_server_t *server;$/;"	m	struct:__anonb2bcda280808	typeref:typename:ecs_http_server_t *
set	$FLECS/$FLECS/flecs.h	/^inline void world::set(const Func& func) const {$/;"	f	class:flecs::world	typeref:typename:void	signature:(const Func & func) const
set_T	$FLECS/$FLECS/flecs.c	/^#define set_T(/;"	d	file:	signature:(T,ptr,value)
set_alias	$FLECS/$FLECS/flecs.h	/^    Self& set_alias(const char *name) {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &	signature:(const char * name)
set_automerge	$FLECS/$FLECS/flecs.h	/^    void set_automerge(bool automerge) const {$/;"	f	struct:flecs::world	typeref:typename:void	signature:(bool automerge) const
set_binding_ctx	$FLECS/$FLECS/flecs.h	/^    void set_binding_ctx(void* ctx, ecs_ctx_free_t ctx_free = nullptr) const {$/;"	f	struct:flecs::world	typeref:typename:void	signature:(void * ctx,ecs_ctx_free_t ctx_free=nullptr) const
set_bool	$FLECS/$FLECS/flecs.h	/^    int set_bool(bool value) {$/;"	f	struct:flecs::cursor	typeref:typename:int	signature:(bool value)
set_brief	$FLECS/$FLECS/flecs.h	/^inline void set_brief(flecs::entity& e, const char *description) {$/;"	f	namespace:flecs::doc	typeref:typename:void	signature:(flecs::entity & e,const char * description)
set_char	$FLECS/$FLECS/flecs.h	/^    int set_char(char value) {$/;"	f	struct:flecs::cursor	typeref:typename:int	signature:(char value)
set_count	$FLECS/$FLECS/flecs.h	/^        int64_t set_count;             \/**< set commands processed *\/$/;"	m	struct:ecs_world_info_t::__anonb2bcda280708	typeref:typename:int64_t
set_ctx	$FLECS/$FLECS/flecs.h	/^    void set_ctx(void* ctx, ecs_ctx_free_t ctx_free = nullptr) const {$/;"	f	struct:flecs::world	typeref:typename:void	signature:(void * ctx,ecs_ctx_free_t ctx_free=nullptr) const
set_detail	$FLECS/$FLECS/flecs.h	/^inline void set_detail(flecs::entity& e, const char *description) {$/;"	f	namespace:flecs::doc	typeref:typename:void	signature:(flecs::entity & e,const char * description)
set_doc_brief	$FLECS/$FLECS/flecs.h	/^Self& set_doc_brief(const char *brief) {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &	signature:(const char * brief)
set_doc_color	$FLECS/$FLECS/flecs.h	/^Self& set_doc_color(const char *link) {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &	signature:(const char * link)
set_doc_detail	$FLECS/$FLECS/flecs.h	/^Self& set_doc_detail(const char *detail) {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &	signature:(const char * detail)
set_doc_link	$FLECS/$FLECS/flecs.h	/^Self& set_doc_link(const char *link) {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &	signature:(const char * link)
set_doc_name	$FLECS/$FLECS/flecs.h	/^Self& set_doc_name(const char *name) {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &	signature:(const char * name)
set_entity	$FLECS/$FLECS/flecs.h	/^    int set_entity(flecs::entity_t value) {$/;"	f	struct:flecs::cursor	typeref:typename:int	signature:(flecs::entity_t value)
set_entity_range	$FLECS/$FLECS/flecs.h	/^    void set_entity_range(entity_t min, entity_t max) const {$/;"	f	struct:flecs::world	typeref:typename:void	signature:(entity_t min,entity_t max) const
set_float	$FLECS/$FLECS/flecs.h	/^    int set_float(double value) {$/;"	f	struct:flecs::cursor	typeref:typename:int	signature:(double value)
set_group	$FLECS/$FLECS/flecs.h	/^    iter_iterable<Components...>& set_group(uint64_t group_id) {$/;"	f	struct:flecs::iter_iterable	typeref:typename:iter_iterable<Components...> &	signature:(uint64_t group_id)
set_id	$FLECS/$FLECS/flecs.h	/^    int set_id(flecs::id_t value) {$/;"	f	struct:flecs::cursor	typeref:typename:int	signature:(flecs::id_t value)
set_index	$FLECS/$FLECS/flecs.h	/^    ecs_id_record_t *set_index;$/;"	m	struct:ecs_term_iter_t	typeref:typename:ecs_id_record_t *
set_int	$FLECS/$FLECS/flecs.h	/^    int set_int(int64_t value) {$/;"	f	struct:flecs::cursor	typeref:typename:int	signature:(int64_t value)
set_json	$FLECS/$FLECS/flecs.h	/^Self& set_json($/;"	f	struct:flecs::entity_builder	typeref:typename:Self &	signature:(flecs::id_t e,const char * json,flecs::from_json_desc_t * desc=nullptr)
set_json_second	$FLECS/$FLECS/flecs.h	/^Self& set_json_second($/;"	f	struct:flecs::entity_builder	typeref:typename:Self &	signature:(flecs::entity_t r,const char * json,flecs::from_json_desc_t * desc=nullptr)
set_level	$FLECS/$FLECS/flecs.h	/^inline void set_level(int level) {$/;"	f	namespace:flecs::log	typeref:typename:void	signature:(int level)
set_link	$FLECS/$FLECS/flecs.h	/^inline void set_link(flecs::entity& e, const char *description) {$/;"	f	namespace:flecs::doc	typeref:typename:void	signature:(flecs::entity & e,const char * description)
set_lookup_path	$FLECS/$FLECS/flecs.h	/^    flecs::entity_t* set_lookup_path(const flecs::entity_t *search_path) const {$/;"	f	struct:flecs::world	typeref:typename:flecs::entity_t *	signature:(const flecs::entity_t * search_path) const
set_name	$FLECS/$FLECS/flecs.h	/^inline void set_name(flecs::entity& e, const char *name) {$/;"	f	namespace:flecs::doc	typeref:typename:void	signature:(flecs::entity & e,const char * name)
set_null	$FLECS/$FLECS/flecs.h	/^    int set_null() {$/;"	f	struct:flecs::cursor	typeref:typename:int	signature:()
set_observers	$FLECS/$FLECS/flecs.c	/^    ecs_map_t set_observers;         \/* map<trigger_id, trigger_t> *\/$/;"	m	struct:ecs_event_id_record_t	typeref:typename:ecs_map_t	file:
set_override	$FLECS/$FLECS/flecs.h	/^    Self& set_override(flecs::entity_t second, const First& val) {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &	signature:(flecs::entity_t second,const First & val)
set_pipeline	$FLECS/$FLECS/flecs.h	/^void set_pipeline(const flecs::entity pip) const;$/;"	p	struct:flecs::world	typeref:typename:void	signature:(const flecs::entity pip) const
set_ptr	$FLECS/$FLECS/flecs.h	/^    Self& set_ptr(entity_t comp, size_t size, const void *ptr) {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &	signature:(entity_t comp,size_t size,const void * ptr)
set_scope	$FLECS/$FLECS/flecs.h	/^inline flecs::entity world::set_scope(const flecs::entity_t s) const {$/;"	f	class:flecs::world	typeref:typename:flecs::entity	signature:(const flecs::entity_t s) const
set_second	$FLECS/$FLECS/flecs.h	/^    Self& set_second(entity_t first, const Second& value) {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &	signature:(entity_t first,const Second & value)
set_stage	$FLECS/$FLECS/flecs.h	/^inline flecs::entity entity_view::set_stage(world_t *stage) {$/;"	f	class:flecs::entity_view	typeref:typename:flecs::entity	signature:(world_t * stage)
set_stage_count	$FLECS/$FLECS/flecs.h	/^    void set_stage_count(int32_t stages) const {$/;"	f	struct:flecs::world	typeref:typename:void	signature:(int32_t stages) const
set_string	$FLECS/$FLECS/flecs.h	/^    int set_string(const char *value) {$/;"	f	struct:flecs::cursor	typeref:typename:int	signature:(const char * value)
set_string_literal	$FLECS/$FLECS/flecs.h	/^    int set_string_literal(const char *value) {$/;"	f	struct:flecs::cursor	typeref:typename:int	signature:(const char * value)
set_target_fps	$FLECS/$FLECS/flecs.h	/^void set_target_fps(ecs_ftime_t target_fps) const;$/;"	p	struct:flecs::world	typeref:typename:void	signature:(ecs_ftime_t target_fps) const
set_task_threads	$FLECS/$FLECS/flecs.h	/^void set_task_threads(int32_t task_threads) const;$/;"	p	struct:flecs::world	typeref:typename:void	signature:(int32_t task_threads) const
set_term	$FLECS/$FLECS/flecs.h	/^    void set_term(ecs_term_t *term) {$/;"	f	struct:flecs::term_builder_i	typeref:typename:void	signature:(ecs_term_t * term)
set_threads	$FLECS/$FLECS/flecs.h	/^void set_threads(int32_t threads) const;$/;"	p	struct:flecs::world	typeref:typename:void	signature:(int32_t threads) const
set_tick_source	$FLECS/$FLECS/flecs.h	/^void set_tick_source(flecs::entity e);$/;"	p	struct:flecs::system	typeref:typename:void	signature:(flecs::entity e)
set_time_scale	$FLECS/$FLECS/flecs.h	/^void set_time_scale(ecs_ftime_t mul) const;$/;"	p	struct:flecs::world	typeref:typename:void	signature:(ecs_ftime_t mul) const
set_uint	$FLECS/$FLECS/flecs.h	/^    int set_uint(uint64_t value) {$/;"	f	struct:flecs::cursor	typeref:typename:int	signature:(uint64_t value)
set_var	$FLECS/$FLECS/flecs.h	/^iter_iterable<Components...>& set_var(const char *name, flecs::entity_t value) {$/;"	f	struct:flecs::iter_iterable	typeref:typename:iter_iterable<Components...> &	signature:(const char * name,flecs::entity_t value)
setthis	$FLECS/$FLECS/flecs.c	/^        ecs_rule_setthis_ctx_t setthis;$/;"	m	union:ecs_rule_op_ctx_t::__anonb2bcda23310a	typeref:typename:ecs_rule_setthis_ctx_t	file:
severity	$FLECS/$FLECS/flecs.h	/^    ecs_entity_t severity;$/;"	m	struct:ecs_alert_desc_t	typeref:typename:ecs_entity_t
severity_filter	$FLECS/$FLECS/flecs.h	/^    Base& severity_filter(flecs::id_t with, const char *var = nullptr) {$/;"	f	struct:flecs::alert_builder_i	typeref:typename:Base &	signature:(flecs::id_t with,const char * var=nullptr)
severity_filter_count	$FLECS/$FLECS/flecs.h	/^    int32_t severity_filter_count = 0;$/;"	m	struct:flecs::alert_builder_i	typeref:typename:int32_t
severity_filters	$FLECS/$FLECS/flecs.c	/^    ecs_vec_t severity_filters; \/* Severity filters *\/$/;"	m	struct:EcsAlert	typeref:typename:ecs_vec_t	file:
severity_filters	$FLECS/$FLECS/flecs.h	/^    ecs_alert_severity_filter_t severity_filters[ECS_ALERT_MAX_SEVERITY_FILTERS];$/;"	m	struct:ecs_alert_desc_t	typeref:typename:ecs_alert_severity_filter_t[]
shared	$FLECS/$FLECS/flecs.c	/^    bool shared;$/;"	m	struct:sort_helper_t	typeref:typename:bool	file:
shared_allocator	$FLECS/$FLECS/flecs.h	/^    bool shared_allocator;$/;"	m	struct:ecs_map_t	typeref:typename:bool
should_quit	$FLECS/$FLECS/flecs.h	/^    bool should_quit() const {$/;"	f	struct:flecs::world	typeref:typename:bool	signature:() const
should_run	$FLECS/$FLECS/flecs.c	/^    bool should_run;$/;"	m	struct:ecs_http_server_t	typeref:typename:bool	file:
sig	$FLECS/$FLECS/flecs.h	/^    struct sig {$/;"	s	namespace:flecs::_
signature_column_index	$FLECS/$FLECS/flecs.c	/^    int32_t signature_column_index;$/;"	m	struct:flecs_switch_term_t	typeref:typename:int32_t	file:
single_shot	$FLECS/$FLECS/flecs.h	/^    bool single_shot;            \/**< Is this a single shot timer *\/$/;"	m	struct:EcsTimer	typeref:typename:bool
singleton	$FLECS/$FLECS/flecs.h	/^inline flecs::entity world::singleton() const {$/;"	f	class:flecs::world	typeref:typename:flecs::entity	signature:() const
size	$FLECS/$FLECS/flecs.c	/^    int32_t size;               \/* Size of component *\/$/;"	m	struct:EcsAlert	typeref:typename:int32_t	file:
size	$FLECS/$FLECS/flecs.h	/^    std::size_t size() const {$/;"	f	struct:flecs::string	typeref:typename:std::size_t	signature:() const
sizes	$FLECS/$FLECS/flecs.h	/^    struct ecs_sparse_t sizes; \/* <size, block_allocator_t> *\/$/;"	m	struct:ecs_allocator_t	typeref:struct:ecs_sparse_t
skip	$FLECS/$FLECS/flecs.h	/^    void skip() {$/;"	f	struct:flecs::iter	typeref:typename:void	signature:()
skip_count	$FLECS/$FLECS/flecs.h	/^    int32_t skip_count;$/;"	m	struct:ecs_query_iter_t	typeref:typename:int32_t
skip_scope	$FLECS/$FLECS/flecs.c	/^const char* skip_scope(const char *ptr, meta_parse_ctx_t *ctx) {$/;"	f	typeref:typename:const char *	file:	signature:(const char * ptr,meta_parse_ctx_t * ctx)
sleep_	$FLECS/$FLECS/flecs.h	/^    ecs_os_api_sleep_t sleep_;$/;"	m	struct:ecs_os_api_t	typeref:typename:ecs_os_api_sleep_t
slot	$FLECS/$FLECS/flecs.h	/^    Self& slot() {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &	signature:()
slot_of	$FLECS/$FLECS/flecs.h	/^    Self& slot_of(entity_t second) {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &	signature:(entity_t second)
snapshot	$FLECS/$FLECS/flecs.h	/^struct snapshot final {$/;"	s	namespace:flecs
snapshot_create	$FLECS/$FLECS/flecs.c	/^ecs_snapshot_t* snapshot_create($/;"	f	typeref:typename:ecs_snapshot_t *	file:	signature:(const ecs_world_t * world,const ecs_entity_index_t * entity_index,ecs_iter_t * iter,ecs_iter_next_action_t next)
snapshot_t	$FLECS/$FLECS/flecs.h	/^using snapshot_t = ecs_snapshot_t;$/;"	t	namespace:flecs	typeref:typename:ecs_snapshot_t
snapshot_table	$FLECS/$FLECS/flecs.c	/^void snapshot_table($/;"	f	typeref:typename:void	file:	signature:(const ecs_world_t * world,ecs_snapshot_t * snapshot,ecs_table_t * table)
sock	$FLECS/$FLECS/flecs.c	/^    ecs_http_socket_t sock;$/;"	m	struct:ecs_http_server_t	typeref:typename:ecs_http_socket_t	file:
sort_helper_t	$FLECS/$FLECS/flecs.c	/^} sort_helper_t;$/;"	t	typeref:struct:sort_helper_t	file:
sort_table	$FLECS/$FLECS/flecs.c	/^    ecs_sort_table_action_t sort_table;$/;"	m	struct:ecs_query_t	typeref:typename:ecs_sort_table_action_t	file:
sort_table	$FLECS/$FLECS/flecs.h	/^    ecs_sort_table_action_t sort_table;$/;"	m	struct:ecs_query_desc_t	typeref:typename:ecs_sort_table_action_t
source_set	$FLECS/$FLECS/flecs.c	/^    ecs_flags32_t *source_set;    \/* Whether ecs_iter_t::sources is written by instruction *\/$/;"	m	struct:__anonb2bcda233408	typeref:typename:ecs_flags32_t *	file:
source_set	$FLECS/$FLECS/flecs.h	/^    ecs_flags32_t source_set;$/;"	m	struct:ecs_rule_iter_t	typeref:typename:ecs_flags32_t
sources	$FLECS/$FLECS/flecs.c	/^    ecs_entity_t *sources;           \/* Subjects (sources) of ids *\/$/;"	m	struct:ecs_query_table_match_t	typeref:typename:ecs_entity_t *	file:
sources	$FLECS/$FLECS/flecs.h	/^    ecs_entity_t *sources;        \/* Entity on which the id was matched (0 if same as entities)/;"	m	struct:ecs_iter_t	typeref:typename:ecs_entity_t *
sp	$FLECS/$FLECS/flecs.c	/^    int32_t sp;$/;"	m	struct:__anonb2bcda231908	typeref:typename:int32_t	file:
sp	$FLECS/$FLECS/flecs.h	/^    int16_t sp;$/;"	m	struct:ecs_stack_cursor_t	typeref:typename:int16_t
sparse	$FLECS/$FLECS/flecs.c	/^    int32_t *sparse;            \/* Sparse array with indices to dense array *\/$/;"	m	struct:ecs_page_t	typeref:typename:int32_t *	file:
sparse_chunk	$FLECS/$FLECS/flecs.c	/^    ecs_block_allocator_t sparse_chunk;$/;"	m	struct:ecs_world_allocators_t	typeref:typename:ecs_block_allocator_t	file:
sparse_first	$FLECS/$FLECS/flecs.h	/^    int32_t sparse_first;$/;"	m	struct:ecs_query_iter_t	typeref:typename:int32_t
sparse_smallest	$FLECS/$FLECS/flecs.h	/^    int32_t sparse_smallest;$/;"	m	struct:ecs_query_iter_t	typeref:typename:int32_t
speed	$FLECS/$FLECS/flecs.h	/^struct speed {$/;"	s	struct:flecs::units
src	$FLECS/$FLECS/flecs.c	/^    ecs_rule_ref_t src;$/;"	m	struct:ecs_rule_op_t	typeref:typename:ecs_rule_ref_t	file:
src	$FLECS/$FLECS/flecs.h	/^inline flecs::entity iter::src(int32_t index) const {$/;"	f	class:flecs::iter	typeref:typename:flecs::entity	signature:(int32_t index) const
src_vars	$FLECS/$FLECS/flecs.c	/^    ecs_var_id_t *src_vars;       \/* Array with ids to source variables for fields *\/$/;"	m	struct:ecs_rule_t	typeref:typename:ecs_var_id_t *	file:
srv	$FLECS/$FLECS/flecs.c	/^    ecs_http_server_t *srv;$/;"	m	struct:__anonb2bcda231a08	typeref:typename:ecs_http_server_t *	file:
stack	$FLECS/$FLECS/flecs.c	/^    ecs_stack_t stack;          \/* Temp memory used by deferred commands *\/$/;"	m	struct:ecs_commands_t	typeref:typename:ecs_stack_t	file:
stack_alloc_count	$FLECS/$FLECS/flecs.h	/^        ecs_metric_t stack_alloc_count;    \/**< Page allocations per frame *\/$/;"	m	struct:ecs_world_stats_t::__anonb2bcda281608	typeref:typename:ecs_metric_t
stack_cursor	$FLECS/$FLECS/flecs.h	/^    ecs_stack_cursor_t *stack_cursor; \/* Stack cursor to restore to *\/$/;"	m	struct:ecs_iter_cache_t	typeref:typename:ecs_stack_cursor_t *
stack_free_count	$FLECS/$FLECS/flecs.h	/^        ecs_metric_t stack_free_count;     \/**< Page frees per frame *\/$/;"	m	struct:ecs_world_stats_t::__anonb2bcda281608	typeref:typename:ecs_metric_t
stack_outstanding_alloc_count	$FLECS/$FLECS/flecs.h	/^        ecs_metric_t stack_outstanding_alloc_count; \/**< Difference between allocs & frees *\/$/;"	m	struct:ecs_world_stats_t::__anonb2bcda281608	typeref:typename:ecs_metric_t
stage	$FLECS/$FLECS/flecs.c	/^    ecs_stage_t *stage;$/;"	m	struct:ecs_value_stack_t	typeref:typename:ecs_stage_t *	file:
stage	$FLECS/$FLECS/flecs.h	/^    system_runner_fluent& stage(flecs::world& stage) {$/;"	f	struct:flecs::system_runner_fluent	typeref:typename:system_runner_fluent &	signature:(flecs::world & stage)
stage_count	$FLECS/$FLECS/flecs.c	/^    int32_t stage_count;             \/* Number of stages *\/$/;"	m	struct:ecs_world_t	typeref:typename:int32_t	file:
stages	$FLECS/$FLECS/flecs.c	/^    ecs_stage_t *stages;             \/* Stages *\/$/;"	m	struct:ecs_world_t	typeref:typename:ecs_stage_t *	file:
start	$FLECS/$FLECS/flecs.h	/^void start();$/;"	p	struct:flecs::system	typeref:typename:void	signature:()
state	$FLECS/$FLECS/flecs.c	/^    ecs_pipeline_state_t *state;$/;"	m	struct:EcsPipeline	typeref:typename:ecs_pipeline_state_t *	file:
stats	$FLECS/$FLECS/flecs.h	/^    ecs_world_stats_t stats;$/;"	m	struct:__anonb2bcda281908	typeref:typename:ecs_world_stats_t
stats_timeout	$FLECS/$FLECS/flecs.c	/^    double stats_timeout; \/* used for periodic reporting of statistics *\/$/;"	m	struct:ecs_http_server_t	typeref:typename:double	file:
status	$FLECS/$FLECS/flecs.h	/^    const char* status;         \/**< default = OK *\/$/;"	m	struct:__anonb2bcda280c08	typeref:typename:const char *
stop	$FLECS/$FLECS/flecs.h	/^void stop();$/;"	p	struct:flecs::system	typeref:typename:void	signature:()
storage	$FLECS/$FLECS/flecs.h	/^    ecs_filter_t *storage;$/;"	m	struct:ecs_filter_desc_t	typeref:typename:ecs_filter_t *
storage_columns	$FLECS/$FLECS/flecs.c	/^    int32_t *storage_columns;        \/* Mapping from query fields to storage columns *\/$/;"	m	struct:ecs_query_table_match_t	typeref:typename:int32_t *	file:
store	$FLECS/$FLECS/flecs.c	/^    ecs_store_t store;$/;"	m	struct:ecs_world_t	typeref:typename:ecs_store_t	file:
store_added	$FLECS/$FLECS/flecs.h	/^    static size_t store_added(IdArray& added, size_t elem, ecs_table_t *prev, $/;"	f	struct:flecs::_::entity_with_delegate_impl	typeref:typename:size_t	signature:(IdArray & added,size_t elem,ecs_table_t * prev,ecs_table_t * next,id_t id)
str	$FLECS/$FLECS/flecs.c	/^    ecs_strbuf_t *str;$/;"	m	struct:json_serializer_ctx_t	typeref:typename:ecs_strbuf_t *	file:
str	$FLECS/$FLECS/flecs.h	/^    flecs::string str() {$/;"	f	struct:flecs::stringstream	typeref:typename:flecs::string	signature:()
strdup_	$FLECS/$FLECS/flecs.h	/^    ecs_os_api_strdup_t strdup_;$/;"	m	struct:ecs_os_api_t	typeref:typename:ecs_os_api_strdup_t
string	$FLECS/$FLECS/flecs.h	/^struct string {$/;"	s	namespace:flecs
string_view	$FLECS/$FLECS/flecs.h	/^struct string_view : string {$/;"	s	namespace:flecs
stringstream	$FLECS/$FLECS/flecs.h	/^struct stringstream {$/;"	s	namespace:flecs
strip_generation	$FLECS/$FLECS/flecs.h	/^inline flecs::id_t strip_generation(flecs::entity_t e) {$/;"	f	namespace:flecs	typeref:typename:flecs::id_t	signature:(flecs::entity_t e)
subject	$FLECS/$FLECS/flecs.h	/^    ecs_entity_t subject;$/;"	m	struct:ecs_term_iter_t	typeref:typename:ecs_entity_t
subqueries	$FLECS/$FLECS/flecs.c	/^    ecs_vec_t subqueries;$/;"	m	struct:ecs_query_t	typeref:typename:ecs_vec_t	file:
super	$FLECS/$FLECS/flecs.h	/^    ecs_strbuf_element super;$/;"	m	struct:ecs_strbuf_element_str	typeref:typename:ecs_strbuf_element
sw_case	$FLECS/$FLECS/flecs.c	/^    ecs_entity_t sw_case; $/;"	m	struct:flecs_switch_term_t	typeref:typename:ecs_entity_t	file:
sw_column	$FLECS/$FLECS/flecs.c	/^    ecs_switch_t *sw_column;$/;"	m	struct:flecs_switch_term_t	typeref:typename:ecs_switch_t *	file:
sw_columns	$FLECS/$FLECS/flecs.c	/^    ecs_switch_t *sw_columns;        \/* Switch columns *\/$/;"	m	struct:ecs_table__t	typeref:typename:ecs_switch_t *	file:
sw_count	$FLECS/$FLECS/flecs.c	/^    int16_t sw_count;$/;"	m	struct:ecs_table__t	typeref:typename:int16_t	file:
sw_offset	$FLECS/$FLECS/flecs.c	/^    int32_t sw_offset;$/;"	m	struct:ecs_entity_filter_iter_t	typeref:typename:int32_t	file:
sw_smallest	$FLECS/$FLECS/flecs.c	/^    int32_t sw_smallest;$/;"	m	struct:ecs_entity_filter_iter_t	typeref:typename:int32_t	file:
sw_terms	$FLECS/$FLECS/flecs.c	/^    ecs_vec_t sw_terms;              \/* Terms with switch (union) entity filter *\/$/;"	m	struct:ecs_entity_filter_t	typeref:typename:ecs_vec_t	file:
symbol	$FLECS/$FLECS/flecs.h	/^    flecs::string_view symbol() const {$/;"	f	struct:flecs::entity_view	typeref:typename:flecs::string_view	signature:() const
symbol_name	$FLECS/$FLECS/flecs.h	/^template <> inline const char* symbol_name<uint8_t>() {$/;"	f	namespace:flecs::_	typeref:typename:const char *	signature:()
symbols	$FLECS/$FLECS/flecs.c	/^    ecs_hashmap_t symbols;$/;"	m	struct:ecs_world_t	typeref:typename:ecs_hashmap_t	file:
sync_cond	$FLECS/$FLECS/flecs.c	/^    ecs_os_cond_t sync_cond;         \/* Signal that worker thread job is done *\/$/;"	m	struct:ecs_world_t	typeref:typename:ecs_os_cond_t	file:
sync_mutex	$FLECS/$FLECS/flecs.c	/^    ecs_os_mutex_t sync_mutex;       \/* Mutex for job_cond *\/$/;"	m	struct:ecs_world_t	typeref:typename:ecs_os_mutex_t	file:
sync_points	$FLECS/$FLECS/flecs.h	/^    ecs_vec_t sync_points;$/;"	m	struct:ecs_pipeline_stats_t	typeref:typename:ecs_vec_t
system	$FLECS/$FLECS/flecs.h	/^struct system final : entity$/;"	s	namespace:flecs
system_builder	$FLECS/$FLECS/flecs.h	/^struct system_builder final : _::system_builder_base<Components...> {$/;"	s	namespace:flecs
system_builder_base	$FLECS/$FLECS/flecs.h	/^    using system_builder_base = node_builder<$/;"	t	namespace:flecs::_	typeref:typename:node_builder<system,ecs_system_desc_t,system_builder<Components...>,system_builder_i,Components...>
system_builder_i	$FLECS/$FLECS/flecs.h	/^struct system_builder_i : query_builder_i<Base, Components ...> {$/;"	s	namespace:flecs
system_count	$FLECS/$FLECS/flecs.h	/^    int32_t system_count;$/;"	m	struct:ecs_sync_stats_t	typeref:typename:int32_t
system_init	$FLECS/$FLECS/flecs.h	/^void system_init(flecs::world& world);$/;"	p	namespace:flecs::_	typeref:typename:void	signature:(flecs::world & world)
system_runner_fluent	$FLECS/$FLECS/flecs.h	/^struct system_runner_fluent {$/;"	s	namespace:flecs
system_stats	$FLECS/$FLECS/flecs.h	/^    ecs_map_t system_stats;$/;"	m	struct:ecs_pipeline_stats_t	typeref:typename:ecs_map_t
system_time	$FLECS/$FLECS/flecs.h	/^        ecs_metric_t system_time;          \/**< Time spent on running systems. *\/$/;"	m	struct:ecs_world_stats_t::__anonb2bcda281508	typeref:typename:ecs_metric_t
system_time_last	$FLECS/$FLECS/flecs.h	/^    double system_time_last;    \/**< Time spent in systems *\/$/;"	m	struct:__anonb2bcda281b08	typeref:typename:double
system_time_total	$FLECS/$FLECS/flecs.h	/^    ecs_ftime_t system_time_total;    \/**< Total time spent in systems *\/$/;"	m	struct:ecs_world_info_t	typeref:typename:ecs_ftime_t
systems	$FLECS/$FLECS/flecs.c	/^    ecs_vec_t systems;          \/* Vector with system ids *\/$/;"	m	struct:ecs_pipeline_state_t	typeref:typename:ecs_vec_t	file:
systems	$FLECS/$FLECS/flecs.h	/^    ecs_vec_t systems;$/;"	m	struct:ecs_pipeline_stats_t	typeref:typename:ecs_vec_t
systems_ran	$FLECS/$FLECS/flecs.h	/^        ecs_metric_t systems_ran;          \/**< Number of systems ran. *\/$/;"	m	struct:ecs_world_stats_t::__anonb2bcda281408	typeref:typename:ecs_metric_t
systems_ran_frame	$FLECS/$FLECS/flecs.h	/^    int64_t systems_ran_frame;        \/**< Total number of systems ran in last frame *\/$/;"	m	struct:ecs_world_info_t	typeref:typename:int64_t
t	$FLECS/$FLECS/flecs.h	/^    int32_t t;$/;"	m	struct:ecs_world_stats_t	typeref:typename:int32_t
t_next	$FLECS/$FLECS/flecs.c	/^int32_t t_next($/;"	f	typeref:typename:int32_t	file:	signature:(int32_t t)
t_prev	$FLECS/$FLECS/flecs.c	/^int32_t t_prev($/;"	f	typeref:typename:int32_t	file:	signature:(int32_t t)
table	$FLECS/$FLECS/flecs.c	/^    ecs_table_t *table;$/;"	m	struct:ecs_table_leaf_t	typeref:typename:ecs_table_t *	file:
table	$FLECS/$FLECS/flecs.h	/^struct table {$/;"	s	namespace:flecs
table_count	$FLECS/$FLECS/flecs.h	/^    int32_t table_count;  \/**< Number of tables in group *\/$/;"	m	struct:ecs_query_group_info_t	typeref:typename:int32_t
table_create_total	$FLECS/$FLECS/flecs.h	/^    int64_t table_create_total;       \/**< Total number of times a table was created *\/$/;"	m	struct:ecs_world_info_t	typeref:typename:int64_t
table_delete_total	$FLECS/$FLECS/flecs.h	/^    int64_t table_delete_total;       \/**< Total number of times a table was deleted *\/$/;"	m	struct:ecs_world_info_t	typeref:typename:int64_t
table_diff	$FLECS/$FLECS/flecs.c	/^    ecs_block_allocator_t table_diff;$/;"	m	struct:ecs_world_allocators_t	typeref:typename:ecs_block_allocator_t	file:
table_id	$FLECS/$FLECS/flecs.c	/^    uint64_t table_id;$/;"	m	struct:ecs_query_table_t	typeref:typename:uint64_t	file:
table_map	$FLECS/$FLECS/flecs.c	/^    ecs_hashmap_t table_map;         \/* hashmap<ecs_type_t, ecs_table_t*> *\/$/;"	m	struct:ecs_store_t	typeref:typename:ecs_hashmap_t	file:
table_range	$FLECS/$FLECS/flecs.h	/^struct table_range : table {$/;"	s	namespace:flecs
table_slices	$FLECS/$FLECS/flecs.c	/^    ecs_vec_t table_slices;$/;"	m	struct:ecs_query_t	typeref:typename:ecs_vec_t	file:
table_state	$FLECS/$FLECS/flecs.c	/^    int32_t table_state;$/;"	m	struct:flecs_flat_monitor_t	typeref:typename:int32_t	file:
table_t	$FLECS/$FLECS/flecs.h	/^using table_t = ecs_table_t;$/;"	t	namespace:flecs	typeref:typename:ecs_table_t
tables	$FLECS/$FLECS/flecs.c	/^    ecs_vec_t tables;$/;"	m	struct:ecs_snapshot_t	typeref:typename:ecs_vec_t	file:
tables	$FLECS/$FLECS/flecs.h	/^    } tables;$/;"	m	struct:ecs_world_stats_t	typeref:struct:ecs_world_stats_t::__anonb2bcda281108
tag_count	$FLECS/$FLECS/flecs.h	/^        ecs_metric_t tag_count;           \/**< Number of tag ids (ids without data) *\/$/;"	m	struct:ecs_world_stats_t::__anonb2bcda281008	typeref:typename:ecs_metric_t
tag_id_count	$FLECS/$FLECS/flecs.h	/^    int32_t tag_id_count;             \/**< Number of tag (no data) ids in the world *\/$/;"	m	struct:ecs_world_info_t	typeref:typename:int32_t
tail	$FLECS/$FLECS/flecs.c	/^    int32_t tail;$/;"	m	struct:ecs_http_send_queue_t	typeref:typename:int32_t	file:
tail_cursor	$FLECS/$FLECS/flecs.c	/^    ecs_stack_cursor_t *tail_cursor;$/;"	m	struct:ecs_stack_t	typeref:typename:ecs_stack_cursor_t *	file:
tail_page	$FLECS/$FLECS/flecs.c	/^    ecs_stack_page_t *tail_page;$/;"	m	struct:ecs_stack_t	typeref:typename:ecs_stack_page_t *	file:
take	$FLECS/$FLECS/flecs.h	/^    void take(const F& f) {$/;"	f	struct:flecs::snapshot	typeref:typename:void	signature:(const F & f)
target	$FLECS/$FLECS/flecs.h	/^inline flecs::entity world::target(int32_t index) const$/;"	f	class:flecs::world	typeref:typename:flecs::entity	signature:(int32_t index) const
target_count	$FLECS/$FLECS/flecs.c	/^    int32_t target_count;$/;"	m	struct:ecs_entity_filter_iter_t	typeref:typename:int32_t	file:
target_for	$FLECS/$FLECS/flecs.h	/^inline flecs::entity entity_view::target_for(flecs::entity_t relationship) const {$/;"	f	class:flecs::entity_view	typeref:typename:flecs::entity	signature:(flecs::entity_t relationship) const
target_fps	$FLECS/$FLECS/flecs.h	/^    ecs_ftime_t target_fps;   \/**< Target FPS. *\/$/;"	m	struct:ecs_app_desc_t	typeref:typename:ecs_ftime_t
target_offset	$FLECS/$FLECS/flecs.c	/^    ecs_map_t target_offset;         \/**< Pair target to metric type offset *\/$/;"	m	struct:__anonb2bcda230e08	typeref:typename:ecs_map_t	file:
targets	$FLECS/$FLECS/flecs.c	/^    ecs_map_t targets;               \/**< Map of counters for each target *\/$/;"	m	struct:__anonb2bcda230f08	typeref:typename:ecs_map_t	file:
targets	$FLECS/$FLECS/flecs.h	/^    metric_builder& targets(bool value = true) {$/;"	f	struct:flecs::metric_builder	typeref:typename:metric_builder &	signature:(bool value=true)
task	$FLECS/$FLECS/flecs.h	/^    bool task;                     \/**< Is system a task *\/$/;"	m	struct:ecs_system_stats_t	typeref:typename:bool
task_join_	$FLECS/$FLECS/flecs.h	/^    ecs_os_api_thread_join_t task_join_;$/;"	m	struct:ecs_os_api_t	typeref:typename:ecs_os_api_thread_join_t
task_new_	$FLECS/$FLECS/flecs.h	/^    ecs_os_api_thread_new_t task_new_;$/;"	m	struct:ecs_os_api_t	typeref:typename:ecs_os_api_thread_new_t
temperature	$FLECS/$FLECS/flecs.h	/^struct temperature {$/;"	s	struct:flecs::units
term	$FLECS/$FLECS/flecs.c	/^    ecs_term_t *term;$/;"	m	struct:flecs_flat_table_term_t	typeref:typename:ecs_term_t *	file:
term	$FLECS/$FLECS/flecs.h	/^struct term final : term_builder_i<term> {$/;"	s	namespace:flecs
term_at	$FLECS/$FLECS/flecs.h	/^    Base& term_at(int32_t term_index) {$/;"	f	struct:flecs::filter_builder_i	typeref:typename:Base &	signature:(int32_t term_index)
term_builder_i	$FLECS/$FLECS/flecs.h	/^struct term_builder_i : term_id_builder_i<Base> {$/;"	s	namespace:flecs
term_count	$FLECS/$FLECS/flecs.h	/^    int8_t term_count;        \/**< Number of elements in terms array *\/$/;"	m	struct:ecs_filter_t	typeref:typename:int8_t
term_id_builder_i	$FLECS/$FLECS/flecs.h	/^struct term_id_builder_i {$/;"	s	namespace:flecs
term_index	$FLECS/$FLECS/flecs.c	/^    int8_t term_index;         \/* Query term corresponding with operation *\/$/;"	m	struct:ecs_rule_op_t	typeref:typename:int8_t	file:
term_index	$FLECS/$FLECS/flecs.h	/^    int32_t term_index;$/;"	m	struct:ecs_observer_desc_t	typeref:typename:int32_t
term_iter	$FLECS/$FLECS/flecs.h	/^    ecs_term_iter_t term_iter;$/;"	m	struct:ecs_filter_iter_t	typeref:typename:ecs_term_iter_t
term_iter_init	$FLECS/$FLECS/flecs.c	/^void term_iter_init($/;"	f	typeref:typename:void	file:	signature:(const ecs_world_t * world,ecs_term_t * term,ecs_term_iter_t * iter,bool empty_tables)
term_iter_init_no_data	$FLECS/$FLECS/flecs.c	/^void term_iter_init_no_data($/;"	f	typeref:typename:void	file:	signature:(ecs_term_iter_t * iter)
term_iter_init_w_idr	$FLECS/$FLECS/flecs.c	/^void term_iter_init_w_idr($/;"	f	typeref:typename:void	file:	signature:(const ecs_term_t * term,ecs_term_iter_t * iter,ecs_id_record_t * idr,bool empty_tables)
term_iter_init_wildcard	$FLECS/$FLECS/flecs.c	/^void term_iter_init_wildcard($/;"	f	typeref:typename:void	file:	signature:(const ecs_world_t * world,ecs_term_iter_t * iter,bool empty_tables)
term_ptr	$FLECS/$FLECS/flecs.h	/^struct term_ptr {$/;"	s	namespace:flecs::_
term_ptrs	$FLECS/$FLECS/flecs.h	/^struct term_ptrs {$/;"	s	namespace:flecs::_
terms	$FLECS/$FLECS/flecs.h	/^    ecs_term_t terms[FLECS_TERM_DESC_MAX];$/;"	m	struct:ecs_filter_desc_t	typeref:typename:ecs_term_t[]
terms_buffer	$FLECS/$FLECS/flecs.h	/^    ecs_term_t *terms_buffer;$/;"	m	struct:ecs_filter_desc_t	typeref:typename:ecs_term_t *
terms_buffer_count	$FLECS/$FLECS/flecs.h	/^    int32_t terms_buffer_count;$/;"	m	struct:ecs_filter_desc_t	typeref:typename:int32_t
thread	$FLECS/$FLECS/flecs.c	/^    ecs_os_thread_t thread;$/;"	m	struct:ecs_http_server_t	typeref:typename:ecs_os_thread_t	file:
thread_ctx	$FLECS/$FLECS/flecs.c	/^    ecs_world_t *thread_ctx;         \/* Points to stage when a thread stage *\/$/;"	m	struct:ecs_stage_t	typeref:typename:ecs_world_t *	file:
thread_join_	$FLECS/$FLECS/flecs.h	/^    ecs_os_api_thread_join_t thread_join_;$/;"	m	struct:ecs_os_api_t	typeref:typename:ecs_os_api_thread_join_t
thread_new_	$FLECS/$FLECS/flecs.h	/^    ecs_os_api_thread_new_t thread_new_;$/;"	m	struct:ecs_os_api_t	typeref:typename:ecs_os_api_thread_new_t
thread_self_	$FLECS/$FLECS/flecs.h	/^    ecs_os_api_thread_self_t thread_self_;$/;"	m	struct:ecs_os_api_t	typeref:typename:ecs_os_api_thread_self_t
threads	$FLECS/$FLECS/flecs.h	/^    int32_t threads;          \/**< Number of threads. *\/$/;"	m	struct:ecs_app_desc_t	typeref:typename:int32_t
ti	$FLECS/$FLECS/flecs.c	/^    ecs_type_info_t *ti;             \/* Component type info *\/$/;"	m	struct:ecs_column_t	typeref:typename:ecs_type_info_t *	file:
tick	$FLECS/$FLECS/flecs.h	/^    bool tick;                 \/**< True if providing tick *\/$/;"	m	struct:EcsTickSource	typeref:typename:bool
tick_count	$FLECS/$FLECS/flecs.h	/^    int32_t tick_count;          \/**< Number of times the rate filter ticked *\/$/;"	m	struct:EcsRateFilter	typeref:typename:int32_t
tick_source	$FLECS/$FLECS/flecs.c	/^    ecs_entity_t tick_source;       \/* Tick source associated with system *\/$/;"	m	struct:ecs_system_t	typeref:typename:ecs_entity_t	file:
tick_source	$FLECS/$FLECS/flecs.h	/^    ecs_entity_t tick_source;$/;"	m	struct:ecs_system_desc_t	typeref:typename:ecs_entity_t
time	$FLECS/$FLECS/flecs.c	/^    ecs_ftime_t time;$/;"	m	struct:ecs_http_request_entry_t	typeref:typename:ecs_ftime_t	file:
time	$FLECS/$FLECS/flecs.h	/^struct time {$/;"	s	struct:flecs::units
time_elapsed	$FLECS/$FLECS/flecs.h	/^    ecs_ftime_t time_elapsed;  \/**< Time elapsed since last tick *\/$/;"	m	struct:EcsTickSource	typeref:typename:ecs_ftime_t
time_passed	$FLECS/$FLECS/flecs.c	/^    ecs_ftime_t time_passed;        \/* Time passed since last invocation *\/$/;"	m	struct:ecs_system_t	typeref:typename:ecs_ftime_t	file:
time_scale	$FLECS/$FLECS/flecs.h	/^    ecs_ftime_t time_scale;           \/**< Time scale applied to delta_time *\/$/;"	m	struct:ecs_world_info_t	typeref:typename:ecs_ftime_t
time_spent	$FLECS/$FLECS/flecs.c	/^    ecs_ftime_t time_spent;         \/* Time spent on running system *\/$/;"	m	struct:ecs_system_t	typeref:typename:ecs_ftime_t	file:
time_spent	$FLECS/$FLECS/flecs.h	/^    ecs_metric_t time_spent;$/;"	m	struct:ecs_sync_stats_t	typeref:typename:ecs_metric_t
timeout	$FLECS/$FLECS/flecs.h	/^void timeout(ecs_ftime_t timeout);$/;"	p	struct:flecs::system	typeref:typename:void	signature:(ecs_ftime_t timeout)
timer	$FLECS/$FLECS/flecs.h	/^struct timer final : entity {$/;"	s	namespace:flecs
timer_init	$FLECS/$FLECS/flecs.h	/^void timer_init(flecs::world& world);$/;"	p	namespace:flecs::_	typeref:typename:void	signature:(flecs::world & world)
to	$FLECS/$FLECS/flecs.c	/^    ecs_table_t *to;                 \/* Edge destination table *\/$/;"	m	struct:ecs_graph_edge_t	typeref:typename:ecs_table_t *	file:
to_array	$FLECS/$FLECS/flecs.h	/^array<T, Size> to_array(const T (&elems)[Size]) {$/;"	f	namespace:flecs	typeref:typename:array<T,Size>	signature:(const T (& elems)[Size])
to_base	$FLECS/$FLECS/flecs.h	/^    Self& to_base() {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &	signature:()
to_constant	$FLECS/$FLECS/flecs.h	/^struct to_constant {$/;"	s	namespace:flecs::_
to_entity	$FLECS/$FLECS/flecs.h	/^inline flecs::entity world::to_entity(E constant) const {$/;"	f	class:flecs::world	typeref:typename:flecs::entity	signature:(E constant) const
to_expr	$FLECS/$FLECS/flecs.h	/^flecs::string to_expr(flecs::entity_t tid, const void* value) {$/;"	f	struct:flecs::world	typeref:typename:flecs::string	signature:(flecs::entity_t tid,const void * value)
to_int	$FLECS/$FLECS/flecs.h	/^    static constexpr int to_int() {$/;"	f	struct:flecs::_::enum_type	typeref:typename:int	signature:()
to_json	$FLECS/$FLECS/flecs.h	/^flecs::string to_json(flecs::iter_to_json_desc_t *desc = nullptr) {$/;"	f	struct:flecs::iter_iterable	typeref:typename:flecs::string	signature:(flecs::iter_to_json_desc_t * desc=nullptr)
tr	$FLECS/$FLECS/flecs.c	/^    const ecs_table_record_t *tr;$/;"	m	struct:ecs_reachable_elem_t	typeref:typename:const ecs_table_record_t *	file:
tr	$FLECS/$FLECS/flecs.h	/^    struct ecs_table_record_t *tr; \/* Table record for component *\/$/;"	m	struct:ecs_ref_t	typeref:struct:ecs_table_record_t *
trace	$FLECS/$FLECS/flecs.h	/^inline void trace(const char *fmt, ...) {$/;"	f	namespace:flecs::log	typeref:typename:void	signature:(const char * fmt,...)
transcribe_const_t	$FLECS/$FLECS/flecs.h	/^using transcribe_const_t = conditional_t<is_const<Src>::value, Dst const, Dst>;$/;"	t	namespace:flecs	typeref:typename:conditional_t<is_const<Src>::value,Dst const,Dst>
transcribe_cv_t	$FLECS/$FLECS/flecs.h	/^using transcribe_cv_t = transcribe_const_t< Src, transcribe_volatile_t< Src, Dst> >;$/;"	t	namespace:flecs	typeref:typename:transcribe_const_t<Src,transcribe_volatile_t<Src,Dst>>
transcribe_cvp_t	$FLECS/$FLECS/flecs.h	/^using transcribe_cvp_t = transcribe_cv_t< Src, transcribe_pointer_t< Src, Dst> >;$/;"	t	namespace:flecs	typeref:typename:transcribe_cv_t<Src,transcribe_pointer_t<Src,Dst>>
transcribe_pointer_t	$FLECS/$FLECS/flecs.h	/^using transcribe_pointer_t = conditional_t<is_pointer<Src>::value, Dst*, Dst>;$/;"	t	namespace:flecs	typeref:typename:conditional_t<is_pointer<Src>::value,Dst *,Dst>
transcribe_volatile_t	$FLECS/$FLECS/flecs.h	/^using transcribe_volatile_t = conditional_t<is_volatile<Src>::value, Dst volatile, Dst>;$/;"	t	namespace:flecs	typeref:typename:conditional_t<is_volatile<Src>::value,Dst volatile,Dst>
translation	$FLECS/$FLECS/flecs.h	/^    ecs_unit_translation_t translation;$/;"	m	struct:ecs_unit_prefix_desc_t	typeref:typename:ecs_unit_translation_t
trav	$FLECS/$FLECS/flecs.c	/^    ecs_id_record_elem_t trav;    \/* (*, O) with only traversable relationships *\/$/;"	m	struct:ecs_id_record_t	typeref:typename:ecs_id_record_elem_t	file:
trav	$FLECS/$FLECS/flecs.h	/^    ecs_entity_t trav;          \/**< Relationship to traverse when looking for the$/;"	m	struct:ecs_term_id_t	typeref:typename:ecs_entity_t
traversable_count	$FLECS/$FLECS/flecs.c	/^    int32_t traversable_count;       \/* Traversable relationship targets in table *\/$/;"	m	struct:ecs_table__t	typeref:typename:int32_t	file:
trivial	$FLECS/$FLECS/flecs.c	/^        ecs_rule_trivial_ctx_t trivial;$/;"	m	union:ecs_rule_op_ctx_t::__anonb2bcda23310a	typeref:typename:ecs_rule_trivial_ctx_t	file:
true	$FLECS/$FLECS/flecs.h	/^#define true /;"	d
try_get	$FLECS/$FLECS/flecs.h	/^    T* try_get() {$/;"	f	struct:flecs::ref	typeref:typename:T *	signature:()
tvar_index	$FLECS/$FLECS/flecs.c	/^    ecs_hashmap_t tvar_index;     \/* Name index for table variables *\/$/;"	m	struct:ecs_rule_t	typeref:typename:ecs_hashmap_t	file:
type	$FLECS/$FLECS/flecs.c	/^    meta_type_t type;$/;"	m	struct:meta_params_t	typeref:typename:meta_type_t	file:
type	$FLECS/$FLECS/flecs.h	/^struct type {$/;"	s	namespace:flecs
type_count	$FLECS/$FLECS/flecs.h	/^        ecs_metric_t type_count;          \/**< Number of registered types *\/$/;"	m	struct:ecs_world_stats_t::__anonb2bcda281008	typeref:typename:ecs_metric_t
type_hooks_t	$FLECS/$FLECS/flecs.h	/^using type_hooks_t = ecs_type_hooks_t;$/;"	t	namespace:flecs	typeref:typename:ecs_type_hooks_t
type_id	$FLECS/$FLECS/flecs.h	/^inline flecs::entity id::type_id() const {$/;"	f	class:flecs::id	typeref:typename:flecs::entity	signature:() const
type_index	$FLECS/$FLECS/flecs.h	/^    int32_t type_index(flecs::id_t id) const {$/;"	f	struct:flecs::table	typeref:typename:int32_t	signature:(flecs::id_t id) const
type_info	$FLECS/$FLECS/flecs.c	/^    ecs_sparse_t type_info;          \/* sparse<type_id, type_info_t> *\/$/;"	m	struct:ecs_world_t	typeref:typename:ecs_sparse_t	file:
type_info_t	$FLECS/$FLECS/flecs.h	/^using type_info_t = ecs_type_info_t;$/;"	t	namespace:flecs	typeref:typename:ecs_type_info_t
type_kind	$FLECS/$FLECS/flecs.c	/^    ecs_primitive_kind_t type_kind;  \/**< Primitive type kind of member *\/$/;"	m	struct:__anonb2bcda230c08	typeref:typename:ecs_primitive_kind_t	file:
type_kind_t	$FLECS/$FLECS/flecs.h	/^using type_kind_t = ecs_type_kind_t;$/;"	t	namespace:flecs::meta	typeref:typename:ecs_type_kind_t
type_name	$FLECS/$FLECS/flecs.c	/^    const char *type_name; \/* Include name of mixin type so debug code doesn't$/;"	m	struct:ecs_mixins_t	typeref:typename:const char *	file:
type_name	$FLECS/$FLECS/flecs.h	/^inline static const char* type_name() {$/;"	f	namespace:flecs::_	typeref:typename:const char *	signature:()
type_t	$FLECS/$FLECS/flecs.h	/^using type_t = ecs_type_t;$/;"	t	namespace:flecs	typeref:typename:ecs_type_t
type_to_inout	$FLECS/$FLECS/flecs.h	/^    static constexpr flecs::inout_kind_t type_to_inout() {$/;"	f	namespace:flecs::_	typeref:typename:flecs::inout_kind_t	signature:()
type_to_oper	$FLECS/$FLECS/flecs.h	/^    static constexpr flecs::oper_kind_t type_to_oper() {$/;"	f	namespace:flecs::_	typeref:typename:flecs::oper_kind_t	signature:()
u	$FLECS/$FLECS/flecs.c	/^        uint64_t u;$/;"	m	union:flecs_ito_::__anonb2bcda23040a	typeref:typename:uint64_t	file:
u16_t	$FLECS/$FLECS/flecs.h	/^using u16_t = ecs_u16_t;$/;"	t	namespace:flecs	typeref:typename:ecs_u16_t
u32_t	$FLECS/$FLECS/flecs.h	/^using u32_t = ecs_u32_t;$/;"	t	namespace:flecs	typeref:typename:ecs_u32_t
u64_t	$FLECS/$FLECS/flecs.h	/^using u64_t = ecs_u64_t;$/;"	t	namespace:flecs	typeref:typename:ecs_u64_t
u8_t	$FLECS/$FLECS/flecs.h	/^using u8_t = ecs_u8_t;$/;"	t	namespace:flecs	typeref:typename:ecs_u8_t
un_set	$FLECS/$FLECS/flecs.h	/^    ecs_event_record_t un_set;$/;"	m	struct:ecs_observable_t	typeref:typename:ecs_event_record_t
unit	$FLECS/$FLECS/flecs.h	/^Self& unit($/;"	f	struct:flecs::entity_builder	typeref:typename:Self &	signature:(const char * symbol,flecs::entity_t prefix=0,flecs::entity_t base=0,flecs::entity_t over=0,int32_t factor=0,int32_t power=0)
unit_prefix	$FLECS/$FLECS/flecs.h	/^Self& unit_prefix( $/;"	f	struct:flecs::entity_builder	typeref:typename:Self &	signature:(const char * symbol,int32_t factor=0,int32_t power=0)
units	$FLECS/$FLECS/flecs.h	/^units(flecs::world& world);$/;"	p	struct:flecs::units	signature:(flecs::world & world)
unlikely_	$FLECS/$FLECS/flecs.c	/^  #define unlikely_(/;"	d	file:	signature:(x)
untyped_column	$FLECS/$FLECS/flecs.h	/^struct untyped_column {$/;"	s	namespace:flecs
untyped_component	$FLECS/$FLECS/flecs.h	/^struct untyped_component : entity {$/;"	s	namespace:flecs
up	$FLECS/$FLECS/flecs.c	/^    ecs_map_t up;                    \/* map<trigger_id, trigger_t> *\/$/;"	m	struct:ecs_event_id_record_t	typeref:typename:ecs_map_t	file:
up	$FLECS/$FLECS/flecs.h	/^    Base& up(flecs::entity_t trav = 0) {$/;"	f	struct:flecs::term_id_builder_i	typeref:typename:Base &	signature:(flecs::entity_t trav=0)
uptr_t	$FLECS/$FLECS/flecs.h	/^using uptr_t = ecs_uptr_t;$/;"	t	namespace:flecs	typeref:typename:ecs_uptr_t
uri	$FLECS/$FLECS/flecs.h	/^struct uri {$/;"	s	struct:flecs::units
use	$FLECS/$FLECS/flecs.h	/^inline void world::use(flecs::entity e, const char *alias) const {$/;"	f	class:flecs::world	typeref:typename:void	signature:(flecs::entity e,const char * alias) const
use_low_id	$FLECS/$FLECS/flecs.h	/^    bool use_low_id;      \/**< When set to true, a low id (typically reserved for$/;"	m	struct:ecs_entity_desc_t	typeref:typename:bool
used	$FLECS/$FLECS/flecs.h	/^    ecs_flags8_t used;       \/* For which fields is the cache used *\/$/;"	m	struct:ecs_iter_cache_t	typeref:typename:ecs_flags8_t
using	$FLECS/$FLECS/flecs.c	/^    ecs_entity_t using[STACK_MAX_SIZE];$/;"	m	struct:__anonb2bcda231908	typeref:typename:ecs_entity_t[]	file:
using_	$FLECS/$FLECS/flecs.h	/^    ecs_vec_t using_;$/;"	m	struct:EcsScript	typeref:typename:ecs_vec_t
using_frame	$FLECS/$FLECS/flecs.c	/^    int32_t using_frame;$/;"	m	struct:__anonb2bcda231908	typeref:typename:int32_t	file:
using_frames	$FLECS/$FLECS/flecs.c	/^    int32_t using_frames[STACK_MAX_SIZE];$/;"	m	struct:__anonb2bcda231908	typeref:typename:int32_t[]	file:
using_task_threads	$FLECS/$FLECS/flecs.h	/^inline bool world::using_task_threads() const {$/;"	f	class:flecs::world	typeref:typename:bool	signature:() const
valid	$FLECS/$FLECS/flecs.h	/^    bool valid;$/;"	m	struct:ecs_meta_cursor_t	typeref:typename:bool
value	$FLECS/$FLECS/flecs.c	/^    void *value;                     \/* Component value (used by set \/ get_mut) *\/$/;"	m	struct:ecs_cmd_1_t	typeref:typename:void *	file:
value	$FLECS/$FLECS/flecs.h	/^inline int ecs_serializer_t::value(ecs_entity_t type, const void *v) const {$/;"	f	class:ecs_serializer_t	typeref:typename:int	signature:(ecs_entity_t type,const void * v) const
value_	$FLECS/$FLECS/flecs.h	/^    int (*value_)($/;"	m	struct:ecs_serializer_t	typeref:typename:int (*)(const struct ecs_serializer_t * ser,ecs_entity_t type,const void * value)
value_size	$FLECS/$FLECS/flecs.h	/^    ecs_size_t value_size;$/;"	m	struct:__anonb2bcda280408	typeref:typename:ecs_size_t
values	$FLECS/$FLECS/flecs.c	/^    ecs_vec_t values;   \/* vec<uint64_t> *\/$/;"	m	struct:ecs_switch_t	typeref:typename:ecs_vec_t	file:
values	$FLECS/$FLECS/flecs.h	/^    ecs_vec_t values;$/;"	m	struct:__anonb2bcda280308	typeref:typename:ecs_vec_t
var	$FLECS/$FLECS/flecs.c	/^    ecs_var_id_t var;$/;"	m	union:__anonb2bcda23210a	typeref:typename:ecs_var_id_t	file:
var	$FLECS/$FLECS/flecs.h	/^    const char *var;$/;"	m	struct:ecs_alert_desc_t	typeref:typename:const char *
var_count	$FLECS/$FLECS/flecs.c	/^    int32_t var_count;            \/* Number of variables *\/$/;"	m	struct:ecs_rule_t	typeref:typename:int32_t	file:
var_id	$FLECS/$FLECS/flecs.c	/^    int32_t var_id;             \/* Variable from which to obtain data (0 = $this) *\/$/;"	m	struct:EcsAlert	typeref:typename:int32_t	file:
var_index	$FLECS/$FLECS/flecs.h	/^    ecs_hashmap_t var_index;$/;"	m	struct:ecs_expr_var_scope_t	typeref:typename:ecs_hashmap_t
var_is_prop	$FLECS/$FLECS/flecs.c	/^    bool var_is_prop;$/;"	m	struct:__anonb2bcda231908	typeref:typename:bool	file:
var_name	$FLECS/$FLECS/flecs.c	/^    char var_name[256];$/;"	m	struct:__anonb2bcda231908	typeref:typename:char[256]	file:
var_names	$FLECS/$FLECS/flecs.c	/^    char **var_names;             \/* Array with variable names for iterator *\/$/;"	m	struct:ecs_rule_t	typeref:typename:char **	file:
var_pub_count	$FLECS/$FLECS/flecs.c	/^    int32_t var_pub_count;        \/* Number of public variables *\/$/;"	m	struct:ecs_rule_t	typeref:typename:int32_t	file:
var_size	$FLECS/$FLECS/flecs.c	/^    int32_t var_size;             \/* Used for out of bounds check during compilation *\/$/;"	m	struct:ecs_rule_t	typeref:typename:int32_t	file:
var_stmt	$FLECS/$FLECS/flecs.c	/^    bool var_stmt;$/;"	m	struct:__anonb2bcda231908	typeref:typename:bool	file:
var_type	$FLECS/$FLECS/flecs.c	/^    ecs_entity_t var_type;$/;"	m	struct:__anonb2bcda231908	typeref:typename:ecs_entity_t	file:
variable_count	$FLECS/$FLECS/flecs.h	/^    int32_t variable_count;       \/* Number of variables for query *\/$/;"	m	struct:ecs_iter_t	typeref:typename:int32_t
variable_names	$FLECS/$FLECS/flecs.h	/^    char *variable_names[1];   \/**< Placeholder variable names array *\/$/;"	m	struct:ecs_filter_t	typeref:typename:char * [1]
variables	$FLECS/$FLECS/flecs.c	/^    ecs_vec_t variables;$/;"	m	struct:ecs_stage_t	typeref:typename:ecs_vec_t	file:
variables	$FLECS/$FLECS/flecs.h	/^    ecs_var_t *variables;         \/* Values of variables (if any) *\/$/;"	m	struct:ecs_iter_t	typeref:typename:ecs_var_t *
vars	$FLECS/$FLECS/flecs.c	/^    ecs_vars_t vars;$/;"	m	struct:__anonb2bcda231908	typeref:typename:ecs_vars_t	file:
vars	$FLECS/$FLECS/flecs.h	/^    struct ecs_var_t *vars;              \/* Variable storage *\/$/;"	m	struct:ecs_rule_iter_t	typeref:struct:ecs_var_t *
vars_cache	$FLECS/$FLECS/flecs.c	/^    ecs_rule_var_cache_t vars_cache; \/* For trivial rules with only This variables *\/$/;"	m	struct:ecs_rule_t	typeref:typename:ecs_rule_var_cache_t	file:
vector	$FLECS/$FLECS/flecs.h	/^inline flecs::entity world::vector(flecs::entity_t elem_id) {$/;"	f	class:flecs::world	typeref:typename:flecs::entity	signature:(flecs::entity_t elem_id)
view	$FLECS/$FLECS/flecs.h	/^    flecs::entity_view view() const {$/;"	f	struct:flecs::entity	typeref:typename:flecs::entity_view	signature:() const
wait_ms	$FLECS/$FLECS/flecs.c	/^    int32_t wait_ms;$/;"	m	struct:ecs_http_send_queue_t	typeref:typename:int32_t	file:
warn	$FLECS/$FLECS/flecs.h	/^inline void warn(const char *fmt, ...) {$/;"	f	namespace:flecs::log	typeref:typename:void	signature:(const char * fmt,...)
warning	$FLECS/$FLECS/flecs.h	/^    ecs_member_value_range_t warning;$/;"	m	struct:EcsMemberRanges	typeref:typename:ecs_member_value_range_t
warning_count	$FLECS/$FLECS/flecs.h	/^    int32_t warning_count;$/;"	m	struct:EcsAlertsActive	typeref:typename:int32_t
warning_range	$FLECS/$FLECS/flecs.h	/^untyped_component& warning_range(double min, double max) {$/;"	f	struct:flecs::untyped_component	typeref:typename:untyped_component &	signature:(double min,double max)
wildcard	$FLECS/$FLECS/flecs.h	/^    struct ecs_event_id_record_t *wildcard;$/;"	m	struct:ecs_event_record_t	typeref:struct:ecs_event_id_record_t *
wildcard_ids	$FLECS/$FLECS/flecs.c	/^    ecs_map_t wildcard_ids;$/;"	m	struct:ecs_write_state_t	typeref:typename:ecs_map_t	file:
wildcard_pair	$FLECS/$FLECS/flecs.h	/^    struct ecs_event_id_record_t *wildcard_pair;$/;"	m	struct:ecs_event_record_t	typeref:struct:ecs_event_id_record_t *
win_adec	$FLECS/$FLECS/flecs.c	/^int32_t win_adec($/;"	f	typeref:typename:int32_t	file:	signature:(int32_t * count)
win_ainc	$FLECS/$FLECS/flecs.c	/^int32_t win_ainc($/;"	f	typeref:typename:int32_t	file:	signature:(int32_t * count)
win_cond_broadcast	$FLECS/$FLECS/flecs.c	/^void win_cond_broadcast($/;"	f	typeref:typename:void	file:	signature:(ecs_os_cond_t c)
win_cond_free	$FLECS/$FLECS/flecs.c	/^void win_cond_free($/;"	f	typeref:typename:void	file:	signature:(ecs_os_cond_t c)
win_cond_new	$FLECS/$FLECS/flecs.c	/^ecs_os_cond_t win_cond_new(void) {$/;"	f	typeref:typename:ecs_os_cond_t	file:	signature:(void)
win_cond_signal	$FLECS/$FLECS/flecs.c	/^void win_cond_signal($/;"	f	typeref:typename:void	file:	signature:(ecs_os_cond_t c)
win_cond_wait	$FLECS/$FLECS/flecs.c	/^void win_cond_wait($/;"	f	typeref:typename:void	file:	signature:(ecs_os_cond_t c,ecs_os_mutex_t m)
win_current_resolution	$FLECS/$FLECS/flecs.c	/^static ULONG win_current_resolution;$/;"	v	typeref:typename:ULONG	file:
win_enable_high_timer_resolution	$FLECS/$FLECS/flecs.c	/^void win_enable_high_timer_resolution(bool enable)$/;"	f	typeref:typename:void	file:	signature:(bool enable)
win_fini	$FLECS/$FLECS/flecs.c	/^void win_fini(void) {$/;"	f	typeref:typename:void	file:	signature:(void)
win_ladec	$FLECS/$FLECS/flecs.c	/^int64_t win_ladec($/;"	f	typeref:typename:int64_t	file:	signature:(int64_t * count)
win_lainc	$FLECS/$FLECS/flecs.c	/^int64_t win_lainc($/;"	f	typeref:typename:int64_t	file:	signature:(int64_t * count)
win_mutex_free	$FLECS/$FLECS/flecs.c	/^void win_mutex_free($/;"	f	typeref:typename:void	file:	signature:(ecs_os_mutex_t m)
win_mutex_lock	$FLECS/$FLECS/flecs.c	/^void win_mutex_lock($/;"	f	typeref:typename:void	file:	signature:(ecs_os_mutex_t m)
win_mutex_new	$FLECS/$FLECS/flecs.c	/^ecs_os_mutex_t win_mutex_new(void) {$/;"	f	typeref:typename:ecs_os_mutex_t	file:	signature:(void)
win_mutex_unlock	$FLECS/$FLECS/flecs.c	/^void win_mutex_unlock($/;"	f	typeref:typename:void	file:	signature:(ecs_os_mutex_t m)
win_sleep	$FLECS/$FLECS/flecs.c	/^void win_sleep($/;"	f	typeref:typename:void	file:	signature:(int32_t sec,int32_t nanosec)
win_thread_join	$FLECS/$FLECS/flecs.c	/^void* win_thread_join($/;"	f	typeref:typename:void *	file:	signature:(ecs_os_thread_t thr)
win_thread_new	$FLECS/$FLECS/flecs.c	/^ecs_os_thread_t win_thread_new($/;"	f	typeref:typename:ecs_os_thread_t	file:	signature:(ecs_os_thread_callback_t callback,void * arg)
win_thread_self	$FLECS/$FLECS/flecs.c	/^ecs_os_thread_id_t win_thread_self(void)$/;"	f	typeref:typename:ecs_os_thread_id_t	file:	signature:(void)
win_time_freq	$FLECS/$FLECS/flecs.c	/^static double win_time_freq;$/;"	v	typeref:typename:double	file:
win_time_initialized	$FLECS/$FLECS/flecs.c	/^static bool win_time_initialized;$/;"	v	typeref:typename:bool	file:
win_time_now	$FLECS/$FLECS/flecs.c	/^uint64_t win_time_now(void) {$/;"	f	typeref:typename:uint64_t	file:	signature:(void)
win_time_setup	$FLECS/$FLECS/flecs.c	/^void win_time_setup(void) {$/;"	f	typeref:typename:void	file:	signature:(void)
win_time_start	$FLECS/$FLECS/flecs.c	/^static LARGE_INTEGER win_time_start;$/;"	v	typeref:typename:LARGE_INTEGER	file:
with	$FLECS/$FLECS/flecs.c	/^    ecs_id_t with;$/;"	m	struct:__anonb2bcda232708	typeref:typename:ecs_id_t	file:
with	$FLECS/$FLECS/flecs.h	/^    void with(id_t with_id, const Func& func) const {$/;"	f	struct:flecs::world	typeref:typename:void	signature:(id_t with_id,const Func & func) const
with_frame	$FLECS/$FLECS/flecs.c	/^    int32_t with_frame;$/;"	m	struct:__anonb2bcda231908	typeref:typename:int32_t	file:
with_frames	$FLECS/$FLECS/flecs.c	/^    int32_t with_frames[STACK_MAX_SIZE];$/;"	m	struct:__anonb2bcda231908	typeref:typename:int32_t[]	file:
with_stmt	$FLECS/$FLECS/flecs.c	/^    bool with_stmt;$/;"	m	struct:__anonb2bcda231908	typeref:typename:bool	file:
with_value_frames	$FLECS/$FLECS/flecs.c	/^    plecs_with_value_t with_value_frames[STACK_MAX_SIZE];$/;"	m	struct:__anonb2bcda231908	typeref:typename:plecs_with_value_t[]	file:
without	$FLECS/$FLECS/flecs.h	/^    Base& without(Args&&... args) {$/;"	f	struct:flecs::filter_builder_i	typeref:typename:Base &	signature:(Args &&...args)
worker	$FLECS/$FLECS/flecs.h	/^worker_iterable<Components...> iterable<Components...>::worker($/;"	f	class:flecs::iterable	typeref:typename:worker_iterable<Components...>	signature:(int32_t index,int32_t count)
worker_cond	$FLECS/$FLECS/flecs.c	/^    ecs_os_cond_t worker_cond;       \/* Signal that worker threads can start *\/$/;"	m	struct:ecs_world_t	typeref:typename:ecs_os_cond_t	file:
worker_iterable	$FLECS/$FLECS/flecs.h	/^struct worker_iterable final : iterable<Components...> {$/;"	s	namespace:flecs
workers_running	$FLECS/$FLECS/flecs.c	/^    int32_t workers_running;         \/* Number of threads running *\/$/;"	m	struct:ecs_world_t	typeref:typename:int32_t	file:
workers_use_task_api	$FLECS/$FLECS/flecs.c	/^    bool workers_use_task_api;       \/* Workers are short-lived tasks, not long-running threads/;"	m	struct:ecs_world_t	typeref:typename:bool	file:
workers_waiting	$FLECS/$FLECS/flecs.c	/^    int32_t workers_waiting;         \/* Number of workers waiting on sync *\/$/;"	m	struct:ecs_world_t	typeref:typename:int32_t	file:
world	$FLECS/$FLECS/flecs.c	/^    ecs_world_t *world;$/;"	m	struct:ecs_system_t	typeref:typename:ecs_world_t *	file:
world	$FLECS/$FLECS/flecs.h	/^struct world {$/;"	s	namespace:flecs
world_	$FLECS/$FLECS/flecs.h	/^    flecs::world_t *world_;$/;"	m	struct:flecs::enum_data	typeref:typename:flecs::world_t *
world_info_t	$FLECS/$FLECS/flecs.h	/^using world_info_t = ecs_world_info_t;$/;"	t	namespace:flecs	typeref:typename:ecs_world_info_t
world_start_time	$FLECS/$FLECS/flecs.c	/^    ecs_time_t world_start_time;     \/* Timestamp of simulation start *\/$/;"	m	struct:ecs_world_t	typeref:typename:ecs_time_t	file:
world_t	$FLECS/$FLECS/flecs.h	/^using world_t = ecs_world_t;$/;"	t	namespace:flecs	typeref:typename:ecs_world_t
world_time	$FLECS/$FLECS/flecs.h	/^        ecs_metric_t world_time;           \/**< Simulation time passed since simulation start. /;"	m	struct:ecs_world_stats_t::__anonb2bcda281508	typeref:typename:ecs_metric_t
world_time_raw	$FLECS/$FLECS/flecs.h	/^        ecs_metric_t world_time_raw;       \/**< Actual time passed since simulation start (firs/;"	m	struct:ecs_world_stats_t::__anonb2bcda281508	typeref:typename:ecs_metric_t
world_time_total	$FLECS/$FLECS/flecs.h	/^    ecs_ftime_t world_time_total;     \/**< Time elapsed in simulation *\/$/;"	m	struct:ecs_world_info_t	typeref:typename:ecs_ftime_t
world_time_total_raw	$FLECS/$FLECS/flecs.h	/^    ecs_ftime_t world_time_total_raw; \/**< Time elapsed in simulation (no scaling) *\/$/;"	m	struct:ecs_world_info_t	typeref:typename:ecs_ftime_t
world_v	$FLECS/$FLECS/flecs.h	/^    virtual flecs::world_t* world_v() = 0;$/;"	p	struct:flecs::term_id_builder_i	typeref:typename:flecs::world_t *	signature:()
write	$FLECS/$FLECS/flecs.h	/^    Base& write(Args&&... args) {$/;"	f	struct:flecs::filter_builder_i	typeref:typename:Base &	signature:(Args &&...args)
write_barrier	$FLECS/$FLECS/flecs.c	/^    bool write_barrier;$/;"	m	struct:ecs_write_state_t	typeref:typename:bool	file:
written	$FLECS/$FLECS/flecs.c	/^    uint64_t *written;            \/* Bitset to check which variables have been written *\/$/;"	m	struct:__anonb2bcda233408	typeref:typename:uint64_t *	file:
written	$FLECS/$FLECS/flecs.h	/^    uint64_t *written;$/;"	m	struct:ecs_rule_iter_t	typeref:typename:uint64_t *
wyhash	$FLECS/$FLECS/flecs.c	/^static inline uint64_t wyhash(const void *key, size_t len, uint64_t seed, const uint64_t *secret/;"	f	typeref:typename:uint64_t	file:	signature:(const void * key,size_t len,uint64_t seed,const uint64_t * secret)
wymix_	$FLECS/$FLECS/flecs.c	/^static inline uint64_t wymix_(uint64_t A, uint64_t B){ wymum_(&A,&B); return A^B; }$/;"	f	typeref:typename:uint64_t	file:	signature:(uint64_t A,uint64_t B)
wymum_	$FLECS/$FLECS/flecs.c	/^static inline void wymum_(uint64_t *A, uint64_t *B){$/;"	f	typeref:typename:void	file:	signature:(uint64_t * A,uint64_t * B)
wyp_	$FLECS/$FLECS/flecs.c	/^static const uint64_t wyp_[4] = {0xa0761d6478bd642full, 0xe7037ed1a0b428dbull, 0x8ebc6af09c88c6e/;"	v	typeref:typename:const uint64_t[4]	file:
wyr3_	$FLECS/$FLECS/flecs.c	/^static inline uint64_t wyr3_(const uint8_t *p, size_t k) { return (((uint64_t)p[0])<<16)|(((uint/;"	f	typeref:typename:uint64_t	file:	signature:(const uint8_t * p,size_t k)
wyr4_	$FLECS/$FLECS/flecs.c	/^static inline uint64_t wyr4_(const uint8_t *p) {$/;"	f	typeref:typename:uint64_t	file:	signature:(const uint8_t * p)
wyr8_	$FLECS/$FLECS/flecs.c	/^static inline uint64_t wyr8_(const uint8_t *p) {$/;"	f	typeref:typename:uint64_t	file:	signature:(const uint8_t * p)
yield_existing	$FLECS/$FLECS/flecs.h	/^    bool yield_existing;$/;"	m	struct:ecs_observer_desc_t	typeref:typename:bool
yield_reflexive	$FLECS/$FLECS/flecs.c	/^    bool yield_reflexive;$/;"	m	struct:__anonb2bcda232a08	typeref:typename:bool	file:
